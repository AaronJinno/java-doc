const nt="ENTRIES",T="KEYS",V="VALUES",F="";class D{constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case V:return this.value();case T:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ot=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return W(e,t,s,n,i,1,o,""),n},W=(e,t,s,n,o,u,i,r)=>{const h=u*i;t:for(const c of e.keys())if(c===F){const a=o[h-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let l=0;l<c.length;++l,++a){const p=c[l],f=i*a,g=f-i;let d=o[f];const m=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let _=m;_<y;++_){const b=p!==t[_],z=o[g+_]+ +b,A=o[g+_+1]+1,w=o[f+_]+1,L=o[f+_+1]=Math.min(z,A,w);L<d&&(d=L)}if(d>s)continue t}W(e.get(c),t,s,n,o,a,i,r+c)}};class C{constructor(t=new Map,s=""){this._size=void 0,this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=I(n);for(const i of o.keys())if(i!==F&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ut(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ot(this._tree,t,s)}get(t){const s=O(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=O(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,T)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,M(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);let o=n.get(F);return o===void 0&&n.set(F,o=s()),o}values(){return new D(this,V)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},O=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return O(e.get(s),t.slice(s.length))},M=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==F&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const h=e.get(u);if(r===u.length)e=h;else{const c=new Map;c.set(u.slice(r),h),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ut=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)R(n);else if(s.size===1){const[o,u]=s.entries().next().value;$(n,o,u)}}},R=e=>{if(e.length===0)return;const[t,s]=I(e);if(t.delete(s),t.size===0)R(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==F&&$(e.slice(0,-1),n,o)}},$=(e,t,s)=>{if(e.length===0)return;const[n,o]=I(e);n.set(o+t,s),n.delete(o)},I=e=>e[e.length-1],it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",P="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},q=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},G=({score:e},{score:t})=>t-e,lt=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},N=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),q(n.terms,u)}}return e},[P]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);q(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,o,u)=>{const{k:i,b:r,d:h}=u;return Math.log(1+(s-t+.5)/(t+.5))*(h+e*(i+1)/(e+i*(1-r+r*n/o)))},dt=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},ft={k:1.2,b:.7,d:.5},gt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof(console==null?void 0:console[e])=="function"&&console[e](t)},autoVacuum:!0},H={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:ft},mt={combineWith:P,prefix:(e,t,s)=>t===s.length-1},pt={batchSize:1e3,batchWait:10},J={minDirtFactor:.1,minDirtCount:20},Ft={...pt,...J};class _t{constructor(t){if((t==null?void 0:t.fields)==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?Ft:t.autoVacuum;this._options={...gt,...t,autoVacuum:s,searchOptions:{...H,...t.searchOptions||{}},autoSuggestOptions:{...mt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=J,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const yt=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},U=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},At=(e,t,s,n)=>{if(!e._index.has(n)){U(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?U(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(ht[s])||new Map},B=(e,t,s,n,o,u,i,r,h=new Map)=>{if(o==null)return h;for(const c of Object.keys(u)){const a=u[c],l=e._fieldIds[c],p=o.get(l);if(p==null)continue;let f=p.size;const g=e._avgFieldLength[l];for(const d of p.keys()){if(!e._documentIds.has(d)){At(e,l,d,s),f-=1;continue}const m=i?i(e._documentIds.get(d),s,e._storedFields.get(d)):1;if(!m)continue;const y=p.get(d),_=e._fieldLength.get(d)[l],b=at(y,f,e._documentCount,_,g,r),z=n*a*m*b,A=h.get(d);if(A){A.score+=z,ct(A.terms,t);const w=N(A.match,s);w?w.push(c):A.match[s]=[c]}else h.set(d,{score:z,terms:[t],match:{[s]:[c]}})}}return h},Ct=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((d,m)=>({...d,[m]:N(n.boost,m)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:h}=n,{fuzzy:c,prefix:a}={...H.weights,...i},l=e._index.get(t.term),p=B(e,t.term,t.term,1,l,o,u,h);let f,g;if(t.prefix&&(f=e._index.atPrefix(t.term)),t.fuzzy){const d=t.fuzzy===!0?.2:t.fuzzy,m=d<1?Math.min(r,Math.round(t.term.length*d)):d;m&&(g=e._index.fuzzyGet(t.term,m))}if(f)for(const[d,m]of f){const y=d.length-t.term.length;if(!y)continue;g==null||g.delete(d);const _=a*d.length/(d.length+.3*y);B(e,t.term,d,_,m,o,u,h,p)}if(g)for(const d of g.keys()){const[m,y]=g.get(d);if(!y)continue;const _=c*d.length/(d.length+y);B(e,t.term,d,_,m,o,u,h,p)}return p},K=(e,t,s={})=>{if(typeof t!="string"){const a={...s,...t,queries:void 0},l=t.queries.map(p=>K(e,p,a));return Y(l,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:h}=i,c=r(t).flatMap(a=>h(a)).filter(a=>!!a).map(dt(i)).map(a=>Ct(e,a,i));return Y(c,i.combineWith)},X=(e,t,s={})=>{const n=K(e,t,s),o=[];for(const[u,{score:i,terms:r,match:h}]of n){const c=r.length,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(h),match:h};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return o.sort(G),o},Et=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of X(e,t,s)){const r=i.join(" "),h=n.get(r);h!=null?(h.score+=u,h.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:h}]of n)o.push({suggestion:u,terms:r,score:i/h});return o.sort(G),o},zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:h,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const l=new _t(a);l._documentCount=t,l._nextId=s,l._documentIds=k(n),l._idToShortId=new Map,l._fieldIds=o,l._fieldLength=k(u),l._avgFieldLength=i,l._storedFields=k(r),l._dirtCount=h||0,l._index=new C;for(const[p,f]of l._documentIds)l._idToShortId.set(f,p);for(const[p,f]of e){const g=new Map;for(const d of Object.keys(f)){let m=f[d];c===1&&(m=m.ds),g.set(parseInt(d,10),k(m))}l._index.set(p,g)}return l},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let l="";i===0?l=c.length>20?`… ${c.slice(-20)}`:c:a?l=c.length+i>100?`${c.slice(0,100-i)}… `:c:l=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,l&&o.push(l),i+=l.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let h=s.indexOf(n,u);if(h===-1)return null;for(;h>=0;){const c=h+n.length;if(r(e.slice(u,h)),u=c,i>100)break;h=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return X(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(o=>{const{id:u,terms:i,score:r}=o,h=u.includes("@"),c=u.includes("#"),[a,l]=u.split(/[#@]/),{contents:p}=n[a]??={title:"",contents:[]};if(h)p.push([{type:"customField",key:a,index:l,display:i.map(f=>o.c.map(g=>j(g,f))).flat().filter(f=>f!==null)},r]);else{const f=i.map(g=>j(o.h,g)).filter(g=>g!==null);if(f.length&&p.push([{type:c?"heading":"title",key:a,...c&&{anchor:l},display:f},r]),"t"in o)for(const g of o.t){const d=i.map(m=>j(g,m)).filter(m=>m!==null);d.length&&p.push([{type:"text",key:a,...c&&{anchor:l},display:d},r])}}}),Q(n).sort(([,o],[,u])=>"max"==="total"?xt(o,u):kt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=yt(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Et(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":3274,\"nextId\":3274,\"documentIds\":{\"0\":\"v-fffb8e28\",\"1\":\"v-09eb70ab\",\"2\":\"v-09eb70ab#项目初始化\",\"3\":\"v-09eb70ab#java\",\"4\":\"v-09eb70ab#框架\",\"5\":\"v-09eb70ab#微服务\",\"6\":\"v-09eb70ab#sql\",\"7\":\"v-09eb70ab#服务端\",\"8\":\"v-09eb70ab#devtool\",\"9\":\"v-96ccce3a\",\"10\":\"v-96ccce3a#站点内容地图\",\"11\":\"v-96ccce3a#java学习顺序\",\"12\":\"v-14c0e823\",\"13\":\"v-b2aeabc0\",\"14\":\"v-7cb8733b\",\"15\":\"v-58f3e54b\",\"16\":\"v-61ce9c38\",\"17\":\"v-2c452238\",\"18\":\"v-283f2e43\",\"19\":\"v-805bcbd6\",\"20\":\"v-2c1f2d30\",\"21\":\"v-2c1f2d30#_1-软件开发流程\",\"22\":\"v-2c1f2d30#_2-角色分工\",\"23\":\"v-2c1f2d30#_3-软件环境\",\"24\":\"v-cfd8e348\",\"25\":\"v-0e153f58\",\"26\":\"v-7aac2bfa\",\"27\":\"v-3f989e78\",\"28\":\"v-7f862bd6\",\"29\":\"v-f976cbdc\",\"30\":\"v-0f5da1fa\",\"31\":\"v-23f57c4e\",\"32\":\"v-4f3d8174\",\"33\":\"v-4f3d8174#jdk-常用类\",\"34\":\"v-4f3d8174#jdk-util包\",\"35\":\"v-4f3d8174#other\",\"36\":\"v-735d6ea1\",\"37\":\"v-2466e178\",\"38\":\"v-41d73924\",\"39\":\"v-5754cb9f\",\"40\":\"v-7ae11416\",\"41\":\"v-1085741c\",\"42\":\"v-e0934ad8\",\"43\":\"v-48411b91\",\"44\":\"v-6f11ae20\",\"45\":\"v-3bf3b9c6\",\"46\":\"v-8acce1b0\",\"47\":\"v-7e407c25\",\"48\":\"v-c5ed1ec8\",\"49\":\"v-537cacce\",\"50\":\"v-5f50a4e4\",\"51\":\"v-0e44d48b\",\"52\":\"v-58ba60b0\",\"53\":\"v-877d86b6\",\"54\":\"v-4791705c\",\"55\":\"v-5817eacf\",\"56\":\"v-1762ff32\",\"57\":\"v-a5688338\",\"58\":\"v-4bca14b0\",\"59\":\"v-19993ab6\",\"60\":\"v-f55442d2\",\"61\":\"v-34e9ec94\",\"62\":\"v-496c42e7\",\"63\":\"v-d881fe38\",\"64\":\"v-50d3b92e\",\"65\":\"v-23697faa\",\"66\":\"v-05918a78\",\"67\":\"v-05918a78#_1-简介\",\"68\":\"v-05918a78#_2-springboot的特点\",\"69\":\"v-05918a78#_3-需要学习的内容\",\"70\":\"v-1b838722\",\"71\":\"v-1b838722#_1-spring-initializr\",\"72\":\"v-1b838722#_2-配置工程\",\"73\":\"v-1b838722#_3-网络问题\",\"74\":\"v-1b838722#_4-构建结果\",\"75\":\"v-1b838722#_5-注意事项\",\"76\":\"v-1b838722#_5-1-pom-xml\",\"77\":\"v-1b838722#_5-2-启动类\",\"78\":\"v-1b838722#_5-3-依赖版本\",\"79\":\"v-1b838722#_6-隐藏无用的文件\",\"80\":\"v-1b838722#_7-其他方式创建springboot项目\",\"81\":\"v-1b838722#_7-1-使用官网创建springboot项目\",\"82\":\"v-1b838722#_7-2-手动创建项目\",\"83\":\"v-58f9eea8\",\"84\":\"v-58f9eea8#i-使用springboot\",\"85\":\"v-58f9eea8#_1-创建controller\",\"86\":\"v-58f9eea8#_2-启动项目\",\"87\":\"v-58f9eea8#_3-访问servlet\",\"88\":\"v-58f9eea8#_4-springboot做了什么\",\"89\":\"v-58f9eea8#_5-总结\",\"90\":\"v-58f9eea8#ii-统一依赖管理\",\"91\":\"v-58f9eea8#_1-maven-pom\",\"92\":\"v-58f9eea8#_2-springboot-中的-pom\",\"93\":\"v-58f9eea8#_2-1-pox-xml的parent\",\"94\":\"v-58f9eea8#_2-2-pring-boot-starter-parent\",\"95\":\"v-58f9eea8#_2-3-spring-boot-dependencies\",\"96\":\"v-58f9eea8#_4-springboot依赖管理总结\",\"97\":\"v-58f9eea8#_5-注意事项\",\"98\":\"v-58f9eea8#iii-starter\",\"99\":\"v-58f9eea8#_1-什么是starter\",\"100\":\"v-58f9eea8#_2-意义\",\"101\":\"v-58f9eea8#_3-starter与parent\",\"102\":\"v-58f9eea8#iv-引导类\",\"103\":\"v-58f9eea8#引导类-xxxapplication\",\"104\":\"v-58f9eea8#_2-容器\",\"105\":\"v-58f9eea8#_3-springbootapplication\",\"106\":\"v-58f9eea8#_4-总结\",\"107\":\"v-58f9eea8#v-辅助功能\",\"108\":\"v-58f9eea8#_1-内嵌tomcat\",\"109\":\"v-58f9eea8#_1-1-tomcat依赖的位置\",\"110\":\"v-58f9eea8#_1-2-不使用内嵌服务器\",\"111\":\"v-58f9eea8#_1-3-替换别的服务器\",\"112\":\"v-5f0fc8f4\",\"113\":\"v-5f0fc8f4#_1-默认配置文件\",\"114\":\"v-5f0fc8f4#_2-文件名\",\"115\":\"v-5f0fc8f4#_3-文件格式\",\"116\":\"v-5f0fc8f4#_4-多个配置文件\",\"117\":\"v-5f0fc8f4#_4-1-多格式配置文件\",\"118\":\"v-5f0fc8f4#_4-2-其他类型配置文件\",\"119\":\"v-5f0fc8f4#_5-debug\",\"120\":\"v-997e0fde\",\"121\":\"v-997e0fde#i-配置yml\",\"122\":\"v-997e0fde#_1-yaml语法规则\",\"123\":\"v-997e0fde#_2-字面量表示方式\",\"124\":\"v-997e0fde#_3-数组表示方式\",\"125\":\"v-997e0fde#_4-yml文件中的变量引用\",\"126\":\"v-997e0fde#ii-读取yml\",\"127\":\"v-997e0fde#_1-读取yml数据\",\"128\":\"v-997e0fde#_2-读取yaml全部属性数据\",\"129\":\"v-997e0fde#_3-读取yml引用类型数据\",\"130\":\"v-997e0fde#_3-1-待封装的数据\",\"131\":\"v-997e0fde#_3-2-创建数据对象\",\"132\":\"v-997e0fde#_3-3-注入数据并使用\",\"133\":\"v-726603e4\",\"134\":\"v-726603e4#_1-热部署实现原理\",\"135\":\"v-726603e4#_1-1-非springboot项目热部署实现原理\",\"136\":\"v-726603e4#_1-2-springboot项目热部署实现原理\",\"137\":\"v-726603e4#_2-重启与重载\",\"138\":\"v-726603e4#_2-1-重启-restart\",\"139\":\"v-726603e4#_2-2-重载reload\",\"140\":\"v-726603e4#_3-手动启动热部署\",\"141\":\"v-726603e4#_3-1-导入坐标\",\"142\":\"v-726603e4#_3-2-构建项目\",\"143\":\"v-726603e4#_3-3-问题\",\"144\":\"v-726603e4#_4-自动启动热部署\",\"145\":\"v-726603e4#_4-1-设置-自动构建项目build-project\",\"146\":\"v-726603e4#_4-2-设置-允许在程序运行时进行自动构建\",\"147\":\"v-726603e4#_4-3-热部署的时机\",\"148\":\"v-726603e4#_5-热部署监控的文件范围\",\"149\":\"v-726603e4#_5-1-默认不参与热部署的目录\",\"150\":\"v-726603e4#_5-2-修改不参与热部署的目录或文件\",\"151\":\"v-726603e4#_6-关闭热部署\",\"152\":\"v-726603e4#_6-1-通过配置强制关闭热部署\",\"153\":\"v-726603e4#_6-2-通过启动类强制关闭热部署\",\"154\":\"v-080cac18\",\"155\":\"v-080cac18#i-第三方bean属性\",\"156\":\"v-080cac18#_1-configurationproperties\",\"157\":\"v-080cac18#_2-configurationproperties绑定第三方bean\",\"158\":\"v-080cac18#_2-1-将第三方类加入ioc\",\"159\":\"v-080cac18#_2-2-在yml配置文件中定义要绑定的属性\",\"160\":\"v-080cac18#_2-3-用-configurationproperties注解为第三方bean进行属性绑定\",\"161\":\"v-080cac18#_2-4-总结\",\"162\":\"v-080cac18#_3-enableconfigurationproperties\",\"163\":\"v-080cac18#_3-1-配置类统一管理\",\"164\":\"v-080cac18#_3-2-使用-configurationproperties的类\",\"165\":\"v-080cac18#_4-debug\",\"166\":\"v-080cac18#_5-宽松绑定\",\"167\":\"v-080cac18#_5-1-示例1-宽松绑定\",\"168\":\"v-080cac18#_5-2-示例2-prefix\",\"169\":\"v-080cac18#ii-计量单位\",\"170\":\"v-080cac18#_1-属性的单位\",\"171\":\"v-080cac18#_2-时间单位-duration\",\"172\":\"v-080cac18#_3-空间单位-datesize\",\"173\":\"v-080cac18#iii-数据校验\",\"174\":\"v-080cac18#_1-导入依赖\",\"175\":\"v-080cac18#_2-validated\",\"176\":\"v-080cac18#_3-对具体的字段设置校验规则\",\"177\":\"v-393db138\",\"178\":\"v-393db138#i-集成-junit\",\"179\":\"v-393db138#_1-pom-xml\",\"180\":\"v-393db138#_2-测试类\",\"181\":\"v-393db138#_3-测试的步骤\",\"182\":\"v-393db138#_4-测试类的目录规划\",\"183\":\"v-393db138#_5-classes属性\",\"184\":\"v-393db138#ii-加载测试专用配置\",\"185\":\"v-393db138#iii-测试api\",\"186\":\"v-393db138#iv-数据层测试\",\"187\":\"v-6c5eeffc\",\"188\":\"v-6c5eeffc#i-windows\",\"189\":\"v-6c5eeffc#_1-概念\",\"190\":\"v-6c5eeffc#_2-打包\",\"191\":\"v-6c5eeffc#_3-发布-运行\",\"192\":\"v-6c5eeffc#_3-1-jdk\",\"193\":\"v-6c5eeffc#_3-2-maven插件\",\"194\":\"v-6c5eeffc#_4-springboot的maven打包插件\",\"195\":\"v-6c5eeffc#_4-1-两种打包方式\",\"196\":\"v-6c5eeffc#_4-2-两种打包方式的对比\",\"197\":\"v-6c5eeffc#_5-jar包的目录结构\",\"198\":\"v-6c5eeffc#_5-1-带spring-boot-maven-plugin插件的jar包\",\"199\":\"v-6c5eeffc#_5-2-不带spring-boot-maven-plugin插件的jar包\",\"200\":\"v-6c5eeffc#_5-3-manifeast-mf\",\"201\":\"v-6c5eeffc#_5-4-总结\",\"202\":\"v-6c5eeffc#_6-端口号冲突\",\"203\":\"v-6c5eeffc#ii-linux\",\"204\":\"v-6c5eeffc#_1-项目部署步骤\",\"205\":\"v-6c5eeffc#_2-部署环境\",\"206\":\"v-6c5eeffc#_3-上传jar包\",\"207\":\"v-6c5eeffc#_4-启动项目\",\"208\":\"v-b5add28a\",\"209\":\"v-b5add28a#i-临时属性配置\",\"210\":\"v-b5add28a#_1-启动命令的临时属性\",\"211\":\"v-b5add28a#_2-属性加载的优先级\",\"212\":\"v-b5add28a#_3-开发中使用临时属性\",\"213\":\"v-b5add28a#_4-main的args参数\",\"214\":\"v-b5add28a#_5-总结\",\"215\":\"v-b5add28a#ii-配置文件分类\",\"216\":\"v-b5add28a#_1-配置文件的级别\",\"217\":\"v-b5add28a#_2-使用场景\",\"218\":\"v-b5add28a#_3-多层级配置文件的关系\",\"219\":\"v-b5add28a#iii-自定义配置文件\",\"220\":\"v-b5add28a#_1-应用场景\",\"221\":\"v-b5add28a#_2-配置方式\",\"222\":\"v-b5add28a#_3-补充说明\",\"223\":\"v-98eabe0a\",\"224\":\"v-98eabe0a#i-yml-单一文件版\",\"225\":\"v-98eabe0a#_1-示例\",\"226\":\"v-98eabe0a#_2-语法\",\"227\":\"v-98eabe0a#ii-yml-多文件版\",\"228\":\"v-98eabe0a#_1-定义多个配置文件\",\"229\":\"v-98eabe0a#_2-应用\",\"230\":\"v-98eabe0a#iii-多环境开发控制\",\"231\":\"v-98eabe0a#_1-include\",\"232\":\"v-98eabe0a#_1-1-使用\",\"233\":\"v-98eabe0a#_1-2-优先级\",\"234\":\"v-98eabe0a#_2-group\",\"235\":\"v-98eabe0a#_3-maven设置多环境\",\"236\":\"v-98eabe0a#_3-1-springboot中读取maven设置值\",\"237\":\"v-98eabe0a#_3-2-使用\",\"238\":\"v-98eabe0a#_3-3-debug\",\"239\":\"v-3d2ed920\",\"240\":\"v-3d2ed920#i-记录日志\",\"241\":\"v-3d2ed920#_1-日志的作用\",\"242\":\"v-3d2ed920#_2-使用日志对象记录日志\",\"243\":\"v-3d2ed920#_3-优化日志对象的创建\",\"244\":\"v-3d2ed920#_4-slf4j\",\"245\":\"v-3d2ed920#ii-日志的等级\",\"246\":\"v-3d2ed920#_1-等级划分\",\"247\":\"v-3d2ed920#_2-日志的等级选择\",\"248\":\"v-3d2ed920#_3-配置文件设置日志等级\",\"249\":\"v-3d2ed920#_4-通过日志组设置日志等级\",\"250\":\"v-3d2ed920#iii-日志输出格式\",\"251\":\"v-3d2ed920#_1-默认格式\",\"252\":\"v-3d2ed920#_2-配置文件控制日志格式\",\"253\":\"v-3d2ed920#_3-日志格式语法\",\"254\":\"v-3d2ed920#_4-日志处理\",\"255\":\"v-3d2ed920#iv-日志文件\",\"256\":\"v-3d2ed920#_1-设置日志文件\",\"257\":\"v-3d2ed920#_2-日志策略\",\"258\":\"v-3d2ed920#_3-日志策略配置\",\"259\":\"v-3d2ed920#v-logback-日志\",\"260\":\"v-3d2ed920#_1-介绍\",\"261\":\"v-3d2ed920#_2-配置logback日志\",\"262\":\"v-3d2ed920#_3-配置文件内容\",\"263\":\"v-3d2ed920#_4-手动输出日志\",\"264\":\"v-89c50cda\",\"265\":\"v-24176c70\",\"266\":\"v-24176c70#_1-添加依赖\",\"267\":\"v-24176c70#_2-配置连接池\",\"268\":\"v-374c8d84\",\"269\":\"v-374c8d84#i-集成mybatis\",\"270\":\"v-374c8d84#_1-添加mybatis依赖\",\"271\":\"v-374c8d84#_2-配置连接信息\",\"272\":\"v-374c8d84#_3-使用mybatis\",\"273\":\"v-374c8d84#_3-1-实体类\",\"274\":\"v-374c8d84#_3-2-dao-mapper接口\",\"275\":\"v-374c8d84#_3-3-使用测试\",\"276\":\"v-374c8d84#_4-注意事项\",\"277\":\"v-374c8d84#_4-1-时区错误\",\"278\":\"v-374c8d84#_4-2-mysql驱动问题\",\"279\":\"v-374c8d84#ii-集成mybatis-plus\",\"280\":\"v-374c8d84#_1-添加mybatis-plus依赖\",\"281\":\"v-374c8d84#_2-配置连接信息-1\",\"282\":\"v-374c8d84#_3-使用mybatisplus\",\"283\":\"v-374c8d84#_3-1-mapper-接口\",\"284\":\"v-374c8d84#_3-2-使用测试\",\"285\":\"v-fcb06c56\",\"286\":\"v-fcb06c56#_1-依赖\",\"287\":\"v-fcb06c56#_2-redis基础配置\",\"288\":\"v-fcb06c56#_4-使用redis-redistemplate\",\"289\":\"v-fcb06c56#_4-使用redis-stringredistemplate【常用】\",\"290\":\"v-fcb06c56#_5-redis客户端选择\",\"291\":\"v-fcb06c56#_5-1-lettcus与jedis区别\",\"292\":\"v-fcb06c56#_5-2-切换成jedis客户端技术\",\"293\":\"v-fcb06c56#_6-客户端的其他配置\",\"294\":\"v-24c0925e\",\"295\":\"v-db90d16a\",\"296\":\"v-63b2e484\",\"297\":\"v-63b2e484#i-配置idea和git\",\"298\":\"v-63b2e484#_1-maven配置\",\"299\":\"v-63b2e484#_2-字符编码\",\"300\":\"v-63b2e484#_3-隐藏非必要文件\",\"301\":\"v-63b2e484#_4-开启热部署\",\"302\":\"v-63b2e484#_5-配置-gitignore\",\"303\":\"v-63b2e484#ii-创建工程\",\"304\":\"v-63b2e484#_1-new-project\",\"305\":\"v-63b2e484#_2-配置工程\",\"306\":\"v-63b2e484#_3-添加依赖\",\"307\":\"v-63b2e484#_4-配置yml\",\"308\":\"v-63b2e484#_5-初始化\",\"309\":\"v-63b2e484#iii-准备工作\",\"310\":\"v-63b2e484#_1-准备工作顺序\",\"311\":\"v-63b2e484#_2-常用工具类\",\"312\":\"v-63b2e484#_3-代码生成\",\"313\":\"v-63b2e484#iv-目录规范\",\"314\":\"v-67aa765e\",\"315\":\"v-67aa765e#i-springboot-组件\",\"316\":\"v-67aa765e#_1-springboot\",\"317\":\"v-67aa765e#_2-springmvc\",\"318\":\"v-67aa765e#_3-junit-测试依赖\",\"319\":\"v-67aa765e#_4-actuator监控\",\"320\":\"v-67aa765e#ii-sql\",\"321\":\"v-67aa765e#_1-mysql\",\"322\":\"v-67aa765e#_2-druid\",\"323\":\"v-67aa765e#_3-mybatis\",\"324\":\"v-67aa765e#_4-mybatis-plus\",\"325\":\"v-67aa765e#iii-nosql\",\"326\":\"v-67aa765e#_1-redis\",\"327\":\"v-67aa765e#iv-消息与缓存\",\"328\":\"v-67aa765e#_1-rabbitmq\",\"329\":\"v-67aa765e#v-工具\",\"330\":\"v-67aa765e#_1-lombok\",\"331\":\"v-67aa765e#_2-swagger\",\"332\":\"v-67aa765e#_3-sprint-boot-devtool\",\"333\":\"v-67aa765e#_4-fastjson\",\"334\":\"v-67aa765e#vi-第三方api\",\"335\":\"v-67aa765e#_1-阿里云短信服务\",\"336\":\"v-67aa765e#ω-pom-xml示例\",\"337\":\"v-4e83e4b5\",\"338\":\"v-755cc2d0\",\"339\":\"v-755cc2d0#_1-初始化\",\"340\":\"v-755cc2d0#_1-1-创建模块\",\"341\":\"v-755cc2d0#_1-2-配置文件\",\"342\":\"v-755cc2d0#_1-3-创建数据表book\",\"343\":\"v-755cc2d0#_2-实体类\",\"344\":\"v-755cc2d0#_2-1-lombok\",\"345\":\"v-755cc2d0#_3-dao-基本curd\",\"346\":\"v-755cc2d0#_3-1-mapper-接口\",\"347\":\"v-755cc2d0#_3-2-测试类-可选\",\"348\":\"v-755cc2d0#_3-3-配置\",\"349\":\"v-755cc2d0#_4-dao-分页功能\",\"350\":\"v-755cc2d0#_4-1-拦截器\",\"351\":\"v-755cc2d0#_4-2-ipage\",\"352\":\"v-755cc2d0#_4-3-test\",\"353\":\"v-755cc2d0#_5-dao-条件查询\",\"354\":\"v-755cc2d0#_5-1-querywrapper\",\"355\":\"v-755cc2d0#_5-2-示例\",\"356\":\"v-755cc2d0#_5-3-lambdaquerywrapper\",\"357\":\"v-755cc2d0#_5-4-动态条件拼接\",\"358\":\"v-755cc2d0#_6-service-业务层\",\"359\":\"v-755cc2d0#_6-1-bookservice-业务层接口\",\"360\":\"v-755cc2d0#_6-2-bookserviceimpl-业务层实现类\",\"361\":\"v-755cc2d0#_6-3-mybatisplus-通用service接口和通用service实现类\",\"362\":\"v-755cc2d0#_6-4-注意事项\",\"363\":\"v-755cc2d0#_7-controller-表现层\",\"364\":\"v-755cc2d0#_7-1-controller\",\"365\":\"v-755cc2d0#_7-2-注解\",\"366\":\"v-755cc2d0#_7-3-测试接口\",\"367\":\"v-755cc2d0#_8-接口优化\",\"368\":\"v-755cc2d0#_8-1-响应数据设计-详见restful规范\",\"369\":\"v-755cc2d0#_8-2-异常的统一处理\",\"370\":\"v-755cc2d0#_8-3-返回结果模型类\",\"371\":\"v-755cc2d0#_8-4-使用结果模型类\",\"372\":\"v-755cc2d0#_9-前端页面设计\",\"373\":\"v-4f244a50\",\"374\":\"v-4f244a50#数据库设计\",\"375\":\"v-4f244a50#_1-employee-员工表\",\"376\":\"v-4f244a50#_2-category-分类表\",\"377\":\"v-4f244a50#_3-dish-菜品表\",\"378\":\"v-4f244a50#_4-setmeal-套餐表\",\"379\":\"v-4f244a50#_5-setmeal-dish-菜品与套餐关系表\",\"380\":\"v-4f244a50#_6-dish-flavor-菜品口味关系表\",\"381\":\"v-4f244a50#_7-user-用户表\",\"382\":\"v-4f244a50#_8-address-book-地址表\",\"383\":\"v-4f244a50#_9-shopping-cart-购物车表\",\"384\":\"v-4f244a50#_10-order-订单表\",\"385\":\"v-4f244a50#_11-order-detail-订单明细表\",\"386\":\"v-4f244a50#搭建项目\",\"387\":\"v-4f244a50#_1-new-project\",\"388\":\"v-4f244a50#_2-项目结构\",\"389\":\"v-4f244a50#_3-添加依赖\",\"390\":\"v-4f244a50#_4-基本配置\",\"391\":\"v-4f244a50#前端代码\",\"392\":\"v-4f244a50#_1-下载\",\"393\":\"v-4f244a50#_2-设置静态资源映射\",\"394\":\"v-4f244a50#_3-启动项目\",\"395\":\"v-940f2434\",\"396\":\"v-940f2434#项目介绍\",\"397\":\"v-940f2434#原型图\",\"398\":\"v-940f2434#技术选型\",\"399\":\"v-940f2434#功能清单\",\"400\":\"v-940f2434#角色介绍\",\"401\":\"v-f5abde66\",\"402\":\"v-f5abde66#i-属性\",\"403\":\"v-f5abde66#_1-length\",\"404\":\"v-f5abde66#_2-equals\",\"405\":\"v-f5abde66#_3-equalsignorecase\",\"406\":\"v-f5abde66#ii-获取\",\"407\":\"v-f5abde66#_1-charat\",\"408\":\"v-f5abde66#_2-indexof\",\"409\":\"v-f5abde66#_3-lastindexof\",\"410\":\"v-f5abde66#iii-检测与比较\",\"411\":\"v-f5abde66#_1-isempty\",\"412\":\"v-f5abde66#_2-compareto\",\"413\":\"v-f5abde66#_3-endswith\",\"414\":\"v-f5abde66#_4-startswith\",\"415\":\"v-f5abde66#_5-contains\",\"416\":\"v-f5abde66#iv-修改\",\"417\":\"v-f5abde66#_1-tolowercase\",\"418\":\"v-f5abde66#_2-touppercase\",\"419\":\"v-f5abde66#_3-trim\",\"420\":\"v-f5abde66#_4-concat\",\"421\":\"v-f5abde66#_5-substring\",\"422\":\"v-f5abde66#v-类型转换\",\"423\":\"v-f5abde66#_1-xxx-parsexxx\",\"424\":\"v-f5abde66#_2-valueof\",\"425\":\"v-f5abde66#_3-tochararray\",\"426\":\"v-f5abde66#_4-getbytes\",\"427\":\"v-f5abde66#vi-正则\",\"428\":\"v-f5abde66#_1-replace\",\"429\":\"v-f5abde66#_1-1-replace-char替换\",\"430\":\"v-f5abde66#_1-2-replace-str替换\",\"431\":\"v-f5abde66#_1-3-replaceall-正则全部替换\",\"432\":\"v-f5abde66#_1-4-replacefirst-正则替换第一个子字符串\",\"433\":\"v-f5abde66#_2-matches\",\"434\":\"v-f5abde66#_3-split\",\"435\":\"v-750e672e\",\"436\":\"v-750e672e#i-介绍\",\"437\":\"v-750e672e#_1-简介\",\"438\":\"v-750e672e#_1-1-stringbuffer\",\"439\":\"v-750e672e#_1-2-stringbuilder\",\"440\":\"v-750e672e#_2-结构\",\"441\":\"v-750e672e#_3-创建stringbuffer对象\",\"442\":\"v-750e672e#_4-string、stringbuffer、stringbuilder对比\",\"443\":\"v-750e672e#_5-源码分析\",\"444\":\"v-750e672e#_5-1-string源码分析\",\"445\":\"v-750e672e#_5-2-stringbuffer分析\",\"446\":\"v-750e672e#_5-3-stringbuffer扩容\",\"447\":\"v-750e672e#_6-对比string、stringbuffer、stringbuilder的效率\",\"448\":\"v-750e672e#_7-三种创建字符串方式的选择\",\"449\":\"v-750e672e#_8-stringbuffer方法的特性\",\"450\":\"v-750e672e#ii-常用方法\",\"451\":\"v-750e672e#_1-length\",\"452\":\"v-750e672e#_2-append\",\"453\":\"v-750e672e#_3-delete\",\"454\":\"v-750e672e#_4-replace\",\"455\":\"v-750e672e#_5-insert\",\"456\":\"v-750e672e#_6-reverse\",\"457\":\"v-30470382\",\"458\":\"v-30470382#i-日期与时间api\",\"459\":\"v-30470382#_1-旧的时间api\",\"460\":\"v-30470382#_2-jdk8之后新时间api出现的背景\",\"461\":\"v-30470382#_3-新时间api介绍\",\"462\":\"v-30470382#_4-新时间日期api包\",\"463\":\"v-30470382#_5-补充说明\",\"464\":\"v-30470382#ii-本地时间\",\"465\":\"v-30470382#_1-localdate、localtime-和-localdatetime\",\"466\":\"v-30470382#_1-1-localdate\",\"467\":\"v-30470382#_1-2-localtime\",\"468\":\"v-30470382#_1-3-localdatetime\",\"469\":\"v-30470382#_2-now\",\"470\":\"v-30470382#_3-of\",\"471\":\"v-30470382#_4-getxxx\",\"472\":\"v-30470382#_5-withxxx\",\"473\":\"v-30470382#_6-plusxxx\",\"474\":\"v-30470382#_7-minusxxx\",\"475\":\"v-30470382#iii-instant\",\"476\":\"v-30470382#_1-now\",\"477\":\"v-30470382#_2-atoffset\",\"478\":\"v-30470382#_3-toepochmillion\",\"479\":\"v-30470382#_4-ofepochmilli\",\"480\":\"v-30470382#iv-datetimeformatter\",\"481\":\"v-30470382#_1-format\",\"482\":\"v-30470382#_2-parse\",\"483\":\"v-30470382#_3-标准格式\",\"484\":\"v-30470382#_3-1-格式化\",\"485\":\"v-30470382#_3-2-解析\",\"486\":\"v-30470382#_4-本地格式\",\"487\":\"v-30470382#_5-自定义格式\",\"488\":\"v-30470382#_5-1-格式化\",\"489\":\"v-30470382#_5-2\",\"490\":\"v-d5e92c6e\",\"491\":\"v-d5e92c6e#i-介绍\",\"492\":\"v-d5e92c6e#_1-对象排序的实质\",\"493\":\"v-d5e92c6e#_2-排序接口\",\"494\":\"v-d5e92c6e#_3-comparable与comparator的区别\",\"495\":\"v-d5e92c6e#ii-comparable\",\"496\":\"v-d5e92c6e#_1-用法\",\"497\":\"v-d5e92c6e#_2-compareto\",\"498\":\"v-d5e92c6e#_3-jdk内置实现\",\"499\":\"v-d5e92c6e#_4-sort\",\"500\":\"v-d5e92c6e#_5-使用示例\",\"501\":\"v-d5e92c6e#_5-1-实现comparable接口-重写compareto方法\",\"502\":\"v-d5e92c6e#_5-2-比较-比较两个对象的大小\",\"503\":\"v-d5e92c6e#_5-3-排序-对多个对象进行排序\",\"504\":\"v-d5e92c6e#iii-comparator\",\"505\":\"v-d5e92c6e#_1-用法-1\",\"506\":\"v-d5e92c6e#_2-compare\",\"507\":\"v-d5e92c6e#_3-使用示例\",\"508\":\"v-d5e92c6e#_3-1-字符串排序\",\"509\":\"v-d5e92c6e#_3-2-自定义类的对象排序\",\"510\":\"v-ae60d024\",\"511\":\"v-ae60d024#i-math\",\"512\":\"v-ae60d024#_1-abs-绝对值\",\"513\":\"v-ae60d024#_2-random-随机数\",\"514\":\"v-ae60d024#_3-ceil-进1取整\",\"515\":\"v-ae60d024#_4-floor-舍去小数\",\"516\":\"v-ae60d024#_5-round-四舍五入\",\"517\":\"v-ae60d024#_6-pi圆周率\",\"518\":\"v-ae60d024#_7-rint-四舍五入\",\"519\":\"v-ae60d024#_8-min-求较小值\",\"520\":\"v-ae60d024#_9-max-求较大值\",\"521\":\"v-ae60d024#_10-数学公式\",\"522\":\"v-ae60d024#_11-几何函数\",\"523\":\"v-ae60d024#ii-number\",\"524\":\"v-ae60d024#_1-xxxvalue\",\"525\":\"v-ae60d024#_2-compareto\",\"526\":\"v-ae60d024#_3-tostring\",\"527\":\"v-ae60d024#_4-valueof\",\"528\":\"v-ae60d024#_5-parsexxx\",\"529\":\"v-ae60d024#iii-biginteger\",\"530\":\"v-ae60d024#iv-bigdecimal\",\"531\":\"v-ae60d024#_1-add\",\"532\":\"v-ae60d024#_2-subtract\",\"533\":\"v-ae60d024#_3-multiply\",\"534\":\"v-ae60d024#_4-divide\",\"535\":\"v-ae60d024#_5-setscale\",\"536\":\"v-ae60d024#_6-roundingmode\",\"537\":\"v-ae60d024#_7-compareto\",\"538\":\"v-1720b947\",\"539\":\"v-1720b947#i-获取信息\",\"540\":\"v-1720b947#_1-getabsolutepath\",\"541\":\"v-1720b947#_2-getpath\",\"542\":\"v-1720b947#_3-getname\",\"543\":\"v-1720b947#_4-getparent\",\"544\":\"v-1720b947#_5-length\",\"545\":\"v-1720b947#_6-lastmodified\",\"546\":\"v-1720b947#_7-list\",\"547\":\"v-1720b947#_8-listfiles\",\"548\":\"v-1720b947#ii-判断\",\"549\":\"v-1720b947#_1-isdirectory\",\"550\":\"v-1720b947#_2-isfile\",\"551\":\"v-1720b947#_3-exists\",\"552\":\"v-1720b947#_4-canxxx\",\"553\":\"v-1720b947#_5-ishidden\",\"554\":\"v-1720b947#iii-创建文件\",\"555\":\"v-1720b947#createnewfile\",\"556\":\"v-1720b947#mkdir\",\"557\":\"v-1720b947#_3-mkdirs\",\"558\":\"v-1720b947#iv-删改\",\"559\":\"v-1720b947#_1-renameto\",\"560\":\"v-1720b947#_1-1-重命名-移动-的条件\",\"561\":\"v-1720b947#_1-2-移动后的文件\",\"562\":\"v-1720b947#_2-delete\",\"563\":\"v-201e690c\",\"564\":\"v-201e690c#i-inputstream-reader\",\"565\":\"v-201e690c#_1-read-无参\",\"566\":\"v-201e690c#_2-read-一参\",\"567\":\"v-201e690c#_2-1-char-参数\",\"568\":\"v-201e690c#_2-2-byte-参数\",\"569\":\"v-201e690c#_2-3-一个误区\",\"570\":\"v-201e690c#_3-read-三参\",\"571\":\"v-201e690c#_4-close\",\"572\":\"v-201e690c#ii-outputstream-write\",\"573\":\"v-201e690c#_1-实例化\",\"574\":\"v-201e690c#_1-1-filewriter-实例化\",\"575\":\"v-201e690c#_1-2-fileoutstream-实例化\",\"576\":\"v-201e690c#_2-write-字符\",\"577\":\"v-201e690c#_3-write-字节流\",\"578\":\"v-201e690c#_4-flush\",\"579\":\"v-201e690c#_5-close\",\"580\":\"v-201e690c#iii-其他流的方法\",\"581\":\"v-201e690c#_1-readline\",\"582\":\"v-201e690c#_2-newline\",\"583\":\"v-a95cae96\",\"584\":\"v-a95cae96#i-class-类相关\",\"585\":\"v-a95cae96#_1-实例化\",\"586\":\"v-a95cae96#_1-1-类的class属性\",\"587\":\"v-a95cae96#_1-2-对象的getclass方法\",\"588\":\"v-a95cae96#_1-3-class-forname\",\"589\":\"v-a95cae96#_1-4-类加载器\",\"590\":\"v-a95cae96#_2-forname\",\"591\":\"v-a95cae96#_3-newinstance\",\"592\":\"v-a95cae96#_4-getname\",\"593\":\"v-a95cae96#_5-getsuperclass\",\"594\":\"v-a95cae96#_6-getgenericsuperclass\",\"595\":\"v-a95cae96#_7-getinterfaces\",\"596\":\"v-a95cae96#_8-getclassloader\",\"597\":\"v-a95cae96#_9-getparent\",\"598\":\"v-a95cae96#_10-getpackage\",\"599\":\"v-a95cae96#ii-class-构造器相关\",\"600\":\"v-a95cae96#_1-getconstructors\",\"601\":\"v-a95cae96#_2-getdeclaredconstructors\",\"602\":\"v-a95cae96#_3-getdeclaredconstructor\",\"603\":\"v-a95cae96#iii-class-属性方法相关\",\"604\":\"v-a95cae96#_1-getfields\",\"605\":\"v-a95cae96#_2-getdeclarefields\",\"606\":\"v-a95cae96#_3-getfield\",\"607\":\"v-a95cae96#_4-getdeclaredfield\",\"608\":\"v-a95cae96#_5-getmethods\",\"609\":\"v-a95cae96#_6-getdeclaredmethods\",\"610\":\"v-a95cae96#_7-getmethod\",\"611\":\"v-a95cae96#_8-getdeclaredmethod\",\"612\":\"v-a95cae96#iv-field\",\"613\":\"v-a95cae96#_1-getmodifier\",\"614\":\"v-a95cae96#_2-gettype\",\"615\":\"v-a95cae96#_3-getname\",\"616\":\"v-a95cae96#_4-get\",\"617\":\"v-a95cae96#_5-set\",\"618\":\"v-a95cae96#_6-setaccessible\",\"619\":\"v-a95cae96#v-method\",\"620\":\"v-a95cae96#_1-getannotations\",\"621\":\"v-a95cae96#_2-getmodifiers\",\"622\":\"v-a95cae96#_3-getreturntype\",\"623\":\"v-a95cae96#_4-getname-1\",\"624\":\"v-a95cae96#_5-getparametertypes\",\"625\":\"v-a95cae96#_6-getexceptiontypes\",\"626\":\"v-a95cae96#_7-invoke\",\"627\":\"v-a95cae96#_8-setaccessible\",\"628\":\"v-a95cae96#vi-constructor\",\"629\":\"v-a95cae96#_1-newinstance\",\"630\":\"v-a95cae96#_2-setaccessible\",\"631\":\"v-5263b62e\",\"632\":\"v-5263b62e#i-system\",\"633\":\"v-5263b62e#_1-currenttimemillion\",\"634\":\"v-5263b62e#_2-exit\",\"635\":\"v-5263b62e#_3-gc\",\"636\":\"v-5263b62e#_4-getproperty\",\"637\":\"v-436a12a6\",\"638\":\"v-436a12a6#_1-new-scanner\",\"639\":\"v-436a12a6#_2-next\",\"640\":\"v-436a12a6#_3-nextxxx\",\"641\":\"v-3e499b0e\",\"642\":\"v-3e499b0e#_1-tostring\",\"643\":\"v-3e499b0e#_2-sort\",\"644\":\"v-3e499b0e#_2-1-sort-int-a\",\"645\":\"v-3e499b0e#_2-2-sort-t-a-comparator-super-t-c\",\"646\":\"v-3e499b0e#_3-binarysearch\",\"647\":\"v-3e499b0e#_4-copyof\",\"648\":\"v-3e499b0e#_5-equals\",\"649\":\"v-3e499b0e#_6-aslist\",\"650\":\"v-3e499b0e#_7-fill\",\"651\":\"v-3e499b0e#_8-aslist\",\"652\":\"v-cd7f9aaa\",\"653\":\"v-cd7f9aaa#i-collection\",\"654\":\"v-cd7f9aaa#结构\",\"655\":\"v-cd7f9aaa#应用范围\",\"656\":\"v-cd7f9aaa#泛型\",\"657\":\"v-cd7f9aaa#_1-add\",\"658\":\"v-cd7f9aaa#_2-addall\",\"659\":\"v-cd7f9aaa#_3-size\",\"660\":\"v-cd7f9aaa#_4-clear\",\"661\":\"v-cd7f9aaa#_5-isempty\",\"662\":\"v-cd7f9aaa#_6-contains\",\"663\":\"v-cd7f9aaa#_7-containsall\",\"664\":\"v-cd7f9aaa#_8-remove\",\"665\":\"v-cd7f9aaa#_9-removeall\",\"666\":\"v-cd7f9aaa#_10-retainall\",\"667\":\"v-cd7f9aaa#_11-equals\",\"668\":\"v-cd7f9aaa#_12-toarray\",\"669\":\"v-cd7f9aaa#_12-1-转为object类型的数组\",\"670\":\"v-cd7f9aaa#_12-2-转为指定类型的数组\",\"671\":\"v-cd7f9aaa#_13-iterator\",\"672\":\"v-cd7f9aaa#ii-iterator\",\"673\":\"v-cd7f9aaa#结构-1\",\"674\":\"v-cd7f9aaa#使用\",\"675\":\"v-cd7f9aaa#指针\",\"676\":\"v-cd7f9aaa#_1-hasnext\",\"677\":\"v-cd7f9aaa#_2-next\",\"678\":\"v-cd7f9aaa#_3-remove\",\"679\":\"v-cd7f9aaa#iii-collections\",\"680\":\"v-cd7f9aaa#结构-2\",\"681\":\"v-cd7f9aaa#用途\",\"682\":\"v-cd7f9aaa#_1-reverse\",\"683\":\"v-cd7f9aaa#_2-shuffle\",\"684\":\"v-cd7f9aaa#_3-sort\",\"685\":\"v-cd7f9aaa#_4-swap\",\"686\":\"v-cd7f9aaa#_5-max\",\"687\":\"v-cd7f9aaa#_6-min\",\"688\":\"v-cd7f9aaa#_7-frequency\",\"689\":\"v-cd7f9aaa#_8-copy\",\"690\":\"v-cd7f9aaa#_9-replaceall\",\"691\":\"v-cd7f9aaa#_10-synchronizedxxx\",\"692\":\"v-5aaae15d\",\"693\":\"v-5aaae15d#i-list\",\"694\":\"v-5aaae15d#结构\",\"695\":\"v-5aaae15d#使用说明\",\"696\":\"v-5aaae15d#arrays-aslist\",\"697\":\"v-5aaae15d#_1-add\",\"698\":\"v-5aaae15d#_2-addall\",\"699\":\"v-5aaae15d#_3-get\",\"700\":\"v-5aaae15d#_4-indexof\",\"701\":\"v-5aaae15d#_5-lastindexof\",\"702\":\"v-5aaae15d#_6-remove\",\"703\":\"v-5aaae15d#_7-set\",\"704\":\"v-5aaae15d#_8-sublist\",\"705\":\"v-5aaae15d#ii-map\",\"706\":\"v-5aaae15d#结构-1\",\"707\":\"v-5aaae15d#实现类\",\"708\":\"v-5aaae15d#泛型\",\"709\":\"v-5aaae15d#特性\",\"710\":\"v-5aaae15d#遍历操作\",\"711\":\"v-5aaae15d#_1-put\",\"712\":\"v-5aaae15d#_2-putall\",\"713\":\"v-5aaae15d#_3-remove\",\"714\":\"v-5aaae15d#_4-clear\",\"715\":\"v-5aaae15d#_5-get\",\"716\":\"v-5aaae15d#_6-containskey\",\"717\":\"v-5aaae15d#_7-containsvalue\",\"718\":\"v-5aaae15d#_8-size\",\"719\":\"v-5aaae15d#_9-isempty\",\"720\":\"v-5aaae15d#_10-equals\",\"721\":\"v-5aaae15d#_11-keyset\",\"722\":\"v-5aaae15d#_12-values\",\"723\":\"v-5aaae15d#_13-entryset\",\"724\":\"v-4f63eb30\",\"725\":\"v-4f63eb30#〇-核心functional\",\"726\":\"v-4f63eb30#_1-consumer\",\"727\":\"v-4f63eb30#_2-supplier\",\"728\":\"v-4f63eb30#_3-function\",\"729\":\"v-4f63eb30#_4-predicate\",\"730\":\"v-4f63eb30#i-xxxconsumer\",\"731\":\"v-4f63eb30#ii-xxxsupplier\",\"732\":\"v-4f63eb30#iii-xxxfucntion\",\"733\":\"v-4f63eb30#iv-xxxpredicate\",\"734\":\"v-4f63eb30#v-xxxoperator\",\"735\":\"v-5f6cc20e\",\"736\":\"v-5f6cc20e#正则相关的类\",\"737\":\"v-5f6cc20e#注意事项\",\"738\":\"v-5f6cc20e#java正则语法指南\",\"739\":\"v-5f6cc20e#pattern与matcher的使用\",\"740\":\"v-5f6cc20e#i-string\",\"741\":\"v-5f6cc20e#_1-replaceall\",\"742\":\"v-5f6cc20e#_2-replacefirst\",\"743\":\"v-5f6cc20e#_3-matches\",\"744\":\"v-5f6cc20e#_4-split\",\"745\":\"v-5f6cc20e#ii-pattern\",\"746\":\"v-5f6cc20e#结构\",\"747\":\"v-5f6cc20e#构造器\",\"748\":\"v-5f6cc20e#_1-compile\",\"749\":\"v-5f6cc20e#_2-flags\",\"750\":\"v-5f6cc20e#_3-matcher\",\"751\":\"v-5f6cc20e#_4-pattern\",\"752\":\"v-5f6cc20e#_5-matches\",\"753\":\"v-5f6cc20e#_6-split\",\"754\":\"v-5f6cc20e#iii-matcher\",\"755\":\"v-5f6cc20e#结构-1\",\"756\":\"v-5f6cc20e#实例化\",\"757\":\"v-5f6cc20e#matcher的状态\",\"758\":\"v-0635775a\",\"759\":\"v-0635775a#_1-new-scanner\",\"760\":\"v-0635775a#_2-next\",\"761\":\"v-0635775a#_3-nextxxx\",\"762\":\"v-60fbf706\",\"763\":\"v-60fbf706#_1-java内容分类\",\"764\":\"v-60fbf706#_2-java主要应用方向\",\"765\":\"v-60fbf706#_3-java的特点\",\"766\":\"v-60fbf706#_4-java的核心机制\",\"767\":\"v-60fbf706#_4-1-java虚拟机\",\"768\":\"v-60fbf706#_4-2-垃圾收集机制\",\"769\":\"v-60fbf706#_5-java版本选择\",\"770\":\"v-60fbf706#_6-概念补充\",\"771\":\"v-60fbf706#_6-1-软件运行方式\",\"772\":\"v-60fbf706#_6-2-编程语言介绍\",\"773\":\"v-741aadec\",\"774\":\"v-741aadec#i-开发环境搭建\",\"775\":\"v-741aadec#_1-环境介绍\",\"776\":\"v-741aadec#_1-1-jre\",\"777\":\"v-741aadec#_1-2-jdk\",\"778\":\"v-741aadec#_1-3-jdk、jre、jvm的关系\",\"779\":\"v-741aadec#_2-安装jdk-windows\",\"780\":\"v-741aadec#_3-环境变量path配置-windows\",\"781\":\"v-741aadec#_3-1-直接配置path\",\"782\":\"v-741aadec#_3-2-多版本jdk\",\"783\":\"v-741aadec#_4-配置java-home\",\"784\":\"v-741aadec#_4-1-创建变量\",\"785\":\"v-741aadec#_4-2-使用变量\",\"786\":\"v-741aadec#ii-生产环境搭建\",\"787\":\"v-741aadec#_1-yum安装\",\"788\":\"v-d0b05c46\",\"789\":\"v-d0b05c46#i-编译执行\",\"790\":\"v-d0b05c46#_1-java执行过程\",\"791\":\"v-d0b05c46#_2-执行过程解析\",\"792\":\"v-d0b05c46#_2-1-编译代码\",\"793\":\"v-d0b05c46#_2-2-运行代码\",\"794\":\"v-d0b05c46#_2-3-注意事项\",\"795\":\"v-d0b05c46#_3-基本语法规则\",\"796\":\"v-d0b05c46#_3-1-class-类\",\"797\":\"v-d0b05c46#_3-2-main-入口\",\"798\":\"v-d0b05c46#_3-3-注意\",\"799\":\"v-d0b05c46#_4-输出语句\",\"800\":\"v-d0b05c46#_5-基本使用测试\",\"801\":\"v-d0b05c46#_5-1-包含两个类的java文件-编译后生成了两个class文件\",\"802\":\"v-d0b05c46#_5-2-没有main文件-直接运行会报错\",\"803\":\"v-d0b05c46#_5-3-结论\",\"804\":\"v-d0b05c46#ii-注释\",\"805\":\"v-d0b05c46#_1-注释的意义\",\"806\":\"v-d0b05c46#_2-单行注释\",\"807\":\"v-d0b05c46#_3-多行注释\",\"808\":\"v-d0b05c46#_4-文档注释\",\"809\":\"v-d0b05c46#iii-文档注释格式\",\"810\":\"v-d0b05c46#_1-通用文档标记\",\"811\":\"v-d0b05c46#_2-类上常用文档标记\",\"812\":\"v-d0b05c46#_3-方法上常用文档标记\",\"813\":\"v-d0b05c46#_4-使用命令行生成api文档\",\"814\":\"v-d0b05c46#_5-使用ide生成帮助文档\",\"815\":\"v-d0b05c46#iv-基本代码规范\",\"816\":\"v-5637c00e\",\"817\":\"v-5637c00e#i-变量\",\"818\":\"v-5637c00e#_1-概念\",\"819\":\"v-5637c00e#_2-作用\",\"820\":\"v-5637c00e#_3-声明变量\",\"821\":\"v-5637c00e#_3-1-只声明\",\"822\":\"v-5637c00e#_3-2-变量的赋值\",\"823\":\"v-5637c00e#_3-3-声明的同时赋值\",\"824\":\"v-5637c00e#_4-变量的作用域\",\"825\":\"v-5637c00e#_5-使用变量的注意事项\",\"826\":\"v-5637c00e#_6-变量的分类\",\"827\":\"v-5637c00e#_6-1-按照数据类型\",\"828\":\"v-5637c00e#_6-2-按照变量声明的位置\",\"829\":\"v-5637c00e#ii-关键字\",\"830\":\"v-5637c00e#_1-介绍\",\"831\":\"v-5637c00e#_2-关键字汇总\",\"832\":\"v-5637c00e#_3-保留字\",\"833\":\"v-5637c00e#iii-标识符\",\"834\":\"v-5637c00e#_1-合法标识符规则\",\"835\":\"v-5637c00e#_2-命名规范\",\"836\":\"v-b55bf84e\",\"837\":\"v-b55bf84e#i-整形-4种\",\"838\":\"v-b55bf84e#_1-说明\",\"839\":\"v-b55bf84e#_2-四种整形的对比\",\"840\":\"v-b55bf84e#_3-注意事项\",\"841\":\"v-b55bf84e#_4-使用示例\",\"842\":\"v-b55bf84e#_5-默认整形\",\"843\":\"v-b55bf84e#ii-浮点类型-2种\",\"844\":\"v-b55bf84e#_1-说明-1\",\"845\":\"v-b55bf84e#_2-浮点型的两种表示方式\",\"846\":\"v-b55bf84e#_3-两种浮点类型的对比\",\"847\":\"v-b55bf84e#_4-注意事项\",\"848\":\"v-b55bf84e#_5-使用示例\",\"849\":\"v-b55bf84e#_6-底层说明\",\"850\":\"v-b55bf84e#_7-知识补充-long类型为什么加l\",\"851\":\"v-b55bf84e#iii-字符类型-char\",\"852\":\"v-b55bf84e#_1-说明-2\",\"853\":\"v-b55bf84e#_2-声明字符\",\"854\":\"v-b55bf84e#_3-字符变量的三种表现形式\",\"855\":\"v-b55bf84e#_4-字符集介绍\",\"856\":\"v-b55bf84e#_5-注意事项\",\"857\":\"v-b55bf84e#iv-布尔类型-boolean\",\"858\":\"v-b55bf84e#_1-说明-3\",\"859\":\"v-b55bf84e#_2-使用示例\",\"860\":\"v-b55bf84e#_3-注意\",\"861\":\"v-b55bf84e#v-类型间的转换\",\"862\":\"v-b55bf84e#_1-不同类型之间的运算\",\"863\":\"v-b55bf84e#_2-自动类型提升\",\"864\":\"v-b55bf84e#_2-1-运算的规则\",\"865\":\"v-b55bf84e#_2-2-特殊情况\",\"866\":\"v-b55bf84e#_2-3-示例\",\"867\":\"v-b55bf84e#_3-数值常量的默认数据类型\",\"868\":\"v-b55bf84e#_4-不加l和f发生的自动类型转换\",\"869\":\"v-b55bf84e#_5-强制类型转换\",\"870\":\"v-b55bf84e#vi-进制问题\",\"871\":\"v-b55bf84e#_1-表示方法\",\"872\":\"v-b55bf84e#_2-符号位\",\"873\":\"v-b55bf84e#_3-原码、反码、补码\",\"874\":\"v-b55bf84e#_4-进制转换\",\"875\":\"v-618aca3e\",\"876\":\"v-618aca3e#_1-string对象的创建\",\"877\":\"v-618aca3e#_2-字符串常量池\",\"878\":\"v-618aca3e#_3-string类的特性\",\"879\":\"v-618aca3e#_4-字符串的不可变性\",\"880\":\"v-618aca3e#_4-1-具体体现\",\"881\":\"v-618aca3e#_4-2-内存图示\",\"882\":\"v-618aca3e#_5-string对象的内存分析\",\"883\":\"v-618aca3e#_5-1-string对象的储存\",\"884\":\"v-618aca3e#_5-2-内存图示\",\"885\":\"v-618aca3e#_5-3-对象中的字符串\",\"886\":\"v-618aca3e#_6-string的运算-拼接操作\",\"887\":\"v-618aca3e#_7-类型转换\",\"888\":\"v-618aca3e#_8-string的操作\",\"889\":\"v-3d99f73b\",\"890\":\"v-3d99f73b#i-算术运算符\",\"891\":\"v-3d99f73b#_1-除号运算的细节\",\"892\":\"v-3d99f73b#_2-取模的细节\",\"893\":\"v-3d99f73b#_3-自增、自减的细节\",\"894\":\"v-3d99f73b#ii-赋值运算符\",\"895\":\"v-3d99f73b#_1-赋值运算符\",\"896\":\"v-3d99f73b#_2-扩展赋值运算符\",\"897\":\"v-3d99f73b#_3-数据类型不改变\",\"898\":\"v-3d99f73b#_4-开发中的选择\",\"899\":\"v-3d99f73b#iii-比较运算符\",\"900\":\"v-3d99f73b#_1-概述\",\"901\":\"v-3d99f73b#_2-使用细节\",\"902\":\"v-3d99f73b#iv-逻辑运算符\",\"903\":\"v-3d99f73b#_1-概述-1\",\"904\":\"v-3d99f73b#_2-使用\",\"905\":\"v-3d99f73b#_3-短路情况\",\"906\":\"v-3d99f73b#v-位运算符\",\"907\":\"v-3d99f73b#_1-概述-2\",\"908\":\"v-3d99f73b#_2-补位的细节\",\"909\":\"v-3d99f73b#_3-细节补充\",\"910\":\"v-3d99f73b#vi-三元运算符\",\"911\":\"v-3d99f73b#_1-格式\",\"912\":\"v-3d99f73b#_2-使用说明\",\"913\":\"v-3d99f73b#_2-1-表达式1-和表达式2为-同种类型\",\"914\":\"v-3d99f73b#_2-2-三元运算符的嵌套\",\"915\":\"v-3d99f73b#_2-3-三元运算符与if-else\",\"916\":\"v-3d99f73b#vii-运算符优先级\",\"917\":\"v-ecc6e948\",\"918\":\"v-ecc6e948#i-if-else\",\"919\":\"v-ecc6e948#_1-语法\",\"920\":\"v-ecc6e948#_1-1-单分支-选或跳过\",\"921\":\"v-ecc6e948#_1-2-双分支-二选一\",\"922\":\"v-ecc6e948#_1-3-多分支-多选一\",\"923\":\"v-ecc6e948#_2-使用细节\",\"924\":\"v-ecc6e948#_3-注意事项\",\"925\":\"v-ecc6e948#ii-switch\",\"926\":\"v-ecc6e948#_1-语法格式\",\"927\":\"v-ecc6e948#_2-使用说明\",\"928\":\"v-ecc6e948#_3-省略break的用法\",\"929\":\"v-ecc6e948#_4-if-else和switch-case的选择\",\"930\":\"v-ecc6e948#iii-for\",\"931\":\"v-ecc6e948#循环的组成部分\",\"932\":\"v-ecc6e948#_1-for循环的结构\",\"933\":\"v-ecc6e948#_2-for循环的使用\",\"934\":\"v-ecc6e948#iv-while\",\"935\":\"v-ecc6e948#_1-语法结构\",\"936\":\"v-ecc6e948#_2-while循环的使用\",\"937\":\"v-ecc6e948#_3-for循环和while循环\",\"938\":\"v-ecc6e948#_4-while-true-无限循环格式\",\"939\":\"v-ecc6e948#v-do-while\",\"940\":\"v-ecc6e948#_1-语法结构-1\",\"941\":\"v-ecc6e948#_2-do-while循环的使用\",\"942\":\"v-ecc6e948#_3-使用说明\",\"943\":\"v-ecc6e948#vi-循环控制\",\"944\":\"v-ecc6e948#_1-break\",\"945\":\"v-ecc6e948#_1-1-使用范围\",\"946\":\"v-ecc6e948#_1-2-嵌套循环中的使用\",\"947\":\"v-ecc6e948#_2-continue\",\"948\":\"v-ecc6e948#_3-return\",\"949\":\"v-ecc6e948#_4-使用说明\",\"950\":\"v-ecc6e948#_5-使用示例\",\"951\":\"v-ecc6e948#vii-嵌套循环\",\"952\":\"v-ecc6e948#_1-使用说明\",\"953\":\"v-ecc6e948#_2-使用示例\",\"954\":\"v-ecc6e948#_2-1-示例1-输出星星\",\"955\":\"v-ecc6e948#_2-2-示例2-输出99乘法表\",\"956\":\"v-ecc6e948#_2-3-示例3-100以内的所有质数的输出\",\"957\":\"v-da928d2c\",\"958\":\"v-da928d2c#i-概述\",\"959\":\"v-da928d2c#_1-概念\",\"960\":\"v-da928d2c#_2-数组的元素\",\"961\":\"v-da928d2c#_3-数组的特点\",\"962\":\"v-da928d2c#_4-数组的分类\",\"963\":\"v-da928d2c#_5-使用数组的步骤\",\"964\":\"v-da928d2c#_6-数组间的赋值与复制\",\"965\":\"v-da928d2c#_6-1-赋值\",\"966\":\"v-da928d2c#_6-2-复制一份内存空间\",\"967\":\"v-da928d2c#ii-一维数组\",\"968\":\"v-da928d2c#_1-声明数组\",\"969\":\"v-da928d2c#_2-初始化数组\",\"970\":\"v-da928d2c#_2-1-动态初始化\",\"971\":\"v-da928d2c#_2-2-静态初始化\",\"972\":\"v-da928d2c#_3-访问数组元素\",\"973\":\"v-da928d2c#_4-获取数组长度\",\"974\":\"v-da928d2c#_5-遍历数组\",\"975\":\"v-da928d2c#_6-数组元素的默认初始化值\",\"976\":\"v-da928d2c#_7-一维数组的内存解析\",\"977\":\"v-da928d2c#_7-1-内存结构\",\"978\":\"v-da928d2c#_7-2-数组的内存结构\",\"979\":\"v-da928d2c#_7-3-储存的过程\",\"980\":\"v-da928d2c#_8-注意事项\",\"981\":\"v-da928d2c#iii-多维数组\",\"982\":\"v-da928d2c#说明\",\"983\":\"v-da928d2c#_1-二维数组的声明\",\"984\":\"v-da928d2c#_1-1-静态初始化\",\"985\":\"v-da928d2c#_1-2-动态初始化-指定内层数组长度\",\"986\":\"v-da928d2c#_1-3-动态初始化-未指定数组内层长度\",\"987\":\"v-da928d2c#_2-数组赋值\",\"988\":\"v-da928d2c#_2-1-指定了内层数组长度\",\"989\":\"v-da928d2c#_2-2-未指定内层数组长度\",\"990\":\"v-da928d2c#_3-元素的访问和值\",\"991\":\"v-da928d2c#_4-数组的长度\",\"992\":\"v-da928d2c#_5-遍历数组-1\",\"993\":\"v-da928d2c#_6-数组元素的默认初始化值-1\",\"994\":\"v-da928d2c#_7-二维数组的内存解析\",\"995\":\"v-da928d2c#_8-注意事项-1\",\"996\":\"v-da928d2c#iv-常见异常\",\"997\":\"v-da928d2c#_1-数组索引越界\",\"998\":\"v-da928d2c#_2-空指针\",\"999\":\"v-da928d2c#v-arrays工具类\",\"1000\":\"v-3bfc80ec\",\"1001\":\"v-3bfc80ec#i-面向对象\",\"1002\":\"v-3bfc80ec#_1-面向过程与面向对象\",\"1003\":\"v-3bfc80ec#_2-面向对象的三大特征\",\"1004\":\"v-3bfc80ec#_3-面向对象的思想概述\",\"1005\":\"v-3bfc80ec#_4-java中的万物皆对象\",\"1006\":\"v-3bfc80ec#ii-类与对象\",\"1007\":\"v-3bfc80ec#_1-什么是类与对象\",\"1008\":\"v-3bfc80ec#_2-类与引用数据类型\",\"1009\":\"v-3bfc80ec#_3-类与类的成员\",\"1010\":\"v-3bfc80ec#_4-创建类\",\"1011\":\"v-3bfc80ec#_5-创建对象\",\"1012\":\"v-3bfc80ec#_6-类和对象的使用\",\"1013\":\"v-3bfc80ec#_7-类与多个对象\",\"1014\":\"v-3bfc80ec#_8-对象间的赋值\",\"1015\":\"v-3bfc80ec#_9-类的访问机制\",\"1016\":\"v-3bfc80ec#_10-补充说明\",\"1017\":\"v-3bfc80ec#iii-特殊形式对象\",\"1018\":\"v-3bfc80ec#_1-对象数组\",\"1019\":\"v-3bfc80ec#_2-匿名对象\",\"1020\":\"v-758a1bd8\",\"1021\":\"v-758a1bd8#i-属性\",\"1022\":\"v-758a1bd8#_1-属性声明语法\",\"1023\":\"v-758a1bd8#_2-属性与局部变量的对比\",\"1024\":\"v-758a1bd8#_2-1-相同点\",\"1025\":\"v-758a1bd8#_2-2-不同点\",\"1026\":\"v-758a1bd8#_3-对属性可以赋值的位置\",\"1027\":\"v-758a1bd8#ii-方法\",\"1028\":\"v-758a1bd8#_1-概述\",\"1029\":\"v-758a1bd8#_2-方法的分类\",\"1030\":\"v-758a1bd8#_3-return关键字\",\"1031\":\"v-758a1bd8#_4-方法的调用\",\"1032\":\"v-758a1bd8#_4-1-调用在main所在类中声明的方法\",\"1033\":\"v-758a1bd8#_4-2-注意\",\"1034\":\"v-758a1bd8#_5-方法访问类的成员\",\"1035\":\"v-758a1bd8#_6-递归方法\",\"1036\":\"v-758a1bd8#iii-方法的重载\",\"1037\":\"v-758a1bd8#_1-overload-重载\",\"1038\":\"v-758a1bd8#_2-重载的调用\",\"1039\":\"v-758a1bd8#_3-重载示例\",\"1040\":\"v-758a1bd8#iv-参数传递\",\"1041\":\"v-758a1bd8#_1-概念\",\"1042\":\"v-758a1bd8#_2-参数的数据类型\",\"1043\":\"v-758a1bd8#_3-参数值的传递机制\",\"1044\":\"v-758a1bd8#_3-1-基本数据类型\",\"1045\":\"v-758a1bd8#_3-2-引用数据类型\",\"1046\":\"v-758a1bd8#_4-可变个数形参的方法\",\"1047\":\"v-758a1bd8#_4-1-使用说明\",\"1048\":\"v-758a1bd8#_4-2-遍历可变形参\",\"1049\":\"v-758a1bd8#_4-3-注意事项\",\"1050\":\"v-0c550b7e\",\"1051\":\"v-0c550b7e#i-介绍\",\"1052\":\"v-0c550b7e#程序设计的追求\",\"1053\":\"v-0c550b7e#_1-什么是封装\",\"1054\":\"v-0c550b7e#_2-封装性的意义\",\"1055\":\"v-0c550b7e#_2-1-直接访问属性\",\"1056\":\"v-0c550b7e#_2-2-通过封装保护属性\",\"1057\":\"v-0c550b7e#_2-3-总结\",\"1058\":\"v-0c550b7e#_3-封装思想的体现\",\"1059\":\"v-0c550b7e#_4-封装性的总结\",\"1060\":\"v-0c550b7e#ii-权限修饰符\",\"1061\":\"v-0c550b7e#_1-四种访问权限修饰符\",\"1062\":\"v-0c550b7e#_2-具体修饰的目标\",\"1063\":\"v-0c550b7e#_3-权限范围介绍\",\"1064\":\"v-0c550b7e#_4-开发中的做法\",\"1065\":\"v-614d3b8e\",\"1066\":\"v-614d3b8e#_1-构造器的作用\",\"1067\":\"v-614d3b8e#_1-1-创建对象\",\"1068\":\"v-614d3b8e#_1-2-给对象进行初始化\",\"1069\":\"v-614d3b8e#_2-构造器的语法\",\"1070\":\"v-614d3b8e#_3-构造器分类\",\"1071\":\"v-614d3b8e#_4-构造器重载\",\"1072\":\"v-614d3b8e#_5-默认构造器\",\"1073\":\"v-614d3b8e#_6-注意事项\",\"1074\":\"v-614d3b8e#_7-构造器的调用\",\"1075\":\"v-614d3b8e#_8-总结-属性赋值的先后顺序\",\"1076\":\"v-45f21e90\",\"1077\":\"v-45f21e90#i-this\",\"1078\":\"v-45f21e90#_1-this的作用\",\"1079\":\"v-45f21e90#_2-this的使用\",\"1080\":\"v-45f21e90#_2-1-在类的方法中\",\"1081\":\"v-45f21e90#_2-2-在类的构造器中\",\"1082\":\"v-45f21e90#_3-this调用构造器\",\"1083\":\"v-45f21e90#_4-this使用时机\",\"1084\":\"v-45f21e90#_5-总结\",\"1085\":\"v-45f21e90#ii-package\",\"1086\":\"v-45f21e90#_1-什么是包\",\"1087\":\"v-45f21e90#_2-包的作用\",\"1088\":\"v-45f21e90#_3-指定包\",\"1089\":\"v-45f21e90#_4-包的命名规则\",\"1090\":\"v-45f21e90#_5-jdk中主要包介绍\",\"1091\":\"v-45f21e90#iii-import\",\"1092\":\"v-45f21e90#_1-说明\",\"1093\":\"v-45f21e90#_2-语法格式\",\"1094\":\"v-45f21e90#_3-import的使用细节\",\"1095\":\"v-45f21e90#_4-全类名-不导入包直接用\",\"1096\":\"v-45f21e90#_5-不同包下的同名类\",\"1097\":\"v-45f21e90#_6-子包下的类\",\"1098\":\"v-45f21e90#_7-import-static\",\"1099\":\"v-45f21e90#iv-final\",\"1100\":\"v-45f21e90#_1-说明-1\",\"1101\":\"v-45f21e90#_2-final类-无法继承\",\"1102\":\"v-45f21e90#_3-final方法-不能重写\",\"1103\":\"v-45f21e90#_4-final变量-常量\",\"1104\":\"v-45f21e90#_4-1-final修饰属性\",\"1105\":\"v-45f21e90#_4-2-final修饰局部变量\",\"1106\":\"v-45f21e90#_4-3-final修饰形参\",\"1107\":\"v-45f21e90#_5-static-final\",\"1108\":\"v-45f21e90#v-其他\",\"1109\":\"v-45f21e90#_1-native\",\"1110\":\"v-e17bd350\",\"1111\":\"v-e17bd350#i-extends-继承\",\"1112\":\"v-e17bd350#_1-语法\",\"1113\":\"v-e17bd350#_2-继承后的效果\",\"1114\":\"v-e17bd350#_3-继承的意义\",\"1115\":\"v-e17bd350#_4-继承的规则总结\",\"1116\":\"v-e17bd350#_5-object类\",\"1117\":\"v-e17bd350#_6-权限问题\",\"1118\":\"v-e17bd350#_6-1-子类是否能继承父类的private成员\",\"1119\":\"v-e17bd350#_6-2-底层解析\",\"1120\":\"v-e17bd350#_6-3-子类访问父类中的private成员\",\"1121\":\"v-e17bd350#ii-override-重写\",\"1122\":\"v-e17bd350#_1-定义\",\"1123\":\"v-e17bd350#_2-重写的要求\",\"1124\":\"v-e17bd350#_2-1-访问修饰符\",\"1125\":\"v-e17bd350#_2-2-返回值\",\"1126\":\"v-e17bd350#_2-3-异常\",\"1127\":\"v-e17bd350#_2-4-静态方法的处理\",\"1128\":\"v-e17bd350#_3-可变参数的重写\",\"1129\":\"v-e17bd350#_4-关于父类中的属性\",\"1130\":\"v-e17bd350#iii-super\",\"1131\":\"v-e17bd350#_1-super的作用\",\"1132\":\"v-e17bd350#_2-super-调用父类属性和方法\",\"1133\":\"v-e17bd350#_2-1-子类调用父类同名属性\",\"1134\":\"v-e17bd350#_2-2-子类调用父类同名方法\",\"1135\":\"v-e17bd350#_2-3-属性和方法查找的过程分析\",\"1136\":\"v-e17bd350#_3-super调用构造器\",\"1137\":\"v-e17bd350#_3-1-声明位置\",\"1138\":\"v-e17bd350#_3-2-默认的super\",\"1139\":\"v-e17bd350#_3-3-super和this-对构造器的调用\",\"1140\":\"v-e17bd350#_3-4-父类没有空构造器的情况\",\"1141\":\"v-e17bd350#_4-super与this的区别\",\"1142\":\"v-e17bd350#iv-子类实例化过程\",\"1143\":\"v-e17bd350#_1-从结果上看\",\"1144\":\"v-e17bd350#_2-从过程上看\",\"1145\":\"v-7762f3d8\",\"1146\":\"v-7762f3d8#i-多态\",\"1147\":\"v-7762f3d8#_1-对象的多态性\",\"1148\":\"v-7762f3d8#_2-多态的使用\",\"1149\":\"v-7762f3d8#_2-1-规定\",\"1150\":\"v-7762f3d8#_2-2-规定解析\",\"1151\":\"v-7762f3d8#_2-3-使用限制\",\"1152\":\"v-7762f3d8#_3-多态的意义\",\"1153\":\"v-7762f3d8#_4-多态示例\",\"1154\":\"v-7762f3d8#_5-虚拟方法的调用\",\"1155\":\"v-7762f3d8#_5-1-正常的方法调用\",\"1156\":\"v-7762f3d8#_5-2-虚拟方法调用-多态情况下\",\"1157\":\"v-7762f3d8#_5-3-编译时类型与运行时类型\",\"1158\":\"v-7762f3d8#_5-4-虚拟方法调用举例\",\"1159\":\"v-7762f3d8#_6-早绑定与晚绑定\",\"1160\":\"v-7762f3d8#_7-赋值形式的多态\",\"1161\":\"v-7762f3d8#_8-多态开发中的应用\",\"1162\":\"v-7762f3d8#ii-转型\",\"1163\":\"v-7762f3d8#_1-向下转型说明\",\"1164\":\"v-7762f3d8#_2-转型的条件\",\"1165\":\"v-7762f3d8#_2-1-向上转型-子转父\",\"1166\":\"v-7762f3d8#_2-2-向下转型-父类转子类\",\"1167\":\"v-7762f3d8#_3-向下转型的异常\",\"1168\":\"v-7762f3d8#_4-instancof的\",\"1169\":\"v-7762f3d8#_5-转型的注意事项\",\"1170\":\"v-7762f3d8#_5-1-向下转型必须是父类引用子类的对象\",\"1171\":\"v-7762f3d8#_5-2-隔代转型\",\"1172\":\"v-7762f3d8#_5-3-转型必须有父子关系\",\"1173\":\"v-542ccf32\",\"1174\":\"v-542ccf32#i-object类\",\"1175\":\"v-542ccf32#_1-说明\",\"1176\":\"v-542ccf32#_2-object类的功能\",\"1177\":\"v-542ccf32#_3-equals与\",\"1178\":\"v-542ccf32#_3-1-的用法\",\"1179\":\"v-542ccf32#_3-2-equals的用法\",\"1180\":\"v-542ccf32#_3-3-自定义类重写equals\",\"1181\":\"v-542ccf32#_3-4-和equals-的区别\",\"1182\":\"v-542ccf32#_3-5-特殊情况\",\"1183\":\"v-542ccf32#_4-tostring\",\"1184\":\"v-542ccf32#_4-1-tostring的源码\",\"1185\":\"v-542ccf32#_4-2-特殊对象对tostring的重写\",\"1186\":\"v-542ccf32#_4-3-自定义重写tostring\",\"1187\":\"v-542ccf32#_4-4-string-tostring\",\"1188\":\"v-542ccf32#ii-包装类\",\"1189\":\"v-542ccf32#_1-说明-1\",\"1190\":\"v-542ccf32#_2-基本数据和对应的包装类\",\"1191\":\"v-542ccf32#_3-包装类的转换概述\",\"1192\":\"v-542ccf32#_4-基本数据类型转换为包装类\",\"1193\":\"v-542ccf32#_4-1-boolean转换的特殊性说明\",\"1194\":\"v-542ccf32#_5-包装类转换为基本数据类型\",\"1195\":\"v-542ccf32#_6-自动装箱与自动拆箱\",\"1196\":\"v-542ccf32#_7-基本数据类型和包装类与string类型的转换\",\"1197\":\"v-542ccf32#_7-1-基本数据类型、包装类-string类型\",\"1198\":\"v-542ccf32#_7-2-string类型转基本数据类型、包装类\",\"1199\":\"v-542ccf32#_8-注意事项\",\"1200\":\"v-542ccf32#iii-内部类\",\"1201\":\"v-542ccf32#_1-定义\",\"1202\":\"v-542ccf32#_2-内部类的作用\",\"1203\":\"v-542ccf32#_3-分类\",\"1204\":\"v-542ccf32#_4-成员内部类的特点\",\"1205\":\"v-542ccf32#_4-1-作为外部类的成员\",\"1206\":\"v-542ccf32#_4-2-作为一个类\",\"1207\":\"v-542ccf32#_4-3-注意事项\",\"1208\":\"v-542ccf32#_4-4-实例化成员内部类\",\"1209\":\"v-542ccf32#_4-5-成员内部类调用外部结构\",\"1210\":\"v-542ccf32#_5-局部内部类的使用\",\"1211\":\"v-542ccf32#_5-1-使用局部内部类\",\"1212\":\"v-542ccf32#_5-2-局部内部类的特点\",\"1213\":\"v-542ccf32#_6-内部列的作用\",\"1214\":\"v-542ccf32#iv-匿名类\",\"1215\":\"v-542ccf32#_1-格式\",\"1216\":\"v-542ccf32#_2-特点\",\"1217\":\"v-542ccf32#_3-示例\",\"1218\":\"v-542ccf32#_3-1-示例1\",\"1219\":\"v-542ccf32#_3-2-示例2\",\"1220\":\"v-e1474b4e\",\"1221\":\"v-e1474b4e#i-static介绍\",\"1222\":\"v-e1474b4e#_1-static关键字的使用\",\"1223\":\"v-e1474b4e#_2-static的背景\",\"1224\":\"v-e1474b4e#_3-类属性与类方法\",\"1225\":\"v-e1474b4e#_4-被static修饰后的成员具备的特点\",\"1226\":\"v-e1474b4e#ii-静态属性\",\"1227\":\"v-e1474b4e#_1-说明\",\"1228\":\"v-e1474b4e#_2-静态变量的声明\",\"1229\":\"v-e1474b4e#_3-静态变量的加载\",\"1230\":\"v-e1474b4e#_4-静态变量的使用\",\"1231\":\"v-e1474b4e#iii-静态方法\",\"1232\":\"v-e1474b4e#_1-概述\",\"1233\":\"v-e1474b4e#_2-静态方法的声明\",\"1234\":\"v-e1474b4e#_3-静态方法的调用\",\"1235\":\"v-e1474b4e#_4-静态方法与非静态方法的对比\",\"1236\":\"v-e1474b4e#_5-注意事项\",\"1237\":\"v-e1474b4e#_6-如何判断是否要声明static\",\"1238\":\"v-e1474b4e#iv-单例模式\",\"1239\":\"v-e1474b4e#_1-单例模式核心\",\"1240\":\"v-e1474b4e#_2-实现方式1-饿汉式\",\"1241\":\"v-e1474b4e#_3-实现方式2-懒汉式\",\"1242\":\"v-e1474b4e#_4-饿汉式和懒汉式的对比\",\"1243\":\"v-e1474b4e#_5-单例模式的使用场景\",\"1244\":\"v-78e14a34\",\"1245\":\"v-78e14a34#i-abstract\",\"1246\":\"v-78e14a34#_1-abstract-class-抽象类\",\"1247\":\"v-78e14a34#_2-abstract方法-抽象方法\",\"1248\":\"v-78e14a34#_3-abstract的使用注意\",\"1249\":\"v-78e14a34#_4-创建抽象类的匿名类\",\"1250\":\"v-78e14a34#_5-模板方法设计模式\",\"1251\":\"v-78e14a34#_5-1-示例-计算代码执行时间\",\"1252\":\"v-78e14a34#_5-2-示例-银行业务流程\",\"1253\":\"v-78e14a34#ii-interface\",\"1254\":\"v-78e14a34#说明\",\"1255\":\"v-78e14a34#_1-概述-接口的由来\",\"1256\":\"v-78e14a34#_1-1-多重继承\",\"1257\":\"v-78e14a34#_1-2-功能\",\"1258\":\"v-78e14a34#_2-接口的意义-规范\",\"1259\":\"v-78e14a34#_3-接口定义\",\"1260\":\"v-78e14a34#_4-接口的特点\",\"1261\":\"v-78e14a34#_5-接口的使用细节\",\"1262\":\"v-78e14a34#_6-接口的实现\",\"1263\":\"v-78e14a34#_7-接口示例\",\"1264\":\"v-78e14a34#_7-1-示例-模拟usb\",\"1265\":\"v-78e14a34#_7-2-jdbc\",\"1266\":\"v-78e14a34#_8-接口与抽象类的对比\",\"1267\":\"v-78e14a34#iii-接口新特性\",\"1268\":\"v-78e14a34#_1-静态方法\",\"1269\":\"v-78e14a34#_2-默认方法\",\"1270\":\"v-78e14a34#_3-在子类中调用父类、接口中被重写的方法\",\"1271\":\"v-78e14a34#_4-静态方法和默认方法的意义\",\"1272\":\"v-78e14a34#_4-1-静态方法\",\"1273\":\"v-78e14a34#_4-2-默认方法\",\"1274\":\"v-21b41a4d\",\"1275\":\"v-21b41a4d#i-代码块\",\"1276\":\"v-21b41a4d#_1-作用\",\"1277\":\"v-21b41a4d#_2-格式\",\"1278\":\"v-21b41a4d#_3-分类\",\"1279\":\"v-21b41a4d#_3-1-静态代码块\",\"1280\":\"v-21b41a4d#_3-2-非静态代码块\",\"1281\":\"v-21b41a4d#_4-开发中代码块的作用\",\"1282\":\"v-21b41a4d#ii-javabean\",\"1283\":\"v-21b41a4d#_1-背景\",\"1284\":\"v-21b41a4d#_2-意义\",\"1285\":\"v-21b41a4d#_3-javabean的种类\",\"1286\":\"v-21b41a4d#_4-javabean举例\",\"1287\":\"v-21b41a4d#iii-概念补充\",\"1288\":\"v-21b41a4d#_1-uml类图\",\"1289\":\"v-21b41a4d#_2-mvc设计模式\",\"1290\":\"v-21b41a4d#_2-1-model-模型层【操作数据】\",\"1291\":\"v-21b41a4d#_2-2-controller-控制器层【业务逻辑】\",\"1292\":\"v-21b41a4d#_2-3-view-视图层【前端】\",\"1293\":\"v-21b41a4d#_3-main\",\"1294\":\"v-21b41a4d#_4-连续操作\",\"1295\":\"v-21b41a4d#_5-四种java文件\",\"1296\":\"v-33098727\",\"1297\":\"v-33098727#i-类与对象\",\"1298\":\"v-33098727#_1-内存区域\",\"1299\":\"v-33098727#_2-对象的内存解析\",\"1300\":\"v-33098727#_2-1-person-p1-new-person\",\"1301\":\"v-33098727#_2-2-p1-name-tome-p1-ismale-true\",\"1302\":\"v-33098727#_2-3-person-p2-new-person\",\"1303\":\"v-33098727#_2-4-person-p3-p1-p3-age-10\",\"1304\":\"v-33098727#_3-注意事项\",\"1305\":\"v-33098727#ii-变量间赋值\",\"1306\":\"v-33098727#_1-结论\",\"1307\":\"v-33098727#_2-基本数据类型\",\"1308\":\"v-33098727#_3-引用数据类型\",\"1309\":\"v-382c2a0e\",\"1310\":\"v-382c2a0e#i-概述\",\"1311\":\"v-382c2a0e#_1-异常分类\",\"1312\":\"v-382c2a0e#_2-error-错误\",\"1313\":\"v-382c2a0e#_3-exception-异常\",\"1314\":\"v-382c2a0e#_4-异常处理\",\"1315\":\"v-382c2a0e#_5-异常处理的意义\",\"1316\":\"v-382c2a0e#ii-异常处理机制\",\"1317\":\"v-382c2a0e#_1-java的异常处理机制\",\"1318\":\"v-382c2a0e#_2-异常处理的抓抛模型\",\"1319\":\"v-382c2a0e#_3-异常对象的产生\",\"1320\":\"v-382c2a0e#_4-异常处理总结\",\"1321\":\"v-53742da0\",\"1322\":\"v-53742da0#i-异常体系结构\",\"1323\":\"v-53742da0#_1-异常分类\",\"1324\":\"v-53742da0#_2-编译时异常\",\"1325\":\"v-53742da0#_3-运行时异常\",\"1326\":\"v-53742da0#ii-常见异常\",\"1327\":\"v-53742da0#_1-nullpointerexception-空指针-运行异常\",\"1328\":\"v-53742da0#_2-indexoutofboundsexception-角标越界-运行异常\",\"1329\":\"v-53742da0#_3-1-arrayindexoutofboundsexception-数组角标越界\",\"1330\":\"v-53742da0#_3-2-stringindexoutofboundsexception-字符串角标越界\",\"1331\":\"v-53742da0#_3-classcastexception-类型转换异常-运行异常\",\"1332\":\"v-53742da0#_4-numberformatexception-数值格式异常-运行异常\",\"1333\":\"v-53742da0#_5-inputmismatchexception-输入不匹配异常-运行异常\",\"1334\":\"v-53742da0#_6-arithmeticexception-算学计算异常-运行异常\",\"1335\":\"v-53742da0#_7-ioexception-编译时异常\",\"1336\":\"v-6b594a6a\",\"1337\":\"v-6b594a6a#_1-语法结构\",\"1338\":\"v-6b594a6a#_2-异常类型的选择\",\"1339\":\"v-6b594a6a#_3-try-catch示例\",\"1340\":\"v-6b594a6a#_4-try-catch使用说明\",\"1341\":\"v-6b594a6a#_5-捕获异常的有关信息\",\"1342\":\"v-6b594a6a#_6-finally的使用\",\"1343\":\"v-6b594a6a#_6-1-示例1-finally一定会被执行\",\"1344\":\"v-6b594a6a#_6-2-示例2-资源的释放\",\"1345\":\"v-6b594a6a#_7-异常的嵌套\",\"1346\":\"v-6b594a6a#_8-注意事项\",\"1347\":\"v-6b594a6a#_9-编译时异常和运行时异常的不同处理\",\"1348\":\"v-837ae2dc\",\"1349\":\"v-837ae2dc#i-throws\",\"1350\":\"v-837ae2dc#_1-throws介绍\",\"1351\":\"v-837ae2dc#_2-异常的抛出机制\",\"1352\":\"v-837ae2dc#_3-throws使用示例\",\"1353\":\"v-837ae2dc#_4-try-catch-finally与throws的对比\",\"1354\":\"v-837ae2dc#_5-方法重写时的异常规则\",\"1355\":\"v-837ae2dc#_6-开发中try-catch-finally和throws的选择\",\"1356\":\"v-837ae2dc#_7-运行时异常的排查\",\"1357\":\"v-837ae2dc#ii-手动抛出异常\",\"1358\":\"v-837ae2dc#_1-关于异常的产生\",\"1359\":\"v-837ae2dc#_2-手动抛出异常的意义\",\"1360\":\"v-837ae2dc#_3-创建异常的语法\",\"1361\":\"v-837ae2dc#_4-示例\",\"1362\":\"v-837ae2dc#iii-自定义异常类\",\"1363\":\"v-837ae2dc#_1-自定义异常类的创建说明\",\"1364\":\"v-837ae2dc#_2-自定义异常类示例\",\"1365\":\"v-837ae2dc#_3-自定义异常类的总结\",\"1366\":\"v-0eaf02d8\",\"1367\":\"v-0eaf02d8#i-枚举类\",\"1368\":\"v-0eaf02d8#_1-什么是枚举类\",\"1369\":\"v-0eaf02d8#_2-枚举类的特点\",\"1370\":\"v-0eaf02d8#_3-枚举类的实现\",\"1371\":\"v-0eaf02d8#_4-自定义枚举类说明\",\"1372\":\"v-0eaf02d8#_5-示例-自定义枚举类\",\"1373\":\"v-0eaf02d8#_5-1-创建枚举类\",\"1374\":\"v-0eaf02d8#_5-2-测试\",\"1375\":\"v-0eaf02d8#ii-enum\",\"1376\":\"v-0eaf02d8#_1-enum关键字\",\"1377\":\"v-0eaf02d8#_2-enum使用说明\",\"1378\":\"v-0eaf02d8#_3-自定义枚举类的步骤\",\"1379\":\"v-0eaf02d8#_4-enum的主要方法\",\"1380\":\"v-0eaf02d8#_5-实现接口的枚举类\",\"1381\":\"v-0eaf02d8#_6-enum使用示例\",\"1382\":\"v-0eaf02d8#_6-1-定义枚举类-并实现一个接口\",\"1383\":\"v-0eaf02d8#_6-2-使用枚举类-并测试枚举类的方法\",\"1384\":\"v-220e4b10\",\"1385\":\"v-220e4b10#i-annotation\",\"1386\":\"v-220e4b10#_1-介绍\",\"1387\":\"v-220e4b10#_1-1-什么是annotation\",\"1388\":\"v-220e4b10#_1-2-注解的用途\",\"1389\":\"v-220e4b10#_2-注解的使用\",\"1390\":\"v-220e4b10#_3-注解的分类\",\"1391\":\"v-220e4b10#ii-自定义注解\",\"1392\":\"v-220e4b10#_1-语法\",\"1393\":\"v-220e4b10#_2-示例\",\"1394\":\"v-220e4b10#_3-语法解析\",\"1395\":\"v-220e4b10#_3-1-interface-声明注解\",\"1396\":\"v-220e4b10#_3-2-元注解\",\"1397\":\"v-220e4b10#_3-3-配置参数-本质是个常量\",\"1398\":\"v-220e4b10#_3-4-配置参数的类型\",\"1399\":\"v-220e4b10#_4-特殊配置参数\",\"1400\":\"v-220e4b10#_5-使用注解\",\"1401\":\"v-220e4b10#iii-注解结构\",\"1402\":\"v-220e4b10#_1-基本架构\",\"1403\":\"v-220e4b10#_2-annotation组成部分\",\"1404\":\"v-220e4b10#_2-1-annotation-java\",\"1405\":\"v-220e4b10#_2-2-elementtype-java\",\"1406\":\"v-220e4b10#_2-3-retentionpolicy-java\",\"1407\":\"v-220e4b10#iv-元注解\",\"1408\":\"v-220e4b10#_1-元注解说明\",\"1409\":\"v-220e4b10#_2-retention\",\"1410\":\"v-220e4b10#_2-1-使用说明\",\"1411\":\"v-220e4b10#_2-2-annotation的生命周期-成员变量的值\",\"1412\":\"v-220e4b10#_3-target\",\"1413\":\"v-220e4b10#_3-1-取值\",\"1414\":\"v-220e4b10#_3-2-注意\",\"1415\":\"v-220e4b10#_4-documented【不常用】\",\"1416\":\"v-220e4b10#_5-inherited【不常用】\",\"1417\":\"v-220e4b10#v-注解新特性\",\"1418\":\"v-220e4b10#_1-可重复注解\",\"1419\":\"v-220e4b10#_1-1-1-8之前的重复注解\",\"1420\":\"v-220e4b10#_1-2-1-8之后的重复注解\",\"1421\":\"v-220e4b10#_2-可用于类型的注解\",\"1422\":\"v-220e4b10#_2-1-type-parameter\",\"1423\":\"v-220e4b10#_2-2-type-use\",\"1424\":\"v-220e4b10#vi-常用注解解析\",\"1425\":\"v-220e4b10#_1-deprecated\",\"1426\":\"v-220e4b10#_2-inherited-元注解之一\",\"1427\":\"v-220e4b10#_3-suppresswarnings\",\"1428\":\"v-220e4b10#_3-1-string-value\",\"1429\":\"v-220e4b10#_3-2-使用举例\",\"1430\":\"v-220e4b10#_3-3-取值\",\"1431\":\"v-220e4b10#vii-反射获取注解信息\",\"1432\":\"v-220e4b10#_1-使用示例\",\"1433\":\"v-672e2b64\",\"1434\":\"v-672e2b64#i-基本概念\",\"1435\":\"v-672e2b64#_1-program-程序的概念\",\"1436\":\"v-672e2b64#_2-process-进程的概念\",\"1437\":\"v-672e2b64#_2-1-程序与进程的区别\",\"1438\":\"v-672e2b64#_2-2-程序与进程的联系\",\"1439\":\"v-672e2b64#_3-thread-线程的概念\",\"1440\":\"v-672e2b64#_4-进程与线程\",\"1441\":\"v-672e2b64#_5-单核cpu和多核cpu\",\"1442\":\"v-672e2b64#_6-并行与并发\",\"1443\":\"v-672e2b64#ii-多线程的意义\",\"1444\":\"v-672e2b64#背景\",\"1445\":\"v-672e2b64#_1-多线程程序的优点\",\"1446\":\"v-672e2b64#_2-何时需要多线程\",\"1447\":\"v-672e2b64#iii-扩展-内存\",\"1448\":\"v-672e2b64#_1-数据\",\"1449\":\"v-672e2b64#_2-内存\",\"1450\":\"v-672e2b64#_2-1-内存条的空间\",\"1451\":\"v-672e2b64#_2-2-内存的生命周期\",\"1452\":\"v-672e2b64#_2-3-内存储存的数据类型\",\"1453\":\"v-672e2b64#_2-4-内存空间的基本分类\",\"1454\":\"v-672e2b64#_3-变量\",\"1455\":\"v-672e2b64#_4-变量名-标识符\",\"1456\":\"v-672e2b64#_5-内存、数据、变量间的关系\",\"1457\":\"v-672e2b64#_6-垃圾回收\",\"1458\":\"v-672e2b64#_7-内存溢出和泄露\",\"1459\":\"v-b90389ae\",\"1460\":\"v-b90389ae#i-java的多线程\",\"1461\":\"v-b90389ae#_1-概述\",\"1462\":\"v-b90389ae#_2-api中创建线程的方式\",\"1463\":\"v-b90389ae#_3-线程的分类\",\"1464\":\"v-b90389ae#ii-继承thred类\",\"1465\":\"v-b90389ae#说明\",\"1466\":\"v-b90389ae#_1-thread类介绍\",\"1467\":\"v-b90389ae#_1-1-thread类-多线程类\",\"1468\":\"v-b90389ae#_1-2-构造器\",\"1469\":\"v-b90389ae#_1-3-run方法-线程体\",\"1470\":\"v-b90389ae#_1-4-start方法-开启线程\",\"1471\":\"v-b90389ae#_2-创建多线程的步骤\",\"1472\":\"v-b90389ae#_3-创建多线程示例\",\"1473\":\"v-b90389ae#_3-1-备注\",\"1474\":\"v-b90389ae#_3-2-执行结果\",\"1475\":\"v-b90389ae#_4-注意事项\",\"1476\":\"v-b90389ae#_4-1-不能通过调用run开始子线程\",\"1477\":\"v-b90389ae#_4-2-同一个thread类的对象不能重复调用start\",\"1478\":\"v-b90389ae#iii-thread常用方法\",\"1479\":\"v-b90389ae#方法列表\",\"1480\":\"v-b90389ae#_1-线程名\",\"1481\":\"v-b90389ae#_2-线程执行控制\",\"1482\":\"v-b90389ae#iv-线程的调度\",\"1483\":\"v-b90389ae#_1-cpu的调度策略\",\"1484\":\"v-b90389ae#_1-1-时间片\",\"1485\":\"v-b90389ae#_1-2-抢占式\",\"1486\":\"v-b90389ae#_2-java的调度方法\",\"1487\":\"v-b90389ae#_3-线程的优先级\",\"1488\":\"v-b90389ae#_4-注意事项-1\",\"1489\":\"v-b90389ae#_5-线程调度示例\",\"1490\":\"v-b90389ae#v-runnable接口\",\"1491\":\"v-b90389ae#_1-runnable接口创建多线程的步骤\",\"1492\":\"v-b90389ae#_2-示例\",\"1493\":\"v-b90389ae#_2-1\",\"1494\":\"v-b90389ae#_2-2-创建多个线程\",\"1495\":\"v-b90389ae#_2-3-共享成员变量\",\"1496\":\"v-b90389ae#_3-thread和runnable-两种方式的比较\",\"1497\":\"v-b90389ae#_3-1-开发中的选择\",\"1498\":\"v-b90389ae#_3-2-区别\",\"1499\":\"v-b90389ae#_3-3-联系\",\"1500\":\"v-6e057354\",\"1501\":\"v-6e057354#_1-线程的5种状态\",\"1502\":\"v-6e057354#_2-线程的生命周期图解\",\"1503\":\"v-478d9fb6\",\"1504\":\"v-478d9fb6#i-线程安全问题\",\"1505\":\"v-478d9fb6#_1-线程的安全问题概述\",\"1506\":\"v-478d9fb6#_2-示例1-消费问题\",\"1507\":\"v-478d9fb6#_3-示例2-卖票问题\",\"1508\":\"v-478d9fb6#_4-解决方案\",\"1509\":\"v-478d9fb6#_5-线程安全问题代码示例\",\"1510\":\"v-478d9fb6#ii-同步代码块\",\"1511\":\"v-478d9fb6#_1-同步代码块说明\",\"1512\":\"v-478d9fb6#_2-买票问题解决示例\",\"1513\":\"v-478d9fb6#_2-1-执行效果\",\"1514\":\"v-478d9fb6#_2-2-注意synchronized的位置\",\"1515\":\"v-478d9fb6#_3-处理继承thread类的线程安全问题\",\"1516\":\"v-478d9fb6#iii-同步方法\",\"1517\":\"v-478d9fb6#_1-同步方法说明\",\"1518\":\"v-478d9fb6#_1-1-runnable实现的-同步监视器\",\"1519\":\"v-478d9fb6#_1-2-继承thread类的-同步监视器\",\"1520\":\"v-478d9fb6#_2-买票问题解决示例-1\",\"1521\":\"v-478d9fb6#_3-解决懒汉式单例模式的线程安全问题\",\"1522\":\"v-478d9fb6#_3-1-高效修改的逻辑\",\"1523\":\"v-478d9fb6#_4-同步原理和总结\",\"1524\":\"v-478d9fb6#_4-1-同步机制中的锁\",\"1525\":\"v-478d9fb6#_4-2-同步的范围\",\"1526\":\"v-478d9fb6#_4-3-释放锁的操作\",\"1527\":\"v-478d9fb6#_4-4-不会释放锁的操作\",\"1528\":\"v-478d9fb6#_5-同步方式的优缺点\",\"1529\":\"v-478d9fb6#iv-lock锁\",\"1530\":\"v-478d9fb6#_1-说明\",\"1531\":\"v-478d9fb6#_2-lock的优点\",\"1532\":\"v-478d9fb6#_3-reentrantlock类\",\"1533\":\"v-478d9fb6#_3-1-构造函数\",\"1534\":\"v-478d9fb6#_3-2-加锁\",\"1535\":\"v-478d9fb6#_3-3-释放锁\",\"1536\":\"v-478d9fb6#_4-使用示例\",\"1537\":\"v-478d9fb6#_5-synchronized与lock的对比\",\"1538\":\"v-478d9fb6#_6-三种线程安全方式的优先使用顺序\",\"1539\":\"v-5bc349e0\",\"1540\":\"v-5bc349e0#_1-死锁介绍\",\"1541\":\"v-5bc349e0#_2-解决方法\",\"1542\":\"v-5bc349e0#_3-死锁示例\",\"1543\":\"v-5bc349e0#_4-死锁产生的具体原因\",\"1544\":\"v-5bc349e0#_4-1-系统资源的竞争\",\"1545\":\"v-5bc349e0#_4-2-进程推进顺序非法\",\"1546\":\"v-5bc349e0#_4-3-总结\",\"1547\":\"v-5bc349e0#_5-死锁的实例-嵌套锁\",\"1548\":\"v-5bc349e0#_5-1-死锁解析\",\"1549\":\"v-5bc349e0#_5-2-锁的补充\",\"1550\":\"v-ebe7d3e8\",\"1551\":\"v-ebe7d3e8#_1-线程通信涉及到的方法\",\"1552\":\"v-ebe7d3e8#_2-wait-使用说明\",\"1553\":\"v-ebe7d3e8#_3-notify-、notifyall-使用说明\",\"1554\":\"v-ebe7d3e8#_4-补充说明\",\"1555\":\"v-ebe7d3e8#_5-sleep-和wait-的异同\",\"1556\":\"v-ebe7d3e8#_6-线程的通信实例\",\"1557\":\"v-559c43b7\",\"1558\":\"v-559c43b7#i-callable接口\",\"1559\":\"v-559c43b7#_1-callable接口介绍\",\"1560\":\"v-559c43b7#_2-future接口介绍\",\"1561\":\"v-559c43b7#_3-使用callable新增线程的步骤\",\"1562\":\"v-559c43b7#_4-示例\",\"1563\":\"v-559c43b7#ii-线程池\",\"1564\":\"v-559c43b7#_1-线程池介绍\",\"1565\":\"v-559c43b7#_2-线程池的优点\",\"1566\":\"v-559c43b7#_3-excutorservice-线程池接口\",\"1567\":\"v-559c43b7#_4-executors-线程池工具类、工厂类\",\"1568\":\"v-559c43b7#_5-使用线程池步骤\",\"1569\":\"v-559c43b7#_6-示例\",\"1570\":\"v-0010529e\",\"1571\":\"v-0010529e#i-集合概述\",\"1572\":\"v-0010529e#_1-集合的由来\",\"1573\":\"v-0010529e#_2-数组在java内存储存方面的特点\",\"1574\":\"v-0010529e#_3-数组在储存数据方面的弊端\",\"1575\":\"v-0010529e#_4-集合的特点\",\"1576\":\"v-0010529e#_5-集合的使用场景\",\"1577\":\"v-0010529e#ii-集合框架\",\"1578\":\"v-0010529e#_1-集合框架的体系\",\"1579\":\"v-0010529e#_2-collection接口继承图\",\"1580\":\"v-0010529e#_3-map接口继承图\",\"1581\":\"v-6fcb2070\",\"1582\":\"v-6fcb2070#说明\",\"1583\":\"v-6fcb2070#实例化\",\"1584\":\"v-6fcb2070#collection接口的方法\",\"1585\":\"v-7f757179\",\"1586\":\"v-7f757179#i-iterator-接口\",\"1587\":\"v-7f757179#_1-迭代器\",\"1588\":\"v-7f757179#_2-iterator方法和iterator对象\",\"1589\":\"v-7f757179#_3-iterator对象\",\"1590\":\"v-7f757179#_4-遍历方法\",\"1591\":\"v-7f757179#_4-1-指针-游标\",\"1592\":\"v-7f757179#_4-2-next\",\"1593\":\"v-7f757179#_4-3-hashnext\",\"1594\":\"v-7f757179#_5-进行遍历\",\"1595\":\"v-7f757179#_5-1-手动遍历【不使用-仅演示】\",\"1596\":\"v-7f757179#_5-2-for循环遍历【不推荐-仅演示】\",\"1597\":\"v-7f757179#_5-3-while-hasnext遍历【推荐】\",\"1598\":\"v-7f757179#_6-迭代器执行的原理\",\"1599\":\"v-7f757179#_7-遍历的注意事项\",\"1600\":\"v-7f757179#_8-remove-移除元素\",\"1601\":\"v-7f757179#ii-增强-for-循环\",\"1602\":\"v-7f757179#_1-介绍\",\"1603\":\"v-7f757179#_2-示例-遍历集合\",\"1604\":\"v-7f757179#_3-示例-遍历数组\",\"1605\":\"v-7f757179#_4-练习-for循环与增强for循环的对比\",\"1606\":\"v-7f757179#_4-1-普通for循环\",\"1607\":\"v-7f757179#_4-2-增强for循环\",\"1608\":\"v-46df710a\",\"1609\":\"v-46df710a#i-list-接口\",\"1610\":\"v-46df710a#_1-介绍\",\"1611\":\"v-46df710a#_2-list接口的实现类\",\"1612\":\"v-46df710a#_2-1-arraylist-【主要使用】\",\"1613\":\"v-46df710a#_2-2-linkedlist\",\"1614\":\"v-46df710a#_2-3-vector\",\"1615\":\"v-46df710a#ii-源码分析\",\"1616\":\"v-46df710a#_1-arraylist源码分析\",\"1617\":\"v-46df710a#_1-1-构造器\",\"1618\":\"v-46df710a#_1-2-add操作\",\"1619\":\"v-46df710a#_1-3-扩容\",\"1620\":\"v-46df710a#_1-4-带参的构造器\",\"1621\":\"v-46df710a#_1-5-jdk8中-arraylist的变化\",\"1622\":\"v-46df710a#_1-6-总结\",\"1623\":\"v-46df710a#_2-linkedlist\",\"1624\":\"v-46df710a#_2-1-实例化\",\"1625\":\"v-46df710a#_2-2-add添加数据\",\"1626\":\"v-46df710a#_2-3-node的定义\",\"1627\":\"v-46df710a#_3-vector\",\"1628\":\"v-46df710a#_3-1-说明\",\"1629\":\"v-46df710a#_3-2-源码简介\",\"1630\":\"v-46df710a#iii-list方法\",\"1631\":\"v-51e29232\",\"1632\":\"v-51e29232#i-set-接口\",\"1633\":\"v-51e29232#_1-介绍\",\"1634\":\"v-51e29232#_2-set数据存储的特点\",\"1635\":\"v-51e29232#_3-hashset【主要实现类】\",\"1636\":\"v-51e29232#_3-1-特点\",\"1637\":\"v-51e29232#_3-2-hashset-集合判断两个元素相等的标准\",\"1638\":\"v-51e29232#_4-linkedhashset【hashset的子类】\",\"1639\":\"v-51e29232#_5-treeset\",\"1640\":\"v-51e29232#_6-set接口的方法\",\"1641\":\"v-51e29232#_7-底层原理-数据的添加过程与底层结构\",\"1642\":\"v-51e29232#_7-1-核心原理\",\"1643\":\"v-51e29232#_7-2-添加过程分析\",\"1644\":\"v-51e29232#_7-3-储存的方式\",\"1645\":\"v-51e29232#_7-4-链表的形式\",\"1646\":\"v-51e29232#_8-hashcode与equals的重写\",\"1647\":\"v-51e29232#_8-1-hahscode\",\"1648\":\"v-51e29232#_8-2-equals\",\"1649\":\"v-51e29232#_8-3-重写原则\",\"1650\":\"v-51e29232#_9-补充-hashcode与值\",\"1651\":\"v-51e29232#_9-1-哈希算法\",\"1652\":\"v-51e29232#_9-2-哈希冲突\",\"1653\":\"v-51e29232#ii-set-使用\",\"1654\":\"v-51e29232#_1-linkedhashset\",\"1655\":\"v-51e29232#_2-treeset\",\"1656\":\"v-51e29232#_2-1-比较对象是否相同的方法\",\"1657\":\"v-51e29232#_2-2-示例-自然排序\",\"1658\":\"v-51e29232#_2-3-示例-定制排序\",\"1659\":\"v-fcb66968\",\"1660\":\"v-fcb66968#i-map-接口\",\"1661\":\"v-fcb66968#_1-概述\",\"1662\":\"v-fcb66968#_2-map接口的继承结构\",\"1663\":\"v-fcb66968#_3-实现类简介\",\"1664\":\"v-fcb66968#_3-1-hashmap【使用频率最高的实现类】\",\"1665\":\"v-fcb66968#_3-2-linkedhashmap\",\"1666\":\"v-fcb66968#_3-3-treemap\",\"1667\":\"v-fcb66968#_3-4-hashtable\",\"1668\":\"v-fcb66968#_3-5-properties\",\"1669\":\"v-fcb66968#_4-map常用方法\",\"1670\":\"v-fcb66968#_5-key-value的储存特点\",\"1671\":\"v-fcb66968#ii-hashmap底层\",\"1672\":\"v-fcb66968#_1-jdk7中底层实现原理\",\"1673\":\"v-fcb66968#_1-1-初始化\",\"1674\":\"v-fcb66968#_1-2-添加数据\",\"1675\":\"v-fcb66968#_1-3-链表的产生\",\"1676\":\"v-fcb66968#_1-4-扩容\",\"1677\":\"v-fcb66968#_1-5-储存结构图\",\"1678\":\"v-fcb66968#_2-jdk8中的底层实现原理\",\"1679\":\"v-fcb66968#_3-源码分析\",\"1680\":\"v-fcb66968#_4-源码中的一些重要常量\",\"1681\":\"v-fcb66968#iii-linkedhashmap\",\"1682\":\"v-fcb66968#_1-底层\",\"1683\":\"v-fcb66968#_2-使用\",\"1684\":\"v-fcb66968#iv-treemap\",\"1685\":\"v-fcb66968#_1-特点\",\"1686\":\"v-fcb66968#_2-排序\",\"1687\":\"v-fcb66968#_2-1-自然排序\",\"1688\":\"v-fcb66968#_2-2-定制排序\",\"1689\":\"v-fcb66968#v-properties\",\"1690\":\"v-fcb66968#_1-定义配置文件\",\"1691\":\"v-fcb66968#_2-properties类的方法\",\"1692\":\"v-fcb66968#_3-读取配置文件-并加载配置信息\",\"1693\":\"v-f6d6ac5c\",\"1694\":\"v-f6d6ac5c#介绍\",\"1695\":\"v-f6d6ac5c#静态方法\",\"1696\":\"v-659e9238\",\"1697\":\"v-659e9238#i-generic-泛型\",\"1698\":\"v-659e9238#意义\",\"1699\":\"v-659e9238#_1-泛型的设计背景\",\"1700\":\"v-659e9238#_2-泛型的概念\",\"1701\":\"v-659e9238#_3-为什么要有泛型\",\"1702\":\"v-659e9238#_3-1-解决元素安全性问题\",\"1703\":\"v-659e9238#_3-2-解决获取元素时强制类型转换的问题\",\"1704\":\"v-659e9238#_4-集合中的泛型\",\"1705\":\"v-659e9238#_4-1-没有泛型时\",\"1706\":\"v-659e9238#_4-2-有泛型时\",\"1707\":\"v-659e9238#_5-不使用泛型的缺点\",\"1708\":\"v-659e9238#ii-集合中使用泛型\",\"1709\":\"v-659e9238#_1-使用示例-list集合\",\"1710\":\"v-659e9238#_2-使用示例-map集合\",\"1711\":\"v-659e9238#_3-使用总结\",\"1712\":\"v-2f92b158\",\"1713\":\"v-2f92b158#i-自定义泛型类\",\"1714\":\"v-2f92b158#_1-语法\",\"1715\":\"v-2f92b158#_1-1-声明泛型接口和泛型类\",\"1716\":\"v-2f92b158#_1-2-泛型类的实例化\",\"1717\":\"v-2f92b158#_1-3-泛型类的构造器\",\"1718\":\"v-2f92b158#_2-示例-自定义泛型类\",\"1719\":\"v-2f92b158#_2-1-定义泛型类\",\"1720\":\"v-2f92b158#_2-2-实例化泛型类\",\"1721\":\"v-2f92b158#_3-自定义泛型类-接口-的注意事项\",\"1722\":\"v-2f92b158#_4-继承泛型类\",\"1723\":\"v-2f92b158#_4-1-不保留泛型-擦除泛型\",\"1724\":\"v-2f92b158#_4-2-不保留泛型-指定父类泛型具体类型\",\"1725\":\"v-2f92b158#_4-3-保留泛型-全部保留\",\"1726\":\"v-2f92b158#_4-4-保留泛型-部分保留\",\"1727\":\"v-2f92b158#ii-自定义泛型方法\",\"1728\":\"v-2f92b158#_1-定义\",\"1729\":\"v-2f92b158#注意\",\"1730\":\"v-2f92b158#_2-误区\",\"1731\":\"v-2f92b158#_3-标识符\",\"1732\":\"v-2f92b158#_4-语法\",\"1733\":\"v-2f92b158#_5-示例\",\"1734\":\"v-2f92b158#_6-静态化\",\"1735\":\"v-0d8e7fcb\",\"1736\":\"v-0d8e7fcb#i-继承里的泛型\",\"1737\":\"v-0d8e7fcb#_1-不同泛型的类-不具备父子关系-不能互相赋值\",\"1738\":\"v-0d8e7fcb#_2-相同泛型的父子类-具有继承关系\",\"1739\":\"v-0d8e7fcb#_3-总结\",\"1740\":\"v-0d8e7fcb#ii-通配符的使用\",\"1741\":\"v-0d8e7fcb#_1-通配符\",\"1742\":\"v-0d8e7fcb#_2-使用通配符\",\"1743\":\"v-0d8e7fcb#_2-1-赋值\",\"1744\":\"v-0d8e7fcb#_2-2-添加数据\",\"1745\":\"v-0d8e7fcb#_2-3-获取数据\",\"1746\":\"v-0d8e7fcb#_3-方法的使用示例\",\"1747\":\"v-0d8e7fcb#_3-1-不使用通配符泛型\",\"1748\":\"v-0d8e7fcb#_3-2-使用通配符泛型\",\"1749\":\"v-0d8e7fcb#_3-3-总结\",\"1750\":\"v-0d8e7fcb#_4-有限制条件的通配符\",\"1751\":\"v-0d8e7fcb#_4-1-extends-上限\",\"1752\":\"v-0d8e7fcb#_4-2-super-下限\",\"1753\":\"v-0d8e7fcb#_4-3-示例\",\"1754\":\"v-0d8e7fcb#_5-注意事项\",\"1755\":\"v-0d8e7fcb#_5-1-不能用在泛型方法声明上\",\"1756\":\"v-0d8e7fcb#_5-2-不能用在泛型类的声明上\",\"1757\":\"v-0d8e7fcb#_5-3-不能用在创建对象上\",\"1758\":\"v-365b9755\",\"1759\":\"v-365b9755#i-file-类\",\"1760\":\"v-365b9755#_1-类介绍\",\"1761\":\"v-365b9755#_2-file的作用\",\"1762\":\"v-365b9755#_3-file类与文件\",\"1763\":\"v-365b9755#_4-路径分隔符\",\"1764\":\"v-365b9755#_4-1-路径分隔符和系统有关\",\"1765\":\"v-365b9755#_4-2-分隔符常量\",\"1766\":\"v-365b9755#_5-file-常用构造器\",\"1767\":\"v-365b9755#_5-1-public-file-string-pathname\",\"1768\":\"v-365b9755#_5-2-public-file-string-parent-string-child\",\"1769\":\"v-365b9755#_5-3-public-file-file-parent-string-child\",\"1770\":\"v-365b9755#_6-创建硬盘文件\",\"1771\":\"v-365b9755#ii-file-常用方法\",\"1772\":\"v-6a074025\",\"1773\":\"v-6a074025#_1-io简介\",\"1774\":\"v-6a074025#_2-java-io原理\",\"1775\":\"v-6a074025#_3-流的分类\",\"1776\":\"v-6a074025#_4-抽象基类\",\"1777\":\"v-6a074025#_5-io流体系\",\"1778\":\"v-6a074025#_6-节点流和处理流\",\"1779\":\"v-6a074025#_6-1-节点流\",\"1780\":\"v-6a074025#_6-2-处理流\",\"1781\":\"v-f4c0423a\",\"1782\":\"v-f4c0423a#说明\",\"1783\":\"v-f4c0423a#_1-输入流-inputstream-reader\",\"1784\":\"v-f4c0423a#_1-1-inputstream\",\"1785\":\"v-f4c0423a#_1-2-reader\",\"1786\":\"v-f4c0423a#_2-输出流-outputstream-writer\",\"1787\":\"v-f4c0423a#_2-1-outputstream\",\"1788\":\"v-f4c0423a#_2-2-writer\",\"1789\":\"v-f4c0423a#_3-关闭流\",\"1790\":\"v-f4c0423a#_4-字节流与字符流的选择\",\"1791\":\"v-f4c0423a#_5-节点流\",\"1792\":\"v-f4c0423a#_6-流操作的基本步骤\",\"1793\":\"v-f4c0423a#_7-输入流与输出流的方法\",\"1794\":\"v-495f7ca6\",\"1795\":\"v-495f7ca6#i-节点流介绍\",\"1796\":\"v-495f7ca6#_1-节点流的方法\",\"1797\":\"v-495f7ca6#_2-注意点\",\"1798\":\"v-495f7ca6#ii-filereader\",\"1799\":\"v-495f7ca6#_1-filereader的操作\",\"1800\":\"v-495f7ca6#_1-1-初始化-创建流对象\",\"1801\":\"v-495f7ca6#_1-2-read-数据读入\",\"1802\":\"v-495f7ca6#_1-3-close-关闭流\",\"1803\":\"v-495f7ca6#_2-filereader的异常处理\",\"1804\":\"v-495f7ca6#_3-filereader示例-文本文件读取\",\"1805\":\"v-495f7ca6#_4-一次读取多个字符\",\"1806\":\"v-495f7ca6#_4-1-代码解析\",\"1807\":\"v-495f7ca6#_4-2-通过string输出char数组\",\"1808\":\"v-495f7ca6#_4-3-误区\",\"1809\":\"v-495f7ca6#iii-filewriter\",\"1810\":\"v-495f7ca6#说明\",\"1811\":\"v-495f7ca6#_1-相关操作-详见流的基类\",\"1812\":\"v-495f7ca6#_1-1-初始化-开启流\",\"1813\":\"v-495f7ca6#_1-2-write-数据写出\",\"1814\":\"v-495f7ca6#_1-3-close-资源关闭\",\"1815\":\"v-495f7ca6#_2-异常处理\",\"1816\":\"v-495f7ca6#_3-filewriter写出示例\",\"1817\":\"v-495f7ca6#_4-filereader与filewriter结合示例-文件的复制\",\"1818\":\"v-495f7ca6#_5-处理图片资源\",\"1819\":\"v-495f7ca6#iv-字节流\",\"1820\":\"v-495f7ca6#说明-1\",\"1821\":\"v-495f7ca6#_1-初始化\",\"1822\":\"v-495f7ca6#_2-基本操作\",\"1823\":\"v-495f7ca6#_3-示例-创建copy方法-进行文件的复制\",\"1824\":\"v-12515210\",\"1825\":\"v-12515210#i-介绍\",\"1826\":\"v-12515210#原理和使用\",\"1827\":\"v-12515210#ii-缓冲流的类\",\"1828\":\"v-12515210#_1-字节流-读入\",\"1829\":\"v-12515210#_2-字节流-写出\",\"1830\":\"v-12515210#_3-字符流-读入\",\"1831\":\"v-12515210#_4-字符流-写出\",\"1832\":\"v-12515210#iii-基本操作\",\"1833\":\"v-12515210#_1-基本操作方法\",\"1834\":\"v-12515210#_2-readline-读取一行-bufferedreader\",\"1835\":\"v-12515210#_3-newline-输入换行符-bufferedwriter\",\"1836\":\"v-12515210#_4-缓冲流-字节流-使用示例\",\"1837\":\"v-12515210#_5-缓冲流-字符流-使用示例\",\"1838\":\"v-12515210#_6-效率测试\",\"1839\":\"v-3a91a2c3\",\"1840\":\"v-3a91a2c3#i-转换流介绍\",\"1841\":\"v-3a91a2c3#_1-说明\",\"1842\":\"v-3a91a2c3#_2-转换流的类\",\"1843\":\"v-3a91a2c3#_3-作用\",\"1844\":\"v-3a91a2c3#_4-使用说明\",\"1845\":\"v-3a91a2c3#ii-inputstreamreader\",\"1846\":\"v-3a91a2c3#说明\",\"1847\":\"v-3a91a2c3#_1-构造器1-不指定字符集\",\"1848\":\"v-3a91a2c3#_2-构造器2-指定字符集\",\"1849\":\"v-3a91a2c3#_3-主要方法\",\"1850\":\"v-3a91a2c3#_3-1-read\",\"1851\":\"v-3a91a2c3#_3-2-getencoding\",\"1852\":\"v-3a91a2c3#_3-3-close\",\"1853\":\"v-3a91a2c3#_4-使用示例\",\"1854\":\"v-3a91a2c3#iii-outputstreamwriter\",\"1855\":\"v-3a91a2c3#_1-构造器1-不指定字符集-1\",\"1856\":\"v-3a91a2c3#_2-构造器2-指定字符集-1\",\"1857\":\"v-3a91a2c3#_3-主要方法-1\",\"1858\":\"v-3a91a2c3#_4-综合示例-对文本文件进行转码\",\"1859\":\"v-3a91a2c3#iv-补充-字符集\",\"1860\":\"v-3a91a2c3#_1-编码表的由来\",\"1861\":\"v-3a91a2c3#_2-常见编码集\",\"1862\":\"v-3a91a2c3#_3-编码原理\",\"1863\":\"v-3a91a2c3#_4-unicode与utf-8的由来\",\"1864\":\"v-3a91a2c3#_5-utf-8的原理\",\"1865\":\"v-3a91a2c3#_6-总结\",\"1866\":\"v-2b0e0704\",\"1867\":\"v-2b0e0704#i-标准流\",\"1868\":\"v-2b0e0704#_1-system-in与system-out\",\"1869\":\"v-2b0e0704#_2-重定向\",\"1870\":\"v-2b0e0704#_3-示例-标准输入流、输出流的练习\",\"1871\":\"v-2b0e0704#ii-打印流\",\"1872\":\"v-2b0e0704#_1-printstream和printwriter\",\"1873\":\"v-2b0e0704#_2-示例-将基本数据类型输出到一个文件\",\"1874\":\"v-2b0e0704#iii-数据流\",\"1875\":\"v-2b0e0704#_1-数据流的类\",\"1876\":\"v-2b0e0704#_2-datainputstream中的方法\",\"1877\":\"v-2b0e0704#_3-dataoutputstream中的方法\",\"1878\":\"v-2b0e0704#_4-dataoutputstream-使用示例\",\"1879\":\"v-2b0e0704#_5-datainputstream-使用示例\",\"1880\":\"v-2b0e0704#iv-随机存储文件流\",\"1881\":\"v-2b0e0704#_1-随机访问机制\",\"1882\":\"v-2b0e0704#_2-记录指针与相关方法\",\"1883\":\"v-2b0e0704#_2-1-getfilepointer方法\",\"1884\":\"v-2b0e0704#_2-2-seek方法\",\"1885\":\"v-2b0e0704#_3-构造器与mode参数\",\"1886\":\"v-2b0e0704#_3-1-mode\",\"1887\":\"v-2b0e0704#_3-2-r模式与rw模式\",\"1888\":\"v-2b0e0704#_4-使用示例-copy文件\",\"1889\":\"v-2b0e0704#_5-使用指针\",\"1890\":\"v-2b0e0704#_5-1-实现追加和插入效果\",\"1891\":\"v-2b0e0704#_5-2-示例-在指针位置进行写入\",\"1892\":\"v-2b0e0704#_6-断点续传\",\"1893\":\"v-11e78490\",\"1894\":\"v-11e78490#介绍\",\"1895\":\"v-11e78490#_1-序列化与反序列化\",\"1896\":\"v-11e78490#_2-对象的序列化机制\",\"1897\":\"v-11e78490#_3-一些操作\",\"1898\":\"v-11e78490#_3-1-初始化\",\"1899\":\"v-11e78490#_3-2-writeobject\",\"1900\":\"v-11e78490#_3-3-readobject\",\"1901\":\"v-11e78490#_3-4-flush\",\"1902\":\"v-11e78490#_4-示例-字符串的序列化和反序列化\",\"1903\":\"v-11e78490#_4-1-序列化\",\"1904\":\"v-11e78490#_4-2-反序列化\",\"1905\":\"v-11e78490#_5-序列化类-需要满足的要求\",\"1906\":\"v-11e78490#_6-示例-自定义类实线序列化与反序列化\",\"1907\":\"v-11e78490#_6-1-目标类\",\"1908\":\"v-11e78490#_6-2-序列化\",\"1909\":\"v-11e78490#_6-3-反序列化\",\"1910\":\"v-11e78490#_7-serialversionuid\",\"1911\":\"v-00565ee0\",\"1912\":\"v-00565ee0#i-nio2\",\"1913\":\"v-00565ee0#_1-java-nio概述\",\"1914\":\"v-00565ee0#_2-nio-2-概述\",\"1915\":\"v-00565ee0#_3-核心api\",\"1916\":\"v-00565ee0#_3-1-path接口\",\"1917\":\"v-00565ee0#_3-2-paths和files工具类\",\"1918\":\"v-00565ee0#_4-path接口常用方法\",\"1919\":\"v-00565ee0#_5-paths类的方法\",\"1920\":\"v-00565ee0#_6-files类常用方法\",\"1921\":\"v-00565ee0#ii-第三方jar包\",\"1922\":\"v-25f158ce\",\"1923\":\"v-25f158ce#简介\",\"1924\":\"v-25f158ce#_1-网络基础\",\"1925\":\"v-25f158ce#_2-网络通信的要素\",\"1926\":\"v-25f158ce#_3-如何实现网络通信\",\"1927\":\"v-25f158ce#_4-网络通信协议\",\"1928\":\"v-25f158ce#_5-通信过程\",\"1929\":\"v-1399e2a7\",\"1930\":\"v-1399e2a7#i-ip与端口号\",\"1931\":\"v-1399e2a7#_1-hostaddress-ip地址介绍\",\"1932\":\"v-1399e2a7#_2-ip地址分类\",\"1933\":\"v-1399e2a7#_2-1-分类方式1-ipv4和ipv6\",\"1934\":\"v-1399e2a7#_2-2-分类方式2-公网地址和私有地址\",\"1935\":\"v-1399e2a7#_3-本机ip\",\"1936\":\"v-1399e2a7#_4-hostname-域名\",\"1937\":\"v-1399e2a7#_5-端口号\",\"1938\":\"v-1399e2a7#_6-端口分类\",\"1939\":\"v-1399e2a7#_7-socket\",\"1940\":\"v-1399e2a7#ii-inetaddress类\",\"1941\":\"v-1399e2a7#readme\",\"1942\":\"v-1399e2a7#_1-介绍\",\"1943\":\"v-1399e2a7#_2-构造器\",\"1944\":\"v-1399e2a7#_2-1-getlocalhost-获得本地ip对象\",\"1945\":\"v-1399e2a7#_2-2-getbyname\",\"1946\":\"v-1399e2a7#_3-gethostaddress\",\"1947\":\"v-1399e2a7#_4-gethostname-获取ip地址的主机名\",\"1948\":\"v-1399e2a7#_5-isreachable-测试是否可以达到该地址\",\"1949\":\"v-3971b80d\",\"1950\":\"v-3971b80d#i-网络通信协议\",\"1951\":\"v-3971b80d#_1-网络通信协议\",\"1952\":\"v-3971b80d#_2-通信协议的分层\",\"1953\":\"v-3971b80d#ii-tcp与udp\",\"1954\":\"v-3971b80d#_1-传输层协议\",\"1955\":\"v-3971b80d#_2-tcp-ip-协议簇\",\"1956\":\"v-3971b80d#_3-tcp协议\",\"1957\":\"v-3971b80d#_4-udp协议\",\"1958\":\"v-3971b80d#_5-tcp的三次握手\",\"1959\":\"v-3971b80d#_6-tcp的四次挥手\",\"1960\":\"v-7c301910\",\"1961\":\"v-7c301910#_1-说明\",\"1962\":\"v-7c301910#_2-socket分类\",\"1963\":\"v-7c301910#_3-socket类常用构造器\",\"1964\":\"v-7c301910#_3-1-根据ip创建\",\"1965\":\"v-7c301910#_3-2-根据host创建\",\"1966\":\"v-7c301910#_4-socket类常用方法\",\"1967\":\"v-0320aed6\",\"1968\":\"v-0320aed6#_1-基于socket的tcp编程\",\"1969\":\"v-0320aed6#_2-客户端socket\",\"1970\":\"v-0320aed6#_3-客户端创建socket对象\",\"1971\":\"v-0320aed6#_3-1-socket的构造器\",\"1972\":\"v-0320aed6#_3-2-示例\",\"1973\":\"v-0320aed6#_4-服务器端socket\",\"1974\":\"v-0320aed6#_5-服务器端建立serversocket\",\"1975\":\"v-0320aed6#_5-1-创建serversocket对象\",\"1976\":\"v-0320aed6#_5-2-accept方法\",\"1977\":\"v-0320aed6#_5-3-使用示例\",\"1978\":\"v-0320aed6#_6-tcp网络编程示例\",\"1979\":\"v-79fb5655\",\"1980\":\"v-79fb5655#i-udp网络编程\",\"1981\":\"v-79fb5655#_1-udp网络通信\",\"1982\":\"v-79fb5655#_2-udp通信流程\",\"1983\":\"v-79fb5655#_3-发送端示例\",\"1984\":\"v-79fb5655#_4-接收端示例\",\"1985\":\"v-79fb5655#ii-datagramsocket\",\"1986\":\"v-79fb5655#iii-datagrampacket\",\"1987\":\"v-952b4f74\",\"1988\":\"v-952b4f74#_1-url介绍\",\"1989\":\"v-952b4f74#_2-url的基本结构\",\"1990\":\"v-952b4f74#_3-url类\",\"1991\":\"v-952b4f74#_4-url类常用方法\",\"1992\":\"v-952b4f74#_5-urlconnection\",\"1993\":\"v-952b4f74#_5-1-urlconnection的创建\",\"1994\":\"v-952b4f74#_5-2-交互方法\",\"1995\":\"v-952b4f74#_6-uri、url和urn的区别\",\"1996\":\"v-952b4f74#_7-小结\",\"1997\":\"v-679946d5\",\"1998\":\"v-679946d5#reflection-反射机制\",\"1999\":\"v-679946d5#_1-动态语言与静态语言\",\"2000\":\"v-679946d5#_2-class与反射工作原理\",\"2001\":\"v-679946d5#_3-反射机制提供的功能\",\"2002\":\"v-679946d5#_4-反射相关api\",\"2003\":\"v-679946d5#_5-反射的动态性\",\"2004\":\"v-679946d5#_5-1-示例\",\"2005\":\"v-679946d5#_5-2-补充说明\",\"2006\":\"v-679946d5#_6-反射机制使用示例-仅体验\",\"2007\":\"v-679946d5#_6-1-创建test类-person\",\"2008\":\"v-679946d5#_6-2-不使用反射-对person的操作\",\"2009\":\"v-679946d5#_6-3-使用反射-操作person\",\"2010\":\"v-679946d5#_6-4-使用反射-操作person私有成员\",\"2011\":\"v-3fce3636\",\"2012\":\"v-3fce3636#_1-class类\",\"2013\":\"v-3fce3636#_2-class与类的加载\",\"2014\":\"v-3fce3636#_3-使用class的本质\",\"2015\":\"v-3fce3636#_4-class的特点\",\"2016\":\"v-3fce3636#_5-可以有class对象的元素\",\"2017\":\"v-3fce3636#_6-获取class类的实例\",\"2018\":\"v-3fce3636#_6-1-调用运行时类的属性-class\",\"2019\":\"v-3fce3636#_6-2-通过运行时类的对象-调用getclass\",\"2020\":\"v-3fce3636#_6-3-调用class的静态方法-forname-string-classpath-【常用】\",\"2021\":\"v-3fce3636#_6-4-使用类的加载器-classloader-了解\",\"2022\":\"v-3fce3636#_7-class类的常用方法\",\"2023\":\"v-2fee7965\",\"2024\":\"v-2fee7965#i-类的加载\",\"2025\":\"v-2fee7965#_1-类的初始化\",\"2026\":\"v-2fee7965#_1-1-load-类的加载\",\"2027\":\"v-2fee7965#_1-2-link-类的链接\",\"2028\":\"v-2fee7965#_1-3-initialize-类的初始化\",\"2029\":\"v-2fee7965#_2-类初始化的时机\",\"2030\":\"v-2fee7965#ii-classloader\",\"2031\":\"v-2fee7965#_1-类加载器\",\"2032\":\"v-2fee7965#_2-加载器获取\",\"2033\":\"v-2fee7965#_3-getresourceasstream-获取类路径下的指定文件的输入流\",\"2034\":\"v-2fee7965#_4-使用classloader加载配置文件\",\"2035\":\"v-3b69e562\",\"2036\":\"v-3b69e562#i-运行时类的对象\",\"2037\":\"v-3b69e562#_1-newinstance-通过反射创建对应的运行时类的对象\",\"2038\":\"v-3b69e562#_2-getdeclaredconstructor\",\"2039\":\"v-3b69e562#_3-获取运行时类的完整结构\",\"2040\":\"v-3b69e562#ii-获取属性结构\",\"2041\":\"v-3b69e562#_1-getfields-获取自己和父类所有public属性\",\"2042\":\"v-3b69e562#输出结果\",\"2043\":\"v-3b69e562#_2-getdeclarefields-获取所有自己所有权限的属性\",\"2044\":\"v-3b69e562#遍历结果\",\"2045\":\"v-3b69e562#_3-获取属性的结构\",\"2046\":\"v-3b69e562#iii-获取方法结构\",\"2047\":\"v-3b69e562#_1-获取运行时类的方法\",\"2048\":\"v-3b69e562#_2-获取运行时方法的结构\",\"2049\":\"v-3b69e562#iv-获取其他信息\",\"2050\":\"v-3b69e562#_1-获取运行时类的构造器结构\",\"2051\":\"v-3b69e562#_2-getsuperclass-获取运行时类的父类\",\"2052\":\"v-3b69e562#_3-getgenericsuperclass-获取运行时类的父类的泛型\",\"2053\":\"v-3b69e562#getactualtypearguments-获取运行时类的父类的泛型\",\"2054\":\"v-3b69e562#_4-getinterfaces-获取运行时类实现的接口\",\"2055\":\"v-3b69e562#_5-getpackage-获取运行时类所在的包\",\"2056\":\"v-3b69e562#_6-getannotations-获取运行时类声明的注解\",\"2057\":\"v-3b69e562#v-调用指定结构\",\"2058\":\"v-3b69e562#_1-调用属性\",\"2059\":\"v-3b69e562#_1-1-getfield-获取属性【一般不用】\",\"2060\":\"v-3b69e562#_1-2getdeclaredfield-获取属性\",\"2061\":\"v-3b69e562#_1-3get-获取属性值\",\"2062\":\"v-3b69e562#_1-4set-设置属性值\",\"2063\":\"v-3b69e562#_2-调用方法\",\"2064\":\"v-3b69e562#_2-1-getdeclaredmethod-获取指定的某个方法\",\"2065\":\"v-3b69e562#_2-2-getmethod-获取指定的某个方法【一般不用】\",\"2066\":\"v-3b69e562#_2-3-invoke-执行invoke\",\"2067\":\"v-3b69e562#_3-调用构造器\",\"2068\":\"v-3b69e562#getdeclaredconstructor-获取指定的构造器\",\"2069\":\"v-3b69e562#_4-setaccessible-允许操作封装的类结构\",\"2070\":\"v-7e149adb\",\"2071\":\"v-7e149adb#i-动态代理\",\"2072\":\"v-7e149adb#_1-代理设计模式\",\"2073\":\"v-7e149adb#例子\",\"2074\":\"v-7e149adb#_2-静态代理\",\"2075\":\"v-7e149adb#_2-1-示例\",\"2076\":\"v-7e149adb#_2-2-缺点\",\"2077\":\"v-7e149adb#_3-动态代理介绍\",\"2078\":\"v-7e149adb#_4-静态代理示例\",\"2079\":\"v-7e149adb#_4-1-接口\",\"2080\":\"v-7e149adb#_4-2-代理类\",\"2081\":\"v-7e149adb#_4-3-被代理类\",\"2082\":\"v-7e149adb#_4-4-使用\",\"2083\":\"v-7e149adb#ii-动态代理使用\",\"2084\":\"v-7e149adb#_1-需求\",\"2085\":\"v-7e149adb#_2-逻辑链条\",\"2086\":\"v-7e149adb#_2-1-特点\",\"2087\":\"v-7e149adb#_2-2-针对不通的方法进行增强\",\"2088\":\"v-7e149adb#_3-相关api\",\"2089\":\"v-7e149adb#_3-1-proxy-所有动态代理类的父类\",\"2090\":\"v-7e149adb#_3-2-proxy-newproxyinstance\",\"2091\":\"v-7e149adb#_3-3-invocationhandler-调用被代理类方法的接口\",\"2092\":\"v-7e149adb#_3-4-invocationhandler-invoke-调用被代理类方法的方法\",\"2093\":\"v-7e149adb#_4-代理类代码分析\",\"2094\":\"v-7e149adb#_4-1-代理类\",\"2095\":\"v-7e149adb#_4-2-代理类-proxy-newproxyinstance的参数3\",\"2096\":\"v-7e149adb#_4-3-使用示例\",\"2097\":\"v-7e149adb#_4-4-代理流程分析\",\"2098\":\"v-7e149adb#_5-aop与动态代理\",\"2099\":\"v-7e149adb#_5-1-aop-aspect-orient-programming\",\"2100\":\"v-7e149adb#_5-2-aop代理\",\"2101\":\"v-7e149adb#_5-3-示例\",\"2102\":\"v-66593afe\",\"2103\":\"v-66593afe#_1-版本说明\",\"2104\":\"v-66593afe#_2-lts\",\"2105\":\"v-66593afe#_3-java安装\",\"2106\":\"v-66593afe#_4-配置idea\",\"2107\":\"v-66593afe#_5-idea-多版本切换\",\"2108\":\"v-66593afe#_6-jdk与language-level\",\"2109\":\"v-a6f71656\",\"2110\":\"v-a6f71656#i-lambda表达式\",\"2111\":\"v-a6f71656#_1-简介\",\"2112\":\"v-a6f71656#_2-lambda本质\",\"2113\":\"v-a6f71656#_3-应用场景\",\"2114\":\"v-a6f71656#_4-格式\",\"2115\":\"v-a6f71656#_4-1-一定省略的内容\",\"2116\":\"v-a6f71656#_4-2-特殊情况下省略的内容\",\"2117\":\"v-a6f71656#_5-类型推断\",\"2118\":\"v-a6f71656#_6-语法总结\",\"2119\":\"v-a6f71656#ii-lambda的使用\",\"2120\":\"v-a6f71656#_1-示例-无参、无return\",\"2121\":\"v-a6f71656#示例-runnable接口的run函数\",\"2122\":\"v-a6f71656#_2-格式2-1参、无return\",\"2123\":\"v-a6f71656#示例-consumer接口的accept方法\",\"2124\":\"v-a6f71656#_3-格式3-省略数据类型\",\"2125\":\"v-a6f71656#示例-见格式2精简模式\",\"2126\":\"v-a6f71656#_4-格式4-省略1参的小括号\",\"2127\":\"v-a6f71656#示例-见格式2示例的\",\"2128\":\"v-a6f71656#_5-格式5-多参、多执行语句\",\"2129\":\"v-a6f71656#示例-comparator接口-compare方法\",\"2130\":\"v-a6f71656#_6-省略\",\"2131\":\"v-1d2bd89a\",\"2132\":\"v-1d2bd89a#i-函数式接口\",\"2133\":\"v-1d2bd89a#functional-的意义\",\"2134\":\"v-1d2bd89a#_1-functional-介绍\",\"2135\":\"v-1d2bd89a#函数式接口的特点\",\"2136\":\"v-1d2bd89a#如何使用函数式接口\",\"2137\":\"v-1d2bd89a#函数式接口要定义多少\",\"2138\":\"v-1d2bd89a#内置函数式接口\",\"2139\":\"v-1d2bd89a#_2-注解\",\"2140\":\"v-1d2bd89a#_3-自定义函数式接口\",\"2141\":\"v-1d2bd89a#_4-lambda与创建functional对象\",\"2142\":\"v-1d2bd89a#_5-缺点\",\"2143\":\"v-1d2bd89a#ii-内置functional\",\"2144\":\"v-1d2bd89a#_1-java内置四大核心functional\",\"2145\":\"v-1d2bd89a#_2-其他类型functional\",\"2146\":\"v-377171aa\",\"2147\":\"v-377171aa#i-方法引用介绍\",\"2148\":\"v-377171aa#_1-定义\",\"2149\":\"v-377171aa#_2-使用情景\",\"2150\":\"v-377171aa#_3-语法格式\",\"2151\":\"v-377171aa#解析\",\"2152\":\"v-377171aa#_4-使用要求\",\"2153\":\"v-377171aa#ii-方法引用示例\",\"2154\":\"v-377171aa#_1-示例1-情况1-对象-非静态方法\",\"2155\":\"v-377171aa#_1-1-lambda表达式写法\",\"2156\":\"v-377171aa#_1-2-方法引用写法\",\"2157\":\"v-377171aa#_2-示例2-情况1-对象-非静态方法-自定义类\",\"2158\":\"v-377171aa#_2-1-lambda表达式\",\"2159\":\"v-377171aa#_2-2-方法引用\",\"2160\":\"v-377171aa#_3-示例3-情况二-类-静态方法\",\"2161\":\"v-377171aa#_3-1-lambda\",\"2162\":\"v-377171aa#_3-2-方法引用\",\"2163\":\"v-377171aa#_4-示例4-情况三-类-实例方法\",\"2164\":\"v-377171aa#_4-1-lambda\",\"2165\":\"v-377171aa#_4-2-方法引用\",\"2166\":\"v-377171aa#_5-示例5-情况三-类-实例方法-自定义类\",\"2167\":\"v-377171aa#_5-1-lambda\",\"2168\":\"v-377171aa#_5-2-方法引用\",\"2169\":\"v-377171aa#iii-构造器引用\",\"2170\":\"v-377171aa#_1-使用条件\",\"2171\":\"v-377171aa#_2-语法格式\",\"2172\":\"v-377171aa#_3-示例1-空参构造器\",\"2173\":\"v-377171aa#_3-1-lambda-1\",\"2174\":\"v-377171aa#_3-2-构造器引用\",\"2175\":\"v-377171aa#_4-示例2-单参构造器\",\"2176\":\"v-377171aa#_4-1-lambda-1\",\"2177\":\"v-377171aa#_4-2-构造器引用\",\"2178\":\"v-377171aa#_5-示例3-多参构造器\",\"2179\":\"v-377171aa#_5-1-lambda-1\",\"2180\":\"v-377171aa#_5-2-构造器引用\",\"2181\":\"v-377171aa#iv-数组引用\",\"2182\":\"v-377171aa#_1-语法格式\",\"2183\":\"v-377171aa#_2-示例\",\"2184\":\"v-377171aa#_2-1-lambda\",\"2185\":\"v-377171aa#_2-2-构造器引用\",\"2186\":\"v-3e82f83f\",\"2187\":\"v-3e82f83f#i-stream-api\",\"2188\":\"v-3e82f83f#_1-stream-api-说明\",\"2189\":\"v-3e82f83f#_2-stream-api使用背景\",\"2190\":\"v-3e82f83f#_3-stream的本质\",\"2191\":\"v-3e82f83f#stream-和-collection-集合的区别\",\"2192\":\"v-3e82f83f#_4-stream的操作步骤\",\"2193\":\"v-3e82f83f#_5-stream的特点\",\"2194\":\"v-3e82f83f#ii-stream-实例化\",\"2195\":\"v-3e82f83f#_1-通过集合创建stream\",\"2196\":\"v-3e82f83f#_1-1-顺序流\",\"2197\":\"v-3e82f83f#_1-2-并行流\",\"2198\":\"v-3e82f83f#_2-通过数组创建stream\",\"2199\":\"v-3e82f83f#重载形式\",\"2200\":\"v-3e82f83f#_3-通过stream的of-创建stream\",\"2201\":\"v-3e82f83f#_4-创建无限流stream【了解】\",\"2202\":\"v-3e82f83f#_4-1-迭代\",\"2203\":\"v-3e82f83f#_4-2-生成\",\"2204\":\"v-3e82f83f#iii-stream-的操作\",\"2205\":\"v-3e82f83f#_1-中间操作说明\",\"2206\":\"v-3e82f83f#_2-总结操作的方法\",\"2207\":\"v-3e82f83f#_3-终止操作说明\",\"2208\":\"v-3e82f83f#_4-终止操作的方法\",\"2209\":\"v-3e82f83f#iv-筛选与切片\",\"2210\":\"v-3e82f83f#_1-filter-筛选\",\"2211\":\"v-3e82f83f#_2-distinct-去重\",\"2212\":\"v-3e82f83f#_3-limit-截断\",\"2213\":\"v-3e82f83f#_4-skip-跳过\",\"2214\":\"v-3e82f83f#v-映射\",\"2215\":\"v-3e82f83f#_1-map\",\"2216\":\"v-3e82f83f#_1-1-maptodouble\",\"2217\":\"v-3e82f83f#_1-2-maptoint\",\"2218\":\"v-3e82f83f#_1-3-maptolong\",\"2219\":\"v-3e82f83f#_2-flatmap\",\"2220\":\"v-3e82f83f#_3-map和flatmap的对比示例、\",\"2221\":\"v-3e82f83f#_3-1-素材\",\"2222\":\"v-3e82f83f#_3-2-map的使用\",\"2223\":\"v-3e82f83f#_3-3-flatmap\",\"2224\":\"v-3e82f83f#_3-4-总结\",\"2225\":\"v-3e82f83f#vi-排序\",\"2226\":\"v-3e82f83f#_1-sorted-自然排序\",\"2227\":\"v-3e82f83f#_2-sorted-comparator-com-定制排序\",\"2228\":\"v-3e82f83f#vii-匹配与查找\",\"2229\":\"v-3e82f83f#_1-allmatch-检查是否匹配所有元素\",\"2230\":\"v-3e82f83f#_2-anymatch-检查是否至少匹配一个元素\",\"2231\":\"v-3e82f83f#_3-nonematch-检查是否没有匹配任何元素\",\"2232\":\"v-3e82f83f#_4-findfirst-返回第一个元素\",\"2233\":\"v-3e82f83f#_5-findany-返回当前流中任意元素\",\"2234\":\"v-3e82f83f#_6-count-返回流中元素总数\",\"2235\":\"v-3e82f83f#_7-max-返回流中最大值\",\"2236\":\"v-3e82f83f#_8-min-返回流中最小值\",\"2237\":\"v-3e82f83f#_9-foreach-内部迭代\",\"2238\":\"v-3e82f83f#viii-归约与收集\",\"2239\":\"v-3e82f83f#_1-reduce-归约\",\"2240\":\"v-3e82f83f#_1-1-reduce-binaryoperator-b\",\"2241\":\"v-3e82f83f#_1-2-map-reduce模式\",\"2242\":\"v-3e82f83f#_2-收集\",\"2243\":\"v-3e82f83f#collectors\",\"2244\":\"v-3e82f83f#collectors的方法\",\"2245\":\"v-3611b120\",\"2246\":\"v-3611b120#i-optional-介绍\",\"2247\":\"v-3611b120#_1-介绍\",\"2248\":\"v-3611b120#_2-产生背景\",\"2249\":\"v-3611b120#_3-应用场景\",\"2250\":\"v-3611b120#ii-optional常用方法\",\"2251\":\"v-3611b120#_1-创建optional类\",\"2252\":\"v-3611b120#_1-1-optional-of-t-t\",\"2253\":\"v-3611b120#_1-2-optional-empty\",\"2254\":\"v-3611b120#_1-3-optional-ofnullable-t-t-【常用】\",\"2255\":\"v-3611b120#_2-判断optional容器中是否有对象\",\"2256\":\"v-3611b120#_2-1-ispresent\",\"2257\":\"v-3611b120#_2-2-ifpresent\",\"2258\":\"v-3611b120#_3-获取optional容器的对象值\",\"2259\":\"v-3611b120#_3-1-get-获取对象包含的值\",\"2260\":\"v-3611b120#_3-2-t-orelse\",\"2261\":\"v-5d5ace0a\",\"2262\":\"v-5d5ace0a#i-modularity\",\"2263\":\"v-5d5ace0a#ii-repl工具\",\"2264\":\"v-5d5ace0a#iii-try语句\",\"2265\":\"v-5d5ace0a#iv-底层改变\",\"2266\":\"v-5d5ace0a#v-变量类型推断\",\"2267\":\"v-5d5ace0a#vi-string新增方法\",\"2268\":\"v-5d5ace0a#vii-其他\",\"2269\":\"v-5d5ace0a#_1-copyof\",\"2270\":\"v-5d5ace0a#_2-optional加强\",\"2271\":\"v-5d5ace0a#_3-局部类型推断升级\",\"2272\":\"v-5d5ace0a#_4-httpclient\",\"2273\":\"v-5d5ace0a#_5-更简化的编译运行\",\"2274\":\"v-5d5ace0a#_6-接口中声明私有方法\",\"2275\":\"v-5d5ace0a#_7-钻石操作符-的增强\",\"2276\":\"v-18070eda\",\"2277\":\"v-18070eda#_1-数据持久化\",\"2278\":\"v-18070eda#_2-java中的数据存储技术\",\"2279\":\"v-18070eda#_3-jdbc介绍\",\"2280\":\"v-18070eda#_3-1-没有jdbc-java程序访问数据库时是这样的\",\"2281\":\"v-18070eda#_3-2-有了jdbc-java程序访问数据库时是这样的\",\"2282\":\"v-18070eda#_3-3-总结\",\"2283\":\"v-18070eda#_4-jdbc体系结构\",\"2284\":\"v-18070eda#_5-jdbc程序编写步骤\",\"2285\":\"v-23acedac\",\"2286\":\"v-23acedac#i-安装驱动\",\"2287\":\"v-23acedac#_1-driver-驱动介绍\",\"2288\":\"v-23acedac#_2-下载mysql驱动\",\"2289\":\"v-23acedac#_3-驱动文件介绍\",\"2290\":\"v-23acedac#_4-安装并使用驱动\",\"2291\":\"v-23acedac#_5-加载驱动源码\",\"2292\":\"v-23acedac#ii-数据库连接要素\",\"2293\":\"v-23acedac#_1-driver\",\"2294\":\"v-23acedac#_2-url\",\"2295\":\"v-23acedac#_3-用户名、密码\",\"2296\":\"v-23acedac#iii-连接数据库\",\"2297\":\"v-23acedac#_1-方式1-使用mysql驱动的api连接\",\"2298\":\"v-23acedac#_2-方式2-使用反射-不体现第三方api\",\"2299\":\"v-23acedac#_3-方式3-使用drivermanager\",\"2300\":\"v-23acedac#_4-方式4-省略驱动的注册\",\"2301\":\"v-23acedac#_5-方式5-将连接方式写入配置文件让驱动加载【最终方案】\",\"2302\":\"v-23acedac#_5-1-配置文件\",\"2303\":\"v-23acedac#_5-2-代码\",\"2304\":\"v-23acedac#_5-3-使用配置文件的好处\",\"2305\":\"v-6cdcc950\",\"2306\":\"v-6cdcc950#i-操作和访问数据库\",\"2307\":\"v-6cdcc950#_1-说明\",\"2308\":\"v-6cdcc950#_2-对数据库的调用方式\",\"2309\":\"v-6cdcc950#_3-statement的弊端\",\"2310\":\"v-6cdcc950#_3-1-问题一-存在拼串操作-繁琐\",\"2311\":\"v-6cdcc950#_3-2-问题二-存在sql注入问题\",\"2312\":\"v-6cdcc950#_4-开发中访问数据库的方式选择\",\"2313\":\"v-6cdcc950#_5-preparedstatement的优点\",\"2314\":\"v-6cdcc950#_6-java与sql对应数据类型转换表\",\"2315\":\"v-6cdcc950#ii-preparedstatement\",\"2316\":\"v-6cdcc950#_1-简介\",\"2317\":\"v-6cdcc950#_2-preparedstatement-与-statement\",\"2318\":\"v-6cdcc950#_3-preparedstatement的操作步骤\",\"2319\":\"v-6cdcc950#_4-创建preparedstatement对象\",\"2320\":\"v-6cdcc950#_5-预编译sql语句与占位符\",\"2321\":\"v-6cdcc950#_5-1-预编译sql语句\",\"2322\":\"v-6cdcc950#_5-2-填充占位符\",\"2323\":\"v-6cdcc950#_6-execute-执行dml操作\",\"2324\":\"v-6cdcc950#iii-dml\",\"2325\":\"v-6cdcc950#_1-添加-代码示例\",\"2326\":\"v-6cdcc950#_2-封装数据库连接的获取和资源的关闭\",\"2327\":\"v-6cdcc950#_2-1-获取数据库连接\",\"2328\":\"v-6cdcc950#_2-2-关闭连接和statement的操作\",\"2329\":\"v-6cdcc950#_3-使用封装好的工具-更新操作示例\",\"2330\":\"v-6cdcc950#_4-封装通用的增删改操作\",\"2331\":\"v-6cdcc950#_4-1-功能设计\",\"2332\":\"v-6cdcc950#_4-2-参数设计\",\"2333\":\"v-6cdcc950#_4-3-源码\",\"2334\":\"v-6cdcc950#_4-4-使用示例\",\"2335\":\"v-6cdcc950#iv-dql\",\"2336\":\"v-6cdcc950#_1-dql的操作步骤\",\"2337\":\"v-6cdcc950#_2-resultset对象\",\"2338\":\"v-6cdcc950#_2-1-获取\",\"2339\":\"v-6cdcc950#_2-2-resultset介绍\",\"2340\":\"v-6cdcc950#_2-3-指针\",\"2341\":\"v-6cdcc950#_3-resultset接口的方法\",\"2342\":\"v-6cdcc950#_3-1-next-移动指针\",\"2343\":\"v-6cdcc950#_3-2-getxxx-获取指针所在行的数据\",\"2344\":\"v-6cdcc950#_4-resultsetmetadate对象\",\"2345\":\"v-6cdcc950#_5-resultsetmetadate对象的常用方法\",\"2346\":\"v-6cdcc950#_6-orm编程思想-object-relational-mapping\",\"2347\":\"v-6cdcc950#_7-图解查询操作的流程\",\"2348\":\"v-6cdcc950#v-查询示例\",\"2349\":\"v-6cdcc950#_1-基本查询示例-查询custom表中的数据\",\"2350\":\"v-6cdcc950#_1-1-jdbcutils更新\",\"2351\":\"v-6cdcc950#_1-2-custom对象\",\"2352\":\"v-6cdcc950#_2-封装-针对custom表的通用查询操作\",\"2353\":\"v-6cdcc950#_2-1-使用示例\",\"2354\":\"v-6cdcc950#_2-2-列的别名\",\"2355\":\"v-6cdcc950#_3-通用查询操作封装-针对不同表\",\"2356\":\"v-6cdcc950#_3-1-使用示例\",\"2357\":\"v-6cdcc950#_3-2-查询不同的表-class-t-参数与返回值-list-t\",\"2358\":\"v-6cdcc950#_3-3-返回多条数据\",\"2359\":\"v-433f3da8\",\"2360\":\"v-433f3da8#_1-mysql-blob类型\",\"2361\":\"v-433f3da8#_2-应用场景\",\"2362\":\"v-433f3da8#_3-debug-文件大小的限制\",\"2363\":\"v-433f3da8#_4-相关方法\",\"2364\":\"v-433f3da8#_5-示例-向数据表插入blob类型\",\"2365\":\"v-433f3da8#_6-示例-从数据表中读取blob类型字段\",\"2366\":\"v-9f2f38a4\",\"2367\":\"v-9f2f38a4#_1-jdbc的批量处理相关的方法\",\"2368\":\"v-9f2f38a4#_1-1-addbatch-string-积攒sql语句\",\"2369\":\"v-9f2f38a4#_1-2-executebatch-执行batch\",\"2370\":\"v-9f2f38a4#_1-3-clearbatch-清空batch\",\"2371\":\"v-9f2f38a4#_2-测试数据表\",\"2372\":\"v-9f2f38a4#_3-方式1-使用statement\",\"2373\":\"v-9f2f38a4#_4-方式2-使用preparedstatement\",\"2374\":\"v-9f2f38a4#_5-方式3-使用批处理\",\"2375\":\"v-9f2f38a4#_5-1-开启批处理\",\"2376\":\"v-9f2f38a4#_5-2-code\",\"2377\":\"v-9f2f38a4#_6-终极方案-批处理-手动提交\",\"2378\":\"v-da323a7c\",\"2379\":\"v-da323a7c#_1-jdbc事务处理方法\",\"2380\":\"v-da323a7c#_1-1-setautocommit-设置事务的自动提交\",\"2381\":\"v-da323a7c#_1-2-commit-提交事务\",\"2382\":\"v-da323a7c#_1-3-rollback-回滚事务\",\"2383\":\"v-da323a7c#_2-jdbc事务的处理流程\",\"2384\":\"v-da323a7c#连接池\",\"2385\":\"v-da323a7c#_3-jdbc事务示例\",\"2386\":\"v-da323a7c#_3-1-添加事务后-更改数据库通用的增删改方法\",\"2387\":\"v-da323a7c#_3-2-dml操作示例-使用事务\",\"2388\":\"v-da323a7c#_3-jdbc控制隔离级别\",\"2389\":\"v-da323a7c#_3-1-gettransactionisolation-获取当前隔离级别\",\"2390\":\"v-da323a7c#_3-2-settransactionisolation-设置数据库隔离级别\",\"2391\":\"v-da323a7c#_4-jdbc控制隔离级别示例\",\"2392\":\"v-7a69a2a0\",\"2393\":\"v-7a69a2a0#i-dao介绍\",\"2394\":\"v-7a69a2a0#_1-说明\",\"2395\":\"v-7a69a2a0#_2-作用\",\"2396\":\"v-7a69a2a0#_3-dao的使用流程\",\"2397\":\"v-7a69a2a0#ii-dao的实现类\",\"2398\":\"v-7a69a2a0#_1-basedao设计\",\"2399\":\"v-7a69a2a0#_1-1-类\",\"2400\":\"v-7a69a2a0#_1-2-需要实现的基本数据表操作\",\"2401\":\"v-7a69a2a0#_2-需要实现的特殊操作\",\"2402\":\"v-7a69a2a0#_2-1-方案1-定义orm类的属性\",\"2403\":\"v-7a69a2a0#_2-2-方案2-通过泛型传递orm类名\",\"2404\":\"v-7a69a2a0#_3-jdbc工具类-jdbcutils\",\"2405\":\"v-7a69a2a0#_4-basedao-java代码参考\",\"2406\":\"v-7a69a2a0#iii-basedao的使用\",\"2407\":\"v-7a69a2a0#_1-创建数据表实现接口-customerdao\",\"2408\":\"v-7a69a2a0#_2-创建数据表实现类-customerdaoimpl\",\"2409\":\"v-7a69a2a0#_3-使用customerdaoimpl\",\"2410\":\"v-2c4afa32\",\"2411\":\"v-2c4afa32#i-连接池介绍\",\"2412\":\"v-2c4afa32#_1-jdbc数据连接池的必要性\",\"2413\":\"v-2c4afa32#_1-1-在使用开发基于数据库的web程序时-传统的模式基本是按以下步骤\",\"2414\":\"v-2c4afa32#_1-2-这种模式开发-存在的问题\",\"2415\":\"v-2c4afa32#_2-数据库连接池技术介绍\",\"2416\":\"v-2c4afa32#_2-1-数据库连接池的基本思想\",\"2417\":\"v-2c4afa32#_2-2-工作方式\",\"2418\":\"v-2c4afa32#_3-数据库连接池工作原理\",\"2419\":\"v-2c4afa32#_4-数据库连接池的优点\",\"2420\":\"v-2c4afa32#_5-开源的数据库连接池技术\",\"2421\":\"v-2c4afa32#注意事项\",\"2422\":\"v-2c4afa32#ii-druid-德鲁伊\",\"2423\":\"v-2c4afa32#_1-加载驱动-jar包\",\"2424\":\"v-2c4afa32#_2-使用德鲁伊\",\"2425\":\"v-2c4afa32#_3-配置文件\",\"2426\":\"v-2c4afa32#_4-配置项\",\"2427\":\"v-2c4afa32#_5-jdbcutils\",\"2428\":\"v-2c4afa32#_6-使用示例\",\"2429\":\"v-765a569d\",\"2430\":\"v-765a569d#i-apache-dbutils\",\"2431\":\"v-765a569d#_1-dbutils介绍\",\"2432\":\"v-765a569d#_2-驱动\",\"2433\":\"v-765a569d#_3-api介绍\",\"2434\":\"v-765a569d#_4-dbutils类-工具类api-取代自己写的jdbcutils\",\"2435\":\"v-765a569d#_5-queryrunner-curd的api-取代自己写的basedao\",\"2436\":\"v-765a569d#_6-resultsethandler接口及实现类\",\"2437\":\"v-765a569d#ii-使用示例\",\"2438\":\"v-765a569d#_1-添加\",\"2439\":\"v-765a569d#_2-删除\",\"2440\":\"v-765a569d#_3-查询一条记录\",\"2441\":\"v-765a569d#_4-查询多条记录构成的集合\",\"2442\":\"v-765a569d#_5-自定义resultsethandler的实现类\",\"2443\":\"v-765a569d#_6-查询类似于最大的-最小的-平均的-总和-个数相关的数据\",\"2444\":\"v-38eee582\",\"2445\":\"v-38eee582#i-tomcat介绍\",\"2446\":\"v-38eee582#_1-web服务器\",\"2447\":\"v-38eee582#_2-资源分类\",\"2448\":\"v-38eee582#_3-web服务器软件使用步骤\",\"2449\":\"v-38eee582#_4-网络通信三要素\",\"2450\":\"v-38eee582#_5-tomcat\",\"2451\":\"v-38eee582#ii-基本开发使用\",\"2452\":\"v-38eee582#_1-下载\",\"2453\":\"v-38eee582#_2-安装与卸载\",\"2454\":\"v-38eee582#_3-目录结构\",\"2455\":\"v-38eee582#_4-启动\",\"2456\":\"v-38eee582#_5-关闭\",\"2457\":\"v-38eee582#_6-端口配置\",\"2458\":\"v-38eee582#_7-debug\",\"2459\":\"v-38eee582#_7-1-控制台乱码\",\"2460\":\"v-38eee582#_7-2-端口冲突\",\"2461\":\"v-38eee582#_7-3-启动时-窗口一闪而过\",\"2462\":\"v-38eee582#iii-手动部署\",\"2463\":\"v-38eee582#_1-访问tomcat服务器\",\"2464\":\"v-38eee582#_2-在webapps下部署\",\"2465\":\"v-38eee582#_2-1-在webapps下创建项目\",\"2466\":\"v-38eee582#_2-2-在其他目录下创建项目-并通过war包部署\",\"2467\":\"v-38eee582#_2-3-访问项目\",\"2468\":\"v-38eee582#_3-修改配置文件-创建一个路由\",\"2469\":\"v-38eee582#通过子配置文件\",\"2470\":\"v-38eee582#_4-配合nginx代理\",\"2471\":\"v-38eee582#iv-javaweb项目结构\",\"2472\":\"v-38eee582#_1-开发时的项目结构【工作目录】\",\"2473\":\"v-38eee582#_2-部署时的项目目录结构【运行目录】\",\"2474\":\"v-38eee582#_2-1-通用目录\",\"2475\":\"v-38eee582#_2-2-在idea中的输出目录\",\"2476\":\"v-426c1fa0\",\"2477\":\"v-426c1fa0#i-web项目目录\",\"2478\":\"v-426c1fa0#_1-开发中的项目\",\"2479\":\"v-426c1fa0#_2-打包后可以部署的项目\",\"2480\":\"v-426c1fa0#ii-创建web项目\",\"2481\":\"v-426c1fa0#_1-idea-创建web项目\",\"2482\":\"v-426c1fa0#_1-1-新建工程\",\"2483\":\"v-426c1fa0#_1-2-创建module\",\"2484\":\"v-426c1fa0#_2-idea-非web项目-web项目\",\"2485\":\"v-426c1fa0#_2-1-通过project-structure添加web\",\"2486\":\"v-426c1fa0#_2-2-通过在module上右键添加web\",\"2487\":\"v-426c1fa0#_2-3-配置artifacts\",\"2488\":\"v-426c1fa0#_3-maven-使用骨架创建web项目\",\"2489\":\"v-426c1fa0#_3-1-创建module\",\"2490\":\"v-426c1fa0#_3-2-删除pom-xml中多余的内容\",\"2491\":\"v-426c1fa0#_3-3-补齐maven-web项目确实的目录结构\",\"2492\":\"v-426c1fa0#_4-maven-不使用骨架创建web项目【推荐】\",\"2493\":\"v-426c1fa0#_4-1-创建module\",\"2494\":\"v-426c1fa0#_4-2-设置pom-xml的打包方式\",\"2495\":\"v-426c1fa0#_4-3-补齐maven-web缺失的webapp目录结构\",\"2496\":\"v-426c1fa0#iii-配置tomcat\",\"2497\":\"v-426c1fa0#readme\",\"2498\":\"v-426c1fa0#_1-打开tomcat-server模板\",\"2499\":\"v-426c1fa0#_2-deployment-项目部署\",\"2500\":\"v-426c1fa0#_2-1-部署模式介绍\",\"2501\":\"v-426c1fa0#_2-2-application-context-项目路径\",\"2502\":\"v-426c1fa0#_3-server-tomcat服务器配置\",\"2503\":\"v-426c1fa0#_4-添加配置好的tomcat模板\",\"2504\":\"v-426c1fa0#_5-配置多个tomcat\",\"2505\":\"v-426c1fa0#_5-1-添加tomcat模板\",\"2506\":\"v-426c1fa0#_5-2-配置tomcat模板\",\"2507\":\"v-426c1fa0#_5-3-配置文件\",\"2508\":\"v-426c1fa0#iv-使用tomcat\",\"2509\":\"v-426c1fa0#_1-启动tomcat\",\"2510\":\"v-426c1fa0#_2-访问测试\",\"2511\":\"v-426c1fa0#_3-编译后的项目目录\",\"2512\":\"v-426c1fa0#_4-多个tomcat目标的使用\",\"2513\":\"v-426c1fa0#v-注意事项\",\"2514\":\"v-426c1fa0#_1-artifacts配置\",\"2515\":\"v-426c1fa0#_1-1-配置artifacts\",\"2516\":\"v-426c1fa0#_1-2-添加导出方式\",\"2517\":\"v-426c1fa0#_2-tomcat导出方式介绍\",\"2518\":\"v-426c1fa0#_2-1-tomcat添加导出方式\",\"2519\":\"v-426c1fa0#_2-2-注意事项\",\"2520\":\"v-5cf0ae60\",\"2521\":\"v-0fd3271c\",\"2522\":\"v-0fd3271c#_1-概述\",\"2523\":\"v-0fd3271c#_2-解析\",\"2524\":\"v-0fd3271c#_3-servlet的本质\",\"2525\":\"v-0fd3271c#_4-导入servlet包\",\"2526\":\"v-0fd3271c#_5-注意事项\",\"2527\":\"v-fc983098\",\"2528\":\"v-fc983098#i-快速入门\",\"2529\":\"v-fc983098#快速入门步骤\",\"2530\":\"v-fc983098#_1-创建项目\",\"2531\":\"v-fc983098#_2-创建servlet实现类\",\"2532\":\"v-fc983098#_3-配置路由\",\"2533\":\"v-fc983098#_4-访问servlet实现类\",\"2534\":\"v-fc983098#_5-测试\",\"2535\":\"v-fc983098#ii-servlet-执行流程\",\"2536\":\"v-fc983098#_1-servlet执行流程概述\",\"2537\":\"v-fc983098#_2-解析\",\"2538\":\"v-fc983098#_3-总结\",\"2539\":\"v-fc983098#iii-idea中快速使用\",\"2540\":\"v-fc983098#_1-使用方式\",\"2541\":\"v-fc983098#_2-修改模板\",\"2542\":\"v-fc983098#_3-注意事项\",\"2543\":\"v-0337f94d\",\"2544\":\"v-0337f94d#i-servlet-生命周期\",\"2545\":\"v-0337f94d#_1-阶段1-加载和实例化\",\"2546\":\"v-0337f94d#_1-1-修改为启动servlet时创建\",\"2547\":\"v-0337f94d#_1-2-线程安全问题\",\"2548\":\"v-0337f94d#_2-阶段2-初始化\",\"2549\":\"v-0337f94d#_3-阶段3-请求处理\",\"2550\":\"v-0337f94d#_4-阶段4-服务终止\",\"2551\":\"v-0337f94d#ii-servlet-方法\",\"2552\":\"v-0337f94d#_1-init-初始化\",\"2553\":\"v-0337f94d#_2-service-服务代码\",\"2554\":\"v-0337f94d#_3-destroy-销毁方法\",\"2555\":\"v-0337f94d#_4-getservletinfo-获取servlet信息\",\"2556\":\"v-0337f94d#_5-getservletconfig-获取servletconfig对象\",\"2557\":\"v-0337f94d#iii-servlet-体系结构\",\"2558\":\"v-0337f94d#_1-servlet的体系结构-继承结构\",\"2559\":\"v-0337f94d#_2-genericservlet抽象类\",\"2560\":\"v-0337f94d#_3-httpservlet抽象类\",\"2561\":\"v-0337f94d#_4-servlet类的选择\",\"2562\":\"v-0337f94d#_5-httpservlet的使用\",\"2563\":\"v-0337f94d#_5-1-请求方式\",\"2564\":\"v-0337f94d#_5-2-编写格式\",\"2565\":\"v-0337f94d#_6-httpservlet的原理\",\"2566\":\"v-0337f94d#_6-1-手动实现httpservlet的逻辑\",\"2567\":\"v-0337f94d#_6-2-意义\",\"2568\":\"v-1bd4e2cc\",\"2569\":\"v-1bd4e2cc#i-注解配置路由\",\"2570\":\"v-1bd4e2cc#_1-urlpattern\",\"2571\":\"v-1bd4e2cc#_2-语法\",\"2572\":\"v-1bd4e2cc#_3-配置项\",\"2573\":\"v-1bd4e2cc#ii-匹配模式\",\"2574\":\"v-1bd4e2cc#_1-精确匹配\",\"2575\":\"v-1bd4e2cc#_2-目录匹配\",\"2576\":\"v-1bd4e2cc#_3-扩展名匹配\",\"2577\":\"v-1bd4e2cc#_4-任意匹配\",\"2578\":\"v-1bd4e2cc#_5-优先级\",\"2579\":\"v-1bd4e2cc#iii-xml配置路由\",\"2580\":\"v-2c8ec93e\",\"2581\":\"v-2c8ec93e#i-请求与响应概述\",\"2582\":\"v-2c8ec93e#介绍\",\"2583\":\"v-2c8ec93e#_1-完整的请求处理过程\",\"2584\":\"v-2c8ec93e#_2-request的作用-获取请求数据\",\"2585\":\"v-2c8ec93e#_3-response的作用-设置响应数据\",\"2586\":\"v-2c8ec93e#ii-request继承体系\",\"2587\":\"v-2c8ec93e#介绍-1\",\"2588\":\"v-2c8ec93e#_1-request的继承体系\",\"2589\":\"v-2c8ec93e#_2-requestfacade\",\"2590\":\"v-2c8ec93e#_3-总结\",\"2591\":\"v-2c8ec93e#iii-response继承体系\",\"2592\":\"v-2c8ec93e#_1-继承关系\",\"2593\":\"v-2c8ec93e#_2-responsefacade\",\"2594\":\"v-2450d0dc\",\"2595\":\"v-2450d0dc#i-获取请求行\",\"2596\":\"v-2450d0dc#请求行\",\"2597\":\"v-2450d0dc#_1-常用请求方法\",\"2598\":\"v-2450d0dc#_2-使用测试\",\"2599\":\"v-2450d0dc#ii-获取请求头\",\"2600\":\"v-2450d0dc#_1-getheader-获取请求头的值\",\"2601\":\"v-2450d0dc#_2-使用测试-1\",\"2602\":\"v-2450d0dc#_3-获取所有请求头的名称\",\"2603\":\"v-2450d0dc#iii-获取请求体\",\"2604\":\"v-2450d0dc#_1-请求体\",\"2605\":\"v-2450d0dc#_2-获取请求体的方式\",\"2606\":\"v-2450d0dc#_2-1-获取字节输入流\",\"2607\":\"v-2450d0dc#_2-2-获取字符输入流\",\"2608\":\"v-2450d0dc#_3-使用测试\",\"2609\":\"v-2450d0dc#_3-1-前端表单\",\"2610\":\"v-2450d0dc#_3-2-servlet\",\"2611\":\"v-2450d0dc#_4-注意事项\",\"2612\":\"v-2450d0dc#iv-请求参数\",\"2613\":\"v-2450d0dc#_1-需求-问题\",\"2614\":\"v-2450d0dc#_2-解决方案\",\"2615\":\"v-2450d0dc#_3-方案优化\",\"2616\":\"v-2450d0dc#v-request参数处理\",\"2617\":\"v-2450d0dc#_1-底层原理\",\"2618\":\"v-2450d0dc#_1-1-根据不同的请求方式获取请求参数\",\"2619\":\"v-2450d0dc#_1-2-把获取到的内容进行分割\",\"2620\":\"v-2450d0dc#_1-3-把分割后端数据-存入到一个map集合中\",\"2621\":\"v-2450d0dc#_2-相关方法\",\"2622\":\"v-2450d0dc#_3-示例\",\"2623\":\"v-2450d0dc#_3-1-前端代码\",\"2624\":\"v-2450d0dc#_3-2-servlet-1\",\"2625\":\"v-2450d0dc#_4-总结\",\"2626\":\"v-2450d0dc#vi-乱码问题\",\"2627\":\"v-2450d0dc#控制台乱码\",\"2628\":\"v-2450d0dc#_1-乱码原因\",\"2629\":\"v-2450d0dc#_2-解决方案-1\",\"2630\":\"v-2450d0dc#_3-代码\",\"2631\":\"v-2450d0dc#_4-说明\",\"2632\":\"v-2450d0dc#_5-总结\",\"2633\":\"v-74550c91\",\"2634\":\"v-74550c91#i-response\",\"2635\":\"v-74550c91#_1-响应行\",\"2636\":\"v-74550c91#_2-响应头\",\"2637\":\"v-74550c91#_3-对于响应体-是通过字符、字节输出流的方式往浏览器写\",\"2638\":\"v-74550c91#ii-响应字符数据\",\"2639\":\"v-74550c91#_1-步骤\",\"2640\":\"v-74550c91#_2-示例-向浏览器响应字符hello\",\"2641\":\"v-74550c91#_3-设置响应的数据类型\",\"2642\":\"v-74550c91#_4-示例-向浏览器响应html标签\",\"2643\":\"v-74550c91#_5-注意\",\"2644\":\"v-74550c91#iii-响应字节数据\",\"2645\":\"v-74550c91#_1-实现步骤\",\"2646\":\"v-74550c91#_2-示例-向浏览器响应一张图片\",\"2647\":\"v-74550c91#第三方工具对拷\",\"2648\":\"v-74550c91#_3-示例-以字节的形式输出字符\",\"2649\":\"v-6eb8e954\",\"2650\":\"v-6eb8e954#i-request-请求转发\",\"2651\":\"v-6eb8e954#_1-介绍\",\"2652\":\"v-6eb8e954#_2-请求转发的实现方式\",\"2653\":\"v-6eb8e954#_3-转发时共享数据\",\"2654\":\"v-6eb8e954#相关方法\",\"2655\":\"v-6eb8e954#_4-示例-进行请求转发同时共享数据\",\"2656\":\"v-6eb8e954#_5-请求转发的特点\",\"2657\":\"v-6eb8e954#ii-response-重定向\",\"2658\":\"v-6eb8e954#_1-重定向的过程\",\"2659\":\"v-6eb8e954#_2-重定向的实现方式\",\"2660\":\"v-6eb8e954#_3-示例-重定向\",\"2661\":\"v-6eb8e954#_3-1-responsedemo1\",\"2662\":\"v-6eb8e954#_3-2-responsedemo2\",\"2663\":\"v-6eb8e954#_3-3-测试\",\"2664\":\"v-6eb8e954#_4-重定向的特点\",\"2665\":\"v-6eb8e954#_5-redirect与forward的区别\",\"2666\":\"v-6eb8e954#iii-路径问题\",\"2667\":\"v-6eb8e954#_1-是否要加虚拟路径\",\"2668\":\"v-6eb8e954#_2-动态获取虚拟路径\",\"2669\":\"v-3583ecf7\",\"2670\":\"v-3583ecf7#i-域对象\",\"2671\":\"v-3583ecf7#_1-概念\",\"2672\":\"v-3583ecf7#_2-page域对象\",\"2673\":\"v-3583ecf7#_3-request域对象\",\"2674\":\"v-3583ecf7#生命周期\",\"2675\":\"v-3583ecf7#_4-session域对象\",\"2676\":\"v-3583ecf7#生命周期-1\",\"2677\":\"v-3583ecf7#_5-application域对象\",\"2678\":\"v-3583ecf7#_6-域对象共有的方法\",\"2679\":\"v-3583ecf7#ii-servletcontext\",\"2680\":\"v-3583ecf7#_1-概念-1\",\"2681\":\"v-3583ecf7#_2-主要功能\",\"2682\":\"v-3583ecf7#_3-获取servletcontext对象\",\"2683\":\"v-3583ecf7#_4-获取mime类型\",\"2684\":\"v-3583ecf7#_4-1-mime类型\",\"2685\":\"v-3583ecf7#_4-2-底层\",\"2686\":\"v-3583ecf7#_4-3-getmimetype-string-file-获取文件类型\",\"2687\":\"v-3583ecf7#_4-4-局限性\",\"2688\":\"v-3583ecf7#_5-作为域对象\",\"2689\":\"v-3583ecf7#_5-1-域的范围\",\"2690\":\"v-3583ecf7#_5-2-方法\",\"2691\":\"v-3583ecf7#_6-获取文件服务器路径\",\"2692\":\"v-3583ecf7#_6-1-getrealpath\",\"2693\":\"v-3583ecf7#_6-2-文件的工作路径\",\"2694\":\"v-3583ecf7#_6-3-示例\",\"2695\":\"v-0d12a4ac\",\"2696\":\"v-0d12a4ac#_1-filter的位置\",\"2697\":\"v-0d12a4ac#_2-实现filter接口\",\"2698\":\"v-0d12a4ac#dofilter-放行\",\"2699\":\"v-0d12a4ac#放行前的逻辑\",\"2700\":\"v-0d12a4ac#放行后的逻辑\",\"2701\":\"v-0d12a4ac#_2-配置拦截路径\",\"2702\":\"v-0d12a4ac#_3-拦截方式的配置\",\"2703\":\"v-0d12a4ac#配置多个值\",\"2704\":\"v-0d12a4ac#_4-过滤器链-多个过滤器\",\"2705\":\"v-0d12a4ac#多个过滤器的执行顺序\",\"2706\":\"v-0d12a4ac#_5-过滤器的优先级\",\"2707\":\"v-3d5ed71e\",\"2708\":\"v-3d5ed71e#i-监听器介绍\",\"2709\":\"v-3d5ed71e#_1-观察者模式\",\"2710\":\"v-3d5ed71e#_2-监听器概念\",\"2711\":\"v-3d5ed71e#_3-servlet监听器-listener\",\"2712\":\"v-3d5ed71e#_4-监听器分类\",\"2713\":\"v-3d5ed71e#ii-监听器列表\",\"2714\":\"v-3d5ed71e#_1-servletcontextlistener\",\"2715\":\"v-3d5ed71e#_2-httpsessionlistener\",\"2716\":\"v-3d5ed71e#_3-servletrequestlistener\",\"2717\":\"v-3d5ed71e#_4-servletcontextattributelistener\",\"2718\":\"v-3d5ed71e#_5-httpsessionattributelistener\",\"2719\":\"v-3d5ed71e#_6-servletrequestattributelistener\",\"2720\":\"v-3d5ed71e#_7-httpsessionbindinglistener\",\"2721\":\"v-3d5ed71e#_8-httpsessionactivationlistener\",\"2722\":\"v-3d5ed71e#iii-servletcontextlistener\",\"2723\":\"v-3d5ed71e#_1-监听器的使用步骤\",\"2724\":\"v-3d5ed71e#_2-servletcontextlistener接口的方法\",\"2725\":\"v-3d5ed71e#使用示例\",\"2726\":\"v-3d5ed71e#_3-注册监听器\",\"2727\":\"v-3d5ed71e#_4-监听器触发机制\",\"2728\":\"v-30e97f85\",\"2729\":\"v-4a4300dc\",\"2730\":\"v-4a4300dc#i-jar包介绍\",\"2731\":\"v-4a4300dc#_1-概述\",\"2732\":\"v-4a4300dc#_2-java包解析\",\"2733\":\"v-4a4300dc#_3-jar包与zip包\",\"2734\":\"v-4a4300dc#_4-jar包的内容\",\"2735\":\"v-4a4300dc#_5-jar包签名\",\"2736\":\"v-4a4300dc#_6-jar包的作用\",\"2737\":\"v-4a4300dc#_7-为什么要打jar包\",\"2738\":\"v-4a4300dc#_7-1-发布和使用类库\",\"2739\":\"v-4a4300dc#_7-2-util类库\",\"2740\":\"v-4a4300dc#ii-使用jar包\",\"2741\":\"v-4a4300dc#_1-使用java内置的jar包\",\"2742\":\"v-4a4300dc#_2-打jar包\",\"2743\":\"v-4a4300dc#_2-1-手动打\",\"2744\":\"v-4a4300dc#_2-2-使用idea\",\"2745\":\"v-4a4300dc#_3-添加jar包依赖\",\"2746\":\"v-4a4300dc#iii-jar包和war包\",\"2747\":\"v-4a4300dc#_1-war包介绍\",\"2748\":\"v-4a4300dc#_2-jar包与war包的对比\",\"2749\":\"v-4a4300dc#_3-jar包和war包使用\",\"2750\":\"v-4a4300dc#_4-微服务\",\"2751\":\"v-4a4300dc#iv-maven\",\"2752\":\"v-59d1b54d\",\"2753\":\"v-59d1b54d#i-mvc\",\"2754\":\"v-59d1b54d#_1-概述\",\"2755\":\"v-59d1b54d#_2-过程\",\"2756\":\"v-59d1b54d#_3-mvc的优点\",\"2757\":\"v-59d1b54d#ii-三层架构\",\"2758\":\"v-59d1b54d#_1-概述-1\",\"2759\":\"v-59d1b54d#_2-业务流程\",\"2760\":\"v-59d1b54d#_3-命名\",\"2761\":\"v-59d1b54d#_4-框架\",\"2762\":\"v-59d1b54d#iii-mvc与三层架构\",\"2763\":\"v-59d1b54d#_1-关系\",\"2764\":\"v-59d1b54d#_2-总结\",\"2765\":\"v-59d1b54d#_3-应用\",\"2766\":\"v-1d46bbde\",\"2767\":\"v-1d46bbde#i-xml-介绍\",\"2768\":\"v-1d46bbde#_1-xml与html的区别\",\"2769\":\"v-1d46bbde#_2-xml的用途\",\"2770\":\"v-1d46bbde#_3-基本语法\",\"2771\":\"v-1d46bbde#_4-简单示例\",\"2772\":\"v-1d46bbde#_5-xml的组成部分\",\"2773\":\"v-1d46bbde#ii-约束\",\"2774\":\"v-1d46bbde#_1-什么是约束\",\"2775\":\"v-1d46bbde#_2-约束文档的技术实现\",\"2776\":\"v-1d46bbde#_3-dtd\",\"2777\":\"v-1d46bbde#_3-1-dtd文档示例\",\"2778\":\"v-1d46bbde#_3-2-引入dtd文档\",\"2779\":\"v-1d46bbde#_3-3-引入dtd-编写xml\",\"2780\":\"v-1d46bbde#_4-schema\",\"2781\":\"v-1d46bbde#_4-1-schema示例\",\"2782\":\"v-1d46bbde#_4-2-引入约束写xml\",\"2783\":\"v-5a379abc\",\"2784\":\"v-5a379abc#i-会话技术介绍\",\"2785\":\"v-5a379abc#_1-会话\",\"2786\":\"v-5a379abc#_2-不同的会话\",\"2787\":\"v-5a379abc#_3-会话跟踪\",\"2788\":\"v-5a379abc#_4-无状态协议\",\"2789\":\"v-5a379abc#_5-会话追踪技术\",\"2790\":\"v-5a379abc#ii-cookie\",\"2791\":\"v-5a379abc#_1-使用步骤\",\"2792\":\"v-5a379abc#_2-cookie的相关方法\",\"2793\":\"v-5a379abc#_2-1-创建cookie对象\",\"2794\":\"v-5a379abc#_2-2-发送cookie对象\",\"2795\":\"v-5a379abc#_2-3-获取cookie数据\",\"2796\":\"v-5a379abc#_2-4-获取cookie的name和value\",\"2797\":\"v-5a379abc#_3-cookie使用范例\",\"2798\":\"v-5a379abc#_3-1-servlet1-创建cookie\",\"2799\":\"v-5a379abc#_3-2-servlet2-获取cookie\",\"2800\":\"v-5a379abc#_4-cookie的工作原理\",\"2801\":\"v-5a379abc#_4-1-servlet1创建并发送cookie\",\"2802\":\"v-5a379abc#_4-2-浏览器-保存cookie-并在下次请求时携带cookie\",\"2803\":\"v-5a379abc#_4-3-cookie的识别\",\"2804\":\"v-5a379abc#_5-发送多个cookie\",\"2805\":\"v-5a379abc#_6-cookie的保存时间\",\"2806\":\"v-5a379abc#_7-储存中文\",\"2807\":\"v-5a379abc#_8-cookie的共享\",\"2808\":\"v-5a379abc#_8-1-同一tomcat服务器中-多个web项目的cookie的共享\",\"2809\":\"v-5a379abc#_8-2-不同tomcat服务器间cookie的共享\",\"2810\":\"v-5a379abc#_9-总结\",\"2811\":\"v-5a379abc#iii-session\",\"2812\":\"v-5a379abc#_1-概念\",\"2813\":\"v-5a379abc#_2-session的工作流程\",\"2814\":\"v-5a379abc#_3-获取httpsession对象\",\"2815\":\"v-5a379abc#_4-httpsession对象的方法\",\"2816\":\"v-5a379abc#_4-1-设置session的键值\",\"2817\":\"v-5a379abc#_4-2-通过键获取session的值\",\"2818\":\"v-5a379abc#_4-3-通过键删除键值对\",\"2819\":\"v-5a379abc#_4-4-获取sessionid\",\"2820\":\"v-5a379abc#_5-session的原理\",\"2821\":\"v-5a379abc#_6-session的有效期\",\"2822\":\"v-5a379abc#定义session的有效期\",\"2823\":\"v-5a379abc#_7-session的钝化和活化\",\"2824\":\"v-5a379abc#_8-session的销毁\",\"2825\":\"v-5a379abc#_8-1\",\"2826\":\"v-5a379abc#_8-2-手动销毁\",\"2827\":\"v-5a379abc#_9-session的特点\",\"2828\":\"v-5a379abc#iv-总结\",\"2829\":\"v-5a379abc#_1-cookie与session的区别\",\"2830\":\"v-5a379abc#_2-cookie与session的应用场景\",\"2831\":\"v-5a379abc#_3-结论\",\"2832\":\"v-ecbdccf8\",\"2833\":\"v-ecbdccf8#i-json语法\",\"2834\":\"v-ecbdccf8#ii-json转换\",\"2835\":\"v-ecbdccf8#_1-json与java对象\",\"2836\":\"v-ecbdccf8#_2-fastjson-json与java对象的转换\",\"2837\":\"v-ecbdccf8#导入坐标\",\"2838\":\"v-ecbdccf8#_3-java对象转json\",\"2839\":\"v-ecbdccf8#_4-json转java对象\",\"2840\":\"v-48a9a854\",\"2841\":\"v-48a9a854#es-概述\",\"2842\":\"v-48a9a854#_1-elastic-stack\",\"2843\":\"v-48a9a854#_2-elastic-search\",\"2844\":\"v-48a9a854#_3-lucene\",\"2845\":\"v-48a9a854#_4-分布式\",\"2846\":\"v-48a9a854#_5-大企业的选择\",\"2847\":\"v-48a9a854#全文搜索引擎\",\"2848\":\"v-48a9a854#_1-背景\",\"2849\":\"v-48a9a854#_2-传统数据库的缺点\",\"2850\":\"v-48a9a854#_3-不适用常规搜索的场景\",\"2851\":\"v-48a9a854#_4-全文搜索\",\"2852\":\"v-48a9a854#工作原理\",\"2853\":\"v-9de9ea26\",\"2854\":\"v-9de9ea26#es安装\",\"2855\":\"v-9de9ea26#_1-系统\",\"2856\":\"v-9de9ea26#_2-安装软件\",\"2857\":\"v-9de9ea26#_3-启动服务\",\"2858\":\"v-9de9ea26#_4-访问测试\",\"2859\":\"v-9de9ea26#_5-debug\",\"2860\":\"v-9de9ea26#取消安全验证\",\"2861\":\"v-9de9ea26#http\",\"2862\":\"v-0480a4ea\",\"2863\":\"v-0480a4ea#数据格式\",\"2864\":\"v-0480a4ea#_1-elasticsearch-与-mysql对比\",\"2865\":\"v-0480a4ea#_3-数据类型简介\",\"2866\":\"v-0480a4ea#正排索引\",\"2867\":\"v-0480a4ea#_1-概述\",\"2868\":\"v-0480a4ea#_2-正向索引的结构\",\"2869\":\"v-0480a4ea#_3-正向索引解析\",\"2870\":\"v-0480a4ea#_4-正向索引的缺点\",\"2871\":\"v-0480a4ea#关键字-文档矩阵\",\"2872\":\"v-0480a4ea#示例\",\"2873\":\"v-0480a4ea#矩阵解读\",\"2874\":\"v-0480a4ea#搜索引擎的索引\",\"2875\":\"v-0480a4ea#倒排索引\",\"2876\":\"v-0480a4ea#_1-概述-1\",\"2877\":\"v-0480a4ea#_2-倒排索引的结构\",\"2878\":\"v-0480a4ea#_3-组成\",\"2879\":\"v-0480a4ea#_4-倒排索引的简单实现示例\",\"2880\":\"v-0480a4ea#略微复杂的倒排列表\",\"2881\":\"v-01bd6192\",\"2882\":\"v-01bd6192#创建索引\",\"2883\":\"v-01bd6192#_1-语法\",\"2884\":\"v-01bd6192#_2-示例\",\"2885\":\"v-01bd6192#_3-响应结果分析\",\"2886\":\"v-01bd6192#_4-put与post\",\"2887\":\"v-01bd6192#查看某个索引\",\"2888\":\"v-01bd6192#_1-语法-1\",\"2889\":\"v-01bd6192#_2-示例-1\",\"2890\":\"v-01bd6192#_3-响应信息解析\",\"2891\":\"v-01bd6192#查看所有索引\",\"2892\":\"v-01bd6192#_1-语法-2\",\"2893\":\"v-01bd6192#_2-返回数据解析\",\"2894\":\"v-01bd6192#删除索引\",\"2895\":\"v-01bd6192#_1-语法-3\",\"2896\":\"v-01bd6192#_2-示例-2\",\"2897\":\"v-3b305edc\",\"2898\":\"v-3b305edc#创建文档\",\"2899\":\"v-3b305edc#_1-语法\",\"2900\":\"v-3b305edc#_2-示例\",\"2901\":\"v-3b305edc#_3-响应结果分析\",\"2902\":\"v-3b305edc#_4-自定义-id\",\"2903\":\"v-3b305edc#_5-post与put\",\"2904\":\"v-3b305edc#查看文档\",\"2905\":\"v-3b305edc#_1-语法-1\",\"2906\":\"v-3b305edc#_2-示例-1\",\"2907\":\"v-3b305edc#_3-响应结果分析-1\",\"2908\":\"v-3b305edc#_4-查看索引下的全部文档\",\"2909\":\"v-3b305edc#修改文档\",\"2910\":\"v-3b305edc#_1-完全覆盖\",\"2911\":\"v-3b305edc#_2-局部数据修改\",\"2912\":\"v-3b305edc#_2-1-示例\",\"2913\":\"v-3b305edc#删除文档\",\"2914\":\"v-3b305edc#_1-删除示例\",\"2915\":\"v-3b305edc#_1-1-响应结果分析\",\"2916\":\"v-3b305edc#_1-2-查询已删除的文档\",\"2917\":\"v-3b305edc#_1-3-删除不存在的文档\",\"2918\":\"v-3b305edc#_2-条件删除\",\"2919\":\"v-3b305edc#_2-1-示例-1\",\"2920\":\"v-3b305edc#_2-2-响应结果分析\",\"2921\":\"v-216bc50c\",\"2922\":\"v-216bc50c#基本查询\",\"2923\":\"v-216bc50c#_1-通过主键-id-查看\",\"2924\":\"v-216bc50c#_1-2-示例\",\"2925\":\"v-216bc50c#_1-3-响应结果分析\",\"2926\":\"v-216bc50c#_2-查看索引下的全部文档\",\"2927\":\"v-216bc50c#条件查询\",\"2928\":\"v-216bc50c#_1-语法\",\"2929\":\"v-216bc50c#_2-查询示例\",\"2930\":\"v-216bc50c#_2-1-服务器响应结果解析\",\"2931\":\"v-216bc50c#_3-查询所有数据-全查询\",\"2932\":\"v-216bc50c#_3-1-示例\",\"2933\":\"v-216bc50c#_4-语法总结\",\"2934\":\"v-216bc50c#多条件查询\",\"2935\":\"v-216bc50c#_1-语法-1\",\"2936\":\"v-216bc50c#_2-示例\",\"2937\":\"v-216bc50c#范围查询\",\"2938\":\"v-216bc50c#_1-语法-2\",\"2939\":\"v-216bc50c#_2-示例-1\",\"2940\":\"v-216bc50c#完全匹配\",\"2941\":\"v-216bc50c#_1-全文检索\",\"2942\":\"v-216bc50c#_1-1-效果\",\"2943\":\"v-216bc50c#_1-2-示例-1\",\"2944\":\"v-216bc50c#_2-完全匹配查询\",\"2945\":\"v-216bc50c#_2-1-示例\",\"2946\":\"v-216bc50c#_2-2-值的一部分\",\"2947\":\"v-216bc50c#分页\",\"2948\":\"v-216bc50c#_1-语法-3\",\"2949\":\"v-216bc50c#_2-示例-2\",\"2950\":\"v-216bc50c#排序\",\"2951\":\"v-216bc50c#_1-语法-4\",\"2952\":\"v-216bc50c#_2-示例-3\",\"2953\":\"v-216bc50c#聚合操作\",\"2954\":\"v-216bc50c#_1-语法-5\",\"2955\":\"v-216bc50c#_2-示例-4\",\"2956\":\"v-216bc50c#_2-1-请求体\",\"2957\":\"v-216bc50c#_2-2-响应体\",\"2958\":\"v-216bc50c#高亮显示\",\"2959\":\"v-216bc50c#_1-语法-6\",\"2960\":\"v-216bc50c#_2-示例-5\",\"2961\":\"v-6afd33f7\",\"2962\":\"v-6afd33f7#创建映射\",\"2963\":\"v-6afd33f7#_1-语法\",\"2964\":\"v-6afd33f7#_2-示例\",\"2965\":\"v-6afd33f7#查看映射\",\"2966\":\"v-6afd33f7#映射的效果\",\"2967\":\"v-068ab148\",\"2968\":\"v-068ab148#java-api\",\"2969\":\"v-068ab148#搭建项目\",\"2970\":\"v-068ab148#es-7-x\",\"2971\":\"v-068ab148#_1-依赖\",\"2972\":\"v-068ab148#_2-客户端对象\",\"2973\":\"v-068ab148#es-8-x\",\"2974\":\"v-27a98d80\",\"2975\":\"v-27a98d80#_1-创建索引\",\"2976\":\"v-27a98d80#_1-1-debug\",\"2977\":\"v-27a98d80#_2-查看索引\",\"2978\":\"v-27a98d80#_3-删除索引\",\"2979\":\"v-0321c627\",\"2980\":\"v-0321c627#新增文档\",\"2981\":\"v-0321c627#_1-数据对象\",\"2982\":\"v-0321c627#_2-objectmapper\",\"2983\":\"v-0321c627#修改文档\",\"2984\":\"v-0321c627#删除文档\",\"2985\":\"v-0321c627#批量操作\",\"2986\":\"v-0321c627#_1-批量新增文档\",\"2987\":\"v-0321c627#_2-批量删除文档\",\"2988\":\"v-0321c627#debug\",\"2989\":\"v-0e75af15\",\"2990\":\"v-0e75af15#基本查询\",\"2991\":\"v-0e75af15#_1-根据-id-查询文档\",\"2992\":\"v-0e75af15#_2-查询所有文档\",\"2993\":\"v-0e75af15#条件查询\",\"2994\":\"v-0e75af15#全量查询\",\"2995\":\"v-0e75af15#组合查询\",\"2996\":\"v-0e75af15#_1-boolquerybuilder\",\"2997\":\"v-0e75af15#_2-示例代码\",\"2998\":\"v-0e75af15#过滤查询\",\"2999\":\"v-0e75af15#fetchsource\",\"3000\":\"v-0e75af15#示例代码\",\"3001\":\"v-0e75af15#范围查询\",\"3002\":\"v-0e75af15#_1-rangequerybuilder\",\"3003\":\"v-0e75af15#_2-示例代码-1\",\"3004\":\"v-0e75af15#模糊查询\",\"3005\":\"v-0e75af15#_1-fuzzyquerybuilder\",\"3006\":\"v-0e75af15#_2-示例代码-2\",\"3007\":\"v-0e75af15#分页\",\"3008\":\"v-0e75af15#示例代码-1\",\"3009\":\"v-0e75af15#排序\",\"3010\":\"v-0e75af15#测试代码\",\"3011\":\"v-0e75af15#打印结果\",\"3012\":\"v-0e75af15#多个字段排序\",\"3013\":\"v-0e75af15#聚合操作\",\"3014\":\"v-0e75af15#_1-aggregation\",\"3015\":\"v-0e75af15#_2-代码示例\",\"3016\":\"v-0e75af15#_3-size-0\",\"3017\":\"v-0e75af15#高亮显示\",\"3018\":\"v-0e75af15#_1-matchphrasequery-与-hightlightbuilder\",\"3019\":\"v-0e75af15#_2-代码示例-1\",\"3020\":\"v-cb6166ca\",\"3021\":\"v-cb6166ca#i-mongodb-简介\",\"3022\":\"v-cb6166ca#_1-line\",\"3023\":\"v-cb6166ca#_2-语法风格\",\"3024\":\"v-cb6166ca#_3-优点\",\"3025\":\"v-cb6166ca#_4-应用场景\",\"3026\":\"v-cb6166ca#_3-1-解决的问题\",\"3027\":\"v-cb6166ca#_3-2-具体应用场景\",\"3028\":\"v-cb6166ca#_3-3-选择的依据\",\"3029\":\"v-cb6166ca#_4-serverless\",\"3030\":\"v-cb6166ca#ii-存储结构\",\"3031\":\"v-cb6166ca#_1-和mysql对比\",\"3032\":\"v-cb6166ca#_2-数据结构\",\"3033\":\"v-cb6166ca#_3-bson\",\"3034\":\"v-cb6166ca#_4-bson数据类型参考\",\"3035\":\"v-cb6166ca#iii-mongodb-与-redis\",\"3036\":\"v-cb6166ca#_1-定位\",\"3037\":\"v-cb6166ca#_2-应用场景对比\",\"3038\":\"v-678bcd60\",\"3039\":\"v-678bcd60#i-windows\",\"3040\":\"v-678bcd60#_1-下载安装包\",\"3041\":\"v-678bcd60#_2-安装\",\"3042\":\"v-678bcd60#_3-启动\",\"3043\":\"v-678bcd60#_3-1-通过参数启动服务\",\"3044\":\"v-678bcd60#_3-2-通过配置文件启动服务\",\"3045\":\"v-678bcd60#ii-linux\",\"3046\":\"v-678bcd60#_1-下载压缩包\",\"3047\":\"v-678bcd60#_2-安装-1\",\"3048\":\"v-678bcd60#_3-配置\",\"3049\":\"v-678bcd60#_4-启动服务\",\"3050\":\"v-678bcd60#_5-关闭服务\",\"3051\":\"v-678bcd60#iii-macos\",\"3052\":\"v-a6837e0a\",\"3053\":\"v-a6837e0a#i-mongodb-shell\",\"3054\":\"v-a6837e0a#ii-compass\",\"3055\":\"v-a6837e0a#_1-介绍\",\"3056\":\"v-a6837e0a#_2-compass-连接-mongodb\",\"3057\":\"v-a6837e0a#_3-页面介绍\",\"3058\":\"v-607d6490\",\"3059\":\"v-607d6490#i-数据库操作\",\"3060\":\"v-607d6490#_1-查看所有数据库\",\"3061\":\"v-607d6490#_2-选择或创建数据库\",\"3062\":\"v-607d6490#_3-查看正在使用的数据库\",\"3063\":\"v-607d6490#_4-数据库删除\",\"3064\":\"v-607d6490#_5-数据库的状态\",\"3065\":\"v-607d6490#ii-集合操作\",\"3066\":\"v-607d6490#_1-查看当前库中的集合\",\"3067\":\"v-607d6490#_2-创建集合\",\"3068\":\"v-607d6490#_3-删除集合\",\"3069\":\"v-0c271460\",\"3070\":\"v-0c271460#i-文档的插入\",\"3071\":\"v-0c271460#_1-单个文档插入\",\"3072\":\"v-0c271460#_1-1-参数\",\"3073\":\"v-0c271460#_1-2-示例\",\"3074\":\"v-0c271460#_1-3-注意\",\"3075\":\"v-0c271460#_2-批量插入\",\"3076\":\"v-0c271460#_2-1-示例\",\"3077\":\"v-0c271460#_2-2-注意\",\"3078\":\"v-0c271460#_3-try-catch插入\",\"3079\":\"v-0c271460#_4-文档键命名规范\",\"3080\":\"v-0c271460#ii-更新文档\",\"3081\":\"v-0c271460#_1-options选项\",\"3082\":\"v-0c271460#_2-更新指定字段\",\"3083\":\"v-0c271460#_3-批量更新\",\"3084\":\"v-0c271460#_4-列值增长的修改\",\"3085\":\"v-0c271460#iii-删除文档\",\"3086\":\"v-0c271460#_1-移除全部数据\",\"3087\":\"v-0c271460#_2-删除指定数据\",\"3088\":\"v-b6a5f404\",\"3089\":\"v-b6a5f404#i-基本查询\",\"3090\":\"v-b6a5f404#_1-语法\",\"3091\":\"v-b6a5f404#_2-查询所有数据\",\"3092\":\"v-b6a5f404#_3-根据条件查询数据\",\"3093\":\"v-b6a5f404#_4-投影查询\",\"3094\":\"v-b6a5f404#ii-文档的分页查询\",\"3095\":\"v-b6a5f404#_1-统计查询\",\"3096\":\"v-b6a5f404#_2-分页列表查询\",\"3097\":\"v-b6a5f404#_3-排序查询\",\"3098\":\"v-b6a5f404#iii-更多复杂查询\",\"3099\":\"v-b6a5f404#_1-正则条件查询\",\"3100\":\"v-b6a5f404#_2-比较查询\",\"3101\":\"v-b6a5f404#_3-包含查询\",\"3102\":\"v-b6a5f404#_4-条件连接查询\",\"3103\":\"v-09da746c\",\"3104\":\"v-09da746c#i-索引的类型\",\"3105\":\"v-09da746c#_1-单字段索引\",\"3106\":\"v-09da746c#_2-复合索引\",\"3107\":\"v-09da746c#_3-其他索引\",\"3108\":\"v-09da746c#ii-管理索引\",\"3109\":\"v-09da746c#_1-查看索引\",\"3110\":\"v-09da746c#_2-创建索引\",\"3111\":\"v-09da746c#_2-1-参数\",\"3112\":\"v-09da746c#_2-2-创建单字段索引\",\"3113\":\"v-09da746c#_2-3-创建复合索引\",\"3114\":\"v-09da746c#_2-4-索引默认命名规范\",\"3115\":\"v-09da746c#_3-移除索引\",\"3116\":\"v-09da746c#_3-1-移除指定索引\",\"3117\":\"v-09da746c#_3-2-移除所有索引\",\"3118\":\"v-09da746c#_4-执行计划\",\"3119\":\"v-09da746c#_4-1-compass可视化查看\",\"3120\":\"v-09da746c#_4-2-示例\",\"3121\":\"v-09da746c#_4-3-查询结果解析\",\"3122\":\"v-09da746c#_5-涵盖查询\",\"3123\":\"v-f841d8ce\",\"3124\":\"v-f841d8ce#i-副本集\",\"3125\":\"v-f841d8ce#_1-概述\",\"3126\":\"v-f841d8ce#_2-冗余和数据可用性\",\"3127\":\"v-f841d8ce#_3-mongodb中的复制\",\"3128\":\"v-f841d8ce#_4-主从复制和副本集区别\",\"3129\":\"v-f841d8ce#_5-副本集的类型和角色\",\"3130\":\"v-f841d8ce#_5-1-两种类型\",\"3131\":\"v-f841d8ce#_5-2-三种角色\",\"3132\":\"v-f841d8ce#_5-3-仲裁者额外说明\",\"3133\":\"v-f841d8ce#_6-副本集架构示例\",\"3134\":\"v-f841d8ce#ii-分片集群\",\"3135\":\"v-f2553160\",\"3136\":\"v-f2553160#i-副本集设计\",\"3137\":\"v-f2553160#_1-架构\",\"3138\":\"v-f2553160#_2-端口设计\",\"3139\":\"v-f2553160#_3-目录设计\",\"3140\":\"v-f2553160#_4-文件设计\",\"3141\":\"v-f2553160#ii-创建节点\",\"3142\":\"v-f2553160#_1-创建主节点\",\"3143\":\"v-f2553160#_2-创建副本节点\",\"3144\":\"v-f2553160#_3-创建仲裁节点\",\"3145\":\"v-f2553160#_4-查看启动结果\",\"3146\":\"v-f2553160#iii-初始化副本集\",\"3147\":\"v-f2553160#_1-连接节点\",\"3148\":\"v-f2553160#_2-连接后查看\",\"3149\":\"v-f2553160#_3-初始化副本集\",\"3150\":\"v-f2553160#_4-副本集初始化结果\",\"3151\":\"v-f2553160#iv-查看副本集\",\"3152\":\"v-f2553160#_1-查看副本集的配置内容\",\"3153\":\"v-f2553160#_1-1-执行结果\",\"3154\":\"v-f2553160#_1-2-结果解析\",\"3155\":\"v-f2553160#_2-查看副本集状态\",\"3156\":\"v-f2553160#_2-1-执行结果\",\"3157\":\"v-f2553160#_2-2-结果解析\",\"3158\":\"v-f2553160#v-添加节点\",\"3159\":\"v-f2553160#_1-添加副本从节点\",\"3160\":\"v-f2553160#_2-添加仲裁从节点\",\"3161\":\"v-f2553160#_3-debug\",\"3162\":\"v-7d3726e6\",\"3163\":\"v-7d3726e6#i-连接副本集\",\"3164\":\"v-7d3726e6#_1-修复host\",\"3165\":\"v-7d3726e6#_1-1-修改副本集节点的host\",\"3166\":\"v-7d3726e6#_2-连接副本集\",\"3167\":\"v-7d3726e6#ii-数据读写\",\"3168\":\"v-7d3726e6#_1-主节点读写\",\"3169\":\"v-7d3726e6#_2-从节点读写\",\"3170\":\"v-7d3726e6#iii-主节点的选举\",\"3171\":\"v-7d3726e6#_1-选举触发条件\",\"3172\":\"v-7d3726e6#_2-投票\",\"3173\":\"v-7d3726e6#_3-优先级\",\"3174\":\"v-7d3726e6#_3-1-查看优先级\",\"3175\":\"v-7d3726e6#_3-2-修改优先级\",\"3176\":\"v-7d3726e6#iv-故障测试\",\"3177\":\"v-086c61b4\",\"3178\":\"v-f9ff9fbc\",\"3179\":\"v-f9ff9fbc#_1-安全保障手段\",\"3180\":\"v-f9ff9fbc#_2-启动访问控制\",\"3181\":\"v-f9ff9fbc#_3-概念\",\"3182\":\"v-f9ff9fbc#_3-1-启动访问控制\",\"3183\":\"v-f9ff9fbc#_3-2-角色\",\"3184\":\"v-f9ff9fbc#_3-3-权限\",\"3185\":\"v-f9ff9fbc#_4-查看角色权限\",\"3186\":\"v-f9ff9fbc#_4-1-查询所有角色权限-仅用户自定义角色\",\"3187\":\"v-f9ff9fbc#_4-2-查询所有角色权限-包含内置角色\",\"3188\":\"v-f9ff9fbc#_4-3-查询指定权限\",\"3189\":\"v-f9ff9fbc#_5-常用的内置角色\",\"3190\":\"v-f9ff9fbc#_6-角色说明\",\"3191\":\"v-403f3337\",\"3192\":\"v-403f3337#i-管理用户\",\"3193\":\"v-403f3337#_1-createuser\",\"3194\":\"v-403f3337#_2-创建用户示例\",\"3195\":\"v-403f3337#_2-1-创建myroot\",\"3196\":\"v-403f3337#_2-2-创建admin\",\"3197\":\"v-403f3337#_2-3-创建普通用户\",\"3198\":\"v-403f3337#_3-查看用户\",\"3199\":\"v-403f3337#_4-删除用户\",\"3200\":\"v-403f3337#_5-修改密码\",\"3201\":\"v-403f3337#_6-认证测试\",\"3202\":\"v-403f3337#ii-开启认证\",\"3203\":\"v-403f3337#_1-修改配置文件\",\"3204\":\"v-403f3337#_2-通过认证登录\",\"3205\":\"v-403f3337#_2-1-登录时进行验证\",\"3206\":\"v-403f3337#_2-2-登录后的权限\",\"3207\":\"v-403f3337#iii-关闭mongodb\",\"3208\":\"v-9cf394c0\",\"3209\":\"v-9cf394c0#_1-认证的内容\",\"3210\":\"v-9cf394c0#_2-添加账号\",\"3211\":\"v-9cf394c0#_3-创建x-509证书\",\"3212\":\"v-9cf394c0#_3-1-通过openssl生成证书\",\"3213\":\"v-9cf394c0#_3-2-复制证书\",\"3214\":\"v-9cf394c0#_4-修改配置文件\",\"3215\":\"v-9cf394c0#_5-连接副本集\",\"3216\":\"v-abf051c2\",\"3217\":\"v-1d054808\",\"3218\":\"v-1d054808#i-连接方式\",\"3219\":\"v-1d054808#_1-direct\",\"3220\":\"v-1d054808#_2-replicaset\",\"3221\":\"v-1d054808#_3-权限认证\",\"3222\":\"v-1d054808#ii-连接单实例\",\"3223\":\"v-1d054808#iii-连接副本集\",\"3224\":\"v-1d054808#_1-初始化前的连接\",\"3225\":\"v-1d054808#_2-直连副本集\",\"3226\":\"v-1d054808#_3-只连接一个节点\",\"3227\":\"v-1d054808#iv-连接分片集群\",\"3228\":\"v-39d46f7d\",\"3229\":\"v-39d46f7d#_1-maven\",\"3230\":\"v-66fdecfc\",\"3231\":\"v-66fdecfc#引入\",\"3232\":\"v-66fdecfc#_1-spring-data\",\"3233\":\"v-66fdecfc#_2-spring-data-mongodb\",\"3234\":\"v-66fdecfc#_3-maven\",\"3235\":\"v-66fdecfc#yml配置\",\"3236\":\"v-66fdecfc#_1-通过host和port连接\",\"3237\":\"v-66fdecfc#_2-通过uri连接\",\"3238\":\"v-66fdecfc#操作方式\",\"3239\":\"v-66fdecfc#curd\",\"3240\":\"v-4a3a5b26\",\"3241\":\"v-68839503\",\"3242\":\"v-68839503#_1-数据损坏的修复\",\"3243\":\"v-68839503#_2-服务启动失败\",\"3244\":\"v-68be5650\",\"3245\":\"v-78b2fcd3\",\"3246\":\"v-7445cd33\",\"3247\":\"v-7e1f989b\",\"3248\":\"v-14c69af4\",\"3249\":\"v-e4cb1150\",\"3250\":\"v-4dabea43\",\"3251\":\"v-28ddfa13\",\"3252\":\"v-744cca9a\",\"3253\":\"v-688315f7\",\"3254\":\"v-6a5ff542\",\"3255\":\"v-34e89cba\",\"3256\":\"v-20b96d23\",\"3257\":\"v-3bc508c5\",\"3258\":\"v-281bd1e9\",\"3259\":\"v-eb9b9c9a\",\"3260\":\"v-3274ac86\",\"3261\":\"v-3670953c\",\"3262\":\"v-4a8d2097\",\"3263\":\"v-17b81500\",\"3264\":\"v-01ed9ba8\",\"3265\":\"v-0ea08c70\",\"3266\":\"v-33644c36\",\"3267\":\"v-07c1e4c2\",\"3268\":\"v-e2a81af0\",\"3269\":\"v-113e9cfd\",\"3270\":\"v-6ebbf680\",\"3271\":\"v-8cd22b3a\",\"3272\":\"v-07a1d28a\",\"3273\":\"v-af90ecea\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,2],\"1\":[2,8],\"2\":[1],\"3\":[1],\"4\":[1],\"5\":[1],\"6\":[1],\"7\":[1],\"8\":[1],\"9\":[1],\"10\":[1,61],\"11\":[1,65],\"12\":[1,2],\"13\":[2,3],\"14\":[2,3],\"15\":[2,3],\"16\":[2,3],\"17\":[2,3],\"18\":[2,3],\"19\":[2,3],\"20\":[2],\"21\":[2,1],\"22\":[2,21],\"23\":[2,12],\"24\":[2,2],\"25\":[2,2],\"26\":[2,3],\"27\":[2,2],\"28\":[2,3],\"29\":[2,38],\"30\":[2,2],\"31\":[1,2],\"32\":[2],\"33\":[2,8],\"34\":[2,7],\"35\":[1,1],\"36\":[2,2],\"37\":[2,2],\"38\":[2,2],\"39\":[2,2],\"40\":[1,2],\"41\":[2,3],\"42\":[1,2],\"43\":[2,3],\"44\":[1,2],\"45\":[2,3],\"46\":[1,2],\"47\":[2,3],\"48\":[2,2],\"49\":[2,3],\"50\":[2,2],\"51\":[2,3],\"52\":[2,2],\"53\":[2,3],\"54\":[2,2],\"55\":[2,3],\"56\":[1,3],\"57\":[2,43],\"58\":[2,5],\"59\":[2,5],\"60\":[2,24],\"61\":[2,24],\"62\":[2,3],\"63\":[2,3],\"64\":[2,3],\"65\":[2,3],\"66\":[2,5],\"67\":[2,6],\"68\":[2,4],\"69\":[2,6],\"70\":[3,7],\"71\":[3,39],\"72\":[2,34],\"73\":[2,15],\"74\":[2,25],\"75\":[2],\"76\":[4,30],\"77\":[3,9],\"78\":[3,6],\"79\":[2,18],\"80\":[2],\"81\":[3,19],\"82\":[3,10],\"83\":[3],\"84\":[2,4],\"85\":[2,21],\"86\":[2,6],\"87\":[2,8],\"88\":[2],\"89\":[2,7],\"90\":[2,4],\"91\":[3,9],\"92\":[4,5],\"93\":[4,26],\"94\":[5,29],\"95\":[5,68],\"96\":[2,26],\"97\":[2,6],\"98\":[2],\"99\":[2,40],\"100\":[2,8],\"101\":[2,10],\"102\":[2],\"103\":[2,16],\"104\":[2,27],\"105\":[2,16],\"106\":[2,4],\"107\":[2,4],\"108\":[2,6],\"109\":[2,11],\"110\":[3,26],\"111\":[3,23],\"112\":[3,4],\"113\":[2,7],\"114\":[2,7],\"115\":[2,18],\"116\":[2],\"117\":[3,9],\"118\":[3,9],\"119\":[2,7],\"120\":[3,3],\"121\":[2],\"122\":[2,10],\"123\":[2,57],\"124\":[2,20],\"125\":[2,11],\"126\":[2,6],\"127\":[2,32],\"128\":[2,22],\"129\":[2,14],\"130\":[3,16],\"131\":[3,25],\"132\":[2,13],\"133\":[3,13],\"134\":[2],\"135\":[2,10],\"136\":[3,12],\"137\":[2,13],\"138\":[4,12],\"139\":[2,11],\"140\":[2,3],\"141\":[3,14],\"142\":[3,13],\"143\":[2,3],\"144\":[2,3],\"145\":[5,4],\"146\":[4,3],\"147\":[3,5],\"148\":[2,4],\"149\":[3,8],\"150\":[3,13],\"151\":[2,3],\"152\":[3,6],\"153\":[3,24],\"154\":[2],\"155\":[2],\"156\":[2,32],\"157\":[2,8],\"158\":[3,17],\"159\":[2,7],\"160\":[4,11],\"161\":[3,4],\"162\":[2,6],\"163\":[3,11],\"164\":[4,19],\"165\":[2,17],\"166\":[2,9],\"167\":[4,29],\"168\":[4,22],\"169\":[2],\"170\":[2,19],\"171\":[3,19],\"172\":[3,21],\"173\":[2,11],\"174\":[2,20],\"175\":[2,14],\"176\":[2,24],\"177\":[3],\"178\":[3,2],\"179\":[3,21],\"180\":[2,17],\"181\":[2,22],\"182\":[2,6],\"183\":[2,22],\"184\":[2,13],\"185\":[2,6],\"186\":[2,4],\"187\":[3],\"188\":[2,4],\"189\":[2,6],\"190\":[2,10],\"191\":[4,11],\"192\":[3,3],\"193\":[3,22],\"194\":[2,5],\"195\":[3,9],\"196\":[3,6],\"197\":[2],\"198\":[6,28],\"199\":[6,11],\"200\":[4,60],\"201\":[3,22],\"202\":[2,21],\"203\":[2],\"204\":[2,6],\"205\":[2,3],\"206\":[2,5],\"207\":[2,5],\"208\":[3,6],\"209\":[2,9],\"210\":[2,21],\"211\":[2,2],\"212\":[2,14],\"213\":[2,30],\"214\":[2,4],\"215\":[2,4],\"216\":[2,22],\"217\":[2,16],\"218\":[2,4],\"219\":[2,5],\"220\":[2,8],\"221\":[2,12],\"222\":[2,9],\"223\":[2,13],\"224\":[3,3],\"225\":[2,2],\"226\":[2,26],\"227\":[3,6],\"228\":[2,15],\"229\":[2,12],\"230\":[2],\"231\":[2,8],\"232\":[2,14],\"233\":[3,5],\"234\":[2,31],\"235\":[2,26],\"236\":[3,8],\"237\":[3,8],\"238\":[2,4],\"239\":[3,4],\"240\":[2],\"241\":[2,12],\"242\":[2,37],\"243\":[2,11],\"244\":[2,29],\"245\":[2],\"246\":[2,18],\"247\":[2,6],\"248\":[2,7],\"249\":[2,23],\"250\":[2],\"251\":[2,5],\"252\":[2,7],\"253\":[2,26],\"254\":[2,12],\"255\":[2,4],\"256\":[2,8],\"257\":[2,12],\"258\":[2,27],\"259\":[3],\"260\":[2,6],\"261\":[2,15],\"262\":[2,222],\"263\":[2,30],\"264\":[3,2],\"265\":[3,18],\"266\":[2,18],\"267\":[2,21],\"268\":[3,6],\"269\":[2,2],\"270\":[2,39],\"271\":[2,28],\"272\":[2,6],\"273\":[3,13],\"274\":[4,21],\"275\":[2,26],\"276\":[2],\"277\":[3,22],\"278\":[3,10],\"279\":[3],\"280\":[3,38],\"281\":[2,27],\"282\":[2,5],\"283\":[4,10],\"284\":[3,20],\"285\":[3],\"286\":[2,12],\"287\":[2,12],\"288\":[3,62],\"289\":[5,27],\"290\":[2,5],\"291\":[3,10],\"292\":[3,23],\"293\":[2,18],\"294\":[2,2],\"295\":[2,2],\"296\":[3,3],\"297\":[2,5],\"298\":[2,21],\"299\":[2,6],\"300\":[2,6],\"301\":[2,9],\"302\":[3,36],\"303\":[2],\"304\":[3,4],\"305\":[2,6],\"306\":[2,2],\"307\":[2,9],\"308\":[2],\"309\":[2],\"310\":[2,18],\"311\":[2,2],\"312\":[2,18],\"313\":[2,39],\"314\":[3,17],\"315\":[3,2],\"316\":[2,17],\"317\":[2,15],\"318\":[3,17],\"319\":[2,15],\"320\":[2],\"321\":[2,18],\"322\":[2,18],\"323\":[2,18],\"324\":[3,22],\"325\":[2],\"326\":[2,12],\"327\":[2],\"328\":[2,14],\"329\":[2],\"330\":[2,11],\"331\":[2,16],\"332\":[4,18],\"333\":[2,13],\"334\":[2],\"335\":[2,20],\"336\":[3,110],\"337\":[3,2],\"338\":[3,43],\"339\":[2],\"340\":[2,14],\"341\":[3,34],\"342\":[3,8],\"343\":[2,17],\"344\":[3,28],\"345\":[3,3],\"346\":[4,18],\"347\":[5,45],\"348\":[2,34],\"349\":[3,3],\"350\":[3,26],\"351\":[3,22],\"352\":[3,28],\"353\":[3,3],\"354\":[3,10],\"355\":[3,20],\"356\":[3,25],\"357\":[3,30],\"358\":[3,11],\"359\":[4,20],\"360\":[4,49],\"361\":[4,32],\"362\":[3,4],\"363\":[3,12],\"364\":[3,36],\"365\":[3,4],\"366\":[3,1],\"367\":[2,10],\"368\":[4,25],\"369\":[3,31],\"370\":[3,39],\"371\":[3,62],\"372\":[2,17],\"373\":[2],\"374\":[1,30],\"375\":[3,62],\"376\":[3,52],\"377\":[3,69],\"378\":[3,69],\"379\":[4,58],\"380\":[4,49],\"381\":[3,49],\"382\":[4,82],\"383\":[4,54],\"384\":[3,68],\"385\":[4,50],\"386\":[1,2],\"387\":[3],\"388\":[2],\"389\":[2,54],\"390\":[2,52],\"391\":[1,11],\"392\":[2,7],\"393\":[2,24],\"394\":[2,8],\"395\":[3,3],\"396\":[1,18],\"397\":[1,5],\"398\":[1,16],\"399\":[1,29],\"400\":[1,8],\"401\":[2,18],\"402\":[2],\"403\":[2,15],\"404\":[2,23],\"405\":[2,18],\"406\":[2],\"407\":[2,17],\"408\":[2,23],\"409\":[2,23],\"410\":[2],\"411\":[2,16],\"412\":[2,27],\"413\":[2,15],\"414\":[2,24],\"415\":[2,17],\"416\":[2,4],\"417\":[2,19],\"418\":[2,15],\"419\":[2,15],\"420\":[2,18],\"421\":[2,29],\"422\":[2,2],\"423\":[3,44],\"424\":[2,33],\"425\":[2,36],\"426\":[2,66],\"427\":[2,2],\"428\":[2],\"429\":[3,20],\"430\":[4,15],\"431\":[4,17],\"432\":[4,17],\"433\":[2,14],\"434\":[2,26],\"435\":[3,5],\"436\":[2],\"437\":[2],\"438\":[2,7],\"439\":[3,6],\"440\":[2,23],\"441\":[2,19],\"442\":[4,15],\"443\":[2],\"444\":[3,16],\"445\":[3,21],\"446\":[3,9],\"447\":[4,9],\"448\":[2,12],\"449\":[2,21],\"450\":[2],\"451\":[2,21],\"452\":[2,32],\"453\":[2,24],\"454\":[2,31],\"455\":[2,33],\"456\":[2,16],\"457\":[3,5],\"458\":[2],\"459\":[2,14],\"460\":[2,19],\"461\":[2,38],\"462\":[2,11],\"463\":[2,7],\"464\":[2,13],\"465\":[5,7],\"466\":[2,21],\"467\":[3,16],\"468\":[3,14],\"469\":[2,32],\"470\":[2,34],\"471\":[2,44],\"472\":[2,60],\"473\":[2,51],\"474\":[2,33],\"475\":[2,21],\"476\":[2,18],\"477\":[2,33],\"478\":[2,13],\"479\":[2,23],\"480\":[2,17],\"481\":[2,12],\"482\":[2,11],\"483\":[2,15],\"484\":[3,29],\"485\":[3,24],\"486\":[2,63],\"487\":[2,16],\"488\":[3,26],\"489\":[2,22],\"490\":[3],\"491\":[2,15],\"492\":[2,3],\"493\":[2,8],\"494\":[2,9],\"495\":[2,16],\"496\":[2,19],\"497\":[2,17],\"498\":[2,56],\"499\":[2,5],\"500\":[2,5],\"501\":[4,48],\"502\":[4,16],\"503\":[4,25],\"504\":[2,25],\"505\":[2,7],\"506\":[2,17],\"507\":[2],\"508\":[3,36],\"509\":[3,37],\"510\":[3],\"511\":[2,14],\"512\":[3,21],\"513\":[3,33],\"514\":[3,18],\"515\":[3,18],\"516\":[3,25],\"517\":[2,16],\"518\":[3,17],\"519\":[3,23],\"520\":[3,16],\"521\":[2,30],\"522\":[2,17],\"523\":[2,20],\"524\":[2,28],\"525\":[2,20],\"526\":[2,17],\"527\":[2,19],\"528\":[2,22],\"529\":[2,48],\"530\":[2,68],\"531\":[2,21],\"532\":[2,19],\"533\":[2,19],\"534\":[2,41],\"535\":[2,49],\"536\":[2,56],\"537\":[2,25],\"538\":[3,51],\"539\":[2],\"540\":[2,18],\"541\":[2,17],\"542\":[2,15],\"543\":[2,16],\"544\":[2,20],\"545\":[2,17],\"546\":[2,26],\"547\":[2,25],\"548\":[2],\"549\":[2,15],\"550\":[2,15],\"551\":[2,17],\"552\":[2,22],\"553\":[2,17],\"554\":[2,12],\"555\":[1,29],\"556\":[1,28],\"557\":[2,27],\"558\":[2],\"559\":[2,29],\"560\":[4,4],\"561\":[3,10],\"562\":[2,32],\"563\":[4],\"564\":[3,41],\"565\":[3,60],\"566\":[3,59],\"567\":[4,6],\"568\":[3,6],\"569\":[3,17],\"570\":[3,20],\"571\":[2,25],\"572\":[3,32],\"573\":[2,13],\"574\":[3,35],\"575\":[4,25],\"576\":[3,57],\"577\":[3,38],\"578\":[2,18],\"579\":[2,33],\"580\":[2],\"581\":[2,35],\"582\":[2,8],\"583\":[3],\"584\":[3,16],\"585\":[2,2],\"586\":[2,14],\"587\":[3,18],\"588\":[4,21],\"589\":[3,21],\"590\":[2,23],\"591\":[2,16],\"592\":[2,19],\"593\":[2,20],\"594\":[2,10],\"595\":[2,22],\"596\":[2,18],\"597\":[2,18],\"598\":[2,12],\"599\":[3],\"600\":[2,25],\"601\":[2,18],\"602\":[2,27],\"603\":[3],\"604\":[2,19],\"605\":[2,20],\"606\":[2,21],\"607\":[2,18],\"608\":[2,19],\"609\":[2,20],\"610\":[2,26],\"611\":[2,36],\"612\":[2,18],\"613\":[2,19],\"614\":[2,14],\"615\":[2,11],\"616\":[2,35],\"617\":[2,34],\"618\":[2,10],\"619\":[2,15],\"620\":[2,26],\"621\":[2,19],\"622\":[2,14],\"623\":[2,11],\"624\":[2,22],\"625\":[2,15],\"626\":[2,38],\"627\":[2,5],\"628\":[2,10],\"629\":[2,24],\"630\":[2,4],\"631\":[3],\"632\":[2,17],\"633\":[2,12],\"634\":[2,9],\"635\":[2,7],\"636\":[2,43],\"637\":[3,28],\"638\":[3,14],\"639\":[2,36],\"640\":[2,54],\"641\":[2,28],\"642\":[2,23],\"643\":[2,7],\"644\":[6,26],\"645\":[9,50],\"646\":[2,36],\"647\":[2,31],\"648\":[2,26],\"649\":[2,31],\"650\":[2,17],\"651\":[2,29],\"652\":[3],\"653\":[2,6],\"654\":[1,7],\"655\":[1,17],\"656\":[1,7],\"657\":[2,21],\"658\":[2,28],\"659\":[2,15],\"660\":[2,15],\"661\":[2,13],\"662\":[2,45],\"663\":[2,27],\"664\":[2,27],\"665\":[2,25],\"666\":[2,25],\"667\":[2,20],\"668\":[2,2],\"669\":[3,12],\"670\":[3,12],\"671\":[2,17],\"672\":[2,6],\"673\":[1,4],\"674\":[1,6],\"675\":[1,8],\"676\":[2,21],\"677\":[2,30],\"678\":[2,33],\"679\":[2,14],\"680\":[1,5],\"681\":[1,19],\"682\":[2,25],\"683\":[2,18],\"684\":[2,45],\"685\":[2,28],\"686\":[2,34],\"687\":[2,34],\"688\":[2,20],\"689\":[2,34],\"690\":[2,20],\"691\":[2,37],\"692\":[4],\"693\":[2,11],\"694\":[1,6],\"695\":[1,7],\"696\":[2,14],\"697\":[2,31],\"698\":[2,42],\"699\":[2,25],\"700\":[2,20],\"701\":[2,20],\"702\":[2,37],\"703\":[2,22],\"704\":[2,26],\"705\":[2,6],\"706\":[1,5],\"707\":[1,9],\"708\":[1,5],\"709\":[1,3],\"710\":[1,15],\"711\":[2,33],\"712\":[2,35],\"713\":[2,28],\"714\":[2,15],\"715\":[2,26],\"716\":[2,22],\"717\":[2,21],\"718\":[2,16],\"719\":[2,20],\"720\":[2,24],\"721\":[2,28],\"722\":[2,22],\"723\":[2,37],\"724\":[3,9],\"725\":[2,2],\"726\":[2,10],\"727\":[2,8],\"728\":[2,11],\"729\":[2,11],\"730\":[2,5],\"731\":[2,2],\"732\":[2,2],\"733\":[2,2],\"734\":[2,2],\"735\":[3,3],\"736\":[1,36],\"737\":[1,22],\"738\":[1,19],\"739\":[1,41],\"740\":[2,2],\"741\":[2,28],\"742\":[2,26],\"743\":[2,17],\"744\":[2,27],\"745\":[2,16],\"746\":[1,12],\"747\":[1,4],\"748\":[2,15],\"749\":[2,56],\"750\":[2,42],\"751\":[2,15],\"752\":[2,34],\"753\":[2,33],\"754\":[2,6],\"755\":[1,13],\"756\":[1,14],\"757\":[1,9],\"758\":[3,28],\"759\":[3,14],\"760\":[2,36],\"761\":[2,54],\"762\":[2],\"763\":[2,13],\"764\":[2,4],\"765\":[2,12],\"766\":[2],\"767\":[3,23],\"768\":[3,4],\"769\":[2,5],\"770\":[2],\"771\":[3,10],\"772\":[3,14],\"773\":[3],\"774\":[2,1],\"775\":[2],\"776\":[2,9],\"777\":[3,11],\"778\":[5,9],\"779\":[3,16],\"780\":[3],\"781\":[3,12],\"782\":[3,8],\"783\":[3,9],\"784\":[3,2],\"785\":[3,2],\"786\":[2,7],\"787\":[2,27],\"788\":[3],\"789\":[2],\"790\":[2,40],\"791\":[2],\"792\":[3,19],\"793\":[2,8],\"794\":[3,6],\"795\":[2],\"796\":[4,4],\"797\":[4,8],\"798\":[2,6],\"799\":[2,8],\"800\":[2],\"801\":[4,9],\"802\":[4,13],\"803\":[3,12],\"804\":[2],\"805\":[2,5],\"806\":[2,2],\"807\":[2,3],\"808\":[2,21],\"809\":[2],\"810\":[2,47],\"811\":[2,92],\"812\":[2,50],\"813\":[2,15],\"814\":[2,2],\"815\":[2,19],\"816\":[3],\"817\":[2],\"818\":[2,6],\"819\":[2,2],\"820\":[2],\"821\":[3,7],\"822\":[3,10],\"823\":[2,10],\"824\":[2,9],\"825\":[2,11],\"826\":[2,4],\"827\":[3,27],\"828\":[3,19],\"829\":[2],\"830\":[2,6],\"831\":[2,1],\"832\":[2,5],\"833\":[2,7],\"834\":[2,16],\"835\":[2,24],\"836\":[3],\"837\":[3],\"838\":[2,5],\"839\":[2,4],\"840\":[2,10],\"841\":[2,14],\"842\":[2,6],\"843\":[3],\"844\":[2,6],\"845\":[2,12],\"846\":[2,14],\"847\":[2,6],\"848\":[2,9],\"849\":[2,12],\"850\":[3,17],\"851\":[3],\"852\":[2,9],\"853\":[2,11],\"854\":[2,27],\"855\":[2,27],\"856\":[2,5],\"857\":[3],\"858\":[2,6],\"859\":[2,7],\"860\":[2,12],\"861\":[2],\"862\":[2,5],\"863\":[2,10],\"864\":[3,16],\"865\":[2,8],\"866\":[3,20],\"867\":[2,29],\"868\":[2,40],\"869\":[2,29],\"870\":[2],\"871\":[2,8],\"872\":[2,6],\"873\":[4,41],\"874\":[2,17],\"875\":[3,5],\"876\":[2,16],\"877\":[2,30],\"878\":[2,19],\"879\":[2,8],\"880\":[3,8],\"881\":[3,2],\"882\":[2],\"883\":[3,11],\"884\":[3,3],\"885\":[3,20],\"886\":[3,25],\"887\":[2,14],\"888\":[2,2],\"889\":[3],\"890\":[2,2],\"891\":[2,28],\"892\":[2,3],\"893\":[3,38],\"894\":[2],\"895\":[3,10],\"896\":[2,9],\"897\":[2,19],\"898\":[2,4],\"899\":[2],\"900\":[2,9],\"901\":[2,14],\"902\":[2,3],\"903\":[2,10],\"904\":[2,5],\"905\":[2,21],\"906\":[2,3],\"907\":[2,6],\"908\":[2,3],\"909\":[2,40],\"910\":[2],\"911\":[2,7],\"912\":[2],\"913\":[5,16],\"914\":[2,17],\"915\":[4,11],\"916\":[2,5],\"917\":[3,20],\"918\":[3],\"919\":[2,4],\"920\":[3,4],\"921\":[4,6],\"922\":[4,8],\"923\":[2,11],\"924\":[2,18],\"925\":[2],\"926\":[2,11],\"927\":[2,48],\"928\":[2,23],\"929\":[4,17],\"930\":[2],\"931\":[1,19],\"932\":[2,10],\"933\":[2,30],\"934\":[2],\"935\":[2,9],\"936\":[2,29],\"937\":[2,16],\"938\":[4,57],\"939\":[3],\"940\":[2,7],\"941\":[3,26],\"942\":[2,4],\"943\":[2,6],\"944\":[2,5],\"945\":[3,4],\"946\":[3,4],\"947\":[2,8],\"948\":[2,7],\"949\":[2,9],\"950\":[2,24],\"951\":[2,5],\"952\":[2,9],\"953\":[2],\"954\":[4,19],\"955\":[3,16],\"956\":[4,59],\"957\":[3],\"958\":[2],\"959\":[2,6],\"960\":[2,12],\"961\":[2,12],\"962\":[2,9],\"963\":[2,7],\"964\":[2],\"965\":[3,6],\"966\":[3,14],\"967\":[2],\"968\":[2,10],\"969\":[2,3],\"970\":[3,17],\"971\":[2,16],\"972\":[2,29],\"973\":[2,9],\"974\":[2,20],\"975\":[2,12],\"976\":[2],\"977\":[3,3],\"978\":[3,11],\"979\":[3,27],\"980\":[2,8],\"981\":[2],\"982\":[1,23],\"983\":[2],\"984\":[2,11],\"985\":[4,19],\"986\":[4,18],\"987\":[2,4],\"988\":[3,15],\"989\":[2,22],\"990\":[2,27],\"991\":[2,14],\"992\":[2,18],\"993\":[2,13],\"994\":[2,3],\"995\":[2,16],\"996\":[2],\"997\":[2,16],\"998\":[2,30],\"999\":[2,4],\"1000\":[3],\"1001\":[2],\"1002\":[2,24],\"1003\":[2,7],\"1004\":[2,13],\"1005\":[2,15],\"1006\":[2],\"1007\":[2,19],\"1008\":[2,4],\"1009\":[2,8],\"1010\":[2,31],\"1011\":[2,44],\"1012\":[2,4],\"1013\":[2,7],\"1014\":[2,15],\"1015\":[2,9],\"1016\":[2,9],\"1017\":[2],\"1018\":[2,41],\"1019\":[2,41],\"1020\":[2],\"1021\":[2],\"1022\":[2,33],\"1023\":[2,10],\"1024\":[3,9],\"1025\":[2,60],\"1026\":[2,20],\"1027\":[2],\"1028\":[2,9],\"1029\":[2,61],\"1030\":[2,13],\"1031\":[2],\"1032\":[3,24],\"1033\":[3,13],\"1034\":[2,42],\"1035\":[2,36],\"1036\":[2],\"1037\":[3,18],\"1038\":[2,6],\"1039\":[2,10],\"1040\":[2],\"1041\":[2,6],\"1042\":[2,6],\"1043\":[2,7],\"1044\":[3,41],\"1045\":[3,21],\"1046\":[2,9],\"1047\":[3,34],\"1048\":[3,19],\"1049\":[3,7],\"1050\":[3],\"1051\":[2],\"1052\":[1,6],\"1053\":[2,10],\"1054\":[2,22],\"1055\":[3,9],\"1056\":[2,34],\"1057\":[3,16],\"1058\":[2,12],\"1059\":[2,3],\"1060\":[2],\"1061\":[2,7],\"1062\":[2,13],\"1063\":[2,3],\"1064\":[2,7],\"1065\":[3,5],\"1066\":[2],\"1067\":[2,8],\"1068\":[3,22],\"1069\":[2,14],\"1070\":[2,6],\"1071\":[2,21],\"1072\":[2,8],\"1073\":[2,8],\"1074\":[2,3],\"1075\":[3,14],\"1076\":[3],\"1077\":[2],\"1078\":[2,4],\"1079\":[2],\"1080\":[3,16],\"1081\":[2,17],\"1082\":[2,32],\"1083\":[2,5],\"1084\":[2,9],\"1085\":[2,2],\"1086\":[2,6],\"1087\":[2,16],\"1088\":[2,12],\"1089\":[2,13],\"1090\":[2,34],\"1091\":[2,4],\"1092\":[2,4],\"1093\":[2,7],\"1094\":[2,17],\"1095\":[3,11],\"1096\":[2,14],\"1097\":[2,16],\"1098\":[3,7],\"1099\":[2],\"1100\":[2,9],\"1101\":[3,13],\"1102\":[3,11],\"1103\":[3,6],\"1104\":[3,24],\"1105\":[3,14],\"1106\":[3,25],\"1107\":[4,4],\"1108\":[2],\"1109\":[2,15],\"1110\":[3],\"1111\":[3,5],\"1112\":[2,13],\"1113\":[2,16],\"1114\":[2,8],\"1115\":[2,20],\"1116\":[2,12],\"1117\":[2],\"1118\":[4,23],\"1119\":[3,14],\"1120\":[3,29],\"1121\":[3],\"1122\":[2,14],\"1123\":[2],\"1124\":[3,3],\"1125\":[2,13],\"1126\":[3,3],\"1127\":[3,8],\"1128\":[2,44],\"1129\":[2,9],\"1130\":[2],\"1131\":[2,4],\"1132\":[3,22],\"1133\":[3,33],\"1134\":[2,24],\"1135\":[3,17],\"1136\":[2,24],\"1137\":[3,5],\"1138\":[3,8],\"1139\":[3,11],\"1140\":[3,16],\"1141\":[2,3],\"1142\":[2],\"1143\":[2,6],\"1144\":[2,15],\"1145\":[3],\"1146\":[2],\"1147\":[2,26],\"1148\":[2],\"1149\":[3,12],\"1150\":[2,13],\"1151\":[3,9],\"1152\":[2,15],\"1153\":[2,36],\"1154\":[2],\"1155\":[3,7],\"1156\":[5,15],\"1157\":[3,7],\"1158\":[3,11],\"1159\":[2,27],\"1160\":[2,37],\"1161\":[2,10],\"1162\":[2,10],\"1163\":[2,22],\"1164\":[2],\"1165\":[4,16],\"1166\":[3,11],\"1167\":[2,22],\"1168\":[2,21],\"1169\":[2],\"1170\":[3,9],\"1171\":[3,14],\"1172\":[3,12],\"1173\":[3],\"1174\":[2],\"1175\":[2,13],\"1176\":[2,24],\"1177\":[3],\"1178\":[3,62],\"1179\":[3,38],\"1180\":[2,69],\"1181\":[4,32],\"1182\":[3,18],\"1183\":[2,3],\"1184\":[3,15],\"1185\":[3,31],\"1186\":[3,16],\"1187\":[3,7],\"1188\":[2],\"1189\":[2,8],\"1190\":[2,2],\"1191\":[2,5],\"1192\":[2,36],\"1193\":[3,9],\"1194\":[2,29],\"1195\":[2,21],\"1196\":[2],\"1197\":[5,28],\"1198\":[4,19],\"1199\":[2,7],\"1200\":[2],\"1201\":[2,10],\"1202\":[2,5],\"1203\":[2,17],\"1204\":[2],\"1205\":[3,6],\"1206\":[3,10],\"1207\":[3,13],\"1208\":[2,11],\"1209\":[3,21],\"1210\":[2,21],\"1211\":[3,7],\"1212\":[3,20],\"1213\":[2,5],\"1214\":[2,6],\"1215\":[2,8],\"1216\":[2,3],\"1217\":[2],\"1218\":[3,19],\"1219\":[3,22],\"1220\":[3],\"1221\":[2],\"1222\":[2,5],\"1223\":[2,9],\"1224\":[2,12],\"1225\":[2,7],\"1226\":[2],\"1227\":[2,36],\"1228\":[2,9],\"1229\":[2,7],\"1230\":[2,11],\"1231\":[2],\"1232\":[2,5],\"1233\":[2,14],\"1234\":[2,6],\"1235\":[2,4],\"1236\":[2,9],\"1237\":[2,15],\"1238\":[2,3],\"1239\":[2,11],\"1240\":[3,31],\"1241\":[3,26],\"1242\":[2,13],\"1243\":[2,27],\"1244\":[3],\"1245\":[2],\"1246\":[4,13],\"1247\":[3,17],\"1248\":[2,8],\"1249\":[2,32],\"1250\":[2,16],\"1251\":[4,28],\"1252\":[4,48],\"1253\":[2],\"1254\":[1,13],\"1255\":[3],\"1256\":[2,7],\"1257\":[3,17],\"1258\":[3,21],\"1259\":[2,28],\"1260\":[2,10],\"1261\":[2,22],\"1262\":[2,17],\"1263\":[2,3],\"1264\":[4,41],\"1265\":[3,12],\"1266\":[2,3],\"1267\":[2,19],\"1268\":[2,8],\"1269\":[2,27],\"1270\":[3,12],\"1271\":[2],\"1272\":[4,13],\"1273\":[3,13],\"1274\":[3],\"1275\":[2],\"1276\":[2,5],\"1277\":[2,4],\"1278\":[2,37],\"1279\":[3,11],\"1280\":[3,13],\"1281\":[2,4],\"1282\":[2,15],\"1283\":[2,15],\"1284\":[2,11],\"1285\":[2,8],\"1286\":[2,23],\"1287\":[2],\"1288\":[2,16],\"1289\":[2,11],\"1290\":[6,8],\"1291\":[5,11],\"1292\":[6,5],\"1293\":[2,30],\"1294\":[2,4],\"1295\":[2,11],\"1296\":[3,4],\"1297\":[2],\"1298\":[2,36],\"1299\":[2,2],\"1300\":[6,11],\"1301\":[6,7],\"1302\":[7,9],\"1303\":[8,7],\"1304\":[2,7],\"1305\":[2],\"1306\":[2,14],\"1307\":[2,18],\"1308\":[2,17],\"1309\":[3],\"1310\":[2,5],\"1311\":[2,2],\"1312\":[3,32],\"1313\":[3,9],\"1314\":[2,13],\"1315\":[2,19],\"1316\":[2,13],\"1317\":[2,7],\"1318\":[2,16],\"1319\":[2,20],\"1320\":[2,2],\"1321\":[3],\"1322\":[2],\"1323\":[2,35],\"1324\":[2,7],\"1325\":[2,11],\"1326\":[2],\"1327\":[5,14],\"1328\":[5],\"1329\":[4,9],\"1330\":[4,10],\"1331\":[5,8],\"1332\":[5,10],\"1333\":[5,15],\"1334\":[5,11],\"1335\":[4,19],\"1336\":[3],\"1337\":[2,22],\"1338\":[2,16],\"1339\":[3,51],\"1340\":[3,17],\"1341\":[2,19],\"1342\":[2,19],\"1343\":[4,29],\"1344\":[4,42],\"1345\":[2,5],\"1346\":[2,12],\"1347\":[2,23],\"1348\":[3],\"1349\":[2,11],\"1350\":[2,19],\"1351\":[2,14],\"1352\":[2,50],\"1353\":[4,7],\"1354\":[2,7],\"1355\":[4,13],\"1356\":[2,8],\"1357\":[2],\"1358\":[2,5],\"1359\":[2,15],\"1360\":[2,15],\"1361\":[2,47],\"1362\":[2],\"1363\":[2,13],\"1364\":[2,15],\"1365\":[2,6],\"1366\":[3],\"1367\":[2],\"1368\":[2,56],\"1369\":[2,8],\"1370\":[2,6],\"1371\":[2,13],\"1372\":[3,11],\"1373\":[3,49],\"1374\":[3,13],\"1375\":[2],\"1376\":[2,5],\"1377\":[2,17],\"1378\":[2,16],\"1379\":[2,16],\"1380\":[2,11],\"1381\":[2],\"1382\":[4,58],\"1383\":[4,20],\"1384\":[3],\"1385\":[2],\"1386\":[2,10],\"1387\":[2,20],\"1388\":[3,22],\"1389\":[2,33],\"1390\":[2,42],\"1391\":[2],\"1392\":[2,10],\"1393\":[2,13],\"1394\":[2],\"1395\":[4,18],\"1396\":[3,3],\"1397\":[3,9],\"1398\":[3,5],\"1399\":[2,16],\"1400\":[2,25],\"1401\":[2],\"1402\":[2,28],\"1403\":[2],\"1404\":[4,37],\"1405\":[3,52],\"1406\":[4,52],\"1407\":[2],\"1408\":[2,22],\"1409\":[2,19],\"1410\":[3,7],\"1411\":[4,19],\"1412\":[2,26],\"1413\":[3,17],\"1414\":[3,4],\"1415\":[4,15],\"1416\":[4,16],\"1417\":[2,8],\"1418\":[2,9],\"1419\":[2,22],\"1420\":[3,15],\"1421\":[2,11],\"1422\":[4,17],\"1423\":[3,11],\"1424\":[2],\"1425\":[2,16],\"1426\":[4,14],\"1427\":[2,21],\"1428\":[5,3],\"1429\":[3,10],\"1430\":[2,26],\"1431\":[2,11],\"1432\":[2,102],\"1433\":[3],\"1434\":[2],\"1435\":[3,16],\"1436\":[3,16],\"1437\":[3,9],\"1438\":[2,1],\"1439\":[3,20],\"1440\":[2,22],\"1441\":[2,21],\"1442\":[2,11],\"1443\":[2],\"1444\":[1,18],\"1445\":[2,11],\"1446\":[2,18],\"1447\":[3],\"1448\":[2,8],\"1449\":[2],\"1450\":[3,6],\"1451\":[2,6],\"1452\":[3,7],\"1453\":[3,5],\"1454\":[2,6],\"1455\":[4,17],\"1456\":[4,8],\"1457\":[2,9],\"1458\":[2,8],\"1459\":[3],\"1460\":[2],\"1461\":[2,4],\"1462\":[2,10],\"1463\":[2,16],\"1464\":[2,3],\"1465\":[1,11],\"1466\":[2],\"1467\":[3,4],\"1468\":[3,12],\"1469\":[4,6],\"1470\":[4,9],\"1471\":[2,13],\"1472\":[2,56],\"1473\":[3,10],\"1474\":[3,10],\"1475\":[2],\"1476\":[3,11],\"1477\":[3,9],\"1478\":[2],\"1479\":[1,40],\"1480\":[2,46],\"1481\":[2,86],\"1482\":[2],\"1483\":[2],\"1484\":[2,3],\"1485\":[3,1],\"1486\":[2,5],\"1487\":[2,24],\"1488\":[2,3],\"1489\":[2,45],\"1490\":[2,2],\"1491\":[2,9],\"1492\":[2,59],\"1493\":[2,21],\"1494\":[2,7],\"1495\":[3,8],\"1496\":[3],\"1497\":[3,7],\"1498\":[3,5],\"1499\":[2,12],\"1500\":[3,3],\"1501\":[2,27],\"1502\":[2,3],\"1503\":[3],\"1504\":[2],\"1505\":[2,7],\"1506\":[3,15],\"1507\":[3,25],\"1508\":[2,8],\"1509\":[2,44],\"1510\":[2,2],\"1511\":[2,26],\"1512\":[2,44],\"1513\":[3,3],\"1514\":[2,13],\"1515\":[2,24],\"1516\":[2],\"1517\":[2,12],\"1518\":[3,2],\"1519\":[4,11],\"1520\":[2,53],\"1521\":[2,39],\"1522\":[3,21],\"1523\":[2,12],\"1524\":[3,18],\"1525\":[3,14],\"1526\":[3,12],\"1527\":[2,15],\"1528\":[2,9],\"1529\":[2,1],\"1530\":[2,15],\"1531\":[2,6],\"1532\":[2,24],\"1533\":[3,12],\"1534\":[3,2],\"1535\":[2,7],\"1536\":[2,51],\"1537\":[2,10],\"1538\":[2,6],\"1539\":[2,5],\"1540\":[2,9],\"1541\":[2,9],\"1542\":[2,13],\"1543\":[2],\"1544\":[3,5],\"1545\":[3,12],\"1546\":[3,9],\"1547\":[3,39],\"1548\":[3,13],\"1549\":[3,6],\"1550\":[3,8],\"1551\":[2,24],\"1552\":[3,19],\"1553\":[4,10],\"1554\":[2,11],\"1555\":[4,17],\"1556\":[2,55],\"1557\":[3],\"1558\":[2,4],\"1559\":[2,11],\"1560\":[2,15],\"1561\":[2,15],\"1562\":[2,69],\"1563\":[2],\"1564\":[2,17],\"1565\":[2,13],\"1566\":[3,18],\"1567\":[4,13],\"1568\":[2,9],\"1569\":[2,51],\"1570\":[3],\"1571\":[2],\"1572\":[2,16],\"1573\":[2,13],\"1574\":[2,17],\"1575\":[2,13],\"1576\":[2,9],\"1577\":[2],\"1578\":[2,39],\"1579\":[2,2],\"1580\":[2,3],\"1581\":[3],\"1582\":[1,29],\"1583\":[1,14],\"1584\":[1,2],\"1585\":[3],\"1586\":[3,3],\"1587\":[2,14],\"1588\":[2,14],\"1589\":[2,10],\"1590\":[2,2],\"1591\":[5,7],\"1592\":[4,13],\"1593\":[4,2],\"1594\":[2,21],\"1595\":[6,14],\"1596\":[6,12],\"1597\":[5,15],\"1598\":[2,3],\"1599\":[2,8],\"1600\":[3,21],\"1601\":[4],\"1602\":[2,11],\"1603\":[3,21],\"1604\":[3,19],\"1605\":[3,4],\"1606\":[3,18],\"1607\":[3,19],\"1608\":[3],\"1609\":[3],\"1610\":[2,11],\"1611\":[2,15],\"1612\":[5,6],\"1613\":[2,5],\"1614\":[3,5],\"1615\":[2],\"1616\":[2],\"1617\":[2,7],\"1618\":[3,10],\"1619\":[3,12],\"1620\":[3,11],\"1621\":[4,21],\"1622\":[3,5],\"1623\":[2,5],\"1624\":[3,11],\"1625\":[2,6],\"1626\":[3,14],\"1627\":[2],\"1628\":[3,8],\"1629\":[3,6],\"1630\":[2,7],\"1631\":[3],\"1632\":[3],\"1633\":[2,18],\"1634\":[2,14],\"1635\":[4,17],\"1636\":[3,5],\"1637\":[4,16],\"1638\":[4,16],\"1639\":[2,28],\"1640\":[2,4],\"1641\":[3,11],\"1642\":[3,23],\"1643\":[3,23],\"1644\":[3,9],\"1645\":[4,10],\"1646\":[2,10],\"1647\":[3,14],\"1648\":[3,3],\"1649\":[3,22],\"1650\":[3,10],\"1651\":[3,24],\"1652\":[3,6],\"1653\":[3,5],\"1654\":[2,48],\"1655\":[2,13],\"1656\":[3,9],\"1657\":[3,42],\"1658\":[4,34],\"1659\":[2],\"1660\":[3],\"1661\":[2,30],\"1662\":[2,20],\"1663\":[2],\"1664\":[5,39],\"1665\":[3,15],\"1666\":[2,21],\"1667\":[3,7],\"1668\":[3,14],\"1669\":[2,3],\"1670\":[3,18],\"1671\":[2],\"1672\":[2],\"1673\":[2,10],\"1674\":[3,36],\"1675\":[3,5],\"1676\":[3,10],\"1677\":[3,8],\"1678\":[2,29],\"1679\":[2,2],\"1680\":[2,40],\"1681\":[2],\"1682\":[2,7],\"1683\":[2,19],\"1684\":[2],\"1685\":[2,21],\"1686\":[2,10],\"1687\":[3,49],\"1688\":[2,28],\"1689\":[2,2],\"1690\":[2,9],\"1691\":[2,7],\"1692\":[3,30],\"1693\":[3,6],\"1694\":[1,9],\"1695\":[1,6],\"1696\":[3],\"1697\":[3],\"1698\":[1,20],\"1699\":[2,13],\"1700\":[2,31],\"1701\":[2,4],\"1702\":[3,5],\"1703\":[3,11],\"1704\":[2,3],\"1705\":[3,2],\"1706\":[3,3],\"1707\":[2,34],\"1708\":[2],\"1709\":[3,41],\"1710\":[3,59],\"1711\":[2,34],\"1712\":[3],\"1713\":[2],\"1714\":[2,5],\"1715\":[2,12],\"1716\":[3,15],\"1717\":[3,6],\"1718\":[3],\"1719\":[3,22],\"1720\":[2,27],\"1721\":[4,48],\"1722\":[2,6],\"1723\":[4,14],\"1724\":[4,10],\"1725\":[4,13],\"1726\":[3,12],\"1727\":[2],\"1728\":[2,8],\"1729\":[1,3],\"1730\":[2,7],\"1731\":[2,4],\"1732\":[2,15],\"1733\":[2,17],\"1734\":[2,13],\"1735\":[3],\"1736\":[2],\"1737\":[4,17],\"1738\":[3,15],\"1739\":[2,6],\"1740\":[2],\"1741\":[2,11],\"1742\":[2],\"1743\":[3,15],\"1744\":[2,12],\"1745\":[3,26],\"1746\":[2,4],\"1747\":[3,46],\"1748\":[3,42],\"1749\":[2,11],\"1750\":[2,1],\"1751\":[4,8],\"1752\":[4,7],\"1753\":[3,35],\"1754\":[2,2],\"1755\":[3,13],\"1756\":[3,7],\"1757\":[3,10],\"1758\":[3],\"1759\":[3],\"1760\":[2,15],\"1761\":[2,11],\"1762\":[2,9],\"1763\":[2,2],\"1764\":[3,7],\"1765\":[3,8],\"1766\":[3],\"1767\":[7,34],\"1768\":[8,20],\"1769\":[8,4],\"1770\":[2,11],\"1771\":[3,2],\"1772\":[3],\"1773\":[2,23],\"1774\":[3,14],\"1775\":[2,29],\"1776\":[2,6],\"1777\":[2,14],\"1778\":[2],\"1779\":[3,4],\"1780\":[3,10],\"1781\":[3],\"1782\":[1,4],\"1783\":[4,5],\"1784\":[2,5],\"1785\":[3,4],\"1786\":[4],\"1787\":[3,5],\"1788\":[2,4],\"1789\":[2,8],\"1790\":[2,12],\"1791\":[2,7],\"1792\":[2,8],\"1793\":[2,2],\"1794\":[3],\"1795\":[2,6],\"1796\":[2,3],\"1797\":[2,34],\"1798\":[2,2],\"1799\":[2],\"1800\":[3,21],\"1801\":[4,16],\"1802\":[4,7],\"1803\":[2,7],\"1804\":[3,44],\"1805\":[2,41],\"1806\":[3,8],\"1807\":[3,14],\"1808\":[3,30],\"1809\":[2,2],\"1810\":[1,6],\"1811\":[3],\"1812\":[3,26],\"1813\":[4,11],\"1814\":[4,6],\"1815\":[2,3],\"1816\":[2,43],\"1817\":[3,46],\"1818\":[2,4],\"1819\":[2,4],\"1820\":[1,5],\"1821\":[2,19],\"1822\":[2,11],\"1823\":[4,47],\"1824\":[3],\"1825\":[2,9],\"1826\":[1,33],\"1827\":[2,5],\"1828\":[3,31],\"1829\":[3,28],\"1830\":[3,32],\"1831\":[3,42],\"1832\":[2],\"1833\":[2,20],\"1834\":[5,51],\"1835\":[5,6],\"1836\":[4,57],\"1837\":[4,3],\"1838\":[2,27],\"1839\":[3],\"1840\":[2],\"1841\":[2,5],\"1842\":[2,11],\"1843\":[2,17],\"1844\":[2,8],\"1845\":[2],\"1846\":[1,9],\"1847\":[3,19],\"1848\":[3,20],\"1849\":[2],\"1850\":[3,4],\"1851\":[3,20],\"1852\":[2,3],\"1853\":[2,25],\"1854\":[2,4],\"1855\":[3,5],\"1856\":[3,7],\"1857\":[2,10],\"1858\":[3,44],\"1859\":[3],\"1860\":[2,9],\"1861\":[2,28],\"1862\":[2,3],\"1863\":[3,48],\"1864\":[3,3],\"1865\":[2,3],\"1866\":[3],\"1867\":[2,7],\"1868\":[4,10],\"1869\":[2,12],\"1870\":[4,52],\"1871\":[2,2],\"1872\":[2,16],\"1873\":[3,42],\"1874\":[2,6],\"1875\":[2,9],\"1876\":[2,22],\"1877\":[2,2],\"1878\":[3,35],\"1879\":[3,36],\"1880\":[2,14],\"1881\":[2,9],\"1882\":[2,5],\"1883\":[3,4],\"1884\":[2,7],\"1885\":[2,14],\"1886\":[3,13],\"1887\":[3,10],\"1888\":[3,28],\"1889\":[2,16],\"1890\":[3,10],\"1891\":[4,19],\"1892\":[2,11],\"1893\":[2],\"1894\":[1,12],\"1895\":[2,6],\"1896\":[2,9],\"1897\":[2],\"1898\":[3,19],\"1899\":[3,8],\"1900\":[2,10],\"1901\":[3,7],\"1902\":[3],\"1903\":[3,24],\"1904\":[3,27],\"1905\":[3,17],\"1906\":[3],\"1907\":[3,12],\"1908\":[3,28],\"1909\":[3,27],\"1910\":[2,24],\"1911\":[3],\"1912\":[2],\"1913\":[3,32],\"1914\":[3,13],\"1915\":[2,7],\"1916\":[3,26],\"1917\":[3,8],\"1918\":[2,41],\"1919\":[2,14],\"1920\":[2,71],\"1921\":[2,6],\"1922\":[3,3],\"1923\":[1,17],\"1924\":[2,16],\"1925\":[2,4],\"1926\":[2,14],\"1927\":[2,2],\"1928\":[2,3],\"1929\":[3],\"1930\":[2],\"1931\":[3,5],\"1932\":[2],\"1933\":[4,29],\"1934\":[3,10],\"1935\":[2,8],\"1936\":[3,10],\"1937\":[2,8],\"1938\":[3,18],\"1939\":[2,5],\"1940\":[2],\"1941\":[1,13],\"1942\":[2,11],\"1943\":[2,6],\"1944\":[4,18],\"1945\":[2,23],\"1946\":[2,22],\"1947\":[3,15],\"1948\":[3,21],\"1949\":[3],\"1950\":[2],\"1951\":[2,8],\"1952\":[2,18],\"1953\":[2],\"1954\":[2,9],\"1955\":[4,19],\"1956\":[2,16],\"1957\":[2,14],\"1958\":[2,21],\"1959\":[2,11],\"1960\":[3],\"1961\":[2,13],\"1962\":[2,9],\"1963\":[2],\"1964\":[3,11],\"1965\":[3,11],\"1966\":[2,59],\"1967\":[3],\"1968\":[2,5],\"1969\":[2,29],\"1970\":[2,3],\"1971\":[3,12],\"1972\":[3,29],\"1973\":[2,26],\"1974\":[2],\"1975\":[3,18],\"1976\":[3,11],\"1977\":[3,42],\"1978\":[2,14],\"1979\":[3],\"1980\":[2],\"1981\":[2,17],\"1982\":[2,8],\"1983\":[2,30],\"1984\":[2,34],\"1985\":[2,59],\"1986\":[2,36],\"1987\":[3],\"1988\":[2,21],\"1989\":[2,22],\"1990\":[2,50],\"1991\":[2,17],\"1992\":[2,18],\"1993\":[3,22],\"1994\":[3,16],\"1995\":[3,38],\"1996\":[2,51],\"1997\":[3],\"1998\":[2,7],\"1999\":[2,30],\"2000\":[2,11],\"2001\":[2,7],\"2002\":[2,17],\"2003\":[2,5],\"2004\":[3,43],\"2005\":[3,21],\"2006\":[3],\"2007\":[4,28],\"2008\":[4,18],\"2009\":[4,41],\"2010\":[4,46],\"2011\":[3],\"2012\":[2,16],\"2013\":[2,13],\"2014\":[2,11],\"2015\":[2,15],\"2016\":[2,33],\"2017\":[2,8],\"2018\":[4,14],\"2019\":[5,18],\"2020\":[8,20],\"2021\":[6,17],\"2022\":[2,2],\"2023\":[3],\"2024\":[2],\"2025\":[2,6],\"2026\":[3,10],\"2027\":[4,18],\"2028\":[4,12],\"2029\":[2,25],\"2030\":[2,9],\"2031\":[2,15],\"2032\":[2,34],\"2033\":[3,5],\"2034\":[2,38],\"2035\":[3],\"2036\":[2],\"2037\":[3,39],\"2038\":[2,29],\"2039\":[2,7],\"2040\":[2],\"2041\":[3,16],\"2042\":[1,10],\"2043\":[3,13],\"2044\":[1,12],\"2045\":[2,51],\"2046\":[2],\"2047\":[2,25],\"2048\":[2,89],\"2049\":[2],\"2050\":[2,19],\"2051\":[3,11],\"2052\":[3,12],\"2053\":[2,20],\"2054\":[3,16],\"2055\":[3,12],\"2056\":[3,14],\"2057\":[2],\"2058\":[2,29],\"2059\":[5,8],\"2060\":[3,8],\"2061\":[3,6],\"2062\":[3,14],\"2063\":[2,34],\"2064\":[4,12],\"2065\":[5,7],\"2066\":[4,18],\"2067\":[2,28],\"2068\":[2,2],\"2069\":[3,22],\"2070\":[3],\"2071\":[2],\"2072\":[2,10],\"2073\":[1,23],\"2074\":[2,7],\"2075\":[3,10],\"2076\":[2,6],\"2077\":[2,18],\"2078\":[2,19],\"2079\":[3,5],\"2080\":[3,19],\"2081\":[3,13],\"2082\":[2,19],\"2083\":[2],\"2084\":[2,5],\"2085\":[2,21],\"2086\":[3,7],\"2087\":[2,7],\"2088\":[2],\"2089\":[4,3],\"2090\":[4,31],\"2091\":[3,4],\"2092\":[5,16],\"2093\":[2],\"2094\":[3,22],\"2095\":[5,37],\"2096\":[3,27],\"2097\":[2,39],\"2098\":[2],\"2099\":[6,5],\"2100\":[3,9],\"2101\":[3,36],\"2102\":[3,2],\"2103\":[2,17],\"2104\":[2,9],\"2105\":[2,6],\"2106\":[2,10],\"2107\":[3,6],\"2108\":[3,10],\"2109\":[3,4],\"2110\":[2],\"2111\":[2,7],\"2112\":[2,4],\"2113\":[2,4],\"2114\":[2,16],\"2115\":[3,8],\"2116\":[3,11],\"2117\":[2,13],\"2118\":[2,18],\"2119\":[2,4],\"2120\":[4,3],\"2121\":[2,24],\"2122\":[4,5],\"2123\":[2,23],\"2124\":[3,6],\"2125\":[2,9],\"2126\":[3,3],\"2127\":[2,9],\"2128\":[4,5],\"2129\":[3,28],\"2130\":[3,5],\"2131\":[3],\"2132\":[2,3],\"2133\":[2,28],\"2134\":[3],\"2135\":[1,4],\"2136\":[1,7],\"2137\":[1,9],\"2138\":[1,10],\"2139\":[2,9],\"2140\":[2,7],\"2141\":[2,10],\"2142\":[2,9],\"2143\":[2,4],\"2144\":[2,34],\"2145\":[2,3],\"2146\":[3],\"2147\":[2],\"2148\":[2,10],\"2149\":[2,4],\"2150\":[2,10],\"2151\":[1,15],\"2152\":[2,12],\"2153\":[2],\"2154\":[5,3],\"2155\":[2,10],\"2156\":[3,29],\"2157\":[7,15],\"2158\":[3,8],\"2159\":[2,15],\"2160\":[5,2],\"2161\":[3,11],\"2162\":[3,18],\"2163\":[5,2],\"2164\":[3,11],\"2165\":[3,12],\"2166\":[7,13],\"2167\":[3,8],\"2168\":[3,12],\"2169\":[2,2],\"2170\":[2,2],\"2171\":[2,2],\"2172\":[3,8],\"2173\":[3,8],\"2174\":[3,7],\"2175\":[3,9],\"2176\":[3,11],\"2177\":[3,13],\"2178\":[3,12],\"2179\":[3,14],\"2180\":[3,12],\"2181\":[2,3],\"2182\":[2,2],\"2183\":[2,3],\"2184\":[3,10],\"2185\":[2,9],\"2186\":[3],\"2187\":[3,15],\"2188\":[4,22],\"2189\":[3,4],\"2190\":[2,6],\"2191\":[4,14],\"2192\":[2,21],\"2193\":[2,6],\"2194\":[3],\"2195\":[2],\"2196\":[2,18],\"2197\":[3,18],\"2198\":[2,21],\"2199\":[1,17],\"2200\":[3,24],\"2201\":[4,9],\"2202\":[3,33],\"2203\":[3,25],\"2204\":[3,5],\"2205\":[2,9],\"2206\":[2,13],\"2207\":[2,12],\"2208\":[2,3],\"2209\":[2,14],\"2210\":[3,29],\"2211\":[3,21],\"2212\":[3,20],\"2213\":[3,25],\"2214\":[2,14],\"2215\":[2,43],\"2216\":[2,8],\"2217\":[3,8],\"2218\":[3,8],\"2219\":[2,36],\"2220\":[3],\"2221\":[3,51],\"2222\":[3,15],\"2223\":[2,19],\"2224\":[3,13],\"2225\":[2],\"2226\":[3,29],\"2227\":[5,25],\"2228\":[2],\"2229\":[3,30],\"2230\":[3,22],\"2231\":[3,21],\"2232\":[3,25],\"2233\":[3,28],\"2234\":[3,14],\"2235\":[3,24],\"2236\":[3,29],\"2237\":[3,19],\"2238\":[2],\"2239\":[3,43],\"2240\":[5,33],\"2241\":[4,29],\"2242\":[2,16],\"2243\":[1,26],\"2244\":[1,3],\"2245\":[3],\"2246\":[3],\"2247\":[2,16],\"2248\":[2,10],\"2249\":[2,7],\"2250\":[2],\"2251\":[2],\"2252\":[6,21],\"2253\":[5,8],\"2254\":[8,24],\"2255\":[2],\"2256\":[3,18],\"2257\":[2,25],\"2258\":[2],\"2259\":[4,21],\"2260\":[5,26],\"2261\":[4,3],\"2262\":[2],\"2263\":[2],\"2264\":[2],\"2265\":[2],\"2266\":[2],\"2267\":[2],\"2268\":[2],\"2269\":[3],\"2270\":[2],\"2271\":[2],\"2272\":[2],\"2273\":[2],\"2274\":[2],\"2275\":[2],\"2276\":[2,8],\"2277\":[2,13],\"2278\":[2,17],\"2279\":[2,21],\"2280\":[5,2],\"2281\":[5,2],\"2282\":[2,5],\"2283\":[2,20],\"2284\":[2,2],\"2285\":[3],\"2286\":[2],\"2287\":[3,6],\"2288\":[2,5],\"2289\":[2,15],\"2290\":[2,17],\"2291\":[2,20],\"2292\":[2,12],\"2293\":[2,3],\"2294\":[2,16],\"2295\":[3,4],\"2296\":[2,4],\"2297\":[3,56],\"2298\":[4,24],\"2299\":[3,42],\"2300\":[3,44],\"2301\":[5,4],\"2302\":[3,16],\"2303\":[3,44],\"2304\":[3,6],\"2305\":[3],\"2306\":[2],\"2307\":[2,6],\"2308\":[2,19],\"2309\":[2],\"2310\":[5,24],\"2311\":[4,23],\"2312\":[2,6],\"2313\":[2,6],\"2314\":[2,27],\"2315\":[2],\"2316\":[2,9],\"2317\":[4,7],\"2318\":[2,18],\"2319\":[2,40],\"2320\":[2],\"2321\":[3,34],\"2322\":[3,50],\"2323\":[3,25],\"2324\":[2,1],\"2325\":[3,84],\"2326\":[2,6],\"2327\":[3,36],\"2328\":[2,19],\"2329\":[3,43],\"2330\":[2,4],\"2331\":[3,6],\"2332\":[3,8],\"2333\":[3,46],\"2334\":[2,22],\"2335\":[2,2],\"2336\":[2,6],\"2337\":[2],\"2338\":[3,9],\"2339\":[2,4],\"2340\":[3,23],\"2341\":[2],\"2342\":[4,7],\"2343\":[4,20],\"2344\":[2,7],\"2345\":[2,22],\"2346\":[5,4],\"2347\":[2,3],\"2348\":[2,2],\"2349\":[3,63],\"2350\":[2,3],\"2351\":[3,19],\"2352\":[3,82],\"2353\":[3,21],\"2354\":[2,22],\"2355\":[3,95],\"2356\":[3,22],\"2357\":[6,10],\"2358\":[2,5],\"2359\":[3,5],\"2360\":[3,23],\"2361\":[2,3],\"2362\":[3,13],\"2363\":[2,4],\"2364\":[3,59],\"2365\":[3,76],\"2366\":[3,11],\"2367\":[2],\"2368\":[4,4],\"2369\":[4,4],\"2370\":[4,4],\"2371\":[2,15],\"2372\":[3,29],\"2373\":[3,41],\"2374\":[3,9],\"2375\":[3,10],\"2376\":[3,51],\"2377\":[3,58],\"2378\":[3,3],\"2379\":[2,1],\"2380\":[3,8],\"2381\":[4,3],\"2382\":[4,3],\"2383\":[2,11],\"2384\":[1,9],\"2385\":[2],\"2386\":[4,46],\"2387\":[4,61],\"2388\":[2,7],\"2389\":[4,3],\"2390\":[4,19],\"2391\":[2,44],\"2392\":[3],\"2393\":[2],\"2394\":[2,23],\"2395\":[2,3],\"2396\":[2,14],\"2397\":[2],\"2398\":[2],\"2399\":[2,3],\"2400\":[3,11],\"2401\":[2,5],\"2402\":[4,7],\"2403\":[3,9],\"2404\":[3,18],\"2405\":[3,118],\"2406\":[2],\"2407\":[3,40],\"2408\":[3,69],\"2409\":[2,81],\"2410\":[3],\"2411\":[2],\"2412\":[2],\"2413\":[4,6],\"2414\":[5,30],\"2415\":[2,3],\"2416\":[3,12],\"2417\":[2,9],\"2418\":[2,7],\"2419\":[2,25],\"2420\":[2,42],\"2421\":[1,13],\"2422\":[3,9],\"2423\":[4,4],\"2424\":[2,40],\"2425\":[2,24],\"2426\":[2,130],\"2427\":[2,36],\"2428\":[2,25],\"2429\":[3],\"2430\":[3],\"2431\":[2,13],\"2432\":[2,2],\"2433\":[2,14],\"2434\":[5,44],\"2435\":[5,69],\"2436\":[2,36],\"2437\":[2],\"2438\":[2,41],\"2439\":[2,34],\"2440\":[2,37],\"2441\":[2,40],\"2442\":[2,47],\"2443\":[6,38],\"2444\":[3],\"2445\":[2],\"2446\":[2,18],\"2447\":[2,21],\"2448\":[2,4],\"2449\":[2,16],\"2450\":[2,9],\"2451\":[2,2],\"2452\":[2,14],\"2453\":[2,7],\"2454\":[2,2],\"2455\":[2,16],\"2456\":[2,12],\"2457\":[2,15],\"2458\":[2],\"2459\":[3,7],\"2460\":[3,16],\"2461\":[4,5],\"2462\":[2],\"2463\":[2,10],\"2464\":[2,3],\"2465\":[3,8],\"2466\":[3,5],\"2467\":[3,13],\"2468\":[3,28],\"2469\":[1,14],\"2470\":[2,2],\"2471\":[2,2],\"2472\":[4,7],\"2473\":[4,5],\"2474\":[3,14],\"2475\":[2,16],\"2476\":[2],\"2477\":[2,2],\"2478\":[2,2],\"2479\":[2,10],\"2480\":[2],\"2481\":[3],\"2482\":[2,4],\"2483\":[3,22],\"2484\":[4,6],\"2485\":[4,10],\"2486\":[2,16],\"2487\":[3,11],\"2488\":[3],\"2489\":[3,16],\"2490\":[4,5],\"2491\":[3,4],\"2492\":[5,2],\"2493\":[3,11],\"2494\":[4,2],\"2495\":[4,23],\"2496\":[2],\"2497\":[1,7],\"2498\":[3,23],\"2499\":[3,10],\"2500\":[3,7],\"2501\":[4,4],\"2502\":[3,50],\"2503\":[2,13],\"2504\":[2,5],\"2505\":[3,14],\"2506\":[3,6],\"2507\":[3,19],\"2508\":[2],\"2509\":[2,8],\"2510\":[2,18],\"2511\":[2,15],\"2512\":[2,6],\"2513\":[2],\"2514\":[2,9],\"2515\":[2,3],\"2516\":[3,4],\"2517\":[2,7],\"2518\":[3,12],\"2519\":[2,4],\"2520\":[2,13],\"2521\":[3,4],\"2522\":[2,14],\"2523\":[2,20],\"2524\":[2,10],\"2525\":[2,14],\"2526\":[2,8],\"2527\":[3],\"2528\":[2],\"2529\":[1,18],\"2530\":[2,14],\"2531\":[2,29],\"2532\":[2,11],\"2533\":[2,11],\"2534\":[2,5],\"2535\":[3,4],\"2536\":[2,3],\"2537\":[2,31],\"2538\":[2,5],\"2539\":[2,3],\"2540\":[2,7],\"2541\":[2,3],\"2542\":[2,11],\"2543\":[2],\"2544\":[3,6],\"2545\":[3,6],\"2546\":[2,15],\"2547\":[3,10],\"2548\":[3,7],\"2549\":[3,3],\"2550\":[3,8],\"2551\":[3,22],\"2552\":[3,25],\"2553\":[3,35],\"2554\":[3,19],\"2555\":[3,11],\"2556\":[3,28],\"2557\":[3,6],\"2558\":[4,6],\"2559\":[2,8],\"2560\":[2,15],\"2561\":[2,5],\"2562\":[2,10],\"2563\":[3,20],\"2564\":[3,33],\"2565\":[2,4],\"2566\":[3,54],\"2567\":[3,15],\"2568\":[3,5],\"2569\":[2],\"2570\":[2,8],\"2571\":[2,16],\"2572\":[2,33],\"2573\":[2,6],\"2574\":[2,16],\"2575\":[2,18],\"2576\":[2,21],\"2577\":[2,29],\"2578\":[2,5],\"2579\":[2,4],\"2580\":[3],\"2581\":[2],\"2582\":[1,8],\"2583\":[2,25],\"2584\":[3,11],\"2585\":[3,12],\"2586\":[2],\"2587\":[1,7],\"2588\":[2,9],\"2589\":[2,24],\"2590\":[2,9],\"2591\":[2,1],\"2592\":[2,2],\"2593\":[2,2],\"2594\":[3],\"2595\":[2],\"2596\":[1,9],\"2597\":[2,37],\"2598\":[2,56],\"2599\":[2,5],\"2600\":[3,4],\"2601\":[2,25],\"2602\":[2,51],\"2603\":[2],\"2604\":[2,6],\"2605\":[2,6],\"2606\":[3,6],\"2607\":[2,5],\"2608\":[2],\"2609\":[3,20],\"2610\":[3,28],\"2611\":[2,6],\"2612\":[2,6],\"2613\":[3,14],\"2614\":[2,48],\"2615\":[2,8],\"2616\":[2],\"2617\":[2],\"2618\":[2,3],\"2619\":[3,4],\"2620\":[4,8],\"2621\":[2,19],\"2622\":[2],\"2623\":[3,29],\"2624\":[3,57],\"2625\":[2,26],\"2626\":[2,9],\"2627\":[1,11],\"2628\":[2,8],\"2629\":[2,8],\"2630\":[2,9],\"2631\":[2,8],\"2632\":[2,6],\"2633\":[3],\"2634\":[2,7],\"2635\":[2,10],\"2636\":[2,9],\"2637\":[5,7],\"2638\":[2,1],\"2639\":[2,12],\"2640\":[3,30],\"2641\":[2,16],\"2642\":[3,18],\"2643\":[2,4],\"2644\":[2],\"2645\":[2,12],\"2646\":[3,31],\"2647\":[1,25],\"2648\":[3,22],\"2649\":[3],\"2650\":[3],\"2651\":[2,8],\"2652\":[2,17],\"2653\":[2,8],\"2654\":[2,18],\"2655\":[3,46],\"2656\":[2,11],\"2657\":[3,6],\"2658\":[2,7],\"2659\":[2,15],\"2660\":[3,3],\"2661\":[3,29],\"2662\":[3,22],\"2663\":[2,12],\"2664\":[2,11],\"2665\":[2,16],\"2666\":[2],\"2667\":[2,18],\"2668\":[2,14],\"2669\":[3],\"2670\":[2],\"2671\":[2,9],\"2672\":[2,25],\"2673\":[2,6],\"2674\":[1,5],\"2675\":[2,14],\"2676\":[1,16],\"2677\":[2,6],\"2678\":[2,8],\"2679\":[2],\"2680\":[2,6],\"2681\":[2,6],\"2682\":[2,20],\"2683\":[2],\"2684\":[3,13],\"2685\":[3,21],\"2686\":[6,22],\"2687\":[2,5],\"2688\":[2,6],\"2689\":[3,14],\"2690\":[4,28],\"2691\":[2,4],\"2692\":[4,9],\"2693\":[3,19],\"2694\":[3,26],\"2695\":[3,4],\"2696\":[2,4],\"2697\":[2,38],\"2698\":[2,5],\"2699\":[1,11],\"2700\":[1,8],\"2701\":[2,27],\"2702\":[2,32],\"2703\":[1,10],\"2704\":[3,4],\"2705\":[1,11],\"2706\":[2,8],\"2707\":[3,11],\"2708\":[2],\"2709\":[2,12],\"2710\":[2,4],\"2711\":[3,6],\"2712\":[2,6],\"2713\":[2,3],\"2714\":[2,12],\"2715\":[2,12],\"2716\":[2,13],\"2717\":[2,20],\"2718\":[2,20],\"2719\":[2,20],\"2720\":[2,17],\"2721\":[2,13],\"2722\":[2,5],\"2723\":[2,6],\"2724\":[2,9],\"2725\":[1,18],\"2726\":[2,10],\"2727\":[2,2],\"2728\":[1,11],\"2729\":[3],\"2730\":[2],\"2731\":[2,22],\"2732\":[2,8],\"2733\":[2,26],\"2734\":[2,10],\"2735\":[2,8],\"2736\":[2,6],\"2737\":[2],\"2738\":[3,16],\"2739\":[3,8],\"2740\":[2],\"2741\":[2,23],\"2742\":[2],\"2743\":[3,21],\"2744\":[2,37],\"2745\":[2,5],\"2746\":[2],\"2747\":[2,8],\"2748\":[2,24],\"2749\":[2,11],\"2750\":[2,19],\"2751\":[2,6],\"2752\":[3],\"2753\":[2],\"2754\":[2,25],\"2755\":[2,13],\"2756\":[2,6],\"2757\":[2,1],\"2758\":[2,24],\"2759\":[2,8],\"2760\":[2,12],\"2761\":[2,11],\"2762\":[2],\"2763\":[2,22],\"2764\":[2,13],\"2765\":[2,13],\"2766\":[3,8],\"2767\":[3,8],\"2768\":[2,6],\"2769\":[2,5],\"2770\":[2,9],\"2771\":[2,20],\"2772\":[2,40],\"2773\":[2],\"2774\":[2,10],\"2775\":[2,10],\"2776\":[2],\"2777\":[3,27],\"2778\":[3,18],\"2779\":[3,27],\"2780\":[2,7],\"2781\":[3,104],\"2782\":[3,54],\"2783\":[3,5],\"2784\":[2],\"2785\":[2,16],\"2786\":[2,6],\"2787\":[2,10],\"2788\":[2,9],\"2789\":[2,7],\"2790\":[2,4],\"2791\":[2,11],\"2792\":[2],\"2793\":[3,11],\"2794\":[2,10],\"2795\":[3,10],\"2796\":[3,18],\"2797\":[2],\"2798\":[4,20],\"2799\":[4,34],\"2800\":[2,5],\"2801\":[3,11],\"2802\":[5,8],\"2803\":[3,9],\"2804\":[2,15],\"2805\":[2,32],\"2806\":[2,33],\"2807\":[2],\"2808\":[4,12],\"2809\":[3,10],\"2810\":[2,12],\"2811\":[2],\"2812\":[2,8],\"2813\":[2,5],\"2814\":[2,15],\"2815\":[2],\"2816\":[3,7],\"2817\":[3,5],\"2818\":[3,5],\"2819\":[2,5],\"2820\":[2,22],\"2821\":[2,6],\"2822\":[1,15],\"2823\":[2,15],\"2824\":[2],\"2825\":[2,22],\"2826\":[3,3],\"2827\":[2,4],\"2828\":[2],\"2829\":[2,18],\"2830\":[2,7],\"2831\":[2,2],\"2832\":[3],\"2833\":[2,3],\"2834\":[2],\"2835\":[2,7],\"2836\":[3,10],\"2837\":[1,14],\"2838\":[2,12],\"2839\":[2,13],\"2840\":[2],\"2841\":[2,6],\"2842\":[3,17],\"2843\":[3,16],\"2844\":[2,18],\"2845\":[2,11],\"2846\":[2,27],\"2847\":[1],\"2848\":[2,9],\"2849\":[2,16],\"2850\":[2,13],\"2851\":[2,6],\"2852\":[1,8],\"2853\":[3],\"2854\":[1,5],\"2855\":[2,12],\"2856\":[2,22],\"2857\":[2,14],\"2858\":[2,59],\"2859\":[2],\"2860\":[1,43],\"2861\":[1,7],\"2862\":[3],\"2863\":[1,4],\"2864\":[4,8],\"2865\":[2,13],\"2866\":[1,4],\"2867\":[2,7],\"2868\":[2,3],\"2869\":[2,7],\"2870\":[2,6],\"2871\":[2,5],\"2872\":[1,15],\"2873\":[1,8],\"2874\":[1,24],\"2875\":[1],\"2876\":[2,10],\"2877\":[2,16],\"2878\":[2,23],\"2879\":[2,24],\"2880\":[1,29],\"2881\":[3,5],\"2882\":[1,5],\"2883\":[2,6],\"2884\":[2,12],\"2885\":[2,13],\"2886\":[2,8],\"2887\":[1,9],\"2888\":[2,6],\"2889\":[2,7],\"2890\":[2,41],\"2891\":[1,2],\"2892\":[2,11],\"2893\":[2,32],\"2894\":[1,2],\"2895\":[2,11],\"2896\":[2,13],\"2897\":[2,4],\"2898\":[1,5],\"2899\":[2,14],\"2900\":[2,16],\"2901\":[2,30],\"2902\":[3,26],\"2903\":[2,14],\"2904\":[1,12],\"2905\":[2,9],\"2906\":[2,18],\"2907\":[2,39],\"2908\":[2,61],\"2909\":[1,14],\"2910\":[2,40],\"2911\":[2,16],\"2912\":[3,8],\"2913\":[1,14],\"2914\":[2,18],\"2915\":[2,26],\"2916\":[3,9],\"2917\":[3,5],\"2918\":[2,21],\"2919\":[3,15],\"2920\":[2,28],\"2921\":[3],\"2922\":[1,4],\"2923\":[4,9],\"2924\":[3,18],\"2925\":[3,39],\"2926\":[2,61],\"2927\":[1,3],\"2928\":[2,15],\"2929\":[2,4],\"2930\":[3,45],\"2931\":[4,8],\"2932\":[3,2],\"2933\":[2,8],\"2934\":[1,4],\"2935\":[2,25],\"2936\":[2,5],\"2937\":[1,3],\"2938\":[2,21],\"2939\":[2,4],\"2940\":[1,5],\"2941\":[2,11],\"2942\":[2,13],\"2943\":[3,9],\"2944\":[2,6],\"2945\":[3,6],\"2946\":[2,10],\"2947\":[1,3],\"2948\":[2,19],\"2949\":[2,22],\"2950\":[1,3],\"2951\":[2,22],\"2952\":[2,18],\"2953\":[1,24],\"2954\":[2,36],\"2955\":[2,18],\"2956\":[3,10],\"2957\":[2,43],\"2958\":[1,4],\"2959\":[2,25],\"2960\":[2,6],\"2961\":[3,15],\"2962\":[1,6],\"2963\":[2,76],\"2964\":[2,20],\"2965\":[1,16],\"2966\":[1,11],\"2967\":[3,10],\"2968\":[2,9],\"2969\":[1,3],\"2970\":[3],\"2971\":[2,22],\"2972\":[2,31],\"2973\":[3],\"2974\":[3],\"2975\":[2,50],\"2976\":[2,26],\"2977\":[2,52],\"2978\":[2,45],\"2979\":[2],\"2980\":[1,68],\"2981\":[2,17],\"2982\":[2,23],\"2983\":[1,60],\"2984\":[1,52],\"2985\":[1,6],\"2986\":[2,80],\"2987\":[2,63],\"2988\":[1,10],\"2989\":[3],\"2990\":[1,5],\"2991\":[4,58],\"2992\":[2,74],\"2993\":[1,77],\"2994\":[1,12],\"2995\":[1,4],\"2996\":[2,35],\"2997\":[2,83],\"2998\":[1,3],\"2999\":[1,25],\"3000\":[1,76],\"3001\":[1],\"3002\":[2,34],\"3003\":[2,72],\"3004\":[1,1],\"3005\":[2,28],\"3006\":[2,75],\"3007\":[1,13],\"3008\":[1,76],\"3009\":[1,9],\"3010\":[1,67],\"3011\":[1,12],\"3012\":[1,6],\"3013\":[1,24],\"3014\":[2,39],\"3015\":[2,80],\"3016\":[4,17],\"3017\":[1,4],\"3018\":[4,38],\"3019\":[2,93],\"3020\":[2],\"3021\":[3,11],\"3022\":[2,6],\"3023\":[2,2],\"3024\":[2,15],\"3025\":[2,4],\"3026\":[3,13],\"3027\":[3,29],\"3028\":[2,14],\"3029\":[2,4],\"3030\":[2],\"3031\":[2,31],\"3032\":[2,29],\"3033\":[2,41],\"3034\":[2,36],\"3035\":[4,6],\"3036\":[2,16],\"3037\":[2,10],\"3038\":[3,4],\"3039\":[2],\"3040\":[2,19],\"3041\":[2,8],\"3042\":[2,7],\"3043\":[3,13],\"3044\":[3,22],\"3045\":[2],\"3046\":[2,6],\"3047\":[2,26],\"3048\":[2,47],\"3049\":[2,32],\"3050\":[2,22],\"3051\":[2,3],\"3052\":[3,7],\"3053\":[3,21],\"3054\":[2,7],\"3055\":[2,15],\"3056\":[4,17],\"3057\":[2,24],\"3058\":[3],\"3059\":[2],\"3060\":[2,24],\"3061\":[2,13],\"3062\":[2,8],\"3063\":[2,7],\"3064\":[2,8],\"3065\":[2,3],\"3066\":[2,5],\"3067\":[2,25],\"3068\":[2,7],\"3069\":[3,10],\"3070\":[2],\"3071\":[2,20],\"3072\":[2,16],\"3073\":[3,27],\"3074\":[3,18],\"3075\":[2,11],\"3076\":[3,34],\"3077\":[2,9],\"3078\":[3,13],\"3079\":[2,10],\"3080\":[2,12],\"3081\":[2,23],\"3082\":[2,34],\"3083\":[2,15],\"3084\":[2,12],\"3085\":[2],\"3086\":[2,7],\"3087\":[2,8],\"3088\":[3],\"3089\":[2],\"3090\":[2,16],\"3091\":[2,5],\"3092\":[2,11],\"3093\":[2,14],\"3094\":[2],\"3095\":[2,23],\"3096\":[2,26],\"3097\":[2,32],\"3098\":[2],\"3099\":[2,18],\"3100\":[2,24],\"3101\":[2,13],\"3102\":[2,29],\"3103\":[3,13],\"3104\":[2],\"3105\":[2,12],\"3106\":[2,15],\"3107\":[2,25],\"3108\":[2],\"3109\":[2,35],\"3110\":[2,7],\"3111\":[3,21],\"3112\":[2,14],\"3113\":[3,17],\"3114\":[3,14],\"3115\":[2,3],\"3116\":[3,13],\"3117\":[3,10],\"3118\":[2,20],\"3119\":[3,3],\"3120\":[3,10],\"3121\":[3,13],\"3122\":[2,17],\"3123\":[3],\"3124\":[2],\"3125\":[2,18],\"3126\":[2,14],\"3127\":[2,20],\"3128\":[2,13],\"3129\":[2,1],\"3130\":[3,13],\"3131\":[3,21],\"3132\":[3,19],\"3133\":[2,5],\"3134\":[2,2],\"3135\":[2,2],\"3136\":[2],\"3137\":[2,11],\"3138\":[2,10],\"3139\":[2,14],\"3140\":[2,10],\"3141\":[2],\"3142\":[2,81],\"3143\":[2,22],\"3144\":[2,22],\"3145\":[2,8],\"3146\":[2,7],\"3147\":[2,7],\"3148\":[2,6],\"3149\":[2,6],\"3150\":[2,35],\"3151\":[2,6],\"3152\":[2,14],\"3153\":[2,45],\"3154\":[3,23],\"3155\":[2,5],\"3156\":[3,97],\"3157\":[2,17],\"3158\":[2,4],\"3159\":[2,96],\"3160\":[2,66],\"3161\":[2,37],\"3162\":[3],\"3163\":[2],\"3164\":[2,13],\"3165\":[2,24],\"3166\":[2,2],\"3167\":[2],\"3168\":[2,43],\"3169\":[2,10],\"3170\":[2],\"3171\":[2,11],\"3172\":[2,15],\"3173\":[2,19],\"3174\":[3,5],\"3175\":[3,14],\"3176\":[2,2],\"3177\":[3,2],\"3178\":[3,8],\"3179\":[2,13],\"3180\":[2,11],\"3181\":[2],\"3182\":[3,11],\"3183\":[3,5],\"3184\":[3,25],\"3185\":[2],\"3186\":[5,25],\"3187\":[5,38],\"3188\":[3,11],\"3189\":[3,24],\"3190\":[2,37],\"3191\":[3],\"3192\":[2],\"3193\":[2,32],\"3194\":[2,16],\"3195\":[3,15],\"3196\":[2,13],\"3197\":[3,21],\"3198\":[2,67],\"3199\":[2,7],\"3200\":[2,8],\"3201\":[2,27],\"3202\":[2,5],\"3203\":[2,10],\"3204\":[2,13],\"3205\":[3,4],\"3206\":[2,8],\"3207\":[2,14],\"3208\":[2],\"3209\":[2,13],\"3210\":[2,20],\"3211\":[3],\"3212\":[3,14],\"3213\":[3,14],\"3214\":[2,17],\"3215\":[2,3],\"3216\":[3,2],\"3217\":[3,3],\"3218\":[2,3],\"3219\":[2,5],\"3220\":[2,3],\"3221\":[2,6],\"3222\":[2,17],\"3223\":[2,6],\"3224\":[2,19],\"3225\":[2,27],\"3226\":[2,3],\"3227\":[2,2],\"3228\":[3,5],\"3229\":[2,21],\"3230\":[3],\"3231\":[1],\"3232\":[3,15],\"3233\":[4,8],\"3234\":[2,14],\"3235\":[1],\"3236\":[2,21],\"3237\":[2,25],\"3238\":[1,2],\"3239\":[1,2],\"3240\":[2,2],\"3241\":[3],\"3242\":[2,11],\"3243\":[2,16],\"3244\":[1],\"3245\":[1],\"3246\":[1],\"3247\":[1],\"3248\":[1],\"3249\":[1],\"3250\":[1],\"3251\":[1],\"3252\":[1],\"3253\":[2],\"3254\":[2],\"3255\":[2],\"3256\":[2],\"3257\":[2],\"3258\":[2],\"3259\":[2],\"3260\":[2],\"3261\":[2],\"3262\":[2],\"3263\":[2],\"3264\":[2],\"3265\":[2],\"3266\":[2],\"3267\":[3],\"3268\":[2],\"3269\":[2],\"3270\":[2],\"3271\":[2],\"3272\":[2],\"3273\":[2]},\"averageFieldLength\":[2.3973732437385467,16.916939895913803],\"storedFields\":{\"0\":{\"h\":\"指南\",\"t\":[\"提示\",\"当前处于建设阶段\"]},\"1\":{\"h\":\"   快捷笔记\",\"t\":[\"什么是快捷笔记\",\"快捷笔记就是对知识的精华总结。当掌握某个知识点后，就创建他有关的快捷笔记，之后无论复习还是使用，直接查看快捷笔记。\",\"快捷笔记的命名为：\"]},\"2\":{\"h\":\"项目初始化\"},\"3\":{\"h\":\"Java\"},\"4\":{\"h\":\"框架\"},\"5\":{\"h\":\"微服务\"},\"6\":{\"h\":\"SQL\"},\"7\":{\"h\":\"服务端\"},\"8\":{\"h\":\"DevTool\"},\"9\":{\"h\":\"技术栈导航\"},\"10\":{\"h\":\"站点内容地图\",\"t\":[\"编号顺序：0~9-a~z\",\"指南：【编号0】\",\"Java：【编号1】 \",\"JavaSE【编号11】\",\"JavaWeb【编号12】\",\"JVM【编号13】\",\"内置资源\",\"IDEA\",\"框架：【编号2】 \",\"Maven\",\"Spring\",\"SpringMVC\",\"MyBatis\",\"MyBatisPlus\",\"SpringBoot\",\"微服务：【编号3】 \",\"微服务架构 SpringCloud & Alibaba\",\"Nacos\",\"Gateway\",\"OpenFeign\",\"Seata\",\"Sentinel\",\"SQL：【编号4】 \",\"MySQL\",\"Redis\",\"MongoDB\",\"Memcache\",\"ES\",\"服务端：【编号5】 \",\"Linux\",\"Shell\",\"Nginx\",\"Docker\",\"轮子：【编号6】 \",\"若依rouyi\",\"dev：【编号7】 \",\"项目开发手册\",\"项目：【编号8】 \",\"瑞吉外卖\",\"其他：【编号9】 \",\"Git\",\"设计模式\",\"正则\",\"swagger\"]},\"11\":{\"h\":\"Java学习顺序\",\"t\":[\"提示\",\"仅包含Java相关的，其他知识，如MySQL，不再这里提及\",\"Java SE\",\"JVM： 可略过，回头再学，纯理论知识\",\"JavaWeb：理解为主 \",\"必学：jdbc、Tomcat、Servlet（Fileter & Listener）、环境搭建、WEB架构、JSON\",\"可选：JSP、JSTL、XML、会话技术\",\"Maven：先学基本用法，复杂配置等学完Spring系列再研究\",\"Spring全家桶 \",\"Spring： 理解为主\",\"SpringMVC\",\"MyBatis：包括MyBatisPlus \",\"需要前置知识：MySQL\",\"SpringBoot：重点实践 \",\"SpringBoot会整合很多技术，这些技术你不会就没法整合，如Redis\",\"其他Spring组件：用到了再学\",\"微服务：（学这个之前了解下项目架构） \",\"常用：Gateway、Nacos、OpenFeign、Seata、Sentinel\",\"已过时：Eureka、Ribbon、LoadBalancer、Bus、Config、Stream、Hystrix\",\"中间件 \",\"消息队列：RabbitMQ（最常用）\"]},\"12\":{\"h\":\"项目\",\"t\":[\"提示\",\"当前处于建设阶段\"]},\"13\":{\"h\":\"     ->Map\",\"t\":[\"提示\",\"文档迁移中...\"]},\"14\":{\"h\":\"     ->Map\",\"t\":[\"提示\",\"文档迁移中...\"]},\"15\":{\"h\":\"     ->Map\",\"t\":[\"提示\",\"文档迁移中...\"]},\"16\":{\"h\":\"     ->Map\",\"t\":[\"提示\",\"文档迁移中...\"]},\"17\":{\"h\":\"     ->Map\",\"t\":[\"提示\",\"文档迁移中...\"]},\"18\":{\"h\":\"     ->Map\",\"t\":[\"提示\",\"文档迁移中...\"]},\"19\":{\"h\":\"     ->Map\",\"t\":[\"提示\",\"文档迁移中...\"]},\"20\":{\"h\":\"1. 软件开发介绍\"},\"21\":{\"h\":\"1. 软件开发流程\",\"t\":[\"1-1\"]},\"22\":{\"h\":\"2. 角色分工\",\"t\":[\"项目经理: 对整个项目负责，任务分配、把控进度\",\"产品经理: 进行需求调研，输出需求调研文档、产品原型等\",\"UI设计师: 根据产品原型输出界面效果图\",\"架构师: 项目整体架构设计、技术选型等\",\"开发工程师: 代码实现\",\"测试工程师: 编写测试用例，输出测试报告\",\"运维工程师: 软件环境搭建、项目上线\"]},\"23\":{\"h\":\"3. 软件环境\",\"t\":[\"开发环境(development): 开发人员在开发阶段使用的环境，一般外部用户无法访问\",\"测试环境(testing): 专门给测试人员使用的环境，用于测试项目，一般外部用户无法访问\",\"生产环境(production): 即线上环境，正式提供对外服务的环境\"]},\"24\":{\"h\":\"     ->Map\",\"t\":[\"提示\",\"文档迁移中\"]},\"25\":{\"h\":\"   ->Map\",\"t\":[\"提示\",\"文档迁移中\"]},\"26\":{\"h\":\"   ->Map\",\"t\":[\"提示\",\"文档迁移中...\"]},\"27\":{\"h\":\"     ->Map\",\"t\":[\"提示\",\"文档迁移中\"]},\"28\":{\"h\":\"               SpringBoot\",\"t\":[\"提示\",\"文档迁移中...\"]},\"29\":{\"h\":\"     ->Map\",\"t\":[\"基础 \",\"介绍\",\"创建项目\",\"项目解析\",\"基本配置文件\",\"yaml配置语法\",\"实用功能 \",\"SSM开发案例\",\"热部署\",\"高级配置\",\"代码测试\",\"基本运维 \",\"打包与发布\",\"配置文件设计\",\"多环境开发\",\"log 日志\",\"监控\",\"集成Data \",\"数据层技术\",\"MySQL：JDBC、Druid\",\"MyBatis：包含MyBatis Plus\",\"Redis\",\"MongoDB\",\"Memcache\",\"ES\",\"集成其他技术 \",\"缓存技术\",\"消息队列\",\"底层原理 \",\"bean加载方式\",\"自动配置\",\"启动流程\",\"其他\"]},\"30\":{\"h\":\"    ->Map\",\"t\":[\"提示\",\"文档迁移中\"]},\"31\":{\"h\":\"学习项目\",\"t\":[\"提示\",\"当前处于建设阶段\"]},\"32\":{\"h\":\"->Map\"},\"33\":{\"h\":\"JDK 常用类\",\"t\":[\"String\",\"StringBuffer\",\"时间\",\"比较器\",\"数学与数值\",\"IO类\",\"反射类\",\"其他内置类\"]},\"34\":{\"h\":\"JDK.util包\",\"t\":[\"Scanner\",\"Arrays\",\"Collection+\",\"List&Map\",\"Functional\",\"正则\"]},\"35\":{\"h\":\"Other\",\"t\":[\"常用注解\"]},\"36\":{\"h\":\"->Map\",\"t\":[\"提示\",\"内容正在迁移中\"]},\"37\":{\"h\":\"   ->Map\",\"t\":[\"提示\",\"内容正在迁移中\"]},\"38\":{\"h\":\"  ->Map\",\"t\":[\"提示\",\"内容正在迁移中\"]},\"39\":{\"h\":\"->Map\",\"t\":[\"提示\",\"内容正在迁移中\"]},\"40\":{\"h\":\"git\",\"t\":[\"提示\",\"当前处于建设阶段\"]},\"41\":{\"h\":\"     ->Map\",\"t\":[\"提示\",\"文档迁移中...\"]},\"42\":{\"h\":\"设计模式\",\"t\":[\"提示\",\"当前处于建设阶段\"]},\"43\":{\"h\":\"     ->Map\",\"t\":[\"提示\",\"文档迁移中...\"]},\"44\":{\"h\":\"正则\",\"t\":[\"提示\",\"当前处于建设阶段\"]},\"45\":{\"h\":\"     ->Map\",\"t\":[\"提示\",\"文档迁移中...\"]},\"46\":{\"h\":\"Swagger\",\"t\":[\"提示\",\"当前处于建设阶段\"]},\"47\":{\"h\":\"     ->Map\",\"t\":[\"提示\",\"文档迁移中...\"]},\"48\":{\"h\":\"          Docker\",\"t\":[\"提示\",\"当前处于建设阶段\"]},\"49\":{\"h\":\"     ->Map\",\"t\":[\"提示\",\"文档迁移中...\"]},\"50\":{\"h\":\"                    Linux\",\"t\":[\"提示\",\"当前处于建设阶段\"]},\"51\":{\"h\":\"     ->Map\",\"t\":[\"提示\",\"文档迁移中...\"]},\"52\":{\"h\":\"                nginx\",\"t\":[\"提示\",\"当前处于建设阶段\"]},\"53\":{\"h\":\"     ->Map\",\"t\":[\"提示\",\"文档迁移中...\"]},\"54\":{\"h\":\"             shell\",\"t\":[\"提示\",\"当前处于建设阶段\"]},\"55\":{\"h\":\"     ->Map\",\"t\":[\"提示\",\"文档迁移中...\"]},\"56\":{\"h\":\"ElasticSearch\",\"t\":[\"提示\",\"文档迁移中...\"]},\"57\":{\"h\":\"     ->Map\",\"t\":[\"提示\",\"文档迁移中...\",\"ES入门 \",\"ES介绍\",\"安装\",\"ES基本操作 \",\"RESTFul+Postman+数据格式\",\"HTTP操作 \",\"索引操作\",\"文档操作\",\"映射操作\",\"高级查询\",\"Java API \",\"创建项目\",\"索引操作\",\"文档操作\",\"高级查询\",\"ES环境 \",\"概念\",\"Windows集群\",\"Linux单机\",\"Linux集群\",\"ES进阶 \",\"核心概念、系统架构\",\"分布式集群\",\"路由计算\",\"分片控制、分片原理\",\"文档分析\",\"文档处理\",\"ES集成 \",\"SpringData集成\",\"Spark Streaming集成\",\"Flink集成\",\"ES优化 \",\"硬件\",\"分片策略\",\"路由选择\",\"写入速度优化\",\"内存设置\",\"重要配置\",\"ES面试题\",\"ES8\"]},\"58\":{\"h\":\"    Memcache\",\"t\":[\"相关信息\",\"这个目前不太流行了，暂时不做整理了。\\n等用到了再说。\"]},\"59\":{\"h\":\"     ->Map\",\"t\":[\"相关信息\",\"这个目前不太流行了，暂时不做整理了。\\n等用到了再说。\"]},\"60\":{\"h\":\"    MongoDB\",\"t\":[\"Line\",\"当前MongoDB版本为 6.0.5\",\"官网文档[没有中文]\",\"中文文档[翻译很烂]\",\"内容说明\",\"MongoDB并非很流行的技术，当前找不到太多相关中文资料，目前能找到的中文资料版本都在4.0左右，严重落后现有版本，很多规则和内置的API都跟当前版本不同。\",\"本笔记是以6.0.5版本为基础的，因为找不到好的资料，所以没有深入探索复杂内容。\",\"基础操作可以保证正确性，本人都经过验证了，集群等复杂操作只能保证尽量正确。\"]},\"61\":{\"h\":\"     ->Map\",\"t\":[\"Line\",\"当前MongoDB版本为 6.0.5\",\"官网文档[没有中文]\",\"中文文档[翻译很烂]\",\"内容说明\",\"MongoDB并非很流行的技术，当前找不到太多相关中文资料，目前能找到的中文资料版本都在4.0左右，严重落后现有版本，很多规则和内置的API都跟当前版本不同。\",\"本笔记是以6.0.5版本为基础的，因为找不到好的资料，所以没有深入探索复杂内容。\",\"基础操作可以保证正确性，本人都经过验证了，集群等复杂操作只能保证尽量正确。\"]},\"62\":{\"h\":\"         MySQL\",\"t\":[\"提示\",\"文档迁移中...\"]},\"63\":{\"h\":\"     ->Map\",\"t\":[\"提示\",\"文档迁移中...\"]},\"64\":{\"h\":\"        Redis\",\"t\":[\"提示\",\"文档迁移中...\"]},\"65\":{\"h\":\"     ->Map\",\"t\":[\"提示\",\"文档迁移中...\"]},\"66\":{\"h\":\"1-1. 介绍\",\"t\":[\"重要性\",\"SpringBoot是Java开发必备的，是重要性第一位的框架，非常重要。\"]},\"67\":{\"h\":\"1. 简介\",\"t\":[\"SpringBoot是由Pivotal团队提供的全新框架，其设计目的是用来简化Spring应用的初始搭建以及开发过程。 PS：Spring系列框架的配置和依赖太复杂了，SpringBoot对它们进行了非常大的简化。\"]},\"68\":{\"h\":\"2. SpringBoot的特点\",\"t\":[\"简化依赖管理\",\"简化常用工程相关配置\",\"内置服务器\",\"...\"]},\"69\":{\"h\":\"3. 需要学习的内容\",\"t\":[\"了解SpringBoot开发流程，能够基于SpringBoot实现基础SSM框架整合\",\"掌握各式各样的第三方技术与SpringBoot整合的方案\",\"理解SpringBoot底层\",\"基于原理理解基础上，实现自主研发基于SpringBoot整合任意技术的开发方式\"]},\"70\":{\"h\":\"1-2. 创建项目\",\"t\":[\"提示\",\"这里采用的是IDEA里的Spring Initializr 创建的工程。\",\"需要前置知识：Maven。\"]},\"71\":{\"h\":\"1. Spring Initializr\",\"t\":[\"创建工程（new Project）时选择 Spring Initializr。\",\"1-2-1\",\"选项解释\",\"Server URL：SpringBoot项目构建是需要联网的，该URL就是要连接的网址，默认是官网。\",\"Name：项目（工程或模块）的名字\",\"Location：项目在硬盘上的位置\",\"Language：语言，选Java就行\",\"Type：选Maven就行\",\"Group / Artifact / Package name：Maven的包信息\",\"Project JDK：JDK版本，注意版本适配\",\"Java：Project SDK的版本要与Java处的SDK版本一致。\",\"Packaging：打包方式选择Jar，即使是Web工程。\"]},\"72\":{\"h\":\"2. 配置工程\",\"t\":[\"接上一步，点击 NEXT ，进行工程（或模块）的配置。\",\"1-2-2\",\"在这里配置SpringBoot版本，和需要添加的依赖，具体如下：\",\"Spring Boot：选择版本，默认是最新的稳定版，要根据项目的其他组件依赖进行选择 \",\"比如SpringCloud alibaba最新的稳定版需要的是SpringBoot 2.7，而默认的版本是3.0.0\",\"Dependencies：这里可以选择项目所需的一些依赖，比如Lombok \",\"项目创建后是可以手动添加依赖的，这里不用纠结\",\"Addeed dependencies：已经勾选的依赖，可以点X取消。\",\"配置完后，点击 Finish 项目就创建成功了。\"]},\"73\":{\"h\":\"3. 网络问题\",\"t\":[\"SpringBoot项目是需要联网创建的，默认网址是：start.spring.io如果网络不通畅，可以选择其他方式创建，或者使用国内镜像。\",\"切换阿里云镜像\",\"地址：https://start.aliyun.com\",\"1-2-3\"]},\"74\":{\"h\":\"4. 构建结果\",\"t\":[\"自动构建了项目的目录，如下：\",\"1-2-4\",\"目录解读\",\"BolgApplication：核心类，用来启动SpringBoot项目\",\"application.properties：核心配置文件 \",\"不过后续使用时会采用yaml格式的配置文件\",\"pom：核心文件，确认了SpringBoot的依赖（SpringBoot程序包含的基础文件）\",\"test：测试目录，SpringBoot默认集成了Unit\",\"无用的文件：HELP.md 、mvnw、mvnw.cmd\"]},\"75\":{\"h\":\"5. 注意事项\"},\"76\":{\"h\":\"5.1 pom.xml\",\"t\":[\"pom.xml中的spring-boot-maven-plugin是没有指定version的，使用的是IDEA默认的version，可能与SpringBoot的版本号对不上导致无法引入报错。\",\"1-2-5\",\"解决方案\",\"可以手动指定版本号（与SpringBoot的版本号一样）。\",\"<plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <version>2.7.10</version> </plugin> </plugins> \"]},\"77\":{\"h\":\"5.2 启动类\",\"t\":[\"SpringBoot的启动类在项目中的位置是固定的，确保启动类与直接在“项目包”的目录下\",\"即：启动类与三层架构放在同一级，如果不这样就无法找到启动类，无法启动项目。\"]},\"78\":{\"h\":\"5.3 依赖版本\",\"t\":[\"创建项目的过程中，勾选依赖时无法指定版本，想修改版本需要在项目构建完后，在pom.xml中进行设置。\"]},\"79\":{\"h\":\"6. 隐藏无用的文件\",\"t\":[\"创建SpringBoot会产生很多无意义的文件，影响目录观感。 每次手动删太麻烦，可以使用IDEA的设置进行自动隐藏。\",\"Setting → File Types → Ignored Files and Folders\",\"输入要隐藏的文件名，支持*号通配符回车确认添加\",\"注意：不要隐藏.idea文件\"]},\"80\":{\"h\":\"7. 其他方式创建SpringBoot项目\"},\"81\":{\"h\":\"7.1 使用官网创建SpringBoot项目\",\"t\":[\"打开SpringBoot 官网，选择Quickstart Your Project，或者直接输入：ttps://start.spring.io/\",\"创建工程，并保存项目（步骤同IDEA）\",\"导入项目：创建完成后，会自动下载一个项目压缩包，解压项目，通过IDE导入项目即可。\"]},\"82\":{\"h\":\"7.2 手动创建项目\",\"t\":[\"前提：Maven已经下载好了所需的依赖。\",\"核心：pom.xml和启动类需要手动进行创建。\\n手动创建一个Maven工程，手动编辑pom.xml和创建启动类\\n文件内容和自动创建的一样。\"]},\"83\":{\"h\":\"1-3. 项目解析\"},\"84\":{\"h\":\"Ⅰ. 使用SpringBoot\",\"t\":[\"提示\",\"创建好SpringBoot项目后，就可以使用SpringBoot进行开发了。\"]},\"85\":{\"h\":\"1. 创建Controller\",\"t\":[\"开发一个控制器类，在项目包下创建controller包，并创建一个Rest风格的Controller。\",\"@RestController @RequestMapping(\\\"/test\\\") public class TestController { @GetMapping public String getIt(){ System.out.println(\\\"hello:boot_introduction_1\\\"); return \\\"hello:boot_introduction_1\\\"; } } \"]},\"86\":{\"h\":\"2. 启动项目\",\"t\":[\"右键，运行启动类，启动SpringBoot项目，启动结果如下：\",\"1-3-1\"]},\"87\":{\"h\":\"3. 访问Servlet\",\"t\":[\"使用浏览器访问：localhost:8080/test\",\"TestController类的getIt方法被成功执行，命令行打印出了指定的文本，浏览器也返回了指定的文本。\"]},\"88\":{\"h\":\"4. SpringBoot做了什么\"},\"89\":{\"h\":\"5. 总结\",\"t\":[\"项目搭建完后，所有配置文件都不需要管，自动创建好了（采用的默认配置）。 同时Tomcat也不用进行配置，直接可以使用内置的Tomcat。\"]},\"90\":{\"h\":\"Ⅱ. 统一依赖管理\",\"t\":[\"项目开发需要非常多的包，这些包的版本配置非常麻烦，要保证效果最佳且没有bug。\"]},\"91\":{\"h\":\"1. Maven pom\",\"t\":[\"在使用Maven开发时，可以使用父工程的pom.xml对所有项目的依赖进行统一管理。\",\"父工程规定项目所需依赖的版本，子项目手动引入所需的依赖（不用指定版本）并安装，版本采用父类中的版本。\"]},\"92\":{\"h\":\"2. SpringBoot 中的 pom\",\"t\":[\"在SpringBoot项目的bom.xml中，所有的依赖都是没有版本的。他们的版本由SpringBoot项目内置的父工程来进行管理。\"]},\"93\":{\"h\":\"2.1 pox.xml的parent\",\"t\":[\"如下：工程的pom竟然也有parent，该parent就是SpringBoot内置的专门用来管理依赖的父pom。\",\"<parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.7.9</version> <relativePath/> <!-- lookup parent from repository --> </parent> \"]},\"94\":{\"h\":\"2.2 pring-boot-starter-parent\",\"t\":[\"ctrl + 左键 点击parent的artifactId，就可以查看该文件（spring-boot-starter-parent-2.7.9.pom），如下，该文件还有一个父工程。\",\"<parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-dependencies</artifactId> <version>2.7.9</version> </parent> \"]},\"95\":{\"h\":\"2.3 spring-boot-dependencies\",\"t\":[\"同样进入该文件，观察该文件，截取如下：\",\"... <!--文件坐标--> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-dependencies</artifactId> <version>2.7.9</version> <packaging>pom</packaging> ... <!--变量：依赖的版本号--> <properties> <activemq.version>5.16.6</activemq.version> <antlr2.version>2.7.7</antlr2.version> <appengine-sdk.version>1.9.98</appengine-sdk.version> <artemis.version>2.19.1</artemis.version> <aspectj.version>1.9.7</aspectj.version> <assertj.version>3.22.0</assertj.version> ... </properties> <!--依赖管理：包含了几乎所有开发中可能用到的依赖--> <dependencyManagement> <dependencies> <dependency> <groupId>org.apache.activemq</groupId> <artifactId>activemq-amqp</artifactId> <version>${activemq.version}</version> </dependency> <dependency> <groupId>org.apache.activemq</groupId> <artifactId>activemq-blueprint</artifactId> <version>${activemq.version}</version> </dependency> <dependency> <groupId>org.apache.activemq</groupId> <artifactId>activemq-broker</artifactId> <version>${activemq.version}</version> </dependency> <dependency> <groupId>org.apache.activemq</groupId> <artifactId>activemq-camel</artifactId> <version>${activemq.version}</version> </dependency> ... </dependencies> </dependencyManagement> \"]},\"96\":{\"h\":\"4. SpringBoot依赖管理总结\",\"t\":[\"SpringBoot已经将所有的项目依赖的最佳版本组合给提前设置好了，这个文件存放在spring-boot-dependencies-2.7.9.pom中。\",\"我们自己创建的SpringBoot项目，pom文件会自动将继承spring-boot-starter-parent-2.7.4.pom并间接继承spring-boot-dependencies-2.7.4.pom\",\"此时，SpringBoot依赖的版本就已经确认了，除非手动在pom.xml中指定某个依赖的版本，不然就是采用内置父工程的版本。\",\"在创建SpringBoot项目时，只指定了SpringBoot的版本，依赖的版本完全取决于SpringBoot的版本，版本组合是最佳的，一般不用手动调整。\"]},\"97\":{\"h\":\"5. 注意事项\",\"t\":[\"SpringBoot的Parent并非包含了所有依赖的坐标，只是包含了常用依赖的坐标\",\"实际开发时仅书写GAV中的G和A，V由SpringBoot提供，除非SpringBoot未提供对应版本 \",\"或者遇到了特殊的版本bug\"]},\"98\":{\"h\":\"Ⅲ. starter\"},\"99\":{\"h\":\"1. 什么是starter\",\"t\":[\"SpringBoot中常见的依赖类型，该类型依赖出现的目的是减少依赖配置的数量。\",\"1个starter往往包含了若干个相关联的依赖包。在进行项目开发时，需要什么技术，就会导入对应的starter，starter内部会包含很多依赖包的依赖信息。\",\"如下：点击spring-boot-starter-web就会打开一个包含所有依赖信息的文件：\",\"<dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter</artifactId> <version>2.7.9</version> <scope>compile</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-json</artifactId> <version>2.7.9</version> <scope>compile</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <version>2.7.9</version> <scope>compile</scope> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-web</artifactId> <version>5.3.25</version> <scope>compile</scope> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-webmvc</artifactId> <version>5.3.25</version> <scope>compile</scope> </dependency> </dependencies> \",\"start是可以嵌套的。\"]},\"100\":{\"h\":\"2. 意义\",\"t\":[\"之前开发某类项目，要用到一堆依赖，这里只需要几个Starter就搞定了。\",\"每个不同的starter根据功能不同，通常包含多个依赖坐标，使用starter可以实现快速配置的效果，达到简化配置的目的。\"]},\"101\":{\"h\":\"3. starter与parent\",\"t\":[\"parent：进行依赖管理，预设好了几乎所有依赖的版本 \",\"目的：统一版本管理，设置最佳版本组合。\",\"starter：当前项目具体引入的依赖合集。 \",\"目的：减少pom.xml中的配置项\"]},\"102\":{\"h\":\"Ⅳ. 引导类\"},\"103\":{\"h\":\"引导类：XxxApplication\",\"t\":[\"SpringBoot的引导类是Boot工程的执行入口，运行main方法就可以启动项目，引导类的类名随意（一般为XxxApplication）。\",\"@SpringBootApplication public class AifaceApplication { public static void main(String[] args) { SpringApplication.run(AifaceApplication.class, args); } } \"]},\"104\":{\"h\":\"2. 容器\",\"t\":[\"代码 SpringApplication.run(BootIntroduction1Application.class, args); 执行后，返回值为：ConfigurableApplicationContext。\",\"ConfigurableApplicationContext就是一个IOC容器。\",\"测试使用容器\",\"@SpringBootApplication public class BootIntroduction1Application { public static void main(String[] args) { ConfigurableApplicationContext ctx = SpringApplication.run(BootIntroduction1Application.class, args); TestController bean = ctx.getBean(TestController.class); System.out.prinln(bean);//成功的获取了bean } } \"]},\"105\":{\"h\":\"3. @SpringBootApplication\",\"t\":[\"该引导类是靠@SpringBootApplication配置生效的。 该注解的功能：扫描bean，读取配置，开启IOC容器。\",\"扫描的包\",\"扫描的包是引导类所在的包（如:com.cybercell.blog）。\",\"因此：引导类需要放到项目包中，不要放入组件包。\"]},\"106\":{\"h\":\"4. 总结\",\"t\":[\"引导类的意义就是初始化Spring容器，扫描引导类所在包，将所有的bean纳入IOC管理。\"]},\"107\":{\"h\":\"Ⅴ. 辅助功能\",\"t\":[\"非SpringBoot核心功能，按需加载，如常用的内嵌Tomcat。\"]},\"108\":{\"h\":\"1. 内嵌Tomcat\",\"t\":[\"SpringBoot中内嵌了一个Tomcat服务器。Tomcat服务器代码也是java写的，SpringBoot将Tomcat功能抽取出来封装到了一个对象，并交给了Spring的IOC容器。因此就可以内嵌Tomcat了。\"]},\"109\":{\"h\":\"1.1 Tomcat依赖的位置\",\"t\":[\"pom.xml:spring-boot-starter-web -> spring-boot-starter-web-2.7.9.pom：spring-boot-starter-tomcat\"]},\"110\":{\"h\":\"1.2 不使用内嵌服务器\",\"t\":[\"注解掉spring-boot-starter-tomcat这个starter就可以。 或者在pom.xml中对spring-boot-starter-web进行排除依赖\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> <exclusions> <exclusion> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> </exclusion> </exclusions> </dependency> \",\"排除掉Tomcat的starter后，再启动SpringBoot，就不会开启Tomcat了。\"]},\"111\":{\"h\":\"1.3 替换别的服务器\",\"t\":[\"添加别的服务器的starter就可以替换内嵌的服务器了，如jetty\",\"<!-- 添加 Jetty 起步依赖，版本由 SpringBoot 的 starter 控制 --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-jetty</artifactId> </dependency> \"]},\"112\":{\"h\":\"1-4. 配置文件介绍\",\"t\":[\"提示\",\"springBoot项目的配置文件都是放在 src=>main=>resources内的。\"]},\"113\":{\"h\":\"1. 默认配置文件\",\"t\":[\"SpringBoot默认配置文件：application.properties。\",\"该该配置文件可以配置所有可以自定义的配置项。\",\"SpringBoot为所有的重要的配置项基本都设置了默认值，所以该文件默认是空的。\"]},\"114\":{\"h\":\"2. 文件名\",\"t\":[\"默认是application，不要修改这个名字，不然无法自动加载。 当然，后缀是可以改的，支持多种文件格式。\"]},\"115\":{\"h\":\"3. 文件格式\",\"t\":[\"properties：默认的文件后缀就是properties。 \",\"配置项是K-V格式。\",\"yml：带层级的k-v，（推荐） \",\"yml和yaml是一回事\",\"//1.propeties格式 server.port=80 //2.yml格式 server: port: 81 \"]},\"116\":{\"h\":\"4. 多个配置文件\"},\"117\":{\"h\":\"4.1 多格式配置文件\",\"t\":[\"application.properties、application.yml、application.yaml共存时，他们的配置会互相叠加覆盖，当覆盖时，就需要考虑优先级了。\",\"优先级为：properties>yml>yaml\"]},\"118\":{\"h\":\"4.2 其他类型配置文件\",\"t\":[\"实际开发时，可能会根据开发环境添加诸如application-dev(dev环境)这类的配置文件，或是bootstrap.yml配置文件。\",\"具体见后续章节和微服务。\"]},\"119\":{\"h\":\"5. debug\",\"t\":[\"有时，可能会遇到bug，导致配置文件无效（配置文件没有小叶子的图标），此时需要手动将该配置文件激活。\",\"1-4-1\"]},\"120\":{\"h\":\"1-5. yml语法\",\"t\":[\" yaml是一种数据存储格式，类似XML和Properties. \"]},\"121\":{\"h\":\"Ⅰ. 配置yml\"},\"122\":{\"h\":\"1. yaml语法规则\",\"t\":[\"大小写敏感\",\"属性层级关系使用多行描述，每行结尾使用冒号结束\",\"使用缩进表示层级关系，同层级左侧对齐，只允许使用空格（不允许使用Tab键）\",\"属性值前面添加空格（属性名与属性值之间使用冒号+空格作为分隔）\",\"# 表示注释\"]},\"123\":{\"h\":\"2. 字面量表示方式\",\"t\":[\"boolean: TRUE #TRUE,true,True,FALSE,false ， False 均可 float: 3.14 #6.8523015e+5 # 支持科学计数法 int: 123 #0b1010_0111_0100_1010_1110 # 支持二进制、八进制、十六进制 null: ~ # 使用 ~ 表示 null string: HelloWorld # 字符串可以直接书写 string2: \\\"Hello World\\\" # 可以使用双引号包裹,此时可以解析特殊字符了，如\\\\t变成空格 date: 2018-02-17 # 日期必须使用 yyyy-MM-dd 格式 datetime: 2018-02-17T15:02:31+08:00 # 时间和日期之间使用 T 连接，最后使用+ 代表时区 \"]},\"124\":{\"h\":\"3. 数组表示方式\",\"t\":[\"在属性名书写位置的下方使用减号作为数据开始符号，每行书写一个数据，减号与数据间空格分隔。\",\"likes: - game - music - sleep likes2: [game,music,sleep] #缩略格式 # 对象数组 users: - name: zhangsan age: 18 - name: lisi age: 17 users2: - name: zhangsan age: 18 - name: lisi age: 17 users3: [{name:zhangsan,age:18},{name:lisi,age:17}] \"]},\"125\":{\"h\":\"4. yml文件中的变量引用\",\"t\":[\"在yml中可以使用 ${属性名} 引用数据，将其他配置项的值作为自己值的一部分。\",\"baseDir: c:\\\\win10 tempDir: ${baseDir}\\\\temp # c:\\\\win10\\\\temp \"]},\"126\":{\"h\":\"Ⅱ. 读取yml\",\"t\":[\"底层是IOC容器，通过注入的方式读取配置项，SpringBoot会自动导入配置文件的，直接使用@Value读配置项即可。\"]},\"127\":{\"h\":\"1. 读取yml数据\",\"t\":[\"提示\",\"这里指的是手动读取配置项，大部分配置信息SpringBoot会自动读取。\",\"使用@Value读取单个数据，属性名引用方式：${一级属性名.二级属性名……}\",\"简单读取：@Value(\\\"${属性名}\\\")\",\"多级数据：@Value(\\\"${一级属性名.二级属性名……}\\\")\",\"数组中数据：@Value(\\\"${数组名[索引]}\\\")\",\"对象数组中数据：@Value(\\\"${数组名[索引].对象属性}\\\")\",\"@Value(\\\"${country}\\\") private String country1; @Value(\\\"${user.name}\\\") private String name1; @Value(\\\"${likes[1]}\\\") private String likes1; @Value(\\\"${users[1].age}\\\") private String age1; \"]},\"128\":{\"h\":\"2. 读取yaml全部属性数据\",\"t\":[\"通过自动装配，SpringBoot可以将配置文件中所有的配置项信息封装到Environment对象中。\",\"这种方式可以省去定义太多成员变量。\",\"通过Environment对象的getProperty方法可以读取具体的配置项，参数是配置项名。\",\"//注入方式 @Autowired private Enviroment env; //读取配置项 System.out.println(env.getProperty(\\\"server.port\\\")); System.out.println(env.getProperty(\\\"user\\\")); System.out.println(env.getProperty(\\\"enterprise.subject[0]\\\")); \"]},\"129\":{\"h\":\"3. 读取yml引用类型数据\",\"t\":[\"yaml配置项的主流配置方式是：将一组数据封装到一个java对象中，使用的时候加载该对象，通过该对象读取所需配置。\",\"创建类：用于封装一组数据，如JDBC数据库连接信息（datasource）\",\"加载数据到对象：由Spring将这组数据加载到数据对象中\",\"使用数据：使用时从spring中直接获取数据使用\",\"示例如下：\"]},\"130\":{\"h\":\"3.1 待封装的数据\",\"t\":[\"# JDBC驱动配置 datasource: driver: com.mysql.jdbc.Driver url: jdbc:mysql://localhost/springboot_db username: root password: root666123 \"]},\"131\":{\"h\":\"3.2 创建数据对象\",\"t\":[\"创建config包，创建文件：JDBCDateSource类\",\"/定义数据模型封装yaml文件中对应的数据 @Component//定义为spring管控的bean //指定加载的数据(配置文件中的哪个配置项):datasource @ConfigurationProperties(prefix = \\\"datasource\\\") public class JDBCDateSource { //属性和要封装的数据一一兑对应 private String driver; private String url; private String username; private String password; ....getter\\\\setter\\\\.... } \"]},\"132\":{\"h\":\"3.3 注入数据并使用\",\"t\":[\"注入数据对象（自动装配），直接就可以使用了。\",\"@Autowired private JDBCDateSource dataSource; System.out.println(dataSource.url);//可以成功获取 \"]},\"133\":{\"h\":\"2-1. 热部署\",\"t\":[\"提示\",\"开发阶段，当代码修改后，想查看效果就要重启服务器，非常麻烦，而使用热部署就能解决这个问题。\",\"注意：热部署是在开发阶段配置的，方便代码的调试。生产阶段不要开启热部署。\",\"热部署就是代码修改后，服务器会自己悄悄的把更新后的程序给重新加载一遍。\"]},\"134\":{\"h\":\"1. 热部署实现原理\"},\"135\":{\"h\":\"1.1 非SpringBoot项目热部署实现原理\",\"t\":[\"背景：JavaWeb项目部署到本地的Tomcat服务器上。\",\"方案1：在tomcat服务器的配置文件中进行配置\",\"方案2：在IDEA中进行配置。\",\"核心思想：使用服务器去监控其中加载的应用，发现产生了变化就重新加载一次。\"]},\"136\":{\"h\":\"1.2 SpringBoot项目热部署实现原理\",\"t\":[\"SpringBoot的Tomcat服务器是内置的，tomcat本身也是对象，和我们的程序是平级的，都是spring容器中的组件。\",\"这就需要额外设置一个程序，监控开发的文件，发生变化，就命令Tomcat重新加载开发的文件就OK了。 这样做spring容器中东西不用全部重新加载一遍，只需要重新加载正则开发的文件就可以了，效率更高了。\"]},\"137\":{\"h\":\"2. 重启与重载\",\"t\":[\"一个springboot项目在运行时实际上是分两个过程进行的，根据加载的东西不同，划分成base类加载器与restart类加载器。\",\"base类加载器：用来加载jar包中的类，jar包中的类和配置文件由于不会发生变化，因此不管加载多少次，加载的内容不会发生变化.\",\"restart类加载器：用来加载开发者自己开发的类、配置文件、页面等信息，这一类文件受开发者影响\"]},\"138\":{\"h\":\"2.1 重启：Restart\",\"t\":[\"加载内容：自定义开发代码，包含类、页面、配置文件等，加载位置restart类加载器。\",\"当springboot项目启动时，base类加载器执行，加载jar包中的信息后，restart类加载器执行，加载开发者制作的内容。\"]},\"139\":{\"h\":\"2.2 重载Reload\",\"t\":[\"加载内容：项目中包含的jar包，加载位置base类加载器。\",\"当执行构建项目后，由于jar中的信息不会变化，因此base类加载器无需再次执行，所以仅仅运行restart类加载即可，也就是将开发者自己制作的内容重新加载就行了，这就完成了一次热部署的过程，也可以说热部署的过程实际上是重新加载restart类加载器中的信息。\"]},\"140\":{\"h\":\"3. 手动启动热部署\",\"t\":[\"导入一个SpringBoot开发依赖，其中包含热部署工具。\"]},\"141\":{\"h\":\"3.1 导入坐标\",\"t\":[\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <optional>true</optional> </dependency> \"]},\"142\":{\"h\":\"3.2 构建项目\",\"t\":[\"热部署需要手动生效，当修改了文件，准备测试前，手动使用IDEA进行Build Project\",\"菜单栏：Buidl->Build Project（快捷键 Ctrl + F9）。\"]},\"143\":{\"h\":\"3.3 问题\",\"t\":[\"每次进行热部署都需要开发者手工操作，非常麻烦。\"]},\"144\":{\"h\":\"4. 自动启动热部署\",\"t\":[\"这个是IDEA中的设置，让IDEA自动进行热部署。\"]},\"145\":{\"h\":\"4.1 设置：自动构建项目build project\",\"t\":[\"Setting中勾选，如下：\",\"2-1-1\"]},\"146\":{\"h\":\"4.2 设置：允许在程序运行时进行自动构建\",\"t\":[\"继续在Setting进行如下设置：\",\"2-1-2\"]},\"147\":{\"h\":\"4.3 热部署的时机\",\"t\":[\"默认当idea工具失去焦点5秒后进行热部署，改完程序需要到浏览器上去调试，这个时候idea就自动进行热部署操作，很人性化。\"]},\"148\":{\"h\":\"5. 热部署监控的文件范围\",\"t\":[\"并发所有的文件修改都会触发热部署，开发中工具中有一组配置，该配置就是来指定哪些文件的修改会触发热部署。\"]},\"149\":{\"h\":\"5.1 默认不参与热部署的目录\",\"t\":[\"/META-INF/maven\",\"/META-INF/resources\",\"/resources\",\"/static\",\"/public\",\"/templates\"]},\"150\":{\"h\":\"5.2 修改不参与热部署的目录或文件\",\"t\":[\"可以通过application.yml文件进行设定哪些文件不参与热部署操作。\",\"spring: devtools: restart: # 设置不参与热部署的文件或文件夹 exclude: static/**,public/**,config/application.yml \"]},\"151\":{\"h\":\"6. 关闭热部署\",\"t\":[\"热部署是纯开发阶段的功能，生产阶段必须关闭热部署。\"]},\"152\":{\"h\":\"6.1 通过配置强制关闭热部署\",\"t\":[\"spring: devtools: restart: enabled: false \"]},\"153\":{\"h\":\"6.2 通过启动类强制关闭热部署\",\"t\":[\"配置文件层级过多可能会导致相符覆盖最终引起配置失效，可以提高配置的层级，在更高层级中配置关闭热部署。 比如：最高等级的启动文类中进行关闭。\",\"@SpringBootApplication public class SSMPApplication { public static void main(String[] args) { System.setProperty(\\\"spring.devtools.restart.enabled\\\",\\\"false\\\"); SpringApplication.run(SSMPApplication.class); } } \"]},\"154\":{\"h\":\"2-2. 高级配置\"},\"155\":{\"h\":\"Ⅰ. 第三方Bean属性\"},\"156\":{\"h\":\"1. @ConfigurationProperties\",\"t\":[\"yaml配置项的主流配置方式是：将一组数据封装到一个对象中，使用的时候加载该对象，通过该对象读取所需配置。\",\"@ConfigurationProperties注解就是用来指定加载的数据(配置文件中的哪个配置项)。\",\"//file:config/JDBCDateSource：该类用来创建数据对象 @Component//定义为spring管控的bean //指定加载的数据(配置文件中的哪个配置项):datasource @ConfigurationProperties(prefix = \\\"datasource\\\") public class JDBCDateSource { //属性和要封装的数据一一对应 private String driver; private String url; private String username; private String password; ...getter/setter... } \",\"在需要使用这组配置的类中，注入该数据对象，就可以动态获取配置的数据了。\"]},\"157\":{\"h\":\"2. @ConfigurationProperties绑定第三方Bean\",\"t\":[\"@ConfigurationProperties注解是写在类定义的上方，而第三方开发的bean源代码不是你自己书写的，你也不可能到源代码中去添加@ConfigurationProperties注解，不过@ConfigurationProperties注解依然可以为第三方Bean进行属性绑定，只是格式不同。\"]},\"158\":{\"h\":\"2.1 将第三方类加入IOC\",\"t\":[\"Spring知识回顾\",\"在方法上加@Bean注解，该方法的返回值就会加入IOC管理。\",\"以在启动类中，获取德鲁伊对象为例：\",\"@SpringBootApplication public class SpringBootApplication{ @Bean public DruidDataSource datasource(){ DruidDataSource ds = new DruidDataSource(); return ds; } } \"]},\"159\":{\"h\":\"2.2 在yml配置文件中定义要绑定的属性\",\"t\":[\"datasource: driverClassName: com.mysql.jdbc.Driver \"]},\"160\":{\"h\":\"2.3 用@ConfigurationProperties注解为第三方bean进行属性绑定\",\"t\":[\"@Bean @ConfigurationProperties(prefix = \\\"datasource\\\") public DruidDataSource datasource(){ DruidDataSource ds = new DruidDataSource(); return ds; } \"]},\"161\":{\"h\":\"2.4 总结\",\"t\":[\"和自定义Bean的属性绑定操作类似，只不过@ConfigurationProperties注解是添加在方法上的。\"]},\"162\":{\"h\":\"3. @EnableConfigurationProperties\",\"t\":[\"该注解是作用在配置类上的，属性值是个数组，用来标注要使用@ConfigurationProperties注解绑定属性的类。\",\"该注解的意义就是对绑定属性的类进行统一的管理。\"]},\"163\":{\"h\":\"3.1 配置类统一管理\",\"t\":[\"@SpringBootApplication //配置类：同时也是SpringBoot启动类 //标注ServerConfig类使用@ConfigurationProperties注解绑定属性 @EnableConfigurationProperties(ServerConfig.class) public class Springboot13ConfigurationApplication { } \"]},\"164\":{\"h\":\"3.2 使用@ConfigurationProperties的类\",\"t\":[\"//该类不能再声明为bean,统一管理时，已经将其自动声明为bean了 @Data @ConfigurationProperties(prefix = \\\"servers\\\") public class ServerConfig { private String ipAddress; private int port; private long timeout; } \"]},\"165\":{\"h\":\"4. debug\",\"t\":[\"使用@ConfigurationProperties注解时，可能会出现一个提示信息，只需要添加一个坐标此提醒就消失了。\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-configuration-processor</artifactId> </dependency> \"]},\"166\":{\"h\":\"5. 宽松绑定\",\"t\":[\"配置文件：在进行属性绑定时，配置文件中的命名格式与变量名的命名格式可以进行格式上的最大化兼容。\",\"书写前缀：prefix的值只支持烤肉串书写模式（全小写或用-分割）\",\"@Value：该注解不支持宽松绑定\"]},\"167\":{\"h\":\"5.1 示例1：宽松绑定\",\"t\":[\"//配置文件中的servers.ipAddress属性各种书写模式 servers: ipAddress: 192.168.0.2 # 驼峰模式 ip_address: 192.168.0.2 # 下划线模式 ip-address: 192.168.0.2 # 烤肉串模式 IP_ADDRESS: 192.168.0.2 # 常量模式 \",\"@Component @Data @ConfigurationProperties(prefix = \\\"servers\\\") public class ServerConfig { private String ipAddress; //无论配置文件中IPAddress哪种书写模式，这里都生效 } \"]},\"168\":{\"h\":\"5.2 示例2：prefix\",\"t\":[\"@Bean @ConfigurationProperties(prefix = \\\"dataSource\\\") public DruidDataSource datasource(){ DruidDataSource ds = new DruidDataSource(); return ds; } \",\"报错：Configuration property name 'dataSource' is not valid:Invalid characters: 'S'\"]},\"169\":{\"h\":\"Ⅱ. 计量单位\"},\"170\":{\"h\":\"1. 属性的单位\",\"t\":[\"配置文件中的属性，有些是有单位的，如时间和空间的属性。\",\"servers: ip-address: 192.168.0.1 port: 2345 timeout: 200 # 时间属性， datasize: 20MB # 空间属性 \"]},\"171\":{\"h\":\"2. 时间单位：Duration\",\"t\":[\"Duration类：JDK8新增，表示时间间隔，可以通过@DurationUnit注解描述时间单位\",\"@ConfigurationProperties(prefix = \\\"servers\\\") public class ServerConfig { @DurationUnit(ChronoUnit.HOURS) private Duration serverTimeOut; } \"]},\"172\":{\"h\":\"3. 空间单位：DateSize\",\"t\":[\"DateSize类：JDK8新增，表示存储空间，可以通过@DataSizeUnit注解描述存储空间单位。\",\"注意：空间属性在配置文件中是可以直接指定单位的。\",\"@ConfigurationProperties(prefix = \\\"servers\\\") public class ServerConfig { @DataSizeUnit(DataUnit.MEGABYTES) private DataSize dataSize; } \"]},\"173\":{\"h\":\"Ⅲ. 数据校验\",\"t\":[\"配置文件中的属性值，可能跟预想的不一样，比如要配置Int类型的数据，确给了个String类型的值。 为了避免这种问题，就要用到属性校验了。\",\"提示\",\"仅做了解，配置很重要，肯定要遵守规范书写的。\"]},\"174\":{\"h\":\"1. 导入依赖\",\"t\":[\"JAVAEE的JSR303规范中给出了具体的数据校验标准，开发者可以根据自己的需要选择对应的校验框架。\",\"<!--1.导入JSR303规范--> <dependency> <groupId>javax.validation</groupId> <artifactId>validation-api</artifactId> </dependency> <!--使用hibernate框架提供的校验器做实现--> <dependency> <groupId>org.hibernate.validator</groupId> <artifactId>hibernate-validator</artifactId> </dependency> \"]},\"175\":{\"h\":\"2. @Validated\",\"t\":[\"在需要开启校验功能的类上使用注解@Validated开启校验功能。\",\"@Component @Data @ConfigurationProperties(prefix = \\\"servers\\\") //开启对当前bean的属性注入校验 @Validated public class ServerConfig { } \"]},\"176\":{\"h\":\"3. 对具体的字段设置校验规则\",\"t\":[\"@Component @Data @ConfigurationProperties(prefix = \\\"servers\\\") //开启对当前bean的属性注入校验 @Validated public class ServerConfig { //设置具体的规则 @Max(value = 8888,message = \\\"最大值不能超过8888\\\") @Min(value = 202,message = \\\"最小值不能低于202\\\") private int port; } \"]},\"177\":{\"h\":\"2-3. 代码测试\"},\"178\":{\"h\":\"Ⅰ. 集成 Junit\",\"t\":[\"junit默认已经被SpringBoot继承了。\"]},\"179\":{\"h\":\"1. pom.xml\",\"t\":[\"spring-boot-starter-test就是junit测试有关的模块，在创建SpringBoot工程时，他说默认导入的。如果是手动通过Maven创建的项目，可以手动导入该starter。\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> \"]},\"180\":{\"h\":\"2. 测试类\",\"t\":[\"SpringBoot已经默认创建了一个测试类：test/java/com/sgugo/XxxApplicationTests\",\"@SpringBootTest //声明测试类 class AifaceApplicationTests { @Test void contextLoads() { //测试代码 } } \",\"@SpringBootTest注解定义在类的上方，声明该类为测试类。\"]},\"181\":{\"h\":\"3. 测试的步骤\",\"t\":[\"导入测试对应的starter（创建项目时SpringBoot自动导入了）\",\"创建测试类（由@SpringBootTest修饰），项目默认有一个测试类。\",\"注入要测试的对象（IOC自动装载）\",\"执行要测试的对象对应的方法。\",\"@SpringBootTest class BlogApplicationTests { @Autowired private BookDao bookDao;//注入要测试的对象 @Test void contextLoads() { bookDao.save(); //执行要测试的对象的方法。 } } \"]},\"182\":{\"h\":\"4. 测试类的目录规划\",\"t\":[\"测试类默认的位置和引导类是对应的（package是一样的）。 如果将测试类的位置改变了，测试类将无法运行（包不匹配）。\"]},\"183\":{\"h\":\"5. classes属性\",\"t\":[\"当测试类与引导类的包不匹配时，将无法执行测试类。\",\"此时需要为@SpringBootTest注解添加一个classes属性，指明当前项目的引导类，这样测试类就再次有效了。\",\"@SpringBootTest(calssess = BlogApplication.class) class BlogApplicationTests { } \",\"和Spring整合Junit一样，只是SpringBoot进行了整合简化。SpringBoot不用指定配置类，而是自动去查找配置类（在和引导类相同的包中），如果包里找不到@SpringBootTest注解的类，就会报错，此时就必须手动指定配置类了。\"]},\"184\":{\"h\":\"Ⅱ. 加载测试专用配置\",\"t\":[\"相关信息\",\"配置文件已经设置好了，但是要测试的属性值与配置文件中的不一样（比如测试兼容性）。如果每次测试前改过来，每次测试后改回去，这太麻烦了。因此需要在测试环境中临时创建一组属性，来覆盖源码中设定的属性。\",\"注意\",\"并不常用，暂略。\"]},\"185\":{\"h\":\"Ⅲ. 测试API\",\"t\":[\"注意\",\"在test中测试API，而不是在POSTMAN中。\",\"一般使用POSTMAN或者Swagger，暂略。\"]},\"186\":{\"h\":\"Ⅳ. 数据层测试\",\"t\":[\"注意\",\"暂略，一般会有测试用的数据库。\"]},\"187\":{\"h\":\"3-1. 打包与发布\"},\"188\":{\"h\":\"Ⅰ. Windows\",\"t\":[\"实际开发时都是部署到Linux服务器上的，windows服务器仅作为测试。\",\"其实测试版基本也是在Linux上。\"]},\"189\":{\"h\":\"1. 概念\",\"t\":[\"打包：指将程序转换成一个可执行的文件，\",\"发布：指不依赖开发环境执行打包产生的文件。\",\"上述两个操作都有对应的命令可以快速执行。\"]},\"190\":{\"h\":\"2. 打包\",\"t\":[\"SpringBoot程序是基于Maven创建的，在Maven中提供有打包的指令，叫做package。 本操作可以在Idea环境下执行。\",\"mvn package \",\"打包后会产生一个与工程名类似的jar文件，其名称由模块名+版本号+.jar组成。\"]},\"191\":{\"h\":\"3. 发布 (运行)\",\"t\":[\"程序打包好以后，就可以直接执行了。 在程序包所在路径下，执行指令：\",\"java -jar 工程包名.jar \",\"执行程序打包指令后，程序正常运行，与在Idea下执行程序没有区别。\"]},\"192\":{\"h\":\"3.1 JDK\",\"t\":[\"计算机上必须安装JDK，否则无法执行java命令。\"]},\"193\":{\"h\":\"3.2 Maven插件\",\"t\":[\"在使用向导创建SpringBoot工程时，pom.xml文件中会有如下配置，这一段配置千万不能删除，否则打包后无法正常执行程序。\",\"<build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> \"]},\"194\":{\"h\":\"4. SpringBoot的Maven打包插件\",\"t\":[\"spring-boot-maven-plugin插件用于将当前程序打包成一个可以独立运行的程序包。\"]},\"195\":{\"h\":\"4.1 两种打包方式\",\"t\":[\"方式1：不使用spring-boot-maven-plugin插件打包 \",\"将默认生成的spring-boot-maven-plugin插件注释掉。\",\"方式2：使用spring-boot-maven-plugin插件打包\"]},\"196\":{\"h\":\"4.2 两种打包方式的对比\",\"t\":[\"打包后文件的大小不同：差了30倍\",\"打包后所包含的内容不同\",\"打包程序中个别文件内容不同\",\"3-1-1\"]},\"197\":{\"h\":\"5 Jar包的目录结构\"},\"198\":{\"h\":\"5.1 带spring-boot-maven-plugin插件的jar包\",\"t\":[\"META-INF \",\"MANIFEST.MF\",\"BOOT-INF \",\"classes：项目目录 \",\"com：项目包\",\"static：页面\",\"application.yml：配置文件\",\"lib：所有springboot项目依赖的jar包都在这里了，依赖这些Jar包，springboot就可以单独运行了\",\"Org.Springframework.boot.loader \",\"JarLauncher.class：该类内部要查找MANIFEST.MF中Start-Class属性配置的类，并执行\"]},\"199\":{\"h\":\"5.2 不带spring-boot-maven-plugin插件的jar包\",\"t\":[\"com：项目目录\",\"META-INF \",\"MANIFEST.MF：\",\"static：页面目录\",\"application.yml：配置文件\"]},\"200\":{\"h\":\"5.3 MANIFEAST.MF\",\"t\":[\"//1.普通工程的MANIFEAST.MF Manifest-Version: 1.0 Implementation-Title: springboot_08_ssmp Implementation-Version: 0.0.1-SNAPSHOT Build-Jdk-Spec: 1.8 Created-By: Maven Jar Plugin 3.2.0 //2.带spring-boot-maven-plugin的jar包的MANIFEAST.MF Manifest-Version: 1.0 Spring-Boot-Classpath-Index: BOOT-INF/classpath.idx Implementation-Title: springboot_08_ssmp Implementation-Version: 0.0.1-SNAPSHOT Spring-Boot-Layers-Index: BOOT-INF/layers.idx //JarLauncher执行该类：启动类 Start-Class: com.itheima.SSMPApplication Spring-Boot-Classes: BOOT-INF/classes/ Spring-Boot-Lib: BOOT-INF/lib/ Build-Jdk-Spec: 1.8 Spring-Boot-Version: 2.5.4 Created-By: Maven Jar Plugin 3.2.0 //如果使用java -jar执行此程序包，将执行Main-Class属性配置的类 Main-Class: org.springframework.boot.loader.JarLauncher \"]},\"201\":{\"h\":\"5.4 总结\",\"t\":[\"SpringBoot程序添加配置后会打出一个特殊的包，包含Spring框架部分功能，原始工程内容，原始工程依赖的jar包\",\"首先读取MANIFEST.MF文件中的Main-Class属性，用来标记执行java -jar命令后运行的类\",\"JarLauncher类执行时会找到Start-Class属性，也就是启动类类名\",\"运行启动类时会运行当前工程的内容\",\"运行当前工程时会使用依赖的jar包，从lib目录中查找\",\"这就是为什么这个jar包能独立运行的原因。\",\"而不带Maven插件打包的结果只是一个普通包，在MANIFEST.MF文件中也就没有了Main-Class对应的属性了，所以运行时提示找不到主清单属性，运行报错。\"]},\"202\":{\"h\":\"6. 端口号冲突\",\"t\":[\"一般80端口冲突都是因为开启了多个服务器，常用解决方案时，其他服务器关闭，或者修改端口号，比如前端服务器的端口号改为8080。\",\"如果关闭其他服务器和改端口号都解决不了问题，就要针对性的结束进程了。\",\"# 查询端口 netstat -ano # 查询指定端口 netstat -ano |findstr \\\"端口号\\\" # 根据进程PID查询进程名称 tasklist |findstr \\\"进程PID号\\\" # 根据PID杀死任务 taskkill /F /PID \\\"进程PID号\\\" \"]},\"203\":{\"h\":\"Ⅱ. Linux\"},\"204\":{\"h\":\"1. 项目部署步骤\",\"t\":[\"本地：开发部门使用git将项目上传道版本服务器\",\"服务器：使用git下载项目\",\"服务器：使用Maven工具在当前真机环境下构建项目\",\"启动服务\"]},\"205\":{\"h\":\"2. 部署环境\",\"t\":[\"安装JDK，搭建数据库并创建好数据表。\"]},\"206\":{\"h\":\"3. 上传jar包\",\"t\":[\"将SpringBoot打包好的jar包上传道 /usr/local目录中（其他目录也可以）。\"]},\"207\":{\"h\":\"4. 启动项目\",\"t\":[\"基本命令和windows上的相同。\",\"执行jar命令：java –jar 工程名.jar\"]},\"208\":{\"h\":\"3-2. 配置文件设计\",\"t\":[\"提示\",\"以下知识点仅做了解，实际开发时：\",\"采用多环境配置文件区分不同场景下的配置。\",\"采用配置中心更新配置文件。\"]},\"209\":{\"h\":\"Ⅰ. 临时属性配置\",\"t\":[\"程序包打好以后，里面的配置都已经是固定的了，比如配置了服务器的端口是8080。\",\"如果执行jar包时，发现端口被占用了，而占用端口的程序又不能关闭，这是该怎么办呢？要重新打包吗？\"]},\"210\":{\"h\":\"1. 启动命令的临时属性\",\"t\":[\"SpringBoot提供了临时属性的方式快速修改某些配置，在启动服务的时候，将配置作为参数添加即可。\",\"java -jar blog.jar --server.port=81 \",\"语法 输入启动命令后，空一格输入两个-，然后按照 属性名=属性值 的方式添加参数（参数的键值对格式为properties），如果有多个属性要添加，按照上述格式继续写，属性与属性之间使用 空格 分隔。\"]},\"211\":{\"h\":\"2. 属性加载的优先级\",\"t\":[\"临时属性的优先级高于配置文件。\"]},\"212\":{\"h\":\"3. 开发中使用临时属性\",\"t\":[\"在IDEA中，也可以输入临时属性： 点击右上角的SpringBoot引导类的运行界面，Program arguments就是输入临时属性的\",\"注意：新版的IDEA默认是没有Program arguments选项框的，使用快捷键Alt m 可以添加隐藏的选项框。\",\"3-2-1\"]},\"213\":{\"h\":\"4. main的args参数\",\"t\":[\"启动项目时，SpringBoot会自动执行引导类的main方法，main方法再执行时，将args参数传递给了里面的run方法。\",\"在Idea中配置的临时参数就是通过这个位置传递到我们的程序中的。 如果将run方法的args删掉，Springboot项目依然能启动， 但是就无法使用临时属性了。\",\"public static void main(String[] args) { SpringApplication.run(SSMPApplication.class,args); } public static void main(String[] args) { SpringApplication.run(SSMPApplication.class);//不携带args参数，临时属性失效 } //自定义临时属性 public static void main(String[] args) { String[] arg = new String[1]; arg[0] = \\\"--server.port=8082\\\"; //依然能够生效 SpringApplication.run(SSMPApplication.class, arg); } \"]},\"214\":{\"h\":\"5. 总结\",\"t\":[\"警告\",\"临时属性一般不用，而是采用多个配置文件。\"]},\"215\":{\"h\":\"Ⅱ. 配置文件分类\",\"t\":[\"开发中使用的配置文件与项目上线后的配置文件是有一定区别的。 因此需要对配置文件分类，采用多个配置文件。\"]},\"216\":{\"h\":\"1. 配置文件的级别\",\"t\":[\"SpringBoot提供了四个级别的配置文件（级别指的是优先级）。 其实就是四个配置文件书写的位置，不同的位置优先级不同。\",\"4级：类路径下配置文件（一直使用的是这个，resources/application.yml文件）【最低】\",\"3级：类路径下config目录下配置文件，resource/config/application.yml\",\"2级：程序包所在目录中配置文件\",\"1级：程序包所在目录中config目录下配置文件【最高】\"]},\"217\":{\"h\":\"2. 使用场景\",\"t\":[\"1级与2级留做系统打包后设置通用属性，1级常用于运维经理进行线上整体项目部署方案调控\",\"3级与4级用于系统开发阶段设置通用属性，3级常用于项目经理进行整体项目属性调控\",\"项目类路径配置文件（4级）：服务于开发人员本机开发与测试\",\"项目类路径config目录中配置文件（3级）：服务于项目经理整体调控\",\"工程路径配置文件（2级）：服务于运维人员配置涉密线上环境\",\"工程路径config目录中配置文件（1级）：服务于运维经理整体调控\"]},\"218\":{\"h\":\"3. 多层级配置文件的关系\",\"t\":[\"不同配置相互叠加。 相同配置，高优先级覆盖低优先级的。\"]},\"219\":{\"h\":\"Ⅲ. 自定义配置文件\",\"t\":[\"配置文件名默认为：application.yml，这个名字是可以修改的。\"]},\"220\":{\"h\":\"1. 应用场景\",\"t\":[\"比如元旦做活动，需要修改服务器配置，1周后活动取消，这时候更新下配置文件即可。\",\"我们不能再原始配置文件上修改，而是新建一个配置文件，方便维护。\"]},\"221\":{\"h\":\"2. 配置方式\",\"t\":[\"使用临时属性设置配置文件名，注意仅仅是名称，不要带扩展名 \",\"properties与yml文件格式均支持：--spring.config.name=ebank\",\"使用临时属性设置配置文件路径，这个是全路径名 \",\"--spring.config.loaction=classpath:/ebank.properties\"]},\"222\":{\"h\":\"3. 补充说明\",\"t\":[\"现在写的SpringBoot项目都是单体项目（单服务器版本），企业开发时更多的是基于SpringCloud的多服务器的微服务项目。\",\"这种配置方式和我们现在学习的完全不一样，所有的服务器将不再设置自己的配置文件，而是通过配置中心获取配置，动态加载配置信息，目的是为了集中管理。\"]},\"223\":{\"h\":\"3-3. 多环境开发\",\"t\":[\"什么是多环境\",\"电脑上写的程序最终要放到别人的服务器上去运行。每个计算机环境不一样，这就是多环境。\",\"比如连接的数据库不一样，设置的访问端口不一样等等。\",\"常见的多环境开发主要兼顾3种环境设置：\",\"生产环境：服务器部署使用\",\"开发环境：开发人员使用\",\"测试环境：公司测试部门使用\"]},\"224\":{\"h\":\"Ⅰ. yml 单一文件版\",\"t\":[\"在一个yaml文件中，设置三种环境。\"]},\"225\":{\"h\":\"1. 示例\",\"t\":[\"3-3-1\"]},\"226\":{\"h\":\"2. 语法\",\"t\":[\"以---分割各个环境，spring.profiles：指定环境名，名字随意。\",\"最顶层是来配置当前启动的环境的。一般最顶层也会加上一些通用的配置。\",\"spring: profiles: active: pro # 启动pro --- spring: profiles: pro server: port: 80 --- spring: profiles: dev server: port: 81 --- spring: config: #profiles 过时了，可以采用config.activate.on-profile代替 activate: on-profile: test server: port: 82 \"]},\"227\":{\"h\":\"Ⅱ. yml 多文件版\",\"t\":[\"单个文件存放多个环境配置，不容易维护，且容易暴露信息。\",\"比如：生产环境的密码被测试任意拿到。\"]},\"228\":{\"h\":\"1. 定义多个配置文件\",\"t\":[\"在resource目录下设置如下配置文件（注意：命名严格要求application-xx）\",\"application.yml【主配置文件，存放通用配置】\",\"application-dev.yml【dev环境配置文件】\",\"application-test.yml【test环境配置文件】\",\"application-pro.yml【生产环境配置文件】\"]},\"229\":{\"h\":\"2. 应用\",\"t\":[\"在主配置文件中指定要引入哪个环境的配置文件。\",\"主配置文件还会存放通用的配置信息，环境分类配置文件中常用于设置冲突属性（局部）。 启用的名字就是application-后面的名字。\",\"spring: profiles: active: dev #启用dev环境的配置文件 \"]},\"230\":{\"h\":\"Ⅲ. 多环境开发控制\"},\"231\":{\"h\":\"1. include\",\"t\":[\"将所有的配置根据功能对配置文件中的信息进行拆分，并制作成独立的配置文件。\",\"命名规则如下：\",\"application-devDB.yml\",\"application-devRedis.yml\",\"application-devMVC.yml\"]},\"232\":{\"h\":\"1.1 使用\",\"t\":[\"使用include属性在激活指定环境的情况下，同时对多个环境进行加载使其生效，多个环境间使用逗号分隔。\",\"pring: profiles: active: dev # 主环境dev include: devDB,devRedis,devMVC #dev环境额外新增的配置 \"]},\"233\":{\"h\":\"1.2 优先级\",\"t\":[\"当主环境dev与其他环境有相同属性时，主环境属性生效；其他环境中有相同属性时，最后加载的环境属性生效。\"]},\"234\":{\"h\":\"2. group\",\"t\":[\"include有一个问题，比如我要切换dev环境为pro时，include也要修改。 SpringBoot从2.4版开始使用group属性替代include属性，降低了配置书写量。\",\"spring: profiles: active: dev group: \\\"dev\\\": devDB,devRedis,devMVC \\\"pro\\\": proDB,proRedis,proMVC \\\"test\\\": testDB,testRedis,testMVC \",\"如上，active指定哪个环境组生效。group中配置各个组环境组，其中键为主环境，值为额外include的环境。主环境的优先级最低（最先加载），其他的根据加载顺序确定。\"]},\"235\":{\"h\":\"3. Maven设置多环境\",\"t\":[\"先在maven环境中设置用什么具体的环境，在SpringBoot中读取maven设置的环境即可。\",\"<!--设置多环境--> <profiles> <profile> <id>env_dev</id> <properties> <profile.active>dev</profile.active> </properties> <activation> //设置默认启动的环境 <activeByDefault>true</activeByDefault> </activation> </profile> <profile> <id>env_pro</id> <properties> <profile.active>pro</profile.active> </properties> </profile> </profiles> \"]},\"236\":{\"h\":\"3.1 SpringBoot中读取maven设置值\",\"t\":[\"SpringBoot使用@..@占位符读取Maven对应的配置属性值。\",\"spring: profiles: active: @profile.active@ #动态读取配置 \"]},\"237\":{\"h\":\"3.2 使用\",\"t\":[\"执行Maven打包指令，并在生成的boot打包文件.jar文件中查看对应信息，发现 @profile.active@被替换成了具体的值。\"]},\"238\":{\"h\":\"3.3 debug\",\"t\":[\"基于SpringBoot读取Maven配置属性的前提下，如果在Idea下测试工程时pom.xml每次更新需要手动compile方可生效。\"]},\"239\":{\"h\":\"3-4. log日志\",\"t\":[\"提示\",\"实际开发时，是要在应用后台对日志进行可视化处理的。\"]},\"240\":{\"h\":\"Ⅰ. 记录日志\"},\"241\":{\"h\":\"1. 日志的作用\",\"t\":[\"编程期调试代码\",\"运营期记录信息\",\"记录日常运营重要信息（峰值流量、平均响应时长……）\",\"记录应用报错信息（错误堆栈）\",\"记录运维过程数据（扩容、宕机、报警……）\"]},\"242\":{\"h\":\"2. 使用日志对象记录日志\",\"t\":[\"例如：在某个Controller添加日志记录。\",\"@RestController @RequestMapping(\\\"/books\\\") public class BookController { @GetMapping public String getById(){ System.out.println(\\\"springboot is running...2\\\"); //1.创建日志对象 private static final logger log = LoggerFactory.getLogger(BookController.class); //2.记录日志(日志会在控制台打印):调用日志对象的API记录日志 log.debug(\\\"debug...\\\"); log.info(\\\"info...\\\"); log.warn(\\\"warn...\\\"); log.error(\\\"error...\\\"); return \\\"springboot is running...2\\\"; } } \"]},\"243\":{\"h\":\"3. 优化日志对象的创建\",\"t\":[\"每个类都要创建日志对象，太麻烦了。\",\"可以创建一个基础控制器BaseController，在该控制器中创建日志对象，需要记录日志的控制器就继承该控制器。 缺点：还是比较繁琐，需要继承，继承只能一次，不能浪费了。\"]},\"244\":{\"h\":\"4. @Slf4j\",\"t\":[\"lombok包提供的类注解@Slf4j，可以为类注入日志对象。\",\"@Slf4j //注入日志对象,对象名就是：log @RestController @RequestMapping(\\\"/books\\\") public class BookController { @GetMapping public String getById(){ System.out.println(\\\"springboot is running...2\\\"); //直接使用注入的对象log log.debug(\\\"debug...\\\"); log.info(\\\"info...\\\"); log.warn(\\\"warn...\\\"); log.error(\\\"error...\\\"); return \\\"springboot is running...2\\\"; } } \"]},\"245\":{\"h\":\"Ⅱ. 日志的等级\"},\"246\":{\"h\":\"1. 等级划分\",\"t\":[\"日志设置好以后可以根据设置选择哪些参与记录。这里是根据日志的级别来设置的。\",\"日志的级别分为6种，分别是：\",\"TRACE：运行堆栈信息，使用率低\",\"DEBUG：程序员调试代码使用\",\"INFO：记录运维过程数据\",\"WARN：记录运维过程报警数据\",\"ERROR：记录错误堆栈信息\",\"FATAL：灾难信息，合并计入ERROR\"]},\"247\":{\"h\":\"2. 日志的等级选择\",\"t\":[\"一般情况下，开发时候使用DEBUG，上线后使用INFO，运维信息记录使用WARN即可。\",\"日志等级一般在application配置文件中设置。\"]},\"248\":{\"h\":\"3. 配置文件设置日志等级\",\"t\":[\"# 开启 debug 模式，输出调试信息，常用于检查系统运行状况 debug: true \"]},\"249\":{\"h\":\"4. 通过日志组设置日志等级\",\"t\":[\"直接设置日志等级太粗暴了，日志系统提供了更加细致的日志等级控制，可以精确到某个包的日志等级\",\"也可以同时为多个包设置日志等级（日志组）。\",\"logging: # 设置日志组 group: # 自定义组名，设置当前组中所包含的包 ebank: com.blog.controller level: # 默认日志组root，控制项目下所有包 root: debug # 为对应组设置日志级别 ebank: debug # 为对包设置日志级别 com.itheima.controller: debug \"]},\"250\":{\"h\":\"Ⅲ. 日志输出格式\"},\"251\":{\"h\":\"1. 默认格式\",\"t\":[\"在控制台打印日志时，默认的格式如下：\",\"3-4-1\"]},\"252\":{\"h\":\"2. 配置文件控制日志格式\",\"t\":[\"可以在配置文件中，配置日志格式。\",\"logging: pattern: console: \\\"具体的格式\\\" \"]},\"253\":{\"h\":\"3. 日志格式语法\",\"t\":[\"%d：日期\",\"%m：消息\",\"%n：换行\",\"%clr()：颜色 \",\"%clr(%d){red}：后接中括号可以指定日志的颜色\",\"长度：用于对齐，在字母前使用数字，数字就代表该部分日志占多少位\",\"普通字符串：可以拼接任意普通字符串，更加易读\",\"logging: pattern: console: \\\"%d %clr(%p) --- [%16t] %clr(%-40.40c){cyan} : %m %n\\\" \"]},\"254\":{\"h\":\"4. 日志处理\",\"t\":[\"实际开发中，都是将日志写入文件，然后再使用工具读取日志文件。再使用各种字符串处理方法和前端的美化，做日志可视化处理。 这样在后台就可以看见非常：直观、美观、动态、且包含数据分析、警示等各种附加功能的日志了。\"]},\"255\":{\"h\":\"Ⅳ. 日志文件\",\"t\":[\"项目上线后，就要将日志写入文件，然后在进行可视化处理了。\"]},\"256\":{\"h\":\"1. 设置日志文件\",\"t\":[\"在配置文件中开启日志文件。\",\"logging: file: name: server.log #日志文件名 \"]},\"257\":{\"h\":\"2. 日志策略\",\"t\":[\"对于日志文件的使用存在各种各样的策略，例如每日记录，分类记录，报警后记录等。\",\"其中最基础的策略就是：日志分文件存储（防止文件太大，难易读取）。 分文件存储就要为每个文件设置动态有序的文件名，并设置新增文件的时机（限制日志大小）。\"]},\"258\":{\"h\":\"3. 日志策略配置\",\"t\":[\"在配置文件中，可以对基本的日志策略进行配置：\",\"logging: logback: rollingpolicy: #日志文件大小限制,超过该大小就新建日志文件 max-file-size: 3MB #新建日志文件的命名规则 file-name-pattern: server.%d{yyyy-MM-dd}.%i.log \",\"命名规则\",\"server：固定部分\",\"%d{yyyy-MM-dd}：日期，中括号可选，用来配置日期格式\",\"%i：从0开始的自增数字\"]},\"259\":{\"h\":\"Ⅴ. Logback 日志\"},\"260\":{\"h\":\"1. 介绍\",\"t\":[\"spring boot内部使用Logback作为日志实现的框架。\",\"Logback和log4j非常相似，如果你对log4j很熟悉，那对logback很快就会得心应手。\",\"logback相对于log4j的一些优点\"]},\"261\":{\"h\":\"2. 配置logback日志\",\"t\":[\"删除日志配置：删除配置文件中所有的日志配置，包括mybatis的\",\"安装插件：安装idea彩色日志插件：grep-console\",\"创建配置文件：resources 中创建 logback-spring.xml \",\"自动在该模块中生效。\"]},\"262\":{\"h\":\"3. 配置文件内容\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <configuration scan=\\\"true\\\" scanPeriod=\\\"10 seconds\\\"> <!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 --> <!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true --> <!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 --> <!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --> <contextName>logback</contextName> <!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。 --> <property name=\\\"log.path\\\" value=\\\"D:/guli_1010/edu\\\" /> <!-- 彩色日志 --> <!-- 配置格式变量：CONSOLE_LOG_PATTERN 彩色日志格式 --> <!-- magenta:洋红 --> <!-- boldMagenta:粗红--> <!-- cyan:青色 --> <!-- white:白色 --> <!-- magenta:洋红 --> <property name=\\\"CONSOLE_LOG_PATTERN\\\" value=\\\"%yellow(%date{yyyy-MM-dd HH:mm:ss}) |%highlight(%-5level) |%blue(%thread) |%blue(%file:%line) |%green(%logger) |%cyan(%msg%n)\\\"/> <!--输出到控制台--> <appender name=\\\"CONSOLE\\\" class=\\\"ch.qos.logback.core.ConsoleAppender\\\"> <!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--> <!-- 例如：如果此处配置了INFO级别，则后面其他位置即使配置了DEBUG级别的日志，也不会被输出 --> <filter class=\\\"ch.qos.logback.classic.filter.ThresholdFilter\\\"> <level>INFO</level> </filter> <encoder> <Pattern>${CONSOLE_LOG_PATTERN}</Pattern> <!-- 设置字符集 --> <charset>UTF-8</charset> </encoder> </appender> <!--输出到文件--> <!-- 时间滚动输出 level为 INFO 日志 --> <appender name=\\\"INFO_FILE\\\" class=\\\"ch.qos.logback.core.rolling.RollingFileAppender\\\"> <!-- 正在记录的日志文件的路径及文件名 --> <file>${log.path}/log_info.log</file> <!--日志文件输出格式--> <encoder> <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern> <charset>UTF-8</charset> </encoder> <!-- 日志记录器的滚动策略，按日期，按大小记录 --> <rollingPolicy class=\\\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\\\"> <!-- 每天日志归档路径以及格式 --> <fileNamePattern>${log.path}/info/log-info-%d{yyyy-MM-dd}.%i.log</fileNamePattern> <timeBasedFileNamingAndTriggeringPolicy class=\\\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\\\"> <maxFileSize>100MB</maxFileSize> </timeBasedFileNamingAndTriggeringPolicy> <!--日志文件保留天数--> <maxHistory>15</maxHistory> </rollingPolicy> <!-- 此日志文件只记录info级别的 --> <filter class=\\\"ch.qos.logback.classic.filter.LevelFilter\\\"> <level>INFO</level> <onMatch>ACCEPT</onMatch> <onMismatch>DENY</onMismatch> </filter> </appender> <!-- 时间滚动输出 level为 WARN 日志 --> <appender name=\\\"WARN_FILE\\\" class=\\\"ch.qos.logback.core.rolling.RollingFileAppender\\\"> <!-- 正在记录的日志文件的路径及文件名 --> <file>${log.path}/log_warn.log</file> <!--日志文件输出格式--> <encoder> <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern> <charset>UTF-8</charset> <!-- 此处设置字符集 --> </encoder> <!-- 日志记录器的滚动策略，按日期，按大小记录 --> <rollingPolicy class=\\\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\\\"> <fileNamePattern>${log.path}/warn/log-warn-%d{yyyy-MM-dd}.%i.log</fileNamePattern> <timeBasedFileNamingAndTriggeringPolicy class=\\\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\\\"> <maxFileSize>100MB</maxFileSize> </timeBasedFileNamingAndTriggeringPolicy> <!--日志文件保留天数--> <maxHistory>15</maxHistory> </rollingPolicy> <!-- 此日志文件只记录warn级别的 --> <filter class=\\\"ch.qos.logback.classic.filter.LevelFilter\\\"> <level>warn</level> <onMatch>ACCEPT</onMatch> <onMismatch>DENY</onMismatch> </filter> </appender> <!-- 时间滚动输出 level为 ERROR 日志 --> <appender name=\\\"ERROR_FILE\\\" class=\\\"ch.qos.logback.core.rolling.RollingFileAppender\\\"> <!-- 正在记录的日志文件的路径及文件名 --> <file>${log.path}/log_error.log</file> <!--日志文件输出格式--> <encoder> <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern> <charset>UTF-8</charset> <!-- 此处设置字符集 --> </encoder> <!-- 日志记录器的滚动策略，按日期，按大小记录 --> <rollingPolicy class=\\\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\\\"> <fileNamePattern>${log.path}/error/log-error-%d{yyyy-MM-dd}.%i.log</fileNamePattern> <timeBasedFileNamingAndTriggeringPolicy class=\\\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\\\"> <maxFileSize>100MB</maxFileSize> </timeBasedFileNamingAndTriggeringPolicy> <!--日志文件保留天数--> <maxHistory>15</maxHistory> </rollingPolicy> <!-- 此日志文件只记录ERROR级别的 --> <filter class=\\\"ch.qos.logback.classic.filter.LevelFilter\\\"> <level>ERROR</level> <onMatch>ACCEPT</onMatch> <onMismatch>DENY</onMismatch> </filter> </appender> <!-- <logger>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。 <logger>仅有一个name属性， 一个可选的level和一个可选的addtivity属性。 name:用来指定受此logger约束的某一个包或者具体的某一个类。 level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF， 如果未设置此属性，那么当前logger将会继承上级的级别。 --> <!-- 使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作： 第一种把<root level=\\\"INFO\\\">改成<root level=\\\"DEBUG\\\">这样就会打印sql，不过这样日志那边会出现很多其他消息 第二种就是单独给mapper下目录配置DEBUG模式，代码如下，这样配置sql语句会打印，其他还是正常DEBUG级别： --> <!--开发环境:打印控制台--> <springProfile name=\\\"dev\\\"> <!--可以输出项目中的debug日志，包括mybatis的sql日志--> <logger name=\\\"com.guli\\\" level=\\\"INFO\\\" /> <!-- root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性 level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，默认是DEBUG 可以包含零个或多个appender元素。 --> <root level=\\\"INFO\\\"> <appender-ref ref=\\\"CONSOLE\\\" /> <appender-ref ref=\\\"INFO_FILE\\\" /> <appender-ref ref=\\\"WARN_FILE\\\" /> <appender-ref ref=\\\"ERROR_FILE\\\" /> </root> </springProfile> <!--生产环境:输出到文件--> <springProfile name=\\\"pro\\\"> <root level=\\\"INFO\\\"> <appender-ref ref=\\\"CONSOLE\\\" /> <appender-ref ref=\\\"DEBUG_FILE\\\" /> <appender-ref ref=\\\"INFO_FILE\\\" /> <appender-ref ref=\\\"ERROR_FILE\\\" /> <appender-ref ref=\\\"WARN_FILE\\\" /> </root> </springProfile> </configuration> \"]},\"263\":{\"h\":\"4. 手动输出日志\",\"t\":[\"在需要手动输出日志的类上同样加上 @Slf4j 注解，输出的语法就是Slf4j的语法。\",\"@Slf4j //注入日志对象,对象名就是log @RestController @RequestMapping(\\\"/books\\\") public class BookController { @GetMapping public String getById(){ System.out.println(\\\"springboot is running...2\\\"); //直接使用注入的对象log log.debug(\\\"debug...\\\"); log.info(\\\"info...\\\"); log.warn(\\\"warn...\\\"); log.error(\\\"error...\\\"); return \\\"springboot is running...2\\\"; } } \"]},\"264\":{\"h\":\"3-5. 监控\",\"t\":[\"提示\",\"TBD\"]},\"265\":{\"h\":\"4-1. MySQL\",\"t\":[\"相关信息\",\"在进行整合之前先梳理一下整合的思想，springboot整合任何技术其实就是在springboot中使用对应技术的API。 如果两个技术没有交集，就不存在整合的概念了。所谓整合其实就是使用springboot技术去管理其他技术。\",\"需要先导入对应技术的坐标，而整合之后，这些坐标都有了一些变化\",\"任何技术通常都会有一些相关的设置信息，整合之后，这些信息如何写，写在哪是一个问题\",\"没有整合之前操作如果是模式A的话，整合之后如果没有给开发者带来一些便捷操作，那整合将毫无意义，所以整合后操作肯定要简化一些，那对应的操作方式自然也有所不同\"]},\"266\":{\"h\":\"1. 添加依赖\",\"t\":[\"Druid依赖的坐标需要手动在pom.xml中导入。\",\"<dependency> <groupId>com.alibaba</groupId> <artifactId>druid-spring-boot-starter</artifactId> <version>1.2.6</version> </dependency> \"]},\"267\":{\"h\":\"2. 配置连接池\",\"t\":[\"spring: datasource: druid: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC username: root password: root \"]},\"268\":{\"h\":\"4-2. MyBatis\",\"t\":[\"相关信息\",\"主流持久层技术是：MyBatis或MyBatisPlus。 Spring提供的默认持久化技术是JdbcTempalte，一般不直接用。\"]},\"269\":{\"h\":\"Ⅰ. 集成MyBatis\",\"t\":[\"需要配置的是数据库的连接信息和MyBatis的SQL映射。\"]},\"270\":{\"h\":\"1. 添加MyBatis依赖\",\"t\":[\"使用SpringBoot创建项目时，勾选SQL->MyBatis Framework、MySQL Driver，或者手动引入坐标，可以选择使用Druid连接池进行连接。\",\"具体坐标如下：\",\" <!--MyBatis--> <dependency> <groupId>org.mybatis.spring.boot</groupId> <artifactId>mybatis-spring-boot-starter</artifactId> </dependency> <!--JDBC Driver--> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <scope>runtime</scope> </dependency> <!--druid--> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid-spring-boot-starter</artifactId> <version>1.2.16</version> </dependency> \"]},\"271\":{\"h\":\"2. 配置连接信息\",\"t\":[\"只需要配置数据库连接信息即可，其他的配置采用默认值。\",\"# file: application.yml spring: datasource: druid: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://192.75.225.162:3306/test?serverTimezone=UTC username: admin password: admin \"]},\"272\":{\"h\":\"3. 使用MyBatis\",\"t\":[\"创建实体类和Mapper接口，使用Mapper接口时，直接将Mapper接口当实现类使用即可，中间创建接口实体类的过程，SpringBoot都完成了。\"]},\"273\":{\"h\":\"3.1 实体类\",\"t\":[\"//file: domain/Book public class Book { private Integer id; private String type; private String name; private String description; } \"]},\"274\":{\"h\":\"3.2 Dao: Mapper接口\",\"t\":[\"@Mapper注解是为了被IOC容器识别，自动产生Mapper接口的对象，并加入IOC容器。\",\"//file: dao/BookDao @Mapper public interface BookDao { @Select(\\\"select * from tbl_book where id = #{id}\\\") public Book getById(Integer id); } \"]},\"275\":{\"h\":\"3.3 使用测试\",\"t\":[\"这里就不创建Controller了，直接使用测试类访问Mapper接口\",\"//file: test/java/com/blog/cybercell/BlogApplicationTests @SpringBootTest class BlogApplicationTests { @Autowired private BookDao bookDao; @Test void contextLoads() { //直接调用Mapper接口中的方法 System.out.println(bookDao.getById(11)); //可以正常查询 } } \"]},\"276\":{\"h\":\"4. 注意事项\"},\"277\":{\"h\":\"4.1 时区错误\",\"t\":[\"使用SpringBoot2.4.3（不含）之前版本会出现一个小BUG，就是MySQL驱动升级到8以后要求强制配置时区，如果不设置会出问题。\",\"url: jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC \",\"可以去修改mysql中的配置文件mysql.ini，在mysqld项中添加default-time-zone=+8:00也可以解决这个问题。\"]},\"278\":{\"h\":\"4.2 MySQL驱动问题\",\"t\":[\"MySQL版本在8.0以上时，可能会出现驱动类过时的问题。\",\"方案：弃用com.mysql.jdbc.Driver，换用com.mysql.cj.jdbc.Driver\"]},\"279\":{\"h\":\"Ⅱ. 集成MyBatis Plus\"},\"280\":{\"h\":\"1. 添加MyBatis Plus依赖\",\"t\":[\"SpringBoot官网没有收录MyBatisPlus，无法像导入MyBatis那样直接导入。\",\"可以在创建项目时，切换成阿里云的源，或者直接手动导入。\",\"具体坐标如下：\",\"<dependency> <groupId>com.baomidou</groupId> <artifactId>mybatis-plus-boot-starter</artifactId> <version>3.5.2</version> </dependency> <!--JDBC Driver--> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <scope>runtime</scope> </dependency> <!--druid--> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid-spring-boot-starter</artifactId> <version>1.2.16</version> </dependency> \"]},\"281\":{\"h\":\"2. 配置连接信息\",\"t\":[\"和MyBatis的连接配置一样。\",\"# file: application.yml spring: datasource: druid: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://192.75.225.162:3306/test?serverTimezone=UTC username: admin password: admin \"]},\"282\":{\"h\":\"3. 使用MyBatisplus\",\"t\":[\"只需要继承BaseMapper并传入实体类（表名）的泛型，所有基本的SQL操作方法就自动添加了。\"]},\"283\":{\"h\":\"3.1 Mapper 接口\",\"t\":[\"创建Mapper接口，继承MyBatisPlus中的BaseMapper接口。\",\"@Mapper public interface BookDao extends BaseMapper<Book> { //自动携带了众多BaseMapper中的方法。 } \"]},\"284\":{\"h\":\"3.2 使用测试\",\"t\":[\"使用测试类访问Mapper接口。\",\"@SpringBootTest class BlogApplicationTests { @Autowired private BookDao bookDao; @Test void contextLoads() { System.out.println(bookDao.selectById(2)); } @Test void testGetAll() { System.out.println(bookDao.selectList(null)); } } \"]},\"285\":{\"h\":\"4-3. Redis\"},\"286\":{\"h\":\"1. 依赖\",\"t\":[\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-redis</artifactId> <dependency> \"]},\"287\":{\"h\":\"2. redis基础配置\",\"t\":[\"spring: redis: host: 159.75.225.162 port: 6379 password: hello1234 \"]},\"288\":{\"h\":\"4. 使用Redis：RedisTemplate\",\"t\":[\"使用springboot整合redis的专用客户端接口操作，此处使用的是RedisTemplate，使用步骤如下\",\"注入RedisTemplate\",\"根据要操作的数据类型，调用opsForXxx方法，获取对应的XxxOperations对象（Xxx指的是Redis的数据类型） \",\"在操作redis时，需要先确认操作何种数据，根据数据种类得到操作接口。\",\"剩下的就是调用对应api操作了\",\"使用XxxOperations对象调用方法，操作Redis，方法名和参数，与Redis的指令和参数相同。\",\"public class RedisTest{ @Autowired //注入RedisTemplate private RedisTemplate redisTemplate; public void strRedis(){ //获取String类型的操作对象 ValueOpeartions strOps = redisTemplate.opsForValue(); //使用ValueOperations对象操作Redis ops.set(\\\"age\\\",31) Object age = ops.get(\\\"age\\\"); } public void hashRedis(){ HashOperations ops = redisTemplate.opsForHash(); ops.put(\\\"info\\\",\\\"a\\\",\\\"b\\\"); Object val = ops.get(\\\"info\\\", \\\"b\\\"); } } \",\"各种类型的数据操作接口\",\"如下：\",\"4-3-1\",\"问题\",\"通过对象往Redis数据库中存储的数据是对象格式的，Redis内部不支持java对象的储存格式，因此当操作的数据以对象的形式存在时，会进行转码，转换成字符串格式（序列化）后进行操作。\",\"为了方便开发者使用基于字符串为数据的操作，springboot整合redis时提供了专用的API接口StringRedisTemplate，你可以理解为这是RedisTemplate的一种指定数据泛型的操作API。\"]},\"289\":{\"h\":\"4. 使用Redis：StringRedisTemplate【常用】\",\"t\":[\"使用步骤和RedisTemplate一样。\",\"public class StringRedisTemplateTest { @Autowired //注入StringRedisTemplate对象 private StringRedisTemplate stringRedisTemplate; void get(){ //获取String类型的操作对象，泛型永远都是String，无论操作对象是操作何种类型 ValueOperations<String, String> ops = stringRedisTemplate.opsForValue(); //使用ValueOperations<String, String>对象操作Redis String name = ops.get(\\\"name\\\"); System.out.println(name); } } \"]},\"290\":{\"h\":\"5. Redis客户端选择\",\"t\":[\"springboot整合redis技术提供了多种客户端兼容模式，默认提供的是lettucs客户端技术，也可以根据需要切换成指定客户端技术，例如jedis客户端技术。\"]},\"291\":{\"h\":\"5.1 lettcus与jedis区别\",\"t\":[\"jedis连接Redis服务器是直连模式，当多线程模式下使用jedis会存在线程安全问题，解决方案可以通过配置连接池使每个连接专用，这样整体性能就大受影响\",\"lettcus基于Netty框架进行与Redis服务器连接，底层设计中采用线程安全的StatefulRedisConnection，可以保障并发访问安全问题，所以一个连接可以被多线程复用。当然lettcus也支持多连接实例一起工作。\"]},\"292\":{\"h\":\"5.2 切换成jedis客户端技术\",\"t\":[\"导入jedis坐标\",\"<dependency> <groupId>redis.clients</groupId> <artifactId>jedis</artifactId> </dependency> \",\"yml配置文件：添加redis客户端类型配置\",\"spring: redis: host: localhost port: 6379 password: hello1235 client-type: jedis \"]},\"293\":{\"h\":\"6. 客户端的其他配置\",\"t\":[\"除了基础配置，还可以根据需要设置对应的配置\",\"spring: redis: host: localhost port: 6379 client-type: jedis lettuce: pool: //设置连接池 max-active: 16 jedis: pool: max-active: 16 \"]},\"294\":{\"h\":\"5.集成其他技术\",\"t\":[\"相关信息\",\"TBD\"]},\"295\":{\"h\":\"6.底层原理\",\"t\":[\"相关信息\",\"TBD\"]},\"296\":{\"h\":\"x-1. 项目初始化\",\"t\":[\"内容说明\",\"开发SpringBoot项目的一些通用操作。\"]},\"297\":{\"h\":\"Ⅰ. 配置IDEA和GIT\",\"t\":[\"提示\",\"以下操作和IDEA的版本相关，当前版本为：2021.3\"]},\"298\":{\"h\":\"1. Maven配置\",\"t\":[\"不采用IDEA内置的Maven，内置的Maven不方便修改配置，这里采用自己下载的Maven。\",\"Maven的版本要与SpringCloud与SpringBoot兼容，同时要与IDEA兼容。\",\"一般采用IDEA内置Maven的版本进行下载\",\"在IDEA中，替换手动下载的Maven、setting.xml和本地库。 设置位置：Build,Execution,Deployment > Build Tools > Maven\",\"x-1-1\",\"一般也会设置跳过Maven单元测试\",\"x-1-2\"]},\"299\":{\"h\":\"2. 字符编码\",\"t\":[\"将整个IDEA全部改为UTF-8编码（三个地方）。\",\"x-1-3\"]},\"300\":{\"h\":\"3. 隐藏非必要文件\",\"t\":[\"如：idea、iml等。\",\"x-1-4\"]},\"301\":{\"h\":\"4. 开启热部署\",\"t\":[\"设置位置：Build,Execution,Deployment->Compiler 配置完后重启IDEA。\",\"x-1-5\"]},\"302\":{\"h\":\"5. 配置.gitignore\",\"t\":[\"在项目的根目录添加.gitignore文件。\",\"# IntelliJ IDEA # .idea/ /.idea/ */.idea/ *.iws *.iml *.ipr # Eclipse Project files .classpath .project /.settings/ .settings/ # Java class files *.class # Generated files */bin/ */gen/ */out/ ### user ### target/ /target/ /src/logs/ #*.zip sdkTest.log #some local files */.DS_Store .DS_Store gradlew gradlew.bat unused.txt \"]},\"303\":{\"h\":\"Ⅱ. 创建工程\"},\"304\":{\"h\":\"1. new project\",\"t\":[\"以Spring Initializr的方式创建工程。\",\"1-2-1\"]},\"305\":{\"h\":\"2. 配置工程\",\"t\":[\"选择合适的Spring Boot版本和需要直接安装的组件（可以只选版本，组件后面再安装）。\",\"1-2-2\"]},\"306\":{\"h\":\"3. 添加依赖\",\"t\":[\"根据项目需求添加依赖和插件。\"]},\"307\":{\"h\":\"4. 配置yml\",\"t\":[\"删除application.properties，创建application.yml，并进行基本的application配置\",\"如果是多环境，需要创建dev、test、pro多个配置文件\"]},\"308\":{\"h\":\"5. 初始化\"},\"309\":{\"h\":\"Ⅲ. 准备工作\"},\"310\":{\"h\":\"1. 准备工作顺序\",\"t\":[\"前提：开发环境（框架）已经搭建好了，数据库也创建好了，依赖和插件等都准备好了。\",\"连接数据库：IDEA连接数据库\",\"完善目录\",\"创建所有配置：resources/application.yml\",\"利用MyBatis-plus逆向生成代码\",\"将所需的所有工具类和插件搭建\",\"利用启动类启动服务\",\"写业务代码\"]},\"311\":{\"h\":\"2. 常用工具类\",\"t\":[\"统一响应格式\",\"配置Swagger\"]},\"312\":{\"h\":\"3. 代码生成\",\"t\":[\"使用MyBatis X插件，利用MyBatisPlus生成代码\",\"配置数据源：在IDEA右边选择DataBase，连接数据库\",\"生成代码：数据源中选择目标数据表，右键：选择第一个选项MyBatis-Generator\",\"配置代码模板：可以对将要生成的代码的模板进行配置，可配置项非常多\",\"x-1-6\",\"x-1-7\"]},\"313\":{\"h\":\"Ⅳ. 目录规范\",\"t\":[\"根据以下规范，按需创建目录\",\"blog [cc.cybercell]> src > main > java > cc.cybercell.blog ├── common: 公共类 ├── config: 配置 ├── controller: 控制器（API） ├── entity: 实体类（也可命名为domain或pojo） ├── filter: 拦截器 ├── mapper: MyBatis Plus的mapper ├── service: 服务层接口 ├── impl: 服务层接口实现类 ├── utils: 工具 ├── BlogApplication.java :启动类 blog [cc.cybercell]> src > main > java > resources ├── application.yml ├── application-dev.yml ├── application-prod.yml \"]},\"314\":{\"h\":\"x-2. 依赖列表\",\"t\":[\"核心版本\",\"更新时间：2023-4-27，版本可以直接复制，不用更改。\",\"SpringBoot： 2.7.9\",\"Java：17 PS：下次更新，就是SpringBoot3了。\"]},\"315\":{\"h\":\"Ⅰ. SpringBoot 组件\",\"t\":[\"SpringBoot内置的组件。\"]},\"316\":{\"h\":\"1. SpringBoot\",\"t\":[\"spring-boot-starter依赖。 spring-boot-starter-web依赖包含了该依赖，一般不用添加。\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter</artifactId> </dependency> \"]},\"317\":{\"h\":\"2. SpringMvc\",\"t\":[\"spring-boot-starter-web依赖。\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> \"]},\"318\":{\"h\":\"3. Junit 测试依赖\",\"t\":[\"spring-boot-starter-test依赖。\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> \"]},\"319\":{\"h\":\"4. actuator监控\",\"t\":[\"spring-boot-starter-actuator依赖。\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-actuator</artifactId> </dependency> \"]},\"320\":{\"h\":\"Ⅱ. SQL\"},\"321\":{\"h\":\"1. MySQL\",\"t\":[\"JDBC依赖，需要手动指定版本。\",\"<dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <scope>runtime</scope> <version>8.0.16</version> </dependency> \"]},\"322\":{\"h\":\"2. Druid\",\"t\":[\"Druid连接池依赖，需要手动指定版本。\",\"<dependency> <groupId>com.alibaba</groupId> <artifactId>druid-spring-boot-starter</artifactId> <version>1.2.16</version> </dependency> \"]},\"323\":{\"h\":\"3. MyBatis\",\"t\":[\"MyBatis依赖，需要手动指定版本，和MyBatis Plus 只能存在一个。\",\"<dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis</artifactId> <version>3.5.7</version> </dependency> \"]},\"324\":{\"h\":\"4. MyBatis Plus\",\"t\":[\"mybatisplus依赖，需要手动指定版本。 mybatis plus包含了mybatis，不要再引入mybatis了，以免版本冲突。\",\"<dependency> <groupId>com.baomidou</groupId> <artifactId>mybatis-plus-boot-starter</artifactId> <version>3.5.2</version> </dependency> \"]},\"325\":{\"h\":\"Ⅲ. NoSQL\"},\"326\":{\"h\":\"1. Redis\",\"t\":[\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-redis</artifactId> <dependency> \"]},\"327\":{\"h\":\"Ⅳ. 消息与缓存\"},\"328\":{\"h\":\"1. Rabbitmq\",\"t\":[\"消息队列RabbitMQ依赖。\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-amqp</artifactId> </dependency> \"]},\"329\":{\"h\":\"Ⅴ. 工具\"},\"330\":{\"h\":\"1. lombok\",\"t\":[\"<dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <optional>true</optional> </dependency> \"]},\"331\":{\"h\":\"2. swagger\",\"t\":[\"需要手动指定版本。\",\"<dependency> <groupId>io.springfox</groupId> <artifactId>springfox-boot-starter</artifactId> <version>3.0.0</version> </dependency> \"]},\"332\":{\"h\":\"3. sprint-boot-devtool\",\"t\":[\"用于开启热部署，需要Maven设置支持。\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <scope>runtime</scope> <optional>true</optional> </dependency> \"]},\"333\":{\"h\":\"4. fastjson\",\"t\":[\"<dependency> <groupId>com.alibaba</groupId> <artifactId>fastjson</artifactId> <version>1.2.76</version> </dependency> \"]},\"334\":{\"h\":\"Ⅵ. 第三方API\"},\"335\":{\"h\":\"1. 阿里云短信服务\",\"t\":[\"<dependency> <groupId>com.aliyun</groupId> <artifactId>aliyun-java-sdk-core</artifactId> <version>4.5.16</version> </dependency> <dependency> <groupId>com.aliyun</groupId> <artifactId>aliyun-java-sdk-dysmsapi</artifactId> <version>2.1.0</version> </dependency> \"]},\"336\":{\"h\":\"Ω. pom.xml示例\",\"t\":[\"说明\",\"仅包含了常用的依赖，可以直接复制使用，对于不常用的依赖，自己手动添加。\",\"包含了properties部分dependencies部分和build部分。\",\"<properties> <java.version>17</java.version> <mysql.version>8.0.16</mysql.version> <druid.version>1.2.16</druid.version> <mybatis.plus.version>3.5.2</mybatis.plus.version> <swagger.version>3.0.0</swagger.version> </properties> <dependencies> <!-- ========================================================= --> <!-- ==================== SpringBoot 组件 ==================== --> <!-- ========================================================= --> <!--Spring:springmvc--> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <!--Spring:test--> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> <!--Spring:图形化处理--> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-actuator</artifactId> </dependency> <!-- ========================================================= --> <!-- ======================== SQL相关 ======================== --> <!-- ========================================================= --> <!--mysql--> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <scope>runtime</scope> <version>${mysql.version}</version> </dependency> <!--druid--> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid-spring-boot-starter</artifactId> <version>${druid.version}</version> </dependency> <!--mybatis-plus--> <dependency> <groupId>com.baomidou</groupId> <artifactId>mybatis-plus-boot-starter</artifactId> <version>${mybatis.plus.version}</version> </dependency> <!-- ========================================================= --> <!-- ==================== NoSQL、缓存、消息 =================== --> <!-- ========================================================= --> <!-- Redis --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-redis</artifactId> <dependency> <!-- RabbitMQ --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-amqp</artifactId> </dependency> <!-- ========================================================= --> <!-- ========================== 工具 ========================= --> <!-- ========================================================= --> <!--lombok--> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <optional>true</optional> </dependency> <!--swagger3--> <dependency> <groupId>io.springfox</groupId> <artifactId>springfox-boot-starter</artifactId> <version>${swagger.version}</version> </dependency> <!--开启热部署--> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <optional>true</optional> </dependency> <!-- ========================================================= --> <!-- ======================= 第三方API ======================= --> <!-- ========================================================= --> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <version>2.7.9</version> </plugin> </plugins> </build> \"]},\"337\":{\"h\":\"x-3. 项目开发规范\",\"t\":[\"相关信息\",\"TBD\"]},\"338\":{\"h\":\"x-4. SSM开发案例\",\"t\":[\"提示\",\"需要前置知识：\",\"集成MySQL\",\"集成MyBatisPlus\",\"通过一个案例了解使用SpringBoot开发项目的过程。\",\"要开发的内容\",\"实体类开发————使用Lombok快速制作实体类\",\"Dao开发————整合MyBatisPlus，制作数据层测试\",\"Service开发————基于MyBatisPlus进行增量开发，制作业务层测试类\",\"Controller开发————基于Restful开发，使用PostMan测试接口功能\",\"Controller开发————前后端开发协议制作\",\"页面开发————基于VUE+ElementUI制作，前后端联调，页面数据处理，页面消息处理 \",\"列表、新增、修改、删除、分页、查询\",\"项目异常处理\",\"按条件查询————页面功能调整、Controller修正功能、Service修正功能\",\"架构 前端(浏览器)->前端服务器->后端服务器（分布式）。 本次案例仅考虑浏览器向服务器发送请求接受响应，不考虑前端服务器。\"]},\"339\":{\"h\":\"1. 初始化\"},\"340\":{\"h\":\"1.1 创建模块\",\"t\":[\"依赖：Spring Web；MySQL Driver；MyBatis-Plus；Druid；\",\"目录优化 \",\"启动类文件名改为：Application.java，简洁一些。\",\"配置文件后缀改为yml\"]},\"341\":{\"h\":\"1.2 配置文件\",\"t\":[\"配置端口号、Druid的连接信息、mybatis-plus的常用设置。\",\"erver: port: 80 spring: datasource: druid: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC username: root password: root mybatis-plus: global-config: db-config: table-prefix: tbl_ \"]},\"342\":{\"h\":\"1.3 创建数据表Book\",\"t\":[\"结构：id(int)；type(varchar)；name(varchar)； desription(varchar)\"]},\"343\":{\"h\":\"2. 实体类\",\"t\":[\"根据要操作的数据表创建实体类。 实体类包名：domain( or entity)。\",\"@Data public class Book { private Integer id; private String type; private String name; private String description; } \"]},\"344\":{\"h\":\"2.1 lombok\",\"t\":[\"实体类需要手动生成get/set方法，创建toString等，非常麻烦。可以使用一个工具：lombok，该java类库提供了一些注解可以简化实体类的开发。\",\"@Data注解：自动添加getter、setter、toString、equals、hashCode\",\"@AllArgsContructor：全参构造方法；\",\"@NoArgsContructor：无参构造方法。\",\"<dependencies> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> </dependency> </dependencies> \"]},\"345\":{\"h\":\"3. Dao：基本CURD\",\"t\":[\"基于：MyBatisPlus、Druid\"]},\"346\":{\"h\":\"3.1 Mapper 接口\",\"t\":[\"所在包：dao\",\"@Mapper //MyBatisPlus public interface BookDao extends BaseMapper<Book> { //实体类泛型 //这里什么都不用写，基本的CURDBaseMapper中都定义了 //可以点击BaseMapper查看具体有哪些API可以掉用，注释是中文的。 //如果有很个性化的需求，可以手动加，建议用注解的方式加SQL } \"]},\"347\":{\"h\":\"3.2 测试类（可选）\",\"t\":[\"@SpringBootTest //SpringBoot测试类 public class BookDaoTestCase { @Autowired //注入Mapper private BookDao bookDao; @Test //查询 void testGetById(){ System.out.println(bookDao.selectById(1)); } @Test //增加 void testSave(){ Book book = new Book(); book.setType(\\\"测试数据123\\\"); book.setName(\\\"测试数据123\\\"); book.setDescription(\\\"测试数据123\\\"); bookDao.insert(book); } @Test //Update void testUpdate(){ Book book = new Book(); book.setId(17); book.setType(\\\"测试数据abcdefg\\\"); book.setName(\\\"测试数据123\\\"); book.setDescription(\\\"测试数据123\\\"); bookDao.updateById(book); } @Test //delete void testDelete(){ bookDao.deleteById(16); } @Test //getAll void testGetAll(){ bookDao.selectList(null); } } \"]},\"348\":{\"h\":\"3.3 配置\",\"t\":[\"MyBatisPlus是采用雪花算法生成UUID作为id的，如果测试的时候想用int作为id，就需要额外的配置。\",\"基础的CRUD操作均由MyBatisPlus给我们提供，不需要再写SQL，如果想看SQL需要进行配置： \",\"不只是显示SQL，会显示所有跟SQL相关的操作（仅开发时才能开启）。\",\"mybatis-plus: global-config: db-config: table-prefix: tbl_ id-type: auto # 生成策略为参照数据库设定的策略 configuration: # 在配置文件里开启日志，设置日志输出方式为：标准输出 log-impl: org.apache.ibatis.logging.stdout.StdOutImpl \"]},\"349\":{\"h\":\"4. Dao：分页功能\",\"t\":[\"MyBatisPlus内部有分页操作相关的API，使用分页API需要通过拦截器实现。\"]},\"350\":{\"h\":\"4.1 拦截器\",\"t\":[\"创建包config，专门存放配置信息相关的类，创建MPconfig用来配置分页相关的拦截器：MybatisPlusInterceptor。\",\"@Configuration //设置为配置类(该注解会被启动类扫描) public class MPConfig { @Bean //管理第三方bean：将方法的返回值加入IOC容器 public MybatisPlusInterceptor mybatisPlusInterceptor(){ //定义MyBatisPlus拦截器（只是一个壳） MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor(); //添加具体的拦截器：PaginationInnerInterceptor（分页相关的拦截器） interceptor.addInnerInterceptor(new PaginationInnerInterceptor()); return interceptor;//返回拦截器 } } \"]},\"351\":{\"h\":\"4.2 IPage\",\"t\":[\"MyBatisPlus的IPage接口封装了所有与分页相关的信息和操作，实现类为Page。\",\"参数1：当前是第几页\",\"参数2：每页显示多少条数据\",\"Ipage page = new Page(1,5); //进行分页查询，要调用Mapper接口的selectPage方法,参数就是page对象 //返回的是依然是Ipage对象，此时该对象已经包含了各种信息 bookDao.selectPage(page,null); \"]},\"352\":{\"h\":\"4.3 Test\",\"t\":[\"@Test void testGetPage(){ IPage page = new Page(2,5); bookDao.selectPage(page, null); System.out.println(page.getCurrent());//获取当前页（从第几页开始查询） System.out.println(page.getSize());//获取每页显示的条数 System.out.println(page.getTotal());//获取总条数 System.out.println(page.getPages());//获取总页数 System.out.println(page.getRecords());//查询结果 } \"]},\"353\":{\"h\":\"5. Dao：条件查询\",\"t\":[\"MyBatisPlus将复杂的条件查询SQL都封装好了，使用时直接掉用API接口就行了。\"]},\"354\":{\"h\":\"5.1 QueryWrapper\",\"t\":[\"QueryWrapper类是用于封装查询条件的，接受一个实体类作为泛型。 该类包含了很多条件查询相关的方法，直接调用就可以拼接查询条件。\",\"QueryWrapper<Book> qw = new QueryWrapper<>(); \"]},\"355\":{\"h\":\"5.2 示例\",\"t\":[\"@Test void testGetBy(){ QueryWrapper<Book> qw = new QueryWrapper<>(); //设置条件：调用like方法，进行模糊查询，传入模糊查询的条件作为参数 qw.like(\\\"name\\\",\\\"Spring\\\"); bookDao.selectList(qw);//进行条件查询，QueryWrapper对象作为参数 } \"]},\"356\":{\"h\":\"5.3 LambdaQueryWrapper\",\"t\":[\"问题：查询条件的属性名是直接手写的字符串，如果写错了会发生异常。\",\"解决：支持Lambda表达式的条件查询API，有更好的提示，防止写错字段。\",\"@Test void testGetBy2(){ String name = \\\"1\\\"; LambdaQueryWrapper<Book> lqw = new LambdaQueryWrapper<Book>(); //通过实体类获取字段名，防止出错 lqw.like(Book::getName,name); bookDao.selectList(lqw); } \"]},\"357\":{\"h\":\"5.4 动态条件拼接\",\"t\":[\"问题：进行条件查询时，浏览器可能没有传递条件，即条件可能是null，null会被直接当做null字符串。\",\"解决：使用动态条件拼接，防止将null数据作为条件使用。\",\"@Test void testGetBy2(){ String name = \\\"1\\\"; LambdaQueryWrapper<Book> lqw = new LambdaQueryWrapper<Book>(); //if(name != null) lqw.like(Book::getName,name);//方式一：JAVA代码控制 lqw.like(name != null,Book::getName,name);//方式二：API接口提供控制开关 bookDao.selectList(lqw); } \"]},\"358\":{\"h\":\"6. Service：业务层\",\"t\":[\"提示\",\"注意区分业务层和数据层，dao层的方法名是比较直接的，直接与数据库字段和要进行的操作相关，而业务层的方法名就是要做的业务。\",\"创建包：service作为业务层接口，创建BookService作为业务接口\",\"创建包：service/impl作为业务层实现类，创建BookServiceImpl作为对应业务层接口的实现类\"]},\"359\":{\"h\":\"6.1 BookService：业务层接口\",\"t\":[\"public interface BookService { Boolean save(Book book); Boolean update(Book book); Boolean delete(Integer id); Book getById(Integer id); List<Book> getAll(); IPage<Book> getPage(int currentPage,int pageSize); } \"]},\"360\":{\"h\":\"6.2 BookServiceImpl：业务层实现类\",\"t\":[\"@Service public class BookServiceImpl extends ServiceImpl<BookDao, Book> implements IBookService { @Autowired private BookDao bookDao; @Override public boolean saveBook(Book book) { return bookDao.insert(book) > 0; } @Override public boolean modify(Book book) { return bookDao.updateById(book) > 0; } @Override public boolean delete(Integer id) { return bookDao.deleteById(id) > 0; } @Override public IPage<Book> getPage(int currentPage, int pageSize) { IPage page = new Page(currentPage,pageSize); bookDao.selectPage(page,null); return page; } @Override public IPage<Book> getPage(int currentPage, int pageSize, Book book) { LambdaQueryWrapper<Book> lqw = new LambdaQueryWrapper<Book>(); lqw.like(Strings.isNotEmpty(book.getType()),Book::getType,book.getType()); lqw.like(Strings.isNotEmpty(book.getName()),Book::getName,book.getName()); lqw.like(Strings.isNotEmpty(book.getDescription()),Book::getDescription,book.getDescription()); IPage page = new Page(currentPage,pageSize); bookDao.selectPage(page,lqw); return page; } } \"]},\"361\":{\"h\":\"6.3 MyBatisPlus：通用Service接口和通用Service实现类\",\"t\":[\"Service层也有很多通用的CURD方法，MyBatisPlus也对这些方法进行了封装。\",\"//Service层：继承IService<Book>类，并填写增强的实体类作为泛型 public interface IBookService extends IService<Book> { //添加非通用操作API接口 //可以继续添加非通用的API } //ServiceImpl层：继承的类需要传入两个泛型，一个是数据层接口，另一个是实体类。 @Service //IOC 管理 public class BookServiceImpl extends ServiceImpl<BookDao, Book> implements IBookService { @Autowired private BookDao bookDao; //添加非通用操作API，注意命名，不要覆盖掉原始操作 } \"]},\"362\":{\"h\":\"6.4 注意事项\",\"t\":[\"接口命名一般以I开头。 实际开发时，业务层必须进行Test测试。\"]},\"363\":{\"h\":\"7. Controller：表现层\",\"t\":[\"创建包：controller作为表现层，创建BookController类。\",\"表现层其实就是：servlet层，调用业务层获取数据，将数据响应给前端，并指定跳转的页面。\",\"API开发：如果做前后端分离的API开发，Controller只需要响应JSON格式数据即可。\"]},\"364\":{\"h\":\"7.1 Controller\",\"t\":[\"@RequestMapping(\\\"/books\\\") public class BookController2 { @Autowired private IBookService bookService; @GetMapping public List<Book> getAll(){ return bookService.list(); } @PostMapping public Boolean save(@RequestBody Book book){ return bookService.save(book); } @PutMapping public Boolean update(@RequestBody Book book){ return bookService.modify(book); } @DeleteMapping(\\\"{id}\\\") public Boolean delete(@PathVariable Integer id){ return bookService.delete(id); } @GetMapping(\\\"{id}\\\") public Book getById(@PathVariable Integer id){ return bookService.getById(id); } @GetMapping(\\\"{currentPage}/{pageSize}\\\") public IPage<Book> getPage( @PathVariable int currentPage,@PathVariable int pageSize){ return bookService.getPage(currentPage,pageSize, null); } \"]},\"365\":{\"h\":\"7.2 注解\",\"t\":[\"实体数据：@RequestBody\",\"路径变量：@PathVariable\"]},\"366\":{\"h\":\"7.3 测试接口\",\"t\":[\"使用Postman进行接口测试\"]},\"367\":{\"h\":\"8. 接口优化\",\"t\":[\"上述Controller响应的数据有一个问题，返回的数据类型未统一：有JSON数组、JSON对象、Boolean、INT，我们必须返回一致的数据类型让前端使用，即：表现层消息一致性处理。\"]},\"368\":{\"h\":\"8.1 响应数据设计：详见RESTful规范\",\"t\":[\"格式：统一为JSON对象\",\"{ \\\"code\\\":1, //响应状态码，提前规定好：比如1表示成功 \\\"message\\\":\\\"处理成功\\\", //响应信息 \\\"time\\\":12321654351,//接口响应的时间戳，用于安全 \\\"data\\\":[ //响应的数据 ,JSON数组格式(也可以是其他数据格式) { \\\"id\\\":10, \\\"uname\\\":\\\"Jinno\\\" },{ \\\"id\\\":12, \\\"uname\\\":\\\"Aaron\\\" } ] } \"]},\"369\":{\"h\":\"8.2 异常的统一处理\",\"t\":[\"在表现层做统一的异常处理，使用SpringMVC提供的异常处理器做统一的异常处理。 比如：将异常信息加入异常日志、发送消息给运维等。\",\"包：controller/utils，也将异常处理类放入utile包中。 只需要对controller层做异常处理即可，其他层的异常最终会抛到controller。\",\"//作为springmvc的异常处理器 @RestControllerAdvice public class ProjectExceptionAdvice { //拦截所有的异常信息 @ExceptionHandler(Exception.class) public R doException(Exception ex){ //记录日志 //通知运维 //通知开发 ex.printStackTrace(); return new R(\\\"服务器故障，请稍后再试！\\\"); } } \"]},\"370\":{\"h\":\"8.3 返回结果模型类\",\"t\":[\"将所有操作的操作结果数据格式统一起来，需要设计表现层返回结果的模型类，用于后端与前端进行数据格式统一，也称为前后端数据协议\",\"包：创建controller/utils包，专门存放工具类的，创建类R作为返回结果模型类。\",\"构造方法：根据不同的响应数据类型，设计多个构造方法\",\"异常处理：返回结果模型，不要漏掉了异常的信息\",\"@Data public class R { private Boolean flag;//操作是否成功 private Object data; //响应的具体数据 private String msg; //响应信息，如异常信息 public R(){} //空参构造方法 public R(Boolean flag){ //DML构造方法 this.flag = flag; } public R(Boolean flag,Object data){ //DQL构造方法 this.flag = flag; this.data = data; } public R(Boolean flag,String msg){ //带响应信息的构造方法 this.flag = flag; this.msg = msg; } public R(String msg){ //异常专用构造方法 this.flag = false; this.msg = msg; } } \"]},\"371\":{\"h\":\"8.4 使用结果模型类\",\"t\":[\"在Controller类中，将所有方法的返回值类型都修改为R，对所有的返回值都使用R对象进行包装。 返回定义好的JSON格式数据。\",\"@RestController @RequestMapping(\\\"/books\\\") public class BookController { @Autowired private IBookService bookService; @GetMapping public R getAll(){ return new R(true, bookService.list()); } @PostMapping public R save(@RequestBody Book book) throws IOException { if (book.getName().equals(\\\"123\\\") ) throw new IOException(); boolean flag = bookService.save(book); return new R(flag, flag ? \\\"添加成功^_^\\\" : \\\"添加失败-_-!\\\"); } @PutMapping public R update(@RequestBody Book book) throws IOException { if (book.getName().equals(\\\"123\\\") ) throw new IOException(); boolean flag = bookService.modify(book); return new R(flag, flag ? \\\"修改成功^_^\\\" : \\\"修改失败-_-!\\\"); } @DeleteMapping(\\\"{id}\\\") public R delete(@PathVariable Integer id){ return new R(bookService.delete(id)); } @GetMapping(\\\"{id}\\\") public R getById(@PathVariable Integer id){ return new R(true, bookService.getById(id)); } @GetMapping(\\\"{currentPage}/{pageSize}\\\") public R getPage (@PathVariable int currentPage,@PathVariable int pageSize,Book book){ IPage<Book> page = bookService.getPage(currentPage, pageSize,book); //如果当前页码值大于了总页码值，那么重新执行查询操作，使最大页码值作为当前页码值 if( currentPage > page.getPages()){ page = bookService.getPage((int)page.getPages(), pageSize,book); } return new R(true, page); } } \"]},\"372\":{\"h\":\"9. 前端页面设计\",\"t\":[\"实际开发时，都是前后端分离的，有专门的前端服务器（Nginx）。\",\"现在只是作测试，前端页面放到：resources目录下的static目录中。\",\"子目录为：css；js;pages；plugins;templates;\",\"技术栈：采用Vue和Axios。\",\"暂略。\"]},\"373\":{\"h\":\"1-1. 环境与部署\"},\"374\":{\"h\":\"数据库设计\",\"t\":[\"如下：共有11张表。\",\"表名\",\"说明\",\"employee\",\"员工表\",\"category\",\"分类表：菜品、套餐\",\"dish\",\"菜品表\",\"setmeal\",\"套餐表\",\"setmeal_dish\",\"菜品与套餐关系表\",\"dish_flavor\",\"菜品口味关系表\",\"user\",\"用户表C端\",\"address_book\",\"地址表\",\"shopping_cart\",\"购物车表\",\"orders\",\"订单表\",\"order_detail\",\"订单明细表\"]},\"375\":{\"h\":\"1. employee：员工表\",\"t\":[\"CREATE TABLE `employee` ( `id` bigint(20) NOT NULL COMMENT '主键', `name` varchar(32) COLLATE utf8_bin NOT NULL COMMENT '姓名', `username` varchar(32) COLLATE utf8_bin NOT NULL COMMENT '用户名', `password` varchar(64) COLLATE utf8_bin NOT NULL COMMENT '密码', `phone` varchar(11) COLLATE utf8_bin NOT NULL COMMENT '手机号', `sex` varchar(2) COLLATE utf8_bin NOT NULL COMMENT '性别', `id_number` varchar(18) COLLATE utf8_bin NOT NULL COMMENT '身份证号', `status` int(11) NOT NULL DEFAULT '1' COMMENT '状态 0:禁用，1:正常', `create_time` datetime NOT NULL COMMENT '创建时间', `update_time` datetime NOT NULL COMMENT '更新时间', `create_user` bigint(20) NOT NULL COMMENT '创建人', `update_user` bigint(20) NOT NULL COMMENT '修改人', PRIMARY KEY (`id`) USING BTREE, UNIQUE KEY `idx_username` (`username`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='员工信息'; \"]},\"376\":{\"h\":\"2. category：分类表\",\"t\":[\"CREATE TABLE `category` ( `id` bigint(20) NOT NULL COMMENT '主键', `type` int(11) DEFAULT NULL COMMENT '类型 1 菜品分类 2 套餐分类', `name` varchar(64) COLLATE utf8_bin NOT NULL COMMENT '分类名称', `sort` int(11) NOT NULL DEFAULT '0' COMMENT '顺序', `create_time` datetime NOT NULL COMMENT '创建时间', `update_time` datetime NOT NULL COMMENT '更新时间', `create_user` bigint(20) NOT NULL COMMENT '创建人', `update_user` bigint(20) NOT NULL COMMENT '修改人', PRIMARY KEY (`id`) USING BTREE, UNIQUE KEY `idx_category_name` (`name`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='菜品及套餐分类'; \"]},\"377\":{\"h\":\"3. dish：菜品表\",\"t\":[\"CREATE TABLE `dish` ( `id` bigint(20) NOT NULL COMMENT '主键', `name` varchar(64) COLLATE utf8_bin NOT NULL COMMENT '菜品名称', `category_id` bigint(20) NOT NULL COMMENT '菜品分类id', `price` decimal(10,2) DEFAULT NULL COMMENT '菜品价格', `code` varchar(64) COLLATE utf8_bin NOT NULL COMMENT '商品码', `image` varchar(200) COLLATE utf8_bin NOT NULL COMMENT '图片', `description` varchar(400) COLLATE utf8_bin DEFAULT NULL COMMENT '描述信息', `status` int(11) NOT NULL DEFAULT '1' COMMENT '0 停售 1 起售', `sort` int(11) NOT NULL DEFAULT '0' COMMENT '顺序', `create_time` datetime NOT NULL COMMENT '创建时间', `update_time` datetime NOT NULL COMMENT '更新时间', `create_user` bigint(20) NOT NULL COMMENT '创建人', `update_user` bigint(20) NOT NULL COMMENT '修改人', `is_deleted` int(11) NOT NULL DEFAULT '0' COMMENT '是否删除', PRIMARY KEY (`id`) USING BTREE, UNIQUE KEY `idx_dish_name` (`name`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='菜品管理'; \"]},\"378\":{\"h\":\"4. setmeal：套餐表\",\"t\":[\"CREATE TABLE `setmeal` ( `id` bigint(20) NOT NULL COMMENT '主键', `category_id` bigint(20) NOT NULL COMMENT '菜品分类id', `name` varchar(64) COLLATE utf8_bin NOT NULL COMMENT '套餐名称', `price` decimal(10,2) NOT NULL COMMENT '套餐价格', `status` int(11) DEFAULT NULL COMMENT '状态 0:停用 1:启用', `code` varchar(32) COLLATE utf8_bin DEFAULT NULL COMMENT '编码', `description` varchar(512) COLLATE utf8_bin DEFAULT NULL COMMENT '描述信息', `image` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '图片', `create_time` datetime NOT NULL COMMENT '创建时间', `update_time` datetime NOT NULL COMMENT '更新时间', `create_user` bigint(20) NOT NULL COMMENT '创建人', `update_user` bigint(20) NOT NULL COMMENT '修改人', `is_deleted` int(11) NOT NULL DEFAULT '0' COMMENT '是否删除', PRIMARY KEY (`id`) USING BTREE, UNIQUE KEY `idx_setmeal_name` (`name`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='套餐'; \"]},\"379\":{\"h\":\"5. setmeal_dish：菜品与套餐关系表\",\"t\":[\"CREATE TABLE `setmeal_dish` ( `id` bigint(20) NOT NULL COMMENT '主键', `setmeal_id` varchar(32) COLLATE utf8_bin NOT NULL COMMENT '套餐id ', `dish_id` varchar(32) COLLATE utf8_bin NOT NULL COMMENT '菜品id', `name` varchar(32) COLLATE utf8_bin DEFAULT NULL COMMENT '菜品名称 （冗余字段）', `price` decimal(10,2) DEFAULT NULL COMMENT '菜品原价（冗余字段）', `copies` int(11) NOT NULL COMMENT '份数', `sort` int(11) NOT NULL DEFAULT '0' COMMENT '排序', `create_time` datetime NOT NULL COMMENT '创建时间', `update_time` datetime NOT NULL COMMENT '更新时间', `create_user` bigint(20) NOT NULL COMMENT '创建人', `update_user` bigint(20) NOT NULL COMMENT '修改人', `is_deleted` int(11) NOT NULL DEFAULT '0' COMMENT '是否删除', PRIMARY KEY (`id`) USING BTREE ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='套餐菜品关系'; \"]},\"380\":{\"h\":\"6. dish_flavor：菜品口味关系表\",\"t\":[\"CREATE TABLE `dish_flavor` ( `id` bigint(20) NOT NULL COMMENT '主键', `dish_id` bigint(20) NOT NULL COMMENT '菜品', `name` varchar(64) COLLATE utf8_bin NOT NULL COMMENT '口味名称', `value` varchar(500) COLLATE utf8_bin DEFAULT NULL COMMENT '口味数据list', `create_time` datetime NOT NULL COMMENT '创建时间', `update_time` datetime NOT NULL COMMENT '更新时间', `create_user` bigint(20) NOT NULL COMMENT '创建人', `update_user` bigint(20) NOT NULL COMMENT '修改人', `is_deleted` int(11) NOT NULL DEFAULT '0' COMMENT '是否删除', PRIMARY KEY (`id`) USING BTREE ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='菜品口味关系表'; \"]},\"381\":{\"h\":\"7. user：用户表\",\"t\":[\"CREATE TABLE `user` ( `id` bigint(20) NOT NULL COMMENT '主键', `name` varchar(50) COLLATE utf8_bin DEFAULT NULL COMMENT '姓名', `phone` varchar(100) COLLATE utf8_bin NOT NULL COMMENT '手机号', `sex` varchar(2) COLLATE utf8_bin DEFAULT NULL COMMENT '性别', `id_number` varchar(18) COLLATE utf8_bin DEFAULT NULL COMMENT '身份证号', `avatar` varchar(500) COLLATE utf8_bin DEFAULT NULL COMMENT '头像', `status` int(11) DEFAULT '0' COMMENT '状态 0:禁用，1:正常', PRIMARY KEY (`id`) USING BTREE ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='用户信息'; \"]},\"382\":{\"h\":\"8. address_book：地址表\",\"t\":[\"CREATE TABLE `address_book` ( `id` bigint(20) NOT NULL COMMENT '主键', `user_id` bigint(20) NOT NULL COMMENT '用户id', `consignee` varchar(50) COLLATE utf8_bin NOT NULL COMMENT '收货人', `sex` tinyint(4) NOT NULL COMMENT '性别 0 女 1 男', `phone` varchar(11) COLLATE utf8_bin NOT NULL COMMENT '手机号', `province_code` varchar(12) CHARACTER SET utf8mb4 DEFAULT NULL COMMENT '省级区划编号', `province_name` varchar(32) CHARACTER SET utf8mb4 DEFAULT NULL COMMENT '省级名称', `city_code` varchar(12) CHARACTER SET utf8mb4 DEFAULT NULL COMMENT '市级区划编号', `city_name` varchar(32) CHARACTER SET utf8mb4 DEFAULT NULL COMMENT '市级名称', `district_code` varchar(12) CHARACTER SET utf8mb4 DEFAULT NULL COMMENT '区级区划编号', `district_name` varchar(32) CHARACTER SET utf8mb4 DEFAULT NULL COMMENT '区级名称', `detail` varchar(200) CHARACTER SET utf8mb4 DEFAULT NULL COMMENT '详细地址', `label` varchar(100) CHARACTER SET utf8mb4 DEFAULT NULL COMMENT '标签', `is_default` tinyint(1) NOT NULL DEFAULT '0' COMMENT '默认 0 否 1是', `create_time` datetime NOT NULL COMMENT '创建时间', `update_time` datetime NOT NULL COMMENT '更新时间', `create_user` bigint(20) NOT NULL COMMENT '创建人', `update_user` bigint(20) NOT NULL COMMENT '修改人', `is_deleted` int(11) NOT NULL DEFAULT '0' COMMENT '是否删除', PRIMARY KEY (`id`) USING BTREE ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='地址管理'; \"]},\"383\":{\"h\":\"9. shopping_cart：购物车表\",\"t\":[\"CREATE TABLE `shopping_cart` ( `id` bigint(20) NOT NULL COMMENT '主键', `name` varchar(50) COLLATE utf8_bin DEFAULT NULL COMMENT '名称', `image` varchar(100) COLLATE utf8_bin DEFAULT NULL COMMENT '图片', `user_id` bigint(20) NOT NULL COMMENT '主键', `dish_id` bigint(20) DEFAULT NULL COMMENT '菜品id', `setmeal_id` bigint(20) DEFAULT NULL COMMENT '套餐id', `dish_flavor` varchar(50) COLLATE utf8_bin DEFAULT NULL COMMENT '口味', `number` int(11) NOT NULL DEFAULT '1' COMMENT '数量', `amount` decimal(10,2) NOT NULL COMMENT '金额', `create_time` datetime DEFAULT NULL COMMENT '创建时间', PRIMARY KEY (`id`) USING BTREE ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='购物车'; \"]},\"384\":{\"h\":\"10. order：订单表\",\"t\":[\"CREATE TABLE `orders` ( `id` bigint(20) NOT NULL COMMENT '主键', `number` varchar(50) COLLATE utf8_bin DEFAULT NULL COMMENT '订单号', `status` int(11) NOT NULL DEFAULT '1' COMMENT '订单状态 1待付款，2待派送，3已派送，4已完成，5已取消', `user_id` bigint(20) NOT NULL COMMENT '下单用户', `address_book_id` bigint(20) NOT NULL COMMENT '地址id', `order_time` datetime NOT NULL COMMENT '下单时间', `checkout_time` datetime NOT NULL COMMENT '结账时间', `pay_method` int(11) NOT NULL DEFAULT '1' COMMENT '支付方式 1微信,2支付宝', `amount` decimal(10,2) NOT NULL COMMENT '实收金额', `remark` varchar(100) COLLATE utf8_bin DEFAULT NULL COMMENT '备注', `phone` varchar(255) COLLATE utf8_bin DEFAULT NULL, `address` varchar(255) COLLATE utf8_bin DEFAULT NULL, `user_name` varchar(255) COLLATE utf8_bin DEFAULT NULL, `consignee` varchar(255) COLLATE utf8_bin DEFAULT NULL, PRIMARY KEY (`id`) USING BTREE ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='订单表'; \"]},\"385\":{\"h\":\"11. order_detail：订单明细表\",\"t\":[\"CREATE TABLE `order_detail` ( `id` bigint(20) NOT NULL COMMENT '主键', `name` varchar(50) COLLATE utf8_bin DEFAULT NULL COMMENT '名字', `image` varchar(100) COLLATE utf8_bin DEFAULT NULL COMMENT '图片', `order_id` bigint(20) NOT NULL COMMENT '订单id', `dish_id` bigint(20) DEFAULT NULL COMMENT '菜品id', `setmeal_id` bigint(20) DEFAULT NULL COMMENT '套餐id', `dish_flavor` varchar(50) COLLATE utf8_bin DEFAULT NULL COMMENT '口味', `number` int(11) NOT NULL DEFAULT '1' COMMENT '数量', `amount` decimal(10,2) NOT NULL COMMENT '金额', PRIMARY KEY (`id`) USING BTREE ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='订单明细表'; \"]},\"386\":{\"h\":\"搭建项目\",\"t\":[\"使用Maven搭建SpringBoot项目。\"]},\"387\":{\"h\":\"1. new Project\"},\"388\":{\"h\":\"2. 项目结构\"},\"389\":{\"h\":\"3. 添加依赖\",\"t\":[\"这里只列出基本依赖，后续开发中需要什么依赖，再导入。\",\"<dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> <scope>compile</scope> </dependency> <dependency> <groupId>com.baomidou</groupId> <artifactId>mybatis-plus-boot-starter</artifactId> <version>3.4.2</version> </dependency> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.18.20</version> </dependency> <dependency> <groupId>com.alibaba</groupId> <artifactId>fastjson</artifactId> <version>1.2.76</version> </dependency> <dependency> <groupId>commons-lang</groupId> <artifactId>commons-lang</artifactId> <version>2.6</version> </dependency> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <scope>runtime</scope> </dependency> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid-spring-boot-starter</artifactId> <version>1.1.23</version> </dependency> </dependencies> \"]},\"390\":{\"h\":\"4. 基本配置\",\"t\":[\"在application.yml文件中进行基本配置。\",\"server: port: 8080 spring: application: name: reggie datasource: druid: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://localhost:3306/reggie?serverTimezone=Asia/Shanghai username: root password: 1234 mybatis-plus: configuration: map-underscore-to-camel-case: true log-impl: org.apache.ibatis.logging.stdout.StdOutImpl global-config: db-config: id-type: ASSIGN_ID \"]},\"391\":{\"h\":\"前端代码\",\"t\":[\"提示\",\"因为是SpringBoot项目，关注点在后端，前端代码已经提供好了，可以直接下载。 可以选择在放在后端的resource目录中部署，也可以单独部署。\",\"单独部署：需要使用Nginx代理\",\"放入后端的resource：需要设置静态资源映射\"]},\"392\":{\"h\":\"1. 下载\",\"t\":[\"这些代码是使用纯H5写的，参考意义不大，直接使用即可。\",\"下载用户端代码-front\",\"下载后台代码-backend\"]},\"393\":{\"h\":\"2. 设置静态资源映射\",\"t\":[\"把前端的静态资源放在resource目录中，然后设置静态资源映射。\",\"@Slf4j @Configuration public class WebMvcConfig extends WebMvcConfigurationSupport { @Override protected void addResourceHandlers(ResourceHandlerRegistry registry) { log.info(\\\"开始静态资源映射\\\"); registry.addResourceHandler(\\\"/backend/**\\\").addResourceLocations(\\\"classpath:/backend/\\\"); registry.addResourceHandler(\\\"/front/**\\\").addResourceLocations(\\\"classpath:/front/\\\"); } } \"]},\"394\":{\"h\":\"3. 启动项目\",\"t\":[\"启动项目，访问后台：http://localhost:8080/backend/index.html\"]},\"395\":{\"h\":\"-> Map\",\"t\":[\"介绍\",\"该项目来自于黑马程序员的 瑞吉外卖\"]},\"396\":{\"h\":\"项目介绍\",\"t\":[\"本项目（瑞吉外卖）是专门为餐饮企业(餐厅、饭店)定制的一款软件产品，包括系统管理后台和移动端应用两部分。\",\"系统管理后台：主要提供给餐饮企业内部员工使用，可以对餐厅的菜品、套餐、订单等进行管理维护。\",\"移动端应用：主要提供给消费者使用，可以在线浏览菜品、添加购物车、下单等。\"]},\"397\":{\"h\":\"原型图\",\"t\":[\"瑞吉外卖前台（用户端）\",\"瑞吉外卖后台（管理端）\"]},\"398\":{\"h\":\"技术选型\",\"t\":[\"前端：H5、Vue、ElementUI\",\"后端：Spring Boot\",\"数据层：MyBatis Plus、Redis\",\"服务：Nginx\",\"工具：Maven、Swagger\"]},\"399\":{\"h\":\"功能清单\",\"t\":[\"后台系统\",\"权限管理：登录、退出\",\"员工管理：新增、修改、列表、禁用\",\"分类管理：新增、修改、列表、删除\",\"菜品管理：新增、修改、列表、删除\",\"套餐管理：新增、修改、列表、删除、停售\",\"订单管理：列表、状态\",\"用户端应用\",\"登录：手机号、微信\",\"个人中心：地址管理、历史订单\",\"浏览：菜品、套餐\",\"购物车：添加购物车、清空购物车\",\"下单\"]},\"400\":{\"h\":\"角色介绍\",\"t\":[\"管理员：后台系统超管，拥有所有权限\",\"员工：后台系统普通员工，仅能管理菜品和订单\",\"用户：使用用户端应用\"]},\"401\":{\"h\":\"1-1. String\",\"t\":[\"提示\",\"位置 class: Libraries=> java=> lang=> String.java\",\"创建String\",\"String s1 = \\\"javaEE\\\"; //字面量方式：常用,会存入字符串常量池 String s1 = new String(\\\"javaEE\\\"); //构造函数方式 \"]},\"402\":{\"h\":\"Ⅰ. 属性\"},\"403\":{\"h\":\"1. length\",\"t\":[\"返回字符串的长度，这里是字符长度，与编码无关。\",\"int length() ========================= String s1 = \\\"你OK\\\"; System.out.println(s1.length()); //3 \"]},\"404\":{\"h\":\"2. equals\",\"t\":[\"String类对equals进行重写，比较的是内容是否相同，而非内存地址。\",\"boolean equals(Object obj); ================================== String s1 = \\\"aa\\\"; String s2 = \\\"aa\\\"; boolean res1 = s1.equals(s2); String s3 = new String(\\\"aa\\\"); String s4 = new String(\\\"aa\\\"); boolean res2 = s3.equals(s4); System.out.println(res1); //true System.out.println(res2); //true \"]},\"405\":{\"h\":\"3. equalsIgnoreCase\",\"t\":[\"equals的不区分大小写版本。\",\"boolean equalsIgnoreCase(String anothrerString); ================================= String s1 = \\\"aa\\\"; String s2 = \\\"Aa\\\"; System.out.println(s1.equals(s2)); //false System.out.println(s1.equalsIgnoreCase(s2)); //true \"]},\"406\":{\"h\":\"Ⅱ. 获取\"},\"407\":{\"h\":\"1. charAt\",\"t\":[\"返回指定索引处的字符，如果查询的索引越界了就会报越界异常。\",\"char charAt(int index); ========================= String s2 = \\\"helloGoogle\\\"; System.out.println(s2.charAt(1));//e \"]},\"408\":{\"h\":\"2. indexOf\",\"t\":[\"返回指定字符串在此字符串中第一次出现的索引。\",\"第二个参数可选，表示从该索引处开始找；若未找到目标字符串，则返回-1；\",\"int indexOf(String str,int fromIndex); ========================================================== String s1 = \\\"hel elo\\\"; System.out.println(s1.indexOf(\\\"el\\\")); //1 System.out.println(s1.indexOf(\\\"el\\\",3)); //4 \"]},\"409\":{\"h\":\"3. lastIndexOf\",\"t\":[\"返回指定子字符串在此字符串中最后一次出现的索引，可以有第二个参数：formIndex，从该索引处反向搜索 该方法如果未找到，将返回-1；\",\"int lastIndexOf(String str,int fromIndex); ========================================================== String s1 = \\\"hel elo\\\"; System.out.println(s1.lastIndexOf(\\\"el\\\")); System.out.println(s1.lastIndexOf(\\\"el\\\",3)); \"]},\"410\":{\"h\":\"Ⅲ. 检测与比较\"},\"411\":{\"h\":\"1. isEmpty\",\"t\":[\"判断是否是空字符串，算法是：value.length==0\",\"boolean isEmpty(); =================================== String s3 = \\\" \\\";//空格不是空字符串 System.out.println(s3.isEmpty());//false \"]},\"412\":{\"h\":\"2. compareTo\",\"t\":[\"比较两个字符串的大小，算法：比较字符的ASCII，从第一个字符开始比较，相等就比较下一个。\",\"返回值：\",\"0：相当；\",\">0：左边的大；\",\"<0：右边的大。\",\"int compareTo(String anotherString); =================================== String s3 = \\\"ab\\\"; String s4 = \\\"ac\\\"; System.out.println(s3.compareTo(s4));//-1 \"]},\"413\":{\"h\":\"3. endsWith\",\"t\":[\"测试此字符串是否以指定的后缀结束。\",\"boolean endsWith(String suffix); ========================================================== String s1 = \\\"hello\\\"; System.out.println(s1.endsWith(\\\"lo\\\")); //true \"]},\"414\":{\"h\":\"4. startsWith\",\"t\":[\"测试此字符串是否以指定潜在开始，第二个参数toffset，可选，表示舍去前面N个字符后，开始比较。\",\"boolean startWith(String prefix,int toffset); ========================================================== String s1 = \\\"hello\\\"; System.out.println(s1.startsWith(\\\"ll\\\")); //false System.out.println(s1.startsWith(\\\"ll\\\",2)); //true \"]},\"415\":{\"h\":\"5. contains\",\"t\":[\"查询字符串是否包含某个字符串\",\"boolean contains(CharSequence s); //CharSequence可以看做字符串 ========================================================== String s1 = \\\"hello\\\"; System.out.println(s1.contains(\\\"ll\\\")); //true \"]},\"416\":{\"h\":\"Ⅳ. 修改\",\"t\":[\"String类有不可变性，这里的修改是新创建了个一个字符串并返回，而不是修改了源字符串。\"]},\"417\":{\"h\":\"1. tolowerCase\",\"t\":[\"将所有字符转为小写。\",\"注意：字符串本身没有改变，返回的是新的字符串。\",\"String toLowerCase(); ========================================================== String s1 = \\\"FUck YoU\\\"; String newS1 = s1.toLowerCase(); System.out.println(s1); //FUck YoU ,源字符串没有变化 System.out.println(newS1); //fuck you \"]},\"418\":{\"h\":\"2. toUpperCase\",\"t\":[\"将所有字符转为大写。\",\"String toUpperCase(); ========================================================== String s1 = \\\"FUck YoU\\\"; String newS1 = s1.toUpperCase(); System.out.println(s1); //FUck YoU System.out.println(newS1); //FUCK YOU \"]},\"419\":{\"h\":\"3. trim\",\"t\":[\"注意\",\"暂时没有找到只去除一边空白的方法。\",\"去除字符串首尾空白。\",\"String trim(); ========================================================== String s7 = \\\" ok,fuck you \\\"; System.out.println(s7.trim()); //ok,fuck you \"]},\"420\":{\"h\":\"4. concat\",\"t\":[\"连接字符串，等价于 \\\"+\\\"，将参数字符串连接到此字符串的结尾。\",\"String concat(String str); //参数可以是字符串或代表字符串的变量 ========================================================== String s1 = \\\"hello\\\"; String s2 = s1.concat(\\\" world\\\"); System.out.println(s2); //hello world \"]},\"421\":{\"h\":\"5. substring\",\"t\":[\"字符串截取。\",\"参数1：beginIndex：开始截取的字符串索引位置\",\"参数2：endIndex：字符串截取的end位置，可以省略第二个参数，默认是截取到末尾。\",\"String substring(int beginIndex,int endIndex); ========================================================== String s1 = \\\"love,dead and robot\\\"; String newS1 = s1.substring(1); String newS1_2 = s1.substring(5, 10); System.out.println(newS1); //ove,dead and robot System.out.println(newS1_2); //dead \"]},\"422\":{\"h\":\"Ⅴ. 类型转换\",\"t\":[\"包括：String转基本数据类型和基本数据类型转String\"]},\"423\":{\"h\":\"1. Xxx.parseXxx\",\"t\":[\"String转基本数据类型（包装类）。 转不同的数据类型，需要调用对应包装类的静态方法：parseXxx(str)。\",\"注意：char类型没有parseXxx方法；boolean类型的字符串只有true（不区分大小写）可以转为true，其他的都是false\",\"byte Byte.parseByte(String s); //String -> byte short Short.parseByte(String s); //String -> short int Integer.parseInt(String s); //String -> int long Long.parseLong(String s); //String -> long float Float.parseFloat(String s); //String -> float double Double.parseDouble(String s); //String -> double boolean Boolean.parseBoolean(String s); //String -> boolean ========================================================== String s1 = \\\"123\\\"; int intS1 = Integer.parseInt(s1); System.out.println(intS1); //123 \"]},\"424\":{\"h\":\"2. valueOf\",\"t\":[\"基本数据类型转String类型，也可以使用 + “” 取代。\",\"valueOf根据参数数据类型的不同，有多个重构方法。\",\"参数类型可以为：8种基本数据类型（包括包装类）、char[]\",\"string valueOf(int i); //参数可以是8种基本数据类型 string valueOf(char[] c); //参数可以是char[],转为string是将所有char连接在一起 string valueOf(Object obj);//参数也可以是引用数据类型 ========================================================== char[] arr = {'a','b','c'}; String s1 = String.valueOf(arr); System.out.println(s1);//abc \"]},\"425\":{\"h\":\"3. toCharArray\",\"t\":[\"将String转为char[]。\",\"char[] toCharArray(); ========================================================== String str = \\\"love dead & robots\\\"; char[] chars = str.toCharArray(); System.out.println(Arrays.toString(chars)); //[l, o, v, e, , d, e, a, d, , &, , r, o, b, o, t, s] \",\"char[]转String 通过String的一个特殊构造器，可以将char[]转为String。\",\"char[] arr = {'a','b','c'}; String s = new String(arr);//构造函数的参数可以是一个char[]类型的数组 System.out.println(s); \"]},\"426\":{\"h\":\"4. getBytes\",\"t\":[\"编码：将String转为byte[]数组，byte[]是ASCII编码组成的数组\",\"字符集：String 与 byte[]（编码和解码）时，字符集必须一致，不然会乱码 \",\"在UTF8字符集中，一个字母用1个字符表示，一个中文用3个字符表示\",\"如果指定了字符集：将可能抛出异常，需要对异常进行处理\",\"byte[] getBytes(String charsetName);//参数可选，默认是UTF8 ========================================================== String s1 = \\\"Dio侠\\\"; byte[] bytes = s1.getBytes(); System.out.println(Arrays.toString(bytes)); //[68, 105, 111, -28, -66, -96] //使用了指定字符集的参数，就需要进行异常处理 try { byte[] gbk = s1.getBytes(\\\"gbk\\\"); System.out.println(Arrays.toString(gbk)); //[68, 105, 111, -49, -64] } catch (UnsupportedEncodingException e) { e.printStackTrace(); } \",\"解码 解码就是将byte[]数组转为String。\",\"方式：调用String的构造器，String有一个构造器是可以接受byte[]类型的。\",\"构造器：同时，该构造器可以接受第二个参数，来指定编码的字符集，默认是UTF8。\",\"byte[] bytes = {68, 105, 111, -28, -66, -96}; String s1 = new String(bytes); System.out.println(s1); //Dio侠 //如果使用第二个参数来指定字符集，就需要处理异常 try { String s2 = new String(bytes, \\\"gbk\\\"); System.out.println(s2);//Dio渚�,错误的字符集将解码错误 } catch (UnsupportedEncodingException e) { e.printStackTrace(); } \"]},\"427\":{\"h\":\"Ⅵ. 正则\",\"t\":[\"String类里也有很多涉及正则的方法。\"]},\"428\":{\"h\":\"1. replace\"},\"429\":{\"h\":\"1.1 replace：char替换\",\"t\":[\"返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。\",\"String replace(char oldChar, char newChar); String s1 = \\\"I2bat8 man\\\"; System.out.println(s1.replace('m','g'));//I2bat8 gan \"]},\"430\":{\"h\":\"1.2 replace：str替换\",\"t\":[\"使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。\",\"String replace(CharSequence target, CharSequence replacement); String s1 = \\\"I2bat8 man\\\"; System.out.println(s1.replace(\\\"man\\\",\\\"van\\\")); //I2bat8 van \"]},\"431\":{\"h\":\"1.3 replaceAll：正则全部替换\",\"t\":[\"使用给定的replacement 替换此字符串所有匹配给定的正则表达式的子字符串。\",\"String replaceAll(String regex, String replacement); String s1 = \\\"I2bat8 man\\\"; System.out.println(s1.replaceAll(\\\"\\\\\\\\d+\\\",\\\",\\\")); //I,bat, man \"]},\"432\":{\"h\":\"1.4 replaceFirst：正则替换第一个子字符串\",\"t\":[\"使用给定的replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。\",\"String replaceFirst(String regex, String replacement); String s1 = \\\"I2bat8 man\\\"; System.out.println(s1.replaceFirst(\\\"\\\\\\\\d+\\\",\\\",\\\"));//I,bat8 man \"]},\"433\":{\"h\":\"2. matches\",\"t\":[\"告知此字符串是否匹配给定的正则表达式。\",\"boolean matches(String regex); String s2 = \\\"1234\\\"; System.out.println(s2.matches(\\\"\\\\\\\\d+\\\")); //true \"]},\"434\":{\"h\":\"3. split\",\"t\":[\"根据给定正则表达式的匹配拆分此字符串。\",\"可以指定第二个参数：limit，表示切片最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中\",\"返回值：返回值是个字符串数组，而非字符串\",\"String[] split(String regex); String[] split(String regex, int limit); String s3 = \\\"I am Bat Van\\\"; String[] s4 = s3.split(\\\" \\\"); //根据空格分割 System.out.println(s4[1]); //am \"]},\"435\":{\"h\":\"1-2. StringBuffer\",\"t\":[\"提示\",\"Libraries>java>lang StringBuffer.java Libraries>java>lang StringBuilder\"]},\"436\":{\"h\":\"Ⅰ. 介绍\"},\"437\":{\"h\":\"1. 简介\"},\"438\":{\"h\":\"1.1 StringBuffer\",\"t\":[\"StringBuffer也是个字符串类，代表可变的字符序列吗，可以对字符串内容进行增删，此时不会产生新的对象（可变性）。\",\"StringBuffer很多方法与String是相同的。\"]},\"439\":{\"h\":\"1.2 StringBuilder\",\"t\":[\"在功能上，StringBuilder和StringBuffer是一样的。\",\"区别是：StringBuffer是线程安全的，StringBuilder是线程不安全的。\"]},\"440\":{\"h\":\"2. 结构\",\"t\":[\"//StringBuffer结构 public final class StringBuffer extends AbstractStringBuilder implements Serializable,CharSequence{ private transient char[] toStringCache; static final long serialVersionUID = 3388685877147921107L; } //StringBuilder结构 public final class StringBuilder extends AbstractStringBuilder implements Serializable,CharSequence{ static final long serialVersionUID = 4383685877147921099L; } \"]},\"441\":{\"h\":\"3. 创建StringBuffer对象\",\"t\":[\"StringBuffer 类不同于String ，其对象必须使用构造器生成。有三个构造器：\",\"StringBuffer() ：初始容量为16的字符串缓冲区\",\"StringBuffer(int size) ：构造指定容量的字符串缓冲区\",\"StringBuffer(String str) ：将内容初始化为指定字符串内容\",\"StringBuffer sb1 = new StringBuffer(); StringBuffer sb2 = new StringBuffer(100); StringBuffer sb3 = new StringBuffer(\\\"Dickman\\\"); \"]},\"442\":{\"h\":\"4. String、StringBuffer、StringBuilder对比\",\"t\":[\"String：不可变的字符序列；底层使用final char[]存储\",\"StringBuffer：可变的字符序列；线程安全的，效率低；底层使用char[]存储\",\"StringBuilder：可变的字符序列；jdk5.0新增的，线程不安全的，效率高；底层使用char[]存储\"]},\"443\":{\"h\":\"5. 源码分析\"},\"444\":{\"h\":\"5.1 String源码分析\",\"t\":[\"String的底层是将字符保存在char[]数组中的，且是final不可变的（内容和长度都不可变）。\",\"String str = new String();//char[] value = new char[0]; String str1 = new String(\\\"ab\\\");//char[] value = new char[]{'a','b'}; \"]},\"445\":{\"h\":\"5.2 StringBuffer分析\",\"t\":[\"StringBuffer底层也是保存到char数组中的，但是这个char[]不是final，且默认有16个长度，因此就具有了可变性。\",\"//底层默认创建了16个长度的char数组 StringBuffer sb1 = new String();//char[] value = new char[16] //添加操作 sb1.append('a');//value[0] = 'a'; sb1.append('b');//value[1] = 'b'; \"]},\"446\":{\"h\":\"5.3 StringBuffer扩容\",\"t\":[\"StringBuffer默认长度是16，当添加的字符串超过16时，会自动进行扩容，默认情况下，扩容为原来容量的2倍 + 2，同时将原有数组中的元素复制到新的数组中。\"]},\"447\":{\"h\":\"6. 对比String、StringBuffer、StringBuilder的效率\",\"t\":[\"经过简单的循环向字符串中添加数字，从0添加到两万。耗时大致分别为：\",\"StringBuffer：5ms\",\"StringBuilder：2ms\",\"String：1139ms\"]},\"448\":{\"h\":\"7. 三种创建字符串方式的选择\",\"t\":[\"有线程安全：StringBuffer(int capacity)\",\"无线程安全：StringBuilder(int capacity) 总结：优先选择可变的字符串类，为了避免扩容，提高效率，可以指定字符串长度。\"]},\"449\":{\"h\":\"8. StringBuffer方法的特性\",\"t\":[\"可变性：改变StringBuffer内容的方法，会直接改变源StringBuffer，而不是返回一个新的\",\"synchronized：因为StringBuffer是线程安全的，所以StringBuffer的方法上都会带 synchronized\",\"同String的方法：String的方法，一般StringBuffer也能使用 \",\"length：获取字符串内容的长度，这里获取的不是底层char[] 的长度，而是已有的内容的长度\",\"indexOf：返回指定字符串在此字符串第一次出现的索引\",\"substring：字符串截取\",\"charAt：返回指定索引处的字符\"]},\"450\":{\"h\":\"Ⅱ. 常用方法\"},\"451\":{\"h\":\"1. length\",\"t\":[\"和String的length方法类似，返回StringBuffer的长度。 这里的长度值得是存入StringBuffer的字符数量count，而不是StringBuffer本身的长度。\",\"int length(); ======================= StringBuffer sb1 = new StringBuffer(); System.out.println(sb1.length());//0 StringBuffer sb2 = new StringBuffer(20); System.out.println(sb2.length()); //0 StringBuffer sb3 = new StringBuffer(\\\"hello\\\"); System.out.println(sb3.length()); //5 \"]},\"452\":{\"h\":\"2. append\",\"t\":[\"字符串拼接，StringBuffer不能使用“+”进行字符串拼接，只能使用append方法。 该方法针对不通数据类型的参数，有多个重构方法，能自动转为String类型的数据类型都可以作为参数。\",\"StringBuffer append(String s);//可以是各种能自动转为String的数据类型 //如果是char[],可以额外指定两个范围参数 StringBuffer append(char[] str, int offset, int len); ========================================= StringBuffer sb1 = new StringBuffer(\\\"Hello\\\"); StringBuffer sb2 = sb1.append(\\\" baby\\\"); System.out.println(sb1); //Hello baby;直接改的源StringBuffer System.out.println(sb2); //Hello baby;直接改的源StringBuffer \"]},\"453\":{\"h\":\"3. delete\",\"t\":[\"删除指定位置的内容\",\"参数1：start：起始位置的index，包含start\",\"参数2：end：结束位置的index，不包含end\",\"StringBuffer delete(int start, int end) ============================ StringBuffer sb1 = new StringBuffer(\\\"Hello Bitman\\\"); sb1.delete(0,6); System.out.println(sb1); //Bitman \"]},\"454\":{\"h\":\"4. replace\",\"t\":[\"字符串替换。\",\"参数1 start：替换其实位置的index（包括start）\",\"参数2 end：替换结束为主的index（不包括end），如果要替换最后一个字符，需要end=length+1\",\"参数3 str：用来替换的字符串\",\"StringBuffer replace(int start, int end, String str); =============================== StringBuffer sb = new StringBuffer(\\\"Hello Batman\\\"); sb.replace(6,sb.length(),\\\"Superman\\\"); System.out.println(sb); // Hello Superman \"]},\"455\":{\"h\":\"5. insert\",\"t\":[\"在指定位置插入内容。\",\"参数1 offset：偏移值，从左开始算，从1开始算（非index）。\",\"参数2 xxx：待插入的内容（可以是任意能转为String的数据类型、包括引用类型） \",\"根据参数2不同的数据类型，有多个重载方法\",\"//参数2可以是任意能转为String的数据类型 StringBuffer insert(int offset, String str); ======================================== StringBuffer sb = new StringBuffer(\\\"Hello Batman\\\"); sb.insert(11,\\\",fuck you\\\"); System.out.println(sb); \"]},\"456\":{\"h\":\"6. reverse\",\"t\":[\"把当前字符序列逆转，即颠倒字符串\",\"StringBuffer reverse(); ========================================= StringBuffer sb = new StringBuffer(\\\"Hello Batman\\\"); sb.reverse(); System.out.println(sb);//namtaB olleH \"]},\"457\":{\"h\":\"1-3. 时间\",\"t\":[\"警告\",\"在开发中，我们采用JDK8新增的时间API，旧的不要再用了。\"]},\"458\":{\"h\":\"Ⅰ. 日期与时间API\"},\"459\":{\"h\":\"1. 旧的时间API\",\"t\":[\"System.currentTimeMillis：获取ms时间戳\",\"java.util.Date：获取日期\",\"java.sql.Date：获取用于SQL的日期\",\"java.text.SimpleDateFormat：格式化和解析日期\",\"Calendar：日历类\"]},\"460\":{\"h\":\"2. JDK8之后新时间API出现的背景\",\"t\":[\"JDK 1.0中包含了一个java.util.Date类，但是它的大多数方法已经在JDK 1.1引入Calendar类之后被弃用了。而Calendar并不比Date好多少。它们面临的问题是：\",\"可变性：像日期和时间这样的类应该是不可变的\",\"偏移性：Date中的年份是从1900开始的，而月份都从0开始\",\"格式化：格式化只对Date有用，Calendar则不行\",\"不是线程安全：不能处理闰秒等\"]},\"461\":{\"h\":\"3. 新时间API介绍\",\"t\":[\"第三次引入的API是成功的，并且Java 8中引入的java.time API 已经纠正了过去的缺陷，将来很长一段时间内它都会为我们服务。\",\"Java 8 吸收了 Joda-Time 的精华，以一个新的开始为 Java 创建优秀的 API。新的 java.time 中包含了所有关于本地日期（LocalDate）、本地时间（LocalTime）、本地日期时间（LocalDateTime）、时区（ZonedDateTime）和持续时间（Duration）的类。历史悠久的 Date 类新增了 toInstant() 方法，用于把 Date 转换成新的表示形式。这些新增的本地化时间日期 API 大大简化了日期时间和本地化的管理。\"]},\"462\":{\"h\":\"4. 新时间日期API包\",\"t\":[\"java.time – 包含值对象的基础包\",\"java.time.chrono – 提供对不同的日历系统的访问\",\"java.time.format – 格式化解析时间和日期\",\"java.time.temporal – 包括底层框架和扩展特性\",\"java.time.zone – 包含时区支持的类\"]},\"463\":{\"h\":\"5. 补充说明\",\"t\":[\"大多数开发者只会用到基础包和format包，也可能会用到temporal包。因此，尽管有68个新的公开类型，大多数开发者，大概将只会用到其中的三分之一。\"]},\"464\":{\"h\":\"Ⅱ. 本地时间\",\"t\":[\"跟本地时间有关的类有三个：LocalDate、LocalTime、LocalDateTime。\",\"这三个类类似于Calendar，但是更方便，且具有不可变性（无法修改源时间）。它们的实例是不可变的对象。它们提供了简单的本地日期或时间，并不包含当前的时间信息，也不包含与时区相关的信息。\"]},\"465\":{\"h\":\"1. LocalDate、LocalTime 和 LocalDateTime\",\"t\":[\"三个类的方法都是类似的，且这三个类具有不可变性，对日期时间进行的修改将返回同样的一个类的对象，而不是修改源数据。这些方法操作的也是日期、时间相关的属性。\"]},\"466\":{\"h\":\"1.1 LocalDate\",\"t\":[\"本地日期，代表IOS格式（yyyy-MM-dd）的日期,可以存储生日、纪念日等日期。\",\"//位置：Libraries>java>time>LocalDate.java [class] public final class LocalDate implements Temporal,TemporalAdjuster, ChronoLocalDate,Serializable{ } \"]},\"467\":{\"h\":\"1.2 LocalTime\",\"t\":[\"本地时间，表示一个时间，而不是日期。\",\"//位置：Libraries>java>time>LocalTime.java [class] public final class LocalTime implements Temporal, TemporalAdjuster, Comparable<LocalTime>, Serializable { } \"]},\"468\":{\"h\":\"1.3 LocalDateTime\",\"t\":[\"本地日期和时间，这是一个最常用的类之一。\",\"//位置：Libraries>java>time>LocalDateTime.java [class] public final class LocalDateTimeimplements Temporal, TemporalAdjuster, ChronoLocalDateTime<LocalDate>, Serializable { } \"]},\"469\":{\"h\":\"2. now\",\"t\":[\"实例化类（无参），这三个类无法直接new实例化，需要借助方法。\",\"LocalDate ldNow = LocalDate.now(); LocalTime ltNow = LocalTime.now(); LocalDateTime ldtNow = LocalDateTime.now(); ======================================== System.out.println(ldNow); //2022-06-09(年-月-日) System.out.println(ltNow); //7:25:17.169(时:分:秒.毫秒) System.out.println(ldtNow); //2022-06-09T17:25:17.169 \"]},\"470\":{\"h\":\"3. of\",\"t\":[\"参数用来指定日期和时间，格式为：yyyy,MM,d,hh,mm,ss 。\",\"LocalDate.of(int year, int month, int dayOfMonth); LocalTime.of(int hour,int minute, int second,int ms);//后两个参数可选 LocalDateTime.of(int year, int month, int dayOfMonthint,int hour,int minute, int second,int ms);//second 和 ms可选 ============================================== LocalDate ld = LocalDate.of(2020, 2, 22); LocalTime lt = LocalTime.of(22, 22, 22,222); LocalDateTime ldt = LocalDateTime.of(2020, 2, 22, 22, 22, 22, 222); \"]},\"471\":{\"h\":\"4. getXxx\",\"t\":[\"获取时间和日期信息，以LocalDateTime类为例：\",\"LocalDateTime ldtNow = LocalDateTime.now(); int year = ldtNow.getYear(); //获取year int month = ldtNow.getMonthValue(); //获取Month int day = ldtNow.getDayOfMonth(); //获取day int hour = ldt.getHour(); //获取hour int minute = ldt.getMinute(); //获取minute int second = ldt.getSecond(); //获取秒 int nano = ldt.getNano(); //获取毫秒 int dayOfYear = ldtNow.getDayOfYear(); //获取现在是一年中的第几天 System.out.println(year); //2022 System.out.println(month); //6 System.out.println(day); //9 System.out.println(hour); //18 System.out.println(minute); //29 System.out.println(second); //41 System.out.println(nano); //328000000 System.out.println(dayOfYear); //160 \"]},\"472\":{\"h\":\"5. withXxx\",\"t\":[\"设置日期时间信息，可以使用withXxx单独设置某个时间维度的时间，以LocalDateTime类为例：\",\"LocalDateTime ldt = LocalDateTime.now(); LocalDateTime ldt1_year = ldt.withYear(1999); //设置year LocalDateTime ldt2_month = ldt.withMonth(9); //设置Month LocalDateTime ldt3_day = ldt.withDayOfMonth(9); //设置day LocalDateTime ldt4_hour = ldt.withHour(3); //设置hour LocalDateTime ldt5_min = ldt.withMinute(23); //设置mins LocalDateTime ldt6_s = ldt.withSecond(10); //设置秒 LocalDateTime ldt7_ms = ldt.withNano(333); //设置毫秒 LocalDateTime ldt8_day_year = ldt.withDayOfYear(100); //设置为当年的第N天 System.out.println(ldt1_year); //1999-06-09T18:21:56.556 System.out.println(ldt2_month); //2022-09-09T18:21:56.556 System.out.println(ldt3_day); //2022-06-09T18:21:56.556 System.out.println(ldt4_hour); //2022-06-09T03:21:56.556 System.out.println(ldt5_min); //2022-06-09T18:23:56.556 System.out.println(ldt6_s); //2022-06-09T18:21:10.556 System.out.println(ldt7_ms); //2022-06-09T18:21:56.000000333 System.out.println(ldt8_day_year); //2022-04-10T18:21:56.556 \"]},\"473\":{\"h\":\"6. plusXxx\",\"t\":[\"增加日期时间，即向当前时间对象上进行指定单位的时间增加。\",\"LocalDateTime ldt = LocalDateTime.now(); LocalDateTime ldt1_year = ldt.plusYears(1); // +年 LocalDateTime ldt2_month = ldt.plusMonths(1); // + month LocalDateTime ldt3_days = ldt.plusDays(1); // +days LocalDateTime ldt4_hour = ldt.plusHours(1); // +Hours LocalDateTime ldt5_min = ldt.plusMinutes(1); // + min LocalDateTime ldt6_s = ldt.plusSeconds(1); //+second LocalDateTime ldt7_ms = ldt.plusNanos(1); //+ms LocalDateTime ldt8_week = ldt.plusWeeks(1); //+week System.out.println(ldt1_year);//2023-06-09T18:37:52.878 System.out.println(ldt2_month);//2022-07-09T18:37:52.878 System.out.println(ldt3_days); System.out.println(ldt4_hour); System.out.println(ldt5_min); System.out.println(ldt6_s); System.out.println(ldt7_ms); System.out.println(ldt8_week);//2022-06-16T18:37:52.878 \"]},\"474\":{\"h\":\"7. minusXxx\",\"t\":[\"减少日期时间，同上，plus变成了minus。\",\"LocalDateTime ldt = LocalDateTime.now(); LocalDateTime ldt1_year = ldt.minusYears(1); LocalDateTime ldt2_month = ldt.minusMonths(1); LocalDateTime ldt3_days = ldt.minusDays(1); LocalDateTime ldt4_hour = ldt.minusHours(1); LocalDateTime ldt5_min = ldt.minusMinutes(1); LocalDateTime ldt6_s = ldt.minusSeconds(1); LocalDateTime ldt7_ms = ldt.minusNanos(1); LocalDateTime ldt8_week = ldt.minusWeeks(1); \"]},\"475\":{\"h\":\"Ⅲ. Instant\",\"t\":[\"提示\",\"位置：Libraries>java>time>Instant.java [class]\",\"类似 java.util.Date类，\",\"Instant：时间线上的一个瞬时点。 这可能被用来记录应用程序中的事件时间戳。\",\"他的功能和方法与java.util.Date类都很像。\",\"public final class Instant implements Temporal,TemporalAdjuster, Comparable<Instant>,Serializable{ } \"]},\"476\":{\"h\":\"1. now\",\"t\":[\"实例化，通过Instant类的now静态方法，获取包含当前时间的Instant对象。\",\"static Instant now(); ================================ Instant now = Instant.now(); System.out.println(now);//2022-06-09T10:51:01.562Z \"]},\"477\":{\"h\":\"2. atOffset\",\"t\":[\"添加时间偏移量，通过now方法获取的Instant对象，表示的时间是格林威治时间，即0时区时间，非本地时间，如果我们需要代表本地时间的对象，需要进行时间偏移，获得一个OffsetDateTime时间对象。\",\"OffsetDateTime atOffset(ZoneOffset offset); ===================================== Instant now = Instant.now(); OffsetDateTime China_time = now.atOffset(ZoneOffset.ofHours(8)); System.out.println(now);//2022-06-09T10:56:20.146Z System.out.println(China_time);//2022-06-09T18:56:20.146+08:00 \"]},\"478\":{\"h\":\"3. toEpochMillion\",\"t\":[\"获取毫秒时间戳。\",\"long toEpochMilli(); ===================================== Instant now = Instant.now(); long ms = now.toEpochMilli(); System.out.println(ms); //1654789042842 \"]},\"479\":{\"h\":\"4. ofEpochMilli\",\"t\":[\"通过毫秒时间戳获取Instant对象，这其实也是实例化Instant类的一种方式。\",\"static Instant ofEpochMilli(long epochMilli);//参数是时间戳 ========================================== long ms = 1654740094502L; Instant time = Instant.ofEpochMilli(ms); System.out.println(time); //2022-06-09T02:01:34.502Z \"]},\"480\":{\"h\":\"Ⅳ. DateTimeFormatter\",\"t\":[\"提示\",\"位置：Libraries>java>time>format>DateTimeFormatter.java [class]\",\"DateTimeFormatter类用来取代之前的SimpleDateFormatter类，用来格式化和解析日期时间。\",\"该类有三种实例化的方式；我们一般使用第三种：自定义格式。实例化后，我们主要用该对象进行日期时间的 格式化和解析。\",\"public final class DateTimeFormatter { } \"]},\"481\":{\"h\":\"1. format\",\"t\":[\"格式化：format方法，日期->字符串\",\"参数是TemporlAccessor，LocalDateTime实现了该接口，可以作为参数。\",\"String format(TemporalAccessor temporal); \"]},\"482\":{\"h\":\"2. parse\",\"t\":[\"解析：parse方法，字符串->日期\",\"参数是CharSequence，String可以作为参数。\",\"TemporalAccessor parse(CharSequence text); \"]},\"483\":{\"h\":\"3. 标准格式\",\"t\":[\"有三种标准格式，每种格式都返回一个DateTimeFormatter对象\",\"ISO_LOCAL_DATE_TIME：日期时间\",\"ISO_LOCAL_DATE：日期\",\"ISO_LOCAL_TIME：时间\",\"DateTimeFormatter isoDateTime = DateTimeFormatter.ISO_LOCAL_DATE_TIME; DateTimeFormatter isoDate = DateTimeFormatter.ISO_LOCAL_DATE; DateTimeFormatter isoTime = DateTimeFormatter.ISO_LOCAL_TIME; \"]},\"484\":{\"h\":\"3.1 格式化\",\"t\":[\"调用format方法，进行格式化，将日期数据转为String，以DATE_TIME为例\",\"DateTimeFormatter isoDateTime = DateTimeFormatter.ISO_LOCAL_DATE_TIME; LocalDateTime ldt = LocalDateTime.now(); String ldtStr = isoDateTime.format(ldt); //进行格式化 System.out.println(ldtStr);//Str:2022-06-10T15:53:22.532 \"]},\"485\":{\"h\":\"3.2 解析\",\"t\":[\"DateTimeFormatter isoDateTime = DateTimeFormatter.ISO_LOCAL_DATE_TIME; String dateTimeStr = \\\"2022-06-10T15:53:22.532\\\"; TemporalAccessor tal = isoDateTime.parse(dateTimeStr); System.out.println(tal);//{},ISO resolved to 2022-06-10T15:53:22.532 \"]},\"486\":{\"h\":\"4. 本地格式\",\"t\":[\"同样有三个静态方法来进行实例化：\",\"ofLocalizedDateTime：日期时间\",\"ofLocalizedDate：日期\",\"ofLocalizedTime：时间\",\"上述三个方法，都有多个参数，来进行格式化，如：\",\"FormatStyle.FULL：2022年3月3日 星期四\",\"FormatStyle.LONG：2022年3月3日 上午01时18分16秒\",\"FormatStyle.MEDIUM：2022-3-3 1:19:21\",\"FormatStyle.SHORT：22-3-3 上午1:19（适用于LocalDate）\",\"注意：参数与实例化方法的配合，有可能无法识别值。\",\"//1.实例化 DateTimeFormatter formatter2 = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.LONG); LocalDateTime ldt2 = LocalDateTime.now(); //2.格式化 String time_str1 = formatter2.format(ldt2); System.out.println(time_str1);//2022年3月3日 上午01时21分07秒 //3.解析 String str2 = \\\"2019年2月18日 下午03时47分16秒\\\"; TemporalAccessor ldt3 = formatter2.parse(str2); System.out.println(ldt3);//{},ISO resolved to 2019-02-18T15:47:16 \"]},\"487\":{\"h\":\"5. 自定义格式\",\"t\":[\"调用ofPattern方法，参数为自定义的日期时间格式。\",\"常用的格式为：yyyy-MM-dd hh:mm:ss\",\"//参数是String，但是要是特定的String DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\\\"yyyy-MM-dd hh:mm:ss\\\"); \"]},\"488\":{\"h\":\"5.1 格式化\",\"t\":[\"DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\\\"yyyy-MM-dd hh:mm:ss\\\"); LocalDateTime ldt = LocalDateTime.now(); String dateTimeStr = formatter.format(ldt); System.out.println(dateTimeStr); //2022-06-10 04:09:26 \"]},\"489\":{\"h\":\"5.2\",\"t\":[\"DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\\\"yyyy-MM-dd hh:mm:ss\\\"); String str = \\\"2022-06-10 04:09:26\\\"; TemporalAccessor ta = formatter.parse(str); \"]},\"490\":{\"h\":\"1-4. 比较器\"},\"491\":{\"h\":\"Ⅰ. 介绍\",\"t\":[\"Java中的对象，正常情况下，只能进行比较：== 或 != 。不能使用 > 或 < 的。 但是在开发场景中，我们需要对多个对象进行排序，言外之意，就需要比较对象的大小。\"]},\"492\":{\"h\":\"1. 对象排序的实质\",\"t\":[\"实际比较的是对象的属性的大小，本质还是比较的基本数据类型。\"]},\"493\":{\"h\":\"2. 排序接口\",\"t\":[\"使用以下两个接口中的任何一个来实现对象的排序\",\"java.lang.Comparable ：自然排序\",\"java.util.Comparator：定制排序\"]},\"494\":{\"h\":\"3. Comparable与Comparator的区别\",\"t\":[\"Comparable 是在集合内部定义的方法实现的排序，Comparator 是在集合外部实现的排序，所以，如想实现排序，就需要在集合外定义Comparator接口的方法或在集合内实现 Comparable接口的方法。\"]},\"495\":{\"h\":\"Ⅱ. Comparable\",\"t\":[\"提示\",\"位置：Libraries>java>lang>Comparable.java 【interface】\",\"Comparable接口，就是比较器里的自然排序接口。 Comparable接口强行对实现它的每个类的对象进行整体排序。这种排序被称为类的自然排序。\",\"public interface Comparable<T>{ public int compareTo(T o); } \"]},\"496\":{\"h\":\"1. 用法\",\"t\":[\"很多JDK内置的类，都实现了Comparable接口，可以直接使用Collection.sort或Arrays.sort进行排序。\",\"对于自定义的类，就需要实现Comparable接口，然后重写接口中的compareTo方法，在compareTo(obj)方法中指明如何比较大小，重写时要满足重写规则。 \",\"之后，如果要比较该类的两个实例大小，就可以调用实例的compareTo方法进行比较了\",\"如果要该类的多个对象排序，也可以使用Collection.sort或Arrays.sort进行排序了。\"]},\"497\":{\"h\":\"2. compareTo\",\"t\":[\"实现 Comparable 的类必须实现 compareTo(Object obj) 方法，两个对象通过 compareTo(Object obj) 方法的返回值来比较大小。\",\"重写compareTo(obj)的规则：\",\"如果当前对象this大于形参对象obj，则返回正整数\",\"如果当前对象this小于形参对象obj，则返回负整数\",\"如果当前对象this等于形参对象obj，则返回零\"]},\"498\":{\"h\":\"3. JDK内置实现\",\"t\":[\"在JDK中，有很多类，已经实现了自然排序接口Comparable。\",\"String：按照字符串中字符的Unicode值进行比较\",\"Character：按照字符的Unicode值来进行比较\",\"数值类型对应的包装类以及BigInteger、BigDecimal：按照它们对应的数值大小进行比较\",\"Boolean：true 对应的包装类实例大于 false 对应的包装类实例\",\"Date、Time等：后面的日期时间比前面的日期时间大\",\"数组、集合\",\"//String的compareTo内置实现源码 public int compareTo(String anotherString) { int len1 = value.length; int len2 = anotherString.value.length; int lim = Math.min(len1, len2); char v1[] = value; char v2[] = anotherString.value; int k = 0; while (k < lim) { char c1 = v1[k]; char c2 = v2[k]; if (c1 != c2) { return c1 - c2; } k++; } return len1 - len2; } //Integer的CompareTo内置实现源码 public int compareTo(Integer anotherInteger) { return compare(this.value, anotherInteger.value); } public static int compare(int x, int y) { return (x < y) ? -1 : ((x == y) ? 0 : 1); } \"]},\"499\":{\"h\":\"4. sort\",\"t\":[\"对于实现了Comparable接口的类，都可以使用Collection.sort或Arrays.sort进行排序。\"]},\"500\":{\"h\":\"5. 使用示例\",\"t\":[\"要求：Person类，根据年龄比较大小，如果年龄相同，就按名字字母进行排序\"]},\"501\":{\"h\":\"5.1 实现Comparable接口，重写CompareTo方法\",\"t\":[\"//这里直接用泛型限制了，数据类型，否则就会允许接收任意Object类进行比较 class Person implements Comparable<Person>{ private int age; private String name; public Person(int age,String name){ this.age = age; this.name = name; } @Override public int compareTo(Person o) { //1.判断数据类型是否相同,由于这里直接用Person限制了因此，可以省略 //if(!(o instanceof Person)){ // throw new RuntimeException(\\\"数据类型不一致\\\"); //} //2.判断这两个对象，是否是同一个对象 if(this == o){ return 0; //同一个对象肯定相等 } //3.先比较年龄属性 if(this.age>o.age){ return 1; }else if(this.age<o.age){ return -1; }else{ //4.当年龄相同时，比较name属性 return this.name.compareTo(o.name);//直接调用String类的compareTo } } @Override public String toString() { return \\\"[\\\"+name+\\\"-\\\"+age+\\\"]\\\"; } } \"]},\"502\":{\"h\":\"5.2 比较：比较两个对象的大小\",\"t\":[\"Person aaron = new Person(10, \\\"Aaron\\\"); Person bob = new Person(10, \\\"Bob\\\"); int res = aaron.compareTo(bob); System.out.println(res);//-1, \"]},\"503\":{\"h\":\"5.3 排序：对多个对象进行排序\",\"t\":[\"Person[] person = new Person[5]; person[0] = new Person(10,\\\"Aaron\\\"); person[1] = new Person(3,\\\"Jinno\\\"); person[2] = new Person(3,\\\"Bob\\\"); person[3] = new Person(23,\\\"Flank\\\"); person[4] = new Person(8,\\\"Jobs\\\"); Arrays.sort(person); System.out.println(Arrays.toString(person)); //[[Bob-3], [Jinno-3], [Jobs-8], [Aaron-10], [Flank-23]] \"]},\"504\":{\"h\":\"Ⅲ. Comparator\",\"t\":[\"提示\",\"位置：Libraries>java>util>Comparator.java 【interface】\",\"Comparator接口是用来实现定制排序的。当元素的类型没有实现java.lang.Comparable接口而又不方便修改代码，或者实现了java.lang.Comparable接口的排序规则不适合当前的操作，那么可以考虑使用 Comparator 的对象来排序，强行对多个对象进行整体排序的比较。\",\"@FunctionalInterface //该接口是个函数式接口 public interface Comparator<T>{ int compare(T o1,T o2); ...; } \"]},\"505\":{\"h\":\"1. 用法\",\"t\":[\"Comparator常作为Collections.sort()或Arrays.sort()的第二个参数（以匿名内部类的方式）。 此时sort方法将按照重写的compare进行排序。\"]},\"506\":{\"h\":\"2. compare\",\"t\":[\"使用Comparator接口，需重写compare(Object o1,Object o2)方法，比较o1和o2的大小 比较规则为：\",\"返回正整数，则表示o1 大于o2 ；\",\"返回0 ，表示相等；\",\"返回负整数，表示o1 小于o2。\"]},\"507\":{\"h\":\"3. 使用示例\"},\"508\":{\"h\":\"3.1 字符串排序\",\"t\":[\"String[] arr = new String[]{\\\"AA\\\",\\\"CC\\\",\\\"KK\\\",\\\"MM\\\",\\\"GG\\\"}; Arrays.sort(arr); System.out.println(Arrays.toString(arr));//[AA, CC, GG, KK, MM] //使用Comparator接口，进行降序排序 Arrays.sort(arr,new Comparator() { public int compare(Object o1,Object o2){ if(!(o1 instanceof String && o2 instanceof String)){ throw new RuntimeException(\\\"类型不一致，无法比较\\\"); } String s1 = (String)o1; String s2 = (String)o2; return -s1.compareTo(s2);//直接用负数将compare改成降序 } }); System.out.println(Arrays.toString(arr));//[MM, KK, GG, CC, AA] \"]},\"509\":{\"h\":\"3.2 自定义类的对象排序\",\"t\":[\"同上，Comparable排序示例，这次要反向进行排序\",\"Arrays.sort(person,new Comparator<Person>(){ @Override public int compare(Person o1, Person o2) { if(o1.getAge() > o2.getAge()) { return -1; }else if(o1.getAge()<o2.getAge()){ return 1; }else{ return -o1.getAge()-o2.getAge(); } } }); System.out.println(Arrays.toString(person)); //[[Flank-23], [Aaron-10], [Jobs-8], [Jinno-3], [Bob-3]] //[[Bob-3], [Jinno-3], [Jobs-8], [Aaron-10], [Flank-23]],这个是之前的 \"]},\"510\":{\"h\":\"1-5. 数学与数值\"},\"511\":{\"h\":\"Ⅰ. Math\",\"t\":[\"提示\",\"位置：rt.jar>java>lang>Math.java 【class】\",\"java.lang.Math 提供了一系列静态方法用于科学计算。其方法的参数和返回为值类型一般为double型。\",\"public final class Math{ private Math(){} } \"]},\"512\":{\"h\":\"1. abs 绝对值\",\"t\":[\"求数值的绝对值，参数是Number类（包含：Byte、short、int、long、float、double）。 比int小的数值类型，会自动转为int：byte、short。\",\"int abs(int a); int abs = Math.abs(-1); System.out.println(abs);//1 \"]},\"513\":{\"h\":\"2. random 随机数\",\"t\":[\"随机数的范围是：[0.0,1.0)，包含0.0，不包含1.0。 返回值是一个伪随机数，在该范围内(近似)均匀分布。\",\"随机数的精确度为：小数点后16位，如果要获取其他范围的值，需要将random结果乘一个倍数。\",\"任意区间随机数公式：[a,b]:(int)(Math.random() * (b - a + 1) )+ a\",\"double random(); double random = Math.random(); System.out.println(random); //0.3190675085212945 int res = (int)Math.ceil(Math.random() * 100);//修改为返回[1,100]间的随机数 System.out.println(res);//30 \"]},\"514\":{\"h\":\"3. ceil 进1取整\",\"t\":[\"进1取整，向上取整，返回大于等于给定参数的最小整数。 返回值类型是double，可以强转为int。\",\"double ceil(double a); double n = 1.1; int ceil = (int)Math.ceil(n); System.out.println(ceil); //2 \"]},\"515\":{\"h\":\"4. floor 舍去小数\",\"t\":[\"舍去小数取整，向下取整，返回小于等于（<=）给定参数的最大整数 。\",\"double floor(double a); double n = 1.99; int floor = (int)Math.floor(n); System.out.println(floor);//1 \"]},\"516\":{\"h\":\"5. round 四舍五入\",\"t\":[\"算法为 Math.floor(x+0.5)，即将原来的数字加上 0.5 后再向下取整。\",\"long round(double a); double n1 = 1.5111; double n2 = 1.4999; long r1 = Math.round(n1); long r2 = Math.round(n2); System.out.println(r1);//2 System.out.println(r2);//1 \"]},\"517\":{\"h\":\"6. PI圆周率\",\"t\":[\"π = 3.141592653589793\",\"public static final double PI = 3.14159265358979323846; double pi = Math.PI; System.out.println(pi); \"]},\"518\":{\"h\":\"7. rint 四舍五入\",\"t\":[\"该函数也是四舍五入，返回与参数最接近的整数，不过返回值类型是double类型的。\",\"double rint(double a); double rint = Math.rint(2.1); long round = Math.round(2.1); System.out.println(rint);//2.0 System.out.println(round);//2 \"]},\"519\":{\"h\":\"8. min 求较小值\",\"t\":[\"参数是Number类型的子类：int、long、flot、double（byte、sort ->int）。\",\"double min(double a, double b); double min1 = Math.min(1, 1.0); double min2 = Math.min(2, 3); System.out.println(min1);//1.0 System.out.println(min2);//2.0 \"]},\"520\":{\"h\":\"9. max 求较大值\",\"t\":[\"double max(double a, double b); double max1 = Math.max(1, 1.0); double max2 = Math.max(2, 3); System.out.println(max1); System.out.println(max2); \"]},\"521\":{\"h\":\"10. 数学公式\",\"t\":[\"exp：返回自然数底数e的参数次方 \",\"以e为底的对数称为自然对数。\",\"log：求log，返回参数的自然数底数的对数值\",\"pow：就次方，返回第一个参数的第二个参数次方\",\"sqrt：求参数的算术平方根\",\"double exp(double a); double log(double a); double pow(double a, double b); double sqrt(double a); double exp = Math.exp(10); System.out.println(exp);//22026.465794806718 double log = Math.log(10); System.out.println(log);//2.302585092994046 double pow = Math.pow(2, 3); System.out.println(pow);//8.0 double sqrt = Math.sqrt(2); System.out.println(sqrt);//1.4142135623730951 \"]},\"522\":{\"h\":\"11. 几何函数\",\"t\":[\"sin：求sin值，double类型\",\"cos：求cos值，double类型\",\"tan：求tan值，double类型\",\"asin：求asin值，double类型\",\"acos：求acos值，double类型\",\"atan：求atan值，double类型\",\"toDegrees：将参数转为角度\",\"toRadians：将角度转为弧度\"]},\"523\":{\"h\":\"Ⅱ. Number\",\"t\":[\"提示\",\"位置：rt.jar>java>lang>Number.java 【abstract】\",\"所有包装类(如：Integer，Long，Byte，Double，Float，Short)都是抽象类Number的子类。 由于Number是抽象类，实际使用的时候，用的都是他的子类（包装类）。\"]},\"524\":{\"h\":\"1. xxxValue\",\"t\":[\"将Number对象的值转换为xxx数据类型并返回。\",\"包装类包括->byte、sort、int、long、float、double\",\"任意一个包装类，转为其他六种基本数据类型\",\"byte byteValue() short shortValue() int intValue() long longValue() float floatValue() double doubleValue() Integer a = 10; double v = a.doubleValue(); System.out.println(v);//10.0 \"]},\"525\":{\"h\":\"2. compareTo\",\"t\":[\"所有Number类的子类都实现了Comparable接口，可以直接调用compareTo比较大小。 注意包装类的数据类型应该与参数数据类型对应。\",\"xxx compareTo(xxx anotherxxx); //xxx是任意包装类 Integer a = 10; int res = a.compareTo(20); System.out.println(res);//-1，a<20 \"]},\"526\":{\"h\":\"3. toString\",\"t\":[\"Number类型转String类型。和String.valueOf效果一样。\",\"String toString(); Double a = 10.1; String str1 = a.toString(); String str2 = String.valueOf(a); System.out.println(str1); //String:10.1 System.out.println(str2); //String:10.1 \"]},\"527\":{\"h\":\"4. valueOf\",\"t\":[\"将基本数据类型、String类型的参数转为包装类对象。 注意：该方法与String.valueOf的效果是相反的。\",\"Xxx valueOf(String s);//Xxx是某种包装类 int a = 10; Integer b1 = Integer.valueOf(a); Integer b2 = a; Integer b3 = Integer.valueOf(\\\"10\\\"); \"]},\"528\":{\"h\":\"5. parseXxx\",\"t\":[\"将String数值字符串转为基本数据类型。\",\"xxx parseXxx(String s);//xxx是基本数据类型 int i = Integer.parseInt(\\\"10\\\"); double d = Double.parseDouble(\\\"20.0\\\"); System.out.println(i); System.out.println(d); \"]},\"529\":{\"h\":\"Ⅲ. BigInteger\",\"t\":[\"提示\",\"位置：rt.jar>java>math>BigInteger 【class】 使用较少，仅了解。\",\"Integer类作为int的包装类，能存储的最大整型值为2 31 -1，Long类也是有限的，最大为2 63 -1。如果要表示再大的整数，不管是基本数据类型还是他们的包装类都无能为力，更不用说进行运算了。\",\"java.math包的BigInteger 可以表示不可变的任意精度的整数。BigInteger 提供所有 Java 的基本整数操作符的对应物，并提供 java.lang.Math 的所有相关方法。另外，BigInteger 还提供以下运算：模算术、GCD 计算、质数测试、素数生成、位操作以及一些其他操作。\",\"//结构 public class BigInteger extends Number implements Comparable<BigInteger>{ ... } //构造器 BigInteger bi = new BigInteger(\\\"12433241123\\\"); \"]},\"530\":{\"h\":\"Ⅳ. BigDecimal\",\"t\":[\"提示\",\"位置：rt.jar>java>math>BigDecimal.java 【class】\",\"一般的Float类和Double类可以用来做科学计算或工程计算，但在商业计算中，到要求数字精度比较高，故用到java.math.BigDecimal类。\",\"原因：十进制值通常没有完全相同的二进制表示形式；十进制数的二进制表示形式可能不精确。\",\"BigDecimal类支持不可变的、任意精度的有符号十进制定点数。\",\"结构\",\"public class BigDecimal extends Number implements Comparable<BigDecimal>{ private final BigInteger intVal; } \",\"构造器\",\"参数可以是double类型的数值，也可以是字符串。如下：字符串参数更加精准\",\"BigDecimal bd1 = new BigDecimal(12345.12121200000001408625394105911254882812555); BigDecimal bd2 = new BigDecimal(\\\"12345.12121200000001408625394105911254882812555\\\"); BigDecimal bd3 = new BigDecimal(12345);//int类型直接用也是很精准的 System.out.println(bd1);//12345.121212000000014086253941059112548828125 System.out.println(bd2);//12345.12121200000001408625394105911254882812555 \",\"BigDecimal的特殊创建方法\",\"//特殊的0、1、10可以这么创建： BigDecimal zero = BigDecimal.ZERO; BigDecimal one = BigDecimal.ONE; BigDecimal ten = BigDecimal.TEN; //简单int、long、double数据的创建 BigDecimal bd = BigDecimal.valueOf(123345.21); \",\"运算\",\"BigDecimal所创建的是对象，我们不能使用传统的+、-、*、/等算术，需要使用特点的方法。\"]},\"531\":{\"h\":\"1. add\",\"t\":[\"加法运算，DigDecimal间不能直接使用 + 。\",\"BigDecimal add(BigDecimal augend); BigDecimal bd1 = new BigDecimal(\\\"123.45\\\"); BigDecimal bd2 = new BigDecimal(\\\"234.56\\\"); BigDecimal bd3 = bd1.add(bd2); System.out.println(bd3);//358.01 \"]},\"532\":{\"h\":\"2. subtract\",\"t\":[\"减法运算。\",\"BigDecimal subtract(BigDecimal subtrahend); BigDecimal bd1 = new BigDecimal(\\\"123.45\\\"); BigDecimal bd2 = new BigDecimal(\\\"234.56\\\"); BigDecimal bd3 = bd1.subtract(bd2); System.out.println(bd3);//-111.11 \"]},\"533\":{\"h\":\"3. multiply\",\"t\":[\"乘法运算。\",\"BigDecimal multiply(BigDecimal multiplicand); BigDecimal bd1 = new BigDecimal(\\\"123.45\\\"); BigDecimal bd2 = new BigDecimal(\\\"234.56\\\"); BigDecimal bd3 = bd1.multiply(bd2); System.out.println(bd3);//28956.4320 \"]},\"534\":{\"h\":\"4. divide\",\"t\":[\"除法运算；当除不尽的时候，会直接抛出异常，报Non-terminating decimal expansion; no exact representable decimal result（这时因为BigDecimal默认的舍入策略是精准模式）。\",\"因此使用时应该尽量采用带有三个参数的重载方法。\",\"参数2是精度，参数3是舍入策略\",\"参数2和3都可选的，如果为了防止不出异常，就必须指定参数3\",\"如果只指定了两个参数，第二个参数默认是：roundingMode\",\"BigDecimal divide(BigDecimal divisor); BigDecimal divide(BigDecimal divisor,int roundingMode); BigDecimal divide(BigDecimal divisor, int scale, int roundingMode) BigDecimal bd1 = new BigDecimal(\\\"10\\\"); BigDecimal bd2 = new BigDecimal(\\\"3\\\"); BigDecimal res = bd1.divide(bd2,2, RoundingMode.CEILING); System.out.println(res);//3.34 \"]},\"535\":{\"h\":\"5. setScale\",\"t\":[\"设置值的精度，有两个作用：\",\"作用1：改变BigDecimal值的精度\",\"作用2：用与divide运算。\",\"改变BigDecimal值的精度时，往往会发生值大小的改变，此时就需要指定一个舍入策略，系统默认的舍入策略不是四舍五入，而是：ROUND_UNNECESSARY = 7（精准模式，不会改变值的大小）。\",\"如果设置的精度，会改变值的大小，就必须显示的指定舍入策略，不然会报错：Rounding necessary。\",\"在进行divide运算时，可能会发生除不尽的情况，这时，就必须指定舍入策略（精度会有默认值，也可以进行指定），不然会报错。\",\"BigDecimal setScale(int newScale);//不指定舍入策略 BigDecimal setScale(int newScale, int roundingMode);//指定舍入策略 BigDecimal bd1 = new BigDecimal(\\\"1.5555\\\"); BigDecimal res1 = bd1.setScale(2, RoundingMode.UP); System.out.println(res1);//1.56 \"]},\"536\":{\"h\":\"6. roundingMode\",\"t\":[\"舍入策略，常配合精度一起使用，比如四舍五入只是舍入策略的一种。 以下舍入策略，既可以取常量名，也可以直接使用int类型的常量值。\",\"ROUND_UP = 0：进一位，在绝对值的角度，往大变 \",\"10/3 = 3.34（精度2），10/3=4（精度0）\",\"10/-3=-3.34（精度2），10/-3=-4（精度0）\",\"ROUND_DOWN = 1：舍去，无效精度外的数值全部舍去，无论正负 \",\"10/3=3.33（精度2），10/3=3（精度0）\",\"10/3=-3.33（精度2），10/-3=-3（精度0）\",\"ROUND_CEILING = 2：正常值下，往大变，正数就进一，负数就舍去 \",\"10/3=3.34（精度2）；10/3=4（精度0）\",\"10/-3=3.33（精度2）；10/-3=-3（精度0）\",\"ROUND_FLOOR = 3：正常值下，往小变，正数就舍去，负数就进一 \",\"10/3=3.33（精度2），10/3=3（精度0）\",\"10/-3=-3.34（精度2）；10/-3=-4（精度0）\",\"ROUND_HALF_UP = 4：在绝对值的角度，四舍五入 \",\"10/3=3.33（精度2），10/3=3（精度0）\",\"10/3=-3.33（精度2），10/-3=-3（精度0）\",\"ROUND_HALF_DOWN = 5：在绝对值的角度，5舍6入 \",\"10/3=3.33（精度2），10/3=3（精度0）\",\"10/3=-3.33（精度2），10/-3=-3（精度0）\",\"ROUND_HALF_EVEN = 6：绝对值角度：0-4舍，6-9入，如果是5，则结果为偶数 \",\"如果是5，结果是偶数，具体舍入都可以。\",\"ROUND_UNNECESSARY = 7：不进行舍入，精准模式。 \",\"如果除不尽，会报错\"]},\"537\":{\"h\":\"7. compareTo\",\"t\":[\"BigDecimal继承了Comparable接口，可以调用compareTo方法比较两个DigDecimal的数值大小。\",\"返回1：>参数；\",\"返回-1：<参数；\",\"返回0：=参数\",\"int compareTo(BigDecimal val); BigDecimal bd1 = new BigDecimal(\\\"10.0\\\"); BigDecimal bd2 = new BigDecimal(\\\"10\\\"); int res = bd1.compareTo(bd2); System.out.println(res);//0,10 == 10.0 \"]},\"538\":{\"h\":\"1-6. File\",\"t\":[\"位置\",\"rt.jar>java>io>File>File.java 【class】\",\"File 能新建、删除、重命名文件和目录，但 File 不能访问文件内容本身。 Java程序中的一个File对象，可能没有一个真实存在的文件或目录。\",\"结构\",\"public class File implements Serializable,Comparable<File>{ private final String path; } \",\"构造器\",\"路径：可以是 绝对路径或者相对路径，默认根路径为项目路径\",\"//1.根据文件路径创建文件对象 public File(String pathname) File f1 = new File(\\\"hello.txt\\\"); File f2 = new File(\\\"D:/Java/workplace/Demo/study/hi.txt\\\"); //2.根据父路径和子路径拼接创建文件对象 public File(String parent,String child) File f3 = new File(\\\"D:/Java/workplace/Demo/study\\\", \\\"img\\\"); //3.根据父File对象拼接子文件路径创建文件对象 public File(File parent,String child) \"]},\"539\":{\"h\":\"Ⅰ. 获取信息\"},\"540\":{\"h\":\"1. getAbsolutePath\",\"t\":[\"获取文件的绝对路径。\",\"String getAbsolutePath() File file = new File(\\\"File/a.txt\\\"); String path = file.getAbsolutePath(); System.out.println(path);//D:\\\\Java\\\\workplace\\\\Learn\\\\File\\\\a.txt \"]},\"541\":{\"h\":\"2. getPath\",\"t\":[\"获取文件路径，定义的时候是绝对路径，就获取绝对路径，是相对路径就获取相对路径。\",\"String getPath(); File file = new File(\\\"File/a.txt\\\"); String path = file.getPath(); System.out.println(path);//File\\\\a.txt \"]},\"542\":{\"h\":\"3. getName\",\"t\":[\"获取文件的名称（包含后缀）。\",\"String getName(); File file = new File(\\\"File/a.txt\\\"); String fileName = file.getName(); System.out.println(fileName);//a.txt \"]},\"543\":{\"h\":\"4. getParent\",\"t\":[\"获取当前文件上层文件目录的路径，若无，则返回null；\",\"String getParent(); File file = new File(\\\"File/a.txt\\\"); String parentPath = file.getParent(); System.out.println(parentPath);//File \"]},\"544\":{\"h\":\"5. length\",\"t\":[\"获取文件长度，指的是获取文件的大小（单位byte），只能获取文件，不能获取目录。\",\"如果是目录或空文件，都返回0.\",\"long length(); File file = new File(\\\"File/a.txt\\\"); long length = file.length(); System.out.println(length); //13 \"]},\"545\":{\"h\":\"6. lastModified\",\"t\":[\"获取最后一次的修改时间，单位是：毫秒时间戳。\",\"long lastModified(); File file = new File(\\\"File/a.txt\\\"); long ms = file.lastModified(); System.out.println(ms);//1655442970466 \"]},\"546\":{\"h\":\"7. list\",\"t\":[\"获取目录下的文件名称组成的String数组，包括子目录，目录本身也是文件\",\"注意：只是名字，不包含路径；\",\"注意：该方法的参数应该是个目录，如果是文件则返回null，如果是空目录，就返回空数组[]\",\"String[] list(); File file = new File(\\\"File\\\"); String[] list = file.list(); System.out.println(Arrays.toString(list)); //[a.txt, Avadar, b.txt] \"]},\"547\":{\"h\":\"8. listFiles\",\"t\":[\"获取目录下所有文件(包含目录)组成的File类数组，注意：是File类不是文件名\",\"注意：该方法的参数应该是个目录，如果是文件则返回null，如果是空目录，就返回空数组[]\",\"File[] listFiles(); File file = new File(\\\"File\\\"); File[] files = file.listFiles(); System.out.println(Arrays.toString(files)); //[File\\\\a.txt, File\\\\Avadar, File\\\\b.txt] \"]},\"548\":{\"h\":\"Ⅱ. 判断\"},\"549\":{\"h\":\"1. isDirectory\",\"t\":[\"判断File是否为目录，是就返回true，是文件或file不存在都返回false。\",\"boolean isDirectory(); File file = new File(\\\"File\\\"); boolean res = file.isDirectory(); System.out.println(res);//true \"]},\"550\":{\"h\":\"2. isFile\",\"t\":[\"判断File是否为文件，是就返回true，是目录或文件不存在都返回false。\",\"boolean isFile(); File file = new File(\\\"File\\\"); boolean res = file.isFile(); System.out.println(res);//true \"]},\"551\":{\"h\":\"3. exists\",\"t\":[\"判断文件（目录）是否在硬盘上存在。\",\"boolean exists(); File file = new File(\\\"File/a.txt\\\"); boolean res = file.exists(); System.out.println(res);//true \"]},\"552\":{\"h\":\"4. canXxx\",\"t\":[\"判断文件是否有：Write、Read、Execute权限\",\"如果文件不存在，也返回false\",\"boolean canRead(); boolean canWrite(); boolean canExecute() File file = new File(\\\"File/a.txt\\\"); boolean res = file.canRead(); System.out.println(res);//true \"]},\"553\":{\"h\":\"5. isHidden\",\"t\":[\"该文件是否已经隐藏。\",\"在Linux中，. 开头的文件就是隐藏文件，在windows中需要手动设置隐藏。\",\"boolean isHidden(); File file = new File(\\\"File/.hidden\\\"); boolean res = file.isHidden(); System.out.println(res);//true \"]},\"554\":{\"h\":\"Ⅲ. 创建文件\",\"t\":[\"说明\",\"先创建File对象，然后再调用创建文件或目录的方法进行创建。\",\"文件和目录创建的路径和名字就是File对象的路径和名字。\",\"如果文件或目录已经存在了，就无法进行创建，返回false\",\"目录本身也是文件，文件是可以没有后缀的，同一目录下的目录和文件不能同名\",\"一个无实体的File对象即可以是目录也可以是文件，就看用什么方法创建\"]},\"555\":{\"h\":\"createNewFile\",\"t\":[\"使用文件对象创建文件。\",\"boolean createNewFile() throws IOException; File file = new File(\\\"File/c.txt\\\"); if(file.exists()){ System.out.println(\\\"创建失败,文件已存在\\\"); return; } try { boolean res = file.createNewFile(); if(res){ System.out.println(\\\"文件创建成功\\\"); }else{ System.out.println(\\\"文件创建失败，原因未知\\\"); } } catch (IOException e) { e.printStackTrace(); } \"]},\"556\":{\"h\":\"mkdir\",\"t\":[\"创建文件目录，如果目录已存在，将无法创建，如果此文件目录的上层目录不存在，也不创建，并返回false。\",\"boolean mkdir();//mkdir不会抛出异常 File file = new File(\\\"File/c\\\"); if(file.exists()){ System.out.println(\\\"目录已存在，无法创建\\\"); return; }else{ boolean res = file.mkdir(); if(res){ System.out.println(\\\"目录创建成功\\\"); }else{ System.out.println(\\\"目录创建失败，原因未知\\\"); } } \"]},\"557\":{\"h\":\"3. mkdirs\",\"t\":[\"递归创建文件目录，可以同时创建多层目录（上层文件目录不存在，一并创建）。\",\"boolean mkdirs() ;//mkdir不会抛出异常 File file = new File(\\\"File/c/b/b\\\"); if(file.exists()){ System.out.println(\\\"目录已存在，无法创建\\\"); return; }else{ boolean res = file.mkdirs(); if(res){ System.out.println(\\\"目录创建成功\\\"); }else{ System.out.println(\\\"目录创建失败，原因未知\\\"); } } \"]},\"558\":{\"h\":\"Ⅳ. 删改\"},\"559\":{\"h\":\"1. renameTo\",\"t\":[\"文件重命名（移动）。\",\"这里的文件名是完整的文件名，完整的文件名是带路径的，因此重命名也可以做移动文件（文件名不改，路径改了）。\",\"方法参数是一个包含文件路径属性的File对象。\",\"boolean renameTo(File dest); File f1= new File(\\\"File/b.txt\\\"); File f2 = new File(\\\"File/c/newB.txt\\\"); boolean res = f1.renameTo(f2); System.out.println(res);//true System.out.println(f1);//File\\\\b.txt，f1的硬盘文件已经不存在了 System.out.println(f2);//File\\\\c\\\\newB.txt，f1的硬盘文件跑这里了 \"]},\"560\":{\"h\":\"1.1 重命名（移动）的条件\",\"t\":[\"如上：需要保证被移动的文件在硬盘中是存在的，且目标位置不能在硬盘中存在。\"]},\"561\":{\"h\":\"1.2 移动后的文件\",\"t\":[\"f1移动到f2后，f1和f2的对象都还在，只是此时，f1在硬盘上不存在了，到了f2的位置。 即：我们操作f2时，操作的是原来的f1，f1变成了一个硬盘上不存在的文件。\"]},\"562\":{\"h\":\"2. delete\",\"t\":[\"删除广义文件（包含目录）；不会进回收站；文件不存在会返回false。 如果要删除目录，只能删除空的目录，即：不能递归删除（安全考虑，可以自己写递归）。\",\"boolean delete(); File f1 = new File(\\\"files/img/avatar\\\"); File f2 = new File(\\\"files/img/avatars\\\"); File f3 = new File(\\\"files\\\"); boolean result = f1.delete(); System.out.println(result);//true boolean result2 = f2.delete(); System.out.println(result2); //false:删除的文件不存在 boolean result3 = f3.delete(); System.out.println(result3); //false:不能递归删除 \"]},\"563\":{\"h\":\"1-7. IO 类\"},\"564\":{\"h\":\"Ⅰ. InputStream & Reader\",\"t\":[\"位置\",\"rt.jar>java>io>InputStream.java 【abstract】\",\"rt.jar>java>io>Reader.java 【abstract】\",\"InputStream和Reader都是输入流，一个是读取字节的一个是读取字符的。\",\"他们的方法基本都是一样的。\",\"结构\",\"//1.InputStream public abstract class InputStream implements Closeable{ ...... } //2.Reader public abstract class Reader implements Readable,Closeable{ ... } \",\"构造器\",\"两个都是抽象类无法直接实现。\",\"下面例子均采用典型实现：FileInputStream和FileReader.\",\"注意：读取文件需处理异常：FileNotFoundException\",\"File f1 = new File(\\\"File/a.txt\\\"); FileInputStream fs = new FileInputStream(f1); FileInputStream fs = new FileInputStream(\\\"File/a.txt\\\");//方式二 File f2 = new File(\\\"File/k.jpg\\\"); FileReader fr = new FileReader(f2); FileReader fr = new FileReader(\\\"File/k.jpg\\\"); //方式二 \"]},\"565\":{\"h\":\"1. read 无参\",\"t\":[\"读取一个字节（字节流）或一个字符（字符流）\",\"InputStream：从输入流中读取数据的下一个字节。返回 0 到 255 范围内的 int 字节值。如果因 为已经到达流末尾而没有可用的字节，则返回值 -1\",\"Reader：读取单个字符。作为整数读取的字符，范围在 0 到 65535 之间 (0x00-0xffff)（2个字节的Unicode码），如果已到达流的末尾，则返回 -1\",\"该方法会抛出java.io.IOException异常\",\"int read(); FileInputStream steam = new FileInputStream(\\\"File/a.txt\\\"); FileReader reader = new FileReader(\\\"File/k.jpg\\\"); //读取一次 int steamRes = steam.read(); System.out.println(steamRes);//255,一个字节的二进制数据 char readerRes = (char)reader.read();//将字符的Unicode值转为字符 System.out.println(readerRes);//A,读到了字符A，转换成了65 //循环读取:以FileReader为例 int readData = reader.read(); while(readData != -1){ System.out.println((char)readData); readData = reader.read(); } \"]},\"566\":{\"h\":\"2. read 一参\",\"t\":[\"一次读取多个字节/字符到数组中。\",\"InputSteam： int read(byte[] b)，从此输入流中将最多 b.length 个字节的数据读入一个 byte 数组中，如果因为已经到达流末尾而没有可用的字节，则返回值 -1。否则以整数形式返回实际读取的字节数\",\"Reader： int read(char[] cbuf)，将字符读入数组。如果已到达流的末尾，则返回 -1。否则返回本次实际读取的字符数\",\"该方法会抛出java.io.IOException异常\",\"int read(byte[] b); int read(char[] cbuf); FileInputStream steam = new FileInputStream(\\\"File/a.txt\\\"); FileReader reader = new FileReader(\\\"File/k.jpg\\\"); //以FileReader读取字符为例 //读取一次 char[] cbuf = new char[3];//设置每次读取的长度 int len = reader.read(cbuf);//读取一次，返回值是字符数 System.out.println(len);//3 System.out.println(Arrays.toString(cbuf));//[A, , s],打印读取的字符数组 //循环读取 char[] cbuf = new char[5];//设置每次读取的长度 int len = reader.read(cbuf);//读取一次，返回值是字符数 while(len != -1){ for(int i = 0;i<len;i++){ System.out.println(cbuf[i]); } len = reader.read(cbuf); } \"]},\"567\":{\"h\":\"2.1 char[]参数\",\"t\":[\"可以当做读取数据的载体，没有他的时候，我们一次只能读1个字符，现在我们可以先将多个字符放入该数组中，然后一次读取多个字符。\"]},\"568\":{\"h\":\"2.2 byte[]参数\",\"t\":[\"同上，只是char[] 变成了 byte[]，读取的单位从字符变成了字节。\"]},\"569\":{\"h\":\"2.3 一个误区\",\"t\":[\"char[] cbuf = new char[5];\",\"char数组每次装 5个字符，下一次装载字符时，并非是空数组过去的，而是5个字符还在，装载时进行新旧字符的替换。当字符取模5有余数时，最后一趟是装不满的，也就是会有字符没有被替换，这时如果将数组中的字符全部取下来，就会取到错误的字符。\"]},\"570\":{\"h\":\"3. read 三参\",\"t\":[\"该方法额外多了两个参数：off和len，即将字符读入数组时，从off处开始读，最多读len个字符(或字节），如果已到达流的末尾，则返回 -1。否则返回本次读取的字符数。\",\"不是很常用。\",\"int read(byte[] b, int off,int len); int read(char[] cbuf,int off,int len); \"]},\"571\":{\"h\":\"4. close\",\"t\":[\"关闭流，该方法也需要处理异常：java.io.IOException，且close操作要方法其他异常的finally中。 所有打开的流资源，都必须手动调用close方法进行关闭。\",\"public void close() throws IOException; FileInputStream steam = new FileInputStream(\\\"File/a.txt\\\"); FileReader reader = new FileReader(\\\"File/k.jpg\\\"); stream.close(); reader.close(); \"]},\"572\":{\"h\":\"Ⅱ. OutputStream & Write\",\"t\":[\"位置\",\"rt.jar>java>io>Writer.java 【abstract】\",\"rt.jar>java>io>OutputStreamr.java 【abstract】\",\"OutputStream和Write都是输出流，一个是往外写字节的，一个是往外写字符的。\",\"他们的方法基本都是一样的。\",\"结构\",\"public class FileWriter extends OutputStreamWriter{} Public abstract class OutputStream implements Closeable, Flushable {} \",\"使用步骤\",\"实例化：new构造器\",\"写出：调用write()\",\"刷新：flush，将写的内容刷入文件\",\"关闭：close，关闭流\"]},\"573\":{\"h\":\"1. 实例化\",\"t\":[\"OutputStream和Write都是抽象类，无法直接实例化。 他们的常用实现类是：FileWriter和FileOutputStream。他们的方法基本是一样的。\",\"实例化的文件不存在：自动创建，前提是有权限\",\"实例化的文件已经存在：覆盖或追加写，由参数决定\",\"异常：会抛出IOException异常\"]},\"574\":{\"h\":\"1.1 FileWriter 实例化\",\"t\":[\"file：文件对象，数据会写到这个文件对象里。\",\"fileName：文件名，直接使用文件名,构造器内部自动new File(文件名) \",\"数据直接写入指定的文件名创建的文件中，\",\"append参数：true=追加写；false=覆盖写(默认)\",\"异常：会产生FileNotFoundException异常\",\"FileWriter(File file);//写入指定文件,覆盖写 FileWriter(File file, boolean append);//写入指定文件,自定义写入方式 FileWriter(String fileName);//写入指定文件名,覆盖写 FileWriter(String fileName, boolean append);//写入指定文件名,自定义写入方式 FileWriter(FileDescriptor fd);//略 FileWriter fileWriter = new FileWriter(\\\"File/a.txt\\\",true); fileWriter.write(\\\"Batman\\\"); \"]},\"575\":{\"h\":\"1.2 FileOutStream 实例化\",\"t\":[\"会产生IOException异常，参数同FileWriter。\",\"FileOutputStream(File file);//写入指定文件,覆盖写 FileOutputStream(File file, boolean append);//写入指定文件,自定义写入方式 FileOutputStream(String name);//写入指定文件名,覆盖写 FileOutputStream(String name, boolean append);//写入指定文件名,自定义写入方式 FileOutputStream(FileDescriptor fdObj);//略 FileOutputStream fos = new FileOutputStream(\\\"File/k.jpg\\\"); fileWriter.write(11); \"]},\"576\":{\"h\":\"2. write 字符\",\"t\":[\"将字符写入指定的文件。\",\"参数 int c：写入0 到 65535 之间的Unicode码\",\"参数 cbuf：写入字符数组\",\"参数 str：写入：字符串\",\"参数 int off & int len：写入cbuf或str的某一部分。从off开始，写入len个字符\",\"异常：会产生，IOException异常\",\"void write(int c)//写入Unicode void write(char[] cbuf)//写入char[] void write(char[] cbuf,int off,int len)//写入char[]的一部分 void write(String str);//写入String void write(String str,int off,int len)//写入String的一部分 FileWriter fileWriter = new FileWriter(\\\"File/a.txt\\\",false);//覆盖写 fileWriter.write(97);//写入Unicode 97->a,a.txt中出现a char[] cbuf = {'a','b','c','d'}; fileWriter.write(cbuf);//写入char[]数组,a.txt中出现了abcd fileWriter.write(\\\"Batman\\\");//写入字符串,a.txt中出现了Batman \",\"空格与换行符 如果是追加写，每次写入的字符都是无空格连在一起的，在同一行。如果要进行换行和输入空格，就需要手动输入空格或换行符\\\\n。\"]},\"577\":{\"h\":\"3. write 字节流\",\"t\":[\"向一张图片上写入字符，图片就打不开了。\",\"int b：写入字节，0~255\",\"byte[] b：将 b.length 个字节从指定的 byte 数组写入此输出流。write(b) 的常规协定是：应该与调用 write(b, 0, b.length) 的效果完全相同\",\"int off & int len：将指定 byte 数组中从偏移量 off 开始的 len 个字节写入此输出流\",\"void write(int b);//写入0~255字节数据 void write(byte[] b);//写入byte[] void write(byte[] b,int off,int len)//写入byte[]的一部分 FileOutputStream fos= new FileOutputStream(\\\"File/b\\\"); fos.write(1); byte[] b = {1,2,3,4,5}; fos.write(b); \",\"向一张图片上写入字符，图片就打不开了。\"]},\"578\":{\"h\":\"4. flush\",\"t\":[\"刷新该流的缓冲，则立即将它们写入预期目标。 该方法若不调用，可能会导致写入失败。\",\"void flush(); FileWriter fileWriter = new FileWriter(\\\"File/a\\\",false); FileOutputStream fos= new FileOutputStream(\\\"File/b\\\"); .... FileWriter.flush(); fos.flush(); \"]},\"579\":{\"h\":\"5. close\",\"t\":[\"关闭此输出流并释放与该流关联的所有系统资源。\",\"如果有try...catch语句，close方法一定要放到finally语句里，以保证资源肯定能被关闭。\",\"注意：该方法本身也会抛出异常，也需要进行处理。\",\"void close()throws IOException; FileWriter fw = null; try { fw = new FileWriter(\\\"File/a\\\", false); fw.write(\\\"I'm Batman\\\"); fw.flush(); } catch (IOException e) { e.printStackTrace(); } finally { try { if(fw !=null) fw.close(); } catch (IOException e) { e.printStackTrace(); } } \"]},\"580\":{\"h\":\"Ⅲ. 其他流的方法\"},\"581\":{\"h\":\"1. readLine\",\"t\":[\"使用缓冲流：BufferedReader，读取一行。\",\"该方法是读取一行数据（根据换行符来判定），并返回读到的数据，该方法是阻塞的，如果在接收的数据中不含有'\\\\n','\\\\r'或者结束符时，往往导致进程挂起，从而程序无法继续。\",\"如果读到文件的末尾就返回null。\",\"在IO模式下，该方法是一直等待输入的，直到遇到换行符，才会结束执行。\",\"String readLine() throws IOException; FileReader fr = new FileReader(\\\"files/a.txt\\\"); BufferedReader br = new BufferedReader(fr); data = br.readLine(); System.out.println(data); \"]},\"582\":{\"h\":\"2. newLine\",\"t\":[\"使用缓冲流BufferedWrite，输入换行符。\",\"在写出文件时，有时需要写出换行符，该方法就可以写出换行符，等价于 \\\"\\\\n\\\"\"]},\"583\":{\"h\":\"1-8. 反射类\"},\"584\":{\"h\":\"Ⅰ. Class - 类相关\",\"t\":[\"提示\",\"位置：rt.jar>java>lang>Class.java 【class】\",\"public final class Class<T> implements java.io.Serializable,GenericDeclaration,Type,AnnotatedElement{ ... } \"]},\"585\":{\"h\":\"1. 实例化\",\"t\":[\"共有四种获取Class类的实例的方式。\"]},\"586\":{\"h\":\"1.1 类的class属性\",\"t\":[\"若已知具体的类，通过类的class属性获取，该方法最为安全可靠，程序性能最高。\",\"Class<Person> clazz = Person.class; System.out.println(clazz); //class Basic.Person \"]},\"587\":{\"h\":\"1.2 对象的getClass方法\",\"t\":[\"已知某个类的实例，调用该实例的getClass()方法获取Class对象。\",\"Person person = new Person(); Class<? extends Person> clazz = person.getClass(); System.out.println(clazz); //class Basic.Person \"]},\"588\":{\"h\":\"1.3 Class.forName\",\"t\":[\"已知一个类的全类名（包+类名），且该类在类路径下，可通过Class类的静态方法forName()获取。\",\"可能抛出 ClassNotFoundException 异常\",\"Class<?> clazz = Class.forName(\\\"Basic.Person\\\"); System.out.println(clazz); //class Basic.Person \"]},\"589\":{\"h\":\"1.4 类加载器\",\"t\":[\"使用类的加载器：ClassLoader。\",\"ClassLoader cl = this.getClass().getClassLoader(); //获取当前对象的类加载器 Class<?> clazz = cl.loadClass(\\\"Basic.Person\\\");//根据类加载器加载目标类 System.out.println(clazz); //class Basic.Person,得到了目标类的Class实例 \"]},\"590\":{\"h\":\"2. forName\",\"t\":[\"返回指定类名 name 的 Class 对象，类名为全类名。\",\"static Class<?> forName(String className)throws ClassNotFoundException Class<?> clazz = Class.forName(\\\"Basic.Person\\\"); System.out.println(clazz); //class Basic.Person \"]},\"591\":{\"h\":\"3. newInstance\",\"t\":[\"使用当前运行时类，通过反射创建该类的对象。默认调用空参构造器。\",\"T newInstance() throws InstantiationException, IllegalAccessException Class<Person> clazz = Person.class;//获取Person类的Class对象 Person person = clazz.newInstance(); \"]},\"592\":{\"h\":\"4. getName\",\"t\":[\"返回此当前运行时类所表示的实体（类、接口、数组类、基本类型或void）名称。\",\"String getName() Class<Person> clazz = Person.class; String name = clazz.getName(); System.out.println(name);//Basic.Person \"]},\"593\":{\"h\":\"5. getSuperclass\",\"t\":[\"返回当前运行时类的父类的Class对象，Object是所有类的父类。\",\"Class<? super T> getSuperclass(); Class<Person> clazz = Person.class; Class<? super Person> superclass = clazz.getSuperclass(); System.out.println(superclass);//class java.lang.Object \"]},\"594\":{\"h\":\"6. getGenericSuperclass\",\"t\":[\"获取运行时类的父类的泛型。\",\"Type getGenericSuperclass(); Type genericSuperclass = clazz.getGenericSuperclass(); System.out.println(genericSuperclass); \"]},\"595\":{\"h\":\"7. getInterfaces\",\"t\":[\"获取当前运行时类实现的所有接口。\",\"Class<?>[] getInterfaces() Class<Person> clazz = Person.class; Class<?>[] interfaces = clazz.getInterfaces(); System.out.println(Arrays.toString(interfaces)); //[interface java.io.Serializable, interface java.lang.Comparable] \"]},\"596\":{\"h\":\"8. getClassLoader\",\"t\":[\"通过当前运行时类，返回该类的类加载器。\",\"ClassLoader getClassLoader() Class<Person> clazz = Person.class; ClassLoader classLoader = clazz.getClassLoader(); System.out.println(classLoader);//sun.misc.Launcher$AppClassLoader@18b4aac2 \"]},\"597\":{\"h\":\"9. getParent\",\"t\":[\"ClassLoader.getParent，获取加载器的父类。\",\"ClassLoader getParent(); Class<Person> clazz = Person.class; ClassLoader parent = clazz.getClassLoader().getParent(); System.out.println(parent);//sun.misc.Launcher$ExtClassLoader@677327b6 \"]},\"598\":{\"h\":\"10. getPackage\",\"t\":[\"获取运行时类所在的包。\",\"Package getPackage() Package pack = clazz.getPackage(); System.out.println(pack);//package Basic \"]},\"599\":{\"h\":\"Ⅱ. Class - 构造器相关\"},\"600\":{\"h\":\"1. getConstructors\",\"t\":[\"获取当前运行时类的构造器对象组成的数组，注意：不包含private构造器。\",\"Constructor<?>[] getConstructors() throws SecurityException Class<Person> clazz = Person.class; Constructor<?>[] constructors = clazz.getConstructors(); System.out.println(Arrays.toString(constructors)); //[public Basic.Person(), public Basic.Person(java.lang.String)] \"]},\"601\":{\"h\":\"2. getDeclaredConstructors\",\"t\":[\"获取当前运行时类中声明的所有的构造器。\",\"Constructor<?>[] getDeclaredConstructors() throws SecurityException Class<Person> clazz = Person.class; Constructor<?>[] cons = clazz.getDeclaredConstructors(); System.out.println(Arrays.toString(cons)); \"]},\"602\":{\"h\":\"3. getDeclaredConstructor\",\"t\":[\"取得本类的指定形参类型的构造器； 参数：就是构造器参数所属的Class。\",\"Constructor<T> getDeclaredConstructor(Class<?>... parameterTypes) throws NoSuchMethodException, SecurityException Class<Person> clazz = Person.class; Person p1 = clazz.newInstance();//调用无参构造器，创建Person对象 //调用有参构造器，该构造器接受一个String类谢谢的参数：String.class Constructor cons = clazz.getDeclaredConstructor(String.class); Person jin = (Person)cons.newInstance(\\\"jin\\\"); \"]},\"603\":{\"h\":\"Ⅲ. Class - 属性方法相关\"},\"604\":{\"h\":\"1. getFields\",\"t\":[\"获取当前运行时类及其父类中声明为public访问权限的属性。 返回值类型是：Field类数组。\",\"Field[] getFields() throws SecurityException Class<Person> clazz = Person.class; Field[] fields = clazz.getFields(); System.out.println(Arrays.toString(fields)); \"]},\"605\":{\"h\":\"2. getDeclareFields\",\"t\":[\"获取当前运行时类中声明的所有属性（不包含父类中声明的属性）。 返回值类型是：Field类数组。\",\"Field[] getDeclaredFields() throws SecurityException Class<Person> clazz = Person.class; Field[] fields = clazz.getDeclaredFields(); System.out.println(Arrays.toString(fields)); \"]},\"606\":{\"h\":\"3. getField\",\"t\":[\"获取指定的属性对象，不包括私有属性。 参数：参数就是String类型的属性名。\",\"Field getField(String name)throws NoSuchFieldException, SecurityException Class<Person> clazz = Person.class; Field age = clazz.getField(\\\"name\\\"); System.out.println(age); \"]},\"607\":{\"h\":\"4. getDeclaredField\",\"t\":[\"获取指定的属性对象，包括私有属性。 参数：参数就是String类型的属性名。\",\"Field getDeclaredField(String name)throws NoSuchFieldException, SecurityException Field age = clazz.getDeclaredField(\\\"age\\\"); System.out.println(age); \"]},\"608\":{\"h\":\"5. getMethods\",\"t\":[\"获取当前运行时类及其所有父类中声明为public权限的方法 返回值：Method类数组\",\"Method[] getMethods() throws SecurityException Class<Person> clazz = Person.class; Method[] methods = clazz.getMethods(); System.out.println(Arrays.toString(methods)); \"]},\"609\":{\"h\":\"6. getDeclaredMethods\",\"t\":[\"获取当前运行时类中声明的所有权限的方法（不包含父类中声明的方法）。 返回值：Method类数组\",\"Method[] getDeclaredMethods() throws SecurityException Class<Person> clazz = Person.class; Method[] methods = clazz.getDeclaredMethods(); System.out.println(Arrays.toString(methods)); \"]},\"610\":{\"h\":\"7. getMethod\",\"t\":[\"获取当前运行时类中的某一个方法的Method对象。\",\"参数就是String类型的方法名，以及参数类型列表。 只能获取public修饰的方法，一般用getDeclaredMethod。\",\"Method getMethod(String name, Class<?>... parameterTypes) throws NoSuchMethodException, SecurityException; Class<Person> clazz = Person.class; Method method = clazz.getMethod(\\\"say\\\",String.class); System.out.println(method); \"]},\"611\":{\"h\":\"8.getDeclaredMethod\",\"t\":[\"获取当前运行时类中的某一个方法的Method对象。可以获取任何修饰符修饰的方法。\",\"参数1 name：指明获取的方法的名\",\"参数2+：指明获取的方法的形参列表(参数类型)， \",\"注意：获取的是参数数据类型的Class对象\",\"有几个参数就写几个\",\"Method getDeclaredMethod(String name, Class<?>... parameterTypes) throws NoSuchMethodException, SecurityException Class<Person> clazz = Person.class; Method say = clazz.getDeclaredMethod(\\\"say\\\", String.class, int.class); System.out.println(say);//public void Basic.Person.say(java.lang.String,int) \"]},\"612\":{\"h\":\"Ⅳ. Field\",\"t\":[\"位置\",\"rt.jar.>java>lang>reflect>Field.java 【class】\",\"一个Field对象，就代表了一个运行时类的属性。\",\"结构\",\"class Field extends AccessibleObject implements Member {} \",\"实例化 通过Class类进行实例化，见上。\"]},\"613\":{\"h\":\"1. getModifier\",\"t\":[\"获取当前属性的权限修饰符。 返回值是0~3的int数字：\",\"0：默认类型\",\"1：public\",\"2：private\",\"3：protected\",\"int getModifiers() int modifiers = field.getModifiers(); System.out.println(modifiers);//2 \"]},\"614\":{\"h\":\"2. getType\",\"t\":[\"获取属性的数据类型，如果是引用类型，会返回完整的类名。\",\"Class<?> getType() Class<?> type = field.getType(); System.out.println(type);//int \"]},\"615\":{\"h\":\"3. getName\",\"t\":[\"获取字符串形式的属性名。\",\"String getName() String name = field.getName(); System.out.println(name);//age \"]},\"616\":{\"h\":\"4. get\",\"t\":[\"通过Field对象，获取属性值。\",\"参数： \",\"参数1：要获取哪个对象的属性（需要先创建对象）\",\"参数2：要设置的属性的值\",\"返回值：Object类型，可以根据需要转型\",\"Private：无法直接操作private属性，需要先调用setAccessible\",\"Object get(Object obj) Class<Person> clazz = Person.class; Person person = clazz.newInstance(); Field age = clazz.getDeclaredField(\\\"age\\\"); age.setAccessible(true); int o = (int)age.get(person); System.out.println(o); \"]},\"617\":{\"h\":\"5. set\",\"t\":[\"通过Field对象，设置属性的值。\",\"参数：要设置哪个对象的属性（需要先创建对象）\",\"Private：无法直接操作private属性，需要先调用setAccessible\",\"void set(Object obj, Object value) throws IllegalArgumentException, IllegalAccessException Class<Person> clazz = Person.class; Person person = clazz.newInstance(); Field age = clazz.getDeclaredField(\\\"age\\\"); age.setAccessible(true); age.set(person,30); System.out.println(age.get(person));//30 \"]},\"618\":{\"h\":\"6. setAccessible\",\"t\":[\"保证当前属性是可访问的，包括private类型的。\",\"void setAccessible(boolean flag) throws SecurityException //见上 \"]},\"619\":{\"h\":\"Ⅴ. Method\",\"t\":[\"位置\",\"rt.jar>java>lang>reflect>Method.java 【class】\",\"结构\",\"public final class Method extends Executable {} \",\"实例化 通过Class进行实例化；见上。\"]},\"620\":{\"h\":\"1. getAnnotations\",\"t\":[\"获取方法的注解\",\"Annotation[] getAnnotations() Class<Person> clazz = Person.class; Method method = clazz.getMethod(\\\"say\\\",String.class); Annotation[] anno = method.getAnnotations(); System.out.println(Arrays.toString(anno)); //[@org.junit.Test(timeout=0, expected=class org.junit.Test$None)] \"]},\"621\":{\"h\":\"2.getModifiers\",\"t\":[\"获取权限修饰符，返回值是0~3的int数字\",\"0：默认类型\",\"1：public\",\"2：private\",\"3：protected\",\"int getModifiers() int modifier = method.getModifiers(); System.out.println(modifier);//1 \"]},\"622\":{\"h\":\"3. getReturnType\",\"t\":[\"获取返回值类型,如果是引用类型，会返回完整的类名。\",\"Class<?> getReturnType() Class<?> returnType = method.getReturnType(); System.out.println(returnType);//void \"]},\"623\":{\"h\":\"4. getName\",\"t\":[\"获取字符串形式的方法名。\",\"String getName() String name = method.getName(); System.out.println(name);//say \"]},\"624\":{\"h\":\"5. getParameterTypes\",\"t\":[\"获取形参列表，返回的只有形参的类型。\",\"Class<?>[] getParameterTypes() Class<?>[] params = method.getParameterTypes(); System.out.println(Arrays.toString(params));//[class java.lang.String] String name = params[0].getName(); System.out.println(name);//String:获取字符串类型的形参 \"]},\"625\":{\"h\":\"6. getExceptionTypes\",\"t\":[\"获取抛出的异常，可能是多个异常，返回的是数组。\",\"Class<?>[] getExceptionTypes() Class<?>[] exception = method.getExceptionTypes(); System.out.println(Arrays.toString(exception));//[] \"]},\"626\":{\"h\":\"7.invoke\",\"t\":[\"调用方法对象（Method）的invoke方法来执行获得的方法\",\"参数1：方法的调用者\",\"参数2：给方法形参赋值的实参\",\"返回值：对应类中调用的方法的返回值，没有返回值就返回null。\",\"静态方法：如果是静态方法调用invoke，那么调用者是类或者null也可以。\",\"Object invoke(Object obj, Object... args) throws IllegalAccessException, IllegalArgumentException,InvocationTargetException Class<Person> clazz = Person.class; Person person = clazz.newInstance(); Method say = clazz.getDeclaredMethod(\\\"say\\\", String.class, int.class); System.out.println(say); say.invoke(person,\\\"a\\\", 1); \"]},\"627\":{\"h\":\"8. setAccessible\",\"t\":[\"保证当前方法是可访问的，包括private类型的。 同Field.setAccessible。\"]},\"628\":{\"h\":\"Ⅵ. Constructor\",\"t\":[\"构造方法\",\"public final class Constructor<T> extends Executable {} \",\"实例化 同Class对象进行获取Constructor对象。\"]},\"629\":{\"h\":\"1. newInstance\",\"t\":[\"根据获取的构造器创建类的对象\",\"T newInstance(Object ... initargs) throws InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException Class<Person> clazz = Person.class; Constructor<Person> cons = clazz.getDeclaredConstructor(int.class); cons.setAccessible(true); Person person = cons.newInstance(1); \"]},\"630\":{\"h\":\"2. setAccessible\",\"t\":[\"保证当前构造器是可访问的，包括private类型的。\\n同Field.setAccessible\"]},\"631\":{\"h\":\"1-9. 其他类\"},\"632\":{\"h\":\"Ⅰ. System\",\"t\":[\"位置\",\"Library>java>lang>System.java 【class】\",\"System类代表系统，系统级的很多属性和控制方法都放置在该类的内部。\",\"由于该类的构造器是private的，所以无法创建该类的对象，也就是无法实例化该类。其内部的成员变量和成员方法都是static的，所以也可以很方便的进行调用。\",\"结构\",\"public final class System { private System(){} } \"]},\"633\":{\"h\":\"1. currentTimeMillion\",\"t\":[\"获取毫秒时间戳，单位 ms，可以用来计算时间差。\",\"long currentTimeMillis(); long ms = System.currentTimeMillis(); System.out.println(ms); //1654740094502 \"]},\"634\":{\"h\":\"2. exit\",\"t\":[\"该方法的作用是退出程序。其中status的值为0代表正常退出，非零代表异常退出。 使用该方法可以在图形界面编程中实现程序的退出功能等。\",\"void exit(int status); \"]},\"635\":{\"h\":\"3. gc\",\"t\":[\"垃圾回收，该方法的作用是请求系统进行垃圾回收。至于系统是否立刻回收，则取决于系统中垃圾回收算法的实现以及系统执行时的情况。\",\"void gc(); \"]},\"636\":{\"h\":\"4. getProperty\",\"t\":[\"获取系统信息，该方法的作用是获得系统中属性名对应的值。\",\"系统中常见的属性名以及属性的作用如下表所示：\",\"String getProperty(String key); ====================================================================== String javaVersion = System.getProperty(\\\"java.version\\\"); System.out.println(javaVersion); //1.8.0_321 String javaHome = System.getProperty(\\\"java.home\\\"); System.out.println(javaHome);//D:\\\\Java\\\\Soft\\\\JDK\\\\jdk1.8.0_321\\\\jre String osName = System.getProperty(\\\"os.name\\\"); System.out.println(osName);//Windows 10 String osVersion = System.getProperty(\\\"os.version\\\"); System.out.println(osVersion);//10.0 String userName = System.getProperty(\\\"user.name\\\"); System.out.println(userName);//A String userHome = System.getProperty(\\\"user.home\\\"); System.out.println(userHome);//C:\\\\Users\\\\A String userDir = System.getProperty(\\\"user.dir\\\"); System.out.println(userDir);//D:\\\\Java\\\\workplace\\\\Learn \"]},\"637\":{\"h\":\"2-1. Scanner\",\"t\":[\"位置\",\"rt.jar>java>util>Scanner.java 【class】\",\"用来扫描输入文本的类。 Scanner类的用法很多，这里只介绍简单的命令行，方便进行一些测试。\",\"结构\",\"public final class Scanner implements Iterator<String>,Closeable{ .... } \",\"使用 通过Scanner类来获取用户的输入。\",\"通过 Scanner 类的 next() 与 nextLine() 方法获取输入的字符串，在读取前我们一般需要使用hasNext 与 hasNextLine 判断是否还有输入的数据。\"]},\"638\":{\"h\":\"1. new Scanner\",\"t\":[\"构建一个Scanner对象，他生产从指定输入流扫描的值。当参数为System.in：表示从键盘获取输入的内容。\",\"Scanner(InputStream source);//这只是构造方法之一 Scanner scan = new Scanner(System.in); \"]},\"639\":{\"h\":\"2. next\",\"t\":[\"从此扫描仪查找并返回下一个完整令牌。\",\"用户从键盘输入内容，按回车即输入完毕，输入完毕后，Scanner.next方法就获取输入的内容。\",\"无参数：对即将获取的内容无限制。\",\"有参数：参数可以是String类型的正则或者Pattern类，该参数将限制接下来要输入的数据格式，只有与正则匹配的内容才可以。\",\"String next(); String next(String pattern); String next(Pattern pattern); Scanner scan = new Scanner(System.in); System.out.println(\\\"请输入姓名\\\"); String next = scan.next();//键盘输入：hello System.out.println(next);//hello \",\"效果\",\"执行代码；弹出命令行窗口，显示打印的字符：请输入姓名\",\"可以在键盘输入字符，点击Enter键完成输入\",\"输入完毕后，scan.next方法获取输入的字符串，并继续向下执行代码\",\"代码执行完毕，命令行交互结束\"]},\"640\":{\"h\":\"3. nextXxx\",\"t\":[\"next方法，会将获取的索引内容都当做字符串处理。\",\"也可以调用nextXxx方法（Xxx为基本数据类型），限制输入的字符类型。\",\"对于Number类型的Xxx有一个可选参数 radix，radix指的是进制。 \",\"radix取值为：2~36，即：最小是2进制，最大是36进制。\",\"输入数据时如果输入的值超过了进制或者超过了数据类型的范围，或者与数据类型不符都会报错。\",\"对于输入的非十进制数据，获取后的值依然是十进制。\",\"注意：Scanner没有提供Char类型next方法\",\"byte nextByte(int radix); boolean nextBoolean(); short nextShrot(int radix); int nextInt(int radix); long nextLong(int radix); float nextFloat(int radix); double nextDouble(int radix); BigInteger nextBigInter(int radix); BigDecimal nextBigDecimal(); Scanner scan = new Scanner(System.in); System.out.println(\\\"请输入\\\"); int next = scan.nextByte(2);//Byte类型的二进制数据 //键入：11111 System.out.println(next);//31,11111自动转为了十进制 \"]},\"641\":{\"h\":\"2-2. Arrays\",\"t\":[\"提示\",\"位置：Libraries>java.util Arrays.java 【class】\",\"java.util.Arrays类即为操作数组的工具类，包含了用来操作数组（比如排序和搜索）的各种方法 该类为工具类，因此该类的方法都是 public static方法。\",\"结构\",\"public class Arrays { private static final int MIN_ARRAY_SOCRT_GRAN = 1 <<13; } \"]},\"642\":{\"h\":\"1. toString\",\"t\":[\"将数组转为字符串形式。 数组是引用类型，直接打印，打印的是内存地址，使用该方法可以将数组作为字符串打印。\",\"String toString( Object [] a);//该方法对各种类型的参数进行了重构 int[] arr1 = {1,2,3}; System.out.println(arr1); //[I@677327b6 System.out.println(Arrays.toString(arr1));//[1, 2, 3] \"]},\"643\":{\"h\":\"2. sort\",\"t\":[\"注意\",\"排序并非是返回一个新数组，而是直接改变了源数组\",\"对数组进行排序，该方法有好几个重构方法，针对不同的数据类型和排序方式。\"]},\"644\":{\"h\":\"2.1 sort(int[] a)\",\"t\":[\"对int类型数组的值按数字大小的升序(默认)进行排序。\",\"如下：formIndex为开始排序的下标，toIndex-1为终点下标，不指定就是排序整个数组。\",\"void sort(int[] a, int fromIndex, int toIndex) int[] arr1 = {1,5,8,2,3}; Arrays.sort(arr1); System.out.println(Arrays.toString(arr1));//[1, 2, 3, 5, 8] \"]},\"645\":{\"h\":\"2.2 sort(T[] a, Comparator<? super T> c)\",\"t\":[\"根据传入的Comparator接口子类，自定义排序规则。\",\"sort(T[] a, Comparator<? super T> c) Integer[] arr1 = {1,5,8,2,3};//因为使用了泛型，这里要用Integer而非int //2.创建MyComparator类的对象 MyComparator mc = new MyComparator(); //3.将mc作为参数传入给sort方法 Arrays.sort(arr1,mc); System.out.println(Arrays.toString(arr1));//[8, 5, 3, 2, 1] //1.先定义一个实现Comparator接口的类:可以定义成内部类 static class MyComparator implements Comparator<Integer>{ @Override //重写比较大小的核心方法：int类型倒序 public int compare(Integer o1, Integer o2) { if(o1<o2){ return 1; }else if(o1>o2){ return -1; }else{ return 0; } } } \"]},\"646\":{\"h\":\"3. binarySearch\",\"t\":[\"在数组中查询指定元素，返回元素的索引，这里采用的是二分法。 根据参数数组的数据类型不同，该方法有很多重构方法。同时有一个包含Comparator的重构方法，自定义排序算法。\",\"参数：formIndex参数指定开始排序的下标，toIndex指定结束排序的下标（不包含toIndex）\",\"返回值：如果没找到就返回负数（不一定是-1），找到了就返回第一次出现的索引。\",\"int binarySearch(int[] a, int fromIndex, int toIndex,int key) int[] arr1 = {1,5,8,8,2,3}; int k1 = Arrays.binarySearch(arr1, 8); int k2 = Arrays.binarySearch(arr1, 6); System.out.println(k1); //2 System.out.println(k2); //-3 \"]},\"647\":{\"h\":\"4. copyOf\",\"t\":[\"提示\",\"注意：该复制是真的值复制，而非引用的复制\",\"复制指定的数组，可以指定复制的长度。\",\"T[] copyOf(T[] original, int newLength) int[] arr1 = {1,5,8,8,2,3}; int[] arr2 = Arrays.copyOf(arr1, arr1.length); System.out.println(arr1); //[I@677327b6 System.out.println(arr2); //[I@14ae5a5 两个内存地址是不一样的 System.out.println(Arrays.toString(arr1)); //[1, 5, 8, 8, 2, 3] System.out.println(Arrays.toString(arr2)); //[1, 5, 8, 8, 2, 3] 值一样 \"]},\"648\":{\"h\":\"5. equals\",\"t\":[\"比较两个数组是否相等，Arrays类重写了Object类中的equals，当两个数组中所有元素都相等时，两个数组就相等。(该仿佛根据参数中的数组数据类型不通有多个重构方法)。\",\"值相等也意味着值的数据类型必须相等。\",\"boolean equals(int[] a, int[] a2) int[] arr1 = {1,5,8,8,2,3}; int[] arr2 = {1,5,8,8,2,3}; boolean res = Arrays.equals(arr1, arr2); System.out.println(res); //true \"]},\"649\":{\"h\":\"6. asList\",\"t\":[\"数组转换为List集合。\",\"List<T> asList(T... a) String[] arr = {\\\"a\\\",\\\"b\\\",\\\"c\\\",\\\"d\\\"}; List<String> str = Arrays.asList(arr); str.add(\\\"ff\\\"); //这里会报异常 System.out.println(str); \",\"注意\",\"sList方法会返回一个ArrayList，但是该ArrayList只是Arrays的内部静态类的ArrayList，他跟真正的ArrayList集合是有差异的，Arrays$ArrayList和ArrayList都是继承AbstractList，AbstractList中的add、remove等操作都是默认抛出异常的，ArrayList中重写了这些方法，但是Arrays$ArrayList中并没有重写这些方法，因此在使用时会报异常：UnsupportedOperationException\"]},\"650\":{\"h\":\"7. fill\",\"t\":[\"将指定值填充到数组之中，用于数组的初始化和填充。\",\"fill(int[] a, int val) int[] arr1 = new int[5]; Arrays.fill(arr1,7); System.out.println(Arrays.toString(arr1)); //[7, 7, 7, 7, 7] \"]},\"651\":{\"h\":\"8. asList\",\"t\":[\"快速生成一个List集合，该方式返回的是 ArrayList 实例。 该方法可用于快速生成一个List集合。\",\"参数：就是集合的元素，注意参数类型要统一。\",\"public static <T> List<T> asList(T... a) { return new ArrayList<>(a);//返回的是ArrayList } List<String> list = Arrays.asList(\\\"a\\\", \\\"b\\\", \\\"c\\\"); System.out.println(list);//[a, b, c] \"]},\"652\":{\"h\":\"2-3. Collection+\"},\"653\":{\"h\":\"Ⅰ. Collection\",\"t\":[\"位置\",\"Libraries>java>util Collection.java 【interface】\"]},\"654\":{\"h\":\"结构\",\"t\":[\"public interface Collection<E> extends Iterable<E>{ //无成员变量 } \"]},\"655\":{\"h\":\"应用范围\",\"t\":[\"Collection 接口是 List、Set 和 Queue 接口的父接口，因此Collection接口中定义的方法，其子接口和子接口的实现类也同样可以使用。 实现类为：ArrayList; Vector;LinkedList; HashSet; LinkedHashSet; TreeSet;\"]},\"656\":{\"h\":\"泛型\",\"t\":[\"创建容器对象时，可以指定泛型，此时使用Collection接口的方法就会被泛型类型限制了。 如果不指定泛型，则不会有泛型限制，统一视为obj类型。\"]},\"657\":{\"h\":\"1. add\",\"t\":[\"将元素添加到集合中，元素可以是任何类型，基本数据类型会自动装箱。\",\"boolean add(E e); ========================================================= Collection<String> coll = new ArrayList<>(); coll.add(\\\"aa\\\"); String str = \\\"bb\\\"; coll.add(str); System.out.println(coll); //[aa, bb] \"]},\"658\":{\"h\":\"2. addAll\",\"t\":[\"将其他集合的元素添加到当前集合，即合并另一个集合。\",\"boolean addAll(Collection<? extends E> c); //注意两个集合的泛型要求 ========================================================= Collection<String> coll = new ArrayList<>(); coll.add(\\\"aa\\\"); coll.add(\\\"bb\\\"); Collection<String> coll2 = new ArrayList<>(); coll2.add(\\\"cc\\\"); coll2.add(\\\"dd\\\"); coll.addAll(coll2);//将coll2集合中的元素添加到集合coll System.out.println(coll);//[aa, bb, cc, dd] System.out.println(coll2);//[cc, dd]; 集合coll2依然还在,还可以继续使用 \"]},\"659\":{\"h\":\"3. size\",\"t\":[\"获取集合的元素个数。\",\"int size(); ========================================== int size = coll.size(); //[aa, bb, cc, dd] System.out.println(size); //4 \"]},\"660\":{\"h\":\"4. clear\",\"t\":[\"清空集合元素，集合变为空集合。\",\"void clear(); ==================================== coll.clear(); //coll == [aa, bb, cc, dd] System.out.println(coll); // [] \"]},\"661\":{\"h\":\"5. isEmpty\",\"t\":[\"判断集合是否为空。\",\"boolean isEmpty(); ============================== coll.clear(); boolean result = coll.isEmpty(); System.out.println(result); //true \"]},\"662\":{\"h\":\"6. contains\",\"t\":[\"集合中是否包含某个元素。 注意：比较的方式是，将待比较元素与集合中的元素做equal。\",\"对于基本数据类型的包装类和String，都重写了equals方法，可以正常比较值；\",\"而我们自定义的类，如果不重写equals方法，将无法进行比较，直接返回false。 \",\"因此向Collection接口的实现类的对象中添加数据obj时，要求obj所在类要重写equals()\",\"boolean contains(Object o); ========================================================= boolean res1 = coll.contains(\\\"aa\\\"); //coll == [aa, bb, cc, dd] System.out.println(res1);//true //自定义类：未重写equals，无法比较值，返回false System.out.println(coll.contains(new Person(\\\"jinno\\\",20)));//false //在Person类中重写equals后 //自定义类：已重写equals，可以比较值，若属性完全相同，返回true System.out.println(coll.contains(new Person(\\\"jinno\\\",20)));//true \"]},\"663\":{\"h\":\"7. containsAll\",\"t\":[\"比较是否包含某个集合\",\"算法：拿两个集合的元素挨个比较，判断形参c中的所有元素是否都存在于当前集合中，都存在（即被包含）就返回true。\",\"boolean containsAll(Collection<?> c); ============================================= //coll == [aa, bb, cc, dd]; coll2 == [cc,dd] boolean res3 = coll.containsAll(coll2); System.out.println(res3); //true \"]},\"664\":{\"h\":\"8. remove\",\"t\":[\"从集合中删除指定的元素，算法是：使用参数与集合中的每个元素做equals判断，找到即删除。 该方法只会删除找到的第一个元素，对于自定义类，需要重写equals方法，不如无法删除成功。\",\"boolean remove(Object obj);//该方法最初是定义在iterator中的 ========================================================= //coll == [aa,bb,cc,dd] boolean res4 = coll.remove(\\\"dd\\\"); System.out.println(res4); //true; System.out.println(coll); //[aa,bb,cc] \"]},\"665\":{\"h\":\"9. removeAll\",\"t\":[\"移除交集，求差集；\",\"将当前集合与参数集合做差集，并将差集从当前集合中移除。即移除当前集合中，参数集合也有的元素。\",\"boolean removeAll(Collection<?> c); ======================================== //coll == [aa,bb,cc,dd]; coll2 == [cc,dd] boolean result5 = coll.removeAll(coll2); System.out.println(coll); //[aa,bb] \"]},\"666\":{\"h\":\"10. retainAll\",\"t\":[\"计算当前集合和参数集合的交集，并将交集返回到当前的集合中。\",\"boolean retainAll(Collection<?> c); ========================================================= //coll == [aa,bb,cc,dd]; coll2 == [cc,hello] boolean res = coll.retainAll(coll2); System.out.println(res);//true,true表示执行成功,而非找到了交集 System.out.println(coll); //[cc] \"]},\"667\":{\"h\":\"11. equals\",\"t\":[\"判断两个集合是否想等，两个集合会用equals比对集合中的所有obj，全部相等就会返回true。\",\"注意：不同的Collection子类都重写了equal方法，比对时，不同的子类对顺序要求不同，对于ArrayList，他是有序的，所以集合元素如果都相同，但是顺序不同，也会返回false。\",\"boolean equals(Object o); ================================= coll.equals(coll2);//boolean \"]},\"668\":{\"h\":\"12. toArray\",\"t\":[\"将集合转为数组。\"]},\"669\":{\"h\":\"12.1 转为Object类型的数组\",\"t\":[\"Object[] toArray(); ==================================== Object[] obj = coll.toArray(); System.out.println(Arrays.toString(obj)); \"]},\"670\":{\"h\":\"12.2 转为指定类型的数组\",\"t\":[\"<T> T[] toArray(T[] a); ===================================================== String[] arr = coll.toArray(new String[coll.size()]); \"]},\"671\":{\"h\":\"13. iterator\",\"t\":[\"返回迭代器对象，用于集合遍历\",\"Iterator<E> iterator(); ===================================== Iterator it = coll.iterator(); System.out.println(it); //java.util.ArrayList$Itr@4554617c \"]},\"672\":{\"h\":\"Ⅱ. Iterator\",\"t\":[\"位置\",\"Libraries>java>util Iterator.java 【interface】\"]},\"673\":{\"h\":\"结构\",\"t\":[\"public interface Iterator<E>{ ... } \"]},\"674\":{\"h\":\"使用\",\"t\":[\"通过Collection接口的iterator()方法获取 实现了Iterator接口的对象。 Collection接口实现对象，每调用一次iterator方法，就会产生一个Iterator迭代器对象\"]},\"675\":{\"h\":\"指针\",\"t\":[\"iterator对象有一个指针，指向集合中的某个元素。对于一个全新的迭代器，他的指针在第一个元素之前（注意是之前），每次执行一次next方法，指针就往后移动一次。\"]},\"676\":{\"h\":\"1. hasNext\",\"t\":[\"用来判断指针后面还有没有集合元素。\",\"boolean hasNext(); ===================================== //Collection<Integer> coll == [1,2,3,4] Iterator<Integer> it = coll.iterator(); boolean res = it.hasNext(); System.out.println(res); //true \"]},\"677\":{\"h\":\"2. next\",\"t\":[\"iterator.next()用来向后移动一次指针，并取出指针指向的集合元素，进行返回。\",\"注意：当指针已经指向最后时，就不能再调用next方法了，会抛出异常，且取完数据后，指针就会呆在集合末尾，不会自动重置。\",\"E next(); ===================================== //Collection<Integer> coll == [1,2,3,4] Iterator<Integer> it = coll.iterator(); Integer nextVal = it.next(); System.out.println(nextVal); //1 \"]},\"678\":{\"h\":\"3. remove\",\"t\":[\"remove方法用来在遍历的时候，删除集合中的元素。此方法不同于集合直接调用remove()。\",\"注意：如果还未调用next()或在上一次调用 next 方法之后已经调用了 remove 方法，再调用remove都会报IllegalStateException。\",\"void remove() ===================================== //Collection<Integer> coll == [1,2,3,4] Iterator<Integer> it = coll.iterator(); Integer nextVal = it.next();//此时指针指向1; it.remove();//移除指针指向的值：1; System.out.println(coll); //[2, 3, 4] ,值为1的集合元素被删除 \"]},\"679\":{\"h\":\"Ⅲ. Collections\",\"t\":[\"位置\",\"rt.jar>java>util>Collections.java 【class】\",\"不要跟Collection搞混了，前者是个集合接口，后者是操作接口的工具类。\",\"Collections 中提供了一系列静态的方法对集合元素进行排序、查询和修改等操作，还提供了对集合对象设置不可变、对集合对象实现同步控制等方法。\"]},\"680\":{\"h\":\"结构\",\"t\":[\"public class Collections{ private Collections(){} } \"]},\"681\":{\"h\":\"用途\",\"t\":[\"Collections 是一个操作 Set、List 和 Map 等集合的工具类Map相关的方法比较少。\",\"排序：主要是List集合，就他用顺序。\",\"查找替换：主要是Collection集合的操作方法\",\"多线程同步：Collections 类中提供了多个 synchronizedXxx() 方法，该方法可使将指定集合包装成线程同步的集合，从而可以解决多线程并发访问集合时的线程安全问题。\"]},\"682\":{\"h\":\"1. reverse\",\"t\":[\"元素反转，仅List可用，就他有顺序。 反转 List 中元素的顺序。\",\"void reverse(List<?> list) ======================================== List<Integer> list = new ArrayList<>(); list.add(1); list.add(2); list.add(3); System.out.println(list); //[1, 2, 3] Collections.reverse(list); System.out.println(list); //[3, 2, 1] \"]},\"683\":{\"h\":\"2. shuffle\",\"t\":[\"随机排序，仅List可用，就他有顺序。\",\"void shuffle(List<?> list); ==================================== //list = [1,3,3] System.out.println(list); //[1, 2, 3] Collections.shuffle(list); System.out.println(list); //[3, 2, 1] Collections.shuffle(list); System.out.println(list); //[3, 1, 2] \"]},\"684\":{\"h\":\"3. sort\",\"t\":[\"排序，仅List可用，就他有顺序。\",\"自然排序：仅一个参数，待排序的list\",\"自定义排序：根据指定的第二个参数Comparator进行排序\",\"<T extends Comparable<? super T>> void sort(List<T> list); <T> void sort(List<T> list, Comparator<? super T> c); ========================================================= //list = [1, 5, 3, 6, 4] System.out.println(list); //[1, 5, 3, 6, 4] Collections.sort(list); //进行自然排序 System.out.println(list);//[1, 3, 4, 5, 6] Collections.sort(list,new Comparator(){ //进行定制排序 public int compare(Object o1, Object o2) { return (int) o2 - (int) o1; //从大到小排序 } }); System.out.println(list); //[6, 5, 4, 3, 1] \"]},\"685\":{\"h\":\"4. swap\",\"t\":[\"交换元素位置，仅List可用，就他有顺序。 将指定 list 集合中的 i 处元素和 j 处元素进行交换\",\"void swap(List<?> list, int i, int j) ========================================== //list = [1, 5, 3, 6, 4] System.out.println(list);//[1, 5, 3, 6, 4] Collections.swap(list,1,2); System.out.println(list);//[1, 3, 5, 6, 4] \"]},\"686\":{\"h\":\"5. max\",\"t\":[\"返回给定集合中的最大元素\",\"自然排序：默认采用自然排序。\",\"定制排序：可以指定第二个参数，进行定制排序。\",\"<T extends Object & Comparable<? super T>> T max(Collection<? extends T> coll); <T> T max(Collection<? extends T> coll, Comparator<? super T> comp); ========================================================= //list = [1, 5, 3, 6, 4] Integer max = Collections.max(list); System.out.println(max);//6 \"]},\"687\":{\"h\":\"6. min\",\"t\":[\"返回最小元素\",\"自然排序：默认采用自然排序。\",\"定制排序：可以指定第二个参数，进行定制排序。\",\"<T extends Object & Comparable<? super T>> T min(Collection<? extends T> coll); <T> T min(Collection<? extends T> coll, Comparator<? super T> comp); ========================================================= //list = [1, 5, 3, 6, 4] Integer min = Collections.min(list); System.out.println(min);//1 \"]},\"688\":{\"h\":\"7. frequency\",\"t\":[\"返回指定集合中指定元素的出现次数\",\"int frequency(Collection<?> c, Object o); =============================================== //list = [1, 5, 2, 3, 5] int frequency = Collections.frequency(list, 5); System.out.println(frequency);//2 \"]},\"689\":{\"h\":\"8. copy\",\"t\":[\"集合复制，将参数src集合的内容复制到参数dest集合中。\",\"注意：直接向一个空的集合中复制会报异常，IndexOutOfBoundsException，需要先创建一个同等长度的集合（也可以大于）。\",\"<T> void copy(List<? super T> dest, List<? extends T> src) ========================================================= List<Integer> list = new ArrayList<>(); list.add(1); list.add(2); list.add(3); ArrayList<Integer> list2 = new ArrayList<>(); list2.add(null); list2.add(null); list2.add(null); list2.add(null); Collections.copy(list2,list); System.out.println(list);//[1, 2, 3] System.out.println(list2);//[1, 2, 3, null] \"]},\"690\":{\"h\":\"9. replaceAll\",\"t\":[\"使用新值替换List 对象的所有旧值。\",\"<T> boolean replaceAll(List<T> list, T oldVal, T newVal); ========================================================= //list = [1, 1,0] Collections.replaceAll(list, 1, 2); System.out.println(list);//[2, 2, 0] \"]},\"691\":{\"h\":\"10. synchronizedXxx\",\"t\":[\"获取线程安全的集合，参数传入一个线程不安全的集合，返回一个线程安全的同类集合。\",\"<T> List<T> synchronizedList(List<T> list); <T> Collection<T> synchronizedCollection(Collection<T> c); <K,V> Map<K,V> synchronizedMap(Map<K,V> m); <K,V> NavigableMap<K,V> synchronizedNavigableMap(NavigableMap<K,V> m); <T> NavigableSet<T> synchronizedNavigableSet(NavigableSet<T> s); <T> Set<T> synchronizedSet(Set<T> s); <K,V> SortedMap<K,V> synchronizedSortedMap(SortedMap<K,V> m); <T> SortedSet<T> synchronizedSortedSet(SortedSet<T> s); ========================================================= List<Integer> list = new ArrayList<>(); list.add(1); list.add(1); list.add(0); List<Integer> syncList = Collections.synchronizedList(list); \"]},\"692\":{\"h\":\"2-4. List & Map\"},\"693\":{\"h\":\"Ⅰ. List\",\"t\":[\"位置\",\"rt.jar>java>util>List.java 【interface】\",\"List除了从Collection集合继承的方法外，List 集合里添加了一些根据索引来操作集合元素的方法。 并对Collection的很多方法进行了重载。以下介绍的方法都是新增或重载后的方法。\"]},\"694\":{\"h\":\"结构\",\"t\":[\"public interface List<E> extends Collection<E>{ ... } \"]},\"695\":{\"h\":\"使用说明\",\"t\":[\"List是接口不能直接实例化，这里所有案例均以ArrayList为例。 集合都是可以指定泛型的，如果不指定泛型，就接受Object类，以下使用均会含有泛型。\"]},\"696\":{\"h\":\"Arrays.asList\",\"t\":[\"可以使用Arrays.asList方法快速生成一个List集合。\",\"List<String> list = Arrays.asList(\\\"a\\\", \\\"b\\\", \\\"c\\\"); System.out.println(list);//[a, b, c] \"]},\"697\":{\"h\":\"1. add\",\"t\":[\"添加数据，重载方法。\",\"1个参数 ele：就是使用的collection的add()，\",\"2个参数 index,ele：就使用ArrayList中重载的，即向某个index插入数据，其他数据index顺延。 \",\"index：集合的索引\",\"ele：待添加的集合元素。\",\"void add(int index, E element); ======================================= List<String> list = new ArrayList<>(); list.add(\\\"a\\\"); list.add(\\\"c\\\"); System.out.println(list);//[a, c] list.add(1,\\\"b\\\"); System.out.println(list);//[a, c] \"]},\"698\":{\"h\":\"2. addAll\",\"t\":[\"添加另一个集合的元素，重载方法。\",\"1个参数 eles：就是使用的collection中的addAll，直接添加另一个集合\",\"2个参数 index,eles：使用ArrayList重载的，可以从指定的index开始插入另一个集合的数据。 \",\"index：集合的索引\",\"else：待添加的集合\",\"效果：该方法会将参数集合中的所有元素都添加到自己的集合中，该方法会改变源集合。\",\"返回值：Boolean，添加成功就返回true。\",\"boolean addAll(int index, Collection eles); =========================================================== //list1 = [a,b,c]; list2 = [d,e,f]; boolean res = list1.addAll(list2); System.out.println(res); //true：添加成功 System.out.println(list1);//[a, b, c, d, e, f]，源集合改变了 System.out.println(list2);//[d, e, f]，参数集合还在 \"]},\"699\":{\"h\":\"3. get\",\"t\":[\"获取指定index 位置的元素。 如果取的index不存在，就会报异常：IndexOutOfBoundsException。\",\"E get(int index); ========================================================= //list1 = [a,b,c]; String s1 = list1.get(0); String s2 = list1.get(3); System.out.println(s1);//a System.out.println(s2);//抛出异常：IndexOutOfBoundsException \"]},\"700\":{\"h\":\"4. indexOf\",\"t\":[\"查询某个元素首次出现的位置（index），如果不存在，返回-1.\",\"int indexOf(Object o); ================================ //list1 = [a,b,b,c]; int res = list1.indexOf(\\\"b\\\"); System.out.println(res);//1 \"]},\"701\":{\"h\":\"5. lastIndexOf\",\"t\":[\"返回元素最后出现的位置，如果不存在，返回-1。\",\"int lastIndexOf(Object o); ================================== //list1 = [a,b,b,c]; int res = list1.lastIndexOf(\\\"b\\\"); System.out.println(res);//2 \"]},\"702\":{\"h\":\"6. remove\",\"t\":[\"移除指定index的元素，重载方法\",\"参数是index：移除指定index的元素并返回（ArrayList 重载） \",\"返回值是被移除的元素\",\"如果index超出了范围，就会报IndexOutOfBoundsException。\",\"参数是obj：移除元素的值为obj的元素（Collection） \",\"返回值是Boolean，表示是否移除成功，移除的元素不存在，就返回false\",\"E remove(int index); ========================================================= //list1 = [a,b,c]; boolean b = list1.remove(\\\"b\\\");//调用的是Collection.remove() System.out.println(list1);//[a, c] String s1 = list1.remove(0);//调用的是List.remove() System.out.println(s1);//a:被删除的元素 System.out.println(list1);//[c] \"]},\"703\":{\"h\":\"7. set\",\"t\":[\"修改指定index的元素 。 返回值：修改前的obj元素。\",\"E set(int index, E element); ============================================================= //list1 = [a,b,c]; String s1 = list1.set(0, \\\"A\\\"); System.out.println(s1);//a System.out.println(list1);//[A, b, c] \"]},\"704\":{\"h\":\"8. subList\",\"t\":[\"返回两个index区间的元素，返回从fromIndex到toIndex位置的左闭右开区间的子集合。 返回了一个新集合，源集合没有变化。\",\"List<E> subList(int fromIndex, int toIndex); ================================================ //list1 = [a,b,c,d,e,f]; List<String> list2 = list1.subList(0, 3); System.out.println(list1);//[a, b, c, d, e, f] System.out.println(list2);//[a, b, c] \"]},\"705\":{\"h\":\"Ⅱ. Map\",\"t\":[\"位置\",\"rt.jar>java>util>Map.java 【Interface】\"]},\"706\":{\"h\":\"结构\",\"t\":[\"public interface Map<K,V>{ .... } \"]},\"707\":{\"h\":\"实现类\",\"t\":[\"Map有五个实现类：HashMap、LinkedHashMap、TreeMap、Hashtable、Properties。 常用实现类为HashMap，这里所有的例子均以HashMap为例。\"]},\"708\":{\"h\":\"泛型\",\"t\":[\"Map集合内的数据是键值对，因此Map支持两个集合，第一个表示键的类型，第二个表示值的类型。\"]},\"709\":{\"h\":\"特性\",\"t\":[\"键不可以重复，值可以重复。\"]},\"710\":{\"h\":\"遍历操作\",\"t\":[\"Map接口是没有iterator的，即没有迭代器接口，但可以对Key，Value进行遍历。\",\"key：key是有set组成的，可以迭代key\",\"value：value也是由set组成的，可以迭代value\",\"entry：也是有set组成的，同理(entry== key,value)。\"]},\"711\":{\"h\":\"1. put\",\"t\":[\"增改元素，将指定key-value添加到(或修改)当前map对象中，如果key，已经存在，则为修改value。\",\"开发中，key一般为String。\",\"V put(K key, V value); ================================================= hm.put(\\\"Aaron\\\",\\\"A\\\"); hm.put(\\\"Allen\\\",\\\"A\\\"); hm.put(\\\"Bob\\\",\\\"B\\\"); System.out.println(hm);//{Aaron=A, Bob=B, Allen=A} hm.put(\\\"Bob\\\",\\\"b\\\");//相同的key，则为修改。 System.out.println(hm);//{Aaron=A, Bob=b, Allen=A} \"]},\"712\":{\"h\":\"2. putAll\",\"t\":[\"增改集合，将参数集合中的所有key-value对存放到当前map中。 相当于将参数集合中的所有元素挨个添加到了当前集合，同样会发生覆盖（修改）。 注意：参数集合的泛型必须与本集合的泛型相同或是子类。\",\"void putAll(Map<? extends K, ? extends V> m); ========================================================= Map<String, String> hm = new HashMap<>(); HashMap<String, String> hm2 = new HashMap<>(); //hm={Aaron=A, Bob=B, Allen=A} hm2={Bob=BB, Jobs=J} hm.putAll(hm2); System.out.println(hm);//{Aaron=A, Bob=BB, Jobs=J, Allen=A} \"]},\"713\":{\"h\":\"3. remove\",\"t\":[\"移除元素：移除指定key的key-value对，并返回value。 如果指定的key不存在，则返回null。\",\"V remove(Object key); ========================================== //hm={Aaron=A, Bob=B, Allen=A} String allen = hm.remove(\\\"Allen\\\"); System.out.println(allen);//A String jobs = hm.remove(\\\"Jobs\\\"); System.out.println(jobs);//null System.out.println(hm);//{Aaron=A, Bob=B} \"]},\"714\":{\"h\":\"4. clear\",\"t\":[\"清空集合：清空当前map中的所有数据，变为空的map集合\",\"void clear(); ================================= //hm={Aaron=A, Bob=B, Allen=A} hm.clear(); System.out.println(hm);//{} \"]},\"715\":{\"h\":\"5. get\",\"t\":[\"获取value，获取指定key对应的value，如果key不存在，就返回null。\",\"V get(Object key); =================================== //hm={Aaron=A, Bob=B, Allen=A} String allen = hm.get(\\\"Allen\\\"); System.out.println(allen);//A String he = hm.get(\\\"He\\\"); System.out.println(he);//null \"]},\"716\":{\"h\":\"6. containsKey\",\"t\":[\"是否包含指定的key。\",\"boolean containsKey(Object key); ====================================== //hm={Aaron=A, Bob=B, Allen=A} boolean res1 = hm.containsKey(\\\"Bob\\\"); boolean res2 = hm.containsKey(\\\"Jobs\\\"); System.out.println(res1);//true System.out.println(res2);//false \"]},\"717\":{\"h\":\"7. containsValue\",\"t\":[\"boolean containsValue(Object value); ========================================= //hm={Aaron=A, Bob=B, Allen=A} boolean res1 = hm.containsValue(\\\"A\\\"); boolean res2 = hm.containsValue(\\\"C\\\"); System.out.println(res1);//true System.out.println(res2);//false \"]},\"718\":{\"h\":\"8. size\",\"t\":[\"返回map中key-value对的个数。\",\"int size(); =============================== //hm={Aaron=A, Bob=B, Allen=A} int size = hm.size(); System.out.println(size);//3 \"]},\"719\":{\"h\":\"9. isEmpty\",\"t\":[\"判断当前map是否为空，空则返回true。\",\"boolean isEmpty(); ================================= //hm={Aaron=A, Bob=B, Allen=A} boolean res1 = hm.isEmpty(); System.out.println(res1);//false hm.clear(); boolean res2 = hm.isEmpty(); System.out.println(res2);//true \"]},\"720\":{\"h\":\"10. equals\",\"t\":[\"判断两个集合是否想等，会比对集合中的所有元素。 集合中元素的顺序不影响比对结果，key=>value 是一起参与比对的\",\"boolean equals(Object o); =========================================================== //hm={Aaron=A, Bob=B, Allen=A} hm2={ Bob=B,Aaron=A, Allen=A} boolean res = hm.equals(hm2); System.out.println(res);//true \"]},\"721\":{\"h\":\"11. keySet\",\"t\":[\"返回所有key构成的Set集合，可以使用iterator接口或增强for循环遍历了。\",\"Set<K> keySet(); ============================================================= //hm={Aaron=A, Bob=B, Allen=A} Set<String> set = hm.keySet();//[Aaron, Bob, Allen] Iterator it = set.iterator(); //拥有了iterator接口 while(it.hasNext()){ System.out.println(it.next()); //可以遍历了：Aaron, Bob, Allen } \"]},\"722\":{\"h\":\"12. values\",\"t\":[\"返回所有value构成的Set集合,可以进行遍历了。\",\"Collection<V> values(); ====================================== //hm={Aaron=A, Bob=B, Allen=A} Collection<String> val = hm.values(); System.out.println(val);[A, B, A] for(String str:val){ System.out.println(str);//A, B, A } \"]},\"723\":{\"h\":\"13. entrySet\",\"t\":[\"返回所有k-v(entry)构成的Set集合，entrySet集合中的元素都是entry。 Entry是Map接口的内部接口。\",\"Set<Map.Entry<K, V>> entrySet(); ============================================================ //hm={Aaron=A, Bob=B, Allen=A} Set<Map.Entry<String, String>> entries = hm.entrySet(); System.out.println(entries);//[Aaron=A, Bob=B, Allen=A] Iterator it = entries.iterator(); //拥有了iterator接口 while(it.hasNext()){ Object obj = it.next(); Map.Entry entry = (Map.Entry)obj; System.out.println(entry.getKey()); System.out.println(entry.getValue()); } \"]},\"724\":{\"h\":\"2-5. Functional\",\"t\":[\"提示\",\"此处将列举JDK所有内置的函数式接口。 JDK一共内置了43个函数式接口，包含了所有可能的情况。\",\"位置：rt.jar>java>util>function 【dir】\"]},\"725\":{\"h\":\"〇. 核心Functional\",\"t\":[\"43中函数式接口都是这四种接口的变形。\"]},\"726\":{\"h\":\"1. Consumer\",\"t\":[\"消费型：提供一个参数，什么都不返回：参数被消耗了。\",\"Consumer<T>{ void accept(T t); } \"]},\"727\":{\"h\":\"2. Supplier\",\"t\":[\"供给型：不提供参数，返回了一个值：供给了一个值。\",\"Supplier<T>{ T get(); } \"]},\"728\":{\"h\":\"3. Function\",\"t\":[\"函数型：提供参数，参数类型是对象T，返回值类型是对象R。\",\"Function<T,R>{ R apply(T t); } \"]},\"729\":{\"h\":\"4. Predicate\",\"t\":[\"断定型：提供一个参数，进行判断，返回boolean：进行一些参数的断定\",\"Predicate<T>{ boolean test(T t) } \"]},\"730\":{\"h\":\"Ⅰ. XxxConsumer\",\"t\":[\"消费型Functional，接受参数，并不返回任何结果、\",\"提示\",\"TBD\"]},\"731\":{\"h\":\"Ⅱ. XxxSupplier\",\"t\":[\"提示\",\"TBD\"]},\"732\":{\"h\":\"Ⅲ. XxxFucntion\",\"t\":[\"提示\",\"TBD\"]},\"733\":{\"h\":\"Ⅳ. XxxPredicate\",\"t\":[\"提示\",\"TBD\"]},\"734\":{\"h\":\"Ⅴ. XxxOperator\",\"t\":[\"提示\",\"TBD\"]},\"735\":{\"h\":\"2-6. 正则类\",\"t\":[\"提示\",\"正则的语法都是通用的，这里介绍的是正则相关的Java内置API\"]},\"736\":{\"h\":\"正则相关的类\",\"t\":[\"Java 正则表达式和 Perl 的是最为相似的。\",\"java.util.regex 包主要包括以下三个类：\",\"Pattern 类：pattern 对象是一个正则表达式的编译表示。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法，它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第一个参数。\",\"Matcher类：Matcher 对象是对输入字符串进行解释和匹配操作的引擎。与Pattern 类一样，Matcher 也没有公共构造方法。你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。\",\"PatternSyntaxException类：PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。 \",\"在JDK中java.util.regex.Pattern类的注释包含了所有Java的正则语法，可以直接查看该类的注释来使用正则语法。\"]},\"737\":{\"h\":\"注意事项\",\"t\":[\"在 Java 中，\\\\\\\\ 表示：我要插入一个正则表达式的反斜线，所以其后的字符具有特殊的意义。\",\"所以，在其他的语言中（如 Perl），一个反斜杠 \\\\就足以具有转义的作用，而在 Java 中正则表达式中则需要有两个反斜杠才能被解析为其他语言中的转义作用。也可以简单的理解在 Java 的正则表达式中，两个 \\\\\\\\ 代表其他语言中的一个 \\\\，这也就是为什么表示一位数字的正则表达式是 \\\\\\\\d，而表示一个普通的反斜杠是 \\\\\\\\。\"]},\"738\":{\"h\":\"Java正则语法指南\",\"t\":[\"在JDK中java.util.regex.Pattern类的注释包含了所有Java的正则语法，可以直接查看该类的注释来使用正则语法。\",\"Pattern：Pattern，专门用来编译正则表达式的，一次编译，多次使用。\",\"Matcher：对于复杂的表达式需要使用JDK中的Matcher类来处理。 \",\"如：反向引用：Matcher.group\",\"模式修饰符：在java中，通过正则字符串不能表示模式修饰符，需要借助Pattern中的flags。\"]},\"739\":{\"h\":\"Pattern与Matcher的使用\",\"t\":[\"必须首先将指定为字符串的正则表达式编译为此类的实例。\",\"然后，可以使用生成的模式创建Matcher对象 \",\"该对象可以将任意character sequences与正则表达式进行匹配。\",\"参与执行匹配的所有状态都驻留在匹配器中，因此许多匹配器可以共享相同的模式。\",\"//1.定义正则表达式 String regex = \\\"a*b\\\"; //2.创建Pattern类的实例：正则模式对象 Pattern p = Pattern.compile(regex,CASE_INSENSITIVE ); //3.创建Matcher类的实例：比较器 Matcher m = p.matcher(\\\"aaabbb\\\"); //4.使用比较器进行匹配：调用某个Matcher实例的方法，获取结果 boolean b = m.matches(); \",\"提示\",\"Pattern本身也可以调用很多正则方法，完成正则匹配。 不过，Matcher类的功能更加丰富。\"]},\"740\":{\"h\":\"Ⅰ. String\",\"t\":[\"String类里也有很多涉及正则的方法。\"]},\"741\":{\"h\":\"1. replaceAll\",\"t\":[\"使用正则全部替换。 使用参数replacement替换所有正则表达式匹配到的字符串部分。\",\"参数1：正则表达式\",\"参数2：用来替换匹配到的内容。\",\"String replaceAll(String regex, String replacement); ====================================================== String s1 = \\\"I 1 am 2 a 3 Batman\\\"; String regex = \\\"\\\\\\\\d+\\\"; //设计正则表达式 String res = s1.replaceAll(regex, \\\"@\\\"); //进行替换 System.out.println(s1); //I 1 am 2 a 3 Batman System.out.println(res); //I @ am @ a @ Batman \"]},\"742\":{\"h\":\"2. replaceFirst\",\"t\":[\"使用参数replacement替换正则表达式匹配到的第一个字符串部分。\",\"参数1：正则表达式\",\"参数2：用来替换正则表达式第一个匹配到的内容\",\"String replaceFirst(String regex, String replacement); ======================================================= String s1 = \\\"I 1 am 2 a 3 Batman\\\"; String regex = \\\"\\\\\\\\d+\\\"; String res = s1.replaceFirst(regex, \\\"@\\\"); System.out.println(s1); //I 1 am 2 a 3 Batman System.out.println(res);//I @ am 2 a 3 Batman,只有第一个数字没替换了 \"]},\"743\":{\"h\":\"3. matches\",\"t\":[\"判断参数字符串是否匹配到了给定的正则表达式。\",\"boolean matches(String regex); ================================== String regex = \\\"a.b\\\"; String s1 = \\\"abb\\\"; boolean res = s1.matches(regex); System.out.println(res);//true \"]},\"744\":{\"h\":\"4. split\",\"t\":[\"根据给定正则表达式的匹配拆分此字符串。\",\"可以指定第二个参数：limit，表示切片最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。\",\"返回值：返回值是个字符串数组，而非字符串，数组的每个元素就是源字符串切后的小字符串。\",\"String[] split(String regex); String[] split(String regex, int limit); String s3 = \\\"I am Bat Van\\\"; String[] s4 = s3.split(\\\" \\\"); //根据空格分割 System.out.println(s4[1]); //am \"]},\"745\":{\"h\":\"Ⅱ. Pattern\",\"t\":[\"位置\",\"rt.jar>java>util>regex>Pattern.java [class]\",\"反复使用一个正则表达式字符串进行匹配效率较低，可以把正则表达式字符串编译成Pattern对象，然后反复使用该对象，实现一次编译多次使用。\",\"pattern (模式器) 与 matcher (匹配器) 搭配使用实现对字符序列的检索和指定模式匹配。\"]},\"746\":{\"h\":\"结构\",\"t\":[\"public final class Pattern implements java.io.Serializable{ private String pattern; ... } \"]},\"747\":{\"h\":\"构造器\",\"t\":[\"Pattern类的构造器是private，不能通过new创建示例，需要调用静态方法compile返回Pattern实例。\"]},\"748\":{\"h\":\"1. compile\",\"t\":[\"返回一个Pattern对象，参数是String正则表达式。 Java的String正则表达式是无法表示模式修饰符的，可以使用第二个参数flags指明模式修饰符。\",\"Pattern compile(String regex); Pattern compile(String regex, int flags); =========================================== String regex = \\\"\\\\\\\\d\\\"; Pattern pattern = Pattern.compile(regex); \"]},\"749\":{\"h\":\"2. flags\",\"t\":[\"falgs表示模式Pattern对象的模式修饰符，在创建Pattern对象的时候，可以指定。\",\"CASE_INSENSITIVE：忽略大小写 \",\"也可以通过表达式添加(?i)来启用。\",\"MULTILINE：开启多行模式(?m)； \",\"此时每行都能单独匹配^或$。\",\"不开多行模式的话整个字符串会被视作一行（加\\\\n也没用）。\",\"DOTALL：开启dotAll模式(?s)； \",\"此时字符.可以匹配一切字符，包括换行符。\",\"UNICODE_CASE：支持Unicode的忽略大小写 \",\"与CASE_INSENSITIVE的不同，未知。\",\"CANON_EQ：使规范等价 \",\"用法：未知\",\"UNIX_LINES：Unix行模式 \",\"在此模式中，只有'\\\\n'行结束符在.^和$的行为中被识别\",\"LITERAL：启用文字解析 \",\"表达式中的所有元字符转义字符将不具备特殊含义。\",\"UNICODE_CHARACTER_CLASS：启用Unicode版本的预定义字符类和POSIX字符类。 \",\"用法未知\",\"COMMENTS：允许在表达式中使用空格和注释 \",\"空格将被忽略，并且以#开头的注释也会被忽略。\",\"flags()\",\"flags方法：返回此模式的匹配标志\",\"int flags(); \"]},\"750\":{\"h\":\"3. matcher\",\"t\":[\"获取Matcher类的实例。\",\"Matcher类的构造方法也是私有的,不能随意创建,只能通过Pattern.matcher(CharSequence input)方法得到该类的实例。Pattern类只能做一些简单的匹配操作,要想得到更强更便捷的正则匹配操作,那就需要将Pattern与Matcher一起合作。\",\"Matcher类提供了对正则表达式的分组支持,以及对正则表达式的多次匹配支持。\",\"该方法的参数是：待匹配的CharSequence（string）。\",\"Matcher matcher(CharSequence input); ================================================================ String regex = \\\"\\\\\\\\d{4,}\\\"; //定义String正则表达式 String s1 = \\\"1223\\\";//待匹配的字符串 Pattern pattern = Pattern.compile(regex);//创建模式器 Matcher matcher = pattern.matcher(s1);//创建比较器 boolean res = matcher.matches();//调用比较器的某个方法进行正则匹配 System.out.println(res);//true,获取匹配的结果 \"]},\"751\":{\"h\":\"4. pattern\",\"t\":[\"返回该模式器的String类型的正则表达式。\",\"String pattern(); ========================================= Pattern p = Pattern.compile(\\\"\\\\\\\\d{4,}\\\"); String regex = p.pattern(); System.out.println(regex);//\\\\d{4,} \"]},\"752\":{\"h\":\"5. matches\",\"t\":[\"精准匹配：判断参数字符串是否匹配到了Pattern实例指定的正则表达式。\",\"参数1：regex，正则表达式；\",\"参数2：input，要匹配的字符序列\",\"返回值：Boolean，正则表达式是否与字符序列匹配\",\"boolean matches​(String regex, CharSequence input); ================================================================ String regex = \\\"\\\\\\\\d{4,}\\\"; String s1 = \\\"1223\\\"; Pattern p = Pattern.compile(regex);//创建Pattern对象 boolean res = p.matches(regex,s1);//注意：这里还是需要指定正则表达式 System.out.println(res);//true \"]},\"753\":{\"h\":\"6. split\",\"t\":[\"参数1：input，要拆分的字符序列；\",\"参数2：limit，可选，拆分的数目，表示切片最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。\",\"String[] split​(CharSequence input); ===================================================== String regex = \\\",\\\"; String s1 = \\\"1223\\\"; Pattern p = Pattern.compile(regex); String[] res = p.split(\\\"a,b,c,d\\\"); System.out.println(Arrays.toString(res));//[a, b, c, d] \"]},\"754\":{\"h\":\"Ⅲ. Matcher\",\"t\":[\"位置\",\"rt.jar>java>util>regex>Matcher.java 【class】\"]},\"755\":{\"h\":\"结构\",\"t\":[\"public final class Matcher implements MatchResult{ Pattern parentPattern; int[] groups; int from,to; ... } \"]},\"756\":{\"h\":\"实例化\",\"t\":[\"Matcher类的构造方法是私有的,不能随意创建,只能通过Pattern.matcher(CharSequence input)方法得到该类的实例。\",\"对照Matcher构造器源码，可知构造器将Pattern对象的引用赋于Matcher中变量parentPattern，目标字符串赋于变量text；并创建了数组groups和locals 。\",\"数组groups是组使用的存储。存储的是当前匹配的各捕获组的first和last信息。-\"]},\"757\":{\"h\":\"Matcher的状态\",\"t\":[\"Matcher对象是一个状态机器，在创建Matcher对象后，Matcher会初始化很多匹配的状态信息，这些信息都是私有的，没法直接获取。\\n对于非完全匹配（精准匹配），这些信息是很有用的。\"]},\"758\":{\"h\":\"2.JDK.util包\",\"t\":[\"位置\",\"rt.jar>java>util>Scanner.java 【class】\",\"用来扫描输入文本的类。 Scanner类的用法很多，这里只介绍简单的命令行，方便进行一些测试。\",\"结构\",\"public final class Scanner implements Iterator<String>,Closeable{ .... } \",\"使用 通过Scanner类来获取用户的输入。\",\"通过 Scanner 类的 next() 与 nextLine() 方法获取输入的字符串，在读取前我们一般需要使用hasNext 与 hasNextLine 判断是否还有输入的数据。\"]},\"759\":{\"h\":\"1. new Scanner\",\"t\":[\"构建一个Scanner对象，他生产从指定输入流扫描的值。当参数为System.in：表示从键盘获取输入的内容。\",\"Scanner(InputStream source);//这只是构造方法之一 Scanner scan = new Scanner(System.in); \"]},\"760\":{\"h\":\"2. next\",\"t\":[\"从此扫描仪查找并返回下一个完整令牌。\",\"用户从键盘输入内容，按回车即输入完毕，输入完毕后，Scanner.next方法就获取输入的内容。\",\"无参数：对即将获取的内容无限制。\",\"有参数：参数可以是String类型的正则或者Pattern类，该参数将限制接下来要输入的数据格式，只有与正则匹配的内容才可以。\",\"String next(); String next(String pattern); String next(Pattern pattern); Scanner scan = new Scanner(System.in); System.out.println(\\\"请输入姓名\\\"); String next = scan.next();//键盘输入：hello System.out.println(next);//hello \",\"效果\",\"执行代码；弹出命令行窗口，显示打印的字符：请输入姓名\",\"可以在键盘输入字符，点击Enter键完成输入\",\"输入完毕后，scan.next方法获取输入的字符串，并继续向下执行代码\",\"代码执行完毕，命令行交互结束\"]},\"761\":{\"h\":\"3. nextXxx\",\"t\":[\"next方法，会将获取的索引内容都当做字符串处理。\",\"也可以调用nextXxx方法（Xxx为基本数据类型），限制输入的字符类型。\",\"对于Number类型的Xxx有一个可选参数 radix，radix指的是进制。 \",\"radix取值为：2~36，即：最小是2进制，最大是36进制。\",\"输入数据时如果输入的值超过了进制或者超过了数据类型的范围，或者与数据类型不符都会报错。\",\"对于输入的非十进制数据，获取后的值依然是十进制。\",\"注意：Scanner没有提供Char类型next方法\",\"byte nextByte(int radix); boolean nextBoolean(); short nextShrot(int radix); int nextInt(int radix); long nextLong(int radix); float nextFloat(int radix); double nextDouble(int radix); BigInteger nextBigInter(int radix); BigDecimal nextBigDecimal(); Scanner scan = new Scanner(System.in); System.out.println(\\\"请输入\\\"); int next = scan.nextByte(2);//Byte类型的二进制数据 //键入：11111 System.out.println(next);//31,11111自动转为了十进制 \"]},\"762\":{\"h\":\"1-1. Java介绍\"},\"763\":{\"h\":\"1. Java内容分类\",\"t\":[\"Java SE：Java标准版；一开始是用于开发桌面级应用的，现在成了Java基础（去除桌面相关的API）。\",\"Java EE：Java企业版；主要用于应用后台开发。\",\"Java ME：Java移动版，已经被Android取代。\"]},\"764\":{\"h\":\"2. Java主要应用方向\",\"t\":[\"企业级应用：主要是软件后台API\",\"Android\",\"大数据开发\"]},\"765\":{\"h\":\"3. Java的特点\",\"t\":[\"面向对象\",\"健壮性：吸收了C的优点，提供了一个相对安全的内存管理和访问机制。\",\"跨平台：运行在JVM，JVM在各个平台都有。 \",\"JVM：一个运行Java的虚拟机，可以在各个平台运行，因此JAVA代码就可以在各个平台运行。\"]},\"766\":{\"h\":\"4. Java的核心机制\"},\"767\":{\"h\":\"4.1 Java虚拟机\",\"t\":[\"JVM：Java Virtal Machine\",\"JVM 是一个虚拟的计算机，具有指令集并使用不同的存储区域。负责执行指令，管理数据、内存、寄存器。\",\"对于不同的平台，有不同的虚拟机；只有某平台提供了对应的java虚拟机，java程序才可在此平台运行。\",\"Java虚拟机机制屏蔽了底层运行平台的差别，实现了“一次编译，到处运行”【跨平台本质】\",\"开发者->代码->JVM编译->操作系统运行\"]},\"768\":{\"h\":\"4.2 垃圾收集机制\",\"t\":[\"Java可以自动进行垃圾回收，将不用内存收回（比如没有变量指向的对象）。\"]},\"769\":{\"h\":\"5. Java版本选择\",\"t\":[\"目前常用的Jave8(1.8)，开发中使用Java8以上版本。\"]},\"770\":{\"h\":\"6. 概念补充\"},\"771\":{\"h\":\"6.1 软件运行方式\",\"t\":[\"GUI：Graphical User Interface；图形化界面。\",\"CLI：Command Line Interface；命令行方式。\"]},\"772\":{\"h\":\"6.2 编程语言介绍\",\"t\":[\"机器语言：第一代，指令以二进制代码形式存在。\",\"汇编语言：第二代，使用助记符表示一条机器指令。\",\"高级语言：第三代 \",\"面向过程语言：C语言等\",\"面向对象语言：JAVA、PHP、Python\"]},\"773\":{\"h\":\"1-2. 环境搭建\"},\"774\":{\"h\":\"Ⅰ. 开发环境搭建\",\"t\":[\"官网\"]},\"775\":{\"h\":\"1. 环境介绍\"},\"776\":{\"h\":\"1.1 JRE\",\"t\":[\"Java Runtime Environment Java 运行环境\",\"用来运行Java的环境，包括Java虚拟机和Java程序所需的核心类库等，只需要运行JAVA程序可以下载这个（服务器就要单独下载这个）。\"]},\"777\":{\"h\":\"1.2 JDK\",\"t\":[\"JDK：Java Development Kit Java 开发工具包\",\"Java开发人员使用的，其中包含了java的开发工具，也包括了JRE。所以安装了JDK，就不用在单独安装JRE了。\"]},\"778\":{\"h\":\"1.3 JDK、JRE、JVM的关系\",\"t\":[\"JDK = JRE + 开发工具集（例如Javac编译工具等）\",\"JRE = JVM + Java SE标准类库\"]},\"779\":{\"h\":\"2. 安装JDK：windows\",\"t\":[\"JDK8下载地址\",\"傻瓜式安装即可。版本选择：jdk-8u321-windows-x64（最基础版本）\",\"注意：当提示安装 JRE 时，正常在JDK安装时已经装过了，但是为了后续使用Eclipse等开发工具不报错，建议也根据提示安装JRE。\"]},\"780\":{\"h\":\"3. 环境变量path配置：windows\"},\"781\":{\"h\":\"3.1 直接配置path\",\"t\":[\"将jdk bin目录添加到path。\",\"地址示例：D:\\\\Java\\\\Soft\\\\JDK\\\\jdk1.8.0_321\\\\bin\"]},\"782\":{\"h\":\"3.2 多版本JDK\",\"t\":[\"当安装了多个版本的JDK时，环境变量配置的是哪个就使用的哪个版本。如果都配置了，就看谁在上面（前面）。\",\"对于IDE开发工具来时，简单设置就可以随意切换Java版本。\"]},\"783\":{\"h\":\"4. 配置JAVA_HOME\",\"t\":[\"先配置个JAVA_HOME环境变量，然后使用该环境变量配置path\",\"意义：tomcat服务器启动时，会自动识别JAVA_HOME这个变量，来启动。\"]},\"784\":{\"h\":\"4.1 创建变量\",\"t\":[\"1-2-1\"]},\"785\":{\"h\":\"4.2 使用变量\",\"t\":[\"1-2-2\"]},\"786\":{\"h\":\"Ⅱ. 生产环境搭建\",\"t\":[\"OS：CentOS 9 Stream\",\"Java Version：JDK17\"]},\"787\":{\"h\":\"1. yum安装\",\"t\":[\"yum -y list java* # 列出所有的java \",\"有多个Java版本，且可安装内容不止有jdk，还有javadoc等。\",\"1-2-3\",\"进行安装java17：\",\"# 安装指定版本的所有Java内容 yum -y install java-17-openjdk* # 查看安装：查看版本信息 java -version # 安装目录 cd /usr/lib/jvm # 卸载 yum -y remove java-17-openjdk* \"]},\"788\":{\"h\":\"1-3. 基本语法\"},\"789\":{\"h\":\"Ⅰ. 编译执行\"},\"790\":{\"h\":\"1. Java执行过程\",\"t\":[\" 示例：\",\"//文件：workpace/test.java class Hello{ public static void main(String[] args){ //单行注释 System.out.println(\\\"fuck world\\\"); } } //命令行编译：需要在文件所在位置执行命令 workplace>javac test.java workplace>java Hello \",\"编写：将 Java 代码 编写到扩展名为 .java 的文件中\",\"编译：通过过 javac 命令对该 java 文件进行编译，编译为class文件\",\"运行：通过 java 命令对生成的 class 文件进行\"]},\"791\":{\"h\":\"2. 执行过程解析\"},\"792\":{\"h\":\"2.1 编译代码\",\"t\":[\"javac test.java \",\"使用javac 命令来编译代码的源文件（文件名区分大小写），将其编译成JVM可识别的二进制文件（字节码文件）。 \",\"编译成功后，会在当前目录下生成一个编译后的文件（源文件还在）。\",\"编译后的文件以代码中的类名作为文件名（Hello），以.class作为后缀。\",\"如果代码进行过修改，就需要重新编译（新编译后的文件会覆盖原文件）。\"]},\"793\":{\"h\":\"2.2 运行代码\",\"t\":[\"java Hello \",\"运行的是编译后的.class结尾的文件。使用java命令进行运行\",\"执行文件时，不要加文件后缀。\"]},\"794\":{\"h\":\"2.3 注意事项\",\"t\":[\"命令行的编译和执行，需要在文件所在目录执行命令\",\"使用IDE或者智能编辑器，可以直接在编辑器里运行，自动编译执行。\"]},\"795\":{\"h\":\"3. 基本语法规则\"},\"796\":{\"h\":\"3.1 class：类\",\"t\":[\"在一个java源文件中可以声明多个class。\",\"只能最多有一个类声明为public的。\",\"声明为public的类的类名必须与源文件名相同。\"]},\"797\":{\"h\":\"3.2 main：入口\",\"t\":[\"程序的入口是main()方法。格式是固定的，必须有main方法，不然只能编译不能执行。 运行class文件时，就是从main方法开始运行的。\"]},\"798\":{\"h\":\"3.3 注意\",\"t\":[\"每一行执行语句都以 ; 结束。\",\"如果文件里有public修饰的类，则文件名必须与类名一样，不然会编译失败。\"]},\"799\":{\"h\":\"4. 输出语句\",\"t\":[\"一般用于测试：\",\"System.out.println(): 先输出数据，然后换行\",\"System.out.print(): 只输出数据\"]},\"800\":{\"h\":\"5. 基本使用测试\"},\"801\":{\"h\":\"5.1 包含两个类的java文件，编译后生成了两个class文件\",\"t\":[\"public class Hello{ } class Hi{ } //############################# javac Hello.java; //在当前目录下生成了两个class文件：Hello.class和Hi.class \"]},\"802\":{\"h\":\"5.2 没有main文件，直接运行会报错\",\"t\":[\"public class Hello{ } class Hi{ } //############################ javac Hello.java; //先编译 java Hello; //执行Hello.class java Hi; //执行Hi.class \",\"执行结果如下：\",\"1-3-2\"]},\"803\":{\"h\":\"5.3 结论\",\"t\":[\"一个文件可以有多个class，编译后，有几个class就形成几个文件，文件名就是类名；\",\"想单独执行某个class，则该class必须有main方法，不然无法执行。\",\"备注：可以在有main方法的类中，调用没有main方法的class文件（调用他的方法），因此main方法并非是类的必备方法\"]},\"804\":{\"h\":\"Ⅱ. 注释\"},\"805\":{\"h\":\"1. 注释的意义\",\"t\":[\"生成api文档\",\"增加可读性\",\"调试。\",\"整理思路，先写注释后写具体代码\"]},\"806\":{\"h\":\"2. 单行注释\",\"t\":[\"//这里是单行注释 \"]},\"807\":{\"h\":\"3. 多行注释\",\"t\":[\"/* 这里是多行注释 可以写多行 */ \"]},\"808\":{\"h\":\"4. 文档注释\",\"t\":[\"文档注释可以用来生成API文档，写文档注释时要按照一定的格式来写。\",\"/** @author jinno @version 1.0.8 */ \",\"位置：放在类，接口，构造函数，方法或字段声明之前（方法中不要加）。\",\"块标记：以@作为标记区分每个注释块的内容\",\"HTML：可以在注释里写HTML标签，生成的文档会解析HTML代码。\"]},\"809\":{\"h\":\"Ⅲ. 文档注释格式\"},\"810\":{\"h\":\"1. 通用文档标记\",\"t\":[\"适用于类、接口、方法、变量、常量等。\",\"@link：用于快速链接到相关代码，使用格式：{@link 包名.类名#方法名(参数类型)}\",\"注意：该标记外外面必须加{}，没有这个大引号，就无法直接跳转到目标代码了\",\"完全限定的类名：{@link java.util.Collections}\",\"省略包名，只写类名：{@link String}\",\"省略类名，表示指向当前的某一方法：{@link #toString}\",\"完全限定方法名，指向某类的某个方法：{@link java.lang.String#charAt(int)}\",\"@code：将文本标记为代码样式文本，一般在Javadoc中只要涉及到类名或者方法名，都需要使用@code进行标记，使用格式：{@code text}，其会被解析为 text。 \",\"标记类名：{@code ArrayList}\",\"标记方法名：{@code isEmpty}\",\"标记某个代码关键字：{@code null}\",\"/** * {@link java.util.Collections} * {@link String} * {@link #say(String word)} * {@link java.lang.String#charAt(int)} * {@code ArrayList} * {@code isEmpty} * {@code null} */ \"]},\"811\":{\"h\":\"2. 类上常用文档标记\",\"t\":[\"@author 类的作者，后面跟作者名或邮箱、官网等 \",\"如果一段程序是由多个作者来维护，则可以标记多个@author\",\"@param：如果一个类支持泛型时，可以通过@param来解释泛型的类型\",\"@version 用于标记当前类版本，默认为1.0\",\"@see 参考链接，用于标记与本类相关联的类，该标注可以用在类或方法上\",\"@since：表示从以下版本开始有这个类，标记文件创建时项目当时对应的版本，后面可以跟版本号或是时间。\",\"/** * this {@code Hello} class is very good; * <h1>作用</h1> * 用于测试基JavaSE语法 * <p>比如，文档注释是可以写标签的</p> * </pre></blockquote><p> * Here are some more examples of how strings can be used: * <blockquote><pre> * System.out.println(\\\"abc\\\"); * String cde = \\\"cde\\\"; * System.out.println(\\\"abc\\\" + cde); * String c = \\\"abc\\\".substring(2,3); * String d = cde.substring(1, 2); * </pre></blockquote> //上面的就是文档的概要描述和详细描述 * @author Aaron * @version 1.0.0 * @see java.util.stream.LongStream * @since 1.0.0 * @param <E> the type of elements in this list */ public class Hello<E> { .... } \",\"以上是类上常用的文档标注，类上的文档格式如下：\",\"概要描述：通常用一段话简要的描述该类的基本内容。\",\"详细描述：通常用几大段话详细描述该类的功能与相关情况。 \",\"这里常使用很多html标签\",\"文档标注：用于标注该类的作者、时间、版本、参略等信息。\"]},\"812\":{\"h\":\"3. 方法上常用文档标记\",\"t\":[\"@param：方法的参数名，包括参数描述。\",\"@return：返回值的描述。\",\"@throws：异常的类型和异常的描述，用于方法需要抛出异常的情况\",\"@exception：方法签名throws对应的异常\",\"@see：类和方法都可以用，表示参考的类和方法\",\" /** * this{@code say}function is asshole * <h1>作用</h1> * <p> 用来输出一段话</p> * @param word String,the value will return * @return String,the function's param * @throws Exception some Accidental error */ public static String say(String word) throws Exception{ return \\\"hello\\\"+word; } \",\"以上是方法上常用的文档标注，方法上的文档格式如下：\",\"概要描述：通常用一段话简要的描述该方法的基本内容。\",\"详细描述：通常用几大段话详细描述该方法的功能与相关情况。\",\"文档标注：用于标注该方法的参数、返回值、异常、参略等信息\"]},\"813\":{\"h\":\"4. 使用命令行生成API文档\",\"t\":[\"用wiodow打开cmd终端，然后进入要编译的java文件目录的路径中。\",\"javadoc -encoding UTF-8 -charset UTF-8 *.java //*也可以表示具体的文件名 \",\"编译成功后当前路径下会多出很多文件，点击打开index.html就可以查看文档了。\",\"1-3-2\"]},\"814\":{\"h\":\"5. 使用IDE生成帮助文档\",\"t\":[\"提示\",\"暂略\"]},\"815\":{\"h\":\"Ⅳ. 基本代码规范\",\"t\":[\"正确的注释和注释风格 \",\"使用文档注释来注释整个类或整个方法\",\"如果注释方法中的某一个步骤，使用单行或多行注释。\",\"正确的缩进和空白 \",\"使用一次tab操作，实现缩进\",\"运算符两边习惯性各加一个空格。比如：2 + 4 * 5。\",\"大括号的风格: Java API 源代码选择了行尾风格（大括号不换行）\"]},\"816\":{\"h\":\"1-4. 变量\"},\"817\":{\"h\":\"Ⅰ. 变量\"},\"818\":{\"h\":\"1. 概念\",\"t\":[\"变量是内存中的一个存储区域，该区域的数据可以在同一类型范围内不断变化。\",\"变量是程序中最基本的存储单元。包含变量类型、变量名和存储的值。\"]},\"819\":{\"h\":\"2. 作用\",\"t\":[\"用于在内存中保存数据。\"]},\"820\":{\"h\":\"3. 声明变量\"},\"821\":{\"h\":\"3.1 只声明\",\"t\":[\"语法：数据类型 变量名称\",\"int var; //声明但未初始化 \"]},\"822\":{\"h\":\"3.2 变量的赋值\",\"t\":[\"语法：变量名 = 值\",\"int var; var = 10; //赋值的变量必须已经声明过了(无论有没有初始化) \"]},\"823\":{\"h\":\"3.3 声明的同时赋值\",\"t\":[\"语法：数据类型 变量名 = 初始化值\",\"int var = 10; //声明变量的同时进行初始化 \"]},\"824\":{\"h\":\"4. 变量的作用域\",\"t\":[\"变量只有在其作用域内才有效；在哪个 {} 内定义，就在哪个 {} 中使用，跨 {} 找不到该标识符（报错）。\"]},\"825\":{\"h\":\"5. 使用变量的注意事项\",\"t\":[\"Java中每个变量必须先声明，后使用\",\"使用变量时，该变量必须已经被初始化过了（赋值）。\",\"同一个作用域内，不能定义重名的变量，会报错（java中不会发生变量覆盖，而是报错）。\"]},\"826\":{\"h\":\"6. 变量的分类\",\"t\":[\"java对于每一种数据都定义了明确的具体数据类型（强类型语言），在内存中分配了不同大小的内存空间。\"]},\"827\":{\"h\":\"6.1 按照数据类型\",\"t\":[\"变量可以分为8种基本数据类型，和3种引用类型。\",\"基本数据类型：primitive type \",\"数值型： \",\"整形 \",\"byte\",\"shot\",\"int\",\"long\",\"浮点型 \",\"float\",\"double\",\"字符型：char\",\"布尔型：boolean\",\"引用数据类型：reference type \",\"类：class\",\"接口：interface\",\"数组：array[ ]\"]},\"828\":{\"h\":\"6.2 按照变量声明的位置\",\"t\":[\"成员变量：在方法体外，类体内声明的变量 \",\"实例变量：不易static修饰\",\"类变量：以static修饰\",\"局部变量：在方法体内部声明的变量 \",\"形参：方法、构造器中定义的变量\",\"方法的局部变量：在方法内定义\",\"代码块局部变量：在代码块内定义\",\"注意：局部变量除形参外，需显式初始化\"]},\"829\":{\"h\":\"Ⅱ. 关键字\"},\"830\":{\"h\":\"1. 介绍\",\"t\":[\"关键字和保留字是被Java 语言赋予了特殊含义，用做专门用途的字符串（单词）\",\"特点：关键字中所有字母都为小写\"]},\"831\":{\"h\":\"2. 关键字汇总\",\"t\":[\"官方地址\"]},\"832\":{\"h\":\"3. 保留字\",\"t\":[\"现有Java版本尚未使用，但以后版本可能会作为关键字使用。自己命名标识符时要避免使用这些保留字 ：goto 、const\"]},\"833\":{\"h\":\"Ⅲ. 标识符\",\"t\":[\"Java 对各种 变量、 方法和 类等要素命名时使用的字符序列称为标识符；\",\"也就是凡是自己可以起名字的地方都叫标识符\\\\\"]},\"834\":{\"h\":\"1. 合法标识符规则\",\"t\":[\"规则是必须遵守的\",\"由26 个英文字母大小写，0-9 ，_或 或 $ 组成\",\"数字不可以开头。\",\"不可以使用关键字和保留字，但能包含关键字和保留字。\",\"Java 中严格区分大小写，长度无限制。\",\"标识符不能包含空格。\"]},\"835\":{\"h\":\"2. 命名规范\",\"t\":[\"规范是最好遵守的\",\"包名【全小写】：多单词组成时所有字母都小写：xxxyyyzzz\",\"类名、接口名【大驼峰】：多单词组成时，所有单词的首字母大写：XxxYyyZzz\",\"变量名、方法名【小驼峰】：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：xxxYyyZzz\",\"常量名【全大写下划线分隔】：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ\"]},\"836\":{\"h\":\"1-5. 基本数据类型\"},\"837\":{\"h\":\"Ⅰ. 整形：4种\"},\"838\":{\"h\":\"1. 说明\",\"t\":[\"Java各整数类型有固定的表数范围和字段长度，不受具体OS的影响，以保证java程序的可移植性。 四种整形仅仅是储存空间大小和表示的数据范围有区别。\"]},\"839\":{\"h\":\"2. 四种整形的对比\",\"t\":[\"通常定义整形变量时，使用int。\",\"1-5-1\"]},\"840\":{\"h\":\"3. 注意事项\",\"t\":[\"给变量赋值时，如果值超过了变量类型规定的范围，将编译失败\",\"声明long类型时，必须以“l\\\"或”L\\\"结尾。\"]},\"841\":{\"h\":\"4. 使用示例\",\"t\":[\"byte age = 20; short pet = 2; int houseNum = 10000000000000000; long money = 146841646541651654681L; \"]},\"842\":{\"h\":\"5. 默认整形\",\"t\":[\"java的整型常量默认为 int 型，java程序中变量通常声明为int型，除非不足以表示较大的数，才使用long\"]},\"843\":{\"h\":\"Ⅱ. 浮点类型：2种\"},\"844\":{\"h\":\"1. 说明\",\"t\":[\"和整形类似，Java 浮点类型也有固定的表示范围和字段长度，不受具体操作系统的影响。\",\"浮点型其实就是小数。\"]},\"845\":{\"h\":\"2. 浮点型的两种表示方式\",\"t\":[\"十进制数形式：如：5.12 ；512.0f ；.512 (必须有小数点)\",\"科学计数法形式：如：5.12e2； 512E2 ；100E-2\"]},\"846\":{\"h\":\"3. 两种浮点类型的对比\",\"t\":[\"两种浮点类型只是表示的数据范围和精度不同。我们一般使用时选择double。\",\"1-5-2\",\"float: 单精度，尾数可以精确到7位有效数字。很多情况下，精度很难满足需求\",\"double: 双精度，精度是float的两倍。通常采用此类型\"]},\"847\":{\"h\":\"4. 注意事项\",\"t\":[\"定义float类型变量时，变量要以\\\"f\\\"或\\\"F\\\"结尾\"]},\"848\":{\"h\":\"5. 使用示例\",\"t\":[\"float f1 = 23.23F; double d1 = 23.2321e12; \"]},\"849\":{\"h\":\"6. 底层说明\",\"t\":[\"fload表示数据的数据范围比long还大，却只占用4个字节，为什么？\",\"这跟fload表示数据的方式有关，如下图：\",\"1-5-3\",\"第一个bit表示正负，第2~8个bit表示E指数，剩下的表示小数点。\"]},\"850\":{\"h\":\"7. 知识补充：long类型为什么加L\",\"t\":[\"java是需要手动分配内存空间，然后再进行储值的。我们定义变量时，就需要先定义变量类型，再初始化赋值。\",\"当我们与常量数值进行运算时，这个数值我们没有定义容量，java要怎么分配内存呢？答案是，java提供了默认长度（int），按int长度分配内存。\",\"因此当我们需要long类型的常量数值时，就需要加个L告诉java分配8个Byte的内存。而加L的操作也延续到了定义变量的时候。\",\"float同理。\"]},\"851\":{\"h\":\"Ⅲ. 字符类型：char\"},\"852\":{\"h\":\"1. 说明\",\"t\":[\"char 型数据用来表示通常意义上“字符”(2字节)。\",\"这里的字符是任意语言的一个字，比如一个字母、一个汉字、一个片假名。\"]},\"853\":{\"h\":\"2. 声明字符\",\"t\":[\"需要使用单引号表示值（不能使用双引号，否则报错）。\",\"字符类型只能是一个字符，超过一个字符会报错（字符类型不是字符串）。\",\"char c1 = 'h'; \"]},\"854\":{\"h\":\"3. 字符变量的三种表现形式\",\"t\":[\"除了直接使用字符作为值外，还可以使用能表示字符的其他形式；\",\"普通字符：用单引号('')括起来的单个字符\",\"转义字符：使用转义字符 \\\\ 来将其后的字符转变为特殊字符型常量\",\"Unicode：使用 Unicode 值来表示字符型常量\",\"ASCII：直接使用整数ASCII码\",\"char c1 = '帅'; char c2 = '\\\\n'; //\\\\n:表示换行符 char c3 = '\\\\u0043'; char c4 = 97; //a,不推荐使用 \"]},\"855\":{\"h\":\"4. 字符集介绍\",\"t\":[\"计算机内部都是二进制的；我们输入的字符都是通过转码变成二进制让计算机识别的。文字==字符集转码==>计算机能够识别的二进制\",\"转码就需要用到字符集了（密码本），针对不同的字符类型会有不同的字符集，常见的如下：\",\"ASCII：只能表示英文的编码集\",\"Unicode：将世界所有字符都纳入其中，解决乱码问题。\",\"UTF-8：真正实现了，将所有字符都纳入其中，是在互联网上使用最广的一种 Unicode 的实现方式。\",\"乱码：不同字符集编码的字符进行传输时，就会出现乱码（密码本不一样，解密解不出）。\",\"转码：将一种字符集编码的字符转换成其他字符集编码的字符，如GBK转UTF-8.\"]},\"856\":{\"h\":\"5. 注意事项\",\"t\":[\"char类型的值不能是空字符串（可以1个是空格）。\",\"必须使用单引号，不能使用双引号。\"]},\"857\":{\"h\":\"Ⅳ. 布尔类型：boolean\"},\"858\":{\"h\":\"1. 说明\",\"t\":[\"boolean 类型用来判断逻辑条件，一般用于程序流程控制。\",\"boolean类型数据只允许取值true和false，无null。\"]},\"859\":{\"h\":\"2. 使用示例\",\"t\":[\"boolean b1 = true; boolean b2 = false; \"]},\"860\":{\"h\":\"3. 注意\",\"t\":[\"在java中，boolean只能用true和false表示。不可以使用0或非 0 的整数替代false和true，这点和C语言不同。\",\"Java虚拟机中没有任何供boolean值专用的字节码指令，Java语言表达所操作的boolean值，在编译之后都使用java虚拟机中的int数据类型来代替：true用1表示，false用0表示。\"]},\"861\":{\"h\":\"Ⅴ. 类型间的转换\"},\"862\":{\"h\":\"1. 不同类型之间的运算\",\"t\":[\"除了boolean类型外，其他7种基本数据类型是可以互相运算的。\",\"boolean只能取true和false没法参加运算；char是通过转为ASCII码进行运算的。\"]},\"863\":{\"h\":\"2. 自动类型提升\",\"t\":[\"自动类型转换：容量小的类型自动转换为容量大的数据类型\",\"1-5-3\",\"有多种类型的数据混合运算时，系统首先自动将所有数据转换成容量最大的那种数据类型，然后再进行计算（接收结果的变量也要定义成相应的数据类型）。\"]},\"864\":{\"h\":\"2.1 运算的规则\",\"t\":[\"当两个不同的数据类型之间进行运算时，必须使用较大的数据类型进行接收，不然就无法编译（这里的大指的是表示的数据范围大小，float就比long要大）。\",\"byte b1 = 10; int i1 = 200; int i2 = b1 + i1; //使用较大的数据类型进行接收 \"]},\"865\":{\"h\":\"2.2 特殊情况\",\"t\":[\"当byte、char、short三种类型的变量做运算时，结果必须为int型。\",\"char会转为整形的ASCII进行运算。\",\"有浮点型参与的运算，即使是整数，也会出现小数点\"]},\"866\":{\"h\":\"2.3 示例\",\"t\":[\"char c1 = 'a'; //97 byte b1 = 10; int i1 = c1 + b1; //107 int i2 = 100; double d1 = i2; //赋值;此时变成了 100.0 \"]},\"867\":{\"h\":\"3. 数值常量的默认数据类型\",\"t\":[\"对于一个数值常量，他有自己默认的数据类型：\",\"整型常量：默认类型为int\",\"浮点常量：默认为double 当数值常量参与运算的时候，接收的值数据类型不能小于数值常量的数据类型。\",\"//12是个整数常量，默认是int类型，进行计算时，必须用int类型接收。 byte b = 10; byte b1 = b + 12 //报错，应该用int类型接收 //10.1是浮点数常量，默认是double类型的。 byte b = 10; float f1 = b + 10.1; //编译失败，应该用double类型接收 \"]},\"868\":{\"h\":\"4. 不加L和F发生的自动类型转换\",\"t\":[\"为long类型赋值时，值的末尾要L，但不加L有时会报错，有时不会报错；为什么？\",\"没有加L时，默认数值是int类型的，如果值超过了int的范围，就直接报错（报错的情况）\",\"如果没有超过int的范围，赋值的过程就自动发生了变量提升（不报错的情况）。\",\"float同理\",\"//示例1：为long型变量赋值，没加L，默认为int long l1 = 1000; //编译正常 //示例2：long型没有加L，则取默认的int型，但该值超过了int范围，故报错 long l2 = 21323232323232332323; //编译报错 //示例3：提供的值没有加F，因此默认是double类型，double类型赋值给float会报错 float f1 = 12.3; //编译报错 \"]},\"869\":{\"h\":\"5. 强制类型转换\",\"t\":[\"自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使用时要加上强制转换符：()，但可能造成精度降低或溢出。\",\"double d1 = 2302323.123; int i1 = (int)d1; //结果：2302323；截断操作 int i2 = 128; byte b1 = (byte)i2; //结果：-128；溢出，发生了二进制运算 byte b = 3; b = b + 4; //报错 b = (byte)(b+4); //OK \",\"注意：boolean类型不可以转换为其它的数据类型。\"]},\"870\":{\"h\":\"Ⅵ. 进制问题\"},\"871\":{\"h\":\"1. 表示方法\",\"t\":[\"二进制：以0b或0B开头\",\"八进制：以数字0开头表示\",\"十六进制： 以0x或0X开头表示，a-f不区分大小写\"]},\"872\":{\"h\":\"2. 符号位\",\"t\":[\"储存数据时，专门有一位来储存数据的正负。\",\"符号位在最高位，0表示整数，1表示负数。\"]},\"873\":{\"h\":\"3. 原码、反码、补码\",\"t\":[\"二进制的整数有如下三种形式【在计算机底层，都已补码的方式来存储数据】。\",\"原码：直接将一个数值换成二进制数。最高位是符号位【用最高位表示正负，其余表示值】\",\"反码：正数的反码是其本身；负数的反码是源码基础上，符号位不变，其余各个位取反（1,0互换）\",\"补码：正数的补码就是其本身；负数的补码是在其源码的基础上，符号位不变，区域各位取反，最后+1（==反码+1）\",\"三个码的意义： 计算机辨别“符号位”显然会让计算机的基础电路设计变得十分复杂! 于是人们想出了将符号位也参与运算的方法. 我们知道, 根据运算法则减去一个正数等于加上一个负数, 即: 1-1 = 1 + (-1) = 0 , 所以机器可以只有加法而没有减法, 这样计算机运算的设计就更简单了。\",\"1-1 = 1 + (-1) = [0000 0001]原 + [1000 0001]原 = [0000 0001]补 + [1111 1111]补 = [0000 0000]补=[0000 0000]原\"]},\"874\":{\"h\":\"4. 进制转换\",\"t\":[\"二进制《=》十进制 \",\"二进制转成十进制： 乘以2的幂数\",\"十进制转成二进制：除以2 取余数\",\"二进制《=》八进制 \",\"二进制转八进制：三个位加起来作为一个位\",\"八进制转二进制：一个位分解成3个位表示\",\"二进制《=》十六进制 \",\"同上，变成了1:4的转换\"]},\"875\":{\"h\":\"1-6. String\",\"t\":[\"String类型是引用类型，不属于基本数据类型。定义时必须使用双引号，不能使用单引号。\"]},\"876\":{\"h\":\"1. String对象的创建\",\"t\":[\"有两种创建方式：\",\"字面量：和基本数据类型一样，只是关键字是String，因为String经常用到，所以JDK对它进行了优化。\",\"构造器：使用new String创建\",\"String s1 = \\\"javaEE\\\"; String s3 = new String(\\\"javaEE\\\"); \"]},\"877\":{\"h\":\"2. 字符串常量池\",\"t\":[\"通过字面量的方式（区别于new）给一个字符串赋值，此时的字符串值声明在字符串常量池中。 字符串常量池中是不会存储相同内容的字符串的。\",\"结论：给两个String类型的变量，赋值相同的值，他们会指向同一个内存地址。\",\"String s1 = \\\"abc\\\"; //关键字是String，值必须加双引号 String s2 = \\\"abc\\\"; System.out.println(s1==s2); //true,说明两个变量内存地址相同 =================================== String s3 = new String(\\\"aa\\\"); String s4 = new String(\\\"aa\\\"); System.out.println(s3==s4); //false \"]},\"878\":{\"h\":\"3. String类的特性\",\"t\":[\"String类代表 字符串。Java 程序中的所有字符串字面值（如 \\\"abc\\\" ）都作为此类的实例实现。\",\"String是一个final类，代表不可变的字符序列。简称：不可变性。\",\"String实现了两个接口 \",\"Serializable接口：表示字符串是支持序列化的。\",\"实现了Comparable接口：表示String可以比较大小\",\"String内部底层定义了final char[] value用于存储字符串数据\"]},\"879\":{\"h\":\"4. 字符串的不可变性\",\"t\":[\"字符串也属于引用类型，但他是个Final类，储存值使用的是一个Final数组，因此一旦赋值成功，该内存地址（引用）里的值将无法改变。\"]},\"880\":{\"h\":\"4.1 具体体现\",\"t\":[\"当对字符串重新赋值时，需要重新指定内存区域赋值，不能使用原有的value进行赋值。\",\"当对现有的字符串进行连接操作时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。\",\"当调用String的replace()方法修改指定字符或字符串时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。\"]},\"881\":{\"h\":\"4.2 内存图示\",\"t\":[\"1-6-1\"]},\"882\":{\"h\":\"5. String对象的内存分析\"},\"883\":{\"h\":\"5.1 String对象的储存\",\"t\":[\"通过字面量创建的String，值是直接储存在字符串常量词的，标识符保存常量池的内存地址；\",\"通过new+构造器的方式创建的String，String对象是储存在堆中的，标识符保存String对象的地址。 \",\"String对象中有一个属性values，该属性是引用类型，保存了具体字符串值的内存地址，具体的值也是保存在常量词中的。\"]},\"884\":{\"h\":\"5.2 内存图示\",\"t\":[\"1-6-2\"]},\"885\":{\"h\":\"5.3 对象中的字符串\",\"t\":[\"字符串属于引用类型，在创建的对象中，属性只能保存字符串的内存地址，真正的值是储存在常量池中的。\",\"Person p1 = new Person(\\\"Tom\\\",12); Person p2 = new Person(\\\"Tom\\\",12); System.out.println(p1.name.equals(p2.name));//true System.out.println(p1.name == p2.name);//true p1.name = \\\"Jerry\\\"; System.out.println(p2.name);//Tom \"]},\"886\":{\"h\":\"6. String的运算：拼接操作\",\"t\":[\"String可以和8种基本数据类型变量做运算，且运算只能是连接运算：+。\",\"运算的结构是将这些值连接起来了，依然是String类型\",\"char c = 'a';//97 A:65 int num = 10; String str = \\\"hello\\\"; System.out.println(c + num + str);//107hello System.out.println(c + str + num);//ahello10 System.out.println(str + num + c);//hello10a \"]},\"887\":{\"h\":\"7. 类型转换\",\"t\":[\"不支持直接string类型转其他类型，包括强制类型转换。\",\"实在需要转换类型，需要使用包装函数进行（详见OOP）。\",\" String a = \\\"43\\\"; int i = Integer.parseInt(a); \"]},\"888\":{\"h\":\"8. String的操作\",\"t\":[\"详见 String类的方法\"]},\"889\":{\"h\":\"1-7. 运算符\"},\"890\":{\"h\":\"Ⅰ. 算术运算符\",\"t\":[\"1-7-1\"]},\"891\":{\"h\":\"1. 除号运算的细节\",\"t\":[\"两个int类型相除，结果一定是个int类型（舍去小数位），即便用double类型接收，也是int类型的结果转为了double，小数位的值，还是被舍弃了，如果想保留小数位，则需要运算时就进行类型转换。\",\"int n1 = 12; int n2 = 5; int result = n1/n2;//2, n1/n2的结果是int类型的，没有小数位 double result = n1/n2;//2.0,只是将int类型的结果2.0类型转换成了double double result = (double)num1/num2;//2.4 double result = (num1+0.0)/num2;//2.4 \"]},\"892\":{\"h\":\"2. 取模的细节\",\"t\":[\"结果的符号与被膜数的符号形同。取模一般用来判断是否能除尽。\"]},\"893\":{\"h\":\"3. 自增、自减的细节\",\"t\":[\"(前)++ :先自增1，后运算\",\"(后)++ :先运算，后自增1\",\"(前)-- :先自减1，后运算\",\"(后)-- :先运算，后自减1\",\"int a1 = 10; int a2 = ++a1; System.out.println(a1,a2);//11,11 int b1 = 10; int b2 = b1++;//b1先取10，赋值给b2,然后才自增的 System.out.println(b1,b2);//11,10 \",\"自增、自减不会改变数据类型\",\"short s1 = 10; s1 = s1 + 1;//编译失败，s1是sort类型的，无法接收int类型的1 s1++; //正确，自增不会改变变量的数据类型 \"]},\"894\":{\"h\":\"Ⅱ. 赋值运算符\"},\"895\":{\"h\":\"1. == 赋值运算符\",\"t\":[\"支持连续赋值\",\"int i1,i2; i1 = i2 = 10; int i3 = 10; i4 = 20; \"]},\"896\":{\"h\":\"2. 扩展赋值运算符\",\"t\":[\"+=, -=, *=, /=, %= 先运算再把结果进行赋值；\",\"int i1 = 10; i1 += 5// i1 = i1 + 5; \"]},\"897\":{\"h\":\"3. 数据类型不改变\",\"t\":[\"与自增自减一样，扩展赋值运算符，不会改变变量本身的数据类型；\",\"short s1 = 10; s1 += 2; //12,不会报错，变量本身的数据类型没有发生改变 int i = 1; i *= 0.1; //0;不会改变变量类型，所以结果是0. \"]},\"898\":{\"h\":\"4. 开发中的选择\",\"t\":[\"因为扩展赋值运算符不会改变变量的类型，所以在开发中，优先选择他来替代算数运算符。\"]},\"899\":{\"h\":\"Ⅲ. 比较运算符\"},\"900\":{\"h\":\"1. 概述\",\"t\":[\"比较运算符的结果都是boolean型，也就是要么是true，要么是false。\",\"注意：比较运算符 == 不能误写成 =。\"]},\"901\":{\"h\":\"2. 使用细节\",\"t\":[\"比较运算符不能连续使用；\",\"int a = 10; if(5<a<=20) XXX ;//这种写法是错误的 if(5<a && a<=20) √;//正确的写法 \"]},\"902\":{\"h\":\"Ⅳ. 逻辑运算符\",\"t\":[\"1-7-2\"]},\"903\":{\"h\":\"1. 概述\",\"t\":[\"&: 逻辑与\",\"|: —逻辑或\",\"!: 逻辑非\",\"&&: 短路与\",\"||: 短路或\",\"^: 逻辑异或\"]},\"904\":{\"h\":\"2. 使用\",\"t\":[\"逻辑运算符用于连接布尔型表达式，在Java中不可以写成3<x<6，应该写成x>3 & x<6 。\"]},\"905\":{\"h\":\"3. 短路情况\",\"t\":[\"开发中，优先使用短路的&和|\",\"“&”和“&&”的区别：单&时，左边无论真假，右边都进行运算；双&时，如果左边为真，右边参与运算，如果左边为假，那么右边不参与运算。\",\"“|”和“||”的区别同理，||表示：当左边为真，右边不参与运算。\"]},\"906\":{\"h\":\"Ⅴ. 位运算符\",\"t\":[\"仅了解，Java源码中会用到。\"]},\"907\":{\"h\":\"1. 概述\",\"t\":[\"位运算符，就是在内存上进行的二进制bit位的运算。【只支持数值类型】\",\"1-7-3\"]},\"908\":{\"h\":\"2. 补位的细节\",\"t\":[\"1-7-4\"]},\"909\":{\"h\":\"3. 细节补充\",\"t\":[\"<< 左移：bit位向左移动，右边补0，每移动一位，相当于 乘了一次2。 \",\"如果最高位移动到了符号位，就会变成负数。（符号位是1，则变负数）\",\">> 右移：bit位向右移动，左边补位，如果符号位是1，就补1，是0就补0.\",\"~ 取反 \",\"如下：底层表示-6，是以补码的形式，因此 -6的反码 == -6的补码-1（负数补码= 反码+1），所以6取反的结果是-7\",\" 0000 0000 0000 0000 0000 0000 0000 0110 //6 1000 0000 0000 0000 0000 0000 0000 0110 //-6的源码 1111 1111 1111 1111 1111 1111 1001 //-6的反码 \"]},\"910\":{\"h\":\"Ⅵ. 三元运算符\"},\"911\":{\"h\":\"1. 格式\",\"t\":[\"条件表达式的结果为boolean类型； 根据条件表达式真或假，决定执行表达式1，还是表达式2\",\"1-7-5\"]},\"912\":{\"h\":\"2. 使用说明\"},\"913\":{\"h\":\"2.1 表达式1 和表达式2为 同种类型\",\"t\":[\"三元运算符的结果是要被变量接收的，接收的变量类型要与表达式结果的变量类型一致（或能自动转换）。所以也要求表达式1和表达式2的数据类型要一样。\",\"int m = 10; int n = 5; int max = (m>n)? m : n; //m int max = (m>n)? m : \\\"n大\\\"; //报错，两个表达式类型不一致 \"]},\"914\":{\"h\":\"2.2 三元运算符的嵌套\",\"t\":[\"三元运算符是可以嵌套使用的，比如计算两个值谁大，或者是相等\",\"int m = 10; int n = 5; String maxStr = (m > n)? \\\"m大\\\" : ((m == n)? \\\"m和n相等\\\" : \\\"n大\\\"); \"]},\"915\":{\"h\":\"2.3 三元运算符与if-else\",\"t\":[\"凡是可以使用三元运算符的地方，都可以改写为if-else； 如果程序既可以使用三元运算符，又可以使用if-else结构，那么优先选择三元运算符。\",\"原因：简洁、执行效率高。\"]},\"916\":{\"h\":\"Ⅶ. 运算符优先级\",\"t\":[\"提示\",\"不用记，不确定的地方加（）就行了。\"]},\"917\":{\"h\":\"1-8. 流程控制\",\"t\":[\"流程控制语句是用来控制程序中各语句执行顺序的语句，可以把语句组合成能完成一定功能的小逻辑模块。\",\"流程控制方式采用结构化程序设计中规定的三种基本流程结构，即：\",\"顺序结构：冲上到下逐行执行，无任何判断和跳转。\",\"分支结构：根据条件，选择性的执行某段代码 \",\"if...else\",\"switch-case\",\"循环结构：根据循环条件，重复性的执行某段代码 \",\"for\",\"while\",\"do...while\"]},\"918\":{\"h\":\"Ⅰ. if..else\"},\"919\":{\"h\":\"1. 语法\",\"t\":[\"分支（条件判断）结构有三种格式；\"]},\"920\":{\"h\":\"1.1 单分支：选或跳过\",\"t\":[\"if( 条件表达式){ 执行代码块; } \"]},\"921\":{\"h\":\"1.2 双分支：二选一\",\"t\":[\"if(条件表达式){ 执行表达式1 }else{ 执行表达式2 } \"]},\"922\":{\"h\":\"1.3 多分支：多选一\",\"t\":[\"if(条件表达式){ 执行表达式1 }else if(条件表达式){ 执行表达式2 }else if(条件表达式){ 执行表达式3 } ... else{ 执行表达式n } \"]},\"923\":{\"h\":\"2. 使用细节\",\"t\":[\"嵌套: if...else是可以进行嵌套的，不过尽量别超过3层。\",\"省略大括号: 如果if-else结构中的执行语句只有一行时，对应的一对{}可以省略的，不建议省略。\"]},\"924\":{\"h\":\"3. 注意事项\",\"t\":[\"多条件表达式的顺序 \",\"如果多个条件表达式之间是“互斥”关系(或没有交集的关系),哪个判断和执行语句声明在上面还是下面，无所谓。\",\"如果多个条件表达式之间有交集的关系，需要根据实际情况，考虑清楚应该将哪个结构声明在上面。\",\"如果多个条件表达式之间有包含的关系，通常情况下，需要将范围小的声明在范围大的上面。否则，范围小的就没机会执行了\",\"条件表达式必须是布尔表达式（关系表达式或逻辑表达式）、布尔变量\"]},\"925\":{\"h\":\"Ⅱ. switch\"},\"926\":{\"h\":\"1. 语法格式\",\"t\":[\"switch(表达式){ case 常量1: 执行语句1; //break; case 常量2: 执行语句2; //break; ... default: 执行语句n; //break; } \"]},\"927\":{\"h\":\"2. 使用说明\",\"t\":[\"执行过程 \",\"根据switch表达式中的值，依次匹配各个case中的常量。一旦匹配成功，则进入相应case结构中，调用其执行语句。\",\"当调用完执行语句以后，则仍然继续向下执行其他case结构中的执行语句，直到遇到break关键字或此switch-case结构 末尾结束为止。\",\"break：可以使用在switch-case结构中，表示一旦执行到此关键字，就跳出switch-case结构。 break关键字是可选的，没有break时，就算执行完了case匹配的表达式，还是会继续向下执行，并且不再判断是否满足case了。\",\"表达式的限制： switch结构中的表达式，只能是如下的6种数据类型之一： \",\"byte 、short、char、int、枚举类型(JDK5.0新增)、String类型(JDK7.0新增)。\",\"注意：不能是boolean\",\"case的限制：case 之后只能声明常量。不能声明范围、变量或不确定的表达式。且同一个switch语句，所有case子句中的常量值互不相同\",\"default：相当于if-else结构中的else，default结构是可选的，而且位置是灵活的。\"]},\"928\":{\"h\":\"3. 省略break的用法\",\"t\":[\"可以利用省略break的特性，让代码更简洁。\",\"例如：周末是双休的，给出今天是星期几（星期日用0表示），算出今天是否用上班。\",\"switch(day){ case 1: case 2: case 3: case 4: case 5: System.out.println(\\\"今天需要上班\\\"); break; default: System.out.println(\\\"今天不用上班\\\"); } \"]},\"929\":{\"h\":\"4. if..else和switch...case的选择\",\"t\":[\"我们写分支结构时，当发现既可以使用switch-case,（同时，switch中表达式的取值情况不太多），又可以使用if-else时，我们优先选择使用switch-case。原因：switch-case执行效率稍高。\",\"使用switch-case的，都可以改写为if-else。反之不成立。\"]},\"930\":{\"h\":\"Ⅲ. for\"},\"931\":{\"h\":\"循环的组成部分\",\"t\":[\"循环结构的4个要素\",\"初始化条件：可以声明多个变量，但必须是同一个类型，用逗号分隔\",\"循环条件：是boolean类型；当值为false时，退出循环\",\"循环体\",\"迭代条件：可以有多个变量更新，用逗号分隔\",\"执行过程：直到循环条件不满足，则退出，永远满足，则是死循环。\",\"1-8-1\"]},\"932\":{\"h\":\"1. for循环的结构\",\"t\":[\"执行过程：初始化条件 - 循环条件 - 循环体 - 迭代条件- 循环条件 - 循环体 - 迭代条件 - ... - 循环条件\",\"1-8-2\",\"for(初始化条件; 循环条件; 迭代条件){ 循环体; } \"]},\"933\":{\"h\":\"2. for循环的使用\",\"t\":[\"示例：遍历100以内的偶数,输出所有偶数的和,输出偶数的个数\",\"int num = 0; int count = 0; for(int i=0;i<100;i++){ if(i%2 == 0){ num += i; count++; } } \",\"i 变量只在循环内有效，出了for循环就失效了。\",\"num使用前必须先定义（在for循环外定义）。 \",\"循环内定义，会每次循环都重复生命，在java中，会直接报错。\",\"i变量的声明别忘了加数据类型，这个也是声明变量。\"]},\"934\":{\"h\":\"Ⅳ. while\"},\"935\":{\"h\":\"1. 语法结构\",\"t\":[\"while循环没有迭代条件也能编译成功，所以一定不要忘了迭代条件。\",\"执行过程：初始化条件 - 循环条件 - 循环体 - 迭代条件- 循环条件 - 循环体 - 迭代条件 - ... - 循环条件\",\"初始化条件 while(循环条件){ 循环体 迭代条件 } \"]},\"936\":{\"h\":\"2. while循环的使用\",\"t\":[\"示例：遍历100以内的所有偶数\",\"class WhileTest{ public static void main(String[] args) { //遍历100以内的所有偶数 int i = 1; while(i <= 100){ if(i % 2 == 0){ System.out.println(i); } i++; } //初始化变量出了while循环以后，仍可以调用。 System.out.println(i);//101 } } \"]},\"937\":{\"h\":\"3. for循环和while循环\",\"t\":[\"for循环和while循环是可以相互转换的！且没有执行效率的差别。\",\"区别：for循环和while循环的初始化条件部分的作用范围不同。但是for循环也可以通过以下方式实现初始化部分外移\",\"int i = 0; //for循环内只要有两个;;就行，里面有无内容都可以编译 for(;i<10;i++){...} \"]},\"938\":{\"h\":\"4. while(true)：无限循环格式\",\"t\":[\"可以省略循环体种的一些元素，来实现人为的不限制次数的循环，并用break根据条件退出循环。\",\"//while循环 while(true){ //只有循环条件和循环体也能编译 循环体; } //for循环 for(;;){ //只要有两个;;就能编译 循环体; } \",\"示例：从键盘读入个数不确定的整数，并判断读入的正数和负数的个数，输入为0时结束程序。\",\"import java.util.Scanner; class ForWhileTest { public static void main(String[] args) { Scanner scan = new Scanner(System.in); int positiveNumber = 0;//记录正数的个数 int negativeNumber = 0;//记录负数的个数 for(;;){//while(true){ int number = scan.nextInt(); //判断number的正负情况 if(number > 0){ positiveNumber++; }else if(number < 0){ negativeNumber++; }else{ //一旦执行break，跳出循环 break; } } System.out.println(\\\"输入的正数个数为：\\\" + positiveNumber); System.out.println(\\\"输入的负数个数为：\\\" + negativeNumber); } } \"]},\"939\":{\"h\":\"Ⅴ. do...while\"},\"940\":{\"h\":\"1. 语法结构\",\"t\":[\"初始化 do{ 循环体 迭代条件 }while(循环条件); \"]},\"941\":{\"h\":\"2. do...while循环的使用\",\"t\":[\"示例：遍历100以内的偶数,并计算所有偶数的和及偶数的个数\",\"int num = 1; int sum = 0;//记录总和 int count = 0;//记录个数 do{ if(num % 2 == 0){ System.out.println(num); sum += num; count++; } num++; }while(num <= 100); \"]},\"942\":{\"h\":\"3. 使用说明\",\"t\":[\"在循环体必须执行一次的时候，使用该循环；开发中较少使用。\"]},\"943\":{\"h\":\"Ⅵ. 循环控制\",\"t\":[\"特殊关键字 break、continue、return 可以控制循环的执行。\"]},\"944\":{\"h\":\"1. break\",\"t\":[\"break语句用于终止某个语句块的执行。【只能用于switch 语句和 循环语句中】\"]},\"945\":{\"h\":\"1.1 使用范围：\",\"t\":[\"switch...case中\",\"循环语句中：跳出当前循环\"]},\"946\":{\"h\":\"1.2 嵌套循环中的使用\",\"t\":[\"break; 默认跳出包裹此关键字最近的一层循环。\",\"可以为循环添加label标识符，来跳出指定标识的循环\"]},\"947\":{\"h\":\"2. continue\",\"t\":[\"continue用于结束当次循环【只能用于 循环语句中】\",\"用于跳过其所在循环语句块的一次执行，继续下一次循环。\",\"嵌套循环中的使用：continue默认跳过包裹此关键字最近的一层循环。可以通过标签指明要跳过的是哪一层循环\"]},\"948\":{\"h\":\"3. return\",\"t\":[\"并非专门用于结束循环的，它的功能是结束一个方法。当一个方法执行到一个return语句时，这个方法将被结束。\",\"与break和continue不同的是，return直接结束整个方法，不管这个return处于多少层循环之内\"]},\"949\":{\"h\":\"4. 使用说明\",\"t\":[\"continue 只能用于 循环语句中。因为程序永远不会执行其后的语句。\",\"continue是终止 本次循环，break是终止 本层循环。\"]},\"950\":{\"h\":\"5. 使用示例\",\"t\":[\"label:for(int i = 1;i <= 4;i++){ for(int j = 1;j <= 10;j++){ if(j % 4 == 0){ //break;//默认跳出包裹此关键字最近的一层循环。 //continue; //break label;//结束指定标识的一层循环结构 continue label;//结束指定标识的一层循环结构当次循环 } System.out.print(j); } } \"]},\"951\":{\"h\":\"Ⅶ. 嵌套循环\",\"t\":[\"循环是可以嵌套的，将一个循环结构A声明在另一个循环结构B的循环体中,就构成了嵌套循环；一般最多写三层。\"]},\"952\":{\"h\":\"1. 使用说明\",\"t\":[\"内层循环结构遍历一遍，只相当于外层循环循环体执行了一次。\",\"假设外层循环需要执行m次，内层循环需要执行n次。此时内层循环的循环体一共执行了m * n次 两层循环相当于是一个矩阵，外层循环控制行数，内层循环控制列数\"]},\"953\":{\"h\":\"2. 使用示例\"},\"954\":{\"h\":\"2.1 示例1：输出星星\",\"t\":[\"输出5行 * ，在第几行就输出几个*\",\"for(int i = 1;i <= 5;i++){//控制行数 for(int j = 1;j <= i;j++){//控制列数 System.out.print(\\\"*\\\"); } System.out.println(); } \"]},\"955\":{\"h\":\"2.2 示例2：输出99乘法表\",\"t\":[\"for(int i = 1;i <= 9;i++){ for(int j = 1;j <= i;j++){ System.out.print(i + \\\" * \\\" + j + \\\" = \\\" + (i * j) + \\\" \\\"); } System.out.println(); } \"]},\"956\":{\"h\":\"2.3 示例3：100以内的所有质数的输出\",\"t\":[\"public static void main(String[] args) { boolean isFlag = true;//标识i是否被j除尽，一旦除尽，修改其值 int count = 0;//记录质数的个数 //获取当前时间距离1970-01-01 00:00:00 的毫秒数 long start = System.currentTimeMillis(); for(int i = 2;i <= 100000;i++){//遍历100000以内的自然数 //优化二：对本身是质数的自然数是有效的。 //for(int j = 2;j < i;j++){ for(int j = 2;j <= Math.sqrt(i);j++){//j:被i去除 if(i % j == 0){ //i被j除尽 isFlag = false; break;//优化一：只对本身非质数的自然数是有效的。 } } // if(isFlag == true){ //System.out.println(i); count++; } //重置isFlag isFlag = true; } //获取当前时间距离1970-01-01 00:00:00 的毫秒数 long end = System.currentTimeMillis(); System.out.println(\\\"质数的个数为：\\\" + count); System.out.println(\\\"所花费的时间为：\\\" + (end - start)); //17110 - 优化一：break:1546 - 优化二：13 } \"]},\"957\":{\"h\":\"1-9. 数组\"},\"958\":{\"h\":\"Ⅰ. 概述\"},\"959\":{\"h\":\"1. 概念\",\"t\":[\"数组(Array)，是多个相同类型数据按一定顺序排列的集合，并使用一个名字命名，并通过编号的方式对这些数据进行统一管理。\"]},\"960\":{\"h\":\"2. 数组的元素\",\"t\":[\"数组的变量类型：数组内部元素的变量类型\",\"索引：数组的下标，从0开始步进（注意：Java是强类型语言，没有关联数组一说）\",\"数组元素：数组中的每个元素\",\"数组的长度：数组元素的个数\"]},\"961\":{\"h\":\"3. 数组的特点\",\"t\":[\"数组本身是引用数据类型，而数组中的元素可以是任何数据类型，包括基本数据类型和引用数据类型。\",\"创建数组对象会在内存中开辟一整块连续的空间，而数组名中引用的是这块连续空间的首地址。 \",\"可以直接通过下标(或索引)的方式调用指定位置的元素，速度很快\",\"数组的长度一旦确定，就不能修改。\"]},\"962\":{\"h\":\"4. 数组的分类\",\"t\":[\"按照维度：一维数组、二维数组、多维数组\",\"按照元素数据类型：基本数据类型元素的数组、引用数据类型元素的数组（如String类型的数组）\"]},\"963\":{\"h\":\"5.使用数组的步骤\",\"t\":[\"声明数组\",\"分配空间：数组分配的内存空间是连续的 \",\"java中必须先为数组分配内存空间，才能使用数组\",\"赋值\",\"处理数据\"]},\"964\":{\"h\":\"6. 数组间的赋值与复制\"},\"965\":{\"h\":\"6.1 赋值\",\"t\":[\"将array1保存的数组的地址值赋给了array2，使得array1和array2的指针共同指向同一个数组实体。\",\"array2 = array1; \"]},\"966\":{\"h\":\"6.2 复制一份内存空间\",\"t\":[\"array2 = new int[array1.length]; //初始化并分配空间 for(int i=0;i<array2.length.i++){ //赋值 array2[i] = array1[i]; } \"]},\"967\":{\"h\":\"Ⅱ. 一维数组\"},\"968\":{\"h\":\"1. 声明数组\",\"t\":[\"声明语法1：数据类型[ ] 数组名；\",\"声明语法2：数据类型 数组名[]\",\"int[] arr1; //声明数组：确定数据类型 int arr2[]; \"]},\"969\":{\"h\":\"2. 初始化数组\",\"t\":[\"数组一旦初始化完成，其长度就确定了。\"]},\"970\":{\"h\":\"2.1 动态初始化\",\"t\":[\"先给数组分配空间，然后再进行赋值。\",\"String[] users; //声明 users = new String[2];//初始化：分配空间 String[] users = new String[2]; //声明+初始化 users[0] = \\\"jinno\\\" //赋值：通过下标取出数组元素，然后赋值 \"]},\"971\":{\"h\":\"2.2 静态初始化\",\"t\":[\"数组的初始化和数组元素的赋值操作同时进行，不要给数组长度，赋值时自动获得长度。\",\"优先使用简化写法：int[ ] nums = {1,2,3};\",\"int[] nums;//声明 nums = new int[]{1,2,3};//初始化和赋值同时进行 int[] nums = new int[]{1,2,3};//声明+初始化 int[] nums = {1,2,3};//简化写法 \"]},\"972\":{\"h\":\"3. 访问数组元素\",\"t\":[\"定义并用运算符new为之分配空间后，才可以访问数组中的每个元素；\",\"可以直接通过数组名[ 数组元素下标 ]的方式调用指定位置的元素; \",\"数组元素下标可以是整型常量或整型表达式。如a[3] , b[i] , c[6*i];\",\"数组元素下标从0开始；长度为n的数组合法下标取值范围: 0 —>n-1；\",\"//为指定索引处的元素赋值，若已有值，则为修改值 nums[1] = 20; //获取指定索引出的值，若指定索引处没有值，就获取默认值 int age = nums[1]; \"]},\"973\":{\"h\":\"4. 获取数组长度\",\"t\":[\"每个数组都有一个属性length指明它的长度。 数组初始化完成后，其长度就不可变了。\",\"System.out.println(arr.length); \"]},\"974\":{\"h\":\"5. 遍历数组\",\"t\":[\"可以通过for循环遍历数组\",\"int[] nums = new int[]{1,2,3,4,5}; for(i=0;i<nums.length;i++){ System.out.println(nums[i]); } \"]},\"975\":{\"h\":\"6. 数组元素的默认初始化值\",\"t\":[\"数组是引用类型，它的元素相当于类的成员变量，因此数组一经分配空间，其中的每个元素也被按照成员变量同样的方式被隐式初始化。即：当对数组进行初始化，还没有分配值的时候，数组的元素会有一个默认值。\",\"默认值与数组的数据类型有关，具体如下：\",\"1-9-1\"]},\"976\":{\"h\":\"7. 一维数组的内存解析\"},\"977\":{\"h\":\"7.1 内存结构\",\"t\":[\"1-9-2\"]},\"978\":{\"h\":\"7.2 数组的内存结构\",\"t\":[\"注意：非精准详细的解析，只是对数组的结构进行一些解释（详见JVM）。\",\"栈：用来存放标识符【数组名】\",\"堆：用来存放new出来的数组【数组的值】\"]},\"979\":{\"h\":\"7.3 储存的过程\",\"t\":[\"数组储存的过程：初始化数组时，在栈内存以栈的结构储存数组的标识符（k）和数组第一个元素的内存地址（v），堆内存中储存（分配空间）数组的值（默认值）。给数组赋值时，就将赋的值替换掉元素的默认值。\",\"数组删除和修改的过程：删除数组时，就将数组在栈中储存的K=V出栈，同时数组堆中的值成为垃圾，等待被回收。当对数组本身进行修改，重新初始化时（重新分配空间），就将栈中储存的数组第一个元素的地址替换掉（之前与值的指针断裂）；重新指向新的数组的值，同时就数组的值成为垃圾，等待被回收。\",\"1-9-3\"]},\"980\":{\"h\":\"8. 注意事项\",\"t\":[\"数组长度：数组的长度是固定的，在初始化时就确定了，无法更改\",\"数据类型：数组的中的元素具有相同的数据类型（或能自动转换类型），声明数组时要确定数据类型\"]},\"981\":{\"h\":\"Ⅲ. 多维数组\"},\"982\":{\"h\":\"说明\",\"t\":[\"对于二维数组的理解，我们可以看成是一维数组array1又作为另一个一维数组array2的元素而存在。其实，从数组底层的运行机制来看，其实没有多维数组。\",\"因为数组是引用类型，所以其实二维元素的值是一个内存地址（指针），指向了一个一维数组。\",\"外层数组：指的是二维数组本身，他的元素全是一维数组\",\"内层数组：指的是二维数组的元素。\",\"外层数组元素：arr[0],arr[1] 等，值为内层数组的内存地址\",\"内层数组元素：arr[0][0],arr[1][2] 等，值为数据\"]},\"983\":{\"h\":\"1. 二维数组的声明\"},\"984\":{\"h\":\"1.1 静态初始化\",\"t\":[\"int[][] arr;//声明和初始化分开 arr = new int[][]{{1},{2}}; int[][] arr = new int[][]{{1,2,3},{2,3}}; //合并成一行 int[][] arr = {{1,2,3},{2,3}};//简化写法 \"]},\"985\":{\"h\":\"1.2 动态初始化-指定内层数组长度\",\"t\":[\"为数组和内层数组都直接分配了内存空间。此时，数组的长度和内层数组的长度都确定了。\",\"如下：定义了名称为arr的二维数组；二维数组中有3个一维数组；每一个一维数组中有2个元素；一维数组的名称分别为arr[0], arr[1], arr[2]\",\"int[][] arr = new int[3][2];//外层2个元素，内层3个元素 \"]},\"986\":{\"h\":\"1.3 动态初始化-未指定数组内层长度\",\"t\":[\"只为数组本身指定长度，不为数组内部的内层数组指定长度（内层数组只声明，不初始化）。\",\"意义：二维数组每个元素的数组长度，不再强制相等。\",\"如下：二维数组中有3个一维数组。每个一维数组都是默认初始化值null。\",\"int[][] arr = new int[3][]; //只规定外层长度，不指定内层长度。 \"]},\"987\":{\"h\":\"2. 数组赋值\",\"t\":[\"动态初始化后，就可以为数组元素赋值了（静态初始化已经赋值过了）。\"]},\"988\":{\"h\":\"2.1 指定了内层数组长度\",\"t\":[\"为外层元素赋值：外层元素的值是一个一维数组，赋的值也必须是个数组。\",\"为内层元素赋值：层层进。\",\"int[][] arr = new int[3][2] //为外层元素赋值 arr[0] = new int[]{1,2,3}; //为内层元素赋值 arr[0][1] = 10; \"]},\"989\":{\"h\":\"2.2 未指定内层数组长度\",\"t\":[\"为外层元素赋值：虽然是数组，但是他们的值是空的，需要进行数组的初始化，可以静态初始化，也可以动态初始化，内层数组的长度不限。\",\"为内层元素赋值：外层元素必须初始化，才能为内层元素赋值，不然会报错。\",\"int[][] arr = new int[3][]; //为外层元素赋值，可以任意指定长度 arr[0] = new int[3]; arr[0] = new int[]{1,2,3}; //为内层元素赋值 arr[0][0] = 20; \"]},\"990\":{\"h\":\"3. 元素的访问和值\",\"t\":[\"任何元素访问前必须初始化，未指定内层数组长度的要先初始化内层数组才能访问内层元素。 访问外层数组元素，得到的是一个内存地址值，指向的是内层数组。\",\"int[][] arr1 = new int[][]{{1,2,3},{2,3}}; arr1[0][1];//2 arr1[0]; // [I@15db9742 [表示数组;I表示int类型;15db9742表示16进制内存地址 int[][] arr2 = new int[3][2]; arr2[1][1];//0 int[][] arr3 = new int[3][]; arr3[1] = null;//外层元素能访问，值为null arr3[1][1];//报错，内层数组未初始化，不能访问内层数据 \"]},\"991\":{\"h\":\"4. 数组的长度\",\"t\":[\"外层数组的长度：外层元素的个数\",\"内层数组的长度：内层元素的个数\",\"String[][] arr = new String[2][3]; arr.length;//2,外层数组的长度 arr[0].length;//3,第一个内层数组的长度 \"]},\"992\":{\"h\":\"5. 遍历数组\",\"t\":[\"遍历二维数组就需要嵌套循环了\",\"for(int i = 0;i < arr.length;i++){ for(int j = 0;j < arr[i].length;j++){ System.out.print(arr[i][j] + \\\" \\\"); } System.out.println(); } \"]},\"993\":{\"h\":\"6. 数组元素的默认初始化值\",\"t\":[\"指定了内层数组的长度 \",\"外层元素的初始化值为：地址值，指向的内层数组\",\"内层元素的初始化值为：与一维数组初始化情况相同\",\"未指定内层数组的长度 \",\"外层元素的初始化值为：null，没有初始化，没有地址\",\"内层元素的初始化值为：不能调用，否则报错。\"]},\"994\":{\"h\":\"7. 二维数组的内存解析\",\"t\":[\"1-9-4\"]},\"995\":{\"h\":\"8. 注意事项\",\"t\":[\"数据类型：二维数组也要指定数据类型，这个数据类型限制的是内层数组的元素（外层元素本质上是一维数组，引用类型），也就是内层数组的元素类型也是确定的。\",\"元素访问：未初始化的不能访问。\",\"元素的值：外层数组元素的值是一个内存地址（未初始化则为null）； \",\"即使未赋值，也能取，因为分配内存的时候，内存地址就已经确定了。\"]},\"996\":{\"h\":\"Ⅳ. 常见异常\"},\"997\":{\"h\":\"1. 数组索引越界\",\"t\":[\"ArrayIndexOutOfBoundsException：用了不存在的索引（超过范围的索引）\",\"int[] arr = new int[]{1,2,3,4,5}; System.out.println(arr[-1]); System.out.println(arr[5]); \"]},\"998\":{\"h\":\"2. 空指针\",\"t\":[\"NullPointerException：数组标识符指向的内存没了，或者不存在。\",\"//情况1：数组被赋值为null int[] arr1 = new int[]{1,2,3}; arr1 = null; //情况2：访问未初始化的数组 int[][] arr2 = new int[4][]; System.out.println(arr2[0][0]); //情况3：null调用方法 String[] arr3 = new String[]{\\\"AA\\\",\\\"BB\\\",\\\"CC\\\"}; arr3[0] = null; System.out.println(arr3[0].toString()); \"]},\"999\":{\"h\":\"Ⅴ. Arrays工具类\",\"t\":[\"操作数组的工具类，包含了很多用来操作数据的方法\",\"详见：Arrays工具类\"]},\"1000\":{\"h\":\"2-1. 类与对象\"},\"1001\":{\"h\":\"Ⅰ. 面向对象\"},\"1002\":{\"h\":\"1. 面向过程与面向对象\",\"t\":[\"面向对象：OOP，Object Oriented Programming\",\"面向过程：Procedure Oriented Programming 二者都是一种思想，面向对象是相对于面向过程而言的。面向过程，强调的是功能行为，以函数为最小单位，考虑怎么做。面向对象，将功能封装进对象，强调具备了功能的对象，以类/对象为最小单位，考虑谁来做。\",\"面向对象更加强调运用人类在日常的思维逻辑中采用的思想方法与原则，如抽象、分类、继承、聚合、多态等。\"]},\"1003\":{\"h\":\"2. 面向对象的三大特征\",\"t\":[\"封装 (Encapsulation)\",\"继承 (Inheritance)\",\"多态 (Polymorphism)\"]},\"1004\":{\"h\":\"3. 面向对象的思想概述\",\"t\":[\"程序员从面向过程的执行者转化成了面向对象的指挥者\",\"面向对象分析方法分析问题的思路和步骤： \",\"根据问题需要，选择问题所针对的现实世界中的实体。\",\"从实体中寻找解决问题相关的属性和功能，这些属性和功能就形成了概念世界中的类。\",\"把抽象的实体用计算机语言进行描述，形成计算机世界中类的定义。即借助某种程序语言，把类构造成计算机能够识别和处理的数据结构。\",\"将类实例化成计算机世界中的对象。对象是计算机世界中解决问题的最终工具。\"]},\"1005\":{\"h\":\"4. Java中的万物皆对象\",\"t\":[\"在Java语言范畴中，我们都将功能、结构等封装到类中，通过类的实例化，来调用具体的功能结构\",\"在java中，万物皆对象，所有代码都要归属为一个对象；包括涉及到Java语言与前端Html（element对象）、后端的数据库交互时，前后端的结构在Java层面交互时，都体现为类、对象。\"]},\"1006\":{\"h\":\"Ⅱ. 类与对象\"},\"1007\":{\"h\":\"1. 什么是类与对象\",\"t\":[\"类(Class)和对象(Object)是面向对象的核心概念。\",\"类是对一类事物的描述，是抽象的、概念上的定义\",\"对象是实际存在的该类事物的每个个体，因而也称为实例(instance)。万事万物皆对象；\",\"类 = 抽象概念的人；对象 = 实实在在的某个人\",\"面向对象程序设计的重点是 类的设计；类的设计，其实就是类的成员的设计\"]},\"1008\":{\"h\":\"2. 类与引用数据类型\",\"t\":[\"所有类都是引用数据类型，类型就是类名。\",\"String数据类型本质就是java内部定义的String类。\"]},\"1009\":{\"h\":\"3. 类与类的成员\",\"t\":[\"成员变量（field）：类拥有的属性\",\"方法（method）：类可以做的事（行为）\"]},\"1010\":{\"h\":\"4. 创建类\",\"t\":[\"一个文件中可以创建多个类（只能有一个带public的），但是开发中，通常一个文件中只有一个类。\",\"class Person{ //class关键字 类名 String name; //属性 int age = 1; //属性，定义并初始化 public void eat(){ //方法 System.out.println(\\\"吃饭\\\"); } public void talk(String language){ //带参数的方法 System.out.pringln(\\\"说\\\"+language); } } \"]},\"1011\":{\"h\":\"5. 创建对象\",\"t\":[\"根据类创建类的对象，我们使用类的成员时是通过具体的对象使用的。\",\"创建类的对象 = 类的实例化 = 实例化类\",\"语法：类名 对象名 = new 类名(可选参数);\",\"创建玩对象后，就可以使用“对象名. 对象成员 ”的方式访问对象成员（包括属性和 方法）\",\"public class Person{ public static void main(String[] args){ //在程序入口中调用类 Person p1 = new Person(); //使用对象调用属性：对象.属性名 p1.name = \\\"Tom\\\" //为属性赋值 System.out.println(p1.age);//获取属性的值 //使用对象调用方法：对象.方法名 p1.eat(); p1.talk(\\\"English\\\"); } } \"]},\"1012\":{\"h\":\"6. 类和对象的使用\",\"t\":[\"创建类：设计类的成员\",\"创建类的对象\",\"通过对象调用属性和方法\"]},\"1013\":{\"h\":\"7. 类与多个对象\",\"t\":[\"如果创建了一个类的多个对象，则每个对象都独立的拥有一套类的属性（非static的）。\",\"意味着：如果我们修改一个对象的属性a，则不影响另外一个对象属性a的值。\"]},\"1014\":{\"h\":\"8. 对象间的赋值\",\"t\":[\"对象间进行赋值时，是把保存对象的内存地址赋给了对方，因此两个对象指向同一份内存地址，即执行同一个对象实体。\",\"Person p1 = new Person(); Person p2 = p1; p2.age = 20; system.out.println(p1.age);//20 \"]},\"1015\":{\"h\":\"9. 类的访问机制\",\"t\":[\"在一个类中的访问机制： 类中的方法可以直接访问类中的成员变量 。 \",\"例外：static 方法访问非 static， ， 编译不通过 。\",\"在不同类中的访问机制： 先创建要访问类的对象 ， 再用对象访问类中定义的成员\"]},\"1016\":{\"h\":\"10. 补充说明\",\"t\":[\"java内置类：我们是通过创建类和方法来完成一些功能的，java内置了丰富的类，帮我们完成了很多常见的功能。\",\"属性的默认值：当用对象调用未赋值的属性时，属性会有个默认值，这个默认值跟数组中元素的默认值一样。\"]},\"1017\":{\"h\":\"Ⅲ. 特殊形式对象\"},\"1018\":{\"h\":\"1. 对象数组\",\"t\":[\"数组可以是任何类型：基本数据类型、引用类型都可以。对象就是引用类型的，具体类型就是类名，例如：String数据类型就是引用类型，String是java的一个内置类。\",\"创建对象数组：假设有Person类，我们需要一次性创建20个Person类的实例、\",\"Person [] p1 = new Person[20]; //直接声明了20个对象 for(int i=0; i<p1.legnth;i++){ p1[i] = new Student(); //循环创建对象 p1[i][age] = (int)(Math.random()*10+11));//为age赋值 } \",\"如上，此时内存中有1个数组，数组中包含了20个元素，每个元素是Person类型，但是只是null，并不是对象，具体对象还需要我们进一步创建（初始化），可以使用for循环创建。\"]},\"1019\":{\"h\":\"2. 匿名对象\",\"t\":[\"我们创建的对象，没有显式的赋给一个变量名，即为匿名对象。\",\"特征：匿名对象只能调用一次\",\"使用场景：对象作为函数的参数\",\"public class Test(){ public static void maina(String[] args){ new Phone().age = 20;//创建对象，不赋值，直接使用，执行完就失效 new Phone().age; //1; //应用场景：对象作为方法的参数 HelloGay hg = new HelloGay(); hg.show(new Phone()); } } class HelloGay{ public void show(Phone phone){ public void sayHello() public void doIt(); } } class Gay{ int age = 1; public void sayHello(){ System.out.println('Hello') } public void doIt(){ System.out.println(\\\"Do\\\"); } } \"]},\"1020\":{\"h\":\"2-2. 属性与方法\"},\"1021\":{\"h\":\"Ⅰ. 属性\"},\"1022\":{\"h\":\"1. 属性声明语法\",\"t\":[\"修饰符 数据类型 属性名 = 初始化值; public String age = 10; \",\"修饰符 \",\"权限修饰符：private、缺省、protected、public（详见封装）\",\"其他修饰符：static、final（见后续章节）\",\"数据类型：任何基本数据类型(如int、Boolean) 或 任何引用数据类型。 \",\"包括：属性的类型可以是一个类（修饰符将表示一个对象，对象也是引用数据类型）。\",\"属性名：属于标识符，符合命名规则和规范即可。\",\"初始化值：可以选择给变量一个初始化值，如果没有初始化值，会采用数据类型的默认值。\"]},\"1023\":{\"h\":\"2. 属性与局部变量的对比\",\"t\":[\"属性（成员变量）：声明在类中的变量\",\"局部变量：只在局部作用域有效的变量 \",\"方法内、方法形参、构造器内、构造器形参、代码块内\"]},\"1024\":{\"h\":\"2.1 相同点\",\"t\":[\"定义变量的格式：数据类型 变量名 = 变量值 \",\"属性还会多个权限控制符\",\"先声明，后使用\",\"变量都有其对应的作用域\"]},\"1025\":{\"h\":\"2.2 不同点\",\"t\":[\"2-2-1\",\"在类中声明的位置的不同 \",\"属性：直接定义在类的一对{}内\",\"局部变量：声明在方法内、方法形参、代码块内、构造器形参、构造器内部的变量\",\"关于权限修饰符的不同 \",\"属性：可以在声明属性时，指明其权限，使用权限修饰符。常用的权限修饰符：private、public、缺省、protected --->封装性\",\"局部变量：不可以使用权限修饰符。\",\"默认初始化值的情况 \",\"属性：类的属性，根据其类型，都有默认初始化值（和数组元素的默认值一样）。 \",\"整型（byte、short、int、long）：0\",\"浮点型（float、double）：0.0\",\"字符型（char）：0 （或'\\\\u0000'）\",\"布尔型（boolean）：false\",\"引用数据类型（类、数组、接口）：null\",\"局部变量：没有默认初始化值。意味着，我们在调用局部变量之前，一定要显式赋值。 \",\"特别地：形参在调用时，我们赋值即可。\",\"在内存中加载的位置： \",\"属性：加载到堆空间中（非static）\",\"局部变量：加载到栈空间\"]},\"1026\":{\"h\":\"3. 对属性可以赋值的位置\",\"t\":[\"①默认初始化\",\"②显式初始化\",\"③构造器中初始化\",\"④有了对象以后，可以通过\\\"对象.属性\\\"或\\\"对象.方法\\\"的方式，进行赋值\",\"⑤在代码块中赋值\",\"执行的先后顺序：① - ② =⑤ - ③ - ④；②跟⑤谁在前就先执行谁，一般②在前\"]},\"1027\":{\"h\":\"Ⅱ. 方法\"},\"1028\":{\"h\":\"1. 概述\",\"t\":[\"方法：描述类应该具有的功能。\",\"功能封装为方法的目的是，可以实现代码重用，简化代码。Java里的方法不能独立存在，所有的方法必须定义在类里。\",\"2-2-1\"]},\"1029\":{\"h\":\"2. 方法的分类\",\"t\":[\"权限修饰符 其他关键字 返回值类型 方法名(形参列表){ 方法体 return 返回值;//可选 } //暂时不考虑：static、final、abstract关键字 \",\"权限修饰符：Java规定的4种权限修饰符：private、public、缺省、protected （详见封装）\",\"返回值：分为有返回值的和没返回值的 \",\"有返回值：必须在方法声明时，指定返回值的类型。同时，方法中，需要使用 return关键字来返回指定类型的变量或常量：“return 数据”。 \",\"可以return一个表达式，只要这个表达式的结果是一个值。\",\"没有返回值：如果方法没有返回值，则方法声明时，使用void来表示。通常，没有返回值的方法中，就不需要使用return.但是，如果使用的话，只能“return;”表示结束此方法的意思。 \",\"比如在条件判断中，对不满足条件的参数，直接return，结束程序，不继续执行了。\",\"方法名：属于标识符，遵循标识符的规则和规范，“见名知意”\",\"形参列表：方法可以声明0个，1个，或多个形参。 \",\"格式：数据类型1 形参1,数据类型2 形参2,...\",\"注意：形参不能有默认值\",\"方法体：方法功能的体现。\"]},\"1030\":{\"h\":\"3. return关键字\",\"t\":[\"使用在方法体中，有以下作用\",\"结束方法\",\"针对于有返回值类型的方法，使用\\\"return 数据\\\"方法返回所要的数据。\",\"注意：return关键字后面不可以声明执行语句（会直接报错），但可以是有结果的表达式。\"]},\"1031\":{\"h\":\"4. 方法的调用\"},\"1032\":{\"h\":\"4.1 调用在main所在类中声明的方法\",\"t\":[\"在main所在类中声明的普通方法（非static），不能在main中直接调用，也需要先建立对象，再进行调用\",\"public class Person{ public static void main(String [] args){ Person p1 = new Person(); //依然需要new对象 System.out.println(p1.say()); } public String say(){ return \\\"hello\\\"; } } \"]},\"1033\":{\"h\":\"4.2 注意\",\"t\":[\"方法被调用一次，就会执行一次\",\"没有具体返回值的情况，返回值类型用关键字void表示，那么方法体中可以不必使用return语句。如果使用，仅用来结束方法。\",\"定义方法时，方法的结果应该返回给调用者，交由调用者处理\",\"方法中只能调用方法或属性，不可以在方法内部定义方法。\"]},\"1034\":{\"h\":\"5. 方法访问类的成员\",\"t\":[\"方法中，可以调用当前类的属性或方法，包括调用自己（递归）。方法中也可以定义变量，但注意不能定义方法。\",\"语法：直接用就行，没有特殊语法，在调用时可以对属性进行修改\",\"class hello { public static void main(String[] args) { Person p = new Person(); p.grow();//我是jinno我现在11岁[属性值被方法修改了] p.grow();//我是jinno我现在12岁 } } class Person{ int age = 10; String uname = \\\"jinno\\\"; public void grow(){ age++; talk(); } public void talk(){ System.out.println(\\\"我是\\\"+uname+\\\"我现在\\\"+age+\\\"岁\\\"); } } \"]},\"1035\":{\"h\":\"6. 递归方法\",\"t\":[\"提示\",\"详见：数据结构与算法>递归\",\"一个方法体内调用它自身。\",\"方法递归包含了一种隐式的循环，它会重复执行某段代码，但这种重复执行无须循环控制。递归一定要向已知方向递归，否则这种递归就变成了无穷递归，类似于死循环。\",\"示例：计算1-100之间所有自然数的和\",\"//使用循环 int sum = 0; for (int i = 1; i <= 100; i++) { sum += i; } //使用递归函数 public int getSum(int n) {// 3 if (n == 1) { return 1; } else { return n + getSum(n - 1); } } \"]},\"1036\":{\"h\":\"Ⅲ. 方法的重载\"},\"1037\":{\"h\":\"1. overload：重载\",\"t\":[\"在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同即可（跟方法的权限修饰符、返回值类型、形参变量名、方法体都没有关系！）。\",\"重载的判断方式：两同一不同\",\"两同：同一个类、相同方法名\",\"不同：参数列表不同 \",\"参数个数不同\",\"参数类型不同：参数是有顺序的；\"]},\"1038\":{\"h\":\"2. 重载的调用\",\"t\":[\"调用方法时，是通过方法名和参数列表来确定调用哪一个方法的。\",\"即通过法名 ---> 参数列表确定某一个指定的方法。\"]},\"1039\":{\"h\":\"3. 重载示例\",\"t\":[\"public void getInfo(int id){...} public void getInfo(String id){...} private void getInfo(String id,Char flag){...} \"]},\"1040\":{\"h\":\"Ⅳ. 参数传递\"},\"1041\":{\"h\":\"1. 概念\",\"t\":[\"方法必须由其所在类或对象调用才有意义。方法是可以有参数的：\",\"形参：方法声明时的参数\",\"实参：方法调用时实际传给形参的参数值\"]},\"1042\":{\"h\":\"2. 参数的数据类型\",\"t\":[\"方法的参数可以是任意数据类型。\",\"基础数据类型\",\"引用数据类型：包括对象作为参数（数据类型是类）。\"]},\"1043\":{\"h\":\"3. 参数值的传递机制\",\"t\":[\"Java里方法的参数传递方式只有一种：值传递。 即将实际参数值的副本（复制品）传入方法内，而参数本身不受影响。\"]},\"1044\":{\"h\":\"3.1 基本数据类型\",\"t\":[\"参数赋给形参的是实参真实存储的数据值，传递完之后，两个变量互不干扰。\",\"示例：交换两个变量（基本变量）的值。\",\"public class Test{ public static void main(String[] args){ int m = 10; int n = 20; Test test = new Test() test.swap(m,n); System.out.println(m+n); //10,20 } public void swap(int m,int n){ int temp = m ; m = n; n = temp; } } \",\"错误分析：我们将m,n传递给方法后，方法的形参被赋予了m,n的值，方法中操作的是形参中的m,n，形参中的m,n和原始数据m,n是没有关联的，所以这个交换值的函数失败了。可以使用return将修改后的数据返回。\"]},\"1045\":{\"h\":\"3.2 引用数据类型\",\"t\":[\"如果参数是引用数据类型，此时实参赋给形参的是实参存储数据的地址值。我们经常会用到将一个对象作为参数。\",\"示例：交换两个变量的值。\",\"class Test{ public void Swap(Data data){ int temp = data.m ; data.m = data.n; data.n = temp; } } class Data{ int m = 10; int n = 20; } \",\"这时上面的需求被实现了。\"]},\"1046\":{\"h\":\"4. 可变个数形参的方法\",\"t\":[\"可变个数形参（Varargs：variable number or argumengts）机制：允许直接定义能和多个实参相匹配的形参。\"]},\"1047\":{\"h\":\"4.1 使用说明\",\"t\":[\"格式1：方法名(参数的类型 ...参数名)\",\"格式2：方法名(参数的类型[] 参数名) ；这个写法不推荐，这是JDK5.0以前的写法\",\"public void show(int i,String ...hobbyl){...} \",\"当调用可变个数形参的方法时，传入的参数个数可以是：0个，1个,2个，。。。\",\"可变个数形参的方法与本类中方法名相同，形参不同的方法之间构成重载\",\"可变个数形参的方法与本类中方法名相同，形参类型也相同的数组之间不构成重载。换句话说，二者不能共存（可变个数形参的第二种写法）。\",\"如果还有其他参数，可变个数形参在方法的形参中，必须声明在末尾\",\"可变个数形参在方法的形参中,最多只能声明一个可变形参。\",\"当调用方法时，传递的参数有符合条件的非可变形参方法，就优先调用。\"]},\"1048\":{\"h\":\"4.2 遍历可变形参\",\"t\":[\"可以在方法中，使用for循环遍历可变个数形参。\",\"public void show(String ... strs){ for(int i = 0;i < strs.length;i++){ System.out.println(strs[i]); } } \"]},\"1049\":{\"h\":\"4.3 注意事项\",\"t\":[\"可变形参的两种写法，java都会认的，所以不要同时出现。\",\"尽量使用第一种写法 ...str；避免方法重载冲突。\"]},\"1050\":{\"h\":\"2-3. 封装\"},\"1051\":{\"h\":\"Ⅰ. 介绍\"},\"1052\":{\"h\":\"程序设计的追求\",\"t\":[\"高内聚 ：类的内部数据操作细节自己完成，不允许外部干涉；\",\"低耦合 ：仅对外暴露少量的方法用于使用。\"]},\"1053\":{\"h\":\"1. 什么是封装\",\"t\":[\"隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提高系统的可扩展性、可维护性。通俗的说，把该隐藏的隐藏起来，该暴露的暴露出来。这就是封装性的设计思想。\"]},\"1054\":{\"h\":\"2. 封装性的意义\",\"t\":[\"当我们使用一个类时，如果直接对类内部的属性进行访问和操作，可能会导致数据的错误、混乱或安全性问题。\",\"public class Test{ public static void main(String[] args){ Person p1 = new Person(); p1.age = -1; //修改了Person类内部的属性 } } class Person{ int age; String uname; } \"]},\"1055\":{\"h\":\"2.1 直接访问属性\",\"t\":[\"如上，我们在类外部直接访问了类内部的属性，将年龄设置成了负数，这是不符合常理且危险的。我们正确的做法是，属性只能在类的内部访问，在类外部访问需要通过方法，我们可以在方法中通过方法体来验证和保护要访问的数据。\"]},\"1056\":{\"h\":\"2.2 通过封装保护属性\",\"t\":[\"如下，我们通过将属性设置为私有的，禁止外部访问，来包含属性，并设置 setxxx和get方法来访问和操作属性。\",\"public class Test{ public static void main(String[] args){ Person p1 = new Person(); p1.getAge; p1.age = 10;//报错，私有属性无权访问 p1.setAge(10) } } class Person{ private int age; String uname; public void setAge(a){ if(a<=0){ age = 1; }else{ age = a; } } public void getAge(){ return age; } } \"]},\"1057\":{\"h\":\"2.3 总结\",\"t\":[\"Java中通过将数据声明为私有的(private)，再提供公共的（public）方法:getXxx() 和setXxx()实现对该属性的操作，以实现下述目的：\",\"隐藏一个类中不需要对外提供的实现细节；\",\"使用者只能通过事先定制好的方法来访问数据，可以方便地加入控制逻辑，限制对属性的不合理操作；\",\"便于修改，增强代码的可维护性；\"]},\"1058\":{\"h\":\"3. 封装思想的体现\",\"t\":[\"如上：Java中通过将数据声明为私有的(private)，再提供公共的（public）方法:getXxx() 和setXxx()实现对该属性的操作\",\"不对外暴露的私有的方法：将一些方法也设置成私有的。\",\"单例模式\"]},\"1059\":{\"h\":\"4. 封装性的总结\",\"t\":[\"Java提供了4种权限修饰符来修饰类及类的内部结构，体现类及类的内部结构在被调用时的可见性的大小。\"]},\"1060\":{\"h\":\"Ⅱ. 权限修饰符\"},\"1061\":{\"h\":\"1. 四种访问权限修饰符\",\"t\":[\"Java权限修饰符置于类的成员定义前，用来限定对象对该类成员的访问权限。\",\"四种权限从大到小为：public、protected、缺省、private\"]},\"1062\":{\"h\":\"2. 具体修饰的目标\",\"t\":[\"修饰类的内部结构：属性、方法、构造器、内部类\",\"修饰类：修饰类的话，只能使用：缺省、public \",\"public类可以在任意地方被访问\",\"default（缺省）类只可以被同一个包内部的类访问\"]},\"1063\":{\"h\":\"3. 权限范围介绍\",\"t\":[\"2-3-1\"]},\"1064\":{\"h\":\"4. 开发中的做法\",\"t\":[\"在实际开发中，我们一般都将属性定义为私有的，访问和操作都以方法的形式\",\"setXxx：设置成员\",\"getXxx：获取成员\"]},\"1065\":{\"h\":\"2-4. 构造器\",\"t\":[\"constructor 构造器，也叫构造方法，是java语言中类的一个成员。\"]},\"1066\":{\"h\":\"1. 构造器的作用\"},\"1067\":{\"h\":\"1.1 创建对象\",\"t\":[\"我们创建对象时进行的语法其实是调用的构造器（构造方法）：new+构造器。\",\"Person p1 = new Person(); \"]},\"1068\":{\"h\":\"1.2 给对象进行初始化\",\"t\":[\"构造器可以带参数，创建对象时利用传参进行属性的初始化。\",\"初始化：过滤，为属性赋值等。\",\"Person p1 = new Person(\\\"jinno\\\",14); public class Person{ private String name; private int age; public Person(String name,int age){ //带参数的构造方法，用于对属性初始化 this.name = name; this.age = age; } } \"]},\"1069\":{\"h\":\"2. 构造器的语法\",\"t\":[\"修饰符 类名 (参数列表){ 初始化语句; } \",\"它具有与类相同的名称（必须一样）\",\"它不声明返回值类型。（与声明为void不同）\",\"不能被static、final、synchronized、abstract、native修饰\",\"不能有return语句返回值\"]},\"1070\":{\"h\":\"3. 构造器分类\",\"t\":[\"隐式无参构造器（系统默认提供）\",\"显式定义一个或多个构造器（无参、有参）\"]},\"1071\":{\"h\":\"4. 构造器重载\",\"t\":[\"构造器虽然不是方法，但是也能像方法那样重载。\",\"即可以定义多个互相重载的构造器。和方法重载一样，重载时，参数列表必须不同\",\"class Person{ int age; String uname; Double Money; public Person(){...}; public Person(String uname){...} public Person(String uname,int age){...} public Person(String uname,Double money){...} } \",\"我们创建对象时，会根据参数，选择符合参数列表的构造器，使初始化时更加灵活。\"]},\"1072\":{\"h\":\"5. 默认构造器\",\"t\":[\"如果没有显式的定义类的构造器的话，则系统默认提供一个空参的构造器（权限跟类一样）。一旦我们显式的定义了类的构造器之后，系统就不再提供默认的空参构造器\",\"也可以显式的创建一个空参构造器（一般开发中都会提供一个）。\"]},\"1073\":{\"h\":\"6. 注意事项\",\"t\":[\"Java 语言中，每个类都至少有一个构造器\",\"默认构造器的修饰符与所属类的修饰符一致\",\"一旦显式定义了构造器，则系统不再提供默认构造器\",\"一个类可以创建多个重载的构造器\",\"父类的构造器不可被子类继承\"]},\"1074\":{\"h\":\"7. 构造器的调用\",\"t\":[\"创建对象时，根据参数列表调用对应的构造器来创建对象。\"]},\"1075\":{\"h\":\"8. 总结：属性赋值的先后顺序\",\"t\":[\"① 默认初始化\",\"② 显式初始化\",\"③ 构造器中初始化\",\"④ 通过\\\"对象.方法\\\" 或 \\\"对象.属性\\\"的方式，赋值\"]},\"1076\":{\"h\":\"2-5. 关键字\"},\"1077\":{\"h\":\"Ⅰ. this\"},\"1078\":{\"h\":\"1. this的作用\",\"t\":[\"this 可以调用类的属性、方法和构造器。\"]},\"1079\":{\"h\":\"2. this的使用\"},\"1080\":{\"h\":\"2.1 在类的方法中\",\"t\":[\"可以使用 this.属性 或 this.方法 的方式，调用当前对象属性或方法。\",\"通常情况下，都选择省略 this.。特殊情况下，如果方法的形参和类的属性同名时，我们必须显式的使用 this.变量 的方式，表明此变量是属性，而非形参。\"]},\"1081\":{\"h\":\"2.2 在类的构造器中\",\"t\":[\"在类的构造器中，我们可以使用 this.属性 或 this.方法 的方式，调用当前正在创建的对象属性或方法。\",\"通常情况下，我们都选择省略this.。特殊情况下，如果构造器的形参和类的属性同名时，我们必须显式的使用 this.变量 的方式，表明此变量是属性，而非形参。\"]},\"1082\":{\"h\":\"3. this调用构造器\",\"t\":[\"我们在类的构造器中，可以显式的使用\\\"this(形参列表)\\\"方式，调用本类中指定的其他构造器，以运行其他构造器的代码，省的再写一份，减少了冗余。\",\"public class Person{ private int age; private String uanme; public Person(int age){ this.age = age;//this调用属性 } public Person(int age,String uname){ this(age);//this调用构造器 this.uanme = uanme; } } \",\"\\\"this(形参列表)\\\"必须声明在当前构造器的首行\",\"this的调用不要写成死循环（互相this，或this自己）\",\"如果一个类中声明了n个构造器，则最多有 n - 1个构造器中使用了\\\"this(形参列表)\\\"\",\"构造器内部，最多只能声明一个\\\"this(形参列表)\\\"，用来调用其他的构造器\"]},\"1083\":{\"h\":\"4. this使用时机\",\"t\":[\"当在方法内需要用到调用该方法的对象时，就用this。\",\"具体的：我们可以用this来区分属性和局部变量。\"]},\"1084\":{\"h\":\"5. 总结\",\"t\":[\"哪个对象调用或者哪个对象正在创建，this就表明是哪个对象。\",\"当形参与成员变量同名时，如果在方法内或构造器内需要使用成员变量，必须添加this来表明该变量是类的成员变量\",\"使用this访问属性和方法时，如果在本类中未找到，会从父类中查找\",\"也可以通过添加this增加可读性\"]},\"1085\":{\"h\":\"Ⅱ. package\",\"t\":[\"package就是包的意思。\"]},\"1086\":{\"h\":\"1. 什么是包\",\"t\":[\"为了更好的实现项目中类的管理，提供包的概念。\",\"本质就是一个文件夹，里面包含了一系列类，方便类的管理。\"]},\"1087\":{\"h\":\"2. 包的作用\",\"t\":[\"包帮助管理大型软件系统：将功能相近的类划分到同一个包中。比如：MVC的设计模式\",\"包可以包含类和子包，划分项目层次，便于管理\",\"解决类命名冲突的问题\",\"控制访问权限\",\"包虽然就是个文件夹，但是跟文件夹还是不一样的。在同一个类中，只要用package设置了包名，就可以直接实例化包中其他类。而不用将类导入。\"]},\"1088\":{\"h\":\"3. 指定包\",\"t\":[\"package语句作为Java源文件的第一条语句，指明该文件中定义的类所在的包。\",\"若缺省该语句，则指定为无名包\",\"//package 顶层包名.子包名 ; package math; package api.back.user; \"]},\"1089\":{\"h\":\"4. 包的命名规则\",\"t\":[\"包属于标识符，遵循标识符的命名规则、规范(xxxyyyzzz)、且最好“见名知意”。\",\"另外包是有层级的（目录的层级），层级可以用包名的点区分，每 . 一次，就代表一层文件目录。\"]},\"1090\":{\"h\":\"5. JDK中主要包介绍\",\"t\":[\"java.lang----包含一些Java语言的核心类，如String、Math、Integer、 System和Thread，提供常用功能\",\"java.net----包含执行与网络相关的操作的类和接口。\",\"java.io----包含能提供多种输入/输出功能的类。\",\"java.util----包含一些实用工具类，如定义系统特性、接口的集合框架类、使用与日期日历相关的函数。\",\"java.text----包含了一些java格式化相关的类\",\"java.sql----包含了java进行JDBC数据库编程的相关类/接口\",\"java.awt----包含了构成抽象窗口工具集（abstract window toolkits）的多个类，这些类被用来构建和管理应用程序的图形用户界面(GUI)。 B/S C/S\"]},\"1091\":{\"h\":\"Ⅲ. import\",\"t\":[\"可以理解为：package用来定义命名空间，而import是导入命名空间的。\"]},\"1092\":{\"h\":\"1. 说明\",\"t\":[\"为使用定义在不同包中的Java类，需用import语句来引入指定包层次下所需要的类或全部类(.*)。\",\"import语句告诉编译器到哪里去寻找类。\"]},\"1093\":{\"h\":\"2. 语法格式\",\"t\":[\"在源文件中显式的使用import结构导入指定包下的类、接口\",\"import 包名.类名; import 包名.*; //*表示所有类 \"]},\"1094\":{\"h\":\"3. import的使用细节\",\"t\":[\"位置：声明在包的声明和类的声明之间\",\"导入多个结构：如果需要导入多个结构，则并列写出即可\",\"导入包下全部类：可以使用\\\"xxx.*\\\"的方式，表示可以导入xxx包下的所有结构\",\"lang包：如果使用的类或接口是java.lang包下定义的，则可以省略import结构\",\"同包类：如果使用的类或接口是本包下定义的，则可以省略import结构，直接用\"]},\"1095\":{\"h\":\"4. 全类名：不导入包直接用\",\"t\":[\"想不导入直接用也可以，在类前面加上包名就行。\",\"带包名的类名，也称为全类名。\",\"api.back.User u1 = new api.back.User(); \"]},\"1096\":{\"h\":\"5. 不同包下的同名类\",\"t\":[\"如果在源文件中，使用了不同包下的同名的类，则必须至少有一个类需要以全类名的方式显示（也可以都用全类名）。\",\"注意：使用了全类名，就不需要导入了，也一定不要导入，不然还有可能会出问题。\",\"此时：导入包和类名的可以直接用类名初始化；没导入的用全类名，互不干扰。\"]},\"1097\":{\"h\":\"6. 子包下的类\",\"t\":[\"使用\\\"xxx.*\\\"方式表明可以调用xxx包下的所有结构。但是如果使用的是xxx子包下的结构，则仍需要显式导入（包括本包下的子包）；\",\"比如：lang包无需导入，但是要使用lang包下的子包，还是需要导入。\",\"import java.lang.reflect.Field; \"]},\"1098\":{\"h\":\"7. import static\",\"t\":[\"import static：导入指定类或接口中的静态结构（属性或方法）。\",\"即：直接导入静态属性和静态方法。\"]},\"1099\":{\"h\":\"Ⅳ. final\"},\"1100\":{\"h\":\"1. 说明\",\"t\":[\"在Java中声明类、变量和方法时，可使用关键字final来修饰,表示“最终的”。\",\"final可以用来修饰的结构：类、方法、变量\"]},\"1101\":{\"h\":\"2. final类：无法继承\",\"t\":[\"final用来修饰一个类:此类不能被其他类所继承，提高安全性\",\"java内部就有很多这样的类：比如：String类、System类\",\"final public class A{}//final在public前后都可以 final class A{} \"]},\"1102\":{\"h\":\"3. final方法：不能重写\",\"t\":[\"final 用来修饰方法：表明此方法不可以被重写。\",\"比如：Object类中的getClass()。\",\"class A{ public final void say(){...} } \"]},\"1103\":{\"h\":\"4. final变量：常量\",\"t\":[\"final 用来修饰变量：此时的\\\"变量\\\"就称为是一个常量，此时常量名要大写\"]},\"1104\":{\"h\":\"4.1 final修饰属性\",\"t\":[\"修饰的属性必须赋值，且只能被赋值一次，不然会报错，可以考虑赋值的位置有：显式初始化、代码块中初始化、构造器中初始化；即在生命周期内，必须在对象创建前初始化。\",\"class A{ final int AGE = 18;//显式初始化 final String MAME; final int SEX; { NAME = \\\"jinno\\\" } public A{ SEX = 1; } } \"]},\"1105\":{\"h\":\"4.2 final修饰局部变量\",\"t\":[\"public satic void main(String[] args){ final int A = 10; A++;//出错 } \"]},\"1106\":{\"h\":\"4.3 final修饰形参\",\"t\":[\"形参也属于局部变量；final修饰形参时，表明此形参是一个常量。当我们调用此方法时，给常量形参赋一个实参。一旦赋值以后，就只能在方法体内使用此形参，但不能进行重新赋值。\",\"public void getIQ(fianl int IQ){ //这里不赋值，不会报错 IQ = 143; //IQ++;报错 return IQ+10;//这样是可以的，没有改变IQ } \"]},\"1107\":{\"h\":\"5. static + final\",\"t\":[\"static final 用来修饰属性：全局常量\"]},\"1108\":{\"h\":\"Ⅴ. 其他\"},\"1109\":{\"h\":\"1. native\",\"t\":[\"主要用在方法上，一个native方法就是一个Java调用非Java代码的接口。一个native方法是指该方法的实现由非Java语言实现，比如用C或C++实现。在定义一个native方法时，并不提供实现体（比较像定义一个Java Interface），因为其实现体是由非Java语言在外面实现的。\",\"public static native long currentTimeMillis(); \"]},\"1110\":{\"h\":\"2-6. 继承\"},\"1111\":{\"h\":\"Ⅰ. extends 继承\",\"t\":[\"多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中，那么多个类无需再定义这些属性和行为，只要继承那个类即可。\"]},\"1112\":{\"h\":\"1. 语法\",\"t\":[\"class Subclass extends SuperClass{ } class A extends B{} \",\"A：子类、派生类、subclass\",\"B：父类、超类、基类、superclass\"]},\"1113\":{\"h\":\"2. 继承后的效果\",\"t\":[\"一旦子类A继承父类B以后，子类A中就获取了父类B中声明的所有的属性和方法。\",\"private属性和方法也继承了，继承过来后也是private权限。如果要使用，也需要使用getxxx和 setXxx来获取和操作；继承不能破坏封装性。\",\"子类继承父类以后，还可以声明自己特有的属性或方法：实现功能的拓展。子类和父类的关系，不同于子集和集合的关系。extends：延展、扩展\"]},\"1114\":{\"h\":\"3. 继承的意义\",\"t\":[\"继承的出现减少了代码冗余，提高了代码的复用性。‘\",\"便于功能的扩展\",\"继承的出现让类与类之间产生了关系，为之后多态性的使用，提供了前提\",\"注意：不要仅为了获取其他类中某个功能而去继承\"]},\"1115\":{\"h\":\"4. 继承的规则总结\",\"t\":[\"一个类可以被多个子类继承。\",\"子类不能直接访问父类中私有的(private) 的成员变量和方法\",\"Java只支持单继承和多层继承，不允许多重继承； \",\"一个类只能有一个父类，可以链式继承，不能多重继承。\",\"子类父类是相对的概念（父类的父类也是父类）\",\"子类直接继承的父类，称为：直接父类。间接继承的父类称为：间接父类\",\"子类继承父类以后，就获取了直接父类以及所有间接父类中声明的属性和方法 \",\"private修饰的成员也继承了，但是不能直接访问private修饰的成员\"]},\"1116\":{\"h\":\"5. Object类\",\"t\":[\"如果我们没有显式的声明一个类的父类的话，则此类继承于java.lang.Object类\",\"所有的java类（除java.lang.Object类之外）都直接或间接的继承于java.lang.Object类\",\"意味着，所有的java类具有java.lang.Object类声明的功能。\"]},\"1117\":{\"h\":\"6. 权限问题\"},\"1118\":{\"h\":\"6.1 子类是否能继承父类的private成员？\",\"t\":[\"关于子类是否能继承父类的private成员，目前有两种说法：\",\"说法一：能继承 \",\"可以继承的观点是，在堆内存中，子类实例其实是，在【父类实例】的基础上，再增加子类独有的属性。因为子类实例中包含父类中的private成员，所以认为可以继承\",\"这种观点认为，封装和继承是独立的，继承是不会破坏封装性的\",\"说法二：不能继承 \",\"不可以继承的观点是，根据定义，子类只能通过父类方法来访问父类中的private成员，而不可以直接访问，所以认为不可以继承\"]},\"1119\":{\"h\":\"6.2 底层解析\",\"t\":[\"创建子类对象时，除了将本类所有的成员复制一份到内存外，还会将父类所有的成员复制一份，子类对象访问继承来的属性和方法时，访问的就是继承来的。\",\"对于父类中的private成员，子类实例也会同样复制一份（这也是为什么有观点认为private成员能继承）。不过这个继承来的private成员，子类是无法直接访问的，必须借助父类的getXxx、setXxx方法才能访问（这也是为什么有观点认为private成员是无法继承的）。\"]},\"1120\":{\"h\":\"6.3 子类访问父类中的private成员\",\"t\":[\"需要父类实现了private成员的getXxx和setXxx方法，子类继承了这些方法后，就可以通过调用这些方法来实现。\",\"[子类继承父类private成员的测试:] class Father{ private int age = 88; public int getAge() { return age; } public void setAge(int age) { this.age = age; } } class Son extends Father{ public void info(){ //System.out.println(age); //直接访问继承到的父类的private属性，会报错 System.out.println(getAge()); //通过继承的父类的getAge方法获取 setAge(50); //通过继承的父类的setAge方法来设置 System.out.println(getAge()); } } \"]},\"1121\":{\"h\":\"Ⅱ. override 重写\"},\"1122\":{\"h\":\"1. 定义\",\"t\":[\"在子类中可以根据需要对从父类中继承来的方法进行改造，也称为方法的重置、覆盖。\",\"在程序执行时，子类的方法将覆盖父类的方法。约定俗称：子类中的叫重写的方法，父类中的叫被重写的方法。也就是说，子类可以创建一个跟父类相同的方法，并根据子类的需求创建不同的方法体。\",\"相同指的是：子类重写的方法的方法名和形参列表与父类被重写的方法的方法名和形参列表相同。\"]},\"1123\":{\"h\":\"2. 重写的要求\"},\"1124\":{\"h\":\"2.1 访问修饰符\",\"t\":[\"子类重写的方法的权限修饰符不小于父类被重写的方法的权限修饰符。\",\"特殊情况：子类不能重写父类中声明为private权限的方法\"]},\"1125\":{\"h\":\"2.2 返回值\",\"t\":[\"void：父类被重写的方法的返回值类型是void，则子类重写的方法的返回值类型只能是void。\",\"引用类型：父类被重写的方法的返回值类型是A类型，则子类重写的方法的返回值类型可以是A类或A类的子类\",\"基本数据类型：父类被重写的方法的返回值类型是基本数据类型(比如：double)，则子类重写的方法的返回值类型必须是相同的基本数据类型(必须也是double)\"]},\"1126\":{\"h\":\"2.3 异常\",\"t\":[\"子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型。详见异常。\"]},\"1127\":{\"h\":\"2.4 静态方法的处理\",\"t\":[\"子类和父类中的同名同参数的方法要么都声明为非static的（考虑重写），要么都声明为static的（不报错，但不叫重写）。\",\"因为static方法是属于类的，子类无法覆盖父类的方法。\"]},\"1128\":{\"h\":\"3. 可变参数的重写\",\"t\":[\"拥有可变参数，依然可以进行重写。\",\"PS：以下示例涉及到多态：\",\"class Father{ public void add(int a, int ...arr){ System.out.println(\\\"add-father\\\") } } class Son extends Father{ public void add(int a, int[] arr){ System.out.println(\\\"add-son\\\") } public void add(int a,int b,int c){ System.out.println(\\\"add-son2\\\"); } } Son s1 = new Son(); s1.add(1,2,3)//add-son2 Fatehr s2 = new Son();//多态 s2.add(1,2,3);//add-son1 \",\"有可变参数的子类add方法重写了有可变参数的父类add；\",\"我们执行s1.add(1,2,3)时，优先寻找的是参数为3（优先找固定参数的）的方法；\",\"因此s1调用时，输出add-son2；\",\"s2是产生了多态，父类的引用指向子类的方法，因此s2调用add时会调用子类中重写的add方法。\"]},\"1129\":{\"h\":\"4. 关于父类中的属性\",\"t\":[\"子类可以重写父类中的方法，但是不能重写父类中的属性。\",\"当子类创建了和父类中相同的属性时，仅仅是在子类中新增了一个同类的属性，并没有重新。 访问时，默认访问的是子类的同名属性，要想访问父类中的同名属性就要使用Super关键字了。\"]},\"1130\":{\"h\":\"Ⅲ. Super\"},\"1131\":{\"h\":\"1. Super的作用\",\"t\":[\"在Java类中使用super来调用父类中的指定成员：\",\"super可用于访问父类中定义的属性\",\"super可用于调用父类中定义的成员方法\",\"super可用于在子类构造器中调用父类的构造器\"]},\"1132\":{\"h\":\"2. super：调用父类属性和方法\",\"t\":[\"我们可以在子类的方法或构造器中。通过使用 super.属性 或 super.方法 的方式，显式的调用父类中声明的属性或方法。但是，通常情况下，我们习惯省略 super.。除非遇到特殊情况（父子类之间出现了同名的方法或属性）。\",\"super.id; public void say(){ super.say(); System.out.println(\\\"son:say\\\"); } \"]},\"1133\":{\"h\":\"2.1 子类调用父类同名属性\",\"t\":[\"当子类和父类中定义了同名的属性时，我们要想在子类中调用父类中声明的属性，则必须显式的使用super.属性 s的方式，表明调用的是父类中声明的属性。\",\"//例如：子类和父类都声明了num这个属性,在父类中需要同时访问这两个属性 class Son extends Father{ int num = 20;//父类也有这个属性,值为10 public void getNum(){ System.out.println(this.num);//20.这个是子类中的num,this可以省略 System.out.println(super.num);//10.这个是父类中的num，super必须不能省略 } } \"]},\"1134\":{\"h\":\"2.2 子类调用父类同名方法\",\"t\":[\"当子类重写了父类中的方法以后，我们想在子类的方法中调用父类中被重写的方法时，则必须显式的使用\\\"super.方法\\\"的方式，表明调用的是父类中被重写的方法。\",\"class Son extends Father{ public void say(String world){ //假如父类也有这个方法 super.say(world); //调用父类中的say System.out.println(\\\"Son's\\\"+world); } } \"]},\"1135\":{\"h\":\"2.3 属性和方法查找的过程分析\",\"t\":[\"当我们在一个类中调用属性或方法时：\",\"①先从本类中查找是否有该属性或方法，找到了就使用，并不会去父类中查找\",\"②当本类中没有找到时，就自动去父类中寻找，相当于自动加了个super.\",\"③当父类和子类中拥有相同的属性或方法时，这里执行①就停止了，因此想使用父类的元素，就要手动的加上super（当然，子类和父类可以同时使用，同时使用时，super必加，this随意）。\"]},\"1136\":{\"h\":\"3. super调用构造器\",\"t\":[\"我们可以在子类的构造器中显式的使用\\\"super(形参列表)\\\"的方式，调用父类中声明的指定的构造器（虽然调用了父类的构造器，但是内存中还是只创建了子类的一个对象）。\",\"无论通过哪个构造器创建子类对象，需要保证先初始化父类；目的是当子类继承父类后，继承父类中所有的属性和方法，因此子类必须知道父类如何为对象进行初始化。\",\"class Son extends Fathe{ String name; public Son(String name,String fa){ super.Father(fa); this.name = name; } } \"]},\"1137\":{\"h\":\"3.1 声明位置\",\"t\":[\"\\\"super(形参列表)\\\"的使用，必须声明在子类构造器的首行！\"]},\"1138\":{\"h\":\"3.2 默认的super\",\"t\":[\"在构造器的首行，没有显式的声明\\\"this(形参列表)\\\"或\\\"super(形参列表)\\\"，则默认调用的是父类中空参的构造器：super()\"]},\"1139\":{\"h\":\"3.3 super和this：对构造器的调用\",\"t\":[\"this.构造器是调用本类的其他构造器，this.super是调用父类的构造器\",\"\\\"this(形参列表)\\\"或\\\"super(形参列表)\\\"只能二选一，不能同时出现\",\"在类的多个构造器中，至少有一个类的构造器中使用了\\\"super(形参列表)\\\"，调用父类中的构造器\"]},\"1140\":{\"h\":\"3.4 父类没有空构造器的情况\",\"t\":[\"如果子类构造器中既未显式调用父类或本类的构造器，且父类中又没有无参的构造器，则编译报错\",\"解析：子类是一定会调用父类的构造器的，我们不手动调用，他也会自动隐式调用了一个空参的父类构造器。当我们在父类中定义了非空参构造器时，父类中的空参构造器就会被删除。这时候如果子类没有使用super显式的调用父类中的非空参构造器，就会报错。\",\"方案：在类中写非空参构造器时，手动写一个空参空方法体的构造器，防止被继承后子类报错。\"]},\"1141\":{\"h\":\"4. super与this的区别\",\"t\":[\"2-6-1\"]},\"1142\":{\"h\":\"Ⅳ. 子类实例化过程\"},\"1143\":{\"h\":\"1. 从结果上看\",\"t\":[\"子类继承父类以后，就获取了父类中声明的属性和方法。\",\"创建子类的对象，在堆空间中，就会加载所有父类中声明的属性。\"]},\"1144\":{\"h\":\"2. 从过程上看\",\"t\":[\"当我们通过子类的构造器创建子类对象时，我们一定会直接或间接的调用其父类的构造器，进而调用父类的父类的构造器，...直到调用了java.lang.Object类中空参的构造器为止。正因为加载过所有的父类的结构，所以才可以看到内存中有父类中的结构，子类对象才可以考虑进行调用。\",\"注意：虽然创建子类对象时，调用了父类的构造器，但是自始至终就创建过一个对象，即为new的子类对象。\"]},\"1145\":{\"h\":\"2-7. 多态\"},\"1146\":{\"h\":\"Ⅰ. 多态\"},\"1147\":{\"h\":\"1. 对象的多态性\",\"t\":[\"父类的引用指向子类的对象（或子类的对象赋给父类的引用）\",\"父类 标识符 = new 子类(); Father f1 = new Son(); \",\"Java引用变量有两个类型： 编译时类型和运行时类型。编译时类型由声明该变量时使用的类型决定，运行时类型由实际赋给该变量的对象决定。\",\"简称：编译看左边；运行看右边。\",\"看左边：看的是父类的引用（父类中不具备子类特有的方法）\",\"看右边 ： 看的是子类的对象（实际运行的是子类重写父类的方法）\",\"而这种：编译时类型和运行时类型不一致 ， 就是对象的多态性\"]},\"1148\":{\"h\":\"2. 多态的使用\"},\"1149\":{\"h\":\"2.1 规定\",\"t\":[\"有了对象的多态性以后，我们在编译期，只能调用父类中声明的方法，但在运行期，我们实际执行的是子类重写父类的方法。\",\"因此使用多态，是以父类的类型，使用子类中重写的父类方法。 即对象的类型是父类；使用的方法是子类的，该方法必须是重写了父类方法。\"]},\"1150\":{\"h\":\"2.2 规定解析\",\"t\":[\"由规定可知，对象在编译期间，判断的是左边（父类）的数据类型（用于传参），运行时执行的是右边（子类）的方法。\",\"这样我们就可以向一个函数传递参数时，表面传递的是父类的数据类型，而实际使用的是子类。\"]},\"1151\":{\"h\":\"2.3 使用限制\",\"t\":[\"一个引用类型变量如果声明为父类的类型，但实际引用的是子类对象，那么该变量就不能再访问子类中添加的属性和方法。\",\"对象的多态性，只适用于方法，不适用于属性，属性只用左边的（父类）\"]},\"1152\":{\"h\":\"3. 多态的意义\",\"t\":[\"Java是强类型语言，当一个方法需要传递的参数类型是一个类时，那么参数就必须传递该类生成的对象。那么如果该方法适用很多类，就需要创建很多个除了数据类型（类）外其他完全一样的方法了，这样造成了很大的冗余。\",\"在实际开发中，经常会遇到这样的情景，N个子类适用于同一个方法，需要为每个子类创建一个方法，太冗余了。因此我们就需要多态了。\"]},\"1153\":{\"h\":\"4. 多态示例\",\"t\":[\"需求：数据库连接\",\"我们需要在User类中调用getUser方法获取数据，获取数据需要数据库链接，这时需要将数据库对象传入getUsers方法然后用数据库对象连接数据库进行操作。\",\"数据库对象不止一种（MySQL、Oracle等），我们不能为每一种数据库都定义一套方法，因此我们这里就要用到多态性。\",\"定义：所有数据库连接对象的父类都是 java.sql.Connection;（也可以是接口）。\",\"public class User{ public static void main(String[] args){ User user = new User(); //传入我们想用的数据库对象，这里是MySQL user.getUser(new MysqlConnect()); } public void getUser(Connection conn){ conn.getConnect();//连接数据库 conn...//其他操作 } } \"]},\"1154\":{\"h\":\"5. 虚拟方法的调用\"},\"1155\":{\"h\":\"5.1 正常的方法调用\",\"t\":[\"Person e = new Person(); e.getInfo(); Student e = new Student(); e.getInfo(); \"]},\"1156\":{\"h\":\"5.2 虚拟方法调用（多态情况下）\",\"t\":[\"子类中定义了与父类同名同参数的方法，在多态情况下，将此时父类的方法称为虚拟方法，父类根据赋给它的不同子类对象，动态调用属于子类的该方法。这样的方法调用在编译期是无法确定的。\",\"Person e = new Student(); e.getInfo(); // 调用Student 类的getInfo() \"]},\"1157\":{\"h\":\"5.3 编译时类型与运行时类型\",\"t\":[\"编译时e为Person 类型，而方法的调用是在运行时确定的，所以调用的是Student类的 的getInfo() 方法。\"]},\"1158\":{\"h\":\"5.4 虚拟方法调用举例\",\"t\":[\"定义：Person类中定义了welcome()方法，各个子类重写了welcome()。\",\"执行：多态的情况下，调用对象的welcome()方法，实际执行的是子类重写的方法。\",\"2-7-1\"]},\"1159\":{\"h\":\"6. 早绑定与晚绑定\",\"t\":[\"通过分析重载和重写在编译和运行是状态来判断早绑定与晚绑定\",\"早绑定（静态绑定）：重载，是指允许存在多个同名方法，而这些方法的参数不同，编译器根据方法不同的参数表，对同名方法的名称做修饰。对于编译器而言，这些同名方法就成了不同的方法，它们的调用地址在编译期就绑定了。Java的重载是可以包括父类和子类的，即子类可以重载父类的同名不同参数的方法。所以：对于重载而言，在方法调用之前，编译器就已经确定了所要调用的方法，这称为“早绑定”或“静态绑定”；\",\"晚绑定（动态绑定）：而对于多态，只有等到方法调用的那一刻，解释运行器才会确定所要调用的具体方法，这称为“晚绑定”或“动态绑定”。如果它不是晚绑定，它就不是多态。\"]},\"1160\":{\"h\":\"7. 赋值形式的多态\",\"t\":[\"将子类对象赋值给父类数据类型的标识符，也属于父类的引用指向子类的对象。\",\"同时父类和子类的标识符执指向同一地址\",\"Son s = new Son(); //相当于：Father f = new Son(); f = s; Father f = s; f.age;//调用的是父类中的属性。 f.say();//调用的是子类中的say方法 \",\"示例：\",\"public class Test{ public static void main(String[] args){ Son s = new Son(); Father f = s; //Father f = new Son() && f = s System.out.println(f == s);//true System.out.println(f.count);//50,访问的是父类的属性 f.say();//20;调用的是子类的方法，多态的特性 } } class Father{ int age = 50; public void say(){ System.out.println(age); } } class Son extends Father{ int age = 20; public void say(){ System.out.println(age); } } \"]},\"1161\":{\"h\":\"8. 多态开发中的应用\",\"t\":[\"多态提高了代码的通用性，常用作接口重用。\",\"没有多态，接口就没有意义了（只能规范，不能实例化没用）。 同时也提高了代码的健硕性，直接使用父类中定义的方法，子类实现可以随意更换。\"]},\"1162\":{\"h\":\"Ⅱ. 转型\",\"t\":[\"有了对象的多态性以后，内存中实际上是加载了子类特有的属性和方法的，但是由于变量声明为父类类型，导致编译时，只能调用父类中声明的属性和方法。子类特有的属性和方法不能调用。如何才能调用子类特有的属性和方法？\",\"答案是向下转型：使用强制类型转换符。\"]},\"1163\":{\"h\":\"1. 向下转型说明\",\"t\":[\"向上转型：子类转父类，自动转，称为多态\",\"向下转型：父类转子类，强制转，称为向下转型\",\"Father f1 = New Son(); Son s1 = (Son)f1;//f1是父类型对象，向下转型成子类型 s1.sonDO();//可以调用son类中独有的方法了 s1.Teacher = \\\"jinno\\\";//可以调用son类中的属性了 \"]},\"1164\":{\"h\":\"2. 转型的条件\"},\"1165\":{\"h\":\"2.1 向上转型：子转父\",\"t\":[\"随便转，没有限制，可以自动进行\",\"Son s1 = new Son(); System.out.println(s1.age); //Son的age Father f2 = (Father)s1; System.out.println(f2.age);//father的age \"]},\"1166\":{\"h\":\"2.2 向下转型：父类转子类\",\"t\":[\"父类的引用必须指向子类的对象（这样编译时才能加载子类），不然无法转\",\"Father f1 = new Son(); Son s1 = (Son)f1;//这样才能转 \"]},\"1167\":{\"h\":\"3. 向下转型的异常\",\"t\":[\"使用强转时，可能出现ClassCastException的异常，如下：\",\"Father f1 = New Son(); Son s1 = (Son)f1; //可以强转 Daughter = (Daughter)f1;//强转失败，F1是由Son生产的而不是Daughter，不能强转 \",\"为了避免出错，我们在向下转型之前，先进行instanceof的判断，一旦返回true，就进行向下转型。如果返回false，不进行向下转型。\"]},\"1168\":{\"h\":\"4. instancof的\",\"t\":[\"对象 instanceof 类名: 这个是用来测试一个对象的类名的\",\"if(f1 instanceof Son){ Son s1 = (Son)f1; s1.sonDo(); } if(f1 instanceof Daughter){ Daughter d1 = (Daughter)f1; d1.daughterDo(); } \",\"补充：如果 a instanceof A返回true,则 a instanceof B也返回true 其中类B是类A的父类。\"]},\"1169\":{\"h\":\"5. 转型的注意事项\"},\"1170\":{\"h\":\"5.1 向下转型必须是父类引用子类的对象\",\"t\":[\"Person p4 = new Person(); Man m4 = (Man)p4; //不能转，p4里面没有加载子类的元素 \"]},\"1171\":{\"h\":\"5.2 隔代转型\",\"t\":[\"Object->Person->Woman；\",\"Object引用的Woman子类，Object可以强转成Woman，更何况强转成Person。\",\"Object obj = new Woman(); Person p = (Person)obj; //可以转 \"]},\"1172\":{\"h\":\"5.3 转型必须有父子关系\",\"t\":[\"无继承关系的引用类型间的转换是非法的\",\"String str = new Date(); Object o = new Date(); String str1 = (String)o; //编译时是不报错的，但是运行还是会出错 \"]},\"1173\":{\"h\":\"2-8. 特殊类\"},\"1174\":{\"h\":\"Ⅰ. Object类\"},\"1175\":{\"h\":\"1. 说明\",\"t\":[\"Object类是所有Java类的根父类；如果在类的声明中未使用extends关键字指明其父类，则默认父类为java.lang.Object类；Object类中的功能(属性、方法)具有通用性。\",\"Object的主要结构如下：\",\"2-8-1\"]},\"1176\":{\"h\":\"2. Object类的功能\",\"t\":[\"Object类无属性且构造器是空参构造器\",\"主要功能（方法）如下：\",\"clone：克隆 对象\",\"equals：判断两个对象是否想等\",\"finalize：垃圾回收方法（不要手动调用，由垃圾回收机制自动调用）\",\"getClass：获取当前对象的所属类\",\"hashCode：获取当前对象的哈希值（详见集合）\",\"toString：打印对象\",\"wait：详见多线程\",\"notify：详见多线程\",\"notifyAll：详见多线程\"]},\"1177\":{\"h\":\"3. equals与 ==\"},\"1178\":{\"h\":\"3.1 ==的用法\",\"t\":[\"关系操作符 == 生成的是一个boolean结果，它们计算的是操作数的值之间的关系\",\"可以使用在基本数据类型变量和引用数据类型变量中；\",\"如果比较的是基本数据类型变量：比较两个变量保存的数据是否相等（不一定类型要相同,运算时会- 自动类型提升）。\",\"如果比较的是引用数据类型变量：比较两个对象的地址值是否相同.即两个引用是否指向同一个对象实体。\",\"boolean类型不与其他类型参与比较\",\"用“==”进行比较时，符号两边的 数据类型必须兼容(可自动转换的基本数据类型除外)，否则编译出错\",\"注意：java中没有 ===（全等于）符号。\",\"//基本数据类型 int j = 10; double d = 10.0; System.out.println(i == d);//true,只比较值，不比较数据类型 char c = 10; System.out.println(i == c);//true,char类型就是以数值方式储存的 char c1 = 'A'; char c2 = 65; System.out.println(c1 == c2);//true,同上 //引用类型 Customer cust1 = new Customer(\\\"Tom\\\",21); Customer cust2 = new Customer(\\\"Tom\\\",21); System.out.println(cust1 == cust2);//false;地址不同 String str1 = new String(\\\"atguigu\\\"); String str2 = new String(\\\"atguigu\\\"); System.out.println(str1 == str2);//false;同上，地址不同 \"]},\"1179\":{\"h\":\"3.2 equals的用法\",\"t\":[\"Customer cust1 = new Customer(\\\"Tom\\\",21); Customer cust2 = new Customer(\\\"Tom\\\",21); System.out.println(cust1 == cust2);//false String str1 = new String(\\\"atguigu\\\"); String str2 = new String(\\\"atguigu\\\"); System.out.println(str1.equals(str2));//true \",\"equals是一个方法，而非运算符，因此只能适用于引用数据类型\",\"Object类中（源码）定义的equals()和==的作用是相同的：比较两个对象的地址值是否相同.即两个引用是否指向同一个对象实体。\",\"像String、Date、File、包装类等都重写了Object类中的equals()方法。重写后，比较的不是两个引用的地址是否相同，而是比较两个对象的\\\"实体内容\\\"是否相同。\"]},\"1180\":{\"h\":\"3.3 自定义类重写equals\",\"t\":[\"通常情况下，我们自定义的类如果使用equals()的话，也通常是比较两个对象的\\\"实体内容\\\"是否相同。那么，我们就需要对Object类中的equals()进行重写.\",\"重写的原则：比较两个对象的实体内容是否相同，IDE 可以自动生成equals重写（比较两个对象实体是否相同）\",\"对称性：如果x.equals(y)返回是“true”，那么y.equals(x)也应该返回是“true”。\",\"自反性：x.equals(x)必须返回是“true”。\",\"传递性：如果x.equals(y)返回是“true”，而且y.equals(z)返回是“true”，那么z.equals(x)也应该返回是“true”。\",\"一致性：如果x.equals(y)返回是“true”，只要x和y内容一直不变，不管你重复x.equals(y)多少次，返回都是“true”。\",\"任何情况下，x.equals(null)，永远返回是“false”；x.equals(和x不同类型的对象)永远返回是“false”。\",\"public boolean equals(Object obj){ if(this == obj){ //如果要比较的两个对象是引用关系，直接返回true return true; } if(obj == null){ return false;//obj是null，直接返回false } if(this.getClass() != obj.getClass()){ return false;//类不同，直接返回false； } //运行到这里，obj和Person是同属一个类的对象 Person other = (Person)obj; //将obj的Object类型向下转型为Person以便对比属性 if(this.age != other.age){ return false;//判断两个对象的属性是否相同 } if(this.name == null){ if(other.name != null){ return false;//如果两个对象一个name属性有初始值，一个没有，返回false } }else if (!name.equals(other.name)){ return false; //如果this对象不是null，则调用String重新的equals判断两个name是否相等 } return true; } \"]},\"1181\":{\"h\":\"3.4 ==和equals()的区别\",\"t\":[\"== 既可以比较基本类型也可以比较引用类型。对于基本类型就是比较值，对于引用类型就是比较内存地址\",\"equals 的话，它是属于java.lang.Object 类里面的方法，如果该方法没有被重写过默认也是 是==; 我们可以到 看到String类 等类的 的equals 方法是被重写过的，而且String 类在日常开发中 用的比较多，久而久之，形成了equals 是比较值的错误观点。\",\"equals的具体使用要看自定义类里有没有 重写Object 的equals 方法来 判断，通常情况下，重写equals 方法，会比较类中的相应属性是否都相等。\"]},\"1182\":{\"h\":\"3.5 特殊情况\",\"t\":[\"对于Integer类来说，-128127经常使用，所以系统进行了缓存。因此当值的范围在-128127时，相同值的Integer类指向的是同一个内存地址（除非直接new Integer（））。\",\"Integer a = 200; Integer b = 200; a == b; //false a.equals(b); //true Integer a = 100; Integer b = 100; a == b; //true \"]},\"1183\":{\"h\":\"4. toString\",\"t\":[\"当我们输出一个对象的引用时，实际上就是调用当前对象的toString()\"]},\"1184\":{\"h\":\"4.1 toString的源码\",\"t\":[\"toString在Object中输出的是带对象类型的地址。\",\"public String toString() { //test.Test@15db9742 return getClass().getName() + \\\"@\\\" + Integer.toHexString(hashCode()); } \"]},\"1185\":{\"h\":\"4.2 特殊对象对toString的重写\",\"t\":[\"像String、Date、File、包装类等都重写了Object类中的toString()方法。使得在调用对象的toString()时，返回\\\"实体内容\\\"信息\",\"String str = new String(\\\"MM\\\"); System.out.println(str);//MM Date date = new Date(4534534534543L); System.out.println(date.toString());//Mon Sep 11 08:55:34 GMT+08:00 2113 \"]},\"1186\":{\"h\":\"4.3 自定义重写toString\",\"t\":[\"如果我们也想输出对象的实体内容（如包含哪些属性）就需要在类中对toString进行自定义重写； IDE有一键重写功能（输出的就是类名和类的属性）\",\"public String toString() { return \\\" Person[name=\\\" + name + \\\", age=\\\" + age + \\\"]\\\"; } \"]},\"1187\":{\"h\":\"4.4 String.toString\",\"t\":[\"在行进行String与其它类型数据的连接操作时 ，自动调用toString() 基本类型数据转换为String 类型时，的 调用了对应包装类的toString()\"]},\"1188\":{\"h\":\"Ⅱ. 包装类\"},\"1189\":{\"h\":\"1. 说明\",\"t\":[\"包装类就是将基本数据类型的值包装成引用数据类型（对象）\",\"针对八种基本数据类型定义相应的引用类型—包装类（封装类）有了类的特点，就可以调用类中的方法，Java才是真正的面向对象\"]},\"1190\":{\"h\":\"2. 基本数据和对应的包装类\",\"t\":[\"2-8-2\"]},\"1191\":{\"h\":\"3. 包装类的转换概述\",\"t\":[\"基本数据类型、包装类与String类的互相转换示意图：\",\"2-8-3\"]},\"1192\":{\"h\":\"4. 基本数据类型转换为包装类\",\"t\":[\"装箱：通过包装类的构造器实现。\",\"语法：包装类 标识符 = new 包装类的构造器(基本数据类型的值或标识符);\",\"//int示例 int num1 = 10; Integer in1 = new Integer(num1); System.out.println(in1.toString());//现在是类了可以调用toString了 Integer in2 = new Integer(\\\"123\\\");//纯数值的字符串也可以作为参数 Integer in1 = new Integer(23);//基本数据类型的值当然也可以 //Boolean示例 Boolean b1 = new Boolean(true);//使用基本数据类型的值 Boolean b2 = new Boolean(\\\"TrUe\\\");// true Boolean b3 = new Boolean(\\\"true123\\\");//false \"]},\"1193\":{\"h\":\"4.1 boolean转换的特殊性说明\",\"t\":[\"Boolean构造器的值，如果是字符串，那么经过大小写的转换只要是true，就会转换为true，否则一律转为false\",\"Boolean类的默认值是null，而不是false（现在已经是类了）。\"]},\"1194\":{\"h\":\"5. 包装类转换为基本数据类型\",\"t\":[\"拆箱：获得 包装类对象中包装的基本类型变量\",\"语法：调用包装类Xxx的xxxValue()即可\",\"Integer in1 = new Integer(12); int i1 = in1.intValue(); //变成了 int 12 System.out.println(i1 + 1); //13;转换后可以进行运算了 Float f1 = new Float(12.3); float f2 = f1.floatValue(); System.out.println(f2 + 1); \"]},\"1195\":{\"h\":\"6. 自动装箱与自动拆箱\",\"t\":[\"自动装箱：基本数据类型可以自动转为对应的包装类类型，而不用使用构造器\",\"自动拆箱：包装类自动转为基本数据类型，而不用调用包装类Xxx的xxxValue()\",\"注意：类型必须匹配\",\"int num2 = 10; Integer in1 = num2;//自动装箱 int num3 = in1;//自动拆箱 \",\"传参：当一个方法的参数是Object数据类型时，基本数据类型不用转换，直接传进去就行，因为会触发自动装箱。\"]},\"1196\":{\"h\":\"7. 基本数据类型和包装类与String类型的转换\"},\"1197\":{\"h\":\"7.1 基本数据类型、包装类--->String类型\",\"t\":[\"方式1：连接运算，任何基本数据类型+String类型都会转为String类型\",\"方式2：调用String重载的valueOf(Xxx xxx)\",\"int num1 = 10; //方式1：连接运算 String str1 = num1 + \\\"\\\"; //方式2：调用String的valueOf(Xxx xxx) float f1 = 12.3f; String str2 = String.valueOf(f1);//\\\"12.3\\\" Double d1 = new Double(12.4); String str3 = String.valueOf(d1); //\\\"12.4\\\" \"]},\"1198\":{\"h\":\"7.2 String类型转基本数据类型、包装类\",\"t\":[\"不能强转，需要调用包装类的parseXxx(String s)\",\"String str1 = \\\"123\\\"; int num2 = Integer.parseInt(str1);//int 123// String str2 = \\\"true111\\\"; boolean b1 = Boolean.parseBoolean(str2); //boolean false \"]},\"1199\":{\"h\":\"8. 注意事项\",\"t\":[\"进行互相转换时，要保证输入的类型是正确的。\",\"比如：不能把123ab或\\\"123ab\\\"当做数值类型.\"]},\"1200\":{\"h\":\"Ⅲ. 内部类\"},\"1201\":{\"h\":\"1. 定义\",\"t\":[\"Inner class：内部类。\",\"Java中允许将一个类A声明在另一个类B中，则类A就是内部类，类B称为外部类。一般用在定义它的类或语句块之内，在外部引用它时必须给出完整的名称。Inner class的名字不能与包含它的外部类类名相同；\"]},\"1202\":{\"h\":\"2. 内部类的作用\",\"t\":[\"当一个事物的内部，还有一个部分需要一个完整的结构进行描述，而这个内部的完整的结构又只为外部事物提供服务，那么整个内部的完整结构最好使用内部类。\"]},\"1203\":{\"h\":\"3. 分类\",\"t\":[\"class Person{ class Dog{ //成员内部类 } static class Shit{ //静态成员内部类 } public Person(){ class AA{} //局部内部类 } { class Cat{} //局部内部类 } public Person(){ class CC{} //局部内部类 } } \",\"成员内部类：定义在类里面和类的成员并列的 \",\"静态成员内部类\",\"非静态成员内部类\",\"局部内部类：定义在方法内、代码块内、构造器内的类\"]},\"1204\":{\"h\":\"4. 成员内部类的特点\"},\"1205\":{\"h\":\"4.1 作为外部类的成员\",\"t\":[\"可以调用外部类的结构\",\"可以被static修饰，但此时就不能再使用外层类的非static的成员变量；\",\"可以被4种不同的权限修饰（外部类不能由private和protected修饰）。\"]},\"1206\":{\"h\":\"4.2 作为一个类\",\"t\":[\"类内可以定义属性、方法、构造器等\",\"可以被final修饰，表示此类不能被继承。言外之意，不使用final，就可以被继承\",\"可以被abstract修饰，因此可以被其它的内部类继承\"]},\"1207\":{\"h\":\"4.3 注意事项\",\"t\":[\"非static的成员内部类中的成员不能声明为static的，只有在外部类或static的成员内部类中才可声明static成员。\",\"外部类访问成员内部类的成员，需要“内部类.成员”或“内部类对象.成员”的方式\",\"成员内部类可以直接使用外部类的所有成员，包括私有的数据\",\"当想要在外部类的静态成员部分使用内部类时，可以考虑内部类声明为静态的\"]},\"1208\":{\"h\":\"4.4 实例化成员内部类\",\"t\":[\"Person.Dog dog = new Person.Dog(); //静态成员内部类 Person p = new Person(); Person.Bird bird = p.new Bird(); //非静态成员内部类 \"]},\"1209\":{\"h\":\"4.5 成员内部类调用外部结构\",\"t\":[\"不重名的情况下，直接调用即可，重名是要采用以下方法调用。\",\"{ class Bird{ String name = \\\"bird\\\"; public void sing(){ System.out.println(name);//使用方法的形参 System.out.println(this.name);//调用内部类的name System.out.println(Person.this.name);//调用外部类的name } } } \"]},\"1210\":{\"h\":\"5. 局部内部类的使用\",\"t\":[\"直接使用很少见；一般用来返回实现了某个接口的类的对象\",\"class Person{ public Comparable getComparable(){ class MyComparable implements Comparable{ public int compareTo(Object o) { return 0; } } //方式二 return new Comparable(){ public int compareTo(Object o) { return 0; } }; } } \",\"在局部内部类的方法中，如果调用声明局部内部类的外部方法的局部变量的话，要求此局部变量声明为final的。\"]},\"1211\":{\"h\":\"5.1 使用局部内部类\",\"t\":[\"只能在声明它的方法或代码块中使用，而且是先声明后使用。除此之外的任何地方 都不能使用该类\",\"但是它的对象可以通过外部方法的返回值返回使用，返回值类型只能是局部内部类 的父类或父接口类型\"]},\"1212\":{\"h\":\"5.2 局部内部类的特点\",\"t\":[\"内部类仍然是一个独立的类，在编译之后内部类会被编译成独立的.class文件，但是前面冠以外部类的类名和$符号，以及数字编号。\",\"只能在声明它的方法或代码块中使用，而且是先声明后使用。除此之外的任何地方都不能使用该类。\",\"局部内部类可以使用外部类的成员，包括私有的。\",\"局部内部类可以使用外部方法的局部变量，但是必须是final的。由局部内部类和局部变量的声明周期不同所致。\",\"局部内部类和局部变量地位类似，不能使用public,protected,缺省,private\",\"局部内部类不能使用static修饰，因此也不能包含静态成员\"]},\"1213\":{\"h\":\"6. 内部列的作用\",\"t\":[\"当一个事物的内部，还有一个部分需要一个完整的结构进行描述，而这个内部的完整的结构又只为外部事物提供服务，那么整个内部的完整结构最好使用内部类。\"]},\"1214\":{\"h\":\"Ⅳ. 匿名类\",\"t\":[\"匿名类不能定义任何静态成员、方法和类，只能创建匿名类的一个实例。一个匿名类一定是在new的后面，用其隐含实现一个接口或实现一个类。\"]},\"1215\":{\"h\":\"1. 格式\",\"t\":[\"new 父类构造器(实参列表) 或要实现的接口(){ //匿名内部类的类体部分 //如果继承了抽象类或实现了接口，这里要重写抽象方法 } \"]},\"1216\":{\"h\":\"2. 特点\",\"t\":[\"匿名类必须继承父类或实现接口\",\"匿名类只能有一个对象\",\"匿名类对象只能使用多态形式引用\"]},\"1217\":{\"h\":\"3. 示例\"},\"1218\":{\"h\":\"3.1 示例1\",\"t\":[\"public class Test { public static void main(String[] args) { I o1 = new I() { public void fun() { System.out.println(\\\"hello\\\"); } }; o1.fun();//hello } } interface I{ void fun(); } \"]},\"1219\":{\"h\":\"3.2 示例2\",\"t\":[\"interface A{ public abstract void fun1(); } public class Outer{ public static void main(String[] args){ new Outer().callnener(new A(){ public void fun1(){ System.out.println(\\\"implement for fun1\\\"); } }); } public void callneer(A a){ a.fun1(); } } \"]},\"1220\":{\"h\":\"2-9. static\"},\"1221\":{\"h\":\"Ⅰ. static介绍\"},\"1222\":{\"h\":\"1. static关键字的使用\",\"t\":[\"static是静态修饰符，用来修饰属性、方法、代码块和内部类的。\"]},\"1223\":{\"h\":\"2. static的背景\",\"t\":[\"当我们编写一个类时，其实就是在描述其对象的属性和行为，而并没有产生实质上的对象，只有通过new关键字才会产生出对象，这时系统才会分配内存空间给对象，其方法才可以供外部调用。我们有时候希望无论是否产生了对象或无论产生了多少对象的情况下，某些特定的数据在内存空间里只有一份。\"]},\"1224\":{\"h\":\"3. 类属性与类方法\",\"t\":[\"类属性：类属性作为该类各个对象之间共享的变量。 \",\"在设计类时, 分析哪些属性不因对象的不同而改变 ，将这些属性设置为类属性。相应的方法设置为类方法。\",\"类方法：如果方法与调用者无关，则这样的方法通常被声明为类方法，由于不需要创建对象就可以调用类方法 ，从而简化了方法的调用。\"]},\"1225\":{\"h\":\"4. 被static修饰后的成员具备的特点\",\"t\":[\"随着类的加载而加载\",\"优先于对象存在\",\"修饰的成员，被所有对象所共享\",\"访问权限允许时，可不创建对象，直接被类调用\"]},\"1226\":{\"h\":\"Ⅱ. 静态属性\"},\"1227\":{\"h\":\"1. 说明\",\"t\":[\"静态属性，又称为静态变量、类变量。\",\"被static修饰的属性就是静态属性，因此类的属性就分为：静态属性和非静态属性了。\",\"Class Person{ static String nation; } Person p1 = new Person(); Person p2 = new Person(); p1.nation = \\\"China\\\"; System.out.println(p2.nation);//China;p1赋的值，p2也能取到 p2.nation = \\\"Japan\\\"; System.out.println(p1.nation);//Japan;p2改的值，p1也受影响 \",\"静态变量（类变量）：我们创建了类的多个对象，多个对象共享同一个静态变量。当通过某一个对象修改静态变量时，会导致其他对象调用此静态变量时，是修改过了的。\",\"非静态变量（实例变量）：我们创建了类的多个对象，每个对象都独立的拥有一套类中的非静态属性。当修改其中一个对象中的非静态属性时，不会导致其他对象中同样的属性值的修改。\"]},\"1228\":{\"h\":\"2. 静态变量的声明\",\"t\":[\"如下：访问修饰符和static的顺序可以调换。\",\"class ClassName{ static 访问修饰符 属性名;//也可以初始化 } \"]},\"1229\":{\"h\":\"3. 静态变量的加载\",\"t\":[\"静态变量是随着类的加载而加载，静态变量的加载要早于对象的创建。由于类只会加载一次，则静态变量在内存中也只会存在一份：存在方法区的静态域中。因此一个类的不同实例拥有的静态变量是同一个。\"]},\"1230\":{\"h\":\"4. 静态变量的使用\",\"t\":[\"由于静态变量的加载早于对象，因此可以通过\\\"类.静态变量\\\"的方式进行调用。\\\\\",\"Person.country = \\\"USA\\\";//直接使用类名访问静态变量 \"]},\"1231\":{\"h\":\"Ⅲ. 静态方法\"},\"1232\":{\"h\":\"1. 概述\",\"t\":[\"使用static修饰的方法，就是静态方法（与之相对的是非静态方法）。\",\"静态方法也是随着类的加载而加载的。\"]},\"1233\":{\"h\":\"2. 静态方法的声明\",\"t\":[\"public static 返回值类型 方法名(形参列表){ ... } class Person{ static String nation = \\\"China\\\"; public static String getNation(){ return nation;//return Person.nation; } } \"]},\"1234\":{\"h\":\"3. 静态方法的调用\",\"t\":[\"因为加载类时已经有静态方法了，因此可以直接通过类名调用静态方法。\",\"Person.getNation();//直接用类调用静态方法 \"]},\"1235\":{\"h\":\"4. 静态方法与非静态方法的对比\",\"t\":[\"静态方法中只能调用静态的方法和静态属性。\",\"非静态方法中，既可以调用非静态的方法或属性，也可以调用静态的方法或属性\"]},\"1236\":{\"h\":\"5. 注意事项\",\"t\":[\"在静态的方法内，不能使用this关键字（this指向的是对象）、super关键字（super指的是当前对象的父类，也要先有对象）。\",\"关于静态属性和静态方法的使用，可以从生命周期的角度去理解。\"]},\"1237\":{\"h\":\"6. 如何判断是否要声明static\",\"t\":[\"属性 \",\"属性是可以被多个对象所共享的，不会随着对象的不同而不同的\",\"类中的常量也常常声明为static\",\"方法 \",\"操作静态属性的方法，通常设置为static的（静态成员的生命周期同步）。\",\"工具类中的方法，习惯上声明为static的。 比如：Math、Arrays、Collections \",\"方便直接用类调用\"]},\"1238\":{\"h\":\"Ⅳ. 单例模式\",\"t\":[\"提示\",\"详见：设计模式>单例模式\"]},\"1239\":{\"h\":\"1. 单例模式核心\",\"t\":[\"所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例。\",\"由于单例模式只生成一个实例，减少了系统性能开销，当一个对象的产生需要比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后永久驻留内存的方式来解决。\"]},\"1240\":{\"h\":\"2. 实现方式1： 饿汉式\",\"t\":[\"私有化类的构造器：阻止类外随便造对象\",\"内部创建类的对象，并保存为静态属性\",\"提供公共的静态方法，返回累的对象。\",\"class Bank{ //1.私有化类的构造器 private Bank(){} //2.内部创建类的对象 //4.要求此对象也必须声明为静态的 private static Bank instance = new Bank(); //3.提供公共的静态的方法，返回类的对象 public static Bank getInstance(){ return instance; } } Bank bank1 = Bank.getInstance(); Bank bank2 = Bank.getInstance(); System.out.println(bank1 == bank2);//true \"]},\"1241\":{\"h\":\"3. 实现方式2：懒汉式\",\"t\":[\"和饿汉式差不多，这里变成了在方法中调用构造器\",\"class Order{ //1.私有化类的构造器 private Order(){} //2.声明当前类对象，没有初始化 //4.此对象也必须声明为static的 private static Order instance = null; //3.声明public、static的返回当前类对象的方法 public static Order getInstance(){ if(instance == null){ instance = new Order(); } return instance; } } \"]},\"1242\":{\"h\":\"4. 饿汉式和懒汉式的对比\",\"t\":[\"饿汉式 \",\"优点：对象加载时间过长。\",\"缺点：饿汉式是线程安全的\",\"懒汉式 \",\"优点：延迟对象的创建。\",\"缺点：线程不安全（无法应对高并发）；需要进行多线程的修改【详见：多线程】。\"]},\"1243\":{\"h\":\"5. 单例模式的使用场景\",\"t\":[\"网站的计数器，一般也是单例模式实现，否则难以同步。\",\"应用程序的日志应用，一般都使用单例模式实现，这一般是由于共享的日志文件一直处于打开状态，因为只能有一个实例去操作，否则内容不好追加。\",\"数据库连接池的设计一般也是采用单例模式，因为数据库连接是一种数据库资源。\",\"项目中，读取配置文件的类，一般也只有一个对象。没有必要每次使用配置文件数据，都生成一个对象去读取。\",\"Application 也是单例的典型应用\",\"Manager (任务管理器)就是很典型的单例模式\",\"Windows的Recycle Bin (回收站)也是典型的单例应用。在整个系统运行过程中，回收站一直维护着仅有的一个实例。\"]},\"1244\":{\"h\":\"2-a. 抽象类与接口\"},\"1245\":{\"h\":\"Ⅰ. abstract\"},\"1246\":{\"h\":\"1. abstract class：抽象类\",\"t\":[\"用abstract关键字来修饰一个类，这个类叫做抽象类\",\"虽然不能实例化，抽象类中还是存在构造器的，因为抽象类的子类还是要实例化的。开发中，都会提供抽象类的子类，让子类实例化，完成相关的操作。\",\"abstract class Person{...} \"]},\"1247\":{\"h\":\"2. abstract方法：抽象方法\",\"t\":[\"用abstract来修饰一个方法，该方法叫做抽象方法。\",\"抽象方法只有方法的声明，没有方法体,以分号结束；含有抽象方法的类必须被声明为抽象类。\",\"若子类重写了父类中的所有的抽象方法后，此子类方可实例化，也就是说，子类必须重写父类中所有的抽象方法（提供方法体），除非自己也声明成抽象类。\",\"public abstract void Say(); \"]},\"1248\":{\"h\":\"3. abstract的使用注意\",\"t\":[\"抽象类不一定有抽象方法，但是有抽象方法的类一定要声明成抽象类。\",\"abstract不能用来修饰属性、代码块构造器等结构\",\"abstract不能用来修饰私有方法、静态方法、final的方法、final的类\"]},\"1249\":{\"h\":\"4. 创建抽象类的匿名类\",\"t\":[\"普通类是可以创建匿名对象的，而抽象类不能实例化，所以理论上无法创建匿名对象。\",\"但可以通过特殊的方法创建匿名类，达到匿名对象同样的效果\",\"abstract class Person{ //匿名类 public abstract eat(); //匿名方法 } //现在不用子类继承，不实例化子类，来实例化一个匿名类 public class Test(){ public static void main(String[] args){ method(new Person(){ //直接new抽象类 public void eat(){ //需要重写抽象类里的抽象方法。 System.out.println(\\\"eat shit\\\"); } }); } public static void method(Person p){ p.eat();//调用匿名类里的eat方法 } } \"]},\"1250\":{\"h\":\"5. 模板方法设计模式\",\"t\":[\"抽象类可用于模板方法设计模式。\",\"思想：当功能内部一部分实现是确定的，一部分实现是不确定的。这时可以把不确定的部分暴露出去，让子类去实现。\",\"换句话说，在软件开发中实现一个算法时，整体步骤很固定、通用，这些步骤已经在父类中写好了。但是某些部分易变，易变部分可以抽象出来，供不同子类实现。这就是一种模板模式。\"]},\"1251\":{\"h\":\"5.1 示例：计算代码执行时间\",\"t\":[\"解析：创建一个计算代码执行时间的类，我们并不知道要计算的代码具体是什么代码，因此可以将要计算的代码作为抽象方法来定义和使用。\",\"abstract class Template{ // 计算代码执行时间的类 //计算某段代码执行所需要花费的时间的方法 public void spendTime(){ long start = System.currentTimeMillis(); this.code();//不确定的部分、易变的部分 long end = System.currentTimeMillis(); System.out.println(\\\"花费的时间为：\\\" + (end - start)); } public abstract void code(); //不确定部分设计成抽象方法 } \"]},\"1252\":{\"h\":\"5.2 示例：银行业务流程\",\"t\":[\"解析：银行的业务流程是固定的：预约取号->办理业务->评分；我们可以将其作为一个类，但是办理的具体业务是不确定的，因此我们可以将办理的业务作为抽象方法；然后为具体的业务创建子类继承该抽象类，实现具体业务的代码即可。\",\"abstract class BankTemplateMethod { public void takeNumber() { System.out.println(\\\"取号排队\\\");//步骤一： } //这种步骤中不确定，需要具体子类确定的步骤，像个钩子，被称为钩子函数 public abstract void transact(); // 步骤二：不确定 办理具体的业务 public void evaluate() { //步骤三：反抗评分 System.out.println(\\\"反馈评分\\\"); } // 模板方法，把基本操作组合到一起，子类一般不能重写 public final void process() { this.takeNumber(); this.transact();// 像个钩子，具体执行时，挂哪个子类，就执行哪个子类 this.evaluate(); } } class DrawMoney extends BankTemplateMethod { //示例：实现 public void transact() { System.out.println(\\\"我要取款！！！\\\"); } } \"]},\"1253\":{\"h\":\"Ⅱ. interface\"},\"1254\":{\"h\":\"说明\",\"t\":[\"接口和类是并列关系，或者可以理解为一种特殊的类。从本质上讲，接口是一种特殊的抽象类，这种抽象类中只包含常量和方法的定义(JDK7.0及之前)，而没有变量和方法的实现。\",\"在开发中，常看到一个类不是去继承一个已经实现好的类，而是要么继承抽象类，要么实现接口。\"]},\"1255\":{\"h\":\"1. 概述：接口的由来\"},\"1256\":{\"h\":\"1.1 多重继承\",\"t\":[\"有时必须从几个类中派生出一个子类，继承它们所有的属性和方法。但是，Java不支持多重继承。有了接口，就可以得到多重继承的效果。\"]},\"1257\":{\"h\":\"1.2 功能\",\"t\":[\"有时必须从几个类中抽取出一些共同的行为特征，而它们之间又没有is-a的关系，仅仅是具有相同的行为特征而已。例如：鼠标、键盘、打印机、扫描仪、移动硬盘等都支持USB连接。不能定义一个USB父类让他们都去继承，USB是他们的一个功能，而不是他们的一个抽象。因此就需要用到接口了。\",\"2-a-1\"]},\"1258\":{\"h\":\"2. 接口的意义：规范\",\"t\":[\"接口的本质是契约，标准，规范，就像我们的法律一样。制定好后大家都要遵守。\",\"接口就是规范，定义的是一组规则，体现了现实世界中“如果你是/要...则必须能...”的思想。\",\"继承是一个\\\"是不是\\\"的关系，而接口实现则是 \\\"能不能\\\"的关系。\",\"在开发中，常看到一个类不是去继承一个已经实现好的类，而是要么继承抽象类，要么实现接口\"]},\"1259\":{\"h\":\"3. 接口定义\",\"t\":[\"接口采用interface关键字来定义，接口(interface)是抽象方法和常量值定义的集合；接口内部只能定义全局常量和抽象方法\",\"全局常量：public static final \",\"可以省略public static final，默认就是public static final\",\"抽象方法：public abstract。 \",\"可以省略abstract，默认就是abstract\",\"interface Flyable{ public static final int MAX_SPEED = 7900;//全局常量 int MIN_SPEED = 1;//省略了public static final public abstract void fly(); //抽象方法 void stop(); //省略了public abstract } \"]},\"1260\":{\"h\":\"4. 接口的特点\",\"t\":[\"接口中不能定义构造器的！意味着接口不可以实例化\",\"接口与接口之间可以继承，而且可以多继承\",\"接口中的所有成员变量都默认是由public static final修饰的。\",\"接口中的所有抽象方法都默认是由public abstract修饰的。\"]},\"1261\":{\"h\":\"5. 接口的使用细节\",\"t\":[\"定义Java类的语法格式：先写extends，后写implements \",\"class Son extends Father implements Students{...}\",\"一个类可以实现多个接口，接口也可以继承其它接口。\",\"实现接口的类中必须提供接口中所有方法的具体实现内容，方可实例化。否则，仍需定义为抽象类。\",\"接口的主要用途就是被实现类实现。（面向接口编程） \",\"几乎所有的设计模式都是面向接口编程的。\",\"与继承关系类似，接口与实现类之间存在多态性 \",\"很多设计模式都用到了接口这个特性。\"]},\"1262\":{\"h\":\"6. 接口的实现\",\"t\":[\"Java开发中，接口通过让类去实现(implements)的方式来使用；如果实现类实现了接口中的所有抽象方法，则此实现类就可以实例化；否则就只能定义为抽象类。\",\"Java类可以实现多个接口 --->弥补了Java单继承性的局限性\",\"class AA extends BB implements CC,DD,EE{...} \"]},\"1263\":{\"h\":\"7. 接口示例\",\"t\":[\"接口的具体使用，体现多态性。\"]},\"1264\":{\"h\":\"7.1 示例：模拟USB\",\"t\":[\"//定义USB接口 interface USB{ ...//常量：定义了长、宽、最大最小的传输速度等 void start();//连接USB void stop();//断开USB } //实现USB接口 class Flash implements USB{ public void start(){ System.out.println(\\\"U盘开启工作\\\"); } public void stop() { System.out.println(\\\"U盘结束工作\\\"); } } //在电脑上使用USB class Computer{ public void transferData(USB usb){//USB usb = new Flash(); usb.start(); System.out.println(\\\"具体传输数据的细节\\\"); usb.stop(); } } //用法：有4中方式使用flash Computer com = new Computer(); //实例化子类 Flash flash = new Flash(); //实例化子类 com.transferData(flash); //创建了接口的非匿名实现类的匿名对象 com.transferData(new Flash);//匿名对象 //创建了接口的匿名实现类的非匿名对象 USB flash = new USB(){ public void start() { System.out.println(\\\"USB开始工作\\\"); } public void stop() { System.out.println(\\\"USB结束工作\\\"); } } com.transferData(flash); //创建了接口的匿名实现类的匿名对象 com.transferData(new USB(){ public void start() { System.out.println(\\\"USB开始工作\\\"); } public void stop() { System.out.println(\\\"USB结束工作\\\"); } }); \"]},\"1265\":{\"h\":\"7.2 JDBC\",\"t\":[\"JDBC：接口，定义了所有操作数据库的抽象方法。\",\"其他数据库驱动实现接口（一些接口的实现集合）。操作时操作JDBC接口里的方法。\",\"2-a-2\",\"意义：只掌握一套连接数据库的方法，就能操作所有数据库。\"]},\"1266\":{\"h\":\"8. 接口与抽象类的对比\",\"t\":[\"2-a-3\"]},\"1267\":{\"h\":\"Ⅲ. 接口新特性\",\"t\":[\"JDK8中除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法\",\"public interface CompareA { //静态方法 public static void method1(){ System.out.println(\\\"CompareA:北京\\\"); } //默认方法 public default void method2(){ System.out.println(\\\"CompareA：上海\\\"); } default void method3(){ System.out.println(\\\"CompareA：上海\\\"); } } \"]},\"1268\":{\"h\":\"1. 静态方法\",\"t\":[\"使用 static 关键字修饰。只能通过接口直接调用静态方法，并执行其方法体。\",\"CompareA.method1(); \"]},\"1269\":{\"h\":\"2. 默认方法\",\"t\":[\"默认方法使用 default 关键字修饰。可以通过实现类对象来调用。\",\"s.method2(); s.method3(); \",\"重写：如果实现类重写了接口中的默认方法，调用时，仍然调用的是重写以后的方法\",\"类优先：如果子类(或实现类)继承的父类和实现的接口中声明了同名同参数的默认方法，那么子类在没有重写此方法的情况下，默认调用的是父类中的同名同参数的方法。-->类优先原则。\",\"接口冲突：如果实现类实现了多个接口，而这多个接口中定义了同名同参数的默认方法，那么在实现类没有重写此方法的情况下，报错。-->接口冲突。解决：需要我们必须在实现类中重写此方法。\"]},\"1270\":{\"h\":\"3. 在子类中调用父类、接口中被重写的方法\",\"t\":[\" public void myMethod(){ method3();//调用自己定义的重写的方法 super.method3();//调用的是父类中声明的 //调用接口中的默认方法,可以调用多个接口的 CompareA.super.method3(); CompareB.super.method3(); } \"]},\"1271\":{\"h\":\"4. 静态方法和默认方法的意义\"},\"1272\":{\"h\":\"4.1 静态方法：\",\"t\":[\"解释：静态方法，就是接口可以直接掉用的方法，不用实现类也可以\",\"意义：不用实现接口也能调用这些方法，可以把接口当做工具类使用\",\"详细：静态方法在实现类中是看不到，无法调用（但可以重写），静态方法只是用来取代一些工具类的。\"]},\"1273\":{\"h\":\"4.2 默认方法\",\"t\":[\"解释：就是方法的默认实现；即实现接口的类可以直接使用这些方法。\",\"意义：它将允许我们向较旧的接口添加方法。\",\"详细：接口的实现类可以直接使用这些默认的方法，同时还可以重写默认的方法，这不是强制性的重写。默认方法使得开发者可以在不破坏二进制兼容性的前提下，往现存接口中添加新的方法，即不强制那些实现了该接口的类也同时实现这个新加的方法。\"]},\"1274\":{\"h\":\"2-b. 特殊结构\"},\"1275\":{\"h\":\"Ⅰ. 代码块\"},\"1276\":{\"h\":\"1. 作用\",\"t\":[\"用来初始化类、对象；\",\"代码块里面可以像方法体一样，写一些执行的代码。\"]},\"1277\":{\"h\":\"2. 格式\",\"t\":[\"{ //这里写代码 } static{ //静态代码块 //这里写代码 } \"]},\"1278\":{\"h\":\"3. 分类\",\"t\":[\"一个类中代码块若有修饰符，则只能被static修饰，称为 静态代码块(static block)，没有使用static修饰的，为非静态代码块。\",\"class Person{ String name; int age; static String desc = \\\"I'm Gay\\\"; static{//static代码块 System.out.println(\\\"代码块可以输出\\\"); desc = \\\"I'm not Gay\\\";//可以给静态属性赋值 info();//可以调用静态方法 } { //非static代码块 System.out.println(\\\"代码块可以输出\\\"); age = 20;//调用非静态结构：为非静态属性赋值 eat();//掉用非静态方法 desc = \\\"Yes\\\" //调用静态结构 info(); } } \"]},\"1279\":{\"h\":\"3.1 静态代码块\",\"t\":[\"内部可以有输出语句\",\"随着类的加载而执行,而且只执行一次\",\"作用：初始化类的信息\",\"如果一个类中定义了多个静态代码块，则按照声明的先后顺序执行\",\"静态代码块的执行要优先于非静态代码块的执行\",\"静态代码块内只能调用静态的属性、静态的方法，不能调用非静态的结构\"]},\"1280\":{\"h\":\"3.2 非静态代码块\",\"t\":[\"内部可以有输出语句\",\"随着对象的创建而执行\",\"每创建一个对象，就执行一次非静态代码块\",\"作用：可以在创建对象时，对对象的属性等进行初始化\",\"如果一个类中定义了多个非静态代码块，则按照声明的先后顺序执行\",\"非静态代码块内可以调用静态的属性、静态的方法，或非静态的属性、非静态的方法\"]},\"1281\":{\"h\":\"4. 开发中代码块的作用\",\"t\":[\"当在初始化之前要进行一些操作时，可以使用代码块进行：先操作再赋值。\"]},\"1282\":{\"h\":\"Ⅱ. JavaBean\",\"t\":[\"JavaBean是一种Java语言写成的可重用组件（本质是一套Java书写规范）。\",\"所谓javaBean，是指符合如下标准的Java类：\",\"类是公共的\",\"有一个无参的公共的构造器\",\"所有属性(如果有) 都是private，并且提供set/get (如果boolean 则get 可以替换成is)\"]},\"1283\":{\"h\":\"1. 背景\",\"t\":[\"Java语言欠缺属性、事件、多重继承功能。所以，如果要在Java程序中实现一些面向对象编程的常见需求，只能手写大量胶水代码。Java Bean正是编写这套胶水代码的惯用模式或约定。这些约定包括getXxx、setXxx、isXxx、addXxxListener、XxxEvent等。遵守上述约定的类可以用于若干工具或库。\"]},\"1284\":{\"h\":\"2. 意义\",\"t\":[\"用户可以使用JavaBean将功能、处理、值、数据库访问和其他任何可以用Java代码创造的对象进行打包，并且其他的开发者可以通过内部的JSP页面、Servlet、其他JavaBean、applet程序或者应用来使用这些对象。用户可以认为JavaBean提供了一种随时随地的复制和粘贴的功能，而不用关心任何改变。\"]},\"1285\":{\"h\":\"3. JavaBean的种类\",\"t\":[\"第一种：封装数据，这种JavaBean也被叫做实体类，一般来说对应的是数据库中的一张表\",\"第二种：封装逻辑，这种JavaBean用于实现业务逻辑。目的是为了提高代码的复用和解耦\"]},\"1286\":{\"h\":\"4. JavaBean举例\",\"t\":[\"如下：获取用户的年龄\",\"//不使用JavaBean public class Person{ public int age; } //使用JavaBean public class Person{ private int age; public int getAge(){ return age; } } \",\"假如某一天，逻辑修改了，不能获取用户的年龄了，怎么办？\",\"不使用JavaBean就只能隐藏age属性，这样很多其他代码都会受到牵连，比如无法获取属性，报一大堆异常。\",\"而使用JavaBean设计的类，就可以只修改getXxx内的代码逻辑即可。\"]},\"1287\":{\"h\":\"Ⅲ. 概念补充\"},\"1288\":{\"h\":\"1. UML类图\",\"t\":[\"2-b-1\",\"权限控制： + 表示 public 类型， - 表示 private 类型，#表示protected类型\",\"方法的写法：方法的类型(+、-) 方法名(参数名： 参数类型)：返回值类型\"]},\"1289\":{\"h\":\"2. MVC设计模式\",\"t\":[\"MVC是常用的设计模式之一，将整个程序分为三个层次：视图模型层，控制器层，与数据模型层。这种将程序输入输出、数据处理，以及数据的展示分离开来的设计模式使程序结构变的灵活而且清晰，同时也描述了程序各个对象间的通信方式，降低了程序的耦合性。\"]},\"1290\":{\"h\":\"2.1 Model：模型层【操作数据】\",\"t\":[\"数据对象封装 model.bean/domain\",\"数据库操作类 model.dao\",\"数据库 model.db\"]},\"1291\":{\"h\":\"2.2 Controller：控制器层【业务逻辑】\",\"t\":[\"应用界面相关 controller.activity\",\"存放fragment controller.fragment\",\"显示列表的适配器 controller.adapter\",\"服务相关的 controller.service\",\"抽取的基类 controller.base\"]},\"1292\":{\"h\":\"2.3 View：视图层【前端】\",\"t\":[\"相关工具类 view.utils\",\"自定义view view.ui\"]},\"1293\":{\"h\":\"3. main\",\"t\":[\"main()方法作为程序的入口\",\"main()方法也是一个普通的静态方法\",\"main()方法可以作为我们与控制台交互的方式。（之前：使用Scanner） \",\"用法：控制台 java a.class 空格 参数\",\"参数将传递给main方法的 args数组。\",\"main的特点 \",\"由于Java虚拟机需要调用类的main()方法，所以该方法的访问权限必须是public，又因为Java虚拟机在执行main()方法时不必创建对象，所以该方法必须是static的，该方法接收一个String类型的数组参数，该数组中保存执行Java命令时传递给所运行的类的参数。\",\"又因为main() 方法是静态的，我们不能直接访问该类中的非静态成员，必须创建该类的一个实例对象后，才能通过这个对象去访问类中的非静态成员。\"]},\"1294\":{\"h\":\"4. 连续操作\",\"t\":[\"方法是可以连续调用的，方法如果有返回值，返回的是一个对象，那么就可以继续调用该对象的方法\"]},\"1295\":{\"h\":\"5. 四种Java文件\",\"t\":[\"以下四种文件是平级的，且后缀都是.java\",\"Class：标准的Java类\",\"Interface：接口\",\"Enum：枚举\",\"Annotation：注解\"]},\"1296\":{\"h\":\"2-c. 内存解析\",\"t\":[\"提示\",\"仅简单介绍，详见：JVM\"]},\"1297\":{\"h\":\"Ⅰ. 类与对象\"},\"1298\":{\"h\":\"1. 内存区域\",\"t\":[\"2-c-1\",\"堆（Heap）：用于存放对象实例；所有的对象实例以及数组都要在堆上分配内存。\",\"栈（Stack）：是指虚拟机栈。虚拟机栈用于存储局部变量等。 \",\"局部变量表存放了编译期可知长度的各种基本数据类型（boolean、byte、char 、 short 、 int 、 float 、 long 、double）、对象引用（reference类型，它不等同于对象本身，是对象在堆内存的首地址）。 方法执行完，自动释放。\",\"方法区（Method Area）：存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。\",\"其他区域：其他区域跟类和对象无关，不用关注\"]},\"1299\":{\"h\":\"2. 对象的内存解析\",\"t\":[\"2-c-2\"]},\"1300\":{\"h\":\"2.1 Person p1 = new Person\",\"t\":[\"new类创建对象时，在堆内存中，保存了对象的实体；同时在栈内存中，是k=v的形式，用k保存了对象的标识符p1，用v保存了对象实体所在内存空间的首地址。即对象的标识符p1保存了对象的内存地址，p1指向了对象实体；而对象实体中保存了对象的属性。\"]},\"1301\":{\"h\":\"2.2 p1.name = Tome；p1.isMale=true\",\"t\":[\"对象的属性是复制类的，属性的默认值就是类里定义的值；如果没有默认值，就采用数据类型的默认值。当对属性进行修改时，对象实体内属性的值就被修改了。\"]},\"1302\":{\"h\":\"2.3 Person p2 = new Person()\",\"t\":[\"再新建一个对象时，堆内存中又开辟了一块内存空间储存对象的实体。同时栈内存中，用p2保存了新对象的内存地址。\",\"p1和p2是完全独立的，他们指向各自的对象内存地址。两个对象中保存的属性也是互不相干的（各种有自己的内存空间）。\"]},\"1303\":{\"h\":\"2.4 Person p3 = p1；p3.age = 10\",\"t\":[\"通过变量赋值的方式，将p1保存的内存地址赋给了p3，因此现在p1和p3保存的是相同的内存地址，指向同一个对象，通过p1和p3对对象的属性进行修改，会互相影响到对方。\"]},\"1304\":{\"h\":\"3. 注意事项\",\"t\":[\"引用类型的变量，只可能存储两类值：null 或 地址值（含变量的类型）\"]},\"1305\":{\"h\":\"Ⅱ. 变量间赋值\"},\"1306\":{\"h\":\"1. 结论\",\"t\":[\"将一个变量的值赋值给另一个变量时，\",\"如果变量的值是基本数据类型：那么只是将值复制给另一个变量，两个变量各种保存了一份值，互不干扰，当其中一个变量的值改变时不会影响另一个。\",\"如果变量的值是引用数据类型：那么变量保存的其实是值所在内存的内存地址，进行赋值时，是将内存地址传给了对方，两个变量指向同一内存地址，互为引用，互相干扰。\"]},\"1307\":{\"h\":\"2. 基本数据类型\",\"t\":[\"基本数据类型的值，是直接跟变量对应的，没有通过保存指针来用变量指向值。\",\"所以基本数据类型在赋值的时候，是直接将值赋给了对方，两个变量互不干扰。\",\"int a = 10; int b = a; System.out.println(a+b);//10 10 inb b = 20; System.out.println(a+b);//10 20 \"]},\"1308\":{\"h\":\"3. 引用数据类型\",\"t\":[\"引用数据类型的标识符保存的是值的内存地址，因此在向其他变量赋值的时候，是将内存地址传过去了，两个变量指向同一内存地址，互为引用，互相干扰。\",\"String a = 'hello'; String b = a; System.out.println(a+b);//hello hello b = \\\"OK \\\"; System.out.println(a+b);//OK OK \"]},\"1309\":{\"h\":\"3-1. 异常概述\"},\"1310\":{\"h\":\"Ⅰ. 概述\",\"t\":[\"在Java语言中，将程序执行中发生的不正常情况称为“异常”。(开发过程中的语法错误和逻辑错误不是异常)\"]},\"1311\":{\"h\":\"1. 异常分类\",\"t\":[\"Java程序在执行过程中所发生的异常事件可分为两类：Error和Exception\"]},\"1312\":{\"h\":\"2. Error：错误\",\"t\":[\"Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源耗尽等严重情况。比如：StackOverflowError和OOM。一般不编写针对性的代码进行处理。\",\"我们常说的异常处理，不包括这个，这个是我们处理不了的。\",\"public class ErrorTest { public static void main(String[] args) { //1.栈溢出：java.lang.StackOverflowError main(args); //2.堆溢出：java.lang.OutOfMemoryError Integer[] arr = new Integer[1024*1024*1024]; } } \"]},\"1313\":{\"h\":\"3. Exception：异常\",\"t\":[\"其它因编程错误或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理。\",\"如：空指针访问、试图读取不存在的文件、网络连接中断、数组角标越界\",\"我们平时说的异常一般指的就是Exception。\"]},\"1314\":{\"h\":\"4. 异常处理\",\"t\":[\"对于这些错误，一般有两种 解决方法：一是遇到错误就终止程序的运行。另一种方法是由程序员在编写程序时，就考虑到错误的检测、错误消息的提示，以及错误的处理。\",\"使用程序处理异常，又分为两种形式：try-catch和throws.\"]},\"1315\":{\"h\":\"5. 异常处理的意义\",\"t\":[\"异常的处理只是为了保证代码的正常运行，并非真正解决了异常。\",\"例如：点击点击首页时，因为缺少某个资源，发生了乱码，我们进行处理的效果是提示用户发生了资源缺失，而不是让用户看乱码，这就是异常的意义。但是要明确，异常并没有被解决，我们需要将异常写入日志，上报到后台，然后再去真正的解决异常。\",\"也就是：异常处理只是为了跟用户友好的交互，真正解决异常，还是要后台根据收集的异常信息去优化代码。\"]},\"1316\":{\"h\":\"Ⅱ. 异常处理机制\",\"t\":[\"在编写程序时，经常要在可能出现错误的地方加上检测的代码，如进行x/y运算时，要检测分母为0，数据为空，输入的不是数据而是字符等。过多的if-else分支会导致程序的代码加长、臃肿，可读性差。因此采用异常处理机制。\"]},\"1317\":{\"h\":\"1. java的异常处理机制\",\"t\":[\"Java采用的异常处理机制，是将异常处理的程序代码集中在一起，与正常的程序代码分开，使得程序简洁、优雅，并易于维护。\"]},\"1318\":{\"h\":\"2. 异常处理的抓抛模型\",\"t\":[\"抛（throw）：程序在正常执行的过程中，一旦出现异常，就会在异常代码处生成一个对应异常类的对象。并将此对象抛出。 一旦抛出对象以后，其后的代码就不再执行。\",\"抓（catch）：可以理解为异常的处理方式：① try-catch-finally ② throws\"]},\"1319\":{\"h\":\"3. 异常对象的产生\",\"t\":[\"系统自动生成的异常对象：由虚拟机 自动生成：程序运行过程中，虚拟机检测到程序发生了问题，如果在当前代码中没有找到相应的处理程序，就会在后台自动创建一个对应异常类的实例对象并抛出——自动抛出\",\"手动的生成一个异常对象，并抛出（throw）：由开发人员手动创建：Exception exception = new ClassCastException();——创建好的异常对象不抛出对程序没有任何影响，和创建一个普通对象一样。\"]},\"1320\":{\"h\":\"4. 异常处理总结\",\"t\":[\"3-1-1\"]},\"1321\":{\"h\":\"3-2. 常见异常\"},\"1322\":{\"h\":\"Ⅰ. 异常体系结构\"},\"1323\":{\"h\":\"1. 异常分类\",\"t\":[\"捕获错误最理想的是在 编译期间，但有的错误只有在 运行时才会发生。比如：除数为0，数组下标越界等\",\"异常（Exception）分为：编译时异常和运行时异常\",\"java.lang.Throwable |-----java.lang.Error:一般不编写针对性的代码进行处理。 |-----java.lang.Exception:可以进行异常的处理 |------编译时异常(checked) |-----IOException |-----FileNotFoundException |-----ClassNotFoundException |------运行时异常(unchecked,RuntimeException) |-----NullPointerException |-----ArrayIndexOutOfBoundsException |-----ClassCastException |-----NumberFormatException |-----InputMismatchException |-----ArithmeticException \",\"3-2-1\"]},\"1324\":{\"h\":\"2. 编译时异常\",\"t\":[\"是指编译器要求必须处置的异常。即程序在运行时由于外界因素造成的一般性异常。编译器要求Java程序必须捕获或声明所有编译时异常。\",\"对于这类异常，如果程序不处理，可能会带来意想不到的结果。\"]},\"1325\":{\"h\":\"3. 运行时异常\",\"t\":[\"是指编译器不要求强制处置的异常。一般是指编程时的逻辑错误，是程序员应该积极避免其出现的异常。java.lang.RuntimeException类及它的子类都是运行时异常。\",\"对于这类异常，可以不作处理，因为这类异常很普遍，若全处理可能会对程序的可读性和运行效率产生影响。\"]},\"1326\":{\"h\":\"Ⅱ. 常见异常\"},\"1327\":{\"h\":\"1. NullPointerException：空指针（运行异常）\",\"t\":[\"int[] arr = null; System.out.println(arr[3]); String str = \\\"abc\\\"; str = null; System.out.println(str.charAt(0)); \"]},\"1328\":{\"h\":\"2. IndexOutOfBoundsException：角标越界（运行异常）\"},\"1329\":{\"h\":\"3.1 ArrayIndexOutOfBoundsException：数组角标越界\",\"t\":[\"int[] arr = new int[10]; System.out.println(arr[10]); \"]},\"1330\":{\"h\":\"3.2 StringIndexOutOfBoundsException：字符串角标越界\",\"t\":[\"String str = \\\"abc\\\" System.out.println(str.charAt(3)); \"]},\"1331\":{\"h\":\"3. ClassCastException：类型转换异常（运行异常）\",\"t\":[\"Object obj = new Date(); String str = (String)obj; \"]},\"1332\":{\"h\":\"4. NumberFormatException：数值格式异常（运行异常）\",\"t\":[\"String str = \\\"123\\\"; str = \\\"abc\\\"; int num = Integer.parseInt(str); \"]},\"1333\":{\"h\":\"5. InputMismatchException：输入不匹配异常（运行异常）\",\"t\":[\"Scanner scanner = new Scanner(System.in); int score = scanner.nextInt(); System.out.println(score);//需求是输入int，如果输入字符串就会报异常 scanner.close(); \"]},\"1334\":{\"h\":\"6. ArithmeticException：算学计算异常（运行异常）\",\"t\":[\"int a = 10; int b = 0; System.out.println(a / b);//0作为了被除数 \"]},\"1335\":{\"h\":\"7. IOException（编译时异常）\",\"t\":[\"File file = new File(\\\"hello.txt\\\"); FileInputStream fis = new FileInputStream(file); int data = fis.read(); while(data != -1){ System.out.print((char)data); data = fis.read(); } fis.close(); \"]},\"1336\":{\"h\":\"3-3. try-catch\"},\"1337\":{\"h\":\"1. 语法结构\",\"t\":[\"try{ //可能出现异常的代码 }catch(异常类型1 变量名1){ //当产生异常类型1时的处理措施 }catch(异常类型2 变量名2){ //当产生异常类型2时的处理措施 }catch(异常类型3 变量名3){ //当产生异常类型3时的处理措施 } .... finally{ //无论是否发生异常，都无条件执行的语句 } \",\"try：捕获异常的第一步是用try{…}语句块选定捕获异常的范围，将可能出现异常的代码放在try语句块中。\",\"catch：在catch语句块中是对异常对象进行处理的代码。每个try语句块可以伴随一个或多个catch语句，用于处理可能产生的不同类型的异常对象。\"]},\"1338\":{\"h\":\"2. 异常类型的选择\",\"t\":[\"如果明确知道产生的是何种异常，可以用该异常类作为catch的参数；也可 以用其父类作为catch的参数。比 如 ： 可以用ArithmeticException 类作为参数的地方，就可以用 RuntimeException类作为参数，或者用所有异常的父类Exception类作为参数。\",\"但不能是与ArithmeticException类无关的异常，如NullPointerException（catch 中的语句将不会执行）。\"]},\"1339\":{\"h\":\"3. try-catch示例\",\"t\":[\"import java.io.File; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.IOException; public class ExceptionTest{ public void test1(){ String str = \\\"abc\\\"; //非数字字符串 try{ int num = Integer.parseInt(str); //非数字字符串转不了 System.out.println(\\\"shit,这里出问题了\\\"); }catch(NumberFormatException e){ //尝试捕获数值类型异常 System.out.println(\\\"YES,捕获到了数值异常\\\"); System.out.pintln(e.getMessage());//获取异常信息 e.printStackTrace();//打印详细异常：堆栈追踪 }catch(NullPointerException e){ //尝试捕获空指针异常 System.out.println(\\\"YES,捕获到了空指针异常\\\"); }catch(Exception e){ //尝试捕获异常 System.out.println(\\\"这里出现了异常，类型不明\\\"); } System.out.println(num);//无法获取num，num是try里面的局部变量 System.out.println(\\\"后续代码继续执行\\\"); } } \"]},\"1340\":{\"h\":\"4. try-catch使用说明\",\"t\":[\"finally是可选的。\",\"使用try将可能出现异常代码包装起来，在执行过程中，一旦出现异常，就会生成一个对应异常类的对象，根据此对象的类型，去catch中进行匹配\",\"一旦try中的异常对象匹配到某一个catch时，就进入catch中进行异常的处理。一旦处理完成，就跳出当前的try-catch结构（在没有写finally的情况）。继续执行其后的代码（不会再执行其他catch了，只捕获一次）。\"]},\"1341\":{\"h\":\"5. 捕获异常的有关信息\",\"t\":[\"捕获异常后，会获取异常对象，对于异常对象e，可以调用下面两个方法，处理（查看）异常信息。\",\"3-3-1\",\"getMessage：获取异常信息，返回字符串\",\"printStackTrace：打印详细异常：堆栈追踪。获取异常类名和异常信息，以及异常出现在程序中的位置。返回值void。\"]},\"1342\":{\"h\":\"6. finally的使用\",\"t\":[\"finally是可选的；finally中声明的是一定会被执行的代码。即使catch中又出现异常了，try中有return语句，catch中有return语句，代码没有异常等。finally语句为异常处理提供一个统一的出口，使得在控制流转到程序的其它部分以前，能够对程序的状态作统一的管理。\",\"使用场景：像数据库连接、输入输出流、网络编程Socket等资源，JVM是不能自动的回收的，我们需要自己手动的进行资源的释放。此时的资源释放，就需要声明在finally中。即无论如何资源都会被释放。\"]},\"1343\":{\"h\":\"6.1 示例1：finally一定会被执行\",\"t\":[\"若无异常，执行结果为：finally 1\",\"若有异常，执行结果为：finally 2\",\"若finally中有return 3，执行结果为：finally 3 总结：finally中的代码总会执行，且会在return之前执行。\",\"public int method(){ try{ int[] arr = new int[10]; System.out.println(arr[10]);//角标越位异常 return 1; }catch(ArrayIndexOutOfBoundsException e){ e.printStrackTrace(); return 2; }finally{ System.out.println(\\\"finally\\\"); //return 3; } } \"]},\"1344\":{\"h\":\"6.2 示例2：资源的释放\",\"t\":[\" public void test2(){ FileInputStream fis = null; //初始化资源 try { File file = new File(\\\"hello1.txt\\\"); fis = new FileInputStream(file);//读取资源,可能读取失败 int data = fis.read(); //开始读取 while(data != -1){ System.out.print((char)data); data = fis.read(); } } catch (FileNotFoundException e) { //异常：文件打开失败 e.printStackTrace(); } catch (IOException e) { //异常：文件传输失败 e.printStackTrace(); }finally{ try { //finally里吗也可能有异常，所以要嵌套一个try...catch if(fis != null)//先判断资源是否打开 fis.close(); //在finally里面关闭资源 } catch (IOException e) { e.printStackTrace(); } } } \"]},\"1345\":{\"h\":\"7. 异常的嵌套\",\"t\":[\"try-catch-finally结构可以嵌套。\",\"catch和finally里面也可能会有异常。\"]},\"1346\":{\"h\":\"8. 注意事项\",\"t\":[\"catch捕获的顺序：catch中的异常类型如果没有子父类关系，则谁声明在上，谁声明在下无所谓。 catch中的异常类型如果满足子父类关系，则要求子类一定声明在父类的上面。否则，报错\",\"变量的范围：在try结构中声明的变量，在出了try结构以后，就不能再被调用\"]},\"1347\":{\"h\":\"9. 编译时异常和运行时异常的不同处理\",\"t\":[\"编译时异常：进行try...catch处理；将其延后成运行时异常 \",\"使用try-catch-finally处理编译时异常，使得程序在编译时就不再报错，但是运行时仍可能报错。相当于我们使用try-catch-finally将一个编译时可能出现的异常，延迟到运行时出现。针对于编译时异常，一定要考虑异常的处理。\",\"运行时异常：处理没有意义，不用try...catch进行处理。： \",\"开发中，由于运行时异常比较常见，所以我们通常就不针对运行时异常编写try-catch-finally了。\"]},\"1348\":{\"h\":\"3-4. trows\"},\"1349\":{\"h\":\"Ⅰ. throws\",\"t\":[\"如果一个方法(中的语句执行时)可能生成某种异常，但是并不能确定如何处理这种异常，则此方法应显示地声明抛出异常，表明该方法将不对这些异常进行处理，而由该方法的调用者负责处理。\",\"在方法声明中用throws语句可以声明抛出异常的列表，throws后面的异常类型可以是方法中产生的异常类型，也可以是它的父类 。\"]},\"1350\":{\"h\":\"1. throws介绍\",\"t\":[\"throws只是用来抛出异常的，将异常抛到代码的调用处，并不会处理异常，处理异常还是要在代码调用处使用try-catch结构。\",\"\\\"throws + 异常类型\\\"写在方法的声明处。指明此方法执行时，可能会抛出的异常类型。一旦当方法体执行时，出现异常，仍会在异常代码处生成一个异常类的对象，此对象满足throws后异常类型时，就会被抛出。异常代码后续的代码，就不再执行！\"]},\"1351\":{\"h\":\"2. 异常的抛出机制\",\"t\":[\"如果一个方法内抛出异常，该异常对象会被抛给调用者方法中处理。如果异常没有在调用者方法中处理，它继续被抛给这个调用方法的上层方法。这个过程将一直继续下去，直到异常被处理。\",\"如果一个异常回到main()方法，并且main()也不处理，则程序运行终止。\",\"3-4-1\"]},\"1352\":{\"h\":\"3. throws使用示例\",\"t\":[\"public class ExceptionTest2 { public static void main(String[] args){ //这里再抛就到虚拟机了，不能再抛了 try{ //这里开始处理异常 method2(); }catch(IOException e){ e.printStackTrace(); } } //因为IOException包含了FileNotFountException,所以可以合并成一个异常 //如果这两个异常的处理方式不一样，比如返回的错误码不一样，则不要合并。 public static void method2() throws IOException{ method1(); //异常又被抛出去了，所以这里不用处理异常 } //这里将异常抛出到调用处，因此不用进行处理。 public static void method1() throws FileNotFoundException,IOException{ File file = new File(\\\"hello1.txt\\\"); FileInputStream fis = new FileInputStream(file); int data = fis.read(); while(data != -1){ System.out.print((char)data); data = fis.read(); } fis.close(); System.out.println(\\\"hahaha!\\\"); } } \"]},\"1353\":{\"h\":\"4. try-catch-finally与throws的对比\",\"t\":[\"try-catch-finally:真正的将异常给处理掉了。\",\"throws的方式只是将异常抛给了方法的调用者。并没有真正将异常处理掉。\"]},\"1354\":{\"h\":\"5. 方法重写时的异常规则\",\"t\":[\"子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型。\",\"因为我们调用父类方法时要进行异常处理，而此时若使用多态，实际调用的是子类的方法，则必须能处理掉子类的异常，不然会报错。\"]},\"1355\":{\"h\":\"6. 开发中try-catch-finally和throws的选择\",\"t\":[\"如果父类中被重写的方法没有throws方式处理异常，则子类重写的方法也不能使用throws，意味着如果子类重写的方法中有异常，必须使用try-catch-finally方式处理。\",\"执行的方法a中，先后又调用了另外的几个方法，这几个方法是递进关系执行的。我们建议这几个方法使用throws的方式进行处理。而执行的方法a可以考虑使用try-catch-finally方式进行处理。\"]},\"1356\":{\"h\":\"7. 运行时异常的排查\",\"t\":[\"如果代码编译时没有异常，运行时出现了异常，比如空指针；那么应该对代码进行排查，优化，而不是进行try..catch处理。\"]},\"1357\":{\"h\":\"Ⅱ. 手动抛出异常\"},\"1358\":{\"h\":\"1. 关于异常的产生\",\"t\":[\"系统自动生成的异常对象\",\"手动生成一个异常对象，并抛出（throw）\"]},\"1359\":{\"h\":\"2. 手动抛出异常的意义\",\"t\":[\"异常是抛给调用者看的，调用者分为其他方法调用，或前端调用。有些异常是逻辑上的，需要我们自己手动抛出。抛出异常和返回一个特殊值，都能解决问题；可自行选择，抛出异常可以省掉很多if...else... 但是返回值更精准。\",\"如果代码存在逻辑上的问题，我们就需要抛出异常，告诉代码的调用者。\"]},\"1360\":{\"h\":\"3. 创建异常的语法\",\"t\":[\"由于是逻辑上的异常，需要我们自己new异常类，我们选择的异常类型有：\",\"Exception：编译异常（编译时会报错）\",\"RuntimeException：运行时异常（选他，不会报错）-->选这个\",\"throw new Exception(\\\"异常信息\\\"); throw new RuntimeException(\\\"异常信息\\\"); \"]},\"1361\":{\"h\":\"4. 示例\",\"t\":[\"自定义的异常也是可以throws到调用处的，比如抛出的是个编译时异常，就可以抛出到调用处进行处理。自定义异常中定义的异常信息，可以在调用处，使用异常类的getMessage方法获取。\",\"class Student{ private int id; //这里可以将异常信息再次throws到调用处 public void regist(int id) throws Exception { if(id > 0){ this.id = id; }else{ //手动抛出异常对象,运行时异常不会报编译时错误 throw new RuntimeException(\\\"您输入的数据非法！\\\"); //Exception会报编译时错误，可以将该异常throws到调用处 throw new Exception(\\\"您输入的数据非法\\\"); } } } public class StudentTest { public static void main(String[] args) { try { //处理throws来的的异常 Student s = new Student(); s.regist(-1001); System.out.println(s); } catch (Exception e) { System.out.println(e.getMessage()); } } } \"]},\"1362\":{\"h\":\"Ⅲ. 自定义异常类\"},\"1363\":{\"h\":\"1. 自定义异常类的创建说明\",\"t\":[\"一般地，用户自定义异常类都是RuntimeException的子类；\",\"自定义异常类通常需要编写几个重载的构造器。\",\"自定义异常需要提供serialVersionUID \",\"类的标识，随便定义，要是long类型，够长\",\"自定义的异常通过throw抛出。\",\"自定义异常最重要的是异常类的名字，当异常出现时，可以根据名字判断异常类型。\"]},\"1364\":{\"h\":\"2. 自定义异常类示例\",\"t\":[\"public class MyException extends Exception{ static final long serialVersionUID = -7034897193246939L; public MyException(){ } public MyException(String msg){ super(msg); } } \"]},\"1365\":{\"h\":\"3. 自定义异常类的总结\",\"t\":[\"直接继承RuntimeException即可，方法直接使用父类的。自定义异常类的意义在于异常类的名字，当异常出现时，可以根据名字判断异常类型。\"]},\"1366\":{\"h\":\"4-1. 枚举\"},\"1367\":{\"h\":\"Ⅰ. 枚举类\"},\"1368\":{\"h\":\"1. 什么是枚举类\",\"t\":[\"当类的对象是有限个，且确定的情况下，这个类就是枚举类，当需要定义一组常量时，强烈建议使用枚举类，例如：\",\"星期：Monday(星期一)、......、Sunday(星期天)\",\"性别：Man(男)、Woman(女)\",\"季节：Spring(春节)......Winter(冬天)\",\"支付方式：Cash（现金）、WeChatPay（微信）、Alipay(支付宝)、BankCard(银行卡)、CreditCard(信用卡)、就职状态：Busy、Free、Vocation、Dimission、\",\"订单状态：Nonpayment（未付款）、Paid（已付款）、Delivered（已发货）、Return（退货）、Checked（已确认）Fulfilled（已配货）、\",\"线程状态：创建、就绪、运行、阻塞、死亡\"]},\"1369\":{\"h\":\"2. 枚举类的特点\",\"t\":[\"一个类，他有固定的对象数量，且对象不可改变（final）这些对象是作为类的属性的，用的时候直接取即可。且该类不能再创建对象。\"]},\"1370\":{\"h\":\"3. 枚举类的实现\",\"t\":[\"JDK1.5之前：需要自定义枚举类\",\"JDK1.5新增：enum 关键字用于定义枚举类\"]},\"1371\":{\"h\":\"4. 自定义枚举类说明\",\"t\":[\"枚举动 类对象的属性不应允许被改动, 所以应该使用 private final 修饰\",\"枚举类的使用 private final 修饰的属性应该在构造器中为其赋值\",\"若枚举类显式的定义了带参数的构造器, 则在列出枚举值时也必须对应的传入参数\",\"如果枚举类中只有一个对象，则可以作为单例模式的实现方式。\"]},\"1372\":{\"h\":\"5. 示例：自定义枚举类\",\"t\":[\"创建细节：\",\"私有化类的构造器，保证不能在类的外部创建其对象\",\"在类的内部创建枚举类的实例。声明为：public static final\",\"对象如果有实例变量，应该声明为private final，并在构造器中初始化\"]},\"1373\":{\"h\":\"5.1 创建枚举类\",\"t\":[\"需求：创建一个季节枚举类，包含四季，属性为季节名和季节描述\",\"class Season{ //1.声明Season对象的属性:private final修饰 private final String seasonName; private final String seasonDesc; //2.私有化类的构造器,并给对象属性赋值 private Season(String seasonName,String seasonDesc){ this.seasonName = seasonName; this.seasonDesc = seasonDesc; } //3.提供当前枚举类的多个对象：public static final的 public static final Season SPRING = new Season(\\\"春\\\",\\\"交配季节\\\"); public static final Season SUMMER = new Season(\\\"夏\\\",\\\"好大雨\\\"); public static final Season AUTUMN = new Season(\\\"秋\\\",\\\"落叶\\\"); public static final Season WINTER = new Season(\\\"冬\\\",\\\"好大雪\\\"); //4.其他诉求：获取枚举类对象的属性 public String getSeasonName() { return seasonName; } public String getSeasonDesc() { return seasonDesc; } //5.toString，测试用 @Override public String toString() { return \\\"{\\\"+ seasonName + \\\":\\\" + seasonDesc + '}'; } } \"]},\"1374\":{\"h\":\"5.2 测试\",\"t\":[\"Season spring = Season.SPRING; System.out.println(spring.toString()); //{春:交配季节} System.out.println(spring.getSeasonName()); //春 System.out.println(spring.getSeasonDesc()); //交配季节 \"]},\"1375\":{\"h\":\"Ⅱ. enum\"},\"1376\":{\"h\":\"1. enum关键字\",\"t\":[\"enum关键字是替代class使用的，用来定义枚举类的。\",\"即enum也是用来修饰类的，被他修饰类就是枚举类。\"]},\"1377\":{\"h\":\"2. enum使用说明\",\"t\":[\"枚举类默认继承了 java.lang.Enum类，因此不能再继承其他类\",\"枚举类的构造器只能使用 private 权限修饰符\",\"枚举类的所有实例必须在枚举类中显式列出(, 分隔 ; 结尾)。列出的实例系统会自动添加 public static final 修饰\",\"必须在枚举类的第一行声明枚举类对象\"]},\"1378\":{\"h\":\"3. 自定义枚举类的步骤\",\"t\":[\"①提供枚举对象：一开始直接定义枚举对象，枚举对象如果有属性，就在括号内加属性。\",\"OBJNAME1, ... OBJNAME2; //OBJNAME1(\\\"OBJ\\\",\\\"yes\\\"), \",\"②可选：声明枚举对象的属性（如果有的话）\",\"③私有化类的构造器,并给对象属性赋值（如果有属性）\",\"④其他操作：其他方法\"]},\"1379\":{\"h\":\"4. Enum的主要方法\",\"t\":[\"Enum是所有枚举类的父类，方法直接用即可。\",\"values：返回枚举类型的对象数组。该方法可以很方便地遍历所有的枚举值。\",\"valueOf(String str)：可以把一个字符串转为对应的枚举类对象。要求字符串必须是枚举类对象的“名字”。如不是，会有运行时异常：IllegalArgumentException。\",\"toString()：返回当前枚举类对象常量的名称\"]},\"1380\":{\"h\":\"5. 实现接口的枚举类\",\"t\":[\"统一实现抽象方法：和普通类一样，重写抽象方法，无论哪个枚举对象调用，返回的内容都一样。\",\"分别实现抽象方法：若需要每个枚举值在调用实现的接口方法呈现出不同的行为方式,则可以让每个枚举值分别来实现该方法，在枚举值后面加{方法名{...}}\"]},\"1381\":{\"h\":\"6. enum使用示例\"},\"1382\":{\"h\":\"6.1 定义枚举类，并实现一个接口\",\"t\":[\"需求：定义四季，每个季节都有自己的名字\",\"package Basic;//和正常类一样，也属于某个包 interface show{ //定义一个接口 void showSeason(); } //enum和class一样可以实现接口，并需要重写接口中的方法 public enum Seasons implements show {、 //枚举类的对象必须创建在开头 SPRING(\\\"春天\\\"){ //括号里的参数是构造方法的参数 public void showInfo(){ //在枚举对象中可以单独重写接口中的方法 super.showSeason();//调用类中被重写的showInfo方法 System.out.println(\\\"春天是交配的季节\\\"); } }, //枚举对象间用逗号分割 SUMMER(\\\"夏天\\\"), AUTUMN(\\\"秋天\\\"), WINTER(\\\"春天\\\");//最后一个枚举对象以分号结束 private final String seasonName; //枚举类的private final 属性 //枚举类的私有化构造函数 private Seasons(String seasonName){ this.seasonName = seasonName; System.out.println(seasonName+\\\"来了\\\"); } //和普通类一样，枚举类中也可以定义普通方法 public void info(String s){ System.out.println(s+\\\"真好\\\"); } @Override//重写接口中定义的方法 public void showSeason() { System.out.println(\\\"春夏秋冬\\\"); } } \"]},\"1383\":{\"h\":\"6.2 使用枚举类，并测试枚举类的方法\",\"t\":[\"//获取一个Seasons对象：SPRING //控制台会输出：春天来了 夏天来了 秋天来了 冬天来了 Seasons spring = Seasons.SPRING; spring.toString(); //输出标识符代表的对象名：SPRING spring.info(\\\"今天\\\");//调用info方法,输出：今天真好 spring.showSeason(); //调用的是Spring重写的showSeason方法 \"]},\"1384\":{\"h\":\"4-2. 注解\"},\"1385\":{\"h\":\"Ⅰ. Annotation\"},\"1386\":{\"h\":\"1. 介绍\",\"t\":[\"从JDK5.0 开始, Java 增加了对元数据(MetaData) 的支持, 也就是Annotation(注解)。\"]},\"1387\":{\"h\":\"1.1 什么是Annotation\",\"t\":[\"Annotation其实就是代码里的特殊标记, 这些标记可以在编译, 类加载, 运行时被读取, 并执行相应的处理。\",\"通过使用Annotation, 程序员可以在不改变原有逻辑的情况下, 在源文件中嵌入一些补充信息。 \",\"代码分析工具、开发工具和部署工具可以通过这些补充信息进行验证或者进行部署。\",\"Annotation 可以像修饰符一样被使用, 可用于修饰包, 类, 构造器, 方法, 成员变量, 参数, 局部变量, 这些信息被保存在 Annotation\"]},\"1388\":{\"h\":\"1.2 注解的用途\",\"t\":[\"在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。\",\"在JavaEE/Android中注解占据了更重要的角色.\",\"未来的开发模式都是基于注解的，JPA是基于注解的，Spring2.5以上都是基于注解的，Hibernate3.x以后也是基于注解的，现在的Struts2有一部分也是基于注解的了，注解是一种趋势，一定程度上可以说：框架 = 注解 + 反射 + 设计模式。\"]},\"1389\":{\"h\":\"2. 注解的使用\",\"t\":[\"使用 Annotation 时要在其前面增加 @ 符号, 并把该 Annotation 当成一个修饰符使用。用于修饰它支持的程序元素。\",\"①用于文档注释：格式详见：基本语法->文档注释\",\"②在编译时进行格式检查 \",\"@Override：限制下面的方法为重写父类中的方法\",\"@Deprecated：标记所修饰的类、方法等已过时，有更好的选择\",\"@SuppressWarnings：抑制编译器警告，比如拼写检查\",\"③减少配置：运行时动态处理，得到注解信息，实现代替配置文件的功能； \",\"实现替代配置文件功能：常用于JavaWeb\",\"Servlet3.0提供了注解(annotation),使得不再需要在web.xml文件中进行Servlet的部署。\"]},\"1390\":{\"h\":\"3. 注解的分类\",\"t\":[\"JDK中内置了很多注解，我们也可以手动实现Annotation接口来创建自定义注解\",\"作用在代码的注解 \",\"@Override：限制下面的方法为重写父类中的方法\",\"@Deprecated：标记所修饰的类、方法等已过时，有更好的选择\",\"@SuppressWarnings：抑制编译器警告，比如拼写检查\",\"@SafeVarargs - Java 7 开始支持，忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告。\",\"@FunctionalInterface - Java 8 开始支持，标识一个匿名函数或函数式接口。\",\"元注解 \",\"@Retention - 标识这个注解怎么保存，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问\",\"@Documented - 标记这些注解是否包含在用户文档中。\",\"@Target - 标记这个注解应该是哪种 Java 成员。\",\"@Inherited - 标记这个注解是继承于哪个注解类(默认 注解并没有继承于任何子类)\",\"@Repeatable - Java 8 开始支持，标识某注解可以在同一个声明上使用多次。\",\"自定义注解 \",\"实现一些自定义的逻辑，比如JUnit框架中有个@Test注解，用来对方法进行测试\"]},\"1391\":{\"h\":\"Ⅱ. 自定义注解\"},\"1392\":{\"h\":\"1. 语法\",\"t\":[\"@元注解 public @interface 注解名称{ public 配置参数类型 配置参数名() default 默认值; ... //可以有多个属性 } \"]},\"1393\":{\"h\":\"2. 示例\",\"t\":[\"public @interface MyAnnotation{ String value() default \\\"hello\\\"; //特殊配置参数 double nums() default 9.99; } \"]},\"1394\":{\"h\":\"3. 语法解析\"},\"1395\":{\"h\":\"3.1 @interface：声明注解\",\"t\":[\"@interface是注解的关键字与class平级\",\"注解使用@interface关键字声明，自定义注解自动继承了java.lang.annotation.Annotation 接口。\",\"注意：它和我们通常的 implemented 实现接口的方法不同。Annotation 接口的实现细节都由编译器完成。通过 @interface 定义注解后，该注解不能继承其他的注解或接口。\"]},\"1396\":{\"h\":\"3.2 元注解\",\"t\":[\"用来修饰注解的注解为“元注解”，详见JDK中的元注解\"]},\"1397\":{\"h\":\"3.3 配置参数：本质是个常量\",\"t\":[\"注解类的成员，或称之为：注解的配置参数，以无参数方法的形式来声明，我们称之为配置参数。\",\"default：用来声明默认值（初始值）\"]},\"1398\":{\"h\":\"3.4 配置参数的类型\",\"t\":[\"所有基本类型；\",\"String；\",\"枚举类型；\",\"基本类型、String、Class以及枚举的数组\"]},\"1399\":{\"h\":\"4. 特殊配置参数\",\"t\":[\"没有属性：如果没有成员，那么注解仅起到标识的作用\",\"只有一个成员：如果注解只有一个成员，就使用value表示。且在使用注解时，value属性可以省略不写。\",\"有多个成员：如果有多个成员（且有成员没有默认值），那么Value名称是不能呢省略的， \",\"在使用注解时，所有没有默认值的成员，都必须显式的赋值。\"]},\"1400\":{\"h\":\"5. 使用注解\",\"t\":[\"语法：@注解类名(配置参数名=\\\"配置参数值\\\")\",\"注解中定义的成员如果含有配置参数，使用时就必须指明，除非有默认值。如果只有一个参数成员，且名称为value，可以省略“value=”\",\"使用位置：类上面、方法上面\",\"@MyAnnotation(value=\\\"hello\\\",nums=12.0) public class Person{ @MyAnnotation(nums=11.0) public void say(){ ... } } \"]},\"1401\":{\"h\":\"Ⅲ. 注解结构\"},\"1402\":{\"h\":\"1. 基本架构\",\"t\":[\"4-2-1\",\"1 个 Annotation 和 1 个 RetentionPolicy 关联。 \",\"可以理解为：每1个Annotation对象，都会有唯一的RetentionPolicy属性。\",\"1 个 Annotation 和 1~n 个 ElementType 关联。 \",\"可以理解为：对于每 1 个 Annotation 对象，可以有若干个 ElementType 属性\",\"Annotation 有许多实现类，包括：Deprecated, Documented, Inherited, Override 等等。 \",\"Annotation 的每一个实现类，都 \\\"和 1 个 RetentionPolicy 关联\\\" 并且 \\\" 和 1~n 个 ElementType 关联\\\"。\"]},\"1403\":{\"h\":\"2. Annotation组成部分\"},\"1404\":{\"h\":\"2.1 Annotation.java\",\"t\":[\"\\\"每 1 个 Annotation\\\" 都与 \\\"1 个 RetentionPolicy\\\" 关联，并且与 \\\"1～n 个 ElementType\\\" 关联。\",\"可以通俗的理解为：每 1 个 Annotation 对象，都会有唯一的 RetentionPolicy 属性；至于 ElementType 属性，则有 1~n 个。\",\"package java.lang.annotation; public interface Annotation{ //Annotation接口 boolean equals(Object obj); int hashCode(); String toString(); Class<? extends Annotation> annotationType(); } \"]},\"1405\":{\"h\":\"2.2 ElementType.java\",\"t\":[\"ElementType 是 Enum 枚举类型，它用来指定 Annotation 的类型。\",\"\\\"每 1 个 Annotation\\\" 都与 \\\"1～n 个 ElementType\\\" 关联。当 Annotation 与某个 ElementType 关联时，就意味着：Annotation有了某种用途。例如，若一个 Annotation 对象是 METHOD 类型，则该 Annotation 只能用来修饰方法。\",\"package java.lang.annotation; public enum ElementType { TYPE, /* 类、接口（包括注释类型）或枚举声明 */ FIELD, /* 字段声明（包括枚举常量） */ METHOD, /* 方法声明 */ PARAMETER, /* 参数声明 */ CONSTRUCTOR, /* 构造方法声明 */ LOCAL_VARIABLE, /* 局部变量声明 */ ANNOTATION_TYPE, /* 注释类型声明 */ PACKAGE /* 包声明 */ } \"]},\"1406\":{\"h\":\"2.3 RetentionPolicy.java\",\"t\":[\"RetentionPolicy 是 Enum 枚举类型，它用来指定 Annotation 的策略。通俗点说，就是不同 RetentionPolicy 类型的 Annotation 的作用域不同。\\\"每 1 个 Annotation\\\" 都与 \\\"1 个 RetentionPolicy\\\" 关联。\",\"SOURCE：Annotation 仅存在于编译器处理期间，编译器处理完之后，该 Annotation 就没用了。 \",\"例如：override，当它修饰一个方法的时候，就意味着该方法覆盖父类的方法；并且在编译期间会进行语法检查！编译器处理完后，\\\"@Override\\\" 就没有任何作用了。\",\"CLASS：编译器将 Annotation 存储于类对应的 .class 文件中，它是 Annotation 的默认行为。\",\"RUNTIME：编译器将 Annotation 存储于 class 文件中，并且可由JVM读入。\",\"package java.lang.annotation; public enum RetentionPolicy { SOURCE, /* Annotation信息仅存在于编译器处理期间，编译器处理完之后就没有该Annotation信息了 */ CLASS, /* 编译器将Annotation存储于类对应的.class文件中。默认行为 */ RUNTIME /* 编译器将Annotation存储于class文件中，并且可由JVM读入 */ } \"]},\"1407\":{\"h\":\"Ⅳ. 元注解\"},\"1408\":{\"h\":\"1. 元注解说明\",\"t\":[\"JDK 的元注解用于修饰其他 Annotation 定义，JDK5.0提供了4个标准的meta-annotation类型，分别是：\",\"Retention：指定所修饰的 Annotation 的生命周期。\",\"Target：标记这个注解应该是哪种 Java 成员。\",\"Documented：标记这些注解是否包含在用户文档中。\",\"Inherited：标记这个注解是继承于哪个注解类(默认 注解并没有继承于任何子类)\"]},\"1409\":{\"h\":\"2. @Retention\",\"t\":[\"指定所修饰的 Annotation 的生命周期。标识这个注解怎么保存，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问。\",\"RetentionPolicy 是 Annotation 的策略属性，而 @Retention 的作用，就是指定 Annotation 的策略属性。\",\"@Retention(RetentionPolicy.RUNTIME) public @interface MyAnnotation{...} \"]},\"1410\":{\"h\":\"2.1 使用说明\",\"t\":[\"使用@Rentention 时必须为该 value 成员变量指定值（枚举类型）\"]},\"1411\":{\"h\":\"2.2 Annotation的生命周期（成员变量的值）\",\"t\":[\"RetentionPolicy.SOURCE：在源文件中有效（即源java文件保留），编译器直接丢弃这种策略的注释\",\"RetentionPolicy.CLASS:在class文件中有效（即class保留） ， 当运行 Java 程序时, JVM不会保留注解。 【默认值】\",\"RetentionPolicy.RUNTIME:在运行时有效（即运行时保留），当运行 Java 程序时, JVM会保留注释。程序可以通过反射获取注释。\"]},\"1412\":{\"h\":\"3. @Target\",\"t\":[\"ElementType 是 Annotation 的类型属性。而 @Target 的作用，就是来指定 Annotation 的类型属性。\",\"用于指定被修饰的 Annotation 能用于修饰哪些程序元素，@Target 也包含一个名为 value 的成员变量，可以取多个枚举值。\",\"@Target({TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE,TYPE_PARAMETER,TYPE_USE}) public @interface MyAnnotation{...} \"]},\"1413\":{\"h\":\"3.1 取值\",\"t\":[\"ElementType.TYPE：只能用来标注 类、接口、枚举\",\"ElementType.FIELD：只能用来标注 字段声明\",\"ElementType.METHOD：只能用来标注 方法\",\"ElementType.PARAMETER：只能用来标注 参数\",\"ElementType.CONSTRUCTOR：只能用来标注 构造方法\",\"ElementType.LOCAL_VARIABLE：只能用来标注 局部变量\"]},\"1414\":{\"h\":\"3.2 注意\",\"t\":[\"若没有指定@Target元注解，那么所定义的注解可以用于任何地方。\"]},\"1415\":{\"h\":\"4. @Documented【不常用】\",\"t\":[\"用于指定被该元 Annotation 修饰的 Annotation类将被javadoc 工具提取成文档。默认情况下，javadoc是不包括注解的。\",\"@Documented Retention(RetentionPolicy.RUNTIME) public @interface MyAnnotation{...} \",\"定义为Documented的注解必须设置Retention值为RUNTIME\"]},\"1416\":{\"h\":\"5. @Inherited【不常用】\",\"t\":[\"@Inherited public @interface MyAnnotation{...} \",\"被它修饰的 Annotation 将具有 继承性。如果某个类使用了被@Inherited 修饰的 Annotation, 则其子类将自动具有该注解。\",\"比如：如果把标有@Inherited注解的自定义的注解标注在类级别上，子类则可以继承父类类级别的注解\"]},\"1417\":{\"h\":\"Ⅴ. 注解新特性\",\"t\":[\"Java 8对注解处理提供了两点改进：可重复的注解及可用于类型的注解。此外，反射也得到了加强，在Java8中能够得到方法参数的名称。这会简化标注在方法参数上的注解。\"]},\"1418\":{\"h\":\"1. 可重复注解\",\"t\":[\"即，同一个注解可以重复用多次。\",\"@MyAnnotation(value=\\\"hi\\\") @MyAnnotation(value=\\\"abc\\\") class Person{...} \"]},\"1419\":{\"h\":\"1.1 1.8之前的重复注解\",\"t\":[\"在1.8之前，不支持重复注解，同一个注解，多次使用，会报错，编译不通过。\",\"如果想使用重复注解，就要吧注解的成员变量写成数组的形式\",\"//注解定义 public @interface MyAnnotations { MyAnnotation[] value(); //定义成数组的形式 } //注解使用 @MyAnnotations({@MyAnnotation(value=\\\"hi\\\"),@MyAnnotation(value=\\\"hi\\\")}) class Person{...} \"]},\"1420\":{\"h\":\"1.2 1.8之后的重复注解\",\"t\":[\"步骤，以MyAnnotation为例：\",\"创建MyAnnotations注解，如上，定义数组形式的成员变量\",\"在MyAnnotation注解上使用元注解@Repeatable，值为MyAnnotations.class \",\"这样这两个注解就被关联起来了。\",\"注意： MyAnnotation的Target和Retention等元注解与MyAnnotations相同。\",\"@Repeatable(MyAnnotations.class) //其他元注解要相同 \"]},\"1421\":{\"h\":\"2. 可用于类型的注解\",\"t\":[\"JDK1.8之后，关于元注解@Target的参数类型ElementType枚举值多了两个：\",\"TYPE_PARAMETER\",\"TYPE_USE\",\"@Target({...,TYPE_PARAMETER,TYPE_USE});//要加到@Target中 \"]},\"1422\":{\"h\":\"2.1 TYPE_PARAMETER\",\"t\":[\"表示该注解能写在类型变量的声明语句中（如：泛型声明）\",\"public class TestTypeDefine<@TypeDefine() U> {...} public static <@MyAnnotation T> void method(T t) {...} \"]},\"1423\":{\"h\":\"2.2 TYPE_USE\",\"t\":[\"表示该注解能写在使用类型的任何语句中。\",\"AnnotationTest<@MyAnnotation String> t = null; int a = (@MyAnnotation int) 2L; \"]},\"1424\":{\"h\":\"Ⅵ. 常用注解解析\"},\"1425\":{\"h\":\"1. Deprecated\",\"t\":[\"@Deprecated 所标注内容，不再被建议使用。若某个方法被 @Deprecated 标注，则该方法不再被建议使用。如果有开发人员试图使用或重写被 @Deprecated 标示的方法，编译器会给相应的提示信息。\",\"@Documented @Retention(RetentionPolicy.RUNTIME) public @interface Deprecated { } \"]},\"1426\":{\"h\":\"2. @Inherited（元注解之一）\",\"t\":[\"@Inherited 的含义是，它所标注的Annotation将具有继承性。\",\"@Documented @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.ANNOTATION_TYPE) public @interface Inherited { } \"]},\"1427\":{\"h\":\"3. @SuppressWarnings\",\"t\":[\"SuppressWarnings 的作用是，让编译器对\\\"它所标注的内容\\\"的某些警告保持静默。\",\"@Target({TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE}) @Retention(RetentionPolicy.SOURCE) public @interface SuppressWarnings { String[] value(); } \"]},\"1428\":{\"h\":\"3.1 String[] value();\",\"t\":[\"SuppressWarnings 能指定参数，String类型的数组\"]},\"1429\":{\"h\":\"3.2 使用举例\",\"t\":[\"如下：\\\"SuppressWarnings 不再建议使用警告\\\"和\\\"未检查的转换时的警告\\\"保持沉默。\",\"@SuppressWarnings(value={\\\"deprecation\\\", \\\"unchecked\\\"})\\\" \"]},\"1430\":{\"h\":\"3.3 取值\",\"t\":[\"deprecation：使用了不赞成使用的类或方法时的警告\",\"unchecked：执行了未检查的转换时的警告，例如当使用集合时没有用泛型 (Generics) 来指定集合保存的类型。\",\"fallthrough：当 Switch 程序块直接通往下一种情况而没有 Break 时的警告。\",\"path：在类路径、源文件路径等中有不存在的路径时的警告。\",\"serial：当在可序列化的类上缺少 serialVersionUID 定义时的警告。\",\"finally：任何 finally 子句不能正常完成时的警告。\",\"all：关于以上所有情况的警告。\"]},\"1431\":{\"h\":\"Ⅶ. 反射获取注解信息\",\"t\":[\"在反射的 Class, Method, Field 等函数中，有许多于 Annotation 相关的接口。这也意味着，我们可以在反射中解析并使用 Annotation。\"]},\"1432\":{\"h\":\"1. 使用示例\",\"t\":[\"import java.lang.annotation.Annotation; import java.lang.annotation.Target; import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Inherited; import java.lang.reflect.Method; /** * Annotation在反射函数中的使用示例 */ @Retention(RetentionPolicy.RUNTIME) @interface MyAnnotation { String[] value() default \\\"unknown\\\"; } /** * Person类。它会使用MyAnnotation注解。 */ class Person { /** * empty()方法同时被 \\\"@Deprecated\\\" 和 \\\"@MyAnnotation(value={\\\"a\\\",\\\"b\\\"})\\\"所标注 * (01) @Deprecated，意味着empty()方法，不再被建议使用 * (02) @MyAnnotation, 意味着empty() 方法对应的MyAnnotation的value值 是默认值\\\"unknown */ @MyAnnotation @Deprecated public void empty(){ System.out.println(\\\"\\\\nempty\\\"); } /** * sombody() 被 @MyAnnotation(value={\\\"girl\\\",\\\"boy\\\"}) 所标注， * @MyAnnotation(value={\\\"girl\\\",\\\"boy\\\"}), 意味着MyAnnotation的value值 是{\\\"girl\\\",\\\"boy\\\"} */ @MyAnnotation(value={\\\"girl\\\",\\\"boy\\\"}) public void somebody(String name, int age){ System.out.println(\\\"\\\\nsomebody: \\\"+name+\\\", \\\"+age); } } public class AnnotationTest { public static void main(String[] args) throws Exception { // 新建Person Person person = new Person(); // 获取Person的Class实例 Class<Person> c = Person.class; // 获取 somebody() 方法的Method实例 Method mSomebody = c.getMethod(\\\"somebody\\\", new Class[]{String.class, int.class}); // 执行该方法 mSomebody.invoke(person, new Object[]{\\\"lily\\\", 18}); iteratorAnnotations(mSomebody); // 获取 somebody() 方法的Method实例 Method mEmpty = c.getMethod(\\\"empty\\\", new Class[]{}); // 执行该方法 mEmpty.invoke(person, new Object[]{}); iteratorAnnotations(mEmpty); } public static void iteratorAnnotations(Method method) { // 判断 somebody() 方法是否包含MyAnnotation注解 if(method.isAnnotationPresent(MyAnnotation.class)){ // 获取该方法的MyAnnotation注解实例 MyAnnotation myAnnotation = method.getAnnotation(MyAnnotation.class); // 获取 myAnnotation的值，并打印出来 String[] values = myAnnotation.value(); for (String str:values) System.out.printf(str+\\\", \\\"); System.out.println(); } // 获取方法上的所有注解，并打印出来 Annotation[] annotations = method.getAnnotations(); for(Annotation annotation : annotations){ System.out.println(annotation); } } } \"]},\"1433\":{\"h\":\"5-1. 概念\"},\"1434\":{\"h\":\"Ⅰ. 基本概念\"},\"1435\":{\"h\":\"1. Program：程序的概念\",\"t\":[\"程序(program)是为完成特定任务、用某种语言编写的一组指令的集合。即指一段静态的代码，静态对象。\",\"程序和软件的区别\",\"软件是为了完成特定的功能，解决特定的问题而用计算机语言编写的命令序列集合，可以理解为应用程序的集合。而应用程序是软件的一个组成部分，它是软件的必要元素。简单来说，“软件=程序+文档=数据结构+算法+文档”。\",\"程序和软件的区别是，软件是为了完成特定的功能，解决特定的问题而用计算机语言编写的命令序列集合，可以理解为应用程序的集合。而应用程序是软件的一个组成部分，它是软件的必要元素。\"]},\"1436\":{\"h\":\"2. Process：进程的概念\",\"t\":[\"进程(process)是程序的一次执行过程，或是正在运行的一个程序。是一个动态的过程：有它自身的产生、存在和消亡的过程。——生命周期。\",\"程序是静态的，进程是动态的；\",\"进程作为资源分配的单位，系统在运行时会为每个进程分配不同的内存区域\",\"每个进程之间是独立的，每个进程均运行在其专用的且受保护的内存（即进程之间不方便通信）\"]},\"1437\":{\"h\":\"2.1 程序与进程的区别\",\"t\":[\"程序是静态的，进程是动态的：程序是存储在某种介质上的二进制代码，进程对应了程序的执行过程，系统不需要为一个不执行的程序创建进程，一旦进程被创建，就处于不断变化的动态过程中，对应了一个不断变化的上下文环境。\"]},\"1438\":{\"h\":\"2.2 程序与进程的联系\",\"t\":[\"一个程序可以对应多个进程\"]},\"1439\":{\"h\":\"3. Thread：线程的概念\",\"t\":[\"进程可进一步细化为线程，是一个程序内部的一条执行路径。若一个进程同一时间 并行执行多个线程，就是支持多线程的;\",\"线程作为调度和执行的单位，每个线程拥有独立的运行栈和程序计数器(pc)，线程切换的开销小;\",\"一个进程中的多个线程共享相同的内存单元/内存地址空间->它们从同一堆中分配对象，可以访问相同的变量和对象。这就使得线程间通信更简便、高效。但多个线程操作共享的系统资源可能就会带来安全的隐患。\",\"程序启动会默认开启一条线程，这条线程被称为主线程或 UI 线程\"]},\"1440\":{\"h\":\"4. 进程与线程\",\"t\":[\"一款软件具有某些功能，任一一个功能的执行就是一个进程（同一功能多次开启也算加了一个进程）。每个进程需要多个任务协同完成，可以创建多个线程来执行这些不同的任务。\",\"5-1-1\",\"资源拥有：同一进程内的线程共享本进程的资源如内存、I/O、cpu等，但是进程之间的资源是独立的。\",\"一个进程崩溃后，在保护模式下不会对其他进程产生影响，但是一个线程崩溃整个进程都死掉。所以多进程要比多线程健壮。\",\"一个进程至少有一个线程(主)。是进程内的一个独立执行单元\",\"程序是在某个进程中的某个线程执行的。\"]},\"1441\":{\"h\":\"5. 单核CPU和多核CPU\",\"t\":[\"单核CPU，其实是一种假的多线程，因为在一个时间单元内，也只能执行一个线程的任务。但是因为CPU时间单元特别短（快速在各个线程间切换），因此感觉不出来。\",\"如果是多核的话，才能更好的发挥多线程的效率。（现在的服务器都是多核的）。\",\"一个Java应用程序java.exe，其实至少有三个线程：main()主线程，gc()垃圾回收线程，异常处理线程。当然如果发生异常，会影响主线程。\"]},\"1442\":{\"h\":\"6. 并行与并发\",\"t\":[\"并行：多个CPU同时执行多个任务。比如：多个人同时做不同的事。\",\"并发：一个CPU(采用时间片)同时执行多个任务。比如：秒杀、多个人做同一件事。\"]},\"1443\":{\"h\":\"Ⅱ. 多线程的意义\"},\"1444\":{\"h\":\"背景\",\"t\":[\"以单核CPU为例，只使用单个线程先后完成多个任务（调用多个方法），肯定比用多个线程来完成用的时间更短（省去了切换线程），为何仍需多线程呢？\",\"例如：我们复制文件（程序：文件复制开启），复制完一个，再复制下一个是要比同时复制两个文件要快的（单核CPU省去了切换）。假如是4核CPU，只能同时复制4个文件，第5个文件就需要排队了。拿还要多线程干什么。\"]},\"1445\":{\"h\":\"1. 多线程程序的优点\",\"t\":[\"提高应用程序的响应。对图形化界面更有意义，可增强用户体验。 \",\"用户同时在电脑手机上干多件事\",\"提高计算机系统CPU的利用率：CPU的切换效率很高，很多时候无法利用完CPU的性能\",\"改善程序结构：将既长又复杂的进程分为多个线程，独立运行，利于理解和修改\"]},\"1446\":{\"h\":\"2. 何时需要多线程\",\"t\":[\"程序需要同时执行两个或多个任务。\",\"程序需要实现一些需要等待的任务时 \",\"比如：下滑显示新的评论，需要三个功能：加载评论内容、加载头像、页面上滑，如果用单线程做，就会按顺序加载这些内容，如果图片没加载出来就无法继续向上滑动，软件就会显得很卡。多线程，就可以解决该问题。滑动和加载图片分开。\",\"需要一些后台运行的程序时：比如Java需要后台一直运行GC垃圾回收。\"]},\"1447\":{\"h\":\"Ⅲ. 扩展：内存\"},\"1448\":{\"h\":\"1. 数据\",\"t\":[\"存在于内存中可读，可操纵的东西，一切皆数据，函数也是数据。\",\"内存存在的意义，就是对数据进行操作，（硬盘才是储存数据的）。\"]},\"1449\":{\"h\":\"2. 内存\"},\"1450\":{\"h\":\"2.1 内存条的空间\",\"t\":[\"内存条通电后产生的存储空间(临时的)就是内存，内存是临时性的储存，是有生命周期的。\"]},\"1451\":{\"h\":\"2.2 内存的生命周期\",\"t\":[\"内存条==》通电==》产生内存空间==》储存数据==》断电==》内存空间和数据都消失\"]},\"1452\":{\"h\":\"2.3 内存储存的数据类型\",\"t\":[\"数据：直接储存数据【普通类型】\",\"内存地址：储存其他内存块的地址【引用类型】。\"]},\"1453\":{\"h\":\"2.4 内存空间的基本分类\",\"t\":[\"栈：全局变量和局部变量的值和对象的地址储存在这里。\",\"堆：对象储存在这里。\"]},\"1454\":{\"h\":\"3. 变量\",\"t\":[\"值的标识符，该标识符是可变的，就称为变量，一个变量对应一小块内存，他的值保存在内存中，即内存中的数据==变量的值\"]},\"1455\":{\"h\":\"4. 变量名（标识符）\",\"t\":[\"内存中储存的是变量的值，变量的名是不会储存的，变量的名可以理解为内存的地址标识。\",\"变量名是给我们程序员操作内存来使用的。比如我们定义了一个全局的int a;那么编译器都为我们做了什么呢？它会为程序预留4个字节的空间（假设在32位平台），并把我们的变量名“a”保存进符号表，并用这个符号表的索引对应实际的空间。这是写编译器需要做的，我们需要建立符号表。变量名编译后，变成一个内存地址，这个内存地址一般是直接存在于代码段中\"]},\"1456\":{\"h\":\"5. 内存、数据、变量间的关系\",\"t\":[\"内存是容器, 用来存储不同数据；\",\"变量是内存的标识, 通过变量我们可以操作(读/写)内存中的数据；\"]},\"1457\":{\"h\":\"6. 垃圾回收\",\"t\":[\"当一个对象，没有任何的变量或属性对它进行引用，此时我们将永远无法操作该对象，此时这种对象就是一个垃圾。这种对象过多，会占用大量的内存空间，导致程序运行过慢，所以需要进行清理。\"]},\"1458\":{\"h\":\"7. 内存溢出和泄露\",\"t\":[\"溢出：一种程序运行出现的错误，当程序运行需要的内存超过了剩余的内存时, 就出抛出内存溢出的错误。\",\"泄露：占用的内存没有及时释放，内存泄露积累多了就容易导致内存溢出。\"]},\"1459\":{\"h\":\"5-2. 使用多线程\"},\"1460\":{\"h\":\"Ⅰ. Java的多线程\"},\"1461\":{\"h\":\"1. 概述\",\"t\":[\"在java里，一条线顺序执行叫一个线程，并列执行的才是多线程。\"]},\"1462\":{\"h\":\"2. API中创建线程的方式\",\"t\":[\"JDK1.5之前创建新执行线程有两种方法： \",\"①继承Thread类的方式\",\"②实现Runnable接口的方式\",\"在JDK5.0后新增了一种 \",\"③实现Callable接口\",\"④线程池（常用）\"]},\"1463\":{\"h\":\"3. 线程的分类\",\"t\":[\"Java中的线程分为两类：一种是 守护线程，一种是 用户线程。\",\"它们在几乎每个方面都是相同的，唯一的区别是判断JVM何时离开。\",\"护线程是用来服务用户线程的，通过在start()方法前调用thread.setDaemon(true)可以把一个用户线程变成一个守护线程。\",\"Java垃圾回收就是一个典型的守护线程。\",\"若JVM中都是守护线程，当前JVM将退出。\"]},\"1464\":{\"h\":\"Ⅱ. 继承Thred类\",\"t\":[\"创建多线程的方式之一：继承方式，通过继承Thread类\"]},\"1465\":{\"h\":\"说明\",\"t\":[\"Java语言的JVM可以通过java.lang.Thread类来实现多线程。\",\"main线程：java的入口是main方法，main方法就是java程序的主线程，又叫main线程\",\"子线程：我们用Thread类创建的其他线程，统称为子线程。\"]},\"1466\":{\"h\":\"1. Thread类介绍\"},\"1467\":{\"h\":\"1.1 Thread类：多线程类\",\"t\":[\"Thread类，用来创建和执行多线程。\",\"我们通过实例化Thread类的子类对象来创建多线程。\"]},\"1468\":{\"h\":\"1.2 构造器\",\"t\":[\"前两个构造器是继承Thread类创建多线程用的，后两个构造器是利用Runable接口创建多线程用的。\",\"Thread() ：创建新的Thread对象\",\"Thread(String threadname)：创建线程并指定线程实例名\",\"Thread(Runnable target) ：指定创建线程的目标对象，它实现了Runnable接口中的run方法\",\"Thread(Runnable target, String name) ：创建新的Thread对象\"]},\"1469\":{\"h\":\"1.3 run方法：线程体\",\"t\":[\"run方法是该线程操作的入口，需要将此线程的操作声明在run方法中。\",\"每个线程都是通过某个特定Thread对象的run()方法来完成操作的，经常把run()方法的主体称为线程体\"]},\"1470\":{\"h\":\"1.4 start方法：开启线程\",\"t\":[\"通过Thread类的对象调用该方法，用来启动线程。该方法会启动对象对应的线程，并调用对象中的run方法。\",\"注意：通过该Thread对象的start()方法来启动这个线程，而非直接调用run()\"]},\"1471\":{\"h\":\"2. 创建多线程的步骤\",\"t\":[\"5-2-1\",\"创建一个继承于Thread类的子类\",\"子类重写Thread类的run() --> 将此线程执行的操作声明在run()中\",\"创建Thread类的子类的对象，即创建线程对象\",\"通过此对象调用start()：启动创建的线程，自动调用run方法\"]},\"1472\":{\"h\":\"3. 创建多线程示例\",\"t\":[\"要求：使用三个线程，每个线程都遍历1~100间的偶数。\",\"1.//创建一个继承于Thread类的子类 class MyThread extends Thread{ 2.//重写Thread类的run方法：在里面放入我们要执行的代码 public void run() { for (int i = 0; i<100;i++){ if(i%2 == 0){ System.out.println(Thread.currentThread().getName()+\\\"***\\\"+i); } } } } public class ThreadTest { public static void main(String[] args) { 3.//创建Thread类的子类的对象(创建子线程对象) MyThread m1 = new MyThread(); 4.//调用start方法：启动当前线程;调用当前线程的run(); m1.start(); //m1.start(); //m1对象不能重复调用start，将抛出异常 // m1.run(); //没有开启线程，只是在main线程调用了一个普通的run方法 //这个是main线程的遍历代码 for (int i = 0; i<100;i++){ if(i%2 == 0){ System.out.println(Thread.currentThread().getName()+\\\"***\\\"+i); } } //再次创建一个Thread类的子类对象(再次创建一个子线程对象)，并调用start MyThread m2 = new MyThread(); m2.start(); } } \"]},\"1473\":{\"h\":\"3.1 备注\",\"t\":[\"Thread.currentThread().getName()用来返回当前线程的实例名。\",\"主线程默认名是 main。\",\"子线程默认名是 Thread-0（0~N）\"]},\"1474\":{\"h\":\"3.2 执行结果\",\"t\":[\"main***i、Thread***i、Thread***i 交替遍历，没有固定的先后顺序。\",\"这说明，这三个遍历是并列的，有三个线程在执行遍历代码。\",\"5-2-2\"]},\"1475\":{\"h\":\"4. 注意事项\"},\"1476\":{\"h\":\"4.1 不能通过调用run开始子线程\",\"t\":[\"通过直接调用run()不能开启子线程，只是普通的在main线程中调用一个方法。 开启子线程必须使用start()，让start方法去调用run。\",\"run()方法由JVM调用，什么时候调用，执行的过程控制都有操作系统的CPU 调度决定。\"]},\"1477\":{\"h\":\"4.2 同一个Thread类的对象不能重复调用start\",\"t\":[\"一个线程对象只能调用一次start()方法启动，开启一个子线程。\",\"同一个线程对象重复调用start方法会抛出异常（IllegalThreadStateException异常）。\",\"如果想再次开启一个线程，需要再次创建一个线程对象（这些对象可以属于同一个Thread类的子类）。\"]},\"1478\":{\"h\":\"Ⅲ. Thread常用方法\"},\"1479\":{\"h\":\"方法列表\",\"t\":[\"详见Thread的API\",\"start()：启动当前线程；调用当前线程的run()\",\"run()：通常需要重写Thread类中的此方法，将创建的线程要执行的操作声明在此方法中。\",\"Thread.curretnThread()：【static】返回执行当前代码的线程 \",\"在Thread子类中就是this，通常用于主线程和Runnable实现类\",\"getName()：获取当前线程的名字（需要先获取执行当前代码的线程）\",\"setName()：设置当前线程的名字（需要先获取执行当前代码的线程）\",\"yield():【static】释放当前cpu的执行权\",\"join():在线程a中调用线程b的join(),此时线程a就进入阻塞状态，直到线程b完全执行完以后，线程a才结束阻塞状态。\",\"sleep(long millitime)：【static】让当前线程“睡眠”指定的millitime毫秒。在指定的millitime毫秒时间内，当前线程是阻塞状态。\",\"isAlive():判断当前线程是否存活\",\"stop():已过时。当执行此方法时，强制结束当前线程。\"]},\"1480\":{\"h\":\"1. 线程名\",\"t\":[\"每个线程都有自己的名字，线程名是个静态属性，可以使用get、set方法访问，也可以使用构造函数初始化。\",\"默认的线程名为：主线程：main；子线程：Thread-0（0~n）\",\"public class ThreadMethodTest { public static void main(String[] args) { HelloThread ht1 = new HelloThread(\\\"线程1\\\");//可以通过构造方法设置name ht1.setName(\\\"work one\\\"); //要在start前设置Name ht1.start(); //通过方法获取主线程，并设置线程名 Thread.currentThread().setName(\\\"主线程\\\"); } } class HelloThread extends Thread{ public HelloThread(String s){ super(s); } @Override public void run() { //获取当前线程，并获取线程名 System.out.println(Thread.currentThread().getName()+\\\":HelloThread\\\"); } } \"]},\"1481\":{\"h\":\"2. 线程执行控制\",\"t\":[\"public class ThreadMethodTest { public static void main(String[] args) { HelloThread ht1 = new HelloThread(); ht1.start(); for(int i = 0;i<10;i++){ System.out.println(i); if(i == 5){ try { ht1.join(); //当i==5时，先执行ht1进程，该进程执行完，再接着执行main进程 } catch (InterruptedException e) { e.printStackTrace(); } } } //判断main进程是否还在激活状态：true System.out.println(Thread.currentThread().isAlive()); } } class HelloThread extends Thread{ @Override public void run() { for(int i = 0; i < 100; i++){ System.out.println(i); if(i == 10){ Thread.yield(); //当i==10时，释放本次的执行权 } if(i == 20){ try { Thread.sleep(2000); //当i==20时，阻塞当前进程2秒钟 } catch (InterruptedException e) { e.printStackTrace(); } } } } } \",\"yield：释放当次执行权 \",\"CPU是来回切换执行线程的，执行该方法，会释放本次获得的执行权，然后重新加入CPU分配的队列。若队列中没有同优先级的线程，忽略此方法\",\"join：线程插队 \",\"在线程a中调用线程b的join(),此时线程a就进入阻塞状态，优先执行线程b，直到线程b执行完，线程a，才重新进入CPU分配线程的队列。\",\"该方法会抛异常，需要try...catch\",\"sleep：睡眠线程(指定时间:毫秒) \",\"让当前线程睡眠（暂停、阻塞）指定的时间。然后再重新加入CPU分配的队列。\",\"该方法会抛InterruptedException异常，需要try...catch\",\"stop：结束当前线程；【API明确，该方法已不推荐使用】\",\"isAlive：判断当前线程是否存活（执行完就死了）\"]},\"1482\":{\"h\":\"Ⅳ. 线程的调度\"},\"1483\":{\"h\":\"1. CPU的调度策略\"},\"1484\":{\"h\":\"1.1 时间片\",\"t\":[\"5-2-3\"]},\"1485\":{\"h\":\"1.2 抢占式\",\"t\":[\"高优先级的线程抢占CPU\"]},\"1486\":{\"h\":\"2. Java的调度方法\",\"t\":[\"同优先级线程组成先进先出队列（先到先服务），使用时间片策略；对高优先级，使用优先调度的抢占式策略\"]},\"1487\":{\"h\":\"3. 线程的优先级\",\"t\":[\"优先级为1~10。\",\"MAX_PRIORITY：10\",\"MIN _PRIORITY：1\",\"NORM_PRIORITY：5 -->默认优先级\",\"高优先级的线程要抢占低优先级线程cpu的执行权。但是只是从概率上讲，高优先级的线程高概率的情况下被执行。并不意味着只有当高优先级的线程执行完以后，低优先级的线程才执行。\",\"查看线程的优先级 getPriority() ：返回线程优先值，返回的是int\",\"修改线程的优先级 setPriority(int newPriority) ：改变线程的优先级，参数是常量或1~10\"]},\"1488\":{\"h\":\"4. 注意事项\",\"t\":[\"线程创建时继承父线程的优先级\",\"低优先级只是获得调度的概率低，并非一定是在高优先级线程之后才被调用\"]},\"1489\":{\"h\":\"5. 线程调度示例\",\"t\":[\"效果：两个线程无序交替执行，高优先级的线程被优先执行。\",\"public class ThreadMethodTest { public static void main(String[] args) { HelloThread ht1 = new HelloThread(); //获得线程的优先级，int System.out.println(\\\"线程的默认优先级为：\\\"+ht1.getPriority());//5 //设置线程的优先级 ht1.setPriority(10); System.out.println(\\\"线程的优先级被修改为：\\\"+ht1.getPriority());//10 ht1.start(); for(int i = 0;i<50;i++){ System.out.println(Thread.currentThread().getName()+\\\"***\\\"+i); } } } class HelloThread extends Thread{ @Override public void run() { for(int i = 0; i < 50; i++){ System.out.println(getName()+\\\"***\\\"+i); } } } \"]},\"1490\":{\"h\":\"Ⅴ. Runnable接口\",\"t\":[\"Runnable接口是创建多线程的方式之一。\"]},\"1491\":{\"h\":\"1. Runnable接口创建多线程的步骤\",\"t\":[\"创建一个实现了Runnable接口的类\",\"实现类去实现Runnable中的抽象方法：run()\",\"创建实现类的对象\",\"将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象\",\"通过Thread类的对象调用start()：开启线程，并调用重写的run方法\"]},\"1492\":{\"h\":\"2. 示例\",\"t\":[\"public class RunnableTest { public static void main(String[] args) { 3.//创建实现类的对象 MyRunnable m1 = new MyRunnable(); 4.//将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象 Thread t1 = new Thread(m1); Thread t2 = new Thread(m1); Thread t3 = new Thread(m1); 5.//通过Thread类的对象调用start() t1.start(); t2.start(); t3.start(); } } 1.//创建一个实现了Runnable接口的类：MyRunnable class MyRunnable implements Runnable{ private int num = 100; @Override 2.//实现类去实现Runnable中的抽象方法：run() public void run() { while(true){ //因为循环条件是成员变量，所以要这样写 if(num>0){ System.out.println(Thread.currentThread().getName()+\\\"***\\\"+num); num--; }else{ break; } } } } \",\"这里通过将Runnable接口的实例作为参数传入Thread类中，再通过new Thread类来创建线程的。 开启线程还是需要掉用Thread类的start方法\",\"执行结果：三个线程交替输出100->1，共享一个num变量\"]},\"1493\":{\"h\":\"2.1\",\"t\":[\"疑问：MyRunnable类没有继承，也没有重写Thread类的run方法，为什么Thread类调用start()时会执行MyRunnable类的run方法。\",\"解答：new Thread类时，将Runnable接口的实例(MyRunnable类的实例)传递了进去，Thread类有一个构造方法是接收 Runnable类型的变量的，该构造方法将Runnble接口实现类的实例赋值给了Target变量，当调用Thread类的run方法时，会判断Target变量是否有值，就值就调用Target的run方法，因此调用的是Runnable的run方法，由于多态的缘故，最终被调用的就是MyRunnable类的run方法了。\"]},\"1494\":{\"h\":\"2.2 创建多个线程\",\"t\":[\"如上；创建新的线程，不需要重复new Runnable实现类的实例，只需new Thread类就能创建一个新的线程。\"]},\"1495\":{\"h\":\"2.3 共享成员变量\",\"t\":[\"由于使用Runnable接口创建多个线程时，每个线程使用的都是同一个 Runnable的实现类实例。所以这些线程的run方法操作的是同一个对象的成员变量，即共享成员变量，每个线程对成员变量的修改都会影响到其他线程，不需要额外加static。\"]},\"1496\":{\"h\":\"3. Thread和Runnable 两种方式的比较\"},\"1497\":{\"h\":\"3.1 开发中的选择\",\"t\":[\"开发中：优先选择：实现Runnable接口的方式，原因如下：\",\"实现的方式没有类的单继承性的局限性\",\"实现的方式更适合来处理多个线程有共享数据的情况。\"]},\"1498\":{\"h\":\"3.2 区别\",\"t\":[\"继承Thread：线程代码存放Thread子类run方法中。\",\"实现Runnable：线程代码存在接口的实现类的run方法。\"]},\"1499\":{\"h\":\"3.3 联系\",\"t\":[\"相同点：两种方式都需要重写run(),将线程要执行的逻辑声明在run()中。\",\"public class Thread extends Object implements Runnable \"]},\"1500\":{\"h\":\"5-3. 生命周期\",\"t\":[\"线程是有生命周期（状态）的\"]},\"1501\":{\"h\":\"1. 线程的5种状态\",\"t\":[\"要想实现多线程，必须在主线程中创建新的线程对象。Java语言使用Thread类及其子类的对象来表示线程，在它的一个完整的生命周期中通常要经历如下的五种状态\",\"新建：当一个Thread类或其子类的对象被声明并创建时，新生的线程对象处于新建状态\",\"就绪：处于新建状态的线程被start()后，将进入线程队列等待CPU时间片，此时它已具备了运行的条件，只是没分配到CPU资源\",\"运行：当就绪的线程被调度并获得CPU资源时,便进入运行状态， run()方法定义了线程的操作和功能\",\"阻塞：在某种特殊情况下，被人为挂起或执行输入输出操作时，让出 CPU 并临时中止自己的执行，进入阻塞状态\",\"死亡：线程完成了它的全部工作或线程被提前强制性地中止或出现异常导致结束\"]},\"1502\":{\"h\":\"2. 线程的生命周期图解\",\"t\":[\"5-3-1\"]},\"1503\":{\"h\":\"5-4. 安全与同步\"},\"1504\":{\"h\":\"Ⅰ. 线程安全问题\"},\"1505\":{\"h\":\"1. 线程的安全问题概述\",\"t\":[\"当多个线程操作同一个数据时，有可能发生，数据更新不及时，导致a线程更新完数据后，b线程拿到的是老数据，没有及时拿到新数据。\"]},\"1506\":{\"h\":\"2. 示例1：消费问题\",\"t\":[\"假设有一个银行账户里有3000元，A使用该账户消费2000元，支付时，系统进行if判断，钱的数目是够的，于是进入了确认支付环节。同时B也使用该账户进行消费2000元，支付时，系统也进行了判断，钱的数目是够的。A和B同时通过了if判断，都还没有更新数据，此时，A支付成功了，B却不会重新进行if判断，这时就产生了线程安全问题。\"]},\"1507\":{\"h\":\"3. 示例2：卖票问题\",\"t\":[\"模拟火车站售票程序，有三个窗口售票（电子打印）。\",\"问题1-出现重复票：当多个买票程序同时通过是否有票的验证，验证通过时，都进行票据的打印，然后才跟着票号--，就会出现打印的是同一张票的情况。\",\"问题2-多打印：当只剩下一张票，而多个买票程序通过是否有票的判断时，就会出现多打印票的状况。\",\"5-4-1\",\"问题的原因：当多条语句在操作同一个线程共享数据时，一个线程对多条语句只执行了一部分，还没有执行完，另一个线程参与进来执行。导致共享数据的错误。\"]},\"1508\":{\"h\":\"4. 解决方案\",\"t\":[\"对多条操作共享数据的语句，只能让一个线程都执行完，在执行过程中，其他线程不可以参与执行。 在Java中，我们通过同步机制，来解决线程的安全问题，同步机制有多种方式\"]},\"1509\":{\"h\":\"5. 线程安全问题代码示例\",\"t\":[\"public class OneTest { public static void main(String[] args) { MyRunnable mr1 = new MyRunnable(); Thread t1 = new Thread(mr1); t1.start(); Thread t2 = new Thread(mr1); t2.start(); } } class MyRunnable implements Runnable{ private int num = 100; public void run() { while(true){ if(num>0){ System.out.println(\\\"子线程：\\\"+Thread.currentThread().getName()+\\\"--\\\"+num); num--; }else{ break; } } } } //效果：多次执行，发现会出现重复数字，小于0的数字，且数字不是完全递减的。 \"]},\"1510\":{\"h\":\"Ⅱ. 同步代码块\",\"t\":[\"同步代码块可以解决线程安全问题。\"]},\"1511\":{\"h\":\"1. 同步代码块说明\",\"t\":[\"public void run(){ synchronized(同步监视器){ //需要被同步的代码块..操作共享数据的代码 } } \",\"操作共享数据的代码：即为需要被同步的代码。-->不能包含代码多了，也不能包含代码少了。\",\"共享数据：多个线程共同操作的变量。\",\"同步监视器 \",\"俗称：锁。任何一个类的对象，都可以充当锁。\",\"要求：多个线程必须要共用同一把锁。\",\"补充：在实现Runnable接口创建多线程的方式中，我们可以考虑使用this充当同步监视器，但是要注意，在继承Thread类创建多线程的方式中，慎用this充当同步监视器，考虑使用当前类充当同步监视器。\"]},\"1512\":{\"h\":\"2. 买票问题解决示例\",\"t\":[\"public class RunnableTest { public static void main(String[] args) { MyRunnable m1 = new MyRunnable(); Thread t1 = new Thread(m1); Thread t2 = new Thread(m1); Thread t3 = new Thread(m1); t1.start(); t2.start(); t3.start(); } } class MyRunnable implements Runnable{ private int num = 100; //private static Object obj = new Object(); @Override public void run() { while (true) { synchronized(this) { //创建一个obj也可以 if (num > 0) { System.out.println(Thread.currentThread().getName()+ num); num--; } else { break; } } } } } \"]},\"1513\":{\"h\":\"2.1 执行效果\",\"t\":[\"num的值从100~1有序递减，且不存在重复和过界的数字。\"]},\"1514\":{\"h\":\"2.2 注意synchronized的位置\",\"t\":[\"如上，synchronize即不能包的代码多了，也不能包的代码少了。\",\"包的少了，还是会出现线程安全问题，包的多了可能会产生意外的错误，如上，假如把while(true)也包含在内，那么一个线程拿到锁，就会走完所有循环，多线程就失去意义了。\"]},\"1515\":{\"h\":\"3. 处理继承Thread类的线程安全问题\",\"t\":[\"继承Thread类实现多线程的方式和实现Runnable接口是不同的，因为Thread类会通过创建多个Thread类的子类来作为线程对象。每个对象的成员变量都是独立的，因此要注意以下两点：\",\"将成员变量设置成static。\",\"将同步监视器也设置成static类，（不要用this），或者使用.class类[反射：类也是对象]。\",\"private static int num = 100; private static Object obj = new Object(); MyThread.class //类也可以作为对象 \"]},\"1516\":{\"h\":\"Ⅲ. 同步方法\"},\"1517\":{\"h\":\"1. 同步方法说明\",\"t\":[\"synchronized 还可以放在方法声明中，表示整个方法为同步方法\",\"如果操作共享数据的代码完整的声明在一个方法中，我们不妨将此方法声明同步的。\",\"注意：同步方法仍然涉及到同步监视器，只是不需要我们显式的声明。\",\"public synchronized void run(){}; \"]},\"1518\":{\"h\":\"1.1 Runnable实现的：同步监视器\",\"t\":[\"Runnable实现的方式中，默认this是同步监视器\"]},\"1519\":{\"h\":\"1.2 继承Thread类的：同步监视器\",\"t\":[\"同理，this表示的是对象，继承Thread的线程对象，每个线程都会创建一个对象，每个对象的的同步方法都是独立的，同步监视器表示是各自的对象。\",\"解决方案：将同步方法设置为静态方法（此时就变成类调用该方法了，类也是一个对象）。\"]},\"1520\":{\"h\":\"2. 买票问题解决示例\",\"t\":[\"public class RunnableTest { public static void main(String[] args) { MyRunnable m1 = new MyRunnable(); Thread t1 = new Thread(m1); Thread t2 = new Thread(m1); Thread t3 = new Thread(m1); t1.start(); t2.start(); t3.start(); } } class MyRunnable implements Runnable{ private int num = 100; // final Object obj = new Object(); @Override public void run() { while (true) { getNum(); } } //因为while(true)，不能包裹，所以把while(true)里面的代码提取出来声明成同步方法，再调用 public synchronized void getNum(){ if (num > 0) { System.out.println(Thread.currentThread().getName() + \\\"***\\\" + num); num--; }else{ //stop()已经被废弃了，但是这里如果不stop,线程就不会结束,因为while一直在执行。 Thread.currentThread().stop(); } } } \"]},\"1521\":{\"h\":\"3. 解决懒汉式单例模式的线程安全问题\",\"t\":[\"详见单例模式；\",\"安全问题解析：当线程通过instance == null的判断后，可能会发生阻塞，这时将会有多个线程进来，从而创造了多个对象。\",\"解决方案：使用同步方法解决。\",\"class Order{ //1.私有化类的构造器 private Order(){} //2.声明当前类对象，没有初始化 //4.此对象也必须声明为static的 private static Order instance = null; //3.声明 public、static的返回当前类对象的方法 //方式1：将synchronize声明在getInstance处：效率低 public static synchronized Order getInstance(){ if(instance == null){ instance = new Order(); } return instance; } //方式2：高效率的修改 public static Order getInstance(){ if(instance == null){ synchronized(Order.class){ if(instance == null){ instance = new Order(); } } return instance } } \"]},\"1522\":{\"h\":\"3.1 高效修改的逻辑\",\"t\":[\"在方式一，当把synchronize声明在方法最外层时，每当有线程进去，其他线程都要进行等待，哪怕对象已经创建好了。如果一个线程阻塞了，其他线程都需要在后面排队，如果instance真的==null，无可厚非，但如果不是，不如直接return instance。\",\"改进的方案：将syschronized声明在if里面，一旦判断instance不是null，直接返回对象，如果是null，在进行synchronized，这个方法立面再加一层if判断，保证线程安全。\"]},\"1523\":{\"h\":\"4. 同步原理和总结\",\"t\":[\"将需要同步的数据放入synchronized包裹的方法中，当线程进入synchronized中时，该线程将拿到锁，此时synchronized变成上锁状态，其他线程需要等待，等线程执行完synchronized中的代码后，锁就被去掉，所有线程开始重新争抢这把锁。这种上锁的方式保证了线程的安全性。\",\"5-4-2\"]},\"1524\":{\"h\":\"4.1 同步机制中的锁\",\"t\":[\"需要某种方式来防止两个任务访问相同的资源（其实就是共享资源竞争）。 防止这种冲突的方法就是当资源被一个任务使用时，在其上加锁。第一个访问某项资源的任务必须锁定这项资源，使其他任务在其被解锁之前，就无法访问它了，而在其被解锁之时，另一个任务就可以锁定并使用它了。\",\"注意： 一个线程类中的所有静态方法共用同一把锁（类名.class），所有非静态方法共用同一把锁（this），同步代码块（指定需谨慎）\"]},\"1525\":{\"h\":\"4.2 同步的范围\",\"t\":[\"明确哪些代码是多线程运行的代码；明确多个线程是否有共享数据；明确多线程运行代码中是否有多条语句操作共享数据\",\"对多条操作共享数据的语句，只能让一个线程都执行完，在执行过程中，其他线程不可以参与执行。即所有操作共享数据的这些语句都要放在同步范围中\",\"注意： 范围太小：没锁住所有有安全问题的代码；范围太大：没发挥多线程的功能。\"]},\"1526\":{\"h\":\"4.3 释放锁的操作\",\"t\":[\"当前线程的同步方法、同步代码块执行结束。\",\"当前线程在同步代码块、同步方法中遇到break、return终止了该代码块、该方法继续执行。\",\"当前线程在同步代码块、同步方法中出现了未处理的Error或Exception，导致异常结束。\",\"当前线程在同步代码块、同步方法中执行了线程对象的wait()方法，当前线程暂停，并释放锁\"]},\"1527\":{\"h\":\"4.4 不会释放锁的操作\",\"t\":[\"线程执行同步代码块或同步方法时，程序调用Thread.sleep()、Thread.yield()方法暂停当前线程的执行\",\"线程执行同步代码块时，其他线程调用了该线程的suspend()方法将该线程挂起，该线程不会释放锁（同步监视器）。\",\"注意：应尽量避免使用suspend()和resume()来控制线程\"]},\"1528\":{\"h\":\"5. 同步方式的优缺点\",\"t\":[\"优点：完全解决了线程的安全问题 缺点：操作同步代码时，只能有一个线程参与，其他线程等待。相当于是一个单线程的过程，效率低。\"]},\"1529\":{\"h\":\"Ⅳ. Lock锁\",\"t\":[\"Lock锁方式也可以解决线程安全问题\"]},\"1530\":{\"h\":\"1. 说明\",\"t\":[\"从JDK 5.0开始，Java提供了更强大的线程同步机制——通过显式定义同步锁对象来实现同步。同步锁使用Lock对象充当。\",\"java.util.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应先获得Lock对象。\"]},\"1531\":{\"h\":\"2. Lock的优点\",\"t\":[\"使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（提供更多的子类）\"]},\"1532\":{\"h\":\"3. ReentrantLock类\",\"t\":[\"ReentrantLock 类实现了 Lock ，它拥有与 synchronized 相同的并发性和内存语义，可以显式加锁、释放锁。\",\"class A{ private final ReentrantLock lock = new ReenTrantLock(); public void m(){ lock.lock(); try{ // 被保证线程安全的代码; } finally{ lock.unlock(); } } } \"]},\"1533\":{\"h\":\"3.1 构造函数\",\"t\":[\"接收一个boolean参数，默认是false，true表示公平的多线程\",\"true：多个线程安装1:1的几率执行run方法\",\"false：多个线程安装CPU的调度执行run方法\",\"public ReenTrantLock(Boolean false); \"]},\"1534\":{\"h\":\"3.2 加锁\",\"t\":[\"lock.lock(); \"]},\"1535\":{\"h\":\"3.3 释放锁\",\"t\":[\"注意：如果同步代码有异常，要将unlock()写入finally语句块\",\"lock.unlock(); \"]},\"1536\":{\"h\":\"4. 使用示例\",\"t\":[\"package ThreadSafety; import java.util.concurrent.locks.ReentrantLock; public class ReinTyrantTest { public static void main(String[] args) { Test test = new Test(); Thread t1 = new Thread(test); Thread t2 = new Thread(test); Thread t3 = new Thread(test); t1.start(); t2.start(); t3.start(); } } class Test implements Runnable{ private int num = 100; private ReentrantLock lock = new ReentrantLock(true); @Override public void run() { while(true){ try { lock.lock(); if (num > 0) { System.out.println(Thread.currentThread().getName() + \\\"@\\\" + num); num--; } else { lock.unlock(); break; } }finally{ lock.unlock(); } } } } \"]},\"1537\":{\"h\":\"5. synchronized与lock的对比\",\"t\":[\"相同点：都可以解决线程安全问题\",\"不用点 \",\"Lock是显式锁（手动开启和关闭锁，别忘记关闭锁），synchronized是隐式锁，出了作用域自动释放\",\"Lock只有代码块锁，synchronized有代码块锁和方法锁\"]},\"1538\":{\"h\":\"6. 三种线程安全方式的优先使用顺序\",\"t\":[\"Lock>同步代码块（已经进入了方法体，分配了相应资源）->同步方法（在方法体之外）\"]},\"1539\":{\"h\":\"5-5. 线程的死锁\",\"t\":[\"我们使用同步时，要避免出现死锁。很多死锁都是很隐蔽，有时根本发现不了。\"]},\"1540\":{\"h\":\"1. 死锁介绍\",\"t\":[\"不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁。\",\"出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于阻塞状态，无法继续。\"]},\"1541\":{\"h\":\"2. 解决方法\",\"t\":[\"专门的算法、原则；\",\"尽量减少同步资源的定义；\",\"尽量避免嵌套同步\",\"加锁时限（线程尝试获取锁的时候加上一定的时限，超过时限则放弃对该锁的请求，并释放自己占有的锁）\",\"死锁检测\"]},\"1542\":{\"h\":\"3. 死锁示例\",\"t\":[\"例如，某计算机系统中只有一台打印机和一台输入 设备，进程P1正占用输入设备，同时又提出使用打印机的请求，但此时打印机正被进程P2 所占用，而P2在未释放打印机之前，又提出请求使用正被P1占用着的输入设备。这样两个进程相互无休止地等待下去，均无法继续执行，此时两个进程陷入死锁状态。\"]},\"1543\":{\"h\":\"4. 死锁产生的具体原因\"},\"1544\":{\"h\":\"4.1 系统资源的竞争\",\"t\":[\"通常系统中拥有的不可剥夺资源，其数量不足以满足多个进程运行的需要，使得进程在运行过程中，会因争夺资源而陷入僵局。\"]},\"1545\":{\"h\":\"4.2 进程推进顺序非法\",\"t\":[\"进程在运行过程中，请求和释放资源的顺序不当，也同样会导致死锁。\",\"例如，并发进程 P1、P2分别保持了资源R1、R2，而进程P1申请资源R2，进程P2申请资源R1时，两者都会因为所需资源被占用而阻塞。\"]},\"1546\":{\"h\":\"4.3 总结\",\"t\":[\"产生死锁可能性的最根本原因是：线程在获得一个锁L1的情况下再去申请另外一个锁L2，也就是锁L1想要包含了锁L2，也就是说在获得了锁L1，并且没有释放锁L1的情况下，又去申请获得锁L2，这个是产生死锁的最根本原因。另一个原因是默认的锁申请操作是阻塞的。\"]},\"1547\":{\"h\":\"5. 死锁的实例：嵌套锁\",\"t\":[\"public class ThreadTest { public static void main(String[] args) { StringBuffer s1 = new StringBuffer(); StringBuffer s2 = new StringBuffer(); new Thread(){ @Override public void run() { synchronized (s1){ s1.append(\\\"a\\\"); s2.append(\\\"1\\\"); try { Thread.sleep(100); } catch (InterruptedException e) { e.printStackTrace(); } synchronized (s2){ s1.append(\\\"b\\\"); s2.append(\\\"2\\\"); System.out.println(s1); System.out.println(s2); } } } }.start(); new Thread(new Runnable() { @Override public void run() { synchronized (s2){ s1.append(\\\"c\\\"); s2.append(\\\"3\\\"); try { Thread.sleep(100); } catch (InterruptedException e) { e.printStackTrace(); } synchronized (s1){ s1.append(\\\"d\\\"); s2.append(\\\"4\\\"); System.out.println(s1); System.out.println(s2); } } } }).start(); } } \"]},\"1548\":{\"h\":\"5.1 死锁解析\",\"t\":[\"线程1：将s1作为锁，发生阻塞，然后再将s2作为锁，\",\"线程2：将s2作为锁，发生阻塞，然后再将s1作为锁，\",\"当s1和s2同时结束阻塞准备拿下一个锁的时候，发现自己需要的锁，被占着者，于是只能等待，这就形成了死锁。\"]},\"1549\":{\"h\":\"5.2 锁的补充\",\"t\":[\"锁（对象）只有释放了，才能被其他线程拿到，无论这两个线程是否属于同一对象。\"]},\"1550\":{\"h\":\"5-6. 线程的通信\",\"t\":[\"线程的通信指的是多个线程之间的交流。\",\"比如，使用两个线程打印 1-100。线程1, 线程2 交替打印\"]},\"1551\":{\"h\":\"1. 线程通信涉及到的方法\",\"t\":[\"注意：这三个方法只有在synchronized方法或synchronized代码块中才能使用，否则会报 java.lang.IllegalMonitorStateException异常。\",\"wait：一旦执行此方法，当前线程就进入阻塞状态，并释放同步监视器。 \",\"令当前线程挂起并放弃CPU、同步资源并等待，使别的线程可访问并修改共享资源，而当前线程排队等候其他线程调用notify()或notifyAll()方法唤醒，唤醒后等待重新获得对监视器的所有权后才能继续执行。\",\"notify：一旦执行此方法，就会唤醒被wait的一个线程。如果有多个线程被wait，就唤醒优先级高的那个。\",\"notifyAll：一旦执行此方法，就会唤醒所有等待的线程。\"]},\"1552\":{\"h\":\"2. wait()使用说明\",\"t\":[\"在当前线程中调用方法： 对象名.wait()；\",\"使当前线程进入等待（某对象）状态 ，直到另一线程对该对象发出 notify(或notifyAll) 为止。\",\"调用方法的必要条件：当前线程必须具有对该对象的监控权（加锁）\",\"调用此方法后，当前线程将释放对象监控权\",\"在当前线程被notify后，要重新获得监控权，然后从断点处继续代码的执行。\"]},\"1553\":{\"h\":\"3. notify()、notifyAll()使用说明\",\"t\":[\"在当前线程中调用方法： 对象名.notify()\",\"功能：唤醒等待该对象监控权的一个/所有线程。\",\"调用方法的必要条件：当前线程必须具有对该对象的监控权（加锁）\"]},\"1554\":{\"h\":\"4. 补充说明\",\"t\":[\"wait()，notify()，notifyAll()三个方法必须使用在同步代码块或同步方法中。\",\"wait()，notify()，notifyAll()三个方法的调用者必须是同步代码块或同步方法中的同步监视器。否则，会出现IllegalMonitorStateException异常\",\"wait()，notify()，notifyAll()三个方法是定义在java.lang.Object类中。\"]},\"1555\":{\"h\":\"5. sleep()和wait()的异同\",\"t\":[\"相同点：一旦执行方法，都可以使得当前的线程进入阻塞状态。\",\"不同点 \",\"两个方法声明的位置不同：Thread类中声明sleep() , Object类中声明wait()\",\"用的要求不同：sleep()可以在任何需要的场景下调用。 wait()必须使用在同步代码块或同步方法中\",\"关于是否释放同步监视器：如果两个方法都使用在同步代码块或同步方法中，sleep()不会释放锁，wait()会释放锁。\"]},\"1556\":{\"h\":\"6. 线程的通信实例\",\"t\":[\"使用两个线程打印 1-100。线程1, 线程2 交替打印\",\"public class WaitTest { public static void main(String[] args) { NumTest nt1 = new NumTest(); Thread t1 = new Thread(nt1); Thread t2 = new Thread(nt1); t1.start(); t2.start(); } } class NumTest implements Runnable{ private int num = 1; @Override public void run() { while(true) { synchronized (this) { notify(); //将被wait的线程重新激活 if (num <= 100) { System.out.println(Thread.currentThread().getName() + \\\"@\\\" + num); num++; try { wait();//当前线程被阻塞，并释放锁 } catch (InterruptedException e) { e.printStackTrace(); } } else { break; } } } } } \"]},\"1557\":{\"h\":\"5-7. 线程池\"},\"1558\":{\"h\":\"Ⅰ. Callable接口\",\"t\":[\"实现Callable接口是JDK5.0新增的一种方式，他比实现Runnable接口更强大。\"]},\"1559\":{\"h\":\"1. Callable接口介绍\",\"t\":[\"通过实现Callable接口，并重写call()来创建多线程，相当于Runnable接口，Callable接口更加强大，有如下优势：\",\"call()相当于run()，可以有返回值\",\"call()可以抛出异常\",\"支持泛型\"]},\"1560\":{\"h\":\"2. Future接口介绍\",\"t\":[\"Callable接口的实例，需要借助FutureTask类，进行其他操作，比如：获取返回结果\",\"FutrueTask是Futrue接口的唯一的实现类\",\"可以对具体Runnable、Callable任务的执行结果进行取消、查询是否完成、获取结果等。\",\"FutureTask 同时实现了Runnable, Future接口。它既可以作为Runnable被线程执行，又可以作为Future得到Callable的返回值\"]},\"1561\":{\"h\":\"3. 使用Callable新增线程的步骤\",\"t\":[\"①创建一个实现Callable的实现类\",\"②实现call方法，将此线程需要执行的操作声明在call()中\",\"③创建Callable接口实现类的对象\",\"④将此Callable接口实现类的对象作为参数传递到FutureTask构造器中，创建FutureTask的对象\",\"⑤将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象，并调用start()\",\"⑥获取Callable中call方法的返回值：get()返回值即为FutureTask构造器参数Callable实现类重写的call()的返回值。\"]},\"1562\":{\"h\":\"4. 示例\",\"t\":[\"1.//创建一个实现Callable的实现类 class NumSum implements Callable { private int num = 100; @Override 2.//实现call方法，将此线程需要执行的操作声明在call()中 public Object call() throws Exception { int sum = 0; for(int i=0;i<=num;i++){ System.out.println(Thread.currentThread().getName()+\\\"#\\\"+i); sum += i; } return sum; } } public class CallableTest { public static void main(String[] args) { 3.//创建Callable接口实现类的对象 NumSum ns = new NumSum(); 5.//将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象 FutureTask ft = new FutureTask(ns); Thread t1 = new Thread(ft); t1.start();//调用start方法，开启线程 try { 6.//获取Callable中call方法的返回值 System.out.println(\\\"总和为\\\"+ft.get()); } catch (InterruptedException e) { e.printStackTrace(); } catch (ExecutionException e) { e.printStackTrace(); } } } \"]},\"1563\":{\"h\":\"Ⅱ. 线程池\"},\"1564\":{\"h\":\"1. 线程池介绍\",\"t\":[\"开发中，框架用的就是线程池，我们只管用就行\",\"背景：经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，对性能影响很大。\",\"思路：提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。类似生活中的公共交通工具。\"]},\"1565\":{\"h\":\"2. 线程池的优点\",\"t\":[\"提高响应速度（减少了创建新线程的时间）\",\"降低资源消耗（重复利用线程池中线程，不需要每次都创建）\",\"便于线程管理 \",\"corePoolSize：核心池的大小\",\"maximumPoolSize：最大线程数\",\"keepAliveTime：线程没有任务时最多保持多长时间后会终止\",\"…\"]},\"1566\":{\"h\":\"3. ExcutorService：线程池接口\",\"t\":[\"常见子类ThreadPoolExecutor\",\"void execute(Runnable command) ：执行任务/命令，没有返回值，一般用来执行Runnable\",\"<T> Future<T> submit(Callable<T> task)：执行任务，有返回值，一般用来执行Callable\",\"void shutdown() ：关闭连接池\"]},\"1567\":{\"h\":\"4. Executors：线程池工具类、工厂类\",\"t\":[\"用于创建并返回不同类型的线程池\",\"Executors.newCachedThreadPool()：创建一个可根据需要创建新线程的线程池\",\"Executors.newFixedThreadPool(n); 创建一个可重用固定线程数的线程池\",\"Executors.newSingleThreadExecutor() ：创建一个只有一个线程的线程池\",\"Executors.newScheduledThreadPool(n)：创建一个线程池，它可安排在给定延迟后运行命令或者定期地执行。\"]},\"1568\":{\"h\":\"5. 使用线程池步骤\",\"t\":[\"创建线程池：需要用到Executors工厂类\",\"可选：设置线程池属性，需要使用ExecutorService接口的子类\",\"指定线程的操作：使用execute或submit进行操作，需要提供实现Runnable接口或Callable接口实现类的对象做参数\",\"关闭连接池\"]},\"1569\":{\"h\":\"6. 示例\",\"t\":[\"public class ThreadPool { public static void main(String[] args) { 1.//创建线程池：使用创建指定线程数量的方法。 ExecutorService service = Executors.newFixedThreadPool(10); 2.//将线程池接口类型转为接口的子类类型，方便设置线程属性 ThreadPoolExecutor real_service = (ThreadPoolExecutor) service; real_service.setCorePoolSize(15); 3.//执行指定的线程的操作 real_service.execute(new PrintSum()); 4.//关闭连接池 real_service.shutdown(); } } class PrintSum implements Runnable{ @Override //线程需要完成的操作 public void run() { for(int i=0;i<100;i++){ System.out.println(Thread.currentThread().getName()+\\\"@\\\"+i); } } } \"]},\"1570\":{\"h\":\"6-1. 集合概述\"},\"1571\":{\"h\":\"Ⅰ. 集合概述\"},\"1572\":{\"h\":\"1. 集合的由来\",\"t\":[\"面向对象语言对事物的体现都是以对象的形式，为了方便对多个对象的操作，就要对对象进行存储。使用Array在存储对象方面具有 一些弊端，而Java 集合就像一种容器，可以动态地把多个对象的引用放入容器中。\",\"**容器：**集合、数组都是对多个数据进行存储操作的结构，简称Java容器。此时的存储，主要指的是内存层面的存储，不涉及到持久化的存储。\"]},\"1573\":{\"h\":\"2. 数组在Java内存储存方面的特点\",\"t\":[\"一旦初始化以后，其长度就确定了。\",\"数组一旦定义好，其元素的类型也就确定了。我们也就只能操作指定类型的数据了。 \",\"比如：String[] arr;int[] arr1;Object[] arr2;\"]},\"1574\":{\"h\":\"3. 数组在储存数据方面的弊端\",\"t\":[\"一旦初始化以后，其长度就不可修改。\",\"数组中提供的方法非常有限，对于添加、删除、插入数据等操作，非常不便，同时效率不高。\",\"获取数组中实际元素的个数的需求，数组没有现成的属性或方法可用\",\"数组存储数据的特点：有序、可重复。对于无序、不可重复的需求，不能满足。\"]},\"1575\":{\"h\":\"4. 集合的特点\",\"t\":[\"提示\",\"关联数组：在其他语言中是有关联数组的，K-V键值对，Java中没有关联数组，可以用集合取代。\",\"数组的弊端，集合都解决了。\",\"Java 集合类可以用于存储数量不等的多个对象，还可用于保存具有映射关系的关联数组。\"]},\"1576\":{\"h\":\"5. 集合的使用场景\",\"t\":[\"数组和集合都是容器，但是开发中，凡是涉及到对多个数据进行操作时，一般用集合。\",\"能用集合就用集合，除非要求用数组。集合出现的目的，就是取代数组。\"]},\"1577\":{\"h\":\"Ⅱ. 集合框架\"},\"1578\":{\"h\":\"1. 集合框架的体系\",\"t\":[\"Java 集合可分为 Collection 和 Map 两种体系\",\"Collection 接口 ：单列数据，定义了存取一组对象的方法的集合 \",\"List： 存储有序的、可重复的数据。 -->“动态”数组 \",\"ArrayList、LinkedList、Vector\",\"Set： 存储无序的、不可重复的数据 -->数学里的“集合” \",\"HashSet、LinkedHashSet、TreeSet\",\"Map 接口：双列数据，保存具有映射关系“key-value对”的集合-->存储无序的、不可重复的数据 -->数学中的\\\"函数\\\" \",\"HashMap、LinkedHashMap、TreeMap、Hashtable、Properties\"]},\"1579\":{\"h\":\"2. Collection接口继承图\",\"t\":[\"6-1-1\"]},\"1580\":{\"h\":\"3. Map接口继承图\",\"t\":[\"6-1-2\"]},\"1581\":{\"h\":\"6-2. Collection\"},\"1582\":{\"h\":\"说明\",\"t\":[\"Collection 接口是 List、Set 和 Queue 接口的父接口，该接口里定义的方法既可用于操作 Set 集合，也可用于操作 List 和 Queue 集合。\",\"JDK不提供此接口的任何直接实现，而是提供更具体的子接口(如：Set和List)实现。\",\"从 JDK 5.0 增加了 泛型以后，Java 集合可以记住容器中对象的数据类型（而非都当成obj）。\",\"下面的方法测试，都是以实现类做测试的（抽象方法，无法执行）。\"]},\"1583\":{\"h\":\"实例化\",\"t\":[\"实际开发中，根据需求选择合适的子类，这些子类的方法都是一样的。\",\"Collection coll = new ArrayList(); //用实现类进行实例化 System.out.println(coll); //[],一个空的集合 \"]},\"1584\":{\"h\":\"Collection接口的方法\",\"t\":[\"详见：内置函数>Collection+\"]},\"1585\":{\"h\":\"6-3. Iterator\"},\"1586\":{\"h\":\"Ⅰ. Iterator 接口\",\"t\":[\"Iterator是个迭代器接口，用于集合元素的遍历。\"]},\"1587\":{\"h\":\"1. 迭代器\",\"t\":[\"GOF给迭代器模式(设计模式的一种)的定义为：提供一种方法访问一个容器(container)对象中各个元素，而又不需暴露该对象的内部细节。 迭代器模式，就是为容器而生。\",\"Iterator对象称为迭代器(设计模式的一种)，主要用于遍历 Collection 集合中的元素。\"]},\"1588\":{\"h\":\"2. iterator方法和Iterator对象\",\"t\":[\"Collection接口继承了java.lang.Iterable接口，该接口有一个iterator()方法，那么所有实现了Collection接口的集合类都有一个iterator()方法，用以返回一个实现了Iterator接口的对象。\",\"Iterator对象称为迭代器，主要用于遍历 Collection 集合中的元素。\",\"Map集合的元素，不使用Iterator遍历。\"]},\"1589\":{\"h\":\"3. iterator对象\",\"t\":[\"Iterator 仅用于遍历集合，Iterator 本身并不提供承装对象的能力。如果需要创建Iterator 对象，则必须有一个被迭代的集合\",\"集合对象每次调用iterator()方法都得到一个全新的迭代器对象，默认游标都在集合的第一个元素之前。\"]},\"1590\":{\"h\":\"4. 遍历方法\",\"t\":[\"详见：内置函数>Collection+\"]},\"1591\":{\"h\":\"4.1 指针（游标）\",\"t\":[\"iterator对象有一个指针，指向集合中的某个元素。对于一个全新的迭代器，他的指针在第一个元素之前，每次执行一次next方法，指针就往后移动一次。\"]},\"1592\":{\"h\":\"4.2 next()\",\"t\":[\"iterator.next()用来向后移动一次指针，并取出指针指向的集合元素，进行返回。\",\"注意：当指针已经指向最后时，就不能再调用next方法了，会抛出异常，且取完数据后，指针就会呆在集合末尾，不会自动重置。\"]},\"1593\":{\"h\":\"4.3 hashNext()\",\"t\":[\"用来判断指针后面还有没有集合元素。\"]},\"1594\":{\"h\":\"5. 进行遍历\",\"t\":[\"//1.创建集合对象,并添加元素 Collection coll = new ArrayList(); coll.add(123); coll.add(\\\"aa\\\"); coll.add(new Person(\\\"jinno\\\",20)); //2.创建Iterator对象,准备遍历 Iterator it = coll.iterator(); \"]},\"1595\":{\"h\":\"5.1 手动遍历【不使用，仅演示】\",\"t\":[\"System.out.println(it.next()); //123 System.out.println(it.next()); //aa System.out.println(it.next()); //day04.Person@1b6d3586 //没有数据，继续next,报异常 System.out.println(it.next()); \"]},\"1596\":{\"h\":\"5.2 for循环遍历【不推荐，仅演示】\",\"t\":[\"for(int i=0;i<coll.size();i++){ System.out.println(it.next()); } \"]},\"1597\":{\"h\":\"5.3 while+hasNext遍历【推荐】\",\"t\":[\"在调用it.next()方法之前必须要调用it.hasNext()进行检测。若不调用，且下一条记录无效，直接调用it.next()会抛出NoSuchElementException异常\",\"while(it.hasNext()){ System.out.println(it.next()); } \"]},\"1598\":{\"h\":\"6. 迭代器执行的原理\",\"t\":[\"6-3-1\"]},\"1599\":{\"h\":\"7. 遍历的注意事项\",\"t\":[\"每次调用iterator方法，都会返回一个全新的迭代器，指针指向第一个元素前面\",\"取完数据后，指针不会重置，再调用next()会抛异常，想再遍历就重新获得迭代器\"]},\"1600\":{\"h\":\"8. remove：移除元素\",\"t\":[\"remove方法用来在遍历的时候，删除集合中的元素。此方法不同于集合直接调用remove()。\",\"注意：如果还未调用next()或在上一次调用 next 方法之后已经调用了 remove 方法，再调用remove都会报IllegalStateException。\",\"while(it.hasNext()){ Object obj = it.next(); if(\\\"aa\\\".equals(obj)){ it.remove(); } } \"]},\"1601\":{\"h\":\"Ⅱ. 增强 for 循环\"},\"1602\":{\"h\":\"1. 介绍\",\"t\":[\"jdk 5.0 新增了foreach循环(又称增强for循环)，用于遍历集合、数组。\",\"遍历操作不需获取Collection或数组的长度，无需使用索引访问元素。 遍历集合的底层调用Iterator完成操作。\"]},\"1603\":{\"h\":\"2. 示例：遍历集合\",\"t\":[\"for(集合元素的类型 局部变量 : 集合对象)\",\"Collection coll = new ArrayList(); coll.add(123); coll.add(\\\"aa\\\"); coll.add(new Person(\\\"jinno\\\",20)); //for(集合元素的类型 局部变量 : 集合对象) for(Object obj : coll){ System.out.println(obj); } \"]},\"1604\":{\"h\":\"3. 示例：遍历数组\",\"t\":[\"for(数组元素的类型 局部变量 : 数组对象)\",\"int[] arr = new int[]{1,2,3,4,5,6}; //for(数组元素的类型 局部变量 : 数组对象) for(int i : arr){ System.out.println(i); } \"]},\"1605\":{\"h\":\"4. 练习：for循环与增强for循环的对比\",\"t\":[\"重点：增强for循环中，是把值赋给了局部变量。\"]},\"1606\":{\"h\":\"4.1 普通for循环\",\"t\":[\"String[] arr = new String[]{\\\"MM\\\",\\\"MM\\\",\\\"MM\\\"}; for(int i = 0;i < arr.length;i++){ arr[i] = \\\"GG\\\"; } for(int i = 0;i < arr.length;i++){ System.out.println(arr[i]); //输出的都是 GG } \"]},\"1607\":{\"h\":\"4.2 增强for循环\",\"t\":[\"String[] arr = new String[]{\\\"MM\\\",\\\"MM\\\",\\\"MM\\\"}; for(String s : arr){ s = \\\"GG\\\"; } for(int i = 0;i < arr.length;i++){ System.out.println(arr[i]); //输出的都是MM } \"]},\"1608\":{\"h\":\"6-4. List\"},\"1609\":{\"h\":\"Ⅰ. List 接口\"},\"1610\":{\"h\":\"1. 介绍\",\"t\":[\"List接口为Collection接口的子接口，常称为：动态数组\",\"鉴于Java中数组用来存储数据的局限性，我们通常使用List替代数组；\",\"List集合类中元素有序、且可重复，集合中的每个元素都有其对应的顺序索引。\",\"List容器中的元素都对应一个整数型的序号记载其在容器中的位置，可以根据序号存取容器中的元素。\"]},\"1611\":{\"h\":\"2. List接口的实现类\",\"t\":[\"List接口是Collection的子接口，该接口有三个实现类\",\"Collection 接口 ：单列数据，定义了存取一组对象的方法的集合 \",\"List： 存储有序的、可重复的数据。 -->“动态”数组 \",\"ArrayList、LinkedList、Vector\"]},\"1612\":{\"h\":\"2.1 ArrayList 【主要使用】\",\"t\":[\"作为List接口的主要实现类；一般情况下用这个\",\"线程不安全的，效率高；\",\"底层使用Object[] elementData存储\"]},\"1613\":{\"h\":\"2.2 LinkedList\",\"t\":[\"对于频繁的插入、删除操作，使用此类效率比ArrayList高；\",\"底层使用双向链表存储。\"]},\"1614\":{\"h\":\"2.3 Vector\",\"t\":[\"作为List接口的古老实现类；\",\"线程安全的，效率低；\",\"底层使用Object[] elementData存储\"]},\"1615\":{\"h\":\"Ⅱ. 源码分析\"},\"1616\":{\"h\":\"1. ArrayList源码分析\"},\"1617\":{\"h\":\"1.1 构造器\",\"t\":[\"底层创建了长度是10的Object[]数组elementData\",\"ArrayList list = new ArrayList(); \"]},\"1618\":{\"h\":\"1.2 add操作\",\"t\":[\"List.add(123); //相当于 elementData[0] = new Interger(123); \"]},\"1619\":{\"h\":\"1.3 扩容\",\"t\":[\"如果此次的添加导致底层elementData数组容量不够，则扩容。默认情况下，扩容为原来的容量的1.5倍，同时需要将原有数组中的数据复制到新的数组中。\",\"......//连续添加10次数据 list.add(11);//第11次添加数据 \"]},\"1620\":{\"h\":\"1.4 带参的构造器\",\"t\":[\"扩容是非常消耗资源的，因此尽量不要扩容，建议开发中使用带参的构造器：\",\"ArrayList list = new ArrayList(int capacity);//参数就是容量 \"]},\"1621\":{\"h\":\"1.5 JDK8中，ArrayList的变化\",\"t\":[\"在JDK8时，ArrayList的底层做了一些改变。\",\"初始化时，底层Object[] elementData初始化为{}。并没有创建长度为10的数组，而是在第一次add的时候，底层才创建了长度10的数组，并将数据加到elementData[0]，后续的添加和扩容操作与JDK8之前一样。\",\"ArrayList list = new ArrayList(); //底层是个空的Object[] list.add(123); //第一次调用add(),才真正创建了数组 \"]},\"1622\":{\"h\":\"1.6 总结\",\"t\":[\"jdk7中的ArrayList的对象的创建类似于单例的饿汉式，而jdk8中的ArrayList的对象的创建类似于单例的懒汉式，延迟了数组的创建，节省内存。\"]},\"1623\":{\"h\":\"2. LinkedList\",\"t\":[\"LinkedList是典型的双向链表结构，数据的添加、移除等操作，也是双向链表的基本操作。\"]},\"1624\":{\"h\":\"2.1 实例化\",\"t\":[\"内部声明了Node类型的first（上一个Node）和last（下一个Node）属性，默认值为null\",\"LinkedList list = new LinkedList(); \"]},\"1625\":{\"h\":\"2.2 add添加数据\",\"t\":[\"list.add(123);//将123封装到Node中，创建了Node对象 \"]},\"1626\":{\"h\":\"2.3 Node的定义\",\"t\":[\"体现了LinkedList的双向链表的说法\",\"private static class Node<E> { E item; Node<E> next; Node<E> prev; Node(Node<E> prev, E element, Node<E> next) { this.item = element; this.next = next; this.prev = prev; } } \"]},\"1627\":{\"h\":\"3. Vector\"},\"1628\":{\"h\":\"3.1 说明\",\"t\":[\"Vector已经被放弃了，开发时不会用。\",\"Vector虽然是线程安全的，但是我们需要线程安全问题时，也不用用它，而是使用synchronizedList对ArrayList数据进行处理，取得线程安全的ArrayList。\"]},\"1629\":{\"h\":\"3.2 源码简介\",\"t\":[\"jdk7和jdk8中通过Vector()构造器创建对象时，底层都创建了长度为10的数组。在扩容方面，默认扩容为原来的数组长度的2倍。\"]},\"1630\":{\"h\":\"Ⅲ. List方法\",\"t\":[\"List除了从Collection集合继承的方法外，List 集合里添加了一些根据索引来操作集合元素的方法。并对Collection的很多方法进行了重载。\",\"详见：内置函数>List & Map\"]},\"1631\":{\"h\":\"6-5. Set\"},\"1632\":{\"h\":\"Ⅰ. Set 接口\"},\"1633\":{\"h\":\"1. 介绍\",\"t\":[\"Set接口是Collection的子接口，Set 集合用来储存无序的的不相同的元素（使用equals()判断）。该接口的结构如下：\",\"Collection接口：单列集合，用来存储一个一个的对象 \",\"Set接口：存储无序的、不可重复的数据 -->数学中的“集合” \",\"HashSet：主要实现类 \",\"LinkedHashSet\",\"TreeSet\"]},\"1634\":{\"h\":\"2. Set数据存储的特点\",\"t\":[\"储存无序的，不可重复的数据，以HashSet为例：\",\"无序性：不等于随机性。存储的数据在底层数组中并非按照数组索引的顺序添加，而是根据数据的哈希值决定的。\",\"不可重复性：保证添加的元素按照equals()判断时，不能返回true.即：相同的元素只能添加一个。\"]},\"1635\":{\"h\":\"3. HashSet【主要实现类】\",\"t\":[\"HashSet 是 Set 接口的典型实现，大多数时候使用 Set 集合时都使用这个实现类。\",\"数据结构：数组+链表\",\"HashSet 按 Hash 算法来存储集合中的元素，因此具有很好的存取、查找、删除性能。\",\"Set接口的主要实现类；线程不安全的；可以存储null值\"]},\"1636\":{\"h\":\"3.1 特点\",\"t\":[\"不能保证元素的排列顺序\",\"HashSet 不是线程安全的\",\"集合元素可以是 null\"]},\"1637\":{\"h\":\"3.2 HashSet 集合判断两个元素相等的标准\",\"t\":[\"两个对象通过 hashCode() 方法比较相等，并且两个对象的 equals() 方法返回值也相等。\",\"对于存放在Set容器中的对象， 对应的类一定要重写equals() 和hashCode(Object obj) 方法，以实现对象相等规则 。即： “相等的对象必须具有相等的散列码”\"]},\"1638\":{\"h\":\"4. LinkedHashSet【HashSet的子类】\",\"t\":[\"数据结构：数组+链表\",\"遍历其内部数据时，可以按照添加的顺序遍历\",\"LinkedHashSet插入性能略低于 HashSet，但在迭代访问 Set 里的全部元素时有很好的性能。\",\"LinkedHashSet 根据元素的 hashCode 值来决定元素的存储位置，但它同时使用双向链表维护元素的次序，这使得元素看起来是以插入顺序保存的。\"]},\"1639\":{\"h\":\"5. TreeSet\",\"t\":[\"数据结构：Tree（红黑树）\",\"TreeSet 是 SortedSet 接口的实现类，TreeSet 可以确保集合元素处于排序状态。\",\"TreeSet类新增了很多方法。\",\"可以按照添加对象的指定属性，进行排序。\",\"特点：有序，查询速度比List快\",\"自然排序：TreeSet 会调用集合元素的 compareTo(Object obj) 方法来比较元素之间的大小关系，然后将集合元素按升序(默认情况)排列 \",\"如果试图把一个对象添加到 TreeSet 时，则该对象的类必须实现 Comparable接口。\"]},\"1640\":{\"h\":\"6. Set接口的方法\",\"t\":[\"Set接口中没有额外定义新的方法，使用的都是Collection中声明过的方法。\",\"详见：内置函数>Collection+\"]},\"1641\":{\"h\":\"7. 底层原理：数据的添加过程与底层结构\",\"t\":[\"核心：数据添加时要保证，数据的不可重复性（equals返回false）。\",\"如果我们只是简单的用新数据比对旧数据，那么当集合中的数据过多时，就要跟之前添加的每一个数据进行equals比对，效率太低，所以java采用的别的方法，以HashSet为例：\"]},\"1642\":{\"h\":\"7.1 核心原理\",\"t\":[\"不同数据的hash值是不同的，所以java采用了一种特殊的算法，先把要添加的元素取哈希值，然后通过一种算法算出他应该储存的位置（比如取模16）。\",\"这样，如果两个数据的哈希值不同，就一定不会放到同一个位置，即存放数据之前，只要该位置没有其他数据，就一定不会存在重复的数据\",\"而如果两个元素通过算法计算的位置是一样的（元素不一定相同），则先去判断hash值是否相同，不同就添加成功，相同的话再去判断equals，如果不同就以链表的形式添加到该元素后面，如果相同，就添加失败。\",\"无序性：这也是为什么Set集合是无序的原因：为了高效的进行互斥性比对。\"]},\"1643\":{\"h\":\"7.2 添加过程分析\",\"t\":[\"①向HashSet中添加元素a：首先调用元素所在类的hashCode()方法，计算元素a的哈希值，此哈希值，接着通过某种算法计算在HashSet底层数组中存放的位置（索引位置）。\",\"②判断要添加的位置上有没有其他元素： \",\"情况1：没有其他元素，直接添加成功\",\"有其他元素b（或者以链表形式存在多个元素），这比较a与元素b的hash值 \",\"情况2：hash值不同，添加成功\",\"hash值相同，则需要调用a所在类的equals方法： \",\"返回true，元素a添加失败\",\"情况3：返回false，添加成功\"]},\"1644\":{\"h\":\"7.3 储存的方式\",\"t\":[\"HashSet底层是以数组+链表的形式储存的。\",\"添加元素时，元素首先以数组的形式储存【上述情况1】。如果数组的索引处已经有值了，还需要在此处添加元素【上述情况2和3】，则与已经存在指定索引位置上数据以链表的方式存储。\"]},\"1645\":{\"h\":\"7.4 链表的形式：\",\"t\":[\"jdk 7 :元素a放到数组中，指向原来的元素。\",\"jdk 8 :原来的元素在数组中，指向元素a\",\"6-5-1\"]},\"1646\":{\"h\":\"8. hashCode与equals的重写\",\"t\":[\"要求：向set(主要指：HashSet、LinkedHashSet)中添加的数据，其所在的类一定要重写hashCode()和equals()，尤其是自定义的类。\"]},\"1647\":{\"h\":\"8.1 HahsCode\",\"t\":[\"对于object元素，即使两个对象完全一样（equals为true），但是只要他们不是同一个对象，其hashcode也是不同的，因为Object类底层默认是通过对象储存的地址来计算hashcode的，对象的存放地址是随机的，即hashcode值也是随机，且不同的。\",\"因此，对于自定义类，我们要重写hashCode()方法。\"]},\"1648\":{\"h\":\"8.2 equals\",\"t\":[\"因为我们想通过对象的值是否相同来判断对象的异同，而非地址，因此要重写equals方法\"]},\"1649\":{\"h\":\"8.3 重写原则\",\"t\":[\"在ideal中，直接alt + insert，让编辑器帮我们重写即可。具体重写的规则和细节，暂时不需要掌握。\",\"如果自己手动重写，则有以下注意点：\",\"重写的hashCode()和equals()尽可能保持一致性：相等的对象必须具有相等的散列码\",\"小技巧：对象中用作 equals() 方法比较的 Field，都应该用来计算 hashCode 值。\"]},\"1650\":{\"h\":\"9. 补充：hashCode与值\",\"t\":[\"结论：hashCode相同，值不一定相同，值相同，那么hashCode一定相同。\",\"不同的类对hashCode的重写方式（算法）不同，可能会造成不同对象拥有相同的HashCode。\"]},\"1651\":{\"h\":\"9.1 哈希算法\",\"t\":[\"详情，查询：密码学，哈希算法；\",\"哈希值的长度是固定的，也就是取值范围是有限的，而输入数据的取值范围是无限的，所以总会找到两个不同的输入拥有相同的哈希。所以，哈希函数的安全性肯定是个相对概念。如果出现了两个不同输入有相同输出的情况，就叫碰撞，collision 。不同的哈希算法，哈希位数越多，也就基本意味着安全级别越高，或者说它的”抗碰撞性“就越好。\",\"我们在重写hashCode，设计哈希算法时，要综合考虑效率和”哈希冲突“。\"]},\"1652\":{\"h\":\"9.2 哈希冲突\",\"t\":[\"当两个不同对象的哈希值相同时，就称为：哈希冲突。\",\"频繁的哈希冲突会降低数据存取的效率，需要优化哈希算法。\"]},\"1653\":{\"h\":\"Ⅱ. Set 使用\",\"t\":[\"Set接口中没有额外定义新的方法，使用的都是Collection中声明过的方法。\",\"基本的使用，就是Collection接口中方法的使用。\"]},\"1654\":{\"h\":\"1. LinkedHashSet\",\"t\":[\"LinkedHashSet作为HashSet的子类，也不允许出现重复的元素。\",\"遍历LinkedHashSet集合，会根据添加数据的顺序进行遍历。\",\"底层：LinkedHashSet 根据元素的 hashCode 值来决定元素的存储位置，但它同时使用双向链表维护元素的次序，这使得元素看起来是以插入顺序保存的记录了一个双向链表。\",\"特点：LinkedHashSet插入性能略低于 HashSet，但对于频繁的遍历操作，LinkedHashSet效率高于HashSet。\",\"注意：当TreeSet的构造函数有没有参数时，该集合的类必须实现Comparable接口，并重写compareTo方法，当TreeSet有参数时，该参数必须是Comparator的对象。\",\"使用示例：\",\"LinkedHashSet set = new LinkedHashSet(); set.add(456); set.add(123); set.add(123); set.add(\\\"AA\\\"); set.add(\\\"CC\\\"); set.add(new User(\\\"Tom\\\",12)); set.add(new User(\\\"Tom\\\",12)); set.add(129); //打印结果：[456, 123, AA, CC, User{name='Tom', age=12}, 129] System.out.println(set); Iterator it = set.iterator(); while(it.hasNext()){ System.out.println(it.next()); } \",\"注意：自定义类中一定要重写equal和hashcode方法\"]},\"1655\":{\"h\":\"2. TreeSet\",\"t\":[\"如果使用TreeSet，一定要重写compareTo方法或compare方法，不然会抛出异常（JDK1.8）。 TreeSet遍历数据，会根据自己定义的排序方式进行排序。\",\"向TreeSet中添加的数据，要求是相同类的对象。不然就报异常。TreeSet中不允许添加相同的对象。\",\"底层：TreeSet底层是红黑树\"]},\"1656\":{\"h\":\"2.1 比较对象是否相同的方法\",\"t\":[\"TreeSet中，不是通过比较两个对象的equals和hashcode来判断是否相同的，而是通过排序方法。\",\"①自然排序：compareTo()返回0，即两个对象相同\",\"②定制排序：compare()返回0，即两个对象相同\"]},\"1657\":{\"h\":\"2.2 示例：自然排序\",\"t\":[\"TreeSet set = new TreeSet(); set.add(new User(\\\"Tom\\\",12)); set.add(new User(\\\"Jerry\\\",32)); set.add(new User(\\\"Jack\\\",33)); set.add(new User(\\\"Jack\\\",33)); //[User{name='Tom', age=12}, User{name='Jerry', age=32}, //User{name='Jack', age=33}] System.out.println(set); //重复的数据被排除 ============================================ //compareTo的重写 public int compareTo(Object o) { if(o instanceof User){ User user = (User)o; int compare = -this.name.compareTo(user.name); if(compare != 0){ return compare; }else{ return Integer.compare(this.age,user.age); } }else{ throw new RuntimeException(\\\"输入的类型不匹配\\\"); } } \"]},\"1658\":{\"h\":\"2.3 示例：定制排序\",\"t\":[\"定制排序，就是使用Comparetor接口进行排序。\",\"如果使用定制排序，那么TreeSet的构造函数需要传入参数，参数就是Comparator接口的实例。\",\"//Comparator接口的实例 Comparator com = new Comparator(){ public int compare(Object o1,Object o2){ if(o1 instanceof User && o2 instanceof User){ User u1 = (User)o1; User u2 = (User)o2; return Integer.compare(u1.getAge(),u2.getAge()); }else{ throw new RuntimeException(\\\"输入的数据类型不匹配\\\"); } } }; TreeSet set = new TreeSet(com); //将Comparator对象作为参数 ...//其它的同上，可以进行add和其他操作了。 \"]},\"1659\":{\"h\":\"6-6. Map\"},\"1660\":{\"h\":\"Ⅰ. Map 接口\"},\"1661\":{\"h\":\"1. 概述\",\"t\":[\"Map与Collection并列存在。用于保存具有 映射关系的数据:key-value\",\"Map 中的 key 和 value 都可以是任何引用类型的数据\",\"Map 中的 key 用Set来存放，不允许重复，即同一个 Map 对象所对应的类，须重写hashCode()和equals()方法 \",\"常用String类作为Map的“键”\",\"key 和 value 之间存在单向一对一关系，即通过指定的 key 总能找到唯一的、确定的 value\",\"Map接口的常用实现类：HashMap、TreeMap、LinkedHashMap和Properties。 \",\"其中，HashMap是 Map 接口使用频率最高的实现类。\"]},\"1662\":{\"h\":\"2. Map接口的继承结构\",\"t\":[\"Map:双列数据，存储key-value对的数据 ---类似于高中的函数：y = f(x) \",\"HashMap 【第一个实现类】 \",\"LinkedHashMap【第二个实现类】\",\"TreeMap【第三个实现类】\",\"Hashtable【第四个实现类】 \",\"Properties【第五个实现类】\"]},\"1663\":{\"h\":\"3. 实现类简介\"},\"1664\":{\"h\":\"3.1 HashMap【使用频率最高的实现类】\",\"t\":[\"底层结构：数组+链表 （jdk7及之前）；数组+链表+红黑树 （jdk 8）\",\"线程不安全的，效率高；\",\"允许使用null键和null值，与HashSet一样，不保证映射的顺序。\",\"所有的key构成的集合是Set:无序的、不可重复的。所以，key所在的类要重写：equals()和hashCode() \",\"HashMap 判断两个 key 相等的标准是：两个 key 通过 equals() 方法返回 true，hashCode 值也相等。\",\"所有的value构成的集合是Collection:无序的、可以重复的。所以，value所在的类要重写：equals() \",\"HashMap 判断两个 value 相等的标准是：两个 value 通过 equals() 方法返回 true。\",\"一个key-value构成一个entry，所有的entry构成的集合是Set:无序的、不可重复的\",\"注意：HashMap是无序的，添加顺序和遍历顺序并没有关联。\"]},\"1665\":{\"h\":\"3.2 LinkedHashMap\",\"t\":[\"底层结构：同上\",\"LinkedHashMap 是 HashMap 的子类\",\"遍历map元素时，可以按照添加的顺序实现遍历。 \",\"原因：在原有的HashMap底层结构基础上，添加了双向链表结构。\",\"特点：对于频繁的遍历操作，此类执行效率高于HashMap。\"]},\"1666\":{\"h\":\"3.3 TreeMap\",\"t\":[\"底层结构：红黑树\",\"TreeMap存储 Key-Value 对时，需要根据 key-value 对进行 \",\"key可以自然排序或定制排序\",\"TreeMap 可以保证所有的 Key-Value 对处于有序状态。\",\"TreeMap判断 两个key 相等的标准：两个key通过compareTo()方法或者compare()方法返回0。\"]},\"1667\":{\"h\":\"3.4 Hashtable\",\"t\":[\"实现原理和结构与HashMap相同，功能也相同，基本被抛弃。\",\"作为古老的实现类；线程安全的，效率低；不能存储null的key和value\"]},\"1668\":{\"h\":\"3.5 Properties\",\"t\":[\"Hahstable的子类，常用来处理配置文件。\",\"由于属性文件里的 key、value 都是字符串类型，所以 Properties 里的key和value都是String类型\",\"存取数据时，建议使用setProperty(String key,String value)方法和getProperty(String key)方法\"]},\"1669\":{\"h\":\"4. Map常用方法\",\"t\":[\"详见：内置函数>List & Map\"]},\"1670\":{\"h\":\"5. key-value的储存特点\",\"t\":[\"以HashMap为例\",\"Key：无序的、不可重复的，使用Set存储所有的key； \",\"key所在的类要重写equals()和hashCode() （以HashMap为例）\",\"Value：无序的、可重复的，使用Collection存储所有的value \",\"value所在的类要重写equals()，因为要进行查询。\",\"Entry：键值对key-value，构成了一个Entry对象。 \",\"Map中的entry:无序的、不可重复的，使用Set存储所有的entry\"]},\"1671\":{\"h\":\"Ⅱ. HashMap底层\"},\"1672\":{\"h\":\"1. JDK7中底层实现原理\"},\"1673\":{\"h\":\"1.1 初始化\",\"t\":[\"在实例化以后，底层创建了长度是16的一维数组Entry[] table。\",\"HashMap<Integer, String> map = new HashMap<>(); \"]},\"1674\":{\"h\":\"1.2 添加数据\",\"t\":[\"map.put(key1,value1): 首先，调用key1所在类的hashCode()计算key1哈希值，此哈希值经过某种算法计算以后，得到在Entry数组中的存放位置。\",\"情况1：如果此位置上的数据为空，此时的key1-value1添加成功。\",\"如果此位置上的数据不为空，(意味着此位置上存在一个或多个数据(以链表形式存在)),此时应比较key1和已经存在的一个或多个数据的哈希值： \",\"情况2：如果key1的哈希值与已经存在的数据的哈希值都不相同，此时key1-value1添加成功。\",\"如果key1的哈希值和已经存在的某一个数据(key2-value2)的哈希值相同，继续比较：调用key1所在类的equals(key2)方法，比较： \",\"情况3-1：如果equals()返回false:此时key1-value1添加成功。\",\"情况3-2：如果equals()返回true:使用value1替换value2。\"]},\"1675\":{\"h\":\"1.3 链表的产生\",\"t\":[\"关于情况2和情况3-1：此时key1-value1和原来的数据以链表的方式存储。\"]},\"1676\":{\"h\":\"1.4 扩容\",\"t\":[\"在不断的添加过程中，会涉及到扩容问题，当超出临界值(且要存放的位置非空)时，扩容。默认的扩容方式：扩容为原来容量的2倍，并将原有的数据复制过来。\"]},\"1677\":{\"h\":\"1.5 储存结构图\",\"t\":[\"①JDK7：HashMap是数组+链表结构(即为链地址法)\",\"6-6-2\",\"②JDK8：HashMap是数组+链表+红黑树实现。\",\"6-6-3\"]},\"1678\":{\"h\":\"2. JDK8中的底层实现原理\",\"t\":[\"相较于jdk7在底层实现方面的不同点为：\",\"new HashMap():底层没有创建一个长度为16的数组\",\"首次调用put()方法时，底层创建长度为16的数组\",\"jdk 8底层的数组是：Node[],而非Entry[]\",\"jdk7底层结构只有：数组+链表。jdk8中底层结构：数组+链表+红黑树。 \",\"形成链表时，七上八下（jdk7:新元素指向旧元素。jdk8：旧元素指向新元素）\",\"红黑树的形成：当数组的某一个索引位置上的元素以链表形式存在的数据个数 > 8且当前数组的长度 > 64时，此时此索引位置上的所数据改为使用红黑树存储（比对速度更快）。\"]},\"1679\":{\"h\":\"3. 源码分析\",\"t\":[\"暂略。\"]},\"1680\":{\"h\":\"4. 源码中的一些重要常量\",\"t\":[\"DEFAULT_INITIAL_CAPACITY : HashMap的默认容量，16\",\"MAXIMUM_CAPACITY ： ： HashMap的最大支持容量，2^30\",\"DEFAULT_LOAD_FACTOR ：HashMap的默认加载因子\",\"TREEIFY_THRESHOLD ：Bucket中链表长度大于该默认值，转化为红黑树 -UNTREEIFY_THRESHOLD ：Bucket中红黑树存储的Node小于该默认值，转化为链表\",\"MIN_TREEIFY_CAPACITY ：桶中的Node被树化时最小的hash表容量。（当桶中Node的数量大到需要变红黑树时，若hash表容量小于MIN_TREEIFY_CAPACITY时，此时应执行resize扩容操作这个- MIN_TREEIFY_CAPACITY的值至少是TREEIFY_THRESHOLD的4倍。）\",\"table ：存储元素的数组，总是2的n次幂\",\"entrySet： ：存储具体元素的集\",\"size ：HashMap中存储的键值对的数量\",\"modCount ：HashMap扩容和结构改变的次数。\",\"threshold ：扩容的临界值，=容量*填充因子\",\"loadFactor： ：填充因子\"]},\"1681\":{\"h\":\"Ⅲ. LinkedHashMap\"},\"1682\":{\"h\":\"1. 底层\",\"t\":[\"暂略，比HahsMap多了个双向链表，\",\"顺序：迭代顺序与 Key-Value 对的插入顺序一致\"]},\"1683\":{\"h\":\"2. 使用\",\"t\":[\"LinkedHashMap map = new LinkedHashMap(); map.put(123,\\\"AA\\\"); map.put(345,\\\"BB\\\"); map.put(12,\\\"CC\\\"); //遍历顺序与添加顺序一致 System.out.println(map); //{123=AA, 345=BB, 12=CC} \"]},\"1684\":{\"h\":\"Ⅳ. TreeMap\"},\"1685\":{\"h\":\"1. 特点\",\"t\":[\"TreeMap存储 Key-Value 对时，需要根据 key-value 对进行排序。 \",\"TreeMap 可以保证所有的 Key-Value 对处于 有序状态。\",\"TreeSet底层使用 红黑树结构存储数据\",\"TreeMap判断 两个key 相等的标准：两个key通过compareTo()方法或者compare()方法返回0。\"]},\"1686\":{\"h\":\"2. 排序\",\"t\":[\"向TreeMap中添加key-value，要求key必须是由同一个类创建的对象，因为要按照key进行排序。排序分为：自然排序和定制排序\",\"实际开发中，我们一般使用String作为key，String内部已经重新了排序了。\"]},\"1687\":{\"h\":\"2.1 自然排序\",\"t\":[\"需要key所在的类，实现Comparable，重写compareTo方法\",\"TreeMap map = new TreeMap(); User u1 = new User(\\\"Tom\\\",23); User u2 = new User(\\\"Jerry\\\",32); User u3 = new User(\\\"Jack\\\",20); User u4 = new User(\\\"Rose\\\",18) ===== User类中已经重写了compareTo ===== map.put(u1,98); map.put(u2,89); map.put(u3,76); map.put(u4,100); Set entrySet = map.entrySet(); Iterator iterator1 = entrySet.iterator(); while (iterator1.hasNext()){ Object obj = iterator1.next(); Map.Entry entry = (Map.Entry) obj; //根据自定义的排序方式进行了排序输出 System.out.println(entry.getKey() + \\\"---->\\\" + entry.getValue()); } \"]},\"1688\":{\"h\":\"2.2 定制排序\",\"t\":[\"TreeMap的构造器接收一个参数，参数即为Comparator接口的实例，接口中重写类的排序方法compare。\",\"TreeMap map = new TreeMap(new Comparator() { @Override public int compare(Object o1, Object o2) { if(o1 instanceof User && o2 instanceof User){ User u1 = (User)o1; User u2 = (User)o2; return Integer.compare(u1.getAge(),u2.getAge()); } throw new RuntimeException(\\\"输入的类型不匹配！\\\"); } }); //其他代码的同上 \"]},\"1689\":{\"h\":\"Ⅴ. Properties\",\"t\":[\"该类是专门用来处理项目中的配置文件的。\"]},\"1690\":{\"h\":\"1. 定义配置文件\",\"t\":[\"先定义一个配置文件，用于测试，例如：jdbc.properties（数据库连接的配置）\",\"uname=jinno password=123abc \"]},\"1691\":{\"h\":\"2. Properties类的方法\",\"t\":[\"getProperty(String key)：获取配置的值\",\"setProperty(String key,String value)：设置配置的值\"]},\"1692\":{\"h\":\"3. 读取配置文件，并加载配置信息\",\"t\":[\"利用Properties类可以读取配置信息。\",\"//1.创建Properties类的对象 Properties pros = new Properties(); //2.加载文件的流 FileInputStream fis = new FileInputStream(\\\"jdbc.properties\\\"); //3.加载流对应的文件 pros.load(fis); //4.读取配置信息 String uname = pros.getProperty(\\\"name\\\"); String password = pros.getProperty(\\\"password\\\"); System.out.println(uanme); //jinno System.out.println(password); //123abc \"]},\"1693\":{\"h\":\"6-7. Collections\",\"t\":[\"提示\",\"不要跟Collection搞混了，前者是个集合接口，后者是操作接口的工具类\",\"详见：内置函数>Collection+\"]},\"1694\":{\"h\":\"介绍\",\"t\":[\"Collections 是一个操作 Set、List 和 Map 等集合的工具类\",\"Map相关的方法比较少。\"]},\"1695\":{\"h\":\"静态方法\",\"t\":[\"Collections 中提供了一系列静态的方法对集合元素进行排序、查询和修改等操作，还提供了对集合对象设置不可变、对集合对象实现同步控制等方法。\"]},\"1696\":{\"h\":\"7-1. 使用泛型\"},\"1697\":{\"h\":\"Ⅰ. Generic 泛型\"},\"1698\":{\"h\":\"意义\",\"t\":[\"我们在定义数据类型时，有时不确定究竟定义为何种类型，以前的做法是定义为Object，这样什么类型的数据都支持。但是这样做，比较危险（类型错误），且麻烦（经常需要强制类型转换）。现在我们可以定义一个泛型，用一个符占位表示，可以在实例化时传递一个数据类型，这样在实际使用时，就可以确定他的数据类型了。\",\"核心：数据类型，先占位，用的时候再定义。\",\"使用泛型的主要优点是能够在编译时而不是在运行时检测错误。\"]},\"1699\":{\"h\":\"1. 泛型的设计背景\",\"t\":[\"集合容器类在设计阶段/声明阶段不能确定这个容器到底实际存的是什么类型的对象，所以在JDK1.5之前只能把元素类型设计为Object。JDK1.5之后使用泛型来解决。因为这个时候除了元素的类型不确定，其他的部分是确定的，例如关于这个元素如何保存，如何管理等是确定的，因此此时把元素的类型设计成一个参数，这个类型参数叫做泛型。\"]},\"1700\":{\"h\":\"2. 泛型的概念\",\"t\":[\"所谓泛型，就是允许在定义类、接口时通过一个标识表示类中某个属性的类型或者是某个方法的返回值及参数类型。这个类型参数将在使用时（例如，继承或实现这个接口，用这个类型声明变量、创建对象时）确定（即传入实际的类型参数，也称为类型实参）。\",\"参数化类型：从JDK1.5以后，Java引入了“参数化类型（Parameterized type）”的概念，允许我们在创建集合时再指定集合元素的类型，如：List<String>，这表明该List只能保存字符串类型的对象。\",\"泛型的发展：JDK1.5改写了集合框架中的全部接口和类，为这些接口、类增加了泛型支持，从而可以在声明集合变量、创建集合对象时传入类型实参。集合也是泛型使用最多的场景。\"]},\"1701\":{\"h\":\"3. 为什么要有泛型\",\"t\":[\"那么为什么要有泛型呢 ，直接Object 不是也可以存储数据吗 ？\"]},\"1702\":{\"h\":\"3.1 解决元素安全性问题\",\"t\":[\"解决元素存储的安全性问题，好比商品、药品标签，不会弄错。\"]},\"1703\":{\"h\":\"3.2 解决获取元素时强制类型转换的问题\",\"t\":[\"解决获取数据元素时，需要类型强制转换的问题，好比不用每回拿商品、药品都要辨别。\",\"Java泛型可以保证如果程序在编译时没有发出警告，运行时就不会产生 ClassCastException异常。同时，代码更加简洁、健壮。\"]},\"1704\":{\"h\":\"4. 集合中的泛型\",\"t\":[\"泛型主要用于集合，也可以用于自定义类。\"]},\"1705\":{\"h\":\"4.1 没有泛型时\",\"t\":[\"7-1-1\"]},\"1706\":{\"h\":\"4.2 有泛型时\",\"t\":[\"7-1-2\"]},\"1707\":{\"h\":\"5. 不使用泛型的缺点\",\"t\":[\"以ArrayList集合为例，假设我们的集合需要存放学生的成绩（int）。\",\"ArrayList list = new ArrayList(); //需求：存放学生的成绩 list.add(78); list.add(76); list.add(89); list.add(88); //问题一：类型不安全，Tom不是int类型的 list.add(\\\"Tom\\\"); for(Object score : list){ //问题二：强转时，可能出现ClassCastException，某个值不是int //问题二+：每次都要强转，比较繁琐 int stuScore = (Integer) score; System.out.println(stuScore); } \"]},\"1708\":{\"h\":\"Ⅱ. 集合中使用泛型\"},\"1709\":{\"h\":\"1. 使用示例：List集合\",\"t\":[\"//1.实例化ArrayList类时，可以指定泛型 ArrayList<Integer> list = new ArrayList<>(); list.add(10); list.add(20); list.add(30); //2.add方法是有泛型限制的，String类型添加失败 //泛型的类型检查，在编译时就会进行，保证了数据安全 //list.add(\\\"tom\\\"); //3.进行遍历 //3.1-1 这里可以直接指定泛型类型，而不是用Object for(Integer num:list){ //3.1-2 不用进行强转 Integer n = num; System.out.println(n); } //3.2-1 创建迭代器时，也会使用泛型 Iterator<Integer> it = list.iterator(); while(it.hasNext()){ //3.2-2 不用进行强转了 Integer n = it.next(); System.out.println(n); } \"]},\"1710\":{\"h\":\"2. 使用示例：Map集合\",\"t\":[\"注意：Map集合是K-V 数据结构，因此规定了两个泛型\",\"//1.实例化HashMap类时，指定了Key和Value的泛型 HashMap<String, Integer> map = new HashMap<>(); map.put(\\\"Jerry\\\",20); map.put(\\\"Tom\\\",40); map.put(\\\"Jinno\\\",50); //2.put方法是有泛型限制的，错误的类型添加失败 //map.put(20,\\\"jinno\\\"); //3.泛型的嵌套:entrySet方法得到的是一个嵌套的泛型 Set<Map.Entry<String, Integer>> entry = map.entrySet(); //4.Iterator方法也得到了了嵌套的泛型 Iterator<Map.Entry<String, Integer>> iterator = entry.iterator(); while(iterator.hasNext()){ //5.嵌套的泛型成为了数据类型 Map.Entry<String, Integer> e = iterator.next(); //6.这里省去了类型强转 String key = e.getKey(); Integer value = e.getValue(); System.out.println(key+\\\"--->\\\"+value); } \"]},\"1711\":{\"h\":\"3. 使用总结\",\"t\":[\"集合类的泛型 \",\"集合接口或集合类在jdk5.0时都修改为带泛型的结构，因此我们在使用的时候可以指定泛型。\",\"在类的定义时，没有指定泛型，用的时候就不能指定。\",\"指定泛型 \",\"在实例化集合类时，可以指明具体的泛型类型。\",\"一旦指明后，在集合类或接口中凡是定义类或接口时，内部结构（比如：方法、构造器、属性等）使用到类的泛型的位置，都指定为实例化的泛型类型。\",\"这些内部结构也都受到泛型的约束。\",\"泛型的类型 \",\"泛型的类型必须是类，不能是基本数据类型。需要用到基本数据类型的位置，拿包装类替换\",\"比如：int->Integer\",\"默认泛型 \",\"如果实例化时，没有指明泛型的类型。默认类型为java.lang.Object类型。\"]},\"1712\":{\"h\":\"7-2. 自定义泛型\"},\"1713\":{\"h\":\"Ⅰ. 自定义泛型类\"},\"1714\":{\"h\":\"1. 语法\",\"t\":[\"泛型一般用T、E、K、V字母表示。\"]},\"1715\":{\"h\":\"1.1 声明泛型接口和泛型类\",\"t\":[\"泛型类可能有多个参数，此时应将多个参数一起放在尖括号内，比如：<E1,E2,E3>\",\"interface List<T>{...} class GenTest<K,V>{...} \"]},\"1716\":{\"h\":\"1.2 泛型类的实例化\",\"t\":[\"构造器中只加个<>即可，指定类型参数的值。\",\"注意：泛型的类型只能是类，不能用基本数据类型填充。但可以使用包装类填充。\",\"List<String> strList = new ArrayList<String>(); List<String> strList = new ArrayList<>();//JDK1.7之后的语法 \"]},\"1717\":{\"h\":\"1.3 泛型类的构造器\",\"t\":[\"public GenericClass(){}//正确的 public GenericClass<E>(){} //错误的 \"]},\"1718\":{\"h\":\"2. 示例：自定义泛型类\"},\"1719\":{\"h\":\"2.1 定义泛型类\",\"t\":[\"//将该类定义为泛型类 public class Order <E>{ String orderName; int orderId; //定义一个泛型 类型的属性 E orderE; //泛型 类型 作为参数 public Order(String orderName,int orderId,E orderE){ this.orderName = orderName; this.orderId = orderId; this.orderE = orderE; } //泛型 类型 作为返回值 public void setOrderE(E orderE){ this.orderE = orderE; } } \"]},\"1720\":{\"h\":\"2.2 实例化泛型类\",\"t\":[\"public static void main(String[] args) { //定义泛型类，但可以不指定泛型，泛型默认是Object类型(不推荐) Order order = new Order(); //实例化时，指定泛型的类型（建议） Order<String> order1 = new Order<>(\\\"AA\\\", 10, \\\"E\\\"); //调用参数设置为泛型的函数，此时参数类型变为String order1.setOrderE(\\\"E-E\\\"); } \"]},\"1721\":{\"h\":\"3. 自定义泛型类（接口）的注意事项\",\"t\":[\"实例化后，操作原来泛型位置的结构必须与指定的泛型类型一致。\",\"泛型不同的引用不能相互赋值。\",\"ArrayList<String> list1 = new ArrayList<>(); ArrayList<String> list2 = new ArrayList<>(); ArrayList<Integer> list3 = new ArrayList<>(); list1 = list2; list1 = list2; //没报错 list3 = list2; //报错：编译不通过 \",\"泛型擦除：泛型如果不指定，将被擦除，泛型对应的类型均按照Object处理，但不等价于Object。 \",\"经验：泛型要使用一路都用。要不用，一路都不要用。\",\"包装类：泛型的指定中不能使用基本数据类型，可以使用包装类替换\",\"泛型修饰类/接口的成员：在类/接口上声明的泛型，在本类或本接口中即代表某种类型，可以作为非静态属性的类型、非静态方法的参数类型、非静态方法的返回值类型。 \",\"但在静态方法中不能使用类的泛型，因为类可以直接调用静态方法。\",\"异常类不能是泛型：包括自定义的异常类和try...catch中的异常类。\",\"泛型类型的数组：不能直接 new E[]，创建泛型数组，而是要利用Object进行强转。\",\"E[] arrs = (E[])new Object[10]; \"]},\"1722\":{\"h\":\"4. 继承泛型类\",\"t\":[\"父类有泛型，子类可以选择保留泛型也可以选择指定泛型类型\",\"class Father<T1, T2> {...} \"]},\"1723\":{\"h\":\"4.1 不保留泛型：擦除泛型\",\"t\":[\"Son1不是泛型类\",\"//等价于：lass Son extends Father<Object,Object>{...} class Son1 extends Father{...} Son1 son1 = new Son1(); \"]},\"1724\":{\"h\":\"4.2 不保留泛型：指定父类泛型具体类型\",\"t\":[\"Son2不是泛型类\",\"class Son2 extends Father<Integer, String> {...} Son2 son2 = new Son2(); \"]},\"1725\":{\"h\":\"4.3 保留泛型：全部保留\",\"t\":[\"Son3仍是泛型类\",\"class Son3<T1, T2> extends Father<T1, T2> {..} Son3<String, String> son3 = new Son3<>(); \"]},\"1726\":{\"h\":\"4.4 保留泛型：部分保留\",\"t\":[\"Son4仍是泛型类\",\"class Son4<T2> extends Father<Integer, T2> {...} Son4<String> son4 = new Son4<>(); \"]},\"1727\":{\"h\":\"Ⅱ. 自定义泛型方法\"},\"1728\":{\"h\":\"1. 定义\",\"t\":[\"概念：当一个方法，不确定变量的类型时，可以使用泛型，该方法就是泛型方法。\",\"在泛型方法中可以定义泛型参数，此时，参数的类型就是传入数据的类型\"]},\"1729\":{\"h\":\"注意\",\"t\":[\"泛型方法跟泛型类、泛型接口没有任何关系。\",\"泛型方法所属的类是不是泛型都没有关系\"]},\"1730\":{\"h\":\"2. 误区\",\"t\":[\"当类是泛型类时，假如定义了泛型标识E，那么方法参数类型是E的方法，并不是泛型方法，因为他的类型是确定的，和类初始化给的类型一致或是Object。\"]},\"1731\":{\"h\":\"3. 标识符\",\"t\":[\"当泛型方法所在类也是泛型类时，泛型方法使用的泛型标识，不要跟类的泛型标识一样。\"]},\"1732\":{\"h\":\"4. 语法\",\"t\":[\"访问权限 < 泛型> 返回类型 方法名([ 泛型标识 参数名称]) 抛出的异常\",\"public <T> String getUname(T id){...} \"]},\"1733\":{\"h\":\"5. 示例\",\"t\":[\"将数组中的数据copy到list中\",\"public <E> List<E> copyFromArrayToList(E[] arr){ ArrayList<E> list = new ArrayList<>(); for(E e : arr){ list.add(e); } return list; } \"]},\"1734\":{\"h\":\"6. 静态化\",\"t\":[\"public static <E> List<E> copyFromArrayToList(E[] arr){...} \",\"泛型方法，可以声明为静态的。\",\"原因：泛型参数是在调用方法时确定的。并非在实例化类时确定。\"]},\"1735\":{\"h\":\"7-3. 通配符\"},\"1736\":{\"h\":\"Ⅰ. 继承里的泛型\"},\"1737\":{\"h\":\"1. 不同泛型的类，不具备父子关系，不能互相赋值\",\"t\":[\"例如：B是A的一个子类型（子类或者子接口），而G是具有泛型声明的类或接口，G<B>并不是G<A>的子类型！\",\"List<Object> list1 = null; List<String> list2 = new ArrayList<String>(); //2.编译不通过，不是同一个 //list1 = list2 \"]},\"1738\":{\"h\":\"2. 相同泛型的父子类，具有继承关系\",\"t\":[\"例如：类A是类B的父类，A<G> 是 B<G> 的父类\",\"AbstractList<String> list1 = null; List<String> list2 = null; ArrayList<String> list3 = null; list1 = list3; list2 = list3; \"]},\"1739\":{\"h\":\"3. 总结\",\"t\":[\"带泛型的对象，降低了多态的范围，对子类要求也要具备相应的泛型，才能使用多态的特性。不过，我们可以用通配符解决这个问题\"]},\"1740\":{\"h\":\"Ⅱ. 通配符的使用\"},\"1741\":{\"h\":\"1. 通配符\",\"t\":[\"不同泛型的父子类，不具有继承关系，这造成了很大的麻烦，因此有了通配符。\",\"？：通配符，表示所有泛型的父类。\",\"类A是类B的父类，G<A>和G<B>是没有关系的，二者共同的父类是：G<?>\"]},\"1742\":{\"h\":\"2. 使用通配符\"},\"1743\":{\"h\":\"2.1 ？：赋值\",\"t\":[\"List<Object> list1 = null; List<String> list2 = null; List<?> list = null; //无法赋值，报错 //List1 = list2; //可以赋值,List<?>是另外两个的父类 list = list1; list = list2; \"]},\"1744\":{\"h\":\"2.2 添加数据\",\"t\":[\"对于List<?>，不能向其内部添加数据，除了添加null之外\",\"//以下两个add方法，产生编译错误 //list.add(\\\"DD\\\"); //list.add('?'); //只能添加null list.add(null); \"]},\"1745\":{\"h\":\"2.3 获取数据\",\"t\":[\"？泛型，允许读取数据，读取的数据类型为Object。\",\"List<String> list3 = new ArrayList<>(); List<?> list = null; list3.add(\\\"AA\\\"); list3.add(\\\"BB\\\"); list3.add(\\\"CC\\\"); list = list3; //可以获取数据, Object o = list.get(0); System.out.println(o); //aa \"]},\"1746\":{\"h\":\"3. 方法的使用示例\",\"t\":[\"要求：定义一个方法，用来遍历List类型的集合。\"]},\"1747\":{\"h\":\"3.1 不使用通配符泛型\",\"t\":[\"如下：我们定义的方法中，参数类型是 List<String>,因此该方法只能被泛型为String的List调用，其他泛型的List就无法调用了，如果其他泛型的List想使用功能这个遍历方法，就需要定义多个不同泛型类型的遍历方法，非常的冗余。\",\"//1.定义方法 public void print(List<String> list){ Iterator<?> iterator = list.iterator(); while(iterator.hasNext()){ Object obj = iterator.next(); System.out.println(obj); } } //2.使用方法 GenericTest test = new GenericTest(); ArrayList<String> list1 = new ArrayList<>(); list1.add(\\\"aa\\\"); list1.add(\\\"bb\\\"); test.print(list1); //aa;bb ArrayList<Integer> list2 = new ArrayList<>(); list2.add(11); list2.add(22); //报错，参数类型错误，无法调用该方法 test.print(list2); \"]},\"1748\":{\"h\":\"3.2 使用通配符泛型\",\"t\":[\"如下：我们定义的方法中，类型是List<?>；我们在使用的时候，泛型是任何类型的List都可以调用这个方法；通配符大大扩大了方法的兼容性，我们不用为每一个泛型都定义一个同样的方法了。\",\"//1.定义方法 public void print(List<?> list){ Iterator<?> iterator = list.iterator(); while(iterator.hasNext()){ Object obj = iterator.next(); System.out.println(obj); } } //2.使用方法 GenericTest test = new GenericTest(); ArrayList<String> list1 = new ArrayList<>(); list1.add(\\\"aa\\\"); list1.add(\\\"bb\\\"); test.print(list1); //aa;bb ArrayList<Integer> list2 = new ArrayList<>(); list2.add(11); list2.add(22); test.print(list2); //11;22 \"]},\"1749\":{\"h\":\"3.3 总结\",\"t\":[\"带通配符的泛型，是其他所有泛型的父类，相当于实现了泛型中的多态。我们使用功能泛型通配符，即保证了，集合中的元素都是同一类型，有能适配所有的泛型。\",\"场景：只对集合内元素类型统一有要求，具体是什么类型无要求，比如各种集合工具类\"]},\"1750\":{\"h\":\"4. 有限制条件的通配符\",\"t\":[\"即为通配符指定匹配的上限和下限\"]},\"1751\":{\"h\":\"4.1 extends:上限\",\"t\":[\"? extends A\",\"即，通配符只能表示A类，或A类的子类 ==> ( 无穷小，A]\"]},\"1752\":{\"h\":\"4.2 super：下限\",\"t\":[\"? super A\",\"即，通配符只能表示A类，或A类的父类==> ( A，无穷大]\"]},\"1753\":{\"h\":\"4.3 示例\",\"t\":[\"//1.定义父子类 class Person{} class Man extends Person{} //2.使用有限制的? //list1: <= Person类 List<? extends Person> list1 = null; //list2: >= Person类 List<? super Person> list2 = null; //3. List<Man> list3 = new ArrayList<Man>(); List<Person> list4 = new ArrayList<Person>(); List<Object> list5 = new ArrayList<Object>(); //4.1 测试extends list1: <= Person类 list1 = list3; list1 = list4; //list1 = list5;//编译报错 //4.2 测试Super list2: >= Person类 //list2 = list3;//编译错误 list2 = list4; list2 = list5; \"]},\"1754\":{\"h\":\"5. 注意事项\",\"t\":[\"一般只用在集合上。\"]},\"1755\":{\"h\":\"5.1 不能用在泛型方法声明上\",\"t\":[\"//注意点1：编译错误：不能用在泛型方法声明上，返回值类型前面<>不能使用? public static <?> void test(ArrayList<?> list){ } \"]},\"1756\":{\"h\":\"5.2 不能用在泛型类的声明上\",\"t\":[\"//注意点2：编译错误：不能用在泛型类的声明上 class GenericTypeClass<?>{ } \"]},\"1757\":{\"h\":\"5.3 不能用在创建对象上\",\"t\":[\"//注意点3：编译错误：不能用在创建对象上，右边属于创建集合对象 ArrayList<?> list2 = new ArrayList<?>(); \"]},\"1758\":{\"h\":\"8-1. File\"},\"1759\":{\"h\":\"Ⅰ. File 类\"},\"1760\":{\"h\":\"1. 类介绍\",\"t\":[\"java.io.File类：文件和文件目录路径的抽象表示形式，与平台无关。File类即能表示文件，也能表示目录（目录本质也是文件）。\",\"约定：\",\"广义文件：文件和目录\",\"狭义文件或文件：仅指文件\",\"目录：仅值目录\"]},\"1761\":{\"h\":\"2. File的作用\",\"t\":[\"File 能新建、删除、重命名文件和目录，但 File 不能访问文件内容本身。\",\"如果需要访问文件内容本身，则需要使用输入/输出流（File对象可以作为参数传递给流的构造器）。\"]},\"1762\":{\"h\":\"3. File类与文件\",\"t\":[\"想要在Java程序中表示一个真实存在的文件或目录，那么必须有一个File对象。但是Java程序中的一个File对象，可能没有一个真实存在的文件或目录。\",\"即：我们操作File类是在内存层面上进行操作的，硬盘上没有这个文件也可以。\",\"8-1-1\"]},\"1763\":{\"h\":\"4. 路径分隔符\",\"t\":[\"路径中的每级目录之间用一个路径分隔符隔开。\"]},\"1764\":{\"h\":\"4.1 路径分隔符和系统有关\",\"t\":[\"windows和DOS系统默认使用“\\\\”来表示\",\"UNIX和URL使用“/”来表示 但在windows下使用 \\\"/\\\"，也能识别，因此统一使用\\\"/\\\"\"]},\"1765\":{\"h\":\"4.2 分隔符常量\",\"t\":[\"File类提供了一个常量：public static final String separator。\",\"根据操作系统，动态的提供分隔符\"]},\"1766\":{\"h\":\"5. File：常用构造器\"},\"1767\":{\"h\":\"5.1 public File(String pathname)\",\"t\":[\"以pathname为路径创建File对象，可以是 绝对路径或者相对路径，\",\"如果pathname是相对路径，则默认的当前路径在系统属性user.dir中存储 \",\"在JDK1.8中user.dir默认为项目路径。\",\"如果是在单元测试里运行代码，那么user.dir默认是在当前module中的。\",\"File f1 = new File(\\\"hello.txt\\\"); File f2 = new File(\\\"D:/Java/workplace/Demo/study/hi.txt\\\"); System.out.println(f1); //hello.txt System.out.println(f2); //D:\\\\Java\\\\workplace\\\\Demo\\\\study\\\\hi.txt //默认为项目路径:\\\\Java\\\\workplace\\\\Demo (Demo是我创建的项目名) System.out.println(System.getProperty(\\\"user.dir\\\")); \"]},\"1768\":{\"h\":\"5.2 public File(String parent,String child)\",\"t\":[\"parent：父路径\",\"child：子路径\",\"File f3 = new File(\\\"D:/Java/workplace/Demo/study\\\", \\\"img\\\"); //路径也是一种文件，万物皆文件 System.out.println(f3); // D:\\\\Java\\\\workplace\\\\Demo\\\\study\\\\img \"]},\"1769\":{\"h\":\"5.3 public File(File parent,String child)\",\"t\":[\"parent：父File对象\",\"child：子文件路径\"]},\"1770\":{\"h\":\"6. 创建硬盘文件\",\"t\":[\"先创建File对象，然后再调用创建文件或目录的方法进行创建。\",\"文件和目录创建的路径和名字就是File对象的路径和名字。\",\"如果文件或目录已经存在了，就无法进行创建，返回false\",\"目录本身也是文件，文件是可以没有后缀的，同一目录下的目录和文件不能同名\",\"一个无实体的File对象即可以是目录也可以是文件，就看用什么方法创建\"]},\"1771\":{\"h\":\"Ⅱ. File 常用方法\",\"t\":[\"详见：内置函数>IO类\"]},\"1772\":{\"h\":\"8-2. IO流介绍\"},\"1773\":{\"h\":\"1. IO简介\",\"t\":[\"什么是IO：I/O是Input/Output的缩写；I/O技术是非常实用的技术，用于处理设备之间的数据传输。如读/写文件，网络通讯等。\",\"stream：流：Java程序中，对于数据的输入/输出操作以 “流(stream)” 的方式进行。\",\"流的接口：java.io包下提供了各种“流”类和接口，用以获取不同种类的数据，并通过 标准的方法输入或输出数据。\"]},\"1774\":{\"h\":\"2. Java IO原理\",\"t\":[\"输入 input：读取外部数据（磁盘、光盘等存储设备的数据）到程序（内存）中。\",\"输出 output：将程序（内存）数据输出到磁盘、光盘等存储设备中。\"]},\"1775\":{\"h\":\"3. 流的分类\",\"t\":[\"8-2-1\",\"按操作 数据单位不同 \",\"字节流(8bit)：操作二进制字节\",\"字符流(16bit)：直接操作字符，适用于文本文件\",\"按数据流的流向不同 \",\"输入流\",\"输出流\",\"按流的角色的不同 \",\"节点流（直接连接文件）：直接从数据源或目的地读写数据\",\"处理流（不直接连接文件：不直接连接到数据源或目的地，而是“连接”在已存在的流（节点流或其他处理流）之上，通过对数据的处理为程序提供更为强大的读写功能。\"]},\"1776\":{\"h\":\"4. 抽象基类\",\"t\":[\"Java的IO流共涉及40多个类，实际上非常规则，都是从如下4个抽象基类派生的。\",\"由这四个类派生出来的子类名称都是以其父类名作为子类名后缀。\",\"8-2-2\"]},\"1777\":{\"h\":\"5. IO流体系\",\"t\":[\"类的识别技巧：\",\"Input：输入；\",\"Output：输出\",\"Stream：字节流\",\"Reader：输入字符流\",\"Writer：输出字符流\",\"8-2-3\"]},\"1778\":{\"h\":\"6. 节点流和处理流\"},\"1779\":{\"h\":\"6.1 节点流\",\"t\":[\"直接从数据源或目的地读写数据\",\"8-2-4\"]},\"1780\":{\"h\":\"6.2 处理流\",\"t\":[\"不直接连接到数据源或目的地，而是“连接”在已存在的流（节点流或处理流）之上，通过对数据的处理为程序提供更为强大的读写功能。\",\"8-2-5\"]},\"1781\":{\"h\":\"8-3. 流的基类\"},\"1782\":{\"h\":\"说明\",\"t\":[\"流的基类都是节点流\",\"8-3-1\"]},\"1783\":{\"h\":\"1. 输入流：InputStream & Reader\",\"t\":[\"InputStream 和 Reader 是所有输入流的基类。\"]},\"1784\":{\"h\":\"1.1 InputStream\",\"t\":[\"典型实现：FileInputStream\",\"FileInputStream 从文件系统中的某个文件中获得输入字节。FileInputStream用于读取非文本数据之类的原始字节流。\"]},\"1785\":{\"h\":\"1.2 Reader\",\"t\":[\"典型实现：FileReader\",\"要读取字符流，需要使用 FileReader\"]},\"1786\":{\"h\":\"2. 输出流：OutPutStream & Writer\"},\"1787\":{\"h\":\"2.1 OutPutStream\",\"t\":[\"典型实现：FileOutputStream\",\"FileOutputStream 从文件系统中的某个文件中获得输出字节。FileOutputStream用于写出非文本数据之类的原始字节流。\"]},\"1788\":{\"h\":\"2.2 Writer\",\"t\":[\"典型实现：FileWriter\",\"要写出字符流，需要使用 FileWriter\"]},\"1789\":{\"h\":\"3. 关闭流\",\"t\":[\"程序中打开的文件 IO 资源不属于内存里的资源，垃圾回收机制无法回收该资源，所以应该件 显式关闭文件 IO 资源。\"]},\"1790\":{\"h\":\"4. 字节流与字符流的选择\",\"t\":[\"文本文件->字符流，以字符而非字节为单位读取\",\"非文本文件->字节流：能够解析\",\"如果字符流操作非文本文件，会无法解析。如果字节流操作文本文件，在内存层面读（println）可能会乱码\"]},\"1791\":{\"h\":\"5. 节点流\",\"t\":[\"节点流是最基本的实现（典型实现），其他实现跟节点流类似。\",\"实际开发中，我们不会去直接使用节点流，因为他读写效率比较低。\"]},\"1792\":{\"h\":\"6. 流操作的基本步骤\",\"t\":[\"创建文件对象\",\"创建流对象（读/写）\",\"进行流的操作（读/写）\",\"关闭流（close） 以上操作需要进行异常处理\"]},\"1793\":{\"h\":\"7. 输入流与输出流的方法\",\"t\":[\"详见：内置函数>IO类\"]},\"1794\":{\"h\":\"8-4. 节点流\"},\"1795\":{\"h\":\"Ⅰ. 节点流介绍\",\"t\":[\"节点流是流基类的典型实现，直接从数据源或目的地读写数据。 实际开发中，我们不会去直接使用节点流，因为他读写效率比较低。\"]},\"1796\":{\"h\":\"1. 节点流的方法\",\"t\":[\"和流基类的方法一样。\",\"详见：内置函数>IO类\"]},\"1797\":{\"h\":\"2. 注意点\",\"t\":[\"定义文件路径时，注意：可以用“/”或者“\\\\”。\",\"在写入一个文件时，如果使用构造器FileOutputStream(file)，则目录下有同名文件将被覆盖。\",\"如果使用构造器FileOutputStream(file,true)，则目录下的同名文件不会被覆盖，在文件内容末尾追加内容。\",\"在读取文件时，必须保证该文件已存在，否则报异常。\",\"字节流操作字节，比如：.mp3，.avi，.rmvb，mp4，.jpg，.doc，.ppt\",\"字符流操作字符，只能操作普通文本文件。最常见的文本文件：.txt，.java，.c，.cpp 等语言的源代码。尤其注意.doc,excel,ppt这些不是文本文件\"]},\"1798\":{\"h\":\"Ⅱ. FileReader\",\"t\":[\"FileReader：字符流的数据读入\"]},\"1799\":{\"h\":\"1. FileReader的操作\"},\"1800\":{\"h\":\"1.1 初始化：创建流对象\",\"t\":[\"初始化需要处理异常： java.io.FileNotFoundException\",\"File f1 = new File(\\\"files/a.txt\\\"); //实例化FileReader对象，开启输入流,参数是文件对象 FileReader fr = new FileReader(f1); //方式二：直接使用文件名：构造器内部自动new File(文件名) FileReader fr = new FileReader(\\\"files/a.txt\\\"); \"]},\"1801\":{\"h\":\"1.2 read：数据读入\",\"t\":[\"每次只读取一个字节，返回值是char的ASCII码，如果返回-1，代表文件已经读完了。可以循环读取所有的数据。\",\"该方法需要处理异常：java.io.IOException\",\"int data = fr.read(); \"]},\"1802\":{\"h\":\"1.3 close：关闭流\",\"t\":[\"该方法需要处理异常：java.io.IOException\",\"fr.close(); \"]},\"1803\":{\"h\":\"2. FileReader的异常处理\",\"t\":[\"开启流、读取数据、关闭流都需要处理异常。\",\"由于关闭流是必须要进行的操作，所以要用try...catch...finally处理异常\"]},\"1804\":{\"h\":\"3. FileReader示例：文本文件读取\",\"t\":[\"public void fileReaderTest() { FileReader fr = null; //放外面，是因为close操作要用到fr try { //1.实例化File类的对象，指明要操作的文件 File f1 = new File(\\\"files/a.txt\\\"); //2.创造FileReader输入流 fr = new FileReader(f1); //3.仅需数据的读入，循环全部读入 int data = fr.read(); while(data != -1){ System.out.print((char)data); data = fr.read(); } } catch (IOException e) { e.printStackTrace(); } finally { try { if(fr != null){ //房子fr是null,参生空指针异常 //4.流的关闭 fr.close(); } } catch (IOException e) { e.printStackTrace(); } } } \"]},\"1805\":{\"h\":\"4. 一次读取多个字符\",\"t\":[\"使用read()的重载方法read(char[] cbuf)，一次读取多个字符\",\"public void fileReaderTest(){ File f1 = new File(\\\"files/a.txt\\\"); FileReader fr = null; try { fr = new FileReader(f1); char[] cbuf = new char[5]; int len = fr.read(cbuf); while(len != -1){ for(int i=0;i<len;i++){ System.out.println(cbuf[i]); } len = fr.read(cbuf); } } catch (IOException e) { e.printStackTrace(); } finally { try { if(fr != null) fr.close(); } catch (IOException e) { e.printStackTrace(); } } } \"]},\"1806\":{\"h\":\"4.1 代码解析\",\"t\":[\"①read(cbuf)：该步骤已经将数据读入到创建的char[] cbuf数组中了，返回值就是读取的字符数\",\"②双重循环：外循环是用来循环读取数据的，内循环是用来读取cbuf数组中的字符\"]},\"1807\":{\"h\":\"4.2 通过String输出char数组\",\"t\":[\"不一定非得用个内循环打印char数组，使用String也可以\",\"//内循环改为如下代码： String str = new String(cbuf,0,len); System.out.print(str); \"]},\"1808\":{\"h\":\"4.3 误区\",\"t\":[\"char[] cbuf = new char[5];char数组每次装 5个字符，下一次装载字符时，并非是空数组过去的，而是5个字符还在，装载时进行新旧字符的替换。\",\"当字符取模5有余数时，最后一趟是装不满的，也就是会有字符没有被替换，这时如果将数组中的字符全部取下来，就会取到错误的字符。\",\"//错误示例，cbuf.length并不能代表真实的字符数，最后一次可能会出错 for(int i = 0;i < cbuf.length;i++){ System.out.print(cbuf[i]); } \"]},\"1809\":{\"h\":\"Ⅲ. FileWriter\",\"t\":[\"FileWriter：字符流的数据写出\"]},\"1810\":{\"h\":\"说明\",\"t\":[\"输出操作，对应的File可以不存在的。并不会报异常，在输出的过程中，会自动创建此文件。\"]},\"1811\":{\"h\":\"1. 相关操作：详见流的基类\"},\"1812\":{\"h\":\"1.1 初始化：开启流\",\"t\":[\"需要处理java.io.FileNotFoundException异常\",\"File对应的硬盘中的文件如果存在：可以指定构造器的第二个参数：\",\"false：覆盖写；默认（可省略），对原有文件的覆盖\",\"true：追加写\",\"File f1 = new File(\\\"files/a1.txt\\\"); FileWriter fw = new FileWriter(f1,false); //方式二：直接使用文件名：构造器内部自动new File(文件名) FileWriter fw = new FileWriter(\\\"files/a1.txt\\\",false); \"]},\"1813\":{\"h\":\"1.2 write：数据写出\",\"t\":[\"会产生java.io.IOException异常，write有多种重载，详见流的基类\",\"fw.write(\\\"that's good\\\"); \"]},\"1814\":{\"h\":\"1.3 close：资源关闭\",\"t\":[\"会产生java.io.IOException异常\",\"fw.close(); \"]},\"1815\":{\"h\":\"2. 异常处理\",\"t\":[\"同上需要进行try...catch...finally处理\"]},\"1816\":{\"h\":\"3. FileWriter写出示例\",\"t\":[\"public void fileWriterTest(){ //1.提供File类的对象，指明写出到的文件 File f1 = new File(\\\"files/a1.txt\\\"); try { //2.提供FileWriter的对象，用于数据的写出 fw = new FileWriter(f1,true); //3.写出的操作，可多次调用write fw.write(\\\"that's good \\\\n\\\"); fw.write(\\\"are you ok\\\"); } catch (IOException e) { e.printStackTrace(); } finally { try { //4.流资源的关闭 if(fw != null) fw.close(); } catch (Exception e) { e.printStackTrace(); } } } \"]},\"1817\":{\"h\":\"4. FileReader与FileWriter结合示例：文件的复制\",\"t\":[\" public void testFileReaderFileWriter() { FileReader fr = null; FileWriter fw = null; try { //1.创建File类的对象，指明读入和写出的文件 File srcFile = new File(\\\"hello.txt\\\"); File destFile = new File(\\\"hello2.txt\\\"); //2.创建输入流和输出流的对象 fr = new FileReader(srcFile); fw = new FileWriter(destFile); //3.数据的读入和写出操作 char[] cbuf = new char[5]; int len;//记录每次读入到cbuf数组中的字符的个数 while((len = fr.read(cbuf)) != -1){ //每次写出len个字符 fw.write(cbuf,0,len); } } catch (IOException e) { e.printStackTrace(); } finally { //4.关闭流资源,两个都要关闭 try { if(fw != null) fw.close(); } catch (IOException e) { e.printStackTrace(); } try { if(fr != null) fr.close(); } catch (IOException e) { e.printStackTrace(); } } } \"]},\"1818\":{\"h\":\"5. 处理图片资源\",\"t\":[\"FileReader和FileWriter都无法处理图片资源，因为图片属于二进制资源，不是文本资源。\"]},\"1819\":{\"h\":\"Ⅳ. 字节流\",\"t\":[\"FileInputStream：字节流读入\",\"FileOutputStream：字节流写出\"]},\"1820\":{\"h\":\"说明\",\"t\":[\"字节流的操作流程和字符流是一样。用的方法也是一样的，无非是参数有char类型变成了byte类型。\",\"详见：流的基类\"]},\"1821\":{\"h\":\"1. 初始化\",\"t\":[\"File srcFile = new File(\\\"src.jpg\\\"); File desFile = new File(\\\"des.jpg\\\"); //FileInputStream：读入 FileInputStream fis = new FileInputStream(srcFile); //FileOutputStream:写出 FileOutputStream fos = new FileOutputStream(desFile); //方式二：直接使用文件名：构造器内部自动new File(文件名) FileInputStream fis = new FileInputStream(\\\"src.jpg\\\"); FileOutputStream fos = new FileOutputStream(\\\"des.jpg\\\"); \"]},\"1822\":{\"h\":\"2. 基本操作\",\"t\":[\"详见流的基类\",\"读：read方法，同上，只是参数类型变成了byte\",\"写：write方法，同上，只是参数类型变成了byte\",\"关闭资源：同上，close()\",\"异常：需要处理同样的异常\"]},\"1823\":{\"h\":\"3. 示例：创建copy方法，进行文件的复制\",\"t\":[\"要求：指定路径下文件的复制\",\"public void copyFile(String srcPath,String destPath){ FileInputStream fis = null; FileOutputStream fos = null; try { //1. 造文件 File srcFile = new File(srcPath); File destFile = new File(destPath); //2.造流 fis = new FileInputStream(srcFile); fos = new FileOutputStream(destFile); byte[] buffer = new byte[1024];//这里是byte[],而非char[] int len; //3.1 读数据 while((len = fis.read(buffer)) != -1){ //3.2 写数据 fos.write(buffer,0,len); } } catch (IOException e) { e.printStackTrace(); } finally { //4.关闭资源 if(fos != null){ try { fos.close(); } catch (IOException e) { e.printStackTrace(); } } if(fis != null){ try { fis.close(); } catch (IOException e) { e.printStackTrace(); } } } } \"]},\"1824\":{\"h\":\"8-5. 缓冲流\"},\"1825\":{\"h\":\"Ⅰ. 介绍\",\"t\":[\"为了提高数据读写的速度，Java API提供了带缓冲功能的流类，缓冲流是处理流的一种，使用的时候需要套接在已有流的基础上。\",\"作用：缓冲流的作用是提高流的读取、写出速度。\"]},\"1826\":{\"h\":\"原理和使用\",\"t\":[\"在使用这些流类时，会创建一个内部缓冲区数组，缺省使用8192个字节的缓冲区。\",\"8-5-1\",\"当读取数据时，数据按块读入缓冲区，其后的读操作则直接访问缓冲区\",\"当使用BufferedInputStream读取字节文件时，BufferedInputStream会一次性从文件中读取8192个(8Kb)，存在缓冲区中，直到缓冲区装满了，才重新从文件中读取下一个8192个字节数组。\",\"向流中写入字节时，不会直接写到文件，先写到缓冲区中直到缓冲区写满，BufferedOutputStream才会把缓冲区中的数据一次性写到文件里。 \",\"使用方法flush()可以强制将缓冲区的内容全部写入输出流\",\"关闭流的顺序和打开流的顺序相反。只要关闭最外层流即可，关闭最外层流也 会相应关闭内层节点流\",\"flush()方法的使用：手动将buffer中内容写入文件\",\"如果是带缓冲区的流对象的close()方法，不但会关闭流，还会在关闭流之前刷新缓冲区，关闭后不能再写出\"]},\"1827\":{\"h\":\"Ⅱ. 缓冲流的类\",\"t\":[\"缓冲流要“套接”在相应的节点流之上，根据数据操作单位可以把缓冲流分为：\"]},\"1828\":{\"h\":\"1. 字节流：读入\",\"t\":[\"rt.jar>java>io>BufferedInputStream\",\"class BufferedInputStream extends FilterInputStream { private static int DEFAULT_BUFFER_SIZE = 8192;//内部缓冲区数组默认大小 //该构造函数可以自定义内部缓冲区数组的大小 public BufferedInputStream(InputStream in, int size) { super(in); if (size <= 0) { throw new IllegalArgumentException(\\\"Buffer size <= 0\\\"); } buf = new byte[size]; } } \"]},\"1829\":{\"h\":\"2. 字节流：写出\",\"t\":[\"rt.jar>java>io>BufferedOutputStream\",\"class BufferedOutputStream extends FilterOutputStream { public BufferedOutputStream(OutputStream out) { this(out, 8192);//默认内部缓冲区数组大小。 } //该构造函数可以自定义内部缓冲区数组的大小 public BufferedOutputStream(OutputStream out, int size) { super(out); if (size <= 0) { throw new IllegalArgumentException(\\\"Buffer size <= 0\\\"); } buf = new byte[size];//自定义缓冲区数组大小 } } \"]},\"1830\":{\"h\":\"3. 字符流：读入\",\"t\":[\"rt.jar>java>io>BufferedReader\",\"public class BufferedReader extends Reader { private static int defaultCharBufferSize = 8192;//内部缓冲区数组默认大小 //该构造函数可以自定义内部缓冲区数组的大小 public BufferedReader(Reader in, int sz) { super(in); if (sz <= 0) throw new IllegalArgumentException(\\\"Buffer size <= 0\\\"); this.in = in; cb = new char[sz]; nextChar = nChars = 0; } } \"]},\"1831\":{\"h\":\"4. 字符流：写出\",\"t\":[\"rt.jar>java>io>BufferedWriter\",\"public class BufferedWriter extends Writer { private static int defaultCharBufferSize = 8192;//内部缓冲区数组默认大小 //该构造函数可以自定义内部缓冲区数组的大小 public BufferedWriter(Writer out, int sz) { super(out); if (sz <= 0) throw new IllegalArgumentException(\\\"Buffer size <= 0\\\"); this.out = out; cb = new char[sz]; nChars = sz; nextChar = 0; lineSeparator = java.security.AccessController.doPrivileged( new sun.security.action.GetPropertyAction(\\\"line.separator\\\")); } } \"]},\"1832\":{\"h\":\"Ⅲ. 基本操作\"},\"1833\":{\"h\":\"1. 基本操作方法\",\"t\":[\"读入数据：和节点流的操作一样，也是用read方法\",\"写出数据：和节点流的操作一样，也是用write方法\",\"flush：当缓冲区的数据存满时，会自动将数据读入/写出，也可以手动调用flush方法，将buffer中的内容读入/写出。\",\"close：关闭流的顺序和打开流的顺序相反，即：先关处理流，再关节点流。关闭最外层流也会相应关闭内层节点流，所以只关外层流也可以。 \",\"x.close();\"]},\"1834\":{\"h\":\"2. readLine：读取一行（BufferedReader）\",\"t\":[\"该方法是读取一行数据（根据换行符来判定）。\",\"阻塞：readLine()方法是阻塞的，如果在接收的数据中不含有'\\\\n','\\\\r'或者结束符时，往往导致进程挂起，从而程序无法继续。\",\"返回值：返回读到的数据，读到文件的结尾时才会返回null。\",\"网络编程：在IO模式下，readline是一直等待输入的（文件内容，或者标准输入流），只有遇到换行符，才会结束执行。\",\"示例：从文件中，一行一行的读，读一行，就在控制台输出一行。\",\"BufferedReader br = null; try { FileReader fr = new FileReader(\\\"files/a.txt\\\"); br = new BufferedReader(fr); String data = br.readLine(); while( data != null){ System.out.println(data); data = br.readLine(); } } catch (IOException e) { e.printStackTrace(); } finally { try { if(br != null) br.close(); } catch (IOException e) { e.printStackTrace(); } } \"]},\"1835\":{\"h\":\"3. newLine：输入换行符（BufferedWriter）\",\"t\":[\"在写出文件时，有时需要写出换行符，该方法就可以写出换行符，等价于 \\\"\\\\n\\\"\"]},\"1836\":{\"h\":\"4. 缓冲流-字节流：使用示例\",\"t\":[\"进行文件的复制：读入，再写出\",\"public void StreamTest(){ BufferedInputStream bis = null; BufferedOutputStream bos = null; try { //1.创建文件对象 File srcFile = new File(\\\"files/girl.jpg\\\"); File desFile = new File(\\\"files/girl-1.jpg\\\"); //2.1 创造流：节点流 FileInputStream fis = new FileInputStream(srcFile); FileOutputStream fos = new FileOutputStream(desFile); //2.2 创造流：在节点流上创造缓冲流 bis = new BufferedInputStream(fis); bos = new BufferedOutputStream(fos); //3.进行复制：读入、写出 byte[] buf = new byte[1024]; //使用byte[]参数的重载方法 int len = bis.read(buf); while(len != -1){ bos.write(buf,0,len); //0,len：防止最后一次buf出现不满载情况 len = bis.read(buf); //将数据读入，循环读 } } catch (IOException e) { e.printStackTrace(); } finally { //4.close：关闭所有流 try { if(bis != null) bis.close(); } catch (IOException e) { e.printStackTrace(); } try { if(bos != null) bos.close(); } catch (IOException e) { e.printStackTrace(); } } } \"]},\"1837\":{\"h\":\"5. 缓冲流-字符流：使用示例\",\"t\":[\"略，跟上面区别不大。\"]},\"1838\":{\"h\":\"6. 效率测试\",\"t\":[\"分别测试使用节点流和缓冲流进行文件的测试。\",\"使用System.currentTimeMillis进行计时，计算两者小号的时间。\",\"long start = System.currentTimeMillis(); String srcPath = \\\"01-视频.avi\\\"; String destPath = \\\"03-视频.avi\\\"; copyFileWithBuffered(srcPath,destPath); long end = System.currentTimeMillis(); System.out.println(\\\"复制操作花费的时间为：\\\" + (end - start)); //再进行节点流的时间计算，同上 \",\"结论：缓冲流消耗的时间，远小于节点流\"]},\"1839\":{\"h\":\"8-6. 转换流\"},\"1840\":{\"h\":\"Ⅰ. 转换流介绍\"},\"1841\":{\"h\":\"1. 说明\",\"t\":[\"转换流也是一种处理流：提供了在字节流和字符流之间的转换\",\"8-6-1\"]},\"1842\":{\"h\":\"2. 转换流的类\",\"t\":[\"Java API提供了两个转换流的类：\",\"InputStreamReader：将InputStream转为Reader（字节流输入->字符流输入）\",\"OutputStreamWriter：将Writer转为OutputStream（字符流输出->字节流输出）\"]},\"1843\":{\"h\":\"3. 作用\",\"t\":[\"提高操作效率：字节流中的数据都是字符时，转成字符流操作更高效。\",\"转码：进行转码，将文本文件转换成别的编码输出。 很多时候我们使用转换流来处理文件乱码问题。实现编码和解码的功能。 \",\"解码：字节、字节数组 --->字符数组、字符串\",\"编码：字符数组、字符串 ---> 字节、字节数组/\"]},\"1844\":{\"h\":\"4. 使用说明\",\"t\":[\"这两个流都是用来操作文本文件的，文本文件也可以做为字节流进行IO\",\"InputStreamReader的字符集参数要和文件本身的编码统一\",\"使用的方法、操作流程、异常处理，和流的基类基本一致。\"]},\"1845\":{\"h\":\"Ⅱ. InputStreamReader\"},\"1846\":{\"h\":\"说明\",\"t\":[\"InputStreamReader实现将字节的输入流按指定字符集转换为字符的输入流。需要和InputStream“套接”。\",\"public class InputStreamReader extends Reader {} \"]},\"1847\":{\"h\":\"1. 构造器1：不指定字符集\",\"t\":[\"参数是InputStream流，默认编码是utf-8,，即将字节流转为utf-8编码的字符流\",\"public InputStreamReader(InputStream in); =================================================== FileInputStream fis = new FileInputStream(\\\"File/a.txt\\\"); InputStreamReader isr = new InputStreamReader(fis); \"]},\"1848\":{\"h\":\"2. 构造器2：指定字符集\",\"t\":[\"提供第二个参数来指定编码集\",\"public InputSreamReader(InputStream in,String charsetName); =================================================== FileInputStream fis = new FileInputStream(\\\"File/a.txt\\\",\\\"utf-8\\\"); InputStreamReader isr = new InputStreamReader(fis); \"]},\"1849\":{\"h\":\"3. 主要方法\"},\"1850\":{\"h\":\"3.1 read\",\"t\":[\"和流基类的read方法类似，有三个重载方法。 以字符流的形式读取字符。\"]},\"1851\":{\"h\":\"3.2 getEncoding\",\"t\":[\"获取FileInputStream对象的字符集。\",\"String getEncoding(); FileInputStream fis = new FileInputStream(\\\"File/a.txt\\\",\\\"utf-8\\\"); InputStreamReader isr = new InputStreamReader(fis); String encoding = isr.getEncoding(); System.out.println(encoding);//UTF8 \"]},\"1852\":{\"h\":\"3.3 close\",\"t\":[\"关闭转换流，关闭该流会自动关闭参数InputStream流。\"]},\"1853\":{\"h\":\"4. 使用示例\",\"t\":[\"FileInputStream fis = new FileInputStream(\\\"File/a.txt\\\"); InputStreamReader isr = new InputStreamReader(fis,\\\"utf-8\\\"); char[] cbuf = new char[3]; int len = isr.read(cbuf); System.out.println(Arrays.toString(cbuf));//[a, b, c] \"]},\"1854\":{\"h\":\"Ⅲ. OutputStreamWriter\",\"t\":[\"实现将字符的输出流按指定字符集转换为字节的输出流。需要和OutputStream“套接”。\"]},\"1855\":{\"h\":\"1. 构造器1：不指定字符集\",\"t\":[\"public OutputStreamWriter(OutputStream out) \"]},\"1856\":{\"h\":\"2. 构造器2：指定字符集\",\"t\":[\"public OutputSreamWriter(OutputStream out,String charsetName) \"]},\"1857\":{\"h\":\"3. 主要方法\",\"t\":[\"write：将字符流以字节流的方式写出到文件中，字符的编码，由构造器指定。 \",\"和流基类的字节流方法基本一样，有三个重构方法\",\"flush：刷新流\",\"close：关闭流\"]},\"1858\":{\"h\":\"4. 综合示例：对文本文件进行转码\",\"t\":[\"//注意：为了结构清晰，这里直接把异常抛出了，实际应该使用try...catch处理 public void test2() throws Exception { //1.造文件、造流 FileInputStream fis = new FileInputStream(\\\"dbcp.txt\\\"); FileOutputStream fos = new FileOutputStream(\\\"dbcp_gbk.txt\\\"); InputStreamReader isr = new InputStreamReader(fis,\\\"utf-8\\\"); OutputStreamWriter osw = new OutputStreamWriter(fos,\\\"gbk\\\"); //2.读写过程 char[] cbuf = new char[20]; int le while((len = isr.read(cbuf)) != -1){ osw.write(cbuf,0,len); } //3.关闭资源 isr.close(); osw.close(); } \"]},\"1859\":{\"h\":\"Ⅳ. 补充：字符集\"},\"1860\":{\"h\":\"1. 编码表的由来\",\"t\":[\"计算机只能识别二进制数据，早期由来是电信号。为了方便应用计算机，让它可以识别各个国家的文字。就将各个国家的文字用数字来表示，并一一对应，形成一张表。这就是编码表。\"]},\"1861\":{\"h\":\"2. 常见编码集\",\"t\":[\"ASCII：美国标准信息交换码。用一个字节的7位可以表示。\",\"ISO8859-1：拉丁码表。欧洲码表，用一个字节的8位表示。\",\"GB2312：中国的中文编码表。最多两个字节编码所有字符\",\"GBK：中国的中文编码表升级，融合了更多的中文文字符号。最多两个字节编 \",\"GBK等双字节编码方式，用最高位是1或0表示两个字节和一个字节。\",\"Unicode：国际标准码，融合了目前人类使用的所有字符。为每个字符分配唯一的字符码。所有的文字都用两个字节来表示。\",\"UTF-8：变长的编码方式，可用1-4个字节来表示一个字符。\"]},\"1862\":{\"h\":\"3. 编码原理\",\"t\":[\"8-6-2\"]},\"1863\":{\"h\":\"4. Unicode与UTF-8的由来\",\"t\":[\"Unicode：在Unicode 出现之前，所有的字符集都是和具体编码方案绑定在一起的（即字符集≈ 编码方式），都是直接将字符和最终字节流绑定死了。Unicode是一种将全世界所有文字都包含的编码集，但是 Unicode不完美，这里就有三个问题：一个是，我们已经知道，英文字母只用一个字节表示就够了，第二个问题是如何才能区别Unicode和ASCII？计算机怎么知道两个字节表示一个符号，而不是分别表示两个符号呢？第三个，如果和GBK等双字节编码方式一样，用最高位是1或0表示两个字节和一个字节，就少了很多值无法用于表示字符，不够表示所有字符。Unicode在很长一段时间内无法推广，直到互联网的出现。\",\"UTF-8：面向传输的众多 UTF（UCS Transfer Format）标准出现了，顾名思义，UTF-8就是每次8个位传输数据，而UTF-16就是每次16个位。这是为传输而设计的编码，并使编码无国界，这样就可以显示全世界上所有文化的字符了。\",\"Unicode与UTF-8：Unicode只是定义了一个庞大的、全球通用的字符集，并为每个字符规定了唯一确定的编号，具体存储成什么样的字节流，取决于字符编码方案。推荐的Unicode编码是UTF-8和UTF-16。\"]},\"1864\":{\"h\":\"5. UTF-8的原理\",\"t\":[\"8-6-3\"]},\"1865\":{\"h\":\"6. 总结\",\"t\":[\"8-6-4\"]},\"1866\":{\"h\":\"8-7. 其他流\"},\"1867\":{\"h\":\"Ⅰ. 标准流\",\"t\":[\"System.in：标准的输入流，默认从键盘输入\",\"System.out：标准的输出流，默认从控制台输出\"]},\"1868\":{\"h\":\"1. System.in与System.out\",\"t\":[\"System.in：他是System类的一个变量，类型是InputStream。\",\"System.out：也是System类的一个变量，类型是PrintStream。 \",\"该类是：OutputStream的子类FilterOutputStream的子类。\"]},\"1869\":{\"h\":\"2. 重定向\",\"t\":[\"通过System类的setIn，setOut方法对默认设备进行改变。\",\"public static void setIn(InputStream in) public static void setOut(PrintStream out) \"]},\"1870\":{\"h\":\"3. 示例：标准输入流、输出流的练习\",\"t\":[\"要求：从键盘输入字符串，要求将读取到的整行字符串转成大写输出。然后继续进行输入操作，直至当输入“e”或者“exit”时，退出程序。\",\"方法一：使用Scanner实现，调用next()返回一个字符串\",\"方法二：使用System.in实现【以该方法为例】 \",\"System.in ---> 转换流 ---> BufferedReader的readLine()\",\"BufferedReader br = null; try { InputStreamReader isr = new InputStreamReader(System.in); br = new BufferedReader(isr); while (true) { System.out.println(\\\"请输入字符串：\\\"); String data = br.readLine(); if (\\\"e\\\".equalsIgnoreCase(data)||\\\"exit\\\".equalsIgnoreCase(data)){ System.out.println(\\\"程序结束\\\"); break; } String upperCase = data.toUpperCase(); System.out.println(upperCase); } } catch (IOException e) { e.printStackTrace(); } finally { if (br != null) { try { br.close(); } catch (IOException e) { e.printStackTrace(); } } } \"]},\"1871\":{\"h\":\"Ⅱ. 打印流\",\"t\":[\"OutPutStream和FileWriter的处理流，实现将基本数据类型的数据格式转化为字符串输出\"]},\"1872\":{\"h\":\"1. PrintStream和PrintWriter\",\"t\":[\"PrintStream写出字节流；PrintWriter写出字符流。\",\"提供了一系列重载的print()和println()方法，用于多种数据类型的输出\",\"PrintStream和PrintWriter的输出不会抛出IOException异常\",\"PrintStream和PrintWriter有自动flush功能\",\"PrintStream 打印的所有字符都使用平台的默认字符编码转换为字节。在需要写入字符而不是写入字节的情况下，应该使用 PrintWriter 类。\",\"System.out返回的是PrintStream的实例\"]},\"1873\":{\"h\":\"2. 示例：将基本数据类型输出到一个文件\",\"t\":[\"PrintStream ps = null; try { FileOutputStream fos = new FileOutputStream(new File(\\\"text.txt\\\")); // 创建打印输出流 ps = new PrintStream(fos, true); if (ps != null) {// 把标准输出流(控制台输出)改成文件 System.setOut(ps); } for (int i = 0; i <= 255; i++) { // 输出ASCII字符 System.out.print((char) i); if (i % 50 == 0) { // 每50个数据一行 System.out.println(); // 换行 } } } catch (FileNotFoundException e) { e.printStackTrace(); } finally { if (ps != null) { ps.close(); } } \"]},\"1874\":{\"h\":\"Ⅲ. 数据流\",\"t\":[\"为了方便地操作Java语言的基本数据类型和String的数据，可以使用数据流。\",\"作用：将java的基本数据类型和String数据写出到文件中，并能够将文件中的java基本数据类型和String数据读取还愿。\"]},\"1875\":{\"h\":\"1. 数据流的类\",\"t\":[\"DataInputStream：读入，“套接”在 InputStream 子类的流上\",\"DataOutputStream：写出，“套接”在OutputStream 子类的流上\"]},\"1876\":{\"h\":\"2. DataInputStream中的方法\",\"t\":[\"boolean readBoolean()\",\"byte readByte()\",\"char readChar()\",\"float readFloat()\",\"double readDouble()\",\"short readShort()\",\"long readLong()\",\"int readInt()\",\"String readUTF()\",\"void readFully(byte[] b)\"]},\"1877\":{\"h\":\"3. DataOutputStream中的方法\",\"t\":[\"将上述的方法的read改为相应的write即可。\"]},\"1878\":{\"h\":\"4. DataOutputStream：使用示例\",\"t\":[\"将内存中的字符串、基本数据类型的变量写出到文件中\",\"注意：该文件只能用DataInputStream来读入，其他方法无法解析，查看\",\"//1.创建流 FileOutputStream fos = new FileOutputStream(\\\"data.txt\\\"); DataOutputStream dos = new DataOutputStream(fos); //2.使用 DataInputStream 中的方法将各类数据写入文件 dos.writeUTF(\\\"刘建辰\\\"); dos.flush();//刷新操作，将内存中的数据写入文件 dos.writeInt(23); dos.flush(); dos.writeBoolean(true); dos.flush(); //3.关闭流 dos.close(); //异常处理：省略 \"]},\"1879\":{\"h\":\"5. DataInputStream：使用示例\",\"t\":[\"将文件中存储的基本数据类型变量和字符串读取到内存中，保存在变量中。\",\"注意：读取不同类型的数据的顺序要与当初写入文件时，保存的数据的顺序一致！\",\"//1.创建流 FileInputStream fis = new FileInputStream(\\\"data.txt\\\"); DataInputStream dis = new DataInputStream(fis); //2.使用DataOutputStream将文件中各类数据读入 String name = dis.readUTF(); int age = dis.readInt(); boolean isMale = dis.readBoolean(); System.out.println(\\\"name = \\\" + name); System.out.println(\\\"age = \\\" + age); System.out.println(\\\"isMale = \\\" + isMale); //3.关闭流 dis.close(); //异常处理：省略 \"]},\"1880\":{\"h\":\"Ⅳ. 随机存储文件流\",\"t\":[\"随机存储文件流 RandomAccessFile 声明在java.io包下，但直接继承于java.lang.Object类，没有继承抽象流基类。并且它实现了DataInput、DataOutput这两个接口，也就意味着这个类既可以读也可以写（既可以作为一个输入流，又可以作为一个输出流）。\"]},\"1881\":{\"h\":\"1. 随机访问机制\",\"t\":[\"RandomAccessFile 类支持 “随机访问” 的方式，程序可以直接跳到文件的任意地方来读、写文件；\",\"支持只访问文件的部分内容；\",\"可以向已存在的文件后追加内容。\"]},\"1882\":{\"h\":\"2. 记录指针与相关方法\",\"t\":[\"RandomAccessFile 对象包含一个记录指针，用以标示当前读写处的位置。RandomAccessFile 类对象可以自由移动记录指针。\"]},\"1883\":{\"h\":\"2.1 getFilePointer方法\",\"t\":[\"获取文件记录指针的当前位置\",\"long getFilePointer() \"]},\"1884\":{\"h\":\"2.2 seek方法\",\"t\":[\"将文件记录指针定位到 pos 位置\",\"void seek(long pos) \"]},\"1885\":{\"h\":\"3. 构造器与mode参数\",\"t\":[\"参数1：要操作的文件，可以是文件对象，也可以是文件名\",\"参数2：mode：访问模式\",\"public RandomAccessFile(File file, String mode) public RandomAccessFile(String name, String mode) \"]},\"1886\":{\"h\":\"3.1 mode\",\"t\":[\"共有4种访问模式，只需要注意前两种。\",\"r: 以只读方式打开\",\"rw ：打开以便读取和写入\",\"rwd: 打开以便读取和 写入；同步文件内容的更新\",\"rws: 打开以便读取和 写入； 同步文件内容和元数据 的\"]},\"1887\":{\"h\":\"3.2 r模式与rw模式\",\"t\":[\"r：只读，不会创建文件，而是会去读取一个已经存在的文件，如果读取的文件不存在则会出现异常。\",\"rw：读写，如果文件不存在则会去创建文件，如果存在则不会创建。\"]},\"1888\":{\"h\":\"4. 使用示例：copy文件\",\"t\":[\"//1.RandomAccessFile对象 RandomAccessFile rafRead = new RandomAccessFile(\\\"a.jpg\\\",\\\"r\\\"); RandomAccessFile rafWrite = new RandomAccessFile(\\\"a-1.jpg\\\",\\\"rw\\\"); //2.进行读和写,完成复制 byte[] buffer = new byte[1024]; int len = rafRead.read(buffer); while(len != -1){ rafWrite.write(buffer,0,len); } //3.关闭流 rafRead.close(); rafWrite.close(); //省略了异常处理 \"]},\"1889\":{\"h\":\"5. 使用指针\",\"t\":[\"该类的核心就是可以操作指针，在任意位置进行读写。\",\"读：只是简单的读。\",\"写：这里的写是覆盖写，即从指针位置开始写，新写入的内容会覆盖旧的内容。 \",\"注意：不是文件覆盖，而是内容覆盖；不是追加写，而是从指定指针位置处写；不是插入写，而是覆盖写；\"]},\"1890\":{\"h\":\"5.1 实现追加和插入效果\",\"t\":[\"追加效果：将指针指到文件末尾，进行写的操作，就是追加写。\",\"插入效果：将指针位置后面的数据赋值一份，写完后，再将复制的文件，进行追加写。\"]},\"1891\":{\"h\":\"5.2 示例：在指针位置进行写入\",\"t\":[\"//1.RandomAccessFile对象 RandomAccessFile raf1 = new RandomAccessFile(\\\"hello.txt\\\",\\\"rw\\\"); raf1.seek(3);//将指针调到角标为3的位置 //进行写入 raf1.write(\\\"xyz\\\".getBytes()); //关闭资源 raf1.close(); \"]},\"1892\":{\"h\":\"6. 断点续传\",\"t\":[\"可以用RandomAccessFile这个类，来实现一个多线程断点下载的功能，下载工具下载前都会建立两个临时文件，一个是与被下载文件大小相同的空文件，另一个是记录文件指针的位置文件，每次暂停的时候，都会保存上一次的指针，然后断点下载的时候，会继续从上一次的地方下载，从而实现断点下载或上传的功能。\"]},\"1893\":{\"h\":\"8-8. 对象流\"},\"1894\":{\"h\":\"介绍\",\"t\":[\"由ObjectInputStream 和OjbectOutputSteam两个类组成\",\"作用：用于存储和读取基本数据类型数据或对象的处理流。它的强大之处就是可以把Java中的对象写入到数据源中（序列化），也能把对象从数据源中还原回来（反序列化）。\",\"实际开发中，我们都是将对象格式化成JSON进行传输，而不是进行序列化传输。\"]},\"1895\":{\"h\":\"1. 序列化与反序列化\",\"t\":[\"序列化：用ObjectOutputStream类，将内存中的java对象保存到磁盘中或通过网络传输出去。\",\"反序列化：用ObjectInputStream类将磁盘文件中的对象还原为内存中的一个java对象。\"]},\"1896\":{\"h\":\"2. 对象的序列化机制\",\"t\":[\"对象序列化机制允许把内存中的Java对象转换成平台无关的二进制流，从而允许把这种二进制流持久地保存在磁盘上，或通过网络将这种二进制流传输到另一个网络节点。//当其它程序获取了这种二进制流，就可以恢复成原来的Java对象\",\"意义：序列化的好处在于可将任何实现了Serializable接口的对象转化为 字节数据，使其在保存和传输时可被还原\"]},\"1897\":{\"h\":\"3. 一些操作\"},\"1898\":{\"h\":\"3.1 初始化\",\"t\":[\"创建序列化流，需要套接在FileOutputStream上。\",\"//1. 创建序列化流，需要套接在FileOutputStream上 FileOutputStream fos = new FileOutputStream(\\\"object.dat\\\") ObjectOutputStream oos = new ObjectOutputStream(fos); //2.创建反序列化流,需要套接在FileInputStream上 FileInputStream fis = new FileInputStream(\\\"object.dat\\\") ObjectInputStream ois = new ObjectInputStream(fis); \"]},\"1899\":{\"h\":\"3.2 writeObject\",\"t\":[\"输出可序列化对象，每操作一次，就需要flush一次\",\"oos.writeObject(new xxObject(...)); \"]},\"1900\":{\"h\":\"3.3 readObject\",\"t\":[\"读取流中的对象，返回值类型是被反序列化对象的类。\",\"Object obj = ois.readObject(); String str = (String) obj; \"]},\"1901\":{\"h\":\"3.4 flush\",\"t\":[\"刷新操作，输出可序列化对象，每操作一次，就需要flush一次\",\"oos.flush(); \"]},\"1902\":{\"h\":\"4. 示例：字符串的序列化和反序列化\"},\"1903\":{\"h\":\"4.1 序列化\",\"t\":[\"//1.创建输入流、序列化流 FileOutputStream fos = new FileOutputStream(\\\"object.dat\\\") ObjectOutputStream oos = new ObjectOutputStream(fos); //2.使用writerObject方法进行序列化 oos.writeObject(new String(\\\"我爱n门\\\")); oos.flush();//刷新操作 //3.关闭流 oos.close(); //异常处理：省略 \"]},\"1904\":{\"h\":\"4.2 反序列化\",\"t\":[\"//1.创建写出流、反序列化流 FileInputStream fis = new FileInputStream(\\\"object.dat\\\") ObjectInputStream ois = new ObjectInputStream(fis); //2.使用readObejct方法进行反序列化 Object obj = ois.readObject(); String str = (String) obj; System.out.println(str); //3.关闭流 ois.close(); //异常处理：省略 \"]},\"1905\":{\"h\":\"5. 序列化类，需要满足的要求\",\"t\":[\"需要实现接口：Serializable \",\"基本数据类型和String都已经实现该接口了\",\"该接口是个标识接口，里面是空的，只是用来标识类可以进行实例化\",\"当前类提供一个全局常量：serialVersionUID\",\"除了当前Person类需要实现Serializable接口之外，还必须保证其内部所有属性也必须是可序列化的。（ \",\"默认情况下，基本数据类型可序列化\",\"要注意的是，某个属性的类型是其他类，这个类也需要能序列化\",\"序列化后的结果中，不包含static和transient修饰的成员变量\"]},\"1906\":{\"h\":\"6. 示例：自定义类实线序列化与反序列化\"},\"1907\":{\"h\":\"6.1 目标类\",\"t\":[\"public class Person implements Serializable{ public static final long serialVersionUID = 475463534532L; ...... } \"]},\"1908\":{\"h\":\"6.2 序列化\",\"t\":[\"//1.创建输入流、序列化流 FileOutputStream fos = new FileOutputStream(\\\"object.dat\\\") ObjectOutputStream oos = new ObjectOutputStream(fos); //2.使用writerObject方法进行序列化 oos.writeObject(new Person(\\\"王铭\\\",23)); oos.flush(); oos.writeObject(new Person(\\\"张学良\\\",23,1001,new Account(5000))); oos.flush(); //3.关闭流 oos.close(); //异常处理：省略 \"]},\"1909\":{\"h\":\"6.3 反序列化\",\"t\":[\"//1.创建写出流、反序列化流 FileInputStream fis = new FileInputStream(\\\"object.dat\\\") ObjectInputStream ois = new ObjectInputStream(fis); //2.使用readObejct方法进行反序列化 Person p = (Person) ois.readObject(); Person p1 = (Person) ois.readObject(); //进行toString输出 System.out.println(p); System.out.println(p1); //3.关闭流 ois.close(); //异常处理：省略 \"]},\"1910\":{\"h\":\"7. serialVersionUID\",\"t\":[\"凡是实现Serializable接口的类都有一个表示序列化版本标识符的静态变量：值可自定义。 如果类没有显示定义这个静态常量，它的值是Java运行时环境根据类的内部细节自动生成的。若类的实例变量做了修改，serialVersionUID 可能发生变化。故建议，显式声明，否则，在对象序列化后，如果对类进行了修改，将无法反序列化。\",\"反序列化时，会比对这个ID，一致后才能正常反序列化。\",\"private static final long serialVersionUID; public static final long serialVersionUID = 475463534532L; \"]},\"1911\":{\"h\":\"8-9. NIO2与Jar包\"},\"1912\":{\"h\":\"Ⅰ. NIO2\"},\"1913\":{\"h\":\"1. Java NIO概述\",\"t\":[\"Java NIO (New IO，Non-Blocking IO)是从Java 1.4版本开始引入的一套新的IO API，可以替代标准的Java IO API。NIO与原来的IO有同样的作用和目的，但是使用的方式完全不同，NIO支持面向缓冲区的(IO是面向流的)、基于通道的IO操作。NIO将以更加高效的方式进行文件的读写操作。\",\"Java API中提供了两套NIO，一套是针对标准输入输出NIO，另一套就是网络编程NIO。\",\"java.nio.channels.Channel \",\"FileChannel:处理本地文件\",\"SocketChannel：TCP网络编程的客户端的Channel\",\"ServerSocketChannel:TCP网络编程的服务器端的Channel\",\"DatagramChannel：UDP网络编程中发送端和接收端的Channe\"]},\"1914\":{\"h\":\"2. NIO.2 概述\",\"t\":[\"随着 JDK 7 的发布，Java对NIO进行了极大的扩展，增强了对文件处理和文件系统特性的支持，以至于我们称他们为 NIO.2。因为 NIO 提供的一些功能，NIO已经成为文件处理中越来越重要的部分。\"]},\"1915\":{\"h\":\"3. 核心API\",\"t\":[\"早期的Java只提供了一个File类来访问文件系统，但File类的功能比较有限，所提供的方法性能也不高。而且，大多数方法在出错时仅返回失败，并不会提供异常信息。\"]},\"1916\":{\"h\":\"3.1 Path接口\",\"t\":[\"NIO. 2为了弥补这种不足，引入了Path接口，代表一个平台无关的平台路径，描述了目录结构中文件的位置。Path可以看成是File类的升级版本，实际引用的资源也可以不存在。\",\"//以前IO操作都是这样写的: import java.io.File; File file = new File(\\\"index.html\\\"); //在Java7 中，我们可以这样写： import java.nio.file.Path; import java.nio.file.Paths; Path path = Paths.get(\\\"index.html\\\"); \"]},\"1917\":{\"h\":\"3.2 Paths和Files工具类\",\"t\":[\"NIO.2在java.nio.file包下还提供了Files、Paths工具类，Files包含了大量静态的工具方法来操作文件；Paths则包含了两个返回Path的静态工厂方法。\"]},\"1918\":{\"h\":\"4. Path接口常用方法\",\"t\":[\"String toString() ： 返回调用 Path 对象的字符串表示形式\",\"boolean startsWith(String path) : 判断是否以 path 路径开始\",\"boolean endsWith(String path) : 判断是否以 path 路径结束\",\"boolean isAbsolute() : 判断是否是绝对路径\",\"Path getParent() ：返回Path对象包含整个路径，不包含 Path 对象指定的文件路径\",\"Path getRoot() ：返回调用 Path 对象的根路径\",\"Path getFileName() : 返回与调用 Path 对象关联的文件名\",\"int getNameCount() : 返回Path 根目录后面元素的数量\",\"Path getName(int idx) : 返回指定索引位置 idx 的路径名称\",\"Path toAbsolutePath() : 作为绝对路径返回调用 Path 对象\",\"Path resolve(Path p) :合并两个路径，返回合并后的路径对应的Path对象\",\"File toFile(): 将Path转化为File类的对象\"]},\"1919\":{\"h\":\"5. Paths类的方法\",\"t\":[\"Paths 类提供的静态 get() 方法用来获取 Path 对象：\",\"static Path get(String first, String … more) : 用于将多个字符串串连成路径\",\"static Path get(URI uri): 返回指定uri对应的Path路径\"]},\"1920\":{\"h\":\"6. Files类常用方法\",\"t\":[\"java.nio.file.Files 用于操作文件或目录的工具类。\",\"Path copy(Path src, Path dest, CopyOption … how) : 文件的复制\",\"Path createDirectory(Path path, FileAttribute<?> … attr) : 创建一个目录\",\"Path createFile(Path path, FileAttribute<?> … arr) : 创建一个文件\",\"void delete(Path path) : 删除一个文件/目录，如果不存在，执行报错\",\"void deleteIfExists(Path path) : Path对应的文件/目录如果存在，执行删除\",\"Path move(Path src, Path dest, CopyOption…how) : 将 src 移动到 dest 位置\",\"long size(Path path) : 返回 path 指定文件的大小\",\"boolean exists(Path path, LinkOption … opts) : 判断文件是否存在\",\"boolean isDirectory(Path path, LinkOption … opts) : 判断是否是目录\",\"boolean isRegularFile(Path path, LinkOption … opts) : 判断是否是文件\",\"boolean isHidden(Path path) : 判断是否是隐藏文件\",\"boolean isReadable(Path path) : 判断文件是否可读\",\"boolean isWritable(Path path) : 判断文件是否可写\",\"boolean notExists(Path path, LinkOption … opts) : 判断文件是否不存在\",\"SeekableByteChannel newByteChannel(Path path, OpenOption…how) : 获取与指定文件的连接，how 指定打开方式\",\"DirectoryStream<Path> newDirectoryStream(Path path) : 打开 path 指定的目录\",\"InputStream newInputStream(Path path, OpenOption…how):获取 InputStream 对象\",\"OutputStream newOutputStream(Path path, OpenOption…how) : 获取 OutputStream 对象\"]},\"1921\":{\"h\":\"Ⅱ. 第三方Jar包\",\"t\":[\"我们在开发中，可以直接使用第三方封装好的IO流操作包。这些第三方包底层用的也是基本的IO流操作。这些封装后的IO操作更加简单，高效。\"]},\"1922\":{\"h\":\"9-1. 概述\",\"t\":[\"提示\",\"更多网络编程内容详见：通信协议和JavaWeb\"]},\"1923\":{\"h\":\"简介\",\"t\":[\"Java是 Internet 上的语言，它从语言级上提供了对网络应用程序的支持，程序员能够很容易开发常见的网络应用程序。\",\"Java提供的网络类库，可以实现无痛的网络连接，联网的底层细节被隐藏在 Java 的本机安装系统里，由 JVM 进行控制。并且 Java 实现了一个跨平台的网络库， 程序员面对的是一个统一的网络编程环境。\"]},\"1924\":{\"h\":\"1. 网络基础\",\"t\":[\"计算机网络：把分布在不同地理区域的计算机与专门的外部设备用通信线路互连成一个规模大、功能强的网络系统，从而使众多的计算机可以方便地互相传递信息、共享硬件、软件、数据信息等资源。\",\"网络编程的目的：直接或间接地通过网络协议与 其它计算机实现数据交换，进行通讯。\",\"网络编程中的主要问题 \",\"如何 准确地定位网络上一台或多台主机；定位主机上的特定的应用\",\"找到主机后如何可靠高效地进行数据传输\"]},\"1925\":{\"h\":\"2. 网络通信的要素\",\"t\":[\"IP和端口号：解决如何找到和定位主机\",\"网络通信协议：解决如何高效的进行数据传输\"]},\"1926\":{\"h\":\"3. 如何实现网络通信\",\"t\":[\"通信双方的地址：IP、端口号\",\"一定的规则：网络通信协议 \",\"OSI参考模型：模型过于理想化，未能在因特网上进行广泛推广\",\"TCP/IP参考模型(或TCP/IP协议)：事实上的国际标准。\"]},\"1927\":{\"h\":\"4. 网络通信协议\",\"t\":[\"9-1-1\"]},\"1928\":{\"h\":\"5. 通信过程\",\"t\":[\"9-1-2\"]},\"1929\":{\"h\":\"9-2. IP与端口号\"},\"1930\":{\"h\":\"Ⅰ. IP与端口号\"},\"1931\":{\"h\":\"1. hostAddress：IP地址介绍\",\"t\":[\"唯一的标识 Internet 上的计算机（通信实体）\"]},\"1932\":{\"h\":\"2. IP地址分类\"},\"1933\":{\"h\":\"2.1 分类方式1：IPV4和IPV6\",\"t\":[\"IPV4：4个字节组成，4个0-255。大概42亿，30亿都在北美，亚洲4亿。2011年初已经用尽。以点分十进制表示，如192.168.0.1\",\"IPV6：128位（16个字节），写成8个无符号整数，每个整数用四个十六进制位表示，数之间用冒号（：）分开 \",\"如：3ffe:3201:1401:1280:c8ff:fe4d:db39:1984\"]},\"1934\":{\"h\":\"2.2 分类方式2：公网地址和私有地址\",\"t\":[\"公网地址：万维网使用\",\"私有地址：局域网使用。 \",\"192.168.开头的就是私有址址，范围即为192.168.0.0--192.168.255.255\"]},\"1935\":{\"h\":\"3. 本机IP\",\"t\":[\"本地回环地址(hostAddress)：127.0.0.1 主机名(hostName)：localhost\"]},\"1936\":{\"h\":\"4. hostName：域名\",\"t\":[\"用来对应IP地址，域名需要进行解析才能与IP地址对应。\",\"当在连接网络时输入一个主机的域名后，域名服务器(DNS)负责将域名转化成IP地址，这样才能和主机建立连接。\",\"9-2-1\"]},\"1937\":{\"h\":\"5. 端口号\",\"t\":[\"端口号标识正在计算机上运行的进程（程序），不同的进程有不同的端口号，被规定为一个16位的整数，范围： 0~65535。\",\"9-2-2\"]},\"1938\":{\"h\":\"6. 端口分类：\",\"t\":[\"公认端口：0~1023。被预先定义的服务通信占用（如：HTTP占用端口80，FTP占用端口21，Telnet占用端口23）\",\"注册端口：1024~49151。分配给用户进程或应用程序。（如：Tomcat占用端口8080，MySQL占用端口3306，Oracle占用端口1521等）\",\"动态/私有端口：49152~65535。自己写的程序用的。\"]},\"1939\":{\"h\":\"7. Socket\",\"t\":[\"端口号与IP 地址的组合得出一个网络套接字： 接字：Socket。\"]},\"1940\":{\"h\":\"Ⅱ. InetAddress类\"},\"1941\":{\"h\":\"readme\",\"t\":[\"Internet上的主机有两种方式表示地址：\",\"域名(hostName)：www.google.com\",\"IP 地址(hostAddress)：202.108.35.210\"]},\"1942\":{\"h\":\"1. 介绍\",\"t\":[\"class：rt.jar>java>net>InetAddress\",\"InetAddress类主要表示IP地址，两个子类：Inet4Address、Inet6Address。\",\"InetAddress 类对象含有一个 Internet 主机地址的域名和IP地址\"]},\"1943\":{\"h\":\"2. 构造器\",\"t\":[\"InetAddress 类没有提供公共的构造器，而是提供 了 如下几个 静态方法来获取InetAddress\"]},\"1944\":{\"h\":\"2.1 getLocalHost：获得本地IP对象\",\"t\":[\"public static InetAddress getLocalHost() throws UnknownHostException{...}; ================================================================== InetAddress ip = InetAddress.getLocalHost(); System.out.println(ip);//Viktor/192.168.31.247 \"]},\"1945\":{\"h\":\"2.2 getByName\",\"t\":[\"根据参数获得IP对象（参数ip地址字符串或域名字符串）。\",\"public static InetAddress getByName(String host) =========================================================== InetAddress inet2 = InetAddress.getByName(\\\"www.google.com\\\"); System.out.println(inet2); //www.google.com/199.96.59.61 InetAddress inet3 = InetAddress.getByName(\\\"199.96.59.61\\\"); System.out.println(inet3); //199.96.59.61 \"]},\"1946\":{\"h\":\"3. getHostAddress\",\"t\":[\"以文本的形式，返回IP地址字符串\",\"public String getHostAddress(); ================================================= InetAddress inet4 = InetAddress.getByName(\\\"www.mi.com\\\"); String inetHostAddress = inet4.getHostAddress(); System.out.println(inetHostAddress);//113.106.97.4 \"]},\"1947\":{\"h\":\"4. getHostName：获取IP地址的主机名\",\"t\":[\"String getHostName() ================================================= InetAddress inet4 = InetAddress.getByName(\\\"www.mi.com\\\"); String hostName = inet4.getHostName(); System.out.println(hostName); //www.mi.com \"]},\"1948\":{\"h\":\"5. isReachable：测试是否可以达到该地址\",\"t\":[\"参数是超时的时间，单位是ms时间戳\",\"boolean isReachable(int timeout) ================================================= InetAddress inet4 = InetAddress.getByName(\\\"www.mi.com\\\"); boolean reachable = inet4.isReachable(200); System.out.println(reachable); //true \"]},\"1949\":{\"h\":\"9-3. 网络协议\"},\"1950\":{\"h\":\"Ⅰ. 网络通信协议\"},\"1951\":{\"h\":\"1. 网络通信协议\",\"t\":[\"计算机网络中实现通信必须有一些约定，即通信协议.\",\"对速率、传输代码、代码结构、传输控制步骤、出错控制等制定标准。\"]},\"1952\":{\"h\":\"2. 通信协议的分层\",\"t\":[\"计算机网络通信涉及内容很多，比如指定源地址和目标地址，加密解密，压缩解压缩，差错控制，流量控制，路由控制，如何实现如此复杂的网络协议呢？\",\"在制定协议时，把复杂成份分解成一些简单的成份，再将它们复合起来。\",\"最常用的复合方式是层次方式，即同层间可以通信、上一层可以调用下一层，而与再下一层不发生关系。各层互不影响，利于系统的开发和扩展。\"]},\"1953\":{\"h\":\"Ⅱ. TCP与UDP\"},\"1954\":{\"h\":\"1. 传输层协议\",\"t\":[\"传输层协议中有两个非常重要的协议：\",\"传输控制协议TCP(Transmission Control Protocol)\",\"用户数据报协议UDP(User Datagram Protocol)。\"]},\"1955\":{\"h\":\"2. TCP/IP 协议簇\",\"t\":[\"TCP/IP 以其两个主要协议：传输控制协议(TCP) 和网络互联协议(IP)而得名，实际上是一组协议，包括多个具有不同功能且互为关联的协议。\",\"TCP/IP协议模型从更实用的角度出发，形成了高效的四层体系结构，即物理链路层、IP层、传输层和应用层。\",\"IP协议：IP(Internet Protocol)协议是网络层的主要协议，支持网间互连的数据通信。\"]},\"1956\":{\"h\":\"3. TCP协议\",\"t\":[\"使用TCP协议前，须先建立TCP连接，形成传输数据通道\",\"传输前，采用“ 三次握手”方式，点对点通信，是可靠的\",\"TCP协议进行通信的两个应用进程：客户端、服务端。\",\"在连接中可进行大数据量的传输\",\"传输完毕，需释放已建立的连接，效率低\"]},\"1957\":{\"h\":\"4. UDP协议\",\"t\":[\"常用于：视频播放。\",\"将数据、源、目的封装成数据包，不需要建立连接\",\"每个数据报的大小限制在64K内\",\"发送不管对方是否准备好，接收方收到也不确认，故是不可靠的\",\"可以广播发送\",\"发送数据结束时无需释放资源，开销小，速度快\"]},\"1958\":{\"h\":\"5. TCP的三次握手\",\"t\":[\"形象类比：A（客户端）与B（服务端）进行对话\",\"A：B，你好，我是A；\",\"B：A，你好，我是B，我知道你是A\",\"A：B，OK，我现在知道你知道我是A了。 结论：至此，三次对话，双方都知道对方是谁了，也知道对方知道自己是谁了。\",\"9-3-1\"]},\"1959\":{\"h\":\"6. TCP的四次挥手\",\"t\":[\"客户端：我要断开连接了->服务端\",\"服务端：我知道了->客户端\",\"服务端：连接断开->客户端\",\"客户端：测试是否断开->服务端\",\"9-3-2\"]},\"1960\":{\"h\":\"9-4. Socket\"},\"1961\":{\"h\":\"1. 说明\",\"t\":[\"网络上具有唯一标识的IP地址和端口号组合在一起才能构成唯一能识别的标识符套接字 Socket\",\"利用套接字(Socket)开发网络应用程序早已被广泛的采用，以至于成为事实上的标准。\",\"网络通信其实就是Socket间的通信。 \",\"通信的两端都要有Socket，是两台机器间通信的端点。\",\"Socket允许程序把网络连接当成一个流，数据在两个Socket间通过IO传输。\",\"一般主动发起通信的应用程序属客户端，等待通信请求的为服务端。\"]},\"1962\":{\"h\":\"2. Socket分类\",\"t\":[\"流套接字（stream socket）：使用TCP提供可依赖的字节流服务\",\"数据报套接字（datagram socket）：使用UDP提供“尽力而为”的数据报服务\"]},\"1963\":{\"h\":\"3. Socket类常用构造器\"},\"1964\":{\"h\":\"3.1 根据IP创建\",\"t\":[\"创建一个流套接字并将其连接到指定IP 地址的指定端口号。\",\"public Socket(InetAddress address,int port)throws IOException \"]},\"1965\":{\"h\":\"3.2 根据host创建\",\"t\":[\"创建一个流套接字并将其连接到指定主机上的指定端口号。\",\"public Socket(String host,int port)throws UnknownHostException,IOException \"]},\"1966\":{\"h\":\"4. Socket类常用方法\",\"t\":[\"public InputStream getInputStream()返回此套接字的输入流。可以用于接收网络消息\",\"public OutputStream getOutputStream()返回此套接字的输出流。可以用于发送网络消息\",\"public InetAddress getInetAddress()此套接字连接到的远程 IP 地址；如果套接字是未连接的，则返回 null。\",\"public InetAddress getLocalAddress()获取套接字绑定的本地地址。 即本端的IP地址\",\"public int getPort()此套接字连接到的远程端口号；如果尚未连接套接字，则返回0。\",\"public int getLocalPort()返回此套接字绑定到的本地端口。 如果尚未绑定套接字，则返回 -1。即本端的端口号。\",\"public void close()关闭此套接字。套接字被关闭后，便不可在以后的网络连接中使用（即无法重新连接或重新绑定）。需要创建新的套接字对象。 关闭此套接字也将会关闭该套接字的 InputStream 和OutputStream。\",\"public void shutdownInput()如果在套接字上调用 shutdownInput() 后从套接字输入流读取内容，则流将返回 EOF（文件结束符）。即不能在从此套接字的输入流中接收任何数据。\",\"public void shutdownOutput()禁用此套接字的输出流。对于 TCP 套接字，任何以前写入的数据都将被发送，并且后跟 TCP 的正常连接终止序列。 如果在套接字上调用 shutdownOutput() 后写入套接字输出流，\",\"则该流将抛出 IOException。 即不能通过此套接字的输出流发送任何数据。\"]},\"1967\":{\"h\":\"9-5. TCP编程\"},\"1968\":{\"h\":\"1. 基于Socket的TCP编程\",\"t\":[\"Java语言的基于套接字编程分为服务端编程和客户端编程，其通信模型如图所示：\",\"9-5-1\"]},\"1969\":{\"h\":\"2. 客户端Socket\",\"t\":[\"客户端Socket 的工作过程包含以下四个基本的步骤\",\"创建Socket：根据指定服务端的 IP 地址或端口号构造 Socket 类对象。若服务器端 响应，则建立客户端到服务器的通信线路。若连接失败，会出现异常。\",\"打开连接到Socket的输入/写出流 \",\"使用 getInputStream()方法获得输入流\",\"使用 getOutputStream()方法获得输出流，进行数据传输\",\"按照一定的协议对Socket进行读/写操作 \",\"通过输入流读取服务器放入线路的信息（但不能读取自己放入线路的信息）\",\"通过输出流将信息写入线程\",\"关闭Socket：断开客户端到服务器的连接，释放线路\"]},\"1970\":{\"h\":\"3. 客户端创建Socket对象\",\"t\":[\"客户端程序可以使用Socket类创建对象， 创建的同时会自动向服务器方发起连接。\"]},\"1971\":{\"h\":\"3.1 Socket的构造器\",\"t\":[\"public Socket(InetAddress address,int port)throws IOException public Socket(String host,int port)throws UnknownHostException,IOException \"]},\"1972\":{\"h\":\"3.2 示例\",\"t\":[\"public void client() throws IOException { //1.创建Socket对象,参数是服务器端的IP和端口号 Socket clientSocket = new Socket(\\\"127.0.0.1\\\", 2333); //2.返回此Socket对象的输出流,可以用于发送网络消息 OutputStream out = clientSocket.getOutputStream(); //3.进行输出byte[] out.write(\\\"hello\\\".getBytes()); //关闭Socket clientSocket.close(); } \"]},\"1973\":{\"h\":\"4. 服务器端Socket\",\"t\":[\"服务器程序的工作过程包含以下四个基本的步骤\",\"创建服务端的ServerSocket：调用 ServerSocket(int port) 创建一个服务器端套接字，并绑定到指定端口上。用于监听客户端的请求。\",\"监听连接请求：调用 accept()监听连接请求，如果客户端请求连接，则接受连接，返回通信套接字对象\",\"获取输入流和输出流：调用该Socket 类对象的 getOutputStream() 和 getInputStream ()获取输出流和输入流，开始网络数据的发送和接收。\",\"关闭ServerSocket：客户端访问结束，关闭通信套接字。\"]},\"1974\":{\"h\":\"5. 服务器端建立ServerSocket\"},\"1975\":{\"h\":\"5.1 创建ServerSocket对象\",\"t\":[\"ServerSocket 对象负责等待客户端请求建立套接字连接，类似邮局某个窗口中的业务员。也就是说， 服务器必须事先建立一个等待客户请求建立套接字的 连接的ServerSocket 对象。\",\"该类的构造器，接受一个端口号作为参数，端口号就是本服务端的端口号，客户端通过服务端的ip和创建ServerSocket对象时指定的端口号，来找到服务端。\",\"public ServerSocket(int port) throws IOException; \"]},\"1976\":{\"h\":\"5.2 accept方法\",\"t\":[\"所谓“接收”客户的套接字请求，就是accept()方法会返回一个 Socket 对象。\",\"这个Socket对象就是客户端的Socket对象，有了该对象就可以与客户端进行通信 了。\"]},\"1977\":{\"h\":\"5.3 使用示例\",\"t\":[\"public void server() throws IOException { //1.创建服务器套接字对象：ServerSocket ServerSocket serverSocket = new ServerSocket(2333); //2.监听接受客户端的请求，并获取请求的套接字对象 Socket client = serverSocket.accept(); //3.根据请求的套接字对象，获取请求时发送过来的流对象 InputStream inputStream = client.getInputStream(); //4.使用获取的流对象read流的数据 byte[] buf = new byte[1024]; int num = inputStream.read(buf); String res = new String(buf, 0, num); System.out.println(res); //5.关闭服务器套接字和获取的客户端套接字 client.close(); serverSocket.close(); } \"]},\"1978\":{\"h\":\"6. TCP网络编程示例\",\"t\":[\"就是把上面两个方法结合起来。\",\"先启动服务端：调用服务端方法：server()，此时服务端将一直处于监听状态，等待客户端连接。\",\"再启动客户端：调用客户端方法：client()，注意ip和端口\",\"此时客户端与服务端连接成功，客户端开始想服务端传输数据，服务端接受到数据。\"]},\"1979\":{\"h\":\"9-6. UDP编程\"},\"1980\":{\"h\":\"Ⅰ. UDP网络编程\"},\"1981\":{\"h\":\"1. UDP网络通信\",\"t\":[\"类 DatagramSocket 和 DatagramPacket 实现了基于 UDP 协议网络程序。\",\"UDP数据报通过数据报套接字 DatagramSocket 发送和接收，系统不保证UDP数据报一定能够安全送到目的地，也不能确定什么时候可以抵达。\",\"DatagramPacket 对象封装了UDP数据报，在数据报中包含了发送端的IP地址和端口号以及接收端的IP地址和端口号。\",\"UDP协议中每个数据报都给出了完整的地址信息，因此无须建立发送方和接收方的连接。如同发快递包裹一样。\"]},\"1982\":{\"h\":\"2. UDP通信流程\",\"t\":[\"发送端与接收端是两个独立的运行程序\",\"DatagramSocket与DatagramPacket\",\"建立发送端，接收端\",\"建立数据包\",\"调用Socket的发送、接收方法\",\"关闭Socket\"]},\"1983\":{\"h\":\"3. 发送端示例\",\"t\":[\"DatagramSocket ds = null; try { ds = new DatagramSocket(); byte[] by = \\\"hello,atguigu.com\\\".getBytes(); DatagramPacket dp = new DatagramPacket (by, 0, by.length,InetAddress.getByName(\\\"127.0.0.1\\\"), 10000); ds.send(dp); } catch (Exception e) { e.printStackTrace(); } finally { if (ds != null) ds.close(); } \"]},\"1984\":{\"h\":\"4. 接收端示例\",\"t\":[\"在接收端，要指定监听的接口\",\"DatagramSocket ds = null; try { ds = new DatagramSocket(10000); byte[] by = new byte[1024]; DatagramPacket dp = new DatagramPacket(by, by.length); ds.receive(dp); String str = new String(dp.getData(), 0, dp.getLength()); System.out.println(str + \\\"--\\\" + dp.getAddress()); } catch (Exception e) { e.printStackTrace(); } finally { if (ds != null) ds.close(); } \"]},\"1985\":{\"h\":\"Ⅱ. DatagramSocket\",\"t\":[\"DatagramSocket 类的常用方法如下：\",\"public DatagramSocket(int port)创建数据报套接字并将其绑定到本地主机上的指定端口。套接字将被绑定到通配符地址，IP 地址由内核来选择。\",\"public DatagramSocket(int port,InetAddress laddr)创建数据报套接字，将其绑定到指定的本地地址。本地端口必须在 0 到 65535 之间（包括两者）。如果 IP 地址为 0.0.0.0，套接字将被绑定到通配符地址，IP 地址由内核选择。\",\"public void close()关闭此数据报套接字。\",\"public void send(DatagramPacket p)从此套接字发送数据报包。DatagramPacket 包含的信息指示：将要发送的数据、其长度、远程主机的IP 地址和远程主机的端口号。\",\"public void receive(DatagramPacket p)从此套接字接收数据报包。当此方法返回时，DatagramPacket的缓冲区填充了接收的数据。数据报包也包含发送方的 IP 地址和发送方机器上的端口号。 此方法在接收到数据报前一直阻塞。数据报包对象的 length 字段包含所接收信息的长度。如果信息比包的长度长，该信息将被截短。\",\"public InetAddress getLocalAddress()获取套接字绑定的本地地址。\",\"public int getLocalPort()返回此套接字绑定的本地主机上的端口号。\",\"public InetAddress getInetAddress()返回此套接字连接的地址。如果套接字未连接，则返回null。\",\"public int getPort()返回此套接字的端口。如果套接字未连接，则返回-1。\"]},\"1986\":{\"h\":\"Ⅲ. DatagramPacket\",\"t\":[\"DatagramPacket 类的常用方法如下\",\"public DatagramPacket(byte[] buf,int length)构造 DatagramPacket，用来接收长度为 length 的数据包。 length 参数必须小于等于 buf.length。\",\"public DatagramPacket(byte[] buf,int length,InetAddress address,int port)构造数据报包，用来将长度为 length 的包发送到指定主机上的指定端口号。length参数必须小于等于 buf.length。\",\"public InetAddress getAddress()返回某台机器的 IP 地址，此数据报将要发往该机器或者是从该机器接收到的。\",\"public int getPort()返回某台远程主机的端口号，此数据报将要发往该主机或者是从该主机接收到的。\",\"public byte[] getData()返回数据缓冲区。接收到的或将要发送的数据从缓冲区中的偏移量 offset 处开始，持续 length 长度。\",\"public int getLength()返回将要发送或接收到的数据的长度。\"]},\"1987\":{\"h\":\"9-7. URL编程\"},\"1988\":{\"h\":\"1. URL介绍\",\"t\":[\"URL(Uniform Resource Locator)：统一资源定位符，它表示 Internet 上某一 资源的地址。\",\"它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源。通过 URL 我们可以访问 Internet 上的各种网络资源，比如最常见的 www，ftp站点。\",\"浏览器通过解析给定的 URL 可以在网络上查找相应的文件或其他资源。\"]},\"1989\":{\"h\":\"2. URL的基本结构\",\"t\":[\"由5部分组成：< 传输协议>://< 主机名>:< 端口号>/< 文件名># 片段名?\",\"#片段名：即锚点\",\"参数列表格式：参数名=参数值&参数名=参数值....\",\"http://192.168.1.100:8080/helloworld/user#a?uname=shk&password=123 \"]},\"1990\":{\"h\":\"3. URL类\",\"t\":[\"为了表示URL，java.net 中实现了类 URL。\",\"public final class URL implements java.io.Serializable {} \",\"可以通过下面的几个构造器来初始化一个 URL 对象。\",\"spec：URL地址的字符串\",\"context：基 URL\",\"protocol：传输协议\",\"host：主机名\",\"file：文件名\",\"port：端口号\",\"public URL(String spec) public URL(URL context, String spec) Public URL(String protocol, String host, String file) public URL(String protocol, String host, int port, String file) ==================================================================== URL url = new URL (\\\"http://www. atguigu.com/\\\"); URL downloadUrl = new URL(url, \\\"download.html\\\") URL url = new URL(\\\"http\\\",\\\"www.atguigu.com\\\", \\\"download. html\\\"); URL gamelan = new URL(\\\"http\\\", \\\"www.atguigu.com\\\", 80, \\\"download.html\\\"); \",\"异常处理：以上构造器会抛出MalformedURLException异常，URL类的构造器都声明抛出非运行时异常，必须要对这一异常进行处理，通常是用 try-catch 语句进行捕获。\"]},\"1991\":{\"h\":\"4. URL类常用方法\",\"t\":[\"一个URL对象生成后，其属性是不能被改变的，但可以通过它给定的方法来获取这些属性：\",\"public String getProtocol( ) 获取该URL的协议名\",\"public String getHost( ) 获取该URL的主机名\",\"public String getPort( ) 获取该URL的端口号\",\"public String getPath( ) 获取该URL的文件路径\",\"public String getFile( ) 获取该URL的文件名\",\"public String getQuery( ) 获取该URL的查询名\"]},\"1992\":{\"h\":\"5. URLConnection\",\"t\":[\"URLConnection类是专门针对HTTP协议的。\",\"URL的方法 openStream()：能从网络上读取数据\",\"若希望输出数据，例如向服务器端的 CGI （公共网关接口-Common Gateway Interface-的简称，是用户浏览器和服务器端的应用程序进行连接的接口）程序发送一些数据，则必须先与URL建立连接，然后才能对其进行读写，此时需要使用URLConnection 。\"]},\"1993\":{\"h\":\"5.1 URLConnection的创建\",\"t\":[\"表示到URL所引用的远程对象的连接。当与一个URL建立连接时，首先要在一个 URL 对象上通过方法 openConnection() 生成对应的 URLConnection对象。如果连接过程失败，将产生IOException.\",\"URL netchinaren = new URL (\\\"http://www.atguigu.com/index.shtml\\\"); URLConnectonn u = netchinaren.openConnection( ); \"]},\"1994\":{\"h\":\"5.2 交互方法\",\"t\":[\"public Object getContent( ) throws IOException\",\"public int getContentLength( )\",\"public String getContentType( )\",\"public long getDate( )\",\"public long getLastModified( )\",\"public InputStream getInputStream( )throws IOException\",\"public OutputSteram getOutputStream( )throws IOException\"]},\"1995\":{\"h\":\"6. URI、URL和URN的区别\",\"t\":[\"URI，是uniform resource identifier，统一资源标识符，用来唯一的标识一个资源。\",\"而URL是uniform resource locator，统一资源定位符，它是一种具体的URI。即URL可以用来标识一个资源，而且还指明了如何locate这个资源。\",\"而URN，uniform resource name，统一资源命名，是通过名字来标识资源，比如mailto:java-net@java.sun.com。也就是说，URI是以一种抽象的，高层次概念定义统一资源标识，而URL和URN则是具体的资源标识的方式。\",\"9-7-1\",\"URL和URN都是一种URI。在Java的URI中，一个URI实例可以代表绝对的，也可以是相对的，只要它符合URI的语法规则。而URL类则不仅符合语义，还包含了定位该资源的信息，因此它不能是相对的。\"]},\"1996\":{\"h\":\"7. 小结\",\"t\":[\"位于网络中的计算机具有唯一的IP地址，这样不同的主机可以互相区分。\",\"客户端－服务器是一种最常见的网络应用程序模型。服务器是一个为其客户端提供某种特定服务的硬件或软件。客户机是一个用户应用程序，用于访问某台服务器提供的服务。端口号是对一个服务的访问场所，它用于区分同一物理计算机上的多个服务。套接字用于连接客户端和服务器，客户端和服务器之间的每个通信会话使用一个不同的套接字。TCP协议用于实现面向连接的会话。\",\"Java 中有关网络方面的功能都定义在 java.net 程序包中。Java 用 InetAddress 对象表示 IP 地址，该对象里有两个字段：主机名(String) 和 IP 地址(int)。\",\"类 Socket 和 ServerSocket 实现了基于TCP协议的客户端－服务器程序。Socket是客户端和服务器之间的一个连接，连接创建的细节被隐藏了。这个连接提供了一个安全的数据传输通道，这是因为 TCP 协议可以解决数据在传送过程中的丢失、损坏、重复、乱序以及网络拥挤等问题，它保证数据可靠的传送。\",\"类 URL 和 URLConnection 提供了最高级网络应用。URL 的网络资源的位置来同一表示Internet 上各种网络资源。通过URL对象可以创建当前应用程序和 URL 表示的网络资源之间的连接，这样当前程序就可以读取网络资源数据，或者把自己的数据传送到网络上去\"]},\"1997\":{\"h\":\"a-1. 反射机制介绍\"},\"1998\":{\"h\":\"Reflection：反射机制\",\"t\":[\"Reflection（反射）是被视为动态语言的关键，反射机制允许程序在执行期借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。\"]},\"1999\":{\"h\":\"1. 动态语言与静态语言\",\"t\":[\"动态语言：是一类在运行时可以改变其结构的语言：例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或是其他结构上的变化。通俗点说就是 在运行时代码可以根据某些条件改变自身结构。 \",\"主要动态语言：Object-C、C#、JavaScript、PHP、Python、Erlang。\",\"静态语言：需要编译，与动态语言相对应的，运行时结构不可变的语言就是静态语言。 \",\"如Java、C、C++。\",\"Java：Java不是动态语言，但Java可以称之为“准动态语言”。即Java有一定的动态性，我们可以利用反射机制、字节码操作获得类似动态语言的特性。Java的动态性让编程的时候更加灵活！\"]},\"2000\":{\"h\":\"2. Class与反射工作原理\",\"t\":[\"Class类是类的类，加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象（一个类只有一个Class对象），这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以，我们形象的称之为： 反射\"]},\"2001\":{\"h\":\"3. 反射机制提供的功能\",\"t\":[\"在运行时判断任意一个对象所属的类\",\"在运行时构造任意一个类的对象\",\"在运行时判断任意一个类所具有的成员变量和方法\",\"在运行时获取泛型信息\",\"在运行时调用任意一个对象的成员变量和方法\",\"在运行时处理注解\",\"生成动态代理\"]},\"2002\":{\"h\":\"4. 反射相关API\",\"t\":[\"java.lang.Class: 代表一个类\",\"java.lang.reflect.Method: 代表类的方法\",\"java.lang.reflect.Field: 代表类的 成员 变量\",\"java.lang.reflect.Constructor: 代表类 的 构造 器\",\"…\"]},\"2003\":{\"h\":\"5. 反射的动态性\",\"t\":[\"反射机制最大的特点，就是动态性（通用性），这也是为什么框架中会大量的使用反射。\"]},\"2004\":{\"h\":\"5.1 示例\",\"t\":[\"使用代码体验反射的动态性\",\"//1.创建一个函数：根据全类名参数创建类的对象 public Object getInstance(String classPath) throws Exception { Class clazz = Class.forName(classPath); return clazz.newInstance(); } //2.动态创建一个随机对象 public void test2(){ int num = new Random().nextInt(3);//0,1,2 String classPath = \\\"\\\"; switch(num){ case 0: classPath = \\\"java.util.Date\\\"; break; case 1: classPath = \\\"java.lang.Object\\\"; break; case 2: classPath = \\\"com.atguigu.java.Person\\\"; break; } Object obj = getInstance(classPath); System.out.println(obj); } \"]},\"2005\":{\"h\":\"5.2 补充说明\",\"t\":[\"为什么不用new，而用反射创建类的对象：我们不知道要创建什么对象，所以无法确定变量的类型，无法new\",\"public Object getObj(String className) throws Exception{ className cn1 = new className(); //直接报错 return cn1; } \",\"为什么不直接同判断返回new好的对象：要同时new很多对象，浪费资源。\"]},\"2006\":{\"h\":\"6. 反射机制使用示例：仅体验\"},\"2007\":{\"h\":\"6.1 创建Test类：Person\",\"t\":[\"class Person{ private String name; public int age; public String toString() { return \\\"Person{\\\" +\\\"name='\\\" + name + '\\\\'' +\\\", age=\\\" + age +'}'; } public String getName() { return name; } public void setName(String name) { this.name = name; } public Person(String name, int age) { this.name = name; this.age = age; } private Person(String name) { this.name = name; } public void show(){ System.out.println(\\\"你好，我是一个人\\\"); } private String showNation(String nation){ System.out.println(\\\"我的国籍是：\\\" + nation); return nation; } } \"]},\"2008\":{\"h\":\"6.2 不使用反射：对Person的操作\",\"t\":[\"public void test(){ Person p1 = new Person(\\\"Aaron\\\", 20); p1.age = 20; System.out.println(p1); //调用toString方法 p1.show(); //你好，我是一个人 } \"]},\"2009\":{\"h\":\"6.3 使用反射：操作Person\",\"t\":[\"public void test1() throws Exception { //1.通过反射，创建Person类的对象 Class<Person> pClass = Person.class; Constructor<Person> cons = pClass.getConstructor(String.class, int.class); Person p = cons.newInstance(\\\"Aaron\\\", 20); System.out.println(p); //调用了Person对象的toString方法 //2.通过反射，调用对象指定的属性、方法 Field age = pClass.getDeclaredField(\\\"age\\\"); //调用属性 System.out.println(age); //20 Method show = pClass.getDeclaredMethod(\\\"show\\\"); //调用方法 show.invoke(p);//你好，我是一个人 } \"]},\"2010\":{\"h\":\"6.4 使用反射：操作Person私有成员\",\"t\":[\"public void test2() throws Exception { //1.通过反射，调用私有化构造器，创建Person对象 Class<Person> pClass = Person.class; Constructor<Person> cons = pClass.getDeclaredConstructor(String.class); cons.setAccessible(true); Person p1 = cons.newInstance(\\\"Jerry\\\"); //2.调用私有属性 Field name = pClass.getDeclaredField(\\\"name\\\"); name.setAccessible(true); name.set(p1,\\\"Alen\\\"); System.out.println(p1); //Person{name='Alen', age=0} //3.调用私有方法 Method showNation = pClass.getDeclaredMethod(\\\"showNation\\\", String.class); showNation.setAccessible(true); Object nation = showNation.invoke(p1, \\\"China\\\"); //我的国籍是：China System.out.println(nation); //China } \"]},\"2011\":{\"h\":\"a-2. Class\"},\"2012\":{\"h\":\"1. Class类\",\"t\":[\"Class的全类名为：Object.lang.Class\",\"Class属于类的类，即每个类所属的类，我们把类当做是对象（万物皆对象），那么类所属的类就是Class类。对于每个类而言，JRE 都为其保留一个不变的 Class 类型的对象。\",\"Class类是反射的源头。我们需要使用Class类的对象拿到想要的内容。\"]},\"2013\":{\"h\":\"2. Class与类的加载\",\"t\":[\"程序经过javac.exe命令以后，会生成一个或多个字节码文件(.class结尾)。接着我们使用java.exe命令对某个字节码文件进行解释运行。相当于将某个字节码文件加载到内存中。此过程就称为类的加载。加载到内存中的类，我们就称为运行时类，此运行时类，就作为Class的一个实例。\"]},\"2014\":{\"h\":\"3. 使用Class的本质\",\"t\":[\"Class是直接操纵加载到内存里的类的，Class的实例就对应着一个运行时类。\",\"我们使用类时，会将类加载到内存中，内存中的这个类就是Class的一个实例。我们可以使用Class类的实例，利用Class提供的方法，来操作内存中的类的一切元素，包括私有元素，因为私有元素也加载到内存中了。\"]},\"2015\":{\"h\":\"4. Class的特点\",\"t\":[\"Class本身也是一个类\",\"Class 对象只能由系统建立对象\",\"一个加载的类在 JVM 中只会有一个Class实例\",\"一个Class对象对应的是一个加载到JVM中的一个.class文件\",\"每个类的实例都会记得自己是由哪个 Class 实例所生成\",\"通过Class可以完整地得到一个类中的所有被加载的结构\",\"Class类是Reflection的根源，针对任何你想动态加载、运行的类，唯有先获得相应的Class对象\"]},\"2016\":{\"h\":\"5. 可以有Class对象的元素\",\"t\":[\"class：外部类，成员(成员内部类，静态内部类)，局部内部类，匿名内部类\",\"interface：接口\",\"[]：数组\",\"enum：枚举\",\"annotation：注解@interface\",\"primitive type：基本数据类型\",\"void\",\"Class<Object> c1 = Object.class; System.out.println(c1); //class java.lang.Object Class<Override> c2 = Override.class; System.out.println(c2); //interface java.lang.Override Class<Void> c3 = void.class; System.out.println(c3); //void \"]},\"2017\":{\"h\":\"6. 获取Class类的实例\",\"t\":[\"加载到内存中的运行时类，会缓存一定的时间。在此时间之内，我们可以通过不同的方式来获取此运行时类（即获取Class类的实例），一共有四种方法，以下四个方法创建的Class是同一个Class。\"]},\"2018\":{\"h\":\"6.1 调用运行时类的属性：.class\",\"t\":[\"若已知具体的类，通过类的class属性获取，该方法最为安全可靠，程序性能最高\",\"Class<Person> c1 = Person.class; System.out.println(c1); //class ReflectionStudy.Person \"]},\"2019\":{\"h\":\"6.2 通过运行时类的对象,调用getClass()\",\"t\":[\"已知某个类的实例，调用该实例的getClass()方法获取Class对象\",\"Person p1 = new Person(); Class<? extends Person> c2 = p1.getClass(); System.out.println(c2); //class ReflectionStudy.Person \"]},\"2020\":{\"h\":\"6.3 调用Class的静态方法：forName(String classPath)【常用】\",\"t\":[\"已知一个类的全类名（包+类名），且该类在类路径下，可通过Class类的静态方法forName()获取，可能抛出 ClassNotFoundException\",\"Class<?> c3 = Class.forName(\\\"ReflectionStudy.Person\\\"); System.out.println(c3); //class ReflectionStudy.Person \"]},\"2021\":{\"h\":\"6.4 使用类的加载器：ClassLoader (了解)\",\"t\":[\"ClassLoader cl = this.getClass().getClassLoader(); Class<?> c4 = cl.loadClass(\\\"ReflectionStudy.Person\\\"); System.out.println(c4); //class ReflectionStudy.Person \"]},\"2022\":{\"h\":\"7. Class类的常用方法\",\"t\":[\"详见：内置函数>反射类\"]},\"2023\":{\"h\":\"a-3. 类的加载\"},\"2024\":{\"h\":\"Ⅰ. 类的加载\"},\"2025\":{\"h\":\"1.类的初始化\",\"t\":[\"当程序主动使用某个类时，如果该类还未被加载到内存中，则系统会通过如下三个步骤来对该类进行初始化：\",\"a-3-1\"]},\"2026\":{\"h\":\"1.1 Load：类的加载\",\"t\":[\"将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口（即引用地址）。所有需要访问和使用类数据只能通过这个Class对象。这个加载的过程需要类加载器参与。\"]},\"2027\":{\"h\":\"1.2 Link：类的链接\",\"t\":[\"将Java类的二进制代码合并到JVM的运行状态之中的过程。\",\"验证：确保加载的类信息符合JVM规范，例如：以cafe开头，没有安全方面的问题\",\"准备：正式为类变量（static）分配内存并 设置类变量默认初始值的阶段，这些内存都将在方法区中进行分配。\",\"解析：虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）的过程\"]},\"2028\":{\"h\":\"1.3 Initialize：类的初始化\",\"t\":[\"执行类构造器<clinit>()方法的过程。类构造器<clinit>()方法是由编译期自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的。（类构造器是构造类信息的，不是构造该类对象的构造器）。\",\"当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。\",\"虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确加锁和同步。\"]},\"2029\":{\"h\":\"2. 类初始化的时机\",\"t\":[\"类的主动引用 ：一定会发生类的初始化 \",\"当虚拟机启动，先初始化main方法所在的类\",\"new一个类的对象\",\"调用类的静态成员（除了final常量）和静态方法\",\"使用java.lang.reflect包的方法对类进行反射调用\",\"当初始化一个类，如果其父类没有被初始化，则先会初始化它的父类\",\"类的被动引用： 不会发生类的初始化 \",\"当访问一个静态域时，只有真正声明这个域的类才会被初始化 \",\"当通过子类引用父类的静态变量，不会导致子类初始化\",\"通过数组定义类引用，不会触发此类的初始化\",\"引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池中了）\"]},\"2030\":{\"h\":\"Ⅱ. ClassLoader\",\"t\":[\"ClassLoader：类加载器\",\"标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载（缓存）一段时间。不过JVM垃圾回收机制可以回收这些Class对象。\"]},\"2031\":{\"h\":\"1. 类加载器\",\"t\":[\"类加载器作用是用来把类(class)装载进内存的。JVM 规范定义了如下类型的类的加载器。\",\"a-3-2\",\"系统类加载器：加载自定义类\",\"扩展类加载器：加载ext下的jar包\",\"引导类加载器：加载核心类库，该加载器无法获取\"]},\"2032\":{\"h\":\"2. 加载器获取\",\"t\":[\"//1.获得当前自定义类加载器：系统类加载器 ClassLoader cl1 = ClassTest.class.getClassLoader(); System.out.println(cl1); //sun.misc.Launcher$AppClassLoader@18b4aac2 //2.调用系统类加载器的getParent()：获取扩展类加载器 ClassLoader cl2 = cl1.getParent(); System.out.println(cl2);//sun.misc.Launcher$ExtClassLoader@77556fd //3.调用扩展类加载器的getParent()：无法获取引导类加载器 ClassLoader cl3 = cl2.getParent(); System.out.println(cl3); //null //4.获得核心类库String的类加载器：无法获取核心类库的引导类加载器 ClassLoader cl4 = String.class.getClassLoader(); System.out.println(cl4); //null \"]},\"2033\":{\"h\":\"3. getResourceAsStream：获取类路径下的指定文件的输入流\",\"t\":[\"将文件加载为InputStream\",\"getResourceAsStream(String str) \"]},\"2034\":{\"h\":\"4. 使用ClassLoader加载配置文件\",\"t\":[\"使用ClassLoader的getResourceAsStream方法加载配置文件，结合Properties类（读取配置文件的输入流）使用。\",\"Properties pros = new Properties(); //此时的文件默认在当前的module下。 //读取配置文件的方式一： FileInputStream fis = new FileInputStream(\\\"jdbc.properties\\\"); FileInputStream fis = new FileInputStream(\\\"src\\\\\\\\jdbc1.properties\\\"); pros.load(fis); //读取配置文件的方式二：使用ClassLoader //配置文件默认识别为：当前module的src下 ClassLoader classLoader = ClassLoaderTest.class.getClassLoader(); InputStream is = classLoader.getResourceAsStream(\\\"jdbc1.properties\\\"); pros.load(is); String user = pros.getProperty(\\\"user\\\"); String password = pros.getProperty(\\\"password\\\"); System.out.println(\\\"user = \\\" + user + \\\",password = \\\" + password); \"]},\"2035\":{\"h\":\"a-4. 运行时类\"},\"2036\":{\"h\":\"Ⅰ. 运行时类的对象\"},\"2037\":{\"h\":\"1. newInstance：通过反射创建对应的运行时类的对象\",\"t\":[\"要求：类必须有一个无参数的构造器，且访问权限需要足够。\",\"//创建Person类的Class实例 Class<Person> pClass = Person.class; //2.通过反射创建对象 Person p = pClass.newInstance(); //调用的是空参构造器 System.out.println(p.getClass()); //class ReflectionStudy.Person System.out.println(p); // Person{name='null', age=0} \",\"异常说明 \",\"如果类没有空参构造器，newInstance()方法将抛出InstantiationException异常；\",\"如果空参构造器访问权限是不够(private)，将抛出：IllegalAccessException异常。\",\"空参构造器 \",\"newInstance方法默认会调用类的空参构造器，又因为可能会产生异常，所以：在javabean中要求提供一个public的空参构造器。\",\"同时：也便于子类继承此运行时类时，默认调用super()时，保证父类有此构造器\"]},\"2038\":{\"h\":\"2. getDeclaredConstructor\",\"t\":[\"取得本类的指定形参类型的构造器；newInstance方法只能调用无参构造器创建对象，如果类中没有无参构造器就不能使用newInstance了。\",\"可以通过Class类的getDeclaredConstructor(Class … parameterTypes)取得本类的指定形参类 型的构造器向构造器的形参中传递一个对象数组进去，里面包含了构造器中所需的各个参数。通过Constructor实例化对象。\",\"参数：就是构造器参数所属的Class。\",\"Class<Person> clazz = Person.class; Person p1 = clazz.newInstance();//调用无参构造器，创建Person对象 //调用有参构造器，该构造器接受一个String类谢谢的参数：String.class Constructor cons = clazz.getDeclaredConstructor(String.class); Person jin = (Person)cons.newInstance(\\\"jin\\\"); \"]},\"2039\":{\"h\":\"3. 获取运行时类的完整结构\",\"t\":[\"既然运行时类已经加载到了内存中，那么我们就可以从内存中，获取运行时类的所有结构，只需要使用定义好的Class的方法。\",\"仅了解：方便看框架源码。\"]},\"2040\":{\"h\":\"Ⅱ. 获取属性结构\"},\"2041\":{\"h\":\"1. getFields：获取自己和父类所有Public属性\",\"t\":[\"获取当前运行时类及其父类中声明为public访问权限的属性\",\"Class<Person> personClass = Person.class; Field[] fields = personClass.getFields(); for(Field f:fields){ //遍历包含属性的数组 System.out.println(f); } \"]},\"2042\":{\"h\":\"输出结果\",\"t\":[\"public int ReflectionStudy.Person.id ：Person类中的public属性\",\"public double ReflectionStudy.Creature.weight：Person父类的public属性\"]},\"2043\":{\"h\":\"2. getDeclareFields：获取所有自己所有权限的属性\",\"t\":[\"获取当前运行时类中声明的所有属性。（不包含父类中声明的属性）\",\"Field[] declaredFields = personClass.getDeclaredFields(); for(Field f:declaredFields){ System.out.println(f); } \"]},\"2044\":{\"h\":\"遍历结果\",\"t\":[\"输出了所有Person类的属性\",\"private java.lang.String ReflectionStudy.Person.name\",\"int ReflectionStudy.Person.age\",\"public int ReflectionStudy.Person.id\"]},\"2045\":{\"h\":\"3. 获取属性的结构\",\"t\":[\"包括：权限修饰符、数据类型、变量名\",\"Field[] declaredFields = personClass.getDeclaredFields(); for(Field f:declaredFields){ //1.权限修饰符 int modifier = f.getModifiers(); System.out.println(modifier); System.out.println(Modifier.toString(modifier)+\\\"\\\\t\\\"); //2.数据类型 Class<?> type = f.getType(); System.out.println(type.getName()); String fName = f.getName(); System.out.println(fName); } \",\"getModifier：获取权限修饰符，返回值：2,0,1，返回的结果是int类型的：0~3 \",\"0：默认类型\",\"1：public\",\"2：private\",\"3：protected\",\"getType：获取数据类型，返回值：java.lang.String、int、int \",\"返回数据类型，如果是引用类型，会返回完整的类名\",\"getName：获取属性名，返回值：name、age、int，返回字符串形式的属性名\"]},\"2046\":{\"h\":\"Ⅲ. 获取方法结构\"},\"2047\":{\"h\":\"1. 获取运行时类的方法\",\"t\":[\"Class clazz = Person.class; Method[] methods = clazz.getMethods(); for(Method m : methods){ System.out.println(m); } Method[] declaredMethods = clazz.getDeclaredMethods(); for(Method m : declaredMethods){ System.out.println(m); } \",\"getMethods：获取类和父类中public方法 \",\"返回值：略（包括Object这个父类的方法）\",\"获取当前运行时类及其所有父类中声明为public权限的方法\",\"getDeclaredMethods：获取本类所有权限的方法 \",\"返回值：略（包含private方法）\",\"获取当前运行时类中声明的所有方法。（不包含父类中声明的方法）\"]},\"2048\":{\"h\":\"2. 获取运行时方法的结构\",\"t\":[\"包括：权限修饰符、返回值类型、方法名、形参列表、方法的注解、异常列表\",\"Class clazz = Person.class; Method[] declaredMethods = clazz.getDeclaredMethods(); for(Method m : declaredMethods){ //1.获取方法声明的注解 Annotation[] annos = m.getAnnotations(); for(Annotation a : annos){ System.out.println(a); } //2.权限修饰符 System.out.print(Modifier.toString(m.getModifiers()) + \\\"\\\\t\\\"); //3.返回值类型 System.out.print(m.getReturnType().getName() + \\\"\\\\t\\\"); //4.方法名 System.out.print(m.getName()); System.out.print(\\\"(\\\"); //5.形参列表 Class[] parameterTypes = m.getParameterTypes(); if(!(parameterTypes == null && parameterTypes.length == 0)){ for(int i = 0;i < parameterTypes.length;i++){ if(i == parameterTypes.length - 1){ System.out.print(parameterTypes[i].getName() +\\\"args_\\\" +i); break; } System.out.print(parameterTypes[i].getName()+\\\"args_\\\" +i+ \\\",\\\"); } } System.out.print(\\\")\\\"); //6.抛出的异常 Class[] exceptionTypes = m.getExceptionTypes(); if(exceptionTypes.length > 0){ System.out.print(\\\"throws \\\"); for(int i = 0;i < exceptionTypes.length;i++){ if(i == exceptionTypes.length - 1){ System.out.print(exceptionTypes[i].getName()); break; } System.out.print(exceptionTypes[i].getName() + \\\",\\\"); } } System.out.println(); } \",\"getAnnotations：获取方法的注解 \",\"返回值：@ReflectionStudy.MyAnnotation(value=hello)\",\"一般用来获取自定义的注解\",\"getModifiers：获取权限修饰符 \",\"返回值：1、1、2、1、2\",\"同属性的权限修饰符\",\"getReturnType：获取返回值类型 \",\"返回值：java.lang.String、int、int、void ...\",\"同属性的返回值类型\",\"getName：获取方法名 \",\"返回值：compareTo、info()、show()、display、showDesc()\",\"获取字符串形式的方法名\",\"getParameterTypes：获取形参列表 \",\"返回值：(java.lang.String args_0)、(java.lang.String args_0,int args_1)......\",\"返回的只有形参的类型，需要自己进行循环拼接形参名\",\"getExceptionTypes：获取抛出的异常 \",\"返回值：throws java.lang.NullPointerException,java.lang.ClassCastException\",\"可能是多个异常，返回的是数组。\"]},\"2049\":{\"h\":\"Ⅳ. 获取其他信息\"},\"2050\":{\"h\":\"1. 获取运行时类的构造器结构\",\"t\":[\"可能有多个构造器，所以返回数组\",\"Class clazz = Person.class; //获取当前运行时类中声明为public的构造器 Constructor[] constructors = clazz.getConstructors(); for(Constructor c : constructors){ System.out.println(c); } System.out.println(); //获取当前运行时类中声明的所有的构造器 Constructor[] declaredConstructors = clazz.getDeclaredConstructors(); for(Constructor c : declaredConstructors){ System.out.println(c); } \",\"getConstructors：获取当前运行时类中声明为public的构造器\",\"getDeclaredConstructors：获取当前运行时类中声明的所有的构造器\"]},\"2051\":{\"h\":\"2. getSuperclass：获取运行时类的父类\",\"t\":[\"Class clazz = Person.class; Class superclass = clazz.getSuperclass(); System.out.println(superclass); \"]},\"2052\":{\"h\":\"3. getGenericSuperclass：获取运行时类的父类的泛型\",\"t\":[\"Class clazz = Person.class; Type genericSuperclass = clazz.getGenericSuperclass(); System.out.println(genericSuperclass); \"]},\"2053\":{\"h\":\"getActualTypeArguments：获取运行时类的父类的泛型\",\"t\":[\"只返回泛型\",\"Class clazz = Person.class; Type genericSuperclass = clazz.getGenericSuperclass(); ParameterizedType paramType = (ParameterizedType) genericSuperclass; //获取泛型类型 Type[] actualTypeArguments = paramType.getActualTypeArguments(); System.out.println(((Class)actualTypeArguments[0]).getName()); \"]},\"2054\":{\"h\":\"4. getInterfaces：获取运行时类实现的接口\",\"t\":[\"Class clazz = Person.class; Class[] interfaces = clazz.getInterfaces(); for(Class c : interfaces){ System.out.println(c); } System.out.println(); //获取运行时类的父类实现的接口 Class[] interfaces1 = clazz.getSuperclass().getInterfaces(); for(Class c : interfaces1){ System.out.println(c); } \"]},\"2055\":{\"h\":\"5. getPackage：获取运行时类所在的包\",\"t\":[\"Class clazz = Person.class; Package pack = clazz.getPackage(); System.out.println(pack); \"]},\"2056\":{\"h\":\"6. getAnnotations：获取运行时类声明的注解\",\"t\":[\"Class clazz = Person.class; Annotation[] annotations = clazz.getAnnotations(); for(Annotation annos : annotations){ System.out.println(annos); } \"]},\"2057\":{\"h\":\"Ⅴ. 调用指定结构\"},\"2058\":{\"h\":\"1. 调用属性\",\"t\":[\"Class clazz = Person.class; //创建运行时类的对象 Person p = (Person) clazz.newInstance(); //1. getDeclaredField(String fieldName):获取运行时类中指定变量名的属性 Field name = clazz.getDeclaredField(\\\"name\\\"); //2.保证当前属性是可访问的 name.setAccessible(true); //3.获取、设置指定对象的此属性值 name.set(p,\\\"Tom\\\"); System.out.println(name.get(p)); \"]},\"2059\":{\"h\":\"1.1 getField：获取属性【一般不用】\",\"t\":[\"获取运行类中指定变量名的属性，获取的是public修饰的属性。\",\"public Field getField(String name) \"]},\"2060\":{\"h\":\"1.2getDeclaredField：获取属性\",\"t\":[\"获取运行类中指定变量名的属性，获取的是该类的所有属性\",\"public Field getDeclaredField(String name) \"]},\"2061\":{\"h\":\"1.3get：获取属性值\",\"t\":[\"取得指定对象obj上此Field的属性内容\",\"public Object get(Object obj) \"]},\"2062\":{\"h\":\"1.4set：设置属性值\",\"t\":[\"设置指定对象obj上此Field的属性内容\",\"注意：非public属性，我们能够获取，但是不能直接设置，需要先setAccessible(true).\",\"public void set(Object obj,Object value) \"]},\"2063\":{\"h\":\"2. 调用方法\",\"t\":[\"//创建运行时类的对象 Class clazz = Person.class; Person p = (Person) clazz.newInstance(); //1.获取指定的方法 Method show = clazz.getDeclaredMethod(\\\"show\\\", String.class); //2.保证当前方法是可访问的 show.setAccessible(true); //3.执行获取的函数 Object returnValue = show.invoke(p,\\\"CHN\\\"); //String nation = p.show(\\\"CHN\\\"); System.out.println(returnValue); //调用静态方法 Method showDesc = clazz.getDeclaredMethod(\\\"showDesc\\\"); showDesc.setAccessible(true); //静态方法的调用写是类或者null Object returnVal = showDesc.invoke(Person.class); System.out.println(returnVal);//null \"]},\"2064\":{\"h\":\"2.1 getDeclaredMethod：获取指定的某个方法\",\"t\":[\"可以获取任何修饰符修饰的方法。\",\"参数1：name：指明获取的方法的名\",\"参数2：指明获取的方法的形参列表(参数类型)\",\"Method getDeclaredMethod(String name,parameterTypes) \"]},\"2065\":{\"h\":\"2.2 getMethod：获取指定的某个方法【一般不用】\",\"t\":[\"只能获取public修饰的方法\",\"getMethod(String name,Class…parameterTypes) \"]},\"2066\":{\"h\":\"2.3 invoke：执行invoke\",\"t\":[\"调用方法对象（Method）的invoke方法来执行获得的方法\",\"参数1：方法的调用者\",\"参数2：给方法形参赋值的实参\",\"返回值：对应类中调用的方法的返回值，没有返回值就返回null。\",\"静态方法：如果是静态方法调用invoke，那么调用者是类或者null也可以。\",\"Object invoke(Object obj, Object[] args) \"]},\"2067\":{\"h\":\"3. 调用构造器\",\"t\":[\"仅了解，实际开发中，99%用newInstance调用空参构造器\",\"Class clazz = Person.class; //1.获取指定的构造器 Constructor constructor = clazz.getDeclaredConstructor(String.class); //2.保证此构造器是可访问的 constructor.setAccessible(true); //3.调用此构造器创建运行时类的对象 Person per = (Person) constructor.newInstance(\\\"Tom\\\"); System.out.println(per); \"]},\"2068\":{\"h\":\"getDeclaredConstructor：获取指定的构造器\",\"t\":[\"参数：指明构造器的参数列表\"]},\"2069\":{\"h\":\"4. setAccessible：允许操作封装的类结构\",\"t\":[\"运行时类的属性、方法、构造器，我们都能够获取到\",\"但是非public修饰的成员，我们无法直接进行访问，需要通过setAccessible进行设置。\",\"void setAccessible(boolean bool) \",\"Method和Field、Constructor对象都有setAccessible()方法。\",\"setAccessible启动和禁用访问安全检查的开关。\",\"参数true：不进行访问检测，可以操作非public修饰的类内部成员\",\"参数false(默认)：进行访问检查，禁止访问非public修饰的类内部成员。\"]},\"2070\":{\"h\":\"a-5. 动态代理\"},\"2071\":{\"h\":\"Ⅰ. 动态代理\"},\"2072\":{\"h\":\"1. 代理设计模式\",\"t\":[\"原理：使用一个代理将对象包装起来, 然后用该代理对象取代原始对象。任何对原始对象的调用都要通过代理。代理对象决定是否以及何时将方法调用转到原始对象上。\",\"意义：在不改变原有方法的情况下，对原有方法进行增强、完善。\"]},\"2073\":{\"h\":\"例子\",\"t\":[\"要求：我们连接数据库时需要进行安全检查。\",\"接口：我们定义了一个接口，进行连接数据库，需要连接数据库的类都要继承他 \",\"conncetDB方法用于连接数据库\",\"被代理类：User类 重写connectBD方法进行数据库连接。\",\"代理类：ProxyUser 同样实现接口，并重写connectDB方法。 \",\"构造函数：就是被代理类User\",\"connectDB方法中，对数据库连接进行安全检测，并掉用User.conncetDB方法连接数据库\",\"链接数据库后，将连接信息写入日志。\"]},\"2074\":{\"h\":\"2. 静态代理\",\"t\":[\"特征是代理类和目标对象的类都是在编译期间确定下来，不利于程序的扩展。同时，每一个代理类只能为一个接口服务，这样一来程序开发中必然产生过多的代理。 最好可以通过一个代理类完成全部的代理功能 。\"]},\"2075\":{\"h\":\"2.1 示例\",\"t\":[\"还拿连接数据库举例，静态代理需要，每个要连接数据库的类，都声明一个静态代理，即使代理做的操作是一样的，都是：安全检查、掉用被代理类的conncetDB方法、将连接信息写入日志。\"]},\"2076\":{\"h\":\"2.2 缺点\",\"t\":[\"代理类和被代理类在编译期间，就确定下来了，不灵活。我们要多很多相似类都定义一个代理类，过于冗余。\"]},\"2077\":{\"h\":\"3. 动态代理介绍\",\"t\":[\"原理：动态代理是指客户通过代理类来调用其它对象的方法，并且是在程序运行时根据需要动态创建目标类的代理对象。\",\"使用场合 \",\"调试\",\"远程方法调用\",\"优点：抽象角色中（接口）声明的所有方法都被转移到调用处理器一个集中的方法中处理，这样，我们可以更加灵活和统一的处理众多的方法。\",\"示例：还拿连接数据库举例，我们调用哪个类，就实例化并代理哪个类，动态代理。\"]},\"2078\":{\"h\":\"4. 静态代理示例\",\"t\":[\"接口：定义一个衣服工厂接口ClothFactory，并声明produceCloth方法用于生产服装\",\"被代理类：Nike工厂，实现接口，重写produceCloth方法用于生产服装。\",\"代理类：代理Nike工厂，也实现接口，重写produceCloth方法， \",\"并在该方法中，进行工厂的准备工作，比如：原料准备\",\"调用Nike工厂的produceCloth方法进行衣服生产\",\"进行一些收尾工作，比如写个日志，清洗工厂等\"]},\"2079\":{\"h\":\"4.1 接口\",\"t\":[\"interface ClothFactory{ void produceCloth(); } \"]},\"2080\":{\"h\":\"4.2 代理类\",\"t\":[\"class ProxyClothFactory implements ClothFactory{ private ClothFactory factory;//用被代理类对象进行实例化 public ProxyClothFactory(ClothFactory factory){ this.factory = factory; } @Override public void produceCloth() { System.out.println(\\\"代理工厂做一些准备工作\\\"); factory.produceCloth(); System.out.println(\\\"代理工厂做一些后续的收尾工作\\\"); } } \"]},\"2081\":{\"h\":\"4.3 被代理类\",\"t\":[\"class NikeClothFactory implements ClothFactory{ @Override public void produceCloth() { System.out.println(\\\"Nike工厂生产一批运动服\\\"); } } \"]},\"2082\":{\"h\":\"4.4 使用\",\"t\":[\"public class StaticProxyTest { public static void main(String[] args) { //创建被代理类的对象 ClothFactory nike = new NikeClothFactory(); //创建代理类的对象 ClothFactory proxyClothFactory = new ProxyClothFactory(nike); proxyClothFactory.produceCloth(); } } \"]},\"2083\":{\"h\":\"Ⅱ. 动态代理使用\"},\"2084\":{\"h\":\"1. 需求\",\"t\":[\"①根据加载到内存中的被代理类，动态的创建一个代理类及其对象。\",\"②当通过代理类的对象调用方法a时，动态的去调用被代理类中的同名方法a。\"]},\"2085\":{\"h\":\"2. 逻辑链条\",\"t\":[\"①实例化被代理类，获取被代理类的对象。\",\"②通过反射获取该对象的类和所实现的所有接口\",\"③通过获取的类和接口，创建一个对象，该对象就是代理对象。\",\"④获取代理对象后，就可以使用代理对象取代源对象了 \",\"该对象有被代理对象的同名方法，但里的逻辑代码进行了加强。\",\"⑤使用代理对象调用被代理类中的同名方法 \",\"首先，代理对象会读取被代理类中的同名方法的方法名和形参列表。\",\"其次，将这些信息传递作为参数给代理对象的invoke方法\",\"invoke方法里主要做两件事 \",\"根据传递的信息调用源被代理对象的方法；\",\"执行invoke代码体里写的增强逻辑；这个增强逻辑：就是代理的意义，\"]},\"2086\":{\"h\":\"2.1 特点\",\"t\":[\"通过上述的逻辑链条可知：\",\"一个动态代理类，可以代理所有的被代理类。\",\"被代理类中的所有方法都会被代理类中的invoke方法增强，且增强的方式是一样，都可以在调用源方法的前后执行一些指定的增强逻辑。\"]},\"2087\":{\"h\":\"2.2 针对不通的方法进行增强\",\"t\":[\"如果要针对不同的方法进行增强，就要通过invoke方法的参数，获取要增强的方法名，进行switch...case判断，进行个性化的增强。\"]},\"2088\":{\"h\":\"3. 相关API\"},\"2089\":{\"h\":\"3.1 Proxy：所有动态代理类的父类\",\"t\":[\"专门完成代理的操作类，通过此类为一个或多个接口动态地生成实现类。\"]},\"2090\":{\"h\":\"3.2 Proxy.newProxyInstance\",\"t\":[\"Proxy类提供的用于创建动态代理类和动态代理对象的静态方法\",\"参数1：类加载器\",\"参数2：得到被代理类实现的全部接口，同时这些接口也会成为代理类的接口（支持多个接口）。\",\"参数3：InvocationHandler接口 \",\"需要手动的实现该接口，并把实现类的示例对象作为实参传入；也可以直接写成匿名实现类。\",\"作用：创建代理对象，其中有个invoke方法，该方法用来调用被代理类的方法，并做一些增强。\",\"返回值：返回被代理类的代理对象 \",\"该对象是由参数3的实现类创建的。\",\"static Object newProxyInstance (ClassLoader loader, Class<?>[] interfaces,InvocationHandler h) \"]},\"2091\":{\"h\":\"3.3 InvocationHandler：调用被代理类方法的接口\",\"t\":[\"创建一个实现接口InvocationHandler的类，它必须实现invoke方法，以完成代理的具体操作。\"]},\"2092\":{\"h\":\"3.4 InvocationHandler.invoke：调用被代理类方法的方法\",\"t\":[\"通过InvocationHandler接口的实现类调用该方法，来实现调用被代理类方法的方法\",\"参数1：代理类对象\",\"参数2：要调用的方法\",\"参数3：方法调用时所需要的参数\",\"public Object invoke(Object theProxy, Method method, Object[] params); \"]},\"2093\":{\"h\":\"4. 代理类代码分析\"},\"2094\":{\"h\":\"4.1 代理类\",\"t\":[\"class ProxyFactory{ //调用此方法，返回一个代理类的对象 public static Object getProxyInstance(Object obj){//obj:被代理类的对象 MyInvocationHandler handler = new MyInvocationHandler(); handler.bind(obj); return Proxy.newProxyInstance (obj.getClass().getClassLoader(),obj.getClass().getInterfaces()handler); } } \"]},\"2095\":{\"h\":\"4.2 代理类：Proxy.newProxyInstance的参数3\",\"t\":[\"class MyInvocationHandler implements InvocationHandler{ private Object obj;//需要使用被代理类的对象进行赋值 //通过bind方法传入被代理对象，为属性赋值 public void bind(Object obj){ //参数是Object类型会更通用 this.obj = obj; } //当我们通过代理类的对象，调用方法a时，就会自动的调用如下的方法：invoke() //将被代理类要执行的方法a的功能就声明在invoke()中 @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { //method:即为代理类对象调用的方法，此方法也就作为了被代理类对象要调用的方法 //obj:被代理类的对象 Object returnValue = method.invoke(obj,args); //上述方法的返回值就作为当前类中的invoke()的返回值。 return returnValue; } } \"]},\"2096\":{\"h\":\"4.3 使用示例\",\"t\":[\"前提：\",\"接口：Human，两个类：getBelif、和eat\",\"被代理类：SuperMan，实现了接口\",\"SuperMan superMan = new SuperMan(); //proxyInstance:代理类的对象 Human proxyInstance = (Human) ProxyFactory.getProxyInstance(superMan); //当通过代理类对象调用方法时，会自动的调用被代理类中同名的方法 String belief = proxyInstance.getBelief(); System.out.println(belief); proxyInstance.eat(\\\"四川麻辣烫\\\"); \"]},\"2097\":{\"h\":\"4.4 代理流程分析\",\"t\":[\"①SuperMan superMan = new SuperMan()：实例化被代理类，获取被代理类对象superMan\",\"②Human proxyInstance = (Human) ProxyFactory.getProxyInstance(superMan)：调用ProxyFactory类的静态方法（将被代理类对象 SuperMan 作为参数传入） \",\"生成一个被代理类\",\"ProxyFactory中调用了newProxyInstance方法，创建了代理类proxyInstance\",\"原理：通过反射获取被代理类的接口和类，并创建一个实现同样接口的类\",\"在此方法中，也将被代理类传递给了MyInvocationHandler类的invoke方法\",\"③String belief = proxyInstance.getBelief(); 代理类调用一个被代理类的同名方法，此时发生了如下事情： \",\"proxyInstance自动调用了MyInvocationHandler类的invoke方法 \",\"创建proxyInstance时，MyInvocationHandler是他的参数之一，已经进行了绑定\",\"并将自己调用的方法名、参数列表传递给MyInvocationHandle的invoke方法\",\"MyInvocationHandle已经在创建代理类是获取了被代理类的对象名，此时又获取了要调用的方法和参数列表\",\"利用反射，调用被代理类的同名方法。并获取返回值\"]},\"2098\":{\"h\":\"5. AOP与动态代理\"},\"2099\":{\"h\":\"5.1 AOP：Aspect Orient Programming\",\"t\":[\"就是上章写的在动态代理里写一些通用的代码。\",\"比如：调用被代理类方法前进行安全检查，调用后进行日志记录。\"]},\"2100\":{\"h\":\"5.2 AOP代理\",\"t\":[\"a-5-1\",\"上面这种动态代理在AOP中被称为AOP代理，AOP代理可代替目标对象，AOP代理包含了目标对象的全部方法。但AOP代理中的方法与目标对象的方法存在差异：AOP代理里的方法可以在执行目标方法之前、之后插入一些通用处理\"]},\"2101\":{\"h\":\"5.3 示例\",\"t\":[\"以上面的例子为例，加一些通用操作，加入后，我们再调用代理类的方法时就会进行一些附加操作。\",\"//创建一个类，来包含通用操作，也可以直接写在MyInvocationHandler.invoke方法里 class HumanUtil{ public void method1(){ System.out.println(\\\"============通用方法一===========\\\"); } public void method2(){ System.out.println(\\\"============通用方法二============\\\"); } } //将通用方法加入MyInvocationHandler.invoke，也可以直接写到里面。 public Object invoke(Object proxy, Method method, Object[] args){ HumanUtil util = new HumanUtil(); util.method1(); //通用方法一 Object returnValue = method.invoke(obj,args); util.method2();//通用方法二 return returnValue; } \"]},\"2102\":{\"h\":\"b-1. Java版本\",\"t\":[\"提示\",\"Java下载地址\"]},\"2103\":{\"h\":\"1. 版本说明\",\"t\":[\"从Java 9 这个版本开始，Java 的计划发布周期是 6 个月，着Java的更新从传统的以特性驱动的发布周期，转变为以时间驱动的（6 个月为周期）发布模式。\",\"针对企业客户的需求，Oracle 将以三年为周期发布长期支持版本（long termsupport）\"]},\"2104\":{\"h\":\"2. LTS\",\"t\":[\"Java17：2021，LTS版本，【New】\",\"Java11：2019，LTS版本\",\"Java8：2014，LTS版本，\"]},\"2105\":{\"h\":\"3. Java安装\",\"t\":[\"从官网直接下载安装即可，注意修改环境变量（修改为最新的Java）。\",\"Java是向前兼容的，配置成最新的Java版本环境变量即可。\"]},\"2106\":{\"h\":\"4. 配置IDEA\",\"t\":[\"需要打开项目配置菜单，选择SDK版本。\",\"备注：新建的Module的SDK默认是Project设置的SDK。\",\"快捷键：Ctrl + Alt + shit + s\"]},\"2107\":{\"h\":\"5. IDEA，多版本切换\",\"t\":[\"在项目配置菜单 Project Structure 中选择目标模块，在SDK选项中切换指定的SDK版本。\"]},\"2108\":{\"h\":\"6. JDK与Language level\",\"t\":[\"JDK版本是用来控制模块JDK的版本的，而Language Level是编辑器用来对代码进行语言检查的版本。\",\"即：就算JDK支持新语法，只要Language level指定的版本不支持新语法，编辑器也会报错。\",\"b-1-1\"]},\"2109\":{\"h\":\"b-2. Lambda\",\"t\":[\"提示\",\"可以理解为JS-ES6中的 箭头函数\"]},\"2110\":{\"h\":\"Ⅰ. Lambda表达式\"},\"2111\":{\"h\":\"1. 简介\",\"t\":[\"Lambda 是一个 匿名函数，使用它可以写出更简洁、更灵活的代码。\",\"是一种更紧凑的代码风格。\"]},\"2112\":{\"h\":\"2. Lambda本质\",\"t\":[\"Lambda表达式的本质：作为函数式接口的实例。\",\"用匿名实现类表示的都可以用Lambda表达式来写。\"]},\"2113\":{\"h\":\"3. 应用场景\",\"t\":[\"只有函数式接口可以这么用\",\"函数式接口：只有一个方法的接口。\"]},\"2114\":{\"h\":\"4. 格式\",\"t\":[\" Comparator<Integer> com2 = (o1,o2) -> Integer.compare(o1,o2); \",\"->：Lambda操作符或箭头操作符\",\"->左边：Lambda形参列表（其实就是接口中的抽象方法的形参列表）\",\"->右边：lambda体 （其实就是重写的抽象方法的方法体）\"]},\"2115\":{\"h\":\"4.1 一定省略的内容\",\"t\":[\"接口构造器：通过标识符的数据类型就能推断出接口构造器\",\"参数类型：同类型推断能推断出参数类型\",\"重写的接口的方法：函数接口只有一个方法，可以省略，只保留方法体\"]},\"2116\":{\"h\":\"4.2 特殊情况下省略的内容\",\"t\":[\"形参小括号：只有一个参数可以省略\",\"方法体外的{}：只有一句方法体，可以省略\",\"return关键字：方法中只要规定了返回值类型，就默认方法体种一定有返回值了，只有一句方法体，肯定是return语句，可以省略return。\"]},\"2117\":{\"h\":\"5. 类型推断\",\"t\":[\"Lambda 表达式中的参数类型都是由编译器推断得出的。Lambda表达式中无需指定类型，程序依然可以编译，这是因为 javac 根据程序的上下文，在后台推断出了参数的类型。Lambda 表达式的类型依赖于上下文环境，是由编译器推断出来的。这就是所谓的“类型推断”。\"]},\"2118\":{\"h\":\"6. 语法总结\",\"t\":[\"->左边 \",\"lambda形参列表的参数类型可以省略(类型推断)；\",\"如果lambda形参列表只有一个参数，其一对()也可以省略\",\"没有参数不可省略括号\",\"->右边 \",\"lambda体应该使用一对{}包裹；\",\"如果lambda体只有一条执行语句，省略这一对{}。\",\"如果只有一条return语句，return也可以省略，且如果{}省略，return必须省略。\"]},\"2119\":{\"h\":\"Ⅱ. Lambda的使用\",\"t\":[\"Lambda表达式的使用，分为6中情况。本质还是上面的语法总结。\"]},\"2120\":{\"h\":\"1. 示例：无参、无return\",\"t\":[\" = ()->{...;}; \"]},\"2121\":{\"h\":\"示例：Runnable接口的run函数\",\"t\":[\"//1.老写法 Runnable r1 = new Runnable() { @Override public void run(){ System.out.println(\\\"I'm batman\\\"); } }; r1.run(); ========================================== //2.Lambda Runnable r2 = () -> { System.out.println(\\\"I'm bat van\\\"); }; r2.run(); \"]},\"2122\":{\"h\":\"2. 格式2：1参、无return\",\"t\":[\"= (Object arg1)->{...;}; \"]},\"2123\":{\"h\":\"示例：Consumer接口的accept方法\",\"t\":[\"//1.老写法 Consumer<String> con = new Consumer<String>(){ @Override public void accept(String s){ System.out.println(s); } }; con.accept(\\\"hello\\\"); ================================================= //2.Lambda Consumer<String> con2 = (String s) ->{System.out.println(s)} ==>进一步更精简模式 Consumer<String> con2 = s -> System.out.println(s); \"]},\"2124\":{\"h\":\"3. 格式3：省略数据类型\",\"t\":[\"见上一个例子，数据类型是根据接口的规范进行推断的，跟泛型无关。\",\"(arg1)->{...;}; \"]},\"2125\":{\"h\":\"示例：见格式2精简模式\",\"t\":[\"Consumer<String> con2 = s -> System.out.println(s); \"]},\"2126\":{\"h\":\"4. 格式4：省略1参的小括号\",\"t\":[\"arg1->{...;}; \"]},\"2127\":{\"h\":\"示例：见格式2示例的\",\"t\":[\"Consumer<String> con2 = s -> System.out.println(s); \"]},\"2128\":{\"h\":\"5. 格式5：多参、多执行语句\",\"t\":[\"(arg1,arg2)->{ ...; ....; return ...; }; \"]},\"2129\":{\"h\":\"示例：Comparator接口 compare方法\",\"t\":[\"//1.老写法 Comparator<Integer> com1 = new Comparator<Integer>() { @Override public int compare(Integer o1, Integer o2) { System.out.println(o1); System.out.println(o2); return o1.compareTo(o2); } }; //Comparator int result = com1.compare(10, 20); System.out.println(result); ================================================= Comparator<Integer>com2 = (o1,o2) -> { System.out.println(o1); System.out.println(o2); return o1.compareTo(o2); }; int result2 = com2.compare(10, 20); System.out.println(result2); \"]},\"2130\":{\"h\":\"6. 省略{}\",\"t\":[\"见格式2的更精简写法\",\"(arg1,arg2)->...; \"]},\"2131\":{\"h\":\"b-3. Functional\"},\"2132\":{\"h\":\"Ⅰ. 函数式接口\",\"t\":[\"只包含一个抽象方法的接口，称为函数式接口。\"]},\"2133\":{\"h\":\"Functional 的意义\",\"t\":[\"Java是纯面向对象的语言，失去了面向过程（面向函数）的灵活性，比如PHP语言可以直接定义函数，使用函数，以函数为单位提供一个简单的独立的功能。\",\"而Java不能直接定义函数，所有函数必须以方法的形式属于某个类，这就不够灵活了，而函数式接口就补气了这个短板，以函数式接口的形式模拟了面向函数的特点。\",\"函数式接口本质上是穷举了所有函数的格式，不同的函数，格式上只有参数和返回值的区别，即多少个参数，有无返回值，返回值是怎么获取的。\",\"因此函数式接口就是一个载体，用来执行一个函数，Java为不同格式的函数提供了不同类型的内置接口，根据需求选择符合要求（参数和返回值）的接口，实现他的方法，写出需要的功能，就OK了。\"]},\"2134\":{\"h\":\"1. Functional 介绍\"},\"2135\":{\"h\":\"函数式接口的特点\",\"t\":[\"由接口名、形参列表、函数名组成。\"]},\"2136\":{\"h\":\"如何使用函数式接口\",\"t\":[\"我们需要一个功能，为一个功能创建一个类太浪费了。\",\"我们可以利用函数式接口，寻找或定义一个参数符合的接口。然后利用Lambda的方式调用即可，函数体直接在使用的时候定义。\"]},\"2137\":{\"h\":\"函数式接口要定义多少\",\"t\":[\"函数式接口本质上只是一个载体，用来执行函数体的载体，本身毫无意义。\",\"但是由于方法是有参数限制的（数量和类型），因此我们需要定义多个函数式接口，这些接口的区别就是参数不一样，可以很简单的穷举出需要多少个函数式接口。\"]},\"2138\":{\"h\":\"内置函数式接口\",\"t\":[\"在java.util.function包下定义了Java 8 的丰富的函数式接口。\",\"包含4中常用的函数式接口，和一些不常用的。也就是Java替我们穷举好了，我们直接使用即可。\"]},\"2139\":{\"h\":\"2. 注解\",\"t\":[\"@FunctionalInterface\",\"该注解表示下面要定义的接口为：函数式接口；这样做可以检查它是否是一个函数式接口。同时 javadoc 也会包含一条声明，说明这个接口是一个函数式接口。\"]},\"2140\":{\"h\":\"3. 自定义函数式接口\",\"t\":[\"@FunctionalInterface public interface MyInterface { void method1(); } \"]},\"2141\":{\"h\":\"4. Lambda与创建Functional对象\",\"t\":[\"可以通过 Lambda 表达式来创建该接口的对象。（若 Lambda 表达式抛出一个受检异常(即：非运行时异常)，那么该异常需要在目标接口的抽象方法上进行声明）。\",\"用匿名实现类表示的都可以用Lambda表达式来写。\"]},\"2142\":{\"h\":\"5. 缺点\",\"t\":[\"每次使用都要写方法体，太繁琐了，在支持函数式编程的语言了，都是提前定义好方法，随用随调，方法体都省了。\",\"解决方案：方法引用。\"]},\"2143\":{\"h\":\"Ⅱ. 内置Functional\",\"t\":[\"Java内部已经将参数的类型穷举好了，提供了很多内置的Functional，直接用即可。\"]},\"2144\":{\"h\":\"1. Java内置四大核心Functional\",\"t\":[\"b-3-1\",\"消费型：提供一个参数，什么都不返回：参数被消耗了 \",\"Consumer<T> void accept(T t)\",\"供给型：不提供参数，返回了一个值：供给了一个值 \",\"Supplier<T> T get()\",\"函数型：提供参数，参数类型是对象T，返回值类型是对象R。 \",\"Function<T,R> R apply(T t)\",\"断定型：提供一个参数，进行判断，返回boolean：进行一些参数的断定 \",\"Predicate<T> boolean test(T t)\"]},\"2145\":{\"h\":\"2. 其他类型Functional\",\"t\":[\"b-3-2\"]},\"2146\":{\"h\":\"b-4. 方法引用\"},\"2147\":{\"h\":\"Ⅰ. 方法引用介绍\"},\"2148\":{\"h\":\"1. 定义\",\"t\":[\"Method References：方法引用，本质上就是Lambda表达式，而Lambda表达式可以作为函数式接口的实例。所以方法引用，也是函数式接口的实例。通过方法的名字来指向一个方法，可以认为是Lambda表达式的一个语法糖。\"]},\"2149\":{\"h\":\"2. 使用情景\",\"t\":[\"当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！\"]},\"2150\":{\"h\":\"3. 语法格式\",\"t\":[\"使用格式：类(或对象) :: 方法名\",\"情况1：对象 :: 非静态方法\",\"情况2：类 :: 静态方法\",\"情况3：类 :: 非静态方法\"]},\"2151\":{\"h\":\"解析\",\"t\":[\"可以将方法名看做是Lambda表达式中，接口中方法的方法名。\",\"当我们找到了一个除了方法名不一样，其他完全一样的方法（参数、返回值，方法体逻辑），我们就会用这个方法，替代接口中的方法，而不用自己再去定义了。\",\":: 就可以认为告诉了表达式要用后面的方法替代接口中的方法。由于后面的方法已经定义过了，参数和返回值也都定义好了，因此只需要写方法名即可。\"]},\"2152\":{\"h\":\"4. 使用要求\",\"t\":[\"情况1和2：要求接口中的抽象方法的形参列表和返回值类型与方法引用的方法的形参列表和返回值类型相同！\",\"情况3：要求接口中的抽象方法中，第一个形参是方法引用中的方法的调用者，且其他形参和返回值类型相同。 \",\"方法引用时，要使用参数1的类，而非对象，比如参数1是个字符串，就要用String类。\"]},\"2153\":{\"h\":\"Ⅱ. 方法引用示例\"},\"2154\":{\"h\":\"1. 示例1：情况1： 对象 :: 非静态方法\",\"t\":[\"要求：使用Consumer接口，打印参数\"]},\"2155\":{\"h\":\"1.1 Lambda表达式写法\",\"t\":[\"Consumer<String> con1 = str->System.out.println(str); con1.accept(\\\"hello\\\"); \"]},\"2156\":{\"h\":\"1.2 方法引用写法\",\"t\":[\"解析：Lambda要实现的操作（方法体）已经有方法实现过了，就是System.out类的println方法，因此可以直接使用方法引用，使用println这个方法。\",\"Consumer中的方法为：void accept(T t)\",\"PrintStream中的方法为：void println(T t)\",\"参数一样，功能也一样，满足条件。由于参数也一样，故可以省略参数。\",\"PrintStream ps = System.out; Consumer<string> con2 = ps::println; con2.accept(\\\"hi\\\"); \"]},\"2157\":{\"h\":\"2. 示例2：情况1： 对象 :: 非静态方法（自定义类）\",\"t\":[\"说明：自定义类Employee中，有一个方法getName，无参数，用来获取员工姓名的。\",\"//创建一个员工对象 Employee emp = new Employee(100,\\\"Jinno\\\",23,4000); \"]},\"2158\":{\"h\":\"2.1 Lambda表达式\",\"t\":[\"Supplier<String> = sup1 -> emp.getName(); sup1.get(); \"]},\"2159\":{\"h\":\"2.2 方法引用\",\"t\":[\"解析：Employee类中的方法 String getName()；Supplier中的 T get()方法都是空参，返回一个值，因此可以用getName替代get()。\",\"Supplier<string> = sup2->emp::getName(); \"]},\"2160\":{\"h\":\"3. 示例3：情况二：类 :: 静态方法\",\"t\":[\"要求：使用Comparator接口比较俩个数值的大小\"]},\"2161\":{\"h\":\"3.1 Lambda\",\"t\":[\"Comparator<Integer> com1 = (t1,t2)-> Integer.compare(t1,t2); com1.compare(10,20); \"]},\"2162\":{\"h\":\"3.2 方法引用\",\"t\":[\"解析：Comparator中的int compare(T t1,T t2)；Integer中的int compare(T t1,T t2)算法、返回值、参数都是一样的，可以直接替换。\",\"Comparator<Integer> com2 = Integer::compare; com2.compare(10,20); \"]},\"2163\":{\"h\":\"4. 示例4：情况三： 类 :: 实例方法\",\"t\":[\"要求：使用Comparator接口比较两个字符串的大小\"]},\"2164\":{\"h\":\"4.1 Lambda\",\"t\":[\"Comparator<String> com1 = (s1,s2)->s1.compareTo(s2); com1.compare(\\\"abc\\\",\\\"abd\\\"); \"]},\"2165\":{\"h\":\"4.2 方法引用\",\"t\":[\"解析：参数s1（属于String类），刚好是compareTo方法的调用者，且两个方法的其他参数和返回值相同，故可以进行方法引用\",\"Comparator<String> com2 = String::compareTo; \"]},\"2166\":{\"h\":\"5. 示例5：情况三：类 :: 实例方法 （自定义类）\",\"t\":[\"要求：调用自定义类的getName方法，获取员工姓名（String类型）。\",\"Employee employee = new Employee(100,\\\"Jinno\\\",23,34); \"]},\"2167\":{\"h\":\"5.1 Lambda\",\"t\":[\"Function<Employee,String> fun1 = e ->e.getName(); \"]},\"2168\":{\"h\":\"5.2 方法引用\",\"t\":[\"解析：Function接口的第一个参数刚好是方法的调用者（只有一个参数）；返回值也符合要求，故可以使用方法因引用\",\"Function<Employee,String> fun2 = Employee::getName(); \"]},\"2169\":{\"h\":\"Ⅲ. 构造器引用\",\"t\":[\"函数返回的是一个对象，就可以采用构造器引用\"]},\"2170\":{\"h\":\"1. 使用条件\",\"t\":[\"函数式接口的抽象方法的形参列表和构造器的形参列表一致。\",\"抽象方法的返回值类型即为构造器所属的类的类型\"]},\"2171\":{\"h\":\"2. 语法格式\",\"t\":[\"ClassName::new\"]},\"2172\":{\"h\":\"3. 示例1：空参构造器\",\"t\":[\"要求：获得一个Employee（自定义员工类对象）对象（空参构造器创建的）。\",\"方法：采用供给型接口：Supplier的get()方法\"]},\"2173\":{\"h\":\"3.1 Lambda\",\"t\":[\"Supplier<Employee> emp1 = ()-> new Employee(); emp1.get(); \"]},\"2174\":{\"h\":\"3.2 构造器引用\",\"t\":[\"Supplier<Employee> emp2 = Employee::new; emp2.get(); \"]},\"2175\":{\"h\":\"4. 示例2：单参构造器\",\"t\":[\"要求：获得一个Employee（自定义员工类对象）对象（单参构造器创建的）。\",\"方法：采用函数型接口Function，提供一个参数，返回一个new的对象\"]},\"2176\":{\"h\":\"4.1 Lambda\",\"t\":[\"Function<Integer,Employee> func1 = id -> new Employee(id); func1.apply(10); \"]},\"2177\":{\"h\":\"4.2 构造器引用\",\"t\":[\"解析：泛型里已经规定了有一个Integer类型的参数，所以调用的是单参构造器.\",\"Fucntion<Integer,Employee> func2 = Employee:new fucn2.apply(10) \"]},\"2178\":{\"h\":\"5. 示例3：多参构造器\",\"t\":[\"要求：获得一个Employee（自定义员工类对象）对象（双参构造器创建的）。\",\"方法：采用函数式接口BiFunction<T,U,R>，提供两个类参数，返回一个对象。\"]},\"2179\":{\"h\":\"5.1 Lambda\",\"t\":[\"BiFUnction<Integer,String,Employee> fun1 = (id,name) ->new Employee(id,name); func1.apply(100,\\\"Tom\\\"); \"]},\"2180\":{\"h\":\"5.2 构造器引用\",\"t\":[\"BiFUnction<Integer,String,Employee> fun2 = Employee::new; func2.apply(101,\\\"Aaron\\\"); \"]},\"2181\":{\"h\":\"Ⅳ. 数组引用\",\"t\":[\"可以把数组看做是一个特殊的类，则写法与构造器引用一致。\"]},\"2182\":{\"h\":\"1. 语法格式\",\"t\":[\"type[] :: new\"]},\"2183\":{\"h\":\"2. 示例\",\"t\":[\"要求：根据Integer参数，返回指定长度的空数组\"]},\"2184\":{\"h\":\"2.1 Lambda\",\"t\":[\"Function<Integer,String[]> func1 = length->new String[length]; func1.apply(5); \"]},\"2185\":{\"h\":\"2.2 构造器引用\",\"t\":[\"Function<Integer,String[]> func2 = String[]::new; func2.apply(10); \"]},\"2186\":{\"h\":\"b-5. Stream\"},\"2187\":{\"h\":\"Ⅰ. Stream API\",\"t\":[\"Stream API其实就是一套API，用来操作集合类数据的，这套API的操作跟SQL里的操作类似。只是SQL里的操作是操作数据库的，Stream API是操作集合和数组的。\",\"对于从NoSQL获取的数据，非常有用，可以在java层面对NoSQL数据进行类似SQL的操作（几乎一切操作：过滤、去重、筛选、分页等....）。\"]},\"2188\":{\"h\":\"1. Stream API 说明\",\"t\":[\"Stream API ( java.util.stream) 把真正的函数式编程风格引入到Java中。\",\"Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。\",\"使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。简言之，Stream API 提供了一种高效且易于使用的处理数据的方式。\"]},\"2189\":{\"h\":\"2. Stream API使用背景\",\"t\":[\"对于Mysql等数据库层面的数据源，数据库已经对数据进行处理。\",\"而NoSQL的数据就需要Java层面去处理了。\"]},\"2190\":{\"h\":\"3. Stream的本质\",\"t\":[\"是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。\"]},\"2191\":{\"h\":\"Stream 和 Collection 集合的区别\",\"t\":[\"“集合讲的是数据，Stream 讲的是计算！”\",\"Collection 是一种静态的内存数据结构，而 Stream 是有关计算的。前者是主要面向内存，存储在内存中，后者主要是面向 CPU，通过 CPU 实现计算。\"]},\"2192\":{\"h\":\"4. Stream的操作步骤\",\"t\":[\"b-5-1\",\"创建Stream：Stream的实例化：通过一个数据源（如：集合、数组），获取一个Stream\",\"中间操作：一个中间操作链，对数据源的数据进行处理\",\"终止操作（终端操作）：一旦执行终止操作，就执行中间操作链，并产生结果。之后，中间操作不会再被使用。\"]},\"2193\":{\"h\":\"5. Stream的特点\",\"t\":[\"自己不会存储元素。\",\"不会改变源对象。相反，他们会返回一个持有结果的新Stream。\",\"操作是延迟执行的。这意味着他们会等到需要结果的时候才执行\"]},\"2194\":{\"h\":\"Ⅱ. Stream 实例化\"},\"2195\":{\"h\":\"1. 通过集合创建Stream\"},\"2196\":{\"h\":\"1.1 顺序流\",\"t\":[\"通过集合的Stream方法，返回一个顺序流Stream\",\"顺序流：按顺序从集合中取出数据\",\"default Stream<E> stream(); ================================================ //list ->{\\\"a\\\",\\\"b\\\",\\\"c\\\",\\\"d\\\",\\\"e\\\"} Stream<String> stream = list.stream(); \"]},\"2197\":{\"h\":\"1.2 并行流\",\"t\":[\"通过集合的parallelStream方法，返回一个并行流Stream\",\"多线程从集合中取出数据，不按顺序\",\" default Stream<E> parallelStream() ================================================ //list ->{\\\"a\\\",\\\"b\\\",\\\"c\\\",\\\"d\\\",\\\"e\\\"} Stream<String> parallelStream = list.parallelStream(); \"]},\"2198\":{\"h\":\"2. 通过数组创建Stream\",\"t\":[\"Arrays 的静态方法 stream() 可以获取数组的Stream：\",\"static <T> Stream<T> stream(T[] array) =========================================== int[] arr = {1, 2, 3, 4, 5}; IntStream arrStream = Arrays.stream(arr); \"]},\"2199\":{\"h\":\"重载形式\",\"t\":[\"如上，不同数据类型的数组，通过该方法，会生成不同类型的Stream。Arrays.stream有多个重载：\",\"public static IntStream stream(int[] array)\",\"public static LongStream stream(long[] array)\",\"public static DoubleStream stream(double[] array)\"]},\"2200\":{\"h\":\"3. 通过Stream的of()创建Stream\",\"t\":[\"可以调用Stream类静态方法 of(), 通过显示值创建一个流。它可以接收任意数量的参数。\",\"public static<T> Stream<T> of(T... values); ================================================ Stream<? extends Serializable> stream1 = Stream.of(1, 2, 3, \\\"hello\\\", \\\"shit\\\"); Stream<Integer> stream2 = Stream.of(1, 2, 3); \"]},\"2201\":{\"h\":\"4. 创建无限流Stream【了解】\",\"t\":[\"可以使用静态方法 Stream.iterate() 和 Stream.generate(),创建无限流。\",\"无限流就是数据无限生成，需要加终止条件和限制条件辅助生成。\"]},\"2202\":{\"h\":\"4.1 迭代\",\"t\":[\"参数1：seed->种子，初始值\",\"参数2：UnaryOperator，对种子进行的操作，一元运算符\",\"public static<T> Stream<T> iterate(final T seed, final UnaryOperator<T> f) ================================================ //示例:遍历偶数，通过limit限制为10个 Stream.iterate(0, t -> t + 2).limit(10).forEach(System.out::println); \"]},\"2203\":{\"h\":\"4.2 生成\",\"t\":[\"参数：Supplier，供应者，参数数据的对象.方法\",\"public static<T> Stream<T> generate(Supplier<T> s) ================================================ //示例:生成随机数，通过limit限制为10个 Stream.generate(Math::random).limit(10).forEach(System.out::println); \"]},\"2204\":{\"h\":\"Ⅲ. Stream 的操作\",\"t\":[\"Stream的操作分为中间操作和终止操作。\",\"Stream操作的方法，和SQL中的效果类似，名字也基本一样。\"]},\"2205\":{\"h\":\"1. 中间操作说明\",\"t\":[\"多个中间操作可以连接起来形成一个流水线（SQL中也是）。 除非流水线上触发终止操作，否则 中间操作不会执行任何的处理（SQL也是），而在终止操作时一次性全部处理，称为“惰性求值\"]},\"2206\":{\"h\":\"2. 总结操作的方法\",\"t\":[\"筛选与切片：filter、distinct、limit、skip\",\"映射：map、mapToDouble、mapToInt、mapToLong、flatMap\",\"排序：sorted\"]},\"2207\":{\"h\":\"3. 终止操作说明\",\"t\":[\"终止操作会从流的流水线生成结果。其结果可以是任何不是流的值，例如：List、Integer，甚至是 void 。\",\"流进行了终止操作后，不能再次使用。\",\"可以只有终止操作，没有中间操作。\"]},\"2208\":{\"h\":\"4. 终止操作的方法\",\"t\":[\"匹配与查找\",\"归约\",\"收集\"]},\"2209\":{\"h\":\"Ⅳ. 筛选与切片\",\"t\":[\"b-5-2\",\"测试数据源：Employee类的对象，属性包括： id(int)、姓名(string)、年龄(int)、收入(double)。\"]},\"2210\":{\"h\":\"1. filter：筛选\",\"t\":[\"接收 Lambda，从流中排除某些元素，参数就是流操作的数据源。\",\"filter(Predicate p) ========================================== //1.获取员工集合，并通过集合获取Stream List<Employee> list = EmployeeData.getEmployees(); Stream<Employee> stream = list.stream(); //2.筛选工资>7000的员工 stream.filter(e -> e.getSalary() > 7000).forEach(System.out::println); \"]},\"2211\":{\"h\":\"2. distinct：去重\",\"t\":[\"和SQL的distinct类似，去重，通过流所生成元素的 hashCode() 和 equals() 去除重复元素\",\"distinct(); ========================================== List<Employee> list = EmployeeData.getEmployees(); Stream<Employee> stream = list.stream(); stream.distinct().forEach(System.out::println); \"]},\"2212\":{\"h\":\"3. limit：截断\",\"t\":[\"截断流，使其元素不超过给定数量。\",\"根据遍历顺序，只获取前N个数据\",\"limit(n) ========================================== List<Employee> list = EmployeeData.getEmployees(); Stream<Employee> stream = list.stream(); list.stream().limit(3).forEach(System.out::println); \"]},\"2213\":{\"h\":\"4. skip：跳过\",\"t\":[\"跳过元素，返回一个扔掉了前 n 个元素的流。若流中元素不足 n 个，则返回一个空流。与 limit(n) 互补\",\"skip(n); ========================================== List<Employee> list = EmployeeData.getEmployees(); Stream<Employee> stream = list.stream(); stream.skip(3).forEach(System.out::println); \"]},\"2214\":{\"h\":\"Ⅴ. 映射\",\"t\":[\"b-5-3\",\"测试数据源：Employee类的对象，属性包括： id(int)、姓名(string)、年龄(int)、收入(double)\"]},\"2215\":{\"h\":\"1. map\",\"t\":[\"接收一个函数作为参数，该函数会被应用到每个元素上。\",\"Stream中的每个元素都会作为参数传递给方法中，做同样的方法体操作。该操作会返回一个新的Stream，函数的每次操作都会将参数映射成一个新的元素。\",\"主要用途：从一个流中获取新流，比如从用户流中getAge获取年轻，得到一个用户年龄流。\",\"map(Function f) ========================================== List<String> list = Arrays.asList(\\\"aa\\\", \\\"bb\\\", \\\"cc\\\", \\\"dd\\\"); //将所有元素都转为大写{AA,BB,CC,DD} list.stream().map(str->str.toUpperCase()).forEach(System.out::println); //返回了一个新的Stream,新Stream已经是元素修改后的了{AA,BB,CC,DD} Stream<String> stringStream = strList.stream().map(String::toUpperCase); stringStream.forEach(System.out::println); \"]},\"2216\":{\"h\":\"1.1 mapToDouble\",\"t\":[\"接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 DoubleStream。\",\"mapToDouble(ToDoubleFunction f); \"]},\"2217\":{\"h\":\"1.2 mapToInt\",\"t\":[\"接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 IntStream。\",\"mapToInt(ToIntFunction f); \"]},\"2218\":{\"h\":\"1.3 mapToLong\",\"t\":[\"接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 LongStream。\",\"mapToLong(ToLongFunction f); \"]},\"2219\":{\"h\":\"2. flatMap\",\"t\":[\"使用前提：生成Stream的集合是一个嵌套集合，即：集合中的每个元素，都是一个集合。\",\"将Stream中的每个元素（集合）中的元素，提取出来应用到方法中，并统一放回到一个集合中返回。（嵌套集合，返回成了非嵌套集合）。\",\"flatMap(Function f) <R> Stream<R> flatMap(Function<? super T, ? extends Stream<? extends R>> mapper); \",\"使用注意：flatMap中，每个输入始终是一个集合，不然就报错。 \",\"实测：该方法不会递归，仅支持展开一层嵌套。\",\"用途：一般仅作用集合的展开，如果要对集合中的所有元素进一步操作，可以接个map()\"]},\"2220\":{\"h\":\"3. map和flatMap的对比示例、\"},\"2221\":{\"h\":\"3.1 素材\",\"t\":[\"①使用Map从学生集合中获取每个学生的年龄\",\"②使用flatMap从年级集合中，获取每个学生的年龄\",\"//1.一个学生类，包含姓名和年龄两个属性 class Student{ private String userName; private int age = 1; public Student(String userName,int age){ this.userName = userName; this.age = age; } public int getAge() { return age; } //2.获取一个集合，包含所有学生数据(元素是学生类) public static List<Student> getStuList(){ Student ton = new Student(\\\"Ton\\\", 20); Student jerry = new Student(\\\"Jerry\\\", 22); Student jinno = new Student(\\\"Jinno\\\", 20); Student aaron = new Student(\\\"Aaron\\\", 19); List<Student> students = new ArrayList<>(); students.add(ton); students.add(jerry); students.add(jinno); students.add(aaron); return students; } //3.获取一个集合，包含子集合，子集合是班级，班级本身是学生数据集合 public static List<List<Student>> getGradeList(){ Student ton = new Student(\\\"Ton\\\", 20); Student jerry = new Student(\\\"Jerry\\\", 22); Student jinno = new Student(\\\"Jinno\\\", 20); Student aaron = new Student(\\\"Aaron\\\", 19); List<Student> grade1 = new ArrayList<>(); List<Student> grade2 = new ArrayList<>(); grade1.add(ton); grade1.add(jerry); grade2.add(jinno); grade2.add(aaron); return Arrays.asList(grade1, grade2); } } \"]},\"2222\":{\"h\":\"3.2 map的使用\",\"t\":[\"从学生对象集合中，获取班级学生所有年龄组成的集合。\",\"List<Student> stuList = Student.getStuList(); stuList.stream().map(Student::getAge).forEach(System.out::println); \"]},\"2223\":{\"h\":\"3.3 flatMap\",\"t\":[\"从班级对象集合中，获取班级学生所有年龄组成的集合。\",\"嵌套集合，外部集合内嵌套了班级集合，班级集合内的元素才是学生对象。\",\"List<List<Student>> gradeList = Student.getGradeList(); gradeList.stream().flatMap(Collection::stream) .map(Student::getAge).collect(Collectors.toList()); \"]},\"2224\":{\"h\":\"3.4 总结\",\"t\":[\"如上，当我们要对集合中的每个元素进行操作，并返回一个新集合是，使用map\",\"当我们要操作的集合是个嵌套集合时，就无法直接使用map了，可以先使用flatMap，从嵌套集合生成的流中，获取子集合，并将子集合全部转化为Stream（接着flatMap会将这些stream合并成一个Stream），然后再调用Map进行进一步的操作。\"]},\"2225\":{\"h\":\"Ⅵ. 排序\"},\"2226\":{\"h\":\"1. sorted：自然排序\",\"t\":[\"自然排序，产生一个新流，其中元素按自然顺序排序\",\"使用前提：集合的元素需要实现Comparable接口（尤其是自定义的类），否则抛异常\",\"sorted(); ========================================== List<Integer> list = Arrays.asList(12, 43, 65, 34, 87, 0, -98, 7); //输出内容：-98;0;7;12;34;43;65;87 list.stream().sorted().forEach(System.out::println); \"]},\"2227\":{\"h\":\"2. sorted(Comparator com)：定制排序\",\"t\":[\"产生一个新流，其中元素按比较器顺序排序\",\"sorted(Comparator com); ========================================== List<Student> stuList = Student.getStuList(); //根据学生的年龄进行排序 stuList.stream().sorted((stu1,stu2)->{ return Integer.compare(stu1.getAge(),stu2.getAge()); }).forEach(System.out::println); \"]},\"2228\":{\"h\":\"Ⅶ. 匹配与查找\"},\"2229\":{\"h\":\"1. allMatch：检查是否匹配所有元素\",\"t\":[\"作用：将stream代表的集合中的每一个元素作为参数在方法中进行操作，如果全都返回true，则整体返回true，否则返回false。\",\"参数：一个Predicate Functional\",\"boolean allMatch(Prodecate p); //示例：是否所有的员工的年龄都大于18 List<Employee> list = EmployeeData.getEmployees(); boolean b = list.stream().allMatch(e -> e.getAge() > 18); System.out.println(b); //false \"]},\"2230\":{\"h\":\"2. anyMatch：检查是否至少匹配一个元素\",\"t\":[\"boolean anyMatch(Predicate p); //示例：是否存在员工的工资大于 10000 List<Employee> list = EmployeeData.getEmployees(); boolean b1 = list.stream().anyMatch(e -> e.getSalary() > 10000); System.out.println(b1); //false \"]},\"2231\":{\"h\":\"3. noneMatch：检查是否没有匹配任何元素\",\"t\":[\"Boolean noneMatch(Predicate p) //示例：是否存在员工姓进 boolean name = list.stream().noneMatch(e -> e.getName().startsWith(\\\"进\\\")); System.out.println(name);//true \"]},\"2232\":{\"h\":\"4. findFirst：返回第一个元素\",\"t\":[\"返回值类型是Optional对象\",\"Optional<> findFirst(); //示例：返回第一个元素 List<Employee> list = EmployeeData.getEmployees(); Optional<Employee> first = list.stream().findFirst(); System.out.println(first); //Optional[Employee{id=1001, name='马化腾', age=34, salary=6000.38}] \"]},\"2233\":{\"h\":\"5. findAny：返回当前流中任意元素\",\"t\":[\"注意：不能用这个方法来获取随机元素，因为获取的元素是固定的，只是未必是第一个。\",\"Optional<> findAny(); //示例：默认返回的还是第一个 List<Employee> list = EmployeeData.getEmployees(); Optional<Employee> any = list.stream().findAny(); System.out.println(any); //Optional[Employee{id=1001, name='马化腾', age=34, salary=6000.38}] \"]},\"2234\":{\"h\":\"6. count：返回流中元素总数\",\"t\":[\"可以在中间接filter，获取要筛选的元素的总数\",\"long count(); //示例：返回员工总数 long count = list.stream().count(); System.out.println(count); //8 \"]},\"2235\":{\"h\":\"7. max：返回流中最大值\",\"t\":[\"参数是Comparator接口\",\"Optional<> max(Comparator c) //示例：返回工作最高的员工的工资 Optional<Double> max = list.stream().map(e -> e.getSalary()).max(Double::compare); System.out.println(max); //Optional[9876.12] \"]},\"2236\":{\"h\":\"8. min：返回流中最小值\",\"t\":[\"参数是Comparator接口\",\"Optional<> min(Comparator c); //示例：获取工资最低的员工对象 Optional<Employee> min = list.stream().min((e1, e2) -> Double.compare(e1.getSalary(), e2.getSalary())); System.out.println(min); //Optional[Employee{id=1008, name='扎克伯格', age=35, salary=2500.32}] \"]},\"2237\":{\"h\":\"9. forEach：内部迭代\",\"t\":[\"使用 Collection 接口需要用户去做迭代，称为外部迭代。\",\"相反，Stream API 使用内部迭代——它帮你把迭代做了\",\"forEach(Consumer c); //示例：遍历Stream中集合的所有元素 employees.forEach(System.out::println); \"]},\"2238\":{\"h\":\"Ⅷ. 归约与收集\"},\"2239\":{\"h\":\"1. reduce：归约\",\"t\":[\"可以将流中元素反复结合起来，得到一个值。\",\"参数1：iden，初始值\",\"参数2：BinaryOpearator Functional（对两个类型相同的参数进行二元运算）。\",\"返回值：和初始值类型相同的值。\",\"T reduce(T iden, BinaryOperator b) //示例：获取1到10的总和 List<Integer> intList = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10); //注意：初始值要写0，不然会多算一个1. Integer reduce = intList.stream().reduce(0, Integer::sum); System.out.println(reduce); \"]},\"2240\":{\"h\":\"1.1 reduce(BinaryOperator b)\",\"t\":[\"可以省略初始值，进行计算。直接使用集合中的第一个元素进行计算。\",\"返回值： Optional<T>\",\"reduce(BinaryOperator b);// List<Integer> intList = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10); Optional<Integer> reduce = intList.stream().reduce(Integer::sum); System.out.println(reduce); //Optional[55] \"]},\"2241\":{\"h\":\"1.2 map-reduce模式\",\"t\":[\"map 和 reduce 的连接通常称为 map-reduce 模式，因 Google用它来进行网络搜索而出名。\",\"示例：计算公式所有员工工资的总和\",\"Optional<Double> reduce = list.stream().map(Employee::getSalary) .reduce((s1, s2) -> s1 + s2); //也可以写成：(Double::sum) System.out.println(reduce); //Optional[48424.08] \"]},\"2242\":{\"h\":\"2. 收集\",\"t\":[\"将流转换为其他形式。接收一个 Collector接口的实现，用于给Stream中元素做汇总的方法.\",\"Collector 接口中方法的实现决定了如何对流执行收集的操作(如收集到 List、Set、Map)。\",\"Collectors 实用类提供了很多静态方法，可以方便地创建常见收集器实例。\",\"collect(Collector c) \"]},\"2243\":{\"h\":\"Collectors\",\"t\":[\"//1.示例：获取工资大于6000的员工List集合 List<Employee> cList = list.stream().filter(e -> e.getSalary() > 6000) .collect(Collectors.toList()); //2.示例：获取工资大于6000的员工Set集合 Set<Employee> cSet = list.stream().filter(e -> e.getSalary() > 6000) .collect(Collectors.toSet()); \",\"常用1：toList：返回List集合\",\"常用2：toSet：返回Set集合\"]},\"2244\":{\"h\":\"Collectors的方法\",\"t\":[\"b-5-4\",\"b-5-5\"]},\"2245\":{\"h\":\"b-6. Optional\"},\"2246\":{\"h\":\"Ⅰ. Optional 介绍\"},\"2247\":{\"h\":\"1. 介绍\",\"t\":[\"Optional<T>类(java.util.Optional) 是一个容器类，它可以保存类型T的值，代表这个值存在。或者仅仅保存null，表示这个值不存在。原来用 null 表示一个值不存在，现在 Optional 可以更好的表达这个概念。并且可以避免空指针异常。\"]},\"2248\":{\"h\":\"2. 产生背景\",\"t\":[\"臭名昭著的空指针异常是导致Java应用程序失败的最常见原因。以前，为了解决空指针异常，Google公司著名的Guava项目引入了Optional类，Guava通过使用检查空值的方式来防止代码污染，它鼓励程序员写更干净的代码。受到Google Guava的启发，Optional类已经成为Java 8类库的一部分\"]},\"2249\":{\"h\":\"3. 应用场景\",\"t\":[\"用来防止空指针异常，很少使用。\",\"Java底层语法很多地方用到了Optional，因此需要了解。\",\"主要使用T orElse来防止空指针。\"]},\"2250\":{\"h\":\"Ⅱ. Optional常用方法\"},\"2251\":{\"h\":\"1. 创建Optional类\"},\"2252\":{\"h\":\"1.1 Optional.of(T,t)\",\"t\":[\"创建一个 Optional 实例，t必须非空；\",\"Optional<T> Optional.of(T,t); ==================================== Student stu = new Student(); //要包装stu非null,不然会抛出异常 Optional<Student> stu1 = Optional.of(stu); System.out.println(stu1); \"]},\"2253\":{\"h\":\"1.2 Optional.empty()\",\"t\":[\"创建一个空的 Optional 实例，意义不大\",\"Optional<Object> empty = Optional.empty(); \"]},\"2254\":{\"h\":\"1.3 Optional.ofNullable(T t) 【常用】\",\"t\":[\"创建一个Optional实例，t可以为null\",\"Optional<T> Optional.ofNullable(T t); ===================================== Student stu = new Student(); Student stu2 = null; Optional<Student> stu3 = Optional.ofNullable(stu2); Optional<Student> stu4 = Optional.ofNullable(stu); System.out.println(stu4);//Optional[Student{userName='null', age=1}] System.out.println(stu3); //Optional.empty \"]},\"2255\":{\"h\":\"2. 判断Optional容器中是否有对象\"},\"2256\":{\"h\":\"2.1 isPresent\",\"t\":[\"判断Optional容器中是否有对象\",\"boolean isPresent(); ===================================== Student stu2 = null; Optional<Student> optStu2 = Optional.ofNullable(stu2); boolean b = optStu2.isPresent(); System.out.println(b); //false \"]},\"2257\":{\"h\":\"2.2 ifPresent\",\"t\":[\"如果有值，就执行Consumer接口的实现代码，并且该值会作为参数传给它。\",\"void ifPresent(Consumer<? super T> consumer) ===================================== Student stu = new Student(); Optional<Student> stu1 = Optional.ofNullable(stu); stu1.ifPresent(System.out::println); //Student{userName='null', age=1} \"]},\"2258\":{\"h\":\"3. 获取Optional容器的对象值\"},\"2259\":{\"h\":\"3.1 get：获取对象包含的值\",\"t\":[\"如果没有值，就抛异常，可以组合isPresent一起用。\",\"T get(); ===================================== Optional<Student> stu1 = Optional.ofNullable(stu); //Optional[Student{userName='null', age=1}] System.out.println(stu1); Student student = stu1.get(); //Student{userName='null', age=1} System.out.println(student); \"]},\"2260\":{\"h\":\"3.2 T orElse：\",\"t\":[\"如果有值则将其返回，否则返回指定的other对象。 加强版get()，防止空值异常。\",\"T orElse(T other); ===================================== Student stu2 = null; Optional<Student> optStu = Optional.ofNullable(stu2); Student stu3 = optStu.orElse(new Student(\\\"Anonymous\\\",21)); System.out.println(stu3);//Student{userName='Anonymous', age=21} \"]},\"2261\":{\"h\":\"b-7. JDK11 LTS\",\"t\":[\"提示\",\"JDK11的内容指的是JDK9~JDK11\",\"暂略\"]},\"2262\":{\"h\":\"Ⅰ. Modularity\"},\"2263\":{\"h\":\"Ⅱ. REPL工具\"},\"2264\":{\"h\":\"Ⅲ. try语句\"},\"2265\":{\"h\":\"Ⅳ. 底层改变\"},\"2266\":{\"h\":\"Ⅴ. 变量类型推断\"},\"2267\":{\"h\":\"Ⅵ. String新增方法\"},\"2268\":{\"h\":\"Ⅶ. 其他\"},\"2269\":{\"h\":\"1. copyOf()\"},\"2270\":{\"h\":\"2. Optional加强\"},\"2271\":{\"h\":\"3. 局部类型推断升级\"},\"2272\":{\"h\":\"4. HttpClient\"},\"2273\":{\"h\":\"5. 更简化的编译运行\"},\"2274\":{\"h\":\"6. 接口中声明私有方法\"},\"2275\":{\"h\":\"7. 钻石操作符<>的增强\"},\"2276\":{\"h\":\"1-1. 概述\",\"t\":[\"提示\",\"开发中，使用的是框架中的数据库操作方法，JDBC只用来了解底层。\",\"框架中底层用的也是JDBC。\",\"【本章内容：用来了解底层】\"]},\"2277\":{\"h\":\"1. 数据持久化\",\"t\":[\"持久化(persistence)：把数据保存到可掉电式存储设备中以供之后使用。大多数情况下，特别是企业级应用，数据持久化意味着将内存中的数据保存到硬盘上加以”固化”，而持久化的实现过程大多通过各种关系数据库来完成。\",\"1-1-1\",\"持久化的主要应用是将内存中的数据存储在关系型数据库中，当然也可以存储在磁盘文件、XML数据文件中。\"]},\"2278\":{\"h\":\"2. Java中的数据存储技术\",\"t\":[\"在Java中，数据库存取技术可分为如下几类：\",\"JDBC直接访问数据库\",\"JDO (Java Data Object )技术\",\"第三方O/R工具，如Hibernate, Mybatis 等\",\"JDBC是java访问数据库的基石，JDO、Hibernate、MyBatis等只是更好的封装了JDBC。\"]},\"2279\":{\"h\":\"3. JDBC介绍\",\"t\":[\"JDBC(Java Database Connectivity)是一个独立于特定数据库管理系统、通用的SQL数据库存取和操作的公共接口（一组API），定义了用来访问数据库的标准Java类库，（java.sql,javax.sql）使用这些类库可以以一种标准的方法、方便地访问数据库资源。\",\"JDBC为访问不同的数据库提供了一种统一的途径，为开发者屏蔽了一些细节问题。\",\"JDBC的目标是使Java程序员使用JDBC可以连接任何提供了JDBC驱动程序（也就是接口的实现类）的数据库系统，这样就使得程序员无需对特定的数据库系统的特点有过多的了解，从而大大简化和加快了开发过程。\"]},\"2280\":{\"h\":\"3.1 没有JDBC，Java程序访问数据库时是这样的：\",\"t\":[\"1-1-2\"]},\"2281\":{\"h\":\"3.2 有了JDBC，Java程序访问数据库时是这样的：\",\"t\":[\"1-1-3\"]},\"2282\":{\"h\":\"3.3 总结\",\"t\":[\"一般选择使用JDBC来连接数据库，而不是直接操作数据库，这样Java程序的移植性更高，编写难度更低。\"]},\"2283\":{\"h\":\"4. JDBC体系结构\",\"t\":[\"JDBC接口（API）包括两个层次：\",\"面向应用的API：Java API，抽象接口，供应用程序开发人员使用（连接数据库，执行SQL语句，获得结果），java程序员只需要面向这套接口编程即可。\",\"面向数据库的API：Java Driver API，供开发商开发数据库驱动程序用。不同的数据库厂商，需要针对这套接口，提供不同实现。不同的实现的集合，即为不同数据库的驱动。\"]},\"2284\":{\"h\":\"5. JDBC程序编写步骤\",\"t\":[\"1-1-4\"]},\"2285\":{\"h\":\"1-2. 连接数据库\"},\"2286\":{\"h\":\"Ⅰ. 安装驱动\"},\"2287\":{\"h\":\"1. Driver：驱动介绍\",\"t\":[\"JDK中只有JDBC定义的一系列操作数据库的接口，并没有预装驱动，需要我们自己下载\",\"目前：以MySql驱动进行操作。\"]},\"2288\":{\"h\":\"2. 下载MySQL驱动\",\"t\":[\"选择：Platform Independent\",\"1-2-1\"]},\"2289\":{\"h\":\"3. 驱动文件介绍\",\"t\":[\"解压后的驱动文件，其中：\",\"src：MySQL的JDBC驱动源码（.java）\",\"mysql-connector-java-8.0.27.jar：jar包，MySql的JDBC驱动包\",\"1-2-2\"]},\"2290\":{\"h\":\"4. 安装并使用驱动\",\"t\":[\"①将jar包移动到项目目录下，如：Learn/JDBC/lib (JDBC模块的lib目录)\",\"②在idea中，右键jar包文件：add to Library，将jar包加载到扩展库\",\"③如图，选择jar包的等级和要加载到哪个模块就OK了。\",\"1-2-3\"]},\"2291\":{\"h\":\"5. 加载驱动源码\",\"t\":[\"加载的第三方jar包都是class文件，查看到的源码是经过反编译的，需要将真正的源码导入。 在查看mysql-connector-java-8.0.27.jar中的class文件时，会提示：\",\"1-2-4\",\"点击右边的Choose Source，选择之前解压的MySQL驱动目录，选择src目录作为源码来源。\",\"URL：获取要连接的数据库信息\"]},\"2292\":{\"h\":\"Ⅱ. 数据库连接要素\",\"t\":[\"连接数据库，必备条件有三个（前提先创建好了数据库）：\",\"Driver：数据库驱动，JDK只有接口，需要安装具体的实现类\",\"URL：即要连接的数据库地址\",\"用户名、密码：连接数据库的用户名密码\"]},\"2293\":{\"h\":\"1. Driver\",\"t\":[\"见：安装驱动。\"]},\"2294\":{\"h\":\"2. URL\",\"t\":[\"以MySQL为例：URL的格式为：jdbc:mysql://主机ip:mysql服务端端口号/数据库名称?其他k=v\",\"MySQL默认端口是3306（也可以自己指定），其他k=v是字符集，采用默认的就行\",\"\\\"jdbc:mysql://localhost:3306/test?\\\"; \"]},\"2295\":{\"h\":\"3. 用户名、密码\",\"t\":[\"user,password可以用 属性名=属性值 方式告诉数据库\"]},\"2296\":{\"h\":\"Ⅲ. 连接数据库\",\"t\":[\"有5种方法，以下5中方法是循序渐进的，用的时候直接用第五种即可。\"]},\"2297\":{\"h\":\"1. 方式1：使用MySQL驱动的API连接\",\"t\":[\"import java.sql.Connection; public void connectionDB1() throws SQLException { //1.初始化驱动：Driver接口实现类com.mysql.jdbc.Driver的对象 Driver driver = new com.mysql.cj.jdbc.Driver(); //2. 提供URL String url = \\\"jdbc:mysql://localhost:3306/test\\\"; //3.提供用户名和密码：使用Properties对象 Properties info = new Properties(); info.setProperty(\\\"user\\\",\\\"root\\\"); info.setProperty(\\\"password\\\",\\\"root\\\"); //4.调用driver的connect()，获取连接对象 //connect方法的第二个参数就是Properties类，因此必须以该类储存账号和密码信息 Connection conn = driver.connect(url, info); System.out.println(conn); } \",\"Properties类：Properties 继承于 Hashtable。表示一个持久的属性集.属性列表中每个键及其对应值都是一个字符串。\",\"弊端：出现了第三方API com.mysql.jdbc.Driver，失去了移植性。\"]},\"2298\":{\"h\":\"2. 方式2：使用反射，不体现第三方API\",\"t\":[\"方式1获取Driver实现类的时候使用了第三方API，失去了移植性。\",\"可以使用反射，来隐藏第三方api\",\"//1.使用反射初始化驱动 Class<?> driverClass = Class.forName(\\\"com.mysql.cj.jdbc.Driver\\\"); Object driver = driverClass.newInstance(); ...//后续的操作同方式1 \",\"说明：newInstance已经被jdk舍弃了。\"]},\"2299\":{\"h\":\"3. 方式3：使用DriverManager\",\"t\":[\"使用DriverManager类替换Driver\",\"public void testConnection3() throws Exception { //1.使用反射获取Driver实现类的对象 Class clazz = Class.forName(\\\"com.mysql.jdbc.Driver\\\"); Driver driver = (Driver) clazz.newInstance(); //2.提供另外三个连接的基本信息： String url = \\\"jdbc:mysql://localhost:3306/test\\\"; String user = \\\"root\\\"; String password = \\\"abc123\\\"; //3.注册驱动 DriverManager.registerDriver(driver); //4.获取连接 Connection conn = DriverManager.getConnection(url, user, password); System.out.println(conn); } \"]},\"2300\":{\"h\":\"4. 方式4：省略驱动的注册\",\"t\":[\"驱动会自动注册的，可以省略驱动的注册，只进行驱动的加载即可。\",\"public void testConnection3() throws Exception { //1.Driver的实现类不用获取了,因为驱动不用注册... // 2.提供三个连接的基本信息： String url = \\\"jdbc:mysql://localhost:3306/test\\\"; String user = \\\"root\\\"; String password = \\\"abc123\\\"; //3.驱动注册可以省略,会自动注册... //3.1 将1和3连在一起，只加载驱动即可 Class.ForName(\\\"com.mysql.jdbc.Driver\\\"); //4.获取连接 Connection conn = DriverManager.getConnection(url, user, password); System.out.println(conn); } \"]},\"2301\":{\"h\":\"5. 方式5：将连接方式写入配置文件让驱动加载【最终方案】\",\"t\":[\"使用配置文件的方式保存配置信息，在代码中加载配置文件。数据库连接的三个要素，都可以保存到配置文件中\"]},\"2302\":{\"h\":\"5.1 配置文件\",\"t\":[\"位置：配置文件声明在工程的src目录下\",\"文件名：jdbc.properties\",\"user=root password=root url=jdbc:mysql://localhost:3306/test driverClass=com.mysql.cj.jdbc.Driver \"]},\"2303\":{\"h\":\"5.2 代码\",\"t\":[\"public void connectionDB1() throws Exception { //1.加载配置文件：使用ClassLoader和Properties类 InputStream is = ConnectionTest.class.getClassLoader() .getResourceAsStream(\\\"jdbc.properties\\\"); Properties pros = new Properties(); pros.load(is); //2.读取配置信息 String user = pros.getProperty(\\\"user\\\"); String password = pros.getProperty(\\\"password\\\"); String url = pros.getProperty(\\\"url\\\"); String driverClass = pros.getProperty(\\\"driverClass\\\"); //3.加载驱动：使用Class类的forName方法根据全类名参数创建对象 Class.forName(driverClass); //4.获取连接 Connection conn = DriverManager.getConnection(url, user,password); System.out.println(conn); } \"]},\"2304\":{\"h\":\"5.3 使用配置文件的好处\",\"t\":[\"实现了代码和数据的分离，如果需要修改配置信息，直接在配置文件中修改，不需要深入代码\",\"如果修改了配置信息，省去重新编译的过程\"]},\"2305\":{\"h\":\"1-3. CURD\"},\"2306\":{\"h\":\"Ⅰ. 操作和访问数据库\"},\"2307\":{\"h\":\"1. 说明\",\"t\":[\"数据库连接被用于向数据库服务器发送命令和 SQL 语句，并接受数据库服务器返回的结果。其实一个数据库连接就是一个Socket连接。\"]},\"2308\":{\"h\":\"2. 对数据库的调用方式\",\"t\":[\"在 java.sql 包中有 3 个接口分别定义了对数据库的调用的不同方式：\",\"Statement：用于执行静态 SQL 语句并返回它所生成结果的对象。\",\"PrepatedStatement：SQL 语句被预编译并存储在此对象中，可以使用此对象多次高效地执行该语句。\",\"CallableStatement：用于执行 SQL 存储过程【框架中用的，暂不关注】\",\"1-3-1\"]},\"2309\":{\"h\":\"3. statement的弊端\"},\"2310\":{\"h\":\"3.1 问题一：存在拼串操作，繁琐\",\"t\":[\"String userName = ...; //获取用户名 String password = ...; //获取用户密码 //进行SQL语句的拼接：非常繁琐，且不易阅读 String sql = \\\"SELECT user,password FROM user_table WHERE USER = '\\\" + userName + \\\"' AND PASSWORD = '\\\" + password User user = get(sql, User.class); //执行SQL \"]},\"2311\":{\"h\":\"3.2 问题二：存在SQL注入问题\",\"t\":[\"SQL 注入是利用某些系统没有对用户输入的数据进行充分的检查，而在用户输入数据中注入非法的 SQL 语句段或命令从而利用系统的 SQL 引擎完成恶意行为的做法。\",\"如下：通过填写用户名：'1' or ' ，密码：=1 or '1' = '1 进行SQL注入\",\"SELECT user,password FROM user_table WHERE USER = '1' or ' AND PASSWORD = '='1' or '1' = '1'; \"]},\"2312\":{\"h\":\"4. 开发中访问数据库的方式选择\",\"t\":[\"PreptredStatement是Statemet你的子接口，更安全和高效，开发中选择它。\",\"1-3-2\"]},\"2313\":{\"h\":\"5. PreparedStatement的优点\",\"t\":[\"解决了Statement的拼串问题\",\"解决了SQL注入问题\",\"可以操作Blob数据\",\"可以实现高效的批量操作（只需要预编译的时候校验一次SQL语句）\"]},\"2314\":{\"h\":\"6. Java与SQL对应数据类型转换表\",\"t\":[\"Java类型\",\"SQL类型\",\"boolean\",\"BIT\",\"byte\",\"TINYINT\",\"short\",\"SMALLINT\",\"int\",\"INTEGER\",\"long\",\"BIGINT\",\"String\",\"CHAR,VARCHAR,LONGVARCHAR\",\"byte array\",\"BINARY , VAR BINARY\",\"java.sql.Date\",\"DATE\",\"java.sql.Time\",\"TIME\",\"java.sql.Timestamp\",\"TIMESTAMP\"]},\"2315\":{\"h\":\"Ⅱ. PreparedStatement\"},\"2316\":{\"h\":\"1. 简介\",\"t\":[\"可以通过调用 Connection 对象的 preparedStatement(String sql)方法获取 PreparedStatement 对象\"]},\"2317\":{\"h\":\"2. PreparedStatement 与 Statement\",\"t\":[\"PreparedStatement 接口是 Statement 的子接口，它表示一条预编译过的 SQL 语句\"]},\"2318\":{\"h\":\"3. PreparedStatement的操作步骤\",\"t\":[\"获取数据库连接对象 \",\"①读取配置文件中的数据库连接信息\",\"②加载驱动\",\"③获取链接\",\"编写SQL语句 \",\"④拼接预编译SQL字符串，带占位符“？”，并返回PrepareStatemet对象\",\"⑤填充占位符\",\"⑥执行操作 \",\"execute：DML操作\",\"executeQuery：DQL操作\",\"⑦关闭资源： \",\"close：关闭PreparedStatement资源\",\"close：关闭连接资源\"]},\"2319\":{\"h\":\"4. 创建PreparedStatement对象\",\"t\":[\"可以通过调用 Connection 对象的 preparedStatement(String sql)方法获取 PreparedStatement 对象\",\"获取Connection对象->预编译sql字符串->调用 preparedStatement(String sql) = PreparedStatement对象\",\"PrepareStatement Connection.prepareStatement(String sql); ====================================================== ...//读取配置文件中的数据库连接信息，加载驱动 //1.获取Connection对象：数据库连接对象 Connection conn = DriverManager.getConnection(url, user, password); //2.编写预编译sql字符串 String sql = \\\"insert into customers(name,email,birth)values(?,?,?)\\\"; //3.Connection对象调用preparedStatement方法执行预编译SQL获取PreparedStatemet对象 PreparedStatement ps = conn.prepareStatement(sql); \"]},\"2320\":{\"h\":\"5. 预编译SQL语句与占位符\"},\"2321\":{\"h\":\"5.1 预编译SQL语句\",\"t\":[\"PreparedStatement 对象所代表的 SQL 语句中的参数用问号(?)来表示\",\"setXxx（Xxx是数据类型）：PreparedStatement 对象的 setXxx() 方法来设置这些参数. setXxx() 方法有两个参数，第一个参数是要设置的 SQL 语句中的参数的索引(从 1 开始)，第二个是设置的 SQL 语句中的参数的值。\",\"//1.预编译字符串示例 String sql = \\\"insert into customers(name,age,birth)values(?,?,?)\\\"; //2.获取PreparedStatement对象 PreparedStatement ps = conn.prepareStatement(sql); \"]},\"2322\":{\"h\":\"5.2 填充占位符\",\"t\":[\"setXxx（Xxx是数据类型）：PreparedStatement 对象的 setXxx() 方法来设置这些参数. setXxx() 方法有两个参数，第一个参数是要设置的 SQL 语句中的参数的索引(从 1 开始)，第二个是设置的 SQL 语句中的参数的值。\",\"该方法会抛出：java.sql.SQLException异常\",\"void PreparedStatement.setXxx(int paramenterIndex,Xxx x); ====================================== //调用 setXxx方法填充上述占位符 ps.setString(1,\\\"Jinno\\\"); ps.setInt(2,20); SimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy-MM-dd\\\"); java.util.Date date = sdf.parse(\\\"1000-01-01\\\"); ps.setDate(3,new(date.getTime()));//要填SQL中的Date对象 \"]},\"2323\":{\"h\":\"6. execute：执行DML操作\",\"t\":[\"执行PreparedStatement对象包含的所有任意SQL语句。\",\"该操作会抛出：SQLException异常\",\"boolean PreparedStatement.execute(); \",\"指针 \",\"execute是可以执行多条预编译SQL语句的，返回值返回的是第一条语句的处理结果。\",\"需要调用方法 getResultSet 或 getUpdateCount 来检索结果，调用 getMoreResults 才能移动到任何后续结果\",\"返回值 \",\"如果第一个结果是 ResultSet 对象，则返回 true；\",\"如果第一个结果是更新计数或没有结果，则返回 false\"]},\"2324\":{\"h\":\"Ⅲ. DML\",\"t\":[\"PreparedStatement的DML操作\"]},\"2325\":{\"h\":\"1. 添加：代码示例\",\"t\":[\"public void testInsert() { Connection conn = null; PreparedStatement ps = null; try { // 1.读取配置文件中的4个基本信息 InputStream is = ClassLoader.getSystemClassLoader() .getResourceAsStream(\\\"jdbc.properties\\\"); Properties pros = new Properties(); pros.load(is); String user = pros.getProperty(\\\"user\\\"); String password = pros.getProperty(\\\"password\\\"); String url = pros.getProperty(\\\"url\\\"); String driverClass = pros.getProperty(\\\"driverClass\\\"); // 2.加载驱动 Class.forName(driverClass); // 3.获取连接 conn = DriverManager.getConnection(url, user, password); //4.预编译sql语句，返回PreparedStatement的实例 String sql = \\\"insert into customers(name,email,birth)values(?,?,?)\\\"; ps = conn.prepareStatement(sql); //5.填充占位符 ps.setString(1, \\\"哪吒\\\"); ps.setString(2, \\\"nezha@gmail.com\\\"); SimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy-MM-dd\\\"); java.util.Date date = sdf.parse(\\\"1000-01-01\\\"); ps.setDate(3, new Date(date.getTime())); //6.执行操作 ps.execute(); } catch (Exception e) { e.printStackTrace(); }finally{ //7.资源的关闭 try { if(ps != null) ps.close(); } catch (SQLException e) { e.printStackTrace(); } try { if(conn != null) conn.close(); } catch (SQLException e) { e.printStackTrace(); } } } \"]},\"2326\":{\"h\":\"2. 封装数据库连接的获取和资源的关闭\",\"t\":[\"文件：src/util/JDBCUtils.java\",\"类：JDBCUtils\"]},\"2327\":{\"h\":\"2.1 获取数据库连接\",\"t\":[\"public static Connection getConnection() throws Exception { // 1.读取配置文件中的4个基本信息 InputStream is = ClassLoader.getSystemClassLoader() .getResourceAsStream(\\\"jdbc.properties\\\"); Properties pros = new Properties(); pros.load(is); String user = pros.getProperty(\\\"user\\\"); String password = pros.getProperty(\\\"password\\\"); String url = pros.getProperty(\\\"url\\\"); String driverClass = pros.getProperty(\\\"driverClass\\\"); // 2.加载驱动 Class.forName(driverClass); // 3.获取连接 Connection conn = DriverManager.getConnection(url, user, password); return conn; } \"]},\"2328\":{\"h\":\"2.2 关闭连接和Statement的操作\",\"t\":[\"PropertyStatement是Statement的子类。\",\"public static void closeResource(Connection conn,Statement ps){ try { if(ps != null) ps.close(); } catch (SQLException e) { e.printStackTrace(); } try { if(conn != null) conn.close(); } catch (SQLException e) { e.printStackTrace(); } } \"]},\"2329\":{\"h\":\"3. 使用封装好的工具：更新操作示例\",\"t\":[\"public void testUpdate(){ Connection conn = null; PreparedStatement ps = null; try { //1.获取数据库的连接 conn = JDBCUtils.getConnection(); //2.预编译sql语句，返回PreparedStatement的实例 String sql = \\\"update customers set name = ? where id = ?\\\"; ps = conn.prepareStatement(sql); //3.填充占位符 ps.setObject(1,\\\"莫扎特\\\"); ps.setObject(2, 18); //4.执行 ps.execute(); } catch (Exception e) { e.printStackTrace(); }finally{ //5.资源的关闭 JDBCUtils.closeResource(conn, ps); } } \"]},\"2330\":{\"h\":\"4. 封装通用的增删改操作\",\"t\":[\"对于DML来说，除了SQL语句外，其他的步骤都是相通的。\"]},\"2331\":{\"h\":\"4.1 功能设计\",\"t\":[\"DML操作的变量是SQL预编译语句，和给占位符赋的值，因此我们可以将SQL预编译语句和占位符作为形参，让用户传输，然后将所有操作封装。\"]},\"2332\":{\"h\":\"4.2 参数设计\",\"t\":[\"SQL的预编译语句，作为方法的第一个参数。SQL的占位符数量和类型都是不确定的，因此可以设计成Object类型的 可变形参。\",\"使用的时候注意：sql中占位符的个数与可变形参的长度应该相同！\"]},\"2333\":{\"h\":\"4.3 源码\",\"t\":[\"public void update(String sql,Object ...args){ Connection conn = null; PreparedStatement ps = null; try { //1.获取数据库的连接 conn = JDBCUtils.getConnection(); //2.预编译sql语句，返回PreparedStatement的实例 ps = conn.prepareStatement(sql); //3.填充占位符 for(int i = 0;i < args.length;i++){ ps.setObject(i + 1, args[i]);//小心参数声明错误！！ } //4.执行 ps.execute(); } catch (Exception e) { e.printStackTrace(); }finally{ //5.资源的关闭 JDBCUtils.closeResource(conn, ps); } } \"]},\"2334\":{\"h\":\"4.4 使用示例\",\"t\":[\"//1.示例1：删除某表中的1个数据 String sql = \\\"delete from customers where id = ?\\\"; update(sql,3) //2.示例2：更新某表中的一个数据 String sql = \\\"update `order` set order_name = ? where order_id = ?\\\"; update(sql,\\\"DD\\\",\\\"2\\\"); \"]},\"2335\":{\"h\":\"Ⅳ. DQL\",\"t\":[\"PreparedStatement的DQL操作。\"]},\"2336\":{\"h\":\"1. DQL的操作步骤\",\"t\":[\"基本步骤与DML一致，只是DQL执行查询的方法是executeQuery()，而不是execute()。\",\"查询操作比较复杂一点，需要对查询的结果进行处理。\"]},\"2337\":{\"h\":\"2. ResultSet对象\"},\"2338\":{\"h\":\"2.1 获取\",\"t\":[\"调用PreparedStatement 的 executeQuery() 方法，查询结果是一个ResultSet 对象\",\"ResultSet PreparedStatement.executeQuery(); \"]},\"2339\":{\"h\":\"2.2 ResultSet介绍\",\"t\":[\"ResultSet 对象以逻辑表格的形式封装了执行数据库操作的结果集。ResultSet 返回的实际上就是一张数据表。\"]},\"2340\":{\"h\":\"2.3 指针\",\"t\":[\"ResultSet 对象维护了一个指向当前数据行的指针，指针指向数据表的第一条记录的前面。可以通过 ResultSet 对象的 next() 方法移动到下一行。调用 next()方法检测下一行是否有效。若有效，该方法返回 true，且指针下移，并返回该行的数据。\",\"当指针指向一行时, 可以通过调用 getXxx(int index) 或 getXxx(int columnName) 获取每一列的值。\"]},\"2341\":{\"h\":\"3. ResultSet接口的方法\"},\"2342\":{\"h\":\"3.1 next：移动指针\",\"t\":[\"判断下一行有没有数据，没有就返回false，有就移动指针到下一行。\",\"boolean ResultSet.next() \"]},\"2343\":{\"h\":\"3.2 getXxx：获取指针所在行的数据\",\"t\":[\"参数：列的label或索引 \",\"列的label，列名，推荐这种，更灵活安全，意义明显。\",\"列的索引，Java与数据库交互涉及到的相关API中的索引都从1开始。\",\"返回值：返回该列的值\",\"数据类型：Xxx代表数据类型，用来获取不同类型的值\",\"Xxx ResultSet.getXxx(int index); \"]},\"2344\":{\"h\":\"4. ResultSetMetaDate对象\",\"t\":[\"用于获取关于 ResultSet 对象中列的类型和属性信息的对象，也就是用于获取结果集的源数据。\",\"ResultSetMetaDate ResultSet.getMetaData(); \"]},\"2345\":{\"h\":\"5. ResultSetMetaDate对象的常用方法\",\"t\":[\"getColumnName(int column)：获取指定列的名称\",\"getColumnLabel(int column)：获取指定列的别名\",\"getColumnCount()：返回当前 ResultSet 对象中的列数。\",\"getColumnTypeName(int column)：检索指定列的数据库特定的类型名称。\",\"getColumnDisplaySize(int column)：指示指定列的最大标准宽度，以字符为单位。\",\"isNullable(int column)：指示指定列中的值是否可以为 null。\",\"isAutoIncrement(int column)：指示是否自动为指定列进行编号，这样这些列仍然是只读的。\"]},\"2346\":{\"h\":\"6. ORM编程思想：object relational mapping\",\"t\":[\"一个数据表对应一个java类，表中的一条记录对应java类的一个对象，表中的一个字段对应java类的一个属性。\"]},\"2347\":{\"h\":\"7. 图解查询操作的流程\",\"t\":[\"1-3-3\",\"1-3-4\"]},\"2348\":{\"h\":\"Ⅴ. 查询示例\",\"t\":[\"PreparedStatement的DQL查询示例。\"]},\"2349\":{\"h\":\"1. 基本查询示例：查询custom表中的数据\",\"t\":[\"这里用到了上章定义的JDBCUtils，并使用了ORM对象来处理查询的数据\",\"public void testQuery1() { Connection conn = null; PreparedStatement ps = null; ResultSet resultSet = null; try { //1.获取连接对象 conn = JDBCUtils.getConnection(); //2.获取PreparedStatement对象并给占位符赋值 String sql = \\\"select id,name,email,birth from customers where id = ?\\\"; ps = conn.prepareStatement(sql); ps.setObject(1, 1); //3.执行查询,并返回结果集 resultSet = ps.executeQuery(); //4.处理结果集 if(resultSet.next()){ //4.1 获取当前这条数据的各个字段值 int id = resultSet.getInt(1); String name = resultSet.getString(2); String email = resultSet.getString(3); Date birth = resultSet.getDate(4); //4.2将数据封装为一个对象（推荐） Customer customer = new Customer(id, name, email, birth); System.out.println(customer); } } catch (Exception e) { e.printStackTrace(); }finally{ //5. 关闭资源 JDBCUtils.closeResource(conn, ps, resultSet); } } \"]},\"2350\":{\"h\":\"1.1 JDBCUtils更新\",\"t\":[\"上章封装的JDBCUtils工具中的关闭资源方法，只关闭了两个资源，而DQL操作需要额外关闭一个resultSet资源\"]},\"2351\":{\"h\":\"1.2 Custom对象\",\"t\":[\"根据ORM编程思想，需要创建一个Customer类（与数据表同名）来储存查询到的数据。\",\"public class Customer{ private int id; private String name; private String email; private Date birth; public Customer() { super(); } public Customer(int id, String name, String email, Date birth) { super(); this.id = id; this.name = name; this.email = email; this.birth = birth; } ... } \"]},\"2352\":{\"h\":\"2. 封装：针对custom表的通用查询操作\",\"t\":[\"该操作仅支持Custom表，且只能查询一行数据\",\"public Customer queryForCustomers(String sql,Object...args){ Connection conn = null; PreparedStatement ps = null; ResultSet rs = null; try { //1.获取连接对象 conn = JDBCUtils.getConnection(); //2.获取PreparedStatement对象,并给占位符赋值 ps = conn.prepareStatement(sql); for(int i = 0;i < args.length;i++){ ps.setObject(i + 1, args[i]); } //3.执行查询,并返回结果集 rs = ps.executeQuery(); //3.1 获取结果集的元数据 :ResultSetMetaData ResultSetMetaData rsmd = rs.getMetaData(); //3.2 通过ResultSetMetaData获取结果集中的列数 int columnCount = rsmd.getColumnCount(); //4.循环获取结果集中每列的数据 if(rs.next()){ Customer cust = new Customer(); //4.1 处理结果集一行数据中的每一个列 for(int i = 0;i <columnCount;i++){ //4.2 获取列值 Object columValue = rs.getObject(i + 1); //4.3 获取每个列的列名 String columnLabel = rsmd.getColumnLabel(i + 1); //4.4 给cust对象指定的columnName属性，赋值为columValue：通过反射 Field field = Customer.class.getDeclaredField(columnLabel); field.setAccessible(true); field.set(cust, columValue); } //5. 返回结果集 return cust; } } catch (Exception e) { e.printStackTrace(); }finally{ //6.关闭资源 JDBCUtils.closeResource(conn, ps, rs); } return null; } \"]},\"2353\":{\"h\":\"2.1 使用示例\",\"t\":[\"String sql = \\\"select id,name,birth,email from customers where id = ?\\\"; Customer customer = queryForCustomers(sql, 13); System.out.println(customer); sql = \\\"select name,email from customers where name = ?\\\"; Customer customer1 = queryForCustomers(sql,\\\"周杰伦\\\"); System.out.println(customer1); \"]},\"2354\":{\"h\":\"2.2 列的别名\",\"t\":[\"问题：数据表中，列的名字和储存数据的对象中属性的名字是一一对应的，但是未必完全一样，比如：数据库中是用下划线分隔单词的，而Java中是驼峰分隔单词的。这时使用列名作为类的属性名就会报错（找不到该属性）。\",\"解决方案：SQL语句中给列起别名，别名 = 数据类的属性名，然后把获取列名的方法改成获取列的别名的方法。 getColumnLabel代替 getColumnName.\",\"补充：当列没有别名时，就默认把列名当成别名，所以不用担心没有起别名。\"]},\"2355\":{\"h\":\"3. 通用查询操作封装：针对不同表\",\"t\":[\"针对于不同的表的通用的查询操作，可返回表中的多条记录\",\"public <T> List<T> getInstance(Class<T> clazz, String sql, Object... args) { Connection conn = null; PreparedStatement ps = null; ResultSet rs = null; try { //1.获取连接对象 conn = JDBCUtils.getConnection(); //2.获取PreparedStatement对象,并给占位符赋值 ps = conn.prepareStatement(sql); for (int i = 0; i < args.length; i++) { ps.setObject(i + 1, args[i]); } //3.执行查询,并返回结果集 rs = ps.executeQuery(); //3.1获取结果集的元数据 :ResultSetMetaData ResultSetMetaData rsmd = rs.getMetaData(); //3.2通过ResultSetMetaData获取结果集中的列数 int columnCount = rsmd.getColumnCount(); //4.创建集合对象，用来放结果集 ArrayList<T> list = new ArrayList<T>(); //5.循环获取每一行数据 while(rs.next()) { T t = clazz.newInstance(); //通过反射创建存放数据的对象 //6. 处理结果集一行数据中的每一个列:给t对象指定的属性赋值 for (int i = 0; i < columnCount; i++) { //6.1 获取列值 Object columValue = rs.getObject(i + 1); //6.2 获取每个列的列名 String columnLabel = rsmd.getColumnLabel(i + 1); //6.3 给t对象指定的columnName属性，赋值为columValue：通过反射 Field field = clazz.getDeclaredField(columnLabel); field.setAccessible(true); field.set(t, columValue); } //6.4 将循环拿到的每行数据对象，放到集合中 list.add(t); } //7. 返回结果集 return list; } catch (Exception e) { e.printStackTrace(); } finally { //6.关闭资源 JDBCUtils.closeResource(conn, ps, rs); } return null; } \"]},\"2356\":{\"h\":\"3.1 使用示例\",\"t\":[\"String sql = \\\"select id,name,email from customers where id < ?\\\"; List<Customer> list = getForList(Customer.class,sql,12); list.forEach(System.out::println); \"]},\"2357\":{\"h\":\"3.2 查询不同的表： Class<T> 参数与返回值 List<T>\",\"t\":[\"为所有的表都创建一个ORM类，调用方法的时候，将类名.class传递进去，如上。\",\"在方法内通过newInstance()创建数据对象。返回值的类型就是ORM类，也写成泛型的样式。\"]},\"2358\":{\"h\":\"3.3 返回多条数据\",\"t\":[\"利用集合和吧next放入循环来获取多条数据。\",\"如果要创建只需要一行数据的方法，把while循环改成if判断，取消集合就可以了。\"]},\"2359\":{\"h\":\"1-4. 操作Blob\",\"t\":[\"使用PreparedStatement操作Blob数据，Blob数据，就是二进制数据，比如一张图片。\"]},\"2360\":{\"h\":\"1. MySQL Blob类型\",\"t\":[\"MySQL中，BLOB是一个二进制大型对象，是一个可以存储大量数据的容器，它能容纳不同大小的数据。\",\"插入BLOB类型的数据必须使用PreparedStatement，因为BLOB类型的数据无法使用字符串拼接写的。\",\"MySQL的四种BLOB类型(除了在存储的最大信息量上不同外，他们是等同的) \",\"TinyBlob：255Byte\",\"Blob：65KB【常用】\",\"MediumBlob：16M\",\"LongBlob：4G\",\"注意：如果存储的文件过大，数据库的性能会下降。实际使用中根据需要存入的数据大小定义不同的BLOB类型。\"]},\"2361\":{\"h\":\"2. 应用场景\",\"t\":[\"常用来储存缩略图，使用<=65KB的Blob类型。\"]},\"2362\":{\"h\":\"3. debug：文件大小的限制\",\"t\":[\"MySQL配置文件中，会对数据的大小进行限制，默认是1M。\",\"如果上传报错：xxx too large，就修改配置文件，\",\"[mysqld] max_allowed_packet=16M \"]},\"2363\":{\"h\":\"4. 相关方法\",\"t\":[\"setBlob：插入Blob类型\",\"getBlob：获取Blob类型的数据\"]},\"2364\":{\"h\":\"5. 示例：向数据表插入Blob类型\",\"t\":[\"public void testInsert() throws Exception{ //1.使用封装好的JDBCUtiles获取连接对象 Connection conn = JDBCUtils.getConnection(); //2.设置SQL，获取PreparedStatement对象并给占位符赋值 String sql = \\\"insert into customers(name,email,birth,photo)values(?,?,?,?)\\\"; PreparedStatement ps = conn.prepareStatement(sql); ps.setObject(1,\\\"袁浩\\\"); ps.setObject(2, \\\"yuan@qq.com\\\"); ps.setObject(3,\\\"1992-09-08\\\"); //2.1 创建文件输入流 FileInputStream is = new FileInputStream(new File(\\\"girl.jpg\\\")); //2.2 调用setBlob方法,将文件输入流作为Blob类型插入数据表 ps.setBlob(4, is); //3.执行插入 ps.execute(); //4.关闭资源(数据库连接资源和文件流资源) JDBCUtils.closeResource(conn, ps); } \",\"修改Blob类型的字段：和添加的步骤一样，只是SQL语句变成了Updata\",\"删除Blob类型的字段：和删除普通字段的操作一样。\"]},\"2365\":{\"h\":\"6. 示例：从数据表中读取Blob类型字段\",\"t\":[\"以下代码省去了try...catch\",\"public void testQuery(){ //1.使用封装好的JDBCUtiles获取连接对象 Connection conn = JDBCUtils.getConnection(); //2.设置SQL,获取PreparedStatement对象并给占位符赋值 String sql = \\\"select id,name,email,birth,photo from customers where id = ?\\\"; PreparedStatement ps = conn.prepareStatement(sql); ps.setInt(1, 21); //3.执行查询,并返回结果集 ResultSet rs = ps.executeQuery(); //4.处理结果集 if(rs.next()){ int id = rs.getInt(\\\"id\\\"); String name = rs.getString(\\\"name\\\"); String email = rs.getString(\\\"email\\\"); Date birth = rs.getDate(\\\"birth\\\"); Customer cust = new Customer(id, name, email, birth); System.out.println(cust); //4.1 将Blob类型的字段下载下来，以文件的方式保存在本地 Blob photo = rs.getBlob(\\\"photo\\\"); InputStream is = photo.getBinaryStream(); FileOutputStream fos = new FileOutputStream(\\\"zhangyuhao.jpg\\\"); byte[] buffer = new byte[1024]; int len; while((len = is.read(buffer)) != -1){ fos.write(buffer, 0, len); } } //5. 关闭资源 is.close(); JDBCUtils.closeResource(conn, ps, rs); } \"]},\"2366\":{\"h\":\"1-5. 批量操作\",\"t\":[\"update、delete、select天然就可以批量操作。这里主要指的批量操作是：批量insert（批量插入）。\",\"当需要成批插入或者更新记录时，可以采用Java的批量更新机制，这一机制允许多条语句一次性提交给数据库批量处理。通常情况下比单独提交处理更有效率。\"]},\"2367\":{\"h\":\"1. JDBC的批量处理相关的方法\"},\"2368\":{\"h\":\"1.1 addBatch(String)：积攒SQL语句\",\"t\":[\"添加需要批量处理的SQL语句或是参数；\",\"PreparedStatement.addBath(); \"]},\"2369\":{\"h\":\"1.2 executeBatch()：执行batch\",\"t\":[\"执行批量处理语句；\",\"PreparedStatement.addBath(); \"]},\"2370\":{\"h\":\"1.3 clearBatch():清空batch\",\"t\":[\"清空缓存的数据\",\"PreparedStatement.addBath(); \"]},\"2371\":{\"h\":\"2. 测试数据表\",\"t\":[\"向数据表中插入1百万条数据，数据表结构如下：\",\"CREATE TABLE goods( id INT PRIMARY KEY AUTO_INCREMENT, NAME VARCHAR(20) ); \"]},\"2372\":{\"h\":\"3. 方式1：使用Statement\",\"t\":[\"【消耗400s】\",\"不推荐，每循环一次，就要创建一次SQL\",\"Connection conn = JDBCUtils.getConnection(); Statement st = conn.createStatement(); for(int i = 1;i <= 20000;i++){ String sql = \\\"insert into goods(name) values('name_' + \\\"+ i +\\\")\\\"; st.executeUpdate(sql); } \"]},\"2373\":{\"h\":\"4. 方式2：使用PreparedStatement\",\"t\":[\"【消耗：42s】\",\"使用PreparedStatement，将SQL在循环外面创建。每次循环只是重新为占位符赋值。\",\"Connection conn = JDBCUtils.getConnection(); String sql = \\\"insert into goods(name)values(?)\\\"; PreparedStatement ps = conn.prepareStatement(sql); for(int i = 1;i <= 20000;i++){ ps.setString(1, \\\"name_\\\" + i); ps.executeUpdate(); } long end = System.currentTimeMillis(); System.out.println(\\\"花费的时间为：\\\" + (end - start));//82340 JDBCUtils.closeResource(conn, ps); \"]},\"2374\":{\"h\":\"5. 方式3：使用批处理\",\"t\":[\"【消耗：16s】\",\"方式2，每循环一次，就要executeUpdate一次，跟服务器的交互太频繁。 可以使用批处理的方式，积攒一波SQL然后集中的去连接服务器执行。\"]},\"2375\":{\"h\":\"5.1 开启批处理\",\"t\":[\"首先需要注意：MySQL的驱动要>=5.1.37才支持批处理\",\"其次：mysql服务器默认是关闭批处理的，我们需要通过一个参数，让mysql开启批处理的支持。 ?rewriteBatchedStatements=true 写在配置文件的url后面\"]},\"2376\":{\"h\":\"5.2 code\",\"t\":[\"public void testInsert1() throws Exception{ Connection conn = JDBCUtils.getConnection(); String sql = \\\"insert into goods(name)values(?)\\\"; PreparedStatement ps = conn.prepareStatement(sql); for(int i = 1;i <= 1000000;i++){ ps.setString(1, \\\"name_\\\" + i); //1.“攒”sql ps.addBatch(); if(i % 500 == 0){ //2.执行 ps.executeBatch(); //3.清空 ps.clearBatch(); } } long end = System.currentTimeMillis(); System.out.println(\\\"花费的时间为：\\\" + (end - start)); JDBCUtils.closeResource(conn, ps); } \"]},\"2377\":{\"h\":\"6. 终极方案：批处理+手动提交\",\"t\":[\"【消耗5s】\",\"每执行一次executeBatch，数据库就会自动提交，每提交一次，就要将输入写入数据库一次，比较花时间，可以开启事务，阻止自动提交，等循环执行完所有数据都通过executeBatch传完以后，再统一提交。\",\"以下代码，省略了Exception处理。\",\"public void testInsert3() { Connection conn = JDBCUtils.getConnection(); //设置不允许自动提交数据 conn.setAutoCommit(false); String sql = \\\"insert into goods(name)values(?)\\\"; PreparedStatement ps = conn.prepareStatement(sql); for(int i = 1;i <= 1000000;i++){ ps.setObject(1, \\\"name_\\\" + i); //1.\\\"攒\\\"sql ps.addBatch(); if(i % 500 == 0){ //2.执行batch ps.executeBatch(); //3.清空batch ps.clearBatch(); } } //手动提交数据 conn.commit(); JDBCUtils.closeResource(conn, ps); } \"]},\"2378\":{\"h\":\"1-6. 事务\",\"t\":[\"提示\",\"详见：MySQL事务\"]},\"2379\":{\"h\":\"1. JDBC事务处理方法\",\"t\":[\"以下三个方法都会抛出SQLException异常\"]},\"2380\":{\"h\":\"1.1 setAutoCommit：设置事务的自动提交\",\"t\":[\"参数false表示关闭自动提交，true表示开启（默认）。\",\"Connection.setAutoCommit(boolean autoCommit) \"]},\"2381\":{\"h\":\"1.2 commit：提交事务\",\"t\":[\"Connection.commit() \"]},\"2382\":{\"h\":\"1.3 rollback：回滚事务\",\"t\":[\"Connection.rollback() \"]},\"2383\":{\"h\":\"2. JDBC事务的处理流程\",\"t\":[\"数据一旦提交，就无法回滚了，因此应该将数据库连接，放到数据库更新方法的调用处，进行开启和关闭，而不应该放到数据库连接内部。\",\"同时如果每个操作使用的是自己单独的连接，则无法保证事务，即同一个事务的多个操作必须在同一个连接下，因此数据库的连接和关闭必须放到数据库的操作方法调用处。\"]},\"2384\":{\"h\":\"连接池\",\"t\":[\"当启用了连接池后，关闭连接时，并不是真正的关闭了链接，而是将数据库连接对象放到了联机池中，如果对该数据库连接对象设置了关闭自动提交，就必须在关闭连接前，将设置改回去，以便别的操作使用该数据库连接对象。\"]},\"2385\":{\"h\":\"3. JDBC事务示例\"},\"2386\":{\"h\":\"3.1 添加事务后：更改数据库通用的增删改方法\",\"t\":[\"public void updata(Connection conn,String sql,Object.. args){ PreparedStatement ps = null; try { // 1.获取PreparedStatement的实例 (或：预编译sql语句) ps = conn.prepareStatement(sql); // 2.填充占位符 for (int i = 0; i < args.length; i++) { ps.setObject(i + 1, args[i]); } // 3.执行sql语句 ps.execute(); //该操作执行后并不会提交 } catch (Exception e) { e.printStackTrace(); } finally { // 4.关闭资源:第一个参数设置为null，不要关闭数据库连接 JDBCUtils.closeResource(null, ps); } } \"]},\"2387\":{\"h\":\"3.2 DML操作示例：使用事务\",\"t\":[\"public void testJDBCTransaction() { Connection conn = null; try { // 1.获取数据库连接 conn = JDBCUtils.getConnection(); // 2.开启事务 conn.setAutoCommit(false); // 3.进行数据库操作 String sql1 = \\\"update user_table set balance = balance - 100 where user = ?\\\"; update(conn, sql1, \\\"AA\\\"); // 模拟网络异常 //System.out.println(10 / 0); String sql2 = \\\"update user_table set balance = balance + 100 where user = ?\\\"; update(conn, sql2, \\\"BB\\\"); // 4.若没有异常，则提交事务 conn.commit(); } catch (Exception e) { e.printStackTrace(); // 5.若有异常，则回滚事务 try { conn.rollback(); } catch (SQLException e1) { e1.printStackTrace(); } } finally { try { //6.恢复每次DML操作的自动提交功能：用于连接池 conn.setAutoCommit(true); } catch (SQLException e) { e.printStackTrace(); } //7.关闭连接：将数据库连接关闭 JDBCUtils.closeResource(conn, null, null); } } \"]},\"2388\":{\"h\":\"3. JDBC控制隔离级别\",\"t\":[\"在JDBC中，即JAVA端，也能控制隔离级别，不过实际开发中，比如在框架中，都是通过配置文件进行控制的。\",\"以下两个方法都会抛出SQLException\"]},\"2389\":{\"h\":\"3.1 getTransactionIsolation：获取当前隔离级别\",\"t\":[\"Connection.getTransactionIsolation() \"]},\"2390\":{\"h\":\"3.2 setTransactionIsolation：设置数据库隔离级别\",\"t\":[\"参数是数字，也可以是隔离级别常量，对照如下：\",\"Connection.TRANSACTION_READ_UNCOMMITTED =1\",\"Connection.TRANSACTION_READ_COMMITTED = 2；\",\"Connection.TRANSACTION_REPEATABLE_READ = 3；\",\"Connection.TRANSACTION_SERIALIZABLE = 4；\",\"Connection.setTransactionIsolation(int level) \"]},\"2391\":{\"h\":\"4. JDBC控制隔离级别示例\",\"t\":[\"public void testTransactionSelect() throws Exception{ //1.获取连接对象 Connection conn = JDBCUtils.getConnection(); //2.获取当前连接的隔离级别 System.out.println(conn.getTransactionIsolation()); //3.设置数据库的隔离级别： conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED); //4.取消自动提交数据 conn.setAutoCommit(false); String sql = \\\"select user,password,balance from user_table where user = ?\\\"; //5.调用查询方法 User user = getInstance(conn, User.class, sql, \\\"CC\\\"); System.out.println(user); } \"]},\"2392\":{\"h\":\"1-7. DAO\"},\"2393\":{\"h\":\"Ⅰ. DAO介绍\"},\"2394\":{\"h\":\"1. 说明\",\"t\":[\"DAO：Data Access Object：访问数据信息的类和接口。\",\"本质：就是对JDBC中一些列基本常见的操作的封装。包括了对数据表的CRUD（Create、Retrival、Update、Delete）操作，有时也称作：BaseDAO。\",\"对于具体的数据表（和业务耦合）来说，要先创建相关的数据表操作类，然后继承DAO接口，重写DAO里面的方法，用来专门操作某张表。\"]},\"2395\":{\"h\":\"2. 作用\",\"t\":[\"为了实现功能的模块化，更有利于代码的维护和升级。\"]},\"2396\":{\"h\":\"3. DAO的使用流程\",\"t\":[\"①定义DAO接口：BaseDao，里面包含了所有JDBC的基本操作方法，可自己拿来用\",\"②定义数据表的接口，用来规范数据表的操作，如CustomerDao【可省略】\",\"③创建数据表的实现，用来继承BaseDao接口，并实现CustomerDao接口 额外还需要一个查询结果的储存类，和一个用来连接和关闭资源的JDBC工具类。\"]},\"2397\":{\"h\":\"Ⅱ. DAO的实现类\"},\"2398\":{\"h\":\"1. BaseDao设计\"},\"2399\":{\"h\":\"1.1 类\",\"t\":[\"设置为abstract类，只能继承和实现，不能实例化\"]},\"2400\":{\"h\":\"1.2 需要实现的基本数据表操作\",\"t\":[\"update：DML，通用的增删改操作【可使用事务】\",\"getInstance：用来返回一条记录的通用查询操作【可使用事务】\",\"getForList：用来返回数据表中多条记录构成的集合【可使用事务】\",\"getValue：用于特殊查询的通用方法【可使用事务】\"]},\"2401\":{\"h\":\"2. 需要实现的特殊操作\",\"t\":[\"在getForList和getValue方法中，我们需要将查询到的结果，放到一个ORM类中（该类同时也表名）。\"]},\"2402\":{\"h\":\"2.1 方案1：定义ORM类的属性\",\"t\":[\"在数据表的实现类中，定义当前类操作的ORM类名，作为属性，查询的时候传递该属性。\",\"这个方法过于繁琐，每个实现类中都要定义一次。\"]},\"2403\":{\"h\":\"2.2 方案2：通过泛型传递ORM类名\",\"t\":[\"在数据表实现类继承BaseDao时，直接指定BaseDao的泛型为ORM类名。\",\"然后在BaseDao类中，获取该泛型作为属性clazz的值。\",\"在需要使用ORM类的地方，直接使用clazz属性即可，省去了传递Class<T> clazz参数，具体获取方式见代码\"]},\"2404\":{\"h\":\"3. JDBC工具类：JDBCUtils\",\"t\":[\"用于操作数据库的工具类：JDBCUtils\",\"不要将这个类中的方法都放到BaseDao中。而是独作为一个额外的工具类，因为设计到事务操作，需要将数据库的链接和关闭操作再数据表实现类的调用处执行。\",\"该类实现的基本功能为：\",\"getConnection：获取数据库连接对象\",\"closeResource(Connection conn,Statement ps)：关闭数据库连接资源和Statement资源\",\"closeResource(Connection conn,Statement ps,ResultSet rs)：额外多关闭一个查询结果集资源\"]},\"2405\":{\"h\":\"4. BaseDao.java代码参考\",\"t\":[\"public abstract class BaseDAO<T> { //============================== 1、获取泛型值 ========================= private Class<T> clazz = null; { //获取当前BaseDAO的子类继承的父类中的泛型 Type genericSuperclass = this.getClass().getGenericSuperclass(); ParameterizedType paramType = (ParameterizedType) genericSuperclass; //获取了父类的泛型参数 Type[] typeArguments = paramType.getActualTypeArguments(); clazz = (Class<T>) typeArguments[0];//泛型的第一个参数 } //=========================== 2、update：DML方法 ====================== public int update(Connection conn, String sql, Object... args) { PreparedStatement ps = null; try { // 1.预编译sql语句，返回PreparedStatement的实例 ps = conn.prepareStatement(sql); // 2.填充占位符 for (int i = 0; i < args.length; i++) { ps.setObject(i + 1, args[i]);// 小心参数声明错误！！ } // 3.执行 return ps.executeUpdate(); } catch (Exception e) { e.printStackTrace(); } finally { // 4.资源的关闭 JDBCUtils.closeResource(null, ps); } return 0; } //============== 3、getInstance：返回一条记录的DQL方法 ================= public T getInstance(Connection conn, String sql, Object... args) { PreparedStatement ps = null; ResultSet rs = null; try { ps = conn.prepareStatement(sql); for (int i = 0; i < args.length; i++) { ps.setObject(i + 1, args[i]); } rs = ps.executeQuery(); // 获取结果集的元数据 :ResultSetMetaData ResultSetMetaData rsmd = rs.getMetaData(); // 通过ResultSetMetaData获取结果集中的列数 int columnCount = rsmd.getColumnCount(); if (rs.next()) { T t = clazz.newInstance(); // 处理结果集一行数据中的每一个列 for (int i = 0; i < columnCount; i++) { // 获取列值 Object columValue = rs.getObject(i + 1); // 获取每个列的列名 String columnLabel = rsmd.getColumnLabel(i + 1); // 给t对象指定的columnName属性，赋值为columValue：通过反射 Field field = clazz.getDeclaredField(columnLabel); field.setAccessible(true); field.set(t, columValue); } return t; } } catch (Exception e) { e.printStackTrace(); } finally { JDBCUtils.closeResource(null, ps, rs); } return null; } //============== 4、getForList：返回多条记录的DQL方法 ================= public List<T> getForList(Connection conn, String sql, Object... args) { PreparedStatement ps = null; ResultSet rs = null; try { ps = conn.prepareStatement(sql); for (int i = 0; i < args.length; i++) { ps.setObject(i + 1, args[i]); } rs = ps.executeQuery(); // 获取结果集的元数据 :ResultSetMetaData ResultSetMetaData rsmd = rs.getMetaData(); // 通过ResultSetMetaData获取结果集中的列数 int columnCount = rsmd.getColumnCount(); // 创建集合对象 ArrayList<T> list = new ArrayList<T>(); while (rs.next()) { T t = clazz.newInstance(); // 处理结果集一行数据中的每一个列:给t对象指定的属性赋值 for (int i = 0; i < columnCount; i++) { // 获取列值 Object columValue = rs.getObject(i + 1); // 获取每个列的列名 String columnLabel = rsmd.getColumnLabel(i + 1); // 给t对象指定的columnName属性，赋值为columValue：通过反射 Field field = clazz.getDeclaredField(columnLabel); field.setAccessible(true); field.set(t, columValue); } list.add(t); } return list; } catch (Exception e) { e.printStackTrace(); } finally { JDBCUtils.closeResource(null, ps, rs); } return null; } //============== 5、getValue：查询特殊值的DQL方法 ================= public <E> E getValue(Connection conn,String sql,Object...args){ PreparedStatement ps = null; ResultSet rs = null; try { ps = conn.prepareStatement(sql); for(int i = 0;i < args.length;i++){ ps.setObject(i + 1, args[i]); } rs = ps.executeQuery(); if(rs.next()){ return (E) rs.getObject(1); } } catch (SQLException e) { e.printStackTrace(); }finally{ JDBCUtils.closeResource(null, ps, rs); } return null; } } \"]},\"2406\":{\"h\":\"Ⅲ. BaseDao的使用\"},\"2407\":{\"h\":\"1. 创建数据表实现接口：CustomerDAO\",\"t\":[\"根据业务需求编写接口\",\"public interface CustomerDAO{ //1.插入数据,通过ORM类 Customer void insert(Connection conn,Customer cust); //2.针对指定的id，删除表中的一条记录 void deleteById(Connection conn,int id); //3.针对 ORM对象，去修改数据表中指定的记录 void update(Connection conn,Customer cust); //4.针对指定的id查询得到对应的Customer对象 Customer getCustomerById(Connection conn,int id); //5.查询表中的所有记录构成的集合 List<Customer> getAll(Connection conn); //6.返回数据表中的数据的条目数 Long getCount(Connection conn); //7.返回数据表中最大的生日 Date getMaxBirth(Connection conn); } \"]},\"2408\":{\"h\":\"2. 创建数据表实现类：CustomerDAOImpl\",\"t\":[\"public class CustomerDAOImpl extends BaseDAO<Customer> implements CustomerDAO{ //1.插入数据,通过ORM类 Customer public void insert(Connection conn, Customer cust) { String sql = \\\"insert into customers(name,email,birth)values(?,?,?)\\\"; update(conn, sql,cust.getName(),cust.getEmail(),cust.getBirth()); } //2.针对指定的id，删除表中的一条记录 public void deleteById(Connection conn, int id) { String sql = \\\"delete from customers where id = ?\\\"; update(conn, sql, id); } //3.针对 ORM对象，去修改数据表中指定的记录 public void update(Connection conn, Customer cust) { String sql = \\\"update customers set name = ?,email = ?,birth = ? where id = ?\\\"; update(conn, sql,cust.getName(),cust.getEmail(),cust.getBirth(),cust.getId()); } //4.针对指定的id查询得到对应的Customer对象 public Customer getCustomerById(Connection conn, int id) { String sql = \\\"select id,name,email,birth from customers where id = ?\\\"; Customer customer = getInstance(conn, sql,id); return customer; } //5.查询表中的所有记录构成的集合 public List<Customer> getAll(Connection conn) { String sql = \\\"select id,name,email,birth from customers\\\"; List<Customer> list = getForList(conn, sql); return list; } //6.返回数据表中的数据的条目数 public Long getCount(Connection conn) { String sql = \\\"select count(*) from customers\\\"; return getValue(conn, sql); } //7.返回数据表中最大的生日 public Date getMaxBirth(Connection conn) { String sql = \\\"select max(birth) from customers\\\"; return getValue(conn, sql); } } \"]},\"2409\":{\"h\":\"3. 使用CustomerDAOImpl\",\"t\":[\"可以创建一个CustomerDAOImplTest用来测试CustomerDAOImpl\",\"public class CustomerDAOImplTest { private CustomerDAOImpl dao = new CustomerDAOImpl(); //1.测试添加 public void testInsert() { Connection conn = null; try { conn = JDBCUtils.getConnection(); Customer cust = new Customer(1, \\\"于小飞\\\", \\\"xiaofei@126.com\\\",new Date(43534646435L)); dao.insert(conn, cust); System.out.println(\\\"添加成功\\\"); } catch (Exception e) { e.printStackTrace(); }finally{ JDBCUtils.closeResource(conn, null); } } //2.测试删除 public void testDeleteById() { Connection conn = null; try { conn = JDBCUtils.getConnection(); dao.deleteById(conn, 13); System.out.println(\\\"删除成功\\\"); } catch (Exception e) { e.printStackTrace(); }finally{ JDBCUtils.closeResource(conn, null); } } //3.测试更新 public void testUpdateConnectionCustomer() { Connection conn = null; try { conn = JDBCUtils.getConnection(); Customer cust = new Customer(18,\\\"贝多芬\\\",\\\"beiduofen@126.com\\\",new Date(453465656L)); dao.update(conn, cust); System.out.println(\\\"修改成功\\\"); } catch (Exception e) { e.printStackTrace(); }finally{ JDBCUtils.closeResource(conn, null); } } //4.测试单行数据查询 public void testGetCustomerById() { Connection conn = null; try { conn = JDBCUtils.getConnection(); Customer cust = dao.getCustomerById(conn, 19); System.out.println(cust); } catch (Exception e) { e.printStackTrace(); }finally{ JDBCUtils.closeResource(conn, null); } } //5.测试多行数据查询 public void testGetAll() { Connection conn = null; try { conn = JDBCUtils.getConnection(); List<Customer> list = dao.getAll(conn); list.forEach(System.out::println); System.out.println(\\\"\\\"); } catch (Exception e) { e.printStackTrace(); }finally{ JDBCUtils.closeResource(conn, null); } } //6.测试特殊查询：获取数据表的count public void testGetCount() { Connection conn = null; try { conn = JDBCUtils.getConnection(); Long count = dao.getCount(conn); System.out.println(\\\"表中的记录数为：\\\" + count); } catch (Exception e) { e.printStackTrace(); }finally{ JDBCUtils.closeResource(conn, null); } } //7.测试特殊查询：获取最大的生日 public void testGetMaxBirth() { Connection conn = null; try { conn = JDBCUtils.getConnection(); Date maxBirth = dao.getMaxBirth(conn); System.out.println(\\\"最大的生日为：\\\" + maxBirth); } catch (Exception e) { e.printStackTrace(); }finally{ JDBCUtils.closeResource(conn, null); } } } \"]},\"2410\":{\"h\":\"1-8. 数据库连接池\"},\"2411\":{\"h\":\"Ⅰ. 连接池介绍\"},\"2412\":{\"h\":\"1. JDBC数据连接池的必要性\"},\"2413\":{\"h\":\"1.1 在使用开发基于数据库的web程序时，传统的模式基本是按以下步骤：\",\"t\":[\"在主程序（如servlet、beans）中建立数据库连接\",\"进行sql操作\",\"断开数据库连接\"]},\"2414\":{\"h\":\"1.2 这种模式开发，存在的问题:\",\"t\":[\"普通的JDBC数据库连接使用 数据库驱动来获取，每次向数据库建立连接的时候都要将 Connection 加载到内存中，再验证用户名和密码(得花费0.05s～1s的时间)。需要数据库连接的时候，就向数据库要求一个，执行完成后再断开连接。 \",\"这样的方式将会消耗大量的资源和时间。\",\"数据库的连接资源并没有得到很好的重复利用。若同时有几百人甚至几千人在线，频繁的进行数据库连接操作将占用很多的系统资源，严重的甚至会造成服务器的崩溃。\",\"对于每一次数据库连接，使用完后都得断开。否则，如果程序出现异常而未能关闭，将会导致数据库系统中的内存泄漏（未关闭数据库连接，导致连接一直存在，最终将导致重启数据库。\",\"这种开发不能控制被创建的连接对象数，系统资源会被毫无顾及的分配出去，如连接过多，也可能导致内存泄漏，服务器崩溃。\"]},\"2415\":{\"h\":\"2. 数据库连接池技术介绍\",\"t\":[\"为解决传统开发中的数据库连接问题，可以采用数据库连接池技术。\"]},\"2416\":{\"h\":\"2.1 数据库连接池的基本思想\",\"t\":[\"就是为数据库连接建立一个“缓冲池”。预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从“缓冲池”中取出一个，使用完毕之后再放回去。\",\"数据库连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个。\"]},\"2417\":{\"h\":\"2.2 工作方式\",\"t\":[\"数据库连接池在初始化时将创建一定数量的数据库连接放到连接池中，这些数据库连接的数量是由最小数据库连接数来设定的。无论这些数据库连接是否被使用，连接池都将一直保证至少拥有这么多的连接数量。连接池的最大数据库连接数量限定了这个连接池能占有的最大连接数，当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列中。\",\"1-8-1\"]},\"2418\":{\"h\":\"3. 数据库连接池工作原理\",\"t\":[\"连接数据库：从连接池拿出一个连接对象\",\"断开数据库：将连接对象放回连接池\",\"1-8-2\"]},\"2419\":{\"h\":\"4. 数据库连接池的优点\",\"t\":[\"资源重用：由于数据库连接得以重用，避免了频繁创建，释放连接引起的大量性能开销。在减少系统消耗的基础上，另一方面也增加了系统运行环境的平稳性。\",\"更快的系统反应速度：数据库连接池在初始化过程中，往往已经创建了若干数据库连接置于连接池中备用。此时连接的初始化工作均已完成。对于业务请求处理而言，直接利用现有可用连接，避免了数据库连接初始化和释放过程的时间开销，从而减少了系统的响应时间\",\"新的资源分配手段：对于多应用共享同一数据库的系统而言，可在应用层通过数据库连接池的配置，实现某一应用最大可用数据库连接数的限制，避免某一应用独占所有的数据库资源\",\"统一的连接管理，避免数据库连接泄漏：在较为完善的数据库连接池实现中，可根据预先的占用超时设定，强制回收被占用连接，从而避免了常规数据库连接操作中可能出现的资源泄露\"]},\"2420\":{\"h\":\"5. 开源的数据库连接池技术\",\"t\":[\"JDBC 的数据库连接池使用 javax.sql.DataSource 来表示，DataSource 只是一个接口，该接口通常由服务器(Weblogic, WebSphere, Tomcat)提供实现，也有一些开源组织提供实现。\",\"DBCP 是Apache提供的数据库连接池。tomcat 服务器自带dbcp数据库连接池。速度相对c3p0较快，但因自身存在BUG，Hibernate3已不再提供支持。\",\"C3P0 是一个开源组织提供的一个数据库连接池，速度相对较慢，稳定性还可以。hibernate官方推荐使用\",\"Proxool 是sourceforge下的一个开源项目数据库连接池，有监控连接池状态的功能，稳定性较c3p0差一点\",\"BoneCP 是一个开源组织提供的数据库连接池，速度快\",\"Druid 是阿里提供的数据库连接池，据说是集DBCP 、C3P0 、Proxool 优点于一身的数据库连接池，但是速度不确定是否有BoneCP快【常用】\",\"DataSource用来取代DriverManager来获取Connection，获取速度快，同时可以大幅度提高数据库访问速度。\"]},\"2421\":{\"h\":\"注意事项\",\"t\":[\"数据源和数据库连接不同，数据源无需创建多个，它是产生数据库连接的工厂，因此整个应用只需要一个数据源即可。\",\"当数据库访问结束后，程序还是像以前一样关闭数据库连接：conn.close(); 但conn.close()并没有关闭数据库的物理连接，它仅仅把数据库连接释放，归还给了数据库连接池。\"]},\"2422\":{\"h\":\"Ⅱ. Druid：德鲁伊\",\"t\":[\"Druid是阿里巴巴开源平台上一个数据库连接池实现，它结合了C3P0、DBCP、Proxool等DB池的优点，同时加入了日志监控，可以很好的监控DB池连接和SQL的执行情况，可以说是针对监控而生的DB连接池，可以说是目前最好的连接池之一。\"]},\"2423\":{\"h\":\"1. 加载驱动（jar包）\",\"t\":[\"下载页\",\"github页\",\"下载jar包，并将jar包导入项目\"]},\"2424\":{\"h\":\"2. 使用德鲁伊\",\"t\":[\"只考虑使用配置文件获取Druid连接池的方法，如下：\",\"...... import javax.sql.DataSource; import com.alibaba.druid.pool.DruidDataSourceFactory; public void getConnection() throws Exception{ Properties pros = new Properties(); InputStream is = ClassLoader.getSystemClassLoader() .getResourceAsStream(\\\"druid.properties\\\"); //1.加载配置文件 pros.load(is); //2.使用工厂方法，创建连接池，参数是配置文件输入流 DataSource source = DruidDataSourceFactory.createDataSource(pros); //3.获取数据库连接对象, Connection conn = source.getConnection(); } \"]},\"2425\":{\"h\":\"3. 配置文件\",\"t\":[\"src/druid.properties\",\"url=jdbc:mysql://localhost:3306/test?rewriteBatchedStatements=true username=root password=123456 driverClassName=com.mysql.jdbc.Driver initialSize=10 //初始化数据库连接池时连接的数量 maxActive=20 //最大连接池数量 maxWait=1000 //获取连接时最大等待时间，单位毫秒。 filters=wall //跟日志相关的配置 \"]},\"2426\":{\"h\":\"4. 配置项\",\"t\":[\"配置项如下：\",\"配置\",\"缺省\",\"说明\",\"name\",\"配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。 如果没有配置，将会生成一个名字，格式是：”DataSource-” + System.identityHashCode(this)\",\"url\",\"连接数据库的url，不同数据库不一样。例如：mysql : jdbc:mysql://10.20.153.104:3306/druid2 oracle : jdbc:oracle:thin:@10.20.149.85:1521:ocnauto\",\"username\",\"连接数据库的用户名\",\"password\",\"连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细看这里\",\"driverClassName\",\"根据url自动识别 这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)\",\"initialSize\",\"0\",\"初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时\",\"maxActive\",\"8\",\"最大连接池数量\",\"maxIdle\",\"8\",\"已经不再使用，配置了也没效果\",\"minIdle\",\"最小连接池数量\",\"maxWait\",\"获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。\",\"poolPreparedStatements\",\"false\",\"是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。\",\"maxOpenPreparedStatements\",\"-1\",\"要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100\",\"validationQuery\",\"用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。\",\"testOnBorrow\",\"true\",\"申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。\",\"testOnReturn\",\"false\",\"归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能\",\"testWhileIdle\",\"false\",\"建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。\",\"timeBetweenEvictionRunsMillis\",\"有两个含义： 1)Destroy线程会检测连接的间隔时间2)testWhileIdle的判断依据，详细看testWhileIdle属性的说明\",\"numTestsPerEvictionRun\",\"不再使用，一个DruidDataSource只支持一个EvictionRun\",\"minEvictableIdleTimeMillis\",\"connectionInitSqls\",\"物理连接初始化的时候执行的sql\",\"exceptionSorter\",\"根据dbType自动识别 当数据库抛出一些不可恢复的异常时，抛弃连接\",\"filters\",\"属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall\",\"proxyFilters\",\"类型是List，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系\"]},\"2427\":{\"h\":\"5. JDBCUtils\",\"t\":[\"连接池应该放到之前建立的JDBC功能类：JDBCUtils中。\",\"private static DataSource source; static{ try { Properties pros = new Properties(); InputStream is = ClassLoader.getSystemClassLoader() .getResourceAsStream(\\\"druid.properties\\\"); pros.load(is); source = DruidDataSourceFactory.createDataSource(pros); } catch (Exception e) { e.printStackTrace(); } } public static Connection getConnection3() throws SQLException{ Connection conn = source.getConnection(); return conn; //返回一个数据库连接，从池子里拿出一个数据库连接 } \"]},\"2428\":{\"h\":\"6. 使用示例\",\"t\":[\"public void testGetCustomerById() { Connection conn = null; try { conn = JDBCUtils.getConnection3(); Customer cust = dao.getCustomerById(conn, 19); System.out.println(cust); } catch (Exception e) { e.printStackTrace(); }finally{ JDBCUtils.closeResource(conn, null); } } \"]},\"2429\":{\"h\":\"1-9. DBUtils\"},\"2430\":{\"h\":\"Ⅰ. Apache-DBUtils\"},\"2431\":{\"h\":\"1. DBUtils介绍\",\"t\":[\"DBUtils就跟之前封装的Dao一样，这个是Apache提供的。\",\"commons-dbutils 是 Apache 组织提供的一个开源 JDBC工具类库，它是对JDBC的简单封装，学习成本极低，并且使用dbutils能极大简化jdbc编码的工作量，同时也不会影响程序的性能。\"]},\"2432\":{\"h\":\"2. 驱动\",\"t\":[\"下载包并导入。\"]},\"2433\":{\"h\":\"3. API介绍\",\"t\":[\"org.apache.commons.dbutils.QueryRunner【BaseDao】\",\"org.apache.commons.dbutils.ResultSetHandler【处理不同的查询结果集，由不同子类实现】\",\"工具类：org.apache.commons.dbutils.DbUtils【JDBCUtils，但不能连接】\"]},\"2434\":{\"h\":\"4. DbUtils类：工具类API（取代自己写的JDBCUtils）\",\"t\":[\"提供如关闭连接、装载JDBC驱动程序等常规工作的工具类，里面的所有方法都是静态的。主要方法如下：\",\"public static void close(…) throws java.sql.SQLException： DbUtils类提供了三个重载的关闭方法。这些方法检查所提供的参数是不是NULL，如果不是的话，它们就关闭Connection、Statement和ResultSet。\",\"public static void closeQuietly(…): 这一类方法不仅能在Connection、Statement和ResultSet为NULL情况下避免关闭，还能隐藏一些在程序中抛出的SQLEeception。\",\"public static void commitAndClose(Connection conn)throws SQLException： 用来提交连接的事务，然后关闭连接\",\"public static void commitAndCloseQuietly(Connection conn)： 用来提交连接，然后关闭连接，并且在关闭连接时不抛出SQL异常。\",\"public static void rollback(Connection conn)throws SQLException：允许conn为null，因为方法内部做了判断\",\"public static void rollbackAndClose(Connection conn)throws SQLException\",\"rollbackAndCloseQuietly(Connection)\",\"public static boolean loadDriver(java.lang.String driverClassName)：这一方装载并注册JDBC驱动程序，如果成功就返回true。使用该方法，你不需要捕捉这个异常ClassNotFoundException。\"]},\"2435\":{\"h\":\"5. QueryRunner：CURD的API（取代自己写的BaseDao）\",\"t\":[\"该类简单化了SQL查询，它与ResultSetHandler组合在一起使用可以完成大部分的数据库操作，能够大大减少编码量。\",\"QueryRunner类提供了两个构造器： \",\"默认的构造器\",\"需要一个 javax.sql.DataSource 来作参数的构造器\",\"QueryRunner类的主要方法： \",\"更新 \",\"public int update(Connection conn, String sql, Object... params) throws SQLException:用来执行一个更新（插入、更新或删除）操作。\",\"......\",\"插入 \",\"public <T> T insert(Connection conn,String sql,ResultSetHandler<T> rsh, Object... params) throws SQLException：只支持INSERT语句，其中 rsh - The handler used to create the result object from the ResultSet of auto-generated keys. 返回值: An object generated by the handler.即自动生成的键值\",\"....\",\"批处理 \",\"public int[] batch(Connection conn,String sql,Object params)throws SQLException： INSERT, UPDATE, or DELETE语句\",\"public <T> T insertBatch(Connection conn,String sql,ResultSetHandler<T> rsh,Object params)throws SQLException：只支持INSERT语句\",\".....\",\"查询 \",\"public Object query(Connection conn, String sql, ResultSetHandler rsh,Object... params) throws SQLException：执行一个查询操作，在这个查询中，对象数组中的每个元素值被用来作为查询语句的置换参数。该方法会自行处理 PreparedStatement 和 ResultSet 的创建和关闭。\",\"......\"]},\"2436\":{\"h\":\"6. ResultSetHandler接口及实现类\",\"t\":[\"该接口用于处理 java.sql.ResultSet，将数据按要求转换为另一种形式。ResultSetHandler 接口提供了一个单独的方法：Object handle (java.sql.ResultSet .rs)。\",\"接口的主要实现类：\",\"ArrayHandler：把结果集中的第一行数据转成对象数组。\",\"ArrayListHandler：把结果集中的每一行数据都转成一个数组，再存放到List中。\",\"BeanHandler：将结果集中的第一行数据封装到一个对应的JavaBean实例中。\",\"BeanListHandler：将结果集中的每一行数据都封装到一个对应的JavaBean实例中，存放到List里。\",\"ColumnListHandler：将结果集中某一列的数据存放到List中。\",\"KeyedHandler(name)：将结果集中的每一行数据都封装到一个Map里，再把这些map再存到一个map里，其key为指定的key。\",\"MapHandler：将结果集中的第一行数据封装到一个Map里，key是列名，value就是对应的值。\",\"MapListHandler：将结果集中的每一行数据都封装到一个Map里，然后再存放到List\",\"ScalarHandler：查询单个值对象\"]},\"2437\":{\"h\":\"Ⅱ. 使用示例\"},\"2438\":{\"h\":\"1. 添加\",\"t\":[\"public void testInsert() throws Exception { QueryRunner runner = new QueryRunner(); Connection conn = JDBCUtils.getConnection3(); String sql = \\\"insert into customers(name,email,birth)values(?,?,?)\\\"; int count = runner.update(conn, sql, \\\"何成飞\\\", \\\"he@qq.com\\\", \\\"1992-09-08\\\"); System.out.println(\\\"添加了\\\" + count + \\\"条记录\\\"); JDBCUtils.closeResource(conn, null); } \"]},\"2439\":{\"h\":\"2. 删除\",\"t\":[\"public void testDelete() throws Exception { QueryRunner runner = new QueryRunner(); Connection conn = JDBCUtils.getConnection3(); String sql = \\\"delete from customers where id < ?\\\"; int count = runner.update(conn, sql,3); System.out.println(\\\"删除了\\\" + count + \\\"条记录\\\"); JDBCUtils.closeResource(conn, null); } \"]},\"2440\":{\"h\":\"3. 查询一条记录\",\"t\":[\"public void testQueryInstance() throws Exception{ QueryRunner runner = new QueryRunner(); Connection conn = JDBCUtils.getConnection3(); String sql = \\\"select id,name,email,birth from customers where id = ?\\\"; BeanHandler<Customer> handler = new BeanHandler<>(Customer.class); Customer customer = runner.query(conn, sql, handler, 23); System.out.println(customer); JDBCUtils.closeResource(conn, null); } \"]},\"2441\":{\"h\":\"4. 查询多条记录构成的集合\",\"t\":[\"public void testQueryList() throws Exception{ QueryRunner runner = new QueryRunner(); Connection conn = JDBCUtils.getConnection3(); String sql = \\\"select id,name,email,birth from customers where id < ?\\\"; BeanListHandler<Customer> handler = new BeanListHandler<>(Customer.class); List<Customer> list = runner.query(conn, sql, handler, 23); list.forEach(System.out::println); JDBCUtils.closeResource(conn, null); } \"]},\"2442\":{\"h\":\"5. 自定义ResultSetHandler的实现类\",\"t\":[\"public void testQueryInstance1() throws Exception{ QueryRunner runner = new QueryRunner(); Connection conn = JDBCUtils.getConnection3(); String sql = \\\"select id,name,email,birth from customers where id = ?\\\"; ResultSetHandler<Customer> handler = new ResultSetHandler<Customer>() { public Customer handle(ResultSet rs) throws SQLException { System.out.println(\\\"handle\\\"); if(rs.next()){ int id = rs.getInt(\\\"id\\\"); String name = rs.getString(\\\"name\\\"); String email = rs.getString(\\\"email\\\"); Date birth = rs.getDate(\\\"birth\\\"); return new Customer(id, name, email, birth); } return null; } }; Customer customer = runner.query(conn, sql, handler, 23); System.out.println(customer); JDBCUtils.closeResource(conn, null); } \"]},\"2443\":{\"h\":\"6. 查询类似于最大的，最小的，平均的，总和，个数相关的数据\",\"t\":[\"public void testQueryValue() throws Exception{ QueryRunner runner = new QueryRunner(); Connection conn = JDBCUtils.getConnection3(); //测试一： String sql = \\\"select count(*) from customers where id < ?\\\"; ScalarHandler handler = new ScalarHandler(); long count = (long) runner.query(conn, sql, handler, 20); System.out.println(count); //测试二： String sql = \\\"select max(birth) from customers\\\"; ScalarHandler handler = new ScalarHandler(); Date birth = (Date) runner.query(conn, sql, handler); System.out.println(birth); JDBCUtils.closeResource(conn, null); } \"]},\"2444\":{\"h\":\"2-1. 基本使用\"},\"2445\":{\"h\":\"Ⅰ. Tomcat介绍\"},\"2446\":{\"h\":\"1. web服务器\",\"t\":[\"本质是安装了服务器软件的计算机。\",\"服务器软件：接收用户的请求，处理请求，调用服务器资源，做出响应，在web服务器软件中，可以部署web项目，让用户通过浏览器来访问这些项目。\",\"Web服务器是安装在服务器端的一款软件，本质上Web服务器是一个应用程序，对HTTP协议的操作进行封装，使得程序员不必直接对协议进行操作，让Web开发更加便捷。\",\"相关软件：Tomcat（最常用）\"]},\"2447\":{\"h\":\"2. 资源分类\",\"t\":[\"静态资源：所有用户访问后，得到的结果都是一样的，称为静态资源.静态资源可以直接被浏览器解析 \",\"如： html,css,JavaScript\",\"动态资源:每个用户访问相同资源后，得到的结果可能不一样。称为动态资源。动态资源被访问后，需要先转换为静态资源，在返回给浏览器 \",\"如：servlet/jsp,php,asp....\"]},\"2448\":{\"h\":\"3. Web服务器软件使用步骤\",\"t\":[\"准备静态资源\",\"下载安装Web服务器软件\",\"将静态资源部署到Web服务器上\",\"启动Web服务器使用浏览器访问对应的资源\"]},\"2449\":{\"h\":\"4. 网络通信三要素\",\"t\":[\"IP：电子设备(计算机)在网络中的唯一标识。\",\"端口：应用程序在计算机中的唯一标识。 0~65536\",\"传输协议：规定了数据传输的规则\",\"tcp：安全协议，三次握手。 速度稍慢\",\"udp：不安全协议。 速度快\"]},\"2450\":{\"h\":\"5. Tomcat\",\"t\":[\"Tomcat是一个开源免费的轻量级Web服务器，支持Servlet/JSP少量JavaEE规范。Tomcat也被称为Web容器、Servlet容器，Servlet需要依赖Tomcat才能运行。\",\"官网\",\"2-1-1\"]},\"2451\":{\"h\":\"Ⅱ. 基本开发使用\",\"t\":[\"环境：Windows系统上的开发环境\"]},\"2452\":{\"h\":\"1. 下载\",\"t\":[\"下载地址\",\"版本选择：8.5以上\",\"8.5下载地址直达\",\"文件选择：Core下的zip包即可（Linux选tar.gz）\",\"源码：Source Code Distributions下的即为java源码。\"]},\"2453\":{\"h\":\"2. 安装与卸载\",\"t\":[\"安装：该软件是绿色软件，不用安装，解压即可使用。\",\"卸载：删除即为卸载。\"]},\"2454\":{\"h\":\"3. 目录结构\",\"t\":[\"2-1-2\"]},\"2455\":{\"h\":\"4. 启动\",\"t\":[\"前提：主机上运行着jdk，且配置好了JAVA_HOME，不然命令窗口会一闪而过，启动失败。\",\"双击bin/startup.bat即可启动，启动后会弹出dos窗口，常驻\",\"注意：因为有端口占用，只能启动一个Tomcat，除非重新进行端口配置。\"]},\"2456\":{\"h\":\"5. 关闭\",\"t\":[\"正常关闭：在程序的dos端口按ctrl c【推荐】\",\"正常关闭：双击bin/shutdown.bat\",\"强制关闭：关闭dos窗口，不推荐，某些destory方法无法生效。\"]},\"2457\":{\"h\":\"6. 端口配置\",\"t\":[\"Tomcat默认的端口是8080，要想修改Tomcat启动的端口号，需要修改 conf/server.xml\",\"HTTP协议默认端口号为80，如果将Tomcat端口号改为80，则将来访问Tomcat时，将不用输入端口号。 同样，https协议的默认端口号是443.\",\"2-1-3\"]},\"2458\":{\"h\":\"7. debug\"},\"2459\":{\"h\":\"7.1 控制台乱码\",\"t\":[\"原因：命令行默认是GBK编码，Tomcat模式是UTF8；\",\"IDEA中：将控制台改为UTF8。\",\"或配置修改：\"]},\"2460\":{\"h\":\"7.2 端口冲突\",\"t\":[\"报错：Address already in use:bind，端口以备占用\",\"解决：关闭占用端口的软件，或修改Tomcat的端口。\",\"netstat -ano //查看进程，会显示端口号和pid，根据pid找到对应的进程 \"]},\"2461\":{\"h\":\"7.3 启动时，窗口一闪而过\",\"t\":[\"原因：找不到JDK环境。\",\"解决：检查JAVA_HOME环境变量是否正确配置\"]},\"2462\":{\"h\":\"Ⅲ. 手动部署\"},\"2463\":{\"h\":\"1. 访问Tomcat服务器\",\"t\":[\"访问地址是ip地址、域名或localhost，端口号是8080（默认） 地址：http://ipxx:8080 如：http://localhost:8080\"]},\"2464\":{\"h\":\"2. 在webapps下部署\",\"t\":[\"Tomcat的\\\\webapps目录是用来部署项目的。\"]},\"2465\":{\"h\":\"2.1 在webapps下创建项目\",\"t\":[\"在Tomcat目录下的webapps目录下创建一个目录，该目录就是一个独立的项目。\",\"项目目录下，需要再创建一个必备的目录：WEB-INF（名称固定）。\"]},\"2466\":{\"h\":\"2.2 在其他目录下创建项目，并通过war包部署\",\"t\":[\"将项目打成一个war包，再将war包放置到webapps目录下。\",\"war包会自动解压缩（war包和zip包差不多）。\"]},\"2467\":{\"h\":\"2.3 访问项目\",\"t\":[\"http://localhost:8080/项目目录/目标文件\",\"如：项目目录是test1，要访问的文件是index.html\",\"Tomcat默认访问index.* 的\",\"http://localhost:8080/test1/ \"]},\"2468\":{\"h\":\"3. 修改配置文件，创建一个路由\",\"t\":[\"修改tomcat配置文件，创建一个路由，指向项目的目录\",\"文件：conf/server.xml，在<Host>标签体中配置\",\"docBase:项目存放的路径\",\"path：虚拟目录，可以随意定义\",\"<Context docBase=\\\"D:\\\\hello\\\" path=\\\"/hehe\\\" /> \",\"访问项目：http://localhost:8080/path\",\"缺点：Tomcat可能会运行多个项目，直接修改server配置文件，会影响到其他项目\"]},\"2469\":{\"h\":\"通过子配置文件\",\"t\":[\"在 conf/Catalina/localhost中创建任意xml文件，在文件中编写配置项。\",\"注意：path不用定义，就是文件的名称。\",\"<Context docBase=\\\"D:\\\\hello\\\" /> \"]},\"2470\":{\"h\":\"4. 配合Nginx代理\",\"t\":[\"常用，见Nginx\"]},\"2471\":{\"h\":\"Ⅳ. JavaWeb项目结构\",\"t\":[\"JavaWeb就是用Java技术来解决相关web互联网领域的技术栈。\"]},\"2472\":{\"h\":\"1. 开发时的项目结构【工作目录】\",\"t\":[\"详见：idea & tomcat\",\"src：java源码目录\",\"web：静态资源目录\"]},\"2473\":{\"h\":\"2. 部署时的项目目录结构【运行目录】\",\"t\":[\"真正部署项目时，是把该目录部署到服务器，而非开始时的项目。\",\"同时这个目录也是Tomcat真正访问的目录。\"]},\"2474\":{\"h\":\"2.1 通用目录\",\"t\":[\"项目的根目录 \",\"WEB-INF：不能被浏览器直接访问的目录 \",\"web.xml：web项目的核心配置文件【非必须】\",\"classes：编译后的java字节码文件目录\",\"lib：放置依赖的jar包\",\"其他各种可以被浏览器访问的静态资源。\"]},\"2475\":{\"h\":\"2.2 在idea中的输出目录\",\"t\":[\"假如：项目名称叫sgugo，（详见idea & Tomcat）\",\"out \",\"artifacts \",\"sgugo_war_exploded：sgugo项目名的输出目录 \",\"WEB-INF：不能被浏览器直接访问的目录 \",\"classes：编译后java类\",\"其他静态资源\"]},\"2476\":{\"h\":\"2-2. IDEA使用\"},\"2477\":{\"h\":\"Ⅰ. Web项目目录\",\"t\":[\"以下目录是使用Maven创建的JavaWeb项目的标准目录。\"]},\"2478\":{\"h\":\"1. 开发中的项目\",\"t\":[\"2-2-1\"]},\"2479\":{\"h\":\"2. 打包后可以部署的项目\",\"t\":[\"通过打包命令，可以直接获取打包后可以部署的项目目录。\",\"编译后的Java字节码文件和resources的资源文件，会被放到WEB-INF下的classes目录下\",\"pom.xml中依赖坐标对应的jar包，会被放入WEB-INF下的lib目录下\",\"2-2-2\"]},\"2480\":{\"h\":\"Ⅱ. 创建Web项目\"},\"2481\":{\"h\":\"1. IDEA：创建Web项目\"},\"2482\":{\"h\":\"1.1 新建工程\",\"t\":[\"新建一个空Project：如Learn\",\"里面用一个Module来使用Tomcat：如JavaWeb\"]},\"2483\":{\"h\":\"1.2 创建Module\",\"t\":[\"New Module：弹出如下窗口，选择：Java Enterprise（即java企业版）\",\"右边选项中，进行必要的设置，如下：\",\"Name/Artifact：模块名\",\"Project template：Web application\",\"Project SDK：1.8 然后点击 Next和Finish就OK了\"]},\"2484\":{\"h\":\"2. IDEA：非Web项目->Web项目\",\"t\":[\"将已有的项目（模块）部署到Tomcat，和直接创建Web application项目的目录结构稍有不同。\"]},\"2485\":{\"h\":\"2.1 通过Project Structure添加Web\",\"t\":[\"打开Project Structure：Ctrl+ALT+Shift+S，选择右边的：Facets，点击+号，选择Web，然后选择要添加Web的模块\",\"2-2-3\"]},\"2486\":{\"h\":\"2.2 通过在Module上右键添加Web\",\"t\":[\"module上右键：Add Frameworks Support\",\"在弹出的页面中，选择：Web Application\",\"如下：也可以取消勾选 Create web.xml，使用注解的方式配置项目\",\"2-2-4\"]},\"2487\":{\"h\":\"2.3 配置Artifacts\",\"t\":[\"注意：如果采用了上述的方式2，就不用配置Artifacts，因为都已经配置好了。\",\"点击 Artifacts：配置输出文件的目录，和输出Type，如图：\",\"2-2-5\"]},\"2488\":{\"h\":\"3. Maven：使用骨架创建Web项目\"},\"2489\":{\"h\":\"3.1 创建Module\",\"t\":[\"new Module：选择Maven\",\"勾选Great from archetype：选中org.apache.maven.archetypes：maven_archetype-webapp\",\"点击Next，填写项目名称，和Maven的坐标。\",\"Finish：完成创建\"]},\"2490\":{\"h\":\"3.2 删除pom.xml中多余的内容\",\"t\":[\"<project ...>...</project>外的其他标签内容都删除。\"]},\"2491\":{\"h\":\"3.3 补齐Maven Web项目确实的目录结构\",\"t\":[\"默认的目录是没有java和resources的，需要手动创建补齐。\",\"2-2-6\"]},\"2492\":{\"h\":\"4. Maven：不使用骨架创建Web项目【推荐】\",\"t\":[\"详见：Maven\"]},\"2493\":{\"h\":\"4.1 创建Module\",\"t\":[\"new Module：选择Maven\",\"不勾选Great from archetype\",\"点击Next，填写项目名称，和Maven的坐标。\",\"Finish：完成创建\"]},\"2494\":{\"h\":\"4.2 设置pom.xml的打包方式\",\"t\":[\"<packaging>war</packaging>\"]},\"2495\":{\"h\":\"4.3 补齐Maven Web缺失的Webapp目录结构\",\"t\":[\"打开Project Structure：Ctrl+ALT+Shift+S：\",\"Facets->Web：选中之前创建的Web项目：在右边进行设置\",\"Web Resource Directories：双击按照提示补齐webapp目录\",\"Deployment Descriptors：点击+号，按照提示，添加缺失的WEB-INF/web.xml \",\"注意：WEB-INF所在的目录为webapp。\"]},\"2496\":{\"h\":\"Ⅲ. 配置Tomcat\"},\"2497\":{\"h\":\"readme\",\"t\":[\"使用IDEA和下载的Tomcat软件，配置Tomcat模板。该模板只需配置一次，以后再创建Javaweb项目就可以直接使用了。\",\"注意：这里使用的是本地之前下载的Tomcat。\"]},\"2498\":{\"h\":\"1. 打开Tomcat Server模板\",\"t\":[\"①右上角点击：Edit Comfigurations（或者：菜单栏run/Edit Comfigurations）\",\"②在弹出的窗口中点击右下角的edit configuration templates...\",\"③在弹出的窗口：Run/Debug Configuration Templates中：\",\"右边选择Tomcat Server->Local，然后就可以配置Tomcat了，配置项如下： 其中：Name是该Tomcat模板的名字，可以任意取，比如：Sgugo项目\"]},\"2499\":{\"h\":\"2. Deployment：项目部署\",\"t\":[\"点击该选项卡，部署项目，优先设置该选项卡，再设置Server选项卡\",\"点击+号，选择：Aftifacts->JavaWeb:war exploded\"]},\"2500\":{\"h\":\"2.1 部署模式介绍\",\"t\":[\"war：将WEB工程打成war包，把war包发布到Tomcat服务器上 \",\"该方式无法实现热部署\",\"war exploded：将WEB工程以当前文件夹的位置关系发布到Tomcat服务器上 \",\"热部署模式\"]},\"2501\":{\"h\":\"2.2 Application context：项目路径\",\"t\":[\"只有一个项目，建议直接改成 / , 这样以后就不用输入项目目录。\"]},\"2502\":{\"h\":\"3. Server：TomCat服务器配置\",\"t\":[\"Application server：指定本地Tomcat软件的具体路径 \",\"配置Tomcat服务器软件的目录，点击右边的Configure进行配置，选择Tomcat的主目录即可。\",\"Open Browser：启动项目后默认自动打开的浏览器\",\"URL：打开浏览器后要访问的项目目录，一般设置为：http://localhost:80/\",\"On Update action：当项目有更新的时候，该怎么做，推荐update resource：需要编译时按ctrl + f9即可 \",\"update resource：资源变动时，重新部署，非java文件的其他文件\",\"update calsses and resource：java和静态资源变更都会重新部署【热部署】\",\"Redeploy：把当前的一个项目重新部署到Tomcat服务器上\",\"restart：重启tomcat，将服务器上所有的项目都重新部署\",\"On fream deactivation：当idea失去焦点时，做什么 \",\"推荐update calsses and resource。自动更新class和资源。【方便调试】\",\"HTTP port：访问的端口号，默认是8080，改为80就不用输入端口号了。\"]},\"2503\":{\"h\":\"4. 添加配置好的Tomcat模板\",\"t\":[\"在 Run/Debug Configurations中点击右上角的+号，然后选择刚配置好的Tomcat（通过Name选择）\",\"以后就可以直接点击这个Tomcat 8.5.78进行Tomcat的配置和项目部署了。点击OK，结束Tomcat的配置。\"]},\"2504\":{\"h\":\"5. 配置多个Tomcat\",\"t\":[\"一台主机可以启动多太Tomcat服务器，只要端口号不同就可以。\",\"这里只介绍一下配置，可以创建多个Tomcat模板给不同的项目用。\"]},\"2505\":{\"h\":\"5.1 添加Tomcat模板\",\"t\":[\"打开窗口：Run/Debug Configuration ，点击+ 号，选择Tomcat，就可以再创建一个Tomcat模板了。\",\"注意：不同的Tomcat模板可以起不同的名字，如：起成对应的项目名称，方便区分。\"]},\"2506\":{\"h\":\"5.2 配置Tomcat模板\",\"t\":[\"选择一个Tomcat模板就可以在右边进行配置。\",\"具体配置见上文，配置方式一样（更简单，因为有了前一个模板的默认值）。\"]},\"2507\":{\"h\":\"5.3 配置文件\",\"t\":[\"IDEA会为每一个tomcat部署的项目单独建立一份配置文件。不用修改这个配置文件，按照上面的方法在IDEA中修改Tomcat会自动修改配置文件。\",\"配置文件地址：查看控制台的log：Using CATALINA_BASE:\\\"C:\\\\Users\\\\A\\\\AppData\\\\Local\\\\JetBrains\\\\IntelliJIdea2021.3\\\\tomcat\\\\4dc041da\\\"\"]},\"2508\":{\"h\":\"Ⅳ. 使用Tomcat\"},\"2509\":{\"h\":\"1. 启动Tomcat\",\"t\":[\"如图，下拉框选择Tomcat，并点击右边的 绿色启动按钮启动。\",\"debug：debug也可以启动，同时进行debug。\"]},\"2510\":{\"h\":\"2. 访问测试\",\"t\":[\"在JavaWeb/src/main/webapp/ 目录下创建 index.html，并输入<h1>Hi Tomcat</h1> 在浏览器中输入：localhost:8080/index.html，就可以看到页面了。\",\"注意：要关闭之前通过双击打开的Tomcat服务，不然会报端口占用的错误。\"]},\"2511\":{\"h\":\"3. 编译后的项目目录\",\"t\":[\"idea没有使用Tomcat的webapps作为项目目录，而是使用 模块目录下的 target作为项目目录，其中有三个文件夹：\",\"classes：对应编译后java文件\",\"generated-source：对应资源文件\",\"项目名-1.0-SNAPSHOT：前端快照\"]},\"2512\":{\"h\":\"4. 多个Tomcat目标的使用\",\"t\":[\"在右上角的下拉框中选择指定的tomcat模板，就可以启动了。\",\"当有多个Tomcat模板时，可以进行关闭切换其他Tomcat模板，并进行启动。\"]},\"2513\":{\"h\":\"Ⅴ. 注意事项\"},\"2514\":{\"h\":\"1. Artifacts配置\",\"t\":[\"新建的JavaWeb项目可能会出现未配置项目导出方式（Artifacts）。\",\"如果未配置Artifacts，会导致Tomcat选项中，只有普通的build打包，不能打war包，更不能热部署（没这个选项）。\"]},\"2515\":{\"h\":\"1.1 配置Artifacts\",\"t\":[\"打开Project Structure：ctrl+alt+shift+s\"]},\"2516\":{\"h\":\"1.2 添加导出方式\",\"t\":[\"如上图，主要用到两个导出方式。\",\"选中导出方式和要设置的项目进行设置。\"]},\"2517\":{\"h\":\"2. Tomcat导出方式介绍\",\"t\":[\"war：将WEB工程打成war包，把war包自动发布到Tomcat服务器上 \",\"该方式无法实现热部署\",\"war exploded：将WEB工程以当前文件夹的位置关系发布到Tomcat服务器上 \",\"热部署模式\"]},\"2518\":{\"h\":\"2.1 Tomcat添加导出方式\",\"t\":[\"在配置Tomcat的目标时，应该首先配置Deployment。\",\"点击+号，添加项目部署的导出方式。\",\"选择Artifact...选择war或war exploded中的一个。\",\"如果此处未出现Artifact...选项，说明Artifacts配置有问题，需要进行配置。\"]},\"2519\":{\"h\":\"2.2 注意事项\",\"t\":[\"如果未配置Artifacts，Tomcat的模板的设置界面将不会出现下面两个选项。\",\"热部署的具体配置：见上面的配置Tomcat\"]},\"2520\":{\"h\":\"@缺少的内容\",\"t\":[\"待补充的内容，都是一些高级的Tomcat使用\",\"详细配置\",\"关联Nginx\",\"性能调优\",\"Tomcat架构\",\"配置：服务器配置、Web应用配置、JVM配置\",\"Tomcat集群\",\"Tomcat安全\",\"WebSocket\"]},\"2521\":{\"h\":\"3-1. Servlet介绍\",\"t\":[\"提示\",\"Servlet Filter Listner是Javaweb的核心三件套\"]},\"2522\":{\"h\":\"1. 概述\",\"t\":[\"3-1-1\",\"Servlet：server applet，运行在服务器端（Tomcat）的小程序；\",\"Servlet是JavaWeb最为核心的内容，它是Java提供的一门动态web资源开发技术。\",\"Servlet是JavaEE规范之一，其实就是一个接口，将来我们需要定义Servlet类实现Servlet接口，并由web服务器运行Servlet\"]},\"2523\":{\"h\":\"2. 解析\",\"t\":[\"浏览器访问服务器时，会访问两种资源，静态资源和动态资源。\",\"对于动态资源来说，他是动态生成的，不同的访问条件，返回的内容是不一样的，也就是说，动态资源是具有逻辑性的，这个逻辑性就是由java代码控制的。\",\"服务器中的java代码，是需要tomcat来解析，才能生效。\",\"并不是所有的java代码，tomcat都能解析，而是需要遵守一些规则（接口）。这个规则（接口）就是Servlet。\"]},\"2524\":{\"h\":\"3. Servlet的本质\",\"t\":[\"Servlet就是一个接口，定义了Java类被浏览器访问到(tomcat识别)的规则。\",\"Javaweb开发中，自定义一个类，要实现Servlet接口，复写方法，才能被Tomcat解析.\"]},\"2525\":{\"h\":\"4. 导入servlet包\",\"t\":[\"servlet包是tomcat lib中的一个包，默认是导入的，如果没有导入可以手动导入： 打开模块设置（ctrl+alt+shift+s）->Libraries->+->选择tomcat/lib/servlet-api->导入到指定module。\"]},\"2526\":{\"h\":\"5. 注意事项\",\"t\":[\"打包web项目时，一定不要打包Servlet包，无论是开发时是何种配置。\",\"服务器Tomcat中已经有servlet-api.jar了，重复打包会产生冲突。\"]},\"2527\":{\"h\":\"3-2. 基本使用\"},\"2528\":{\"h\":\"Ⅰ. 快速入门\"},\"2529\":{\"h\":\"快速入门步骤\",\"t\":[\"创建项目：配置好Tomcat和Servlet\",\"创建Servlet实现类：实现Servlet接口 \",\"并重写所有方法，其中server方法中打印一句话进行测设\",\"配置路由：使用注解的方式为Servlet类配置一个访问路径（暂时不用深究）\",\"访问Servlet实现类：通过 基本url+路由的方式访问 \",\"访问前别忘了重启服务器\",\"测设：观察访问结果 \",\"不用写测设类，Servlet实现类会被自动访问，并自动调用server方法\"]},\"2530\":{\"h\":\"1. 创建项目\",\"t\":[\"创建Web项目，并配置Tomcat和Servlet。\",\"右键Librarys中的servlet-api：Add to Modules....：选择具体的module\",\"也可以在具体Module的：Depedencies选项卡中，手动添加\",\"3-2-1\"]},\"2531\":{\"h\":\"2. 创建Servlet实现类\",\"t\":[\"定义一个类，实现Servlet接口，并重写接口中所有方法，并在service方法中打印hello\",\"package servlet.demo; public class ServletDemo1 implements Servlet { @Override public void service(ServletRequest request, ServletResponse response) throws ServletException, IOException { System.out.println(\\\"hello\\\"); } ...//其他方法不用管，暂时只考虑service方法 } \"]},\"2532\":{\"h\":\"3. 配置路由\",\"t\":[\"在类上使用@WebServlet注解，配置该Servlet的访问路径\",\"@WebServlet(\\\"/demo1\\\") public class ServletDemo1 implements Servlet {...} \"]},\"2533\":{\"h\":\"4. 访问Servlet实现类\",\"t\":[\"启动/重启 Tomcat，浏览器中输入URL地址（基本URL+路由）访问该Servlet\",\"http://localhost:8080/demo1 \"]},\"2534\":{\"h\":\"5. 测试\",\"t\":[\"观察启动后的命令行，发现打印了hello。\",\"刷新访问的页面，每刷新一次就打印一次hello。\"]},\"2535\":{\"h\":\"Ⅱ. Servlet 执行流程\",\"t\":[\"我们并没有创建Servlet类的对象，也没有调用对象中的service方法，为什么在控制台就打印了hello这句话呢?\"]},\"2536\":{\"h\":\"1. Servlet执行流程概述\",\"t\":[\"3-2-5\"]},\"2537\":{\"h\":\"2. 解析\",\"t\":[\"浏览器发http://localhost:8080/web-demo/demo1请求，从请求中可以解析出三部分内容分别是`localhost:8080`、`web-demo`、`demo1`\",\"根据localhost:8080可以找到要访问的Tomcat Web服务器\",\"根据web-demo可以找到部署在Tomcat服务器上的web-demo项目\",\"根据demo1可以找到要访问的是项目中的哪个Servlet类，根据@WebServlet后面的值进行匹配\",\"找到ServletDemo1这个类后，Tomcat Web服务器就会为ServletDemo1这个类创建一个对象，然后调用对象中的service方法 \",\"ServletDemo1实现了Servlet接口，所以类中必然会重写service方法供Tomcat Web服务器进行调用\",\"service方法中有ServletRequest和ServletResponse两个参数，ServletRequest封装的是请求数据，ServletResponse封装的是响应数据，后期我们可以通过这两个参数实现前后端的数据交互\"]},\"2538\":{\"h\":\"3. 总结\",\"t\":[\"Servlet由web服务器创建，Servlet方法由web服务器调用\",\"因为我们自定义的Servlet,必须实现Servlet接口并复写其方法，而Servlet接口中有service方法\"]},\"2539\":{\"h\":\"Ⅲ. IDEA中快速使用\",\"t\":[\"在IDEA中可以快速创建Servlet实现类。\",\"JavaWeb核心三件套都可以直接new。\"]},\"2540\":{\"h\":\"1. 使用方式\",\"t\":[\"右键new时直接显示Servlet。\",\"效果：直接配置好了WebServlet，继承了HttpServlet，且自动重写了doGet和doPost。\",\"3-2-2\"]},\"2541\":{\"h\":\"2. 修改模板\",\"t\":[\"可以根据需求修改Servlet模板\",\"3-2-3\"]},\"2542\":{\"h\":\"3. 注意事项\",\"t\":[\"前提：已经导入了servlet.api\",\"在Project Structure界面，点击Module选项卡：将Source Roots中对应的src目录勾选上。\",\"3-2-4\"]},\"2543\":{\"h\":\"3-3. Servlet的对象\"},\"2544\":{\"h\":\"Ⅰ. Servlet 生命周期\",\"t\":[\"对象的生命周期指一个对象从被创建到被销毁的整个过程。Servlet运行在Servlet容器(web服务器)中，其生命周期由容器来管理，分为4个阶段\"]},\"2545\":{\"h\":\"1. 阶段1：加载和实例化\",\"t\":[\"默认情况下，当Servlet第一次被访问时，由容器创建Servlet对象。该对象只会创建一次，Tomcat会将其常驻内存。\"]},\"2546\":{\"h\":\"1.1 修改为启动Servlet时创建\",\"t\":[\"如果创建Servlet比较耗时的话，那么第一个访问的人等待的时间就比较长，用户的体验就比较差（注意：只会影响第一个访问的人而已，其实问题也不是很大），可以同设置，将Servlet的创建放到服务器启动的时候来创建。\",\"通过修改@WebServlet注解中loadOnStartup的值来改变Servlet对象的创建时机：\",\"取值负整数:第一次访问时创建Servlet对象\",\"0或正整数:服务器启动时创建Servlet对象，数字越小优先级越高\"]},\"2547\":{\"h\":\"1.2 线程安全问题\",\"t\":[\"Servlet的init方法，只执行一次，说明一个Servlet在内存中只存在一个对象，Servlet是单例的，也就是说多个用户同时访问时，可能存在线程安全问题。\",\"解决：尽量不要在Servlet中定义成员变量。即使定义了成员变量，也不要修改值\"]},\"2548\":{\"h\":\"2. 阶段2：初始化\",\"t\":[\"在Servlet实例化之后，容器将自动调用Servlet的init()方法初始化这个对象，完成一些如加载配置文件、创建连接等初始化的工作。该方法只调用一次。\"]},\"2549\":{\"h\":\"3. 阶段3：请求处理\",\"t\":[\"每次请求Servlet时，Servlet容器都会调用Servlet的service()方法对请求进行处理\"]},\"2550\":{\"h\":\"4. 阶段4：服务终止\",\"t\":[\"当需要释放内存或者容器关闭时，容器就会调用Servlet实例的destroy()方法完成资源的释放。在destroy()方法调用之后，容器会释放这个Servlet实例，该实例随后会被Java的垃圾收集器所回收。\"]},\"2551\":{\"h\":\"Ⅱ. Servlet 方法\",\"t\":[\"Servlet接口一共有五个方法，其中init、service、destroy会在生命周期中被调用。\",\"public interface Servlet { void init(ServletConfig var1) throws ServletException; ServletConfig getServletConfig(); void service(ServletRequest var1, ServletResponse var2) throws ServletException, IOException; String getServletInfo(); void destroy(); } \"]},\"2552\":{\"h\":\"1. init：初始化\",\"t\":[\"初始化方法，默认在Servlet被第一次访问时调用，只执行一次。\",\"可以通过将@WebServlet注解中的loadOnStartup修改为0或整数，将该方法的调用时机改为服务器启动时调用。\",\"void init(ServletConfig config) ================================== @WebServlet(urlPatterns=\\\"/demo1\\\",loadOnStartup=1) //修改调用时机 public void init(ServletConfig config) throws ServletException { //通过控制台观察代码块运行结果可知：该方法仅启动了一次 System.out.println(\\\"init...\\\"); } \"]},\"2553\":{\"h\":\"2. service：服务代码\",\"t\":[\"这是Servlet的最核心方法，业务逻辑就是写在该方法内的。\",\"每次该servlet的url被访问，该方法都会执行一次，开发时，主要关注该方法。该方法会获取访问时的请求信息，并会将服务的响应返回给请求处（见后续章节：请求与响应）\",\"void service(ServletRequest var1, ServletResponse var2); ======================================================= public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException { //观察可知：每次访问(刷新)配置的url，该方法中的代码块都会执行一次 System.out.println(\\\"servlet hello world~\\\"); } \"]},\"2554\":{\"h\":\"3. destroy：销毁方法\",\"t\":[\"内存释放或者服务器关闭的时候，Servlet对象会被销毁，调用。\",\"由于Servlet对象指挥创建一次，因此也只能销毁一次，所以该方法只会执行一次。\",\"注意：只有服务器正常关闭时，才会执行destroy方法。\",\"void destroy(); ======================== public void destroy() { //通过控制台观察代码块运行结果可知：该方法仅运行了一次 System.out.println(\\\"destroy...\\\"); } \"]},\"2555\":{\"h\":\"4. getServletInfo：获取Servlet信息\",\"t\":[\"该方法用来返回Servlet的相关信息，如版本、作者等。\",\"没有什么太大的用处，一般我们返回一个空字符串即可\",\"String getServletInfo(); ============================ public String getServletInfo() { return \\\"\\\"; } \"]},\"2556\":{\"h\":\"5. getServletConfig：获取ServletConfig对象\",\"t\":[\"ServletConfig对象，在init方法的参数中有，而Tomcat Web服务器在创建Servlet对象的时候会调用init方法，必定会传入一个ServletConfig对象，我们只需要将服务器传过来的ServletConfig进行返回即可。\",\"ServletConfig getServletConfig(); ======================================= public class ServletDemo1 implements Servlet{ private ServletConfig servletConfig; public void init(ServletConfig config) throws ServletException{ this.servletConfig = config; System.out.println(\\\"init...\\\"); } public ServletConfig getServletConfig(){ return servletConfig; } } \"]},\"2557\":{\"h\":\"Ⅲ. Servlet 体系结构\",\"t\":[\"要想编写一个Servlet就必须要实现Servlet接口，重写接口中的5个方法，虽然已经能完成要求，但是编写起来还是比较麻烦的，因为我们更关注的其实只有service方法。\"]},\"2558\":{\"h\":\"1. Servlet的体系结构（继承结构）\",\"t\":[\"Servlet接口有一个实现类：\",\"GenericServlet抽象类。该类也有一个实现类： \",\"HttpServlet抽象类\",\"3-3-1\"]},\"2559\":{\"h\":\"2. GenericServlet抽象类\",\"t\":[\"GenericServlet将Servlet接口中其他的方法做了默认空实现，只将service()方法作为抽象。\",\"因此：将来定义Servlet类时，可以继承GenericServlet，仅实现service()方法即可\"]},\"2560\":{\"h\":\"3. HttpServlet抽象类\",\"t\":[\"在JavaWeb开发中，我们在Servlet中写的代码其实就是对http协议请求的一种响应。即接收get/post等一些列类型的请求，并进行一些操作。而在每次操作前，首要任务就是判断请求类型，每个servlet的实现类都需要进行判断，非常繁琐，因此有了HttpServlet。\",\"HttpServlet是对http协议的一种封装，简化操作，该类是没有抽象方法的抽象类。并提供了真的不同请求方式的请求方法。\"]},\"2561\":{\"h\":\"4. Servlet类的选择\",\"t\":[\"因为我们将来开发B/S架构的web项目，都是针对HTTP协议，所以我们自定义Servlet,会通过继承HttpServlet\"]},\"2562\":{\"h\":\"5. HttpServlet的使用\",\"t\":[\"注意1：这里是继承HttpServlet 类，而不是实现，HttpServlet是抽象类，不是接口。\",\"注意2：HttpServlet类中没有抽象方法，因此只需要按需重写方法即可。\"]},\"2563\":{\"h\":\"5.1 请求方式\",\"t\":[\"请求方式一共有7种，HttpServlet中也对每种请求方式做了定义。\",\"实际开发中，根据需求，重写对应请求方式的doXxx方法，一般doPost和doGet是要被重写的。\",\"private static final String METHOD_DELETE = \\\"DELETE\\\"; private static final String METHOD_HEAD = \\\"HEAD\\\"; private static final String METHOD_GET = \\\"GET\\\"; private static final String METHOD_OPTIONS = \\\"OPTIONS\\\"; private static final String METHOD_POST = \\\"POST\\\"; private static final String METHOD_PUT = \\\"PUT\\\"; private static final String METHOD_TRACE = \\\"TRACE\\\"; \"]},\"2564\":{\"h\":\"5.2 编写格式\",\"t\":[\"仅考虑重写doGet和doPost方法。\",\"@WebServlet(\\\"/demo2\\\") public class ServletDemo2 extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { //super.doGet(req, resp); System.out.println(\\\"GET 请求方式的处理逻辑\\\"); } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { //super.doPost(req, resp); System.out.println(\\\"Post 请求方式的处理逻辑\\\"); } } \",\"如上方的代码。\",\"通过浏览器地址栏请求该Servlet，doGet方法被调用了。\",\"通过表达的post方式请求该Servlet，doPost方法被调用了。\"]},\"2565\":{\"h\":\"6. HttpServlet的原理\",\"t\":[\"HttpServlet中为什么要根据请求方式的不同，调用不同的方法? 如何调用的?\"]},\"2566\":{\"h\":\"6.1 手动实现HttpServlet的逻辑\",\"t\":[\"为了验证第一个问题，这里来通过继承原始的Servlet类，来手动实现server方法\",\"@WebServlet(\\\"/demo\\\") public class MyServlet extends HttpServlet { @Override public void service(ServletRequest request, ServletResponse response) throws ServletException, IOException { HttpServletRequest request = (HttpServletRequest)req; //1. 获取请求方式 String method = request.getMethod(); //2. 判断 if(\\\"GET\\\".equals(method)){ // get方式的处理逻辑 doGet(req,res); }else if(\\\"POST\\\".equals(method)){ // post方式的处理逻辑 doPost(req,res); } } protected void doPost(ServletRequest req, ServletResponse res) { } protected void doGet(ServletRequest req, ServletResponse res) { } ...//其它四个重写的接口方法暂不考虑 } \",\"有了MyServlet这个指定的类后，以后我们再编写Servlet类的时候，只需要继承MyHttpServlet，重写父类中的doGet和doPost方法，就可以用来处理GET和POST请求的业务逻辑。\",\"将来页面发送的是GET请求，则会进入到doGet方法中进行执行，如果是POST请求，则进入到doPost方法。这样代码在编写的时候就相对来说更加简单快捷。\",\"而HttpServlet的原理也是如此。\"]},\"2567\":{\"h\":\"6.2 意义\",\"t\":[\"在JavaWeb开发中，我们在Servlet中写的代码其实就是对http协议请求的一种响应。\",\"接收get/post等一些列类型的请求，并进行一些操作。而在每次操作前，首要任务就是判断请求类型，每个servlet的实现类都需要进行判断，非常繁琐，因此有了HttpServlet。\",\"HttpServlet是对http协议的一种封装，简化操作，该类是没有抽象方法的抽象类。并提供了真的不同请求方式的请求方法。\"]},\"2568\":{\"h\":\"3-4. 路由\",\"t\":[\"提示\",\"采用注解的方式配置路由。\",\"也可以采用XML，不过一般不这么用。\"]},\"2569\":{\"h\":\"Ⅰ. 注解配置路由\"},\"2570\":{\"h\":\"1. urlPattern\",\"t\":[\"配置路由用的是@WebServlet注解，在该注解中，value和urlPatterns是等效的，都可以用来指定url。且他们都是数组，因此一个Servlet可以配置多个urlPattern。\"]},\"2571\":{\"h\":\"2. 语法\",\"t\":[\"在Servlet实现类的@WebServlet注解内。\",\"@WebServlet(urlPatterns=\\\"/资源路径\\\"); //只有一个属性可以省略urlPatterns @WebServlet(\\\"资源路径\\\"); //不写属性就相当于是value @WebServlet(\\\"/demo\\\"); //必须要加/,不能直接demo public class ServletDemo implements Servlet {...} \"]},\"2572\":{\"h\":\"3. 配置项\",\"t\":[\"WebServer有很多配置项，而且除了路由，所有配置项都有默认值，且采用默认值即可。因此只需要配置一下路由。\",\"@Target({ElementType.TYPE}) @Retention(RetentionPolicy.RUNTIME) @Documented public @interface WebServlet { String name() default \\\"\\\";//相当于<Servlet-name> String[] value() default {};//代表urlPatterns()属性配置 String[] urlPatterns() default {};//相当于<url-pattern> int loadOnStartup() default -1;//相当于<load-on-startup> } \"]},\"2573\":{\"h\":\"Ⅱ. 匹配模式\",\"t\":[\"urlPattern一共有四种匹配模式：精准、目录、扩展名、任意。\"]},\"2574\":{\"h\":\"1. 精确匹配\",\"t\":[\"配置的路径和访问的路径是一样的。\",\"3-4-1\",\"@WebServlet(urlPatterns = \\\"/user/select\\\") //访问路径：http://localhost:8080/web-demo/user/select \"]},\"2575\":{\"h\":\"2. 目录匹配\",\"t\":[\"3-4-2\",\"/* 代表的是零或多个层级访问目录。\",\"只要是/*前面的能匹配到，后面是什么都无所谓。\",\"@WebServlet(urlPatterns = \\\"/user/*\\\") //访问路径http://localhost:8080/web-demo/user/任意 \"]},\"2576\":{\"h\":\"3. 扩展名匹配\",\"t\":[\"该匹配规则和其他三个是不同的，它只识别扩展名。\",\"3-4-3\",\"如果路径配置的不是扩展名，那么在路径的前面就必须要加/否则会报错\",\"如果路径配置的是*.do,那么在*.do的前面不能加/,否则会报错\",\"@WebServlet(urlPatterns = \\\"*.do\\\") //访问路径http://localhost:8080/web-demo/任意.do \"]},\"2577\":{\"h\":\"4. 任意匹配\",\"t\":[\"3-4-3\",\"@WebServlet(urlPatterns = \\\"/*\\\") //访问路径http://localhost:8080/demo-web/任意 \",\"defaultServlet：Tomcat中有一个DefaultServlet，当其他的url-pattern都匹配不上时都会走这个Servlet\",\"/ 与 /*：/ 与 /* 都表示任意匹配。 /*的优先级 > /\",\"使用 / 会覆盖掉defaultServlet。\",\"defaultServlet的覆盖：如果项目中的Servlet配置了 \\\"/\\\",会覆盖掉tomcat中的DefaultServlet \",\"DefaultServlet是用来处理静态资源，如果配置了\\\"/\\\"会把默认的覆盖掉，就会引发请求静态资源的时候没有走默认的而是走了自定义的Servlet类，最终导致静态资源不能被访问\"]},\"2578\":{\"h\":\"5. 优先级\",\"t\":[\"精确匹配 > 目录匹配> 扩展名匹配 > /* > /\"]},\"2579\":{\"h\":\"Ⅲ. XML配置路由\",\"t\":[\"提示\",\"略，用注解就可以了。\"]},\"2580\":{\"h\":\"3-5. 请求与响应\"},\"2581\":{\"h\":\"Ⅰ. 请求与响应概述\"},\"2582\":{\"h\":\"介绍\",\"t\":[\"Request是请求对象，Response是响应对象。\",\"这两个对象都是Servlet接口中，service方法的参数。request和response对象是由服务器创建的，我们来使用它们。request对象是来获取请求消息，response对象是来设置响应消息\"]},\"2583\":{\"h\":\"1. 完整的请求处理过程\",\"t\":[\"3-5-1\",\"如下：这只是基本的处理过程，省略很多非核心步骤，如：过滤\",\"前端：客户端发起请求\",\"Tomcat接收到请求： \",\"①tomcat服务器会根据请求url中的资源路径，创建对应的Servlet实现类的对象。\",\"②tomcat服务器,会创建request和response对象，request对象中封装请求消息数据。\",\"③tomcat将request和response两个对象传递给service方法，并调用service方法。\",\"service方法被调用执行 \",\"在service方法中，程序员可以通过request对象获取请求消息数据\",\"也可以通过response对象设置相应消息数据\",\"Tomcat从response对象中拿到程序中设置的响应消息数据 \",\"tomcat向之前发起请求的浏览器返回响应\",\"前端：浏览器接收响应\"]},\"2584\":{\"h\":\"2. request的作用：获取请求数据\",\"t\":[\"request对象是用来封装请求数据的对象\",\"浏览器会发送HTTP请求到后台服务器[ Tomcat ] HTTP的请求中会包含很多请求数据[ 请求行+请求头+请求体 ]\",\"后台服务器[ Tomcat ]会对HTTP请求中的数据进行解析并把解析结果存入到一个对象中\",\"所存入的对象即为request对象，所以我们可以从request对象中获取请求的相关参数\",\"获取到数据后就可以继续后续的业务，比如获取用户名和密码就可以实现登录操作的相关业务\"]},\"2585\":{\"h\":\"3. response的作用：设置响应数据\",\"t\":[\"response对象是用来封装响应数据的对象\",\"业务处理完后，后台就需要给前端返回业务处理的结果即响应数据\",\"把响应数据封装到response对象中\",\"后台服务器[ Tomcat ]会解析response对象,按照[ 响应行+响应头+响应体 ]格式拼接结果\",\"浏览器最终解析结果，把内容展示在浏览器给用户浏览\"]},\"2586\":{\"h\":\"Ⅱ. Request继承体系\"},\"2587\":{\"h\":\"介绍\",\"t\":[\"当我们的Servlet类实现的是Servlet接口的时候，service方法中的参数是ServletRequest和ServletResponse\",\"当我们的Servlet类继承的是HttpServlet类的时候，doGet和doPost方法中的参数就变成HttpServletRequest和HttpServletReponse\",\"和Servlet类似，Request和Response也存在自己的继承体系。\"]},\"2588\":{\"h\":\"1.Request的继承体系\",\"t\":[\"3-5-2\",\"ServletRequest和HttpServletRequest都是Java提供的，ServletRequest和HttpServletRequest是继承关系，并且两个都是接口，接口是无法创建对象。我们真正使用的类是RequestFacade类。\"]},\"2589\":{\"h\":\"2. RequestFacade\",\"t\":[\"真正使用的Request对象的类是：RequestFacade（根据多态显示的类是HttpServletRequest）\",\"该类实现了HttpServletRequest接口，也间接实现了ServletRequest接口。\",\"Servlet类中的service方法、doGet方法或者是doPost方法最终都是由Web服务器- [ Tomcat ]来调用的，所以Tomcat提供了方法参数接口的具体实现类，并完成了对象的创建\",\"要想了解RequestFacade中都提供了哪些方法，我们可以直接查看JavaEE的API文档中关于ServletRequest和HttpServletRequest的接口文档，因为RequestFacade实现了其接口就需要重写接口中的方法\",\"//doGet是HttpServlet中的Service自动调用的方法，参数跟Service一样 protected void doGet(HttpServletRequest req, HttpServletResponse resp) \"]},\"2590\":{\"h\":\"3. 总结\",\"t\":[\"Request的继承体系为ServletRequest-->HttpServletRequest-->RequestFacade\",\"Tomcat需要解析请求数据，封装为request对象,并且创建request对象传递到service方法\",\"使用request对象，可以查阅JavaEE API文档的HttpServletRequest接口中方法说明\"]},\"2591\":{\"h\":\"Ⅲ. Response继承体系\",\"t\":[\"Reponse的继承体系和Request的继承体系也非常相似\"]},\"2592\":{\"h\":\"1. 继承关系\",\"t\":[\"3-5-3\"]},\"2593\":{\"h\":\"2. ResponseFacade\",\"t\":[\"和RequestFacade一样，只是Request变成了Response\"]},\"2594\":{\"h\":\"3-6. Request\"},\"2595\":{\"h\":\"Ⅰ. 获取请求行\"},\"2596\":{\"h\":\"请求行\",\"t\":[\"请求行包含三块内容，分别是请求方式、请求资源路径、HTTP协议及版本\",\"对于这三部分内容，request对象都提供了对应的API方法来获取\",\"3-6-1\"]},\"2597\":{\"h\":\"1. 常用请求方法\",\"t\":[\"这些方法都是返回String类型(或StringBuffer类型)的getXxx方法。\",\"getMethod：获取请求方式 \",\"get请求就返回：GET；\",\"getContextPath：获取虚拟目录 \",\"即项目的访问路径，该路径是通过Tomcat的Deployment->Application context配置的。\",\"如果配置的是 / ，那么该方法将什么都不返回。\",\"getRequestURL：获取URL，统一资源定位符，完整的网址\",\"getRequestURI：获取URI，统一资源标识符，基础网址后面的部分。\",\"getServletPath()：获取Servlet路径，Servlet类中定义的路由\",\"getProtocol()： 获取协议及版本，如：HTTP/1.1\",\"getQueryString：获取get的请求参数，url？号后面的键值对\",\"getRemoteAddr()：获取客户机的IP地址\"]},\"2598\":{\"h\":\"2. 使用测试\",\"t\":[\"启动服务器，访问：http://localhost:8080/demo3?uname=sgugo\",\"@WebServlet(name = \\\"ServletDemo3\\\", value = \\\"/demo3\\\") public class ServletDemo3 extends HttpServlet { @Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { String method = request.getMethod(); System.out.println(method); //GET String contextPath = request.getContextPath(); System.out.println(contextPath); //配置的是 / 什么都不返回 StringBuffer requestURL = request.getRequestURL(); System.out.println(requestURL); //http://localhost:8080/demo3 String requestURI = request.getRequestURI(); System.out.println(requestURI); // /demo3 String servletPath = request.getServletPath(); System.out.println(servletPath); // /demo3 String protocol = request.getProtocol(); System.out.println(protocol); // HTTP/1.1 String queryString = request.getQueryString(); System.out.println(queryString); // uname=sgugo String ip = request.getRemoteAddr(); System.out.println(ip); // 0:0:0:0:0:0:0:1 } @Override protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { } } \"]},\"2599\":{\"h\":\"Ⅱ. 获取请求头\",\"t\":[\"HTTP请求头的数据是键值对的形式key：value\",\"可以根据请求头，来获取对应的值。\"]},\"2600\":{\"h\":\"1. getHeader：获取请求头的值\",\"t\":[\"String getHeader(String name); \"]},\"2601\":{\"h\":\"2. 使用测试\",\"t\":[\"protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { String host = request.getHeader(\\\"host\\\"); String accept = request.getHeader(\\\"accept\\\"); System.out.println(host); // localhost:8080 System.out.println(accept); //text/html,application/xhtml+xml,... } \"]},\"2602\":{\"h\":\"3. 获取所有请求头的名称\",\"t\":[\"可以直接进行iterate遍历getHeaderNames方法的结果，获取所有的请求头。\",\"不常用，因为请求头的名字都是固定的，没必要通过这个方法获取，多走这一步。\",\"Enumeration<String> getHeaderNames(); ============================================= protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { Enumeration<String> headers = request.getHeaderNames(); //循环遍历获取打印请求头 while(headers.hasMoreElements()) { System.out.println(headers.nextElement()); } } \",\"请求结果如下：\",\"host\",\"connection\",\"cache-control\",\"sec-ch-ua\",\"sec-ch-ua-mobile\",\"sec-ch-ua-platform\",\"upgrade-insecure-requests\",\"user-agent\",\"accept\",\"sec-fetch-site\",\"sec-fetch-mode\",\"sec-fetch-user\",\"sec-fetch-dest\",\"accept-encoding\",\"accept-language\",\"cookie\"]},\"2603\":{\"h\":\"Ⅲ. 获取请求体\"},\"2604\":{\"h\":\"1. 请求体\",\"t\":[\"浏览器在发送GET请求的时候是没有请求体的，所以需要把请求方式变更为POST，请求体中的数据格式如下:\",\"3-6-2\"]},\"2605\":{\"h\":\"2. 获取请求体的方式\",\"t\":[\"对于请求体中的数据，Request对象提供了如下两种方式来获取其中的数据。\",\"都是先获取流对象，再从流对象中拿数据（读取流）。\"]},\"2606\":{\"h\":\"2.1 获取字节输入流\",\"t\":[\"如果前端发送的是字节数据，比如传递的是文件数据，则使用该方法\",\"ServletInputStream getInputStream() \"]},\"2607\":{\"h\":\"2.2 获取字符输入流\",\"t\":[\"如果前端发送的是纯文本数据，则使用该方法\",\"BufferedReader getReader() \"]},\"2608\":{\"h\":\"3. 使用测试\"},\"2609\":{\"h\":\"3.1 前端表单\",\"t\":[\"//file：index.html <form action=\\\"/demo3\\\" method=\\\"post\\\"> <input type=\\\"text\\\" name=\\\"uname\\\"> <input type=\\\"password\\\" name=\\\"pwd\\\"> <input type=\\\"submit\\\"> </form> \"]},\"2610\":{\"h\":\"3.2 Servlet\",\"t\":[\"protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { //1. 获取字符输入流 BufferedReader br = request.getReader(); //2. 读取数据 String line = br.readLine(); //每读一行就是一个请求键值对 System.out.println(line); //uname=Aaron&pwd=12354 } \"]},\"2611\":{\"h\":\"4. 注意事项\",\"t\":[\"BufferedReader流是通过request对象来获取的，当请求完成后request对象就会被销毁，request对象被销毁后，BufferedReader流就会自动关闭，所以此处就不需要手动关闭流了。\"]},\"2612\":{\"h\":\"Ⅳ. 请求参数\",\"t\":[\"请求参数的处理方式\",\"get方式： getQueryString()\",\"post方式：getReader();\"]},\"2613\":{\"h\":\"1. 需求&问题\",\"t\":[\"一个Servlet类中一般都要定义doGet方法和doPost方法。\",\"假如，某个Servlet实现类，既可以使用Get方法访问，又可以使用post方法访问，且两种方法方式的代码逻辑都是一样的。此时我们需要分别在doGet方法和doPost方法中，写两份几乎一样的代码，仅获取参数的代码不同。\",\"问题：这种情况很常见，如果都写两份代码，太冗余了。\"]},\"2614\":{\"h\":\"2. 解决方案\",\"t\":[\"逻辑代码只写在doGet方法中，并在方法中判断请求方式是get还是post，根据请求方式的不通，调用对应的方法来获取参数。\",\"而在doPost方法中，只需要去掉用doGet方法即可，如下：\",\"@WebServlet(\\\"/req1\\\") public class RequestDemo1 extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { String method = req.getMethod(); //获取请求方式 String params = \\\"\\\";//获取请求参数 if(\\\"GET\\\".equals(method)){ params = req.getQueryString(); }else if(\\\"POST\\\".equals(method)){ BufferedReader reader = req.getReader(); params = reader.readLine(); } ...//后续逻辑处理 } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { this.doGet(req,resp);//调用get方法，并传入参数 } } \"]},\"2615\":{\"h\":\"3. 方案优化\",\"t\":[\"每个servlet类都需要进行判断，还是有点冗余\",\"Request对象内部提供了更加强大的方法，解决了上述问题，不用再进行判断，且request提供的方法功能更强大。以后只需要调用request提供的方法即可，\"]},\"2616\":{\"h\":\"Ⅴ. Request参数处理\"},\"2617\":{\"h\":\"1. 底层原理\"},\"2618\":{\"h\":\"1.1 根据不同的请求方式获取请求参数\",\"t\":[\"获取的内容如下:\",\"3-6-3\"]},\"2619\":{\"h\":\"1.2 把获取到的内容进行分割\",\"t\":[\"内容如下:\",\"3-6-4\"]},\"2620\":{\"h\":\"1.3 把分割后端数据，存入到一个Map集合中\",\"t\":[\"注意：请求参数的键都是字符串，值也是字符串，但可能有多个，所以Map的值的类型为String数组。\",\"3-6-5\"]},\"2621\":{\"h\":\"2. 相关方法\",\"t\":[\"基于上述理论，request对象为我们提供了如下方法\",\"//getParameterMap：获取所有参数Map集合 Map<String,String[]> getParameterMap() //getParameterValues：根据名称获取参数值（数组），如复选框 String[] getParameterValues(String name) //getParameter：根据名称获取参数值(单个值)【常用】 String getParameter(String name) //getParameterNames：获取所有请求的参数名称 Enumeration<String> getParameterNames() \"]},\"2622\":{\"h\":\"3. 示例\"},\"2623\":{\"h\":\"3.1 前端代码\",\"t\":[\"一个form表单，其中的method可以选择get和post分别进行测试\",\"<form action=\\\"/request-demo/req2\\\" method=\\\"get\\\"> <input type=\\\"text\\\" name=\\\"username\\\"><br> <input type=\\\"password\\\" name=\\\"password\\\"><br> <input type=\\\"checkbox\\\" name=\\\"hobby\\\" value=\\\"1\\\"> 游泳 <input type=\\\"checkbox\\\" name=\\\"hobby\\\" value=\\\"2\\\"> 爬山 <br> <input type=\\\"submit\\\"> </form> \"]},\"2624\":{\"h\":\"3.2 Servlet\",\"t\":[\"@WebServlet(\\\"/req2\\\") public class RequestDemo2 extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { //1. 获取所有参数的Map集合 Map<String, String[]> map = req.getParameterMap(); for (String key : map.keySet()) { System.out.print(key+\\\":\\\");// username:zhangsan lisi String[] values = map.get(key);//获取值 for (String value : values) { System.out.print(value + \\\" \\\"); } System.out.println(); } //2. 根据key获取参数值，数组 String[] hobbies = req.getParameterValues(\\\"hobby\\\"); for (String hobby : hobbies) { System.out.println(hobby); } //3. 根据key 获取单个参数值 String username = req.getParameter(\\\"username\\\"); String password = req.getParameter(\\\"password\\\"); System.out.println(username); System.out.println(password); } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { this.doGet(req,resp); //直接转发 } } \"]},\"2625\":{\"h\":\"4. 总结\",\"t\":[\"request.getParameter()方法使用的频率会比较高\",\"以后再写代码的时候，就只需要按照如下格式来编写:\",\"public class RequestDemo1 extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { //采用request提供的获取请求参数的通用方式来获取请求参数 //编写其他的业务代码... } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { this.doGet(req,resp); } } \"]},\"2626\":{\"h\":\"Ⅵ. 乱码问题\",\"t\":[\"不管是GET还是POST请求，在发送的请求参数中如果有中文，在后台接收的时候，都会出现中文乱码的问题\",\"提示\",\"注：当前版本的Tomcat已经解决了GET方式的乱码问题，只需手动解决POST乱码问题即可。\"]},\"2627\":{\"h\":\"控制台乱码\",\"t\":[\"注意：在测试乱码问题的代码时，一定要先处理控制台乱码，不然会干扰测试结果。如下图位置，添加：-Dfile.encoding=UTF-8\",\"3-6-6\"]},\"2628\":{\"h\":\"1. 乱码原因\",\"t\":[\"POST的请求参数是通过request的getReader()来获取流中的数据\",\"TOMCAT在获取流的时候采用的编码是ISO-8859-1\",\"ISO-8859-1编码是不支持中文的，所以会出现乱码\"]},\"2629\":{\"h\":\"2. 解决方案\",\"t\":[\"页面设置的编码格式为UTF-8\",\"把TOMCAT在获取流数据之前的编码设置为UTF-8\",\"通过request.setCharacterEncoding(\\\"UTF-8\\\")设置编码,UTF-8也可以写成小写\"]},\"2630\":{\"h\":\"3. 代码\",\"t\":[\"//request对象在获取请求参数前先修改编码 request.setCharacterEncoding(\\\"UTF-8\\\"); request.getParameter(\\\"uname\\\");//获取请求参数 \"]},\"2631\":{\"h\":\"4. 说明\",\"t\":[\"POST请求中文乱码的问题就已经解决，但是这种方案不适用于GET请求. GET请求获取请求参数的方式是request.getQueryString() POST请求获取请求参数的方式是request.getReader()\",\"不过get请求的乱码Tomcat已解决了。\"]},\"2632\":{\"h\":\"5. 总结\",\"t\":[\"一行代码解决所有乱码问题\",\"request.setCharacterEncoding(\\\"utf-8\\\"); \"]},\"2633\":{\"h\":\"3-7. Response\"},\"2634\":{\"h\":\"Ⅰ. Response\",\"t\":[\"Response对象是用来做HTTP响应的，共分为三个部分：响应行、响应头、响应体。\",\"Response对象提供了不同的方法还出了这三种响应内容。\"]},\"2635\":{\"h\":\"1. 响应行\",\"t\":[\"3-7-1\",\"对于响应行，比较常用的是设置响应状态码\",\"void setStatus(int sc); \"]},\"2636\":{\"h\":\"2. 响应头\",\"t\":[\"3-7-1\",\"void setHeader(String name,String value); \"]},\"2637\":{\"h\":\"3. 对于响应体，是通过字符、字节输出流的方式往浏览器写，\",\"t\":[\"获取字符输出流\",\"PrintWriter getWriter(); \",\"获取字节输出流\",\"ServletOutputStream getOutputStream(); \"]},\"2638\":{\"h\":\"Ⅱ. 响应字符数据\",\"t\":[\"Response响应字符数据\"]},\"2639\":{\"h\":\"1. 步骤\",\"t\":[\"要想将字符数据写回到浏览器，我们需要两个步骤:\",\"通过Response对象获取字符输出流： PrintWriter writer = response.getWriter();\",\"通过字符输出流写数据: writer.write(\\\"aaa\\\");\"]},\"2640\":{\"h\":\"2. 示例：向浏览器响应字符hello\",\"t\":[\"浏览器访问：http://localhost:8080/demo1，浏览器页面上显示：hello\",\"@WebServlet(\\\"/demo1\\\") public class ResponseDemo1 extends HttpServlet { @Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { PrintWriter writer = response.getWriter(); writer.write(\\\"hello\\\"); } } \"]},\"2641\":{\"h\":\"3. 设置响应的数据类型\",\"t\":[\"响应的字符数据，默认是按照text解析的，也可以通过修改响应头，改为其他方式解析。\",\"response.setContentType(\\\"text/html;charset=utf-8\\\");//直接修改ContextType response.setHeader(\\\"context-type\\\",\\\"text/html\\\");//修改响应头的方式修改响应类型 \"]},\"2642\":{\"h\":\"4. 示例：向浏览器响应html标签\",\"t\":[\"浏览器访问：http://localhost:8080/demo1，浏览器页面上显示：被`h1`渲染后的hello\",\"response.setContentType(\\\"text/html\\\"); PrintWriter writer = response.getWriter(); writer.write(\\\"<h1>hello<h1>\\\"); \"]},\"2643\":{\"h\":\"5. 注意\",\"t\":[\"一次请求响应结束后，response对象就会被销毁掉，所以不要手动关闭流。\"]},\"2644\":{\"h\":\"Ⅲ. 响应字节数据\"},\"2645\":{\"h\":\"1. 实现步骤\",\"t\":[\"要想将字节数据写回到浏览器，我们需要两个步骤:\",\"通过Response对象获取字节输出流：ServletOutputStream outputStream = response.getOutputStream();\",\"通过字节输出流写数据: outputStream.write(字节数据);\"]},\"2646\":{\"h\":\"2. 示例：向浏览器响应一张图片\",\"t\":[\"先从硬盘读取一个图片文件，然后获取字节输出流，进行字节流对拷。\",\"//1. 读取文件 FileInputStream fis = new FileInputStream(\\\"d://a.jpg\\\"); //2. 获取response字节输出流 ServletOutputStream os = response.getOutputStream(); //3. 完成流的copy byte[] buff = new byte[1024]; int len = 0; while ((len = fis.read(buff))!= -1){ os.write(buff,0,len); } fis.close(); \"]},\"2647\":{\"h\":\"第三方工具对拷\",\"t\":[\"上述代码中，对于流的copy的代码还是比较复杂的，所以我们可以使用别人提供好的方法来简化代码的开发。\",\"如：commons-io\",\"//1. 读取文件 FileInputStream fis = new FileInputStream(\\\"d://a.jpg\\\"); //2. 获取response字节输出流 ServletOutputStream os = response.getOutputStream(); IOUtils.copy(fis,os); fis.close(); \"]},\"2648\":{\"h\":\"3. 示例：以字节的形式输出字符\",\"t\":[\"//1.设置编码 response.setContentType(\\\"text/html;charset=utf-8\\\"); //2.获取字节输出流 ServletOutputStream sos = response.getOutputStream(); //3.用直接流输出字符(并设置好编码) sos.write(\\\"你好\\\".getBytes(\\\"utf-8\\\")); \"]},\"2649\":{\"h\":\"3-8. 转发与重定向\"},\"2650\":{\"h\":\"Ⅰ. Request 请求转发\"},\"2651\":{\"h\":\"1. 介绍\",\"t\":[\"浏览器发送请求给服务器，服务器中对应的资源A接收到请求\",\"资源A处理完请求后将请求发给资源B\",\"资源B处理完后将结果响应给浏览器\",\"请求从资源A到资源B的过程就叫请求转发\",\"3-8-1\"]},\"2652\":{\"h\":\"2. 请求转发的实现方式\",\"t\":[\"采用request对象的getRequestDispatch方法获取请求转发器对象，然后使用请求转发器对象的forward方法进行转发。\",\"RequestDispatcher getRequestDispatcher(String path) forward(ServletRequest request, ServletResponse response) ======================================================== requset.getRequestDispatcher(\\\"资源B路径\\\").forward(req,resp); \"]},\"2653\":{\"h\":\"3. 转发时共享数据\",\"t\":[\"在转发请求的同时，共享一些数据。\",\"域对象：一个有作用范围的对象，可以在范围内共享数据。\",\"request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据\"]},\"2654\":{\"h\":\"相关方法：\",\"t\":[\"转发时，可以进行数据的共享，需要使用request对象提供的三个方法\",\"//以键值对的形式存储数据到request域[范围,数据是存储在request对象]中 void setAttribute(String name,Object o); //根据key获取值 Object getAttribute(String name); //根据key删除该键值对 void removeAttribute(String name); \"]},\"2655\":{\"h\":\"4. 示例：进行请求转发同时共享数据\",\"t\":[\"在浏览器中输入：http://localhost:8080/demo5\",\"执行结果：控制台打印：demo5 demo6，hello，\",\"结论：/demo5和/demo6的doGet方法都被执行了，且共享数据成功。\",\"@WebServlet(\\\"/demo5\\\") public class ServletDemo5 extends HttpServlet { @Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { System.out.println(\\\"Demo5\\\"); //存储数据 request.setAttribute(\\\"msg\\\",\\\"hello\\\"); //进行转发 request.getRequestDispatcher(\\\"/demo6\\\").forward(request,response); } } //ServletDemo6 @WebServlet(\\\"/demo6\\\") public class ServletDemo6 extends HttpServlet { @Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { System.out.println(\\\"demo6\\\"); //获取转发时发送的共享数据 Object msg = request.getAttribute(\\\"msg\\\"); System.out.println(msg); } } \"]},\"2656\":{\"h\":\"5. 请求转发的特点\",\"t\":[\"浏览器地址栏路径不发生变化：虽然后台从/demo5转发到/demo6,但是浏览器的地址一直是/demo5,未发生变化\",\"只能转发到当前服务器的内部资源：不能从一个服务器通过转发访问另一台服务器\",\"一次请求，可以在转发资源间使用request共享数据\"]},\"2657\":{\"h\":\"Ⅱ. Response 重定向\",\"t\":[\"Response重定向(redirect)：一种资源跳转方式。\",\"3-8-2\"]},\"2658\":{\"h\":\"1. 重定向的过程\",\"t\":[\"浏览器发送请求给服务器，服务器中对应的资源A接收到请求\",\"资源A现在无法处理该请求，就会给浏览器响应一个302的状态码+location的一个访问资源B的路径\",\"浏览器接收到响应状态码为302就会重新发送请求到location对应的访问地址去访问资源B\",\"资源B接收到请求后进行处理并最终给浏览器响应结果，这整个过程就叫重定向\"]},\"2659\":{\"h\":\"2. 重定向的实现方式\",\"t\":[\"需要响应对象，调用setStatus方法响应一个302状态码，然后设置location响应头，响应重定向后的访问路径。\",\"response.setStatus(302); response.setHeader(\\\"location\\\",\\\"资源B的访问路径\\\"); //直接进行重定向 response.sendRedirect(\\\"资源访问路径\\\") //相当于把上面两步合成了一步 \"]},\"2660\":{\"h\":\"3. 示例：重定向\",\"t\":[\"向ResponseDemo1类发送请求，ResponseDemo1类将请求转发给ResponseDemo2。\"]},\"2661\":{\"h\":\"3.1 ResponseDemo1\",\"t\":[\"@WebServlet(\\\"/demo1\\\") public class ResponseDemo1 extends HttpServlet { @Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { System.out.println(\\\"ResponseDemo1\\\"); response.setStatus(302);//设置响应状态码 response.setHeader(\\\"Location\\\",\\\"/demo2\\\");//通过响应头进行重定向 } } \"]},\"2662\":{\"h\":\"3.2 ResponseDemo2\",\"t\":[\"@WebServlet(\\\"/demo2\\\") public class ResponseDemo2 extends HttpServlet { @Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { System.out.println(\\\"ResponseDemo2\\\"); } } \"]},\"2663\":{\"h\":\"3.3 测试\",\"t\":[\"浏览器输入：http://localhost:8080/demo2\",\"输出结果：ResponseDemo1、ResponseDemo2\",\"分析：ResponseDemo1、ResponseDemo2两个类都被访问到了，发生了重定向。\"]},\"2664\":{\"h\":\"4. 重定向的特点\",\"t\":[\"浏览器地址栏发生变化：当进行重定向访问的时候，由于是由浏览器发送的两次请求，所以地址会发生变化\",\"可以重定向到任何位置的资源，包括任意其他服务器上的。\",\"两次请求，不能在多个资源使用request共享数据，因为浏览器发送了两次请求，是两个不同的request对象，就无法通过request对象进行共享数据\"]},\"2665\":{\"h\":\"5. redirect与forward的区别\",\"t\":[\"重定向的特点:redirect【浏览器->服务器】 \",\"地址栏发生变化\",\"重定向可以访问其他站点(服务器)的资源\",\"重定向是两次请求。不能使用request对象来共享数据\",\"转发的特点：forward【服务器->服务器】 \",\"转发地址栏路径不变\",\"转发只能访问当前服务器下的资源\",\"转发是一次请求，可以使用request对象来共享数据\"]},\"2666\":{\"h\":\"Ⅲ. 路径问题\"},\"2667\":{\"h\":\"1. 是否要加虚拟路径\",\"t\":[\"浏览器使用: 需要加虚拟目录(项目访问路径) \",\"超链接，从浏览器发送，需要加\",\"表单，从浏览器发送，需要加\",\"重定向，是由浏览器进行跳转，需要加。\",\"服务端使用: 不需要加虚拟目录 \",\"转发，是从服务器内部跳转，不需要加\",\"当虚拟目录设置为 / 时，加不加是一样的。\"]},\"2668\":{\"h\":\"2. 动态获取虚拟路径\",\"t\":[\"在项目代码里写死虚拟路径，不方便维护，可以使用方法动态获取虚拟路径\",\"String contextPath = request.getContextPath(); response.sendRedirect(contextPath+\\\"/demo2\\\"); //使用动态虚拟路径拼接完整路径 \"]},\"2669\":{\"h\":\"3-9. 域对象\"},\"2670\":{\"h\":\"Ⅰ. 域对象\"},\"2671\":{\"h\":\"1. 概念\",\"t\":[\"域对象就是一个有作用范围的对象，可以在范围内共享数据。\",\"JavaWeb中有四大域对象，分别表示四个范围，在范围内数据可以共享。\",\"之所以他们是域对象，原因是他们都内置了map集合，都有setAttribute和getAttribute方法。\"]},\"2672\":{\"h\":\"2. page域对象\",\"t\":[\"该域对象是JSP中的。\",\"作用域是一个页面，不同页面无法共享域中的数据。\",\"//我们在page1.jsp中存值。 pageContext.setAttribute(\\\"name\\\",\\\"123\\\"); //我们在page1.jsp中取值：此时可以取到值 pageContext域：<%=pageContext.getAttribute(\\\"name\\\") %><br> //定义一个page2.jsp，按照相同的方法取值：此时无法取值 pageContext域：<%=pageContext.getAttribute(\\\"name\\\") %><br> \",\"注意：该域对象仅在JSP中有用，对于前后端分离项目，是没有page域对象的。\"]},\"2673\":{\"h\":\"3. Request域对象\",\"t\":[\"Servlet中的Request请求对象（常用HttpServlet），同时也是Request域对象。\",\"作用域是一次请求，请求转发也是可以共享数据的。\"]},\"2674\":{\"h\":\"生命周期\",\"t\":[\"当请求来时创建request对象\",\"当请求结束时，request就销毁。\",\"每次请求都是一个新的request对象。\"]},\"2675\":{\"h\":\"4. Session域对象\",\"t\":[\"在服务器端通过request.getSession()创建Session对象，就可以实现Session域了。\",\"作用域是一次会话，关闭浏览器数据就会丢失，如果会话不中断，所有页面都可以获取session中的数据。\",\"HttpSession session = request.getSession(); \",\"在同一服务器上不同的request请求是会得到唯一的session。\"]},\"2676\":{\"h\":\"生命周期\",\"t\":[\"在第一次调用request.getSession()方法时，服务器会检查是否已经有对应的session，如果没有就在内存中创建一个session并返回。\",\"当一段时间内session没有被使用（默认为30分钟），则服务器会销毁该session。\",\"如果服务器非正常关闭，没有到期的session也会跟着销毁。\",\"如果调用session提供的invalidate()，可以立即销毁session。\",\"浏览器关闭，会话结束，Session也会消失（储存SessionID的Cookie没有了\"]},\"2677\":{\"h\":\"5. Application域对象\",\"t\":[\"在Servlet中有一个ServletContext对象，该对象代表了整个web应用（Application）。 详见：ServletContext。\"]},\"2678\":{\"h\":\"6. 域对象共有的方法\",\"t\":[\"setAttribute(name,value)：存储数据\",\"getAttribute(name)：根据那么获取对应数据值\",\"removeAttribute(name)：根据name删除数据\"]},\"2679\":{\"h\":\"Ⅱ. ServletContext\"},\"2680\":{\"h\":\"1. 概念\",\"t\":[\"ServletContext对象代表了整个web应用，可以和程序的容器(Tomcat)来通信。\",\"该对象会在Tomcat启动时创建。\"]},\"2681\":{\"h\":\"2. 主要功能\",\"t\":[\"获取MIME类型\",\"域对象：共享数据\",\"获取文件的真实（服务器）路径\"]},\"2682\":{\"h\":\"3. 获取ServletContext对象\",\"t\":[\"可以通过以下两种方式获取，这两种方式获取的是同一个对象。\",\"protected void doGet(HttpServletRequest request, HttpServletResponse resp){ ServletContext servletContext = request.getServletContext(); ServletContext servletContext1 = this.getServletContext(); } \",\"通过Request对象获取\",\"ServletContext ServletRequest.getServletContext(); \",\"通过HttpServlet\",\"ServletContext HttpServlet.getServletContext(); \"]},\"2683\":{\"h\":\"4. 获取MIME类型\"},\"2684\":{\"h\":\"4.1 MIME类型\",\"t\":[\"在互联网通信过程中定义的一种文件数据类型\",\"格式为：大类型/小类型\",\"如：text/html(文本/html)； image/jpeg(图片类型/jpeg格式)\"]},\"2685\":{\"h\":\"4.2 底层\",\"t\":[\"在Tomcat服务器的一个配置文件（ tomcat/conf/web.xml）中，记录了所有的文件的扩展名和和mime类型的对应关系。而ServletContext对象是可以直接跟Tomcat通信的，因此可以使用ServletContext获取指定文件的MIME类型（通过扩展名）。\",\"//web.xml:足有4千行代码记录对照关系 ... <mime-mapping> <extension>m4a</extension> <mime-type>audio/mp4</mime-type> </mime-mapping> ... \"]},\"2686\":{\"h\":\"4.3 getMimeType(String file)：获取文件类型\",\"t\":[\"protected void doGet(HttpServletRequest req, HttpServletResponse resp){ ServletContext context = this.getServletContext(); String filename = \\\"a.jpg\\\";//自定义一个文件名用来测试 String mimeType = context.getMimeType(filename); //image/jpeg } \"]},\"2687\":{\"h\":\"4.4 局限性\",\"t\":[\"该方法是通过后缀名获取文件类型的，而后缀名可以随便定义。\",\"因此获取的mime类型并不是很准确，只能做初步的筛选和使用。\"]},\"2688\":{\"h\":\"5. 作为域对象\",\"t\":[\"一个有作用范围的对象，可以在范围内共享数据。\",\"和request对象一样，其方法也一样（域对象都有相同的三个方法）。\"]},\"2689\":{\"h\":\"5.1 域的范围\",\"t\":[\"最大范围：所有用户的所有请求数据，任何地方都可以保存，任何地方都能获取。\",\"可以理解为：全局变量。\",\"注意：由于所有用户都可以创建和使用，且常驻内存，直到服务器关闭，因此要谨慎使用。[ 比如可以储存access_token ]\"]},\"2690\":{\"h\":\"5.2 方法：\",\"t\":[\"setAttribute(String name,Object value)：设置k-v数据\",\"getAttribute(String name)：通过k获取v\",\"removeAttribute(String name)：通过k移除k-v\",\"protected void doPost(HttpServletRequest req, HttpServletResponse resp){ ServletContext context = this.getServletContext(); Object num = context.getAttribute(\\\"top\\\"); context.setAttribute(\\\"top\\\",num+1); } \"]},\"2691\":{\"h\":\"6. 获取文件服务器路径\",\"t\":[\"这里的路径指的是部署到 Tomcat上的资源和编译后的java类路径，而不是工作空间里的路径。\"]},\"2692\":{\"h\":\"6.1 getRealPath()\",\"t\":[\"参数：参数就是文件的路径（指的是工作目录下的路径）。\",\"该方法的作用就是通过工作目录下的路径，获取其真正部署后的路径。\",\"String ServletContext.getRealPath(); \"]},\"2693\":{\"h\":\"6.2 文件的工作路径\",\"t\":[\"文件可能存在于以下三个地方\",\"web目录下： / 就代表了web目录下，\",\"WEB-INF目录：WEB-INF目录也在web目录下，因此直接使用/WEB-INF表示\",\"src目录：/ （根目录）表示的是web目录，而src不再web目录下，访问src目录的路径为：/WEB-INF/classes/a.jpg（classes默认是编译后的java文件目录）\"]},\"2694\":{\"h\":\"6.3 示例\",\"t\":[\"protected void doPost(HttpServletRequest request, HttpServletResponse response){ ServletContext context = this.getServletContext(); // 获取文件的服务器路径 String b = context.getRealPath(\\\"/b.txt\\\");//web目录下资源访问 //WEB-INF目录下的资源访问 String c = context.getRealPath(\\\"/WEB-INF/c.txt\\\"); //src目录下的资源访问 String a = context.getRealPath(\\\"/WEB-INF/classes/a.txt\\\"); } \"]},\"2695\":{\"h\":\"4-1. Filter\",\"t\":[\"提示\",\"Fileter是JavaWeb核心三模块之一，不过内容不多。\"]},\"2696\":{\"h\":\"1. Filter的位置\",\"t\":[\"Filter是独立的Web模块，应该与Servlet的包在同一目录级创建Filter包，存放Filter类。\"]},\"2697\":{\"h\":\"2. 实现Filter接口\",\"t\":[\"注意是：javax.servlet.Filter接口\",\"import javax.servlet.*; import java.io.IOException; public class filterDemo implements Filter { @Override public void init(FilterConfig filterConfig) throws ServletException { //初始化时的操作，不用关注 } @Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { //这里是过滤器主要操作的内容：重点关注这个 ...//放行前的逻辑 chain.doFilter(request,response);//默认是直接拦截的，需要放行 ...//放行后的逻辑 } @Override public void destroy() { //过滤器正常关闭前的操作，不用关注 } } \"]},\"2698\":{\"h\":\"doFilter：放行\",\"t\":[\"请求被拦截后就不会去访问Servlet了，必须进行放行，才能继续访问接着访问。\",\"使用doFilter方法中的chain对象的doFilter方法进行放行，参数是Request类和Response类\"]},\"2699\":{\"h\":\"放行前的逻辑\",\"t\":[\"请求时会执行的逻辑，向Servlet发送请求时，被拦截器拦截，就会执行放行前的逻辑，然后放行去访问Servlet。\",\"注意：请求阶段，不会执行放行后的逻辑（chain.doFilter后面的代码不会执行）\"]},\"2700\":{\"h\":\"放行后的逻辑\",\"t\":[\"当Servlet进行响应时，也是会被对应的拦截器拦截的吗，此时就会执行放行后的逻辑。\",\"注意：此时放行前的逻辑不会再执行了（chain.doFiter方法以及该方法之前的代码都不会执行）。\"]},\"2701\":{\"h\":\"2. 配置拦截路径\",\"t\":[\"使用@WebFilter注解进行配置，拦截路径有如下四种配置方式\",\"拦截具体的资源：/index.jsp：只有访问index.jsp时才会被拦截\",\"目录拦截：/user/*：访问/user下的所有资源，都会被拦截\",\"后缀名拦截：*.jsp：访问后缀名为jsp的资源，都会被拦截\",\"拦截所有：/*：访问所有资源，都会被拦截\",\"//具体资源路径:只拦截具体的某个路径的访问 @WebServlet(\\\"/index.jsp\\\") //拦截目录:拦截某个目录下所有资源的请求 @WebServlet(\\\"/user/*\\\") //后缀名拦截:对某类格式的资源请求进行拦截 @WebServlet(\\\"*.jsp\\\") //拦截所有资源:访问所有资源时，过滤器都会被执行 @WebServlet(\\\"/*\\\") \"]},\"2702\":{\"h\":\"3. 拦截方式的配置\",\"t\":[\"拦截方式，即资源被访问的方式，一共有5种。\",\"需要使用@WebFilter注解的dispatcherTypes属性来配置，不配置的话有缺省值。\",\"REQUEST：默认值；只有浏览器直接请求的资源，才会被拦截拦截\",\"FORWARD：转发；只有Servlet内部转发的请求，才会被拦截\",\"INCLUDE：包含；转发访问资源，[ 仅了解 ]\",\"ERROR：错误；错误跳转资源，暂略\",\"ASYNC：异步；异步访问资源，用于Ajax的访问，暂略。\",\"@WebFilter(value=\\\"/*\\\", dispatcherTypes = DispatcherType.REQUEST) @WebFilter(value=\\\"/*\\\", dispatcherTypes = DispatcherType.FORWARD) \"]},\"2703\":{\"h\":\"配置多个值\",\"t\":[\"dispatcherTypes的值可以是个数组，来同时配置多个值\",\"@WebFilter( value=\\\"/*\\\", dispatcherTypes ={DispatcherType.REQUEST,DispatcherType.FORWARD} ) \"]},\"2704\":{\"h\":\"4. 过滤器链：多个过滤器\",\"t\":[\"某个资源可以有多个过滤器时，此时注意过滤器执行的顺序\",\"4-1-1\"]},\"2705\":{\"h\":\"多个过滤器的执行顺序\",\"t\":[\"先进，后出\",\"过滤器1：请求，执行chain.doFilter()前的代码\",\"过滤器2：请求，执行chain.doFilter()前的代码\",\"资源的访问\",\"过滤器2：响应，执行chain.doFilter()后的代码\",\"过滤器1：响应，执行chain.doFilter()后的代码\"]},\"2706\":{\"h\":\"5. 过滤器的优先级\",\"t\":[\"按照过滤器类名的字符串自然排序规则比较，值小的先执行\",\"如： AFilter 和 BFilter，AFilter就先执行了。\"]},\"2707\":{\"h\":\"4-2. Listener\",\"t\":[\"提示\",\"Listener 表示监听器，是 JavaWeb 三大组件(Servlet、Filter、Listener)之一，不过内容不多。作用类似于框架中的钩子函数\"]},\"2708\":{\"h\":\"Ⅰ. 监听器介绍\"},\"2709\":{\"h\":\"1. 观察者模式\",\"t\":[\"监听器采用的就是观察者模式。#\",\"观察者：监控『被观察者』的行为，一旦发现『被观察者』触发了事件，就会调用事先准备好的方法执行操作。\",\"被观察者：『被观察者』一旦触发了被监控的事件，就会被『观察者』发现。\"]},\"2710\":{\"h\":\"2. 监听器概念\",\"t\":[\"专门用于对其他对象身上发生的事件或状态改变进行监听和相应处理的对象，当被监视的对象发生情况时，立即采取相应的行动。\"]},\"2711\":{\"h\":\"3. Servlet监听器->Listener\",\"t\":[\"Servlet规范中定义的一种特殊类，它用于监听Web应用程序中的ServletContext，HttpSession 和HttpServletRequest等域对象的创建与销毁事件，以及监听这些域对象中的属性发生修改的事件。\"]},\"2712\":{\"h\":\"4. 监听器分类\",\"t\":[\"4-2-1\",\"域对象监听器\",\"域对象的属性域监听器\",\"Session域中数据的监听器\"]},\"2713\":{\"h\":\"Ⅱ. 监听器列表\",\"t\":[\"JavaWeb 提供了8个监听器：\"]},\"2714\":{\"h\":\"1. ServletContextListener\",\"t\":[\"作用：监听ServletContext对象的创建与销毁\",\"方法名\",\"作用\",\"contextInitialized(ServletContextEvent sce)\",\"ServletContext创建时调用\",\"contextDestroyed(ServletContextEvent sce)\",\"ServletContext销毁时调用\",\"ServletContextEvent对象代表从ServletContext对象身上捕获到的事件，通过这个事件对象我们可以获取到ServletContext对象。\"]},\"2715\":{\"h\":\"2. HttpSessionListener\",\"t\":[\"作用：监听HttpSession对象的创建与销毁\",\"方法名\",\"作用\",\"sessionCreated(HttpSessionEvent hse)\",\"HttpSession对象创建时调用\",\"sessionDestroyed(HttpSessionEvent hse)\",\"HttpSession对象销毁时调用\",\"HttpSessionEvent对象代表从HttpSession对象身上捕获到的事件，通过这个事件对象我们可以获取到触发事件的HttpSession对象。\"]},\"2716\":{\"h\":\"3. ServletRequestListener\",\"t\":[\"作用：监听ServletRequest对象的创建与销毁\",\"方法名\",\"作用\",\"requestInitialized(ServletRequestEvent sre)\",\"ServletRequest对象创建时调用\",\"requestDestroyed(ServletRequestEvent sre)\",\"ServletRequest对象销毁时调用\",\"ServletRequestEvent对象代表从HttpServletRequest对象身上捕获到的事件，通过这个事件对象我们可以获取到触发事件的HttpServletRequest对象。另外还有一个方法可以获取到当前Web应用的ServletContext对象。\"]},\"2717\":{\"h\":\"4. ServletContextAttributeListener\",\"t\":[\"作用：监听ServletContext中属性的创建、修改和销毁\",\"方法名\",\"作用\",\"attributeAdded(ServletContextAttributeEvent scab)\",\"向ServletContext中添加属性时调用\",\"attributeRemoved(ServletContextAttributeEvent scab)\",\"从ServletContext中移除属性时调用\",\"attributeReplaced(ServletContextAttributeEvent scab)\",\"当ServletContext中的属性被修改时调用\",\"ServletContextAttributeEvent对象代表属性变化事件，它包含的方法如下：\",\"方法名\",\"作用\",\"getName()\",\"获取修改或添加的属性名\",\"getValue()\",\"获取被修改或添加的属性值\",\"getServletContext()\",\"获取ServletContext对象\"]},\"2718\":{\"h\":\"5. HttpSessionAttributeListener\",\"t\":[\"作用：监听HttpSession中属性的创建、修改和销毁\",\"方法名\",\"作用\",\"attributeAdded(HttpSessionBindingEvent se)\",\"向HttpSession中添加属性时调用\",\"attributeRemoved(HttpSessionBindingEvent se)\",\"从HttpSession中移除属性时调用\",\"attributeReplaced(HttpSessionBindingEvent se)\",\"当HttpSession中的属性被修改时调用\",\"HttpSessionBindingEvent对象代表属性变化事件，它包含的方法如下：\",\"方法名\",\"作用\",\"getName()\",\"获取修改或添加的属性名\",\"getValue()\",\"获取被修改或添加的属性值\",\"getSession()\",\"获取触发事件的HttpSession对象\"]},\"2719\":{\"h\":\"6. ServletRequestAttributeListener\",\"t\":[\"作用：监听ServletRequest中属性的创建、修改和销毁\",\"方法名\",\"作用\",\"attributeAdded(ServletRequestAttributeEvent srae)\",\"向ServletRequest中添加属性时调用\",\"attributeRemoved(ServletRequestAttributeEvent srae)\",\"从ServletRequest中移除属性时调用\",\"attributeReplaced(ServletRequestAttributeEvent srae)\",\"当ServletRequest中的属性被修改时调用\",\"ServletRequestAttributeEvent对象代表属性变化事件，它包含的方法如下：\",\"方法名\",\"作用\",\"getName()\",\"获取修改或添加的属性名\",\"getValue()\",\"获取被修改或添加的属性值\",\"getServletRequest ()\",\"获取触发事件的ServletRequest对象\"]},\"2720\":{\"h\":\"7. HttpSessionBindingListener\",\"t\":[\"作用：监听某个对象在Session域中的创建与移除\",\"方法名\",\"作用\",\"valueBound(HttpSessionBindingEvent event)\",\"该类的实例被放到Session域中时调用\",\"valueUnbound(HttpSessionBindingEvent event)\",\"该类的实例从Session中移除时调用\",\"HttpSessionBindingEvent对象代表属性变化事件，它包含的方法如下：\",\"方法名\",\"作用\",\"getName()\",\"获取当前事件涉及的属性名\",\"getValue()\",\"获取当前事件涉及的属性值\",\"getSession()\",\"获取触发事件的HttpSession对象\"]},\"2721\":{\"h\":\"8. HttpSessionActivationListener\",\"t\":[\"作用：监听某个对象在Session中的序列化与反序列化。\",\"方法名\",\"作用\",\"sessionWillPassivate(HttpSessionEvent se)\",\"该类实例和Session一起钝化到硬盘时调用\",\"sessionDidActivate(HttpSessionEvent se)\",\"该类实例和Session一起活化到内存时调用\",\"HttpSessionEvent对象代表事件对象，通过getSession()方法获取事件涉及的HttpSession对象。\"]},\"2722\":{\"h\":\"Ⅲ. ServletContextListener\",\"t\":[\"将来使用SpringMVC的时候，会用到一个ContextLoaderListener，这个监听器就实现了ServletContextListener接口，表示对ServletContext对象本身的生命周期进行监控。\"]},\"2723\":{\"h\":\"1. 监听器的使用步骤\",\"t\":[\"定义一个类，实现某个监听器接口\",\"复写接口中的方法\",\"进行监听器配置：添加@WebLister注解\"]},\"2724\":{\"h\":\"2. ServletContextListener接口的方法\",\"t\":[\"该监听器接口一共有两个方法：\",\"void contextDestroyed(ServletContextEvent sce) ：ServletContext对象被销毁之前会调用该方法，一般用来加载资源文件\",\"void contextInitialized(ServletContextEvent sce) ：ServletContext对象创建后会调用该方法\"]},\"2725\":{\"h\":\"使用示例\",\"t\":[\"//file：web/listener/ContextLoaderListener public class ContextLoaderListener implement ServletContextListener{ public void contextInitialized(ServletContextEvent sce){ System.out.print(\\\"ServletContext对象被创建了...\\\"); } public void contextInitialized(ServletContextEvent sce){ System.out.print(\\\"ServletContext对象被销毁了...\\\"); } } \"]},\"2726\":{\"h\":\"3. 注册监听器\",\"t\":[\"在实现了监听器接口的类上添加@WebLister注解\",\"该注解不需要任何参数\",\"@WebListener public class ContextLoaderListener implement ServletContextListener{ ... } \"]},\"2727\":{\"h\":\"4. 监听器触发机制\",\"t\":[\"监听器是通过事件自动触发的。\"]},\"2728\":{\"h\":\"说明\",\"t\":[\"企业都是RESTAPI：前后端分离。\",\"JSP仅作了解，一般不使用JSP。\",\"JSP一般充当MVC模式中的V：view，视图\",\"警告\",\"了解都没必要，浪费时间，略了\"]},\"2729\":{\"h\":\"6-1. Jar包\"},\"2730\":{\"h\":\"Ⅰ. Jar包介绍\"},\"2731\":{\"h\":\"1. 概述\",\"t\":[\"JAR文件（Java归档，英语：Java Archive）是一种软件包文件格式，通常用于聚合大量的Java类文件、相关的元数据和资源（文本、图片等）文件到一个文件，以便开发Java平台应用软件或库。\",\"JAR文件是一种归档文件，以ZIP格式构建，以.jar为文件扩展名。用户可以使用JDK自带的jar命令创建或提取JAR文件。也可以使用其他zip压缩工具，不过压缩时zip文件头里的条目顺序很重要，因为Manifest文件常需放在首位。JAR文件内的文件名是Unicode文本。\"]},\"2732\":{\"h\":\"2. Java包解析\",\"t\":[\"我们自己写的Java代码编译成的是class文件，把多个class文件进行打包，就成了一个jar包，jar包其实就是class文件的集合，多个jar包放到一起我们就称之为组件（组件也可以理解为工具类）工具类可以辅助我们进行开发。\"]},\"2733\":{\"h\":\"3. Jar包与zip包\",\"t\":[\"jar 与 zip 唯一的区别就是在 jar 文件的内容中，包含了一个 META-INF/MANIFEST.MF 文件，该文件是在生成 jar 文件的时候自动创建的，作为jar里面的\\\"详情单\\\"，包含了该Jar包的版本、创建人和类搜索路径Class-Path等信息，当然如果是可执行Jar包，会包含Main-Class属性，表明Main方法入口，尤其是较为重要的Class-Path和Main-Class。\"]},\"2734\":{\"h\":\"4. Jar包的内容\",\"t\":[\"jar包主要是对class文件进行打包，而非.java文件。\",\"java编译生成的class文件是平台无关的，这就意味着jar包是跨平台的，所以不必关心涉及具体平台的问题。\",\"除了class外，还有其他的元数据文件、资源文件等。\"]},\"2735\":{\"h\":\"5. Jar包签名\",\"t\":[\"可以对 JAR 文件内容加上数字化签名。这样，能够识别签名的工具就可以有选择地为您授予软件安全特权，这是其他文件做不到的，它还可以检测代码是否被篡改过。\"]},\"2736\":{\"h\":\"6. Jar包的作用\",\"t\":[\"用于发布和使用类库\",\"作为应用程序和扩展的构建单元\",\"作为组件、applet 或者插件程序的部署单位\",\"用于打包与组件相关联的辅助资源\"]},\"2737\":{\"h\":\"7. 为什么要打jar包\"},\"2738\":{\"h\":\"7.1 发布和使用类库\",\"t\":[\"当我们开发了一个程序以后，程序中有很多的类，如果需要提供给别人使用,发给对方一大堆源文件是非常不好的，因此通常需要把这些类以及相关的资源文件打包成一个 jar 包,把这个 jar 包提供给别人使用,同时提供给使用者清晰的文档。这样他人在拿到我们提供的jar之后，就能方便地进行调用。而且安全。能够对JAR文件进行数字签名，只让能够识别数字签名的用户使用里面的东西。\"]},\"2739\":{\"h\":\"7.2 util类库\",\"t\":[\"建议平时写代码时，将代码中的通用部分抽离出来，逐渐积累一些通用的util类（工具类），并逐渐将其模块模块化，最后打成jar包在项目或模块中使用。 积累jar包的过程也会考验代码的重构能力和模块的抽象能力。\"]},\"2740\":{\"h\":\"Ⅱ. 使用Jar包\"},\"2741\":{\"h\":\"1. 使用Java内置的Jar包\",\"t\":[\"使用java自带jar包：也称基础类库，又分两类分别存放在两个地方\",\"一是在java安装目录的jre\\\\lib下，用于已发布的软件运行时调用，可称为jvm环境\",\"二是在java安装目录的jdk\\\\jre\\\\lib下，用于开发时调试软件调用，可称为开发环境\",\"在自己新建的项目工程中，基础类库下的类不用导包，即不用手动import，系统默认导入，System、Exception、Math、String，都属于java.lang包下，无需import操作。\"]},\"2742\":{\"h\":\"2. 打Jar包\"},\"2743\":{\"h\":\"2.1 手动打\",\"t\":[\"先使用javac编译java文件，得到class文件，\",\"创建manifest：内容如下\",\"Manifest-Version: 1.0 Main-Class: addJarPkg \",\"把编译好的class文件和manifest文件放入指定文件夹，如test\",\"在cmd中运行命令\",\"jar -cvfm main.jar mainfest -C test. \"]},\"2744\":{\"h\":\"2.2 使用IDEA\",\"t\":[\"点击项目->点击“File”菜单 -> Project Structure\",\"点击\\\"Artifacts\\\" -> 绿色的\\\"+\\\" -> “JAR” -> Empty\",\"Name栏填入自定义的名字，Output ditectory选择jar包目标目录，Available Elements里双击需要添加到jar包的文件，即可添加到左边的jar包目录下，具体看下图\",\"6-1-1\",\"点击Create Manifest，选择放置MANIFEST.MF的文件路径（直接默认项目根目录就行，尽量不要选别的路径，可能会造成不必要的错误），点击OK。\",\"点击Main Class后面选择按钮\",\"弹出框中选择需要运行程序入口main函数，点击OK\",\"以上设置完之后，点击OK\",\"点击菜单中“Build” -> “Build Artifacts” -双击弹出框中待生成jar包下面的build即可\"]},\"2745\":{\"h\":\"3. 添加Jar包依赖\",\"t\":[\"提示\",\"实际开发中都是使用Maven添加的。\",\"手动添加方式：暂略。\"]},\"2746\":{\"h\":\"Ⅲ. Jar包和war包\"},\"2747\":{\"h\":\"1. war包介绍\",\"t\":[\"war是一个可以直接运行的web模块，通常应用于web项目中，将其打成war包部署到Tomcat等容器中。将war包放置在tomcat根目录的webapps目录下，如果Tomcat成功启动，这个包就会自动解压，就相当于发布了。\"]},\"2748\":{\"h\":\"2. jar包与war包的对比\",\"t\":[\"除了目录结构外，jar里有的war里也都有。\",\"war包是Sun提出的一种web应用程序格式，与jar类似，是很多文件的压缩包。war包中的文件按照一定目录结构来组织。根据其根目录下包含有html和jsp文件，或者包含有这两种文件的目录，另外还有WEB-INF目录。\",\"通常在WEB-INF目录下含有一个web.xml文件和一个classes目录，web.xml是这个应用的配置文件，而classes目录下则包含编译好的servlet类和jsp，或者servlet所依赖的其他类（如JavaBean）。\",\"这些所依赖的类也可以打包成jar包放在WEB-INF下的lib目录下。这也就意味着，war能打包的内容，jar也都可以。\"]},\"2749\":{\"h\":\"3. jar包和war包使用\",\"t\":[\"对于现今的应用来讲，主流都是用jar来替代war了。因为war仅服务于Web应用，而jar的涵盖范围更广。目前，war相较于jar的唯一优势在于，当tomcat的进程启动之后，将符合规范的war包放在tomcat的webapps目录下的时候，tomcat会自动将war包解压并对外提供web服务，而jar包则不行。\"]},\"2750\":{\"h\":\"4. 微服务\",\"t\":[\"过去由于并未通过微服务将机器资源进行隔离，因此提倡的是一个tomcat实例管理多个java web项目，因此对于java web项目，都提倡将其打成war包然后放置于同一个tomcat的webapps下进行管理，便于资源的统一利用。\",\"随着微服务成为主流，同一台机器上的多个web服务可以通过docker等容器进行隔离，因此我们可以让每个容器都单独运行一个tomcat实例，每个tomcat实例独立运行一个web服务，换句话说，我们可以像springboot一样，将tomcat和web项目打成jar放在一起，以内嵌的方式来启动web服务，使得所有服务的启动方式更优雅和统一，不管是Web服务还是后台服务，均使用java -jar指令来启动。\"]},\"2751\":{\"h\":\"Ⅳ. Maven\",\"t\":[\"提示\",\"Maven是包管理器，实际开发中，都是使用Maven来管理包的。\",\"详见：框架>Maven\"]},\"2752\":{\"h\":\"6-2. Web架构\"},\"2753\":{\"h\":\"Ⅰ. MVC\"},\"2754\":{\"h\":\"1. 概述\",\"t\":[\"MVC 是一种分层开发的模式，其中\",\"M：Model，业务模型，处理业务【JavaBean】 \",\"完成具体的业务操作，如：查询数据库，封装对象\",\"V：View，视图，界面展示【前端】 \",\"展示数据\",\"C：Controller，控制器。Servlet \",\"获取用户的输入\",\"调用模型\",\"将数据交给视图进行展示\"]},\"2755\":{\"h\":\"2. 过程\",\"t\":[\"控制器（serlvlet）用来接收浏览器发送过来的请求，控制器调用模型（JavaBean）来获取数据，比如从数据库查询数据；控制器获取到数据后再交由视图（JSP）进行数据展示\",\"6-2-1\"]},\"2756\":{\"h\":\"3. MVC的优点\",\"t\":[\"职责单一，互不影响。每个角色做它自己的事，各司其职。\",\"有利于分工协作。\",\"有利于组件重用\"]},\"2757\":{\"h\":\"Ⅱ. 三层架构\",\"t\":[\"三层架构\"]},\"2758\":{\"h\":\"1. 概述\",\"t\":[\"三层架构是将我们的项目分成了三个层面，分别是 表现层、业务逻辑层、数据访问层。\",\"数据访问层：对数据库的CRUD基本操作\",\"业务逻辑层：对业务逻辑进行封装，组合数据访问层层中基本功能，形成复杂的业务逻辑功能。 \",\"例如 注册业务功能 ，我们会先调用 数据访问层 的 selectByName() 方法判断该用户名是否存在，如果不存在再调用 数据访问层 的 insert() 方法进行数据的添加操作\",\"表现层：接收请求，封装数据，调用业务逻辑层，响应数据\",\"6-2-2\"]},\"2759\":{\"h\":\"2. 业务流程\",\"t\":[\"浏览器发送请求，表现层的Servlet接收请求并调用业务逻辑层的方法进行业务逻辑处理，而业务逻辑层方法调用数据访问层方法进行数据的操作，依次返回到serlvet，然后servlet将数据交由 JSP 进行展示。\"]},\"2760\":{\"h\":\"3. 命名\",\"t\":[\"三层架构的每一层都有特有的包名称：\",\"表现层： controller 或者 web\",\"业务逻辑层：service\",\"数据访问层：dao 或者 mapper（如果使用MyBatis）\"]},\"2761\":{\"h\":\"4. 框架\",\"t\":[\"SSM框架就是对三层架构的封装，不同的框架对应不同的层。\",\"SpringMVC：表现层\",\"Spring：业务逻辑层\",\"MyBatis：数据访问层\",\"6-2-3\"]},\"2762\":{\"h\":\"Ⅲ. MVC与三层架构\"},\"2763\":{\"h\":\"1. 关系\",\"t\":[\"6-2-4\",\"如上图上半部分是 MVC 模式，上图下半部分是三层架构。 MVC 模式 中的 C（控制器）和 V（视图）就是 三层架构 中的表现层，而 MVC 模式 中的 M（模型）就是 三层架构 中的 业务逻辑层 和 数据访问层。\"]},\"2764\":{\"h\":\"2. 总结\",\"t\":[\"可以将 MVC 模式 理解成是一个大的概念，而 三层架构 是对 MVC 模式 实现架构的思想。 那么我们以后按照要求将不同层的代码写在不同的包下，每一层里功能职责做到单一，将来如果将表现层的技术换掉，而业务逻辑层和数据访问层的代码不需要发生变化。\"]},\"2765\":{\"h\":\"3. 应用\",\"t\":[\"web（表示层）= Controller+View = SpringMVC\",\"service（业务逻辑层） = Modle - dao = Spring\",\"dao（数据访问层）= 基本的数据访问操作 = MyBatista\"]},\"2766\":{\"h\":\"6-3. XML\",\"t\":[\"提示\",\"使用Spring全家桶开发时，很多配置文件都是xml格式，因此需要对xml了解一下。\",\"仅了解，实际使用时，都有固定的模板。\"]},\"2767\":{\"h\":\"Ⅰ. xml 介绍\",\"t\":[\"xml：Extensible Markup Language，W3C推出的可扩展标记语言。\",\"标签都是自定义的，什么标签名都可以。\"]},\"2768\":{\"h\":\"1. xml与html的区别\",\"t\":[\"xml标签都是自定义的，html标签是预定义。\",\"xml的语法严格，html语法松散\",\"xml是存储数据的，html是展示数据\"]},\"2769\":{\"h\":\"2. xml的用途\",\"t\":[\"作为配置文件，这是主要用途，很多框架的配置文件都是用xml写的\",\"在网络中传输数据，这个已经基本被JSON取代了\"]},\"2770\":{\"h\":\"3. 基本语法\",\"t\":[\"xml文档的后缀名 .xml\",\"xml第一行必须定义为文档声明\",\"xml文档中必须有且仅有一个根标签\",\"属性值必须使用引号(单双都可)引起来\",\"标签必须正确关闭\",\"xml标签名称区分大小写\"]},\"2771\":{\"h\":\"4. 简单示例\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?> <server id=\\\"1\\\"> <uname>shit</uname> <pwd>123456</pwd> <url>fuck.com</url> </server> \"]},\"2772\":{\"h\":\"5. xml的组成部分\",\"t\":[\"①文档声明 \",\"version：版本，必备，现在是1.0。\",\"encoding：编码，建议：utf-8\",\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?> \",\"②指令：略，这个指令是用来结合CSS控制标签的样式的，因为早起XML是用来取代HTML的，现在XML不用来作为前端显示页面了，指令已经没用了。\",\"③标签：自定义的标签名 \",\"规则：遵循常用的命名规则即可，注意不能包含空格，不能以xml开头\",\"④属性：id属性值是唯一的，用引号括起来。\",\"⑤文本：CDATA区，在该区域中的数据会被原样展示 \",\"<![CDATA[ 数据 ]]>\",\"⑥注释：和HTML一样。\"]},\"2773\":{\"h\":\"Ⅱ. 约束\"},\"2774\":{\"h\":\"1. 什么是约束\",\"t\":[\"xml现在的主要作用是作为配置文件，由于xml中标签是自由设置的，所以框架的使用者可以随便配置xml。但是对于框架来说，只有某些标签才是有意义的，因此框架要对xml配置文件中的内容进行一些约束。\",\"本质：规定xml文档（配置文件）的书写规则\"]},\"2775\":{\"h\":\"2. 约束文档的技术实现\",\"t\":[\"DTD:一种简单的约束技术（有缺陷，只能约束格式，无法约束内容）\",\"Schema:一种复杂的约束技术\",\"能够在xml中引入约束文档，能简单看懂约束文档即可。\"]},\"2776\":{\"h\":\"3. DTD\"},\"2777\":{\"h\":\"3.1 dtd文档示例\",\"t\":[\"<!-- 声明一个students标签，+和正则一样，必须出现1次或多次 --> <!ELEMENT students (student+) > <!-- 里面可以声明三个有参的子标签 --> <!ELEMENT student (name,age,sex)> <!-- 声明name标签，值是字符串 --> <!ELEMENT name (#PCDATA)> <!-- 声明age标签，值是字符串 --> <!ELEMENT age (#PCDATA)> <!-- 声明sex标签，值是字符串 --> <!ELEMENT sex (#PCDATA)> <!-- 声明student标签的属性，属性名是number，类型是ID，必须设置 --> <!ATTLIST student number ID #REQUIRED> \"]},\"2778\":{\"h\":\"3.2 引入dtd文档\",\"t\":[\"根据约束文档写xml文档之前，要先将dtd文档引入xml文档中。 内部dtd：将约束规则定义在xml文档中【不常用】 外部dtd：将约束的规则定义在外部的dtd文件中 本地：<!DOCTYPE 根标签名 SYSTEM \\\"dtd文件的位置\\\"> 网络：<!DOCTYPE 根标签名 PUBLIC \\\"dtd文件名字\\\" \\\"dtd文件的位置URL\\\">\"]},\"2779\":{\"h\":\"3.3 引入dtd，编写xml\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE students SYSTEM \\\"student.dtd\\\"> <students> <student number=\\\"s001\\\"> <name>zhangsan</name> <age>abc</age> <sex>hehe</sex> </student> </students> \"]},\"2780\":{\"h\":\"4. schema\",\"t\":[\"比dtd更复杂，能约束更复杂的内容，包括标签、格式、内容，包含了很多正则。\"]},\"2781\":{\"h\":\"4.1 Schema示例\",\"t\":[\"本身也是个xml文档\",\"xsd:element：定义元素，包含元素名和类型\",\"xsd:complexType：自定义类型的说明，name=自定义的类型名\",\"<?xml version=\\\"1.0\\\"?> <xsd:schema xmlns=\\\"http://www.itcast.cn/xml\\\" xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" targetNamespace=\\\"http://www.itcast.cn/xml\\\" elementFormDefault=\\\"qualified\\\" > <!-- 声明一个自定义类型的元素 --> <xsd:element name=\\\"students\\\" type=\\\"studentsType\\\"/> <!-- 约束自定义的studentsType类型，complexTye:组合类型 --> <xsd:complexType name=\\\"studentsType\\\"> <!-- sequence：按顺序出现 student元素 --> <xsd:sequence> <!-- 定义student元素，类型自定义，最少出现0次，最多无限制 --> <xsd:element name=\\\"student\\\" type=\\\"studentType\\\" minOccurs=\\\"0\\\" maxOccurs=\\\"unbounded\\\"/> </xsd:sequence> </xsd:complexType> <!-- 约束自定义的studentTyep类型 --> <xsd:complexType name=\\\"studentType\\\"> <!-- sequence：按顺序出现以下元素 --> <xsd:sequence> <!-- type是String类型 --> <xsd:element name=\\\"name\\\" type=\\\"xsd:string\\\"/> <!-- 自定义类型：ageType --> <xsd:element name=\\\"age\\\" type=\\\"ageType\\\" /> <!-- 自定义类型：sexType --> <xsd:element name=\\\"sex\\\" type=\\\"sexType\\\" /> </xsd:sequence> <!-- studentType里的属性，属性名：number，类型是numberType，required：必须出现 --> <xsd:attribute name=\\\"number\\\" type=\\\"numberType\\\" use=\\\"required\\\"/> </xsd:complexType> <!-- 对sexType类型的约束，simple：简单类型 --> <xsd:simpleType name=\\\"sexType\\\"> <!-- 基本数据格式：string --> <xsd:restriction base=\\\"xsd:string\\\"> <!-- enumeration:枚举，二选一 --> <xsd:enumeration value=\\\"male\\\"/> <xsd:enumeration value=\\\"female\\\"/> </xsd:restriction> </xsd:simpleType> <!-- 对ageType类型的约束 --> <xsd:simpleType name=\\\"ageType\\\"> <!-- 基本数据格式是integer --> <xsd:restriction base=\\\"xsd:integer\\\"> <!-- 最小值 --> <xsd:minInclusive value=\\\"0\\\"/> <!-- 最大值 --> <xsd:maxInclusive value=\\\"256\\\"/> </xsd:restriction> </xsd:simpleType> <!-- 对numberType类型的约束 --> <xsd:simpleType name=\\\"numberType\\\"> <!-- 基本数据格式：string --> <xsd:restriction base=\\\"xsd:string\\\"> <!-- 正则约束，必须heima开头后跟_加4个数字 --> <xsd:pattern value=\\\"heima_\\\\d{4}\\\"/> </xsd:restriction> </xsd:simpleType> </xsd:schema> \"]},\"2782\":{\"h\":\"4.2 引入约束写xml\",\"t\":[\"可以同时引入多个约束文档，使用命名空间区分。\",\"<!-- students：根标签 --> <students //引入xsi前缀：这行是固定格式 xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" //为命名空间起个前缀，默认前缀是空 xmlns=\\\"http://www.itcast.cn/xml\\\" //为命名空间起前缀，a就前缀 xmlns:a=\\\"http://www.dsaft.cn/xml\\\" //使用xsi引入文件，schemaLocation：命名空间，student.xsd是文件名 xsi:schemaLocation=\\\"http://www.itcast.cn/xml student.xsd\\\" > <!-- 标签省略了前缀，即为默认命名空间 --> <student number=\\\"heima_0001\\\"> <name>tom</name> <age>18</age> <sex>male</sex> </student> <!-- 指定命名空间的标签 --> <a:name>helo</name> </students> \"]},\"2783\":{\"h\":\"6-4. 会话技术\",\"t\":[\"提醒\",\"当前开发，以移动平台为主，因此优先采用的是Token技术。\",\"Cookie和Session只有浏览器能用\"]},\"2784\":{\"h\":\"Ⅰ. 会话技术介绍\"},\"2785\":{\"h\":\"1. 会话\",\"t\":[\"用户打开浏览器，访问web服务器的资源，会话建立，直到有一方断开连接，会话结束。\",\"在一次会话中可以包含多次请求和响应。\",\"从浏览器发出请求到服务端响应数据给前端之后，一次会话(在浏览器和服务器之间)就被建立了\",\"会话被建立后，如果浏览器或服务端都没有被关闭，则会话就会持续建立着\",\"浏览器和服务器就可以继续使用该会话进行请求发送和响应，上述的整个过程就被称之为会话。\"]},\"2786\":{\"h\":\"2. 不同的会话\",\"t\":[\"每个浏览器与服务器建立的会话都是不同的会话，如图，一共有三个会话。\",\"6-4-1\"]},\"2787\":{\"h\":\"3. 会话跟踪\",\"t\":[\"一种维护浏览器状态的方法，服务器需要识别多次请求是否来自于同一浏览器，以便在同一次会话的多次请求间共享数据。\",\"服务器会收到多个请求，这多个请求可能来自多个浏览器，如上图中的6个请求来自3个浏览器\",\"服务器需要用来识别请求是否来自同一个浏览器\",\"服务器用来识别浏览器的过程，这个过程就是会话跟踪\",\"服务器识别浏览器后就可以在同一个会话中多次请求之间来共享数据\"]},\"2788\":{\"h\":\"4. 无状态协议\",\"t\":[\"浏览器和服务器之间使用的是HTTP请求来进行数据传输，HTTP协议是无状态的，每次浏览器向服务器请求时，服务器都会将该请求视为新的请求。HTTP协议设计成无状态的目的是让每次请求之间相互独立，互不影响，请求与请求之间独立后，就无法实现多次请求之间的数据共享。\"]},\"2789\":{\"h\":\"5. 会话追踪技术\",\"t\":[\"cookie：客户端会话跟踪技术\",\"session：服务端会话跟踪技术 这两个技术都可以实现会话跟踪，它们之间最大的区别:Cookie是存储在浏览器端而Session是存储在服务器端\"]},\"2790\":{\"h\":\"Ⅱ. Cookie\",\"t\":[\"客户端会话技术，将数据保存到客户端，以后每次请求都携带Cookie数据进行访问。\"]},\"2791\":{\"h\":\"1. 使用步骤\",\"t\":[\"Servlet-1：创建Cookie对象，绑定数据\",\"Servlet-1：发送Cookie对象->给浏览器\",\"浏览器：保存Cookie，并在下一次请求时携带Cookie\",\"Servlet-2：拿到浏览器发送请求时携带的Cookie数据\"]},\"2792\":{\"h\":\"2. Cookie的相关方法\"},\"2793\":{\"h\":\"2.1 创建Cookie对象\",\"t\":[\"同时构造方法会设置cookie的key 和value\",\"new Cookie(String name, String value) Cookie cookie = new Cookie(\\\"key\\\",\\\"value\\\"); \"]},\"2794\":{\"h\":\"2.2 发送Cookie对象\",\"t\":[\"将cookie对象通过响应对象Response，发送到客户端。\",\"void ServletResponse.addCookie(Cookie c); response.addCookie(cookie); \"]},\"2795\":{\"h\":\"2.3 获取Cookie数据\",\"t\":[\"可以通过请求对象Request获取cookie，Cookie可能有多个，因此返回的是数组\",\"Cookie[] ServletRequest.getCookies(); Cookie[] cookies = request.getCookies(); \"]},\"2796\":{\"h\":\"2.4 获取Cookie的name和value\",\"t\":[\"遍历获取的Cookie数据（数组）,来获取具体的key，value\",\"String Cookie.getName(); //获取Cookie的name String Cookie.getValue();//获取Cookie的Value //循环Cookie[]获取Cookie for (Cookie c : cs) { String name = c.getName(); String value = c.getValue(); } \"]},\"2797\":{\"h\":\"3. Cookie使用范例\"},\"2798\":{\"h\":\"3.1 servlet1：创建cookie\",\"t\":[\"protected void doPost(HttpServletRequest req, HttpServletResponse resp){ //1.创建Cookie对象 Cookie c = new Cookie(\\\"msg\\\",\\\"hello\\\"); //2.发送Cookie response.addCookie(c); } \"]},\"2799\":{\"h\":\"3.2 servlet2：获取cookie\",\"t\":[\"protected void doPost(HttpServletRequest req, HttpServletResponse resp){ //3. 获取Cookie Cookie[] cs = req.getCookies(); //4.获取数据，遍历Cookies if(cs != null){ for (Cookie c : cs) { String name = c.getName(); if(\\\"msg\\\".equals(name)){ String value = c.getValue(); System.out.println(name+\\\":\\\"+value); break; } } } } \"]},\"2800\":{\"h\":\"4. Cookie的工作原理\",\"t\":[\"提示：Cookie有关的所有操作都是基于请求头和响应头的，只是Servlet直接封装了一套api，省去了直接操作消息头。\"]},\"2801\":{\"h\":\"4.1 Servlet1创建并发送Cookie\",\"t\":[\"创建new Cookie(String name, String value)的本质是创建了一个响应头\",\"set-cookie:msg=hello \",\"然后通过response响应给了浏览器，响应头里就有了set-cookie\"]},\"2802\":{\"h\":\"4.2 浏览器：保存Cookie，并在下次请求时携带Cookie\",\"t\":[\"浏览器会根据HTTP协议，自动将响应头里的set-cookie保存起来\",\"当浏览器再次发送强求时，会携带上cookie。\",\"cookie:msg=hello \"]},\"2803\":{\"h\":\"4.3 cookie的识别\",\"t\":[\"cookie不止是储存了键值对，还储存了：\",\"域名（cookie的适用范围）\",\"路径（细化cookie的适用范围）\",\"过期时间：默认关掉浏览器会话就会失效，也可以指定会话时间\"]},\"2804\":{\"h\":\"5. 发送多个Cookie\",\"t\":[\"可以创建多个Cookie对象，使用response调用多次addCookie方法发送cookie即可。\",\"响应头和消息头都会携带多个cookie键值对。\",\"Cookie c1 = new Cookie(\\\"msg1\\\",\\\"hello\\\"); Cookie c2 = new Cookie(\\\"msg2\\\",\\\"hi\\\"); response.addCookie(c1); response.addCookie(c2); \"]},\"2805\":{\"h\":\"6. Cookie的保存时间\",\"t\":[\"默认情况下，当浏览器关闭后，Cookie数据被销毁，可以手动设置Cookie的存活时间\",\"Cookie setMaxAge(int seconds) Cookie c1 = new Cookie(\\\"msg\\\",\\\"aaa\\\"); c1.setMaxAge(2000); response.addCookie(c1); \",\"参数值的细节：\",\"正数：将Cookie数据写到硬盘的文件中，持久化存储。 \",\"并指定cookie存活时间（单位s），时间到后，cookie文件自动失效\",\"负数：默认值，会话数据储存在内存中，关闭浏览器或服务器就失效。\",\"0：删除cookie信息，Servlet用来删除还未到期的cook信息。\"]},\"2806\":{\"h\":\"7.储存中文\",\"t\":[\"在tomcat 8 之前 cookie中不能直接存储中文数据。需要将中文数据转码-一般采用URL编码(%E3)。\",\"在tomcat 8 之后，cookie支持中文数据。特殊字符还是不支持，建议使用URL编码存储，URL解码解析\",\"String value = \\\"张三\\\"; value = URLEncoder.encode(value, \\\"UTF-8\\\");//对中文进行URL编码 System.out.println(\\\"存储数据：\\\"+value); //将编码后的值存入Cookie中 Cookie cookie = new Cookie(\\\"username\\\",value); response.addCookie(cookie); \"]},\"2807\":{\"h\":\"8. cookie的共享\"},\"2808\":{\"h\":\"8.1 同一Tomcat服务器中，多个Web项目的cookie的共享\",\"t\":[\"假设在一个tomcat服务器中，部署了多个web项目，这些web项目中cookie默认情况是不能共享的。\",\"setPath(String path):设置cookie的获取范围。默认情况下，设置当前的虚拟目录， 如果要共享，则可以将path设置为\\\"/\\\"\"]},\"2809\":{\"h\":\"8.2 不同Tomcat服务器间Cookie的共享\",\"t\":[\"setDomain(String path):如果设置一级域名相同，那么多个服务器之间cookie可以共享setDomain(\\\".baidu.com\\\"),那么tieba.baidu.com和news.baidu.com中cookie可以共享\"]},\"2810\":{\"h\":\"9. 总结\",\"t\":[\"cookie的特性 \",\"cookie存储数据在客户端浏览器\",\"浏览器对于单个cookie 的大小有限制(4kb) 以及 对同一个域名下的总cookie数量也有限制(20个)\",\"作用 \",\"cookie一般用于存出少量的不太敏感的数据\",\"在不登录的情况下，完成服务器对客户端的身份识别\"]},\"2811\":{\"h\":\"Ⅲ. Session\"},\"2812\":{\"h\":\"1. 概念\",\"t\":[\"服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。这个对象就是HttpSession。\",\"说明：由于session数据是保存在一个对象里的，所以SESSION本质是在内存中的。\"]},\"2813\":{\"h\":\"2. Session的工作流程\",\"t\":[\"在服务端的AServlet获取一个Session对象，把数据存入其中\",\"在服务端的BServlet获取到相同的Session对象，从中取出数据\",\"就可以实现一次会话中多次请求之间的数据共享了\"]},\"2814\":{\"h\":\"3. 获取HttpSession对象\",\"t\":[\"使用Request对象的getSession方法来获取Session对象。\",\"HttpSession ServletRequest.getSession(); protected void doGet(HttpServletRequest req, HttpServletResponse resp){ HttpSession session = request.getSession(); } \"]},\"2815\":{\"h\":\"4. HttpSession对象的方法\"},\"2816\":{\"h\":\"4.1 设置session的键值\",\"t\":[\"void setAttribute(String name, Object value) \"]},\"2817\":{\"h\":\"4.2 通过键获取session的值\",\"t\":[\"Object getAttribute(String name) \"]},\"2818\":{\"h\":\"4.3 通过键删除键值对\",\"t\":[\"void removeAttribute(String name) \"]},\"2819\":{\"h\":\"4.4 获取SESSIONID\",\"t\":[\"SESSIONID是session的唯一标识id。\",\"String HttpSession.getId() \"]},\"2820\":{\"h\":\"5. Session的原理\",\"t\":[\"session的存在是依赖与cookie的，创建Session时，会将sessionid储存到cookie中。\",\"浏览器：发送请求，调用的service方法中有创建session的代码。\",\"request.getSession()：第一次创建Session时，会在内存中创建一个Session对象 \",\"该session对象有一个id属性\",\"响应：servlet会创建一个响应头来返回创建的sessionid \",\"set-cookie:JSESSIONID=23a23234\",\"浏览器：浏览器再次请求时，就会携带cookie，cookie中有JSESSIONID，服务器会自动获取JSESSIONID，用来判断是同一个用户发的请求，并调取SEESION对象的值\"]},\"2821\":{\"h\":\"6. session的有效期\",\"t\":[\"当客户端关闭后，服务器不关闭，两次获取的session并不是同一个。\",\"因为保存JSESSIOID的cookie默认只在会话期是有效的，关闭浏览器cookie就会消失，就无法获取JSEESIONID了\"]},\"2822\":{\"h\":\"定义SESSION的有效期\",\"t\":[\"可以通过手动创建Cookie，并指定Cookie存在的时间，来定义SESSION的有效时间。\",\"Cookie c = new Cookie(\\\"JSESSION\\\",session.getId()); c.setMaxAge(60*60*60); response.addCookie(c); \"]},\"2823\":{\"h\":\"7. session的钝化和活化\",\"t\":[\"当服务器重启后，由于Session是保存在内存中的，所以默认重启后session将失效。 不过Tomcat服务器或自动对Session对象进行钝化和活化。\",\"session的钝化：在服务器正常关闭之前，将session对象系列化到硬盘上\",\"session活化：在服务器启动后，将session文件转化为内存中的session对象即可。\",\"注意：idea中是无法实现活化的，测试的时候要注意，生产环境无影响。\"]},\"2824\":{\"h\":\"8. session的销毁\"},\"2825\":{\"h\":\"8.1\",\"t\":[\"服务器关闭：自动销毁内存中的SESSION（其实是会钝化处理的）\",\"session默认失效时间 30分钟，也就是30分钟后，SEESION就自动删除了，假如使用Session储存登陆信息，30分钟就会自动掉线。可以通过修改配置文件，设置session自动销毁的时间：\",\"文件：web.xml\",\"<session-config> <session-timeout>30</session-timeout> //单位是分钟 </session-config> \"]},\"2826\":{\"h\":\"8.2 手动销毁\",\"t\":[\"session对象调用invalidate() 可以手动销毁session。\"]},\"2827\":{\"h\":\"9. session的特点\",\"t\":[\"session用于存储一次会话的多次请求的数据，存在服务器端\",\"session可以存储任意类型，任意大小的数据\"]},\"2828\":{\"h\":\"Ⅳ. 总结\"},\"2829\":{\"h\":\"1. Cookie与Session的区别\",\"t\":[\"存储位置：Cookie 是将数据存储在客户端，Session 将数据存储在服务端\",\"安全性：Cookie不安全，Session安全\",\"数据大小：Cookie最大3KB，Session无大小限制\",\"存储时间：Cookie可以通过setMaxAge()长期存储，Session默认30分钟\",\"服务器性能：Cookie不占服务器资源，Session占用服务器资源\"]},\"2830\":{\"h\":\"2. Cookie与Session的应用场景\",\"t\":[\"购物车:使用Cookie来存储\",\"以登录用户的名称展示:使用Session来存储\",\"记住我功能:使用Cookie来存储\",\"验证码:使用session来存储\"]},\"2831\":{\"h\":\"3. 结论\",\"t\":[\"Cookie是用来保证用户在未登录情况下的身份识别\",\"Session是用来保存用户登录后的数据\"]},\"2832\":{\"h\":\"6-5. JSON\"},\"2833\":{\"h\":\"Ⅰ. JSON语法\",\"t\":[\"详见：前端>基础>JS>8.其他>json\"]},\"2834\":{\"h\":\"Ⅱ. JSON转换\"},\"2835\":{\"h\":\"1. JSON与Java对象\",\"t\":[\"6-5-1\",\"请求数据：JSON字符串转为Java对象\",\"响应数据：Java对象转为JSON字符串\"]},\"2836\":{\"h\":\"2. Fastjson：JSON与Java对象的转换\",\"t\":[\"Fastjson 是阿里巴巴提供的一个Java语言编写的高性能功能完善的 JSON 库，是目前Java语言中最快的 JSON 库，可以实现 Java 对象和 JSON 字符串的相互转换。\"]},\"2837\":{\"h\":\"导入坐标\",\"t\":[\"Maven导入Fastjson包\",\"<dependency> <groupId>com.alibaba</groupId> <artifactId>fastjson</artifactId> <version>1.2.62</version> </dependency> \"]},\"2838\":{\"h\":\"3. Java对象转JSON\",\"t\":[\"使用 Fastjson 提供的 JSON 类中的 toJSONString() 静态方法即可。\",\"String jsonStr = JSON.toJSONString(obj); \"]},\"2839\":{\"h\":\"4. JSON转Java对象\",\"t\":[\"使用 Fastjson 提供的 JSON 类中的 parseObject() 静态方法即可。\",\"User user = JSON.parseObject(jsonStr, User.class); \"]},\"2840\":{\"h\":\"1-1. ES介绍\"},\"2841\":{\"h\":\"ES 概述\",\"t\":[\"全文搜索属于最常见的需求，开源的 Elasticsearch是目前全文搜索引擎的首选。\",\"它可以快速地储存、搜索和分析海量数据。\"]},\"2842\":{\"h\":\"1. Elastic Stack\",\"t\":[\"1-1-1\",\"The Elastic Stack, 包括 Elasticsearch、Kibana、Beats 和 Logstash（也称为 ELK Stack）。\",\"这个技术栈能够安全可靠地获取任何来源、任何格式的数据，然后实时地对数据进行搜索、分析和可视化。\"]},\"2843\":{\"h\":\"2. Elastic Search\",\"t\":[\"Elaticsearch，简称为 ES，ES 是一个开源的高扩展的分布式全文搜索引擎，是整个 Elastic Stack 技术栈的核心。\",\"它可以近乎实时的存储、检索数据；本身扩展性很好，可以扩展到上百台服务器，处理 PB 级别的数据。\"]},\"2844\":{\"h\":\"3. Lucene\",\"t\":[\"Lucene 是 Apache 软件基金会 Jakarta 项目组的一个子项目，能够做全文索引和搜寻。Lucene只是一个提供全文搜索功能类库的核心工具包，需要晚上的服务框架搭建起来进行应用。\",\"主流搜索引擎软件就两款：ElasticSearch 和 Solr, 这两款都是基于 Lucene 搭建的，两者的功能和效率基本一样。市面上比较流行的是ElasticSearch。\"]},\"2845\":{\"h\":\"4. 分布式\",\"t\":[\"Elastic 本质上是一个分布式数据库，允许多台服务器协同工作，每台服务器可以运行多个 Elastic 实例。单个 Elastic 实例称为一个节点（node）。一组节点构成一个集群（cluster）\"]},\"2846\":{\"h\":\"5. 大企业的选择\",\"t\":[\"以下IT公司采用了ElasticSearch\",\"GitHub：GitHub 使用Elasticsearch 搜索 20TB 的数据\",\"维基百科：启动以 Elasticsearch 为基础的核心搜索架构\",\"SoundCloud：为 1.8 亿用户提供即时而精准的音乐搜索\",\"百度：目前广泛使用 Elasticsearch 作为文本数据分析\",\"新浪：使用 Elasticsearch 分析处理 32 亿条实时日志\",\"阿里：使用 Elasticsearch 构建日志采集和分析体系\",\"Stack Overflow\"]},\"2847\":{\"h\":\"全文搜索引擎\"},\"2848\":{\"h\":\"1. 背景\",\"t\":[\"Google，百度类的网站搜索，它们都是根据网页中的关键字生成索引，我们在搜索的时候输入关键字，它们会将该关键字即索引匹配到的所有网页返回；还有常见的项目中应用日志的搜索等等。对于这些非结构化的数据文本，关系型数据库搜索不是能很好的支持。\"]},\"2849\":{\"h\":\"2. 传统数据库的缺点\",\"t\":[\"一般传统数据库，全文检索都实现的很鸡肋，因为一般也没人用数据库存文本字段。进行全文检索需要扫描整个表，如果数据量大的话即使对 SQL 的语法优化，也收效甚微。建立了索引，但是维护起来也很麻烦，对于 insert 和 update 操作都会重新构建索引。\"]},\"2850\":{\"h\":\"3. 不适用常规搜索的场景\",\"t\":[\"基于以上原因可以分析得出，在一些生产环境中，使用常规的搜索方式，性能是非常差的：\",\"搜索的数据对象是大量的非结构化的文本数据。\",\"文件记录量达到数十万或数百万个甚至更多。\",\"支持大量基于交互式文本的查询。\",\"需求非常灵活的全文搜索查询。\",\"对高度相关的搜索结果的有特殊需求，但是没有可用的关系数据库可以满足\",\"对不同记录类型、非文本数据操作或安全事务处理的需求相对较少的情况。\"]},\"2851\":{\"h\":\"4. 全文搜索\",\"t\":[\"为了解决结构化数据搜索和非结构化数据搜索性能问题，我们就需要专业，健壮，强大的全文搜索引擎。这里说到的全文搜索引擎指的是目前广泛应用的主流搜索引擎。\"]},\"2852\":{\"h\":\"工作原理\",\"t\":[\"它的工作原理是计算机索引程序通过扫描文章中的每一个词，对每一个词建立一个索引，指明该词在文章中出现的次数和位置，当用户查询时，检索程序就根据事先建立的索引进行查找，并将查找的结果反馈给用户的检索方式。这个过程类似于通过字典中的检索字表查字的过程。\"]},\"2853\":{\"h\":\"1-2. 环境准备\"},\"2854\":{\"h\":\"ES安装\",\"t\":[\"ElasticSearch官网\",\"下载地址\",\"当前最新版本是8.8.1\"]},\"2855\":{\"h\":\"1. 系统\",\"t\":[\"Elasticsearch 分为 Linux 、MacOS 和 Windows 版本，先使用Windows环境作为学习和开发使用，生产时要部署到Linux服务器。\",\"Linux环境的部署，见后续章节。\"]},\"2856\":{\"h\":\"2. 安装软件\",\"t\":[\"该软件为绿色软件，将下载的压缩包解压后即可使用。\",\"目录结构如下：\",\"1-2-1\",\"bin：可执行脚本目录\",\"config：配置目录\",\"jdk：内置JDK目录\",\"lib：类库\",\"logs：日志目录\",\"modules：模块目录\",\"plugins：插件目录\",\"由目录结构可知，ElasticSearch是基于Java开发的。\"]},\"2857\":{\"h\":\"3. 启动服务\",\"t\":[\"解压后，进入 bin 文件目录，点击 elasticsearch.bat 文件启动 ES 服务\",\"由于ES内置了JDK，所以默认不会采用电脑里的JDK，而是用自己捆绑的JDK。\"]},\"2858\":{\"h\":\"4. 访问测试\",\"t\":[\"9300 端口为 Elasticsearch 集群间组件的通信端口\",\"9200 端口为浏览器访问的 http协议 RESTful 端口。\",\"打开浏览器输入地址：http://localhost:9200，进行访问\",\"访问结果如下：\",\"{ \\\"name\\\" : \\\"PC-20210318BCMF\\\", \\\"cluster_name\\\" : \\\"elasticsearch\\\", \\\"cluster_uuid\\\" : \\\"PbTqhy8eTVS2B7eO_0P_oA\\\", \\\"version\\\" : { \\\"number\\\" : \\\"8.8.1\\\", \\\"build_flavor\\\" : \\\"default\\\", \\\"build_type\\\" : \\\"zip\\\", \\\"build_hash\\\" : \\\"f8edfccba429b6477927a7c1ce1bc6729521305e\\\", \\\"build_date\\\" : \\\"2023-06-05T21:32:25.188464208Z\\\", \\\"build_snapshot\\\" : false, \\\"lucene_version\\\" : \\\"9.6.0\\\", \\\"minimum_wire_compatibility_version\\\" : \\\"7.17.0\\\", \\\"minimum_index_compatibility_version\\\" : \\\"7.0.0\\\" }, \\\"tagline\\\" : \\\"You Know, for Search\\\" } \"]},\"2859\":{\"h\":\"5. debug\"},\"2860\":{\"h\":\"取消安全验证\",\"t\":[\"当启动Elasticsearch后，在浏览器输入地址 http://localhost:9200/，会产生报错。\",\"报错信息：received plaintext http traffic on an https channel, closing connection\",\"原因：Elasticsearch在Windows下开启了安全认证，虽然started成功，但访问http://localhost:9200/失败\",\"解决方案：找到config/目录下面的elasticsearch.yml配置文件，把安全认证开关从原先的true都改成false，实现免密登录访问即可，修改这两处都为false后：\",\"# Enable security features xpack.security.enabled: false # 这里由true改为false xpack.security.enrollment.enabled: true xpack.security.http.ssl: enabled: false # 这里由true改为false keystore.path: certs/http.p12 \"]},\"2861\":{\"h\":\"HTTP\",\"t\":[\"浏览器是通过HTTP协议向ElasticSearch服务器发送请求的。\",\"RESTFul：通过RESTFul风格访问ES服务器的资源\",\"JSON：通过JSON格式传递数据\",\"Postman：通过Postman工具进行数据访问的测试\"]},\"2862\":{\"h\":\"1-3. 数据格式与索引\"},\"2863\":{\"h\":\"数据格式\",\"t\":[\"Elasticsearch 是面向文档型数据库，一条数据在这里就是一个文档。\"]},\"2864\":{\"h\":\"1. ElasticSearch 与 MySQL对比\",\"t\":[\"为了方便理解，将 Elasticsearch 里存储文档数据和关系型数据库 MySQL 存储数据的概念进行一个类比\",\"1-3-1\"]},\"2865\":{\"h\":\"3. 数据类型简介\",\"t\":[\"ES 里的 Index 可以看做一个库，而 Types 相当于表，Documents 则相当于表的行。\",\"这里 Types 的概念已经被逐渐弱化，现在版本的ES中已经没有Type这个概念了。\"]},\"2866\":{\"h\":\"正排索引\",\"t\":[\"提示\",\"ElasticSearch采用的是倒排索引，在此之前先了解下正排索引。\"]},\"2867\":{\"h\":\"1.概述\",\"t\":[\"又称正向索引，当用户发起查询时（假设查询为一个关键词），搜索引擎会扫描索引库中的所有文档，找出所有包含关键词的文档，这样依次从文档中去查找是否含有关键词的方法叫做正向索引。\"]},\"2868\":{\"h\":\"2. 正向索引的结构\",\"t\":[\"1-3-2\"]},\"2869\":{\"h\":\"3. 正向索引解析\",\"t\":[\"我们查询数据时，输入的是关键字,搜索引擎会扫描库中包含该关键字的所有文档，然后返回文档的id，通过id获取文档，我们就可以查询到结果了。\"]},\"2870\":{\"h\":\"4. 正向索引的缺点\",\"t\":[\"对于文档的查询来说，一个站点存在的文档可能会非常多，这样遍历的索引结构效率低下，无法满足用户需求。\",\"因此才有了对文档搜索效率更高的倒排索引。\"]},\"2871\":{\"h\":\"关键字-文档矩阵\",\"t\":[\"提示\",\"先了解下关键字与文档之间的关系。\",\"单词-文档矩阵是表达两者之间所具有的一种包含关系的概念模型。\"]},\"2872\":{\"h\":\"示例\",\"t\":[\"如下几个文档：\",\"d1：马斯克创建了SpaceX\",\"d2：SpaceX 星舰下个月发射\",\"d3：马斯克说将亲自指挥星舰的发射\",\"此时，用户将以马斯克、SpaceX和星舰进行查询，关键字与文档的矩阵为：\",\"d1\",\"d2\",\"d3\",\"马斯克\",\"√\",\"√\",\"SpaceX\",\"√\",\"√\",\"星舰\",\"√\",\"√\"]},\"2873\":{\"h\":\"矩阵解读\",\"t\":[\"横向：表示哪些文档包含了该关键字，d1和d3包含了 马斯克 这个关键字\",\"纵向：表示每个单独的文档包含了哪些关键字，如果d1包含了马斯克和SpaceX\"]},\"2874\":{\"h\":\"搜索引擎的索引\",\"t\":[\"搜索引擎的索引其实就是实现 关键字-矩阵的具体数据结构。可以有不同的方式来实现上述概念模型\",\"正排索引：创建的索引是文档的id，搜索的过程是遍历每一个文档，比对是否有所要查询的关键字，如果有就记录文档的id，最后返回所有的文档id。 \",\"然后通过文档id获取对应的文档作为结果呈现。\",\"这种方式非常的低效\",\"倒排索引：为所有关键字创建索引，关键字对应的值就是包含该关键字的所有文档id。搜索的过程是直接通过索引拿到关键字对应的文档id。 \",\"然后通过id获取对应的文档作为结果呈现。\",\"这种方式是最佳的方案，ES就采用了这种方案。\",\"其他方式：签名文件、后缀树等，这些方式的效率也都不如倒排索引。\"]},\"2875\":{\"h\":\"倒排索引\"},\"2876\":{\"h\":\"1. 概述\",\"t\":[\"倒排索引(Inverted Index)：倒排索引是实现“单词-文档矩阵”的一种具体存储形式，通过倒排索引，可以根据单词快速获取包含这个单词的文档列表。\"]},\"2877\":{\"h\":\"2. 倒排索引的结构\",\"t\":[\"为了增加效率，搜索引擎会把正向索引变为反向索引（倒排索引）即把“文档→单词”的形式变为“单词→文档”的形式。倒排索引具体机构如下:\",\"单词1→文档1的ID；文档2的ID；文档3的ID…\",\"单词2→文档1的ID；文档4的ID；文档7的ID…\"]},\"2878\":{\"h\":\"3. 组成\",\"t\":[\"倒排索引主要由两个部分组成：“单词词典”和“倒排文件”。\",\"单词词典(Lexicon)：搜索引擎的索引单位是单词，单词词典是由文档集合中出现过的所有单词构成的字符串集合，单词词典内每条索引项记载单词本身的一些信息以及指向“倒排列表”的指针。\",\"倒排列表(PostingList)：倒排列表记载了出现过某个单词的所有文档的文档列表及单词在该文档中出现的位置信息，每条记录称为一个倒排项(Posting)。根据倒排列表，即可获知哪些文档包含某个单词。\",\"倒排文件(Inverted File)：所有单词的倒排列表往往顺序地存储在磁盘的某个文件里，这个文件即被称之为倒排文件，倒排文件是存储倒排索引的物理文件。\",\"1-3-3\"]},\"2879\":{\"h\":\"4. 倒排索引的简单实现示例\",\"t\":[\"如下几个文档：\",\"d1：马斯克创建了SpaceX\",\"d2：SpaceX 星舰下个月发射\",\"d3：马斯克说将亲自指挥星舰的发射\",\"通过这5个文档建立简单的倒排索引:\",\"单词id\",\"关键字（单词）\",\"倒排列表\",\"1\",\"马斯克\",\"{1,3}\",\"2\",\"SpaceX\",\"{1,2}\",\"3\",\"星舰\",\"{2,3}\",\"首先要用分词系统将文档自动切分成单词序列，这样就让文档转换为由单词序列构成的数据流，并对每个不同的单词赋予唯一的单词编号(WordID)，并且每个单词都有对应的含有该单词的文档列表即倒排列表。\"]},\"2880\":{\"h\":\"略微复杂的倒排列表\",\"t\":[\"下面介绍一种更加复杂，包含信息更多的倒排索引。\",\"单词id\",\"关键字（单词）\",\"倒排列表(文档id;TF;<Pos>)\",\"1\",\"马斯克\",\"(1;1;<1>),(3;1;<1>)\",\"2\",\"SpaceX\",\"(1;1;<7>),(2;1;<1>)\",\"3\",\"星舰\",\"(2;1;<7>),(3;1;<10>)\",\"TF：单词在文档中出现的次数\",\"Pos: 单词在文档中出现的位置，也就是字符顺序\",\"这个表格展示了更加复杂的倒排索引，前两列不变，第三列倒排索引包含的信息为(文档ID，单词频次，<单词位置>)\"]},\"2881\":{\"h\":\"2-1. 索引\",\"t\":[\"提示\",\"ES是基于索引，索引相当于关系型数据库里的 库。\"]},\"2882\":{\"h\":\"创建索引\",\"t\":[\"对比关系型数据库，创建索引就等同于创建数据库。\",\"创建方式：通过向ES服务器发送put请求来创建索引。\"]},\"2883\":{\"h\":\"1. 语法\",\"t\":[\"请求方式：put\",\"请求地址：http://ES服务器地址/要创建的索引名\"]},\"2884\":{\"h\":\"2. 示例\",\"t\":[\"通过postman发送put请求，请求地址为：http://localhost:9200/shopping\",\"2-1-1\",\"请求成功后，就在ES服务器中创建了名为shopping的索引（库）。\"]},\"2885\":{\"h\":\"3. 响应结果分析\",\"t\":[\"{ \\\"acknowledged\\\": true, //响应结果，true表示成功 \\\"shards_acknowledged\\\": true, //分片操作结果，true表示成功 \\\"index\\\": \\\"shopping\\\" //索引名称 } \",\"创建索引库的分片数默认 1 片\"]},\"2886\":{\"h\":\"4. put与post\",\"t\":[\"只能同put请求创建索引，不能通过post。使用post会报错。\",\"put操作是幂等性的（post不是），如果重复创建相同的索引，也会报错。\"]},\"2887\":{\"h\":\"查看某个索引\",\"t\":[\"查看索引向 ES 服务器发送的请求路径和创建索引是一致的。但是 HTTP 方法不一致。\",\"通过向ES服务器发送GET请求，来查看索引。\"]},\"2888\":{\"h\":\"1. 语法\",\"t\":[\"请求方式：GET\",\"请求地址：http://ES服务器地址/要查看的索引名\"]},\"2889\":{\"h\":\"2. 示例\",\"t\":[\"通过postman发送GET请求，请求地址为：http://localhost:9200/shopping\",\"查看ES服务器上的shopping索引\"]},\"2890\":{\"h\":\"3. 响应信息解析\",\"t\":[\"上述示例的响应信息如下：\",\"{ \\\"shopping\\\": { //索引名 \\\"aliases\\\": {}, //别名 \\\"mappings\\\": {},//映射 \\\"settings\\\": { //设置 \\\"index\\\": { //设置：索引 \\\"routing\\\": { //设置：索引->路由 \\\"allocation\\\": { \\\"include\\\": { \\\"_tier_preference\\\": \\\"data_content\\\" } } }, \\\"number_of_shards\\\": \\\"1\\\", //设置：索引->主分片数量 \\\"provided_name\\\": \\\"shopping\\\", //设置：索引->名称 \\\"creation_date\\\": \\\"1687746960161\\\", //设置：索引->创建时间 \\\"number_of_replicas\\\": \\\"1\\\", //设置：索引->副分片数量 \\\"uuid\\\": \\\"H6j6hlYfQDe8M4CCZpCniA\\\", //设置：索引->唯一标识 \\\"version\\\": { //设置：索引->版本 \\\"created\\\": \\\"8080199\\\" } } } } } \"]},\"2891\":{\"h\":\"查看所有索引\",\"t\":[\"让ES服务器返回所有索引的基本信息。\"]},\"2892\":{\"h\":\"1. 语法\",\"t\":[\"请求方式：GET 请求地址：http://ES服务器地址/_cat/indices?v\",\"2-1-2\",\"返回的数据格式类似于一个表格\"]},\"2893\":{\"h\":\"2. 返回数据解析\",\"t\":[\"表头\",\"含义\",\"health\",\"当前服务器健康状态：green(集群完整) yellow(单点正常、集群不完整) red(单点不正常)\",\"status\",\"索引打开、关闭状态\",\"index\",\"索引名\",\"uuid\",\"索引统一编号\",\"pri\",\"主分片数量\",\"rep\",\"副本数量\",\"docs.count\",\"可用文档数量\",\"docs.deleted\",\"文档删除状态（逻辑删除）\",\"store.size\",\"主分片和副分片整体占空间大小\",\"pri.store.size\",\"主分片占空间大小\"]},\"2894\":{\"h\":\"删除索引\",\"t\":[\"通过向ES发送DELETE请求，删除某个索引\"]},\"2895\":{\"h\":\"1. 语法\",\"t\":[\"请求方式：DELETE\",\"请求地址：http://ES服务器地址/要删除的索引名\",\"如果不指定索引名，直接删除，不会删除所有索引，而是会报错。\"]},\"2896\":{\"h\":\"2. 示例\",\"t\":[\"通过postman向ES服务器发送DELETE请求，删除shopping索引\",\"请求地址：http://localhost:9200/shopping\",\"返回值如下：\",\"{ \\\"acknowledged\\\": true } \",\"删除不存在的索引（包括已经删除了的），会报错\"]},\"2897\":{\"h\":\"2-2. 文档增删改\",\"t\":[\"提示\",\"ES中没有表的概念，文档相当于关系型数据库中的一行数据。\"]},\"2898\":{\"h\":\"创建文档\",\"t\":[\"创建好索引后，就可以向索引（库）中创建文档并添加数据了。\"]},\"2899\":{\"h\":\"1. 语法\",\"t\":[\"请求方式：POST\",\"请求地址：http://ES数据库地址/索引名/_doc\",\"请求体：JSON格式\",\"添加数据，必须有数据才行（没有会报错），数据通过JSON格式的请求体发送。\"]},\"2900\":{\"h\":\"2. 示例\",\"t\":[\"在 Postman 中，向 ES 服务器发 POST 请求 ：http://127.0.0.1:9200/shopping/_doc\",\"2-2-1\"]},\"2901\":{\"h\":\"3. 响应结果分析\",\"t\":[\"{ \\\"_index\\\": \\\"shopping\\\", //索引 \\\"_id\\\": \\\"o7K19YgBBr3LfT2KiQat\\\", //唯一标识 \\\"_version\\\": 1, //版本 \\\"result\\\": \\\"created\\\", //结果，created表示创建成功 \\\"_shards\\\": { //分片 \\\"total\\\": 2, //分片总数 \\\"successful\\\": 1, //分片是否成功，1表示成功 \\\"failed\\\": 0 //分片是否失败，0表示为未失败 }, \\\"_seq_no\\\": 0, \\\"_primary_term\\\": 1 } \"]},\"2902\":{\"h\":\"4. 自定义 _id\",\"t\":[\"提示\",\"_id是唯一标识，默认情况下，ES 服务器会随机生成一个。每次POST请求，都会随机生成一个，即使请求的内容完全相同。\",\"默认生成的_id是不容易记得，可以在添加数据时，手动指定一个id，此时的请求链接为：http://ES数据库地址/索引名/_doc/_id，如下：\",\"2-2-2\",\"如上，返回的id已经是自定义的id了，此时重复发送请求，返回的结果是一样的（因为ES不会再返回一个随机的_id）。\"]},\"2903\":{\"h\":\"5. POST与PUT\",\"t\":[\"PUT是幂等性的，POST不是。\",\"当没有手动指定_id时，相同请求的每次返回的结果是不同的（_id不同），此时只能使用POST请求，因为PUT是幂等性的。\",\"当手动自定了_id时，相同请求的每次返回的结果是相同的（_id是固定的），此时既可以使用POST请求，也可以使用PUT请求。\"]},\"2904\":{\"h\":\"查看文档\",\"t\":[\"提示\",\"为了方便查看文档增删改的结果，先了解两个简单查看文档的方法。\",\"详细的文档查询详见下章：文档查询\",\"查看文档就是查看数据，通过文档的唯一标识_id进行查看，也可以查看所有的文档。\",\"类似于 MySQL 中数据的主键查询\"]},\"2905\":{\"h\":\"1. 语法\",\"t\":[\"请求方式：GET\",\"请求地址：http://ES数据库地址/索引名/_doc/要查看的文档_id\"]},\"2906\":{\"h\":\"2. 示例\",\"t\":[\"在 Postman 中，向 ES 服务器发 GET 请求 ：http://127.0.0.1:9200/shopping/_doc/1000\",\"2-2-3\"]},\"2907\":{\"h\":\"3. 响应结果分析\",\"t\":[\"正常查询到结果的响应信息如下：\",\"{ \\\"_index\\\": \\\"shopping\\\", // 索引 \\\"_id\\\": \\\"1000\\\", \\\"_version\\\": 1, \\\"_seq_no\\\": 2, \\\"_primary_term\\\": 1, \\\"found\\\": true, // 查询结果： true 表示查找到，false 表示未查找到 \\\"_source\\\": { // 文档原信息 \\\"title\\\": \\\"小米手机\\\", \\\"category\\\": \\\"小米\\\", \\\"images\\\": \\\"http://www.gulixueyuan.com/xm.jpg\\\", \\\"price\\\": 3999.00 } } \",\"如果查询不到结果，相应信息如下：\",\"{ \\\"_index\\\": \\\"shopping\\\", \\\"_id\\\": \\\"10000\\\", \\\"found\\\": false } \"]},\"2908\":{\"h\":\"4. 查看索引下的全部文档\",\"t\":[\"请求方式：GET\",\"请求地址：http://ES数据库地址/索引名/_search\",\"2-2-4\",\"查询结果如下：\",\"{ \\\"took\\\": 155, //耗时，单位ms \\\"timed_out\\\": false, //是否超时 \\\"_shards\\\": { \\\"total\\\": 1, \\\"successful\\\": 1, \\\"skipped\\\": 0, \\\"failed\\\": 0 }, \\\"hits\\\": { //查询命中 \\\"total\\\": { //统计信息 \\\"value\\\": 2, //结果条数 \\\"relation\\\": \\\"eq\\\" }, \\\"max_score\\\": 1.0, \\\"hits\\\": [ { \\\"_index\\\": \\\"shopping\\\", \\\"_id\\\": \\\"o7K19YgBBr3LfT2KiQat\\\", \\\"_score\\\": 1.0, \\\"_source\\\": { \\\"title\\\": \\\"小米手机\\\", \\\"category\\\": \\\"小米\\\", \\\"images\\\": \\\"http://www.gulixueyuan.com/xm.jpg\\\", \\\"price\\\": 3999.00 } }, { \\\"_index\\\": \\\"shopping\\\", \\\"_id\\\": \\\"1000\\\", \\\"_score\\\": 1.0, \\\"_source\\\": { \\\"title\\\": \\\"小米手机\\\", \\\"category\\\": \\\"小米\\\", \\\"images\\\": \\\"http://www.gulixueyuan.com/xm.jpg\\\", \\\"price\\\": 3999.00 } } ] } } \",\"之前创建文档时，对相同的请求体和请求链接发送了两次请求，一次返回系统自定义的_id，一次手动指定的_id，因此查询到了两条数据（仅_id不同）。\"]},\"2909\":{\"h\":\"修改文档\",\"t\":[\"分为两种修改方式：\",\"完全覆盖：整个文档的数据全部替换（_还是原来的文档，就是数据全变了）\",\"局部修改：仅修改文档中的某条数据，其他的数据不变\",\"修改文档指的是修改文档的数据（请求体），而不是其他内容（如_id）。\"]},\"2910\":{\"h\":\"1. 完全覆盖\",\"t\":[\"和新增文档一样，输入相同的 URL 地址请求，如果请求体变化，会将原有的数据内容覆盖\",\"请求方式：POST\",\"请求地址：http://ES数据库地址/索引名/_doc/待修改的文档_id\",\"2-2-5\",\"响应结果里的result:\\\"updated\\\"表示更新成功。\",\"{ \\\"_index\\\": \\\"shopping\\\", \\\"_id\\\": \\\"1000\\\", \\\"_version\\\": 2, // 版本：修改一次版本就会+1 \\\"result\\\": \\\"updated\\\", // updated 表示数据被更新 \\\"_shards\\\": { \\\"total\\\": 2, \\\"successful\\\": 1, \\\"failed\\\": 0 }, \\\"_seq_no\\\": 3, \\\"_primary_term\\\": 1 } \"]},\"2911\":{\"h\":\"2. 局部数据修改\",\"t\":[\"修改数据时，也可以只修改某一给条数据的局部信息\",\"请求方式：POST\",\"请求地址：http://ES数据库地址/索引名/_update/待修改的文档_id\",\"此时请求体的格式是固定的：\",\"{ \\\"doc\\\":{ \\\"待修改的字段\\\": 新的值， ... } } \"]},\"2912\":{\"h\":\"2.1 示例\",\"t\":[\"修改了文档数据中的title和price\",\"2-2-6\",\"响应结果和完全覆盖一样，result:\\\"updated\\\"表示更新成功。\"]},\"2913\":{\"h\":\"删除文档\",\"t\":[\"删除文档，底层是逻辑删除（而非从磁盘上删除）。\",\"删除文档是根据文档的_id进行删除的。\",\"请求方式：DELETE\",\"请求地址：http://ES数据库地址/索引名/_doc/待删除的文档_id\"]},\"2914\":{\"h\":\"1. 删除示例\",\"t\":[\"在 Postman 中，向 ES 服务器发 DELETE 请求 ：http://127.0.0.1:9200/shopping/_doc/1000\",\"2-2-7\"]},\"2915\":{\"h\":\"1.1 响应结果分析\",\"t\":[\"{ \\\"_index\\\": \\\"shopping\\\", \\\"_id\\\": \\\"1000\\\", \\\"_version\\\": 7, //版本：对数据的操作，都会更新版本 \\\"result\\\": \\\"deleted\\\", //结果： deleted 表示数据被标记为删除 \\\"_shards\\\": { \\\"total\\\": 2, \\\"successful\\\": 1, \\\"failed\\\": 0 }, \\\"_seq_no\\\": 8, \\\"_primary_term\\\": 1 } \"]},\"2916\":{\"h\":\"1.2 查询已删除的文档\",\"t\":[\"响应结果如下：found:false表示文档数据已被删除\",\"{ \\\"_index\\\": \\\"shopping\\\", \\\"_id\\\": \\\"1000\\\", \\\"found\\\": false } \"]},\"2917\":{\"h\":\"1.3 删除不存在的文档\",\"t\":[\"响应的结果中有result:\\\"not_found\\\"，表示待删除的文档未找到。\"]},\"2918\":{\"h\":\"2. 条件删除\",\"t\":[\"一般删除数据都是根据文档的唯一性标识进行删除，实际操作时，也可以根据条件对多条数 据进行删除（所有满足条件的文档都会被删除）。\",\"请求方式：POST 一定要注意是POST请求，不是DELETE请求\",\"请求地址：http://ES数据库地址/索引名/_delete_by_query\",\"在请求体中，输入查询语句（详见：高级查询）\"]},\"2919\":{\"h\":\"2.1 示例\",\"t\":[\"查询删除price值为5000的文档。\",\"请求体内容为：\",\"{ \\\"query\\\":{ \\\"match\\\":{ \\\"price\\\":5000 } } } \",\"在postman中向ES服务器发POST请求: http://localhost:9200/shopping/_delete_by_query\",\"2-2-8\"]},\"2920\":{\"h\":\"2.2 响应结果分析\",\"t\":[\"{ \\\"took\\\": 985, // 耗时ms \\\"timed_out\\\": false, \\\"total\\\": 2, //命中的文档总数 \\\"deleted\\\": 2, //删除数量 \\\"batches\\\": 1, \\\"version_conflicts\\\": 0, \\\"noops\\\": 0, \\\"retries\\\": { \\\"bulk\\\": 0, \\\"search\\\": 0 }, \\\"throttled_millis\\\": 0, \\\"requests_per_second\\\": -1.0, \\\"throttled_until_millis\\\": 0, \\\"failures\\\": [] } \"]},\"2921\":{\"h\":\"2-3. 文档查询\"},\"2922\":{\"h\":\"基本查询\",\"t\":[\"通过文档的唯一标识_id进行查看，也可以查看所有的文档。\"]},\"2923\":{\"h\":\"1. 通过主键 _id 查看\",\"t\":[\"请求方式：GET\",\"请求地址：http://ES数据库地址/索引名/_doc/要查看的文档_id\"]},\"2924\":{\"h\":\"1.2 示例\",\"t\":[\"在 Postman 中，向 ES 服务器发 GET 请求 ：http://127.0.0.1:9200/shopping/_doc/1000\",\"2-2-3\"]},\"2925\":{\"h\":\"1.3. 响应结果分析\",\"t\":[\"正常查询到结果的响应信息如下：\",\"{ \\\"_index\\\": \\\"shopping\\\", // 索引 \\\"_id\\\": \\\"1000\\\", \\\"_version\\\": 1, \\\"_seq_no\\\": 2, \\\"_primary_term\\\": 1, \\\"found\\\": true, // 查询结果： true 表示查找到，false 表示未查找到 \\\"_source\\\": { // 文档原信息 \\\"title\\\": \\\"小米手机\\\", \\\"category\\\": \\\"小米\\\", \\\"images\\\": \\\"http://www.gulixueyuan.com/xm.jpg\\\", \\\"price\\\": 3999.00 } } \",\"如果查询不到结果，响应信息如下：\",\"{ \\\"_index\\\": \\\"shopping\\\", \\\"_id\\\": \\\"10000\\\", \\\"found\\\": false } \"]},\"2926\":{\"h\":\"2. 查看索引下的全部文档\",\"t\":[\"请求方式：GET\",\"请求地址：http://ES数据库地址/索引名/_search\",\"2-2-4\",\"查询结果如下：\",\"{ \\\"took\\\": 155, //耗时，单位ms \\\"timed_out\\\": false, //是否超时 \\\"_shards\\\": { \\\"total\\\": 1, \\\"successful\\\": 1, \\\"skipped\\\": 0, \\\"failed\\\": 0 }, \\\"hits\\\": { //查询命中 \\\"total\\\": { //统计信息 \\\"value\\\": 2, //结果条数 \\\"relation\\\": \\\"eq\\\" }, \\\"max_score\\\": 1.0, \\\"hits\\\": [ { \\\"_index\\\": \\\"shopping\\\", \\\"_id\\\": \\\"o7K19YgBBr3LfT2KiQat\\\", \\\"_score\\\": 1.0, \\\"_source\\\": { \\\"title\\\": \\\"小米手机\\\", \\\"category\\\": \\\"小米\\\", \\\"images\\\": \\\"http://www.gulixueyuan.com/xm.jpg\\\", \\\"price\\\": 3999.00 } }, { \\\"_index\\\": \\\"shopping\\\", \\\"_id\\\": \\\"1000\\\", \\\"_score\\\": 1.0, \\\"_source\\\": { \\\"title\\\": \\\"小米手机\\\", \\\"category\\\": \\\"小米\\\", \\\"images\\\": \\\"http://www.gulixueyuan.com/xm.jpg\\\", \\\"price\\\": 3999.00 } } ] } } \",\"之前创建文档时，对相同的请求体和请求链接发送了两次请求，一次返回系统自定义的_id，一次手动指定的_id，因此查询到了两条数据（仅_id不同）。\"]},\"2927\":{\"h\":\"条件查询\",\"t\":[\"通过请求体的查询条件，匹配查询满足条件的文档数据。\"]},\"2928\":{\"h\":\"1. 语法\",\"t\":[\"请求方式：GET\",\"请求地址：http://ES数据库地址/索引名/_search\",\"请求条件一般通过JSON格式写在请求体中，语法如下：\",\"{ \\\"query\\\":{ \\\"match\\\":{ //设置查询的条件 \\\"字段\\\":\\\"字段的值\\\" } } } \"]},\"2929\":{\"h\":\"2. 查询示例\",\"t\":[\"查询price为5000的数据：\",\"2-4-1\"]},\"2930\":{\"h\":\"2.1 服务器响应结果解析\",\"t\":[\"{ \\\"took\\\": 546, \\\"timed_out\\\": false, \\\"_shards\\\": { \\\"total\\\": 1, \\\"successful\\\": 1, //成功 \\\"skipped\\\": 0, //忽略 \\\"failed\\\": 0 //失败 }, \\\"hits\\\": { //查询到的结果 \\\"total\\\": { \\\"value\\\": 2, //结果总数 \\\"relation\\\": \\\"eq\\\" //计数规则：eq表示计数准确，gte 表示计数不准确 }, \\\"max_score\\\": 1.0, //匹配度分值 \\\"hits\\\": [ //结果集合 { \\\"_index\\\": \\\"shopping\\\", \\\"_id\\\": \\\"1000\\\", \\\"_score\\\": 1.0, \\\"_source\\\": { \\\"title\\\": \\\"小米手机\\\", \\\"category\\\": \\\"小米\\\", \\\"price\\\": 5000 } }, { \\\"_index\\\": \\\"shopping\\\", \\\"_id\\\": \\\"6000\\\", \\\"_score\\\": 1.0, \\\"_source\\\": { \\\"title\\\": \\\"苹果手机\\\", \\\"category\\\": \\\"iPhone\\\", \\\"price\\\": 5000 } } ] } } \"]},\"2931\":{\"h\":\"3. 查询所有数据（全查询）\",\"t\":[\"不设置请求体，或设置如下请求体，将查询当前索引下的所有文档\",\"{ \\\"query\\\":{ \\\"match_all\\\":{} //查询所有文档 } } \"]},\"2932\":{\"h\":\"3.1 示例\",\"t\":[\"2-4-2\"]},\"2933\":{\"h\":\"4. 语法总结\",\"t\":[\"query：代表一个查询对象，里面可以有不同的查询属性\",\"match：查询类型\",\"查询条件：根据不同的查询类型，有不同的查询条件写法\"]},\"2934\":{\"h\":\"多条件查询\",\"t\":[\"又称组合查询，根据多个查询条件进行查询，和MySQL的组合查询类似。\"]},\"2935\":{\"h\":\"1. 语法\",\"t\":[\"通过bool关键字进行组合查询，有多种组合方式：\",\"must：必须，多个条件必须全部符合\",\"must_not：必须不，多个添加必须都不符合\",\"should：或，多个条只要符合一个即可\",\"语法格式如下：\",\"{ \\\"query\\\":{ \\\"bool\\\":{ //组合查询的关键字 \\\"组合方式\\\":[ { //第一个查询条件 \\\"match\\\":{ //查询条件 \\\"字段\\\":字段的值 } }, { //第二个查询条件 }, { ...//可以是1个或多个查询条件 } ], ...//多种组合方式可以同时采用 } } } \"]},\"2936\":{\"h\":\"2. 示例\",\"t\":[\"查询price为5000，同时category为iPhone的文档。\",\"2-4-5\"]},\"2937\":{\"h\":\"范围查询\",\"t\":[\"根据值的范围进行查询，比如价格和年龄的范围。\"]},\"2938\":{\"h\":\"1. 语法\",\"t\":[\"通过range关键字进行范围查询，range查询运行以下字符：\",\"gt：>，大于\",\"gte：>=，大于等于\",\"lt：<，小于\",\"lte：<=，小于等于\",\"查询条件的写法:\",\"{ \\\"query\\\":{ \\\"range\\\":{ \\\"待查询的字段\\\":{ \\\"范围查询的字符\\\": 用于范围比较的值 } } } } \"]},\"2939\":{\"h\":\"2. 示例\",\"t\":[\"查询price>6500的文档。\",\"2-4-6\"]},\"2940\":{\"h\":\"完全匹配\",\"t\":[\"默认查询的方式是“全文检索”，可以手动设置为“完全匹配”。\"]},\"2941\":{\"h\":\"1. 全文检索\",\"t\":[\"当保存文档数据时，ES会将数据文字进行分词拆解操作，并将拆解后的数据报错到倒排索引当中，因此只需要使用文字的一部分，也能查询出数据，这种检索方式就是“全文检索”\",\"PS: 中文是按照汉字进行拆分的，英文是按照单词进行拆分的。一定注意英文是按照单词进行拆分的而不是字母\"]},\"2942\":{\"h\":\"1.1 效果\",\"t\":[\"查询条件是字段值的一部分，也可以匹配到 \",\"如：查询\\\"category\\\":\\\"红米\\\"，会返回\\\"category\\\":\\\"小米\\\"的结果\",\"查询条件被拆解开分别进行各自的匹配 \",\"如：查询\\\"category\\\":\\\"小 iphone\\\"，会返回\\\"category\\\":\\\"iphone\\\"和\\\"category\\\":\\\"小米\\\"的结果\"]},\"2943\":{\"h\":\"1.2 示例\",\"t\":[\"查询\\\"category\\\":\\\"红米\\\"，返回了\\\"category\\\":\\\"小米\\\"的结果\",\"2-4-7\"]},\"2944\":{\"h\":\"2. 完全匹配查询\",\"t\":[\"完全匹配就是禁止全文检索，查询条件和查询结果要完全对应。\",\"可以通过match_phrase关键字取代match关键字，强制查询结果为完全匹配。\"]},\"2945\":{\"h\":\"2.1 示例\",\"t\":[\"使用match_phrase时，便不再能进行全文检索\",\"2-4-8\"]},\"2946\":{\"h\":\"2.2 值的一部分\",\"t\":[\"即使开启了完全匹配查询，查询条件是值的一部分，也可以返回查询结果。\",\"比如：查询\\\"category\\\":\\\"米\\\"，会返回\\\"category\\\":\\\"小米\\\"的结果\"]},\"2947\":{\"h\":\"分页\",\"t\":[\"对查询结果进行分页，和MySQL里的分页差不多。\"]},\"2948\":{\"h\":\"1. 语法\",\"t\":[\"在请求条件中，通过from和size字段进行分页查询。\",\"from：当前页的起始索引，默认从 0 开始 \",\"分页公式：from = (pageNum - 1) * size\",\"size：每页显示多少条\",\"{ \\\"query\\\":{...}, //查询条件 \\\"from\\\":0, //起始索引 \\\"size\\\":3 //每页显示的条数 } \"]},\"2949\":{\"h\":\"2. 示例\",\"t\":[\"在 Postman 中，向 ES 服务器发 GET 请求 ：http://127.0.0.1:9200/shopping/_search\",\"每页显示3条数据，查询第二页的数据（from = 3）\",\"2-4-3\"]},\"2950\":{\"h\":\"排序\",\"t\":[\"对查询的结果进行排序，和MySQL里的排序差不多。\"]},\"2951\":{\"h\":\"1. 语法\",\"t\":[\"在请求条件中，通过sort定义排序，可以有多个排序字段，并通过order指定排序方式\",\"desc：降序\",\"asc：升序\",\"{ \\\"query\\\":{...}, //查询条件 // sort: 定义排序 \\\"sort\\\":[ //因为可以多个字段排序，所以是数组 { \\\"排序的字段\\\":{ \\\"order\\\":\\\"desc|asc\\\" } }, ...//其他排序的字段 ] } \",\"当有多个排序字段时，会按定义的顺序进行排序，当上一个字段相同时，再按照下一个定义的排序字段进行排序\"]},\"2952\":{\"h\":\"2. 示例\",\"t\":[\"在 Postman 中，向 ES 服务器发 GET 请求 ：http://127.0.0.1:9200/shopping/_search\",\"查询结果根据price字段进行倒叙排序。\",\"2-4-4\"]},\"2953\":{\"h\":\"聚合操作\",\"t\":[\"聚合允许使用者对 es 文档进行统计分析，类似与关系型数据库中的 group by和一系列聚合函数。\",\"包括以下具体的操作：\",\"max：对某个字段取最大值\",\"min：对某个字段取最小值\",\"sum：对某个字段求和\",\"avg：对某个字段取平均值\",\"cardinality：对某个字段的值进行去重之后再取总数\",\"state：聚合，对某个字段一次性返回 count，max，min，avg 和 sum 五个指标\",\"group：进行分组\"]},\"2954\":{\"h\":\"1.语法\",\"t\":[\"请求方式：GET\",\"请求地址：http://ES数据库地址/索引名/_search\",\"聚合操作要使用aggs关键字定义，各个聚合操作的语法如下：\",\"{ \\\"aggs\\\":{ //max：取最大值 \\\"聚合查询结果名字\\\":{ \\\"max\\\":{ \\\"field\\\": \\\"字段名\\\" } }, //min：取最小值 \\\"聚合查询结果名字\\\":{ \\\"min\\\":{ \\\"field\\\": \\\"字段名\\\" } }, //sum：对某个字段求和 \\\"聚合查询结果名字\\\":{ \\\"sum\\\":{ \\\"field\\\": \\\"字段名\\\" } }, //avg：对某个字段取平均值 \\\"聚合查询结果名字\\\":{ \\\"avg\\\":{ \\\"field\\\": \\\"字段名\\\" } }, //cardinality：对某个字段的值进行去重之后再取总数 \\\"聚合查询结果名字\\\":{ \\\"cardinality\\\":{ \\\"field\\\": \\\"字段名\\\" } }, //stats：对某个字段一次性返回 count，max，min，avg 和 sum 五个指标 \\\"聚合查询结果名字\\\":{ \\\"stats\\\":{ \\\"field\\\": \\\"字段名\\\" } }, //group：对查询结果分组 \\\"聚合查询结果名字\\\":{ \\\"group\\\":{ \\\"field\\\": \\\"字段名\\\" } }, }, //聚合查询的同时也会返回所有的数据信息，设置size为0，可以只返回聚合结果 \\\"size\\\": 0 } \"]},\"2955\":{\"h\":\"2. 示例\",\"t\":[\"在 Postman 中，向 ES 服务器发 GET 请求 ：http://127.0.0.1:9200/student/_search\",\"查询price字段的所有聚合数据，并针对price进行分组。\"]},\"2956\":{\"h\":\"2.1 请求体\",\"t\":[\"{ \\\"aggs\\\":{ \\\"stats_price\\\":{ \\\"stats\\\":{ \\\"field\\\":\\\"price\\\" } }, \\\"group_category\\\":{ \\\"terms\\\":{ \\\"field\\\":\\\"price\\\" } } }, \\\"size\\\":0 } \"]},\"2957\":{\"h\":\"2.2 响应体\",\"t\":[\"{ \\\"took\\\": 2, \\\"timed_out\\\": false, \\\"_shards\\\": { \\\"total\\\": 1, \\\"successful\\\": 1, \\\"skipped\\\": 0, \\\"failed\\\": 0 }, \\\"hits\\\": { \\\"total\\\": { \\\"value\\\": 8, \\\"relation\\\": \\\"eq\\\" }, \\\"max_score\\\": null, \\\"hits\\\": [] }, \\\"aggregations\\\": { \\\"group_category\\\": { \\\"doc_count_error_upper_bound\\\": 0, \\\"sum_other_doc_count\\\": 0, \\\"buckets\\\": [ { \\\"key\\\": 5000, \\\"doc_count\\\": 2 }, { \\\"key\\\": 6000, \\\"doc_count\\\": 2 }, { \\\"key\\\": 7000, \\\"doc_count\\\": 2 }, { \\\"key\\\": 8000, \\\"doc_count\\\": 2 } ] }, \\\"stats_price\\\": { \\\"count\\\": 8, \\\"min\\\": 5000.0, \\\"max\\\": 8000.0, \\\"avg\\\": 6500.0, \\\"sum\\\": 52000.0 } } } \"]},\"2958\":{\"h\":\"高亮显示\",\"t\":[\"类似于百度，进行关键字搜索时，搜索出的内容中的关键字会进行高亮显示。\"]},\"2959\":{\"h\":\"1. 语法\",\"t\":[\"通过hightlight关键字，进行开启高亮显示。同时可以在hightlight中设置高亮显示的标签和高亮显示的字段。\",\"查询条件的写法:\",\"{ \\\"query\\\":{ \\\"match\\\":{...}//查询条件 }, \\\"highlight\\\":{ //开启高亮查询 \\\"fields\\\":{ \\\"需要高亮显示的字段\\\":{} //实测该字段必须出现在查询条件中 }, //可以进行样式配置，不配置就采用默认的 \\\"pre_tags\\\": \\\"<font color='red'>\\\", \\\"post_tags\\\": \\\"</font>\\\" } } \",\"默认的高亮标签是<em>结果中的关键字</em>\"]},\"2960\":{\"h\":\"2. 示例\",\"t\":[\"查询category:\\\"米\\\"，并对category字段里的米字进行高亮显示\",\"2-4-9\"]},\"2961\":{\"h\":\"2-4. 映射\",\"t\":[\"什么是映射\",\"映射类似于数据库(database)中的表结构(table)。\",\"创建数据库表需要设置字段名称，类型，长度，约束等；索引库也一样，需要知道这个类型下有哪些字段，每个字段有哪些约束信息，这就叫做映射(mapping)\"]},\"2962\":{\"h\":\"创建映射\",\"t\":[\"创建完索引（库）后，就可以为索引（库）添加映射信息了。\"]},\"2963\":{\"h\":\"1. 语法\",\"t\":[\"请求方式：PUT\",\"请求地址：http://ES数据库地址/索引名/_mapping\",\"映射信息通过JSON格式的请求体添加，请求体语法：\",\"{ \\\"properties\\\": { //表示添加映射 //可以添加多个映射，键为字段名，值为对象格式的映射信息 \\\"字段名\\\":{ //为uname字段添加映射 //type 为字段类型：text=可以全文检索，keyword=要完全匹配 \\\"type\\\": \\\"text\\\" , //index 表示是否创建索引，true=创建，false=不创建 \\\"index\\\": true, } } } \",\"字段名：随便写，字段名的值是一个对象，用来自定很多属性\",\"type：类型，Elasticsearch 中支持的数据类型非常丰富，常见的有以下几种 \",\"字符串 \",\"text：可分词，支持全文检索\",\"keyword：不可分词，数据必须进行完全匹配\",\"其他类型：这些不是太常用 \",\"Numerical：数字类型，包含多种子类型\",\"Date：日期类型\",\"Array：数组类型\",\"Object：对象类型\",\"index：是否索引，默认为true（也就是默认所有字段都会被索引） \",\"true：字段会被索引，可以用来进行搜索\",\"false：字段不会被索引，不能用来搜索\",\"store：是否将数据进行独立存储，默认为 false \",\"原始的文本会存储在_source 里面，默认情况下其他提取出来的字段都不是独立存储的，是从_source 里面提取出来的。当然你也可以独立的存储某个字段，只要设置\\\"store\\\": true 即可，获取独立存储的字段要比从_source 中解析快得多，但是也会占用更多的空间，所以要根据实际业务需求来设置。\",\"analyzer：分词器\"]},\"2964\":{\"h\":\"2. 示例\",\"t\":[\"有个User索引，包含三个字段：name，gender和tel，为user索引创建映射\",\"请求体：\",\"{ \\\"properties\\\":{ \\\"uname\\\":{ \\\"type\\\": \\\"text\\\", \\\"index\\\": true }, \\\"gender\\\":{ \\\"type\\\": \\\"keyword\\\", \\\"index\\\": true }, \\\"tel\\\":{ \\\"type\\\":\\\"keyword\\\", \\\"index\\\": false } } } \",\"响应：\",\"{ \\\"acknowledged\\\": true //表示创建成功 } \"]},\"2965\":{\"h\":\"查看映射\",\"t\":[\"查看索引中创建的映射，请求地址和创建映射相同，只是请求方式变成了GET。\",\"查询结果:\",\"{ \\\"user\\\": { \\\"mappings\\\": { \\\"properties\\\": { \\\"gender\\\": { \\\"type\\\": \\\"keyword\\\" }, \\\"tel\\\": { \\\"type\\\": \\\"keyword\\\", \\\"index\\\": false }, \\\"uname\\\": { \\\"type\\\": \\\"text\\\" } } } } } \"]},\"2966\":{\"h\":\"映射的效果\",\"t\":[\"想索引中插入数据后，插入的数据就会被映射限制。\",\"type：keyword类型的字段，无法进行分词查询（全文检索），只能进行完全匹配\",\"index：如果为false，将无法通过该字段进行查询。\"]},\"2967\":{\"h\":\"3-1. 配置\",\"t\":[\"警告\",\"ElasticSearch 7.x版本和ElasticSearch 8.x 版本的JavaAPI 使用相差很大，这里都列出来。\"]},\"2968\":{\"h\":\"Java API\",\"t\":[\"Elasticsearch 软件是由 Java 语言开发的，所以也可以通过 Java API 的方式对 Elasticsearch 服务进行访问 。\"]},\"2969\":{\"h\":\"搭建项目\",\"t\":[\"搭建普通的Java项目或SpringBoot项目即可。\",\"搭建完项目后，创建ESTest类用于测试JavaAPI\"]},\"2970\":{\"h\":\"ES 7.x\"},\"2971\":{\"h\":\"1. 依赖\",\"t\":[\"ES有关的依赖如下：\",\"<!-- ES 服务端 --> <dependency> <groupId>org.elasticsearch</groupId> <artifactId>elasticsearch</artifactId> <version>8.8.1</version> </dependency> <!-- ES 客户端 --> <dependency> <groupId>org.elasticsearch.client</groupId> <artifactId>elasticsearch-rest-client</artifactId> <version>8.8.1</version> </dependency> \"]},\"2972\":{\"h\":\"2. 客户端对象\",\"t\":[\"创建客户端对象用于访问ES服务器。\",\"package com.sgugo.es; public class ESTestOne { @SneakyThrows //忽略了异常的处理 public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); // 关闭ES 客户端 esClient.close(); } } \"]},\"2973\":{\"h\":\"ES 8.x\"},\"2974\":{\"h\":\"3-2. 索引\"},\"2975\":{\"h\":\"1. 创建索引\",\"t\":[\"代码如下：\",\"public class ESTestOne { @SneakyThrows public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); //创建索引 //创建索引请求对象 CreateIndexRequest request = new CreateIndexRequest(\\\"user\\\"); //发送请求，创建索引,获取响应对象 CreateIndexResponse response = esClient.indices() .create(request, RequestOptions.DEFAULT); //查看操作状态：检测索引是否创建成功 boolean acknowledged = response.isAcknowledged(); System.out.println(acknowledged); // 控制台打印：true //关闭 ES 客户端 esClient.close(); } } \"]},\"2976\":{\"h\":\"1.1 debug\",\"t\":[\"运行代码时可能会报错：Exception in thread \\\"main\\\" ...[Elasticsearch exception [... [include_type_name]]]\",\"原因：CreateIndexRequest 对象有两个，如果导错包，就会报错。\",\"正确的包：import org.elasticsearch.client.indices.CreateIndexRequest;\",\"错误的包：import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;\"]},\"2977\":{\"h\":\"2. 查看索引\",\"t\":[\"代码如下：\",\"public class ESTestTwo { @SneakyThrows public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); //查询索引：请求对象 GetIndexRequest request = new GetIndexRequest(\\\"user\\\"); //发送请求，获取查询结果 GetIndexResponse response = esClient.indices() .get(request, RequestOptions.DEFAULT); //查看索引的：别名、映射和设置 System.out.println(\\\"Aliases查询结果：\\\"+response.getAliases()); System.out.println(\\\"Mappings查询结果：\\\"+response.getMappings()); System.out.println(\\\"Mappings查询结果：\\\"+response.getSettings()); //关闭 ES 客户端 esClient.close(); } } \"]},\"2978\":{\"h\":\"3. 删除索引\",\"t\":[\"代码如下：\",\"public class ESTestTwo { @SneakyThrows public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); //删除索引 DeleteIndexRequest request = new DeleteIndexRequest(\\\"user\\\"); //发送删除所以你的请求，获取响应结果 AcknowledgedResponse response = esClient.indices() .delete(request, RequestOptions.DEFAULT); //查看响应状态：删除操作是否成功 System.out.println(response.isAcknowledged()) //关闭 ES 客户端 esClient.close(); } } \"]},\"2979\":{\"h\":\"3-3. 文档增删改\"},\"2980\":{\"h\":\"新增文档\",\"t\":[\"代码如下：\",\"public class ESTest3 { @SneakyThrows public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); //新增文档 //创建请求对象 IndexRequest request = new IndexRequest(); //指明请求对象的关联的索引，并手动设置一个_id request.index(\\\"user\\\").id(\\\"1001\\\"); //实例化数据对象，该对象转为JSON格式后，就是要添加的文档数据 User user = new User(); user.setName(\\\"Aaron\\\"); user.setAge(20); user.setGender(\\\"male\\\"); //使用ObjectMapper将数据对象转为JSON格式：向ES中插入数据必须是JSON格式 ObjectMapper mapper = new ObjectMapper(); String userJson = mapper.writeValueAsString(user); //将json数据作为请求体与请求对象关联 request.source(userJson, XContentType.JSON); //发送请求，获取响应对象 IndexResponse response = esClient.index(request, RequestOptions.DEFAULT); //查看返回的结果 System.out.println(response.getResult()); //关闭 ES 客户端 esClient.close(); } } \"]},\"2981\":{\"h\":\"1. 数据对象\",\"t\":[\"在Java中储存数据，一般要创建一个数据对象，这里创建了一个JavaBean User\",\"public class User { private String name; private String gender; private Integer age; //getter & setter } \",\"并不是强制使用数据对象，直接手写JSON字符串作为source方法的第一个参数也可以。\"]},\"2982\":{\"h\":\"2. ObjectMapper\",\"t\":[\"向ES插入的数据必须是JSON个格式，因此需要将Java对象转成JSON字符串。\",\"ObjectMapper是Jackson依赖里的类，因此需要先导入依赖。\",\"<!--工具：Java对象转JSON --> <dependency> <groupId>com.fasterxml.jackson.core</groupId> <artifactId>jackson-databind</artifactId> <version>2.15.2</version> </dependency> \"]},\"2983\":{\"h\":\"修改文档\",\"t\":[\"需要UpdateRequest请求对象，代码如下：\",\"public class ESTest3 { @SneakyThrows public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); //修改数据：这里指的是局部修改 //创建请求对象：UpdateRequest UpdateRequest request = new UpdateRequest(); //指定要修改的索引和文档的_id request.index(\\\"user\\\").id(\\\"1001\\\"); //指定要修改的内容：可以依次指定多个要修改的字段 request.doc(XContentType.JSON,\\\"name\\\",\\\"Victor\\\",\\\"gender\\\",\\\"female\\\"); //发送请求，获取请求对象 UpdateResponse response = esClient.update(request, RequestOptions.DEFAULT); //查看请求的结果 System.out.println(response.getResult()); //UPDATE //关闭 ES 客户端 esClient.close(); } } \"]},\"2984\":{\"h\":\"删除文档\",\"t\":[\"根据 _id 删除文档，需要DeleteRequest请求对象，代码如下：\",\"public class ESTest3 { @SneakyThrows public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); //根据_id删除文档 //创建请求对象：DeleteRequest DeleteRequest request = new DeleteRequest(); //关联要删除的索引和文档_id request.index(\\\"user\\\").id(\\\"1001\\\"); //发送请求，获取响应结果 DeleteResponse response = esClient.delete(request, RequestOptions.DEFAULT); //打印操作的结果 System.out.println(response.getResult); //DELETE //关闭 ES 客户端 esClient.close(); } } \"]},\"2985\":{\"h\":\"批量操作\",\"t\":[\"需要使用BulkRequest请求对象，该对象通过add方法，添加多个普通的请求对象，从而实现将多个普通的请求对象，一次性进行请求。\"]},\"2986\":{\"h\":\"1. 批量新增文档\",\"t\":[\"需要结合BulkRequest请求对象和IndexRequest请求对象，代码如下：\",\"public class ESTest3 { @SneakyThrows public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); //批量新增文档 //创建请求对象：BulkRequest() BulkRequest request = new BulkRequest(); //添加文档数据：需要使用IndexRequest请求对象 //为了简化操作，这里直接手写JSON字符串，而不是先创建数据对象再转为JSON IndexRequest user1 = new IndexRequest().index(\\\"user\\\").id(\\\"1002\\\") .source(XContentType.JSON, \\\"name\\\", \\\"V\\\", \\\"age\\\", 20, \\\"gender\\\", \\\"male\\\"); IndexRequest user2 = new IndexRequest().index(\\\"user\\\").id(\\\"1003\\\") .source(XContentType.JSON, \\\"name\\\", \\\"J\\\", \\\"age\\\", 21, \\\"gender\\\", \\\"male\\\"); IndexRequest user3 = new IndexRequest().index(\\\"user\\\").id(\\\"1004\\\") .source(XContentType.JSON, \\\"name\\\", \\\"T\\\", \\\"age\\\", 22, \\\"gender\\\", \\\"male\\\"); request.add(user1).add(user2).add(user3); //发送请求，获取响应 BulkResponse response = esClient.bulk(request, RequestOptions.DEFAULT); //查看操作结果 System.out.println(\\\"耗时：\\\"+response.getTook()); System.out.println(\\\"成员：\\\"+ Arrays.toString(response.getItems())); //关闭 ES 客户端 esClient.close(); } } \"]},\"2987\":{\"h\":\"2. 批量删除文档\",\"t\":[\"需要结合BulkRequest请求对象和DeleteRequest请求对象，操作步骤和批量添加类似\",\"代码如下：\",\"public class ESTest3 { @SneakyThrows public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); //批量删除文档 //创建请求对象：BulkRequest() BulkRequest request = new BulkRequest(); //删除文档：需要使用DeleteRequest请求对象 DeleteRequest user1 = new DeleteRequest().index(\\\"user\\\").id(\\\"1002\\\"); DeleteRequest user2 = new DeleteRequest().index(\\\"user\\\").id(\\\"1002\\\"); DeleteRequest user3 = new DeleteRequest().index(\\\"user\\\").id(\\\"1002\\\"); request.add(user1).add(user2).add(user3); //发送请求，获取响应 BulkResponse response = esClient.bulk(request, RequestOptions.DEFAULT); //查看操作结果 System.out.println(\\\"耗时：\\\"+response.getTook()); System.out.println(\\\"成员：\\\"+ Arrays.toString(response.getItems())); //关闭 ES 客户端 esClient.close(); } } \"]},\"2988\":{\"h\":\"debug\",\"t\":[\"在使用SpringBoot时，很有可能会报错，这是因为ES版本与SpringBoot版本不兼容。\",\"不过即使报错，数据也还是插入成功了（只是无法获取响应数据了）。\",\"解决方案：\",\"匹配合适的版本\",\"捕获异常，并将报错信息忽略\"]},\"2989\":{\"h\":\"3-4. 文档查询\"},\"2990\":{\"h\":\"基本查询\",\"t\":[\"最基本的查询是：通过主键 _id 查询，或者直接查询索引下所有的文档\"]},\"2991\":{\"h\":\"1. 根据_id 查询文档\",\"t\":[\"需要GetRequest请求对象，代码如下：\",\"public class ESTest3 { @SneakyThrows public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); //根据_id查询文档：这里指的是局部修改 //创建请求对象：GetRequest GetRequest request = new GetRequest(); //关联要修改的索引和文档_id request.index(\\\"user\\\").id(\\\"1001\\\"); //发送请求，获取响应结果 GetResponse response = esClient.get(request, RequestOptions.DEFAULT); //以JSON字符串的格式打印查询结果 System.out.println(response.getSourceAsString()); //关闭 ES 客户端 esClient.close(); } } \",\"打印结果：{\\\"name\\\":\\\"Victor\\\",\\\"gender\\\":\\\"female\\\",\\\"age\\\":20}\"]},\"2992\":{\"h\":\"2. 查询所有文档\",\"t\":[\"通过SearchRequest对象，可以查看指定索引下的所有文档，代码如下：\",\"public class ESTest3 { @SneakyThrows public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); //查询所有文档 //创建请求对象：SearchRequest SearchRequest request = new SearchRequest(); //关联要查看的索引 request.indices(\\\"user\\\"); // 构建查询的请求体 SearchSourceBuilder sourceBuilder = new SearchSourceBuilder(); //查询所有数据 sourceBuilder.query(QueryBuilders.matchAllQuery()); request.source(sourceBuilder); //发送请求 SearchResponse response = esClient.search(request, RequestOptions.DEFAULT); //查看查询的结果 SearchHits hits = response.getHits(); for (SearchHit hit : hits) { System.out.println(hit.getSourceAsString()); } //关闭 ES 客户端 esClient.close(); } } \",\"打印结果如下：\",\"{\\\"name\\\":\\\"Victor\\\",\\\"gender\\\":\\\"female\\\",\\\"age\\\":20} {\\\"name\\\":\\\"V\\\",\\\"age\\\":\\\"20\\\",\\\"gender\\\":\\\"male\\\"} {\\\"name\\\":\\\"Jinno\\\",\\\"age\\\":\\\"21\\\",\\\"gender\\\":\\\"male\\\"} {\\\"name\\\":\\\"Tom\\\",\\\"age\\\":\\\"22\\\",\\\"gender\\\":\\\"male\\\"} \"]},\"2993\":{\"h\":\"条件查询\",\"t\":[\"通过SearchRequest请求对象进行查询，通过SearchSourceBuilder对象构建查询的请求体，在请求体中设置查询条件。\",\"示例代码：\",\"public class ESTest4 { @SneakyThrows public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); //条件查询 //创建请求对象：SearchRequest SearchRequest request = new SearchRequest(); //指定要查询的索引 request.indices(\\\"user\\\"); //构建查询条件：也就是请求体 request.source( new SearchSourceBuilder().query( QueryBuilders.matchQuery(\\\"age\\\", \\\"20\\\") ) ); //发送请求，查询数据 SearchResponse response = esClient.search(request, RequestOptions.DEFAULT); //查看查询的结果集 SearchHits hits = response.getHits(); for(SearchHit hit : hits){ System.out.println(hit); } //关闭 ES 客户端 esClient.close(); } } \",\"打印的结果\",\"{ \\\"_index\\\" : \\\"user\\\", \\\"_id\\\" : \\\"1001\\\", \\\"_score\\\" : 1.0, \\\"_source\\\" : { \\\"name\\\" : \\\"Victor\\\", \\\"gender\\\" : \\\"female\\\", \\\"age\\\" : 20 } } { \\\"_index\\\" : \\\"user\\\", \\\"_id\\\" : \\\"1002\\\", \\\"_score\\\" : 1.0, \\\"_source\\\" : { \\\"name\\\" : \\\"V\\\", \\\"age\\\" : \\\"20\\\", \\\"gender\\\" : \\\"male\\\" } } \"]},\"2994\":{\"h\":\"全量查询\",\"t\":[\"请求体内的查询条件可以设置为：matchAllQuery()，这样就可以查询索引内所有的文档了。\",\"//构建查询条件：也就是请求体 request.source( new SearchSourceBuilder().query(QueryBuilders.matchAllQuery()) ); \"]},\"2995\":{\"h\":\"组合查询\",\"t\":[\"又称多条件查询，根据多个查询条件进行查询，和MySQL的组合查询类似。\"]},\"2996\":{\"h\":\"1. BoolQueryBuilder\",\"t\":[\"通过BoolQueryBuilder对象调用组合方法进行组合查询，组合方法有三个：\",\"must：必须，多个条件必须全部符合\",\"mustNot：必须不，多个条件必须都不符合\",\"should：或，多个条只要符合一个即可\",\"这三个方法的参数都是包含查询条件的QueryBuilders对象\",\"//构建查询条件：也就是请求体 SearchSourceBuilder ssb = new SearchSourceBuilder(); // 创建BoolQueryBuilder对象 BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery(); // 调用组合方法 boolQueryBuilder.must(QueryBuilders.matchQuery(\\\"字段\\\",\\\"字段的值\\\")); //请求体拼接 组合查询的条件：BoolQueryBuilder对象 ssb.query(boolQueryBuilder); \",\"多个条件，需要多次调用组合方法，而不是提供多个参数。\"]},\"2997\":{\"h\":\"2. 示例代码\",\"t\":[\"public class ESTest7 { @SneakyThrows public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); //分页查询 //创建请求对象：SearchRequest SearchRequest request = new SearchRequest(); //指定要查询的索引 request.indices(\\\"user\\\"); //构建查询条件：也就是请求体 SearchSourceBuilder ssb = new SearchSourceBuilder(); // 创建BoolQueryBuilder对象 BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery(); // 调用组合方法 boolQueryBuilder.must(QueryBuilders.matchQuery(\\\"age\\\",\\\"21\\\")); boolQueryBuilder.mustNot(QueryBuilders.matchQuery(\\\"gender\\\",\\\"female\\\")); //请求体拼接 组合查询的条件：BoolQueryBuilder对象 ssb.query(boolQueryBuilder); //请求对象添加查询条件 request.source(ssb); //发送请求，查询数据 SearchResponse response = esClient.search(request, RequestOptions.DEFAULT); //查看查询的结果集 SearchHits hits = response.getHits(); for(SearchHit hit : hits){ System.out.println(hit); } //关闭 ES 客户端 esClient.close(); } } \",\"打印结果：\",\"{ \\\"_index\\\" : \\\"user\\\", \\\"_id\\\" : \\\"1003\\\", \\\"_score\\\" : 1.0, \\\"_source\\\" : { \\\"name\\\" : \\\"J\\\", \\\"age\\\" : 21, \\\"gender\\\" : \\\"male\\\" } } \"]},\"2998\":{\"h\":\"过滤查询\",\"t\":[\"过滤查询指的是返回指定的字段，而不是默认返回所有字段。\"]},\"2999\":{\"h\":\"fetchSource\",\"t\":[\"通过SearchSourceBuilder对象构建查询条件时，可以调用fetchSource方法指定过滤的字段，该方法有两个参数：\",\"includes：类型 String[]，排除的字段\",\"excludes：类型 String[]，包含的字段\",\"//构建查询条件：也就是请求体，这里进行全量查询 SearchSourceBuilder ssb = new SearchSourceBuilder().query(QueryBuilders.matchAllQuery()); //设置fetchSource方法的参数 String[] includes = {\\\"name\\\",\\\"age\\\"}; String[] excludes = {}; //设置查询的过滤条件 ssb.fetchSource(includes,excludes); \"]},\"3000\":{\"h\":\"示例代码\",\"t\":[\"public class ESTest6 { @SneakyThrows public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); //过滤查询 //创建请求对象：SearchRequest SearchRequest request = new SearchRequest(); //指定要查询的索引 request.indices(\\\"user\\\"); //构建查询条件：也就是请求体，这里进行全量查询 SearchSourceBuilder ssb = new SearchSourceBuilder() .query(QueryBuilders.matchAllQuery()); //设置fetchSource方法的参数 String[] includes = {\\\"name\\\",\\\"age\\\"}; String[] excludes = {}; //设置查询的过滤条件 ssb.fetchSource(includes,excludes); //请求对象添加查询条件 request.source(ssb); //发送请求，查询数据 SearchResponse response = esClient.search(request, RequestOptions.DEFAULT); //查看查询的结果集 SearchHits hits = response.getHits(); for(SearchHit hit : hits){ System.out.println(hit.getSourceAsString()); } //关闭 ES 客户端 esClient.close(); } } \",\"打印结果：\",\"{\\\"name\\\":\\\"Aaron\\\",\\\"age\\\":20} {\\\"name\\\":\\\"V\\\",\\\"age\\\":20} {\\\"name\\\":\\\"J\\\",\\\"age\\\":21} {\\\"name\\\":\\\"T\\\",\\\"age\\\":22} \"]},\"3001\":{\"h\":\"范围查询\"},\"3002\":{\"h\":\"1. RangeQueryBuilder\",\"t\":[\"通过RangeQueryBuilder对象可以创建范围查询构造器，使用对象调用范围查询的方法便能进行范围查询，范围查询的方法包括：\",\"gt：>，大于\",\"gte：>=，大于等于\",\"lt：<，小于\",\"lte：<=，小于等于\",\"RangeQueryBuilder对象的参数是要进行范围查询的字段；返回查询方法可以多次调用。\",\"//创建范围查询的builder RangeQueryBuilder rangeQueryBuilder = new RangeQueryBuilder(\\\"age\\\"); //调用范围查询的方法 rangeQueryBuilder.gte(21).lte(22); //设置查询条件 SearchSourceBuilder ssb = new SearchSourceBuilder().query(rangeQueryBuilder); //请求对象添加查询条件 request.source(ssb); \"]},\"3003\":{\"h\":\"2. 示例代码\",\"t\":[\"public class ESTest8 { @SneakyThrows public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); //范围查询 //创建请求对象：SearchRequest SearchRequest request = new SearchRequest(); //指定要查询的索引 request.indices(\\\"user\\\"); //创建范围查询的builder RangeQueryBuilder rangeQueryBuilder = new RangeQueryBuilder(\\\"age\\\"); //调用范围查询的方法 rangeQueryBuilder.gte(21).lte(22); //设置查询条件 SearchSourceBuilder ssb = new SearchSourceBuilder().query(rangeQueryBuilder); //请求对象添加查询条件 request.source(ssb); //发送请求，查询数据 SearchResponse response = esClient.search(request, RequestOptions.DEFAULT); //查看查询的结果集 SearchHits hits = response.getHits(); for(SearchHit hit : hits){ System.out.println(hit.getSourceAsString()); } //关闭 ES 客户端 esClient.close(); } } \",\"打印结果：\",\"{\\\"name\\\":\\\"J\\\",\\\"age\\\":21,\\\"gender\\\":\\\"male\\\"} {\\\"name\\\":\\\"T\\\",\\\"age\\\":22,\\\"gender\\\":\\\"male\\\"} \"]},\"3004\":{\"h\":\"模糊查询\",\"t\":[\"类似于MySQl的like\"]},\"3005\":{\"h\":\"1. fuzzyQueryBuilder\",\"t\":[\"QueryBuilders对象调用fuzzyQuery方法可以进行模糊查询，调用fuzziness方法可设置模糊查询的偏移值。\",\"fuzzyQuery：创建模糊查询构造器，参数是要进行模糊查询的字段和值\",\"fuzziness：指定模糊查询的偏移值，即跟指定值相差几个字符可以命中 \",\"Fuzziness.ONE：表示相差一个\",\"Fuzziness.ONE：表示相差两个\",\"//创建SearchSourceBuilder FuzzyQueryBuilder fuzzyQueryBuilder = QueryBuilders.fuzzyQuery(\\\"name\\\", \\\"T\\\") .fuzziness(Fuzziness.ONE); //将fuzzyQueryBuilder加入请求体 SearchSourceBuilder ssb = new SearchSourceBuilder().query(fuzzyQueryBuilder); //请求对象添加查询条件 request.source(ssb); \"]},\"3006\":{\"h\":\"2. 示例代码\",\"t\":[\"public class ESTest9 { @SneakyThrows public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); //模糊查询 //创建请求对象：SearchRequest SearchRequest request = new SearchRequest(); //指定要查询的索引 request.indices(\\\"user\\\"); //创建SearchSourceBuilder FuzzyQueryBuilder fuzzyQueryBuilder = QueryBuilders.fuzzyQuery(\\\"name\\\", \\\"T\\\") .fuzziness(Fuzziness.ONE); SearchSourceBuilder ssb = new SearchSourceBuilder().query(fuzzyQueryBuilder); //请求对象添加查询条件 request.source(ssb); //发送请求，查询数据 SearchResponse response = esClient.search(request, RequestOptions.DEFAULT); //查看查询的结果集 SearchHits hits = response.getHits(); for(SearchHit hit : hits){ System.out.println(hit.getSourceAsString()); } //关闭 ES 客户端 esClient.close(); } } \",\"打印的结果：\",\"{\\\"name\\\":\\\"V\\\",\\\"age\\\":20,\\\"gender\\\":\\\"male\\\"} {\\\"name\\\":\\\"J\\\",\\\"age\\\":21,\\\"gender\\\":\\\"male\\\"} {\\\"name\\\":\\\"T\\\",\\\"age\\\":22,\\\"gender\\\":\\\"male\\\"} \"]},\"3007\":{\"h\":\"分页\",\"t\":[\"通过SearchSourceBuilder对象构建查询条件时，可以调用form和size方法设置分页。\",\"from：当前页的起始索引，默认从 0 开始 \",\"分页公式：from = (pageNum - 1) * size\",\"size：每页显示多少条\"]},\"3008\":{\"h\":\"示例代码\",\"t\":[\"public class ESTest5 { @SneakyThrows public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); //分页查询 //创建请求对象：SearchRequest SearchRequest request = new SearchRequest(); //指定要查询的索引 request.indices(\\\"user\\\"); //构建查询条件：也就是请求体，这里进行全量查询 SearchSourceBuilder ssb = new SearchSourceBuilder() .query(QueryBuilders.matchAllQuery()); //设置分页数据：from设置查询的起始index，size设置每页查询几条 ssb.from(0).size(2); //请求对象添加查询条件 request.source(ssb); //发送请求，查询数据 SearchResponse response = esClient.search(request, RequestOptions.DEFAULT); //查看查询的结果集 SearchHits hits = response.getHits(); for(SearchHit hit : hits){ System.out.println(hit.getSourceAsString()); } //关闭 ES 客户端 esClient.close(); } } \",\"打印的结果：\",\"{\\\"name\\\":\\\"Aaron\\\",\\\"age\\\":20,\\\"gender\\\":\\\"male\\\"} {\\\"name\\\":\\\"V\\\",\\\"age\\\":20,\\\"gender\\\":\\\"male\\\"} \"]},\"3009\":{\"h\":\"排序\",\"t\":[\"通过SearchSourceBuilder对象构建查询条件时，可以调用sort方法，指定一个字段作为排序依据，并指明排序方式。\",\"SortOrder.ASC：正序\",\"SortOrder.DESC：倒序\"]},\"3010\":{\"h\":\"测试代码\",\"t\":[\"public class ESTest5 { @SneakyThrows public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); //排序查询 //创建请求对象：SearchRequest SearchRequest request = new SearchRequest(); //指定要查询的索引 request.indices(\\\"user\\\"); //构建查询条件：也就是请求体，这里进行全量查询 SearchSourceBuilder ssb = new SearchSourceBuilder() .query(QueryBuilders.matchAllQuery()); //设置排序方式 ssb.sort(\\\"age\\\", SortOrder.ASC); //请求对象添加 查询条件 request.source(ssb); //发送请求，查询数据 SearchResponse response = esClient.search(request, RequestOptions.DEFAULT); //查看查询的结果集 SearchHits hits = response.getHits(); for(SearchHit hit : hits){ System.out.println(hit.getSourceAsString()); } //关闭 ES 客户端 esClient.close(); } } \"]},\"3011\":{\"h\":\"打印结果\",\"t\":[\"{\\\"name\\\":\\\"Aaron\\\",\\\"age\\\":20,\\\"gender\\\":\\\"male\\\"} {\\\"name\\\":\\\"V\\\",\\\"age\\\":20,\\\"gender\\\":\\\"male\\\"} {\\\"name\\\":\\\"J\\\",\\\"age\\\":21,\\\"gender\\\":\\\"male\\\"} {\\\"name\\\":\\\"T\\\",\\\"age\\\":22,\\\"gender\\\":\\\"male\\\"} \"]},\"3012\":{\"h\":\"多个字段排序\",\"t\":[\"实测，无论是直接写多个参数，还是多次调用sort，都会报错。暂时无法进行多个字段排序。\"]},\"3013\":{\"h\":\"聚合操作\",\"t\":[\"聚合允许使用者对 es 文档进行统计分析，类似与关系型数据库中的 group by和一系列聚合函数。\",\"包括以下具体的操作：\",\"max：对某个字段取最大值\",\"min：对某个字段取最小值\",\"sum：对某个字段求和\",\"avg：对某个字段取平均值\",\"cardinality：对某个字段的值进行去重之后再取总数\",\"state：聚合，对某个字段一次性返回 count，max，min，avg 和 sum 五个指标\",\"group：进行分组\"]},\"3014\":{\"h\":\"1. aggregation\",\"t\":[\"SearchSourceBuilder对象调用aggregation方法可以进行聚合操作，其中aggregation方法的参数就是聚合函数构造器：AggregationBuilders。\",\"AggregationBuilders可以调用聚合函数\",\"max：对某个字段取最大值\",\"min：对某个字段取最小值\",\"avg：对某个字段取平均值\",\"sum：对某个字段求和\",\"terms：分组\",\"cardinality：对某个字段的值进行去重之后再取总数\",\"state：聚合，对某个字段一次性返回 count，max，min，avg 和 sum 五个指标\",\"聚合函数的参数就是此次查询的名字，可以任意取。\",\"AggregationBuilders可继续调用field函数，指定要操作的字段。\",\"SearchSourceBuilder ssb = new SearchSourceBuilder(); ssb.aggregation(AggregationBuilders.聚合函数(\\\"操作名\\\").field(\\\"操作的字段\\\")); //请求对象添加查询条件 request.source(ssb); \"]},\"3015\":{\"h\":\"2. 代码示例\",\"t\":[\"public class ESTest10 { @SneakyThrows public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); //聚合操作 //创建请求对象：SearchRequest SearchRequest request = new SearchRequest(); //指定要查询的索引 request.indices(\\\"user\\\"); SearchSourceBuilder ssb = new SearchSourceBuilder(); //调用aggregation方法，使用聚合函数 ssb.aggregation(AggregationBuilders.max(\\\"maxAge\\\").field(\\\"age\\\")).size(0); //请求对象添加查询条件 request.source(ssb); //发送请求，查询数据 SearchResponse response = esClient.search(request, RequestOptions.DEFAULT); //查看查询的结果 System.out.println(response); //关闭 ES 客户端 esClient.close(); } } \",\"打印的结果：\",\"{ \\\"took\\\":1, \\\"timed_out\\\":false, \\\"_shards\\\":{ \\\"total\\\":1, \\\"successful\\\":1, \\\"skipped\\\":0, \\\"failed\\\":0 }, \\\"hits\\\":{ //调用了size(0)，所以hits里不会有查询结果 \\\"total\\\":{ \\\"value\\\":4, \\\"relation\\\":\\\"eq\\\" }, \\\"max_score\\\":null, \\\"hits\\\":[] }, \\\"aggregations\\\":{ \\\"max#maxAge\\\":{ \\\"value\\\":22.0 //这是我们要的值 } } } \"]},\"3016\":{\"h\":\"3. size(0)\",\"t\":[\"聚合查询，会同时进行全量查询，可以调用size(0)，不返回全量查询的结果。\",\"SearchSourceBuilder ssb = new SearchSourceBuilder(); ssb.aggregation(AggregationBuilders.聚合函数(\\\"操作名\\\").field(\\\"操作的字段\\\")).size(0); \"]},\"3017\":{\"h\":\"高亮显示\",\"t\":[\"类似于百度，进行关键字搜索时，搜索出的内容中的关键字会进行高亮显示。\"]},\"3018\":{\"h\":\"1. matchPhraseQuery 与 HightlightBuilder\",\"t\":[\"QueryBuilders对象调用matchPhraseQuery方法可以创建创建高亮查询构造器。\",\"对于高亮查询可以通过HighlightBuilder对象对高亮显示进行配置，配置的方法如下：\",\"preTags：设置标签前缀\",\"postTags：设置标签后缀\",\"field：设置高亮字段\",\"//创建强求体 SearchSourceBuilder ssb = new SearchSourceBuilder(); //构建查询方式：高亮查询 MatchPhraseQueryBuilder mp = QueryBuilders.matchPhraseQuery(\\\"name\\\", \\\"T\\\"); //设置高亮字段 HighlightBuilder highlightBuilder = new HighlightBuilder(); highlightBuilder.preTags(\\\"<font color='red'>\\\");//设置标签前缀 highlightBuilder.postTags(\\\"</font>\\\");//设置标签后缀 highlightBuilder.field(\\\"name\\\");//设置高亮字段 ssb.highlighter(highlightBuilder); //设置查询方式 ssb.query(mp); //设置请求体：请求对象添加查询条件 request.source(ssb); \"]},\"3019\":{\"h\":\"2. 代码示例\",\"t\":[\"public class ESTest11 { @SneakyThrows public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); //高亮查询 //创建请求对象：SearchRequest SearchRequest request = new SearchRequest(); //指定要查询的索引 request.indices(\\\"user\\\"); //创建强求体 SearchSourceBuilder ssb = new SearchSourceBuilder(); //构建查询方式：高亮查询 MatchPhraseQueryBuilder mp = QueryBuilders.matchPhraseQuery(\\\"name\\\", \\\"T\\\"); //设置高亮字段 HighlightBuilder highlightBuilder = new HighlightBuilder(); highlightBuilder.preTags(\\\"<font color='red'>\\\");//设置标签前缀 highlightBuilder.postTags(\\\"</font>\\\");//设置标签后缀 highlightBuilder.field(\\\"name\\\");//设置高亮字段 ssb.highlighter(highlightBuilder); //设置查询方式 ssb.query(mp); //设置请求体：请求对象添加查询条件 request.source(ssb); //发送请求，查询数据 SearchResponse response = esClient.search(request, RequestOptions.DEFAULT); //查看查询的结果集 SearchHits hits = response.getHits(); for(SearchHit hit : hits){ System.out.println(hit); } //关闭 ES 客户端 esClient.close(); } } \",\"打印结果：\",\"{ \\\"_index\\\" : \\\"user\\\", \\\"_id\\\" : \\\"1004\\\", \\\"_score\\\" : 1.2039728, \\\"_source\\\" : { \\\"name\\\" : \\\"T\\\", \\\"age\\\" : 22, \\\"gender\\\" : \\\"male\\\" }, \\\"highlight\\\" : { \\\"name\\\" : [ \\\"<font color='red'>T</font>\\\" ] } } \"]},\"3020\":{\"h\":\"1-1. 介绍\"},\"3021\":{\"h\":\"Ⅰ. MongoDB 简介\",\"t\":[\"MongoDB是一个开源、高性能、无模式的 文档型数据库 ，当初的设计就是用于简化开发和方便扩展，是NoSQL数据库产品中的一种。是 最像关系型数据库（MySQL） 的非关系型数据库。\"]},\"3022\":{\"h\":\"1. line\",\"t\":[\"官网：https://www.mongodb.com/\"]},\"3023\":{\"h\":\"2. 语法风格\",\"t\":[\"类似于: JS+MySQL的缝合\"]},\"3024\":{\"h\":\"3. 优点\",\"t\":[\"高性能：MongoDB提供高性能的数据持久性。\",\"高可用：MongoDB的复制工具称为副本集（replica set），它可提供自动故障转移和数据冗余。\",\"高扩展：提供了水平可扩展性作为其核心功能的一部分。\",\"丰富查询支持：支持丰富的查询语言\",\"其他：如无模式（动态模式）、灵活的文档模型\"]},\"3025\":{\"h\":\"4. 应用场景\",\"t\":[\"很多应用场景，关系型数据库难易应对。 其实MogoDB很多时候是关系型数据库的一个替代。\"]},\"3026\":{\"h\":\"3.1 解决的问题\",\"t\":[\"MongoDB可应对“三高”需求：\",\"High performance - 对数据库高并发读写的需求。\",\"Huge Storage - 对海量数据的高效率存储和访问的需求。\",\"High Scalability && High Availability- 对数据库的高可扩展性和高可用性的需求。\"]},\"3027\":{\"h\":\"3.2 具体应用场景\",\"t\":[\"适合：数据流大、读写频繁以及价值比较低的数据。\",\"社交场景：使用 MongoDB 存储用户信息，以及用户发表的朋友圈信息，通过地理位置索引实现附近的人、地点等功能。\",\"游戏场景：使用 MongoDB 存储游戏用户信息，用户的装备、积分等直接以内嵌文档的形式存储，方便查询、高效率存储和访问。\",\"物流场景：使用 MongoDB 存储订单信息，订单状态在运送过程中会不断更新，以 MongoDB 内嵌数组的形式来存储，一次查询就能将订单所有的变更读取出来。\",\"物联网场景：使用 MongoDB 存储所有接入的智能设备信息，以及设备汇报的日志信息，并对这些信息进行多维度的分析。\",\"视频直播，使用 MongoDB 存储用户信息、点赞互动信息等。\"]},\"3028\":{\"h\":\"3.3 选择的依据\",\"t\":[\"新应用，需求会变，数据模型无法确定，想快速迭代开发\",\"应用不需要事务及复杂 join 支持\",\"应用需要TB甚至 PB 级别数据存储\",\"应用发展迅速，需要能快速水平扩展\",\"应用需要大量的地理位置查询、文本查询\"]},\"3029\":{\"h\":\"4. Serverless\",\"t\":[\"当前，云服务兴起，云服务一般采用以MongoDB为核心的数据库架构。\"]},\"3030\":{\"h\":\"Ⅱ. 存储结构\"},\"3031\":{\"h\":\"1. 和MySQL对比\",\"t\":[\"1-1-1\",\"术语对比\",\"SQL术语\",\"MongoDB术语\",\"说明\",\"database\",\"database\",\"数据库\",\"table\",\"collection\",\"数据库表/集合\",\"row\",\"document\",\"数据记录行/文档\",\"column\",\"ﬁeld\",\"数据字段/域\",\"index\",\"index\",\"索引\",\"table joins\",\"表连接,MongoDB不支持\",\"嵌入文档\",\"MongoDB通过嵌入式文档来替代多表连接\",\"primary key\",\"primary key\",\"主键,MongoDB自动将_id字段设置为主键\"]},\"3032\":{\"h\":\"2. 数据结构\",\"t\":[\"MongoDB支持的数据结构非常松散，是一种类似于 JSON 的 格式叫BSON，所以它既可以存储比较复杂的数据类型，又相当的灵活。\",\"MongoDB中的记录是一个 文档 ，它是一个由字段和值对（ﬁeld:value）组成的数据结构。MongoDB文档类似于JSON对象，即 一个文档认为就是一个对象 。字段的数据类型是字符型，它的值除了使用基本的一些类型外，还可以包括其他文档、普通数组和文档数组。\",\"MongoDB的最小存储单位就是文档(document)对象。文档(document)对象对应于关系型数据库的 行 。 数据在MongoDB中以BSON（Binary-JSON）文档的格式存储在磁盘上。\"]},\"3033\":{\"h\":\"3. BSON\",\"t\":[\"BSON（Binary Serialized Document Format）是一种类json的一种二进制形式的存储格式，简称Binary JSON。BSON和JSON一样，支持内嵌的文档对象和数组对象，但是BSON有JSON没有的一些数据类型，如Date和BinData类型。\",\"BSON采用了类似于 C 语言结构体的名称、对表示方法，支持内嵌的文档对象和数组对象，具有轻量性、可遍历性、高效性的三个特点，可以有效描述非结构化数据和结构化数据。这种格式的优点是灵活性高，但它的缺点是空间利用率不是很理想。\",\"Bson中，除了基本的JSON类型：string,integer,boolean,double,null,array和object，mongo还使用了特殊的数据类型。这些类型包括date,object id,binary data,regular expression 和code。每一个驱动都以特定语言的方式实现了这些类型。\"]},\"3034\":{\"h\":\"4. BSON数据类型参考\",\"t\":[\"数据类型\",\"描述\",\"举例\",\"字符串\",\"字符串类型的数据\",\"{\\\"x\\\" : \\\"foobar\\\"} \",\"对象id\",\"文档的12字节的唯一 ID\",\"{\\\"x\\\" \\\\:ObjectId() } \",\"布尔值\",\"true或者false\",\"{\\\"x\\\"\\\\:true} \",\"数组\",\"值的集合或者列表可以表示成数组\",\"{\\\"x\\\" ： \\\\[\\\"a\\\", \\\"b\\\", \\\"c\\\"]}\",\"浮点数\",\"数字就这一种类型，不支持整数\",\"{\\\"x\\\"：3.14159，\\\"y\\\"：3}\",\"null\",\"空值或者未定义的对象\",\"{\\\"x\\\"\\\\:null}\",\"undeﬁned\",\"未定义类型\",\"{\\\"x\\\"\\\\:undeﬁned}\",\"正则表达式\",\"采用JavaScript的正则表达式语法\",\"{\\\"x\\\" ： /foobar/i} \",\"代码\",\"文档中还可以包含JavaScript代码\",\"{\\\"x\\\" ： function() { /\\\\* …… \\\\*/ }}\"]},\"3035\":{\"h\":\"Ⅲ. MongoDB 与 Redis\",\"t\":[\"MongoDB和Redis都是NoSQL，采用结构型数据存储。 现在的分布式项目基本都会用到redis和mongodb。 二者在使用场景中，存在一定的区别。\"]},\"3036\":{\"h\":\"1. 定位\",\"t\":[\"定为不同：大家一般称之为Redis缓存、MongoDB数据库。\",\"Redis主要把数据存储在内存中，其“缓存”的性质远大于其“数据存储“的性质，其中数据的增删改查也只是像变量操作一样简单；\",\"MongoDB却是一个“存储数据”的系统，增删改查可以添加很多条件，就像SQL数据库一样灵活。\"]},\"3037\":{\"h\":\"2. 应用场景对比\",\"t\":[\"Redis︰场景较多，比如分布式架构，做session共享，高速缓存。\",\"Mongodb︰日志记录、内容管理或者博客平台，比如评论系统。\"]},\"3038\":{\"h\":\"1-2. 安装\",\"t\":[\"当前版本：6.0.5\"]},\"3039\":{\"h\":\"Ⅰ. Windows\"},\"3040\":{\"h\":\"1. 下载安装包\",\"t\":[\"下载地址：https://www.mongodb.com/download-center#community\",\"1-2-1\",\"版本的选择\",\"MongoDB的版本命名规范如：x.y.z；\",\"y为奇数时表示当前版本为开发版\",\"y为偶数时表示当前版本为稳定版\",\"z是修正版本号，数字越大越好\"]},\"3041\":{\"h\":\"2. 安装\",\"t\":[\"下载的打包格式选zip，即为绿色软件，直接解压即可。 在解压的目录中，创建一个存放数据的目录，如：data/db\"]},\"3042\":{\"h\":\"3. 启动\",\"t\":[\"提示\",\"下载的是绿色软件，是没有配置环境变量的（可以选择手动配置），启动时需要在bin目录输入命令，且需要手动指定参数。\"]},\"3043\":{\"h\":\"3.1 通过参数启动服务\",\"t\":[\"在软件的bin目录，输入以下命令：\",\"mongod --dbpath=..\\\\data\\\\db \",\"--dbpath：该参数用来指定数据库存放的位置\",\"启动的方式是进程占用（非守护进程）\",\"默认的服务端口是27017，可以通过--port来手动指定端口\"]},\"3044\":{\"h\":\"3.2 通过配置文件启动服务\",\"t\":[\"将启动的参数写入配置文件，然后通过配置文件启动服务。\",\"在解压目录中新建 config 文件夹，该文件夹中新建配置文件 mongod.conf ，内容参考如下：\",\"storage: dbPath: D:\\\\vender\\\\mongodb-6.0.5\\\\data\\\\db \",\"启动方式\",\"mongod -f ../config/mongod.conf \"]},\"3045\":{\"h\":\"Ⅱ. Linux\"},\"3046\":{\"h\":\"1. 下载压缩包\",\"t\":[\"平台选Linux，打包格式选tgz。 下载安装包，并上传到服务器的 /opt/目录\"]},\"3047\":{\"h\":\"2. 安装\",\"t\":[\"该软件是绿色软件，在Linux上也不用安装，解压即可。\",\"tar -zxvf mongodb-6.0.5.tgz -C /opt/mongodb/ \",\"解压后需要在mongodb目录下新建目录和配置文件\",\"mkdir -p ./single/data/db # 数据存储目录 mkdir -p ./single/log # 日志存储目录 touch ./single/mongod.conf # 配置文件 \"]},\"3048\":{\"h\":\"3. 配置\",\"t\":[\"生产端配置的详细一些，格式为yml 配置文件的内容如下：\",\"systemLog: #MongoDB发送所有日志输出的目标指定为文件 destination: file #mongod或mongos应向其发送所有诊断日志记录信息的日志文件的路径 path: \\\"/opt/mongodb/mongodb-6.0.5/single/log/mongod.log\\\" #当实例重新启动时，会将新条目附加到现有日志文件的末尾。 logAppend: true storage: #mongod实例存储其数据的目录。storage.dbPath设置仅适用于mongod。 dbPath: \\\"/opt/mongodb/mongodb-6.0.5/single/data/db\\\" journal: #启用或禁用持久性日志以确保数据文件保持有效和可恢复。 enabled: true processManagement: #启用在后台运行mongos或mongod进程的守护进程模式。 fork: true net: #服务实例绑定的IP，默认是localhost,配置的是服务器内网IP bindIp: localhost,172.16.0.9 #bindIp绑定的端口，默认是27017 port: 27017 \"]},\"3049\":{\"h\":\"4. 启动服务\",\"t\":[\"/opt/mongodb/bin/mongod -f /opt/mongodb/single/mongod.conf # 启动成功的提示信息 about to fork child process, waiting until server is ready for connections. forked process: 3019275 # 进程编号 child process started successfully, parent exiting # 查看是否启动了 ps -ef |grep mongod \"]},\"3050\":{\"h\":\"5. 关闭服务\",\"t\":[\"关闭服务设计到权限验证，详见：安全认证\",\"#方式一：通过进程编号关闭节点，可能会损害数据 kill -2 54410 #方式二：通过命令关闭，需要先连接MongoDB mongod --port 27017 use admin # 切换到admin库 db.shutdownServer() #关闭服务 \"]},\"3051\":{\"h\":\"Ⅲ. MacOS\",\"t\":[\"注意\",\"暂略，用到时再说\"]},\"3052\":{\"h\":\"1-3. 连接MongoDB\",\"t\":[\"提示\",\"MongoDB shell和Compass都可以连接MongoDB，不过MongoDB Shell已经过时了，现在只需要使用Compass即可。\"]},\"3053\":{\"h\":\"Ⅰ. MongoDB shell\",\"t\":[\"MongoDB Shell 是一个基于javascript的解释器。 他是安装的一个本地shell客户端，可以登录，并执行MongoDB命令。\",\"警告\",\"4.x版本以后，MongoDB不再提供MongoDB Shell了。 想用需要自己手动安装：https://www.mongodb.com/try/download/shell\",\"请选择Compass方式连接MongoDB。\"]},\"3054\":{\"h\":\"Ⅱ. Compass\",\"t\":[\"提示\",\"Compass 是可视化的MongoDB管理工具，但是也支持shell命令，完全可替代MongoDB shell。\"]},\"3055\":{\"h\":\"1. 介绍\",\"t\":[\"mongoDB Compass是mongoDB官方提供的可视化数据管理工具，通过msi包安装MongoDB时可以选择自动安装MongoDB Compass。\",\"如果是手动安装的绿色版（tar包），可以通过官网下载独立安装包。 官方下载地址：https://www.mongodb.com/try/download/compass\"]},\"3056\":{\"h\":\"2. Compass 连接 MongoDB\",\"t\":[\"警告\",\"MongoDB默认是没有用户认证的，通过compass只要输入IP+port就可以直接连接上。 这非常危险，上线时一定要设置安全认证，详见：安全认证章节\",\"默认是没有用户认证的，可以直接连接。\",\"如下：点击new Connection，输入url（ip+port）就可以直接连接上\",\"1-3-1\"]},\"3057\":{\"h\":\"3. 页面介绍\",\"t\":[\"功能很直观，所见即所得。 其中底部>_MONGOSH 就是Compass内置的 shell工具，可以直接输入命令\",\"1-3-2\",\"Connect： 连接与断开MongoDB连接相关\",\"Databases：数据库列表 \",\"Create database：创建数据库\",\"Refresh：刷新数据库\",\"Performance：数据库监控\",\">_MONGOSH：MongoDB Shell\"]},\"3058\":{\"h\":\"1-4. 库与集合\"},\"3059\":{\"h\":\"Ⅰ. 数据库操作\"},\"3060\":{\"h\":\"1. 查看所有数据库\",\"t\":[\"提示\",\"只能查看有权限的数据库，MongoDB会默认创建以下三个数据库：\",\"admin：从权限的角度来看，这是\\\"root\\\"数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。\",\"local：这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合。\",\"conﬁg: 当Mongo用于分片设置时，conﬁg数据库在内部使用，用于保存分片的相关信息。\",\"命令\",\"show dbs show databases \"]},\"3061\":{\"h\":\"2. 选择或创建数据库\",\"t\":[\"数据库存在就是选择，数据库不存在就是创建。\",\"use 数据库名称 \",\"数据库名规范\",\"不能是空字符串（\\\"\\\")。\",\"不得含有' '（空格)、.、$、/、\\\\和\\\\0 (空字符)。\",\"应全部小写\"]},\"3062\":{\"h\":\"3. 查看正在使用的数据库\",\"t\":[\"MongoDB 中默认的数据库为 test，如果你没有选择数据库，集合将存放在 test 数据库中。\",\"db \"]},\"3063\":{\"h\":\"4. 数据库删除\",\"t\":[\"主要用来删除已经持久化的数据库。 语法和JS类似，db对象调用dropDatabase方法删除当前数据库，db指的是当前use的数据库。\",\"db.dropDatabase() \"]},\"3064\":{\"h\":\"5. 数据库的状态\",\"t\":[\"当数据库中没有数据时，数据库默认只存在与内存中，而没有在硬盘中。 使用show dbs查看数据库时，不会显示只存在于内存中的数据库，不过使用db命令可以看到当前使用的仅存在于内存中的数据库。\"]},\"3065\":{\"h\":\"Ⅱ. 集合操作\",\"t\":[\"集合，类似关系型数据库中的表。\"]},\"3066\":{\"h\":\"1. 查看当前库中的集合\",\"t\":[\"show collections 或 show tables \"]},\"3067\":{\"h\":\"2. 创建集合\",\"t\":[\"当向一个集合中插入一个文档的时候，如果集合不存在，则会自动创建集合。 也可以手动创建集合（不推荐）\",\"db.createCollection(name) //示例 db.createCollection('user') \",\"集合的命名规范\",\"集合名不能是空字符串\\\"\\\"。\",\"集合名不能含有\\\\0字符（空字符)，这个字符表示集合名的结尾。\",\"集合名不能以\\\"system.\\\"开头，这是为系统集合保留的前缀。\",\"用户创建的集合名字不能含有保留字符。有些驱动程序的确支持在集合名里面包含，这是因为某些系统生成的集合中包含该字符。除非你要访问这种系统创建的集合，否则千万不要在名字里出现$\"]},\"3068\":{\"h\":\"3. 删除集合\",\"t\":[\"如果成功删除选定集合，这返回true，否则返回false\",\"db.集合名.drop() \"]},\"3069\":{\"h\":\"1-5. 文档增删改\",\"t\":[\"提示\",\"文档（document）的数据结构和 JSON 基本一样。 所有存储在集合中的数据都是 BSON 格式。\"]},\"3070\":{\"h\":\"Ⅰ. 文档的插入\"},\"3071\":{\"h\":\"1. 单个文档插入\",\"t\":[\"使用insertOne() 或 save() 方法向集合中插入文档。 PS：如果指定的集合不存在就会自动创建集合（集合的隐式创建）。\",\"db.集合名.insert( <document or array of documents>, { writeConcern: <document>, ordered: <boolean> } ) \"]},\"3072\":{\"h\":\"1.1 参数\",\"t\":[\"document：要插入到集合中的文档或文档数组。（(json格式）\",\"writeConcern：可选，性能和可靠性的级别。\",\"ordered：可选，如果为true（默认），则按顺序插入数组中的文档，如果其中一个文档出现错误，MongoDB将返回而不处理数组中的其余文档。如果为假，则执行无序插入，如果其中一个文档出现错误，则继续处理数组中的主文档。\"]},\"3073\":{\"h\":\"1.2 示例\",\"t\":[\"db.comment.insertOne({ \\\"articleid\\\":\\\"10000\\\", \\\"content\\\": \\\"that's good\\\", \\\"userid\\\":\\\"1000\\\", \\\"createdatetime\\\": new Date(), \\\"likenum\\\":NumberInt(10), \\\"state\\\":null }) //执行后，返回如下对象 { acknowledged: true, insertedId: ObjectId(\\\"6432843354a1d1820aa07159\\\") } \"]},\"3074\":{\"h\":\"1.3 注意\",\"t\":[\"comment集合如果不存在，则会隐式创建\",\"mongo中的数字，默认情况下是double类型，如果要存整型，必须使用函数NumberInt(整型数字)，否则取出来就有问题了。\",\"插入当前日期使用 new Date()\",\"插入的数据没有指定 _id ，会自动生成主键值\",\"如果某字段没值，可以赋值为null，或不写该字段。\",\"writeConcern和ordered两个参数一般不用管\"]},\"3075\":{\"h\":\"2. 批量插入\",\"t\":[\"db.collection.insertMany( [<document 1>, <document 2>,...], { writeConcern:<document>, ordered:<boolean> } ) \"]},\"3076\":{\"h\":\"2.1 示例\",\"t\":[\"批量插入两条文章评论\",\"db.comment.insertMany([ { \\\"_id\\\":\\\"1\\\", \\\"articleid\\\":\\\"100001\\\", \\\"content\\\":\\\"我们不应该把清晨浪费在手机上\\\", \\\"userid\\\":\\\"1002\\\", \\\"createdatetime\\\":new Date(\\\"2019-08-05T22:08:15.522Z\\\"), \\\"likenum\\\":NumberInt(1000), \\\"state\\\":\\\"1\\\" }, { \\\"_id\\\":\\\"2\\\", \\\"articleid\\\":\\\"100001\\\", \\\"content\\\":\\\"我夏天空腹喝凉开水，冬天喝温开水\\\", \\\"userid\\\":\\\"1005\\\", \\\"createdatetime\\\":new Date(\\\"2019-08-05T23:58:51.485Z\\\"), \\\"likenum\\\":NumberInt(888), \\\"state\\\":\\\"1\\\" } ]) \"]},\"3077\":{\"h\":\"2.2 注意\",\"t\":[\"插入时指定了 _id ，则主键就是该值（实际开发时，一般不指定）。 如果某条数据插入失败，将会终止插入，但已经插入成功的数据不会回滚掉。\"]},\"3078\":{\"h\":\"3. try catch插入\",\"t\":[\"因为批量插入由于数据较多容易出现失败，因此，可以使用try catch进行异常捕捉处理。\",\"try{ db.comment.insertMany([{...},{...}]) //这里是多条插入语句 } catch(e) { print(e) } \"]},\"3079\":{\"h\":\"4. 文档键命名规范\",\"t\":[\"键不能含有\\\\0 (空字符)。这个字符用来表示键的结尾。\",\".和$有特别的意义，只有在特定环境下才能使用。\",\"以下划线\\\"_\\\"开头的键是保留的(不是严格要求的)。\"]},\"3080\":{\"h\":\"Ⅱ. 更新文档\",\"t\":[\"使用update方法更新文档。\",\"db.集合名.update(query, update, options) \",\"query：待更新的文档，可以直接指定_id，也可以使用查询语句\",\"update：要更新的内容\",\"options：更新选项\"]},\"3081\":{\"h\":\"1. options选项\",\"t\":[\"options里有很多选项，控制了更新的细节，一般只需关注前两个。\",\"upsert：[boolean]，可选，true表示没有与查询条件匹配的文档时创建新文档。默认值为false，如果找不到匹配项，则不会插入新文档。\",\"multi：[boolean]，可选，设置为true，则更新符合查询条件的多个文档。如果设置为false，则更新一个文档。默认值为false。\",\"writeConcern：可选。表示写问题的文档。抛出异常的级别。\",\"collation：可选。指定要用于操作的校对规则。校对规则允许用户为字符串比较指定特定于语言的规则，例如字母大小写和重音标记的规则。\"]},\"3082\":{\"h\":\"2. 更新指定字段\",\"t\":[\"警告\",\"MogonDB 6.0.0+ 经过实测，已经不支持覆盖更新了,只能使用$set修改器进行更新\",\"使用$set修改器，更新指定的字段(单个或多个)，\",\"db.comment.updateOne( {_id:\\\"1\\\"}, { $set:{ articleid:\\\"1001\\\", createdatetime:new Date(\\\"2019-08-05T23:58:51.485Z\\\"), likenum: NumberInt(10), state:\\\"2\\\", } } ) \"]},\"3083\":{\"h\":\"3. 批量更新\",\"t\":[\"当query中有多条符合需要的文档记录时，默认只会更新第一条。 若想全部更新，需要使用options中的multi选项\",\"db.comment.updateMany( {userid:\\\"1000\\\"}, { $set:{articleid:\\\"100000\\\"}, }, {multi:true} ) \"]},\"3084\":{\"h\":\"4. 列值增长的修改\",\"t\":[\"如果我们想实现对某列值在原有值的基础上进行增加或减少，可以使用 $inc 运算符来实现。\",\"db.comment.update( {_id:\\\"1\\\"}, {$inc:{likenum:NumberInt(1)}} ) \"]},\"3085\":{\"h\":\"Ⅲ. 删除文档\"},\"3086\":{\"h\":\"1. 移除全部数据\",\"t\":[\"将所有的数据都删除，！！！慎用！！。\",\"db.集合名称.remove({}) db.comment.remove({}) \"]},\"3087\":{\"h\":\"2. 删除指定数据\",\"t\":[\"db.集合名称.remove({条件}) db.comment.remove({_id:\\\"1\\\"}) \"]},\"3088\":{\"h\":\"1-6. 文档查询\"},\"3089\":{\"h\":\"Ⅰ. 基本查询\"},\"3090\":{\"h\":\"1. 语法\",\"t\":[\"db.集合名.find(<query>,[projection]) \",\"参数\",\"query：可选。使用查询运算符指定选择筛选器。若要返回集合中的所有文档，请省略此参数或传递空文档( {} )。\",\"projection：可选，指定要在与查询筛选器匹配的文档中返回的字段（投影）。若要返回匹配文档中的所有字段，请省略此参数。\"]},\"3091\":{\"h\":\"2. 查询所有数据\",\"t\":[\"db.comment.find() or db.comment.find({}) \"]},\"3092\":{\"h\":\"3. 根据条件查询数据\",\"t\":[\"根据query条件查询数据，默认会返回所有符合条件的数据。 如果只需要返回符合条件的第一条数据，我们可以使用ﬁndOne命令来实现。\",\"db.comment.find({userid:'1'}) db.comment.findOne({userid:'1'}) \"]},\"3093\":{\"h\":\"4. 投影查询\",\"t\":[\"如果要查询结果返回部分字段，则需要使用投影查询（不显示所有字段，只显示指定的字段）。 PS： _id字段默认总是显示的。\",\"db.comment.find( {_id:'1'}, {userid:1,state:1} ) \"]},\"3094\":{\"h\":\"Ⅱ. 文档的分页查询\"},\"3095\":{\"h\":\"1. 统计查询\",\"t\":[\"统计查询使用count()方法返回符合条件的全部记录条数。 countDocuments方法 用来返回文档中的记录总数。 语法如下：\",\"db.集合名.countDocuments() db.集合名.count(query,options) \",\"参数\",\"query：查询条件\",\"options：可选，用于修改计数的额外选项\",\"示例\",\"//统计所有记录数 db.comment.countDocument() //按条件统计记录数： db.comment.count({userid:\\\"1\\\"}) \"]},\"3096\":{\"h\":\"2. 分页列表查询\",\"t\":[\"可以使用limit()方法来读取指定数量的数据，使用skip()方法来跳过指定数量的数据(两个方法可以单独使用，也可以一起使用)。\",\"如果你想返回指定条数的记录，可以在ﬁnd方法后调用limit来返回结果(TopN)，默认值20\",\"skip方法同样接受一个数字参数作为跳过的记录条数。（前N个不要）,默认值是0\",\"db.集合名.find().limit(num).skip(num) \",\"示例\",\"//分页查询，每页查两个 db.comment.find().skip(0),limit(2) db.comment.find().skip(2).limit(2) \"]},\"3097\":{\"h\":\"3. 排序查询\",\"t\":[\"sort() 方法对数据进行排序，sort() 方法可以通过参数指定排序的字段，并使用1 和 -1 来指定排序的方式，其中 1 为升序排列，而 -1 是用于降序排列。\",\"排序方式可以是多个字段。\",\"db.集合名.find().sort(排序方式...) \",\"示例 对userid降序排列，并对访问量进行升序排列\",\"db.comment.find().sort({userid:-1,likenum:1}) \",\"注意 skip(), limilt(), sort()三个放在一起执行的时候，执行的顺序是先 sort(), 然后是 skip()，最后是显示的 limit()，和命令编写顺序无关。\"]},\"3098\":{\"h\":\"Ⅲ. 更多复杂查询\"},\"3099\":{\"h\":\"1. 正则条件查询\",\"t\":[\"提示\",\"正则表达式是js的语法\",\"MongoDB的模糊查询是通过正则表达式的方式实现的。格式如下：\",\"db.集合.find({字段:/正则表达式/}) \",\"示例\",\"//查询评论内容包含hello的 db.comment.find({content:/hello/}) //查询用户id是1开头的 db.comment.find({userid:/^1/}) \"]},\"3100\":{\"h\":\"2. 比较查询\",\"t\":[\"查询的时候，可以用上比较运算符，如下：\",\"db.集合名称.find({ \\\"field\\\" : { $gt: value }}) //field > value db.集合名称.find({ \\\"field\\\" : { $lt: value }}) //field < value db.集合名称.find({ \\\"field\\\" : { $gte: value }}) //field >= value db.集合名称.find({ \\\"field\\\" : { $lte: value }}) //field <= value db.集合名称.find({ \\\"field\\\" : { $ne: value }}) //field != value //查询评论点赞数量大于700的记录 db.comment.find({likenum:{$gt:NumberInt(700)}}) \"]},\"3101\":{\"h\":\"3. 包含查询\",\"t\":[\"包含使用$in操作符，不包含使用$nin操作符。\",\"//查询评论的集合中userid字段包含1003或1004的文档 db.comment.find({userid:{$in:[\\\"1003\\\",\\\"1004\\\"]}}) //查询评论集合中userid字段不包含1003和1004的文档 db.comment.find({userid:{$nin:[\\\"1003\\\",\\\"1004\\\"]}}) \"]},\"3102\":{\"h\":\"4. 条件连接查询\",\"t\":[\"我们如果需要查询同时满足两个以上条件，需要使用 $and 操作符将条件进行关联（相 当于SQL的and）。 如果两个以上条件之间是或者的关系，我们使用 $or 操作符进行关联\",\"$and:[{条件},{条件},{条件}] $or:[ { 条件},{条件},{条件} ] //查询评论集合中likenum大于等于700 并且小于2000的文档： b.comment.find( {$and:[ {likenum:{$gte:NumberInt(700)}}, {likenum:{$lt:NumberInt(2000)}} ]} ) //查询评论集合中userid为1003，或者点赞数小于1000的文档记录 db.comment.find({$or:[ {userid:\\\"1003\\\"} ,{likenum:{$lt:1000} }]}) \"]},\"3103\":{\"h\":\"1-7. 索引\",\"t\":[\"索引支持在MongoDB中高效地执行查询。\",\"如果没有索引，MongoDB必须执行全集合扫描，以选择与查询语句匹配的文档。这种扫描全集合的查询效率是非常低的。\",\"索引项的排序支持有效的相等匹配和基于范围的查询操作。此外，MongoDB还可以使用索引中的排序返回排序结果。\",\"MongoDB索引使用B树数据结构（确切的说是B-Tree，MySQL是B+Tree）\"]},\"3104\":{\"h\":\"Ⅰ. 索引的类型\"},\"3105\":{\"h\":\"1. 单字段索引\",\"t\":[\"在文档的单个字段上创建用户定义的升序/降序索引，称为单字段索引（Single Field Index）。\",\"对于单个字段索引和排序操作，索引键的排序顺序（即升序或降序）并不重要，因为MongoDB可以在任何方向上遍历索引。\"]},\"3106\":{\"h\":\"2. 复合索引\",\"t\":[\"MongoDB还支持多个字段的用户定义索引，即复合索引（Compound Index）。\",\"复合索引中列出的字段顺序很重要。例如，如果复合索引由 { userid: 1, score: -1 } 组成，则索引首先按userid正序排序，然后在每个userid的值内，再在按score倒序排序。\"]},\"3107\":{\"h\":\"3. 其他索引\",\"t\":[\"地理空间索引（Geospatial Index）：为了支持对地理空间坐标数据的有效查询，MongoDB提供了两种特殊的索引：返回结果时使用平面几何的二维索引和返回结果时使用球面几何的二维球面索引。\",\"文本索引（Text Indexes）：支持在集合中搜索字符串内容。这些文本索引不存储特定于语言的停止词（例如“the”、“a”、“or”），而将集合中的词作为词干，只存储根词。\",\"哈希索引（Hashed Indexes）：MongoDB提供了散列索引类型，它对字段值的散列进行索引。这些索引在其范围内的值分布更加随机，但只支持相等匹配，不支持基于范围的查询。\"]},\"3108\":{\"h\":\"Ⅱ. 管理索引\"},\"3109\":{\"h\":\"1. 查看索引\",\"t\":[\"getIndexes()方法返回一个集合中的所有索引的数组。\",\"db.集合.getIndexes() \",\"示例\",\"//查看comment集合中所有的索引情况 db.comment.getIndexes() //结果 [ { v: 2, //索引引擎版本，不用管，内置的 key: { _id: 1 //索引的字段，和排序方式 }, name: '_id_' //索引名，默认是索引字段+ _ } ] \",\"_id索引\",\"MongoDB在创建集合的过程中，在_id 字段上创建一个唯一的索引，默认名字为_id_。\",\"注意：该索引是唯一索引，因此值不能重复，即 _id 值不能重复的。在分片集群中，通常使用 _id 作为片键。\"]},\"3110\":{\"h\":\"2. 创建索引\",\"t\":[\"在集合上通过createIndex方法创建索引。\",\"db.集合.createIndex(keys,options) \"]},\"3111\":{\"h\":\"2.1 参数\",\"t\":[\"keys：该参数是一个对象，用来设置索引的字段和索引的排序方式。 \",\"{字段: 排序方式}。\",\"排序方式取值1或-1,1表示正序创建索引，-1表示降序创建索引。\",\"options：可选，包含一组控制索引创建的选项的文档，一般不用设置。 \",\"unique：建立的索引是否唯一，指定为true创建唯一索引。默认值为false.\",\"name：索引的名称，不指定的话就会根据字段名自动生成一个。\"]},\"3112\":{\"h\":\"2.2 创建单字段索引\",\"t\":[\"db.comment.createIndex({userid:1}) //查询刚创建的索引 db.comment.getIndexes() [ { v: 2, key: { _id: 1 }, name: '_id_' }, { v: 2, key: { userid: 1 }, name: 'userid_1' } ] \",\"compass中查看\",\"1-7-1\"]},\"3113\":{\"h\":\"2.3 创建复合索引\",\"t\":[\"对多个字段联合创建一个索引。\",\"db.comment.createIndex( {userid:1, nickname:-1} ) //查看创建的索引 db.comment.getIndexes() [ { v: 2, key: { _id: 1 }, name: '_id_' }, { v: 2, key: { userid: 1 }, name: 'userid_1' }, { v: 2, key: { userid: 1, nickname: -1 }, //复合索引 name: 'userid_1_nickname_-1' } ] \",\"compass中查看\",\"1-7-2\"]},\"3114\":{\"h\":\"2.4 索引默认命名规范\",\"t\":[\"字段名 + _ + 1或-1\",\"联合索引可以是上述规则重复N次，用_相连\",\"1表示正序，-1表示倒叙。\",\"//示例 userid_1 //userid字段的单字段正序索引 userid_1_nickname_-1 \"]},\"3115\":{\"h\":\"3. 移除索引\",\"t\":[\"可以移除指定的索引，或移除所有索引。\"]},\"3116\":{\"h\":\"3.1 移除指定索引\",\"t\":[\"参数index指定要删除的索引，可以是索引名，也可以是索引规范文档。\",\"db.集合名.dropIndex(index) //示例： db.comment.dropIndex({userid:1}) //or db.comment.dropIndex(userid_1) \"]},\"3117\":{\"h\":\"3.2 移除所有索引\",\"t\":[\"移除指定集合内的所有索引。 注意：_id 的字段的索引是无法删除的，只能删除非 _id 字段的索引。\",\"db.集合名.dropIndexes() \"]},\"3118\":{\"h\":\"4. 执行计划\",\"t\":[\"分析查询性能（Analyze Query Performance）通常使用执行计划来查看查询的情况，如查询耗费的时间、是否基于索引查询（建立的索引是否有效）等。 语法：如下在查询语句后面跟explain()方法即可。\",\"db.collection.find(query,options).explain(opeitons) \"]},\"3119\":{\"h\":\"4.1 compass可视化查看\",\"t\":[\"可以通过compass直接可视化的查看执行计划，更直观。\"]},\"3120\":{\"h\":\"4.2 示例\",\"t\":[\"根据uerid查询数据，查看执行计划\",\"db.comment.find({userid:\\\"1002\\\"}).explain() //也可以直接在compass上查看 \"]},\"3121\":{\"h\":\"4.3 查询结果解析\",\"t\":[\"返回的结果很多，重点看stage：\",\"IXCAN：基于索引查询\",\"COLLSCAN：全盘扫描查询\",\"FETCH：基于缓存查询\",\"PROJECTION：覆盖查询\",\"1-7-4\"]},\"3122\":{\"h\":\"5. 涵盖查询\",\"t\":[\"当查询条件和查询的投影仅包含索引字段时，MongoDB直接从索引返回结果，而不扫描任何文档或将文档带入内存。 简单来说，查询的字段只包含索引时，就直接从索引返回结果。\",\"db.comment.find({userid:\\\"1002\\\"},{userid:1,_id:0}) \",\"通过compass查看\",\"1-7-5\"]},\"3123\":{\"h\":\"2-1. 介绍\"},\"3124\":{\"h\":\"Ⅰ. 副本集\"},\"3125\":{\"h\":\"1. 概述\",\"t\":[\"MongoDB中的副本集（Replica Set）是一组维护相同数据集的mongod服务。 副本集可提供冗余和高 可用性，是所有生产部署的基础。\",\"可以说，副本集类似于有自动故障恢复功能的主从集群。通俗的讲就是用多台机器进行同一数据的异 步同步，从而使多台机器拥有同一数据的多个副本，并且当主库当掉时在不需要用户干预的情况下自动 切换其他备份服务器做主库。而且还可以利用副本服务器做只读服务器，实现读写分离，提高负载。\"]},\"3126\":{\"h\":\"2. 冗余和数据可用性\",\"t\":[\"复制提供冗余并提高数据可用性。 通过在不同数据库服务器上提供多个数据副本，复制可提供一定级别的容错功能，以防止丢失单个数据库服务器。\",\"在某些情况下，复制可以提供增加的读取性能，因为客户端可以将读取操作发送到不同的服务上， 在不 同数据中心维护数据副本可以增加分布式应用程序的数据位置和可用性。 还可以为专用目的维护其他 副本，例如灾难恢复，报告或备份。\"]},\"3127\":{\"h\":\"3. MongoDB中的复制\",\"t\":[\"副本集是一组维护相同数据集的mongod实例。 副本集包含多个数据承载节点和可选的一个仲裁节点。 在承载数据的节点中，一个且仅一个成员被视为主节点，而其他节点被视为次要（从）节点。\",\"主节点接收所有写操作。 副本集只能有一个主要能够确认具有{w：“most”}写入关注的写入; 虽然在某 些情况下，另一个mongod实例可能暂时认为自己也是主要的。主要记录其操作日志中的数据集的所有 更改，即oplog。\",\"2-1-1\"]},\"3128\":{\"h\":\"4. 主从复制和副本集区别\",\"t\":[\"主从集群和副本集最大的区别就是副本集没有固定的“主节点”；整个集群会选出一个“主节点”，当其挂 掉后，又在剩下的从节点中选中其他节点为“主节点”，副本集总有一个活跃点(主、primary)和一个或多个备份节点(从、secondary)。\"]},\"3129\":{\"h\":\"5. 副本集的类型和角色\",\"t\":[\"副本集有两种类型三种角色\"]},\"3130\":{\"h\":\"5.1 两种类型\",\"t\":[\"主节点（Primary）类型：数据操作的主要连接点，可读写。\",\"次要（辅助、从）节点（Secondaries）类型：数据冗余备份节点，可以读或选举。\"]},\"3131\":{\"h\":\"5.2 三种角色\",\"t\":[\"主要成员（Primary）：主要接收所有写操作。就是主节点。\",\"副本成员（Replicate）：从主节点通过复制操作以维护相同的数据集，即备份数据，不可写操作，但可以读操作（但需要配置）。是默认的一种从节点类型。\",\"仲裁者（Arbiter）：不保留任何数据的副本，只具有投票选举作用。当然也可以将仲裁服务器维护为副本集的一部分，即副本成员同时也可以是仲裁者。也是一种从节点类型。\",\"2-1-2\"]},\"3132\":{\"h\":\"5.3 仲裁者额外说明\",\"t\":[\"可以将额外的mongod实例添加到副本集作为仲裁者。 仲裁者不维护数据集，仲裁者的目的是通过 响应其他副本集成员的心跳和选举请求来维护副本集中的仲裁。 因为它们不存储数据集，所以仲裁器可 以是提供副本集仲裁功能的好方法，其资源成本比具有数据集的全功能副本集成员更便宜。\",\"如果副本集具有偶数个成员，添加仲裁者以获得主要选举中的“大多数”投票。 \",\"如果你的副本+主节点的个数是奇数，可以不加仲裁者。\",\"仲裁者不需要专用硬件。\",\"仲裁者将永远是仲裁者，而主要人员可能会退出并成为次要人员，而次要人员可能成为选举期间的主要人员。\"]},\"3133\":{\"h\":\"6. 副本集架构示例\",\"t\":[\"最小的副本集架构：一主一副本一仲裁\",\"2-1-3\"]},\"3134\":{\"h\":\"Ⅱ. 分片集群\",\"t\":[\"提示\",\"TBD\"]},\"3135\":{\"h\":\"2-2. 创建副本集\",\"t\":[\"最小副本集架构\",\"一主一副本一仲裁\"]},\"3136\":{\"h\":\"Ⅰ. 副本集设计\"},\"3137\":{\"h\":\"1. 架构\",\"t\":[\"根据最小副本集架构搭建副本集，以下操作示例将在同一台设备上进行，以端口（配置文件）作为区分，实际开发应该在多台服务器上进行。\",\"PS：是安装一次MongoDB，多次启动，每次端口不同。\"]},\"3138\":{\"h\":\"2. 端口设计\",\"t\":[\"27017：主节点（Primary）\",\"27018：副节点（Secondary）\",\"27019：选举节点（Arbiter）\"]},\"3139\":{\"h\":\"3. 目录设计\",\"t\":[\"软件安装目录：/opt/mongodb/mongodb-6.0.5/\",\"文件目录：/opt/mongodb/sets/ \",\"m27017/：主节点目录\",\"m27018/：副节点目录\",\"m27019/：选举节点目录\"]},\"3140\":{\"h\":\"4. 文件设计\",\"t\":[\"每个节点目录下都有以下文件：\",\"log/：日志目录\",\"data/db/：数据目录\",\"mongod.conf：配置文件，\"]},\"3141\":{\"h\":\"Ⅱ. 创建节点\"},\"3142\":{\"h\":\"1. 创建主节点\",\"t\":[\"根据上述设计，创建主节点的目录和相关文件，其中配置文件如下：\",\"#和单机MongoDB差不多，就是多了个replSetName（副本集配置）。 systemLog: #MongoDB发送所有日志输出的目标指定为文件 destination: file #mongod或mongos应向其发送所有诊断日志记录信息的日志文件的路径 path: \\\"/opt/mongodb/sets/m27017/log/mongod.log\\\" #当mongos或mongod实例重新启动时，mongos或mongod会将新条目附加到现有日志文件的末尾。 logAppend: true storage: #mongod实例存储其数据的目录。storage.dbPath设置仅适用于mongod。 dbPath: \\\"/opt/mongodb/sets/m27017/data/db\\\" journal: #启用或禁用持久性日志以确保数据文件保持有效和可恢复。 enabled: true processManagement: #启用在后台运行mongos或mongod进程的守护进程模式。 fork: true #指定用于保存mongos或mongod进程的进程ID的文件位置，其中mongos或mongod将写入其PID pidFilePath: \\\"/opt/mongodb/sets/m27017/log/mongod.pid\\\" net: #服务实例绑定所有IP，有副作用，副本集初始化的时候，节点名字会自动设置为本地域名，而不是ip #bindIpAll: true #服务实例绑定的IP bindIp: localhost,172.16.0.9 #bindIp绑定的端口 port: 27017 replication: #副本集的名称 replSetName: myrs \",\"启动节点\",\"[bin] ./mongod -f /opt/mongodb/sets/m27017/mongod.conf # about to fork child process, waiting until server is ready for connections. # forked process: 3062446 # child process started successfully, parent exiting \"]},\"3143\":{\"h\":\"2. 创建副本节点\",\"t\":[\"同上创建对应的目录和文件，副节点的配置文件和主节点配置文件相比只有一些目录和端口的配置不同。副本节点和主节点拥有相同的副本集名称以组成副本集。\",\"path: \\\"/opt/mongodb/sets/m27018/log/mongod.log\\\" dbPath: \\\"/opt/mongodb/sets/m27018/data/db\\\" pidFilePath: \\\"/opt/mongodb/sets/m27018/log/mongod.pid\\\" port: 27018 \",\"启动副本节点\",\"[bin] ./mongod -f /opt/mongodb/sets/m27018/mongod.conf \"]},\"3144\":{\"h\":\"3. 创建仲裁节点\",\"t\":[\"同上创建对应的目录和文件，仲裁节点的配置文件和主节点配置文件相比只有一些目录和端口的配置不同。仲裁节点和主节点拥有相同的副本集名称以组成副本集。\",\"path: \\\"/opt/mongodb/sets/m27019/log/mongod.log\\\" dbPath: \\\"/opt/mongodb/sets/m27019/data/db\\\" pidFilePath: \\\"/opt/mongodb/sets/m27019/log/mongod.pid\\\" port: 27019 \",\"启动仲裁节点\",\"[bin] ./mongod -f /opt/mongodb/sets/m27019/mongod.conf \"]},\"3145\":{\"h\":\"4. 查看启动结果\",\"t\":[\"看下三个mongodb服务是否启动成功\",\"ps -ef | grep mongod \",\"2-2-1\"]},\"3146\":{\"h\":\"Ⅲ. 初始化副本集\",\"t\":[\"注意\",\"连接上任意一个节点后，很多命令无法使用，比如show dbs等，操作前必须初始化副本集才行。\"]},\"3147\":{\"h\":\"1. 连接节点\",\"t\":[\"使用Compass连接主节点，注意，由于副本集未初始化，直接连接副本集将失败， 需要勾选如下设置，以直接连接的方式连接副本集主节点：\",\"2-2-2\"]},\"3148\":{\"h\":\"2. 连接后查看\",\"t\":[\"如下：视图中无法显示数据库列表，输入查看数据库的指令，也无法执行。\",\"2-2-3\"]},\"3149\":{\"h\":\"3. 初始化副本集\",\"t\":[\"rs.initiate(configuration) \",\"选项一般为空即可，选项是一些与副本集设置有关的信息。\"]},\"3150\":{\"h\":\"4. 副本集初始化结果\",\"t\":[\"rs.initiate() { info2: 'no configuration specified. Using a default configuration for the set', me: '172.16.0.9:27017', ok: 1 } myrs [direct: secondary] test> \",\"解析\",\"ok值为1，表示副本集创建成功\",\"命令行提示符发生变化，变成了一个从节点角色。 \",\"此时默认不能读写。稍等片刻，回车，变成主节点。\",\"此时已经可以读到数据库了。\"]},\"3151\":{\"h\":\"Ⅳ. 查看副本集\",\"t\":[\"主节点\",\"副本集初始化后，也同时配置好了主节点，查看副本集信息时，可以查看到主节点的信息。\"]},\"3152\":{\"h\":\"1. 查看副本集的配置内容\",\"t\":[\"提示\",\"副本集配置的查看命令，本质是查询的是 system.replset 的表中的数据\",\"rs.conf(configuration) \",\"conﬁguration：可选，如果没有配置，则使用默认主节点配置。\"]},\"3153\":{\"h\":\"1.1 执行结果\",\"t\":[\"rs.conf() { _id: 'myrs', version: 1, term: 1, members: [ { _id: 0, host: '172.16.0.9:27017', arbiterOnly: false, buildIndexes: true, hidden: false, priority: 1, tags: {}, secondaryDelaySecs: Long(\\\"0\\\"), votes: 1 } ], protocolVersion: Long(\\\"1\\\"), writeConcernMajorityJournalDefault: true, settings: { chainingAllowed: true, heartbeatIntervalMillis: 2000, heartbeatTimeoutSecs: 10, electionTimeoutMillis: 10000, catchUpTimeoutMillis: -1, catchUpTakeoverDelayMillis: 30000, getLastErrorModes: {}, getLastErrorDefaults: { w: 1, wtimeout: 0 }, replicaSetId: ObjectId(\\\"6447e68241b3272f43080f4d\\\") } \"]},\"3154\":{\"h\":\"1.2 结果解析\",\"t\":[\"_id: 'myrs'：副本集的配置数据存储的主键值，默认就是副本集的名字\",\"members ：副本集成员数组， \",\"此时只有一个：\\\"host\\\":\\\"172.16.0.9:27017\\\" ， \",\"该成员不是仲裁节点： \\\"arbiterOnly\\\" : false\",\"优先级（权重值）：\\\"priority\\\" : 1\",\"settings：副本集的参数配置\"]},\"3155\":{\"h\":\"2. 查看副本集状态\",\"t\":[\"rs.status() \",\"返回包含状态信息的文档。\",\"此输出使用从副本集的其他成员发送的心跳包中获得的数据反映副本集的当前状态。\"]},\"3156\":{\"h\":\"2.1 执行结果\",\"t\":[\"{ set: 'myrs', date: 2023-04-25T14:54:27.116Z, myState: 1, term: Long(\\\"1\\\"), syncSourceHost: '', syncSourceId: -1, heartbeatIntervalMillis: Long(\\\"2000\\\"), majorityVoteCount: 1, writeMajorityCount: 1, votingMembersCount: 1, writableVotingMembersCount: 1, optimes: { lastCommittedOpTime: { ts: Timestamp({ t: 1682434466, i: 1 }), t: Long(\\\"1\\\") }, lastCommittedWallTime: 2023-04-25T14:54:26.680Z, readConcernMajorityOpTime: { ts: Timestamp({ t: 1682434466, i: 1 }), t: Long(\\\"1\\\") }, appliedOpTime: { ts: Timestamp({ t: 1682434466, i: 1 }), t: Long(\\\"1\\\") }, durableOpTime: { ts: Timestamp({ t: 1682434466, i: 1 }), t: Long(\\\"1\\\") }, lastAppliedWallTime: 2023-04-25T14:54:26.680Z, lastDurableWallTime: 2023-04-25T14:54:26.680Z }, lastStableRecoveryTimestamp: Timestamp({ t: 1682434446, i: 1 }), electionCandidateMetrics: { lastElectionReason: 'electionTimeout', lastElectionDate: 2023-04-25T14:41:06.438Z, electionTerm: Long(\\\"1\\\"), lastCommittedOpTimeAtElection: { ts: Timestamp({ t: 1682433666, i: 1 }), t: Long(\\\"-1\\\") }, lastSeenOpTimeAtElection: { ts: Timestamp({ t: 1682433666, i: 1 }), t: Long(\\\"-1\\\") }, numVotesNeeded: 1, priorityAtElection: 1, electionTimeoutMillis: Long(\\\"10000\\\"), newTermStartDate: 2023-04-25T14:41:06.593Z, wMajorityWriteAvailabilityDate: 2023-04-25T14:41:06.683Z }, members: [ { _id: 0, name: '172.16.0.9:27017', health: 1, state: 1, stateStr: 'PRIMARY', uptime: 3784, optime: [Object], optimeDate: 2023-04-25T14:54:26.000Z, lastAppliedWallTime: 2023-04-25T14:54:26.680Z, lastDurableWallTime: 2023-04-25T14:54:26.680Z, syncSourceHost: '', syncSourceId: -1, infoMessage: '', electionTime: Timestamp({ t: 1682433666, i: 2 }), electionDate: 2023-04-25T14:41:06.000Z, configVersion: 1, configTerm: 1, self: true, lastHeartbeatMessage: '' } ], ok: 1, '$clusterTime': { clusterTime: Timestamp({ t: 1682434466, i: 1 }), signature: { hash: Binary(Buffer.from(\\\"0000000000000000000000000000000000000000\\\", \\\"hex\\\"), 0), keyId: Long(\\\"0\\\") } }, operationTime: Timestamp({ t: 1682434466, i: 1 }) } \"]},\"3157\":{\"h\":\"2.2 结果解析\",\"t\":[\"set: 'myrs'：副本集的名字\",\"myState: 1：值为1，说明状态正常\",\"members： 副本集成员数组，此时只有一个，就是主节点。 \",\"stateStr: 'PRIMARY'：角色名\",\"health: 1：值为1，表示该节点是健康的。\"]},\"3158\":{\"h\":\"Ⅴ. 添加节点\",\"t\":[\"完成副本集\",\"手动将副本从节点和仲裁从节点添加到副本集，副本集就真正创建成功了。\"]},\"3159\":{\"h\":\"1. 添加副本从节点\",\"t\":[\"rs.add(host, arbiterOnly) \",\"host：要添加到副本集的新成员。 \",\"字符串：指定新成员的主机名和可选的端口号\",\"文档：指定配置文档\",\"arbiterOnly：可选，值为Boolean，若为true，表示要添加的主机为仲裁者 \",\"默认是false\",\"一般不用给这个值，添加仲裁节点可以用别的方法\",\"将从节点添加道副本集\",\"myrs [direct: primary]test> rs.add(\\\"172.16.0.9:27018\\\") { ok: 1, '$clusterTime': { clusterTime: Timestamp({ t: 1682435169, i: 1 }), signature: { hash: Binary(Buffer.from(\\\"0000000000000000000000000000000000000000\\\", \\\"hex\\\"), 0), keyId: Long(\\\"0\\\") } }, operationTime: Timestamp({ t: 1682435169, i: 1 }) } \",\"结果说明ok: 1：值为1，表示添加成功。\",\"此时执行 rs.status() 查看副本集状态，可以发现members里存在了两个节点，刚加入的节点信息如下：\",\"{ _id: 1, # 节点id name: '172.16.0.9:27018', # 节点ip:port health: 1, # 是否健康 state: 2, stateStr: 'SECONDARY', # 角色名，SECONDARY表示副节点 uptime: 195, optime: [Object], optimeDurable: [Object], optimeDate: 2023-04-25T15:09:16.000Z, optimeDurableDate: 2023-04-25T15:09:16.000Z, lastAppliedWallTime: 2023-04-25T15:09:16.699Z, lastDurableWallTime: 2023-04-25T15:09:16.699Z, lastHeartbeat: 2023-04-25T15:09:23.805Z, lastHeartbeatRecv: 2023-04-25T15:09:24.306Z, pingMs: Long(\\\"0\\\"), lastHeartbeatMessage: '', syncSourceHost: '172.16.0.9:27017', syncSourceId: 0, infoMessage: '', configVersion: 3, configTerm: 1 } \"]},\"3160\":{\"h\":\"2. 添加仲裁从节点\",\"t\":[\"rs.addArb(host) \",\"将仲裁节点添加到副本集\",\"rs.addArb(\\\"159.75.225.162:27019\\\") { ok: 1, '$clusterTime': { clusterTime: Timestamp({ t: 1682436386, i: 1 }), signature: { hash: Binary(Buffer.from(\\\"000000000000000000000000000000\\\", \\\"hex\\\"), 0), keyId: Long(\\\"0\\\") } }, operationTime: Timestamp({ t: 1682436386, i: 1 }) } \",\"查看副本集状态\",\"此时，members里多了一个对象，就是刚新加入的仲裁节点，内容如下：\",\"{ _id: 2, name: '159.75.225.162:27019', # ip:port health: 1, # 表示健康 state: 7, stateStr: 'ARBITER', # 角色名，ARBITER表示仲裁节点 uptime: 65, lastHeartbeat: 2023-04-25T15:27:30.240Z, lastHeartbeatRecv: 2023-04-25T15:27:30.276Z, pingMs: Long(\\\"0\\\"), lastHeartbeatMessage: '', syncSourceHost: '', syncSourceId: -1, infoMessage: '', configVersion: 4, configTerm: 1 } \"]},\"3161\":{\"h\":\"3. debug\",\"t\":[\"添加节点时，可能会遇到报错：MongoServerError: Reconfig attempted to install a config that would change the implicit default write concern. Use the setDefaultRWConcern command to set a cluster-wide write concern and try the reconfig again.\",\"解决\",\"先执行下面这条命令，然后再添加节点。\",\"db.adminCommand( { \\\"setDefaultRWConcern\\\" : 1, \\\"defaultWriteConcern\\\" : { \\\"w\\\" : 2 } } ) \"]},\"3162\":{\"h\":\"2-3. 操作副本集\"},\"3163\":{\"h\":\"Ⅰ. 连接副本集\"},\"3164\":{\"h\":\"1. 修复host\",\"t\":[\"当时初始化副本集的时候，节点成员的host都是区域网ip，这是无法正常连接的。\",\"rs.conf() //查看member可知，节点的host都是区域网ip \",\"在使用Compass连接副本集时，会连接这些ip，本地ip肯定是不行的，会连接失败，因此需要修复这些host。\"]},\"3165\":{\"h\":\"1.1 修改副本集节点的host\",\"t\":[\"实际上就是改一下 config，修改的代码如下：\",\"config = rs.conf() config.members[0].host=\\\"159.75.225.162:27017\\\" //主节点 config.members[1].host=\\\"159.75.225.162:27018\\\" //从节点 config.members[2].host=\\\"159.75.225.162:27019\\\" //从节点 rs.reconfig(config,{\\\"force\\\":true}) \"]},\"3166\":{\"h\":\"2. 连接副本集\",\"t\":[\"详见：Compass\"]},\"3167\":{\"h\":\"Ⅱ. 数据读写\"},\"3168\":{\"h\":\"1. 主节点读写\",\"t\":[\"登录主节点进行读写操作。\",\"myrs[direct:primary]article> use article # 创建或选择article库 # 'switched to db article' db articel # 显示当前数据库 db.comment.insertOne({ # 插入一条数据 \\\"articleid\\\":\\\"10000\\\", \\\"content\\\": \\\"that's good\\\", \\\"userid\\\":\\\"1000\\\", \\\"createdatetime\\\": new Date(), \\\"likenum\\\":NumberInt(10), \\\"state\\\":null }) { # 插入成功 acknowledged: true, insertedId: ObjectId(\\\"64487fe22c64c9d9921960f8\\\") } \",\"插入数据成功后，在Compass中，确实可以看到数据库创建成功，数据也插入成功。\"]},\"3169\":{\"h\":\"2. 从节点读写\",\"t\":[\"警告\",\"老的教程显示，从节点是没有读写权限的，需要使用slaveOk方法赋予权限。\",\"实测，若以replicaSet的方式登录， 主节点和从节点的默认优先级是相同的，操作的一直都是主节点。\",\"暂略。\"]},\"3170\":{\"h\":\"Ⅲ. 主节点的选举\"},\"3171\":{\"h\":\"1. 选举触发条件\",\"t\":[\"MongoDB在副本集中，会自动进行主节点的选举，触发条件为：\",\"主节点故障\",\"主节点网络不可达（默认心跳信息为10秒）\",\"人工干预（rs.stepDown(600)）\"]},\"3172\":{\"h\":\"2. 投票\",\"t\":[\"每个节点都可以投票。 选举规则是根据票数来决定谁获胜：\",\"票数最高：且获得了“大多数”成员的投票支持的节点获胜，大多数为 N/2 + 1。\",\"票数相同，且都获得了“大多数”成员的投票支持的，数据新的节点获胜\"]},\"3173\":{\"h\":\"3. 优先级\",\"t\":[\"在获得票数的时候，优先级（priority）参数影响重大。\",\"可以通过设置优先级（priority）来设置额外票数。优先级即权重，取值为0-1000，相当于可额外增加0-1000的票数，优先级的值越大，就越可能获得多数成员的投票（votes）数。 指定较高的值可使成员更有资格成为主要成员，默认情况下，优先级的值是1。\"]},\"3174\":{\"h\":\"3.1 查看优先级\",\"t\":[\"rs.conf() //返回的数据中members.priority就是优先级的值 \"]},\"3175\":{\"h\":\"3.2 修改优先级\",\"t\":[\"cfg=rs.conf() //将配置导入变量 cfg.members[0].priority=2 //修改0号成员的优先级 rs.reconfig(cfg) //重新加载配置 \",\"修改优先级后，就会开始重新选举。\"]},\"3176\":{\"h\":\"Ⅳ. 故障测试\",\"t\":[\"相关信息\",\"TBD\"]},\"3177\":{\"h\":\"2-4. 分片集群\",\"t\":[\"提示\",\"TBD\"]},\"3178\":{\"h\":\"3-1. 角色与权限\",\"t\":[\"默认情况\",\"默认情况下，MongoDB实例启动运行时是没有启用用户访问权限控制的。 也就是说，可以随意连接到实例进行各种操作，MongoDB不会对连接客户端进行用户验证，这是非常危险的。\"]},\"3179\":{\"h\":\"1. 安全保障手段\",\"t\":[\"使用新的端口，默认的27017端口如果一旦知道了ip就能连接上，不太安全\",\"设置mongodb的网络环境，最好将mongodb部署到公司服务器内网，这样外网是访问不到的。公 司内部访问使用vpn等。\",\"开启安全认证。认证要同时设置服务器之间的内部认证方式，同时要设置客户端连接到集群的账号 密码认证方式。\"]},\"3180\":{\"h\":\"2. 启动访问控制\",\"t\":[\"为了强制开启用户访问控制(用户验证)，则需要在MongoDB实例启动时使用选项 --auth 或在指定启动 配置文件中添加选项 auth=true。\",\"请选择在配置文件中添加选项，因为启动时加选项毫无意义，别人可以选择不加。\"]},\"3181\":{\"h\":\"3. 概念\"},\"3182\":{\"h\":\"3.1 启动访问控制\",\"t\":[\"MongoDB使用的是基于角色的访问控制(Role-Based Access Control,RBAC)来管理用户对实例的访问。\",\"通过对用户授予一个或多个角色来控制用户访问数据库资源的权限和数据库操作的权限，在对用户分配 角色之前，用户无法访问实例\"]},\"3183\":{\"h\":\"3.2 角色\",\"t\":[\"在MongoDB中通过角色对用户授予相应数据库资源的操作权限，每个角色当中的权限可以显式指定， 也可以通过继承其他角色的权限，或者两都都存在的权限。\"]},\"3184\":{\"h\":\"3.3 权限：\",\"t\":[\"权限由指定的数据库资源(resource)以及允许在指定资源上进行的操作(action)组成。\",\"资源(resource)包括：数据库、集合、部分集合和集群；\",\"操作(action)包括：对资源进行的增、删、改、查(CRUD)操作。\",\"在角色定义时可以包含一个或多个已存在的角色，新创建的角色会继承包含的角色所有的权限。在同一 个数据库中，新创建角色可以继承其他角色的权限，在 admin 数据库中创建的角色可以继承在其它任意数据库中角色的权限。\"]},\"3185\":{\"h\":\"4. 查看角色权限\"},\"3186\":{\"h\":\"4.1 查询所有角色权限（仅用户自定义角色）\",\"t\":[\" db.runCommand({ rolesInfo: 1 }) { roles: [], ok: 1, '$clusterTime': { clusterTime: Timestamp({ t: 1682481367, i: 1 }), signature: { hash: Binary(Buffer.from(\\\"0000000000000000000000000000\\\", \\\"hex\\\"), 0), keyId: Long(\\\"0\\\") } }, operationTime: Timestamp({ t: 1682481367, i: 1 }) } \",\"默认是没有自定义角色的。\"]},\"3187\":{\"h\":\"4.2 查询所有角色权限(包含内置角色)\",\"t\":[\"db.runCommand({ rolesInfo: 1, showBuiltinRoles: true }) { roles: [ { role: 'dbOwner', db: 'test', isBuiltin: true, roles: [], inheritedRoles: [] }, { role: 'readWrite', db: 'test', isBuiltin: true, roles: [], inheritedRoles: [] }, { role: 'userAdmin', db: 'test', isBuiltin: true, roles: [], inheritedRoles: [] }, { role: 'dbAdmin', db: 'test', isBuiltin: true, roles: [], inheritedRoles: [] }, { role: 'read', db: 'test', isBuiltin: true, roles: [], inheritedRoles: [] }, { role: 'enableSharding', db: 'test', isBuiltin: true, roles: [], inheritedRoles: [] } ], ok: 1, '$clusterTime': { clusterTime: Timestamp({ t: 1682481447, i: 1 }), signature: { hash: Binary(Buffer.from(\\\"00000000000000000000000000\\\", \\\"hex\\\"), 0), keyId: Long(\\\"0\\\") } }, operationTime: Timestamp({ t: 1682481447, i: 1 }) } \",\"如上，有6个内置的角色。\"]},\"3188\":{\"h\":\"4.3 查询指定权限\",\"t\":[\"# 查询当前数据库中的某角色的权限 > db.runCommand({ rolesInfo: \\\"<rolename>\\\" }) # 查询其它数据库中指定的角色权限 > db.runCommand({ rolesInfo: { role: \\\"<rolename>\\\", db: \\\"<database>\\\" } } # 查询多个角色权限 > db.runCommand( { rolesInfo: [ \\\"<rolename>\\\", { role: \\\"<rolename>\\\", db: \\\"<database>\\\" }, ... ] } ) \"]},\"3189\":{\"h\":\"5. 常用的内置角色：\",\"t\":[\"数据库用户角色：read、readWrite;\",\"所有数据库用户角色：readAnyDatabase、readWriteAnyDatabase、 userAdminAnyDatabase、dbAdminAnyDatabase\",\"数据库管理角色：dbAdmin、dbOwner、userAdmin；\",\"集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；\",\"备份恢复角色：backup、restore；\",\"超级用户角色：root\",\"内部角色：system\"]},\"3190\":{\"h\":\"6. 角色说明\",\"t\":[\"角色\",\"权限描述\",\"read\",\"可以读取指定数据库中任何数据。\",\"readWrite\",\"可以读写指定数据库中任何数据，包括创建、重命名、删除集合。\",\"readAnyDatabase\",\"可以读取所有数据库中任何数据(除了数据库config和local之外)。\",\"readWriteAnyDatabase\",\"可以读写所有数据库中任何数据(除了数据库config和local之外)。\",\"userAdminAnyDatabase\",\"可以在指定数据库创建和修改用户(除了数据库config和local之外)。\",\"dbAdminAnyDatabase\",\"可以读取任何数据库以及对数据库进行清理、修改、压缩、获取统计信息、执行检查等操作(除了数据库config和local之外)。\",\"dbAdmin\",\"可以读取指定数据库以及对数据库进行清理、修改、压缩、获取统计信息、执行检查等操作。\",\"userAdmin\",\"可以在指定数据库创建和修改用户。\",\"clusterAdmin\",\"可以对整个集群或数据库系统进行管理操作。\",\"backup\",\"备份MongoDB数据最小的权限。\",\"restore\",\"从备份文件中还原恢复MongoDB数据(除了system.profile集合)的权限。\",\"root\",\"超级账号，超级权限\"]},\"3191\":{\"h\":\"3-2. 单实例环境\"},\"3192\":{\"h\":\"Ⅰ. 管理用户\"},\"3193\":{\"h\":\"1. createUser\",\"t\":[\"创建用户需要使用db.createUser方法，该方法有一个对象参数。\",\"admin> db.createUser( { user: \\\"admin\\\", # 用户名 pwd: \\\"123456\\\", # 设置密码 customData:{ # 账户描述信息，可选 \\\"desc\\\":\\\"this user is admin\\\" } roles:[ # 设置角色，赋予权限 { role:\\\"root\\\" # 赋予root角色 # db可选，默认在所有的数据库上都有效 db:\\\"article\\\" # 赋予角色所属的数据库 } ] } ) { ok: 1 } # 表示创建成功 \"]},\"3194\":{\"h\":\"2. 创建用户示例\",\"t\":[\"连接mongodb，use admin数据库，并创建以下三个账户\",\"myroot：系统超级用户，角色为root \",\"如果对安全要求很高，防止超管泄漏，则不要创建root超管用户。\",\"admin：admin库的管理用户，角色为userAdminAnyDatabase\",\"blog：普通用户，仅能操作article数据库\"]},\"3195\":{\"h\":\"2.1 创建myroot\",\"t\":[\"test> use admin admin> db.createUser( {user:'myroot',pwd:'2ck23-5',roles:[{role:'root', db:'admin'}]} ) \"]},\"3196\":{\"h\":\"2.2 创建admin\",\"t\":[\"创建专门用来管理admin库的账号myadmin，只用来作为用户权限的管理。\",\"use admin db.createUser( {user:'admin',pwd:'a123', roles:[{role:'userAdminAnyDatabase', db:'admin'}]} ) \"]},\"3197\":{\"h\":\"2.3 创建普通用户\",\"t\":[\"创建普通用户可以在没有开启认证的时候添加，也可以在开启认证之后添加，但开启认证之后，必须使 用有操作admin库的用户登录认证后才能操作。底层都是将用户信息保存在了admin数据库的集合 system.users中。\",\"如下，创建一个仅能对article库进行读写的用户。\",\"db.createUser( {user:\\\"blog\\\",pwd:\\\"1234\\\",roles:[{role:\\\"readWrite\\\",db:\\\"article\\\"}]} ) \"]},\"3198\":{\"h\":\"3. 查看用户\",\"t\":[\"提示\",\"和其它数据库（MySQL）一样，权限的管理都差不多一样，也是将用户和权限信息保存到数据库对 应的表中。 Mongodb存储所有的用户信息在admin 数据库的集合system.users中，保存用户名、密码 和数据库信息。 PS：这个集合是隐藏的，没法在Compass上直接看到，需要输入查看命令。\",\"admin> show collections system.users # 可以看到有两个隐藏的集合 system.version \",\"输入指令查看所有的用户信息：\",\"admin> db.system.users.find() \",\"查询的结果如下：\",\"// 第一个添加的用户: myroot { _id: 'admin.myroot', // 用户id：admin.用户名 userId: UUID(\\\"a9898c75-ea87-4506-a2cf-30cee1936861\\\"), user: 'myroot', // 用户名 db: 'admin', // 用户所在的数据库 credentials:{ // 加密 key ... }, roles:[ // 角色信息 { role:'root', db: 'admin' //用户管理的数据库 } ] } // 第二个添加的用户: admin { _id: 'admin.admin', userId: UUID(\\\"3b994547-15ef-4cc1-9632-e676dd308382\\\"), user: 'admin', db: 'admin', credentials:{ ... }, roles:[ ... ] // 第三个添加的用户: blog _id: 'admin.blog', userId: UUID(\\\"c8710e95-2218-4032-9ef5-855ed8bca863\\\"), user: 'blog', db: 'admin', credentials:{ ... }, roles:[ { role: 'readWrite', db: 'article' } ] } \"]},\"3199\":{\"h\":\"4. 删除用户\",\"t\":[\"db.dropUser(\\\"用户名\\\") { ok: 1 } // 表示操作成功 \"]},\"3200\":{\"h\":\"5. 修改密码\",\"t\":[\"db.changeUserPassword(\\\"用户名\\\",\\\"新密码\\\") { ok: 1 } // 表示操作成功 \"]},\"3201\":{\"h\":\"6. 认证测试\",\"t\":[\"并非真正的开启用户验证，只是测试下创建的账号。\",\"注意：无论用户管理的数据库是哪个，该用户的信息都是存储在admin数据库的，因此需要在admin数据库下使用auth方法进行验证。\",\"//一定要切到admin数据库，不如怎么验证都是失败 use admin //先使用错误的用户名和密码 admin> db.auth(\\\"person\\\",\\\"23d23\\\") 报错：MongoServerError:Authentication failed. //使用正确的用户名和密码 db.auth(\\\"blog\\\",\\\"1234\\\") {ok: 1} //验证通过 \"]},\"3202\":{\"h\":\"Ⅱ. 开启认证\",\"t\":[\"警告\",\"创建用户后，还要开启登录认证，不然创建的用户毫无意义。\"]},\"3203\":{\"h\":\"1. 修改配置文件\",\"t\":[\"修改mongod.conf配置文件，添加权限验证。\",\"security: #开启授权认证 authorization: enabled \",\"此时再启动服务，就开启了登录认证。\"]},\"3204\":{\"h\":\"2. 通过认证登录\",\"t\":[\"不认证通过Compass直接登录，会报错：\",\"An error occurred while loading instance info: command hostInfo requires authentication\"]},\"3205\":{\"h\":\"2.1 登录时进行验证\",\"t\":[\"需要在登录时就选择进行权限验证：\",\"3-2-1\"]},\"3206\":{\"h\":\"2.2 登录后的权限\",\"t\":[\"用什么账号登录，就有什么账号的权限，如上采用的blog账号，该账号仅能读写article库，因此登录后就只能看到article库，只能操作article库。\",\"3-2-2\"]},\"3207\":{\"h\":\"Ⅲ. 关闭MongoDB\",\"t\":[\"除了暴力kill进程，还可以使用命名关闭MongoDB服务。\",\"use admin db.shutdownServer() \",\"shutdownServer执行的条件\",\"必须是在admin库下执行该关闭服务命令\",\"如果没有开启认证，必须是从localhost登陆的，才能执行关闭服务命令\",\"非localhost的、通过远程登录的，必须有登录且必须登录用户有对admin操作权限才可以\"]},\"3208\":{\"h\":\"3-3. 副本集环境\"},\"3209\":{\"h\":\"1. 认证的内容\",\"t\":[\"对于副本集，有两个地方需要进行权限认证：\",\"authorization：用户认证，和单实例的用户登录认证类似\",\"keyFile：节点成员内部认证，副本集和共享集群的各个节点成员之间使用内部身份验证，一般采用的认证方式是x.509证书。 \",\"原理：集群中每一个实例彼此连接的时候都检验彼此使用的证书的内容是否相同。 只有证书相同的实例彼此才可以访问\"]},\"3210\":{\"h\":\"2. 添加账号\",\"t\":[\"登录主节点，添加一个管理员账号。 只需要在主节点上添加用户，副本集会自动同步。\",\"myrs [direct:primary] test> use admin myrs [direct:primary] admin> db.createUser({ user:\\\"root\\\",pwd:\\\"23cx@fdw\\\",roles:[\\\"root\\\"] }) \"]},\"3211\":{\"h\":\"3. 创建x.509证书\"},\"3212\":{\"h\":\"3.1 通过openssl生成证书\",\"t\":[\"可以使用任何方法生成密钥文件，这里采用openssl生成密码文件。\",\"# 在当前目录生成证书 openssl rand -base64 90 > ./mongo.keyfile # 修改证书权限 chmod 400 mongo.keyfile \"]},\"3213\":{\"h\":\"3.2 复制证书\",\"t\":[\"赋值该证书到所有节点所在的设备，保证所有的副本集节点都使用同一份证书。\",\"当前是在一台设备上模拟的副本集，因此拷贝到各自的目录即可：\",\"cp mongo.keyfile /opt/mongodb/sets/m27017/ cp mongo.keyfile /opt/mongodb/sets/m27018/ cp mongo.keyfile /opt/mongodb/sets/m27019/ \"]},\"3214\":{\"h\":\"4. 修改配置文件\",\"t\":[\"修改配置文件，添加开启authorization和keyFile鉴权的配置。\",\"security: #KeyFile鉴权文件 keyFile: /opt/mongodb/sets/m27017/mongo.keyfile #开启认证方式运行 authorization: enabled \",\"每个节点都要修改，注意证书路径。\"]},\"3215\":{\"h\":\"5. 连接副本集\",\"t\":[\"重启所有节点，并通过用户认证连接副本集。\"]},\"3216\":{\"h\":\"3-4. 分片集群环境\",\"t\":[\"提示\",\"TBD\"]},\"3217\":{\"h\":\"4-1. Compass\",\"t\":[\"提示\",\"关于Compass的介绍见：连接MongoDB\"]},\"3218\":{\"h\":\"Ⅰ. 连接方式\",\"t\":[\"共有两种连接方式：direct和replicaSet。\"]},\"3219\":{\"h\":\"1. direct\",\"t\":[\"直接连接mongodb服务，如果连接的对方是副本集，那么忽略他是副本集，直接连接。\"]},\"3220\":{\"h\":\"2. replicaSet\",\"t\":[\"以副本集的形式连接，连接的是整个副本集。\"]},\"3221\":{\"h\":\"3. 权限认证\",\"t\":[\"一般采用账户名密码的形式进行权限认证，在连接的时候，切换到Authentication选项卡，输入账户名密码即可。\",\"4-1-1\"]},\"3222\":{\"h\":\"Ⅱ. 连接单实例\",\"t\":[\"连接单实例，默认采用的就direct连接方式，非常简单。\",\"Comment info为：\",\"mongodb://blog:1234@159.75.225.162:27017/?authMechanism=DEFAULT \",\"4-1-2\"]},\"3223\":{\"h\":\"Ⅲ. 连接副本集\",\"t\":[\"注意\",\"需要先搭建好副本集，并且进行启动，除了主节点，连接其他节点需要进行初始化。\"]},\"3224\":{\"h\":\"1. 初始化前的连接\",\"t\":[\"在副本集初始化之前，是不能以副本集的形式连接的，只能以direct的形式连接副本集的主节点，并进行初始化。\",\"Comment info为：\",\"mongodb://159.75.225.162:27017/?directConnection=true \",\"如下：连接时需要勾选Direct Connection\",\"4-1-3\"]},\"3225\":{\"h\":\"2. 直连副本集\",\"t\":[\"前置条件\",\"连接前，需要对副本集进行初始化，添加好节点，保证host无误，方能进行连接。 也要提前配置好权限认证，并启动所有节点。\",\"直接连接副本集，就是以replicaSet的方式连接mongodb。\",\" 如上，需要添加多个host。\",\"Comment info为：\",\"mongodb://root:23cx%40fdw @159.75.225.162:27017,159.75.225.162:27018,159.75.225.162:27019 /?authMechanism=DEFAULT \"]},\"3226\":{\"h\":\"3. 只连接一个节点\",\"t\":[\"也可以以replicaSet的方式只连接一个节点。\",\"注意\",\"暂时意义不明\"]},\"3227\":{\"h\":\"Ⅳ. 连接分片集群\",\"t\":[\"相关信息\",\"TBD\"]},\"3228\":{\"h\":\"4-2. Java操作\",\"t\":[\"转移\",\"直接上手SpringBoot集成MongoDB。 Java单独操作MongoDB，暂时省略了。\"]},\"3229\":{\"h\":\"1. Maven\",\"t\":[\"使用MongoDB需要先导入驱动。 MongoDB默认是被SpringBoot管理的，使用SpringBoot可以不写版本号。\",\"<dependency> <groupId>org.mongodb</groupId> <artifactId>mongodb-driver-sync</artifactId> <version>4.9.1</version> </dependency> \",\"子依赖\\n该依赖会自动添加子依赖：bson和mongodb-driver-core\"]},\"3230\":{\"h\":\"4-3. SpringBoot集成\"},\"3231\":{\"h\":\"引入\"},\"3232\":{\"h\":\"1. Spring Data\",\"t\":[\"Spring的一个子项目，用于简化数据库访问，支持NoSQL和关系数据存储。其主要目标是使用数据库的访问变得方便快捷。\",\"Spring Data 致力于减少数据访问层 (DAO) 的开发量. 开发者唯一要做的，就只是声明持久层的接口，其他都交给 Spring Data JPA 来帮你完成！\"]},\"3233\":{\"h\":\"2. Spring Data MongoDB\",\"t\":[\"Spring Data MongDB 是Spring Data的下的一个模块，在SpringBoot中整合MongoDB就需要添加Spring Data MongDB的依赖。\"]},\"3234\":{\"h\":\"3. Maven\",\"t\":[\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-mongodb</artifactId> </dependency> \"]},\"3235\":{\"h\":\"yml配置\"},\"3236\":{\"h\":\"1. 通过host和port连接\",\"t\":[\"在application.yml文件中添加MongoDB的连接参数。\",\"spring: data: mongodb: host: 159.75.225.162 port: 27017 authentication-database: admin username: blog password: 1234 database: article \"]},\"3237\":{\"h\":\"2. 通过uri连接\",\"t\":[\"可以直接通过URI进行连接，对于副本集只能通过URI进行连接。\",\"spring: data: mongodb: uri: mongodb://root:23cx%40fdw@159.75.225.162:27017,159.75.225.162:27018,159.75.225.162:27019/ authentication-database: admin username: blog password: 1234 database: article \"]},\"3238\":{\"h\":\"操作方式\",\"t\":[\"提示\",\"TBD\"]},\"3239\":{\"h\":\"CURD\",\"t\":[\"提示\",\"TBD\"]},\"3240\":{\"h\":\"4-4. 使用示例\",\"t\":[\"提示\",\"TBD\"]},\"3241\":{\"h\":\"4-5. Debug\"},\"3242\":{\"h\":\"1. 数据损坏的修复\",\"t\":[\"注意\",\"如果采用了kill而非标准方式关闭了mongoDB服务，可能会产生数据损坏。\",\"删除lock文件： */data/db/*.lock\",\"修复数据：./mongod --repair --depath= */data/db\"]},\"3243\":{\"h\":\"2. 服务启动失败\",\"t\":[\"注意\",\"ERROR: child process failed, exited with error number 1 To see additional infor\",\"原因：配置文件中的一些路径出现问题\"]},\"3244\":{\"h\":\"Blocks\"},\"3245\":{\"h\":\"Cloud\"},\"3246\":{\"h\":\"Dev\"},\"3247\":{\"h\":\"Frame\"},\"3248\":{\"h\":\"Java\"},\"3249\":{\"h\":\"Other\"},\"3250\":{\"h\":\"Plugin\"},\"3251\":{\"h\":\"Service\"},\"3252\":{\"h\":\"Sql\"},\"3253\":{\"h\":\"1.入门\"},\"3254\":{\"h\":\"2.实用功能\"},\"3255\":{\"h\":\"3.基本运维\"},\"3256\":{\"h\":\"4.集成数据层\"},\"3257\":{\"h\":\"X.dev\"},\"3258\":{\"h\":\"1.瑞吉外卖\"},\"3259\":{\"h\":\"1.基础\"},\"3260\":{\"h\":\"3.异常处理\"},\"3261\":{\"h\":\"4.枚举与注解\"},\"3262\":{\"h\":\"5.多线程\"},\"3263\":{\"h\":\"6.集合\"},\"3264\":{\"h\":\"7.泛型\"},\"3265\":{\"h\":\"9.网络编程\"},\"3266\":{\"h\":\"3. Servlet\"},\"3267\":{\"h\":\"4. Filter Listener\"},\"3268\":{\"h\":\"5. Java前端\"},\"3269\":{\"h\":\"6.扩展内容\"},\"3270\":{\"h\":\"1.基本操作\"},\"3271\":{\"h\":\"2.集群\"},\"3272\":{\"h\":\"3.安全认证\"},\"3273\":{\"h\":\"4.dev\"}},\"dirtCount\":0,\"index\":[[\"入门\",{\"0\":{\"3253\":1}}],[\"入口\",{\"0\":{\"797\":1}}],[\"致力于减少数据访问层\",{\"1\":{\"3232\":1}}],[\"认证的内容\",{\"0\":{\"3209\":1}}],[\"认证测试\",{\"0\":{\"3201\":1}}],[\"认证要同时设置服务器之间的内部认证方式\",{\"1\":{\"3179\":1}}],[\"账户描述信息\",{\"1\":{\"3193\":1}}],[\"压缩\",{\"1\":{\"3190\":2}}],[\"压缩解压缩\",{\"1\":{\"1952\":1}}],[\"备份mongodb数据最小的权限\",{\"1\":{\"3190\":1}}],[\"备份恢复角色\",{\"1\":{\"3189\":1}}],[\"备注\",{\"0\":{\"1473\":1},\"1\":{\"384\":1,\"803\":1,\"2106\":1}}],[\"司内部访问使用vpn等\",{\"1\":{\"3179\":1}}],[\"票数相同\",{\"1\":{\"3172\":1}}],[\"票数最高\",{\"1\":{\"3172\":1}}],[\"人工干预\",{\"1\":{\"3171\":1}}],[\"触发条件为\",{\"1\":{\"3171\":1}}],[\"触发了事件\",{\"1\":{\"2709\":1}}],[\"老的教程显示\",{\"1\":{\"3169\":1}}],[\"老写法\",{\"1\":{\"2121\":1,\"2123\":1,\"2129\":1}}],[\"刚加入的节点信息如下\",{\"1\":{\"3159\":1}}],[\"刚好是compareto方法的调用者\",{\"1\":{\"2165\":1}}],[\"权重值\",{\"1\":{\"3154\":1}}],[\"权限认证\",{\"0\":{\"3221\":1}}],[\"权限的管理都差不多一样\",{\"1\":{\"3198\":1}}],[\"权限描述\",{\"1\":{\"3190\":1}}],[\"权限由指定的数据库资源\",{\"1\":{\"3184\":1}}],[\"权限\",{\"0\":{\"3184\":1}}],[\"权限控制\",{\"1\":{\"1288\":1}}],[\"权限问题\",{\"0\":{\"1117\":1}}],[\"权限跟类一样\",{\"1\":{\"1072\":1}}],[\"权限范围介绍\",{\"0\":{\"1063\":1}}],[\"权限修饰符\",{\"0\":{\"1060\":1},\"1\":{\"1022\":1,\"1029\":2,\"1377\":1,\"2045\":2,\"2048\":2}}],[\"权限管理\",{\"1\":{\"399\":1}}],[\"稍等片刻\",{\"1\":{\"3150\":1}}],[\"仲裁节点和主节点拥有相同的副本集名称以组成副本集\",{\"1\":{\"3144\":1}}],[\"仲裁节点的配置文件和主节点配置文件相比只有一些目录和端口的配置不同\",{\"1\":{\"3144\":1}}],[\"仲裁者将永远是仲裁者\",{\"1\":{\"3132\":1}}],[\"仲裁者不需要专用硬件\",{\"1\":{\"3132\":1}}],[\"仲裁者不维护数据集\",{\"1\":{\"3132\":1}}],[\"仲裁者的目的是通过\",{\"1\":{\"3132\":1}}],[\"仲裁者额外说明\",{\"0\":{\"3132\":1}}],[\"仲裁者\",{\"1\":{\"3131\":1}}],[\"副节点的配置文件和主节点配置文件相比只有一些目录和端口的配置不同\",{\"1\":{\"3143\":1}}],[\"副节点目录\",{\"1\":{\"3139\":1}}],[\"副节点\",{\"1\":{\"3138\":1}}],[\"副本节点和主节点拥有相同的副本集名称以组成副本集\",{\"1\":{\"3143\":1}}],[\"副本成员\",{\"1\":{\"3131\":1}}],[\"副本\",{\"1\":{\"3126\":1}}],[\"副本集会自动同步\",{\"1\":{\"3210\":1}}],[\"副本集和共享集群的各个节点成员之间使用内部身份验证\",{\"1\":{\"3209\":1}}],[\"副本集环境\",{\"0\":{\"3208\":1}}],[\"副本集就真正创建成功了\",{\"1\":{\"3158\":1}}],[\"副本集成员数组\",{\"1\":{\"3154\":1,\"3157\":1}}],[\"副本集初始化后\",{\"1\":{\"3151\":1}}],[\"副本集初始化结果\",{\"0\":{\"3150\":1}}],[\"副本集初始化的时候\",{\"1\":{\"3142\":1}}],[\"副本集的名字\",{\"1\":{\"3157\":1}}],[\"副本集的名称\",{\"1\":{\"3142\":1}}],[\"副本集的参数配置\",{\"1\":{\"3154\":1}}],[\"副本集的配置数据存储的主键值\",{\"1\":{\"3154\":1}}],[\"副本集的类型和角色\",{\"0\":{\"3129\":1}}],[\"副本集配置的查看命令\",{\"1\":{\"3152\":1}}],[\"副本集配置\",{\"1\":{\"3142\":1}}],[\"副本集设计\",{\"0\":{\"3136\":1}}],[\"副本集架构示例\",{\"0\":{\"3133\":1}}],[\"副本集有两种类型三种角色\",{\"1\":{\"3129\":1}}],[\"副本集总有一个活跃点\",{\"1\":{\"3128\":1}}],[\"副本集只能有一个主要能够确认具有\",{\"1\":{\"3127\":1}}],[\"副本集包含多个数据承载节点和可选的一个仲裁节点\",{\"1\":{\"3127\":1}}],[\"副本集是一组维护相同数据集的mongod实例\",{\"1\":{\"3127\":1}}],[\"副本集类似于有自动故障恢复功能的主从集群\",{\"1\":{\"3125\":1}}],[\"副本集可提供冗余和高\",{\"1\":{\"3125\":1}}],[\"副本集\",{\"0\":{\"3124\":1}}],[\"副本数量\",{\"1\":{\"2893\":1}}],[\"投票\",{\"0\":{\"3172\":1},\"1\":{\"3132\":1}}],[\"投影查询\",{\"0\":{\"3093\":1}}],[\"投影\",{\"1\":{\"3090\":1}}],[\"辅助\",{\"1\":{\"3130\":1}}],[\"辅助功能\",{\"0\":{\"107\":1}}],[\"次要\",{\"1\":{\"3130\":1}}],[\"掉后\",{\"1\":{\"3128\":1}}],[\"掉用被代理类的conncetdb方法\",{\"1\":{\"2075\":1}}],[\"掉用非静态方法\",{\"1\":{\"1278\":1}}],[\"些情况下\",{\"1\":{\"3127\":1}}],[\"冗余和数据可用性\",{\"0\":{\"3126\":1}}],[\"冗余字段\",{\"1\":{\"379\":2}}],[\"步同步\",{\"1\":{\"3125\":1}}],[\"步骤\",{\"0\":{\"2639\":1},\"1\":{\"1420\":1}}],[\"步骤三\",{\"1\":{\"1252\":1}}],[\"步骤二\",{\"1\":{\"1252\":1}}],[\"步骤一\",{\"1\":{\"1252\":1}}],[\"步骤同idea\",{\"1\":{\"81\":1}}],[\"涵盖查询\",{\"0\":{\"3122\":1}}],[\"慎用\",{\"1\":{\"3086\":1}}],[\"慎用this充当同步监视器\",{\"1\":{\"1511\":1}}],[\"校对规则允许用户为字符串比较指定特定于语言的规则\",{\"1\":{\"3081\":1}}],[\"平台选linux\",{\"1\":{\"3046\":1}}],[\"平均的\",{\"0\":{\"2443\":1}}],[\"平均响应时长\",{\"1\":{\"241\":1}}],[\"举例\",{\"1\":{\"3034\":1}}],[\"嵌入文档\",{\"1\":{\"3031\":1}}],[\"嵌套集合\",{\"1\":{\"2219\":1,\"2223\":1}}],[\"嵌套的泛型成为了数据类型\",{\"1\":{\"1710\":1}}],[\"嵌套锁\",{\"0\":{\"1547\":1}}],[\"嵌套循环\",{\"0\":{\"951\":1}}],[\"嵌套循环中的使用\",{\"0\":{\"946\":1},\"1\":{\"947\":1}}],[\"嵌套\",{\"1\":{\"923\":1}}],[\"ﬁeld\",{\"1\":{\"3031\":1,\"3032\":1}}],[\"术语对比\",{\"1\":{\"3031\":1}}],[\"云服务一般采用以mongodb为核心的数据库架构\",{\"1\":{\"3029\":1}}],[\"云服务兴起\",{\"1\":{\"3029\":1}}],[\"物联网场景\",{\"1\":{\"3027\":1}}],[\"物流场景\",{\"1\":{\"3027\":1}}],[\"物理连接初始化的时候执行的sql\",{\"1\":{\"2426\":1}}],[\"地理空间索引\",{\"1\":{\"3107\":1}}],[\"地点等功能\",{\"1\":{\"3027\":1}}],[\"地址请求\",{\"1\":{\"2910\":1}}],[\"地址栏发生变化\",{\"1\":{\"2665\":1}}],[\"地址和发送方机器上的端口号\",{\"1\":{\"1985\":1}}],[\"地址和远程主机的端口号\",{\"1\":{\"1985\":1}}],[\"地址由内核选择\",{\"1\":{\"1985\":1}}],[\"地址由内核来选择\",{\"1\":{\"1985\":1}}],[\"地址为\",{\"1\":{\"1985\":1}}],[\"地址或端口号构造\",{\"1\":{\"1969\":1}}],[\"地址的指定端口号\",{\"1\":{\"1964\":1}}],[\"地址的组合得出一个网络套接字\",{\"1\":{\"1939\":1}}],[\"地址不同\",{\"1\":{\"1178\":2}}],[\"地址值\",{\"1\":{\"993\":1,\"1304\":1}}],[\"地址示例\",{\"1\":{\"781\":1}}],[\"地址id\",{\"1\":{\"384\":1}}],[\"地址管理\",{\"1\":{\"382\":1,\"399\":1}}],[\"地址表\",{\"0\":{\"382\":1},\"1\":{\"374\":1}}],[\"地址\",{\"1\":{\"73\":1,\"1941\":1,\"1966\":1,\"1986\":1,\"1996\":2,\"2027\":1,\"2463\":1}}],[\"社交场景\",{\"1\":{\"3027\":1}}],[\"适合\",{\"1\":{\"3027\":1}}],[\"适用于文本文件\",{\"1\":{\"1775\":1}}],[\"适用于类\",{\"1\":{\"810\":1}}],[\"适用于localdate\",{\"1\":{\"486\":1}}],[\"灵活的文档模型\",{\"1\":{\"3024\":1}}],[\"丰富查询支持\",{\"1\":{\"3024\":1}}],[\"倒序\",{\"1\":{\"3009\":1}}],[\"倒排列表记载了出现过某个单词的所有文档的文档列表及单词在该文档中出现的位置信息\",{\"1\":{\"2878\":1}}],[\"倒排列表\",{\"1\":{\"2878\":2,\"2879\":1,\"2880\":1}}],[\"倒排文件是存储倒排索引的物理文件\",{\"1\":{\"2878\":1}}],[\"倒排文件\",{\"1\":{\"2878\":2}}],[\"倒排索引的简单实现示例\",{\"0\":{\"2879\":1}}],[\"倒排索引的结构\",{\"0\":{\"2877\":1}}],[\"倒排索引主要由两个部分组成\",{\"1\":{\"2878\":1}}],[\"倒排索引具体机构如下\",{\"1\":{\"2877\":1}}],[\"倒排索引是实现\",{\"1\":{\"2876\":1}}],[\"倒排索引\",{\"0\":{\"2875\":1},\"1\":{\"2874\":1,\"2876\":1,\"2877\":1}}],[\"五个指标\",{\"1\":{\"2953\":1,\"2954\":1,\"3013\":1,\"3014\":1}}],[\"升序\",{\"1\":{\"2951\":1}}],[\"降序索引\",{\"1\":{\"3105\":1}}],[\"降序\",{\"1\":{\"2951\":1}}],[\"降低资源消耗\",{\"1\":{\"1565\":1}}],[\"降低了多态的范围\",{\"1\":{\"1739\":1}}],[\"降低了程序的耦合性\",{\"1\":{\"1289\":1}}],[\"降低了配置书写量\",{\"1\":{\"234\":1}}],[\"米\",{\"1\":{\"2946\":1,\"2960\":1}}],[\"红米\",{\"1\":{\"2942\":1,\"2943\":1}}],[\"红黑树结构存储数据\",{\"1\":{\"1685\":1}}],[\"红黑树的形成\",{\"1\":{\"1678\":1}}],[\"红黑树\",{\"1\":{\"1639\":1,\"1666\":1}}],[\"苹果手机\",{\"1\":{\"2930\":1}}],[\"据进行删除\",{\"1\":{\"2918\":1}}],[\"据说是集dbcp\",{\"1\":{\"2420\":1}}],[\"耗时ms\",{\"1\":{\"2920\":1}}],[\"耗时\",{\"1\":{\"2908\":1,\"2926\":1,\"2986\":1,\"2987\":1}}],[\"耗时大致分别为\",{\"1\":{\"447\":1}}],[\"片\",{\"1\":{\"2885\":1}}],[\"片段名\",{\"1\":{\"1989\":2}}],[\"签名文件\",{\"1\":{\"2874\":1}}],[\"矩阵的具体数据结构\",{\"1\":{\"2874\":1}}],[\"矩阵解读\",{\"0\":{\"2873\":1}}],[\"纵向\",{\"1\":{\"2873\":1}}],[\"横向\",{\"1\":{\"2873\":1}}],[\"星舰\",{\"1\":{\"2872\":1,\"2879\":1,\"2880\":1}}],[\"星舰下个月发射\",{\"1\":{\"2872\":1,\"2879\":1}}],[\"星期天\",{\"1\":{\"1368\":1}}],[\"星期一\",{\"1\":{\"1368\":1}}],[\"星期\",{\"1\":{\"1368\":1}}],[\"星期日用0表示\",{\"1\":{\"928\":1}}],[\"星期四\",{\"1\":{\"486\":1}}],[\"马斯克\",{\"1\":{\"2872\":1,\"2873\":1,\"2879\":1,\"2880\":1}}],[\"马斯克说将亲自指挥星舰的发射\",{\"1\":{\"2872\":1,\"2879\":1}}],[\"马斯克创建了spacex\",{\"1\":{\"2872\":1,\"2879\":1}}],[\"马化腾\",{\"1\":{\"2232\":1,\"2233\":1}}],[\"失败\",{\"1\":{\"2860\":1,\"2930\":1}}],[\"失去了移植性\",{\"1\":{\"2297\":1,\"2298\":1}}],[\"失去了面向过程\",{\"1\":{\"2133\":1}}],[\"插件目录\",{\"1\":{\"2856\":1}}],[\"插入成功\",{\"1\":{\"3168\":1}}],[\"插入一条数据\",{\"1\":{\"3168\":1}}],[\"插入时指定了\",{\"1\":{\"3077\":1}}],[\"插入的数据没有指定\",{\"1\":{\"3074\":1}}],[\"插入的数据就会被映射限制\",{\"1\":{\"2966\":1}}],[\"插入当前日期使用\",{\"1\":{\"3074\":1}}],[\"插入\",{\"1\":{\"2435\":2}}],[\"插入数据成功后\",{\"1\":{\"3168\":1}}],[\"插入数据\",{\"1\":{\"2407\":1,\"2408\":1}}],[\"插入数据等操作\",{\"1\":{\"1574\":1}}],[\"插入blob类型\",{\"1\":{\"2363\":1}}],[\"插入blob类型的数据必须使用preparedstatement\",{\"1\":{\"2360\":1}}],[\"插入效果\",{\"1\":{\"1890\":1}}],[\"阿里\",{\"1\":{\"2846\":1}}],[\"阿里云短信服务\",{\"0\":{\"335\":1}}],[\"亿条实时日志\",{\"1\":{\"2846\":1}}],[\"亿用户提供即时而精准的音乐搜索\",{\"1\":{\"2846\":1}}],[\"百度类的网站搜索\",{\"1\":{\"2848\":1}}],[\"百度\",{\"1\":{\"2846\":1}}],[\"维基百科\",{\"1\":{\"2846\":1}}],[\"搜索出的内容中的关键字会进行高亮显示\",{\"1\":{\"2958\":1,\"3017\":1}}],[\"搜索的过程是直接通过索引拿到关键字对应的文档id\",{\"1\":{\"2874\":1}}],[\"搜索的过程是遍历每一个文档\",{\"1\":{\"2874\":1}}],[\"搜索的数据对象是大量的非结构化的文本数据\",{\"1\":{\"2850\":1}}],[\"搜索引擎会把正向索引变为反向索引\",{\"1\":{\"2877\":1}}],[\"搜索引擎会扫描库中包含该关键字的所有文档\",{\"1\":{\"2869\":1}}],[\"搜索引擎会扫描索引库中的所有文档\",{\"1\":{\"2867\":1}}],[\"搜索引擎的索引单位是单词\",{\"1\":{\"2878\":1}}],[\"搜索引擎的索引其实就是实现\",{\"1\":{\"2874\":1}}],[\"搜索引擎的索引\",{\"0\":{\"2874\":1}}],[\"搜索\",{\"1\":{\"2846\":1}}],[\"搜索和分析海量数据\",{\"1\":{\"2841\":1}}],[\"市面上比较流行的是elasticsearch\",{\"1\":{\"2844\":1}}],[\"市级名称\",{\"1\":{\"382\":1}}],[\"市级区划编号\",{\"1\":{\"382\":1}}],[\"级别数据存储\",{\"1\":{\"3028\":1}}],[\"级别的数据\",{\"1\":{\"2843\":1}}],[\"级别指的是优先级\",{\"1\":{\"216\":1}}],[\"库与集合\",{\"0\":{\"3058\":1}}],[\"库\",{\"1\":{\"2836\":2,\"2881\":1,\"2884\":1,\"2898\":1,\"2962\":2}}],[\"记住我功能\",{\"1\":{\"2830\":1}}],[\"记录了所有的文件的扩展名和和mime类型的对应关系\",{\"1\":{\"2685\":1}}],[\"记录指针与相关方法\",{\"0\":{\"1882\":1}}],[\"记录每次读入到cbuf数组中的字符的个数\",{\"1\":{\"1817\":1}}],[\"记录质数的个数\",{\"1\":{\"956\":1}}],[\"记录个数\",{\"1\":{\"941\":1}}],[\"记录总和\",{\"1\":{\"941\":1}}],[\"记录负数的个数\",{\"1\":{\"938\":1}}],[\"记录正数的个数\",{\"1\":{\"938\":1}}],[\"记录错误堆栈信息\",{\"1\":{\"246\":1}}],[\"记录运维过程报警数据\",{\"1\":{\"246\":1}}],[\"记录运维过程数据\",{\"1\":{\"241\":1,\"246\":1}}],[\"记录应用报错信息\",{\"1\":{\"241\":1}}],[\"记录日常运营重要信息\",{\"1\":{\"241\":1}}],[\"记录日志\",{\"0\":{\"240\":1},\"1\":{\"242\":1,\"369\":1}}],[\"长期存储\",{\"1\":{\"2829\":1}}],[\"长度为n的数组合法下标取值范围\",{\"1\":{\"972\":1}}],[\"长度无限制\",{\"1\":{\"834\":1}}],[\"长度\",{\"1\":{\"253\":1,\"1986\":1,\"2961\":1}}],[\"张三\",{\"1\":{\"2806\":1}}],[\"张学良\",{\"1\":{\"1908\":1}}],[\"细化cookie的适用范围\",{\"1\":{\"2803\":1}}],[\"细节补充\",{\"0\":{\"909\":1}}],[\"绑定数据\",{\"1\":{\"2791\":1}}],[\"约束等\",{\"1\":{\"2961\":1}}],[\"约束自定义的studenttyep类型\",{\"1\":{\"2781\":1}}],[\"约束自定义的studentstype类型\",{\"1\":{\"2781\":1}}],[\"约束文档的技术实现\",{\"0\":{\"2775\":1}}],[\"约束\",{\"0\":{\"2773\":1}}],[\"约定\",{\"1\":{\"1760\":1}}],[\"约定俗称\",{\"1\":{\"1122\":1}}],[\"职责单一\",{\"1\":{\"2756\":1}}],[\"展示数据\",{\"1\":{\"2754\":1}}],[\"界面展示\",{\"1\":{\"2754\":1}}],[\"绿色的\",{\"1\":{\"2744\":1}}],[\"绿色启动按钮启动\",{\"1\":{\"2509\":1}}],[\"积分等直接以内嵌文档的形式存储\",{\"1\":{\"3027\":1}}],[\"积累jar包的过程也会考验代码的重构能力和模块的抽象能力\",{\"1\":{\"2739\":1}}],[\"积攒一波sql然后集中的去连接服务器执行\",{\"1\":{\"2374\":1}}],[\"积攒sql语句\",{\"0\":{\"2368\":1}}],[\"逐渐积累一些通用的util类\",{\"1\":{\"2739\":1}}],[\"英文是按照单词进行拆分的\",{\"1\":{\"2941\":1}}],[\"英文字母只用一个字节表示就够了\",{\"1\":{\"1863\":1}}],[\"英语\",{\"1\":{\"2731\":1}}],[\"浪费时间\",{\"1\":{\"2728\":1}}],[\"浪费资源\",{\"1\":{\"2005\":1}}],[\"立即采取相应的行动\",{\"1\":{\"2710\":1}}],[\"异步访问资源\",{\"1\":{\"2702\":1}}],[\"异步\",{\"1\":{\"2702\":1}}],[\"异常列表\",{\"1\":{\"2048\":1}}],[\"异常说明\",{\"1\":{\"2037\":1}}],[\"异常类不能是泛型\",{\"1\":{\"1721\":1}}],[\"异常类型\",{\"1\":{\"1350\":1}}],[\"异常类型的选择\",{\"0\":{\"1338\":1}}],[\"异常类型3\",{\"1\":{\"1337\":1}}],[\"异常类型2\",{\"1\":{\"1337\":1}}],[\"异常类型1\",{\"1\":{\"1337\":1}}],[\"异常是抛给调用者看的\",{\"1\":{\"1359\":1}}],[\"异常又被抛出去了\",{\"1\":{\"1352\":1}}],[\"异常代码后续的代码\",{\"1\":{\"1350\":1}}],[\"异常信息\",{\"1\":{\"1341\":1,\"1360\":2}}],[\"异常体系结构\",{\"0\":{\"1322\":1}}],[\"异常对象的产生\",{\"0\":{\"1319\":1}}],[\"异常并没有被解决\",{\"1\":{\"1315\":1}}],[\"异常分类\",{\"0\":{\"1311\":1,\"1323\":1}}],[\"异常概述\",{\"0\":{\"1309\":1}}],[\"异常的抛出机制\",{\"0\":{\"1351\":1}}],[\"异常的嵌套\",{\"0\":{\"1345\":1}}],[\"异常的处理只是为了保证代码的正常运行\",{\"1\":{\"1315\":1}}],[\"异常的类型和异常的描述\",{\"1\":{\"812\":1}}],[\"异常的统一处理\",{\"0\":{\"369\":1}}],[\"异常\",{\"0\":{\"1126\":1,\"1313\":1},\"1\":{\"573\":1,\"574\":1,\"576\":1,\"588\":1,\"812\":1,\"1310\":1,\"1323\":1,\"1344\":2,\"1822\":1}}],[\"异常专用构造方法\",{\"1\":{\"370\":1}}],[\"异常处理线程\",{\"1\":{\"1441\":1}}],[\"异常处理总结\",{\"0\":{\"1320\":1}}],[\"异常处理的抓抛模型\",{\"0\":{\"1318\":1}}],[\"异常处理的意义\",{\"0\":{\"1315\":1}}],[\"异常处理机制\",{\"0\":{\"1316\":1}}],[\"异常处理只是为了跟用户友好的交互\",{\"1\":{\"1315\":1}}],[\"异常处理\",{\"0\":{\"1314\":1,\"1815\":1,\"3260\":1},\"1\":{\"370\":1,\"1844\":1,\"1878\":1,\"1879\":1,\"1903\":1,\"1904\":1,\"1908\":1,\"1909\":1,\"1990\":1}}],[\"足有4千行代码记录对照关系\",{\"1\":{\"2685\":1}}],[\"域\",{\"1\":{\"3031\":1}}],[\"域的范围\",{\"0\":{\"2689\":1}}],[\"域对象的属性域监听器\",{\"1\":{\"2712\":1}}],[\"域对象监听器\",{\"1\":{\"2712\":1}}],[\"域对象都有相同的三个方法\",{\"1\":{\"2688\":1}}],[\"域对象共有的方法\",{\"0\":{\"2678\":1}}],[\"域对象就是一个有作用范围的对象\",{\"1\":{\"2671\":1}}],[\"域对象\",{\"0\":{\"2669\":1,\"2670\":1},\"1\":{\"2653\":1,\"2681\":1}}],[\"域名或localhost\",{\"1\":{\"2463\":1}}],[\"域名服务器\",{\"1\":{\"1936\":1}}],[\"域名需要进行解析才能与ip地址对应\",{\"1\":{\"1936\":1}}],[\"域名\",{\"0\":{\"1936\":1},\"1\":{\"1941\":1,\"2803\":1}}],[\"爬山\",{\"1\":{\"2623\":1}}],[\"游戏场景\",{\"1\":{\"3027\":1}}],[\"游泳\",{\"1\":{\"2623\":1}}],[\"游标\",{\"0\":{\"1591\":1}}],[\"体系结构\",{\"0\":{\"2557\":1}}],[\"体现了linkedlist的双向链表的说法\",{\"1\":{\"1626\":1}}],[\"体现了现实世界中\",{\"1\":{\"1258\":1}}],[\"体现多态性\",{\"1\":{\"1263\":1}}],[\"体现类及类的内部结构在被调用时的可见性的大小\",{\"1\":{\"1059\":1}}],[\"销毁方法\",{\"0\":{\"2554\":1}}],[\"阶段4\",{\"0\":{\"2550\":1}}],[\"阶段3\",{\"0\":{\"2549\":1}}],[\"阶段2\",{\"0\":{\"2548\":1}}],[\"阶段1\",{\"0\":{\"2545\":1}}],[\"观察者\",{\"1\":{\"2709\":2}}],[\"观察者模式\",{\"0\":{\"2709\":1}}],[\"观察可知\",{\"1\":{\"2553\":1}}],[\"观察启动后的命令行\",{\"1\":{\"2534\":1}}],[\"观察访问结果\",{\"1\":{\"2529\":1}}],[\"观察该文件\",{\"1\":{\"95\":1}}],[\"测设\",{\"1\":{\"2529\":1}}],[\"测试的时候要注意\",{\"1\":{\"2823\":1}}],[\"测试的步骤\",{\"0\":{\"181\":1}}],[\"测试二\",{\"1\":{\"2443\":1}}],[\"测试一\",{\"1\":{\"2443\":1}}],[\"测试特殊查询\",{\"1\":{\"2409\":2}}],[\"测试多行数据查询\",{\"1\":{\"2409\":1}}],[\"测试单行数据查询\",{\"1\":{\"2409\":1}}],[\"测试更新\",{\"1\":{\"2409\":1}}],[\"测试删除\",{\"1\":{\"2409\":1}}],[\"测试添加\",{\"1\":{\"2409\":1}}],[\"测试是否断开\",{\"1\":{\"1959\":1}}],[\"测试是否可以达到该地址\",{\"0\":{\"1948\":1}}],[\"测试super\",{\"1\":{\"1753\":1}}],[\"测试extends\",{\"1\":{\"1753\":1}}],[\"测试\",{\"0\":{\"1374\":1,\"2534\":1,\"2663\":1}}],[\"测试用\",{\"1\":{\"1373\":1}}],[\"测试此字符串是否以指定潜在开始\",{\"1\":{\"414\":1}}],[\"测试此字符串是否以指定的后缀结束\",{\"1\":{\"413\":1}}],[\"测试接口\",{\"0\":{\"366\":1}}],[\"测试数据表\",{\"0\":{\"2371\":1}}],[\"测试数据源\",{\"1\":{\"2209\":1,\"2214\":1}}],[\"测试数据abcdefg\",{\"1\":{\"347\":1}}],[\"测试数据123\",{\"1\":{\"347\":5}}],[\"测试依赖\",{\"0\":{\"318\":1}}],[\"测试api\",{\"0\":{\"185\":1}}],[\"测试代码\",{\"0\":{\"3010\":1},\"1\":{\"180\":1}}],[\"测试类将无法运行\",{\"1\":{\"182\":1}}],[\"测试类默认的位置和引导类是对应的\",{\"1\":{\"182\":1}}],[\"测试类的目录规划\",{\"0\":{\"182\":1}}],[\"测试类\",{\"0\":{\"180\":1,\"347\":1}}],[\"测试使用容器\",{\"1\":{\"104\":1}}],[\"测试目录\",{\"1\":{\"74\":1}}],[\"测试环境\",{\"1\":{\"23\":1,\"223\":1}}],[\"测试工程师\",{\"1\":{\"22\":1}}],[\"号后面的键值对\",{\"1\":{\"2597\":1}}],[\"号\",{\"1\":{\"2505\":1}}],[\"号通配符回车确认添加\",{\"1\":{\"79\":1}}],[\"填写项目名称\",{\"1\":{\"2489\":1,\"2493\":1}}],[\"填充占位符\",{\"0\":{\"2322\":1},\"1\":{\"2325\":1,\"2329\":1,\"2333\":1,\"2386\":1,\"2405\":1}}],[\"填充因子\",{\"1\":{\"1680\":2}}],[\"弹出框中选择需要运行程序入口main函数\",{\"1\":{\"2744\":1}}],[\"弹出如下窗口\",{\"1\":{\"2483\":1}}],[\"弹出命令行窗口\",{\"1\":{\"639\":1,\"760\":1}}],[\"配合nginx代理\",{\"0\":{\"2470\":1}}],[\"配置目录\",{\"1\":{\"2856\":1}}],[\"配置多个值\",{\"0\":{\"2703\":1}}],[\"配置多个tomcat\",{\"0\":{\"2504\":1}}],[\"配置拦截路径\",{\"0\":{\"2701\":1}}],[\"配置的方法如下\",{\"1\":{\"3018\":1}}],[\"配置的是服务器内网ip\",{\"1\":{\"3048\":1}}],[\"配置的是\",{\"1\":{\"2598\":1}}],[\"配置的路径和访问的路径是一样的\",{\"1\":{\"2574\":1}}],[\"配置的url\",{\"1\":{\"2553\":1}}],[\"配置该servlet的访问路径\",{\"1\":{\"2532\":1}}],[\"配置路由用的是\",{\"1\":{\"2570\":1}}],[\"配置路由\",{\"0\":{\"2532\":1},\"1\":{\"2529\":1}}],[\"配置好tomcat和servlet\",{\"1\":{\"2529\":1}}],[\"配置tomcat服务器软件的目录\",{\"1\":{\"2502\":1}}],[\"配置tomcat模板\",{\"0\":{\"2506\":1},\"1\":{\"2497\":1}}],[\"配置tomcat\",{\"0\":{\"2496\":1}}],[\"配置输出文件的目录\",{\"1\":{\"2487\":1}}],[\"配置artifacts\",{\"0\":{\"2487\":1,\"2515\":1}}],[\"配置了maxwait之后\",{\"1\":{\"2426\":1}}],[\"配置了也没效果\",{\"1\":{\"2426\":1}}],[\"配置这个属性的意义在于\",{\"1\":{\"2426\":1}}],[\"配置项如下\",{\"1\":{\"2426\":1,\"2498\":1}}],[\"配置项\",{\"0\":{\"2426\":1,\"2572\":1}}],[\"配置项是k\",{\"1\":{\"115\":1}}],[\"配置idea\",{\"0\":{\"2106\":1}}],[\"配置idea和git\",{\"0\":{\"297\":1}}],[\"配置成最新的java版本环境变量即可\",{\"1\":{\"2105\":1}}],[\"配置参数值\",{\"1\":{\"1400\":1}}],[\"配置参数的类型\",{\"0\":{\"1398\":1}}],[\"配置参数\",{\"0\":{\"1397\":1}}],[\"配置参数名=\",{\"1\":{\"1400\":1}}],[\"配置参数名\",{\"1\":{\"1392\":1}}],[\"配置参数类型\",{\"1\":{\"1392\":1}}],[\"配置java\",{\"0\":{\"783\":1}}],[\"配置端口号\",{\"1\":{\"341\":1}}],[\"配置代码模板\",{\"1\":{\"312\":1}}],[\"配置数据源\",{\"1\":{\"312\":1}}],[\"配置swagger\",{\"1\":{\"311\":1}}],[\"配置\",{\"0\":{\"302\":1,\"348\":1,\"2967\":1,\"3048\":1},\"1\":{\"313\":1,\"2426\":1,\"2520\":1}}],[\"配置连接信息\",{\"0\":{\"271\":1,\"281\":1}}],[\"配置连接池\",{\"0\":{\"267\":1}}],[\"配置格式变量\",{\"1\":{\"262\":1}}],[\"配置logback日志\",{\"0\":{\"261\":1}}],[\"配置日志格式\",{\"1\":{\"252\":1}}],[\"配置方式一样\",{\"1\":{\"2506\":1}}],[\"配置方式\",{\"0\":{\"221\":1}}],[\"配置很重要\",{\"1\":{\"173\":1}}],[\"配置类\",{\"1\":{\"163\":1}}],[\"配置类统一管理\",{\"0\":{\"163\":1}}],[\"配置yml\",{\"0\":{\"121\":1,\"307\":1}}],[\"配置文件中添加选项\",{\"1\":{\"3180\":1}}],[\"配置文件中的一些路径出现问题\",{\"1\":{\"3243\":1}}],[\"配置文件中的属性值\",{\"1\":{\"173\":1}}],[\"配置文件中的属性\",{\"1\":{\"170\":1}}],[\"配置文件中的servers\",{\"1\":{\"167\":1}}],[\"配置文件中的命名格式与变量名的命名格式可以进行格式上的最大化兼容\",{\"1\":{\"166\":1}}],[\"配置文件中的哪个配置项\",{\"1\":{\"131\":1,\"156\":2}}],[\"配置文件的内容如下\",{\"1\":{\"3048\":1}}],[\"配置文件的级别\",{\"0\":{\"216\":1}}],[\"配置文件地址\",{\"1\":{\"2507\":1}}],[\"配置文件声明在工程的src目录下\",{\"1\":{\"2302\":1}}],[\"配置文件默认识别为\",{\"1\":{\"2034\":1}}],[\"配置文件后缀改为yml\",{\"1\":{\"340\":1}}],[\"配置文件如果发生改变\",{\"1\":{\"262\":1}}],[\"配置文件内容\",{\"0\":{\"262\":1}}],[\"配置文件控制日志格式\",{\"0\":{\"252\":1}}],[\"配置文件设置日志等级\",{\"0\":{\"248\":1}}],[\"配置文件设计\",{\"0\":{\"208\":1},\"1\":{\"29\":1}}],[\"配置文件名默认为\",{\"1\":{\"219\":1}}],[\"配置文件分类\",{\"0\":{\"215\":1}}],[\"配置文件已经设置好了\",{\"1\":{\"184\":1}}],[\"配置文件层级过多可能会导致相符覆盖最终引起配置失效\",{\"1\":{\"153\":1}}],[\"配置文件等\",{\"1\":{\"138\":1}}],[\"配置文件\",{\"0\":{\"341\":1,\"2302\":1,\"2425\":1,\"2507\":1},\"1\":{\"137\":1,\"166\":1,\"198\":1,\"199\":1,\"2774\":1,\"3047\":1,\"3137\":1,\"3140\":1}}],[\"配置文件没有小叶子的图标\",{\"1\":{\"119\":1}}],[\"配置文件介绍\",{\"0\":{\"112\":1}}],[\"配置完后重启idea\",{\"1\":{\"301\":1}}],[\"配置完后\",{\"1\":{\"72\":1}}],[\"配置工程\",{\"0\":{\"72\":1,\"305\":1}}],[\"窗口一闪而过\",{\"0\":{\"2461\":1}}],[\"条记录\",{\"1\":{\"2438\":1,\"2439\":1}}],[\"条件连接查询\",{\"0\":{\"3102\":1}}],[\"条件\",{\"1\":{\"3087\":1,\"3102\":6}}],[\"条件删除\",{\"0\":{\"2918\":1}}],[\"条件表达式必须是布尔表达式\",{\"1\":{\"924\":1}}],[\"条件表达式\",{\"1\":{\"920\":1,\"921\":1,\"922\":3}}],[\"条件表达式的结果为boolean类型\",{\"1\":{\"911\":1}}],[\"条件判断\",{\"1\":{\"919\":1}}],[\"条件查询\",{\"0\":{\"353\":1,\"2927\":1,\"2993\":1},\"1\":{\"2993\":1}}],[\"何成飞\",{\"1\":{\"2438\":1}}],[\"何时需要多线程\",{\"0\":{\"1446\":1}}],[\"申请连接的时候检测\",{\"1\":{\"2426\":1}}],[\"申请连接时执行validationquery检测连接是否有效\",{\"1\":{\"2426\":1}}],[\"德鲁伊\",{\"0\":{\"2422\":1}}],[\"归还连接时执行validationquery检测连接是否有效\",{\"1\":{\"2426\":1}}],[\"归还给了数据库连接池\",{\"1\":{\"2421\":1}}],[\"归约与收集\",{\"0\":{\"2238\":1}}],[\"归约\",{\"0\":{\"2239\":1},\"1\":{\"2208\":1}}],[\"稳定性较c3p0差一点\",{\"1\":{\"2420\":1}}],[\"稳定性还可以\",{\"1\":{\"2420\":1}}],[\"避免数据库连接泄漏\",{\"1\":{\"2419\":1}}],[\"避免某一应用独占所有的数据库资源\",{\"1\":{\"2419\":1}}],[\"避免了数据库连接初始化和释放过程的时间开销\",{\"1\":{\"2419\":1}}],[\"避免了频繁创建\",{\"1\":{\"2419\":1}}],[\"避免方法重载冲突\",{\"1\":{\"1049\":1}}],[\"严重的甚至会造成服务器的崩溃\",{\"1\":{\"2414\":1}}],[\"严重落后现有版本\",{\"1\":{\"60\":1,\"61\":1}}],[\"频繁的进行数据库连接操作将占用很多的系统资源\",{\"1\":{\"2414\":1}}],[\"频繁的哈希冲突会降低数据存取的效率\",{\"1\":{\"1652\":1}}],[\"得花费0\",{\"1\":{\"2414\":1}}],[\"得到class文件\",{\"1\":{\"2743\":1}}],[\"得到一个值\",{\"1\":{\"2239\":1}}],[\"得到一个用户年龄流\",{\"1\":{\"2215\":1}}],[\"得到被代理类实现的全部接口\",{\"1\":{\"2090\":1}}],[\"得到在entry数组中的存放位置\",{\"1\":{\"1674\":1}}],[\"得到注解信息\",{\"1\":{\"1389\":1}}],[\"得到了目标类的class实例\",{\"1\":{\"589\":1}}],[\"得到的结果可能不一样\",{\"1\":{\"2447\":1}}],[\"得到的结果都是一样的\",{\"1\":{\"2447\":1}}],[\"得到的是一个内存地址值\",{\"1\":{\"990\":1}}],[\"得到的\",{\"1\":{\"429\":1}}],[\"贝多芬\",{\"1\":{\"2409\":1}}],[\"于小飞\",{\"1\":{\"2409\":1}}],[\"于是只能等待\",{\"1\":{\"1548\":1}}],[\"于是进入了确认支付环节\",{\"1\":{\"1506\":1}}],[\"于是人们想出了将符号位也参与运算的方法\",{\"1\":{\"873\":1}}],[\"额外多关闭一个查询结果集资源\",{\"1\":{\"2404\":1}}],[\"额外还需要一个查询结果的储存类\",{\"1\":{\"2396\":1}}],[\"恢复每次dml操作的自动提交功能\",{\"1\":{\"2387\":1}}],[\"批处理\",{\"1\":{\"2435\":1}}],[\"批处理+手动提交\",{\"0\":{\"2377\":1}}],[\"批量更新\",{\"0\":{\"3083\":1}}],[\"批量删除文档\",{\"0\":{\"2987\":1},\"1\":{\"2987\":1}}],[\"批量新增文档\",{\"0\":{\"2986\":1},\"1\":{\"2986\":1}}],[\"批量插入两条文章评论\",{\"1\":{\"3076\":1}}],[\"批量插入\",{\"0\":{\"3075\":1},\"1\":{\"2366\":1}}],[\"批量insert\",{\"1\":{\"2366\":1}}],[\"批量操作\",{\"0\":{\"2366\":1,\"2985\":1}}],[\"攒\",{\"1\":{\"2376\":1,\"2377\":1}}],[\"袁浩\",{\"1\":{\"2364\":1}}],[\"别人可以选择不加\",{\"1\":{\"3180\":1}}],[\"别名\",{\"1\":{\"2354\":1,\"2890\":1,\"2977\":1}}],[\"别忘记关闭锁\",{\"1\":{\"1537\":1}}],[\"周杰伦\",{\"1\":{\"2353\":1}}],[\"周末是双休的\",{\"1\":{\"928\":1}}],[\"莫扎特\",{\"1\":{\"2329\":1}}],[\"⑦关闭资源\",{\"1\":{\"2318\":1}}],[\"⑥注释\",{\"1\":{\"2772\":1}}],[\"⑥执行操作\",{\"1\":{\"2318\":1}}],[\"⑥获取callable中call方法的返回值\",{\"1\":{\"1561\":1}}],[\"繁琐\",{\"0\":{\"2310\":1}}],[\"弊端\",{\"1\":{\"2297\":1}}],[\"驱动\",{\"0\":{\"2432\":1}}],[\"驱动注册可以省略\",{\"1\":{\"2300\":1}}],[\"驱动会自动注册的\",{\"1\":{\"2300\":1}}],[\"驱动文件介绍\",{\"0\":{\"2289\":1}}],[\"驱动介绍\",{\"0\":{\"2287\":1}}],[\"固化\",{\"1\":{\"2277\":1}}],[\"固定部分\",{\"1\":{\"258\":1}}],[\"持久化存储\",{\"1\":{\"2805\":1}}],[\"持久化的主要应用是将内存中的数据存储在关系型数据库中\",{\"1\":{\"2277\":1}}],[\"持久化\",{\"1\":{\"2277\":1}}],[\"持续\",{\"1\":{\"1986\":1}}],[\"钻石操作符<>的增强\",{\"0\":{\"2275\":1}}],[\"受到google\",{\"1\":{\"2248\":1}}],[\"臭名昭著的空指针异常是导致java应用程序失败的最常见原因\",{\"1\":{\"2248\":1}}],[\"ⅷ\",{\"0\":{\"2238\":1}}],[\"扎克伯格\",{\"1\":{\"2236\":1}}],[\"检测索引是否创建成功\",{\"1\":{\"2975\":1}}],[\"检测与比较\",{\"0\":{\"410\":1}}],[\"检索程序就根据事先建立的索引进行查找\",{\"1\":{\"2852\":1}}],[\"检索数据\",{\"1\":{\"2843\":1}}],[\"检索指定列的数据库特定的类型名称\",{\"1\":{\"2345\":1}}],[\"检查java\",{\"1\":{\"2461\":1}}],[\"检查是否没有匹配任何元素\",{\"0\":{\"2231\":1}}],[\"检查是否至少匹配一个元素\",{\"0\":{\"2230\":1}}],[\"检查是否匹配所有元素\",{\"0\":{\"2229\":1}}],[\"班级集合内的元素才是学生对象\",{\"1\":{\"2223\":1}}],[\"班级本身是学生数据集合\",{\"1\":{\"2221\":1}}],[\"素材\",{\"0\":{\"2221\":1}}],[\"素数生成\",{\"1\":{\"529\":1}}],[\"做session共享\",{\"1\":{\"3037\":1}}],[\"做什么\",{\"1\":{\"2502\":1}}],[\"做出响应\",{\"1\":{\"2446\":1}}],[\"做了这个配置会降低性能\",{\"1\":{\"2426\":2}}],[\"做同样的方法体操作\",{\"1\":{\"2215\":1}}],[\"做日志可视化处理\",{\"1\":{\"254\":1}}],[\"跳过元素\",{\"1\":{\"2213\":1}}],[\"跳过\",{\"0\":{\"2213\":1}}],[\"跳出当前循环\",{\"1\":{\"945\":1}}],[\"跳出循环\",{\"1\":{\"938\":1}}],[\"收入\",{\"1\":{\"2209\":1,\"2214\":1}}],[\"收集\",{\"0\":{\"2242\":1},\"1\":{\"2208\":1}}],[\"收货人\",{\"1\":{\"382\":1}}],[\"匹配合适的版本\",{\"1\":{\"2988\":1}}],[\"匹配度分值\",{\"1\":{\"2930\":1}}],[\"匹配查询满足条件的文档数据\",{\"1\":{\"2927\":1}}],[\"匹配模式\",{\"0\":{\"2573\":1}}],[\"匹配与查找\",{\"0\":{\"2228\":1},\"1\":{\"2208\":1}}],[\"匹配器\",{\"1\":{\"745\":1}}],[\"甚至是\",{\"1\":{\"2207\":1}}],[\"甚至代码可以被引进\",{\"1\":{\"1999\":1}}],[\"惰性求值\",{\"1\":{\"2205\":1}}],[\"终极方案\",{\"0\":{\"2377\":1}}],[\"终端操作\",{\"1\":{\"2192\":1}}],[\"终止操作的方法\",{\"0\":{\"2208\":1}}],[\"终止操作会从流的流水线生成结果\",{\"1\":{\"2207\":1}}],[\"终止操作说明\",{\"0\":{\"2207\":1}}],[\"终止操作\",{\"1\":{\"2192\":1}}],[\"讲的是计算\",{\"1\":{\"2191\":1}}],[\"筛选工资>7000的员工\",{\"1\":{\"2210\":1}}],[\"筛选与切片\",{\"0\":{\"2209\":1},\"1\":{\"2206\":1}}],[\"筛选\",{\"0\":{\"2210\":1},\"1\":{\"2187\":1}}],[\"满足条件\",{\"1\":{\"2156\":1}}],[\"替代接口中的方法\",{\"1\":{\"2151\":1}}],[\"替换为直接引用\",{\"1\":{\"2027\":1}}],[\"替换结束为主的index\",{\"1\":{\"454\":1}}],[\"替换其实位置的index\",{\"1\":{\"454\":1}}],[\"替换此字符串匹配给定的正则表达式的第一个子字符串\",{\"1\":{\"432\":1}}],[\"替换此字符串所有匹配给定的正则表达式的子字符串\",{\"1\":{\"431\":1}}],[\"替换此字符串中出现的所有\",{\"1\":{\"429\":1}}],[\"替换手动下载的maven\",{\"1\":{\"298\":1}}],[\"替换别的服务器\",{\"0\":{\"111\":1}}],[\"寻找或定义一个参数符合的接口\",{\"1\":{\"2136\":1}}],[\"箭头函数\",{\"1\":{\"2109\":1}}],[\"着java的更新从传统的以特性驱动的发布周期\",{\"1\":{\"2103\":1}}],[\"清洗工厂等\",{\"1\":{\"2078\":1}}],[\"清空\",{\"1\":{\"2376\":1}}],[\"清空缓存的数据\",{\"1\":{\"2370\":1}}],[\"清空batch\",{\"0\":{\"2370\":1},\"1\":{\"2377\":1}}],[\"清空当前map中的所有数据\",{\"1\":{\"714\":1}}],[\"清空集合\",{\"1\":{\"714\":1}}],[\"清空集合元素\",{\"1\":{\"660\":1}}],[\"清空购物车\",{\"1\":{\"399\":1}}],[\"链接数据库后\",{\"1\":{\"2073\":1}}],[\"链表的产生\",{\"0\":{\"1675\":1}}],[\"链表的形式\",{\"0\":{\"1645\":1}}],[\"既然运行时类已经加载到了内存中\",{\"1\":{\"2039\":1}}],[\"既可以使用get方法访问\",{\"1\":{\"2613\":1}}],[\"既可以作为一个输入流\",{\"1\":{\"1880\":1}}],[\"既可以调用非静态的方法或属性\",{\"1\":{\"1235\":1}}],[\"既可以比较基本类型也可以比较引用类型\",{\"1\":{\"1181\":1}}],[\"既可以取常量名\",{\"1\":{\"536\":1}}],[\"验证通过\",{\"1\":{\"3201\":1}}],[\"验证通过时\",{\"1\":{\"1507\":1}}],[\"验证码\",{\"1\":{\"2830\":1}}],[\"验证\",{\"1\":{\"2027\":1}}],[\"唯一标识\",{\"1\":{\"2901\":1}}],[\"唯一的区别就是在\",{\"1\":{\"2733\":1}}],[\"唯一的区别是判断jvm何时离开\",{\"1\":{\"1463\":1}}],[\"唯一的标识\",{\"1\":{\"1931\":1}}],[\"唯有先获得相应的class对象\",{\"1\":{\"2015\":1}}],[\"器\",{\"1\":{\"2002\":1}}],[\"透过这个镜子看到类的结构\",{\"1\":{\"2000\":1}}],[\"乱序以及网络拥挤等问题\",{\"1\":{\"1996\":1}}],[\"乱码原因\",{\"0\":{\"2628\":1}}],[\"乱码问题\",{\"0\":{\"2626\":1}}],[\"乱码\",{\"1\":{\"855\":1}}],[\"损坏\",{\"1\":{\"1996\":1}}],[\"远程方法调用\",{\"1\":{\"2077\":1}}],[\"远程主机的ip\",{\"1\":{\"1985\":1}}],[\"远小于节点流\",{\"1\":{\"1838\":1}}],[\"建立的索引是否有效\",{\"1\":{\"3118\":1}}],[\"建立的索引是否唯一\",{\"1\":{\"3111\":1}}],[\"建立了索引\",{\"1\":{\"2849\":1}}],[\"建立数据包\",{\"1\":{\"1982\":1}}],[\"建立发送端\",{\"1\":{\"1982\":1}}],[\"建议使用url编码存储\",{\"1\":{\"2806\":1}}],[\"建议使用setproperty\",{\"1\":{\"1668\":1}}],[\"建议平时写代码时\",{\"1\":{\"2739\":1}}],[\"建议直接改成\",{\"1\":{\"2501\":1}}],[\"建议配置为true\",{\"1\":{\"2426\":1}}],[\"建议配置下\",{\"1\":{\"2426\":1}}],[\"建议\",{\"1\":{\"1720\":1,\"2772\":1}}],[\"建议开发中使用带参的构造器\",{\"1\":{\"1620\":1}}],[\"建议也根据提示安装jre\",{\"1\":{\"779\":1}}],[\"建议用注解的方式加sql\",{\"1\":{\"346\":1}}],[\"客户机是一个用户应用程序\",{\"1\":{\"1996\":1}}],[\"客户的套接字请求\",{\"1\":{\"1976\":1}}],[\"客户端对象\",{\"0\":{\"2972\":1}}],[\"客户端会话技术\",{\"1\":{\"2790\":1}}],[\"客户端会话跟踪技术\",{\"1\":{\"2789\":1}}],[\"客户端发起请求\",{\"1\":{\"2583\":1}}],[\"客户端和服务器之间的每个通信会话使用一个不同的套接字\",{\"1\":{\"1996\":1}}],[\"客户端开始想服务端传输数据\",{\"1\":{\"1978\":1}}],[\"客户端通过服务端的ip和创建serversocket对象时指定的端口号\",{\"1\":{\"1975\":1}}],[\"客户端访问结束\",{\"1\":{\"1973\":1}}],[\"客户端程序可以使用socket类创建对象\",{\"1\":{\"1970\":1}}],[\"客户端创建socket对象\",{\"0\":{\"1970\":1}}],[\"客户端socket\",{\"0\":{\"1969\":1},\"1\":{\"1969\":1}}],[\"客户端\",{\"1\":{\"1956\":1,\"1958\":1,\"1959\":2,\"1996\":1,\"2971\":1,\"2972\":2,\"2975\":2,\"2977\":2,\"2978\":2,\"2980\":2,\"2983\":2,\"2984\":2,\"2986\":2,\"2987\":2,\"2991\":2,\"2992\":2,\"2993\":2,\"2997\":2,\"3000\":2,\"3003\":2,\"3006\":2,\"3008\":2,\"3010\":2,\"3015\":2,\"3019\":2}}],[\"客户端的其他配置\",{\"0\":{\"293\":1}}],[\"监听某个对象在session中的序列化与反序列化\",{\"1\":{\"2721\":1}}],[\"监听某个对象在session域中的创建与移除\",{\"1\":{\"2720\":1}}],[\"监听httpsession中属性的创建\",{\"1\":{\"2718\":1}}],[\"监听httpsession对象的创建与销毁\",{\"1\":{\"2715\":1}}],[\"监听servletrequest中属性的创建\",{\"1\":{\"2719\":1}}],[\"监听servletrequest对象的创建与销毁\",{\"1\":{\"2716\":1}}],[\"监听servletcontext中属性的创建\",{\"1\":{\"2717\":1}}],[\"监听servletcontext对象的创建与销毁\",{\"1\":{\"2714\":1}}],[\"监听器是通过事件自动触发的\",{\"1\":{\"2727\":1}}],[\"监听器触发机制\",{\"0\":{\"2727\":1}}],[\"监听器的使用步骤\",{\"0\":{\"2723\":1}}],[\"监听器列表\",{\"0\":{\"2713\":1}}],[\"监听器分类\",{\"0\":{\"2712\":1}}],[\"监听器概念\",{\"0\":{\"2710\":1}}],[\"监听器采用的就是观察者模式\",{\"1\":{\"2709\":1}}],[\"监听器介绍\",{\"0\":{\"2708\":1}}],[\"监听接受客户端的请求\",{\"1\":{\"1977\":1}}],[\"监听连接请求\",{\"1\":{\"1973\":2}}],[\"监控统计用的filter\",{\"1\":{\"2426\":1}}],[\"监控的时候可以通过名字来区分开来\",{\"1\":{\"2426\":1}}],[\"监控开发的文件\",{\"1\":{\"136\":1}}],[\"监控\",{\"0\":{\"264\":1},\"1\":{\"29\":1,\"2709\":1}}],[\"速度稍慢\",{\"1\":{\"2449\":1}}],[\"速度相对较慢\",{\"1\":{\"2420\":1}}],[\"速度相对c3p0较快\",{\"1\":{\"2420\":1}}],[\"速度快\",{\"1\":{\"1957\":1,\"2420\":1,\"2449\":1}}],[\"速度很快\",{\"1\":{\"961\":1}}],[\"点赞互动信息等\",{\"1\":{\"3027\":1}}],[\"点对点通信\",{\"1\":{\"1956\":1}}],[\"点击new\",{\"1\":{\"3056\":1}}],[\"点击next\",{\"1\":{\"2489\":1,\"2493\":1}}],[\"点击菜单中\",{\"1\":{\"2744\":1}}],[\"点击main\",{\"1\":{\"2744\":1}}],[\"点击module选项卡\",{\"1\":{\"2542\":1}}],[\"点击create\",{\"1\":{\"2744\":1}}],[\"点击项目\",{\"1\":{\"2744\":1}}],[\"点击+\",{\"1\":{\"2505\":1}}],[\"点击+号\",{\"1\":{\"2485\":1,\"2495\":1,\"2499\":1,\"2518\":1}}],[\"点击ok\",{\"1\":{\"2503\":1,\"2744\":3}}],[\"点击该选项卡\",{\"1\":{\"2499\":1}}],[\"点击右边的configure进行配置\",{\"1\":{\"2502\":1}}],[\"点击右边的choose\",{\"1\":{\"2291\":1}}],[\"点击右上角的springboot引导类的运行界面\",{\"1\":{\"212\":1}}],[\"点击点击首页时\",{\"1\":{\"1315\":1}}],[\"点击打开index\",{\"1\":{\"813\":1}}],[\"点击enter键完成输入\",{\"1\":{\"639\":1,\"760\":1}}],[\"点击spring\",{\"1\":{\"99\":1}}],[\"点击parent的artifactid\",{\"1\":{\"94\":1}}],[\"点击\",{\"1\":{\"72\":2,\"2487\":1,\"2744\":1,\"2857\":1}}],[\"须先建立tcp连接\",{\"1\":{\"1956\":1}}],[\"须重写hashcode\",{\"1\":{\"1661\":1}}],[\"协议可以解决数据在传送过程中的丢失\",{\"1\":{\"1996\":1}}],[\"协议网络程序\",{\"1\":{\"1981\":1}}],[\"协议是网络层的主要协议\",{\"1\":{\"1955\":1}}],[\"协议簇\",{\"0\":{\"1955\":1}}],[\"差错控制\",{\"1\":{\"1952\":1}}],[\"差了30倍\",{\"1\":{\"196\":1}}],[\"了解都没必要\",{\"1\":{\"2728\":1}}],[\"了解\",{\"0\":{\"2021\":1,\"2201\":1}}],[\"了解springboot开发流程\",{\"1\":{\"69\":1}}],[\"了\",{\"1\":{\"1943\":1,\"1976\":1}}],[\"端口设计\",{\"0\":{\"3138\":1}}],[\"端口为浏览器访问的\",{\"1\":{\"2858\":1}}],[\"端口为\",{\"1\":{\"2858\":1}}],[\"端口以备占用\",{\"1\":{\"2460\":1}}],[\"端口冲突\",{\"0\":{\"2460\":1}}],[\"端口配置\",{\"0\":{\"2457\":1}}],[\"端口\",{\"1\":{\"2449\":1,\"2858\":1}}],[\"端口分类\",{\"0\":{\"1938\":1}}],[\"端口号是8080\",{\"1\":{\"2463\":1}}],[\"端口号是对一个服务的访问场所\",{\"1\":{\"1996\":1}}],[\"端口号>\",{\"1\":{\"1989\":1}}],[\"端口号就是本服务端的端口号\",{\"1\":{\"1975\":1}}],[\"端口号与ip\",{\"1\":{\"1939\":1}}],[\"端口号标识正在计算机上运行的进程\",{\"1\":{\"1937\":1}}],[\"端口号\",{\"0\":{\"1937\":1},\"1\":{\"202\":1,\"1926\":1,\"1990\":1}}],[\"端口号冲突\",{\"0\":{\"202\":1}}],[\"局限性\",{\"0\":{\"2687\":1}}],[\"局域网使用\",{\"1\":{\"1934\":1}}],[\"局部数据修改\",{\"0\":{\"2911\":1}}],[\"局部修改\",{\"1\":{\"2909\":1}}],[\"局部类型推断升级\",{\"0\":{\"2271\":1}}],[\"局部内部类不能使用static修饰\",{\"1\":{\"1212\":1}}],[\"局部内部类和局部变量地位类似\",{\"1\":{\"1212\":1}}],[\"局部内部类可以使用外部方法的局部变量\",{\"1\":{\"1212\":1}}],[\"局部内部类可以使用外部类的成员\",{\"1\":{\"1212\":1}}],[\"局部内部类的特点\",{\"0\":{\"1212\":1}}],[\"局部内部类的使用\",{\"0\":{\"1210\":1}}],[\"局部内部类\",{\"1\":{\"1203\":4,\"2016\":1}}],[\"局部变量声明\",{\"1\":{\"1405\":1}}],[\"局部变量表存放了编译期可知长度的各种基本数据类型\",{\"1\":{\"1298\":1}}],[\"局部变量除形参外\",{\"1\":{\"828\":1}}],[\"局部变量\",{\"1\":{\"828\":1,\"1023\":1,\"1025\":4,\"1387\":1,\"1413\":1,\"1603\":2,\"1604\":2}}],[\"局部\",{\"1\":{\"229\":1}}],[\"亚洲4亿\",{\"1\":{\"1933\":1}}],[\"事务\",{\"0\":{\"2378\":1}}],[\"事实上的国际标准\",{\"1\":{\"1926\":1}}],[\"事件\",{\"1\":{\"1283\":1}}],[\"准动态语言\",{\"1\":{\"1999\":1}}],[\"准确地定位网络上一台或多台主机\",{\"1\":{\"1924\":1}}],[\"准备静态资源\",{\"1\":{\"2448\":1}}],[\"准备\",{\"1\":{\"2027\":1}}],[\"准备遍历\",{\"1\":{\"1594\":1}}],[\"准备工作顺序\",{\"0\":{\"310\":1}}],[\"准备工作\",{\"0\":{\"309\":1}}],[\"准备测试前\",{\"1\":{\"142\":1}}],[\"联合索引可以是上述规则重复n次\",{\"1\":{\"3114\":1}}],[\"联网的底层细节被隐藏在\",{\"1\":{\"1923\":1}}],[\"联系\",{\"0\":{\"1499\":1}}],[\"根标签\",{\"1\":{\"2782\":1}}],[\"根标签名\",{\"1\":{\"2778\":2}}],[\"根目录\",{\"1\":{\"2693\":1}}],[\"根目录后面元素的数量\",{\"1\":{\"1918\":1}}],[\"根据上述设计\",{\"1\":{\"3142\":1}}],[\"根据最小副本集架构搭建副本集\",{\"1\":{\"3137\":1}}],[\"根据uerid查询数据\",{\"1\":{\"3120\":1}}],[\"根据url自动识别\",{\"1\":{\"2426\":1}}],[\"根据query条件查询数据\",{\"1\":{\"3092\":1}}],[\"根据值的范围进行查询\",{\"1\":{\"2937\":1}}],[\"根据多个查询条件进行查询\",{\"1\":{\"2934\":1,\"2995\":1}}],[\"根据多态显示的类是httpservletrequest\",{\"1\":{\"2589\":1}}],[\"根据倒排列表\",{\"1\":{\"2878\":1}}],[\"根据约束文档写xml文档之前\",{\"1\":{\"2778\":1}}],[\"根据其根目录下包含有html和jsp文件\",{\"1\":{\"2748\":1}}],[\"根据其类型\",{\"1\":{\"1025\":1}}],[\"根据name删除数据\",{\"1\":{\"2678\":1}}],[\"根据那么获取对应数据值\",{\"1\":{\"2678\":1}}],[\"根据key删除该键值对\",{\"1\":{\"2654\":1}}],[\"根据key获取值\",{\"1\":{\"2654\":1}}],[\"根据key获取参数值\",{\"1\":{\"2624\":1}}],[\"根据key\",{\"1\":{\"2624\":1}}],[\"根据名称获取参数值\",{\"1\":{\"2621\":2}}],[\"根据不同的查询类型\",{\"1\":{\"2933\":1}}],[\"根据不同的请求方式获取请求参数\",{\"0\":{\"2618\":1}}],[\"根据不同的响应数据类型\",{\"1\":{\"370\":1}}],[\"根据请求方式的不通\",{\"1\":{\"2614\":1}}],[\"根据请求的套接字对象\",{\"1\":{\"1977\":1}}],[\"根据需求\",{\"1\":{\"2563\":1}}],[\"根据需求选择符合要求\",{\"1\":{\"2133\":1}}],[\"根据需求选择合适的子类\",{\"1\":{\"1583\":1}}],[\"根据\",{\"0\":{\"2991\":1},\"1\":{\"2537\":1,\"2984\":2,\"2991\":1}}],[\"根据demo1可以找到要访问的是项目中的哪个servlet类\",{\"1\":{\"2537\":1}}],[\"根据dbtype自动识别\",{\"1\":{\"2426\":1}}],[\"根据web\",{\"1\":{\"2537\":1}}],[\"根据localhost\",{\"1\":{\"2537\":1}}],[\"根据pid找到对应的进程\",{\"1\":{\"2460\":1}}],[\"根据pid杀死任务\",{\"1\":{\"202\":1}}],[\"根据业务需求编写接口\",{\"1\":{\"2407\":1}}],[\"根据orm编程思想\",{\"1\":{\"2351\":1}}],[\"根据学生的年龄进行排序\",{\"1\":{\"2227\":1}}],[\"根据遍历顺序\",{\"1\":{\"2212\":1}}],[\"根据integer参数\",{\"1\":{\"2183\":1}}],[\"根据ip创建\",{\"0\":{\"1964\":1}}],[\"根据程序的上下文\",{\"1\":{\"2117\":1}}],[\"根据传递的信息调用源被代理对象的方法\",{\"1\":{\"2085\":1}}],[\"根据传入的comparator接口子类\",{\"1\":{\"645\":1}}],[\"根据全类名参数创建类的对象\",{\"1\":{\"2004\":1}}],[\"根据指定服务端的\",{\"1\":{\"1969\":1}}],[\"根据指定的第二个参数comparator进行排序\",{\"1\":{\"684\":1}}],[\"根据host创建\",{\"0\":{\"1965\":1}}],[\"根据数据操作单位可以把缓冲流分为\",{\"1\":{\"1827\":1}}],[\"根据数据种类得到操作接口\",{\"1\":{\"288\":1}}],[\"根据操作系统\",{\"1\":{\"1765\":1}}],[\"根据自定义的排序方式进行了排序输出\",{\"1\":{\"1687\":1}}],[\"根据元素的\",{\"1\":{\"1638\":1,\"1654\":1}}],[\"根据此对象的类型\",{\"1\":{\"1340\":1}}],[\"根据定义\",{\"1\":{\"1118\":1}}],[\"根据类创建类的对象\",{\"1\":{\"1011\":1}}],[\"根据类加载器加载目标类\",{\"1\":{\"589\":1}}],[\"根据问题需要\",{\"1\":{\"1004\":1}}],[\"根据switch表达式中的值\",{\"1\":{\"927\":1}}],[\"根据循环条件\",{\"1\":{\"917\":1}}],[\"根据条件查询数据\",{\"0\":{\"3092\":1}}],[\"根据条件\",{\"1\":{\"917\":1}}],[\"根据条件表达式真或假\",{\"1\":{\"911\":1}}],[\"根据运算法则减去一个正数等于加上一个负数\",{\"1\":{\"873\":1}}],[\"根据参数获得ip对象\",{\"1\":{\"1945\":1}}],[\"根据参数列表调用对应的构造器来创建对象\",{\"1\":{\"1074\":1}}],[\"根据参数数组的数据类型不同\",{\"1\":{\"646\":1}}],[\"根据参数2不同的数据类型\",{\"1\":{\"455\":1}}],[\"根据获取的构造器创建类的对象\",{\"1\":{\"629\":1}}],[\"根据换行符来判定\",{\"1\":{\"581\":1,\"1834\":1}}],[\"根据父file对象拼接子文件路径创建文件对象\",{\"1\":{\"538\":1}}],[\"根据父路径和子路径拼接创建文件对象\",{\"1\":{\"538\":1}}],[\"根据文件路径创建文件对象\",{\"1\":{\"538\":1}}],[\"根据年龄比较大小\",{\"1\":{\"500\":1}}],[\"根据空格分割\",{\"1\":{\"434\":1,\"744\":1}}],[\"根据给定正则表达式的匹配拆分此字符串\",{\"1\":{\"434\":1,\"744\":1}}],[\"根据要操作的数据表创建实体类\",{\"1\":{\"343\":1}}],[\"根据要操作的数据类型\",{\"1\":{\"288\":1}}],[\"根据以下规范\",{\"1\":{\"313\":1}}],[\"根据项目需求添加依赖和插件\",{\"1\":{\"306\":1}}],[\"根据进程pid查询进程名称\",{\"1\":{\"202\":1}}],[\"根据加载的东西不同\",{\"1\":{\"137\":1}}],[\"根据产品原型输出界面效果图\",{\"1\":{\"22\":1}}],[\"王铭\",{\"1\":{\"1908\":1}}],[\"追加效果\",{\"1\":{\"1890\":1}}],[\"追加写\",{\"1\":{\"1812\":1}}],[\"刘建辰\",{\"1\":{\"1878\":1}}],[\"顾名思义\",{\"1\":{\"1863\":1}}],[\"融合了目前人类使用的所有字符\",{\"1\":{\"1861\":1}}],[\"融合了更多的中文文字符号\",{\"1\":{\"1861\":1}}],[\"国际标准码\",{\"1\":{\"1861\":1}}],[\"欧洲码表\",{\"1\":{\"1861\":1}}],[\"拉丁码表\",{\"1\":{\"1861\":1}}],[\"美国标准信息交换码\",{\"1\":{\"1861\":1}}],[\"美观\",{\"1\":{\"254\":1}}],[\"早期的java只提供了一个file类来访问文件系统\",{\"1\":{\"1915\":1}}],[\"早期由来是电信号\",{\"1\":{\"1860\":1}}],[\"早绑定\",{\"1\":{\"1159\":2}}],[\"早绑定与晚绑定\",{\"0\":{\"1159\":1}}],[\"综合示例\",{\"0\":{\"1858\":1}}],[\"视频直播\",{\"1\":{\"3027\":1}}],[\"视频播放\",{\"1\":{\"1957\":1}}],[\"视频\",{\"1\":{\"1838\":2}}],[\"视图中无法显示数据库列表\",{\"1\":{\"3148\":1}}],[\"视图\",{\"1\":{\"2728\":1,\"2754\":1,\"2763\":1}}],[\"视图层\",{\"0\":{\"1292\":1}}],[\"视图模型层\",{\"1\":{\"1289\":1}}],[\"套接字用于连接客户端和服务器\",{\"1\":{\"1996\":1}}],[\"套接字将被绑定到通配符地址\",{\"1\":{\"1985\":2}}],[\"套接字\",{\"1\":{\"1966\":1}}],[\"套接字被关闭后\",{\"1\":{\"1966\":1}}],[\"套接\",{\"1\":{\"1827\":1,\"1846\":1,\"1854\":1,\"1875\":2}}],[\"套餐管理\",{\"1\":{\"399\":1}}],[\"套餐菜品关系\",{\"1\":{\"379\":1}}],[\"套餐id\",{\"1\":{\"379\":1,\"383\":1,\"385\":1}}],[\"套餐价格\",{\"1\":{\"378\":1}}],[\"套餐名称\",{\"1\":{\"378\":1}}],[\"套餐分类\",{\"1\":{\"376\":1}}],[\"套餐表\",{\"0\":{\"378\":1},\"1\":{\"374\":1}}],[\"套餐\",{\"1\":{\"374\":1,\"378\":1,\"396\":1,\"399\":1}}],[\"缓冲池\",{\"1\":{\"2416\":2}}],[\"缓冲流消耗的时间\",{\"1\":{\"1838\":1}}],[\"缓冲流要\",{\"1\":{\"1827\":1}}],[\"缓冲流的类\",{\"0\":{\"1827\":1}}],[\"缓冲流的作用是提高流的读取\",{\"1\":{\"1825\":1}}],[\"缓冲流是处理流的一种\",{\"1\":{\"1825\":1}}],[\"缓冲流\",{\"0\":{\"1824\":1,\"1836\":1,\"1837\":1}}],[\"缓存\",{\"1\":{\"336\":1,\"2030\":1,\"3036\":1}}],[\"缓存技术\",{\"1\":{\"29\":1}}],[\"造流\",{\"1\":{\"1823\":1,\"1858\":1}}],[\"造文件\",{\"1\":{\"1823\":1,\"1858\":1}}],[\"房子fr是null\",{\"1\":{\"1804\":1}}],[\"创造流\",{\"1\":{\"1836\":2}}],[\"创造filereader输入流\",{\"1\":{\"1804\":1}}],[\"创建x\",{\"0\":{\"3211\":1}}],[\"创建普通用户可以在没有开启认证的时候添加\",{\"1\":{\"3197\":1}}],[\"创建普通用户\",{\"0\":{\"3197\":1}}],[\"创建专门用来管理admin库的账号myadmin\",{\"1\":{\"3196\":1}}],[\"创建admin\",{\"0\":{\"3196\":1}}],[\"创建application\",{\"1\":{\"307\":1}}],[\"创建用户后\",{\"1\":{\"3202\":1}}],[\"创建用户示例\",{\"0\":{\"3194\":1}}],[\"创建用户需要使用db\",{\"1\":{\"3193\":1}}],[\"创建或选择article库\",{\"1\":{\"3168\":1}}],[\"创建仲裁节点\",{\"0\":{\"3144\":1}}],[\"创建副本节点\",{\"0\":{\"3143\":1}}],[\"创建副本集\",{\"0\":{\"3135\":1}}],[\"创建主节点的目录和相关文件\",{\"1\":{\"3142\":1}}],[\"创建主节点\",{\"0\":{\"3142\":1}}],[\"创建节点\",{\"0\":{\"3141\":1}}],[\"创建复合索引\",{\"0\":{\"3113\":1}}],[\"创建单字段索引\",{\"0\":{\"3112\":1}}],[\"创建集合\",{\"0\":{\"3067\":1}}],[\"创建集合对象时传入类型实参\",{\"1\":{\"1700\":1}}],[\"创建集合对象\",{\"1\":{\"1594\":1,\"2355\":1,\"2405\":1}}],[\"创建强求体\",{\"1\":{\"3018\":1,\"3019\":1}}],[\"创建范围查询的builder\",{\"1\":{\"3002\":1,\"3003\":1}}],[\"创建boolquerybuilder对象\",{\"1\":{\"2996\":1,\"2997\":1}}],[\"创建bookcontroller类\",{\"1\":{\"363\":1}}],[\"创建bookserviceimpl作为对应业务层接口的实现类\",{\"1\":{\"358\":1}}],[\"创建bookservice作为业务接口\",{\"1\":{\"358\":1}}],[\"创建请求对象\",{\"1\":{\"2980\":1,\"2983\":1,\"2984\":1,\"2986\":1,\"2987\":1,\"2991\":1,\"2992\":1,\"2993\":1,\"2997\":1,\"3000\":1,\"3003\":1,\"3006\":1,\"3008\":1,\"3010\":1,\"3015\":1,\"3019\":1}}],[\"创建es\",{\"1\":{\"2972\":1,\"2975\":1,\"2977\":1,\"2978\":1,\"2980\":1,\"2983\":1,\"2984\":1,\"2986\":1,\"2987\":1,\"2991\":1,\"2992\":1,\"2993\":1,\"2997\":1,\"3000\":1,\"3003\":1,\"3006\":1,\"3008\":1,\"3010\":1,\"3015\":1,\"3019\":1}}],[\"创建estest类用于测试javaapi\",{\"1\":{\"2969\":1}}],[\"创建客户端对象用于访问es服务器\",{\"1\":{\"2972\":1}}],[\"创建完索引\",{\"1\":{\"2962\":1}}],[\"创建完成后\",{\"1\":{\"81\":1}}],[\"创建映射\",{\"0\":{\"2962\":1}}],[\"创建文档\",{\"0\":{\"2898\":1}}],[\"创建文件输入流\",{\"1\":{\"2364\":1}}],[\"创建文件对象\",{\"1\":{\"1792\":1,\"1836\":1}}],[\"创建文件目录\",{\"1\":{\"556\":1}}],[\"创建文件\",{\"0\":{\"554\":1},\"1\":{\"131\":1}}],[\"创建方式\",{\"1\":{\"2882\":1}}],[\"创建索引请求对象\",{\"1\":{\"2975\":1}}],[\"创建索引库的分片数默认\",{\"1\":{\"2885\":1}}],[\"创建索引就等同于创建数据库\",{\"1\":{\"2882\":1}}],[\"创建索引\",{\"0\":{\"2882\":1,\"2975\":1,\"3110\":1},\"1\":{\"2975\":2}}],[\"创建new\",{\"1\":{\"2801\":1}}],[\"创建对应的servlet实现类的对象\",{\"1\":{\"2583\":1}}],[\"创建对象时\",{\"1\":{\"1074\":1,\"1700\":1}}],[\"创建对象时利用传参进行属性的初始化\",{\"1\":{\"1068\":1}}],[\"创建对象数组\",{\"1\":{\"1018\":1}}],[\"创建对象\",{\"0\":{\"1011\":1,\"1067\":1},\"1\":{\"1019\":1}}],[\"创建连接等初始化的工作\",{\"1\":{\"2548\":1}}],[\"创建连接池\",{\"1\":{\"2424\":1}}],[\"创建web项目\",{\"0\":{\"2480\":1,\"2481\":1},\"1\":{\"2530\":1}}],[\"创建optional类\",{\"0\":{\"2251\":1}}],[\"创建无限流\",{\"1\":{\"2201\":1}}],[\"创建无限流stream\",{\"0\":{\"2201\":1}}],[\"创建代理对象\",{\"1\":{\"2090\":1}}],[\"创建代理类的对象\",{\"1\":{\"2082\":1}}],[\"创建被代理类的对象\",{\"1\":{\"2082\":1}}],[\"创建运行时类的对象\",{\"1\":{\"2058\":1,\"2063\":1}}],[\"创建服务器套接字对象\",{\"1\":{\"1977\":1}}],[\"创建服务端的serversocket\",{\"1\":{\"1973\":1}}],[\"创建的索引是文档的id\",{\"1\":{\"2874\":1}}],[\"创建的同时会自动向服务器方发起连接\",{\"1\":{\"1970\":1}}],[\"创建的工程\",{\"1\":{\"70\":1}}],[\"创建写出流\",{\"1\":{\"1904\":1,\"1909\":1}}],[\"创建输入流\",{\"1\":{\"1903\":1,\"1908\":1}}],[\"创建输入流和输出流的对象\",{\"1\":{\"1817\":1}}],[\"创建反序列化流\",{\"1\":{\"1898\":1}}],[\"创建序列化流\",{\"1\":{\"1898\":2}}],[\"创建流\",{\"1\":{\"1878\":1,\"1879\":1}}],[\"创建流对象\",{\"0\":{\"1800\":1},\"1\":{\"1792\":1}}],[\"创建打印输出流\",{\"1\":{\"1873\":1}}],[\"创建file类的对象\",{\"1\":{\"1817\":1}}],[\"创建futuretask的对象\",{\"1\":{\"1561\":1}}],[\"创建硬盘文件\",{\"0\":{\"1770\":1}}],[\"创建泛型数组\",{\"1\":{\"1721\":1}}],[\"创建迭代器时\",{\"1\":{\"1709\":1}}],[\"创建了代理类proxyinstance\",{\"1\":{\"2097\":1}}],[\"创建了node对象\",{\"1\":{\"1625\":1}}],[\"创建了接口的匿名实现类的匿名对象\",{\"1\":{\"1264\":1}}],[\"创建了接口的匿名实现类的非匿名对象\",{\"1\":{\"1264\":1}}],[\"创建了接口的非匿名实现类的匿名对象\",{\"1\":{\"1264\":1}}],[\"创建iterator对象\",{\"1\":{\"1594\":1}}],[\"创建线程池\",{\"1\":{\"1568\":1,\"1569\":1}}],[\"创建线程并指定线程实例名\",{\"1\":{\"1468\":1}}],[\"创建cookie\",{\"0\":{\"2798\":1}}],[\"创建cookie对象\",{\"0\":{\"2793\":1},\"1\":{\"2791\":1,\"2798\":1}}],[\"创建copy方法\",{\"0\":{\"1823\":1}}],[\"创建config包\",{\"1\":{\"131\":1}}],[\"创建controller\",{\"0\":{\"85\":1},\"1\":{\"370\":1}}],[\"创建callable接口实现类的对象\",{\"1\":{\"1562\":1}}],[\"创建新的线程\",{\"1\":{\"1494\":1}}],[\"创建新的thread对象\",{\"1\":{\"1468\":2}}],[\"创建多个线程\",{\"0\":{\"1494\":1}}],[\"创建多线程示例\",{\"0\":{\"1472\":1}}],[\"创建多线程的步骤\",{\"0\":{\"1471\":1}}],[\"创建多线程的方式之一\",{\"1\":{\"1464\":1}}],[\"创建实现类的对象\",{\"1\":{\"1491\":1,\"1492\":1}}],[\"创建实体类和mapper接口\",{\"1\":{\"272\":1}}],[\"创建子线程对象\",{\"1\":{\"1472\":1}}],[\"创建子类的对象\",{\"1\":{\"1143\":1}}],[\"创建子类对象时\",{\"1\":{\"1119\":1}}],[\"创建test类\",{\"0\":{\"2007\":1}}],[\"创建thread对象\",{\"1\":{\"1561\":1,\"1562\":1}}],[\"创建thread类的对象\",{\"1\":{\"1491\":1,\"1492\":1}}],[\"创建thread类的子类的对象\",{\"1\":{\"1471\":1,\"1472\":1}}],[\"创建tostring等\",{\"1\":{\"344\":1}}],[\"创建一个仅能对article库进行读写的用户\",{\"1\":{\"3197\":1}}],[\"创建一个存放数据的目录\",{\"1\":{\"3041\":1}}],[\"创建一个路由\",{\"0\":{\"2468\":1},\"1\":{\"2468\":1}}],[\"创建一个optional实例\",{\"1\":{\"2254\":1}}],[\"创建一个obj也可以\",{\"1\":{\"1512\":1}}],[\"创建一个空的\",{\"1\":{\"2253\":1}}],[\"创建一个\",{\"1\":{\"2252\":1}}],[\"创建一个员工对象\",{\"1\":{\"2157\":1}}],[\"创建一个类\",{\"1\":{\"2101\":1}}],[\"创建一个对象\",{\"1\":{\"2085\":1}}],[\"创建一个函数\",{\"1\":{\"2004\":1}}],[\"创建一个服务器端套接字\",{\"1\":{\"1973\":1}}],[\"创建一个流套接字并将其连接到指定主机上的指定端口号\",{\"1\":{\"1965\":1}}],[\"创建一个流套接字并将其连接到指定ip\",{\"1\":{\"1964\":1}}],[\"创建一个文件\",{\"1\":{\"1920\":1}}],[\"创建一个目录\",{\"1\":{\"1920\":1}}],[\"创建一个线程池\",{\"1\":{\"1567\":1}}],[\"创建一个只有一个线程的线程池\",{\"1\":{\"1567\":1}}],[\"创建一个可重用固定线程数的线程池\",{\"1\":{\"1567\":1}}],[\"创建一个可根据需要创建新线程的线程池\",{\"1\":{\"1567\":1}}],[\"创建一个实现接口invocationhandler的类\",{\"1\":{\"2091\":1}}],[\"创建一个实现callable的实现类\",{\"1\":{\"1562\":1}}],[\"创建一个实现了runnable接口的类\",{\"1\":{\"1491\":1,\"1492\":1}}],[\"创建一个继承于thread类的子类\",{\"1\":{\"1471\":1,\"1472\":1}}],[\"创建一个季节枚举类\",{\"1\":{\"1373\":1}}],[\"创建一个计算代码执行时间的类\",{\"1\":{\"1251\":1}}],[\"创建枚举类\",{\"0\":{\"1373\":1}}],[\"创建细节\",{\"1\":{\"1372\":1}}],[\"创建\",{\"1\":{\"1368\":1}}],[\"创建异常的语法\",{\"0\":{\"1360\":1}}],[\"创建好索引后\",{\"1\":{\"2898\":1}}],[\"创建好的异常对象不抛出对程序没有任何影响\",{\"1\":{\"1319\":1}}],[\"创建好springboot项目后\",{\"1\":{\"84\":1}}],[\"创建抽象类的匿名类\",{\"0\":{\"1249\":1}}],[\"创建玩对象后\",{\"1\":{\"1011\":1}}],[\"创建数组对象会在内存中开辟一整块连续的空间\",{\"1\":{\"961\":1}}],[\"创建数据库\",{\"1\":{\"3057\":1}}],[\"创建数据库表需要设置字段名称\",{\"1\":{\"2961\":1}}],[\"创建数据表实现类\",{\"0\":{\"2408\":1}}],[\"创建数据表实现接口\",{\"0\":{\"2407\":1}}],[\"创建数据表book\",{\"0\":{\"342\":1}}],[\"创建数据报套接字\",{\"1\":{\"1985\":1}}],[\"创建数据报套接字并将其绑定到本地主机上的指定端口\",{\"1\":{\"1985\":1}}],[\"创建数据对象\",{\"0\":{\"131\":1},\"1\":{\"2357\":1}}],[\"创建变量\",{\"0\":{\"784\":1}}],[\"创建比较器\",{\"1\":{\"750\":1}}],[\"创建模糊查询构造器\",{\"1\":{\"3005\":1}}],[\"创建模式器\",{\"1\":{\"750\":1}}],[\"创建模块\",{\"0\":{\"340\":1}}],[\"创建preparedstatement对象\",{\"0\":{\"2319\":1}}],[\"创建proxyinstance时\",{\"1\":{\"2097\":1}}],[\"创建properties类的对象\",{\"1\":{\"1692\":1}}],[\"创建person类的class实例\",{\"1\":{\"2037\":1}}],[\"创建person类的对象\",{\"1\":{\"2009\":1}}],[\"创建person对象\",{\"1\":{\"602\":1,\"2010\":1,\"2038\":1}}],[\"创建pattern对象\",{\"1\":{\"752\":1}}],[\"创建pattern类的实例\",{\"1\":{\"739\":1}}],[\"创建容器对象时\",{\"1\":{\"656\":1}}],[\"创建失败\",{\"1\":{\"555\":1}}],[\"创建优秀的\",{\"1\":{\"461\":1}}],[\"创建searchsourcebuilder\",{\"1\":{\"3005\":1,\"3006\":1}}],[\"创建session时\",{\"1\":{\"2820\":1}}],[\"创建session对象\",{\"1\":{\"2675\":1}}],[\"创建servlet实现类\",{\"0\":{\"2531\":1},\"1\":{\"2529\":1}}],[\"创建serversocket对象\",{\"0\":{\"1975\":1}}],[\"创建stream\",{\"0\":{\"2200\":1},\"1\":{\"2192\":1}}],[\"创建stringbuffer对象\",{\"0\":{\"441\":1}}],[\"创建string\",{\"1\":{\"401\":1}}],[\"创建socket对象\",{\"1\":{\"1972\":1}}],[\"创建socket\",{\"1\":{\"1969\":1}}],[\"创建springboot会产生很多无意义的文件\",{\"1\":{\"79\":1}}],[\"创建人和类搜索路径class\",{\"1\":{\"2733\":1}}],[\"创建人\",{\"1\":{\"375\":1,\"376\":1,\"377\":1,\"378\":1,\"379\":1,\"380\":1,\"382\":1}}],[\"创建时间\",{\"1\":{\"375\":1,\"376\":1,\"377\":1,\"378\":1,\"379\":1,\"380\":1,\"382\":1,\"383\":1}}],[\"创建包\",{\"1\":{\"358\":2,\"363\":1}}],[\"创建包config\",{\"1\":{\"350\":1}}],[\"创建module\",{\"0\":{\"2483\":1,\"2489\":1,\"2493\":1}}],[\"创建myroot\",{\"0\":{\"3195\":1}}],[\"创建myannotations注解\",{\"1\":{\"1420\":1}}],[\"创建mycomparator类的对象\",{\"1\":{\"645\":1}}],[\"创建manifest\",{\"1\":{\"2743\":1}}],[\"创建matcher类的实例\",{\"1\":{\"739\":1}}],[\"创建mapper接口\",{\"1\":{\"283\":1}}],[\"创建mpconfig用来配置分页相关的拦截器\",{\"1\":{\"350\":1}}],[\"创建所有配置\",{\"1\":{\"310\":1}}],[\"创建配置文件\",{\"1\":{\"261\":1}}],[\"创建日志对象\",{\"1\":{\"242\":1}}],[\"创建测试类\",{\"1\":{\"181\":1}}],[\"创建类的对象\",{\"1\":{\"1011\":1,\"1012\":1}}],[\"创建类r作为返回结果模型类\",{\"1\":{\"370\":1}}],[\"创建类\",{\"0\":{\"1010\":1},\"1\":{\"129\":1,\"1012\":1}}],[\"创建工程\",{\"0\":{\"303\":1},\"1\":{\"71\":1,\"81\":1}}],[\"创建项目时springboot自动导入了\",{\"1\":{\"181\":1}}],[\"创建项目的过程中\",{\"1\":{\"78\":1}}],[\"创建项目\",{\"0\":{\"70\":1,\"2530\":1},\"1\":{\"29\":1,\"57\":1,\"2529\":1}}],[\"尤其是较为重要的class\",{\"1\":{\"2733\":1}}],[\"尤其是自定义的类\",{\"1\":{\"1646\":1,\"2226\":1}}],[\"尤其注意\",{\"1\":{\"1797\":1}}],[\"典型实现\",{\"1\":{\"1784\":1,\"1785\":1,\"1787\":1,\"1788\":1,\"1791\":1}}],[\"节点成员内部认证\",{\"1\":{\"3209\":1}}],[\"节点成员的host都是区域网ip\",{\"1\":{\"3164\":1}}],[\"节点的host都是区域网ip\",{\"1\":{\"3164\":1}}],[\"节点ip\",{\"1\":{\"3159\":1}}],[\"节点id\",{\"1\":{\"3159\":1}}],[\"节点名字会自动设置为本地域名\",{\"1\":{\"3142\":1}}],[\"节点\",{\"1\":{\"3127\":1,\"3130\":1}}],[\"节点流的方法\",{\"0\":{\"1796\":1}}],[\"节点流是流基类的典型实现\",{\"1\":{\"1795\":1}}],[\"节点流是最基本的实现\",{\"1\":{\"1791\":1}}],[\"节点流介绍\",{\"0\":{\"1795\":1}}],[\"节点流或处理流\",{\"1\":{\"1780\":1}}],[\"节点流或其他处理流\",{\"1\":{\"1775\":1}}],[\"节点流和处理流\",{\"0\":{\"1778\":1}}],[\"节点流\",{\"0\":{\"1779\":1,\"1791\":1,\"1794\":1},\"1\":{\"1775\":1,\"1836\":1}}],[\"节省内存\",{\"1\":{\"1622\":1}}],[\"光盘等存储设备中\",{\"1\":{\"1774\":1}}],[\"光盘等存储设备的数据\",{\"1\":{\"1774\":1}}],[\"磁盘\",{\"1\":{\"1774\":1}}],[\"流进行了终止操作后\",{\"1\":{\"2207\":1}}],[\"流套接字\",{\"1\":{\"1962\":1}}],[\"流量控制\",{\"1\":{\"1952\":1}}],[\"流资源的关闭\",{\"1\":{\"1816\":1}}],[\"流操作的基本步骤\",{\"0\":{\"1792\":1}}],[\"流的关闭\",{\"1\":{\"1804\":1}}],[\"流的基类都是节点流\",{\"1\":{\"1782\":1}}],[\"流的基类\",{\"0\":{\"1781\":1},\"1\":{\"1820\":1}}],[\"流的分类\",{\"0\":{\"1775\":1}}],[\"流的接口\",{\"1\":{\"1773\":1}}],[\"流\",{\"1\":{\"1773\":3}}],[\"流程控制方式采用结构化程序设计中规定的三种基本流程结构\",{\"1\":{\"917\":1}}],[\"流程控制语句是用来控制程序中各语句执行顺序的语句\",{\"1\":{\"917\":1}}],[\"流程控制\",{\"0\":{\"917\":1}}],[\"狭义文件或文件\",{\"1\":{\"1760\":1}}],[\"广义文件\",{\"1\":{\"1760\":1}}],[\"场景较多\",{\"1\":{\"3037\":1}}],[\"场景\",{\"1\":{\"1749\":1}}],[\"误区\",{\"0\":{\"1730\":1,\"1808\":1}}],[\"部分集合和集群\",{\"1\":{\"3184\":1}}],[\"部分保留\",{\"0\":{\"1726\":1}}],[\"部署了多个web项目\",{\"1\":{\"2808\":1}}],[\"部署模式介绍\",{\"0\":{\"2500\":1}}],[\"部署项目\",{\"1\":{\"2499\":1}}],[\"部署到tomcat\",{\"1\":{\"2484\":1}}],[\"部署时的项目目录结构\",{\"0\":{\"2473\":1}}],[\"部署环境\",{\"0\":{\"205\":1}}],[\"擦除泛型\",{\"0\":{\"1723\":1}}],[\"健壮\",{\"1\":{\"1703\":1,\"2851\":1}}],[\"健壮性\",{\"1\":{\"765\":1}}],[\"药品都要辨别\",{\"1\":{\"1703\":1}}],[\"药品标签\",{\"1\":{\"1702\":1}}],[\"好比不用每回拿商品\",{\"1\":{\"1703\":1}}],[\"好比商品\",{\"1\":{\"1702\":1}}],[\"好大雪\",{\"1\":{\"1373\":1}}],[\"好大雨\",{\"1\":{\"1373\":1}}],[\"桶中的node被树化时最小的hash表容量\",{\"1\":{\"1680\":1}}],[\"旧元素指向新元素\",{\"1\":{\"1678\":1}}],[\"旧的时间api\",{\"0\":{\"459\":1}}],[\"旧的不要再用了\",{\"1\":{\"457\":1}}],[\"七上八下\",{\"1\":{\"1678\":1}}],[\"首要任务就是判断请求类型\",{\"1\":{\"2560\":1,\"2567\":1}}],[\"首次调用put\",{\"1\":{\"1678\":1}}],[\"首先要用分词系统将文档自动切分成单词序列\",{\"1\":{\"2879\":1}}],[\"首先要在一个\",{\"1\":{\"1993\":1}}],[\"首先需要注意\",{\"1\":{\"2375\":1}}],[\"首先\",{\"1\":{\"1674\":1,\"2085\":1}}],[\"首先调用元素所在类的hashcode\",{\"1\":{\"1643\":1}}],[\"首先读取manifest\",{\"1\":{\"201\":1}}],[\"映射和设置\",{\"1\":{\"2977\":1}}],[\"映射的效果\",{\"0\":{\"2966\":1}}],[\"映射信息通过json格式的请求体添加\",{\"1\":{\"2963\":1}}],[\"映射类似于数据库\",{\"1\":{\"2961\":1}}],[\"映射\",{\"0\":{\"2214\":1,\"2961\":1},\"1\":{\"2206\":1,\"2890\":1}}],[\"映射关系的数据\",{\"1\":{\"1661\":1}}],[\"映射操作\",{\"1\":{\"57\":1}}],[\"抗碰撞性\",{\"1\":{\"1651\":1}}],[\"哈希索引\",{\"1\":{\"3107\":1}}],[\"哈希冲突\",{\"0\":{\"1652\":1},\"1\":{\"1651\":1,\"1652\":1}}],[\"哈希位数越多\",{\"1\":{\"1651\":1}}],[\"哈希函数的安全性肯定是个相对概念\",{\"1\":{\"1651\":1}}],[\"哈希值的长度是固定的\",{\"1\":{\"1651\":1}}],[\"哈希算法\",{\"0\":{\"1651\":1},\"1\":{\"1651\":1}}],[\"鉴于java中数组用来存储数据的局限性\",{\"1\":{\"1610\":1}}],[\"练习\",{\"0\":{\"1605\":1}}],[\"迭代\",{\"0\":{\"2202\":1}}],[\"迭代顺序与\",{\"1\":{\"1682\":1}}],[\"迭代器执行的原理\",{\"0\":{\"1598\":1}}],[\"迭代器模式\",{\"1\":{\"1587\":1}}],[\"迭代器\",{\"0\":{\"1587\":1}}],[\"迭代条件\",{\"1\":{\"931\":1,\"932\":3,\"935\":3,\"940\":1}}],[\"凡是实现serializable接口的类都有一个表示序列化版本标识符的静态变量\",{\"1\":{\"1910\":1}}],[\"凡是涉及到对多个数据进行操作时\",{\"1\":{\"1576\":1}}],[\"凡是可以使用三元运算符的地方\",{\"1\":{\"915\":1}}],[\"思路\",{\"1\":{\"1564\":1}}],[\"思想\",{\"1\":{\"1250\":1}}],[\"总和\",{\"0\":{\"2443\":1}}],[\"总和为\",{\"1\":{\"1562\":1}}],[\"总是2的n次幂\",{\"1\":{\"1680\":1}}],[\"总能找到唯一的\",{\"1\":{\"1661\":1}}],[\"总结操作的方法\",{\"0\":{\"2206\":1}}],[\"总结\",{\"0\":{\"89\":1,\"106\":1,\"161\":1,\"201\":1,\"214\":1,\"1057\":1,\"1075\":1,\"1084\":1,\"1546\":1,\"1622\":1,\"1739\":1,\"1749\":1,\"1865\":1,\"2224\":1,\"2282\":1,\"2538\":1,\"2590\":1,\"2625\":1,\"2632\":1,\"2764\":1,\"2810\":1,\"2828\":1},\"1\":{\"448\":1,\"1343\":1}}],[\"⑤文本\",{\"1\":{\"2772\":1}}],[\"⑤填充占位符\",{\"1\":{\"2318\":1}}],[\"⑤使用代理对象调用被代理类中的同名方法\",{\"1\":{\"2085\":1}}],[\"⑤将futuretask的对象作为参数传递到thread类的构造器中\",{\"1\":{\"1561\":1}}],[\"⑤在代码块中赋值\",{\"1\":{\"1026\":1}}],[\"唤醒等待该对象监控权的一个\",{\"1\":{\"1553\":1}}],[\"唤醒后等待重新获得对监视器的所有权后才能继续执行\",{\"1\":{\"1551\":1}}],[\"令当前线程挂起并放弃cpu\",{\"1\":{\"1551\":1}}],[\"某些destory方法无法生效\",{\"1\":{\"2456\":1}}],[\"某些特定的数据在内存空间里只有一份\",{\"1\":{\"1223\":1}}],[\"某个资源可以有多个过滤器时\",{\"1\":{\"2704\":1}}],[\"某个servlet实现类\",{\"1\":{\"2613\":1}}],[\"某个属性的类型是其他类\",{\"1\":{\"1905\":1}}],[\"某个值不是int\",{\"1\":{\"1707\":1}}],[\"某对象\",{\"1\":{\"1552\":1}}],[\"某计算机系统中只有一台打印机和一台输入\",{\"1\":{\"1542\":1}}],[\"死锁解析\",{\"0\":{\"1548\":1}}],[\"死锁的实例\",{\"0\":{\"1547\":1}}],[\"死锁产生的具体原因\",{\"0\":{\"1543\":1}}],[\"死锁示例\",{\"0\":{\"1542\":1}}],[\"死锁检测\",{\"1\":{\"1541\":1}}],[\"死锁介绍\",{\"0\":{\"1540\":1}}],[\"死亡\",{\"1\":{\"1368\":1,\"1501\":1}}],[\"性能和可靠性的级别\",{\"1\":{\"3072\":1}}],[\"性能是非常差的\",{\"1\":{\"2850\":1}}],[\"性能调优\",{\"1\":{\"2520\":1}}],[\"性能更好\",{\"1\":{\"1531\":1}}],[\"性别\",{\"1\":{\"375\":1,\"381\":1,\"382\":1,\"1368\":1}}],[\"明确多线程运行代码中是否有多条语句操作共享数据\",{\"1\":{\"1525\":1}}],[\"明确多个线程是否有共享数据\",{\"1\":{\"1525\":1}}],[\"明确哪些代码是多线程运行的代码\",{\"1\":{\"1525\":1}}],[\"哪吒\",{\"1\":{\"2325\":1}}],[\"哪怕对象已经创建好了\",{\"1\":{\"1522\":1}}],[\"哪个对象调用或者哪个对象正在创建\",{\"1\":{\"1084\":1}}],[\"哪个判断和执行语句声明在上面还是下面\",{\"1\":{\"924\":1}}],[\"买票问题解决示例\",{\"0\":{\"1512\":1,\"1520\":1}}],[\"锁的补充\",{\"0\":{\"1549\":1}}],[\"锁提供了对共享资源的独占访问\",{\"1\":{\"1530\":1}}],[\"锁就被去掉\",{\"1\":{\"1523\":1}}],[\"锁\",{\"1\":{\"1511\":1,\"1549\":1}}],[\"俗称\",{\"1\":{\"1511\":1}}],[\"电子设备\",{\"1\":{\"2449\":1}}],[\"电子打印\",{\"1\":{\"1507\":1}}],[\"电脑上写的程序最终要放到别人的服务器上去运行\",{\"1\":{\"223\":1}}],[\"卖票问题\",{\"0\":{\"1507\":1}}],[\"钱的数目是够的\",{\"1\":{\"1506\":2}}],[\"便不再能进行全文检索\",{\"1\":{\"2945\":1}}],[\"便不可在以后的网络连接中使用\",{\"1\":{\"1966\":1}}],[\"便进入运行状态\",{\"1\":{\"1501\":1}}],[\"便于资源的统一利用\",{\"1\":{\"2750\":1}}],[\"便于线程管理\",{\"1\":{\"1565\":1}}],[\"便于功能的扩展\",{\"1\":{\"1114\":1}}],[\"便于管理\",{\"1\":{\"1087\":1}}],[\"便于修改\",{\"1\":{\"1057\":1}}],[\"便于外界调用\",{\"1\":{\"1053\":1}}],[\"疑问\",{\"1\":{\"1493\":1}}],[\"共分为三个部分\",{\"1\":{\"2634\":1}}],[\"共享一些数据\",{\"1\":{\"2653\":1}}],[\"共享一个num变量\",{\"1\":{\"1492\":1}}],[\"共享硬件\",{\"1\":{\"1924\":1}}],[\"共享数据\",{\"1\":{\"1511\":1,\"2681\":1}}],[\"共享成员变量\",{\"0\":{\"1495\":1}}],[\"共有两种连接方式\",{\"1\":{\"3218\":1}}],[\"共有4种访问模式\",{\"1\":{\"1886\":1}}],[\"共有四种获取class类的实例的方式\",{\"1\":{\"585\":1}}],[\"共有11张表\",{\"1\":{\"374\":1}}],[\"低优先级只是获得调度的概率低\",{\"1\":{\"1488\":1}}],[\"低优先级的线程才执行\",{\"1\":{\"1487\":1}}],[\"低耦合\",{\"1\":{\"1052\":1}}],[\"抢占式\",{\"0\":{\"1485\":1}}],[\"释放连接引起的大量性能开销\",{\"1\":{\"2419\":1}}],[\"释放线路\",{\"1\":{\"1969\":1}}],[\"释放锁\",{\"0\":{\"1535\":1},\"1\":{\"1532\":1}}],[\"释放锁的操作\",{\"0\":{\"1526\":1}}],[\"释放当次执行权\",{\"1\":{\"1481\":1}}],[\"释放当前cpu的执行权\",{\"1\":{\"1479\":1}}],[\"释放本次的执行权\",{\"1\":{\"1481\":1}}],[\"睡眠线程\",{\"1\":{\"1481\":1}}],[\"睡眠\",{\"1\":{\"1479\":1}}],[\"统计所有记录数\",{\"1\":{\"3095\":1}}],[\"统计查询使用count\",{\"1\":{\"3095\":1}}],[\"统计查询\",{\"0\":{\"3095\":1}}],[\"统计信息\",{\"1\":{\"2908\":1,\"2926\":1}}],[\"统称为子线程\",{\"1\":{\"1465\":1}}],[\"统一的连接管理\",{\"1\":{\"2419\":1}}],[\"统一资源命名\",{\"1\":{\"1995\":1}}],[\"统一资源标识符\",{\"1\":{\"1995\":1,\"2597\":1}}],[\"统一资源定位符\",{\"1\":{\"1988\":1,\"1995\":1,\"2597\":1}}],[\"统一实现抽象方法\",{\"1\":{\"1380\":1}}],[\"统一视为obj类型\",{\"1\":{\"656\":1}}],[\"统一为json对象\",{\"1\":{\"368\":1}}],[\"统一响应格式\",{\"1\":{\"311\":1}}],[\"统一管理时\",{\"1\":{\"164\":1}}],[\"统一版本管理\",{\"1\":{\"101\":1}}],[\"统一依赖管理\",{\"0\":{\"90\":1}}],[\"护线程是用来服务用户线程的\",{\"1\":{\"1463\":1}}],[\"守护线程\",{\"1\":{\"1463\":1}}],[\"占用的内存没有及时释放\",{\"1\":{\"1458\":1}}],[\"占位符读取maven对应的配置属性值\",{\"1\":{\"236\":1}}],[\"泄露\",{\"1\":{\"1458\":1}}],[\"临时的\",{\"1\":{\"1450\":1}}],[\"临时属性一般不用\",{\"1\":{\"214\":1}}],[\"临时属性失效\",{\"1\":{\"213\":1}}],[\"临时属性的优先级高于配置文件\",{\"1\":{\"211\":1}}],[\"临时属性配置\",{\"0\":{\"209\":1}}],[\"硬盘上没有这个文件也可以\",{\"1\":{\"1762\":1}}],[\"硬盘才是储存数据的\",{\"1\":{\"1448\":1}}],[\"硬件\",{\"1\":{\"57\":1}}],[\"函数的每次操作都会将参数映射成一个新的元素\",{\"1\":{\"2215\":1}}],[\"函数返回的是一个对象\",{\"1\":{\"2169\":1}}],[\"函数体直接在使用的时候定义\",{\"1\":{\"2136\":1}}],[\"函数名组成\",{\"1\":{\"2135\":1}}],[\"函数接口只有一个方法\",{\"1\":{\"2115\":1}}],[\"函数式接口的抽象方法的形参列表和构造器的形参列表一致\",{\"1\":{\"2170\":1}}],[\"函数式接口的特点\",{\"0\":{\"2135\":1}}],[\"函数式接口本质上只是一个载体\",{\"1\":{\"2137\":1}}],[\"函数式接口本质上是穷举了所有函数的格式\",{\"1\":{\"2133\":1}}],[\"函数式接口要定义多少\",{\"0\":{\"2137\":1}}],[\"函数式接口\",{\"0\":{\"2132\":1},\"1\":{\"2113\":1,\"2139\":1}}],[\"函数\",{\"1\":{\"1578\":1}}],[\"函数也是数据\",{\"1\":{\"1448\":1}}],[\"函数型\",{\"1\":{\"728\":1,\"2144\":1}}],[\"滑动和加载图片分开\",{\"1\":{\"1446\":1}}],[\"利于系统的开发和扩展\",{\"1\":{\"1952\":1}}],[\"利于理解和修改\",{\"1\":{\"1445\":1}}],[\"利用集合和吧next放入循环来获取多条数据\",{\"1\":{\"2358\":1}}],[\"利用反射\",{\"1\":{\"2097\":1}}],[\"利用class提供的方法\",{\"1\":{\"2014\":1}}],[\"利用套接字\",{\"1\":{\"1961\":1}}],[\"利用properties类可以读取配置信息\",{\"1\":{\"1692\":1}}],[\"利用启动类启动服务\",{\"1\":{\"310\":1}}],[\"利用mybatisplus生成代码\",{\"1\":{\"312\":1}}],[\"利用mybatis\",{\"1\":{\"310\":1}}],[\"独立运行\",{\"1\":{\"1445\":1}}],[\"拿到浏览器发送请求时携带的cookie数据\",{\"1\":{\"2791\":1}}],[\"拿包装类替换\",{\"1\":{\"1711\":1}}],[\"拿还要多线程干什么\",{\"1\":{\"1444\":1}}],[\"拿两个集合的元素挨个比较\",{\"1\":{\"663\":1}}],[\"肯定是return语句\",{\"1\":{\"2116\":1}}],[\"肯定比用多个线程来完成用的时间更短\",{\"1\":{\"1444\":1}}],[\"肯定要遵守规范书写的\",{\"1\":{\"173\":1}}],[\"元注解之一\",{\"0\":{\"1426\":1}}],[\"元注解说明\",{\"0\":{\"1408\":1}}],[\"元注解\",{\"0\":{\"1396\":1,\"1407\":1},\"1\":{\"1390\":1,\"1392\":1,\"1396\":1}}],[\"元素是学生类\",{\"1\":{\"2221\":1}}],[\"元素a放到数组中\",{\"1\":{\"1645\":1}}],[\"元素a添加失败\",{\"1\":{\"1643\":1}}],[\"元素首先以数组的形式储存\",{\"1\":{\"1644\":1}}],[\"元素不一定相同\",{\"1\":{\"1642\":1}}],[\"元素的值\",{\"1\":{\"995\":1}}],[\"元素的访问和值\",{\"0\":{\"990\":1}}],[\"元素访问\",{\"1\":{\"995\":1}}],[\"元素反转\",{\"1\":{\"682\":1}}],[\"元素可以是任何类型\",{\"1\":{\"657\":1}}],[\"抑制编译器警告\",{\"1\":{\"1389\":1,\"1390\":1}}],[\"忽略了异常的处理\",{\"1\":{\"2972\":1}}],[\"忽略\",{\"1\":{\"2930\":1}}],[\"忽略此方法\",{\"1\":{\"1481\":1}}],[\"忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告\",{\"1\":{\"1390\":1}}],[\"忽略警告等\",{\"1\":{\"1388\":1}}],[\"忽略大小写\",{\"1\":{\"749\":1}}],[\"真好\",{\"1\":{\"1382\":1}}],[\"真正使用的request对象的类是\",{\"1\":{\"2589\":1}}],[\"真正部署项目时\",{\"1\":{\"2473\":1}}],[\"真正的将异常给处理掉了\",{\"1\":{\"1353\":1}}],[\"真正的值是储存在常量池中的\",{\"1\":{\"885\":1}}],[\"真正解决异常\",{\"1\":{\"1315\":1}}],[\"真正实现了\",{\"1\":{\"855\":1}}],[\"括号里的参数是构造方法的参数\",{\"1\":{\"1382\":1}}],[\"括起来的单个字符\",{\"1\":{\"854\":1}}],[\"冬\",{\"1\":{\"1373\":1}}],[\"冬天喝温开水\",{\"1\":{\"3076\":1}}],[\"冬天来了\",{\"1\":{\"1383\":1}}],[\"冬天\",{\"1\":{\"1368\":1}}],[\"落叶\",{\"1\":{\"1373\":1}}],[\"秋天来了\",{\"1\":{\"1383\":1}}],[\"秋天\",{\"1\":{\"1382\":1}}],[\"秋\",{\"1\":{\"1373\":1}}],[\"夏天来了\",{\"1\":{\"1383\":1}}],[\"夏天\",{\"1\":{\"1382\":1}}],[\"夏\",{\"1\":{\"1373\":1}}],[\"春夏秋冬\",{\"1\":{\"1382\":1}}],[\"春天来了\",{\"1\":{\"1383\":1}}],[\"春天是交配的季节\",{\"1\":{\"1382\":1}}],[\"春天\",{\"1\":{\"1382\":2}}],[\"春\",{\"1\":{\"1373\":1,\"1374\":2}}],[\"春节\",{\"1\":{\"1368\":1}}],[\"阻止自动提交\",{\"1\":{\"2377\":1}}],[\"阻止类外随便造对象\",{\"1\":{\"1240\":1}}],[\"阻塞当前进程2秒钟\",{\"1\":{\"1481\":1}}],[\"阻塞\",{\"1\":{\"1368\":1,\"1481\":1,\"1501\":1,\"1834\":1}}],[\"退货\",{\"1\":{\"1368\":1}}],[\"退出程序\",{\"1\":{\"1870\":1}}],[\"退出循环\",{\"1\":{\"931\":1}}],[\"退出\",{\"1\":{\"399\":1}}],[\"信用卡\",{\"1\":{\"1368\":1}}],[\"信息\",{\"1\":{\"1185\":1}}],[\"季节\",{\"1\":{\"1368\":1}}],[\"够长\",{\"1\":{\"1363\":1}}],[\"您输入的数据非法\",{\"1\":{\"1361\":2}}],[\"告诉代码的调用者\",{\"1\":{\"1359\":1}}],[\"告知此字符串是否匹配给定的正则表达式\",{\"1\":{\"433\":1}}],[\"谁声明在下无所谓\",{\"1\":{\"1346\":1}}],[\"资源文件等\",{\"1\":{\"2734\":1}}],[\"资源访问路径\",{\"1\":{\"2659\":1}}],[\"资源a现在无法处理该请求\",{\"1\":{\"2658\":1}}],[\"资源a处理完请求后将请求发给资源b\",{\"1\":{\"2651\":1}}],[\"资源b的访问路径\",{\"1\":{\"2659\":1}}],[\"资源b接收到请求后进行处理并最终给浏览器响应结果\",{\"1\":{\"2658\":1}}],[\"资源b路径\",{\"1\":{\"2652\":1}}],[\"资源b处理完后将结果响应给浏览器\",{\"1\":{\"2651\":1}}],[\"资源路径\",{\"1\":{\"2571\":2}}],[\"资源变动时\",{\"1\":{\"2502\":1}}],[\"资源分类\",{\"0\":{\"2447\":1}}],[\"资源重用\",{\"1\":{\"2419\":1}}],[\"资源的访问\",{\"1\":{\"2705\":1}}],[\"资源的关闭\",{\"1\":{\"2325\":1,\"2329\":1,\"2333\":1,\"2405\":1}}],[\"资源的地址\",{\"1\":{\"1988\":1}}],[\"资源的释放\",{\"0\":{\"1344\":1}}],[\"资源关闭\",{\"0\":{\"1814\":1}}],[\"资源\",{\"1\":{\"1789\":1,\"3184\":1}}],[\"资源不属于内存里的资源\",{\"1\":{\"1789\":1}}],[\"资源拥有\",{\"1\":{\"1440\":1}}],[\"资源耗尽等严重情况\",{\"1\":{\"1312\":1}}],[\"去修改数据表中指定的记录\",{\"1\":{\"2407\":1,\"2408\":1}}],[\"去重\",{\"0\":{\"2211\":1},\"1\":{\"2187\":1,\"2211\":1}}],[\"去catch中进行匹配\",{\"1\":{\"1340\":1}}],[\"去除重复元素\",{\"1\":{\"2211\":1}}],[\"去除桌面相关的api\",{\"1\":{\"763\":1}}],[\"去除字符串首尾空白\",{\"1\":{\"419\":1}}],[\"尝试捕获异常\",{\"1\":{\"1339\":1}}],[\"尝试捕获空指针异常\",{\"1\":{\"1339\":1}}],[\"尝试捕获数值类型异常\",{\"1\":{\"1339\":1}}],[\"捕获异常\",{\"1\":{\"2988\":1}}],[\"捕获异常后\",{\"1\":{\"1341\":1}}],[\"捕获异常的有关信息\",{\"0\":{\"1341\":1}}],[\"捕获异常的第一步是用try\",{\"1\":{\"1337\":1}}],[\"捕获到了空指针异常\",{\"1\":{\"1339\":1}}],[\"捕获到了数值异常\",{\"1\":{\"1339\":1}}],[\"捕获错误最理想的是在\",{\"1\":{\"1323\":1}}],[\"角标越位异常\",{\"1\":{\"1343\":1}}],[\"角标越界\",{\"0\":{\"1328\":1}}],[\"角色信息\",{\"1\":{\"3198\":1}}],[\"角色为useradminanydatabase\",{\"1\":{\"3194\":1}}],[\"角色为root\",{\"1\":{\"3194\":1}}],[\"角色说明\",{\"0\":{\"3190\":1}}],[\"角色\",{\"0\":{\"3183\":1},\"1\":{\"3190\":1}}],[\"角色之前\",{\"1\":{\"3182\":1}}],[\"角色与权限\",{\"0\":{\"3178\":1}}],[\"角色名\",{\"1\":{\"3157\":1,\"3159\":1,\"3160\":1}}],[\"角色介绍\",{\"0\":{\"400\":1}}],[\"角色分工\",{\"0\":{\"22\":1}}],[\"抓\",{\"1\":{\"1318\":1}}],[\"抛弃连接\",{\"1\":{\"2426\":1}}],[\"抛出的异常\",{\"1\":{\"1732\":1,\"2048\":1}}],[\"抛出异常的级别\",{\"1\":{\"3081\":1}}],[\"抛出异常可以省掉很多if\",{\"1\":{\"1359\":1}}],[\"抛出异常和返回一个特殊值\",{\"1\":{\"1359\":1}}],[\"抛出异常\",{\"1\":{\"699\":1}}],[\"抛\",{\"1\":{\"1318\":1}}],[\"臃肿\",{\"1\":{\"1316\":1}}],[\"试图读取不存在的文件\",{\"1\":{\"1313\":1}}],[\"含义\",{\"1\":{\"2893\":1}}],[\"含变量的类型\",{\"1\":{\"1304\":1}}],[\"含有抽象方法的类必须被声明为抽象类\",{\"1\":{\"1247\":1}}],[\"虚拟目录\",{\"1\":{\"2468\":1}}],[\"虚拟机会保证一个类的<clinit>\",{\"1\":{\"2028\":1}}],[\"虚拟机常量池内的符号引用\",{\"1\":{\"2027\":1}}],[\"虚拟机检测到程序发生了问题\",{\"1\":{\"1319\":1}}],[\"虚拟机栈用于存储局部变量等\",{\"1\":{\"1298\":1}}],[\"虚拟方法调用举例\",{\"0\":{\"1158\":1}}],[\"虚拟方法调用\",{\"0\":{\"1156\":1}}],[\"虚拟方法的调用\",{\"0\":{\"1154\":1}}],[\"枚举与注解\",{\"0\":{\"3261\":1}}],[\"枚举对象间用逗号分割\",{\"1\":{\"1382\":1}}],[\"枚举对象如果有属性\",{\"1\":{\"1378\":1}}],[\"枚举动\",{\"1\":{\"1371\":1}}],[\"枚举类中也可以定义普通方法\",{\"1\":{\"1382\":1}}],[\"枚举类默认继承了\",{\"1\":{\"1377\":1}}],[\"枚举类的私有化构造函数\",{\"1\":{\"1382\":1}}],[\"枚举类的private\",{\"1\":{\"1382\":1}}],[\"枚举类的对象必须创建在开头\",{\"1\":{\"1382\":1}}],[\"枚举类的所有实例必须在枚举类中显式列出\",{\"1\":{\"1377\":1}}],[\"枚举类的构造器只能使用\",{\"1\":{\"1377\":1}}],[\"枚举类的使用\",{\"1\":{\"1371\":1}}],[\"枚举类的实现\",{\"0\":{\"1370\":1}}],[\"枚举类的特点\",{\"0\":{\"1369\":1}}],[\"枚举类\",{\"0\":{\"1367\":1}}],[\"枚举类型\",{\"1\":{\"927\":1,\"1398\":1,\"1405\":1,\"1406\":1,\"1410\":1}}],[\"枚举\",{\"0\":{\"1366\":1},\"1\":{\"1295\":1,\"1413\":1,\"2016\":1,\"2781\":1}}],[\"连续添加10次数据\",{\"1\":{\"1619\":1}}],[\"连续操作\",{\"0\":{\"1294\":1}}],[\"连接分片集群\",{\"0\":{\"3227\":1}}],[\"连接前\",{\"1\":{\"3225\":1}}],[\"连接时需要勾选direct\",{\"1\":{\"3224\":1}}],[\"连接其他节点需要进行初始化\",{\"1\":{\"3223\":1}}],[\"连接单实例\",{\"0\":{\"3222\":1},\"1\":{\"3222\":1}}],[\"连接的是整个副本集\",{\"1\":{\"3220\":1}}],[\"连接的serversocket\",{\"1\":{\"1975\":1}}],[\"连接方式\",{\"0\":{\"3218\":1}}],[\"连接副本集\",{\"0\":{\"3163\":1,\"3166\":1,\"3215\":1,\"3223\":1}}],[\"连接后查看\",{\"0\":{\"3148\":1}}],[\"连接节点\",{\"0\":{\"3147\":1}}],[\"连接上任意一个节点后\",{\"1\":{\"3146\":1}}],[\"连接与断开mongodb连接相关\",{\"1\":{\"3057\":1}}],[\"连接mongodb\",{\"0\":{\"3052\":1},\"1\":{\"3194\":1,\"3217\":1}}],[\"连接池应该放到之前建立的jdbc功能类\",{\"1\":{\"2427\":1}}],[\"连接池的最大数据库连接数量限定了这个连接池能占有的最大连接数\",{\"1\":{\"2417\":1}}],[\"连接池都将一直保证至少拥有这么多的连接数量\",{\"1\":{\"2417\":1}}],[\"连接池介绍\",{\"0\":{\"2411\":1}}],[\"连接池\",{\"0\":{\"2384\":1}}],[\"连接创建的细节被隐藏了\",{\"1\":{\"1996\":1}}],[\"连接断开\",{\"1\":{\"1959\":1}}],[\"连接usb\",{\"1\":{\"1264\":1}}],[\"连接运算\",{\"1\":{\"1197\":2}}],[\"连接字符串\",{\"1\":{\"420\":1}}],[\"连接数据库的密码\",{\"1\":{\"2426\":1}}],[\"连接数据库的用户名\",{\"1\":{\"2426\":1}}],[\"连接数据库的用户名密码\",{\"1\":{\"2292\":1}}],[\"连接数据库的url\",{\"1\":{\"2426\":1}}],[\"连接数据库\",{\"0\":{\"2285\":1,\"2296\":1},\"1\":{\"310\":1,\"312\":1,\"1153\":1,\"2283\":1,\"2292\":1,\"2418\":1}}],[\"连接\",{\"0\":{\"3056\":1},\"1\":{\"123\":1,\"1775\":1,\"1780\":1}}],[\"抽取的基类\",{\"1\":{\"1291\":1}}],[\"抽象接口\",{\"1\":{\"2283\":1}}],[\"抽象角色中\",{\"1\":{\"2077\":1}}],[\"抽象基类\",{\"0\":{\"1776\":1}}],[\"抽象方法的返回值类型即为构造器所属的类的类型\",{\"1\":{\"2170\":1}}],[\"抽象方法只有方法的声明\",{\"1\":{\"1247\":1}}],[\"抽象方法\",{\"0\":{\"1247\":1},\"1\":{\"1259\":2,\"1582\":1}}],[\"抽象类可用于模板方法设计模式\",{\"1\":{\"1250\":1}}],[\"抽象类不一定有抽象方法\",{\"1\":{\"1248\":1}}],[\"抽象类中还是存在构造器的\",{\"1\":{\"1246\":1}}],[\"抽象类\",{\"0\":{\"1246\":1}}],[\"抽象类与接口\",{\"0\":{\"1244\":1}}],[\"抽象概念的人\",{\"1\":{\"1007\":1}}],[\"业务流程\",{\"0\":{\"2759\":1}}],[\"业务模型\",{\"1\":{\"2754\":1}}],[\"业务处理完后\",{\"1\":{\"2585\":1}}],[\"业务逻辑层\",{\"1\":{\"2758\":2,\"2760\":1,\"2761\":1,\"2763\":1,\"2765\":1}}],[\"业务逻辑就是写在该方法内的\",{\"1\":{\"2553\":1}}],[\"业务逻辑\",{\"0\":{\"1291\":1}}],[\"业务层必须进行test测试\",{\"1\":{\"362\":1}}],[\"业务层实现类\",{\"0\":{\"360\":1}}],[\"业务层接口\",{\"0\":{\"359\":1}}],[\"业务层\",{\"0\":{\"358\":1}}],[\"怎么办\",{\"1\":{\"1286\":1}}],[\"遵循常用的命名规则即可\",{\"1\":{\"2772\":1}}],[\"遵循标识符的命名规则\",{\"1\":{\"1089\":1}}],[\"遵循标识符的规则和规范\",{\"1\":{\"1029\":1}}],[\"遵守上述约定的类可以用于若干工具或库\",{\"1\":{\"1283\":1}}],[\"北京\",{\"1\":{\"1267\":1}}],[\"断开数据库\",{\"1\":{\"2418\":1}}],[\"断开数据库连接\",{\"1\":{\"2413\":1}}],[\"断开客户端到服务器的连接\",{\"1\":{\"1969\":1}}],[\"断开usb\",{\"1\":{\"1264\":1}}],[\"断点续传\",{\"0\":{\"1892\":1}}],[\"断电==\",{\"1\":{\"1451\":1}}],[\"断定型\",{\"1\":{\"729\":1,\"2144\":1}}],[\"宽\",{\"1\":{\"1264\":1}}],[\"宽松绑定\",{\"0\":{\"166\":1,\"167\":1}}],[\"几乎一切操作\",{\"1\":{\"2187\":1}}],[\"几乎所有的设计模式都是面向接口编程的\",{\"1\":{\"1261\":1}}],[\"几何函数\",{\"0\":{\"522\":1}}],[\"仍会在异常代码处生成一个异常类的对象\",{\"1\":{\"1350\":1}}],[\"仍然调用的是重写以后的方法\",{\"1\":{\"1269\":1}}],[\"仍需定义为抽象类\",{\"1\":{\"1261\":1}}],[\"仍可以调用\",{\"1\":{\"936\":1}}],[\"制定好后大家都要遵守\",{\"1\":{\"1258\":1}}],[\"制作业务层测试类\",{\"1\":{\"338\":1}}],[\"制作数据层测试\",{\"1\":{\"338\":1}}],[\"鼠标\",{\"1\":{\"1257\":1}}],[\"挂哪个子类\",{\"1\":{\"1252\":1}}],[\"办理具体的业务\",{\"1\":{\"1252\":1}}],[\"预先在缓冲池中放入一定数量的连接\",{\"1\":{\"2416\":1}}],[\"预编译字符串示例\",{\"1\":{\"2321\":1}}],[\"预编译sql语句\",{\"0\":{\"2321\":1},\"1\":{\"2325\":1,\"2329\":1,\"2333\":1,\"2386\":1,\"2405\":1}}],[\"预编译sql语句与占位符\",{\"0\":{\"2320\":1}}],[\"预约取号\",{\"1\":{\"1252\":1}}],[\"预设好了几乎所有依赖的版本\",{\"1\":{\"101\":1}}],[\"银行卡\",{\"1\":{\"1368\":1}}],[\"银行的业务流程是固定的\",{\"1\":{\"1252\":1}}],[\"银行业务流程\",{\"0\":{\"1252\":1}}],[\"花费的时间为\",{\"1\":{\"1251\":1,\"2373\":1,\"2376\":1}}],[\"易变的部分\",{\"1\":{\"1251\":1}}],[\"易变部分可以抽象出来\",{\"1\":{\"1250\":1}}],[\"供开发商开发数据库驱动程序用\",{\"1\":{\"2283\":1}}],[\"供应用程序开发人员使用\",{\"1\":{\"2283\":1}}],[\"供应者\",{\"1\":{\"2203\":1}}],[\"供不同子类实现\",{\"1\":{\"1250\":1}}],[\"供给了一个值\",{\"1\":{\"727\":1,\"2144\":1}}],[\"供给型\",{\"1\":{\"727\":1,\"2144\":1}}],[\"达到匿名对象同样的效果\",{\"1\":{\"1249\":1}}],[\"达到简化配置的目的\",{\"1\":{\"100\":1}}],[\"回车\",{\"1\":{\"3150\":1}}],[\"回滚事务\",{\"0\":{\"2382\":1}}],[\"回收站一直维护着仅有的一个实例\",{\"1\":{\"1243\":1}}],[\"回收站\",{\"1\":{\"1243\":1}}],[\"回头再学\",{\"1\":{\"11\":1}}],[\"网络\",{\"1\":{\"2778\":1}}],[\"网络上具有唯一标识的ip地址和端口号组合在一起才能构成唯一能识别的标识符套接字\",{\"1\":{\"1961\":1}}],[\"网络协议\",{\"0\":{\"1949\":1}}],[\"网络通信三要素\",{\"0\":{\"2449\":1}}],[\"网络通信其实就是socket间的通信\",{\"1\":{\"1961\":1}}],[\"网络通信协议\",{\"0\":{\"1927\":1,\"1950\":1,\"1951\":1},\"1\":{\"1925\":1,\"1926\":1}}],[\"网络通信的要素\",{\"0\":{\"1925\":1}}],[\"网络通讯等\",{\"1\":{\"1773\":1}}],[\"网络基础\",{\"0\":{\"1924\":1}}],[\"网络编程中的主要问题\",{\"1\":{\"1924\":1}}],[\"网络编程的目的\",{\"1\":{\"1924\":1}}],[\"网络编程\",{\"0\":{\"3265\":1},\"1\":{\"1834\":1}}],[\"网络编程socket等资源\",{\"1\":{\"1342\":1}}],[\"网络连接中断\",{\"1\":{\"1313\":1}}],[\"网络问题\",{\"0\":{\"73\":1}}],[\"网站的计数器\",{\"1\":{\"1243\":1}}],[\"延迟了数组的创建\",{\"1\":{\"1622\":1}}],[\"延迟到运行时出现\",{\"1\":{\"1347\":1}}],[\"延迟对象的创建\",{\"1\":{\"1242\":1}}],[\"延展\",{\"1\":{\"1113\":1}}],[\"懒汉式\",{\"0\":{\"1241\":1},\"1\":{\"1242\":1}}],[\"私有端口\",{\"1\":{\"1938\":1}}],[\"私有地址\",{\"1\":{\"1934\":1}}],[\"私有化类的构造器\",{\"1\":{\"1240\":2,\"1241\":1,\"1372\":1,\"1373\":1,\"1521\":1}}],[\"私有属性无权访问\",{\"1\":{\"1056\":1}}],[\"饿汉式是线程安全的\",{\"1\":{\"1242\":1}}],[\"饿汉式和懒汉式的对比\",{\"0\":{\"1242\":1}}],[\"饿汉式\",{\"0\":{\"1240\":1},\"1\":{\"1242\":1}}],[\"产生背景\",{\"0\":{\"2248\":1}}],[\"产生一个新流\",{\"1\":{\"2226\":1,\"2227\":1}}],[\"产生一个新的\",{\"1\":{\"2216\":1,\"2217\":1,\"2218\":1}}],[\"产生编译错误\",{\"1\":{\"1744\":1}}],[\"产生死锁可能性的最根本原因是\",{\"1\":{\"1546\":1}}],[\"产生内存空间==\",{\"1\":{\"1451\":1}}],[\"产生其他依赖对象时\",{\"1\":{\"1239\":1}}],[\"产品原型等\",{\"1\":{\"22\":1}}],[\"产品经理\",{\"1\":{\"22\":1}}],[\"习惯上声明为static的\",{\"1\":{\"1237\":1}}],[\"又在剩下的从节点中选中其他节点为\",{\"1\":{\"3128\":1}}],[\"又相当的灵活\",{\"1\":{\"3032\":1}}],[\"又分两类分别存放在两个地方\",{\"1\":{\"2741\":1}}],[\"又分为两种形式\",{\"1\":{\"1314\":1}}],[\"又称多条件查询\",{\"1\":{\"2995\":1}}],[\"又称组合查询\",{\"1\":{\"2934\":1}}],[\"又称正向索引\",{\"1\":{\"2867\":1}}],[\"又称增强for循环\",{\"1\":{\"1602\":1}}],[\"又称为静态变量\",{\"1\":{\"1227\":1}}],[\"又可以使用post方法访问\",{\"1\":{\"2613\":1}}],[\"又可以使用if\",{\"1\":{\"915\":1,\"929\":1}}],[\"又可以作为一个输出流\",{\"1\":{\"1880\":1}}],[\"又可以作为future得到callable的返回值\",{\"1\":{\"1560\":1}}],[\"又去申请获得锁l2\",{\"1\":{\"1546\":1}}],[\"又提出请求使用正被p1占用着的输入设备\",{\"1\":{\"1542\":1}}],[\"又叫main线程\",{\"1\":{\"1465\":1}}],[\"又因为可能会产生异常\",{\"1\":{\"2037\":1}}],[\"又因为main\",{\"1\":{\"1293\":1}}],[\"又因为java虚拟机在执行main\",{\"1\":{\"1293\":1}}],[\"匿名函数\",{\"1\":{\"2111\":1}}],[\"匿名内部类\",{\"1\":{\"2016\":1}}],[\"匿名内部类的类体部分\",{\"1\":{\"1215\":1}}],[\"匿名方法\",{\"1\":{\"1249\":1}}],[\"匿名类对象只能使用多态形式引用\",{\"1\":{\"1216\":1}}],[\"匿名类只能有一个对象\",{\"1\":{\"1216\":1}}],[\"匿名类必须继承父类或实现接口\",{\"1\":{\"1216\":1}}],[\"匿名类不能定义任何静态成员\",{\"1\":{\"1214\":1}}],[\"匿名类\",{\"0\":{\"1214\":1},\"1\":{\"1249\":1}}],[\"匿名对象只能调用一次\",{\"1\":{\"1019\":1}}],[\"匿名对象\",{\"0\":{\"1019\":1},\"1\":{\"1264\":1}}],[\"拆箱\",{\"1\":{\"1194\":1}}],[\"拆分的数目\",{\"1\":{\"753\":1}}],[\"纯数值的字符串也可以作为参数\",{\"1\":{\"1192\":1}}],[\"纯理论知识\",{\"1\":{\"11\":1}}],[\"装载jdbc驱动程序等常规工作的工具类\",{\"1\":{\"2434\":1}}],[\"装载进内存的\",{\"1\":{\"2031\":1}}],[\"装载时进行新旧字符的替换\",{\"1\":{\"569\":1,\"1808\":1}}],[\"装箱\",{\"1\":{\"1192\":1}}],[\"久而久之\",{\"1\":{\"1181\":1}}],[\"永远返回是\",{\"1\":{\"1180\":2}}],[\"永远满足\",{\"1\":{\"931\":1}}],[\"像数据库连接\",{\"1\":{\"1342\":1}}],[\"像个钩子\",{\"1\":{\"1252\":2}}],[\"像string\",{\"1\":{\"1179\":1,\"1185\":1}}],[\"像日期和时间这样的类应该是不可变的\",{\"1\":{\"460\":1}}],[\"克隆\",{\"1\":{\"1176\":1}}],[\"隔代转型\",{\"0\":{\"1171\":1}}],[\"随用随调\",{\"1\":{\"2142\":1}}],[\"随便写\",{\"1\":{\"2963\":1}}],[\"随便定义\",{\"1\":{\"1363\":1}}],[\"随便转\",{\"1\":{\"1165\":1}}],[\"随着微服务成为主流\",{\"1\":{\"2750\":1}}],[\"随着\",{\"1\":{\"1914\":1}}],[\"随着对象的创建而执行\",{\"1\":{\"1280\":1}}],[\"随着类的加载而执行\",{\"1\":{\"1279\":1}}],[\"随着类的加载而加载\",{\"1\":{\"1225\":1}}],[\"随机访问\",{\"1\":{\"1881\":1}}],[\"随机访问机制\",{\"0\":{\"1881\":1}}],[\"随机存储文件流\",{\"0\":{\"1880\":1},\"1\":{\"1880\":1}}],[\"随机排序\",{\"1\":{\"683\":1}}],[\"随机数的精确度为\",{\"1\":{\"513\":1}}],[\"随机数的范围是\",{\"1\":{\"513\":1}}],[\"随机数\",{\"0\":{\"513\":1}}],[\"晚绑定\",{\"1\":{\"1159\":2}}],[\"各个聚合操作的语法如下\",{\"1\":{\"2954\":1}}],[\"各个子类重写了welcome\",{\"1\":{\"1158\":1}}],[\"各司其职\",{\"1\":{\"2756\":1}}],[\"各层互不影响\",{\"1\":{\"1952\":1}}],[\"各种有自己的内存空间\",{\"1\":{\"1302\":1}}],[\"各种类型的数据操作接口\",{\"1\":{\"288\":1}}],[\"太繁琐了\",{\"1\":{\"2142\":1}}],[\"太冗余了\",{\"1\":{\"1152\":1,\"2613\":1}}],[\"太麻烦了\",{\"1\":{\"243\":1}}],[\"经过实测\",{\"1\":{\"3082\":1}}],[\"经过简单的循环向字符串中添加数字\",{\"1\":{\"447\":1}}],[\"经验\",{\"1\":{\"1721\":1}}],[\"经常需要强制类型转换\",{\"1\":{\"1698\":1}}],[\"经常创建和销毁\",{\"1\":{\"1564\":1}}],[\"经常把run\",{\"1\":{\"1469\":1}}],[\"经常要在可能出现错误的地方加上检测的代码\",{\"1\":{\"1316\":1}}],[\"经常会遇到这样的情景\",{\"1\":{\"1152\":1}}],[\"外部dtd\",{\"1\":{\"2778\":1}}],[\"外部集合内嵌套了班级集合\",{\"1\":{\"2223\":1}}],[\"外部类\",{\"1\":{\"2016\":1}}],[\"外部类访问成员内部类的成员\",{\"1\":{\"1207\":1}}],[\"外部类不能由private和protected修饰\",{\"1\":{\"1205\":1}}],[\"外循环是用来循环读取数据的\",{\"1\":{\"1806\":1}}],[\"外其他完全一样的方法了\",{\"1\":{\"1152\":1}}],[\"外层元素本质上是一维数组\",{\"1\":{\"995\":1}}],[\"外层元素的初始化值为\",{\"1\":{\"993\":2}}],[\"外层元素的个数\",{\"1\":{\"991\":1}}],[\"外层元素的值是一个一维数组\",{\"1\":{\"988\":1}}],[\"外层元素能访问\",{\"1\":{\"990\":1}}],[\"外层元素必须初始化\",{\"1\":{\"989\":1}}],[\"外层2个元素\",{\"1\":{\"985\":1}}],[\"外层数组的长度\",{\"1\":{\"991\":2}}],[\"外层数组元素的值是一个内存地址\",{\"1\":{\"995\":1}}],[\"外层数组元素\",{\"1\":{\"982\":1}}],[\"外层数组\",{\"1\":{\"982\":1}}],[\"外层循环控制行数\",{\"1\":{\"952\":1}}],[\"看下三个mongodb服务是否启动成功\",{\"1\":{\"3145\":1}}],[\"看到string类\",{\"1\":{\"1181\":1}}],[\"看的是子类的对象\",{\"1\":{\"1147\":1}}],[\"看的是父类的引用\",{\"1\":{\"1147\":1}}],[\"看右边\",{\"1\":{\"1147\":1}}],[\"看左边\",{\"1\":{\"1147\":1}}],[\"至此\",{\"1\":{\"1958\":1}}],[\"至于\",{\"1\":{\"1404\":1}}],[\"至于系统是否立刻回收\",{\"1\":{\"635\":1}}],[\"至少有一个类的构造器中使用了\",{\"1\":{\"1139\":1}}],[\"虽然在某\",{\"1\":{\"3127\":1}}],[\"虽然started成功\",{\"1\":{\"2860\":1}}],[\"虽然后台从\",{\"1\":{\"2656\":1}}],[\"虽然已经能完成要求\",{\"1\":{\"2557\":1}}],[\"虽然不能实例化\",{\"1\":{\"1246\":1}}],[\"虽然创建子类对象时\",{\"1\":{\"1144\":1}}],[\"虽然调用了父类的构造器\",{\"1\":{\"1136\":1}}],[\"虽然是数组\",{\"1\":{\"989\":1}}],[\"假如使用session储存登陆信息\",{\"1\":{\"2825\":1}}],[\"假如\",{\"1\":{\"2475\":1,\"2613\":1}}],[\"假如定义了泛型标识e\",{\"1\":{\"1730\":1}}],[\"假如把while\",{\"1\":{\"1514\":1}}],[\"假如是4核cpu\",{\"1\":{\"1444\":1}}],[\"假如某一天\",{\"1\":{\"1286\":1}}],[\"假如父类也有这个方法\",{\"1\":{\"1134\":1}}],[\"假设查询为一个关键词\",{\"1\":{\"2867\":1}}],[\"假设在一个tomcat服务器中\",{\"1\":{\"2808\":1}}],[\"假设在32位平台\",{\"1\":{\"1455\":1}}],[\"假设我们的集合需要存放学生的成绩\",{\"1\":{\"1707\":1}}],[\"假设有一个银行账户里有3000元\",{\"1\":{\"1506\":1}}],[\"假设有person类\",{\"1\":{\"1018\":1}}],[\"假设外层循环需要执行m次\",{\"1\":{\"952\":1}}],[\"间接父类\",{\"1\":{\"1115\":1}}],[\"间接继承的父类称为\",{\"1\":{\"1115\":1}}],[\"间的随机数\",{\"1\":{\"513\":1}}],[\"称为单字段索引\",{\"1\":{\"3105\":1}}],[\"称为动态资源\",{\"1\":{\"2447\":1}}],[\"称为静态资源\",{\"1\":{\"2447\":1}}],[\"称为外部迭代\",{\"1\":{\"2237\":1}}],[\"称为函数式接口\",{\"1\":{\"2132\":1}}],[\"称为向下转型\",{\"1\":{\"1163\":1}}],[\"称为多态\",{\"1\":{\"1163\":1}}],[\"称为\",{\"1\":{\"1115\":1,\"1278\":1,\"2205\":1}}],[\"超级权限\",{\"1\":{\"3190\":1}}],[\"超级账号\",{\"1\":{\"3190\":1}}],[\"超级用户角色\",{\"1\":{\"3189\":1}}],[\"超链接\",{\"1\":{\"2667\":1}}],[\"超类\",{\"1\":{\"1112\":1}}],[\"超过时限则放弃对该锁的请求\",{\"1\":{\"1541\":1}}],[\"超过范围的索引\",{\"1\":{\"997\":1}}],[\"超过一个字符会报错\",{\"1\":{\"853\":1}}],[\"超过该大小就新建日志文件\",{\"1\":{\"258\":1}}],[\"派生类\",{\"1\":{\"1112\":1}}],[\"出了作用域自动释放\",{\"1\":{\"1537\":1}}],[\"出了for循环就失效了\",{\"1\":{\"933\":1}}],[\"出现了第三方api\",{\"1\":{\"2297\":1}}],[\"出现之前\",{\"1\":{\"1863\":1}}],[\"出现死锁后\",{\"1\":{\"1540\":1}}],[\"出现重复票\",{\"1\":{\"1507\":1}}],[\"出现异常\",{\"1\":{\"1350\":1}}],[\"出错控制等制定标准\",{\"1\":{\"1951\":1}}],[\"出错\",{\"1\":{\"1105\":1}}],[\"层级可以用包名的点区分\",{\"1\":{\"1089\":1}}],[\"层层进\",{\"1\":{\"988\":1}}],[\"顶层包名\",{\"1\":{\"1088\":1}}],[\"划分项目层次\",{\"1\":{\"1087\":1}}],[\"划分成base类加载器与restart类加载器\",{\"1\":{\"137\":1}}],[\"互不影响\",{\"1\":{\"2756\":1,\"2788\":1}}],[\"互不干扰\",{\"1\":{\"1096\":1,\"1306\":1}}],[\"互补\",{\"1\":{\"2213\":1}}],[\"互相干扰\",{\"1\":{\"1306\":1,\"1308\":1}}],[\"互相this\",{\"1\":{\"1082\":1}}],[\"互为引用\",{\"1\":{\"1306\":1,\"1308\":1}}],[\"互斥\",{\"1\":{\"924\":1}}],[\"父file对象\",{\"1\":{\"1769\":1}}],[\"父路径\",{\"1\":{\"1768\":1}}],[\"父子类之间出现了同名的方法或属性\",{\"1\":{\"1132\":1}}],[\"父类有泛型\",{\"1\":{\"1722\":1}}],[\"父类构造器\",{\"1\":{\"1215\":1}}],[\"父类转子类\",{\"0\":{\"1166\":1},\"1\":{\"1163\":1}}],[\"父类根据赋给它的不同子类对象\",{\"1\":{\"1156\":1}}],[\"父类中不具备子类特有的方法\",{\"1\":{\"1147\":1}}],[\"父类中的空参构造器就会被删除\",{\"1\":{\"1140\":1}}],[\"父类中的叫被重写的方法\",{\"1\":{\"1122\":1}}],[\"父类没有空构造器的情况\",{\"0\":{\"1140\":1}}],[\"父类也有这个属性\",{\"1\":{\"1133\":1}}],[\"父类被重写的方法的返回值类型是基本数据类型\",{\"1\":{\"1125\":1}}],[\"父类被重写的方法的返回值类型是a类型\",{\"1\":{\"1125\":1}}],[\"父类被重写的方法的返回值类型是void\",{\"1\":{\"1125\":1}}],[\"父类实例\",{\"1\":{\"1118\":1}}],[\"父类的引用必须指向子类的对象\",{\"1\":{\"1166\":1}}],[\"父类的引用指向子类的对象\",{\"1\":{\"1147\":1}}],[\"父类的引用指向子类的方法\",{\"1\":{\"1128\":1}}],[\"父类的父类也是父类\",{\"1\":{\"1115\":1}}],[\"父类的构造器不可被子类继承\",{\"1\":{\"1073\":1}}],[\"父类\",{\"1\":{\"1112\":1,\"1147\":1,\"1150\":1,\"1151\":1}}],[\"父工程规定项目所需依赖的版本\",{\"1\":{\"91\":1}}],[\"隐式无参构造器\",{\"1\":{\"1070\":1}}],[\"隐藏一个类中不需要对外提供的实现细节\",{\"1\":{\"1057\":1}}],[\"隐藏对象内部的复杂性\",{\"1\":{\"1053\":1}}],[\"隐藏非必要文件\",{\"0\":{\"300\":1}}],[\"隐藏无用的文件\",{\"0\":{\"79\":1}}],[\"过期时间\",{\"1\":{\"2803\":1}}],[\"过程\",{\"0\":{\"2755\":1}}],[\"过去由于并未通过微服务将机器资源进行隔离\",{\"1\":{\"2750\":1}}],[\"过于冗余\",{\"1\":{\"2076\":1}}],[\"过多的if\",{\"1\":{\"1316\":1}}],[\"过滤查询指的是返回指定的字段\",{\"1\":{\"2998\":1}}],[\"过滤查询\",{\"0\":{\"2998\":1},\"1\":{\"3000\":1}}],[\"过滤器的优先级\",{\"0\":{\"2706\":1}}],[\"过滤器2\",{\"1\":{\"2705\":2}}],[\"过滤器1\",{\"1\":{\"2705\":2}}],[\"过滤器链\",{\"0\":{\"2704\":1}}],[\"过滤器都会被执行\",{\"1\":{\"2701\":1}}],[\"过滤器正常关闭前的操作\",{\"1\":{\"2697\":1}}],[\"过滤和映射数据等操作\",{\"1\":{\"2188\":1}}],[\"过滤\",{\"1\":{\"1068\":1,\"2187\":1,\"2583\":1}}],[\"过时了\",{\"1\":{\"226\":1}}],[\"禁止访问非public修饰的类内部成员\",{\"1\":{\"2069\":1}}],[\"禁止外部访问\",{\"1\":{\"1056\":1}}],[\"禁用此套接字的输出流\",{\"1\":{\"1966\":1}}],[\"禁用\",{\"1\":{\"375\":1,\"381\":1,\"399\":1}}],[\"混乱或安全性问题\",{\"1\":{\"1054\":1}}],[\"尽力而为\",{\"1\":{\"1962\":1}}],[\"尽可能保持一致性\",{\"1\":{\"1649\":1}}],[\"尽量不要选别的路径\",{\"1\":{\"2744\":1}}],[\"尽量不要在servlet中定义成员变量\",{\"1\":{\"2547\":1}}],[\"尽量避免嵌套同步\",{\"1\":{\"1541\":1}}],[\"尽量减少同步资源的定义\",{\"1\":{\"1541\":1}}],[\"尽量使用第一种写法\",{\"1\":{\"1049\":1}}],[\"尽管有68个新的公开类型\",{\"1\":{\"463\":1}}],[\"机制\",{\"1\":{\"1046\":1}}],[\"机器语言\",{\"1\":{\"772\":1}}],[\"传统数据库的缺点\",{\"0\":{\"2849\":1}}],[\"传统的模式基本是按以下步骤\",{\"0\":{\"2413\":1}}],[\"传输协议\",{\"1\":{\"1990\":1,\"2449\":1}}],[\"传输协议>\",{\"1\":{\"1989\":1}}],[\"传输完毕\",{\"1\":{\"1956\":1}}],[\"传输前\",{\"1\":{\"1956\":1}}],[\"传输层和应用层\",{\"1\":{\"1955\":1}}],[\"传输层协议中有两个非常重要的协议\",{\"1\":{\"1954\":1}}],[\"传输层协议\",{\"0\":{\"1954\":1}}],[\"传输控制协议\",{\"1\":{\"1955\":1}}],[\"传输控制协议tcp\",{\"1\":{\"1954\":1}}],[\"传输控制步骤\",{\"1\":{\"1951\":1}}],[\"传输代码\",{\"1\":{\"1951\":1}}],[\"传参\",{\"1\":{\"1195\":1}}],[\"传递了进去\",{\"1\":{\"1493\":1}}],[\"传递性\",{\"1\":{\"1180\":1}}],[\"传递的参数有符合条件的非可变形参方法\",{\"1\":{\"1047\":1}}],[\"传递完之后\",{\"1\":{\"1044\":1}}],[\"传入我们想用的数据库对象\",{\"1\":{\"1153\":1}}],[\"传入的参数个数可以是\",{\"1\":{\"1047\":1}}],[\"传入方法内\",{\"1\":{\"1043\":1}}],[\"传入模糊查询的条件作为参数\",{\"1\":{\"355\":1}}],[\"跟日志相关的配置\",{\"1\":{\"2425\":1}}],[\"跟服务器的交互太频繁\",{\"1\":{\"2374\":1}}],[\"跟泛型无关\",{\"1\":{\"2124\":1}}],[\"跟上面区别不大\",{\"1\":{\"1837\":1}}],[\"跟方法的权限修饰符\",{\"1\":{\"1037\":1}}],[\"跟本地时间有关的类有三个\",{\"1\":{\"464\":1}}],[\"允许多台服务器协同工作\",{\"1\":{\"2845\":1}}],[\"允许conn为null\",{\"1\":{\"2434\":1}}],[\"允许操作封装的类结构\",{\"0\":{\"2069\":1}}],[\"允许读取数据\",{\"1\":{\"1745\":1}}],[\"允许我们在创建集合时再指定集合元素的类型\",{\"1\":{\"1700\":1}}],[\"允许使用null键和null值\",{\"1\":{\"1664\":1}}],[\"允许直接定义能和多个实参相匹配的形参\",{\"1\":{\"1046\":1}}],[\"允许存在一个以上的同名方法\",{\"1\":{\"1037\":1}}],[\"允许在表达式中使用空格和注释\",{\"1\":{\"749\":1}}],[\"允许在程序运行时进行自动构建\",{\"0\":{\"146\":1}}],[\"岁\",{\"1\":{\"1034\":1}}],[\"递归一定要向已知方向递归\",{\"1\":{\"1035\":1}}],[\"递归方法\",{\"0\":{\"1035\":1}}],[\"递归\",{\"1\":{\"1034\":1}}],[\"递归创建文件目录\",{\"1\":{\"557\":1}}],[\"交互方法\",{\"0\":{\"1994\":1}}],[\"交替打印\",{\"1\":{\"1550\":1,\"1556\":1}}],[\"交替遍历\",{\"1\":{\"1474\":1}}],[\"交配季节\",{\"1\":{\"1373\":1,\"1374\":2}}],[\"交换两个变量的值\",{\"1\":{\"1045\":1}}],[\"交换两个变量\",{\"1\":{\"1044\":1}}],[\"交换元素位置\",{\"1\":{\"685\":1}}],[\"交由调用者处理\",{\"1\":{\"1033\":1}}],[\"针对\",{\"1\":{\"2407\":1,\"2408\":1}}],[\"针对指定的id查询得到对应的customer对象\",{\"1\":{\"2407\":1,\"2408\":1}}],[\"针对指定的id\",{\"1\":{\"2407\":1,\"2408\":1}}],[\"针对custom表的通用查询操作\",{\"0\":{\"2352\":1}}],[\"针对企业客户的需求\",{\"1\":{\"2103\":1}}],[\"针对不同表\",{\"0\":{\"2355\":1}}],[\"针对不同的字符类型会有不同的字符集\",{\"1\":{\"855\":1}}],[\"针对不同的数据类型和排序方式\",{\"1\":{\"643\":1}}],[\"针对不通的方法进行增强\",{\"0\":{\"2087\":1}}],[\"针对任何你想动态加载\",{\"1\":{\"2015\":1}}],[\"针对于不同的表的通用的查询操作\",{\"1\":{\"2355\":1}}],[\"针对于编译时异常\",{\"1\":{\"1347\":1}}],[\"针对于有返回值类型的方法\",{\"1\":{\"1030\":1}}],[\"针对八种基本数据类型定义相应的引用类型\",{\"1\":{\"1189\":1}}],[\"功能很直观\",{\"1\":{\"3057\":1}}],[\"功能设计\",{\"0\":{\"2331\":1}}],[\"功能也一样\",{\"1\":{\"2156\":1}}],[\"功能也相同\",{\"1\":{\"1667\":1}}],[\"功能强的网络系统\",{\"1\":{\"1924\":1}}],[\"功能\",{\"0\":{\"1257\":1},\"1\":{\"1553\":1}}],[\"功能封装为方法的目的是\",{\"1\":{\"1028\":1}}],[\"功能清单\",{\"0\":{\"399\":1}}],[\"描述\",{\"1\":{\"3034\":1}}],[\"描述了目录结构中文件的位置\",{\"1\":{\"1916\":1}}],[\"描述类应该具有的功能\",{\"1\":{\"1028\":1}}],[\"描述信息\",{\"1\":{\"377\":1,\"378\":1}}],[\"④属性\",{\"1\":{\"2772\":1}}],[\"④拼接预编译sql字符串\",{\"1\":{\"2318\":1}}],[\"④获取代理对象后\",{\"1\":{\"2085\":1}}],[\"④将此callable接口实现类的对象作为参数传递到futuretask构造器中\",{\"1\":{\"1561\":1}}],[\"④线程池\",{\"1\":{\"1462\":1}}],[\"④其他操作\",{\"1\":{\"1378\":1}}],[\"④\",{\"1\":{\"1026\":1,\"1075\":1}}],[\"④有了对象以后\",{\"1\":{\"1026\":1}}],[\"③标签\",{\"1\":{\"2772\":1}}],[\"③tomcat将request和response两个对象传递给service方法\",{\"1\":{\"2583\":1}}],[\"③在弹出的窗口\",{\"1\":{\"2498\":1}}],[\"③创建数据表的实现\",{\"1\":{\"2396\":1}}],[\"③创建callable接口实现类的对象\",{\"1\":{\"1561\":1}}],[\"③获取链接\",{\"1\":{\"2318\":1}}],[\"③如图\",{\"1\":{\"2290\":1}}],[\"③string\",{\"1\":{\"2097\":1}}],[\"③通过获取的类和接口\",{\"1\":{\"2085\":1}}],[\"③实现callable接口\",{\"1\":{\"1462\":1}}],[\"③减少配置\",{\"1\":{\"1389\":1}}],[\"③私有化类的构造器\",{\"1\":{\"1378\":1}}],[\"③当父类和子类中拥有相同的属性或方法时\",{\"1\":{\"1135\":1}}],[\"③\",{\"1\":{\"1026\":1,\"1075\":1}}],[\"③构造器中初始化\",{\"1\":{\"1026\":1}}],[\"②指令\",{\"1\":{\"2772\":1}}],[\"②tomcat服务器\",{\"1\":{\"2583\":1}}],[\"②定义数据表的接口\",{\"1\":{\"2396\":1}}],[\"②定制排序\",{\"1\":{\"1656\":1}}],[\"②加载驱动\",{\"1\":{\"2318\":1}}],[\"②在弹出的窗口中点击右下角的edit\",{\"1\":{\"2498\":1}}],[\"②在idea中\",{\"1\":{\"2290\":1}}],[\"②在编译时进行格式检查\",{\"1\":{\"1389\":1}}],[\"②使用flatmap从年级集合中\",{\"1\":{\"2221\":1}}],[\"②human\",{\"1\":{\"2097\":1}}],[\"②通过反射获取该对象的类和所实现的所有接口\",{\"1\":{\"2085\":1}}],[\"②当通过代理类的对象调用方法a时\",{\"1\":{\"2084\":1}}],[\"②当本类中没有找到时\",{\"1\":{\"1135\":1}}],[\"②双重循环\",{\"1\":{\"1806\":1}}],[\"②jdk8\",{\"1\":{\"1677\":1}}],[\"②判断要添加的位置上有没有其他元素\",{\"1\":{\"1643\":1}}],[\"②实现call方法\",{\"1\":{\"1561\":1}}],[\"②实现runnable接口的方式\",{\"1\":{\"1462\":1}}],[\"②可选\",{\"1\":{\"1378\":1}}],[\"②跟⑤谁在前就先执行谁\",{\"1\":{\"1026\":1}}],[\"②\",{\"1\":{\"1026\":1,\"1075\":1,\"1318\":1}}],[\"②显式初始化\",{\"1\":{\"1026\":1}}],[\"①文档声明\",{\"1\":{\"2772\":1}}],[\"①tomcat服务器会根据请求url中的资源路径\",{\"1\":{\"2583\":1}}],[\"①右上角点击\",{\"1\":{\"2498\":1}}],[\"①定义dao接口\",{\"1\":{\"2396\":1}}],[\"①读取配置文件中的数据库连接信息\",{\"1\":{\"2318\":1}}],[\"①将jar包移动到项目目录下\",{\"1\":{\"2290\":1}}],[\"①使用map从学生集合中获取每个学生的年龄\",{\"1\":{\"2221\":1}}],[\"①superman\",{\"1\":{\"2097\":1}}],[\"①实例化被代理类\",{\"1\":{\"2085\":1}}],[\"①根据加载到内存中的被代理类\",{\"1\":{\"2084\":1}}],[\"①read\",{\"1\":{\"1806\":1}}],[\"①jdk7\",{\"1\":{\"1677\":1}}],[\"①自然排序\",{\"1\":{\"1656\":1}}],[\"①向hashset中添加元素a\",{\"1\":{\"1643\":1}}],[\"①创建一个实现callable的实现类\",{\"1\":{\"1561\":1}}],[\"①继承thread类的方式\",{\"1\":{\"1462\":1}}],[\"①用于文档注释\",{\"1\":{\"1389\":1}}],[\"①提供枚举对象\",{\"1\":{\"1378\":1}}],[\"①先从本类中查找是否有该属性或方法\",{\"1\":{\"1135\":1}}],[\"①\",{\"1\":{\"1026\":1,\"1075\":1,\"1318\":1}}],[\"①默认初始化\",{\"1\":{\"1026\":1}}],[\"符号\",{\"1\":{\"1178\":1,\"1389\":1}}],[\"符号两边的\",{\"1\":{\"1178\":1}}],[\"符号位是1\",{\"1\":{\"909\":1}}],[\"符号位不变\",{\"1\":{\"873\":2}}],[\"符号位在最高位\",{\"1\":{\"872\":1}}],[\"符号位\",{\"0\":{\"872\":1},\"1\":{\"873\":1}}],[\"符合命名规则和规范即可\",{\"1\":{\"1022\":1}}],[\"属于string类\",{\"1\":{\"2165\":1}}],[\"属于标识符\",{\"1\":{\"1022\":1,\"1029\":1}}],[\"属性配置\",{\"1\":{\"2572\":1}}],[\"属性类型是字符串\",{\"1\":{\"2426\":1}}],[\"属性列表中每个键及其对应值都是一个字符串\",{\"1\":{\"2297\":1}}],[\"属性包括\",{\"1\":{\"2209\":1,\"2214\":1}}],[\"属性等\",{\"1\":{\"1711\":1}}],[\"属性为季节名和季节描述\",{\"1\":{\"1373\":1}}],[\"属性是可以被多个对象所共享的\",{\"1\":{\"1237\":1}}],[\"属性只用左边的\",{\"1\":{\"1151\":1}}],[\"属性只能在类的内部访问\",{\"1\":{\"1055\":1}}],[\"属性只能保存字符串的内存地址\",{\"1\":{\"885\":1}}],[\"属性和方法查找的过程分析\",{\"0\":{\"1135\":1}}],[\"属性和要封装的数据一一对应\",{\"1\":{\"156\":1}}],[\"属性和要封装的数据一一兑对应\",{\"1\":{\"131\":1}}],[\"属性或方法\",{\"1\":{\"1098\":1}}],[\"属性赋值的先后顺序\",{\"0\":{\"1075\":1}}],[\"属性还会多个权限控制符\",{\"1\":{\"1024\":1}}],[\"属性声明语法\",{\"0\":{\"1022\":1}}],[\"属性与局部变量的对比\",{\"0\":{\"1023\":1}}],[\"属性与方法\",{\"0\":{\"1020\":1}}],[\"属性与属性之间使用\",{\"1\":{\"210\":1}}],[\"属性会有个默认值\",{\"1\":{\"1016\":1}}],[\"属性的类型可以是一个类\",{\"1\":{\"1022\":1}}],[\"属性的默认值就是类里定义的值\",{\"1\":{\"1301\":1}}],[\"属性的默认值\",{\"1\":{\"1016\":1}}],[\"属性的单位\",{\"0\":{\"170\":1}}],[\"属性方法相关\",{\"0\":{\"603\":1}}],[\"属性\",{\"0\":{\"402\":1,\"1021\":1},\"1\":{\"1010\":2,\"1023\":1,\"1025\":4,\"1026\":1,\"1062\":1,\"1075\":1,\"1080\":1,\"1081\":1,\"1132\":1,\"1133\":1,\"1175\":1,\"1237\":1,\"1382\":1,\"1402\":1,\"1404\":2,\"1624\":1}}],[\"属性加载的优先级\",{\"0\":{\"211\":1}}],[\"属性值必须使用引号\",{\"1\":{\"2770\":1}}],[\"属性值被方法修改了\",{\"1\":{\"1034\":1}}],[\"属性值是个数组\",{\"1\":{\"162\":1}}],[\"属性值前面添加空格\",{\"1\":{\"122\":1}}],[\"属性名是number\",{\"1\":{\"2777\":1}}],[\"属性名=属性值\",{\"1\":{\"210\":1,\"2295\":1}}],[\"属性名引用方式\",{\"1\":{\"127\":1}}],[\"属性名\",{\"1\":{\"125\":1,\"127\":1,\"1011\":1,\"1022\":2,\"1228\":1,\"2781\":1}}],[\"属性名与属性值之间使用冒号+空格作为分隔\",{\"1\":{\"122\":1}}],[\"属性层级关系使用多行描述\",{\"1\":{\"122\":1}}],[\"见nginx\",{\"1\":{\"2470\":1}}],[\"见\",{\"1\":{\"2293\":1}}],[\"见格式2的更精简写法\",{\"1\":{\"2130\":1}}],[\"见格式2示例的\",{\"0\":{\"2127\":1}}],[\"见格式2精简模式\",{\"0\":{\"2125\":1}}],[\"见名知意\",{\"1\":{\"1029\":1,\"1089\":1}}],[\"见后续章节\",{\"1\":{\"1022\":1,\"2553\":1,\"2855\":1}}],[\"见上面的配置tomcat\",{\"1\":{\"2519\":1}}],[\"见上一个例子\",{\"1\":{\"2124\":1}}],[\"见上\",{\"1\":{\"612\":1,\"618\":1,\"619\":1}}],[\"缺少的内容\",{\"0\":{\"2520\":1}}],[\"缺省启用公平锁\",{\"1\":{\"2426\":1}}],[\"缺省使用8192个字节的缓冲区\",{\"1\":{\"1826\":1}}],[\"缺省\",{\"1\":{\"1022\":1,\"1025\":1,\"1029\":1,\"1061\":1,\"1062\":2,\"1212\":1,\"2426\":1}}],[\"缺点\",{\"0\":{\"2076\":1,\"2142\":1},\"1\":{\"243\":1,\"1242\":2,\"1528\":1,\"2468\":1}}],[\"修复数据\",{\"1\":{\"3242\":1}}],[\"修复host\",{\"0\":{\"3164\":1}}],[\"修饰\",{\"1\":{\"1371\":1,\"1377\":1}}],[\"修饰的\",{\"1\":{\"1415\":1,\"1416\":1}}],[\"修饰的属性应该在构造器中为其赋值\",{\"1\":{\"1371\":1}}],[\"修饰的属性必须赋值\",{\"1\":{\"1104\":1}}],[\"修饰的成员\",{\"1\":{\"1225\":1}}],[\"修饰类的话\",{\"1\":{\"1062\":1}}],[\"修饰类的内部结构\",{\"1\":{\"1062\":1}}],[\"修饰类\",{\"1\":{\"1062\":1}}],[\"修饰符将表示一个对象\",{\"1\":{\"1022\":1}}],[\"修饰符\",{\"1\":{\"1022\":2,\"1069\":1}}],[\"修改证书权限\",{\"1\":{\"3212\":1}}],[\"修改mongod\",{\"1\":{\"3203\":1}}],[\"修改密码\",{\"0\":{\"3200\":1}}],[\"修改0号成员的优先级\",{\"1\":{\"3175\":1}}],[\"修改优先级后\",{\"1\":{\"3175\":1}}],[\"修改优先级\",{\"0\":{\"3175\":1}}],[\"修改的代码如下\",{\"1\":{\"3165\":1}}],[\"修改副本集节点的host\",{\"0\":{\"3165\":1}}],[\"修改数据\",{\"1\":{\"2983\":1}}],[\"修改数据时\",{\"1\":{\"2911\":1}}],[\"修改了文档数据中的title和price\",{\"1\":{\"2912\":1}}],[\"修改了person类内部的属性\",{\"1\":{\"1054\":1}}],[\"修改一次版本就会+1\",{\"1\":{\"2910\":1}}],[\"修改文档指的是修改文档的数据\",{\"1\":{\"2909\":1}}],[\"修改文档\",{\"0\":{\"2909\":1,\"2983\":1}}],[\"修改这两处都为false后\",{\"1\":{\"2860\":1}}],[\"修改和销毁\",{\"1\":{\"2717\":1,\"2718\":1,\"2719\":1}}],[\"修改响应头的方式修改响应类型\",{\"1\":{\"2641\":1}}],[\"修改调用时机\",{\"1\":{\"2552\":1}}],[\"修改模板\",{\"0\":{\"2541\":1}}],[\"修改tomcat配置文件\",{\"1\":{\"2468\":1}}],[\"修改配置文件\",{\"0\":{\"2468\":1,\"3203\":1,\"3214\":1},\"1\":{\"3214\":1}}],[\"修改成功\",{\"1\":{\"2409\":1}}],[\"修改成功^\",{\"1\":{\"371\":1}}],[\"修改blob类型的字段\",{\"1\":{\"2364\":1}}],[\"修改为启动servlet时创建\",{\"0\":{\"2546\":1}}],[\"修改为最新的java\",{\"1\":{\"2105\":1}}],[\"修改为返回\",{\"1\":{\"513\":1}}],[\"修改线程的优先级\",{\"1\":{\"1487\":1}}],[\"修改其值\",{\"1\":{\"956\":1}}],[\"修改前的obj元素\",{\"1\":{\"703\":1}}],[\"修改指定index的元素\",{\"1\":{\"703\":1}}],[\"修改人\",{\"1\":{\"375\":1,\"376\":1,\"377\":1,\"378\":1,\"379\":1,\"380\":1,\"382\":1}}],[\"修改失败\",{\"1\":{\"371\":1}}],[\"修改\",{\"0\":{\"416\":1},\"1\":{\"338\":1,\"399\":4,\"712\":1,\"3190\":2}}],[\"修改不参与热部署的目录或文件\",{\"0\":{\"150\":1}}],[\"帮我们完成了很多常见的功能\",{\"1\":{\"1016\":1}}],[\"例子\",{\"0\":{\"2073\":1}}],[\"例外\",{\"1\":{\"1015\":1}}],[\"例如灾难恢复\",{\"1\":{\"3126\":1}}],[\"例如字母大小写和重音标记的规则\",{\"1\":{\"3081\":1}}],[\"例如新的函数\",{\"1\":{\"1999\":1}}],[\"例如向服务器端的\",{\"1\":{\"1992\":1}}],[\"例如关于这个元素如何保存\",{\"1\":{\"1699\":1}}],[\"例如当使用集合时没有用泛型\",{\"1\":{\"1430\":1}}],[\"例如标记过时的功能\",{\"1\":{\"1388\":1}}],[\"例如javac编译工具等\",{\"1\":{\"778\":1}}],[\"例如jedis客户端技术\",{\"1\":{\"290\":1}}],[\"例如每日记录\",{\"1\":{\"257\":1}}],[\"例如\",{\"1\":{\"242\":1,\"262\":1,\"928\":1,\"1018\":1,\"1133\":1,\"1257\":1,\"1315\":1,\"1368\":1,\"1405\":1,\"1406\":1,\"1444\":1,\"1542\":1,\"1545\":1,\"1690\":1,\"1700\":1,\"1737\":1,\"1738\":1,\"2027\":1,\"2207\":1,\"2426\":1,\"2758\":1,\"3106\":1,\"3107\":1}}],[\"意味着此位置上存在一个或多个数据\",{\"1\":{\"1674\":1}}],[\"意味着myannotation的value值\",{\"1\":{\"1432\":1}}],[\"意味着empty\",{\"1\":{\"1432\":2}}],[\"意味着如果子类重写的方法中有异常\",{\"1\":{\"1355\":1}}],[\"意味着接口不可以实例化\",{\"1\":{\"1260\":1}}],[\"意味着\",{\"1\":{\"1013\":1,\"1025\":1,\"1116\":1}}],[\"意义明显\",{\"1\":{\"2343\":1}}],[\"意义不大\",{\"1\":{\"2253\":1}}],[\"意义\",{\"0\":{\"100\":1,\"1284\":1,\"1698\":1,\"2567\":1},\"1\":{\"783\":1,\"986\":1,\"1265\":1,\"1272\":1,\"1273\":1,\"1896\":1,\"2072\":1}}],[\"说法二\",{\"1\":{\"1118\":1}}],[\"说法一\",{\"1\":{\"1118\":1}}],[\"说\",{\"1\":{\"1010\":1}}],[\"说明状态正常\",{\"1\":{\"3157\":1}}],[\"说明一个servlet在内存中只存在一个对象\",{\"1\":{\"2547\":1}}],[\"说明artifacts配置有问题\",{\"1\":{\"2518\":1}}],[\"说明这个接口是一个函数式接口\",{\"1\":{\"2139\":1}}],[\"说明两个变量内存地址相同\",{\"1\":{\"877\":1}}],[\"说明\",{\"0\":{\"838\":1,\"844\":1,\"852\":1,\"858\":1,\"982\":1,\"1092\":1,\"1100\":1,\"1175\":1,\"1189\":1,\"1227\":1,\"1254\":1,\"1465\":1,\"1530\":1,\"1582\":1,\"1628\":1,\"1782\":1,\"1810\":1,\"1820\":1,\"1841\":1,\"1846\":1,\"1961\":1,\"2188\":1,\"2307\":1,\"2394\":1,\"2631\":1,\"2728\":1},\"1\":{\"336\":1,\"374\":1,\"554\":1,\"2157\":1,\"2298\":1,\"2426\":1,\"2812\":1,\"3031\":1}}],[\"吃饭\",{\"1\":{\"1010\":1}}],[\"行\",{\"1\":{\"3032\":1}}],[\"行为\",{\"1\":{\"1009\":1}}],[\"行结束符在\",{\"1\":{\"749\":1}}],[\"万维网使用\",{\"1\":{\"1934\":1}}],[\"万物皆文件\",{\"1\":{\"1768\":1}}],[\"万物皆对象\",{\"1\":{\"1005\":1,\"2012\":1}}],[\"万事万物皆对象\",{\"1\":{\"1007\":1}}],[\"形象类比\",{\"1\":{\"1958\":1}}],[\"形成复杂的业务逻辑功能\",{\"1\":{\"2758\":1}}],[\"形成传输数据通道\",{\"1\":{\"1956\":1}}],[\"形成了高效的四层体系结构\",{\"1\":{\"1955\":1}}],[\"形成了equals\",{\"1\":{\"1181\":1}}],[\"形成一张表\",{\"1\":{\"1860\":1}}],[\"形成链表时\",{\"1\":{\"1678\":1}}],[\"形成计算机世界中类的定义\",{\"1\":{\"1004\":1}}],[\"形参小括号\",{\"1\":{\"2116\":1}}],[\"形参也属于局部变量\",{\"1\":{\"1106\":1}}],[\"形参类型也相同的数组之间不构成重载\",{\"1\":{\"1047\":1}}],[\"形参不同的方法之间构成重载\",{\"1\":{\"1047\":1}}],[\"形参不能有默认值\",{\"1\":{\"1029\":1}}],[\"形参中的m\",{\"1\":{\"1044\":1}}],[\"形参变量名\",{\"1\":{\"1037\":1}}],[\"形参2\",{\"1\":{\"1029\":1}}],[\"形参1\",{\"1\":{\"1029\":1}}],[\"形参列表\",{\"1\":{\"1029\":2,\"1082\":4,\"1136\":1,\"1137\":1,\"1138\":2,\"1139\":3,\"1233\":1,\"2048\":2,\"2135\":1}}],[\"形参在调用时\",{\"1\":{\"1025\":1}}],[\"形参\",{\"1\":{\"828\":1,\"1041\":1}}],[\"封装对象\",{\"1\":{\"2754\":1}}],[\"封装为request对象\",{\"1\":{\"2590\":1}}],[\"封装通用的增删改操作\",{\"0\":{\"2330\":1}}],[\"封装逻辑\",{\"1\":{\"1285\":1}}],[\"封装数据库连接的获取和资源的关闭\",{\"0\":{\"2326\":1}}],[\"封装数据\",{\"1\":{\"1285\":1,\"2758\":1}}],[\"封装类\",{\"1\":{\"1189\":1}}],[\"封装和继承是独立的\",{\"1\":{\"1118\":1}}],[\"封装性的总结\",{\"0\":{\"1059\":1}}],[\"封装性的意义\",{\"0\":{\"1054\":1}}],[\"封装思想的体现\",{\"0\":{\"1058\":1}}],[\"封装\",{\"0\":{\"1050\":1,\"2352\":1},\"1\":{\"1003\":1}}],[\"聚合函数\",{\"1\":{\"3014\":1,\"3016\":1}}],[\"聚合函数的参数就是此次查询的名字\",{\"1\":{\"3014\":1}}],[\"聚合查询\",{\"1\":{\"3016\":1}}],[\"聚合查询的同时也会返回所有的数据信息\",{\"1\":{\"2954\":1}}],[\"聚合查询结果名字\",{\"1\":{\"2954\":7}}],[\"聚合允许使用者对\",{\"1\":{\"2953\":1,\"3013\":1}}],[\"聚合操作要使用aggs关键字定义\",{\"1\":{\"2954\":1}}],[\"聚合操作\",{\"0\":{\"2953\":1,\"3013\":1},\"1\":{\"3015\":1}}],[\"聚合\",{\"1\":{\"1002\":1,\"2953\":1,\"3013\":1,\"3014\":1}}],[\"考虑使用当前类充当同步监视器\",{\"1\":{\"1511\":1}}],[\"考虑重写\",{\"1\":{\"1127\":1}}],[\"考虑谁来做\",{\"1\":{\"1002\":1}}],[\"考虑怎么做\",{\"1\":{\"1002\":1}}],[\"考虑清楚应该将哪个结构声明在上面\",{\"1\":{\"924\":1}}],[\"情况三\",{\"0\":{\"2163\":1,\"2166\":1}}],[\"情况二\",{\"0\":{\"2160\":1}}],[\"情况3\",{\"1\":{\"998\":1,\"1643\":1,\"1674\":2,\"2150\":1,\"2152\":1}}],[\"情况2\",{\"1\":{\"998\":1,\"1643\":1,\"1674\":1,\"2150\":1}}],[\"情况1和2\",{\"1\":{\"2152\":1}}],[\"情况1\",{\"0\":{\"2154\":1,\"2157\":1},\"1\":{\"998\":1,\"1643\":1,\"1674\":1,\"2150\":1}}],[\"赋予角色所属的数据库\",{\"1\":{\"3193\":1}}],[\"赋予root角色\",{\"1\":{\"3193\":1}}],[\"赋予权限\",{\"1\":{\"3193\":1}}],[\"赋的值也必须是个数组\",{\"1\":{\"988\":1}}],[\"赋值该证书到所有节点所在的设备\",{\"1\":{\"3213\":1}}],[\"赋值为columvalue\",{\"1\":{\"2352\":1,\"2355\":1,\"2405\":2}}],[\"赋值形式的多态\",{\"0\":{\"1160\":1}}],[\"赋值时自动获得长度\",{\"1\":{\"971\":1}}],[\"赋值运算符\",{\"0\":{\"894\":1,\"895\":1}}],[\"赋值给b2\",{\"1\":{\"893\":1}}],[\"赋值相同的值\",{\"1\":{\"877\":1}}],[\"赋值的过程就自动发生了变量提升\",{\"1\":{\"868\":1}}],[\"赋值的变量必须已经声明过了\",{\"1\":{\"822\":1}}],[\"赋值\",{\"0\":{\"965\":1,\"1743\":1},\"1\":{\"825\":1,\"866\":1,\"963\":1,\"966\":1,\"970\":1,\"1075\":1}}],[\"堆栈追踪\",{\"1\":{\"1339\":1,\"1341\":1}}],[\"堆溢出\",{\"1\":{\"1312\":1}}],[\"堆内存中又开辟了一块内存空间储存对象的实体\",{\"1\":{\"1302\":1}}],[\"堆内存中储存\",{\"1\":{\"979\":1}}],[\"堆\",{\"1\":{\"978\":1,\"1298\":1,\"1453\":1}}],[\"栈溢出\",{\"1\":{\"1312\":1}}],[\"栈\",{\"1\":{\"978\":1,\"1298\":1,\"1453\":1}}],[\"静态资源和动态资源\",{\"1\":{\"2523\":1}}],[\"静态资源目录\",{\"1\":{\"2472\":1}}],[\"静态资源可以直接被浏览器解析\",{\"1\":{\"2447\":1}}],[\"静态资源\",{\"1\":{\"2447\":1}}],[\"静态代理示例\",{\"0\":{\"2078\":1}}],[\"静态代理需要\",{\"1\":{\"2075\":1}}],[\"静态代理\",{\"0\":{\"2074\":1}}],[\"静态代码块内只能调用静态的属性\",{\"1\":{\"1279\":1}}],[\"静态代码块的执行要优先于非静态代码块的执行\",{\"1\":{\"1279\":1}}],[\"静态代码块\",{\"0\":{\"1279\":1},\"1\":{\"1277\":1,\"1278\":1}}],[\"静态内部类\",{\"1\":{\"2016\":1}}],[\"静态语言\",{\"1\":{\"1999\":1}}],[\"静态化\",{\"0\":{\"1734\":1}}],[\"静态对象\",{\"1\":{\"1435\":1}}],[\"静态的方法\",{\"1\":{\"1279\":1,\"1280\":1}}],[\"静态成员的生命周期同步\",{\"1\":{\"1237\":1}}],[\"静态成员内部类\",{\"1\":{\"1203\":2,\"1208\":1}}],[\"静态变量是随着类的加载而加载\",{\"1\":{\"1229\":1}}],[\"静态变量的使用\",{\"0\":{\"1230\":1}}],[\"静态变量的加载要早于对象的创建\",{\"1\":{\"1229\":1}}],[\"静态变量的加载\",{\"0\":{\"1229\":1}}],[\"静态变量的声明\",{\"0\":{\"1228\":1}}],[\"静态变量\",{\"1\":{\"1227\":1,\"1230\":1,\"1298\":1}}],[\"静态属性和非静态属性了\",{\"1\":{\"1227\":1}}],[\"静态属性\",{\"0\":{\"1226\":1},\"1\":{\"1227\":1}}],[\"静态绑定\",{\"1\":{\"1159\":2}}],[\"静态初始化已经赋值过了\",{\"1\":{\"987\":1}}],[\"静态初始化\",{\"0\":{\"971\":1,\"984\":1}}],[\"静态方法即可\",{\"1\":{\"2838\":1,\"2839\":1}}],[\"静态方法来获取inetaddress\",{\"1\":{\"1943\":1}}],[\"静态方法只是用来取代一些工具类的\",{\"1\":{\"1272\":1}}],[\"静态方法在实现类中是看不到\",{\"1\":{\"1272\":1}}],[\"静态方法和默认方法的意义\",{\"0\":{\"1271\":1}}],[\"静态方法中只能调用静态的方法和静态属性\",{\"1\":{\"1235\":1}}],[\"静态方法与非静态方法的对比\",{\"0\":{\"1235\":1}}],[\"静态方法的调用写是类或者null\",{\"1\":{\"2063\":1}}],[\"静态方法的调用\",{\"0\":{\"1234\":1}}],[\"静态方法的声明\",{\"0\":{\"1233\":1}}],[\"静态方法的处理\",{\"0\":{\"1127\":1}}],[\"静态方法也是随着类的加载而加载的\",{\"1\":{\"1232\":1}}],[\"静态方法\",{\"0\":{\"1231\":1,\"1268\":1,\"1272\":1,\"1695\":1,\"2160\":1},\"1\":{\"626\":1,\"1248\":1,\"1267\":1,\"1272\":1,\"2066\":1,\"2150\":1}}],[\"质数的个数为\",{\"1\":{\"956\":1}}],[\"质数测试\",{\"1\":{\"529\":1}}],[\"遍历cookies\",{\"1\":{\"2799\":1}}],[\"遍历获取的cookie数据\",{\"1\":{\"2796\":1}}],[\"遍历stream中集合的所有元素\",{\"1\":{\"2237\":1}}],[\"遍历偶数\",{\"1\":{\"2202\":1}}],[\"遍历结果\",{\"0\":{\"2044\":1}}],[\"遍历包含属性的数组\",{\"1\":{\"2041\":1}}],[\"遍历顺序与添加顺序一致\",{\"1\":{\"1683\":1}}],[\"遍历map元素时\",{\"1\":{\"1665\":1}}],[\"遍历linkedhashset集合\",{\"1\":{\"1654\":1}}],[\"遍历其内部数据时\",{\"1\":{\"1638\":1}}],[\"遍历集合\",{\"0\":{\"1603\":1}}],[\"遍历集合的底层调用iterator完成操作\",{\"1\":{\"1602\":1}}],[\"遍历的注意事项\",{\"0\":{\"1599\":1}}],[\"遍历方法\",{\"0\":{\"1590\":1}}],[\"遍历可变形参\",{\"0\":{\"1048\":1}}],[\"遍历二维数组就需要嵌套循环了\",{\"1\":{\"992\":1}}],[\"遍历数组\",{\"0\":{\"974\":1,\"992\":1,\"1604\":1}}],[\"遍历100000以内的自然数\",{\"1\":{\"956\":1}}],[\"遍历100以内的所有偶数\",{\"1\":{\"936\":2}}],[\"遍历100以内的偶数\",{\"1\":{\"933\":1,\"941\":1}}],[\"遍历操作不需获取collection或数组的长度\",{\"1\":{\"1602\":1}}],[\"遍历操作\",{\"0\":{\"710\":1}}],[\"今天真好\",{\"1\":{\"1383\":1}}],[\"今天\",{\"1\":{\"1383\":1}}],[\"今天不用上班\",{\"1\":{\"928\":1}}],[\"今天需要上班\",{\"1\":{\"928\":1}}],[\"让es服务器返回所有索引的基本信息\",{\"1\":{\"2891\":1}}],[\"让web开发更加便捷\",{\"1\":{\"2446\":1}}],[\"让用户通过浏览器来访问这些项目\",{\"1\":{\"2446\":1}}],[\"让用户传输\",{\"1\":{\"2331\":1}}],[\"让mysql开启批处理的支持\",{\"1\":{\"2375\":1}}],[\"让它可以识别各个国家的文字\",{\"1\":{\"1860\":1}}],[\"让编辑器帮我们重写即可\",{\"1\":{\"1649\":1}}],[\"让编译器对\",{\"1\":{\"1427\":1}}],[\"让出\",{\"1\":{\"1501\":1}}],[\"让当前线程睡眠\",{\"1\":{\"1481\":1}}],[\"让当前线程\",{\"1\":{\"1479\":1}}],[\"让start方法去调用run\",{\"1\":{\"1476\":1}}],[\"让子类去实现\",{\"1\":{\"1250\":1}}],[\"让子类实例化\",{\"1\":{\"1246\":1}}],[\"让代码更简洁\",{\"1\":{\"928\":1}}],[\"让idea自动进行热部署\",{\"1\":{\"144\":1}}],[\"末尾结束为止\",{\"1\":{\"927\":1}}],[\"循环cookie\",{\"1\":{\"2796\":1}}],[\"循环遍历获取打印请求头\",{\"1\":{\"2602\":1}}],[\"循环获取每一行数据\",{\"1\":{\"2355\":1}}],[\"循环获取结果集中每列的数据\",{\"1\":{\"2352\":1}}],[\"循环读\",{\"1\":{\"1836\":1}}],[\"循环读取\",{\"1\":{\"565\":1,\"566\":1}}],[\"循环全部读入\",{\"1\":{\"1804\":1}}],[\"循环\",{\"0\":{\"1601\":1}}],[\"循环创建对象\",{\"1\":{\"1018\":1}}],[\"循环是可以嵌套的\",{\"1\":{\"951\":1}}],[\"循环语句中\",{\"1\":{\"944\":1,\"945\":1,\"947\":1,\"949\":1}}],[\"循环控制\",{\"0\":{\"943\":1}}],[\"循环内定义\",{\"1\":{\"933\":1}}],[\"循环体\",{\"1\":{\"931\":1,\"932\":3,\"935\":3,\"938\":2,\"940\":1}}],[\"循环条件\",{\"1\":{\"931\":1,\"932\":4,\"935\":4,\"940\":1}}],[\"循环的组成部分\",{\"0\":{\"931\":1}}],[\"循环结构的4个要素\",{\"1\":{\"931\":1}}],[\"循环结构\",{\"1\":{\"917\":1}}],[\"冲上到下逐行执行\",{\"1\":{\"917\":1}}],[\"ⅶ\",{\"0\":{\"916\":1,\"951\":1,\"1431\":1,\"2228\":1,\"2268\":1}}],[\"决定执行表达式1\",{\"1\":{\"911\":1}}],[\"双击弹出框中待生成jar包下面的build即可\",{\"1\":{\"2744\":1}}],[\"双击按照提示补齐webapp目录\",{\"1\":{\"2495\":1}}],[\"双击bin\",{\"1\":{\"2455\":1,\"2456\":1}}],[\"双参构造器创建的\",{\"1\":{\"2178\":1}}],[\"双方都知道对方是谁了\",{\"1\":{\"1958\":1}}],[\"双列数据\",{\"1\":{\"1578\":1,\"1662\":1}}],[\"双分支\",{\"0\":{\"921\":1}}],[\"双\",{\"1\":{\"905\":1}}],[\"双精度\",{\"1\":{\"846\":1}}],[\"短路情况\",{\"0\":{\"905\":1}}],[\"短路或\",{\"1\":{\"903\":1}}],[\"短路与\",{\"1\":{\"903\":1}}],[\"逻辑删除\",{\"1\":{\"2893\":1}}],[\"逻辑代码只写在doget方法中\",{\"1\":{\"2614\":1}}],[\"逻辑链条\",{\"0\":{\"2085\":1}}],[\"逻辑修改了\",{\"1\":{\"1286\":1}}],[\"逻辑异或\",{\"1\":{\"903\":1}}],[\"逻辑非\",{\"1\":{\"903\":1}}],[\"逻辑或\",{\"1\":{\"903\":1}}],[\"逻辑与\",{\"1\":{\"903\":1}}],[\"逻辑运算符用于连接布尔型表达式\",{\"1\":{\"904\":1}}],[\"逻辑运算符\",{\"0\":{\"902\":1}}],[\"√\",{\"1\":{\"901\":1,\"2872\":6}}],[\"扩展内容\",{\"0\":{\"3269\":1}}],[\"扩展名匹配\",{\"0\":{\"2576\":1},\"1\":{\"2578\":1}}],[\"扩展名\",{\"1\":{\"2573\":1}}],[\"扩展类加载器\",{\"1\":{\"2031\":1}}],[\"扩展\",{\"0\":{\"1447\":1},\"1\":{\"1113\":1}}],[\"扩展赋值运算符\",{\"0\":{\"896\":1},\"1\":{\"897\":1}}],[\"扩容的临界值\",{\"1\":{\"1680\":1}}],[\"扩容是非常消耗资源的\",{\"1\":{\"1620\":1}}],[\"扩容为原来的容量的1\",{\"1\":{\"1619\":1}}],[\"扩容为原来容量的2倍\",{\"1\":{\"446\":1,\"1676\":1}}],[\"扩容\",{\"0\":{\"1619\":1,\"1676\":1},\"1\":{\"241\":1,\"1676\":1}}],[\"算学计算异常\",{\"0\":{\"1334\":1}}],[\"算出今天是否用上班\",{\"1\":{\"928\":1}}],[\"算术运算符\",{\"0\":{\"890\":1}}],[\"算法来存储集合中的元素\",{\"1\":{\"1635\":1}}],[\"算法为\",{\"1\":{\"516\":1}}],[\"算法\",{\"1\":{\"412\":1,\"663\":1,\"1650\":1,\"2162\":1}}],[\"算法是\",{\"1\":{\"411\":1,\"664\":1}}],[\"拼接操作\",{\"0\":{\"886\":1}}],[\"里存储文档数据和关系型数据库\",{\"1\":{\"2864\":1}}],[\"里的\",{\"1\":{\"2865\":1}}],[\"里的key和value都是string类型\",{\"1\":{\"1668\":1}}],[\"里的全部元素时有很好的性能\",{\"1\":{\"1638\":1}}],[\"里的值将无法改变\",{\"1\":{\"879\":1}}],[\"里面提取出来的\",{\"1\":{\"2963\":1}}],[\"里面\",{\"1\":{\"2963\":1}}],[\"里面可以有不同的查询属性\",{\"1\":{\"2933\":1}}],[\"里面可以声明三个有参的子标签\",{\"1\":{\"2777\":1}}],[\"里面用一个module来使用tomcat\",{\"1\":{\"2482\":1}}],[\"里面包含了所有jdbc的基本操作方法\",{\"1\":{\"2396\":1}}],[\"里面包含了构造器中所需的各个参数\",{\"1\":{\"2038\":1}}],[\"里面包含了一系列类\",{\"1\":{\"1086\":1}}],[\"里面是空的\",{\"1\":{\"1905\":1}}],[\"里面的所有方法都是静态的\",{\"1\":{\"2434\":1}}],[\"里面的代码提取出来声明成同步方法\",{\"1\":{\"1520\":1}}],[\"里面的配置都已经是固定的了\",{\"1\":{\"209\":1}}],[\"里面有无内容都可以编译\",{\"1\":{\"937\":1}}],[\"储存中文\",{\"0\":{\"2806\":1}}],[\"储存sessionid的cookie没有了\",{\"1\":{\"2676\":1}}],[\"储存结构图\",{\"0\":{\"1677\":1}}],[\"储存的方式\",{\"0\":{\"1644\":1}}],[\"储存的过程\",{\"0\":{\"979\":1}}],[\"储存无序的\",{\"1\":{\"1634\":1}}],[\"储存其他内存块的地址\",{\"1\":{\"1452\":1}}],[\"储存数据==\",{\"1\":{\"1451\":1}}],[\"储存数据时\",{\"1\":{\"872\":1}}],[\"储存值使用的是一个final数组\",{\"1\":{\"879\":1}}],[\"乘了一次2\",{\"1\":{\"909\":1}}],[\"乘以2的幂数\",{\"1\":{\"874\":1}}],[\"乘法运算\",{\"1\":{\"533\":1}}],[\"显示当前数据库\",{\"1\":{\"3168\":1}}],[\"显示列表的适配器\",{\"1\":{\"1291\":1}}],[\"显示打印的字符\",{\"1\":{\"639\":1,\"760\":1}}],[\"显式声明\",{\"1\":{\"1910\":1}}],[\"显式关闭文件\",{\"1\":{\"1789\":1}}],[\"显式的调用父类中声明的属性或方法\",{\"1\":{\"1132\":1}}],[\"显式初始化\",{\"1\":{\"1075\":1,\"1104\":2}}],[\"显式定义一个或多个构造器\",{\"1\":{\"1070\":1}}],[\"显然会让计算机的基础电路设计变得十分复杂\",{\"1\":{\"873\":1}}],[\"补齐maven\",{\"0\":{\"2491\":1,\"2495\":1}}],[\"补充\",{\"0\":{\"1650\":1,\"1859\":1},\"1\":{\"1168\":1,\"1511\":1,\"2354\":1}}],[\"补充说明\",{\"0\":{\"222\":1,\"463\":1,\"1016\":1,\"1554\":1,\"2005\":1}}],[\"补位的细节\",{\"0\":{\"908\":1}}],[\"补=\",{\"1\":{\"873\":1}}],[\"补\",{\"1\":{\"873\":2}}],[\"补码\",{\"0\":{\"873\":1},\"1\":{\"873\":1}}],[\"二是在java安装目录的jdk\",{\"1\":{\"2741\":1}}],[\"二者在使用场景中\",{\"1\":{\"3035\":1}}],[\"二者共同的父类是\",{\"1\":{\"1741\":1}}],[\"二者不能共存\",{\"1\":{\"1047\":1}}],[\"二者都是一种思想\",{\"1\":{\"1002\":1}}],[\"二维数组也要指定数据类型\",{\"1\":{\"995\":1}}],[\"二维数组的内存解析\",{\"0\":{\"994\":1}}],[\"二维数组的声明\",{\"0\":{\"983\":1}}],[\"二维数组每个元素的数组长度\",{\"1\":{\"986\":1}}],[\"二维数组中有3个一维数组\",{\"1\":{\"985\":1,\"986\":1}}],[\"二维数组\",{\"1\":{\"962\":1}}],[\"二选一\",{\"0\":{\"921\":1},\"1\":{\"2781\":1}}],[\"二进制转八进制\",{\"1\":{\"874\":1}}],[\"二进制转成十进制\",{\"1\":{\"874\":1}}],[\"二进制的整数有如下三种形式\",{\"1\":{\"873\":1}}],[\"二进制\",{\"1\":{\"871\":1,\"874\":3}}],[\"二级属性名\",{\"1\":{\"127\":2}}],[\"溢出\",{\"1\":{\"869\":1,\"1458\":1}}],[\"截断流\",{\"1\":{\"2212\":1}}],[\"截断\",{\"0\":{\"2212\":1}}],[\"截断操作\",{\"1\":{\"869\":1}}],[\"截取如下\",{\"1\":{\"95\":1}}],[\"故障测试\",{\"0\":{\"3176\":1}}],[\"故可以使用方法因引用\",{\"1\":{\"2168\":1}}],[\"故可以进行方法引用\",{\"1\":{\"2165\":1}}],[\"故可以省略参数\",{\"1\":{\"2156\":1}}],[\"故是不可靠的\",{\"1\":{\"1957\":1}}],[\"故建议\",{\"1\":{\"1910\":1}}],[\"故报错\",{\"1\":{\"868\":1}}],[\"故用到java\",{\"1\":{\"530\":1}}],[\"容量小的类型自动转换为容量大的数据类型\",{\"1\":{\"863\":1}}],[\"容器会释放这个servlet实例\",{\"1\":{\"2550\":1}}],[\"容器就会调用servlet实例的destroy\",{\"1\":{\"2550\":1}}],[\"容器将自动调用servlet的init\",{\"1\":{\"2548\":1}}],[\"容器\",{\"0\":{\"104\":1},\"1\":{\"1572\":1}}],[\"布尔值\",{\"1\":{\"3034\":1}}],[\"布尔变量\",{\"1\":{\"924\":1}}],[\"布尔类型\",{\"0\":{\"857\":1}}],[\"布尔型\",{\"1\":{\"827\":1,\"1025\":1}}],[\"帅\",{\"1\":{\"854\":1}}],[\"答案是向下转型\",{\"1\":{\"1162\":1}}],[\"答案是\",{\"1\":{\"850\":1}}],[\"知识补充\",{\"0\":{\"850\":1}}],[\"却只占用4个字节\",{\"1\":{\"849\":1}}],[\"尾数可以精确到7位有效数字\",{\"1\":{\"846\":1}}],[\"科学计数法形式\",{\"1\":{\"845\":1}}],[\"浮点数\",{\"1\":{\"3034\":1}}],[\"浮点常量\",{\"1\":{\"867\":1}}],[\"浮点类型也有固定的表示范围和字段长度\",{\"1\":{\"844\":1}}],[\"浮点类型\",{\"0\":{\"843\":1}}],[\"浮点型的两种表示方式\",{\"0\":{\"845\":1}}],[\"浮点型其实就是小数\",{\"1\":{\"844\":1}}],[\"浮点型\",{\"1\":{\"827\":1,\"1025\":1}}],[\"才会被拦截\",{\"1\":{\"2702\":1}}],[\"才会被拦截拦截\",{\"1\":{\"2702\":1}}],[\"才会执行destroy方法\",{\"1\":{\"2554\":1}}],[\"才会结束执行\",{\"1\":{\"581\":1,\"1834\":1}}],[\"才重新从文件中读取下一个8192个字节数组\",{\"1\":{\"1826\":1}}],[\"才重新进入cpu分配线程的队列\",{\"1\":{\"1481\":1}}],[\"才真正创建了数组\",{\"1\":{\"1621\":1}}],[\"才能执行关闭服务命令\",{\"1\":{\"3207\":1}}],[\"才能继续访问接着访问\",{\"1\":{\"2698\":1}}],[\"才能被tomcat解析\",{\"1\":{\"2524\":1}}],[\"才能被其他线程拿到\",{\"1\":{\"1549\":1}}],[\"才能生效\",{\"1\":{\"2523\":1}}],[\"才能移动到任何后续结果\",{\"1\":{\"2323\":1}}],[\"才能使用多态的特性\",{\"1\":{\"1739\":1}}],[\"才能使用数组\",{\"1\":{\"963\":1}}],[\"才能更好的发挥多线程的效率\",{\"1\":{\"1441\":1}}],[\"才能通过这个对象去访问类中的非静态成员\",{\"1\":{\"1293\":1}}],[\"才能为内层元素赋值\",{\"1\":{\"989\":1}}],[\"才可以访问数组中的每个元素\",{\"1\":{\"972\":1}}],[\"才使用long\",{\"1\":{\"842\":1}}],[\"型的构造器向构造器的形参中传递一个对象数组进去\",{\"1\":{\"2038\":1}}],[\"型数据用来表示通常意义上\",{\"1\":{\"852\":1}}],[\"型\",{\"1\":{\"842\":1}}],[\"四川麻辣烫\",{\"1\":{\"2096\":1}}],[\"四种java文件\",{\"0\":{\"1295\":1}}],[\"四种权限从大到小为\",{\"1\":{\"1061\":1}}],[\"四种访问权限修饰符\",{\"0\":{\"1061\":1}}],[\"四种整形的对比\",{\"0\":{\"839\":1}}],[\"四种整形仅仅是储存空间大小和表示的数据范围有区别\",{\"1\":{\"838\":1}}],[\"四舍五入\",{\"0\":{\"516\":1,\"518\":1},\"1\":{\"536\":1}}],[\"规则\",{\"1\":{\"2772\":1}}],[\"规则是必须遵守的\",{\"1\":{\"834\":1}}],[\"规定xml文档\",{\"1\":{\"2774\":1}}],[\"规定了数据传输的规则\",{\"1\":{\"2449\":1}}],[\"规定解析\",{\"0\":{\"1150\":1}}],[\"规定\",{\"0\":{\"1149\":1}}],[\"规范定义了如下类型的类的加载器\",{\"1\":{\"2031\":1}}],[\"规范\",{\"0\":{\"1258\":1},\"1\":{\"1089\":1,\"1258\":1}}],[\"规范是最好遵守的\",{\"1\":{\"835\":1}}],[\"合并两个路径\",{\"1\":{\"1918\":1}}],[\"合并成一行\",{\"1\":{\"984\":1}}],[\"合并计入error\",{\"1\":{\"246\":1}}],[\"合法标识符规则\",{\"0\":{\"834\":1}}],[\"现金\",{\"1\":{\"1368\":1}}],[\"现有java版本尚未使用\",{\"1\":{\"832\":1}}],[\"现在只需要使用compass即可\",{\"1\":{\"3052\":1}}],[\"现在只是作测试\",{\"1\":{\"372\":1}}],[\"现在版本的es中已经没有type这个概念了\",{\"1\":{\"2865\":1}}],[\"现在xml不用来作为前端显示页面了\",{\"1\":{\"2772\":1}}],[\"现在是1\",{\"1\":{\"2772\":1}}],[\"现在是类了可以调用tostring了\",{\"1\":{\"1192\":1}}],[\"现在\",{\"1\":{\"2247\":1}}],[\"现在我们可以定义一个泛型\",{\"1\":{\"1698\":1}}],[\"现在我们可以先将多个字符放入该数组中\",{\"1\":{\"567\":1}}],[\"现在的分布式项目基本都会用到redis和mongodb\",{\"1\":{\"3035\":1}}],[\"现在的服务器都是多核的\",{\"1\":{\"1441\":1}}],[\"现在的struts2有一部分也是基于注解的了\",{\"1\":{\"1388\":1}}],[\"现在不用子类继承\",{\"1\":{\"1249\":1}}],[\"现在已经是类了\",{\"1\":{\"1193\":1}}],[\"现在成了java基础\",{\"1\":{\"763\":1}}],[\"现在写的springboot项目都是单体项目\",{\"1\":{\"222\":1}}],[\"保留泛型\",{\"0\":{\"1725\":1,\"1726\":1}}],[\"保留字\",{\"0\":{\"832\":1}}],[\"保存用户名\",{\"1\":{\"3198\":1}}],[\"保存cookie\",{\"0\":{\"2802\":1},\"1\":{\"2791\":1}}],[\"保存的数据的顺序一致\",{\"1\":{\"1879\":1}}],[\"保存在变量中\",{\"1\":{\"1879\":1}}],[\"保存具有映射关系\",{\"1\":{\"1578\":1}}],[\"保存进符号表\",{\"1\":{\"1455\":1}}],[\"保存了对象的实体\",{\"1\":{\"1300\":1}}],[\"保存了具体字符串值的内存地址\",{\"1\":{\"883\":1}}],[\"保持沉默\",{\"1\":{\"1429\":1}}],[\"保证host无误\",{\"1\":{\"3225\":1}}],[\"保证所有的副本集节点都使用同一份证书\",{\"1\":{\"3213\":1}}],[\"保证此构造器是可访问的\",{\"1\":{\"2067\":1}}],[\"保证父类有此构造器\",{\"1\":{\"2037\":1}}],[\"保证了数据安全\",{\"1\":{\"1709\":1}}],[\"保证添加的元素按照equals\",{\"1\":{\"1634\":1}}],[\"保证线程安全\",{\"1\":{\"1522\":1}}],[\"保证不能在类的外部创建其对象\",{\"1\":{\"1372\":1}}],[\"保证当前构造器是可访问的\",{\"1\":{\"630\":1}}],[\"保证当前方法是可访问的\",{\"1\":{\"627\":1,\"2063\":1}}],[\"保证当前属性是可访问的\",{\"1\":{\"618\":1,\"2058\":1}}],[\"官方下载地址\",{\"1\":{\"3055\":1}}],[\"官方地址\",{\"1\":{\"831\":1}}],[\"官网等\",{\"1\":{\"811\":1}}],[\"官网\",{\"1\":{\"81\":1,\"774\":1,\"2450\":1,\"3022\":1}}],[\"官网文档\",{\"1\":{\"60\":1,\"61\":1}}],[\"成功\",{\"1\":{\"2930\":1}}],[\"成功的获取了bean\",{\"1\":{\"104\":1}}],[\"成员的投票支持的\",{\"1\":{\"3172\":1}}],[\"成员的投票支持的节点获胜\",{\"1\":{\"3172\":1}}],[\"成员\",{\"1\":{\"1207\":2,\"1390\":1,\"1408\":1,\"2002\":1,\"2016\":1,\"2986\":1,\"2987\":1}}],[\"成员内部类调用外部结构\",{\"0\":{\"1209\":1}}],[\"成员内部类可以直接使用外部类的所有成员\",{\"1\":{\"1207\":1}}],[\"成员内部类的特点\",{\"0\":{\"1204\":1}}],[\"成员内部类\",{\"1\":{\"1203\":2,\"2016\":1}}],[\"成员变量的值\",{\"0\":{\"1411\":1}}],[\"成员变量指定值\",{\"1\":{\"1410\":1}}],[\"成员变量\",{\"1\":{\"828\":1,\"1009\":1,\"1023\":1,\"1387\":1}}],[\"强大的全文搜索引擎\",{\"1\":{\"2851\":1}}],[\"强转时\",{\"1\":{\"1707\":1}}],[\"强转失败\",{\"1\":{\"1167\":1}}],[\"强烈建议使用枚举类\",{\"1\":{\"1368\":1}}],[\"强制查询结果为完全匹配\",{\"1\":{\"2944\":1}}],[\"强制关闭\",{\"1\":{\"2456\":1}}],[\"强制回收被占用连接\",{\"1\":{\"2419\":1}}],[\"强制结束当前线程\",{\"1\":{\"1479\":1}}],[\"强制转\",{\"1\":{\"1163\":1}}],[\"强制类型转换\",{\"0\":{\"869\":1}}],[\"强调具备了功能的对象\",{\"1\":{\"1002\":1}}],[\"强调的是功能行为\",{\"1\":{\"1002\":1}}],[\"强类型语言\",{\"1\":{\"826\":1}}],[\"强行对多个对象进行整体排序的比较\",{\"1\":{\"504\":1}}],[\"找出所有包含关键词的文档\",{\"1\":{\"2867\":1}}],[\"找不到jdk环境\",{\"1\":{\"2461\":1}}],[\"找不到该属性\",{\"1\":{\"2354\":1}}],[\"找不到该标识符\",{\"1\":{\"824\":1}}],[\"找到config\",{\"1\":{\"2860\":1}}],[\"找到servletdemo1这个类后\",{\"1\":{\"2537\":1}}],[\"找到主机后如何可靠高效地进行数据传输\",{\"1\":{\"1924\":1}}],[\"找到了就使用\",{\"1\":{\"1135\":1}}],[\"找到了就返回第一次出现的索引\",{\"1\":{\"646\":1}}],[\"找到即删除\",{\"1\":{\"664\":1}}],[\"跨\",{\"1\":{\"824\":1}}],[\"跨平台本质\",{\"1\":{\"767\":1}}],[\"跨平台\",{\"1\":{\"765\":1}}],[\"概述\",{\"0\":{\"900\":1,\"903\":1,\"907\":1,\"958\":1,\"1028\":1,\"1232\":1,\"1255\":1,\"1310\":1,\"1461\":1,\"1661\":1,\"1914\":1,\"1922\":1,\"2276\":1,\"2522\":1,\"2731\":1,\"2754\":1,\"2758\":1,\"2841\":1,\"2867\":1,\"2876\":1,\"3125\":1}}],[\"概要描述\",{\"1\":{\"811\":1,\"812\":1}}],[\"概念上的定义\",{\"1\":{\"1007\":1}}],[\"概念补充\",{\"0\":{\"770\":1,\"1287\":1}}],[\"概念\",{\"0\":{\"189\":1,\"818\":1,\"959\":1,\"1041\":1,\"1433\":1,\"2671\":1,\"2680\":1,\"2812\":1,\"3181\":1},\"1\":{\"57\":1,\"1728\":1}}],[\"省去了直接操作消息头\",{\"1\":{\"2800\":1}}],[\"省去了传递class<t>\",{\"1\":{\"2403\":1}}],[\"省去了切换线程\",{\"1\":{\"1444\":1}}],[\"省去重新编译的过程\",{\"1\":{\"2304\":1}}],[\"省的再写一份\",{\"1\":{\"1082\":1}}],[\"省略很多非核心步骤\",{\"1\":{\"2583\":1}}],[\"省略驱动的注册\",{\"0\":{\"2300\":1}}],[\"省略1参的小括号\",{\"0\":{\"2126\":1}}],[\"省略数据类型\",{\"0\":{\"2124\":1}}],[\"省略这一对\",{\"1\":{\"2118\":1}}],[\"省略了exception处理\",{\"1\":{\"2377\":1}}],[\"省略了异常处理\",{\"1\":{\"1888\":1}}],[\"省略了public\",{\"1\":{\"1259\":2}}],[\"省略\",{\"0\":{\"2130\":1},\"1\":{\"1878\":1,\"1879\":1,\"1903\":1,\"1904\":1,\"1908\":1,\"1909\":1,\"2118\":1}}],[\"省略break的用法\",{\"0\":{\"928\":1}}],[\"省略大括号\",{\"1\":{\"923\":1}}],[\"省略类名\",{\"1\":{\"810\":1}}],[\"省略包名\",{\"1\":{\"810\":1}}],[\"省级名称\",{\"1\":{\"382\":1}}],[\"省级区划编号\",{\"1\":{\"382\":1}}],[\"块标记\",{\"1\":{\"808\":1}}],[\"放行\",{\"0\":{\"2698\":1}}],[\"放行后的逻辑\",{\"0\":{\"2700\":1},\"1\":{\"2697\":1}}],[\"放行前的逻辑\",{\"0\":{\"2699\":1},\"1\":{\"2697\":1}}],[\"放置依赖的jar包\",{\"1\":{\"2474\":1}}],[\"放到一个orm类中\",{\"1\":{\"2401\":1}}],[\"放到数据库更新方法的调用处\",{\"1\":{\"2383\":1}}],[\"放到集合中\",{\"1\":{\"2355\":1}}],[\"放外面\",{\"1\":{\"1804\":1}}],[\"放入线程池中\",{\"1\":{\"1564\":1}}],[\"放入后端的resource\",{\"1\":{\"391\":1}}],[\"放在类\",{\"1\":{\"808\":1}}],[\"整个集群会选出一个\",{\"1\":{\"3128\":1}}],[\"整个文档的数据全部替换\",{\"1\":{\"2909\":1}}],[\"整体步骤很固定\",{\"1\":{\"1250\":1}}],[\"整型数字\",{\"1\":{\"3074\":1}}],[\"整型\",{\"1\":{\"1025\":1}}],[\"整型常量\",{\"1\":{\"867\":1}}],[\"整形\",{\"0\":{\"837\":1},\"1\":{\"827\":1}}],[\"整理思路\",{\"1\":{\"805\":1}}],[\"整合mybatisplus\",{\"1\":{\"338\":1}}],[\"整合之后如果没有给开发者带来一些便捷操作\",{\"1\":{\"265\":1}}],[\"整合之后\",{\"1\":{\"265\":1}}],[\"调度决定\",{\"1\":{\"1476\":1}}],[\"调试\",{\"1\":{\"805\":1,\"2077\":1}}],[\"调用aggregation方法\",{\"1\":{\"3015\":1}}],[\"调用fuzziness方法可设置模糊查询的偏移值\",{\"1\":{\"3005\":1}}],[\"调用format方法\",{\"1\":{\"484\":1}}],[\"调用范围查询的方法\",{\"1\":{\"3002\":1,\"3003\":1}}],[\"调用组合方法\",{\"1\":{\"2996\":1,\"2997\":1}}],[\"调用的service方法中有创建session的代码\",{\"1\":{\"2820\":1}}],[\"调用的是空参构造器\",{\"1\":{\"2037\":1}}],[\"调用的是spring重写的showseason方法\",{\"1\":{\"1383\":1}}],[\"调用的是父类中声明的\",{\"1\":{\"1270\":1}}],[\"调用的是父类中的属性\",{\"1\":{\"1160\":1}}],[\"调用的是子类的方法\",{\"1\":{\"1160\":1}}],[\"调用的是子类中的say方法\",{\"1\":{\"1160\":1}}],[\"调用的是list\",{\"1\":{\"702\":1}}],[\"调用的是collection\",{\"1\":{\"702\":1}}],[\"调用业务逻辑层\",{\"1\":{\"2758\":1}}],[\"调用业务层获取数据\",{\"1\":{\"363\":1}}],[\"调用模型\",{\"1\":{\"2754\":1}}],[\"调用get方法\",{\"1\":{\"2614\":1}}],[\"调用getclass\",{\"0\":{\"2019\":1}}],[\"调用对应的方法来获取参数\",{\"1\":{\"2614\":1}}],[\"调用对象指定的属性\",{\"1\":{\"2009\":1}}],[\"调用对象的welcome\",{\"1\":{\"1158\":1}}],[\"调用不同的方法\",{\"1\":{\"2565\":1}}],[\"调用服务器资源\",{\"1\":{\"2446\":1}}],[\"调用服务端方法\",{\"1\":{\"1978\":1}}],[\"调用查询方法\",{\"1\":{\"2391\":1}}],[\"调用preparedstatement\",{\"1\":{\"2338\":1}}],[\"调用proxyfactory类的静态方法\",{\"1\":{\"2097\":1}}],[\"调用driver的connect\",{\"1\":{\"2297\":1}}],[\"调用自定义类的getname方法\",{\"1\":{\"2166\":1}}],[\"调用自己定义的重写的方法\",{\"1\":{\"1270\":1}}],[\"调用后进行日志记录\",{\"1\":{\"2099\":1}}],[\"调用被代理类方法前进行安全检查\",{\"1\":{\"2099\":1}}],[\"调用被代理类方法的方法\",{\"0\":{\"2092\":1}}],[\"调用被代理类方法的接口\",{\"0\":{\"2091\":1}}],[\"调用被代理类的同名方法\",{\"1\":{\"2097\":1}}],[\"调用nike工厂的producecloth方法进行衣服生产\",{\"1\":{\"2078\":1}}],[\"调用next\",{\"1\":{\"1870\":1}}],[\"调用此方法\",{\"1\":{\"2094\":1}}],[\"调用此方法后\",{\"1\":{\"1552\":1}}],[\"调用此构造器创建运行时类的对象\",{\"1\":{\"2067\":1}}],[\"调用构造器\",{\"0\":{\"2067\":1}}],[\"调用静态方法\",{\"1\":{\"2063\":1}}],[\"调用静态结构\",{\"1\":{\"1278\":1}}],[\"调用指定结构\",{\"0\":{\"2057\":1}}],[\"调用扩展类加载器的getparent\",{\"1\":{\"2032\":1}}],[\"调用系统类加载器的getparent\",{\"1\":{\"2032\":1}}],[\"调用类的静态成员\",{\"1\":{\"2029\":1}}],[\"调用类中被重写的showinfo方法\",{\"1\":{\"1382\":1}}],[\"调用class的静态方法\",{\"0\":{\"2020\":1}}],[\"调用运行时类的属性\",{\"0\":{\"2018\":1}}],[\"调用私有方法\",{\"1\":{\"2010\":1}}],[\"调用私有属性\",{\"1\":{\"2010\":1}}],[\"调用私有化构造器\",{\"1\":{\"2010\":1}}],[\"调用属性\",{\"0\":{\"2058\":1},\"1\":{\"2009\":1}}],[\"调用tostring方法\",{\"1\":{\"2008\":1}}],[\"调用setstatus方法响应一个302状态码\",{\"1\":{\"2659\":1}}],[\"调用setblob方法\",{\"1\":{\"2364\":1}}],[\"调用socket的发送\",{\"1\":{\"1982\":1}}],[\"调用start方法\",{\"1\":{\"1472\":1,\"1562\":1}}],[\"调用string的valueof\",{\"1\":{\"1197\":1}}],[\"调用string的构造器\",{\"1\":{\"426\":1}}],[\"调用string重载的valueof\",{\"1\":{\"1197\":1}}],[\"调用student\",{\"1\":{\"1156\":1}}],[\"调用客户端方法\",{\"1\":{\"1978\":1}}],[\"调用该socket\",{\"1\":{\"1973\":1}}],[\"调用该实例的getclass\",{\"1\":{\"587\":1,\"2019\":1}}],[\"调用\",{\"1\":{\"1973\":2,\"2322\":1,\"2323\":1,\"2340\":1,\"2554\":1}}],[\"调用参数设置为泛型的函数\",{\"1\":{\"1720\":1}}],[\"调用key1所在类的equals\",{\"1\":{\"1674\":1}}],[\"调用key1所在类的hashcode\",{\"1\":{\"1674\":1}}],[\"调用多个方法\",{\"1\":{\"1444\":1}}],[\"调用info方法\",{\"1\":{\"1383\":1}}],[\"调用者分为其他方法调用\",{\"1\":{\"1359\":1}}],[\"调用非静态结构\",{\"1\":{\"1278\":1}}],[\"调用接口中的默认方法\",{\"1\":{\"1270\":1}}],[\"调用时\",{\"1\":{\"1269\":1}}],[\"调用匿名类里的eat方法\",{\"1\":{\"1249\":1}}],[\"调用外部类的name\",{\"1\":{\"1209\":1}}],[\"调用内部类的name\",{\"1\":{\"1209\":1}}],[\"调用包装类xxx的xxxvalue\",{\"1\":{\"1194\":1}}],[\"调用了size\",{\"1\":{\"3015\":1}}],[\"调用了person对象的tostring方法\",{\"1\":{\"2009\":1}}],[\"调用了对应包装类的tostring\",{\"1\":{\"1187\":1}}],[\"调用了父类的构造器\",{\"1\":{\"1144\":1}}],[\"调用父类中的构造器\",{\"1\":{\"1139\":1}}],[\"调用父类中的say\",{\"1\":{\"1134\":1}}],[\"调用父类中声明的指定的构造器\",{\"1\":{\"1136\":1}}],[\"调用父类属性和方法\",{\"0\":{\"1132\":1}}],[\"调用本类中指定的其他构造器\",{\"1\":{\"1082\":1}}],[\"调用当前线程的run\",{\"1\":{\"1472\":1,\"1479\":1}}],[\"调用当前正在创建的对象属性或方法\",{\"1\":{\"1081\":1}}],[\"调用当前对象属性或方法\",{\"1\":{\"1080\":1}}],[\"调用方法的时候\",{\"1\":{\"2357\":1}}],[\"调用方法的必要条件\",{\"1\":{\"1552\":1,\"1553\":1}}],[\"调用方法a时\",{\"1\":{\"2095\":1}}],[\"调用方法\",{\"0\":{\"2063\":1},\"1\":{\"2009\":1}}],[\"调用方法时\",{\"1\":{\"1038\":1}}],[\"调用方法对象\",{\"1\":{\"626\":1,\"2066\":1}}],[\"调用在main所在类中声明的方法\",{\"0\":{\"1032\":1}}],[\"调用其执行语句\",{\"1\":{\"927\":1}}],[\"调用他的方法\",{\"1\":{\"803\":1}}],[\"调用没有main方法的class文件\",{\"1\":{\"803\":1}}],[\"调用比较器的某个方法进行正则匹配\",{\"1\":{\"750\":1}}],[\"调用某个matcher实例的方法\",{\"1\":{\"739\":1}}],[\"调用有参构造器\",{\"1\":{\"602\":1,\"2038\":1}}],[\"调用无参构造器\",{\"1\":{\"602\":1,\"2038\":1}}],[\"调用write\",{\"1\":{\"572\":1}}],[\"调用ofpattern方法\",{\"1\":{\"487\":1}}],[\"调用opsforxxx方法\",{\"1\":{\"288\":1}}],[\"调用like方法\",{\"1\":{\"355\":1}}],[\"调用日志对象的api记录日志\",{\"1\":{\"242\":1}}],[\"卸载\",{\"1\":{\"787\":1,\"2453\":1}}],[\"列值增长的修改\",{\"0\":{\"3084\":1}}],[\"列的名字和储存数据的对象中属性的名字是一一对应的\",{\"1\":{\"2354\":1}}],[\"列的别名\",{\"0\":{\"2354\":1}}],[\"列的索引\",{\"1\":{\"2343\":1}}],[\"列的label\",{\"1\":{\"2343\":1}}],[\"列的label或索引\",{\"1\":{\"2343\":1}}],[\"列名\",{\"1\":{\"2343\":1}}],[\"列出的实例系统会自动添加\",{\"1\":{\"1377\":1}}],[\"列出所有的java\",{\"1\":{\"787\":1}}],[\"列表\",{\"1\":{\"338\":1,\"399\":5}}],[\"傻瓜式安装即可\",{\"1\":{\"779\":1}}],[\"面向数据库的api\",{\"1\":{\"2283\":1}}],[\"面向应用的api\",{\"1\":{\"2283\":1}}],[\"面向函数\",{\"1\":{\"2133\":1}}],[\"面向传输的众多\",{\"1\":{\"1863\":1}}],[\"面向接口编程\",{\"1\":{\"1261\":1}}],[\"面向过程\",{\"1\":{\"1002\":2}}],[\"面向过程与面向对象\",{\"0\":{\"1002\":1}}],[\"面向过程语言\",{\"1\":{\"772\":1}}],[\"面向对象程序设计的重点是\",{\"1\":{\"1007\":1}}],[\"面向对象分析方法分析问题的思路和步骤\",{\"1\":{\"1004\":1}}],[\"面向对象的思想概述\",{\"0\":{\"1004\":1}}],[\"面向对象的三大特征\",{\"0\":{\"1003\":1}}],[\"面向对象更加强调运用人类在日常的思维逻辑中采用的思想方法与原则\",{\"1\":{\"1002\":1}}],[\"面向对象是相对于面向过程而言的\",{\"1\":{\"1002\":1}}],[\"面向对象语言对事物的体现都是以对象的形式\",{\"1\":{\"1572\":1}}],[\"面向对象语言\",{\"1\":{\"772\":1}}],[\"面向对象\",{\"0\":{\"1001\":1},\"1\":{\"765\":1,\"1002\":2}}],[\"汇编语言\",{\"1\":{\"772\":1}}],[\"垃圾收集机制\",{\"0\":{\"768\":1}}],[\"垃圾回收机制无法回收该资源\",{\"1\":{\"1789\":1}}],[\"垃圾回收线程\",{\"1\":{\"1441\":1}}],[\"垃圾回收方法\",{\"1\":{\"1176\":1}}],[\"垃圾回收\",{\"0\":{\"1457\":1},\"1\":{\"635\":1}}],[\"寄存器\",{\"1\":{\"767\":1}}],[\"负责将域名转化成ip地址\",{\"1\":{\"1936\":1}}],[\"负责执行指令\",{\"1\":{\"767\":1}}],[\"负数\",{\"1\":{\"2805\":1}}],[\"负数补码=\",{\"1\":{\"909\":1}}],[\"负数的补码是在其源码的基础上\",{\"1\":{\"873\":1}}],[\"负数的反码是源码基础上\",{\"1\":{\"873\":1}}],[\"负数就进一\",{\"1\":{\"536\":1}}],[\"负数就舍去\",{\"1\":{\"536\":1}}],[\"具有轻量性\",{\"1\":{\"3033\":1}}],[\"具有继承关系\",{\"0\":{\"1738\":1}}],[\"具有通用性\",{\"1\":{\"1175\":1}}],[\"具有指令集并使用不同的存储区域\",{\"1\":{\"767\":1}}],[\"具体应用场景\",{\"0\":{\"3027\":1}}],[\"具体看下图\",{\"1\":{\"2744\":1}}],[\"具体资源路径\",{\"1\":{\"2701\":1}}],[\"具体配置见上文\",{\"1\":{\"2506\":1}}],[\"具体获取方式见代码\",{\"1\":{\"2403\":1}}],[\"具体存储成什么样的字节流\",{\"1\":{\"1863\":1}}],[\"具体是什么类型无要求\",{\"1\":{\"1749\":1}}],[\"具体重写的规则和细节\",{\"1\":{\"1649\":1}}],[\"具体传输数据的细节\",{\"1\":{\"1264\":1}}],[\"具体执行时\",{\"1\":{\"1252\":1}}],[\"具体修饰的目标\",{\"0\":{\"1062\":1}}],[\"具体对象还需要我们进一步创建\",{\"1\":{\"1018\":1}}],[\"具体类型就是类名\",{\"1\":{\"1018\":1}}],[\"具体的\",{\"1\":{\"1083\":1}}],[\"具体的值也是保存在常量词中的\",{\"1\":{\"883\":1}}],[\"具体的格式\",{\"1\":{\"252\":1}}],[\"具体体现\",{\"0\":{\"880\":1}}],[\"具体舍入都可以\",{\"1\":{\"536\":1}}],[\"具体坐标如下\",{\"1\":{\"270\":1,\"280\":1}}],[\"具体见后续章节和微服务\",{\"1\":{\"118\":1}}],[\"具体如下\",{\"1\":{\"72\":1,\"975\":1}}],[\"企业都是restapi\",{\"1\":{\"2728\":1}}],[\"企业级应用\",{\"1\":{\"764\":1}}],[\"企业开发时更多的是基于springcloud的多服务器的微服务项目\",{\"1\":{\"222\":1}}],[\"没法在compass上直接看到\",{\"1\":{\"3198\":1}}],[\"没法直接获取\",{\"1\":{\"757\":1}}],[\"没必要通过这个方法获取\",{\"1\":{\"2602\":1}}],[\"没这个选项\",{\"1\":{\"2514\":1}}],[\"没报错\",{\"1\":{\"1721\":1}}],[\"没发挥多线程的功能\",{\"1\":{\"1525\":1}}],[\"没锁住所有有安全问题的代码\",{\"1\":{\"1525\":1}}],[\"没导入的用全类名\",{\"1\":{\"1096\":1}}],[\"没加l\",{\"1\":{\"868\":1}}],[\"没有会报错\",{\"1\":{\"2899\":1}}],[\"没有到期的session也会跟着销毁\",{\"1\":{\"2676\":1}}],[\"没有什么太大的用处\",{\"1\":{\"2555\":1}}],[\"没有就返回false\",{\"1\":{\"2342\":1}}],[\"没有jdbc\",{\"0\":{\"2280\":1}}],[\"没有中间操作\",{\"1\":{\"2207\":1}}],[\"没有中文\",{\"1\":{\"60\":1,\"61\":1}}],[\"没有参数不可省略括号\",{\"1\":{\"2118\":1}}],[\"没有安全方面的问题\",{\"1\":{\"2027\":1}}],[\"没有继承抽象流基类\",{\"1\":{\"1880\":1}}],[\"没有指明泛型的类型\",{\"1\":{\"1711\":1}}],[\"没有指定泛型\",{\"1\":{\"1711\":1}}],[\"没有泛型时\",{\"0\":{\"1705\":1}}],[\"没有其他元素\",{\"1\":{\"1643\":1}}],[\"没有数据\",{\"1\":{\"1595\":1}}],[\"没有及时拿到新数据\",{\"1\":{\"1505\":1}}],[\"没有固定的先后顺序\",{\"1\":{\"1474\":1}}],[\"没有开启线程\",{\"1\":{\"1472\":1}}],[\"没有任何的变量或属性对它进行引用\",{\"1\":{\"1457\":1}}],[\"没有属性\",{\"1\":{\"1399\":1}}],[\"没有通过保存指针来用变量指向值\",{\"1\":{\"1307\":1}}],[\"没有使用static修饰的\",{\"1\":{\"1278\":1}}],[\"没有方法体\",{\"1\":{\"1247\":1}}],[\"没有必要每次使用配置文件数据\",{\"1\":{\"1243\":1}}],[\"没有限制\",{\"1\":{\"1165\":1}}],[\"没有多态\",{\"1\":{\"1161\":1}}],[\"没有显式的声明\",{\"1\":{\"1138\":1}}],[\"没有显式的赋给一个变量名\",{\"1\":{\"1019\":1}}],[\"没有改变iq\",{\"1\":{\"1106\":1}}],[\"没有特殊语法\",{\"1\":{\"1034\":1}}],[\"没有具体返回值的情况\",{\"1\":{\"1033\":1}}],[\"没有返回值的方法中\",{\"1\":{\"1029\":1}}],[\"没有返回值\",{\"1\":{\"1029\":1,\"1566\":1}}],[\"没有返回值就返回null\",{\"1\":{\"626\":1,\"2066\":1}}],[\"没有默认初始化值\",{\"1\":{\"1025\":1}}],[\"没有地址\",{\"1\":{\"993\":1}}],[\"没有初始化\",{\"1\":{\"993\":1,\"1241\":1,\"1521\":1}}],[\"没有关联数组一说\",{\"1\":{\"960\":1}}],[\"没有break时\",{\"1\":{\"927\":1}}],[\"没有小数位\",{\"1\":{\"891\":1}}],[\"没有加l时\",{\"1\":{\"868\":1}}],[\"没有这个大引号\",{\"1\":{\"810\":1}}],[\"没有main文件\",{\"0\":{\"802\":1}}],[\"没有他的时候\",{\"1\":{\"567\":1}}],[\"没有整合之前操作如果是模式a的话\",{\"1\":{\"265\":1}}],[\"未定义类型\",{\"1\":{\"3034\":1}}],[\"未发生变化\",{\"1\":{\"2656\":1}}],[\"未关闭数据库连接\",{\"1\":{\"2414\":1}}],[\"未能在因特网上进行广泛推广\",{\"1\":{\"1926\":1}}],[\"未检查的转换时的警告\",{\"1\":{\"1429\":1}}],[\"未来的开发模式都是基于注解的\",{\"1\":{\"1388\":1}}],[\"未付款\",{\"1\":{\"1368\":1}}],[\"未初始化则为null\",{\"1\":{\"995\":1}}],[\"未初始化的不能访问\",{\"1\":{\"995\":1}}],[\"未指定内层数组的长度\",{\"1\":{\"993\":1}}],[\"未指定内层数组长度的要先初始化内层数组才能访问内层元素\",{\"1\":{\"990\":1}}],[\"未指定内层数组长度\",{\"0\":{\"989\":1}}],[\"未指定数组内层长度\",{\"0\":{\"986\":1}}],[\"未知\",{\"1\":{\"749\":2}}],[\"未重写equals\",{\"1\":{\"662\":1}}],[\"搭配使用实现对字符序列的检索和指定模式匹配\",{\"1\":{\"745\":1}}],[\"搭建完项目后\",{\"1\":{\"2969\":1}}],[\"搭建普通的java项目或springboot项目即可\",{\"1\":{\"2969\":1}}],[\"搭建的\",{\"1\":{\"2844\":1}}],[\"搭建项目\",{\"0\":{\"386\":1,\"2969\":1}}],[\"搭建数据库并创建好数据表\",{\"1\":{\"205\":1}}],[\"必备\",{\"1\":{\"2772\":1}}],[\"必备条件有三个\",{\"1\":{\"2292\":1}}],[\"必定会传入一个servletconfig对象\",{\"1\":{\"2556\":1}}],[\"必须是从localhost登陆的\",{\"1\":{\"3207\":1}}],[\"必须是在admin库下执行该关闭服务命令\",{\"1\":{\"3207\":1}}],[\"必须使\",{\"1\":{\"3197\":1}}],[\"必须使用函数numberint\",{\"1\":{\"3074\":1}}],[\"必须使用在同步代码块或同步方法中\",{\"1\":{\"1555\":1}}],[\"必须使用try\",{\"1\":{\"1355\":1}}],[\"必须使用较大的数据类型进行接收\",{\"1\":{\"864\":1}}],[\"必须使用单引号\",{\"1\":{\"856\":1}}],[\"必须不\",{\"1\":{\"2935\":1,\"2996\":1}}],[\"必须\",{\"1\":{\"2935\":1,\"2996\":1}}],[\"必须heima开头后跟\",{\"1\":{\"2781\":1}}],[\"必须出现\",{\"1\":{\"2781\":1}}],[\"必须出现1次或多次\",{\"1\":{\"2777\":1}}],[\"必须设置\",{\"1\":{\"2777\":1}}],[\"必须进行放行\",{\"1\":{\"2698\":1}}],[\"必须要加\",{\"1\":{\"2571\":1}}],[\"必须要对这一异常进行处理\",{\"1\":{\"1990\":1}}],[\"必须实现servlet接口并复写其方法\",{\"1\":{\"2538\":1}}],[\"必须配置大于0\",{\"1\":{\"2426\":1}}],[\"必须保证该文件已存在\",{\"1\":{\"1797\":1}}],[\"必须创建该类的一个实例对象后\",{\"1\":{\"1293\":1}}],[\"必须返回是\",{\"1\":{\"1180\":1}}],[\"必须也是double\",{\"1\":{\"1125\":1}}],[\"必须借助父类的getxxx\",{\"1\":{\"1119\":1}}],[\"必须在主线程中创建新的线程对象\",{\"1\":{\"1501\":1}}],[\"必须在枚举类的第一行声明枚举类对象\",{\"1\":{\"1377\":1}}],[\"必须在对象创建前初始化\",{\"1\":{\"1104\":1}}],[\"必须在方法声明时\",{\"1\":{\"1029\":1}}],[\"必须添加this来表明该变量是类的成员变量\",{\"1\":{\"1084\":1}}],[\"必须声明在子类构造器的首行\",{\"1\":{\"1137\":1}}],[\"必须声明在当前构造器的首行\",{\"1\":{\"1082\":1}}],[\"必须声明在末尾\",{\"1\":{\"1047\":1}}],[\"必须一样\",{\"1\":{\"1069\":1}}],[\"必须用int类型接收\",{\"1\":{\"867\":1}}],[\"必须有登录且必须登录用户有对admin操作权限才可以\",{\"1\":{\"3207\":1}}],[\"必须有数据才行\",{\"1\":{\"2899\":1}}],[\"必须有小数点\",{\"1\":{\"845\":1}}],[\"必须有main方法\",{\"1\":{\"797\":1}}],[\"必须以\",{\"1\":{\"840\":1}}],[\"必须首先将指定为字符串的正则表达式编译为此类的实例\",{\"1\":{\"739\":1}}],[\"必学\",{\"1\":{\"11\":1}}],[\"我夏天空腹喝凉开水\",{\"1\":{\"3076\":1}}],[\"我的国籍是\",{\"1\":{\"2007\":1,\"2010\":1}}],[\"我知道了\",{\"1\":{\"1959\":1}}],[\"我知道你是a\",{\"1\":{\"1958\":1}}],[\"我爱n门\",{\"1\":{\"1903\":1}}],[\"我要断开连接了\",{\"1\":{\"1959\":1}}],[\"我要取款\",{\"1\":{\"1252\":1}}],[\"我要插入一个正则表达式的反斜线\",{\"1\":{\"737\":1}}],[\"我现在知道你知道我是a了\",{\"1\":{\"1958\":1}}],[\"我现在\",{\"1\":{\"1034\":1}}],[\"我是一个人\",{\"1\":{\"2007\":1,\"2008\":1,\"2009\":1}}],[\"我是b\",{\"1\":{\"1958\":1}}],[\"我是a\",{\"1\":{\"1958\":1}}],[\"我是\",{\"1\":{\"1034\":1}}],[\"我是jinno我现在12岁\",{\"1\":{\"1034\":1}}],[\"我是jinno我现在11岁\",{\"1\":{\"1034\":1}}],[\"我们如果需要查询同时满足两个以上条件\",{\"1\":{\"3102\":1}}],[\"我们查询数据时\",{\"1\":{\"2869\":1}}],[\"我们会先调用\",{\"1\":{\"2758\":1}}],[\"我们真正使用的类是requestfacade类\",{\"1\":{\"2588\":1}}],[\"我们来使用它们\",{\"1\":{\"2582\":1}}],[\"我们只需要将服务器传过来的servletconfig进行返回即可\",{\"1\":{\"2556\":1}}],[\"我们只管用就行\",{\"1\":{\"1564\":1}}],[\"我们并没有创建servlet类的对象\",{\"1\":{\"2535\":1}}],[\"我们并不知道要计算的代码具体是什么代码\",{\"1\":{\"1251\":1}}],[\"我们直接使用即可\",{\"1\":{\"2138\":1}}],[\"我们再调用代理类的方法时就会进行一些附加操作\",{\"1\":{\"2101\":1}}],[\"我们调用哪个类\",{\"1\":{\"2077\":1}}],[\"我们连接数据库时需要进行安全检查\",{\"1\":{\"2073\":1}}],[\"我们无法直接进行访问\",{\"1\":{\"2069\":1}}],[\"我们能够获取\",{\"1\":{\"2062\":1}}],[\"我们就可以查询到结果了\",{\"1\":{\"2869\":1}}],[\"我们就会用这个方法\",{\"1\":{\"2151\":1}}],[\"我们就称为运行时类\",{\"1\":{\"2013\":1}}],[\"我们就需要专业\",{\"1\":{\"2851\":1}}],[\"我们就需要抛出异常\",{\"1\":{\"1359\":1}}],[\"我们就需要对object类中的equals\",{\"1\":{\"1180\":1}}],[\"我们把类当做是对象\",{\"1\":{\"2012\":1}}],[\"我们形象的称之为\",{\"1\":{\"2000\":1}}],[\"我们已经知道\",{\"1\":{\"1863\":1}}],[\"我们操作file类是在内存层面上进行操作的\",{\"1\":{\"1762\":1}}],[\"我们操作f2时\",{\"1\":{\"561\":1}}],[\"我们定义了一个接口\",{\"1\":{\"2073\":1}}],[\"我们定义的方法中\",{\"1\":{\"1747\":1,\"1748\":1}}],[\"我们定义变量时\",{\"1\":{\"850\":1}}],[\"我们要多很多相似类都定义一个代理类\",{\"1\":{\"2076\":1}}],[\"我们要重写hashcode\",{\"1\":{\"1647\":1}}],[\"我们要想在子类中调用父类中声明的属性\",{\"1\":{\"1133\":1}}],[\"我们通常使用list替代数组\",{\"1\":{\"1610\":1}}],[\"我们通过同步机制\",{\"1\":{\"1508\":1}}],[\"我们通过实例化thread类的子类对象来创建多线程\",{\"1\":{\"1467\":1}}],[\"我们通过将属性设置为私有的\",{\"1\":{\"1056\":1}}],[\"我们也就只能操作指定类型的数据了\",{\"1\":{\"1573\":1}}],[\"我们也可以手动实现annotation接口来创建自定义注解\",{\"1\":{\"1390\":1}}],[\"我们使用\",{\"1\":{\"3102\":1}}],[\"我们使用类时\",{\"1\":{\"2014\":1}}],[\"我们使用类的成员时是通过具体的对象使用的\",{\"1\":{\"1011\":1}}],[\"我们使用功能泛型通配符\",{\"1\":{\"1749\":1}}],[\"我们使用同步时\",{\"1\":{\"1539\":1}}],[\"我们用thread类创建的其他线程\",{\"1\":{\"1465\":1}}],[\"我们复制文件\",{\"1\":{\"1444\":1}}],[\"我们称之为配置参数\",{\"1\":{\"1397\":1}}],[\"我们选择的异常类型有\",{\"1\":{\"1360\":1}}],[\"我们建议这几个方法使用throws的方式进行处理\",{\"1\":{\"1355\":1}}],[\"我们进行处理的效果是提示用户发生了资源缺失\",{\"1\":{\"1315\":1}}],[\"我们平时说的异常一般指的就是exception\",{\"1\":{\"1313\":1}}],[\"我们常说的异常处理\",{\"1\":{\"1312\":1}}],[\"我们有时候希望无论是否产生了对象或无论产生了多少对象的情况下\",{\"1\":{\"1223\":1}}],[\"我们自己写的java代码编译成的是class文件\",{\"1\":{\"2732\":1}}],[\"我们自己创建的springboot项目\",{\"1\":{\"96\":1}}],[\"我们自定义的类如果使用equals\",{\"1\":{\"1180\":1}}],[\"我们实际执行的是子类重写父类的方法\",{\"1\":{\"1149\":1}}],[\"我们不应该把清晨浪费在手机上\",{\"1\":{\"3076\":1}}],[\"我们不知道要创建什么对象\",{\"1\":{\"2005\":1}}],[\"我们不会去直接使用节点流\",{\"1\":{\"1791\":1,\"1795\":1}}],[\"我们不用为每一个泛型都定义一个同样的方法了\",{\"1\":{\"1748\":1}}],[\"我们不妨将此方法声明同步的\",{\"1\":{\"1517\":1}}],[\"我们不手动调用\",{\"1\":{\"1140\":1}}],[\"我们不能直接访问该类中的非静态成员\",{\"1\":{\"1293\":1}}],[\"我们不能为每一种数据库都定义一套方法\",{\"1\":{\"1153\":1}}],[\"我们不能使用传统的+\",{\"1\":{\"530\":1}}],[\"我们不能再原始配置文件上修改\",{\"1\":{\"220\":1}}],[\"我们想在子类的方法中调用父类中被重写的方法时\",{\"1\":{\"1134\":1}}],[\"我们习惯省略\",{\"1\":{\"1132\":1}}],[\"我们执行s1\",{\"1\":{\"1128\":1}}],[\"我们都能够获取到\",{\"1\":{\"2069\":1}}],[\"我们都是将对象格式化成json进行传输\",{\"1\":{\"1894\":1}}],[\"我们都选择省略this\",{\"1\":{\"1081\":1}}],[\"我们都将功能\",{\"1\":{\"1005\":1}}],[\"我们必须显式的使用\",{\"1\":{\"1080\":1,\"1081\":1}}],[\"我们必须返回一致的数据类型让前端使用\",{\"1\":{\"367\":1}}],[\"我们创建了类的多个对象\",{\"1\":{\"1227\":2}}],[\"我们创建对象时\",{\"1\":{\"1071\":1}}],[\"我们创建对象时进行的语法其实是调用的构造器\",{\"1\":{\"1067\":1}}],[\"我们创建的对象\",{\"1\":{\"1019\":1}}],[\"我们可以像springboot一样\",{\"1\":{\"2750\":1}}],[\"我们可以直接查看javaee的api文档中关于servletrequest和httpservletrequest的接口文档\",{\"1\":{\"2589\":1}}],[\"我们可以利用函数式接口\",{\"1\":{\"2136\":1}}],[\"我们可以利用反射机制\",{\"1\":{\"1999\":1}}],[\"我们可以更加灵活和统一的处理众多的方法\",{\"1\":{\"2077\":1}}],[\"我们可以通过不同的方式来获取此运行时类\",{\"1\":{\"2017\":1}}],[\"我们可以通过这个对象看到类的结构\",{\"1\":{\"2000\":1}}],[\"我们可以访问\",{\"1\":{\"1988\":1}}],[\"我们可以这样写\",{\"1\":{\"1916\":1}}],[\"我们可以用通配符解决这个问题\",{\"1\":{\"1739\":1}}],[\"我们可以用this来区分属性和局部变量\",{\"1\":{\"1083\":1}}],[\"我们可以考虑使用this充当同步监视器\",{\"1\":{\"1511\":1}}],[\"我们可以将其作为一个类\",{\"1\":{\"1252\":1}}],[\"我们可以到\",{\"1\":{\"1181\":1}}],[\"我们可以在反射中解析并使用\",{\"1\":{\"1431\":1}}],[\"我们可以在子类的构造器中显式的使用\",{\"1\":{\"1136\":1}}],[\"我们可以在子类的方法或构造器中\",{\"1\":{\"1132\":1}}],[\"我们可以在方法中通过方法体来验证和保护要访问的数据\",{\"1\":{\"1055\":1}}],[\"我们可以使用ﬁndone命令来实现\",{\"1\":{\"3092\":1}}],[\"我们可以使用class类的实例\",{\"1\":{\"2014\":1}}],[\"我们可以使用\",{\"1\":{\"1081\":1}}],[\"我们可以看成是一维数组array1又作为另一个一维数组array2的元素而存在\",{\"1\":{\"982\":1}}],[\"我们正确的做法是\",{\"1\":{\"1055\":1}}],[\"我们在搜索的时候输入关键字\",{\"1\":{\"2848\":1}}],[\"我们在page1\",{\"1\":{\"2672\":2}}],[\"我们在servlet中写的代码其实就是对http协议请求的一种响应\",{\"1\":{\"2560\":1,\"2567\":1}}],[\"我们在开发中\",{\"1\":{\"1921\":1}}],[\"我们在使用的时候\",{\"1\":{\"1748\":1}}],[\"我们在定义数据类型时\",{\"1\":{\"1698\":1}}],[\"我们在重写hashcode\",{\"1\":{\"1651\":1}}],[\"我们在向下转型之前\",{\"1\":{\"1167\":1}}],[\"我们在编译期\",{\"1\":{\"1149\":1}}],[\"我们在类的构造器中\",{\"1\":{\"1082\":1}}],[\"我们在类外部直接访问了类内部的属性\",{\"1\":{\"1055\":1}}],[\"我们在调用局部变量之前\",{\"1\":{\"1025\":1}}],[\"我们经常会用到将一个对象作为参数\",{\"1\":{\"1045\":1}}],[\"我们将m\",{\"1\":{\"1044\":1}}],[\"我们赋值即可\",{\"1\":{\"1025\":1}}],[\"我们需要两个步骤\",{\"1\":{\"2639\":1,\"2645\":1}}],[\"我们需要将查询到的结果\",{\"1\":{\"2401\":1}}],[\"我们需要将异常写入日志\",{\"1\":{\"1315\":1}}],[\"我们需要通过一个参数\",{\"1\":{\"2375\":1}}],[\"我们需要一个功能\",{\"1\":{\"2136\":1}}],[\"我们需要一次性创建20个person类的实例\",{\"1\":{\"1018\":1}}],[\"我们需要使用class类的对象拿到想要的内容\",{\"1\":{\"2012\":1}}],[\"我们需要建立符号表\",{\"1\":{\"1455\":1}}],[\"我们需要自己手动的进行资源的释放\",{\"1\":{\"1342\":1}}],[\"我们需要在user类中调用getuser方法获取数据\",{\"1\":{\"1153\":1}}],[\"我们需要对多个对象进行排序\",{\"1\":{\"491\":1}}],[\"我们是通过创建类和方法来完成一些功能的\",{\"1\":{\"1016\":1}}],[\"我们优先选择使用switch\",{\"1\":{\"929\":1}}],[\"我们写分支结构时\",{\"1\":{\"929\":1}}],[\"我们知道\",{\"1\":{\"873\":1}}],[\"我们输入的字符都是通过转码变成二进制让计算机识别的\",{\"1\":{\"855\":1}}],[\"我们一定会直接或间接的调用其父类的构造器\",{\"1\":{\"1144\":1}}],[\"我们一般都将属性定义为私有的\",{\"1\":{\"1064\":1}}],[\"我们一般使用string作为key\",{\"1\":{\"1686\":1}}],[\"我们一般使用时选择double\",{\"1\":{\"846\":1}}],[\"我们一般使用第三种\",{\"1\":{\"480\":1}}],[\"我们一次只能读1个字符\",{\"1\":{\"567\":1}}],[\"我们主要用该对象进行日期时间的\",{\"1\":{\"480\":1}}],[\"我们采用jdk8新增的时间api\",{\"1\":{\"457\":1}}],[\"什么标签名都可以\",{\"1\":{\"2767\":1}}],[\"什么时候调用\",{\"1\":{\"1476\":1}}],[\"什么都不返回\",{\"1\":{\"726\":1,\"2144\":1,\"2598\":1}}],[\"什么是映射\",{\"1\":{\"2961\":1}}],[\"什么是约束\",{\"0\":{\"2774\":1}}],[\"什么是io\",{\"1\":{\"1773\":1}}],[\"什么是annotation\",{\"0\":{\"1387\":1}}],[\"什么是枚举类\",{\"0\":{\"1368\":1}}],[\"什么是包\",{\"0\":{\"1086\":1}}],[\"什么是封装\",{\"0\":{\"1053\":1}}],[\"什么是类与对象\",{\"0\":{\"1007\":1}}],[\"什么是多环境\",{\"1\":{\"223\":1}}],[\"什么是starter\",{\"0\":{\"99\":1}}],[\"什么是快捷笔记\",{\"1\":{\"1\":1}}],[\"消耗5s\",{\"1\":{\"2377\":1}}],[\"消耗\",{\"1\":{\"2373\":1,\"2374\":1}}],[\"消耗400s\",{\"1\":{\"2372\":1}}],[\"消费问题\",{\"0\":{\"1506\":1}}],[\"消费型functional\",{\"1\":{\"730\":1}}],[\"消费型\",{\"1\":{\"726\":1,\"2144\":1}}],[\"消息与缓存\",{\"0\":{\"327\":1}}],[\"消息\",{\"1\":{\"253\":1,\"336\":1}}],[\"消息队列rabbitmq依赖\",{\"1\":{\"328\":1}}],[\"消息队列\",{\"1\":{\"11\":1,\"29\":1}}],[\"〇\",{\"0\":{\"725\":1}}],[\"拥有可变参数\",{\"1\":{\"1128\":1}}],[\"拥有了iterator接口\",{\"1\":{\"721\":1,\"723\":1}}],[\"拥有所有权限\",{\"1\":{\"400\":1}}],[\"增删改查可以添加很多条件\",{\"1\":{\"3036\":1}}],[\"增强了对文件处理和文件系统特性的支持\",{\"1\":{\"1914\":1}}],[\"增强for循环\",{\"0\":{\"1607\":1}}],[\"增强for循环中\",{\"1\":{\"1605\":1}}],[\"增强\",{\"0\":{\"1601\":1}}],[\"增强代码的可维护性\",{\"1\":{\"1057\":1}}],[\"增改集合\",{\"1\":{\"712\":1}}],[\"增改元素\",{\"1\":{\"711\":1}}],[\"增加了\",{\"1\":{\"1582\":1}}],[\"增加了对元数据\",{\"1\":{\"1386\":1}}],[\"增加可读性\",{\"1\":{\"805\":1}}],[\"增加日期时间\",{\"1\":{\"473\":1}}],[\"增加\",{\"1\":{\"347\":1}}],[\"特别是企业级应用\",{\"1\":{\"2277\":1}}],[\"特别地\",{\"1\":{\"1025\":1}}],[\"特征是代理类和目标对象的类都是在编译期间确定下来\",{\"1\":{\"2074\":1}}],[\"特征\",{\"1\":{\"1019\":1}}],[\"特殊字符还是不支持\",{\"1\":{\"2806\":1}}],[\"特殊配置参数\",{\"0\":{\"1399\":1},\"1\":{\"1393\":1}}],[\"特殊结构\",{\"0\":{\"1274\":1}}],[\"特殊对象对tostring的重写\",{\"0\":{\"1185\":1}}],[\"特殊类\",{\"0\":{\"1173\":1}}],[\"特殊形式对象\",{\"0\":{\"1017\":1}}],[\"特殊关键字\",{\"1\":{\"943\":1}}],[\"特殊情况下省略的内容\",{\"0\":{\"2116\":1}}],[\"特殊情况下\",{\"1\":{\"1080\":1,\"1081\":1}}],[\"特殊情况\",{\"0\":{\"865\":1,\"1182\":1},\"1\":{\"1124\":1}}],[\"特殊的0\",{\"1\":{\"530\":1}}],[\"特点\",{\"0\":{\"1216\":1,\"1636\":1,\"1685\":1,\"2086\":1},\"1\":{\"830\":1,\"1639\":1,\"1654\":1,\"1665\":1}}],[\"特性\",{\"0\":{\"709\":1}}],[\"被观察者\",{\"1\":{\"2709\":4}}],[\"被拦截器拦截\",{\"1\":{\"2699\":1}}],[\"被`h1`渲染后的hello\",{\"1\":{\"2642\":1}}],[\"被代理类的对象\",{\"1\":{\"2094\":1,\"2095\":1}}],[\"被代理类中的所有方法都会被代理类中的invoke方法增强\",{\"1\":{\"2086\":1}}],[\"被代理类\",{\"0\":{\"2081\":1},\"1\":{\"2073\":1,\"2078\":1,\"2096\":1}}],[\"被预先定义的服务通信占用\",{\"1\":{\"1938\":1}}],[\"被规定为一个16位的整数\",{\"1\":{\"1937\":1}}],[\"被占着者\",{\"1\":{\"1548\":1}}],[\"被保证线程安全的代码\",{\"1\":{\"1532\":1}}],[\"被人为挂起或执行输入输出操作时\",{\"1\":{\"1501\":1}}],[\"被\",{\"1\":{\"1432\":1}}],[\"被它修饰的\",{\"1\":{\"1416\":1}}],[\"被他修饰类就是枚举类\",{\"1\":{\"1376\":1}}],[\"被称为钩子函数\",{\"1\":{\"1252\":1}}],[\"被static修饰的属性就是静态属性\",{\"1\":{\"1227\":1}}],[\"被static修饰后的成员具备的特点\",{\"0\":{\"1225\":1}}],[\"被所有对象所共享\",{\"1\":{\"1225\":1}}],[\"被i去除\",{\"1\":{\"956\":1}}],[\"被删除的元素\",{\"1\":{\"702\":1}}],[\"被替换成了具体的值\",{\"1\":{\"237\":1}}],[\"处开始\",{\"1\":{\"1986\":1}}],[\"处于新建状态的线程被start\",{\"1\":{\"1501\":1}}],[\"处理业务\",{\"1\":{\"2754\":1}}],[\"处理请求\",{\"1\":{\"2446\":1}}],[\"处理不同的查询结果集\",{\"1\":{\"2433\":1}}],[\"处理结果集一行数据中的每一个列\",{\"1\":{\"2352\":1,\"2355\":1,\"2405\":2}}],[\"处理结果集\",{\"1\":{\"2349\":1,\"2365\":1}}],[\"处理本地文件\",{\"1\":{\"1913\":1}}],[\"处理图片资源\",{\"0\":{\"1818\":1}}],[\"处理流\",{\"0\":{\"1780\":1},\"1\":{\"1775\":1}}],[\"处理继承thread类的线程安全问题\",{\"0\":{\"1515\":1}}],[\"处理throws来的的异常\",{\"1\":{\"1361\":1}}],[\"处理异常还是要在代码调用处使用try\",{\"1\":{\"1350\":1}}],[\"处理没有意义\",{\"1\":{\"1347\":1}}],[\"处理\",{\"1\":{\"1284\":1,\"1341\":1,\"2843\":1}}],[\"处理数据\",{\"1\":{\"963\":1}}],[\"处理成功\",{\"1\":{\"368\":1}}],[\"处元素进行交换\",{\"1\":{\"685\":1}}],[\"处元素和\",{\"1\":{\"685\":1}}],[\"反序列化时\",{\"1\":{\"1910\":1}}],[\"反序列化流\",{\"1\":{\"1904\":1,\"1909\":1}}],[\"反序列化\",{\"0\":{\"1904\":1,\"1909\":1},\"1\":{\"1894\":1,\"1895\":1}}],[\"反射的动态性\",{\"0\":{\"2003\":1}}],[\"反射相关api\",{\"0\":{\"2002\":1}}],[\"反射机制使用示例\",{\"0\":{\"2006\":1}}],[\"反射机制最大的特点\",{\"1\":{\"2003\":1}}],[\"反射机制提供的功能\",{\"0\":{\"2001\":1}}],[\"反射机制允许程序在执行期借助于reflection\",{\"1\":{\"1998\":1}}],[\"反射机制\",{\"0\":{\"1998\":1}}],[\"反射机制介绍\",{\"0\":{\"1997\":1}}],[\"反射获取注解信息\",{\"0\":{\"1431\":1}}],[\"反射也得到了加强\",{\"1\":{\"1417\":1}}],[\"反射\",{\"1\":{\"1388\":1,\"1515\":1,\"1998\":1,\"2000\":1}}],[\"反射类\",{\"0\":{\"583\":1},\"1\":{\"33\":1}}],[\"反馈评分\",{\"1\":{\"1252\":1}}],[\"反抗评分\",{\"1\":{\"1252\":1}}],[\"反之不成立\",{\"1\":{\"929\":1}}],[\"反码+1\",{\"1\":{\"909\":1}}],[\"反码\",{\"0\":{\"873\":1},\"1\":{\"873\":1}}],[\"反复使用一个正则表达式字符串进行匹配效率较低\",{\"1\":{\"745\":1}}],[\"反向引用\",{\"1\":{\"738\":1}}],[\"反转\",{\"1\":{\"682\":1}}],[\"查\",{\"1\":{\"3184\":1}}],[\"查找\",{\"1\":{\"1635\":1}}],[\"查找替换\",{\"1\":{\"681\":1}}],[\"查看用户\",{\"0\":{\"3198\":1}}],[\"查看角色权限\",{\"0\":{\"3185\":1}}],[\"查看优先级\",{\"0\":{\"3174\":1}}],[\"查看member可知\",{\"1\":{\"3164\":1}}],[\"查看副本集状态\",{\"0\":{\"3155\":1},\"1\":{\"3159\":1,\"3160\":1}}],[\"查看副本集的配置内容\",{\"0\":{\"3152\":1}}],[\"查看副本集信息时\",{\"1\":{\"3151\":1}}],[\"查看副本集\",{\"0\":{\"3151\":1}}],[\"查看启动结果\",{\"0\":{\"3145\":1}}],[\"查看执行计划\",{\"1\":{\"3120\":1}}],[\"查看创建的索引\",{\"1\":{\"3113\":1}}],[\"查看comment集合中所有的索引情况\",{\"1\":{\"3109\":1}}],[\"查看当前库中的集合\",{\"0\":{\"3066\":1}}],[\"查看正在使用的数据库\",{\"0\":{\"3062\":1}}],[\"查看所有数据库\",{\"0\":{\"3060\":1}}],[\"查看所有索引\",{\"0\":{\"2891\":1}}],[\"查看是否启动了\",{\"1\":{\"3049\":1}}],[\"查看查询的结果集\",{\"1\":{\"2993\":1,\"2997\":1,\"3000\":1,\"3003\":1,\"3006\":1,\"3008\":1,\"3010\":1,\"3019\":1}}],[\"查看查询的结果\",{\"1\":{\"2992\":1,\"3015\":1}}],[\"查看操作结果\",{\"1\":{\"2986\":1,\"2987\":1}}],[\"查看操作状态\",{\"1\":{\"2975\":1}}],[\"查看请求的结果\",{\"1\":{\"2983\":1}}],[\"查看返回的结果\",{\"1\":{\"2980\":1}}],[\"查看响应状态\",{\"1\":{\"2978\":1}}],[\"查看映射\",{\"0\":{\"2965\":1}}],[\"查看索引的\",{\"1\":{\"2977\":1}}],[\"查看索引\",{\"0\":{\"2977\":1,\"3109\":1}}],[\"查看索引中创建的映射\",{\"1\":{\"2965\":1}}],[\"查看索引下的全部文档\",{\"0\":{\"2908\":1,\"2926\":1}}],[\"查看索引向\",{\"1\":{\"2887\":1}}],[\"查看文档就是查看数据\",{\"1\":{\"2904\":1}}],[\"查看文档\",{\"0\":{\"2904\":1}}],[\"查看es服务器上的shopping索引\",{\"1\":{\"2889\":1}}],[\"查看某个索引\",{\"0\":{\"2887\":1}}],[\"查看控制台的log\",{\"1\":{\"2507\":1}}],[\"查看进程\",{\"1\":{\"2460\":1}}],[\"查看到的源码是经过反编译的\",{\"1\":{\"2291\":1}}],[\"查看线程的优先级\",{\"1\":{\"1487\":1}}],[\"查看\",{\"0\":{\"2923\":1},\"1\":{\"1341\":1,\"1878\":1}}],[\"查看版本信息\",{\"1\":{\"787\":1}}],[\"查看安装\",{\"1\":{\"787\":1}}],[\"查询多个角色权限\",{\"1\":{\"3188\":1}}],[\"查询多条记录构成的集合\",{\"0\":{\"2441\":1}}],[\"查询其它数据库中指定的角色权限\",{\"1\":{\"3188\":1}}],[\"查询当前数据库中的某角色的权限\",{\"1\":{\"3188\":1}}],[\"查询指定权限\",{\"0\":{\"3188\":1}}],[\"查询指定端口\",{\"1\":{\"202\":1}}],[\"查询的结果如下\",{\"1\":{\"3198\":1}}],[\"查询的字段只包含索引时\",{\"1\":{\"3122\":1}}],[\"查询的时候\",{\"1\":{\"3100\":1}}],[\"查询的时候传递该属性\",{\"1\":{\"2402\":1}}],[\"查询刚创建的索引\",{\"1\":{\"3112\":1}}],[\"查询评论集合中userid为1003\",{\"1\":{\"3102\":1}}],[\"查询评论集合中userid字段不包含1003和1004的文档\",{\"1\":{\"3101\":1}}],[\"查询评论集合中likenum大于等于700\",{\"1\":{\"3102\":1}}],[\"查询评论的集合中userid字段包含1003或1004的文档\",{\"1\":{\"3101\":1}}],[\"查询评论点赞数量大于700的记录\",{\"1\":{\"3100\":1}}],[\"查询评论内容包含hello的\",{\"1\":{\"3099\":1}}],[\"查询用户id是1开头的\",{\"1\":{\"3099\":1}}],[\"查询数据\",{\"1\":{\"2993\":1,\"2997\":1,\"3000\":1,\"3003\":1,\"3006\":1,\"3008\":1,\"3010\":1,\"3015\":1,\"3019\":1}}],[\"查询数据库\",{\"1\":{\"2754\":1}}],[\"查询文档\",{\"0\":{\"2991\":1}}],[\"查询索引\",{\"1\":{\"2977\":1}}],[\"查询category\",{\"1\":{\"2960\":1}}],[\"查询custom表中的数据\",{\"0\":{\"2349\":1}}],[\"查询第二页的数据\",{\"1\":{\"2949\":1}}],[\"查询price字段的所有聚合数据\",{\"1\":{\"2955\":1}}],[\"查询price>6500的文档\",{\"1\":{\"2939\":1}}],[\"查询price为5000\",{\"1\":{\"2936\":1}}],[\"查询price为5000的数据\",{\"1\":{\"2929\":1}}],[\"查询条件是值的一部分\",{\"1\":{\"2946\":1}}],[\"查询条件是字段值的一部分\",{\"1\":{\"2942\":1}}],[\"查询条件和查询结果要完全对应\",{\"1\":{\"2944\":1}}],[\"查询条件被拆解开分别进行各自的匹配\",{\"1\":{\"2942\":1}}],[\"查询条件的写法\",{\"1\":{\"2938\":1,\"2959\":1}}],[\"查询条件的属性名是直接手写的字符串\",{\"1\":{\"356\":1}}],[\"查询条件\",{\"1\":{\"2933\":1,\"2935\":1,\"2948\":1,\"2951\":1,\"2959\":1,\"3010\":1,\"3095\":1}}],[\"查询类型\",{\"1\":{\"2933\":1}}],[\"查询类似于最大的\",{\"0\":{\"2443\":1}}],[\"查询所有角色权限\",{\"0\":{\"3186\":1,\"3187\":1}}],[\"查询所有文档\",{\"0\":{\"2992\":1},\"1\":{\"2931\":1,\"2992\":1}}],[\"查询所有数据\",{\"0\":{\"2931\":1,\"3091\":1},\"1\":{\"2992\":1}}],[\"查询到的结果\",{\"1\":{\"2930\":1}}],[\"查询删除price值为5000的文档\",{\"1\":{\"2919\":1}}],[\"查询已删除的文档\",{\"0\":{\"2916\":1}}],[\"查询命中\",{\"1\":{\"2908\":1,\"2926\":1}}],[\"查询一条记录\",{\"0\":{\"2440\":1}}],[\"查询单个值对象\",{\"1\":{\"2436\":1}}],[\"查询表中的所有记录构成的集合\",{\"1\":{\"2407\":1,\"2408\":1}}],[\"查询特殊值的dql方法\",{\"1\":{\"2405\":1}}],[\"查询不同的表\",{\"0\":{\"2357\":1}}],[\"查询示例\",{\"0\":{\"2348\":1,\"2929\":1}}],[\"查询操作比较复杂一点\",{\"1\":{\"2336\":1}}],[\"查询速度比list快\",{\"1\":{\"1639\":1}}],[\"查询是否完成\",{\"1\":{\"1560\":1}}],[\"查询某个元素首次出现的位置\",{\"1\":{\"700\":1}}],[\"查询和修改等操作\",{\"1\":{\"679\":1,\"1695\":1}}],[\"查询字符串是否包含某个字符串\",{\"1\":{\"415\":1}}],[\"查询结果解析\",{\"0\":{\"3121\":1}}],[\"查询结果根据price字段进行倒叙排序\",{\"1\":{\"2952\":1}}],[\"查询结果如下\",{\"1\":{\"2908\":1,\"2926\":1}}],[\"查询结果是一个resultset\",{\"1\":{\"2338\":1}}],[\"查询结果\",{\"1\":{\"352\":1,\"2907\":1,\"2925\":1,\"2965\":1}}],[\"查询\",{\"1\":{\"338\":1,\"347\":1,\"1651\":1,\"2435\":1,\"2942\":2,\"2943\":1,\"2946\":1,\"2990\":1}}],[\"查询端口\",{\"1\":{\"202\":1}}],[\"移除所有索引\",{\"0\":{\"3117\":1}}],[\"移除索引\",{\"0\":{\"3115\":1}}],[\"移除全部数据\",{\"0\":{\"3086\":1}}],[\"移除等操作\",{\"1\":{\"1623\":1}}],[\"移除元素\",{\"0\":{\"1600\":1},\"1\":{\"713\":1}}],[\"移除元素的值为obj的元素\",{\"1\":{\"702\":1}}],[\"移除的元素不存在\",{\"1\":{\"702\":1}}],[\"移除指定集合内的所有索引\",{\"1\":{\"3117\":1}}],[\"移除指定索引\",{\"0\":{\"3116\":1}}],[\"移除指定key的key\",{\"1\":{\"713\":1}}],[\"移除指定index的元素并返回\",{\"1\":{\"702\":1}}],[\"移除指定index的元素\",{\"1\":{\"702\":1}}],[\"移除指针指向的值\",{\"1\":{\"678\":1}}],[\"移除交集\",{\"1\":{\"665\":1}}],[\"移动指针\",{\"0\":{\"2342\":1}}],[\"移动到\",{\"1\":{\"1920\":1}}],[\"移动硬盘等都支持usb连接\",{\"1\":{\"1257\":1}}],[\"移动后的文件\",{\"0\":{\"561\":1}}],[\"移动\",{\"0\":{\"560\":1},\"1\":{\"559\":1}}],[\"移动端应用\",{\"1\":{\"396\":1}}],[\"泛型里已经规定了有一个integer类型的参数\",{\"1\":{\"2177\":1}}],[\"泛型是任何类型的list都可以调用这个方法\",{\"1\":{\"1748\":1}}],[\"泛型参数是在调用方法时确定的\",{\"1\":{\"1734\":1}}],[\"泛型标识\",{\"1\":{\"1732\":1}}],[\"泛型>\",{\"1\":{\"1732\":1}}],[\"泛型方法\",{\"1\":{\"1734\":1}}],[\"泛型方法使用的泛型标识\",{\"1\":{\"1731\":1}}],[\"泛型方法所属的类是不是泛型都没有关系\",{\"1\":{\"1729\":1}}],[\"泛型方法跟泛型类\",{\"1\":{\"1729\":1}}],[\"泛型接口没有任何关系\",{\"1\":{\"1729\":1}}],[\"泛型修饰类\",{\"1\":{\"1721\":1}}],[\"泛型要使用一路都用\",{\"1\":{\"1721\":1}}],[\"泛型对应的类型均按照object处理\",{\"1\":{\"1721\":1}}],[\"泛型如果不指定\",{\"1\":{\"1721\":1}}],[\"泛型擦除\",{\"1\":{\"1721\":1}}],[\"泛型不同的引用不能相互赋值\",{\"1\":{\"1721\":1}}],[\"泛型默认是object类型\",{\"1\":{\"1720\":1}}],[\"泛型类型的数组\",{\"1\":{\"1721\":1}}],[\"泛型类的构造器\",{\"0\":{\"1717\":1}}],[\"泛型类的实例化\",{\"0\":{\"1716\":1}}],[\"泛型类可能有多个参数\",{\"1\":{\"1715\":1}}],[\"泛型一般用t\",{\"1\":{\"1714\":1}}],[\"泛型主要用于集合\",{\"1\":{\"1704\":1}}],[\"泛型的第一个参数\",{\"1\":{\"2405\":1}}],[\"泛型的指定中不能使用基本数据类型\",{\"1\":{\"1721\":1}}],[\"泛型的类型只能是类\",{\"1\":{\"1716\":1}}],[\"泛型的类型必须是类\",{\"1\":{\"1711\":1}}],[\"泛型的类型\",{\"1\":{\"1711\":1}}],[\"泛型的类型检查\",{\"1\":{\"1709\":1}}],[\"泛型的嵌套\",{\"1\":{\"1710\":1}}],[\"泛型的发展\",{\"1\":{\"1700\":1}}],[\"泛型的概念\",{\"0\":{\"1700\":1}}],[\"泛型的设计背景\",{\"0\":{\"1699\":1}}],[\"泛型以后\",{\"1\":{\"1582\":1}}],[\"泛型声明\",{\"1\":{\"1422\":1}}],[\"泛型\",{\"0\":{\"656\":1,\"708\":1,\"1697\":1,\"3264\":1},\"1\":{\"1719\":2,\"1745\":1}}],[\"泛型永远都是string\",{\"1\":{\"289\":1}}],[\"快速入门步骤\",{\"0\":{\"2529\":1}}],[\"快速入门\",{\"0\":{\"2528\":1}}],[\"快速在各个线程间切换\",{\"1\":{\"1441\":1}}],[\"快速生成一个list集合\",{\"1\":{\"651\":1}}],[\"快捷键\",{\"1\":{\"142\":1,\"2106\":1}}],[\"快捷笔记的命名为\",{\"1\":{\"1\":1}}],[\"快捷笔记就是对知识的精华总结\",{\"1\":{\"1\":1}}],[\"快捷笔记\",{\"0\":{\"1\":1}}],[\"值不能重复的\",{\"1\":{\"3109\":1}}],[\"值不一定相同\",{\"1\":{\"1650\":1}}],[\"值是字符串\",{\"1\":{\"2777\":3}}],[\"值是直接储存在字符串常量词的\",{\"1\":{\"883\":1}}],[\"值小的先执行\",{\"1\":{\"2706\":1}}],[\"值也是字符串\",{\"1\":{\"2620\":1}}],[\"值也相等\",{\"1\":{\"1664\":1}}],[\"值可自定义\",{\"1\":{\"1910\":1}}],[\"值可以重复\",{\"1\":{\"709\":1}}],[\"值相同\",{\"1\":{\"1650\":1}}],[\"值相等也意味着值的数据类型必须相等\",{\"1\":{\"648\":1}}],[\"值来决定元素的存储位置\",{\"1\":{\"1638\":1,\"1654\":1}}],[\"值来表示字符型常量\",{\"1\":{\"854\":1}}],[\"值的集合或者列表可以表示成数组\",{\"1\":{\"3034\":1}}],[\"值的一部分\",{\"0\":{\"2946\":1}}],[\"值的标识符\",{\"1\":{\"1454\":1}}],[\"值的末尾要l\",{\"1\":{\"868\":1}}],[\"值传递\",{\"1\":{\"1043\":1}}],[\"值必须加双引号\",{\"1\":{\"877\":1}}],[\"值\",{\"1\":{\"822\":1,\"1284\":1,\"1649\":1}}],[\"值为boolean\",{\"1\":{\"3159\":1}}],[\"值为对象格式的映射信息\",{\"1\":{\"2963\":1}}],[\"值为myannotations\",{\"1\":{\"1420\":1}}],[\"值为1\",{\"1\":{\"3157\":2,\"3159\":1}}],[\"值为10\",{\"1\":{\"1133\":1}}],[\"值为1的集合元素被删除\",{\"1\":{\"678\":1}}],[\"值为null\",{\"1\":{\"990\":1}}],[\"值为数据\",{\"1\":{\"982\":1}}],[\"值为内层数组的内存地址\",{\"1\":{\"982\":1}}],[\"值为额外include的环境\",{\"1\":{\"234\":1}}],[\"值一样\",{\"1\":{\"647\":1}}],[\"复合索引中列出的字段顺序很重要\",{\"1\":{\"3106\":1}}],[\"复合索引\",{\"0\":{\"3106\":1},\"1\":{\"3113\":1}}],[\"复写接口中的方法\",{\"1\":{\"2723\":1}}],[\"复写方法\",{\"1\":{\"2524\":1}}],[\"复制证书\",{\"0\":{\"3213\":1}}],[\"复制可以提供增加的读取性能\",{\"1\":{\"3126\":1}}],[\"复制可提供一定级别的容错功能\",{\"1\":{\"3126\":1}}],[\"复制提供冗余并提高数据可用性\",{\"1\":{\"3126\":1}}],[\"复制操作花费的时间为\",{\"1\":{\"1838\":1}}],[\"复制完一个\",{\"1\":{\"1444\":1}}],[\"复制品\",{\"1\":{\"1043\":1}}],[\"复制一份内存空间\",{\"0\":{\"966\":1}}],[\"复制指定的数组\",{\"1\":{\"647\":1}}],[\"复杂配置等学完spring系列再研究\",{\"1\":{\"11\":1}}],[\"键不能含有\",{\"1\":{\"3079\":1}}],[\"键不可以重复\",{\"1\":{\"709\":1}}],[\"键为字段名\",{\"1\":{\"2963\":1}}],[\"键值对key\",{\"1\":{\"1670\":1}}],[\"键\",{\"1\":{\"1661\":1}}],[\"键盘\",{\"1\":{\"1257\":1}}],[\"键盘输入\",{\"1\":{\"639\":1,\"760\":1}}],[\"键入\",{\"1\":{\"640\":1,\"761\":1}}],[\"限制下面的方法为重写父类中的方法\",{\"1\":{\"1389\":1,\"1390\":1}}],[\"限制对属性的不合理操作\",{\"1\":{\"1057\":1}}],[\"限制输入的字符类型\",{\"1\":{\"640\":1,\"761\":1}}],[\"限制日志大小\",{\"1\":{\"257\":1}}],[\"效果\",{\"0\":{\"2942\":1},\"1\":{\"639\":1,\"698\":1,\"760\":1,\"1489\":1,\"1509\":1,\"2540\":1}}],[\"效率测试\",{\"0\":{\"1838\":1}}],[\"效率太低\",{\"1\":{\"1641\":1}}],[\"效率高\",{\"1\":{\"442\":1,\"1612\":1,\"1664\":1}}],[\"效率低\",{\"1\":{\"442\":1,\"1521\":1,\"1528\":1,\"1614\":1,\"1667\":1,\"1956\":1}}],[\"效率更高了\",{\"1\":{\"136\":1}}],[\"请选择在配置文件中添加选项\",{\"1\":{\"3180\":1}}],[\"请选择compass方式连接mongodb\",{\"1\":{\"3053\":1}}],[\"请省略此参数\",{\"1\":{\"3090\":1}}],[\"请省略此参数或传递空文档\",{\"1\":{\"3090\":1}}],[\"请求对象添加\",{\"1\":{\"3010\":1}}],[\"请求对象添加查询条件\",{\"1\":{\"2997\":1,\"3000\":1,\"3002\":1,\"3003\":1,\"3005\":1,\"3006\":1,\"3008\":1,\"3014\":1,\"3015\":1,\"3018\":1,\"3019\":1}}],[\"请求对象\",{\"1\":{\"2977\":1}}],[\"请求条件一般通过json格式写在请求体中\",{\"1\":{\"2928\":1}}],[\"请求成功后\",{\"1\":{\"2884\":1}}],[\"请求地址和创建映射相同\",{\"1\":{\"2965\":1}}],[\"请求地址为\",{\"1\":{\"2884\":1,\"2889\":1}}],[\"请求地址\",{\"1\":{\"2883\":1,\"2888\":1,\"2892\":1,\"2895\":1,\"2896\":1,\"2899\":1,\"2905\":1,\"2908\":1,\"2910\":1,\"2911\":1,\"2913\":1,\"2918\":1,\"2923\":1,\"2926\":1,\"2928\":1,\"2954\":1,\"2963\":1}}],[\"请求数据\",{\"1\":{\"2835\":1}}],[\"请求与请求之间独立后\",{\"1\":{\"2788\":1}}],[\"请求与响应概述\",{\"0\":{\"2581\":1}}],[\"请求与响应\",{\"0\":{\"2580\":1},\"1\":{\"2553\":1}}],[\"请求\",{\"1\":{\"2705\":2,\"2900\":1,\"2906\":1,\"2914\":1,\"2924\":1,\"2949\":1,\"2952\":1,\"2955\":1}}],[\"请求阶段\",{\"1\":{\"2699\":1}}],[\"请求时会执行的逻辑\",{\"1\":{\"2699\":1}}],[\"请求被拦截后就不会去访问servlet了\",{\"1\":{\"2698\":1}}],[\"请求从资源a到资源b的过程就叫请求转发\",{\"1\":{\"2651\":1}}],[\"请求转发也是可以共享数据的\",{\"1\":{\"2673\":1}}],[\"请求转发的特点\",{\"0\":{\"2656\":1}}],[\"请求转发的实现方式\",{\"0\":{\"2652\":1}}],[\"请求转发\",{\"0\":{\"2650\":1}}],[\"请求参数的键都是字符串\",{\"1\":{\"2620\":1}}],[\"请求参数的处理方式\",{\"1\":{\"2612\":1}}],[\"请求参数\",{\"0\":{\"2612\":1}}],[\"请求体拼接\",{\"1\":{\"2996\":1,\"2997\":1}}],[\"请求体内的查询条件可以设置为\",{\"1\":{\"2994\":1}}],[\"请求体内容为\",{\"1\":{\"2919\":1}}],[\"请求体语法\",{\"1\":{\"2963\":1}}],[\"请求体中的数据格式如下\",{\"1\":{\"2604\":1}}],[\"请求体\",{\"0\":{\"2604\":1,\"2956\":1},\"1\":{\"2899\":1,\"2909\":1,\"2964\":1}}],[\"请求结果如下\",{\"1\":{\"2602\":1}}],[\"请求资源路径\",{\"1\":{\"2596\":1}}],[\"请求行包含三块内容\",{\"1\":{\"2596\":1}}],[\"请求行\",{\"0\":{\"2596\":1}}],[\"请求行+请求头+请求体\",{\"1\":{\"2584\":1}}],[\"请求方式的处理逻辑\",{\"1\":{\"2564\":2}}],[\"请求方式一共有7种\",{\"1\":{\"2563\":1}}],[\"请求方式\",{\"0\":{\"2563\":1},\"1\":{\"2883\":1,\"2888\":1,\"2892\":1,\"2895\":1,\"2899\":1,\"2905\":1,\"2908\":1,\"2910\":1,\"2911\":1,\"2913\":1,\"2918\":1,\"2923\":1,\"2926\":1,\"2928\":1,\"2954\":1,\"2963\":1}}],[\"请求处理\",{\"0\":{\"2549\":1}}],[\"请求和释放资源的顺序不当\",{\"1\":{\"1545\":1}}],[\"请输入字符串\",{\"1\":{\"1870\":1}}],[\"请输入\",{\"1\":{\"640\":1,\"761\":1}}],[\"请输入姓名\",{\"1\":{\"639\":2,\"760\":2}}],[\"请稍后再试\",{\"1\":{\"369\":1}}],[\"给t对象指定的columnname属性\",{\"1\":{\"2355\":1,\"2405\":2}}],[\"给t对象指定的属性赋值\",{\"1\":{\"2355\":1,\"2405\":1}}],[\"给cust对象指定的columnname属性\",{\"1\":{\"2352\":1}}],[\"给常量形参赋一个实参\",{\"1\":{\"1106\":1}}],[\"给对象进行初始化\",{\"0\":{\"1068\":1}}],[\"给数组赋值时\",{\"1\":{\"979\":1}}],[\"给出今天是星期几\",{\"1\":{\"928\":1}}],[\"给两个string类型的变量\",{\"1\":{\"877\":1}}],[\"给一个字符串赋值\",{\"1\":{\"877\":1}}],[\"给变量赋值时\",{\"1\":{\"840\":1}}],[\"给方法形参赋值的实参\",{\"1\":{\"626\":1,\"2066\":1}}],[\"给定参数的最大整数\",{\"1\":{\"515\":1}}],[\"取最小值\",{\"1\":{\"2954\":1}}],[\"取最大值\",{\"1\":{\"2954\":1}}],[\"取消安全验证\",{\"0\":{\"2860\":1}}],[\"取消自动提交数据\",{\"1\":{\"2391\":1}}],[\"取消集合就可以了\",{\"1\":{\"2358\":1}}],[\"取决于字符编码方案\",{\"1\":{\"1863\":1}}],[\"取得指定对象obj上此field的属性内容\",{\"1\":{\"2061\":1}}],[\"取得本类的指定形参类\",{\"1\":{\"2038\":1}}],[\"取得本类的指定形参类型的构造器\",{\"1\":{\"602\":1,\"2038\":1}}],[\"取得线程安全的arraylist\",{\"1\":{\"1628\":1}}],[\"取完数据后\",{\"1\":{\"1599\":1}}],[\"取值为0\",{\"1\":{\"3173\":1}}],[\"取值负整数\",{\"1\":{\"2546\":1}}],[\"取值\",{\"0\":{\"1413\":1,\"1430\":1}}],[\"取号排队\",{\"1\":{\"1252\":1}}],[\"取反\",{\"1\":{\"909\":1}}],[\"取模一般用来判断是否能除尽\",{\"1\":{\"892\":1}}],[\"取模的细节\",{\"0\":{\"892\":1}}],[\"取余数\",{\"1\":{\"874\":1}}],[\"取代自己写的basedao\",{\"0\":{\"2435\":1}}],[\"取代自己写的jdbcutils\",{\"0\":{\"2434\":1}}],[\"取代\",{\"1\":{\"424\":1}}],[\"应的表中\",{\"1\":{\"3198\":1}}],[\"应全部小写\",{\"1\":{\"3061\":1}}],[\"应尽量避免使用suspend\",{\"1\":{\"1527\":1}}],[\"应该与servlet的包在同一目录级创建filter包\",{\"1\":{\"2696\":1}}],[\"应该与调用\",{\"1\":{\"577\":1}}],[\"应该首先配置deployment\",{\"1\":{\"2518\":1}}],[\"应该使用\",{\"1\":{\"1872\":1}}],[\"应该声明为private\",{\"1\":{\"1372\":1}}],[\"应该写成x>3\",{\"1\":{\"904\":1}}],[\"应该用double类型接收\",{\"1\":{\"867\":1}}],[\"应该用int类型接收\",{\"1\":{\"867\":1}}],[\"应用需要大量的地理位置查询\",{\"1\":{\"3028\":1}}],[\"应用需要tb甚至\",{\"1\":{\"3028\":1}}],[\"应用发展迅速\",{\"1\":{\"3028\":1}}],[\"应用不需要事务及复杂\",{\"1\":{\"3028\":1}}],[\"应用程序在计算机中的唯一标识\",{\"1\":{\"2449\":1}}],[\"应用程序的日志应用\",{\"1\":{\"1243\":1}}],[\"应用界面相关\",{\"1\":{\"1291\":1}}],[\"应用范围\",{\"0\":{\"655\":1}}],[\"应用\",{\"0\":{\"229\":1,\"2765\":1}}],[\"应用场景对比\",{\"0\":{\"3037\":1}}],[\"应用场景\",{\"0\":{\"220\":1,\"2113\":1,\"2249\":1,\"2361\":1,\"3025\":1},\"1\":{\"1019\":1}}],[\"略微复杂的倒排列表\",{\"0\":{\"2880\":1}}],[\"略了\",{\"1\":{\"2728\":1}}],[\"略\",{\"1\":{\"574\":1,\"575\":1,\"1837\":1,\"2047\":2,\"2579\":1,\"2772\":1}}],[\"覆盖查询\",{\"1\":{\"3121\":1}}],[\"覆盖\",{\"1\":{\"1122\":1}}],[\"覆盖写\",{\"1\":{\"574\":2,\"575\":2,\"576\":1,\"1812\":1}}],[\"覆盖或追加写\",{\"1\":{\"573\":1}}],[\"刷新数据库\",{\"1\":{\"3057\":1}}],[\"刷新访问的页面\",{\"1\":{\"2534\":1}}],[\"刷新操作\",{\"1\":{\"1878\":1,\"1901\":1,\"1903\":1}}],[\"刷新流\",{\"1\":{\"1857\":1}}],[\"刷新该流的缓冲\",{\"1\":{\"578\":1}}],[\"刷新\",{\"1\":{\"572\":1,\"2553\":1}}],[\"变长的编码方式\",{\"1\":{\"1861\":1}}],[\"变成主节点\",{\"1\":{\"3150\":1}}],[\"变成一个内存地址\",{\"1\":{\"1455\":1}}],[\"变成了一个从节点角色\",{\"1\":{\"3150\":1}}],[\"变成了1\",{\"1\":{\"874\":1}}],[\"变成了\",{\"1\":{\"568\":1,\"1194\":1}}],[\"变为空的map集合\",{\"1\":{\"714\":1}}],[\"变量类型推断\",{\"0\":{\"2266\":1}}],[\"变量间的关系\",{\"0\":{\"1456\":1}}],[\"变量间赋值\",{\"0\":{\"1305\":1}}],[\"变量和方法时\",{\"1\":{\"1100\":1}}],[\"变量都有其对应的作用域\",{\"1\":{\"1024\":1}}],[\"变量值\",{\"1\":{\"1024\":1}}],[\"变量只在循环内有效\",{\"1\":{\"933\":1}}],[\"变量只有在其作用域内才有效\",{\"1\":{\"824\":1}}],[\"变量或不确定的表达式\",{\"1\":{\"927\":1}}],[\"变量本身的数据类型没有发生改变\",{\"1\":{\"897\":1}}],[\"变量要以\",{\"1\":{\"847\":1}}],[\"变量可以分为8种基本数据类型\",{\"1\":{\"827\":1}}],[\"变量的名可以理解为内存的地址标识\",{\"1\":{\"1455\":1}}],[\"变量的名是不会储存的\",{\"1\":{\"1455\":1}}],[\"变量的范围\",{\"1\":{\"1346\":1}}],[\"变量的分类\",{\"0\":{\"826\":1}}],[\"变量的作用域\",{\"0\":{\"824\":1}}],[\"变量的赋值\",{\"0\":{\"822\":1}}],[\"变量名编译后\",{\"1\":{\"1455\":1}}],[\"变量名是给我们程序员操作内存来使用的\",{\"1\":{\"1455\":1}}],[\"变量名3\",{\"1\":{\"1337\":1}}],[\"变量名2\",{\"1\":{\"1337\":1}}],[\"变量名1\",{\"1\":{\"1337\":1}}],[\"变量名\",{\"0\":{\"1455\":1},\"1\":{\"822\":1,\"823\":1,\"835\":1,\"1024\":1,\"2045\":1}}],[\"变量名称\",{\"1\":{\"821\":1}}],[\"变量名和存储的值\",{\"1\":{\"818\":1}}],[\"变量是内存的标识\",{\"1\":{\"1456\":1}}],[\"变量是内存中的一个存储区域\",{\"1\":{\"818\":1}}],[\"变量是程序中最基本的存储单元\",{\"1\":{\"818\":1}}],[\"变量\",{\"0\":{\"816\":1,\"817\":1,\"1454\":1},\"1\":{\"95\":1,\"810\":1,\"833\":1,\"1080\":1,\"1081\":1,\"1100\":1,\"1103\":1,\"2002\":1}}],[\"个数据库中\",{\"1\":{\"3184\":1}}],[\"个数相关的数据\",{\"0\":{\"2443\":1}}],[\"个接口分别定义了对数据库的调用的不同方式\",{\"1\":{\"2308\":1}}],[\"个元素的流\",{\"1\":{\"2213\":1}}],[\"个月为周期\",{\"1\":{\"2103\":1}}],[\"个月\",{\"1\":{\"2103\":1}}],[\"个\",{\"1\":{\"1402\":7,\"1404\":5,\"1405\":2,\"1406\":2,\"2213\":1}}],[\"个英文字母大小写\",{\"1\":{\"834\":1}}],[\"个字节写入此输出流\",{\"1\":{\"577\":1}}],[\"个字节从指定的\",{\"1\":{\"577\":1}}],[\"个字节的数据读入一个\",{\"1\":{\"566\":1}}],[\"个人中心\",{\"1\":{\"399\":1}}],[\"读写频繁以及价值比较低的数据\",{\"1\":{\"3027\":1}}],[\"读写\",{\"1\":{\"1887\":1}}],[\"读写过程\",{\"1\":{\"1858\":1}}],[\"读一行\",{\"1\":{\"1834\":1}}],[\"读到文件的结尾时才会返回null\",{\"1\":{\"1834\":1}}],[\"读到了字符a\",{\"1\":{\"565\":1}}],[\"读数据\",{\"1\":{\"1823\":1}}],[\"读入数据\",{\"1\":{\"1833\":1}}],[\"读入\",{\"0\":{\"1828\":1,\"1830\":1},\"1\":{\"1821\":1,\"1836\":2,\"1875\":1}}],[\"读\",{\"1\":{\"1456\":1,\"1792\":2,\"1822\":1,\"1889\":1}}],[\"读取文件\",{\"1\":{\"2646\":1,\"2647\":1}}],[\"读取文件需处理异常\",{\"1\":{\"564\":1}}],[\"读取流\",{\"1\":{\"2605\":1}}],[\"读取流中的对象\",{\"1\":{\"1900\":1}}],[\"读取不同类型的数据的顺序要与当初写入文件时\",{\"1\":{\"1879\":1}}],[\"读取数据\",{\"1\":{\"1803\":1,\"2610\":1}}],[\"读取外部数据\",{\"1\":{\"1774\":1}}],[\"读取的数据类型为object\",{\"1\":{\"1745\":1}}],[\"读取的单位从字符变成了字节\",{\"1\":{\"568\":1}}],[\"读取资源\",{\"1\":{\"1344\":1}}],[\"读取一行\",{\"0\":{\"1834\":1},\"1\":{\"581\":1}}],[\"读取一次\",{\"1\":{\"565\":1,\"566\":3}}],[\"读取一个字节\",{\"1\":{\"565\":1}}],[\"读取单个字符\",{\"1\":{\"565\":1}}],[\"读取yaml全部属性数据\",{\"0\":{\"128\":1}}],[\"读取yml引用类型数据\",{\"0\":{\"129\":1}}],[\"读取yml数据\",{\"0\":{\"127\":1}}],[\"读取yml\",{\"0\":{\"126\":1}}],[\"读取配置信息\",{\"1\":{\"1692\":1,\"2303\":1}}],[\"读取配置文件中的4个基本信息\",{\"1\":{\"2325\":1,\"2327\":1}}],[\"读取配置文件中的数据库连接信息\",{\"1\":{\"2319\":1}}],[\"读取配置文件的方式二\",{\"1\":{\"2034\":1}}],[\"读取配置文件的方式一\",{\"1\":{\"2034\":1}}],[\"读取配置文件的输入流\",{\"1\":{\"2034\":1}}],[\"读取配置文件的类\",{\"1\":{\"1243\":1}}],[\"读取配置文件\",{\"0\":{\"1692\":1}}],[\"读取配置项\",{\"1\":{\"128\":1}}],[\"读取配置\",{\"1\":{\"105\":1}}],[\"范围查询的方法包括\",{\"1\":{\"3002\":1}}],[\"范围查询的字符\",{\"1\":{\"2938\":1}}],[\"范围查询\",{\"0\":{\"2937\":1,\"3001\":1},\"1\":{\"3003\":1}}],[\"范围\",{\"1\":{\"1937\":1,\"2654\":1}}],[\"范围即为192\",{\"1\":{\"1934\":1}}],[\"范围太大\",{\"1\":{\"1525\":1}}],[\"范围太小\",{\"1\":{\"1525\":1}}],[\"范围小的就没机会执行了\",{\"1\":{\"924\":1}}],[\"范围在\",{\"1\":{\"565\":1}}],[\"范围内的\",{\"1\":{\"565\":1}}],[\"安全保障手段\",{\"0\":{\"3179\":1}}],[\"安全认证章节\",{\"1\":{\"3056\":1}}],[\"安全认证\",{\"0\":{\"3272\":1},\"1\":{\"3050\":1}}],[\"安全性\",{\"1\":{\"2829\":1}}],[\"安全协议\",{\"1\":{\"2449\":1}}],[\"安全检查\",{\"1\":{\"2075\":1}}],[\"安全问题解析\",{\"1\":{\"1521\":1}}],[\"安全与同步\",{\"0\":{\"1503\":1}}],[\"安全考虑\",{\"1\":{\"562\":1}}],[\"安装软件\",{\"0\":{\"2856\":1}}],[\"安装与卸载\",{\"0\":{\"2453\":1}}],[\"安装并使用驱动\",{\"0\":{\"2290\":1}}],[\"安装驱动\",{\"0\":{\"2286\":1},\"1\":{\"2293\":1}}],[\"安装目录\",{\"1\":{\"787\":1}}],[\"安装指定版本的所有java内容\",{\"1\":{\"787\":1}}],[\"安装idea彩色日志插件\",{\"1\":{\"261\":1}}],[\"安装插件\",{\"1\":{\"261\":1}}],[\"安装jdk\",{\"0\":{\"779\":1},\"1\":{\"205\":1}}],[\"安装\",{\"0\":{\"3038\":1,\"3041\":1,\"3047\":1},\"1\":{\"57\":1,\"2453\":1}}],[\"到程序\",{\"1\":{\"1774\":1}}],[\"到处运行\",{\"1\":{\"767\":1}}],[\"到\",{\"1\":{\"565\":2,\"576\":1,\"1985\":1}}],[\"到了f2的位置\",{\"1\":{\"561\":1}}],[\"到要求数字精度比较高\",{\"1\":{\"530\":1}}],[\"完整的网址\",{\"1\":{\"2597\":1}}],[\"完整的请求处理过程\",{\"0\":{\"2583\":1}}],[\"完整的文件名是带路径的\",{\"1\":{\"559\":1}}],[\"完善\",{\"1\":{\"2072\":1}}],[\"完善目录\",{\"1\":{\"310\":1}}],[\"完全可替代mongodb\",{\"1\":{\"3054\":1}}],[\"完全匹配就是禁止全文检索\",{\"1\":{\"2944\":1}}],[\"完全匹配查询\",{\"0\":{\"2944\":1}}],[\"完全匹配\",{\"0\":{\"2940\":1},\"1\":{\"2940\":1}}],[\"完全覆盖\",{\"0\":{\"2910\":1},\"1\":{\"2909\":1}}],[\"完全解决了线程的安全问题\",{\"1\":{\"1528\":1}}],[\"完全限定方法名\",{\"1\":{\"810\":1}}],[\"完全限定的类名\",{\"1\":{\"810\":1}}],[\"完成副本集\",{\"1\":{\"3158\":1}}],[\"完成服务器对客户端的身份识别\",{\"1\":{\"2810\":1}}],[\"完成具体的业务操作\",{\"1\":{\"2754\":1}}],[\"完成流的copy\",{\"1\":{\"2646\":1}}],[\"完成一些如加载配置文件\",{\"1\":{\"2548\":1}}],[\"完成创建\",{\"1\":{\"2489\":1,\"2493\":1}}],[\"完成复制\",{\"1\":{\"1888\":1}}],[\"完成相关的操作\",{\"1\":{\"1246\":1}}],[\"完成正则匹配\",{\"1\":{\"739\":1}}],[\"删\",{\"1\":{\"3184\":1}}],[\"删改\",{\"0\":{\"558\":1}}],[\"删除lock文件\",{\"1\":{\"3242\":1}}],[\"删除用户\",{\"0\":{\"3199\":1}}],[\"删除指定数据\",{\"0\":{\"3087\":1}}],[\"删除指定位置的内容\",{\"1\":{\"453\":1}}],[\"删除集合\",{\"0\":{\"3068\":1},\"1\":{\"3190\":1}}],[\"删除集合中的元素\",{\"1\":{\"678\":1,\"1600\":1}}],[\"删除数量\",{\"1\":{\"2920\":1}}],[\"删除数组时\",{\"1\":{\"979\":1}}],[\"删除不存在的文档\",{\"0\":{\"2917\":1}}],[\"删除不存在的索引\",{\"1\":{\"2896\":1}}],[\"删除示例\",{\"0\":{\"2914\":1}}],[\"删除文档是根据文档的\",{\"1\":{\"2913\":1}}],[\"删除文档\",{\"0\":{\"2913\":1,\"2984\":1,\"3085\":1},\"1\":{\"2913\":1,\"2984\":1,\"2987\":1}}],[\"删除shopping索引\",{\"1\":{\"2896\":1}}],[\"删除某个索引\",{\"1\":{\"2894\":1}}],[\"删除某表中的1个数据\",{\"1\":{\"2334\":1}}],[\"删除索引\",{\"0\":{\"2894\":1,\"2978\":1},\"1\":{\"2978\":1}}],[\"删除cookie信息\",{\"1\":{\"2805\":1}}],[\"删除pom\",{\"0\":{\"2490\":1}}],[\"删除即为卸载\",{\"1\":{\"2453\":1}}],[\"删除了\",{\"1\":{\"2439\":1}}],[\"删除成功\",{\"1\":{\"2409\":1}}],[\"删除表中的一条记录\",{\"1\":{\"2407\":1,\"2408\":1}}],[\"删除blob类型的字段\",{\"1\":{\"2364\":1}}],[\"删除一个文件\",{\"1\":{\"1920\":1}}],[\"删除性能\",{\"1\":{\"1635\":1}}],[\"删除操作是否成功\",{\"1\":{\"2978\":1}}],[\"删除操作\",{\"1\":{\"1613\":1}}],[\"删除的文件不存在\",{\"1\":{\"562\":1}}],[\"删除广义文件\",{\"1\":{\"562\":1}}],[\"删除\",{\"0\":{\"2439\":1},\"1\":{\"338\":1,\"399\":3,\"538\":1,\"1574\":1,\"1761\":1}}],[\"删除application\",{\"1\":{\"307\":1}}],[\"删除配置文件中所有的日志配置\",{\"1\":{\"261\":1}}],[\"删除日志配置\",{\"1\":{\"261\":1}}],[\"组合方法有三个\",{\"1\":{\"2996\":1}}],[\"组合方式\",{\"1\":{\"2935\":1}}],[\"组合查询的条件\",{\"1\":{\"2996\":1,\"2997\":1}}],[\"组合查询的关键字\",{\"1\":{\"2935\":1}}],[\"组合查询\",{\"0\":{\"2995\":1}}],[\"组合类型\",{\"1\":{\"2781\":1}}],[\"组合数据访问层层中基本功能\",{\"1\":{\"2758\":1}}],[\"组织提供的一个开源\",{\"1\":{\"2431\":1}}],[\"组成的数据结构\",{\"1\":{\"3032\":1}}],[\"组成的file类数组\",{\"1\":{\"547\":1}}],[\"组成\",{\"0\":{\"2878\":1},\"1\":{\"834\":1,\"3106\":1,\"3184\":1}}],[\"组件也可以理解为工具类\",{\"1\":{\"2732\":1}}],[\"组件\",{\"0\":{\"315\":1},\"1\":{\"336\":1}}],[\"组件后面再安装\",{\"1\":{\"305\":1}}],[\"绝对路径或者相对路径\",{\"1\":{\"538\":1,\"1767\":1}}],[\"绝对值角度\",{\"1\":{\"536\":1}}],[\"绝对值\",{\"0\":{\"512\":1}}],[\"往现存接口中添加新的方法\",{\"1\":{\"1273\":1}}],[\"往往已经创建了若干数据库连接置于连接池中备用\",{\"1\":{\"2419\":1}}],[\"往往导致进程挂起\",{\"1\":{\"581\":1,\"1834\":1}}],[\"往往会发生值大小的改变\",{\"1\":{\"535\":1}}],[\"往小变\",{\"1\":{\"536\":1}}],[\"往大变\",{\"1\":{\"536\":2}}],[\"舍去\",{\"1\":{\"536\":1}}],[\"舍去小数位\",{\"1\":{\"891\":1}}],[\"舍去小数取整\",{\"1\":{\"515\":1}}],[\"舍去小数\",{\"0\":{\"515\":1}}],[\"舍入策略\",{\"1\":{\"536\":1}}],[\"精确匹配\",{\"0\":{\"2574\":1},\"1\":{\"2578\":1}}],[\"精准\",{\"1\":{\"2573\":1}}],[\"精准匹配\",{\"1\":{\"752\":1,\"757\":1}}],[\"精准模式\",{\"1\":{\"535\":1,\"536\":1}}],[\"精度是float的两倍\",{\"1\":{\"846\":1}}],[\"精度很难满足需求\",{\"1\":{\"846\":1}}],[\"精度0\",{\"1\":{\"536\":12}}],[\"精度2\",{\"1\":{\"536\":12}}],[\"精度会有默认值\",{\"1\":{\"535\":1}}],[\"作者等\",{\"1\":{\"2555\":1}}],[\"作为区分\",{\"1\":{\"3137\":1}}],[\"作为片键\",{\"1\":{\"3109\":1}}],[\"作为文本数据分析\",{\"1\":{\"2846\":1}}],[\"作为配置文件\",{\"1\":{\"2769\":1}}],[\"作为组件\",{\"1\":{\"2736\":1}}],[\"作为应用程序和扩展的构建单元\",{\"1\":{\"2736\":1}}],[\"作为jar里面的\",{\"1\":{\"2733\":1}}],[\"作为域对象\",{\"0\":{\"2688\":1}}],[\"作为属性\",{\"1\":{\"2402\":1}}],[\"作为方法的第一个参数\",{\"1\":{\"2332\":1}}],[\"作为方法区中类数据的访问入口\",{\"1\":{\"2026\":1}}],[\"作为函数式接口的实例\",{\"1\":{\"2112\":1}}],[\"作为绝对路径返回调用\",{\"1\":{\"1918\":1}}],[\"作为返回值\",{\"1\":{\"1719\":1}}],[\"作为参数传入\",{\"1\":{\"2097\":1}}],[\"作为参数\",{\"1\":{\"1719\":1}}],[\"作为古老的实现类\",{\"1\":{\"1667\":1}}],[\"作为list接口的古老实现类\",{\"1\":{\"1614\":1}}],[\"作为list接口的主要实现类\",{\"1\":{\"1612\":1}}],[\"作为一个类\",{\"0\":{\"1206\":1}}],[\"作为外部类的成员\",{\"0\":{\"1205\":1}}],[\"作为标记区分每个注释块的内容\",{\"1\":{\"808\":1}}],[\"作为整数读取的字符\",{\"1\":{\"565\":1}}],[\"作为springmvc的异常处理器\",{\"1\":{\"369\":1}}],[\"作用类似于框架中的钩子函数\",{\"1\":{\"2707\":1}}],[\"作用域是一次会话\",{\"1\":{\"2675\":1}}],[\"作用域是一次请求\",{\"1\":{\"2673\":1}}],[\"作用域是一个页面\",{\"1\":{\"2672\":1}}],[\"作用在代码的注解\",{\"1\":{\"1390\":1}}],[\"作用\",{\"0\":{\"819\":1,\"1276\":1,\"1843\":1,\"2395\":1},\"1\":{\"1279\":1,\"1280\":1,\"1825\":1,\"1874\":1,\"1894\":1,\"2090\":1,\"2229\":1,\"2714\":2,\"2715\":2,\"2716\":2,\"2717\":3,\"2718\":3,\"2719\":3,\"2720\":3,\"2721\":2,\"2810\":1}}],[\"作用2\",{\"1\":{\"535\":1}}],[\"作用1\",{\"1\":{\"535\":1}}],[\"加密\",{\"1\":{\"3198\":1}}],[\"加密解密\",{\"1\":{\"1952\":1}}],[\"加4个数字\",{\"1\":{\"2781\":1}}],[\"加不加是一样的\",{\"1\":{\"2667\":1}}],[\"加强版get\",{\"1\":{\"2260\":1}}],[\"加入后\",{\"1\":{\"2101\":1}}],[\"加一些通用操作\",{\"1\":{\"2101\":1}}],[\"加锁时限\",{\"1\":{\"1541\":1}}],[\"加锁\",{\"0\":{\"1534\":1},\"1\":{\"1552\":1,\"1553\":1}}],[\"加\",{\"1\":{\"749\":1}}],[\"加法运算\",{\"1\":{\"531\":1}}],[\"加载和实例化\",{\"0\":{\"2545\":1}}],[\"加载驱动\",{\"0\":{\"2423\":1},\"1\":{\"2303\":1,\"2319\":1,\"2325\":1,\"2327\":1}}],[\"加载驱动源码\",{\"0\":{\"2291\":1}}],[\"加载配置文件\",{\"1\":{\"2303\":1,\"2424\":1}}],[\"加载的第三方jar包都是class文件\",{\"1\":{\"2291\":1}}],[\"加载的内容不会发生变化\",{\"1\":{\"137\":1}}],[\"加载器获取\",{\"0\":{\"2032\":1}}],[\"加载核心类库\",{\"1\":{\"2031\":1}}],[\"加载ext下的jar包\",{\"1\":{\"2031\":1}}],[\"加载自定义类\",{\"1\":{\"2031\":1}}],[\"加载完类之后\",{\"1\":{\"2000\":1}}],[\"加载流对应的文件\",{\"1\":{\"1692\":1}}],[\"加载文件的流\",{\"1\":{\"1692\":1}}],[\"加载头像\",{\"1\":{\"1446\":1}}],[\"加载评论内容\",{\"1\":{\"1446\":1}}],[\"加载到内存中\",{\"1\":{\"2414\":1}}],[\"加载到内存中的运行时类\",{\"1\":{\"2017\":1}}],[\"加载到内存中的类\",{\"1\":{\"2013\":1}}],[\"加载到栈空间\",{\"1\":{\"1025\":1}}],[\"加载到堆空间中\",{\"1\":{\"1025\":1}}],[\"加载测试专用配置\",{\"0\":{\"184\":1}}],[\"加载位置base类加载器\",{\"1\":{\"139\":1}}],[\"加载位置restart类加载器\",{\"1\":{\"138\":1}}],[\"加载开发者制作的内容\",{\"1\":{\"138\":1}}],[\"加载jar包中的信息后\",{\"1\":{\"138\":1}}],[\"加载内容\",{\"1\":{\"138\":1,\"139\":1}}],[\"加载数据到对象\",{\"1\":{\"129\":1}}],[\"十进制转成二进制\",{\"1\":{\"874\":1}}],[\"十进制\",{\"1\":{\"874\":1}}],[\"十进制数形式\",{\"1\":{\"845\":1}}],[\"十进制数的二进制表示形式可能不精确\",{\"1\":{\"530\":1}}],[\"十进制值通常没有完全相同的二进制表示形式\",{\"1\":{\"530\":1}}],[\"十六进制\",{\"1\":{\"123\":1,\"871\":1,\"874\":1}}],[\"但开启认证之后\",{\"1\":{\"3197\":1}}],[\"但需要配置\",{\"1\":{\"3131\":1}}],[\"但只支持相等匹配\",{\"1\":{\"3107\":1}}],[\"但已经插入成功的数据不会回滚掉\",{\"1\":{\"3077\":1}}],[\"但它的缺点是空间利用率不是很理想\",{\"1\":{\"3033\":1}}],[\"但它同时使用双向链表维护元素的次序\",{\"1\":{\"1638\":1,\"1654\":1}}],[\"但访问http\",{\"1\":{\"2860\":1}}],[\"但conn\",{\"1\":{\"2421\":1}}],[\"但因自身存在bug\",{\"1\":{\"2420\":1}}],[\"但aop代理中的方法与目标对象的方法存在差异\",{\"1\":{\"2100\":1}}],[\"但里的逻辑代码进行了加强\",{\"1\":{\"2085\":1}}],[\"但一旦某个类被加载到类加载器中\",{\"1\":{\"2030\":1}}],[\"但java可以称之为\",{\"1\":{\"1999\":1}}],[\"但file类的功能比较有限\",{\"1\":{\"1915\":1}}],[\"但直接继承于java\",{\"1\":{\"1880\":1}}],[\"但对于频繁的遍历操作\",{\"1\":{\"1654\":1}}],[\"但此时打印机正被进程p2\",{\"1\":{\"1542\":1}}],[\"但此时就不能再使用外层类的非static的成员变量\",{\"1\":{\"1205\":1}}],[\"但如果不是\",{\"1\":{\"1522\":1}}],[\"但多个线程操作共享的系统资源可能就会带来安全的隐患\",{\"1\":{\"1439\":1}}],[\"但有的错误只有在\",{\"1\":{\"1323\":1}}],[\"但实际引用的是子类对象\",{\"1\":{\"1151\":1}}],[\"但在windows下使用\",{\"1\":{\"1764\":1}}],[\"但在静态方法中不能使用类的泛型\",{\"1\":{\"1721\":1}}],[\"但在迭代访问\",{\"1\":{\"1638\":1}}],[\"但在运行期\",{\"1\":{\"1149\":1}}],[\"但在商业计算中\",{\"1\":{\"530\":1}}],[\"但不等价于object\",{\"1\":{\"1721\":1}}],[\"但不能连接\",{\"1\":{\"2433\":1}}],[\"但不能读取自己放入线路的信息\",{\"1\":{\"1969\":1}}],[\"但不能是与arithmeticexception类无关的异常\",{\"1\":{\"1338\":1}}],[\"但不能进行重新赋值\",{\"1\":{\"1106\":1}}],[\"但不叫重写\",{\"1\":{\"1127\":1}}],[\"但不加l有时会报错\",{\"1\":{\"868\":1}}],[\"但这种重复执行无须循环控制\",{\"1\":{\"1035\":1}}],[\"但注意不能定义方法\",{\"1\":{\"1034\":1}}],[\"但必须是同一个类型\",{\"1\":{\"931\":1}}],[\"但他是个final类\",{\"1\":{\"879\":1}}],[\"但可能有多个\",{\"1\":{\"2620\":1}}],[\"但可能造成精度降低或溢出\",{\"1\":{\"869\":1}}],[\"但可以读操作\",{\"1\":{\"3131\":1}}],[\"但可以通过它给定的方法来获取这些属性\",{\"1\":{\"1991\":1}}],[\"但可以通过特殊的方法创建匿名类\",{\"1\":{\"1249\":1}}],[\"但可以不指定泛型\",{\"1\":{\"1720\":1}}],[\"但可以使用包装类填充\",{\"1\":{\"1716\":1}}],[\"但可以重写\",{\"1\":{\"1272\":1}}],[\"但可以是有结果的表达式\",{\"1\":{\"1030\":1}}],[\"但可以对key\",{\"1\":{\"710\":1}}],[\"但该值超过了int范围\",{\"1\":{\"868\":1}}],[\"但能包含关键字和保留字\",{\"1\":{\"834\":1}}],[\"但以后版本可能会作为关键字使用\",{\"1\":{\"832\":1}}],[\"但\",{\"1\":{\"538\":1,\"1761\":1}}],[\"但是bson有json没有的一些数据类型\",{\"1\":{\"3033\":1}}],[\"但是也支持shell命令\",{\"1\":{\"3054\":1}}],[\"但是也会占用更多的空间\",{\"1\":{\"2963\":1}}],[\"但是也能像方法那样重载\",{\"1\":{\"1071\":1}}],[\"但是没有可用的关系数据库可以满足\",{\"1\":{\"2850\":1}}],[\"但是维护起来也很麻烦\",{\"1\":{\"2849\":1}}],[\"但是对于框架来说\",{\"1\":{\"2774\":1}}],[\"但是浏览器的地址一直是\",{\"1\":{\"2656\":1}}],[\"但是编写起来还是比较麻烦的\",{\"1\":{\"2557\":1}}],[\"但是速度不确定是否有bonecp快\",{\"1\":{\"2420\":1}}],[\"但是未必完全一样\",{\"1\":{\"2354\":1}}],[\"但是由于方法是有参数限制的\",{\"1\":{\"2137\":1}}],[\"但是由于变量声明为父类类型\",{\"1\":{\"1162\":1}}],[\"但是非public修饰的成员\",{\"1\":{\"2069\":1}}],[\"但是使用的方式完全不同\",{\"1\":{\"1913\":1}}],[\"但是java程序中的一个file对象\",{\"1\":{\"1762\":1}}],[\"但是只要他们不是同一个对象\",{\"1\":{\"1647\":1}}],[\"但是只是从概率上讲\",{\"1\":{\"1487\":1}}],[\"但是只是null\",{\"1\":{\"1018\":1}}],[\"但是我们需要线程安全问题时\",{\"1\":{\"1628\":1}}],[\"但是这种方案不适用于get请求\",{\"1\":{\"2631\":1}}],[\"但是这样做\",{\"1\":{\"1698\":1}}],[\"但是这里如果不stop\",{\"1\":{\"1520\":1}}],[\"但是这个char\",{\"1\":{\"445\":1}}],[\"但是因为cpu时间单元特别短\",{\"1\":{\"1441\":1}}],[\"但是一个线程崩溃整个进程都死掉\",{\"1\":{\"1440\":1}}],[\"但是进程之间的资源是独立的\",{\"1\":{\"1440\":1}}],[\"但是返回值更精准\",{\"1\":{\"1359\":1}}],[\"但是并不能确定如何处理这种异常\",{\"1\":{\"1349\":1}}],[\"但是运行时仍可能报错\",{\"1\":{\"1347\":1}}],[\"但是运行还是会出错\",{\"1\":{\"1172\":1}}],[\"但是办理的具体业务是不确定的\",{\"1\":{\"1252\":1}}],[\"但是某些部分易变\",{\"1\":{\"1250\":1}}],[\"但是有抽象方法的类一定要声明成抽象类\",{\"1\":{\"1248\":1}}],[\"但是必须是final的\",{\"1\":{\"1212\":1}}],[\"但是前面冠以外部类的类名和$符号\",{\"1\":{\"1212\":1}}],[\"但是它的对象可以通过外部方法的返回值返回使用\",{\"1\":{\"1211\":1}}],[\"但是它的大多数方法已经在jdk\",{\"1\":{\"460\":1}}],[\"但是自始至终就创建过一个对象\",{\"1\":{\"1144\":1}}],[\"但是内存中还是只创建了子类的一个对象\",{\"1\":{\"1136\":1}}],[\"但是不能直接设置\",{\"1\":{\"2062\":1}}],[\"但是不能直接访问private修饰的成员\",{\"1\":{\"1115\":1}}],[\"但是不能重写父类中的属性\",{\"1\":{\"1129\":1}}],[\"但是如果使用的是xxx子包下的结构\",{\"1\":{\"1097\":1}}],[\"但是跟文件夹还是不一样的\",{\"1\":{\"1087\":1}}],[\"但是\",{\"1\":{\"1029\":1,\"1132\":1,\"1256\":1,\"1863\":1,\"2887\":1}}],[\"但是开发中\",{\"1\":{\"1010\":1,\"1576\":1}}],[\"但是他们的值是空的\",{\"1\":{\"989\":1}}],[\"但是for循环也可以通过以下方式实现初始化部分外移\",{\"1\":{\"937\":1}}],[\"但是为了后续使用eclipse等开发工具不报错\",{\"1\":{\"779\":1}}],[\"但是顺序不同\",{\"1\":{\"667\":1}}],[\"但是arrays$arraylist中并没有重写这些方法\",{\"1\":{\"649\":1}}],[\"但是该arraylist只是arrays的内部静态类的arraylist\",{\"1\":{\"649\":1}}],[\"但是在开发场景中\",{\"1\":{\"491\":1}}],[\"但是要注意\",{\"1\":{\"1511\":1}}],[\"但是要明确\",{\"1\":{\"1315\":1}}],[\"但是要使用lang包下的子包\",{\"1\":{\"1097\":1}}],[\"但是要是特定的string\",{\"1\":{\"487\":1}}],[\"但是要测试的属性值与配置文件中的不一样\",{\"1\":{\"184\":1}}],[\"但是更方便\",{\"1\":{\"464\":1}}],[\"但是就无法使用临时属性了\",{\"1\":{\"213\":1}}],[\"位于网络中的计算机具有唯一的ip地址\",{\"1\":{\"1996\":1}}],[\"位运算符\",{\"0\":{\"906\":1},\"1\":{\"907\":1}}],[\"位操作以及一些其他操作\",{\"1\":{\"529\":1}}],[\"位置的元素\",{\"1\":{\"699\":1}}],[\"位置\",{\"1\":{\"401\":1,\"466\":1,\"467\":1,\"468\":1,\"475\":1,\"480\":1,\"495\":1,\"504\":1,\"511\":1,\"523\":1,\"529\":1,\"530\":1,\"538\":1,\"564\":1,\"572\":1,\"584\":1,\"612\":1,\"619\":1,\"632\":1,\"637\":1,\"641\":1,\"653\":1,\"672\":1,\"679\":1,\"693\":1,\"705\":1,\"724\":1,\"745\":1,\"754\":1,\"758\":1,\"808\":1,\"1094\":1,\"1884\":1,\"1920\":1,\"2302\":1}}],[\"模糊查询\",{\"0\":{\"3004\":1},\"1\":{\"3006\":1}}],[\"模块目录\",{\"1\":{\"2856\":1}}],[\"模块目录下的\",{\"1\":{\"2511\":1}}],[\"模块\",{\"1\":{\"2484\":1}}],[\"模块名\",{\"1\":{\"2483\":1}}],[\"模型\",{\"1\":{\"2763\":1}}],[\"模型过于理想化\",{\"1\":{\"1926\":1}}],[\"模型层\",{\"0\":{\"1290\":1}}],[\"模拟网络异常\",{\"1\":{\"2387\":1}}],[\"模拟火车站售票程序\",{\"1\":{\"1507\":1}}],[\"模拟usb\",{\"0\":{\"1264\":1}}],[\"模板方法\",{\"1\":{\"1252\":1}}],[\"模板方法设计模式\",{\"0\":{\"1250\":1}}],[\"模算术\",{\"1\":{\"529\":1}}],[\"模式器\",{\"1\":{\"745\":1}}],[\"模式修饰符\",{\"1\":{\"738\":1}}],[\"模式\",{\"1\":{\"248\":1,\"2241\":1,\"2763\":3,\"2764\":2}}],[\"另一方面也增加了系统运行环境的平稳性\",{\"1\":{\"2419\":1}}],[\"另一套就是网络编程nio\",{\"1\":{\"1913\":1}}],[\"另一个mongod实例可能暂时认为自己也是主要的\",{\"1\":{\"3127\":1}}],[\"另一个是记录文件指针的位置文件\",{\"1\":{\"1892\":1}}],[\"另一个是实体类\",{\"1\":{\"361\":1}}],[\"另一个原因是默认的锁申请操作是阻塞的\",{\"1\":{\"1546\":1}}],[\"另一个任务就可以锁定并使用它了\",{\"1\":{\"1524\":1}}],[\"另一个线程参与进来执行\",{\"1\":{\"1507\":1}}],[\"另一种方法是由程序员在编写程序时\",{\"1\":{\"1314\":1}}],[\"另外还有web\",{\"1\":{\"2748\":1}}],[\"另外还有一个方法可以获取到当前web应用的servletcontext对象\",{\"1\":{\"2716\":1}}],[\"另外包是有层级的\",{\"1\":{\"1089\":1}}],[\"另外\",{\"1\":{\"529\":1}}],[\"求差集\",{\"1\":{\"665\":1}}],[\"求atan值\",{\"1\":{\"522\":1}}],[\"求acos值\",{\"1\":{\"522\":1}}],[\"求asin值\",{\"1\":{\"522\":1}}],[\"求tan值\",{\"1\":{\"522\":1}}],[\"求cos值\",{\"1\":{\"522\":1}}],[\"求sin值\",{\"1\":{\"522\":1}}],[\"求参数的算术平方根\",{\"1\":{\"521\":1}}],[\"求log\",{\"1\":{\"521\":1}}],[\"求较大值\",{\"0\":{\"520\":1}}],[\"求较小值\",{\"0\":{\"519\":1}}],[\"求数值的绝对值\",{\"1\":{\"512\":1}}],[\"π\",{\"1\":{\"517\":1}}],[\"向es插入的数据必须是json个格式\",{\"1\":{\"2982\":1}}],[\"向es中插入数据必须是json格式\",{\"1\":{\"2980\":1}}],[\"向\",{\"1\":{\"2900\":1,\"2906\":1,\"2914\":1,\"2924\":1,\"2949\":1,\"2952\":1,\"2955\":1}}],[\"向httpsession中添加属性时调用\",{\"1\":{\"2718\":1}}],[\"向servletrequest中添加属性时调用\",{\"1\":{\"2719\":1}}],[\"向servletcontext中添加属性时调用\",{\"1\":{\"2717\":1}}],[\"向servlet发送请求时\",{\"1\":{\"2699\":1}}],[\"向set\",{\"1\":{\"1646\":1}}],[\"向responsedemo1类发送请求\",{\"1\":{\"2660\":1}}],[\"向浏览器响应一张图片\",{\"0\":{\"2646\":1}}],[\"向浏览器响应html标签\",{\"0\":{\"2642\":1}}],[\"向浏览器响应字符hello\",{\"0\":{\"2640\":1}}],[\"向数据表中插入1百万条数据\",{\"1\":{\"2371\":1}}],[\"向数据表插入blob类型\",{\"0\":{\"2364\":1}}],[\"向流中写入字节时\",{\"1\":{\"1826\":1}}],[\"向treemap中添加key\",{\"1\":{\"1686\":1}}],[\"向treeset中添加的数据\",{\"1\":{\"1655\":1}}],[\"向上转型\",{\"0\":{\"1165\":1},\"1\":{\"1163\":1}}],[\"向上取整\",{\"1\":{\"514\":1}}],[\"向下转型必须是父类引用子类的对象\",{\"0\":{\"1170\":1}}],[\"向下转型的异常\",{\"0\":{\"1167\":1}}],[\"向下转型成子类型\",{\"1\":{\"1163\":1}}],[\"向下转型\",{\"0\":{\"1166\":1},\"1\":{\"1163\":1}}],[\"向下转型说明\",{\"0\":{\"1163\":1}}],[\"向下取整\",{\"1\":{\"515\":1}}],[\"向一张图片上写入字符\",{\"1\":{\"577\":2}}],[\"小\",{\"1\":{\"2942\":1}}],[\"小米\",{\"1\":{\"2907\":1,\"2908\":2,\"2925\":1,\"2926\":2,\"2930\":1,\"2942\":2,\"2943\":1,\"2946\":1}}],[\"小米手机\",{\"1\":{\"2907\":1,\"2908\":2,\"2925\":1,\"2926\":2,\"2930\":1}}],[\"小类型\",{\"1\":{\"2684\":1}}],[\"小心参数声明错误\",{\"1\":{\"2333\":1,\"2405\":1}}],[\"小结\",{\"0\":{\"1996\":1}}],[\"小技巧\",{\"1\":{\"1649\":1}}],[\"小于等于\",{\"1\":{\"2938\":1,\"3002\":1}}],[\"小于\",{\"1\":{\"2938\":1,\"3002\":1}}],[\"小于0的数字\",{\"1\":{\"1509\":1}}],[\"小于o2\",{\"1\":{\"506\":1}}],[\"小数位的值\",{\"1\":{\"891\":1}}],[\"小数点后16位\",{\"1\":{\"513\":1}}],[\"小驼峰\",{\"1\":{\"835\":1}}],[\"均使用java\",{\"1\":{\"2750\":1}}],[\"均无法继续执行\",{\"1\":{\"1542\":1}}],[\"均匀分布\",{\"1\":{\"513\":1}}],[\"均可\",{\"1\":{\"123\":1}}],[\"近似\",{\"1\":{\"513\":1}}],[\"需释放已建立的连接\",{\"1\":{\"1956\":1}}],[\"需求会变\",{\"1\":{\"3028\":1}}],[\"需求非常灵活的全文搜索查询\",{\"1\":{\"2850\":1}}],[\"需求是输入int\",{\"1\":{\"1333\":1}}],[\"需求\",{\"0\":{\"2084\":1,\"2613\":1},\"1\":{\"1153\":1,\"1373\":1,\"1382\":1,\"1707\":1,\"3026\":1}}],[\"需用import语句来引入指定包层次下所需要的类或全部类\",{\"1\":{\"1092\":1}}],[\"需显式初始化\",{\"1\":{\"828\":1}}],[\"需重写compare\",{\"1\":{\"506\":1}}],[\"需要添加多个host\",{\"1\":{\"3225\":1}}],[\"需要在登录时就选择进行权限验证\",{\"1\":{\"3205\":1}}],[\"需要在文件所在目录执行命令\",{\"1\":{\"794\":1}}],[\"需要在文件所在位置执行命令\",{\"1\":{\"790\":1}}],[\"需要输入查看命令\",{\"1\":{\"3198\":1}}],[\"需要勾选如下设置\",{\"1\":{\"3147\":1}}],[\"需要能快速水平扩展\",{\"1\":{\"3028\":1}}],[\"需要多次调用组合方法\",{\"1\":{\"2996\":1}}],[\"需要getrequest请求对象\",{\"1\":{\"2991\":1}}],[\"需要结合bulkrequest请求对象和deleterequest请求对象\",{\"1\":{\"2987\":1}}],[\"需要结合bulkrequest请求对象和indexrequest请求对象\",{\"1\":{\"2986\":1}}],[\"需要deleterequest请求对象\",{\"1\":{\"2984\":1}}],[\"需要updaterequest请求对象\",{\"1\":{\"2983\":1}}],[\"需要知道这个类型下有哪些字段\",{\"1\":{\"2961\":1}}],[\"需要高亮显示的字段\",{\"1\":{\"2959\":1}}],[\"需要晚上的服务框架搭建起来进行应用\",{\"1\":{\"2844\":1}}],[\"需要放行\",{\"1\":{\"2697\":1}}],[\"需要加\",{\"1\":{\"2667\":3}}],[\"需要加虚拟目录\",{\"1\":{\"2667\":1}}],[\"需要加终止条件和限制条件辅助生成\",{\"1\":{\"2201\":1}}],[\"需要响应对象\",{\"1\":{\"2659\":1}}],[\"需要再创建一个必备的目录\",{\"1\":{\"2465\":1}}],[\"需要再次创建一个线程对象\",{\"1\":{\"1477\":1}}],[\"需要修改\",{\"1\":{\"2457\":1}}],[\"需要修改服务器配置\",{\"1\":{\"220\":1}}],[\"需要一个\",{\"1\":{\"2435\":1}}],[\"需要一些后台运行的程序时\",{\"1\":{\"1446\":1}}],[\"需要数据库连接的时候\",{\"1\":{\"2414\":1}}],[\"需要实现的特殊操作\",{\"0\":{\"2401\":1}}],[\"需要实现的基本数据表操作\",{\"0\":{\"2400\":1}}],[\"需要实现接口\",{\"1\":{\"1905\":1}}],[\"需要对副本集进行初始化\",{\"1\":{\"3225\":1}}],[\"需要对查询的结果进行处理\",{\"1\":{\"2336\":1}}],[\"需要对异常进行处理\",{\"1\":{\"426\":1}}],[\"需要安装具体的实现类\",{\"1\":{\"2292\":1}}],[\"需要针对这套接口\",{\"1\":{\"2283\":1}}],[\"需要打开项目配置菜单\",{\"1\":{\"2106\":1}}],[\"需要手动创建补齐\",{\"1\":{\"2491\":1}}],[\"需要手动的实现该接口\",{\"1\":{\"2090\":1}}],[\"需要手动指定版本\",{\"1\":{\"321\":1,\"322\":1,\"323\":1,\"324\":1,\"331\":1}}],[\"需要连接数据库的类都要继承他\",{\"1\":{\"2073\":1}}],[\"需要通过setaccessible进行设置\",{\"1\":{\"2069\":1}}],[\"需要自己进行循环拼接形参名\",{\"1\":{\"2048\":1}}],[\"需要自定义枚举类\",{\"1\":{\"1370\":1}}],[\"需要编译时按ctrl\",{\"1\":{\"2502\":1}}],[\"需要编译\",{\"1\":{\"1999\":1}}],[\"需要创建一个customer类\",{\"1\":{\"2351\":1}}],[\"需要创建新的套接字对象\",{\"1\":{\"1966\":1}}],[\"需要创建dev\",{\"1\":{\"307\":1}}],[\"需要满足的要求\",{\"0\":{\"1905\":1}}],[\"需要套接在fileinputstream上\",{\"1\":{\"1898\":1}}],[\"需要套接在fileoutputstream上\",{\"1\":{\"1898\":2}}],[\"需要和outputstream\",{\"1\":{\"1854\":1}}],[\"需要和inputstream\",{\"1\":{\"1846\":1}}],[\"需要处理同样的异常\",{\"1\":{\"1822\":1}}],[\"需要处理java\",{\"1\":{\"1812\":1}}],[\"需要用到基本数据类型的位置\",{\"1\":{\"1711\":1}}],[\"需要用到executors工厂类\",{\"1\":{\"1568\":1}}],[\"需要类型强制转换的问题\",{\"1\":{\"1703\":1}}],[\"需要key所在的类\",{\"1\":{\"1687\":1}}],[\"需要根据\",{\"1\":{\"1666\":1,\"1685\":1}}],[\"需要根据实际情况\",{\"1\":{\"924\":1}}],[\"需要优化哈希算法\",{\"1\":{\"1652\":1}}],[\"需要提供实现runnable接口或callable接口实现类的对象做参数\",{\"1\":{\"1568\":1}}],[\"需要某种方式来防止两个任务访问相同的资源\",{\"1\":{\"1524\":1}}],[\"需要被同步的代码块\",{\"1\":{\"1511\":1}}],[\"需要try\",{\"1\":{\"1481\":2}}],[\"需要三个功能\",{\"1\":{\"1446\":1}}],[\"需要我们自己下载\",{\"1\":{\"2287\":1}}],[\"需要我们自己new异常类\",{\"1\":{\"1360\":1}}],[\"需要我们自己手动抛出\",{\"1\":{\"1359\":1}}],[\"需要我们必须在实现类中重写此方法\",{\"1\":{\"1269\":1}}],[\"需要具体子类确定的步骤\",{\"1\":{\"1252\":1}}],[\"需要\",{\"1\":{\"1207\":1}}],[\"需要为每个子类创建一个方法\",{\"1\":{\"1152\":1}}],[\"需要保证先初始化父类\",{\"1\":{\"1136\":1}}],[\"需要保证被移动的文件在硬盘中是存在的\",{\"1\":{\"560\":1}}],[\"需要父类实现了private成员的getxxx和setxxx方法\",{\"1\":{\"1120\":1}}],[\"需要进行配置\",{\"1\":{\"2518\":1}}],[\"需要进行多线程的修改\",{\"1\":{\"1242\":1}}],[\"需要进行数组的初始化\",{\"1\":{\"989\":1}}],[\"需要进行时间偏移\",{\"1\":{\"477\":1}}],[\"需要将中文数据转码\",{\"1\":{\"2806\":1}}],[\"需要将数据库的链接和关闭操作再数据表实现类的调用处执行\",{\"1\":{\"2404\":1}}],[\"需要将真正的源码导入\",{\"1\":{\"2291\":1}}],[\"需要将此线程的操作声明在run方法中\",{\"1\":{\"1469\":1}}],[\"需要将范围小的声明在范围大的上面\",{\"1\":{\"924\":1}}],[\"需要将random结果乘一个倍数\",{\"1\":{\"513\":1}}],[\"需要重写抽象类里的抽象方法\",{\"1\":{\"1249\":1}}],[\"需要重写equals方法\",{\"1\":{\"664\":1}}],[\"需要重新指定内存区域赋值\",{\"1\":{\"880\":1}}],[\"需要调用方法\",{\"1\":{\"2323\":1}}],[\"需要调用包装类的parsexxx\",{\"1\":{\"1198\":1}}],[\"需要调用静态方法compile返回pattern实例\",{\"1\":{\"747\":1}}],[\"需要调用对应包装类的静态方法\",{\"1\":{\"423\":1}}],[\"需要借助futuretask类\",{\"1\":{\"1560\":1}}],[\"需要借助pattern中的flags\",{\"1\":{\"738\":1}}],[\"需要借助方法\",{\"1\":{\"469\":1}}],[\"需要使用slaveok方法赋予权限\",{\"1\":{\"3169\":1}}],[\"需要使用options中的multi选项\",{\"1\":{\"3083\":1}}],[\"需要使用deleterequest请求对象\",{\"1\":{\"2987\":1}}],[\"需要使用indexrequest请求对象\",{\"1\":{\"2986\":1}}],[\"需要使用bulkrequest请求对象\",{\"1\":{\"2985\":1}}],[\"需要使用request对象提供的三个方法\",{\"1\":{\"2654\":1}}],[\"需要使用被代理类的对象进行赋值\",{\"1\":{\"2095\":1}}],[\"需要使用executorservice接口的子类\",{\"1\":{\"1568\":1}}],[\"需要使用\",{\"1\":{\"1029\":1,\"1785\":1,\"1788\":1,\"2702\":1,\"3102\":1}}],[\"需要使用包装函数进行\",{\"1\":{\"887\":1}}],[\"需要使用单引号表示值\",{\"1\":{\"853\":1}}],[\"需要使用特点的方法\",{\"1\":{\"530\":1}}],[\"需要使用nginx代理\",{\"1\":{\"391\":1}}],[\"需要end=length+1\",{\"1\":{\"454\":1}}],[\"需要设置静态资源映射\",{\"1\":{\"391\":1}}],[\"需要设计表现层返回结果的模型类\",{\"1\":{\"370\":1}}],[\"需要maven设置支持\",{\"1\":{\"332\":1}}],[\"需要先搭建好副本集\",{\"1\":{\"3223\":1}}],[\"需要先连接mongodb\",{\"1\":{\"3050\":1}}],[\"需要先转换为静态资源\",{\"1\":{\"2447\":1}}],[\"需要先setaccessible\",{\"1\":{\"2062\":1}}],[\"需要先获取执行当前代码的线程\",{\"1\":{\"1479\":2}}],[\"需要先创建一个同等长度的集合\",{\"1\":{\"689\":1}}],[\"需要先创建对象\",{\"1\":{\"616\":1,\"617\":1}}],[\"需要先调用setaccessible\",{\"1\":{\"616\":1,\"617\":1}}],[\"需要先确认操作何种数据\",{\"1\":{\"288\":1}}],[\"需要先导入对应技术的坐标\",{\"1\":{\"265\":1}}],[\"需要配置的是数据库的连接信息和mybatis的sql映射\",{\"1\":{\"269\":1}}],[\"需要继承\",{\"1\":{\"243\":1}}],[\"需要记录日志的控制器就继承该控制器\",{\"1\":{\"243\":1}}],[\"需要什么技术\",{\"1\":{\"99\":1}}],[\"需要学习的内容\",{\"0\":{\"69\":1}}],[\"需要前置知识\",{\"1\":{\"11\":1,\"70\":1,\"338\":1}}],[\"判断下一行有没有数据\",{\"1\":{\"2342\":1}}],[\"判断optional容器中是否有对象\",{\"0\":{\"2255\":1},\"1\":{\"2256\":1}}],[\"判断时\",{\"1\":{\"1634\":1}}],[\"判断main进程是否还在激活状态\",{\"1\":{\"1481\":1}}],[\"判断当前线程是否存活\",{\"1\":{\"1479\":1,\"1481\":1}}],[\"判断当前map是否为空\",{\"1\":{\"719\":1}}],[\"判断两个\",{\"1\":{\"1664\":2}}],[\"判断两个对象的属性是否相同\",{\"1\":{\"1180\":1}}],[\"判断两个对象是否想等\",{\"1\":{\"1176\":1}}],[\"判断两个集合是否想等\",{\"1\":{\"667\":1,\"720\":1}}],[\"判断的是左边\",{\"1\":{\"1150\":1}}],[\"判断number的正负情况\",{\"1\":{\"938\":1}}],[\"判断参数字符串是否匹配到了pattern实例指定的正则表达式\",{\"1\":{\"752\":1}}],[\"判断参数字符串是否匹配到了给定的正则表达式\",{\"1\":{\"743\":1}}],[\"判断形参c中的所有元素是否都存在于当前集合中\",{\"1\":{\"663\":1}}],[\"判断集合是否为空\",{\"1\":{\"661\":1}}],[\"判断是否是隐藏文件\",{\"1\":{\"1920\":1}}],[\"判断是否是文件\",{\"1\":{\"1920\":1}}],[\"判断是否是目录\",{\"1\":{\"1920\":1}}],[\"判断是否是绝对路径\",{\"1\":{\"1918\":1}}],[\"判断是否是空字符串\",{\"1\":{\"411\":1}}],[\"判断是否以\",{\"1\":{\"1918\":2}}],[\"判断是否还有输入的数据\",{\"1\":{\"637\":1,\"758\":1}}],[\"判断文件是否不存在\",{\"1\":{\"1920\":1}}],[\"判断文件是否可写\",{\"1\":{\"1920\":1}}],[\"判断文件是否可读\",{\"1\":{\"1920\":1}}],[\"判断文件是否存在\",{\"1\":{\"1920\":1}}],[\"判断文件是否有\",{\"1\":{\"552\":1}}],[\"判断文件\",{\"1\":{\"551\":1}}],[\"判断file是否为文件\",{\"1\":{\"550\":1}}],[\"判断file是否为目录\",{\"1\":{\"549\":1}}],[\"判断\",{\"0\":{\"548\":1},\"1\":{\"1181\":1,\"1432\":1,\"1633\":1,\"2566\":1}}],[\"判断这两个对象\",{\"1\":{\"501\":1}}],[\"判断数据类型是否相同\",{\"1\":{\"501\":1}}],[\"know\",{\"1\":{\"2858\":1}}],[\"kill\",{\"1\":{\"3050\":1}}],[\"kibana\",{\"1\":{\"2842\":1}}],[\"kit\",{\"1\":{\"777\":1}}],[\"keepalivetime\",{\"1\":{\"1565\":1}}],[\"keyfile鉴权文件\",{\"1\":{\"3214\":1}}],[\"keyfile\",{\"1\":{\"3209\":1,\"3212\":2,\"3213\":3,\"3214\":2}}],[\"keyid\",{\"1\":{\"3156\":1,\"3159\":1,\"3160\":1,\"3186\":1,\"3187\":1}}],[\"keyword类型的字段\",{\"1\":{\"2966\":1}}],[\"keyword\",{\"1\":{\"2963\":1,\"2964\":2,\"2965\":2}}],[\"keyword=要完全匹配\",{\"1\":{\"2963\":1}}],[\"key是列名\",{\"1\":{\"2436\":1}}],[\"key是有set组成的\",{\"1\":{\"710\":1}}],[\"keyedhandler\",{\"1\":{\"2436\":1}}],[\"keystore\",{\"1\":{\"2860\":1}}],[\"keys\",{\"1\":{\"2435\":1,\"3110\":1,\"3111\":1}}],[\"keyset\",{\"0\":{\"721\":1},\"1\":{\"721\":2,\"2624\":1}}],[\"key+\",{\"1\":{\"1710\":1,\"2624\":1}}],[\"key2\",{\"1\":{\"1674\":2}}],[\"key1\",{\"1\":{\"1674\":1}}],[\"key可以自然排序或定制排序\",{\"1\":{\"1666\":1}}],[\"key所在的类要重写equals\",{\"1\":{\"1670\":1}}],[\"key所在的类要重写\",{\"1\":{\"1664\":1}}],[\"key=>value\",{\"1\":{\"720\":1}}],[\"key一般为string\",{\"1\":{\"711\":1}}],[\"key\",{\"0\":{\"1670\":1},\"1\":{\"375\":2,\"376\":2,\"377\":2,\"378\":2,\"379\":1,\"380\":1,\"381\":1,\"382\":1,\"383\":1,\"384\":1,\"385\":1,\"636\":1,\"646\":1,\"710\":2,\"711\":1,\"713\":1,\"715\":1,\"716\":1,\"1578\":1,\"1661\":5,\"1664\":2,\"1666\":3,\"1668\":3,\"1670\":1,\"1682\":1,\"1685\":3,\"1691\":2,\"1710\":1,\"2371\":1,\"2624\":2,\"2793\":1,\"2957\":4,\"3031\":2,\"3109\":1,\"3112\":2,\"3113\":3,\"3198\":1}}],[\"k2\",{\"1\":{\"646\":2}}],[\"k1\",{\"1\":{\"646\":2}}],[\"kk\",{\"1\":{\"508\":3}}],[\"k++\",{\"1\":{\"498\":1}}],[\"k\",{\"1\":{\"498\":4,\"564\":2,\"565\":1,\"566\":1,\"571\":1,\"575\":1,\"711\":1,\"712\":1,\"979\":1,\"1575\":1,\"1714\":1}}],[\"两者的功能和效率基本一样\",{\"1\":{\"2844\":1}}],[\"两者都会因为所需资源被占用而阻塞\",{\"1\":{\"1545\":1}}],[\"两次获取的session并不是同一个\",{\"1\":{\"2821\":1}}],[\"两次请求\",{\"1\":{\"2664\":1}}],[\"两同\",{\"1\":{\"1037\":1}}],[\"两同一不同\",{\"1\":{\"1037\":1}}],[\"两层循环相当于是一个矩阵\",{\"1\":{\"952\":1}}],[\"两种类型\",{\"0\":{\"3130\":1}}],[\"两种体系\",{\"1\":{\"1578\":1}}],[\"两种方式都需要重写run\",{\"1\":{\"1499\":1}}],[\"两种方式的比较\",{\"0\":{\"1496\":1}}],[\"两种浮点类型只是表示的数据范围和精度不同\",{\"1\":{\"846\":1}}],[\"两种浮点类型的对比\",{\"0\":{\"846\":1}}],[\"两种打包方式的对比\",{\"0\":{\"196\":1}}],[\"两种打包方式\",{\"0\":{\"195\":1}}],[\"两个方法可以单独使用\",{\"1\":{\"3096\":1}}],[\"两个方法声明的位置不同\",{\"1\":{\"1555\":1}}],[\"两个类\",{\"1\":{\"2096\":1}}],[\"两个子类\",{\"1\":{\"1942\":1}}],[\"两个都要关闭\",{\"1\":{\"1817\":1}}],[\"两个都是抽象类无法直接实现\",{\"1\":{\"564\":1}}],[\"两个key通过compareto\",{\"1\":{\"1666\":1,\"1685\":1}}],[\"两个key\",{\"1\":{\"1666\":1,\"1685\":1}}],[\"两个线程无序交替执行\",{\"1\":{\"1489\":1}}],[\"两个变量指向同一内存地址\",{\"1\":{\"1306\":1,\"1308\":1}}],[\"两个变量各种保存了一份值\",{\"1\":{\"1306\":1}}],[\"两个变量互不干扰\",{\"1\":{\"1044\":1,\"1307\":1}}],[\"两个对象中保存的属性也是互不相干的\",{\"1\":{\"1302\":1}}],[\"两个对象通过\",{\"1\":{\"497\":1,\"1637\":1}}],[\"两个表达式类型不一致\",{\"1\":{\"913\":1}}],[\"两个int类型相除\",{\"1\":{\"891\":1}}],[\"两个\",{\"1\":{\"737\":1,\"1664\":2}}],[\"两个集合会用equals比对集合中的所有obj\",{\"1\":{\"667\":1}}],[\"两个数组就相等\",{\"1\":{\"648\":1}}],[\"两个内存地址是不一样的\",{\"1\":{\"647\":1}}],[\"言外之意\",{\"1\":{\"491\":1,\"1206\":1}}],[\"都提倡将其打成war包然后放置于同一个tomcat的webapps下进行管理\",{\"1\":{\"2750\":1}}],[\"都属于java\",{\"1\":{\"2741\":1}}],[\"都表示任意匹配\",{\"1\":{\"2577\":1}}],[\"都声明一个静态代理\",{\"1\":{\"2075\":1}}],[\"都为其保留一个不变的\",{\"1\":{\"2012\":1}}],[\"都指定为实例化的泛型类型\",{\"1\":{\"1711\":1}}],[\"都应该用来计算\",{\"1\":{\"1649\":1}}],[\"都在等待对方放弃自己需要的同步资源\",{\"1\":{\"1540\":1}}],[\"都进行票据的打印\",{\"1\":{\"1507\":1}}],[\"都还没有更新数据\",{\"1\":{\"1506\":1}}],[\"都与\",{\"1\":{\"1404\":1,\"1405\":1,\"1406\":1}}],[\"都\",{\"1\":{\"1402\":1}}],[\"都会报错\",{\"1\":{\"3012\":1}}],[\"都会更新版本\",{\"1\":{\"2915\":1}}],[\"都会随机生成一个\",{\"1\":{\"2902\":1}}],[\"都会被拦截\",{\"1\":{\"2701\":3}}],[\"都会出现中文乱码的问题\",{\"1\":{\"2626\":1}}],[\"都会保存上一次的指针\",{\"1\":{\"1892\":1}}],[\"都会返回一个全新的迭代器\",{\"1\":{\"1599\":1}}],[\"都会有唯一的\",{\"1\":{\"1404\":1}}],[\"都会有唯一的retentionpolicy属性\",{\"1\":{\"1402\":1}}],[\"都会提供抽象类的子类\",{\"1\":{\"1246\":1}}],[\"都必须显式的赋值\",{\"1\":{\"1399\":1}}],[\"都必须手动调用close方法进行关闭\",{\"1\":{\"571\":1}}],[\"都能解决问题\",{\"1\":{\"1359\":1}}],[\"都无条件执行的语句\",{\"1\":{\"1337\":1}}],[\"都生成一个对象去读取\",{\"1\":{\"1243\":1}}],[\"都不能使用该类\",{\"1\":{\"1211\":1}}],[\"都直接或间接的继承于java\",{\"1\":{\"1116\":1}}],[\"都选择省略\",{\"1\":{\"1080\":1}}],[\"都有固定的模板\",{\"1\":{\"2766\":1}}],[\"都有setattribute和getattribute方法\",{\"1\":{\"2671\":1}}],[\"都有默认初始化值\",{\"1\":{\"1025\":1}}],[\"都有多个参数\",{\"1\":{\"486\":1}}],[\"都体现为类\",{\"1\":{\"1005\":1}}],[\"都可以用来指定url\",{\"1\":{\"2570\":1}}],[\"都可以保存到配置文件中\",{\"1\":{\"2301\":1}}],[\"都可以在调用源方法的前后执行一些指定的增强逻辑\",{\"1\":{\"2086\":1}}],[\"都可以是任何引用类型的数据\",{\"1\":{\"1661\":1}}],[\"都可以使得当前的线程进入阻塞状态\",{\"1\":{\"1555\":1}}],[\"都可以使用collection\",{\"1\":{\"499\":1}}],[\"都可以解决线程安全问题\",{\"1\":{\"1537\":1}}],[\"都可以充当锁\",{\"1\":{\"1511\":1}}],[\"都可以改写为if\",{\"1\":{\"915\":1,\"929\":1}}],[\"都作为此类的实例实现\",{\"1\":{\"878\":1}}],[\"都已补码的方式来存储数据\",{\"1\":{\"873\":1}}],[\"都需要使用\",{\"1\":{\"810\":1}}],[\"都存在\",{\"1\":{\"663\":1}}],[\"都重写了equals方法\",{\"1\":{\"662\":1}}],[\"都返回0\",{\"1\":{\"544\":1}}],[\"都实现了comparable接口\",{\"1\":{\"496\":1}}],[\"都是使用maven来管理包的\",{\"1\":{\"2751\":1}}],[\"都是先获取流对象\",{\"1\":{\"2605\":1}}],[\"都是针对http协议\",{\"1\":{\"2561\":1}}],[\"都是一些高级的tomcat使用\",{\"1\":{\"2520\":1}}],[\"都是一个集合\",{\"1\":{\"2219\":1}}],[\"都是通过配置文件进行控制的\",{\"1\":{\"2388\":1}}],[\"都是提前定义好方法\",{\"1\":{\"2142\":1}}],[\"都是\",{\"1\":{\"2075\":1}}],[\"都是直接将字符和最终字节流绑定死了\",{\"1\":{\"1863\":1}}],[\"都是从如下4个抽象基类派生的\",{\"1\":{\"1776\":1}}],[\"都是字符串类型\",{\"1\":{\"1668\":1}}],[\"都是以实现类做测试的\",{\"1\":{\"1582\":1}}],[\"都是private\",{\"1\":{\"1282\":1}}],[\"都是抽象类number的子类\",{\"1\":{\"523\":1}}],[\"都是前后端分离的\",{\"1\":{\"372\":1}}],[\"都是将日志写入文件\",{\"1\":{\"254\":1}}],[\"都是spring容器中的组件\",{\"1\":{\"136\":1}}],[\"获得结果\",{\"1\":{\"2283\":1}}],[\"获得一个employee\",{\"1\":{\"2172\":1,\"2175\":1,\"2178\":1}}],[\"获得一个offsetdatetime时间对象\",{\"1\":{\"477\":1}}],[\"获得核心类库string的类加载器\",{\"1\":{\"2032\":1}}],[\"获得当前自定义类加载器\",{\"1\":{\"2032\":1}}],[\"获得本地ip对象\",{\"0\":{\"1944\":1}}],[\"获得线程的优先级\",{\"1\":{\"1489\":1}}],[\"获得\",{\"1\":{\"1194\":1}}],[\"获取统计信息\",{\"1\":{\"3190\":2}}],[\"获取响应\",{\"1\":{\"2986\":1,\"2987\":1}}],[\"获取响应结果\",{\"1\":{\"2978\":1,\"2984\":1,\"2991\":1}}],[\"获取响应对象\",{\"1\":{\"2975\":1,\"2980\":1}}],[\"获取查询结果\",{\"1\":{\"2977\":1}}],[\"获取独立存储的字段要比从\",{\"1\":{\"2963\":1}}],[\"获取httpsession对象\",{\"0\":{\"2814\":1}}],[\"获取hour\",{\"1\":{\"471\":1}}],[\"获取触发事件的servletrequest对象\",{\"1\":{\"2719\":1}}],[\"获取触发事件的httpsession对象\",{\"1\":{\"2718\":1,\"2720\":1}}],[\"获取被修改或添加的属性值\",{\"1\":{\"2717\":1,\"2718\":1,\"2719\":1}}],[\"获取被代理类对象superman\",{\"1\":{\"2097\":1}}],[\"获取被代理类的对象\",{\"1\":{\"2085\":1}}],[\"获取修改或添加的属性名\",{\"1\":{\"2717\":1,\"2718\":1,\"2719\":1}}],[\"获取其真正部署后的路径\",{\"1\":{\"2692\":1}}],[\"获取其他信息\",{\"0\":{\"2049\":1}}],[\"获取转发时发送的共享数据\",{\"1\":{\"2655\":1}}],[\"获取response字节输出流\",{\"1\":{\"2646\":1,\"2647\":1}}],[\"获取单个参数值\",{\"1\":{\"2624\":1}}],[\"获取值\",{\"1\":{\"2624\":1}}],[\"获取的内容如下\",{\"1\":{\"2618\":1}}],[\"获取的是该类的所有属性\",{\"1\":{\"2060\":1}}],[\"获取的是public修饰的属性\",{\"1\":{\"2059\":1}}],[\"获取的是参数数据类型的class对象\",{\"1\":{\"611\":1}}],[\"获取字节输出流\",{\"1\":{\"2637\":1,\"2648\":1}}],[\"获取字节输入流\",{\"0\":{\"2606\":1}}],[\"获取字符输出流\",{\"1\":{\"2637\":1}}],[\"获取字符输入流\",{\"0\":{\"2607\":1},\"1\":{\"2610\":1}}],[\"获取字符串类型的形参\",{\"1\":{\"624\":1}}],[\"获取字符串形式的方法名\",{\"1\":{\"623\":1,\"2048\":1}}],[\"获取字符串形式的属性名\",{\"1\":{\"615\":1}}],[\"获取字符串内容的长度\",{\"1\":{\"449\":1}}],[\"获取所有参数的map集合\",{\"1\":{\"2624\":1}}],[\"获取所有参数map集合\",{\"1\":{\"2621\":1}}],[\"获取所有请求的参数名称\",{\"1\":{\"2621\":1}}],[\"获取所有请求头的名称\",{\"0\":{\"2602\":1}}],[\"获取所有的请求头\",{\"1\":{\"2602\":1}}],[\"获取所有自己所有权限的属性\",{\"0\":{\"2043\":1}}],[\"获取客户机的ip地址\",{\"1\":{\"2597\":1}}],[\"获取get的请求参数\",{\"1\":{\"2597\":1}}],[\"获取协议及版本\",{\"1\":{\"2597\":1}}],[\"获取uri\",{\"1\":{\"2597\":1}}],[\"获取url\",{\"1\":{\"2597\":1}}],[\"获取虚拟目录\",{\"1\":{\"2597\":1}}],[\"获取到数据后就可以继续后续的业务\",{\"1\":{\"2584\":1}}],[\"获取请求对象\",{\"1\":{\"2983\":1}}],[\"获取请求参数\",{\"1\":{\"2614\":1,\"2630\":1}}],[\"获取请求体的方式\",{\"0\":{\"2605\":1}}],[\"获取请求体\",{\"0\":{\"2603\":1}}],[\"获取请求头的值\",{\"0\":{\"2600\":1}}],[\"获取请求头\",{\"0\":{\"2599\":1}}],[\"获取请求行\",{\"0\":{\"2595\":1}}],[\"获取请求数据\",{\"0\":{\"2584\":1}}],[\"获取请求方式\",{\"1\":{\"2566\":1,\"2597\":1,\"2614\":1}}],[\"获取请求时发送过来的流对象\",{\"1\":{\"1977\":1}}],[\"获取sessionid\",{\"0\":{\"2819\":1}}],[\"获取servletcontext对象\",{\"0\":{\"2682\":1},\"1\":{\"2717\":1}}],[\"获取servletconfig对象\",{\"0\":{\"2556\":1}}],[\"获取servlet路径\",{\"1\":{\"2597\":1}}],[\"获取servlet信息\",{\"0\":{\"2555\":1}}],[\"获取string类型的操作对象\",{\"1\":{\"288\":1,\"289\":1}}],[\"获取速度快\",{\"1\":{\"2420\":1}}],[\"获取最大的生日\",{\"1\":{\"2409\":1}}],[\"获取最后一次的修改时间\",{\"1\":{\"545\":1}}],[\"获取了父类的泛型参数\",{\"1\":{\"2405\":1}}],[\"获取泛型值\",{\"1\":{\"2405\":1}}],[\"获取泛型类型\",{\"1\":{\"2053\":1}}],[\"获取blob类型的数据\",{\"1\":{\"2363\":1}}],[\"获取列值\",{\"1\":{\"2352\":1,\"2355\":1,\"2405\":2}}],[\"获取指针所在行的数据\",{\"0\":{\"2343\":1}}],[\"获取指定列的别名\",{\"1\":{\"2345\":1}}],[\"获取指定列的名称\",{\"1\":{\"2345\":1}}],[\"获取指定的构造器\",{\"0\":{\"2068\":1},\"1\":{\"2067\":1}}],[\"获取指定的某个方法\",{\"0\":{\"2064\":1,\"2065\":1}}],[\"获取指定的方法\",{\"1\":{\"2063\":1}}],[\"获取指定的属性对象\",{\"1\":{\"606\":1,\"607\":1}}],[\"获取指定索引出的值\",{\"1\":{\"972\":1}}],[\"获取指定key对应的value\",{\"1\":{\"715\":1}}],[\"获取指定index\",{\"1\":{\"699\":1}}],[\"获取preparedstatement的实例\",{\"1\":{\"2386\":1}}],[\"获取preparedstatement对象并给占位符赋值\",{\"1\":{\"2349\":1,\"2364\":1,\"2365\":1}}],[\"获取preparedstatement对象\",{\"1\":{\"2321\":1,\"2352\":1,\"2355\":1}}],[\"获取person的class实例\",{\"1\":{\"1432\":1}}],[\"获取person类的class对象\",{\"1\":{\"591\":1}}],[\"获取连接时最大等待时间\",{\"1\":{\"2425\":1,\"2426\":1}}],[\"获取连接\",{\"1\":{\"2299\":1,\"2300\":1,\"2303\":1,\"2325\":1,\"2327\":1}}],[\"获取连接对象\",{\"1\":{\"2297\":1,\"2349\":1,\"2352\":1,\"2355\":1,\"2391\":1}}],[\"获取对象包含的值\",{\"0\":{\"2259\":1}}],[\"获取对应的xxxoperations对象\",{\"1\":{\"288\":1}}],[\"获取optional容器的对象值\",{\"0\":{\"2258\":1}}],[\"获取工资大于6000的员工set集合\",{\"1\":{\"2243\":1}}],[\"获取工资大于6000的员工list集合\",{\"1\":{\"2243\":1}}],[\"获取工资最低的员工对象\",{\"1\":{\"2236\":1}}],[\"获取1到10的总和\",{\"1\":{\"2239\":1}}],[\"获取要连接的数据库信息\",{\"1\":{\"2291\":1}}],[\"获取要筛选的元素的总数\",{\"1\":{\"2234\":1}}],[\"获取要增强的方法名\",{\"1\":{\"2087\":1}}],[\"获取子集合\",{\"1\":{\"2224\":1}}],[\"获取班级学生所有年龄组成的集合\",{\"1\":{\"2222\":1,\"2223\":1}}],[\"获取一个集合\",{\"1\":{\"2221\":2}}],[\"获取一个stream\",{\"1\":{\"2192\":1}}],[\"获取一个seasons对象\",{\"1\":{\"1383\":1}}],[\"获取每个列的列名\",{\"1\":{\"2352\":1,\"2355\":1,\"2405\":2}}],[\"获取每个学生的年龄\",{\"1\":{\"2221\":1}}],[\"获取每一列的值\",{\"1\":{\"2340\":1}}],[\"获取每页显示的条数\",{\"1\":{\"352\":1}}],[\"获取员工集合\",{\"1\":{\"2210\":1}}],[\"获取员工姓名\",{\"1\":{\"2166\":1}}],[\"获取运行类中指定变量名的属性\",{\"1\":{\"2059\":1,\"2060\":1}}],[\"获取运行时方法的结构\",{\"0\":{\"2048\":1}}],[\"获取运行时类中指定变量名的属性\",{\"1\":{\"2058\":1}}],[\"获取运行时类声明的注解\",{\"0\":{\"2056\":1}}],[\"获取运行时类实现的接口\",{\"0\":{\"2054\":1}}],[\"获取运行时类的父类实现的接口\",{\"1\":{\"2054\":1}}],[\"获取运行时类的父类\",{\"0\":{\"2051\":1}}],[\"获取运行时类的父类的泛型\",{\"0\":{\"2052\":1,\"2053\":1},\"1\":{\"594\":1}}],[\"获取运行时类的构造器结构\",{\"0\":{\"2050\":1}}],[\"获取运行时类的方法\",{\"0\":{\"2047\":1}}],[\"获取运行时类的所有结构\",{\"1\":{\"2039\":1}}],[\"获取运行时类的完整结构\",{\"0\":{\"2039\":1}}],[\"获取运行时类所在的包\",{\"0\":{\"2055\":1},\"1\":{\"598\":1}}],[\"获取本类所有权限的方法\",{\"1\":{\"2047\":1}}],[\"获取类和父类中public方法\",{\"1\":{\"2047\":1}}],[\"获取类路径下的指定文件的输入流\",{\"0\":{\"2033\":1}}],[\"获取自己和父类所有public属性\",{\"0\":{\"2041\":1}}],[\"获取扩展类加载器\",{\"1\":{\"2032\":1}}],[\"获取cookie\",{\"0\":{\"2799\":1},\"1\":{\"2796\":1,\"2799\":1}}],[\"获取cookie的value\",{\"1\":{\"2796\":1}}],[\"获取cookie的name\",{\"1\":{\"2796\":1}}],[\"获取cookie的name和value\",{\"0\":{\"2796\":1}}],[\"获取cookie数据\",{\"0\":{\"2795\":1}}],[\"获取connection对象\",{\"1\":{\"2319\":2}}],[\"获取class类的实例\",{\"0\":{\"2017\":1}}],[\"获取callable中call方法的返回值\",{\"1\":{\"1562\":1}}],[\"获取该泛型作为属性clazz的值\",{\"1\":{\"2403\":1}}],[\"获取该url的查询名\",{\"1\":{\"1991\":1}}],[\"获取该url的文件名\",{\"1\":{\"1991\":1}}],[\"获取该url的文件路径\",{\"1\":{\"1991\":1}}],[\"获取该url的端口号\",{\"1\":{\"1991\":1}}],[\"获取该url的主机名\",{\"1\":{\"1991\":1}}],[\"获取该url的协议名\",{\"1\":{\"1991\":1}}],[\"获取该方法的myannotation注解实例\",{\"1\":{\"1432\":1}}],[\"获取输出流和输入流\",{\"1\":{\"1973\":1}}],[\"获取输入流和输出流\",{\"1\":{\"1973\":1}}],[\"获取套接字绑定的本地地址\",{\"1\":{\"1966\":1,\"1985\":1}}],[\"获取ip地址的主机名\",{\"0\":{\"1947\":1}}],[\"获取与指定文件的连接\",{\"1\":{\"1920\":1}}],[\"获取fileinputstream对象的字符集\",{\"1\":{\"1851\":1}}],[\"获取配置的值\",{\"1\":{\"1691\":1}}],[\"获取返回结果\",{\"1\":{\"1560\":1}}],[\"获取返回值类型\",{\"1\":{\"622\":1,\"2048\":1}}],[\"获取方法名\",{\"1\":{\"2048\":1}}],[\"获取方法声明的注解\",{\"1\":{\"2048\":1}}],[\"获取方法结构\",{\"0\":{\"2046\":1}}],[\"获取方法上的所有注解\",{\"1\":{\"1432\":1}}],[\"获取方法的注解\",{\"1\":{\"620\":1,\"2048\":1}}],[\"获取枚举类对象的属性\",{\"1\":{\"1373\":1}}],[\"获取异常类名和异常信息\",{\"1\":{\"1341\":1}}],[\"获取异常信息\",{\"1\":{\"1339\":1,\"1341\":1}}],[\"获取用户的输入\",{\"1\":{\"2754\":1}}],[\"获取用户的年龄\",{\"1\":{\"1286\":1}}],[\"获取用户密码\",{\"1\":{\"2310\":1}}],[\"获取用户名\",{\"1\":{\"2310\":1}}],[\"获取用于sql的日期\",{\"1\":{\"459\":1}}],[\"获取数据表的count\",{\"1\":{\"2409\":1}}],[\"获取数据库的连接\",{\"1\":{\"2329\":1,\"2333\":1}}],[\"获取数据库连接\",{\"0\":{\"2327\":1},\"1\":{\"2387\":1}}],[\"获取数据库连接对象\",{\"1\":{\"2318\":1,\"2404\":1,\"2424\":1}}],[\"获取数据类型\",{\"1\":{\"2045\":1}}],[\"获取数据\",{\"0\":{\"1745\":1},\"1\":{\"2799\":1}}],[\"获取数据需要数据库链接\",{\"1\":{\"1153\":1}}],[\"获取数组中实际元素的个数的需求\",{\"1\":{\"1574\":1}}],[\"获取数组长度\",{\"0\":{\"973\":1}}],[\"获取成员\",{\"1\":{\"1064\":1}}],[\"获取匹配的结果\",{\"1\":{\"750\":1}}],[\"获取结果集的元数据\",{\"1\":{\"2352\":1,\"2405\":2}}],[\"获取结果等\",{\"1\":{\"1560\":1}}],[\"获取结果\",{\"1\":{\"739\":1}}],[\"获取value\",{\"1\":{\"715\":1}}],[\"获取线程安全的集合\",{\"1\":{\"691\":1}}],[\"获取集合的元素个数\",{\"1\":{\"659\":1}}],[\"获取后的值依然是十进制\",{\"1\":{\"640\":1,\"761\":1}}],[\"获取系统信息\",{\"1\":{\"636\":1}}],[\"获取抛出的异常\",{\"1\":{\"625\":1,\"2048\":1}}],[\"获取形参列表\",{\"1\":{\"624\":1,\"2048\":1}}],[\"获取权限修饰符\",{\"1\":{\"621\":1,\"2045\":1,\"2048\":1}}],[\"获取属性\",{\"0\":{\"2059\":1,\"2060\":1}}],[\"获取属性名\",{\"1\":{\"2045\":1}}],[\"获取属性结构\",{\"0\":{\"2040\":1}}],[\"获取属性的结构\",{\"0\":{\"2045\":1}}],[\"获取属性的值\",{\"1\":{\"1011\":1}}],[\"获取属性的数据类型\",{\"1\":{\"614\":1}}],[\"获取属性值\",{\"0\":{\"2061\":1},\"1\":{\"616\":1}}],[\"获取加载器的父类\",{\"1\":{\"597\":1}}],[\"获取目录下所有文件\",{\"1\":{\"547\":1}}],[\"获取目录下的文件名称组成的string数组\",{\"1\":{\"546\":1}}],[\"获取当前事件涉及的属性值\",{\"1\":{\"2720\":1}}],[\"获取当前事件涉及的属性名\",{\"1\":{\"2720\":1}}],[\"获取当前basedao的子类继承的父类中的泛型\",{\"1\":{\"2405\":1}}],[\"获取当前连接的隔离级别\",{\"1\":{\"2391\":1}}],[\"获取当前隔离级别\",{\"0\":{\"2389\":1}}],[\"获取当前这条数据的各个字段值\",{\"1\":{\"2349\":1}}],[\"获取当前线程\",{\"1\":{\"1480\":1}}],[\"获取当前线程的名字\",{\"1\":{\"1479\":1}}],[\"获取当前对象的哈希值\",{\"1\":{\"1176\":1}}],[\"获取当前对象的所属类\",{\"1\":{\"1176\":1}}],[\"获取当前对象的类加载器\",{\"1\":{\"589\":1}}],[\"获取当前时间距离1970\",{\"1\":{\"956\":2}}],[\"获取当前属性的权限修饰符\",{\"1\":{\"613\":1}}],[\"获取当前运行时类中声明为public的构造器\",{\"1\":{\"2050\":2}}],[\"获取当前运行时类中声明的所有方法\",{\"1\":{\"2047\":1}}],[\"获取当前运行时类中声明的所有权限的方法\",{\"1\":{\"609\":1}}],[\"获取当前运行时类中声明的所有属性\",{\"1\":{\"605\":1,\"2043\":1}}],[\"获取当前运行时类中声明的所有的构造器\",{\"1\":{\"601\":1,\"2050\":2}}],[\"获取当前运行时类中的某一个方法的method对象\",{\"1\":{\"610\":1,\"611\":1}}],[\"获取当前运行时类及其所有父类中声明为public权限的方法\",{\"1\":{\"608\":1,\"2047\":1}}],[\"获取当前运行时类及其父类中声明为public访问权限的属性\",{\"1\":{\"604\":1,\"2041\":1}}],[\"获取当前运行时类的构造器对象组成的数组\",{\"1\":{\"600\":1}}],[\"获取当前运行时类实现的所有接口\",{\"1\":{\"595\":1}}],[\"获取当前文件上层文件目录的路径\",{\"1\":{\"543\":1}}],[\"获取当前页\",{\"1\":{\"352\":1}}],[\"获取文件服务器路径\",{\"0\":{\"2691\":1}}],[\"获取文件类型\",{\"0\":{\"2686\":1}}],[\"获取文件记录指针的当前位置\",{\"1\":{\"1883\":1}}],[\"获取文件长度\",{\"1\":{\"544\":1}}],[\"获取文件的服务器路径\",{\"1\":{\"2694\":1}}],[\"获取文件的真实\",{\"1\":{\"2681\":1}}],[\"获取文件的名称\",{\"1\":{\"542\":1}}],[\"获取文件的绝对路径\",{\"1\":{\"540\":1}}],[\"获取文件路径\",{\"1\":{\"541\":1}}],[\"获取信息\",{\"0\":{\"539\":1}}],[\"获取包含当前时间的instant对象\",{\"1\":{\"476\":1}}],[\"获取现在是一年中的第几天\",{\"1\":{\"471\":1}}],[\"获取毫秒时间戳\",{\"1\":{\"478\":1,\"633\":1}}],[\"获取毫秒\",{\"1\":{\"471\":1}}],[\"获取秒\",{\"1\":{\"471\":1}}],[\"获取day\",{\"1\":{\"471\":1}}],[\"获取mime类型\",{\"0\":{\"2683\":1},\"1\":{\"2681\":1}}],[\"获取minute\",{\"1\":{\"471\":1}}],[\"获取matcher类的实例\",{\"1\":{\"750\":1}}],[\"获取month\",{\"1\":{\"471\":1}}],[\"获取ms时间戳\",{\"1\":{\"459\":1}}],[\"获取year\",{\"1\":{\"471\":1}}],[\"获取时间和日期信息\",{\"1\":{\"471\":1}}],[\"获取日期\",{\"1\":{\"459\":1}}],[\"获取\",{\"0\":{\"406\":1,\"2338\":1},\"1\":{\"588\":1,\"1432\":3,\"1920\":2,\"2020\":1,\"2058\":1}}],[\"获取总页数\",{\"1\":{\"352\":1}}],[\"获取总条数\",{\"1\":{\"352\":1}}],[\"获取德鲁伊对象为例\",{\"1\":{\"158\":1}}],[\"毫秒时间戳\",{\"1\":{\"545\":1}}],[\"毫秒\",{\"1\":{\"469\":1,\"1481\":1}}],[\"秒杀\",{\"1\":{\"1442\":1}}],[\"秒\",{\"1\":{\"469\":1}}],[\"月\",{\"1\":{\"469\":1}}],[\"年龄\",{\"1\":{\"2209\":1,\"2214\":1}}],[\"年\",{\"1\":{\"469\":1}}],[\"纪念日等日期\",{\"1\":{\"466\":1}}],[\"历史悠久的\",{\"1\":{\"461\":1}}],[\"历史订单\",{\"1\":{\"399\":1}}],[\"吸收了c的优点\",{\"1\":{\"765\":1}}],[\"吸收了\",{\"1\":{\"461\":1}}],[\"偏移性\",{\"1\":{\"460\":1}}],[\"偏移值\",{\"1\":{\"455\":1}}],[\"它对字段值的散列进行索引\",{\"1\":{\"3107\":1}}],[\"它还可以检测代码是否被篡改过\",{\"1\":{\"2735\":1}}],[\"它包含的方法如下\",{\"1\":{\"2717\":1,\"2718\":1,\"2719\":1,\"2720\":1}}],[\"它只识别扩展名\",{\"1\":{\"2576\":1}}],[\"它与resultsethandler组合在一起使用可以完成大部分的数据库操作\",{\"1\":{\"2435\":1}}],[\"它结合了c3p0\",{\"1\":{\"2422\":1}}],[\"它仅仅把数据库连接释放\",{\"1\":{\"2421\":1}}],[\"它允许应用程序重复使用一个现有的数据库连接\",{\"1\":{\"2416\":1}}],[\"它能容纳不同大小的数据\",{\"1\":{\"2360\":1}}],[\"它鼓励程序员写更干净的代码\",{\"1\":{\"2248\":1}}],[\"它帮你把迭代做了\",{\"1\":{\"2237\":1}}],[\"它可提供自动故障转移和数据冗余\",{\"1\":{\"3024\":1}}],[\"它可以近乎实时的存储\",{\"1\":{\"2843\":1}}],[\"它可以快速地储存\",{\"1\":{\"2841\":1}}],[\"它可以保存类型t的值\",{\"1\":{\"2247\":1}}],[\"它可以接收任意数量的参数\",{\"1\":{\"2200\":1}}],[\"它可以指定你希望对集合进行的操作\",{\"1\":{\"2188\":1}}],[\"它可安排在给定延迟后运行命令或者定期地执行\",{\"1\":{\"1567\":1}}],[\"它必须实现invoke方法\",{\"1\":{\"2091\":1}}],[\"它将维持加载\",{\"1\":{\"2030\":1}}],[\"它将允许我们向较旧的接口添加方法\",{\"1\":{\"1273\":1}}],[\"它保证数据可靠的传送\",{\"1\":{\"1996\":1}}],[\"它用于监听web应用程序中的servletcontext\",{\"1\":{\"2711\":1}}],[\"它用于区分同一物理计算机上的多个服务\",{\"1\":{\"1996\":1}}],[\"它用来指定\",{\"1\":{\"1405\":1,\"1406\":1}}],[\"它表示一条预编译过的\",{\"1\":{\"2317\":1}}],[\"它表示一个正则表达式模式中的语法错误\",{\"1\":{\"736\":1}}],[\"它表示\",{\"1\":{\"1988\":1}}],[\"它从语言级上提供了对网络应用程序的支持\",{\"1\":{\"1923\":1}}],[\"它既可以作为runnable被线程执行\",{\"1\":{\"1560\":1}}],[\"它拥有与\",{\"1\":{\"1532\":1}}],[\"它实现了runnable接口中的run方法\",{\"1\":{\"1468\":1}}],[\"它会为程序预留4个字节的空间\",{\"1\":{\"1455\":1}}],[\"它会使用myannotation注解\",{\"1\":{\"1432\":1}}],[\"它会重复执行某段代码\",{\"1\":{\"1035\":1}}],[\"它所标注的内容\",{\"1\":{\"1427\":1}}],[\"它所标注的annotation将具有继承性\",{\"1\":{\"1426\":1}}],[\"它和我们通常的\",{\"1\":{\"1395\":1}}],[\"它继续被抛给这个调用方法的上层方法\",{\"1\":{\"1351\":1}}],[\"它不等同于对象本身\",{\"1\":{\"1298\":1}}],[\"它不声明返回值类型\",{\"1\":{\"1069\":1}}],[\"它是一个由字段和值对\",{\"1\":{\"3032\":1}}],[\"它是一种具体的uri\",{\"1\":{\"1988\":1,\"1995\":1}}],[\"它是java提供的一门动态web资源开发技术\",{\"1\":{\"2522\":1}}],[\"它是对jdbc的简单封装\",{\"1\":{\"2431\":1}}],[\"它是产生数据库连接的工厂\",{\"1\":{\"2421\":1}}],[\"它是软件的必要元素\",{\"1\":{\"1435\":2}}],[\"它是\",{\"1\":{\"1406\":1}}],[\"它是属于java\",{\"1\":{\"1181\":1}}],[\"它是通过用\",{\"1\":{\"429\":1}}],[\"它就不是多态\",{\"1\":{\"1159\":1}}],[\"它具有与类相同的名称\",{\"1\":{\"1069\":1}}],[\"它的值除了使用基本的一些类型外\",{\"1\":{\"3032\":1}}],[\"它的值是java运行时环境根据类的内部细节自动生成的\",{\"1\":{\"1910\":1}}],[\"它的工作原理是计算机索引程序通过扫描文章中的每一个词\",{\"1\":{\"2852\":1}}],[\"它的强大之处就是可以把java中的对象写入到数据源中\",{\"1\":{\"1894\":1}}],[\"它的元素相当于类的成员变量\",{\"1\":{\"975\":1}}],[\"它的功能是结束一个方法\",{\"1\":{\"948\":1}}],[\"它返回一个\",{\"1\":{\"736\":1}}],[\"它们会将该关键字即索引匹配到的所有网页返回\",{\"1\":{\"2848\":1}}],[\"它们都是根据网页中的关键字生成索引\",{\"1\":{\"2848\":1}}],[\"它们之间最大的区别\",{\"1\":{\"2789\":1}}],[\"它们就关闭connection\",{\"1\":{\"2434\":1}}],[\"它们在几乎每个方面都是相同的\",{\"1\":{\"1463\":1}}],[\"它们计算的是操作数的值之间的关系\",{\"1\":{\"1178\":1}}],[\"它们的调用地址在编译期就绑定了\",{\"1\":{\"1159\":1}}],[\"它们的实例是不可变的对象\",{\"1\":{\"464\":1}}],[\"它们提供了简单的本地日期或时间\",{\"1\":{\"464\":1}}],[\"它们面临的问题是\",{\"1\":{\"460\":1}}],[\"待更新的文档\",{\"1\":{\"3080\":1}}],[\"待查询的字段\",{\"1\":{\"2938\":1}}],[\"待删除的文档\",{\"1\":{\"2913\":1}}],[\"待修改的字段\",{\"1\":{\"2911\":1}}],[\"待修改的文档\",{\"1\":{\"2910\":1,\"2911\":1}}],[\"待补充的内容\",{\"1\":{\"2520\":1}}],[\"待匹配的字符串\",{\"1\":{\"750\":1}}],[\"待匹配的charsequence\",{\"1\":{\"750\":1}}],[\"待添加的集合\",{\"1\":{\"698\":1}}],[\"待添加的集合元素\",{\"1\":{\"697\":1}}],[\"待排序的list\",{\"1\":{\"684\":1}}],[\"待插入的内容\",{\"1\":{\"455\":1}}],[\"待封装的数据\",{\"0\":{\"130\":1}}],[\"能约束更复杂的内容\",{\"1\":{\"2780\":1}}],[\"能简单看懂约束文档即可\",{\"1\":{\"2775\":1}}],[\"能从网络上读取数据\",{\"1\":{\"1992\":1}}],[\"能用集合就用集合\",{\"1\":{\"1576\":1}}],[\"能用于修饰哪些程序元素\",{\"1\":{\"1412\":1}}],[\"能指定参数\",{\"1\":{\"1428\":1}}],[\"能够做全文索引和搜寻\",{\"1\":{\"2844\":1}}],[\"能够在xml中引入约束文档\",{\"1\":{\"2775\":1}}],[\"能够对jar文件进行数字签名\",{\"1\":{\"2738\":1}}],[\"能够对程序的状态作统一的管理\",{\"1\":{\"1342\":1}}],[\"能够识别签名的工具就可以有选择地为您授予软件安全特权\",{\"1\":{\"2735\":1}}],[\"能够大大减少编码量\",{\"1\":{\"2435\":1}}],[\"能够解析\",{\"1\":{\"1790\":1}}],[\"能够基于springboot实现基础ssm框架整合\",{\"1\":{\"69\":1}}],[\"能不能\",{\"1\":{\"1258\":1}}],[\"能继承\",{\"1\":{\"1118\":1}}],[\"能新建\",{\"1\":{\"538\":1,\"1761\":1}}],[\"能存储的最大整型值为2\",{\"1\":{\"529\":1}}],[\"能自动转为string类型的数据类型都可以作为参数\",{\"1\":{\"452\":1}}],[\"改\",{\"1\":{\"3184\":1}}],[\"改为其他方式解析\",{\"1\":{\"2641\":1}}],[\"改为80就不用输入端口号了\",{\"1\":{\"2502\":1}}],[\"改成文件\",{\"1\":{\"1873\":1}}],[\"改进的方案\",{\"1\":{\"1522\":1}}],[\"改善程序结构\",{\"1\":{\"1445\":1}}],[\"改变线程的优先级\",{\"1\":{\"1487\":1}}],[\"改变bigdecimal值的精度时\",{\"1\":{\"535\":1}}],[\"改变bigdecimal值的精度\",{\"1\":{\"535\":1}}],[\"改变stringbuffer内容的方法\",{\"1\":{\"449\":1}}],[\"改完程序需要到浏览器上去调试\",{\"1\":{\"147\":1}}],[\"三高\",{\"1\":{\"3026\":1}}],[\"三层架构的每一层都有特有的包名称\",{\"1\":{\"2760\":1}}],[\"三层架构是将我们的项目分成了三个层面\",{\"1\":{\"2758\":1}}],[\"三层架构\",{\"0\":{\"2757\":1},\"1\":{\"2757\":1,\"2763\":2,\"2764\":1}}],[\"三大组件\",{\"1\":{\"2707\":1}}],[\"三次对话\",{\"1\":{\"1958\":1}}],[\"三次握手\",{\"1\":{\"1956\":1,\"2449\":1}}],[\"三种角色\",{\"0\":{\"3131\":1}}],[\"三种线程安全方式的优先使用顺序\",{\"0\":{\"1538\":1}}],[\"三种创建字符串方式的选择\",{\"0\":{\"448\":1}}],[\"三元运算符与if\",{\"0\":{\"915\":1}}],[\"三元运算符是可以嵌套使用的\",{\"1\":{\"914\":1}}],[\"三元运算符的嵌套\",{\"0\":{\"914\":1}}],[\"三元运算符的结果是要被变量接收的\",{\"1\":{\"913\":1}}],[\"三元运算符\",{\"0\":{\"910\":1}}],[\"三参\",{\"0\":{\"570\":1}}],[\"三个放在一起执行的时候\",{\"1\":{\"3097\":1}}],[\"三个方法是定义在java\",{\"1\":{\"1554\":1}}],[\"三个方法的调用者必须是同步代码块或同步方法中的同步监视器\",{\"1\":{\"1554\":1}}],[\"三个方法必须使用在同步代码块或同步方法中\",{\"1\":{\"1554\":1}}],[\"三个线程交替输出100\",{\"1\":{\"1492\":1}}],[\"三个位加起来作为一个位\",{\"1\":{\"874\":1}}],[\"三个码的意义\",{\"1\":{\"873\":1}}],[\"三个类的方法都是类似的\",{\"1\":{\"465\":1}}],[\"三个地方\",{\"1\":{\"299\":1}}],[\"源\",{\"1\":{\"1957\":1}}],[\"源文件路径等中有不存在的路径时的警告\",{\"1\":{\"1430\":1}}],[\"源文件还在\",{\"1\":{\"792\":1}}],[\"源码中的一些重要常量\",{\"0\":{\"1680\":1}}],[\"源码简介\",{\"0\":{\"1629\":1}}],[\"源码\",{\"0\":{\"2333\":1},\"1\":{\"1179\":1,\"2452\":1}}],[\"源码分析\",{\"0\":{\"443\":1,\"1615\":1,\"1679\":1}}],[\"源代码选择了行尾风格\",{\"1\":{\"815\":1}}],[\"源集合没有变化\",{\"1\":{\"704\":1}}],[\"源集合改变了\",{\"1\":{\"698\":1}}],[\"源字符串没有变化\",{\"1\":{\"417\":1}}],[\"线程需要完成的操作\",{\"1\":{\"1569\":1}}],[\"线程没有任务时最多保持多长时间后会终止\",{\"1\":{\"1565\":1}}],[\"线程池工具类\",{\"0\":{\"1567\":1}}],[\"线程池接口\",{\"0\":{\"1566\":1}}],[\"线程池的优点\",{\"0\":{\"1565\":1}}],[\"线程池介绍\",{\"0\":{\"1564\":1}}],[\"线程池\",{\"0\":{\"1557\":1,\"1563\":1}}],[\"线程通信涉及到的方法\",{\"0\":{\"1551\":1}}],[\"线程2\",{\"1\":{\"1548\":1,\"1550\":1,\"1556\":1}}],[\"线程在获得一个锁l1的情况下再去申请另外一个锁l2\",{\"1\":{\"1546\":1}}],[\"线程尝试获取锁的时候加上一定的时限\",{\"1\":{\"1541\":1}}],[\"线程开始访问共享资源之前应先获得lock对象\",{\"1\":{\"1530\":1}}],[\"线程执行同步代码块时\",{\"1\":{\"1527\":1}}],[\"线程执行同步代码块或同步方法时\",{\"1\":{\"1527\":1}}],[\"线程执行控制\",{\"0\":{\"1481\":1}}],[\"线程就不会结束\",{\"1\":{\"1520\":1}}],[\"线程安全问题代码示例\",{\"0\":{\"1509\":1}}],[\"线程安全问题\",{\"0\":{\"1504\":1,\"2547\":1}}],[\"线程安全的\",{\"1\":{\"442\":1,\"1614\":1,\"1667\":1}}],[\"线程完成了它的全部工作或线程被提前强制性地中止或出现异常导致结束\",{\"1\":{\"1501\":1}}],[\"线程是有生命周期\",{\"1\":{\"1500\":1}}],[\"线程代码存在接口的实现类的run方法\",{\"1\":{\"1498\":1}}],[\"线程代码存放thread子类run方法中\",{\"1\":{\"1498\":1}}],[\"线程调度示例\",{\"0\":{\"1489\":1}}],[\"线程创建时继承父线程的优先级\",{\"1\":{\"1488\":1}}],[\"线程a\",{\"1\":{\"1481\":1}}],[\"线程a才结束阻塞状态\",{\"1\":{\"1479\":1}}],[\"线程插队\",{\"1\":{\"1481\":1}}],[\"线程1\",{\"1\":{\"1480\":1,\"1548\":1,\"1550\":1,\"1556\":1}}],[\"线程名是个静态属性\",{\"1\":{\"1480\":1}}],[\"线程名\",{\"0\":{\"1480\":1}}],[\"线程体\",{\"0\":{\"1469\":1}}],[\"线程的通信实例\",{\"0\":{\"1556\":1}}],[\"线程的通信指的是多个线程之间的交流\",{\"1\":{\"1550\":1}}],[\"线程的通信\",{\"0\":{\"1550\":1}}],[\"线程的死锁\",{\"0\":{\"1539\":1}}],[\"线程的安全问题概述\",{\"0\":{\"1505\":1}}],[\"线程的生命周期图解\",{\"0\":{\"1502\":1}}],[\"线程的5种状态\",{\"0\":{\"1501\":1}}],[\"线程的默认优先级为\",{\"1\":{\"1489\":1}}],[\"线程的优先级被修改为\",{\"1\":{\"1489\":1}}],[\"线程的优先级\",{\"0\":{\"1487\":1}}],[\"线程的调度\",{\"0\":{\"1482\":1}}],[\"线程的分类\",{\"0\":{\"1463\":1}}],[\"线程的概念\",{\"0\":{\"1439\":1}}],[\"线程\",{\"1\":{\"1439\":1}}],[\"线程切换的开销小\",{\"1\":{\"1439\":1}}],[\"线程作为调度和执行的单位\",{\"1\":{\"1439\":1}}],[\"线程状态\",{\"1\":{\"1368\":1}}],[\"线程不安全\",{\"1\":{\"1242\":1}}],[\"线程不安全的\",{\"1\":{\"442\":1,\"1612\":1,\"1635\":1,\"1664\":1}}],[\"存入到一个map集合中\",{\"0\":{\"2620\":1}}],[\"存取数据时\",{\"1\":{\"1668\":1}}],[\"存在一定的区别\",{\"1\":{\"3035\":1}}],[\"存在服务器端\",{\"1\":{\"2827\":1}}],[\"存在的问题\",{\"0\":{\"2414\":1}}],[\"存在sql注入问题\",{\"0\":{\"2311\":1}}],[\"存在拼串操作\",{\"0\":{\"2310\":1}}],[\"存在缓冲区中\",{\"1\":{\"1826\":1}}],[\"存在于内存中可读\",{\"1\":{\"1448\":1}}],[\"存在和消亡的过程\",{\"1\":{\"1436\":1}}],[\"存在方法区的静态域中\",{\"1\":{\"1229\":1}}],[\"存放filter类\",{\"1\":{\"2696\":1}}],[\"存放fragment\",{\"1\":{\"1291\":1}}],[\"存放到list里\",{\"1\":{\"2436\":1}}],[\"存放学生的成绩\",{\"1\":{\"1707\":1}}],[\"存放通用配置\",{\"1\":{\"228\":1}}],[\"存储结构\",{\"0\":{\"3030\":1}}],[\"存储所有接入的智能设备信息\",{\"1\":{\"3027\":1}}],[\"存储订单信息\",{\"1\":{\"3027\":1}}],[\"存储游戏用户信息\",{\"1\":{\"3027\":1}}],[\"存储用户信息\",{\"1\":{\"3027\":2}}],[\"存储时间\",{\"1\":{\"2829\":1}}],[\"存储位置\",{\"1\":{\"2829\":1}}],[\"存储数据的概念进行一个类比\",{\"1\":{\"2864\":1}}],[\"存储数据\",{\"1\":{\"2655\":1,\"2678\":1,\"2806\":1,\"3036\":1}}],[\"存储过程\",{\"1\":{\"2308\":1}}],[\"存储在内存中\",{\"1\":{\"2191\":1}}],[\"存储具体元素的集\",{\"1\":{\"1680\":1}}],[\"存储元素的数组\",{\"1\":{\"1680\":1}}],[\"存储key\",{\"1\":{\"1662\":1}}],[\"存储的数据在底层数组中并非按照数组索引的顺序添加\",{\"1\":{\"1634\":1}}],[\"存储的是当前匹配的各捕获组的first和last信息\",{\"1\":{\"756\":1}}],[\"存储无序的\",{\"1\":{\"1578\":1,\"1633\":1}}],[\"存储有序的\",{\"1\":{\"1578\":1,\"1611\":1}}],[\"存储于\",{\"1\":{\"1406\":1}}],[\"存储于类对应的\",{\"1\":{\"1406\":1}}],[\"存储已被虚拟机加载的类信息\",{\"1\":{\"1298\":1}}],[\"存储\",{\"1\":{\"442\":3}}],[\"初始值要写0\",{\"1\":{\"2239\":1}}],[\"初始值\",{\"1\":{\"1397\":1,\"2202\":1,\"2239\":1}}],[\"初始容量为16的字符串缓冲区\",{\"1\":{\"441\":1}}],[\"初始化前的连接\",{\"0\":{\"3224\":1}}],[\"初始化副本集\",{\"0\":{\"3146\":1,\"3149\":1}}],[\"初始化方法\",{\"1\":{\"2552\":1}}],[\"初始化发生在显示调用init方法\",{\"1\":{\"2426\":1}}],[\"初始化数据库连接池时连接的数量\",{\"1\":{\"2425\":1}}],[\"初始化数组时\",{\"1\":{\"979\":1}}],[\"初始化数组\",{\"0\":{\"969\":1}}],[\"初始化驱动\",{\"1\":{\"2297\":1}}],[\"初始化需要处理异常\",{\"1\":{\"1800\":1}}],[\"初始化时的操作\",{\"1\":{\"2697\":1}}],[\"初始化时建立物理连接的个数\",{\"1\":{\"2426\":1}}],[\"初始化时\",{\"1\":{\"1621\":1}}],[\"初始化资源\",{\"1\":{\"1344\":1}}],[\"初始化类的信息\",{\"1\":{\"1279\":1}}],[\"初始化语句\",{\"1\":{\"1069\":1}}],[\"初始化和赋值同时进行\",{\"1\":{\"971\":1}}],[\"初始化并分配空间\",{\"1\":{\"966\":1}}],[\"初始化变量出了while循环以后\",{\"1\":{\"936\":1}}],[\"初始化条件\",{\"1\":{\"931\":1,\"932\":2,\"935\":2}}],[\"初始化值\",{\"1\":{\"823\":1,\"1022\":2}}],[\"初始化\",{\"0\":{\"308\":1,\"339\":1,\"1673\":1,\"1800\":1,\"1812\":1,\"1821\":1,\"1898\":1,\"2548\":1,\"2552\":1},\"1\":{\"940\":1,\"970\":1,\"1018\":1,\"1068\":1}}],[\"区别\",{\"0\":{\"1498\":1},\"1\":{\"937\":1}}],[\"区别于new\",{\"1\":{\"877\":1}}],[\"区别是\",{\"1\":{\"439\":1}}],[\"区域各位取反\",{\"1\":{\"873\":1}}],[\"区级名称\",{\"1\":{\"382\":1}}],[\"区级区划编号\",{\"1\":{\"382\":1}}],[\"剩下的表示小数点\",{\"1\":{\"849\":1}}],[\"剩下的全部都放到最后一个元素中\",{\"1\":{\"434\":1,\"744\":1,\"753\":1}}],[\"剩下的就是调用对应api操作了\",{\"1\":{\"288\":1}}],[\"错误跳转资源\",{\"1\":{\"2702\":1}}],[\"错误示例\",{\"1\":{\"1808\":1}}],[\"错误的包\",{\"1\":{\"2976\":1}}],[\"错误的\",{\"1\":{\"1717\":1}}],[\"错误的类型添加失败\",{\"1\":{\"1710\":1}}],[\"错误的字符集将解码错误\",{\"1\":{\"426\":1}}],[\"错误消息的提示\",{\"1\":{\"1314\":1}}],[\"错误\",{\"0\":{\"1312\":1},\"1\":{\"2702\":1}}],[\"错误分析\",{\"1\":{\"1044\":1}}],[\"错误堆栈\",{\"1\":{\"241\":1}}],[\"转移\",{\"1\":{\"3228\":1}}],[\"转发访问资源\",{\"1\":{\"2702\":1}}],[\"转发\",{\"1\":{\"2667\":1,\"2702\":1}}],[\"转发是一次请求\",{\"1\":{\"2665\":1}}],[\"转发只能访问当前服务器下的资源\",{\"1\":{\"2665\":1}}],[\"转发地址栏路径不变\",{\"1\":{\"2665\":1}}],[\"转发的特点\",{\"1\":{\"2665\":1}}],[\"转发时\",{\"1\":{\"2654\":1}}],[\"转发时共享数据\",{\"0\":{\"2653\":1}}],[\"转发与重定向\",{\"0\":{\"2649\":1}}],[\"转变为以时间驱动的\",{\"1\":{\"2103\":1}}],[\"转成字符流操作更高效\",{\"1\":{\"1843\":1}}],[\"转化为链表\",{\"1\":{\"1680\":1}}],[\"转化为红黑树\",{\"1\":{\"1680\":1}}],[\"转换流的类\",{\"0\":{\"1842\":1}}],[\"转换流也是一种处理流\",{\"1\":{\"1841\":1}}],[\"转换流介绍\",{\"0\":{\"1840\":1}}],[\"转换流\",{\"0\":{\"1839\":1},\"1\":{\"1870\":1}}],[\"转换后可以进行运算了\",{\"1\":{\"1194\":1}}],[\"转换成了65\",{\"1\":{\"565\":1}}],[\"转换成新的表示形式\",{\"1\":{\"461\":1}}],[\"转换成字符串格式\",{\"1\":{\"288\":1}}],[\"转型必须有父子关系\",{\"0\":{\"1172\":1}}],[\"转型的注意事项\",{\"0\":{\"1169\":1}}],[\"转型的条件\",{\"0\":{\"1164\":1}}],[\"转型\",{\"0\":{\"1162\":1}}],[\"转码\",{\"1\":{\"855\":1,\"1843\":1}}],[\"转码就需要用到字符集了\",{\"1\":{\"855\":1}}],[\"转义字符\",{\"1\":{\"854\":1}}],[\"转为指定类型的数组\",{\"0\":{\"670\":1}}],[\"转为object类型的数组\",{\"0\":{\"669\":1}}],[\"转为其他六种基本数据类型\",{\"1\":{\"524\":1}}],[\"转为string\",{\"1\":{\"425\":1}}],[\"转为string是将所有char连接在一起\",{\"1\":{\"424\":1}}],[\"转string\",{\"1\":{\"425\":1}}],[\"转不同的数据类型\",{\"1\":{\"423\":1}}],[\"右移\",{\"1\":{\"909\":1}}],[\"右边选择tomcat\",{\"1\":{\"2498\":1}}],[\"右边选项中\",{\"1\":{\"2483\":1}}],[\"右边属于创建集合对象\",{\"1\":{\"1757\":1}}],[\"右边补0\",{\"1\":{\"909\":1}}],[\"右边不参与运算\",{\"1\":{\"905\":1}}],[\"右边参与运算\",{\"1\":{\"905\":1}}],[\"右边都进行运算\",{\"1\":{\"905\":1}}],[\"右边的大\",{\"1\":{\"412\":1}}],[\"右键new时直接显示servlet\",{\"1\":{\"2540\":1}}],[\"右键librarys中的servlet\",{\"1\":{\"2530\":1}}],[\"右键jar包文件\",{\"1\":{\"2290\":1}}],[\"右键\",{\"1\":{\"86\":1,\"312\":1}}],[\"左移\",{\"1\":{\"909\":1}}],[\"左边补位\",{\"1\":{\"909\":1}}],[\"左边无论真假\",{\"1\":{\"905\":1}}],[\"左边的大\",{\"1\":{\"412\":1}}],[\"左键\",{\"1\":{\"94\":1}}],[\"若以replicaset的方式登录\",{\"1\":{\"3169\":1}}],[\"若为true\",{\"1\":{\"3159\":1}}],[\"若要返回匹配文档中的所有字段\",{\"1\":{\"3090\":1}}],[\"若要返回集合中的所有文档\",{\"1\":{\"3090\":1}}],[\"若想全部更新\",{\"1\":{\"3083\":1}}],[\"若同时有几百人甚至几千人在线\",{\"1\":{\"2414\":1}}],[\"若没有异常\",{\"1\":{\"2387\":1}}],[\"若没有指定\",{\"1\":{\"1414\":1}}],[\"若有效\",{\"1\":{\"2340\":1}}],[\"若有异常\",{\"1\":{\"1343\":1,\"2387\":1}}],[\"若流中元素不足\",{\"1\":{\"2213\":1}}],[\"若\",{\"1\":{\"2141\":1}}],[\"若希望输出数据\",{\"1\":{\"1992\":1}}],[\"若连接失败\",{\"1\":{\"1969\":1}}],[\"若服务器端\",{\"1\":{\"1969\":1}}],[\"若类的实例变量做了修改\",{\"1\":{\"1910\":1}}],[\"若hash表容量小于min\",{\"1\":{\"1680\":1}}],[\"若不调用\",{\"1\":{\"1597\":1}}],[\"若队列中没有同优先级的线程\",{\"1\":{\"1481\":1}}],[\"若jvm中都是守护线程\",{\"1\":{\"1463\":1}}],[\"若某个方法被\",{\"1\":{\"1425\":1}}],[\"若一个进程同一时间\",{\"1\":{\"1439\":1}}],[\"若一个\",{\"1\":{\"1405\":1}}],[\"若需要每个枚举值在调用实现的接口方法呈现出不同的行为方式\",{\"1\":{\"1380\":1}}],[\"若枚举类显式的定义了带参数的构造器\",{\"1\":{\"1371\":1}}],[\"若finally中有return\",{\"1\":{\"1343\":1}}],[\"若全处理可能会对程序的可读性和运行效率产生影响\",{\"1\":{\"1325\":1}}],[\"若子类重写了父类中的所有的抽象方法后\",{\"1\":{\"1247\":1}}],[\"若缺省该语句\",{\"1\":{\"1088\":1}}],[\"若指定索引处没有值\",{\"1\":{\"972\":1}}],[\"若已有值\",{\"1\":{\"972\":1}}],[\"若已知具体的类\",{\"1\":{\"586\":1,\"2018\":1}}],[\"若属性完全相同\",{\"1\":{\"662\":1}}],[\"若无异常\",{\"1\":{\"1343\":1}}],[\"若无\",{\"1\":{\"543\":1}}],[\"若未找到目标字符串\",{\"1\":{\"408\":1}}],[\"若依rouyi\",{\"1\":{\"10\":1}}],[\"浏览\",{\"1\":{\"399\":1}}],[\"浏览器是通过http协议向elasticsearch服务器发送请求的\",{\"1\":{\"2861\":1}}],[\"浏览器再次请求时\",{\"1\":{\"2820\":1}}],[\"浏览器对于单个cookie\",{\"1\":{\"2810\":1}}],[\"浏览器会根据http协议\",{\"1\":{\"2802\":1}}],[\"浏览器会发送http请求到后台服务器\",{\"1\":{\"2584\":1}}],[\"浏览器和服务器之间使用的是http请求来进行数据传输\",{\"1\":{\"2788\":1}}],[\"浏览器和服务器就可以继续使用该会话进行请求发送和响应\",{\"1\":{\"2785\":1}}],[\"浏览器关闭\",{\"1\":{\"2676\":1}}],[\"浏览器使用\",{\"1\":{\"2667\":1}}],[\"浏览器地址栏发生变化\",{\"1\":{\"2664\":1}}],[\"浏览器地址栏路径不发生变化\",{\"1\":{\"2656\":1}}],[\"浏览器输入\",{\"1\":{\"2663\":1}}],[\"浏览器接收到响应状态码为302就会重新发送请求到location对应的访问地址去访问资源b\",{\"1\":{\"2658\":1}}],[\"浏览器接收响应\",{\"1\":{\"2583\":1}}],[\"浏览器发送请求\",{\"1\":{\"2759\":1}}],[\"浏览器发送请求给服务器\",{\"1\":{\"2651\":1,\"2658\":1}}],[\"浏览器发http\",{\"1\":{\"2537\":1}}],[\"浏览器页面上显示\",{\"1\":{\"2640\":1,\"2642\":1}}],[\"浏览器访问\",{\"1\":{\"2640\":1,\"2642\":1}}],[\"浏览器访问服务器时\",{\"1\":{\"2523\":1}}],[\"浏览器在发送get请求的时候是没有请求体的\",{\"1\":{\"2604\":1}}],[\"浏览器最终解析结果\",{\"1\":{\"2585\":1}}],[\"浏览器中输入url地址\",{\"1\":{\"2533\":1}}],[\"浏览器通过解析给定的\",{\"1\":{\"1988\":1}}],[\"浏览器可能没有传递条件\",{\"1\":{\"357\":1}}],[\"浏览器\",{\"0\":{\"2802\":1},\"1\":{\"338\":1,\"2665\":1,\"2791\":1,\"2820\":2}}],[\"浏览器也返回了指定的文本\",{\"1\":{\"87\":1}}],[\"微信\",{\"1\":{\"399\":1,\"1368\":1}}],[\"微服务架构\",{\"1\":{\"10\":1}}],[\"微服务\",{\"0\":{\"5\":1,\"2750\":1},\"1\":{\"10\":1,\"11\":1}}],[\"登录主节点\",{\"1\":{\"3210\":1}}],[\"登录主节点进行读写操作\",{\"1\":{\"3168\":1}}],[\"登录后的权限\",{\"0\":{\"3206\":1}}],[\"登录时进行验证\",{\"0\":{\"3205\":1}}],[\"登录\",{\"1\":{\"399\":2}}],[\"原始的文本会存储在\",{\"1\":{\"2963\":1}}],[\"原始工程依赖的jar包\",{\"1\":{\"201\":1}}],[\"原始工程内容\",{\"1\":{\"201\":1}}],[\"原来用\",{\"1\":{\"2247\":1}}],[\"原来的元素在数组中\",{\"1\":{\"1645\":1}}],[\"原料准备\",{\"1\":{\"2078\":1}}],[\"原理\",{\"1\":{\"2072\":1,\"2077\":1,\"2097\":1,\"3209\":1}}],[\"原理和使用\",{\"0\":{\"1826\":1}}],[\"原则\",{\"1\":{\"1541\":1}}],[\"原\",{\"1\":{\"873\":3}}],[\"原码\",{\"0\":{\"873\":1},\"1\":{\"873\":1}}],[\"原因是他们都内置了map集合\",{\"1\":{\"2671\":1}}],[\"原因如下\",{\"1\":{\"1497\":1}}],[\"原因未知\",{\"1\":{\"555\":1,\"556\":1,\"557\":1}}],[\"原因\",{\"1\":{\"530\":1,\"915\":1,\"929\":1,\"1665\":1,\"1734\":1,\"2459\":1,\"2461\":1,\"2860\":1,\"2976\":1,\"3243\":1}}],[\"原型图\",{\"0\":{\"397\":1}}],[\"系统超级用户\",{\"1\":{\"3194\":1}}],[\"系统\",{\"0\":{\"2855\":1}}],[\"系统资源会被毫无顾及的分配出去\",{\"1\":{\"2414\":1}}],[\"系统资源的竞争\",{\"0\":{\"1544\":1}}],[\"系统类加载器\",{\"1\":{\"2031\":1,\"2032\":1}}],[\"系统不保证udp数据报一定能够安全送到目的地\",{\"1\":{\"1981\":1}}],[\"系统不需要为一个不执行的程序创建进程\",{\"1\":{\"1437\":1}}],[\"系统也进行了判断\",{\"1\":{\"1506\":1}}],[\"系统进行if判断\",{\"1\":{\"1506\":1}}],[\"系统在运行时会为每个进程分配不同的内存区域\",{\"1\":{\"1436\":1}}],[\"系统自动生成的异常对象\",{\"1\":{\"1319\":1,\"1358\":1}}],[\"系统就不再提供默认的空参构造器\",{\"1\":{\"1072\":1}}],[\"系统默认导入\",{\"1\":{\"2741\":1}}],[\"系统默认提供\",{\"1\":{\"1070\":1}}],[\"系统默认的舍入策略不是四舍五入\",{\"1\":{\"535\":1}}],[\"系统首先自动将所有数据转换成容量最大的那种数据类型\",{\"1\":{\"863\":1}}],[\"系统中常见的属性名以及属性的作用如下表所示\",{\"1\":{\"636\":1}}],[\"系统级的很多属性和控制方法都放置在该类的内部\",{\"1\":{\"632\":1}}],[\"系统管理后台\",{\"1\":{\"396\":1}}],[\"系统架构\",{\"1\":{\"57\":1}}],[\"定为不同\",{\"1\":{\"3036\":1}}],[\"定位\",{\"0\":{\"3036\":1}}],[\"定位主机上的特定的应用\",{\"1\":{\"1924\":1}}],[\"定制排序\",{\"0\":{\"1658\":1,\"1688\":1,\"2227\":1},\"1\":{\"493\":1,\"686\":1,\"687\":1,\"1658\":1}}],[\"定制的一款软件产品\",{\"1\":{\"396\":1}}],[\"定义排序\",{\"1\":{\"2951\":1}}],[\"定义session的有效期\",{\"0\":{\"2822\":1}}],[\"定义student元素\",{\"1\":{\"2781\":1}}],[\"定义string正则表达式\",{\"1\":{\"750\":1}}],[\"定义元素\",{\"1\":{\"2781\":1}}],[\"定义当前类操作的orm类名\",{\"1\":{\"2402\":1}}],[\"定义orm类的属性\",{\"0\":{\"2402\":1}}],[\"定义文件路径时\",{\"1\":{\"1797\":1}}],[\"定义父子类\",{\"1\":{\"1753\":1}}],[\"定义方法\",{\"1\":{\"1747\":1,\"1748\":1}}],[\"定义方法时\",{\"1\":{\"1033\":1}}],[\"定义一个page2\",{\"1\":{\"2672\":1}}],[\"定义一个类\",{\"1\":{\"2531\":1,\"2723\":1}}],[\"定义一个衣服工厂接口clothfactory\",{\"1\":{\"2078\":1}}],[\"定义一个方法\",{\"1\":{\"1746\":1}}],[\"定义一个泛型\",{\"1\":{\"1719\":1}}],[\"定义一个接口\",{\"1\":{\"1382\":1}}],[\"定义泛型类\",{\"0\":{\"1719\":1},\"1\":{\"1720\":1}}],[\"定义配置文件\",{\"0\":{\"1690\":1}}],[\"定义时的警告\",{\"1\":{\"1430\":1}}],[\"定义时必须使用双引号\",{\"1\":{\"875\":1}}],[\"定义数组形式的成员变量\",{\"1\":{\"1420\":1}}],[\"定义数据模型封装yaml文件中对应的数据\",{\"1\":{\"131\":1}}],[\"定义成数组的形式\",{\"1\":{\"1419\":1}}],[\"定义为documented的注解必须设置retention值为runtime\",{\"1\":{\"1415\":1}}],[\"定义为spring管控的bean\",{\"1\":{\"131\":1,\"156\":1}}],[\"定义注解后\",{\"1\":{\"1395\":1}}],[\"定义四季\",{\"1\":{\"1382\":1}}],[\"定义枚举类\",{\"0\":{\"1382\":1}}],[\"定义了java类被浏览器访问到\",{\"1\":{\"2524\":1}}],[\"定义了用来访问数据库的标准java类库\",{\"1\":{\"2279\":1}}],[\"定义了存取一组对象的方法的集合\",{\"1\":{\"1578\":1,\"1611\":1}}],[\"定义了所有操作数据库的抽象方法\",{\"1\":{\"1265\":1}}],[\"定义了长\",{\"1\":{\"1264\":1}}],[\"定义了名称为arr的二维数组\",{\"1\":{\"985\":1}}],[\"定义usb接口\",{\"1\":{\"1264\":1}}],[\"定义java类的语法格式\",{\"1\":{\"1261\":1}}],[\"定义在方法内\",{\"1\":{\"1203\":1}}],[\"定义在类里面和类的成员并列的\",{\"1\":{\"1203\":1}}],[\"定义的是一组规则\",{\"1\":{\"1258\":1}}],[\"定义的equals\",{\"1\":{\"1179\":1}}],[\"定义的时候是绝对路径\",{\"1\":{\"541\":1}}],[\"定义\",{\"0\":{\"1122\":1,\"1201\":1,\"1728\":1,\"2148\":1},\"1\":{\"1153\":1,\"1158\":1,\"1408\":1}}],[\"定义变量的格式\",{\"1\":{\"1024\":1}}],[\"定义变量后\",{\"1\":{\"262\":1}}],[\"定义并初始化\",{\"1\":{\"1010\":1}}],[\"定义并用运算符new为之分配空间后\",{\"1\":{\"972\":1}}],[\"定义float类型变量时\",{\"1\":{\"847\":1}}],[\"定义正则表达式\",{\"1\":{\"739\":1}}],[\"定义mybatisplus拦截器\",{\"1\":{\"350\":1}}],[\"定义多个配置文件\",{\"0\":{\"228\":1}}],[\"饭店\",{\"1\":{\"396\":1}}],[\"餐厅\",{\"1\":{\"396\":1}}],[\"访问结果如下\",{\"1\":{\"2858\":1}}],[\"访问web服务器的资源\",{\"1\":{\"2785\":1}}],[\"访问所有资源时\",{\"1\":{\"2701\":1}}],[\"访问所有资源\",{\"1\":{\"2701\":1}}],[\"访问后缀名为jsp的资源\",{\"1\":{\"2701\":1}}],[\"访问后台\",{\"1\":{\"394\":1}}],[\"访问src目录的路径为\",{\"1\":{\"2693\":1}}],[\"访问servlet实现类\",{\"0\":{\"2533\":1},\"1\":{\"2529\":1}}],[\"访问servlet\",{\"0\":{\"87\":1}}],[\"访问\",{\"1\":{\"2598\":1,\"2701\":1}}],[\"访问路径http\",{\"1\":{\"2575\":1,\"2576\":1,\"2577\":1}}],[\"访问路径\",{\"1\":{\"2574\":1}}],[\"访问该servlet\",{\"1\":{\"2533\":1}}],[\"访问前别忘了重启服务器\",{\"1\":{\"2529\":1}}],[\"访问测试\",{\"0\":{\"2510\":1,\"2858\":1}}],[\"访问项目\",{\"0\":{\"2467\":1},\"1\":{\"2468\":1}}],[\"访问地址是ip地址\",{\"1\":{\"2463\":1}}],[\"访问tomcat服务器\",{\"0\":{\"2463\":1}}],[\"访问数据信息的类和接口\",{\"1\":{\"2394\":1}}],[\"访问数组元素\",{\"0\":{\"972\":1}}],[\"访问模式\",{\"1\":{\"1885\":1}}],[\"访问权限\",{\"1\":{\"1732\":1}}],[\"访问权限允许时\",{\"1\":{\"1225\":1}}],[\"访问的端口号\",{\"1\":{\"2502\":1}}],[\"访问的是父类的属性\",{\"1\":{\"1160\":1}}],[\"访问的就是继承来的\",{\"1\":{\"1119\":1}}],[\"访问时\",{\"1\":{\"1129\":1}}],[\"访问修饰符和static的顺序可以调换\",{\"1\":{\"1228\":1}}],[\"访问修饰符\",{\"0\":{\"1124\":1},\"1\":{\"1228\":1}}],[\"访问和操作都以方法的形式\",{\"1\":{\"1064\":1}}],[\"访问未初始化的数组\",{\"1\":{\"998\":1}}],[\"访问外层数组元素\",{\"1\":{\"990\":1}}],[\"把安全认证开关从原先的true都改成false\",{\"1\":{\"2860\":1}}],[\"把数据存入其中\",{\"1\":{\"2813\":1}}],[\"把数据保存到可掉电式存储设备中以供之后使用\",{\"1\":{\"2277\":1}}],[\"把编译好的class文件和manifest文件放入指定文件夹\",{\"1\":{\"2743\":1}}],[\"把这个\",{\"1\":{\"2738\":1}}],[\"把多个class文件进行打包\",{\"1\":{\"2732\":1}}],[\"把tomcat在获取流数据之前的编码设置为utf\",{\"1\":{\"2629\":1}}],[\"把分割后端数据\",{\"0\":{\"2620\":1}}],[\"把分布在不同地理区域的计算机与专门的外部设备用通信线路互连成一个规模大\",{\"1\":{\"1924\":1}}],[\"把获取到的内容进行分割\",{\"0\":{\"2619\":1}}],[\"把内容展示在浏览器给用户浏览\",{\"1\":{\"2585\":1}}],[\"把响应数据封装到response对象中\",{\"1\":{\"2585\":1}}],[\"把当前的一个项目重新部署到tomcat服务器上\",{\"1\":{\"2502\":1}}],[\"把当前字符序列逆转\",{\"1\":{\"456\":1}}],[\"把war包自动发布到tomcat服务器上\",{\"1\":{\"2517\":1}}],[\"把war包发布到tomcat服务器上\",{\"1\":{\"2500\":1}}],[\"把while循环改成if判断\",{\"1\":{\"2358\":1}}],[\"把结果集中的每一行数据都转成一个数组\",{\"1\":{\"2436\":1}}],[\"把结果集中的第一行数据转成对象数组\",{\"1\":{\"2436\":1}}],[\"把真正的函数式编程风格引入到java中\",{\"1\":{\"2188\":1}}],[\"把复杂成份分解成一些简单的成份\",{\"1\":{\"1952\":1}}],[\"把标准输出流\",{\"1\":{\"1873\":1}}],[\"把基本操作组合到一起\",{\"1\":{\"1252\":1}}],[\"把该隐藏的隐藏起来\",{\"1\":{\"1053\":1}}],[\"把类构造成计算机能够识别和处理的数据结构\",{\"1\":{\"1004\":1}}],[\"把抽象的实体用计算机语言进行描述\",{\"1\":{\"1004\":1}}],[\"把前端的静态资源放在resource目录中\",{\"1\":{\"393\":1}}],[\"把控进度\",{\"1\":{\"22\":1}}],[\"参生空指针异常\",{\"1\":{\"1804\":1}}],[\"参略等信息\",{\"1\":{\"811\":1,\"812\":1}}],[\"参考链接\",{\"1\":{\"811\":1}}],[\"参考意义不大\",{\"1\":{\"392\":1}}],[\"参与执行匹配的所有状态都驻留在匹配器中\",{\"1\":{\"739\":1}}],[\"参数影响重大\",{\"1\":{\"3173\":1}}],[\"参数index指定要删除的索引\",{\"1\":{\"3116\":1}}],[\"参数ip地址字符串或域名字符串\",{\"1\":{\"1945\":1}}],[\"参数值的细节\",{\"1\":{\"2805\":1}}],[\"参数值的传递机制\",{\"0\":{\"1043\":1}}],[\"参数跟service一样\",{\"1\":{\"2589\":1}}],[\"参数与返回值\",{\"0\":{\"2357\":1}}],[\"参数与实例化方法的配合\",{\"1\":{\"486\":1}}],[\"参数设计\",{\"0\":{\"2332\":1}}],[\"参数数据的对象\",{\"1\":{\"2203\":1}}],[\"参数s1\",{\"1\":{\"2165\":1}}],[\"参数都是一样的\",{\"1\":{\"2162\":1}}],[\"参数一样\",{\"1\":{\"2156\":1}}],[\"参数和返回值也都定义好了\",{\"1\":{\"2151\":1}}],[\"参数和返回值\",{\"1\":{\"2133\":1}}],[\"参数false表示关闭自动提交\",{\"1\":{\"2380\":1}}],[\"参数false\",{\"1\":{\"2069\":1}}],[\"参数true\",{\"1\":{\"2069\":1}}],[\"参数必须小于等于\",{\"1\":{\"1986\":1}}],[\"参数化类型\",{\"1\":{\"1700\":2}}],[\"参数即为comparator接口的实例\",{\"1\":{\"1688\":1}}],[\"参数声明\",{\"1\":{\"1405\":1}}],[\"参数将传递给main方法的\",{\"1\":{\"1293\":1}}],[\"参数名=参数值\",{\"1\":{\"1989\":2}}],[\"参数名称\",{\"1\":{\"1732\":1}}],[\"参数名\",{\"1\":{\"1047\":2,\"1288\":1}}],[\"参数赋给形参的是实参真实存储的数据值\",{\"1\":{\"1044\":1}}],[\"参数的重载方法\",{\"1\":{\"1836\":1}}],[\"参数的类型就是传入数据的类型\",{\"1\":{\"1728\":1}}],[\"参数的类型\",{\"1\":{\"1047\":2}}],[\"参数的数据类型\",{\"0\":{\"1042\":1}}],[\"参数的键值对格式为properties\",{\"1\":{\"210\":1}}],[\"参数传递\",{\"0\":{\"1040\":1}}],[\"参数传入一个线程不安全的集合\",{\"1\":{\"691\":1}}],[\"参数列表传递给myinvocationhandle的invoke方法\",{\"1\":{\"2097\":1}}],[\"参数列表格式\",{\"1\":{\"1989\":1}}],[\"参数列表必须不同\",{\"1\":{\"1071\":1}}],[\"参数列表\",{\"1\":{\"1069\":1}}],[\"参数列表确定某一个指定的方法\",{\"1\":{\"1038\":1}}],[\"参数列表不同\",{\"1\":{\"1037\":1}}],[\"参数个数不同\",{\"1\":{\"1037\":1}}],[\"参数被消耗了\",{\"1\":{\"726\":1,\"2144\":1}}],[\"参数集合的泛型必须与本集合的泛型相同或是子类\",{\"1\":{\"712\":1}}],[\"参数集合还在\",{\"1\":{\"698\":1}}],[\"参数集合也有的元素\",{\"1\":{\"665\":1}}],[\"参数类型错误\",{\"1\":{\"1747\":1}}],[\"参数类型是\",{\"1\":{\"1747\":1}}],[\"参数类型是对象t\",{\"1\":{\"728\":1,\"2144\":1}}],[\"参数类型不同\",{\"1\":{\"1037\":1}}],[\"参数类型\",{\"1\":{\"611\":1,\"810\":1,\"1288\":1,\"2064\":1,\"2115\":1}}],[\"参数类型可以为\",{\"1\":{\"424\":1}}],[\"参数就是文件的路径\",{\"1\":{\"2692\":1}}],[\"参数就是流操作的数据源\",{\"1\":{\"2210\":1}}],[\"参数就是comparator接口的实例\",{\"1\":{\"1658\":1}}],[\"参数就是容量\",{\"1\":{\"1620\":1}}],[\"参数就是string类型的方法名\",{\"1\":{\"610\":1}}],[\"参数就是string类型的属性名\",{\"1\":{\"606\":1,\"607\":1}}],[\"参数就是page对象\",{\"1\":{\"351\":1}}],[\"参数同filewriter\",{\"1\":{\"575\":1}}],[\"参数\",{\"0\":{\"567\":1,\"568\":1,\"3072\":1,\"3111\":1},\"1\":{\"576\":4,\"602\":1,\"606\":1,\"607\":1,\"616\":1,\"617\":1,\"646\":1,\"651\":1,\"1293\":1,\"1387\":1,\"1413\":1,\"2038\":1,\"2068\":1,\"2151\":1,\"2203\":1,\"2229\":1,\"2343\":1,\"2692\":1,\"3090\":1,\"3095\":1}}],[\"参数为自定义的日期时间格式\",{\"1\":{\"487\":1}}],[\"参数是要进行模糊查询的字段和值\",{\"1\":{\"3005\":1}}],[\"参数是request类和response类\",{\"1\":{\"2698\":1}}],[\"参数是配置文件输入流\",{\"1\":{\"2424\":1}}],[\"参数是配置项名\",{\"1\":{\"128\":1}}],[\"参数是数字\",{\"1\":{\"2390\":1}}],[\"参数是comparator接口\",{\"1\":{\"2235\":1,\"2236\":1}}],[\"参数是charsequence\",{\"1\":{\"482\":1}}],[\"参数是服务器端的ip和端口号\",{\"1\":{\"1972\":1}}],[\"参数是超时的时间\",{\"1\":{\"1948\":1}}],[\"参数是inputstream流\",{\"1\":{\"1847\":1}}],[\"参数是index\",{\"1\":{\"702\":1}}],[\"参数是文件对象\",{\"1\":{\"1800\":1}}],[\"参数是常量或1~10\",{\"1\":{\"1487\":1}}],[\"参数是有顺序的\",{\"1\":{\"1037\":1}}],[\"参数是object类型会更通用\",{\"1\":{\"2095\":1}}],[\"参数是obj\",{\"1\":{\"702\":1}}],[\"参数是number类型的子类\",{\"1\":{\"519\":1}}],[\"参数是number类\",{\"1\":{\"512\":1}}],[\"参数是string正则表达式\",{\"1\":{\"748\":1}}],[\"参数是string\",{\"1\":{\"487\":1}}],[\"参数是temporlaccessor\",{\"1\":{\"481\":1}}],[\"参数是时间戳\",{\"1\":{\"479\":1}}],[\"参数用来指定日期和时间\",{\"1\":{\"470\":1}}],[\"参数3是舍入策略\",{\"1\":{\"534\":1}}],[\"参数3\",{\"1\":{\"454\":1,\"2090\":1,\"2092\":1}}],[\"参数可选\",{\"1\":{\"426\":1}}],[\"参数可以是string类型的正则或者pattern类\",{\"1\":{\"639\":1,\"760\":1}}],[\"参数可以是double类型的数值\",{\"1\":{\"530\":1}}],[\"参数可以是char\",{\"1\":{\"424\":1}}],[\"参数可以是8种基本数据类型\",{\"1\":{\"424\":1}}],[\"参数可以是字符串或代表字符串的变量\",{\"1\":{\"420\":1}}],[\"参数也可以是引用数据类型\",{\"1\":{\"424\":1}}],[\"参数2+\",{\"1\":{\"611\":1}}],[\"参数2和3都可选的\",{\"1\":{\"534\":1}}],[\"参数2是精度\",{\"1\":{\"534\":1}}],[\"参数2可以是任意能转为string的数据类型\",{\"1\":{\"455\":1}}],[\"参数2\",{\"1\":{\"351\":1,\"421\":1,\"453\":1,\"454\":1,\"455\":1,\"616\":1,\"626\":1,\"741\":1,\"742\":1,\"752\":1,\"753\":1,\"1885\":1,\"2064\":1,\"2066\":1,\"2090\":1,\"2092\":1,\"2202\":1,\"2239\":1}}],[\"参数1\",{\"1\":{\"351\":1,\"421\":1,\"453\":1,\"454\":1,\"455\":1,\"611\":1,\"616\":1,\"626\":1,\"741\":1,\"742\":1,\"752\":1,\"753\":1,\"1885\":1,\"2064\":1,\"2066\":1,\"2090\":1,\"2092\":1,\"2202\":1,\"2239\":1}}],[\"关联要查看的索引\",{\"1\":{\"2992\":1}}],[\"关联要修改的索引和文档\",{\"1\":{\"2991\":1}}],[\"关联要删除的索引和文档\",{\"1\":{\"2984\":1}}],[\"关联nginx\",{\"1\":{\"2520\":1}}],[\"关联数组\",{\"1\":{\"1575\":1}}],[\"关联时\",{\"1\":{\"1405\":1}}],[\"关联\",{\"1\":{\"1402\":4,\"1404\":2,\"1405\":1,\"1406\":1}}],[\"关于compass的介绍见\",{\"1\":{\"3217\":1}}],[\"关于情况2和情况3\",{\"1\":{\"1675\":1}}],[\"关于是否释放同步监视器\",{\"1\":{\"1555\":1}}],[\"关于以上所有情况的警告\",{\"1\":{\"1430\":1}}],[\"关于元注解\",{\"1\":{\"1421\":1}}],[\"关于异常的产生\",{\"0\":{\"1358\":1}}],[\"关于静态属性和静态方法的使用\",{\"1\":{\"1236\":1}}],[\"关于父类中的属性\",{\"0\":{\"1129\":1}}],[\"关于子类是否能继承父类的private成员\",{\"1\":{\"1118\":1}}],[\"关于权限修饰符的不同\",{\"1\":{\"1025\":1}}],[\"关系型数据库难易应对\",{\"1\":{\"3025\":1}}],[\"关系型数据库搜索不是能很好的支持\",{\"1\":{\"2848\":1}}],[\"关系操作符\",{\"1\":{\"1178\":1}}],[\"关系表达式或逻辑表达式\",{\"1\":{\"924\":1}}],[\"关系\",{\"0\":{\"2763\":1},\"1\":{\"924\":1}}],[\"关键字对应的值就是包含该关键字的所有文档id\",{\"1\":{\"2874\":1}}],[\"关键字与文档的矩阵为\",{\"1\":{\"2872\":1}}],[\"关键字用于定义枚举类\",{\"1\":{\"1370\":1}}],[\"关键字修饰\",{\"1\":{\"1268\":1,\"1269\":1}}],[\"关键字是string\",{\"1\":{\"877\":1}}],[\"关键字汇总\",{\"0\":{\"831\":1}}],[\"关键字中所有字母都为小写\",{\"1\":{\"830\":1}}],[\"关键字和保留字是被java\",{\"1\":{\"830\":1}}],[\"关键字\",{\"0\":{\"829\":1,\"1076\":1,\"2871\":1},\"1\":{\"2874\":1,\"2879\":1,\"2880\":1}}],[\"关闭mongodb\",{\"0\":{\"3207\":1}}],[\"关闭服务设计到权限验证\",{\"1\":{\"3050\":1}}],[\"关闭服务\",{\"0\":{\"3050\":1},\"1\":{\"3050\":1}}],[\"关闭服务器套接字和获取的客户端套接字\",{\"1\":{\"1977\":1}}],[\"关闭es\",{\"1\":{\"2972\":1}}],[\"关闭状态\",{\"1\":{\"2893\":1}}],[\"关闭浏览器cookie就会消失\",{\"1\":{\"2821\":1}}],[\"关闭浏览器或服务器就失效\",{\"1\":{\"2805\":1}}],[\"关闭浏览器数据就会丢失\",{\"1\":{\"2675\":1}}],[\"关闭占用端口的软件\",{\"1\":{\"2460\":1}}],[\"关闭dos窗口\",{\"1\":{\"2456\":1}}],[\"关闭数据库连接资源和statement资源\",{\"1\":{\"2404\":1}}],[\"关闭连接\",{\"1\":{\"2387\":1}}],[\"关闭连接时\",{\"1\":{\"2384\":1}}],[\"关闭连接和statement的操作\",{\"0\":{\"2328\":1}}],[\"关闭连接资源\",{\"1\":{\"2318\":1}}],[\"关闭连接池\",{\"1\":{\"1566\":1,\"1568\":1,\"1569\":1}}],[\"关闭preparedstatement资源\",{\"1\":{\"2318\":1}}],[\"关闭通信套接字\",{\"1\":{\"1973\":1}}],[\"关闭serversocket\",{\"1\":{\"1973\":1}}],[\"关闭socket\",{\"1\":{\"1969\":1,\"1972\":1,\"1982\":1}}],[\"关闭此数据报套接字\",{\"1\":{\"1985\":1}}],[\"关闭此套接字也将会关闭该套接字的\",{\"1\":{\"1966\":1}}],[\"关闭此套接字\",{\"1\":{\"1966\":1}}],[\"关闭此输出流并释放与该流关联的所有系统资源\",{\"1\":{\"579\":1}}],[\"关闭该流会自动关闭参数inputstream流\",{\"1\":{\"1852\":1}}],[\"关闭转换流\",{\"1\":{\"1852\":1}}],[\"关闭所有流\",{\"1\":{\"1836\":1}}],[\"关闭后不能再写出\",{\"1\":{\"1826\":1}}],[\"关闭最外层流也会相应关闭内层节点流\",{\"1\":{\"1833\":1}}],[\"关闭最外层流也\",{\"1\":{\"1826\":1}}],[\"关闭资源\",{\"1\":{\"1822\":1,\"1823\":1,\"1858\":1,\"1891\":1,\"2349\":1,\"2352\":1,\"2355\":1,\"2364\":1,\"2365\":1,\"2386\":1}}],[\"关闭\",{\"0\":{\"2456\":1},\"1\":{\"572\":1,\"2975\":1,\"2977\":1,\"2978\":1,\"2980\":1,\"2983\":1,\"2984\":1,\"2986\":1,\"2987\":1,\"2991\":1,\"2992\":1,\"2993\":1,\"2997\":1,\"3000\":1,\"3003\":1,\"3006\":1,\"3008\":1,\"3010\":1,\"3015\":1,\"3019\":1}}],[\"关闭流的顺序和打开流的顺序相反\",{\"1\":{\"1826\":1,\"1833\":1}}],[\"关闭流资源\",{\"1\":{\"1817\":1}}],[\"关闭流都需要处理异常\",{\"1\":{\"1803\":1}}],[\"关闭流\",{\"0\":{\"1789\":1,\"1802\":1},\"1\":{\"571\":1,\"572\":1,\"1792\":1,\"1857\":1,\"1878\":1,\"1879\":1,\"1888\":1,\"1903\":1,\"1904\":1,\"1908\":1,\"1909\":1}}],[\"关闭热部署\",{\"0\":{\"151\":1}}],[\"关注点在后端\",{\"1\":{\"391\":1}}],[\"支付时\",{\"1\":{\"1506\":2}}],[\"支付宝\",{\"1\":{\"1368\":1}}],[\"支付方式\",{\"1\":{\"384\":1,\"1368\":1}}],[\"支持nosql和关系数据存储\",{\"1\":{\"3232\":1}}],[\"支持在集合中搜索字符串内容\",{\"1\":{\"3107\":1}}],[\"支持内嵌的文档对象和数组对象\",{\"1\":{\"3033\":2}}],[\"支持丰富的查询语言\",{\"1\":{\"3024\":1}}],[\"支持全文检索\",{\"1\":{\"2963\":1}}],[\"支持大量基于交互式文本的查询\",{\"1\":{\"2850\":1}}],[\"支持servlet\",{\"1\":{\"2450\":1}}],[\"支持多个接口\",{\"1\":{\"2090\":1}}],[\"支持多种文件格式\",{\"1\":{\"114\":1}}],[\"支持网间互连的数据通信\",{\"1\":{\"1955\":1}}],[\"支持只访问文件的部分内容\",{\"1\":{\"1881\":1}}],[\"支持泛型\",{\"1\":{\"1559\":1}}],[\"支持连续赋值\",{\"1\":{\"895\":1}}],[\"支持unicode的忽略大小写\",{\"1\":{\"749\":1}}],[\"支持lambda表达式的条件查询api\",{\"1\":{\"356\":1}}],[\"支持二进制\",{\"1\":{\"123\":1}}],[\"支持科学计数法\",{\"1\":{\"123\":1}}],[\"支持\",{\"1\":{\"79\":1,\"3028\":1}}],[\"结合properties类\",{\"1\":{\"2034\":1}}],[\"结果说明ok\",{\"1\":{\"3159\":1}}],[\"结果解析\",{\"0\":{\"3154\":1,\"3157\":1}}],[\"结果集合\",{\"1\":{\"2930\":1}}],[\"结果总数\",{\"1\":{\"2930\":1}}],[\"结果条数\",{\"1\":{\"2908\":1,\"2926\":1}}],[\"结果的符号与被膜数的符号形同\",{\"1\":{\"892\":1}}],[\"结果一定是个int类型\",{\"1\":{\"891\":1}}],[\"结果\",{\"1\":{\"869\":2,\"2901\":1,\"2915\":1,\"3109\":1}}],[\"结果必须为int型\",{\"1\":{\"865\":1}}],[\"结果是偶数\",{\"1\":{\"536\":1}}],[\"结尾\",{\"1\":{\"840\":1,\"847\":1,\"1377\":1}}],[\"结论\",{\"0\":{\"803\":1,\"1306\":1,\"2831\":1},\"1\":{\"877\":1,\"1650\":1,\"1838\":1,\"1958\":1,\"2655\":1}}],[\"结束tomcat的配置\",{\"1\":{\"2503\":1}}],[\"结束当前线程\",{\"1\":{\"1481\":1}}],[\"结束方法\",{\"1\":{\"1030\":1}}],[\"结束程序\",{\"1\":{\"1029\":1}}],[\"结束指定标识的一层循环结构当次循环\",{\"1\":{\"950\":1}}],[\"结束指定标识的一层循环结构\",{\"1\":{\"950\":1}}],[\"结束\",{\"1\":{\"798\":1}}],[\"结束位置的index\",{\"1\":{\"453\":1}}],[\"结账时间\",{\"1\":{\"384\":1}}],[\"结构等封装到类中\",{\"1\":{\"1005\":1}}],[\"结构有三种格式\",{\"1\":{\"919\":1}}],[\"结构\",{\"0\":{\"440\":1,\"654\":1,\"673\":1,\"680\":1,\"694\":1,\"706\":1,\"746\":1,\"755\":1},\"1\":{\"342\":1,\"529\":1,\"530\":1,\"538\":1,\"564\":1,\"572\":1,\"612\":1,\"619\":1,\"632\":1,\"637\":1,\"641\":1,\"758\":1}}],[\"购物车\",{\"1\":{\"383\":1,\"399\":1,\"2830\":1}}],[\"购物车表\",{\"0\":{\"383\":1},\"1\":{\"374\":1}}],[\"金额\",{\"1\":{\"383\":1,\"385\":1}}],[\"名字也基本一样\",{\"1\":{\"2204\":1}}],[\"名字\",{\"1\":{\"385\":1,\"1379\":1}}],[\"名字随意\",{\"1\":{\"226\":1}}],[\"名称固定\",{\"1\":{\"2465\":1}}],[\"名称\",{\"1\":{\"383\":1,\"592\":1}}],[\"否\",{\"1\":{\"382\":1}}],[\"否则取出来就有问题了\",{\"1\":{\"3074\":1}}],[\"否则千万不要在名字里出现$\",{\"1\":{\"3067\":1}}],[\"否则返回指定的other对象\",{\"1\":{\"2260\":1}}],[\"否则返回false\",{\"1\":{\"2229\":1,\"3068\":1}}],[\"否则返回本次读取的字符数\",{\"1\":{\"570\":1}}],[\"否则返回本次实际读取的字符数\",{\"1\":{\"566\":1}}],[\"否则抛异常\",{\"1\":{\"2226\":1}}],[\"否则报异常\",{\"1\":{\"1797\":1}}],[\"否则报错\",{\"1\":{\"853\":1,\"993\":1}}],[\"否则会报错\",{\"1\":{\"2576\":2}}],[\"否则会报\",{\"1\":{\"1551\":1}}],[\"否则就只能定义为抽象类\",{\"1\":{\"1262\":1}}],[\"否则就会允许接收任意object类进行比较\",{\"1\":{\"501\":1}}],[\"否则内容不好追加\",{\"1\":{\"1243\":1}}],[\"否则难以同步\",{\"1\":{\"1243\":1}}],[\"否则一律转为false\",{\"1\":{\"1193\":1}}],[\"否则编译出错\",{\"1\":{\"1178\":1}}],[\"否则这种递归就变成了无穷递归\",{\"1\":{\"1035\":1}}],[\"否则\",{\"1\":{\"924\":1,\"1261\":1,\"1346\":1,\"1554\":1,\"1910\":1,\"2205\":1,\"2414\":1}}],[\"否则以整数形式返回实际读取的字节数\",{\"1\":{\"566\":1}}],[\"否则打包后无法正常执行程序\",{\"1\":{\"193\":1}}],[\"否则无法执行java命令\",{\"1\":{\"192\":1}}],[\"详情单\",{\"1\":{\"2733\":1}}],[\"详情\",{\"1\":{\"1651\":1}}],[\"详见idea\",{\"1\":{\"2475\":1}}],[\"详见流的基类\",{\"0\":{\"1811\":1},\"1\":{\"1813\":1,\"1822\":1}}],[\"详见单例模式\",{\"1\":{\"1521\":1}}],[\"详见thread的api\",{\"1\":{\"1479\":1}}],[\"详见jdk中的元注解\",{\"1\":{\"1396\":1}}],[\"详见jvm\",{\"1\":{\"978\":1}}],[\"详见多线程\",{\"1\":{\"1176\":3}}],[\"详见集合\",{\"1\":{\"1176\":1}}],[\"详见异常\",{\"1\":{\"1126\":1}}],[\"详见封装\",{\"1\":{\"1022\":1,\"1029\":1}}],[\"详见\",{\"1\":{\"888\":1,\"999\":1,\"1035\":1,\"1238\":1,\"1242\":1,\"1296\":1,\"1584\":1,\"1590\":1,\"1630\":1,\"1640\":1,\"1669\":1,\"1693\":1,\"1771\":1,\"1793\":1,\"1796\":1,\"1820\":1,\"2022\":1,\"2378\":1,\"2472\":1,\"2492\":1,\"2677\":1,\"2751\":1,\"2833\":1,\"2918\":1,\"3050\":1,\"3056\":1,\"3166\":1}}],[\"详见oop\",{\"1\":{\"887\":1}}],[\"详见restful规范\",{\"0\":{\"368\":1}}],[\"详细的文档查询详见下章\",{\"1\":{\"2904\":1}}],[\"详细配置\",{\"1\":{\"2520\":1}}],[\"详细看testwhileidle属性的说明\",{\"1\":{\"2426\":1}}],[\"详细看这里\",{\"1\":{\"2426\":1}}],[\"详细\",{\"1\":{\"1272\":1,\"1273\":1}}],[\"详细描述\",{\"1\":{\"811\":1,\"812\":1}}],[\"详细地址\",{\"1\":{\"382\":1}}],[\"男\",{\"1\":{\"382\":1,\"1368\":1}}],[\"女\",{\"1\":{\"382\":1,\"1368\":1}}],[\"头像\",{\"1\":{\"381\":1}}],[\"口味\",{\"1\":{\"383\":1,\"385\":1}}],[\"口味数据list\",{\"1\":{\"380\":1}}],[\"口味名称\",{\"1\":{\"380\":1}}],[\"排除的字段\",{\"1\":{\"2999\":1}}],[\"排除掉tomcat的starter后\",{\"1\":{\"110\":1}}],[\"排列\",{\"1\":{\"1639\":1}}],[\"排序方式取值1或\",{\"1\":{\"3111\":1}}],[\"排序方式\",{\"1\":{\"3097\":1,\"3111\":1}}],[\"排序方式可以是多个字段\",{\"1\":{\"3097\":1}}],[\"排序查询\",{\"0\":{\"3097\":1},\"1\":{\"3010\":1}}],[\"排序的字段\",{\"1\":{\"2951\":1}}],[\"排序分为\",{\"1\":{\"1686\":1}}],[\"排序并非是返回一个新数组\",{\"1\":{\"643\":1}}],[\"排序接口\",{\"0\":{\"493\":1}}],[\"排序\",{\"0\":{\"503\":1,\"1686\":1,\"2225\":1,\"2950\":1,\"3009\":1},\"1\":{\"379\":1,\"681\":1,\"684\":1,\"2206\":1}}],[\"份数\",{\"1\":{\"379\":1}}],[\"停用\",{\"1\":{\"378\":1}}],[\"停售\",{\"1\":{\"377\":1,\"399\":1}}],[\"起始索引\",{\"1\":{\"2948\":1}}],[\"起始位置的index\",{\"1\":{\"453\":1}}],[\"起成对应的项目名称\",{\"1\":{\"2505\":1}}],[\"起售\",{\"1\":{\"377\":1}}],[\"起步依赖\",{\"1\":{\"111\":1}}],[\"图解查询操作的流程\",{\"0\":{\"2347\":1}}],[\"图形化界面\",{\"1\":{\"771\":1}}],[\"图形化处理\",{\"1\":{\"336\":1}}],[\"图片等\",{\"1\":{\"2731\":1}}],[\"图片类型\",{\"1\":{\"2684\":1}}],[\"图片就打不开了\",{\"1\":{\"577\":2}}],[\"图片\",{\"1\":{\"377\":1,\"378\":1,\"383\":1,\"385\":1}}],[\"商品码\",{\"1\":{\"377\":1}}],[\"顺序流\",{\"0\":{\"2196\":1},\"1\":{\"2196\":1}}],[\"顺序结构\",{\"1\":{\"917\":1}}],[\"顺序\",{\"1\":{\"376\":1,\"377\":1,\"1682\":1}}],[\"员工\",{\"1\":{\"400\":1}}],[\"员工管理\",{\"1\":{\"399\":1}}],[\"员工信息\",{\"1\":{\"375\":1}}],[\"员工表\",{\"0\":{\"375\":1},\"1\":{\"374\":1}}],[\"状态\",{\"1\":{\"375\":1,\"378\":1,\"381\":1,\"399\":1,\"1500\":1,\"1552\":1}}],[\"身份证号\",{\"1\":{\"375\":1,\"381\":1}}],[\"手机号\",{\"1\":{\"375\":1,\"381\":1,\"382\":1,\"399\":1}}],[\"手动将副本从节点和仲裁从节点添加到副本集\",{\"1\":{\"3158\":1}}],[\"手动将buffer中内容写入文件\",{\"1\":{\"1826\":1}}],[\"手动指定一个id\",{\"1\":{\"2902\":1}}],[\"手动销毁\",{\"0\":{\"2826\":1}}],[\"手动打\",{\"0\":{\"2743\":1}}],[\"手动实现httpservlet的逻辑\",{\"0\":{\"2566\":1}}],[\"手动添加方式\",{\"1\":{\"2745\":1}}],[\"手动添加\",{\"1\":{\"2530\":1}}],[\"手动部署\",{\"0\":{\"2462\":1}}],[\"手动提交数据\",{\"1\":{\"2377\":1}}],[\"手动遍历\",{\"0\":{\"1595\":1}}],[\"手动开启和关闭锁\",{\"1\":{\"1537\":1}}],[\"手动生成一个异常对象\",{\"1\":{\"1358\":1}}],[\"手动抛出异常对象\",{\"1\":{\"1361\":1}}],[\"手动抛出异常的意义\",{\"0\":{\"1359\":1}}],[\"手动抛出异常\",{\"0\":{\"1357\":1}}],[\"手动的生成一个异常对象\",{\"1\":{\"1319\":1}}],[\"手动写一个空参空方法体的构造器\",{\"1\":{\"1140\":1}}],[\"手动输出日志\",{\"0\":{\"263\":1}}],[\"手动使用idea进行build\",{\"1\":{\"142\":1}}],[\"手动启动热部署\",{\"0\":{\"140\":1}}],[\"手动编辑pom\",{\"1\":{\"82\":1}}],[\"手动创建一个maven工程\",{\"1\":{\"82\":1}}],[\"手动创建项目\",{\"0\":{\"82\":1}}],[\"密码认证方式\",{\"1\":{\"3179\":1}}],[\"密码学\",{\"1\":{\"1651\":1}}],[\"密码本不一样\",{\"1\":{\"855\":1}}],[\"密码本\",{\"1\":{\"855\":1}}],[\"密码\",{\"0\":{\"2295\":1},\"1\":{\"375\":1,\"2292\":1,\"2311\":1,\"3198\":1}}],[\"姓名\",{\"1\":{\"375\":1,\"381\":1,\"2209\":1,\"2214\":1}}],[\"`web\",{\"1\":{\"2537\":1}}],[\"`remark`\",{\"1\":{\"384\":1}}],[\"`order`\",{\"1\":{\"2334\":1}}],[\"`order\",{\"1\":{\"384\":1,\"385\":2}}],[\"`orders`\",{\"1\":{\"384\":1}}],[\"`number`\",{\"1\":{\"383\":1,\"384\":1,\"385\":1}}],[\"`name`\",{\"1\":{\"375\":1,\"376\":2,\"377\":2,\"378\":2,\"379\":1,\"380\":1,\"381\":1,\"383\":1,\"385\":1}}],[\"`label`\",{\"1\":{\"382\":1}}],[\"`amount`\",{\"1\":{\"383\":1,\"384\":1,\"385\":1}}],[\"`address`\",{\"1\":{\"384\":1}}],[\"`address\",{\"1\":{\"382\":1,\"384\":1}}],[\"`avatar`\",{\"1\":{\"381\":1}}],[\"`value`\",{\"1\":{\"380\":1}}],[\"`demo1`\",{\"1\":{\"2537\":1}}],[\"`detail`\",{\"1\":{\"382\":1}}],[\"`description`\",{\"1\":{\"377\":1,\"378\":1}}],[\"`district\",{\"1\":{\"382\":2}}],[\"`dish\",{\"1\":{\"379\":1,\"380\":2,\"383\":2,\"385\":2}}],[\"`dish`\",{\"1\":{\"377\":1}}],[\"`is\",{\"1\":{\"377\":1,\"378\":1,\"379\":1,\"380\":1,\"382\":2}}],[\"`image`\",{\"1\":{\"377\":1,\"378\":1,\"383\":1,\"385\":1}}],[\"`idx\",{\"1\":{\"375\":1,\"376\":1,\"377\":1,\"378\":1}}],[\"`id\",{\"1\":{\"375\":1,\"381\":1}}],[\"`id`\",{\"1\":{\"375\":2,\"376\":2,\"377\":2,\"378\":2,\"379\":2,\"380\":2,\"381\":2,\"382\":2,\"383\":2,\"384\":2,\"385\":2}}],[\"`type`\",{\"1\":{\"376\":1}}],[\"`checkout\",{\"1\":{\"384\":1}}],[\"`city\",{\"1\":{\"382\":2}}],[\"`consignee`\",{\"1\":{\"382\":1,\"384\":1}}],[\"`copies`\",{\"1\":{\"379\":1}}],[\"`code`\",{\"1\":{\"377\":1,\"378\":1}}],[\"`category\",{\"1\":{\"377\":1,\"378\":1}}],[\"`category`\",{\"1\":{\"376\":1}}],[\"`create\",{\"1\":{\"375\":2,\"376\":2,\"377\":2,\"378\":2,\"379\":2,\"380\":2,\"382\":2,\"383\":1}}],[\"`user\",{\"1\":{\"382\":1,\"383\":1,\"384\":2}}],[\"`user`\",{\"1\":{\"381\":1}}],[\"`username`\",{\"1\":{\"375\":2}}],[\"`update\",{\"1\":{\"375\":2,\"376\":2,\"377\":2,\"378\":2,\"379\":2,\"380\":2,\"382\":2}}],[\"`shopping\",{\"1\":{\"383\":1}}],[\"`setmeal\",{\"1\":{\"379\":2,\"383\":1,\"385\":1}}],[\"`setmeal`\",{\"1\":{\"378\":1}}],[\"`sex`\",{\"1\":{\"375\":1,\"381\":1,\"382\":1}}],[\"`sort`\",{\"1\":{\"376\":1,\"377\":1,\"379\":1}}],[\"`status`\",{\"1\":{\"375\":1,\"377\":1,\"378\":1,\"381\":1,\"384\":1}}],[\"`pay\",{\"1\":{\"384\":1}}],[\"`password`\",{\"1\":{\"375\":1}}],[\"`province\",{\"1\":{\"382\":2}}],[\"`price`\",{\"1\":{\"377\":1,\"378\":1,\"379\":1}}],[\"`phone`\",{\"1\":{\"375\":1,\"381\":1,\"382\":1,\"384\":1}}],[\"`employee`\",{\"1\":{\"375\":1}}],[\"订单管理\",{\"1\":{\"399\":1}}],[\"订单等进行管理维护\",{\"1\":{\"396\":1}}],[\"订单id\",{\"1\":{\"385\":1}}],[\"订单状态在运送过程中会不断更新\",{\"1\":{\"3027\":1}}],[\"订单状态\",{\"1\":{\"384\":1,\"1368\":1}}],[\"订单号\",{\"1\":{\"384\":1}}],[\"订单明细表\",{\"0\":{\"385\":1},\"1\":{\"374\":1,\"385\":1}}],[\"订单表\",{\"0\":{\"384\":1},\"1\":{\"374\":1,\"384\":1}}],[\"菜单\",{\"1\":{\"2744\":1}}],[\"菜单栏run\",{\"1\":{\"2498\":1}}],[\"菜单栏\",{\"1\":{\"142\":1}}],[\"菜品原价\",{\"1\":{\"379\":1}}],[\"菜品id\",{\"1\":{\"379\":1,\"383\":1,\"385\":1}}],[\"菜品管理\",{\"1\":{\"377\":1,\"399\":1}}],[\"菜品价格\",{\"1\":{\"377\":1}}],[\"菜品名称\",{\"1\":{\"377\":1,\"379\":1}}],[\"菜品及套餐分类\",{\"1\":{\"376\":1}}],[\"菜品分类id\",{\"1\":{\"377\":1,\"378\":1}}],[\"菜品分类\",{\"1\":{\"376\":1}}],[\"菜品口味关系表\",{\"0\":{\"380\":1},\"1\":{\"374\":1,\"380\":1}}],[\"菜品与套餐关系表\",{\"0\":{\"379\":1},\"1\":{\"374\":1}}],[\"菜品表\",{\"0\":{\"377\":1},\"1\":{\"374\":1}}],[\"菜品\",{\"1\":{\"374\":1,\"380\":1,\"399\":1}}],[\"子依赖\",{\"1\":{\"3229\":1}}],[\"子集合是班级\",{\"1\":{\"2221\":1}}],[\"子文件路径\",{\"1\":{\"1769\":1}}],[\"子路径\",{\"1\":{\"1768\":1}}],[\"子线程默认名是\",{\"1\":{\"1473\":1}}],[\"子线程\",{\"1\":{\"1465\":1,\"1480\":1,\"1509\":1}}],[\"子句不能正常完成时的警告\",{\"1\":{\"1430\":1}}],[\"子转父\",{\"0\":{\"1165\":1}}],[\"子类的流上\",{\"1\":{\"1875\":2}}],[\"子类的方法将覆盖父类的方法\",{\"1\":{\"1122\":1}}],[\"子类或者子接口\",{\"1\":{\"1737\":1}}],[\"子类重写thread类的run\",{\"1\":{\"1471\":1}}],[\"子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型\",{\"1\":{\"1126\":1,\"1354\":1}}],[\"子类重写的方法的权限修饰符不小于父类被重写的方法的权限修饰符\",{\"1\":{\"1124\":1}}],[\"子类重写的方法的方法名和形参列表与父类被重写的方法的方法名和形参列表相同\",{\"1\":{\"1122\":1}}],[\"子类则可以继承父类类级别的注解\",{\"1\":{\"1416\":1}}],[\"子类一般不能重写\",{\"1\":{\"1252\":1}}],[\"子类必须重写父类中所有的抽象方法\",{\"1\":{\"1247\":1}}],[\"子类转父类\",{\"1\":{\"1163\":1}}],[\"子类特有的属性和方法不能调用\",{\"1\":{\"1162\":1}}],[\"子类实现可以随意更换\",{\"1\":{\"1161\":1}}],[\"子类实例化过程\",{\"0\":{\"1142\":1}}],[\"子类实例也会同样复制一份\",{\"1\":{\"1119\":1}}],[\"子类实例其实是\",{\"1\":{\"1118\":1}}],[\"子类中定义了与父类同名同参数的方法\",{\"1\":{\"1156\":1}}],[\"子类中的叫重写的方法\",{\"1\":{\"1122\":1}}],[\"子类对象才可以考虑进行调用\",{\"1\":{\"1144\":1}}],[\"子类对象访问继承来的属性和方法时\",{\"1\":{\"1119\":1}}],[\"子类调用父类同名方法\",{\"0\":{\"1134\":1}}],[\"子类调用父类同名属性\",{\"0\":{\"1133\":1}}],[\"子类可以选择保留泛型也可以选择指定泛型类型\",{\"1\":{\"1722\":1}}],[\"子类可以重写父类中的方法\",{\"1\":{\"1129\":1}}],[\"子类可以创建一个跟父类相同的方法\",{\"1\":{\"1122\":1}}],[\"子类无法覆盖父类的方法\",{\"1\":{\"1127\":1}}],[\"子类和父类可以同时使用\",{\"1\":{\"1135\":1}}],[\"子类和父类都声明了num这个属性\",{\"1\":{\"1133\":1}}],[\"子类和父类中的同名同参数的方法要么都声明为非static的\",{\"1\":{\"1127\":1}}],[\"子类和父类的关系\",{\"1\":{\"1113\":1}}],[\"子类不能重写父类中声明为private权限的方法\",{\"1\":{\"1124\":1}}],[\"子类不能直接访问父类中私有的\",{\"1\":{\"1115\":1}}],[\"子类继承父类private成员的测试\",{\"1\":{\"1120\":1}}],[\"子类继承父类以后\",{\"1\":{\"1113\":1,\"1115\":1,\"1143\":1}}],[\"子类继承了这些方法后\",{\"1\":{\"1120\":1}}],[\"子类访问父类中的private成员\",{\"0\":{\"1120\":1}}],[\"子类是一定会调用父类的构造器的\",{\"1\":{\"1140\":1}}],[\"子类是无法直接访问的\",{\"1\":{\"1119\":1}}],[\"子类是否能继承父类的private成员\",{\"0\":{\"1118\":1}}],[\"子类只能通过父类方法来访问父类中的private成员\",{\"1\":{\"1118\":1}}],[\"子类直接继承的父类\",{\"1\":{\"1115\":1}}],[\"子类父类是相对的概念\",{\"1\":{\"1115\":1}}],[\"子类a中就获取了父类b中声明的所有的属性和方法\",{\"1\":{\"1113\":1}}],[\"子类\",{\"1\":{\"1112\":1,\"1147\":1,\"1150\":1}}],[\"子包下的类\",{\"0\":{\"1097\":1}}],[\"子包名\",{\"1\":{\"1088\":1}}],[\"子目录为\",{\"1\":{\"372\":1}}],[\"子项目手动引入所需的依赖\",{\"1\":{\"91\":1}}],[\"使其元素不超过给定数量\",{\"1\":{\"2212\":1}}],[\"使其在保存和传输时可被还原\",{\"1\":{\"1896\":1}}],[\"使其他任务在其被解锁之前\",{\"1\":{\"1524\":1}}],[\"使当前线程进入等待\",{\"1\":{\"1552\":1}}],[\"使别的线程可访问并修改共享资源\",{\"1\":{\"1551\":1}}],[\"使得所有服务的启动方式更优雅和统一\",{\"1\":{\"2750\":1}}],[\"使得进程在运行过程中\",{\"1\":{\"1544\":1}}],[\"使得不再需要在web\",{\"1\":{\"1389\":1}}],[\"使得程序员不必直接对协议进行操作\",{\"1\":{\"2446\":1}}],[\"使得程序在编译时就不再报错\",{\"1\":{\"1347\":1}}],[\"使得程序简洁\",{\"1\":{\"1317\":1}}],[\"使得在控制流转到程序的其它部分以前\",{\"1\":{\"1342\":1}}],[\"使得在调用对象的tostring\",{\"1\":{\"1185\":1}}],[\"使得array1和array2的指针共同指向同一个数组实体\",{\"1\":{\"965\":1}}],[\"使初始化时更加灵活\",{\"1\":{\"1071\":1}}],[\"使规范等价\",{\"1\":{\"749\":1}}],[\"使最大页码值作为当前页码值\",{\"1\":{\"371\":1}}],[\"使用正确的用户名和密码\",{\"1\":{\"3201\":1}}],[\"使用正则全部替换\",{\"1\":{\"741\":1}}],[\"使用新的端口\",{\"1\":{\"3179\":1}}],[\"使用新值替换list\",{\"1\":{\"690\":1}}],[\"使用查询运算符指定选择筛选器\",{\"1\":{\"3090\":1}}],[\"使用$set修改器\",{\"1\":{\"3082\":1}}],[\"使用update方法更新文档\",{\"1\":{\"3080\":1}}],[\"使用udp提供\",{\"1\":{\"1962\":1}}],[\"使用聚合函数\",{\"1\":{\"3015\":1}}],[\"使用objectmapper将数据对象转为json格式\",{\"1\":{\"2980\":1}}],[\"使用相差很大\",{\"1\":{\"2967\":1}}],[\"使用常规的搜索方式\",{\"1\":{\"2850\":1}}],[\"使用xsi引入文件\",{\"1\":{\"2782\":1}}],[\"使用xxxoperations对象调用方法\",{\"1\":{\"288\":1}}],[\"使用命名空间区分\",{\"1\":{\"2782\":1}}],[\"使用命令行生成api文档\",{\"0\":{\"813\":1}}],[\"使用jar包\",{\"0\":{\"2740\":1}}],[\"使用java自带jar包\",{\"1\":{\"2741\":1}}],[\"使用java内置的jar包\",{\"0\":{\"2741\":1}}],[\"使用java\",{\"1\":{\"2029\":1}}],[\"使用javabean\",{\"1\":{\"1286\":1}}],[\"使用java命令进行运行\",{\"1\":{\"793\":1}}],[\"使用javac\",{\"1\":{\"792\":1}}],[\"使用动态虚拟路径拼接完整路径\",{\"1\":{\"2668\":1}}],[\"使用动态条件拼接\",{\"1\":{\"357\":1}}],[\"使用方式\",{\"0\":{\"2540\":1}}],[\"使用方法flush\",{\"1\":{\"1826\":1}}],[\"使用方法\",{\"1\":{\"1747\":1,\"1748\":1}}],[\"使用方法的形参\",{\"1\":{\"1209\":1}}],[\"使用骨架创建web项目\",{\"0\":{\"2488\":1}}],[\"使用工厂方法\",{\"1\":{\"2424\":1}}],[\"使用德鲁伊\",{\"0\":{\"2424\":1}}],[\"使用完毕之后再放回去\",{\"1\":{\"2416\":1}}],[\"使用完后都得断开\",{\"1\":{\"2414\":1}}],[\"使用完放回池中\",{\"1\":{\"1564\":1}}],[\"使用事务\",{\"0\":{\"2387\":1}}],[\"使用批处理\",{\"0\":{\"2374\":1}}],[\"使用封装好的jdbcutiles获取连接对象\",{\"1\":{\"2364\":1,\"2365\":1}}],[\"使用封装好的工具\",{\"0\":{\"2329\":1}}],[\"使用<=65kb的blob类型\",{\"1\":{\"2361\":1}}],[\"使用配置文件的好处\",{\"0\":{\"2304\":1}}],[\"使用配置文件的方式保存配置信息\",{\"1\":{\"2301\":1}}],[\"使用dofilter方法中的chain对象的dofilter方法进行放行\",{\"1\":{\"2698\":1}}],[\"使用drivermanager类替换driver\",{\"1\":{\"2299\":1}}],[\"使用drivermanager\",{\"0\":{\"2299\":1}}],[\"使用dataoutputstream将文件中各类数据读入\",{\"1\":{\"1879\":1}}],[\"使用这些类库可以以一种标准的方法\",{\"1\":{\"2279\":1}}],[\"使用内部迭代\",{\"1\":{\"2237\":1}}],[\"使用注意\",{\"1\":{\"2219\":1}}],[\"使用注解的方式为servlet类配置一个访问路径\",{\"1\":{\"2529\":1}}],[\"使用注解的方式配置项目\",{\"1\":{\"2486\":1}}],[\"使用注解\",{\"0\":{\"1400\":1}}],[\"使用前提\",{\"1\":{\"2219\":1,\"2226\":1}}],[\"使用条件\",{\"0\":{\"2170\":1}}],[\"使用post会报错\",{\"1\":{\"2886\":1}}],[\"使用postman进行接口测试\",{\"1\":{\"366\":1}}],[\"使用postman测试接口功能\",{\"1\":{\"338\":1}}],[\"使用preparedstatement\",{\"0\":{\"2373\":1},\"1\":{\"2373\":1}}],[\"使用preparedstatement操作blob数据\",{\"1\":{\"2359\":1}}],[\"使用properties对象\",{\"1\":{\"2297\":1}}],[\"使用println这个方法\",{\"1\":{\"2156\":1}}],[\"使用要求\",{\"0\":{\"2152\":1}}],[\"使用情景\",{\"0\":{\"2149\":1}}],[\"使用函数\",{\"1\":{\"2133\":1}}],[\"使用它可以写出更简洁\",{\"1\":{\"2111\":1}}],[\"使用场合\",{\"1\":{\"2077\":1}}],[\"使用场景\",{\"0\":{\"217\":1},\"1\":{\"1019\":1,\"1342\":1}}],[\"使用一个代理将对象包装起来\",{\"1\":{\"2072\":1}}],[\"使用一次tab操作\",{\"1\":{\"815\":1}}],[\"使用反射获取driver实现类的对象\",{\"1\":{\"2299\":1}}],[\"使用反射初始化驱动\",{\"1\":{\"2298\":1}}],[\"使用反射\",{\"0\":{\"2009\":1,\"2010\":1,\"2298\":1}}],[\"使用代码体验反射的动态性\",{\"1\":{\"2004\":1}}],[\"使用获取的流对象read流的数据\",{\"1\":{\"1977\":1}}],[\"使用writerobject方法进行序列化\",{\"1\":{\"1903\":1,\"1908\":1}}],[\"使用指针\",{\"0\":{\"1889\":1}}],[\"使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串\",{\"1\":{\"430\":1}}],[\"使用byte\",{\"1\":{\"1836\":1}}],[\"使用response调用多次addcookie方法发送cookie即可\",{\"1\":{\"2804\":1}}],[\"使用request对象的getsession方法来获取session对象\",{\"1\":{\"2814\":1}}],[\"使用request对象\",{\"1\":{\"2590\":1}}],[\"使用readobejct方法进行反序列化\",{\"1\":{\"1904\":1,\"1909\":1}}],[\"使用read\",{\"1\":{\"1805\":1}}],[\"使用redis\",{\"0\":{\"288\":1,\"289\":1}}],[\"使用有限制的\",{\"1\":{\"1753\":1}}],[\"使用通配符泛型\",{\"0\":{\"1748\":1}}],[\"使用通配符\",{\"0\":{\"1742\":1}}],[\"使用到类的泛型的位置\",{\"1\":{\"1711\":1}}],[\"使用总结\",{\"0\":{\"1711\":1}}],[\"使用泛型的主要优点是能够在编译时而不是在运行时检测错误\",{\"1\":{\"1698\":1}}],[\"使用泛型\",{\"0\":{\"1696\":1}}],[\"使用频率最高的实现类\",{\"0\":{\"1664\":1}}],[\"使用elasticsearch\",{\"1\":{\"2846\":1}}],[\"使用equals\",{\"1\":{\"1633\":1}}],[\"使用execute或submit进行操作\",{\"1\":{\"1568\":1}}],[\"使用此类效率比arraylist高\",{\"1\":{\"1613\":1}}],[\"使用array在存储对象方面具有\",{\"1\":{\"1572\":1}}],[\"使用arraylist重载的\",{\"1\":{\"698\":1}}],[\"使用创建指定线程数量的方法\",{\"1\":{\"1569\":1}}],[\"使用线程池步骤\",{\"0\":{\"1568\":1}}],[\"使用量特别大的资源\",{\"1\":{\"1564\":1}}],[\"使用customerdaoimpl\",{\"0\":{\"2409\":1}}],[\"使用class类的forname方法根据全类名参数创建对象\",{\"1\":{\"2303\":1}}],[\"使用classloader和properties类\",{\"1\":{\"2303\":1}}],[\"使用classloader\",{\"1\":{\"2034\":1}}],[\"使用classloader的getresourceasstream方法加载配置文件\",{\"1\":{\"2034\":1}}],[\"使用classloader加载配置文件\",{\"0\":{\"2034\":1}}],[\"使用class的本质\",{\"0\":{\"2014\":1}}],[\"使用compass连接主节点\",{\"1\":{\"3147\":1}}],[\"使用comparator接口比较两个字符串的大小\",{\"1\":{\"2163\":1}}],[\"使用comparator接口比较俩个数值的大小\",{\"1\":{\"2160\":1}}],[\"使用comparator接口\",{\"1\":{\"506\":1,\"508\":1}}],[\"使用cookie来存储\",{\"1\":{\"2830\":2}}],[\"使用consumer接口\",{\"1\":{\"2154\":1}}],[\"使用collection存储所有的value\",{\"1\":{\"1670\":1}}],[\"使用callable新增线程的步骤\",{\"0\":{\"1561\":1}}],[\"使用两个线程打印\",{\"1\":{\"1550\":1,\"1556\":1}}],[\"使用lock锁\",{\"1\":{\"1531\":1}}],[\"使用lombok快速制作实体类\",{\"1\":{\"338\":1}}],[\"使用同步方法解决\",{\"1\":{\"1521\":1}}],[\"使用优先调度的抢占式策略\",{\"1\":{\"1486\":1}}],[\"使用三个线程\",{\"1\":{\"1472\":1}}],[\"使用多线程\",{\"0\":{\"1459\":1}}],[\"使用举例\",{\"0\":{\"1429\":1}}],[\"使用位置\",{\"1\":{\"1400\":1}}],[\"使用枚举类\",{\"0\":{\"1383\":1}}],[\"使用异常类的getmessage方法获取\",{\"1\":{\"1361\":1}}],[\"使用tomcat\",{\"0\":{\"2508\":1}}],[\"使用tcp提供可依赖的字节流服务\",{\"1\":{\"1962\":1}}],[\"使用tcp协议前\",{\"1\":{\"1956\":1}}],[\"使用try\",{\"1\":{\"1347\":1}}],[\"使用try将可能出现异常代码包装起来\",{\"1\":{\"1340\":1}}],[\"使用this访问属性和方法时\",{\"1\":{\"1084\":1}}],[\"使用程序处理异常\",{\"1\":{\"1314\":1}}],[\"使用局部内部类\",{\"0\":{\"1211\":1}}],[\"使用基本数据类型的值\",{\"1\":{\"1192\":1}}],[\"使用强转时\",{\"1\":{\"1167\":1}}],[\"使用强制类型转换符\",{\"1\":{\"1162\":1}}],[\"使用限制\",{\"0\":{\"1151\":1}}],[\"使用子类中重写的父类方法\",{\"1\":{\"1149\":1}}],[\"使用了不赞成使用的类或方法时的警告\",{\"1\":{\"1430\":1}}],[\"使用了不同包下的同名的类\",{\"1\":{\"1096\":1}}],[\"使用了全类名\",{\"1\":{\"1096\":1}}],[\"使用了指定字符集的参数\",{\"1\":{\"426\":1}}],[\"使用与日期日历相关的函数\",{\"1\":{\"1090\":1}}],[\"使用者只能通过事先定制好的方法来访问数据\",{\"1\":{\"1057\":1}}],[\"使用for循环遍历可变个数形参\",{\"1\":{\"1048\":1}}],[\"使用递归函数\",{\"1\":{\"1035\":1}}],[\"使用循环\",{\"1\":{\"1035\":1}}],[\"使用在方法体中\",{\"1\":{\"1030\":1}}],[\"使用value1替换value2\",{\"1\":{\"1674\":1}}],[\"使用valueoperations<string\",{\"1\":{\"289\":1}}],[\"使用valueoperations对象操作redis\",{\"1\":{\"288\":1}}],[\"使用void来表示\",{\"1\":{\"1029\":1}}],[\"使用权限修饰符\",{\"1\":{\"1025\":1}}],[\"使用对象调用范围查询的方法便能进行范围查询\",{\"1\":{\"3002\":1}}],[\"使用对象调用方法\",{\"1\":{\"1011\":1}}],[\"使用对象调用属性\",{\"1\":{\"1011\":1}}],[\"使用数组的步骤\",{\"0\":{\"963\":1}}],[\"使用数据\",{\"1\":{\"129\":1}}],[\"使用范围\",{\"0\":{\"945\":1}}],[\"使用该方法\",{\"1\":{\"2434\":1}}],[\"使用该方法可以将数组作为字符串打印\",{\"1\":{\"642\":1}}],[\"使用该方法可以在图形界面编程中实现程序的退出功能等\",{\"1\":{\"634\":1}}],[\"使用该循环\",{\"1\":{\"942\":1}}],[\"使用细节\",{\"0\":{\"901\":1,\"923\":1}}],[\"使用new\",{\"1\":{\"876\":1}}],[\"使用较大的数据类型进行接收\",{\"1\":{\"864\":1}}],[\"使用较少\",{\"1\":{\"529\":1}}],[\"使用转义字符\",{\"1\":{\"854\":1}}],[\"使用单行或多行注释\",{\"1\":{\"815\":1}}],[\"使用文档注释来注释整个类或整个方法\",{\"1\":{\"815\":1}}],[\"使用文件对象创建文件\",{\"1\":{\"555\":1}}],[\"使用格式\",{\"1\":{\"810\":2,\"2150\":1}}],[\"使用insertone\",{\"1\":{\"3071\":1}}],[\"使用int\",{\"1\":{\"839\":1}}],[\"使用include属性在激活指定环境的情况下\",{\"1\":{\"232\":1}}],[\"使用idea\",{\"0\":{\"2744\":1}}],[\"使用idea和下载的tomcat软件\",{\"1\":{\"2497\":1}}],[\"使用ide生成帮助文档\",{\"0\":{\"814\":1}}],[\"使用ide或者智能编辑器\",{\"1\":{\"794\":1}}],[\"使用变量时\",{\"1\":{\"825\":1}}],[\"使用变量的注意事项\",{\"0\":{\"825\":1}}],[\"使用变量\",{\"0\":{\"785\":1}}],[\"使用助记符表示一条机器指令\",{\"1\":{\"772\":1}}],[\"使用参数replacement替换正则表达式匹配到的第一个字符串部分\",{\"1\":{\"742\":1}}],[\"使用参数replacement替换所有正则表达式匹配到的字符串部分\",{\"1\":{\"741\":1}}],[\"使用参数与集合中的每个元素做equals判断\",{\"1\":{\"664\":1}}],[\"使用比较器进行匹配\",{\"1\":{\"739\":1}}],[\"使用说明\",{\"0\":{\"695\":1,\"912\":1,\"927\":1,\"942\":1,\"949\":1,\"952\":1,\"1047\":1,\"1410\":1,\"1552\":1,\"1553\":1,\"1844\":1}}],[\"使用当前运行时类\",{\"1\":{\"591\":1}}],[\"使用类的加载器\",{\"0\":{\"2021\":1},\"1\":{\"589\":1}}],[\"使用缓冲流bufferedwrite\",{\"1\":{\"582\":1}}],[\"使用缓冲流\",{\"1\":{\"581\":1}}],[\"使用示例\",{\"0\":{\"500\":1,\"507\":1,\"841\":1,\"848\":1,\"859\":1,\"950\":1,\"953\":1,\"1432\":1,\"1536\":1,\"1709\":1,\"1710\":1,\"1836\":1,\"1837\":1,\"1853\":1,\"1878\":1,\"1879\":1,\"1888\":1,\"1977\":1,\"2096\":1,\"2334\":1,\"2353\":1,\"2356\":1,\"2428\":1,\"2437\":1,\"2725\":1,\"3240\":1},\"1\":{\"1654\":1}}],[\"使用以下两个接口中的任何一个来实现对象的排序\",{\"1\":{\"493\":1}}],[\"使用给定的replacement\",{\"1\":{\"431\":1,\"432\":1}}],[\"使用用户端应用\",{\"1\":{\"400\":1}}],[\"使用结果模型类\",{\"0\":{\"371\":1}}],[\"使用时直接获取\",{\"1\":{\"1564\":1}}],[\"使用时直接掉用api接口就行了\",{\"1\":{\"353\":1}}],[\"使用时间片策略\",{\"1\":{\"1486\":1}}],[\"使用时就必须指明\",{\"1\":{\"1400\":1}}],[\"使用时要加上强制转换符\",{\"1\":{\"869\":1}}],[\"使用时从spring中直接获取数据使用\",{\"1\":{\"129\":1}}],[\"使用分页api需要通过拦截器实现\",{\"1\":{\"349\":1}}],[\"使用步骤\",{\"0\":{\"2791\":1},\"1\":{\"572\":1}}],[\"使用步骤和redistemplate一样\",{\"1\":{\"289\":1}}],[\"使用步骤如下\",{\"1\":{\"288\":1}}],[\"使用测试类访问mapper接口\",{\"1\":{\"284\":1}}],[\"使用测试\",{\"0\":{\"275\":1,\"284\":1,\"2598\":1,\"2601\":1,\"2608\":1}}],[\"使用mongodb需要先导入驱动\",{\"1\":{\"3229\":1}}],[\"使用mysql驱动的api连接\",{\"0\":{\"2297\":1}}],[\"使用mybatisplus\",{\"0\":{\"282\":1}}],[\"使用mybatis\",{\"0\":{\"272\":1},\"1\":{\"312\":1}}],[\"使用mybatis的时候\",{\"1\":{\"262\":1}}],[\"使用match\",{\"1\":{\"2945\":1}}],[\"使用map\",{\"1\":{\"2224\":1}}],[\"使用mapper接口时\",{\"1\":{\"272\":1}}],[\"使用maven搭建springboot项目\",{\"1\":{\"386\":1}}],[\"使用maven工具在当前真机环境下构建项目\",{\"1\":{\"204\":1}}],[\"使用率低\",{\"1\":{\"246\":1}}],[\"使用日志对象记录日志\",{\"0\":{\"242\":1}}],[\"使用临时属性设置配置文件路径\",{\"1\":{\"221\":1}}],[\"使用临时属性设置配置文件名\",{\"1\":{\"221\":1}}],[\"使用快捷键alt\",{\"1\":{\"212\":1}}],[\"使用git下载项目\",{\"1\":{\"204\":1}}],[\"使用hibernate框架提供的校验器做实现\",{\"1\":{\"174\":1}}],[\"使用服务器去监控其中加载的应用\",{\"1\":{\"135\":1}}],[\"使用的是框架中的数据库操作方法\",{\"1\":{\"2276\":1}}],[\"使用的是idea默认的version\",{\"1\":{\"76\":1}}],[\"使用的方法\",{\"1\":{\"1844\":1}}],[\"使用的方法是子类的\",{\"1\":{\"1149\":1}}],[\"使用的时候注意\",{\"1\":{\"2332\":1}}],[\"使用的时候需要套接在已有流的基础上\",{\"1\":{\"1825\":1}}],[\"使用的时候加载该对象\",{\"1\":{\"129\":1,\"156\":1}}],[\"使用的都是collection中声明过的方法\",{\"1\":{\"1640\":1,\"1653\":1}}],[\"使用\",{\"0\":{\"164\":1,\"232\":1,\"237\":1,\"674\":1,\"904\":1,\"1653\":1,\"1683\":1,\"2082\":1},\"1\":{\"123\":1,\"127\":1,\"165\":1,\"637\":1,\"758\":1,\"854\":1,\"1030\":1,\"1097\":1,\"1268\":1,\"1389\":1,\"1410\":1,\"1878\":1,\"1969\":2,\"2034\":1,\"2237\":1,\"2577\":1,\"2701\":1,\"2838\":1,\"2839\":1,\"2846\":2,\"3027\":5}}],[\"使用缩进表示层级关系\",{\"1\":{\"122\":1}}],[\"使用skip\",{\"1\":{\"3096\":1}}],[\"使用show\",{\"1\":{\"3064\":1}}],[\"使用session来存储\",{\"1\":{\"2830\":2}}],[\"使用set存储所有的entry\",{\"1\":{\"1670\":1}}],[\"使用set存储所有的key\",{\"1\":{\"1670\":1}}],[\"使用system\",{\"1\":{\"1838\":1,\"1870\":1}}],[\"使用stream\",{\"1\":{\"2188\":1}}],[\"使用string也可以\",{\"1\":{\"1807\":1}}],[\"使用statement\",{\"0\":{\"2372\":1}}],[\"使用static修饰的方法\",{\"1\":{\"1232\":1}}],[\"使用starter可以实现快速配置的效果\",{\"1\":{\"100\":1}}],[\"使用scanner实现\",{\"1\":{\"1870\":1}}],[\"使用scanner\",{\"1\":{\"1293\":1}}],[\"使用switch\",{\"1\":{\"929\":1}}],[\"使用spring全家桶开发时\",{\"1\":{\"2766\":1}}],[\"使用springmvc提供的异常处理器做统一的异常处理\",{\"1\":{\"369\":1}}],[\"使用spring\",{\"1\":{\"195\":1}}],[\"使用springboot可以不写版本号\",{\"1\":{\"3229\":1}}],[\"使用springboot整合redis的专用客户端接口操作\",{\"1\":{\"288\":1}}],[\"使用springboot2\",{\"1\":{\"277\":1}}],[\"使用springboot创建项目时\",{\"1\":{\"270\":1}}],[\"使用springboot\",{\"0\":{\"84\":1}}],[\"使用浏览器访问\",{\"1\":{\"87\":1}}],[\"使用官网创建springboot项目\",{\"0\":{\"81\":1}}],[\"^1\",{\"1\":{\"3099\":1}}],[\"^和$的行为中被识别\",{\"1\":{\"749\":1}}],[\"^\",{\"1\":{\"371\":2,\"903\":1}}],[\"操作方式\",{\"0\":{\"3238\":1}}],[\"操作副本集\",{\"0\":{\"3162\":1}}],[\"操作前必须初始化副本集才行\",{\"1\":{\"3146\":1}}],[\"操作符进行关联\",{\"1\":{\"3102\":1}}],[\"操作符将条件进行关联\",{\"1\":{\"3102\":1}}],[\"操作的一直都是主节点\",{\"1\":{\"3169\":1}}],[\"操作的字段\",{\"1\":{\"3014\":1,\"3016\":1}}],[\"操作的是原来的f1\",{\"1\":{\"561\":1}}],[\"操作名\",{\"1\":{\"3014\":1,\"3016\":1}}],[\"操作步骤和批量添加类似\",{\"1\":{\"2987\":1}}],[\"操作都会重新构建索引\",{\"1\":{\"2849\":1}}],[\"操作\",{\"1\":{\"2394\":1,\"2435\":1,\"3184\":2}}],[\"操作blob\",{\"0\":{\"2359\":1}}],[\"操作和访问数据库\",{\"0\":{\"2306\":1}}],[\"操作是延迟执行的\",{\"1\":{\"2193\":1}}],[\"操作是否成功\",{\"1\":{\"370\":1}}],[\"操作person私有成员\",{\"0\":{\"2010\":1}}],[\"操作person\",{\"0\":{\"2009\":1}}],[\"操作流程\",{\"1\":{\"1844\":1}}],[\"操作二进制字节\",{\"1\":{\"1775\":1}}],[\"操作原来泛型位置的结构必须与指定的泛型类型一致\",{\"1\":{\"1721\":1}}],[\"操作同步代码时\",{\"1\":{\"1528\":1}}],[\"操作共享数据的代码\",{\"1\":{\"1511\":2}}],[\"操作数据\",{\"0\":{\"1290\":1}}],[\"操作数组的工具类\",{\"1\":{\"999\":1}}],[\"操作时操作jdbc接口里的方法\",{\"1\":{\"1265\":1}}],[\"操作静态属性的方法\",{\"1\":{\"1237\":1}}],[\"操作redis\",{\"1\":{\"288\":1}}],[\"构成了一个entry对象\",{\"1\":{\"1670\":1}}],[\"构成的set集合\",{\"1\":{\"723\":1}}],[\"构造数据报包\",{\"1\":{\"1986\":1}}],[\"构造\",{\"1\":{\"1986\":1,\"2002\":1}}],[\"构造指定容量的字符串缓冲区\",{\"1\":{\"441\":1}}],[\"构造器引用\",{\"0\":{\"2169\":1,\"2174\":1,\"2177\":1,\"2180\":1,\"2185\":1}}],[\"构造器与mode参数\",{\"0\":{\"1885\":1}}],[\"构造器2\",{\"0\":{\"1848\":1,\"1856\":1}}],[\"构造器1\",{\"0\":{\"1847\":1,\"1855\":1}}],[\"构造器创建对象时\",{\"1\":{\"1629\":1}}],[\"构造器等\",{\"1\":{\"1206\":1}}],[\"构造器是调用本类的其他构造器\",{\"1\":{\"1139\":1}}],[\"构造器中只加个<>即可\",{\"1\":{\"1716\":1}}],[\"构造器中初始化\",{\"1\":{\"1075\":1,\"1104\":1}}],[\"构造器中定义的变量\",{\"1\":{\"828\":1}}],[\"构造器虽然不是方法\",{\"1\":{\"1071\":1}}],[\"构造器重载\",{\"0\":{\"1071\":1}}],[\"构造器分类\",{\"0\":{\"1070\":1}}],[\"构造器的调用\",{\"0\":{\"1074\":1}}],[\"构造器的语法\",{\"0\":{\"1069\":1}}],[\"构造器的作用\",{\"0\":{\"1066\":1}}],[\"构造器可以带参数\",{\"1\":{\"1068\":1}}],[\"构造器形参\",{\"1\":{\"1023\":1,\"1025\":1}}],[\"构造器内的类\",{\"1\":{\"1203\":1}}],[\"构造器内部\",{\"1\":{\"1082\":1}}],[\"构造器内部的变量\",{\"1\":{\"1025\":1}}],[\"构造器内部自动new\",{\"1\":{\"574\":1,\"1800\":1,\"1812\":1,\"1821\":1}}],[\"构造器内\",{\"1\":{\"1023\":1}}],[\"构造器相关\",{\"0\":{\"599\":1}}],[\"构造器\",{\"0\":{\"747\":1,\"1065\":1,\"1468\":1,\"1617\":1,\"1943\":1},\"1\":{\"426\":1,\"529\":1,\"530\":1,\"538\":1,\"564\":1,\"876\":1,\"1062\":1,\"1065\":1,\"1387\":1,\"1711\":1,\"2069\":1}}],[\"构造函数\",{\"0\":{\"1533\":1},\"1\":{\"808\":1,\"2073\":1}}],[\"构造函数的参数可以是一个char\",{\"1\":{\"425\":1}}],[\"构造函数方式\",{\"1\":{\"401\":1}}],[\"构造方法声明\",{\"1\":{\"1405\":1}}],[\"构造方法\",{\"1\":{\"370\":1,\"628\":1,\"1067\":1,\"1413\":1}}],[\"构建查询方式\",{\"1\":{\"3018\":1,\"3019\":1}}],[\"构建查询条件\",{\"1\":{\"2993\":1,\"2994\":1,\"2996\":1,\"2997\":1,\"2999\":1,\"3000\":1,\"3008\":1,\"3010\":1}}],[\"构建查询的请求体\",{\"1\":{\"2992\":1}}],[\"构建日志采集和分析体系\",{\"1\":{\"2846\":1}}],[\"构建一个scanner对象\",{\"1\":{\"638\":1,\"759\":1}}],[\"构建项目\",{\"0\":{\"142\":1}}],[\"构建结果\",{\"0\":{\"74\":1}}],[\"拦截方式\",{\"1\":{\"2702\":1}}],[\"拦截方式的配置\",{\"0\":{\"2702\":1}}],[\"拦截某个目录下所有资源的请求\",{\"1\":{\"2701\":1}}],[\"拦截目录\",{\"1\":{\"2701\":1}}],[\"拦截所有资源\",{\"1\":{\"2701\":1}}],[\"拦截所有\",{\"1\":{\"2701\":1}}],[\"拦截所有的异常信息\",{\"1\":{\"369\":1}}],[\"拦截具体的资源\",{\"1\":{\"2701\":1}}],[\"拦截路径有如下四种配置方式\",{\"1\":{\"2701\":1}}],[\"拦截器\",{\"0\":{\"350\":1},\"1\":{\"313\":1}}],[\"提醒\",{\"1\":{\"2783\":1}}],[\"提交事务\",{\"0\":{\"2381\":1}}],[\"提取出来应用到方法中\",{\"1\":{\"2219\":1}}],[\"提前创建好多个线程\",{\"1\":{\"1564\":1}}],[\"提前规定好\",{\"1\":{\"368\":1}}],[\"提高负载\",{\"1\":{\"3125\":1}}],[\"提高操作效率\",{\"1\":{\"1843\":1}}],[\"提高响应速度\",{\"1\":{\"1565\":1}}],[\"提高计算机系统cpu的利用率\",{\"1\":{\"1445\":1}}],[\"提高应用程序的响应\",{\"1\":{\"1445\":1}}],[\"提高了代码的复用性\",{\"1\":{\"1114\":1}}],[\"提高安全性\",{\"1\":{\"1101\":1}}],[\"提高效率\",{\"1\":{\"448\":1}}],[\"提供如关闭连接\",{\"1\":{\"2434\":1}}],[\"提供实现\",{\"1\":{\"2420\":1}}],[\"提供三个连接的基本信息\",{\"1\":{\"2300\":1}}],[\"提供另外三个连接的基本信息\",{\"1\":{\"2299\":1}}],[\"提供用户名和密码\",{\"1\":{\"2297\":1}}],[\"提供url\",{\"1\":{\"2297\":1}}],[\"提供不同实现\",{\"1\":{\"2283\":1}}],[\"提供两个类参数\",{\"1\":{\"2178\":1}}],[\"提供的\",{\"1\":{\"2838\":1,\"2839\":1}}],[\"提供的一些功能\",{\"1\":{\"1914\":1}}],[\"提供的值没有加f\",{\"1\":{\"868\":1}}],[\"提供第二个参数来指定编码集\",{\"1\":{\"1848\":1}}],[\"提供filewriter的对象\",{\"1\":{\"1816\":1}}],[\"提供file类的对象\",{\"1\":{\"1816\":1}}],[\"提供一种方法访问一个容器\",{\"1\":{\"1587\":1}}],[\"提供一个参数\",{\"1\":{\"726\":1,\"729\":1,\"2144\":2,\"2175\":1}}],[\"提供更多的子类\",{\"1\":{\"1531\":1}}],[\"提供当前枚举类的多个对象\",{\"1\":{\"1373\":1}}],[\"提供方法体\",{\"1\":{\"1247\":1}}],[\"提供公共的静态的方法\",{\"1\":{\"1240\":1}}],[\"提供公共的静态方法\",{\"1\":{\"1240\":1}}],[\"提供了水平可扩展性作为其核心功能的一部分\",{\"1\":{\"3024\":1}}],[\"提供了8个监听器\",{\"1\":{\"2713\":1}}],[\"提供了很多内置的functional\",{\"1\":{\"2143\":1}}],[\"提供了最高级网络应用\",{\"1\":{\"1996\":1}}],[\"提供了在字节流和字符流之间的转换\",{\"1\":{\"1841\":1}}],[\"提供了前提\",{\"1\":{\"1114\":1}}],[\"提供了一种高效且易于使用的处理数据的方式\",{\"1\":{\"2188\":1}}],[\"提供了一系列重载的print\",{\"1\":{\"1872\":1}}],[\"提供了一系列静态方法用于科学计算\",{\"1\":{\"511\":1}}],[\"提供了一个相对安全的内存管理和访问机制\",{\"1\":{\"765\":1}}],[\"提供常用功能\",{\"1\":{\"1090\":1}}],[\"提供包的概念\",{\"1\":{\"1086\":1}}],[\"提供参数\",{\"1\":{\"728\":1,\"2144\":1}}],[\"提供所有\",{\"1\":{\"529\":1}}],[\"提供对不同的日历系统的访问\",{\"1\":{\"462\":1}}],[\"提示\",{\"1\":{\"0\":1,\"11\":1,\"12\":1,\"13\":1,\"14\":1,\"15\":1,\"16\":1,\"17\":1,\"18\":1,\"19\":1,\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1,\"43\":1,\"44\":1,\"45\":1,\"46\":1,\"47\":1,\"48\":1,\"49\":1,\"50\":1,\"51\":1,\"52\":1,\"53\":1,\"54\":1,\"55\":1,\"56\":1,\"57\":1,\"62\":1,\"63\":1,\"64\":1,\"65\":1,\"70\":1,\"84\":1,\"112\":1,\"127\":1,\"133\":1,\"173\":1,\"208\":1,\"239\":1,\"264\":1,\"297\":1,\"338\":1,\"358\":1,\"391\":1,\"401\":1,\"435\":1,\"475\":1,\"480\":1,\"495\":1,\"504\":1,\"511\":1,\"523\":1,\"529\":1,\"530\":1,\"584\":1,\"641\":1,\"647\":1,\"724\":1,\"730\":1,\"731\":1,\"732\":1,\"733\":1,\"734\":1,\"735\":1,\"739\":1,\"814\":1,\"916\":1,\"1035\":1,\"1238\":1,\"1296\":1,\"1575\":1,\"1693\":1,\"1922\":1,\"2102\":1,\"2109\":1,\"2261\":1,\"2276\":1,\"2378\":1,\"2521\":1,\"2568\":1,\"2579\":1,\"2626\":1,\"2695\":1,\"2707\":1,\"2745\":1,\"2751\":1,\"2766\":1,\"2800\":1,\"2866\":1,\"2871\":1,\"2881\":1,\"2897\":1,\"2902\":1,\"2904\":1,\"3042\":1,\"3052\":1,\"3054\":1,\"3060\":1,\"3069\":1,\"3099\":1,\"3134\":1,\"3152\":1,\"3177\":1,\"3198\":1,\"3216\":1,\"3217\":1,\"3238\":1,\"3239\":1,\"3240\":1}}],[\"响应其他副本集成员的心跳和选举请求来维护副本集中的仲裁\",{\"1\":{\"3132\":1}}],[\"响应结果如下\",{\"1\":{\"2916\":1}}],[\"响应结果和完全覆盖一样\",{\"1\":{\"2912\":1}}],[\"响应结果里的result\",{\"1\":{\"2910\":1}}],[\"响应结果\",{\"1\":{\"2885\":1}}],[\"响应结果分析\",{\"0\":{\"2885\":1,\"2901\":1,\"2907\":1,\"2915\":1,\"2920\":1,\"2925\":1}}],[\"响应数据\",{\"1\":{\"2758\":1,\"2835\":1}}],[\"响应数据设计\",{\"0\":{\"368\":1}}],[\"响应重定向后的访问路径\",{\"1\":{\"2659\":1}}],[\"响应字节数据\",{\"0\":{\"2644\":1}}],[\"响应字符数据\",{\"0\":{\"2638\":1}}],[\"响应体\",{\"0\":{\"2957\":1},\"1\":{\"2634\":1}}],[\"响应头和消息头都会携带多个cookie键值对\",{\"1\":{\"2804\":1}}],[\"响应头里就有了set\",{\"1\":{\"2801\":1}}],[\"响应头\",{\"0\":{\"2636\":1},\"1\":{\"2634\":1}}],[\"响应行\",{\"0\":{\"2635\":1},\"1\":{\"2634\":1}}],[\"响应行+响应头+响应体\",{\"1\":{\"2585\":1}}],[\"响应\",{\"1\":{\"1969\":1,\"2705\":2,\"2820\":1,\"2964\":1}}],[\"响应的结果中有result\",{\"1\":{\"2917\":1}}],[\"响应的字符数据\",{\"1\":{\"2641\":1}}],[\"响应的具体数据\",{\"1\":{\"370\":1}}],[\"响应的数据\",{\"1\":{\"368\":1}}],[\"响应信息如下\",{\"1\":{\"2925\":1}}],[\"响应信息解析\",{\"0\":{\"2890\":1}}],[\"响应信息\",{\"1\":{\"368\":1,\"370\":1}}],[\"响应状态码\",{\"1\":{\"368\":1}}],[\"路径问题\",{\"0\":{\"2666\":1}}],[\"路径结束\",{\"1\":{\"1918\":1}}],[\"路径开始\",{\"1\":{\"1918\":1}}],[\"路径也是一种文件\",{\"1\":{\"1768\":1}}],[\"路径中的每级目录之间用一个路径分隔符隔开\",{\"1\":{\"1763\":1}}],[\"路径分隔符和系统有关\",{\"0\":{\"1764\":1}}],[\"路径分隔符\",{\"0\":{\"1763\":1}}],[\"路径改了\",{\"1\":{\"559\":1}}],[\"路径\",{\"1\":{\"538\":1,\"2681\":1,\"2803\":1}}],[\"路径变量\",{\"1\":{\"365\":1}}],[\"路由\",{\"0\":{\"2568\":1}}],[\"路由控制\",{\"1\":{\"1952\":1}}],[\"路由选择\",{\"1\":{\"57\":1}}],[\"路由计算\",{\"1\":{\"57\":1}}],[\"管理用户\",{\"0\":{\"3192\":1}}],[\"管理索引\",{\"0\":{\"3108\":1}}],[\"管理和释放数据库连接\",{\"1\":{\"2416\":1}}],[\"管理数据\",{\"1\":{\"767\":1}}],[\"管理员\",{\"1\":{\"400\":1}}],[\"管理端\",{\"1\":{\"397\":1}}],[\"管理\",{\"1\":{\"361\":1}}],[\"管理第三方bean\",{\"1\":{\"350\":1}}],[\"防止超管泄漏\",{\"1\":{\"3194\":1}}],[\"防止空值异常\",{\"1\":{\"2260\":1}}],[\"防止最后一次buf出现不满载情况\",{\"1\":{\"1836\":1}}],[\"防止这种冲突的方法就是当资源被一个任务使用时\",{\"1\":{\"1524\":1}}],[\"防止被继承后子类报错\",{\"1\":{\"1140\":1}}],[\"防止将null数据作为条件使用\",{\"1\":{\"357\":1}}],[\"防止出错\",{\"1\":{\"356\":1}}],[\"防止写错字段\",{\"1\":{\"356\":1}}],[\"防止文件太大\",{\"1\":{\"257\":1}}],[\"qualified\",{\"1\":{\"2781\":1}}],[\"querybuilders对象调用matchphrasequery方法可以创建创建高亮查询构造器\",{\"1\":{\"3018\":1}}],[\"querybuilders对象调用fuzzyquery方法可以进行模糊查询\",{\"1\":{\"3005\":1}}],[\"querybuilders\",{\"1\":{\"2992\":1,\"2993\":1,\"2994\":1,\"2996\":2,\"2997\":3,\"2999\":1,\"3000\":1,\"3005\":1,\"3006\":1,\"3008\":1,\"3010\":1,\"3018\":1,\"3019\":1}}],[\"querystring\",{\"1\":{\"2598\":2}}],[\"query\",{\"1\":{\"2435\":1,\"2440\":1,\"2441\":1,\"2442\":1,\"2443\":2,\"2918\":1,\"2919\":2,\"2928\":1,\"2931\":1,\"2933\":1,\"2935\":1,\"2938\":1,\"2948\":1,\"2951\":1,\"2959\":1,\"2992\":1,\"2993\":1,\"2994\":1,\"2996\":1,\"2997\":1,\"2999\":1,\"3000\":1,\"3002\":1,\"3003\":1,\"3005\":1,\"3006\":1,\"3008\":1,\"3010\":1,\"3018\":1,\"3019\":1,\"3080\":2,\"3090\":1,\"3095\":2,\"3118\":2}}],[\"queryrunner类的主要方法\",{\"1\":{\"2435\":1}}],[\"queryrunner类提供了两个构造器\",{\"1\":{\"2435\":1}}],[\"queryrunner\",{\"0\":{\"2435\":1},\"1\":{\"2433\":1,\"2438\":2,\"2439\":2,\"2440\":2,\"2441\":2,\"2442\":2,\"2443\":2}}],[\"queryforcustomers\",{\"1\":{\"2352\":1,\"2353\":2}}],[\"querywrapper对象作为参数\",{\"1\":{\"355\":1}}],[\"querywrapper<>\",{\"1\":{\"354\":1,\"355\":1}}],[\"querywrapper<book>\",{\"1\":{\"354\":1,\"355\":1}}],[\"querywrapper类是用于封装查询条件的\",{\"1\":{\"354\":1}}],[\"querywrapper\",{\"0\":{\"354\":1}}],[\"queue\",{\"1\":{\"655\":1,\"1582\":2}}],[\"qq\",{\"1\":{\"2364\":1,\"2438\":1}}],[\"qw\",{\"1\":{\"354\":1,\"355\":3}}],[\"qos\",{\"1\":{\"262\":14}}],[\"返回包含状态信息的文档\",{\"1\":{\"3155\":1}}],[\"返回如下对象\",{\"1\":{\"3073\":1}}],[\"返回查询方法可以多次调用\",{\"1\":{\"3002\":1}}],[\"返回了\",{\"1\":{\"2943\":1}}],[\"返回了一个新的stream\",{\"1\":{\"2215\":1}}],[\"返回了一个新集合\",{\"1\":{\"704\":1}}],[\"返回了一个值\",{\"1\":{\"727\":1,\"2144\":1}}],[\"返回多条记录的dql方法\",{\"1\":{\"2405\":1}}],[\"返回多条数据\",{\"0\":{\"2358\":1}}],[\"返回一条记录的dql方法\",{\"1\":{\"2405\":1}}],[\"返回一个数据库连接\",{\"1\":{\"2427\":1}}],[\"返回一个扔掉了前\",{\"1\":{\"2213\":1}}],[\"返回一个并行流stream\",{\"1\":{\"2197\":1}}],[\"返回一个顺序流stream\",{\"1\":{\"2196\":1}}],[\"返回一个对象\",{\"1\":{\"2178\":1}}],[\"返回一个new的对象\",{\"1\":{\"2175\":1}}],[\"返回一个值\",{\"1\":{\"2159\":1}}],[\"返回一个代理类的对象\",{\"1\":{\"2094\":1}}],[\"返回一个字符串\",{\"1\":{\"1870\":1}}],[\"返回一个pattern对象\",{\"1\":{\"748\":1}}],[\"返回一个线程安全的同类集合\",{\"1\":{\"691\":1}}],[\"返回一个新的字符串\",{\"1\":{\"429\":1}}],[\"返回结果时使用平面几何的二维索引和返回结果时使用球面几何的二维球面索引\",{\"1\":{\"3107\":1}}],[\"返回结果集\",{\"1\":{\"2352\":1,\"2355\":1}}],[\"返回结果模型\",{\"1\":{\"370\":1}}],[\"返回结果模型类\",{\"0\":{\"370\":1}}],[\"返回preparedstatement的实例\",{\"1\":{\"2325\":1,\"2329\":1,\"2333\":1,\"2405\":1}}],[\"返回path\",{\"1\":{\"1918\":1}}],[\"返回path对象包含整个路径\",{\"1\":{\"1918\":1}}],[\"返回set集合\",{\"1\":{\"2243\":1}}],[\"返回stringbuffer的长度\",{\"1\":{\"451\":1}}],[\"返回list集合\",{\"1\":{\"2243\":1}}],[\"返回工作最高的员工的工资\",{\"1\":{\"2235\":1}}],[\"返回流中最小值\",{\"0\":{\"2236\":1}}],[\"返回流中最大值\",{\"0\":{\"2235\":1}}],[\"返回流中元素总数\",{\"0\":{\"2234\":1}}],[\"返回员工总数\",{\"1\":{\"2234\":1}}],[\"返回第一个元素\",{\"0\":{\"2232\":1},\"1\":{\"2232\":1}}],[\"返回第一个参数的第二个参数次方\",{\"1\":{\"521\":1}}],[\"返回成了非嵌套集合\",{\"1\":{\"2219\":1}}],[\"返回被代理类的代理对象\",{\"1\":{\"2090\":1}}],[\"返回数据解析\",{\"0\":{\"2893\":1}}],[\"返回数据表中最大的生日\",{\"1\":{\"2407\":1,\"2408\":1}}],[\"返回数据表中的数据的条目数\",{\"1\":{\"2407\":1,\"2408\":1}}],[\"返回数据类型\",{\"1\":{\"2045\":1}}],[\"返回数据缓冲区\",{\"1\":{\"1986\":1}}],[\"返回将要发送或接收到的数据的长度\",{\"1\":{\"1986\":1}}],[\"返回某台远程主机的端口号\",{\"1\":{\"1986\":1}}],[\"返回某台机器的\",{\"1\":{\"1986\":1}}],[\"返回通信套接字对象\",{\"1\":{\"1973\":1}}],[\"返回ip地址字符串\",{\"1\":{\"1946\":1}}],[\"返回合并后的路径对应的path对象\",{\"1\":{\"1918\":1}}],[\"返回与调用\",{\"1\":{\"1918\":1}}],[\"返回与参数最接近的整数\",{\"1\":{\"518\":1}}],[\"返回调用\",{\"1\":{\"1918\":2}}],[\"返回读到的数据\",{\"1\":{\"1834\":1}}],[\"返回类型\",{\"1\":{\"1732\":1}}],[\"返回类的对象\",{\"1\":{\"1240\":1}}],[\"返回线程优先值\",{\"1\":{\"1487\":1}}],[\"返回执行当前代码的线程\",{\"1\":{\"1479\":1}}],[\"返回当前\",{\"1\":{\"2345\":1}}],[\"返回当前流中任意元素\",{\"0\":{\"2233\":1}}],[\"返回当前枚举类对象常量的名称\",{\"1\":{\"1379\":1}}],[\"返回当前运行时类的父类的class对象\",{\"1\":{\"593\":1}}],[\"返回枚举类型的对象数组\",{\"1\":{\"1379\":1}}],[\"返回字符串形式的属性名\",{\"1\":{\"2045\":1}}],[\"返回字符串\",{\"1\":{\"1341\":1}}],[\"返回字符串的长度\",{\"1\":{\"403\":1}}],[\"返回累的对象\",{\"1\":{\"1240\":1}}],[\"返回都是\",{\"1\":{\"1180\":1}}],[\"返回是\",{\"1\":{\"1180\":4}}],[\"返回该列的值\",{\"1\":{\"2343\":1}}],[\"返回该模式器的string类型的正则表达式\",{\"1\":{\"751\":1}}],[\"返回该类的类加载器\",{\"1\":{\"596\":1}}],[\"返回此socket对象的输出流\",{\"1\":{\"1972\":1}}],[\"返回此套接字的端口\",{\"1\":{\"1985\":1}}],[\"返回此套接字的输出流\",{\"1\":{\"1966\":1}}],[\"返回此套接字的输入流\",{\"1\":{\"1966\":1}}],[\"返回此套接字连接的地址\",{\"1\":{\"1985\":1}}],[\"返回此套接字绑定的本地主机上的端口号\",{\"1\":{\"1985\":1}}],[\"返回此套接字绑定到的本地端口\",{\"1\":{\"1966\":1}}],[\"返回此模式的匹配标志\",{\"1\":{\"749\":1}}],[\"返回此当前运行时类所表示的实体\",{\"1\":{\"592\":1}}],[\"返回boolean\",{\"1\":{\"729\":1,\"2144\":1}}],[\"返回所有k\",{\"1\":{\"723\":1}}],[\"返回所有key构成的set集合\",{\"1\":{\"721\":1}}],[\"返回所有value构成的set集合\",{\"1\":{\"722\":1}}],[\"返回map中key\",{\"1\":{\"718\":1}}],[\"返回从fromindex到toindex位置的左闭右开区间的子集合\",{\"1\":{\"704\":1}}],[\"返回两个index区间的元素\",{\"1\":{\"704\":1}}],[\"返回元素最后出现的位置\",{\"1\":{\"701\":1}}],[\"返回元素的索引\",{\"1\":{\"646\":1}}],[\"返回最小元素\",{\"1\":{\"687\":1}}],[\"返回给定集合中的最大元素\",{\"1\":{\"686\":1}}],[\"返回迭代器对象\",{\"1\":{\"671\":1}}],[\"返回true\",{\"1\":{\"662\":1,\"1643\":1,\"1674\":1}}],[\"返回false\",{\"1\":{\"554\":1,\"662\":1,\"1180\":1,\"1643\":1,\"1674\":1,\"1770\":1}}],[\"返回\",{\"1\":{\"537\":1,\"565\":1,\"700\":1,\"701\":1,\"1185\":1,\"1920\":1}}],[\"返回1\",{\"1\":{\"537\":1}}],[\"返回参数的自然数底数的对数值\",{\"1\":{\"521\":1}}],[\"返回自然数底数e的参数次方\",{\"1\":{\"521\":1}}],[\"返回小于等于\",{\"1\":{\"515\":1}}],[\"返回大于等于给定参数的最小整数\",{\"1\":{\"514\":1}}],[\"返回负整数\",{\"1\":{\"506\":1}}],[\"返回0\",{\"1\":{\"506\":1,\"537\":1,\"1656\":2}}],[\"返回正整数\",{\"1\":{\"506\":1}}],[\"返回值如下\",{\"1\":{\"2896\":1}}],[\"返回值的类型就是orm类\",{\"1\":{\"2357\":1}}],[\"返回值的描述\",{\"1\":{\"812\":1}}],[\"返回值返回的是第一条语句的处理结果\",{\"1\":{\"2323\":1}}],[\"返回值也符合要求\",{\"1\":{\"2168\":1}}],[\"返回值就是读取的字符数\",{\"1\":{\"1806\":1}}],[\"返回值即为futuretask构造器参数callable实现类重写的call\",{\"1\":{\"1561\":1}}],[\"返回值void\",{\"1\":{\"1341\":1}}],[\"返回值类型前面<>不能使用\",{\"1\":{\"1755\":1}}],[\"返回值类型只能是局部内部类\",{\"1\":{\"1211\":1}}],[\"返回值类型用关键字void表示\",{\"1\":{\"1033\":1}}],[\"返回值类型\",{\"1\":{\"1029\":1,\"1037\":1,\"1233\":1,\"1288\":1,\"2048\":2}}],[\"返回值类型是optional对象\",{\"1\":{\"2232\":1}}],[\"返回值类型是被反序列化对象的类\",{\"1\":{\"1900\":1}}],[\"返回值类型是对象r\",{\"1\":{\"728\":1,\"2144\":1}}],[\"返回值类型是\",{\"1\":{\"604\":1,\"605\":1}}],[\"返回值类型是double\",{\"1\":{\"514\":1}}],[\"返回值是怎么获取的\",{\"1\":{\"2133\":1}}],[\"返回值是char的ascii码\",{\"1\":{\"1801\":1}}],[\"返回值是boolean\",{\"1\":{\"702\":1}}],[\"返回值是被移除的元素\",{\"1\":{\"702\":1}}],[\"返回值是0~3的int数字\",{\"1\":{\"613\":1,\"621\":1}}],[\"返回值是字符数\",{\"1\":{\"566\":2}}],[\"返回值是一个伪随机数\",{\"1\":{\"513\":1}}],[\"返回值是个字符串数组\",{\"1\":{\"434\":1,\"744\":1}}],[\"返回值\",{\"0\":{\"1125\":1},\"1\":{\"412\":1,\"434\":1,\"608\":1,\"609\":1,\"616\":1,\"626\":1,\"646\":1,\"698\":1,\"703\":1,\"744\":1,\"752\":1,\"812\":1,\"1029\":2,\"1834\":1,\"2045\":3,\"2047\":2,\"2048\":6,\"2066\":1,\"2090\":1,\"2151\":1,\"2162\":1,\"2239\":1,\"2240\":1,\"2323\":1,\"2343\":1,\"2435\":1}}],[\"返回值为\",{\"1\":{\"104\":1}}],[\"返回指定长度的空数组\",{\"1\":{\"2183\":1}}],[\"返回指定uri对应的path路径\",{\"1\":{\"1919\":1}}],[\"返回指定索引位置\",{\"1\":{\"1918\":1}}],[\"返回指定索引处的字符\",{\"1\":{\"407\":1,\"449\":1}}],[\"返回指定集合中指定元素的出现次数\",{\"1\":{\"688\":1}}],[\"返回指定类名\",{\"1\":{\"590\":1}}],[\"返回指定字符串在此字符串第一次出现的索引\",{\"1\":{\"449\":1}}],[\"返回指定字符串在此字符串中第一次出现的索引\",{\"1\":{\"408\":1}}],[\"返回指定子字符串在此字符串中最后一次出现的索引\",{\"1\":{\"409\":1}}],[\"返回定义好的json格式数据\",{\"1\":{\"371\":1}}],[\"返回的结果很多\",{\"1\":{\"3121\":1}}],[\"返回的结果是一样的\",{\"1\":{\"2902\":1}}],[\"返回的结果是int类型的\",{\"1\":{\"2045\":1}}],[\"返回的id已经是自定义的id了\",{\"1\":{\"2902\":1}}],[\"返回的数据中members\",{\"1\":{\"3174\":1}}],[\"返回的数据格式类似于一个表格\",{\"1\":{\"2892\":1}}],[\"返回的数据类型未统一\",{\"1\":{\"367\":1}}],[\"返回的内容是不一样的\",{\"1\":{\"2523\":1}}],[\"返回的内容都一样\",{\"1\":{\"1380\":1}}],[\"返回的实际上就是一张数据表\",{\"1\":{\"2339\":1}}],[\"返回的只有形参的类型\",{\"1\":{\"624\":1,\"2048\":1}}],[\"返回的是int\",{\"1\":{\"1487\":1}}],[\"返回的是一个对象\",{\"1\":{\"1294\":1}}],[\"返回的是arraylist\",{\"1\":{\"651\":1}}],[\"返回的是数组\",{\"1\":{\"625\":1,\"2048\":1}}],[\"返回的是新的字符串\",{\"1\":{\"417\":1}}],[\"返回的是依然是ipage对象\",{\"1\":{\"351\":1}}],[\"返回拦截器\",{\"1\":{\"350\":1}}],[\"专门用于对其他对象身上发生的事件或状态改变进行监听和相应处理的对象\",{\"1\":{\"2710\":1}}],[\"专门用来编译正则表达式的\",{\"1\":{\"738\":1}}],[\"专门完成代理的操作类\",{\"1\":{\"2089\":1}}],[\"专门的算法\",{\"1\":{\"1541\":1}}],[\"专门有一位来储存数据的正负\",{\"1\":{\"872\":1}}],[\"专门存放工具类的\",{\"1\":{\"370\":1}}],[\"专门存放配置信息相关的类\",{\"1\":{\"350\":1}}],[\"专门给测试人员使用的环境\",{\"1\":{\"23\":1}}],[\"标示的方法\",{\"1\":{\"1425\":1}}],[\"标注\",{\"1\":{\"1425\":1}}],[\"标注serverconfig类使用\",{\"1\":{\"163\":1}}],[\"标识某注解可以在同一个声明上使用多次\",{\"1\":{\"1390\":1}}],[\"标识这个注解怎么保存\",{\"1\":{\"1390\":1,\"1409\":1}}],[\"标识一个匿名函数或函数式接口\",{\"1\":{\"1390\":1}}],[\"标识i是否被j除尽\",{\"1\":{\"956\":1}}],[\"标识符保存string对象的地址\",{\"1\":{\"883\":1}}],[\"标识符保存常量池的内存地址\",{\"1\":{\"883\":1}}],[\"标识符不能包含空格\",{\"1\":{\"834\":1}}],[\"标识符\",{\"0\":{\"833\":1,\"1455\":1,\"1731\":1},\"1\":{\"1147\":1,\"1192\":1}}],[\"标记这个注解是继承于哪个注解类\",{\"1\":{\"1390\":1,\"1408\":1}}],[\"标记这个注解应该是哪种\",{\"1\":{\"1390\":1,\"1408\":1}}],[\"标记这些注解是否包含在用户文档中\",{\"1\":{\"1390\":1,\"1408\":1}}],[\"标记所修饰的类\",{\"1\":{\"1389\":1,\"1390\":1}}],[\"标记文件创建时项目当时对应的版本\",{\"1\":{\"811\":1}}],[\"标记某个代码关键字\",{\"1\":{\"810\":1}}],[\"标记方法名\",{\"1\":{\"810\":1}}],[\"标记类名\",{\"1\":{\"810\":1}}],[\"标准输入流\",{\"0\":{\"1870\":1}}],[\"标准输出\",{\"1\":{\"348\":1}}],[\"标准流\",{\"0\":{\"1867\":1}}],[\"标准出现了\",{\"1\":{\"1863\":1}}],[\"标准的javase类加载器可以按要求查找类\",{\"1\":{\"2030\":1}}],[\"标准的java类\",{\"1\":{\"1295\":1}}],[\"标准的输出流\",{\"1\":{\"1867\":1}}],[\"标准的输入流\",{\"1\":{\"1867\":1}}],[\"标准的方法输入或输出数据\",{\"1\":{\"1773\":1}}],[\"标准\",{\"1\":{\"1258\":1}}],[\"标准格式\",{\"0\":{\"483\":1}}],[\"标签省略了前缀\",{\"1\":{\"2782\":1}}],[\"标签必须正确关闭\",{\"1\":{\"2770\":1}}],[\"标签都是自定义的\",{\"1\":{\"2767\":1}}],[\"标签\",{\"1\":{\"382\":1}}],[\"全盘扫描查询\",{\"1\":{\"3121\":1}}],[\"全量查询\",{\"0\":{\"2994\":1}}],[\"全查询\",{\"0\":{\"2931\":1}}],[\"全文检索\",{\"0\":{\"2941\":1},\"1\":{\"2940\":1,\"2941\":1,\"2966\":1}}],[\"全文检索都实现的很鸡肋\",{\"1\":{\"2849\":1}}],[\"全文搜索\",{\"0\":{\"2851\":1}}],[\"全文搜索引擎\",{\"0\":{\"2847\":1}}],[\"全文搜索属于最常见的需求\",{\"1\":{\"2841\":1}}],[\"全球通用的字符集\",{\"1\":{\"1863\":1}}],[\"全部保留\",{\"0\":{\"1725\":1}}],[\"全部相等就会返回true\",{\"1\":{\"667\":1}}],[\"全局变量\",{\"1\":{\"2689\":1}}],[\"全局变量和局部变量的值和对象的地址储存在这里\",{\"1\":{\"1453\":1}}],[\"全局常量\",{\"1\":{\"1107\":1,\"1259\":2}}],[\"全等于\",{\"1\":{\"1178\":1}}],[\"全类名\",{\"0\":{\"1095\":1}}],[\"全大写下划线分隔\",{\"1\":{\"835\":1}}],[\"全小写\",{\"1\":{\"835\":1}}],[\"全小写或用\",{\"1\":{\"166\":1}}],[\"全参构造方法\",{\"1\":{\"344\":1}}],[\"架构\",{\"0\":{\"3137\":1},\"1\":{\"338\":1}}],[\"架构师\",{\"1\":{\"22\":1}}],[\"前置条件\",{\"1\":{\"3225\":1}}],[\"前n个不要\",{\"1\":{\"3096\":1}}],[\"前两列不变\",{\"1\":{\"2880\":1}}],[\"前两个构造器是继承thread类创建多线程用的\",{\"1\":{\"1468\":1}}],[\"前的代码\",{\"1\":{\"2705\":2}}],[\"前者是主要面向内存\",{\"1\":{\"2191\":1}}],[\"前者是个集合接口\",{\"1\":{\"679\":1,\"1693\":1}}],[\"前\",{\"1\":{\"893\":2}}],[\"前面的能匹配到\",{\"1\":{\"2575\":1}}],[\"前面\",{\"1\":{\"782\":1}}],[\"前端>基础>js>8\",{\"1\":{\"2833\":1}}],[\"前端表单\",{\"0\":{\"2609\":1}}],[\"前端快照\",{\"1\":{\"2511\":1}}],[\"前端代码已经提供好了\",{\"1\":{\"391\":1}}],[\"前端代码\",{\"0\":{\"391\":1,\"2623\":1}}],[\"前端页面放到\",{\"1\":{\"372\":1}}],[\"前端页面设计\",{\"0\":{\"372\":1}}],[\"前端\",{\"0\":{\"1292\":1},\"1\":{\"338\":1,\"398\":1,\"2583\":2,\"2754\":1}}],[\"前后端分离\",{\"1\":{\"2728\":1}}],[\"前后端的结构在java层面交互时\",{\"1\":{\"1005\":1}}],[\"前后端联调\",{\"1\":{\"338\":1}}],[\"前后端开发协议制作\",{\"1\":{\"338\":1}}],[\"前提先创建好了数据库\",{\"1\":{\"2292\":1}}],[\"前提是有权限\",{\"1\":{\"573\":1}}],[\"前提\",{\"1\":{\"82\":1,\"310\":1,\"2096\":1,\"2455\":1,\"2542\":1}}],[\"ω\",{\"0\":{\"336\":1}}],[\"ⅵ\",{\"0\":{\"334\":1,\"427\":1,\"628\":1,\"870\":1,\"910\":1,\"943\":1,\"1424\":1,\"2225\":1,\"2267\":1,\"2626\":1}}],[\"下拉框选择tomcat\",{\"1\":{\"2509\":1}}],[\"下限\",{\"0\":{\"1752\":1}}],[\"下一个node\",{\"1\":{\"1624\":1}}],[\"下一次装载字符时\",{\"1\":{\"569\":1,\"1808\":1}}],[\"下面介绍一种更加复杂\",{\"1\":{\"2880\":1}}],[\"下面的方法测试\",{\"1\":{\"1582\":1}}],[\"下面例子均采用典型实现\",{\"1\":{\"564\":1}}],[\"下滑显示新的评论\",{\"1\":{\"1446\":1}}],[\"下午03时47分16秒\",{\"1\":{\"486\":1}}],[\"下载压缩包\",{\"0\":{\"3046\":1}}],[\"下载的是绿色软件\",{\"1\":{\"3042\":1}}],[\"下载的打包格式选zip\",{\"1\":{\"3041\":1}}],[\"下载安装包\",{\"0\":{\"3040\":1},\"1\":{\"3046\":1}}],[\"下载安装web服务器软件\",{\"1\":{\"2448\":1}}],[\"下载地址\",{\"1\":{\"2452\":1,\"2854\":1,\"3040\":1}}],[\"下载包并导入\",{\"1\":{\"2432\":1}}],[\"下载jar包\",{\"1\":{\"2423\":1}}],[\"下载页\",{\"1\":{\"2423\":1}}],[\"下载mysql驱动\",{\"0\":{\"2288\":1}}],[\"下载工具下载前都会建立两个临时文件\",{\"1\":{\"1892\":1}}],[\"下载后台代码\",{\"1\":{\"392\":1}}],[\"下载用户端代码\",{\"1\":{\"392\":1}}],[\"下载\",{\"0\":{\"392\":1,\"2452\":1}}],[\"下单\",{\"1\":{\"399\":1}}],[\"下单等\",{\"1\":{\"396\":1}}],[\"下单时间\",{\"1\":{\"384\":1}}],[\"下单用户\",{\"1\":{\"384\":1}}],[\"下次更新\",{\"1\":{\"314\":1}}],[\"下划线模式\",{\"1\":{\"167\":1}}],[\"更改\",{\"1\":{\"3127\":1}}],[\"更改数据库通用的增删改方法\",{\"0\":{\"2386\":1}}],[\"更直观\",{\"1\":{\"3119\":1}}],[\"更多复杂查询\",{\"0\":{\"3098\":1}}],[\"更多网络编程内容详见\",{\"1\":{\"1922\":1}}],[\"更不能热部署\",{\"1\":{\"2514\":1}}],[\"更不用说进行运算了\",{\"1\":{\"529\":1}}],[\"更简单\",{\"1\":{\"2506\":1}}],[\"更简化的编译运行\",{\"0\":{\"2273\":1}}],[\"更快的系统反应速度\",{\"1\":{\"2419\":1}}],[\"更有利于代码的维护和升级\",{\"1\":{\"2395\":1}}],[\"更灵活安全\",{\"1\":{\"2343\":1}}],[\"更灵活的代码\",{\"1\":{\"2111\":1}}],[\"更新指定的字段\",{\"1\":{\"3082\":1}}],[\"更新指定字段\",{\"0\":{\"3082\":1}}],[\"更新选项\",{\"1\":{\"3080\":1}}],[\"更新文档\",{\"0\":{\"3080\":1}}],[\"更新或删除\",{\"1\":{\"2435\":1}}],[\"更新\",{\"1\":{\"2435\":1}}],[\"更新某表中的一个数据\",{\"1\":{\"2334\":1}}],[\"更新操作示例\",{\"0\":{\"2329\":1}}],[\"更新时间\",{\"1\":{\"314\":1,\"375\":1,\"376\":1,\"377\":1,\"378\":1,\"379\":1,\"380\":1,\"382\":1}}],[\"更安全和高效\",{\"1\":{\"2312\":1}}],[\"更何况强转成person\",{\"1\":{\"1171\":1}}],[\"更加易读\",{\"1\":{\"253\":1}}],[\"工作原理\",{\"0\":{\"2852\":1}}],[\"工作目录\",{\"0\":{\"2472\":1}}],[\"工作方式\",{\"0\":{\"2417\":1}}],[\"工厂类\",{\"0\":{\"1567\":1}}],[\"工具类可以辅助我们进行开发\",{\"1\":{\"2732\":1}}],[\"工具类api\",{\"0\":{\"2434\":1}}],[\"工具类\",{\"1\":{\"2433\":1,\"2739\":1}}],[\"工具类中的方法\",{\"1\":{\"1237\":1}}],[\"工具提取成文档\",{\"1\":{\"1415\":1}}],[\"工具\",{\"0\":{\"329\":1},\"1\":{\"313\":1,\"336\":1,\"398\":1,\"2982\":1}}],[\"工程路径config目录中配置文件\",{\"1\":{\"217\":1}}],[\"工程路径配置文件\",{\"1\":{\"217\":1}}],[\"工程名\",{\"1\":{\"207\":1}}],[\"工程包名\",{\"1\":{\"191\":1}}],[\"工程的pom竟然也有parent\",{\"1\":{\"93\":1}}],[\"工程或模块\",{\"1\":{\"71\":1}}],[\"公\",{\"1\":{\"3179\":1}}],[\"公共网关接口\",{\"1\":{\"1992\":1}}],[\"公共类\",{\"1\":{\"313\":1}}],[\"公认端口\",{\"1\":{\"1938\":1}}],[\"公网地址\",{\"1\":{\"1934\":1}}],[\"公网地址和私有地址\",{\"0\":{\"1934\":1}}],[\"公司测试部门使用\",{\"1\":{\"223\":1}}],[\"├──\",{\"1\":{\"313\":13}}],[\"生命周期\",{\"0\":{\"1500\":1,\"2544\":1,\"2674\":1,\"2676\":1},\"1\":{\"1436\":1}}],[\"生成stream的集合是一个嵌套集合\",{\"1\":{\"2219\":1}}],[\"生成随机数\",{\"1\":{\"2203\":1}}],[\"生成\",{\"0\":{\"2203\":1}}],[\"生成一个被代理类\",{\"1\":{\"2097\":1}}],[\"生成动态代理\",{\"1\":{\"2001\":1}}],[\"生成对应的\",{\"1\":{\"1993\":1}}],[\"生成的是一个boolean结果\",{\"1\":{\"1178\":1}}],[\"生成的文档会解析html代码\",{\"1\":{\"808\":1}}],[\"生成api文档\",{\"1\":{\"805\":1}}],[\"生成策略为参照数据库设定的策略\",{\"1\":{\"348\":1}}],[\"生成代码\",{\"1\":{\"312\":1}}],[\"生产端配置的详细一些\",{\"1\":{\"3048\":1}}],[\"生产时要部署到linux服务器\",{\"1\":{\"2855\":1}}],[\"生产阶段必须关闭热部署\",{\"1\":{\"151\":1}}],[\"生产阶段不要开启热部署\",{\"1\":{\"133\":1}}],[\"生产环境无影响\",{\"1\":{\"2823\":1}}],[\"生产环境搭建\",{\"0\":{\"786\":1}}],[\"生产环境配置文件\",{\"1\":{\"228\":1}}],[\"生产环境的密码被测试任意拿到\",{\"1\":{\"227\":1}}],[\"生产环境\",{\"1\":{\"23\":1,\"223\":1,\"262\":1}}],[\"还要开启登录认证\",{\"1\":{\"3202\":1}}],[\"还储存了\",{\"1\":{\"2803\":1}}],[\"还能隐藏一些在程序中抛出的sqleeception\",{\"1\":{\"2434\":1}}],[\"还拿连接数据库举例\",{\"1\":{\"2075\":1,\"2077\":1}}],[\"还包含了定位该资源的信息\",{\"1\":{\"1995\":1}}],[\"还必须保证其内部所有属性也必须是可序列化的\",{\"1\":{\"1905\":1}}],[\"还会在关闭流之前刷新缓冲区\",{\"1\":{\"1826\":1}}],[\"还会将父类所有的成员复制一份\",{\"1\":{\"1119\":1}}],[\"还需要在此处添加元素\",{\"1\":{\"1644\":1}}],[\"还可用于保存具有映射关系的关联数组\",{\"1\":{\"1575\":1}}],[\"还可以使用命名关闭mongodb服务\",{\"1\":{\"3207\":1}}],[\"还可以使用能表示字符的其他形式\",{\"1\":{\"854\":1}}],[\"还可以为专用目的维护其他\",{\"1\":{\"3126\":1}}],[\"还可以包括其他文档\",{\"1\":{\"3032\":1}}],[\"还可以放在方法声明中\",{\"1\":{\"1517\":1}}],[\"还可以定义静态方法\",{\"1\":{\"1267\":1}}],[\"还可以声明自己特有的属性或方法\",{\"1\":{\"1113\":1}}],[\"还可以继续使用\",{\"1\":{\"658\":1}}],[\"还可以根据需要设置对应的配置\",{\"1\":{\"293\":1}}],[\"还没有执行完\",{\"1\":{\"1507\":1}}],[\"还没有分配值的时候\",{\"1\":{\"975\":1}}],[\"还有常见的项目中应用日志的搜索等等\",{\"1\":{\"2848\":1}}],[\"还有其他的元数据文件\",{\"1\":{\"2734\":1}}],[\"还有一个部分需要一个完整的结构进行描述\",{\"1\":{\"1202\":1,\"1213\":1}}],[\"还有javadoc等\",{\"1\":{\"787\":1}}],[\"还是多次调用sort\",{\"1\":{\"3012\":1}}],[\"还是原来的文档\",{\"1\":{\"2909\":1}}],[\"还是有点冗余\",{\"1\":{\"2615\":1}}],[\"还是会出现线程安全问题\",{\"1\":{\"1514\":1}}],[\"还是会继续向下执行\",{\"1\":{\"927\":1}}],[\"还是编入class文件中\",{\"1\":{\"1390\":1,\"1409\":1}}],[\"还是要后台根据收集的异常信息去优化代码\",{\"1\":{\"1315\":1}}],[\"还是需要导入\",{\"1\":{\"1097\":1}}],[\"还是表达式2\",{\"1\":{\"911\":1}}],[\"还是被舍弃了\",{\"1\":{\"891\":1}}],[\"还是比较繁琐\",{\"1\":{\"243\":1}}],[\"还提供了对集合对象设置不可变\",{\"1\":{\"679\":1,\"1695\":1}}],[\"还提供以下运算\",{\"1\":{\"529\":1}}],[\"除数为0\",{\"1\":{\"1323\":1}}],[\"除此之外的任何地方都不能使用该类\",{\"1\":{\"1212\":1}}],[\"除此之外的任何地方\",{\"1\":{\"1211\":1}}],[\"除java\",{\"1\":{\"1116\":1}}],[\"除号运算的细节\",{\"0\":{\"891\":1}}],[\"除以2\",{\"1\":{\"874\":1}}],[\"除了主节点\",{\"1\":{\"3223\":1}}],[\"除了暴力kill进程\",{\"1\":{\"3207\":1}}],[\"除了system\",{\"1\":{\"3190\":1}}],[\"除了sql语句外\",{\"1\":{\"2330\":1}}],[\"除了数据库config和local之外\",{\"1\":{\"3190\":4}}],[\"除了基本的json类型\",{\"1\":{\"3033\":1}}],[\"除了基础配置\",{\"1\":{\"293\":1}}],[\"除了目录结构外\",{\"1\":{\"2748\":1}}],[\"除了class外\",{\"1\":{\"2734\":1}}],[\"除了在存储的最大信息量上不同外\",{\"1\":{\"2360\":1}}],[\"除了final常量\",{\"1\":{\"2029\":1}}],[\"除了当前person类需要实现serializable接口之外\",{\"1\":{\"1905\":1}}],[\"除了添加null之外\",{\"1\":{\"1744\":1}}],[\"除了将本类所有的成员复制一份到内存外\",{\"1\":{\"1119\":1}}],[\"除了boolean类型外\",{\"1\":{\"862\":1}}],[\"除了直接使用字符作为值外\",{\"1\":{\"854\":1}}],[\"除法运算\",{\"1\":{\"534\":1}}],[\"除非你要访问这种系统创建的集合\",{\"1\":{\"3067\":1}}],[\"除非重新进行端口配置\",{\"1\":{\"2455\":1}}],[\"除非流水线上触发终止操作\",{\"1\":{\"2205\":1}}],[\"除非要求用数组\",{\"1\":{\"1576\":1}}],[\"除非有默认值\",{\"1\":{\"1400\":1}}],[\"除非自己也声明成抽象类\",{\"1\":{\"1247\":1}}],[\"除非直接new\",{\"1\":{\"1182\":1}}],[\"除非遇到特殊情况\",{\"1\":{\"1132\":1}}],[\"除非不足以表示较大的数\",{\"1\":{\"842\":1}}],[\"除非springboot未提供对应版本\",{\"1\":{\"97\":1}}],[\"除非手动在pom\",{\"1\":{\"96\":1}}],[\"你不需要捕捉这个异常classnotfoundexception\",{\"1\":{\"2434\":1}}],[\"你好\",{\"1\":{\"1958\":2,\"2007\":1,\"2008\":1,\"2009\":1,\"2648\":1}}],[\"你需要调用\",{\"1\":{\"736\":1}}],[\"你必须首先调用其公共静态编译方法\",{\"1\":{\"736\":1}}],[\"你ok\",{\"1\":{\"403\":1}}],[\"你可以理解为这是redistemplate的一种指定数据泛型的操作api\",{\"1\":{\"288\":1}}],[\"你也不可能到源代码中去添加\",{\"1\":{\"157\":1}}],[\"序列化后的结果中\",{\"1\":{\"1905\":1}}],[\"序列化类\",{\"0\":{\"1905\":1}}],[\"序列化流\",{\"1\":{\"1903\":1,\"1908\":1}}],[\"序列化的好处在于可将任何实现了serializable接口的对象转化为\",{\"1\":{\"1896\":1}}],[\"序列化与反序列化\",{\"0\":{\"1895\":1}}],[\"序列化\",{\"0\":{\"1903\":1,\"1908\":1},\"1\":{\"288\":1,\"1894\":1,\"1895\":1}}],[\"接着flatmap会将这些stream合并成一个stream\",{\"1\":{\"2224\":1}}],[\"接着我们使用java\",{\"1\":{\"2013\":1}}],[\"接着通过某种算法计算在hashset底层数组中存放的位置\",{\"1\":{\"1643\":1}}],[\"接字\",{\"1\":{\"1939\":1}}],[\"接收请求\",{\"1\":{\"2758\":1}}],[\"接收get\",{\"1\":{\"2567\":1}}],[\"接收用户的请求\",{\"1\":{\"2446\":1}}],[\"接收一个\",{\"1\":{\"2242\":1}}],[\"接收一个函数作为参数\",{\"1\":{\"2215\":1,\"2216\":1,\"2217\":1,\"2218\":1}}],[\"接收一个boolean参数\",{\"1\":{\"1533\":1}}],[\"接收到的或将要发送的数据从缓冲区中的偏移量\",{\"1\":{\"1986\":1}}],[\"接收方法\",{\"1\":{\"1982\":1}}],[\"接收方收到也不确认\",{\"1\":{\"1957\":1}}],[\"接收端示例\",{\"0\":{\"1984\":1}}],[\"接收端\",{\"1\":{\"1982\":1}}],[\"接收\",{\"1\":{\"1976\":1,\"2210\":1}}],[\"接收的变量类型要与表达式结果的变量类型一致\",{\"1\":{\"913\":1}}],[\"接收的值数据类型不能小于数值常量的数据类型\",{\"1\":{\"867\":1}}],[\"接收结果的变量也要定义成相应的数据类型\",{\"1\":{\"863\":1}}],[\"接受一个端口号作为参数\",{\"1\":{\"1975\":1}}],[\"接受一个实体类作为泛型\",{\"1\":{\"354\":1}}],[\"接受参数\",{\"1\":{\"730\":1}}],[\"接口提供了一个单独的方法\",{\"1\":{\"2436\":1}}],[\"接口需要用户去做迭代\",{\"1\":{\"2237\":1}}],[\"接口构造器\",{\"1\":{\"2115\":1}}],[\"接口上声明的泛型\",{\"1\":{\"1721\":1}}],[\"接口时通过一个标识表示类中某个属性的类型或者是某个方法的返回值及参数类型\",{\"1\":{\"1700\":1}}],[\"接口使用频率最高的实现类\",{\"1\":{\"1661\":1}}],[\"接口冲突\",{\"1\":{\"1269\":1}}],[\"接口新特性\",{\"0\":{\"1267\":1}}],[\"接口示例\",{\"0\":{\"1263\":1}}],[\"接口通过让类去实现\",{\"1\":{\"1262\":1}}],[\"接口与抽象类的对比\",{\"0\":{\"1266\":1}}],[\"接口与实现类之间存在多态性\",{\"1\":{\"1261\":1}}],[\"接口与接口之间可以继承\",{\"1\":{\"1260\":1}}],[\"接口也可以继承其它接口\",{\"1\":{\"1261\":1}}],[\"接口中声明私有方法\",{\"0\":{\"2274\":1}}],[\"接口中方法的实现决定了如何对流执行收集的操作\",{\"1\":{\"2242\":1}}],[\"接口中方法的方法名\",{\"1\":{\"2151\":1}}],[\"接口中重写类的排序方法compare\",{\"1\":{\"1688\":1}}],[\"接口中被重写的方法\",{\"0\":{\"1270\":1}}],[\"接口中的所有抽象方法都默认是由public\",{\"1\":{\"1260\":1}}],[\"接口中的所有成员变量都默认是由public\",{\"1\":{\"1260\":1}}],[\"接口中不能定义构造器的\",{\"1\":{\"1260\":1}}],[\"接口内部只能定义全局常量和抽象方法\",{\"1\":{\"1259\":1}}],[\"接口采用interface关键字来定义\",{\"1\":{\"1259\":1}}],[\"接口定义\",{\"0\":{\"1259\":1}}],[\"接口就是规范\",{\"1\":{\"1258\":1}}],[\"接口就没有意义了\",{\"1\":{\"1161\":1}}],[\"接口和类是并列关系\",{\"1\":{\"1254\":1}}],[\"接口的主要实现类\",{\"1\":{\"2436\":1}}],[\"接口的主要用途就是被实现类实现\",{\"1\":{\"1261\":1}}],[\"接口的成员\",{\"1\":{\"1721\":1}}],[\"接口的典型实现\",{\"1\":{\"1635\":1}}],[\"接口的具体使用\",{\"1\":{\"1263\":1}}],[\"接口的实现类\",{\"1\":{\"1639\":1}}],[\"接口的实现类可以直接使用这些默认的方法\",{\"1\":{\"1273\":1}}],[\"接口的实现细节都由编译器完成\",{\"1\":{\"1395\":1}}],[\"接口的实现\",{\"0\":{\"1262\":1}}],[\"接口的使用细节\",{\"0\":{\"1261\":1}}],[\"接口的特点\",{\"0\":{\"1260\":1}}],[\"接口的本质是契约\",{\"1\":{\"1258\":1}}],[\"接口的意义\",{\"0\":{\"1258\":1}}],[\"接口的由来\",{\"0\":{\"1255\":1}}],[\"接口的集合框架类\",{\"1\":{\"1090\":1}}],[\"接口的父接口\",{\"1\":{\"655\":1,\"1582\":1}}],[\"接口名\",{\"1\":{\"835\":1}}],[\"接口是无法创建对象\",{\"1\":{\"2588\":1}}],[\"接口是一种特殊的抽象类\",{\"1\":{\"1254\":1}}],[\"接口是\",{\"1\":{\"655\":1,\"1582\":1,\"2317\":1}}],[\"接口响应的时间戳\",{\"1\":{\"368\":1}}],[\"接口优化\",{\"0\":{\"367\":1}}],[\"接口命名一般以i开头\",{\"1\":{\"362\":1}}],[\"接口\",{\"0\":{\"283\":1,\"346\":1,\"1586\":1,\"1609\":1,\"1632\":1,\"1660\":1,\"1721\":1,\"2079\":1},\"1\":{\"592\":1,\"808\":1,\"810\":1,\"827\":1,\"1025\":1,\"1090\":1,\"1093\":1,\"1259\":1,\"1265\":1,\"1295\":1,\"1395\":1,\"1405\":1,\"1413\":1,\"1578\":2,\"1611\":1,\"2016\":1,\"2073\":1,\"2077\":1,\"2078\":1,\"2096\":1,\"2523\":2}}],[\"接上一步\",{\"1\":{\"72\":1}}],[\"表连接\",{\"1\":{\"3031\":1}}],[\"表头\",{\"1\":{\"2893\":1}}],[\"表单\",{\"1\":{\"2667\":1}}],[\"表中的记录数为\",{\"1\":{\"2409\":1}}],[\"表中的一个字段对应java类的一个属性\",{\"1\":{\"2346\":1}}],[\"表中的一条记录对应java类的一个对象\",{\"1\":{\"2346\":1}}],[\"表面传递的是父类的数据类型\",{\"1\":{\"1150\":1}}],[\"表明main方法入口\",{\"1\":{\"2733\":1}}],[\"表明该方法将不对这些异常进行处理\",{\"1\":{\"1349\":1}}],[\"表明调用的是父类中被重写的方法\",{\"1\":{\"1134\":1}}],[\"表明调用的是父类中声明的属性\",{\"1\":{\"1133\":1}}],[\"表明此形参是一个常量\",{\"1\":{\"1106\":1}}],[\"表明此方法不可以被重写\",{\"1\":{\"1102\":1}}],[\"表明此变量是属性\",{\"1\":{\"1080\":1,\"1081\":1}}],[\"表达式抛出一个受检异常\",{\"1\":{\"2141\":1}}],[\"表达式来创建该接口的对象\",{\"1\":{\"2141\":1}}],[\"表达式的类型依赖于上下文环境\",{\"1\":{\"2117\":1}}],[\"表达式的限制\",{\"1\":{\"927\":1}}],[\"表达式中的参数类型都是由编译器推断得出的\",{\"1\":{\"2117\":1}}],[\"表达式中的所有元字符转义字符将不具备特殊含义\",{\"1\":{\"749\":1}}],[\"表达式\",{\"1\":{\"926\":1}}],[\"表达式1\",{\"0\":{\"913\":1}}],[\"表现层的servlet接收请求并调用业务逻辑层的方法进行业务逻辑处理\",{\"1\":{\"2759\":1}}],[\"表现层消息一致性处理\",{\"1\":{\"367\":1}}],[\"表现层其实就是\",{\"1\":{\"363\":1}}],[\"表现层\",{\"0\":{\"363\":1},\"1\":{\"2758\":2,\"2760\":1,\"2761\":1}}],[\"表名\",{\"1\":{\"282\":1,\"374\":1}}],[\"表示操作成功\",{\"1\":{\"3199\":1,\"3200\":1}}],[\"表示健康\",{\"1\":{\"3160\":1}}],[\"表示添加成功\",{\"1\":{\"3159\":1}}],[\"表示添加映射\",{\"1\":{\"2963\":1}}],[\"表示要添加的主机为仲裁者\",{\"1\":{\"3159\":1}}],[\"表示该节点是健康的\",{\"1\":{\"3157\":1}}],[\"表示该注解能写在使用类型的任何语句中\",{\"1\":{\"1423\":1}}],[\"表示该注解能写在类型变量的声明语句中\",{\"1\":{\"1422\":1}}],[\"表示副本集创建成功\",{\"1\":{\"3150\":1}}],[\"表示写问题的文档\",{\"1\":{\"3081\":1}}],[\"表示相差两个\",{\"1\":{\"3005\":1}}],[\"表示相差一个\",{\"1\":{\"3005\":1}}],[\"表示相等\",{\"1\":{\"506\":1}}],[\"表示创建成功\",{\"1\":{\"2964\":1,\"3193\":1}}],[\"表示是否创建索引\",{\"1\":{\"2963\":1}}],[\"表示是否移除成功\",{\"1\":{\"702\":1}}],[\"表示计数不准确\",{\"1\":{\"2930\":1}}],[\"表示待删除的文档未找到\",{\"1\":{\"2917\":1}}],[\"表示数据被标记为删除\",{\"1\":{\"2915\":1}}],[\"表示数据被更新\",{\"1\":{\"2910\":1}}],[\"表示数组\",{\"1\":{\"990\":1}}],[\"表示更新成功\",{\"1\":{\"2910\":1,\"2912\":1}}],[\"表示未查找到\",{\"1\":{\"2907\":1,\"2925\":1}}],[\"表示查找到\",{\"1\":{\"2907\":1,\"2925\":1}}],[\"表示每个单独的文档包含了哪些关键字\",{\"1\":{\"2873\":1}}],[\"表示哪些文档包含了该关键字\",{\"1\":{\"2873\":1}}],[\"表示层\",{\"1\":{\"2765\":1}}],[\"表示对servletcontext对象本身的生命周期进行监控\",{\"1\":{\"2722\":1}}],[\"表示监听器\",{\"1\":{\"2707\":1}}],[\"表示这个值不存在\",{\"1\":{\"2247\":1}}],[\"表示的是web目录\",{\"1\":{\"2693\":1}}],[\"表示的网络资源之间的连接\",{\"1\":{\"1996\":1}}],[\"表示的时间是格林威治时间\",{\"1\":{\"477\":1}}],[\"表示到url所引用的远程对象的连接\",{\"1\":{\"1993\":1}}],[\"表示所有泛型的父类\",{\"1\":{\"1741\":1}}],[\"表示所有类\",{\"1\":{\"1093\":1}}],[\"表示整个方法为同步方法\",{\"1\":{\"1517\":1}}],[\"表示protected类型\",{\"1\":{\"1288\":1}}],[\"表示此类不能被继承\",{\"1\":{\"1206\":1}}],[\"表示可以导入xxx包下的所有结构\",{\"1\":{\"1094\":1}}],[\"表示结束此方法的意思\",{\"1\":{\"1029\":1}}],[\"表示一个持久的属性集\",{\"1\":{\"2297\":1}}],[\"表示一个值不存在\",{\"1\":{\"2247\":1}}],[\"表示一个时间\",{\"1\":{\"467\":1}}],[\"表示一旦执行到此关键字\",{\"1\":{\"927\":1}}],[\"表示string可以比较大小\",{\"1\":{\"878\":1}}],[\"表示字符串是支持序列化的\",{\"1\":{\"878\":1}}],[\"表示方法\",{\"0\":{\"871\":1}}],[\"表示换行符\",{\"1\":{\"854\":1}}],[\"表示参考的类和方法\",{\"1\":{\"812\":1}}],[\"表示指向当前的某一方法\",{\"1\":{\"810\":1}}],[\"表示从以下版本开始有这个类\",{\"1\":{\"811\":1}}],[\"表示从键盘获取输入的内容\",{\"1\":{\"638\":1,\"759\":1}}],[\"表示从该索引处开始找\",{\"1\":{\"408\":1}}],[\"表示o1\",{\"1\":{\"506\":1}}],[\"表示切片最多不超过limit个\",{\"1\":{\"434\":1,\"744\":1,\"753\":1}}],[\"表示舍去前面n个字符后\",{\"1\":{\"414\":1}}],[\"表示存储空间\",{\"1\":{\"172\":1}}],[\"表示时间间隔\",{\"1\":{\"171\":1}}],[\"表示\",{\"1\":{\"123\":1,\"737\":1,\"1100\":1,\"1288\":2}}],[\"表示注释\",{\"1\":{\"122\":1}}],[\"切换到authentication选项卡\",{\"1\":{\"3221\":1}}],[\"切换到admin库\",{\"1\":{\"3050\":1}}],[\"切换其他备份服务器做主库\",{\"1\":{\"3125\":1}}],[\"切换成jedis客户端技术\",{\"0\":{\"292\":1}}],[\"切换成阿里云的源\",{\"1\":{\"280\":1}}],[\"切换阿里云镜像\",{\"1\":{\"73\":1}}],[\"换句话说\",{\"1\":{\"1047\":1,\"1250\":1,\"2750\":1}}],[\"换用com\",{\"1\":{\"278\":1}}],[\"换行\",{\"1\":{\"253\":1,\"1873\":1}}],[\"弃用com\",{\"1\":{\"278\":1}}],[\"zxvf\",{\"1\":{\"3047\":1}}],[\"z是修正版本号\",{\"1\":{\"3040\":1}}],[\"zhangyuhao\",{\"1\":{\"2365\":1}}],[\"zhangsan\",{\"1\":{\"124\":3,\"2624\":1}}],[\"z\",{\"1\":{\"1180\":1,\"3040\":1}}],[\"zzz\",{\"1\":{\"835\":1}}],[\"zero\",{\"1\":{\"530\":2}}],[\"zoneoffset\",{\"1\":{\"477\":2}}],[\"zone\",{\"1\":{\"462\":1}}],[\"zoneddatetime\",{\"1\":{\"461\":1}}],[\"zone=+8\",{\"1\":{\"277\":1}}],[\"zip\",{\"1\":{\"302\":1,\"2733\":1,\"2858\":1}}],[\"勾选great\",{\"1\":{\"2489\":1}}],[\"勾选sql\",{\"1\":{\"270\":1}}],[\"勾选依赖时无法指定版本\",{\"1\":{\"78\":1}}],[\"写两份几乎一样的代码\",{\"1\":{\"2613\":1}}],[\"写操作\",{\"1\":{\"1969\":1}}],[\"写成8个无符号整数\",{\"1\":{\"1933\":1}}],[\"写完后\",{\"1\":{\"1890\":1}}],[\"写数据\",{\"1\":{\"1823\":1}}],[\"写文件\",{\"1\":{\"1773\":1,\"1881\":1}}],[\"写文档注释时要按照一定的格式来写\",{\"1\":{\"808\":1}}],[\"写\",{\"1\":{\"1456\":1,\"1792\":2,\"1822\":1,\"1889\":1}}],[\"写在配置文件的url后面\",{\"1\":{\"2375\":1}}],[\"写在方法的声明处\",{\"1\":{\"1350\":1}}],[\"写在哪是一个问题\",{\"1\":{\"265\":1}}],[\"写一些执行的代码\",{\"1\":{\"1276\":1}}],[\"写入关注的写入\",{\"1\":{\"3127\":1}}],[\"写入finally语句块\",{\"1\":{\"1535\":1}}],[\"写入byte\",{\"1\":{\"577\":2}}],[\"写入字节\",{\"1\":{\"577\":1}}],[\"写入字符串\",{\"1\":{\"576\":1}}],[\"写入字符数组\",{\"1\":{\"576\":1}}],[\"写入string的一部分\",{\"1\":{\"576\":1}}],[\"写入string\",{\"1\":{\"576\":1}}],[\"写入char\",{\"1\":{\"576\":3}}],[\"写入cbuf或str的某一部分\",{\"1\":{\"576\":1}}],[\"写入unicode\",{\"1\":{\"576\":2}}],[\"写入len个字符\",{\"1\":{\"576\":1}}],[\"写入\",{\"1\":{\"576\":1,\"1886\":2}}],[\"写入0~255字节数据\",{\"1\":{\"577\":1}}],[\"写入0\",{\"1\":{\"576\":1}}],[\"写入指定文件名\",{\"1\":{\"574\":2,\"575\":2}}],[\"写入指定文件\",{\"1\":{\"574\":2,\"575\":2}}],[\"写入速度优化\",{\"1\":{\"57\":1}}],[\"写出需要的功能\",{\"1\":{\"2133\":1}}],[\"写出流\",{\"1\":{\"1969\":1}}],[\"写出数据\",{\"1\":{\"1833\":1}}],[\"写出速度\",{\"1\":{\"1825\":1}}],[\"写出的操作\",{\"1\":{\"1816\":1}}],[\"写出\",{\"0\":{\"1829\":1,\"1831\":1},\"1\":{\"572\":1,\"1821\":1,\"1833\":2,\"1836\":1,\"1875\":1}}],[\"写业务代码\",{\"1\":{\"310\":1}}],[\"任一一个功能的执行就是一个进程\",{\"1\":{\"1440\":1}}],[\"任务管理器\",{\"1\":{\"1243\":1}}],[\"任务分配\",{\"1\":{\"22\":1}}],[\"任何格式的数据\",{\"1\":{\"2842\":1}}],[\"任何地方都能获取\",{\"1\":{\"2689\":1}}],[\"任何地方都可以保存\",{\"1\":{\"2689\":1}}],[\"任何对原始对象的调用都要通过代理\",{\"1\":{\"2072\":1}}],[\"任何以前写入的数据都将被发送\",{\"1\":{\"1966\":1}}],[\"任何一个类的对象\",{\"1\":{\"1511\":1}}],[\"任何\",{\"1\":{\"1430\":1}}],[\"任何情况下\",{\"1\":{\"1180\":1}}],[\"任何引用数据类型\",{\"1\":{\"1022\":1}}],[\"任何基本数据类型+string类型都会转为string类型\",{\"1\":{\"1197\":1}}],[\"任何基本数据类型\",{\"1\":{\"1022\":1}}],[\"任何元素访问前必须初始化\",{\"1\":{\"990\":1}}],[\"任何技术通常都会有一些相关的设置信息\",{\"1\":{\"265\":1}}],[\"任意大小的数据\",{\"1\":{\"2827\":1}}],[\"任意匹配\",{\"0\":{\"2577\":1}}],[\"任意\",{\"1\":{\"2573\":1,\"2575\":1,\"2576\":1,\"2577\":1}}],[\"任意精度的有符号十进制定点数\",{\"1\":{\"530\":1}}],[\"任意一个包装类\",{\"1\":{\"524\":1}}],[\"任意区间随机数公式\",{\"1\":{\"513\":1}}],[\"第五个实现类\",{\"1\":{\"1662\":1}}],[\"第四个实现类\",{\"1\":{\"1662\":1}}],[\"第11次添加数据\",{\"1\":{\"1619\":1}}],[\"第5个文件就需要排队了\",{\"1\":{\"1444\":1}}],[\"第2~8个bit表示e指数\",{\"1\":{\"849\":1}}],[\"第一次创建session时\",{\"1\":{\"2820\":1}}],[\"第一次访问时创建servlet对象\",{\"1\":{\"2546\":1}}],[\"第一次调用add\",{\"1\":{\"1621\":1}}],[\"第一种\",{\"1\":{\"1285\":1}}],[\"第一种把<root\",{\"1\":{\"262\":1}}],[\"第一个添加的用户\",{\"1\":{\"3198\":1}}],[\"第一个查询条件\",{\"1\":{\"2935\":1}}],[\"第一个参数设置为null\",{\"1\":{\"2386\":1}}],[\"第一个参数是要设置的\",{\"1\":{\"2321\":1,\"2322\":1}}],[\"第一个形参是方法引用中的方法的调用者\",{\"1\":{\"2152\":1}}],[\"第一个实现类\",{\"1\":{\"1662\":1}}],[\"第一个访问某项资源的任务必须锁定这项资源\",{\"1\":{\"1524\":1}}],[\"第一个内层数组的长度\",{\"1\":{\"991\":1}}],[\"第一个bit表示正负\",{\"1\":{\"849\":1}}],[\"第一个单词首字母小写\",{\"1\":{\"835\":1}}],[\"第一个表示键的类型\",{\"1\":{\"708\":1}}],[\"第一代\",{\"1\":{\"772\":1}}],[\"第三列倒排索引包含的信息为\",{\"1\":{\"2880\":1}}],[\"第三个添加的用户\",{\"1\":{\"3198\":1}}],[\"第三个\",{\"1\":{\"1863\":1}}],[\"第三个实现类\",{\"1\":{\"1662\":1}}],[\"第三代\",{\"1\":{\"772\":1}}],[\"第三次引入的api是成功的\",{\"1\":{\"461\":1}}],[\"第三方工具对拷\",{\"0\":{\"2647\":1}}],[\"第三方o\",{\"1\":{\"2278\":1}}],[\"第三方jar包\",{\"0\":{\"1921\":1}}],[\"第三方api\",{\"0\":{\"334\":1},\"1\":{\"336\":1}}],[\"第三方bean属性\",{\"0\":{\"155\":1}}],[\"第二种\",{\"1\":{\"1285\":1}}],[\"第二种就是单独给mapper下目录配置debug模式\",{\"1\":{\"262\":1}}],[\"第二代\",{\"1\":{\"772\":1}}],[\"第二个添加的用户\",{\"1\":{\"3198\":1}}],[\"第二个查询条件\",{\"1\":{\"2935\":1}}],[\"第二个是设置的\",{\"1\":{\"2321\":1,\"2322\":1}}],[\"第二个问题是如何才能区别unicode和ascii\",{\"1\":{\"1863\":1}}],[\"第二个实现类\",{\"1\":{\"1662\":1}}],[\"第二个单词开始每个单词首字母大写\",{\"1\":{\"835\":1}}],[\"第二个表示值的类型\",{\"1\":{\"708\":1}}],[\"第二个参数默认是\",{\"1\":{\"534\":1}}],[\"第二个参数toffset\",{\"1\":{\"414\":1}}],[\"第二个参数可选\",{\"1\":{\"408\":1}}],[\"那就需要将pattern与matcher一起合作\",{\"1\":{\"750\":1}}],[\"那么忽略他是副本集\",{\"1\":{\"3219\":1}}],[\"那么tieba\",{\"1\":{\"2809\":1}}],[\"那么treeset的构造函数需要传入参数\",{\"1\":{\"1658\":1}}],[\"那么多个服务器之间cookie可以共享setdomain\",{\"1\":{\"2809\":1}}],[\"那么多个类无需再定义这些属性和行为\",{\"1\":{\"1111\":1}}],[\"那么我们以后按照要求将不同层的代码写在不同的包下\",{\"1\":{\"2764\":1}}],[\"那么我们就可以从内存中\",{\"1\":{\"2039\":1}}],[\"那么在\",{\"1\":{\"2576\":1}}],[\"那么在路径的前面就必须要加\",{\"1\":{\"2576\":1}}],[\"那么在实现类没有重写此方法的情况下\",{\"1\":{\"1269\":1}}],[\"那么第一个访问的人等待的时间就比较长\",{\"1\":{\"2546\":1}}],[\"那么该方法将什么都不返回\",{\"1\":{\"2597\":1}}],[\"那么该异常需要在目标接口的抽象方法上进行声明\",{\"1\":{\"2141\":1}}],[\"那么该变量就不能再访问子类中添加的属性和方法\",{\"1\":{\"1151\":1}}],[\"那么类所属的类就是class类\",{\"1\":{\"2012\":1}}],[\"那么user\",{\"1\":{\"1767\":1}}],[\"那么必须有一个file对象\",{\"1\":{\"1762\":1}}],[\"那么方法参数类型是e的方法\",{\"1\":{\"1730\":1}}],[\"那么方法体中可以不必使用return语句\",{\"1\":{\"1033\":1}}],[\"那么为什么要有泛型呢\",{\"1\":{\"1701\":1}}],[\"那么hashcode一定相同\",{\"1\":{\"1650\":1}}],[\"那么当集合中的数据过多时\",{\"1\":{\"1641\":1}}],[\"那么当前logger将会继承上级的级别\",{\"1\":{\"262\":1}}],[\"那么所有实现了collection接口的集合类都有一个iterator\",{\"1\":{\"1588\":1}}],[\"那么所定义的注解可以用于任何地方\",{\"1\":{\"1414\":1}}],[\"那么一个线程拿到锁\",{\"1\":{\"1514\":1}}],[\"那么编译器都为我们做了什么呢\",{\"1\":{\"1455\":1}}],[\"那么value名称是不能呢省略的\",{\"1\":{\"1399\":1}}],[\"那么注解仅起到标识的作用\",{\"1\":{\"1399\":1}}],[\"那么应该对代码进行排查\",{\"1\":{\"1356\":1}}],[\"那么变量保存的其实是值所在内存的内存地址\",{\"1\":{\"1306\":1}}],[\"那么只是将值复制给另一个变量\",{\"1\":{\"1306\":1}}],[\"那么就可以继续调用该对象的方法\",{\"1\":{\"1294\":1}}],[\"那么子类在没有重写此方法的情况下\",{\"1\":{\"1269\":1}}],[\"那么整个内部的完整结构最好使用内部类\",{\"1\":{\"1202\":1,\"1213\":1}}],[\"那么经过大小写的转换只要是true\",{\"1\":{\"1193\":1}}],[\"那么z\",{\"1\":{\"1180\":1}}],[\"那么y\",{\"1\":{\"1180\":1}}],[\"那么\",{\"1\":{\"1180\":1}}],[\"那么如果该方法适用很多类\",{\"1\":{\"1152\":1}}],[\"那么参数就必须传递该类生成的对象\",{\"1\":{\"1152\":1}}],[\"那么优先选择三元运算符\",{\"1\":{\"915\":1}}],[\"那么右边不参与运算\",{\"1\":{\"905\":1}}],[\"那么调用者是类或者null也可以\",{\"1\":{\"626\":1,\"2066\":1}}],[\"那么可以考虑使用\",{\"1\":{\"504\":1}}],[\"那么重新执行查询操作\",{\"1\":{\"371\":1}}],[\"那对应的操作方式自然也有所不同\",{\"1\":{\"265\":1}}],[\"那对logback很快就会得心应手\",{\"1\":{\"260\":1}}],[\"那整合将毫无意义\",{\"1\":{\"265\":1}}],[\"则使用默认主节点配置\",{\"1\":{\"3152\":1}}],[\"则使用该方法\",{\"1\":{\"2606\":1,\"2607\":1}}],[\"则索引首先按userid正序排序\",{\"1\":{\"3106\":1}}],[\"则更新一个文档\",{\"1\":{\"3081\":1}}],[\"则更新符合查询条件的多个文档\",{\"1\":{\"3081\":1}}],[\"则主键就是该值\",{\"1\":{\"3077\":1}}],[\"则继续处理数组中的主文档\",{\"1\":{\"3072\":1}}],[\"则执行无序插入\",{\"1\":{\"3072\":1}}],[\"则按顺序插入数组中的文档\",{\"1\":{\"3072\":1}}],[\"则按照声明的先后顺序执行\",{\"1\":{\"1279\":1,\"1280\":1}}],[\"则相当于表的行\",{\"1\":{\"2865\":1}}],[\"则会隐式创建\",{\"1\":{\"3074\":1}}],[\"则会自动创建集合\",{\"1\":{\"3067\":1}}],[\"则会话就会持续建立着\",{\"1\":{\"2785\":1}}],[\"则会进入到doget方法中进行执行\",{\"1\":{\"2566\":1}}],[\"则服务器会销毁该session\",{\"1\":{\"2676\":1}}],[\"则进入到dopost方法\",{\"1\":{\"2566\":1}}],[\"则进入相应case结构中\",{\"1\":{\"927\":1}}],[\"则将来访问tomcat时\",{\"1\":{\"2457\":1}}],[\"则回滚事务\",{\"1\":{\"2387\":1}}],[\"则提交事务\",{\"1\":{\"2387\":1}}],[\"则无法保证事务\",{\"1\":{\"2383\":1}}],[\"则整体返回true\",{\"1\":{\"2229\":1}}],[\"则写法与构造器引用一致\",{\"1\":{\"2181\":1}}],[\"则先会初始化它的父类\",{\"1\":{\"2029\":1}}],[\"则先去判断hash值是否相同\",{\"1\":{\"1642\":1}}],[\"则接受连接\",{\"1\":{\"1973\":1}}],[\"则建立客户端到服务器的通信线路\",{\"1\":{\"1969\":1}}],[\"则流将返回\",{\"1\":{\"1966\":1}}],[\"则目录下的同名文件不会被覆盖\",{\"1\":{\"1797\":1}}],[\"则目录下有同名文件将被覆盖\",{\"1\":{\"1797\":1}}],[\"则与已经存在指定索引位置上数据以链表的方式存储\",{\"1\":{\"1644\":1}}],[\"则需要在mongodb实例启动时使用选项\",{\"1\":{\"3180\":1}}],[\"则需要使用投影查询\",{\"1\":{\"3093\":1}}],[\"则需要使用输入\",{\"1\":{\"1761\":1}}],[\"则需要先触发其父类的初始化\",{\"1\":{\"2028\":1}}],[\"则需要调用a所在类的equals方法\",{\"1\":{\"1643\":1}}],[\"则需要运算时就进行类型转换\",{\"1\":{\"891\":1}}],[\"则扩容\",{\"1\":{\"1619\":1}}],[\"则其子类将自动具有该注解\",{\"1\":{\"1416\":1}}],[\"则该流将抛出\",{\"1\":{\"1966\":1}}],[\"则该对象的类必须实现\",{\"1\":{\"1639\":1}}],[\"则该方法不再被建议使用\",{\"1\":{\"1425\":1}}],[\"则该\",{\"1\":{\"1405\":1}}],[\"则该class必须有main方法\",{\"1\":{\"803\":1}}],[\"则有以下注意点\",{\"1\":{\"1649\":1}}],[\"则有\",{\"1\":{\"1404\":1}}],[\"则在列出枚举值时也必须对应的传入参数\",{\"1\":{\"1371\":1}}],[\"则子类重写的方法也不能使用throws\",{\"1\":{\"1355\":1}}],[\"则子类重写的方法的返回值类型必须是相同的基本数据类型\",{\"1\":{\"1125\":1}}],[\"则子类重写的方法的返回值类型可以是a类或a类的子类\",{\"1\":{\"1125\":1}}],[\"则子类重写的方法的返回值类型只能是void\",{\"1\":{\"1125\":1}}],[\"则程序运行终止\",{\"1\":{\"1351\":1}}],[\"则要求子类一定声明在父类的上面\",{\"1\":{\"1346\":1}}],[\"则谁声明在上\",{\"1\":{\"1346\":1}}],[\"则get\",{\"1\":{\"1282\":1}}],[\"则只能被static修饰\",{\"1\":{\"1278\":1}}],[\"则此方法应显示地声明抛出异常\",{\"1\":{\"1349\":1}}],[\"则此实现类就可以实例化\",{\"1\":{\"1262\":1}}],[\"则此类继承于java\",{\"1\":{\"1116\":1}}],[\"则静态变量在内存中也只会存在一份\",{\"1\":{\"1229\":1}}],[\"则这样的方法通常被声明为类方法\",{\"1\":{\"1224\":1}}],[\"则类a就是内部类\",{\"1\":{\"1201\":1}}],[\"则调用string重新的equals判断两个name是否相等\",{\"1\":{\"1180\":1}}],[\"则默认的当前路径在系统属性user\",{\"1\":{\"1767\":1}}],[\"则默认父类为java\",{\"1\":{\"1175\":1}}],[\"则默认调用的是父类中空参的构造器\",{\"1\":{\"1138\":1}}],[\"则\",{\"1\":{\"1168\":1}}],[\"则编译报错\",{\"1\":{\"1140\":1}}],[\"则必须先与url建立连接\",{\"1\":{\"1992\":1}}],[\"则必须有一个被迭代的集合\",{\"1\":{\"1589\":1}}],[\"则必须能处理掉子类的异常\",{\"1\":{\"1354\":1}}],[\"则必须能\",{\"1\":{\"1258\":1}}],[\"则必须显式的使用\",{\"1\":{\"1134\":1}}],[\"则必须显式的使用super\",{\"1\":{\"1133\":1}}],[\"则必须至少有一个类需要以全类名的方式显示\",{\"1\":{\"1096\":1}}],[\"则仍需要显式导入\",{\"1\":{\"1097\":1}}],[\"则仍然继续向下执行其他case结构中的执行语句\",{\"1\":{\"927\":1}}],[\"则可以将path设置为\",{\"1\":{\"2808\":1}}],[\"则可以让每个枚举值分别来实现该方法\",{\"1\":{\"1380\":1}}],[\"则可以作为单例模式的实现方式\",{\"1\":{\"1371\":1}}],[\"则可以通过在应用启动时直接产生一个单例对象\",{\"1\":{\"1239\":1}}],[\"则可以省略import结构\",{\"1\":{\"1094\":2}}],[\"则可以标记多个\",{\"1\":{\"811\":1}}],[\"则并列写出即可\",{\"1\":{\"1094\":1}}],[\"则指定为无名包\",{\"1\":{\"1088\":1}}],[\"则最多有\",{\"1\":{\"1082\":1}}],[\"则系统会通过如下三个步骤来对该类进行初始化\",{\"1\":{\"2025\":1}}],[\"则系统不再提供默认构造器\",{\"1\":{\"1073\":1}}],[\"则系统默认提供一个空参的构造器\",{\"1\":{\"1072\":1}}],[\"则方法声明时\",{\"1\":{\"1029\":1}}],[\"则不要创建root超管用户\",{\"1\":{\"3194\":1}}],[\"则不要合并\",{\"1\":{\"1352\":1}}],[\"则不会插入新文档\",{\"1\":{\"3081\":1}}],[\"则不会有泛型限制\",{\"1\":{\"656\":1}}],[\"则不影响另外一个对象属性a的值\",{\"1\":{\"1013\":1}}],[\"则每个对象都独立的拥有一套类的属性\",{\"1\":{\"1013\":1}}],[\"则是死循环\",{\"1\":{\"931\":1}}],[\"则退出\",{\"1\":{\"931\":1}}],[\"则变负数\",{\"1\":{\"909\":1}}],[\"则取默认的int型\",{\"1\":{\"868\":1}}],[\"则取决于系统中垃圾回收算法的实现以及系统执行时的情况\",{\"1\":{\"635\":1}}],[\"则文件名必须与类名一样\",{\"1\":{\"798\":1}}],[\"则为修改值\",{\"1\":{\"972\":1}}],[\"则为修改\",{\"1\":{\"711\":1}}],[\"则为修改value\",{\"1\":{\"711\":1}}],[\"则立即将它们写入预期目标\",{\"1\":{\"578\":1}}],[\"则结果为偶数\",{\"1\":{\"536\":1}}],[\"则表示o1\",{\"1\":{\"506\":1}}],[\"则返回一个空流\",{\"1\":{\"2213\":1}}],[\"则返回0\",{\"1\":{\"1966\":1}}],[\"则返回值\",{\"1\":{\"565\":1,\"566\":1}}],[\"则返回null\",{\"1\":{\"543\":1,\"713\":1,\"1985\":1}}],[\"则返回零\",{\"1\":{\"497\":1}}],[\"则返回负整数\",{\"1\":{\"497\":1}}],[\"则返回正整数\",{\"1\":{\"497\":1}}],[\"则返回\",{\"1\":{\"408\":1,\"565\":1,\"566\":1,\"570\":1,\"1966\":2,\"1985\":1,\"2323\":2}}],[\"则后面其他位置即使配置了debug级别的日志\",{\"1\":{\"262\":1}}],[\"则低于warn的信息都不会输出\",{\"1\":{\"262\":1}}],[\"|grep\",{\"1\":{\"3049\":1}}],[\"||表示\",{\"1\":{\"905\":1}}],[\"||\",{\"1\":{\"903\":1,\"905\":1,\"1870\":1}}],[\"|\",{\"1\":{\"262\":5,\"903\":1,\"905\":1,\"1323\":13,\"3145\":1}}],[\"|findstr\",{\"1\":{\"202\":2}}],[\"白色\",{\"1\":{\"262\":1}}],[\"青色\",{\"1\":{\"262\":1}}],[\"粗红\",{\"1\":{\"262\":1}}],[\"洋红\",{\"1\":{\"262\":2}}],[\"彩色日志格式\",{\"1\":{\"262\":1}}],[\"彩色日志\",{\"1\":{\"262\":1}}],[\"来帮你完成\",{\"1\":{\"3232\":1}}],[\"来管理用户对实例的访问\",{\"1\":{\"3182\":1}}],[\"来设置额外票数\",{\"1\":{\"3173\":1}}],[\"来查看索引\",{\"1\":{\"2887\":1}}],[\"来定义session的有效时间\",{\"1\":{\"2822\":1}}],[\"来同时配置多个值\",{\"1\":{\"2703\":1}}],[\"来通信\",{\"1\":{\"2680\":1}}],[\"来获取具体的key\",{\"1\":{\"2796\":1}}],[\"来获取数据\",{\"1\":{\"2755\":1}}],[\"来获取流中的数据\",{\"1\":{\"2628\":1}}],[\"来获取对应的值\",{\"1\":{\"2599\":1}}],[\"来调用的\",{\"1\":{\"2589\":1}}],[\"来调用具体的功能结构\",{\"1\":{\"1005\":1}}],[\"来手动实现server方法\",{\"1\":{\"2566\":1}}],[\"来作参数的构造器\",{\"1\":{\"2435\":1}}],[\"来说\",{\"1\":{\"2394\":1}}],[\"来储存查询到的数据\",{\"1\":{\"2351\":1}}],[\"来检索结果\",{\"1\":{\"2323\":1}}],[\"来隐藏第三方api\",{\"1\":{\"2298\":1}}],[\"来并行执行操作\",{\"1\":{\"2188\":1}}],[\"来包含通用操作\",{\"1\":{\"2101\":1}}],[\"来包含属性\",{\"1\":{\"1056\":1}}],[\"来操作内存中的类的一切元素\",{\"1\":{\"2014\":1}}],[\"来找到服务端\",{\"1\":{\"1975\":1}}],[\"来表示\",{\"1\":{\"1764\":2,\"2321\":1,\"2420\":1}}],[\"来创建多线程\",{\"1\":{\"1559\":1}}],[\"来控制线程\",{\"1\":{\"1527\":1}}],[\"来解决线程的安全问题\",{\"1\":{\"1508\":1}}],[\"来指定排序的方式\",{\"1\":{\"3097\":1}}],[\"来指定集合保存的类型\",{\"1\":{\"1430\":1}}],[\"来指定编码的字符集\",{\"1\":{\"426\":1}}],[\"来了\",{\"1\":{\"1382\":1}}],[\"来实现调用被代理类方法的方法\",{\"1\":{\"2092\":1}}],[\"来实现一个多线程断点下载的功能\",{\"1\":{\"1892\":1}}],[\"来实现人为的不限制次数的循环\",{\"1\":{\"938\":1}}],[\"来实例化一个匿名类\",{\"1\":{\"1249\":1}}],[\"来跳出指定标识的循环\",{\"1\":{\"946\":1}}],[\"来将其后的字符转变为特殊字符型常量\",{\"1\":{\"854\":1}}],[\"来启动\",{\"1\":{\"783\":1}}],[\"来启用\",{\"1\":{\"749\":1}}],[\"来进行格式化\",{\"1\":{\"486\":1}}],[\"来使用变量\",{\"1\":{\"262\":1}}],[\"来覆盖源码中设定的属性\",{\"1\":{\"184\":1}}],[\"此输出使用从副本集的其他成员发送的心跳包中获得的数据反映副本集的当前状态\",{\"1\":{\"3155\":1}}],[\"此运行时类\",{\"1\":{\"2013\":1}}],[\"此过程就称为类的加载\",{\"1\":{\"2013\":1}}],[\"此数据报将要发往该主机或者是从该主机接收到的\",{\"1\":{\"1986\":1}}],[\"此数据报将要发往该机器或者是从该机器接收到的\",{\"1\":{\"1986\":1}}],[\"此方法也就作为了被代理类对象要调用的方法\",{\"1\":{\"2095\":1}}],[\"此方法在接收到数据报前一直阻塞\",{\"1\":{\"1985\":1}}],[\"此方法不同于集合直接调用remove\",{\"1\":{\"678\":1,\"1600\":1}}],[\"此套接字连接到的远程端口号\",{\"1\":{\"1966\":1}}],[\"此套接字连接到的远程\",{\"1\":{\"1966\":1}}],[\"此类执行效率高于hashmap\",{\"1\":{\"1665\":1}}],[\"此类不能被其他类所继承\",{\"1\":{\"1101\":1}}],[\"此哈希值经过某种算法计算以后\",{\"1\":{\"1674\":1}}],[\"此哈希值\",{\"1\":{\"1643\":1}}],[\"此外\",{\"1\":{\"1417\":1,\"3103\":1}}],[\"此对象满足throws后异常类型时\",{\"1\":{\"1350\":1}}],[\"此对象也必须声明为static的\",{\"1\":{\"1241\":1,\"1521\":1}}],[\"此子类方可实例化\",{\"1\":{\"1247\":1}}],[\"此处将列举jdk所有内置的函数式接口\",{\"1\":{\"724\":1}}],[\"此处使用的是redistemplate\",{\"1\":{\"288\":1}}],[\"此处设置字符集\",{\"1\":{\"262\":2}}],[\"此日志文件只记录error级别的\",{\"1\":{\"262\":1}}],[\"此日志文件只记录warn级别的\",{\"1\":{\"262\":1}}],[\"此日志文件只记录info级别的\",{\"1\":{\"262\":1}}],[\"此日志appender是为开发使用\",{\"1\":{\"262\":1}}],[\"此属性生效\",{\"1\":{\"262\":1}}],[\"此时再启动服务\",{\"1\":{\"3203\":1}}],[\"此时执行\",{\"1\":{\"3159\":1}}],[\"此时只有一个\",{\"1\":{\"3154\":1,\"3157\":1}}],[\"此时只能使用post请求\",{\"1\":{\"2903\":1}}],[\"此时已经可以读到数据库了\",{\"1\":{\"3150\":1}}],[\"此时默认不能读写\",{\"1\":{\"3150\":1}}],[\"此时请求体的格式是固定的\",{\"1\":{\"2911\":1}}],[\"此时既可以使用post请求\",{\"1\":{\"2903\":1}}],[\"此时重复发送请求\",{\"1\":{\"2902\":1}}],[\"此时注意过滤器执行的顺序\",{\"1\":{\"2704\":1}}],[\"此时放行前的逻辑不会再执行了\",{\"1\":{\"2700\":1}}],[\"此时无法取值\",{\"1\":{\"2672\":1}}],[\"此时可以取到值\",{\"1\":{\"2672\":1}}],[\"此时可以解析特殊字符了\",{\"1\":{\"123\":1}}],[\"此时我们需要分别在doget方法和dopost方法中\",{\"1\":{\"2613\":1}}],[\"此时我们将永远无法操作该对象\",{\"1\":{\"1457\":1}}],[\"此时连接的初始化工作均已完成\",{\"1\":{\"2419\":1}}],[\"此时又获取了要调用的方法和参数列表\",{\"1\":{\"2097\":1}}],[\"此时发生了如下事情\",{\"1\":{\"2097\":1}}],[\"此时客户端与服务端连接成功\",{\"1\":{\"1978\":1}}],[\"此时服务端将一直处于监听状态\",{\"1\":{\"1978\":1}}],[\"此时参数类型变为string\",{\"1\":{\"1720\":1}}],[\"此时应将多个参数一起放在尖括号内\",{\"1\":{\"1715\":1}}],[\"此时应执行resize扩容操作这个\",{\"1\":{\"1680\":1}}],[\"此时应比较key1和已经存在的一个或多个数据的哈希值\",{\"1\":{\"1674\":1}}],[\"此时此索引位置上的所数据改为使用红黑树存储\",{\"1\":{\"1678\":1}}],[\"此时key1\",{\"1\":{\"1674\":2,\"1675\":1}}],[\"此时两个进程陷入死锁状态\",{\"1\":{\"1542\":1}}],[\"此时synchronized变成上锁状态\",{\"1\":{\"1523\":1}}],[\"此时sort方法将按照重写的compare进行排序\",{\"1\":{\"505\":1}}],[\"此时它已具备了运行的条件\",{\"1\":{\"1501\":1}}],[\"此时线程a就进入阻塞状态\",{\"1\":{\"1479\":1,\"1481\":1}}],[\"此时这种对象就是一个垃圾\",{\"1\":{\"1457\":1}}],[\"此时常量名要大写\",{\"1\":{\"1103\":1}}],[\"此时的请求链接为\",{\"1\":{\"2902\":1}}],[\"此时的文件默认在当前的module下\",{\"1\":{\"2034\":1}}],[\"此时的key1\",{\"1\":{\"1674\":1}}],[\"此时的存储\",{\"1\":{\"1572\":1}}],[\"此时的资源释放\",{\"1\":{\"1342\":1}}],[\"此时的\",{\"1\":{\"1103\":1}}],[\"此时的字符串值声明在字符串常量池中\",{\"1\":{\"877\":1}}],[\"此时实参赋给形参的是实参存储数据的地址值\",{\"1\":{\"1045\":1}}],[\"此时内存中有1个数组\",{\"1\":{\"1018\":1}}],[\"此时内层循环的循环体一共执行了m\",{\"1\":{\"952\":1}}],[\"此时变成了\",{\"1\":{\"866\":1}}],[\"此时字符\",{\"1\":{\"749\":1}}],[\"此时每行都能单独匹配^或$\",{\"1\":{\"749\":1}}],[\"此时指针指向1\",{\"1\":{\"678\":1}}],[\"此时使用collection接口的方法就会被泛型类型限制了\",{\"1\":{\"656\":1}}],[\"此时就会执行放行后的逻辑\",{\"1\":{\"2700\":1}}],[\"此时就变成类调用该方法了\",{\"1\":{\"1519\":1}}],[\"此时就需要指定一个舍入策略\",{\"1\":{\"535\":1}}],[\"此时就必须手动指定配置类了\",{\"1\":{\"183\":1}}],[\"此时不会产生新的对象\",{\"1\":{\"438\":1}}],[\"此时该对象已经包含了各种信息\",{\"1\":{\"351\":1}}],[\"此时需要使用urlconnection\",{\"1\":{\"1992\":1}}],[\"此时需要为\",{\"1\":{\"183\":1}}],[\"此时需要手动将该配置文件激活\",{\"1\":{\"119\":1}}],[\"此时\",{\"1\":{\"96\":1,\"985\":1,\"1096\":1,\"1506\":1,\"1728\":1,\"2872\":1,\"3160\":1}}],[\"从备份文件中还原恢复mongodb数据\",{\"1\":{\"3190\":1}}],[\"从节点是没有读写权限的\",{\"1\":{\"3169\":1}}],[\"从节点读写\",{\"0\":{\"3169\":1}}],[\"从节点\",{\"1\":{\"3165\":2}}],[\"从主节点通过复制操作以维护相同的数据集\",{\"1\":{\"3131\":1}}],[\"从权限的角度来看\",{\"1\":{\"3060\":1}}],[\"从中取出数据\",{\"1\":{\"2813\":1}}],[\"从浏览器发出请求到服务端响应数据给前端之后\",{\"1\":{\"2785\":1}}],[\"从浏览器发送\",{\"1\":{\"2667\":2}}],[\"从servletrequest中移除属性时调用\",{\"1\":{\"2719\":1}}],[\"从servletcontext中移除属性时调用\",{\"1\":{\"2717\":1}}],[\"从httpsession中移除属性时调用\",{\"1\":{\"2718\":1}}],[\"从请求中可以解析出三部分内容分别是`localhost\",{\"1\":{\"2537\":1}}],[\"从池子里拿出一个数据库连接\",{\"1\":{\"2427\":1}}],[\"从连接池拿出一个连接对象\",{\"1\":{\"2418\":1}}],[\"从数据表中读取blob类型字段\",{\"0\":{\"2365\":1}}],[\"从数组底层的运行机制来看\",{\"1\":{\"982\":1}}],[\"从嵌套集合生成的流中\",{\"1\":{\"2224\":1}}],[\"从班级对象集合中\",{\"1\":{\"2223\":1}}],[\"从学生对象集合中\",{\"1\":{\"2222\":1}}],[\"从一个流中获取新流\",{\"1\":{\"2215\":1}}],[\"从流中排除某些元素\",{\"1\":{\"2210\":1}}],[\"从官网直接下载安装即可\",{\"1\":{\"2105\":1}}],[\"从java\",{\"1\":{\"2103\":1}}],[\"从jdk1\",{\"1\":{\"1700\":1}}],[\"从jdk\",{\"1\":{\"1530\":1}}],[\"从jdk5\",{\"1\":{\"1386\":1}}],[\"从键盘输入字符串\",{\"1\":{\"1870\":1}}],[\"从键盘读入个数不确定的整数\",{\"1\":{\"938\":1}}],[\"从文件中\",{\"1\":{\"1834\":1}}],[\"从文件系统中的某个文件中获得输出字节\",{\"1\":{\"1787\":1}}],[\"从文件系统中的某个文件中获得输入字节\",{\"1\":{\"1784\":1}}],[\"从\",{\"1\":{\"1582\":1,\"2321\":1,\"2322\":1,\"3127\":1,\"3128\":1,\"3130\":1}}],[\"从本质上讲\",{\"1\":{\"1254\":1}}],[\"从过程上看\",{\"0\":{\"1144\":1}}],[\"从结果上看\",{\"0\":{\"1143\":1}}],[\"从实体中寻找解决问题相关的属性和功能\",{\"1\":{\"1004\":1}}],[\"从大到小排序\",{\"1\":{\"684\":1}}],[\"从而使多台机器拥有同一数据的多个副本\",{\"1\":{\"3125\":1}}],[\"从而使众多的计算机可以方便地互相传递信息\",{\"1\":{\"1924\":1}}],[\"从而实现将多个普通的请求对象\",{\"1\":{\"2985\":1}}],[\"从而实现断点下载或上传的功能\",{\"1\":{\"1892\":1}}],[\"从而避免了常规数据库连接操作中可能出现的资源泄露\",{\"1\":{\"2419\":1}}],[\"从而减少了系统的响应时间\",{\"1\":{\"2419\":1}}],[\"从而大大简化和加快了开发过程\",{\"1\":{\"2279\":1}}],[\"从而允许把这种二进制流持久地保存在磁盘上\",{\"1\":{\"1896\":1}}],[\"从而可以在声明集合变量\",{\"1\":{\"1700\":1}}],[\"从而可以解决多线程并发访问集合时的线程安全问题\",{\"1\":{\"681\":1}}],[\"从而创造了多个对象\",{\"1\":{\"1521\":1}}],[\"从而简化了方法的调用\",{\"1\":{\"1224\":1}}],[\"从而提高系统的可扩展性\",{\"1\":{\"1053\":1}}],[\"从而程序无法继续\",{\"1\":{\"581\":1,\"1834\":1}}],[\"从集合中删除指定的元素\",{\"1\":{\"664\":1}}],[\"从此套接字接收数据报包\",{\"1\":{\"1985\":1}}],[\"从此套接字发送数据报包\",{\"1\":{\"1985\":1}}],[\"从此扫描仪查找并返回下一个完整令牌\",{\"1\":{\"639\":1,\"760\":1}}],[\"从此输入流中将最多\",{\"1\":{\"566\":1}}],[\"从off开始\",{\"1\":{\"576\":1}}],[\"从off处开始读\",{\"1\":{\"570\":1}}],[\"从输入流中读取数据的下一个字节\",{\"1\":{\"565\":1}}],[\"从1开始算\",{\"1\":{\"455\":1}}],[\"从左开始算\",{\"1\":{\"455\":1}}],[\"从0开始步进\",{\"1\":{\"960\":1}}],[\"从0开始的自增数字\",{\"1\":{\"258\":1}}],[\"从0添加到两万\",{\"1\":{\"447\":1}}],[\"从第一个字符开始比较\",{\"1\":{\"412\":1}}],[\"从第几页开始查询\",{\"1\":{\"352\":1}}],[\"从该索引处反向搜索\",{\"1\":{\"409\":1}}],[\"从lib目录中查找\",{\"1\":{\"201\":1}}],[\"新密码\",{\"1\":{\"3200\":1}}],[\"新创建角色可以继承其他角色的权限\",{\"1\":{\"3184\":1}}],[\"新创建的角色会继承包含的角色所有的权限\",{\"1\":{\"3184\":1}}],[\"新应用\",{\"1\":{\"3028\":1}}],[\"新浪\",{\"1\":{\"2846\":1}}],[\"新stream已经是元素修改后的了\",{\"1\":{\"2215\":1}}],[\"新写入的内容会覆盖旧的内容\",{\"1\":{\"1889\":1}}],[\"新元素指向旧元素\",{\"1\":{\"1678\":1}}],[\"新生的线程对象处于新建状态\",{\"1\":{\"1501\":1}}],[\"新建的javaweb项目可能会出现未配置项目导出方式\",{\"1\":{\"2514\":1}}],[\"新建的module的sdk默认是project设置的sdk\",{\"1\":{\"2106\":1}}],[\"新建一个空project\",{\"1\":{\"2482\":1}}],[\"新建工程\",{\"0\":{\"2482\":1}}],[\"新建\",{\"1\":{\"1501\":1}}],[\"新建person\",{\"1\":{\"1432\":1}}],[\"新建日志文件的命名规则\",{\"1\":{\"258\":1}}],[\"新编译后的文件会覆盖原文件\",{\"1\":{\"792\":1}}],[\"新时间日期api包\",{\"0\":{\"462\":1}}],[\"新时间api介绍\",{\"0\":{\"461\":1}}],[\"新的值\",{\"1\":{\"2911\":1}}],[\"新的资源分配手段\",{\"1\":{\"2419\":1}}],[\"新的\",{\"1\":{\"461\":1}}],[\"新增文档\",{\"0\":{\"2980\":1},\"1\":{\"2980\":1}}],[\"新增了foreach循环\",{\"1\":{\"1602\":1}}],[\"新增\",{\"1\":{\"338\":1,\"399\":4}}],[\"新版的idea默认是没有program\",{\"1\":{\"212\":1}}],[\"难易读取\",{\"1\":{\"257\":1}}],[\"警示等各种附加功能的日志了\",{\"1\":{\"254\":1}}],[\"警告\",{\"1\":{\"214\":1,\"457\":1,\"2728\":1,\"2967\":1,\"3053\":1,\"3056\":1,\"3082\":1,\"3169\":1,\"3202\":1}}],[\"且都获得了\",{\"1\":{\"3172\":1}}],[\"且获得了\",{\"1\":{\"3172\":1}}],[\"且需要手动指定参数\",{\"1\":{\"3042\":1}}],[\"且常驻内存\",{\"1\":{\"2689\":1}}],[\"且共享数据成功\",{\"1\":{\"2655\":1}}],[\"且request提供的方法功能更强大\",{\"1\":{\"2615\":1}}],[\"且两种方法方式的代码逻辑都是一样的\",{\"1\":{\"2613\":1}}],[\"且两个方法的其他参数和返回值相同\",{\"1\":{\"2165\":1}}],[\"且采用默认值即可\",{\"1\":{\"2572\":1}}],[\"且他们都是数组\",{\"1\":{\"2570\":1}}],[\"且自动重写了doget和dopost\",{\"1\":{\"2540\":1}}],[\"且配置好了java\",{\"1\":{\"2455\":1}}],[\"且只能查询一行数据\",{\"1\":{\"2352\":1}}],[\"且只能被赋值一次\",{\"1\":{\"1104\":1}}],[\"且指针下移\",{\"1\":{\"2340\":1}}],[\"且其他形参和返回值类型相同\",{\"1\":{\"2152\":1}}],[\"且如果\",{\"1\":{\"2118\":1}}],[\"且增强的方式是一样\",{\"1\":{\"2086\":1}}],[\"且访问权限需要足够\",{\"1\":{\"2037\":1}}],[\"且麻烦\",{\"1\":{\"1698\":1}}],[\"且要存放的位置非空\",{\"1\":{\"1676\":1}}],[\"且不易阅读\",{\"1\":{\"2310\":1}}],[\"且不同的\",{\"1\":{\"1647\":1}}],[\"且不存在重复和过界的数字\",{\"1\":{\"1513\":1}}],[\"且可重复\",{\"1\":{\"1610\":1}}],[\"且可安装内容不止有jdk\",{\"1\":{\"787\":1}}],[\"且下一条记录无效\",{\"1\":{\"1597\":1}}],[\"且数字不是完全递减的\",{\"1\":{\"1509\":1}}],[\"且名称为value\",{\"1\":{\"1400\":1}}],[\"且有成员没有默认值\",{\"1\":{\"1399\":1}}],[\"且在使用注解时\",{\"1\":{\"1399\":1}}],[\"且该类不能再创建对象\",{\"1\":{\"1369\":1}}],[\"且该类在类路径下\",{\"1\":{\"588\":1,\"2020\":1}}],[\"且对象不可改变\",{\"1\":{\"1369\":1}}],[\"且确定的情况下\",{\"1\":{\"1368\":1}}],[\"且会在return之前执行\",{\"1\":{\"1343\":1}}],[\"且后缀都是\",{\"1\":{\"1295\":1}}],[\"且父类中又没有无参的构造器\",{\"1\":{\"1140\":1}}],[\"且最好\",{\"1\":{\"1089\":1}}],[\"且没有执行效率的差别\",{\"1\":{\"937\":1}}],[\"且同一个switch语句\",{\"1\":{\"927\":1}}],[\"且运算只能是连接运算\",{\"1\":{\"886\":1}}],[\"且取完数据后\",{\"1\":{\"677\":1,\"1592\":1}}],[\"且close操作要方法其他异常的finally中\",{\"1\":{\"571\":1}}],[\"且目标位置不能在硬盘中存在\",{\"1\":{\"560\":1}}],[\"且这三个类具有不可变性\",{\"1\":{\"465\":1}}],[\"且具有不可变性\",{\"1\":{\"464\":1}}],[\"且默认有16个长度\",{\"1\":{\"445\":1}}],[\"且是final不可变的\",{\"1\":{\"444\":1}}],[\"且包含数据分析\",{\"1\":{\"254\":1}}],[\"且容易暴露信息\",{\"1\":{\"227\":1}}],[\"直连副本集\",{\"0\":{\"3225\":1}}],[\"直至当输入\",{\"1\":{\"1870\":1}}],[\"直到有一方断开连接\",{\"1\":{\"2785\":1}}],[\"直到服务器关闭\",{\"1\":{\"2689\":1}}],[\"直到互联网的出现\",{\"1\":{\"1863\":1}}],[\"直到缓冲区装满了\",{\"1\":{\"1826\":1}}],[\"直到另一线程对该对象发出\",{\"1\":{\"1552\":1}}],[\"直到线程b执行完\",{\"1\":{\"1481\":1}}],[\"直到线程b完全执行完以后\",{\"1\":{\"1479\":1}}],[\"直到异常被处理\",{\"1\":{\"1351\":1}}],[\"直到调用了java\",{\"1\":{\"1144\":1}}],[\"直到循环条件不满足\",{\"1\":{\"931\":1}}],[\"直到遇到break关键字或此switch\",{\"1\":{\"927\":1}}],[\"直到遇到换行符\",{\"1\":{\"581\":1}}],[\"直观\",{\"1\":{\"254\":1}}],[\"直接上手springboot集成mongodb\",{\"1\":{\"3228\":1}}],[\"直接连接副本集\",{\"1\":{\"3225\":1}}],[\"直接连接副本集将失败\",{\"1\":{\"3147\":1}}],[\"直接连接\",{\"1\":{\"3219\":1}}],[\"直接连接mongodb服务\",{\"1\":{\"3219\":1}}],[\"直接连接文件\",{\"1\":{\"1775\":1}}],[\"直接解压即可\",{\"1\":{\"3041\":1}}],[\"直接手写json字符串作为source方法的第一个参数也可以\",{\"1\":{\"2981\":1}}],[\"直接删除\",{\"1\":{\"2895\":1}}],[\"直接默认项目根目录就行\",{\"1\":{\"2744\":1}}],[\"直接进行重定向\",{\"1\":{\"2659\":1}}],[\"直接修改contexttype\",{\"1\":{\"2641\":1}}],[\"直接修改server配置文件\",{\"1\":{\"2468\":1}}],[\"直接转发\",{\"1\":{\"2624\":1}}],[\"直接配置好了webservlet\",{\"1\":{\"2540\":1}}],[\"直接配置path\",{\"0\":{\"781\":1}}],[\"直接利用现有可用连接\",{\"1\":{\"2419\":1}}],[\"直接指定basedao的泛型为orm类名\",{\"1\":{\"2403\":1}}],[\"直接在配置文件中修改\",{\"1\":{\"2304\":1}}],[\"直接报错\",{\"1\":{\"2005\":1}}],[\"直接或间接地通过网络协议与\",{\"1\":{\"1924\":1}}],[\"直接从数据源或目的地读写数据\",{\"1\":{\"1775\":1,\"1779\":1,\"1795\":1}}],[\"直接操作字符\",{\"1\":{\"1775\":1}}],[\"直接object\",{\"1\":{\"1701\":1}}],[\"直接alt\",{\"1\":{\"1649\":1}}],[\"直接添加成功\",{\"1\":{\"1643\":1}}],[\"直接添加另一个集合\",{\"1\":{\"698\":1}}],[\"直接储存数据\",{\"1\":{\"1452\":1}}],[\"直接继承runtimeexception即可\",{\"1\":{\"1365\":1}}],[\"直接new抽象类\",{\"1\":{\"1249\":1}}],[\"直接被类调用\",{\"1\":{\"1225\":1}}],[\"直接传进去就行\",{\"1\":{\"1195\":1}}],[\"直接返回对象\",{\"1\":{\"1522\":1}}],[\"直接返回true\",{\"1\":{\"1180\":1}}],[\"直接返回false\",{\"1\":{\"662\":1,\"1180\":2}}],[\"直接访问继承到的父类的private属性\",{\"1\":{\"1120\":1}}],[\"直接访问属性\",{\"0\":{\"1055\":1}}],[\"直接父类\",{\"1\":{\"1115\":1}}],[\"直接导入静态属性和静态方法\",{\"1\":{\"1098\":1}}],[\"直接用即可\",{\"1\":{\"2143\":1}}],[\"直接用类调用静态方法\",{\"1\":{\"1234\":1}}],[\"直接用\",{\"1\":{\"1094\":1}}],[\"直接用就行\",{\"1\":{\"1034\":1}}],[\"直接用负数将compare改成降序\",{\"1\":{\"508\":1}}],[\"直接return\",{\"1\":{\"1029\":1}}],[\"直接定义在类的一对\",{\"1\":{\"1025\":1}}],[\"直接声明了20个对象\",{\"1\":{\"1018\":1}}],[\"直接将一个数值换成二进制数\",{\"1\":{\"873\":1}}],[\"直接将mapper接口当实现类使用即可\",{\"1\":{\"272\":1}}],[\"直接运行会报错\",{\"0\":{\"802\":1}}],[\"直接向一个空的集合中复制会报异常\",{\"1\":{\"689\":1}}],[\"直接打印\",{\"1\":{\"642\":1}}],[\"直接改的源stringbuffer\",{\"1\":{\"452\":2}}],[\"直接与数据库字段和要进行的操作相关\",{\"1\":{\"358\":1}}],[\"直接调用it\",{\"1\":{\"1597\":1}}],[\"直接调用即可\",{\"1\":{\"1209\":1}}],[\"直接调用string类的compareto\",{\"1\":{\"501\":1}}],[\"直接调用就可以拼接查询条件\",{\"1\":{\"354\":1}}],[\"直接调用mapper接口中的方法\",{\"1\":{\"275\":1}}],[\"直接设置日志等级太粗暴了\",{\"1\":{\"249\":1}}],[\"直接就可以使用了\",{\"1\":{\"132\":1}}],[\"直接使用clazz属性即可\",{\"1\":{\"2403\":1}}],[\"直接使用集合中的第一个元素进行计算\",{\"1\":{\"2240\":1}}],[\"直接使用类名访问静态变量\",{\"1\":{\"1230\":1}}],[\"直接使用很少见\",{\"1\":{\"1210\":1}}],[\"直接使用父类中定义的方法\",{\"1\":{\"1161\":1}}],[\"直接使用整数ascii码\",{\"1\":{\"854\":1}}],[\"直接使用文件名\",{\"1\":{\"574\":1,\"1800\":1,\"1812\":1,\"1821\":1}}],[\"直接使用即可\",{\"1\":{\"392\":1}}],[\"直接使用测试类访问mapper接口\",{\"1\":{\"275\":1}}],[\"直接使用注入的对象log\",{\"1\":{\"244\":1,\"263\":1}}],[\"直接使用\",{\"1\":{\"126\":1,\"1019\":1}}],[\"直接可以使用内置的tomcat\",{\"1\":{\"89\":1}}],[\"直接查看快捷笔记\",{\"1\":{\"1\":1}}],[\"再在按score倒序排序\",{\"1\":{\"3106\":1}}],[\"再按照下一个定义的排序字段进行排序\",{\"1\":{\"2951\":1}}],[\"再从流对象中拿数据\",{\"1\":{\"2605\":1}}],[\"再设置server选项卡\",{\"1\":{\"2499\":1}}],[\"再把这些map再存到一个map里\",{\"1\":{\"2436\":1}}],[\"再存放到list中\",{\"1\":{\"2436\":1}}],[\"再验证用户名和密码\",{\"1\":{\"2414\":1}}],[\"再统一提交\",{\"1\":{\"2377\":1}}],[\"再启动客户端\",{\"1\":{\"1978\":1}}],[\"再启动springboot\",{\"1\":{\"110\":1}}],[\"再将war包放置到webapps目录下\",{\"1\":{\"2466\":1}}],[\"再将它们复合起来\",{\"1\":{\"1952\":1}}],[\"再将复制的文件\",{\"1\":{\"1890\":1}}],[\"再进行节点流的时间计算\",{\"1\":{\"1838\":1}}],[\"再进行调用\",{\"1\":{\"1032\":1}}],[\"再写出\",{\"1\":{\"1836\":1}}],[\"再关节点流\",{\"1\":{\"1833\":1}}],[\"再调用next\",{\"1\":{\"1599\":1}}],[\"再调用\",{\"1\":{\"1520\":1}}],[\"再调用remove都会报illegalstateexception\",{\"1\":{\"678\":1,\"1600\":1}}],[\"再通过new\",{\"1\":{\"1492\":1}}],[\"再接着执行main进程\",{\"1\":{\"1481\":1}}],[\"再次创建一个子线程对象\",{\"1\":{\"1472\":1}}],[\"再次创建一个thread类的子类对象\",{\"1\":{\"1472\":1}}],[\"再复制下一个是要比同时复制两个文件要快的\",{\"1\":{\"1444\":1}}],[\"再新建一个对象时\",{\"1\":{\"1302\":1}}],[\"再增加子类独有的属性\",{\"1\":{\"1118\":1}}],[\"再提供公共的\",{\"1\":{\"1057\":1,\"1058\":1}}],[\"再用对象访问类中定义的成员\",{\"1\":{\"1015\":1}}],[\"再初始化赋值\",{\"1\":{\"850\":1}}],[\"再导入\",{\"1\":{\"389\":1}}],[\"再使用各种字符串处理方法和前端的美化\",{\"1\":{\"254\":1}}],[\"然后是\",{\"1\":{\"3097\":1}}],[\"然后返回文档的id\",{\"1\":{\"2869\":1}}],[\"然后实时地对数据进行搜索\",{\"1\":{\"2842\":1}}],[\"然后通过配置文件启动服务\",{\"1\":{\"3044\":1}}],[\"然后通过id获取对应的文档作为结果呈现\",{\"1\":{\"2874\":1}}],[\"然后通过文档id获取对应的文档作为结果呈现\",{\"1\":{\"2874\":1}}],[\"然后通过response响应给了浏览器\",{\"1\":{\"2801\":1}}],[\"然后通过一种算法算出他应该储存的位置\",{\"1\":{\"1642\":1}}],[\"然后servlet将数据交由\",{\"1\":{\"2759\":1}}],[\"然后放行去访问servlet\",{\"1\":{\"2699\":1}}],[\"然后设置location响应头\",{\"1\":{\"2659\":1}}],[\"然后设置静态资源映射\",{\"1\":{\"393\":1}}],[\"然后使用请求转发器对象的forward方法进行转发\",{\"1\":{\"2652\":1}}],[\"然后使用该环境变量配置path\",{\"1\":{\"783\":1}}],[\"然后获取字节输出流\",{\"1\":{\"2646\":1}}],[\"然后调用对象中的service方法\",{\"1\":{\"2537\":1}}],[\"然后就可以配置tomcat了\",{\"1\":{\"2498\":1}}],[\"然后选择刚配置好的tomcat\",{\"1\":{\"2503\":1}}],[\"然后选择要添加web的模块\",{\"1\":{\"2485\":1}}],[\"然后选择相应的driverclassname\",{\"1\":{\"2426\":1}}],[\"然后点击\",{\"1\":{\"2483\":1}}],[\"然后关闭连接\",{\"1\":{\"2434\":2}}],[\"然后在每个userid的值内\",{\"1\":{\"3106\":1}}],[\"然后在basedao类中\",{\"1\":{\"2403\":1}}],[\"然后在进行可视化处理了\",{\"1\":{\"255\":1}}],[\"然后继承dao接口\",{\"1\":{\"2394\":1}}],[\"然后继续进行输入操作\",{\"1\":{\"1870\":1}}],[\"然后把获取列名的方法改成获取列的别名的方法\",{\"1\":{\"2354\":1}}],[\"然后将所有操作封装\",{\"1\":{\"2331\":1}}],[\"然后将集合元素按升序\",{\"1\":{\"1639\":1}}],[\"然后利用lambda的方式调用即可\",{\"1\":{\"2136\":1}}],[\"然后用该代理对象取代原始对象\",{\"1\":{\"2072\":1}}],[\"然后生成一个代表这个类的java\",{\"1\":{\"2026\":1}}],[\"然后断点下载的时候\",{\"1\":{\"1892\":1}}],[\"然后从断点处继续代码的执行\",{\"1\":{\"1552\":1}}],[\"然后才能对其进行读写\",{\"1\":{\"1992\":1}}],[\"然后才跟着票号\",{\"1\":{\"1507\":1}}],[\"然后才自增的\",{\"1\":{\"893\":1}}],[\"然后重新加入cpu分配的队列\",{\"1\":{\"1481\":1}}],[\"然后重写接口中的compareto方法\",{\"1\":{\"496\":1}}],[\"然后为具体的业务创建子类继承该抽象类\",{\"1\":{\"1252\":1}}],[\"然后永久驻留内存的方式来解决\",{\"1\":{\"1239\":1}}],[\"然后赋值\",{\"1\":{\"970\":1}}],[\"然后进入要编译的java文件目录的路径中\",{\"1\":{\"813\":1}}],[\"然后换行\",{\"1\":{\"799\":1}}],[\"然后反复使用该对象\",{\"1\":{\"745\":1}}],[\"然后\",{\"1\":{\"739\":1}}],[\"然后一次读取多个字符\",{\"1\":{\"567\":1}}],[\"然后再添加节点\",{\"1\":{\"3161\":1}}],[\"然后再存放到list\",{\"1\":{\"2436\":1}}],[\"然后再调用map进行进一步的操作\",{\"1\":{\"2224\":1}}],[\"然后再调用创建文件或目录的方法进行创建\",{\"1\":{\"554\":1,\"1770\":1}}],[\"然后再将s1作为锁\",{\"1\":{\"1548\":1}}],[\"然后再将s2作为锁\",{\"1\":{\"1548\":1}}],[\"然后再重新加入cpu分配的队列\",{\"1\":{\"1481\":1}}],[\"然后再去真正的解决异常\",{\"1\":{\"1315\":1}}],[\"然后再进行赋值\",{\"1\":{\"970\":1}}],[\"然后再进行计算\",{\"1\":{\"863\":1}}],[\"然后再进行储值的\",{\"1\":{\"850\":1}}],[\"然后再使用工具读取日志文件\",{\"1\":{\"254\":1}}],[\"然后按照\",{\"1\":{\"210\":1}}],[\"普通用户\",{\"1\":{\"3194\":1}}],[\"普通数组和文档数组\",{\"1\":{\"3032\":1}}],[\"普通的jdbc数据库连接使用\",{\"1\":{\"2414\":1}}],[\"普通for循环\",{\"0\":{\"1606\":1}}],[\"普通类型\",{\"1\":{\"1452\":1}}],[\"普通类是可以创建匿名对象的\",{\"1\":{\"1249\":1}}],[\"普通字符\",{\"1\":{\"854\":1}}],[\"普通字符串\",{\"1\":{\"253\":1}}],[\"普通工程的manifeast\",{\"1\":{\"200\":1}}],[\"颜色\",{\"1\":{\"253\":1}}],[\"为升序排列\",{\"1\":{\"3097\":1}}],[\"为user索引创建映射\",{\"1\":{\"2964\":1}}],[\"为uname字段添加映射\",{\"1\":{\"2963\":1}}],[\"为字段类型\",{\"1\":{\"2963\":1}}],[\"为所有关键字创建索引\",{\"1\":{\"2874\":1}}],[\"为所有的表都创建一个orm类\",{\"1\":{\"2357\":1}}],[\"为\",{\"1\":{\"2846\":1}}],[\"为基础的核心搜索架构\",{\"1\":{\"2846\":1}}],[\"为命名空间起前缀\",{\"1\":{\"2782\":1}}],[\"为命名空间起个前缀\",{\"1\":{\"2782\":1}}],[\"为解决传统开发中的数据库连接问题\",{\"1\":{\"2415\":1}}],[\"为开发者屏蔽了一些细节问题\",{\"1\":{\"2279\":1}}],[\"为一个功能创建一个类太浪费了\",{\"1\":{\"2136\":1}}],[\"为每个字符分配唯一的字符码\",{\"1\":{\"1861\":1}}],[\"为这些接口\",{\"1\":{\"1700\":1}}],[\"为止\",{\"1\":{\"1552\":1}}],[\"为何仍需多线程呢\",{\"1\":{\"1444\":1}}],[\"为非静态属性赋值\",{\"1\":{\"1278\":1}}],[\"为非静态代码块\",{\"1\":{\"1278\":1}}],[\"为之后多态性的使用\",{\"1\":{\"1114\":1}}],[\"为使用定义在不同包中的java类\",{\"1\":{\"1092\":1}}],[\"为age赋值\",{\"1\":{\"1018\":1}}],[\"为属性赋值等\",{\"1\":{\"1068\":1}}],[\"为属性赋值\",{\"1\":{\"1011\":1,\"2095\":1}}],[\"为内层元素赋值\",{\"1\":{\"988\":2,\"989\":2}}],[\"为外层元素赋值\",{\"1\":{\"988\":2,\"989\":2}}],[\"为数组和内层数组都直接分配了内存空间\",{\"1\":{\"985\":1}}],[\"为指定索引处的元素赋值\",{\"1\":{\"972\":1}}],[\"为long型变量赋值\",{\"1\":{\"868\":1}}],[\"为long类型赋值时\",{\"1\":{\"868\":1}}],[\"为什么要打jar包\",{\"0\":{\"2737\":1}}],[\"为什么要有泛型\",{\"0\":{\"1701\":1}}],[\"为什么在控制台就打印了hello这句话呢\",{\"1\":{\"2535\":1}}],[\"为什么不直接同判断返回new好的对象\",{\"1\":{\"2005\":1}}],[\"为什么不用new\",{\"1\":{\"2005\":1}}],[\"为什么thread类调用start\",{\"1\":{\"1493\":1}}],[\"为什么\",{\"1\":{\"849\":1,\"868\":1}}],[\"为已经到达流末尾而没有可用的字节\",{\"1\":{\"565\":1}}],[\"为了强制开启用户访问控制\",{\"1\":{\"3180\":1}}],[\"为了支持对地理空间坐标数据的有效查询\",{\"1\":{\"3107\":1}}],[\"为了简化操作\",{\"1\":{\"2986\":1}}],[\"为了增加效率\",{\"1\":{\"2877\":1}}],[\"为了解决结构化数据搜索和非结构化数据搜索性能问题\",{\"1\":{\"2851\":1}}],[\"为了解决空指针异常\",{\"1\":{\"2248\":1}}],[\"为了验证第一个问题\",{\"1\":{\"2566\":1}}],[\"为了实现功能的模块化\",{\"1\":{\"2395\":1}}],[\"为了表示url\",{\"1\":{\"1990\":1}}],[\"为了结构清晰\",{\"1\":{\"1858\":1}}],[\"为了提高数据读写的速度\",{\"1\":{\"1825\":1}}],[\"为了高效的进行互斥性比对\",{\"1\":{\"1642\":1}}],[\"为了方便查看文档增删改的结果\",{\"1\":{\"2904\":1}}],[\"为了方便理解\",{\"1\":{\"2864\":1}}],[\"为了方便地操作java语言的基本数据类型和string的数据\",{\"1\":{\"1874\":1}}],[\"为了方便应用计算机\",{\"1\":{\"1860\":1}}],[\"为了方便对多个对象的操作\",{\"1\":{\"1572\":1}}],[\"为了方便开发者使用基于字符串为数据的操作\",{\"1\":{\"288\":1}}],[\"为了更好的实现项目中类的管理\",{\"1\":{\"1086\":1}}],[\"为了避免出错\",{\"1\":{\"1167\":1}}],[\"为了避免扩容\",{\"1\":{\"448\":1}}],[\"为了避免这种问题\",{\"1\":{\"173\":1}}],[\"为对包设置日志级别\",{\"1\":{\"249\":1}}],[\"为对应组设置日志级别\",{\"1\":{\"249\":1}}],[\"灾难信息\",{\"1\":{\"246\":1}}],[\"等循环执行完所有数据都通过executebatch传完以后\",{\"1\":{\"2377\":1}}],[\"等待客户端连接\",{\"1\":{\"1978\":1}}],[\"等待通信请求的为服务端\",{\"1\":{\"1961\":1}}],[\"等待被回收\",{\"1\":{\"979\":2}}],[\"等语言的源代码\",{\"1\":{\"1797\":1}}],[\"等集合的工具类\",{\"1\":{\"1694\":1}}],[\"等集合的工具类map相关的方法比较少\",{\"1\":{\"681\":1}}],[\"等线程执行完synchronized中的代码后\",{\"1\":{\"1523\":1}}],[\"等函数中\",{\"1\":{\"1431\":1}}],[\"等等\",{\"1\":{\"1402\":1}}],[\"等类的\",{\"1\":{\"1181\":1}}],[\"等\",{\"1\":{\"982\":2,\"2278\":1,\"3118\":1}}],[\"等算术\",{\"1\":{\"530\":1}}],[\"等价于\",{\"1\":{\"420\":1,\"582\":1,\"1723\":1,\"1835\":1}}],[\"等级划分\",{\"0\":{\"246\":1}}],[\"等用到了再说\",{\"1\":{\"58\":1,\"59\":1}}],[\"继续比较\",{\"1\":{\"1674\":1}}],[\"继续next\",{\"1\":{\"1595\":1}}],[\"继续执行其后的代码\",{\"1\":{\"1340\":1}}],[\"继续下一次循环\",{\"1\":{\"947\":1}}],[\"继续在setting进行如下设置\",{\"1\":{\"146\":1}}],[\"继承关系\",{\"0\":{\"2592\":1}}],[\"继承结构\",{\"0\":{\"2558\":1}}],[\"继承了httpservlet\",{\"1\":{\"2540\":1}}],[\"继承于\",{\"1\":{\"2297\":1}}],[\"继承里的泛型\",{\"0\":{\"1736\":1}}],[\"继承泛型类\",{\"0\":{\"1722\":1}}],[\"继承或实现这个接口\",{\"1\":{\"1700\":1}}],[\"继承thread的线程对象\",{\"1\":{\"1519\":1}}],[\"继承thread类的\",{\"0\":{\"1519\":1}}],[\"继承thread类实现多线程的方式和实现runnable接口是不同的\",{\"1\":{\"1515\":1}}],[\"继承thread\",{\"1\":{\"1498\":1}}],[\"继承thred类\",{\"0\":{\"1464\":1}}],[\"继承方式\",{\"1\":{\"1464\":1}}],[\"继承性\",{\"1\":{\"1416\":1}}],[\"继承是一个\",{\"1\":{\"1258\":1}}],[\"继承是不会破坏封装性的\",{\"1\":{\"1118\":1}}],[\"继承它们所有的属性和方法\",{\"1\":{\"1256\":1}}],[\"继承父类中所有的属性和方法\",{\"1\":{\"1136\":1}}],[\"继承的父类和实现的接口中声明了同名同参数的默认方法\",{\"1\":{\"1269\":1}}],[\"继承的规则总结\",{\"0\":{\"1115\":1}}],[\"继承的出现让类与类之间产生了关系\",{\"1\":{\"1114\":1}}],[\"继承的出现减少了代码冗余\",{\"1\":{\"1114\":1}}],[\"继承的意义\",{\"0\":{\"1114\":1}}],[\"继承的类需要传入两个泛型\",{\"1\":{\"361\":1}}],[\"继承不能破坏封装性\",{\"1\":{\"1113\":1}}],[\"继承过来后也是private权限\",{\"1\":{\"1113\":1}}],[\"继承后的效果\",{\"0\":{\"1113\":1}}],[\"继承\",{\"0\":{\"1110\":1,\"1111\":1},\"1\":{\"1002\":1,\"1003\":1}}],[\"继承iservice<book>类\",{\"1\":{\"361\":1}}],[\"继承mybatisplus中的basemapper接口\",{\"1\":{\"283\":1}}],[\"继承只能一次\",{\"1\":{\"243\":1}}],[\"优雅\",{\"1\":{\"1317\":1}}],[\"优点于一身的数据库连接池\",{\"1\":{\"2420\":1}}],[\"优点\",{\"0\":{\"3024\":1},\"1\":{\"1242\":2,\"1528\":1,\"2077\":1}}],[\"优化\",{\"1\":{\"1356\":1}}],[\"优化一\",{\"1\":{\"956\":2}}],[\"优化二\",{\"1\":{\"956\":2}}],[\"优化日志对象的创建\",{\"0\":{\"243\":1}}],[\"优先设置该选项卡\",{\"1\":{\"2499\":1}}],[\"优先执行线程b\",{\"1\":{\"1481\":1}}],[\"优先于对象存在\",{\"1\":{\"1225\":1}}],[\"优先找固定参数的\",{\"1\":{\"1128\":1}}],[\"优先寻找的是参数为3\",{\"1\":{\"1128\":1}}],[\"优先使用简化写法\",{\"1\":{\"971\":1}}],[\"优先使用短路的\",{\"1\":{\"905\":1}}],[\"优先选择\",{\"1\":{\"1497\":1}}],[\"优先选择他来替代算数运算符\",{\"1\":{\"898\":1}}],[\"优先选择可变的字符串类\",{\"1\":{\"448\":1}}],[\"优先级的值是1\",{\"1\":{\"3173\":1}}],[\"优先级的值越大\",{\"1\":{\"3173\":1}}],[\"优先级即权重\",{\"1\":{\"3173\":1}}],[\"优先级\",{\"0\":{\"233\":1,\"2578\":1,\"3173\":1},\"1\":{\"3154\":1,\"3173\":1}}],[\"优先级为1~10\",{\"1\":{\"1487\":1}}],[\"优先级为\",{\"1\":{\"117\":1}}],[\"报告或备份\",{\"1\":{\"3126\":1}}],[\"报异常\",{\"1\":{\"1595\":1}}],[\"报一大堆异常\",{\"1\":{\"1286\":1}}],[\"报non\",{\"1\":{\"534\":1}}],[\"报警后记录等\",{\"1\":{\"257\":1}}],[\"报警\",{\"1\":{\"241\":1}}],[\"报错信息\",{\"1\":{\"2860\":1}}],[\"报错的情况\",{\"1\":{\"868\":1}}],[\"报错\",{\"1\":{\"168\":1,\"824\":1,\"867\":1,\"869\":1,\"913\":1,\"990\":1,\"1056\":1,\"1106\":1,\"1269\":1,\"1346\":1,\"1721\":1,\"1743\":1,\"1747\":1,\"2460\":1,\"3201\":1}}],[\"宕机\",{\"1\":{\"241\":1}}],[\"峰值流量\",{\"1\":{\"241\":1}}],[\"是spring\",{\"1\":{\"3233\":1}}],[\"是sourceforge下的一个开源项目数据库连接池\",{\"1\":{\"2420\":1}}],[\"是不能以副本集的形式连接的\",{\"1\":{\"3224\":1}}],[\"是不是\",{\"1\":{\"1258\":1}}],[\"是安装一次mongodb\",{\"1\":{\"3137\":1}}],[\"是默认的一种从节点类型\",{\"1\":{\"3131\":1}}],[\"是默认值\",{\"1\":{\"1432\":1}}],[\"是所有生产部署的基础\",{\"1\":{\"3125\":1}}],[\"是所有输入流的基类\",{\"1\":{\"1783\":1}}],[\"是用于降序排列\",{\"1\":{\"3097\":1}}],[\"是用户浏览器和服务器端的应用程序进行连接的接口\",{\"1\":{\"1992\":1}}],[\"是可视化的mongodb管理工具\",{\"1\":{\"3054\":1}}],[\"是可靠的\",{\"1\":{\"1956\":1}}],[\"是没有配置环境变量的\",{\"1\":{\"3042\":1}}],[\"是没有page域对象的\",{\"1\":{\"2672\":1}}],[\"是nosql数据库产品中的一种\",{\"1\":{\"3021\":1}}],[\"是面向文档型数据库\",{\"1\":{\"2863\":1}}],[\"是面向对象的核心概念\",{\"1\":{\"1007\":1}}],[\"是整个\",{\"1\":{\"2843\":1}}],[\"是目前java语言中最快的\",{\"1\":{\"2836\":1}}],[\"是目录或文件不存在都返回false\",{\"1\":{\"550\":1}}],[\"是阿里巴巴提供的一个java语言编写的高性能功能完善的\",{\"1\":{\"2836\":1}}],[\"是阿里提供的数据库连接池\",{\"1\":{\"2420\":1}}],[\"是对\",{\"1\":{\"2764\":1}}],[\"是对象在堆内存的首地址\",{\"1\":{\"1298\":1}}],[\"是很多文件的压缩包\",{\"1\":{\"2748\":1}}],[\"是从\",{\"1\":{\"2963\":1}}],[\"是从服务器内部跳转\",{\"1\":{\"2667\":1}}],[\"是从java\",{\"1\":{\"1913\":1}}],[\"是由浏览器进行跳转\",{\"1\":{\"2667\":1}}],[\"是由编译器推断出来的\",{\"1\":{\"2117\":1}}],[\"是两个不同的request对象\",{\"1\":{\"2664\":1}}],[\"是两台机器间通信的端点\",{\"1\":{\"1961\":1}}],[\"是需要tomcat来解析\",{\"1\":{\"2523\":1}}],[\"是组合关系\",{\"1\":{\"2426\":1}}],[\"是apache提供的数据库连接池\",{\"1\":{\"2420\":1}}],[\"是ascii编码组成的数组\",{\"1\":{\"426\":1}}],[\"是有关计算的\",{\"1\":{\"2191\":1}}],[\"是有生命周期的\",{\"1\":{\"1450\":1}}],[\"是数据渠道\",{\"1\":{\"2190\":1}}],[\"是被视为动态语言的关键\",{\"1\":{\"1998\":1}}],[\"是通过字符\",{\"0\":{\"2637\":1}}],[\"是通过名字来标识资源\",{\"1\":{\"1995\":1}}],[\"是通过方法名和参数列表来确定调用哪一个方法的\",{\"1\":{\"1038\":1}}],[\"是uniform\",{\"1\":{\"1995\":1}}],[\"是因为close操作要用到fr\",{\"1\":{\"1804\":1}}],[\"是其他所有泛型的父类\",{\"1\":{\"1749\":1}}],[\"是把该目录部署到服务器\",{\"1\":{\"2473\":1}}],[\"是把值赋给了局部变量\",{\"1\":{\"1605\":1}}],[\"是把保存对象的内存地址赋给了对方\",{\"1\":{\"1014\":1}}],[\"是进程内的一个独立执行单元\",{\"1\":{\"1440\":1}}],[\"是程序的一次执行过程\",{\"1\":{\"1436\":1}}],[\"是程序员应该积极避免其出现的异常\",{\"1\":{\"1325\":1}}],[\"是为完成特定任务\",{\"1\":{\"1435\":1}}],[\"是\",{\"1\":{\"1405\":1,\"1406\":1,\"1409\":1,\"1412\":1,\"1432\":1,\"1635\":1,\"1639\":1,\"1665\":1,\"1738\":1,\"2188\":1,\"2431\":1,\"2707\":1,\"2844\":1,\"3021\":1}}],[\"是只在代码中\",{\"1\":{\"1390\":1,\"1409\":1}}],[\"是将数据存储在客户端\",{\"1\":{\"2829\":1}}],[\"是将异常处理的程序代码集中在一起\",{\"1\":{\"1317\":1}}],[\"是将内存地址传过去了\",{\"1\":{\"1308\":1}}],[\"是将内存地址传给了对方\",{\"1\":{\"1306\":1}}],[\"是直接将值赋给了对方\",{\"1\":{\"1307\":1}}],[\"是直接跟变量对应的\",{\"1\":{\"1307\":1}}],[\"是k=v的形式\",{\"1\":{\"1300\":1}}],[\"是指编译器不要求强制处置的异常\",{\"1\":{\"1325\":1}}],[\"是指编译器要求必须处置的异常\",{\"1\":{\"1324\":1}}],[\"是指虚拟机栈\",{\"1\":{\"1298\":1}}],[\"是指符合如下标准的java类\",{\"1\":{\"1282\":1}}],[\"是指允许存在多个同名方法\",{\"1\":{\"1159\":1}}],[\"是抽象方法和常量值定义的集合\",{\"1\":{\"1259\":1}}],[\"是抽象的\",{\"1\":{\"1007\":1}}],[\"是修改过了的\",{\"1\":{\"1227\":1}}],[\"是比较值的错误观点\",{\"1\":{\"1181\":1}}],[\"是==\",{\"1\":{\"1181\":1}}],[\"是以父类的类型\",{\"1\":{\"1149\":1}}],[\"是以补码的形式\",{\"1\":{\"909\":1}}],[\"是java语言中类的一个成员\",{\"1\":{\"1065\":1}}],[\"是多个相同类型数据按一定顺序排列的集合\",{\"1\":{\"959\":1}}],[\"是boolean类型\",{\"1\":{\"931\":1}}],[\"是0就补0\",{\"1\":{\"909\":1}}],[\"是在互联网上使用最广的一种\",{\"1\":{\"855\":1}}],[\"是在集合外部实现的排序\",{\"1\":{\"494\":1}}],[\"是在集合内部定义的方法实现的排序\",{\"1\":{\"494\":1}}],[\"是一组维护相同数据集的mongod服务\",{\"1\":{\"3125\":1}}],[\"是一种类json的一种二进制形式的存储格式\",{\"1\":{\"3033\":1}}],[\"是一种类似于\",{\"1\":{\"3032\":1}}],[\"是一种分层开发的模式\",{\"1\":{\"2754\":1}}],[\"是一种软件包文件格式\",{\"1\":{\"2731\":1}}],[\"是一种静态的内存数据结构\",{\"1\":{\"2191\":1}}],[\"是一种更紧凑的代码风格\",{\"1\":{\"2111\":1}}],[\"是一类在运行时可以改变其结构的语言\",{\"1\":{\"1999\":1}}],[\"是一个基于javascript的解释器\",{\"1\":{\"3053\":1}}],[\"是一个开源的高扩展的分布式全文搜索引擎\",{\"1\":{\"2843\":1}}],[\"是一个开源组织提供的数据库连接池\",{\"1\":{\"2420\":1}}],[\"是一个开源组织提供的一个数据库连接池\",{\"1\":{\"2420\":1}}],[\"是一个可以存储大量数据的容器\",{\"1\":{\"2360\":1}}],[\"是一个独立于特定数据库管理系统\",{\"1\":{\"2279\":1}}],[\"是一个容器类\",{\"1\":{\"2247\":1}}],[\"是一个\",{\"1\":{\"2111\":1}}],[\"是一个程序内部的一条执行路径\",{\"1\":{\"1439\":1}}],[\"是一个动态的过程\",{\"1\":{\"1436\":1}}],[\"是一个虚拟的计算机\",{\"1\":{\"767\":1}}],[\"是一个非强制异常类\",{\"1\":{\"736\":1}}],[\"是一个操作\",{\"1\":{\"681\":1,\"1694\":1}}],[\"是一起参与比对的\",{\"1\":{\"720\":1}}],[\"是文件或file不存在都返回false\",{\"1\":{\"549\":1}}],[\"是就返回true\",{\"1\":{\"549\":1,\"550\":1}}],[\"是file类不是文件名\",{\"1\":{\"547\":1}}],[\"是相对路径就获取相对路径\",{\"1\":{\"541\":1}}],[\"是否健康\",{\"1\":{\"3159\":1}}],[\"是否基于索引查询\",{\"1\":{\"3118\":1}}],[\"是否将数据进行独立存储\",{\"1\":{\"2963\":1}}],[\"是否索引\",{\"1\":{\"2963\":1}}],[\"是否超时\",{\"1\":{\"2908\":1,\"2926\":1}}],[\"是否要加虚拟路径\",{\"0\":{\"2667\":1}}],[\"是否缓存preparedstatement\",{\"1\":{\"2426\":1}}],[\"是否存在员工姓进\",{\"1\":{\"2231\":1}}],[\"是否存在员工的工资大于\",{\"1\":{\"2230\":1}}],[\"是否所有的员工的年龄都大于18\",{\"1\":{\"2229\":1}}],[\"是否相同\",{\"1\":{\"1179\":1,\"1180\":1}}],[\"是否包含指定的key\",{\"1\":{\"716\":1}}],[\"是否在硬盘上存在\",{\"1\":{\"551\":1}}],[\"是否是同一个对象\",{\"1\":{\"501\":1}}],[\"是否删除\",{\"1\":{\"377\":1,\"378\":1,\"379\":1,\"380\":1,\"382\":1}}],[\"是专门为餐饮企业\",{\"1\":{\"396\":1}}],[\"是要在应用后台对日志进行可视化处理的\",{\"1\":{\"239\":1}}],[\"是重要性第一位的框架\",{\"1\":{\"66\":1}}],[\"动态模式\",{\"1\":{\"3024\":1}}],[\"动态获取虚拟路径\",{\"0\":{\"2668\":1}}],[\"动态资源是具有逻辑性的\",{\"1\":{\"2523\":1}}],[\"动态资源被访问后\",{\"1\":{\"2447\":1}}],[\"动态资源\",{\"1\":{\"2447\":1}}],[\"动态的去调用被代理类中的同名方法a\",{\"1\":{\"2084\":1}}],[\"动态的创建一个代理类及其对象\",{\"1\":{\"2084\":1}}],[\"动态的提供分隔符\",{\"1\":{\"1765\":1}}],[\"动态代理使用\",{\"0\":{\"2083\":1}}],[\"动态代理是指客户通过代理类来调用其它对象的方法\",{\"1\":{\"2077\":1}}],[\"动态代理介绍\",{\"0\":{\"2077\":1}}],[\"动态代理\",{\"0\":{\"2070\":1,\"2071\":1},\"1\":{\"2077\":1}}],[\"动态创建一个随机对象\",{\"1\":{\"2004\":1}}],[\"动态语言\",{\"1\":{\"1999\":1}}],[\"动态语言与静态语言\",{\"0\":{\"1999\":1}}],[\"动态数组\",{\"1\":{\"1610\":1}}],[\"动态绑定\",{\"1\":{\"1159\":2}}],[\"动态调用属于子类的该方法\",{\"1\":{\"1156\":1}}],[\"动态初始化后\",{\"1\":{\"987\":1}}],[\"动态初始化\",{\"0\":{\"970\":1,\"985\":1,\"986\":1}}],[\"动态条件拼接\",{\"0\":{\"357\":1}}],[\"动态\",{\"1\":{\"254\":1,\"1578\":1,\"1611\":1,\"1938\":1}}],[\"动态读取配置\",{\"1\":{\"236\":1}}],[\"动态加载配置信息\",{\"1\":{\"222\":1}}],[\"先执行下面这条命令\",{\"1\":{\"3161\":1}}],[\"先执行ht1进程\",{\"1\":{\"1481\":1}}],[\"先了解两个简单查看文档的方法\",{\"1\":{\"2904\":1}}],[\"先了解下关键字与文档之间的关系\",{\"1\":{\"2871\":1}}],[\"先使用错误的用户名和密码\",{\"1\":{\"3201\":1}}],[\"先使用windows环境作为学习和开发使用\",{\"1\":{\"2855\":1}}],[\"先使用javac编译java文件\",{\"1\":{\"2743\":1}}],[\"先进\",{\"1\":{\"2705\":1}}],[\"先进行instanceof的判断\",{\"1\":{\"1167\":1}}],[\"先从硬盘读取一个图片文件\",{\"1\":{\"2646\":1}}],[\"先初始化main方法所在的类\",{\"1\":{\"2029\":1}}],[\"先启动服务端\",{\"1\":{\"1978\":1}}],[\"先关处理流\",{\"1\":{\"1833\":1}}],[\"先占位\",{\"1\":{\"1698\":1}}],[\"先定义一个配置文件\",{\"1\":{\"1690\":1}}],[\"先定义一个实现comparator接口的类\",{\"1\":{\"645\":1}}],[\"先把要添加的元素取哈希值\",{\"1\":{\"1642\":1}}],[\"先到先服务\",{\"1\":{\"1486\":1}}],[\"先后又调用了另外的几个方法\",{\"1\":{\"1355\":1}}],[\"先判断资源是否打开\",{\"1\":{\"1344\":1}}],[\"先操作再赋值\",{\"1\":{\"1281\":1}}],[\"先写到缓冲区中直到缓冲区写满\",{\"1\":{\"1826\":1}}],[\"先写extends\",{\"1\":{\"1261\":1}}],[\"先写注释后写具体代码\",{\"1\":{\"805\":1}}],[\"先声明\",{\"1\":{\"1024\":1}}],[\"先创建要访问类的对象\",{\"1\":{\"1015\":1}}],[\"先创建file对象\",{\"1\":{\"554\":1,\"1770\":1}}],[\"先给数组分配空间\",{\"1\":{\"970\":1}}],[\"先自减1\",{\"1\":{\"893\":1}}],[\"先自增1\",{\"1\":{\"893\":1}}],[\"先运算再把结果进行赋值\",{\"1\":{\"896\":1}}],[\"先运算\",{\"1\":{\"893\":2}}],[\"先编译\",{\"1\":{\"802\":1}}],[\"先输出数据\",{\"1\":{\"799\":1}}],[\"先配置个java\",{\"1\":{\"783\":1}}],[\"先比较年龄属性\",{\"1\":{\"501\":1}}],[\"先在maven环境中设置用什么具体的环境\",{\"1\":{\"235\":1}}],[\"先学基本用法\",{\"1\":{\"11\":1}}],[\"主节点网络不可达\",{\"1\":{\"3171\":1}}],[\"主节点故障\",{\"1\":{\"3171\":1}}],[\"主节点的选举\",{\"0\":{\"3170\":1}}],[\"主节点和从节点的默认优先级是相同的\",{\"1\":{\"3169\":1}}],[\"主节点读写\",{\"0\":{\"3168\":1}}],[\"主节点目录\",{\"1\":{\"3139\":1}}],[\"主节点\",{\"1\":{\"3128\":3,\"3130\":1,\"3138\":1,\"3151\":1,\"3165\":1}}],[\"主节点接收所有写操作\",{\"1\":{\"3127\":1}}],[\"主从集群和副本集最大的区别就是副本集没有固定的\",{\"1\":{\"3128\":1}}],[\"主从复制和副本集区别\",{\"0\":{\"3128\":1}}],[\"主分片占空间大小\",{\"1\":{\"2893\":1}}],[\"主分片和副分片整体占空间大小\",{\"1\":{\"2893\":1}}],[\"主分片数量\",{\"1\":{\"2893\":1}}],[\"主流搜索引擎软件就两款\",{\"1\":{\"2844\":1}}],[\"主流都是用jar来替代war了\",{\"1\":{\"2749\":1}}],[\"主流持久层技术是\",{\"1\":{\"268\":1}}],[\"主机上运行着jdk\",{\"1\":{\"2455\":1}}],[\"主机ip\",{\"1\":{\"2294\":1}}],[\"主机地址的域名和ip地址\",{\"1\":{\"1942\":1}}],[\"主机名>\",{\"1\":{\"1989\":1}}],[\"主机名\",{\"1\":{\"1935\":1,\"1990\":1,\"1996\":1}}],[\"主线程默认名是\",{\"1\":{\"1473\":1}}],[\"主线程\",{\"1\":{\"1441\":1,\"1480\":2}}],[\"主\",{\"1\":{\"1440\":1,\"3128\":1}}],[\"主要接收所有写操作\",{\"1\":{\"3131\":1}}],[\"主要成员\",{\"1\":{\"3131\":1}}],[\"主要记录其操作日志中的数据集的所有\",{\"1\":{\"3127\":1}}],[\"主要关注该方法\",{\"1\":{\"2553\":1}}],[\"主要动态语言\",{\"1\":{\"1999\":1}}],[\"主要方法如下\",{\"1\":{\"2434\":1}}],[\"主要方法\",{\"0\":{\"1849\":1,\"1857\":1}}],[\"主要指\",{\"1\":{\"1646\":1}}],[\"主要指的是内存层面的存储\",{\"1\":{\"1572\":1}}],[\"主要实现类\",{\"0\":{\"1635\":1},\"1\":{\"1633\":1}}],[\"主要使用t\",{\"1\":{\"2249\":1}}],[\"主要使用\",{\"0\":{\"1612\":1}}],[\"主要功能\",{\"0\":{\"2681\":1},\"1\":{\"1176\":1}}],[\"主要用来删除已经持久化的数据库\",{\"1\":{\"3063\":1}}],[\"主要用到两个导出方式\",{\"1\":{\"2516\":1}}],[\"主要用途\",{\"1\":{\"2215\":1}}],[\"主要用于遍历\",{\"1\":{\"1587\":1,\"1588\":1}}],[\"主要用于应用后台开发\",{\"1\":{\"763\":1}}],[\"主要用在方法上\",{\"1\":{\"1109\":1}}],[\"主要是软件后台api\",{\"1\":{\"764\":1}}],[\"主要是collection集合的操作方法\",{\"1\":{\"681\":1}}],[\"主要是list集合\",{\"1\":{\"681\":1}}],[\"主要提供给消费者使用\",{\"1\":{\"396\":1}}],[\"主要提供给餐饮企业内部员工使用\",{\"1\":{\"396\":1}}],[\"主键\",{\"1\":{\"375\":1,\"376\":1,\"377\":1,\"378\":1,\"379\":1,\"380\":1,\"381\":1,\"382\":1,\"383\":2,\"384\":1,\"385\":1,\"3031\":1}}],[\"主环境的优先级最低\",{\"1\":{\"234\":1}}],[\"主环境属性生效\",{\"1\":{\"233\":1}}],[\"主环境dev\",{\"1\":{\"232\":1}}],[\"主配置文件还会存放通用的配置信息\",{\"1\":{\"229\":1}}],[\"主配置文件\",{\"1\":{\"228\":1}}],[\"后的代码\",{\"1\":{\"2705\":2}}],[\"后出\",{\"1\":{\"2705\":1}}],[\"后缀树等\",{\"1\":{\"2874\":1}}],[\"后缀名拦截\",{\"1\":{\"2701\":2}}],[\"后缀是可以改的\",{\"1\":{\"114\":1}}],[\"后台就需要给前端返回业务处理的结果即响应数据\",{\"1\":{\"2585\":1}}],[\"后台服务器\",{\"1\":{\"2584\":1,\"2585\":1}}],[\"后台系统普通员工\",{\"1\":{\"400\":1}}],[\"后台系统超管\",{\"1\":{\"400\":1}}],[\"后台系统\",{\"1\":{\"399\":1}}],[\"后期我们可以通过这两个参数实现前后端的数据交互\",{\"1\":{\"2537\":1}}],[\"后者主要是面向\",{\"1\":{\"2191\":1}}],[\"后者是操作接口的工具类\",{\"1\":{\"679\":1,\"1693\":1}}],[\"后写入套接字输出流\",{\"1\":{\"1966\":1}}],[\"后写implements\",{\"1\":{\"1261\":1}}],[\"后从套接字输入流读取内容\",{\"1\":{\"1966\":1}}],[\"后两个构造器是利用runable接口创建多线程用的\",{\"1\":{\"1468\":1}}],[\"后两个参数可选\",{\"1\":{\"470\":1}}],[\"后续逻辑处理\",{\"1\":{\"2614\":1}}],[\"后续的操作同方式1\",{\"1\":{\"2298\":1}}],[\"后续的添加和扩容操作与jdk8之前一样\",{\"1\":{\"1621\":1}}],[\"后续代码继续执行\",{\"1\":{\"1339\":1}}],[\"后续开发中需要什么依赖\",{\"1\":{\"389\":1}}],[\"后自减1\",{\"1\":{\"893\":1}}],[\"后自增1\",{\"1\":{\"893\":1}}],[\"后\",{\"1\":{\"893\":2,\"1501\":1,\"2962\":1}}],[\"后运算\",{\"1\":{\"893\":2}}],[\"后使用\",{\"1\":{\"825\":1,\"1024\":1}}],[\"后面是什么都无所谓\",{\"1\":{\"2575\":1}}],[\"后面可以跟版本号或是时间\",{\"1\":{\"811\":1}}],[\"后面跟作者名或邮箱\",{\"1\":{\"811\":1}}],[\"后面的日期时间比前面的日期时间大\",{\"1\":{\"498\":1}}],[\"后面的名字\",{\"1\":{\"229\":1}}],[\"后再向下取整\",{\"1\":{\"516\":1}}],[\"后端的数据库交互时\",{\"1\":{\"1005\":1}}],[\"后端\",{\"1\":{\"398\":1}}],[\"后进行操作\",{\"1\":{\"288\":1}}],[\"后接中括号可以指定日志的颜色\",{\"1\":{\"253\":1}}],[\"启用在后台运行mongos或mongod进程的守护进程模式\",{\"1\":{\"3048\":1,\"3142\":1}}],[\"启用或禁用持久性日志以确保数据文件保持有效和可恢复\",{\"1\":{\"3048\":1,\"3142\":1}}],[\"启用unicode版本的预定义字符类和posix字符类\",{\"1\":{\"749\":1}}],[\"启用文字解析\",{\"1\":{\"749\":1}}],[\"启用\",{\"1\":{\"378\":1}}],[\"启用dev环境的配置文件\",{\"1\":{\"229\":1}}],[\"启用的名字就是application\",{\"1\":{\"229\":1}}],[\"启动访问控制\",{\"0\":{\"3180\":1,\"3182\":1}}],[\"启动仲裁节点\",{\"1\":{\"3144\":1}}],[\"启动副本节点\",{\"1\":{\"3143\":1}}],[\"启动节点\",{\"1\":{\"3142\":1}}],[\"启动成功的提示信息\",{\"1\":{\"3049\":1}}],[\"启动方式\",{\"1\":{\"3044\":1}}],[\"启动的方式是进程占用\",{\"1\":{\"3043\":1}}],[\"启动以\",{\"1\":{\"2846\":1}}],[\"启动tomcat\",{\"0\":{\"2509\":1}}],[\"启动时需要在bin目录输入命令\",{\"1\":{\"3042\":1}}],[\"启动时\",{\"0\":{\"2461\":1}}],[\"启动后会弹出dos窗口\",{\"1\":{\"2455\":1}}],[\"启动失败\",{\"1\":{\"2455\":1}}],[\"启动\",{\"0\":{\"2455\":1,\"3042\":1},\"1\":{\"2533\":1}}],[\"启动web服务器使用浏览器访问对应的资源\",{\"1\":{\"2448\":1}}],[\"启动当前线程\",{\"1\":{\"1472\":1,\"1479\":1}}],[\"启动创建的线程\",{\"1\":{\"1471\":1}}],[\"启动pro\",{\"1\":{\"226\":1}}],[\"启动命令的临时属性\",{\"0\":{\"210\":1}}],[\"启动服务器\",{\"1\":{\"2598\":1}}],[\"启动服务\",{\"0\":{\"2857\":1,\"3049\":1},\"1\":{\"204\":1}}],[\"启动结果如下\",{\"1\":{\"86\":1}}],[\"启动springboot项目\",{\"1\":{\"86\":1}}],[\"启动项目后默认自动打开的浏览器\",{\"1\":{\"2502\":1}}],[\"启动项目时\",{\"1\":{\"213\":1}}],[\"启动项目\",{\"0\":{\"86\":1,\"207\":1,\"394\":1},\"1\":{\"394\":1}}],[\"启动类文件名改为\",{\"1\":{\"340\":1}}],[\"启动类与三层架构放在同一级\",{\"1\":{\"77\":1}}],[\"启动类\",{\"0\":{\"77\":1},\"1\":{\"200\":1,\"313\":1}}],[\"启动流程\",{\"1\":{\"29\":1}}],[\"环境准备\",{\"0\":{\"2853\":1}}],[\"环境\",{\"1\":{\"2451\":1}}],[\"环境变量配置的是哪个就使用的哪个版本\",{\"1\":{\"782\":1}}],[\"环境变量path配置\",{\"0\":{\"780\":1}}],[\"环境介绍\",{\"0\":{\"775\":1}}],[\"环境与部署\",{\"0\":{\"373\":1}}],[\"环境分类配置文件中常用于设置冲突属性\",{\"1\":{\"229\":1}}],[\"环境搭建\",{\"0\":{\"773\":1},\"1\":{\"11\":1}}],[\"命中的文档总数\",{\"1\":{\"2920\":1}}],[\"命令\",{\"1\":{\"1566\":1,\"3060\":1}}],[\"命令来编译代码的源文件\",{\"1\":{\"792\":1}}],[\"命令对生成的\",{\"1\":{\"790\":1}}],[\"命令对该\",{\"1\":{\"790\":1}}],[\"命令行提示符发生变化\",{\"1\":{\"3150\":1}}],[\"命令行默认是gbk编码\",{\"1\":{\"2459\":1}}],[\"命令行的编译和执行\",{\"1\":{\"794\":1}}],[\"命令行编译\",{\"1\":{\"790\":1}}],[\"命令行方式\",{\"1\":{\"771\":1}}],[\"命令行交互结束\",{\"1\":{\"639\":1,\"760\":1}}],[\"命令行打印出了指定的文本\",{\"1\":{\"87\":1}}],[\"命名空间\",{\"1\":{\"2782\":1}}],[\"命名\",{\"0\":{\"2760\":1}}],[\"命名规范\",{\"0\":{\"835\":1}}],[\"命名规则\",{\"1\":{\"258\":1}}],[\"命名规则如下\",{\"1\":{\"231\":1}}],[\"命名严格要求application\",{\"1\":{\"228\":1}}],[\"单实例环境\",{\"0\":{\"3191\":1}}],[\"单字段索引\",{\"0\":{\"3105\":1}}],[\"单点不正常\",{\"1\":{\"2893\":1}}],[\"单点正常\",{\"1\":{\"2893\":1}}],[\"单双都可\",{\"1\":{\"2770\":1}}],[\"单个或多个\",{\"1\":{\"3082\":1}}],[\"单个文档插入\",{\"0\":{\"3071\":1}}],[\"单个文件存放多个环境配置\",{\"1\":{\"227\":1}}],[\"单个\",{\"1\":{\"2845\":1}}],[\"单个值\",{\"1\":{\"2621\":1}}],[\"单参构造器创建的\",{\"1\":{\"2175\":1}}],[\"单参构造器\",{\"0\":{\"2175\":1}}],[\"单列集合\",{\"1\":{\"1633\":1}}],[\"单列数据\",{\"1\":{\"1578\":1,\"1611\":1}}],[\"单核cpu省去了切换\",{\"1\":{\"1444\":1}}],[\"单核cpu\",{\"1\":{\"1441\":1}}],[\"单核cpu和多核cpu\",{\"0\":{\"1441\":1}}],[\"单例模式的使用场景\",{\"0\":{\"1243\":1}}],[\"单例模式核心\",{\"0\":{\"1239\":1}}],[\"单例模式\",{\"0\":{\"1238\":1},\"1\":{\"1058\":1}}],[\"单分支\",{\"0\":{\"920\":1}}],[\"单\",{\"1\":{\"905\":1}}],[\"单精度\",{\"1\":{\"846\":1}}],[\"单词频次\",{\"1\":{\"2880\":1}}],[\"单词在文档中出现的位置\",{\"1\":{\"2880\":1}}],[\"单词在文档中出现的次数\",{\"1\":{\"2880\":1}}],[\"单词id\",{\"1\":{\"2879\":1,\"2880\":1}}],[\"单词词典内每条索引项记载单词本身的一些信息以及指向\",{\"1\":{\"2878\":1}}],[\"单词词典是由文档集合中出现过的所有单词构成的字符串集合\",{\"1\":{\"2878\":1}}],[\"单词词典\",{\"1\":{\"2878\":2}}],[\"单词2→文档1的id\",{\"1\":{\"2877\":1}}],[\"单词1→文档1的id\",{\"1\":{\"2877\":1}}],[\"单词→文档\",{\"1\":{\"2877\":1}}],[\"单词\",{\"1\":{\"830\":1,\"2871\":1,\"2876\":1,\"2879\":1,\"2880\":1}}],[\"单行注释\",{\"0\":{\"806\":1},\"1\":{\"790\":1}}],[\"单位ms\",{\"1\":{\"2908\":1,\"2926\":1}}],[\"单位s\",{\"1\":{\"2805\":1}}],[\"单位毫秒\",{\"1\":{\"2425\":1,\"2426\":1}}],[\"单位\",{\"1\":{\"633\":1}}],[\"单位是分钟\",{\"1\":{\"2825\":1}}],[\"单位是ms时间戳\",{\"1\":{\"1948\":1}}],[\"单位是\",{\"1\":{\"545\":1}}],[\"单位byte\",{\"1\":{\"544\":1}}],[\"单独部署\",{\"1\":{\"391\":1}}],[\"单一文件版\",{\"0\":{\"224\":1}}],[\"单服务器版本\",{\"1\":{\"222\":1}}],[\"高速缓存\",{\"1\":{\"3037\":1}}],[\"高扩展\",{\"1\":{\"3024\":1}}],[\"高可用\",{\"1\":{\"3024\":1}}],[\"高性能\",{\"1\":{\"3021\":1,\"3024\":1}}],[\"高亮查询\",{\"1\":{\"3018\":1,\"3019\":2}}],[\"高亮显示\",{\"0\":{\"2958\":1,\"3017\":1}}],[\"高层次概念定义统一资源标识\",{\"1\":{\"1995\":1}}],[\"高优先级的线程被优先执行\",{\"1\":{\"1489\":1}}],[\"高优先级的线程高概率的情况下被执行\",{\"1\":{\"1487\":1}}],[\"高优先级的线程要抢占低优先级线程cpu的执行权\",{\"1\":{\"1487\":1}}],[\"高优先级的线程抢占cpu\",{\"1\":{\"1485\":1}}],[\"高优先级覆盖低优先级的\",{\"1\":{\"218\":1}}],[\"高效性的三个特点\",{\"1\":{\"3033\":1}}],[\"高效率存储和访问\",{\"1\":{\"3027\":1}}],[\"高效率的修改\",{\"1\":{\"1521\":1}}],[\"高效修改的逻辑\",{\"0\":{\"1522\":1}}],[\"高效\",{\"1\":{\"1439\":1,\"1921\":1}}],[\"高内聚\",{\"1\":{\"1052\":1}}],[\"高级语言\",{\"1\":{\"772\":1}}],[\"高级查询\",{\"1\":{\"57\":2,\"2918\":1}}],[\"高级配置\",{\"0\":{\"154\":1},\"1\":{\"29\":1}}],[\"相连\",{\"1\":{\"3114\":1}}],[\"相\",{\"1\":{\"3102\":1}}],[\"相应信息如下\",{\"1\":{\"2907\":1}}],[\"相应的方法设置为类方法\",{\"1\":{\"1224\":1}}],[\"相反\",{\"1\":{\"2193\":1,\"2237\":1}}],[\"相较于jdk7在底层实现方面的不同点为\",{\"1\":{\"1678\":1}}],[\"相等的标准\",{\"1\":{\"1666\":1,\"1685\":1}}],[\"相等的标准是\",{\"1\":{\"1664\":2}}],[\"相等的对象必须具有相等的散列码\",{\"1\":{\"1637\":1,\"1649\":1}}],[\"相等就比较下一个\",{\"1\":{\"412\":1}}],[\"相关的元数据和资源\",{\"1\":{\"2731\":1}}],[\"相关的接口\",{\"1\":{\"1431\":1}}],[\"相关软件\",{\"1\":{\"2446\":1}}],[\"相关方法\",{\"0\":{\"2363\":1,\"2621\":1,\"2654\":1}}],[\"相关api\",{\"0\":{\"2088\":1}}],[\"相关操作\",{\"0\":{\"1811\":1}}],[\"相关工具类\",{\"1\":{\"1292\":1}}],[\"相关信息\",{\"1\":{\"58\":1,\"59\":1,\"184\":1,\"265\":1,\"268\":1,\"294\":1,\"295\":1,\"337\":1,\"3176\":1,\"3227\":1}}],[\"相同请求的每次返回的结果是相同的\",{\"1\":{\"2903\":1}}],[\"相同请求的每次返回的结果是不同的\",{\"1\":{\"2903\":1}}],[\"相同泛型的父子类\",{\"0\":{\"1738\":1}}],[\"相同的话再去判断equals\",{\"1\":{\"1642\":1}}],[\"相同的元素只能添加一个\",{\"1\":{\"1634\":1}}],[\"相同的并发性和内存语义\",{\"1\":{\"1532\":1}}],[\"相同的key\",{\"1\":{\"711\":1}}],[\"相同值的integer类指向的是同一个内存地址\",{\"1\":{\"1182\":1}}],[\"相同指的是\",{\"1\":{\"1122\":1}}],[\"相同方法名\",{\"1\":{\"1037\":1}}],[\"相同点\",{\"0\":{\"1024\":1},\"1\":{\"1499\":1,\"1537\":1,\"1555\":1}}],[\"相同配置\",{\"1\":{\"218\":1}}],[\"相当于可额外增加0\",{\"1\":{\"3173\":1}}],[\"相当于表\",{\"1\":{\"2865\":1}}],[\"相当于把上面两步合成了一步\",{\"1\":{\"2659\":1}}],[\"相当于<load\",{\"1\":{\"2572\":1}}],[\"相当于<url\",{\"1\":{\"2572\":1}}],[\"相当于<servlet\",{\"1\":{\"2572\":1}}],[\"相当于将某个字节码文件加载到内存中\",{\"1\":{\"2013\":1}}],[\"相当于将参数集合中的所有元素挨个添加到了当前集合\",{\"1\":{\"712\":1}}],[\"相当于实现了泛型中的多态\",{\"1\":{\"1749\":1}}],[\"相当于run\",{\"1\":{\"1559\":1}}],[\"相当于runnable接口\",{\"1\":{\"1559\":1}}],[\"相当于是一个单线程的过程\",{\"1\":{\"1528\":1}}],[\"相当于我们使用try\",{\"1\":{\"1347\":1}}],[\"相当于自动加了个super\",{\"1\":{\"1135\":1}}],[\"相当于if\",{\"1\":{\"927\":1}}],[\"相当于\",{\"1\":{\"909\":1,\"1160\":1,\"1618\":1}}],[\"相当\",{\"1\":{\"412\":1}}],[\"类库\",{\"1\":{\"2856\":1}}],[\"类必须有一个无参数的构造器\",{\"1\":{\"2037\":1}}],[\"类初始化的时机\",{\"0\":{\"2029\":1}}],[\"类构造器是构造类信息的\",{\"1\":{\"2028\":1}}],[\"类构造器<clinit>\",{\"1\":{\"2028\":1}}],[\"类没有提供公共的构造器\",{\"1\":{\"1943\":1}}],[\"类没有公共构造方法\",{\"1\":{\"736\":1}}],[\"类提供的静态\",{\"1\":{\"1919\":1}}],[\"类对象的\",{\"1\":{\"1973\":1}}],[\"类对象的属性不应允许被改动\",{\"1\":{\"1371\":1}}],[\"类对象\",{\"1\":{\"1969\":1}}],[\"类对象含有一个\",{\"1\":{\"1942\":1}}],[\"类对象可以自由移动记录指针\",{\"1\":{\"1882\":1}}],[\"类支持\",{\"1\":{\"1881\":1}}],[\"类介绍\",{\"0\":{\"1760\":1}}],[\"类a是类b的父类\",{\"1\":{\"1738\":1,\"1741\":1}}],[\"类增加了泛型支持\",{\"1\":{\"1700\":1}}],[\"类实现了\",{\"1\":{\"1532\":1}}],[\"类也是一个对象\",{\"1\":{\"1519\":1}}],[\"类也是对象\",{\"1\":{\"1515\":1}}],[\"类也可以作为对象\",{\"1\":{\"1515\":1}}],[\"类加载\",{\"1\":{\"1387\":1}}],[\"类加载器作用是用来把类\",{\"1\":{\"2031\":1}}],[\"类加载器\",{\"0\":{\"589\":1,\"2031\":1},\"1\":{\"2030\":1,\"2090\":1}}],[\"类作为参数的地方\",{\"1\":{\"1338\":1}}],[\"类是公共的\",{\"1\":{\"1282\":1}}],[\"类是对一类事物的描述\",{\"1\":{\"1007\":1}}],[\"类优先\",{\"1\":{\"1269\":1}}],[\"类方法\",{\"1\":{\"1224\":1}}],[\"类属性作为该类各个对象之间共享的变量\",{\"1\":{\"1224\":1}}],[\"类属性\",{\"1\":{\"1224\":1}}],[\"类属性与类方法\",{\"0\":{\"1224\":1}}],[\"类内可以定义属性\",{\"1\":{\"1206\":1}}],[\"类b称为外部类\",{\"1\":{\"1201\":1}}],[\"类在日常开发中\",{\"1\":{\"1181\":1}}],[\"类里面的方法\",{\"1\":{\"1181\":1}}],[\"类不同\",{\"1\":{\"1180\":1}}],[\"类不同于string\",{\"1\":{\"441\":1}}],[\"类只可以被同一个包内部的类访问\",{\"1\":{\"1062\":1}}],[\"类中的\",{\"1\":{\"2838\":1,\"2839\":1}}],[\"类中的常量也常常声明为static\",{\"1\":{\"1237\":1}}],[\"类中的方法可以直接访问类中的成员变量\",{\"1\":{\"1015\":1}}],[\"类中提供了多个\",{\"1\":{\"681\":1}}],[\"类和接口\",{\"1\":{\"1773\":1}}],[\"类和对象的使用\",{\"0\":{\"1012\":1}}],[\"类和方法都可以用\",{\"1\":{\"812\":1}}],[\"类可以做的事\",{\"1\":{\"1009\":1}}],[\"类拥有的属性\",{\"1\":{\"1009\":1}}],[\"类与多个对象\",{\"0\":{\"1013\":1}}],[\"类与类的成员\",{\"0\":{\"1009\":1}}],[\"类与引用数据类型\",{\"0\":{\"1008\":1}}],[\"类与对象\",{\"0\":{\"1000\":1,\"1006\":1,\"1297\":1}}],[\"类等要素命名时使用的字符序列称为标识符\",{\"1\":{\"833\":1}}],[\"类变量\",{\"1\":{\"828\":1,\"1227\":2}}],[\"类体内声明的变量\",{\"1\":{\"828\":1}}],[\"类上面\",{\"1\":{\"1400\":1}}],[\"类上的文档格式如下\",{\"1\":{\"811\":1}}],[\"类上常用文档标记\",{\"0\":{\"811\":1}}],[\"类名\",{\"1\":{\"810\":1,\"835\":1,\"1010\":1,\"1011\":2,\"1069\":1,\"1093\":1,\"1168\":1,\"1524\":1}}],[\"类名为全类名\",{\"1\":{\"590\":1}}],[\"类一样\",{\"1\":{\"736\":1}}],[\"类的被动引用\",{\"1\":{\"2029\":1}}],[\"类的主动引用\",{\"1\":{\"2029\":1}}],[\"类的链接\",{\"0\":{\"2027\":1}}],[\"类的初始化\",{\"0\":{\"2025\":1,\"2028\":1}}],[\"类的加载\",{\"0\":{\"2023\":1,\"2024\":1,\"2026\":1}}],[\"类的常用方法如下\",{\"1\":{\"1985\":1,\"1986\":1}}],[\"类的识别技巧\",{\"1\":{\"1777\":1}}],[\"类的标识\",{\"1\":{\"1363\":1}}],[\"类的getinfo\",{\"1\":{\"1156\":1}}],[\"类的内部数据操作细节自己完成\",{\"1\":{\"1052\":1}}],[\"类的属性\",{\"1\":{\"1025\":1}}],[\"类的访问机制\",{\"0\":{\"1015\":1}}],[\"类的实例化\",{\"1\":{\"1011\":1}}],[\"类的设计\",{\"1\":{\"1007\":2}}],[\"类的作者\",{\"1\":{\"811\":1}}],[\"类的\",{\"1\":{\"637\":1,\"758\":1}}],[\"类的class属性\",{\"0\":{\"586\":1}}],[\"类相关\",{\"0\":{\"584\":1}}],[\"类\",{\"0\":{\"563\":1,\"796\":1,\"1759\":1,\"2160\":1,\"2163\":1,\"2166\":1,\"2399\":1},\"1\":{\"592\":1,\"736\":1,\"827\":1,\"1007\":2,\"1025\":1,\"1100\":1,\"1152\":1,\"1230\":1,\"1387\":1,\"1405\":1,\"1413\":1,\"1872\":1,\"1981\":1,\"1996\":2,\"2150\":3,\"2326\":1,\"2562\":1}}],[\"类似关系型数据库中的表\",{\"1\":{\"3065\":1}}],[\"类似与关系型数据库中的\",{\"1\":{\"2953\":1,\"3013\":1}}],[\"类似邮局某个窗口中的业务员\",{\"1\":{\"1975\":1}}],[\"类似于mysql的like\",{\"1\":{\"3004\":1}}],[\"类似于百度\",{\"1\":{\"2958\":1,\"3017\":1}}],[\"类似于\",{\"1\":{\"2904\":1,\"3023\":1}}],[\"类似于高中的函数\",{\"1\":{\"1662\":1}}],[\"类似于死循环\",{\"1\":{\"1035\":1}}],[\"类似生活中的公共交通工具\",{\"1\":{\"1564\":1}}],[\"类似\",{\"1\":{\"475\":1}}],[\"类似xml和properties\",{\"1\":{\"120\":1}}],[\"类新增了\",{\"1\":{\"461\":1}}],[\"类型自定义\",{\"1\":{\"2781\":1}}],[\"类型推断\",{\"0\":{\"2117\":1},\"1\":{\"2117\":1,\"2118\":1}}],[\"类型是numbertype\",{\"1\":{\"2781\":1}}],[\"类型是id\",{\"1\":{\"2777\":1}}],[\"类型是inputstream\",{\"1\":{\"1868\":1}}],[\"类型是list\",{\"1\":{\"2426\":1}}],[\"类型是list<\",{\"1\":{\"1748\":1}}],[\"类型是printstream\",{\"1\":{\"1868\":1}}],[\"类型错误\",{\"1\":{\"1698\":1}}],[\"类型不安全\",{\"1\":{\"1707\":1}}],[\"类型不明\",{\"1\":{\"1339\":1}}],[\"类型不一致\",{\"1\":{\"508\":1}}],[\"类型必须匹配\",{\"1\":{\"1195\":1}}],[\"类型时\",{\"1\":{\"1187\":1}}],[\"类型就是类名\",{\"1\":{\"1008\":1}}],[\"类型间的转换\",{\"0\":{\"861\":1}}],[\"类型用来判断逻辑条件\",{\"1\":{\"858\":1}}],[\"类型的对象\",{\"1\":{\"2012\":1}}],[\"类型的属性\",{\"1\":{\"1719\":1}}],[\"类型的\",{\"1\":{\"426\":1,\"1406\":1}}],[\"类型的数组\",{\"1\":{\"425\":1}}],[\"类型转换异常\",{\"0\":{\"1331\":1}}],[\"类型转换\",{\"0\":{\"422\":1,\"887\":1}}],[\"类型\",{\"1\":{\"376\":1,\"1157\":1,\"1288\":2,\"1405\":1,\"1719\":2,\"2961\":1,\"2963\":1,\"2999\":2,\"3130\":2}}],[\"类路径下config目录下配置文件\",{\"1\":{\"216\":1}}],[\"类路径下配置文件\",{\"1\":{\"216\":1}}],[\"依次返回到serlvet\",{\"1\":{\"2759\":1}}],[\"依次匹配各个case中的常量\",{\"1\":{\"927\":1}}],[\"依然可以进行重写\",{\"1\":{\"1128\":1}}],[\"依然需要new对象\",{\"1\":{\"1032\":1}}],[\"依然是string类型\",{\"1\":{\"886\":1}}],[\"依然能够生效\",{\"1\":{\"213\":1}}],[\"依赖列表\",{\"0\":{\"314\":1}}],[\"依赖和插件等都准备好了\",{\"1\":{\"310\":1}}],[\"依赖\",{\"0\":{\"286\":1,\"2971\":1},\"1\":{\"340\":1}}],[\"依赖这些jar包\",{\"1\":{\"198\":1}}],[\"依赖的版本完全取决于springboot的版本\",{\"1\":{\"96\":1}}],[\"依赖的版本号\",{\"1\":{\"95\":1}}],[\"依赖管理\",{\"1\":{\"95\":1}}],[\"依赖版本\",{\"0\":{\"78\":1}}],[\"按条件统计记录数\",{\"1\":{\"3095\":1}}],[\"按条件查询\",{\"1\":{\"338\":1}}],[\"按顺序出现以下元素\",{\"1\":{\"2781\":1}}],[\"按顺序出现\",{\"1\":{\"2781\":1}}],[\"按顺序从集合中取出数据\",{\"1\":{\"2196\":1}}],[\"按流的角色的不同\",{\"1\":{\"1775\":1}}],[\"按数据流的流向不同\",{\"1\":{\"1775\":1}}],[\"按操作\",{\"1\":{\"1775\":1}}],[\"按\",{\"1\":{\"1635\":1}}],[\"按int长度分配内存\",{\"1\":{\"850\":1}}],[\"按回车即输入完毕\",{\"1\":{\"639\":1,\"760\":1}}],[\"按照过滤器类名的字符串自然排序规则比较\",{\"1\":{\"2706\":1}}],[\"按照相同的方法取值\",{\"1\":{\"2672\":1}}],[\"按照\",{\"1\":{\"2585\":1}}],[\"按照上面的方法在idea中修改tomcat会自动修改配置文件\",{\"1\":{\"2507\":1}}],[\"按照上述格式继续写\",{\"1\":{\"210\":1}}],[\"按照提示\",{\"1\":{\"2495\":1}}],[\"按照一定的协议对socket进行读\",{\"1\":{\"1969\":1}}],[\"按照元素数据类型\",{\"1\":{\"962\":1}}],[\"按照维度\",{\"1\":{\"962\":1}}],[\"按照变量声明的位置\",{\"0\":{\"828\":1}}],[\"按照数据类型\",{\"0\":{\"827\":1}}],[\"按照它们对应的数值大小进行比较\",{\"1\":{\"498\":1}}],[\"按照字符的unicode值来进行比较\",{\"1\":{\"498\":1}}],[\"按照字符串中字符的unicode值进行比较\",{\"1\":{\"498\":1}}],[\"按需创建目录\",{\"1\":{\"313\":1}}],[\"按需加载\",{\"1\":{\"107\":1}}],[\"按大小记录\",{\"1\":{\"262\":3}}],[\"按日期\",{\"1\":{\"262\":3}}],[\"空字符\",{\"1\":{\"3061\":1,\"3067\":1,\"3079\":1}}],[\"空值或者未定义的对象\",{\"1\":{\"3034\":1}}],[\"空参构造器创建的\",{\"1\":{\"2172\":1}}],[\"空参构造器\",{\"0\":{\"2172\":1},\"1\":{\"2037\":1}}],[\"空参构造方法\",{\"1\":{\"370\":1}}],[\"空指针访问\",{\"1\":{\"1313\":1}}],[\"空指针\",{\"0\":{\"998\":1,\"1327\":1}}],[\"空则返回true\",{\"1\":{\"719\":1}}],[\"空格将被忽略\",{\"1\":{\"749\":1}}],[\"空格与换行符\",{\"1\":{\"576\":1}}],[\"空格不是空字符串\",{\"1\":{\"411\":1}}],[\"空格\",{\"1\":{\"210\":1,\"1293\":1,\"3061\":1}}],[\"空一格输入两个\",{\"1\":{\"210\":1}}],[\"空间单位\",{\"0\":{\"172\":1}}],[\"空间属性在配置文件中是可以直接指定单位的\",{\"1\":{\"172\":1}}],[\"空间属性\",{\"1\":{\"170\":1}}],[\"语句中的参数的值\",{\"1\":{\"2321\":1,\"2322\":1}}],[\"语句中的参数的索引\",{\"1\":{\"2321\":1,\"2322\":1}}],[\"语句中的参数用问号\",{\"1\":{\"2321\":1}}],[\"语句段或命令从而利用系统的\",{\"1\":{\"2311\":1}}],[\"语句被预编译并存储在此对象中\",{\"1\":{\"2308\":1}}],[\"语句并返回它所生成结果的对象\",{\"1\":{\"2308\":1}}],[\"语句\",{\"1\":{\"2307\":1,\"2317\":1}}],[\"语句进行捕获\",{\"1\":{\"1990\":1}}],[\"语句块选定捕获异常的范围\",{\"1\":{\"1337\":1}}],[\"语句和\",{\"1\":{\"944\":1}}],[\"语法和js类似\",{\"1\":{\"3063\":1}}],[\"语法风格\",{\"0\":{\"3023\":1}}],[\"语法如下\",{\"1\":{\"2928\":1,\"3095\":1}}],[\"语法总结\",{\"0\":{\"2118\":1,\"2933\":1}}],[\"语法解析\",{\"0\":{\"1394\":1}}],[\"语法结构\",{\"0\":{\"935\":1,\"940\":1,\"1337\":1}}],[\"语法格式如下\",{\"1\":{\"2935\":1}}],[\"语法格式\",{\"0\":{\"926\":1,\"1093\":1,\"2150\":1,\"2171\":1,\"2182\":1}}],[\"语法\",{\"0\":{\"226\":1,\"919\":1,\"1112\":1,\"1392\":1,\"1714\":1,\"1732\":1,\"2571\":1,\"2883\":1,\"2888\":1,\"2892\":1,\"2895\":1,\"2899\":1,\"2905\":1,\"2928\":1,\"2935\":1,\"2938\":1,\"2948\":1,\"2951\":1,\"2954\":1,\"2959\":1,\"2963\":1,\"3090\":1},\"1\":{\"210\":1,\"821\":1,\"822\":1,\"823\":1,\"1011\":1,\"1034\":1,\"1192\":1,\"1194\":1,\"1400\":1,\"3118\":1}}],[\"语言结构体的名称\",{\"1\":{\"3033\":1}}],[\"语言开发的\",{\"1\":{\"2968\":1}}],[\"语言中\",{\"1\":{\"1073\":1}}],[\"语言赋予了特殊含义\",{\"1\":{\"830\":1}}],[\"语言\",{\"1\":{\"71\":1}}],[\"采用结构型数据存储\",{\"1\":{\"3035\":1}}],[\"采用javascript的正则表达式语法\",{\"1\":{\"3034\":1}}],[\"采用request对象的getrequestdispatch方法获取请求转发器对象\",{\"1\":{\"2652\":1}}],[\"采用request提供的获取请求参数的通用方式来获取请求参数\",{\"1\":{\"2625\":1}}],[\"采用注解的方式配置路由\",{\"1\":{\"2568\":1}}],[\"采用默认的就行\",{\"1\":{\"2294\":1}}],[\"采用函数式接口bifunction<t\",{\"1\":{\"2178\":1}}],[\"采用函数型接口function\",{\"1\":{\"2175\":1}}],[\"采用供给型接口\",{\"1\":{\"2172\":1}}],[\"采用\",{\"1\":{\"1956\":1}}],[\"采用时间片\",{\"1\":{\"1442\":1}}],[\"采用vue和axios\",{\"1\":{\"372\":1}}],[\"采用多个配置文件\",{\"1\":{\"215\":1}}],[\"采用多环境配置文件区分不同场景下的配置\",{\"1\":{\"208\":1}}],[\"采用配置中心更新配置文件\",{\"1\":{\"208\":1}}],[\"采用的默认配置\",{\"1\":{\"89\":1}}],[\"以副本集的形式连接\",{\"1\":{\"3220\":1}}],[\"以直接连接的方式连接副本集主节点\",{\"1\":{\"3147\":1}}],[\"以端口\",{\"1\":{\"3137\":1}}],[\"以是提供副本集仲裁功能的好方法\",{\"1\":{\"3132\":1}}],[\"以防止丢失单个数据库服务器\",{\"1\":{\"3126\":1}}],[\"以选择与查询语句匹配的文档\",{\"1\":{\"3103\":1}}],[\"以json字符串的格式打印查询结果\",{\"1\":{\"2991\":1}}],[\"以登录用户的名称展示\",{\"1\":{\"2830\":1}}],[\"以移动平台为主\",{\"1\":{\"2783\":1}}],[\"以内嵌的方式来启动web服务\",{\"1\":{\"2750\":1}}],[\"以zip格式构建\",{\"1\":{\"2731\":1}}],[\"以便在同一次会话的多次请求间共享数据\",{\"1\":{\"2787\":1}}],[\"以便开发java平台应用软件或库\",{\"1\":{\"2731\":1}}],[\"以便别的操作使用该数据库连接对象\",{\"1\":{\"2384\":1}}],[\"以键值对的形式存储数据到request域\",{\"1\":{\"2654\":1}}],[\"以字节的形式输出字符\",{\"0\":{\"2648\":1}}],[\"以字符为单位\",{\"1\":{\"2345\":1}}],[\"以字符流的形式读取字符\",{\"1\":{\"1850\":1}}],[\"以字符而非字节为单位读取\",{\"1\":{\"1790\":1}}],[\"以后每次请求都携带cookie数据进行访问\",{\"1\":{\"2790\":1}}],[\"以后再写代码的时候\",{\"1\":{\"2625\":1}}],[\"以后再创建javaweb项目就可以直接使用了\",{\"1\":{\"2497\":1}}],[\"以后只需要调用request提供的方法即可\",{\"1\":{\"2615\":1}}],[\"以后我们再编写servlet类的时候\",{\"1\":{\"2566\":1}}],[\"以后就可以直接点击这个tomcat\",{\"1\":{\"2503\":1}}],[\"以文件的方式保存在本地\",{\"1\":{\"2365\":1}}],[\"以文本的形式\",{\"1\":{\"1946\":1}}],[\"以mysql为例\",{\"1\":{\"2294\":1}}],[\"以mysql驱动进行操作\",{\"1\":{\"2287\":1}}],[\"以myannotation为例\",{\"1\":{\"1420\":1}}],[\"以函数式接口的形式模拟了面向函数的特点\",{\"1\":{\"2133\":1}}],[\"以函数为单位提供一个简单的独立的功能\",{\"1\":{\"2133\":1}}],[\"以函数为最小单位\",{\"1\":{\"1002\":1}}],[\"以完成代理的具体操作\",{\"1\":{\"2091\":1}}],[\"以cafe开头\",{\"1\":{\"2027\":1}}],[\"以至于成为事实上的标准\",{\"1\":{\"1961\":1}}],[\"以至于我们称他们为\",{\"1\":{\"1914\":1}}],[\"以其两个主要协议\",{\"1\":{\"1955\":1}}],[\"以点分十进制表示\",{\"1\":{\"1933\":1}}],[\"以前\",{\"1\":{\"2248\":1}}],[\"以前io操作都是这样写的\",{\"1\":{\"1916\":1}}],[\"以前的做法是定义为object\",{\"1\":{\"1698\":1}}],[\"以只读方式打开\",{\"1\":{\"1886\":1}}],[\"以该方法为例\",{\"1\":{\"1870\":1}}],[\"以上设置完之后\",{\"1\":{\"2744\":1}}],[\"以上面的例子为例\",{\"1\":{\"2101\":1}}],[\"以上构造器会抛出malformedurlexception异常\",{\"1\":{\"1990\":1}}],[\"以上操作需要进行异常处理\",{\"1\":{\"1792\":1}}],[\"以上是方法上常用的文档标注\",{\"1\":{\"812\":1}}],[\"以上是类上常用的文档标注\",{\"1\":{\"811\":1}}],[\"以pathname为路径创建file对象\",{\"1\":{\"1767\":1}}],[\"以arraylist集合为例\",{\"1\":{\"1707\":1}}],[\"以链表形式存在\",{\"1\":{\"1674\":1}}],[\"以hashmap为例\",{\"1\":{\"1670\":2}}],[\"以hashset为例\",{\"1\":{\"1634\":1,\"1641\":1}}],[\"以实现对象相等规则\",{\"1\":{\"1637\":1}}],[\"以实现下述目的\",{\"1\":{\"1057\":1}}],[\"以单核cpu为例\",{\"1\":{\"1444\":1}}],[\"以无参数方法的形式来声明\",{\"1\":{\"1397\":1}}],[\"以用其父类作为catch的参数\",{\"1\":{\"1338\":1}}],[\"以分号结束\",{\"1\":{\"1247\":1}}],[\"以运行其他构造器的代码\",{\"1\":{\"1082\":1}}],[\"以类\",{\"1\":{\"1002\":1}}],[\"以0x或0x开头表示\",{\"1\":{\"871\":1}}],[\"以0b或0b开头\",{\"1\":{\"871\":1}}],[\"以数字0开头表示\",{\"1\":{\"871\":1}}],[\"以保证java程序的可移植性\",{\"1\":{\"838\":1}}],[\"以保证资源肯定能被关闭\",{\"1\":{\"579\":1}}],[\"以static修饰\",{\"1\":{\"828\":1}}],[\"以spring\",{\"1\":{\"304\":1}}],[\"以及允许在指定资源上进行的操作\",{\"1\":{\"3184\":1}}],[\"以及设备汇报的日志信息\",{\"1\":{\"3027\":1}}],[\"以及用户发表的朋友圈信息\",{\"1\":{\"3027\":1}}],[\"以及\",{\"1\":{\"2810\":1}}],[\"以及监听这些域对象中的属性发生修改的事件\",{\"1\":{\"2711\":1}}],[\"以及异常出现在程序中的位置\",{\"1\":{\"1341\":1}}],[\"以及错误的处理\",{\"1\":{\"1314\":1}}],[\"以及数据的展示分离开来的设计模式使程序结构变的灵活而且清晰\",{\"1\":{\"1289\":1}}],[\"以及数字编号\",{\"1\":{\"1212\":1}}],[\"以及对正则表达式的多次匹配支持\",{\"1\":{\"750\":1}}],[\"以及参数类型列表\",{\"1\":{\"610\":1}}],[\"以及指定<appender>\",{\"1\":{\"262\":1}}],[\"以filereader读取字符为例\",{\"1\":{\"566\":1}}],[\"以filereader为例\",{\"1\":{\"565\":1}}],[\"以e为底的对数称为自然对数\",{\"1\":{\"521\":1}}],[\"以匿名内部类的方式\",{\"1\":{\"505\":1}}],[\"以date\",{\"1\":{\"484\":1}}],[\"以localdatetime类为例\",{\"1\":{\"471\":1,\"472\":1}}],[\"以一个新的开始为\",{\"1\":{\"461\":1}}],[\"以免版本冲突\",{\"1\":{\"324\":1}}],[\"以下操作示例将在同一台设备上进行\",{\"1\":{\"3137\":1}}],[\"以下操作和idea的版本相关\",{\"1\":{\"297\":1}}],[\"以下划线\",{\"1\":{\"3079\":1}}],[\"以下it公司采用了elasticsearch\",{\"1\":{\"2846\":1}}],[\"以下目录是使用maven创建的javaweb项目的标准目录\",{\"1\":{\"2477\":1}}],[\"以下两个方法都会抛出sqlexception\",{\"1\":{\"2388\":1}}],[\"以下两个add方法\",{\"1\":{\"1744\":1}}],[\"以下三个方法都会抛出sqlexception异常\",{\"1\":{\"2379\":1}}],[\"以下代码\",{\"1\":{\"2377\":1}}],[\"以下代码省去了try\",{\"1\":{\"2365\":1}}],[\"以下5中方法是循序渐进的\",{\"1\":{\"2296\":1}}],[\"以下四个方法创建的class是同一个class\",{\"1\":{\"2017\":1}}],[\"以下四种文件是平级的\",{\"1\":{\"1295\":1}}],[\"以下示例涉及到多态\",{\"1\":{\"1128\":1}}],[\"以下使用均会含有泛型\",{\"1\":{\"695\":1}}],[\"以下介绍的方法都是新增或重载后的方法\",{\"1\":{\"693\":1}}],[\"以下舍入策略\",{\"1\":{\"536\":1}}],[\"以下知识点仅做了解\",{\"1\":{\"208\":1}}],[\"以\",{\"1\":{\"226\":1,\"792\":1,\"808\":1,\"2731\":1,\"3027\":1}}],[\"以在启动类中\",{\"1\":{\"158\":1}}],[\"上线时一定要设置安全认证\",{\"1\":{\"3056\":1}}],[\"上线后使用info\",{\"1\":{\"247\":1}}],[\"上图下半部分是三层架构\",{\"1\":{\"2763\":1}}],[\"上章封装的jdbcutils工具中的关闭资源方法\",{\"1\":{\"2350\":1}}],[\"上面这种动态代理在aop中被称为aop代理\",{\"1\":{\"2100\":1}}],[\"上面的就是文档的概要描述和详细描述\",{\"1\":{\"811\":1}}],[\"上各种网络资源\",{\"1\":{\"1996\":1}}],[\"上某一\",{\"1\":{\"1988\":1}}],[\"上一层可以调用下一层\",{\"1\":{\"1952\":1}}],[\"上一个node\",{\"1\":{\"1624\":1}}],[\"上的各种网络资源\",{\"1\":{\"1988\":1}}],[\"上的计算机\",{\"1\":{\"1931\":1}}],[\"上的语言\",{\"1\":{\"1923\":1}}],[\"上限\",{\"0\":{\"1751\":1}}],[\"上报到后台\",{\"1\":{\"1315\":1}}],[\"上海\",{\"1\":{\"1267\":2}}],[\"上层文件目录不存在\",{\"1\":{\"557\":1}}],[\"上午01时21分07秒\",{\"1\":{\"486\":1}}],[\"上午01时18分16秒\",{\"1\":{\"486\":1}}],[\"上午1\",{\"1\":{\"486\":1}}],[\"上述示例的响应信息如下\",{\"1\":{\"2890\":1}}],[\"上述的整个过程就被称之为会话\",{\"1\":{\"2785\":1}}],[\"上述代码中\",{\"1\":{\"2647\":1}}],[\"上述方法的返回值就作为当前类中的invoke\",{\"1\":{\"2095\":1}}],[\"上述情况2和3\",{\"1\":{\"1644\":1}}],[\"上述情况1\",{\"1\":{\"1644\":1}}],[\"上述三个方法\",{\"1\":{\"486\":1}}],[\"上述controller响应的数据有一个问题\",{\"1\":{\"367\":1}}],[\"上述两个操作都有对应的命令可以快速执行\",{\"1\":{\"189\":1}}],[\"上传jar包\",{\"0\":{\"206\":1}}],[\"进入\",{\"1\":{\"2857\":1}}],[\"进入阻塞状态\",{\"1\":{\"1501\":1}}],[\"进\",{\"1\":{\"2231\":1}}],[\"进程编号\",{\"1\":{\"3049\":1}}],[\"进程在运行过程中\",{\"1\":{\"1545\":1}}],[\"进程推进顺序非法\",{\"0\":{\"1545\":1}}],[\"进程p2申请资源r1时\",{\"1\":{\"1545\":1}}],[\"进程p1正占用输入设备\",{\"1\":{\"1542\":1}}],[\"进程pid号\",{\"1\":{\"202\":2}}],[\"进程与线程\",{\"0\":{\"1440\":1}}],[\"进程可进一步细化为线程\",{\"1\":{\"1439\":1}}],[\"进程对应了程序的执行过程\",{\"1\":{\"1437\":1}}],[\"进程作为资源分配的单位\",{\"1\":{\"1436\":1}}],[\"进程是动态的\",{\"1\":{\"1436\":1,\"1437\":1}}],[\"进程\",{\"1\":{\"1436\":1}}],[\"进程的概念\",{\"0\":{\"1436\":1}}],[\"进而调用父类的父类的构造器\",{\"1\":{\"1144\":1}}],[\"进制转换\",{\"0\":{\"874\":1}}],[\"进制问题\",{\"0\":{\"870\":1}}],[\"进一位\",{\"1\":{\"536\":1}}],[\"进1取整\",{\"0\":{\"514\":1},\"1\":{\"514\":1}}],[\"进行开启高亮显示\",{\"1\":{\"2959\":1}}],[\"进行开启和关闭\",{\"1\":{\"2383\":1}}],[\"进行关键字搜索时\",{\"1\":{\"2958\":1,\"3017\":1}}],[\"进行分组\",{\"1\":{\"2953\":1,\"3013\":1}}],[\"进行分页查询\",{\"1\":{\"351\":1}}],[\"进行访问\",{\"1\":{\"2858\":1}}],[\"进行访问检查\",{\"1\":{\"2069\":1}}],[\"进行全文检索需要扫描整个表\",{\"1\":{\"2849\":1}}],[\"进行展示\",{\"1\":{\"2759\":1}}],[\"进行监听器配置\",{\"1\":{\"2723\":1}}],[\"进行转发\",{\"1\":{\"2655\":1}}],[\"进行转码\",{\"1\":{\"1843\":1}}],[\"进行请求转发同时共享数据\",{\"0\":{\"2655\":1}}],[\"进行字节流对拷\",{\"1\":{\"2646\":1}}],[\"进行字符串拼接\",{\"1\":{\"452\":1}}],[\"进行必要的设置\",{\"1\":{\"2483\":1}}],[\"进行数据展示\",{\"1\":{\"2755\":1}}],[\"进行数据库操作\",{\"1\":{\"2387\":1}}],[\"进行数据传输\",{\"1\":{\"1969\":1}}],[\"进行sql操作\",{\"1\":{\"2413\":1}}],[\"进行sql注入\",{\"1\":{\"2311\":1}}],[\"进行sql语句的拼接\",{\"1\":{\"2310\":1}}],[\"进行switch\",{\"1\":{\"2087\":1}}],[\"进行计算\",{\"1\":{\"2240\":1}}],[\"进行计算时\",{\"1\":{\"867\":1}}],[\"进行个性化的增强\",{\"1\":{\"2087\":1}}],[\"进行一些收尾工作\",{\"1\":{\"2078\":1}}],[\"进行一些参数的断定\",{\"1\":{\"729\":1,\"2144\":1}}],[\"进行工厂的准备工作\",{\"1\":{\"2078\":1}}],[\"进行工程\",{\"1\":{\"72\":1}}],[\"进行连接数据库\",{\"1\":{\"2073\":1}}],[\"进行输出byte\",{\"1\":{\"1972\":1}}],[\"进行对话\",{\"1\":{\"1958\":1}}],[\"进行通讯\",{\"1\":{\"1924\":1}}],[\"进行控制\",{\"1\":{\"1923\":1}}],[\"进行tostring输出\",{\"1\":{\"1909\":1}}],[\"进行try\",{\"1\":{\"1347\":1}}],[\"进行写入\",{\"1\":{\"1891\":1}}],[\"进行写的操作\",{\"1\":{\"1890\":1}}],[\"进行追加写\",{\"1\":{\"1890\":1}}],[\"进行读和写\",{\"1\":{\"1888\":1}}],[\"进行复制\",{\"1\":{\"1836\":1}}],[\"进行文件的复制\",{\"0\":{\"1823\":1},\"1\":{\"1836\":1}}],[\"进行流的操作\",{\"1\":{\"1792\":1}}],[\"进行检测\",{\"1\":{\"1597\":1}}],[\"进行遍历\",{\"0\":{\"1594\":1},\"1\":{\"1709\":1}}],[\"进行其他操作\",{\"1\":{\"1560\":1}}],[\"进行互相转换时\",{\"1\":{\"1199\":1}}],[\"进行重写\",{\"1\":{\"1180\":1}}],[\"进行比较时\",{\"1\":{\"1178\":1}}],[\"进行赋值时\",{\"1\":{\"1306\":1}}],[\"进行赋值\",{\"1\":{\"1026\":1}}],[\"进行安装java17\",{\"1\":{\"787\":1}}],[\"进行替换\",{\"1\":{\"741\":1}}],[\"进行判断\",{\"1\":{\"729\":1,\"2144\":1}}],[\"进行定制排序\",{\"1\":{\"684\":1,\"686\":1,\"687\":1}}],[\"进行自然排序\",{\"1\":{\"684\":1}}],[\"进行返回\",{\"1\":{\"677\":1,\"1592\":1}}],[\"进行排序\",{\"1\":{\"644\":1,\"1639\":1}}],[\"进行降序排序\",{\"1\":{\"508\":1}}],[\"进行格式化\",{\"1\":{\"484\":2}}],[\"进行条件查询时\",{\"1\":{\"357\":1}}],[\"进行条件查询\",{\"1\":{\"355\":1}}],[\"进行模糊查询\",{\"1\":{\"355\":1}}],[\"进行依赖管理\",{\"1\":{\"101\":1}}],[\"进行需求调研\",{\"1\":{\"22\":1}}],[\"带占位符\",{\"1\":{\"2318\":1}}],[\"带通配符的泛型\",{\"1\":{\"1749\":1}}],[\"带泛型的对象\",{\"1\":{\"1739\":1}}],[\"带参的构造器\",{\"0\":{\"1620\":1}}],[\"带参数的构造方法\",{\"1\":{\"1068\":1}}],[\"带参数的方法\",{\"1\":{\"1010\":1}}],[\"带包名的类名\",{\"1\":{\"1095\":1}}],[\"带响应信息的构造方法\",{\"1\":{\"370\":1}}],[\"带spring\",{\"0\":{\"198\":1},\"1\":{\"200\":1}}],[\"带层级的k\",{\"1\":{\"115\":1}}],[\"计数规则\",{\"1\":{\"2930\":1}}],[\"计算公式所有员工工资的总和\",{\"1\":{\"2241\":1}}],[\"计算两者小号的时间\",{\"1\":{\"1838\":1}}],[\"计算key1哈希值\",{\"1\":{\"1674\":1}}],[\"计算元素a的哈希值\",{\"1\":{\"1643\":1}}],[\"计算某段代码执行所需要花费的时间的方法\",{\"1\":{\"1251\":1}}],[\"计算代码执行时间的类\",{\"1\":{\"1251\":1}}],[\"计算代码执行时间\",{\"0\":{\"1251\":1}}],[\"计算1\",{\"1\":{\"1035\":1}}],[\"计算机\",{\"1\":{\"2449\":1}}],[\"计算机网络通信涉及内容很多\",{\"1\":{\"1952\":1}}],[\"计算机网络中实现通信必须有一些约定\",{\"1\":{\"1951\":1}}],[\"计算机网络\",{\"1\":{\"1924\":1}}],[\"计算机怎么知道两个字节表示一个符号\",{\"1\":{\"1863\":1}}],[\"计算机只能识别二进制数据\",{\"1\":{\"1860\":1}}],[\"计算机辨别\",{\"1\":{\"873\":1}}],[\"计算机内部都是二进制的\",{\"1\":{\"855\":1}}],[\"计算机上必须安装jdk\",{\"1\":{\"192\":1}}],[\"计算当前集合和参数集合的交集\",{\"1\":{\"666\":1}}],[\"计算\",{\"1\":{\"529\":1}}],[\"计量单位\",{\"0\":{\"169\":1}}],[\"与jar类似\",{\"1\":{\"2748\":1}}],[\"与数据表同名\",{\"1\":{\"2351\":1}}],[\"与数据模型层\",{\"1\":{\"1289\":1}}],[\"与动态语言相对应的\",{\"1\":{\"1999\":1}}],[\"与b\",{\"1\":{\"1958\":1}}],[\"与break和continue不同的是\",{\"1\":{\"948\":1}}],[\"与平台无关\",{\"1\":{\"1760\":1}}],[\"与hashset一样\",{\"1\":{\"1664\":1}}],[\"与某个\",{\"1\":{\"1405\":1}}],[\"与正常的程序代码分开\",{\"1\":{\"1317\":1}}],[\"与继承关系类似\",{\"1\":{\"1261\":1}}],[\"与之相对的是非静态方法\",{\"1\":{\"1232\":1}}],[\"与声明为void不同\",{\"1\":{\"1069\":1}}],[\"与一维数组初始化情况相同\",{\"1\":{\"993\":1}}],[\"与自增自减一样\",{\"1\":{\"897\":1}}],[\"与case\",{\"1\":{\"749\":1}}],[\"与pattern\",{\"1\":{\"736\":1}}],[\"与\",{\"0\":{\"2317\":1,\"2864\":1,\"3018\":1,\"3035\":1},\"1\":{\"426\":1,\"637\":2,\"745\":1,\"758\":2,\"2213\":1,\"2577\":2,\"2733\":1}}],[\"与编码无关\",{\"1\":{\"403\":1}}],[\"与redis的指令和参数相同\",{\"1\":{\"288\":1}}],[\"与在idea下执行程序没有区别\",{\"1\":{\"191\":1}}],[\"与springboot的版本号一样\",{\"1\":{\"76\":1}}],[\"程序还是像以前一样关闭数据库连接\",{\"1\":{\"2421\":1}}],[\"程序依然可以编译\",{\"1\":{\"2117\":1}}],[\"程序经过javac\",{\"1\":{\"2013\":1}}],[\"程序发送一些数据\",{\"1\":{\"1992\":1}}],[\"程序可以直接跳到文件的任意地方来读\",{\"1\":{\"1881\":1}}],[\"程序可以通过反射获取注释\",{\"1\":{\"1411\":1}}],[\"程序结束\",{\"1\":{\"1870\":1}}],[\"程序中有很多的类\",{\"1\":{\"2738\":1}}],[\"程序中打开的文件\",{\"1\":{\"1789\":1}}],[\"程序中的所有字符串字面值\",{\"1\":{\"878\":1}}],[\"程序调用thread\",{\"1\":{\"1527\":1}}],[\"程序需要实现一些需要等待的任务时\",{\"1\":{\"1446\":1}}],[\"程序需要同时执行两个或多个任务\",{\"1\":{\"1446\":1}}],[\"程序启动会默认开启一条线程\",{\"1\":{\"1439\":1}}],[\"程序与进程的联系\",{\"0\":{\"1438\":1}}],[\"程序与进程的区别\",{\"0\":{\"1437\":1}}],[\"程序是在某个进程中的某个线程执行的\",{\"1\":{\"1440\":1}}],[\"程序是存储在某种介质上的二进制代码\",{\"1\":{\"1437\":1}}],[\"程序是静态的\",{\"1\":{\"1436\":1,\"1437\":1}}],[\"程序和软件的区别是\",{\"1\":{\"1435\":1}}],[\"程序和软件的区别\",{\"1\":{\"1435\":1}}],[\"程序\",{\"1\":{\"1435\":1,\"1444\":1,\"1937\":1}}],[\"程序的概念\",{\"0\":{\"1435\":1}}],[\"程序的入口是main\",{\"1\":{\"797\":1}}],[\"程序块直接通往下一种情况而没有\",{\"1\":{\"1430\":1}}],[\"程序时\",{\"1\":{\"1411\":2}}],[\"程序运行过程中\",{\"1\":{\"1319\":1}}],[\"程序在正常执行的过程中\",{\"1\":{\"1318\":1}}],[\"程序设计的追求\",{\"0\":{\"1052\":1}}],[\"程序员可以通过request对象获取请求消息数据\",{\"1\":{\"2583\":1}}],[\"程序员可以在不改变原有逻辑的情况下\",{\"1\":{\"1387\":1}}],[\"程序员面对的是一个统一的网络编程环境\",{\"1\":{\"1923\":1}}],[\"程序员能够很容易开发常见的网络应用程序\",{\"1\":{\"1923\":1}}],[\"程序员从面向过程的执行者转化成了面向对象的指挥者\",{\"1\":{\"1004\":1}}],[\"程序员调试代码使用\",{\"1\":{\"246\":1}}],[\"程序性能最高\",{\"1\":{\"586\":1,\"2018\":1}}],[\"程序包中\",{\"1\":{\"1996\":1}}],[\"程序包所在目录中config目录下配置文件\",{\"1\":{\"216\":1}}],[\"程序包所在目录中配置文件\",{\"1\":{\"216\":1}}],[\"程序包打好以后\",{\"1\":{\"209\":1}}],[\"程序正常运行\",{\"1\":{\"191\":1}}],[\"程序打包好以后\",{\"1\":{\"191\":1}}],[\"叫做package\",{\"1\":{\"190\":1}}],[\"暂不关注\",{\"1\":{\"2308\":1}}],[\"暂停\",{\"1\":{\"1481\":1}}],[\"暂时省略了\",{\"1\":{\"3228\":1}}],[\"暂时意义不明\",{\"1\":{\"3226\":1}}],[\"暂时无法进行多个字段排序\",{\"1\":{\"3012\":1}}],[\"暂时只考虑service方法\",{\"1\":{\"2531\":1}}],[\"暂时不用深究\",{\"1\":{\"2529\":1}}],[\"暂时不需要掌握\",{\"1\":{\"1649\":1}}],[\"暂时不考虑\",{\"1\":{\"1029\":1}}],[\"暂时不做整理了\",{\"1\":{\"58\":1,\"59\":1}}],[\"暂时没有找到只去除一边空白的方法\",{\"1\":{\"419\":1}}],[\"暂略\",{\"1\":{\"184\":1,\"185\":1,\"186\":1,\"372\":1,\"814\":1,\"1679\":1,\"1682\":1,\"2261\":1,\"2702\":2,\"2745\":1,\"3051\":1,\"3169\":1}}],[\"执行检查等操作\",{\"1\":{\"3190\":2}}],[\"执行计划\",{\"0\":{\"3118\":1}}],[\"执行chain\",{\"1\":{\"2705\":4}}],[\"执行流程\",{\"0\":{\"2535\":1}}],[\"执行一个查询操作\",{\"1\":{\"2435\":1}}],[\"执行validationquery检测连接是否有效\",{\"1\":{\"2426\":1}}],[\"执行完成后再断开连接\",{\"1\":{\"2414\":1}}],[\"执行完就死了\",{\"1\":{\"1481\":1}}],[\"执行完就失效\",{\"1\":{\"1019\":1}}],[\"执行批量处理语句\",{\"1\":{\"2369\":1}}],[\"执行batch\",{\"0\":{\"2369\":1},\"1\":{\"2377\":1}}],[\"执行插入\",{\"1\":{\"2364\":1}}],[\"执行查询\",{\"1\":{\"2349\":1,\"2352\":1,\"2355\":1,\"2365\":1}}],[\"执行操作\",{\"1\":{\"2325\":1}}],[\"执行preparedstatement对象包含的所有任意sql语句\",{\"1\":{\"2323\":1}}],[\"执行dml操作\",{\"0\":{\"2323\":1}}],[\"执行sql\",{\"1\":{\"2310\":1}}],[\"执行sql语句\",{\"1\":{\"2283\":1,\"2386\":1}}],[\"执行invoke代码体里写的增强逻辑\",{\"1\":{\"2085\":1}}],[\"执行invoke\",{\"0\":{\"2066\":1}}],[\"执行获取的函数\",{\"1\":{\"2063\":1}}],[\"执行类构造器<clinit>\",{\"1\":{\"2028\":1}}],[\"执行删除\",{\"1\":{\"1920\":1}}],[\"执行报错\",{\"1\":{\"1920\":1}}],[\"执行指定的线程的操作\",{\"1\":{\"1569\":1}}],[\"执行指令\",{\"1\":{\"191\":1}}],[\"执行任务\",{\"1\":{\"1566\":2}}],[\"执行效果\",{\"0\":{\"1513\":1}}],[\"执行效率高\",{\"1\":{\"915\":1}}],[\"执行该方法\",{\"1\":{\"1432\":2,\"1481\":1}}],[\"执行了未检查的转换时的警告\",{\"1\":{\"1430\":1}}],[\"执行的顺序是先\",{\"1\":{\"3097\":1}}],[\"执行的数据库查询\",{\"1\":{\"2188\":1}}],[\"执行的过程控制都有操作系统的cpu\",{\"1\":{\"1476\":1}}],[\"执行的方法a中\",{\"1\":{\"1355\":1}}],[\"执行的先后顺序\",{\"1\":{\"1026\":1}}],[\"执行结果\",{\"0\":{\"1474\":1,\"3153\":1,\"3156\":1},\"1\":{\"1492\":1,\"2655\":1}}],[\"执行结果为\",{\"1\":{\"1343\":3}}],[\"执行结果如下\",{\"1\":{\"802\":1}}],[\"执行\",{\"1\":{\"1158\":1,\"2329\":1,\"2333\":1,\"2376\":1,\"2405\":1}}],[\"执行过程\",{\"1\":{\"927\":1,\"931\":1,\"932\":1,\"935\":1}}],[\"执行过程解析\",{\"0\":{\"791\":1}}],[\"执行语句n\",{\"1\":{\"926\":1}}],[\"执行语句2\",{\"1\":{\"926\":1}}],[\"执行语句1\",{\"1\":{\"926\":1}}],[\"执行表达式n\",{\"1\":{\"922\":1}}],[\"执行表达式3\",{\"1\":{\"922\":1}}],[\"执行表达式2\",{\"1\":{\"921\":1,\"922\":1}}],[\"执行表达式1\",{\"1\":{\"921\":1,\"922\":1}}],[\"执行hi\",{\"1\":{\"802\":1}}],[\"执行hello\",{\"1\":{\"802\":1}}],[\"执行文件时\",{\"1\":{\"793\":1}}],[\"执行代码块\",{\"1\":{\"920\":1}}],[\"执行代码\",{\"1\":{\"639\":1,\"760\":1}}],[\"执行maven打包指令\",{\"1\":{\"237\":1}}],[\"执行jar命令\",{\"1\":{\"207\":1}}],[\"执行程序打包指令后\",{\"1\":{\"191\":1}}],[\"执行要测试的对象的方法\",{\"1\":{\"181\":1}}],[\"执行要测试的对象对应的方法\",{\"1\":{\"181\":1}}],[\"执行后\",{\"1\":{\"104\":1,\"3073\":1}}],[\"声明一个自定义类型的元素\",{\"1\":{\"2781\":1}}],[\"声明一个students标签\",{\"1\":{\"2777\":1}}],[\"声明student标签的属性\",{\"1\":{\"2777\":1}}],[\"声明sex标签\",{\"1\":{\"2777\":1}}],[\"声明season对象的属性\",{\"1\":{\"1373\":1}}],[\"声明age标签\",{\"1\":{\"2777\":1}}],[\"声明name标签\",{\"1\":{\"2777\":1}}],[\"声明的所有方法都被转移到调用处理器一个集中的方法中处理\",{\"1\":{\"2077\":1}}],[\"声明的同时赋值\",{\"0\":{\"823\":1}}],[\"声明泛型接口和泛型类\",{\"0\":{\"1715\":1}}],[\"声明阶段不能确定这个容器到底实际存的是什么类型的对象\",{\"1\":{\"1699\":1}}],[\"声明注解\",{\"0\":{\"1395\":1}}],[\"声明枚举对象的属性\",{\"1\":{\"1378\":1}}],[\"声明为\",{\"1\":{\"1372\":1}}],[\"声明为public的类的类名必须与源文件名相同\",{\"1\":{\"796\":1}}],[\"声明public\",{\"1\":{\"1241\":1}}],[\"声明当前类对象\",{\"1\":{\"1241\":1,\"1521\":1}}],[\"声明位置\",{\"0\":{\"1137\":1}}],[\"声明在java\",{\"1\":{\"1880\":1}}],[\"声明在包的声明和类的声明之间\",{\"1\":{\"1094\":1}}],[\"声明在方法内\",{\"1\":{\"1025\":1}}],[\"声明在类中的变量\",{\"1\":{\"1023\":1}}],[\"声明和初始化分开\",{\"1\":{\"984\":1}}],[\"声明+初始化\",{\"1\":{\"970\":1,\"971\":1}}],[\"声明\",{\"1\":{\"970\":1,\"971\":1,\"1521\":1}}],[\"声明语法2\",{\"1\":{\"968\":1}}],[\"声明语法1\",{\"1\":{\"968\":1}}],[\"声明数组时要确定数据类型\",{\"1\":{\"980\":1}}],[\"声明数组\",{\"0\":{\"968\":1},\"1\":{\"963\":1,\"968\":1}}],[\"声明字符\",{\"0\":{\"853\":1}}],[\"声明long类型时\",{\"1\":{\"840\":1}}],[\"声明但未初始化\",{\"1\":{\"821\":1}}],[\"声明变量的同时进行初始化\",{\"1\":{\"823\":1}}],[\"声明变量\",{\"0\":{\"820\":1}}],[\"声明该类为测试类\",{\"1\":{\"180\":1}}],[\"声明测试类\",{\"1\":{\"180\":1}}],[\"他是安装的一个本地shell客户端\",{\"1\":{\"3053\":1}}],[\"他是动态生成的\",{\"1\":{\"2523\":1}}],[\"他是system类的一个变量\",{\"1\":{\"1868\":1}}],[\"他是有序的\",{\"1\":{\"667\":1}}],[\"他比实现runnable接口更强大\",{\"1\":{\"1558\":1}}],[\"他有固定的对象数量\",{\"1\":{\"1369\":1}}],[\"他有自己默认的数据类型\",{\"1\":{\"867\":1}}],[\"他也会自动隐式调用了一个空参的父类构造器\",{\"1\":{\"1140\":1}}],[\"他们是等同的\",{\"1\":{\"2360\":1}}],[\"他们会返回一个持有结果的新stream\",{\"1\":{\"2193\":1}}],[\"他们会指向同一个内存地址\",{\"1\":{\"877\":1}}],[\"他们指向各自的对象内存地址\",{\"1\":{\"1302\":1}}],[\"他们的方法基本是一样的\",{\"1\":{\"573\":1}}],[\"他们的方法基本都是一样的\",{\"1\":{\"564\":1,\"572\":1}}],[\"他们的常用实现类是\",{\"1\":{\"573\":1}}],[\"他们的配置会互相叠加覆盖\",{\"1\":{\"117\":1}}],[\"他们的版本由springboot项目内置的父工程来进行管理\",{\"1\":{\"92\":1}}],[\"他的值保存在内存中\",{\"1\":{\"1454\":1}}],[\"他的元素全是一维数组\",{\"1\":{\"982\":1}}],[\"他的指针在第一个元素之前\",{\"1\":{\"675\":1,\"1591\":1}}],[\"他的功能和方法与java\",{\"1\":{\"475\":1}}],[\"他跟真正的arraylist集合是有差异的\",{\"1\":{\"649\":1}}],[\"他生产从指定输入流扫描的值\",{\"1\":{\"638\":1,\"759\":1}}],[\"他说默认导入的\",{\"1\":{\"179\":1}}],[\"仅能操作article数据库\",{\"1\":{\"3194\":1}}],[\"仅能管理菜品和订单\",{\"1\":{\"400\":1}}],[\"仅修改文档中的某条数据\",{\"1\":{\"2909\":1}}],[\"仅\",{\"1\":{\"2908\":1,\"2926\":1}}],[\"仅获取参数的代码不同\",{\"1\":{\"2613\":1}}],[\"仅考虑重写doget和dopost方法\",{\"1\":{\"2564\":1}}],[\"仅实现service\",{\"1\":{\"2559\":1}}],[\"仅支持展开一层嵌套\",{\"1\":{\"2219\":1}}],[\"仅体验\",{\"0\":{\"2006\":1}}],[\"仅需数据的读入\",{\"1\":{\"1804\":1}}],[\"仅值目录\",{\"1\":{\"1760\":1}}],[\"仅指文件\",{\"1\":{\"1760\":1}}],[\"仅演示\",{\"0\":{\"1595\":1,\"1596\":1}}],[\"仅用户自定义角色\",{\"0\":{\"3186\":1}}],[\"仅用于遍历集合\",{\"1\":{\"1589\":1}}],[\"仅用来结束方法\",{\"1\":{\"1033\":1}}],[\"仅存在于编译器处理期间\",{\"1\":{\"1406\":1}}],[\"仅简单介绍\",{\"1\":{\"1296\":1}}],[\"仅仅是具有相同的行为特征而已\",{\"1\":{\"1257\":1}}],[\"仅仅是在子类中新增了一个同类的属性\",{\"1\":{\"1129\":1}}],[\"仅对外暴露少量的方法用于使用\",{\"1\":{\"1052\":1}}],[\"仅一个参数\",{\"1\":{\"684\":1}}],[\"仅list可用\",{\"1\":{\"682\":1,\"683\":1,\"684\":1,\"685\":1}}],[\"仅了解\",{\"1\":{\"529\":1,\"906\":1,\"2039\":1,\"2067\":1,\"2702\":1,\"2766\":1}}],[\"仅开发时才能开启\",{\"1\":{\"348\":1}}],[\"仅包含了常用的依赖\",{\"1\":{\"336\":1}}],[\"仅包含java相关的\",{\"1\":{\"11\":1}}],[\"仅做了解\",{\"1\":{\"173\":1}}],[\"有6个内置的角色\",{\"1\":{\"3187\":1}}],[\"有副作用\",{\"1\":{\"3142\":1}}],[\"有个user索引\",{\"1\":{\"2964\":1}}],[\"有不同的查询条件写法\",{\"1\":{\"2933\":1}}],[\"有不同的虚拟机\",{\"1\":{\"767\":1}}],[\"有缺陷\",{\"1\":{\"2775\":1}}],[\"有利于组件重用\",{\"1\":{\"2756\":1}}],[\"有利于分工协作\",{\"1\":{\"2756\":1}}],[\"有监控连接池状态的功能\",{\"1\":{\"2420\":1}}],[\"有就移动指针到下一行\",{\"1\":{\"2342\":1}}],[\"有5种方法\",{\"1\":{\"2296\":1}}],[\"有一个方法getname\",{\"1\":{\"2157\":1}}],[\"有一个无参的公共的构造器\",{\"1\":{\"1282\":1}}],[\"有无返回值\",{\"1\":{\"2133\":1}}],[\"有限制条件的通配符\",{\"0\":{\"1750\":1}}],[\"有能适配所有的泛型\",{\"1\":{\"1749\":1}}],[\"有泛型时\",{\"0\":{\"1706\":1}}],[\"有其他元素b\",{\"1\":{\"1643\":1}}],[\"有序状态\",{\"1\":{\"1685\":1}}],[\"有序\",{\"1\":{\"1574\":1,\"1639\":1}}],[\"有如下优势\",{\"1\":{\"1559\":1}}],[\"有它自身的产生\",{\"1\":{\"1436\":1}}],[\"有许多于\",{\"1\":{\"1431\":1}}],[\"有许多实现类\",{\"1\":{\"1402\":1}}],[\"有更好的选择\",{\"1\":{\"1389\":1,\"1390\":1}}],[\"有更好的提示\",{\"1\":{\"356\":1}}],[\"有些驱动程序的确支持在集合名里面包含\",{\"1\":{\"3067\":1}}],[\"有些异常是逻辑上的\",{\"1\":{\"1359\":1}}],[\"有些是有单位的\",{\"1\":{\"170\":1}}],[\"有4中方式使用flash\",{\"1\":{\"1264\":1}}],[\"有了myservlet这个指定的类后\",{\"1\":{\"2566\":1}}],[\"有了jdbc\",{\"0\":{\"2281\":1}}],[\"有了该对象就可以与客户端进行通信\",{\"1\":{\"1976\":1}}],[\"有了接口\",{\"1\":{\"1256\":1}}],[\"有了类的特点\",{\"1\":{\"1189\":1}}],[\"有了对象的多态性以后\",{\"1\":{\"1149\":1,\"1162\":1}}],[\"有可能发生\",{\"1\":{\"1505\":1}}],[\"有可能无法识别值\",{\"1\":{\"486\":1}}],[\"有可变参数的子类add方法重写了有可变参数的父类add\",{\"1\":{\"1128\":1}}],[\"有参\",{\"1\":{\"1070\":1}}],[\"有参数\",{\"1\":{\"639\":1,\"760\":1}}],[\"有以下作用\",{\"1\":{\"1030\":1}}],[\"有以下两种操作\",{\"1\":{\"262\":1}}],[\"有返回值\",{\"1\":{\"1029\":1,\"1566\":1}}],[\"有两个地方需要进行权限认证\",{\"1\":{\"3209\":1}}],[\"有两个含义\",{\"1\":{\"2426\":1}}],[\"有两个作用\",{\"1\":{\"535\":1}}],[\"有两种创建方式\",{\"1\":{\"876\":1}}],[\"有浮点型参与的运算\",{\"1\":{\"865\":1}}],[\"有多种组合方式\",{\"1\":{\"2935\":1}}],[\"有多种类型的数据混合运算时\",{\"1\":{\"863\":1}}],[\"有多个成员\",{\"1\":{\"1399\":1}}],[\"有多个java版本\",{\"1\":{\"787\":1}}],[\"有多个重载方法\",{\"1\":{\"455\":1}}],[\"有多个重构方法\",{\"1\":{\"424\":1,\"452\":1}}],[\"有几个class就形成几个文件\",{\"1\":{\"803\":1}}],[\"有几个参数就写几个\",{\"1\":{\"611\":1}}],[\"有很多类\",{\"1\":{\"498\":1}}],[\"有三个重构方法\",{\"1\":{\"1857\":1}}],[\"有三个重载方法\",{\"1\":{\"1850\":1}}],[\"有三个窗口售票\",{\"1\":{\"1507\":1}}],[\"有三个线程在执行遍历代码\",{\"1\":{\"1474\":1}}],[\"有三个构造器\",{\"1\":{\"441\":1}}],[\"有三种标准格式\",{\"1\":{\"483\":1}}],[\"有线程安全\",{\"1\":{\"448\":1}}],[\"有专门的前端服务器\",{\"1\":{\"372\":1}}],[\"有json数组\",{\"1\":{\"367\":1}}],[\"有时也称作\",{\"1\":{\"2394\":1}}],[\"有时不确定究竟定义为何种类型\",{\"1\":{\"1698\":1}}],[\"有时不会报错\",{\"1\":{\"868\":1}}],[\"有时根本发现不了\",{\"1\":{\"1539\":1}}],[\"有时必须从几个类中抽取出一些共同的行为特征\",{\"1\":{\"1257\":1}}],[\"有时必须从几个类中派生出一个子类\",{\"1\":{\"1256\":1}}],[\"有时需要写出换行符\",{\"1\":{\"582\":1,\"1835\":1}}],[\"有时\",{\"1\":{\"119\":1}}],[\"常驻\",{\"1\":{\"2455\":1}}],[\"常称为\",{\"1\":{\"1610\":1}}],[\"常看到一个类不是去继承一个已经实现好的类\",{\"1\":{\"1254\":1,\"1258\":1}}],[\"常见编码集\",{\"0\":{\"1861\":1}}],[\"常见子类threadpoolexecutor\",{\"1\":{\"1566\":1}}],[\"常见异常\",{\"0\":{\"996\":1,\"1321\":1,\"1326\":1}}],[\"常见的有以下几种\",{\"1\":{\"2963\":1}}],[\"常见的如下\",{\"1\":{\"855\":1}}],[\"常见的多环境开发主要兼顾3种环境设置\",{\"1\":{\"223\":1}}],[\"常量在链接阶段就存入调用类的常量池中了\",{\"1\":{\"2029\":1}}],[\"常量\",{\"0\":{\"1103\":1},\"1\":{\"1264\":1,\"1298\":1}}],[\"常量2\",{\"1\":{\"926\":1}}],[\"常量1\",{\"1\":{\"926\":1}}],[\"常量名\",{\"1\":{\"835\":1,\"2027\":1}}],[\"常量等\",{\"1\":{\"810\":1}}],[\"常量模式\",{\"1\":{\"167\":1}}],[\"常配合精度一起使用\",{\"1\":{\"536\":1}}],[\"常用httpservlet\",{\"1\":{\"2673\":1}}],[\"常用请求方法\",{\"0\":{\"2597\":1}}],[\"常用来储存缩略图\",{\"1\":{\"2361\":1}}],[\"常用来处理配置文件\",{\"1\":{\"1668\":1}}],[\"常用2\",{\"1\":{\"2243\":1}}],[\"常用1\",{\"1\":{\"2243\":1}}],[\"常用构造器\",{\"0\":{\"1766\":1}}],[\"常用string类作为map的\",{\"1\":{\"1661\":1}}],[\"常用于\",{\"1\":{\"1957\":1}}],[\"常用于javaweb\",{\"1\":{\"1389\":1}}],[\"常用于检查系统运行状况\",{\"1\":{\"248\":1}}],[\"常用作接口重用\",{\"1\":{\"1161\":1}}],[\"常用的内置角色\",{\"0\":{\"3189\":1}}],[\"常用的插件有\",{\"1\":{\"2426\":1}}],[\"常用的权限修饰符\",{\"1\":{\"1025\":1}}],[\"常用的格式为\",{\"1\":{\"487\":1}}],[\"常用实现类为hashmap\",{\"1\":{\"707\":1}}],[\"常用方法\",{\"0\":{\"450\":1,\"1771\":1}}],[\"常用工具类\",{\"0\":{\"311\":1}}],[\"常用解决方案时\",{\"1\":{\"202\":1}}],[\"常用注解解析\",{\"0\":{\"1424\":1}}],[\"常用注解\",{\"1\":{\"35\":1}}],[\"常用类\",{\"0\":{\"33\":1}}],[\"常用\",{\"0\":{\"289\":1,\"2020\":1,\"2254\":1},\"1\":{\"11\":1,\"401\":1,\"1462\":1,\"2360\":1,\"2420\":1,\"2470\":1,\"2621\":1}}],[\"烤肉串模式\",{\"1\":{\"167\":1}}],[\"驼峰模式\",{\"1\":{\"167\":1}}],[\"示例代码\",{\"0\":{\"2997\":1,\"3000\":1,\"3003\":1,\"3006\":1,\"3008\":1},\"1\":{\"2993\":1}}],[\"示例5\",{\"0\":{\"2166\":1}}],[\"示例4\",{\"0\":{\"2163\":1}}],[\"示例3\",{\"0\":{\"956\":1,\"2160\":1,\"2178\":1},\"1\":{\"868\":1}}],[\"示例\",{\"0\":{\"225\":1,\"355\":1,\"866\":1,\"1217\":1,\"1251\":1,\"1252\":1,\"1264\":1,\"1361\":1,\"1372\":1,\"1393\":1,\"1492\":1,\"1562\":1,\"1569\":1,\"1603\":1,\"1604\":1,\"1657\":1,\"1658\":1,\"1718\":1,\"1733\":1,\"1753\":1,\"1823\":1,\"1870\":1,\"1873\":1,\"1891\":1,\"1902\":1,\"1906\":1,\"1972\":1,\"2004\":1,\"2075\":1,\"2101\":1,\"2120\":1,\"2121\":1,\"2123\":1,\"2125\":1,\"2127\":1,\"2129\":1,\"2183\":1,\"2364\":1,\"2365\":1,\"2622\":1,\"2640\":1,\"2642\":1,\"2646\":1,\"2648\":1,\"2655\":1,\"2660\":1,\"2694\":1,\"2872\":1,\"2884\":1,\"2889\":1,\"2896\":1,\"2900\":1,\"2906\":1,\"2912\":1,\"2919\":1,\"2924\":1,\"2932\":1,\"2936\":1,\"2939\":1,\"2943\":1,\"2945\":1,\"2949\":1,\"2952\":1,\"2955\":1,\"2960\":1,\"2964\":1,\"3073\":1,\"3076\":1,\"3120\":1},\"1\":{\"790\":1,\"933\":1,\"936\":1,\"938\":1,\"941\":1,\"1035\":1,\"1044\":1,\"1045\":1,\"1160\":1,\"1252\":1,\"1834\":1,\"2077\":1,\"2202\":1,\"2203\":1,\"2229\":1,\"2230\":1,\"2231\":1,\"2232\":1,\"2233\":1,\"2234\":1,\"2235\":1,\"2236\":1,\"2237\":1,\"2239\":1,\"2241\":1,\"2243\":2,\"3067\":1,\"3095\":1,\"3096\":1,\"3097\":1,\"3099\":1,\"3109\":1,\"3114\":1,\"3116\":1}}],[\"示例2\",{\"0\":{\"168\":1,\"955\":1,\"1219\":1,\"1344\":1,\"1507\":1,\"2157\":1,\"2175\":1},\"1\":{\"868\":1,\"2334\":1}}],[\"示例1\",{\"0\":{\"167\":1,\"954\":1,\"1218\":1,\"1343\":1,\"1506\":1,\"2154\":1,\"2172\":1},\"1\":{\"868\":1,\"2334\":1}}],[\"示例如下\",{\"1\":{\"129\":1}}],[\"书写前缀\",{\"1\":{\"166\":1}}],[\"很有可能会报错\",{\"1\":{\"2988\":1}}],[\"很少使用\",{\"1\":{\"2249\":1}}],[\"很多命令无法使用\",{\"1\":{\"3146\":1}}],[\"很多应用场景\",{\"1\":{\"3025\":1}}],[\"很多框架的配置文件都是用xml写的\",{\"1\":{\"2769\":1}}],[\"很多配置文件都是xml格式\",{\"1\":{\"2766\":1}}],[\"很多时候我们使用转换流来处理文件乱码问题\",{\"1\":{\"1843\":1}}],[\"很多时候无法利用完cpu的性能\",{\"1\":{\"1445\":1}}],[\"很多死锁都是很隐蔽\",{\"1\":{\"1539\":1}}],[\"很多设计模式都用到了接口这个特性\",{\"1\":{\"1261\":1}}],[\"很多情况下\",{\"1\":{\"846\":1}}],[\"很多jdk内置的类\",{\"1\":{\"496\":1}}],[\"很多规则和内置的api都跟当前版本不同\",{\"1\":{\"60\":1,\"61\":1}}],[\"很人性化\",{\"1\":{\"147\":1}}],[\"问题二+\",{\"1\":{\"1707\":1}}],[\"问题二\",{\"0\":{\"2311\":1},\"1\":{\"1707\":1}}],[\"问题一\",{\"0\":{\"2310\":1},\"1\":{\"1707\":1}}],[\"问题的原因\",{\"1\":{\"1507\":1}}],[\"问题2\",{\"1\":{\"1507\":1}}],[\"问题1\",{\"1\":{\"1507\":1}}],[\"问题\",{\"0\":{\"143\":1,\"2613\":1},\"1\":{\"288\":1,\"356\":1,\"357\":1,\"2354\":1,\"2613\":1}}],[\"也要提前配置好权限认证\",{\"1\":{\"3225\":1}}],[\"也要先有对象\",{\"1\":{\"1236\":1}}],[\"也同时配置好了主节点\",{\"1\":{\"3151\":1}}],[\"也同样会导致死锁\",{\"1\":{\"1545\":1}}],[\"也无法执行\",{\"1\":{\"3148\":1}}],[\"也收效甚微\",{\"1\":{\"2849\":1}}],[\"也称基础类库\",{\"1\":{\"2741\":1}}],[\"也称为\",{\"1\":{\"2842\":1}}],[\"也称为类型实参\",{\"1\":{\"1700\":1}}],[\"也称为方法的重置\",{\"1\":{\"1122\":1}}],[\"也称为全类名\",{\"1\":{\"1095\":1}}],[\"也称为前后端数据协议\",{\"1\":{\"370\":1}}],[\"也间接实现了servletrequest接口\",{\"1\":{\"2589\":1}}],[\"也有一些开源组织提供实现\",{\"1\":{\"2420\":1}}],[\"也写成泛型的样式\",{\"1\":{\"2357\":1}}],[\"也将被代理类传递给了myinvocationhandler类的invoke方法\",{\"1\":{\"2097\":1}}],[\"也将异常处理类放入utile包中\",{\"1\":{\"369\":1}}],[\"也实现接口\",{\"1\":{\"2078\":1}}],[\"也便于子类继承此运行时类时\",{\"1\":{\"2037\":1}}],[\"也知道对方知道自己是谁了\",{\"1\":{\"1958\":1}}],[\"也能查询出数据\",{\"1\":{\"2941\":1}}],[\"也能控制隔离级别\",{\"1\":{\"2388\":1}}],[\"也能把对象从数据源中还原回来\",{\"1\":{\"1894\":1}}],[\"也能识别\",{\"1\":{\"1764\":1}}],[\"也能表示目录\",{\"1\":{\"1760\":1}}],[\"也能取\",{\"1\":{\"995\":1}}],[\"也就意味着这个类既可以读也可以写\",{\"1\":{\"1880\":1}}],[\"也就基本意味着安全级别越高\",{\"1\":{\"1651\":1}}],[\"也就是请求体\",{\"1\":{\"2993\":1,\"2994\":1,\"2996\":1,\"2997\":1,\"2999\":1,\"3000\":1,\"3008\":1,\"3010\":1}}],[\"也就是默认所有字段都会被索引\",{\"1\":{\"2963\":1}}],[\"也就是字符顺序\",{\"1\":{\"2880\":1}}],[\"也就是30分钟后\",{\"1\":{\"2825\":1}}],[\"也就是pscache\",{\"1\":{\"2426\":1}}],[\"也就是用于获取结果集的源数据\",{\"1\":{\"2344\":1}}],[\"也就是接口的实现类\",{\"1\":{\"2279\":1}}],[\"也就是java替我们穷举好了\",{\"1\":{\"2138\":1}}],[\"也就是取值范围是有限的\",{\"1\":{\"1651\":1}}],[\"也就是锁l1想要包含了锁l2\",{\"1\":{\"1546\":1}}],[\"也就是annotation\",{\"1\":{\"1386\":1}}],[\"也就是\",{\"1\":{\"1315\":1}}],[\"也就是说多个用户同时访问时\",{\"1\":{\"2547\":1}}],[\"也就是说在获得了锁l1\",{\"1\":{\"1546\":1}}],[\"也就是说\",{\"1\":{\"1122\":1,\"1247\":1,\"1975\":1,\"1995\":1,\"2523\":1,\"3178\":1}}],[\"也就是内层数组的元素类型也是确定的\",{\"1\":{\"995\":1}}],[\"也就是要么是true\",{\"1\":{\"900\":1}}],[\"也就是凡是自己可以起名字的地方都叫标识符\",{\"1\":{\"833\":1}}],[\"也就是无法实例化该类\",{\"1\":{\"632\":1}}],[\"也就是会有字符没有被替换\",{\"1\":{\"569\":1,\"1808\":1}}],[\"也就是启动类类名\",{\"1\":{\"201\":1}}],[\"也就是将开发者自己制作的内容重新加载就行了\",{\"1\":{\"139\":1}}],[\"也没有调用对象中的service方法\",{\"1\":{\"2535\":1}}],[\"也没有重写thread类的run方法\",{\"1\":{\"1493\":1}}],[\"也没有公共构造方法\",{\"1\":{\"736\":1}}],[\"也只能执行一个线程的任务\",{\"1\":{\"1441\":1}}],[\"也包含在内\",{\"1\":{\"1514\":1}}],[\"也包含一个名为\",{\"1\":{\"1412\":1}}],[\"也包括了jre\",{\"1\":{\"777\":1}}],[\"也属于某个包\",{\"1\":{\"1382\":1}}],[\"也属于父类的引用指向子类的对象\",{\"1\":{\"1160\":1}}],[\"也应该返回是\",{\"1\":{\"1180\":2}}],[\"也通常是比较两个对象的\",{\"1\":{\"1180\":1}}],[\"也一定不要导入\",{\"1\":{\"1096\":1}}],[\"也叫构造方法\",{\"1\":{\"1065\":1}}],[\"也是将用户和权限信息保存到数据库对\",{\"1\":{\"3198\":1}}],[\"也是一种从节点类型\",{\"1\":{\"3131\":1}}],[\"也是会被对应的拦截器拦截的吗\",{\"1\":{\"2700\":1}}],[\"也是函数式接口的实例\",{\"1\":{\"2148\":1}}],[\"也是system类的一个变量\",{\"1\":{\"1868\":1}}],[\"也是用write方法\",{\"1\":{\"1833\":1}}],[\"也是用read方法\",{\"1\":{\"1833\":1}}],[\"也是双向链表的基本操作\",{\"1\":{\"1623\":1}}],[\"也是典型的单例应用\",{\"1\":{\"1243\":1}}],[\"也是单例的典型应用\",{\"1\":{\"1243\":1}}],[\"也是int类型的结果转为了double\",{\"1\":{\"891\":1}}],[\"也是有set组成的\",{\"1\":{\"710\":1}}],[\"也需要使用getxxx和\",{\"1\":{\"1113\":1}}],[\"也需要先建立对象\",{\"1\":{\"1032\":1}}],[\"也需要重新指定内存区域赋值\",{\"1\":{\"880\":2}}],[\"也需要进行处理\",{\"1\":{\"579\":1}}],[\"也会报错\",{\"1\":{\"2886\":1}}],[\"也会包含一条声明\",{\"1\":{\"2139\":1}}],[\"也会使用泛型\",{\"1\":{\"1709\":1}}],[\"也会出现小数点\",{\"1\":{\"865\":1}}],[\"也会返回false\",{\"1\":{\"667\":1}}],[\"也返回false\",{\"1\":{\"552\":1}}],[\"也不要修改值\",{\"1\":{\"2547\":1}}],[\"也不能确定什么时候可以抵达\",{\"1\":{\"1981\":1}}],[\"也不能包的代码少了\",{\"1\":{\"1514\":1}}],[\"也不能包含代码少了\",{\"1\":{\"1511\":1}}],[\"也不允许出现重复的元素\",{\"1\":{\"1654\":1}}],[\"也不用用它\",{\"1\":{\"1628\":1}}],[\"也不处理\",{\"1\":{\"1351\":1}}],[\"也不创建\",{\"1\":{\"556\":1}}],[\"也不包含与时区相关的信息\",{\"1\":{\"464\":1}}],[\"也不会被输出\",{\"1\":{\"262\":1}}],[\"也可能导致内存泄漏\",{\"1\":{\"2414\":1}}],[\"也可能会用到temporal包\",{\"1\":{\"463\":1}}],[\"也可用于操作\",{\"1\":{\"1582\":1}}],[\"也可\",{\"1\":{\"1338\":1}}],[\"也可命名为domain或pojo\",{\"1\":{\"313\":1}}],[\"也可以以replicaset的方式只连接一个节点\",{\"1\":{\"3226\":1}}],[\"也可以在开启认证之后添加\",{\"1\":{\"3197\":1}}],[\"也可以在具体module的\",{\"1\":{\"2530\":1}}],[\"也可以一起使用\",{\"1\":{\"3096\":1}}],[\"也可以手动创建集合\",{\"1\":{\"3067\":1}}],[\"也可以手动调用flush方法\",{\"1\":{\"1833\":1}}],[\"也可以返回查询结果\",{\"1\":{\"2946\":1}}],[\"也可以匹配到\",{\"1\":{\"2942\":1}}],[\"也可以根据条件对多条数\",{\"1\":{\"2918\":1}}],[\"也可以根据需要切换成指定客户端技术\",{\"1\":{\"290\":1}}],[\"也可以只修改某一给条数据的局部信息\",{\"1\":{\"2911\":1}}],[\"也可以查看所有的文档\",{\"1\":{\"2904\":1,\"2922\":1}}],[\"也可以指定会话时间\",{\"1\":{\"2803\":1}}],[\"也可以采用xml\",{\"1\":{\"2568\":1}}],[\"也可以取消勾选\",{\"1\":{\"2486\":1}}],[\"也可以自己指定\",{\"1\":{\"2294\":1}}],[\"也可以写成\",{\"1\":{\"2241\":1}}],[\"也可以省略\",{\"1\":{\"2118\":1}}],[\"也可以直接在compass上查看\",{\"1\":{\"3120\":1}}],[\"也可以直接写到里面\",{\"1\":{\"2101\":1}}],[\"也可以直接写在myinvocationhandler\",{\"1\":{\"2101\":1}}],[\"也可以直接写成匿名实现类\",{\"1\":{\"2090\":1}}],[\"也可以直接使用int类型的常量值\",{\"1\":{\"536\":1}}],[\"也可以用于自定义类\",{\"1\":{\"1704\":1}}],[\"也可以调用静态的方法或属性\",{\"1\":{\"1235\":1}}],[\"也可以调用nextxxx方法\",{\"1\":{\"640\":1,\"761\":1}}],[\"也可以初始化\",{\"1\":{\"1228\":1}}],[\"也可以都用全类名\",{\"1\":{\"1096\":1}}],[\"也可以通过继承其他角色的权限\",{\"1\":{\"3183\":1}}],[\"也可以通过修改响应头\",{\"1\":{\"2641\":1}}],[\"也可以通过response对象设置相应消息数据\",{\"1\":{\"2583\":1}}],[\"也可以通过添加this增加可读性\",{\"1\":{\"1084\":1}}],[\"也可以通过表达式添加\",{\"1\":{\"749\":1}}],[\"也可以显式的创建一个空参构造器\",{\"1\":{\"1072\":1}}],[\"也可以动态初始化\",{\"1\":{\"989\":1}}],[\"也可以表示具体的文件名\",{\"1\":{\"813\":1}}],[\"也可以简单的理解在\",{\"1\":{\"737\":1}}],[\"也可以大于\",{\"1\":{\"689\":1}}],[\"也可以进行指定\",{\"1\":{\"535\":1}}],[\"也可以是索引规范文档\",{\"1\":{\"3116\":1}}],[\"也可以是隔离级别常量\",{\"1\":{\"2390\":1}}],[\"也可以是相对的\",{\"1\":{\"1995\":1}}],[\"也可以是文件名\",{\"1\":{\"1885\":1}}],[\"也可以是它的父类\",{\"1\":{\"1349\":1}}],[\"也可以是接口\",{\"1\":{\"1153\":1}}],[\"也可以是字符串\",{\"1\":{\"530\":1}}],[\"也可以是其他数据格式\",{\"1\":{\"368\":1}}],[\"也可以使用查询语句\",{\"1\":{\"3080\":1}}],[\"也可以使用put请求\",{\"1\":{\"2903\":1}}],[\"也可以使用其他zip压缩工具\",{\"1\":{\"2731\":1}}],[\"也可以使用构造函数初始化\",{\"1\":{\"1480\":1}}],[\"也可以使用collection\",{\"1\":{\"496\":1}}],[\"也可以使用\",{\"1\":{\"424\":1,\"2188\":1}}],[\"也可以单独部署\",{\"1\":{\"391\":1}}],[\"也可以同时为多个包设置日志等级\",{\"1\":{\"249\":1}}],[\"也可以输入临时属性\",{\"1\":{\"212\":1}}],[\"也可以说热部署的过程实际上是重新加载restart类加载器中的信息\",{\"1\":{\"139\":1}}],[\"由目录结构可知\",{\"1\":{\"2856\":1}}],[\"由容器创建servlet对象\",{\"1\":{\"2545\":1}}],[\"由不同子类实现\",{\"1\":{\"2433\":1}}],[\"由接口名\",{\"1\":{\"2135\":1}}],[\"由5部分组成\",{\"1\":{\"1989\":1}}],[\"由objectinputstream\",{\"1\":{\"1894\":1}}],[\"由构造器指定\",{\"1\":{\"1857\":1}}],[\"由这四个类派生出来的子类名称都是以其父类名作为子类名后缀\",{\"1\":{\"1776\":1}}],[\"由开发人员手动创建\",{\"1\":{\"1319\":1}}],[\"由虚拟机\",{\"1\":{\"1319\":1}}],[\"由局部内部类和局部变量的声明周期不同所致\",{\"1\":{\"1212\":1}}],[\"由垃圾回收机制自动调用\",{\"1\":{\"1176\":1}}],[\"由规定可知\",{\"1\":{\"1150\":1}}],[\"由26\",{\"1\":{\"834\":1}}],[\"由参数决定\",{\"1\":{\"573\":1}}],[\"由于副本集未初始化\",{\"1\":{\"3147\":1}}],[\"由于es内置了jdk\",{\"1\":{\"2857\":1}}],[\"由于session是保存在内存中的\",{\"1\":{\"2823\":1}}],[\"由于session数据是保存在一个对象里的\",{\"1\":{\"2812\":1}}],[\"由于servlet对象指挥创建一次\",{\"1\":{\"2554\":1}}],[\"由于xml中标签是自由设置的\",{\"1\":{\"2774\":1}}],[\"由于所有用户都可以创建和使用\",{\"1\":{\"2689\":1}}],[\"由于是由浏览器发送的两次请求\",{\"1\":{\"2664\":1}}],[\"由于是逻辑上的异常\",{\"1\":{\"1360\":1}}],[\"由于数据库连接得以重用\",{\"1\":{\"2419\":1}}],[\"由于参数也一样\",{\"1\":{\"2156\":1}}],[\"由于后面的方法已经定义过了\",{\"1\":{\"2151\":1}}],[\"由于关闭流是必须要进行的操作\",{\"1\":{\"1803\":1}}],[\"由于属性文件里的\",{\"1\":{\"1668\":1}}],[\"由于使用runnable接口创建多个线程时\",{\"1\":{\"1495\":1}}],[\"由于多态的缘故\",{\"1\":{\"1493\":1}}],[\"由于运行时异常比较常见\",{\"1\":{\"1347\":1}}],[\"由于java虚拟机需要调用类的main\",{\"1\":{\"1293\":1}}],[\"由于jar中的信息不会变化\",{\"1\":{\"139\":1}}],[\"由于单例模式只生成一个实例\",{\"1\":{\"1239\":1}}],[\"由于静态变量的加载早于对象\",{\"1\":{\"1230\":1}}],[\"由于类只会加载一次\",{\"1\":{\"1229\":1}}],[\"由于不需要创建对象就可以调用类方法\",{\"1\":{\"1224\":1}}],[\"由于该类的构造器是private的\",{\"1\":{\"632\":1}}],[\"由于number是抽象类\",{\"1\":{\"523\":1}}],[\"由于这里直接用person限制了因此\",{\"1\":{\"501\":1}}],[\"由\",{\"1\":{\"181\":1,\"1923\":1}}],[\"由spring将这组数据加载到数据对象中\",{\"1\":{\"129\":1}}],[\"页面介绍\",{\"0\":{\"3057\":1}}],[\"页面设置的编码格式为utf\",{\"1\":{\"2629\":1}}],[\"页面上滑\",{\"1\":{\"1446\":1}}],[\"页面功能调整\",{\"1\":{\"338\":1}}],[\"页面消息处理\",{\"1\":{\"338\":1}}],[\"页面数据处理\",{\"1\":{\"338\":1}}],[\"页面开发\",{\"1\":{\"338\":1}}],[\"页面目录\",{\"1\":{\"199\":1}}],[\"页面\",{\"1\":{\"138\":1,\"198\":1}}],[\"页面等信息\",{\"1\":{\"137\":1}}],[\"自反性\",{\"1\":{\"1180\":1}}],[\"自减不会改变数据类型\",{\"1\":{\"893\":1}}],[\"自减的细节\",{\"0\":{\"893\":1}}],[\"自增不会改变变量的数据类型\",{\"1\":{\"893\":1}}],[\"自增\",{\"0\":{\"893\":1},\"1\":{\"893\":1}}],[\"自己不会存储元素\",{\"1\":{\"2193\":1}}],[\"自己写的程序用的\",{\"1\":{\"1938\":1}}],[\"自己命名标识符时要避免使用这些保留字\",{\"1\":{\"832\":1}}],[\"自己手动添加\",{\"1\":{\"336\":1}}],[\"自然排序和定制排序\",{\"1\":{\"1686\":1}}],[\"自然排序\",{\"0\":{\"1657\":1,\"1687\":1,\"2226\":1},\"1\":{\"493\":1,\"684\":1,\"686\":1,\"687\":1,\"1639\":1,\"2226\":1}}],[\"自定义\",{\"0\":{\"2902\":1}}],[\"自定义的标签名\",{\"1\":{\"2772\":1}}],[\"自定义的异常通过throw抛出\",{\"1\":{\"1363\":1}}],[\"自定义的异常也是可以throws到调用处的\",{\"1\":{\"1361\":1}}],[\"自定义一个文件名用来测试\",{\"1\":{\"2686\":1}}],[\"自定义一个类\",{\"1\":{\"2524\":1}}],[\"自定义resultsethandler的实现类\",{\"0\":{\"2442\":1}}],[\"自定义员工类对象\",{\"1\":{\"2172\":1,\"2175\":1,\"2178\":1}}],[\"自定义函数式接口\",{\"0\":{\"2140\":1}}],[\"自定义缓冲区数组大小\",{\"1\":{\"1829\":1}}],[\"自定义泛型方法\",{\"0\":{\"1727\":1}}],[\"自定义泛型类\",{\"0\":{\"1713\":1,\"1718\":1,\"1721\":1}}],[\"自定义泛型\",{\"0\":{\"1712\":1}}],[\"自定义注解自动继承了java\",{\"1\":{\"1395\":1}}],[\"自定义注解\",{\"0\":{\"1391\":1},\"1\":{\"1390\":1}}],[\"自定义枚举类的步骤\",{\"0\":{\"1378\":1}}],[\"自定义枚举类\",{\"0\":{\"1372\":1}}],[\"自定义枚举类说明\",{\"0\":{\"1371\":1}}],[\"自定义异常最重要的是异常类的名字\",{\"1\":{\"1363\":1}}],[\"自定义异常需要提供serialversionuid\",{\"1\":{\"1363\":1}}],[\"自定义异常类的意义在于异常类的名字\",{\"1\":{\"1365\":1}}],[\"自定义异常类的总结\",{\"0\":{\"1365\":1}}],[\"自定义异常类的创建说明\",{\"0\":{\"1363\":1}}],[\"自定义异常类示例\",{\"0\":{\"1364\":1}}],[\"自定义异常类通常需要编写几个重载的构造器\",{\"1\":{\"1363\":1}}],[\"自定义异常类\",{\"0\":{\"1362\":1}}],[\"自定义异常中定义的异常信息\",{\"1\":{\"1361\":1}}],[\"自定义view\",{\"1\":{\"1292\":1}}],[\"自定义重写tostring\",{\"0\":{\"1186\":1}}],[\"自定义类型\",{\"1\":{\"2781\":2}}],[\"自定义类型的说明\",{\"1\":{\"2781\":1}}],[\"自定义类employee中\",{\"1\":{\"2157\":1}}],[\"自定义类实线序列化与反序列化\",{\"0\":{\"1906\":1}}],[\"自定义类中一定要重写equal和hashcode方法\",{\"1\":{\"1654\":1}}],[\"自定义类重写equals\",{\"0\":{\"1180\":1}}],[\"自定义类\",{\"0\":{\"2157\":1,\"2166\":1},\"1\":{\"662\":2}}],[\"自定义类的对象排序\",{\"0\":{\"509\":1}}],[\"自定义排序\",{\"1\":{\"684\":1}}],[\"自定义排序算法\",{\"1\":{\"646\":1}}],[\"自定义排序规则\",{\"1\":{\"645\":1}}],[\"自定义写入方式\",{\"1\":{\"574\":2,\"575\":2}}],[\"自定义格式\",{\"0\":{\"487\":1},\"1\":{\"480\":1}}],[\"自定义组名\",{\"1\":{\"249\":1}}],[\"自定义配置文件\",{\"0\":{\"219\":1}}],[\"自定义临时属性\",{\"1\":{\"213\":1}}],[\"自定义开发代码\",{\"1\":{\"138\":1}}],[\"自动销毁内存中的session\",{\"1\":{\"2825\":1}}],[\"自动将响应头里的set\",{\"1\":{\"2802\":1}}],[\"自动更新class和资源\",{\"1\":{\"2502\":1}}],[\"自动调用run方法\",{\"1\":{\"1471\":1}}],[\"自动调用tostring\",{\"1\":{\"1187\":1}}],[\"自动抛出\",{\"1\":{\"1319\":1}}],[\"自动生成\",{\"1\":{\"1319\":1}}],[\"自动释放\",{\"1\":{\"1298\":1}}],[\"自动拆箱\",{\"1\":{\"1195\":2}}],[\"自动装箱\",{\"1\":{\"1195\":2}}],[\"自动装箱与自动拆箱\",{\"0\":{\"1195\":1}}],[\"自动装配\",{\"1\":{\"132\":1}}],[\"自动转\",{\"1\":{\"1163\":1}}],[\"自动类型转换的逆过程\",{\"1\":{\"869\":1}}],[\"自动类型转换\",{\"1\":{\"863\":1}}],[\"自动类型提升\",{\"0\":{\"863\":1},\"1\":{\"1178\":1}}],[\"自动编译执行\",{\"1\":{\"794\":1}}],[\"自动创建\",{\"1\":{\"573\":1}}],[\"自动创建好了\",{\"1\":{\"89\":1}}],[\"自动添加getter\",{\"1\":{\"344\":1}}],[\"自动携带了众多basemapper中的方法\",{\"1\":{\"283\":1}}],[\"自动产生mapper接口的对象\",{\"1\":{\"274\":1}}],[\"自动在该模块中生效\",{\"1\":{\"261\":1}}],[\"自动构建项目build\",{\"0\":{\"145\":1}}],[\"自动构建了项目的目录\",{\"1\":{\"74\":1}}],[\"自动启动热部署\",{\"0\":{\"144\":1}}],[\"自动配置\",{\"1\":{\"29\":1}}],[\"发给对方一大堆源文件是非常不好的\",{\"1\":{\"2738\":1}}],[\"发送删除所以你的请求\",{\"1\":{\"2978\":1}}],[\"发送请求\",{\"1\":{\"2820\":1,\"2975\":1,\"2977\":1,\"2980\":1,\"2983\":1,\"2984\":1,\"2986\":1,\"2987\":1,\"2991\":1,\"2992\":1,\"2993\":1,\"2997\":1,\"3000\":1,\"3003\":1,\"3006\":1,\"3008\":1,\"3010\":1,\"3015\":1,\"3019\":1}}],[\"发送多个cookie\",{\"0\":{\"2804\":1}}],[\"发送cookie\",{\"1\":{\"2798\":1}}],[\"发送cookie对象\",{\"0\":{\"2794\":1},\"1\":{\"2791\":1}}],[\"发送到客户端\",{\"1\":{\"2794\":1}}],[\"发送端示例\",{\"0\":{\"1983\":1}}],[\"发送端与接收端是两个独立的运行程序\",{\"1\":{\"1982\":1}}],[\"发送和接收\",{\"1\":{\"1981\":1}}],[\"发送数据结束时无需释放资源\",{\"1\":{\"1957\":1}}],[\"发送不管对方是否准备好\",{\"1\":{\"1957\":1}}],[\"发送消息给运维等\",{\"1\":{\"369\":1}}],[\"发生阻塞\",{\"1\":{\"1548\":2}}],[\"发生了重定向\",{\"1\":{\"2663\":1}}],[\"发生了乱码\",{\"1\":{\"1315\":1}}],[\"发生了二进制运算\",{\"1\":{\"869\":1}}],[\"发生变化\",{\"1\":{\"136\":1}}],[\"发现打印了hello\",{\"1\":{\"2534\":1}}],[\"发现自己需要的锁\",{\"1\":{\"1548\":1}}],[\"发现会出现重复数字\",{\"1\":{\"1509\":1}}],[\"发现\",{\"1\":{\"237\":1,\"2709\":1}}],[\"发现端口被占用了\",{\"1\":{\"209\":1}}],[\"发现产生了变化就重新加载一次\",{\"1\":{\"135\":1}}],[\"发布和使用类库\",{\"0\":{\"2738\":1}}],[\"发布模式\",{\"1\":{\"2103\":1}}],[\"发布\",{\"0\":{\"191\":1},\"1\":{\"189\":1}}],[\"和单实例的用户登录认证类似\",{\"1\":{\"3209\":1}}],[\"和单机mongodb差不多\",{\"1\":{\"3142\":1}}],[\"和数据库信息\",{\"1\":{\"3198\":1}}],[\"和数组元素的默认值一样\",{\"1\":{\"1025\":1}}],[\"和数组第一个元素的内存地址\",{\"1\":{\"979\":1}}],[\"和其它数据库\",{\"1\":{\"3198\":1}}],[\"和排序方式\",{\"1\":{\"3109\":1}}],[\"和命令编写顺序无关\",{\"1\":{\"3097\":1}}],[\"和$有特别的意义\",{\"1\":{\"3079\":1}}],[\"和code\",{\"1\":{\"3033\":1}}],[\"和新增文档一样\",{\"1\":{\"2910\":1}}],[\"和value\",{\"1\":{\"2793\":1}}],[\"和html一样\",{\"1\":{\"2772\":1}}],[\"和httpservletrequest等域对象的创建与销毁事件\",{\"1\":{\"2711\":1}}],[\"和hashcode\",{\"1\":{\"1637\":1,\"1664\":1,\"1670\":1}}],[\"和request对象一样\",{\"1\":{\"2688\":1}}],[\"和requestfacade一样\",{\"1\":{\"2593\":1}}],[\"和resume\",{\"1\":{\"1527\":1}}],[\"和mysql对比\",{\"0\":{\"3031\":1}}],[\"和mysql里的排序差不多\",{\"1\":{\"2950\":1}}],[\"和mysql里的分页差不多\",{\"1\":{\"2947\":1}}],[\"和mysql的组合查询类似\",{\"1\":{\"2934\":1,\"2995\":1}}],[\"和mybatis\",{\"1\":{\"323\":1}}],[\"和mybatis的连接配置一样\",{\"1\":{\"281\":1}}],[\"和maven的坐标\",{\"1\":{\"2489\":1,\"2493\":1}}],[\"和输出type\",{\"1\":{\"2487\":1}}],[\"和直接创建web\",{\"1\":{\"2484\":1}}],[\"和一个或多个备份节点\",{\"1\":{\"3128\":1}}],[\"和一个用来连接和关闭资源的jdbc工具类\",{\"1\":{\"2396\":1}}],[\"和一些不常用的\",{\"1\":{\"2138\":1}}],[\"和业务耦合\",{\"1\":{\"2394\":1}}],[\"和删除普通字段的操作一样\",{\"1\":{\"2364\":1}}],[\"和添加的步骤一样\",{\"1\":{\"2364\":1}}],[\"和给占位符赋的值\",{\"1\":{\"2331\":1}}],[\"和初始值类型相同的值\",{\"1\":{\"2239\":1}}],[\"和eat\",{\"1\":{\"2096\":1}}],[\"和equals\",{\"1\":{\"1646\":1,\"1649\":1,\"1661\":1}}],[\"和静态方法\",{\"1\":{\"2029\":1}}],[\"和outputstream\",{\"1\":{\"1966\":1}}],[\"和ojbectoutputsteam两个类组成\",{\"1\":{\"1894\":1}}],[\"和网络互联协议\",{\"1\":{\"1955\":1}}],[\"和println\",{\"1\":{\"1872\":1}}],[\"和流基类的字节流方法基本一样\",{\"1\":{\"1857\":1}}],[\"和流基类的read方法类似\",{\"1\":{\"1850\":1}}],[\"和流基类的方法一样\",{\"1\":{\"1796\":1}}],[\"和流的基类基本一致\",{\"1\":{\"1844\":1}}],[\"和节点流的操作一样\",{\"1\":{\"1833\":2}}],[\"和类初始化给的类型一致或是object\",{\"1\":{\"1730\":1}}],[\"和last\",{\"1\":{\"1624\":1}}],[\"和wait\",{\"0\":{\"1555\":1}}],[\"和正常类一样\",{\"1\":{\"1382\":1}}],[\"和普通类一样\",{\"1\":{\"1380\":1,\"1382\":1}}],[\"和创建一个普通对象一样\",{\"1\":{\"1319\":1}}],[\"和饿汉式差不多\",{\"1\":{\"1241\":1}}],[\"和x不同类型的对象\",{\"1\":{\"1180\":1}}],[\"和==的作用是相同的\",{\"1\":{\"1179\":1}}],[\"和方法重载一样\",{\"1\":{\"1071\":1}}],[\"和对象\",{\"1\":{\"1007\":1}}],[\"和表达式2为\",{\"0\":{\"913\":1}}],[\"和|\",{\"1\":{\"905\":1}}],[\"和基本数据类型一样\",{\"1\":{\"876\":1}}],[\"和整形类似\",{\"1\":{\"844\":1}}],[\"和3种引用类型\",{\"1\":{\"827\":1}}],[\"和持续时间\",{\"1\":{\"461\":1}}],[\"和servlet类似\",{\"1\":{\"2587\":1}}],[\"和setxxx\",{\"1\":{\"1057\":1,\"1058\":1}}],[\"和sql的distinct类似\",{\"1\":{\"2211\":1}}],[\"和sql中的效果类似\",{\"1\":{\"2204\":1}}],[\"和string\",{\"1\":{\"526\":1}}],[\"和string的length方法类似\",{\"1\":{\"451\":1}}],[\"和spring整合junit一样\",{\"1\":{\"183\":1}}],[\"和\",{\"0\":{\"465\":1,\"2191\":1},\"1\":{\"262\":2,\"470\":1,\"655\":1,\"681\":1,\"905\":2,\"1402\":4,\"1429\":1,\"1432\":1,\"1578\":1,\"1582\":2,\"1661\":2,\"1694\":1,\"1783\":1,\"1973\":1,\"1981\":1,\"1996\":3,\"2201\":1,\"2211\":1,\"2241\":1,\"2435\":1,\"2706\":1,\"2763\":2,\"2842\":1,\"2844\":1,\"2849\":1,\"2855\":1,\"2878\":1,\"2942\":1,\"2953\":1,\"2954\":1,\"3013\":1,\"3014\":1,\"3061\":1,\"3097\":1}}],[\"和自定义bean的属性绑定操作类似\",{\"1\":{\"161\":1}}],[\"和我们的程序是平级的\",{\"1\":{\"136\":1}}],[\"和需要添加的依赖\",{\"1\":{\"72\":1}}],[\"方能进行连接\",{\"1\":{\"3225\":1}}],[\"方可实例化\",{\"1\":{\"1261\":1}}],[\"方法向集合中插入文档\",{\"1\":{\"3071\":1}}],[\"方法不一致\",{\"1\":{\"2887\":1}}],[\"方法进行数据的添加操作\",{\"1\":{\"2758\":1}}],[\"方法判断该用户名是否存在\",{\"1\":{\"2758\":1}}],[\"方法使用的频率会比较高\",{\"1\":{\"2625\":1}}],[\"方法即可\",{\"1\":{\"2559\":1,\"3118\":1}}],[\"方法作为抽象\",{\"1\":{\"2559\":1}}],[\"方法作为程序的入口\",{\"1\":{\"1293\":1}}],[\"方法调用之后\",{\"1\":{\"2550\":1}}],[\"方法调用时所需要的参数\",{\"1\":{\"2092\":1}}],[\"方法调用时实际传给形参的参数值\",{\"1\":{\"1041\":1}}],[\"方法完成资源的释放\",{\"1\":{\"2550\":1}}],[\"方法对数据进行排序\",{\"1\":{\"3097\":1}}],[\"方法对请求进行处理\",{\"1\":{\"2549\":1}}],[\"方法对应的myannotation的value值\",{\"1\":{\"1432\":1}}],[\"方法初始化这个对象\",{\"1\":{\"2548\":1}}],[\"方法检测下一行是否有效\",{\"1\":{\"2340\":1}}],[\"方法移动到下一行\",{\"1\":{\"2340\":1}}],[\"方法有两个参数\",{\"1\":{\"2321\":1,\"2322\":1}}],[\"方法都是空参\",{\"1\":{\"2159\":1}}],[\"方法都得到一个全新的迭代器对象\",{\"1\":{\"1589\":1}}],[\"方法引用写法\",{\"0\":{\"2156\":1}}],[\"方法引用示例\",{\"0\":{\"2153\":1}}],[\"方法引用时\",{\"1\":{\"2152\":1}}],[\"方法引用介绍\",{\"0\":{\"2147\":1}}],[\"方法引用\",{\"0\":{\"2146\":1,\"2159\":1,\"2162\":1,\"2165\":1,\"2168\":1},\"1\":{\"2142\":1,\"2148\":1}}],[\"方法将抛出instantiationexception异常\",{\"1\":{\"2037\":1}}],[\"方法将该线程挂起\",{\"1\":{\"1527\":1}}],[\"方法在多线程环境中被正确加锁和同步\",{\"1\":{\"2028\":1}}],[\"方法会返回一个\",{\"1\":{\"1976\":1}}],[\"方法获得输出流\",{\"1\":{\"1969\":1}}],[\"方法获得输入流\",{\"1\":{\"1969\":1}}],[\"方法获取事件涉及的httpsession对象\",{\"1\":{\"2721\":1}}],[\"方法获取\",{\"1\":{\"674\":1,\"2316\":1,\"2319\":1}}],[\"方法获取输入的字符串\",{\"1\":{\"637\":1,\"758\":1}}],[\"方法获取class对象\",{\"1\":{\"587\":1,\"2019\":1}}],[\"方法用来获取\",{\"1\":{\"1919\":1}}],[\"方法二\",{\"1\":{\"1870\":1}}],[\"方法一\",{\"1\":{\"1870\":1}}],[\"方法时\",{\"1\":{\"1678\":1,\"2676\":1}}],[\"方法时不必创建对象\",{\"1\":{\"1293\":1}}],[\"方法或者compare\",{\"1\":{\"1666\":1,\"1685\":1}}],[\"方法或字段声明之前\",{\"1\":{\"808\":1}}],[\"方法比较的\",{\"1\":{\"1649\":1}}],[\"方法比较相等\",{\"1\":{\"1637\":1}}],[\"方法返回一个集合中的所有索引的数组\",{\"1\":{\"3109\":1}}],[\"方法返回符合条件的全部记录条数\",{\"1\":{\"3095\":1}}],[\"方法返回0\",{\"1\":{\"1666\":1,\"1685\":1}}],[\"方法返回\",{\"1\":{\"1664\":2}}],[\"方法返回值也相等\",{\"1\":{\"1637\":1}}],[\"方法返回所要的数据\",{\"1\":{\"1030\":1}}],[\"方法之前必须要调用it\",{\"1\":{\"1597\":1}}],[\"方法之后已经调用了\",{\"1\":{\"678\":1,\"1600\":1}}],[\"方法唤醒\",{\"1\":{\"1551\":1}}],[\"方法暂停当前线程的执行\",{\"1\":{\"1527\":1}}],[\"方法定义了线程的操作和功能\",{\"1\":{\"1501\":1}}],[\"方法列表\",{\"0\":{\"1479\":1}}],[\"方法启动\",{\"1\":{\"1477\":1}}],[\"方法由jvm调用\",{\"1\":{\"1476\":1}}],[\"方法前调用thread\",{\"1\":{\"1463\":1}}],[\"方法同时被\",{\"1\":{\"1432\":1}}],[\"方法声明\",{\"1\":{\"1405\":1}}],[\"方法声明时的参数\",{\"1\":{\"1041\":1}}],[\"方法等已过时\",{\"1\":{\"1389\":1,\"1390\":1}}],[\"方法直接用即可\",{\"1\":{\"1379\":1}}],[\"方法直接使用父类的\",{\"1\":{\"1365\":1}}],[\"方法重写时的异常规则\",{\"0\":{\"1354\":1}}],[\"方法区\",{\"1\":{\"1298\":1}}],[\"方法执行完\",{\"1\":{\"1298\":1}}],[\"方法如果有返回值\",{\"1\":{\"1294\":1}}],[\"方法可以通过参数指定排序的字段\",{\"1\":{\"3097\":1}}],[\"方法可以作为我们与控制台交互的方式\",{\"1\":{\"1293\":1}}],[\"方法可以声明0个\",{\"1\":{\"1029\":1}}],[\"方法也是一个普通的静态方法\",{\"1\":{\"1293\":1}}],[\"方法来跳过指定数量的数据\",{\"1\":{\"3096\":1}}],[\"方法来读取指定数量的数据\",{\"1\":{\"3096\":1}}],[\"方法来设置这些参数\",{\"1\":{\"2321\":1,\"2322\":1}}],[\"方法来比较元素之间的大小关系\",{\"1\":{\"1639\":1}}],[\"方法来启动这个线程\",{\"1\":{\"1470\":1}}],[\"方法来完成操作的\",{\"1\":{\"1469\":1}}],[\"方法来\",{\"1\":{\"1181\":1}}],[\"方法来获得一个\",{\"1\":{\"736\":1}}],[\"方法是由编译期自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的\",{\"1\":{\"2028\":1}}],[\"方法是阻塞的\",{\"1\":{\"1834\":1}}],[\"方法是否包含myannotation注解\",{\"1\":{\"1432\":1}}],[\"方法是可以连续调用的\",{\"1\":{\"1294\":1}}],[\"方法是可以有参数的\",{\"1\":{\"1041\":1}}],[\"方法是静态的\",{\"1\":{\"1293\":1}}],[\"方法是被重写过的\",{\"1\":{\"1181\":1}}],[\"方法必须由其所在类或对象调用才有意义\",{\"1\":{\"1041\":1}}],[\"方法递归包含了一种隐式的循环\",{\"1\":{\"1035\":1}}],[\"方法访问类的成员\",{\"0\":{\"1034\":1}}],[\"方法访问非\",{\"1\":{\"1015\":1}}],[\"方法被调用一次\",{\"1\":{\"1033\":1}}],[\"方法功能的体现\",{\"1\":{\"1029\":1}}],[\"方法体逻辑\",{\"1\":{\"2151\":1}}],[\"方法体都省了\",{\"1\":{\"2142\":1}}],[\"方法体都没有关系\",{\"1\":{\"1037\":1}}],[\"方法体外的\",{\"1\":{\"2116\":1}}],[\"方法体\",{\"1\":{\"1029\":2,\"2156\":1}}],[\"方法形参\",{\"1\":{\"1023\":1,\"1025\":1}}],[\"方法内\",{\"1\":{\"1023\":1}}],[\"方法修改指定字符或字符串时\",{\"1\":{\"880\":1}}],[\"方法和getproperty\",{\"1\":{\"1668\":1}}],[\"方法和类\",{\"1\":{\"1214\":1}}],[\"方法和构造器\",{\"1\":{\"1078\":1}}],[\"方法和\",{\"1\":{\"833\":1}}],[\"方法上面\",{\"1\":{\"1400\":1}}],[\"方法上的文档格式如下\",{\"1\":{\"812\":1}}],[\"方法上常用文档标记\",{\"0\":{\"812\":1}}],[\"方法签名throws对应的异常\",{\"1\":{\"812\":1}}],[\"方法名\",{\"1\":{\"810\":1,\"835\":1,\"1011\":1,\"1029\":2,\"1047\":2,\"1233\":1,\"1288\":1,\"1380\":1,\"1732\":1,\"2048\":2,\"2150\":1,\"2714\":1,\"2715\":1,\"2716\":1,\"2717\":2,\"2718\":2,\"2719\":2,\"2720\":2,\"2721\":1}}],[\"方法名和参数\",{\"1\":{\"288\":1}}],[\"方法中只要规定了返回值类型\",{\"1\":{\"2116\":1}}],[\"方法中只能调用方法或属性\",{\"1\":{\"1033\":1}}],[\"方法中操作的是形参中的m\",{\"1\":{\"1044\":1}}],[\"方法中也可以定义变量\",{\"1\":{\"1034\":1}}],[\"方法中\",{\"1\":{\"1029\":1,\"1034\":1}}],[\"方法中不要加\",{\"1\":{\"808\":1}}],[\"方法中指明如何比较大小\",{\"1\":{\"496\":1}}],[\"方法得到该类的实例\",{\"1\":{\"750\":1,\"756\":1}}],[\"方法的注解\",{\"1\":{\"2048\":1}}],[\"方法的过程\",{\"1\":{\"2028\":1}}],[\"方法的使用\",{\"1\":{\"1826\":1}}],[\"方法的使用示例\",{\"0\":{\"1746\":1}}],[\"方法的主体称为线程体\",{\"1\":{\"1469\":1}}],[\"方法的method实例\",{\"1\":{\"1432\":2}}],[\"方法的类型\",{\"1\":{\"1288\":1}}],[\"方法的写法\",{\"1\":{\"1288\":1}}],[\"方法的形参被赋予了m\",{\"1\":{\"1044\":1}}],[\"方法的参数可以是任意数据类型\",{\"1\":{\"1042\":1}}],[\"方法的参数名\",{\"1\":{\"812\":1}}],[\"方法的重载\",{\"0\":{\"1036\":1}}],[\"方法的结果应该返回给调用者\",{\"1\":{\"1033\":1}}],[\"方法的调用\",{\"0\":{\"1031\":1}}],[\"方法的调用者\",{\"1\":{\"626\":1,\"2066\":1}}],[\"方法的分类\",{\"0\":{\"1029\":1}}],[\"方法的局部变量\",{\"1\":{\"828\":1}}],[\"方法的返回值来比较大小\",{\"1\":{\"497\":1}}],[\"方法参数是一个包含文件路径属性的file对象\",{\"1\":{\"559\":1}}],[\"方法\",{\"0\":{\"1027\":1,\"2551\":1,\"2690\":1},\"1\":{\"461\":1,\"497\":1,\"506\":1,\"678\":1,\"681\":1,\"797\":1,\"810\":1,\"828\":1,\"1009\":1,\"1010\":1,\"1011\":1,\"1026\":1,\"1028\":1,\"1057\":1,\"1058\":1,\"1062\":1,\"1075\":1,\"1080\":1,\"1081\":1,\"1100\":1,\"1132\":1,\"1134\":1,\"1157\":1,\"1158\":2,\"1175\":1,\"1176\":1,\"1179\":1,\"1181\":1,\"1185\":1,\"1206\":1,\"1222\":1,\"1237\":1,\"1293\":1,\"1351\":1,\"1387\":1,\"1413\":1,\"1432\":1,\"1526\":1,\"1588\":2,\"1600\":1,\"1637\":1,\"1643\":1,\"1647\":1,\"1661\":1,\"1668\":1,\"1674\":1,\"1711\":1,\"1826\":1,\"1872\":1,\"2009\":1,\"2069\":2,\"2172\":2,\"2175\":1,\"2178\":1,\"2203\":1,\"2338\":1}}],[\"方便查询\",{\"1\":{\"3027\":1}}],[\"方便区分\",{\"1\":{\"2505\":1}}],[\"方便调试\",{\"1\":{\"2502\":1}}],[\"方便地访问数据库资源\",{\"1\":{\"2279\":1}}],[\"方便看框架源码\",{\"1\":{\"2039\":1}}],[\"方便设置线程属性\",{\"1\":{\"1569\":1}}],[\"方便直接用类调用\",{\"1\":{\"1237\":1}}],[\"方便类的管理\",{\"1\":{\"1086\":1}}],[\"方便进行一些测试\",{\"1\":{\"637\":1,\"758\":1}}],[\"方便维护\",{\"1\":{\"220\":1}}],[\"方便代码的调试\",{\"1\":{\"133\":1}}],[\"方式5\",{\"0\":{\"2301\":1}}],[\"方式4\",{\"0\":{\"2300\":1}}],[\"方式3\",{\"0\":{\"2299\":1,\"2374\":1}}],[\"方式告诉数据库\",{\"1\":{\"2295\":1}}],[\"方式表明可以调用xxx包下的所有结构\",{\"1\":{\"1097\":1}}],[\"方式\",{\"1\":{\"426\":1,\"1082\":1,\"1956\":1}}],[\"方式二\",{\"1\":{\"357\":1,\"564\":2,\"1210\":1,\"1800\":1,\"1812\":1,\"1821\":1,\"3050\":1}}],[\"方式一\",{\"1\":{\"357\":1,\"3050\":1}}],[\"方式2\",{\"0\":{\"2298\":1,\"2373\":1},\"1\":{\"195\":1,\"1197\":2,\"1521\":1,\"2374\":1}}],[\"方式1获取driver实现类的时候使用了第三方api\",{\"1\":{\"2298\":1}}],[\"方式1\",{\"0\":{\"2297\":1,\"2372\":1},\"1\":{\"195\":1,\"1197\":2,\"1521\":1}}],[\"方案优化\",{\"0\":{\"2615\":1}}],[\"方案\",{\"1\":{\"278\":1,\"1140\":1}}],[\"方案2\",{\"0\":{\"2403\":1},\"1\":{\"135\":1}}],[\"方案1\",{\"0\":{\"2402\":1},\"1\":{\"135\":1}}],[\"背景\",{\"0\":{\"1283\":1,\"1444\":1,\"2848\":1},\"1\":{\"135\":1,\"1564\":1}}],[\"服务启动失败\",{\"0\":{\"3243\":1}}],[\"服务实例绑定所有ip\",{\"1\":{\"3142\":1}}],[\"服务实例绑定的ip\",{\"1\":{\"3048\":1,\"3142\":1}}],[\"服务进行访问\",{\"1\":{\"2968\":1}}],[\"服务代码\",{\"0\":{\"2553\":1}}],[\"服务终止\",{\"0\":{\"2550\":1}}],[\"服务相关的\",{\"1\":{\"1291\":1}}],[\"服务\",{\"1\":{\"398\":1,\"2857\":1}}],[\"服务层接口实现类\",{\"1\":{\"313\":1}}],[\"服务层接口\",{\"1\":{\"313\":1}}],[\"服务于运维经理整体调控\",{\"1\":{\"217\":1}}],[\"服务于运维人员配置涉密线上环境\",{\"1\":{\"217\":1}}],[\"服务于项目经理整体调控\",{\"1\":{\"217\":1}}],[\"服务于开发人员本机开发与测试\",{\"1\":{\"217\":1}}],[\"服务器响应结果解析\",{\"0\":{\"2930\":1}}],[\"服务器发\",{\"1\":{\"2900\":1,\"2906\":1,\"2914\":1,\"2924\":1,\"2949\":1,\"2952\":1,\"2955\":1}}],[\"服务器发送的请求路径和创建索引是一致的\",{\"1\":{\"2887\":1}}],[\"服务器性能\",{\"1\":{\"2829\":1}}],[\"服务器关闭\",{\"1\":{\"2825\":1}}],[\"服务器不关闭\",{\"1\":{\"2821\":1}}],[\"服务器都会将该请求视为新的请求\",{\"1\":{\"2788\":1}}],[\"服务器识别浏览器后就可以在同一个会话中多次请求之间来共享数据\",{\"1\":{\"2787\":1}}],[\"服务器用来识别浏览器的过程\",{\"1\":{\"2787\":1}}],[\"服务器需要用来识别请求是否来自同一个浏览器\",{\"1\":{\"2787\":1}}],[\"服务器需要识别多次请求是否来自于同一浏览器\",{\"1\":{\"2787\":1}}],[\"服务器会随机生成一个\",{\"1\":{\"2902\":1}}],[\"服务器会自动获取jsessionid\",{\"1\":{\"2820\":1}}],[\"服务器会自己悄悄的把更新后的程序给重新加载一遍\",{\"1\":{\"133\":1}}],[\"服务器会收到多个请求\",{\"1\":{\"2787\":1}}],[\"服务器会检查是否已经有对应的session\",{\"1\":{\"2676\":1}}],[\"服务器中对应的资源a接收到请求\",{\"1\":{\"2651\":1,\"2658\":1}}],[\"服务器中的java代码\",{\"1\":{\"2523\":1}}],[\"服务器启动时创建servlet对象\",{\"1\":{\"2546\":1}}],[\"服务器tomcat中已经有servlet\",{\"1\":{\"2526\":1}}],[\"服务器配置\",{\"1\":{\"2520\":1}}],[\"服务器软件\",{\"1\":{\"2446\":1}}],[\"服务器自带dbcp数据库连接池\",{\"1\":{\"2420\":1}}],[\"服务器崩溃\",{\"1\":{\"2414\":1}}],[\"服务器程序\",{\"1\":{\"1996\":1}}],[\"服务器程序的工作过程包含以下四个基本的步骤\",{\"1\":{\"1973\":1}}],[\"服务器是一个为其客户端提供某种特定服务的硬件或软件\",{\"1\":{\"1996\":1}}],[\"服务器是一种最常见的网络应用程序模型\",{\"1\":{\"1996\":1}}],[\"服务器必须事先建立一个等待客户请求建立套接字的\",{\"1\":{\"1975\":1}}],[\"服务器端会话技术\",{\"1\":{\"2812\":1}}],[\"服务器端建立serversocket\",{\"0\":{\"1974\":1}}],[\"服务器端socket\",{\"0\":{\"1973\":1}}],[\"服务器就要单独下载这个\",{\"1\":{\"776\":1}}],[\"服务器故障\",{\"1\":{\"369\":1}}],[\"服务器部署使用\",{\"1\":{\"223\":1}}],[\"服务器\",{\"1\":{\"204\":2,\"2665\":2,\"2681\":1}}],[\"服务端会话跟踪技术\",{\"1\":{\"2789\":1}}],[\"服务端使用\",{\"1\":{\"2667\":1}}],[\"服务端接受到数据\",{\"1\":{\"1978\":1}}],[\"服务端\",{\"0\":{\"7\":1},\"1\":{\"10\":1,\"1956\":1,\"1958\":1,\"1959\":2,\"2971\":1}}],[\"而次要人员可能成为选举期间的主要人员\",{\"1\":{\"3132\":1}}],[\"而主要人员可能会退出并成为次要人员\",{\"1\":{\"3132\":1}}],[\"而其他节点被视为次要\",{\"1\":{\"3127\":1}}],[\"而将集合中的词作为词干\",{\"1\":{\"3107\":1}}],[\"而没有在硬盘中\",{\"1\":{\"3064\":1}}],[\"而没有变量和方法的实现\",{\"1\":{\"1254\":1}}],[\"而业务逻辑层和数据访问层的代码不需要发生变化\",{\"1\":{\"2764\":1}}],[\"而业务逻辑层方法调用数据访问层方法进行数据的操作\",{\"1\":{\"2759\":1}}],[\"而业务层的方法名就是要做的业务\",{\"1\":{\"358\":1}}],[\"而classes目录下则包含编译好的servlet类和jsp\",{\"1\":{\"2748\":1}}],[\"而calendar并不比date好多少\",{\"1\":{\"460\":1}}],[\"而src不再web目录下\",{\"1\":{\"2693\":1}}],[\"而servletcontext对象是可以直接跟tomcat通信的\",{\"1\":{\"2685\":1}}],[\"而servlet接口中有service方法\",{\"1\":{\"2538\":1}}],[\"而后缀名可以随便定义\",{\"1\":{\"2687\":1}}],[\"而httpservlet的原理也是如此\",{\"1\":{\"2566\":1}}],[\"而tomcat\",{\"1\":{\"2556\":1}}],[\"而dql操作需要额外关闭一个resultset资源\",{\"1\":{\"2350\":1}}],[\"而持久化的实现过程大多通过各种关系数据库来完成\",{\"1\":{\"2277\":1}}],[\"而nosql的数据就需要java层面去处理了\",{\"1\":{\"2189\":1}}],[\"而lambda表达式可以作为函数式接口的实例\",{\"1\":{\"2148\":1}}],[\"而language\",{\"1\":{\"2108\":1}}],[\"而函数式接口就补气了这个短板\",{\"1\":{\"2133\":1}}],[\"而用反射创建类的对象\",{\"1\":{\"2005\":1}}],[\"而url类则不仅符合语义\",{\"1\":{\"1995\":1}}],[\"而url和urn则是具体的资源标识的方式\",{\"1\":{\"1995\":1}}],[\"而url是uniform\",{\"1\":{\"1995\":1}}],[\"而urn\",{\"1\":{\"1995\":1}}],[\"而utf\",{\"1\":{\"1863\":1}}],[\"而得名\",{\"1\":{\"1955\":1}}],[\"而与再下一层不发生关系\",{\"1\":{\"1952\":1}}],[\"而g是具有泛型声明的类或接口\",{\"1\":{\"1737\":1}}],[\"而输入数据的取值范围是无限的\",{\"1\":{\"1651\":1}}],[\"而如果两个元素通过算法计算的位置是一样的\",{\"1\":{\"1642\":1}}],[\"而jar包则不行\",{\"1\":{\"2749\":1}}],[\"而jar的涵盖范围更广\",{\"1\":{\"2749\":1}}],[\"而java中是驼峰分隔单词的\",{\"1\":{\"2354\":1}}],[\"而java不能直接定义函数\",{\"1\":{\"2133\":1}}],[\"而java\",{\"1\":{\"1572\":1}}],[\"而jdk8中的arraylist的对象的创建类似于单例的懒汉式\",{\"1\":{\"1622\":1}}],[\"而又不需暴露该对象的内部细节\",{\"1\":{\"1587\":1}}],[\"而当前线程排队等候其他线程调用notify\",{\"1\":{\"1551\":1}}],[\"而进程p1申请资源r2\",{\"1\":{\"1545\":1}}],[\"而p2在未释放打印机之前\",{\"1\":{\"1542\":1}}],[\"而多个买票程序通过是否有票的判断时\",{\"1\":{\"1507\":1}}],[\"而应用程序是软件的一个组成部分\",{\"1\":{\"1435\":2}}],[\"而\",{\"1\":{\"1409\":1,\"1412\":1,\"2191\":1,\"2763\":1,\"2764\":1,\"2865\":1,\"3097\":1}}],[\"而执行的方法a可以考虑使用try\",{\"1\":{\"1355\":1}}],[\"而此时若使用多态\",{\"1\":{\"1354\":1}}],[\"而由该方法的调用者负责处理\",{\"1\":{\"1349\":1}}],[\"而对象实体中保存了对象的属性\",{\"1\":{\"1300\":1}}],[\"而对于多态\",{\"1\":{\"1159\":1}}],[\"而使用javabean设计的类\",{\"1\":{\"1286\":1}}],[\"而使用热部署就能解决这个问题\",{\"1\":{\"133\":1}}],[\"而接口实现则是\",{\"1\":{\"1258\":1}}],[\"而它们之间又没有is\",{\"1\":{\"1257\":1}}],[\"而抽象类不能实例化\",{\"1\":{\"1249\":1}}],[\"而并没有产生实质上的对象\",{\"1\":{\"1223\":1}}],[\"而且还可以利用副本服务器做只读服务器\",{\"1\":{\"3125\":1}}],[\"而且还指明了如何locate这个资源\",{\"1\":{\"1988\":1,\"1995\":1}}],[\"而且安全\",{\"1\":{\"2738\":1}}],[\"而且除了路由\",{\"1\":{\"2572\":1}}],[\"而且\",{\"1\":{\"1915\":1}}],[\"而且只执行一次\",{\"1\":{\"1279\":1}}],[\"而且可以多继承\",{\"1\":{\"1260\":1}}],[\"而且是先声明后使用\",{\"1\":{\"1211\":1,\"1212\":1}}],[\"而且string\",{\"1\":{\"1181\":1}}],[\"而且y\",{\"1\":{\"1180\":1}}],[\"而且位置是灵活的\",{\"1\":{\"927\":1}}],[\"而方法的调用是在运行时确定的\",{\"1\":{\"1157\":1}}],[\"而实际使用的是子类\",{\"1\":{\"1150\":1}}],[\"而这多个接口中定义了同名同参数的默认方法\",{\"1\":{\"1269\":1}}],[\"而这个内部的完整的结构又只为外部事物提供服务\",{\"1\":{\"1202\":1,\"1213\":1}}],[\"而这些方法的参数不同\",{\"1\":{\"1159\":1}}],[\"而这种\",{\"1\":{\"1147\":1}}],[\"而这里我们只配置了info\",{\"1\":{\"262\":1}}],[\"而import是导入命名空间的\",{\"1\":{\"1091\":1}}],[\"而参数本身不受影响\",{\"1\":{\"1043\":1}}],[\"而数组名中引用的是这块连续空间的首地址\",{\"1\":{\"961\":1}}],[\"而数组中的元素可以是任何数据类型\",{\"1\":{\"961\":1}}],[\"而加l的操作也延续到了定义变量的时候\",{\"1\":{\"850\":1}}],[\"而表示一个普通的反斜杠是\",{\"1\":{\"737\":1}}],[\"而在dopost方法中\",{\"1\":{\"2614\":1}}],[\"而在每次操作前\",{\"1\":{\"2560\":1,\"2567\":1}}],[\"而在用户输入数据中注入非法的\",{\"1\":{\"2311\":1}}],[\"而在终止操作时一次性全部处理\",{\"1\":{\"2205\":1}}],[\"而在其被解锁之时\",{\"1\":{\"1524\":1}}],[\"而在\",{\"1\":{\"737\":1}}],[\"而我们自定义的类\",{\"1\":{\"662\":1}}],[\"而月份都从0开始\",{\"1\":{\"460\":1}}],[\"而非从磁盘上删除\",{\"1\":{\"2913\":1}}],[\"而非\",{\"1\":{\"2734\":1}}],[\"而非开始时的项目\",{\"1\":{\"2473\":1}}],[\"而非对象\",{\"1\":{\"2152\":1}}],[\"而非char\",{\"1\":{\"1823\":1}}],[\"而非entry\",{\"1\":{\"1678\":1}}],[\"而非地址\",{\"1\":{\"1648\":1}}],[\"而非都当成obj\",{\"1\":{\"1582\":1}}],[\"而非直接调用run\",{\"1\":{\"1470\":1}}],[\"而非运算符\",{\"1\":{\"1179\":1}}],[\"而非形参\",{\"1\":{\"1080\":1,\"1081\":1}}],[\"而非找到了交集\",{\"1\":{\"666\":1}}],[\"而非引用的复制\",{\"1\":{\"647\":1}}],[\"而非字符串\",{\"1\":{\"434\":1,\"744\":1}}],[\"而非内存地址\",{\"1\":{\"404\":1}}],[\"而整合之后\",{\"1\":{\"265\":1}}],[\"而是会报错\",{\"1\":{\"2895\":1}}],[\"而是会去读取一个已经存在的文件\",{\"1\":{\"1887\":1}}],[\"而是用自己捆绑的jdk\",{\"1\":{\"2857\":1}}],[\"而是需要遵守一些规则\",{\"1\":{\"2523\":1}}],[\"而是使用\",{\"1\":{\"2511\":1}}],[\"而是使用synchronizedlist对arraylist数据进行处理\",{\"1\":{\"1628\":1}}],[\"而是独作为一个额外的工具类\",{\"1\":{\"2404\":1}}],[\"而是将数据库连接对象放到了联机池中\",{\"1\":{\"2384\":1}}],[\"而是提供\",{\"1\":{\"1943\":1}}],[\"而是提供更具体的子接口\",{\"1\":{\"1582\":1}}],[\"而是覆盖写\",{\"1\":{\"1889\":1}}],[\"而是从指定指针位置处写\",{\"1\":{\"1889\":1}}],[\"而是内容覆盖\",{\"1\":{\"1889\":1}}],[\"而是要利用object进行强转\",{\"1\":{\"1721\":1}}],[\"而是要么继承抽象类\",{\"1\":{\"1254\":1,\"1258\":1}}],[\"而是通过排序方法\",{\"1\":{\"1656\":1}}],[\"而是通过配置中心获取配置\",{\"1\":{\"222\":1}}],[\"而是根据数据的哈希值决定的\",{\"1\":{\"1634\":1}}],[\"而是在第一次add的时候\",{\"1\":{\"1621\":1}}],[\"而是比较两个对象的\",{\"1\":{\"1179\":1}}],[\"而是报错\",{\"1\":{\"825\":1}}],[\"而是直接改变了源数组\",{\"1\":{\"643\":1}}],[\"而是5个字符还在\",{\"1\":{\"569\":1,\"1808\":1}}],[\"而是\",{\"1\":{\"535\":1,\"1775\":1,\"1780\":1}}],[\"而是已有的内容的长度\",{\"1\":{\"449\":1}}],[\"而是新建一个配置文件\",{\"1\":{\"220\":1}}],[\"而是采用多个配置文件\",{\"1\":{\"214\":1}}],[\"而是自动去查找配置类\",{\"1\":{\"183\":1}}],[\"而占用端口的程序又不能关闭\",{\"1\":{\"209\":1}}],[\"而不扫描任何文档或将文档带入内存\",{\"1\":{\"3122\":1}}],[\"而不应该放到数据库连接内部\",{\"1\":{\"2383\":1}}],[\"而不用自己再去定义了\",{\"1\":{\"2151\":1}}],[\"而不用关心任何改变\",{\"1\":{\"1284\":1}}],[\"而不用调用包装类xxx的xxxvalue\",{\"1\":{\"1195\":1}}],[\"而不用使用构造器\",{\"1\":{\"1195\":1}}],[\"而不用将类导入\",{\"1\":{\"1087\":1}}],[\"而不可以直接访问\",{\"1\":{\"1118\":1}}],[\"而不是ip\",{\"1\":{\"3142\":1}}],[\"而不是默认返回所有字段\",{\"1\":{\"2998\":1}}],[\"而不是提供多个参数\",{\"1\":{\"2996\":1}}],[\"而不是先创建数据对象再转为json\",{\"1\":{\"2986\":1}}],[\"而不是其他内容\",{\"1\":{\"2909\":1}}],[\"而不是工作空间里的路径\",{\"1\":{\"2691\":1}}],[\"而不是实现\",{\"1\":{\"2562\":1}}],[\"而不是重新建立一个\",{\"1\":{\"2416\":1}}],[\"而不是execute\",{\"1\":{\"2336\":1}}],[\"而不是直接操作数据库\",{\"1\":{\"2282\":1}}],[\"而不是进行序列化传输\",{\"1\":{\"1894\":1}}],[\"而不是进行try\",{\"1\":{\"1356\":1}}],[\"而不是分别表示两个符号呢\",{\"1\":{\"1863\":1}}],[\"而不是用object\",{\"1\":{\"1709\":1}}],[\"而不是让用户看乱码\",{\"1\":{\"1315\":1}}],[\"而不是他们的一个抽象\",{\"1\":{\"1257\":1}}],[\"而不是false\",{\"1\":{\"1193\":1}}],[\"而不是日期\",{\"1\":{\"467\":1}}],[\"而不是修改源数据\",{\"1\":{\"465\":1}}],[\"而不是修改了源字符串\",{\"1\":{\"416\":1}}],[\"而不是stringbuffer本身的长度\",{\"1\":{\"451\":1}}],[\"而不是返回一个新的\",{\"1\":{\"449\":1}}],[\"而不是在postman中\",{\"1\":{\"185\":1}}],[\"而不带maven插件打包的结果只是一个普通包\",{\"1\":{\"201\":1}}],[\"而第三方开发的bean源代码不是你自己书写的\",{\"1\":{\"157\":1}}],[\"而默认的版本是3\",{\"1\":{\"72\":1}}],[\"想用需要自己手动安装\",{\"1\":{\"3053\":1}}],[\"想快速迭代开发\",{\"1\":{\"3028\":1}}],[\"想索引中插入数据后\",{\"1\":{\"2966\":1}}],[\"想要在java程序中表示一个真实存在的文件或目录\",{\"1\":{\"1762\":1}}],[\"想再遍历就重新获得迭代器\",{\"1\":{\"1599\":1}}],[\"想不导入直接用也可以\",{\"1\":{\"1095\":1}}],[\"想单独执行某个class\",{\"1\":{\"803\":1}}],[\"想查看效果就要重启服务器\",{\"1\":{\"133\":1}}],[\"想修改版本需要在项目构建完后\",{\"1\":{\"78\":1}}],[\"指令已经没用了\",{\"1\":{\"2772\":1}}],[\"指令以二进制代码形式存在\",{\"1\":{\"772\":1}}],[\"指示是否自动为指定列进行编号\",{\"1\":{\"2345\":1}}],[\"指示指定列中的值是否可以为\",{\"1\":{\"2345\":1}}],[\"指示指定列的最大标准宽度\",{\"1\":{\"2345\":1}}],[\"指的是工作目录下的路径\",{\"1\":{\"2692\":1}}],[\"指的是二维数组的元素\",{\"1\":{\"982\":1}}],[\"指的是二维数组本身\",{\"1\":{\"982\":1}}],[\"指的是获取文件的大小\",{\"1\":{\"544\":1}}],[\"指向项目的目录\",{\"1\":{\"2468\":1}}],[\"指向元素a\",{\"1\":{\"1645\":1}}],[\"指向原来的元素\",{\"1\":{\"1645\":1}}],[\"指向同一个对象\",{\"1\":{\"1303\":1}}],[\"指向的内层数组\",{\"1\":{\"993\":1}}],[\"指向的是内层数组\",{\"1\":{\"990\":1}}],[\"指向了一个一维数组\",{\"1\":{\"982\":1}}],[\"指向某类的某个方法\",{\"1\":{\"810\":1}}],[\"指向集合中的某个元素\",{\"1\":{\"675\":1,\"1591\":1}}],[\"指针指向数据表的第一条记录的前面\",{\"1\":{\"2340\":1}}],[\"指针指向第一个元素前面\",{\"1\":{\"1599\":1}}],[\"指针不会重置\",{\"1\":{\"1599\":1}}],[\"指针就会呆在集合末尾\",{\"1\":{\"677\":1,\"1592\":1}}],[\"指针就往后移动一次\",{\"1\":{\"675\":1,\"1591\":1}}],[\"指针\",{\"0\":{\"675\":1,\"1591\":1,\"2340\":1},\"1\":{\"982\":1,\"2323\":1}}],[\"指明请求对象的关联的索引\",{\"1\":{\"2980\":1}}],[\"指明该词在文章中出现的次数和位置\",{\"1\":{\"2852\":1}}],[\"指明该文件中定义的类所在的包\",{\"1\":{\"1088\":1}}],[\"指明构造器的参数列表\",{\"1\":{\"2068\":1}}],[\"指明读入和写出的文件\",{\"1\":{\"1817\":1}}],[\"指明写出到的文件\",{\"1\":{\"1816\":1}}],[\"指明要操作的文件\",{\"1\":{\"1804\":1}}],[\"指明此方法执行时\",{\"1\":{\"1350\":1}}],[\"指明其权限\",{\"1\":{\"1025\":1}}],[\"指明获取的方法的形参列表\",{\"1\":{\"611\":1,\"2064\":1}}],[\"指明获取的方法的名\",{\"1\":{\"611\":1,\"2064\":1}}],[\"指明当前项目的引导类\",{\"1\":{\"183\":1}}],[\"指定较高的值可使成员更有资格成为主要成员\",{\"1\":{\"3173\":1}}],[\"指定配置文档\",{\"1\":{\"3159\":1}}],[\"指定新成员的主机名和可选的端口号\",{\"1\":{\"3159\":1}}],[\"指定用于保存mongos或mongod进程的进程id的文件位置\",{\"1\":{\"3142\":1}}],[\"指定为true创建唯一索引\",{\"1\":{\"3111\":1}}],[\"指定一个字段作为排序依据\",{\"1\":{\"3009\":1}}],[\"指定模糊查询的偏移值\",{\"1\":{\"3005\":1}}],[\"指定要在与查询筛选器匹配的文档中返回的字段\",{\"1\":{\"3090\":1}}],[\"指定要用于操作的校对规则\",{\"1\":{\"3081\":1}}],[\"指定要操作的字段\",{\"1\":{\"3014\":1}}],[\"指定要查询的索引\",{\"1\":{\"2993\":1,\"2997\":1,\"3000\":1,\"3003\":1,\"3006\":1,\"3008\":1,\"3010\":1,\"3015\":1,\"3019\":1}}],[\"指定要修改的内容\",{\"1\":{\"2983\":1}}],[\"指定要修改的索引和文档的\",{\"1\":{\"2983\":1}}],[\"指定命名空间的标签\",{\"1\":{\"2782\":1}}],[\"指定本地tomcat软件的具体路径\",{\"1\":{\"2502\":1}}],[\"指定打开方式\",{\"1\":{\"1920\":1}}],[\"指定文件的大小\",{\"1\":{\"1920\":1}}],[\"指定字符集\",{\"0\":{\"1848\":1,\"1856\":1}}],[\"指定路径下文件的复制\",{\"1\":{\"1823\":1}}],[\"指定父类泛型具体类型\",{\"0\":{\"1724\":1}}],[\"指定类型参数的值\",{\"1\":{\"1716\":1}}],[\"指定泛型的类型\",{\"1\":{\"1720\":1}}],[\"指定泛型\",{\"1\":{\"1711\":1}}],[\"指定了key和value的泛型\",{\"1\":{\"1710\":1}}],[\"指定了内层数组的长度\",{\"1\":{\"993\":1}}],[\"指定了内层数组长度\",{\"0\":{\"988\":1}}],[\"指定线程的操作\",{\"1\":{\"1568\":1}}],[\"指定需谨慎\",{\"1\":{\"1524\":1}}],[\"指定的目录\",{\"1\":{\"1920\":1}}],[\"指定的时间\",{\"1\":{\"1481\":1}}],[\"指定的millitime毫秒\",{\"1\":{\"1479\":1}}],[\"指定时间\",{\"1\":{\"1481\":1}}],[\"指定创建线程的目标对象\",{\"1\":{\"1468\":1}}],[\"指定所修饰的\",{\"1\":{\"1408\":1,\"1409\":1}}],[\"指定包\",{\"0\":{\"1088\":1}}],[\"指定返回值的类型\",{\"1\":{\"1029\":1}}],[\"指定内层数组长度\",{\"0\":{\"985\":1}}],[\"指定舍入策略\",{\"1\":{\"535\":1}}],[\"指定环境名\",{\"1\":{\"226\":1}}],[\"指定加载的数据\",{\"1\":{\"131\":1,\"156\":1}}],[\"指不依赖开发环境执行打包产生的文件\",{\"1\":{\"189\":1}}],[\"指将程序转换成一个可执行的文件\",{\"1\":{\"189\":1}}],[\"指南\",{\"0\":{\"0\":1},\"1\":{\"10\":1}}],[\"索引默认命名规范\",{\"0\":{\"3114\":1}}],[\"索引的名称\",{\"1\":{\"3111\":1}}],[\"索引的字段\",{\"1\":{\"3109\":1}}],[\"索引的类型\",{\"0\":{\"3104\":1}}],[\"索引引擎版本\",{\"1\":{\"3109\":1}}],[\"索引键的排序顺序\",{\"1\":{\"3105\":1}}],[\"索引项的排序支持有效的相等匹配和基于范围的查询操作\",{\"1\":{\"3103\":1}}],[\"索引支持在mongodb中高效地执行查询\",{\"1\":{\"3103\":1}}],[\"索引库也一样\",{\"1\":{\"2961\":1}}],[\"索引统一编号\",{\"1\":{\"2893\":1}}],[\"索引打开\",{\"1\":{\"2893\":1}}],[\"索引名\",{\"1\":{\"2890\":1,\"2893\":1,\"2899\":1,\"2902\":1,\"2905\":1,\"2908\":1,\"2910\":1,\"2911\":1,\"2913\":1,\"2918\":1,\"2923\":1,\"2926\":1,\"2928\":1,\"2954\":1,\"2963\":1,\"3109\":1}}],[\"索引名称\",{\"1\":{\"2885\":1}}],[\"索引相当于关系型数据库里的\",{\"1\":{\"2881\":1}}],[\"索引位置\",{\"1\":{\"1643\":1}}],[\"索引\",{\"0\":{\"2881\":1,\"2974\":1,\"3103\":1},\"1\":{\"127\":2,\"960\":1,\"2890\":8,\"2901\":1,\"2907\":1,\"2925\":1,\"3031\":1}}],[\"索引操作\",{\"1\":{\"57\":2}}],[\"一样\",{\"1\":{\"3198\":1}}],[\"一主一副本一仲裁\",{\"1\":{\"3133\":1,\"3135\":1}}],[\"一条数据在这里就是一个文档\",{\"1\":{\"2863\":1}}],[\"一条线顺序执行叫一个线程\",{\"1\":{\"1461\":1}}],[\"一组节点构成一个集群\",{\"1\":{\"2845\":1}}],[\"一组api\",{\"1\":{\"2279\":1}}],[\"一是在java安装目录的jre\",{\"1\":{\"2741\":1}}],[\"一是遇到错误就终止程序的运行\",{\"1\":{\"1314\":1}}],[\"一共有三个会话\",{\"1\":{\"2786\":1}}],[\"一共有5种\",{\"1\":{\"2702\":1}}],[\"一共有四种方法\",{\"1\":{\"2017\":1}}],[\"一行代码解决所有乱码问题\",{\"1\":{\"2632\":1}}],[\"一行一行的读\",{\"1\":{\"1834\":1}}],[\"一台主机可以启动多太tomcat服务器\",{\"1\":{\"2504\":1}}],[\"一元运算符\",{\"1\":{\"2202\":1}}],[\"一段时间\",{\"1\":{\"2030\":1}}],[\"一套是针对标准输入输出nio\",{\"1\":{\"1913\":1}}],[\"一致后才能正常反序列化\",{\"1\":{\"1910\":1}}],[\"一致性\",{\"1\":{\"1180\":1}}],[\"一路都不要用\",{\"1\":{\"1721\":1}}],[\"一些特定的服务器端命令也只能从这个数据库运行\",{\"1\":{\"3060\":1}}],[\"一些操作\",{\"0\":{\"1897\":1}}],[\"一些弊端\",{\"1\":{\"1572\":1}}],[\"一些接口的实现集合\",{\"1\":{\"1265\":1}}],[\"一种维护浏览器状态的方法\",{\"1\":{\"2787\":1}}],[\"一种复杂的约束技术\",{\"1\":{\"2775\":1}}],[\"一种简单的约束技术\",{\"1\":{\"2775\":1}}],[\"一种资源跳转方式\",{\"1\":{\"2657\":1}}],[\"一种是\",{\"1\":{\"1463\":2}}],[\"一种程序运行出现的错误\",{\"1\":{\"1458\":1}}],[\"一切皆数据\",{\"1\":{\"1448\":1}}],[\"一款软件具有某些功能\",{\"1\":{\"1440\":1}}],[\"一定注意英文是按照单词进行拆分的而不是字母\",{\"1\":{\"2941\":1}}],[\"一定不要打包servlet包\",{\"1\":{\"2526\":1}}],[\"一定省略的内容\",{\"0\":{\"2115\":1}}],[\"一定会发生类的初始化\",{\"1\":{\"2029\":1}}],[\"一定的规则\",{\"1\":{\"1926\":1}}],[\"一定程度上可以说\",{\"1\":{\"1388\":1}}],[\"一定要切到admin数据库\",{\"1\":{\"3201\":1}}],[\"一定要注意是post请求\",{\"1\":{\"2918\":1}}],[\"一定要先处理控制台乱码\",{\"1\":{\"2627\":1}}],[\"一定要重写compareto方法或compare方法\",{\"1\":{\"1655\":1}}],[\"一定要考虑异常的处理\",{\"1\":{\"1347\":1}}],[\"一定要显式赋值\",{\"1\":{\"1025\":1}}],[\"一开始直接定义枚举对象\",{\"1\":{\"1378\":1}}],[\"一开始是用于开发桌面级应用的\",{\"1\":{\"763\":1}}],[\"一部分实现是不确定的\",{\"1\":{\"1250\":1}}],[\"一维数组的名称分别为arr\",{\"1\":{\"985\":1}}],[\"一维数组的内存解析\",{\"0\":{\"976\":1}}],[\"一维数组\",{\"0\":{\"967\":1},\"1\":{\"962\":1}}],[\"一旦触发了被监控的事件\",{\"1\":{\"2709\":1}}],[\"一旦发现\",{\"1\":{\"2709\":1}}],[\"一旦指明后\",{\"1\":{\"1711\":1}}],[\"一旦初始化以后\",{\"1\":{\"1573\":1,\"1574\":1}}],[\"一旦执行终止操作\",{\"1\":{\"2192\":1}}],[\"一旦执行方法\",{\"1\":{\"1555\":1}}],[\"一旦执行此方法\",{\"1\":{\"1551\":3}}],[\"一旦执行break\",{\"1\":{\"938\":1}}],[\"一旦判断instance不是null\",{\"1\":{\"1522\":1}}],[\"一旦进程被创建\",{\"1\":{\"1437\":1}}],[\"一旦当方法体执行时\",{\"1\":{\"1350\":1}}],[\"一旦处理完成\",{\"1\":{\"1340\":1}}],[\"一旦try中的异常对象匹配到某一个catch时\",{\"1\":{\"1340\":1}}],[\"一旦抛出对象以后\",{\"1\":{\"1318\":1}}],[\"一旦出现异常\",{\"1\":{\"1318\":1,\"1340\":1}}],[\"一旦返回true\",{\"1\":{\"1167\":1}}],[\"一旦子类a继承父类b以后\",{\"1\":{\"1113\":1}}],[\"一旦赋值以后\",{\"1\":{\"1106\":1}}],[\"一旦显式定义了构造器\",{\"1\":{\"1073\":1}}],[\"一旦我们显式的定义了类的构造器之后\",{\"1\":{\"1072\":1}}],[\"一旦除尽\",{\"1\":{\"956\":1}}],[\"一旦匹配成功\",{\"1\":{\"927\":1}}],[\"一次查询就能将订单所有的变更读取出来\",{\"1\":{\"3027\":1}}],[\"一次性进行请求\",{\"1\":{\"2985\":1}}],[\"一次手动指定的\",{\"1\":{\"2908\":1,\"2926\":1}}],[\"一次返回系统自定义的\",{\"1\":{\"2908\":1,\"2926\":1}}],[\"一次会话\",{\"1\":{\"2785\":1}}],[\"一次请求\",{\"1\":{\"2656\":1}}],[\"一次请求响应结束后\",{\"1\":{\"2643\":1}}],[\"一次读取多个字符\",{\"0\":{\"1805\":1},\"1\":{\"1805\":1}}],[\"一次读取多个字节\",{\"1\":{\"566\":1}}],[\"一次\",{\"1\":{\"1089\":1}}],[\"一次编译\",{\"1\":{\"738\":1,\"767\":1}}],[\"一参\",{\"0\":{\"566\":1}}],[\"一并创建\",{\"1\":{\"557\":1}}],[\"一个且仅一个成员被视为主节点\",{\"1\":{\"3127\":1}}],[\"一个文档认为就是一个对象\",{\"1\":{\"3032\":1}}],[\"一个文件中可以创建多个类\",{\"1\":{\"1010\":1}}],[\"一个文件可以有多个class\",{\"1\":{\"803\":1}}],[\"一个站点存在的文档可能会非常多\",{\"1\":{\"2870\":1}}],[\"一个有作用范围的对象\",{\"1\":{\"2653\":1,\"2688\":1}}],[\"一个form表单\",{\"1\":{\"2623\":1}}],[\"一个field对象\",{\"1\":{\"612\":1}}],[\"一个servlet类中一般都要定义doget方法和dopost方法\",{\"1\":{\"2613\":1}}],[\"一个springboot项目在运行时实际上是分两个过程进行的\",{\"1\":{\"137\":1}}],[\"一个druiddatasource只支持一个evictionrun\",{\"1\":{\"2426\":1}}],[\"一个数据表对应一个java类\",{\"1\":{\"2346\":1}}],[\"一个predicate\",{\"1\":{\"2229\":1}}],[\"一个学生类\",{\"1\":{\"2221\":1}}],[\"一个中间操作链\",{\"1\":{\"2192\":1}}],[\"一个中文用3个字符表示\",{\"1\":{\"426\":1}}],[\"一个动态代理类\",{\"1\":{\"2086\":1}}],[\"一个class对象对应的是一个加载到jvm中的一个\",{\"1\":{\"2015\":1}}],[\"一个cpu\",{\"1\":{\"1442\":1}}],[\"一个加载的类在\",{\"1\":{\"2015\":1}}],[\"一个uri实例可以代表绝对的\",{\"1\":{\"1995\":1}}],[\"一个url对象生成后\",{\"1\":{\"1991\":1}}],[\"一个key\",{\"1\":{\"1664\":1}}],[\"一个空的集合\",{\"1\":{\"1583\":1}}],[\"一个线程类中的所有静态方法共用同一把锁\",{\"1\":{\"1524\":1}}],[\"一个线程对多条语句只执行了一部分\",{\"1\":{\"1507\":1}}],[\"一个线程对象只能调用一次start\",{\"1\":{\"1477\":1}}],[\"一个变量对应一小块内存\",{\"1\":{\"1454\":1}}],[\"一个java应用程序java\",{\"1\":{\"1441\":1}}],[\"一个进程至少有一个线程\",{\"1\":{\"1440\":1}}],[\"一个进程崩溃后\",{\"1\":{\"1440\":1}}],[\"一个进程中的多个线程共享相同的内存单元\",{\"1\":{\"1439\":1}}],[\"一个程序可以对应多个进程\",{\"1\":{\"1438\":1}}],[\"一个匿名类一定是在new的后面\",{\"1\":{\"1214\":1}}],[\"一个没有\",{\"1\":{\"1180\":1}}],[\"一个引用类型变量如果声明为父类的类型\",{\"1\":{\"1151\":1}}],[\"一个类只有一个class对象\",{\"1\":{\"2000\":1}}],[\"一个类只能有一个父类\",{\"1\":{\"1115\":1}}],[\"一个类\",{\"1\":{\"1369\":1}}],[\"一个类中代码块若有修饰符\",{\"1\":{\"1278\":1}}],[\"一个类可以实现多个接口\",{\"1\":{\"1261\":1}}],[\"一个类可以被多个子类继承\",{\"1\":{\"1115\":1}}],[\"一个类可以创建多个重载的构造器\",{\"1\":{\"1073\":1}}],[\"一个native方法是指该方法的实现由非java语言实现\",{\"1\":{\"1109\":1}}],[\"一个native方法就是一个java调用非java代码的接口\",{\"1\":{\"1109\":1}}],[\"一个方法体内调用它自身\",{\"1\":{\"1035\":1}}],[\"一个位分解成3个位表示\",{\"1\":{\"874\":1}}],[\"一个片假名\",{\"1\":{\"852\":1}}],[\"一个汉字\",{\"1\":{\"852\":1}}],[\"一个运行java的虚拟机\",{\"1\":{\"765\":1}}],[\"一个反斜杠\",{\"1\":{\"737\":1}}],[\"一个误区\",{\"0\":{\"569\":1}}],[\"一个字节的二进制数据\",{\"1\":{\"565\":1}}],[\"一个字母用1个字符表示\",{\"1\":{\"426\":1}}],[\"一个是与被下载文件大小相同的空文件\",{\"1\":{\"1892\":1}}],[\"一个是\",{\"1\":{\"1863\":1}}],[\"一个是往外写字符的\",{\"1\":{\"572\":1}}],[\"一个是往外写字节的\",{\"1\":{\"572\":1}}],[\"一个是读取字节的一个是读取字符的\",{\"1\":{\"564\":1}}],[\"一个是数据层接口\",{\"1\":{\"361\":1}}],[\"一个无实体的file对象即可以是目录也可以是文件\",{\"1\":{\"554\":1,\"1770\":1}}],[\"一个可选的level和一个可选的addtivity属性\",{\"1\":{\"262\":1}}],[\"一直使用的是这个\",{\"1\":{\"216\":1}}],[\"一级属性名\",{\"1\":{\"127\":2}}],[\"一般只需关注前两个\",{\"1\":{\"3081\":1}}],[\"一般只用在集合上\",{\"1\":{\"1754\":1}}],[\"一般要创建一个数据对象\",{\"1\":{\"2981\":1}}],[\"一般删除数据都是根据文档的唯一性标识进行删除\",{\"1\":{\"2918\":1}}],[\"一般传统数据库\",{\"1\":{\"2849\":1}}],[\"一般采用账户名密码的形式进行权限认证\",{\"1\":{\"3221\":1}}],[\"一般采用的认证方式是x\",{\"1\":{\"3209\":1}}],[\"一般采用url编码\",{\"1\":{\"2806\":1}}],[\"一般采用idea内置maven的版本进行下载\",{\"1\":{\"298\":1}}],[\"一般dopost和doget是要被重写的\",{\"1\":{\"2563\":1}}],[\"一般我们返回一个空字符串即可\",{\"1\":{\"2555\":1}}],[\"一般设置为\",{\"1\":{\"2502\":1}}],[\"一般选择使用jdbc来连接数据库\",{\"1\":{\"2282\":1}}],[\"一般仅作用集合的展开\",{\"1\":{\"2219\":1}}],[\"一般主动发起通信的应用程序属客户端\",{\"1\":{\"1961\":1}}],[\"一般地\",{\"1\":{\"1363\":1}}],[\"一般是指编程时的逻辑错误\",{\"1\":{\"1325\":1}}],[\"一般有两种\",{\"1\":{\"1314\":1}}],[\"一般来说对应的是数据库中的一张表\",{\"1\":{\"1285\":1}}],[\"一般都使用单例模式实现\",{\"1\":{\"1243\":1}}],[\"一般也只有一个对象\",{\"1\":{\"1243\":1}}],[\"一般也是单例模式实现\",{\"1\":{\"1243\":1}}],[\"一般也会设置跳过maven单元测试\",{\"1\":{\"298\":1}}],[\"一般开发中都会提供一个\",{\"1\":{\"1072\":1}}],[\"一般②在前\",{\"1\":{\"1026\":1}}],[\"一般最多写三层\",{\"1\":{\"951\":1}}],[\"一般最顶层也会加上一些通用的配置\",{\"1\":{\"226\":1}}],[\"一般在javadoc中只要涉及到类名或者方法名\",{\"1\":{\"810\":1}}],[\"一般用集合\",{\"1\":{\"1576\":1}}],[\"一般用来加载资源文件\",{\"1\":{\"2724\":1}}],[\"一般用来获取自定义的注解\",{\"1\":{\"2048\":1}}],[\"一般用来执行callable\",{\"1\":{\"1566\":1}}],[\"一般用来执行runnable\",{\"1\":{\"1566\":1}}],[\"一般用来返回实现了某个接口的类的对象\",{\"1\":{\"1210\":1}}],[\"一般用在定义它的类或语句块之内\",{\"1\":{\"1201\":1}}],[\"一般用于请求转发的多个资源中共享数据\",{\"1\":{\"2653\":1}}],[\"一般用于程序流程控制\",{\"1\":{\"858\":1}}],[\"一般用于测试\",{\"1\":{\"799\":1}}],[\"一般用getdeclaredmethod\",{\"1\":{\"610\":1}}],[\"一般的float类和double类可以用来做科学计算或工程计算\",{\"1\":{\"530\":1}}],[\"一般stringbuffer也能使用\",{\"1\":{\"449\":1}}],[\"一般不指定\",{\"1\":{\"3077\":1}}],[\"一般不使用jsp\",{\"1\":{\"2728\":1}}],[\"一般不编写针对性的代码进行处理\",{\"1\":{\"1312\":1,\"1323\":1}}],[\"一般不用给这个值\",{\"1\":{\"3159\":1}}],[\"一般不用设置\",{\"1\":{\"3111\":1}}],[\"一般不用\",{\"0\":{\"2059\":1,\"2065\":1}}],[\"一般不用添加\",{\"1\":{\"316\":1}}],[\"一般不用手动调整\",{\"1\":{\"96\":1}}],[\"一般不直接用\",{\"1\":{\"268\":1}}],[\"一般情况下用这个\",{\"1\":{\"1612\":1}}],[\"一般情况下\",{\"1\":{\"247\":1}}],[\"一般80端口冲突都是因为开启了多个服务器\",{\"1\":{\"202\":1}}],[\"一般会有测试用的数据库\",{\"1\":{\"186\":1}}],[\"一般使用postman或者swagger\",{\"1\":{\"185\":1}}],[\"一般为xxxapplication\",{\"1\":{\"103\":1}}],[\"一般外部用户无法访问\",{\"1\":{\"23\":2}}],[\"大家一般称之为redis缓存\",{\"1\":{\"3036\":1}}],[\"大于等于\",{\"1\":{\"2938\":1,\"3002\":1}}],[\"大于\",{\"1\":{\"2938\":1,\"3002\":1}}],[\"大于o2\",{\"1\":{\"506\":1}}],[\"大企业的选择\",{\"0\":{\"2846\":1}}],[\"大类型\",{\"1\":{\"2684\":1}}],[\"大概42亿\",{\"1\":{\"1933\":1}}],[\"大概将只会用到其中的三分之一\",{\"1\":{\"463\":1}}],[\"大多数为\",{\"1\":{\"3172\":1}}],[\"大多数\",{\"1\":{\"3132\":1,\"3172\":2}}],[\"大多数情况下\",{\"1\":{\"2277\":1}}],[\"大多数方法在出错时仅返回失败\",{\"1\":{\"1915\":1}}],[\"大多数时候使用\",{\"1\":{\"1635\":1}}],[\"大多数开发者\",{\"1\":{\"463\":1}}],[\"大多数开发者只会用到基础包和format包\",{\"1\":{\"463\":1}}],[\"大驼峰\",{\"1\":{\"835\":1}}],[\"大括号不换行\",{\"1\":{\"815\":1}}],[\"大括号的风格\",{\"1\":{\"815\":1}}],[\"大数据开发\",{\"1\":{\"764\":1}}],[\"大大简化了日期时间和本地化的管理\",{\"1\":{\"461\":1}}],[\"大小写无关\",{\"1\":{\"262\":2}}],[\"大小写敏感\",{\"1\":{\"122\":1}}],[\"大部分配置信息springboot会自动读取\",{\"1\":{\"127\":1}}],[\"底层都是将用户信息保存在了admin数据库的集合\",{\"1\":{\"3197\":1}}],[\"底层都创建了长度为10的数组\",{\"1\":{\"1629\":1}}],[\"底层改变\",{\"0\":{\"2265\":1}}],[\"底层创建长度为16的数组\",{\"1\":{\"1678\":1}}],[\"底层创建了长度是16的一维数组entry\",{\"1\":{\"1673\":1}}],[\"底层创建了长度是10的object\",{\"1\":{\"1617\":1}}],[\"底层没有创建一个长度为16的数组\",{\"1\":{\"1678\":1}}],[\"底层结构\",{\"1\":{\"1664\":1,\"1665\":1,\"1666\":1}}],[\"底层\",{\"0\":{\"1682\":1,\"2685\":1},\"1\":{\"1654\":1,\"1655\":1}}],[\"底层是逻辑删除\",{\"1\":{\"2913\":1}}],[\"底层是个空的object\",{\"1\":{\"1621\":1}}],[\"底层是ioc容器\",{\"1\":{\"126\":1}}],[\"底层才创建了长度10的数组\",{\"1\":{\"1621\":1}}],[\"底层object\",{\"1\":{\"1621\":1}}],[\"底层解析\",{\"0\":{\"1119\":1}}],[\"底层表示\",{\"1\":{\"909\":1}}],[\"底层说明\",{\"0\":{\"849\":1}}],[\"底层默认创建了16个长度的char数组\",{\"1\":{\"445\":1}}],[\"底层使用双向链表存储\",{\"1\":{\"1613\":1}}],[\"底层使用object\",{\"1\":{\"1612\":1,\"1614\":1}}],[\"底层使用char\",{\"1\":{\"442\":2}}],[\"底层使用final\",{\"1\":{\"442\":1}}],[\"底层设计中采用线程安全的statefulredisconnection\",{\"1\":{\"291\":1}}],[\"底层原理\",{\"0\":{\"295\":1,\"1641\":1,\"2617\":1},\"1\":{\"29\":1}}],[\"将配置导入变量\",{\"1\":{\"3175\":1}}],[\"将配置作为参数添加即可\",{\"1\":{\"210\":1}}],[\"将仲裁节点添加到副本集\",{\"1\":{\"3160\":1}}],[\"将从节点添加道副本集\",{\"1\":{\"3159\":1}}],[\"将启动的参数写入配置文件\",{\"1\":{\"3044\":1}}],[\"将fuzzyquerybuilder加入请求体\",{\"1\":{\"3005\":1}}],[\"将futuretask的对象作为参数传递到thread类的构造器中\",{\"1\":{\"1562\":1}}],[\"将查询当前索引下的所有文档\",{\"1\":{\"2931\":1}}],[\"将下载的压缩包解压后即可使用\",{\"1\":{\"2856\":1}}],[\"将编码后的值存入cookie中\",{\"1\":{\"2806\":1}}],[\"将编译失败\",{\"1\":{\"840\":1}}],[\"将约束的规则定义在外部的dtd文件中\",{\"1\":{\"2778\":1}}],[\"将约束规则定义在xml文档中\",{\"1\":{\"2778\":1}}],[\"将tomcat和web项目打成jar放在一起\",{\"1\":{\"2750\":1}}],[\"将符合规范的war包放在tomcat的webapps目录下的时候\",{\"1\":{\"2749\":1}}],[\"将代码中的通用部分抽离出来\",{\"1\":{\"2739\":1}}],[\"将该方法的调用时机改为服务器启动时调用\",{\"1\":{\"2552\":1}}],[\"将该类定义为泛型类\",{\"1\":{\"1719\":1}}],[\"将来如果将表现层的技术换掉\",{\"1\":{\"2764\":1}}],[\"将来使用springmvc的时候\",{\"1\":{\"2722\":1}}],[\"将来页面发送的是get请求\",{\"1\":{\"2566\":1}}],[\"将来定义servlet类时\",{\"1\":{\"2559\":1}}],[\"将来我们需要定义servlet类实现servlet接口\",{\"1\":{\"2522\":1}}],[\"将来很长一段时间内它都会为我们服务\",{\"1\":{\"461\":1}}],[\"将服务器上所有的项目都重新部署\",{\"1\":{\"2502\":1}}],[\"将war包放置在tomcat根目录的webapps目录下\",{\"1\":{\"2747\":1}}],[\"将web工程以当前文件夹的位置关系发布到tomcat服务器上\",{\"1\":{\"2500\":1,\"2517\":1}}],[\"将web工程打成war包\",{\"1\":{\"2500\":1,\"2517\":1}}],[\"将writer转为outputstream\",{\"1\":{\"1842\":1}}],[\"将已有的项目\",{\"1\":{\"2484\":1}}],[\"将项目打成一个war包\",{\"1\":{\"2466\":1}}],[\"将控制台改为utf8\",{\"1\":{\"2459\":1}}],[\"将不用输入端口号\",{\"1\":{\"2457\":1}}],[\"将不用内存收回\",{\"1\":{\"768\":1}}],[\"将静态资源部署到web服务器上\",{\"1\":{\"2448\":1}}],[\"将结果集中某一列的数据存放到list中\",{\"1\":{\"2436\":1}}],[\"将结果集中的第一行数据封装到一个map里\",{\"1\":{\"2436\":1}}],[\"将结果集中的第一行数据封装到一个对应的javabean实例中\",{\"1\":{\"2436\":1}}],[\"将结果集中的每一行数据都封装到一个map里\",{\"1\":{\"2436\":2}}],[\"将结果集中的每一行数据都封装到一个对应的javabean实例中\",{\"1\":{\"2436\":1}}],[\"将会终止插入\",{\"1\":{\"3077\":1}}],[\"将会生成一个名字\",{\"1\":{\"2426\":1}}],[\"将会导致数据库系统中的内存泄漏\",{\"1\":{\"2414\":1}}],[\"将会被重新加载\",{\"1\":{\"262\":1}}],[\"将设置改回去\",{\"1\":{\"2384\":1}}],[\"将blob类型的字段下载下来\",{\"1\":{\"2365\":1}}],[\"将buffer中的内容读入\",{\"1\":{\"1833\":1}}],[\"将类名\",{\"1\":{\"2357\":1}}],[\"将类实例化成计算机世界中的对象\",{\"1\":{\"1004\":1}}],[\"将循环拿到的每行数据对象\",{\"1\":{\"2355\":1}}],[\"将连接对象放回连接池\",{\"1\":{\"2418\":1}}],[\"将连接方式写入配置文件让驱动加载\",{\"0\":{\"2301\":1}}],[\"将连接信息写入日志\",{\"1\":{\"2073\":1,\"2075\":1}}],[\"将1和3连在一起\",{\"1\":{\"2300\":1}}],[\"将123封装到node中\",{\"1\":{\"1625\":1}}],[\"将流转换为其他形式\",{\"1\":{\"2242\":1}}],[\"将以三年为周期发布长期支持版本\",{\"1\":{\"2103\":1}}],[\"将通用方法加入myinvocationhandler\",{\"1\":{\"2101\":1}}],[\"将抛出\",{\"1\":{\"2037\":1}}],[\"将抛出异常\",{\"1\":{\"1472\":1}}],[\"将class文件字节码内容加载到内存中\",{\"1\":{\"2026\":1}}],[\"将cookie数据写到硬盘的文件中\",{\"1\":{\"2805\":1}}],[\"将cookie对象通过响应对象response\",{\"1\":{\"2794\":1}}],[\"将comparator对象作为参数\",{\"1\":{\"1658\":1}}],[\"将coll2集合中的元素添加到集合coll\",{\"1\":{\"658\":1}}],[\"将产生ioexception\",{\"1\":{\"1993\":1}}],[\"将要发送的数据\",{\"1\":{\"1985\":1}}],[\"将path转化为file类的对象\",{\"1\":{\"1918\":1}}],[\"将p1保存的内存地址赋给了p3\",{\"1\":{\"1303\":1}}],[\"将指针调到角标为3的位置\",{\"1\":{\"1891\":1}}],[\"将指针位置后面的数据赋值一份\",{\"1\":{\"1890\":1}}],[\"将指针指到文件末尾\",{\"1\":{\"1890\":1}}],[\"将指定key\",{\"1\":{\"711\":1}}],[\"将指定值填充到数组之中\",{\"1\":{\"650\":1}}],[\"将指定\",{\"1\":{\"577\":1,\"685\":1}}],[\"将文件输入流作为blob类型插入数据表\",{\"1\":{\"2364\":1}}],[\"将文件加载为inputstream\",{\"1\":{\"2033\":1}}],[\"将文件记录指针定位到\",{\"1\":{\"1884\":1}}],[\"将文件中存储的基本数据类型变量和字符串读取到内存中\",{\"1\":{\"1879\":1}}],[\"将文本文件转换成别的编码输出\",{\"1\":{\"1843\":1}}],[\"将文本标记为代码样式文本\",{\"1\":{\"810\":1}}],[\"将内存中的java对象保存到磁盘中或通过网络传输出去\",{\"1\":{\"1895\":1}}],[\"将内存中的数据写入文件\",{\"1\":{\"1878\":1}}],[\"将内存中的字符串\",{\"1\":{\"1878\":1}}],[\"将内容初始化为指定字符串内容\",{\"1\":{\"441\":1}}],[\"将上述的方法的read改为相应的write即可\",{\"1\":{\"1877\":1}}],[\"将json数据作为请求体与请求对象关联\",{\"1\":{\"2980\":1}}],[\"将jar包加载到扩展库\",{\"1\":{\"2290\":1}}],[\"将java类的二进制代码合并到jvm的运行状态之中的过程\",{\"1\":{\"2027\":1}}],[\"将java的基本数据类型和string数据写出到文件中\",{\"1\":{\"1874\":1}}],[\"将jdk\",{\"1\":{\"781\":1}}],[\"将inputstream转为reader\",{\"1\":{\"1842\":1}}],[\"将程序\",{\"1\":{\"1774\":1}}],[\"将程序执行中发生的不正常情况称为\",{\"1\":{\"1310\":1}}],[\"将被代理类对象\",{\"1\":{\"2097\":1}}],[\"将被代理类要执行的方法a的功能就声明在invoke\",{\"1\":{\"2095\":1}}],[\"将被擦除\",{\"1\":{\"1721\":1}}],[\"将被wait的线程重新激活\",{\"1\":{\"1556\":1}}],[\"将线程池接口类型转为接口的子类类型\",{\"1\":{\"1569\":1}}],[\"将线程要执行的逻辑声明在run\",{\"1\":{\"1499\":1}}],[\"将需要同步的数据放入synchronized包裹的方法中\",{\"1\":{\"1523\":1}}],[\"将同步方法设置为静态方法\",{\"1\":{\"1519\":1}}],[\"将同步监视器也设置成static类\",{\"1\":{\"1515\":1}}],[\"将成员变量设置成static\",{\"1\":{\"1515\":1}}],[\"将进入线程队列等待cpu时间片\",{\"1\":{\"1501\":1}}],[\"将runnable接口的实例\",{\"1\":{\"1493\":1}}],[\"将创建的线程要执行的操作声明在此方法中\",{\"1\":{\"1479\":1}}],[\"将此线程需要执行的操作声明在call\",{\"1\":{\"1561\":1,\"1562\":1}}],[\"将此线程执行的操作声明在run\",{\"1\":{\"1471\":1}}],[\"将此对象作为参数传递到thread类的构造器中\",{\"1\":{\"1491\":1,\"1492\":1}}],[\"将此时父类的方法称为虚拟方法\",{\"1\":{\"1156\":1}}],[\"将既长又复杂的进程分为多个线程\",{\"1\":{\"1445\":1}}],[\"将具有\",{\"1\":{\"1416\":1}}],[\"将异常抛到代码的调用处\",{\"1\":{\"1350\":1}}],[\"将异常信息加入异常日志\",{\"1\":{\"369\":1}}],[\"将可能出现异常的代码放在try语句块中\",{\"1\":{\"1337\":1}}],[\"将可能抛出异常\",{\"1\":{\"426\":1}}],[\"将整个程序分为三个层次\",{\"1\":{\"1289\":1}}],[\"将整个idea全部改为utf\",{\"1\":{\"299\":1}}],[\"将这些信息传递作为参数给代理对象的invoke方法\",{\"1\":{\"2085\":1}}],[\"将这些属性设置为类属性\",{\"1\":{\"1224\":1}}],[\"将这些内容抽取到单独一个类中\",{\"1\":{\"1111\":1}}],[\"将obj的object类型向下转型为person以便对比属性\",{\"1\":{\"1180\":1}}],[\"将子类对象赋值给父类数据类型的标识符\",{\"1\":{\"1160\":1}}],[\"将功能相近的类划分到同一个包中\",{\"1\":{\"1087\":1}}],[\"将功能封装进对象\",{\"1\":{\"1002\":1}}],[\"将年龄设置成了负数\",{\"1\":{\"1055\":1}}],[\"将array1保存的数组的地址值赋给了array2\",{\"1\":{\"965\":1}}],[\"将args参数传递给了里面的run方法\",{\"1\":{\"213\":1}}],[\"将容量大的数据类型转换为容量小的数据类型\",{\"1\":{\"869\":1}}],[\"将一个变量的值赋值给另一个变量时\",{\"1\":{\"1306\":1}}],[\"将一个循环结构a声明在另一个循环结构b的循环体中\",{\"1\":{\"951\":1}}],[\"将一些方法也设置成私有的\",{\"1\":{\"1058\":1}}],[\"将一种字符集编码的字符转换成其他字符集编码的字符\",{\"1\":{\"855\":1}}],[\"将一组数据封装到一个对象中\",{\"1\":{\"156\":1}}],[\"将一组数据封装到一个java对象中\",{\"1\":{\"129\":1}}],[\"将世界所有字符都纳入其中\",{\"1\":{\"855\":1}}],[\"将其打成war包部署到tomcat等容器中\",{\"1\":{\"2747\":1}}],[\"将其绑定到指定的本地地址\",{\"1\":{\"1985\":1}}],[\"将其延后成运行时异常\",{\"1\":{\"1347\":1}}],[\"将其编译成jvm可识别的二进制文件\",{\"1\":{\"792\":1}}],[\"将其他集合的元素添加到当前集合\",{\"1\":{\"658\":1}}],[\"将其他配置项的值作为自己值的一部分\",{\"1\":{\"125\":1}}],[\"将集合转为数组\",{\"1\":{\"668\":1}}],[\"将当前集合与参数集合做差集\",{\"1\":{\"665\":1}}],[\"将待比较元素与集合中的元素做equal\",{\"1\":{\"662\":1}}],[\"将元素添加到集合中\",{\"1\":{\"657\":1}}],[\"将mc作为参数传入给sort方法\",{\"1\":{\"645\":1}}],[\"将数据存储在服务端\",{\"1\":{\"2829\":1}}],[\"将数据保存在服务器端的对象中\",{\"1\":{\"2812\":1}}],[\"将数据保存到客户端\",{\"1\":{\"2790\":1}}],[\"将数据交给视图进行展示\",{\"1\":{\"2754\":1}}],[\"将数据按要求转换为另一种形式\",{\"1\":{\"2436\":1}}],[\"将数据库连接关闭\",{\"1\":{\"2387\":1}}],[\"将数据\",{\"1\":{\"1957\":1}}],[\"将数据读入\",{\"1\":{\"1836\":1}}],[\"将数据响应给前端\",{\"1\":{\"363\":1}}],[\"将数组中的数据copy到list中\",{\"1\":{\"1733\":1}}],[\"将数组转为字符串形式\",{\"1\":{\"642\":1}}],[\"将\",{\"1\":{\"577\":1,\"790\":1,\"1920\":1,\"2864\":1}}],[\"将写的内容刷入文件\",{\"1\":{\"572\":1}}],[\"将字符流以字节流的方式写出到文件中\",{\"1\":{\"1857\":1}}],[\"将字符写入指定的文件\",{\"1\":{\"576\":1}}],[\"将字符读入数组\",{\"1\":{\"566\":1}}],[\"将字符的unicode值转为字符\",{\"1\":{\"565\":1}}],[\"将无法通过该字段进行查询\",{\"1\":{\"2966\":1}}],[\"将无法反序列化\",{\"1\":{\"1910\":1}}],[\"将无法进行比较\",{\"1\":{\"662\":1}}],[\"将无法创建\",{\"1\":{\"556\":1}}],[\"将无法执行测试类\",{\"1\":{\"183\":1}}],[\"将基本数据类型输出到一个文件\",{\"0\":{\"1873\":1}}],[\"将基本数据类型\",{\"1\":{\"527\":1}}],[\"将number对象的值转换为xxx数据类型并返回\",{\"1\":{\"524\":1}}],[\"将角度转为弧度\",{\"1\":{\"522\":1}}],[\"将参数集合中的所有key\",{\"1\":{\"712\":1}}],[\"将参数src集合的内容复制到参数dest集合中\",{\"1\":{\"689\":1}}],[\"将参数转为角度\",{\"1\":{\"522\":1}}],[\"将参数字符串连接到此字符串的结尾\",{\"1\":{\"420\":1}}],[\"将日期数据转为string\",{\"1\":{\"484\":1}}],[\"将session文件转化为内存中的session对象即可\",{\"1\":{\"2823\":1}}],[\"将session对象系列化到硬盘上\",{\"1\":{\"2823\":1}}],[\"将servlet的创建放到服务器启动的时候来创建\",{\"1\":{\"2546\":1}}],[\"将source\",{\"1\":{\"2542\":1}}],[\"将sql在循环外面创建\",{\"1\":{\"2373\":1}}],[\"将stream代表的集合中的每一个元素作为参数在方法中进行操作\",{\"1\":{\"2229\":1}}],[\"将stream中的每个元素\",{\"1\":{\"2219\":1}}],[\"将string数值字符串转为基本数据类型\",{\"1\":{\"528\":1}}],[\"将string转为byte\",{\"1\":{\"426\":1}}],[\"将string转为char\",{\"1\":{\"425\":1}}],[\"将s2作为锁\",{\"1\":{\"1548\":1}}],[\"将s1作为锁\",{\"1\":{\"1548\":1}}],[\"将syschronized声明在if里面\",{\"1\":{\"1522\":1}}],[\"将synchronize声明在getinstance处\",{\"1\":{\"1521\":1}}],[\"将springboot打包好的jar包上传道\",{\"1\":{\"206\":1}}],[\"将返回\",{\"1\":{\"409\":1}}],[\"将方法的返回值加入ioc容器\",{\"1\":{\"350\":1}}],[\"将所有元素都转为大写\",{\"1\":{\"2215\":1}}],[\"将所有字符都纳入其中\",{\"1\":{\"855\":1}}],[\"将所有字符转为大写\",{\"1\":{\"418\":1}}],[\"将所有字符转为小写\",{\"1\":{\"417\":1}}],[\"将所有方法的返回值类型都修改为r\",{\"1\":{\"371\":1}}],[\"将所有操作的操作结果数据格式统一起来\",{\"1\":{\"370\":1}}],[\"将所有的数据都删除\",{\"1\":{\"3086\":1}}],[\"将所有的配置根据功能对配置文件中的信息进行拆分\",{\"1\":{\"231\":1}}],[\"将所有的bean纳入ioc管理\",{\"1\":{\"106\":1}}],[\"将所需的所有工具类和插件搭建\",{\"1\":{\"310\":1}}],[\"将打印出logback内部日志信息\",{\"1\":{\"262\":1}}],[\"将执行main\",{\"1\":{\"200\":1}}],[\"将默认生成的spring\",{\"1\":{\"195\":1}}],[\"将第三方类加入ioc\",{\"0\":{\"158\":1}}],[\"引入\",{\"0\":{\"3231\":1}}],[\"引入xsi前缀\",{\"1\":{\"2782\":1}}],[\"引入约束写xml\",{\"0\":{\"2782\":1}}],[\"引入dtd\",{\"0\":{\"2779\":1}}],[\"引入dtd文档\",{\"0\":{\"2778\":1}}],[\"引入了path接口\",{\"1\":{\"1916\":1}}],[\"引起来\",{\"1\":{\"2770\":1}}],[\"引擎完成恶意行为的做法\",{\"1\":{\"2311\":1}}],[\"引用常量不会触发此类的初始化\",{\"1\":{\"2029\":1}}],[\"引用类型的变量\",{\"1\":{\"1304\":1}}],[\"引用类型都可以\",{\"1\":{\"1018\":1}}],[\"引用类型\",{\"1\":{\"995\":1,\"1125\":1,\"1178\":1,\"1452\":1}}],[\"引用\",{\"1\":{\"879\":1}}],[\"引用数据类型的标识符保存的是值的内存地址\",{\"1\":{\"1308\":1}}],[\"引用数据类型元素的数组\",{\"1\":{\"962\":1}}],[\"引用数据类型\",{\"0\":{\"1045\":1,\"1308\":1},\"1\":{\"827\":1,\"1025\":1,\"1042\":1}}],[\"引用数据\",{\"1\":{\"125\":1}}],[\"引导类加载器\",{\"1\":{\"2031\":1}}],[\"引导类的意义就是初始化spring容器\",{\"1\":{\"106\":1}}],[\"引导类的类名随意\",{\"1\":{\"103\":1}}],[\"引导类需要放到项目包中\",{\"1\":{\"105\":1}}],[\"引导类\",{\"0\":{\"102\":1,\"103\":1}}],[\"$clustertime\",{\"1\":{\"3156\":1,\"3159\":1,\"3160\":1,\"3186\":1,\"3187\":1}}],[\"$or\",{\"1\":{\"3102\":3}}],[\"$and\",{\"1\":{\"3102\":3}}],[\"$nin\",{\"1\":{\"3101\":1}}],[\"$ne\",{\"1\":{\"3100\":1}}],[\"$in\",{\"1\":{\"3101\":1}}],[\"$inc\",{\"1\":{\"3084\":2}}],[\"$lte\",{\"1\":{\"3100\":1}}],[\"$lt\",{\"1\":{\"3100\":1,\"3102\":2}}],[\"$gte\",{\"1\":{\"3100\":1,\"3102\":1}}],[\"$gt\",{\"1\":{\"3100\":2}}],[\"$set\",{\"1\":{\"3082\":1,\"3083\":1}}],[\"$\",{\"1\":{\"125\":2,\"127\":9,\"262\":1,\"834\":1,\"3061\":1}}],[\"对资源进行的增\",{\"1\":{\"3184\":1}}],[\"对userid降序排列\",{\"1\":{\"3097\":1}}],[\"对表示方法\",{\"1\":{\"3033\":1}}],[\"对海量数据的高效率存储和访问的需求\",{\"1\":{\"3026\":1}}],[\"对查询结果分组\",{\"1\":{\"2954\":1}}],[\"对查询结果进行分页\",{\"1\":{\"2947\":1}}],[\"对查询的结果进行排序\",{\"1\":{\"2950\":1}}],[\"对相同的请求体和请求链接发送了两次请求\",{\"1\":{\"2908\":1,\"2926\":1}}],[\"对比关系型数据库\",{\"1\":{\"2882\":1}}],[\"对比string\",{\"0\":{\"447\":1}}],[\"对每一个词建立一个索引\",{\"1\":{\"2852\":1}}],[\"对不同记录类型\",{\"1\":{\"2850\":1}}],[\"对不满足条件的参数\",{\"1\":{\"1029\":1}}],[\"对高度相关的搜索结果的有特殊需求\",{\"1\":{\"2850\":1}}],[\"对高优先级\",{\"1\":{\"1486\":1}}],[\"对同一个域名下的总cookie数量也有限制\",{\"1\":{\"2810\":1}}],[\"对同名方法的名称做修饰\",{\"1\":{\"1159\":1}}],[\"对中文进行url编码\",{\"1\":{\"2806\":1}}],[\"对numbertype类型的约束\",{\"1\":{\"2781\":1}}],[\"对agetype类型的约束\",{\"1\":{\"2781\":1}}],[\"对sextype类型的约束\",{\"1\":{\"2781\":1}}],[\"对业务逻辑进行封装\",{\"1\":{\"2758\":1}}],[\"对某个字段一次性返回\",{\"1\":{\"2953\":1,\"2954\":1,\"3013\":1,\"3014\":1}}],[\"对某个字段的值进行去重之后再取总数\",{\"1\":{\"2953\":1,\"2954\":1,\"3013\":1,\"3014\":1}}],[\"对某个字段取平均值\",{\"1\":{\"2953\":1,\"2954\":1,\"3013\":1,\"3014\":1}}],[\"对某个字段取最小值\",{\"1\":{\"2953\":1,\"3013\":1,\"3014\":1}}],[\"对某个字段取最大值\",{\"1\":{\"2953\":1,\"3013\":1,\"3014\":1}}],[\"对某个字段求和\",{\"1\":{\"2953\":1,\"2954\":1,\"3013\":1,\"3014\":1}}],[\"对某个类只能存在一个对象实例\",{\"1\":{\"1239\":1}}],[\"对某类格式的资源请求进行拦截\",{\"1\":{\"2701\":1}}],[\"对http协议的操作进行封装\",{\"1\":{\"2446\":1}}],[\"对照如下\",{\"1\":{\"2390\":1}}],[\"对照matcher构造器源码\",{\"1\":{\"756\":1}}],[\"对两个类型相同的参数进行二元运算\",{\"1\":{\"2239\":1}}],[\"对种子进行的操作\",{\"1\":{\"2202\":1}}],[\"对集合数据进行操作\",{\"1\":{\"2188\":1}}],[\"对集合对象实现同步控制等方法\",{\"1\":{\"679\":1,\"1695\":1}}],[\"对数据的操作\",{\"1\":{\"2915\":1}}],[\"对数据库高并发读写的需求\",{\"1\":{\"3026\":1}}],[\"对数据库的高可扩展性和高可用性的需求\",{\"1\":{\"3026\":1}}],[\"对数据库的crud基本操作\",{\"1\":{\"2758\":1}}],[\"对数据库的调用方式\",{\"0\":{\"2308\":1}}],[\"对数据库连接进行安全检测\",{\"1\":{\"2073\":1}}],[\"对数据源的数据进行处理\",{\"1\":{\"2192\":1}}],[\"对数组进行排序\",{\"1\":{\"643\":1}}],[\"对原有方法进行增强\",{\"1\":{\"2072\":1}}],[\"对原有文件的覆盖\",{\"1\":{\"1812\":1}}],[\"对person的操作\",{\"0\":{\"2008\":1}}],[\"对速率\",{\"1\":{\"1951\":1}}],[\"对文本文件进行转码\",{\"0\":{\"1858\":1}}],[\"对子类要求也要具备相应的泛型\",{\"1\":{\"1739\":1}}],[\"对处于\",{\"1\":{\"1685\":1}}],[\"对处于有序状态\",{\"1\":{\"1666\":1}}],[\"对的插入顺序一致\",{\"1\":{\"1682\":1}}],[\"对进行排序\",{\"1\":{\"1685\":1}}],[\"对进行\",{\"1\":{\"1666\":1}}],[\"对时\",{\"1\":{\"1666\":1,\"1685\":1}}],[\"对性能影响很大\",{\"1\":{\"1564\":1}}],[\"对多个字段联合创建一个索引\",{\"1\":{\"3113\":1}}],[\"对多个对象进行排序\",{\"0\":{\"503\":1}}],[\"对多条操作共享数据的语句\",{\"1\":{\"1508\":1,\"1525\":1}}],[\"对图形化界面更有意义\",{\"1\":{\"1445\":1}}],[\"对对象的属性等进行初始化\",{\"1\":{\"1280\":1}}],[\"对称性\",{\"1\":{\"1180\":1}}],[\"对构造器的调用\",{\"0\":{\"1139\":1}}],[\"对属性可以赋值的位置\",{\"0\":{\"1026\":1}}],[\"对本身是质数的自然数是有效的\",{\"1\":{\"956\":1}}],[\"对各种\",{\"1\":{\"833\":1}}],[\"对int类型数组的值按数字大小的升序\",{\"1\":{\"644\":1}}],[\"对即将获取的内容无限制\",{\"1\":{\"639\":1,\"760\":1}}],[\"对应资源文件\",{\"1\":{\"2511\":1}}],[\"对应编译后java文件\",{\"1\":{\"2511\":1}}],[\"对应了一个不断变化的上下文环境\",{\"1\":{\"1437\":1}}],[\"对应的file可以不存在的\",{\"1\":{\"1810\":1}}],[\"对应的类一定要重写equals\",{\"1\":{\"1637\":1}}],[\"对应的一对\",{\"1\":{\"923\":1}}],[\"对应的包装类实例\",{\"1\":{\"498\":1}}],[\"对应的包装类实例大于\",{\"1\":{\"498\":1}}],[\"对应类中调用的方法的返回值\",{\"1\":{\"626\":1,\"2066\":1}}],[\"对日期时间进行的修改将返回同样的一个类的对象\",{\"1\":{\"465\":1}}],[\"对所有的返回值都使用r对象进行包装\",{\"1\":{\"371\":1}}],[\"对于副本集只能通过uri进行连接\",{\"1\":{\"3237\":1}}],[\"对于副本集\",{\"1\":{\"3209\":1}}],[\"对于单个字段索引和排序操作\",{\"1\":{\"3105\":1}}],[\"对于高亮查询可以通过highlightbuilder对象对高亮显示进行配置\",{\"1\":{\"3018\":1}}],[\"对于文档的查询来说\",{\"1\":{\"2870\":1}}],[\"对于现今的应用来讲\",{\"1\":{\"2749\":1}}],[\"对于前后端分离项目\",{\"1\":{\"2672\":1}}],[\"对于流的copy的代码还是比较复杂的\",{\"1\":{\"2647\":1}}],[\"对于响应体\",{\"0\":{\"2637\":1}}],[\"对于响应行\",{\"1\":{\"2635\":1}}],[\"对于请求体中的数据\",{\"1\":{\"2605\":1}}],[\"对于动态资源来说\",{\"1\":{\"2523\":1}}],[\"对于多应用共享同一数据库的系统而言\",{\"1\":{\"2419\":1}}],[\"对于业务请求处理而言\",{\"1\":{\"2419\":1}}],[\"对于具体的数据表\",{\"1\":{\"2394\":1}}],[\"对于dml来说\",{\"1\":{\"2330\":1}}],[\"对于mysql等数据库层面的数据源\",{\"1\":{\"2189\":1}}],[\"对于从nosql获取的数据\",{\"1\":{\"2187\":1}}],[\"对于\",{\"1\":{\"1966\":1,\"2849\":1}}],[\"对于数据的输入\",{\"1\":{\"1773\":1}}],[\"对于list<\",{\"1\":{\"1744\":1}}],[\"对于频繁的遍历操作\",{\"1\":{\"1665\":1}}],[\"对于频繁的插入\",{\"1\":{\"1613\":1}}],[\"对于object元素\",{\"1\":{\"1647\":1}}],[\"对于存放在set容器中的对象\",{\"1\":{\"1637\":1}}],[\"对于无序\",{\"1\":{\"1574\":1}}],[\"对于添加\",{\"1\":{\"1574\":1}}],[\"对于每一次数据库连接\",{\"1\":{\"2414\":1}}],[\"对于每个类而言\",{\"1\":{\"2012\":1}}],[\"对于每\",{\"1\":{\"1402\":1}}],[\"对于异常对象e\",{\"1\":{\"1341\":1}}],[\"对于这些非结构化的数据文本\",{\"1\":{\"2848\":1}}],[\"对于这些错误\",{\"1\":{\"1314\":1}}],[\"对于这三部分内容\",{\"1\":{\"2596\":1}}],[\"对于这类异常\",{\"1\":{\"1324\":1,\"1325\":1}}],[\"对于integer类来说\",{\"1\":{\"1182\":1}}],[\"对于ide开发工具来时\",{\"1\":{\"782\":1}}],[\"对于引用类型就是比较内存地址\",{\"1\":{\"1181\":1}}],[\"对于基本类型就是比较值\",{\"1\":{\"1181\":1}}],[\"对于基本数据类型的包装类和string\",{\"1\":{\"662\":1}}],[\"对于重载而言\",{\"1\":{\"1159\":1}}],[\"对于编译器而言\",{\"1\":{\"1159\":1}}],[\"对于父类中的private成员\",{\"1\":{\"1119\":1}}],[\"对于二维数组的理解\",{\"1\":{\"982\":1}}],[\"对于一个数值常量\",{\"1\":{\"867\":1}}],[\"对于一个全新的迭代器\",{\"1\":{\"675\":1,\"1591\":1}}],[\"对于不同的平台\",{\"1\":{\"767\":1}}],[\"对于不常用的依赖\",{\"1\":{\"336\":1}}],[\"对于非完全匹配\",{\"1\":{\"757\":1}}],[\"对于复杂的表达式需要使用jdk中的matcher类来处理\",{\"1\":{\"738\":1}}],[\"对于arraylist\",{\"1\":{\"667\":1}}],[\"对于自定义类\",{\"1\":{\"664\":1,\"1647\":1}}],[\"对于自定义的类\",{\"1\":{\"496\":1}}],[\"对于输入的非十进制数据\",{\"1\":{\"640\":1,\"761\":1}}],[\"对于number类型的xxx有一个可选参数\",{\"1\":{\"640\":1,\"761\":1}}],[\"对于实现了comparable接口的类\",{\"1\":{\"499\":1}}],[\"对于日志文件的使用存在各种各样的策略\",{\"1\":{\"257\":1}}],[\"对具体的字段设置校验规则\",{\"0\":{\"176\":1}}],[\"对象id\",{\"1\":{\"3034\":1}}],[\"对象对应于关系型数据库的\",{\"1\":{\"3032\":1}}],[\"对象有两个\",{\"1\":{\"2976\":1}}],[\"对象类型\",{\"1\":{\"2963\":1}}],[\"对象和\",{\"1\":{\"2836\":1}}],[\"对象维护了一个指向当前数据行的指针\",{\"1\":{\"2340\":1}}],[\"对象以逻辑表格的形式封装了执行数据库操作的结果集\",{\"1\":{\"2339\":1}}],[\"对象所代表的\",{\"1\":{\"2321\":1}}],[\"对象所对应的类\",{\"1\":{\"1661\":1}}],[\"对象只能由系统建立对象\",{\"1\":{\"2015\":1}}],[\"对象表示\",{\"1\":{\"1996\":1}}],[\"对象上通过方法\",{\"1\":{\"1993\":1}}],[\"对象封装了udp数据报\",{\"1\":{\"1981\":1}}],[\"对象负责等待客户端请求建立套接字连接\",{\"1\":{\"1975\":1}}],[\"对象关联的文件名\",{\"1\":{\"1918\":1}}],[\"对象指定的文件路径\",{\"1\":{\"1918\":1}}],[\"对象序列化机制允许把内存中的java对象转换成平台无关的二进制流\",{\"1\":{\"1896\":1}}],[\"对象流\",{\"0\":{\"1893\":1}}],[\"对象包含一个记录指针\",{\"1\":{\"1882\":1}}],[\"对象中的列数\",{\"1\":{\"2345\":1}}],[\"对象中的字符串\",{\"0\":{\"885\":1}}],[\"对象中列的类型和属性信息的对象\",{\"1\":{\"2344\":1}}],[\"对象中用作\",{\"1\":{\"1649\":1}}],[\"对象中各个元素\",{\"1\":{\"1587\":1}}],[\"对象储存在这里\",{\"1\":{\"1453\":1}}],[\"对象如果有实例变量\",{\"1\":{\"1372\":1}}],[\"对象实体内属性的值就被修改了\",{\"1\":{\"1301\":1}}],[\"对象引用\",{\"1\":{\"1298\":1}}],[\"对象加载时间过长\",{\"1\":{\"1242\":1}}],[\"对象在编译期间\",{\"1\":{\"1150\":1}}],[\"对象也是引用数据类型\",{\"1\":{\"1022\":1}}],[\"对象作为方法的参数\",{\"1\":{\"1019\":1}}],[\"对象作为函数的参数\",{\"1\":{\"1019\":1}}],[\"对象就是引用类型的\",{\"1\":{\"1018\":1}}],[\"对象间进行赋值时\",{\"1\":{\"1014\":1}}],[\"对象间的赋值\",{\"0\":{\"1014\":1}}],[\"对象成员\",{\"1\":{\"1011\":1}}],[\"对象名\",{\"1\":{\"1011\":2,\"1552\":1,\"1553\":1}}],[\"对象名就是log\",{\"1\":{\"263\":1}}],[\"对象名就是\",{\"1\":{\"244\":1}}],[\"对象为最小单位\",{\"1\":{\"1002\":1}}],[\"对象是\",{\"1\":{\"1405\":1}}],[\"对象是实际存在的该类事物的每个个体\",{\"1\":{\"1007\":1}}],[\"对象是计算机世界中解决问题的最终工具\",{\"1\":{\"1004\":1}}],[\"对象是对输入字符串进行解释和匹配操作的引擎\",{\"1\":{\"736\":1}}],[\"对象是一个正则表达式的编译表示\",{\"1\":{\"736\":1}}],[\"对象的生命周期指一个对象从被创建到被销毁的整个过程\",{\"1\":{\"2544\":1}}],[\"对象的根路径\",{\"1\":{\"1918\":1}}],[\"对象的字符串表示形式\",{\"1\":{\"1918\":1}}],[\"对象的序列化机制\",{\"0\":{\"1896\":1}}],[\"对象的存放地址是随机的\",{\"1\":{\"1647\":1}}],[\"对象的属性是复制类的\",{\"1\":{\"1301\":1}}],[\"对象的内存解析\",{\"0\":{\"1299\":1}}],[\"对象的多态性\",{\"0\":{\"1147\":1},\"1\":{\"1151\":1}}],[\"对象的\",{\"1\":{\"736\":1,\"2316\":1,\"2319\":1,\"2321\":1,\"2322\":1,\"2340\":1}}],[\"对象的所有旧值\",{\"1\":{\"690\":1}}],[\"对象的getclass方法\",{\"0\":{\"587\":1}}],[\"对象\",{\"0\":{\"2154\":1,\"2157\":1},\"1\":{\"590\":1,\"736\":3,\"1005\":1,\"1007\":1,\"1011\":2,\"1026\":2,\"1075\":2,\"1168\":1,\"1176\":1,\"1189\":1,\"1276\":1,\"1402\":1,\"1404\":1,\"1549\":1,\"1589\":1,\"1918\":1,\"1919\":1,\"1920\":2,\"1975\":1,\"1976\":1,\"1990\":1,\"1999\":1,\"2150\":1,\"2172\":1,\"2175\":1,\"2178\":1,\"2316\":1,\"2319\":1,\"2323\":1,\"2338\":1,\"3032\":1}}],[\"对象排序的实质\",{\"0\":{\"492\":1}}],[\"对象属性\",{\"1\":{\"127\":1}}],[\"对象数组中的每个元素值被用来作为查询语句的置换参数\",{\"1\":{\"2435\":1}}],[\"对象数组中数据\",{\"1\":{\"127\":1}}],[\"对象数组\",{\"0\":{\"1018\":1},\"1\":{\"124\":1}}],[\"对整个项目负责\",{\"1\":{\"22\":1}}],[\"缩略格式\",{\"1\":{\"124\":1}}],[\"减法运算\",{\"1\":{\"532\":1}}],[\"减少了创建新线程的时间\",{\"1\":{\"1565\":1}}],[\"减少了系统性能开销\",{\"1\":{\"1239\":1}}],[\"减少了冗余\",{\"1\":{\"1082\":1}}],[\"减少日期时间\",{\"1\":{\"474\":1}}],[\"减少pom\",{\"1\":{\"101\":1}}],[\"减号与数据间空格分隔\",{\"1\":{\"124\":1}}],[\"代理流程分析\",{\"0\":{\"2097\":1}}],[\"代理对象会读取被代理类中的同名方法的方法名和形参列表\",{\"1\":{\"2085\":1}}],[\"代理对象决定是否以及何时将方法调用转到原始对象上\",{\"1\":{\"2072\":1}}],[\"代理工厂做一些后续的收尾工作\",{\"1\":{\"2080\":1}}],[\"代理工厂做一些准备工作\",{\"1\":{\"2080\":1}}],[\"代理nike工厂\",{\"1\":{\"2078\":1}}],[\"代理类调用一个被代理类的同名方法\",{\"1\":{\"2097\":1}}],[\"代理类的对象\",{\"1\":{\"2096\":1}}],[\"代理类代码分析\",{\"0\":{\"2093\":1}}],[\"代理类对象\",{\"1\":{\"2092\":1}}],[\"代理类和被代理类在编译期间\",{\"1\":{\"2076\":1}}],[\"代理类\",{\"0\":{\"2080\":1,\"2094\":1,\"2095\":1},\"1\":{\"2073\":1,\"2078\":1}}],[\"代理设计模式\",{\"0\":{\"2072\":1}}],[\"代表一次请求的范围\",{\"1\":{\"2653\":1}}],[\"代表一个查询对象\",{\"1\":{\"2933\":1}}],[\"代表一个类\",{\"1\":{\"2002\":1}}],[\"代表一个平台无关的平台路径\",{\"1\":{\"1916\":1}}],[\"代表的是零或多个层级访问目录\",{\"1\":{\"2575\":1}}],[\"代表urlpatterns\",{\"1\":{\"2572\":1}}],[\"代表这个值存在\",{\"1\":{\"2247\":1}}],[\"代表类\",{\"1\":{\"2002\":1}}],[\"代表类的\",{\"1\":{\"2002\":1}}],[\"代表类的方法\",{\"1\":{\"2002\":1}}],[\"代表文件已经读完了\",{\"1\":{\"1801\":1}}],[\"代表不可变的字符序列\",{\"1\":{\"878\":1}}],[\"代表其他语言中的一个\",{\"1\":{\"737\":1}}],[\"代表ios格式\",{\"1\":{\"466\":1}}],[\"代表可变的字符序列吗\",{\"1\":{\"438\":1}}],[\"代表时区\",{\"1\":{\"123\":1}}],[\"代码示例\",{\"0\":{\"2325\":1,\"3015\":1,\"3019\":1}}],[\"代码结构\",{\"1\":{\"1951\":1}}],[\"代码解析\",{\"0\":{\"1806\":1}}],[\"代码更加简洁\",{\"1\":{\"1703\":1}}],[\"代码分析工具\",{\"1\":{\"1387\":1}}],[\"代码没有异常等\",{\"1\":{\"1342\":1}}],[\"代码块可以输出\",{\"1\":{\"1278\":2}}],[\"代码块里面可以像方法体一样\",{\"1\":{\"1276\":1}}],[\"代码块\",{\"0\":{\"1275\":1}}],[\"代码块构造器等结构\",{\"1\":{\"1248\":1}}],[\"代码块和内部类的\",{\"1\":{\"1222\":1}}],[\"代码块中初始化\",{\"1\":{\"1104\":1}}],[\"代码块内\",{\"1\":{\"1023\":1,\"1025\":1,\"1203\":1}}],[\"代码块局部变量\",{\"1\":{\"828\":1}}],[\"代码执行完毕\",{\"1\":{\"639\":1,\"760\":1}}],[\"代码生成\",{\"0\":{\"312\":1}}],[\"代码如下\",{\"1\":{\"262\":1,\"2975\":1,\"2977\":1,\"2978\":1,\"2980\":1,\"2983\":1,\"2984\":1,\"2986\":1,\"2987\":1,\"2991\":1,\"2992\":1}}],[\"代码\",{\"0\":{\"2303\":1,\"2630\":1},\"1\":{\"104\":1,\"790\":1,\"3034\":1}}],[\"代码测试\",{\"0\":{\"177\":1},\"1\":{\"29\":1}}],[\"代码实现\",{\"1\":{\"22\":1}}],[\"最好将mongodb部署到公司服务器内网\",{\"1\":{\"3179\":1}}],[\"最好可以通过一个代理类完成全部的代理功能\",{\"1\":{\"2074\":1}}],[\"最像关系型数据库\",{\"1\":{\"3021\":1}}],[\"最基本的查询是\",{\"1\":{\"2990\":1}}],[\"最基础版本\",{\"1\":{\"779\":1}}],[\"最少出现0次\",{\"1\":{\"2781\":1}}],[\"最常见的文本文件\",{\"1\":{\"1797\":1}}],[\"最常用的复合方式是层次方式\",{\"1\":{\"1952\":1}}],[\"最常用\",{\"1\":{\"11\":1,\"2446\":1}}],[\"最终导致静态资源不能被访问\",{\"1\":{\"2577\":1}}],[\"最终将导致重启数据库\",{\"1\":{\"2414\":1}}],[\"最终方案\",{\"0\":{\"2301\":1}}],[\"最终被调用的就是myrunnable类的run方法了\",{\"1\":{\"1493\":1}}],[\"最终的\",{\"1\":{\"1100\":1}}],[\"最多无限制\",{\"1\":{\"2781\":1}}],[\"最多两个字节编\",{\"1\":{\"1861\":1}}],[\"最多两个字节编码所有字符\",{\"1\":{\"1861\":1}}],[\"最多只能声明一个\",{\"1\":{\"1082\":1}}],[\"最多只能声明一个可变形参\",{\"1\":{\"1047\":1}}],[\"最多读len个字符\",{\"1\":{\"570\":1}}],[\"最小副本集架构\",{\"1\":{\"3135\":1}}],[\"最小值\",{\"1\":{\"2781\":1}}],[\"最小值不能低于202\",{\"1\":{\"176\":1}}],[\"最小的副本集架构\",{\"1\":{\"3133\":1}}],[\"最小的\",{\"0\":{\"2443\":1}}],[\"最小连接池数量\",{\"1\":{\"2426\":1}}],[\"最小是2进制\",{\"1\":{\"640\":1,\"761\":1}}],[\"最大值\",{\"1\":{\"2781\":1}}],[\"最大值不能超过8888\",{\"1\":{\"176\":1}}],[\"最大范围\",{\"1\":{\"2689\":1}}],[\"最大连接池数量\",{\"1\":{\"2425\":1,\"2426\":1}}],[\"最大的生日为\",{\"1\":{\"2409\":1}}],[\"最大线程数\",{\"1\":{\"1565\":1}}],[\"最大最小的传输速度等\",{\"1\":{\"1264\":1}}],[\"最大是36进制\",{\"1\":{\"640\":1,\"761\":1}}],[\"最大为2\",{\"1\":{\"529\":1}}],[\"最先加载\",{\"1\":{\"234\":1}}],[\"最后是显示的\",{\"1\":{\"3097\":1}}],[\"最后返回所有的文档id\",{\"1\":{\"2874\":1}}],[\"最后打成jar包在项目或模块中使用\",{\"1\":{\"2739\":1}}],[\"最后一次可能会出错\",{\"1\":{\"1808\":1}}],[\"最后一个枚举对象以分号结束\",{\"1\":{\"1382\":1}}],[\"最后一趟是装不满的\",{\"1\":{\"569\":1,\"1808\":1}}],[\"最后+1\",{\"1\":{\"873\":1}}],[\"最后加载的环境属性生效\",{\"1\":{\"233\":1}}],[\"最后使用+\",{\"1\":{\"123\":1}}],[\"最顶层是来配置当前启动的环境的\",{\"1\":{\"226\":1}}],[\"最高位是符号位\",{\"1\":{\"873\":1}}],[\"最高\",{\"1\":{\"216\":1}}],[\"最高等级的启动文类中进行关闭\",{\"1\":{\"153\":1}}],[\"最低\",{\"1\":{\"216\":1}}],[\"格式如下\",{\"1\":{\"3099\":1}}],[\"格式叫bson\",{\"1\":{\"3032\":1}}],[\"格式拼接结果\",{\"1\":{\"2585\":1}}],[\"格式是\",{\"1\":{\"2426\":1}}],[\"格式是固定的\",{\"1\":{\"797\":1}}],[\"格式上只有参数和返回值的区别\",{\"1\":{\"2133\":1}}],[\"格式5\",{\"0\":{\"2128\":1}}],[\"格式4\",{\"0\":{\"2126\":1}}],[\"格式3\",{\"0\":{\"2124\":1}}],[\"格式详见\",{\"1\":{\"1389\":1}}],[\"格式2\",{\"0\":{\"2122\":1},\"1\":{\"1047\":1}}],[\"格式1\",{\"1\":{\"1047\":1}}],[\"格式为yml\",{\"1\":{\"3048\":1}}],[\"格式为\",{\"1\":{\"470\":1,\"2684\":1}}],[\"格式化和解析\",{\"1\":{\"480\":1}}],[\"格式化和解析日期\",{\"1\":{\"459\":1}}],[\"格式化解析时间和日期\",{\"1\":{\"462\":1}}],[\"格式化只对date有用\",{\"1\":{\"460\":1}}],[\"格式化\",{\"0\":{\"484\":1,\"488\":1},\"1\":{\"460\":1,\"481\":1,\"486\":1}}],[\"格式\",{\"0\":{\"911\":1,\"1215\":1,\"1277\":1,\"2114\":1},\"1\":{\"123\":1,\"368\":1,\"1029\":1,\"2780\":1,\"3069\":1}}],[\"日\",{\"1\":{\"469\":1}}],[\"日历类\",{\"1\":{\"459\":1}}],[\"日期类型\",{\"1\":{\"2963\":1}}],[\"日期时间\",{\"1\":{\"483\":1,\"486\":1}}],[\"日期与时间api\",{\"0\":{\"458\":1}}],[\"日期\",{\"1\":{\"253\":1,\"258\":1,\"481\":1,\"483\":1,\"486\":1}}],[\"日期必须使用\",{\"1\":{\"123\":1}}],[\"日志存储目录\",{\"1\":{\"3047\":1}}],[\"日志记录\",{\"1\":{\"3037\":1}}],[\"日志记录器的滚动策略\",{\"1\":{\"262\":3}}],[\"日志目录\",{\"1\":{\"2856\":1,\"3140\":1}}],[\"日志级别从低到高分为trace\",{\"1\":{\"262\":1}}],[\"日志分文件存储\",{\"1\":{\"257\":1}}],[\"日志策略配置\",{\"0\":{\"258\":1}}],[\"日志策略\",{\"0\":{\"257\":1}}],[\"日志文件保留天数\",{\"1\":{\"262\":3}}],[\"日志文件输出格式\",{\"1\":{\"262\":3}}],[\"日志文件大小限制\",{\"1\":{\"258\":1}}],[\"日志文件名\",{\"1\":{\"256\":1}}],[\"日志文件\",{\"0\":{\"255\":1}}],[\"日志处理\",{\"0\":{\"254\":1}}],[\"日志格式语法\",{\"0\":{\"253\":1}}],[\"日志输出格式\",{\"0\":{\"250\":1}}],[\"日志组\",{\"1\":{\"249\":1}}],[\"日志系统提供了更加细致的日志等级控制\",{\"1\":{\"249\":1}}],[\"日志等级一般在application配置文件中设置\",{\"1\":{\"247\":1}}],[\"日志设置好以后可以根据设置选择哪些参与记录\",{\"1\":{\"246\":1}}],[\"日志的级别分为6种\",{\"1\":{\"246\":1}}],[\"日志的等级选择\",{\"0\":{\"247\":1}}],[\"日志的等级\",{\"0\":{\"245\":1}}],[\"日志的作用\",{\"0\":{\"241\":1}}],[\"日志会在控制台打印\",{\"1\":{\"242\":1}}],[\"日志\",{\"0\":{\"259\":1},\"1\":{\"29\":1,\"262\":3}}],[\"字段上创建一个唯一的索引\",{\"1\":{\"3109\":1}}],[\"字段的索引\",{\"1\":{\"3117\":1}}],[\"字段的数据类型是字符型\",{\"1\":{\"3032\":1}}],[\"字段的值\",{\"1\":{\"2928\":1,\"2935\":1,\"2996\":1}}],[\"字段不会被索引\",{\"1\":{\"2963\":1}}],[\"字段会被索引\",{\"1\":{\"2963\":1}}],[\"字段名的值是一个对象\",{\"1\":{\"2963\":1}}],[\"字段名\",{\"1\":{\"2954\":7,\"2963\":2,\"3114\":1}}],[\"字段\",{\"1\":{\"2928\":1,\"2935\":1,\"2996\":1,\"3099\":1,\"3111\":1}}],[\"字段包含所接收信息的长度\",{\"1\":{\"1985\":1}}],[\"字段声明\",{\"1\":{\"1405\":1,\"1413\":1}}],[\"字节输出流的方式往浏览器写\",{\"0\":{\"2637\":1}}],[\"字节码操作获得类似动态语言的特性\",{\"1\":{\"1999\":1}}],[\"字节码文件\",{\"1\":{\"792\":1}}],[\"字节数据\",{\"1\":{\"1896\":1,\"2645\":1}}],[\"字节数组\",{\"1\":{\"1843\":2}}],[\"字节\",{\"1\":{\"1843\":2}}],[\"字节值\",{\"1\":{\"565\":1}}],[\"字节流中的数据都是字符时\",{\"1\":{\"1843\":1}}],[\"字节流输入\",{\"1\":{\"1842\":1}}],[\"字节流的操作流程和字符流是一样\",{\"1\":{\"1820\":1}}],[\"字节流写出\",{\"1\":{\"1819\":1}}],[\"字节流读入\",{\"1\":{\"1819\":1}}],[\"字节流操作字节\",{\"1\":{\"1797\":1}}],[\"字节流与字符流的选择\",{\"0\":{\"1790\":1}}],[\"字节流\",{\"0\":{\"577\":1,\"1819\":1,\"1828\":1,\"1829\":1,\"1836\":1},\"1\":{\"565\":1,\"1775\":1,\"1777\":1}}],[\"字面量\",{\"1\":{\"876\":1}}],[\"字面量方式\",{\"1\":{\"401\":1}}],[\"字面量表示方式\",{\"0\":{\"123\":1}}],[\"字符的编码\",{\"1\":{\"1857\":1}}],[\"字符数组\",{\"1\":{\"1843\":1}}],[\"字符变量的三种表现形式\",{\"0\":{\"854\":1}}],[\"字符类型不是字符串\",{\"1\":{\"853\":1}}],[\"字符类型只能是一个字符\",{\"1\":{\"853\":1}}],[\"字符类型\",{\"0\":{\"851\":1}}],[\"字符型\",{\"1\":{\"827\":1,\"1025\":1}}],[\"字符\",{\"0\":{\"576\":1},\"1\":{\"852\":1}}],[\"字符到数组中\",{\"1\":{\"566\":1}}],[\"字符流输出\",{\"1\":{\"1842\":1}}],[\"字符流的数据写出\",{\"1\":{\"1809\":1}}],[\"字符流的数据读入\",{\"1\":{\"1798\":1}}],[\"字符流操作字符\",{\"1\":{\"1797\":1}}],[\"字符流\",{\"0\":{\"1830\":1,\"1831\":1,\"1837\":1},\"1\":{\"565\":1,\"1775\":1}}],[\"字符集介绍\",{\"0\":{\"855\":1}}],[\"字符集必须一致\",{\"1\":{\"426\":1}}],[\"字符集\",{\"0\":{\"1859\":1},\"1\":{\"426\":1}}],[\"字符串类型的数据\",{\"1\":{\"3034\":1}}],[\"字符串的相互转换\",{\"1\":{\"2836\":1}}],[\"字符串的序列化和反序列化\",{\"0\":{\"1902\":1}}],[\"字符串的不可变性\",{\"0\":{\"879\":1}}],[\"字符串角标越界\",{\"0\":{\"1330\":1}}],[\"字符串属于引用类型\",{\"1\":{\"885\":1}}],[\"字符串也属于引用类型\",{\"1\":{\"879\":1}}],[\"字符串常量池中是不会存储相同内容的字符串的\",{\"1\":{\"877\":1}}],[\"字符串常量池\",{\"0\":{\"877\":1}}],[\"字符串参数更加精准\",{\"1\":{\"530\":1}}],[\"字符串排序\",{\"0\":{\"508\":1}}],[\"字符串\",{\"1\":{\"482\":1,\"576\":1,\"878\":1,\"1843\":2,\"2963\":1,\"3034\":1,\"3159\":1}}],[\"字符串替换\",{\"1\":{\"454\":1}}],[\"字符串拼接\",{\"1\":{\"452\":1}}],[\"字符串截取的end位置\",{\"1\":{\"421\":1}}],[\"字符串截取\",{\"1\":{\"421\":1,\"449\":1}}],[\"字符串本身没有改变\",{\"1\":{\"417\":1}}],[\"字符串可以直接书写\",{\"1\":{\"123\":1}}],[\"字符编码\",{\"0\":{\"299\":1}}],[\"~\",{\"1\":{\"123\":2,\"909\":1}}],[\"八进制转二进制\",{\"1\":{\"874\":1}}],[\"八进制\",{\"1\":{\"123\":1,\"871\":1,\"874\":1}}],[\"导致连接一直存在\",{\"1\":{\"2414\":1}}],[\"导致异常结束\",{\"1\":{\"1526\":1}}],[\"导致共享数据的错误\",{\"1\":{\"1507\":1}}],[\"导致a线程更新完数据后\",{\"1\":{\"1505\":1}}],[\"导致程序运行过慢\",{\"1\":{\"1457\":1}}],[\"导致编译时\",{\"1\":{\"1162\":1}}],[\"导致配置文件无效\",{\"1\":{\"119\":1}}],[\"导入servlet包\",{\"0\":{\"2525\":1}}],[\"导入指定类或接口中的静态结构\",{\"1\":{\"1098\":1}}],[\"导入包和类名的可以直接用类名初始化\",{\"1\":{\"1096\":1}}],[\"导入包下全部类\",{\"1\":{\"1094\":1}}],[\"导入多个结构\",{\"1\":{\"1094\":1}}],[\"导入jedis坐标\",{\"1\":{\"292\":1}}],[\"导入jsr303规范\",{\"1\":{\"174\":1}}],[\"导入测试对应的starter\",{\"1\":{\"181\":1}}],[\"导入依赖\",{\"0\":{\"174\":1}}],[\"导入坐标\",{\"0\":{\"141\":1,\"2837\":1}}],[\"导入一个springboot开发依赖\",{\"1\":{\"140\":1}}],[\"导入项目\",{\"1\":{\"81\":1}}],[\"多种组合方式可以同时采用\",{\"1\":{\"2935\":1}}],[\"多条件查询\",{\"0\":{\"2934\":1}}],[\"多条件表达式的顺序\",{\"1\":{\"924\":1}}],[\"多走这一步\",{\"1\":{\"2602\":1}}],[\"多执行语句\",{\"0\":{\"2128\":1}}],[\"多参构造器\",{\"0\":{\"2178\":1}}],[\"多参\",{\"0\":{\"2128\":1}}],[\"多版本切换\",{\"0\":{\"2107\":1}}],[\"多版本jdk\",{\"0\":{\"782\":1}}],[\"多次启动\",{\"1\":{\"3137\":1}}],[\"多次执行\",{\"1\":{\"1509\":1}}],[\"多次使用\",{\"1\":{\"738\":1,\"1419\":1}}],[\"多打印\",{\"1\":{\"1507\":1}}],[\"多重继承功能\",{\"1\":{\"1283\":1}}],[\"多重继承\",{\"0\":{\"1256\":1}}],[\"多线程从集合中取出数据\",{\"1\":{\"2197\":1}}],[\"多线程就失去意义了\",{\"1\":{\"1514\":1}}],[\"多线程类\",{\"0\":{\"1467\":1}}],[\"多线程程序的优点\",{\"0\":{\"1445\":1}}],[\"多线程的意义\",{\"0\":{\"1443\":1}}],[\"多线程\",{\"0\":{\"3262\":1},\"1\":{\"1242\":1,\"1446\":1}}],[\"多线程同步\",{\"1\":{\"681\":1}}],[\"多少次\",{\"1\":{\"1180\":1}}],[\"多态提高了代码的通用性\",{\"1\":{\"1161\":1}}],[\"多态开发中的应用\",{\"0\":{\"1161\":1}}],[\"多态情况下\",{\"0\":{\"1156\":1}}],[\"多态示例\",{\"0\":{\"1153\":1}}],[\"多态的特性\",{\"1\":{\"1160\":1}}],[\"多态的情况下\",{\"1\":{\"1158\":1}}],[\"多态的意义\",{\"0\":{\"1152\":1}}],[\"多态的使用\",{\"0\":{\"1148\":1}}],[\"多态\",{\"0\":{\"1145\":1,\"1146\":1},\"1\":{\"1003\":1,\"1128\":1}}],[\"多态等\",{\"1\":{\"1002\":1}}],[\"多维数组\",{\"0\":{\"981\":1},\"1\":{\"962\":1}}],[\"多选一\",{\"0\":{\"922\":1}}],[\"多分支\",{\"0\":{\"922\":1}}],[\"多单词时每个单词用下划线连接\",{\"1\":{\"835\":1}}],[\"多单词组成时\",{\"1\":{\"835\":2}}],[\"多单词组成时所有字母都小写\",{\"1\":{\"835\":1}}],[\"多行注释\",{\"0\":{\"807\":1}}],[\"多个字段排序\",{\"0\":{\"3012\":1}}],[\"多个条件\",{\"1\":{\"2996\":1}}],[\"多个条件必须都不符合\",{\"1\":{\"2996\":1}}],[\"多个条件必须全部符合\",{\"1\":{\"2935\":1,\"2996\":1}}],[\"多个条只要符合一个即可\",{\"1\":{\"2935\":1,\"2996\":1}}],[\"多个添加必须都不符合\",{\"1\":{\"2935\":1}}],[\"多个web项目的cookie的共享\",{\"0\":{\"2808\":1}}],[\"多个jar包放到一起我们就称之为组件\",{\"1\":{\"2732\":1}}],[\"多个过滤器的执行顺序\",{\"0\":{\"2705\":1}}],[\"多个过滤器\",{\"0\":{\"2704\":1}}],[\"多个tomcat目标的使用\",{\"0\":{\"2512\":1}}],[\"多个中间操作可以连接起来形成一个流水线\",{\"1\":{\"2205\":1}}],[\"多个线程安装cpu的调度执行run方法\",{\"1\":{\"1533\":1}}],[\"多个线程安装1\",{\"1\":{\"1533\":1}}],[\"多个线程必须要共用同一把锁\",{\"1\":{\"1511\":1}}],[\"多个线程共同操作的变量\",{\"1\":{\"1511\":1}}],[\"多个人做同一件事\",{\"1\":{\"1442\":1}}],[\"多个人同时做不同的事\",{\"1\":{\"1442\":1}}],[\"多个cpu同时执行多个任务\",{\"1\":{\"1442\":1}}],[\"多个对象共享同一个静态变量\",{\"1\":{\"1227\":1}}],[\"多个类中存在相同属性和行为时\",{\"1\":{\"1111\":1}}],[\"多个环境间使用逗号分隔\",{\"1\":{\"232\":1}}],[\"多个配置文件\",{\"0\":{\"116\":1}}],[\"多文件版\",{\"0\":{\"227\":1}}],[\"多层级配置文件的关系\",{\"0\":{\"218\":1}}],[\"多级数据\",{\"1\":{\"127\":1}}],[\"多格式配置文件\",{\"0\":{\"117\":1}}],[\"多环境开发控制\",{\"0\":{\"230\":1}}],[\"多环境开发\",{\"0\":{\"223\":1},\"1\":{\"29\":1}}],[\"8也可以写成小写\",{\"1\":{\"2629\":1}}],[\"855ed8bca863\",{\"1\":{\"3198\":1}}],[\"85\",{\"1\":{\"2426\":1}}],[\"8523015e+5\",{\"1\":{\"123\":1}}],[\"8类库的一部分\",{\"1\":{\"2248\":1}}],[\"87\",{\"1\":{\"2226\":2}}],[\"878\",{\"1\":{\"473\":3}}],[\"8的原理\",{\"0\":{\"1864\":1}}],[\"8的由来\",{\"0\":{\"1863\":1}}],[\"8和utf\",{\"1\":{\"1863\":1}}],[\"8就是每次8个位传输数据\",{\"1\":{\"1863\":1}}],[\"8kb\",{\"1\":{\"1826\":1}}],[\"8bit\",{\"1\":{\"1775\":1}}],[\"8中user\",{\"1\":{\"1767\":1}}],[\"8中引入的java\",{\"1\":{\"461\":1}}],[\"89\",{\"1\":{\"1687\":1,\"1707\":1}}],[\"8且当前数组的长度\",{\"1\":{\"1678\":1}}],[\"8底层的数组是\",{\"1\":{\"1678\":1}}],[\"8之后\",{\"1\":{\"1421\":1}}],[\"8之后的重复注解\",{\"0\":{\"1420\":1}}],[\"8之前\",{\"1\":{\"1419\":1}}],[\"8之前的重复注解\",{\"0\":{\"1419\":1}}],[\"8对注解处理提供了两点改进\",{\"1\":{\"1417\":1}}],[\"888\",{\"1\":{\"3076\":1}}],[\"8888\",{\"1\":{\"176\":1}}],[\"8859\",{\"1\":{\"2628\":2}}],[\"88\",{\"1\":{\"1120\":1,\"1707\":1}}],[\"8u321\",{\"1\":{\"779\":1}}],[\"8种基本数据类型\",{\"1\":{\"424\":1}}],[\"8编码的字符流\",{\"1\":{\"1847\":1}}],[\"8编码\",{\"1\":{\"299\":1}}],[\"8<\",{\"1\":{\"262\":4}}],[\"82340\",{\"1\":{\"2373\":1}}],[\"82\",{\"1\":{\"226\":1}}],[\"805z\",{\"1\":{\"3159\":1}}],[\"8000\",{\"1\":{\"2957\":2}}],[\"80\",{\"1\":{\"226\":1,\"341\":1,\"1990\":1,\"2502\":1}}],[\"8080199\",{\"1\":{\"2890\":1}}],[\"8080可以找到要访问的tomcat\",{\"1\":{\"2537\":1}}],[\"8080`\",{\"1\":{\"2537\":1}}],[\"8080\",{\"1\":{\"87\":1,\"390\":1,\"394\":1,\"1989\":1,\"2463\":2,\"2467\":2,\"2468\":1,\"2510\":1,\"2533\":1,\"2537\":1,\"2574\":1,\"2575\":1,\"2576\":1,\"2577\":1,\"2598\":2,\"2601\":1,\"2640\":1,\"2642\":1,\"2655\":1,\"2663\":1}}],[\"8\",{\"0\":{\"367\":1,\"368\":1,\"369\":1,\"370\":1,\"371\":1,\"382\":1,\"449\":1,\"519\":1,\"547\":1,\"583\":1,\"596\":1,\"611\":1,\"627\":1,\"651\":1,\"664\":1,\"689\":1,\"704\":1,\"718\":1,\"888\":1,\"917\":1,\"980\":1,\"995\":1,\"1014\":1,\"1075\":1,\"1161\":1,\"1173\":1,\"1199\":1,\"1266\":1,\"1346\":1,\"1600\":1,\"1646\":1,\"1647\":1,\"1648\":1,\"1649\":1,\"1758\":1,\"1772\":1,\"1781\":1,\"1794\":1,\"1824\":1,\"1839\":1,\"1866\":1,\"1893\":2,\"1911\":1,\"2236\":1,\"2410\":1,\"2649\":1,\"2721\":1,\"2807\":1,\"2808\":1,\"2809\":1,\"2824\":1,\"2825\":1,\"2826\":1,\"2973\":1},\"1\":{\"200\":2,\"262\":1,\"461\":1,\"477\":1,\"503\":2,\"509\":2,\"521\":1,\"636\":2,\"644\":2,\"645\":2,\"646\":3,\"647\":6,\"648\":4,\"769\":1,\"781\":1,\"808\":1,\"813\":2,\"855\":2,\"931\":1,\"932\":1,\"1175\":1,\"1190\":1,\"1191\":1,\"1390\":2,\"1645\":1,\"1655\":1,\"1664\":1,\"1762\":1,\"1775\":1,\"1776\":1,\"1777\":1,\"1779\":1,\"1780\":1,\"1782\":1,\"1826\":1,\"1841\":1,\"1847\":1,\"1848\":1,\"1851\":1,\"1853\":1,\"1858\":1,\"1861\":1,\"1862\":1,\"1863\":2,\"1864\":1,\"1865\":1,\"2138\":1,\"2234\":1,\"2239\":1,\"2240\":1,\"2289\":1,\"2291\":1,\"2417\":1,\"2418\":1,\"2426\":2,\"2452\":2,\"2483\":1,\"2503\":1,\"2627\":1,\"2629\":3,\"2630\":1,\"2632\":1,\"2641\":1,\"2648\":2,\"2651\":1,\"2657\":1,\"2771\":1,\"2772\":2,\"2779\":1,\"2806\":3,\"2846\":1,\"2854\":1,\"2858\":2,\"2915\":1,\"2919\":1,\"2945\":1,\"2957\":2,\"2967\":1,\"2971\":2}}],[\"8192\",{\"1\":{\"1828\":1,\"1829\":1,\"1830\":1,\"1831\":1}}],[\"81\",{\"1\":{\"115\":1,\"226\":1}}],[\"推荐update\",{\"1\":{\"2502\":2}}],[\"推荐这种\",{\"1\":{\"2343\":1}}],[\"推荐的unicode编码是utf\",{\"1\":{\"1863\":1}}],[\"推荐\",{\"0\":{\"1597\":1,\"2492\":1},\"1\":{\"115\":1,\"2349\":1,\"2456\":1}}],[\"控制了更新的细节\",{\"1\":{\"3081\":1}}],[\"控制台打印\",{\"1\":{\"2655\":1,\"2975\":1}}],[\"控制台乱码\",{\"0\":{\"2459\":1,\"2627\":1}}],[\"控制台输出\",{\"1\":{\"1873\":1}}],[\"控制台输出的日志级别是大于或等于此级别的日志信息\",{\"1\":{\"262\":1}}],[\"控制台会输出\",{\"1\":{\"1383\":1}}],[\"控制台\",{\"1\":{\"1293\":1}}],[\"控制访问权限\",{\"1\":{\"1087\":1}}],[\"控制列数\",{\"1\":{\"954\":1}}],[\"控制行数\",{\"1\":{\"954\":1}}],[\"控制器获取到数据后再交由视图\",{\"1\":{\"2755\":1}}],[\"控制器调用模型\",{\"1\":{\"2755\":1}}],[\"控制器层\",{\"0\":{\"1291\":1},\"1\":{\"1289\":1}}],[\"控制器\",{\"1\":{\"313\":1,\"2754\":1,\"2755\":1,\"2763\":1}}],[\"控制项目下所有包\",{\"1\":{\"249\":1}}],[\"控制\",{\"1\":{\"111\":1}}],[\"添加好节点\",{\"1\":{\"3225\":1}}],[\"添加开启authorization和keyfile鉴权的配置\",{\"1\":{\"3214\":1}}],[\"添加一个管理员账号\",{\"1\":{\"3210\":1}}],[\"添加账号\",{\"0\":{\"3210\":1}}],[\"添加权限验证\",{\"1\":{\"3203\":1}}],[\"添加仲裁从节点\",{\"0\":{\"3160\":1}}],[\"添加仲裁节点可以用别的方法\",{\"1\":{\"3159\":1}}],[\"添加仲裁者以获得主要选举中的\",{\"1\":{\"3132\":1}}],[\"添加副本从节点\",{\"0\":{\"3159\":1}}],[\"添加节点时\",{\"1\":{\"3161\":1}}],[\"添加节点\",{\"0\":{\"3158\":1}}],[\"添加文档数据\",{\"1\":{\"2986\":1}}],[\"添加多个普通的请求对象\",{\"1\":{\"2985\":1}}],[\"添加映射信息了\",{\"1\":{\"2962\":1}}],[\"添加jar包依赖\",{\"0\":{\"2745\":1}}],[\"添加项目部署的导出方式\",{\"1\":{\"2518\":1}}],[\"添加导出方式\",{\"0\":{\"2516\":1}}],[\"添加tomcat模板\",{\"0\":{\"2505\":1}}],[\"添加配置好的tomcat模板\",{\"0\":{\"2503\":1}}],[\"添加缺失的web\",{\"1\":{\"2495\":1}}],[\"添加了\",{\"1\":{\"2438\":1}}],[\"添加了双向链表结构\",{\"1\":{\"1665\":1}}],[\"添加事务后\",{\"0\":{\"2386\":1}}],[\"添加需要批量处理的sql语句或是参数\",{\"1\":{\"2368\":1}}],[\"添加顺序和遍历顺序并没有关联\",{\"1\":{\"1664\":1}}],[\"添加元素时\",{\"1\":{\"1644\":1}}],[\"添加过程分析\",{\"0\":{\"1643\":1}}],[\"添加成功\",{\"1\":{\"698\":1,\"1643\":2,\"2409\":1}}],[\"添加成功就返回true\",{\"1\":{\"698\":1}}],[\"添加成功^\",{\"1\":{\"371\":1}}],[\"添加另一个集合的元素\",{\"1\":{\"698\":1}}],[\"添加数据\",{\"0\":{\"1674\":1,\"1744\":1},\"1\":{\"697\":1,\"2899\":1}}],[\"添加时间偏移量\",{\"1\":{\"477\":1}}],[\"添加操作\",{\"1\":{\"445\":1}}],[\"添加购物车\",{\"1\":{\"396\":1,\"399\":1}}],[\"添加失败\",{\"1\":{\"371\":1}}],[\"添加非通用操作api\",{\"1\":{\"361\":1}}],[\"添加非通用操作api接口\",{\"1\":{\"361\":1}}],[\"添加具体的拦截器\",{\"1\":{\"350\":1}}],[\"添加redis客户端类型配置\",{\"1\":{\"292\":1}}],[\"添加mybatis\",{\"0\":{\"280\":1}}],[\"添加mybatis依赖\",{\"0\":{\"270\":1}}],[\"添加依赖\",{\"0\":{\"266\":1,\"306\":1,\"389\":1}}],[\"添加\",{\"0\":{\"2325\":1,\"2438\":1},\"1\":{\"111\":1,\"2627\":1,\"2723\":1}}],[\"添加别的服务器的starter就可以替换内嵌的服务器了\",{\"1\":{\"111\":1}}],[\"注\",{\"1\":{\"2626\":1}}],[\"注册业务功能\",{\"1\":{\"2758\":1}}],[\"注册监听器\",{\"0\":{\"2726\":1}}],[\"注册驱动\",{\"1\":{\"2299\":1}}],[\"注册端口\",{\"1\":{\"1938\":1}}],[\"注释类型声明\",{\"1\":{\"1405\":1}}],[\"注释的意义\",{\"0\":{\"805\":1}}],[\"注释\",{\"0\":{\"804\":1}}],[\"注释是中文的\",{\"1\":{\"346\":1}}],[\"注解配置路由\",{\"0\":{\"2569\":1}}],[\"注解定义\",{\"1\":{\"1419\":1}}],[\"注解新特性\",{\"0\":{\"1417\":1}}],[\"注解结构\",{\"0\":{\"1401\":1}}],[\"注解中定义的成员如果含有配置参数\",{\"1\":{\"1400\":1}}],[\"注解类名\",{\"1\":{\"1400\":1}}],[\"注解类的成员\",{\"1\":{\"1397\":1}}],[\"注解使用\",{\"1\":{\"1395\":1,\"1419\":1}}],[\"注解名称\",{\"1\":{\"1392\":1}}],[\"注解并没有继承于任何子类\",{\"1\":{\"1390\":1,\"1408\":1}}],[\"注解是一种趋势\",{\"1\":{\"1388\":1}}],[\"注解的配置参数\",{\"1\":{\"1397\":1}}],[\"注解的分类\",{\"0\":{\"1390\":1}}],[\"注解的使用\",{\"0\":{\"1389\":1}}],[\"注解的使用目的比较简单\",{\"1\":{\"1388\":1}}],[\"注解的用途\",{\"0\":{\"1388\":1}}],[\"注解\",{\"0\":{\"365\":1,\"1384\":1,\"2139\":1},\"1\":{\"263\":1,\"1295\":1,\"1386\":1,\"1388\":1,\"2016\":1}}],[\"注解掉spring\",{\"1\":{\"110\":1}}],[\"注入是利用某些系统没有对用户输入的数据进行充分的检查\",{\"1\":{\"2311\":1}}],[\"注入mapper\",{\"1\":{\"347\":1}}],[\"注入stringredistemplate对象\",{\"1\":{\"289\":1}}],[\"注入redistemplate\",{\"1\":{\"288\":2}}],[\"注入日志对象\",{\"1\":{\"244\":1,\"263\":1}}],[\"注入要测试的对象\",{\"1\":{\"181\":2}}],[\"注入该数据对象\",{\"1\":{\"156\":1}}],[\"注入数据对象\",{\"1\":{\"132\":1}}],[\"注入数据并使用\",{\"0\":{\"132\":1}}],[\"注入方式\",{\"1\":{\"128\":1}}],[\"注意证书路径\",{\"1\":{\"3214\":1}}],[\"注意不能包含空格\",{\"1\":{\"2772\":1}}],[\"注意是\",{\"1\":{\"2697\":1}}],[\"注意是之前\",{\"1\":{\"675\":1}}],[\"注意2\",{\"1\":{\"2562\":1}}],[\"注意1\",{\"1\":{\"2562\":1}}],[\"注意修改环境变量\",{\"1\":{\"2105\":1}}],[\"注意ip和端口\",{\"1\":{\"1978\":1}}],[\"注意点\",{\"0\":{\"1797\":1}}],[\"注意点3\",{\"1\":{\"1757\":1}}],[\"注意点2\",{\"1\":{\"1756\":1}}],[\"注意点1\",{\"1\":{\"1755\":1}}],[\"注意synchronized的位置\",{\"0\":{\"1514\":1}}],[\"注意两个集合的泛型要求\",{\"1\":{\"658\":1}}],[\"注意参数类型要统一\",{\"1\":{\"651\":1}}],[\"注意包装类的数据类型应该与参数数据类型对应\",{\"1\":{\"525\":1}}],[\"注意命名\",{\"1\":{\"361\":1}}],[\"注意区分业务层和数据层\",{\"1\":{\"358\":1}}],[\"注意仅仅是名称\",{\"1\":{\"221\":1}}],[\"注意\",{\"0\":{\"798\":1,\"860\":1,\"1033\":1,\"1414\":1,\"1729\":1,\"2643\":1,\"3074\":1,\"3077\":1},\"1\":{\"79\":1,\"133\":1,\"172\":1,\"184\":1,\"185\":1,\"186\":1,\"212\":1,\"228\":1,\"417\":1,\"419\":1,\"423\":1,\"486\":1,\"527\":1,\"546\":2,\"547\":2,\"564\":1,\"579\":1,\"600\":1,\"611\":1,\"640\":1,\"643\":1,\"647\":1,\"649\":1,\"662\":1,\"667\":1,\"677\":1,\"678\":1,\"689\":1,\"712\":1,\"752\":1,\"761\":1,\"779\":1,\"810\":1,\"828\":1,\"869\":1,\"900\":1,\"927\":1,\"960\":1,\"978\":1,\"1029\":1,\"1030\":1,\"1096\":1,\"1114\":1,\"1144\":1,\"1178\":1,\"1195\":1,\"1395\":1,\"1420\":1,\"1470\":1,\"1517\":1,\"1524\":1,\"1525\":1,\"1527\":1,\"1535\":1,\"1551\":1,\"1592\":1,\"1600\":1,\"1654\":2,\"1664\":1,\"1710\":1,\"1716\":1,\"1797\":1,\"1858\":1,\"1878\":1,\"1879\":1,\"1889\":1,\"2062\":1,\"2233\":1,\"2239\":1,\"2360\":1,\"2455\":1,\"2469\":1,\"2487\":1,\"2495\":1,\"2497\":1,\"2505\":1,\"2510\":1,\"2546\":1,\"2554\":1,\"2620\":1,\"2627\":1,\"2672\":1,\"2689\":1,\"2699\":1,\"2700\":1,\"2823\":1,\"3051\":1,\"3097\":1,\"3109\":1,\"3117\":1,\"3146\":1,\"3147\":1,\"3201\":1,\"3223\":1,\"3226\":1,\"3242\":1,\"3243\":1}}],[\"注意事项\",{\"0\":{\"75\":1,\"97\":1,\"276\":1,\"362\":1,\"737\":1,\"794\":1,\"840\":1,\"847\":1,\"856\":1,\"924\":1,\"980\":1,\"995\":1,\"1049\":1,\"1073\":1,\"1199\":1,\"1207\":1,\"1236\":1,\"1304\":1,\"1346\":1,\"1475\":1,\"1488\":1,\"1754\":1,\"2421\":1,\"2513\":1,\"2519\":1,\"2526\":1,\"2542\":1,\"2611\":1}}],[\"注意版本适配\",{\"1\":{\"71\":1}}],[\"非localhost的\",{\"1\":{\"3207\":1}}],[\"非守护进程\",{\"1\":{\"3043\":1}}],[\"非文本数据操作或安全事务处理的需求相对较少的情况\",{\"1\":{\"2850\":1}}],[\"非文本文件\",{\"1\":{\"1790\":1}}],[\"非java文件的其他文件\",{\"1\":{\"2502\":1}}],[\"非web项目\",{\"0\":{\"2484\":1}}],[\"非必须\",{\"1\":{\"2474\":1}}],[\"非运行时异常\",{\"1\":{\"2141\":1}}],[\"非public属性\",{\"1\":{\"2062\":1}}],[\"非数字字符串转不了\",{\"1\":{\"1339\":1}}],[\"非数字字符串\",{\"1\":{\"1339\":1}}],[\"非静态方法\",{\"0\":{\"2154\":1,\"2157\":1},\"1\":{\"2150\":2}}],[\"非静态方法的返回值类型\",{\"1\":{\"1721\":1}}],[\"非静态方法的参数类型\",{\"1\":{\"1721\":1}}],[\"非静态方法中\",{\"1\":{\"1235\":1}}],[\"非静态的方法\",{\"1\":{\"1280\":1}}],[\"非静态代码块内可以调用静态的属性\",{\"1\":{\"1280\":1}}],[\"非静态代码块\",{\"0\":{\"1280\":1}}],[\"非静态变量\",{\"1\":{\"1227\":1}}],[\"非静态成员内部类\",{\"1\":{\"1203\":1,\"1208\":1}}],[\"非static代码块\",{\"1\":{\"1278\":1}}],[\"非static\",{\"1\":{\"1025\":1,\"1032\":1}}],[\"非static的成员内部类中的成员不能声明为static的\",{\"1\":{\"1207\":1}}],[\"非static的\",{\"1\":{\"1013\":1}}],[\"非springboot项目热部署实现原理\",{\"0\":{\"135\":1}}],[\"非springboot核心功能\",{\"1\":{\"107\":1}}],[\"非精准详细的解析\",{\"1\":{\"978\":1}}],[\"非零代表异常退出\",{\"1\":{\"634\":1}}],[\"非本地时间\",{\"1\":{\"477\":1}}],[\"非index\",{\"1\":{\"455\":1}}],[\"非常简单\",{\"1\":{\"3222\":1}}],[\"非常繁琐\",{\"1\":{\"2310\":1,\"2560\":1,\"2567\":1}}],[\"非常有用\",{\"1\":{\"2187\":1}}],[\"非常的冗余\",{\"1\":{\"1747\":1}}],[\"非常不便\",{\"1\":{\"1574\":1}}],[\"非常麻烦\",{\"1\":{\"133\":1,\"143\":1,\"344\":1}}],[\"非常重要\",{\"1\":{\"66\":1}}],[\"ⅴ\",{\"0\":{\"107\":1,\"259\":1,\"329\":1,\"422\":1,\"619\":1,\"734\":1,\"861\":1,\"906\":1,\"939\":1,\"999\":1,\"1108\":1,\"1417\":1,\"1490\":1,\"1689\":1,\"2057\":1,\"2214\":1,\"2266\":1,\"2348\":1,\"2513\":1,\"2616\":1,\"3158\":1}}],[\"因\",{\"1\":{\"2241\":1}}],[\"因而也称为实例\",{\"1\":{\"1007\":1}}],[\"因为启动时加选项毫无意义\",{\"1\":{\"3180\":1}}],[\"因为它们不存储数据集\",{\"1\":{\"3132\":1}}],[\"因为客户端可以将读取操作发送到不同的服务上\",{\"1\":{\"3126\":1}}],[\"因为mongodb可以在任何方向上遍历索引\",{\"1\":{\"3105\":1}}],[\"因为manifest文件常需放在首位\",{\"1\":{\"2731\":1}}],[\"因为批量插入由于数据较多容易出现失败\",{\"1\":{\"3078\":1}}],[\"因为可以多个字段排序\",{\"1\":{\"2951\":1}}],[\"因为put是幂等性的\",{\"1\":{\"2903\":1}}],[\"因为es不会再返回一个随机的\",{\"1\":{\"2902\":1}}],[\"因为一般也没人用数据库存文本字段\",{\"1\":{\"2849\":1}}],[\"因为保存jsessioid的cookie默认只在会话期是有效的\",{\"1\":{\"2821\":1}}],[\"因为早起xml是用来取代html的\",{\"1\":{\"2772\":1}}],[\"因为war仅服务于web应用\",{\"1\":{\"2749\":1}}],[\"因为while一直在执行\",{\"1\":{\"1520\":1}}],[\"因为while\",{\"1\":{\"1520\":1}}],[\"因为浏览器发送了两次请求\",{\"1\":{\"2664\":1}}],[\"因为请求头的名字都是固定的\",{\"1\":{\"2602\":1}}],[\"因为requestfacade实现了其接口就需要重写接口中的方法\",{\"1\":{\"2589\":1}}],[\"因为有了前一个模板的默认值\",{\"1\":{\"2506\":1}}],[\"因为有端口占用\",{\"1\":{\"2455\":1}}],[\"因为都已经配置好了\",{\"1\":{\"2487\":1}}],[\"因为方法内部做了判断\",{\"1\":{\"2434\":1}}],[\"因为设计到事务操作\",{\"1\":{\"2404\":1}}],[\"因为blob类型的数据无法使用字符串拼接写的\",{\"1\":{\"2360\":1}}],[\"因为驱动不用注册\",{\"1\":{\"2300\":1}}],[\"因为获取的元素是固定的\",{\"1\":{\"2233\":1}}],[\"因为私有元素也加载到内存中了\",{\"1\":{\"2014\":1}}],[\"因为\",{\"1\":{\"1914\":1}}],[\"因为图片属于二进制资源\",{\"1\":{\"1818\":1}}],[\"因为他读写效率比较低\",{\"1\":{\"1791\":1,\"1795\":1}}],[\"因为他的类型是确定的\",{\"1\":{\"1730\":1}}],[\"因为类可以直接调用静态方法\",{\"1\":{\"1721\":1}}],[\"因为这个时候除了元素的类型不确定\",{\"1\":{\"1699\":1}}],[\"因为这类异常很普遍\",{\"1\":{\"1325\":1}}],[\"因为要按照key进行排序\",{\"1\":{\"1686\":1}}],[\"因为要进行查询\",{\"1\":{\"1670\":1}}],[\"因为我们将来开发b\",{\"1\":{\"2561\":1}}],[\"因为我们更关注的其实只有service方法\",{\"1\":{\"2557\":1}}],[\"因为我们自定义的servlet\",{\"1\":{\"2538\":1}}],[\"因为我们想通过对象的值是否相同来判断对象的异同\",{\"1\":{\"1648\":1}}],[\"因为我们调用父类方法时要进行异常处理\",{\"1\":{\"1354\":1}}],[\"因为object类底层默认是通过对象储存的地址来计算hashcode的\",{\"1\":{\"1647\":1}}],[\"因为thread类会通过创建多个thread类的子类来作为线程对象\",{\"1\":{\"1515\":1}}],[\"因为循环条件是成员变量\",{\"1\":{\"1492\":1}}],[\"因为在一个时间单元内\",{\"1\":{\"1441\":1}}],[\"因为ioexception包含了filenotfountexception\",{\"1\":{\"1352\":1}}],[\"因为缺少某个资源\",{\"1\":{\"1315\":1}}],[\"因为抽象类的子类还是要实例化的\",{\"1\":{\"1246\":1}}],[\"因为数据库连接是一种数据库资源\",{\"1\":{\"1243\":1}}],[\"因为数组是引用类型\",{\"1\":{\"982\":1}}],[\"因为只能有一个实例去操作\",{\"1\":{\"1243\":1}}],[\"因为加载类时已经有静态方法了\",{\"1\":{\"1234\":1}}],[\"因为会触发自动装箱\",{\"1\":{\"1195\":1}}],[\"因为static方法是属于类的\",{\"1\":{\"1127\":1}}],[\"因为string经常用到\",{\"1\":{\"876\":1}}],[\"因为stringbuffer是线程安全的\",{\"1\":{\"449\":1}}],[\"因为子类实例中包含父类中的private成员\",{\"1\":{\"1118\":1}}],[\"因为其实现体是由非java语言在外面实现的\",{\"1\":{\"1109\":1}}],[\"因为分配内存的时候\",{\"1\":{\"995\":1}}],[\"因为程序永远不会执行其后的语句\",{\"1\":{\"949\":1}}],[\"因为扩展赋值运算符不会改变变量的类型\",{\"1\":{\"898\":1}}],[\"因为使用了泛型\",{\"1\":{\"645\":1}}],[\"因为是springboot项目\",{\"1\":{\"391\":1}}],[\"因为找不到好的资料\",{\"1\":{\"60\":1,\"61\":1}}],[\"因此拷贝到各自的目录即可\",{\"1\":{\"3213\":1}}],[\"因此登录后就只能看到article库\",{\"1\":{\"3206\":1}}],[\"因此值不能重复\",{\"1\":{\"3109\":1}}],[\"因此查询到了两条数据\",{\"1\":{\"2908\":1,\"2926\":1}}],[\"因此才有了对文档搜索效率更高的倒排索引\",{\"1\":{\"2870\":1}}],[\"因此返回的是数组\",{\"1\":{\"2795\":1}}],[\"因此优先采用的是token技术\",{\"1\":{\"2783\":1}}],[\"因此框架要对xml配置文件中的内容进行一些约束\",{\"1\":{\"2774\":1}}],[\"因此对于java\",{\"1\":{\"2750\":1}}],[\"因此提倡的是一个tomcat实例管理多个java\",{\"1\":{\"2750\":1}}],[\"因此通常需要把这些类以及相关的资源文件打包成一个\",{\"1\":{\"2738\":1}}],[\"因此直接使用\",{\"1\":{\"2693\":1}}],[\"因此获取的mime类型并不是很准确\",{\"1\":{\"2687\":1}}],[\"因此有了httpservlet\",{\"1\":{\"2560\":1,\"2567\":1}}],[\"因此有了通配符\",{\"1\":{\"1741\":1}}],[\"因此也只能销毁一次\",{\"1\":{\"2554\":1}}],[\"因此也不能包含静态成员\",{\"1\":{\"1212\":1}}],[\"因此整个应用只需要一个数据源即可\",{\"1\":{\"2421\":1}}],[\"因此数据库的连接和关闭必须放到数据库的操作方法调用处\",{\"1\":{\"2383\":1}}],[\"因此数组一经分配空间\",{\"1\":{\"975\":1}}],[\"因此应该将数据库连接\",{\"1\":{\"2383\":1}}],[\"因此必须以该类储存账号和密码信息\",{\"1\":{\"2297\":1}}],[\"因此只需要使用文字的一部分\",{\"1\":{\"2941\":1}}],[\"因此只需要配置一下路由\",{\"1\":{\"2572\":1}}],[\"因此只需要按需重写方法即可\",{\"1\":{\"2562\":1}}],[\"因此只需要写方法名即可\",{\"1\":{\"2151\":1}}],[\"因此只能适用于引用数据类型\",{\"1\":{\"1179\":1}}],[\"因此函数式接口就是一个载体\",{\"1\":{\"2133\":1}}],[\"因此它不能是相对的\",{\"1\":{\"1995\":1}}],[\"因此无须建立发送方和接收方的连接\",{\"1\":{\"1981\":1}}],[\"因此统一使用\",{\"1\":{\"1764\":1}}],[\"因此该方法只能被泛型为string的list调用\",{\"1\":{\"1747\":1}}],[\"因此该类的方法都是\",{\"1\":{\"641\":1}}],[\"因此规定了两个泛型\",{\"1\":{\"1710\":1}}],[\"因此此时把元素的类型设计成一个参数\",{\"1\":{\"1699\":1}}],[\"因此要谨慎使用\",{\"1\":{\"2689\":1}}],[\"因此要重写equals方法\",{\"1\":{\"1648\":1}}],[\"因此要注意以下两点\",{\"1\":{\"1515\":1}}],[\"因此具有很好的存取\",{\"1\":{\"1635\":1}}],[\"因此尽量不要扩容\",{\"1\":{\"1620\":1}}],[\"因此调用的是runnable的run方法\",{\"1\":{\"1493\":1}}],[\"因此感觉不出来\",{\"1\":{\"1441\":1}}],[\"因此不能再继承其他类\",{\"1\":{\"1377\":1}}],[\"因此不用进行处理\",{\"1\":{\"1352\":1}}],[\"因此不管加载多少次\",{\"1\":{\"137\":1}}],[\"因此采用异常处理机制\",{\"1\":{\"1316\":1}}],[\"因此在向其他变量赋值的时候\",{\"1\":{\"1308\":1}}],[\"因此在使用时会报异常\",{\"1\":{\"649\":1}}],[\"因此现在p1和p3保存的是相同的内存地址\",{\"1\":{\"1303\":1}}],[\"因此可以使用servletcontext获取指定文件的mime类型\",{\"1\":{\"2685\":1}}],[\"因此可以设计成object类型的\",{\"1\":{\"2332\":1}}],[\"因此可以用getname替代get\",{\"1\":{\"2159\":1}}],[\"因此可以直接使用方法引用\",{\"1\":{\"2156\":1}}],[\"因此可以直接通过类名调用静态方法\",{\"1\":{\"1234\":1}}],[\"因此可以将要计算的代码作为抽象方法来定义和使用\",{\"1\":{\"1251\":1}}],[\"因此可以通过\",{\"1\":{\"1230\":1}}],[\"因此可以被其它的内部类继承\",{\"1\":{\"1206\":1}}],[\"因此一个servlet可以配置多个urlpattern\",{\"1\":{\"2570\":1}}],[\"因此一个类的不同实例拥有的静态变量是同一个\",{\"1\":{\"1229\":1}}],[\"因此一旦赋值成功\",{\"1\":{\"879\":1}}],[\"因此类的属性就分为\",{\"1\":{\"1227\":1}}],[\"因此我们可以让每个容器都单独运行一个tomcat实例\",{\"1\":{\"2750\":1}}],[\"因此我们可以将sql预编译语句和占位符作为形参\",{\"1\":{\"2331\":1}}],[\"因此我们可以将办理的业务作为抽象方法\",{\"1\":{\"1252\":1}}],[\"因此我们需要定义多个函数式接口\",{\"1\":{\"2137\":1}}],[\"因此我们在使用的时候可以指定泛型\",{\"1\":{\"1711\":1}}],[\"因此我们这里就要用到多态性\",{\"1\":{\"1153\":1}}],[\"因此我们就需要多态了\",{\"1\":{\"1152\":1}}],[\"因此使用多态\",{\"1\":{\"1149\":1}}],[\"因此使用时应该尽量采用带有三个参数的重载方法\",{\"1\":{\"534\":1}}],[\"因此子类必须知道父类如何为对象进行初始化\",{\"1\":{\"1136\":1}}],[\"因此想使用父类的元素\",{\"1\":{\"1135\":1}}],[\"因此s2调用add时会调用子类中重写的add方法\",{\"1\":{\"1128\":1}}],[\"因此s1调用时\",{\"1\":{\"1128\":1}}],[\"因此两个对象指向同一份内存地址\",{\"1\":{\"1014\":1}}],[\"因此默认是double类型\",{\"1\":{\"868\":1}}],[\"因此当值的范围在\",{\"1\":{\"1182\":1}}],[\"因此当我们需要long类型的常量数值时\",{\"1\":{\"850\":1}}],[\"因此当操作的数据以对象的形式存在时\",{\"1\":{\"288\":1}}],[\"因此main方法并非是类的必备方法\",{\"1\":{\"803\":1}}],[\"因此map支持两个集合\",{\"1\":{\"708\":1}}],[\"因此java代码就可以在各个平台运行\",{\"1\":{\"765\":1}}],[\"因此许多匹配器可以共享相同的模式\",{\"1\":{\"739\":1}}],[\"因此向collection接口的实现类的对象中添加数据obj时\",{\"1\":{\"662\":1}}],[\"因此collection接口中定义的方法\",{\"1\":{\"655\":1}}],[\"因此重命名也可以做移动文件\",{\"1\":{\"559\":1}}],[\"因此就需要用到接口了\",{\"1\":{\"1257\":1}}],[\"因此就具有了可变性\",{\"1\":{\"445\":1}}],[\"因此就可以内嵌tomcat了\",{\"1\":{\"108\":1}}],[\"因此需要在admin数据库下使用auth方法进行验证\",{\"1\":{\"3201\":1}}],[\"因此需要在测试环境中临时创建一组属性\",{\"1\":{\"184\":1}}],[\"因此需要修复这些host\",{\"1\":{\"3164\":1}}],[\"因此需要先导入依赖\",{\"1\":{\"2982\":1}}],[\"因此需要将java对象转成json字符串\",{\"1\":{\"2982\":1}}],[\"因此需要对xml了解一下\",{\"1\":{\"2766\":1}}],[\"因此需要对配置文件分类\",{\"1\":{\"215\":1}}],[\"因此需要了解\",{\"1\":{\"2249\":1}}],[\"因此base类加载器无需再次执行\",{\"1\":{\"139\":1}}],[\"因此\",{\"1\":{\"105\":1,\"463\":1,\"909\":1,\"1647\":1,\"2559\":1,\"3078\":1}}],[\"扫描仪\",{\"1\":{\"1257\":1}}],[\"扫描引导类所在包\",{\"1\":{\"106\":1}}],[\"扫描的包是引导类所在的包\",{\"1\":{\"105\":1}}],[\"扫描的包\",{\"1\":{\"105\":1}}],[\"扫描bean\",{\"1\":{\"105\":1}}],[\"开头\",{\"1\":{\"3067\":1}}],[\"开头的键是保留的\",{\"1\":{\"3079\":1}}],[\"开头的就是私有址址\",{\"1\":{\"1934\":1}}],[\"开头的注释也会被忽略\",{\"1\":{\"749\":1}}],[\"开头的文件就是隐藏文件\",{\"1\":{\"553\":1}}],[\"开源的\",{\"1\":{\"2841\":1}}],[\"开源的数据库连接池技术\",{\"0\":{\"2420\":1}}],[\"开销小\",{\"1\":{\"1957\":1}}],[\"开始网络数据的发送和接收\",{\"1\":{\"1973\":1}}],[\"开始支持\",{\"1\":{\"1390\":3}}],[\"开始\",{\"1\":{\"1386\":1,\"2321\":1,\"2322\":1,\"2948\":1,\"3007\":1}}],[\"开始读取\",{\"1\":{\"1344\":1}}],[\"开始的\",{\"1\":{\"577\":1}}],[\"开始截取的字符串索引位置\",{\"1\":{\"421\":1}}],[\"开始比较\",{\"1\":{\"414\":1}}],[\"开始静态资源映射\",{\"1\":{\"393\":1}}],[\"开启授权认证\",{\"1\":{\"3203\":1}}],[\"开启认证方式运行\",{\"1\":{\"3214\":1}}],[\"开启认证\",{\"0\":{\"3202\":1}}],[\"开启安全认证\",{\"1\":{\"3179\":1}}],[\"开启高亮查询\",{\"1\":{\"2959\":1}}],[\"开启事务\",{\"1\":{\"2387\":1}}],[\"开启批处理\",{\"0\":{\"2375\":1}}],[\"开启流\",{\"0\":{\"1812\":1},\"1\":{\"1803\":1}}],[\"开启输入流\",{\"1\":{\"1800\":1}}],[\"开启一个子线程\",{\"1\":{\"1477\":1}}],[\"开启子线程必须使用start\",{\"1\":{\"1476\":1}}],[\"开启线程还是需要掉用thread类的start方法\",{\"1\":{\"1492\":1}}],[\"开启线程\",{\"0\":{\"1470\":1},\"1\":{\"1491\":1,\"1562\":1}}],[\"开启dotall模式\",{\"1\":{\"749\":1}}],[\"开启多行模式\",{\"1\":{\"749\":1}}],[\"开启热部署\",{\"0\":{\"301\":1},\"1\":{\"336\":1}}],[\"开启\",{\"1\":{\"248\":1}}],[\"开启对当前bean的属性注入校验\",{\"1\":{\"175\":1,\"176\":1}}],[\"开启ioc容器\",{\"1\":{\"105\":1}}],[\"开发网络应用程序早已被广泛的采用\",{\"1\":{\"1961\":1}}],[\"开发时\",{\"1\":{\"2553\":1}}],[\"开发时的项目结构\",{\"0\":{\"2472\":1}}],[\"开发时不会用\",{\"1\":{\"1628\":1}}],[\"开发时候使用debug\",{\"1\":{\"247\":1}}],[\"开发过程中的语法错误和逻辑错误不是异常\",{\"1\":{\"1310\":1}}],[\"开发工具和部署工具可以通过这些补充信息进行验证或者进行部署\",{\"1\":{\"1387\":1}}],[\"开发工具集\",{\"1\":{\"778\":1}}],[\"开发工具包\",{\"1\":{\"777\":1}}],[\"开发工程师\",{\"1\":{\"22\":1}}],[\"开发者唯一要做的\",{\"1\":{\"3232\":1}}],[\"开发者\",{\"1\":{\"767\":1}}],[\"开发者可以根据自己的需要选择对应的校验框架\",{\"1\":{\"174\":1}}],[\"开发springboot项目的一些通用操作\",{\"1\":{\"296\":1}}],[\"开发人员使用\",{\"1\":{\"223\":1}}],[\"开发人员在开发阶段使用的环境\",{\"1\":{\"23\":1}}],[\"开发中选择它\",{\"1\":{\"2312\":1}}],[\"开发中访问数据库的方式选择\",{\"0\":{\"2312\":1}}],[\"开发中try\",{\"0\":{\"1355\":1}}],[\"开发中代码块的作用\",{\"0\":{\"1281\":1}}],[\"开发中的项目\",{\"0\":{\"2478\":1}}],[\"开发中的做法\",{\"0\":{\"1064\":1}}],[\"开发中的选择\",{\"0\":{\"898\":1,\"1497\":1}}],[\"开发中较少使用\",{\"1\":{\"942\":1}}],[\"开发中\",{\"1\":{\"711\":1,\"905\":1,\"1246\":1,\"1347\":1,\"1497\":1,\"1564\":1,\"2276\":1}}],[\"开发中使用java8以上版本\",{\"1\":{\"769\":1}}],[\"开发中使用的配置文件与项目上线后的配置文件是有一定区别的\",{\"1\":{\"215\":1}}],[\"开发中使用临时属性\",{\"0\":{\"212\":1}}],[\"开发中工具中有一组配置\",{\"1\":{\"148\":1}}],[\"开发部门使用git将项目上传道版本服务器\",{\"1\":{\"204\":1}}],[\"开发阶段\",{\"1\":{\"133\":1}}],[\"开发一个控制器类\",{\"1\":{\"85\":1}}],[\"开发环境搭建\",{\"0\":{\"774\":1}}],[\"开发环境\",{\"1\":{\"23\":1,\"223\":1,\"262\":1,\"310\":1}}],[\"=pagecontext\",{\"1\":{\"2672\":2}}],[\"=1\",{\"1\":{\"2311\":1,\"2390\":1}}],[\"=容量\",{\"1\":{\"1680\":1}}],[\"=⑤\",{\"1\":{\"1026\":1}}],[\"=null\",{\"1\":{\"579\":1}}],[\"=参数\",{\"1\":{\"537\":1}}],[\"==>进一步更精简模式\",{\"1\":{\"2123\":1}}],[\"==>\",{\"1\":{\"1751\":1}}],[\"==和equals\",{\"0\":{\"1181\":1}}],[\"=================\",{\"1\":{\"2405\":3}}],[\"===================\",{\"1\":{\"336\":1}}],[\"======================\",{\"1\":{\"2405\":1}}],[\"=======================\",{\"1\":{\"336\":2,\"451\":1}}],[\"=========================\",{\"1\":{\"336\":1,\"403\":1,\"407\":1,\"2405\":1}}],[\"===========================\",{\"1\":{\"2405\":1}}],[\"==============================\",{\"1\":{\"661\":1,\"2405\":1}}],[\"================================\",{\"1\":{\"476\":1,\"700\":1}}],[\"=================================\",{\"1\":{\"405\":1,\"667\":1,\"714\":1,\"719\":1}}],[\"====================================\",{\"1\":{\"660\":1,\"669\":1,\"683\":1,\"2252\":1}}],[\"======================================\",{\"1\":{\"716\":1,\"722\":1,\"2322\":1}}],[\"=======================================\",{\"1\":{\"697\":1,\"2556\":1}}],[\"========================================\",{\"1\":{\"455\":1,\"469\":1,\"665\":1,\"682\":1}}],[\"============================================\",{\"1\":{\"1657\":1}}],[\"=============================================\",{\"1\":{\"663\":1,\"2602\":1}}],[\"===================================================\",{\"1\":{\"1847\":1,\"1848\":1}}],[\"========================================================\",{\"1\":{\"2652\":1}}],[\"============================================================\",{\"1\":{\"723\":1}}],[\"====================================================================\",{\"1\":{\"1990\":1}}],[\"======================================================================\",{\"1\":{\"636\":1}}],[\"==================================================================\",{\"1\":{\"1944\":1}}],[\"================================================================\",{\"1\":{\"750\":1,\"752\":1}}],[\"=============================================================\",{\"1\":{\"703\":1,\"721\":1}}],[\"===========================================================\",{\"1\":{\"698\":1,\"720\":1,\"1945\":1}}],[\"==========================================================\",{\"1\":{\"408\":1,\"409\":1,\"413\":1,\"414\":1,\"415\":1,\"417\":1,\"418\":1,\"419\":1,\"420\":1,\"421\":1,\"423\":1,\"424\":1,\"425\":1,\"426\":1}}],[\"=========================================================\",{\"1\":{\"336\":10,\"657\":1,\"658\":1,\"662\":1,\"664\":1,\"666\":1,\"684\":1,\"686\":1,\"687\":1,\"689\":1,\"690\":1,\"691\":1,\"699\":1,\"702\":1,\"712\":1}}],[\"=======================================================\",{\"1\":{\"742\":1,\"2553\":1}}],[\"======================================================\",{\"1\":{\"741\":1,\"2319\":1}}],[\"=====================================================\",{\"1\":{\"670\":1,\"753\":1}}],[\"=================================================\",{\"1\":{\"711\":1,\"1946\":1,\"1947\":1,\"1948\":1,\"2123\":1,\"2129\":1}}],[\"================================================\",{\"1\":{\"704\":1,\"2196\":1,\"2197\":1,\"2200\":1,\"2202\":1,\"2203\":1}}],[\"===============================================\",{\"1\":{\"688\":1}}],[\"==============================================\",{\"1\":{\"470\":1}}],[\"===========================================\",{\"1\":{\"748\":1,\"2198\":1}}],[\"==========================================\",{\"1\":{\"479\":1,\"659\":1,\"685\":1,\"713\":1,\"2121\":1,\"2210\":1,\"2211\":1,\"2212\":1,\"2213\":1,\"2215\":1,\"2226\":1,\"2227\":1}}],[\"=========================================\",{\"1\":{\"452\":1,\"456\":1,\"717\":1,\"751\":1}}],[\"=====================================\",{\"1\":{\"477\":1,\"478\":1,\"671\":1,\"676\":1,\"677\":1,\"678\":1,\"2254\":1,\"2256\":1,\"2257\":1,\"2259\":1,\"2260\":1}}],[\"===================================\",{\"1\":{\"411\":1,\"412\":1,\"715\":1,\"877\":1}}],[\"==================================\",{\"1\":{\"404\":1,\"701\":1,\"743\":1,\"2552\":1}}],[\"===============================\",{\"1\":{\"454\":1,\"718\":1}}],[\"============================\",{\"1\":{\"453\":1,\"2555\":1}}],[\"==========================\",{\"1\":{\"336\":1}}],[\"========================\",{\"1\":{\"336\":2,\"2554\":1}}],[\"====================\",{\"1\":{\"336\":3}}],[\"==============\",{\"1\":{\"2405\":3}}],[\"============通用方法二============\",{\"1\":{\"2101\":1}}],[\"============通用方法一===========\",{\"1\":{\"2101\":1}}],[\"=====\",{\"1\":{\"1687\":2}}],[\"===\",{\"1\":{\"1178\":1}}],[\"==的用法\",{\"0\":{\"1178\":1}}],[\"==反码+1\",{\"1\":{\"873\":1}}],[\"==\",{\"0\":{\"895\":1,\"1177\":1},\"1\":{\"491\":1,\"498\":1,\"501\":1,\"537\":1,\"660\":1,\"662\":1,\"663\":2,\"664\":1,\"665\":2,\"666\":2,\"676\":1,\"677\":1,\"678\":1,\"885\":1,\"900\":1,\"909\":1,\"914\":1,\"933\":1,\"936\":1,\"941\":1,\"950\":1,\"956\":2,\"1035\":1,\"1160\":1,\"1178\":7,\"1179\":1,\"1180\":3,\"1181\":1,\"1182\":2,\"1240\":1,\"1241\":1,\"1472\":2,\"1481\":3,\"1521\":4,\"1873\":1,\"2048\":4,\"2376\":1,\"2377\":1}}],[\"=\",{\"0\":{\"1300\":1,\"1301\":1,\"1302\":1,\"1303\":2},\"1\":{\"104\":2,\"131\":1,\"156\":1,\"158\":1,\"160\":2,\"164\":1,\"167\":1,\"168\":2,\"171\":1,\"172\":1,\"175\":1,\"176\":5,\"183\":1,\"213\":2,\"242\":1,\"274\":1,\"288\":4,\"289\":2,\"347\":2,\"350\":1,\"351\":1,\"352\":1,\"354\":1,\"355\":1,\"356\":2,\"357\":4,\"360\":3,\"370\":7,\"371\":4,\"401\":2,\"403\":1,\"404\":6,\"405\":2,\"407\":1,\"408\":1,\"409\":1,\"411\":1,\"412\":2,\"413\":1,\"414\":1,\"415\":1,\"417\":2,\"418\":2,\"419\":1,\"420\":2,\"421\":3,\"423\":2,\"424\":2,\"425\":4,\"426\":6,\"429\":1,\"430\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":2,\"440\":2,\"441\":3,\"444\":4,\"445\":4,\"451\":3,\"452\":2,\"453\":1,\"454\":1,\"455\":1,\"456\":1,\"469\":3,\"470\":3,\"471\":9,\"472\":9,\"473\":9,\"474\":9,\"476\":1,\"477\":2,\"478\":2,\"479\":2,\"483\":3,\"484\":3,\"485\":3,\"486\":5,\"487\":1,\"488\":3,\"489\":3,\"491\":1,\"498\":9,\"501\":2,\"502\":3,\"503\":6,\"508\":3,\"512\":1,\"513\":2,\"514\":2,\"515\":2,\"516\":4,\"517\":3,\"518\":2,\"519\":2,\"520\":2,\"521\":4,\"524\":2,\"525\":2,\"526\":3,\"527\":4,\"528\":2,\"529\":1,\"530\":7,\"531\":3,\"532\":3,\"533\":3,\"534\":3,\"535\":3,\"536\":9,\"537\":3,\"538\":3,\"540\":2,\"541\":2,\"542\":2,\"543\":2,\"544\":2,\"545\":2,\"546\":2,\"547\":2,\"549\":2,\"550\":2,\"551\":2,\"552\":2,\"553\":2,\"555\":2,\"556\":2,\"557\":2,\"559\":2,\"562\":6,\"564\":6,\"565\":7,\"566\":9,\"569\":1,\"571\":2,\"574\":1,\"575\":1,\"576\":2,\"577\":1,\"578\":1,\"579\":2,\"581\":3,\"586\":1,\"587\":2,\"588\":1,\"589\":2,\"590\":1,\"591\":2,\"592\":2,\"593\":2,\"594\":1,\"595\":2,\"596\":2,\"597\":2,\"598\":1,\"600\":2,\"601\":2,\"602\":4,\"604\":2,\"605\":2,\"606\":2,\"607\":1,\"608\":2,\"609\":2,\"610\":2,\"611\":2,\"613\":1,\"614\":1,\"615\":1,\"616\":4,\"617\":3,\"620\":3,\"621\":1,\"622\":1,\"623\":1,\"624\":2,\"625\":1,\"626\":3,\"629\":3,\"633\":1,\"636\":7,\"638\":1,\"639\":2,\"640\":2,\"641\":1,\"642\":1,\"644\":1,\"645\":2,\"646\":3,\"647\":2,\"648\":3,\"649\":2,\"650\":1,\"651\":1,\"657\":2,\"658\":2,\"659\":1,\"661\":1,\"662\":1,\"663\":1,\"664\":1,\"665\":1,\"666\":1,\"669\":1,\"670\":1,\"671\":1,\"676\":2,\"677\":2,\"678\":2,\"682\":1,\"683\":1,\"684\":1,\"685\":1,\"686\":2,\"687\":2,\"688\":2,\"689\":2,\"690\":1,\"691\":2,\"696\":1,\"697\":1,\"698\":3,\"699\":3,\"700\":2,\"701\":2,\"702\":3,\"703\":2,\"704\":2,\"712\":2,\"713\":2,\"715\":2,\"716\":2,\"717\":2,\"718\":1,\"719\":2,\"720\":1,\"721\":2,\"722\":1,\"723\":4,\"739\":4,\"741\":3,\"742\":3,\"743\":3,\"744\":2,\"748\":2,\"750\":5,\"751\":2,\"752\":4,\"753\":4,\"759\":1,\"760\":2,\"761\":2,\"778\":2,\"811\":3,\"822\":2,\"823\":2,\"841\":4,\"848\":2,\"853\":1,\"854\":4,\"859\":2,\"864\":3,\"866\":5,\"867\":4,\"868\":3,\"869\":7,\"873\":6,\"874\":3,\"876\":2,\"877\":4,\"885\":3,\"886\":3,\"887\":2,\"891\":6,\"893\":6,\"895\":4,\"896\":6,\"897\":3,\"900\":1,\"901\":1,\"913\":4,\"914\":3,\"933\":2,\"936\":1,\"937\":1,\"938\":4,\"941\":3,\"950\":2,\"954\":2,\"955\":3,\"956\":9,\"965\":1,\"966\":2,\"970\":3,\"971\":4,\"972\":2,\"974\":1,\"984\":3,\"985\":1,\"986\":1,\"988\":3,\"989\":4,\"990\":4,\"991\":1,\"992\":2,\"997\":1,\"998\":5,\"1007\":2,\"1010\":1,\"1011\":5,\"1014\":3,\"1018\":3,\"1019\":3,\"1022\":2,\"1024\":1,\"1032\":1,\"1034\":3,\"1035\":2,\"1044\":6,\"1045\":5,\"1048\":1,\"1054\":2,\"1056\":4,\"1067\":1,\"1068\":3,\"1082\":2,\"1095\":1,\"1104\":3,\"1105\":1,\"1106\":1,\"1120\":2,\"1128\":2,\"1133\":1,\"1136\":1,\"1147\":2,\"1153\":1,\"1155\":2,\"1156\":1,\"1160\":10,\"1163\":3,\"1165\":2,\"1166\":2,\"1167\":3,\"1168\":2,\"1170\":2,\"1171\":2,\"1172\":3,\"1178\":9,\"1179\":4,\"1180\":4,\"1182\":4,\"1185\":2,\"1192\":8,\"1194\":4,\"1195\":3,\"1197\":6,\"1198\":4,\"1208\":3,\"1209\":1,\"1218\":1,\"1227\":4,\"1230\":1,\"1233\":1,\"1240\":3,\"1241\":2,\"1251\":2,\"1259\":2,\"1264\":4,\"1278\":4,\"1307\":3,\"1308\":3,\"1312\":1,\"1319\":1,\"1327\":3,\"1329\":1,\"1330\":1,\"1331\":2,\"1332\":3,\"1333\":2,\"1334\":2,\"1335\":5,\"1339\":2,\"1343\":1,\"1344\":7,\"1352\":5,\"1361\":2,\"1364\":1,\"1373\":6,\"1374\":1,\"1382\":1,\"1383\":1,\"1388\":1,\"1423\":2,\"1432\":7,\"1472\":4,\"1480\":1,\"1481\":3,\"1489\":3,\"1492\":5,\"1509\":4,\"1512\":6,\"1515\":2,\"1520\":6,\"1521\":3,\"1532\":1,\"1536\":6,\"1547\":2,\"1556\":4,\"1562\":5,\"1569\":2,\"1583\":1,\"1594\":2,\"1600\":1,\"1603\":1,\"1604\":1,\"1606\":4,\"1607\":3,\"1617\":1,\"1618\":1,\"1620\":1,\"1621\":1,\"1624\":1,\"1626\":3,\"1654\":2,\"1657\":4,\"1658\":4,\"1662\":1,\"1673\":1,\"1683\":1,\"1687\":9,\"1688\":3,\"1692\":4,\"1707\":2,\"1709\":4,\"1710\":6,\"1716\":2,\"1719\":4,\"1720\":2,\"1721\":7,\"1723\":1,\"1724\":1,\"1725\":1,\"1726\":1,\"1733\":1,\"1737\":3,\"1738\":5,\"1743\":6,\"1745\":4,\"1747\":5,\"1748\":5,\"1753\":11,\"1757\":1,\"1767\":2,\"1768\":1,\"1800\":3,\"1801\":1,\"1804\":7,\"1805\":8,\"1807\":1,\"1808\":2,\"1812\":3,\"1816\":3,\"1817\":11,\"1821\":6,\"1823\":11,\"1828\":2,\"1829\":1,\"1830\":5,\"1831\":6,\"1834\":7,\"1836\":14,\"1838\":4,\"1847\":2,\"1848\":2,\"1851\":3,\"1853\":4,\"1858\":7,\"1870\":6,\"1873\":6,\"1878\":2,\"1879\":8,\"1888\":5,\"1891\":1,\"1898\":4,\"1900\":2,\"1903\":2,\"1904\":4,\"1907\":1,\"1908\":2,\"1909\":4,\"1910\":1,\"1916\":2,\"1944\":1,\"1945\":2,\"1946\":2,\"1947\":2,\"1948\":2,\"1972\":2,\"1977\":6,\"1983\":5,\"1984\":6,\"1990\":4,\"1993\":2,\"2004\":7,\"2005\":1,\"2007\":4,\"2008\":2,\"2009\":5,\"2010\":6,\"2016\":3,\"2018\":1,\"2019\":2,\"2020\":1,\"2021\":2,\"2032\":4,\"2034\":9,\"2037\":2,\"2038\":4,\"2041\":2,\"2043\":1,\"2045\":4,\"2047\":3,\"2048\":7,\"2050\":3,\"2051\":2,\"2052\":2,\"2053\":4,\"2054\":3,\"2055\":2,\"2056\":2,\"2058\":3,\"2063\":7,\"2067\":3,\"2080\":1,\"2082\":2,\"2094\":1,\"2095\":2,\"2096\":3,\"2097\":3,\"2101\":2,\"2114\":1,\"2120\":1,\"2121\":2,\"2122\":1,\"2123\":3,\"2125\":1,\"2127\":1,\"2129\":4,\"2155\":1,\"2156\":2,\"2157\":1,\"2158\":1,\"2159\":1,\"2161\":1,\"2162\":1,\"2164\":1,\"2165\":1,\"2166\":1,\"2167\":1,\"2168\":1,\"2173\":1,\"2174\":1,\"2176\":1,\"2177\":1,\"2179\":1,\"2180\":1,\"2184\":1,\"2185\":1,\"2196\":1,\"2197\":1,\"2198\":2,\"2200\":2,\"2210\":2,\"2211\":2,\"2212\":2,\"2213\":2,\"2215\":2,\"2221\":14,\"2222\":1,\"2223\":1,\"2226\":1,\"2227\":1,\"2229\":2,\"2230\":2,\"2231\":1,\"2232\":2,\"2233\":2,\"2234\":1,\"2235\":1,\"2236\":1,\"2239\":2,\"2240\":2,\"2241\":1,\"2243\":2,\"2252\":2,\"2253\":1,\"2254\":4,\"2256\":3,\"2257\":2,\"2259\":2,\"2260\":3,\"2297\":4,\"2298\":2,\"2299\":6,\"2300\":4,\"2303\":7,\"2310\":6,\"2311\":5,\"2319\":4,\"2321\":2,\"2322\":2,\"2325\":15,\"2327\":7,\"2328\":2,\"2329\":7,\"2333\":5,\"2334\":5,\"2349\":13,\"2351\":4,\"2352\":14,\"2353\":6,\"2354\":1,\"2355\":15,\"2356\":2,\"2364\":4,\"2365\":16,\"2372\":4,\"2373\":5,\"2376\":5,\"2377\":4,\"2386\":3,\"2387\":8,\"2390\":3,\"2391\":4,\"2405\":38,\"2408\":15,\"2409\":21,\"2424\":4,\"2427\":4,\"2428\":3,\"2438\":4,\"2439\":4,\"2440\":6,\"2441\":5,\"2442\":10,\"2443\":8,\"2556\":1,\"2563\":7,\"2566\":2,\"2574\":1,\"2575\":1,\"2576\":1,\"2577\":1,\"2598\":10,\"2601\":2,\"2602\":1,\"2610\":2,\"2614\":5,\"2624\":5,\"2639\":1,\"2640\":1,\"2642\":1,\"2645\":1,\"2646\":6,\"2647\":2,\"2648\":1,\"2655\":1,\"2668\":1,\"2675\":1,\"2682\":2,\"2686\":3,\"2690\":2,\"2694\":4,\"2702\":2,\"2703\":1,\"2765\":6,\"2793\":1,\"2795\":1,\"2796\":2,\"2798\":1,\"2799\":4,\"2804\":2,\"2805\":1,\"2806\":3,\"2814\":1,\"2822\":1,\"2838\":1,\"2839\":1,\"2948\":1,\"2949\":1,\"2972\":2,\"2975\":5,\"2977\":4,\"2978\":4,\"2980\":7,\"2983\":4,\"2984\":4,\"2986\":7,\"2987\":7,\"2991\":4,\"2992\":6,\"2993\":5,\"2996\":2,\"2997\":7,\"2999\":3,\"3000\":8,\"3002\":2,\"3003\":7,\"3005\":2,\"3006\":7,\"3007\":1,\"3008\":6,\"3010\":6,\"3014\":1,\"3015\":5,\"3016\":1,\"3018\":3,\"3019\":8,\"3100\":1,\"3165\":1}}],[\"x版本以后\",{\"1\":{\"3053\":1}}],[\"x版本和elasticsearch\",{\"1\":{\"2967\":1}}],[\"xcontenttype\",{\"1\":{\"2980\":1,\"2983\":1,\"2986\":3}}],[\"xm\",{\"1\":{\"2907\":1,\"2908\":2,\"2925\":1,\"2926\":2}}],[\"xmlschema\",{\"1\":{\"2781\":1,\"2782\":1}}],[\"xmlns\",{\"1\":{\"2781\":1,\"2782\":2}}],[\"xmlns=\",{\"1\":{\"2781\":1,\"2782\":1}}],[\"xml现在的主要作用是作为配置文件\",{\"1\":{\"2774\":1}}],[\"xml标签名称区分大小写\",{\"1\":{\"2770\":1}}],[\"xml标签都是自定义的\",{\"1\":{\"2768\":1}}],[\"xml第一行必须定义为文档声明\",{\"1\":{\"2770\":1}}],[\"xml文档中必须有且仅有一个根标签\",{\"1\":{\"2770\":1}}],[\"xml文档的后缀名\",{\"1\":{\"2770\":1}}],[\"xml文件和一个classes目录\",{\"1\":{\"2748\":1}}],[\"xml文件中进行servlet的部署\",{\"1\":{\"1389\":1}}],[\"xml文件中会有如下配置\",{\"1\":{\"193\":1}}],[\"xml是存储数据的\",{\"1\":{\"2768\":1}}],[\"xml是这个应用的配置文件\",{\"1\":{\"2748\":1}}],[\"xml与html的区别\",{\"0\":{\"2768\":1}}],[\"xml配置路由\",{\"0\":{\"2579\":1}}],[\"xml的组成部分\",{\"0\":{\"2772\":1}}],[\"xml的用途\",{\"0\":{\"2769\":1}}],[\"xml的语法严格\",{\"1\":{\"2768\":1}}],[\"xml的打包方式\",{\"0\":{\"2494\":1}}],[\"xml的parent\",{\"0\":{\"93\":1}}],[\"xml数据文件中\",{\"1\":{\"2277\":1}}],[\"xml示例\",{\"0\":{\"336\":1}}],[\"xml每次更新需要手动compile方可生效\",{\"1\":{\"238\":1}}],[\"xml对所有项目的依赖进行统一管理\",{\"1\":{\"91\":1}}],[\"xml和本地库\",{\"1\":{\"298\":1}}],[\"xml和创建启动类\",{\"1\":{\"82\":1}}],[\"xml和启动类需要手动进行创建\",{\"1\":{\"82\":1}}],[\"xml中多余的内容\",{\"0\":{\"2490\":1}}],[\"xml中依赖坐标对应的jar包\",{\"1\":{\"2479\":1}}],[\"xml中导入\",{\"1\":{\"266\":1}}],[\"xml中对spring\",{\"1\":{\"110\":1}}],[\"xml中的配置项\",{\"1\":{\"101\":1}}],[\"xml中的spring\",{\"1\":{\"76\":1}}],[\"xml中指定某个依赖的版本\",{\"1\":{\"96\":1}}],[\"xml中\",{\"1\":{\"92\":1}}],[\"xml中进行设置\",{\"1\":{\"78\":1}}],[\"xml\",{\"0\":{\"76\":1,\"179\":1,\"2766\":1,\"2767\":1},\"1\":{\"11\":1,\"109\":1,\"261\":1,\"262\":1,\"2457\":1,\"2468\":1,\"2474\":1,\"2486\":1,\"2495\":1,\"2685\":2,\"2767\":1,\"2770\":1,\"2771\":1,\"2772\":1,\"2779\":1,\"2781\":3,\"2782\":3,\"2825\":1}}],[\"xpack\",{\"1\":{\"2860\":3}}],[\"xsi\",{\"1\":{\"2782\":1}}],[\"xsi=\",{\"1\":{\"2782\":1}}],[\"xsd是文件名\",{\"1\":{\"2782\":1}}],[\"xsd=\",{\"1\":{\"2781\":1}}],[\"xsd\",{\"1\":{\"2781\":17,\"2782\":1}}],[\"xhtml+xml\",{\"1\":{\"2601\":1}}],[\"xiaofei\",{\"1\":{\"2409\":1}}],[\"xyz\",{\"1\":{\"1891\":1}}],[\"x以后也是基于注解的\",{\"1\":{\"1388\":1}}],[\"x<6\",{\"1\":{\"904\":1}}],[\"x64\",{\"1\":{\"779\":1}}],[\"x+0\",{\"1\":{\"516\":1}}],[\"x插件\",{\"1\":{\"312\":1}}],[\"x\",{\"0\":{\"296\":1,\"314\":1,\"337\":1,\"338\":1,\"2970\":1,\"2973\":1,\"3257\":1},\"1\":{\"298\":2,\"299\":1,\"300\":1,\"301\":1,\"312\":2,\"498\":3,\"1180\":6,\"1662\":1,\"1833\":1,\"2322\":1,\"2967\":1,\"3034\":9,\"3040\":1}}],[\"xxobject\",{\"1\":{\"1899\":1}}],[\"xxx代表数据类型\",{\"1\":{\"2343\":1}}],[\"xxxevent等\",{\"1\":{\"1283\":1}}],[\"xxxyyyzzz\",{\"1\":{\"835\":3,\"1089\":1}}],[\"xxxoperator\",{\"0\":{\"734\":1}}],[\"xxxpredicate\",{\"0\":{\"733\":1}}],[\"xxxfucntion\",{\"0\":{\"732\":1}}],[\"xxxsupplier\",{\"0\":{\"731\":1}}],[\"xxxconsumer\",{\"0\":{\"730\":1}}],[\"xxx为基本数据类型\",{\"1\":{\"640\":1,\"761\":1}}],[\"xxx是数据类型\",{\"1\":{\"2321\":1,\"2322\":1}}],[\"xxx是基本数据类型\",{\"1\":{\"528\":1}}],[\"xxx是某种包装类\",{\"1\":{\"527\":1}}],[\"xxx是任意包装类\",{\"1\":{\"525\":1}}],[\"xxxvalue\",{\"0\":{\"524\":1}}],[\"xxx\",{\"0\":{\"423\":1},\"1\":{\"455\":1,\"525\":2,\"527\":1,\"528\":1,\"835\":1,\"901\":1,\"1094\":1,\"1097\":1,\"1197\":4,\"2322\":1,\"2343\":1,\"2362\":1}}],[\"xxx指的是redis的数据类型\",{\"1\":{\"288\":1}}],[\"xxxapplicationtests\",{\"1\":{\"180\":1}}],[\"xxxapplication\",{\"0\":{\"103\":1}}],[\"xx\",{\"1\":{\"228\":1}}],[\"ⅳ\",{\"0\":{\"102\":1,\"186\":1,\"255\":1,\"313\":1,\"327\":1,\"416\":1,\"480\":1,\"530\":1,\"558\":1,\"612\":1,\"733\":1,\"815\":1,\"857\":1,\"902\":1,\"934\":1,\"996\":1,\"1040\":1,\"1099\":1,\"1142\":1,\"1214\":1,\"1238\":1,\"1407\":1,\"1482\":1,\"1529\":1,\"1684\":1,\"1819\":1,\"1859\":1,\"1880\":1,\"2049\":1,\"2181\":1,\"2209\":1,\"2265\":1,\"2335\":1,\"2471\":1,\"2508\":1,\"2612\":1,\"2751\":1,\"2828\":1,\"3151\":1,\"3176\":1,\"3227\":1}}],[\"设备\",{\"1\":{\"1542\":1}}],[\"设计哈希算法时\",{\"1\":{\"1651\":1}}],[\"设计类的成员\",{\"1\":{\"1012\":1}}],[\"设计正则表达式\",{\"1\":{\"741\":1}}],[\"设计多个构造方法\",{\"1\":{\"370\":1}}],[\"设计模式的一种\",{\"1\":{\"1587\":2}}],[\"设计模式>单例模式\",{\"1\":{\"1238\":1}}],[\"设计模式\",{\"0\":{\"42\":1},\"1\":{\"10\":1,\"1388\":1}}],[\"设置角色\",{\"1\":{\"3193\":1}}],[\"设置密码\",{\"1\":{\"3193\":1}}],[\"设置请求体\",{\"1\":{\"3018\":1,\"3019\":1}}],[\"设置高亮字段\",{\"1\":{\"3018\":3,\"3019\":2}}],[\"设置标签后缀\",{\"1\":{\"3018\":2,\"3019\":1}}],[\"设置标签前缀\",{\"1\":{\"3018\":2,\"3019\":1}}],[\"设置排序方式\",{\"1\":{\"3010\":1}}],[\"设置分页数据\",{\"1\":{\"3008\":1}}],[\"设置查询方式\",{\"1\":{\"3018\":1,\"3019\":1}}],[\"设置查询条件\",{\"1\":{\"3002\":1,\"3003\":1}}],[\"设置查询的过滤条件\",{\"1\":{\"2999\":1,\"3000\":1}}],[\"设置查询的条件\",{\"1\":{\"2928\":1}}],[\"设置fetchsource方法的参数\",{\"1\":{\"2999\":1,\"3000\":1}}],[\"设置size为0\",{\"1\":{\"2954\":1}}],[\"设置session自动销毁的时间\",{\"1\":{\"2825\":1}}],[\"设置session的键值\",{\"0\":{\"2816\":1}}],[\"设置sql\",{\"1\":{\"2364\":1,\"2365\":1}}],[\"设置cookie的获取范围\",{\"1\":{\"2808\":1}}],[\"设置k\",{\"1\":{\"2690\":1}}],[\"设置响应状态码\",{\"1\":{\"2661\":1}}],[\"设置响应的数据类型\",{\"0\":{\"2641\":1}}],[\"设置响应数据\",{\"0\":{\"2585\":1}}],[\"设置编码\",{\"1\":{\"2629\":1,\"2648\":1}}],[\"设置pom\",{\"0\":{\"2494\":1}}],[\"设置数据库的隔离级别\",{\"1\":{\"2391\":1}}],[\"设置数据库隔离级别\",{\"0\":{\"2390\":1}}],[\"设置事务的自动提交\",{\"0\":{\"2380\":1}}],[\"设置不允许自动提交数据\",{\"1\":{\"2377\":1}}],[\"设置不参与热部署的文件或文件夹\",{\"1\":{\"150\":1}}],[\"设置指定对象obj上此field的属性内容\",{\"1\":{\"2062\":1}}],[\"设置指定对象的此属性值\",{\"1\":{\"2058\":1}}],[\"设置属性值\",{\"0\":{\"2062\":1}}],[\"设置属性的值\",{\"1\":{\"617\":1}}],[\"设置类变量默认初始值的阶段\",{\"1\":{\"2027\":1}}],[\"设置配置的值\",{\"1\":{\"1691\":1}}],[\"设置线程池属性\",{\"1\":{\"1568\":1}}],[\"设置线程的优先级\",{\"1\":{\"1489\":1}}],[\"设置当前的虚拟目录\",{\"1\":{\"2808\":1}}],[\"设置当前线程的名字\",{\"1\":{\"1479\":1}}],[\"设置当前组中所包含的包\",{\"1\":{\"249\":1}}],[\"设置成员\",{\"1\":{\"1064\":1}}],[\"设置每次读取的长度\",{\"1\":{\"566\":2}}],[\"设置值的精度\",{\"1\":{\"535\":1}}],[\"设置为true\",{\"1\":{\"3081\":1}}],[\"设置为abstract类\",{\"1\":{\"2399\":1}}],[\"设置为当年的第n天\",{\"1\":{\"472\":1}}],[\"设置为配置类\",{\"1\":{\"350\":1}}],[\"设置毫秒\",{\"1\":{\"472\":1}}],[\"设置秒\",{\"1\":{\"472\":1}}],[\"设置mongodb的网络环境\",{\"1\":{\"3179\":1}}],[\"设置month\",{\"1\":{\"472\":1}}],[\"设置mins\",{\"1\":{\"472\":1}}],[\"设置hour\",{\"1\":{\"472\":1}}],[\"设置day\",{\"1\":{\"472\":1}}],[\"设置year\",{\"1\":{\"472\":1}}],[\"设置日期时间信息\",{\"1\":{\"472\":1}}],[\"设置日志输出方式为\",{\"1\":{\"348\":1}}],[\"设置日志文件\",{\"0\":{\"256\":1}}],[\"设置日志组\",{\"1\":{\"249\":1}}],[\"设置静态资源映射\",{\"0\":{\"393\":1}}],[\"设置条件\",{\"1\":{\"355\":1}}],[\"设置位置\",{\"1\":{\"298\":1,\"301\":1}}],[\"设置连接池\",{\"1\":{\"293\":1}}],[\"设置字符集\",{\"1\":{\"262\":1}}],[\"设置监测配置文件是否有修改的时间间隔\",{\"1\":{\"262\":1}}],[\"设置默认启动的环境\",{\"1\":{\"235\":1}}],[\"设置多环境\",{\"1\":{\"235\":1}}],[\"设置三种环境\",{\"1\":{\"224\":1}}],[\"设置的访问端口不一样等等\",{\"1\":{\"223\":1}}],[\"设置具体的规则\",{\"1\":{\"176\":1}}],[\"设置\",{\"0\":{\"145\":1,\"146\":1},\"1\":{\"2890\":9}}],[\"设置最佳版本组合\",{\"1\":{\"101\":1}}],[\"通信的两端都要有socket\",{\"1\":{\"1961\":1}}],[\"通信协议的分层\",{\"0\":{\"1952\":1}}],[\"通信协议和javaweb\",{\"1\":{\"1922\":1}}],[\"通信实体\",{\"1\":{\"1931\":1}}],[\"通信过程\",{\"0\":{\"1928\":1}}],[\"通信双方的地址\",{\"1\":{\"1926\":1}}],[\"通配符只能表示a类\",{\"1\":{\"1751\":1,\"1752\":1}}],[\"通配符大大扩大了方法的兼容性\",{\"1\":{\"1748\":1}}],[\"通配符的使用\",{\"0\":{\"1740\":1}}],[\"通配符\",{\"0\":{\"1735\":1,\"1741\":1},\"1\":{\"1741\":1}}],[\"通电==\",{\"1\":{\"1451\":1}}],[\"通俗的讲就是用多台机器进行同一数据的异\",{\"1\":{\"3125\":1}}],[\"通俗的说\",{\"1\":{\"1053\":1}}],[\"通俗点说就是\",{\"1\":{\"1999\":1}}],[\"通俗点说\",{\"1\":{\"1406\":1}}],[\"通常使用执行计划来查看查询的情况\",{\"1\":{\"3118\":1}}],[\"通常使用\",{\"1\":{\"3109\":1}}],[\"通常在web\",{\"1\":{\"2748\":1}}],[\"通常应用于web项目中\",{\"1\":{\"2747\":1}}],[\"通常是用\",{\"1\":{\"1990\":1}}],[\"通常系统中拥有的不可剥夺资源\",{\"1\":{\"1544\":1}}],[\"通常需要重写thread类中的此方法\",{\"1\":{\"1479\":1}}],[\"通常设置为static的\",{\"1\":{\"1237\":1}}],[\"通常\",{\"1\":{\"1029\":1}}],[\"通常一个文件中只有一个类\",{\"1\":{\"1010\":1}}],[\"通常情况下比单独提交处理更有效率\",{\"1\":{\"2366\":1}}],[\"通常情况下\",{\"1\":{\"924\":1,\"1080\":1,\"1081\":1,\"1132\":1,\"1180\":1,\"1181\":1}}],[\"通常采用此类型\",{\"1\":{\"846\":1}}],[\"通常定义整形变量时\",{\"1\":{\"839\":1}}],[\"通常用于聚合大量的java类文件\",{\"1\":{\"2731\":1}}],[\"通常用于主线程和runnable实现类\",{\"1\":{\"1479\":1}}],[\"通常用几大段话详细描述该方法的功能与相关情况\",{\"1\":{\"812\":1}}],[\"通常用几大段话详细描述该类的功能与相关情况\",{\"1\":{\"811\":1}}],[\"通常用一段话简要的描述该方法的基本内容\",{\"1\":{\"812\":1}}],[\"通常用一段话简要的描述该类的基本内容\",{\"1\":{\"811\":1}}],[\"通常包含多个依赖坐标\",{\"1\":{\"100\":1}}],[\"通用目录\",{\"0\":{\"2474\":1}}],[\"通用的增删改操作\",{\"1\":{\"2400\":1}}],[\"通用的sql数据库存取和操作的公共接口\",{\"1\":{\"2279\":1}}],[\"通用查询操作封装\",{\"0\":{\"2355\":1}}],[\"通用方法二\",{\"1\":{\"2101\":1}}],[\"通用方法一\",{\"1\":{\"2101\":1}}],[\"通用性\",{\"1\":{\"2003\":1}}],[\"通用\",{\"1\":{\"1250\":1}}],[\"通用文档标记\",{\"0\":{\"810\":1}}],[\"通用service接口和通用service实现类\",{\"0\":{\"361\":1}}],[\"通知开发\",{\"1\":{\"369\":1}}],[\"通知运维\",{\"1\":{\"369\":1}}],[\"通过uri连接\",{\"0\":{\"3237\":1}}],[\"通过url对象可以创建当前应用程序和\",{\"1\":{\"1996\":1}}],[\"通过openssl生成证书\",{\"0\":{\"3212\":1}}],[\"通过orm类\",{\"1\":{\"2407\":1,\"2408\":1}}],[\"通过远程登录的\",{\"1\":{\"3207\":1}}],[\"通过认证登录\",{\"0\":{\"3204\":1}}],[\"通过msi包安装mongodb时可以选择自动安装mongodb\",{\"1\":{\"3055\":1}}],[\"通过命令关闭\",{\"1\":{\"3050\":1}}],[\"通过进程编号关闭节点\",{\"1\":{\"3050\":1}}],[\"通过配置文件启动服务\",{\"0\":{\"3044\":1}}],[\"通过配置强制关闭热部署\",{\"0\":{\"152\":1}}],[\"通过参数启动服务\",{\"0\":{\"3043\":1}}],[\"通过地理位置索引实现附近的人\",{\"1\":{\"3027\":1}}],[\"通过host和port连接\",{\"0\":{\"3236\":1}}],[\"通过hightlight关键字\",{\"1\":{\"2959\":1}}],[\"通过httpservlet\",{\"1\":{\"2682\":1}}],[\"通过from和size字段进行分页查询\",{\"1\":{\"2948\":1}}],[\"通过field对象\",{\"1\":{\"616\":1,\"617\":1}}],[\"通过rangequerybuilder对象可以创建范围查询构造器\",{\"1\":{\"3002\":1}}],[\"通过range关键字进行范围查询\",{\"1\":{\"2938\":1}}],[\"通过restful风格访问es服务器的资源\",{\"1\":{\"2861\":1}}],[\"通过response对象获取字节输出流\",{\"1\":{\"2645\":1}}],[\"通过response对象获取字符输出流\",{\"1\":{\"2639\":1}}],[\"通过resultsetmetadata获取结果集中的列数\",{\"1\":{\"2352\":1,\"2405\":2}}],[\"通过request对象获取\",{\"1\":{\"2682\":1}}],[\"通过request\",{\"1\":{\"2629\":1}}],[\"通过boolquerybuilder对象调用组合方法进行组合查询\",{\"1\":{\"2996\":1}}],[\"通过bool关键字进行组合查询\",{\"1\":{\"2935\":1}}],[\"通过bind方法传入被代理对象\",{\"1\":{\"2095\":1}}],[\"通过请求体的查询条件\",{\"1\":{\"2927\":1}}],[\"通过主键\",{\"0\":{\"2923\":1},\"1\":{\"2990\":1}}],[\"通过文档的唯一标识\",{\"1\":{\"2904\":1,\"2922\":1}}],[\"通过向es发送delete请求\",{\"1\":{\"2894\":1}}],[\"通过向es服务器发送get请求\",{\"1\":{\"2887\":1}}],[\"通过向es服务器发送put请求来创建索引\",{\"1\":{\"2882\":1}}],[\"通过这5个文档建立简单的倒排索引\",{\"1\":{\"2879\":1}}],[\"通过这个事件对象我们可以获取到触发事件的httpservletrequest对象\",{\"1\":{\"2716\":1}}],[\"通过这个事件对象我们可以获取到触发事件的httpsession对象\",{\"1\":{\"2715\":1}}],[\"通过这个事件对象我们可以获取到servletcontext对象\",{\"1\":{\"2714\":1}}],[\"通过倒排索引\",{\"1\":{\"2876\":1}}],[\"通过json格式传递数据\",{\"1\":{\"2861\":1}}],[\"通过键删除键值对\",{\"0\":{\"2818\":1}}],[\"通过键获取session的值\",{\"0\":{\"2817\":1}}],[\"通过getsession\",{\"1\":{\"2721\":1}}],[\"通过k移除k\",{\"1\":{\"2690\":1}}],[\"通过k获取v\",{\"1\":{\"2690\":1}}],[\"通过扩展名\",{\"1\":{\"2685\":1}}],[\"通过响应头进行重定向\",{\"1\":{\"2661\":1}}],[\"通过字节输出流写数据\",{\"1\":{\"2645\":1}}],[\"通过字符输出流写数据\",{\"1\":{\"2639\":1}}],[\"通过字面量创建的string\",{\"1\":{\"883\":1}}],[\"通过字面量的方式\",{\"1\":{\"877\":1}}],[\"通过表达的post方式请求该servlet\",{\"1\":{\"2564\":1}}],[\"通过浏览器地址栏请求该servlet\",{\"1\":{\"2564\":1}}],[\"通过控制台观察代码块运行结果可知\",{\"1\":{\"2552\":1,\"2554\":1}}],[\"通过修改\",{\"1\":{\"2546\":1}}],[\"通过在不同数据库服务器上提供多个数据副本\",{\"1\":{\"3126\":1}}],[\"通过在module上右键添加web\",{\"0\":{\"2486\":1}}],[\"通过在start\",{\"1\":{\"1463\":1}}],[\"通过postman向es服务器发送delete请求\",{\"1\":{\"2896\":1}}],[\"通过postman发送get请求\",{\"1\":{\"2889\":1}}],[\"通过postman发送put请求\",{\"1\":{\"2884\":1}}],[\"通过postman工具进行数据访问的测试\",{\"1\":{\"2861\":1}}],[\"通过project\",{\"0\":{\"2485\":1}}],[\"通过p1和p3对对象的属性进行修改\",{\"1\":{\"1303\":1}}],[\"通过打包命令\",{\"1\":{\"2479\":1}}],[\"通过子配置文件\",{\"0\":{\"2469\":1}}],[\"通过别名的方式配置扩展插件\",{\"1\":{\"2426\":1}}],[\"通过泛型传递orm类名\",{\"0\":{\"2403\":1}}],[\"通过填写用户名\",{\"1\":{\"2311\":1}}],[\"通过流所生成元素的\",{\"1\":{\"2211\":1}}],[\"通过limit限制为10个\",{\"1\":{\"2202\":1,\"2203\":1}}],[\"通过显示值创建一个流\",{\"1\":{\"2200\":1}}],[\"通过显式定义同步锁对象来实现同步\",{\"1\":{\"1530\":1}}],[\"通过数组创建stream\",{\"0\":{\"2198\":1}}],[\"通过数组定义类引用\",{\"1\":{\"2029\":1}}],[\"通过集合的parallelstream方法\",{\"1\":{\"2197\":1}}],[\"通过集合的stream方法\",{\"1\":{\"2196\":1}}],[\"通过集合创建stream\",{\"0\":{\"2195\":1}}],[\"通过一个数据源\",{\"1\":{\"2192\":1}}],[\"通过一个案例了解使用springboot开发项目的过程\",{\"1\":{\"338\":1}}],[\"通过方法的名字来指向一个方法\",{\"1\":{\"2148\":1}}],[\"通过方法获取主线程\",{\"1\":{\"1480\":1}}],[\"通过标识符的数据类型就能推断出接口构造器\",{\"1\":{\"2115\":1}}],[\"通过此类为一个或多个接口动态地生成实现类\",{\"1\":{\"2089\":1}}],[\"通过此对象调用start\",{\"1\":{\"1471\":1}}],[\"通过上述的逻辑链条可知\",{\"1\":{\"2086\":1}}],[\"通过运行时类的对象\",{\"0\":{\"2019\":1}}],[\"通过反射获取被代理类的接口和类\",{\"1\":{\"2097\":1}}],[\"通过反射创建存放数据的对象\",{\"1\":{\"2355\":1}}],[\"通过反射创建对象\",{\"1\":{\"2037\":1}}],[\"通过反射创建对应的运行时类的对象\",{\"0\":{\"2037\":1}}],[\"通过反射创建该类的对象\",{\"1\":{\"591\":1}}],[\"通过反射\",{\"1\":{\"2009\":2,\"2010\":1,\"2352\":1,\"2355\":1,\"2405\":2}}],[\"通过输出流将信息写入线程\",{\"1\":{\"1969\":1}}],[\"通过输入流读取服务器放入线路的信息\",{\"1\":{\"1969\":1}}],[\"通过对用户授予一个或多个角色来控制用户访问数据库资源的权限和数据库操作的权限\",{\"1\":{\"3182\":1}}],[\"通过对数据的处理为程序提供更为强大的读写功能\",{\"1\":{\"1775\":1,\"1780\":1}}],[\"通过对象调用属性和方法\",{\"1\":{\"1012\":1}}],[\"通过对象往redis数据库中存储的数据是对象格式的\",{\"1\":{\"288\":1}}],[\"通过实现callable接口\",{\"1\":{\"1559\":1}}],[\"通过实体类获取字段名\",{\"1\":{\"356\":1}}],[\"通过thread类的对象调用start\",{\"1\":{\"1491\":1,\"1492\":1}}],[\"通过thread类的对象调用该方法\",{\"1\":{\"1470\":1}}],[\"通过直接调用run\",{\"1\":{\"1476\":1}}],[\"通过该方法\",{\"1\":{\"2199\":1}}],[\"通过该thread对象的start\",{\"1\":{\"1470\":1}}],[\"通过该对象读取所需配置\",{\"1\":{\"129\":1,\"156\":1}}],[\"通过继承thread类\",{\"1\":{\"1464\":1}}],[\"通过继承的父类的setage方法来设置\",{\"1\":{\"1120\":1}}],[\"通过继承的父类的getage方法获取\",{\"1\":{\"1120\":1}}],[\"通过变量我们可以操作\",{\"1\":{\"1456\":1}}],[\"通过变量赋值的方式\",{\"1\":{\"1303\":1}}],[\"通过包装类的构造器实现\",{\"1\":{\"1192\":1}}],[\"通过分析重载和重写在编译和运行是状态来判断早绑定与晚绑定\",{\"1\":{\"1159\":1}}],[\"通过使用annotation\",{\"1\":{\"1387\":1}}],[\"通过使用\",{\"1\":{\"1132\":1}}],[\"通过封装保护属性\",{\"0\":{\"1056\":1}}],[\"通过类的实例化\",{\"1\":{\"1005\":1}}],[\"通过类的class属性获取\",{\"1\":{\"586\":1,\"2018\":1}}],[\"通过下标取出数组元素\",{\"1\":{\"970\":1}}],[\"通过name选择\",{\"1\":{\"2503\":1}}],[\"通过new+构造器的方式创建的string\",{\"1\":{\"883\":1}}],[\"通过now方法获取的instant对象\",{\"1\":{\"477\":1}}],[\"通过过\",{\"1\":{\"790\":1}}],[\"通过正则字符串不能表示模式修饰符\",{\"1\":{\"738\":1}}],[\"通过compass查看\",{\"1\":{\"3122\":1}}],[\"通过compass只要输入ip+port就可以直接连接上\",{\"1\":{\"3056\":1}}],[\"通过constructor实例化对象\",{\"1\":{\"2038\":1}}],[\"通过collection接口的iterator\",{\"1\":{\"674\":1}}],[\"通过class可以完整地得到一个类中的所有被加载的结构\",{\"1\":{\"2015\":1}}],[\"通过class进行实例化\",{\"1\":{\"619\":1}}],[\"通过class类进行实例化\",{\"1\":{\"612\":1}}],[\"通过\",{\"1\":{\"637\":1,\"758\":1,\"790\":1,\"1075\":1,\"1395\":1,\"1664\":2,\"1988\":1,\"2191\":1,\"2529\":1}}],[\"通过searchsourcebuilder对象构建查询条件时\",{\"1\":{\"2999\":1,\"3007\":1,\"3009\":1}}],[\"通过searchsourcebuilder对象构建查询的请求体\",{\"1\":{\"2993\":1}}],[\"通过searchrequest请求对象进行查询\",{\"1\":{\"2993\":1}}],[\"通过searchrequest对象\",{\"1\":{\"2992\":1}}],[\"通过sort定义排序\",{\"1\":{\"2951\":1}}],[\"通过stream的of\",{\"0\":{\"2200\":1}}],[\"通过string输出char数组\",{\"0\":{\"1807\":1}}],[\"通过string的一个特殊构造器\",{\"1\":{\"425\":1}}],[\"通过system类的setin\",{\"1\":{\"1869\":1}}],[\"通过scanner类来获取用户的输入\",{\"1\":{\"637\":1,\"758\":1}}],[\"通过当前运行时类\",{\"1\":{\"596\":1}}],[\"通过毫秒时间戳获取instant对象\",{\"1\":{\"479\":1}}],[\"通过id获取文档\",{\"1\":{\"2869\":1}}],[\"通过ide导入项目即可\",{\"1\":{\"81\":1}}],[\"通过invocationhandler接口的实现类调用该方法\",{\"1\":{\"2092\":1}}],[\"通过instant类的now静态方法\",{\"1\":{\"476\":1}}],[\"通过定义的值会被插入到logger上下文中\",{\"1\":{\"262\":1}}],[\"通过日志组设置日志等级\",{\"0\":{\"249\":1}}],[\"通过启动类强制关闭热部署\",{\"0\":{\"153\":1}}],[\"通过environment对象的getproperty方法可以读取具体的配置项\",{\"1\":{\"128\":1}}],[\"通过自动装配\",{\"1\":{\"128\":1}}],[\"通过注入的方式读取配置项\",{\"1\":{\"126\":1}}],[\"每页查两个\",{\"1\":{\"3096\":1}}],[\"每页显示3条数据\",{\"1\":{\"2949\":1}}],[\"每页显示的条数\",{\"1\":{\"2948\":1}}],[\"每页显示多少条\",{\"1\":{\"2948\":1,\"3007\":1}}],[\"每页显示多少条数据\",{\"1\":{\"351\":1}}],[\"每条记录称为一个倒排项\",{\"1\":{\"2878\":1}}],[\"每台服务器可以运行多个\",{\"1\":{\"2845\":1}}],[\"每读一行就是一个请求键值对\",{\"1\":{\"2610\":1}}],[\"每刷新一次就打印一次hello\",{\"1\":{\"2534\":1}}],[\"每提交一次\",{\"1\":{\"2377\":1}}],[\"每执行一次executebatch\",{\"1\":{\"2377\":1}}],[\"每循环一次\",{\"1\":{\"2372\":1,\"2374\":1}}],[\"每操作一次\",{\"1\":{\"1899\":1,\"1901\":1}}],[\"每50个数据一行\",{\"1\":{\"1873\":1}}],[\"每当有线程进去\",{\"1\":{\"1522\":1}}],[\"每1个annotation对象\",{\"1\":{\"1402\":1}}],[\"每创建一个对象\",{\"1\":{\"1280\":1}}],[\"每\",{\"1\":{\"1089\":1,\"1404\":2,\"1405\":1,\"1406\":1}}],[\"每一层里功能职责做到单一\",{\"1\":{\"2764\":1}}],[\"每一个驱动都以特定语言的方式实现了这些类型\",{\"1\":{\"3033\":1}}],[\"每一个代理类只能为一个接口服务\",{\"1\":{\"2074\":1}}],[\"每一个一维数组中有2个元素\",{\"1\":{\"985\":1}}],[\"每一行执行语句都以\",{\"1\":{\"798\":1}}],[\"每移动一位\",{\"1\":{\"909\":1}}],[\"每调用一次iterator方法\",{\"1\":{\"674\":1}}],[\"每种格式都返回一个datetimeformatter对象\",{\"1\":{\"483\":1}}],[\"每天日志归档路径以及格式\",{\"1\":{\"262\":1}}],[\"每个角色当中的权限可以显式指定\",{\"1\":{\"3183\":1}}],[\"每个角色做它自己的事\",{\"1\":{\"2756\":1}}],[\"每个节点都要修改\",{\"1\":{\"3214\":1}}],[\"每个节点都可以投票\",{\"1\":{\"3172\":1}}],[\"每个节点目录下都有以下文件\",{\"1\":{\"3140\":1}}],[\"每个字段有哪些约束信息\",{\"1\":{\"2961\":1}}],[\"每个浏览器与服务器建立的会话都是不同的会话\",{\"1\":{\"2786\":1}}],[\"每个tomcat实例独立运行一个web服务\",{\"1\":{\"2750\":1}}],[\"每个try语句块可以伴随一个或多个catch语句\",{\"1\":{\"1337\":1}}],[\"每个servlet类都需要进行判断\",{\"1\":{\"2615\":1}}],[\"每个servlet的实现类都需要进行判断\",{\"1\":{\"2560\":1,\"2567\":1}}],[\"每个用户访问相同资源后\",{\"1\":{\"2447\":1}}],[\"每个实现类中都要定义一次\",{\"1\":{\"2402\":1}}],[\"每个输入始终是一个集合\",{\"1\":{\"2219\":1}}],[\"每个要连接数据库的类\",{\"1\":{\"2075\":1}}],[\"每个类的实例都会记得自己是由哪个\",{\"1\":{\"2015\":1}}],[\"每个类都至少有一个构造器\",{\"1\":{\"1073\":1}}],[\"每个类都要创建日志对象\",{\"1\":{\"243\":1}}],[\"每个数据报的大小限制在64k内\",{\"1\":{\"1957\":1}}],[\"每个数组都有一个属性length指明它的长度\",{\"1\":{\"973\":1}}],[\"每个整数用四个十六进制位表示\",{\"1\":{\"1933\":1}}],[\"每个对象的的同步方法都是独立的\",{\"1\":{\"1519\":1}}],[\"每个对象的成员变量都是独立的\",{\"1\":{\"1515\":1}}],[\"每个对象都独立的拥有一套类中的非静态属性\",{\"1\":{\"1227\":1}}],[\"每个线程对成员变量的修改都会影响到其他线程\",{\"1\":{\"1495\":1}}],[\"每个线程使用的都是同一个\",{\"1\":{\"1495\":1}}],[\"每个线程都会创建一个对象\",{\"1\":{\"1519\":1}}],[\"每个线程都有自己的名字\",{\"1\":{\"1480\":1}}],[\"每个线程都遍历1~100间的偶数\",{\"1\":{\"1472\":1}}],[\"每个线程都是通过某个特定thread对象的run\",{\"1\":{\"1469\":1}}],[\"每个线程拥有独立的运行栈和程序计数器\",{\"1\":{\"1439\":1}}],[\"每个进程需要多个任务协同完成\",{\"1\":{\"1440\":1}}],[\"每个进程均运行在其专用的且受保护的内存\",{\"1\":{\"1436\":1}}],[\"每个进程之间是独立的\",{\"1\":{\"1436\":1}}],[\"每个季节都有自己的名字\",{\"1\":{\"1382\":1}}],[\"每个元素是person类型\",{\"1\":{\"1018\":1}}],[\"每个一维数组都是默认初始化值null\",{\"1\":{\"986\":1}}],[\"每个计算机环境不一样\",{\"1\":{\"223\":1}}],[\"每个不同的starter根据功能不同\",{\"1\":{\"100\":1}}],[\"每次端口不同\",{\"1\":{\"3137\":1}}],[\"每次post请求\",{\"1\":{\"2902\":1}}],[\"每次浏览器向服务器请求时\",{\"1\":{\"2788\":1}}],[\"每次请求都是一个新的request对象\",{\"1\":{\"2674\":1}}],[\"每次请求servlet时\",{\"1\":{\"2549\":1}}],[\"每次访问\",{\"1\":{\"2553\":1}}],[\"每次该servlet的url被访问\",{\"1\":{\"2553\":1}}],[\"每次向数据库建立连接的时候都要将\",{\"1\":{\"2414\":1}}],[\"每次循环只是重新为占位符赋值\",{\"1\":{\"2373\":1}}],[\"每次使用都要写方法体\",{\"1\":{\"2142\":1}}],[\"每次暂停的时候\",{\"1\":{\"1892\":1}}],[\"每次写出len个字符\",{\"1\":{\"1817\":1}}],[\"每次写入的字符都是无空格连在一起的\",{\"1\":{\"576\":1}}],[\"每次只读取一个字节\",{\"1\":{\"1801\":1}}],[\"每次只能有一个线程对lock对象加锁\",{\"1\":{\"1530\":1}}],[\"每次都要强转\",{\"1\":{\"1707\":1}}],[\"每次调用iterator方法\",{\"1\":{\"1599\":1}}],[\"每次执行一次next方法\",{\"1\":{\"675\":1,\"1591\":1}}],[\"每次测试后改回去\",{\"1\":{\"184\":1}}],[\"每次进行热部署都需要开发者手工操作\",{\"1\":{\"143\":1}}],[\"每次手动删太麻烦\",{\"1\":{\"79\":1}}],[\"每行书写一个数据\",{\"1\":{\"124\":1}}],[\"每行结尾使用冒号结束\",{\"1\":{\"122\":1}}],[\"之一\",{\"1\":{\"2707\":1}}],[\"之所以他们是域对象\",{\"1\":{\"2671\":1}}],[\"之上\",{\"1\":{\"1775\":1,\"1780\":1}}],[\"之间存在单向一对一关系\",{\"1\":{\"1661\":1}}],[\"之间的unicode码\",{\"1\":{\"576\":1}}],[\"之间\",{\"1\":{\"565\":1,\"1985\":1}}],[\"之后插入一些通用处理\",{\"1\":{\"2100\":1}}],[\"之后只能声明常量\",{\"1\":{\"927\":1}}],[\"之后\",{\"1\":{\"496\":1,\"2192\":1,\"2806\":1}}],[\"之后无论复习还是使用\",{\"1\":{\"1\":1}}],[\"之前创建文档时\",{\"1\":{\"2908\":1,\"2926\":1}}],[\"之前\",{\"1\":{\"1293\":1,\"2806\":1}}],[\"之前与值的指针断裂\",{\"1\":{\"979\":1}}],[\"之前版本会出现一个小bug\",{\"1\":{\"277\":1}}],[\"之前开发某类项目\",{\"1\":{\"100\":1}}],[\"ⅲ\",{\"0\":{\"98\":1,\"173\":1,\"185\":1,\"219\":1,\"230\":1,\"250\":1,\"309\":1,\"325\":1,\"410\":1,\"475\":1,\"504\":1,\"529\":1,\"554\":1,\"580\":1,\"603\":1,\"679\":1,\"732\":1,\"754\":1,\"809\":1,\"833\":1,\"851\":1,\"899\":1,\"930\":1,\"981\":1,\"1017\":1,\"1036\":1,\"1091\":1,\"1130\":1,\"1200\":1,\"1231\":1,\"1267\":1,\"1287\":1,\"1362\":1,\"1401\":1,\"1447\":1,\"1478\":1,\"1516\":1,\"1630\":1,\"1681\":1,\"1809\":1,\"1832\":1,\"1854\":1,\"1874\":1,\"1986\":1,\"2046\":1,\"2169\":1,\"2204\":1,\"2264\":1,\"2296\":1,\"2324\":1,\"2406\":1,\"2462\":1,\"2496\":1,\"2539\":1,\"2557\":1,\"2579\":1,\"2591\":1,\"2603\":1,\"2644\":1,\"2666\":1,\"2722\":1,\"2746\":1,\"2762\":1,\"2811\":1,\"3035\":1,\"3051\":1,\"3085\":1,\"3098\":1,\"3146\":1,\"3170\":1,\"3207\":1,\"3223\":1}}],[\"v数据\",{\"1\":{\"2690\":1}}],[\"v字母表示\",{\"1\":{\"1714\":1}}],[\"v键值对\",{\"1\":{\"1575\":1}}],[\"votingmemberscount\",{\"1\":{\"3156\":1}}],[\"votes\",{\"1\":{\"3153\":1,\"3173\":1}}],[\"vocation\",{\"1\":{\"1368\":1}}],[\"void\",{\"1\":{\"103\":1,\"104\":1,\"153\":1,\"180\":1,\"181\":1,\"213\":3,\"275\":1,\"284\":2,\"288\":2,\"289\":1,\"347\":5,\"352\":1,\"355\":1,\"356\":1,\"357\":1,\"393\":1,\"571\":1,\"576\":5,\"577\":3,\"578\":1,\"579\":1,\"611\":1,\"617\":1,\"618\":1,\"622\":1,\"634\":1,\"635\":1,\"644\":1,\"660\":1,\"678\":1,\"682\":1,\"683\":1,\"684\":2,\"685\":1,\"689\":1,\"697\":1,\"712\":1,\"714\":1,\"726\":1,\"790\":1,\"936\":1,\"938\":1,\"956\":1,\"1010\":2,\"1011\":1,\"1019\":6,\"1032\":1,\"1034\":3,\"1039\":3,\"1044\":2,\"1045\":1,\"1047\":1,\"1048\":1,\"1054\":1,\"1056\":3,\"1102\":1,\"1105\":1,\"1106\":1,\"1120\":2,\"1125\":1,\"1128\":3,\"1132\":1,\"1133\":1,\"1134\":1,\"1153\":2,\"1160\":3,\"1209\":1,\"1218\":3,\"1219\":4,\"1247\":1,\"1249\":3,\"1251\":2,\"1252\":5,\"1259\":2,\"1264\":9,\"1267\":3,\"1270\":1,\"1312\":1,\"1339\":1,\"1344\":1,\"1352\":3,\"1361\":2,\"1382\":4,\"1400\":1,\"1422\":1,\"1432\":4,\"1472\":2,\"1480\":2,\"1481\":2,\"1489\":2,\"1492\":2,\"1509\":2,\"1511\":1,\"1512\":2,\"1517\":1,\"1520\":3,\"1532\":1,\"1536\":2,\"1547\":3,\"1556\":2,\"1562\":1,\"1566\":2,\"1569\":2,\"1719\":1,\"1720\":1,\"1747\":1,\"1748\":1,\"1755\":1,\"1804\":1,\"1805\":1,\"1816\":1,\"1817\":1,\"1823\":1,\"1836\":1,\"1858\":1,\"1869\":2,\"1876\":1,\"1884\":1,\"1920\":2,\"1966\":3,\"1972\":1,\"1977\":1,\"1985\":3,\"2004\":1,\"2007\":2,\"2008\":1,\"2009\":1,\"2010\":1,\"2016\":3,\"2048\":1,\"2062\":1,\"2069\":1,\"2079\":1,\"2080\":1,\"2081\":1,\"2082\":1,\"2095\":1,\"2101\":2,\"2121\":1,\"2123\":1,\"2140\":1,\"2144\":1,\"2156\":2,\"2207\":1,\"2257\":1,\"2297\":1,\"2299\":1,\"2300\":1,\"2303\":1,\"2322\":1,\"2325\":1,\"2328\":1,\"2329\":1,\"2333\":1,\"2349\":1,\"2364\":1,\"2365\":1,\"2376\":1,\"2377\":1,\"2386\":1,\"2387\":1,\"2391\":1,\"2407\":3,\"2408\":3,\"2409\":7,\"2424\":1,\"2428\":1,\"2434\":6,\"2438\":1,\"2439\":1,\"2440\":1,\"2441\":1,\"2442\":1,\"2443\":1,\"2531\":1,\"2551\":3,\"2552\":2,\"2553\":2,\"2554\":2,\"2556\":1,\"2564\":2,\"2566\":3,\"2589\":1,\"2598\":2,\"2601\":1,\"2602\":1,\"2610\":1,\"2614\":2,\"2624\":2,\"2625\":2,\"2635\":1,\"2636\":1,\"2640\":1,\"2654\":2,\"2655\":2,\"2661\":1,\"2662\":1,\"2682\":1,\"2686\":1,\"2690\":1,\"2694\":1,\"2697\":3,\"2724\":2,\"2725\":2,\"2794\":1,\"2798\":1,\"2799\":1,\"2814\":1,\"2816\":1,\"2818\":1,\"2972\":1,\"2975\":1,\"2977\":1,\"2978\":1,\"2980\":1,\"2983\":1,\"2984\":1,\"2986\":1,\"2987\":1,\"2991\":1,\"2992\":1,\"2993\":1,\"2997\":1,\"3000\":1,\"3003\":1,\"3006\":1,\"3008\":1,\"3010\":1,\"3015\":1,\"3019\":1}}],[\"victor\",{\"1\":{\"2983\":1,\"2991\":1,\"2992\":1,\"2993\":1}}],[\"viktor\",{\"1\":{\"1944\":1}}],[\"view\",{\"0\":{\"1292\":1},\"1\":{\"1292\":2,\"2728\":1,\"2754\":1}}],[\"virtal\",{\"1\":{\"767\":1}}],[\"v>>\",{\"1\":{\"723\":1}}],[\"v>\",{\"1\":{\"691\":9,\"706\":1,\"712\":1,\"1715\":1}}],[\"vender\",{\"1\":{\"3044\":1}}],[\"very\",{\"1\":{\"811\":1}}],[\"version=\",{\"1\":{\"262\":1,\"2771\":1,\"2772\":1,\"2779\":1,\"2781\":1}}],[\"version\",{\"1\":{\"95\":4,\"200\":5,\"336\":4,\"636\":2,\"786\":1,\"787\":1,\"808\":1,\"811\":2,\"2743\":1,\"2772\":1,\"2858\":4,\"2890\":1,\"2901\":1,\"2907\":1,\"2910\":1,\"2915\":1,\"2920\":1,\"2925\":1,\"3153\":1,\"3198\":1}}],[\"version>8\",{\"1\":{\"336\":1}}],[\"version>3\",{\"1\":{\"95\":1,\"336\":2}}],[\"version>17<\",{\"1\":{\"336\":1}}],[\"version>1\",{\"1\":{\"95\":2,\"336\":1}}],[\"version>2\",{\"1\":{\"95\":2}}],[\"version>5\",{\"1\":{\"95\":1}}],[\"version>\",{\"1\":{\"76\":1,\"93\":1,\"94\":1,\"95\":11,\"99\":5,\"266\":1,\"270\":1,\"280\":2,\"321\":1,\"322\":1,\"323\":1,\"324\":1,\"331\":1,\"333\":1,\"335\":2,\"336\":10,\"389\":5,\"2837\":1,\"2971\":2,\"2982\":1,\"3229\":1}}],[\"vector虽然是线程安全的\",{\"1\":{\"1628\":1}}],[\"vector已经被放弃了\",{\"1\":{\"1628\":1}}],[\"vector\",{\"0\":{\"1614\":1,\"1627\":1},\"1\":{\"655\":1,\"1578\":1,\"1611\":1}}],[\"v2\",{\"1\":{\"498\":2}}],[\"v1\",{\"1\":{\"498\":2}}],[\"vue\",{\"1\":{\"398\":1}}],[\"var2\",{\"1\":{\"2551\":1,\"2553\":1}}],[\"var1\",{\"1\":{\"2551\":2,\"2553\":1}}],[\"variable\",{\"1\":{\"1046\":1,\"1405\":1,\"1412\":1,\"1413\":1,\"1427\":1}}],[\"varargs\",{\"1\":{\"1046\":1}}],[\"var\",{\"1\":{\"821\":1,\"822\":2,\"823\":1,\"2314\":1}}],[\"varchar\",{\"1\":{\"342\":3,\"375\":6,\"376\":1,\"377\":4,\"378\":4,\"379\":3,\"380\":2,\"381\":5,\"382\":10,\"383\":3,\"384\":6,\"385\":3,\"2314\":1,\"2371\":1}}],[\"van\",{\"1\":{\"430\":2,\"434\":1,\"744\":1,\"2121\":1}}],[\"val\",{\"1\":{\"288\":1,\"537\":1,\"650\":1,\"722\":3}}],[\"validationquery\",{\"1\":{\"2426\":1}}],[\"validation<\",{\"1\":{\"174\":1}}],[\"validated开启校验功能\",{\"1\":{\"175\":1}}],[\"validated\",{\"0\":{\"175\":1},\"1\":{\"175\":1,\"176\":1}}],[\"validator<\",{\"1\":{\"174\":2}}],[\"valid\",{\"1\":{\"168\":1}}],[\"valueunbound\",{\"1\":{\"2720\":1}}],[\"valuebound\",{\"1\":{\"2720\":1}}],[\"value和urlpatterns是等效的\",{\"1\":{\"2570\":1}}],[\"value就是对应的值\",{\"1\":{\"2436\":1}}],[\"value2\",{\"1\":{\"1674\":1}}],[\"value1和原来的数据以链表的方式存储\",{\"1\":{\"1675\":1}}],[\"value1添加成功\",{\"1\":{\"1674\":3}}],[\"value1\",{\"1\":{\"1674\":1}}],[\"value的储存特点\",{\"0\":{\"1670\":1}}],[\"value的值时变量定义的值\",{\"1\":{\"262\":1}}],[\"value构成一个entry\",{\"1\":{\"1664\":1}}],[\"value所在的类要重写equals\",{\"1\":{\"1670\":1}}],[\"value所在的类要重写\",{\"1\":{\"1664\":1}}],[\"value属性可以省略不写\",{\"1\":{\"1399\":1}}],[\"value用于存储字符串数据\",{\"1\":{\"878\":1}}],[\"values\",{\"0\":{\"722\":1},\"1\":{\"722\":2,\"1379\":1,\"1432\":2,\"2200\":1,\"2319\":1,\"2321\":1,\"2325\":1,\"2364\":1,\"2372\":1,\"2373\":1,\"2376\":1,\"2377\":1,\"2408\":1,\"2438\":1,\"2624\":2}}],[\"value对的数据\",{\"1\":{\"1662\":1}}],[\"value对的个数\",{\"1\":{\"718\":1}}],[\"value对\",{\"1\":{\"713\":1,\"1578\":1}}],[\"value对存放到当前map中\",{\"1\":{\"712\":1}}],[\"value添加到\",{\"1\":{\"711\":1}}],[\"value也是由set组成的\",{\"1\":{\"710\":1}}],[\"value进行遍历\",{\"1\":{\"710\":1}}],[\"valueof的效果是相反的\",{\"1\":{\"527\":1}}],[\"valueof效果一样\",{\"1\":{\"526\":1}}],[\"valueof根据参数数据类型的不同\",{\"1\":{\"424\":1}}],[\"valueof\",{\"0\":{\"424\":1,\"527\":1},\"1\":{\"424\":4,\"526\":1,\"527\":3,\"530\":1,\"1197\":2,\"1379\":1}}],[\"valueoperations<string\",{\"1\":{\"289\":1}}],[\"valueopeartions\",{\"1\":{\"288\":1}}],[\"value=hello\",{\"1\":{\"2048\":1}}],[\"value=\",{\"1\":{\"262\":2,\"1400\":2,\"1418\":2,\"1419\":2,\"1429\":1,\"1432\":4,\"2623\":2,\"2702\":2,\"2703\":1,\"2781\":5}}],[\"value\",{\"0\":{\"1428\":1},\"1\":{\"127\":8,\"166\":1,\"176\":2,\"411\":1,\"444\":2,\"445\":3,\"498\":6,\"617\":1,\"710\":2,\"711\":1,\"717\":1,\"812\":1,\"1393\":1,\"1410\":1,\"1412\":1,\"1419\":1,\"1427\":1,\"1432\":2,\"1661\":4,\"1664\":2,\"1666\":3,\"1668\":2,\"1670\":2,\"1682\":1,\"1685\":3,\"1686\":1,\"1691\":1,\"1710\":1,\"2062\":1,\"2572\":1,\"2598\":1,\"2599\":1,\"2624\":2,\"2636\":1,\"2678\":1,\"2690\":1,\"2793\":2,\"2796\":2,\"2799\":1,\"2801\":1,\"2806\":4,\"2816\":1,\"2908\":1,\"2926\":1,\"2930\":1,\"2957\":1,\"3015\":2,\"3032\":1,\"3100\":10}}],[\"value读取单个数据\",{\"1\":{\"127\":1}}],[\"value读配置项即可\",{\"1\":{\"126\":1}}],[\"v\",{\"1\":{\"115\":1,\"425\":1,\"524\":2,\"711\":2,\"713\":1,\"715\":1,\"723\":1,\"979\":1,\"1710\":1,\"2690\":1,\"2754\":1,\"2763\":1,\"2892\":1,\"2986\":1,\"2992\":1,\"2993\":1,\"3000\":1,\"3006\":1,\"3008\":1,\"3011\":1,\"3109\":1,\"3112\":2,\"3113\":3}}],[\"v格式\",{\"1\":{\"115\":1}}],[\"v由springboot提供\",{\"1\":{\"97\":1}}],[\"只连接一个节点\",{\"0\":{\"3226\":1}}],[\"只用来作为用户权限的管理\",{\"1\":{\"3196\":1}}],[\"只具有投票选举作用\",{\"1\":{\"3131\":1}}],[\"只存储根词\",{\"1\":{\"3107\":1}}],[\"只显示指定的字段\",{\"1\":{\"3093\":1}}],[\"只让能够识别数字签名的用户使用里面的东西\",{\"1\":{\"2738\":1}}],[\"只拦截具体的某个路径的访问\",{\"1\":{\"2701\":1}}],[\"只将service\",{\"1\":{\"2559\":1}}],[\"只执行一次\",{\"1\":{\"2547\":1,\"2552\":1}}],[\"只会影响第一个访问的人而已\",{\"1\":{\"2546\":1}}],[\"只支持insert语句\",{\"1\":{\"2435\":2}}],[\"只支持数值类型\",{\"1\":{\"907\":1}}],[\"只考虑使用配置文件获取druid连接池的方法\",{\"1\":{\"2424\":1}}],[\"只关闭了两个资源\",{\"1\":{\"2350\":1}}],[\"只加载驱动即可\",{\"1\":{\"2300\":1}}],[\"只进行驱动的加载即可\",{\"1\":{\"2300\":1}}],[\"只获取前n个数据\",{\"1\":{\"2212\":1}}],[\"只包含一个抽象方法的接口\",{\"1\":{\"2132\":1}}],[\"只保留方法体\",{\"1\":{\"2115\":1}}],[\"只返回泛型\",{\"1\":{\"2053\":1}}],[\"只读\",{\"1\":{\"1887\":1}}],[\"只需手动解决post乱码问题即可\",{\"1\":{\"2626\":1}}],[\"只需从\",{\"1\":{\"2416\":1}}],[\"只需new\",{\"1\":{\"1494\":1}}],[\"只需要在主节点上添加用户\",{\"1\":{\"3210\":1}}],[\"只需要去掉用doget方法即可\",{\"1\":{\"2614\":1}}],[\"只需要继承myhttpservlet\",{\"1\":{\"2566\":1}}],[\"只需要继承basemapper并传入实体类\",{\"1\":{\"282\":1}}],[\"只需要预编译的时候校验一次sql语句\",{\"1\":{\"2313\":1}}],[\"只需要使用定义好的class的方法\",{\"1\":{\"2039\":1}}],[\"只需要注意前两种\",{\"1\":{\"1886\":1}}],[\"只需要运行java程序可以下载这个\",{\"1\":{\"776\":1}}],[\"只需要对controller层做异常处理即可\",{\"1\":{\"369\":1}}],[\"只需要配置数据库连接信息即可\",{\"1\":{\"271\":1}}],[\"只需要添加一个坐标此提醒就消失了\",{\"1\":{\"165\":1}}],[\"只需要重新加载正则开发的文件就可以了\",{\"1\":{\"136\":1}}],[\"只使用单个线程先后完成多个任务\",{\"1\":{\"1444\":1}}],[\"只捕获一次\",{\"1\":{\"1340\":1}}],[\"只可能存储两类值\",{\"1\":{\"1304\":1}}],[\"只掌握一套连接数据库的方法\",{\"1\":{\"1265\":1}}],[\"只比较值\",{\"1\":{\"1178\":1}}],[\"只适用于方法\",{\"1\":{\"1151\":1}}],[\"只对集合内元素类型统一有要求\",{\"1\":{\"1749\":1}}],[\"只对外公开简单的接口\",{\"1\":{\"1053\":1}}],[\"只对本身非质数的自然数是有效的\",{\"1\":{\"956\":1}}],[\"只要设置\",{\"1\":{\"2963\":1}}],[\"只要是\",{\"1\":{\"2575\":1}}],[\"只要端口号不同就可以\",{\"1\":{\"2504\":1}}],[\"只要language\",{\"1\":{\"2108\":1}}],[\"只要它符合uri的语法规则\",{\"1\":{\"1995\":1}}],[\"只要它们的参数个数或者参数类型不同即可\",{\"1\":{\"1037\":1}}],[\"只要关闭最外层流即可\",{\"1\":{\"1826\":1}}],[\"只要该位置没有其他数据\",{\"1\":{\"1642\":1}}],[\"只要x和y内容一直不变\",{\"1\":{\"1180\":1}}],[\"只要继承那个类即可\",{\"1\":{\"1111\":1}}],[\"只要用package设置了包名\",{\"1\":{\"1087\":1}}],[\"只要这个表达式的结果是一个值\",{\"1\":{\"1029\":1}}],[\"只要有两个\",{\"1\":{\"938\":1}}],[\"只在局部作用域有效的变量\",{\"1\":{\"1023\":1}}],[\"只规定外层长度\",{\"1\":{\"986\":1}}],[\"只为数组本身指定长度\",{\"1\":{\"986\":1}}],[\"只相当于外层循环循环体执行了一次\",{\"1\":{\"952\":1}}],[\"只声明\",{\"0\":{\"821\":1}}],[\"只写类名\",{\"1\":{\"810\":1}}],[\"只输出数据\",{\"1\":{\"799\":1}}],[\"只有证书相同的实例彼此才可以访问\",{\"1\":{\"3209\":1}}],[\"只有在特定环境下才能使用\",{\"1\":{\"3079\":1}}],[\"只有在外部类或static的成员内部类中才可声明static成员\",{\"1\":{\"1207\":1}}],[\"只有某些标签才是有意义的\",{\"1\":{\"2774\":1}}],[\"只有某平台提供了对应的java虚拟机\",{\"1\":{\"767\":1}}],[\"只有servlet内部转发的请求\",{\"1\":{\"2702\":1}}],[\"只有浏览器直接请求的资源\",{\"1\":{\"2702\":1}}],[\"只有访问index\",{\"1\":{\"2701\":1}}],[\"只有服务器正常关闭时\",{\"1\":{\"2554\":1}}],[\"只有普通的build打包\",{\"1\":{\"2514\":1}}],[\"只有一句方法体\",{\"1\":{\"2116\":2}}],[\"只有一个属性可以省略urlpatterns\",{\"1\":{\"2571\":1}}],[\"只有一个项目\",{\"1\":{\"2501\":1}}],[\"只有一个参数\",{\"1\":{\"2168\":1}}],[\"只有一个参数可以省略\",{\"1\":{\"2116\":1}}],[\"只有一个方法的接口\",{\"1\":{\"2113\":1}}],[\"只有一个成员\",{\"1\":{\"1399\":1}}],[\"只有一个level属性\",{\"1\":{\"262\":1}}],[\"只有函数式接口可以这么用\",{\"1\":{\"2113\":1}}],[\"只有真正声明这个域的类才会被初始化\",{\"1\":{\"2029\":1}}],[\"只有遇到换行符\",{\"1\":{\"1834\":1}}],[\"只有释放了\",{\"1\":{\"1549\":1}}],[\"只有通过new关键字才会产生出对象\",{\"1\":{\"1223\":1}}],[\"只有等到方法调用的那一刻\",{\"1\":{\"1159\":1}}],[\"只有循环条件和循环体也能编译\",{\"1\":{\"938\":1}}],[\"只有\",{\"1\":{\"749\":1}}],[\"只有第一个数字没替换了\",{\"1\":{\"742\":1}}],[\"只有与正则匹配的内容才可以\",{\"1\":{\"639\":1,\"760\":1}}],[\"只能以direct的形式连接副本集的主节点\",{\"1\":{\"3224\":1}}],[\"只能操作article库\",{\"1\":{\"3206\":1}}],[\"只能操作普通文本文件\",{\"1\":{\"1797\":1}}],[\"只能删除非\",{\"1\":{\"3117\":1}}],[\"只能删除空的目录\",{\"1\":{\"562\":1}}],[\"只能查看有权限的数据库\",{\"1\":{\"3060\":1}}],[\"只能进行完全匹配\",{\"1\":{\"2966\":1}}],[\"只能进行比较\",{\"1\":{\"491\":1}}],[\"只能同put请求创建索引\",{\"1\":{\"2886\":1}}],[\"只能同时复制4个文件\",{\"1\":{\"1444\":1}}],[\"只能约束格式\",{\"1\":{\"2775\":1}}],[\"只能做初步的筛选和使用\",{\"1\":{\"2687\":1}}],[\"只能转发到当前服务器的内部资源\",{\"1\":{\"2656\":1}}],[\"只能启动一个tomcat\",{\"1\":{\"2455\":1}}],[\"只能继承和实现\",{\"1\":{\"2399\":1}}],[\"只能添加null\",{\"1\":{\"1744\":1}}],[\"只能有一个线程参与\",{\"1\":{\"1528\":1}}],[\"只能有一个带public的\",{\"1\":{\"1010\":1}}],[\"只能让一个线程都执行完\",{\"1\":{\"1508\":1,\"1525\":1}}],[\"只能用来标注\",{\"1\":{\"1413\":6}}],[\"只能用来修饰方法\",{\"1\":{\"1405\":1}}],[\"只能用于\",{\"1\":{\"947\":1,\"949\":1}}],[\"只能用于switch\",{\"1\":{\"944\":1}}],[\"只能手写大量胶水代码\",{\"1\":{\"1283\":1}}],[\"只能通过接口直接调用静态方法\",{\"1\":{\"1268\":1}}],[\"只能通过pattern\",{\"1\":{\"750\":1,\"756\":1}}],[\"只能创建匿名类的一个实例\",{\"1\":{\"1214\":1}}],[\"只能在声明它的方法或代码块中使用\",{\"1\":{\"1211\":1,\"1212\":1}}],[\"只能调用父类中声明的属性和方法\",{\"1\":{\"1162\":1}}],[\"只能调用父类中声明的方法\",{\"1\":{\"1149\":1}}],[\"只能规范\",{\"1\":{\"1161\":1}}],[\"只能二选一\",{\"1\":{\"1139\":1}}],[\"只能使用$set修改器进行更新\",{\"1\":{\"3082\":1}}],[\"只能使用\",{\"1\":{\"1062\":1}}],[\"只能使用append方法\",{\"1\":{\"452\":1}}],[\"只能\",{\"1\":{\"1029\":1}}],[\"只能是如下的6种数据类型之一\",{\"1\":{\"927\":1}}],[\"只能表示英文的编码集\",{\"1\":{\"855\":1}}],[\"只能最多有一个类声明为public的\",{\"1\":{\"796\":1}}],[\"只能获取public修饰的方法\",{\"1\":{\"610\":1,\"2065\":1}}],[\"只能获取文件\",{\"1\":{\"544\":1}}],[\"只能存在一个\",{\"1\":{\"323\":1}}],[\"只配置最底级别\",{\"1\":{\"262\":1}}],[\"只不过\",{\"1\":{\"161\":1}}],[\"只是测试下创建的账号\",{\"1\":{\"3201\":1}}],[\"只是无法获取响应数据了\",{\"1\":{\"2988\":1}}],[\"只是请求方式变成了get\",{\"1\":{\"2965\":1}}],[\"只是request变成了response\",{\"1\":{\"2593\":1}}],[\"只是一个接口\",{\"1\":{\"2420\":1}}],[\"只是一个壳\",{\"1\":{\"350\":1}}],[\"只是dql执行查询的方法是executequery\",{\"1\":{\"2336\":1}}],[\"只是未必是第一个\",{\"1\":{\"2233\":1}}],[\"只是servlet直接封装了一套api\",{\"1\":{\"2800\":1}}],[\"只是sql语句变成了updata\",{\"1\":{\"2364\":1}}],[\"只是sql里的操作是操作数据库的\",{\"1\":{\"2187\":1}}],[\"只是springboot进行了整合简化\",{\"1\":{\"183\":1}}],[\"只是用来标识类可以进行实例化\",{\"1\":{\"1905\":1}}],[\"只是简单的读\",{\"1\":{\"1889\":1}}],[\"只是参数类型变成了byte\",{\"1\":{\"1822\":2}}],[\"只是所有的线程都处于阻塞状态\",{\"1\":{\"1540\":1}}],[\"只是不需要我们显式的声明\",{\"1\":{\"1517\":1}}],[\"只是没分配到cpu资源\",{\"1\":{\"1501\":1}}],[\"只是普通的在main线程中调用一个方法\",{\"1\":{\"1476\":1}}],[\"只是在main线程调用了一个普通的run方法\",{\"1\":{\"1472\":1}}],[\"只是对数组的结构进行一些解释\",{\"1\":{\"978\":1}}],[\"只是将int类型的结果2\",{\"1\":{\"891\":1}}],[\"只是关键字是string\",{\"1\":{\"876\":1}}],[\"只是char\",{\"1\":{\"568\":1}}],[\"只是此时\",{\"1\":{\"561\":1}}],[\"只是名字\",{\"1\":{\"546\":1}}],[\"只是格式不同\",{\"1\":{\"157\":1}}],[\"只是包含了常用依赖的坐标\",{\"1\":{\"97\":1}}],[\"只允许使用空格\",{\"1\":{\"122\":1}}],[\"只指定了springboot的版本\",{\"1\":{\"96\":1}}],[\"版本的选择\",{\"1\":{\"3040\":1}}],[\"版本的javaapi\",{\"1\":{\"2967\":1}}],[\"版本说明\",{\"0\":{\"2103\":1}}],[\"版本\",{\"1\":{\"811\":1,\"2772\":1,\"2855\":1,\"2901\":1,\"2910\":1,\"2915\":1}}],[\"版本选择\",{\"1\":{\"779\":1,\"2452\":1}}],[\"版本可以直接复制\",{\"1\":{\"314\":1}}],[\"版本由\",{\"1\":{\"111\":1}}],[\"版本组合是最佳的\",{\"1\":{\"96\":1}}],[\"版本采用父类中的版本\",{\"1\":{\"91\":1}}],[\"同数据中心维护数据副本可以增加分布式应用程序的数据位置和可用性\",{\"1\":{\"3126\":1}}],[\"同类型推断能推断出参数类型\",{\"1\":{\"2115\":1}}],[\"同属性的返回值类型\",{\"1\":{\"2048\":1}}],[\"同属性的权限修饰符\",{\"1\":{\"2048\":1}}],[\"同步文件内容和元数据\",{\"1\":{\"1886\":1}}],[\"同步文件内容的更新\",{\"1\":{\"1886\":1}}],[\"同步资源并等待\",{\"1\":{\"1551\":1}}],[\"同步锁使用lock对象充当\",{\"1\":{\"1530\":1}}],[\"同步方式的优缺点\",{\"0\":{\"1528\":1}}],[\"同步方法中执行了线程对象的wait\",{\"1\":{\"1526\":1}}],[\"同步方法中出现了未处理的error或exception\",{\"1\":{\"1526\":1}}],[\"同步方法中遇到break\",{\"1\":{\"1526\":1}}],[\"同步方法仍然涉及到同步监视器\",{\"1\":{\"1517\":1}}],[\"同步方法说明\",{\"0\":{\"1517\":1}}],[\"同步方法\",{\"0\":{\"1516\":1}}],[\"同步的范围\",{\"0\":{\"1525\":1}}],[\"同步机制中的锁\",{\"0\":{\"1524\":1}}],[\"同步机制有多种方式\",{\"1\":{\"1508\":1}}],[\"同步原理和总结\",{\"0\":{\"1523\":1}}],[\"同步监视器表示是各自的对象\",{\"1\":{\"1519\":1}}],[\"同步监视器\",{\"0\":{\"1518\":1,\"1519\":1},\"1\":{\"1511\":2,\"1527\":1}}],[\"同步代码块执行结束\",{\"1\":{\"1526\":1}}],[\"同步代码块说明\",{\"0\":{\"1511\":1}}],[\"同步代码块可以解决线程安全问题\",{\"1\":{\"1510\":1}}],[\"同步代码块\",{\"0\":{\"1510\":1},\"1\":{\"1524\":1}}],[\"同优先级线程组成先进先出队列\",{\"1\":{\"1486\":1}}],[\"同包类\",{\"1\":{\"1094\":1}}],[\"同种类型\",{\"0\":{\"913\":1}}],[\"同理\",{\"1\":{\"710\":1,\"1519\":1}}],[\"同class对象进行获取constructor对象\",{\"1\":{\"628\":1}}],[\"同field\",{\"1\":{\"627\":1,\"630\":1}}],[\"同一tomcat服务器中\",{\"0\":{\"2808\":1}}],[\"同一台机器上的多个web服务可以通过docker等容器进行隔离\",{\"1\":{\"2750\":1}}],[\"同一进程内的线程共享本进程的资源如内存\",{\"1\":{\"1440\":1}}],[\"同一功能多次开启也算加了一个进程\",{\"1\":{\"1440\":1}}],[\"同一个线程对象重复调用start方法会抛出异常\",{\"1\":{\"1477\":1}}],[\"同一个thread类的对象不能重复调用start\",{\"0\":{\"1477\":1}}],[\"同一个注解\",{\"1\":{\"1419\":1}}],[\"同一个注解可以重复用多次\",{\"1\":{\"1418\":1}}],[\"同一个类\",{\"1\":{\"1037\":1}}],[\"同一个作用域内\",{\"1\":{\"825\":1}}],[\"同一个对象肯定相等\",{\"1\":{\"501\":1}}],[\"同一目录下的目录和文件不能同名\",{\"1\":{\"554\":1,\"1770\":1}}],[\"同样\",{\"1\":{\"2457\":1}}],[\"同样实现接口\",{\"1\":{\"2073\":1}}],[\"同样会发生覆盖\",{\"1\":{\"712\":1}}],[\"同样有三个静态方法来进行实例化\",{\"1\":{\"486\":1}}],[\"同样进入该文件\",{\"1\":{\"95\":1}}],[\"同上创建对应的目录和文件\",{\"1\":{\"3143\":1,\"3144\":1}}],[\"同上需要进行try\",{\"1\":{\"1815\":1}}],[\"同上\",{\"1\":{\"474\":1,\"509\":1,\"568\":1,\"874\":1,\"1178\":2,\"1665\":1,\"1822\":3,\"1838\":1}}],[\"同string的方法\",{\"1\":{\"449\":1}}],[\"同时要设置客户端连接到集群的账号\",{\"1\":{\"3179\":1}}],[\"同时要与idea兼容\",{\"1\":{\"298\":1}}],[\"同时可以在hightlight中设置高亮显示的标签和高亮显示的字段\",{\"1\":{\"2959\":1}}],[\"同时可以大幅度提高数据库访问速度\",{\"1\":{\"2420\":1}}],[\"同时category为iphone的文档\",{\"1\":{\"2936\":1}}],[\"同时构造方法会设置cookie的key\",{\"1\":{\"2793\":1}}],[\"同时提供给使用者清晰的文档\",{\"1\":{\"2738\":1}}],[\"同时进行debug\",{\"1\":{\"2509\":1}}],[\"同时这个目录也是tomcat真正访问的目录\",{\"1\":{\"2473\":1}}],[\"同时这些接口也会成为代理类的接口\",{\"1\":{\"2090\":1}}],[\"同时加入了日志监控\",{\"1\":{\"2422\":1}}],[\"同时如果每个操作使用的是自己单独的连接\",{\"1\":{\"2383\":1}}],[\"同时需要将原有数组中的数据复制到新的数组中\",{\"1\":{\"1619\":1}}],[\"同时效率不高\",{\"1\":{\"1574\":1}}],[\"同时实现了runnable\",{\"1\":{\"1560\":1}}],[\"同时又提出使用打印机的请求\",{\"1\":{\"1542\":1}}],[\"同时b也使用该账户进行消费2000元\",{\"1\":{\"1506\":1}}],[\"同时执行多个任务\",{\"1\":{\"1442\":1}}],[\"同时栈内存中\",{\"1\":{\"1302\":1}}],[\"同时在栈内存中\",{\"1\":{\"1300\":1}}],[\"同时还可以重写默认的方法\",{\"1\":{\"1273\":1}}],[\"同时也是request域对象\",{\"1\":{\"2673\":1}}],[\"同时也是springboot启动类\",{\"1\":{\"163\":1}}],[\"同时也不会影响程序的性能\",{\"1\":{\"2431\":1}}],[\"同时也描述了程序各个对象间的通信方式\",{\"1\":{\"1289\":1}}],[\"同时也提高了代码的健硕性\",{\"1\":{\"1161\":1}}],[\"同时父类和子类的标识符执指向同一地址\",{\"1\":{\"1160\":1}}],[\"同时使用时\",{\"1\":{\"1135\":1}}],[\"同时就数组的值成为垃圾\",{\"1\":{\"979\":1}}],[\"同时数组堆中的值成为垃圾\",{\"1\":{\"979\":1}}],[\"同时有一个包含comparator的重构方法\",{\"1\":{\"646\":1}}],[\"同时将原有数组中的元素复制到新的数组中\",{\"1\":{\"446\":1}}],[\"同时\",{\"1\":{\"426\":1,\"929\":1,\"1029\":1,\"1703\":1,\"2037\":1,\"2074\":1,\"2139\":1}}],[\"同时对多个环境进行加载使其生效\",{\"1\":{\"232\":1}}],[\"同时tomcat也不用进行配置\",{\"1\":{\"89\":1}}],[\"同层级左侧对齐\",{\"1\":{\"122\":1}}],[\"90\",{\"1\":{\"3212\":1}}],[\"9ef5\",{\"1\":{\"3198\":1}}],[\"9200\",{\"1\":{\"2858\":2,\"2860\":2,\"2884\":1,\"2889\":1,\"2896\":1,\"2900\":1,\"2906\":1,\"2914\":1,\"2919\":1,\"2924\":1,\"2949\":1,\"2952\":1,\"2955\":1,\"2972\":1,\"2975\":1,\"2977\":1,\"2978\":1,\"2980\":1,\"2983\":1,\"2984\":1,\"2986\":1,\"2987\":1,\"2991\":1,\"2992\":1,\"2993\":1,\"2997\":1,\"3000\":1,\"3003\":1,\"3006\":1,\"3008\":1,\"3010\":1,\"3015\":1,\"3019\":1}}],[\"9300\",{\"1\":{\"2858\":1}}],[\"985\",{\"1\":{\"2920\":1}}],[\"9876\",{\"1\":{\"2235\":1}}],[\"98\",{\"1\":{\"1687\":1,\"2226\":2}}],[\"98<\",{\"1\":{\"95\":1}}],[\"97\",{\"1\":{\"576\":2,\"854\":1,\"866\":1,\"886\":1,\"1946\":1}}],[\"9入\",{\"1\":{\"536\":1}}],[\"99\",{\"1\":{\"515\":1,\"1393\":1,\"2067\":1}}],[\"9632\",{\"1\":{\"3198\":1}}],[\"96\",{\"1\":{\"426\":2,\"1945\":3}}],[\"9\",{\"0\":{\"372\":1,\"383\":1,\"520\":1,\"597\":1,\"631\":1,\"665\":1,\"690\":1,\"719\":1,\"957\":1,\"1015\":1,\"1220\":1,\"1347\":1,\"1650\":1,\"1651\":1,\"1652\":1,\"1911\":1,\"1922\":1,\"1929\":1,\"1949\":1,\"1960\":1,\"1967\":1,\"1979\":1,\"1987\":1,\"2237\":1,\"2429\":1,\"2669\":1,\"2810\":1,\"2827\":1,\"3265\":1},\"1\":{\"94\":1,\"95\":2,\"96\":1,\"109\":1,\"314\":1,\"471\":1,\"472\":2,\"786\":1,\"834\":1,\"955\":1,\"975\":1,\"977\":1,\"979\":1,\"994\":1,\"1393\":1,\"1927\":1,\"1928\":1,\"1936\":1,\"1937\":1,\"1958\":1,\"1959\":1,\"1968\":1,\"1995\":1,\"2103\":1,\"2239\":1,\"2240\":1,\"2858\":1,\"2960\":1,\"3048\":1,\"3142\":1,\"3150\":1,\"3153\":1,\"3154\":1,\"3156\":1,\"3159\":3,\"3229\":1}}],[\"9<\",{\"1\":{\"93\":1,\"94\":1,\"95\":1,\"99\":3,\"336\":1}}],[\"+response\",{\"1\":{\"2977\":3,\"2986\":1,\"2987\":1}}],[\"+和正则一样\",{\"1\":{\"2777\":1}}],[\"+value\",{\"1\":{\"1710\":1,\"2799\":1,\"2806\":1}}],[\"+ft\",{\"1\":{\"1562\":1}}],[\"+thread\",{\"1\":{\"1509\":1}}],[\"+num\",{\"1\":{\"1492\":1,\"1509\":1}}],[\"+name+\",{\"1\":{\"501\":1,\"1432\":1}}],[\"+ht1\",{\"1\":{\"1489\":2}}],[\"+hours\",{\"1\":{\"473\":1}}],[\"+i+\",{\"1\":{\"2048\":1}}],[\"+i\",{\"1\":{\"1472\":2,\"1489\":2,\"1562\":1,\"1569\":1,\"2048\":1}}],[\"+age\",{\"1\":{\"1432\":1}}],[\"+age+\",{\"1\":{\"501\":1,\"1034\":1}}],[\"+uname+\",{\"1\":{\"1034\":1}}],[\"+language\",{\"1\":{\"1010\":1}}],[\"+=\",{\"1\":{\"896\":2,\"897\":1,\"933\":1,\"941\":1,\"1035\":1,\"1562\":1}}],[\"++a1\",{\"1\":{\"893\":1}}],[\"++\",{\"1\":{\"893\":2}}],[\"+world\",{\"1\":{\"1134\":1}}],[\"+word\",{\"1\":{\"812\":1}}],[\"+week\",{\"1\":{\"473\":1}}],[\"+ms\",{\"1\":{\"473\":1}}],[\"+second\",{\"1\":{\"473\":1}}],[\"+days\",{\"1\":{\"473\":1}}],[\"+年\",{\"1\":{\"473\":1}}],[\"+\",{\"0\":{\"1107\":1},\"1\":{\"94\":1,\"142\":1,\"420\":1,\"424\":1,\"446\":1,\"452\":1,\"473\":2,\"513\":2,\"531\":1,\"778\":2,\"811\":1,\"815\":1,\"864\":1,\"866\":1,\"867\":2,\"869\":1,\"873\":4,\"886\":7,\"893\":1,\"896\":1,\"938\":2,\"955\":5,\"956\":2,\"992\":1,\"1035\":1,\"1184\":2,\"1186\":4,\"1194\":2,\"1197\":1,\"1251\":1,\"1288\":2,\"1350\":1,\"1373\":4,\"1388\":2,\"1472\":2,\"1480\":1,\"1489\":2,\"1492\":1,\"1509\":1,\"1512\":1,\"1520\":2,\"1536\":2,\"1556\":2,\"1562\":1,\"1569\":1,\"1649\":1,\"1687\":2,\"1838\":1,\"1879\":3,\"1984\":2,\"2007\":7,\"2034\":3,\"2045\":1,\"2048\":5,\"2106\":3,\"2202\":1,\"2241\":1,\"2310\":3,\"2333\":1,\"2352\":3,\"2355\":3,\"2372\":3,\"2373\":2,\"2376\":2,\"2377\":1,\"2386\":1,\"2387\":1,\"2405\":8,\"2409\":2,\"2426\":1,\"2438\":2,\"2439\":2,\"2502\":1,\"2624\":1,\"2744\":1,\"2986\":1,\"2987\":1,\"3114\":2,\"3172\":1}}],[\">t<\",{\"1\":{\"3019\":1}}],[\">版本\",{\"1\":{\"2890\":1}}],[\">唯一标识\",{\"1\":{\"2890\":1}}],[\">副分片数量\",{\"1\":{\"2890\":1}}],[\">创建时间\",{\"1\":{\"2890\":1}}],[\">名称\",{\"1\":{\"2890\":1}}],[\">主分片数量\",{\"1\":{\"2890\":1}}],[\">路由\",{\"1\":{\"2890\":1}}],[\">给浏览器\",{\"1\":{\"2791\":1}}],[\">点击\",{\"1\":{\"2744\":1}}],[\">服务器\",{\"1\":{\"2665\":2}}],[\">服务端\",{\"1\":{\"1959\":2}}],[\"><br>\",{\"1\":{\"2623\":2,\"2672\":2}}],[\">requestfacade\",{\"1\":{\"2590\":1}}],[\">httpservletrequest\",{\"1\":{\"2590\":1}}],[\">导入到指定module\",{\"1\":{\"2525\":1}}],[\">选择tomcat\",{\"1\":{\"2525\":1}}],[\">选这个\",{\"1\":{\"1360\":1}}],[\">+\",{\"1\":{\"2525\":1}}],[\">listener\",{\"0\":{\"2711\":1}}],[\">libraries\",{\"1\":{\"2525\":1}}],[\">local\",{\"1\":{\"2498\":1}}],[\">web\",{\"1\":{\"2495\":1}}],[\">web项目\",{\"0\":{\"2484\":1}}],[\">woman\",{\"1\":{\"1171\":1}}],[\">调用\",{\"1\":{\"2319\":1}}],[\">预编译sql字符串\",{\"1\":{\"2319\":1}}],[\">种子\",{\"1\":{\"2202\":1}}],[\">e\",{\"1\":{\"2167\":1}}],[\">emp\",{\"1\":{\"2159\":1}}],[\">str\",{\"1\":{\"2215\":1}}],[\">string类型\",{\"0\":{\"1197\":1}}],[\">s1\",{\"1\":{\"2164\":1}}],[\">system\",{\"1\":{\"2155\":1}}],[\">右边\",{\"1\":{\"2114\":1,\"2118\":1}}],[\">左边\",{\"1\":{\"2114\":1,\"2118\":1}}],[\">客户端\",{\"1\":{\"1959\":2}}],[\">字节流输出\",{\"1\":{\"1842\":1}}],[\">字节流\",{\"1\":{\"1790\":1}}],[\">字符数组\",{\"1\":{\"1843\":1}}],[\">字符流输入\",{\"1\":{\"1842\":1}}],[\">字符流\",{\"1\":{\"1790\":1}}],[\">字符串\",{\"1\":{\"481\":1}}],[\">=\",{\"1\":{\"1753\":2,\"2938\":1,\"3002\":1,\"3100\":1}}],[\">是另外两个的父类\",{\"1\":{\"1743\":1}}],[\">数学中的\",{\"1\":{\"1578\":1,\"1633\":1}}],[\">数学里的\",{\"1\":{\"1578\":1}}],[\">存储无序的\",{\"1\":{\"1578\":1}}],[\">同步方法\",{\"1\":{\"1538\":1}}],[\">不能包含代码多了\",{\"1\":{\"1511\":1}}],[\">1\",{\"1\":{\"1492\":1}}],[\">默认优先级\",{\"1\":{\"1487\":1}}],[\">它们从同一堆中分配对象\",{\"1\":{\"1439\":1}}],[\">文档注释\",{\"1\":{\"1389\":1}}],[\">接口冲突\",{\"1\":{\"1269\":1}}],[\">类优先原则\",{\"1\":{\"1269\":1}}],[\">弥补了java单继承性的局限性\",{\"1\":{\"1262\":1}}],[\">评分\",{\"1\":{\"1252\":1}}],[\">办理业务\",{\"1\":{\"1252\":1}}],[\">person\",{\"1\":{\"1171\":1}}],[\">封装性\",{\"1\":{\"1025\":1}}],[\">new\",{\"1\":{\"2179\":1,\"2184\":1}}],[\">n\",{\"1\":{\"972\":1}}],[\">>\",{\"1\":{\"909\":1}}],[\">操作系统运行\",{\"1\":{\"767\":1}}],[\">javaweb\",{\"1\":{\"2499\":1}}],[\">java>lang>reflect>field\",{\"1\":{\"612\":1}}],[\">jvm编译\",{\"1\":{\"767\":1}}],[\">代码\",{\"1\":{\"767\":1}}],[\">application\",{\"1\":{\"2597\":1}}],[\">a\",{\"1\":{\"576\":1}}],[\">参数\",{\"1\":{\"537\":1}}],[\">byte\",{\"1\":{\"524\":1}}],[\">build\",{\"1\":{\"142\":1}}],[\">integer\",{\"1\":{\"1711\":1}}],[\">int\",{\"1\":{\"519\":1}}],[\">日期\",{\"1\":{\"482\":1}}],[\">0\",{\"1\":{\"412\":1}}],[\">后端服务器\",{\"1\":{\"338\":1}}],[\">前端服务器\",{\"1\":{\"338\":1}}],[\">compiler\",{\"1\":{\"301\":1}}],[\">mybatis\",{\"1\":{\"270\":1}}],[\">map\",{\"0\":{\"13\":1,\"14\":1,\"15\":1,\"16\":1,\"17\":1,\"18\":1,\"19\":1,\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"29\":1,\"30\":1,\"32\":1,\"36\":1,\"37\":1,\"38\":1,\"39\":1,\"41\":1,\"43\":1,\"45\":1,\"47\":1,\"49\":1,\"51\":1,\"53\":1,\"55\":1,\"57\":1,\"59\":1,\"61\":1,\"63\":1,\"65\":1}}],[\">这样就会打印sql\",{\"1\":{\"262\":1}}],[\">改成<root\",{\"1\":{\"262\":1}}],[\">\",{\"0\":{\"395\":1},\"1\":{\"93\":2,\"95\":3,\"109\":1,\"111\":1,\"174\":2,\"235\":1,\"262\":76,\"270\":3,\"280\":2,\"298\":2,\"313\":8,\"336\":26,\"360\":3,\"371\":1,\"423\":7,\"491\":1,\"509\":1,\"588\":1,\"589\":1,\"590\":2,\"595\":2,\"600\":2,\"601\":2,\"602\":1,\"610\":1,\"611\":1,\"614\":2,\"622\":2,\"624\":2,\"625\":2,\"663\":1,\"665\":1,\"666\":1,\"682\":1,\"683\":1,\"685\":1,\"688\":1,\"914\":1,\"938\":1,\"1038\":1,\"1361\":1,\"1471\":1,\"1512\":1,\"1520\":1,\"1536\":1,\"1578\":1,\"1611\":1,\"1678\":2,\"1687\":1,\"1710\":1,\"1741\":1,\"1743\":1,\"1744\":1,\"1745\":1,\"1747\":1,\"1748\":3,\"1755\":2,\"1756\":1,\"1757\":2,\"1843\":1,\"1870\":2,\"1920\":2,\"2020\":1,\"2021\":1,\"2045\":1,\"2048\":1,\"2090\":1,\"2114\":2,\"2120\":1,\"2121\":1,\"2122\":1,\"2123\":2,\"2124\":1,\"2125\":1,\"2126\":1,\"2127\":1,\"2128\":1,\"2129\":1,\"2130\":1,\"2158\":1,\"2161\":1,\"2173\":1,\"2176\":1,\"2184\":1,\"2185\":1,\"2196\":1,\"2197\":1,\"2202\":1,\"2210\":2,\"2227\":1,\"2229\":2,\"2230\":2,\"2231\":1,\"2235\":1,\"2236\":1,\"2241\":1,\"2243\":4,\"2298\":1,\"2468\":1,\"2469\":1,\"2490\":1,\"2577\":1,\"2578\":3,\"2609\":4,\"2621\":1,\"2623\":4,\"2624\":1,\"2744\":5,\"2771\":2,\"2772\":2,\"2777\":11,\"2778\":2,\"2779\":3,\"2781\":41,\"2782\":5,\"2938\":1,\"2959\":1,\"2971\":2,\"2982\":1,\"3002\":1,\"3018\":1,\"3019\":1,\"3057\":1,\"3100\":1,\"3188\":3,\"3212\":1}}],[\"该依赖会自动添加子依赖\",{\"1\":{\"3229\":1}}],[\"该账号仅能读写article库\",{\"1\":{\"3206\":1}}],[\"该用户的信息都是存储在admin数据库的\",{\"1\":{\"3201\":1}}],[\"该成员不是仲裁节点\",{\"1\":{\"3154\":1}}],[\"该索引是唯一索引\",{\"1\":{\"3109\":1}}],[\"该软件为绿色软件\",{\"1\":{\"2856\":1}}],[\"该软件是绿色软件\",{\"1\":{\"2453\":1,\"3047\":1}}],[\"该session对象有一个id属性\",{\"1\":{\"2820\":1}}],[\"该监听器接口一共有两个方法\",{\"1\":{\"2724\":1}}],[\"该域对象仅在jsp中有用\",{\"1\":{\"2672\":1}}],[\"该域对象是jsp中的\",{\"1\":{\"2672\":1}}],[\"该路径是通过tomcat的deployment\",{\"1\":{\"2597\":1}}],[\"该匹配规则和其他三个是不同的\",{\"1\":{\"2576\":1}}],[\"该实例随后会被java的垃圾收集器所回收\",{\"1\":{\"2550\":1}}],[\"该怎么做\",{\"1\":{\"2502\":1}}],[\"该模板只需配置一次\",{\"1\":{\"2497\":1}}],[\"该目录就是一个独立的项目\",{\"1\":{\"2465\":1}}],[\"该操作执行后并不会提交\",{\"1\":{\"2386\":1}}],[\"该操作仅支持custom表\",{\"1\":{\"2352\":1}}],[\"该操作会抛出\",{\"1\":{\"2323\":1}}],[\"该操作会返回一个新的stream\",{\"1\":{\"2215\":1}}],[\"该函数会被应用到每个元素上\",{\"1\":{\"2215\":1,\"2216\":1,\"2217\":1,\"2218\":1}}],[\"该函数也是四舍五入\",{\"1\":{\"518\":1}}],[\"该加载器无法获取\",{\"1\":{\"2031\":1}}],[\"该对象通过add方法\",{\"1\":{\"2985\":1}}],[\"该对象转为json格式后\",{\"1\":{\"2980\":1}}],[\"该对象会在tomcat启动时创建\",{\"1\":{\"2680\":1}}],[\"该对象代表了整个web应用\",{\"1\":{\"2677\":1}}],[\"该对象只会创建一次\",{\"1\":{\"2545\":1}}],[\"该对象是由参数3的实现类创建的\",{\"1\":{\"2090\":1}}],[\"该对象有被代理对象的同名方法\",{\"1\":{\"2085\":1}}],[\"该对象就是代理对象\",{\"1\":{\"2085\":1}}],[\"该对象里有两个字段\",{\"1\":{\"1996\":1}}],[\"该对象可以将任意character\",{\"1\":{\"739\":1}}],[\"该信息将被截短\",{\"1\":{\"1985\":1}}],[\"该步骤已经将数据读入到创建的char\",{\"1\":{\"1806\":1}}],[\"该参数是一个对象\",{\"1\":{\"3111\":1}}],[\"该参数用来指定数据库存放的位置\",{\"1\":{\"3043\":1}}],[\"该参数必须是comparator的对象\",{\"1\":{\"1654\":1}}],[\"该参数将限制接下来要输入的数据格式\",{\"1\":{\"639\":1,\"760\":1}}],[\"该集合的类必须实现comparable接口\",{\"1\":{\"1654\":1}}],[\"该接口用于处理\",{\"1\":{\"2436\":1}}],[\"该接口通常由服务器\",{\"1\":{\"2420\":1}}],[\"该接口是个标识接口\",{\"1\":{\"1905\":1}}],[\"该接口是个函数式接口\",{\"1\":{\"504\":1}}],[\"该接口的结构如下\",{\"1\":{\"1633\":1}}],[\"该接口有三个实现类\",{\"1\":{\"1611\":1}}],[\"该接口有一个iterator\",{\"1\":{\"1588\":1}}],[\"该接口里定义的方法既可用于操作\",{\"1\":{\"1582\":1}}],[\"该线程不会释放锁\",{\"1\":{\"1527\":1}}],[\"该线程将拿到锁\",{\"1\":{\"1523\":1}}],[\"该构造函数可以自定义内部缓冲区数组的大小\",{\"1\":{\"1828\":1,\"1829\":1,\"1830\":1,\"1831\":1}}],[\"该构造方法将runnble接口实现类的实例赋值给了target变量\",{\"1\":{\"1493\":1}}],[\"该构造器接受一个string类谢谢的参数\",{\"1\":{\"602\":1,\"2038\":1}}],[\"该构造器可以接受第二个参数\",{\"1\":{\"426\":1}}],[\"该进程执行完\",{\"1\":{\"1481\":1}}],[\"该\",{\"1\":{\"1406\":1}}],[\"该异常对象会被抛给调用者方法中处理\",{\"1\":{\"1351\":1}}],[\"该数组中保存执行java命令时传递给所运行的类的参数\",{\"1\":{\"1293\":1}}],[\"该暴露的暴露出来\",{\"1\":{\"1053\":1}}],[\"该属性是引用类型\",{\"1\":{\"883\":1}}],[\"该内存地址\",{\"1\":{\"879\":1}}],[\"该变量必须已经被初始化过了\",{\"1\":{\"825\":1}}],[\"该区域的数据可以在同一类型范围内不断变化\",{\"1\":{\"818\":1}}],[\"该标识符是可变的\",{\"1\":{\"1454\":1}}],[\"该标注可以用在类或方法上\",{\"1\":{\"811\":1}}],[\"该标记外外面必须加\",{\"1\":{\"810\":1}}],[\"该方式无法实现热部署\",{\"1\":{\"2500\":1,\"2517\":1}}],[\"该方式返回的是\",{\"1\":{\"651\":1}}],[\"该方法用来返回servlet的相关信息\",{\"1\":{\"2555\":1}}],[\"该方法用来调用被代理类的方法\",{\"1\":{\"2090\":1}}],[\"该方法仅运行了一次\",{\"1\":{\"2554\":1}}],[\"该方法仅启动了一次\",{\"1\":{\"2552\":1}}],[\"该方法中的代码块都会执行一次\",{\"1\":{\"2553\":1}}],[\"该方法都会执行一次\",{\"1\":{\"2553\":1}}],[\"该方法只调用一次\",{\"1\":{\"2548\":1}}],[\"该方法只会删除找到的第一个元素\",{\"1\":{\"664\":1}}],[\"该方法返回\",{\"1\":{\"2340\":1}}],[\"该方法不会递归\",{\"1\":{\"2219\":1}}],[\"该方法需要处理异常\",{\"1\":{\"1801\":1,\"1802\":1}}],[\"该方法就是泛型方法\",{\"1\":{\"1728\":1}}],[\"该方法就可以写出换行符\",{\"1\":{\"582\":1,\"1835\":1}}],[\"该方法继续执行\",{\"1\":{\"1526\":1}}],[\"该方法已不推荐使用\",{\"1\":{\"1481\":1}}],[\"该方法接收一个string类型的数组参数\",{\"1\":{\"1293\":1}}],[\"该方法接受一个正则表达式作为它的第一个参数\",{\"1\":{\"736\":1}}],[\"该方法叫做抽象方法\",{\"1\":{\"1247\":1}}],[\"该方法必须是重写了父类方法\",{\"1\":{\"1149\":1}}],[\"该方法会获取访问时的请求信息\",{\"1\":{\"2553\":1}}],[\"该方法会自行处理\",{\"1\":{\"2435\":1}}],[\"该方法会抛出\",{\"1\":{\"2322\":1}}],[\"该方法会抛出java\",{\"1\":{\"565\":1,\"566\":1}}],[\"该方法会抛interruptedexception异常\",{\"1\":{\"1481\":1}}],[\"该方法会抛异常\",{\"1\":{\"1481\":1}}],[\"该方法会启动对象对应的线程\",{\"1\":{\"1470\":1}}],[\"该方法会改变源集合\",{\"1\":{\"698\":1}}],[\"该方法会将参数集合中的所有元素都添加到自己的集合中\",{\"1\":{\"698\":1}}],[\"该方法可以很方便地遍历所有的枚举值\",{\"1\":{\"1379\":1}}],[\"该方法可使将指定集合包装成线程同步的集合\",{\"1\":{\"681\":1}}],[\"该方法可用于快速生成一个list集合\",{\"1\":{\"651\":1}}],[\"该方法最初是定义在iterator中的\",{\"1\":{\"664\":1}}],[\"该方法最为安全可靠\",{\"1\":{\"586\":1,\"2018\":1}}],[\"该方法有一个对象参数\",{\"1\":{\"3193\":1}}],[\"该方法有两个参数\",{\"1\":{\"2999\":1}}],[\"该方法有很多重构方法\",{\"1\":{\"646\":1}}],[\"该方法有好几个重构方法\",{\"1\":{\"643\":1}}],[\"该方法对各种类型的参数进行了重构\",{\"1\":{\"642\":1}}],[\"该方法是通过后缀名获取文件类型的\",{\"1\":{\"2687\":1}}],[\"该方法是一直等待输入的\",{\"1\":{\"581\":1}}],[\"该方法是阻塞的\",{\"1\":{\"581\":1}}],[\"该方法是读取一行数据\",{\"1\":{\"581\":1,\"1834\":1}}],[\"该方法本身也会抛出异常\",{\"1\":{\"579\":1}}],[\"该方法若不调用\",{\"1\":{\"578\":1}}],[\"该方法也需要处理异常\",{\"1\":{\"571\":1}}],[\"该方法额外多了两个参数\",{\"1\":{\"570\":1}}],[\"该方法的作用就是通过工作目录下的路径\",{\"1\":{\"2692\":1}}],[\"该方法的作用是获得系统中属性名对应的值\",{\"1\":{\"636\":1}}],[\"该方法的作用是请求系统进行垃圾回收\",{\"1\":{\"635\":1}}],[\"该方法的作用是退出程序\",{\"1\":{\"634\":1}}],[\"该方法的参数是\",{\"1\":{\"750\":1}}],[\"该方法的参数应该是个目录\",{\"1\":{\"546\":1,\"547\":1}}],[\"该方法的返回值就会加入ioc管理\",{\"1\":{\"158\":1}}],[\"该方法与string\",{\"1\":{\"527\":1}}],[\"该方法针对不通数据类型的参数\",{\"1\":{\"452\":1}}],[\"该方法如果未找到\",{\"1\":{\"409\":1}}],[\"该仿佛根据参数中的数组数据类型不通有多个重构方法\",{\"1\":{\"648\":1}}],[\"该复制是真的值复制\",{\"1\":{\"647\":1}}],[\"该文件夹中新建配置文件\",{\"1\":{\"3044\":1}}],[\"该文件是在生成\",{\"1\":{\"2733\":1}}],[\"该文件是否已经隐藏\",{\"1\":{\"553\":1}}],[\"该文件只能用datainputstream来读入\",{\"1\":{\"1878\":1}}],[\"该文件还有一个父工程\",{\"1\":{\"94\":1}}],[\"该项目来自于黑马程序员的\",{\"1\":{\"395\":1}}],[\"该java类库提供了一些注解可以简化实体类的开发\",{\"1\":{\"344\":1}}],[\"该注解表示下面要定义的接口为\",{\"1\":{\"2139\":1}}],[\"该注解不需要任何参数\",{\"1\":{\"2726\":1}}],[\"该注解不能继承其他的注解或接口\",{\"1\":{\"1395\":1}}],[\"该注解不支持宽松绑定\",{\"1\":{\"166\":1}}],[\"该注解会被启动类扫描\",{\"1\":{\"350\":1}}],[\"该注解的意义就是对绑定属性的类进行统一的管理\",{\"1\":{\"162\":1}}],[\"该注解的功能\",{\"1\":{\"105\":1}}],[\"该注解是作用在配置类上的\",{\"1\":{\"162\":1}}],[\"该类实例和session一起活化到内存时调用\",{\"1\":{\"2721\":1}}],[\"该类实例和session一起钝化到硬盘时调用\",{\"1\":{\"2721\":1}}],[\"该类实现了httpservletrequest接口\",{\"1\":{\"2589\":1}}],[\"该类实现的基本功能为\",{\"1\":{\"2404\":1}}],[\"该类也有一个实现类\",{\"1\":{\"2558\":1}}],[\"该类简单化了sql查询\",{\"1\":{\"2435\":1}}],[\"该类同时也表名\",{\"1\":{\"2401\":1}}],[\"该类的实例从session中移除时调用\",{\"1\":{\"2720\":1}}],[\"该类的实例被放到session域中时调用\",{\"1\":{\"2720\":1}}],[\"该类的构造器\",{\"1\":{\"1975\":1}}],[\"该类的核心就是可以操作指针\",{\"1\":{\"1889\":1}}],[\"该类是没有抽象方法的抽象类\",{\"1\":{\"2560\":1,\"2567\":1}}],[\"该类是\",{\"1\":{\"1868\":1}}],[\"该类是专门用来处理项目中的配置文件的\",{\"1\":{\"1689\":1}}],[\"该类为工具类\",{\"1\":{\"641\":1}}],[\"该类有三种实例化的方式\",{\"1\":{\"480\":1}}],[\"该类包含了很多条件查询相关的方法\",{\"1\":{\"354\":1}}],[\"该类内部要查找manifest\",{\"1\":{\"198\":1}}],[\"该类不能再声明为bean\",{\"1\":{\"164\":1}}],[\"该类用来创建数据对象\",{\"1\":{\"156\":1}}],[\"该类型依赖出现的目的是减少依赖配置的数量\",{\"1\":{\"99\":1}}],[\"该配置就是来指定哪些文件的修改会触发热部署\",{\"1\":{\"148\":1}}],[\"该该配置文件可以配置所有可以自定义的配置项\",{\"1\":{\"113\":1}}],[\"该引导类是靠\",{\"1\":{\"105\":1}}],[\"该parent就是springboot内置的专门用来管理依赖的父pom\",{\"1\":{\"93\":1}}],[\"该url就是要连接的网址\",{\"1\":{\"71\":1}}],[\"要添加到副本集的新成员\",{\"1\":{\"3159\":1}}],[\"要更新的内容\",{\"1\":{\"3080\":1}}],[\"要插入到集合中的文档或文档数组\",{\"1\":{\"3072\":1}}],[\"要是将一个用户添加到这个数据库\",{\"1\":{\"3060\":1}}],[\"要是long类型\",{\"1\":{\"1363\":1}}],[\"要查看的文档\",{\"1\":{\"2905\":1,\"2923\":1}}],[\"要查看的索引名\",{\"1\":{\"2888\":1}}],[\"要删除的索引名\",{\"1\":{\"2895\":1}}],[\"要创建的索引名\",{\"1\":{\"2883\":1}}],[\"要创建一个\",{\"1\":{\"736\":1}}],[\"要先将dtd文档引入xml文档中\",{\"1\":{\"2778\":1}}],[\"要先创建相关的数据表操作类\",{\"1\":{\"2394\":1}}],[\"要实现servlet接口\",{\"1\":{\"2524\":1}}],[\"要关闭之前通过双击打开的tomcat服务\",{\"1\":{\"2510\":1}}],[\"要访问的文件是index\",{\"1\":{\"2467\":1}}],[\"要启用pscache\",{\"1\":{\"2426\":1}}],[\"要填sql中的date对象\",{\"1\":{\"2322\":1}}],[\"要包装stu非null\",{\"1\":{\"2252\":1}}],[\"要使用参数1的类\",{\"1\":{\"2152\":1}}],[\"要调用的方法\",{\"1\":{\"2092\":1}}],[\"要调用mapper接口的selectpage方法\",{\"1\":{\"351\":1}}],[\"要同时new很多对象\",{\"1\":{\"2005\":1}}],[\"要指定监听的接口\",{\"1\":{\"1984\":1}}],[\"要注意的是\",{\"1\":{\"1905\":1}}],[\"要操作的文件\",{\"1\":{\"1885\":1}}],[\"要写出字符流\",{\"1\":{\"1788\":1}}],[\"要读取字符流\",{\"1\":{\"1785\":1}}],[\"要不用\",{\"1\":{\"1721\":1}}],[\"要综合考虑效率和\",{\"1\":{\"1651\":1}}],[\"要重新获得监控权\",{\"1\":{\"1552\":1}}],[\"要重新打包吗\",{\"1\":{\"209\":1}}],[\"要避免出现死锁\",{\"1\":{\"1539\":1}}],[\"要将unlock\",{\"1\":{\"1535\":1}}],[\"要在start前设置name\",{\"1\":{\"1480\":1}}],[\"要加到\",{\"1\":{\"1421\":1}}],[\"要检测分母为0\",{\"1\":{\"1316\":1}}],[\"要\",{\"1\":{\"1258\":1}}],[\"要保证输入的类型是正确的\",{\"1\":{\"1199\":1}}],[\"要保证效果最佳且没有bug\",{\"1\":{\"90\":1}}],[\"要想将字节数据写回到浏览器\",{\"1\":{\"2645\":1}}],[\"要想将字符数据写回到浏览器\",{\"1\":{\"2639\":1}}],[\"要想了解requestfacade中都提供了哪些方法\",{\"1\":{\"2589\":1}}],[\"要想编写一个servlet就必须要实现servlet接口\",{\"1\":{\"2557\":1}}],[\"要想修改tomcat启动的端口号\",{\"1\":{\"2457\":1}}],[\"要想实现多线程\",{\"1\":{\"1501\":1}}],[\"要想访问父类中的同名属性就要使用super关键字了\",{\"1\":{\"1129\":1}}],[\"要想得到更强更便捷的正则匹配操作\",{\"1\":{\"750\":1}}],[\"要么实现接口\",{\"1\":{\"1254\":1,\"1258\":1}}],[\"要么都声明为static的\",{\"1\":{\"1127\":1}}],[\"要么是false\",{\"1\":{\"900\":1}}],[\"要拆分的字符序列\",{\"1\":{\"753\":1}}],[\"要匹配的字符序列\",{\"1\":{\"752\":1}}],[\"要设置哪个对象的属性\",{\"1\":{\"617\":1}}],[\"要设置的属性的值\",{\"1\":{\"616\":1}}],[\"要获取哪个对象的属性\",{\"1\":{\"616\":1}}],[\"要求是一个查询语句\",{\"1\":{\"2426\":1}}],[\"要求是相同类的对象\",{\"1\":{\"1655\":1}}],[\"要求接口中的抽象方法中\",{\"1\":{\"2152\":1}}],[\"要求接口中的抽象方法的形参列表和返回值类型与方法引用的方法的形参列表和返回值类型相同\",{\"1\":{\"2152\":1}}],[\"要求将读取到的整行字符串转成大写输出\",{\"1\":{\"1870\":1}}],[\"要求key必须是由同一个类创建的对象\",{\"1\":{\"1686\":1}}],[\"要求字符串必须是枚举类对象的\",{\"1\":{\"1379\":1}}],[\"要求此对象也必须声明为静态的\",{\"1\":{\"1240\":1}}],[\"要求此局部变量声明为final的\",{\"1\":{\"1210\":1}}],[\"要求obj所在类要重写equals\",{\"1\":{\"662\":1}}],[\"要求\",{\"1\":{\"500\":1,\"1472\":1,\"1511\":1,\"1646\":1,\"1746\":1,\"1823\":1,\"1870\":1,\"2037\":1,\"2073\":1,\"2154\":1,\"2160\":1,\"2163\":1,\"2166\":1,\"2172\":1,\"2175\":1,\"2178\":1,\"2183\":1}}],[\"要开发的内容\",{\"1\":{\"338\":1}}],[\"要用到一堆依赖\",{\"1\":{\"100\":1}}],[\"要根据项目的其他组件依赖进行选择\",{\"1\":{\"72\":1}}],[\"ⅱ\",{\"0\":{\"90\":1,\"126\":1,\"169\":1,\"184\":1,\"203\":1,\"215\":1,\"227\":1,\"245\":1,\"279\":1,\"303\":1,\"320\":1,\"406\":1,\"450\":1,\"464\":1,\"495\":1,\"523\":1,\"548\":1,\"572\":1,\"599\":1,\"672\":1,\"705\":1,\"731\":1,\"745\":1,\"786\":1,\"804\":1,\"829\":1,\"843\":1,\"894\":1,\"925\":1,\"967\":1,\"1006\":1,\"1027\":1,\"1060\":1,\"1085\":1,\"1121\":1,\"1162\":1,\"1188\":1,\"1226\":1,\"1253\":1,\"1282\":1,\"1305\":1,\"1316\":1,\"1326\":1,\"1357\":1,\"1375\":1,\"1391\":1,\"1443\":1,\"1464\":1,\"1510\":1,\"1563\":1,\"1577\":1,\"1601\":1,\"1615\":1,\"1653\":1,\"1671\":1,\"1708\":1,\"1727\":1,\"1740\":1,\"1771\":1,\"1798\":1,\"1827\":1,\"1845\":1,\"1871\":1,\"1921\":1,\"1940\":1,\"1953\":1,\"1985\":1,\"2030\":1,\"2040\":1,\"2083\":1,\"2119\":1,\"2143\":1,\"2153\":1,\"2194\":1,\"2250\":1,\"2263\":1,\"2292\":1,\"2315\":1,\"2397\":1,\"2422\":1,\"2437\":1,\"2451\":1,\"2480\":1,\"2535\":1,\"2551\":1,\"2573\":1,\"2586\":1,\"2599\":1,\"2638\":1,\"2657\":1,\"2679\":1,\"2713\":1,\"2740\":1,\"2757\":1,\"2773\":1,\"2790\":1,\"2834\":1,\"3030\":1,\"3045\":1,\"3054\":1,\"3065\":1,\"3080\":1,\"3094\":1,\"3108\":1,\"3134\":1,\"3141\":1,\"3167\":1,\"3202\":1,\"3222\":1}}],[\"所见即所得\",{\"1\":{\"3057\":1}}],[\"所存入的对象即为request对象\",{\"1\":{\"2584\":1}}],[\"所生成的元素序列\",{\"1\":{\"2190\":1}}],[\"所提供的方法性能也不高\",{\"1\":{\"1915\":1}}],[\"所占用\",{\"1\":{\"1542\":1}}],[\"所标注\",{\"1\":{\"1432\":2}}],[\"所标注内容\",{\"1\":{\"1425\":1}}],[\"所谓\",{\"1\":{\"1976\":1}}],[\"所谓泛型\",{\"1\":{\"1700\":1}}],[\"所谓javabean\",{\"1\":{\"1282\":1}}],[\"所谓类的单例设计模式\",{\"1\":{\"1239\":1}}],[\"所谓整合其实就是使用springboot技术去管理其他技术\",{\"1\":{\"265\":1}}],[\"所花费的时间为\",{\"1\":{\"956\":1}}],[\"所在包\",{\"1\":{\"346\":1}}],[\"所以仲裁器可\",{\"1\":{\"3132\":1}}],[\"所以它既可以存储比较复杂的数据类型\",{\"1\":{\"3032\":1}}],[\"所以hits里不会有查询结果\",{\"1\":{\"3015\":1}}],[\"所以是数组\",{\"1\":{\"2951\":1}}],[\"所以默认不会采用电脑里的jdk\",{\"1\":{\"2857\":1}}],[\"所以默认重启后session将失效\",{\"1\":{\"2823\":1}}],[\"所以session本质是在内存中的\",{\"1\":{\"2812\":1}}],[\"所以stringbuffer的方法上都会带\",{\"1\":{\"449\":1}}],[\"所以框架的使用者可以随便配置xml\",{\"1\":{\"2774\":1}}],[\"所以地址会发生变化\",{\"1\":{\"2664\":1}}],[\"所以会出现乱码\",{\"1\":{\"2628\":1}}],[\"所以map的值的类型为string数组\",{\"1\":{\"2620\":1}}],[\"所以此处就不需要手动关闭流了\",{\"1\":{\"2611\":1}}],[\"所以需要把请求方式变更为post\",{\"1\":{\"2604\":1}}],[\"所以需要进行清理\",{\"1\":{\"1457\":1}}],[\"所以tomcat提供了方法参数接口的具体实现类\",{\"1\":{\"2589\":1}}],[\"所以我们可以使用别人提供好的方法来简化代码的开发\",{\"1\":{\"2647\":1}}],[\"所以我们可以从request对象中获取请求的相关参数\",{\"1\":{\"2584\":1}}],[\"所以我们自定义servlet\",{\"1\":{\"2561\":1}}],[\"所以我们通常就不针对运行时异常编写try\",{\"1\":{\"1347\":1}}],[\"所以类中必然会重写service方法供tomcat\",{\"1\":{\"2537\":1}}],[\"所以不必关心涉及具体平台的问题\",{\"1\":{\"2734\":1}}],[\"所以不要手动关闭流\",{\"1\":{\"2643\":1}}],[\"所以不要同时出现\",{\"1\":{\"1049\":1}}],[\"所以不用担心没有起别名\",{\"1\":{\"2354\":1}}],[\"所以调用的是单参构造器\",{\"1\":{\"2177\":1}}],[\"所以调用的是student类的\",{\"1\":{\"1157\":1}}],[\"所以方法引用\",{\"1\":{\"2148\":1}}],[\"所以返回数组\",{\"1\":{\"2050\":1}}],[\"所以无法确定变量的类型\",{\"1\":{\"2005\":1}}],[\"所以无法创建该类的对象\",{\"1\":{\"632\":1}}],[\"所以只关外层流也可以\",{\"1\":{\"1833\":1}}],[\"所以应该件\",{\"1\":{\"1789\":1}}],[\"所以应该使用\",{\"1\":{\"1371\":1}}],[\"所以在jdk1\",{\"1\":{\"1699\":1}}],[\"所以在开发中\",{\"1\":{\"898\":1}}],[\"所以总会找到两个不同的输入拥有相同的哈希\",{\"1\":{\"1651\":1}}],[\"所以java采用了一种特殊的算法\",{\"1\":{\"1642\":1}}],[\"所以java采用的别的方法\",{\"1\":{\"1641\":1}}],[\"所以jdk对它进行了优化\",{\"1\":{\"876\":1}}],[\"所以把while\",{\"1\":{\"1520\":1}}],[\"所以要根据实际业务需求来设置\",{\"1\":{\"2963\":1}}],[\"所以要用try\",{\"1\":{\"1803\":1}}],[\"所以要这样写\",{\"1\":{\"1492\":1}}],[\"所以要嵌套一个try\",{\"1\":{\"1344\":1}}],[\"所以多进程要比多线程健壮\",{\"1\":{\"1440\":1}}],[\"所以这些线程的run方法操作的是同一个对象的成员变量\",{\"1\":{\"1495\":1}}],[\"所以这里不用处理异常\",{\"1\":{\"1352\":1}}],[\"所以这个交换值的函数失败了\",{\"1\":{\"1044\":1}}],[\"所以可以合并成一个异常\",{\"1\":{\"1352\":1}}],[\"所以基本数据类型在赋值的时候\",{\"1\":{\"1307\":1}}],[\"所以该方法只会执行一次\",{\"1\":{\"2554\":1}}],[\"所以该方法必须是static的\",{\"1\":{\"1293\":1}}],[\"所以该方法的访问权限必须是public\",{\"1\":{\"1293\":1}}],[\"所以该文件默认是空的\",{\"1\":{\"113\":1}}],[\"所以理论上无法创建匿名对象\",{\"1\":{\"1249\":1}}],[\"所以系统进行了缓存\",{\"1\":{\"1182\":1}}],[\"所以才可以看到内存中有父类中的结构\",{\"1\":{\"1144\":1}}],[\"所以认为不可以继承\",{\"1\":{\"1118\":1}}],[\"所以认为可以继承\",{\"1\":{\"1118\":1}}],[\"所以其实二维元素的值是一个内存地址\",{\"1\":{\"982\":1}}],[\"所以其后的字符具有特殊的意义\",{\"1\":{\"737\":1}}],[\"所以一定不要忘了迭代条件\",{\"1\":{\"935\":1}}],[\"所以一个连接可以被多线程复用\",{\"1\":{\"291\":1}}],[\"所以也可以通过\",{\"1\":{\"2968\":1}}],[\"所以也可以很方便的进行调用\",{\"1\":{\"632\":1}}],[\"所以也要求表达式1和表达式2的数据类型要一样\",{\"1\":{\"913\":1}}],[\"所以6取反的结果是\",{\"1\":{\"909\":1}}],[\"所以结果是0\",{\"1\":{\"897\":1}}],[\"所以机器可以只有加法而没有减法\",{\"1\":{\"873\":1}}],[\"所以安装了jdk\",{\"1\":{\"777\":1}}],[\"所以集合元素如果都相同\",{\"1\":{\"667\":1}}],[\"所以\",{\"1\":{\"494\":1,\"737\":1,\"1159\":1,\"1283\":1,\"1651\":1,\"1664\":2,\"1668\":1,\"2000\":1,\"2037\":1}}],[\"所以整合后操作肯定要简化一些\",{\"1\":{\"265\":1}}],[\"所以想要查看sql语句的话\",{\"1\":{\"262\":1}}],[\"所以运行时提示找不到主清单属性\",{\"1\":{\"201\":1}}],[\"所以仅仅运行restart类加载即可\",{\"1\":{\"139\":1}}],[\"所以没有深入探索复杂内容\",{\"1\":{\"60\":1,\"61\":1}}],[\"所有数据库用户角色\",{\"1\":{\"3189\":1}}],[\"所有数据库连接对象的父类都是\",{\"1\":{\"1153\":1}}],[\"所有存储在集合中的数据都是\",{\"1\":{\"3069\":1}}],[\"所有满足条件的文档都会被删除\",{\"1\":{\"2918\":1}}],[\"所有单词的倒排列表往往顺序地存储在磁盘的某个文件里\",{\"1\":{\"2878\":1}}],[\"所有单词的首字母大写\",{\"1\":{\"835\":1}}],[\"所有用户的所有请求数据\",{\"1\":{\"2689\":1}}],[\"所有用户访问后\",{\"1\":{\"2447\":1}}],[\"所有页面都可以获取session中的数据\",{\"1\":{\"2675\":1}}],[\"所有配置项都有默认值\",{\"1\":{\"2572\":1}}],[\"所有配置文件都不需要管\",{\"1\":{\"89\":1}}],[\"所有函数必须以方法的形式属于某个类\",{\"1\":{\"2133\":1}}],[\"所有动态代理类的父类\",{\"0\":{\"2089\":1}}],[\"所有需要访问和使用类数据只能通过这个class对象\",{\"1\":{\"2026\":1}}],[\"所有线程\",{\"1\":{\"1553\":1}}],[\"所有线程开始重新争抢这把锁\",{\"1\":{\"1523\":1}}],[\"所有非静态方法共用同一把锁\",{\"1\":{\"1524\":1}}],[\"所有没有默认值的成员\",{\"1\":{\"1399\":1}}],[\"所有基本类型\",{\"1\":{\"1398\":1}}],[\"所有基本的sql操作方法就自动添加了\",{\"1\":{\"282\":1}}],[\"所有属性\",{\"1\":{\"1282\":1}}],[\"所有类都是引用数据类型\",{\"1\":{\"1008\":1}}],[\"所有代码都要归属为一个对象\",{\"1\":{\"1005\":1}}],[\"所有case子句中的常量值互不相同\",{\"1\":{\"927\":1}}],[\"所有字母都大写\",{\"1\":{\"835\":1}}],[\"所有打开的流资源\",{\"1\":{\"571\":1}}],[\"所有number类的子类都实现了comparable接口\",{\"1\":{\"525\":1}}],[\"所有包装类\",{\"1\":{\"523\":1}}],[\"所有的字符集都是和具体编码方案绑定在一起的\",{\"1\":{\"1863\":1}}],[\"所有的文字都用两个字节来表示\",{\"1\":{\"1861\":1}}],[\"所有的entry构成的集合是set\",{\"1\":{\"1664\":1}}],[\"所有的value构成的集合是collection\",{\"1\":{\"1664\":1}}],[\"所有的key构成的集合是set\",{\"1\":{\"1664\":1}}],[\"所有的对象实例以及数组都要在堆上分配内存\",{\"1\":{\"1298\":1}}],[\"所有的java类具有java\",{\"1\":{\"1116\":1}}],[\"所有的java类\",{\"1\":{\"1116\":1}}],[\"所有的方法必须定义在类里\",{\"1\":{\"1028\":1}}],[\"所有的服务器将不再设置自己的配置文件\",{\"1\":{\"222\":1}}],[\"所有的依赖都是没有版本的\",{\"1\":{\"92\":1}}],[\"所有springboot项目依赖的jar包都在这里了\",{\"1\":{\"198\":1}}],[\"运算时会\",{\"1\":{\"1178\":1}}],[\"运算符来实现\",{\"1\":{\"3084\":1}}],[\"运算符优先级\",{\"0\":{\"916\":1}}],[\"运算符\",{\"0\":{\"889\":1}}],[\"运算符两边习惯性各加一个空格\",{\"1\":{\"815\":1}}],[\"运算的结构是将这些值连接起来了\",{\"1\":{\"886\":1}}],[\"运算的规则\",{\"0\":{\"864\":1}}],[\"运算\",{\"1\":{\"530\":1}}],[\"运维信息记录使用warn即可\",{\"1\":{\"247\":1}}],[\"运维工程师\",{\"1\":{\"22\":1}}],[\"运营期记录信息\",{\"1\":{\"241\":1}}],[\"运行在服务器端\",{\"1\":{\"2522\":1}}],[\"运行在jvm\",{\"1\":{\"765\":1}}],[\"运行目录\",{\"0\":{\"2473\":1}}],[\"运行的类\",{\"1\":{\"2015\":1}}],[\"运行的是编译后的\",{\"1\":{\"793\":1}}],[\"运行异常\",{\"0\":{\"1327\":1,\"1328\":1,\"1331\":1,\"1332\":1,\"1333\":1,\"1334\":1}}],[\"运行到这里\",{\"1\":{\"1180\":1}}],[\"运行时类的属性\",{\"1\":{\"2069\":1}}],[\"运行时类的对象\",{\"0\":{\"2036\":1}}],[\"运行时类\",{\"0\":{\"2035\":1}}],[\"运行时类型由实际赋给该变量的对象决定\",{\"1\":{\"1147\":1}}],[\"运行时结构不可变的语言就是静态语言\",{\"1\":{\"1999\":1}}],[\"运行时就不会产生\",{\"1\":{\"1703\":1}}],[\"运行时动态处理\",{\"1\":{\"1389\":1}}],[\"运行时被读取\",{\"1\":{\"1387\":1}}],[\"运行时出现了异常\",{\"1\":{\"1356\":1}}],[\"运行时异常不会报编译时错误\",{\"1\":{\"1361\":1}}],[\"运行时异常的排查\",{\"0\":{\"1356\":1}}],[\"运行时异常\",{\"0\":{\"1325\":1},\"1\":{\"1323\":1,\"1347\":1,\"1360\":1}}],[\"运行时才会发生\",{\"1\":{\"1323\":1}}],[\"运行时执行的是右边\",{\"1\":{\"1150\":1}}],[\"运行看右边\",{\"1\":{\"1147\":1}}],[\"运行class文件时\",{\"1\":{\"797\":1}}],[\"运行代码时可能会报错\",{\"1\":{\"2976\":1}}],[\"运行代码\",{\"0\":{\"793\":1}}],[\"运行环境\",{\"1\":{\"776\":1}}],[\"运行堆栈信息\",{\"1\":{\"246\":1}}],[\"运行报错\",{\"1\":{\"201\":1}}],[\"运行当前工程时会使用依赖的jar包\",{\"1\":{\"201\":1}}],[\"运行\",{\"0\":{\"191\":1},\"1\":{\"790\":1,\"1368\":1,\"1501\":1}}],[\"运行main方法就可以启动项目\",{\"1\":{\"103\":1}}],[\"运行启动类时会运行当前工程的内容\",{\"1\":{\"201\":1}}],[\"运行启动类\",{\"1\":{\"86\":1}}],[\"并启动所有节点\",{\"1\":{\"3225\":1}}],[\"并上传到服务器的\",{\"1\":{\"3046\":1}}],[\"并指明排序方式\",{\"1\":{\"3009\":1}}],[\"并指定cookie存在的时间\",{\"1\":{\"2822\":1}}],[\"并指定cookie存活时间\",{\"1\":{\"2805\":1}}],[\"并指定跳转的页面\",{\"1\":{\"363\":1}}],[\"并手动设置一个\",{\"1\":{\"2980\":1}}],[\"并针对price进行分组\",{\"1\":{\"2955\":1}}],[\"并对访问量进行升序排列\",{\"1\":{\"3097\":1}}],[\"并对这些信息进行多维度的分析\",{\"1\":{\"3027\":1}}],[\"并对category字段里的米字进行高亮显示\",{\"1\":{\"2960\":1}}],[\"并对collection的很多方法进行了重载\",{\"1\":{\"693\":1,\"1630\":1}}],[\"并对每个不同的单词赋予唯一的单词编号\",{\"1\":{\"2879\":1}}],[\"并调取seesion对象的值\",{\"1\":{\"2820\":1}}],[\"并调用service方法\",{\"1\":{\"2583\":1}}],[\"并调用start\",{\"1\":{\"1472\":1,\"1561\":1}}],[\"并调用重写的run方法\",{\"1\":{\"1491\":1}}],[\"并调用对象中的run方法\",{\"1\":{\"1470\":1}}],[\"并逐渐将其模块模块化\",{\"1\":{\"2739\":1}}],[\"并传入参数\",{\"1\":{\"2614\":1}}],[\"并完成了对象的创建\",{\"1\":{\"2589\":1}}],[\"并会将服务的响应返回给请求处\",{\"1\":{\"2553\":1}}],[\"并配置tomcat和servlet\",{\"1\":{\"2530\":1}}],[\"并自动调用server方法\",{\"1\":{\"2529\":1}}],[\"并重写接口中所有方法\",{\"1\":{\"2531\":1}}],[\"并重写所有方法\",{\"1\":{\"2529\":1}}],[\"并重写connectdb方法\",{\"1\":{\"2073\":1}}],[\"并重写compareto方法\",{\"1\":{\"1654\":1}}],[\"并重写call\",{\"1\":{\"1559\":1}}],[\"并由web服务器运行servlet\",{\"1\":{\"2522\":1}}],[\"并进行初始化\",{\"1\":{\"3224\":1}}],[\"并进行一些操作\",{\"1\":{\"2560\":1,\"2567\":1}}],[\"并进行启动\",{\"1\":{\"2512\":1}}],[\"并进行基本的application配置\",{\"1\":{\"307\":1}}],[\"并输入<h1>hi\",{\"1\":{\"2510\":1}}],[\"并点击右边的\",{\"1\":{\"2509\":1}}],[\"并实现customerdao接口\",{\"1\":{\"2396\":1}}],[\"并实现一个接口\",{\"0\":{\"1382\":1}}],[\"并给占位符赋值\",{\"1\":{\"2352\":1,\"2355\":1}}],[\"并给对象属性赋值\",{\"1\":{\"1373\":1,\"1378\":1}}],[\"并接受数据库服务器返回的结果\",{\"1\":{\"2307\":1}}],[\"并统一放回到一个集合中返回\",{\"1\":{\"2219\":1}}],[\"并产生结果\",{\"1\":{\"2192\":1}}],[\"并做一些增强\",{\"1\":{\"2090\":1}}],[\"并声明producecloth方法用于生产服装\",{\"1\":{\"2078\":1}}],[\"并掉用user\",{\"1\":{\"2073\":1}}],[\"并能直接操作任意对象的内部属性及方法\",{\"1\":{\"1998\":1}}],[\"并能够将文件中的java基本数据类型和string数据读取还愿\",{\"1\":{\"1874\":1}}],[\"并获取返回值\",{\"1\":{\"2097\":1}}],[\"并获取请求的套接字对象\",{\"1\":{\"1977\":1}}],[\"并获取线程名\",{\"1\":{\"1480\":1}}],[\"并绑定到指定端口上\",{\"1\":{\"1973\":1}}],[\"并为每个字符规定了唯一确定的编号\",{\"1\":{\"1863\":1}}],[\"并使用1\",{\"1\":{\"3097\":1}}],[\"并使用了orm对象来处理查询的数据\",{\"1\":{\"2349\":1}}],[\"并使用一个名字命名\",{\"1\":{\"959\":1}}],[\"并使编码无国界\",{\"1\":{\"1863\":1}}],[\"并一一对应\",{\"1\":{\"1860\":1}}],[\"并通过用户认证连接副本集\",{\"1\":{\"3215\":1}}],[\"并通过order指定排序方式\",{\"1\":{\"2951\":1}}],[\"并通过war包部署\",{\"0\":{\"2466\":1}}],[\"并通过集合获取stream\",{\"1\":{\"2210\":1}}],[\"并通过\",{\"1\":{\"1773\":1}}],[\"并通过编号的方式对这些数据进行统一管理\",{\"1\":{\"959\":1}}],[\"并加载配置信息\",{\"0\":{\"1692\":1}}],[\"并加入ioc容器\",{\"1\":{\"274\":1}}],[\"并添加元素\",{\"1\":{\"1594\":1}}],[\"并释放同步监视器\",{\"1\":{\"1551\":1}}],[\"并释放自己占有的锁\",{\"1\":{\"1541\":1}}],[\"并释放锁\",{\"1\":{\"1526\":1,\"1556\":1}}],[\"并临时中止自己的执行\",{\"1\":{\"1501\":1}}],[\"并列执行的才是多线程\",{\"1\":{\"1461\":1}}],[\"并用这个符号表的索引对应实际的空间\",{\"1\":{\"1455\":1}}],[\"并用break根据条件退出循环\",{\"1\":{\"938\":1}}],[\"并把实现类的示例对象作为实参传入\",{\"1\":{\"2090\":1}}],[\"并把我们的变量名\",{\"1\":{\"1455\":1}}],[\"并把该\",{\"1\":{\"1389\":1}}],[\"并发效率会有所下降\",{\"1\":{\"2426\":1}}],[\"并发进程\",{\"1\":{\"1545\":1}}],[\"并发\",{\"1\":{\"1442\":1}}],[\"并发所有的文件修改都会触发热部署\",{\"1\":{\"148\":1}}],[\"并行流\",{\"0\":{\"2197\":1}}],[\"并行\",{\"1\":{\"1442\":1}}],[\"并行与并发\",{\"0\":{\"1442\":1}}],[\"并行执行多个线程\",{\"1\":{\"1439\":1}}],[\"并打印出来\",{\"1\":{\"1432\":2}}],[\"并测试枚举类的方法\",{\"0\":{\"1383\":1}}],[\"并需要重写接口中的方法\",{\"1\":{\"1382\":1}}],[\"并在下次请求时携带cookie\",{\"0\":{\"2802\":1}}],[\"并在下一次请求时携带cookie\",{\"1\":{\"2791\":1}}],[\"并在方法中判断请求方式是get还是post\",{\"1\":{\"2614\":1}}],[\"并在service方法中打印hello\",{\"1\":{\"2531\":1}}],[\"并在该方法中\",{\"1\":{\"2078\":1}}],[\"并在构造器中初始化\",{\"1\":{\"1372\":1}}],[\"并在生成的boot打包文件\",{\"1\":{\"237\":1}}],[\"并没有关闭数据库的物理连接\",{\"1\":{\"2421\":1}}],[\"并没有预装驱动\",{\"1\":{\"2287\":1}}],[\"并没有创建长度为10的数组\",{\"1\":{\"1621\":1}}],[\"并没有真正将异常处理掉\",{\"1\":{\"1353\":1}}],[\"并没有重新\",{\"1\":{\"1129\":1}}],[\"并抛出\",{\"1\":{\"1319\":1,\"1358\":1}}],[\"并易于维护\",{\"1\":{\"1317\":1}}],[\"并保存为静态属性\",{\"1\":{\"1240\":1}}],[\"并保存项目\",{\"1\":{\"81\":1}}],[\"并根据子类的需求创建不同的方法体\",{\"1\":{\"1122\":1}}],[\"并设置好编码\",{\"1\":{\"2648\":1}}],[\"并设置线程名\",{\"1\":{\"1480\":1}}],[\"并设置\",{\"1\":{\"1056\":1}}],[\"并设置新增文件的时机\",{\"1\":{\"257\":1}}],[\"并非真正的开启用户验证\",{\"1\":{\"3201\":1}}],[\"并非真正解决了异常\",{\"1\":{\"1315\":1}}],[\"并非替换关系\",{\"1\":{\"2426\":1}}],[\"并非在实例化类时确定\",{\"1\":{\"1734\":1}}],[\"并非一定是在高优先级线程之后才被调用\",{\"1\":{\"1488\":1}}],[\"并非专门用于结束循环的\",{\"1\":{\"948\":1}}],[\"并非是空数组过去的\",{\"1\":{\"569\":1,\"1808\":1}}],[\"并计算所有偶数的和及偶数的个数\",{\"1\":{\"941\":1}}],[\"并判断读入的正数和负数的个数\",{\"1\":{\"938\":1}}],[\"并创建以下三个账户\",{\"1\":{\"3194\":1}}],[\"并创建一个实现同样接口的类\",{\"1\":{\"2097\":1}}],[\"并创建一个rest风格的controller\",{\"1\":{\"85\":1}}],[\"并创建了数组groups和locals\",{\"1\":{\"756\":1}}],[\"并且进行启动\",{\"1\":{\"3223\":1}}],[\"并且当主库当掉时在不需要用户干预的情况下自动\",{\"1\":{\"3125\":1}}],[\"并且小于2000的文档\",{\"1\":{\"3102\":1}}],[\"并且每个单词都有对应的含有该单词的文档列表即倒排列表\",{\"1\":{\"2879\":1}}],[\"并且创建request对象传递到service方法\",{\"1\":{\"2590\":1}}],[\"并且两个都是接口\",{\"1\":{\"2588\":1}}],[\"并且两个对象的\",{\"1\":{\"1637\":1}}],[\"并且在关闭连接时不抛出sql异常\",{\"1\":{\"2434\":1}}],[\"并且在编译期间会进行语法检查\",{\"1\":{\"1406\":1}}],[\"并且使用dbutils能极大简化jdbc编码的工作量\",{\"1\":{\"2431\":1}}],[\"并且保证安全性\",{\"1\":{\"2426\":1}}],[\"并且该值会作为参数传给它\",{\"1\":{\"2257\":1}}],[\"并且可以避免空指针异常\",{\"1\":{\"2247\":1}}],[\"并且可由jvm读入\",{\"1\":{\"1406\":2}}],[\"并且是在程序运行时根据需要动态创建目标类的代理对象\",{\"1\":{\"2077\":1}}],[\"并且后跟\",{\"1\":{\"1966\":1}}],[\"并且它实现了datainput\",{\"1\":{\"1880\":1}}],[\"并且没有释放锁l1的情况下\",{\"1\":{\"1546\":1}}],[\"并且具有更好的扩展性\",{\"1\":{\"1531\":1}}],[\"并且与\",{\"1\":{\"1404\":1}}],[\"并且\",{\"1\":{\"1402\":1,\"1923\":1}}],[\"并且main\",{\"1\":{\"1351\":1}}],[\"并且其他的开发者可以通过内部的jsp页面\",{\"1\":{\"1284\":1}}],[\"并且提供set\",{\"1\":{\"1282\":1}}],[\"并且不再判断是否满足case了\",{\"1\":{\"927\":1}}],[\"并且以\",{\"1\":{\"749\":1}}],[\"并且java\",{\"1\":{\"461\":1}}],[\"并取出指针指向的集合元素\",{\"1\":{\"677\":1,\"1592\":1}}],[\"并将报错信息忽略\",{\"1\":{\"2988\":1}}],[\"并将拆解后的数据报错到倒排索引当中\",{\"1\":{\"2941\":1}}],[\"并将查找的结果反馈给用户的检索方式\",{\"1\":{\"2852\":1}}],[\"并将jar包导入项目\",{\"1\":{\"2423\":1}}],[\"并将子集合全部转化为stream\",{\"1\":{\"2224\":1}}],[\"并将自己调用的方法名\",{\"1\":{\"2097\":1}}],[\"并将这些静态数据转换成方法区的运行时数据结构\",{\"1\":{\"2026\":1}}],[\"并将原有的数据复制过来\",{\"1\":{\"1676\":1}}],[\"并将数据加到elementdata\",{\"1\":{\"1621\":1}}],[\"并将此对象抛出\",{\"1\":{\"1318\":1}}],[\"并将交集返回到当前的集合中\",{\"1\":{\"666\":1}}],[\"并将差集从当前集合中移除\",{\"1\":{\"665\":1}}],[\"并继续向下执行代码\",{\"1\":{\"639\":1,\"760\":1}}],[\"并返回结果集\",{\"1\":{\"2349\":1,\"2352\":1,\"2355\":1,\"2365\":1}}],[\"并返回该行的数据\",{\"1\":{\"2340\":1}}],[\"并返回preparestatemet对象\",{\"1\":{\"2318\":1}}],[\"并返回一个新集合是\",{\"1\":{\"2224\":1}}],[\"并返回value\",{\"1\":{\"713\":1}}],[\"并返回读到的数据\",{\"1\":{\"581\":1}}],[\"并返回false\",{\"1\":{\"556\":1}}],[\"并提供了真的不同请求方式的请求方法\",{\"1\":{\"2560\":1,\"2567\":1}}],[\"并提供\",{\"1\":{\"529\":1}}],[\"并不重要\",{\"1\":{\"3105\":1}}],[\"并不是强制使用数据对象\",{\"1\":{\"2981\":1}}],[\"并不是所有的java代码\",{\"1\":{\"2523\":1}}],[\"并不是真正的关闭了链接\",{\"1\":{\"2384\":1}}],[\"并不是泛型方法\",{\"1\":{\"1730\":1}}],[\"并不是对象\",{\"1\":{\"1018\":1}}],[\"并不意味着只有当高优先级的线程执行完以后\",{\"1\":{\"1487\":1}}],[\"并不会提供异常信息\",{\"1\":{\"1915\":1}}],[\"并不会报异常\",{\"1\":{\"1810\":1}}],[\"并不会处理异常\",{\"1\":{\"1350\":1}}],[\"并不会去父类中查找\",{\"1\":{\"1135\":1}}],[\"并不提供实现体\",{\"1\":{\"1109\":1}}],[\"并不返回任何结果\",{\"1\":{\"730\":1}}],[\"并不包含当前的时间信息\",{\"1\":{\"464\":1}}],[\"并不常用\",{\"1\":{\"184\":1}}],[\"并填写增强的实体类作为泛型\",{\"1\":{\"361\":1}}],[\"并制作成独立的配置文件\",{\"1\":{\"231\":1}}],[\"并执行mongodb命令\",{\"1\":{\"3053\":1}}],[\"并执行相应的处理\",{\"1\":{\"1387\":1}}],[\"并执行其方法体\",{\"1\":{\"1268\":1}}],[\"并执行\",{\"1\":{\"198\":1}}],[\"并交给了spring的ioc容器\",{\"1\":{\"108\":1}}],[\"并安装\",{\"1\":{\"91\":1}}],[\"就有什么账号的权限\",{\"1\":{\"3206\":1}}],[\"就开启了登录认证\",{\"1\":{\"3203\":1}}],[\"就越可能获得多数成员的投票\",{\"1\":{\"3173\":1}}],[\"就越好\",{\"1\":{\"1651\":1}}],[\"就直接从索引返回结果\",{\"1\":{\"3122\":1}}],[\"就直接报错\",{\"1\":{\"868\":1}}],[\"就像sql数据库一样灵活\",{\"1\":{\"3036\":1}}],[\"就像我们的法律一样\",{\"1\":{\"1258\":1}}],[\"就被建立了\",{\"1\":{\"2785\":1}}],[\"就相当于发布了\",{\"1\":{\"2747\":1}}],[\"就成了一个jar包\",{\"1\":{\"2732\":1}}],[\"就只是声明持久层的接口\",{\"1\":{\"3232\":1}}],[\"就只需要按照如下格式来编写\",{\"1\":{\"2625\":1}}],[\"就只能在方法体内使用此形参\",{\"1\":{\"1106\":1}}],[\"就向数据库要求一个\",{\"1\":{\"2414\":1}}],[\"就修改配置文件\",{\"1\":{\"2362\":1}}],[\"就默认把列名当成别名\",{\"1\":{\"2354\":1}}],[\"就默认方法体种一定有返回值了\",{\"1\":{\"2116\":1}}],[\"就抛异常\",{\"1\":{\"2259\":1}}],[\"就类似于使用\",{\"1\":{\"2188\":1}}],[\"就ok了\",{\"1\":{\"2133\":1}}],[\"就算jdk支持新语法\",{\"1\":{\"2108\":1}}],[\"就算执行完了case匹配的表达式\",{\"1\":{\"927\":1}}],[\"就实例化并代理哪个类\",{\"1\":{\"2077\":1}}],[\"就确定下来了\",{\"1\":{\"2076\":1}}],[\"就作为class的一个实例\",{\"1\":{\"2013\":1}}],[\"就少了很多值无法用于表示字符\",{\"1\":{\"1863\":1}}],[\"就叫碰撞\",{\"1\":{\"1651\":1}}],[\"就添加失败\",{\"1\":{\"1642\":1}}],[\"就一定不会存在重复的数据\",{\"1\":{\"1642\":1}}],[\"就一定不会放到同一个位置\",{\"1\":{\"1642\":1}}],[\"就唤醒优先级高的那个\",{\"1\":{\"1551\":1}}],[\"就形成了线程的死锁\",{\"1\":{\"1540\":1}}],[\"就值就调用target的run方法\",{\"1\":{\"1493\":1}}],[\"就出抛出内存溢出的错误\",{\"1\":{\"1458\":1}}],[\"就称为\",{\"1\":{\"1652\":1}}],[\"就称为变量\",{\"1\":{\"1454\":1}}],[\"就称为是一个常量\",{\"1\":{\"1103\":1}}],[\"就处于不断变化的动态过程中\",{\"1\":{\"1437\":1}}],[\"就没有任何作用了\",{\"1\":{\"1406\":1}}],[\"就没用了\",{\"1\":{\"1406\":1}}],[\"就意味着该方法覆盖父类的方法\",{\"1\":{\"1406\":1}}],[\"就意味着\",{\"1\":{\"1405\":1}}],[\"就使用value表示\",{\"1\":{\"1399\":1}}],[\"就使用arraylist中重载的\",{\"1\":{\"697\":1}}],[\"就在es服务器中创建了名为shopping的索引\",{\"1\":{\"2884\":1}}],[\"就在控制台输出一行\",{\"1\":{\"1834\":1}}],[\"就在括号内加属性\",{\"1\":{\"1378\":1}}],[\"就在哪个\",{\"1\":{\"824\":1}}],[\"就绪\",{\"1\":{\"1368\":1,\"1501\":1}}],[\"就职状态\",{\"1\":{\"1368\":1}}],[\"就跳出当前的try\",{\"1\":{\"1340\":1}}],[\"就跳出switch\",{\"1\":{\"927\":1}}],[\"就进入catch中进行异常的处理\",{\"1\":{\"1340\":1}}],[\"就进行向下转型\",{\"1\":{\"1167\":1}}],[\"就考虑到错误的检测\",{\"1\":{\"1314\":1}}],[\"就采用数据类型的默认值\",{\"1\":{\"1301\":1}}],[\"就执行consumer接口的实现代码\",{\"1\":{\"2257\":1}}],[\"就执行中间操作链\",{\"1\":{\"2192\":1}}],[\"就执行一次非静态代码块\",{\"1\":{\"1280\":1}}],[\"就执行哪个子类\",{\"1\":{\"1252\":1}}],[\"就能方便地进行调用\",{\"1\":{\"2738\":1}}],[\"就能操作所有数据库\",{\"1\":{\"1265\":1}}],[\"就能编译\",{\"1\":{\"938\":1}}],[\"就自动去父类中寻找\",{\"1\":{\"1135\":1}}],[\"就代表了web目录下\",{\"1\":{\"2693\":1}}],[\"就代表了一个运行时类的属性\",{\"1\":{\"612\":1}}],[\"就代表一层文件目录\",{\"1\":{\"1089\":1}}],[\"就用this\",{\"1\":{\"1083\":1}}],[\"就优先调用\",{\"1\":{\"1047\":1}}],[\"就将各个国家的文字用数字来表示\",{\"1\":{\"1860\":1}}],[\"就将栈中储存的数组第一个元素的地址替换掉\",{\"1\":{\"979\":1}}],[\"就将数组在栈中储存的k=v出栈\",{\"1\":{\"979\":1}}],[\"就将赋的值替换掉元素的默认值\",{\"1\":{\"979\":1}}],[\"就获取了父类中声明的属性和方法\",{\"1\":{\"1143\":1}}],[\"就获取了直接父类以及所有间接父类中声明的属性和方法\",{\"1\":{\"1115\":1}}],[\"就获取默认值\",{\"1\":{\"972\":1}}],[\"就获取绝对路径\",{\"1\":{\"541\":1}}],[\"就构成了嵌套循环\",{\"1\":{\"951\":1}}],[\"就行\",{\"1\":{\"937\":1}}],[\"就行了\",{\"1\":{\"916\":1}}],[\"就补1\",{\"1\":{\"909\":1}}],[\"就无法获取jseesionid了\",{\"1\":{\"2821\":1}}],[\"就无法实现多次请求之间的数据共享\",{\"1\":{\"2788\":1}}],[\"就无法通过request对象进行共享数据\",{\"1\":{\"2664\":1}}],[\"就无法回滚了\",{\"1\":{\"2383\":1}}],[\"就无法直接使用map了\",{\"1\":{\"2224\":1}}],[\"就无法直接跳转到目标代码了\",{\"1\":{\"810\":1}}],[\"就无法访问它了\",{\"1\":{\"1524\":1}}],[\"就无法进行创建\",{\"1\":{\"554\":1,\"1770\":1}}],[\"就看谁在上面\",{\"1\":{\"782\":1}}],[\"就看用什么方法创建\",{\"1\":{\"554\":1,\"1770\":1}}],[\"就足以具有转义的作用\",{\"1\":{\"737\":1}}],[\"就接受object类\",{\"1\":{\"695\":1}}],[\"就他有顺序\",{\"1\":{\"682\":1,\"683\":1,\"684\":1,\"685\":1}}],[\"就他用顺序\",{\"1\":{\"681\":1}}],[\"就返回null\",{\"1\":{\"715\":1}}],[\"就返回false\",{\"1\":{\"702\":1}}],[\"就返回true\",{\"1\":{\"663\":1}}],[\"就返回空数组\",{\"1\":{\"546\":1,\"547\":1}}],[\"就必须在关闭连接前\",{\"1\":{\"2384\":1}}],[\"就必须指定舍入策略\",{\"1\":{\"535\":1}}],[\"就必须指定参数3\",{\"1\":{\"534\":1}}],[\"就必须显示的指定舍入策略\",{\"1\":{\"535\":1}}],[\"就次方\",{\"1\":{\"521\":1}}],[\"就按名字字母进行排序\",{\"1\":{\"500\":1}}],[\"就需要flush一次\",{\"1\":{\"1899\":1,\"1901\":1}}],[\"就需要定义多个不同泛型类型的遍历方法\",{\"1\":{\"1747\":1}}],[\"就需要声明在finally中\",{\"1\":{\"1342\":1}}],[\"就需要在类中对tostring进行自定义重写\",{\"1\":{\"1186\":1}}],[\"就需要在集合外定义comparator接口的方法或在集合内实现\",{\"1\":{\"494\":1}}],[\"就需要创建很多个除了数据类型\",{\"1\":{\"1152\":1}}],[\"就需要加个l告诉java分配8个byte的内存\",{\"1\":{\"850\":1}}],[\"就需要先定义变量类型\",{\"1\":{\"850\":1}}],[\"就需要重新编译\",{\"1\":{\"792\":1}}],[\"就需要手动输入空格或换行符\",{\"1\":{\"576\":1}}],[\"就需要实现comparable接口\",{\"1\":{\"496\":1}}],[\"就需要比较对象的大小\",{\"1\":{\"491\":1}}],[\"就需要处理异常\",{\"1\":{\"426\":1}}],[\"就需要进行异常处理\",{\"1\":{\"426\":1}}],[\"就需要额外的配置\",{\"1\":{\"348\":1}}],[\"就需要考虑优先级了\",{\"1\":{\"117\":1}}],[\"就是以replicaset的方式连接mongodb\",{\"1\":{\"3225\":1}}],[\"就是刚新加入的仲裁节点\",{\"1\":{\"3160\":1}}],[\"就是多了个replsetname\",{\"1\":{\"3142\":1}}],[\"就是主节点\",{\"1\":{\"3131\":1,\"3157\":1}}],[\"就是compass内置的\",{\"1\":{\"3057\":1}}],[\"就是collection接口中方法的使用\",{\"1\":{\"1653\":1}}],[\"就是要添加的文档数据\",{\"1\":{\"2980\":1}}],[\"就是数据全变了\",{\"1\":{\"2909\":1}}],[\"就是\",{\"1\":{\"2763\":2}}],[\"就是文件的名称\",{\"1\":{\"2469\":1}}],[\"就是为数据库连接建立一个\",{\"1\":{\"2416\":1}}],[\"就是为容器而生\",{\"1\":{\"1587\":1}}],[\"就是二进制数据\",{\"1\":{\"2359\":1}}],[\"就是servlet\",{\"1\":{\"2523\":1}}],[\"就是system\",{\"1\":{\"2156\":1}}],[\"就是springboot3了\",{\"1\":{\"314\":1}}],[\"就是上章写的在动态代理里写一些通用的代码\",{\"1\":{\"2099\":1}}],[\"就是代理的意义\",{\"1\":{\"2085\":1}}],[\"就是被代理类user\",{\"1\":{\"2073\":1}}],[\"就是动态性\",{\"1\":{\"2003\":1}}],[\"就是把上面两个方法结合起来\",{\"1\":{\"1978\":1}}],[\"就是accept\",{\"1\":{\"1976\":1}}],[\"就是追加写\",{\"1\":{\"1890\":1}}],[\"就是允许在定义类\",{\"1\":{\"1700\":1}}],[\"就是使用comparetor接口进行排序\",{\"1\":{\"1658\":1}}],[\"就是使用的collection中的addall\",{\"1\":{\"698\":1}}],[\"就是使用的collection的add\",{\"1\":{\"697\":1}}],[\"就是取代数组\",{\"1\":{\"1576\":1}}],[\"就是内存\",{\"1\":{\"1450\":1}}],[\"就是对jdbc中一些列基本常见的操作的封装\",{\"1\":{\"2394\":1}}],[\"就是对数据进行操作\",{\"1\":{\"1448\":1}}],[\"就是对象的多态性\",{\"1\":{\"1147\":1}}],[\"就是支持多线程的\",{\"1\":{\"1439\":1}}],[\"就是来指定\",{\"1\":{\"1412\":1}}],[\"就是指定\",{\"1\":{\"1409\":1}}],[\"就是不同\",{\"1\":{\"1406\":1}}],[\"就是方法的默认实现\",{\"1\":{\"1273\":1}}],[\"就是接口可以直接掉用的方法\",{\"1\":{\"1272\":1}}],[\"就是很典型的单例模式\",{\"1\":{\"1243\":1}}],[\"就是采取一定的方法保证在整个的软件系统中\",{\"1\":{\"1239\":1}}],[\"就是静态方法\",{\"1\":{\"1232\":1}}],[\"就是在内存上进行的二进制bit位的运算\",{\"1\":{\"907\":1}}],[\"就是从main方法开始运行的\",{\"1\":{\"797\":1}}],[\"就是集合的元素\",{\"1\":{\"651\":1}}],[\"就是构造器参数所属的class\",{\"1\":{\"602\":1,\"2038\":1}}],[\"就是比较器里的自然排序接口\",{\"1\":{\"495\":1}}],[\"就是mysql驱动升级到8以后要求强制配置时区\",{\"1\":{\"277\":1}}],[\"就不用配置artifacts\",{\"1\":{\"2487\":1}}],[\"就不用在单独安装jre了\",{\"1\":{\"777\":1}}],[\"就不再执行\",{\"1\":{\"1350\":1}}],[\"就不需要导入了\",{\"1\":{\"1096\":1}}],[\"就不需要使用return\",{\"1\":{\"1029\":1}}],[\"就不能再被调用\",{\"1\":{\"1346\":1}}],[\"就不能再调用next方法了\",{\"1\":{\"677\":1,\"1592\":1}}],[\"就不能修改\",{\"1\":{\"961\":1}}],[\"就不存在整合的概念了\",{\"1\":{\"265\":1}}],[\"就不会开启tomcat了\",{\"1\":{\"110\":1}}],[\"就要将输入写入数据库一次\",{\"1\":{\"2377\":1}}],[\"就要将日志写入文件\",{\"1\":{\"255\":1}}],[\"就要executeupdate一次\",{\"1\":{\"2374\":1}}],[\"就要创建一次sql\",{\"1\":{\"2372\":1}}],[\"就要用string类\",{\"1\":{\"2152\":1}}],[\"就要用到属性校验了\",{\"1\":{\"173\":1}}],[\"就要通过invoke方法的参数\",{\"1\":{\"2087\":1}}],[\"就要跟之前添加的每一个数据进行equals比对\",{\"1\":{\"1641\":1}}],[\"就要对对象进行存储\",{\"1\":{\"1572\":1}}],[\"就要吧注解的成员变量写成数组的形式\",{\"1\":{\"1419\":1}}],[\"就要手动的加上super\",{\"1\":{\"1135\":1}}],[\"就要针对性的结束进程了\",{\"1\":{\"202\":1}}],[\"就会开始重新选举\",{\"1\":{\"3175\":1}}],[\"就会携带cookie\",{\"1\":{\"2820\":1}}],[\"就会被\",{\"1\":{\"2709\":1}}],[\"就会被抛出\",{\"1\":{\"1350\":1}}],[\"就会调用事先准备好的方法执行操作\",{\"1\":{\"2709\":1}}],[\"就会执行放行前的逻辑\",{\"1\":{\"2699\":1}}],[\"就会执行一次\",{\"1\":{\"1033\":1}}],[\"就会给浏览器响应一个302的状态码+location的一个访问资源b的路径\",{\"1\":{\"2658\":1}}],[\"就会引发请求静态资源的时候没有走默认的而是走了自定义的servlet类\",{\"1\":{\"2577\":1}}],[\"就会自动的调用如下的方法\",{\"1\":{\"2095\":1}}],[\"就会唤醒所有等待的线程\",{\"1\":{\"1551\":1}}],[\"就会唤醒被wait的一个线程\",{\"1\":{\"1551\":1}}],[\"就会走完所有循环\",{\"1\":{\"1514\":1}}],[\"就会出现多打印票的状况\",{\"1\":{\"1507\":1}}],[\"就会出现打印的是同一张票的情况\",{\"1\":{\"1507\":1}}],[\"就会出现乱码\",{\"1\":{\"855\":1}}],[\"就会按顺序加载这些内容\",{\"1\":{\"1446\":1}}],[\"就会生成一个对应异常类的对象\",{\"1\":{\"1340\":1}}],[\"就会在后台自动创建一个对应异常类的实例对象并抛出\",{\"1\":{\"1319\":1}}],[\"就会在异常代码处生成一个对应异常类的对象\",{\"1\":{\"1318\":1}}],[\"就会转换为true\",{\"1\":{\"1193\":1}}],[\"就会加载所有父类中声明的属性\",{\"1\":{\"1143\":1}}],[\"就会变成负数\",{\"1\":{\"909\":1}}],[\"就会报indexoutofboundsexception\",{\"1\":{\"702\":1}}],[\"就会报异常\",{\"1\":{\"699\":1}}],[\"就会报错\",{\"1\":{\"183\":1,\"1140\":1,\"2976\":1}}],[\"就会产生一个iterator迭代器对象\",{\"1\":{\"674\":1}}],[\"就会取到错误的字符\",{\"1\":{\"569\":1,\"1808\":1}}],[\"就会导入对应的starter\",{\"1\":{\"99\":1}}],[\"就命令tomcat重新加载开发的文件就ok了\",{\"1\":{\"136\":1}}],[\"就可以为索引\",{\"1\":{\"2962\":1}}],[\"就可以为数组元素赋值了\",{\"1\":{\"987\":1}}],[\"就可以向索引\",{\"1\":{\"2898\":1}}],[\"就可以实现一次会话中多次请求之间的数据共享了\",{\"1\":{\"2813\":1}}],[\"就可以实现session域了\",{\"1\":{\"2675\":1}}],[\"就可以启动了\",{\"1\":{\"2512\":1}}],[\"就可以看到页面了\",{\"1\":{\"2510\":1}}],[\"就可以再创建一个tomcat模板了\",{\"1\":{\"2505\":1}}],[\"就可以采用构造器引用\",{\"1\":{\"2169\":1}}],[\"就可以认为告诉了表达式要用后面的方法替代接口中的方法\",{\"1\":{\"2151\":1}}],[\"就可以恢复成原来的java对象\",{\"1\":{\"1896\":1}}],[\"就可以确定他的数据类型了\",{\"1\":{\"1698\":1}}],[\"就可以解决该问题\",{\"1\":{\"1446\":1}}],[\"就可以抛出到调用处进行处理\",{\"1\":{\"1361\":1}}],[\"就可以用来处理get和post请求的业务逻辑\",{\"1\":{\"2566\":1}}],[\"就可以用\",{\"1\":{\"1338\":1}}],[\"就可以只修改getxxx内的代码逻辑即可\",{\"1\":{\"1286\":1}}],[\"就可以得到多重继承的效果\",{\"1\":{\"1256\":1}}],[\"就可以被继承\",{\"1\":{\"1206\":1}}],[\"就可以调用类中的方法\",{\"1\":{\"1189\":1}}],[\"就可以调用实例的compareto方法进行比较了\",{\"1\":{\"496\":1}}],[\"就可以通过调用这些方法来实现\",{\"1\":{\"1120\":1}}],[\"就可以直接连接上\",{\"1\":{\"3056\":1}}],[\"就可以直接实例化包中其他类\",{\"1\":{\"1087\":1}}],[\"就可以直接执行了\",{\"1\":{\"191\":1}}],[\"就可以使用代理对象取代源对象了\",{\"1\":{\"2085\":1}}],[\"就可以使用\",{\"1\":{\"1011\":1}}],[\"就可以使用springboot进行开发了\",{\"1\":{\"84\":1}}],[\"就可以动态获取配置的数据了\",{\"1\":{\"156\":1}}],[\"就可以查看该文件\",{\"1\":{\"94\":1}}],[\"就创建他有关的快捷笔记\",{\"1\":{\"1\":1}}],[\"ⅰ\",{\"0\":{\"84\":1,\"121\":1,\"155\":1,\"178\":1,\"188\":1,\"209\":1,\"224\":1,\"240\":1,\"269\":1,\"297\":1,\"315\":1,\"402\":1,\"436\":1,\"458\":1,\"491\":1,\"511\":1,\"539\":1,\"564\":1,\"584\":1,\"632\":1,\"653\":1,\"693\":1,\"730\":1,\"740\":1,\"774\":1,\"789\":1,\"817\":1,\"837\":1,\"890\":1,\"918\":1,\"958\":1,\"1001\":1,\"1021\":1,\"1051\":1,\"1077\":1,\"1111\":1,\"1146\":1,\"1174\":1,\"1221\":1,\"1245\":1,\"1275\":1,\"1297\":1,\"1310\":1,\"1322\":1,\"1349\":1,\"1367\":1,\"1385\":1,\"1434\":1,\"1460\":1,\"1504\":1,\"1558\":1,\"1571\":1,\"1586\":1,\"1609\":1,\"1632\":1,\"1660\":1,\"1697\":1,\"1713\":1,\"1736\":1,\"1759\":1,\"1795\":1,\"1825\":1,\"1840\":1,\"1867\":1,\"1912\":1,\"1930\":1,\"1950\":1,\"1980\":1,\"2024\":1,\"2036\":1,\"2071\":1,\"2110\":1,\"2132\":1,\"2147\":1,\"2187\":1,\"2246\":1,\"2262\":1,\"2286\":1,\"2306\":1,\"2393\":1,\"2411\":1,\"2430\":1,\"2445\":1,\"2477\":1,\"2528\":1,\"2544\":1,\"2569\":1,\"2581\":1,\"2595\":1,\"2634\":1,\"2650\":1,\"2670\":1,\"2708\":1,\"2730\":1,\"2753\":1,\"2767\":1,\"2784\":1,\"2833\":1,\"3021\":1,\"3039\":1,\"3053\":1,\"3059\":1,\"3070\":1,\"3089\":1,\"3104\":1,\"3124\":1,\"3136\":1,\"3163\":1,\"3192\":1,\"3218\":1}}],[\"文本索引\",{\"1\":{\"3107\":1}}],[\"文本查询\",{\"1\":{\"3028\":1}}],[\"文本\",{\"1\":{\"2684\":1,\"2731\":1}}],[\"文本文件也可以做为字节流进行io\",{\"1\":{\"1844\":1}}],[\"文本文件读取\",{\"0\":{\"1804\":1}}],[\"文本文件\",{\"1\":{\"1790\":1}}],[\"文字==字符集转码==>计算机能够识别的二进制\",{\"1\":{\"855\":1}}],[\"文件设计\",{\"0\":{\"3140\":1}}],[\"文件夹\",{\"1\":{\"3044\":1}}],[\"文件启动\",{\"1\":{\"2857\":1}}],[\"文件目录\",{\"1\":{\"2857\":1,\"3139\":1}}],[\"文件记录量达到数十万或数百万个甚至更多\",{\"1\":{\"2850\":1}}],[\"文件到一个文件\",{\"1\":{\"2731\":1}}],[\"文件可能存在于以下三个地方\",{\"1\":{\"2693\":1}}],[\"文件的时候自动创建的\",{\"1\":{\"2733\":1}}],[\"文件的内容中\",{\"1\":{\"2733\":1}}],[\"文件的工作路径\",{\"0\":{\"2693\":1}}],[\"文件的复制\",{\"0\":{\"1817\":1},\"1\":{\"1920\":1}}],[\"文件选择\",{\"1\":{\"2452\":1}}],[\"文件大小的限制\",{\"0\":{\"2362\":1}}],[\"文件结束符\",{\"1\":{\"1966\":1}}],[\"文件内容加上数字化签名\",{\"1\":{\"2735\":1}}],[\"文件内容\",{\"1\":{\"1834\":1}}],[\"文件内容和自动创建的一样\",{\"1\":{\"82\":1}}],[\"文件和目录\",{\"1\":{\"1760\":1}}],[\"文件和目录创建的路径和名字就是file对象的路径和名字\",{\"1\":{\"554\":1,\"1770\":1}}],[\"文件和文件目录路径的抽象表示形式\",{\"1\":{\"1760\":1}}],[\"文件复制开启\",{\"1\":{\"1444\":1}}],[\"文件中\",{\"1\":{\"1406\":2}}],[\"文件传输失败\",{\"1\":{\"1344\":1}}],[\"文件打开失败\",{\"1\":{\"1344\":1}}],[\"文件进行\",{\"1\":{\"790\":1}}],[\"文件进行编译\",{\"1\":{\"790\":1}}],[\"文件\",{\"1\":{\"790\":1,\"2326\":1,\"2468\":1,\"2733\":1,\"2825\":1}}],[\"文件对象\",{\"1\":{\"574\":1}}],[\"文件不存在会返回false\",{\"1\":{\"562\":1}}],[\"文件重命名\",{\"1\":{\"559\":1}}],[\"文件创建失败\",{\"1\":{\"555\":1}}],[\"文件创建成功\",{\"1\":{\"555\":1}}],[\"文件已存在\",{\"1\":{\"555\":1}}],[\"文件是可以没有后缀的\",{\"1\":{\"554\":1,\"1770\":1}}],[\"文件格式\",{\"0\":{\"115\":1}}],[\"文件名>\",{\"1\":{\"1989\":1}}],[\"文件名就是类名\",{\"1\":{\"803\":1}}],[\"文件名区分大小写\",{\"1\":{\"792\":1}}],[\"文件名不改\",{\"1\":{\"559\":1}}],[\"文件名\",{\"0\":{\"114\":1},\"1\":{\"574\":2,\"1800\":1,\"1812\":1,\"1821\":1,\"1990\":1,\"2302\":1}}],[\"文件坐标\",{\"1\":{\"95\":1}}],[\"文档键命名规范\",{\"0\":{\"3079\":1}}],[\"文档中还可以包含javascript代码\",{\"1\":{\"3034\":1}}],[\"文档的分页查询\",{\"0\":{\"3094\":1}}],[\"文档的插入\",{\"0\":{\"3070\":1}}],[\"文档的12字节的唯一\",{\"1\":{\"3034\":1}}],[\"文档的格式存储在磁盘上\",{\"1\":{\"3032\":1}}],[\"文档\",{\"1\":{\"3031\":1,\"3032\":2,\"3069\":1,\"3159\":1}}],[\"文档型数据库\",{\"1\":{\"3021\":1}}],[\"文档进行统计分析\",{\"1\":{\"2953\":1,\"3013\":1}}],[\"文档原信息\",{\"1\":{\"2907\":1,\"2925\":1}}],[\"文档查询\",{\"0\":{\"2921\":1,\"2989\":1,\"3088\":1},\"1\":{\"2904\":1}}],[\"文档相当于关系型数据库中的一行数据\",{\"1\":{\"2897\":1}}],[\"文档增删改\",{\"0\":{\"2897\":1,\"2979\":1,\"3069\":1}}],[\"文档删除状态\",{\"1\":{\"2893\":1}}],[\"文档id\",{\"1\":{\"2880\":2}}],[\"文档7的id\",{\"1\":{\"2877\":1}}],[\"文档4的id\",{\"1\":{\"2877\":1}}],[\"文档3的id\",{\"1\":{\"2877\":1}}],[\"文档2的id\",{\"1\":{\"2877\":1}}],[\"文档→单词\",{\"1\":{\"2877\":1}}],[\"文档矩阵是表达两者之间所具有的一种包含关系的概念模型\",{\"1\":{\"2871\":1}}],[\"文档矩阵\",{\"0\":{\"2871\":1},\"1\":{\"2876\":1}}],[\"文档标注\",{\"1\":{\"811\":1,\"812\":1}}],[\"文档注释是可以写标签的<\",{\"1\":{\"811\":1}}],[\"文档注释格式\",{\"0\":{\"809\":1}}],[\"文档注释可以用来生成api文档\",{\"1\":{\"808\":1}}],[\"文档注释\",{\"0\":{\"808\":1}}],[\"文档处理\",{\"1\":{\"57\":1}}],[\"文档分析\",{\"1\":{\"57\":1}}],[\"文档操作\",{\"1\":{\"57\":2}}],[\"文档迁移中\",{\"1\":{\"13\":1,\"14\":1,\"15\":1,\"16\":1,\"17\":1,\"18\":1,\"19\":1,\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"30\":1,\"41\":1,\"43\":1,\"45\":1,\"47\":1,\"49\":1,\"51\":1,\"53\":1,\"55\":1,\"56\":1,\"57\":1,\"62\":1,\"63\":1,\"64\":1,\"65\":1}}],[\"解压即可\",{\"1\":{\"3047\":1}}],[\"解压即可使用\",{\"1\":{\"2453\":1}}],[\"解压后需要在mongodb目录下新建目录和配置文件\",{\"1\":{\"3047\":1}}],[\"解压后\",{\"1\":{\"2857\":1}}],[\"解压后的驱动文件\",{\"1\":{\"2289\":1}}],[\"解压项目\",{\"1\":{\"81\":1}}],[\"解答\",{\"1\":{\"1493\":1}}],[\"解释\",{\"1\":{\"1272\":1,\"1273\":1}}],[\"解释运行器才会确定所要调用的具体方法\",{\"1\":{\"1159\":1}}],[\"解密解不出\",{\"1\":{\"855\":1}}],[\"解析\",{\"0\":{\"485\":1,\"2151\":1,\"2523\":1,\"2537\":1},\"1\":{\"482\":1,\"486\":1,\"1140\":1,\"1251\":1,\"1252\":1,\"2027\":1,\"2156\":1,\"2159\":1,\"2162\":1,\"2165\":1,\"2168\":1,\"2177\":1,\"3150\":1}}],[\"解码就是将byte\",{\"1\":{\"426\":1}}],[\"解码\",{\"1\":{\"426\":1,\"1843\":1}}],[\"解决的问题\",{\"0\":{\"3026\":1}}],[\"解决了上述问题\",{\"1\":{\"2615\":1}}],[\"解决了sql注入问题\",{\"1\":{\"2313\":1}}],[\"解决了statement的拼串问题\",{\"1\":{\"2313\":1}}],[\"解决如何高效的进行数据传输\",{\"1\":{\"1925\":1}}],[\"解决如何找到和定位主机\",{\"1\":{\"1925\":1}}],[\"解决获取数据元素时\",{\"1\":{\"1703\":1}}],[\"解决获取元素时强制类型转换的问题\",{\"0\":{\"1703\":1}}],[\"解决元素存储的安全性问题\",{\"1\":{\"1702\":1}}],[\"解决元素安全性问题\",{\"0\":{\"1702\":1}}],[\"解决懒汉式单例模式的线程安全问题\",{\"0\":{\"1521\":1}}],[\"解决特定的问题而用计算机语言编写的命令序列集合\",{\"1\":{\"1435\":2}}],[\"解决方法\",{\"0\":{\"1541\":1},\"1\":{\"1314\":1}}],[\"解决方案可以通过配置连接池使每个连接专用\",{\"1\":{\"291\":1}}],[\"解决方案\",{\"0\":{\"1508\":1,\"2614\":1,\"2629\":1},\"1\":{\"76\":1,\"1519\":1,\"1521\":1,\"2142\":1,\"2354\":1,\"2860\":1,\"2988\":1}}],[\"解决类命名冲突的问题\",{\"1\":{\"1087\":1}}],[\"解决乱码问题\",{\"1\":{\"855\":1}}],[\"解决\",{\"1\":{\"356\":1,\"357\":1,\"1269\":1,\"2460\":1,\"2461\":1,\"2547\":1,\"3161\":1}}],[\"会连接失败\",{\"1\":{\"3164\":1}}],[\"会连接这些ip\",{\"1\":{\"3164\":1}}],[\"会同时进行全量查询\",{\"1\":{\"3016\":1}}],[\"会按定义的顺序进行排序\",{\"1\":{\"2951\":1}}],[\"会返回\",{\"1\":{\"2942\":2,\"2946\":1}}],[\"会返回完整的类名\",{\"1\":{\"614\":1,\"622\":1,\"2045\":1}}],[\"会在内存中创建一个session对象\",{\"1\":{\"2820\":1}}],[\"会在当前目录下生成一个编译后的文件\",{\"1\":{\"792\":1}}],[\"会携带上cookie\",{\"1\":{\"2802\":1}}],[\"会包含main\",{\"1\":{\"2733\":1}}],[\"会用到一个contextloaderlistener\",{\"1\":{\"2722\":1}}],[\"会话数据储存在内存中\",{\"1\":{\"2805\":1}}],[\"会话追踪技术\",{\"0\":{\"2789\":1}}],[\"会话跟踪\",{\"0\":{\"2787\":1}}],[\"会话被建立后\",{\"1\":{\"2785\":1}}],[\"会话建立\",{\"1\":{\"2785\":1}}],[\"会话\",{\"0\":{\"2785\":1}}],[\"会话结束\",{\"1\":{\"2676\":1,\"2785\":1}}],[\"会话技术介绍\",{\"0\":{\"2784\":1}}],[\"会话技术\",{\"0\":{\"2783\":1},\"1\":{\"11\":1}}],[\"会解析response对象\",{\"1\":{\"2585\":1}}],[\"会对http请求中的数据进行解析并把解析结果存入到一个对象中\",{\"1\":{\"2584\":1}}],[\"会对数据的大小进行限制\",{\"1\":{\"2362\":1}}],[\"会创建request和response对象\",{\"1\":{\"2583\":1}}],[\"会创建一个内部缓冲区数组\",{\"1\":{\"1826\":1}}],[\"会把默认的覆盖掉\",{\"1\":{\"2577\":1}}],[\"会覆盖掉tomcat中的defaultservlet\",{\"1\":{\"2577\":1}}],[\"会覆盖掉defaultservlet\",{\"1\":{\"2577\":1}}],[\"会通过继承httpservlet\",{\"1\":{\"2561\":1}}],[\"会访问两种资源\",{\"1\":{\"2523\":1}}],[\"会导致tomcat选项中\",{\"1\":{\"2514\":1}}],[\"会导致其他对象调用此静态变量时\",{\"1\":{\"1227\":1}}],[\"会被放入web\",{\"1\":{\"2479\":1}}],[\"会被放到web\",{\"1\":{\"2479\":1}}],[\"会影响到其他项目\",{\"1\":{\"2468\":1}}],[\"会影响主线程\",{\"1\":{\"1441\":1}}],[\"会显示端口号和pid\",{\"1\":{\"2460\":1}}],[\"会显示所有跟sql相关的操作\",{\"1\":{\"348\":1}}],[\"会提示\",{\"1\":{\"2291\":1}}],[\"会生成不同类型的stream\",{\"1\":{\"2199\":1}}],[\"会生成一个或多个字节码文件\",{\"1\":{\"2013\":1}}],[\"会缓存一定的时间\",{\"1\":{\"2017\":1}}],[\"会将新条目附加到现有日志文件的末尾\",{\"1\":{\"3048\":1}}],[\"会将原有的数据内容覆盖\",{\"1\":{\"2910\":1}}],[\"会将sessionid储存到cookie中\",{\"1\":{\"2820\":1}}],[\"会将类加载到内存中\",{\"1\":{\"2014\":1}}],[\"会将获取的索引内容都当做字符串处理\",{\"1\":{\"640\":1,\"761\":1}}],[\"会出现异常\",{\"1\":{\"1969\":1}}],[\"会出现illegalmonitorstateexception异常\",{\"1\":{\"1554\":1}}],[\"会继续从上一次的地方下载\",{\"1\":{\"1892\":1}}],[\"会相应关闭内层节点流\",{\"1\":{\"1826\":1}}],[\"会无法解析\",{\"1\":{\"1790\":1}}],[\"会涉及到扩容问题\",{\"1\":{\"1676\":1}}],[\"会根据自己定义的排序方式进行排序\",{\"1\":{\"1655\":1}}],[\"会根据添加数据的顺序进行遍历\",{\"1\":{\"1654\":1}}],[\"会根据参数\",{\"1\":{\"1071\":1}}],[\"会调用集合元素的\",{\"1\":{\"1639\":1}}],[\"会抛异常\",{\"1\":{\"1599\":1}}],[\"会抛出nosuchelementexception异常\",{\"1\":{\"1597\":1}}],[\"会抛出异常\",{\"1\":{\"677\":1,\"1592\":1}}],[\"会抛出ioexception异常\",{\"1\":{\"573\":1}}],[\"会释放锁\",{\"1\":{\"1555\":1}}],[\"会释放本次获得的执行权\",{\"1\":{\"1481\":1}}],[\"会因争夺资源而陷入僵局\",{\"1\":{\"1544\":1}}],[\"会判断target变量是否有值\",{\"1\":{\"1493\":1}}],[\"会占用大量的内存空间\",{\"1\":{\"1457\":1}}],[\"会有运行时异常\",{\"1\":{\"1379\":1}}],[\"会获取异常对象\",{\"1\":{\"1341\":1}}],[\"会互相影响到对方\",{\"1\":{\"1303\":1}}],[\"会比对这个id\",{\"1\":{\"1910\":1}}],[\"会比对集合中的所有元素\",{\"1\":{\"720\":1}}],[\"会比较类中的相应属性是否都相等\",{\"1\":{\"1181\":1}}],[\"会从父类中查找\",{\"1\":{\"1084\":1}}],[\"会采用数据类型的默认值\",{\"1\":{\"1022\":1}}],[\"会每次循环都重复生命\",{\"1\":{\"933\":1}}],[\"会产生报错\",{\"1\":{\"2860\":1}}],[\"会产生java\",{\"1\":{\"1813\":1,\"1814\":1}}],[\"会产生\",{\"1\":{\"576\":1}}],[\"会产生ioexception异常\",{\"1\":{\"575\":1}}],[\"会产生filenotfoundexception异常\",{\"1\":{\"574\":1}}],[\"会报错\",{\"1\":{\"536\":1,\"825\":1,\"1120\":1,\"1419\":1,\"2896\":1,\"3204\":1}}],[\"会改变值的大小\",{\"1\":{\"535\":1}}],[\"会直接报错\",{\"1\":{\"933\":1,\"1030\":1}}],[\"会直接抛出异常\",{\"1\":{\"534\":1}}],[\"会直接改变源stringbuffer\",{\"1\":{\"449\":1}}],[\"会自动进行主节点的选举\",{\"1\":{\"3171\":1}}],[\"会自动进行扩容\",{\"1\":{\"446\":1}}],[\"会自动生成主键值\",{\"1\":{\"3074\":1}}],[\"会自动注册\",{\"1\":{\"2300\":1}}],[\"会自动的调用被代理类中同名的方法\",{\"1\":{\"2096\":1}}],[\"会自动将数据读入\",{\"1\":{\"1833\":1}}],[\"会自动创建此文件\",{\"1\":{\"1810\":1}}],[\"会自动识别java\",{\"1\":{\"783\":1}}],[\"会自动转为int\",{\"1\":{\"512\":1}}],[\"会自动下载一个项目压缩包\",{\"1\":{\"81\":1}}],[\"会存入字符串常量池\",{\"1\":{\"401\":1}}],[\"会进行转码\",{\"1\":{\"288\":1}}],[\"y为偶数时表示当前版本为稳定版\",{\"1\":{\"3040\":1}}],[\"y为奇数时表示当前版本为开发版\",{\"1\":{\"3040\":1}}],[\"yuan\",{\"1\":{\"2364\":1}}],[\"yum\",{\"1\":{\"787\":3}}],[\"yum安装\",{\"0\":{\"787\":1}}],[\"yield\",{\"1\":{\"1479\":1,\"1481\":2,\"1527\":1}}],[\"y运算时\",{\"1\":{\"1316\":1}}],[\"yyy\",{\"1\":{\"835\":1}}],[\"yyyy\",{\"1\":{\"123\":1,\"258\":2,\"262\":7,\"466\":1,\"470\":1,\"487\":2,\"488\":1,\"489\":1,\"2322\":1,\"2325\":1}}],[\"y\",{\"1\":{\"498\":3,\"787\":3,\"1180\":4,\"1662\":1,\"3034\":1,\"3040\":1}}],[\"yes\",{\"1\":{\"1278\":1,\"1339\":2,\"1378\":1}}],[\"year\",{\"1\":{\"470\":2,\"471\":2,\"472\":4,\"473\":2,\"474\":1}}],[\"yellow\",{\"1\":{\"262\":1,\"2893\":1}}],[\"you\",{\"1\":{\"417\":3,\"418\":3,\"419\":2,\"455\":1,\"1816\":1,\"2858\":1}}],[\"your\",{\"1\":{\"81\":1}}],[\"yaml配置项的主流配置方式是\",{\"1\":{\"129\":1,\"156\":1}}],[\"yaml配置语法\",{\"1\":{\"29\":1}}],[\"yaml语法规则\",{\"0\":{\"122\":1}}],[\"yaml是一种数据存储格式\",{\"1\":{\"120\":1}}],[\"yaml共存时\",{\"1\":{\"117\":1}}],[\"yml配置\",{\"0\":{\"3235\":1}}],[\"yml配置文件\",{\"1\":{\"118\":1,\"292\":1,\"2860\":1}}],[\"yml文件中添加mongodb的连接参数\",{\"1\":{\"3236\":1}}],[\"yml文件中进行基本配置\",{\"1\":{\"390\":1}}],[\"yml文件中的变量引用\",{\"0\":{\"125\":1}}],[\"yml文件\",{\"1\":{\"216\":1}}],[\"yml文件进行设定哪些文件不参与热部署操作\",{\"1\":{\"150\":1}}],[\"yml语法\",{\"0\":{\"120\":1}}],[\"yml格式\",{\"1\":{\"115\":1}}],[\"yml和yaml是一回事\",{\"1\":{\"115\":1}}],[\"yml\",{\"0\":{\"224\":1,\"227\":1},\"1\":{\"115\":1,\"117\":1,\"150\":1,\"198\":1,\"199\":1,\"216\":1,\"219\":1,\"228\":4,\"231\":3,\"271\":1,\"281\":1,\"307\":1,\"310\":1,\"313\":3}}],[\"打jar包\",{\"0\":{\"2742\":1}}],[\"打开浏览器输入地址\",{\"1\":{\"2858\":1}}],[\"打开浏览器后要访问的项目目录\",{\"1\":{\"2502\":1}}],[\"打开模块设置\",{\"1\":{\"2525\":1}}],[\"打开窗口\",{\"1\":{\"2505\":1}}],[\"打开tomcat\",{\"0\":{\"2498\":1}}],[\"打开project\",{\"1\":{\"2485\":1,\"2495\":1,\"2515\":1}}],[\"打开连接到socket的输入\",{\"1\":{\"1969\":1}}],[\"打开\",{\"1\":{\"1920\":1}}],[\"打开以便读取和\",{\"1\":{\"1886\":2}}],[\"打开以便读取和写入\",{\"1\":{\"1886\":1}}],[\"打开springboot\",{\"1\":{\"81\":1}}],[\"打印操作的结果\",{\"1\":{\"2984\":1}}],[\"打印参数\",{\"1\":{\"2154\":1}}],[\"打印的结果\",{\"1\":{\"2993\":1,\"3006\":1,\"3008\":1,\"3015\":1}}],[\"打印的所有字符都使用平台的默认字符编码转换为字节\",{\"1\":{\"1872\":1}}],[\"打印的是内存地址\",{\"1\":{\"642\":1}}],[\"打印流\",{\"0\":{\"1871\":1}}],[\"打印结果如下\",{\"1\":{\"2992\":1}}],[\"打印结果\",{\"0\":{\"3011\":1},\"1\":{\"1654\":1,\"2991\":1,\"2997\":1,\"3000\":1,\"3003\":1,\"3019\":1}}],[\"打印详细异常\",{\"1\":{\"1339\":1,\"1341\":1}}],[\"打印机\",{\"1\":{\"1257\":1}}],[\"打印对象\",{\"1\":{\"1176\":1}}],[\"打印读取的字符数组\",{\"1\":{\"566\":1}}],[\"打印控制台\",{\"1\":{\"262\":1}}],[\"打包格式选tgz\",{\"1\":{\"3046\":1}}],[\"打包web项目时\",{\"1\":{\"2526\":1}}],[\"打包程序中个别文件内容不同\",{\"1\":{\"196\":1}}],[\"打包后可以部署的项目\",{\"0\":{\"2479\":1}}],[\"打包后所包含的内容不同\",{\"1\":{\"196\":1}}],[\"打包后文件的大小不同\",{\"1\":{\"196\":1}}],[\"打包后会产生一个与工程名类似的jar文件\",{\"1\":{\"190\":1}}],[\"打包\",{\"0\":{\"190\":1},\"1\":{\"189\":1}}],[\"打包方式选择jar\",{\"1\":{\"71\":1}}],[\"打包与发布\",{\"0\":{\"187\":1},\"1\":{\"29\":1}}],[\"输入账户名密码即可\",{\"1\":{\"3221\":1}}],[\"输入指令查看所有的用户信息\",{\"1\":{\"3198\":1}}],[\"输入查看数据库的指令\",{\"1\":{\"3148\":1}}],[\"输入查询语句\",{\"1\":{\"2918\":1}}],[\"输入url\",{\"1\":{\"3056\":1}}],[\"输入以下命令\",{\"1\":{\"3043\":1}}],[\"输入相同的\",{\"1\":{\"2910\":1}}],[\"输入字符流\",{\"1\":{\"1777\":1}}],[\"输入流与输出流的方法\",{\"0\":{\"1793\":1}}],[\"输入流\",{\"0\":{\"1783\":1},\"1\":{\"1775\":1}}],[\"输入\",{\"1\":{\"1774\":1,\"1777\":1}}],[\"输入输出流\",{\"1\":{\"1342\":1}}],[\"输入不匹配异常\",{\"0\":{\"1333\":1}}],[\"输入的是关键字\",{\"1\":{\"2869\":1}}],[\"输入的数据类型不匹配\",{\"1\":{\"1658\":1}}],[\"输入的类型不匹配\",{\"1\":{\"1657\":1,\"1688\":1}}],[\"输入的不是数据而是字符等\",{\"1\":{\"1316\":1}}],[\"输入的负数个数为\",{\"1\":{\"938\":1}}],[\"输入的正数个数为\",{\"1\":{\"938\":1}}],[\"输入为0时结束程序\",{\"1\":{\"938\":1}}],[\"输入数据时如果输入的值超过了进制或者超过了数据类型的范围\",{\"1\":{\"640\":1,\"761\":1}}],[\"输入完毕后\",{\"1\":{\"639\":2,\"760\":2}}],[\"输入换行符\",{\"0\":{\"1835\":1},\"1\":{\"582\":1}}],[\"输入启动命令后\",{\"1\":{\"210\":1}}],[\"输入要隐藏的文件名\",{\"1\":{\"79\":1}}],[\"输出内容\",{\"1\":{\"2226\":1}}],[\"输出了所有person类的属性\",{\"1\":{\"2044\":1}}],[\"输出结果\",{\"0\":{\"2042\":1},\"1\":{\"2663\":1}}],[\"输出可序列化对象\",{\"1\":{\"1899\":1,\"1901\":1}}],[\"输出ascii字符\",{\"1\":{\"1873\":1}}],[\"输出add\",{\"1\":{\"1128\":1}}],[\"输出操作\",{\"1\":{\"1810\":1}}],[\"输出操作以\",{\"1\":{\"1773\":1}}],[\"输出字符流\",{\"1\":{\"1777\":1}}],[\"输出流的练习\",{\"0\":{\"1870\":1}}],[\"输出流\",{\"0\":{\"1786\":1},\"1\":{\"1761\":1,\"1775\":1}}],[\"输出\",{\"1\":{\"1383\":1,\"1774\":1,\"1777\":1}}],[\"输出标识符代表的对象名\",{\"1\":{\"1383\":1}}],[\"输出的都是mm\",{\"1\":{\"1607\":1}}],[\"输出的都是\",{\"1\":{\"1606\":1}}],[\"输出的就是类名和类的属性\",{\"1\":{\"1186\":1}}],[\"输出的语法就是slf4j的语法\",{\"1\":{\"263\":1}}],[\"输出功能的类\",{\"1\":{\"1090\":1}}],[\"输出99乘法表\",{\"0\":{\"955\":1}}],[\"输出5行\",{\"1\":{\"954\":1}}],[\"输出星星\",{\"0\":{\"954\":1}}],[\"输出偶数的个数\",{\"1\":{\"933\":1}}],[\"输出所有偶数的和\",{\"1\":{\"933\":1}}],[\"输出语句\",{\"0\":{\"799\":1}}],[\"输出到文件\",{\"1\":{\"262\":2}}],[\"输出到控制台\",{\"1\":{\"262\":1}}],[\"输出调试信息\",{\"1\":{\"248\":1}}],[\"输出测试报告\",{\"1\":{\"22\":1}}],[\"输出需求调研文档\",{\"1\":{\"22\":1}}],[\"→\",{\"1\":{\"79\":2}}],[\"影响目录观感\",{\"1\":{\"79\":1}}],[\"在副本集初始化之前\",{\"1\":{\"3224\":1}}],[\"在连接的时候\",{\"1\":{\"3221\":1}}],[\"在连接中可进行大数据量的传输\",{\"1\":{\"1956\":1}}],[\"在角色定义时可以包含一个或多个已存在的角色\",{\"1\":{\"3184\":1}}],[\"在对用户分配\",{\"1\":{\"3182\":1}}],[\"在对象序列化后\",{\"1\":{\"1910\":1}}],[\"在获得票数的时候\",{\"1\":{\"3173\":1}}],[\"在承载数据的节点中\",{\"1\":{\"3127\":1}}],[\"在集合上通过createindex方法创建索引\",{\"1\":{\"3110\":1}}],[\"在集合类或接口中凡是定义类或接口时\",{\"1\":{\"1711\":1}}],[\"在分片集群中\",{\"1\":{\"3109\":1}}],[\"在文档的单个字段上创建用户定义的升序\",{\"1\":{\"3105\":1}}],[\"在文件中编写配置项\",{\"1\":{\"2469\":1}}],[\"在文件内容末尾追加内容\",{\"1\":{\"1797\":1}}],[\"在linux上也不用安装\",{\"1\":{\"3047\":1}}],[\"在linux中\",{\"1\":{\"553\":1}}],[\"在解压目录中新建\",{\"1\":{\"3044\":1}}],[\"在解压的目录中\",{\"1\":{\"3041\":1}}],[\"在软件的bin目录\",{\"1\":{\"3043\":1}}],[\"在软件开发中实现一个算法时\",{\"1\":{\"1250\":1}}],[\"在请求条件中\",{\"1\":{\"2948\":1,\"2951\":1}}],[\"在请求体中设置查询条件\",{\"1\":{\"2993\":1}}],[\"在请求体中\",{\"1\":{\"2918\":1}}],[\"在服务器启动后\",{\"1\":{\"2823\":1}}],[\"在服务器正常关闭之前\",{\"1\":{\"2823\":1}}],[\"在服务器端通过request\",{\"1\":{\"2675\":1}}],[\"在服务端的bservlet获取到相同的session对象\",{\"1\":{\"2813\":1}}],[\"在服务端的aservlet获取一个session对象\",{\"1\":{\"2813\":1}}],[\"在浏览器输入地址\",{\"1\":{\"2860\":1}}],[\"在浏览器和服务器之间\",{\"1\":{\"2785\":1}}],[\"在浏览器中输入\",{\"1\":{\"2510\":1,\"2655\":1}}],[\"在一些生产环境中\",{\"1\":{\"2850\":1}}],[\"在一次会话的多次请求间共享数据\",{\"1\":{\"2812\":1}}],[\"在一次会话中可以包含多次请求和响应\",{\"1\":{\"2785\":1}}],[\"在一个类中的访问机制\",{\"1\":{\"1015\":1}}],[\"在一个java源文件中可以声明多个class\",{\"1\":{\"796\":1}}],[\"在一个yaml文件中\",{\"1\":{\"224\":1}}],[\"在网络中传输数据\",{\"1\":{\"2769\":1}}],[\"在网络中的唯一标识\",{\"1\":{\"2449\":1}}],[\"在自己新建的项目工程中\",{\"1\":{\"2741\":1}}],[\"在互联网通信过程中定义的一种文件数据类型\",{\"1\":{\"2684\":1}}],[\"在第一次调用request\",{\"1\":{\"2676\":1}}],[\"在第几行就输出几个\",{\"1\":{\"954\":1}}],[\"在范围内数据可以共享\",{\"1\":{\"2671\":1}}],[\"在转发请求的同时\",{\"1\":{\"2653\":1}}],[\"在测试乱码问题的代码时\",{\"1\":{\"2627\":1}}],[\"在后台接收的时候\",{\"1\":{\"2626\":1}}],[\"在后台推断出了参数的类型\",{\"1\":{\"2117\":1}}],[\"在发送的请求参数中如果有中文\",{\"1\":{\"2626\":1}}],[\"在destroy\",{\"1\":{\"2550\":1}}],[\"在druid中\",{\"1\":{\"2426\":1}}],[\"在配置tomcat的目标时\",{\"1\":{\"2518\":1}}],[\"在配置文件里开启日志\",{\"1\":{\"348\":1}}],[\"在配置文件中\",{\"1\":{\"258\":1}}],[\"在配置文件中开启日志文件\",{\"1\":{\"256\":1}}],[\"在右上角的下拉框中选择指定的tomcat模板\",{\"1\":{\"2512\":1}}],[\"在右边进行设置\",{\"1\":{\"2495\":1}}],[\"在弹出的页面中\",{\"1\":{\"2486\":1}}],[\"在<host>标签体中配置\",{\"1\":{\"2468\":1}}],[\"在返回给浏览器\",{\"1\":{\"2447\":1}}],[\"在webapps下创建项目\",{\"0\":{\"2465\":1}}],[\"在webapps下部署\",{\"0\":{\"2464\":1}}],[\"在web服务器软件中\",{\"1\":{\"2446\":1}}],[\"在windows中需要手动设置隐藏\",{\"1\":{\"553\":1}}],[\"在这个查询中\",{\"1\":{\"2435\":1}}],[\"在这里配置springboot版本\",{\"1\":{\"72\":1}}],[\"在较为完善的数据库连接池实现中\",{\"1\":{\"2419\":1}}],[\"在减少系统消耗的基础上\",{\"1\":{\"2419\":1}}],[\"在主程序\",{\"1\":{\"2413\":1}}],[\"在主配置文件中指定要引入哪个环境的配置文件\",{\"1\":{\"229\":1}}],[\"在getforlist和getvalue方法中\",{\"1\":{\"2401\":1}}],[\"在代码中加载配置文件\",{\"1\":{\"2301\":1}}],[\"在代码块内定义\",{\"1\":{\"828\":1}}],[\"在查看mysql\",{\"1\":{\"2291\":1}}],[\"在支持函数式编程的语言了\",{\"1\":{\"2142\":1}}],[\"在servlet中有一个servletcontext对象\",{\"1\":{\"2677\":1}}],[\"在servlet实现类的\",{\"1\":{\"2571\":1}}],[\"在servlet实例化之后\",{\"1\":{\"2548\":1}}],[\"在service方法中\",{\"1\":{\"2583\":1}}],[\"在sdk选项中切换指定的sdk版本\",{\"1\":{\"2107\":1}}],[\"在springboot中整合mongodb就需要添加spring\",{\"1\":{\"3233\":1}}],[\"在springboot中读取maven设置的环境即可\",{\"1\":{\"235\":1}}],[\"在springboot项目的bom\",{\"1\":{\"92\":1}}],[\"在此之前先了解下正排索引\",{\"1\":{\"2866\":1}}],[\"在此方法中\",{\"1\":{\"2097\":1}}],[\"在此时间之内\",{\"1\":{\"2017\":1}}],[\"在此模式中\",{\"1\":{\"749\":1}}],[\"在运行时处理注解\",{\"1\":{\"2001\":1}}],[\"在运行时调用任意一个对象的成员变量和方法\",{\"1\":{\"2001\":1}}],[\"在运行时获取泛型信息\",{\"1\":{\"2001\":1}}],[\"在运行时判断任意一个类所具有的成员变量和方法\",{\"1\":{\"2001\":1}}],[\"在运行时判断任意一个对象所属的类\",{\"1\":{\"2001\":1}}],[\"在运行时构造任意一个类的对象\",{\"1\":{\"2001\":1}}],[\"在运行时代码可以根据某些条件改变自身结构\",{\"1\":{\"1999\":1}}],[\"在运行时有效\",{\"1\":{\"1411\":1}}],[\"在接收端\",{\"1\":{\"1984\":1}}],[\"在数据表实现类继承basedao时\",{\"1\":{\"2403\":1}}],[\"在数据表的实现类中\",{\"1\":{\"2402\":1}}],[\"在数据报中包含了发送端的ip地址和端口号以及接收端的ip地址和端口号\",{\"1\":{\"1981\":1}}],[\"在数组中查询指定元素\",{\"1\":{\"646\":1}}],[\"在制定协议时\",{\"1\":{\"1952\":1}}],[\"在指针位置进行写入\",{\"0\":{\"1891\":1}}],[\"在指定的millitime毫秒时间内\",{\"1\":{\"1479\":1}}],[\"在指定位置插入内容\",{\"1\":{\"455\":1}}],[\"在任意位置进行读写\",{\"1\":{\"1889\":1}}],[\"在outputstream\",{\"1\":{\"1875\":1}}],[\"在unicode\",{\"1\":{\"1863\":1}}],[\"在utf8字符集中\",{\"1\":{\"426\":1}}],[\"在节点流上创造缓冲流\",{\"1\":{\"1836\":1}}],[\"在相应的节点流之上\",{\"1\":{\"1827\":1}}],[\"在输出的过程中\",{\"1\":{\"1810\":1}}],[\"在读取文件时\",{\"1\":{\"1797\":1}}],[\"在读取前我们一般需要使用hasnext\",{\"1\":{\"637\":1,\"758\":1}}],[\"在写入一个文件时\",{\"1\":{\"1797\":1}}],[\"在写出文件时\",{\"1\":{\"582\":1,\"1835\":1}}],[\"在内存层面读\",{\"1\":{\"1790\":1}}],[\"在内存中加载的位置\",{\"1\":{\"1025\":1}}],[\"在内存中分配了不同大小的内存空间\",{\"1\":{\"826\":1}}],[\"在已存在的流\",{\"1\":{\"1775\":1,\"1780\":1}}],[\"在泛型方法中可以定义泛型参数\",{\"1\":{\"1728\":1}}],[\"在本类或本接口中即代表某种类型\",{\"1\":{\"1721\":1}}],[\"在不\",{\"1\":{\"3126\":1}}],[\"在不登录的情况下\",{\"1\":{\"2810\":1}}],[\"在不改变原有方法的情况下\",{\"1\":{\"2072\":1}}],[\"在不断的添加过程中\",{\"1\":{\"1676\":1}}],[\"在不同类中的访问机制\",{\"1\":{\"1015\":1}}],[\"在原有的hashmap底层结构基础上\",{\"1\":{\"1665\":1}}],[\"在扩容方面\",{\"1\":{\"1629\":1}}],[\"在调用it\",{\"1\":{\"1597\":1}}],[\"在调用时可以对属性进行修改\",{\"1\":{\"1034\":1}}],[\"在当前目录生成证书\",{\"1\":{\"3212\":1}}],[\"在当前目录下生成了两个class文件\",{\"1\":{\"801\":1}}],[\"在当前线程被notify后\",{\"1\":{\"1552\":1}}],[\"在当前线程中调用方法\",{\"1\":{\"1552\":1,\"1553\":1}}],[\"在其他目录下创建项目\",{\"0\":{\"2466\":1}}],[\"在其他语言中是有关联数组的\",{\"1\":{\"1575\":1}}],[\"在其他的语言中\",{\"1\":{\"737\":1}}],[\"在其上加锁\",{\"1\":{\"1524\":1}}],[\"在方式一\",{\"1\":{\"1522\":1}}],[\"在方法内通过newinstance\",{\"1\":{\"2357\":1}}],[\"在方法内定义\",{\"1\":{\"828\":1}}],[\"在方法声明中用throws语句可以声明抛出异常的列表\",{\"1\":{\"1349\":1}}],[\"在方法调用之前\",{\"1\":{\"1159\":1}}],[\"在方法体之外\",{\"1\":{\"1538\":1}}],[\"在方法体内部声明的变量\",{\"1\":{\"828\":1}}],[\"在方法体外\",{\"1\":{\"828\":1}}],[\"在方法上加\",{\"1\":{\"158\":1}}],[\"在继承thread类创建多线程的方式中\",{\"1\":{\"1511\":1}}],[\"在实现了监听器接口的类上添加\",{\"1\":{\"2726\":1}}],[\"在实现runnable接口创建多线程的方式中\",{\"1\":{\"1511\":1}}],[\"在实例化集合类时\",{\"1\":{\"1711\":1}}],[\"在实例化以后\",{\"1\":{\"1673\":1}}],[\"在实际开发中\",{\"1\":{\"1064\":1,\"1152\":1}}],[\"在某些情况下\",{\"1\":{\"3126\":1}}],[\"在某种特殊情况下\",{\"1\":{\"1501\":1}}],[\"在某个controller添加日志记录\",{\"1\":{\"242\":1}}],[\"在它的一个完整的生命周期中通常要经历如下的五种状态\",{\"1\":{\"1501\":1}}],[\"在线程a中调用线程b的join\",{\"1\":{\"1479\":1,\"1481\":1}}],[\"在里面放入我们要执行的代码\",{\"1\":{\"1472\":1}}],[\"在保护模式下不会对其他进程产生影响\",{\"1\":{\"1440\":1}}],[\"在反射的\",{\"1\":{\"1431\":1}}],[\"在1\",{\"1\":{\"1419\":1}}],[\"在源文件中有效\",{\"1\":{\"1411\":1}}],[\"在源文件中嵌入一些补充信息\",{\"1\":{\"1387\":1}}],[\"在源文件中显式的使用import结构导入指定包下的类\",{\"1\":{\"1093\":1}}],[\"在枚举对象中可以单独重写接口中的方法\",{\"1\":{\"1382\":1}}],[\"在枚举值后面加\",{\"1\":{\"1380\":1}}],[\"在出了try结构以后\",{\"1\":{\"1346\":1}}],[\"在finally里面关闭资源\",{\"1\":{\"1344\":1}}],[\"在for循环外定义\",{\"1\":{\"933\":1}}],[\"在没有写finally的情况\",{\"1\":{\"1340\":1}}],[\"在执行过程中\",{\"1\":{\"1340\":1,\"1508\":1,\"1525\":1}}],[\"在cmd中运行命令\",{\"1\":{\"2743\":1}}],[\"在class文件中有效\",{\"1\":{\"1411\":1}}],[\"在catch语句块中是对异常对象进行处理的代码\",{\"1\":{\"1337\":1}}],[\"在compass中\",{\"1\":{\"3168\":1}}],[\"在compareto\",{\"1\":{\"496\":1}}],[\"在controller类中\",{\"1\":{\"371\":1}}],[\"在编译时就会进行\",{\"1\":{\"1709\":1}}],[\"在编译之后内部类会被编译成独立的\",{\"1\":{\"1212\":1}}],[\"在编译之后都使用java虚拟机中的int数据类型来代替\",{\"1\":{\"860\":1}}],[\"在编写程序时\",{\"1\":{\"1316\":1}}],[\"在子类中调用父类\",{\"0\":{\"1270\":1}}],[\"在子类中可以根据需要对从父类中继承来的方法进行改造\",{\"1\":{\"1122\":1}}],[\"在电脑上使用usb\",{\"1\":{\"1264\":1}}],[\"在整个系统运行过程中\",{\"1\":{\"1243\":1}}],[\"在静态的方法内\",{\"1\":{\"1236\":1}}],[\"在设计类时\",{\"1\":{\"1224\":1}}],[\"在局部内部类的方法中\",{\"1\":{\"1210\":1}}],[\"在外部引用它时必须给出完整的名称\",{\"1\":{\"1201\":1}}],[\"在行进行string与其它类型数据的连接操作时\",{\"1\":{\"1187\":1}}],[\"在多态情况下\",{\"1\":{\"1156\":1}}],[\"在堆内存的方法区中就产生了一个class类型的对象\",{\"1\":{\"2000\":1}}],[\"在堆内存中\",{\"1\":{\"1118\":1,\"1300\":1}}],[\"在堆空间中\",{\"1\":{\"1143\":1}}],[\"在构造器的首行\",{\"1\":{\"1138\":1}}],[\"在父类中需要同时访问这两个属性\",{\"1\":{\"1133\":1}}],[\"在定义一个native方法时\",{\"1\":{\"1109\":1}}],[\"在类上使用\",{\"1\":{\"2532\":1}}],[\"在类\",{\"1\":{\"1721\":1}}],[\"在类路径\",{\"1\":{\"1430\":1}}],[\"在类中写非空参构造器时\",{\"1\":{\"1140\":1}}],[\"在类中声明的位置的不同\",{\"1\":{\"1025\":1}}],[\"在类前面加上包名就行\",{\"1\":{\"1095\":1}}],[\"在类的定义时\",{\"1\":{\"1711\":1}}],[\"在类的内部创建枚举类的实例\",{\"1\":{\"1372\":1}}],[\"在类的多个构造器中\",{\"1\":{\"1139\":1}}],[\"在类的构造器中\",{\"0\":{\"1081\":1},\"1\":{\"1081\":1}}],[\"在类的方法中\",{\"0\":{\"1080\":1}}],[\"在类外部访问需要通过方法\",{\"1\":{\"1055\":1}}],[\"在同一\",{\"1\":{\"3184\":1}}],[\"在同一服务器上不同的request请求是会得到唯一的session\",{\"1\":{\"2675\":1}}],[\"在同一个类中\",{\"1\":{\"1037\":1,\"1087\":1}}],[\"在同一行\",{\"1\":{\"576\":1}}],[\"在程序的dos端口按ctrl\",{\"1\":{\"2456\":1}}],[\"在程序执行时\",{\"1\":{\"1122\":1}}],[\"在程序入口中调用类\",{\"1\":{\"1011\":1}}],[\"在程序包所在路径下\",{\"1\":{\"191\":1}}],[\"在初始化时就确定了\",{\"1\":{\"980\":1}}],[\"在栈内存以栈的结构储存数组的标识符\",{\"1\":{\"979\":1}}],[\"在循环体必须执行一次的时候\",{\"1\":{\"942\":1}}],[\"在计算机底层\",{\"1\":{\"873\":1}}],[\"在哪个\",{\"1\":{\"824\":1}}],[\"在创建的对象中\",{\"1\":{\"885\":1}}],[\"在创建matcher对象后\",{\"1\":{\"757\":1}}],[\"在创建pattern对象的时候\",{\"1\":{\"749\":1}}],[\"在创建springboot工程时\",{\"1\":{\"179\":1}}],[\"在创建springboot项目时\",{\"1\":{\"96\":1}}],[\"在jdbc中\",{\"1\":{\"2388\":1}}],[\"在jdk1\",{\"1\":{\"1767\":1}}],[\"在jdk8时\",{\"1\":{\"1621\":1}}],[\"在jdk5\",{\"1\":{\"1462\":1}}],[\"在jdk中java\",{\"1\":{\"736\":1,\"738\":1}}],[\"在jdk中\",{\"1\":{\"498\":1}}],[\"在javaweb开发中\",{\"1\":{\"2560\":1,\"2567\":1}}],[\"在javaweb\",{\"1\":{\"2510\":1}}],[\"在java\",{\"1\":{\"2138\":1}}],[\"在javabean中要求提供一个public的空参构造器\",{\"1\":{\"2037\":1}}],[\"在java的uri中\",{\"1\":{\"1995\":1}}],[\"在java7\",{\"1\":{\"1916\":1}}],[\"在java里\",{\"1\":{\"1461\":1}}],[\"在java8中能够得到方法参数的名称\",{\"1\":{\"1417\":1}}],[\"在javaee\",{\"1\":{\"1388\":1}}],[\"在javase中\",{\"1\":{\"1388\":1}}],[\"在java语言中\",{\"1\":{\"1310\":1}}],[\"在java语言范畴中\",{\"1\":{\"1005\":1}}],[\"在java类中使用super来调用父类中的指定成员\",{\"1\":{\"1131\":1}}],[\"在java中储存数据\",{\"1\":{\"2981\":1}}],[\"在java中声明类\",{\"1\":{\"1100\":1}}],[\"在java中不可以写成3<x<6\",{\"1\":{\"904\":1}}],[\"在java中\",{\"1\":{\"738\":1,\"860\":1,\"933\":1,\"1005\":1,\"1508\":1,\"2278\":1}}],[\"在\",{\"1\":{\"737\":1,\"1118\":1,\"1875\":1,\"2308\":1,\"2469\":1,\"2503\":1,\"2900\":1,\"2906\":1,\"2914\":1,\"2924\":1,\"2949\":1,\"2952\":1,\"2955\":1,\"3109\":1,\"3184\":1}}],[\"在postman中向es服务器发post请求\",{\"1\":{\"2919\":1}}],[\"在pom\",{\"1\":{\"78\":1}}],[\"在project\",{\"1\":{\"2542\":1}}],[\"在person类中重写equals后\",{\"1\":{\"662\":1}}],[\"在init方法的参数中有\",{\"1\":{\"2556\":1}}],[\"在io模式下\",{\"1\":{\"581\":1,\"1834\":1}}],[\"在ideal中\",{\"1\":{\"1649\":1}}],[\"在idea右边选择database\",{\"1\":{\"312\":1}}],[\"在idea中可以快速创建servlet实现类\",{\"1\":{\"2539\":1}}],[\"在idea中的输出目录\",{\"0\":{\"2475\":1}}],[\"在idea中配置的临时参数就是通过这个位置传递到我们的程序中的\",{\"1\":{\"213\":1}}],[\"在idea中\",{\"1\":{\"212\":1,\"298\":1}}],[\"在idea中进行配置\",{\"1\":{\"135\":1}}],[\"在绝对值的角度\",{\"1\":{\"536\":3}}],[\"在该区域中的数据会被原样展示\",{\"1\":{\"2772\":1}}],[\"在该注解中\",{\"1\":{\"2570\":1}}],[\"在该范围内\",{\"1\":{\"513\":1}}],[\"在该控制器中创建日志对象\",{\"1\":{\"243\":1}}],[\"在开发中\",{\"1\":{\"457\":1,\"1254\":1,\"1258\":1}}],[\"在功能上\",{\"1\":{\"439\":1}}],[\"在application\",{\"1\":{\"390\":1,\"3236\":1}}],[\"在表现层做统一的异常处理\",{\"1\":{\"369\":1}}],[\"在项目代码里写死虚拟路径\",{\"1\":{\"2668\":1}}],[\"在项目配置菜单\",{\"1\":{\"2107\":1}}],[\"在项目的根目录添加\",{\"1\":{\"302\":1}}],[\"在项目包下创建controller包\",{\"1\":{\"85\":1}}],[\"在操作redis时\",{\"1\":{\"288\":1}}],[\"在mongodb中通过角色对用户授予相应数据库资源的操作权限\",{\"1\":{\"3183\":1}}],[\"在mysql下建议关闭\",{\"1\":{\"2426\":1}}],[\"在mysqld项中添加default\",{\"1\":{\"277\":1}}],[\"在myannotation注解上使用元注解\",{\"1\":{\"1420\":1}}],[\"在main所在类中声明的普通方法\",{\"1\":{\"1032\":1}}],[\"在manifest\",{\"1\":{\"201\":1}}],[\"在maven中提供有打包的指令\",{\"1\":{\"190\":1}}],[\"在字母前使用数字\",{\"1\":{\"253\":1}}],[\"在控制台打印日志时\",{\"1\":{\"251\":1}}],[\"在resource目录下设置如下配置文件\",{\"1\":{\"228\":1}}],[\"在启动服务的时候\",{\"1\":{\"210\":1}}],[\"在使用compass连接副本集时\",{\"1\":{\"3164\":1}}],[\"在使用springboot时\",{\"1\":{\"2988\":1}}],[\"在使用开发基于数据库的web程序时\",{\"0\":{\"2413\":1}}],[\"在使用这些流类时\",{\"1\":{\"1826\":1}}],[\"在使用注解时\",{\"1\":{\"1399\":1}}],[\"在使用向导创建springboot工程时\",{\"1\":{\"193\":1}}],[\"在使用maven开发时\",{\"1\":{\"91\":1}}],[\"在tomcat\",{\"1\":{\"2806\":2}}],[\"在tomcat服务器的一个配置文件\",{\"1\":{\"2685\":1}}],[\"在tomcat服务器的配置文件中进行配置\",{\"1\":{\"135\":1}}],[\"在tomcat目录下的webapps目录下创建一个目录\",{\"1\":{\"2465\":1}}],[\"在thread子类中就是this\",{\"1\":{\"1479\":1}}],[\"在try结构中声明的变量\",{\"1\":{\"1346\":1}}],[\"在test中测试api\",{\"1\":{\"185\":1}}],[\"在和引导类相同的包中\",{\"1\":{\"183\":1}}],[\"在需要使用orm类的地方\",{\"1\":{\"2403\":1}}],[\"在需要使用这组配置的类中\",{\"1\":{\"156\":1}}],[\"在需要写入字符而不是写入字节的情况下\",{\"1\":{\"1872\":1}}],[\"在需要手动输出日志的类上同样加上\",{\"1\":{\"263\":1}}],[\"在需要开启校验功能的类上使用注解\",{\"1\":{\"175\":1}}],[\"在进行synchronized\",{\"1\":{\"1522\":1}}],[\"在进行divide运算时\",{\"1\":{\"535\":1}}],[\"在进行整合之前先梳理一下整合的思想\",{\"1\":{\"265\":1}}],[\"在进行属性绑定时\",{\"1\":{\"166\":1}}],[\"在进行项目开发时\",{\"1\":{\"99\":1}}],[\"在yml配置文件中定义要绑定的属性\",{\"0\":{\"159\":1}}],[\"在yml中可以使用\",{\"1\":{\"125\":1}}],[\"在更高层级中配置关闭热部署\",{\"1\":{\"153\":1}}],[\"在属性名书写位置的下方使用减号作为数据开始符号\",{\"1\":{\"124\":1}}],[\"无模式的\",{\"1\":{\"3021\":1}}],[\"无状态协议\",{\"0\":{\"2788\":1}}],[\"无需import操作\",{\"1\":{\"2741\":1}}],[\"无需使用索引访问元素\",{\"1\":{\"1602\":1}}],[\"无限流就是数据无限生成\",{\"1\":{\"2201\":1}}],[\"无限循环格式\",{\"0\":{\"938\":1}}],[\"无return\",{\"0\":{\"2120\":1,\"2122\":1}}],[\"无非是参数有char类型变成了byte类型\",{\"1\":{\"1820\":1}}],[\"无穷大\",{\"1\":{\"1752\":1}}],[\"无穷小\",{\"1\":{\"1751\":1}}],[\"无序的\",{\"1\":{\"1664\":3,\"1670\":3}}],[\"无序性\",{\"1\":{\"1634\":1,\"1642\":1}}],[\"无可厚非\",{\"1\":{\"1522\":1}}],[\"无继承关系的引用类型间的转换是非法的\",{\"1\":{\"1172\":1}}],[\"无所谓\",{\"1\":{\"924\":1}}],[\"无任何判断和跳转\",{\"1\":{\"917\":1}}],[\"无null\",{\"1\":{\"858\":1}}],[\"无成员变量\",{\"1\":{\"654\":1}}],[\"无效精度外的数值全部舍去\",{\"1\":{\"536\":1}}],[\"无参数\",{\"1\":{\"639\":1,\"760\":1,\"2157\":1}}],[\"无参\",{\"0\":{\"565\":1,\"2120\":1},\"1\":{\"469\":1,\"1070\":1}}],[\"无参构造方法\",{\"1\":{\"344\":1}}],[\"无线程安全\",{\"1\":{\"448\":1}}],[\"无论用户管理的数据库是哪个\",{\"1\":{\"3201\":1}}],[\"无论是直接写多个参数\",{\"1\":{\"3012\":1}}],[\"无论是开发时是何种配置\",{\"1\":{\"2526\":1}}],[\"无论是否发生异常\",{\"1\":{\"1337\":1}}],[\"无论这些数据库连接是否被使用\",{\"1\":{\"2417\":1}}],[\"无论这两个线程是否属于同一对象\",{\"1\":{\"1549\":1}}],[\"无论哪个枚举对象调用\",{\"1\":{\"1380\":1}}],[\"无论通过哪个构造器创建子类对象\",{\"1\":{\"1136\":1}}],[\"无论有没有初始化\",{\"1\":{\"822\":1}}],[\"无论正负\",{\"1\":{\"536\":1}}],[\"无论操作对象是操作何种类型\",{\"1\":{\"289\":1}}],[\"无论配置文件中ipaddress哪种书写模式\",{\"1\":{\"167\":1}}],[\"无法进行分词查询\",{\"1\":{\"2966\":1}}],[\"无法满足用户需求\",{\"1\":{\"2870\":1}}],[\"无法约束内容\",{\"1\":{\"2775\":1}}],[\"无法获取核心类库的引导类加载器\",{\"1\":{\"2032\":1}}],[\"无法获取引导类加载器\",{\"1\":{\"2032\":1}}],[\"无法获取num\",{\"1\":{\"1339\":1}}],[\"无法new\",{\"1\":{\"2005\":1}}],[\"无法赋值\",{\"1\":{\"1743\":1}}],[\"无法执行\",{\"1\":{\"1582\":1}}],[\"无法继续\",{\"1\":{\"1540\":1}}],[\"无法继承\",{\"0\":{\"1101\":1}}],[\"无法调用该方法\",{\"1\":{\"1747\":1}}],[\"无法调用\",{\"1\":{\"1272\":1}}],[\"无法应对高并发\",{\"1\":{\"1242\":1}}],[\"无法更改\",{\"1\":{\"980\":1}}],[\"无法接收int类型的1\",{\"1\":{\"893\":1}}],[\"无法直接操作private属性\",{\"1\":{\"616\":1,\"617\":1}}],[\"无法直接实例化\",{\"1\":{\"573\":1}}],[\"无法创建\",{\"1\":{\"556\":1,\"557\":1}}],[\"无法比较值\",{\"1\":{\"662\":1}}],[\"无法比较\",{\"1\":{\"508\":1}}],[\"无法修改源时间\",{\"1\":{\"464\":1}}],[\"无法像导入mybatis那样直接导入\",{\"1\":{\"280\":1}}],[\"无法启动项目\",{\"1\":{\"77\":1}}],[\"无用的文件\",{\"1\":{\"74\":1}}],[\"确实可以看到数据库创建成功\",{\"1\":{\"3168\":1}}],[\"确切的说是b\",{\"1\":{\"3103\":1}}],[\"确保加载的类信息符合jvm规范\",{\"1\":{\"2027\":1}}],[\"确保启动类与直接在\",{\"1\":{\"77\":1}}],[\"确定\",{\"1\":{\"1700\":1}}],[\"确定的\",{\"1\":{\"1661\":1}}],[\"确定数据类型\",{\"1\":{\"968\":1}}],[\"确给了个string类型的值\",{\"1\":{\"173\":1}}],[\"确认了springboot的依赖\",{\"1\":{\"74\":1}}],[\"<query>\",{\"1\":{\"3090\":1}}],[\"<单词位置>\",{\"1\":{\"2880\":1}}],[\"<10>\",{\"1\":{\"2880\":1}}],[\"<1>\",{\"1\":{\"2880\":3}}],[\"<7>\",{\"1\":{\"2880\":2}}],[\"<name>tom<\",{\"1\":{\"2782\":1}}],[\"<name>zhangsan<\",{\"1\":{\"2779\":1}}],[\"<xsd\",{\"1\":{\"2781\":22}}],[\"<url>fuck\",{\"1\":{\"2771\":1}}],[\"<uname>shit<\",{\"1\":{\"2771\":1}}],[\"<h1>hello<h1>\",{\"1\":{\"2642\":1}}],[\"<h1>作用<\",{\"1\":{\"811\":1,\"812\":1}}],[\"<input\",{\"1\":{\"2609\":3,\"2623\":5}}],[\"<id>env\",{\"1\":{\"235\":2}}],[\"<font\",{\"1\":{\"2959\":1,\"3018\":1,\"3019\":2}}],[\"<form\",{\"1\":{\"2609\":1,\"2623\":1}}],[\"<filenamepattern>$\",{\"1\":{\"262\":3}}],[\"<file>$\",{\"1\":{\"262\":3}}],[\"<filter\",{\"1\":{\"262\":4}}],[\"<<\",{\"1\":{\"909\":1}}],[\"<<13\",{\"1\":{\"641\":1}}],[\"<boolean>\",{\"1\":{\"3071\":1,\"3075\":1}}],[\"<br>\",{\"1\":{\"2623\":1}}],[\"<blockquote><pre>\",{\"1\":{\"811\":1}}],[\"<build>\",{\"1\":{\"193\":1,\"336\":1}}],[\"<k\",{\"1\":{\"691\":3}}],[\"<t\",{\"1\":{\"684\":1,\"686\":1,\"687\":1}}],[\"<t>\",{\"1\":{\"651\":1,\"670\":1,\"684\":1,\"686\":1,\"687\":1,\"689\":1,\"690\":1,\"691\":5,\"1566\":1,\"1732\":1,\"2198\":1,\"2355\":1,\"2435\":2}}],[\"<timebasedfilenamingandtriggeringpolicy\",{\"1\":{\"262\":3}}],[\"<参数\",{\"1\":{\"537\":1}}],[\"<=\",{\"1\":{\"515\":1,\"936\":1,\"941\":1,\"950\":2,\"954\":2,\"955\":2,\"956\":2,\"1035\":1,\"1556\":1,\"1753\":2,\"1828\":2,\"1829\":2,\"1830\":2,\"1831\":2,\"1873\":1,\"2372\":1,\"2373\":1,\"2376\":1,\"2377\":1,\"2938\":1,\"3002\":1,\"3100\":1}}],[\"<0\",{\"1\":{\"412\":1}}],[\"<database>\",{\"1\":{\"3188\":2}}],[\"<document>\",{\"1\":{\"3071\":1,\"3075\":1}}],[\"<document\",{\"1\":{\"3071\":1,\"3075\":2}}],[\"<druid\",{\"1\":{\"336\":1}}],[\"<dependency>\",{\"1\":{\"95\":4,\"99\":5,\"110\":1,\"111\":1,\"141\":1,\"165\":1,\"174\":2,\"179\":1,\"266\":1,\"270\":3,\"280\":3,\"286\":2,\"292\":1,\"316\":1,\"317\":1,\"318\":1,\"319\":1,\"321\":1,\"322\":1,\"323\":1,\"324\":1,\"326\":2,\"328\":1,\"330\":1,\"331\":1,\"332\":1,\"333\":1,\"335\":2,\"336\":12,\"344\":1,\"389\":9,\"2837\":1,\"2971\":2,\"2982\":1,\"3229\":1,\"3234\":1}}],[\"<dependencymanagement>\",{\"1\":{\"95\":1}}],[\"<dependencies>\",{\"1\":{\"95\":1,\"99\":1,\"336\":1,\"344\":1,\"389\":1}}],[\"<mime\",{\"1\":{\"2685\":2}}],[\"<mybatis\",{\"1\":{\"336\":1}}],[\"<mysql\",{\"1\":{\"336\":1}}],[\"<maxhistory>15<\",{\"1\":{\"262\":3}}],[\"<maxfilesize>100mb<\",{\"1\":{\"262\":3}}],[\"<java\",{\"1\":{\"336\":1}}],[\"<session\",{\"1\":{\"2825\":2}}],[\"<sex>male<\",{\"1\":{\"2782\":1}}],[\"<sex>hehe<\",{\"1\":{\"2779\":1}}],[\"<server\",{\"1\":{\"2771\":1}}],[\"<students\",{\"1\":{\"2782\":1}}],[\"<students>\",{\"1\":{\"2779\":1}}],[\"<student\",{\"1\":{\"2779\":1,\"2782\":1}}],[\"<swagger\",{\"1\":{\"336\":1}}],[\"<springprofile\",{\"1\":{\"262\":2}}],[\"<scope>runtime<\",{\"1\":{\"270\":1,\"280\":1,\"321\":1,\"332\":1,\"336\":1,\"389\":1}}],[\"<scope>test<\",{\"1\":{\"179\":1,\"318\":1,\"336\":1,\"389\":1}}],[\"<scope>compile<\",{\"1\":{\"99\":5,\"389\":1}}],[\"<logger\",{\"1\":{\"262\":1}}],[\"<logger>仅有一个name属性\",{\"1\":{\"262\":1}}],[\"<logger>用来设置某一个包或者具体的某一个类的日志打印级别\",{\"1\":{\"262\":1}}],[\"<level>error<\",{\"1\":{\"262\":1}}],[\"<level>warn<\",{\"1\":{\"262\":1}}],[\"<level>info<\",{\"1\":{\"262\":2}}],[\"<o2\",{\"1\":{\"509\":1}}],[\"<onmismatch>deny<\",{\"1\":{\"262\":3}}],[\"<onmatch>accept<\",{\"1\":{\"262\":3}}],[\"<optional>true<\",{\"1\":{\"141\":1,\"330\":1,\"332\":1,\"336\":2}}],[\"<r>\",{\"1\":{\"2219\":1}}],[\"<rolename>\",{\"1\":{\"3188\":4}}],[\"<rollingpolicy\",{\"1\":{\"262\":3}}],[\"<root\",{\"1\":{\"262\":2}}],[\"<relativepath\",{\"1\":{\"93\":1}}],[\"<columncount\",{\"1\":{\"2352\":1}}],[\"<context\",{\"1\":{\"2468\":1,\"2469\":1}}],[\"<contextname>logback<\",{\"1\":{\"262\":1}}],[\"<configuration\",{\"1\":{\"262\":1}}],[\"<charset>utf\",{\"1\":{\"262\":4}}],[\"<extension>m4a<\",{\"1\":{\"2685\":1}}],[\"<exclusion>\",{\"1\":{\"110\":1}}],[\"<exclusions>\",{\"1\":{\"110\":1}}],[\"<e1\",{\"1\":{\"1715\":1}}],[\"<e>\",{\"1\":{\"811\":1,\"1719\":1,\"1733\":1,\"1734\":1,\"2405\":1}}],[\"<encoder>\",{\"1\":{\"262\":4}}],[\"<groupid>io\",{\"1\":{\"331\":1,\"336\":1}}],[\"<groupid>redis\",{\"1\":{\"292\":1}}],[\"<groupid>mysql<\",{\"1\":{\"270\":1,\"280\":1,\"321\":1,\"336\":1,\"389\":1}}],[\"<groupid>commons\",{\"1\":{\"389\":1}}],[\"<groupid>com\",{\"1\":{\"266\":1,\"270\":1,\"280\":2,\"322\":1,\"324\":1,\"333\":1,\"335\":2,\"336\":2,\"389\":3,\"2837\":1,\"2982\":1}}],[\"<groupid>javax\",{\"1\":{\"174\":1}}],[\"<groupid>org\",{\"1\":{\"76\":1,\"93\":1,\"94\":1,\"95\":5,\"99\":5,\"110\":2,\"111\":1,\"141\":1,\"165\":1,\"174\":1,\"179\":1,\"193\":1,\"270\":1,\"286\":1,\"316\":1,\"317\":1,\"318\":1,\"319\":1,\"323\":1,\"326\":1,\"328\":1,\"330\":1,\"332\":1,\"336\":8,\"344\":1,\"389\":4,\"2971\":2,\"3229\":1,\"3234\":1}}],[\"<version>4\",{\"1\":{\"335\":1,\"3229\":1}}],[\"<version>8\",{\"1\":{\"321\":1,\"2971\":2}}],[\"<version>3\",{\"1\":{\"280\":1,\"323\":1,\"324\":1,\"331\":1,\"389\":1}}],[\"<version>1\",{\"1\":{\"266\":1,\"270\":1,\"280\":1,\"322\":1,\"333\":1,\"389\":3,\"2837\":1}}],[\"<version>5\",{\"1\":{\"99\":2}}],[\"<version>$\",{\"1\":{\"95\":4,\"336\":4}}],[\"<version>2\",{\"1\":{\"76\":1,\"93\":1,\"94\":1,\"95\":1,\"99\":3,\"335\":1,\"336\":1,\"389\":1,\"2982\":1}}],[\"<a\",{\"1\":{\"2782\":1}}],[\"<age>18<\",{\"1\":{\"2782\":1}}],[\"<age>abc<\",{\"1\":{\"2779\":1}}],[\"<appender\",{\"1\":{\"262\":13}}],[\"<appengine\",{\"1\":{\"95\":1}}],[\"<activebydefault>true<\",{\"1\":{\"235\":1}}],[\"<activemq\",{\"1\":{\"95\":1}}],[\"<activation>\",{\"1\":{\"235\":1}}],[\"<assertj\",{\"1\":{\"95\":1}}],[\"<aspectj\",{\"1\":{\"95\":1}}],[\"<artifactid>mongodb\",{\"1\":{\"3229\":1}}],[\"<artifactid>mysql\",{\"1\":{\"270\":1,\"280\":1,\"321\":1,\"336\":1,\"389\":1}}],[\"<artifactid>mybatis<\",{\"1\":{\"323\":1}}],[\"<artifactid>mybatis\",{\"1\":{\"270\":1,\"280\":1,\"324\":1,\"336\":1,\"389\":1}}],[\"<artifactid>jackson\",{\"1\":{\"2982\":1}}],[\"<artifactid>jedis<\",{\"1\":{\"292\":1}}],[\"<artifactid>elasticsearch\",{\"1\":{\"2971\":1}}],[\"<artifactid>elasticsearch<\",{\"1\":{\"2971\":1}}],[\"<artifactid>commons\",{\"1\":{\"389\":1}}],[\"<artifactid>aliyun\",{\"1\":{\"335\":2}}],[\"<artifactid>activemq\",{\"1\":{\"95\":4}}],[\"<artifactid>fastjson<\",{\"1\":{\"333\":1,\"389\":1,\"2837\":1}}],[\"<artifactid>lombok<\",{\"1\":{\"330\":1,\"336\":1,\"344\":1,\"389\":1}}],[\"<artifactid>druid\",{\"1\":{\"266\":1,\"270\":1,\"280\":1,\"322\":1,\"336\":1,\"389\":1}}],[\"<artifactid>hibernate\",{\"1\":{\"174\":1}}],[\"<artifactid>validation\",{\"1\":{\"174\":1}}],[\"<artifactid>springfox\",{\"1\":{\"331\":1,\"336\":1}}],[\"<artifactid>spring\",{\"1\":{\"76\":1,\"93\":1,\"94\":1,\"95\":1,\"99\":5,\"110\":2,\"111\":1,\"141\":1,\"165\":1,\"179\":1,\"193\":1,\"286\":1,\"316\":1,\"317\":1,\"318\":1,\"319\":1,\"326\":1,\"328\":1,\"332\":1,\"336\":7,\"389\":3,\"3234\":1}}],[\"<artemis\",{\"1\":{\"95\":1}}],[\"<antlr2\",{\"1\":{\"95\":1}}],[\"<pos>\",{\"1\":{\"2880\":1}}],[\"<pwd>123456<\",{\"1\":{\"2771\":1}}],[\"<p>\",{\"1\":{\"812\":1}}],[\"<p>比如\",{\"1\":{\"811\":1}}],[\"<project\",{\"1\":{\"2490\":1}}],[\"<property\",{\"1\":{\"262\":2}}],[\"<properties>\",{\"1\":{\"95\":1,\"235\":2,\"336\":1}}],[\"<profile\",{\"1\":{\"235\":2}}],[\"<profile>\",{\"1\":{\"235\":2}}],[\"<profiles>\",{\"1\":{\"235\":1}}],[\"<packaging>war<\",{\"1\":{\"2494\":1}}],[\"<packaging>pom<\",{\"1\":{\"95\":1}}],[\"<pattern>\",{\"1\":{\"262\":3}}],[\"<pattern>$\",{\"1\":{\"262\":1}}],[\"<parent>\",{\"1\":{\"93\":1,\"94\":1}}],[\"<plugin>\",{\"1\":{\"76\":1,\"193\":1,\"336\":1}}],[\"<plugins>\",{\"1\":{\"76\":1,\"193\":1,\"336\":1}}],[\"<\",{\"1\":{\"76\":2,\"93\":2,\"94\":1,\"95\":14,\"99\":6,\"110\":3,\"111\":2,\"141\":1,\"165\":1,\"174\":4,\"179\":1,\"193\":3,\"235\":7,\"262\":74,\"266\":1,\"270\":6,\"280\":5,\"292\":1,\"316\":1,\"317\":1,\"318\":1,\"319\":1,\"321\":1,\"322\":1,\"323\":1,\"324\":1,\"328\":1,\"330\":1,\"331\":1,\"332\":1,\"333\":1,\"335\":2,\"336\":45,\"344\":2,\"389\":10,\"491\":1,\"498\":2,\"811\":2,\"938\":1,\"956\":1,\"992\":2,\"1048\":1,\"1422\":1,\"1481\":1,\"1489\":1,\"1606\":2,\"1607\":1,\"1732\":1,\"1755\":1,\"1808\":1,\"1989\":4,\"2048\":2,\"2333\":1,\"2352\":1,\"2355\":2,\"2356\":1,\"2386\":1,\"2405\":6,\"2439\":1,\"2441\":1,\"2443\":1,\"2490\":1,\"2609\":1,\"2623\":1,\"2672\":2,\"2685\":1,\"2771\":2,\"2772\":2,\"2777\":12,\"2778\":2,\"2779\":4,\"2781\":32,\"2782\":5,\"2825\":1,\"2837\":1,\"2938\":1,\"2959\":1,\"2971\":4,\"2982\":2,\"3002\":1,\"3018\":1,\"3019\":1,\"3100\":1,\"3229\":1,\"3234\":1}}],[\"c8710e95\",{\"1\":{\"3198\":1}}],[\"c8ff\",{\"1\":{\"1933\":1}}],[\"crud\",{\"1\":{\"3184\":1}}],[\"credentials\",{\"1\":{\"3198\":3}}],[\"creditcard\",{\"1\":{\"1368\":1}}],[\"creation\",{\"1\":{\"2890\":1}}],[\"creature\",{\"1\":{\"2042\":1}}],[\"createuser方法\",{\"1\":{\"3193\":1}}],[\"createuser\",{\"0\":{\"3193\":1},\"1\":{\"3193\":1,\"3195\":1,\"3196\":1,\"3197\":1,\"3210\":1}}],[\"createindex\",{\"1\":{\"3110\":1,\"3112\":1,\"3113\":1}}],[\"createindexresponse\",{\"1\":{\"2975\":1}}],[\"createindexrequest\",{\"1\":{\"2975\":2,\"2976\":3}}],[\"createcollection\",{\"1\":{\"3067\":2}}],[\"createstatement\",{\"1\":{\"2372\":1}}],[\"createfile\",{\"1\":{\"1920\":1}}],[\"createnewfile\",{\"0\":{\"555\":1},\"1\":{\"555\":2}}],[\"create\",{\"1\":{\"375\":1,\"376\":1,\"377\":1,\"378\":1,\"379\":1,\"380\":1,\"381\":1,\"382\":1,\"383\":1,\"384\":1,\"385\":1,\"2371\":1,\"2394\":1,\"2435\":1,\"2486\":1,\"2975\":1,\"2976\":1,\"3057\":1}}],[\"createdatetime\",{\"1\":{\"3073\":1,\"3076\":2,\"3082\":1,\"3168\":1}}],[\"createdatasource\",{\"1\":{\"2424\":1,\"2427\":1}}],[\"created表示创建成功\",{\"1\":{\"2901\":1}}],[\"createdirectory\",{\"1\":{\"1920\":1}}],[\"created\",{\"1\":{\"200\":2,\"2890\":1,\"2901\":1}}],[\"cfg\",{\"1\":{\"3175\":2}}],[\"cfg=rs\",{\"1\":{\"3175\":1}}],[\"cn\",{\"1\":{\"2781\":2,\"2782\":3}}],[\"cn1\",{\"1\":{\"2005\":2}}],[\"cvfm\",{\"1\":{\"2743\":1}}],[\"cs\",{\"1\":{\"2796\":1,\"2799\":3}}],[\"cset\",{\"1\":{\"2243\":1}}],[\"css\",{\"1\":{\"372\":1,\"2447\":1}}],[\"c++\",{\"1\":{\"1999\":1}}],[\"cgi\",{\"1\":{\"1992\":1}}],[\"cb\",{\"1\":{\"1830\":1,\"1831\":1}}],[\"cbuf数组中了\",{\"1\":{\"1806\":1}}],[\"cbuf\",{\"1\":{\"566\":9,\"569\":1,\"570\":1,\"576\":5,\"1805\":5,\"1806\":1,\"1807\":1,\"1808\":4,\"1817\":3,\"1853\":3,\"1858\":3}}],[\"cp\",{\"1\":{\"3213\":3}}],[\"cpp\",{\"1\":{\"1797\":1}}],[\"cpu\",{\"1\":{\"1501\":1,\"2191\":2}}],[\"cpu的调度策略\",{\"0\":{\"1483\":1}}],[\"cpu的切换效率很高\",{\"1\":{\"1445\":1}}],[\"cpu是来回切换执行线程的\",{\"1\":{\"1481\":1}}],[\"cpu等\",{\"1\":{\"1440\":1}}],[\"curd的api\",{\"0\":{\"2435\":1}}],[\"curd\",{\"0\":{\"2305\":1,\"3239\":1}}],[\"curretnthread\",{\"1\":{\"1479\":1}}],[\"currentthread\",{\"1\":{\"1472\":2,\"1473\":1,\"1480\":2,\"1481\":1,\"1489\":1,\"1492\":1,\"1509\":1,\"1512\":1,\"1520\":2,\"1536\":1,\"1556\":1,\"1562\":1,\"1569\":1}}],[\"currenttimemillion\",{\"0\":{\"633\":1}}],[\"currenttimemillis进行计时\",{\"1\":{\"1838\":1}}],[\"currenttimemillis\",{\"1\":{\"459\":1,\"633\":2,\"956\":2,\"1109\":1,\"1251\":2,\"1838\":2,\"2373\":1,\"2376\":1}}],[\"currentpage\",{\"1\":{\"359\":1,\"360\":4,\"364\":3,\"371\":4}}],[\"cust\",{\"1\":{\"2352\":3,\"2365\":2,\"2407\":2,\"2408\":9,\"2409\":6,\"2428\":2}}],[\"customdata\",{\"1\":{\"3193\":1}}],[\"custom对象\",{\"0\":{\"2351\":1}}],[\"customerdaoimpltest\",{\"1\":{\"2409\":1}}],[\"customerdaoimpl\",{\"0\":{\"2408\":1},\"1\":{\"2408\":1,\"2409\":2}}],[\"customerdao\",{\"0\":{\"2407\":1},\"1\":{\"2407\":1,\"2408\":1}}],[\"customer1\",{\"1\":{\"2353\":2}}],[\"customers\",{\"1\":{\"2319\":1,\"2321\":1,\"2325\":1,\"2329\":1,\"2334\":1,\"2349\":1,\"2353\":2,\"2356\":1,\"2364\":1,\"2365\":1,\"2408\":7,\"2438\":1,\"2439\":1,\"2440\":1,\"2441\":1,\"2442\":1,\"2443\":2}}],[\"customer\",{\"1\":{\"1178\":4,\"1179\":4,\"2349\":4,\"2351\":3,\"2352\":4,\"2353\":4,\"2356\":1,\"2365\":2,\"2407\":4,\"2408\":7,\"2409\":5,\"2428\":1,\"2440\":4,\"2441\":1,\"2442\":5}}],[\"cust2\",{\"1\":{\"1178\":2,\"1179\":2}}],[\"cust1\",{\"1\":{\"1178\":2,\"1179\":2}}],[\"c4\",{\"1\":{\"854\":1,\"2021\":2}}],[\"c3p0\",{\"1\":{\"2420\":2}}],[\"c3\",{\"1\":{\"854\":1,\"2016\":2,\"2020\":2}}],[\"cdata\",{\"1\":{\"2772\":1}}],[\"cdata区\",{\"1\":{\"2772\":1}}],[\"cde\",{\"1\":{\"811\":4}}],[\"cd\",{\"1\":{\"787\":1}}],[\"center\",{\"1\":{\"3040\":1}}],[\"centos\",{\"1\":{\"786\":1}}],[\"certs\",{\"1\":{\"2860\":1}}],[\"ceiling\",{\"1\":{\"534\":1,\"536\":1}}],[\"ceil\",{\"0\":{\"514\":1},\"1\":{\"513\":1,\"514\":4}}],[\"c语言等\",{\"1\":{\"772\":1}}],[\"c2\",{\"1\":{\"498\":3,\"854\":1,\"1178\":2,\"2016\":2,\"2019\":2,\"2804\":2}}],[\"c1\",{\"1\":{\"498\":3,\"853\":1,\"854\":1,\"866\":2,\"1178\":2,\"2016\":2,\"2018\":2,\"2804\":2,\"2805\":3}}],[\"cc\",{\"1\":{\"313\":3,\"508\":3,\"658\":3,\"659\":1,\"660\":1,\"662\":1,\"663\":2,\"664\":2,\"665\":2,\"666\":3,\"998\":1,\"1203\":1,\"1262\":1,\"1654\":2,\"1683\":1,\"1745\":1,\"2215\":3,\"2391\":1}}],[\"cj\",{\"1\":{\"267\":1,\"271\":1,\"278\":1,\"281\":1,\"341\":1,\"390\":1,\"2297\":1,\"2298\":1,\"2302\":1}}],[\"cyan\",{\"1\":{\"253\":1,\"262\":2}}],[\"cybercell\",{\"1\":{\"105\":1,\"275\":1,\"313\":3}}],[\"clustermonitor\",{\"1\":{\"3189\":1}}],[\"clustermanager\",{\"1\":{\"3189\":1}}],[\"clusteradmin\",{\"1\":{\"3189\":1,\"3190\":1}}],[\"clustertime\",{\"1\":{\"3156\":1,\"3159\":1,\"3160\":1,\"3186\":1,\"3187\":1}}],[\"cluster\",{\"1\":{\"2845\":1,\"2858\":2,\"3161\":1}}],[\"cl4\",{\"1\":{\"2032\":2}}],[\"cl3\",{\"1\":{\"2032\":2}}],[\"cl2\",{\"1\":{\"2032\":3}}],[\"cl1\",{\"1\":{\"2032\":3}}],[\"cloud\",{\"0\":{\"3245\":1}}],[\"closing\",{\"1\":{\"2860\":1}}],[\"closequietly\",{\"1\":{\"2434\":1}}],[\"closeresource\",{\"1\":{\"2328\":1,\"2329\":1,\"2333\":1,\"2349\":1,\"2352\":1,\"2355\":1,\"2364\":1,\"2365\":1,\"2373\":1,\"2376\":1,\"2377\":1,\"2386\":1,\"2387\":1,\"2404\":2,\"2405\":4,\"2409\":7,\"2428\":1,\"2438\":1,\"2439\":1,\"2440\":1,\"2441\":1,\"2442\":1,\"2443\":1}}],[\"close方法一定要放到finally语句里\",{\"1\":{\"579\":1}}],[\"close\",{\"0\":{\"571\":1,\"579\":1,\"1802\":1,\"1814\":1,\"1852\":1},\"1\":{\"571\":3,\"572\":1,\"579\":2,\"1333\":1,\"1335\":1,\"1344\":1,\"1352\":1,\"1792\":1,\"1802\":1,\"1804\":1,\"1805\":1,\"1814\":1,\"1816\":1,\"1817\":2,\"1822\":1,\"1823\":2,\"1833\":2,\"1834\":1,\"1836\":3,\"1857\":1,\"1858\":2,\"1870\":1,\"1873\":1,\"1878\":1,\"1879\":1,\"1888\":2,\"1891\":1,\"1903\":1,\"1904\":1,\"1908\":1,\"1909\":1,\"1966\":1,\"1972\":1,\"1977\":2,\"1983\":1,\"1984\":1,\"1985\":1,\"2318\":2,\"2325\":2,\"2328\":2,\"2365\":1,\"2421\":2,\"2434\":1,\"2646\":1,\"2647\":1,\"2972\":1,\"2975\":1,\"2977\":1,\"2978\":1,\"2980\":1,\"2983\":1,\"2984\":1,\"2986\":1,\"2987\":1,\"2991\":1,\"2992\":1,\"2993\":1,\"2997\":1,\"3000\":1,\"3003\":1,\"3006\":1,\"3008\":1,\"3010\":1,\"3015\":1,\"3019\":1}}],[\"closeable\",{\"1\":{\"564\":2,\"572\":1,\"637\":1,\"758\":1}}],[\"clothfactory\",{\"1\":{\"2079\":1,\"2080\":3,\"2081\":1,\"2082\":2}}],[\"clone\",{\"1\":{\"1176\":1}}],[\"clist\",{\"1\":{\"2243\":1}}],[\"cli\",{\"1\":{\"771\":1}}],[\"client<\",{\"1\":{\"2971\":2}}],[\"clientsocket\",{\"1\":{\"1972\":3}}],[\"clients<\",{\"1\":{\"292\":1}}],[\"client\",{\"1\":{\"292\":1,\"293\":1,\"1972\":1,\"1977\":3,\"1978\":1,\"2976\":1}}],[\"clearbatch\",{\"0\":{\"2370\":1},\"1\":{\"2376\":1,\"2377\":1}}],[\"clear\",{\"0\":{\"660\":1,\"714\":1},\"1\":{\"660\":2,\"661\":1,\"714\":2,\"719\":1}}],[\"cl\",{\"1\":{\"589\":2,\"2021\":2}}],[\"clazz参数\",{\"1\":{\"2403\":1}}],[\"clazz\",{\"1\":{\"586\":2,\"587\":2,\"588\":2,\"589\":2,\"590\":2,\"591\":2,\"592\":2,\"593\":2,\"594\":1,\"595\":2,\"596\":2,\"597\":2,\"598\":1,\"600\":2,\"601\":2,\"602\":3,\"604\":2,\"605\":2,\"606\":2,\"607\":1,\"608\":2,\"609\":2,\"610\":2,\"611\":2,\"616\":3,\"617\":3,\"620\":2,\"626\":3,\"629\":2,\"2004\":2,\"2038\":3,\"2047\":3,\"2048\":2,\"2050\":3,\"2051\":2,\"2052\":2,\"2053\":2,\"2054\":3,\"2055\":2,\"2056\":2,\"2058\":3,\"2063\":4,\"2067\":2,\"2299\":2,\"2355\":3,\"2405\":6}}],[\"class后面选择按钮\",{\"1\":{\"2744\":1}}],[\"class传递进去\",{\"1\":{\"2357\":1}}],[\"classtest\",{\"1\":{\"2032\":1}}],[\"class对象\",{\"1\":{\"2026\":1}}],[\"class对应的属性了\",{\"1\":{\"201\":1}}],[\"class本身也是一个类\",{\"1\":{\"2015\":1}}],[\"class是直接操纵加载到内存里的类的\",{\"1\":{\"2014\":1}}],[\"class结尾\",{\"1\":{\"2013\":1}}],[\"class结尾的文件\",{\"1\":{\"793\":1}}],[\"class与类的加载\",{\"0\":{\"2013\":1}}],[\"class与反射工作原理\",{\"0\":{\"2000\":1}}],[\"class属于类的类\",{\"1\":{\"2012\":1}}],[\"class属性\",{\"1\":{\"201\":2,\"2733\":1}}],[\"class属性配置的类\",{\"1\":{\"198\":1,\"200\":1}}],[\"class的特点\",{\"0\":{\"2015\":1}}],[\"class的实例就对应着一个运行时类\",{\"1\":{\"2014\":1}}],[\"class的全类名为\",{\"1\":{\"2012\":1}}],[\"class的名字不能与包含它的外部类类名相同\",{\"1\":{\"1201\":1}}],[\"class类的常用方法\",{\"0\":{\"2022\":1}}],[\"class类是reflection的根源\",{\"1\":{\"2015\":1}}],[\"class类是反射的源头\",{\"1\":{\"2012\":1}}],[\"class类是类的类\",{\"1\":{\"2000\":1}}],[\"class类\",{\"0\":{\"2012\":1},\"1\":{\"1515\":1}}],[\"class以及枚举的数组\",{\"1\":{\"1398\":1}}],[\"classcastexception异常\",{\"1\":{\"1703\":1}}],[\"classcastexception\",{\"0\":{\"1331\":1},\"1\":{\"1319\":1,\"1323\":1,\"2048\":1}}],[\"class文件中\",{\"1\":{\"1406\":1}}],[\"class文件\",{\"1\":{\"1212\":1,\"2015\":1}}],[\"class关键字\",{\"1\":{\"1010\":1}}],[\"class和hi\",{\"1\":{\"801\":1}}],[\"class作为后缀\",{\"1\":{\"792\":1}}],[\"classname\",{\"1\":{\"590\":1,\"1228\":1,\"2005\":3,\"2171\":1}}],[\"classnotfoundexception\",{\"1\":{\"588\":1,\"590\":1,\"1323\":1,\"2020\":1}}],[\"classloadertest\",{\"1\":{\"2034\":1}}],[\"classloader\",{\"0\":{\"2021\":1,\"2030\":1},\"1\":{\"589\":2,\"596\":4,\"597\":3,\"2021\":1,\"2030\":1,\"2032\":4,\"2034\":3,\"2090\":1,\"2325\":1,\"2327\":1,\"2424\":1,\"2427\":1}}],[\"class<void>\",{\"1\":{\"2016\":1}}],[\"class<override>\",{\"1\":{\"2016\":1}}],[\"class<object>\",{\"1\":{\"2016\":1}}],[\"class<\",{\"1\":{\"587\":1,\"588\":1,\"589\":1,\"590\":2,\"593\":2,\"595\":2,\"602\":1,\"610\":1,\"611\":1,\"614\":2,\"622\":2,\"624\":2,\"625\":2,\"1404\":1,\"2019\":1,\"2020\":1,\"2021\":1,\"2045\":1,\"2090\":1,\"2298\":1}}],[\"class<person>\",{\"1\":{\"586\":1,\"591\":1,\"592\":1,\"593\":1,\"595\":1,\"596\":1,\"597\":1,\"600\":1,\"601\":1,\"602\":1,\"604\":1,\"605\":1,\"606\":1,\"608\":1,\"609\":1,\"610\":1,\"611\":1,\"616\":1,\"617\":1,\"620\":1,\"626\":1,\"629\":1,\"1432\":1,\"2009\":1,\"2010\":1,\"2018\":1,\"2037\":1,\"2038\":1,\"2041\":1}}],[\"class<t>\",{\"0\":{\"2357\":1},\"1\":{\"584\":1,\"2355\":1,\"2405\":2}}],[\"classic\",{\"1\":{\"262\":4}}],[\"class=\",{\"1\":{\"262\":14}}],[\"classpath\",{\"0\":{\"2020\":1},\"1\":{\"200\":2,\"302\":1,\"393\":2,\"2004\":7}}],[\"classes默认是编译后的java文件目录\",{\"1\":{\"2693\":1}}],[\"classes\",{\"1\":{\"198\":1,\"200\":2,\"2474\":1,\"2475\":1,\"2511\":1,\"2693\":1,\"2694\":1}}],[\"classes属性\",{\"0\":{\"183\":1}}],[\"class\",{\"0\":{\"584\":1,\"588\":1,\"599\":1,\"603\":1,\"796\":1,\"1246\":1,\"2011\":1,\"2018\":1},\"1\":{\"85\":1,\"103\":2,\"104\":4,\"131\":1,\"153\":2,\"156\":1,\"158\":1,\"163\":2,\"164\":1,\"167\":1,\"171\":1,\"172\":1,\"175\":1,\"176\":1,\"180\":1,\"181\":1,\"183\":2,\"198\":1,\"200\":2,\"213\":3,\"242\":2,\"244\":1,\"263\":1,\"267\":1,\"271\":1,\"273\":1,\"275\":1,\"281\":1,\"284\":1,\"288\":1,\"289\":1,\"302\":2,\"341\":1,\"343\":1,\"347\":1,\"350\":1,\"360\":1,\"361\":1,\"364\":1,\"369\":2,\"370\":1,\"371\":1,\"390\":1,\"393\":1,\"401\":1,\"440\":2,\"466\":2,\"467\":2,\"468\":2,\"475\":2,\"480\":2,\"501\":1,\"511\":2,\"529\":2,\"530\":2,\"538\":2,\"564\":2,\"572\":2,\"584\":2,\"586\":2,\"587\":1,\"588\":2,\"589\":1,\"590\":3,\"591\":1,\"592\":1,\"593\":2,\"595\":1,\"596\":1,\"597\":1,\"600\":1,\"601\":1,\"602\":3,\"604\":1,\"605\":1,\"606\":1,\"608\":1,\"609\":1,\"610\":2,\"611\":3,\"612\":2,\"616\":1,\"617\":1,\"619\":2,\"620\":2,\"624\":1,\"626\":3,\"628\":1,\"629\":2,\"632\":2,\"637\":2,\"641\":2,\"645\":1,\"679\":1,\"680\":1,\"745\":1,\"746\":1,\"749\":1,\"754\":1,\"755\":1,\"758\":2,\"790\":2,\"801\":3,\"802\":4,\"811\":2,\"827\":1,\"936\":1,\"938\":1,\"1007\":1,\"1010\":1,\"1011\":1,\"1019\":3,\"1032\":1,\"1034\":2,\"1044\":1,\"1045\":2,\"1054\":2,\"1056\":2,\"1068\":1,\"1071\":1,\"1082\":1,\"1101\":2,\"1102\":1,\"1104\":1,\"1112\":2,\"1120\":2,\"1128\":2,\"1133\":1,\"1134\":1,\"1136\":1,\"1153\":1,\"1160\":3,\"1201\":1,\"1203\":6,\"1209\":1,\"1210\":2,\"1218\":1,\"1219\":1,\"1227\":1,\"1228\":1,\"1233\":1,\"1240\":1,\"1241\":1,\"1246\":1,\"1249\":2,\"1251\":1,\"1252\":2,\"1261\":1,\"1262\":1,\"1264\":2,\"1278\":1,\"1286\":2,\"1293\":1,\"1295\":1,\"1312\":1,\"1339\":1,\"1352\":1,\"1361\":2,\"1364\":1,\"1373\":1,\"1400\":1,\"1406\":4,\"1411\":1,\"1418\":1,\"1419\":1,\"1420\":2,\"1422\":1,\"1431\":1,\"1432\":9,\"1472\":2,\"1480\":2,\"1481\":2,\"1489\":2,\"1492\":2,\"1499\":1,\"1509\":2,\"1512\":2,\"1515\":1,\"1520\":2,\"1521\":2,\"1524\":1,\"1532\":1,\"1536\":2,\"1547\":1,\"1556\":2,\"1562\":2,\"1569\":2,\"1626\":1,\"1715\":1,\"1719\":1,\"1722\":1,\"1723\":1,\"1724\":1,\"1725\":1,\"1726\":1,\"1753\":2,\"1756\":1,\"1828\":1,\"1829\":1,\"1830\":1,\"1831\":1,\"1846\":1,\"1907\":1,\"1942\":1,\"1990\":1,\"2002\":1,\"2004\":2,\"2007\":1,\"2009\":3,\"2010\":3,\"2012\":2,\"2015\":2,\"2016\":5,\"2018\":2,\"2019\":1,\"2020\":2,\"2021\":1,\"2031\":1,\"2032\":2,\"2034\":1,\"2037\":2,\"2038\":4,\"2041\":1,\"2047\":2,\"2048\":4,\"2050\":2,\"2051\":3,\"2052\":2,\"2053\":3,\"2054\":6,\"2055\":2,\"2056\":2,\"2058\":2,\"2063\":4,\"2065\":1,\"2067\":3,\"2080\":1,\"2081\":1,\"2082\":1,\"2094\":1,\"2095\":1,\"2101\":1,\"2221\":1,\"2298\":1,\"2299\":2,\"2300\":1,\"2303\":2,\"2310\":1,\"2325\":1,\"2327\":1,\"2351\":1,\"2352\":1,\"2356\":1,\"2391\":1,\"2405\":1,\"2408\":1,\"2409\":1,\"2440\":1,\"2441\":1,\"2531\":1,\"2532\":1,\"2556\":1,\"2564\":1,\"2566\":1,\"2571\":1,\"2598\":1,\"2614\":1,\"2624\":1,\"2625\":1,\"2640\":1,\"2655\":2,\"2661\":1,\"2662\":1,\"2697\":1,\"2725\":1,\"2726\":1,\"2733\":1,\"2743\":1,\"2839\":1,\"2972\":1,\"2975\":1,\"2977\":1,\"2978\":1,\"2980\":1,\"2981\":1,\"2983\":1,\"2984\":1,\"2986\":1,\"2987\":1,\"2991\":1,\"2992\":1,\"2993\":1,\"2997\":1,\"3000\":1,\"3003\":1,\"3006\":1,\"3008\":1,\"3010\":1,\"3015\":1,\"3019\":1}}],[\"clr\",{\"1\":{\"253\":4}}],[\"cardinality\",{\"1\":{\"2953\":1,\"2954\":2,\"3013\":1,\"3014\":1}}],[\"cart`\",{\"1\":{\"383\":1}}],[\"cart\",{\"0\":{\"383\":1},\"1\":{\"374\":1}}],[\"cache\",{\"1\":{\"2602\":1}}],[\"cash\",{\"1\":{\"1368\":1}}],[\"case判断\",{\"1\":{\"2087\":1}}],[\"case中\",{\"1\":{\"945\":1}}],[\"case执行效率稍高\",{\"1\":{\"929\":1}}],[\"case的\",{\"1\":{\"929\":1}}],[\"case的选择\",{\"0\":{\"929\":1}}],[\"case的限制\",{\"1\":{\"927\":1}}],[\"case结构中\",{\"1\":{\"927\":1}}],[\"case结构\",{\"1\":{\"927\":2}}],[\"case\",{\"1\":{\"390\":1,\"739\":1,\"749\":2,\"917\":1,\"926\":2,\"927\":1,\"928\":5,\"929\":2,\"2004\":3}}],[\"can\",{\"1\":{\"811\":1}}],[\"canon\",{\"1\":{\"749\":1}}],[\"canexecute\",{\"1\":{\"552\":1}}],[\"canwrite\",{\"1\":{\"552\":1}}],[\"canread\",{\"1\":{\"552\":2}}],[\"canxxx\",{\"0\":{\"552\":1}}],[\"calsses\",{\"1\":{\"2502\":2}}],[\"calssess\",{\"1\":{\"183\":1}}],[\"callablestatement\",{\"1\":{\"2308\":1}}],[\"callable<t>\",{\"1\":{\"1566\":1}}],[\"callabletest\",{\"1\":{\"1562\":1}}],[\"callable\",{\"1\":{\"1562\":1}}],[\"callable任务的执行结果进行取消\",{\"1\":{\"1560\":1}}],[\"callable接口的实例\",{\"1\":{\"1560\":1}}],[\"callable接口更加强大\",{\"1\":{\"1559\":1}}],[\"callable接口介绍\",{\"0\":{\"1559\":1}}],[\"callable接口\",{\"0\":{\"1558\":1}}],[\"call\",{\"1\":{\"1559\":2,\"1562\":1}}],[\"callneer\",{\"1\":{\"1219\":1}}],[\"callnener\",{\"1\":{\"1219\":1}}],[\"calendar则不行\",{\"1\":{\"460\":1}}],[\"calendar\",{\"1\":{\"459\":1}}],[\"capacity的值至少是treeify\",{\"1\":{\"1680\":1}}],[\"capacity时\",{\"1\":{\"1680\":1}}],[\"capacity\",{\"1\":{\"448\":2,\"1620\":1,\"1680\":3}}],[\"catalina\",{\"1\":{\"2469\":1,\"2507\":1}}],[\"cat\",{\"1\":{\"1203\":1,\"2892\":1}}],[\"catchuptakeoverdelaymillis\",{\"1\":{\"3153\":1}}],[\"catchuptimeoutmillis\",{\"1\":{\"3153\":1}}],[\"catch进行异常捕捉处理\",{\"1\":{\"3078\":1}}],[\"catch进行处理\",{\"1\":{\"1347\":1}}],[\"catch插入\",{\"0\":{\"3078\":1}}],[\"catch处理\",{\"1\":{\"1347\":1,\"1356\":1,\"1858\":1}}],[\"catch中的异常类\",{\"1\":{\"1721\":1}}],[\"catch中的异常类型如果满足子父类关系\",{\"1\":{\"1346\":1}}],[\"catch中的异常类型如果没有子父类关系\",{\"1\":{\"1346\":1}}],[\"catch中有return语句\",{\"1\":{\"1342\":1}}],[\"catch捕获的顺序\",{\"1\":{\"1346\":1}}],[\"catch和finally里面也可能会有异常\",{\"1\":{\"1345\":1}}],[\"catch和throws\",{\"1\":{\"1314\":1}}],[\"catch结构\",{\"1\":{\"1340\":1,\"1350\":1}}],[\"catch使用说明\",{\"0\":{\"1340\":1}}],[\"catch示例\",{\"0\":{\"1339\":1}}],[\"catch语句\",{\"1\":{\"579\":1}}],[\"catch\",{\"0\":{\"1336\":1,\"1353\":1,\"1355\":1},\"1\":{\"426\":2,\"555\":1,\"579\":2,\"1318\":2,\"1337\":4,\"1338\":1,\"1339\":3,\"1343\":1,\"1344\":4,\"1345\":1,\"1347\":3,\"1352\":1,\"1353\":1,\"1355\":2,\"1361\":1,\"1481\":4,\"1547\":2,\"1556\":1,\"1562\":2,\"1803\":1,\"1804\":2,\"1805\":2,\"1815\":1,\"1816\":2,\"1817\":3,\"1823\":3,\"1834\":2,\"1836\":3,\"1870\":2,\"1873\":1,\"1983\":1,\"1984\":1,\"1990\":1,\"2325\":3,\"2328\":2,\"2329\":1,\"2333\":1,\"2349\":1,\"2352\":1,\"2355\":1,\"2365\":1,\"2386\":1,\"2387\":3,\"2405\":4,\"2409\":7,\"2427\":1,\"2428\":1,\"3078\":1}}],[\"category\",{\"0\":{\"376\":1},\"1\":{\"374\":1,\"376\":1,\"2907\":1,\"2908\":2,\"2925\":1,\"2926\":2,\"2930\":2,\"2942\":5,\"2943\":2,\"2946\":2,\"2956\":1,\"2957\":1}}],[\"camel\",{\"1\":{\"390\":1}}],[\"camel<\",{\"1\":{\"95\":1}}],[\"chmod\",{\"1\":{\"3212\":1}}],[\"checkbox\",{\"1\":{\"2623\":2}}],[\"checked\",{\"1\":{\"1323\":1,\"1368\":1}}],[\"chn\",{\"1\":{\"2063\":2}}],[\"changeuserpassword\",{\"1\":{\"3200\":1}}],[\"change\",{\"1\":{\"3161\":1}}],[\"channel\",{\"1\":{\"1913\":1,\"2860\":1}}],[\"channels\",{\"1\":{\"1913\":1}}],[\"chainingallowed\",{\"1\":{\"3153\":1}}],[\"chain\",{\"1\":{\"2697\":2,\"2699\":1,\"2700\":1}}],[\"char会转为整形的ascii进行运算\",{\"1\":{\"865\":1}}],[\"char是通过转为ascii码进行运算的\",{\"1\":{\"862\":1}}],[\"char类型就是以数值方式储存的\",{\"1\":{\"1178\":1}}],[\"char类型的值不能是空字符串\",{\"1\":{\"856\":1}}],[\"char类型没有parsexxx方法\",{\"1\":{\"423\":1}}],[\"char数组每次装\",{\"1\":{\"569\":1,\"1808\":1}}],[\"char替换\",{\"0\":{\"429\":1}}],[\"chars\",{\"1\":{\"425\":2}}],[\"charsequence可以看做字符串\",{\"1\":{\"415\":1}}],[\"charsequence\",{\"1\":{\"415\":1,\"430\":2,\"440\":2,\"482\":1,\"750\":2,\"752\":1,\"753\":1,\"756\":1}}],[\"charset=utf\",{\"1\":{\"2641\":1,\"2648\":1}}],[\"charset=utf8\",{\"1\":{\"375\":1,\"376\":1,\"377\":1,\"378\":1,\"379\":1,\"380\":1,\"381\":1,\"382\":1,\"383\":1,\"384\":1,\"385\":1}}],[\"charset\",{\"1\":{\"813\":1}}],[\"charsetname\",{\"1\":{\"426\":1,\"1848\":1,\"1856\":1}}],[\"charset>\",{\"1\":{\"262\":4}}],[\"char\",{\"0\":{\"567\":1,\"851\":1},\"1\":{\"407\":1,\"424\":3,\"425\":4,\"429\":2,\"440\":1,\"442\":1,\"444\":4,\"445\":2,\"452\":1,\"498\":4,\"565\":3,\"566\":6,\"569\":2,\"570\":1,\"576\":3,\"827\":1,\"852\":1,\"853\":1,\"854\":4,\"865\":1,\"866\":1,\"878\":1,\"886\":1,\"927\":1,\"1025\":1,\"1039\":1,\"1178\":3,\"1298\":1,\"1335\":1,\"1344\":1,\"1352\":1,\"1804\":1,\"1805\":3,\"1808\":2,\"1817\":2,\"1830\":1,\"1831\":1,\"1853\":2,\"1858\":2,\"1873\":1,\"1876\":1,\"2314\":1}}],[\"charat\",{\"0\":{\"407\":1},\"1\":{\"407\":2,\"449\":1,\"810\":2,\"1327\":1,\"1330\":1}}],[\"character\",{\"1\":{\"382\":8,\"498\":1,\"749\":1}}],[\"characters\",{\"1\":{\"168\":1}}],[\"child\",{\"0\":{\"1768\":1,\"1769\":1},\"1\":{\"538\":2,\"1768\":1,\"1769\":1,\"3049\":2,\"3142\":2,\"3243\":1}}],[\"china\",{\"1\":{\"477\":2,\"1227\":2,\"1233\":1,\"2010\":3}}],[\"chronolocaldatetime<localdate>\",{\"1\":{\"468\":1}}],[\"chronolocaldate\",{\"1\":{\"466\":1}}],[\"chrono\",{\"1\":{\"462\":1}}],[\"chronounit\",{\"1\":{\"171\":1}}],[\"ch\",{\"1\":{\"262\":14,\"2602\":3}}],[\"c\",{\"0\":{\"645\":1,\"1296\":1},\"1\":{\"125\":2,\"424\":2,\"425\":1,\"555\":1,\"556\":1,\"557\":1,\"559\":2,\"576\":3,\"636\":1,\"645\":1,\"649\":1,\"651\":2,\"658\":1,\"663\":1,\"665\":1,\"666\":1,\"684\":1,\"688\":1,\"691\":1,\"696\":2,\"697\":3,\"698\":2,\"699\":1,\"700\":1,\"701\":1,\"702\":3,\"703\":2,\"704\":3,\"717\":1,\"753\":2,\"811\":1,\"886\":4,\"972\":1,\"1090\":1,\"1128\":1,\"1178\":2,\"1298\":1,\"1299\":1,\"1432\":3,\"1547\":1,\"1797\":1,\"1853\":1,\"1999\":3,\"2050\":4,\"2054\":4,\"2196\":1,\"2197\":1,\"2235\":1,\"2236\":1,\"2237\":1,\"2242\":1,\"2456\":1,\"2507\":1,\"2694\":2,\"2743\":1,\"2754\":1,\"2763\":1,\"2794\":1,\"2796\":3,\"2798\":2,\"2799\":3,\"2822\":3,\"3033\":1,\"3034\":1,\"3047\":1}}],[\"ctx\",{\"1\":{\"104\":2}}],[\"ctrl+alt+shift+s\",{\"1\":{\"2485\":1,\"2495\":1,\"2515\":1,\"2525\":1}}],[\"ctrl\",{\"1\":{\"94\":1,\"142\":1,\"2106\":1}}],[\"cmd\",{\"1\":{\"74\":1}}],[\"cookie是用来保证用户在未登录情况下的身份识别\",{\"1\":{\"2831\":1}}],[\"cookie是存储在浏览器端而session是存储在服务器端\",{\"1\":{\"2789\":1}}],[\"cookie与session的应用场景\",{\"0\":{\"2830\":1}}],[\"cookie与session的区别\",{\"0\":{\"2829\":1}}],[\"cookie可以通过setmaxage\",{\"1\":{\"2829\":1}}],[\"cookie可能有多个\",{\"1\":{\"2795\":1}}],[\"cookie最大3kb\",{\"1\":{\"2829\":1}}],[\"cookie不占服务器资源\",{\"1\":{\"2829\":1}}],[\"cookie不安全\",{\"1\":{\"2829\":1}}],[\"cookie不止是储存了键值对\",{\"1\":{\"2803\":1}}],[\"cookie中有jsessionid\",{\"1\":{\"2820\":1}}],[\"cookie中不能直接存储中文数据\",{\"1\":{\"2806\":1}}],[\"cookie一般用于存出少量的不太敏感的数据\",{\"1\":{\"2810\":1}}],[\"cookie存储数据在客户端浏览器\",{\"1\":{\"2810\":1}}],[\"cookie支持中文数据\",{\"1\":{\"2806\":1}}],[\"cookie文件自动失效\",{\"1\":{\"2805\":1}}],[\"cookie数据被销毁\",{\"1\":{\"2805\":1}}],[\"cookie保存起来\",{\"1\":{\"2802\":1}}],[\"cookie有关的所有操作都是基于请求头和响应头的\",{\"1\":{\"2800\":1}}],[\"cookie的特性\",{\"1\":{\"2810\":1}}],[\"cookie的共享\",{\"0\":{\"2807\":1}}],[\"cookie的保存时间\",{\"0\":{\"2805\":1}}],[\"cookie的适用范围\",{\"1\":{\"2803\":1}}],[\"cookie的识别\",{\"0\":{\"2803\":1}}],[\"cookie的工作原理\",{\"0\":{\"2800\":1}}],[\"cookie的相关方法\",{\"0\":{\"2792\":1}}],[\"cookie使用范例\",{\"0\":{\"2797\":1}}],[\"cookies\",{\"1\":{\"2795\":1}}],[\"cookie和session只有浏览器能用\",{\"1\":{\"2783\":1}}],[\"cookie\",{\"0\":{\"2790\":1},\"1\":{\"2602\":1,\"2789\":1,\"2793\":4,\"2794\":2,\"2795\":2,\"2796\":3,\"2798\":2,\"2799\":2,\"2801\":3,\"2802\":1,\"2804\":4,\"2805\":3,\"2806\":4,\"2820\":1,\"2822\":2,\"2829\":1}}],[\"color=\",{\"1\":{\"2959\":1,\"3018\":1,\"3019\":2}}],[\"columvalue\",{\"1\":{\"2352\":2,\"2355\":2,\"2405\":4}}],[\"columnlisthandler\",{\"1\":{\"2436\":1}}],[\"columnlabel\",{\"1\":{\"2352\":2,\"2355\":2,\"2405\":4}}],[\"columncount\",{\"1\":{\"2352\":1,\"2355\":2,\"2405\":4}}],[\"column\",{\"1\":{\"2345\":6,\"3031\":1}}],[\"columnname\",{\"1\":{\"2340\":1}}],[\"collscan\",{\"1\":{\"3121\":1}}],[\"collation\",{\"1\":{\"3081\":1}}],[\"collate=utf8\",{\"1\":{\"375\":1,\"376\":1,\"377\":1,\"378\":1,\"379\":1,\"380\":1,\"381\":1,\"382\":1,\"383\":1,\"384\":1,\"385\":1}}],[\"collate\",{\"1\":{\"375\":6,\"376\":1,\"377\":4,\"378\":4,\"379\":3,\"380\":2,\"381\":5,\"382\":2,\"383\":3,\"384\":6,\"385\":3}}],[\"collector\",{\"1\":{\"2242\":2}}],[\"collector接口的实现\",{\"1\":{\"2242\":1}}],[\"collectors的方法\",{\"0\":{\"2244\":1}}],[\"collectors\",{\"0\":{\"2243\":1},\"1\":{\"2223\":1,\"2242\":1,\"2243\":2}}],[\"collect\",{\"1\":{\"2223\":1,\"2242\":1,\"2243\":2}}],[\"collection接口\",{\"1\":{\"1633\":1}}],[\"collection接口继承了java\",{\"1\":{\"1588\":1}}],[\"collection接口继承图\",{\"0\":{\"1579\":1}}],[\"collection接口的方法\",{\"0\":{\"1584\":1}}],[\"collection接口实现对象\",{\"1\":{\"674\":1}}],[\"collections\",{\"0\":{\"679\":1,\"1693\":1},\"1\":{\"679\":1,\"680\":2,\"681\":2,\"682\":1,\"683\":2,\"684\":2,\"685\":1,\"686\":1,\"687\":1,\"688\":1,\"689\":1,\"690\":1,\"691\":1,\"810\":2,\"1237\":1,\"1694\":1,\"1695\":1,\"3066\":1,\"3198\":1}}],[\"collection<v>\",{\"1\":{\"722\":1}}],[\"collection<t>\",{\"1\":{\"691\":2}}],[\"collection<integer>\",{\"1\":{\"676\":1,\"677\":1,\"678\":1}}],[\"collection<\",{\"1\":{\"658\":1,\"663\":1,\"665\":1,\"666\":1,\"686\":2,\"687\":2,\"688\":1}}],[\"collection<string>\",{\"1\":{\"657\":1,\"658\":2,\"722\":1}}],[\"collection<e>\",{\"1\":{\"654\":1,\"694\":1}}],[\"collection\",{\"0\":{\"653\":1,\"1581\":1,\"2191\":1},\"1\":{\"653\":1,\"655\":1,\"698\":1,\"702\":1,\"1578\":2,\"1582\":1,\"1583\":1,\"1587\":1,\"1588\":1,\"1594\":1,\"1603\":1,\"1611\":1,\"2191\":1,\"2223\":1,\"2237\":1,\"3031\":1,\"3075\":1,\"3118\":1}}],[\"collection+\",{\"0\":{\"652\":1},\"1\":{\"34\":1}}],[\"collision\",{\"1\":{\"1651\":1}}],[\"coll2\",{\"1\":{\"658\":5,\"663\":2,\"665\":2,\"666\":2,\"667\":1}}],[\"coll\",{\"1\":{\"657\":4,\"658\":5,\"659\":1,\"660\":3,\"661\":2,\"662\":4,\"663\":2,\"664\":3,\"665\":3,\"666\":3,\"667\":1,\"669\":1,\"670\":2,\"671\":1,\"676\":2,\"677\":2,\"678\":3,\"686\":2,\"687\":2,\"1583\":2,\"1594\":5,\"1603\":5}}],[\"countdocument\",{\"1\":{\"3095\":1}}],[\"countdocuments\",{\"1\":{\"3095\":1}}],[\"countdocuments方法\",{\"1\":{\"3095\":1}}],[\"count++\",{\"1\":{\"933\":1,\"941\":1,\"956\":1}}],[\"count\",{\"0\":{\"2234\":1},\"1\":{\"933\":1,\"941\":1,\"956\":2,\"1160\":1,\"2234\":4,\"2408\":1,\"2409\":2,\"2438\":2,\"2439\":2,\"2443\":3,\"2893\":1,\"2953\":1,\"2954\":1,\"2957\":7,\"3013\":1,\"3014\":1,\"3095\":2}}],[\"country1\",{\"1\":{\"127\":1}}],[\"country\",{\"1\":{\"127\":1,\"1230\":1}}],[\"copyoption\",{\"1\":{\"1920\":2}}],[\"copyof\",{\"0\":{\"647\":1,\"2269\":1},\"1\":{\"647\":2}}],[\"copy文件\",{\"0\":{\"1888\":1}}],[\"copyfilewithbuffered\",{\"1\":{\"1838\":1}}],[\"copyfile\",{\"1\":{\"1823\":1}}],[\"copyfromarraytolist\",{\"1\":{\"1733\":1,\"1734\":1}}],[\"copy\",{\"0\":{\"689\":1},\"1\":{\"689\":2,\"1920\":1,\"2647\":1}}],[\"cos\",{\"1\":{\"522\":1}}],[\"code进行标记\",{\"1\":{\"810\":1}}],[\"code`\",{\"1\":{\"382\":3}}],[\"code\",{\"0\":{\"2376\":1},\"1\":{\"368\":1,\"810\":8,\"811\":1,\"812\":1,\"1251\":2,\"2452\":1}}],[\"core下的zip包即可\",{\"1\":{\"2452\":1}}],[\"corepoolsize\",{\"1\":{\"1565\":1}}],[\"core<\",{\"1\":{\"335\":1,\"2982\":1}}],[\"core\",{\"1\":{\"262\":10,\"3229\":1}}],[\"conﬁguration\",{\"1\":{\"3152\":1}}],[\"conﬁg数据库在内部使用\",{\"1\":{\"3060\":1}}],[\"conﬁg\",{\"1\":{\"3060\":1}}],[\"conf配置文件\",{\"1\":{\"3203\":1}}],[\"conflicts\",{\"1\":{\"2920\":1}}],[\"conf\",{\"1\":{\"2457\":1,\"2468\":1,\"2469\":1,\"2685\":1,\"3044\":2,\"3047\":1,\"3049\":1,\"3140\":1,\"3142\":1,\"3143\":1,\"3144\":1,\"3152\":1,\"3153\":1,\"3164\":1,\"3165\":1,\"3174\":1,\"3175\":1}}],[\"configterm\",{\"1\":{\"3156\":1,\"3159\":1,\"3160\":1}}],[\"configversion\",{\"1\":{\"3156\":1,\"3159\":1,\"3160\":1}}],[\"config>\",{\"1\":{\"2825\":2}}],[\"configurations中点击右上角的+号\",{\"1\":{\"2503\":1}}],[\"configuration>\",{\"1\":{\"262\":1}}],[\"configuration\",{\"1\":{\"165\":1,\"168\":1,\"348\":1,\"350\":1,\"390\":1,\"393\":1,\"2498\":2,\"2505\":1,\"3149\":1,\"3150\":2,\"3152\":1}}],[\"configurationproperties的类\",{\"0\":{\"164\":1}}],[\"configurationproperties注解时\",{\"1\":{\"165\":1}}],[\"configurationproperties注解绑定属性\",{\"1\":{\"163\":1}}],[\"configurationproperties注解绑定属性的类\",{\"1\":{\"162\":1}}],[\"configurationproperties注解是添加在方法上的\",{\"1\":{\"161\":1}}],[\"configurationproperties注解是写在类定义的上方\",{\"1\":{\"157\":1}}],[\"configurationproperties注解为第三方bean进行属性绑定\",{\"0\":{\"160\":1}}],[\"configurationproperties注解依然可以为第三方bean进行属性绑定\",{\"1\":{\"157\":1}}],[\"configurationproperties注解\",{\"1\":{\"157\":1}}],[\"configurationproperties注解就是用来指定加载的数据\",{\"1\":{\"156\":1}}],[\"configurationproperties绑定第三方bean\",{\"0\":{\"157\":1}}],[\"configurationproperties\",{\"0\":{\"156\":1},\"1\":{\"131\":1,\"156\":1,\"160\":1,\"164\":1,\"167\":1,\"168\":1,\"171\":1,\"172\":1,\"175\":1,\"176\":1}}],[\"configurableapplicationcontext就是一个ioc容器\",{\"1\":{\"104\":1}}],[\"configurableapplicationcontext\",{\"1\":{\"104\":2}}],[\"config\",{\"1\":{\"11\":1,\"150\":1,\"156\":1,\"216\":1,\"221\":2,\"226\":1,\"313\":1,\"341\":2,\"348\":2,\"390\":2,\"2552\":2,\"2556\":2,\"2856\":1,\"3044\":2,\"3161\":1,\"3165\":6}}],[\"con1\",{\"1\":{\"2155\":2}}],[\"con2\",{\"1\":{\"2123\":2,\"2125\":1,\"2127\":1,\"2156\":2}}],[\"con\",{\"1\":{\"2123\":2}}],[\"concern\",{\"1\":{\"3161\":2}}],[\"concurrent\",{\"1\":{\"1530\":1,\"1536\":1}}],[\"concat\",{\"0\":{\"420\":1},\"1\":{\"420\":2}}],[\"conncetdb方法连接数据库\",{\"1\":{\"2073\":1}}],[\"conncetdb方法用于连接数据库\",{\"1\":{\"2073\":1}}],[\"conn\",{\"1\":{\"1153\":3,\"2297\":2,\"2299\":2,\"2300\":2,\"2303\":2,\"2319\":2,\"2321\":1,\"2325\":5,\"2327\":2,\"2328\":3,\"2329\":4,\"2333\":4,\"2349\":4,\"2352\":4,\"2355\":4,\"2364\":3,\"2365\":3,\"2372\":2,\"2373\":3,\"2376\":3,\"2377\":5,\"2386\":2,\"2387\":9,\"2391\":5,\"2404\":2,\"2405\":8,\"2407\":7,\"2408\":14,\"2409\":28,\"2421\":1,\"2424\":1,\"2427\":2,\"2428\":4,\"2434\":4,\"2435\":5,\"2438\":3,\"2439\":3,\"2440\":3,\"2441\":3,\"2442\":3,\"2443\":4}}],[\"connect\",{\"1\":{\"2297\":1,\"3057\":1}}],[\"connect方法的第二个参数就是properties类\",{\"1\":{\"2297\":1}}],[\"connectivity\",{\"1\":{\"2279\":1}}],[\"connections\",{\"1\":{\"3049\":1,\"3142\":1}}],[\"connectioninitsqls\",{\"1\":{\"2426\":1}}],[\"connection对象调用preparedstatement方法执行预编译sql获取preparedstatemet对象\",{\"1\":{\"2319\":1}}],[\"connectiontest\",{\"1\":{\"2303\":1}}],[\"connectiondb1\",{\"1\":{\"2297\":1,\"2303\":1}}],[\"connection\",{\"1\":{\"1153\":2,\"2297\":2,\"2299\":1,\"2300\":1,\"2303\":1,\"2316\":1,\"2319\":3,\"2325\":1,\"2327\":2,\"2328\":1,\"2329\":1,\"2333\":1,\"2349\":1,\"2352\":1,\"2355\":1,\"2364\":1,\"2365\":1,\"2372\":1,\"2373\":1,\"2376\":1,\"2377\":1,\"2380\":1,\"2381\":1,\"2382\":1,\"2386\":1,\"2387\":1,\"2389\":1,\"2390\":5,\"2391\":2,\"2404\":2,\"2405\":4,\"2407\":7,\"2408\":7,\"2409\":7,\"2414\":1,\"2424\":1,\"2427\":2,\"2428\":1,\"2434\":5,\"2435\":5,\"2438\":1,\"2439\":1,\"2440\":1,\"2441\":1,\"2442\":1,\"2443\":1,\"2602\":1,\"2860\":1,\"3056\":1,\"3224\":1}}],[\"connectdb方法中\",{\"1\":{\"2073\":1}}],[\"connector\",{\"1\":{\"270\":1,\"280\":1,\"321\":1,\"336\":1,\"389\":1,\"2289\":1,\"2291\":1}}],[\"const\",{\"1\":{\"832\":1}}],[\"constructor对象都有setaccessible\",{\"1\":{\"2069\":1}}],[\"constructor\",{\"0\":{\"628\":1},\"1\":{\"602\":1,\"1065\":1,\"1405\":1,\"1412\":1,\"1413\":1,\"1427\":1,\"2002\":1,\"2038\":1,\"2050\":4,\"2067\":4}}],[\"constructors\",{\"1\":{\"600\":2,\"2050\":2}}],[\"constructor<person>\",{\"1\":{\"629\":1,\"2009\":1,\"2010\":1}}],[\"constructor<t>\",{\"1\":{\"602\":1,\"628\":1}}],[\"constructor<\",{\"1\":{\"600\":2,\"601\":2}}],[\"consumer中的方法为\",{\"1\":{\"2156\":1}}],[\"consumer<\",{\"1\":{\"2257\":1}}],[\"consumer<string>\",{\"1\":{\"2123\":4,\"2125\":1,\"2127\":1,\"2155\":1,\"2156\":1}}],[\"consumer<t>\",{\"1\":{\"726\":1,\"2144\":1}}],[\"consumer接口的accept方法\",{\"0\":{\"2123\":1}}],[\"consumer\",{\"0\":{\"726\":1},\"1\":{\"2237\":1,\"2257\":1}}],[\"cons\",{\"1\":{\"601\":2,\"602\":2,\"629\":3,\"2009\":2,\"2010\":3,\"2038\":2}}],[\"consoleappender\",{\"1\":{\"262\":1}}],[\"console\",{\"1\":{\"252\":1,\"253\":1,\"261\":1,\"262\":6}}],[\"content\",{\"1\":{\"2890\":1,\"3073\":1,\"3076\":2,\"3099\":1,\"3168\":1}}],[\"contextloaderlistener\",{\"1\":{\"2725\":2,\"2726\":1}}],[\"contextloads\",{\"1\":{\"180\":1,\"181\":1,\"275\":1,\"284\":1}}],[\"contextdestroyed\",{\"1\":{\"2714\":1,\"2724\":1}}],[\"contextinitialized\",{\"1\":{\"2714\":1,\"2724\":1,\"2725\":2}}],[\"contextpath+\",{\"1\":{\"2668\":1}}],[\"contextpath\",{\"1\":{\"2598\":2,\"2668\":1}}],[\"context配置的\",{\"1\":{\"2597\":1}}],[\"context\",{\"0\":{\"2501\":1},\"1\":{\"1990\":2,\"2641\":1,\"2686\":2,\"2690\":3,\"2694\":4}}],[\"contextname>\",{\"1\":{\"262\":1}}],[\"control\",{\"1\":{\"1954\":1,\"2602\":1,\"3182\":1}}],[\"controller+view\",{\"1\":{\"2765\":1}}],[\"controller只需要响应json格式数据即可\",{\"1\":{\"363\":1}}],[\"controller作为表现层\",{\"1\":{\"363\":1}}],[\"controller修正功能\",{\"1\":{\"338\":1}}],[\"controller开发\",{\"1\":{\"338\":2}}],[\"controller\",{\"0\":{\"363\":1,\"364\":1,\"1291\":1},\"1\":{\"249\":2,\"313\":1,\"369\":1,\"1291\":5,\"2754\":1,\"2760\":1}}],[\"container\",{\"1\":{\"1587\":1}}],[\"containsvalue\",{\"0\":{\"717\":1},\"1\":{\"717\":3}}],[\"containskey\",{\"0\":{\"716\":1},\"1\":{\"716\":3}}],[\"containsall\",{\"0\":{\"663\":1},\"1\":{\"663\":2}}],[\"contains\",{\"0\":{\"415\":1,\"662\":1},\"1\":{\"415\":2,\"662\":4}}],[\"continue是终止\",{\"1\":{\"949\":1}}],[\"continue默认跳过包裹此关键字最近的一层循环\",{\"1\":{\"947\":1}}],[\"continue用于结束当次循环\",{\"1\":{\"947\":1}}],[\"continue\",{\"0\":{\"947\":1},\"1\":{\"943\":1,\"949\":1,\"950\":2}}],[\"com中cookie可以共享\",{\"1\":{\"2809\":1}}],[\"com和news\",{\"1\":{\"2809\":1}}],[\"com<\",{\"1\":{\"2771\":1}}],[\"comfigurations\",{\"1\":{\"2498\":2}}],[\"com1\",{\"1\":{\"2129\":2,\"2161\":2,\"2164\":2}}],[\"com2\",{\"1\":{\"2114\":1,\"2129\":1,\"2162\":2,\"2165\":1}}],[\"compound\",{\"1\":{\"3106\":1}}],[\"component\",{\"1\":{\"131\":1,\"156\":1,\"167\":1,\"175\":1,\"176\":1}}],[\"compass可视化查看\",{\"0\":{\"3119\":1}}],[\"compass中查看\",{\"1\":{\"3112\":1,\"3113\":1}}],[\"compass是mongodb官方提供的可视化数据管理工具\",{\"1\":{\"3055\":1}}],[\"compass\",{\"0\":{\"3054\":1,\"3056\":1,\"3217\":1},\"1\":{\"3054\":1,\"3055\":2,\"3166\":1}}],[\"compatibility\",{\"1\":{\"2858\":2}}],[\"compare方法\",{\"0\":{\"2129\":1}}],[\"compareb\",{\"1\":{\"1270\":1}}],[\"comparea\",{\"1\":{\"1267\":4,\"1268\":1,\"1270\":1}}],[\"compare\",{\"0\":{\"506\":1},\"1\":{\"498\":2,\"504\":1,\"508\":1,\"509\":1,\"645\":1,\"684\":1,\"1656\":1,\"1657\":4,\"1658\":2,\"1688\":2,\"2114\":1,\"2129\":3,\"2161\":2,\"2162\":4,\"2164\":1,\"2227\":1,\"2235\":1,\"2236\":1}}],[\"compareto的重写\",{\"1\":{\"1657\":1}}],[\"compareto\",{\"0\":{\"412\":1,\"497\":1,\"525\":1,\"537\":1},\"1\":{\"412\":2,\"495\":1,\"497\":2,\"498\":2,\"501\":2,\"502\":1,\"508\":1,\"525\":2,\"537\":2,\"1210\":2,\"1639\":1,\"1656\":1,\"1657\":2,\"2048\":1,\"2129\":2,\"2164\":1,\"2165\":1}}],[\"comparator中的int\",{\"1\":{\"2162\":1}}],[\"comparator接口\",{\"0\":{\"2129\":1}}],[\"comparator接口的实例\",{\"1\":{\"1658\":1}}],[\"comparator接口是用来实现定制排序的\",{\"1\":{\"504\":1}}],[\"comparator<string>\",{\"1\":{\"2164\":1,\"2165\":1}}],[\"comparator<integer>com2\",{\"1\":{\"2129\":1}}],[\"comparator<integer>\",{\"1\":{\"645\":1,\"2114\":1,\"2129\":2,\"2161\":1,\"2162\":1}}],[\"comparator<\",{\"0\":{\"645\":1},\"1\":{\"645\":1,\"684\":1,\"686\":1,\"687\":1}}],[\"comparator<person>\",{\"1\":{\"509\":1}}],[\"comparator<t>\",{\"1\":{\"504\":1}}],[\"comparator常作为collections\",{\"1\":{\"505\":1}}],[\"comparator\",{\"0\":{\"504\":1,\"2227\":1},\"1\":{\"493\":1,\"494\":1,\"504\":1,\"508\":1,\"684\":1,\"1658\":2,\"1688\":1,\"2129\":1,\"2227\":1,\"2235\":1,\"2236\":1}}],[\"comparable排序示例\",{\"1\":{\"509\":1}}],[\"comparable接口的排序规则不适合当前的操作\",{\"1\":{\"504\":1}}],[\"comparable接口的方法\",{\"1\":{\"494\":1}}],[\"comparable接口而又不方便修改代码\",{\"1\":{\"504\":1}}],[\"comparable接口强行对实现它的每个类的对象进行整体排序\",{\"1\":{\"495\":1}}],[\"comparable接口\",{\"1\":{\"495\":1,\"1639\":1}}],[\"comparable与comparator的区别\",{\"0\":{\"494\":1}}],[\"comparable\",{\"0\":{\"495\":1},\"1\":{\"493\":1,\"494\":1,\"497\":1,\"595\":1,\"1210\":3}}],[\"comparable<\",{\"1\":{\"684\":1,\"686\":1,\"687\":1}}],[\"comparable<file>\",{\"1\":{\"538\":1}}],[\"comparable<bigdecimal>\",{\"1\":{\"530\":1}}],[\"comparable<biginteger>\",{\"1\":{\"529\":1}}],[\"comparable<person>\",{\"1\":{\"501\":1}}],[\"comparable<t>\",{\"1\":{\"495\":1}}],[\"comparable<instant>\",{\"1\":{\"475\":1}}],[\"comparable<localtime>\",{\"1\":{\"467\":1}}],[\"complextye\",{\"1\":{\"2781\":1}}],[\"complextype>\",{\"1\":{\"2781\":2}}],[\"complextype\",{\"1\":{\"2781\":3}}],[\"computer\",{\"1\":{\"1264\":3}}],[\"compile\",{\"0\":{\"748\":1},\"1\":{\"739\":1,\"748\":3,\"750\":1,\"751\":1,\"752\":1,\"753\":1}}],[\"comp\",{\"1\":{\"686\":1,\"687\":1}}],[\"community\",{\"1\":{\"3040\":1}}],[\"commitandclosequietly\",{\"1\":{\"2434\":1}}],[\"commitandclose\",{\"1\":{\"2434\":1}}],[\"committed\",{\"1\":{\"2390\":1,\"2391\":1}}],[\"commit\",{\"0\":{\"2381\":1},\"1\":{\"2377\":1,\"2381\":1,\"2387\":1}}],[\"command\",{\"1\":{\"771\":1,\"1566\":1,\"3161\":1,\"3204\":1}}],[\"comment集合如果不存在\",{\"1\":{\"3074\":1}}],[\"comments\",{\"1\":{\"749\":1}}],[\"comment=\",{\"1\":{\"375\":1,\"376\":1,\"377\":1,\"378\":1,\"379\":1,\"380\":1,\"381\":1,\"382\":1,\"383\":1,\"384\":1,\"385\":1}}],[\"comment\",{\"1\":{\"375\":12,\"376\":8,\"377\":14,\"378\":13,\"379\":12,\"380\":9,\"381\":7,\"382\":19,\"383\":10,\"384\":10,\"385\":9,\"3073\":1,\"3076\":1,\"3078\":1,\"3082\":1,\"3083\":1,\"3084\":1,\"3086\":1,\"3087\":1,\"3091\":2,\"3092\":2,\"3093\":1,\"3095\":2,\"3096\":2,\"3097\":1,\"3099\":2,\"3100\":1,\"3101\":2,\"3102\":2,\"3109\":1,\"3112\":2,\"3113\":2,\"3116\":2,\"3120\":1,\"3122\":1,\"3168\":1,\"3222\":1,\"3224\":1,\"3225\":1}}],[\"commons\",{\"1\":{\"2431\":1,\"2433\":3,\"2647\":1}}],[\"common\",{\"1\":{\"313\":1,\"1992\":1}}],[\"com\",{\"0\":{\"2227\":1},\"1\":{\"73\":1,\"105\":1,\"130\":1,\"159\":1,\"180\":1,\"198\":1,\"199\":1,\"200\":1,\"249\":2,\"262\":1,\"267\":1,\"271\":1,\"275\":1,\"281\":1,\"341\":1,\"390\":1,\"1264\":5,\"1658\":2,\"1941\":1,\"1945\":2,\"1946\":1,\"1947\":2,\"1948\":1,\"1983\":1,\"1990\":3,\"1993\":1,\"1995\":1,\"2004\":1,\"2227\":1,\"2297\":2,\"2298\":1,\"2299\":1,\"2300\":1,\"2325\":1,\"2364\":1,\"2409\":2,\"2424\":1,\"2438\":1,\"2809\":1,\"2907\":1,\"2908\":2,\"2925\":1,\"2926\":2,\"2972\":1,\"3022\":1,\"3040\":1,\"3053\":1,\"3055\":1}}],[\"不认证通过compass直接登录\",{\"1\":{\"3204\":1}}],[\"不太安全\",{\"1\":{\"3179\":1}}],[\"不显示所有字段\",{\"1\":{\"3093\":1}}],[\"不得含有\",{\"1\":{\"3061\":1}}],[\"不返回全量查询的结果\",{\"1\":{\"3016\":1}}],[\"不配置就采用默认的\",{\"1\":{\"2959\":1}}],[\"不配置的话有缺省值\",{\"1\":{\"2702\":1}}],[\"不设置请求体\",{\"1\":{\"2931\":1}}],[\"不适用常规搜索的场景\",{\"0\":{\"2850\":1}}],[\"不适用于属性\",{\"1\":{\"1151\":1}}],[\"不方便维护\",{\"1\":{\"2668\":1}}],[\"不写属性就相当于是value\",{\"1\":{\"2571\":1}}],[\"不勾选great\",{\"1\":{\"2493\":1}}],[\"不安全协议\",{\"1\":{\"2449\":1}}],[\"不影响性能\",{\"1\":{\"2426\":1}}],[\"不体现第三方api\",{\"0\":{\"2298\":1}}],[\"不按顺序\",{\"1\":{\"2197\":1}}],[\"不灵活\",{\"1\":{\"2076\":1}}],[\"不利于程序的扩展\",{\"1\":{\"2074\":1}}],[\"不够表示所有字符\",{\"1\":{\"1863\":1}}],[\"不但会关闭流\",{\"1\":{\"1826\":1}}],[\"不直接连接到数据源或目的地\",{\"1\":{\"1775\":1,\"1780\":1}}],[\"不直接连接文件\",{\"1\":{\"1775\":1}}],[\"不具有继承关系\",{\"1\":{\"1741\":1}}],[\"不具备父子关系\",{\"0\":{\"1737\":1}}],[\"不保留任何数据的副本\",{\"1\":{\"3131\":1}}],[\"不保留泛型\",{\"0\":{\"1723\":1,\"1724\":1}}],[\"不保证映射的顺序\",{\"1\":{\"1664\":1}}],[\"不等于随机性\",{\"1\":{\"1634\":1}}],[\"不推荐\",{\"0\":{\"1596\":1},\"1\":{\"1720\":1,\"2372\":1,\"2456\":1,\"3067\":1}}],[\"不推荐使用\",{\"1\":{\"854\":1}}],[\"不涉及到持久化的存储\",{\"1\":{\"1572\":1}}],[\"不如怎么验证都是失败\",{\"1\":{\"3201\":1}}],[\"不如直接return\",{\"1\":{\"1522\":1}}],[\"不如无法删除成功\",{\"1\":{\"664\":1}}],[\"不需要加\",{\"1\":{\"2667\":1}}],[\"不需要加虚拟目录\",{\"1\":{\"2667\":1}}],[\"不需要深入代码\",{\"1\":{\"2304\":1}}],[\"不需要建立连接\",{\"1\":{\"1957\":1}}],[\"不需要每次都创建\",{\"1\":{\"1565\":1}}],[\"不需要额外加static\",{\"1\":{\"1495\":1}}],[\"不需要重复new\",{\"1\":{\"1494\":1}}],[\"不需要再写sql\",{\"1\":{\"348\":1}}],[\"不支持基于范围的查询\",{\"1\":{\"3107\":1}}],[\"不支持整数\",{\"1\":{\"3034\":1}}],[\"不支持重复注解\",{\"1\":{\"1419\":1}}],[\"不支持直接string类型转其他类型\",{\"1\":{\"887\":1}}],[\"不常用\",{\"0\":{\"1415\":1,\"1416\":1},\"1\":{\"2602\":1,\"2778\":1}}],[\"不确定变量的类型时\",{\"1\":{\"1728\":1}}],[\"不确定\",{\"1\":{\"1252\":1}}],[\"不确定部分设计成抽象方法\",{\"1\":{\"1251\":1}}],[\"不确定的部分\",{\"1\":{\"1251\":1}}],[\"不确定的地方加\",{\"1\":{\"916\":1}}],[\"不实例化子类\",{\"1\":{\"1249\":1}}],[\"不重名的情况下\",{\"1\":{\"1209\":1}}],[\"不比较数据类型\",{\"1\":{\"1178\":1}}],[\"不一定非得用个内循环打印char数组\",{\"1\":{\"1807\":1}}],[\"不一定类型要相同\",{\"1\":{\"1178\":1}}],[\"不一定是\",{\"1\":{\"646\":1}}],[\"不进行访问检测\",{\"1\":{\"2069\":1}}],[\"不进行向下转型\",{\"1\":{\"1167\":1}}],[\"不进行舍入\",{\"1\":{\"536\":1}}],[\"不报错\",{\"1\":{\"1127\":1}}],[\"不报错的情况\",{\"1\":{\"868\":1}}],[\"不导入包直接用\",{\"0\":{\"1095\":1}}],[\"不对外暴露的私有的方法\",{\"1\":{\"1058\":1}}],[\"不允许重复\",{\"1\":{\"1661\":1}}],[\"不允许多重继承\",{\"1\":{\"1115\":1}}],[\"不允许外部干涉\",{\"1\":{\"1052\":1}}],[\"不允许使用tab键\",{\"1\":{\"122\":1}}],[\"不继续执行了\",{\"1\":{\"1029\":1}}],[\"不赋值\",{\"1\":{\"1019\":1}}],[\"不再使用\",{\"1\":{\"2426\":1}}],[\"不再建议使用警告\",{\"1\":{\"1429\":1}}],[\"不再被建议使用\",{\"1\":{\"1425\":1,\"1432\":1}}],[\"不再强制相等\",{\"1\":{\"986\":1}}],[\"不再这里提及\",{\"1\":{\"11\":1}}],[\"不初始化\",{\"1\":{\"986\":1}}],[\"不为数组内部的内层数组指定长度\",{\"1\":{\"986\":1}}],[\"不管是web服务还是后台服务\",{\"1\":{\"2750\":1}}],[\"不管是get还是post请求\",{\"1\":{\"2626\":1}}],[\"不管是基本数据类型还是他们的包装类都无能为力\",{\"1\":{\"529\":1}}],[\"不管你重复x\",{\"1\":{\"1180\":1}}],[\"不管这个return处于多少层循环之内\",{\"1\":{\"948\":1}}],[\"不建议省略\",{\"1\":{\"923\":1}}],[\"不属于基本数据类型\",{\"1\":{\"875\":1}}],[\"不加l和f发生的自动类型转换\",{\"0\":{\"868\":1}}],[\"不受具体操作系统的影响\",{\"1\":{\"844\":1}}],[\"不受具体os的影响\",{\"1\":{\"838\":1}}],[\"不可写操作\",{\"1\":{\"3131\":1}}],[\"不可分词\",{\"1\":{\"2963\":1}}],[\"不可重复性\",{\"1\":{\"1634\":1}}],[\"不可重复的\",{\"1\":{\"1664\":2,\"1670\":2}}],[\"不可重复的数据\",{\"1\":{\"1578\":2,\"1633\":1,\"1634\":1}}],[\"不可重复的需求\",{\"1\":{\"1574\":1}}],[\"不可以继承的观点是\",{\"1\":{\"1118\":1}}],[\"不可以在方法内部定义方法\",{\"1\":{\"1033\":1}}],[\"不可以使用权限修饰符\",{\"1\":{\"1025\":1}}],[\"不可以使用0或非\",{\"1\":{\"860\":1}}],[\"不可以使用关键字和保留字\",{\"1\":{\"834\":1}}],[\"不可变性\",{\"1\":{\"878\":1}}],[\"不可变的字符序列\",{\"1\":{\"442\":1}}],[\"不易static修饰\",{\"1\":{\"828\":1}}],[\"不开多行模式的话整个字符串会被视作一行\",{\"1\":{\"749\":1}}],[\"不提供参数\",{\"1\":{\"727\":1,\"2144\":1}}],[\"不指定的话就会根据字段名自动生成一个\",{\"1\":{\"3111\":1}}],[\"不指定字符集\",{\"0\":{\"1847\":1,\"1855\":1}}],[\"不指定内层长度\",{\"1\":{\"986\":1}}],[\"不指定就是排序整个数组\",{\"1\":{\"644\":1}}],[\"不指定舍入策略\",{\"1\":{\"535\":1}}],[\"不会显示只存在于内存中的数据库\",{\"1\":{\"3064\":1}}],[\"不会删除所有索引\",{\"1\":{\"2895\":1}}],[\"不会执行放行后的逻辑\",{\"1\":{\"2699\":1}}],[\"不会存在oracle下pscache占用内存过多的问题\",{\"1\":{\"2426\":1}}],[\"不会触发此类的初始化\",{\"1\":{\"2029\":1}}],[\"不会导致子类初始化\",{\"1\":{\"2029\":1}}],[\"不会导致其他对象中同样的属性值的修改\",{\"1\":{\"1227\":1}}],[\"不会发生类的初始化\",{\"1\":{\"2029\":1}}],[\"不会创建文件\",{\"1\":{\"1887\":1}}],[\"不会直接写到文件\",{\"1\":{\"1826\":1}}],[\"不会弄错\",{\"1\":{\"1702\":1}}],[\"不会释放锁\",{\"1\":{\"1555\":1}}],[\"不会释放锁的操作\",{\"0\":{\"1527\":1}}],[\"不会出现提示\",{\"1\":{\"1540\":1}}],[\"不会出现异常\",{\"1\":{\"1540\":1}}],[\"不会再执行其他catch了\",{\"1\":{\"1340\":1}}],[\"不会随着对象的不同而不同的\",{\"1\":{\"1237\":1}}],[\"不会报错\",{\"1\":{\"897\":1,\"1106\":1,\"1360\":1}}],[\"不会改变源对象\",{\"1\":{\"2193\":1}}],[\"不会改变变量类型\",{\"1\":{\"897\":1}}],[\"不会改变变量本身的数据类型\",{\"1\":{\"897\":1}}],[\"不会改变值的大小\",{\"1\":{\"535\":1}}],[\"不会自动重置\",{\"1\":{\"677\":1,\"1592\":1}}],[\"不会进回收站\",{\"1\":{\"562\":1}}],[\"不能以xml开头\",{\"1\":{\"2772\":1}}],[\"不能在多个资源使用request共享数据\",{\"1\":{\"2664\":1}}],[\"不能在main中直接调用\",{\"1\":{\"1032\":1}}],[\"不能从一个服务器通过转发访问另一台服务器\",{\"1\":{\"2656\":1}}],[\"不能打war包\",{\"1\":{\"2514\":1}}],[\"不能被浏览器直接访问的目录\",{\"1\":{\"2474\":1,\"2475\":1}}],[\"不能被static\",{\"1\":{\"1069\":1}}],[\"不能实例化\",{\"1\":{\"2399\":1}}],[\"不能实例化没用\",{\"1\":{\"1161\":1}}],[\"不能再次使用\",{\"1\":{\"2207\":1}}],[\"不能再抛了\",{\"1\":{\"1352\":1}}],[\"不能用来搜索\",{\"1\":{\"2963\":1}}],[\"不能用这个方法来获取随机元素\",{\"1\":{\"2233\":1}}],[\"不能用在创建对象上\",{\"0\":{\"1757\":1},\"1\":{\"1757\":1}}],[\"不能用在泛型类的声明上\",{\"0\":{\"1756\":1},\"1\":{\"1756\":1}}],[\"不能用在泛型方法声明上\",{\"0\":{\"1755\":1},\"1\":{\"1755\":1}}],[\"不能用基本数据类型填充\",{\"1\":{\"1716\":1}}],[\"不能向其内部添加数据\",{\"1\":{\"1744\":1}}],[\"不能互相赋值\",{\"0\":{\"1737\":1}}],[\"不能直接demo\",{\"1\":{\"2571\":1}}],[\"不能直接\",{\"1\":{\"1721\":1}}],[\"不能是空字符串\",{\"1\":{\"3061\":1}}],[\"不能是基本数据类型\",{\"1\":{\"1711\":1}}],[\"不能是boolean\",{\"1\":{\"927\":1}}],[\"不能存储null的key和value\",{\"1\":{\"1667\":1}}],[\"不能保证元素的排列顺序\",{\"1\":{\"1636\":1}}],[\"不能返回true\",{\"1\":{\"1634\":1}}],[\"不能满足\",{\"1\":{\"1574\":1}}],[\"不能包裹\",{\"1\":{\"1520\":1}}],[\"不能开启子线程\",{\"1\":{\"1476\":1}}],[\"不能通过post\",{\"1\":{\"2886\":1}}],[\"不能通过调用run开始子线程\",{\"0\":{\"1476\":1}}],[\"不能通过new创建示例\",{\"1\":{\"747\":1}}],[\"不能获取用户的年龄了\",{\"1\":{\"1286\":1}}],[\"不能获取目录\",{\"1\":{\"544\":1}}],[\"不能定义一个usb父类让他们都去继承\",{\"1\":{\"1257\":1}}],[\"不能定义重名的变量\",{\"1\":{\"825\":1}}],[\"不能把123ab或\",{\"1\":{\"1199\":1}}],[\"不能转\",{\"1\":{\"1170\":1}}],[\"不能强转\",{\"1\":{\"1167\":1,\"1198\":1}}],[\"不能同时出现\",{\"1\":{\"1139\":1}}],[\"不能继承\",{\"1\":{\"1118\":1}}],[\"不能多重继承\",{\"1\":{\"1115\":1}}],[\"不能重写\",{\"0\":{\"1102\":1}}],[\"不能有return语句返回值\",{\"1\":{\"1069\":1}}],[\"不能调用非静态的结构\",{\"1\":{\"1279\":1}}],[\"不能调用\",{\"1\":{\"993\":1}}],[\"不能访问内层数据\",{\"1\":{\"990\":1}}],[\"不能访问文件内容本身\",{\"1\":{\"538\":1,\"1761\":1}}],[\"不能声明范围\",{\"1\":{\"927\":1}}],[\"不能误写成\",{\"1\":{\"900\":1}}],[\"不能随意创建\",{\"1\":{\"750\":1,\"756\":1}}],[\"不能递归删除\",{\"1\":{\"562\":2}}],[\"不能使用request对象来共享数据\",{\"1\":{\"2665\":1}}],[\"不能使用this关键字\",{\"1\":{\"1236\":1}}],[\"不能使用public\",{\"1\":{\"1212\":1}}],[\"不能使用原有的value进行赋值\",{\"1\":{\"880\":3}}],[\"不能使用单引号\",{\"1\":{\"875\":1}}],[\"不能使用双引号\",{\"1\":{\"853\":1,\"856\":1}}],[\"不能使用\",{\"1\":{\"491\":1}}],[\"不能处理闰秒等\",{\"1\":{\"460\":1}}],[\"不能浪费了\",{\"1\":{\"243\":1}}],[\"不是严格要求的\",{\"1\":{\"3079\":1}}],[\"不是delete请求\",{\"1\":{\"2918\":1}}],[\"不是接口\",{\"1\":{\"2562\":1}}],[\"不是构造该类对象的构造器\",{\"1\":{\"2028\":1}}],[\"不是插入写\",{\"1\":{\"1889\":1}}],[\"不是追加写\",{\"1\":{\"1889\":1}}],[\"不是文件覆盖\",{\"1\":{\"1889\":1}}],[\"不是文本资源\",{\"1\":{\"1818\":1}}],[\"不是同一个\",{\"1\":{\"1737\":1}}],[\"不是也可以存储数据吗\",{\"1\":{\"1701\":1}}],[\"不是通过比较两个对象的equals和hashcode来判断是否相同的\",{\"1\":{\"1656\":1}}],[\"不是很常用\",{\"1\":{\"570\":1}}],[\"不是线程安全的\",{\"1\":{\"1636\":1}}],[\"不是线程安全\",{\"1\":{\"460\":1}}],[\"不是final\",{\"1\":{\"445\":1}}],[\"不包括这个\",{\"1\":{\"1312\":1}}],[\"不包括私有属性\",{\"1\":{\"606\":1}}],[\"不包括end\",{\"1\":{\"454\":1}}],[\"不包含使用$nin操作符\",{\"1\":{\"3101\":1}}],[\"不包含\",{\"1\":{\"1918\":1}}],[\"不包含static和transient修饰的成员变量\",{\"1\":{\"1905\":1}}],[\"不包含toindex\",{\"1\":{\"646\":1}}],[\"不包含父类中声明的方法\",{\"1\":{\"609\":1,\"2047\":1}}],[\"不包含父类中声明的属性\",{\"1\":{\"605\":1,\"2043\":1}}],[\"不包含private构造器\",{\"1\":{\"600\":1}}],[\"不包含路径\",{\"1\":{\"546\":1}}],[\"不包含1\",{\"1\":{\"513\":1}}],[\"不包含end\",{\"1\":{\"453\":1}}],[\"不区分大小写\",{\"1\":{\"423\":1}}],[\"不只是显示sql\",{\"1\":{\"348\":1}}],[\"不考虑前端服务器\",{\"1\":{\"338\":1}}],[\"不用管\",{\"1\":{\"3109\":1}}],[\"不用再进行判断\",{\"1\":{\"2615\":1}}],[\"不用写测设类\",{\"1\":{\"2529\":1}}],[\"不用修改这个配置文件\",{\"1\":{\"2507\":1}}],[\"不用安装\",{\"1\":{\"2453\":1}}],[\"不用进行强转了\",{\"1\":{\"1709\":1}}],[\"不用进行强转\",{\"1\":{\"1709\":1}}],[\"不用点\",{\"1\":{\"1537\":1}}],[\"不用try\",{\"1\":{\"1347\":1}}],[\"不用关注\",{\"1\":{\"1298\":1,\"2697\":2}}],[\"不用实现接口也能调用这些方法\",{\"1\":{\"1272\":1}}],[\"不用实现类也可以\",{\"1\":{\"1272\":1}}],[\"不用记\",{\"1\":{\"916\":1}}],[\"不用更改\",{\"1\":{\"314\":1}}],[\"不用指定版本\",{\"1\":{\"91\":1}}],[\"不采用idea内置的maven\",{\"1\":{\"298\":1}}],[\"不含\",{\"1\":{\"277\":1}}],[\"不容易维护\",{\"1\":{\"227\":1}}],[\"不同tomcat服务器间cookie的共享\",{\"0\":{\"2809\":1}}],[\"不同页面无法共享域中的数据\",{\"1\":{\"2672\":1}}],[\"不同数据库不一样\",{\"1\":{\"2426\":1}}],[\"不同数据类型的数组\",{\"1\":{\"2199\":1}}],[\"不同数据的hash值是不同的\",{\"1\":{\"1642\":1}}],[\"不同泛型的父子类\",{\"1\":{\"1741\":1}}],[\"不同泛型的类\",{\"0\":{\"1737\":1}}],[\"不同就添加成功\",{\"1\":{\"1642\":1}}],[\"不同于子集和集合的关系\",{\"1\":{\"1113\":1}}],[\"不同包下的同名类\",{\"0\":{\"1096\":1}}],[\"不同\",{\"1\":{\"1037\":1,\"1650\":1}}],[\"不同点\",{\"0\":{\"1025\":1},\"1\":{\"1555\":1}}],[\"不同类型之间的运算\",{\"0\":{\"862\":1}}],[\"不同字符集编码的字符进行传输时\",{\"1\":{\"855\":1}}],[\"不同的会话\",{\"0\":{\"2786\":1}}],[\"不同的框架对应不同的层\",{\"1\":{\"2761\":1}}],[\"不同的访问条件\",{\"1\":{\"2523\":1}}],[\"不同的tomcat模板可以起不同的名字\",{\"1\":{\"2505\":1}}],[\"不同的实现的集合\",{\"1\":{\"2283\":1}}],[\"不同的数据库厂商\",{\"1\":{\"2283\":1}}],[\"不同的函数\",{\"1\":{\"2133\":1}}],[\"不同的进程有不同的端口号\",{\"1\":{\"1937\":1}}],[\"不同的哈希算法\",{\"1\":{\"1651\":1}}],[\"不同的类对hashcode的重写方式\",{\"1\":{\"1650\":1}}],[\"不同的线程分别占用对方需要的同步资源不放弃\",{\"1\":{\"1540\":1}}],[\"不同的子类对顺序要求不同\",{\"1\":{\"667\":1}}],[\"不同的collection子类都重写了equal方法\",{\"1\":{\"667\":1}}],[\"不同的位置优先级不同\",{\"1\":{\"216\":1}}],[\"不同配置相互叠加\",{\"1\":{\"218\":1}}],[\"不携带args参数\",{\"1\":{\"213\":1}}],[\"不带spring\",{\"0\":{\"199\":1}}],[\"不使用骨架创建web项目\",{\"0\":{\"2492\":1}}],[\"不使用反射\",{\"0\":{\"2008\":1}}],[\"不使用通配符泛型\",{\"0\":{\"1747\":1}}],[\"不使用泛型的缺点\",{\"0\":{\"1707\":1}}],[\"不使用\",{\"0\":{\"1595\":1}}],[\"不使用iterator遍历\",{\"1\":{\"1588\":1}}],[\"不使用javabean就只能隐藏age属性\",{\"1\":{\"1286\":1}}],[\"不使用javabean\",{\"1\":{\"1286\":1}}],[\"不使用final\",{\"1\":{\"1206\":1}}],[\"不使用spring\",{\"1\":{\"195\":1}}],[\"不使用内嵌服务器\",{\"0\":{\"110\":1}}],[\"不过使用db命令可以看到当前使用的仅存在于内存中的数据库\",{\"1\":{\"3064\":1}}],[\"不过mongodb\",{\"1\":{\"3052\":1}}],[\"不过即使报错\",{\"1\":{\"2988\":1}}],[\"不过tomcat服务器或自动对session对象进行钝化和活化\",{\"1\":{\"2823\":1}}],[\"不过压缩时zip文件头里的条目顺序很重要\",{\"1\":{\"2731\":1}}],[\"不过内容不多\",{\"1\":{\"2695\":1,\"2707\":1}}],[\"不过get请求的乱码tomcat已解决了\",{\"1\":{\"2631\":1}}],[\"不过一般不这么用\",{\"1\":{\"2568\":1}}],[\"不过实际开发中\",{\"1\":{\"2388\":1}}],[\"不过jvm垃圾回收机制可以回收这些class对象\",{\"1\":{\"2030\":1}}],[\"不过这个继承来的private成员\",{\"1\":{\"1119\":1}}],[\"不过这样日志那边会出现很多其他消息\",{\"1\":{\"262\":1}}],[\"不过尽量别超过3层\",{\"1\":{\"923\":1}}],[\"不过返回值类型是double类型的\",{\"1\":{\"518\":1}}],[\"不过\",{\"1\":{\"157\":1,\"739\":1,\"1739\":1}}],[\"不过后续使用时会采用yaml格式的配置文件\",{\"1\":{\"74\":1}}],[\"不然创建的用户毫无意义\",{\"1\":{\"3202\":1}}],[\"不然命令窗口会一闪而过\",{\"1\":{\"2455\":1}}],[\"不然还有可能会出问题\",{\"1\":{\"1096\":1}}],[\"不然就报错\",{\"1\":{\"2219\":1}}],[\"不然就报异常\",{\"1\":{\"1655\":1}}],[\"不然就无法编译\",{\"1\":{\"864\":1}}],[\"不然就是采用内置父工程的版本\",{\"1\":{\"96\":1}}],[\"不然无法转\",{\"1\":{\"1166\":1}}],[\"不然无法执行\",{\"1\":{\"803\":1}}],[\"不然无法自动加载\",{\"1\":{\"114\":1}}],[\"不然只能编译不能执行\",{\"1\":{\"797\":1}}],[\"不然会干扰测试结果\",{\"1\":{\"2627\":1}}],[\"不然会报端口占用的错误\",{\"1\":{\"2510\":1}}],[\"不然会报错\",{\"1\":{\"535\":2,\"989\":1,\"1104\":1,\"1354\":1}}],[\"不然会多算一个1\",{\"1\":{\"2239\":1}}],[\"不然会抛出异常\",{\"1\":{\"1655\":1,\"2252\":1}}],[\"不然会编译失败\",{\"1\":{\"798\":1}}],[\"不然会乱码\",{\"1\":{\"426\":1}}],[\"不要将这个类中的方法都放到basedao中\",{\"1\":{\"2404\":1}}],[\"不要关闭数据库连接\",{\"1\":{\"2386\":1}}],[\"不要跟类的泛型标识一样\",{\"1\":{\"1731\":1}}],[\"不要跟collection搞混了\",{\"1\":{\"679\":1,\"1693\":1}}],[\"不要用this\",{\"1\":{\"1515\":1}}],[\"不要手动调用\",{\"1\":{\"1176\":1}}],[\"不要仅为了获取其他类中某个功能而去继承\",{\"1\":{\"1114\":1}}],[\"不要给数组长度\",{\"1\":{\"971\":1}}],[\"不要加文件后缀\",{\"1\":{\"793\":1}}],[\"不要漏掉了异常的信息\",{\"1\":{\"370\":1}}],[\"不要覆盖掉原始操作\",{\"1\":{\"361\":1}}],[\"不要再引入mybatis了\",{\"1\":{\"324\":1}}],[\"不要带扩展名\",{\"1\":{\"221\":1}}],[\"不要修改这个名字\",{\"1\":{\"114\":1}}],[\"不要放入组件包\",{\"1\":{\"105\":1}}],[\"不要隐藏\",{\"1\":{\"79\":1}}],[\"核心api\",{\"0\":{\"1915\":1}}],[\"核心原理\",{\"0\":{\"1642\":1}}],[\"核心池的大小\",{\"1\":{\"1565\":1}}],[\"核心functional\",{\"0\":{\"725\":1}}],[\"核心版本\",{\"1\":{\"314\":1}}],[\"核心思想\",{\"1\":{\"135\":1}}],[\"核心\",{\"1\":{\"82\":1,\"1641\":1,\"1698\":1}}],[\"核心文件\",{\"1\":{\"74\":1}}],[\"核心配置文件\",{\"1\":{\"74\":1}}],[\"核心类\",{\"1\":{\"74\":1}}],[\"核心概念\",{\"1\":{\"57\":1}}],[\"目标文件\",{\"1\":{\"2467\":1}}],[\"目标类\",{\"0\":{\"1907\":1}}],[\"目标字符串赋于变量text\",{\"1\":{\"756\":1}}],[\"目前广泛使用\",{\"1\":{\"2846\":1}}],[\"目前\",{\"1\":{\"2287\":1,\"2749\":1}}],[\"目前有两种说法\",{\"1\":{\"1118\":1}}],[\"目前常用的jave8\",{\"1\":{\"769\":1}}],[\"目前能找到的中文资料版本都在4\",{\"1\":{\"60\":1,\"61\":1}}],[\"目录设计\",{\"0\":{\"3139\":1}}],[\"目录下面的elasticsearch\",{\"1\":{\"2860\":1}}],[\"目录下创建\",{\"1\":{\"2510\":1}}],[\"目录拦截\",{\"1\":{\"2701\":1}}],[\"目录匹配>\",{\"1\":{\"2578\":1}}],[\"目录匹配\",{\"0\":{\"2575\":1}}],[\"目录结构如下\",{\"1\":{\"2856\":1}}],[\"目录结构\",{\"0\":{\"2454\":1}}],[\"目录如果存在\",{\"1\":{\"1920\":1}}],[\"目录本质也是文件\",{\"1\":{\"1760\":1}}],[\"目录本身也是文件\",{\"1\":{\"546\":1,\"554\":1,\"1770\":1}}],[\"目录的层级\",{\"1\":{\"1089\":1}}],[\"目录创建失败\",{\"1\":{\"556\":1,\"557\":1}}],[\"目录创建成功\",{\"1\":{\"556\":1,\"557\":1}}],[\"目录已存在\",{\"1\":{\"556\":1,\"557\":1}}],[\"目录\",{\"1\":{\"551\":1,\"1760\":1,\"1920\":1,\"2573\":1,\"3046\":1}}],[\"目录优化\",{\"1\":{\"340\":1}}],[\"目录规范\",{\"0\":{\"313\":1}}],[\"目录解读\",{\"1\":{\"74\":1}}],[\"目的封装成数据包\",{\"1\":{\"1957\":1}}],[\"目的是为了提高代码的复用和解耦\",{\"1\":{\"1285\":1}}],[\"目的是为了集中管理\",{\"1\":{\"222\":1}}],[\"目的是当子类继承父类后\",{\"1\":{\"1136\":1}}],[\"目的\",{\"1\":{\"101\":2}}],[\"4cc1\",{\"1\":{\"3198\":1}}],[\"485z\",{\"1\":{\"3076\":1,\"3082\":1}}],[\"48424\",{\"1\":{\"2241\":1}}],[\"4kb\",{\"1\":{\"2810\":1}}],[\"4dc041da\",{\"1\":{\"2507\":1}}],[\"42s\",{\"1\":{\"2373\":1}}],[\"4g\",{\"1\":{\"2360\":1}}],[\"4set\",{\"0\":{\"2062\":1}}],[\"4个0\",{\"1\":{\"1933\":1}}],[\"4个字节组成\",{\"1\":{\"1933\":1}}],[\"4个字节来表示一个字符\",{\"1\":{\"1861\":1}}],[\"4版本开始引入的一套新的io\",{\"1\":{\"1913\":1}}],[\"4版开始使用group属性替代include属性\",{\"1\":{\"234\":1}}],[\"4的转换\",{\"1\":{\"874\":1}}],[\"4种\",{\"0\":{\"837\":1}}],[\"4舍\",{\"1\":{\"536\":1}}],[\"438z\",{\"1\":{\"3156\":1}}],[\"4383685877147921099l\",{\"1\":{\"440\":1}}],[\"43534646435l\",{\"1\":{\"2409\":1}}],[\"43\",{\"1\":{\"887\":1,\"2226\":2}}],[\"43中函数式接口都是这四种接口的变形\",{\"1\":{\"725\":1}}],[\"4320\",{\"1\":{\"533\":1}}],[\"4506\",{\"1\":{\"3198\":1}}],[\"453465656l\",{\"1\":{\"2409\":1}}],[\"4534534534543l\",{\"1\":{\"1185\":1}}],[\"456\",{\"1\":{\"1654\":2}}],[\"4554617c\",{\"1\":{\"671\":1}}],[\"45\",{\"1\":{\"531\":1,\"532\":1,\"533\":1}}],[\"465794806718\",{\"1\":{\"521\":1}}],[\"475463534532l\",{\"1\":{\"1907\":1,\"1910\":1}}],[\"47\",{\"1\":{\"486\":1}}],[\"4142135623730951\",{\"1\":{\"521\":1}}],[\"41\",{\"1\":{\"471\":1,\"3156\":4}}],[\"49152~65535\",{\"1\":{\"1938\":1}}],[\"4999\",{\"1\":{\"516\":1}}],[\"49\",{\"1\":{\"426\":1}}],[\"4已完成\",{\"1\":{\"384\":1}}],[\"40fdw\",{\"1\":{\"3225\":1,\"3237\":1}}],[\"4032\",{\"1\":{\"3198\":1}}],[\"4000\",{\"1\":{\"2157\":1}}],[\"400\",{\"1\":{\"377\":1,\"3212\":1}}],[\"40c\",{\"1\":{\"253\":1}}],[\"40\",{\"1\":{\"253\":1,\"1710\":1}}],[\"4级\",{\"1\":{\"216\":1,\"217\":1}}],[\"4\",{\"0\":{\"74\":1,\"88\":1,\"96\":1,\"106\":1,\"112\":1,\"116\":1,\"117\":1,\"118\":1,\"125\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1,\"161\":1,\"165\":1,\"182\":1,\"194\":1,\"195\":1,\"196\":1,\"201\":1,\"207\":1,\"213\":1,\"239\":1,\"244\":1,\"249\":1,\"254\":1,\"263\":1,\"265\":1,\"268\":1,\"276\":1,\"277\":1,\"278\":1,\"285\":1,\"288\":1,\"289\":1,\"301\":1,\"307\":1,\"319\":1,\"324\":1,\"333\":1,\"338\":1,\"349\":1,\"350\":1,\"351\":1,\"352\":1,\"357\":1,\"362\":1,\"371\":1,\"378\":1,\"390\":1,\"414\":1,\"420\":1,\"426\":1,\"432\":1,\"442\":1,\"454\":1,\"462\":1,\"471\":1,\"479\":1,\"486\":1,\"490\":1,\"499\":1,\"515\":1,\"527\":1,\"534\":1,\"543\":1,\"552\":1,\"571\":1,\"578\":1,\"589\":1,\"592\":1,\"607\":1,\"616\":1,\"623\":1,\"636\":1,\"647\":1,\"660\":1,\"685\":1,\"692\":1,\"700\":1,\"714\":1,\"729\":1,\"744\":1,\"751\":1,\"766\":1,\"767\":1,\"768\":1,\"783\":1,\"784\":1,\"785\":1,\"799\":1,\"808\":1,\"813\":1,\"816\":1,\"824\":1,\"841\":1,\"847\":1,\"855\":1,\"868\":1,\"874\":1,\"879\":1,\"880\":1,\"881\":1,\"898\":1,\"929\":1,\"938\":1,\"949\":1,\"962\":1,\"973\":1,\"991\":1,\"1005\":1,\"1010\":1,\"1031\":1,\"1032\":1,\"1033\":1,\"1046\":1,\"1047\":1,\"1048\":1,\"1049\":1,\"1059\":1,\"1064\":1,\"1065\":1,\"1071\":1,\"1083\":1,\"1089\":1,\"1095\":1,\"1103\":1,\"1104\":1,\"1105\":1,\"1106\":1,\"1115\":1,\"1127\":1,\"1129\":1,\"1140\":1,\"1141\":1,\"1153\":1,\"1158\":1,\"1168\":1,\"1181\":1,\"1183\":1,\"1184\":1,\"1185\":1,\"1186\":1,\"1187\":2,\"1192\":1,\"1193\":1,\"1204\":1,\"1205\":1,\"1206\":1,\"1207\":1,\"1208\":2,\"1209\":1,\"1225\":1,\"1230\":1,\"1235\":1,\"1242\":1,\"1249\":1,\"1260\":1,\"1271\":1,\"1272\":1,\"1273\":1,\"1281\":1,\"1286\":1,\"1294\":1,\"1303\":1,\"1314\":1,\"1320\":1,\"1332\":1,\"1340\":1,\"1348\":1,\"1353\":1,\"1361\":1,\"1366\":1,\"1371\":1,\"1379\":1,\"1384\":1,\"1398\":1,\"1399\":1,\"1415\":1,\"1440\":1,\"1453\":1,\"1455\":1,\"1470\":1,\"1475\":1,\"1476\":1,\"1477\":1,\"1488\":1,\"1503\":1,\"1508\":1,\"1523\":1,\"1524\":1,\"1525\":1,\"1526\":1,\"1527\":2,\"1536\":1,\"1543\":1,\"1544\":1,\"1545\":1,\"1546\":1,\"1554\":1,\"1562\":1,\"1567\":1,\"1575\":1,\"1590\":1,\"1591\":1,\"1592\":1,\"1593\":1,\"1605\":1,\"1606\":1,\"1607\":1,\"1608\":1,\"1620\":1,\"1638\":1,\"1645\":1,\"1667\":1,\"1669\":1,\"1676\":1,\"1680\":1,\"1704\":1,\"1705\":1,\"1706\":1,\"1722\":1,\"1723\":1,\"1724\":1,\"1725\":1,\"1726\":2,\"1732\":1,\"1750\":1,\"1751\":1,\"1752\":1,\"1753\":1,\"1763\":1,\"1764\":1,\"1765\":1,\"1776\":1,\"1790\":1,\"1794\":1,\"1805\":1,\"1806\":1,\"1807\":1,\"1808\":1,\"1817\":1,\"1831\":1,\"1836\":1,\"1844\":1,\"1853\":1,\"1858\":1,\"1863\":1,\"1878\":1,\"1888\":1,\"1901\":1,\"1902\":1,\"1903\":1,\"1904\":1,\"1918\":1,\"1927\":1,\"1936\":1,\"1947\":1,\"1957\":1,\"1960\":1,\"1966\":1,\"1973\":1,\"1984\":1,\"1991\":1,\"2002\":1,\"2010\":1,\"2015\":1,\"2021\":1,\"2034\":1,\"2035\":1,\"2054\":1,\"2069\":1,\"2078\":1,\"2079\":1,\"2080\":1,\"2081\":1,\"2082\":2,\"2092\":1,\"2093\":1,\"2094\":1,\"2095\":1,\"2096\":1,\"2097\":2,\"2106\":1,\"2114\":1,\"2115\":1,\"2116\":1,\"2126\":1,\"2141\":1,\"2146\":1,\"2152\":1,\"2163\":1,\"2164\":1,\"2165\":1,\"2175\":1,\"2176\":1,\"2177\":1,\"2192\":1,\"2201\":1,\"2202\":1,\"2203\":1,\"2208\":1,\"2213\":1,\"2224\":1,\"2232\":1,\"2272\":1,\"2283\":1,\"2290\":1,\"2300\":1,\"2312\":1,\"2319\":1,\"2330\":1,\"2331\":1,\"2332\":1,\"2333\":1,\"2334\":2,\"2344\":1,\"2359\":1,\"2363\":1,\"2373\":1,\"2391\":1,\"2405\":1,\"2419\":1,\"2426\":1,\"2434\":1,\"2441\":1,\"2449\":1,\"2455\":1,\"2470\":1,\"2492\":1,\"2493\":1,\"2494\":1,\"2495\":1,\"2503\":1,\"2512\":1,\"2525\":1,\"2533\":1,\"2550\":1,\"2555\":1,\"2561\":1,\"2568\":1,\"2577\":1,\"2611\":1,\"2625\":1,\"2631\":1,\"2642\":1,\"2655\":1,\"2664\":1,\"2675\":1,\"2683\":1,\"2684\":1,\"2685\":1,\"2686\":1,\"2687\":2,\"2695\":1,\"2704\":1,\"2707\":1,\"2712\":1,\"2717\":1,\"2727\":1,\"2734\":1,\"2750\":1,\"2761\":1,\"2771\":1,\"2780\":1,\"2781\":1,\"2782\":1,\"2783\":1,\"2788\":1,\"2796\":1,\"2800\":1,\"2801\":1,\"2802\":1,\"2803\":1,\"2815\":1,\"2816\":1,\"2817\":1,\"2818\":1,\"2819\":2,\"2839\":1,\"2845\":1,\"2851\":1,\"2858\":1,\"2870\":1,\"2879\":1,\"2886\":1,\"2902\":1,\"2908\":1,\"2933\":1,\"2961\":1,\"2989\":1,\"3025\":1,\"3029\":1,\"3034\":1,\"3049\":1,\"3058\":1,\"3063\":1,\"3079\":1,\"3084\":1,\"3093\":1,\"3102\":1,\"3114\":1,\"3118\":1,\"3119\":1,\"3120\":1,\"3121\":1,\"3128\":1,\"3140\":1,\"3145\":1,\"3150\":1,\"3177\":1,\"3185\":1,\"3186\":1,\"3187\":1,\"3188\":1,\"3199\":1,\"3214\":1,\"3216\":1,\"3217\":1,\"3228\":1,\"3230\":1,\"3240\":2,\"3241\":1,\"3256\":1,\"3261\":1,\"3267\":1,\"3273\":1},\"1\":{\"74\":1,\"96\":2,\"119\":1,\"200\":1,\"251\":1,\"277\":1,\"288\":1,\"300\":1,\"314\":1,\"382\":1,\"389\":1,\"408\":1,\"501\":1,\"503\":1,\"536\":3,\"577\":1,\"659\":1,\"676\":1,\"677\":1,\"678\":2,\"684\":4,\"685\":3,\"686\":1,\"687\":1,\"739\":1,\"750\":1,\"751\":2,\"752\":1,\"815\":1,\"869\":1,\"891\":2,\"908\":1,\"928\":1,\"950\":2,\"974\":1,\"994\":1,\"997\":1,\"998\":1,\"1197\":2,\"1240\":1,\"1241\":1,\"1351\":1,\"1373\":1,\"1402\":1,\"1472\":1,\"1492\":1,\"1507\":1,\"1521\":1,\"1523\":1,\"1547\":1,\"1569\":1,\"1604\":1,\"1692\":1,\"1710\":1,\"1753\":2,\"1779\":1,\"1804\":1,\"1816\":1,\"1817\":1,\"1823\":1,\"1836\":1,\"1865\":1,\"1946\":1,\"1977\":1,\"2032\":1,\"2048\":1,\"2198\":1,\"2239\":1,\"2240\":1,\"2244\":1,\"2284\":1,\"2291\":1,\"2297\":1,\"2299\":1,\"2300\":1,\"2303\":1,\"2325\":1,\"2329\":1,\"2333\":1,\"2347\":1,\"2349\":4,\"2352\":6,\"2355\":2,\"2364\":2,\"2365\":2,\"2386\":1,\"2387\":1,\"2390\":1,\"2391\":1,\"2405\":2,\"2407\":1,\"2408\":1,\"2409\":1,\"2486\":1,\"2542\":1,\"2574\":1,\"2575\":1,\"2576\":1,\"2577\":1,\"2619\":1,\"2704\":1,\"2712\":1,\"2763\":1,\"2781\":1,\"2786\":1,\"2799\":1,\"2908\":1,\"2926\":1,\"2929\":1,\"2932\":1,\"2936\":1,\"2939\":1,\"2943\":1,\"2945\":1,\"2949\":1,\"2952\":2,\"2960\":1,\"3015\":1,\"3053\":1,\"3121\":1,\"3160\":1,\"3221\":1,\"3222\":1,\"3224\":1}}],[\"或在指定启动\",{\"1\":{\"3180\":1}}],[\"或在上一次调用\",{\"1\":{\"678\":1,\"1600\":1}}],[\"或移除所有索引\",{\"1\":{\"3115\":1}}],[\"或不写该字段\",{\"1\":{\"3074\":1}}],[\"或设置如下请求体\",{\"1\":{\"2931\":1}}],[\"或stringbuffer类型\",{\"1\":{\"2597\":1}}],[\"或配置修改\",{\"1\":{\"2459\":1}}],[\"或对象\",{\"1\":{\"2150\":1}}],[\"或tcp\",{\"1\":{\"1926\":1}}],[\"或this自己\",{\"1\":{\"1082\":1}}],[\"或通过网络将这种二进制流传输到另一个网络节点\",{\"1\":{\"1896\":1}}],[\"或a类的父类==>\",{\"1\":{\"1752\":1}}],[\"或a类的子类\",{\"1\":{\"1751\":1}}],[\"或arrays\",{\"1\":{\"505\":1}}],[\"或notifyall\",{\"1\":{\"1551\":1,\"1552\":1}}],[\"或是正在运行的一个程序\",{\"1\":{\"1436\":1}}],[\"或是bootstrap\",{\"1\":{\"118\":1}}],[\"或枚举声明\",{\"1\":{\"1405\":1}}],[\"或称之为\",{\"1\":{\"1397\":1}}],[\"或前端调用\",{\"1\":{\"1359\":1}}],[\"或非静态的属性\",{\"1\":{\"1280\":1}}],[\"或实现类\",{\"1\":{\"1269\":1}}],[\"或要实现的接口\",{\"1\":{\"1215\":1}}],[\"或子类的对象赋给父类的引用\",{\"1\":{\"1147\":1}}],[\"或多个形参\",{\"1\":{\"1029\":1}}],[\"或索引\",{\"1\":{\"961\":1}}],[\"或没有交集的关系\",{\"1\":{\"924\":1}}],[\"或能自动转换类型\",{\"1\":{\"980\":1}}],[\"或能自动转换\",{\"1\":{\"913\":1}}],[\"或修改tomcat的端口\",{\"1\":{\"2460\":1}}],[\"或修改\",{\"1\":{\"711\":1}}],[\"或字节\",{\"1\":{\"570\":1}}],[\"或一个字符\",{\"1\":{\"565\":1}}],[\"或\",{\"1\":{\"491\":2,\"834\":2,\"840\":1,\"847\":1,\"1022\":1,\"1025\":1,\"1026\":1,\"1075\":1,\"1080\":1,\"1081\":1,\"1132\":1,\"1138\":1,\"1139\":1,\"1159\":2,\"1207\":1,\"1304\":1,\"2323\":1,\"2340\":1,\"2386\":1,\"2935\":1,\"2996\":1,\"3066\":1,\"3071\":1}}],[\"或者两都都存在的权限\",{\"1\":{\"3183\":1}}],[\"或者点赞数小于1000的文档记录\",{\"1\":{\"3102\":1}}],[\"或者servlet所依赖的其他类\",{\"1\":{\"2748\":1}}],[\"或者包含有这两种文件的目录\",{\"1\":{\"2748\":1}}],[\"或者插件程序的部署单位\",{\"1\":{\"2736\":1}}],[\"或者第一次getconnection时\",{\"1\":{\"2426\":1}}],[\"或者仅仅保存null\",{\"1\":{\"2247\":1}}],[\"或者把自己的数据传送到网络上去\",{\"1\":{\"1996\":1}}],[\"或者标准输入流\",{\"1\":{\"1834\":1}}],[\"或者\",{\"1\":{\"1797\":1,\"1870\":1,\"2498\":1,\"2760\":2}}],[\"或者说它的\",{\"1\":{\"1651\":1}}],[\"或者以链表形式存在多个元素\",{\"1\":{\"1643\":1}}],[\"或者使用\",{\"1\":{\"1515\":1}}],[\"或者使用国内镜像\",{\"1\":{\"73\":1}}],[\"或者是在运行时可以通过反射访问\",{\"1\":{\"1390\":1,\"1409\":1}}],[\"或者是相等\",{\"1\":{\"914\":1}}],[\"或者用所有异常的父类exception类作为参数\",{\"1\":{\"1338\":1}}],[\"或者可以理解为一种特殊的类\",{\"1\":{\"1254\":1}}],[\"或者不存在\",{\"1\":{\"998\":1}}],[\"或者与数据类型不符都会报错\",{\"1\":{\"640\":1,\"761\":1}}],[\"或者结束符时\",{\"1\":{\"581\":1,\"1834\":1}}],[\"或者实现了java\",{\"1\":{\"504\":1}}],[\"或者直接查询索引下所有的文档\",{\"1\":{\"2990\":1}}],[\"或者直接手动导入\",{\"1\":{\"280\":1}}],[\"或者直接输入\",{\"1\":{\"81\":1}}],[\"或者手动引入坐标\",{\"1\":{\"270\":1}}],[\"或者修改端口号\",{\"1\":{\"202\":1}}],[\"或者在pom\",{\"1\":{\"110\":1}}],[\"或者遇到了特殊的版本bug\",{\"1\":{\"97\":1}}],[\"或模块\",{\"1\":{\"72\":1}}],[\"默认采用的就direct连接方式\",{\"1\":{\"3222\":1}}],[\"默认采用自然排序\",{\"1\":{\"686\":1,\"687\":1}}],[\"默认在所有的数据库上都有效\",{\"1\":{\"3193\":1}}],[\"默认在servlet被第一次访问时调用\",{\"1\":{\"2552\":1}}],[\"默认心跳信息为10秒\",{\"1\":{\"3171\":1}}],[\"默认名字为\",{\"1\":{\"3109\":1}}],[\"默认会返回所有符合条件的数据\",{\"1\":{\"3092\":1}}],[\"默认只会更新第一条\",{\"1\":{\"3083\":1}}],[\"默认查询的方式是\",{\"1\":{\"2940\":1}}],[\"默认生成的\",{\"1\":{\"2902\":1}}],[\"默认关掉浏览器会话就会失效\",{\"1\":{\"2803\":1}}],[\"默认前缀是空\",{\"1\":{\"2782\":1}}],[\"默认返回的还是第一个\",{\"1\":{\"2233\":1}}],[\"默认从\",{\"1\":{\"2948\":1,\"3007\":1}}],[\"默认从控制台输出\",{\"1\":{\"1867\":1}}],[\"默认从键盘输入\",{\"1\":{\"1867\":1}}],[\"默认编码是utf\",{\"1\":{\"1847\":1}}],[\"默认内部缓冲区数组大小\",{\"1\":{\"1829\":1}}],[\"默认泛型\",{\"1\":{\"1711\":1}}],[\"默认情况\",{\"1\":{\"1639\":1,\"3178\":1}}],[\"默认情况下是double类型\",{\"1\":{\"3074\":1}}],[\"默认情况下其他提取出来的字段都不是独立存储的\",{\"1\":{\"2963\":1}}],[\"默认情况下\",{\"1\":{\"446\":1,\"1415\":1,\"1619\":1,\"1905\":1,\"2545\":1,\"2805\":1,\"2808\":1,\"2902\":1,\"3173\":1,\"3178\":1}}],[\"默认扩容为原来的数组长度的2倍\",{\"1\":{\"1629\":1}}],[\"默认游标都在集合的第一个元素之前\",{\"1\":{\"1589\":1}}],[\"默认this是同步监视器\",{\"1\":{\"1518\":1}}],[\"默认行为\",{\"1\":{\"1406\":1}}],[\"默认调用super\",{\"1\":{\"2037\":1}}],[\"默认调用的是父类中的同名同参数的方法\",{\"1\":{\"1269\":1}}],[\"默认调用空参构造器\",{\"1\":{\"591\":1}}],[\"默认方法使得开发者可以在不破坏二进制兼容性的前提下\",{\"1\":{\"1273\":1}}],[\"默认方法使用\",{\"1\":{\"1269\":1}}],[\"默认方法\",{\"0\":{\"1269\":1,\"1273\":1},\"1\":{\"1267\":2}}],[\"默认就是副本集的名字\",{\"1\":{\"3154\":1}}],[\"默认就是abstract\",{\"1\":{\"1259\":1}}],[\"默认就是public\",{\"1\":{\"1259\":1}}],[\"默认访问的是子类的同名属性\",{\"1\":{\"1129\":1}}],[\"默认初始化\",{\"1\":{\"1075\":1}}],[\"默认初始化值的情况\",{\"1\":{\"1025\":1}}],[\"默认构造器的修饰符与所属类的修饰符一致\",{\"1\":{\"1073\":1}}],[\"默认构造器\",{\"0\":{\"1072\":1}}],[\"默认值是0\",{\"1\":{\"3096\":1}}],[\"默认值20\",{\"1\":{\"3096\":1}}],[\"默认值\",{\"1\":{\"979\":1,\"1392\":1,\"1411\":1,\"2702\":1,\"2805\":1}}],[\"默认值与数组的数据类型有关\",{\"1\":{\"975\":1}}],[\"默认值为null\",{\"1\":{\"1624\":1}}],[\"默认值为false\",{\"1\":{\"262\":1,\"3081\":2,\"3111\":1}}],[\"默认值为true\",{\"1\":{\"262\":1}}],[\"默认跳出包裹此关键字最近的一层循环\",{\"1\":{\"946\":1,\"950\":1}}],[\"默认数值是int类型的\",{\"1\":{\"868\":1}}],[\"默认为\",{\"1\":{\"2963\":1}}],[\"默认为true\",{\"1\":{\"2963\":1}}],[\"默认为30分钟\",{\"1\":{\"2676\":1}}],[\"默认为项目路径\",{\"1\":{\"1767\":1}}],[\"默认为int\",{\"1\":{\"868\":1}}],[\"默认为double\",{\"1\":{\"867\":1}}],[\"默认为1\",{\"1\":{\"811\":1}}],[\"默认整形\",{\"0\":{\"842\":1}}],[\"默认类型为java\",{\"1\":{\"1711\":1}}],[\"默认类型为int\",{\"1\":{\"867\":1}}],[\"默认类型\",{\"1\":{\"613\":1,\"621\":1,\"2045\":1}}],[\"默认根路径为项目路径\",{\"1\":{\"538\":1}}],[\"默认\",{\"1\":{\"382\":1,\"574\":1,\"644\":1,\"1390\":1,\"1408\":1,\"1812\":1,\"2069\":1,\"2380\":1,\"2463\":1,\"3072\":1}}],[\"默认提供的是lettucs客户端技术\",{\"1\":{\"290\":1}}],[\"默认单位是毫秒\",{\"1\":{\"262\":1}}],[\"默认的27017端口如果一旦知道了ip就能连接上\",{\"1\":{\"3179\":1}}],[\"默认的服务端口是27017\",{\"1\":{\"3043\":1}}],[\"默认的高亮标签是<em>结果中的关键字<\",{\"1\":{\"2959\":1}}],[\"默认的目录是没有java和resources的\",{\"1\":{\"2491\":1}}],[\"默认的构造器\",{\"1\":{\"2435\":1}}],[\"默认的扩容方式\",{\"1\":{\"1676\":1}}],[\"默认的线程名为\",{\"1\":{\"1480\":1}}],[\"默认的super\",{\"0\":{\"1138\":1}}],[\"默认的时间间隔为1分钟\",{\"1\":{\"262\":1}}],[\"默认的格式如下\",{\"1\":{\"251\":1}}],[\"默认的文件后缀就是properties\",{\"1\":{\"115\":1}}],[\"默认格式\",{\"0\":{\"251\":1}}],[\"默认日志组root\",{\"1\":{\"249\":1}}],[\"默认不参与热部署的目录\",{\"0\":{\"149\":1}}],[\"默认当idea工具失去焦点5秒后进行热部署\",{\"1\":{\"147\":1}}],[\"默认配置文件\",{\"0\":{\"113\":1}}],[\"默认网址是\",{\"1\":{\"73\":1}}],[\"默认是没有自定义角色的\",{\"1\":{\"3186\":1}}],[\"默认是没有用户认证的\",{\"1\":{\"3056\":1}}],[\"默认是索引字段+\",{\"1\":{\"3109\":1}}],[\"默认是27017\",{\"1\":{\"3048\":1}}],[\"默认是localhost\",{\"1\":{\"3048\":1}}],[\"默认是直接拦截的\",{\"1\":{\"2697\":1}}],[\"默认是按照text解析的\",{\"1\":{\"2641\":1}}],[\"默认是导入的\",{\"1\":{\"2525\":1}}],[\"默认是8080\",{\"1\":{\"2502\":1}}],[\"默认是1m\",{\"1\":{\"2362\":1}}],[\"默认是false\",{\"1\":{\"1533\":1,\"3159\":1}}],[\"默认是double类型的\",{\"1\":{\"867\":1}}],[\"默认是debug\",{\"1\":{\"262\":1}}],[\"默认是int类型\",{\"1\":{\"867\":1}}],[\"默认是utf8\",{\"1\":{\"426\":2}}],[\"默认是截取到末尾\",{\"1\":{\"421\":1}}],[\"默认是application\",{\"1\":{\"114\":1}}],[\"默认是最新的稳定版\",{\"1\":{\"72\":1}}],[\"默认是官网\",{\"1\":{\"71\":1}}],[\"已有的函数可以被删除或是其他结构上的变化\",{\"1\":{\"1999\":1}}],[\"已配货\",{\"1\":{\"1368\":1}}],[\"已确认\",{\"1\":{\"1368\":1}}],[\"已发货\",{\"1\":{\"1368\":1}}],[\"已付款\",{\"1\":{\"1368\":1}}],[\"已重写equals\",{\"1\":{\"662\":1}}],[\"已知一个类的全类名\",{\"1\":{\"588\":1,\"2020\":1}}],[\"已知某个类的实例\",{\"1\":{\"587\":1,\"2019\":1}}],[\"已经不支持覆盖更新了\",{\"1\":{\"3082\":1}}],[\"已经不再使用\",{\"1\":{\"2426\":1}}],[\"已经导入了servlet\",{\"1\":{\"2542\":1}}],[\"已经有方法实现过了\",{\"1\":{\"2156\":1}}],[\"已经有实现的方法了\",{\"1\":{\"2149\":1}}],[\"已经进行了绑定\",{\"1\":{\"2097\":1}}],[\"已经进入了方法体\",{\"1\":{\"1538\":1}}],[\"已经被废弃了\",{\"1\":{\"1520\":1}}],[\"已经被android取代\",{\"1\":{\"763\":1}}],[\"已经存在\",{\"1\":{\"711\":1}}],[\"已经实现了自然排序接口comparable\",{\"1\":{\"498\":1}}],[\"已经纠正了过去的缺陷\",{\"1\":{\"461\":1}}],[\"已经搭建好了\",{\"1\":{\"310\":1}}],[\"已经将其自动声明为bean了\",{\"1\":{\"164\":1}}],[\"已经勾选的依赖\",{\"1\":{\"72\":1}}],[\"已过时\",{\"1\":{\"11\":1,\"1479\":1}}],[\"700\",{\"1\":{\"3100\":1,\"3102\":1}}],[\"7000\",{\"1\":{\"2210\":1,\"2957\":1}}],[\"7034897193246939l\",{\"1\":{\"1364\":1}}],[\"77556fd\",{\"1\":{\"2032\":1}}],[\"7之后的语法\",{\"1\":{\"1716\":1}}],[\"78进行tomcat的配置和项目部署了\",{\"1\":{\"2503\":1}}],[\"78\",{\"1\":{\"1707\":1}}],[\"76\",{\"1\":{\"1687\":1,\"1707\":1}}],[\"76<\",{\"1\":{\"333\":1,\"389\":1}}],[\"7900\",{\"1\":{\"1259\":1}}],[\"75\",{\"1\":{\"271\":1,\"281\":1,\"287\":1,\"3160\":2,\"3165\":3,\"3222\":1,\"3224\":1,\"3225\":3,\"3236\":1,\"3237\":3}}],[\"7<\",{\"1\":{\"95\":2,\"323\":1}}],[\"7\",{\"0\":{\"80\":1,\"81\":1,\"82\":1,\"363\":1,\"364\":1,\"365\":1,\"366\":1,\"381\":1,\"448\":1,\"474\":1,\"518\":1,\"537\":1,\"546\":1,\"563\":1,\"595\":1,\"610\":1,\"626\":1,\"650\":1,\"663\":1,\"688\":1,\"703\":1,\"717\":1,\"850\":1,\"887\":1,\"889\":1,\"976\":1,\"977\":1,\"978\":1,\"979\":1,\"994\":1,\"1013\":1,\"1074\":1,\"1098\":1,\"1145\":1,\"1160\":1,\"1196\":1,\"1197\":1,\"1198\":1,\"1263\":1,\"1264\":1,\"1265\":1,\"1335\":1,\"1345\":1,\"1356\":1,\"1458\":1,\"1557\":1,\"1599\":1,\"1641\":1,\"1642\":1,\"1643\":1,\"1644\":1,\"1645\":1,\"1693\":1,\"1696\":1,\"1712\":1,\"1735\":1,\"1793\":1,\"1866\":1,\"1910\":1,\"1939\":1,\"1987\":1,\"1996\":1,\"2022\":1,\"2235\":1,\"2261\":1,\"2275\":1,\"2347\":1,\"2392\":1,\"2458\":1,\"2459\":1,\"2460\":1,\"2461\":1,\"2633\":1,\"2720\":1,\"2737\":1,\"2738\":1,\"2739\":1,\"2806\":1,\"2823\":1,\"2970\":1,\"3103\":1,\"3264\":1},\"1\":{\"72\":1,\"76\":1,\"93\":1,\"94\":2,\"95\":2,\"96\":3,\"99\":3,\"109\":1,\"312\":1,\"314\":1,\"336\":1,\"469\":1,\"535\":1,\"536\":1,\"650\":6,\"890\":1,\"902\":1,\"907\":1,\"908\":1,\"909\":1,\"911\":1,\"1158\":1,\"1390\":1,\"1645\":1,\"1705\":1,\"1706\":1,\"1914\":1,\"1995\":1,\"2226\":2,\"2239\":1,\"2240\":1,\"2325\":1,\"2355\":1,\"2387\":1,\"2407\":1,\"2408\":1,\"2409\":1,\"2635\":1,\"2636\":1,\"2858\":2,\"2914\":1,\"2915\":1,\"2943\":1,\"2967\":1,\"3112\":1,\"3113\":1,\"3121\":1,\"3122\":1,\"3160\":1}}],[\"比dtd更复杂\",{\"1\":{\"2780\":1}}],[\"比hahsmap多了个双向链表\",{\"1\":{\"1682\":1}}],[\"比对是否有所要查询的关键字\",{\"1\":{\"2874\":1}}],[\"比对速度更快\",{\"1\":{\"1678\":1}}],[\"比对时\",{\"1\":{\"667\":1}}],[\"比\",{\"1\":{\"1338\":1}}],[\"比int小的数值类型\",{\"1\":{\"512\":1}}],[\"比较查询\",{\"0\":{\"3100\":1}}],[\"比较常用的是设置响应状态码\",{\"1\":{\"2635\":1}}],[\"比较花时间\",{\"1\":{\"2377\":1}}],[\"比较繁琐\",{\"1\":{\"1707\":1}}],[\"比较危险\",{\"1\":{\"1698\":1}}],[\"比较对象是否相同的方法\",{\"0\":{\"1656\":1}}],[\"比较像定义一个java\",{\"1\":{\"1109\":1}}],[\"比较运算符不能连续使用\",{\"1\":{\"901\":1}}],[\"比较运算符的结果都是boolean型\",{\"1\":{\"900\":1}}],[\"比较运算符\",{\"0\":{\"899\":1},\"1\":{\"900\":1}}],[\"比较是否包含某个集合\",{\"1\":{\"663\":1}}],[\"比较的不是两个引用的地址是否相同\",{\"1\":{\"1179\":1}}],[\"比较的方式是\",{\"1\":{\"662\":1}}],[\"比较的是内容是否相同\",{\"1\":{\"404\":1}}],[\"比较规则为\",{\"1\":{\"506\":1}}],[\"比较o1和o2的大小\",{\"1\":{\"506\":1}}],[\"比较两个对象实体是否相同\",{\"1\":{\"1180\":1}}],[\"比较两个对象的实体内容是否相同\",{\"1\":{\"1180\":1}}],[\"比较两个对象的地址值是否相同\",{\"1\":{\"1178\":1,\"1179\":1}}],[\"比较两个对象的大小\",{\"0\":{\"502\":1}}],[\"比较两个变量保存的数据是否相等\",{\"1\":{\"1178\":1}}],[\"比较两个数组是否相等\",{\"1\":{\"648\":1}}],[\"比较两个字符串的大小\",{\"1\":{\"412\":1}}],[\"比较\",{\"0\":{\"502\":1},\"1\":{\"1674\":1}}],[\"比较name属性\",{\"1\":{\"501\":1}}],[\"比较字符的ascii\",{\"1\":{\"412\":1}}],[\"比较器\",{\"0\":{\"490\":1},\"1\":{\"33\":1,\"739\":1}}],[\"比如show\",{\"1\":{\"3146\":1}}],[\"比如springcloud\",{\"1\":{\"72\":1}}],[\"比如列出所有的数据库或者关闭服务器\",{\"1\":{\"3060\":1}}],[\"比如评论系统\",{\"1\":{\"3037\":1}}],[\"比如分布式架构\",{\"1\":{\"3037\":1}}],[\"比如价格和年龄的范围\",{\"1\":{\"2937\":1}}],[\"比如从数据库查询数据\",{\"1\":{\"2755\":1}}],[\"比如从用户流中getage获取年轻\",{\"1\":{\"2215\":1}}],[\"比如可以储存access\",{\"1\":{\"2689\":1}}],[\"比如传递的是文件数据\",{\"1\":{\"2606\":1}}],[\"比如获取用户名和密码就可以实现登录操作的相关业务\",{\"1\":{\"2584\":1}}],[\"比如说100\",{\"1\":{\"2426\":1}}],[\"比如说oracle\",{\"1\":{\"2426\":1}}],[\"比如在框架中\",{\"1\":{\"2388\":1}}],[\"比如在条件判断中\",{\"1\":{\"1029\":1}}],[\"比如一张图片\",{\"1\":{\"2359\":1}}],[\"比如一个字母\",{\"1\":{\"852\":1}}],[\"比如参数1是个字符串\",{\"1\":{\"2152\":1}}],[\"比如php语言可以直接定义函数\",{\"1\":{\"2133\":1}}],[\"比如写个日志\",{\"1\":{\"2078\":1}}],[\"比如mailto\",{\"1\":{\"1995\":1}}],[\"比如最常见的\",{\"1\":{\"1988\":1}}],[\"比如指定源地址和目标地址\",{\"1\":{\"1952\":1}}],[\"比如各种集合工具类\",{\"1\":{\"1749\":1}}],[\"比如取模16\",{\"1\":{\"1642\":1}}],[\"比如并发情况下的线程\",{\"1\":{\"1564\":1}}],[\"比如我们定义了一个全局的int\",{\"1\":{\"1455\":1}}],[\"比如我要切换dev环境为pro时\",{\"1\":{\"234\":1}}],[\"比如java需要后台一直运行gc垃圾回收\",{\"1\":{\"1446\":1}}],[\"比如junit框架中有个\",{\"1\":{\"1390\":1}}],[\"比如拼写检查\",{\"1\":{\"1389\":1,\"1390\":1}}],[\"比如抛出的是个编译时异常\",{\"1\":{\"1361\":1}}],[\"比如空指针\",{\"1\":{\"1356\":1}}],[\"比如返回的错误码不一样\",{\"1\":{\"1352\":1}}],[\"比如无法获取属性\",{\"1\":{\"1286\":1}}],[\"比如用c或c++实现\",{\"1\":{\"1109\":1}}],[\"比如计算两个值谁大\",{\"1\":{\"914\":1}}],[\"比如没有变量指向的对象\",{\"1\":{\"768\":1}}],[\"比如排序和搜索\",{\"1\":{\"641\":1}}],[\"比如四舍五入只是舍入策略的一种\",{\"1\":{\"536\":1}}],[\"比如1表示成功\",{\"1\":{\"368\":1}}],[\"比如连接的数据库不一样\",{\"1\":{\"223\":1}}],[\"比如元旦做活动\",{\"1\":{\"220\":1}}],[\"比如配置了服务器的端口是8080\",{\"1\":{\"209\":1}}],[\"比如前端服务器的端口号改为8080\",{\"1\":{\"202\":1}}],[\"比如测试兼容性\",{\"1\":{\"184\":1}}],[\"比如要配置int类型的数据\",{\"1\":{\"173\":1}}],[\"比如\",{\"1\":{\"153\":1,\"227\":1,\"369\":1,\"815\":1,\"1087\":1,\"1097\":1,\"1101\":1,\"1102\":1,\"1125\":1,\"1199\":1,\"1237\":1,\"1312\":1,\"1323\":1,\"1416\":1,\"1442\":2,\"1446\":1,\"1550\":1,\"1560\":1,\"1573\":1,\"1711\":2,\"1715\":1,\"1797\":1,\"2078\":1,\"2099\":1,\"2354\":1,\"2498\":1,\"2946\":1}}],[\"比如lombok\",{\"1\":{\"72\":1}}],[\"的开发量\",{\"1\":{\"3232\":1}}],[\"的权限\",{\"1\":{\"3190\":1}}],[\"的表中的数据\",{\"1\":{\"3152\":1}}],[\"的字段的索引是无法删除的\",{\"1\":{\"3117\":1}}],[\"的系统\",{\"1\":{\"3036\":1}}],[\"的性质\",{\"1\":{\"3036\":1}}],[\"的性质远大于其\",{\"1\":{\"3036\":1}}],[\"的非关系型数据库\",{\"1\":{\"3021\":1}}],[\"的结果\",{\"1\":{\"2942\":2,\"2943\":1,\"2946\":1}}],[\"的指针\",{\"1\":{\"2878\":1}}],[\"的形式\",{\"1\":{\"2877\":1}}],[\"的形式变为\",{\"1\":{\"2877\":1}}],[\"的一种具体存储形式\",{\"1\":{\"2876\":1}}],[\"的一部分\",{\"1\":{\"576\":1,\"577\":1}}],[\"的语法优化\",{\"1\":{\"2849\":1}}],[\"的大小有限制\",{\"1\":{\"2810\":1}}],[\"的本质是创建了一个响应头\",{\"1\":{\"2801\":1}}],[\"的本机安装系统里\",{\"1\":{\"1923\":1}}],[\"的书写规则\",{\"1\":{\"2774\":1}}],[\"的行为\",{\"1\":{\"2709\":1}}],[\"的资源\",{\"1\":{\"2665\":1}}],[\"的getxxx方法\",{\"1\":{\"2597\":1}}],[\"的getinfo\",{\"1\":{\"1157\":1}}],[\"的优先级\",{\"1\":{\"2577\":1}}],[\"的小程序\",{\"1\":{\"2522\":1}}],[\"的创建和关闭\",{\"1\":{\"2435\":1}}],[\"的子接口\",{\"1\":{\"2317\":1}}],[\"的子类\",{\"1\":{\"1665\":1}}],[\"的连接通常称为\",{\"1\":{\"2241\":1}}],[\"的操作\",{\"0\":{\"2204\":1}}],[\"的静态方法\",{\"1\":{\"2198\":1}}],[\"的丰富的函数式接口\",{\"1\":{\"2138\":1}}],[\"的接口\",{\"1\":{\"2133\":1}}],[\"的灵活性\",{\"1\":{\"2133\":1}}],[\"的意义\",{\"0\":{\"2133\":1}}],[\"的计划发布周期是\",{\"1\":{\"2103\":1}}],[\"的过程\",{\"1\":{\"2027\":1}}],[\"的网络资源的位置来同一表示internet\",{\"1\":{\"1996\":1}}],[\"的简称\",{\"1\":{\"1992\":1}}],[\"的包发送到指定主机上的指定端口号\",{\"1\":{\"1986\":1}}],[\"的工作过程包含以下四个基本的步骤\",{\"1\":{\"1969\":1}}],[\"的正常连接终止序列\",{\"1\":{\"1966\":1}}],[\"的正则表达式中\",{\"1\":{\"737\":1}}],[\"的数据结构和\",{\"1\":{\"3069\":1}}],[\"的数据\",{\"1\":{\"2846\":1}}],[\"的数据库连接池使用\",{\"1\":{\"2420\":1}}],[\"的数据库系统\",{\"1\":{\"2279\":1}}],[\"的数据包\",{\"1\":{\"1986\":1}}],[\"的数据报服务\",{\"1\":{\"1962\":1}}],[\"的数据类型\",{\"1\":{\"1150\":1}}],[\"的路径名称\",{\"1\":{\"1918\":1}}],[\"的发布\",{\"1\":{\"1914\":1}}],[\"的重载方法read\",{\"1\":{\"1805\":1}}],[\"的父类\",{\"1\":{\"1738\":1}}],[\"的父类或父接口类型\",{\"1\":{\"1211\":1}}],[\"的注意事项\",{\"0\":{\"1721\":1}}],[\"的概念已经被逐渐弱化\",{\"1\":{\"2865\":1}}],[\"的概念\",{\"1\":{\"1700\":1}}],[\"的哈希值相同\",{\"1\":{\"1674\":1}}],[\"的定义为\",{\"1\":{\"1587\":1}}],[\"的集合\",{\"1\":{\"1578\":1}}],[\"的返回值\",{\"1\":{\"1561\":1,\"2095\":1}}],[\"的异同\",{\"0\":{\"1555\":1}}],[\"的某些警告保持静默\",{\"1\":{\"1427\":1}}],[\"的含义是\",{\"1\":{\"1426\":1}}],[\"的成员变量\",{\"1\":{\"1412\":1}}],[\"的成员变量和方法\",{\"1\":{\"1115\":1}}],[\"的作用是\",{\"1\":{\"1427\":1}}],[\"的作用\",{\"1\":{\"1409\":1,\"1412\":1}}],[\"的作用域不同\",{\"1\":{\"1406\":1}}],[\"的生命周期\",{\"1\":{\"1408\":1,\"1409\":1}}],[\"的元注解用于修饰其他\",{\"1\":{\"1408\":1}}],[\"的默认行为\",{\"1\":{\"1406\":1}}],[\"的策略属性\",{\"1\":{\"1409\":2}}],[\"的策略\",{\"1\":{\"1406\":1}}],[\"的每一个实现类\",{\"1\":{\"1402\":1}}],[\"的支持\",{\"1\":{\"1386\":1}}],[\"的关系\",{\"1\":{\"1258\":2}}],[\"的思想\",{\"1\":{\"1258\":1}}],[\"的equals\",{\"1\":{\"1181\":2}}],[\"的话\",{\"1\":{\"1180\":1,\"1181\":1}}],[\"的使用\",{\"1\":{\"1137\":1}}],[\"的方法\",{\"1\":{\"1128\":1,\"1150\":1}}],[\"的方式对\",{\"1\":{\"2968\":1}}],[\"的方式进行\",{\"1\":{\"1773\":1}}],[\"的方式进行调用\",{\"1\":{\"1230\":1}}],[\"的方式来使用\",{\"1\":{\"1262\":1}}],[\"的方式\",{\"1\":{\"1026\":1,\"1075\":1,\"1080\":2,\"1081\":2,\"1094\":1,\"1132\":1,\"1134\":1,\"1136\":1,\"1207\":1,\"1881\":1}}],[\"的方式访问对象成员\",{\"1\":{\"1011\":1}}],[\"的方式调用指定位置的元素\",{\"1\":{\"961\":1,\"972\":1}}],[\"的方式添加参数\",{\"1\":{\"210\":1}}],[\"的基础上\",{\"1\":{\"1118\":1}}],[\"的基本整数操作符的对应物\",{\"1\":{\"529\":1}}],[\"的多个类\",{\"1\":{\"1090\":1}}],[\"的值\",{\"1\":{\"1044\":1}}],[\"的毫秒数\",{\"1\":{\"956\":2}}],[\"的区别同理\",{\"1\":{\"905\":1}}],[\"的区别\",{\"0\":{\"1181\":1},\"1\":{\"905\":1}}],[\"的整数替代false和true\",{\"1\":{\"860\":1}}],[\"的实现方式\",{\"1\":{\"855\":1}}],[\"的文件中\",{\"1\":{\"790\":1}}],[\"的是最为相似的\",{\"1\":{\"736\":1}}],[\"的各种方法\",{\"1\":{\"641\":1}}],[\"的invoke方法来执行获得的方法\",{\"1\":{\"626\":1,\"2066\":1}}],[\"的效果完全相同\",{\"1\":{\"577\":1}}],[\"的常规协定是\",{\"1\":{\"577\":1}}],[\"的条件\",{\"0\":{\"560\":1}}],[\"的所有相关方法\",{\"1\":{\"529\":1}}],[\"的第二个参数\",{\"1\":{\"505\":1}}],[\"的对象来排序\",{\"1\":{\"504\":1}}],[\"的规则\",{\"1\":{\"497\":1,\"2524\":1}}],[\"的日期\",{\"1\":{\"466\":1}}],[\"的类型属性\",{\"1\":{\"1412\":2}}],[\"的类型\",{\"1\":{\"1405\":1}}],[\"的类必须实现\",{\"1\":{\"497\":1}}],[\"的类\",{\"1\":{\"461\":1}}],[\"的精华\",{\"1\":{\"461\":1}}],[\"的长度\",{\"1\":{\"449\":1}}],[\"的泛型\",{\"1\":{\"282\":1}}],[\"的\",{\"1\":{\"111\":1,\"491\":1,\"590\":1,\"1187\":1,\"1500\":1,\"1886\":1,\"2002\":1,\"2338\":1,\"2467\":1,\"2758\":2,\"3032\":1}}],[\"的目录下\",{\"1\":{\"77\":1}}],[\"的配置\",{\"1\":{\"72\":1}}],[\"的名字\",{\"1\":{\"71\":1}}],[\"即副本成员同时也可以是仲裁者\",{\"1\":{\"3131\":1}}],[\"即备份数据\",{\"1\":{\"3131\":1}}],[\"即oplog\",{\"1\":{\"3127\":1}}],[\"即复合索引\",{\"1\":{\"3106\":1}}],[\"即升序或降序\",{\"1\":{\"3105\":1}}],[\"即跟指定值相差几个字符可以命中\",{\"1\":{\"3005\":1}}],[\"即把\",{\"1\":{\"2877\":1}}],[\"即资源被访问的方式\",{\"1\":{\"2702\":1}}],[\"即项目的访问路径\",{\"1\":{\"2597\":1}}],[\"即接收get\",{\"1\":{\"2560\":1}}],[\"即自动生成的键值\",{\"1\":{\"2435\":1}}],[\"即java企业版\",{\"1\":{\"2483\":1}}],[\"即java端\",{\"1\":{\"2388\":1}}],[\"即java有一定的动态性\",{\"1\":{\"1999\":1}}],[\"即要连接的数据库地址\",{\"1\":{\"2292\":1}}],[\"即多少个参数\",{\"1\":{\"2133\":1}}],[\"即引用地址\",{\"1\":{\"2026\":1}}],[\"即获取class类的实例\",{\"1\":{\"2017\":1}}],[\"即每个类所属的类\",{\"1\":{\"2012\":1}}],[\"即锚点\",{\"1\":{\"1989\":1}}],[\"即url可以用来标识一个资源\",{\"1\":{\"1988\":1,\"1995\":1}}],[\"即不用手动import\",{\"1\":{\"2741\":1}}],[\"即不能通过此套接字的输出流发送任何数据\",{\"1\":{\"1966\":1}}],[\"即不能在从此套接字的输入流中接收任何数据\",{\"1\":{\"1966\":1}}],[\"即不强制那些实现了该接口的类也同时实现这个新加的方法\",{\"1\":{\"1273\":1}}],[\"即无法重新连接或重新绑定\",{\"1\":{\"1966\":1}}],[\"即无论如何资源都会被释放\",{\"1\":{\"1342\":1}}],[\"即本端的端口号\",{\"1\":{\"1966\":1}}],[\"即本端的ip地址\",{\"1\":{\"1966\":1}}],[\"即物理链路层\",{\"1\":{\"1955\":1}}],[\"即同层间可以通信\",{\"1\":{\"1952\":1}}],[\"即同一个事务的多个操作必须在同一个连接下\",{\"1\":{\"2383\":1}}],[\"即同一个\",{\"1\":{\"1661\":1}}],[\"即通信协议\",{\"1\":{\"1951\":1}}],[\"即通过指定的\",{\"1\":{\"1661\":1}}],[\"即通过法名\",{\"1\":{\"1038\":1}}],[\"即从指针位置开始写\",{\"1\":{\"1889\":1}}],[\"即字符集≈\",{\"1\":{\"1863\":1}}],[\"即保证了\",{\"1\":{\"1749\":1}}],[\"即传入实际的类型参数\",{\"1\":{\"1700\":1}}],[\"即两个对象相同\",{\"1\":{\"1656\":2}}],[\"即两个引用是否指向同一个对象实体\",{\"1\":{\"1178\":1,\"1179\":1}}],[\"即hashcode值也是随机\",{\"1\":{\"1647\":1}}],[\"即存放数据之前\",{\"1\":{\"1642\":1}}],[\"即所有操作共享数据的这些语句都要放在同步范围中\",{\"1\":{\"1525\":1}}],[\"即共享成员变量\",{\"1\":{\"1495\":1}}],[\"即创建线程对象\",{\"1\":{\"1471\":1}}],[\"即内存中的数据==变量的值\",{\"1\":{\"1454\":1}}],[\"即进程之间不方便通信\",{\"1\":{\"1436\":1}}],[\"即指一段静态的代码\",{\"1\":{\"1435\":1}}],[\"即运行时保留\",{\"1\":{\"1411\":1}}],[\"即class保留\",{\"1\":{\"1411\":1}}],[\"即源java文件保留\",{\"1\":{\"1411\":1}}],[\"即enum也是用来修饰类的\",{\"1\":{\"1376\":1}}],[\"即程序在运行时由于外界因素造成的一般性异常\",{\"1\":{\"1324\":1}}],[\"即对象的标识符p1保存了对象的内存地址\",{\"1\":{\"1300\":1}}],[\"即对象的类型是父类\",{\"1\":{\"1149\":1}}],[\"即时编译器编译后的代码等数据\",{\"1\":{\"1298\":1}}],[\"即实现接口的类可以直接使用这些方法\",{\"1\":{\"1273\":1}}],[\"即可获知哪些文档包含某个单词\",{\"1\":{\"2878\":1}}],[\"即可添加到左边的jar包目录下\",{\"1\":{\"2744\":1}}],[\"即可\",{\"1\":{\"1194\":1,\"2963\":1}}],[\"即可以定义多个互相重载的构造器\",{\"1\":{\"1071\":1}}],[\"即子类可以重载父类的同名不同参数的方法\",{\"1\":{\"1159\":1}}],[\"即为绿色软件\",{\"1\":{\"3041\":1}}],[\"即为默认命名空间\",{\"1\":{\"2782\":1}}],[\"即为不同数据库的驱动\",{\"1\":{\"2283\":1}}],[\"即为代理类对象调用的方法\",{\"1\":{\"2095\":1}}],[\"即为通配符指定匹配的上限和下限\",{\"1\":{\"1750\":1}}],[\"即为链地址法\",{\"1\":{\"1677\":1}}],[\"即为需要被同步的代码\",{\"1\":{\"1511\":1}}],[\"即为new的子类对象\",{\"1\":{\"1144\":1}}],[\"即为匿名对象\",{\"1\":{\"1019\":1}}],[\"即在生命周期内\",{\"1\":{\"1104\":1}}],[\"即执行同一个对象实体\",{\"1\":{\"1014\":1}}],[\"即借助某种程序语言\",{\"1\":{\"1004\":1}}],[\"即使开启了完全匹配查询\",{\"1\":{\"2946\":1}}],[\"即使请求的内容完全相同\",{\"1\":{\"2902\":1}}],[\"即使定义了成员变量\",{\"1\":{\"2547\":1}}],[\"即使代理做的操作是一样的\",{\"1\":{\"2075\":1}}],[\"即使两个对象完全一样\",{\"1\":{\"1647\":1}}],[\"即使catch中又出现异常了\",{\"1\":{\"1342\":1}}],[\"即使未赋值\",{\"1\":{\"995\":1}}],[\"即使是整数\",{\"1\":{\"865\":1}}],[\"即使是web工程\",{\"1\":{\"71\":1}}],[\"即便用double类型接收\",{\"1\":{\"891\":1}}],[\"即没有迭代器接口\",{\"1\":{\"710\":1}}],[\"即向某个index插入数据\",{\"1\":{\"697\":1}}],[\"即向当前时间对象上进行指定单位的时间增加\",{\"1\":{\"473\":1}}],[\"即移除当前集合中\",{\"1\":{\"665\":1}}],[\"即被包含\",{\"1\":{\"663\":1}}],[\"即合并另一个集合\",{\"1\":{\"658\":1}}],[\"即将字节流转为utf\",{\"1\":{\"1847\":1}}],[\"即将字符读入数组时\",{\"1\":{\"570\":1}}],[\"即将实际参数值的副本\",{\"1\":{\"1043\":1}}],[\"即将原来的数字加上\",{\"1\":{\"516\":1}}],[\"即0时区时间\",{\"1\":{\"477\":1}}],[\"即颠倒字符串\",{\"1\":{\"456\":1}}],[\"即条件可能是null\",{\"1\":{\"357\":1}}],[\"即\",{\"1\":{\"77\":1,\"367\":1,\"561\":1,\"562\":1,\"640\":1,\"761\":1,\"873\":1,\"917\":1,\"975\":1,\"1098\":1,\"1418\":1,\"1634\":1,\"1637\":1,\"1751\":1,\"1752\":1,\"1762\":1,\"1833\":1,\"2108\":1,\"2141\":1,\"2219\":1,\"3032\":1,\"3109\":1}}],[\"即线上环境\",{\"1\":{\"23\":1}}],[\"选举规则是根据票数来决定谁获胜\",{\"1\":{\"3172\":1}}],[\"选举触发条件\",{\"0\":{\"3171\":1}}],[\"选举节点目录\",{\"1\":{\"3139\":1}}],[\"选举节点\",{\"1\":{\"3138\":1}}],[\"选项是一些与副本集设置有关的信息\",{\"1\":{\"3149\":1}}],[\"选项一般为空即可\",{\"1\":{\"3149\":1}}],[\"选项\",{\"1\":{\"2518\":1}}],[\"选项解释\",{\"1\":{\"71\":1}}],[\"选中导出方式和要设置的项目进行设置\",{\"1\":{\"2516\":1}}],[\"选中之前创建的web项目\",{\"1\":{\"2495\":1}}],[\"选中org\",{\"1\":{\"2489\":1}}],[\"选他\",{\"1\":{\"1360\":1}}],[\"选或跳过\",{\"0\":{\"920\":1}}],[\"选择或创建数据库\",{\"0\":{\"3061\":1}}],[\"选择的依据\",{\"0\":{\"3028\":1}}],[\"选择放置manifest\",{\"1\":{\"2744\":1}}],[\"选择具体的module\",{\"1\":{\"2530\":1}}],[\"选择war或war\",{\"1\":{\"2518\":1}}],[\"选择web\",{\"1\":{\"2485\":1}}],[\"选择artifact\",{\"1\":{\"2518\":1}}],[\"选择一个tomcat模板就可以在右边进行配置\",{\"1\":{\"2506\":1}}],[\"选择tomcat\",{\"1\":{\"2505\":1}}],[\"选择tomcat的主目录即可\",{\"1\":{\"2502\":1}}],[\"选择maven\",{\"1\":{\"2489\":1,\"2493\":1}}],[\"选择右边的\",{\"1\":{\"2485\":1}}],[\"选择src目录作为源码来源\",{\"1\":{\"2291\":1}}],[\"选择sdk版本\",{\"1\":{\"2106\":1}}],[\"选择之前解压的mysql驱动目录\",{\"1\":{\"2291\":1}}],[\"选择jar包的等级和要加载到哪个模块就ok了\",{\"1\":{\"2290\":1}}],[\"选择\",{\"1\":{\"2288\":1,\"2483\":1,\"2486\":1,\"2499\":1}}],[\"选择符合参数列表的构造器\",{\"1\":{\"1071\":1}}],[\"选择问题所针对的现实世界中的实体\",{\"1\":{\"1004\":1}}],[\"选择性的执行某段代码\",{\"1\":{\"917\":1}}],[\"选择第一个选项mybatis\",{\"1\":{\"312\":1}}],[\"选择合适的spring\",{\"1\":{\"305\":1}}],[\"选择quickstart\",{\"1\":{\"81\":1}}],[\"选择版本\",{\"1\":{\"72\":1}}],[\"选maven就行\",{\"1\":{\"71\":1}}],[\"选java就行\",{\"1\":{\"71\":1}}],[\"时会执行myrunnable类的run方法\",{\"1\":{\"1493\":1}}],[\"时的警告\",{\"1\":{\"1430\":1}}],[\"时必须为该\",{\"1\":{\"1410\":1}}],[\"时要在其前面增加\",{\"1\":{\"1389\":1}}],[\"时区\",{\"1\":{\"461\":1}}],[\"时区错误\",{\"0\":{\"277\":1}}],[\"时\",{\"1\":{\"426\":1,\"469\":1,\"779\":1,\"905\":2,\"1128\":1,\"1185\":1,\"1639\":1,\"1676\":1,\"1870\":1,\"2037\":1,\"2667\":1}}],[\"时选择\",{\"1\":{\"71\":1}}],[\"时间到后\",{\"1\":{\"2805\":1}}],[\"时间片\",{\"0\":{\"1484\":1}}],[\"时间线上的一个瞬时点\",{\"1\":{\"475\":1}}],[\"时间相关的属性\",{\"1\":{\"465\":1}}],[\"时间滚动输出\",{\"1\":{\"262\":3}}],[\"时间单位\",{\"0\":{\"171\":1}}],[\"时间属性\",{\"1\":{\"170\":1}}],[\"时间和日期之间使用\",{\"1\":{\"123\":1}}],[\"时间\",{\"0\":{\"457\":1},\"1\":{\"33\":1,\"483\":1,\"486\":1,\"811\":1}}],[\"实用类提供了很多静态方法\",{\"1\":{\"2242\":1}}],[\"实用功能\",{\"0\":{\"3254\":1},\"1\":{\"29\":1}}],[\"实测该字段必须出现在查询条件中\",{\"1\":{\"2959\":1}}],[\"实测\",{\"1\":{\"2219\":1,\"3012\":1,\"3169\":1}}],[\"实参列表\",{\"1\":{\"1215\":1}}],[\"实参\",{\"1\":{\"1041\":1}}],[\"实实在在的某个人\",{\"1\":{\"1007\":1}}],[\"实在需要转换类型\",{\"1\":{\"887\":1}}],[\"实例称为一个节点\",{\"1\":{\"2845\":1}}],[\"实例方法\",{\"0\":{\"2163\":1,\"2166\":1}}],[\"实例所生成\",{\"1\":{\"2015\":1}}],[\"实例变量\",{\"1\":{\"828\":1,\"1227\":1}}],[\"实例\",{\"1\":{\"651\":1,\"2252\":1,\"2253\":1,\"2845\":1}}],[\"实例化数据对象\",{\"1\":{\"2980\":1}}],[\"实例化被代理类\",{\"1\":{\"2097\":1}}],[\"实例化file类的对象\",{\"1\":{\"1804\":1}}],[\"实例化filereader对象\",{\"1\":{\"1800\":1}}],[\"实例化时\",{\"1\":{\"1720\":1}}],[\"实例化泛型类\",{\"0\":{\"1720\":1}}],[\"实例化hashmap类时\",{\"1\":{\"1710\":1}}],[\"实例化arraylist类时\",{\"1\":{\"1709\":1}}],[\"实例化子类\",{\"1\":{\"1264\":2}}],[\"实例化成员内部类\",{\"0\":{\"1208\":1}}],[\"实例化的文件已经存在\",{\"1\":{\"573\":1}}],[\"实例化的文件不存在\",{\"1\":{\"573\":1}}],[\"实例化后\",{\"1\":{\"480\":1,\"1721\":1}}],[\"实例化\",{\"0\":{\"573\":1,\"574\":1,\"575\":1,\"585\":1,\"756\":1,\"1583\":1,\"1624\":1,\"2194\":1},\"1\":{\"476\":1,\"486\":1,\"572\":1,\"612\":1,\"619\":1,\"628\":1}}],[\"实例化类\",{\"1\":{\"469\":1,\"1011\":1}}],[\"实际操作时\",{\"1\":{\"2918\":1}}],[\"实际使用时\",{\"1\":{\"2766\":1}}],[\"实际使用中根据需要存入的数据大小定义不同的blob类型\",{\"1\":{\"2360\":1}}],[\"实际使用的时候\",{\"1\":{\"523\":1}}],[\"实际引用的资源也可以不存在\",{\"1\":{\"1916\":1}}],[\"实际应该使用try\",{\"1\":{\"1858\":1}}],[\"实际上就是改一下\",{\"1\":{\"3165\":1}}],[\"实际上就是调用当前对象的tostring\",{\"1\":{\"1183\":1}}],[\"实际上是一组协议\",{\"1\":{\"1955\":1}}],[\"实际上非常规则\",{\"1\":{\"1776\":1}}],[\"实际调用的是子类的方法\",{\"1\":{\"1354\":1}}],[\"实际执行的是子类重写的方法\",{\"1\":{\"1158\":1}}],[\"实际运行的是子类重写父类的方法\",{\"1\":{\"1147\":1}}],[\"实际比较的是对象的属性的大小\",{\"1\":{\"492\":1}}],[\"实际开发应该在多台服务器上进行\",{\"1\":{\"3137\":1}}],[\"实际开发中都是使用maven添加的\",{\"1\":{\"2745\":1}}],[\"实际开发中\",{\"1\":{\"254\":1,\"1583\":1,\"1686\":1,\"1791\":1,\"1795\":1,\"1894\":1,\"2067\":1,\"2563\":1,\"2751\":1}}],[\"实际开发时都是部署到linux服务器上的\",{\"1\":{\"188\":1}}],[\"实际开发时\",{\"1\":{\"118\":1,\"208\":1,\"239\":1,\"362\":1,\"372\":1,\"3077\":1}}],[\"实际开发时仅书写gav中的g和a\",{\"1\":{\"97\":1}}],[\"实收金额\",{\"1\":{\"384\":1}}],[\"实体内容\",{\"1\":{\"1179\":1,\"1180\":1,\"1185\":1}}],[\"实体数据\",{\"1\":{\"365\":1}}],[\"实体类泛型\",{\"1\":{\"346\":1}}],[\"实体类需要手动生成get\",{\"1\":{\"344\":1}}],[\"实体类包名\",{\"1\":{\"343\":1}}],[\"实体类开发\",{\"1\":{\"338\":1}}],[\"实体类\",{\"0\":{\"273\":1,\"343\":1},\"1\":{\"313\":1}}],[\"实现读写分离\",{\"1\":{\"3125\":1}}],[\"实现免密登录访问即可\",{\"1\":{\"2860\":1}}],[\"实现架构的思想\",{\"1\":{\"2764\":1}}],[\"实现某个监听器接口\",{\"1\":{\"2723\":1}}],[\"实现某一应用最大可用数据库连接数的限制\",{\"1\":{\"2419\":1}}],[\"实现filter接口\",{\"0\":{\"2697\":1}}],[\"实现步骤\",{\"0\":{\"2645\":1}}],[\"实现servlet接口\",{\"1\":{\"2529\":1,\"2531\":1}}],[\"实现计算\",{\"1\":{\"2191\":1}}],[\"实现他的方法\",{\"1\":{\"2133\":1}}],[\"实现接口\",{\"1\":{\"2078\":1}}],[\"实现接口的方法不同\",{\"1\":{\"1395\":1}}],[\"实现接口的枚举类\",{\"0\":{\"1380\":1}}],[\"实现接口的类中必须提供接口中所有方法的具体实现内容\",{\"1\":{\"1261\":1}}],[\"实现追加和插入效果\",{\"0\":{\"1890\":1}}],[\"实现将基本数据类型的数据格式转化为字符串输出\",{\"1\":{\"1871\":1}}],[\"实现将字符的输出流按指定字符集转换为字节的输出流\",{\"1\":{\"1854\":1}}],[\"实现编码和解码的功能\",{\"1\":{\"1843\":1}}],[\"实现原理和结构与hashmap相同\",{\"1\":{\"1667\":1}}],[\"实现重复利用\",{\"1\":{\"1564\":1}}],[\"实现comparable\",{\"1\":{\"1687\":1}}],[\"实现comparable接口\",{\"0\":{\"501\":1}}],[\"实现call方法\",{\"1\":{\"1562\":1}}],[\"实现callable接口是jdk5\",{\"1\":{\"1558\":1}}],[\"实现runnable\",{\"1\":{\"1498\":1}}],[\"实现runnable接口的方式\",{\"1\":{\"1497\":1}}],[\"实现的方式更适合来处理多个线程有共享数据的情况\",{\"1\":{\"1497\":1}}],[\"实现的方式没有类的单继承性的局限性\",{\"1\":{\"1497\":1}}],[\"实现一些自定义的逻辑\",{\"1\":{\"1390\":1}}],[\"实现一次编译多次使用\",{\"1\":{\"745\":1}}],[\"实现替代配置文件功能\",{\"1\":{\"1389\":1}}],[\"实现代替配置文件的功能\",{\"1\":{\"1389\":1}}],[\"实现usb接口\",{\"1\":{\"1264\":1}}],[\"实现具体业务的代码即可\",{\"1\":{\"1252\":1}}],[\"实现方式2\",{\"0\":{\"1241\":1}}],[\"实现方式1\",{\"0\":{\"1240\":1}}],[\"实现功能的拓展\",{\"1\":{\"1113\":1}}],[\"实现对该属性的操作\",{\"1\":{\"1057\":1,\"1058\":1}}],[\"实现缩进\",{\"1\":{\"815\":1}}],[\"实现了代码和数据的分离\",{\"1\":{\"2304\":1}}],[\"实现了接口\",{\"1\":{\"2096\":1}}],[\"实现了基于tcp协议的客户端\",{\"1\":{\"1996\":1}}],[\"实现了基于\",{\"1\":{\"1981\":1}}],[\"实现了一个跨平台的网络库\",{\"1\":{\"1923\":1}}],[\"实现了comparable接口\",{\"1\":{\"878\":1}}],[\"实现了\",{\"1\":{\"767\":1}}],[\"实现了iterator接口的对象\",{\"1\":{\"674\":1}}],[\"实现类简介\",{\"0\":{\"1663\":1}}],[\"实现类去实现runnable中的抽象方法\",{\"1\":{\"1491\":1,\"1492\":1}}],[\"实现类\",{\"0\":{\"707\":1}}],[\"实现类为\",{\"1\":{\"655\":1}}],[\"实现类为page\",{\"1\":{\"351\":1}}],[\"实现\",{\"1\":{\"497\":1,\"1252\":1,\"1582\":1}}],[\"实现自主研发基于springboot整合任意技术的开发方式\",{\"1\":{\"69\":1}}],[\"实时查看logback运行状态\",{\"1\":{\"262\":1}}],[\"理解成是一个大的概念\",{\"1\":{\"2764\":1}}],[\"理解springboot底层\",{\"1\":{\"69\":1}}],[\"理解为主\",{\"1\":{\"11\":2}}],[\"掌握各式各样的第三方技术与springboot整合的方案\",{\"1\":{\"69\":1}}],[\"简言之\",{\"1\":{\"2188\":1}}],[\"简洁\",{\"1\":{\"915\":1}}],[\"简洁一些\",{\"1\":{\"340\":1}}],[\"简称binary\",{\"1\":{\"3033\":1}}],[\"简称为\",{\"1\":{\"2843\":1}}],[\"简称java容器\",{\"1\":{\"1572\":1}}],[\"简称\",{\"1\":{\"878\":1,\"1147\":1}}],[\"简单类型\",{\"1\":{\"2781\":1}}],[\"简单示例\",{\"0\":{\"2771\":1}}],[\"简单来说\",{\"1\":{\"1435\":1,\"3122\":1}}],[\"简单设置就可以随意切换java版本\",{\"1\":{\"782\":1}}],[\"简单int\",{\"1\":{\"530\":1}}],[\"简单读取\",{\"1\":{\"127\":1}}],[\"简化操作\",{\"1\":{\"2560\":1,\"2567\":1}}],[\"简化代码\",{\"1\":{\"1028\":1}}],[\"简化写法\",{\"1\":{\"971\":1,\"984\":1}}],[\"简化常用工程相关配置\",{\"1\":{\"68\":1}}],[\"简化依赖管理\",{\"1\":{\"68\":1}}],[\"简介\",{\"0\":{\"67\":1,\"437\":1,\"1923\":1,\"2111\":1,\"2316\":1,\"3021\":1}}],[\"其主要目标是使用数据库的访问变得方便快捷\",{\"1\":{\"3232\":1}}],[\"其资源成本比具有数据集的全功能副本集成员更便宜\",{\"1\":{\"3132\":1}}],[\"其\",{\"1\":{\"3036\":1}}],[\"其生命周期由容器来管理\",{\"1\":{\"2544\":1}}],[\"其key为指定的key\",{\"1\":{\"2436\":1}}],[\"其结果可以是任何不是流的值\",{\"1\":{\"2207\":1}}],[\"其一对\",{\"1\":{\"2118\":1}}],[\"其次\",{\"1\":{\"2085\":1,\"2375\":1}}],[\"其属性是不能被改变的\",{\"1\":{\"1991\":1}}],[\"其长度\",{\"1\":{\"1985\":1}}],[\"其长度就不可修改\",{\"1\":{\"1574\":1}}],[\"其长度就不可变了\",{\"1\":{\"973\":1}}],[\"其长度就确定了\",{\"1\":{\"969\":1,\"1573\":1}}],[\"其通信模型如图所示\",{\"1\":{\"1968\":1}}],[\"其后的读操作则直接访问缓冲区\",{\"1\":{\"1826\":1}}],[\"其后的代码就不再执行\",{\"1\":{\"1318\":1}}],[\"其它四个重写的接口方法暂不考虑\",{\"1\":{\"2566\":1}}],[\"其它计算机实现数据交换\",{\"1\":{\"1924\":1}}],[\"其它的同上\",{\"1\":{\"1658\":1}}],[\"其它因编程错误或偶然的外在因素导致的一般性问题\",{\"1\":{\"1313\":1}}],[\"其hashcode也是不同的\",{\"1\":{\"1647\":1}}],[\"其所在的类一定要重写hashcode\",{\"1\":{\"1646\":1}}],[\"其元素的类型也就确定了\",{\"1\":{\"1573\":1}}],[\"其数量不足以满足多个进程运行的需要\",{\"1\":{\"1544\":1}}],[\"其方法也一样\",{\"1\":{\"2688\":1}}],[\"其方法才可以供外部调用\",{\"1\":{\"1223\":1}}],[\"其方法的参数和返回为值类型一般为double型\",{\"1\":{\"511\":1}}],[\"其余各个位取反\",{\"1\":{\"873\":1}}],[\"其余表示值\",{\"1\":{\"873\":1}}],[\"其会被解析为\",{\"1\":{\"810\":1}}],[\"其子接口和子接口的实现类也同样可以使用\",{\"1\":{\"655\":1}}],[\"其内部的成员变量和成员方法都是static的\",{\"1\":{\"632\":1}}],[\"其对象必须使用构造器生成\",{\"1\":{\"441\":1}}],[\"其中mongos或mongod将写入其pid\",{\"1\":{\"3142\":1}}],[\"其中配置文件如下\",{\"1\":{\"3142\":1}}],[\"其中底部>\",{\"1\":{\"3057\":1}}],[\"其中数据的增删改查也只是像变量操作一样简单\",{\"1\":{\"3036\":1}}],[\"其中aggregation方法的参数就是聚合函数构造器\",{\"1\":{\"3014\":1}}],[\"其中的method可以选择get和post分别进行测试\",{\"1\":{\"2623\":1}}],[\"其中的每个元素也被按照成员变量同样的方式被隐式初始化\",{\"1\":{\"975\":1}}],[\"其中init\",{\"1\":{\"2551\":1}}],[\"其中server方法中打印一句话进行测设\",{\"1\":{\"2529\":1}}],[\"其中status的值为0代表正常退出\",{\"1\":{\"634\":1}}],[\"其中有三个文件夹\",{\"1\":{\"2511\":1}}],[\"其中有个invoke方法\",{\"1\":{\"2090\":1}}],[\"其中元素按比较器顺序排序\",{\"1\":{\"2227\":1}}],[\"其中元素按自然顺序排序\",{\"1\":{\"2226\":1}}],[\"其中\",{\"1\":{\"1661\":1,\"2289\":1,\"2435\":1,\"2498\":1,\"2754\":1,\"3097\":1}}],[\"其中类b是类a的父类\",{\"1\":{\"1168\":1}}],[\"其中包含了java的开发工具\",{\"1\":{\"777\":1}}],[\"其中包含热部署工具\",{\"1\":{\"140\":1}}],[\"其中最基础的策略就是\",{\"1\":{\"257\":1}}],[\"其中键为主环境\",{\"1\":{\"234\":1}}],[\"其实mogodb很多时候是关系型数据库的一个替代\",{\"1\":{\"3025\":1}}],[\"其实是会钝化处理的\",{\"1\":{\"2825\":1}}],[\"其实是一种假的多线程\",{\"1\":{\"1441\":1}}],[\"其实问题也不是很大\",{\"1\":{\"2546\":1}}],[\"其实一个数据库连接就是一个socket连接\",{\"1\":{\"2307\":1}}],[\"其实至少有三个线程\",{\"1\":{\"1441\":1}}],[\"其实就是一个接口\",{\"1\":{\"2522\":1}}],[\"其实就是重写的抽象方法的方法体\",{\"1\":{\"2114\":1}}],[\"其实就是接口中的抽象方法的形参列表\",{\"1\":{\"2114\":1}}],[\"其实就是共享资源竞争\",{\"1\":{\"1524\":1}}],[\"其实就是在描述其对象的属性和行为\",{\"1\":{\"1223\":1}}],[\"其实就是类的成员的设计\",{\"1\":{\"1007\":1}}],[\"其实就是四个配置文件书写的位置\",{\"1\":{\"216\":1}}],[\"其实没有多维数组\",{\"1\":{\"982\":1}}],[\"其实\",{\"1\":{\"982\":1}}],[\"其实测试版基本也是在linux上\",{\"1\":{\"188\":1}}],[\"其名称由模块名+版本号+\",{\"1\":{\"190\":1}}],[\"其设计目的是用来简化spring应用的初始搭建以及开发过程\",{\"1\":{\"67\":1}}],[\"其他都交给\",{\"1\":{\"3232\":1}}],[\"其他索引\",{\"0\":{\"3107\":1}}],[\"其他排序的字段\",{\"1\":{\"2951\":1}}],[\"其他>json\",{\"1\":{\"2833\":1}}],[\"其他静态资源\",{\"1\":{\"2475\":1}}],[\"其他各种可以被浏览器访问的静态资源\",{\"1\":{\"2474\":1}}],[\"其他k=v是字符集\",{\"1\":{\"2294\":1}}],[\"其他k=v\",{\"1\":{\"2294\":1}}],[\"其他完全一样的方法\",{\"1\":{\"2151\":1}}],[\"其他流\",{\"0\":{\"1866\":1}}],[\"其他流的方法\",{\"0\":{\"580\":1}}],[\"其他实现跟节点流类似\",{\"1\":{\"1791\":1}}],[\"其他泛型的list就无法调用了\",{\"1\":{\"1747\":1}}],[\"其他代码的同上\",{\"1\":{\"1688\":1}}],[\"其他线程等待\",{\"1\":{\"1528\":1}}],[\"其他线程调用了该线程的suspend\",{\"1\":{\"1527\":1}}],[\"其他线程需要等待\",{\"1\":{\"1523\":1}}],[\"其他线程都需要在后面排队\",{\"1\":{\"1522\":1}}],[\"其他线程都要进行等待\",{\"1\":{\"1522\":1}}],[\"其他线程不可以参与执行\",{\"1\":{\"1508\":1,\"1525\":1}}],[\"其他元注解要相同\",{\"1\":{\"1420\":1}}],[\"其他方式\",{\"1\":{\"2874\":1}}],[\"其他方式创建springboot项目\",{\"0\":{\"80\":1}}],[\"其他方法不用管\",{\"1\":{\"2531\":1}}],[\"其他方法无法解析\",{\"1\":{\"1878\":1}}],[\"其他方法\",{\"1\":{\"1378\":1}}],[\"其他诉求\",{\"1\":{\"1373\":1}}],[\"其他区域跟类和对象无关\",{\"1\":{\"1298\":1}}],[\"其他区域\",{\"1\":{\"1298\":1}}],[\"其他javabean\",{\"1\":{\"1284\":1}}],[\"其他数据库驱动实现接口\",{\"1\":{\"1265\":1}}],[\"其他数据index顺延\",{\"1\":{\"697\":1}}],[\"其他操作\",{\"1\":{\"1153\":1}}],[\"其他关键字\",{\"1\":{\"1029\":1}}],[\"其他修饰符\",{\"1\":{\"1022\":1}}],[\"其他7种基本数据类型是可以互相运算的\",{\"1\":{\"862\":1}}],[\"其他类型\",{\"1\":{\"2963\":1}}],[\"其他类型functional\",{\"0\":{\"2145\":1}}],[\"其他类型配置文件\",{\"0\":{\"118\":1}}],[\"其他类\",{\"0\":{\"631\":1}}],[\"其他层的异常最终会抛到controller\",{\"1\":{\"369\":1}}],[\"其他的数据不变\",{\"1\":{\"2909\":1}}],[\"其他的步骤都是相通的\",{\"1\":{\"2330\":1}}],[\"其他的部分是确定的\",{\"1\":{\"1699\":1}}],[\"其他的都是false\",{\"1\":{\"423\":1}}],[\"其他的配置采用默认值\",{\"1\":{\"271\":1}}],[\"其他的根据加载顺序确定\",{\"1\":{\"234\":1}}],[\"其他还是正常debug级别\",{\"1\":{\"262\":1}}],[\"其他环境中有相同属性时\",{\"1\":{\"233\":1}}],[\"其他目录也可以\",{\"1\":{\"206\":1}}],[\"其他服务器关闭\",{\"1\":{\"202\":1}}],[\"其他内置类\",{\"1\":{\"33\":1}}],[\"其他spring组件\",{\"1\":{\"11\":1}}],[\"其他知识\",{\"1\":{\"11\":1}}],[\"其他\",{\"0\":{\"1108\":1,\"2268\":1},\"1\":{\"10\":1,\"29\":1,\"3024\":1}}],[\"集群\",{\"0\":{\"3271\":1}}],[\"集群中每一个实例彼此连接的时候都检验彼此使用的证书的内容是否相同\",{\"1\":{\"3209\":1}}],[\"集群管理角色\",{\"1\":{\"3189\":1}}],[\"集群不完整\",{\"1\":{\"2893\":1}}],[\"集群完整\",{\"1\":{\"2893\":1}}],[\"集群间组件的通信端口\",{\"1\":{\"2858\":1}}],[\"集群等复杂操作只能保证尽量正确\",{\"1\":{\"60\":1,\"61\":1}}],[\"集合名称\",{\"1\":{\"3086\":1,\"3087\":1,\"3100\":5}}],[\"集合名\",{\"1\":{\"3068\":1,\"3071\":1,\"3080\":1,\"3090\":1,\"3095\":2,\"3096\":1,\"3097\":1,\"3116\":1,\"3117\":1}}],[\"集合名不能以\",{\"1\":{\"3067\":1}}],[\"集合名不能含有\",{\"1\":{\"3067\":1}}],[\"集合名不能是空字符串\",{\"1\":{\"3067\":1}}],[\"集合操作\",{\"0\":{\"3065\":1}}],[\"集合将存放在\",{\"1\":{\"3062\":1}}],[\"集合讲的是数据\",{\"1\":{\"2191\":1}}],[\"集合接口或集合类在jdk5\",{\"1\":{\"1711\":1}}],[\"集合类的泛型\",{\"1\":{\"1711\":1}}],[\"集合类可以用于存储数量不等的多个对象\",{\"1\":{\"1575\":1}}],[\"集合也是泛型使用最多的场景\",{\"1\":{\"1700\":1}}],[\"集合容器类在设计阶段\",{\"1\":{\"1699\":1}}],[\"集合判断两个元素相等的标准\",{\"0\":{\"1637\":1}}],[\"集合元素可以是\",{\"1\":{\"1636\":1}}],[\"集合元素的类型\",{\"1\":{\"1603\":2}}],[\"集合时都使用这个实现类\",{\"1\":{\"1635\":1}}],[\"集合用来储存无序的的不相同的元素\",{\"1\":{\"1633\":1}}],[\"集合对象\",{\"1\":{\"1603\":2}}],[\"集合对象每次调用iterator\",{\"1\":{\"1589\":1}}],[\"集合可以记住容器中对象的数据类型\",{\"1\":{\"1582\":1}}],[\"集合可分为\",{\"1\":{\"1578\":1}}],[\"集合框架的体系\",{\"0\":{\"1578\":1}}],[\"集合框架\",{\"0\":{\"1577\":1}}],[\"集合出现的目的\",{\"1\":{\"1576\":1}}],[\"集合都解决了\",{\"1\":{\"1575\":1}}],[\"集合都是可以指定泛型的\",{\"1\":{\"695\":1}}],[\"集合就像一种容器\",{\"1\":{\"1572\":1}}],[\"集合的隐式创建\",{\"1\":{\"3071\":1}}],[\"集合的命名规范\",{\"1\":{\"3067\":1}}],[\"集合的元素需要实现comparable接口\",{\"1\":{\"2226\":1}}],[\"集合的区别\",{\"0\":{\"2191\":1}}],[\"集合的使用场景\",{\"0\":{\"1576\":1}}],[\"集合的特点\",{\"0\":{\"1575\":1}}],[\"集合的由来\",{\"0\":{\"1572\":1}}],[\"集合的索引\",{\"1\":{\"697\":1,\"698\":1}}],[\"集合概述\",{\"0\":{\"1570\":1,\"1571\":1}}],[\"集合里添加了一些根据索引来操作集合元素的方法\",{\"1\":{\"693\":1,\"1630\":1}}],[\"集合复制\",{\"1\":{\"689\":1}}],[\"集合中使用泛型\",{\"0\":{\"1708\":1}}],[\"集合中元素的顺序不影响比对结果\",{\"1\":{\"720\":1}}],[\"集合中的每个元素\",{\"1\":{\"2219\":1}}],[\"集合中的每个元素都有其对应的顺序索引\",{\"1\":{\"1610\":1}}],[\"集合中的泛型\",{\"0\":{\"1704\":1}}],[\"集合中的元素都是同一类型\",{\"1\":{\"1749\":1}}],[\"集合中的元素\",{\"1\":{\"1587\":1,\"1588\":1}}],[\"集合中的\",{\"1\":{\"685\":1}}],[\"集合中是否包含某个元素\",{\"1\":{\"662\":1}}],[\"集合变为空集合\",{\"1\":{\"660\":1}}],[\"集合coll2依然还在\",{\"1\":{\"658\":1}}],[\"集合\",{\"0\":{\"3263\":1},\"1\":{\"498\":1,\"1572\":1,\"1578\":1,\"1582\":2,\"1633\":1,\"2190\":1,\"2192\":1,\"2219\":1,\"3031\":1,\"3065\":1,\"3099\":1,\"3109\":1,\"3110\":1,\"3184\":1}}],[\"集成数据层\",{\"0\":{\"3256\":1}}],[\"集成mysql\",{\"1\":{\"338\":1}}],[\"集成mybatisplus\",{\"1\":{\"338\":1}}],[\"集成mybatis\",{\"0\":{\"269\":1,\"279\":1}}],[\"集成\",{\"0\":{\"178\":1}}],[\"集成其他技术\",{\"0\":{\"294\":1},\"1\":{\"29\":1}}],[\"集成data\",{\"1\":{\"29\":1}}],[\"本章内容\",{\"1\":{\"2276\":1}}],[\"本身扩展性很好\",{\"1\":{\"2843\":1}}],[\"本身也是个xml文档\",{\"1\":{\"2781\":1}}],[\"本身毫无意义\",{\"1\":{\"2137\":1}}],[\"本身并不提供承装对象的能力\",{\"1\":{\"1589\":1}}],[\"本机ip\",{\"0\":{\"1935\":1}}],[\"本质上是一个分布式数据库\",{\"1\":{\"2845\":1}}],[\"本质上web服务器是一个应用程序\",{\"1\":{\"2446\":1}}],[\"本质上就是lambda表达式\",{\"1\":{\"2148\":1}}],[\"本质\",{\"1\":{\"2394\":1,\"2774\":1}}],[\"本质还是上面的语法总结\",{\"1\":{\"2119\":1}}],[\"本质还是比较的基本数据类型\",{\"1\":{\"492\":1}}],[\"本质是查询的是\",{\"1\":{\"3152\":1}}],[\"本质是安装了服务器软件的计算机\",{\"1\":{\"2446\":1}}],[\"本质是个常量\",{\"0\":{\"1397\":1}}],[\"本质是一套java书写规范\",{\"1\":{\"1282\":1}}],[\"本质就是一个文件夹\",{\"1\":{\"1086\":1}}],[\"本层循环\",{\"1\":{\"949\":1}}],[\"本次循环\",{\"1\":{\"949\":1}}],[\"本次案例仅考虑浏览器向服务器发送请求接受响应\",{\"1\":{\"338\":1}}],[\"本项目\",{\"1\":{\"396\":1}}],[\"本地ip肯定是不行的\",{\"1\":{\"3164\":1}}],[\"本地端口必须在\",{\"1\":{\"1985\":1}}],[\"本地回环地址\",{\"1\":{\"1935\":1}}],[\"本地格式\",{\"0\":{\"486\":1}}],[\"本地日期和时间\",{\"1\":{\"468\":1}}],[\"本地日期\",{\"1\":{\"466\":1}}],[\"本地日期时间\",{\"1\":{\"461\":1}}],[\"本地时间\",{\"0\":{\"464\":1},\"1\":{\"461\":1,\"467\":1}}],[\"本地\",{\"1\":{\"204\":1,\"2778\":1}}],[\"本操作可以在idea环境下执行\",{\"1\":{\"190\":1}}],[\"本人都经过验证了\",{\"1\":{\"60\":1,\"61\":1}}],[\"本笔记是以6\",{\"1\":{\"60\":1,\"61\":1}}],[\"翻译很烂\",{\"1\":{\"60\":1,\"61\":1}}],[\"中默认的数据库为\",{\"1\":{\"3062\":1}}],[\"中解析快得多\",{\"1\":{\"2963\":1}}],[\"中支持的数据类型非常丰富\",{\"1\":{\"2963\":1}}],[\"中文是按照汉字进行拆分的\",{\"1\":{\"2941\":1}}],[\"中文文档\",{\"1\":{\"60\":1,\"61\":1}}],[\"中数据的主键查询\",{\"1\":{\"2904\":1}}],[\"中取出一个\",{\"1\":{\"2416\":1}}],[\"中建立数据库连接\",{\"1\":{\"2413\":1}}],[\"中处理集合的关键抽象概念\",{\"1\":{\"2188\":1}}],[\"中选择目标模块\",{\"1\":{\"2107\":1}}],[\"中只会有一个class实例\",{\"1\":{\"2015\":1}}],[\"中有关网络方面的功能都定义在\",{\"1\":{\"1996\":1}}],[\"中实现了类\",{\"1\":{\"1990\":1}}],[\"中国的中文编码表升级\",{\"1\":{\"1861\":1}}],[\"中国的中文编码表\",{\"1\":{\"1861\":1}}],[\"中添加的数据\",{\"1\":{\"1646\":1}}],[\"中严格区分大小写\",{\"1\":{\"834\":1}}],[\"中使用\",{\"1\":{\"824\":1}}],[\"中正则表达式中则需要有两个反斜杠才能被解析为其他语言中的转义作用\",{\"1\":{\"737\":1}}],[\"中\",{\"1\":{\"737\":1,\"1471\":1,\"1499\":1,\"1561\":1,\"1562\":1,\"1774\":1,\"1916\":1,\"2095\":1,\"2544\":1,\"2654\":1,\"2685\":1,\"2900\":1,\"2906\":1,\"2914\":1,\"2924\":1,\"2949\":1,\"2952\":1,\"2955\":1}}],[\"中元素的顺序\",{\"1\":{\"682\":1}}],[\"中提供了一系列静态的方法对集合元素进行排序\",{\"1\":{\"679\":1,\"1695\":1}}],[\"中包含了所有关于本地日期\",{\"1\":{\"461\":1}}],[\"中间操作不会执行任何的处理\",{\"1\":{\"2205\":1}}],[\"中间操作不会再被使用\",{\"1\":{\"2192\":1}}],[\"中间操作说明\",{\"0\":{\"2205\":1}}],[\"中间操作\",{\"1\":{\"2192\":1}}],[\"中间创建接口实体类的过程\",{\"1\":{\"272\":1}}],[\"中间件\",{\"1\":{\"11\":1}}],[\"中创建文档并添加数据了\",{\"1\":{\"2898\":1}}],[\"中创建\",{\"1\":{\"261\":1}}],[\"中括号可选\",{\"1\":{\"258\":1}}],[\"中的表结构\",{\"1\":{\"2961\":1}}],[\"中的表现层\",{\"1\":{\"2763\":1}}],[\"中的元素\",{\"1\":{\"2219\":1}}],[\"中的方法将各类数据写入文件\",{\"1\":{\"1878\":1}}],[\"中的语句执行时\",{\"1\":{\"1349\":1}}],[\"中的语句将不会执行\",{\"1\":{\"1338\":1}}],[\"中的\",{\"0\":{\"92\":1},\"1\":{\"1661\":2,\"2763\":3}}],[\"58\",{\"1\":{\"3076\":1,\"3082\":1}}],[\"54\",{\"1\":{\"3156\":7}}],[\"54410\",{\"1\":{\"3050\":1}}],[\"546\",{\"1\":{\"2930\":1}}],[\"5下载地址直达\",{\"1\":{\"2452\":1}}],[\"593z\",{\"1\":{\"3156\":1}}],[\"59\",{\"1\":{\"1945\":3}}],[\"5改写了集合框架中的全部接口和类\",{\"1\":{\"1700\":1}}],[\"5以上\",{\"1\":{\"2452\":1}}],[\"5以上都是基于注解的\",{\"1\":{\"1388\":1}}],[\"5以后\",{\"1\":{\"1700\":1}}],[\"5之后使用泛型来解决\",{\"1\":{\"1699\":1}}],[\"5之前只能把元素类型设计为object\",{\"1\":{\"1699\":1}}],[\"5之前创建新执行线程有两种方法\",{\"1\":{\"1462\":1}}],[\"5之前\",{\"1\":{\"1370\":1}}],[\"5倍\",{\"1\":{\"1619\":1}}],[\"5新增\",{\"1\":{\"1370\":1}}],[\"5<a\",{\"1\":{\"901\":1}}],[\"5<a<=20\",{\"1\":{\"901\":1}}],[\"5个字符\",{\"1\":{\"569\":1,\"1808\":1}}],[\"5舍6入\",{\"1\":{\"536\":1}}],[\"55\",{\"1\":{\"1185\":1,\"2240\":1}}],[\"5555\",{\"1\":{\"535\":1}}],[\"556\",{\"1\":{\"472\":7}}],[\"532\",{\"1\":{\"484\":1,\"485\":2}}],[\"53\",{\"1\":{\"484\":1,\"485\":2}}],[\"5111\",{\"1\":{\"516\":1}}],[\"51\",{\"1\":{\"476\":1,\"3076\":1,\"3082\":1}}],[\"512e2\",{\"1\":{\"845\":1}}],[\"512\",{\"1\":{\"378\":1,\"845\":2}}],[\"522z\",{\"1\":{\"3076\":1}}],[\"52000\",{\"1\":{\"2957\":1}}],[\"52\",{\"1\":{\"473\":3}}],[\"562z\",{\"1\":{\"476\":1}}],[\"56\",{\"1\":{\"472\":7,\"477\":2,\"531\":1,\"532\":1,\"533\":1,\"535\":1}}],[\"5ms\",{\"1\":{\"447\":1}}],[\"5已取消\",{\"1\":{\"384\":1}}],[\"509证书\",{\"0\":{\"3211\":1},\"1\":{\"3209\":1}}],[\"502z\",{\"1\":{\"479\":1}}],[\"5000\",{\"1\":{\"1908\":1,\"2919\":1,\"2930\":2,\"2957\":2}}],[\"500\",{\"1\":{\"380\":1,\"381\":1,\"2376\":1,\"2377\":1}}],[\"50\",{\"1\":{\"262\":3,\"381\":1,\"382\":1,\"383\":2,\"384\":1,\"385\":2,\"1120\":1,\"1160\":2,\"1489\":1,\"1710\":1,\"1873\":1}}],[\"5level\",{\"1\":{\"262\":4}}],[\"5版本为基础的\",{\"1\":{\"60\":1,\"61\":1}}],[\"5\",{\"0\":{\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"89\":1,\"97\":1,\"119\":1,\"120\":1,\"148\":1,\"149\":1,\"150\":1,\"166\":1,\"167\":1,\"168\":1,\"183\":1,\"197\":1,\"198\":1,\"199\":1,\"200\":1,\"201\":1,\"214\":1,\"264\":1,\"290\":1,\"291\":1,\"292\":1,\"294\":1,\"302\":1,\"308\":1,\"353\":1,\"354\":1,\"355\":1,\"356\":1,\"357\":1,\"379\":1,\"415\":1,\"421\":1,\"443\":1,\"444\":1,\"445\":1,\"446\":1,\"455\":1,\"463\":1,\"472\":1,\"487\":1,\"488\":1,\"489\":1,\"500\":1,\"501\":1,\"502\":1,\"503\":1,\"510\":1,\"516\":1,\"528\":1,\"535\":1,\"544\":1,\"553\":1,\"579\":1,\"593\":1,\"608\":1,\"617\":1,\"624\":1,\"648\":1,\"661\":1,\"686\":1,\"701\":1,\"715\":1,\"724\":1,\"752\":1,\"769\":1,\"800\":1,\"801\":1,\"802\":1,\"803\":1,\"814\":1,\"825\":1,\"836\":1,\"842\":1,\"848\":1,\"856\":1,\"869\":1,\"882\":1,\"883\":1,\"884\":1,\"885\":1,\"950\":1,\"963\":1,\"974\":1,\"992\":1,\"1011\":1,\"1034\":1,\"1072\":1,\"1076\":1,\"1084\":1,\"1090\":1,\"1096\":1,\"1107\":1,\"1116\":1,\"1154\":1,\"1155\":1,\"1156\":1,\"1157\":1,\"1158\":1,\"1169\":1,\"1170\":1,\"1171\":1,\"1172\":1,\"1182\":1,\"1194\":1,\"1209\":1,\"1210\":1,\"1211\":1,\"1212\":1,\"1236\":1,\"1243\":1,\"1250\":1,\"1251\":1,\"1252\":1,\"1261\":1,\"1295\":1,\"1315\":1,\"1333\":1,\"1341\":1,\"1354\":1,\"1372\":1,\"1373\":1,\"1374\":1,\"1380\":1,\"1400\":1,\"1416\":1,\"1433\":1,\"1441\":1,\"1456\":1,\"1459\":1,\"1489\":1,\"1500\":1,\"1503\":1,\"1509\":1,\"1528\":1,\"1537\":1,\"1539\":2,\"1547\":1,\"1548\":1,\"1549\":1,\"1550\":1,\"1555\":1,\"1557\":1,\"1568\":1,\"1576\":1,\"1594\":1,\"1595\":1,\"1596\":1,\"1597\":1,\"1621\":1,\"1631\":1,\"1639\":1,\"1668\":1,\"1670\":1,\"1677\":1,\"1707\":1,\"1733\":1,\"1754\":1,\"1755\":1,\"1756\":1,\"1757\":1,\"1766\":1,\"1767\":1,\"1768\":1,\"1769\":1,\"1777\":1,\"1791\":1,\"1818\":1,\"1824\":1,\"1837\":1,\"1864\":1,\"1879\":1,\"1889\":1,\"1890\":1,\"1891\":1,\"1905\":1,\"1919\":1,\"1928\":1,\"1937\":1,\"1948\":1,\"1958\":1,\"1967\":1,\"1974\":1,\"1975\":1,\"1976\":1,\"1977\":1,\"1992\":1,\"1993\":1,\"1994\":1,\"2003\":1,\"2004\":1,\"2005\":1,\"2016\":1,\"2055\":1,\"2070\":1,\"2098\":1,\"2099\":1,\"2100\":1,\"2101\":1,\"2107\":1,\"2117\":1,\"2128\":1,\"2142\":1,\"2166\":1,\"2167\":1,\"2168\":1,\"2178\":1,\"2179\":1,\"2180\":1,\"2186\":1,\"2193\":1,\"2233\":1,\"2273\":1,\"2284\":1,\"2291\":1,\"2301\":1,\"2302\":1,\"2303\":1,\"2304\":1,\"2313\":1,\"2320\":1,\"2321\":1,\"2322\":1,\"2345\":1,\"2364\":1,\"2366\":1,\"2374\":1,\"2375\":1,\"2376\":1,\"2420\":1,\"2427\":1,\"2435\":1,\"2442\":1,\"2450\":1,\"2456\":1,\"2504\":1,\"2505\":1,\"2506\":1,\"2507\":1,\"2526\":1,\"2534\":1,\"2556\":1,\"2562\":1,\"2563\":1,\"2564\":1,\"2578\":1,\"2580\":1,\"2632\":1,\"2643\":1,\"2656\":1,\"2665\":1,\"2677\":1,\"2688\":1,\"2689\":1,\"2690\":1,\"2706\":1,\"2718\":1,\"2735\":1,\"2772\":1,\"2789\":1,\"2804\":1,\"2820\":1,\"2832\":1,\"2846\":1,\"2859\":1,\"2903\":1,\"3050\":1,\"3064\":1,\"3069\":1,\"3122\":1,\"3129\":1,\"3130\":1,\"3131\":1,\"3132\":1,\"3189\":1,\"3200\":1,\"3215\":1,\"3241\":1,\"3262\":1,\"3268\":1},\"1\":{\"60\":1,\"61\":1,\"76\":1,\"200\":1,\"280\":1,\"301\":1,\"323\":1,\"324\":1,\"335\":1,\"336\":1,\"351\":1,\"352\":1,\"421\":1,\"451\":1,\"503\":1,\"516\":2,\"536\":1,\"566\":1,\"569\":1,\"577\":1,\"644\":2,\"645\":2,\"646\":1,\"647\":3,\"648\":2,\"650\":1,\"684\":4,\"685\":3,\"686\":1,\"687\":1,\"688\":3,\"815\":1,\"839\":1,\"845\":2,\"846\":1,\"849\":1,\"863\":1,\"891\":1,\"896\":2,\"911\":1,\"913\":1,\"914\":1,\"928\":1,\"954\":1,\"974\":1,\"997\":2,\"1373\":1,\"1440\":1,\"1471\":1,\"1474\":1,\"1481\":1,\"1484\":1,\"1487\":1,\"1489\":1,\"1492\":1,\"1502\":1,\"1507\":1,\"1523\":1,\"1530\":1,\"1562\":1,\"1582\":1,\"1602\":1,\"1604\":1,\"1645\":1,\"1710\":1,\"1780\":1,\"1805\":1,\"1808\":1,\"1817\":1,\"1826\":1,\"1968\":1,\"1977\":1,\"2048\":1,\"2100\":1,\"2184\":1,\"2192\":1,\"2198\":1,\"2209\":1,\"2214\":1,\"2239\":1,\"2240\":1,\"2244\":3,\"2325\":1,\"2329\":1,\"2333\":1,\"2349\":1,\"2352\":1,\"2355\":1,\"2365\":1,\"2387\":1,\"2391\":1,\"2405\":1,\"2407\":1,\"2408\":1,\"2409\":1,\"2487\":1,\"2503\":1,\"2536\":1,\"2583\":1,\"2588\":1,\"2592\":1,\"2620\":1,\"2835\":1,\"2910\":1,\"2936\":1,\"3038\":1,\"3044\":1,\"3047\":1,\"3048\":2,\"3122\":1,\"3139\":1,\"3195\":1}}],[\"0+\",{\"1\":{\"3082\":1}}],[\"0字符\",{\"1\":{\"3067\":1}}],[\"0表示为未失败\",{\"1\":{\"2901\":1}}],[\"0表示整数\",{\"1\":{\"872\":1}}],[\"05t23\",{\"1\":{\"3076\":1,\"3082\":1}}],[\"05t22\",{\"1\":{\"3076\":1}}],[\"05t21\",{\"1\":{\"2858\":1}}],[\"05s～1s的时间\",{\"1\":{\"2414\":1}}],[\"0p\",{\"1\":{\"2858\":1}}],[\"0或正整数\",{\"1\":{\"2546\":1}}],[\"03\",{\"1\":{\"1838\":1}}],[\"0时都修改为带泛型的结构\",{\"1\":{\"1711\":1}}],[\"0开始\",{\"1\":{\"1530\":1}}],[\"0后新增了一种\",{\"1\":{\"1462\":1}}],[\"0提供了4个标准的meta\",{\"1\":{\"1408\":1}}],[\"0提供了注解\",{\"1\":{\"1389\":1}}],[\"0作为了被除数\",{\"1\":{\"1334\":1}}],[\"0及之前\",{\"1\":{\"1254\":1}}],[\"0个\",{\"1\":{\"1047\":1}}],[\"0以前的写法\",{\"1\":{\"1047\":1}}],[\"0以上时\",{\"1\":{\"278\":1}}],[\"0新增\",{\"1\":{\"927\":2}}],[\"0新增的一种方式\",{\"1\":{\"1558\":1}}],[\"0新增的\",{\"1\":{\"442\":1}}],[\"0类型转换成了double\",{\"1\":{\"891\":1}}],[\"0互换\",{\"1\":{\"873\":1}}],[\"0f\",{\"1\":{\"845\":1}}],[\"0~65536\",{\"1\":{\"2449\":1}}],[\"0~65535\",{\"1\":{\"1937\":1}}],[\"0~3\",{\"1\":{\"2045\":1}}],[\"0~1023\",{\"1\":{\"1938\":1}}],[\"0~n\",{\"1\":{\"1473\":1,\"1480\":1}}],[\"0~255\",{\"1\":{\"577\":1}}],[\"0~9\",{\"1\":{\"10\":1}}],[\"0xffff\",{\"1\":{\"565\":1}}],[\"0x00\",{\"1\":{\"565\":1}}],[\"07\",{\"1\":{\"473\":1}}],[\"04\",{\"1\":{\"472\":1,\"488\":1,\"489\":1,\"3156\":11,\"3159\":6,\"3160\":2}}],[\"09t02\",{\"1\":{\"479\":1}}],[\"09t03\",{\"1\":{\"472\":1}}],[\"09t10\",{\"1\":{\"476\":1,\"477\":1}}],[\"09t18\",{\"1\":{\"472\":6,\"473\":2,\"477\":1}}],[\"09t17\",{\"1\":{\"469\":1}}],[\"09\",{\"1\":{\"469\":1,\"472\":1,\"488\":1,\"489\":1,\"2364\":1,\"2438\":1,\"3159\":6}}],[\"06\",{\"1\":{\"469\":2,\"472\":6,\"473\":2,\"476\":1,\"477\":2,\"479\":1,\"484\":1,\"485\":2,\"488\":1,\"489\":1,\"2858\":1,\"3156\":4}}],[\"0中包含了一个java\",{\"1\":{\"460\":1}}],[\"08\",{\"1\":{\"200\":2,\"1185\":1,\"2241\":1,\"2364\":1,\"2438\":1,\"3076\":3,\"3082\":1}}],[\"000z\",{\"1\":{\"3156\":2,\"3159\":2}}],[\"0001\",{\"1\":{\"873\":3,\"2782\":1}}],[\"00000000000000000000000000\",{\"1\":{\"3187\":1}}],[\"0000000000000000000000000000\",{\"1\":{\"3186\":1}}],[\"000000000000000000000000000000\",{\"1\":{\"3160\":1}}],[\"0000000000000000000000000000000000000000\",{\"1\":{\"3156\":1,\"3159\":1}}],[\"000000333\",{\"1\":{\"472\":1}}],[\"0000\",{\"1\":{\"873\":6,\"909\":13}}],[\"00也可以解决这个问题\",{\"1\":{\"277\":1}}],[\"00\",{\"1\":{\"123\":1,\"477\":1,\"956\":6,\"1185\":1,\"2907\":1,\"2908\":2,\"2925\":1,\"2926\":2}}],[\"02\",{\"1\":{\"123\":3,\"486\":1,\"1432\":1}}],[\"0110\",{\"1\":{\"909\":2}}],[\"0111\",{\"1\":{\"123\":1}}],[\"01\",{\"1\":{\"476\":1,\"479\":1,\"531\":1,\"956\":4,\"1432\":1,\"1838\":1,\"2322\":2,\"2325\":2}}],[\"0100\",{\"1\":{\"123\":1}}],[\"0b1010\",{\"1\":{\"123\":1}}],[\"0<\",{\"1\":{\"95\":1,\"331\":1,\"335\":1,\"336\":1}}],[\"0左右\",{\"1\":{\"60\":1,\"61\":1}}],[\"0\",{\"0\":{\"3016\":1},\"1\":{\"60\":2,\"61\":2,\"72\":2,\"128\":1,\"167\":4,\"170\":1,\"200\":8,\"213\":1,\"262\":1,\"321\":1,\"331\":1,\"336\":2,\"360\":3,\"375\":1,\"376\":1,\"377\":3,\"378\":2,\"379\":2,\"380\":1,\"381\":2,\"382\":4,\"412\":1,\"444\":1,\"445\":1,\"451\":2,\"453\":1,\"498\":2,\"501\":1,\"503\":1,\"513\":6,\"516\":1,\"518\":1,\"519\":3,\"520\":1,\"521\":1,\"524\":1,\"528\":1,\"536\":2,\"537\":3,\"565\":2,\"566\":1,\"577\":1,\"613\":1,\"621\":1,\"624\":1,\"636\":3,\"645\":1,\"690\":2,\"691\":1,\"699\":1,\"702\":1,\"703\":1,\"704\":1,\"781\":1,\"808\":1,\"811\":5,\"834\":1,\"860\":1,\"866\":1,\"873\":1,\"891\":2,\"897\":2,\"933\":3,\"936\":1,\"937\":1,\"938\":4,\"941\":3,\"950\":1,\"956\":2,\"970\":1,\"972\":1,\"982\":3,\"985\":1,\"988\":2,\"989\":4,\"990\":3,\"991\":1,\"992\":2,\"998\":4,\"1025\":4,\"1035\":1,\"1048\":1,\"1178\":1,\"1210\":2,\"1327\":1,\"1334\":1,\"1361\":1,\"1386\":1,\"1400\":2,\"1472\":4,\"1473\":1,\"1480\":1,\"1481\":2,\"1489\":2,\"1512\":1,\"1520\":1,\"1536\":1,\"1562\":1,\"1582\":1,\"1602\":1,\"1606\":2,\"1607\":1,\"1618\":1,\"1621\":1,\"1657\":1,\"1745\":1,\"1807\":1,\"1808\":1,\"1817\":1,\"1823\":1,\"1828\":2,\"1829\":2,\"1830\":3,\"1831\":3,\"1836\":2,\"1858\":1,\"1873\":2,\"1888\":1,\"1933\":1,\"1934\":2,\"1935\":2,\"1972\":2,\"1977\":1,\"1983\":3,\"1984\":1,\"1985\":5,\"2004\":2,\"2045\":2,\"2048\":6,\"2053\":1,\"2202\":1,\"2226\":2,\"2239\":1,\"2289\":1,\"2291\":1,\"2333\":1,\"2352\":2,\"2355\":2,\"2365\":1,\"2376\":1,\"2377\":1,\"2386\":1,\"2387\":1,\"2405\":8,\"2426\":1,\"2511\":1,\"2598\":7,\"2646\":2,\"2743\":1,\"2771\":1,\"2772\":2,\"2779\":1,\"2781\":3,\"2805\":1,\"2858\":4,\"2900\":2,\"2901\":2,\"2906\":2,\"2908\":5,\"2910\":1,\"2914\":2,\"2915\":1,\"2920\":7,\"2924\":2,\"2926\":5,\"2930\":5,\"2948\":2,\"2949\":2,\"2952\":2,\"2954\":1,\"2955\":2,\"2956\":1,\"2957\":8,\"2993\":2,\"2997\":1,\"3007\":1,\"3008\":1,\"3015\":5,\"3016\":2,\"3038\":1,\"3044\":1,\"3047\":1,\"3048\":3,\"3061\":1,\"3079\":1,\"3082\":1,\"3096\":1,\"3122\":1,\"3139\":1,\"3142\":1,\"3150\":1,\"3153\":4,\"3154\":1,\"3156\":4,\"3159\":7,\"3160\":3,\"3165\":1,\"3175\":1,\"3186\":2,\"3187\":2}}],[\"699z\",{\"1\":{\"3159\":2}}],[\"62<\",{\"1\":{\"2837\":1}}],[\"600\",{\"1\":{\"3171\":1}}],[\"6000\",{\"1\":{\"2243\":2,\"2930\":1,\"2957\":1}}],[\"60\",{\"1\":{\"2822\":3}}],[\"61\",{\"1\":{\"1945\":3}}],[\"6的源码\",{\"1\":{\"909\":1}}],[\"6的补码\",{\"1\":{\"909\":1}}],[\"6的反码\",{\"1\":{\"909\":2}}],[\"6500\",{\"1\":{\"2957\":1}}],[\"65kb\",{\"1\":{\"2360\":1}}],[\"65\",{\"1\":{\"886\":1,\"1178\":1,\"2226\":2,\"3160\":1}}],[\"65535\",{\"1\":{\"565\":1,\"576\":1,\"1985\":1}}],[\"677327b6\",{\"1\":{\"597\":1,\"642\":1,\"647\":1}}],[\"63\",{\"1\":{\"529\":1}}],[\"6379\",{\"1\":{\"287\":1,\"292\":1,\"293\":1}}],[\"66\",{\"1\":{\"426\":2}}],[\"683z\",{\"1\":{\"3156\":1}}],[\"680z\",{\"1\":{\"3156\":5}}],[\"68\",{\"1\":{\"426\":3}}],[\"64487fe22c64c9d9921960f8\",{\"1\":{\"3168\":1}}],[\"6447e68241b3272f43080f4d\",{\"1\":{\"3153\":1}}],[\"6432843354a1d1820aa07159\",{\"1\":{\"3073\":1}}],[\"64时\",{\"1\":{\"1678\":1}}],[\"64\",{\"1\":{\"375\":1,\"376\":1,\"377\":2,\"378\":1,\"380\":1,\"426\":1}}],[\"6<\",{\"1\":{\"95\":1,\"266\":1,\"389\":1}}],[\"6\",{\"0\":{\"79\":1,\"151\":1,\"152\":1,\"153\":1,\"202\":1,\"293\":1,\"295\":1,\"358\":1,\"359\":1,\"360\":1,\"361\":1,\"362\":1,\"380\":1,\"447\":1,\"456\":1,\"473\":1,\"517\":1,\"536\":1,\"538\":1,\"545\":1,\"594\":1,\"609\":1,\"618\":1,\"625\":1,\"649\":1,\"662\":1,\"687\":1,\"702\":1,\"716\":1,\"735\":1,\"753\":1,\"770\":1,\"771\":1,\"772\":1,\"826\":1,\"827\":1,\"828\":1,\"849\":1,\"875\":1,\"886\":1,\"964\":1,\"965\":1,\"966\":1,\"975\":1,\"993\":1,\"1012\":1,\"1035\":1,\"1073\":1,\"1097\":1,\"1110\":1,\"1117\":1,\"1118\":1,\"1119\":1,\"1120\":1,\"1159\":1,\"1195\":1,\"1213\":1,\"1237\":1,\"1262\":1,\"1334\":1,\"1342\":1,\"1343\":1,\"1344\":1,\"1355\":1,\"1381\":1,\"1382\":1,\"1383\":1,\"1442\":1,\"1457\":1,\"1538\":1,\"1550\":1,\"1556\":1,\"1569\":1,\"1570\":1,\"1581\":1,\"1585\":1,\"1598\":1,\"1608\":1,\"1622\":1,\"1631\":1,\"1640\":1,\"1659\":2,\"1693\":1,\"1734\":1,\"1770\":1,\"1778\":1,\"1779\":1,\"1780\":1,\"1792\":1,\"1838\":1,\"1839\":1,\"1865\":1,\"1892\":1,\"1906\":1,\"1907\":1,\"1908\":1,\"1909\":1,\"1920\":1,\"1938\":1,\"1959\":1,\"1978\":1,\"1979\":1,\"1995\":1,\"2006\":1,\"2007\":1,\"2008\":1,\"2009\":1,\"2010\":1,\"2017\":1,\"2018\":1,\"2019\":1,\"2020\":1,\"2021\":1,\"2056\":1,\"2108\":1,\"2118\":1,\"2130\":1,\"2234\":1,\"2245\":1,\"2274\":1,\"2314\":1,\"2323\":1,\"2346\":1,\"2365\":1,\"2377\":1,\"2378\":1,\"2428\":1,\"2436\":1,\"2443\":1,\"2457\":1,\"2565\":1,\"2566\":1,\"2567\":1,\"2594\":1,\"2678\":1,\"2691\":1,\"2692\":1,\"2693\":1,\"2694\":1,\"2719\":1,\"2729\":1,\"2736\":1,\"2752\":1,\"2766\":1,\"2783\":1,\"2805\":1,\"2821\":1,\"2832\":1,\"3088\":1,\"3133\":1,\"3190\":1,\"3201\":1,\"3263\":1,\"3269\":1},\"1\":{\"60\":1,\"61\":1,\"123\":1,\"312\":1,\"453\":1,\"454\":1,\"471\":1,\"536\":2,\"646\":1,\"684\":4,\"685\":3,\"686\":2,\"687\":1,\"881\":1,\"884\":1,\"909\":2,\"972\":1,\"1141\":1,\"1562\":1,\"1579\":1,\"1580\":1,\"1598\":1,\"1604\":1,\"1645\":1,\"1677\":4,\"1710\":1,\"1841\":1,\"1862\":1,\"1864\":1,\"1865\":1,\"2048\":1,\"2103\":2,\"2239\":1,\"2240\":1,\"2325\":1,\"2352\":1,\"2355\":6,\"2387\":1,\"2407\":1,\"2408\":1,\"2409\":1,\"2491\":1,\"2596\":1,\"2604\":1,\"2618\":1,\"2619\":1,\"2620\":1,\"2627\":2,\"2744\":1,\"2755\":1,\"2758\":1,\"2761\":1,\"2763\":1,\"2786\":1,\"2835\":1,\"2858\":1,\"2912\":1,\"2939\":1,\"3038\":1,\"3044\":1,\"3047\":1,\"3048\":2,\"3082\":1,\"3139\":1}}],[\"这返回true\",{\"1\":{\"3068\":1}}],[\"这非常危险\",{\"1\":{\"3056\":1}}],[\"这多个请求可能来自多个浏览器\",{\"1\":{\"2787\":1}}],[\"这行是固定格式\",{\"1\":{\"2782\":1}}],[\"这两款都是基于\",{\"1\":{\"2844\":1}}],[\"这两种方式获取的是同一个对象\",{\"1\":{\"2682\":1}}],[\"这两个技术都可以实现会话跟踪\",{\"1\":{\"2789\":1}}],[\"这两个对象都是servlet接口中\",{\"1\":{\"2582\":1}}],[\"这两个流都是用来操作文本文件的\",{\"1\":{\"1844\":1}}],[\"这整个过程就叫重定向\",{\"1\":{\"2658\":1}}],[\"这只是基本的处理过程\",{\"1\":{\"2583\":1}}],[\"这只是构造方法之一\",{\"1\":{\"638\":1,\"759\":1}}],[\"这意味着他们会等到需要结果的时候才执行\",{\"1\":{\"2193\":1}}],[\"这套api的操作跟sql里的操作类似\",{\"1\":{\"2187\":1}}],[\"这造成了很大的麻烦\",{\"1\":{\"1741\":1}}],[\"这表明该list只能保存字符串类型的对象\",{\"1\":{\"1700\":1}}],[\"这比较a与元素b的hash值\",{\"1\":{\"1643\":1}}],[\"这使得元素看起来是以插入顺序保存的记录了一个双向链表\",{\"1\":{\"1654\":1}}],[\"这使得元素看起来是以插入顺序保存的\",{\"1\":{\"1638\":1}}],[\"这三个方法的参数都是包含查询条件的querybuilders对象\",{\"1\":{\"2996\":1}}],[\"这三个方法只有在synchronized方法或synchronized代码块中才能使用\",{\"1\":{\"1551\":1}}],[\"这三个遍历是并列的\",{\"1\":{\"1474\":1}}],[\"这三个类无法直接new实例化\",{\"1\":{\"469\":1}}],[\"这三个类类似于calendar\",{\"1\":{\"464\":1}}],[\"这说明\",{\"1\":{\"1474\":1}}],[\"这条线程被称为主线程或\",{\"1\":{\"1439\":1}}],[\"这会简化标注在方法参数上的注解\",{\"1\":{\"1417\":1}}],[\"这几个方法是递进关系执行的\",{\"1\":{\"1355\":1}}],[\"这不是强制性的重写\",{\"1\":{\"1273\":1}}],[\"这称为\",{\"1\":{\"1159\":2}}],[\"这也就意味着\",{\"1\":{\"2748\":1}}],[\"这也就是为什么表示一位数字的正则表达式是\",{\"1\":{\"737\":1}}],[\"这也是为什么框架中会大量的使用反射\",{\"1\":{\"2003\":1}}],[\"这也是为什么set集合是无序的原因\",{\"1\":{\"1642\":1}}],[\"这也是为什么有观点认为private成员是无法继承的\",{\"1\":{\"1119\":1}}],[\"这也是为什么有观点认为private成员能继承\",{\"1\":{\"1119\":1}}],[\"这也意味着\",{\"1\":{\"1431\":1}}],[\"这点和c语言不同\",{\"1\":{\"860\":1}}],[\"这跟fload表示数据的方式有关\",{\"1\":{\"849\":1}}],[\"这时使用列名作为类的属性名就会报错\",{\"1\":{\"2354\":1}}],[\"这时将会有多个线程进来\",{\"1\":{\"1521\":1}}],[\"这时就产生了线程安全问题\",{\"1\":{\"1506\":1}}],[\"这时可以把不确定的部分暴露出去\",{\"1\":{\"1250\":1}}],[\"这时系统才会分配内存空间给对象\",{\"1\":{\"1223\":1}}],[\"这时需要将数据库对象传入getusers方法然后用数据库对象连接数据库进行操作\",{\"1\":{\"1153\":1}}],[\"这时候如果子类没有使用super显式的调用父类中的非空参构造器\",{\"1\":{\"1140\":1}}],[\"这时候更新下配置文件即可\",{\"1\":{\"220\":1}}],[\"这时上面的需求被实现了\",{\"1\":{\"1045\":1}}],[\"这时如果将数组中的字符全部取下来\",{\"1\":{\"569\":1,\"1808\":1}}],[\"这时\",{\"1\":{\"535\":1}}],[\"这时因为bigdecimal默认的舍入策略是精准模式\",{\"1\":{\"534\":1}}],[\"这次要反向进行排序\",{\"1\":{\"509\":1}}],[\"这其实也是实例化instant类的一种方式\",{\"1\":{\"479\":1}}],[\"这可能被用来记录应用程序中的事件时间戳\",{\"1\":{\"475\":1}}],[\"这是非常危险的\",{\"1\":{\"3178\":1}}],[\"这是无法正常连接的\",{\"1\":{\"3164\":1}}],[\"这是为系统集合保留的前缀\",{\"1\":{\"3067\":1}}],[\"这是为传输而设计的编码\",{\"1\":{\"1863\":1}}],[\"这是\",{\"1\":{\"3060\":1}}],[\"这是我们要的值\",{\"1\":{\"3015\":1}}],[\"这是主要用途\",{\"1\":{\"2769\":1}}],[\"这是其他文件做不到的\",{\"1\":{\"2735\":1}}],[\"这是servlet的最核心方法\",{\"1\":{\"2553\":1}}],[\"这是因为某些系统生成的集合中包含该字符\",{\"1\":{\"3067\":1}}],[\"这是因为es版本与springboot版本不兼容\",{\"1\":{\"2988\":1}}],[\"这是因为\",{\"1\":{\"1996\":1,\"2117\":1}}],[\"这是写编译器需要做的\",{\"1\":{\"1455\":1}}],[\"这是不符合常理且危险的\",{\"1\":{\"1055\":1}}],[\"这是jdk5\",{\"1\":{\"1047\":1}}],[\"这是一个最常用的类之一\",{\"1\":{\"468\":1}}],[\"这是该怎么办呢\",{\"1\":{\"209\":1}}],[\"这种扫描全集合的查询效率是非常低的\",{\"1\":{\"3103\":1}}],[\"这种格式的优点是灵活性高\",{\"1\":{\"3033\":1}}],[\"这种检索方式就是\",{\"1\":{\"2941\":1}}],[\"这种方式是最佳的方案\",{\"1\":{\"2874\":1}}],[\"这种方式非常的低效\",{\"1\":{\"2874\":1}}],[\"这种方式可以省去定义太多成员变量\",{\"1\":{\"128\":1}}],[\"这种情况很常见\",{\"1\":{\"2613\":1}}],[\"这种开发不能控制被创建的连接对象数\",{\"1\":{\"2414\":1}}],[\"这种模式开发\",{\"0\":{\"2414\":1}}],[\"这种上锁的方式保证了线程的安全性\",{\"1\":{\"1523\":1}}],[\"这种对象过多\",{\"1\":{\"1457\":1}}],[\"这种将程序输入输出\",{\"1\":{\"1289\":1}}],[\"这种javabean用于实现业务逻辑\",{\"1\":{\"1285\":1}}],[\"这种javabean也被叫做实体类\",{\"1\":{\"1285\":1}}],[\"这种抽象类中只包含常量和方法的定义\",{\"1\":{\"1254\":1}}],[\"这种步骤中不确定\",{\"1\":{\"1252\":1}}],[\"这种观点认为\",{\"1\":{\"1118\":1}}],[\"这种写法是错误的\",{\"1\":{\"901\":1}}],[\"这种排序被称为类的自然排序\",{\"1\":{\"495\":1}}],[\"这种配置方式和我们现在学习的完全不一样\",{\"1\":{\"222\":1}}],[\"这一方装载并注册jdbc驱动程序\",{\"1\":{\"2434\":1}}],[\"这一类方法不仅能在connection\",{\"1\":{\"2434\":1}}],[\"这一类文件受开发者影响\",{\"1\":{\"137\":1}}],[\"这一项可配可不配\",{\"1\":{\"2426\":1}}],[\"这一机制允许多条语句一次性提交给数据库批量处理\",{\"1\":{\"2366\":1}}],[\"这一般是由于共享的日志文件一直处于打开状态\",{\"1\":{\"1243\":1}}],[\"这一段配置千万不能删除\",{\"1\":{\"193\":1}}],[\"这太麻烦了\",{\"1\":{\"184\":1}}],[\"这样外网是访问不到的\",{\"1\":{\"3179\":1}}],[\"这样遍历的索引结构效率低下\",{\"1\":{\"2870\":1}}],[\"这样依次从文档中去查找是否含有关键词的方法叫做正向索引\",{\"1\":{\"2867\":1}}],[\"这样他人在拿到我们提供的jar之后\",{\"1\":{\"2738\":1}}],[\"这样代码在编写的时候就相对来说更加简单快捷\",{\"1\":{\"2566\":1}}],[\"这样以后就不用输入项目目录\",{\"1\":{\"2501\":1}}],[\"这样的方式将会消耗大量的资源和时间\",{\"1\":{\"2414\":1}}],[\"这样的方法调用在编译期是无法确定的\",{\"1\":{\"1156\":1}}],[\"这样这些列仍然是只读的\",{\"1\":{\"2345\":1}}],[\"这样这两个注解就被关联起来了\",{\"1\":{\"1420\":1}}],[\"这样java程序的移植性更高\",{\"1\":{\"2282\":1}}],[\"这样就可以查询索引内所有的文档了\",{\"1\":{\"2994\":1}}],[\"这样就可以显示全世界上所有文化的字符了\",{\"1\":{\"1863\":1}}],[\"这样就让文档转换为由单词序列构成的数据流\",{\"1\":{\"2879\":1}}],[\"这样就使得程序员无需对特定的数据库系统的特点有过多的了解\",{\"1\":{\"2279\":1}}],[\"这样做可以检查它是否是一个函数式接口\",{\"1\":{\"2139\":1}}],[\"这样做spring容器中东西不用全部重新加载一遍\",{\"1\":{\"136\":1}}],[\"这样一来程序开发中必然产生过多的代理\",{\"1\":{\"2074\":1}}],[\"这样当前程序就可以读取网络资源数据\",{\"1\":{\"1996\":1}}],[\"这样不同的主机可以互相区分\",{\"1\":{\"1996\":1}}],[\"这样才能和主机建立连接\",{\"1\":{\"1936\":1}}],[\"这样才能转\",{\"1\":{\"1166\":1}}],[\"这样在实际使用时\",{\"1\":{\"1698\":1}}],[\"这样在后台就可以看见非常\",{\"1\":{\"254\":1}}],[\"这样什么类型的数据都支持\",{\"1\":{\"1698\":1}}],[\"这样\",{\"1\":{\"1642\":1,\"2077\":1,\"2735\":1}}],[\"这样两个进程相互无休止地等待下去\",{\"1\":{\"1542\":1}}],[\"这样很多其他代码都会受到牵连\",{\"1\":{\"1286\":1}}],[\"这样编译时才能加载子类\",{\"1\":{\"1166\":1}}],[\"这样造成了很大的冗余\",{\"1\":{\"1152\":1}}],[\"这样我们就可以向一个函数传递参数时\",{\"1\":{\"1150\":1}}],[\"这样是可以的\",{\"1\":{\"1106\":1}}],[\"这样计算机运算的设计就更简单了\",{\"1\":{\"873\":1}}],[\"这样整体性能就大受影响\",{\"1\":{\"291\":1}}],[\"这样配置sql语句会打印\",{\"1\":{\"262\":1}}],[\"这样测试类就再次有效了\",{\"1\":{\"183\":1}}],[\"这就叫做映射\",{\"1\":{\"2961\":1}}],[\"这就意味着jar包是跨平台的\",{\"1\":{\"2734\":1}}],[\"这就不够灵活了\",{\"1\":{\"2133\":1}}],[\"这就形成了死锁\",{\"1\":{\"1548\":1}}],[\"这就使得线程间通信更简便\",{\"1\":{\"1439\":1}}],[\"这就是所谓的\",{\"1\":{\"2117\":1}}],[\"这就是编码表\",{\"1\":{\"1860\":1}}],[\"这就是异常的意义\",{\"1\":{\"1315\":1}}],[\"这就是一种模板模式\",{\"1\":{\"1250\":1}}],[\"这就是封装性的设计思想\",{\"1\":{\"1053\":1}}],[\"这就是多环境\",{\"1\":{\"223\":1}}],[\"这就是为什么这个jar包能独立运行的原因\",{\"1\":{\"201\":1}}],[\"这就完成了一次热部署的过程\",{\"1\":{\"139\":1}}],[\"这就需要额外设置一个程序\",{\"1\":{\"136\":1}}],[\"这类的配置文件\",{\"1\":{\"118\":1}}],[\"这个集合是隐藏的\",{\"1\":{\"3198\":1}}],[\"这个字符用来表示键的结尾\",{\"1\":{\"3079\":1}}],[\"这个字符表示集合名的结尾\",{\"1\":{\"3067\":1}}],[\"这个用户自动继承所有数据库的权限\",{\"1\":{\"3060\":1}}],[\"这个表格展示了更加复杂的倒排索引\",{\"1\":{\"2880\":1}}],[\"这个文件即被称之为倒排文件\",{\"1\":{\"2878\":1}}],[\"这个文件存放在spring\",{\"1\":{\"96\":1}}],[\"这个关键字\",{\"1\":{\"2873\":1}}],[\"这个技术栈能够安全可靠地获取任何来源\",{\"1\":{\"2842\":1}}],[\"这个过程类似于通过字典中的检索字表查字的过程\",{\"1\":{\"2852\":1}}],[\"这个过程就是会话跟踪\",{\"1\":{\"2787\":1}}],[\"这个过程将一直继续下去\",{\"1\":{\"1351\":1}}],[\"这个指令是用来结合css控制标签的样式的\",{\"1\":{\"2772\":1}}],[\"这个已经基本被json取代了\",{\"1\":{\"2769\":1}}],[\"这个包就会自动解压\",{\"1\":{\"2747\":1}}],[\"这个监听器就实现了servletcontextlistener接口\",{\"1\":{\"2722\":1}}],[\"这个规则\",{\"1\":{\"2523\":1}}],[\"这个逻辑性就是由java代码控制的\",{\"1\":{\"2523\":1}}],[\"这个版本开始\",{\"1\":{\"2103\":1}}],[\"这个增强逻辑\",{\"1\":{\"2085\":1}}],[\"这个加载的过程需要类加载器参与\",{\"1\":{\"2026\":1}}],[\"这个对象就是httpsession\",{\"1\":{\"2812\":1}}],[\"这个对象就像一面镜子\",{\"1\":{\"2000\":1}}],[\"这个对象就包含了完整的类的结构信息\",{\"1\":{\"2000\":1}}],[\"这个连接提供了一个安全的数据传输通道\",{\"1\":{\"1996\":1}}],[\"这个socket对象就是客户端的socket对象\",{\"1\":{\"1976\":1}}],[\"这个方法过于繁琐\",{\"1\":{\"2402\":1}}],[\"这个方法立面再加一层if判断\",{\"1\":{\"1522\":1}}],[\"这个方法将被结束\",{\"1\":{\"948\":1}}],[\"这个内存地址一般是直接存在于代码段中\",{\"1\":{\"1455\":1}}],[\"这个类也需要能序列化\",{\"1\":{\"1905\":1}}],[\"这个类型参数将在使用时\",{\"1\":{\"1700\":1}}],[\"这个类型参数叫做泛型\",{\"1\":{\"1699\":1}}],[\"这个类就是枚举类\",{\"1\":{\"1368\":1}}],[\"这个类叫做抽象类\",{\"1\":{\"1246\":1}}],[\"这个写法不推荐\",{\"1\":{\"1047\":1}}],[\"这个默认值跟数组中元素的默认值一样\",{\"1\":{\"1016\":1}}],[\"这个数据永远不会被复制\",{\"1\":{\"3060\":1}}],[\"这个数据类型限制的是内层数组的元素\",{\"1\":{\"995\":1}}],[\"这个数值我们没有定义容量\",{\"1\":{\"850\":1}}],[\"这个也是声明变量\",{\"1\":{\"933\":1}}],[\"这个是apache提供的\",{\"1\":{\"2431\":1}}],[\"这个是产生死锁的最根本原因\",{\"1\":{\"1546\":1}}],[\"这个是main线程的遍历代码\",{\"1\":{\"1472\":1}}],[\"这个是我们处理不了的\",{\"1\":{\"1312\":1}}],[\"这个是用来测试一个对象的类名的\",{\"1\":{\"1168\":1}}],[\"这个是父类中的num\",{\"1\":{\"1133\":1}}],[\"这个是子类中的num\",{\"1\":{\"1133\":1}}],[\"这个是之前的\",{\"1\":{\"509\":1}}],[\"这个是全路径名\",{\"1\":{\"221\":1}}],[\"这个是idea中的设置\",{\"1\":{\"144\":1}}],[\"这个名字是可以修改的\",{\"1\":{\"219\":1}}],[\"这个时候idea就自动进行热部署操作\",{\"1\":{\"147\":1}}],[\"这个目前不太流行了\",{\"1\":{\"58\":1,\"59\":1}}],[\"这些索引在其范围内的值分布更加随机\",{\"1\":{\"3107\":1}}],[\"这些文本索引不存储特定于语言的停止词\",{\"1\":{\"3107\":1}}],[\"这些类型包括date\",{\"1\":{\"3033\":1}}],[\"这些类被用来构建和管理应用程序的图形用户界面\",{\"1\":{\"1090\":1}}],[\"这些不是太常用\",{\"1\":{\"2963\":1}}],[\"这些方式的效率也都不如倒排索引\",{\"1\":{\"2874\":1}}],[\"这些方法都是返回string类型\",{\"1\":{\"2597\":1}}],[\"这些方法检查所提供的参数是不是null\",{\"1\":{\"2434\":1}}],[\"这些方法操作的也是日期\",{\"1\":{\"465\":1}}],[\"这些web项目中cookie默认情况是不能共享的\",{\"1\":{\"2808\":1}}],[\"这些所依赖的类也可以打包成jar包放在web\",{\"1\":{\"2748\":1}}],[\"这些请求将被加入到等待队列中\",{\"1\":{\"2417\":1}}],[\"这些数据库连接的数量是由最小数据库连接数来设定的\",{\"1\":{\"2417\":1}}],[\"这些接口的区别就是参数不一样\",{\"1\":{\"2137\":1}}],[\"这些内存都将在方法区中进行分配\",{\"1\":{\"2027\":1}}],[\"这些内部结构也都受到泛型的约束\",{\"1\":{\"1711\":1}}],[\"这些封装后的io操作更加简单\",{\"1\":{\"1921\":1}}],[\"这些第三方包底层用的也是基本的io流操作\",{\"1\":{\"1921\":1}}],[\"这些子类的方法都是一样的\",{\"1\":{\"1583\":1}}],[\"这些对象可以属于同一个thread类的子类\",{\"1\":{\"1477\":1}}],[\"这些对象是作为类的属性的\",{\"1\":{\"1369\":1}}],[\"这些标记可以在编译\",{\"1\":{\"1387\":1}}],[\"这些约定包括getxxx\",{\"1\":{\"1283\":1}}],[\"这些步骤已经在父类中写好了\",{\"1\":{\"1250\":1}}],[\"这些同名方法就成了不同的方法\",{\"1\":{\"1159\":1}}],[\"这些属性和功能就形成了概念世界中的类\",{\"1\":{\"1004\":1}}],[\"这些信息被保存在\",{\"1\":{\"1387\":1}}],[\"这些信息是很有用的\",{\"1\":{\"757\":1}}],[\"这些信息都是私有的\",{\"1\":{\"757\":1}}],[\"这些信息如何写\",{\"1\":{\"265\":1}}],[\"这些新增的本地化时间日期\",{\"1\":{\"461\":1}}],[\"这些代码是使用纯h5写的\",{\"1\":{\"392\":1}}],[\"这些坐标都有了一些变化\",{\"1\":{\"265\":1}}],[\"这些包的版本配置非常麻烦\",{\"1\":{\"90\":1}}],[\"这些技术你不会就没法整合\",{\"1\":{\"11\":1}}],[\"这里进行全量查询\",{\"1\":{\"2999\":1,\"3000\":1,\"3008\":1,\"3010\":1}}],[\"这里指的是局部修改\",{\"1\":{\"2983\":1,\"2991\":1}}],[\"这里指的是手动读取配置项\",{\"1\":{\"127\":1}}],[\"这里创建了一个javabean\",{\"1\":{\"2981\":1}}],[\"这里都列出来\",{\"1\":{\"2967\":1}}],[\"这里都生效\",{\"1\":{\"167\":1}}],[\"这里\",{\"1\":{\"2865\":1}}],[\"这里由true改为false\",{\"1\":{\"2860\":2}}],[\"这里说到的全文搜索引擎指的是目前广泛应用的主流搜索引擎\",{\"1\":{\"2851\":1}}],[\"这里来通过继承原始的servlet类\",{\"1\":{\"2566\":1}}],[\"这里使用的是本地之前下载的tomcat\",{\"1\":{\"2497\":1}}],[\"这里主要指的批量操作是\",{\"1\":{\"2366\":1}}],[\"这里用到了上章定义的jdbcutils\",{\"1\":{\"2349\":1}}],[\"这里就有三个问题\",{\"1\":{\"1863\":1}}],[\"这里就不创建controller了\",{\"1\":{\"275\":1}}],[\"这里直接手写json字符串\",{\"1\":{\"2986\":1}}],[\"这里直接把异常抛出了\",{\"1\":{\"1858\":1}}],[\"这里直接用泛型限制了\",{\"1\":{\"501\":1}}],[\"这里省去了类型强转\",{\"1\":{\"1710\":1}}],[\"这里通过将runnable接口的实例作为参数传入thread类中\",{\"1\":{\"1492\":1}}],[\"这里可以直接指定泛型类型\",{\"1\":{\"1709\":1}}],[\"这里可以将异常信息再次throws到调用处\",{\"1\":{\"1361\":1}}],[\"这里可以选择项目所需的一些依赖\",{\"1\":{\"72\":1}}],[\"这里将异常抛出到调用处\",{\"1\":{\"1352\":1}}],[\"这里开始处理异常\",{\"1\":{\"1352\":1}}],[\"这里再抛就到虚拟机了\",{\"1\":{\"1352\":1}}],[\"这里出现了异常\",{\"1\":{\"1339\":1}}],[\"这里出问题了\",{\"1\":{\"1339\":1}}],[\"这里写代码\",{\"1\":{\"1277\":2}}],[\"这里变成了在方法中调用构造器\",{\"1\":{\"1241\":1}}],[\"这里要重写抽象方法\",{\"1\":{\"1215\":1}}],[\"这里要用integer而非int\",{\"1\":{\"645\":1}}],[\"这里执行①就停止了\",{\"1\":{\"1135\":1}}],[\"这里不赋值\",{\"1\":{\"1106\":1}}],[\"这里不用纠结\",{\"1\":{\"72\":1}}],[\"这里常使用很多html标签\",{\"1\":{\"811\":1}}],[\"这里还是需要指定正则表达式\",{\"1\":{\"752\":1}}],[\"这里介绍的是正则相关的java内置api\",{\"1\":{\"735\":1}}],[\"这里所有的例子均以hashmap为例\",{\"1\":{\"707\":1}}],[\"这里所有案例均以arraylist为例\",{\"1\":{\"695\":1}}],[\"这里会报异常\",{\"1\":{\"649\":1}}],[\"这里的路径指的是部署到\",{\"1\":{\"2691\":1}}],[\"这里的写是覆盖写\",{\"1\":{\"1889\":1}}],[\"这里的大指的是表示的数据范围大小\",{\"1\":{\"864\":1}}],[\"这里的字符是任意语言的一个字\",{\"1\":{\"852\":1}}],[\"这里的文件名是完整的文件名\",{\"1\":{\"559\":1}}],[\"这里的长度值得是存入stringbuffer的字符数量count\",{\"1\":{\"451\":1}}],[\"这里的修改是新创建了个一个字符串并返回\",{\"1\":{\"416\":1}}],[\"这里获取的不是底层char\",{\"1\":{\"449\":1}}],[\"这里是多条插入语句\",{\"1\":{\"3078\":1}}],[\"这里是多行注释\",{\"1\":{\"807\":1}}],[\"这里是过滤器主要操作的内容\",{\"1\":{\"2697\":1}}],[\"这里是继承httpservlet\",{\"1\":{\"2562\":1}}],[\"这里是byte\",{\"1\":{\"1823\":1}}],[\"这里是mysql\",{\"1\":{\"1153\":1}}],[\"这里是单行注释\",{\"1\":{\"806\":1}}],[\"这里是字符长度\",{\"1\":{\"403\":1}}],[\"这里是根据日志的级别来设置的\",{\"1\":{\"246\":1}}],[\"这里只介绍一下配置\",{\"1\":{\"2504\":1}}],[\"这里只介绍简单的命令行\",{\"1\":{\"637\":1,\"758\":1}}],[\"这里只列出基本依赖\",{\"1\":{\"389\":1}}],[\"这里只需要几个starter就搞定了\",{\"1\":{\"100\":1}}],[\"这里什么都不用写\",{\"1\":{\"346\":1}}],[\"这里采用openssl生成密码文件\",{\"1\":{\"3212\":1}}],[\"这里采用的是二分法\",{\"1\":{\"646\":1}}],[\"这里采用的是idea里的spring\",{\"1\":{\"70\":1}}],[\"这里采用自己下载的maven\",{\"1\":{\"298\":1}}],[\"重定向是两次请求\",{\"1\":{\"2665\":1}}],[\"重定向可以访问其他站点\",{\"1\":{\"2665\":1}}],[\"重定向的特点\",{\"0\":{\"2664\":1},\"1\":{\"2665\":1}}],[\"重定向的实现方式\",{\"0\":{\"2659\":1}}],[\"重定向的过程\",{\"0\":{\"2658\":1}}],[\"重定向\",{\"0\":{\"1869\":1,\"2657\":1,\"2660\":1},\"1\":{\"2667\":1}}],[\"重点看stage\",{\"1\":{\"3121\":1}}],[\"重点关注这个\",{\"1\":{\"2697\":1}}],[\"重点\",{\"1\":{\"1605\":1}}],[\"重点实践\",{\"1\":{\"11\":1}}],[\"重复打包会产生冲突\",{\"1\":{\"2526\":1}}],[\"重复\",{\"1\":{\"1996\":1}}],[\"重复的数据被排除\",{\"1\":{\"1657\":1}}],[\"重复利用线程池中线程\",{\"1\":{\"1565\":1}}],[\"重复性的执行某段代码\",{\"1\":{\"917\":1}}],[\"重名是要采用以下方法调用\",{\"1\":{\"1209\":1}}],[\"重新加载配置\",{\"1\":{\"3175\":1}}],[\"重新部署\",{\"1\":{\"2502\":1}}],[\"重新指向新的数组的值\",{\"1\":{\"979\":1}}],[\"重新分配空间\",{\"1\":{\"979\":1}}],[\"重新初始化时\",{\"1\":{\"979\":1}}],[\"重置isflag\",{\"1\":{\"956\":1}}],[\"重载形式\",{\"0\":{\"2199\":1}}],[\"重载时\",{\"1\":{\"1071\":1}}],[\"重载示例\",{\"0\":{\"1039\":1}}],[\"重载的调用\",{\"0\":{\"1038\":1}}],[\"重载的判断方式\",{\"1\":{\"1037\":1}}],[\"重载\",{\"0\":{\"1037\":1},\"1\":{\"702\":1,\"1159\":1}}],[\"重载方法\",{\"1\":{\"697\":1,\"698\":1,\"702\":1}}],[\"重载reload\",{\"0\":{\"139\":1}}],[\"重命名\",{\"0\":{\"560\":1},\"1\":{\"3190\":1}}],[\"重命名文件和目录\",{\"1\":{\"538\":1,\"1761\":1}}],[\"重写父类中的doget和dopost方法\",{\"1\":{\"2566\":1}}],[\"重写对应请求方式的doxxx方法\",{\"1\":{\"2563\":1}}],[\"重写接口中的5个方法\",{\"1\":{\"2557\":1}}],[\"重写接口中定义的方法\",{\"1\":{\"1382\":1}}],[\"重写dao里面的方法\",{\"1\":{\"2394\":1}}],[\"重写producecloth方法\",{\"1\":{\"2078\":1}}],[\"重写producecloth方法用于生产服装\",{\"1\":{\"2078\":1}}],[\"重写connectbd方法进行数据库连接\",{\"1\":{\"2073\":1}}],[\"重写compareto方法\",{\"0\":{\"501\":1},\"1\":{\"1687\":1}}],[\"重写compareto\",{\"1\":{\"497\":1}}],[\"重写原则\",{\"0\":{\"1649\":1}}],[\"重写thread类的run方法\",{\"1\":{\"1472\":1}}],[\"重写抽象方法\",{\"1\":{\"1380\":1}}],[\"重写equals\",{\"1\":{\"1181\":1}}],[\"重写object\",{\"1\":{\"1181\":1}}],[\"重写的接口的方法\",{\"1\":{\"2115\":1}}],[\"重写的hashcode\",{\"1\":{\"1649\":1}}],[\"重写的原则\",{\"1\":{\"1180\":1}}],[\"重写的要求\",{\"0\":{\"1123\":1}}],[\"重写后\",{\"1\":{\"1179\":1}}],[\"重写\",{\"0\":{\"1121\":1},\"1\":{\"1269\":1}}],[\"重写比较大小的核心方法\",{\"1\":{\"645\":1}}],[\"重写时要满足重写规则\",{\"1\":{\"496\":1}}],[\"重启所有节点\",{\"1\":{\"3215\":1}}],[\"重启tomcat\",{\"1\":{\"2502\":1}}],[\"重启\",{\"0\":{\"138\":1},\"1\":{\"2533\":1}}],[\"重启与重载\",{\"0\":{\"137\":1}}],[\"重要性\",{\"1\":{\"66\":1}}],[\"重要配置\",{\"1\":{\"57\":1}}],[\"分组\",{\"1\":{\"3014\":1}}],[\"分词器\",{\"1\":{\"2963\":1}}],[\"分析查询性能\",{\"1\":{\"3118\":1}}],[\"分析处理\",{\"1\":{\"2846\":1}}],[\"分析和可视化\",{\"1\":{\"2842\":1}}],[\"分析\",{\"1\":{\"2663\":1}}],[\"分析哪些属性不因对象的不同而改变\",{\"1\":{\"1224\":1}}],[\"分开\",{\"1\":{\"1933\":1}}],[\"分配内存并\",{\"1\":{\"2027\":1}}],[\"分配给用户进程或应用程序\",{\"1\":{\"1938\":1}}],[\"分配了相应资源\",{\"1\":{\"1538\":1}}],[\"分配空间\",{\"1\":{\"963\":1,\"970\":1,\"979\":1}}],[\"分别表示四个范围\",{\"1\":{\"2671\":1}}],[\"分别测试使用节点流和缓冲流进行文件的测试\",{\"1\":{\"1838\":1}}],[\"分别实现抽象方法\",{\"1\":{\"1380\":1}}],[\"分别是请求方式\",{\"1\":{\"2596\":1}}],[\"分别是\",{\"1\":{\"246\":1,\"1408\":1,\"2758\":1}}],[\"分为两种修改方式\",{\"1\":{\"2909\":1}}],[\"分为4个阶段\",{\"1\":{\"2544\":1}}],[\"分为6中情况\",{\"1\":{\"2119\":1}}],[\"分为\",{\"1\":{\"1323\":1,\"2855\":1}}],[\"分为有返回值的和没返回值的\",{\"1\":{\"1029\":1}}],[\"分支\",{\"1\":{\"919\":1}}],[\"分支结构\",{\"1\":{\"917\":1}}],[\"分\",{\"1\":{\"469\":1}}],[\"分类方式2\",{\"0\":{\"1934\":1}}],[\"分类方式1\",{\"0\":{\"1933\":1}}],[\"分类\",{\"0\":{\"1203\":1,\"1278\":1},\"1\":{\"1002\":1}}],[\"分类管理\",{\"1\":{\"399\":1}}],[\"分类名称\",{\"1\":{\"376\":1}}],[\"分类表\",{\"0\":{\"376\":1},\"1\":{\"374\":1}}],[\"分类记录\",{\"1\":{\"257\":1}}],[\"分布式\",{\"0\":{\"2845\":1},\"1\":{\"338\":1}}],[\"分布式集群\",{\"1\":{\"57\":1}}],[\"分页列表查询\",{\"0\":{\"3096\":1}}],[\"分页查询\",{\"1\":{\"2997\":1,\"3008\":1,\"3096\":1}}],[\"分页公式\",{\"1\":{\"2948\":1,\"3007\":1}}],[\"分页等\",{\"1\":{\"2187\":1}}],[\"分页相关的拦截器\",{\"1\":{\"350\":1}}],[\"分页功能\",{\"0\":{\"349\":1}}],[\"分页\",{\"0\":{\"2947\":1,\"3007\":1},\"1\":{\"338\":1}}],[\"分文件存储就要为每个文件设置动态有序的文件名\",{\"1\":{\"257\":1}}],[\"分隔符常量\",{\"0\":{\"1765\":1}}],[\"分隔\",{\"1\":{\"210\":1,\"1377\":1}}],[\"分割各个环境\",{\"1\":{\"226\":1}}],[\"分割\",{\"1\":{\"166\":1}}],[\"分片集群环境\",{\"0\":{\"3216\":1}}],[\"分片集群\",{\"0\":{\"3134\":1,\"3177\":1}}],[\"分片是否失败\",{\"1\":{\"2901\":1}}],[\"分片是否成功\",{\"1\":{\"2901\":1}}],[\"分片总数\",{\"1\":{\"2901\":1}}],[\"分片\",{\"1\":{\"2901\":1}}],[\"分片操作结果\",{\"1\":{\"2885\":1}}],[\"分片策略\",{\"1\":{\"57\":1}}],[\"分片原理\",{\"1\":{\"57\":1}}],[\"分片控制\",{\"1\":{\"57\":1}}],[\"wmajoritywriteavailabilitydate\",{\"1\":{\"3156\":1}}],[\"writablevotingmemberscount\",{\"1\":{\"3156\":1}}],[\"writemajoritycount\",{\"1\":{\"3156\":1}}],[\"writeconcernmajorityjournaldefault\",{\"1\":{\"3153\":1}}],[\"writeconcern和ordered两个参数一般不用管\",{\"1\":{\"3074\":1}}],[\"writeconcern\",{\"1\":{\"3071\":1,\"3072\":1,\"3075\":1,\"3081\":1}}],[\"writevalueasstring\",{\"1\":{\"2980\":1}}],[\"writeobject\",{\"0\":{\"1899\":1},\"1\":{\"1899\":1,\"1903\":1,\"1908\":2}}],[\"writeboolean\",{\"1\":{\"1878\":1}}],[\"writeint\",{\"1\":{\"1878\":1}}],[\"writeutf\",{\"1\":{\"1878\":1}}],[\"write方法\",{\"1\":{\"1822\":1}}],[\"write有多种重载\",{\"1\":{\"1813\":1}}],[\"writer\",{\"0\":{\"1786\":1,\"1788\":1},\"1\":{\"1777\":1,\"1831\":2,\"2639\":2,\"2640\":2,\"2642\":2}}],[\"write\",{\"0\":{\"572\":1,\"576\":1,\"577\":1,\"1813\":1},\"1\":{\"552\":1,\"574\":1,\"575\":1,\"576\":8,\"577\":7,\"579\":1,\"1813\":1,\"1816\":2,\"1817\":1,\"1823\":1,\"1836\":1,\"1857\":1,\"1858\":1,\"1888\":1,\"1891\":1,\"1972\":1,\"2365\":1,\"2639\":1,\"2640\":1,\"2642\":1,\"2645\":1,\"2646\":1,\"2648\":1,\"3161\":2}}],[\"wtimeout\",{\"1\":{\"3153\":1}}],[\"w\",{\"1\":{\"3127\":1,\"3153\":1,\"3161\":1}}],[\"w3\",{\"1\":{\"2781\":1,\"2782\":1}}],[\"w3c推出的可扩展标记语言\",{\"1\":{\"2767\":1}}],[\"www\",{\"1\":{\"1941\":1,\"1945\":2,\"1946\":1,\"1947\":2,\"1948\":1,\"1988\":1,\"1990\":3,\"1993\":1,\"2781\":3,\"2782\":4,\"2907\":1,\"2908\":2,\"2925\":1,\"2926\":2,\"3022\":1,\"3040\":1,\"3053\":1,\"3055\":1}}],[\"war相较于jar的唯一优势在于\",{\"1\":{\"2749\":1}}],[\"war能打包的内容\",{\"1\":{\"2748\":1}}],[\"war是一个可以直接运行的web模块\",{\"1\":{\"2747\":1}}],[\"war\",{\"1\":{\"2475\":1,\"2499\":1,\"2500\":2,\"2517\":2}}],[\"war包中的文件按照一定目录结构来组织\",{\"1\":{\"2748\":1}}],[\"war包是sun提出的一种web应用程序格式\",{\"1\":{\"2748\":1}}],[\"war包介绍\",{\"0\":{\"2747\":1}}],[\"war包和zip包差不多\",{\"1\":{\"2466\":1}}],[\"war包会自动解压缩\",{\"1\":{\"2466\":1}}],[\"warn\",{\"1\":{\"242\":2,\"244\":2,\"246\":1,\"262\":10,\"263\":2}}],[\"wall\",{\"1\":{\"2426\":1}}],[\"waiting\",{\"1\":{\"3049\":1,\"3142\":1}}],[\"waittest\",{\"1\":{\"1556\":1}}],[\"wait\",{\"0\":{\"1552\":1},\"1\":{\"1176\":1,\"1551\":1,\"1552\":1,\"1554\":3,\"1555\":2,\"1556\":1}}],[\"would\",{\"1\":{\"3161\":1}}],[\"woman\",{\"1\":{\"1171\":1,\"1368\":1}}],[\"work\",{\"1\":{\"1480\":1}}],[\"workpace\",{\"1\":{\"790\":1}}],[\"workplace>java\",{\"1\":{\"790\":1}}],[\"workplace>javac\",{\"1\":{\"790\":1}}],[\"workplace\",{\"1\":{\"538\":2,\"540\":1,\"636\":1,\"1767\":3,\"1768\":2}}],[\"wordid\",{\"1\":{\"2879\":1}}],[\"word\",{\"1\":{\"810\":1,\"812\":2}}],[\"world~\",{\"1\":{\"2553\":1}}],[\"world\",{\"1\":{\"123\":1,\"420\":2,\"790\":1,\"1134\":2}}],[\"weight\",{\"1\":{\"2042\":1}}],[\"wechatpay\",{\"1\":{\"1368\":1}}],[\"week\",{\"1\":{\"473\":2,\"474\":1}}],[\"weblistener\",{\"1\":{\"2726\":1}}],[\"weblister注解\",{\"1\":{\"2723\":1,\"2726\":1}}],[\"weblogic\",{\"1\":{\"2420\":1}}],[\"webfilter\",{\"1\":{\"2702\":2,\"2703\":1}}],[\"webfilter注解的dispatchertypes属性来配置\",{\"1\":{\"2702\":1}}],[\"webfilter注解进行配置\",{\"1\":{\"2701\":1}}],[\"web目录下资源访问\",{\"1\":{\"2694\":1}}],[\"web目录下\",{\"1\":{\"2693\":1}}],[\"webserver有很多配置项\",{\"1\":{\"2572\":1}}],[\"webservlet后面的值进行匹配\",{\"1\":{\"2537\":1}}],[\"webservlet\",{\"1\":{\"2532\":1,\"2552\":1,\"2564\":1,\"2566\":1,\"2571\":3,\"2572\":1,\"2574\":1,\"2575\":1,\"2576\":1,\"2577\":1,\"2598\":1,\"2614\":1,\"2624\":1,\"2640\":1,\"2655\":2,\"2661\":1,\"2662\":1,\"2701\":4}}],[\"webservlet注解内\",{\"1\":{\"2571\":1}}],[\"webservlet注解中的loadonstartup修改为0或整数\",{\"1\":{\"2552\":1}}],[\"webservlet注解中loadonstartup的值来改变servlet对象的创建时机\",{\"1\":{\"2546\":1}}],[\"webservlet注解\",{\"1\":{\"2532\":1,\"2570\":1}}],[\"websocket\",{\"1\":{\"2520\":1}}],[\"websphere\",{\"1\":{\"2420\":1}}],[\"web应用配置\",{\"1\":{\"2520\":1}}],[\"web缺失的webapp目录结构\",{\"0\":{\"2495\":1}}],[\"webapp\",{\"1\":{\"2489\":1,\"2510\":1}}],[\"webapps目录是用来部署项目的\",{\"1\":{\"2464\":1}}],[\"web项目\",{\"1\":{\"2750\":2}}],[\"web项目确实的目录结构\",{\"0\":{\"2491\":1}}],[\"web项目目录\",{\"0\":{\"2477\":1}}],[\"web项目的核心配置文件\",{\"1\":{\"2474\":1}}],[\"web服务器在创建servlet对象的时候会调用init方法\",{\"1\":{\"2556\":1}}],[\"web服务器进行调用\",{\"1\":{\"2537\":1}}],[\"web服务器就会为servletdemo1这个类创建一个对象\",{\"1\":{\"2537\":1}}],[\"web服务器软件使用步骤\",{\"0\":{\"2448\":1}}],[\"web服务器是安装在服务器端的一款软件\",{\"1\":{\"2446\":1}}],[\"web服务器\",{\"0\":{\"2446\":1},\"1\":{\"2537\":1,\"2544\":1}}],[\"webmvcconfigurationsupport\",{\"1\":{\"393\":1}}],[\"webmvcconfig\",{\"1\":{\"393\":1}}],[\"webmvc<\",{\"1\":{\"99\":1}}],[\"web依赖\",{\"1\":{\"317\":1}}],[\"web依赖包含了该依赖\",{\"1\":{\"316\":1}}],[\"web进行排除依赖\",{\"1\":{\"110\":1}}],[\"web\",{\"1\":{\"109\":2,\"340\":1,\"2465\":1,\"2472\":1,\"2474\":2,\"2475\":1,\"2483\":1,\"2486\":2,\"2495\":3,\"2537\":1,\"2574\":1,\"2575\":1,\"2576\":1,\"2577\":1,\"2685\":2,\"2693\":4,\"2694\":3,\"2725\":1,\"2748\":1,\"2760\":1,\"2765\":1,\"2825\":1}}],[\"web<\",{\"1\":{\"99\":1,\"110\":1,\"317\":1,\"336\":1,\"389\":1}}],[\"web就会打开一个包含所有依赖信息的文件\",{\"1\":{\"99\":1}}],[\"web架构\",{\"0\":{\"2752\":1},\"1\":{\"11\":1}}],[\"wide\",{\"1\":{\"3161\":1}}],[\"wire\",{\"1\":{\"2858\":1}}],[\"will\",{\"1\":{\"812\":1}}],[\"with\",{\"1\":{\"3243\":1}}],[\"withdayofyear\",{\"1\":{\"472\":1}}],[\"withdayofmonth\",{\"1\":{\"472\":1}}],[\"withnano\",{\"1\":{\"472\":1}}],[\"withsecond\",{\"1\":{\"472\":1}}],[\"withminute\",{\"1\":{\"472\":1}}],[\"withmonth\",{\"1\":{\"472\":1}}],[\"withhour\",{\"1\":{\"472\":1}}],[\"withyear\",{\"1\":{\"472\":1}}],[\"withxxx\",{\"0\":{\"472\":1}}],[\"winter\",{\"1\":{\"1368\":1,\"1373\":1,\"1382\":1}}],[\"window\",{\"1\":{\"1090\":1}}],[\"windows系统上的开发环境\",{\"1\":{\"2451\":1}}],[\"windows和dos系统默认使用\",{\"1\":{\"1764\":1}}],[\"windows的recycle\",{\"1\":{\"1243\":1}}],[\"windows服务器仅作为测试\",{\"1\":{\"188\":1}}],[\"windows\",{\"0\":{\"188\":1,\"779\":1,\"780\":1,\"3039\":1},\"1\":{\"636\":1,\"779\":1,\"2855\":1}}],[\"windows集群\",{\"1\":{\"57\":1}}],[\"win10\",{\"1\":{\"125\":2}}],[\"while+hasnext遍历\",{\"0\":{\"1597\":1}}],[\"whiletest\",{\"1\":{\"936\":1}}],[\"while循环\",{\"1\":{\"938\":1}}],[\"while循环的使用\",{\"0\":{\"936\":1,\"941\":1}}],[\"while循环没有迭代条件也能编译成功\",{\"1\":{\"935\":1}}],[\"while\",{\"0\":{\"934\":1,\"938\":1,\"939\":1},\"1\":{\"498\":1,\"565\":1,\"566\":1,\"721\":1,\"723\":1,\"917\":2,\"935\":1,\"936\":1,\"938\":2,\"940\":1,\"941\":1,\"1335\":1,\"1344\":1,\"1352\":1,\"1492\":1,\"1509\":1,\"1512\":1,\"1520\":1,\"1536\":1,\"1556\":1,\"1597\":1,\"1600\":1,\"1654\":1,\"1687\":1,\"1709\":1,\"1710\":1,\"1747\":1,\"1748\":1,\"1804\":1,\"1805\":1,\"1817\":1,\"1823\":1,\"1834\":1,\"1836\":1,\"1858\":1,\"1870\":1,\"1888\":1,\"2355\":1,\"2365\":1,\"2405\":1,\"2602\":1,\"2646\":1,\"3204\":1}}],[\"white\",{\"1\":{\"262\":1}}],[\"where\",{\"1\":{\"274\":1,\"2310\":1,\"2311\":1,\"2329\":1,\"2334\":2,\"2349\":1,\"2353\":2,\"2356\":1,\"2365\":1,\"2387\":2,\"2391\":1,\"2408\":3,\"2439\":1,\"2440\":1,\"2441\":1,\"2442\":1,\"2443\":1}}],[\"huge\",{\"1\":{\"3026\":1}}],[\"humanutil\",{\"1\":{\"2101\":3}}],[\"human\",{\"1\":{\"2096\":3,\"2097\":1}}],[\"h6j6hlyfqde8m4cczpcnia\",{\"1\":{\"2890\":1}}],[\"hse\",{\"1\":{\"2715\":2}}],[\"hg\",{\"1\":{\"1019\":2}}],[\"h\",{\"1\":{\"853\":1,\"2090\":1}}],[\"h1>\",{\"1\":{\"811\":1,\"812\":1,\"2510\":1}}],[\"hex\",{\"1\":{\"3156\":1,\"3159\":1,\"3160\":1,\"3186\":1,\"3187\":1}}],[\"heima\",{\"1\":{\"2781\":1,\"2782\":1}}],[\"heartbeattimeoutsecs\",{\"1\":{\"3153\":1}}],[\"heartbeatintervalmillis\",{\"1\":{\"3153\":1,\"3156\":1}}],[\"health\",{\"1\":{\"2893\":1,\"3156\":1,\"3157\":1,\"3159\":1,\"3160\":1}}],[\"headers\",{\"1\":{\"2602\":3}}],[\"head\",{\"1\":{\"2563\":2}}],[\"heap\",{\"1\":{\"1298\":1}}],[\"hehe\",{\"1\":{\"2468\":1}}],[\"here\",{\"1\":{\"811\":1}}],[\"he\",{\"1\":{\"715\":3,\"2438\":1}}],[\"hel\",{\"1\":{\"408\":1,\"409\":1}}],[\"hello2\",{\"1\":{\"1817\":1}}],[\"hellothread\",{\"1\":{\"1480\":5,\"1481\":3,\"1489\":3}}],[\"hellogay\",{\"1\":{\"1019\":3}}],[\"hellogoogle\",{\"1\":{\"407\":1}}],[\"hello1\",{\"1\":{\"1344\":1,\"1352\":1}}],[\"hello10a\",{\"1\":{\"886\":1}}],[\"hello1235\",{\"1\":{\"292\":1}}],[\"hello1234\",{\"1\":{\"287\":1}}],[\"hello<e>\",{\"1\":{\"811\":1}}],[\"helloworld\",{\"1\":{\"123\":1,\"1989\":1}}],[\"hello\",{\"1\":{\"85\":2,\"123\":1,\"413\":1,\"414\":1,\"415\":1,\"420\":2,\"451\":1,\"452\":3,\"453\":1,\"454\":2,\"455\":1,\"456\":1,\"538\":1,\"639\":2,\"666\":1,\"760\":2,\"790\":2,\"792\":1,\"793\":1,\"801\":3,\"802\":3,\"811\":1,\"812\":1,\"886\":1,\"1019\":1,\"1032\":1,\"1034\":1,\"1218\":2,\"1308\":3,\"1335\":1,\"1393\":1,\"1400\":1,\"1767\":2,\"1817\":1,\"1891\":1,\"1972\":1,\"1983\":1,\"2123\":1,\"2155\":1,\"2200\":1,\"2468\":1,\"2469\":1,\"2531\":1,\"2553\":1,\"2640\":2,\"2655\":2,\"2798\":1,\"2804\":1,\"3099\":1}}],[\"help\",{\"1\":{\"74\":1}}],[\"hm=\",{\"1\":{\"712\":1,\"713\":1,\"714\":1,\"715\":1,\"716\":1,\"717\":1,\"718\":1,\"719\":1,\"720\":1,\"721\":1,\"722\":1,\"723\":1}}],[\"hm2=\",{\"1\":{\"712\":1,\"720\":1}}],[\"hm2\",{\"1\":{\"712\":2,\"720\":1}}],[\"hm\",{\"1\":{\"711\":6,\"712\":3,\"713\":3,\"714\":2,\"715\":2,\"716\":2,\"717\":2,\"718\":1,\"719\":3,\"720\":1,\"721\":1,\"722\":1,\"723\":1}}],[\"handle\",{\"1\":{\"2436\":1,\"2442\":2}}],[\"handler\",{\"1\":{\"2094\":3,\"2435\":2,\"2440\":2,\"2441\":2,\"2442\":2,\"2443\":4}}],[\"hahstable的子类\",{\"1\":{\"1668\":1}}],[\"hahscode\",{\"0\":{\"1647\":1}}],[\"hahaha\",{\"1\":{\"1352\":1}}],[\"hasmoreelements\",{\"1\":{\"2602\":1}}],[\"hasnext\",{\"0\":{\"676\":1},\"1\":{\"676\":2,\"721\":1,\"723\":1,\"1597\":2,\"1600\":1,\"1654\":1,\"1687\":1,\"1709\":1,\"1710\":1,\"1747\":1,\"1748\":1}}],[\"hasnextline\",{\"1\":{\"637\":1,\"758\":1}}],[\"hashed\",{\"1\":{\"3107\":1}}],[\"hash值相同\",{\"1\":{\"1643\":1}}],[\"hash值不同\",{\"1\":{\"1643\":1}}],[\"hash\",{\"1\":{\"1635\":1,\"2858\":1,\"3156\":1,\"3159\":1,\"3160\":1,\"3186\":1,\"3187\":1}}],[\"hashnext\",{\"0\":{\"1593\":1}}],[\"hashtable\",{\"0\":{\"1667\":1},\"1\":{\"707\":1,\"1578\":1,\"1662\":1,\"2297\":1}}],[\"hashmap扩容和结构改变的次数\",{\"1\":{\"1680\":1}}],[\"hashmap中存储的键值对的数量\",{\"1\":{\"1680\":1}}],[\"hashmap的默认加载因子\",{\"1\":{\"1680\":1}}],[\"hashmap的默认容量\",{\"1\":{\"1680\":1}}],[\"hashmap的最大支持容量\",{\"1\":{\"1680\":1}}],[\"hashmap底层\",{\"0\":{\"1671\":1}}],[\"hashmap是数组+链表+红黑树实现\",{\"1\":{\"1677\":1}}],[\"hashmap是数组+链表结构\",{\"1\":{\"1677\":1}}],[\"hashmap是无序的\",{\"1\":{\"1664\":1}}],[\"hashmap是\",{\"1\":{\"1661\":1}}],[\"hashmap<integer\",{\"1\":{\"1673\":1}}],[\"hashmap<string\",{\"1\":{\"712\":1,\"1710\":1}}],[\"hashmap<>\",{\"1\":{\"712\":2,\"1673\":1,\"1710\":1}}],[\"hashmap\",{\"0\":{\"1664\":1},\"1\":{\"707\":1,\"1578\":1,\"1661\":1,\"1662\":1,\"1664\":2,\"1665\":1,\"1678\":1}}],[\"hashset底层是以数组+链表的形式储存的\",{\"1\":{\"1644\":1}}],[\"hashset的子类\",{\"0\":{\"1638\":1}}],[\"hashset\",{\"0\":{\"1635\":1,\"1637\":1},\"1\":{\"655\":1,\"1578\":1,\"1633\":1,\"1635\":2,\"1636\":1,\"1638\":1,\"1646\":1,\"1654\":1}}],[\"hashcode相同\",{\"1\":{\"1650\":1}}],[\"hashcode与值\",{\"0\":{\"1650\":1}}],[\"hashcode与equals的重写\",{\"0\":{\"1646\":1}}],[\"hashcode\",{\"1\":{\"344\":1,\"1176\":1,\"1184\":1,\"1404\":1,\"1637\":1,\"1638\":1,\"1649\":1,\"1654\":1,\"1664\":1,\"2211\":1}}],[\"hashoperations\",{\"1\":{\"288\":1}}],[\"hashredis\",{\"1\":{\"288\":1}}],[\"half\",{\"1\":{\"536\":3}}],[\"h5\",{\"1\":{\"398\":1}}],[\"ht1\",{\"1\":{\"1480\":3,\"1481\":3,\"1489\":3}}],[\"html是展示数据\",{\"1\":{\"2768\":1}}],[\"html语法松散\",{\"1\":{\"2768\":1}}],[\"html标签是预定义\",{\"1\":{\"2768\":1}}],[\"html就可以查看文档了\",{\"1\":{\"813\":1}}],[\"html\",{\"1\":{\"394\":1,\"808\":1,\"1916\":2,\"1990\":3,\"2447\":1,\"2467\":1,\"2510\":2,\"2601\":1,\"2609\":1,\"2641\":2,\"2642\":1,\"2648\":1,\"2684\":2}}],[\"httphost\",{\"1\":{\"2972\":1,\"2975\":1,\"2977\":1,\"2978\":1,\"2980\":1,\"2983\":1,\"2984\":1,\"2986\":1,\"2987\":1,\"2991\":1,\"2992\":1,\"2993\":1,\"2997\":1,\"3000\":1,\"3003\":1,\"3006\":1,\"3008\":1,\"3010\":1,\"3015\":1,\"3019\":1}}],[\"http请求头的数据是键值对的形式key\",{\"1\":{\"2599\":1}}],[\"http协议\",{\"1\":{\"2858\":1}}],[\"http协议设计成无状态的目的是让每次请求之间相互独立\",{\"1\":{\"2788\":1}}],[\"http协议是无状态的\",{\"1\":{\"2788\":1}}],[\"http协议及版本\",{\"1\":{\"2596\":1}}],[\"http协议默认端口号为80\",{\"1\":{\"2457\":1}}],[\"http的请求中会包含很多请求数据\",{\"1\":{\"2584\":1}}],[\"httpclient\",{\"0\":{\"2272\":1}}],[\"http占用端口80\",{\"1\":{\"1938\":1}}],[\"http\",{\"0\":{\"2861\":1},\"1\":{\"394\":1,\"1989\":1,\"1990\":3,\"1993\":1,\"2463\":2,\"2467\":2,\"2468\":1,\"2502\":2,\"2533\":1,\"2574\":1,\"2597\":1,\"2598\":3,\"2640\":1,\"2642\":1,\"2655\":1,\"2663\":1,\"2781\":3,\"2782\":4,\"2858\":1,\"2860\":4,\"2883\":1,\"2884\":1,\"2887\":1,\"2888\":1,\"2889\":1,\"2892\":1,\"2895\":1,\"2896\":1,\"2899\":1,\"2900\":1,\"2902\":1,\"2905\":1,\"2906\":1,\"2907\":1,\"2908\":3,\"2910\":1,\"2911\":1,\"2913\":1,\"2914\":1,\"2918\":1,\"2919\":1,\"2923\":1,\"2924\":1,\"2925\":1,\"2926\":3,\"2928\":1,\"2949\":1,\"2952\":1,\"2954\":1,\"2955\":1,\"2963\":1,\"2972\":1,\"2975\":1,\"2977\":1,\"2978\":1,\"2980\":1,\"2983\":1,\"2984\":1,\"2986\":1,\"2987\":1,\"2991\":1,\"2992\":1,\"2993\":1,\"2997\":1,\"3000\":1,\"3003\":1,\"3006\":1,\"3008\":1,\"3010\":1,\"3015\":1,\"3019\":1}}],[\"httpsessionactivationlistener\",{\"0\":{\"2721\":1}}],[\"httpsessionattributelistener\",{\"0\":{\"2718\":1}}],[\"httpsessionbindinglistener\",{\"0\":{\"2720\":1}}],[\"httpsessionbindingevent对象代表属性变化事件\",{\"1\":{\"2718\":1,\"2720\":1}}],[\"httpsessionbindingevent\",{\"1\":{\"2718\":3,\"2720\":2}}],[\"httpsession对象的方法\",{\"0\":{\"2815\":1}}],[\"httpsession对象销毁时调用\",{\"1\":{\"2715\":1}}],[\"httpsession对象创建时调用\",{\"1\":{\"2715\":1}}],[\"httpsessionevent对象代表事件对象\",{\"1\":{\"2721\":1}}],[\"httpsessionevent对象代表从httpsession对象身上捕获到的事件\",{\"1\":{\"2715\":1}}],[\"httpsessionevent\",{\"1\":{\"2715\":2,\"2721\":2}}],[\"httpsessionlistener\",{\"0\":{\"2715\":1}}],[\"httpsession\",{\"1\":{\"2675\":1,\"2711\":1,\"2814\":2,\"2819\":1}}],[\"httpservlet中为什么要根据请求方式的不同\",{\"1\":{\"2565\":1}}],[\"httpservlet中也对每种请求方式做了定义\",{\"1\":{\"2563\":1}}],[\"httpservlet的原理\",{\"0\":{\"2565\":1}}],[\"httpservlet的使用\",{\"0\":{\"2562\":1}}],[\"httpservletresponse\",{\"1\":{\"2564\":2,\"2589\":1,\"2598\":2,\"2601\":1,\"2602\":1,\"2610\":1,\"2614\":2,\"2624\":2,\"2625\":2,\"2640\":1,\"2655\":2,\"2661\":1,\"2662\":1,\"2682\":1,\"2686\":1,\"2690\":1,\"2694\":1,\"2798\":1,\"2799\":1,\"2814\":1}}],[\"httpservletrequest\",{\"1\":{\"2564\":2,\"2566\":2,\"2589\":1,\"2598\":2,\"2601\":1,\"2602\":1,\"2610\":1,\"2614\":2,\"2624\":2,\"2625\":2,\"2640\":1,\"2655\":2,\"2661\":1,\"2662\":1,\"2682\":1,\"2686\":1,\"2690\":1,\"2694\":1,\"2798\":1,\"2799\":1,\"2814\":1}}],[\"httpservlet\",{\"1\":{\"2564\":1,\"2566\":1,\"2598\":1,\"2614\":1,\"2624\":1,\"2625\":1,\"2640\":1,\"2655\":2,\"2661\":1,\"2662\":1,\"2682\":1}}],[\"httpservlet类中没有抽象方法\",{\"1\":{\"2562\":1}}],[\"httpservlet是抽象类\",{\"1\":{\"2562\":1}}],[\"httpservlet是对http协议的一种封装\",{\"1\":{\"2560\":1,\"2567\":1}}],[\"httpservlet抽象类\",{\"0\":{\"2560\":1},\"1\":{\"2558\":1}}],[\"https协议的默认端口号是443\",{\"1\":{\"2457\":1}}],[\"https\",{\"1\":{\"73\":1,\"2860\":1,\"3022\":1,\"3040\":1,\"3053\":1,\"3055\":1}}],[\"http操作\",{\"1\":{\"57\":1}}],[\"hobbies\",{\"1\":{\"2624\":2}}],[\"hobby\",{\"1\":{\"2623\":2,\"2624\":3}}],[\"hobbyl\",{\"1\":{\"1047\":1}}],[\"housenum\",{\"1\":{\"841\":1}}],[\"hour\",{\"1\":{\"470\":2,\"471\":2,\"472\":2,\"473\":2,\"474\":1}}],[\"hours\",{\"1\":{\"171\":1}}],[\"how\",{\"1\":{\"811\":1,\"1920\":6}}],[\"home这个变量\",{\"1\":{\"783\":1}}],[\"home环境变量是否正确配置\",{\"1\":{\"2461\":1}}],[\"home环境变量\",{\"1\":{\"783\":1}}],[\"home\",{\"0\":{\"783\":1},\"1\":{\"636\":2,\"2455\":1}}],[\"hostinfo\",{\"1\":{\"3204\":1}}],[\"hostmanager\",{\"1\":{\"3189\":1}}],[\"host=\",{\"1\":{\"3165\":3}}],[\"hostname\",{\"0\":{\"1936\":1},\"1\":{\"1935\":1,\"1941\":1,\"1947\":2}}],[\"hostaddress\",{\"0\":{\"1931\":1},\"1\":{\"1935\":1,\"1941\":1}}],[\"host\",{\"1\":{\"287\":1,\"292\":1,\"293\":1,\"1945\":1,\"1965\":1,\"1971\":1,\"1990\":3,\"2601\":3,\"2602\":1,\"3153\":1,\"3154\":1,\"3159\":2,\"3160\":1,\"3236\":1}}],[\"high\",{\"1\":{\"3026\":3}}],[\"hightlightbuilder\",{\"0\":{\"3018\":1}}],[\"highlighter\",{\"1\":{\"3018\":1,\"3019\":1}}],[\"highlightbuilder\",{\"1\":{\"3018\":7,\"3019\":7}}],[\"highlight\",{\"1\":{\"262\":1,\"2959\":1,\"3019\":1}}],[\"hit\",{\"1\":{\"2992\":2,\"2993\":2,\"2997\":2,\"3000\":2,\"3003\":2,\"3006\":2,\"3008\":2,\"3010\":2,\"3019\":2}}],[\"hits\",{\"1\":{\"2908\":2,\"2926\":2,\"2930\":2,\"2957\":2,\"2992\":2,\"2993\":2,\"2997\":2,\"3000\":2,\"3003\":2,\"3006\":2,\"3008\":2,\"3010\":2,\"3015\":2,\"3019\":2}}],[\"hidden\",{\"1\":{\"553\":1,\"3153\":1}}],[\"hi\",{\"1\":{\"538\":1,\"801\":1,\"802\":2,\"1418\":1,\"1419\":2,\"1767\":2,\"2156\":1,\"2804\":1}}],[\"hibernate官方推荐使用\",{\"1\":{\"2420\":1}}],[\"hibernate3已不再提供支持\",{\"1\":{\"2420\":1}}],[\"hibernate3\",{\"1\":{\"1388\":1}}],[\"hibernate\",{\"1\":{\"174\":1,\"2278\":1}}],[\"hh\",{\"1\":{\"262\":4,\"470\":1,\"487\":2,\"488\":1,\"489\":1}}],[\"hystrix\",{\"1\":{\"11\":1}}],[\"内嵌数组的形式来存储\",{\"1\":{\"3027\":1}}],[\"内嵌tomcat\",{\"0\":{\"108\":1}}],[\"内循环改为如下代码\",{\"1\":{\"1807\":1}}],[\"内循环是用来读取cbuf数组中的字符\",{\"1\":{\"1806\":1}}],[\"内部角色\",{\"1\":{\"3189\":1}}],[\"内部dtd\",{\"1\":{\"2778\":1}}],[\"内部迭代\",{\"0\":{\"2237\":1}}],[\"内部缓冲区数组默认大小\",{\"1\":{\"1828\":1,\"1830\":1,\"1831\":1}}],[\"内部结构\",{\"1\":{\"1711\":1}}],[\"内部声明了node类型的first\",{\"1\":{\"1624\":1}}],[\"内部可以有输出语句\",{\"1\":{\"1279\":1,\"1280\":1}}],[\"内部创建类的对象\",{\"1\":{\"1240\":2}}],[\"内部列的作用\",{\"0\":{\"1213\":1}}],[\"内部类仍然是一个独立的类\",{\"1\":{\"1212\":1}}],[\"内部类对象\",{\"1\":{\"1207\":1}}],[\"内部类的作用\",{\"0\":{\"1202\":1}}],[\"内部类\",{\"0\":{\"1200\":1},\"1\":{\"1062\":1,\"1201\":1,\"1207\":1}}],[\"内\",{\"1\":{\"1025\":1}}],[\"内层元素的初始化值为\",{\"1\":{\"993\":2}}],[\"内层元素的个数\",{\"1\":{\"991\":1}}],[\"内层3个元素\",{\"1\":{\"985\":1}}],[\"内层数组的长度\",{\"1\":{\"991\":1}}],[\"内层数组的长度不限\",{\"1\":{\"989\":1}}],[\"内层数组未初始化\",{\"1\":{\"990\":1}}],[\"内层数组只声明\",{\"1\":{\"986\":1}}],[\"内层数组元素\",{\"1\":{\"982\":1}}],[\"内层数组\",{\"1\":{\"982\":1}}],[\"内层循环控制列数\",{\"1\":{\"952\":1}}],[\"内层循环需要执行n次\",{\"1\":{\"952\":1}}],[\"内层循环结构遍历一遍\",{\"1\":{\"952\":1}}],[\"内定义\",{\"1\":{\"824\":1}}],[\"内存释放或者服务器关闭的时候\",{\"1\":{\"2554\":1}}],[\"内存泄露积累多了就容易导致内存溢出\",{\"1\":{\"1458\":1}}],[\"内存溢出和泄露\",{\"0\":{\"1458\":1}}],[\"内存是容器\",{\"1\":{\"1456\":1}}],[\"内存是临时性的储存\",{\"1\":{\"1450\":1}}],[\"内存中的这个类就是class的一个实例\",{\"1\":{\"2014\":1}}],[\"内存中的数据\",{\"1\":{\"1456\":1}}],[\"内存中储存的是变量的值\",{\"1\":{\"1455\":1}}],[\"内存中实际上是加载了子类特有的属性和方法的\",{\"1\":{\"1162\":1}}],[\"内存空间的基本分类\",{\"0\":{\"1453\":1}}],[\"内存空间和数据都消失\",{\"1\":{\"1451\":1}}],[\"内存储存的数据类型\",{\"0\":{\"1452\":1}}],[\"内存的生命周期\",{\"0\":{\"1451\":1}}],[\"内存条==\",{\"1\":{\"1451\":1}}],[\"内存条通电后产生的存储空间\",{\"1\":{\"1450\":1}}],[\"内存条的空间\",{\"0\":{\"1450\":1}}],[\"内存存在的意义\",{\"1\":{\"1448\":1}}],[\"内存地址\",{\"1\":{\"1452\":1}}],[\"内存地址空间\",{\"1\":{\"1439\":1}}],[\"内存地址就已经确定了\",{\"1\":{\"995\":1}}],[\"内存区域\",{\"0\":{\"1298\":1}}],[\"内存解析\",{\"0\":{\"1296\":1}}],[\"内存结构\",{\"0\":{\"977\":1}}],[\"内存图示\",{\"0\":{\"881\":1,\"884\":1}}],[\"内存\",{\"0\":{\"1447\":1,\"1449\":1,\"1456\":1},\"1\":{\"767\":1,\"1774\":2}}],[\"内存设置\",{\"1\":{\"57\":1}}],[\"内置的\",{\"1\":{\"3109\":1}}],[\"内置的maven不方便修改配置\",{\"1\":{\"298\":1}}],[\"内置jdk目录\",{\"1\":{\"2856\":1}}],[\"内置functional\",{\"0\":{\"2143\":1}}],[\"内置函数式接口\",{\"0\":{\"2138\":1}}],[\"内置函数>反射类\",{\"1\":{\"2022\":1}}],[\"内置函数>io类\",{\"1\":{\"1771\":1,\"1793\":1,\"1796\":1}}],[\"内置函数>list\",{\"1\":{\"1630\":1,\"1669\":1}}],[\"内置函数>collection+\",{\"1\":{\"1584\":1,\"1590\":1,\"1640\":1,\"1693\":1}}],[\"内置服务器\",{\"1\":{\"68\":1}}],[\"内置资源\",{\"1\":{\"10\":1}}],[\"内容参考如下\",{\"1\":{\"3044\":1}}],[\"内容管理或者博客平台\",{\"1\":{\"3037\":1}}],[\"内容\",{\"1\":{\"2780\":1}}],[\"内容如下\",{\"1\":{\"2619\":1,\"2743\":1,\"3160\":1}}],[\"内容和长度都不可变\",{\"1\":{\"444\":1}}],[\"内容说明\",{\"1\":{\"60\":1,\"61\":1,\"296\":1}}],[\"内容正在迁移中\",{\"1\":{\"36\":1,\"37\":1,\"38\":1,\"39\":1}}],[\"occurred\",{\"1\":{\"3204\":1}}],[\"ocnauto\",{\"1\":{\"2426\":1}}],[\"o7k19ygbbr3lft2kiqat\",{\"1\":{\"2901\":1,\"2908\":1,\"2926\":1}}],[\"oa\",{\"1\":{\"2858\":1}}],[\"ois\",{\"1\":{\"1898\":1,\"1900\":1,\"1904\":3,\"1909\":4}}],[\"oos\",{\"1\":{\"1898\":1,\"1899\":1,\"1901\":1,\"1903\":4,\"1908\":6}}],[\"oop\",{\"1\":{\"1002\":1}}],[\"o技术是非常实用的技术\",{\"1\":{\"1773\":1}}],[\"o是input\",{\"1\":{\"1773\":1}}],[\"osi参考模型\",{\"1\":{\"1926\":1}}],[\"osw\",{\"1\":{\"1858\":3}}],[\"osversion\",{\"1\":{\"636\":2}}],[\"os\",{\"1\":{\"636\":2,\"786\":1,\"2646\":2,\"2647\":2}}],[\"osname\",{\"1\":{\"636\":2}}],[\"o2\",{\"1\":{\"504\":1,\"506\":1,\"508\":3,\"509\":3,\"645\":1,\"684\":2,\"1658\":3,\"1688\":3,\"2114\":2,\"2129\":6}}],[\"o1>o2\",{\"1\":{\"645\":1}}],[\"o1<o2\",{\"1\":{\"645\":1}}],[\"o1\",{\"1\":{\"504\":1,\"506\":1,\"508\":3,\"509\":4,\"645\":1,\"684\":2,\"1218\":2,\"1658\":3,\"1688\":3,\"2114\":2,\"2129\":6}}],[\"ofnullable\",{\"0\":{\"2254\":1},\"1\":{\"2254\":3,\"2256\":1,\"2257\":1,\"2259\":1,\"2260\":1}}],[\"ofpattern\",{\"1\":{\"487\":1,\"488\":1,\"489\":1}}],[\"oflocalizedtime\",{\"1\":{\"486\":1}}],[\"oflocalizeddate\",{\"1\":{\"486\":1}}],[\"oflocalizeddatetime\",{\"1\":{\"486\":2}}],[\"ofepochmilli\",{\"0\":{\"479\":1},\"1\":{\"479\":2}}],[\"ofhours\",{\"1\":{\"477\":1}}],[\"of\",{\"0\":{\"470\":1,\"2252\":1},\"1\":{\"470\":6,\"811\":2,\"2200\":4,\"2252\":2,\"2435\":1,\"2890\":2,\"3071\":1}}],[\"off和len\",{\"1\":{\"570\":1}}],[\"offsetdatetime\",{\"1\":{\"477\":2}}],[\"offset\",{\"1\":{\"452\":1,\"455\":2,\"477\":1,\"1986\":1}}],[\"off\",{\"1\":{\"262\":2,\"570\":2,\"576\":3,\"577\":3}}],[\"oldval\",{\"1\":{\"690\":1}}],[\"oldchar\",{\"1\":{\"429\":2}}],[\"olleh\",{\"1\":{\"456\":1}}],[\"o\",{\"1\":{\"425\":3,\"495\":1,\"501\":4,\"616\":2,\"662\":1,\"667\":1,\"688\":1,\"700\":1,\"701\":1,\"720\":1,\"1172\":2,\"1210\":2,\"1440\":1,\"1657\":3,\"1745\":2,\"2654\":1}}],[\"overflow\",{\"1\":{\"2846\":1}}],[\"overload\",{\"0\":{\"1037\":1}}],[\"override\",{\"0\":{\"1121\":1},\"1\":{\"360\":5,\"393\":1,\"501\":2,\"509\":1,\"645\":1,\"1373\":1,\"1382\":1,\"1389\":1,\"1390\":1,\"1402\":1,\"1406\":2,\"1480\":1,\"1481\":1,\"1489\":1,\"1492\":1,\"1512\":1,\"1520\":1,\"1536\":1,\"1547\":2,\"1556\":1,\"1562\":1,\"1569\":1,\"1688\":1,\"2016\":2,\"2080\":1,\"2081\":1,\"2095\":1,\"2121\":1,\"2123\":1,\"2129\":1,\"2531\":1,\"2564\":2,\"2566\":1,\"2598\":2,\"2614\":2,\"2624\":2,\"2625\":2,\"2640\":1,\"2655\":2,\"2661\":1,\"2662\":1,\"2697\":3}}],[\"ove\",{\"1\":{\"421\":1}}],[\"ok值为1\",{\"1\":{\"3150\":1}}],[\"ok\",{\"1\":{\"419\":2,\"869\":1,\"1308\":3,\"1816\":1,\"1958\":1,\"3150\":1,\"3156\":1,\"3159\":1,\"3160\":1,\"3186\":1,\"3187\":1,\"3193\":1,\"3199\":1,\"3200\":1,\"3201\":1}}],[\"objname2\",{\"1\":{\"1378\":1}}],[\"objname1\",{\"1\":{\"1378\":2}}],[\"obj和person是同属一个类的对象\",{\"1\":{\"1180\":1}}],[\"obj是null\",{\"1\":{\"1180\":1}}],[\"obj\",{\"1\":{\"404\":1,\"424\":1,\"496\":1,\"497\":3,\"616\":1,\"617\":1,\"626\":1,\"664\":1,\"669\":2,\"723\":2,\"1171\":2,\"1180\":5,\"1331\":2,\"1378\":1,\"1404\":1,\"1512\":1,\"1515\":1,\"1520\":1,\"1600\":2,\"1603\":2,\"1637\":1,\"1639\":1,\"1687\":2,\"1747\":2,\"1748\":2,\"1900\":2,\"1904\":2,\"2004\":2,\"2061\":1,\"2062\":1,\"2066\":1,\"2094\":5,\"2095\":6,\"2101\":1,\"2838\":1}}],[\"objectid\",{\"1\":{\"3034\":1,\"3073\":1,\"3153\":1,\"3168\":1}}],[\"objectinputstream\",{\"1\":{\"1898\":2,\"1904\":2,\"1909\":2}}],[\"objectmapper是jackson依赖里的类\",{\"1\":{\"2982\":1}}],[\"objectmapper\",{\"0\":{\"2982\":1},\"1\":{\"2980\":2}}],[\"objectoutputstream\",{\"1\":{\"1898\":2,\"1903\":2,\"1908\":2}}],[\"object>\",{\"1\":{\"1723\":1}}],[\"object的主要结构如下\",{\"1\":{\"1175\":1}}],[\"object可以强转成woman\",{\"1\":{\"1171\":1}}],[\"object引用的woman子类\",{\"1\":{\"1171\":1}}],[\"object类无属性且构造器是空参构造器\",{\"1\":{\"1176\":1}}],[\"object类的功能\",{\"0\":{\"1176\":1}}],[\"object类是所有java类的根父类\",{\"1\":{\"1175\":1}}],[\"object类中声明wait\",{\"1\":{\"1555\":1}}],[\"object类中\",{\"1\":{\"1179\":1,\"1554\":1}}],[\"object类中的功能\",{\"1\":{\"1175\":1}}],[\"object类中的getclass\",{\"1\":{\"1102\":1}}],[\"object类中空参的构造器为止\",{\"1\":{\"1144\":1}}],[\"object类声明的功能\",{\"1\":{\"1116\":1}}],[\"object类之外\",{\"1\":{\"1116\":1}}],[\"object类\",{\"0\":{\"1116\":1,\"1174\":1},\"1\":{\"1116\":2,\"1175\":1,\"1880\":1}}],[\"object类型\",{\"1\":{\"616\":1,\"1711\":1}}],[\"object是所有类的父类\",{\"1\":{\"593\":1}}],[\"object\",{\"0\":{\"2346\":1},\"1\":{\"288\":2,\"370\":2,\"404\":1,\"424\":1,\"497\":2,\"506\":2,\"508\":2,\"593\":1,\"616\":2,\"617\":2,\"626\":3,\"629\":1,\"642\":1,\"662\":1,\"664\":1,\"667\":1,\"669\":2,\"684\":2,\"686\":1,\"687\":1,\"688\":1,\"700\":1,\"701\":1,\"713\":1,\"715\":1,\"716\":1,\"717\":1,\"720\":1,\"723\":1,\"1002\":1,\"1007\":1,\"1171\":2,\"1172\":1,\"1180\":1,\"1181\":1,\"1210\":2,\"1331\":1,\"1404\":1,\"1432\":2,\"1499\":1,\"1512\":2,\"1515\":2,\"1520\":2,\"1562\":1,\"1573\":1,\"1600\":1,\"1603\":1,\"1637\":1,\"1639\":1,\"1657\":1,\"1658\":2,\"1687\":1,\"1688\":2,\"1707\":1,\"1721\":1,\"1745\":1,\"1747\":1,\"1748\":1,\"1898\":2,\"1900\":1,\"1903\":1,\"1904\":2,\"1908\":1,\"1909\":1,\"1994\":1,\"1999\":1,\"2004\":3,\"2005\":1,\"2010\":1,\"2012\":1,\"2016\":2,\"2061\":2,\"2062\":2,\"2063\":2,\"2066\":3,\"2090\":1,\"2092\":3,\"2094\":2,\"2095\":6,\"2101\":4,\"2122\":1,\"2278\":1,\"2298\":1,\"2333\":1,\"2352\":2,\"2355\":2,\"2386\":1,\"2394\":1,\"2405\":6,\"2435\":8,\"2436\":1,\"2654\":2,\"2655\":1,\"2690\":2,\"2816\":1,\"2817\":1,\"2963\":1,\"3033\":1,\"3156\":1,\"3159\":2}}],[\"orm对象\",{\"1\":{\"2407\":1,\"2408\":1}}],[\"orm编程思想\",{\"0\":{\"2346\":1}}],[\"orelse\",{\"0\":{\"2260\":1},\"1\":{\"2260\":2}}],[\"orelse来防止空指针\",{\"1\":{\"2249\":1}}],[\"oracle\",{\"1\":{\"2103\":1,\"2426\":2}}],[\"oracle占用端口1521等\",{\"1\":{\"1938\":1}}],[\"oracle等\",{\"1\":{\"1153\":1}}],[\"orient\",{\"0\":{\"2099\":1}}],[\"oriented\",{\"1\":{\"1002\":2}}],[\"original\",{\"1\":{\"647\":1}}],[\"order<>\",{\"1\":{\"1720\":1}}],[\"order<string>\",{\"1\":{\"1720\":1}}],[\"order1\",{\"1\":{\"1720\":2}}],[\"ordered\",{\"1\":{\"3071\":1,\"3072\":1,\"3075\":1}}],[\"ordere\",{\"1\":{\"1719\":7}}],[\"orderid\",{\"1\":{\"1719\":4}}],[\"ordername\",{\"1\":{\"1719\":4}}],[\"order\",{\"0\":{\"384\":1,\"385\":1},\"1\":{\"374\":1,\"1241\":5,\"1521\":8,\"1719\":2,\"1720\":3,\"2334\":2,\"2951\":1}}],[\"orders\",{\"1\":{\"374\":1}}],[\"or\",{\"1\":{\"343\":1,\"1046\":1,\"2311\":4,\"2435\":1,\"3071\":1,\"3091\":1,\"3107\":1,\"3116\":1}}],[\"org\",{\"1\":{\"198\":1,\"200\":1,\"348\":1,\"390\":1,\"620\":2,\"2433\":3,\"2781\":1,\"2782\":1,\"2976\":2}}],[\"onetest\",{\"1\":{\"1509\":1}}],[\"one\",{\"1\":{\"530\":2,\"1480\":1,\"3005\":3,\"3006\":1}}],[\"onmismatch>\",{\"1\":{\"262\":3}}],[\"onmatch>\",{\"1\":{\"262\":3}}],[\"on\",{\"1\":{\"226\":2,\"2502\":2,\"2572\":1,\"2860\":1}}],[\"operationtime\",{\"1\":{\"3156\":1,\"3159\":1,\"3160\":1,\"3186\":1,\"3187\":1}}],[\"opeitons\",{\"1\":{\"3118\":1}}],[\"openssl\",{\"1\":{\"3212\":1}}],[\"openstream\",{\"1\":{\"1992\":1}}],[\"open\",{\"1\":{\"2502\":1}}],[\"openconnection\",{\"1\":{\"1993\":2}}],[\"openoption\",{\"1\":{\"1920\":3}}],[\"openjdk\",{\"1\":{\"787\":2}}],[\"openfeign\",{\"1\":{\"10\":1,\"11\":1}}],[\"optimedurabledate\",{\"1\":{\"3159\":1}}],[\"optimedurable\",{\"1\":{\"3159\":1}}],[\"optimedate\",{\"1\":{\"3156\":1,\"3159\":1}}],[\"optime\",{\"1\":{\"3156\":1,\"3159\":1}}],[\"optimes\",{\"1\":{\"3156\":1}}],[\"options里有很多选项\",{\"1\":{\"3081\":1}}],[\"options选项\",{\"0\":{\"3081\":1}}],[\"options\",{\"1\":{\"2563\":2,\"3080\":2,\"3095\":2,\"3110\":1,\"3111\":1,\"3118\":1}}],[\"optional加强\",{\"0\":{\"2270\":1}}],[\"optional常用方法\",{\"0\":{\"2250\":1}}],[\"optional类已经成为java\",{\"1\":{\"2248\":1}}],[\"optional\",{\"0\":{\"2245\":1,\"2246\":1,\"2252\":1,\"2253\":1,\"2254\":1},\"1\":{\"2232\":1,\"2233\":1,\"2235\":1,\"2236\":1,\"2240\":1,\"2241\":1,\"2247\":2,\"2252\":3,\"2253\":2,\"2254\":5,\"2256\":1,\"2257\":1,\"2259\":2,\"2260\":1}}],[\"optional<object>\",{\"1\":{\"2253\":1}}],[\"optional<student>\",{\"1\":{\"2252\":1,\"2254\":2,\"2256\":1,\"2257\":1,\"2259\":1,\"2260\":1}}],[\"optional<integer>\",{\"1\":{\"2240\":1}}],[\"optional<t>类\",{\"1\":{\"2247\":1}}],[\"optional<t>\",{\"1\":{\"2240\":1,\"2252\":1,\"2254\":1}}],[\"optional<double>\",{\"1\":{\"2235\":1,\"2241\":1}}],[\"optional<employee>\",{\"1\":{\"2232\":1,\"2233\":1,\"2236\":1}}],[\"optional<>\",{\"1\":{\"2232\":1,\"2233\":1,\"2235\":1,\"2236\":1}}],[\"optional>\",{\"1\":{\"141\":1,\"330\":1,\"332\":1,\"336\":2}}],[\"opt\",{\"1\":{\"3046\":1,\"3047\":1,\"3048\":2,\"3049\":2,\"3139\":2,\"3142\":4,\"3143\":4,\"3144\":4,\"3213\":3,\"3214\":1}}],[\"optstu\",{\"1\":{\"2260\":2}}],[\"optstu2\",{\"1\":{\"2256\":2}}],[\"opts\",{\"1\":{\"1920\":4}}],[\"opsforhash\",{\"1\":{\"288\":1}}],[\"opsforvalue\",{\"1\":{\"288\":1,\"289\":1}}],[\"ops\",{\"1\":{\"288\":5,\"289\":2}}],[\"out类的println方法\",{\"1\":{\"2156\":1}}],[\"out返回的是printstream的实例\",{\"1\":{\"1872\":1}}],[\"outputsteram\",{\"1\":{\"1994\":1}}],[\"outputstream和filewriter的处理流\",{\"1\":{\"1871\":1}}],[\"outputstream和write都是抽象类\",{\"1\":{\"573\":1}}],[\"outputstream和write都是输出流\",{\"1\":{\"572\":1}}],[\"outputstream的子类filteroutputstream的子类\",{\"1\":{\"1868\":1}}],[\"outputstreamwriter\",{\"0\":{\"1854\":1},\"1\":{\"572\":1,\"1842\":1,\"1855\":1,\"1858\":2}}],[\"outputstream\",{\"0\":{\"572\":1,\"1786\":1,\"1787\":1},\"1\":{\"572\":1,\"1829\":2,\"1855\":1,\"1856\":1,\"1920\":2,\"1966\":1,\"1972\":1,\"2645\":2}}],[\"outputsreamwriter\",{\"1\":{\"1856\":1}}],[\"output\",{\"1\":{\"1774\":1,\"1777\":1,\"2744\":1}}],[\"output的缩写\",{\"1\":{\"1773\":1}}],[\"outofmemoryerror\",{\"1\":{\"1312\":1}}],[\"outer\",{\"1\":{\"1219\":2}}],[\"out\",{\"0\":{\"1868\":1},\"1\":{\"85\":1,\"104\":1,\"128\":3,\"132\":1,\"242\":1,\"244\":1,\"263\":1,\"275\":1,\"284\":2,\"289\":1,\"302\":1,\"347\":1,\"352\":5,\"403\":1,\"404\":2,\"405\":2,\"407\":1,\"408\":2,\"409\":2,\"411\":1,\"412\":1,\"413\":1,\"414\":2,\"415\":1,\"417\":2,\"418\":2,\"419\":1,\"420\":1,\"421\":2,\"423\":1,\"424\":1,\"425\":2,\"426\":4,\"429\":1,\"430\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"451\":3,\"452\":2,\"453\":1,\"454\":1,\"455\":1,\"456\":1,\"469\":3,\"471\":8,\"472\":8,\"473\":8,\"476\":1,\"477\":2,\"478\":1,\"479\":1,\"484\":1,\"485\":1,\"486\":2,\"488\":1,\"502\":1,\"503\":1,\"508\":2,\"509\":1,\"512\":1,\"513\":2,\"514\":1,\"515\":1,\"516\":2,\"517\":1,\"518\":2,\"519\":2,\"520\":2,\"521\":4,\"524\":1,\"525\":1,\"526\":2,\"528\":2,\"530\":2,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"537\":1,\"540\":1,\"541\":1,\"542\":1,\"543\":1,\"544\":1,\"545\":1,\"546\":1,\"547\":1,\"549\":1,\"550\":1,\"551\":1,\"552\":1,\"553\":1,\"555\":3,\"556\":3,\"557\":3,\"559\":3,\"562\":3,\"565\":3,\"566\":3,\"581\":1,\"586\":1,\"587\":1,\"588\":1,\"589\":1,\"590\":1,\"592\":1,\"593\":1,\"594\":1,\"595\":1,\"596\":1,\"597\":1,\"598\":1,\"600\":1,\"601\":1,\"604\":1,\"605\":1,\"606\":1,\"607\":1,\"608\":1,\"609\":1,\"610\":1,\"611\":1,\"613\":1,\"614\":1,\"615\":1,\"616\":1,\"617\":1,\"620\":1,\"621\":1,\"622\":1,\"623\":1,\"624\":2,\"625\":1,\"626\":1,\"633\":1,\"636\":7,\"639\":2,\"640\":2,\"642\":2,\"644\":1,\"645\":1,\"646\":2,\"647\":4,\"648\":1,\"649\":1,\"650\":1,\"651\":1,\"657\":1,\"658\":2,\"659\":1,\"660\":1,\"661\":1,\"662\":3,\"663\":1,\"664\":2,\"665\":1,\"666\":2,\"669\":1,\"671\":1,\"676\":1,\"677\":1,\"678\":1,\"682\":2,\"683\":3,\"684\":3,\"685\":2,\"686\":1,\"687\":1,\"688\":1,\"689\":2,\"690\":1,\"696\":1,\"697\":2,\"698\":3,\"699\":2,\"700\":1,\"701\":1,\"702\":3,\"703\":2,\"704\":2,\"711\":2,\"712\":1,\"713\":3,\"714\":1,\"715\":2,\"716\":2,\"717\":2,\"718\":1,\"719\":2,\"720\":1,\"721\":1,\"722\":2,\"723\":3,\"741\":2,\"742\":2,\"743\":1,\"744\":1,\"750\":1,\"751\":1,\"752\":1,\"753\":1,\"760\":2,\"761\":2,\"790\":1,\"799\":2,\"811\":2,\"877\":2,\"885\":3,\"886\":3,\"893\":2,\"928\":2,\"936\":2,\"938\":2,\"941\":1,\"950\":1,\"954\":2,\"955\":2,\"956\":3,\"973\":1,\"974\":1,\"992\":2,\"997\":2,\"998\":2,\"1010\":2,\"1011\":1,\"1014\":1,\"1019\":2,\"1032\":1,\"1034\":1,\"1044\":1,\"1048\":1,\"1120\":3,\"1128\":3,\"1132\":1,\"1133\":2,\"1134\":1,\"1160\":4,\"1165\":2,\"1178\":5,\"1179\":2,\"1185\":2,\"1192\":1,\"1194\":2,\"1209\":3,\"1218\":1,\"1219\":1,\"1227\":2,\"1240\":1,\"1249\":1,\"1251\":1,\"1252\":3,\"1264\":7,\"1267\":3,\"1278\":2,\"1307\":2,\"1308\":2,\"1327\":2,\"1329\":1,\"1330\":1,\"1333\":1,\"1334\":1,\"1335\":1,\"1339\":7,\"1343\":2,\"1344\":1,\"1352\":2,\"1361\":2,\"1374\":3,\"1382\":4,\"1432\":5,\"1472\":2,\"1480\":1,\"1481\":3,\"1489\":4,\"1492\":1,\"1509\":1,\"1512\":1,\"1520\":1,\"1536\":1,\"1547\":4,\"1556\":1,\"1562\":2,\"1569\":1,\"1583\":1,\"1595\":4,\"1596\":1,\"1597\":1,\"1603\":1,\"1604\":1,\"1606\":1,\"1607\":1,\"1654\":2,\"1657\":1,\"1683\":1,\"1687\":1,\"1692\":2,\"1707\":1,\"1709\":2,\"1710\":1,\"1745\":1,\"1747\":1,\"1748\":1,\"1767\":3,\"1768\":1,\"1804\":1,\"1805\":1,\"1807\":1,\"1808\":1,\"1829\":4,\"1831\":4,\"1834\":1,\"1838\":1,\"1851\":1,\"1853\":1,\"1855\":1,\"1856\":1,\"1867\":1,\"1868\":1,\"1869\":1,\"1870\":3,\"1873\":2,\"1879\":3,\"1904\":1,\"1909\":2,\"1944\":1,\"1945\":2,\"1946\":1,\"1947\":1,\"1948\":1,\"1972\":2,\"1977\":1,\"1984\":1,\"2004\":1,\"2007\":2,\"2008\":1,\"2009\":2,\"2010\":2,\"2016\":3,\"2018\":1,\"2019\":1,\"2020\":1,\"2021\":1,\"2032\":4,\"2034\":1,\"2037\":2,\"2041\":1,\"2043\":1,\"2045\":4,\"2047\":2,\"2048\":12,\"2050\":3,\"2051\":1,\"2052\":1,\"2053\":1,\"2054\":3,\"2055\":1,\"2056\":1,\"2058\":1,\"2063\":2,\"2067\":1,\"2080\":2,\"2081\":1,\"2096\":1,\"2101\":2,\"2121\":2,\"2123\":3,\"2125\":1,\"2127\":1,\"2129\":6,\"2155\":1,\"2156\":1,\"2202\":1,\"2203\":1,\"2210\":1,\"2211\":1,\"2212\":1,\"2213\":1,\"2215\":2,\"2222\":1,\"2226\":1,\"2227\":1,\"2229\":1,\"2230\":1,\"2231\":1,\"2232\":1,\"2233\":1,\"2234\":1,\"2235\":1,\"2236\":1,\"2237\":1,\"2239\":1,\"2240\":1,\"2241\":1,\"2252\":1,\"2254\":2,\"2256\":1,\"2257\":1,\"2259\":2,\"2260\":1,\"2297\":1,\"2299\":1,\"2300\":1,\"2303\":1,\"2349\":1,\"2353\":2,\"2356\":1,\"2365\":1,\"2373\":1,\"2376\":1,\"2387\":1,\"2391\":2,\"2409\":8,\"2428\":1,\"2438\":1,\"2439\":1,\"2440\":1,\"2441\":1,\"2442\":2,\"2443\":2,\"2475\":1,\"2531\":1,\"2552\":1,\"2553\":1,\"2554\":1,\"2556\":1,\"2564\":2,\"2598\":8,\"2601\":2,\"2602\":1,\"2610\":1,\"2624\":6,\"2655\":3,\"2661\":1,\"2662\":1,\"2725\":2,\"2799\":1,\"2806\":1,\"2908\":1,\"2920\":1,\"2926\":1,\"2930\":1,\"2957\":1,\"2975\":1,\"2977\":3,\"2978\":1,\"2980\":1,\"2983\":1,\"2984\":1,\"2986\":2,\"2987\":2,\"2991\":1,\"2992\":1,\"2993\":1,\"2997\":1,\"3000\":1,\"3003\":1,\"3006\":1,\"3008\":1,\"3010\":1,\"3015\":2,\"3019\":1}}],[\"other\",{\"0\":{\"35\":1,\"3249\":1},\"1\":{\"1180\":4,\"2260\":1,\"2957\":1}}],[\"f8edfccba429b6477927a7c1ce1bc6729521305e\",{\"1\":{\"2858\":1}}],[\"features\",{\"1\":{\"2860\":1}}],[\"female\",{\"1\":{\"2781\":1,\"2983\":1,\"2991\":1,\"2992\":1,\"2993\":1,\"2997\":1}}],[\"fetchsource\",{\"0\":{\"2999\":1},\"1\":{\"2999\":1,\"3000\":1}}],[\"fetch\",{\"1\":{\"2602\":4,\"3121\":1}}],[\"fe4d\",{\"1\":{\"1933\":1}}],[\"fname\",{\"1\":{\"2045\":2}}],[\"ftp站点\",{\"1\":{\"1988\":1}}],[\"ftp占用端口21\",{\"1\":{\"1938\":1}}],[\"ft\",{\"1\":{\"1562\":2}}],[\"f不区分大小写\",{\"1\":{\"871\":1}}],[\"ff\",{\"1\":{\"649\":1}}],[\"fw\",{\"1\":{\"579\":6,\"1812\":2,\"1813\":1,\"1814\":1,\"1816\":5,\"1817\":5}}],[\"fdw\",{\"1\":{\"3210\":1}}],[\"fdobj\",{\"1\":{\"575\":1}}],[\"fd\",{\"1\":{\"574\":1}}],[\"fs\",{\"1\":{\"564\":2}}],[\"f3\",{\"1\":{\"538\":1,\"562\":2,\"1768\":2}}],[\"f2\",{\"1\":{\"538\":1,\"559\":3,\"562\":2,\"564\":2,\"1165\":2,\"1194\":2,\"1767\":2}}],[\"f1是由son生产的而不是daughter\",{\"1\":{\"1167\":1}}],[\"f1是父类型对象\",{\"1\":{\"1163\":1}}],[\"f1变成了一个硬盘上不存在的文件\",{\"1\":{\"561\":1}}],[\"f1在硬盘上不存在了\",{\"1\":{\"561\":1}}],[\"f1和f2的对象都还在\",{\"1\":{\"561\":1}}],[\"f1移动到f2后\",{\"1\":{\"561\":1}}],[\"f1的硬盘文件跑这里了\",{\"1\":{\"559\":1}}],[\"f1的硬盘文件已经不存在了\",{\"1\":{\"559\":1}}],[\"f1=\",{\"1\":{\"559\":1}}],[\"f1\",{\"1\":{\"538\":1,\"559\":2,\"562\":2,\"564\":2,\"848\":1,\"867\":1,\"868\":1,\"1147\":1,\"1163\":2,\"1166\":2,\"1167\":3,\"1168\":4,\"1194\":2,\"1197\":2,\"1767\":2,\"1800\":2,\"1804\":2,\"1805\":2,\"1812\":2,\"1816\":2}}],[\"fuzziness\",{\"1\":{\"3005\":5,\"3006\":2}}],[\"fuzzyquery\",{\"1\":{\"3005\":2,\"3006\":1}}],[\"fuzzyquerybuilder\",{\"0\":{\"3005\":1},\"1\":{\"3005\":3,\"3006\":3}}],[\"fucn2\",{\"1\":{\"2177\":1}}],[\"fucntion<integer\",{\"1\":{\"2177\":1}}],[\"fuck\",{\"1\":{\"417\":3,\"418\":3,\"419\":2,\"455\":1,\"790\":1}}],[\"future<t>\",{\"1\":{\"1566\":1}}],[\"future接口\",{\"1\":{\"1560\":1}}],[\"future接口介绍\",{\"0\":{\"1560\":1}}],[\"futuretask\",{\"1\":{\"1560\":1,\"1562\":2}}],[\"futruetask是futrue接口的唯一的实现类\",{\"1\":{\"1560\":1}}],[\"fulfilled\",{\"1\":{\"1368\":1}}],[\"full\",{\"1\":{\"486\":1}}],[\"func2\",{\"1\":{\"2177\":1,\"2180\":1,\"2185\":2}}],[\"func1\",{\"1\":{\"2176\":2,\"2179\":1,\"2184\":2}}],[\"function接口的第一个参数刚好是方法的调用者\",{\"1\":{\"2168\":1}}],[\"function<\",{\"1\":{\"2219\":1}}],[\"function<integer\",{\"1\":{\"2176\":1,\"2184\":1,\"2185\":1}}],[\"function<employee\",{\"1\":{\"2167\":1,\"2168\":1}}],[\"function<t\",{\"1\":{\"728\":1,\"2144\":1}}],[\"function包下定义了java\",{\"1\":{\"2138\":1}}],[\"function\",{\"0\":{\"728\":1},\"1\":{\"812\":2,\"2215\":1,\"2219\":1,\"3034\":1}}],[\"functionalinterface\",{\"1\":{\"504\":1,\"1390\":1,\"2139\":1,\"2140\":1}}],[\"functional\",{\"0\":{\"724\":1,\"2131\":1,\"2133\":1,\"2134\":1},\"1\":{\"34\":1,\"2229\":1,\"2239\":1}}],[\"fun2\",{\"1\":{\"2168\":1,\"2180\":1}}],[\"fun1\",{\"1\":{\"1219\":4,\"2167\":1,\"2179\":1}}],[\"fun\",{\"1\":{\"1218\":3}}],[\"foobar\",{\"1\":{\"3034\":2}}],[\"font>\",{\"1\":{\"2959\":1,\"3018\":1,\"3019\":2}}],[\"found\",{\"1\":{\"2907\":2,\"2916\":2,\"2917\":1,\"2925\":2}}],[\"fos=\",{\"1\":{\"577\":1,\"578\":1}}],[\"fos\",{\"1\":{\"575\":1,\"577\":2,\"578\":1,\"1821\":2,\"1823\":5,\"1836\":2,\"1858\":2,\"1873\":2,\"1878\":2,\"1898\":2,\"1903\":2,\"1908\":2,\"2365\":2}}],[\"force\",{\"1\":{\"3165\":1}}],[\"forked\",{\"1\":{\"3049\":1,\"3142\":1}}],[\"fork\",{\"1\":{\"3048\":1,\"3049\":1,\"3142\":2}}],[\"forward\",{\"1\":{\"2652\":2,\"2655\":1,\"2665\":1,\"2702\":2,\"2703\":1}}],[\"forwhiletest\",{\"1\":{\"938\":1}}],[\"foreach\",{\"0\":{\"2237\":1},\"1\":{\"2202\":1,\"2203\":1,\"2210\":1,\"2211\":1,\"2212\":1,\"2213\":1,\"2215\":2,\"2222\":1,\"2226\":1,\"2227\":1,\"2237\":2,\"2356\":1,\"2409\":1,\"2441\":1}}],[\"for循环与增强for循环的对比\",{\"0\":{\"1605\":1}}],[\"for循环遍历\",{\"0\":{\"1596\":1}}],[\"for循环\",{\"1\":{\"938\":1}}],[\"for循环内只要有两个\",{\"1\":{\"937\":1}}],[\"for循环和while循环的初始化条件部分的作用范围不同\",{\"1\":{\"937\":1}}],[\"for循环和while循环是可以相互转换的\",{\"1\":{\"937\":1}}],[\"for循环和while循环\",{\"0\":{\"937\":1}}],[\"for循环的使用\",{\"0\":{\"933\":1}}],[\"for循环的结构\",{\"0\":{\"932\":1}}],[\"forname\",{\"0\":{\"588\":1,\"590\":1,\"2020\":1},\"1\":{\"588\":1,\"590\":2,\"2004\":1,\"2020\":1,\"2298\":1,\"2299\":1,\"2300\":1,\"2303\":1,\"2325\":1,\"2327\":1}}],[\"for\",{\"0\":{\"930\":1,\"1601\":1},\"1\":{\"566\":1,\"722\":1,\"917\":1,\"932\":1,\"933\":1,\"937\":1,\"938\":2,\"950\":2,\"954\":2,\"955\":2,\"956\":3,\"966\":1,\"974\":1,\"992\":2,\"1018\":1,\"1035\":1,\"1048\":1,\"1219\":1,\"1432\":2,\"1472\":2,\"1481\":2,\"1489\":2,\"1562\":1,\"1569\":1,\"1596\":1,\"1603\":3,\"1604\":3,\"1606\":2,\"1607\":2,\"1707\":1,\"1709\":1,\"1733\":1,\"1805\":1,\"1808\":1,\"1873\":1,\"2041\":1,\"2043\":1,\"2045\":1,\"2047\":2,\"2048\":4,\"2050\":2,\"2054\":2,\"2056\":1,\"2333\":1,\"2352\":2,\"2355\":2,\"2372\":1,\"2373\":1,\"2376\":1,\"2377\":1,\"2386\":1,\"2405\":6,\"2624\":3,\"2796\":1,\"2799\":1,\"2858\":1,\"2992\":1,\"2993\":1,\"2997\":1,\"3000\":1,\"3003\":1,\"3006\":1,\"3008\":1,\"3010\":1,\"3019\":1,\"3049\":1,\"3142\":1,\"3150\":1}}],[\"form>\",{\"1\":{\"2609\":1,\"2623\":1}}],[\"formatter\",{\"1\":{\"487\":1,\"488\":2,\"489\":2}}],[\"formatter2\",{\"1\":{\"486\":3}}],[\"formatstyle\",{\"1\":{\"486\":5}}],[\"format方法\",{\"1\":{\"481\":1}}],[\"format\",{\"0\":{\"481\":1},\"1\":{\"462\":1,\"481\":1,\"484\":1,\"486\":1,\"488\":1,\"1863\":1,\"3033\":1}}],[\"formindex参数指定开始排序的下标\",{\"1\":{\"646\":1}}],[\"formindex为开始排序的下标\",{\"1\":{\"644\":1}}],[\"formindex\",{\"1\":{\"409\":1}}],[\"folders\",{\"1\":{\"79\":1}}],[\"fream\",{\"1\":{\"2502\":1}}],[\"free\",{\"1\":{\"1368\":1}}],[\"frequency\",{\"0\":{\"688\":1},\"1\":{\"688\":4}}],[\"frame\",{\"0\":{\"3247\":1}}],[\"frameworks\",{\"1\":{\"2486\":1}}],[\"framework\",{\"1\":{\"270\":1}}],[\"fragment\",{\"1\":{\"1291\":1}}],[\"fr\",{\"1\":{\"564\":2,\"581\":2,\"1800\":2,\"1801\":1,\"1802\":1,\"1804\":6,\"1805\":6,\"1817\":5,\"1834\":2}}],[\"front\",{\"1\":{\"392\":1,\"393\":2}}],[\"from设置查询的起始index\",{\"1\":{\"3008\":1}}],[\"fromindex\",{\"1\":{\"408\":1,\"409\":1,\"644\":1,\"646\":1,\"704\":1}}],[\"from\",{\"1\":{\"93\":1,\"274\":1,\"755\":1,\"2310\":1,\"2311\":1,\"2334\":1,\"2349\":1,\"2353\":2,\"2356\":1,\"2365\":1,\"2391\":1,\"2408\":5,\"2435\":1,\"2439\":1,\"2440\":1,\"2441\":1,\"2442\":1,\"2443\":2,\"2489\":1,\"2493\":1,\"2948\":3,\"2949\":1,\"3007\":2,\"3008\":1,\"3156\":1,\"3159\":1,\"3160\":1,\"3186\":1,\"3187\":1}}],[\"fasterxml\",{\"1\":{\"2982\":1}}],[\"fastjson\",{\"0\":{\"333\":1,\"2836\":1},\"1\":{\"2836\":1,\"2838\":1,\"2839\":1}}],[\"failures\",{\"1\":{\"2920\":1}}],[\"failed\",{\"1\":{\"2901\":1,\"2908\":1,\"2910\":1,\"2915\":1,\"2926\":1,\"2930\":1,\"2957\":1,\"3015\":1,\"3201\":1,\"3243\":1}}],[\"facets\",{\"1\":{\"2485\":1,\"2495\":1}}],[\"factory\",{\"1\":{\"2080\":5}}],[\"factor\",{\"1\":{\"1680\":1}}],[\"fa\",{\"1\":{\"1136\":2}}],[\"fathe\",{\"1\":{\"1136\":1}}],[\"father<integer\",{\"1\":{\"1724\":1,\"1726\":1}}],[\"father<object\",{\"1\":{\"1723\":1}}],[\"father<t1\",{\"1\":{\"1722\":1,\"1725\":1}}],[\"father的age\",{\"1\":{\"1165\":1}}],[\"father\",{\"1\":{\"1120\":2,\"1128\":3,\"1133\":1,\"1134\":1,\"1136\":1,\"1147\":1,\"1160\":6,\"1163\":1,\"1165\":2,\"1166\":1,\"1167\":1,\"1261\":1,\"1723\":1}}],[\"fatehr\",{\"1\":{\"1128\":1}}],[\"fatal\",{\"1\":{\"246\":1,\"262\":1}}],[\"fallthrough\",{\"1\":{\"1430\":1}}],[\"falgs表示模式pattern对象的模式修饰符\",{\"1\":{\"749\":1}}],[\"false=不创建\",{\"1\":{\"2963\":1}}],[\"false=覆盖写\",{\"1\":{\"574\":1}}],[\"false表示文档数据已被删除\",{\"1\":{\"2916\":1}}],[\"false用0表示\",{\"1\":{\"860\":1}}],[\"false\",{\"1\":{\"123\":3,\"152\":1,\"153\":1,\"370\":1,\"405\":1,\"411\":1,\"414\":1,\"498\":1,\"562\":2,\"576\":1,\"578\":1,\"579\":1,\"662\":1,\"716\":1,\"717\":1,\"719\":1,\"859\":1,\"877\":1,\"956\":1,\"1025\":1,\"1178\":2,\"1179\":1,\"1180\":7,\"1182\":1,\"1192\":1,\"1198\":1,\"1533\":2,\"1812\":3,\"2229\":1,\"2230\":1,\"2256\":1,\"2323\":1,\"2377\":1,\"2387\":1,\"2391\":1,\"2426\":3,\"2858\":1,\"2860\":2,\"2907\":2,\"2908\":1,\"2916\":1,\"2920\":1,\"2925\":2,\"2926\":1,\"2930\":1,\"2957\":1,\"2963\":2,\"2964\":1,\"2965\":1,\"3015\":1,\"3153\":2,\"3154\":1}}],[\"f\",{\"1\":{\"202\":1,\"698\":3,\"704\":2,\"847\":2,\"1160\":11,\"1662\":1,\"2041\":2,\"2043\":2,\"2045\":4,\"2202\":1,\"2215\":1,\"2216\":1,\"2217\":1,\"2218\":1,\"2219\":1,\"3044\":1,\"3049\":1,\"3142\":1,\"3143\":1,\"3144\":1}}],[\"f9即可\",{\"1\":{\"2502\":1}}],[\"f9\",{\"1\":{\"142\":1}}],[\"fly\",{\"1\":{\"1259\":1}}],[\"flyable\",{\"1\":{\"1259\":1}}],[\"flush\",{\"0\":{\"578\":1,\"1901\":1},\"1\":{\"572\":1,\"578\":3,\"579\":1,\"1826\":1,\"1833\":1,\"1857\":1,\"1878\":3,\"1901\":1,\"1903\":1,\"1908\":2}}],[\"flushable\",{\"1\":{\"572\":1}}],[\"fload表示数据的数据范围比long还大\",{\"1\":{\"849\":1}}],[\"float就比long要大\",{\"1\":{\"864\":1}}],[\"float同理\",{\"1\":{\"850\":1,\"868\":1}}],[\"floatvalue\",{\"1\":{\"524\":1,\"1194\":1}}],[\"float\",{\"1\":{\"123\":1,\"423\":3,\"512\":1,\"523\":1,\"524\":2,\"640\":1,\"761\":1,\"827\":1,\"846\":1,\"848\":1,\"867\":1,\"868\":1,\"1025\":1,\"1194\":3,\"1197\":1,\"1298\":1,\"1876\":1}}],[\"flot\",{\"1\":{\"519\":1}}],[\"floor\",{\"0\":{\"515\":1},\"1\":{\"515\":4,\"516\":1,\"536\":1}}],[\"flatmap中\",{\"1\":{\"2219\":1}}],[\"flatmap\",{\"0\":{\"2219\":1,\"2223\":1},\"1\":{\"2206\":1,\"2219\":2,\"2223\":1}}],[\"flash\",{\"1\":{\"1264\":9}}],[\"flank\",{\"1\":{\"503\":2,\"509\":2}}],[\"flavor`\",{\"1\":{\"380\":1,\"383\":1,\"385\":1}}],[\"flavor\",{\"0\":{\"380\":1},\"1\":{\"374\":1,\"2858\":1}}],[\"flags方法\",{\"1\":{\"749\":1}}],[\"flags\",{\"0\":{\"749\":1},\"1\":{\"748\":1,\"749\":2}}],[\"flag\",{\"1\":{\"370\":11,\"371\":6,\"618\":1,\"1039\":1}}],[\"flink集成\",{\"1\":{\"57\":1}}],[\"first\",{\"1\":{\"1919\":1,\"2232\":2}}],[\"fis\",{\"1\":{\"1335\":4,\"1344\":6,\"1352\":4,\"1692\":2,\"1821\":2,\"1823\":5,\"1836\":2,\"1847\":2,\"1848\":2,\"1851\":2,\"1853\":2,\"1858\":2,\"1879\":2,\"1898\":2,\"1904\":2,\"1909\":2,\"2034\":3,\"2646\":3,\"2647\":3}}],[\"fianl\",{\"1\":{\"1106\":1}}],[\"fieldname\",{\"1\":{\"2058\":1}}],[\"fields\",{\"1\":{\"604\":2,\"605\":2,\"2041\":2,\"2959\":1}}],[\"field\",{\"0\":{\"612\":1},\"1\":{\"604\":2,\"605\":2,\"606\":2,\"607\":2,\"612\":1,\"613\":1,\"614\":1,\"615\":1,\"616\":1,\"617\":1,\"1009\":1,\"1097\":1,\"1405\":1,\"1412\":1,\"1413\":1,\"1427\":1,\"1431\":1,\"1649\":1,\"2002\":1,\"2009\":1,\"2010\":1,\"2041\":2,\"2043\":2,\"2045\":2,\"2058\":1,\"2059\":1,\"2060\":1,\"2352\":4,\"2355\":4,\"2405\":8,\"2954\":7,\"2956\":2,\"3014\":1,\"3015\":1,\"3016\":1,\"3018\":2,\"3019\":1,\"3100\":10,\"3105\":1}}],[\"field类数组\",{\"1\":{\"604\":1,\"605\":1}}],[\"fill\",{\"0\":{\"650\":1},\"1\":{\"650\":2}}],[\"filterchain\",{\"1\":{\"2697\":1}}],[\"filterconfig\",{\"1\":{\"2697\":2}}],[\"filterdemo\",{\"1\":{\"2697\":1}}],[\"filter接口\",{\"1\":{\"2697\":1}}],[\"filter是独立的web模块\",{\"1\":{\"2696\":1}}],[\"filter的位置\",{\"0\":{\"2696\":1}}],[\"filters\",{\"1\":{\"2426\":1}}],[\"filters=wall\",{\"1\":{\"2425\":1}}],[\"filteroutputstream\",{\"1\":{\"1829\":1}}],[\"filterinputstream\",{\"1\":{\"1828\":1}}],[\"filter>\",{\"1\":{\"262\":4}}],[\"filter\",{\"0\":{\"2210\":1,\"2695\":1,\"3267\":1},\"1\":{\"262\":4,\"313\":1,\"2206\":1,\"2210\":2,\"2243\":2,\"2521\":1,\"2697\":1,\"2707\":1}}],[\"fileattribute<\",{\"1\":{\"1920\":2}}],[\"file包下还提供了files\",{\"1\":{\"1917\":1}}],[\"filechannel\",{\"1\":{\"1913\":1}}],[\"file对应的硬盘中的文件如果存在\",{\"1\":{\"1812\":1}}],[\"file对象可以作为参数传递给流的构造器\",{\"1\":{\"1761\":1}}],[\"file的作用\",{\"0\":{\"1761\":1}}],[\"file类提供了一个常量\",{\"1\":{\"1765\":1}}],[\"file类与文件\",{\"0\":{\"1762\":1}}],[\"file类即能表示文件\",{\"1\":{\"1760\":1}}],[\"file类\",{\"1\":{\"1760\":1}}],[\"fileoutputstream用于写出非文本数据之类的原始字节流\",{\"1\":{\"1787\":1}}],[\"fileoutputstream\",{\"1\":{\"575\":7,\"577\":2,\"578\":2,\"1787\":2,\"1819\":1,\"1821\":5,\"1823\":2,\"1836\":2,\"1858\":2,\"1873\":2,\"1878\":2,\"1898\":2,\"1903\":2,\"1908\":2,\"2365\":2}}],[\"fileoutstream\",{\"0\":{\"575\":1}}],[\"filedescriptor\",{\"1\":{\"574\":1,\"575\":1}}],[\"filewritertest\",{\"1\":{\"1816\":1}}],[\"filewriter写出示例\",{\"0\":{\"1816\":1}}],[\"filewriter和fileoutputstream\",{\"1\":{\"573\":1}}],[\"filewriter\",{\"0\":{\"574\":1,\"1809\":1},\"1\":{\"572\":1,\"574\":9,\"575\":1,\"576\":6,\"578\":4,\"579\":2,\"1788\":2,\"1809\":1,\"1812\":4,\"1816\":1,\"1817\":2}}],[\"filereader和filewriter都无法处理图片资源\",{\"1\":{\"1818\":1}}],[\"filereader与filewriter结合示例\",{\"0\":{\"1817\":1}}],[\"filereadertest\",{\"1\":{\"1804\":1,\"1805\":1}}],[\"filereader示例\",{\"0\":{\"1804\":1}}],[\"filereader的异常处理\",{\"0\":{\"1803\":1}}],[\"filereader的操作\",{\"0\":{\"1799\":1}}],[\"filereader\",{\"0\":{\"1798\":1},\"1\":{\"564\":4,\"565\":2,\"566\":2,\"571\":2,\"581\":2,\"1785\":2,\"1798\":1,\"1800\":4,\"1804\":2,\"1805\":2,\"1817\":2,\"1834\":2}}],[\"fileinputstream用于读取非文本数据之类的原始字节流\",{\"1\":{\"1784\":1}}],[\"fileinputstream\",{\"1\":{\"564\":4,\"565\":2,\"566\":2,\"571\":2,\"1335\":2,\"1339\":1,\"1344\":2,\"1352\":2,\"1692\":2,\"1784\":2,\"1819\":1,\"1821\":5,\"1823\":2,\"1836\":2,\"1847\":2,\"1848\":2,\"1851\":2,\"1853\":2,\"1858\":2,\"1879\":2,\"1898\":2,\"1904\":2,\"1909\":2,\"2034\":4,\"2364\":2,\"2646\":2,\"2647\":2}}],[\"fileinputstream和filereader\",{\"1\":{\"564\":1}}],[\"filenotfoundexception异常\",{\"1\":{\"1812\":1}}],[\"filenotfoundexception\",{\"1\":{\"564\":1,\"1323\":1,\"1339\":1,\"1344\":1,\"1352\":1,\"1800\":1,\"1873\":1}}],[\"filename\",{\"1\":{\"542\":2,\"574\":3,\"2686\":2}}],[\"filenamepattern>\",{\"1\":{\"262\":3}}],[\"file>\",{\"1\":{\"262\":3}}],[\"files类常用方法\",{\"0\":{\"1920\":1}}],[\"files包含了大量静态的工具方法来操作文件\",{\"1\":{\"1917\":1}}],[\"files\",{\"1\":{\"79\":1,\"302\":4,\"547\":2,\"562\":3,\"581\":1,\"1800\":2,\"1804\":1,\"1805\":1,\"1812\":2,\"1816\":1,\"1834\":1,\"1836\":2,\"1920\":1}}],[\"file\",{\"0\":{\"538\":1,\"1758\":1,\"1759\":1,\"1766\":1,\"1767\":1,\"1768\":1,\"1769\":2,\"1771\":1,\"2686\":1},\"1\":{\"79\":1,\"156\":1,\"256\":1,\"258\":2,\"262\":11,\"271\":1,\"273\":1,\"274\":1,\"275\":1,\"281\":1,\"538\":13,\"540\":6,\"541\":6,\"542\":5,\"543\":6,\"544\":5,\"545\":5,\"546\":5,\"547\":10,\"549\":5,\"550\":5,\"551\":5,\"552\":5,\"553\":5,\"555\":6,\"556\":6,\"557\":6,\"559\":9,\"562\":6,\"564\":8,\"565\":2,\"566\":2,\"571\":2,\"574\":7,\"575\":5,\"576\":1,\"577\":1,\"578\":2,\"579\":1,\"1179\":1,\"1185\":1,\"1335\":4,\"1339\":1,\"1344\":4,\"1352\":4,\"1761\":2,\"1767\":4,\"1768\":2,\"1797\":2,\"1800\":3,\"1804\":2,\"1805\":2,\"1812\":3,\"1816\":2,\"1817\":4,\"1821\":5,\"1823\":4,\"1836\":4,\"1847\":1,\"1848\":1,\"1851\":1,\"1853\":1,\"1873\":1,\"1885\":2,\"1916\":6,\"1918\":1,\"1920\":1,\"1990\":3,\"2364\":1,\"2609\":1,\"2725\":1,\"2744\":1,\"2878\":1,\"3048\":1,\"3142\":1}}],[\"fileter是javaweb核心三模块之一\",{\"1\":{\"2695\":1}}],[\"fileter\",{\"1\":{\"11\":1}}],[\"findone\",{\"1\":{\"3092\":1}}],[\"find\",{\"1\":{\"3090\":1,\"3091\":2,\"3092\":1,\"3093\":1,\"3096\":3,\"3097\":2,\"3099\":3,\"3100\":6,\"3101\":2,\"3102\":2,\"3118\":1,\"3120\":1,\"3122\":1,\"3198\":1}}],[\"findany\",{\"0\":{\"2233\":1},\"1\":{\"2233\":2}}],[\"findfirst\",{\"0\":{\"2232\":1},\"1\":{\"2232\":2}}],[\"final的\",{\"1\":{\"1373\":1}}],[\"final的类\",{\"1\":{\"1248\":1}}],[\"final的方法\",{\"1\":{\"1248\":1}}],[\"finalize\",{\"1\":{\"1176\":1}}],[\"final修饰\",{\"1\":{\"1373\":1}}],[\"final修饰的\",{\"1\":{\"1260\":1}}],[\"final修饰形参时\",{\"1\":{\"1106\":1}}],[\"final修饰形参\",{\"0\":{\"1106\":1}}],[\"final修饰局部变量\",{\"0\":{\"1105\":1}}],[\"final修饰属性\",{\"0\":{\"1104\":1}}],[\"final变量\",{\"0\":{\"1103\":1}}],[\"final方法\",{\"0\":{\"1102\":1}}],[\"final在public前后都可以\",{\"1\":{\"1101\":1}}],[\"final用来修饰一个类\",{\"1\":{\"1101\":1}}],[\"final类\",{\"0\":{\"1101\":1}}],[\"final可以用来修饰的结构\",{\"1\":{\"1100\":1}}],[\"finally处理\",{\"1\":{\"1815\":1}}],[\"finally处理异常\",{\"1\":{\"1803\":1}}],[\"finally处理编译时异常\",{\"1\":{\"1347\":1}}],[\"finally方式进行处理\",{\"1\":{\"1355\":1}}],[\"finally方式处理\",{\"1\":{\"1355\":1}}],[\"finally和throws的选择\",{\"0\":{\"1355\":1}}],[\"finally与throws的对比\",{\"0\":{\"1353\":1}}],[\"finally了\",{\"1\":{\"1347\":1}}],[\"finally将一个编译时可能出现的异常\",{\"1\":{\"1347\":1}}],[\"finally结构可以嵌套\",{\"1\":{\"1345\":1}}],[\"finally里吗也可能有异常\",{\"1\":{\"1344\":1}}],[\"finally中的代码总会执行\",{\"1\":{\"1343\":1}}],[\"finally中声明的是一定会被执行的代码\",{\"1\":{\"1342\":1}}],[\"finally一定会被执行\",{\"0\":{\"1343\":1}}],[\"finally语句为异常处理提供一个统一的出口\",{\"1\":{\"1342\":1}}],[\"finally的使用\",{\"0\":{\"1342\":1}}],[\"finally是可选的\",{\"1\":{\"1340\":1,\"1342\":1}}],[\"finally\",{\"1\":{\"579\":1,\"1318\":1,\"1337\":1,\"1343\":5,\"1344\":1,\"1353\":1,\"1430\":2,\"1532\":1,\"1536\":1,\"1804\":1,\"1805\":1,\"1816\":1,\"1817\":1,\"1823\":1,\"1834\":1,\"1836\":1,\"1870\":1,\"1873\":1,\"1983\":1,\"1984\":1,\"2325\":1,\"2329\":1,\"2333\":1,\"2349\":1,\"2352\":1,\"2355\":1,\"2386\":1,\"2387\":1,\"2405\":4,\"2409\":7,\"2428\":1}}],[\"final\",{\"0\":{\"1099\":1,\"1107\":1},\"1\":{\"242\":1,\"440\":4,\"466\":1,\"467\":1,\"468\":1,\"475\":1,\"480\":1,\"511\":1,\"517\":1,\"530\":1,\"538\":1,\"584\":1,\"619\":1,\"628\":1,\"632\":1,\"637\":1,\"641\":1,\"746\":1,\"755\":1,\"758\":1,\"1022\":1,\"1029\":1,\"1069\":1,\"1101\":2,\"1102\":2,\"1103\":1,\"1104\":3,\"1105\":1,\"1107\":1,\"1252\":1,\"1259\":5,\"1364\":1,\"1369\":1,\"1371\":2,\"1372\":2,\"1373\":6,\"1377\":1,\"1382\":2,\"1520\":1,\"1532\":1,\"1765\":1,\"1907\":1,\"1910\":2,\"1990\":1,\"2202\":2,\"2563\":7}}],[\"finish\",{\"1\":{\"72\":1,\"2489\":1,\"2493\":1}}],[\"uuid\",{\"1\":{\"2858\":1,\"2890\":1,\"2893\":1,\"3198\":3}}],[\"ua\",{\"1\":{\"2602\":3}}],[\"uanme\",{\"1\":{\"1082\":3,\"1692\":1}}],[\"u\",{\"1\":{\"1993\":1,\"2178\":1}}],[\"udp通信流程\",{\"0\":{\"1982\":1}}],[\"udp数据报通过数据报套接字\",{\"1\":{\"1981\":1}}],[\"udp\",{\"1\":{\"1981\":1,\"2449\":1}}],[\"udp网络通信\",{\"0\":{\"1981\":1}}],[\"udp网络编程\",{\"0\":{\"1980\":1}}],[\"udp网络编程中发送端和接收端的channe\",{\"1\":{\"1913\":1}}],[\"udp编程\",{\"0\":{\"1979\":1}}],[\"udp协议中每个数据报都给出了完整的地址信息\",{\"1\":{\"1981\":1}}],[\"udp协议\",{\"0\":{\"1957\":1}}],[\"uri是以一种抽象的\",{\"1\":{\"1995\":1}}],[\"uri\",{\"0\":{\"1995\":1},\"1\":{\"1919\":2,\"1995\":1,\"3237\":1}}],[\"urlencoder\",{\"1\":{\"2806\":1}}],[\"url解码解析\",{\"1\":{\"2806\":1}}],[\"url>\",{\"1\":{\"2771\":1}}],[\"urlpattern一共有四种匹配模式\",{\"1\":{\"2573\":1}}],[\"urlpatterns\",{\"1\":{\"2572\":1,\"2574\":1,\"2575\":1,\"2576\":1,\"2577\":1}}],[\"urlpatterns=\",{\"1\":{\"2552\":1,\"2571\":1}}],[\"urlpattern\",{\"0\":{\"2570\":1}}],[\"url=jdbc\",{\"1\":{\"2302\":1,\"2425\":1}}],[\"url和urn都是一种uri\",{\"1\":{\"1995\":1}}],[\"url和urn的区别\",{\"0\":{\"1995\":1}}],[\"urlconnectonn\",{\"1\":{\"1993\":1}}],[\"urlconnection对象\",{\"1\":{\"1993\":1}}],[\"urlconnection的创建\",{\"0\":{\"1993\":1}}],[\"urlconnection类是专门针对http协议的\",{\"1\":{\"1992\":1}}],[\"urlconnection\",{\"0\":{\"1992\":1},\"1\":{\"1996\":1}}],[\"url的格式为\",{\"1\":{\"2294\":1}}],[\"url的方法\",{\"1\":{\"1992\":1}}],[\"url的基本结构\",{\"0\":{\"1989\":1}}],[\"url地址的字符串\",{\"1\":{\"1990\":1}}],[\"url类常用方法\",{\"0\":{\"1991\":1}}],[\"url类的构造器都声明抛出非运行时异常\",{\"1\":{\"1990\":1}}],[\"url类\",{\"0\":{\"1990\":1}}],[\"url介绍\",{\"0\":{\"1988\":1}}],[\"url编程\",{\"0\":{\"1987\":1}}],[\"url\",{\"0\":{\"2294\":1},\"1\":{\"71\":1,\"130\":1,\"131\":1,\"132\":1,\"156\":1,\"267\":1,\"271\":1,\"277\":1,\"281\":1,\"341\":1,\"390\":1,\"1988\":3,\"1990\":20,\"1993\":3,\"1996\":3,\"2291\":1,\"2292\":1,\"2297\":2,\"2299\":2,\"2300\":2,\"2303\":3,\"2319\":1,\"2325\":3,\"2327\":3,\"2426\":1,\"2502\":1,\"2597\":1,\"2910\":1}}],[\"ucs\",{\"1\":{\"1863\":1}}],[\"u4\",{\"1\":{\"1687\":2}}],[\"u3\",{\"1\":{\"1687\":2}}],[\"u2\",{\"1\":{\"1658\":2,\"1687\":2,\"1688\":2}}],[\"u>\",{\"1\":{\"1422\":1}}],[\"ui\",{\"1\":{\"1292\":1,\"1439\":1}}],[\"ui设计师\",{\"1\":{\"22\":1}}],[\"uml类图\",{\"0\":{\"1288\":1}}],[\"u盘结束工作\",{\"1\":{\"1264\":1}}],[\"u盘开启工作\",{\"1\":{\"1264\":1}}],[\"u1\",{\"1\":{\"1095\":1,\"1658\":2,\"1687\":2,\"1688\":2}}],[\"u0000\",{\"1\":{\"1025\":1}}],[\"u0043\",{\"1\":{\"854\":1}}],[\"uptime\",{\"1\":{\"3156\":1,\"3159\":1,\"3160\":1}}],[\"upsert\",{\"1\":{\"3081\":1}}],[\"upper\",{\"1\":{\"2957\":1}}],[\"uppercase\",{\"1\":{\"1870\":2}}],[\"upgrade\",{\"1\":{\"2602\":1}}],[\"updata\",{\"1\":{\"2386\":1}}],[\"updatemany\",{\"1\":{\"3083\":1}}],[\"updateone\",{\"1\":{\"3082\":1}}],[\"updateresponse\",{\"1\":{\"2983\":1}}],[\"updaterequest\",{\"1\":{\"2983\":3}}],[\"updated\",{\"1\":{\"2910\":3,\"2912\":1}}],[\"updatebyid\",{\"1\":{\"347\":1,\"360\":1}}],[\"update\",{\"1\":{\"347\":1,\"359\":1,\"364\":1,\"371\":1,\"2329\":1,\"2333\":1,\"2334\":3,\"2366\":1,\"2387\":4,\"2394\":1,\"2400\":1,\"2405\":2,\"2407\":1,\"2408\":5,\"2409\":1,\"2435\":2,\"2438\":1,\"2439\":1,\"2502\":3,\"2849\":1,\"2911\":1,\"2983\":2,\"3080\":3,\"3084\":1}}],[\"up\",{\"1\":{\"535\":1,\"536\":2}}],[\"undeﬁned\",{\"1\":{\"3034\":2}}],[\"underscore\",{\"1\":{\"390\":1}}],[\"until\",{\"1\":{\"2920\":1,\"3049\":1,\"3142\":1}}],[\"untreeify\",{\"1\":{\"1680\":1}}],[\"unbounded\",{\"1\":{\"2781\":1}}],[\"uncommitted\",{\"1\":{\"2390\":1}}],[\"unchecked\",{\"1\":{\"1323\":1,\"1429\":1,\"1430\":1}}],[\"unaryoperator<t>\",{\"1\":{\"2202\":1}}],[\"unaryoperator\",{\"1\":{\"2202\":1}}],[\"uname>\",{\"1\":{\"2771\":1}}],[\"uname=aaron\",{\"1\":{\"2610\":1}}],[\"uname=sgugo\",{\"1\":{\"2598\":2}}],[\"uname=shk\",{\"1\":{\"1989\":1}}],[\"uname=jinno\",{\"1\":{\"1690\":1}}],[\"uname\",{\"1\":{\"368\":2,\"1034\":1,\"1054\":1,\"1056\":1,\"1071\":4,\"1082\":1,\"1692\":1,\"2609\":1,\"2630\":1,\"2964\":1,\"2965\":1}}],[\"unlock\",{\"1\":{\"1532\":1,\"1535\":1,\"1536\":2}}],[\"unknownhostexception\",{\"1\":{\"1944\":1,\"1965\":1,\"1971\":1}}],[\"unknown\",{\"1\":{\"1432\":2}}],[\"uniform\",{\"1\":{\"1988\":1,\"1995\":1}}],[\"unix和url使用\",{\"1\":{\"1764\":1}}],[\"unix行模式\",{\"1\":{\"749\":1}}],[\"unix\",{\"1\":{\"749\":1}}],[\"unicode只是定义了一个庞大的\",{\"1\":{\"1863\":1}}],[\"unicode在很长一段时间内无法推广\",{\"1\":{\"1863\":1}}],[\"unicode不完美\",{\"1\":{\"1863\":1}}],[\"unicode是一种将全世界所有文字都包含的编码集\",{\"1\":{\"1863\":1}}],[\"unicode与utf\",{\"0\":{\"1863\":1},\"1\":{\"1863\":1}}],[\"unicode\",{\"1\":{\"749\":2,\"854\":2,\"855\":2,\"1861\":1,\"1863\":1}}],[\"unique\",{\"1\":{\"375\":1,\"376\":1,\"377\":1,\"378\":1,\"3111\":1}}],[\"unsupportedoperationexception\",{\"1\":{\"649\":1}}],[\"unsupportedencodingexception\",{\"1\":{\"426\":2}}],[\"unnecessary\",{\"1\":{\"535\":1,\"536\":1}}],[\"unused\",{\"1\":{\"302\":1}}],[\"util类库\",{\"0\":{\"2739\":1}}],[\"util\",{\"1\":{\"459\":1,\"460\":1,\"475\":2,\"493\":1,\"641\":2,\"671\":1,\"736\":2,\"738\":1,\"810\":2,\"811\":1,\"938\":1,\"1090\":1,\"1530\":1,\"1536\":1,\"2004\":1,\"2101\":3,\"2138\":1,\"2188\":1,\"2247\":1,\"2322\":1,\"2325\":1,\"2326\":1}}],[\"utils包\",{\"1\":{\"370\":1}}],[\"utils\",{\"1\":{\"313\":1,\"369\":1,\"1292\":1}}],[\"util包\",{\"0\":{\"34\":1,\"758\":1}}],[\"utf8mb4\",{\"1\":{\"382\":8}}],[\"utf8\",{\"1\":{\"375\":6,\"376\":1,\"377\":4,\"378\":4,\"379\":3,\"380\":2,\"381\":5,\"382\":2,\"383\":3,\"384\":6,\"385\":3,\"1851\":1}}],[\"utf\",{\"0\":{\"1864\":1},\"1\":{\"262\":1,\"813\":2,\"855\":1,\"1848\":1,\"1851\":1,\"1853\":1,\"1858\":1,\"1861\":1,\"1863\":3,\"2629\":2,\"2630\":1,\"2632\":1,\"2648\":1,\"2771\":1,\"2772\":2,\"2779\":1,\"2806\":1}}],[\"usb结束工作\",{\"1\":{\"1264\":2}}],[\"usb开始工作\",{\"1\":{\"1264\":2}}],[\"usb\",{\"1\":{\"1264\":11}}],[\"usb是他们的一个功能\",{\"1\":{\"1257\":1}}],[\"usa\",{\"1\":{\"1230\":1}}],[\"use=\",{\"1\":{\"2781\":1}}],[\"use\",{\"0\":{\"1423\":1},\"1\":{\"1412\":1,\"1421\":2,\"2460\":1,\"3050\":1,\"3061\":1,\"3161\":1,\"3168\":1,\"3194\":1,\"3195\":1,\"3196\":1,\"3201\":1,\"3207\":1,\"3210\":1}}],[\"used\",{\"1\":{\"811\":1,\"2435\":1}}],[\"useradminanydatabase\",{\"1\":{\"3189\":1,\"3190\":1,\"3196\":1}}],[\"useradmin\",{\"1\":{\"3187\":1,\"3189\":1,\"3190\":1}}],[\"userid字段的单字段正序索引\",{\"1\":{\"3114\":1}}],[\"userid\",{\"1\":{\"3073\":1,\"3076\":2,\"3083\":1,\"3092\":2,\"3093\":1,\"3095\":1,\"3097\":1,\"3099\":1,\"3101\":2,\"3102\":1,\"3106\":1,\"3112\":3,\"3113\":5,\"3114\":2,\"3116\":2,\"3120\":1,\"3122\":2,\"3168\":1,\"3198\":3}}],[\"user3\",{\"1\":{\"2986\":2,\"2987\":2}}],[\"user2\",{\"1\":{\"2986\":2,\"2987\":2}}],[\"user1\",{\"1\":{\"2986\":2,\"2987\":2}}],[\"userjson\",{\"1\":{\"2980\":2}}],[\"user下的所有资源\",{\"1\":{\"2701\":1}}],[\"user=root\",{\"1\":{\"2302\":1}}],[\"user类\",{\"1\":{\"2073\":1}}],[\"user类中已经重写了compareto\",{\"1\":{\"1687\":1}}],[\"userdir\",{\"1\":{\"636\":2}}],[\"userhome\",{\"1\":{\"636\":2}}],[\"user`\",{\"1\":{\"375\":2,\"376\":2,\"377\":2,\"378\":2,\"379\":2,\"380\":2,\"382\":2}}],[\"username=root\",{\"1\":{\"2425\":1}}],[\"username=\",{\"1\":{\"2254\":1,\"2257\":1,\"2259\":2,\"2260\":1}}],[\"username`\",{\"1\":{\"375\":1}}],[\"username\",{\"1\":{\"130\":1,\"131\":1,\"156\":1,\"267\":1,\"271\":1,\"281\":1,\"341\":1,\"390\":1,\"636\":2,\"2221\":4,\"2310\":2,\"2426\":1,\"2623\":1,\"2624\":4,\"2806\":1,\"3236\":1,\"3237\":1}}],[\"user\",{\"0\":{\"381\":1},\"1\":{\"127\":1,\"128\":1,\"302\":1,\"374\":1,\"636\":3,\"771\":1,\"1088\":1,\"1095\":2,\"1153\":5,\"1654\":3,\"1657\":13,\"1658\":6,\"1687\":8,\"1688\":6,\"1767\":1,\"1954\":1,\"1989\":1,\"2034\":4,\"2295\":1,\"2297\":1,\"2299\":2,\"2300\":2,\"2303\":3,\"2310\":6,\"2311\":3,\"2319\":1,\"2325\":3,\"2327\":3,\"2387\":4,\"2391\":7,\"2574\":2,\"2575\":2,\"2602\":2,\"2701\":2,\"2839\":3,\"2965\":1,\"2975\":1,\"2977\":1,\"2978\":1,\"2980\":8,\"2981\":2,\"2983\":1,\"2984\":1,\"2986\":3,\"2987\":3,\"2991\":1,\"2992\":1,\"2993\":3,\"2997\":2,\"3000\":1,\"3003\":1,\"3006\":1,\"3008\":1,\"3010\":1,\"3015\":1,\"3019\":2,\"3067\":1,\"3193\":2,\"3195\":1,\"3196\":1,\"3197\":1,\"3198\":3,\"3210\":1}}],[\"users中\",{\"1\":{\"3197\":1,\"3198\":1}}],[\"users3\",{\"1\":{\"124\":1}}],[\"users2\",{\"1\":{\"124\":1}}],[\"users\",{\"1\":{\"124\":1,\"127\":1,\"636\":1,\"970\":4,\"2507\":1,\"3198\":2}}],[\"using\",{\"1\":{\"375\":1,\"376\":1,\"377\":1,\"378\":1,\"379\":1,\"380\":1,\"381\":1,\"382\":1,\"383\":1,\"384\":1,\"385\":1,\"2507\":1,\"3150\":1}}],[\"usr\",{\"1\":{\"206\":1,\"787\":1}}],[\"ixcan\",{\"1\":{\"3121\":1}}],[\"illegalmonitorstateexception异常\",{\"1\":{\"1551\":1}}],[\"illegalthreadstateexception异常\",{\"1\":{\"1477\":1}}],[\"illegalargumentexception\",{\"1\":{\"617\":1,\"626\":1,\"629\":1,\"1379\":1,\"1828\":1,\"1829\":1,\"1830\":1,\"1831\":1}}],[\"illegalaccessexception异常\",{\"1\":{\"2037\":1}}],[\"illegalaccessexception\",{\"1\":{\"591\":1,\"617\":1,\"626\":1,\"629\":1}}],[\"iq+10\",{\"1\":{\"1106\":1}}],[\"iq++\",{\"1\":{\"1106\":1}}],[\"iq\",{\"1\":{\"1106\":2}}],[\"i表示int类型\",{\"1\":{\"990\":1}}],[\"i被j除尽\",{\"1\":{\"956\":1}}],[\"i变量的声明别忘了加数据类型\",{\"1\":{\"933\":1}}],[\"i<coll\",{\"1\":{\"1596\":1}}],[\"i<=num\",{\"1\":{\"1562\":1}}],[\"i<50\",{\"1\":{\"1489\":1}}],[\"i<p1\",{\"1\":{\"1018\":1}}],[\"i<nums\",{\"1\":{\"974\":1}}],[\"i<array2\",{\"1\":{\"966\":1}}],[\"i<10\",{\"1\":{\"937\":1,\"1481\":1}}],[\"i<100\",{\"1\":{\"933\":1,\"1472\":2,\"1569\":1}}],[\"i<len\",{\"1\":{\"566\":1,\"1805\":1}}],[\"i=0\",{\"1\":{\"933\":1,\"966\":1,\"974\":1,\"1018\":1,\"1562\":1,\"1569\":1,\"1596\":1,\"1805\":1}}],[\"i4\",{\"1\":{\"895\":1}}],[\"i3\",{\"1\":{\"895\":1}}],[\"i2\",{\"1\":{\"864\":1,\"866\":2,\"869\":2,\"895\":2}}],[\"i2bat8\",{\"1\":{\"429\":2,\"430\":2,\"431\":1,\"432\":1}}],[\"i1\",{\"1\":{\"864\":2,\"866\":1,\"869\":1,\"895\":2,\"896\":4,\"1194\":2}}],[\"itcast\",{\"1\":{\"2781\":2,\"2782\":2}}],[\"item\",{\"1\":{\"1626\":2}}],[\"iterate\",{\"1\":{\"2201\":1,\"2202\":2}}],[\"iterator方法也得到了了嵌套的泛型\",{\"1\":{\"1710\":1}}],[\"iterator方法和iterator对象\",{\"0\":{\"1588\":1}}],[\"iterator1\",{\"1\":{\"1687\":3}}],[\"iterator对象\",{\"0\":{\"1589\":1}}],[\"iterator对象称为迭代器\",{\"1\":{\"1587\":1,\"1588\":1}}],[\"iterator对象有一个指针\",{\"1\":{\"675\":1,\"1591\":1}}],[\"iterator是个迭代器接口\",{\"1\":{\"1586\":1}}],[\"iteratorannotations\",{\"1\":{\"1432\":3}}],[\"iterator<\",{\"1\":{\"1747\":1,\"1748\":1}}],[\"iterator<map\",{\"1\":{\"1710\":1}}],[\"iterator<integer>\",{\"1\":{\"676\":1,\"677\":1,\"678\":1,\"1709\":1}}],[\"iterator<e>\",{\"1\":{\"671\":1,\"673\":1}}],[\"iterator<string>\",{\"1\":{\"637\":1,\"758\":1}}],[\"iterator\",{\"0\":{\"671\":1,\"672\":1,\"1585\":1,\"1586\":1},\"1\":{\"671\":3,\"672\":1,\"676\":1,\"677\":2,\"678\":1,\"721\":2,\"723\":2,\"1589\":2,\"1592\":1,\"1594\":2,\"1654\":2,\"1687\":2,\"1709\":1,\"1710\":4,\"1747\":4,\"1748\":4}}],[\"iterable接口\",{\"1\":{\"1588\":1}}],[\"iterable<e>\",{\"1\":{\"654\":1}}],[\"it\",{\"1\":{\"671\":2,\"676\":2,\"677\":2,\"678\":3,\"721\":3,\"723\":3,\"1594\":1,\"1595\":4,\"1596\":1,\"1597\":2,\"1600\":3,\"1654\":3,\"1709\":3}}],[\"itheima\",{\"1\":{\"200\":1,\"249\":1}}],[\"i++\",{\"1\":{\"566\":1,\"933\":1,\"936\":1,\"937\":1,\"950\":1,\"954\":1,\"955\":1,\"956\":1,\"966\":1,\"974\":1,\"992\":1,\"1018\":1,\"1035\":1,\"1048\":1,\"1472\":2,\"1481\":2,\"1489\":2,\"1562\":1,\"1569\":1,\"1596\":1,\"1606\":2,\"1607\":1,\"1805\":1,\"1808\":1,\"1873\":1,\"2048\":2,\"2333\":1,\"2352\":2,\"2355\":2,\"2372\":1,\"2373\":1,\"2376\":1,\"2377\":1,\"2386\":1,\"2405\":6}}],[\"ibookservice\",{\"1\":{\"360\":1,\"361\":2,\"364\":1,\"371\":1}}],[\"ibatis\",{\"1\":{\"348\":1,\"390\":1}}],[\"ifpresent\",{\"0\":{\"2257\":1},\"1\":{\"2257\":2}}],[\"if\",{\"0\":{\"918\":1,\"929\":1},\"1\":{\"357\":1,\"371\":3,\"498\":1,\"501\":4,\"508\":1,\"509\":2,\"555\":2,\"556\":2,\"557\":2,\"579\":1,\"645\":2,\"901\":2,\"917\":1,\"920\":1,\"921\":1,\"922\":3,\"923\":1,\"933\":1,\"936\":1,\"938\":2,\"941\":1,\"950\":1,\"956\":2,\"1035\":1,\"1056\":1,\"1168\":2,\"1180\":7,\"1241\":1,\"1344\":1,\"1361\":1,\"1432\":1,\"1472\":2,\"1481\":3,\"1492\":1,\"1509\":1,\"1512\":1,\"1520\":1,\"1521\":3,\"1536\":1,\"1556\":1,\"1600\":1,\"1657\":2,\"1658\":1,\"1688\":1,\"1804\":1,\"1805\":1,\"1816\":1,\"1817\":2,\"1823\":2,\"1828\":1,\"1829\":1,\"1830\":1,\"1831\":1,\"1834\":1,\"1836\":2,\"1870\":2,\"1873\":3,\"1983\":1,\"1984\":1,\"2048\":4,\"2325\":2,\"2328\":2,\"2349\":1,\"2352\":1,\"2365\":1,\"2376\":1,\"2377\":1,\"2405\":2,\"2442\":1,\"2566\":2,\"2614\":2,\"2799\":2}}],[\"iws\",{\"1\":{\"302\":1}}],[\"images\",{\"1\":{\"2907\":1,\"2908\":2,\"2925\":1,\"2926\":2}}],[\"image\",{\"1\":{\"2684\":1,\"2686\":1}}],[\"import的使用细节\",{\"0\":{\"1094\":1}}],[\"import语句告诉编译器到哪里去寻找类\",{\"1\":{\"1092\":1}}],[\"import\",{\"0\":{\"1091\":1,\"1098\":1},\"1\":{\"938\":1,\"1093\":2,\"1097\":1,\"1098\":1,\"1339\":4,\"1432\":7,\"1536\":1,\"1916\":3,\"2297\":1,\"2424\":2,\"2697\":2,\"2976\":2}}],[\"implicit\",{\"1\":{\"3161\":1}}],[\"implemented\",{\"1\":{\"1395\":1}}],[\"implement\",{\"1\":{\"1219\":1,\"2725\":1,\"2726\":1}}],[\"implements\",{\"1\":{\"360\":1,\"361\":1,\"440\":2,\"466\":1,\"467\":1,\"475\":1,\"501\":1,\"529\":1,\"530\":1,\"538\":1,\"564\":2,\"572\":1,\"584\":1,\"612\":1,\"637\":1,\"645\":1,\"746\":1,\"755\":1,\"758\":1,\"1210\":1,\"1261\":1,\"1262\":2,\"1264\":1,\"1382\":1,\"1492\":1,\"1499\":1,\"1509\":1,\"1512\":1,\"1520\":1,\"1536\":1,\"1556\":1,\"1562\":1,\"1569\":1,\"1907\":1,\"1990\":1,\"2080\":1,\"2081\":1,\"2095\":1,\"2408\":1,\"2531\":1,\"2532\":1,\"2556\":1,\"2571\":1,\"2697\":1}}],[\"implementation\",{\"1\":{\"200\":4}}],[\"impl作为业务层实现类\",{\"1\":{\"358\":1}}],[\"impl\",{\"1\":{\"313\":1,\"348\":1,\"390\":1}}],[\"img\",{\"1\":{\"538\":1,\"562\":2,\"1768\":2}}],[\"iml\",{\"1\":{\"302\":1}}],[\"iml等\",{\"1\":{\"300\":1}}],[\"i\",{\"1\":{\"258\":2,\"262\":3,\"424\":1,\"431\":1,\"432\":1,\"434\":1,\"528\":2,\"566\":2,\"579\":1,\"642\":1,\"647\":2,\"685\":2,\"741\":3,\"742\":3,\"744\":1,\"749\":1,\"887\":1,\"897\":2,\"933\":3,\"936\":5,\"937\":1,\"950\":2,\"954\":3,\"955\":5,\"956\":6,\"966\":2,\"972\":2,\"974\":1,\"990\":1,\"992\":4,\"1018\":2,\"1035\":3,\"1047\":1,\"1048\":3,\"1178\":2,\"1218\":3,\"1278\":2,\"1440\":1,\"1472\":4,\"1474\":3,\"1481\":8,\"1489\":3,\"1562\":1,\"1604\":2,\"1606\":6,\"1607\":3,\"1773\":2,\"1805\":1,\"1808\":3,\"1873\":4,\"2048\":10,\"2121\":2,\"2333\":4,\"2352\":8,\"2355\":8,\"2372\":3,\"2373\":3,\"2376\":4,\"2377\":4,\"2386\":4,\"2405\":24,\"3034\":1,\"3156\":10,\"3159\":2,\"3160\":2,\"3186\":2,\"3187\":2}}],[\"id索引\",{\"1\":{\"3109\":1}}],[\"id字段默认总是显示的\",{\"1\":{\"3093\":1}}],[\"id字段设置为主键\",{\"1\":{\"3031\":1}}],[\"id查询文档\",{\"1\":{\"2991\":1}}],[\"id删除文档\",{\"1\":{\"2984\":1}}],[\"id进行删除的\",{\"1\":{\"2913\":1}}],[\"id进行查看\",{\"1\":{\"2904\":1,\"2922\":1}}],[\"id不同\",{\"1\":{\"2903\":1,\"2908\":1,\"2926\":1}}],[\"id时\",{\"1\":{\"2903\":2}}],[\"id是固定的\",{\"1\":{\"2903\":1}}],[\"id是不容易记得\",{\"1\":{\"2902\":1}}],[\"id是唯一标识\",{\"1\":{\"2902\":1}}],[\"id属性值是唯一的\",{\"1\":{\"2772\":1}}],[\"id=\",{\"1\":{\"2771\":1}}],[\"id=1008\",{\"1\":{\"2236\":1}}],[\"id=1001\",{\"1\":{\"2232\":1,\"2233\":1}}],[\"identityhashcode\",{\"1\":{\"2426\":1}}],[\"identifier\",{\"1\":{\"1995\":1}}],[\"iden\",{\"1\":{\"2239\":2}}],[\"ide有一键重写功能\",{\"1\":{\"1186\":1}}],[\"ide\",{\"1\":{\"1180\":1}}],[\"idea没有使用tomcat的webapps作为项目目录\",{\"1\":{\"2511\":1}}],[\"idea会为每一个tomcat部署的项目单独建立一份配置文件\",{\"1\":{\"2507\":1}}],[\"idea使用\",{\"0\":{\"2476\":1}}],[\"idea中是无法实现活化的\",{\"1\":{\"2823\":1}}],[\"idea中快速使用\",{\"0\":{\"2539\":1}}],[\"idea中\",{\"1\":{\"2459\":1}}],[\"idea连接数据库\",{\"1\":{\"310\":1}}],[\"idea文件\",{\"1\":{\"79\":1}}],[\"idea\",{\"0\":{\"2107\":1,\"2481\":1,\"2484\":1},\"1\":{\"10\":1,\"300\":1,\"302\":4,\"2472\":1}}],[\"id`\",{\"1\":{\"377\":1,\"378\":1,\"379\":2,\"380\":1,\"382\":1,\"383\":3,\"384\":2,\"385\":3}}],[\"id\",{\"0\":{\"2902\":1,\"2923\":1,\"2991\":1},\"1\":{\"273\":1,\"274\":3,\"342\":1,\"343\":1,\"348\":1,\"359\":2,\"360\":2,\"364\":6,\"368\":2,\"371\":6,\"390\":2,\"1039\":3,\"1132\":1,\"1361\":5,\"1732\":1,\"2042\":1,\"2044\":1,\"2176\":2,\"2179\":2,\"2209\":1,\"2214\":1,\"2329\":1,\"2334\":2,\"2349\":4,\"2351\":4,\"2353\":2,\"2356\":2,\"2365\":5,\"2371\":1,\"2407\":2,\"2408\":9,\"2439\":1,\"2440\":2,\"2441\":2,\"2442\":5,\"2443\":1,\"2777\":1,\"2901\":1,\"2902\":2,\"2905\":1,\"2907\":2,\"2908\":4,\"2909\":1,\"2910\":2,\"2911\":1,\"2913\":1,\"2915\":1,\"2916\":1,\"2923\":1,\"2925\":2,\"2926\":4,\"2930\":2,\"2980\":2,\"2983\":2,\"2984\":3,\"2986\":3,\"2987\":3,\"2990\":1,\"2991\":2,\"2993\":2,\"2997\":1,\"3019\":1,\"3033\":1,\"3034\":1,\"3074\":1,\"3076\":2,\"3077\":1,\"3080\":1,\"3082\":1,\"3084\":1,\"3087\":1,\"3093\":1,\"3109\":6,\"3112\":2,\"3113\":2,\"3117\":2,\"3122\":1,\"3153\":2,\"3154\":1,\"3156\":1,\"3159\":1,\"3160\":1,\"3198\":3}}],[\"id>\",{\"1\":{\"235\":2}}],[\"idx\",{\"1\":{\"200\":2,\"1918\":2}}],[\"isbuiltin\",{\"1\":{\"3187\":6}}],[\"isnullable\",{\"1\":{\"2345\":1}}],[\"isnotempty\",{\"1\":{\"360\":3}}],[\"ispresent\",{\"0\":{\"2256\":1},\"1\":{\"2256\":2}}],[\"iswritable\",{\"1\":{\"1920\":1}}],[\"ismale\",{\"1\":{\"1879\":3}}],[\"ismale=true\",{\"0\":{\"1301\":1}}],[\"isreachable\",{\"0\":{\"1948\":1},\"1\":{\"1948\":2}}],[\"isreadable\",{\"1\":{\"1920\":1}}],[\"isregularfile\",{\"1\":{\"1920\":1}}],[\"isr\",{\"1\":{\"1847\":1,\"1848\":1,\"1851\":2,\"1853\":2,\"1858\":3,\"1870\":2}}],[\"isacknowledged\",{\"1\":{\"2975\":1,\"2978\":1}}],[\"isautoincrement\",{\"1\":{\"2345\":1}}],[\"isabsolute\",{\"1\":{\"1918\":1}}],[\"isalive\",{\"1\":{\"1479\":1,\"1481\":2}}],[\"isannotationpresent\",{\"1\":{\"1432\":1}}],[\"isxxx\",{\"1\":{\"1283\":1}}],[\"isflag\",{\"1\":{\"956\":4}}],[\"isfile\",{\"0\":{\"550\":1},\"1\":{\"550\":2}}],[\"ishidden\",{\"0\":{\"553\":1},\"1\":{\"553\":2,\"1920\":1}}],[\"isdirectory\",{\"0\":{\"549\":1},\"1\":{\"549\":2,\"1920\":1}}],[\"iso8859\",{\"1\":{\"1861\":1}}],[\"isotime\",{\"1\":{\"483\":1}}],[\"isodate\",{\"1\":{\"483\":1}}],[\"isodatetime\",{\"1\":{\"483\":1,\"484\":2,\"485\":2}}],[\"iso\",{\"1\":{\"483\":6,\"484\":1,\"485\":2,\"486\":1,\"2628\":1}}],[\"isempty\",{\"0\":{\"411\":1,\"661\":1,\"719\":1},\"1\":{\"411\":2,\"661\":2,\"719\":3,\"810\":2}}],[\"iservice<book>\",{\"1\":{\"361\":1}}],[\"is\",{\"1\":{\"168\":1,\"242\":2,\"244\":2,\"263\":2,\"811\":1,\"812\":1,\"2034\":2,\"2303\":2,\"2325\":2,\"2327\":2,\"2364\":2,\"2365\":3,\"2424\":2,\"2427\":2,\"3049\":1,\"3142\":1,\"3193\":1}}],[\"ip+port\",{\"1\":{\"3056\":1}}],[\"iphone\",{\"1\":{\"2930\":1,\"2942\":2}}],[\"ipxx\",{\"1\":{\"2463\":1}}],[\"ip层\",{\"1\":{\"1955\":1}}],[\"ipv6\",{\"1\":{\"1933\":1}}],[\"ipv4\",{\"1\":{\"1933\":1}}],[\"ipv4和ipv6\",{\"0\":{\"1933\":1}}],[\"ip地址分类\",{\"0\":{\"1932\":1}}],[\"ip地址介绍\",{\"0\":{\"1931\":1}}],[\"ip与端口号\",{\"0\":{\"1929\":1,\"1930\":1}}],[\"ip协议模型从更实用的角度出发\",{\"1\":{\"1955\":1}}],[\"ip协议\",{\"1\":{\"1926\":1,\"1955\":1}}],[\"ip参考模型\",{\"1\":{\"1926\":1}}],[\"ip和端口号\",{\"1\":{\"1925\":1}}],[\"ipage<book>\",{\"1\":{\"359\":1,\"360\":2,\"364\":1,\"371\":1}}],[\"ipage\",{\"0\":{\"351\":1},\"1\":{\"351\":1,\"352\":1,\"360\":2}}],[\"ipaddress属性各种书写模式\",{\"1\":{\"167\":1}}],[\"ipaddress\",{\"1\":{\"164\":1,\"167\":2}}],[\"ipr\",{\"1\":{\"302\":1}}],[\"ip\",{\"0\":{\"1955\":1},\"1\":{\"167\":3,\"170\":1,\"1926\":1,\"1941\":1,\"1944\":2,\"1955\":3,\"1966\":1,\"1969\":1,\"1985\":4,\"1986\":1,\"1996\":2,\"2449\":1,\"2598\":2,\"3160\":1}}],[\"indices\",{\"1\":{\"2892\":1,\"2975\":1,\"2976\":2,\"2977\":1,\"2978\":1,\"2992\":1,\"2993\":1,\"2997\":1,\"3000\":1,\"3003\":1,\"3006\":1,\"3008\":1,\"3010\":1,\"3015\":1,\"3019\":1}}],[\"independent\",{\"1\":{\"2288\":1}}],[\"indexes\",{\"1\":{\"3107\":2}}],[\"indexresponse\",{\"1\":{\"2980\":1}}],[\"indexrequest\",{\"1\":{\"2980\":2,\"2986\":6}}],[\"indexoutofboundsexception\",{\"0\":{\"1328\":1},\"1\":{\"689\":1,\"699\":2}}],[\"indexof\",{\"0\":{\"408\":1,\"700\":1},\"1\":{\"408\":3,\"449\":1,\"700\":2}}],[\"index\",{\"1\":{\"200\":2,\"394\":1,\"407\":1,\"697\":3,\"698\":3,\"699\":1,\"700\":1,\"702\":1,\"703\":1,\"1916\":2,\"1993\":1,\"2340\":1,\"2343\":1,\"2510\":2,\"2609\":1,\"2701\":2,\"2858\":1,\"2865\":1,\"2876\":1,\"2885\":1,\"2890\":1,\"2893\":1,\"2901\":1,\"2907\":2,\"2908\":2,\"2910\":1,\"2915\":1,\"2916\":1,\"2925\":2,\"2926\":2,\"2930\":2,\"2963\":3,\"2964\":3,\"2965\":1,\"2966\":1,\"2980\":2,\"2983\":1,\"2984\":1,\"2986\":3,\"2987\":3,\"2991\":1,\"2993\":2,\"2997\":1,\"3019\":1,\"3031\":2,\"3105\":1,\"3106\":1,\"3107\":1,\"3116\":1}}],[\"increment\",{\"1\":{\"2371\":1}}],[\"includes\",{\"1\":{\"2999\":3,\"3000\":2}}],[\"include也要修改\",{\"1\":{\"234\":1}}],[\"include有一个问题\",{\"1\":{\"234\":1}}],[\"include\",{\"0\":{\"231\":1},\"1\":{\"232\":1,\"2702\":1,\"2890\":1,\"2976\":1}}],[\"inethostaddress\",{\"1\":{\"1946\":2}}],[\"inet4\",{\"1\":{\"1946\":2,\"1947\":2,\"1948\":2}}],[\"inet4address\",{\"1\":{\"1942\":1}}],[\"inet3\",{\"1\":{\"1945\":2}}],[\"inet2\",{\"1\":{\"1945\":2}}],[\"inetaddress\",{\"1\":{\"1942\":1,\"1943\":1,\"1944\":3,\"1945\":5,\"1946\":2,\"1947\":2,\"1948\":2,\"1964\":1,\"1966\":2,\"1971\":1,\"1983\":1,\"1985\":3,\"1986\":2,\"1996\":1}}],[\"inetaddress类主要表示ip地址\",{\"1\":{\"1942\":1}}],[\"inetaddress类\",{\"0\":{\"1940\":1}}],[\"inet6address\",{\"1\":{\"1942\":1}}],[\"in实现\",{\"1\":{\"1870\":1}}],[\"in与system\",{\"0\":{\"1868\":1}}],[\"inheritedroles\",{\"1\":{\"3187\":6}}],[\"inherited注解的自定义的注解标注在类级别上\",{\"1\":{\"1416\":1}}],[\"inherited\",{\"0\":{\"1416\":1,\"1426\":1},\"1\":{\"1390\":1,\"1402\":1,\"1408\":1,\"1416\":2,\"1426\":2,\"1432\":1}}],[\"inheritance\",{\"1\":{\"1003\":1}}],[\"inb\",{\"1\":{\"1307\":1}}],[\"inner\",{\"1\":{\"1201\":2}}],[\"in2\",{\"1\":{\"1192\":1}}],[\"in1\",{\"1\":{\"1192\":3,\"1194\":2,\"1195\":2}}],[\"inputsreamreader\",{\"1\":{\"1848\":1}}],[\"inputsteam\",{\"1\":{\"566\":1}}],[\"inputstreamreader实现将字节的输入流按指定字符集转换为字符的输入流\",{\"1\":{\"1846\":1}}],[\"inputstreamreader的字符集参数要和文件本身的编码统一\",{\"1\":{\"1844\":1}}],[\"inputstreamreader\",{\"0\":{\"1845\":1},\"1\":{\"1842\":1,\"1846\":1,\"1847\":3,\"1848\":2,\"1851\":2,\"1853\":2,\"1858\":2,\"1870\":2}}],[\"inputstream和reader都是输入流\",{\"1\":{\"564\":1}}],[\"inputstream\",{\"0\":{\"564\":1,\"1783\":1,\"1784\":1},\"1\":{\"564\":2,\"565\":1,\"638\":1,\"759\":1,\"1783\":1,\"1828\":1,\"1847\":1,\"1848\":1,\"1869\":1,\"1875\":1,\"1920\":2,\"1966\":2,\"1977\":3,\"1994\":1,\"2034\":1,\"2303\":1,\"2325\":1,\"2327\":1,\"2365\":1,\"2424\":1,\"2427\":1}}],[\"inputmismatchexception\",{\"0\":{\"1333\":1},\"1\":{\"1323\":1}}],[\"input\",{\"1\":{\"750\":2,\"752\":2,\"753\":2,\"756\":1,\"1774\":1,\"1777\":1}}],[\"in\",{\"1\":{\"638\":2,\"639\":1,\"640\":1,\"759\":2,\"760\":1,\"761\":1,\"811\":1,\"938\":1,\"1333\":1,\"1828\":2,\"1830\":4,\"1847\":1,\"1848\":1,\"1867\":1,\"1868\":1,\"1869\":1,\"1870\":2,\"2460\":1,\"2976\":1}}],[\"inverted\",{\"1\":{\"2876\":1,\"2878\":1}}],[\"invocationhandler\",{\"0\":{\"2091\":1,\"2092\":1},\"1\":{\"2090\":1,\"2095\":1}}],[\"invocationhandler接口\",{\"1\":{\"2090\":1}}],[\"invocationtargetexception\",{\"1\":{\"626\":1,\"629\":1}}],[\"invoke方法里\",{\"1\":{\"2101\":1}}],[\"invoke方法里主要做两件事\",{\"1\":{\"2085\":1}}],[\"invoke\",{\"0\":{\"626\":1,\"2066\":1,\"2092\":1},\"1\":{\"626\":2,\"1432\":2,\"2009\":1,\"2010\":1,\"2063\":2,\"2066\":1,\"2092\":1,\"2095\":3,\"2101\":3}}],[\"invalid\",{\"1\":{\"168\":1}}],[\"install\",{\"1\":{\"787\":1,\"3161\":1}}],[\"instancof的\",{\"0\":{\"1168\":1}}],[\"instance\",{\"1\":{\"1007\":1,\"1240\":2,\"1241\":4,\"1521\":8,\"1522\":1,\"2782\":1,\"3204\":1}}],[\"instanceof\",{\"1\":{\"501\":1,\"508\":2,\"1168\":5,\"1657\":1,\"1658\":2,\"1688\":2}}],[\"instantiationexception\",{\"1\":{\"591\":1,\"629\":1}}],[\"instant\",{\"0\":{\"475\":1},\"1\":{\"475\":2,\"476\":3,\"477\":2,\"478\":2,\"479\":3}}],[\"insecure\",{\"1\":{\"2602\":1}}],[\"insensitive的不同\",{\"1\":{\"749\":1}}],[\"insensitive\",{\"1\":{\"739\":1,\"749\":1}}],[\"insertmany\",{\"1\":{\"3075\":1,\"3076\":1,\"3078\":1}}],[\"insertedid\",{\"1\":{\"3073\":1,\"3168\":1}}],[\"insertone\",{\"1\":{\"3073\":1,\"3168\":1}}],[\"insertbatch\",{\"1\":{\"2435\":1}}],[\"insert\",{\"0\":{\"455\":1},\"1\":{\"347\":1,\"360\":1,\"455\":2,\"1649\":1,\"2319\":1,\"2321\":1,\"2325\":1,\"2364\":1,\"2372\":1,\"2373\":1,\"2376\":1,\"2377\":1,\"2407\":1,\"2408\":2,\"2409\":1,\"2435\":2,\"2438\":1,\"2758\":1,\"2849\":1,\"3071\":1}}],[\"initiate\",{\"1\":{\"3149\":1,\"3150\":1}}],[\"initialsize\",{\"1\":{\"2426\":1}}],[\"initialsize=10\",{\"1\":{\"2425\":1}}],[\"initialize\",{\"0\":{\"2028\":1}}],[\"initializr的方式创建工程\",{\"1\":{\"304\":1}}],[\"initializr\",{\"0\":{\"71\":1},\"1\":{\"70\":1,\"71\":1}}],[\"initial\",{\"1\":{\"1680\":1}}],[\"init\",{\"0\":{\"2552\":1},\"1\":{\"2551\":1,\"2552\":3,\"2556\":2,\"2697\":1}}],[\"initargs\",{\"1\":{\"629\":1}}],[\"ini\",{\"1\":{\"277\":1}}],[\"inf表示\",{\"1\":{\"2693\":1}}],[\"inf目录下含有一个web\",{\"1\":{\"2748\":1}}],[\"inf目录下的资源访问\",{\"1\":{\"2694\":1}}],[\"inf目录也在web目录下\",{\"1\":{\"2693\":1}}],[\"inf目录\",{\"1\":{\"2693\":1,\"2748\":1}}],[\"inf所在的目录为webapp\",{\"1\":{\"2495\":1}}],[\"inf下的lib目录下\",{\"1\":{\"2479\":1,\"2748\":1}}],[\"inf下的classes目录下\",{\"1\":{\"2479\":1}}],[\"infor\",{\"1\":{\"3243\":1}}],[\"info为\",{\"1\":{\"3222\":1,\"3224\":1,\"3225\":1}}],[\"infomessage\",{\"1\":{\"3156\":1,\"3159\":1,\"3160\":1}}],[\"info2\",{\"1\":{\"3150\":1}}],[\"info\",{\"1\":{\"242\":2,\"244\":2,\"246\":1,\"262\":14,\"263\":2,\"288\":2,\"393\":1,\"1120\":1,\"1278\":2,\"1382\":1,\"1383\":1,\"2048\":1,\"2297\":4,\"3204\":1}}],[\"inf\",{\"1\":{\"149\":2,\"198\":2,\"199\":1,\"200\":4,\"2465\":1,\"2474\":1,\"2475\":1,\"2495\":1,\"2693\":1,\"2694\":2,\"2733\":1}}],[\"into\",{\"1\":{\"2319\":1,\"2321\":1,\"2325\":1,\"2364\":1,\"2372\":1,\"2373\":1,\"2376\":1,\"2377\":1,\"2408\":1,\"2438\":1}}],[\"intlist\",{\"1\":{\"2239\":2,\"2240\":2}}],[\"intstream\",{\"1\":{\"2198\":1,\"2199\":1,\"2217\":1}}],[\"ints1\",{\"1\":{\"423\":2}}],[\"int示例\",{\"1\":{\"1192\":1}}],[\"int类型倒序\",{\"1\":{\"645\":1}}],[\"int类型直接用也是很精准的\",{\"1\":{\"530\":1}}],[\"intval\",{\"1\":{\"530\":1}}],[\"intvalue\",{\"1\":{\"524\":1,\"1194\":1}}],[\"internet上的主机有两种方式表示地址\",{\"1\":{\"1941\":1}}],[\"internet\",{\"1\":{\"1923\":1,\"1931\":1,\"1942\":1,\"1955\":1,\"1988\":2}}],[\"interger\",{\"1\":{\"1618\":1}}],[\"interruptedexception\",{\"1\":{\"1481\":2,\"1547\":2,\"1556\":1,\"1562\":1}}],[\"interceptor\",{\"1\":{\"350\":3}}],[\"interface关键字声明\",{\"1\":{\"1395\":1}}],[\"interface是注解的关键字与class平级\",{\"1\":{\"1395\":1}}],[\"interfaces1\",{\"1\":{\"2054\":2}}],[\"interfaces\",{\"1\":{\"595\":2,\"2054\":2,\"2090\":1}}],[\"interface\",{\"0\":{\"1253\":1,\"1395\":1},\"1\":{\"274\":1,\"283\":1,\"346\":1,\"359\":1,\"361\":1,\"495\":2,\"504\":2,\"595\":2,\"653\":1,\"654\":1,\"672\":1,\"673\":1,\"693\":1,\"694\":1,\"705\":1,\"706\":1,\"771\":2,\"827\":1,\"1109\":1,\"1218\":1,\"1219\":1,\"1259\":2,\"1264\":1,\"1267\":1,\"1295\":1,\"1382\":1,\"1392\":1,\"1393\":1,\"1395\":1,\"1404\":1,\"1409\":1,\"1412\":1,\"1415\":1,\"1416\":1,\"1419\":1,\"1425\":1,\"1426\":1,\"1427\":1,\"1432\":1,\"1715\":1,\"1992\":1,\"2016\":3,\"2079\":1,\"2140\":1,\"2407\":1,\"2551\":1,\"2572\":1}}],[\"intellijidea2021\",{\"1\":{\"2507\":1}}],[\"intellij\",{\"1\":{\"302\":1}}],[\"integer中的int\",{\"1\":{\"2162\":1}}],[\"integer>>\",{\"1\":{\"1710\":2}}],[\"integer>\",{\"1\":{\"1710\":2}}],[\"integer类作为int的包装类\",{\"1\":{\"529\":1}}],[\"integer的compareto内置实现源码\",{\"1\":{\"498\":1}}],[\"integer\",{\"1\":{\"273\":1,\"274\":1,\"343\":1,\"359\":2,\"360\":1,\"364\":2,\"371\":2,\"423\":2,\"498\":1,\"523\":1,\"524\":1,\"525\":1,\"527\":5,\"528\":1,\"645\":3,\"677\":1,\"678\":1,\"686\":1,\"687\":1,\"887\":1,\"1090\":1,\"1182\":5,\"1184\":1,\"1192\":6,\"1194\":2,\"1195\":1,\"1198\":1,\"1312\":2,\"1332\":1,\"1339\":1,\"1657\":1,\"1658\":1,\"1688\":1,\"1707\":1,\"1709\":3,\"1710\":1,\"2114\":1,\"2129\":2,\"2161\":1,\"2162\":1,\"2207\":1,\"2227\":1,\"2239\":2,\"2240\":1,\"2314\":1,\"2781\":1,\"2981\":1,\"3033\":1}}],[\"int\",{\"0\":{\"644\":1},\"1\":{\"123\":1,\"164\":1,\"176\":1,\"342\":1,\"359\":2,\"360\":4,\"364\":2,\"367\":1,\"371\":3,\"375\":1,\"376\":2,\"377\":3,\"378\":2,\"379\":3,\"380\":1,\"381\":1,\"382\":1,\"383\":1,\"384\":2,\"385\":1,\"403\":1,\"407\":1,\"408\":2,\"409\":2,\"412\":1,\"414\":1,\"421\":2,\"423\":3,\"424\":1,\"434\":1,\"441\":1,\"448\":2,\"451\":1,\"452\":2,\"453\":2,\"454\":2,\"455\":1,\"470\":14,\"471\":8,\"495\":1,\"498\":9,\"501\":3,\"502\":1,\"504\":1,\"508\":1,\"509\":1,\"512\":4,\"513\":3,\"514\":2,\"515\":2,\"519\":1,\"524\":2,\"525\":1,\"527\":1,\"528\":1,\"534\":3,\"535\":3,\"537\":2,\"565\":4,\"566\":7,\"570\":6,\"576\":8,\"577\":6,\"611\":2,\"613\":2,\"614\":1,\"616\":2,\"621\":2,\"626\":1,\"629\":1,\"634\":1,\"640\":9,\"641\":1,\"642\":1,\"644\":4,\"645\":1,\"646\":8,\"647\":3,\"648\":4,\"650\":4,\"659\":2,\"684\":3,\"685\":2,\"688\":2,\"697\":1,\"698\":1,\"699\":1,\"700\":2,\"701\":2,\"702\":1,\"703\":1,\"704\":2,\"718\":2,\"744\":1,\"748\":1,\"749\":1,\"755\":2,\"761\":9,\"810\":2,\"821\":1,\"822\":1,\"823\":1,\"827\":1,\"841\":1,\"842\":1,\"850\":1,\"864\":2,\"866\":2,\"869\":3,\"886\":1,\"887\":1,\"891\":3,\"893\":4,\"895\":2,\"896\":1,\"897\":1,\"901\":1,\"913\":4,\"914\":2,\"927\":1,\"933\":3,\"936\":1,\"937\":1,\"938\":3,\"941\":3,\"950\":2,\"954\":2,\"955\":2,\"956\":4,\"966\":2,\"968\":2,\"971\":6,\"972\":1,\"974\":2,\"984\":5,\"985\":2,\"986\":2,\"988\":3,\"989\":4,\"990\":6,\"992\":2,\"997\":2,\"998\":4,\"1010\":1,\"1018\":2,\"1019\":1,\"1025\":1,\"1034\":1,\"1035\":4,\"1039\":1,\"1044\":5,\"1045\":3,\"1047\":1,\"1048\":1,\"1054\":1,\"1056\":1,\"1068\":2,\"1071\":2,\"1082\":3,\"1104\":2,\"1105\":1,\"1106\":1,\"1120\":3,\"1128\":7,\"1133\":1,\"1160\":2,\"1178\":1,\"1192\":1,\"1194\":2,\"1195\":2,\"1197\":1,\"1198\":2,\"1210\":2,\"1259\":2,\"1278\":1,\"1286\":3,\"1298\":1,\"1307\":2,\"1327\":1,\"1329\":2,\"1332\":1,\"1333\":1,\"1334\":2,\"1335\":1,\"1339\":1,\"1343\":3,\"1344\":1,\"1352\":1,\"1361\":2,\"1404\":1,\"1423\":2,\"1432\":2,\"1472\":2,\"1481\":2,\"1487\":1,\"1489\":3,\"1492\":1,\"1509\":1,\"1512\":1,\"1515\":1,\"1520\":1,\"1536\":1,\"1556\":1,\"1562\":3,\"1569\":1,\"1573\":1,\"1596\":1,\"1604\":3,\"1606\":2,\"1607\":1,\"1620\":1,\"1657\":2,\"1658\":1,\"1688\":1,\"1707\":2,\"1711\":1,\"1719\":2,\"1801\":1,\"1804\":1,\"1805\":2,\"1808\":1,\"1817\":1,\"1823\":1,\"1828\":2,\"1829\":1,\"1830\":2,\"1831\":2,\"1836\":1,\"1853\":1,\"1858\":1,\"1873\":1,\"1876\":1,\"1879\":1,\"1888\":1,\"1918\":2,\"1948\":1,\"1964\":1,\"1965\":1,\"1966\":2,\"1971\":2,\"1973\":1,\"1975\":1,\"1977\":1,\"1985\":4,\"1986\":5,\"1990\":1,\"1994\":1,\"1996\":1,\"2004\":1,\"2007\":2,\"2009\":1,\"2042\":1,\"2044\":2,\"2045\":4,\"2048\":5,\"2129\":3,\"2198\":1,\"2199\":1,\"2209\":2,\"2214\":2,\"2221\":3,\"2314\":1,\"2322\":1,\"2333\":1,\"2340\":2,\"2343\":1,\"2345\":6,\"2349\":1,\"2351\":2,\"2352\":3,\"2355\":3,\"2365\":2,\"2371\":1,\"2372\":1,\"2373\":1,\"2376\":1,\"2377\":1,\"2386\":1,\"2390\":1,\"2405\":9,\"2407\":2,\"2408\":2,\"2435\":2,\"2438\":1,\"2439\":1,\"2442\":1,\"2572\":1,\"2635\":1,\"2646\":1,\"2805\":1}}],[\"introduction\",{\"1\":{\"85\":2}}],[\"ignored\",{\"1\":{\"79\":1}}],[\"ioutils\",{\"1\":{\"2647\":1}}],[\"io是面向流的\",{\"1\":{\"1913\":1}}],[\"io包下\",{\"1\":{\"1880\":1}}],[\"io包下提供了各种\",{\"1\":{\"1773\":1}}],[\"io流体系\",{\"0\":{\"1777\":1}}],[\"io流介绍\",{\"0\":{\"1772\":1}}],[\"io原理\",{\"0\":{\"1774\":1}}],[\"io简介\",{\"0\":{\"1773\":1}}],[\"ioexception异常\",{\"1\":{\"565\":1,\"566\":1,\"576\":1,\"1813\":1,\"1814\":1}}],[\"ioexception\",{\"0\":{\"1335\":1},\"1\":{\"371\":4,\"555\":2,\"571\":2,\"579\":3,\"581\":1,\"1323\":1,\"1339\":1,\"1344\":2,\"1352\":3,\"1801\":1,\"1802\":1,\"1804\":2,\"1805\":2,\"1816\":1,\"1817\":3,\"1823\":3,\"1834\":2,\"1836\":3,\"1870\":2,\"1964\":1,\"1965\":1,\"1966\":1,\"1971\":2,\"1972\":1,\"1975\":1,\"1977\":1,\"1994\":3,\"2531\":1,\"2551\":1,\"2553\":1,\"2564\":2,\"2566\":1,\"2598\":2,\"2601\":1,\"2602\":1,\"2610\":1,\"2614\":2,\"2624\":2,\"2625\":2,\"2640\":1,\"2655\":2,\"2661\":1,\"2662\":1,\"2697\":2}}],[\"ioc\",{\"1\":{\"361\":1}}],[\"ioc自动装载\",{\"1\":{\"181\":1}}],[\"io\",{\"0\":{\"563\":1},\"1\":{\"81\":1,\"565\":1,\"566\":1,\"571\":1,\"584\":1,\"595\":1,\"746\":1,\"1090\":1,\"1339\":4,\"1760\":1,\"1789\":2,\"1800\":1,\"1801\":1,\"1802\":1,\"1812\":1,\"1813\":1,\"1814\":1,\"1913\":3,\"1916\":1,\"1990\":1,\"2647\":1,\"2697\":1}}],[\"io如果网络不通畅\",{\"1\":{\"73\":1}}],[\"io类\",{\"1\":{\"33\":1}}],[\"数\",{\"1\":{\"3173\":1}}],[\"数之间用冒号\",{\"1\":{\"1933\":1}}],[\"数字越大越好\",{\"1\":{\"3040\":1}}],[\"数字越小优先级越高\",{\"1\":{\"2546\":1}}],[\"数字就这一种类型\",{\"1\":{\"3034\":1}}],[\"数字就代表该部分日志占多少位\",{\"1\":{\"253\":1}}],[\"数字类型\",{\"1\":{\"2963\":1}}],[\"数字不可以开头\",{\"1\":{\"834\":1}}],[\"数值格式异常\",{\"0\":{\"1332\":1}}],[\"数值常量的默认数据类型\",{\"0\":{\"867\":1}}],[\"数值型\",{\"1\":{\"827\":1}}],[\"数值类型对应的包装类以及biginteger\",{\"1\":{\"498\":1}}],[\"数学公式\",{\"0\":{\"521\":1}}],[\"数学与数值\",{\"0\":{\"510\":1},\"1\":{\"33\":1}}],[\"数量和类型\",{\"1\":{\"2137\":1}}],[\"数量\",{\"1\":{\"383\":1,\"385\":1}}],[\"数据损坏的修复\",{\"0\":{\"3242\":1}}],[\"数据新的节点获胜\",{\"1\":{\"3172\":1}}],[\"数据也插入成功\",{\"1\":{\"3168\":1}}],[\"数据也还是插入成功了\",{\"1\":{\"2988\":1}}],[\"数据读写\",{\"0\":{\"3167\":1}}],[\"数据读入\",{\"0\":{\"1801\":1}}],[\"数据目录\",{\"1\":{\"3140\":1}}],[\"数据冗余备份节点\",{\"1\":{\"3130\":1}}],[\"数据操作的主要连接点\",{\"1\":{\"3130\":1}}],[\"数据存储目录\",{\"1\":{\"3047\":1}}],[\"数据存储\",{\"1\":{\"3036\":1}}],[\"数据在mongodb中以bson\",{\"1\":{\"3032\":1}}],[\"数据在两个socket间通过io传输\",{\"1\":{\"1961\":1}}],[\"数据字段\",{\"1\":{\"3031\":1}}],[\"数据记录行\",{\"1\":{\"3031\":1}}],[\"数据模型无法确定\",{\"1\":{\"3028\":1}}],[\"数据对象\",{\"0\":{\"2981\":1}}],[\"数据对象封装\",{\"1\":{\"1290\":1}}],[\"数据必须进行完全匹配\",{\"1\":{\"2963\":1}}],[\"数据通过json格式的请求体发送\",{\"1\":{\"2899\":1}}],[\"数据格式\",{\"0\":{\"2863\":1}}],[\"数据格式与索引\",{\"0\":{\"2862\":1}}],[\"数据大小\",{\"1\":{\"2829\":1}}],[\"数据访问层\",{\"1\":{\"2758\":4,\"2760\":1,\"2761\":1,\"2763\":1,\"2765\":1}}],[\"数据是存储在request对象\",{\"1\":{\"2654\":1}}],[\"数据源无需创建多个\",{\"1\":{\"2421\":1}}],[\"数据源和数据库连接不同\",{\"1\":{\"2421\":1}}],[\"数据源中选择目标数据表\",{\"1\":{\"312\":1}}],[\"数据一旦提交\",{\"1\":{\"2383\":1}}],[\"数据表结构如下\",{\"1\":{\"2371\":1}}],[\"数据表中\",{\"1\":{\"2354\":1}}],[\"数据类的属性名\",{\"1\":{\"2354\":1}}],[\"数据类型简介\",{\"0\":{\"2865\":1}}],[\"数据类型是根据接口的规范进行推断的\",{\"1\":{\"2124\":1}}],[\"数据类型是类\",{\"1\":{\"1042\":1}}],[\"数据类型必须兼容\",{\"1\":{\"1178\":1}}],[\"数据类型2\",{\"1\":{\"1029\":1}}],[\"数据类型1\",{\"1\":{\"1029\":1}}],[\"数据类型不改变\",{\"0\":{\"897\":1}}],[\"数据类型不一致\",{\"1\":{\"501\":1}}],[\"数据类型\",{\"1\":{\"501\":1,\"821\":1,\"823\":1,\"968\":2,\"980\":1,\"995\":1,\"1022\":2,\"1024\":1,\"1698\":1,\"2045\":2,\"2343\":1,\"3034\":1}}],[\"数据持久化意味着将内存中的数据保存到硬盘上加以\",{\"1\":{\"2277\":1}}],[\"数据持久化\",{\"0\":{\"2277\":1}}],[\"数据报包对象的\",{\"1\":{\"1985\":1}}],[\"数据报包也包含发送方的\",{\"1\":{\"1985\":1}}],[\"数据报套接字\",{\"1\":{\"1962\":1}}],[\"数据信息等资源\",{\"1\":{\"1924\":1}}],[\"数据流大\",{\"1\":{\"3027\":1}}],[\"数据流的类\",{\"0\":{\"1875\":1}}],[\"数据流\",{\"0\":{\"1874\":1}}],[\"数据按块读入缓冲区\",{\"1\":{\"1826\":1}}],[\"数据写出\",{\"0\":{\"1813\":1}}],[\"数据单位不同\",{\"1\":{\"1775\":1}}],[\"数据输出到磁盘\",{\"1\":{\"1774\":1}}],[\"数据的读入和写出操作\",{\"1\":{\"1817\":1}}],[\"数据的不可重复性\",{\"1\":{\"1641\":1}}],[\"数据的添加过程与底层结构\",{\"0\":{\"1641\":1}}],[\"数据的添加\",{\"1\":{\"1623\":1}}],[\"数据添加时要保证\",{\"1\":{\"1641\":1}}],[\"数据结构\",{\"0\":{\"3032\":1},\"1\":{\"1635\":1,\"1638\":1,\"1639\":1,\"1710\":1}}],[\"数据结构与算法>递归\",{\"1\":{\"1035\":1}}],[\"数据更新不及时\",{\"1\":{\"1505\":1}}],[\"数据为空\",{\"1\":{\"1316\":1}}],[\"数据处理\",{\"1\":{\"1289\":1}}],[\"数据\",{\"0\":{\"1448\":1,\"1456\":1},\"1\":{\"1029\":1,\"1030\":1,\"1452\":1,\"2772\":1}}],[\"数据直接写入指定的文件名创建的文件中\",{\"1\":{\"574\":1}}],[\"数据会写到这个文件对象里\",{\"1\":{\"574\":1}}],[\"数据库管理角色\",{\"1\":{\"3189\":1}}],[\"数据库用户角色\",{\"1\":{\"3189\":1}}],[\"数据库默认只存在与内存中\",{\"1\":{\"3064\":1}}],[\"数据库删除\",{\"0\":{\"3063\":1}}],[\"数据库中创建的角色可以继承在其它任意数据库中角色的权限\",{\"1\":{\"3184\":1}}],[\"数据库中\",{\"1\":{\"3062\":1}}],[\"数据库中是用下划线分隔单词的\",{\"1\":{\"2354\":1}}],[\"数据库名规范\",{\"1\":{\"3061\":1}}],[\"数据库名称\",{\"1\":{\"2294\":1,\"3061\":1}}],[\"数据库不存在就是创建\",{\"1\":{\"3061\":1}}],[\"数据库存在就是选择\",{\"1\":{\"3061\":1}}],[\"数据库存取技术可分为如下几类\",{\"1\":{\"2278\":1}}],[\"数据库操作\",{\"0\":{\"3059\":1}}],[\"数据库操作类\",{\"1\":{\"1290\":1}}],[\"数据库监控\",{\"1\":{\"3057\":1}}],[\"数据库列表\",{\"1\":{\"3057\":1}}],[\"数据库表\",{\"1\":{\"3031\":1}}],[\"数据库的集合system\",{\"1\":{\"3198\":1}}],[\"数据库的状态\",{\"0\":{\"3064\":1}}],[\"数据库的连接资源并没有得到很好的重复利用\",{\"1\":{\"2414\":1}}],[\"数据库的性能会下降\",{\"1\":{\"2360\":1}}],[\"数据库就会自动提交\",{\"1\":{\"2377\":1}}],[\"数据库驱动来获取\",{\"1\":{\"2414\":1}}],[\"数据库驱动\",{\"1\":{\"2292\":1}}],[\"数据库已经对数据进行处理\",{\"1\":{\"2189\":1}}],[\"数据库\",{\"1\":{\"1290\":1,\"3031\":1,\"3060\":1,\"3184\":1}}],[\"数据库访问和其他任何可以用java代码创造的对象进行打包\",{\"1\":{\"1284\":1}}],[\"数据库对象不止一种\",{\"1\":{\"1153\":1}}],[\"数据库连接池在初始化过程中\",{\"1\":{\"2419\":1}}],[\"数据库连接池在初始化时将创建一定数量的数据库连接放到连接池中\",{\"1\":{\"2417\":1}}],[\"数据库连接池工作原理\",{\"0\":{\"2418\":1}}],[\"数据库连接池负责分配\",{\"1\":{\"2416\":1}}],[\"数据库连接池的优点\",{\"0\":{\"2419\":1}}],[\"数据库连接池的基本思想\",{\"0\":{\"2416\":1}}],[\"数据库连接池的设计一般也是采用单例模式\",{\"1\":{\"1243\":1}}],[\"数据库连接池技术介绍\",{\"0\":{\"2415\":1}}],[\"数据库连接池\",{\"0\":{\"2410\":1}}],[\"数据库连接资源和文件流资源\",{\"1\":{\"2364\":1}}],[\"数据库连接对象\",{\"1\":{\"2319\":1}}],[\"数据库连接被用于向数据库服务器发送命令和\",{\"1\":{\"2307\":1}}],[\"数据库连接的三个要素\",{\"1\":{\"2301\":1}}],[\"数据库连接的配置\",{\"1\":{\"1690\":1}}],[\"数据库连接要素\",{\"0\":{\"2292\":1}}],[\"数据库连接\",{\"1\":{\"1153\":1}}],[\"数据库设计\",{\"0\":{\"374\":1}}],[\"数据库也创建好了\",{\"1\":{\"310\":1}}],[\"数据层\",{\"1\":{\"398\":1}}],[\"数据层测试\",{\"0\":{\"186\":1}}],[\"数据层技术\",{\"1\":{\"29\":1}}],[\"数据校验\",{\"0\":{\"173\":1}}],[\"数组等\",{\"1\":{\"2190\":1}}],[\"数组引用\",{\"0\":{\"2181\":1}}],[\"数组+链表+红黑树\",{\"1\":{\"1664\":1,\"1678\":1}}],[\"数组+链表\",{\"1\":{\"1635\":1,\"1638\":1,\"1664\":1,\"1678\":1}}],[\"数组elementdata\",{\"1\":{\"1617\":1}}],[\"数组对象\",{\"1\":{\"1604\":2}}],[\"数组和集合都是容器\",{\"1\":{\"1576\":1}}],[\"数组存储数据的特点\",{\"1\":{\"1574\":1}}],[\"数组没有现成的属性或方法可用\",{\"1\":{\"1574\":1}}],[\"数组在储存数据方面的弊端\",{\"0\":{\"1574\":1}}],[\"数组在java内存储存方面的特点\",{\"0\":{\"1573\":1}}],[\"数组一旦定义好\",{\"1\":{\"1573\":1}}],[\"数组一旦初始化完成\",{\"1\":{\"969\":1}}],[\"数组都是对多个数据进行存储操作的结构\",{\"1\":{\"1572\":1}}],[\"数组下标越界等\",{\"1\":{\"1323\":1}}],[\"数组角标越界\",{\"0\":{\"1329\":1},\"1\":{\"1313\":1}}],[\"数组可以是任何类型\",{\"1\":{\"1018\":1}}],[\"数组被赋值为null\",{\"1\":{\"998\":1}}],[\"数组标识符指向的内存没了\",{\"1\":{\"998\":1}}],[\"数组索引越界\",{\"0\":{\"997\":1}}],[\"数组赋值\",{\"0\":{\"987\":1}}],[\"数组长度\",{\"1\":{\"980\":1}}],[\"数组删除和修改的过程\",{\"1\":{\"979\":1}}],[\"数组储存的过程\",{\"1\":{\"979\":1}}],[\"数组初始化完成后\",{\"1\":{\"973\":1}}],[\"数组间的赋值与复制\",{\"0\":{\"964\":1}}],[\"数组分配的内存空间是连续的\",{\"1\":{\"963\":1}}],[\"数组本身是引用数据类型\",{\"1\":{\"961\":1}}],[\"数组元素的类型\",{\"1\":{\"1604\":2}}],[\"数组元素的默认初始化值\",{\"0\":{\"975\":1,\"993\":1}}],[\"数组元素的个数\",{\"1\":{\"960\":1}}],[\"数组元素下标从0开始\",{\"1\":{\"972\":1}}],[\"数组元素下标可以是整型常量或整型表达式\",{\"1\":{\"972\":1}}],[\"数组元素下标\",{\"1\":{\"972\":1}}],[\"数组元素\",{\"1\":{\"960\":1}}],[\"数组内部元素的变量类型\",{\"1\":{\"960\":1}}],[\"数组的弊端\",{\"1\":{\"1575\":1}}],[\"数组的中的元素具有相同的数据类型\",{\"1\":{\"980\":1}}],[\"数组的值\",{\"1\":{\"978\":1,\"979\":1}}],[\"数组的内存结构\",{\"0\":{\"978\":1}}],[\"数组的初始化和数组元素的赋值操作同时进行\",{\"1\":{\"971\":1}}],[\"数组的分类\",{\"0\":{\"962\":1}}],[\"数组的特点\",{\"0\":{\"961\":1}}],[\"数组的长度和内层数组的长度都确定了\",{\"1\":{\"985\":1}}],[\"数组的长度是固定的\",{\"1\":{\"980\":1}}],[\"数组的长度一旦确定\",{\"1\":{\"961\":1}}],[\"数组的长度\",{\"0\":{\"991\":1},\"1\":{\"960\":1}}],[\"数组的下标\",{\"1\":{\"960\":1}}],[\"数组的变量类型\",{\"1\":{\"960\":1}}],[\"数组的元素会有一个默认值\",{\"1\":{\"975\":1}}],[\"数组的元素\",{\"0\":{\"960\":1}}],[\"数组的每个元素就是源字符串切后的小字符串\",{\"1\":{\"744\":1}}],[\"数组groups是组使用的存储\",{\"1\":{\"756\":1}}],[\"数组转换为list集合\",{\"1\":{\"649\":1}}],[\"数组转为string\",{\"1\":{\"426\":1}}],[\"数组是引用类型\",{\"1\":{\"642\":1,\"975\":1}}],[\"数组类型\",{\"1\":{\"2963\":1}}],[\"数组类\",{\"1\":{\"592\":1}}],[\"数组写入此输出流\",{\"1\":{\"577\":1}}],[\"数组中提供的方法非常有限\",{\"1\":{\"1574\":1}}],[\"数组中包含了20个元素\",{\"1\":{\"1018\":1}}],[\"数组中从偏移量\",{\"1\":{\"577\":1}}],[\"数组中\",{\"1\":{\"566\":1}}],[\"数组中的每个元素\",{\"1\":{\"960\":1}}],[\"数组中的\",{\"1\":{\"444\":1}}],[\"数组中数据\",{\"1\":{\"127\":1}}],[\"数组\",{\"0\":{\"957\":1},\"1\":{\"426\":1,\"498\":1,\"576\":1,\"827\":1,\"959\":1,\"1025\":1,\"1578\":1,\"1602\":1,\"1611\":1,\"2016\":1,\"2192\":1,\"2621\":1,\"2624\":1,\"2796\":1,\"3034\":1}}],[\"数组名\",{\"1\":{\"127\":2,\"968\":2,\"978\":1}}],[\"数组表示方式\",{\"0\":{\"124\":1}}],[\"学习成本极低\",{\"1\":{\"2431\":1}}],[\"学习项目\",{\"0\":{\"31\":1}}],[\"学这个之前了解下项目架构\",{\"1\":{\"11\":1}}],[\"bson和mongodb\",{\"1\":{\"3229\":1}}],[\"bson和json一样\",{\"1\":{\"3033\":1}}],[\"bson数据类型参考\",{\"0\":{\"3034\":1}}],[\"bson中\",{\"1\":{\"3033\":1}}],[\"bson采用了类似于\",{\"1\":{\"3033\":1}}],[\"bson\",{\"0\":{\"3033\":1},\"1\":{\"3033\":1,\"3069\":1}}],[\"bfilter\",{\"1\":{\"2706\":1}}],[\"b<g>\",{\"1\":{\"1738\":1}}],[\"b是a的一个子类型\",{\"1\":{\"1737\":1}}],[\"b却不会重新进行if判断\",{\"1\":{\"1506\":1}}],[\"b线程拿到的是老数据\",{\"1\":{\"1505\":1}}],[\"b也返回true\",{\"1\":{\"1168\":1}}],[\"b+4\",{\"1\":{\"869\":1}}],[\"bb\",{\"1\":{\"657\":2,\"658\":2,\"659\":1,\"660\":1,\"662\":1,\"663\":1,\"664\":2,\"665\":2,\"666\":1,\"998\":1,\"1262\":1,\"1683\":1,\"1745\":1,\"1747\":2,\"1748\":2,\"2215\":3,\"2387\":1}}],[\"browser\",{\"1\":{\"2502\":1}}],[\"broker<\",{\"1\":{\"95\":1}}],[\"break是终止\",{\"1\":{\"949\":1}}],[\"break语句用于终止某个语句块的执行\",{\"1\":{\"944\":1}}],[\"break关键字是可选的\",{\"1\":{\"927\":1}}],[\"break\",{\"0\":{\"944\":1},\"1\":{\"926\":3,\"927\":1,\"928\":1,\"938\":1,\"943\":1,\"946\":1,\"950\":2,\"956\":2,\"1430\":1,\"1492\":1,\"1509\":1,\"1512\":1,\"1536\":1,\"1556\":1,\"1870\":1,\"2004\":3,\"2048\":2,\"2799\":1}}],[\"br\",{\"1\":{\"581\":2,\"1834\":6,\"1870\":5,\"2610\":2}}],[\"bd\",{\"1\":{\"530\":1}}],[\"bd3\",{\"1\":{\"530\":1,\"531\":2,\"532\":2,\"533\":2}}],[\"bd2\",{\"1\":{\"530\":2,\"531\":2,\"532\":2,\"533\":2,\"534\":2,\"537\":2}}],[\"bd1\",{\"1\":{\"530\":2,\"531\":2,\"532\":2,\"533\":2,\"534\":2,\"535\":2,\"537\":2}}],[\"b3\",{\"1\":{\"527\":1,\"1192\":1}}],[\"b2\",{\"1\":{\"527\":1,\"859\":1,\"893\":2,\"1192\":1}}],[\"b1先取10\",{\"1\":{\"893\":1}}],[\"b1++\",{\"1\":{\"893\":1}}],[\"b1\",{\"1\":{\"527\":1,\"859\":1,\"864\":2,\"866\":2,\"867\":1,\"869\":1,\"893\":2,\"1192\":1,\"1198\":1,\"2230\":2}}],[\"beats\",{\"1\":{\"2842\":1}}],[\"beanlisthandler<>\",{\"1\":{\"2441\":1}}],[\"beanlisthandler<customer>\",{\"1\":{\"2441\":1}}],[\"beanlisthandler\",{\"1\":{\"2436\":1}}],[\"beanhandler<>\",{\"1\":{\"2440\":1}}],[\"beanhandler<customer>\",{\"1\":{\"2440\":1}}],[\"beanhandler\",{\"1\":{\"2436\":1}}],[\"beans\",{\"1\":{\"2413\":1}}],[\"bean正是编写这套胶水代码的惯用模式或约定\",{\"1\":{\"1283\":1}}],[\"bean注解\",{\"1\":{\"158\":1}}],[\"bean\",{\"1\":{\"104\":2,\"158\":1,\"160\":1,\"168\":1,\"350\":1,\"1290\":1}}],[\"bean加载方式\",{\"1\":{\"29\":1}}],[\"beiduofen\",{\"1\":{\"2409\":1}}],[\"belief\",{\"1\":{\"2096\":2,\"2097\":1}}],[\"be\",{\"1\":{\"811\":1}}],[\"beginindex\",{\"1\":{\"421\":2}}],[\"btree\",{\"1\":{\"375\":1,\"376\":1,\"377\":1,\"378\":1,\"379\":1,\"380\":1,\"381\":1,\"382\":1,\"383\":1,\"384\":1,\"385\":1}}],[\"birth\",{\"1\":{\"2319\":1,\"2321\":1,\"2325\":1,\"2349\":3,\"2351\":4,\"2353\":1,\"2364\":1,\"2365\":4,\"2408\":5,\"2438\":1,\"2440\":1,\"2441\":1,\"2442\":4,\"2443\":3}}],[\"bird\",{\"1\":{\"1208\":3,\"1209\":2}}],[\"bifunction<integer\",{\"1\":{\"2179\":1,\"2180\":1}}],[\"bis\",{\"1\":{\"1836\":6}}],[\"bit\",{\"1\":{\"2314\":1}}],[\"bit位向右移动\",{\"1\":{\"909\":1}}],[\"bit位向左移动\",{\"1\":{\"909\":1}}],[\"bitman\",{\"1\":{\"453\":2}}],[\"bi\",{\"1\":{\"529\":1}}],[\"bigdecimal继承了comparable接口\",{\"1\":{\"537\":1}}],[\"bigdecimal所创建的是对象\",{\"1\":{\"530\":1}}],[\"bigdecimal的特殊创建方法\",{\"1\":{\"530\":1}}],[\"bigdecimal类支持不可变的\",{\"1\":{\"530\":1}}],[\"bigdecimal类\",{\"1\":{\"530\":1}}],[\"bigdecimal\",{\"0\":{\"530\":1},\"1\":{\"498\":1,\"530\":15,\"531\":7,\"532\":7,\"533\":7,\"534\":11,\"535\":5,\"537\":5,\"640\":1,\"761\":1}}],[\"biginteger\",{\"0\":{\"529\":1},\"1\":{\"529\":5,\"530\":1,\"640\":1,\"761\":1}}],[\"bigint\",{\"1\":{\"375\":3,\"376\":3,\"377\":4,\"378\":4,\"379\":3,\"380\":4,\"381\":1,\"382\":4,\"383\":4,\"384\":3,\"385\":4,\"2314\":1}}],[\"binary\",{\"1\":{\"2314\":2,\"3032\":1,\"3033\":2,\"3156\":1,\"3159\":1,\"3160\":1,\"3186\":1,\"3187\":1}}],[\"binaryoperator\",{\"0\":{\"2240\":1},\"1\":{\"2239\":1,\"2240\":1}}],[\"binaryopearator\",{\"1\":{\"2239\":1}}],[\"binarysearch\",{\"0\":{\"646\":1},\"1\":{\"646\":3}}],[\"bindipall\",{\"1\":{\"3142\":1}}],[\"bindip绑定的端口\",{\"1\":{\"3048\":1,\"3142\":1}}],[\"bindip\",{\"1\":{\"3048\":1,\"3142\":1}}],[\"bind\",{\"1\":{\"2094\":1,\"2095\":1,\"2460\":1}}],[\"bin目录添加到path\",{\"1\":{\"781\":1}}],[\"bin\",{\"1\":{\"302\":1,\"375\":7,\"376\":2,\"377\":5,\"378\":5,\"379\":4,\"380\":3,\"381\":6,\"382\":3,\"383\":4,\"384\":7,\"385\":4,\"781\":1,\"1243\":1,\"2856\":1,\"2857\":1,\"3049\":1,\"3142\":1,\"3143\":1,\"3144\":1}}],[\"b\",{\"0\":{\"1274\":1,\"2102\":1,\"2109\":1,\"2131\":1,\"2146\":1,\"2186\":1,\"2240\":1,\"2245\":1,\"2261\":1},\"1\":{\"288\":2,\"424\":1,\"425\":2,\"444\":1,\"445\":2,\"513\":2,\"519\":1,\"520\":1,\"521\":1,\"546\":1,\"547\":1,\"557\":2,\"559\":2,\"566\":3,\"570\":1,\"576\":1,\"577\":12,\"578\":1,\"649\":1,\"651\":2,\"696\":2,\"697\":1,\"698\":2,\"699\":1,\"700\":3,\"701\":3,\"702\":3,\"703\":2,\"704\":3,\"711\":2,\"722\":2,\"739\":2,\"743\":1,\"753\":2,\"867\":4,\"869\":4,\"972\":1,\"1090\":1,\"1112\":2,\"1128\":1,\"1182\":5,\"1288\":1,\"1307\":2,\"1308\":2,\"1334\":2,\"1432\":1,\"1547\":1,\"1853\":1,\"1876\":1,\"1958\":3,\"2108\":1,\"2144\":1,\"2145\":1,\"2192\":1,\"2196\":1,\"2197\":1,\"2209\":1,\"2214\":1,\"2229\":2,\"2239\":1,\"2240\":1,\"2244\":2,\"2256\":2,\"2694\":2,\"3034\":1,\"3102\":1}}],[\"baidu\",{\"1\":{\"2809\":3}}],[\"balance\",{\"1\":{\"2387\":4,\"2391\":1}}],[\"bankcard\",{\"1\":{\"1368\":1}}],[\"banktemplatemethod\",{\"1\":{\"1252\":2}}],[\"bank2\",{\"1\":{\"1240\":2}}],[\"bank1\",{\"1\":{\"1240\":2}}],[\"bank\",{\"1\":{\"1240\":9}}],[\"backup\",{\"1\":{\"3189\":1,\"3190\":1}}],[\"back\",{\"1\":{\"1088\":1,\"1095\":2}}],[\"backend\",{\"1\":{\"392\":1,\"393\":2,\"394\":1}}],[\"basic\",{\"1\":{\"586\":1,\"587\":1,\"588\":2,\"589\":2,\"590\":2,\"592\":1,\"598\":1,\"600\":2,\"611\":1,\"1382\":1}}],[\"base64\",{\"1\":{\"3212\":1}}],[\"base=\",{\"1\":{\"2781\":3}}],[\"based\",{\"1\":{\"3182\":1}}],[\"basedao<customer>\",{\"1\":{\"2408\":1}}],[\"basedao<t>\",{\"1\":{\"2405\":1}}],[\"basedao的使用\",{\"0\":{\"2406\":1}}],[\"basedao设计\",{\"0\":{\"2398\":1}}],[\"basedao\",{\"0\":{\"2405\":1},\"1\":{\"2394\":1,\"2396\":1,\"2433\":1}}],[\"basedir\",{\"1\":{\"125\":2}}],[\"base\",{\"1\":{\"1291\":1,\"2507\":1}}],[\"basemapper<book>\",{\"1\":{\"283\":1,\"346\":1}}],[\"base类加载器执行\",{\"1\":{\"138\":1}}],[\"base类加载器\",{\"1\":{\"137\":1}}],[\"baby\",{\"1\":{\"452\":3}}],[\"bat即可启动\",{\"1\":{\"2455\":1}}],[\"batches\",{\"1\":{\"2920\":1}}],[\"batch\",{\"1\":{\"2435\":1}}],[\"batman\",{\"1\":{\"454\":1,\"455\":1,\"456\":1,\"574\":1,\"576\":1,\"579\":1,\"741\":3,\"742\":3,\"2121\":1}}],[\"bat8\",{\"1\":{\"432\":1}}],[\"bat\",{\"1\":{\"302\":1,\"431\":1,\"434\":1,\"744\":1,\"2121\":1,\"2456\":1,\"2857\":1}}],[\"baomidou<\",{\"1\":{\"280\":1,\"324\":1,\"336\":1,\"389\":1}}],[\"by和一系列聚合函数\",{\"1\":{\"2953\":1,\"3013\":1}}],[\"byte类型的二进制数据\",{\"1\":{\"640\":1,\"761\":1}}],[\"bytevalue\",{\"1\":{\"524\":1}}],[\"bytes\",{\"1\":{\"426\":5}}],[\"byte\",{\"0\":{\"568\":1},\"1\":{\"423\":3,\"426\":6,\"512\":2,\"519\":1,\"523\":1,\"524\":1,\"566\":3,\"568\":1,\"570\":1,\"577\":6,\"640\":1,\"761\":1,\"827\":1,\"841\":1,\"864\":1,\"866\":1,\"867\":3,\"869\":4,\"927\":1,\"1025\":1,\"1298\":1,\"1823\":2,\"1828\":1,\"1829\":1,\"1836\":2,\"1876\":2,\"1888\":2,\"1977\":2,\"1983\":1,\"1984\":2,\"1986\":3,\"2314\":2,\"2365\":2,\"2646\":2}}],[\"by\",{\"1\":{\"200\":2,\"1983\":3,\"1984\":3,\"2435\":1,\"2918\":1,\"2919\":1}}],[\"buckets\",{\"1\":{\"2957\":1}}],[\"bucket中红黑树存储的node小于该默认值\",{\"1\":{\"1680\":1}}],[\"bucket中链表长度大于该默认值\",{\"1\":{\"1680\":1}}],[\"bulkresponse\",{\"1\":{\"2986\":1,\"2987\":1}}],[\"bulkrequest\",{\"1\":{\"2986\":3,\"2987\":3}}],[\"bulk\",{\"1\":{\"2920\":1,\"2986\":1,\"2987\":1}}],[\"buff\",{\"1\":{\"2646\":3}}],[\"bufferedwriter\",{\"0\":{\"1835\":1},\"1\":{\"1831\":2}}],[\"bufferedoutputstream\",{\"1\":{\"1829\":3,\"1836\":2}}],[\"bufferedoutputstream才会把缓冲区中的数据一次性写到文件里\",{\"1\":{\"1826\":1}}],[\"bufferedinputstream\",{\"1\":{\"1828\":2,\"1836\":2}}],[\"bufferedinputstream会一次性从文件中读取8192个\",{\"1\":{\"1826\":1}}],[\"bufferedreader流就会自动关闭\",{\"1\":{\"2611\":1}}],[\"bufferedreader流是通过request对象来获取的\",{\"1\":{\"2611\":1}}],[\"bufferedreader的readline\",{\"1\":{\"1870\":1}}],[\"bufferedreader\",{\"0\":{\"1834\":1},\"1\":{\"581\":3,\"1830\":2,\"1834\":2,\"1870\":2,\"2607\":1,\"2610\":1,\"2614\":1}}],[\"buffer\",{\"1\":{\"1823\":3,\"1828\":2,\"1829\":1,\"1830\":1,\"1831\":1,\"1888\":3,\"2365\":3,\"3156\":1,\"3159\":1,\"3160\":1,\"3186\":1,\"3187\":1}}],[\"buf\",{\"1\":{\"1828\":1,\"1829\":1,\"1836\":4,\"1977\":3,\"1986\":4}}],[\"buildindexes\",{\"1\":{\"3153\":1}}],[\"builder\",{\"1\":{\"2972\":3,\"2975\":3,\"2977\":3,\"2978\":3,\"2980\":3,\"2983\":3,\"2984\":3,\"2986\":3,\"2987\":3,\"2991\":3,\"2992\":3,\"2993\":3,\"2997\":3,\"3000\":3,\"3003\":3,\"3006\":3,\"3008\":3,\"3010\":3,\"3015\":3,\"3019\":3}}],[\"build\",{\"1\":{\"200\":2,\"298\":2,\"301\":1,\"2744\":2,\"2858\":5}}],[\"build>\",{\"1\":{\"193\":1,\"336\":1}}],[\"buidl\",{\"1\":{\"142\":1}}],[\"busy\",{\"1\":{\"1368\":1}}],[\"bus\",{\"1\":{\"11\":1}}],[\"blob\",{\"1\":{\"2360\":1,\"2365\":1}}],[\"blob是一个二进制大型对象\",{\"1\":{\"2360\":1}}],[\"blob类型\",{\"0\":{\"2360\":1}}],[\"blob数据\",{\"1\":{\"2359\":1}}],[\"blocks\",{\"0\":{\"3244\":1}}],[\"blocking\",{\"1\":{\"1913\":1}}],[\"block\",{\"1\":{\"1278\":1}}],[\"blockquote>\",{\"1\":{\"811\":1}}],[\"blockquote><p>\",{\"1\":{\"811\":1}}],[\"blogapplication\",{\"1\":{\"183\":1,\"313\":1}}],[\"blogapplicationtests\",{\"1\":{\"181\":1,\"183\":1,\"275\":2,\"284\":1}}],[\"blog\",{\"1\":{\"105\":1,\"210\":1,\"249\":1,\"275\":1,\"313\":3,\"3194\":1,\"3197\":1,\"3198\":3,\"3201\":1,\"3222\":1,\"3236\":1,\"3237\":1}}],[\"blue\",{\"1\":{\"262\":2}}],[\"blueprint<\",{\"1\":{\"95\":1}}],[\"bound\",{\"1\":{\"2957\":1}}],[\"bonecp\",{\"1\":{\"2420\":1}}],[\"bos\",{\"1\":{\"1836\":5}}],[\"boy\",{\"1\":{\"1432\":4}}],[\"bob=bb\",{\"1\":{\"712\":2}}],[\"bob=b\",{\"1\":{\"711\":2,\"712\":1,\"713\":2,\"714\":1,\"715\":1,\"716\":1,\"717\":1,\"718\":1,\"719\":1,\"720\":2,\"721\":1,\"722\":1,\"723\":2}}],[\"bob\",{\"1\":{\"502\":3,\"503\":2,\"509\":2,\"711\":2,\"716\":1,\"721\":2}}],[\"boldmagenta\",{\"1\":{\"262\":1}}],[\"bolgapplication\",{\"1\":{\"74\":1}}],[\"boolquery\",{\"1\":{\"2996\":1,\"2997\":1}}],[\"boolquerybuilder对象\",{\"1\":{\"2996\":1,\"2997\":1}}],[\"boolquerybuilder\",{\"0\":{\"2996\":1},\"1\":{\"2996\":4,\"2997\":5}}],[\"bool\",{\"1\":{\"2069\":1,\"2935\":1}}],[\"boolean类的默认值是null\",{\"1\":{\"1193\":1}}],[\"boolean类型不与其他类型参与比较\",{\"1\":{\"1178\":1}}],[\"boolean类型不可以转换为其它的数据类型\",{\"1\":{\"869\":1}}],[\"boolean类型数据只允许取值true和false\",{\"1\":{\"858\":1}}],[\"boolean类型的字符串只有true\",{\"1\":{\"423\":1}}],[\"boolean构造器的值\",{\"1\":{\"1193\":1}}],[\"boolean转换的特殊性说明\",{\"0\":{\"1193\":1}}],[\"boolean示例\",{\"1\":{\"1192\":1}}],[\"boolean只能取true和false没法参加运算\",{\"1\":{\"862\":1}}],[\"boolean只能用true和false表示\",{\"1\":{\"860\":1}}],[\"boolean\",{\"0\":{\"857\":1},\"1\":{\"123\":1,\"359\":3,\"360\":3,\"364\":3,\"367\":1,\"370\":4,\"371\":2,\"404\":3,\"405\":1,\"411\":1,\"413\":1,\"414\":1,\"415\":1,\"423\":3,\"433\":1,\"498\":1,\"549\":2,\"550\":2,\"551\":2,\"552\":4,\"553\":2,\"555\":2,\"556\":2,\"557\":2,\"559\":2,\"562\":4,\"574\":2,\"575\":2,\"618\":1,\"640\":1,\"648\":2,\"657\":1,\"658\":1,\"661\":2,\"662\":2,\"663\":2,\"664\":2,\"665\":2,\"666\":2,\"667\":2,\"676\":2,\"690\":1,\"698\":3,\"702\":1,\"716\":3,\"717\":3,\"719\":3,\"720\":2,\"729\":1,\"739\":1,\"743\":2,\"750\":1,\"752\":3,\"761\":1,\"827\":1,\"858\":1,\"859\":2,\"956\":1,\"1022\":1,\"1025\":1,\"1180\":1,\"1192\":6,\"1198\":3,\"1298\":1,\"1404\":1,\"1533\":1,\"1876\":1,\"1879\":1,\"1918\":3,\"1920\":7,\"1948\":2,\"2069\":1,\"2144\":1,\"2229\":2,\"2230\":2,\"2231\":2,\"2256\":2,\"2314\":1,\"2323\":1,\"2342\":1,\"2380\":1,\"2434\":1,\"2975\":1,\"3033\":1,\"3081\":2}}],[\"book`\",{\"1\":{\"382\":1}}],[\"book>\",{\"1\":{\"360\":1,\"361\":1}}],[\"book\",{\"0\":{\"382\":1},\"1\":{\"273\":2,\"274\":2,\"343\":1,\"347\":15,\"356\":1,\"357\":2,\"359\":5,\"360\":17,\"364\":7,\"371\":12,\"374\":1,\"384\":1}}],[\"bookcontroller2\",{\"1\":{\"364\":1}}],[\"bookcontroller\",{\"1\":{\"242\":2,\"244\":1,\"263\":1,\"371\":1}}],[\"bookserviceimpl\",{\"0\":{\"360\":1},\"1\":{\"360\":1,\"361\":1}}],[\"bookservice\",{\"0\":{\"359\":1},\"1\":{\"359\":1,\"364\":7,\"371\":8}}],[\"books\",{\"1\":{\"242\":1,\"244\":1,\"263\":1,\"364\":1,\"371\":1}}],[\"bookdaotestcase\",{\"1\":{\"347\":1}}],[\"bookdao\",{\"1\":{\"181\":3,\"274\":2,\"275\":3,\"283\":1,\"284\":4,\"346\":1,\"347\":7,\"351\":1,\"352\":1,\"355\":1,\"356\":1,\"357\":1,\"360\":7,\"361\":2}}],[\"boot版本和需要直接安装的组件\",{\"1\":{\"305\":1}}],[\"boot内部使用logback作为日志实现的框架\",{\"1\":{\"260\":1}}],[\"bootintroduction1application\",{\"1\":{\"104\":3}}],[\"boot<\",{\"1\":{\"76\":1,\"93\":1,\"94\":1,\"95\":1,\"99\":3,\"110\":2,\"111\":1,\"141\":1,\"165\":1,\"179\":1,\"193\":1,\"270\":1,\"286\":1,\"316\":1,\"317\":1,\"318\":1,\"319\":1,\"326\":1,\"328\":1,\"332\":1,\"336\":7,\"389\":3,\"3234\":1}}],[\"boot\",{\"0\":{\"94\":1,\"95\":1,\"198\":1,\"199\":1,\"332\":1},\"1\":{\"72\":1,\"76\":2,\"85\":2,\"93\":1,\"94\":2,\"95\":1,\"96\":3,\"99\":4,\"109\":3,\"110\":4,\"111\":1,\"141\":1,\"165\":1,\"179\":2,\"193\":1,\"194\":1,\"195\":3,\"198\":2,\"200\":11,\"266\":1,\"270\":2,\"280\":2,\"286\":1,\"316\":3,\"317\":2,\"318\":2,\"319\":2,\"322\":1,\"324\":1,\"326\":1,\"328\":1,\"331\":1,\"332\":1,\"336\":10,\"389\":5,\"398\":1,\"3234\":1}}],[\"pbtqhy8etvs2b7eo\",{\"1\":{\"2858\":1}}],[\"pb\",{\"1\":{\"2843\":1,\"3028\":1}}],[\"pwd>\",{\"1\":{\"2771\":1}}],[\"pwd=12354\",{\"1\":{\"2610\":1}}],[\"pwd\",{\"1\":{\"2609\":1,\"3193\":1,\"3195\":1,\"3196\":1,\"3197\":1,\"3210\":1}}],[\"plaintext\",{\"1\":{\"2860\":1}}],[\"platform\",{\"1\":{\"2288\":1,\"2602\":1}}],[\"plugins\",{\"1\":{\"372\":1,\"2856\":1}}],[\"plugins>\",{\"1\":{\"76\":1,\"193\":1,\"336\":1}}],[\"plugin的jar包的manifeast\",{\"1\":{\"200\":1}}],[\"plugin\",{\"0\":{\"3250\":1},\"1\":{\"200\":2}}],[\"plugin插件的jar包\",{\"0\":{\"198\":1,\"199\":1}}],[\"plugin插件注释掉\",{\"1\":{\"195\":1}}],[\"plugin插件打包\",{\"1\":{\"195\":2}}],[\"plugin插件用于将当前程序打包成一个可以独立运行的程序包\",{\"1\":{\"194\":1}}],[\"plugin>\",{\"1\":{\"76\":1,\"193\":1,\"336\":1}}],[\"plugin<\",{\"1\":{\"76\":1,\"193\":1,\"336\":1}}],[\"plugin是没有指定version的\",{\"1\":{\"76\":1}}],[\"plus变成了minus\",{\"1\":{\"474\":1}}],[\"plusweeks\",{\"1\":{\"473\":1}}],[\"plusnanos\",{\"1\":{\"473\":1}}],[\"plusseconds\",{\"1\":{\"473\":1}}],[\"plusminutes\",{\"1\":{\"473\":1}}],[\"plusmonths\",{\"1\":{\"473\":1}}],[\"plushours\",{\"1\":{\"473\":1}}],[\"plusdays\",{\"1\":{\"473\":1}}],[\"plusyears\",{\"1\":{\"473\":1}}],[\"plusxxx\",{\"0\":{\"473\":1}}],[\"plus的常用设置\",{\"1\":{\"341\":1}}],[\"plus的mapper\",{\"1\":{\"313\":1}}],[\"plus包含了mybatis\",{\"1\":{\"324\":1}}],[\"plus逆向生成代码\",{\"1\":{\"310\":1}}],[\"plus依赖\",{\"0\":{\"280\":1}}],[\"plus\",{\"0\":{\"279\":1,\"324\":1},\"1\":{\"29\":1,\"280\":1,\"323\":1,\"324\":1,\"336\":5,\"340\":1,\"341\":1,\"348\":1,\"389\":1,\"390\":1,\"398\":1}}],[\"ppt这些不是文本文件\",{\"1\":{\"1797\":1}}],[\"ppt\",{\"1\":{\"1797\":1}}],[\"pcdata\",{\"1\":{\"2777\":3}}],[\"pclass\",{\"1\":{\"2009\":4,\"2010\":4,\"2037\":2}}],[\"pc\",{\"1\":{\"1439\":1,\"2858\":1}}],[\"p3\",{\"0\":{\"1303\":2}}],[\"p4里面没有加载子类的元素\",{\"1\":{\"1170\":1}}],[\"p4\",{\"1\":{\"1170\":2}}],[\"phrase时\",{\"1\":{\"2945\":1}}],[\"phrase关键字取代match关键字\",{\"1\":{\"2944\":1}}],[\"photo\",{\"1\":{\"2364\":1,\"2365\":4}}],[\"phone\",{\"1\":{\"1019\":5}}],[\"php\",{\"1\":{\"772\":1,\"1999\":1,\"2447\":1}}],[\"p2分别保持了资源r1\",{\"1\":{\"1545\":1}}],[\"p2改的值\",{\"1\":{\"1227\":1}}],[\"p2也能取到\",{\"1\":{\"1227\":1}}],[\"p2\",{\"0\":{\"1302\":1},\"1\":{\"885\":4,\"1014\":2,\"1227\":3}}],[\"pet\",{\"1\":{\"841\":1}}],[\"performance\",{\"1\":{\"3026\":1,\"3057\":1,\"3118\":1}}],[\"persistence\",{\"1\":{\"2277\":1}}],[\"person父类的public属性\",{\"1\":{\"2042\":1}}],[\"personclass\",{\"1\":{\"2041\":2,\"2043\":1,\"2045\":1}}],[\"person>\",{\"1\":{\"587\":1,\"593\":1,\"1753\":2,\"2019\":1}}],[\"person\",{\"0\":{\"1300\":2,\"1302\":2,\"1303\":1,\"2007\":1},\"1\":{\"501\":4,\"502\":4,\"503\":15,\"509\":4,\"586\":2,\"587\":5,\"588\":2,\"589\":2,\"590\":2,\"591\":3,\"592\":2,\"593\":1,\"595\":1,\"596\":1,\"597\":1,\"600\":3,\"601\":1,\"602\":4,\"604\":1,\"605\":1,\"606\":1,\"608\":1,\"609\":1,\"610\":1,\"611\":2,\"616\":4,\"617\":5,\"620\":1,\"626\":4,\"629\":3,\"662\":2,\"885\":4,\"1010\":1,\"1011\":3,\"1014\":3,\"1018\":2,\"1032\":3,\"1034\":3,\"1054\":3,\"1056\":3,\"1067\":2,\"1068\":4,\"1071\":5,\"1082\":3,\"1155\":2,\"1156\":1,\"1170\":2,\"1171\":2,\"1180\":2,\"1186\":1,\"1203\":3,\"1208\":5,\"1209\":1,\"1210\":1,\"1227\":5,\"1230\":1,\"1233\":2,\"1234\":1,\"1246\":1,\"1249\":3,\"1278\":1,\"1286\":2,\"1400\":1,\"1418\":1,\"1419\":1,\"1432\":7,\"1594\":1,\"1595\":1,\"1603\":1,\"1753\":2,\"1907\":1,\"1908\":2,\"1909\":4,\"2004\":1,\"2007\":4,\"2008\":2,\"2009\":2,\"2010\":3,\"2018\":2,\"2019\":3,\"2020\":2,\"2021\":2,\"2037\":4,\"2038\":4,\"2041\":1,\"2042\":1,\"2044\":3,\"2047\":1,\"2048\":1,\"2050\":1,\"2051\":1,\"2052\":1,\"2053\":1,\"2054\":1,\"2055\":1,\"2056\":1,\"2058\":3,\"2063\":4,\"2067\":3,\"3201\":1}}],[\"person类中的public属性\",{\"1\":{\"2042\":1}}],[\"person类中定义了welcome\",{\"1\":{\"1158\":1}}],[\"person类\",{\"1\":{\"500\":1,\"1432\":1,\"1753\":4}}],[\"per\",{\"1\":{\"2067\":2,\"2920\":1}}],[\"perl\",{\"1\":{\"736\":1,\"737\":1}}],[\"p>\",{\"1\":{\"811\":1,\"812\":1}}],[\"python\",{\"1\":{\"772\":1,\"1999\":1}}],[\"p12\",{\"1\":{\"2860\":1}}],[\"p1和p2是完全独立的\",{\"1\":{\"1302\":1}}],[\"p1指向了对象实体\",{\"1\":{\"1300\":1}}],[\"p1也受影响\",{\"1\":{\"1227\":1}}],[\"p1赋的值\",{\"1\":{\"1227\":1}}],[\"p1\",{\"0\":{\"1300\":1,\"1301\":2,\"1303\":1},\"1\":{\"602\":1,\"885\":4,\"1011\":5,\"1014\":3,\"1018\":3,\"1032\":2,\"1054\":2,\"1056\":4,\"1067\":1,\"1068\":1,\"1227\":3,\"1545\":1,\"1909\":2,\"2008\":4,\"2010\":4,\"2019\":2,\"2038\":1}}],[\"pingms\",{\"1\":{\"3159\":1,\"3160\":1}}],[\"pintln\",{\"1\":{\"1339\":1}}],[\"pi\",{\"1\":{\"517\":4}}],[\"pi圆周率\",{\"0\":{\"517\":1}}],[\"pidfilepath\",{\"1\":{\"3142\":1,\"3143\":1,\"3144\":1}}],[\"pid\",{\"1\":{\"202\":1,\"3142\":1,\"3143\":1,\"3144\":1}}],[\"put是幂等性的\",{\"1\":{\"2903\":1}}],[\"put操作是幂等性的\",{\"1\":{\"2886\":1}}],[\"put与post\",{\"0\":{\"2886\":1}}],[\"put方法是有泛型限制的\",{\"1\":{\"1710\":1}}],[\"putall\",{\"0\":{\"712\":1},\"1\":{\"712\":2}}],[\"putmapping\",{\"1\":{\"364\":1,\"371\":1}}],[\"put\",{\"0\":{\"711\":1},\"1\":{\"288\":1,\"711\":5,\"1674\":1,\"1683\":3,\"1687\":4,\"1710\":4,\"2563\":2,\"2883\":1,\"2963\":1}}],[\"public类可以在任意地方被访问\",{\"1\":{\"1062\":1}}],[\"public\",{\"0\":{\"1767\":1,\"1768\":1,\"1769\":1},\"1\":{\"85\":2,\"103\":2,\"104\":2,\"131\":1,\"149\":1,\"150\":1,\"153\":2,\"156\":1,\"158\":2,\"160\":1,\"163\":1,\"164\":1,\"167\":1,\"168\":1,\"171\":1,\"172\":1,\"175\":1,\"176\":1,\"213\":3,\"242\":2,\"244\":2,\"263\":2,\"273\":1,\"274\":2,\"283\":1,\"288\":3,\"289\":1,\"343\":1,\"346\":1,\"347\":1,\"350\":2,\"359\":1,\"360\":6,\"361\":2,\"364\":7,\"369\":2,\"370\":6,\"371\":7,\"393\":1,\"440\":2,\"466\":1,\"467\":1,\"468\":1,\"475\":1,\"480\":1,\"495\":2,\"498\":3,\"501\":3,\"504\":1,\"508\":1,\"509\":1,\"511\":1,\"517\":1,\"529\":1,\"530\":1,\"538\":4,\"564\":2,\"571\":1,\"572\":2,\"584\":1,\"600\":2,\"611\":1,\"613\":1,\"619\":1,\"621\":1,\"628\":1,\"632\":1,\"637\":1,\"641\":2,\"645\":1,\"651\":1,\"654\":1,\"673\":1,\"680\":1,\"684\":1,\"694\":1,\"706\":1,\"746\":1,\"755\":1,\"758\":1,\"790\":1,\"801\":1,\"802\":1,\"811\":1,\"812\":1,\"936\":1,\"938\":1,\"956\":1,\"1010\":2,\"1011\":2,\"1019\":7,\"1022\":2,\"1025\":1,\"1029\":1,\"1032\":3,\"1034\":3,\"1035\":1,\"1039\":2,\"1044\":3,\"1045\":1,\"1047\":1,\"1048\":1,\"1054\":2,\"1056\":4,\"1057\":1,\"1058\":1,\"1061\":1,\"1062\":1,\"1068\":2,\"1071\":4,\"1082\":3,\"1101\":1,\"1102\":1,\"1104\":1,\"1105\":1,\"1106\":1,\"1109\":1,\"1120\":3,\"1128\":3,\"1132\":1,\"1133\":1,\"1134\":1,\"1136\":1,\"1153\":3,\"1160\":4,\"1180\":1,\"1184\":1,\"1186\":1,\"1203\":2,\"1209\":1,\"1210\":3,\"1218\":3,\"1219\":5,\"1233\":2,\"1240\":1,\"1241\":1,\"1247\":1,\"1249\":5,\"1251\":2,\"1252\":5,\"1259\":4,\"1264\":7,\"1267\":3,\"1270\":1,\"1286\":4,\"1288\":1,\"1312\":2,\"1339\":2,\"1343\":1,\"1344\":1,\"1352\":4,\"1361\":3,\"1364\":3,\"1372\":1,\"1373\":8,\"1377\":1,\"1382\":4,\"1392\":2,\"1393\":1,\"1400\":2,\"1404\":1,\"1405\":1,\"1406\":1,\"1409\":1,\"1412\":1,\"1415\":1,\"1416\":1,\"1419\":1,\"1422\":2,\"1425\":1,\"1426\":1,\"1427\":1,\"1432\":5,\"1472\":3,\"1480\":4,\"1481\":3,\"1489\":3,\"1492\":3,\"1499\":1,\"1509\":3,\"1511\":1,\"1512\":3,\"1517\":1,\"1520\":4,\"1521\":3,\"1532\":1,\"1533\":1,\"1536\":3,\"1547\":4,\"1556\":3,\"1562\":3,\"1569\":3,\"1657\":1,\"1658\":1,\"1688\":1,\"1717\":2,\"1719\":3,\"1720\":1,\"1732\":1,\"1733\":1,\"1734\":1,\"1747\":1,\"1748\":1,\"1755\":1,\"1765\":1,\"1804\":1,\"1805\":1,\"1816\":1,\"1817\":1,\"1823\":1,\"1828\":1,\"1829\":2,\"1830\":2,\"1831\":2,\"1836\":1,\"1846\":1,\"1847\":1,\"1848\":1,\"1855\":1,\"1856\":1,\"1858\":1,\"1869\":2,\"1885\":2,\"1907\":2,\"1910\":1,\"1944\":1,\"1945\":1,\"1946\":1,\"1964\":1,\"1965\":1,\"1966\":9,\"1971\":2,\"1972\":1,\"1975\":1,\"1977\":1,\"1985\":9,\"1986\":6,\"1990\":5,\"1991\":6,\"1994\":7,\"2004\":2,\"2005\":1,\"2007\":6,\"2008\":1,\"2009\":1,\"2010\":1,\"2042\":2,\"2044\":1,\"2045\":1,\"2059\":1,\"2060\":1,\"2061\":1,\"2062\":1,\"2080\":2,\"2081\":1,\"2082\":2,\"2092\":1,\"2094\":1,\"2095\":2,\"2101\":3,\"2121\":1,\"2123\":1,\"2129\":1,\"2140\":1,\"2199\":3,\"2200\":1,\"2202\":1,\"2203\":1,\"2221\":4,\"2297\":1,\"2299\":1,\"2300\":1,\"2303\":1,\"2325\":1,\"2327\":1,\"2328\":1,\"2329\":1,\"2333\":1,\"2349\":1,\"2351\":3,\"2352\":1,\"2355\":1,\"2364\":1,\"2365\":1,\"2376\":1,\"2377\":1,\"2386\":1,\"2387\":1,\"2391\":1,\"2405\":5,\"2407\":1,\"2408\":8,\"2409\":8,\"2424\":1,\"2427\":1,\"2428\":1,\"2434\":7,\"2435\":5,\"2438\":1,\"2439\":1,\"2440\":1,\"2441\":1,\"2442\":2,\"2443\":1,\"2531\":2,\"2532\":1,\"2551\":1,\"2552\":1,\"2553\":1,\"2554\":1,\"2555\":1,\"2556\":3,\"2564\":1,\"2566\":2,\"2571\":1,\"2572\":1,\"2598\":1,\"2614\":1,\"2624\":1,\"2625\":1,\"2640\":1,\"2655\":2,\"2661\":1,\"2662\":1,\"2697\":4,\"2725\":3,\"2726\":1,\"2778\":1,\"2972\":2,\"2975\":2,\"2977\":2,\"2978\":2,\"2980\":2,\"2981\":1,\"2983\":2,\"2984\":2,\"2986\":2,\"2987\":2,\"2991\":2,\"2992\":2,\"2993\":2,\"2997\":2,\"3000\":2,\"3003\":2,\"3006\":2,\"3008\":2,\"3010\":2,\"3015\":2,\"3019\":2}}],[\"p\",{\"1\":{\"253\":1,\"739\":2,\"751\":2,\"752\":2,\"753\":2,\"1034\":3,\"1171\":1,\"1208\":2,\"1249\":2,\"1909\":2,\"1918\":1,\"1985\":2,\"2009\":3,\"2037\":3,\"2058\":3,\"2063\":3,\"2210\":1,\"2229\":1,\"2230\":1,\"2231\":1,\"3047\":2}}],[\"paid\",{\"1\":{\"1368\":1}}],[\"packet=16m\",{\"1\":{\"2362\":1}}],[\"pack\",{\"1\":{\"598\":2,\"2055\":2}}],[\"packaging>\",{\"1\":{\"95\":1,\"2494\":1}}],[\"packaging\",{\"1\":{\"71\":1}}],[\"package用来定义命名空间\",{\"1\":{\"1091\":1}}],[\"package语句作为java源文件的第一条语句\",{\"1\":{\"1088\":1}}],[\"package就是包的意思\",{\"1\":{\"1085\":1}}],[\"package是一样的\",{\"1\":{\"182\":1}}],[\"package\",{\"0\":{\"1085\":1},\"1\":{\"71\":1,\"190\":1,\"598\":3,\"1088\":3,\"1382\":1,\"1404\":1,\"1405\":2,\"1406\":1,\"1536\":1,\"2055\":1,\"2531\":1,\"2972\":1}}],[\"parallelstream\",{\"1\":{\"2197\":3}}],[\"paramenterindex\",{\"1\":{\"2322\":1}}],[\"parameterizedtype\",{\"1\":{\"2053\":2,\"2405\":2}}],[\"parameterized\",{\"1\":{\"1700\":1}}],[\"parameter\",{\"0\":{\"1422\":1},\"1\":{\"1405\":1,\"1412\":2,\"1413\":1,\"1421\":2,\"1427\":1}}],[\"parametertypes\",{\"1\":{\"602\":1,\"610\":1,\"611\":1,\"2038\":1,\"2048\":7,\"2064\":1,\"2065\":1}}],[\"paramtype\",{\"1\":{\"2053\":2,\"2405\":2}}],[\"param来解释泛型的类型\",{\"1\":{\"811\":1}}],[\"param\",{\"1\":{\"811\":2,\"812\":3}}],[\"params\",{\"1\":{\"624\":3,\"2092\":1,\"2435\":5,\"2614\":3}}],[\"parseobject\",{\"1\":{\"2839\":2}}],[\"parse方法\",{\"1\":{\"482\":1}}],[\"parse\",{\"0\":{\"482\":1},\"1\":{\"482\":1,\"485\":1,\"486\":1,\"489\":1,\"2322\":1,\"2325\":1}}],[\"parseboolean\",{\"1\":{\"423\":1,\"1198\":1}}],[\"parsebyte\",{\"1\":{\"423\":2}}],[\"parsedouble\",{\"1\":{\"423\":1,\"528\":1}}],[\"parsefloat\",{\"1\":{\"423\":1}}],[\"parselong\",{\"1\":{\"423\":1}}],[\"parseint\",{\"1\":{\"423\":2,\"528\":1,\"887\":1,\"1198\":1,\"1332\":1,\"1339\":1}}],[\"parsexxx\",{\"0\":{\"423\":1,\"528\":1},\"1\":{\"423\":1,\"528\":1}}],[\"parentpattern\",{\"1\":{\"755\":1}}],[\"parentpath\",{\"1\":{\"543\":2}}],[\"parent>\",{\"1\":{\"93\":1,\"94\":1}}],[\"parent\",{\"0\":{\"94\":1,\"1768\":1,\"1769\":1},\"1\":{\"93\":1,\"94\":1,\"96\":1,\"101\":1,\"538\":2,\"597\":2,\"1768\":1,\"1769\":1,\"3049\":1,\"3142\":1}}],[\"parent<\",{\"1\":{\"93\":1}}],[\"pagenum\",{\"1\":{\"2948\":1,\"3007\":1}}],[\"pagecontext域\",{\"1\":{\"2672\":2}}],[\"pagecontext\",{\"1\":{\"2672\":1}}],[\"page域对象\",{\"0\":{\"2672\":1}}],[\"pages\",{\"1\":{\"372\":1}}],[\"pagesize\",{\"1\":{\"359\":1,\"360\":4,\"364\":3,\"371\":4}}],[\"page\",{\"1\":{\"351\":3,\"352\":8,\"360\":8,\"371\":5}}],[\"paginationinnerinterceptor\",{\"1\":{\"350\":2}}],[\"path和main\",{\"1\":{\"2733\":1}}],[\"path等信息\",{\"1\":{\"2733\":1}}],[\"path不用定义\",{\"1\":{\"2469\":1}}],[\"path=\",{\"1\":{\"2468\":1}}],[\"path对应的文件\",{\"1\":{\"1920\":1}}],[\"paths类的方法\",{\"0\":{\"1919\":1}}],[\"paths则包含了两个返回path的静态工厂方法\",{\"1\":{\"1917\":1}}],[\"paths工具类\",{\"1\":{\"1917\":1}}],[\"paths和files工具类\",{\"0\":{\"1917\":1}}],[\"paths\",{\"1\":{\"1916\":2,\"1919\":1}}],[\"path可以看成是file类的升级版本\",{\"1\":{\"1916\":1}}],[\"path接口常用方法\",{\"0\":{\"1918\":1}}],[\"path接口\",{\"0\":{\"1916\":1}}],[\"pathname\",{\"0\":{\"1767\":1},\"1\":{\"538\":1}}],[\"pathvariable\",{\"1\":{\"364\":4,\"365\":1,\"371\":4}}],[\"path\",{\"1\":{\"262\":7,\"538\":1,\"540\":2,\"541\":2,\"1430\":1,\"1916\":3,\"1918\":16,\"1919\":3,\"1920\":42,\"2468\":2,\"2652\":1,\"2808\":1,\"2809\":1,\"2860\":1,\"3048\":1,\"3142\":1,\"3143\":1,\"3144\":1}}],[\"pattern都匹配不上时都会走这个servlet\",{\"1\":{\"2577\":1}}],[\"pattern类只能做一些简单的匹配操作\",{\"1\":{\"750\":1}}],[\"pattern类的构造器是private\",{\"1\":{\"747\":1}}],[\"pattern类的注释包含了所有java的正则语法\",{\"1\":{\"736\":1,\"738\":1}}],[\"pattern本身也可以调用很多正则方法\",{\"1\":{\"739\":1}}],[\"pattern与matcher的使用\",{\"0\":{\"739\":1}}],[\"patternsyntaxexception\",{\"1\":{\"736\":1}}],[\"patternsyntaxexception类\",{\"1\":{\"736\":1}}],[\"pattern>\",{\"1\":{\"262\":4,\"2572\":1}}],[\"pattern\",{\"0\":{\"745\":1,\"751\":1},\"1\":{\"252\":1,\"253\":1,\"258\":1,\"262\":3,\"639\":3,\"736\":6,\"738\":2,\"739\":2,\"745\":1,\"746\":2,\"748\":5,\"750\":4,\"751\":4,\"752\":2,\"753\":2,\"755\":1,\"760\":3,\"2781\":1}}],[\"password=root\",{\"1\":{\"2302\":1}}],[\"password=123456\",{\"1\":{\"2425\":1}}],[\"password=123\",{\"1\":{\"1989\":1}}],[\"password=123abc\",{\"1\":{\"1690\":1}}],[\"password可以用\",{\"1\":{\"2295\":1}}],[\"password\",{\"1\":{\"130\":1,\"131\":1,\"156\":1,\"267\":1,\"271\":1,\"281\":1,\"287\":1,\"292\":1,\"341\":1,\"390\":1,\"1692\":3,\"2034\":4,\"2297\":1,\"2299\":2,\"2300\":2,\"2303\":3,\"2310\":4,\"2311\":2,\"2319\":1,\"2325\":3,\"2327\":3,\"2391\":1,\"2426\":1,\"2609\":1,\"2623\":2,\"2624\":3,\"3236\":1,\"3237\":1}}],[\"polymorphism\",{\"1\":{\"1003\":1}}],[\"posttags\",{\"1\":{\"3018\":2,\"3019\":1}}],[\"post与put\",{\"0\":{\"2903\":1}}],[\"post不是\",{\"1\":{\"2886\":1,\"2903\":1}}],[\"posting\",{\"1\":{\"2878\":1}}],[\"postinglist\",{\"1\":{\"2878\":1}}],[\"postman\",{\"1\":{\"2861\":1,\"2900\":1,\"2906\":1,\"2914\":1,\"2924\":1,\"2949\":1,\"2952\":1,\"2955\":1}}],[\"postmapping\",{\"1\":{\"364\":1,\"371\":1}}],[\"post请求获取请求参数的方式是request\",{\"1\":{\"2631\":1}}],[\"post请求中文乱码的问题就已经解决\",{\"1\":{\"2631\":1}}],[\"post的请求参数是通过request的getreader\",{\"1\":{\"2628\":1}}],[\"post方式\",{\"1\":{\"2612\":1}}],[\"post方式的处理逻辑\",{\"1\":{\"2566\":1}}],[\"post\",{\"1\":{\"2563\":2,\"2564\":1,\"2566\":1,\"2609\":1,\"2614\":1,\"2899\":1,\"2900\":1,\"2910\":1,\"2911\":1,\"2918\":1,\"2959\":1}}],[\"post等一些列类型的请求\",{\"1\":{\"2560\":1,\"2567\":1}}],[\"pos\",{\"1\":{\"1884\":2,\"2880\":1}}],[\"positivenumber++\",{\"1\":{\"938\":1}}],[\"positivenumber\",{\"1\":{\"938\":2}}],[\"pow\",{\"1\":{\"521\":5}}],[\"poolpreparedstatements自动触发修改为true\",{\"1\":{\"2426\":1}}],[\"poolpreparedstatements\",{\"1\":{\"2426\":1}}],[\"pool\",{\"1\":{\"293\":2,\"2424\":1}}],[\"port来手动指定端口\",{\"1\":{\"3043\":1}}],[\"port=81\",{\"1\":{\"210\":1}}],[\"port=8082\",{\"1\":{\"213\":1}}],[\"port=80\",{\"1\":{\"115\":1}}],[\"port\",{\"1\":{\"115\":1,\"128\":1,\"164\":1,\"170\":1,\"176\":1,\"226\":3,\"287\":1,\"292\":1,\"293\":1,\"341\":1,\"390\":1,\"1964\":1,\"1965\":1,\"1971\":2,\"1973\":1,\"1975\":1,\"1985\":2,\"1986\":1,\"1990\":2,\"2502\":1,\"3048\":1,\"3050\":1,\"3142\":1,\"3143\":1,\"3144\":1,\"3159\":1,\"3160\":1,\"3236\":1}}],[\"pox\",{\"0\":{\"93\":1}}],[\"pom并间接继承spring\",{\"1\":{\"96\":1}}],[\"pom文件会自动将继承spring\",{\"1\":{\"96\":1}}],[\"pom中\",{\"1\":{\"96\":1}}],[\"pom\",{\"0\":{\"76\":1,\"91\":1,\"92\":1,\"179\":1,\"336\":1},\"1\":{\"74\":1,\"76\":1,\"82\":1,\"94\":1,\"96\":1,\"109\":2,\"193\":1,\"2479\":1}}],[\"pretags\",{\"1\":{\"3018\":2,\"3019\":1}}],[\"pre\",{\"1\":{\"2959\":1}}],[\"preference\",{\"1\":{\"2890\":1}}],[\"prefix的值只支持烤肉串书写模式\",{\"1\":{\"166\":1}}],[\"prefix\",{\"0\":{\"168\":1},\"1\":{\"131\":1,\"156\":1,\"160\":1,\"164\":1,\"167\":1,\"168\":1,\"171\":1,\"172\":1,\"175\":1,\"176\":1,\"341\":1,\"348\":1,\"414\":1}}],[\"preparestatement\",{\"1\":{\"2319\":3,\"2321\":1,\"2325\":1,\"2329\":1,\"2333\":1,\"2349\":1,\"2352\":1,\"2355\":1,\"2364\":1,\"2365\":1,\"2373\":1,\"2376\":1,\"2377\":1,\"2386\":1,\"2405\":4}}],[\"preparedstatement对象\",{\"1\":{\"2319\":1}}],[\"preparedstatement的dql查询示例\",{\"1\":{\"2348\":1}}],[\"preparedstatement的dql操作\",{\"1\":{\"2335\":1}}],[\"preparedstatement的dml操作\",{\"1\":{\"2324\":1}}],[\"preparedstatement的操作步骤\",{\"0\":{\"2318\":1}}],[\"preparedstatement的优点\",{\"0\":{\"2313\":1}}],[\"preparedstatement\",{\"0\":{\"2315\":1,\"2317\":1},\"1\":{\"2316\":2,\"2317\":1,\"2319\":4,\"2321\":3,\"2322\":2,\"2323\":1,\"2325\":1,\"2329\":1,\"2333\":1,\"2338\":1,\"2349\":1,\"2352\":1,\"2355\":1,\"2364\":1,\"2365\":1,\"2368\":1,\"2369\":1,\"2370\":1,\"2373\":1,\"2376\":1,\"2377\":1,\"2386\":1,\"2405\":4,\"2435\":1}}],[\"prepatedstatement\",{\"1\":{\"2308\":1}}],[\"preptredstatement是statemet你的子接口\",{\"1\":{\"2312\":1}}],[\"prev\",{\"1\":{\"1626\":4}}],[\"pre><\",{\"1\":{\"811\":2}}],[\"predicate<t>\",{\"1\":{\"729\":1,\"2144\":1}}],[\"predicate\",{\"0\":{\"729\":1},\"1\":{\"2210\":1,\"2230\":1,\"2231\":1}}],[\"price\",{\"1\":{\"2907\":1,\"2908\":2,\"2919\":1,\"2925\":1,\"2926\":2,\"2930\":2,\"2956\":3,\"2957\":1}}],[\"pri\",{\"1\":{\"2893\":2}}],[\"priority=2\",{\"1\":{\"3175\":1}}],[\"priority就是优先级的值\",{\"1\":{\"3174\":1}}],[\"priorityatelection\",{\"1\":{\"3156\":1}}],[\"priority\",{\"1\":{\"1487\":3,\"3153\":1,\"3154\":1,\"3173\":2}}],[\"primitive\",{\"1\":{\"827\":1,\"2016\":1}}],[\"primary\",{\"1\":{\"375\":1,\"376\":1,\"377\":1,\"378\":1,\"379\":1,\"380\":1,\"381\":1,\"382\":1,\"383\":1,\"384\":1,\"385\":1,\"2371\":1,\"2901\":1,\"2907\":1,\"2910\":1,\"2915\":1,\"2925\":1,\"3031\":2,\"3128\":1,\"3130\":1,\"3131\":1,\"3138\":1,\"3156\":1,\"3157\":1,\"3159\":1,\"3168\":1,\"3210\":2}}],[\"private修饰的成员也继承了\",{\"1\":{\"1115\":1}}],[\"private属性和方法也继承了\",{\"1\":{\"1113\":1}}],[\"private\",{\"1\":{\"127\":4,\"128\":1,\"131\":4,\"132\":1,\"156\":4,\"164\":3,\"167\":1,\"171\":1,\"172\":1,\"176\":1,\"181\":1,\"242\":1,\"273\":4,\"275\":1,\"284\":1,\"288\":1,\"289\":1,\"343\":4,\"347\":1,\"360\":1,\"361\":1,\"364\":1,\"370\":3,\"371\":1,\"440\":1,\"501\":2,\"511\":1,\"530\":1,\"538\":1,\"613\":1,\"616\":1,\"617\":1,\"621\":1,\"632\":1,\"641\":1,\"680\":1,\"746\":1,\"1022\":1,\"1025\":1,\"1029\":1,\"1039\":1,\"1056\":1,\"1057\":1,\"1058\":1,\"1061\":1,\"1068\":2,\"1082\":2,\"1115\":1,\"1120\":1,\"1212\":1,\"1240\":2,\"1241\":2,\"1286\":1,\"1288\":1,\"1361\":1,\"1371\":2,\"1373\":4,\"1377\":1,\"1382\":2,\"1492\":1,\"1509\":1,\"1512\":2,\"1515\":2,\"1520\":1,\"1521\":2,\"1532\":1,\"1536\":2,\"1556\":1,\"1562\":1,\"1626\":1,\"1828\":1,\"1830\":1,\"1831\":1,\"1910\":1,\"2007\":3,\"2037\":1,\"2044\":1,\"2045\":1,\"2080\":1,\"2095\":1,\"2221\":2,\"2351\":4,\"2405\":1,\"2409\":1,\"2427\":1,\"2556\":1,\"2563\":7,\"2981\":3}}],[\"printwriter\",{\"1\":{\"1872\":1,\"2637\":1,\"2639\":1,\"2640\":1,\"2642\":1}}],[\"printwriter写出字符流\",{\"1\":{\"1872\":1}}],[\"printsum\",{\"1\":{\"1569\":2}}],[\"printstream中的方法为\",{\"1\":{\"2156\":1}}],[\"printstream写出字节流\",{\"1\":{\"1872\":1}}],[\"printstream和printwriter有自动flush功能\",{\"1\":{\"1872\":1}}],[\"printstream和printwriter的输出不会抛出ioexception异常\",{\"1\":{\"1872\":1}}],[\"printstream和printwriter\",{\"0\":{\"1872\":1}}],[\"printstream\",{\"1\":{\"1869\":1,\"1872\":1,\"1873\":2,\"2156\":1}}],[\"printstracktrace\",{\"1\":{\"1343\":1}}],[\"printstacktrace\",{\"1\":{\"369\":1,\"426\":2,\"555\":1,\"579\":2,\"1339\":1,\"1341\":1,\"1344\":3,\"1352\":1,\"1481\":2,\"1547\":2,\"1556\":1,\"1562\":2,\"1804\":2,\"1805\":2,\"1816\":2,\"1817\":3,\"1823\":3,\"1834\":2,\"1836\":3,\"1870\":2,\"1873\":1,\"1983\":1,\"1984\":1,\"2325\":3,\"2328\":2,\"2329\":1,\"2333\":1,\"2349\":1,\"2352\":1,\"2355\":1,\"2386\":1,\"2387\":3,\"2405\":4,\"2409\":7,\"2427\":1,\"2428\":1}}],[\"printf\",{\"1\":{\"1432\":1}}],[\"print\",{\"1\":{\"799\":1,\"950\":1,\"954\":1,\"955\":1,\"992\":1,\"1335\":1,\"1344\":1,\"1352\":1,\"1747\":3,\"1748\":3,\"1804\":1,\"1807\":1,\"1808\":1,\"1873\":1,\"2048\":10,\"2624\":2,\"2725\":2,\"3078\":1}}],[\"println\",{\"1\":{\"85\":1,\"128\":3,\"132\":1,\"242\":1,\"244\":1,\"263\":1,\"275\":1,\"284\":2,\"289\":1,\"347\":1,\"352\":5,\"403\":1,\"404\":2,\"405\":2,\"407\":1,\"408\":2,\"409\":2,\"411\":1,\"412\":1,\"413\":1,\"414\":2,\"415\":1,\"417\":2,\"418\":2,\"419\":1,\"420\":1,\"421\":2,\"423\":1,\"424\":1,\"425\":2,\"426\":4,\"429\":1,\"430\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"451\":3,\"452\":2,\"453\":1,\"454\":1,\"455\":1,\"456\":1,\"469\":3,\"471\":8,\"472\":8,\"473\":8,\"476\":1,\"477\":2,\"478\":1,\"479\":1,\"484\":1,\"485\":1,\"486\":2,\"488\":1,\"502\":1,\"503\":1,\"508\":2,\"509\":1,\"512\":1,\"513\":2,\"514\":1,\"515\":1,\"516\":2,\"517\":1,\"518\":2,\"519\":2,\"520\":2,\"521\":4,\"524\":1,\"525\":1,\"526\":2,\"528\":2,\"530\":2,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"537\":1,\"540\":1,\"541\":1,\"542\":1,\"543\":1,\"544\":1,\"545\":1,\"546\":1,\"547\":1,\"549\":1,\"550\":1,\"551\":1,\"552\":1,\"553\":1,\"555\":3,\"556\":3,\"557\":3,\"559\":3,\"562\":3,\"565\":3,\"566\":3,\"581\":1,\"586\":1,\"587\":1,\"588\":1,\"589\":1,\"590\":1,\"592\":1,\"593\":1,\"594\":1,\"595\":1,\"596\":1,\"597\":1,\"598\":1,\"600\":1,\"601\":1,\"604\":1,\"605\":1,\"606\":1,\"607\":1,\"608\":1,\"609\":1,\"610\":1,\"611\":1,\"613\":1,\"614\":1,\"615\":1,\"616\":1,\"617\":1,\"620\":1,\"621\":1,\"622\":1,\"623\":1,\"624\":2,\"625\":1,\"626\":1,\"633\":1,\"636\":7,\"639\":2,\"640\":2,\"642\":2,\"644\":1,\"645\":1,\"646\":2,\"647\":4,\"648\":1,\"649\":1,\"650\":1,\"651\":1,\"657\":1,\"658\":2,\"659\":1,\"660\":1,\"661\":1,\"662\":3,\"663\":1,\"664\":2,\"665\":1,\"666\":2,\"669\":1,\"671\":1,\"676\":1,\"677\":1,\"678\":1,\"682\":2,\"683\":3,\"684\":3,\"685\":2,\"686\":1,\"687\":1,\"688\":1,\"689\":2,\"690\":1,\"696\":1,\"697\":2,\"698\":3,\"699\":2,\"700\":1,\"701\":1,\"702\":3,\"703\":2,\"704\":2,\"711\":2,\"712\":1,\"713\":3,\"714\":1,\"715\":2,\"716\":2,\"717\":2,\"718\":1,\"719\":2,\"720\":1,\"721\":1,\"722\":2,\"723\":3,\"741\":2,\"742\":2,\"743\":1,\"744\":1,\"750\":1,\"751\":1,\"752\":1,\"753\":1,\"760\":2,\"761\":2,\"790\":1,\"799\":1,\"811\":2,\"877\":2,\"885\":3,\"886\":3,\"893\":2,\"928\":2,\"936\":2,\"938\":2,\"941\":1,\"954\":1,\"955\":1,\"956\":3,\"973\":1,\"974\":1,\"992\":1,\"997\":2,\"998\":2,\"1010\":1,\"1011\":1,\"1014\":1,\"1019\":2,\"1032\":1,\"1034\":1,\"1044\":1,\"1048\":1,\"1120\":3,\"1128\":3,\"1132\":1,\"1133\":2,\"1134\":1,\"1160\":4,\"1165\":2,\"1178\":5,\"1179\":2,\"1185\":2,\"1192\":1,\"1194\":2,\"1209\":3,\"1218\":1,\"1219\":1,\"1227\":2,\"1240\":1,\"1249\":1,\"1251\":1,\"1252\":3,\"1264\":7,\"1267\":3,\"1278\":2,\"1307\":2,\"1308\":2,\"1327\":2,\"1329\":1,\"1330\":1,\"1333\":1,\"1334\":1,\"1339\":6,\"1343\":2,\"1352\":1,\"1361\":2,\"1374\":3,\"1382\":4,\"1432\":4,\"1472\":2,\"1480\":1,\"1481\":3,\"1489\":4,\"1492\":1,\"1509\":1,\"1512\":1,\"1520\":1,\"1536\":1,\"1547\":4,\"1556\":1,\"1562\":2,\"1569\":1,\"1583\":1,\"1595\":4,\"1596\":1,\"1597\":1,\"1603\":1,\"1604\":1,\"1606\":1,\"1607\":1,\"1654\":2,\"1657\":1,\"1683\":1,\"1687\":1,\"1692\":2,\"1707\":1,\"1709\":2,\"1710\":1,\"1745\":1,\"1747\":1,\"1748\":1,\"1767\":3,\"1768\":1,\"1790\":1,\"1805\":1,\"1834\":1,\"1838\":1,\"1851\":1,\"1853\":1,\"1870\":3,\"1873\":1,\"1879\":3,\"1904\":1,\"1909\":2,\"1944\":1,\"1945\":2,\"1946\":1,\"1947\":1,\"1948\":1,\"1977\":1,\"1984\":1,\"2004\":1,\"2007\":2,\"2008\":1,\"2009\":2,\"2010\":2,\"2016\":3,\"2018\":1,\"2019\":1,\"2020\":1,\"2021\":1,\"2032\":4,\"2034\":1,\"2037\":2,\"2041\":1,\"2043\":1,\"2045\":4,\"2047\":2,\"2048\":2,\"2050\":3,\"2051\":1,\"2052\":1,\"2053\":1,\"2054\":3,\"2055\":1,\"2056\":1,\"2058\":1,\"2063\":2,\"2067\":1,\"2080\":2,\"2081\":1,\"2096\":1,\"2101\":2,\"2121\":2,\"2123\":3,\"2125\":1,\"2127\":1,\"2129\":6,\"2155\":1,\"2156\":2,\"2202\":1,\"2203\":1,\"2210\":1,\"2211\":1,\"2212\":1,\"2213\":1,\"2215\":2,\"2222\":1,\"2226\":1,\"2227\":1,\"2229\":1,\"2230\":1,\"2231\":1,\"2232\":1,\"2233\":1,\"2234\":1,\"2235\":1,\"2236\":1,\"2237\":1,\"2239\":1,\"2240\":1,\"2241\":1,\"2252\":1,\"2254\":2,\"2256\":1,\"2257\":1,\"2259\":2,\"2260\":1,\"2297\":1,\"2299\":1,\"2300\":1,\"2303\":1,\"2349\":1,\"2353\":2,\"2356\":1,\"2365\":1,\"2373\":1,\"2376\":1,\"2387\":1,\"2391\":2,\"2409\":8,\"2428\":1,\"2438\":1,\"2439\":1,\"2440\":1,\"2441\":1,\"2442\":2,\"2443\":2,\"2531\":1,\"2552\":1,\"2553\":1,\"2554\":1,\"2556\":1,\"2564\":2,\"2598\":8,\"2601\":2,\"2602\":1,\"2610\":1,\"2624\":4,\"2655\":3,\"2661\":1,\"2662\":1,\"2799\":1,\"2806\":1,\"2975\":1,\"2977\":3,\"2978\":1,\"2980\":1,\"2983\":1,\"2984\":1,\"2986\":2,\"2987\":2,\"2991\":1,\"2992\":1,\"2993\":1,\"2997\":1,\"3000\":1,\"3003\":1,\"3006\":1,\"3008\":1,\"3010\":1,\"3015\":1,\"3019\":1}}],[\"prinln\",{\"1\":{\"104\":1}}],[\"pringln\",{\"1\":{\"1010\":1}}],[\"pring\",{\"0\":{\"94\":1},\"1\":{\"232\":1}}],[\"provided\",{\"1\":{\"2890\":1}}],[\"proxool等db池的优点\",{\"1\":{\"2422\":1}}],[\"proxool\",{\"1\":{\"2420\":2}}],[\"proxyfilters\",{\"1\":{\"2426\":1}}],[\"proxyfactory中调用了newproxyinstance方法\",{\"1\":{\"2097\":1}}],[\"proxyfactory\",{\"1\":{\"2094\":1,\"2096\":1,\"2097\":1}}],[\"proxyinstance自动调用了myinvocationhandler类的invoke方法\",{\"1\":{\"2097\":1}}],[\"proxyinstance\",{\"1\":{\"2096\":4,\"2097\":2}}],[\"proxy类提供的用于创建动态代理类和动态代理对象的静态方法\",{\"1\":{\"2090\":1}}],[\"proxy\",{\"0\":{\"2089\":1,\"2090\":1,\"2095\":1},\"1\":{\"2094\":1,\"2095\":1,\"2101\":1}}],[\"proxyclothfactory\",{\"1\":{\"2080\":2,\"2082\":3}}],[\"proxyuser\",{\"1\":{\"2073\":1}}],[\"protocolversion\",{\"1\":{\"3153\":1}}],[\"protocol\",{\"1\":{\"1954\":2,\"1955\":1,\"1990\":3,\"2598\":2}}],[\"protected\",{\"1\":{\"393\":1,\"613\":1,\"621\":1,\"1022\":1,\"1025\":1,\"1029\":1,\"1061\":1,\"1212\":1,\"2045\":1,\"2564\":2,\"2566\":2,\"2589\":1,\"2598\":2,\"2601\":1,\"2602\":1,\"2610\":1,\"2614\":2,\"2624\":2,\"2625\":2,\"2640\":1,\"2655\":2,\"2661\":1,\"2662\":1,\"2682\":1,\"2686\":1,\"2690\":1,\"2694\":1,\"2798\":1,\"2799\":1,\"2814\":1}}],[\"pros\",{\"1\":{\"1692\":4,\"2034\":5,\"2303\":6,\"2325\":6,\"2327\":6,\"2424\":3,\"2427\":3}}],[\"processmanagement\",{\"1\":{\"3048\":1,\"3142\":1}}],[\"process\",{\"0\":{\"1436\":1},\"1\":{\"1252\":1,\"1436\":1,\"3049\":3,\"3142\":3,\"3243\":1}}],[\"processor<\",{\"1\":{\"165\":1}}],[\"procedure\",{\"1\":{\"1002\":1}}],[\"pro多个配置文件\",{\"1\":{\"307\":1}}],[\"pro<\",{\"1\":{\"235\":1}}],[\"promvc\",{\"1\":{\"234\":1}}],[\"proredis\",{\"1\":{\"234\":1}}],[\"prodecate\",{\"1\":{\"2229\":1}}],[\"producecloth\",{\"1\":{\"2079\":1,\"2080\":2,\"2081\":1,\"2082\":1}}],[\"production\",{\"1\":{\"23\":1}}],[\"prod\",{\"1\":{\"313\":1}}],[\"prodb\",{\"1\":{\"234\":1}}],[\"profile集合\",{\"1\":{\"3190\":1}}],[\"profile>\",{\"1\":{\"235\":2}}],[\"profile\",{\"1\":{\"226\":1,\"235\":2,\"236\":1,\"237\":1}}],[\"profile代替\",{\"1\":{\"226\":1}}],[\"profiles>\",{\"1\":{\"235\":1}}],[\"profiles\",{\"1\":{\"226\":5,\"229\":1,\"232\":1,\"234\":1,\"236\":1}}],[\"pro\",{\"1\":{\"226\":2,\"228\":1,\"234\":1,\"262\":1}}],[\"programming\",{\"0\":{\"2099\":1},\"1\":{\"1002\":2}}],[\"program\",{\"0\":{\"1435\":1},\"1\":{\"212\":1,\"1435\":1}}],[\"propertystatement是statement的子类\",{\"1\":{\"2328\":1}}],[\"property\",{\"1\":{\"168\":1}}],[\"properties类\",{\"1\":{\"2297\":1}}],[\"properties类的方法\",{\"0\":{\"1691\":1}}],[\"properties与yml文件格式均支持\",{\"1\":{\"221\":1}}],[\"properties>yml>yaml\",{\"1\":{\"117\":1}}],[\"properties>\",{\"1\":{\"95\":1,\"235\":2,\"336\":1}}],[\"properties\",{\"0\":{\"1668\":1,\"1689\":1},\"1\":{\"74\":1,\"113\":1,\"115\":1,\"117\":1,\"221\":1,\"307\":1,\"707\":1,\"1578\":1,\"1662\":1,\"1668\":1,\"1690\":1,\"1692\":3,\"2034\":5,\"2297\":3,\"2302\":1,\"2303\":3,\"2325\":3,\"2327\":3,\"2424\":3,\"2425\":1,\"2427\":3,\"2963\":1,\"2964\":1,\"2965\":1}}],[\"propeties格式\",{\"1\":{\"115\":1}}],[\"projection\",{\"1\":{\"3090\":2,\"3121\":1}}],[\"project>外的其他标签内容都删除\",{\"1\":{\"2490\":1}}],[\"projectexceptionadvice\",{\"1\":{\"369\":1}}],[\"projectlombok<\",{\"1\":{\"330\":1,\"336\":1,\"344\":1,\"389\":1}}],[\"project\",{\"0\":{\"145\":1,\"304\":1,\"387\":1},\"1\":{\"71\":3,\"81\":1,\"142\":2,\"302\":2,\"2107\":1,\"2483\":2,\"2744\":1}}],[\"pscache对支持游标的数据库性能提升巨大\",{\"1\":{\"2426\":1}}],[\"ps\",{\"1\":{\"67\":1,\"314\":1,\"1128\":1,\"1873\":6,\"2156\":2,\"2319\":1,\"2321\":1,\"2322\":3,\"2325\":8,\"2328\":3,\"2329\":6,\"2333\":5,\"2349\":5,\"2352\":5,\"2355\":5,\"2364\":7,\"2365\":4,\"2373\":4,\"2376\":6,\"2377\":6,\"2386\":5,\"2404\":2,\"2405\":20,\"2941\":1,\"3049\":1,\"3071\":1,\"3093\":1,\"3137\":1,\"3145\":1,\"3198\":1}}],[\"包提供给别人使用\",{\"1\":{\"2738\":1}}],[\"包中有\",{\"1\":{\"2308\":1}}],[\"包裹\",{\"1\":{\"2118\":1}}],[\"包声明\",{\"1\":{\"1405\":1}}],[\"包属于标识符\",{\"1\":{\"1089\":1}}],[\"包的多了可能会产生意外的错误\",{\"1\":{\"1514\":1}}],[\"包的少了\",{\"1\":{\"1514\":1}}],[\"包的命名规则\",{\"0\":{\"1089\":1}}],[\"包的作用\",{\"0\":{\"1087\":1}}],[\"包虽然就是个文件夹\",{\"1\":{\"1087\":1}}],[\"包可以包含类和子包\",{\"1\":{\"1087\":1}}],[\"包帮助管理大型软件系统\",{\"1\":{\"1087\":1}}],[\"包名\",{\"1\":{\"810\":1,\"835\":1,\"1093\":2}}],[\"包主要包括以下三个类\",{\"1\":{\"736\":1}}],[\"包+类名\",{\"1\":{\"588\":1,\"2020\":1}}],[\"包装类自动转为基本数据类型\",{\"1\":{\"1195\":1}}],[\"包装类对象中包装的基本类型变量\",{\"1\":{\"1194\":1}}],[\"包装类转换为基本数据类型\",{\"0\":{\"1194\":1}}],[\"包装类的构造器\",{\"1\":{\"1192\":1}}],[\"包装类的转换概述\",{\"0\":{\"1191\":1}}],[\"包装类与string类的互相转换示意图\",{\"1\":{\"1191\":1}}],[\"包装类就是将基本数据类型的值包装成引用数据类型\",{\"1\":{\"1189\":1}}],[\"包装类等都重写了object类中的tostring\",{\"1\":{\"1185\":1}}],[\"包装类等都重写了object类中的equals\",{\"1\":{\"1179\":1}}],[\"包装类包括\",{\"1\":{\"524\":1}}],[\"包装类\",{\"0\":{\"1188\":1,\"1197\":1,\"1198\":1},\"1\":{\"423\":1,\"523\":1,\"1189\":1,\"1192\":1,\"1721\":1}}],[\"包括创建\",{\"1\":{\"3190\":1}}],[\"包括以下具体的操作\",{\"1\":{\"2953\":1,\"3013\":1}}],[\"包括已经删除了的\",{\"1\":{\"2896\":1}}],[\"包括标签\",{\"1\":{\"2780\":1}}],[\"包括任意其他服务器上的\",{\"1\":{\"2664\":1}}],[\"包括了对数据表的crud\",{\"1\":{\"2394\":1}}],[\"包括两个层次\",{\"1\":{\"2283\":1}}],[\"包括两者\",{\"1\":{\"1985\":1}}],[\"包括object这个父类的方法\",{\"1\":{\"2047\":1}}],[\"包括多个具有不同功能且互为关联的协议\",{\"1\":{\"1955\":1}}],[\"包括自定义的异常类和try\",{\"1\":{\"1721\":1}}],[\"包括枚举常量\",{\"1\":{\"1405\":1}}],[\"包括注释类型\",{\"1\":{\"1405\":1}}],[\"包括私有元素\",{\"1\":{\"2014\":1}}],[\"包括私有的\",{\"1\":{\"1212\":1}}],[\"包括私有的数据\",{\"1\":{\"1207\":1}}],[\"包括私有属性\",{\"1\":{\"607\":1}}],[\"包括本包下的子包\",{\"1\":{\"1097\":1}}],[\"包括对象作为参数\",{\"1\":{\"1042\":1}}],[\"包括调用自己\",{\"1\":{\"1034\":1}}],[\"包括属性和\",{\"1\":{\"1011\":1}}],[\"包括涉及到java语言与前端html\",{\"1\":{\"1005\":1}}],[\"包括基本数据类型和引用数据类型\",{\"1\":{\"961\":1}}],[\"包括强制类型转换\",{\"1\":{\"887\":1}}],[\"包括参数描述\",{\"1\":{\"812\":1}}],[\"包括java虚拟机和java程序所需的核心类库等\",{\"1\":{\"776\":1}}],[\"包括换行符\",{\"1\":{\"749\":1}}],[\"包括private类型的\",{\"1\":{\"618\":1,\"627\":1,\"630\":1}}],[\"包括子目录\",{\"1\":{\"546\":1}}],[\"包括底层框架和扩展特性\",{\"1\":{\"462\":1}}],[\"包括引用类型\",{\"1\":{\"455\":1}}],[\"包括start\",{\"1\":{\"454\":1}}],[\"包括包装类\",{\"1\":{\"424\":1}}],[\"包括\",{\"1\":{\"422\":1,\"1022\":1,\"1402\":1,\"2045\":1,\"2048\":1,\"2842\":1,\"3184\":2}}],[\"包括系统管理后台和移动端应用两部分\",{\"1\":{\"396\":1}}],[\"包括mybatis的sql日志\",{\"1\":{\"262\":1}}],[\"包括mybatis的\",{\"1\":{\"261\":1}}],[\"包括mybatisplus\",{\"1\":{\"11\":1}}],[\"包\",{\"1\":{\"369\":1,\"370\":1,\"2738\":1}}],[\"包不匹配\",{\"1\":{\"182\":1}}],[\"包含内置角色\",{\"0\":{\"3187\":1}}],[\"包含一组控制索引创建的选项的文档\",{\"1\":{\"3111\":1}}],[\"包含一些实用工具类\",{\"1\":{\"1090\":1}}],[\"包含一些java语言的核心类\",{\"1\":{\"1090\":1}}],[\"包含使用$in操作符\",{\"1\":{\"3101\":1}}],[\"包含查询\",{\"0\":{\"3101\":1}}],[\"包含的字段\",{\"1\":{\"2999\":1}}],[\"包含的信息指示\",{\"1\":{\"1985\":1}}],[\"包含三个字段\",{\"1\":{\"2964\":1}}],[\"包含多种子类型\",{\"1\":{\"2963\":1}}],[\"包含信息更多的倒排索引\",{\"1\":{\"2880\":1}}],[\"包含元素名和类型\",{\"1\":{\"2781\":1}}],[\"包含子集合\",{\"1\":{\"2221\":1}}],[\"包含所有学生数据\",{\"1\":{\"2221\":1}}],[\"包含姓名和年龄两个属性\",{\"1\":{\"2221\":1}}],[\"包含4中常用的函数式接口\",{\"1\":{\"2138\":1}}],[\"包含private方法\",{\"1\":{\"2047\":1}}],[\"包含四季\",{\"1\":{\"1373\":1}}],[\"包含能提供多种输入\",{\"1\":{\"1090\":1}}],[\"包含执行与网络相关的操作的类和接口\",{\"1\":{\"1090\":1}}],[\"包含变量类型\",{\"1\":{\"818\":1}}],[\"包含两个类的java文件\",{\"0\":{\"801\":1}}],[\"包含目录\",{\"1\":{\"547\":1,\"562\":1}}],[\"包含后缀\",{\"1\":{\"542\":1}}],[\"包含0\",{\"1\":{\"513\":1}}],[\"包含\",{\"1\":{\"512\":1,\"2702\":1}}],[\"包含时区支持的类\",{\"1\":{\"462\":1}}],[\"包含值对象的基础包\",{\"1\":{\"462\":1}}],[\"包含start\",{\"1\":{\"453\":1}}],[\"包含spring框架部分功能\",{\"1\":{\"201\":1}}],[\"包含了很多正则\",{\"1\":{\"2780\":1}}],[\"包含了很多用来操作数据的方法\",{\"1\":{\"999\":1}}],[\"包含了该jar包的版本\",{\"1\":{\"2733\":1}}],[\"包含了一个\",{\"1\":{\"2733\":1}}],[\"包含了一些java格式化相关的类\",{\"1\":{\"1090\":1}}],[\"包含了构成抽象窗口工具集\",{\"1\":{\"1090\":1}}],[\"包含了java进行jdbc数据库编程的相关类\",{\"1\":{\"1090\":1}}],[\"包含了所有可能的情况\",{\"1\":{\"724\":1}}],[\"包含了用来操作数组\",{\"1\":{\"641\":1}}],[\"包含了properties部分dependencies部分和build部分\",{\"1\":{\"336\":1}}],[\"包含了几乎所有开发中可能用到的依赖\",{\"1\":{\"95\":1}}],[\"包含类\",{\"1\":{\"138\":1}}],[\"包含mybatis\",{\"1\":{\"29\":1}}],[\"热部署的具体配置\",{\"1\":{\"2519\":1}}],[\"热部署的时机\",{\"0\":{\"147\":1}}],[\"热部署模式\",{\"1\":{\"2500\":1,\"2517\":1}}],[\"热部署是纯开发阶段的功能\",{\"1\":{\"151\":1}}],[\"热部署是在开发阶段配置的\",{\"1\":{\"133\":1}}],[\"热部署监控的文件范围\",{\"0\":{\"148\":1}}],[\"热部署需要手动生效\",{\"1\":{\"142\":1}}],[\"热部署实现原理\",{\"0\":{\"134\":1}}],[\"热部署就是代码修改后\",{\"1\":{\"133\":1}}],[\"热部署\",{\"0\":{\"133\":1},\"1\":{\"29\":1,\"2502\":1}}],[\"基\",{\"1\":{\"1990\":1}}],[\"基类\",{\"1\":{\"1112\":1}}],[\"基于缓存查询\",{\"1\":{\"3121\":1}}],[\"基于索引查询\",{\"1\":{\"3121\":1}}],[\"基于以上原因可以分析得出\",{\"1\":{\"2850\":1}}],[\"基于上述理论\",{\"1\":{\"2621\":1}}],[\"基于socket的tcp编程\",{\"0\":{\"1968\":1}}],[\"基于springboot读取maven配置属性的前提下\",{\"1\":{\"238\":1}}],[\"基于通道的io操作\",{\"1\":{\"1913\":1}}],[\"基于\",{\"1\":{\"345\":1}}],[\"基于vue+elementui制作\",{\"1\":{\"338\":1}}],[\"基于restful开发\",{\"1\":{\"338\":1}}],[\"基于mybatisplus进行增量开发\",{\"1\":{\"338\":1}}],[\"基于原理理解基础上\",{\"1\":{\"69\":1}}],[\"基本一样\",{\"1\":{\"3069\":1}}],[\"基本查询\",{\"0\":{\"2922\":1,\"2990\":1,\"3089\":1}}],[\"基本查询示例\",{\"0\":{\"2349\":1}}],[\"基本url+路由\",{\"1\":{\"2533\":1}}],[\"基本url+路由的方式访问\",{\"1\":{\"2529\":1}}],[\"基本开发使用\",{\"0\":{\"2451\":1}}],[\"基本使用\",{\"0\":{\"2444\":1,\"2527\":1}}],[\"基本使用测试\",{\"0\":{\"800\":1}}],[\"基本步骤与dml一致\",{\"1\":{\"2336\":1}}],[\"基本操作方法\",{\"0\":{\"1833\":1}}],[\"基本操作\",{\"0\":{\"1822\":1,\"1832\":1,\"3270\":1}}],[\"基本被抛弃\",{\"1\":{\"1667\":1}}],[\"基本的数据访问操作\",{\"1\":{\"2765\":1}}],[\"基本的使用\",{\"1\":{\"1653\":1}}],[\"基本的curdbasemapper中都定义了\",{\"1\":{\"346\":1}}],[\"基本概念\",{\"0\":{\"1434\":1}}],[\"基本架构\",{\"0\":{\"1402\":1}}],[\"基本数据格式是integer\",{\"1\":{\"2781\":1}}],[\"基本数据格式\",{\"1\":{\"2781\":2}}],[\"基本数据和对应的包装类\",{\"0\":{\"1190\":1}}],[\"基本数据类型可序列化\",{\"1\":{\"1905\":1}}],[\"基本数据类型可以自动转为对应的包装类类型\",{\"1\":{\"1195\":1}}],[\"基本数据类型和string都已经实现该接口了\",{\"1\":{\"1905\":1}}],[\"基本数据类型和包装类与string类型的转换\",{\"0\":{\"1196\":1}}],[\"基本数据类型的变量写出到文件中\",{\"1\":{\"1878\":1}}],[\"基本数据类型的值\",{\"1\":{\"1307\":1}}],[\"基本数据类型的值当然也可以\",{\"1\":{\"1192\":1}}],[\"基本数据类型的值或标识符\",{\"1\":{\"1192\":1}}],[\"基本数据类型不用转换\",{\"1\":{\"1195\":1}}],[\"基本数据类型转换为包装类\",{\"0\":{\"1192\":1}}],[\"基本数据类型转string类型\",{\"1\":{\"424\":1}}],[\"基本数据类型元素的数组\",{\"1\":{\"962\":1}}],[\"基本数据类型\",{\"0\":{\"836\":1,\"1044\":1,\"1197\":1,\"1307\":1},\"1\":{\"827\":1,\"1018\":1,\"1125\":1,\"1178\":1,\"1191\":1,\"2016\":1}}],[\"基本数据类型会自动装箱\",{\"1\":{\"657\":1}}],[\"基本类型\",{\"1\":{\"1398\":1}}],[\"基本类型数据转换为string\",{\"1\":{\"1187\":1}}],[\"基本类型或void\",{\"1\":{\"592\":1}}],[\"基本变量\",{\"1\":{\"1044\":1}}],[\"基本代码规范\",{\"0\":{\"815\":1}}],[\"基本语法规则\",{\"0\":{\"795\":1}}],[\"基本语法\",{\"0\":{\"788\":1,\"2770\":1},\"1\":{\"1389\":1}}],[\"基本配置\",{\"0\":{\"390\":1}}],[\"基本配置文件\",{\"1\":{\"29\":1}}],[\"基本curd\",{\"0\":{\"345\":1}}],[\"基本命令和windows上的相同\",{\"1\":{\"207\":1}}],[\"基本运维\",{\"0\":{\"3255\":1},\"1\":{\"29\":1}}],[\"基础类库下的类不用导包\",{\"1\":{\"2741\":1}}],[\"基础网址后面的部分\",{\"1\":{\"2597\":1}}],[\"基础数据类型\",{\"1\":{\"1042\":1}}],[\"基础的crud操作均由mybatisplus给我们提供\",{\"1\":{\"348\":1}}],[\"基础操作可以保证正确性\",{\"1\":{\"60\":1,\"61\":1}}],[\"基础\",{\"0\":{\"3259\":1},\"1\":{\"29\":1}}],[\"介绍\",{\"0\":{\"66\":1,\"260\":1,\"436\":1,\"491\":1,\"830\":1,\"1051\":1,\"1386\":1,\"1602\":1,\"1610\":1,\"1633\":1,\"1694\":1,\"1825\":1,\"1894\":1,\"1942\":1,\"2134\":1,\"2246\":1,\"2247\":1,\"2582\":1,\"2587\":1,\"2651\":1,\"2767\":1,\"3020\":1,\"3055\":1,\"3123\":1},\"1\":{\"29\":1,\"395\":1}}],[\"正序\",{\"1\":{\"3009\":1}}],[\"正向索引的缺点\",{\"0\":{\"2870\":1}}],[\"正向索引的结构\",{\"0\":{\"2868\":1}}],[\"正向索引解析\",{\"0\":{\"2869\":1}}],[\"正排索引\",{\"0\":{\"2866\":1},\"1\":{\"2874\":1}}],[\"正式为类变量\",{\"1\":{\"2027\":1}}],[\"正式提供对外服务的环境\",{\"1\":{\"23\":1}}],[\"正因为加载过所有的父类的结构\",{\"1\":{\"1144\":1}}],[\"正确\",{\"1\":{\"893\":1}}],[\"正确的包\",{\"1\":{\"2976\":1}}],[\"正确的\",{\"1\":{\"1717\":1}}],[\"正确的写法\",{\"1\":{\"901\":1}}],[\"正确的缩进和空白\",{\"1\":{\"815\":1}}],[\"正确的注释和注释风格\",{\"1\":{\"815\":1}}],[\"正数\",{\"1\":{\"2805\":1}}],[\"正数的补码就是其本身\",{\"1\":{\"873\":1}}],[\"正数的反码是其本身\",{\"1\":{\"873\":1}}],[\"正数就舍去\",{\"1\":{\"536\":1}}],[\"正数就进一\",{\"1\":{\"536\":1}}],[\"正常查询到结果的响应信息如下\",{\"1\":{\"2907\":1,\"2925\":1}}],[\"正常关闭\",{\"1\":{\"2456\":2}}],[\"正常的方法调用\",{\"0\":{\"1155\":1}}],[\"正常在jdk安装时已经装过了\",{\"1\":{\"779\":1}}],[\"正常值下\",{\"1\":{\"536\":2}}],[\"正常情况下\",{\"1\":{\"491\":1}}],[\"正常\",{\"1\":{\"375\":1,\"381\":1}}],[\"正在记录的日志文件的路径及文件名\",{\"1\":{\"262\":3}}],[\"正则条件查询\",{\"0\":{\"3099\":1}}],[\"正则约束\",{\"1\":{\"2781\":1}}],[\"正则表达式是js的语法\",{\"1\":{\"3099\":1}}],[\"正则表达式是否与字符序列匹配\",{\"1\":{\"752\":1}}],[\"正则表达式\",{\"1\":{\"741\":1,\"742\":1,\"752\":1,\"3034\":1,\"3099\":1}}],[\"正则表达式和\",{\"1\":{\"736\":1}}],[\"正则模式对象\",{\"1\":{\"739\":1}}],[\"正则相关的类\",{\"0\":{\"736\":1}}],[\"正则的语法都是通用的\",{\"1\":{\"735\":1}}],[\"正则类\",{\"0\":{\"735\":1}}],[\"正则替换第一个子字符串\",{\"0\":{\"432\":1}}],[\"正则全部替换\",{\"0\":{\"431\":1}}],[\"正则\",{\"0\":{\"44\":1,\"427\":1},\"1\":{\"10\":1,\"34\":1}}],[\"用什么账号登录\",{\"1\":{\"3206\":1}}],[\"用有操作admin库的用户登录认证后才能操作\",{\"1\":{\"3197\":1}}],[\"用到时再说\",{\"1\":{\"3051\":1}}],[\"用到了再学\",{\"1\":{\"11\":1}}],[\"用引号括起来\",{\"1\":{\"2772\":1}}],[\"用直接流输出字符\",{\"1\":{\"2648\":1}}],[\"用注解就可以了\",{\"1\":{\"2579\":1}}],[\"用匿名实现类表示的都可以用lambda表达式来写\",{\"1\":{\"2112\":1,\"2141\":1}}],[\"用被代理类对象进行实例化\",{\"1\":{\"2080\":1}}],[\"用newinstance调用空参构造器\",{\"1\":{\"2067\":1}}],[\"用objectinputstream类将磁盘文件中的对象还原为内存中的一个java对象\",{\"1\":{\"1895\":1}}],[\"用objectoutputstream类\",{\"1\":{\"1895\":1}}],[\"用最高位是1或0表示两个字节和一个字节\",{\"1\":{\"1861\":1,\"1863\":1}}],[\"用最高位表示正负\",{\"1\":{\"873\":1}}],[\"用一个字节的8位表示\",{\"1\":{\"1861\":1}}],[\"用一个字节的7位可以表示\",{\"1\":{\"1861\":1}}],[\"用一个符占位表示\",{\"1\":{\"1698\":1}}],[\"用以标示当前读写处的位置\",{\"1\":{\"1882\":1}}],[\"用以获取不同种类的数据\",{\"1\":{\"1773\":1}}],[\"用以返回一个实现了iterator接口的对象\",{\"1\":{\"1588\":1}}],[\"用这个类型声明变量\",{\"1\":{\"1700\":1}}],[\"用set来存放\",{\"1\":{\"1661\":1}}],[\"用实现类进行实例化\",{\"1\":{\"1583\":1}}],[\"用某种语言编写的一组指令的集合\",{\"1\":{\"1435\":1}}],[\"用p2保存了新对象的内存地址\",{\"1\":{\"1302\":1}}],[\"用v保存了对象实体所在内存空间的首地址\",{\"1\":{\"1300\":1}}],[\"用k保存了对象的标识符p1\",{\"1\":{\"1300\":1}}],[\"用abstract来修饰一个方法\",{\"1\":{\"1247\":1}}],[\"用abstract关键字来修饰一个类\",{\"1\":{\"1246\":1}}],[\"用其隐含实现一个接口或实现一个类\",{\"1\":{\"1214\":1}}],[\"用的方法也是一样的\",{\"1\":{\"1820\":1}}],[\"用的时候直接用第五种即可\",{\"1\":{\"2296\":1}}],[\"用的时候直接取即可\",{\"1\":{\"1369\":1}}],[\"用的时候就不能指定\",{\"1\":{\"1711\":1}}],[\"用的时候再定义\",{\"1\":{\"1698\":1}}],[\"用的要求不同\",{\"1\":{\"1555\":1}}],[\"用的比较多\",{\"1\":{\"1181\":1}}],[\"用的都是他的子类\",{\"1\":{\"523\":1}}],[\"用了不存在的索引\",{\"1\":{\"997\":1}}],[\"用逗号分隔\",{\"1\":{\"931\":2}}],[\"用单引号\",{\"1\":{\"854\":1}}],[\"用做专门用途的字符串\",{\"1\":{\"830\":1}}],[\"用wiodow打开cmd终端\",{\"1\":{\"813\":1}}],[\"用途\",{\"0\":{\"681\":1},\"1\":{\"2219\":1}}],[\"用与divide运算\",{\"1\":{\"535\":1}}],[\"用法未知\",{\"1\":{\"749\":1}}],[\"用法\",{\"0\":{\"496\":1,\"505\":1},\"1\":{\"749\":1,\"1264\":1,\"1293\":1}}],[\"用户认证\",{\"1\":{\"3209\":1}}],[\"用户管理的数据库\",{\"1\":{\"3198\":1}}],[\"用户所在的数据库\",{\"1\":{\"3198\":1}}],[\"用户无法访问实例\",{\"1\":{\"3182\":1}}],[\"用户验证\",{\"1\":{\"3180\":1}}],[\"用户创建的集合名字不能含有保留字符\",{\"1\":{\"3067\":1}}],[\"用户的装备\",{\"1\":{\"3027\":1}}],[\"用户的体验就比较差\",{\"1\":{\"2546\":1}}],[\"用户将以马斯克\",{\"1\":{\"2872\":1}}],[\"用户打开浏览器\",{\"1\":{\"2785\":1}}],[\"用户数据报协议udp\",{\"1\":{\"1954\":1}}],[\"用户线程\",{\"1\":{\"1463\":1}}],[\"用户同时在电脑手机上干多件事\",{\"1\":{\"1445\":1}}],[\"用户自定义异常类都是runtimeexception的子类\",{\"1\":{\"1363\":1}}],[\"用户可以使用jdk自带的jar命令创建或提取jar文件\",{\"1\":{\"2731\":1}}],[\"用户可以使用javabean将功能\",{\"1\":{\"1284\":1}}],[\"用户可以认为javabean提供了一种随时随地的复制和粘贴的功能\",{\"1\":{\"1284\":1}}],[\"用户从键盘输入内容\",{\"1\":{\"639\":1,\"760\":1}}],[\"用户\",{\"1\":{\"400\":1}}],[\"用户端应用\",{\"1\":{\"399\":1}}],[\"用户端\",{\"1\":{\"397\":1}}],[\"用户id\",{\"1\":{\"382\":1,\"3198\":1}}],[\"用户信息\",{\"1\":{\"381\":1}}],[\"用户表\",{\"0\":{\"381\":1}}],[\"用户表c端\",{\"1\":{\"374\":1}}],[\"用户名\",{\"0\":{\"2295\":1},\"1\":{\"375\":1,\"2292\":1,\"3193\":1,\"3198\":2,\"3199\":1,\"3200\":1}}],[\"用\",{\"0\":{\"160\":1},\"1\":{\"1178\":1,\"1996\":1,\"3114\":1}}],[\"用来设置索引的字段和索引的排序方式\",{\"1\":{\"3111\":1}}],[\"用来设置打印级别\",{\"1\":{\"262\":2}}],[\"用来自定很多属性\",{\"1\":{\"2963\":1}}],[\"用来判断是同一个用户发的请求\",{\"1\":{\"2820\":1}}],[\"用来判断指针后面还有没有集合元素\",{\"1\":{\"676\":1,\"1593\":1}}],[\"用来接收浏览器发送过来的请求\",{\"1\":{\"2755\":1}}],[\"用来接收长度为\",{\"1\":{\"1986\":1}}],[\"用来提交连接\",{\"1\":{\"2434\":1}}],[\"用来提交连接的事务\",{\"1\":{\"2434\":1}}],[\"用来检测连接是否有效的sql\",{\"1\":{\"2426\":1}}],[\"用来返回文档中的记录总数\",{\"1\":{\"3095\":1}}],[\"用来返回数据表中多条记录构成的集合\",{\"1\":{\"2400\":1}}],[\"用来返回一条记录的通用查询操作\",{\"1\":{\"2400\":1}}],[\"用来返回当前线程的实例名\",{\"1\":{\"1473\":1}}],[\"用来继承basedao接口\",{\"1\":{\"2396\":1}}],[\"用来规范数据表的操作\",{\"1\":{\"2396\":1}}],[\"用来专门操作某张表\",{\"1\":{\"2394\":1}}],[\"用来放结果集\",{\"1\":{\"2355\":1}}],[\"用来获取不同类型的值\",{\"1\":{\"2343\":1}}],[\"用来获取员工姓名的\",{\"1\":{\"2157\":1}}],[\"用来了解底层\",{\"1\":{\"2276\":1}}],[\"用来防止空指针异常\",{\"1\":{\"2249\":1}}],[\"用来操作集合类数据的\",{\"1\":{\"2187\":1}}],[\"用来执行一个更新\",{\"1\":{\"2435\":1}}],[\"用来执行一个函数\",{\"1\":{\"2133\":1}}],[\"用来执行函数体的载体\",{\"1\":{\"2137\":1}}],[\"用来唯一的标识一个资源\",{\"1\":{\"1995\":1}}],[\"用来将长度为\",{\"1\":{\"1986\":1}}],[\"用来对应ip地址\",{\"1\":{\"1936\":1}}],[\"用来对方法进行测试\",{\"1\":{\"1390\":1}}],[\"用来遍历list类型的集合\",{\"1\":{\"1746\":1}}],[\"用来启动线程\",{\"1\":{\"1470\":1}}],[\"用来启动springboot项目\",{\"1\":{\"74\":1}}],[\"用来创建和执行多线程\",{\"1\":{\"1467\":1}}],[\"用来存储一个一个的对象\",{\"1\":{\"1633\":1}}],[\"用来存储不同数据\",{\"1\":{\"1456\":1}}],[\"用来存放new出来的数组\",{\"1\":{\"978\":1}}],[\"用来存放标识符\",{\"1\":{\"978\":1}}],[\"用来声明默认值\",{\"1\":{\"1397\":1}}],[\"用来定义枚举类的\",{\"1\":{\"1376\":1}}],[\"用来初始化类\",{\"1\":{\"1276\":1}}],[\"用来修饰注解的注解为\",{\"1\":{\"1396\":1}}],[\"用来修饰属性\",{\"1\":{\"1107\":1,\"1222\":1}}],[\"用来修饰变量\",{\"1\":{\"1103\":1}}],[\"用来修饰方法\",{\"1\":{\"1102\":1}}],[\"用来调用其他的构造器\",{\"1\":{\"1082\":1}}],[\"用来限定对象对该类成员的访问权限\",{\"1\":{\"1061\":1}}],[\"用来输出一段话<\",{\"1\":{\"812\":1}}],[\"用来运行java的环境\",{\"1\":{\"776\":1}}],[\"用来替换正则表达式第一个匹配到的内容\",{\"1\":{\"742\":1}}],[\"用来替换匹配到的内容\",{\"1\":{\"741\":1}}],[\"用来替换的字符串\",{\"1\":{\"454\":1}}],[\"用来向后移动一次指针\",{\"1\":{\"677\":1,\"1592\":1}}],[\"用来扫描输入文本的类\",{\"1\":{\"637\":1,\"758\":1}}],[\"用来格式化和解析日期时间\",{\"1\":{\"480\":1}}],[\"用来指定最基础的日志输出级别\",{\"1\":{\"262\":1}}],[\"用来指定受此logger约束的某一个包或者具体的某一个类\",{\"1\":{\"262\":1}}],[\"用来配置日期格式\",{\"1\":{\"258\":1}}],[\"用来标记执行java\",{\"1\":{\"201\":1}}],[\"用来标注要使用\",{\"1\":{\"162\":1}}],[\"用来加载开发者自己开发的类\",{\"1\":{\"137\":1}}],[\"用来加载jar包中的类\",{\"1\":{\"137\":1}}],[\"用于简化数据库访问\",{\"1\":{\"3232\":1}}],[\"用于修改计数的额外选项\",{\"1\":{\"3095\":1}}],[\"用于修饰它支持的程序元素\",{\"1\":{\"1389\":1}}],[\"用于保存分片的相关信息\",{\"1\":{\"3060\":1}}],[\"用于保存具有\",{\"1\":{\"1661\":1}}],[\"用于范围比较的值\",{\"1\":{\"2938\":1}}],[\"用于开发时调试软件调用\",{\"1\":{\"2741\":1}}],[\"用于开启热部署\",{\"1\":{\"332\":1}}],[\"用于已发布的软件运行时调用\",{\"1\":{\"2741\":1}}],[\"用于打包与组件相关联的辅助资源\",{\"1\":{\"2736\":1}}],[\"用于发布和使用类库\",{\"1\":{\"2736\":1}}],[\"用于ajax的访问\",{\"1\":{\"2702\":1}}],[\"用于特殊查询的通用方法\",{\"1\":{\"2400\":1}}],[\"用于连接池\",{\"1\":{\"2387\":1}}],[\"用于获取关于\",{\"1\":{\"2344\":1}}],[\"用于执行\",{\"1\":{\"2308\":1}}],[\"用于执行静态\",{\"1\":{\"2308\":1}}],[\"用于给stream中元素做汇总的方法\",{\"1\":{\"2242\":1}}],[\"用于操作数据库的工具类\",{\"1\":{\"2404\":1}}],[\"用于操作数据源\",{\"1\":{\"2190\":1}}],[\"用于操作文件或目录的工具类\",{\"1\":{\"1920\":1}}],[\"用于访问某台服务器提供的服务\",{\"1\":{\"1996\":1}}],[\"用于监听客户端的请求\",{\"1\":{\"1973\":1}}],[\"用于将多个字符串串连成路径\",{\"1\":{\"1919\":1}}],[\"用于存储和读取基本数据类型数据或对象的处理流\",{\"1\":{\"1894\":1}}],[\"用于存放对象实例\",{\"1\":{\"1298\":1}}],[\"用于多种数据类型的输出\",{\"1\":{\"1872\":1}}],[\"用于数据的写出\",{\"1\":{\"1816\":1}}],[\"用于数组的初始化和填充\",{\"1\":{\"650\":1}}],[\"用于处理设备之间的数据传输\",{\"1\":{\"1773\":1}}],[\"用于处理可能产生的不同类型的异常对象\",{\"1\":{\"1337\":1}}],[\"用于遍历集合\",{\"1\":{\"1602\":1}}],[\"用于集合元素的遍历\",{\"1\":{\"1586\":1}}],[\"用于集合遍历\",{\"1\":{\"671\":1}}],[\"用于创建并返回不同类型的线程池\",{\"1\":{\"1567\":1}}],[\"用于指定被该元\",{\"1\":{\"1415\":1}}],[\"用于指定被修饰的\",{\"1\":{\"1412\":1}}],[\"用于传参\",{\"1\":{\"1150\":1}}],[\"用于对属性初始化\",{\"1\":{\"1068\":1}}],[\"用于对齐\",{\"1\":{\"253\":1}}],[\"用于跳过其所在循环语句块的一次执行\",{\"1\":{\"947\":1}}],[\"用于在内存中保存数据\",{\"1\":{\"819\":1}}],[\"用于方法需要抛出异常的情况\",{\"1\":{\"812\":1}}],[\"用于标注该方法的参数\",{\"1\":{\"812\":1}}],[\"用于标注该类的作者\",{\"1\":{\"811\":1}}],[\"用于标记与本类相关联的类\",{\"1\":{\"811\":1}}],[\"用于标记当前类版本\",{\"1\":{\"811\":1}}],[\"用于测试\",{\"1\":{\"1690\":1}}],[\"用于测试基javase语法\",{\"1\":{\"811\":1}}],[\"用于测试项目\",{\"1\":{\"23\":1}}],[\"用于快速链接到相关代码\",{\"1\":{\"810\":1}}],[\"用于把\",{\"1\":{\"461\":1}}],[\"用于后端与前端进行数据格式统一\",{\"1\":{\"370\":1}}],[\"用于安全\",{\"1\":{\"368\":1}}],[\"用于封装一组数据\",{\"1\":{\"129\":1}}],[\"ts\",{\"1\":{\"3156\":6}}],[\"tgz\",{\"1\":{\"3047\":1}}],[\"tf\",{\"1\":{\"2880\":2}}],[\"t可以为null\",{\"1\":{\"2254\":1}}],[\"t必须非空\",{\"1\":{\"2252\":1}}],[\"tcp网络编程示例\",{\"0\":{\"1978\":1}}],[\"tcp网络编程的服务器端的channel\",{\"1\":{\"1913\":1}}],[\"tcp网络编程的客户端的channel\",{\"1\":{\"1913\":1}}],[\"tcp编程\",{\"0\":{\"1967\":1}}],[\"tcp的四次挥手\",{\"0\":{\"1959\":1}}],[\"tcp的三次握手\",{\"0\":{\"1958\":1}}],[\"tcp协议用于实现面向连接的会话\",{\"1\":{\"1996\":1}}],[\"tcp协议进行通信的两个应用进程\",{\"1\":{\"1956\":1}}],[\"tcp协议\",{\"0\":{\"1956\":1}}],[\"tcp与udp\",{\"0\":{\"1953\":1}}],[\"tcp\",{\"0\":{\"1955\":1},\"1\":{\"1926\":1,\"1955\":3,\"1966\":2,\"1996\":1,\"2449\":1}}],[\"t3\",{\"1\":{\"1492\":2,\"1512\":2,\"1520\":2,\"1536\":2}}],[\"t2>\",{\"1\":{\"1722\":1,\"1725\":2,\"1726\":1}}],[\"t2\",{\"1\":{\"1492\":2,\"1509\":2,\"1512\":2,\"1520\":2,\"1536\":2,\"1556\":2,\"2161\":2,\"2162\":2}}],[\"t1\",{\"1\":{\"1492\":2,\"1509\":2,\"1512\":2,\"1520\":2,\"1536\":2,\"1556\":2,\"1562\":2,\"2161\":2,\"2162\":2}}],[\"t>>\",{\"1\":{\"684\":1,\"686\":1,\"687\":1}}],[\"t>\",{\"0\":{\"645\":1},\"1\":{\"593\":1,\"645\":1,\"684\":1,\"686\":3,\"687\":3,\"689\":2,\"1422\":1,\"2257\":1}}],[\"thin\",{\"1\":{\"2426\":1}}],[\"this表示的是对象\",{\"1\":{\"1519\":1}}],[\"this指向的是对象\",{\"1\":{\"1236\":1}}],[\"this随意\",{\"1\":{\"1135\":1}}],[\"this可以省略\",{\"1\":{\"1133\":1}}],[\"this就表明是哪个对象\",{\"1\":{\"1084\":1}}],[\"this使用时机\",{\"0\":{\"1083\":1}}],[\"this调用属性\",{\"1\":{\"1082\":1}}],[\"this调用构造器\",{\"0\":{\"1082\":1},\"1\":{\"1082\":1}}],[\"this的调用不要写成死循环\",{\"1\":{\"1082\":1}}],[\"this的使用\",{\"0\":{\"1079\":1}}],[\"this的作用\",{\"0\":{\"1078\":1}}],[\"this\",{\"0\":{\"1077\":1},\"1\":{\"370\":7,\"498\":1,\"501\":6,\"589\":1,\"811\":2,\"812\":1,\"1068\":2,\"1078\":1,\"1080\":4,\"1081\":3,\"1082\":7,\"1120\":1,\"1133\":1,\"1136\":1,\"1138\":1,\"1139\":3,\"1180\":4,\"1209\":2,\"1251\":1,\"1252\":3,\"1361\":1,\"1373\":2,\"1382\":1,\"1512\":1,\"1524\":1,\"1556\":1,\"1626\":3,\"1657\":2,\"1719\":4,\"1829\":1,\"1830\":1,\"1831\":1,\"2007\":4,\"2021\":1,\"2080\":1,\"2095\":1,\"2221\":2,\"2351\":4,\"2405\":1,\"2426\":1,\"2556\":1,\"2614\":1,\"2624\":1,\"2625\":1,\"2682\":1,\"2686\":1,\"2690\":1,\"2694\":1,\"3193\":1}}],[\"that\",{\"1\":{\"1813\":1,\"1816\":1,\"3073\":1,\"3161\":1,\"3168\":1}}],[\"theproxy\",{\"1\":{\"2092\":1}}],[\"the\",{\"1\":{\"811\":1,\"812\":2,\"2435\":4,\"2842\":1,\"3107\":1,\"3150\":1,\"3161\":3}}],[\"throttled\",{\"1\":{\"2920\":2}}],[\"throwable\",{\"1\":{\"1323\":1,\"2095\":1}}],[\"throw\",{\"1\":{\"371\":2,\"501\":1,\"508\":1,\"1318\":1,\"1319\":1,\"1358\":1,\"1360\":2,\"1361\":2,\"1657\":1,\"1658\":1,\"1688\":1,\"1828\":1,\"1829\":1,\"1830\":1,\"1831\":1}}],[\"throws的方式只是将异常抛给了方法的调用者\",{\"1\":{\"1353\":1}}],[\"throws使用示例\",{\"0\":{\"1352\":1}}],[\"throws只是用来抛出异常的\",{\"1\":{\"1350\":1}}],[\"throws介绍\",{\"0\":{\"1350\":1}}],[\"throws后面的异常类型可以是方法中产生的异常类型\",{\"1\":{\"1349\":1}}],[\"throws\",{\"0\":{\"1349\":1},\"1\":{\"371\":2,\"555\":1,\"571\":1,\"579\":1,\"581\":1,\"590\":1,\"591\":1,\"600\":1,\"601\":1,\"602\":1,\"604\":1,\"605\":1,\"606\":1,\"607\":1,\"608\":1,\"609\":1,\"610\":1,\"611\":1,\"617\":1,\"618\":1,\"626\":1,\"629\":1,\"812\":3,\"1318\":1,\"1350\":1,\"1352\":2,\"1361\":1,\"1432\":1,\"1562\":1,\"1858\":1,\"1944\":1,\"1964\":1,\"1965\":1,\"1971\":2,\"1972\":1,\"1975\":1,\"1977\":1,\"1994\":3,\"2004\":1,\"2005\":1,\"2009\":1,\"2010\":1,\"2048\":2,\"2095\":1,\"2297\":1,\"2299\":1,\"2300\":1,\"2303\":1,\"2327\":1,\"2364\":1,\"2376\":1,\"2391\":1,\"2424\":1,\"2427\":1,\"2434\":4,\"2435\":5,\"2438\":1,\"2439\":1,\"2440\":1,\"2441\":1,\"2442\":2,\"2443\":1,\"2531\":1,\"2551\":2,\"2552\":1,\"2553\":1,\"2556\":1,\"2564\":2,\"2566\":1,\"2598\":2,\"2601\":1,\"2602\":1,\"2610\":1,\"2614\":2,\"2624\":2,\"2625\":2,\"2640\":1,\"2655\":2,\"2661\":1,\"2662\":1,\"2697\":2}}],[\"threshold的4倍\",{\"1\":{\"1680\":1}}],[\"threshold\",{\"1\":{\"1680\":3}}],[\"thresholdfilter\",{\"1\":{\"262\":1}}],[\"threadpoolexecutor\",{\"1\":{\"1569\":2}}],[\"threadpool\",{\"1\":{\"1569\":1}}],[\"threadsafety\",{\"1\":{\"1536\":1}}],[\"thread和runnable\",{\"0\":{\"1496\":1}}],[\"threadmethodtest\",{\"1\":{\"1480\":1,\"1481\":1,\"1489\":1}}],[\"thread常用方法\",{\"0\":{\"1478\":1}}],[\"threadtest\",{\"1\":{\"1472\":1,\"1547\":1}}],[\"threadname\",{\"1\":{\"1468\":1}}],[\"thread类中声明sleep\",{\"1\":{\"1555\":1}}],[\"thread类就能创建一个新的线程\",{\"1\":{\"1494\":1}}],[\"thread类有一个构造方法是接收\",{\"1\":{\"1493\":1}}],[\"thread类时\",{\"1\":{\"1493\":1}}],[\"thread类来创建线程的\",{\"1\":{\"1492\":1}}],[\"thread类来实现多线程\",{\"1\":{\"1465\":1}}],[\"thread类\",{\"0\":{\"1467\":1},\"1\":{\"1467\":1}}],[\"thread类介绍\",{\"0\":{\"1466\":1}}],[\"thread\",{\"0\":{\"1439\":1},\"1\":{\"262\":4,\"1468\":4,\"1472\":3,\"1473\":2,\"1474\":2,\"1479\":1,\"1480\":4,\"1481\":4,\"1489\":2,\"1492\":7,\"1499\":1,\"1509\":4,\"1512\":7,\"1520\":8,\"1527\":1,\"1536\":7,\"1547\":4,\"1556\":5,\"1562\":3,\"1569\":1,\"2976\":1}}],[\"txt中出现了batman\",{\"1\":{\"576\":1}}],[\"txt中出现了abcd\",{\"1\":{\"576\":1}}],[\"txt中出现a\",{\"1\":{\"576\":1}}],[\"txt\",{\"1\":{\"302\":1,\"538\":2,\"540\":2,\"541\":2,\"542\":2,\"543\":1,\"544\":1,\"545\":1,\"546\":2,\"547\":2,\"551\":1,\"552\":1,\"555\":1,\"559\":4,\"564\":2,\"565\":1,\"566\":1,\"571\":1,\"574\":1,\"576\":1,\"581\":1,\"1335\":1,\"1344\":1,\"1352\":1,\"1767\":4,\"1797\":1,\"1800\":2,\"1804\":1,\"1805\":1,\"1812\":2,\"1816\":1,\"1817\":2,\"1834\":1,\"1847\":1,\"1848\":1,\"1851\":1,\"1853\":1,\"1858\":2,\"1873\":1,\"1878\":1,\"1879\":1,\"1891\":1,\"2694\":3}}],[\"tar包\",{\"1\":{\"3055\":1}}],[\"tar\",{\"1\":{\"3047\":1}}],[\"targetnamespace=\",{\"1\":{\"2781\":1}}],[\"target作为项目目录\",{\"1\":{\"2511\":1}}],[\"target中\",{\"1\":{\"1421\":1}}],[\"target的参数类型elementtype枚举值多了两个\",{\"1\":{\"1421\":1}}],[\"target元注解\",{\"1\":{\"1414\":1}}],[\"target\",{\"0\":{\"1412\":1},\"1\":{\"302\":2,\"430\":1,\"1390\":1,\"1408\":1,\"1412\":3,\"1421\":1,\"1426\":1,\"1427\":1,\"1432\":1,\"1468\":2,\"2572\":1}}],[\"tags\",{\"1\":{\"2959\":2,\"3153\":1}}],[\"tagline\",{\"1\":{\"2858\":1}}],[\"takenumber\",{\"1\":{\"1252\":2}}],[\"tan\",{\"1\":{\"522\":1}}],[\"ta\",{\"1\":{\"489\":1}}],[\"talk\",{\"1\":{\"1010\":1,\"1011\":1,\"1034\":2}}],[\"tal\",{\"1\":{\"485\":2}}],[\"tables\",{\"1\":{\"3066\":1}}],[\"table\",{\"1\":{\"341\":1,\"348\":1,\"375\":1,\"376\":1,\"377\":1,\"378\":1,\"379\":1,\"380\":1,\"381\":1,\"382\":1,\"383\":1,\"384\":1,\"385\":1,\"1673\":1,\"1680\":1,\"2310\":1,\"2311\":1,\"2371\":1,\"2387\":2,\"2391\":1,\"2961\":1,\"3031\":2}}],[\"task\",{\"1\":{\"1566\":1}}],[\"taskkill\",{\"1\":{\"202\":1}}],[\"tasklist\",{\"1\":{\"202\":1}}],[\"touch\",{\"1\":{\"3047\":1}}],[\"touppercase\",{\"0\":{\"418\":1},\"1\":{\"418\":2,\"1870\":1,\"2215\":2}}],[\"total\",{\"1\":{\"2901\":1,\"2908\":2,\"2910\":1,\"2915\":1,\"2920\":1,\"2926\":2,\"2930\":2,\"2957\":2,\"3015\":2}}],[\"tojsonstring\",{\"1\":{\"2838\":2}}],[\"topn\",{\"1\":{\"3096\":1}}],[\"top\",{\"1\":{\"2690\":2}}],[\"token\",{\"1\":{\"2689\":1}}],[\"took\",{\"1\":{\"2908\":1,\"2920\":1,\"2926\":1,\"2930\":1,\"2957\":1,\"3015\":1}}],[\"too\",{\"1\":{\"2362\":1}}],[\"toolkits\",{\"1\":{\"1090\":1}}],[\"tools\",{\"1\":{\"298\":1}}],[\"toset\",{\"1\":{\"2243\":2}}],[\"tostring在object中输出的是带对象类型的地址\",{\"1\":{\"1184\":1}}],[\"tostring的源码\",{\"0\":{\"1184\":1}}],[\"tostringcache\",{\"1\":{\"440\":1}}],[\"tostring\",{\"0\":{\"526\":1,\"642\":1,\"1183\":1,\"1187\":1},\"1\":{\"344\":1,\"425\":1,\"426\":2,\"501\":1,\"503\":1,\"508\":2,\"509\":1,\"526\":2,\"546\":1,\"547\":1,\"566\":1,\"595\":1,\"600\":1,\"601\":1,\"604\":1,\"605\":1,\"608\":1,\"609\":1,\"620\":1,\"624\":1,\"625\":1,\"642\":2,\"644\":1,\"645\":1,\"647\":2,\"650\":1,\"669\":1,\"753\":1,\"810\":1,\"998\":1,\"1176\":1,\"1184\":1,\"1185\":1,\"1186\":1,\"1192\":1,\"1373\":2,\"1374\":1,\"1379\":1,\"1383\":1,\"1404\":1,\"1853\":1,\"1918\":1,\"2007\":1,\"2045\":1,\"2048\":1,\"2986\":1,\"2987\":1}}],[\"tolist\",{\"1\":{\"2223\":1,\"2243\":2}}],[\"tolongfunction\",{\"1\":{\"2218\":1}}],[\"tolowercase\",{\"0\":{\"417\":1},\"1\":{\"417\":2}}],[\"ton\",{\"1\":{\"2221\":6}}],[\"todoublefunction\",{\"1\":{\"2216\":1}}],[\"todegrees\",{\"1\":{\"522\":1}}],[\"tofile\",{\"1\":{\"1918\":1}}],[\"toffset\",{\"1\":{\"414\":1}}],[\"toabsolutepath\",{\"1\":{\"1918\":1}}],[\"toarray\",{\"0\":{\"668\":1},\"1\":{\"669\":2,\"670\":2}}],[\"tohexstring\",{\"1\":{\"1184\":1}}],[\"tom不是int类型的\",{\"1\":{\"1707\":1}}],[\"tome\",{\"0\":{\"1301\":1}}],[\"tom\",{\"1\":{\"885\":3,\"1011\":1,\"1178\":2,\"1179\":2,\"1654\":3,\"1657\":2,\"1687\":1,\"1707\":1,\"1709\":1,\"1710\":1,\"2058\":1,\"2067\":1,\"2179\":1,\"2992\":1}}],[\"tomcat会自动将war包解压并对外提供web服务\",{\"1\":{\"2749\":1}}],[\"tomcat会将其常驻内存\",{\"1\":{\"2545\":1}}],[\"tomcat上的资源和编译后的java类路径\",{\"1\":{\"2691\":1}}],[\"tomcat在获取流的时候采用的编码是iso\",{\"1\":{\"2628\":1}}],[\"tomcat需要解析请求数据\",{\"1\":{\"2590\":1}}],[\"tomcat向之前发起请求的浏览器返回响应\",{\"1\":{\"2583\":1}}],[\"tomcat从response对象中拿到程序中设置的响应消息数据\",{\"1\":{\"2583\":1}}],[\"tomcat接收到请求\",{\"1\":{\"2583\":1}}],[\"tomcat中有一个defaultservlet\",{\"1\":{\"2577\":1}}],[\"tomcat识别\",{\"1\":{\"2524\":1}}],[\"tomcat都能解析\",{\"1\":{\"2523\":1}}],[\"tomcat安全\",{\"1\":{\"2520\":1}}],[\"tomcat集群\",{\"1\":{\"2520\":1}}],[\"tomcat架构\",{\"1\":{\"2520\":1}}],[\"tomcat添加导出方式\",{\"0\":{\"2518\":1}}],[\"tomcat导出方式介绍\",{\"0\":{\"2517\":1}}],[\"tomcat可能会运行多个项目\",{\"1\":{\"2468\":1}}],[\"tomcat默认访问index\",{\"1\":{\"2467\":1}}],[\"tomcat默认的端口是8080\",{\"1\":{\"2457\":1}}],[\"tomcat的模板的设置界面将不会出现下面两个选项\",{\"1\":{\"2519\":1}}],[\"tomcat的\",{\"1\":{\"2464\":1}}],[\"tomcat模式是utf8\",{\"1\":{\"2459\":1}}],[\"tomcat也被称为web容器\",{\"1\":{\"2450\":1}}],[\"tomcat是一个开源免费的轻量级web服务器\",{\"1\":{\"2450\":1}}],[\"tomcat介绍\",{\"0\":{\"2445\":1}}],[\"tomcat占用端口8080\",{\"1\":{\"1938\":1}}],[\"tomcat服务器配置\",{\"0\":{\"2502\":1}}],[\"tomcat服务器启动时\",{\"1\":{\"783\":1}}],[\"tomcat服务器代码也是java写的\",{\"1\":{\"108\":1}}],[\"tomcat本身也是对象\",{\"1\":{\"136\":1}}],[\"tomcat这个starter就可以\",{\"1\":{\"110\":1}}],[\"tomcat依赖的位置\",{\"0\":{\"109\":1}}],[\"tomcat<\",{\"1\":{\"99\":1,\"110\":1,\"2510\":1}}],[\"tomcat\",{\"0\":{\"2450\":1},\"1\":{\"11\":1,\"109\":1,\"2420\":2,\"2446\":1,\"2472\":1,\"2475\":1,\"2507\":1,\"2522\":1,\"2533\":1,\"2537\":1,\"2584\":2,\"2585\":1,\"2589\":1,\"2680\":1,\"2685\":1}}],[\"tointfunction\",{\"1\":{\"2217\":1}}],[\"toindex指定结束排序的下标\",{\"1\":{\"646\":1}}],[\"toindex\",{\"1\":{\"644\":2,\"646\":1,\"704\":1}}],[\"toinstant\",{\"1\":{\"461\":1}}],[\"toradians\",{\"1\":{\"522\":1}}],[\"toepochmilli\",{\"1\":{\"478\":2}}],[\"toepochmillion\",{\"0\":{\"478\":1}}],[\"tochararray\",{\"0\":{\"425\":1},\"1\":{\"425\":2}}],[\"to\",{\"1\":{\"390\":1,\"485\":1,\"486\":1,\"755\":1,\"2290\":1,\"2435\":1,\"2530\":1,\"3049\":1,\"3142\":1,\"3161\":2,\"3168\":1,\"3243\":1}}],[\"tbl\",{\"1\":{\"274\":1,\"341\":1,\"348\":1}}],[\"tbd\",{\"1\":{\"264\":1,\"294\":1,\"295\":1,\"337\":1,\"730\":1,\"731\":1,\"732\":1,\"733\":1,\"734\":1,\"3134\":1,\"3176\":1,\"3177\":1,\"3216\":1,\"3227\":1,\"3238\":1,\"3239\":1,\"3240\":1}}],[\"trows\",{\"0\":{\"1348\":1}}],[\"treeify\",{\"1\":{\"1680\":4}}],[\"tree\",{\"1\":{\"1639\":1,\"3103\":1}}],[\"treemap的构造器接收一个参数\",{\"1\":{\"1688\":1}}],[\"treemap判断\",{\"1\":{\"1666\":1,\"1685\":1}}],[\"treemap存储\",{\"1\":{\"1666\":1,\"1685\":1}}],[\"treemap\",{\"0\":{\"1666\":1,\"1684\":1},\"1\":{\"707\":1,\"1578\":1,\"1661\":1,\"1662\":1,\"1666\":1,\"1685\":1,\"1687\":2,\"1688\":2}}],[\"treeset底层使用\",{\"1\":{\"1685\":1}}],[\"treeset底层是红黑树\",{\"1\":{\"1655\":1}}],[\"treeset中\",{\"1\":{\"1656\":1}}],[\"treeset中不允许添加相同的对象\",{\"1\":{\"1655\":1}}],[\"treeset遍历数据\",{\"1\":{\"1655\":1}}],[\"treeset类新增了很多方法\",{\"1\":{\"1639\":1}}],[\"treeset\",{\"0\":{\"1639\":1,\"1655\":1},\"1\":{\"655\":1,\"1578\":1,\"1633\":1,\"1639\":4,\"1657\":2,\"1658\":2}}],[\"traffic\",{\"1\":{\"2860\":1}}],[\"transmission\",{\"1\":{\"1954\":1}}],[\"transfer\",{\"1\":{\"1863\":1}}],[\"transferdata\",{\"1\":{\"1264\":5}}],[\"transaction\",{\"1\":{\"2390\":4,\"2391\":1}}],[\"transact\",{\"1\":{\"1252\":3}}],[\"transient\",{\"1\":{\"440\":1}}],[\"trace\",{\"1\":{\"246\":1,\"262\":2,\"2563\":2}}],[\"try语句\",{\"0\":{\"2264\":1}}],[\"try中有return语句\",{\"1\":{\"1342\":1}}],[\"try\",{\"0\":{\"1336\":1,\"1339\":1,\"1340\":1,\"1353\":1,\"3078\":1},\"1\":{\"426\":2,\"555\":1,\"579\":2,\"1314\":1,\"1318\":1,\"1337\":2,\"1339\":1,\"1343\":1,\"1344\":2,\"1345\":1,\"1352\":1,\"1353\":1,\"1361\":1,\"1481\":2,\"1532\":1,\"1536\":1,\"1547\":2,\"1556\":1,\"1562\":1,\"1804\":2,\"1805\":2,\"1816\":2,\"1817\":3,\"1823\":3,\"1834\":2,\"1836\":3,\"1870\":2,\"1873\":1,\"1983\":1,\"1984\":1,\"1990\":1,\"2325\":3,\"2328\":2,\"2329\":1,\"2333\":1,\"2349\":1,\"2352\":1,\"2355\":1,\"2386\":1,\"2387\":3,\"2405\":4,\"2409\":7,\"2427\":1,\"2428\":1,\"3053\":1,\"3055\":1,\"3078\":1,\"3161\":1}}],[\"trim\",{\"0\":{\"419\":1},\"1\":{\"419\":2}}],[\"true或者false\",{\"1\":{\"3034\":1}}],[\"true=创建\",{\"1\":{\"2963\":1}}],[\"true=追加写\",{\"1\":{\"574\":1}}],[\"true表示没有与查询条件匹配的文档时创建新文档\",{\"1\":{\"3081\":1}}],[\"true表示成功\",{\"1\":{\"2885\":2}}],[\"true表示开启\",{\"1\":{\"2380\":1}}],[\"true表示公平的多线程\",{\"1\":{\"1533\":1}}],[\"true表示执行成功\",{\"1\":{\"666\":1}}],[\"true111\",{\"1\":{\"1198\":1}}],[\"true123\",{\"1\":{\"1192\":1}}],[\"true用1表示\",{\"1\":{\"860\":1}}],[\"true\",{\"0\":{\"938\":1},\"1\":{\"123\":4,\"248\":1,\"262\":1,\"371\":3,\"390\":1,\"404\":2,\"405\":1,\"413\":1,\"414\":1,\"415\":1,\"433\":1,\"498\":1,\"549\":1,\"550\":1,\"551\":1,\"552\":1,\"553\":1,\"559\":1,\"562\":1,\"574\":1,\"616\":1,\"617\":1,\"629\":1,\"648\":1,\"661\":1,\"662\":2,\"663\":1,\"664\":1,\"666\":1,\"676\":1,\"698\":1,\"716\":1,\"717\":1,\"719\":1,\"720\":1,\"743\":1,\"750\":1,\"752\":1,\"859\":1,\"877\":1,\"885\":2,\"938\":2,\"956\":3,\"1160\":1,\"1178\":3,\"1179\":1,\"1180\":10,\"1182\":2,\"1192\":3,\"1240\":1,\"1463\":1,\"1481\":1,\"1492\":1,\"1509\":1,\"1512\":1,\"1514\":1,\"1520\":3,\"1533\":1,\"1536\":2,\"1556\":1,\"1664\":2,\"1797\":1,\"1812\":1,\"1816\":1,\"1870\":1,\"1873\":1,\"1878\":1,\"1948\":1,\"2010\":3,\"2058\":1,\"2062\":1,\"2063\":2,\"2067\":1,\"2231\":1,\"2323\":1,\"2340\":1,\"2352\":1,\"2355\":1,\"2387\":1,\"2405\":2,\"2426\":1,\"2860\":1,\"2885\":2,\"2896\":1,\"2907\":2,\"2925\":2,\"2963\":3,\"2964\":3,\"2975\":1,\"3034\":1,\"3048\":3,\"3073\":1,\"3083\":1,\"3142\":4,\"3153\":3,\"3156\":1,\"3165\":1,\"3168\":1,\"3187\":7}}],[\"tier\",{\"1\":{\"2890\":1}}],[\"tinyblob\",{\"1\":{\"2360\":1}}],[\"tinyint\",{\"1\":{\"382\":2,\"2314\":1}}],[\"timed\",{\"1\":{\"2908\":1,\"2920\":1,\"2926\":1,\"2930\":1,\"2957\":1,\"3015\":1}}],[\"timebetweenevictionrunsmillis\",{\"1\":{\"2426\":1}}],[\"timebasedfilenamingandtriggeringpolicy>\",{\"1\":{\"262\":3}}],[\"timebasedrollingpolicy\",{\"1\":{\"262\":3}}],[\"timestamp\",{\"1\":{\"2314\":2,\"3156\":10,\"3159\":2,\"3160\":2,\"3186\":2,\"3187\":2}}],[\"time等\",{\"1\":{\"498\":1}}],[\"time为例\",{\"1\":{\"484\":1}}],[\"time`\",{\"1\":{\"375\":2,\"376\":2,\"377\":2,\"378\":2,\"379\":2,\"380\":2,\"382\":2,\"383\":1,\"384\":2}}],[\"time\",{\"1\":{\"277\":1,\"368\":1,\"461\":3,\"462\":5,\"477\":2,\"479\":2,\"483\":4,\"484\":1,\"485\":1,\"486\":2,\"2314\":2}}],[\"timeout>\",{\"1\":{\"2825\":1}}],[\"timeout>30<\",{\"1\":{\"2825\":1}}],[\"timeout=0\",{\"1\":{\"620\":1}}],[\"timeout\",{\"1\":{\"164\":1,\"170\":1,\"1948\":1}}],[\"title\",{\"1\":{\"200\":2,\"2907\":1,\"2908\":2,\"2925\":1,\"2926\":2,\"2930\":2}}],[\"tel\",{\"1\":{\"2964\":1,\"2965\":1}}],[\"telnet占用端口23\",{\"1\":{\"1938\":1}}],[\"terms\",{\"1\":{\"2956\":1,\"3014\":1}}],[\"termsupport\",{\"1\":{\"2103\":1}}],[\"term\",{\"1\":{\"2901\":1,\"2907\":1,\"2910\":1,\"2915\":1,\"2925\":1,\"3153\":1,\"3156\":1}}],[\"terminating\",{\"1\":{\"534\":1}}],[\"teacher\",{\"1\":{\"1163\":1}}],[\"ten\",{\"1\":{\"530\":2}}],[\"text=可以全文检索\",{\"1\":{\"2963\":1}}],[\"text\",{\"1\":{\"459\":1,\"482\":1,\"810\":2,\"1090\":1,\"1873\":1,\"2601\":1,\"2609\":1,\"2623\":1,\"2641\":2,\"2642\":1,\"2648\":1,\"2684\":1,\"2963\":2,\"2964\":1,\"2965\":1,\"3107\":1}}],[\"template\",{\"1\":{\"1251\":1,\"2483\":1}}],[\"templates中\",{\"1\":{\"2498\":1}}],[\"templates\",{\"1\":{\"149\":1,\"372\":1,\"2498\":1}}],[\"temporalaccessor\",{\"1\":{\"481\":1,\"482\":1,\"485\":1,\"486\":1,\"489\":1}}],[\"temporaladjuster\",{\"1\":{\"466\":1,\"467\":1,\"468\":1,\"475\":1}}],[\"temporal\",{\"1\":{\"462\":1,\"466\":1,\"467\":1,\"468\":1,\"475\":1,\"481\":1}}],[\"temp\",{\"1\":{\"125\":2,\"1044\":2,\"1045\":2}}],[\"tempdir\",{\"1\":{\"125\":1}}],[\"test>\",{\"1\":{\"3150\":1,\"3159\":1,\"3195\":1,\"3210\":1}}],[\"testwhileidle的判断依据\",{\"1\":{\"2426\":1}}],[\"testwhileidle\",{\"1\":{\"2426\":1}}],[\"testwhileidle都不会其作用\",{\"1\":{\"2426\":1}}],[\"testonreturn\",{\"1\":{\"2426\":2}}],[\"testonborrow\",{\"1\":{\"2426\":2}}],[\"testtransactionselect\",{\"1\":{\"2391\":1}}],[\"testtypedefine<\",{\"1\":{\"1422\":1}}],[\"testjdbctransaction\",{\"1\":{\"2387\":1}}],[\"testqueryvalue\",{\"1\":{\"2443\":1}}],[\"testquerylist\",{\"1\":{\"2441\":1}}],[\"testqueryinstance1\",{\"1\":{\"2442\":1}}],[\"testqueryinstance\",{\"1\":{\"2440\":1}}],[\"testquery\",{\"1\":{\"2365\":1}}],[\"testquery1\",{\"1\":{\"2349\":1}}],[\"testinsert3\",{\"1\":{\"2377\":1}}],[\"testinsert1\",{\"1\":{\"2376\":1}}],[\"testinsert\",{\"1\":{\"2325\":1,\"2364\":1,\"2409\":1,\"2438\":1}}],[\"testing\",{\"1\":{\"23\":1}}],[\"testconnection3\",{\"1\":{\"2299\":1,\"2300\":1}}],[\"testcontroller类的getit方法被成功执行\",{\"1\":{\"87\":1}}],[\"testcontroller\",{\"1\":{\"85\":1,\"104\":2}}],[\"testfilereaderfilewriter\",{\"1\":{\"1817\":1}}],[\"test注解\",{\"1\":{\"1390\":1}}],[\"test2\",{\"1\":{\"1344\":1,\"1858\":1,\"2004\":1,\"2010\":1}}],[\"test1\",{\"1\":{\"1339\":1,\"2009\":1,\"2467\":1}}],[\"test$none\",{\"1\":{\"620\":1}}],[\"testdeletebyid\",{\"1\":{\"2409\":1}}],[\"testdelete\",{\"1\":{\"347\":1,\"2439\":1}}],[\"testdb\",{\"1\":{\"234\":1}}],[\"testupdateconnectioncustomer\",{\"1\":{\"2409\":1}}],[\"testupdate\",{\"1\":{\"347\":1,\"2329\":1}}],[\"testsave\",{\"1\":{\"347\":1}}],[\"testgetmaxbirth\",{\"1\":{\"2409\":1}}],[\"testgetcount\",{\"1\":{\"2409\":1}}],[\"testgetcustomerbyid\",{\"1\":{\"2409\":1,\"2428\":1}}],[\"testgetby2\",{\"1\":{\"356\":1,\"357\":1}}],[\"testgetby\",{\"1\":{\"355\":1}}],[\"testgetbyid\",{\"1\":{\"347\":1}}],[\"testgetpage\",{\"1\":{\"352\":1}}],[\"testgetall\",{\"1\":{\"284\":1,\"347\":1,\"2409\":1}}],[\"test依赖\",{\"1\":{\"318\":1}}],[\"testmvc\",{\"1\":{\"234\":1}}],[\"testredis\",{\"1\":{\"234\":1}}],[\"test环境配置文件\",{\"1\":{\"228\":1}}],[\"test<\",{\"1\":{\"179\":1,\"318\":1,\"336\":1,\"389\":1}}],[\"test就是junit测试有关的模块\",{\"1\":{\"179\":1}}],[\"test\",{\"0\":{\"352\":1},\"1\":{\"74\":1,\"85\":1,\"87\":1,\"180\":2,\"181\":1,\"226\":1,\"228\":1,\"234\":1,\"271\":1,\"275\":2,\"281\":1,\"284\":2,\"307\":1,\"336\":1,\"347\":5,\"352\":1,\"355\":1,\"356\":1,\"357\":1,\"620\":1,\"729\":1,\"790\":2,\"792\":1,\"1019\":1,\"1044\":5,\"1045\":1,\"1054\":1,\"1056\":1,\"1160\":1,\"1184\":2,\"1218\":1,\"1249\":1,\"1536\":7,\"1747\":3,\"1748\":3,\"1755\":1,\"2008\":1,\"2144\":1,\"2294\":1,\"2297\":1,\"2299\":1,\"2300\":1,\"2302\":1,\"2425\":1,\"2743\":1,\"3062\":2,\"3187\":6}}],[\"t\",{\"0\":{\"645\":1,\"2252\":2,\"2254\":2,\"2260\":1},\"1\":{\"123\":1,\"425\":1,\"495\":1,\"504\":2,\"591\":1,\"629\":1,\"645\":1,\"647\":2,\"649\":1,\"651\":1,\"670\":2,\"686\":2,\"687\":2,\"690\":2,\"726\":2,\"727\":1,\"728\":2,\"729\":2,\"1422\":2,\"1423\":1,\"1732\":1,\"2045\":1,\"2048\":2,\"2144\":7,\"2156\":4,\"2159\":1,\"2162\":4,\"2198\":1,\"2200\":1,\"2202\":3,\"2219\":1,\"2239\":2,\"2252\":2,\"2254\":2,\"2259\":1,\"2260\":2,\"2355\":4,\"2405\":9,\"2435\":2,\"2986\":1,\"3000\":1,\"3003\":1,\"3005\":1,\"3006\":2,\"3011\":1,\"3018\":1,\"3019\":2,\"3156\":16,\"3159\":2,\"3160\":2,\"3186\":2,\"3187\":2}}],[\"t变成空格\",{\"1\":{\"123\":1}}],[\"ttps\",{\"1\":{\"81\":1}}],[\"type是string类型\",{\"1\":{\"2781\":1}}],[\"type>\",{\"1\":{\"2685\":1}}],[\"type>audio\",{\"1\":{\"2685\":1}}],[\"type=\",{\"1\":{\"2609\":3,\"2623\":5,\"2781\":6}}],[\"typearguments\",{\"1\":{\"2405\":2}}],[\"typedefine\",{\"1\":{\"1422\":1}}],[\"types\",{\"1\":{\"79\":1,\"2865\":2}}],[\"type\",{\"0\":{\"1422\":1,\"1423\":1},\"1\":{\"71\":1,\"273\":1,\"292\":1,\"293\":1,\"342\":1,\"343\":1,\"348\":1,\"390\":1,\"584\":1,\"594\":2,\"614\":2,\"811\":1,\"827\":2,\"1405\":2,\"1412\":3,\"1413\":1,\"1421\":4,\"1426\":1,\"1427\":1,\"1700\":1,\"2016\":1,\"2045\":2,\"2052\":1,\"2053\":2,\"2182\":1,\"2405\":2,\"2572\":1,\"2641\":1,\"2858\":1,\"2963\":3,\"2964\":3,\"2965\":3,\"2966\":1,\"2976\":1}}],[\"3b994547\",{\"1\":{\"3198\":1}}],[\"3999\",{\"1\":{\"2907\":1,\"2908\":2,\"2925\":1,\"2926\":2}}],[\"38\",{\"1\":{\"2232\":1,\"2233\":1}}],[\"3get\",{\"0\":{\"2061\":1}}],[\"35\",{\"1\":{\"1941\":1}}],[\"358\",{\"1\":{\"531\":1}}],[\"3ffe\",{\"1\":{\"1933\":1}}],[\"3f\",{\"1\":{\"1197\":1}}],[\"3=3\",{\"1\":{\"536\":10}}],[\"3=\",{\"1\":{\"536\":11}}],[\"3=4\",{\"1\":{\"536\":2}}],[\"30cee1936861\",{\"1\":{\"3198\":1}}],[\"306z\",{\"1\":{\"3159\":1}}],[\"3062446\",{\"1\":{\"3142\":1}}],[\"30000\",{\"1\":{\"3153\":1}}],[\"3019275\",{\"1\":{\"3049\":1}}],[\"30分钟就会自动掉线\",{\"1\":{\"2825\":1}}],[\"30分钟\",{\"1\":{\"2825\":1}}],[\"302\",{\"1\":{\"2659\":1,\"2661\":1}}],[\"302585092994046\",{\"1\":{\"521\":1}}],[\"30亿都在北美\",{\"1\":{\"1933\":1}}],[\"30\",{\"1\":{\"513\":1,\"617\":2,\"1709\":1,\"3160\":2}}],[\"345=bb\",{\"1\":{\"1683\":1}}],[\"345\",{\"1\":{\"1683\":1}}],[\"34\",{\"1\":{\"479\":1,\"534\":1,\"536\":4,\"1185\":1,\"2166\":1,\"2226\":2}}],[\"3784\",{\"1\":{\"3156\":1}}],[\"37才支持批处理\",{\"1\":{\"2375\":1}}],[\"37\",{\"1\":{\"473\":3}}],[\"33\",{\"1\":{\"536\":8,\"1657\":2}}],[\"333\",{\"1\":{\"472\":1}}],[\"3388685877147921107l\",{\"1\":{\"440\":1}}],[\"3306\",{\"1\":{\"267\":1,\"271\":1,\"277\":1,\"281\":1,\"341\":1,\"390\":1,\"2294\":1,\"2297\":1,\"2299\":1,\"2300\":1,\"2302\":1,\"2425\":1,\"2426\":1}}],[\"3已派送\",{\"1\":{\"384\":1}}],[\"3201\",{\"1\":{\"1933\":1}}],[\"321\",{\"1\":{\"636\":2,\"781\":1}}],[\"328000000\",{\"1\":{\"471\":1}}],[\"32\",{\"1\":{\"375\":2,\"378\":1,\"379\":3,\"382\":3,\"1657\":1,\"1687\":1,\"2236\":1,\"2846\":1,\"2858\":1}}],[\"3190675085212945\",{\"1\":{\"513\":1}}],[\"31\",{\"1\":{\"288\":1,\"529\":1,\"640\":1,\"761\":1,\"1944\":1}}],[\"31+08\",{\"1\":{\"123\":1}}],[\"3mb\",{\"1\":{\"258\":1}}],[\"3级常用于项目经理进行整体项目属性调控\",{\"1\":{\"217\":1}}],[\"3级与4级用于系统开发阶段设置通用属性\",{\"1\":{\"217\":1}}],[\"3级\",{\"1\":{\"216\":1,\"217\":1}}],[\"3\",{\"0\":{\"23\":1,\"69\":1,\"73\":1,\"78\":1,\"83\":1,\"87\":1,\"95\":1,\"101\":1,\"105\":1,\"111\":1,\"115\":1,\"124\":1,\"129\":1,\"130\":1,\"131\":1,\"132\":2,\"140\":1,\"141\":1,\"142\":1,\"143\":2,\"147\":1,\"160\":1,\"162\":1,\"163\":1,\"164\":1,\"172\":1,\"176\":1,\"177\":1,\"181\":1,\"187\":1,\"191\":1,\"192\":1,\"193\":1,\"200\":1,\"206\":1,\"208\":1,\"212\":1,\"218\":1,\"222\":1,\"223\":2,\"235\":1,\"236\":1,\"237\":1,\"238\":2,\"239\":1,\"243\":1,\"248\":1,\"253\":1,\"258\":1,\"262\":1,\"264\":1,\"272\":1,\"273\":1,\"274\":1,\"275\":2,\"282\":1,\"283\":1,\"284\":1,\"285\":1,\"300\":1,\"306\":1,\"312\":1,\"318\":1,\"323\":1,\"332\":1,\"337\":1,\"342\":1,\"345\":1,\"346\":1,\"347\":1,\"348\":2,\"352\":1,\"356\":1,\"361\":1,\"366\":1,\"370\":1,\"377\":1,\"389\":1,\"394\":1,\"405\":1,\"409\":1,\"413\":1,\"419\":1,\"425\":1,\"431\":1,\"434\":1,\"441\":1,\"446\":1,\"453\":1,\"457\":1,\"461\":1,\"468\":1,\"470\":1,\"478\":1,\"483\":1,\"484\":1,\"485\":1,\"494\":1,\"498\":1,\"503\":1,\"507\":1,\"508\":1,\"509\":1,\"514\":1,\"526\":1,\"533\":1,\"542\":1,\"551\":1,\"557\":1,\"569\":1,\"570\":1,\"577\":1,\"588\":1,\"591\":1,\"602\":1,\"606\":1,\"615\":1,\"622\":1,\"635\":1,\"640\":1,\"646\":1,\"652\":1,\"659\":1,\"678\":1,\"684\":1,\"699\":1,\"713\":1,\"728\":1,\"743\":1,\"750\":1,\"761\":1,\"765\":1,\"778\":1,\"780\":1,\"781\":1,\"782\":1,\"788\":1,\"794\":1,\"795\":1,\"796\":1,\"797\":1,\"798\":2,\"803\":1,\"807\":1,\"812\":1,\"820\":1,\"821\":1,\"822\":1,\"823\":2,\"832\":1,\"840\":1,\"846\":1,\"854\":1,\"860\":1,\"866\":1,\"867\":1,\"873\":1,\"878\":1,\"885\":1,\"893\":1,\"897\":1,\"905\":1,\"909\":1,\"915\":1,\"922\":1,\"924\":1,\"928\":1,\"937\":1,\"942\":1,\"948\":1,\"956\":1,\"961\":1,\"972\":1,\"979\":1,\"986\":1,\"990\":1,\"1004\":1,\"1009\":1,\"1026\":1,\"1030\":1,\"1039\":1,\"1043\":1,\"1044\":1,\"1045\":1,\"1049\":1,\"1050\":1,\"1057\":1,\"1058\":1,\"1063\":1,\"1070\":1,\"1082\":1,\"1088\":1,\"1094\":1,\"1102\":1,\"1106\":1,\"1114\":1,\"1120\":1,\"1126\":1,\"1128\":1,\"1135\":1,\"1136\":1,\"1137\":1,\"1138\":1,\"1139\":2,\"1140\":1,\"1151\":1,\"1152\":1,\"1157\":1,\"1167\":1,\"1172\":1,\"1177\":1,\"1178\":1,\"1179\":1,\"1180\":2,\"1181\":1,\"1182\":1,\"1186\":1,\"1191\":1,\"1203\":1,\"1207\":1,\"1217\":1,\"1218\":1,\"1219\":1,\"1224\":1,\"1229\":1,\"1234\":1,\"1241\":1,\"1248\":1,\"1259\":1,\"1270\":1,\"1278\":1,\"1279\":1,\"1280\":1,\"1285\":1,\"1292\":1,\"1293\":1,\"1302\":1,\"1304\":1,\"1308\":1,\"1309\":1,\"1313\":1,\"1319\":1,\"1321\":1,\"1325\":1,\"1329\":1,\"1330\":1,\"1331\":1,\"1336\":2,\"1339\":1,\"1348\":1,\"1352\":1,\"1360\":1,\"1365\":1,\"1370\":1,\"1378\":1,\"1390\":1,\"1394\":1,\"1395\":1,\"1396\":1,\"1397\":2,\"1398\":1,\"1406\":1,\"1412\":1,\"1413\":1,\"1414\":1,\"1427\":1,\"1428\":1,\"1429\":1,\"1430\":2,\"1439\":1,\"1452\":1,\"1454\":1,\"1463\":1,\"1469\":1,\"1472\":1,\"1473\":1,\"1474\":1,\"1487\":1,\"1495\":1,\"1496\":1,\"1497\":1,\"1498\":1,\"1499\":2,\"1500\":1,\"1507\":1,\"1515\":1,\"1521\":1,\"1522\":1,\"1526\":1,\"1532\":1,\"1533\":1,\"1534\":1,\"1535\":2,\"1542\":1,\"1546\":1,\"1553\":1,\"1561\":1,\"1566\":1,\"1574\":1,\"1580\":1,\"1585\":1,\"1589\":1,\"1593\":1,\"1597\":1,\"1604\":1,\"1614\":1,\"1619\":1,\"1626\":1,\"1627\":1,\"1628\":1,\"1629\":1,\"1635\":1,\"1636\":1,\"1637\":1,\"1644\":1,\"1649\":1,\"1658\":1,\"1663\":1,\"1664\":1,\"1665\":1,\"1666\":2,\"1667\":1,\"1668\":1,\"1675\":1,\"1679\":1,\"1692\":1,\"1701\":1,\"1702\":1,\"1703\":1,\"1711\":1,\"1717\":1,\"1721\":1,\"1725\":1,\"1731\":1,\"1735\":1,\"1739\":1,\"1745\":1,\"1746\":1,\"1747\":1,\"1748\":1,\"1749\":2,\"1753\":1,\"1757\":1,\"1762\":1,\"1769\":1,\"1775\":1,\"1781\":1,\"1789\":1,\"1802\":1,\"1804\":1,\"1808\":1,\"1814\":1,\"1816\":1,\"1823\":1,\"1830\":1,\"1835\":1,\"1843\":1,\"1849\":1,\"1850\":1,\"1851\":1,\"1852\":2,\"1857\":1,\"1862\":1,\"1870\":1,\"1877\":1,\"1885\":1,\"1886\":1,\"1887\":1,\"1897\":1,\"1898\":1,\"1899\":1,\"1900\":2,\"1901\":1,\"1909\":1,\"1915\":1,\"1916\":1,\"1917\":1,\"1926\":1,\"1935\":1,\"1946\":1,\"1949\":1,\"1956\":1,\"1963\":1,\"1964\":1,\"1965\":1,\"1970\":1,\"1971\":1,\"1972\":1,\"1977\":1,\"1983\":1,\"1990\":1,\"2001\":1,\"2009\":1,\"2014\":1,\"2020\":1,\"2023\":1,\"2028\":1,\"2033\":1,\"2039\":1,\"2045\":1,\"2052\":1,\"2066\":1,\"2067\":1,\"2077\":1,\"2081\":1,\"2088\":1,\"2089\":1,\"2090\":1,\"2091\":2,\"2092\":1,\"2096\":1,\"2101\":1,\"2105\":1,\"2113\":1,\"2124\":1,\"2131\":1,\"2140\":1,\"2150\":1,\"2160\":1,\"2161\":1,\"2162\":1,\"2172\":1,\"2173\":1,\"2174\":1,\"2190\":1,\"2200\":1,\"2207\":1,\"2212\":1,\"2218\":1,\"2220\":1,\"2221\":1,\"2222\":1,\"2223\":2,\"2224\":1,\"2231\":1,\"2249\":1,\"2254\":1,\"2258\":1,\"2259\":1,\"2260\":1,\"2271\":1,\"2279\":1,\"2280\":1,\"2281\":1,\"2282\":2,\"2289\":1,\"2295\":1,\"2299\":1,\"2304\":1,\"2305\":1,\"2309\":1,\"2310\":1,\"2311\":1,\"2318\":1,\"2329\":1,\"2333\":1,\"2340\":1,\"2341\":1,\"2342\":1,\"2343\":1,\"2355\":1,\"2356\":1,\"2357\":1,\"2358\":2,\"2362\":1,\"2370\":1,\"2372\":1,\"2382\":1,\"2385\":1,\"2386\":1,\"2387\":1,\"2388\":1,\"2389\":1,\"2390\":1,\"2396\":1,\"2404\":1,\"2409\":1,\"2418\":1,\"2425\":1,\"2433\":1,\"2440\":1,\"2448\":1,\"2454\":1,\"2461\":1,\"2467\":1,\"2468\":1,\"2487\":1,\"2488\":1,\"2489\":1,\"2490\":1,\"2491\":2,\"2495\":1,\"2502\":1,\"2507\":1,\"2511\":1,\"2521\":1,\"2524\":1,\"2527\":1,\"2532\":1,\"2538\":1,\"2542\":1,\"2543\":2,\"2549\":1,\"2554\":1,\"2560\":1,\"2568\":1,\"2572\":1,\"2576\":1,\"2580\":1,\"2585\":1,\"2590\":1,\"2594\":1,\"2602\":1,\"2608\":1,\"2609\":1,\"2610\":1,\"2615\":1,\"2620\":1,\"2622\":1,\"2623\":1,\"2624\":1,\"2630\":1,\"2633\":1,\"2637\":1,\"2641\":1,\"2648\":1,\"2649\":1,\"2653\":1,\"2660\":1,\"2661\":1,\"2662\":1,\"2663\":2,\"2669\":1,\"2673\":1,\"2682\":1,\"2686\":1,\"2694\":1,\"2702\":1,\"2711\":1,\"2716\":1,\"2726\":1,\"2733\":1,\"2745\":1,\"2749\":1,\"2756\":1,\"2760\":1,\"2765\":1,\"2766\":1,\"2770\":1,\"2776\":1,\"2777\":1,\"2778\":1,\"2779\":2,\"2787\":1,\"2795\":1,\"2797\":1,\"2798\":1,\"2799\":1,\"2803\":1,\"2814\":1,\"2818\":1,\"2831\":1,\"2838\":1,\"2844\":1,\"2850\":1,\"2857\":1,\"2862\":1,\"2865\":1,\"2869\":1,\"2878\":1,\"2885\":1,\"2890\":1,\"2901\":1,\"2907\":1,\"2917\":1,\"2921\":1,\"2925\":1,\"2931\":1,\"2932\":1,\"2967\":1,\"2974\":1,\"2978\":1,\"2979\":2,\"2989\":1,\"3016\":1,\"3024\":1,\"3026\":1,\"3027\":1,\"3028\":2,\"3033\":1,\"3042\":1,\"3043\":1,\"3044\":1,\"3048\":1,\"3052\":1,\"3057\":1,\"3062\":1,\"3068\":1,\"3074\":1,\"3078\":1,\"3083\":1,\"3092\":1,\"3097\":1,\"3101\":1,\"3107\":1,\"3113\":1,\"3115\":1,\"3116\":1,\"3117\":1,\"3121\":1,\"3127\":1,\"3132\":1,\"3139\":1,\"3144\":1,\"3149\":1,\"3161\":1,\"3162\":1,\"3173\":1,\"3174\":1,\"3175\":1,\"3178\":1,\"3181\":1,\"3182\":1,\"3183\":1,\"3184\":2,\"3188\":1,\"3191\":1,\"3197\":1,\"3198\":1,\"3208\":2,\"3211\":1,\"3212\":1,\"3213\":1,\"3216\":1,\"3221\":1,\"3226\":1,\"3230\":1,\"3234\":1,\"3255\":1,\"3260\":1,\"3266\":1,\"3272\":1},\"1\":{\"73\":1,\"86\":1,\"99\":2,\"123\":1,\"196\":1,\"200\":2,\"212\":1,\"225\":2,\"251\":1,\"277\":1,\"288\":1,\"297\":1,\"299\":1,\"403\":1,\"408\":1,\"409\":1,\"472\":1,\"486\":5,\"501\":1,\"503\":5,\"509\":4,\"517\":2,\"519\":1,\"520\":1,\"521\":1,\"534\":2,\"536\":12,\"538\":1,\"566\":2,\"577\":1,\"613\":1,\"621\":1,\"642\":2,\"644\":2,\"645\":3,\"646\":2,\"647\":3,\"648\":2,\"676\":1,\"677\":1,\"678\":2,\"682\":3,\"683\":5,\"684\":4,\"685\":3,\"686\":1,\"687\":1,\"688\":1,\"689\":3,\"699\":1,\"704\":1,\"718\":1,\"739\":1,\"741\":2,\"742\":3,\"787\":1,\"802\":1,\"811\":1,\"813\":1,\"849\":1,\"863\":1,\"868\":1,\"869\":1,\"907\":1,\"928\":1,\"971\":4,\"972\":1,\"974\":1,\"979\":1,\"984\":4,\"985\":1,\"986\":1,\"988\":2,\"989\":3,\"990\":4,\"991\":2,\"997\":1,\"998\":1,\"1035\":1,\"1063\":1,\"1128\":3,\"1191\":1,\"1194\":1,\"1197\":1,\"1240\":1,\"1241\":1,\"1266\":1,\"1320\":1,\"1323\":1,\"1327\":1,\"1330\":1,\"1341\":2,\"1343\":3,\"1351\":1,\"1373\":1,\"1472\":1,\"1484\":1,\"1492\":1,\"1502\":1,\"1521\":1,\"1547\":1,\"1562\":1,\"1569\":1,\"1598\":1,\"1604\":1,\"1677\":1,\"1692\":1,\"1709\":5,\"1710\":1,\"1753\":1,\"1777\":1,\"1782\":1,\"1804\":1,\"1816\":1,\"1817\":1,\"1823\":2,\"1836\":1,\"1853\":1,\"1858\":1,\"1864\":1,\"1878\":1,\"1879\":1,\"1888\":1,\"1891\":1,\"1903\":1,\"1904\":1,\"1908\":1,\"1909\":1,\"1958\":1,\"1959\":1,\"1972\":1,\"1977\":1,\"2004\":1,\"2010\":1,\"2025\":1,\"2031\":1,\"2032\":1,\"2045\":1,\"2048\":1,\"2058\":1,\"2063\":1,\"2067\":1,\"2144\":1,\"2145\":1,\"2198\":1,\"2200\":2,\"2212\":1,\"2213\":1,\"2214\":1,\"2221\":1,\"2239\":1,\"2240\":1,\"2281\":1,\"2290\":1,\"2297\":1,\"2299\":1,\"2300\":2,\"2303\":1,\"2308\":2,\"2312\":1,\"2319\":1,\"2322\":1,\"2325\":2,\"2327\":1,\"2329\":1,\"2333\":1,\"2334\":1,\"2347\":3,\"2349\":2,\"2352\":4,\"2355\":4,\"2364\":2,\"2365\":1,\"2376\":1,\"2377\":1,\"2386\":1,\"2387\":1,\"2390\":1,\"2391\":1,\"2405\":2,\"2407\":1,\"2408\":1,\"2409\":1,\"2424\":1,\"2439\":1,\"2457\":1,\"2485\":1,\"2507\":1,\"2522\":1,\"2530\":1,\"2536\":1,\"2540\":1,\"2541\":2,\"2542\":1,\"2558\":2,\"2574\":1,\"2575\":1,\"2576\":2,\"2577\":2,\"2583\":1,\"2588\":1,\"2592\":2,\"2596\":1,\"2604\":1,\"2618\":2,\"2619\":1,\"2620\":1,\"2624\":1,\"2627\":1,\"2635\":1,\"2636\":1,\"2646\":1,\"2648\":1,\"2651\":1,\"2657\":1,\"2761\":1,\"2799\":1,\"2864\":1,\"2868\":1,\"2878\":2,\"2879\":3,\"2880\":3,\"2906\":1,\"2910\":1,\"2924\":1,\"2948\":1,\"2949\":2,\"3034\":2,\"3056\":1,\"3057\":1,\"3133\":1,\"3148\":1,\"3159\":1,\"3205\":1,\"3206\":1,\"3224\":1}}],[\"软件安装目录\",{\"1\":{\"3139\":1}}],[\"软件是由\",{\"1\":{\"2968\":1}}],[\"软件是为了完成特定的功能\",{\"1\":{\"1435\":2}}],[\"软件基金会\",{\"1\":{\"2844\":1}}],[\"软件\",{\"1\":{\"1924\":1}}],[\"软件就会显得很卡\",{\"1\":{\"1446\":1}}],[\"软件=程序+文档=数据结构+算法+文档\",{\"1\":{\"1435\":1}}],[\"软件运行方式\",{\"0\":{\"771\":1}}],[\"软件环境\",{\"0\":{\"23\":1}}],[\"软件环境搭建\",{\"1\":{\"22\":1}}],[\"软件开发流程\",{\"0\":{\"21\":1}}],[\"软件开发介绍\",{\"0\":{\"20\":1}}],[\"编辑器也会报错\",{\"1\":{\"2108\":1}}],[\"编译错误\",{\"1\":{\"1753\":1,\"1755\":1,\"1756\":1,\"1757\":1}}],[\"编译异常\",{\"1\":{\"1360\":1}}],[\"编译期间\",{\"1\":{\"1323\":1}}],[\"编译器会给相应的提示信息\",{\"1\":{\"1425\":1}}],[\"编译器直接丢弃这种策略的注释\",{\"1\":{\"1411\":1}}],[\"编译器将annotation存储于class文件中\",{\"1\":{\"1406\":1}}],[\"编译器将annotation存储于类对应的\",{\"1\":{\"1406\":1}}],[\"编译器将\",{\"1\":{\"1406\":2}}],[\"编译器处理完后\",{\"1\":{\"1406\":1}}],[\"编译器处理完之后就没有该annotation信息了\",{\"1\":{\"1406\":1}}],[\"编译器处理完之后\",{\"1\":{\"1406\":1}}],[\"编译器要求java程序必须捕获或声明所有编译时异常\",{\"1\":{\"1324\":1}}],[\"编译器就已经确定了所要调用的方法\",{\"1\":{\"1159\":1}}],[\"编译器根据方法不同的参数表\",{\"1\":{\"1159\":1}}],[\"编译时会报错\",{\"1\":{\"1360\":1}}],[\"编译时异常\",{\"0\":{\"1324\":1,\"1335\":1},\"1\":{\"1323\":1,\"1347\":1}}],[\"编译时异常和运行时异常的不同处理\",{\"0\":{\"1347\":1}}],[\"编译时异常和运行时异常\",{\"1\":{\"1323\":1}}],[\"编译时是不报错的\",{\"1\":{\"1172\":1}}],[\"编译时e为person\",{\"1\":{\"1157\":1}}],[\"编译时类型与运行时类型\",{\"0\":{\"1157\":1}}],[\"编译时类型由声明该变量时使用的类型决定\",{\"1\":{\"1147\":1}}],[\"编译时类型和运行时类型不一致\",{\"1\":{\"1147\":1}}],[\"编译时类型和运行时类型\",{\"1\":{\"1147\":1}}],[\"编译看左边\",{\"1\":{\"1147\":1}}],[\"编译不通过\",{\"1\":{\"1015\":1,\"1419\":1,\"1721\":1,\"1737\":1}}],[\"编译报错\",{\"1\":{\"868\":2,\"1753\":1}}],[\"编译正常\",{\"1\":{\"868\":1}}],[\"编译失败\",{\"1\":{\"867\":1,\"893\":1}}],[\"编译后java类\",{\"1\":{\"2475\":1}}],[\"编译后的项目目录\",{\"0\":{\"2511\":1}}],[\"编译后的java字节码文件和resources的资源文件\",{\"1\":{\"2479\":1}}],[\"编译后的java字节码文件目录\",{\"1\":{\"2474\":1}}],[\"编译后的文件以代码中的类名作为文件名\",{\"1\":{\"792\":1}}],[\"编译后\",{\"1\":{\"803\":1}}],[\"编译后生成了两个class文件\",{\"0\":{\"801\":1}}],[\"编译成功后当前路径下会多出很多文件\",{\"1\":{\"813\":1}}],[\"编译成功后\",{\"1\":{\"792\":1}}],[\"编译代码\",{\"0\":{\"792\":1}}],[\"编译为class文件\",{\"1\":{\"790\":1}}],[\"编译\",{\"1\":{\"790\":1}}],[\"编译执行\",{\"0\":{\"789\":1}}],[\"编写xml\",{\"0\":{\"2779\":1}}],[\"编写其他的业务代码\",{\"1\":{\"2625\":1}}],[\"编写格式\",{\"0\":{\"2564\":1}}],[\"编写预编译sql字符串\",{\"1\":{\"2319\":1}}],[\"编写sql语句\",{\"1\":{\"2318\":1}}],[\"编写难度更低\",{\"1\":{\"2282\":1}}],[\"编写到扩展名为\",{\"1\":{\"790\":1}}],[\"编写\",{\"1\":{\"790\":1}}],[\"编写测试用例\",{\"1\":{\"22\":1}}],[\"编程语言介绍\",{\"0\":{\"772\":1}}],[\"编程期调试代码\",{\"1\":{\"241\":1}}],[\"编码方式\",{\"1\":{\"1863\":1}}],[\"编码原理\",{\"0\":{\"1862\":1}}],[\"编码表的由来\",{\"0\":{\"1860\":1}}],[\"编码和解码\",{\"1\":{\"426\":1}}],[\"编码\",{\"1\":{\"378\":1,\"426\":1,\"1843\":1,\"2772\":1}}],[\"编号9\",{\"1\":{\"10\":1}}],[\"编号8\",{\"1\":{\"10\":1}}],[\"编号7\",{\"1\":{\"10\":1}}],[\"编号6\",{\"1\":{\"10\":1}}],[\"编号5\",{\"1\":{\"10\":1}}],[\"编号4\",{\"1\":{\"10\":1}}],[\"编号3\",{\"1\":{\"10\":1}}],[\"编号2\",{\"1\":{\"10\":1}}],[\"编号13\",{\"1\":{\"10\":1}}],[\"编号12\",{\"1\":{\"10\":1}}],[\"编号11\",{\"1\":{\"10\":1}}],[\"编号1\",{\"1\":{\"10\":1}}],[\"编号0\",{\"1\":{\"10\":1}}],[\"编号顺序\",{\"1\":{\"10\":1}}],[\"技术\",{\"1\":{\"2278\":1}}],[\"技术选型\",{\"0\":{\"398\":1}}],[\"技术选型等\",{\"1\":{\"22\":1}}],[\"技术栈的核心\",{\"1\":{\"2843\":1}}],[\"技术栈\",{\"1\":{\"372\":1}}],[\"技术栈导航\",{\"0\":{\"9\":1}}],[\"2ck23\",{\"1\":{\"3195\":1}}],[\"240z\",{\"1\":{\"3160\":1}}],[\"24\",{\"1\":{\"3159\":1}}],[\"247\",{\"1\":{\"1944\":1}}],[\"2>\",{\"1\":{\"3075\":1}}],[\"2通过resultsetmetadata获取结果集中的列数\",{\"1\":{\"2355\":1}}],[\"2将数据封装为一个对象\",{\"1\":{\"2349\":1}}],[\"2getdeclaredfield\",{\"0\":{\"2060\":1}}],[\"2在java\",{\"1\":{\"1917\":1}}],[\"2为了弥补这种不足\",{\"1\":{\"1916\":1}}],[\"2^30\",{\"1\":{\"1680\":1}}],[\"2l\",{\"1\":{\"1423\":1}}],[\"2字节\",{\"1\":{\"852\":1}}],[\"2种\",{\"0\":{\"843\":1}}],[\"2个\",{\"1\":{\"1047\":1}}],[\"2个参数\",{\"1\":{\"697\":1,\"698\":1}}],[\"2个字节的unicode码\",{\"1\":{\"565\":1}}],[\"2~36\",{\"1\":{\"640\":1,\"761\":1}}],[\"26\",{\"1\":{\"488\":1,\"489\":1,\"3156\":6}}],[\"210\",{\"1\":{\"1941\":1}}],[\"2113\",{\"1\":{\"1185\":1}}],[\"21323232323232332323\",{\"1\":{\"868\":1}}],[\"21\",{\"1\":{\"472\":7,\"486\":1,\"530\":1,\"1178\":2,\"1179\":2,\"2260\":1,\"2365\":1,\"2986\":1,\"2992\":1,\"2997\":2,\"3000\":1,\"3002\":1,\"3003\":2,\"3006\":1,\"3011\":1}}],[\"29\",{\"1\":{\"471\":1}}],[\"2ms\",{\"1\":{\"447\":1}}],[\"28956\",{\"1\":{\"533\":1}}],[\"28\",{\"1\":{\"426\":2}}],[\"23cx\",{\"1\":{\"3210\":1,\"3225\":1,\"3237\":1}}],[\"23d23\",{\"1\":{\"3201\":1}}],[\"2333\",{\"1\":{\"1972\":1,\"1977\":1}}],[\"2302323\",{\"1\":{\"869\":2}}],[\"2321e12\",{\"1\":{\"848\":1}}],[\"23f\",{\"1\":{\"848\":1}}],[\"234\",{\"1\":{\"531\":1,\"532\":1,\"533\":1}}],[\"2345\",{\"1\":{\"170\":1}}],[\"23\",{\"1\":{\"472\":2,\"503\":2,\"509\":2,\"848\":2,\"1192\":1,\"1687\":1,\"1878\":1,\"1908\":2,\"2157\":1,\"2166\":1,\"2440\":1,\"2441\":1,\"2442\":1,\"3159\":1}}],[\"23<\",{\"1\":{\"389\":1}}],[\"2支付宝\",{\"1\":{\"384\":1}}],[\"2待派送\",{\"1\":{\"384\":1}}],[\"25t15\",{\"1\":{\"3159\":6,\"3160\":2}}],[\"25t14\",{\"1\":{\"3156\":11}}],[\"256\",{\"1\":{\"2781\":1}}],[\"25\",{\"1\":{\"469\":2,\"2858\":1}}],[\"255byte\",{\"1\":{\"2360\":1}}],[\"255\",{\"1\":{\"378\":1,\"384\":4,\"565\":2,\"1873\":1,\"1933\":1,\"1934\":2}}],[\"25<\",{\"1\":{\"99\":2}}],[\"276z\",{\"1\":{\"3160\":1}}],[\"27019\",{\"1\":{\"3138\":1,\"3144\":1,\"3160\":2,\"3165\":1,\"3225\":1,\"3237\":1}}],[\"27018\",{\"1\":{\"3138\":1,\"3143\":1,\"3159\":2,\"3165\":1,\"3225\":1,\"3237\":1}}],[\"27017\",{\"1\":{\"3048\":1,\"3050\":1,\"3138\":1,\"3142\":1,\"3150\":1,\"3153\":1,\"3154\":1,\"3156\":1,\"3159\":1,\"3165\":1,\"3222\":1,\"3224\":1,\"3225\":1,\"3236\":1,\"3237\":1}}],[\"27\",{\"1\":{\"314\":1,\"2289\":1,\"2291\":1,\"3156\":1,\"3160\":2}}],[\"2<\",{\"1\":{\"280\":1,\"324\":1,\"336\":1,\"389\":1,\"2982\":1}}],[\"2级\",{\"1\":{\"216\":1,\"217\":1}}],[\"2039728\",{\"1\":{\"3019\":1}}],[\"20tb\",{\"1\":{\"2846\":1}}],[\"20个\",{\"1\":{\"2810\":1}}],[\"2014\",{\"1\":{\"2104\":1}}],[\"2011年初已经用尽\",{\"1\":{\"1933\":1}}],[\"2019\",{\"1\":{\"486\":1,\"2104\":1,\"3076\":2,\"3082\":1}}],[\"2019年2月18日\",{\"1\":{\"486\":1}}],[\"2018\",{\"1\":{\"123\":2}}],[\"20<\",{\"1\":{\"389\":1}}],[\"20\",{\"1\":{\"375\":3,\"376\":3,\"377\":4,\"378\":4,\"379\":3,\"380\":4,\"381\":1,\"382\":4,\"383\":4,\"384\":3,\"385\":4,\"451\":1,\"477\":2,\"525\":1,\"528\":1,\"662\":2,\"841\":1,\"895\":1,\"972\":1,\"989\":1,\"1014\":2,\"1018\":1,\"1019\":1,\"1044\":2,\"1045\":1,\"1133\":2,\"1160\":2,\"1278\":1,\"1307\":2,\"1481\":1,\"1594\":1,\"1603\":1,\"1687\":1,\"1709\":1,\"1710\":2,\"1858\":1,\"2008\":2,\"2009\":2,\"2129\":2,\"2161\":1,\"2162\":1,\"2221\":4,\"2322\":1,\"2371\":1,\"2426\":2,\"2443\":1,\"2980\":1,\"2986\":1,\"2991\":1,\"2992\":2,\"2993\":3,\"3000\":2,\"3006\":1,\"3008\":2,\"3011\":2}}],[\"2020\",{\"1\":{\"470\":2}}],[\"2022年3月3日\",{\"1\":{\"486\":3}}],[\"2022\",{\"1\":{\"469\":2,\"471\":1,\"472\":7,\"473\":2,\"476\":1,\"477\":2,\"479\":1,\"484\":1,\"485\":2,\"486\":1,\"488\":1,\"489\":1}}],[\"2023\",{\"1\":{\"314\":1,\"473\":1,\"2858\":1,\"3156\":11,\"3159\":6,\"3160\":2}}],[\"20210318bcmf\",{\"1\":{\"2858\":1}}],[\"2021\",{\"1\":{\"297\":1,\"2104\":1}}],[\"202\",{\"1\":{\"176\":1,\"1941\":1}}],[\"20mb\",{\"1\":{\"170\":1}}],[\"2001\",{\"1\":{\"2781\":1,\"2782\":1}}],[\"20000\",{\"1\":{\"2372\":1,\"2373\":1}}],[\"2000\",{\"1\":{\"1481\":1,\"2805\":1,\"3102\":1,\"3153\":1,\"3156\":1}}],[\"200\",{\"1\":{\"170\":1,\"377\":1,\"382\":1,\"864\":1,\"1182\":2,\"1948\":1}}],[\"2218\",{\"1\":{\"3198\":1}}],[\"22026\",{\"1\":{\"521\":1}}],[\"222\",{\"1\":{\"470\":2}}],[\"225\",{\"1\":{\"271\":1,\"281\":1,\"287\":1,\"3160\":2,\"3165\":3,\"3222\":1,\"3224\":1,\"3225\":3,\"3236\":1,\"3237\":3}}],[\"22\",{\"1\":{\"95\":1,\"470\":8,\"484\":1,\"485\":2,\"486\":1,\"1747\":1,\"1748\":2,\"2221\":2,\"2986\":1,\"2992\":1,\"3000\":1,\"3002\":1,\"3003\":2,\"3006\":1,\"3011\":1,\"3015\":1,\"3019\":1}}],[\"2\",{\"0\":{\"22\":1,\"68\":1,\"70\":1,\"72\":1,\"77\":1,\"82\":1,\"86\":1,\"92\":1,\"93\":1,\"94\":2,\"95\":1,\"100\":1,\"104\":1,\"110\":1,\"114\":1,\"118\":1,\"123\":1,\"128\":1,\"131\":1,\"133\":1,\"136\":1,\"137\":1,\"138\":1,\"139\":2,\"142\":1,\"146\":1,\"150\":1,\"153\":1,\"154\":2,\"157\":1,\"158\":1,\"159\":2,\"160\":1,\"161\":1,\"164\":1,\"168\":1,\"171\":1,\"175\":1,\"177\":1,\"180\":1,\"190\":1,\"193\":1,\"196\":1,\"199\":1,\"205\":1,\"208\":1,\"211\":1,\"217\":1,\"221\":1,\"226\":1,\"229\":1,\"233\":1,\"234\":1,\"237\":1,\"242\":1,\"247\":1,\"252\":1,\"257\":1,\"261\":1,\"267\":1,\"268\":1,\"271\":1,\"274\":1,\"278\":1,\"281\":1,\"284\":1,\"287\":1,\"292\":1,\"299\":1,\"305\":1,\"311\":1,\"314\":1,\"317\":1,\"322\":1,\"331\":1,\"341\":1,\"343\":1,\"344\":1,\"347\":1,\"351\":1,\"355\":1,\"360\":1,\"365\":1,\"369\":1,\"376\":1,\"388\":1,\"393\":1,\"404\":1,\"408\":1,\"412\":1,\"418\":1,\"424\":1,\"430\":1,\"433\":1,\"435\":1,\"439\":1,\"440\":1,\"445\":1,\"452\":1,\"460\":1,\"467\":1,\"469\":1,\"477\":1,\"482\":1,\"485\":1,\"489\":1,\"493\":1,\"497\":1,\"502\":1,\"506\":1,\"509\":1,\"513\":1,\"525\":1,\"532\":1,\"541\":1,\"550\":1,\"561\":1,\"562\":1,\"566\":1,\"567\":1,\"568\":2,\"569\":1,\"575\":1,\"576\":1,\"582\":1,\"587\":1,\"590\":1,\"601\":1,\"605\":1,\"614\":1,\"621\":1,\"630\":1,\"634\":1,\"637\":1,\"639\":1,\"641\":2,\"643\":1,\"644\":1,\"645\":2,\"652\":1,\"658\":1,\"670\":1,\"677\":1,\"683\":1,\"692\":1,\"698\":1,\"712\":1,\"724\":1,\"727\":1,\"735\":1,\"742\":1,\"749\":1,\"758\":1,\"760\":1,\"764\":1,\"768\":1,\"772\":1,\"773\":1,\"777\":1,\"779\":1,\"782\":1,\"785\":1,\"791\":1,\"792\":1,\"793\":2,\"794\":1,\"797\":1,\"802\":1,\"806\":1,\"811\":1,\"819\":1,\"822\":1,\"828\":1,\"831\":1,\"835\":1,\"839\":1,\"845\":1,\"853\":1,\"859\":1,\"863\":1,\"864\":1,\"865\":2,\"866\":1,\"872\":1,\"877\":1,\"881\":1,\"884\":1,\"892\":1,\"896\":1,\"901\":1,\"904\":1,\"908\":1,\"912\":1,\"913\":1,\"914\":2,\"915\":1,\"921\":1,\"923\":1,\"927\":1,\"933\":1,\"936\":1,\"941\":1,\"946\":1,\"947\":1,\"953\":1,\"954\":1,\"955\":2,\"956\":1,\"960\":1,\"966\":1,\"969\":1,\"970\":1,\"971\":2,\"978\":1,\"985\":1,\"987\":1,\"988\":1,\"989\":2,\"998\":1,\"1000\":1,\"1003\":1,\"1008\":1,\"1019\":1,\"1020\":2,\"1023\":1,\"1024\":1,\"1025\":2,\"1029\":1,\"1033\":1,\"1038\":1,\"1042\":1,\"1045\":1,\"1048\":1,\"1050\":1,\"1054\":1,\"1055\":1,\"1056\":2,\"1057\":1,\"1062\":1,\"1065\":1,\"1068\":1,\"1069\":1,\"1076\":1,\"1079\":1,\"1080\":1,\"1081\":2,\"1087\":1,\"1093\":1,\"1101\":1,\"1105\":1,\"1110\":1,\"1113\":1,\"1119\":1,\"1123\":1,\"1124\":1,\"1125\":2,\"1126\":1,\"1127\":1,\"1132\":1,\"1133\":1,\"1134\":2,\"1135\":1,\"1138\":1,\"1144\":1,\"1145\":1,\"1148\":1,\"1149\":1,\"1150\":2,\"1151\":1,\"1156\":1,\"1164\":1,\"1165\":1,\"1166\":2,\"1171\":1,\"1173\":1,\"1176\":1,\"1179\":1,\"1185\":1,\"1190\":1,\"1198\":1,\"1202\":1,\"1206\":1,\"1212\":1,\"1216\":1,\"1219\":1,\"1220\":1,\"1223\":1,\"1228\":1,\"1233\":1,\"1240\":1,\"1244\":1,\"1247\":1,\"1252\":1,\"1257\":1,\"1258\":1,\"1265\":1,\"1269\":1,\"1273\":1,\"1274\":1,\"1277\":1,\"1280\":1,\"1284\":1,\"1289\":1,\"1290\":1,\"1291\":2,\"1292\":1,\"1296\":1,\"1299\":1,\"1300\":1,\"1301\":2,\"1302\":1,\"1303\":1,\"1307\":1,\"1312\":1,\"1318\":1,\"1321\":1,\"1324\":1,\"1328\":1,\"1330\":1,\"1338\":1,\"1344\":1,\"1351\":1,\"1359\":1,\"1364\":1,\"1369\":1,\"1374\":1,\"1377\":1,\"1383\":1,\"1384\":1,\"1388\":1,\"1389\":1,\"1393\":1,\"1396\":1,\"1403\":1,\"1404\":1,\"1405\":2,\"1406\":1,\"1409\":1,\"1410\":1,\"1411\":2,\"1414\":1,\"1420\":1,\"1421\":1,\"1422\":1,\"1423\":2,\"1426\":1,\"1429\":1,\"1436\":1,\"1437\":1,\"1438\":2,\"1446\":1,\"1449\":1,\"1450\":1,\"1451\":2,\"1452\":1,\"1453\":1,\"1459\":1,\"1462\":1,\"1468\":1,\"1471\":1,\"1474\":1,\"1477\":1,\"1481\":1,\"1485\":1,\"1486\":1,\"1492\":1,\"1493\":1,\"1494\":2,\"1495\":1,\"1498\":1,\"1502\":1,\"1506\":1,\"1512\":1,\"1513\":1,\"1514\":2,\"1519\":1,\"1520\":1,\"1525\":1,\"1531\":1,\"1534\":1,\"1541\":1,\"1545\":1,\"1549\":1,\"1552\":1,\"1560\":1,\"1565\":1,\"1573\":1,\"1579\":1,\"1581\":1,\"1588\":1,\"1592\":1,\"1596\":1,\"1603\":1,\"1607\":1,\"1611\":1,\"1612\":1,\"1613\":2,\"1614\":1,\"1618\":1,\"1623\":1,\"1624\":1,\"1625\":2,\"1626\":1,\"1629\":1,\"1634\":1,\"1637\":1,\"1643\":1,\"1648\":1,\"1652\":1,\"1655\":1,\"1656\":1,\"1657\":2,\"1658\":1,\"1662\":1,\"1665\":1,\"1674\":1,\"1678\":1,\"1683\":1,\"1686\":1,\"1687\":1,\"1688\":2,\"1691\":1,\"1700\":1,\"1703\":1,\"1706\":1,\"1710\":1,\"1712\":1,\"1716\":1,\"1718\":1,\"1719\":1,\"1720\":2,\"1724\":1,\"1730\":1,\"1738\":1,\"1742\":1,\"1743\":1,\"1744\":2,\"1745\":1,\"1748\":1,\"1752\":1,\"1756\":1,\"1761\":1,\"1765\":1,\"1768\":1,\"1772\":1,\"1774\":1,\"1780\":1,\"1785\":1,\"1786\":1,\"1787\":1,\"1788\":2,\"1797\":1,\"1801\":1,\"1803\":1,\"1807\":1,\"1813\":1,\"1815\":1,\"1822\":1,\"1829\":1,\"1834\":1,\"1842\":1,\"1848\":1,\"1851\":1,\"1856\":1,\"1861\":1,\"1869\":1,\"1873\":1,\"1876\":1,\"1882\":1,\"1883\":1,\"1884\":2,\"1887\":1,\"1891\":1,\"1896\":1,\"1899\":1,\"1904\":1,\"1908\":1,\"1914\":2,\"1917\":1,\"1925\":1,\"1929\":1,\"1932\":1,\"1933\":1,\"1934\":2,\"1943\":1,\"1944\":1,\"1945\":2,\"1952\":1,\"1955\":1,\"1962\":1,\"1965\":1,\"1969\":1,\"1972\":1,\"1976\":1,\"1982\":1,\"1989\":1,\"1994\":1,\"2000\":1,\"2005\":1,\"2008\":1,\"2011\":1,\"2013\":1,\"2019\":1,\"2027\":1,\"2029\":1,\"2032\":1,\"2038\":1,\"2043\":1,\"2048\":1,\"2051\":1,\"2063\":1,\"2064\":1,\"2065\":2,\"2066\":1,\"2074\":1,\"2075\":1,\"2076\":2,\"2080\":1,\"2085\":1,\"2086\":1,\"2087\":2,\"2090\":1,\"2095\":1,\"2100\":1,\"2104\":1,\"2109\":1,\"2112\":1,\"2116\":1,\"2122\":1,\"2139\":1,\"2145\":1,\"2149\":1,\"2156\":1,\"2157\":1,\"2158\":1,\"2159\":2,\"2162\":1,\"2165\":1,\"2168\":1,\"2171\":1,\"2174\":1,\"2177\":1,\"2180\":1,\"2183\":1,\"2184\":1,\"2185\":2,\"2189\":1,\"2197\":1,\"2198\":1,\"2203\":1,\"2206\":1,\"2211\":1,\"2217\":1,\"2219\":1,\"2222\":1,\"2227\":1,\"2230\":1,\"2241\":1,\"2242\":1,\"2248\":1,\"2253\":1,\"2255\":1,\"2256\":1,\"2257\":2,\"2260\":1,\"2270\":1,\"2278\":1,\"2281\":1,\"2285\":1,\"2288\":1,\"2294\":1,\"2298\":1,\"2303\":1,\"2308\":1,\"2311\":1,\"2317\":1,\"2322\":1,\"2326\":1,\"2327\":1,\"2328\":2,\"2332\":1,\"2337\":1,\"2338\":1,\"2339\":2,\"2340\":1,\"2343\":1,\"2351\":1,\"2352\":1,\"2353\":1,\"2354\":2,\"2357\":1,\"2361\":1,\"2369\":1,\"2371\":1,\"2376\":1,\"2381\":1,\"2383\":1,\"2387\":1,\"2390\":1,\"2395\":1,\"2400\":1,\"2401\":1,\"2402\":1,\"2403\":2,\"2408\":1,\"2414\":1,\"2415\":1,\"2416\":1,\"2417\":2,\"2424\":1,\"2432\":1,\"2439\":1,\"2444\":1,\"2447\":1,\"2453\":1,\"2460\":1,\"2464\":1,\"2465\":1,\"2466\":2,\"2467\":1,\"2473\":1,\"2474\":1,\"2475\":2,\"2476\":2,\"2479\":1,\"2483\":1,\"2484\":1,\"2485\":1,\"2486\":2,\"2487\":1,\"2490\":1,\"2494\":1,\"2499\":1,\"2500\":1,\"2501\":2,\"2506\":1,\"2510\":1,\"2516\":1,\"2517\":1,\"2518\":1,\"2519\":2,\"2523\":1,\"2527\":1,\"2531\":1,\"2537\":1,\"2541\":1,\"2547\":1,\"2548\":1,\"2553\":1,\"2559\":1,\"2564\":1,\"2567\":1,\"2571\":1,\"2575\":1,\"2584\":1,\"2589\":1,\"2593\":1,\"2598\":1,\"2601\":1,\"2605\":1,\"2606\":1,\"2607\":2,\"2610\":1,\"2614\":1,\"2619\":1,\"2621\":1,\"2624\":1,\"2629\":1,\"2636\":1,\"2640\":1,\"2646\":1,\"2652\":1,\"2659\":1,\"2662\":1,\"2668\":1,\"2672\":1,\"2681\":1,\"2685\":1,\"2690\":1,\"2693\":1,\"2697\":1,\"2701\":1,\"2707\":1,\"2710\":1,\"2715\":1,\"2724\":1,\"2732\":1,\"2739\":1,\"2742\":1,\"2743\":1,\"2744\":2,\"2748\":1,\"2752\":1,\"2755\":1,\"2759\":1,\"2764\":1,\"2769\":1,\"2775\":1,\"2778\":1,\"2782\":1,\"2786\":1,\"2792\":1,\"2793\":1,\"2794\":2,\"2795\":1,\"2796\":1,\"2799\":1,\"2802\":1,\"2809\":1,\"2813\":1,\"2817\":1,\"2826\":1,\"2830\":1,\"2836\":1,\"2843\":1,\"2849\":1,\"2853\":1,\"2856\":1,\"2868\":1,\"2877\":1,\"2881\":1,\"2884\":1,\"2889\":1,\"2893\":1,\"2896\":1,\"2897\":2,\"2900\":1,\"2906\":1,\"2911\":1,\"2912\":1,\"2916\":1,\"2918\":1,\"2919\":1,\"2920\":2,\"2921\":1,\"2924\":1,\"2926\":1,\"2929\":1,\"2930\":1,\"2936\":1,\"2939\":1,\"2943\":1,\"2944\":1,\"2945\":1,\"2946\":2,\"2949\":1,\"2952\":1,\"2955\":1,\"2956\":1,\"2957\":2,\"2960\":1,\"2961\":1,\"2964\":1,\"2972\":1,\"2974\":1,\"2977\":1,\"2982\":1,\"2987\":1,\"2992\":1,\"2997\":1,\"3003\":1,\"3006\":1,\"3015\":1,\"3019\":1,\"3023\":1,\"3027\":1,\"3032\":1,\"3037\":1,\"3038\":1,\"3041\":1,\"3044\":1,\"3047\":1,\"3056\":1,\"3061\":1,\"3067\":1,\"3073\":1,\"3075\":1,\"3076\":1,\"3077\":2,\"3082\":1,\"3087\":1,\"3091\":1,\"3096\":1,\"3100\":1,\"3106\":1,\"3110\":1,\"3111\":1,\"3112\":2,\"3113\":1,\"3114\":1,\"3117\":1,\"3120\":1,\"3123\":1,\"3126\":1,\"3131\":1,\"3135\":2,\"3138\":1,\"3143\":1,\"3148\":1,\"3154\":1,\"3155\":1,\"3156\":1,\"3157\":2,\"3160\":1,\"3162\":1,\"3166\":1,\"3169\":1,\"3172\":1,\"3175\":1,\"3177\":1,\"3180\":1,\"3183\":1,\"3187\":1,\"3191\":1,\"3194\":1,\"3195\":1,\"3196\":2,\"3197\":1,\"3204\":1,\"3205\":1,\"3206\":2,\"3210\":1,\"3213\":1,\"3220\":1,\"3225\":1,\"3228\":1,\"3233\":1,\"3237\":1,\"3243\":1,\"3254\":1,\"3271\":1},\"1\":{\"71\":1,\"72\":3,\"73\":1,\"74\":1,\"76\":1,\"94\":1,\"96\":3,\"109\":1,\"115\":1,\"145\":1,\"146\":2,\"167\":4,\"200\":4,\"212\":1,\"242\":3,\"244\":2,\"263\":2,\"266\":1,\"270\":1,\"280\":1,\"284\":1,\"298\":1,\"304\":1,\"305\":2,\"314\":1,\"322\":1,\"333\":1,\"336\":1,\"352\":1,\"375\":1,\"376\":1,\"377\":1,\"378\":1,\"379\":1,\"381\":1,\"383\":1,\"384\":1,\"385\":1,\"389\":1,\"414\":1,\"421\":2,\"446\":1,\"470\":2,\"486\":1,\"501\":1,\"503\":1,\"514\":1,\"516\":1,\"518\":4,\"519\":2,\"520\":1,\"521\":3,\"534\":1,\"535\":1,\"536\":1,\"538\":1,\"564\":1,\"577\":1,\"613\":2,\"621\":1,\"640\":1,\"642\":2,\"644\":2,\"645\":3,\"646\":2,\"647\":3,\"648\":2,\"676\":1,\"677\":1,\"678\":2,\"682\":3,\"683\":3,\"685\":1,\"688\":2,\"689\":3,\"690\":3,\"701\":1,\"739\":1,\"741\":2,\"742\":3,\"761\":1,\"784\":1,\"785\":2,\"787\":1,\"802\":1,\"811\":2,\"813\":1,\"815\":1,\"841\":1,\"845\":1,\"846\":1,\"884\":1,\"891\":4,\"897\":1,\"902\":1,\"928\":1,\"932\":1,\"933\":1,\"936\":1,\"941\":1,\"956\":3,\"970\":2,\"971\":4,\"974\":1,\"977\":1,\"982\":1,\"984\":5,\"985\":2,\"988\":2,\"989\":1,\"990\":4,\"991\":2,\"997\":1,\"998\":1,\"1025\":2,\"1028\":2,\"1063\":1,\"1128\":3,\"1141\":1,\"1158\":1,\"1175\":1,\"1190\":2,\"1191\":1,\"1240\":1,\"1241\":1,\"1257\":1,\"1265\":2,\"1266\":1,\"1288\":1,\"1298\":1,\"1299\":2,\"1312\":1,\"1323\":1,\"1343\":2,\"1373\":1,\"1402\":1,\"1471\":1,\"1472\":3,\"1474\":2,\"1484\":1,\"1492\":1,\"1521\":1,\"1523\":1,\"1547\":1,\"1562\":1,\"1569\":1,\"1580\":1,\"1594\":1,\"1604\":1,\"1674\":1,\"1677\":1,\"1692\":1,\"1706\":1,\"1709\":5,\"1710\":1,\"1737\":1,\"1747\":1,\"1748\":1,\"1753\":2,\"1775\":1,\"1776\":2,\"1777\":1,\"1779\":1,\"1780\":1,\"1804\":1,\"1816\":1,\"1817\":1,\"1823\":2,\"1836\":3,\"1858\":1,\"1862\":1,\"1878\":1,\"1879\":1,\"1888\":1,\"1898\":1,\"1903\":1,\"1904\":1,\"1908\":1,\"1909\":1,\"1914\":1,\"1928\":1,\"1936\":1,\"1937\":2,\"1959\":1,\"1972\":1,\"1977\":1,\"2004\":3,\"2009\":1,\"2010\":1,\"2031\":1,\"2032\":1,\"2037\":1,\"2045\":3,\"2048\":3,\"2058\":1,\"2063\":1,\"2067\":1,\"2121\":1,\"2123\":1,\"2145\":1,\"2198\":1,\"2200\":2,\"2202\":1,\"2209\":1,\"2210\":1,\"2221\":1,\"2239\":1,\"2240\":1,\"2243\":1,\"2280\":1,\"2288\":1,\"2289\":2,\"2290\":1,\"2291\":1,\"2297\":1,\"2299\":1,\"2300\":1,\"2303\":1,\"2312\":1,\"2319\":1,\"2321\":1,\"2322\":1,\"2325\":2,\"2327\":1,\"2329\":2,\"2333\":1,\"2334\":2,\"2349\":2,\"2352\":3,\"2355\":2,\"2364\":5,\"2365\":1,\"2376\":1,\"2377\":1,\"2386\":1,\"2387\":1,\"2390\":1,\"2391\":1,\"2405\":2,\"2407\":1,\"2408\":1,\"2409\":1,\"2418\":1,\"2424\":1,\"2450\":1,\"2454\":2,\"2457\":1,\"2478\":2,\"2479\":3,\"2485\":2,\"2486\":2,\"2487\":2,\"2491\":2,\"2530\":1,\"2536\":1,\"2540\":2,\"2541\":1,\"2542\":1,\"2566\":1,\"2575\":1,\"2588\":1,\"2604\":1,\"2610\":1,\"2623\":1,\"2624\":1,\"2646\":1,\"2647\":1,\"2648\":1,\"2657\":1,\"2712\":1,\"2755\":1,\"2758\":2,\"2761\":1,\"2763\":1,\"2791\":1,\"2798\":1,\"2837\":1,\"2856\":1,\"2868\":1,\"2879\":3,\"2880\":3,\"2884\":1,\"2892\":2,\"2900\":2,\"2901\":1,\"2902\":3,\"2906\":2,\"2907\":1,\"2908\":3,\"2910\":4,\"2912\":2,\"2914\":2,\"2915\":1,\"2919\":2,\"2920\":2,\"2924\":2,\"2925\":1,\"2926\":3,\"2929\":1,\"2930\":1,\"2932\":2,\"2936\":1,\"2939\":1,\"2943\":1,\"2945\":1,\"2949\":1,\"2952\":1,\"2957\":5,\"2960\":1,\"3008\":1,\"3040\":1,\"3050\":1,\"3057\":1,\"3076\":1,\"3082\":1,\"3096\":3,\"3109\":1,\"3112\":2,\"3113\":4,\"3127\":1,\"3131\":2,\"3133\":1,\"3145\":2,\"3147\":3,\"3148\":2,\"3156\":1,\"3159\":1,\"3160\":1,\"3161\":1,\"3165\":1,\"3172\":1,\"3205\":1,\"3206\":2,\"3222\":1}}],[\"1或\",{\"1\":{\"3114\":1}}],[\"1>\",{\"1\":{\"3075\":1}}],[\"1表示倒叙\",{\"1\":{\"3114\":1}}],[\"1表示正序\",{\"1\":{\"3114\":1}}],[\"1表示正序创建索引\",{\"1\":{\"3111\":1}}],[\"1表示降序创建索引\",{\"1\":{\"3111\":1}}],[\"1表示成功\",{\"1\":{\"2901\":1}}],[\"1表示负数\",{\"1\":{\"872\":1}}],[\"1编码是不支持中文的\",{\"1\":{\"2628\":1}}],[\"1获取结果集的元数据\",{\"1\":{\"2355\":1}}],[\"1参\",{\"0\":{\"2122\":1}}],[\"1b6d3586\",{\"1\":{\"1595\":1}}],[\"1的几率执行run方法\",{\"1\":{\"1533\":1}}],[\"1～n\",{\"1\":{\"1404\":1,\"1405\":1}}],[\"1~n\",{\"1\":{\"1402\":2,\"1404\":1}}],[\"15ef\",{\"1\":{\"3198\":1}}],[\"155\",{\"1\":{\"2908\":1,\"2926\":1}}],[\"1521\",{\"1\":{\"2426\":1}}],[\"153\",{\"1\":{\"2426\":1}}],[\"15\",{\"1\":{\"1569\":1,\"2982\":1,\"3076\":1}}],[\"15db9742表示16进制内存地址\",{\"1\":{\"990\":1}}],[\"15db9742\",{\"1\":{\"990\":1,\"1184\":1}}],[\"1546\",{\"1\":{\"956\":1}}],[\"159\",{\"1\":{\"287\":1,\"3160\":2,\"3165\":3,\"3222\":1,\"3224\":1,\"3225\":3,\"3236\":1,\"3237\":3}}],[\"1个构造器中使用了\",{\"1\":{\"1082\":1}}],[\"1个\",{\"1\":{\"1029\":1,\"1047\":1}}],[\"1个参数\",{\"1\":{\"697\":1,\"698\":1}}],[\"1个starter往往包含了若干个相关联的依赖包\",{\"1\":{\"99\":1}}],[\"1为终点下标\",{\"1\":{\"644\":1}}],[\"13\",{\"0\":{\"671\":1,\"723\":1},\"1\":{\"544\":1,\"956\":1,\"1194\":1,\"2353\":1,\"2409\":1}}],[\"1引入calendar类之后被弃用了\",{\"1\":{\"460\":1}}],[\"1微信\",{\"1\":{\"384\":1}}],[\"1待付款\",{\"1\":{\"384\":1}}],[\"1是浮点数常量\",{\"1\":{\"867\":1}}],[\"1是\",{\"1\":{\"382\":1}}],[\"126\",{\"1\":{\"2409\":2}}],[\"127\",{\"1\":{\"1935\":1,\"1972\":1,\"1983\":1,\"2900\":1,\"2906\":1,\"2914\":1,\"2924\":1,\"2949\":1,\"2952\":1,\"2955\":1}}],[\"12=cc\",{\"1\":{\"1683\":1}}],[\"129\",{\"1\":{\"1654\":2}}],[\"1280\",{\"1\":{\"1933\":1}}],[\"128位\",{\"1\":{\"1933\":1}}],[\"128127时\",{\"1\":{\"1182\":1}}],[\"128127经常使用\",{\"1\":{\"1182\":1}}],[\"128\",{\"1\":{\"869\":2}}],[\"12是个整数常量\",{\"1\":{\"867\":1}}],[\"12e2\",{\"1\":{\"845\":1}}],[\"1223\",{\"1\":{\"750\":1,\"752\":1,\"753\":1}}],[\"121212000000014086253941059112548828125\",{\"1\":{\"530\":1}}],[\"12121200000001408625394105911254882812555\",{\"1\":{\"530\":3}}],[\"12433241123\",{\"1\":{\"529\":1}}],[\"12\",{\"0\":{\"668\":1,\"669\":1,\"670\":1,\"722\":1},\"1\":{\"368\":1,\"382\":3,\"845\":1,\"867\":1,\"868\":1,\"885\":2,\"891\":1,\"897\":1,\"1194\":3,\"1197\":4,\"1654\":2,\"1657\":1,\"1683\":1,\"2226\":2,\"2235\":1,\"2356\":1}}],[\"123=aa\",{\"1\":{\"1683\":1}}],[\"123abc\",{\"1\":{\"1692\":1}}],[\"123ab\",{\"1\":{\"1199\":1}}],[\"123345\",{\"1\":{\"530\":1}}],[\"123456\",{\"1\":{\"3193\":1}}],[\"12345\",{\"1\":{\"530\":5}}],[\"1234\",{\"1\":{\"390\":1,\"433\":1,\"3197\":1,\"3201\":1,\"3222\":1,\"3236\":1,\"3237\":1}}],[\"12321654351\",{\"1\":{\"368\":1}}],[\"123\",{\"1\":{\"123\":1,\"371\":2,\"423\":2,\"531\":1,\"532\":1,\"533\":1,\"869\":1,\"1192\":1,\"1198\":2,\"1332\":1,\"1594\":1,\"1595\":1,\"1603\":1,\"1618\":2,\"1621\":1,\"1625\":1,\"1654\":3,\"1683\":1,\"2672\":1}}],[\"116z\",{\"1\":{\"3156\":1}}],[\"113\",{\"1\":{\"1946\":1}}],[\"1139ms\",{\"1\":{\"447\":1}}],[\"1111\",{\"1\":{\"873\":2,\"909\":6}}],[\"11111自动转为了十进制\",{\"1\":{\"640\":1,\"761\":1}}],[\"11111\",{\"1\":{\"640\":1,\"761\":1}}],[\"111\",{\"1\":{\"426\":3,\"532\":1}}],[\"1110\",{\"1\":{\"123\":1}}],[\"11\",{\"0\":{\"385\":1,\"522\":1,\"667\":1,\"721\":1},\"1\":{\"275\":1,\"375\":2,\"376\":2,\"377\":3,\"378\":2,\"379\":3,\"380\":1,\"381\":1,\"382\":2,\"383\":1,\"384\":2,\"385\":1,\"455\":1,\"532\":1,\"575\":1,\"893\":3,\"1185\":1,\"1619\":1,\"1747\":1,\"1748\":2}}],[\"1周后活动取消\",{\"1\":{\"220\":1}}],[\"1级常用于运维经理进行线上整体项目部署方案调控\",{\"1\":{\"217\":1}}],[\"1级与2级留做系统打包后设置通用属性\",{\"1\":{\"217\":1}}],[\"1级\",{\"1\":{\"216\":1,\"217\":1}}],[\"188464208z\",{\"1\":{\"2858\":1}}],[\"18b4aac2\",{\"1\":{\"596\":1,\"2032\":1}}],[\"18t15\",{\"1\":{\"486\":1}}],[\"18\",{\"1\":{\"124\":3,\"375\":1,\"381\":1,\"389\":1,\"471\":1,\"1104\":1,\"1432\":1,\"1687\":1,\"2229\":1,\"2329\":1,\"2409\":1}}],[\"172\",{\"1\":{\"3048\":1,\"3142\":1,\"3150\":1,\"3153\":1,\"3154\":1,\"3156\":1,\"3159\":3}}],[\"17110\",{\"1\":{\"956\":1}}],[\"17t15\",{\"1\":{\"123\":1}}],[\"17\",{\"1\":{\"123\":1,\"124\":3,\"314\":1,\"347\":1,\"469\":2,\"787\":2,\"2858\":1}}],[\"104\",{\"1\":{\"2426\":1}}],[\"106\",{\"1\":{\"1946\":1}}],[\"108\",{\"1\":{\"1941\":1}}],[\"1024~49151\",{\"1\":{\"1938\":1}}],[\"1024\",{\"1\":{\"1312\":3,\"1823\":1,\"1836\":1,\"1888\":1,\"1977\":1,\"1984\":1,\"2365\":1,\"2646\":1}}],[\"10+11\",{\"1\":{\"1018\":1}}],[\"101\",{\"1\":{\"936\":1,\"2180\":1}}],[\"1010\",{\"1\":{\"123\":1,\"262\":1}}],[\"107hello\",{\"1\":{\"886\":1}}],[\"107\",{\"1\":{\"866\":1}}],[\"10可以这么创建\",{\"1\":{\"530\":1}}],[\"10t15\",{\"1\":{\"484\":1,\"485\":2}}],[\"10t18\",{\"1\":{\"472\":1}}],[\"105\",{\"1\":{\"426\":3}}],[\"1005\",{\"1\":{\"3076\":1}}],[\"1004\",{\"1\":{\"2986\":1,\"3019\":1,\"3101\":2}}],[\"1003\",{\"1\":{\"2986\":1,\"2997\":1,\"3101\":2,\"3102\":1}}],[\"1002\",{\"1\":{\"2986\":1,\"2987\":3,\"2993\":1,\"3076\":1,\"3120\":1,\"3122\":1}}],[\"100之间所有自然数的和\",{\"1\":{\"1035\":1}}],[\"100以内的所有质数的输出\",{\"0\":{\"956\":1}}],[\"1001\",{\"1\":{\"909\":1,\"1361\":1,\"1908\":1,\"2980\":1,\"2983\":1,\"2984\":1,\"2991\":1,\"2993\":1,\"3082\":1}}],[\"1000的票数\",{\"1\":{\"3173\":1}}],[\"100001\",{\"1\":{\"3076\":2}}],[\"10000\",{\"1\":{\"1983\":1,\"1984\":1,\"2230\":2,\"2907\":1,\"2925\":1,\"3073\":1,\"3153\":1,\"3156\":1,\"3168\":1}}],[\"1000000\",{\"1\":{\"2376\":1,\"2377\":1}}],[\"10000000000000000\",{\"1\":{\"841\":1}}],[\"100000\",{\"1\":{\"956\":1,\"3083\":1}}],[\"1000\",{\"1\":{\"868\":1,\"873\":1,\"909\":1,\"2322\":1,\"2325\":1,\"2906\":1,\"2907\":1,\"2908\":1,\"2910\":1,\"2914\":1,\"2915\":1,\"2916\":1,\"2924\":1,\"2925\":1,\"2926\":1,\"2930\":1,\"3073\":1,\"3076\":1,\"3083\":1,\"3102\":1,\"3168\":1,\"3173\":1}}],[\"100e\",{\"1\":{\"845\":1}}],[\"100\",{\"1\":{\"381\":1,\"382\":1,\"383\":1,\"384\":1,\"385\":1,\"441\":1,\"472\":1,\"513\":2,\"866\":2,\"936\":1,\"941\":1,\"1035\":1,\"1182\":2,\"1481\":1,\"1492\":1,\"1509\":1,\"1512\":1,\"1515\":1,\"1520\":1,\"1536\":1,\"1547\":2,\"1550\":1,\"1556\":2,\"1562\":1,\"1687\":1,\"1989\":1,\"2157\":1,\"2166\":1,\"2179\":1,\"2387\":2}}],[\"10\",{\"0\":{\"384\":1,\"521\":1,\"598\":1,\"666\":1,\"691\":1,\"720\":1,\"1016\":1,\"1303\":1},\"1\":{\"262\":1,\"368\":1,\"377\":1,\"378\":1,\"379\":1,\"383\":1,\"384\":1,\"385\":1,\"421\":1,\"472\":2,\"488\":1,\"489\":1,\"502\":2,\"503\":2,\"509\":2,\"521\":2,\"524\":2,\"525\":1,\"526\":3,\"527\":2,\"528\":1,\"534\":1,\"536\":24,\"537\":4,\"636\":2,\"822\":1,\"823\":1,\"864\":1,\"866\":1,\"867\":4,\"886\":1,\"893\":4,\"895\":2,\"896\":1,\"897\":1,\"901\":1,\"913\":1,\"914\":1,\"950\":1,\"988\":1,\"1022\":1,\"1034\":1,\"1044\":2,\"1045\":1,\"1056\":2,\"1105\":1,\"1133\":1,\"1178\":3,\"1192\":1,\"1195\":1,\"1197\":1,\"1307\":4,\"1329\":2,\"1334\":1,\"1343\":2,\"1481\":1,\"1487\":1,\"1489\":2,\"1569\":1,\"1709\":1,\"1720\":1,\"1721\":1,\"2129\":2,\"2161\":1,\"2162\":1,\"2176\":1,\"2177\":1,\"2185\":1,\"2202\":1,\"2203\":1,\"2239\":1,\"2240\":1,\"2387\":1,\"2426\":2,\"3073\":1,\"3082\":1,\"3153\":1,\"3168\":1}}],[\"10<\",{\"1\":{\"76\":1}}],[\"14159\",{\"1\":{\"3034\":1}}],[\"14159265358979323846\",{\"1\":{\"517\":1}}],[\"141592653589793\",{\"1\":{\"517\":1}}],[\"149\",{\"1\":{\"2426\":1}}],[\"1401\",{\"1\":{\"1933\":1}}],[\"143\",{\"1\":{\"1106\":1}}],[\"14ae5a5\",{\"1\":{\"647\":1}}],[\"146841646541651654681l\",{\"1\":{\"841\":1}}],[\"146+08\",{\"1\":{\"477\":1}}],[\"146z\",{\"1\":{\"477\":1}}],[\"14\",{\"1\":{\"123\":1,\"1068\":1}}],[\"1<\",{\"1\":{\"95\":1,\"2971\":2,\"3229\":1}}],[\"195\",{\"1\":{\"3159\":1}}],[\"1992\",{\"1\":{\"2364\":1,\"2438\":1}}],[\"199\",{\"1\":{\"1945\":3}}],[\"1999\",{\"1\":{\"472\":2}}],[\"1984\",{\"1\":{\"1933\":1}}],[\"192\",{\"1\":{\"167\":4,\"170\":1,\"271\":1,\"281\":1,\"1934\":2,\"1944\":1,\"1989\":1}}],[\"19\",{\"1\":{\"95\":1,\"486\":2,\"2221\":2,\"2409\":1,\"2428\":1}}],[\"16s\",{\"1\":{\"2374\":1}}],[\"16m\",{\"1\":{\"2360\":1}}],[\"16个字节\",{\"1\":{\"1933\":1}}],[\"16就是每次16个位\",{\"1\":{\"1863\":1}}],[\"16bit\",{\"1\":{\"1775\":1}}],[\"1655442970466\",{\"1\":{\"545\":1}}],[\"1654740094502\",{\"1\":{\"633\":1}}],[\"1654740094502l\",{\"1\":{\"479\":1}}],[\"1654789042842\",{\"1\":{\"478\":1}}],[\"160\",{\"1\":{\"471\":1}}],[\"169\",{\"1\":{\"469\":2}}],[\"162\",{\"1\":{\"271\":1,\"281\":1,\"287\":1,\"3160\":2,\"3165\":3,\"3222\":1,\"3224\":1,\"3225\":3,\"3236\":1,\"3237\":3}}],[\"16<\",{\"1\":{\"270\":1,\"280\":1,\"321\":1,\"322\":1,\"335\":1,\"336\":2}}],[\"16t18\",{\"1\":{\"473\":1}}],[\"16t\",{\"1\":{\"253\":1}}],[\"1682481447\",{\"1\":{\"3187\":2}}],[\"1682481367\",{\"1\":{\"3186\":2}}],[\"1682436386\",{\"1\":{\"3160\":2}}],[\"1682435169\",{\"1\":{\"3159\":2}}],[\"1682433666\",{\"1\":{\"3156\":3}}],[\"1682434446\",{\"1\":{\"3156\":1}}],[\"1682434466\",{\"1\":{\"3156\":6}}],[\"1687746960161\",{\"1\":{\"2890\":1}}],[\"168\",{\"1\":{\"167\":4,\"170\":1,\"1933\":1,\"1934\":3,\"1944\":1,\"1989\":1}}],[\"16\",{\"1\":{\"95\":1,\"293\":2,\"347\":1,\"445\":1,\"486\":1,\"1680\":1,\"1863\":1,\"3048\":1,\"3142\":1,\"3150\":1,\"3153\":1,\"3154\":1,\"3156\":1,\"3159\":7}}],[\"1\",{\"0\":{\"20\":1,\"21\":1,\"66\":2,\"67\":1,\"70\":1,\"71\":1,\"76\":1,\"81\":1,\"83\":1,\"85\":1,\"91\":1,\"93\":1,\"99\":1,\"108\":1,\"109\":2,\"110\":1,\"111\":1,\"112\":1,\"113\":1,\"117\":1,\"120\":1,\"122\":1,\"127\":1,\"130\":1,\"133\":1,\"134\":1,\"135\":2,\"136\":1,\"138\":1,\"141\":1,\"145\":1,\"149\":1,\"152\":1,\"156\":1,\"158\":1,\"163\":1,\"167\":1,\"170\":1,\"174\":1,\"179\":1,\"187\":1,\"189\":1,\"192\":1,\"195\":1,\"198\":1,\"204\":1,\"210\":1,\"216\":1,\"220\":1,\"225\":1,\"228\":1,\"231\":1,\"232\":2,\"233\":1,\"236\":1,\"241\":1,\"246\":1,\"251\":1,\"256\":1,\"260\":1,\"265\":1,\"266\":1,\"270\":1,\"273\":1,\"277\":1,\"280\":1,\"283\":1,\"286\":1,\"291\":1,\"296\":1,\"298\":1,\"304\":1,\"310\":1,\"316\":1,\"321\":1,\"326\":1,\"328\":1,\"330\":1,\"335\":1,\"339\":1,\"340\":2,\"341\":1,\"342\":1,\"344\":1,\"346\":1,\"350\":1,\"354\":1,\"359\":1,\"364\":1,\"368\":1,\"373\":2,\"375\":1,\"387\":1,\"392\":1,\"401\":2,\"403\":1,\"407\":1,\"411\":1,\"417\":1,\"423\":1,\"428\":1,\"429\":2,\"430\":1,\"431\":1,\"432\":1,\"435\":1,\"437\":1,\"438\":2,\"439\":1,\"444\":1,\"451\":1,\"457\":1,\"459\":1,\"465\":1,\"466\":2,\"467\":1,\"468\":1,\"476\":1,\"481\":1,\"484\":1,\"488\":1,\"490\":1,\"492\":1,\"496\":1,\"501\":1,\"505\":1,\"508\":1,\"510\":1,\"512\":1,\"524\":1,\"531\":1,\"538\":1,\"540\":1,\"549\":1,\"559\":1,\"560\":2,\"561\":1,\"563\":1,\"565\":1,\"567\":1,\"573\":1,\"574\":2,\"575\":1,\"581\":1,\"583\":1,\"585\":1,\"586\":2,\"587\":1,\"588\":1,\"589\":1,\"600\":1,\"604\":1,\"613\":1,\"620\":1,\"629\":1,\"631\":1,\"633\":1,\"637\":1,\"638\":1,\"642\":1,\"644\":1,\"657\":1,\"669\":1,\"676\":1,\"682\":1,\"697\":1,\"711\":1,\"726\":1,\"741\":1,\"748\":1,\"759\":1,\"762\":2,\"763\":1,\"767\":1,\"771\":1,\"773\":1,\"775\":1,\"776\":2,\"777\":1,\"778\":1,\"781\":1,\"784\":1,\"787\":1,\"788\":1,\"790\":1,\"792\":1,\"796\":1,\"801\":1,\"805\":1,\"810\":1,\"816\":1,\"818\":1,\"821\":1,\"827\":1,\"830\":1,\"834\":1,\"836\":1,\"838\":1,\"844\":1,\"852\":1,\"858\":1,\"862\":1,\"864\":1,\"871\":1,\"875\":1,\"876\":1,\"880\":1,\"883\":1,\"889\":1,\"891\":1,\"895\":1,\"900\":1,\"903\":1,\"907\":1,\"911\":1,\"913\":1,\"917\":1,\"919\":1,\"920\":2,\"921\":1,\"922\":1,\"926\":1,\"932\":1,\"935\":1,\"940\":1,\"944\":1,\"945\":2,\"946\":1,\"952\":1,\"954\":1,\"957\":1,\"959\":1,\"965\":1,\"968\":1,\"970\":1,\"977\":1,\"983\":1,\"984\":2,\"985\":1,\"986\":1,\"988\":1,\"997\":1,\"1000\":1,\"1002\":1,\"1007\":1,\"1018\":1,\"1022\":1,\"1024\":1,\"1028\":1,\"1032\":1,\"1037\":1,\"1041\":1,\"1044\":1,\"1047\":1,\"1053\":1,\"1055\":1,\"1061\":1,\"1066\":1,\"1067\":2,\"1068\":1,\"1078\":1,\"1080\":1,\"1086\":1,\"1092\":1,\"1100\":1,\"1104\":1,\"1109\":1,\"1112\":1,\"1118\":1,\"1122\":1,\"1124\":1,\"1131\":1,\"1133\":1,\"1137\":1,\"1143\":1,\"1147\":1,\"1149\":1,\"1155\":1,\"1163\":1,\"1165\":1,\"1170\":1,\"1175\":1,\"1178\":1,\"1184\":1,\"1189\":1,\"1193\":1,\"1197\":1,\"1201\":1,\"1205\":1,\"1211\":1,\"1215\":1,\"1218\":1,\"1222\":1,\"1227\":1,\"1232\":1,\"1239\":1,\"1246\":1,\"1251\":1,\"1255\":1,\"1256\":2,\"1257\":1,\"1264\":1,\"1268\":1,\"1272\":1,\"1276\":1,\"1279\":1,\"1283\":1,\"1288\":1,\"1290\":1,\"1298\":1,\"1300\":1,\"1306\":1,\"1309\":1,\"1311\":1,\"1317\":1,\"1323\":1,\"1327\":1,\"1329\":1,\"1337\":1,\"1343\":1,\"1350\":1,\"1358\":1,\"1363\":1,\"1366\":1,\"1368\":1,\"1373\":1,\"1376\":1,\"1382\":1,\"1386\":1,\"1387\":2,\"1388\":1,\"1392\":1,\"1395\":1,\"1402\":1,\"1404\":1,\"1408\":1,\"1410\":1,\"1413\":1,\"1418\":1,\"1419\":3,\"1420\":2,\"1422\":1,\"1425\":1,\"1428\":1,\"1432\":1,\"1433\":1,\"1435\":1,\"1437\":1,\"1445\":1,\"1448\":1,\"1450\":1,\"1461\":1,\"1466\":1,\"1467\":2,\"1468\":1,\"1469\":1,\"1470\":1,\"1473\":1,\"1476\":1,\"1480\":1,\"1483\":1,\"1484\":2,\"1485\":1,\"1491\":1,\"1493\":1,\"1497\":1,\"1501\":1,\"1505\":1,\"1511\":1,\"1513\":1,\"1517\":1,\"1518\":2,\"1519\":1,\"1522\":1,\"1524\":1,\"1530\":1,\"1533\":1,\"1540\":1,\"1544\":1,\"1548\":1,\"1551\":1,\"1559\":1,\"1564\":1,\"1570\":1,\"1572\":1,\"1578\":1,\"1587\":1,\"1591\":1,\"1595\":1,\"1602\":1,\"1606\":1,\"1610\":1,\"1612\":1,\"1616\":1,\"1617\":2,\"1618\":1,\"1619\":1,\"1620\":1,\"1621\":1,\"1622\":1,\"1624\":1,\"1628\":1,\"1633\":1,\"1636\":1,\"1642\":1,\"1647\":1,\"1651\":1,\"1654\":1,\"1656\":1,\"1661\":1,\"1664\":1,\"1672\":1,\"1673\":2,\"1674\":1,\"1675\":1,\"1676\":1,\"1677\":1,\"1682\":1,\"1685\":1,\"1687\":1,\"1690\":1,\"1696\":1,\"1699\":1,\"1702\":1,\"1705\":1,\"1709\":1,\"1714\":1,\"1715\":2,\"1716\":1,\"1717\":1,\"1719\":1,\"1723\":1,\"1728\":1,\"1737\":1,\"1741\":1,\"1743\":1,\"1747\":1,\"1751\":1,\"1755\":1,\"1758\":1,\"1760\":1,\"1764\":1,\"1767\":1,\"1773\":1,\"1779\":1,\"1783\":1,\"1784\":2,\"1785\":1,\"1787\":1,\"1796\":1,\"1799\":1,\"1800\":2,\"1801\":1,\"1802\":1,\"1806\":1,\"1811\":1,\"1812\":2,\"1813\":1,\"1814\":1,\"1821\":1,\"1828\":1,\"1833\":1,\"1841\":1,\"1847\":1,\"1850\":1,\"1855\":1,\"1860\":1,\"1868\":1,\"1872\":1,\"1875\":1,\"1881\":1,\"1883\":1,\"1886\":1,\"1890\":1,\"1895\":1,\"1898\":1,\"1903\":1,\"1907\":1,\"1913\":1,\"1916\":1,\"1922\":1,\"1924\":1,\"1931\":1,\"1933\":1,\"1942\":1,\"1944\":1,\"1951\":1,\"1954\":1,\"1961\":1,\"1964\":1,\"1968\":1,\"1971\":1,\"1975\":1,\"1981\":1,\"1988\":1,\"1993\":1,\"1997\":1,\"1999\":1,\"2004\":1,\"2007\":1,\"2012\":1,\"2018\":1,\"2025\":1,\"2026\":2,\"2027\":1,\"2028\":1,\"2031\":1,\"2037\":1,\"2041\":1,\"2047\":1,\"2050\":1,\"2058\":1,\"2059\":2,\"2060\":1,\"2061\":1,\"2062\":1,\"2064\":1,\"2072\":1,\"2075\":1,\"2079\":1,\"2084\":1,\"2086\":1,\"2089\":1,\"2094\":1,\"2099\":1,\"2102\":1,\"2103\":1,\"2111\":1,\"2115\":1,\"2120\":1,\"2134\":1,\"2144\":1,\"2148\":1,\"2154\":1,\"2155\":2,\"2156\":1,\"2158\":1,\"2161\":1,\"2164\":1,\"2167\":1,\"2170\":1,\"2173\":1,\"2176\":1,\"2179\":1,\"2182\":1,\"2184\":1,\"2188\":1,\"2195\":1,\"2196\":2,\"2197\":1,\"2202\":1,\"2205\":1,\"2210\":1,\"2215\":1,\"2216\":2,\"2217\":1,\"2218\":1,\"2221\":1,\"2226\":1,\"2229\":1,\"2239\":1,\"2240\":2,\"2241\":1,\"2247\":1,\"2251\":1,\"2252\":2,\"2253\":1,\"2254\":1,\"2256\":1,\"2259\":1,\"2269\":1,\"2276\":2,\"2277\":1,\"2280\":1,\"2285\":1,\"2287\":1,\"2293\":1,\"2297\":1,\"2302\":1,\"2305\":1,\"2307\":1,\"2310\":1,\"2316\":1,\"2321\":1,\"2325\":1,\"2327\":1,\"2331\":1,\"2336\":1,\"2338\":1,\"2342\":1,\"2349\":1,\"2350\":2,\"2351\":1,\"2353\":1,\"2356\":1,\"2359\":1,\"2360\":1,\"2366\":1,\"2367\":1,\"2368\":2,\"2369\":1,\"2370\":1,\"2375\":1,\"2378\":1,\"2379\":1,\"2380\":2,\"2381\":1,\"2382\":1,\"2386\":1,\"2389\":1,\"2392\":1,\"2394\":1,\"2398\":1,\"2399\":2,\"2400\":1,\"2402\":1,\"2407\":1,\"2410\":1,\"2412\":1,\"2413\":2,\"2414\":1,\"2416\":1,\"2423\":1,\"2429\":1,\"2431\":1,\"2438\":1,\"2444\":1,\"2446\":1,\"2452\":1,\"2459\":1,\"2463\":1,\"2465\":1,\"2472\":1,\"2474\":1,\"2478\":1,\"2481\":1,\"2482\":2,\"2483\":1,\"2485\":1,\"2489\":1,\"2493\":1,\"2498\":1,\"2500\":1,\"2505\":1,\"2509\":1,\"2514\":1,\"2515\":2,\"2516\":1,\"2518\":1,\"2521\":1,\"2522\":1,\"2530\":1,\"2536\":1,\"2540\":1,\"2545\":1,\"2546\":2,\"2547\":1,\"2552\":1,\"2558\":1,\"2563\":1,\"2566\":1,\"2570\":1,\"2574\":1,\"2583\":1,\"2588\":1,\"2592\":1,\"2597\":1,\"2600\":1,\"2604\":1,\"2606\":1,\"2609\":1,\"2613\":1,\"2617\":1,\"2618\":2,\"2619\":1,\"2620\":1,\"2623\":1,\"2628\":1,\"2635\":1,\"2639\":1,\"2645\":1,\"2651\":1,\"2658\":1,\"2661\":1,\"2667\":1,\"2671\":1,\"2680\":1,\"2684\":1,\"2689\":1,\"2692\":1,\"2695\":1,\"2696\":1,\"2709\":1,\"2714\":1,\"2723\":1,\"2729\":1,\"2731\":1,\"2738\":1,\"2741\":1,\"2743\":1,\"2747\":1,\"2754\":1,\"2758\":1,\"2763\":1,\"2768\":1,\"2774\":1,\"2777\":1,\"2781\":1,\"2785\":1,\"2791\":1,\"2793\":1,\"2798\":1,\"2801\":1,\"2808\":1,\"2812\":1,\"2816\":1,\"2825\":1,\"2829\":1,\"2835\":1,\"2840\":2,\"2842\":1,\"2848\":1,\"2853\":1,\"2855\":1,\"2862\":1,\"2864\":1,\"2867\":1,\"2876\":1,\"2881\":1,\"2883\":1,\"2888\":1,\"2892\":1,\"2895\":1,\"2899\":1,\"2905\":1,\"2910\":1,\"2912\":1,\"2914\":1,\"2915\":2,\"2916\":1,\"2917\":1,\"2919\":1,\"2923\":1,\"2924\":1,\"2925\":1,\"2928\":1,\"2930\":1,\"2932\":1,\"2935\":1,\"2938\":1,\"2941\":1,\"2942\":2,\"2943\":1,\"2945\":1,\"2948\":1,\"2951\":1,\"2954\":1,\"2956\":1,\"2959\":1,\"2963\":1,\"2967\":1,\"2971\":1,\"2975\":1,\"2976\":2,\"2981\":1,\"2986\":1,\"2991\":1,\"2996\":1,\"3002\":1,\"3005\":1,\"3014\":1,\"3018\":1,\"3020\":2,\"3022\":1,\"3026\":1,\"3031\":1,\"3036\":1,\"3038\":1,\"3040\":1,\"3043\":1,\"3046\":1,\"3052\":1,\"3055\":1,\"3058\":1,\"3060\":1,\"3066\":1,\"3069\":1,\"3071\":1,\"3072\":2,\"3073\":1,\"3074\":1,\"3076\":1,\"3081\":1,\"3086\":1,\"3088\":1,\"3090\":1,\"3095\":1,\"3099\":1,\"3103\":1,\"3105\":1,\"3109\":1,\"3111\":1,\"3116\":1,\"3119\":1,\"3123\":1,\"3125\":1,\"3130\":1,\"3137\":1,\"3142\":1,\"3147\":1,\"3152\":1,\"3153\":2,\"3154\":1,\"3156\":1,\"3159\":1,\"3164\":1,\"3165\":2,\"3168\":1,\"3171\":1,\"3174\":1,\"3178\":1,\"3179\":1,\"3182\":1,\"3186\":1,\"3193\":1,\"3195\":1,\"3203\":1,\"3205\":1,\"3209\":1,\"3212\":1,\"3217\":1,\"3219\":1,\"3224\":1,\"3229\":1,\"3232\":1,\"3236\":1,\"3242\":1,\"3253\":1,\"3258\":1,\"3259\":1,\"3270\":1},\"1\":{\"21\":2,\"71\":2,\"72\":1,\"73\":1,\"74\":1,\"76\":1,\"85\":2,\"86\":2,\"115\":1,\"119\":2,\"127\":2,\"145\":2,\"146\":1,\"170\":1,\"174\":1,\"196\":2,\"200\":7,\"212\":1,\"213\":1,\"225\":1,\"242\":1,\"251\":1,\"262\":1,\"288\":1,\"298\":3,\"299\":1,\"300\":1,\"301\":1,\"304\":2,\"305\":1,\"312\":2,\"335\":1,\"347\":1,\"351\":1,\"356\":1,\"357\":1,\"368\":1,\"375\":2,\"376\":1,\"377\":2,\"378\":1,\"381\":1,\"382\":2,\"383\":1,\"384\":2,\"385\":1,\"389\":1,\"407\":1,\"408\":2,\"409\":1,\"412\":1,\"421\":1,\"434\":1,\"445\":1,\"460\":2,\"473\":8,\"474\":8,\"486\":2,\"498\":2,\"501\":3,\"502\":1,\"503\":1,\"509\":2,\"512\":2,\"513\":3,\"514\":2,\"515\":2,\"516\":3,\"518\":2,\"519\":3,\"520\":2,\"521\":1,\"525\":1,\"526\":3,\"529\":2,\"530\":1,\"535\":2,\"536\":1,\"537\":1,\"538\":1,\"564\":1,\"565\":3,\"566\":3,\"570\":1,\"577\":2,\"613\":1,\"621\":2,\"626\":1,\"629\":1,\"636\":1,\"641\":1,\"642\":2,\"644\":2,\"645\":5,\"646\":2,\"647\":3,\"648\":2,\"676\":1,\"677\":2,\"678\":2,\"682\":3,\"683\":4,\"684\":4,\"685\":4,\"686\":1,\"687\":2,\"688\":1,\"689\":3,\"690\":3,\"691\":2,\"697\":1,\"700\":2,\"701\":1,\"739\":1,\"741\":2,\"742\":2,\"744\":1,\"769\":1,\"784\":2,\"785\":1,\"787\":1,\"802\":1,\"808\":1,\"811\":3,\"813\":1,\"839\":2,\"846\":1,\"849\":1,\"863\":1,\"867\":1,\"873\":9,\"881\":2,\"884\":1,\"890\":2,\"893\":1,\"897\":2,\"902\":1,\"907\":1,\"908\":1,\"909\":1,\"911\":1,\"928\":1,\"931\":2,\"932\":1,\"936\":1,\"941\":1,\"950\":2,\"954\":2,\"955\":2,\"971\":4,\"972\":3,\"974\":1,\"975\":2,\"977\":1,\"979\":1,\"982\":2,\"984\":3,\"985\":1,\"988\":2,\"989\":1,\"990\":7,\"994\":1,\"997\":2,\"998\":1,\"1010\":1,\"1019\":2,\"1025\":1,\"1028\":1,\"1035\":4,\"1054\":1,\"1056\":1,\"1063\":1,\"1104\":1,\"1128\":3,\"1141\":1,\"1158\":1,\"1175\":1,\"1194\":2,\"1240\":1,\"1241\":1,\"1257\":1,\"1259\":1,\"1288\":1,\"1298\":1,\"1312\":1,\"1320\":2,\"1323\":1,\"1335\":1,\"1341\":1,\"1343\":2,\"1344\":1,\"1351\":1,\"1352\":1,\"1373\":1,\"1402\":6,\"1404\":3,\"1405\":1,\"1406\":2,\"1440\":2,\"1471\":1,\"1472\":1,\"1487\":1,\"1492\":1,\"1502\":1,\"1507\":1,\"1521\":1,\"1547\":1,\"1550\":1,\"1556\":2,\"1562\":1,\"1569\":1,\"1579\":2,\"1580\":1,\"1594\":1,\"1598\":1,\"1604\":1,\"1645\":1,\"1674\":1,\"1675\":1,\"1692\":1,\"1705\":2,\"1706\":1,\"1709\":5,\"1710\":1,\"1747\":1,\"1748\":1,\"1753\":2,\"1762\":2,\"1775\":1,\"1782\":1,\"1801\":1,\"1804\":2,\"1805\":1,\"1816\":1,\"1817\":2,\"1823\":3,\"1826\":1,\"1836\":4,\"1841\":1,\"1858\":2,\"1861\":1,\"1878\":1,\"1879\":1,\"1888\":3,\"1891\":1,\"1898\":1,\"1903\":1,\"1904\":1,\"1908\":1,\"1909\":1,\"1913\":1,\"1927\":2,\"1928\":1,\"1933\":1,\"1935\":1,\"1936\":1,\"1958\":1,\"1966\":1,\"1968\":1,\"1972\":2,\"1977\":1,\"1983\":1,\"1985\":1,\"1989\":1,\"1995\":1,\"2004\":3,\"2009\":1,\"2010\":1,\"2025\":1,\"2032\":1,\"2045\":3,\"2048\":7,\"2058\":1,\"2063\":1,\"2067\":1,\"2100\":1,\"2108\":2,\"2121\":1,\"2123\":1,\"2129\":1,\"2144\":1,\"2192\":1,\"2198\":1,\"2200\":2,\"2210\":1,\"2221\":2,\"2239\":1,\"2240\":1,\"2243\":1,\"2277\":3,\"2280\":2,\"2281\":2,\"2284\":2,\"2288\":2,\"2289\":1,\"2290\":1,\"2291\":1,\"2297\":1,\"2298\":1,\"2299\":1,\"2300\":2,\"2303\":1,\"2308\":2,\"2311\":7,\"2312\":1,\"2319\":1,\"2321\":2,\"2322\":2,\"2325\":2,\"2327\":1,\"2329\":2,\"2333\":2,\"2334\":1,\"2347\":2,\"2349\":5,\"2352\":6,\"2355\":5,\"2364\":3,\"2365\":4,\"2372\":1,\"2373\":2,\"2375\":1,\"2376\":3,\"2377\":3,\"2386\":2,\"2387\":1,\"2391\":1,\"2405\":11,\"2407\":1,\"2408\":1,\"2409\":2,\"2417\":2,\"2418\":1,\"2424\":1,\"2426\":2,\"2450\":2,\"2454\":1,\"2457\":1,\"2478\":1,\"2483\":1,\"2511\":1,\"2522\":2,\"2530\":1,\"2558\":1,\"2566\":1,\"2572\":1,\"2574\":1,\"2583\":1,\"2596\":1,\"2597\":2,\"2598\":3,\"2610\":1,\"2623\":1,\"2624\":1,\"2628\":1,\"2635\":1,\"2636\":1,\"2646\":2,\"2647\":1,\"2648\":1,\"2651\":1,\"2704\":2,\"2712\":1,\"2743\":1,\"2744\":2,\"2755\":1,\"2771\":2,\"2772\":1,\"2779\":1,\"2781\":1,\"2786\":1,\"2791\":2,\"2798\":1,\"2835\":1,\"2842\":3,\"2846\":1,\"2854\":1,\"2856\":2,\"2858\":1,\"2864\":2,\"2868\":1,\"2878\":1,\"2879\":3,\"2880\":9,\"2884\":2,\"2885\":1,\"2890\":2,\"2892\":1,\"2900\":2,\"2901\":3,\"2906\":1,\"2907\":2,\"2908\":5,\"2910\":2,\"2914\":1,\"2915\":2,\"2920\":2,\"2924\":1,\"2925\":2,\"2926\":5,\"2929\":1,\"2930\":5,\"2948\":1,\"2949\":1,\"2952\":1,\"2955\":1,\"2957\":2,\"2993\":2,\"2997\":1,\"3007\":1,\"3015\":3,\"3019\":1,\"3031\":3,\"3040\":2,\"3056\":2,\"3057\":1,\"3076\":3,\"3082\":1,\"3084\":2,\"3087\":1,\"3092\":2,\"3093\":3,\"3095\":1,\"3097\":5,\"3106\":2,\"3109\":1,\"3111\":1,\"3112\":6,\"3113\":10,\"3114\":4,\"3116\":2,\"3121\":1,\"3122\":2,\"3127\":2,\"3131\":1,\"3133\":1,\"3145\":1,\"3150\":1,\"3153\":7,\"3154\":1,\"3156\":31,\"3157\":2,\"3159\":7,\"3160\":6,\"3161\":1,\"3165\":1,\"3172\":1,\"3186\":4,\"3187\":4,\"3193\":1,\"3199\":1,\"3200\":1,\"3201\":1,\"3205\":1,\"3221\":2,\"3222\":1,\"3224\":1,\"3243\":1}}],[\"lucene只是一个提供全文搜索功能类库的核心工具包\",{\"1\":{\"2844\":1}}],[\"lucene\",{\"0\":{\"2844\":1},\"1\":{\"2844\":2,\"2858\":1}}],[\"l2\",{\"1\":{\"868\":1}}],[\"l1\",{\"1\":{\"868\":1}}],[\"lte\",{\"1\":{\"2938\":1,\"3002\":2,\"3003\":1}}],[\"lts版本\",{\"1\":{\"2104\":3}}],[\"lts\",{\"0\":{\"2104\":1,\"2261\":1}}],[\"lt\",{\"1\":{\"470\":1,\"2938\":1,\"3002\":1}}],[\"ltnow\",{\"1\":{\"469\":2}}],[\"ldtstr\",{\"1\":{\"484\":2}}],[\"ldt8\",{\"1\":{\"472\":2,\"473\":2,\"474\":1}}],[\"ldt7\",{\"1\":{\"472\":2,\"473\":2,\"474\":1}}],[\"ldt6\",{\"1\":{\"472\":2,\"473\":2,\"474\":1}}],[\"ldt5\",{\"1\":{\"472\":2,\"473\":2,\"474\":1}}],[\"ldt4\",{\"1\":{\"472\":2,\"473\":2,\"474\":1}}],[\"ldt3\",{\"1\":{\"472\":2,\"473\":2,\"474\":1,\"486\":2}}],[\"ldt2\",{\"1\":{\"472\":2,\"473\":2,\"474\":1,\"486\":2}}],[\"ldt1\",{\"1\":{\"472\":2,\"473\":2,\"474\":1}}],[\"ldt\",{\"1\":{\"470\":1,\"471\":4,\"472\":9,\"473\":9,\"474\":9,\"484\":2,\"488\":2}}],[\"ldtnow\",{\"1\":{\"469\":2,\"471\":5}}],[\"ld\",{\"1\":{\"470\":1}}],[\"ldnow\",{\"1\":{\"469\":2}}],[\"l\",{\"1\":{\"425\":1,\"840\":2}}],[\"ll\",{\"1\":{\"414\":2,\"415\":1}}],[\"lqw\",{\"1\":{\"356\":3,\"357\":4,\"360\":5}}],[\"lexicon\",{\"1\":{\"2878\":1}}],[\"le\",{\"1\":{\"1858\":1}}],[\"legnth\",{\"1\":{\"1018\":1}}],[\"learn\",{\"1\":{\"540\":1,\"636\":1,\"2290\":1}}],[\"len2\",{\"1\":{\"498\":3}}],[\"len1\",{\"1\":{\"498\":3}}],[\"len\",{\"1\":{\"452\":1,\"566\":5,\"570\":2,\"576\":3,\"577\":3,\"1805\":3,\"1807\":1,\"1817\":3,\"1823\":3,\"1836\":5,\"1853\":1,\"1858\":2,\"1888\":3,\"2365\":3,\"2646\":3}}],[\"length参数必须小于等于\",{\"1\":{\"1986\":1}}],[\"length并不能代表真实的字符数\",{\"1\":{\"1808\":1}}],[\"length==0\",{\"1\":{\"411\":1}}],[\"length\",{\"0\":{\"403\":1,\"451\":1,\"544\":1},\"1\":{\"403\":2,\"449\":1,\"451\":4,\"454\":1,\"498\":2,\"544\":4,\"566\":1,\"577\":2,\"647\":1,\"966\":2,\"973\":1,\"974\":1,\"991\":2,\"992\":2,\"1048\":1,\"1606\":2,\"1607\":1,\"1808\":1,\"1983\":1,\"1984\":1,\"1985\":1,\"1986\":8,\"2048\":6,\"2184\":2,\"2333\":1,\"2352\":1,\"2355\":1,\"2386\":1,\"2405\":4}}],[\"lettuce\",{\"1\":{\"293\":1}}],[\"lettcus基于netty框架进行与redis服务器连接\",{\"1\":{\"291\":1}}],[\"lettcus与jedis区别\",{\"0\":{\"291\":1}}],[\"level指定的版本不支持新语法\",{\"1\":{\"2108\":1}}],[\"level是编辑器用来对代码进行语言检查的版本\",{\"1\":{\"2108\":1}}],[\"level=\",{\"1\":{\"262\":5}}],[\"levelfilter\",{\"1\":{\"262\":3}}],[\"level为\",{\"1\":{\"262\":3}}],[\"level>\",{\"1\":{\"262\":4}}],[\"level\",{\"0\":{\"2108\":1},\"1\":{\"249\":1,\"262\":2,\"2390\":1}}],[\"large\",{\"1\":{\"2362\":1}}],[\"lambda要实现的操作\",{\"1\":{\"2156\":1}}],[\"lambda与创建functional对象\",{\"0\":{\"2141\":1}}],[\"lambda的使用\",{\"0\":{\"2119\":1}}],[\"lambda体应该使用一对\",{\"1\":{\"2118\":1}}],[\"lambda体\",{\"1\":{\"2114\":1}}],[\"lambda形参列表的参数类型可以省略\",{\"1\":{\"2118\":1}}],[\"lambda形参列表\",{\"1\":{\"2114\":1}}],[\"lambda操作符或箭头操作符\",{\"1\":{\"2114\":1}}],[\"lambda本质\",{\"0\":{\"2112\":1}}],[\"lambda表达式写法\",{\"0\":{\"2155\":1}}],[\"lambda表达式的使用\",{\"1\":{\"2119\":1}}],[\"lambda表达式的本质\",{\"1\":{\"2112\":1}}],[\"lambda表达式中无需指定类型\",{\"1\":{\"2117\":1}}],[\"lambda表达式\",{\"0\":{\"2110\":1,\"2158\":1}}],[\"lambda\",{\"0\":{\"2109\":1,\"2161\":1,\"2164\":1,\"2167\":1,\"2173\":1,\"2176\":1,\"2179\":1,\"2184\":1},\"1\":{\"2111\":1,\"2117\":2,\"2121\":1,\"2123\":1,\"2141\":2,\"2210\":1}}],[\"lambdaquerywrapper<book>\",{\"1\":{\"356\":2,\"357\":2,\"360\":2}}],[\"lambdaquerywrapper\",{\"0\":{\"356\":1}}],[\"laddr\",{\"1\":{\"1985\":1}}],[\"lass\",{\"1\":{\"1723\":1}}],[\"lastheartbeatrecv\",{\"1\":{\"3159\":1,\"3160\":1}}],[\"lastheartbeat\",{\"1\":{\"3159\":1,\"3160\":1}}],[\"lastheartbeatmessage\",{\"1\":{\"3156\":1,\"3159\":1,\"3160\":1}}],[\"lastseenoptimeatelection\",{\"1\":{\"3156\":1}}],[\"laststablerecoverytimestamp\",{\"1\":{\"3156\":1}}],[\"lastelectiondate\",{\"1\":{\"3156\":1}}],[\"lastelectionreason\",{\"1\":{\"3156\":1}}],[\"lastdurablewalltime\",{\"1\":{\"3156\":2,\"3159\":1}}],[\"lastappliedwalltime\",{\"1\":{\"3156\":2,\"3159\":1}}],[\"lastcommittedwalltime\",{\"1\":{\"3156\":1}}],[\"lastcommittedoptimeatelection\",{\"1\":{\"3156\":1}}],[\"lastcommittedoptime\",{\"1\":{\"3156\":1}}],[\"lastmodified\",{\"0\":{\"545\":1},\"1\":{\"545\":2}}],[\"lastindexof\",{\"0\":{\"409\":1,\"701\":1},\"1\":{\"409\":3,\"701\":2}}],[\"label\",{\"1\":{\"950\":3}}],[\"launcher$extclassloader\",{\"1\":{\"597\":1,\"2032\":1}}],[\"launcher$appclassloader\",{\"1\":{\"596\":1,\"2032\":1}}],[\"lang包下\",{\"1\":{\"2741\":1}}],[\"lang包下定义的\",{\"1\":{\"1094\":1}}],[\"lang包无需导入\",{\"1\":{\"1097\":1}}],[\"lang包\",{\"1\":{\"1094\":1}}],[\"lang\",{\"1\":{\"493\":1,\"504\":2,\"511\":1,\"529\":1,\"593\":1,\"595\":1,\"600\":1,\"611\":1,\"624\":1,\"810\":2,\"1090\":1,\"1097\":1,\"1116\":4,\"1144\":1,\"1175\":1,\"1181\":1,\"1312\":2,\"1323\":3,\"1325\":1,\"1377\":1,\"1395\":1,\"1404\":1,\"1405\":1,\"1406\":1,\"1432\":7,\"1465\":1,\"1551\":1,\"1554\":1,\"1588\":1,\"1711\":1,\"1880\":1,\"2002\":4,\"2004\":1,\"2012\":1,\"2016\":2,\"2026\":1,\"2029\":1,\"2044\":1,\"2045\":1,\"2048\":5,\"2434\":1}}],[\"lang=>\",{\"1\":{\"401\":1}}],[\"lang<\",{\"1\":{\"389\":2}}],[\"language\",{\"1\":{\"71\":1,\"1010\":1,\"2602\":1,\"2767\":1}}],[\"layers\",{\"1\":{\"200\":2}}],[\"lock>同步代码块\",{\"1\":{\"1538\":1}}],[\"lock只有代码块锁\",{\"1\":{\"1537\":1}}],[\"lock是显式锁\",{\"1\":{\"1537\":1}}],[\"lock\",{\"1\":{\"1532\":5,\"1534\":2,\"1535\":1,\"1536\":5,\"3242\":1}}],[\"lock的优点\",{\"0\":{\"1531\":1}}],[\"lock接口是控制多个线程对共享资源进行访问的工具\",{\"1\":{\"1530\":1}}],[\"locks\",{\"1\":{\"1530\":1,\"1536\":1}}],[\"lock锁方式也可以解决线程安全问题\",{\"1\":{\"1529\":1}}],[\"lock锁\",{\"0\":{\"1529\":1}}],[\"locator\",{\"1\":{\"1988\":1,\"1995\":1}}],[\"location\",{\"1\":{\"71\":1,\"2659\":1,\"2661\":1}}],[\"localtime\",{\"0\":{\"465\":1,\"467\":1},\"1\":{\"461\":1,\"464\":1,\"467\":1,\"469\":2,\"470\":3}}],[\"localdatetime实现了该接口\",{\"1\":{\"481\":1}}],[\"localdatetimeimplements\",{\"1\":{\"468\":1}}],[\"localdatetime\",{\"0\":{\"465\":1,\"468\":1},\"1\":{\"461\":1,\"464\":1,\"469\":2,\"470\":3,\"471\":2,\"472\":10,\"473\":10,\"474\":10,\"484\":2,\"486\":2,\"488\":2}}],[\"localdate\",{\"0\":{\"465\":1,\"466\":1},\"1\":{\"461\":1,\"464\":1,\"466\":1,\"469\":2,\"470\":3}}],[\"local\",{\"1\":{\"302\":1,\"483\":6,\"484\":1,\"485\":1,\"1405\":1,\"1412\":1,\"1413\":1,\"1427\":1,\"2507\":1,\"3060\":1}}],[\"local目录中\",{\"1\":{\"206\":1}}],[\"localhost中创建任意xml文件\",{\"1\":{\"2469\":1}}],[\"localhost\",{\"1\":{\"87\":1,\"130\":1,\"267\":1,\"277\":1,\"292\":1,\"293\":1,\"341\":1,\"390\":1,\"394\":1,\"1935\":1,\"2294\":1,\"2297\":1,\"2299\":1,\"2300\":1,\"2302\":1,\"2425\":1,\"2463\":1,\"2467\":2,\"2468\":1,\"2502\":1,\"2510\":1,\"2533\":1,\"2537\":1,\"2574\":1,\"2575\":1,\"2576\":1,\"2577\":1,\"2598\":2,\"2601\":1,\"2640\":1,\"2642\":1,\"2655\":1,\"2663\":1,\"2858\":1,\"2860\":2,\"2884\":1,\"2889\":1,\"2896\":1,\"2919\":1,\"2972\":1,\"2975\":1,\"2977\":1,\"2978\":1,\"2980\":1,\"2983\":1,\"2984\":1,\"2986\":1,\"2987\":1,\"2991\":1,\"2992\":1,\"2993\":1,\"2997\":1,\"3000\":1,\"3003\":1,\"3006\":1,\"3008\":1,\"3010\":1,\"3015\":1,\"3019\":1,\"3048\":1,\"3142\":1}}],[\"love\",{\"1\":{\"421\":1,\"425\":1}}],[\"lo\",{\"1\":{\"413\":1}}],[\"lombok\",{\"0\":{\"330\":1,\"344\":1},\"1\":{\"336\":1,\"344\":1}}],[\"lombok包提供的类注解\",{\"1\":{\"244\":1}}],[\"loaction=classpath\",{\"1\":{\"221\":1}}],[\"loading\",{\"1\":{\"3204\":1}}],[\"loadonstartup\",{\"1\":{\"2572\":1}}],[\"loadonstartup=1\",{\"1\":{\"2552\":1}}],[\"loaddriver\",{\"1\":{\"2434\":1}}],[\"loadfactor\",{\"1\":{\"1680\":1}}],[\"load\",{\"0\":{\"2026\":1},\"1\":{\"1680\":1,\"1692\":1,\"2034\":2,\"2303\":1,\"2325\":1,\"2327\":1,\"2424\":1,\"2427\":1}}],[\"loadclass\",{\"1\":{\"589\":1,\"2021\":1}}],[\"loader\",{\"1\":{\"198\":1,\"200\":1,\"2090\":1}}],[\"loadbalancer\",{\"1\":{\"11\":1}}],[\"longblob\",{\"1\":{\"2360\":1}}],[\"longvarchar\",{\"1\":{\"2314\":1}}],[\"longvalue\",{\"1\":{\"524\":1}}],[\"long型没有加l\",{\"1\":{\"868\":1}}],[\"long类型为什么加l\",{\"0\":{\"850\":1}}],[\"long类也是有限的\",{\"1\":{\"529\":1}}],[\"longstream\",{\"1\":{\"811\":1,\"2199\":1,\"2218\":1}}],[\"long\",{\"1\":{\"164\":1,\"423\":3,\"440\":2,\"478\":2,\"479\":2,\"486\":2,\"512\":1,\"516\":3,\"518\":1,\"519\":1,\"523\":1,\"524\":2,\"530\":1,\"544\":2,\"545\":2,\"633\":2,\"640\":1,\"761\":1,\"827\":1,\"841\":1,\"868\":2,\"956\":2,\"1025\":1,\"1109\":1,\"1251\":2,\"1298\":1,\"1364\":1,\"1479\":1,\"1838\":2,\"1876\":1,\"1883\":1,\"1884\":1,\"1907\":1,\"1910\":2,\"1920\":1,\"1994\":2,\"2103\":1,\"2199\":1,\"2234\":2,\"2314\":1,\"2373\":1,\"2376\":1,\"2407\":1,\"2408\":1,\"2409\":1,\"2443\":2,\"3153\":2,\"3156\":11,\"3159\":2,\"3160\":2,\"3186\":1,\"3187\":1}}],[\"lookup\",{\"1\":{\"93\":1}}],[\"logappend\",{\"1\":{\"3048\":1,\"3142\":1}}],[\"log4j防御sql注入的filter\",{\"1\":{\"2426\":1}}],[\"logstash\",{\"1\":{\"2842\":1}}],[\"logs\",{\"1\":{\"302\":1,\"2856\":1}}],[\"log<\",{\"1\":{\"262\":6}}],[\"logback相对于log4j的一些优点\",{\"1\":{\"260\":1}}],[\"logback和log4j非常相似\",{\"1\":{\"260\":1}}],[\"logback\",{\"0\":{\"259\":1},\"1\":{\"258\":1,\"261\":1,\"262\":14}}],[\"logging\",{\"1\":{\"249\":1,\"252\":1,\"253\":1,\"256\":1,\"258\":1,\"348\":1,\"390\":1}}],[\"loggerfactory\",{\"1\":{\"242\":1}}],[\"logger\",{\"1\":{\"242\":1,\"262\":4}}],[\"log日志\",{\"0\":{\"239\":1}}],[\"log\",{\"1\":{\"29\":1,\"242\":5,\"244\":5,\"256\":1,\"258\":1,\"262\":16,\"263\":4,\"302\":1,\"348\":1,\"390\":1,\"393\":1,\"521\":5,\"3047\":1,\"3048\":2,\"3140\":1,\"3142\":3,\"3143\":3,\"3144\":3}}],[\"lily\",{\"1\":{\"1432\":1}}],[\"literal\",{\"1\":{\"749\":1}}],[\"limilt\",{\"1\":{\"3097\":1}}],[\"limit\",{\"0\":{\"2212\":1},\"1\":{\"434\":2,\"744\":2,\"753\":1,\"2202\":1,\"2203\":1,\"2206\":1,\"2212\":2,\"2213\":1,\"3096\":3,\"3097\":1}}],[\"lim\",{\"1\":{\"498\":2}}],[\"likenum\",{\"1\":{\"3073\":1,\"3076\":2,\"3082\":1,\"3084\":1,\"3097\":1,\"3100\":1,\"3102\":3,\"3168\":1}}],[\"like\",{\"1\":{\"355\":1,\"356\":1,\"357\":2,\"360\":3}}],[\"likes1\",{\"1\":{\"127\":1}}],[\"likes2\",{\"1\":{\"124\":1}}],[\"likes\",{\"1\":{\"124\":1,\"127\":1}}],[\"lib下\",{\"1\":{\"2741\":2}}],[\"lib中的一个包\",{\"1\":{\"2525\":1}}],[\"library\",{\"1\":{\"2290\":1}}],[\"library>java>lang>system\",{\"1\":{\"632\":1}}],[\"libraries>java\",{\"1\":{\"641\":1}}],[\"libraries>java>util\",{\"1\":{\"653\":1,\"672\":1}}],[\"libraries>java>util>comparator\",{\"1\":{\"504\":1}}],[\"libraries>java>time>format>datetimeformatter\",{\"1\":{\"480\":1}}],[\"libraries>java>time>instant\",{\"1\":{\"475\":1}}],[\"libraries>java>time>localtime\",{\"1\":{\"467\":1}}],[\"libraries>java>time>localdatetime\",{\"1\":{\"468\":1}}],[\"libraries>java>time>localdate\",{\"1\":{\"466\":1}}],[\"libraries>java>lang>comparable\",{\"1\":{\"495\":1}}],[\"libraries>java>lang\",{\"1\":{\"435\":2}}],[\"libraries=>\",{\"1\":{\"401\":1}}],[\"lib\",{\"1\":{\"198\":1,\"200\":2,\"787\":1,\"2290\":1,\"2474\":1,\"2525\":1,\"2856\":1}}],[\"lisi\",{\"1\":{\"124\":3,\"2624\":1}}],[\"listner是javaweb的核心三件套\",{\"1\":{\"2521\":1}}],[\"list5\",{\"1\":{\"1753\":3}}],[\"list4\",{\"1\":{\"1753\":3}}],[\"list3\",{\"1\":{\"1721\":2,\"1738\":3,\"1745\":5,\"1753\":3}}],[\"list集合\",{\"0\":{\"1709\":1}}],[\"list集合类中元素有序\",{\"1\":{\"1610\":1}}],[\"list方法\",{\"0\":{\"1630\":1}}],[\"list接口是collection的子接口\",{\"1\":{\"1611\":1}}],[\"list接口的实现类\",{\"0\":{\"1611\":1}}],[\"list接口为collection接口的子接口\",{\"1\":{\"1610\":1}}],[\"list容器中的元素都对应一个整数型的序号记载其在容器中的位置\",{\"1\":{\"1610\":1}}],[\"list1\",{\"1\":{\"698\":3,\"699\":3,\"700\":2,\"701\":2,\"702\":5,\"703\":3,\"704\":3,\"1721\":3,\"1737\":2,\"1738\":2,\"1743\":3,\"1747\":4,\"1748\":4,\"1753\":6}}],[\"list是接口不能直接实例化\",{\"1\":{\"695\":1}}],[\"list除了从collection集合继承的方法外\",{\"1\":{\"693\":1,\"1630\":1}}],[\"list2\",{\"1\":{\"689\":7,\"698\":3,\"704\":2,\"1721\":4,\"1737\":2,\"1738\":2,\"1743\":3,\"1747\":4,\"1748\":4,\"1753\":6,\"1757\":1}}],[\"list<customer>\",{\"1\":{\"2356\":1,\"2407\":1,\"2408\":2,\"2409\":1,\"2441\":1}}],[\"list<list<student>>\",{\"1\":{\"2221\":1,\"2223\":1}}],[\"list<student>\",{\"1\":{\"2221\":4,\"2222\":1,\"2227\":1}}],[\"list<string>\",{\"1\":{\"649\":1,\"651\":1,\"696\":1,\"697\":1,\"704\":1,\"1700\":1,\"1716\":2,\"1737\":1,\"1738\":1,\"1743\":1,\"1745\":1,\"1747\":2,\"2215\":1}}],[\"list<employee>\",{\"1\":{\"2210\":1,\"2211\":1,\"2212\":1,\"2213\":1,\"2229\":1,\"2230\":1,\"2232\":1,\"2233\":1,\"2243\":1}}],[\"list<e>\",{\"1\":{\"694\":1,\"704\":1,\"1733\":1,\"1734\":1}}],[\"list<person>\",{\"1\":{\"1753\":1}}],[\"list<man>\",{\"1\":{\"1753\":1}}],[\"list<object>\",{\"1\":{\"1737\":1,\"1743\":1,\"1753\":1}}],[\"list<integer>\",{\"1\":{\"682\":1,\"689\":1,\"691\":2,\"2226\":1,\"2239\":1,\"2240\":1}}],[\"list<\",{\"1\":{\"682\":1,\"683\":1,\"685\":1,\"689\":2,\"1743\":2,\"1745\":1,\"1748\":1,\"1753\":2}}],[\"list<t>\",{\"0\":{\"2357\":1},\"1\":{\"649\":1,\"651\":1,\"684\":2,\"690\":1,\"691\":2,\"1715\":1,\"2355\":1,\"2405\":1}}],[\"list<book>\",{\"1\":{\"359\":1,\"364\":1}}],[\"listfiles\",{\"0\":{\"547\":1},\"1\":{\"547\":2}}],[\"list\",{\"0\":{\"546\":1,\"692\":1,\"693\":1,\"1608\":1,\"1609\":1},\"1\":{\"34\":1,\"364\":1,\"371\":1,\"546\":4,\"651\":2,\"655\":1,\"681\":1,\"682\":9,\"683\":7,\"684\":8,\"685\":6,\"686\":2,\"687\":2,\"688\":2,\"689\":6,\"690\":4,\"691\":6,\"693\":1,\"696\":2,\"697\":6,\"787\":1,\"811\":1,\"1578\":1,\"1582\":2,\"1611\":1,\"1617\":1,\"1618\":1,\"1619\":1,\"1620\":1,\"1621\":2,\"1624\":1,\"1625\":1,\"1630\":1,\"1694\":1,\"1707\":7,\"1709\":7,\"1733\":3,\"1743\":3,\"1744\":3,\"1745\":3,\"1747\":2,\"1748\":2,\"1755\":1,\"2196\":2,\"2197\":2,\"2207\":1,\"2210\":2,\"2211\":2,\"2212\":3,\"2213\":2,\"2215\":2,\"2226\":2,\"2229\":2,\"2230\":2,\"2231\":1,\"2232\":2,\"2233\":2,\"2234\":1,\"2235\":1,\"2236\":1,\"2241\":1,\"2242\":1,\"2243\":2,\"2355\":3,\"2356\":2,\"2405\":3,\"2408\":2,\"2409\":2,\"2441\":2}}],[\"listener\",{\"0\":{\"2707\":1,\"3267\":1},\"1\":{\"11\":1,\"2707\":2,\"2725\":1}}],[\"linkoption\",{\"1\":{\"1920\":4}}],[\"link\",{\"0\":{\"2027\":1},\"1\":{\"810\":10}}],[\"linkedhashmap和properties\",{\"1\":{\"1661\":1}}],[\"linkedhashmap\",{\"0\":{\"1665\":1,\"1681\":1},\"1\":{\"707\":1,\"1578\":1,\"1662\":1,\"1665\":1,\"1683\":2}}],[\"linkedhashset效率高于hashset\",{\"1\":{\"1654\":1}}],[\"linkedhashset作为hashset的子类\",{\"1\":{\"1654\":1}}],[\"linkedhashset插入性能略低于\",{\"1\":{\"1638\":1,\"1654\":1}}],[\"linkedhashset\",{\"0\":{\"1638\":1,\"1654\":1},\"1\":{\"655\":1,\"1578\":1,\"1633\":1,\"1638\":1,\"1646\":1,\"1654\":3}}],[\"linkedlist是典型的双向链表结构\",{\"1\":{\"1623\":1}}],[\"linkedlist\",{\"0\":{\"1613\":1,\"1623\":1},\"1\":{\"655\":1,\"1578\":1,\"1611\":1,\"1624\":2}}],[\"lineseparator\",{\"1\":{\"1831\":1}}],[\"lines\",{\"1\":{\"749\":1}}],[\"line\",{\"0\":{\"3022\":1},\"1\":{\"60\":1,\"61\":1,\"262\":1,\"771\":1,\"1831\":1,\"2610\":2}}],[\"linux环境的部署\",{\"1\":{\"2855\":1}}],[\"linux选tar\",{\"1\":{\"2452\":1}}],[\"linux集群\",{\"1\":{\"57\":1}}],[\"linux单机\",{\"1\":{\"57\":1}}],[\"linux\",{\"0\":{\"50\":1,\"203\":1,\"3045\":1},\"1\":{\"10\":1,\"2855\":1}}],[\"rbac\",{\"1\":{\"3182\":1}}],[\"rsh\",{\"1\":{\"2435\":4}}],[\"rsmd\",{\"1\":{\"2352\":3,\"2355\":3,\"2405\":6}}],[\"rs\",{\"1\":{\"2352\":6,\"2355\":6,\"2365\":8,\"2404\":1,\"2405\":17,\"2436\":1,\"2442\":6,\"3149\":1,\"3150\":1,\"3152\":1,\"3153\":1,\"3155\":1,\"3159\":3,\"3160\":2,\"3164\":1,\"3165\":2,\"3171\":1,\"3174\":1,\"3175\":1}}],[\"r工具\",{\"1\":{\"2278\":1}}],[\"r模式与rw模式\",{\"0\":{\"1887\":1}}],[\"rws\",{\"1\":{\"1886\":1}}],[\"rwd\",{\"1\":{\"1886\":1}}],[\"rw\",{\"1\":{\"1886\":1,\"1887\":1,\"1888\":1,\"1891\":1}}],[\"rmvb\",{\"1\":{\"1797\":1}}],[\"r>>\",{\"1\":{\"2219\":1}}],[\"r>\",{\"1\":{\"728\":1,\"2144\":1,\"2178\":1}}],[\"rint\",{\"0\":{\"518\":1},\"1\":{\"518\":4}}],[\"ribbon\",{\"1\":{\"11\":1}}],[\"r2\",{\"1\":{\"516\":2,\"1545\":1,\"2121\":2}}],[\"r1\",{\"1\":{\"516\":2,\"2121\":2}}],[\"rand\",{\"1\":{\"3212\":1}}],[\"randomaccessfile对象\",{\"1\":{\"1888\":1,\"1891\":1}}],[\"randomaccessfile\",{\"1\":{\"1880\":1,\"1881\":1,\"1882\":2,\"1885\":2,\"1888\":4,\"1891\":2}}],[\"random\",{\"0\":{\"513\":1},\"1\":{\"513\":6,\"1018\":1,\"2004\":1,\"2203\":1}}],[\"rangequerybuilder对象的参数是要进行范围查询的字段\",{\"1\":{\"3002\":1}}],[\"rangequerybuilder\",{\"0\":{\"3002\":1},\"1\":{\"3002\":5,\"3003\":5}}],[\"range\",{\"1\":{\"2938\":1}}],[\"range查询运行以下字符\",{\"1\":{\"2938\":1}}],[\"raf1\",{\"1\":{\"1891\":4}}],[\"rafwrite\",{\"1\":{\"1888\":3}}],[\"rafread\",{\"1\":{\"1888\":3}}],[\"radix取值为\",{\"1\":{\"640\":1,\"761\":1}}],[\"radix指的是进制\",{\"1\":{\"640\":1,\"761\":1}}],[\"radix\",{\"1\":{\"640\":8,\"761\":8}}],[\"rabbitmq\",{\"0\":{\"328\":1},\"1\":{\"11\":1,\"336\":1}}],[\"rt\",{\"1\":{\"511\":1,\"523\":1,\"529\":1,\"530\":1,\"538\":1,\"564\":2,\"572\":2,\"584\":1,\"612\":1,\"619\":1,\"637\":1,\"679\":1,\"693\":1,\"705\":1,\"724\":1,\"745\":1,\"754\":1,\"758\":1,\"1828\":1,\"1829\":1,\"1830\":1,\"1831\":1,\"1942\":1}}],[\"r\",{\"1\":{\"369\":2,\"370\":6,\"371\":12,\"425\":1,\"581\":1,\"728\":1,\"1834\":1,\"1886\":1,\"1887\":1,\"1888\":1,\"2144\":1}}],[\"roles\",{\"1\":{\"3186\":1,\"3187\":7,\"3193\":1,\"3195\":1,\"3196\":1,\"3197\":1,\"3198\":3,\"3210\":1}}],[\"rolesinfo\",{\"1\":{\"3186\":1,\"3187\":1,\"3188\":3}}],[\"role\",{\"1\":{\"3182\":1,\"3187\":6,\"3188\":2,\"3193\":1,\"3195\":1,\"3196\":1,\"3197\":1,\"3198\":2}}],[\"rollbackandclosequietly\",{\"1\":{\"2434\":1}}],[\"rollbackandclose\",{\"1\":{\"2434\":1}}],[\"rollback\",{\"0\":{\"2382\":1},\"1\":{\"2382\":1,\"2387\":1,\"2434\":1}}],[\"rollingfileappender\",{\"1\":{\"262\":3}}],[\"rolling\",{\"1\":{\"262\":9}}],[\"rollingpolicy>\",{\"1\":{\"262\":3}}],[\"rollingpolicy\",{\"1\":{\"258\":1}}],[\"row\",{\"1\":{\"3031\":1}}],[\"routing\",{\"1\":{\"2890\":1}}],[\"rounding\",{\"1\":{\"535\":1}}],[\"roundingmode\",{\"0\":{\"536\":1},\"1\":{\"534\":4,\"535\":2}}],[\"round\",{\"0\":{\"516\":1},\"1\":{\"516\":3,\"518\":3,\"535\":1,\"536\":8}}],[\"rose\",{\"1\":{\"1687\":1}}],[\"robots\",{\"1\":{\"425\":1}}],[\"robot\",{\"1\":{\"421\":2}}],[\"roots中对应的src目录勾选上\",{\"1\":{\"2542\":1}}],[\"root>\",{\"1\":{\"262\":2}}],[\"root节点是必选节点\",{\"1\":{\"262\":1}}],[\"root666123\",{\"1\":{\"130\":1}}],[\"root\",{\"1\":{\"130\":1,\"249\":1,\"267\":2,\"341\":2,\"390\":1,\"2297\":2,\"2299\":1,\"2300\":1,\"3060\":1,\"3189\":1,\"3190\":1,\"3193\":1,\"3195\":1,\"3198\":1,\"3210\":2,\"3225\":1,\"3237\":1}}],[\"runcommand\",{\"1\":{\"3186\":1,\"3187\":1,\"3188\":3}}],[\"run方法是该线程操作的入口\",{\"1\":{\"1469\":1}}],[\"run方法\",{\"0\":{\"1469\":1}}],[\"runner\",{\"1\":{\"2438\":2,\"2439\":2,\"2440\":2,\"2441\":2,\"2442\":2,\"2443\":3}}],[\"runnable实现的方式中\",{\"1\":{\"1518\":1}}],[\"runnable实现的\",{\"0\":{\"1518\":1}}],[\"runnable实现类的实例\",{\"1\":{\"1494\":1}}],[\"runnable的实现类实例\",{\"1\":{\"1495\":1}}],[\"runnable类型的变量的\",{\"1\":{\"1493\":1}}],[\"runnabletest\",{\"1\":{\"1492\":1,\"1512\":1,\"1520\":1}}],[\"runnable接口的run函数\",{\"0\":{\"2121\":1}}],[\"runnable接口创建多线程的步骤\",{\"0\":{\"1491\":1}}],[\"runnable接口是创建多线程的方式之一\",{\"1\":{\"1490\":1}}],[\"runnable接口\",{\"0\":{\"1490\":1}}],[\"runnable\",{\"1\":{\"1468\":2,\"1492\":1,\"1499\":1,\"1509\":1,\"1512\":1,\"1520\":1,\"1536\":1,\"1547\":1,\"1556\":1,\"1566\":1,\"1569\":1,\"2121\":3}}],[\"running\",{\"1\":{\"242\":2,\"244\":2,\"263\":2}}],[\"runtime\",{\"1\":{\"776\":1,\"1406\":2,\"1409\":1,\"1411\":1,\"1415\":1,\"1425\":1,\"1426\":1,\"1432\":1,\"2572\":1}}],[\"runtimeexception类作为参数\",{\"1\":{\"1338\":1}}],[\"runtimeexception类及它的子类都是运行时异常\",{\"1\":{\"1325\":1}}],[\"runtimeexception\",{\"1\":{\"501\":1,\"508\":1,\"1323\":1,\"1360\":2,\"1361\":1,\"1657\":1,\"1658\":1,\"1688\":1}}],[\"run\",{\"1\":{\"103\":1,\"104\":2,\"153\":1,\"213\":3,\"1472\":2,\"1476\":1,\"1479\":1,\"1480\":1,\"1481\":1,\"1489\":1,\"1491\":1,\"1492\":2,\"1501\":1,\"1509\":1,\"1511\":1,\"1512\":1,\"1517\":1,\"1520\":1,\"1536\":1,\"1547\":2,\"1556\":1,\"1569\":1,\"2121\":3,\"2498\":1,\"2503\":1,\"2505\":1}}],[\"reconfig\",{\"1\":{\"3161\":2,\"3165\":1,\"3175\":1}}],[\"received\",{\"1\":{\"2860\":1}}],[\"receive\",{\"1\":{\"1984\":1,\"1985\":1}}],[\"relation\",{\"1\":{\"2908\":1,\"2926\":1,\"2930\":1,\"2957\":1,\"3015\":1}}],[\"relational\",{\"0\":{\"2346\":1}}],[\"requires\",{\"1\":{\"3204\":1}}],[\"required\",{\"1\":{\"2781\":2}}],[\"required>\",{\"1\":{\"2777\":1}}],[\"requset\",{\"1\":{\"2652\":1}}],[\"requestoptions\",{\"1\":{\"2975\":1,\"2977\":1,\"2978\":1,\"2980\":1,\"2983\":1,\"2984\":1,\"2986\":1,\"2987\":1,\"2991\":1,\"2992\":1,\"2993\":1,\"2997\":1,\"3000\":1,\"3003\":1,\"3006\":1,\"3008\":1,\"3010\":1,\"3015\":1,\"3019\":1}}],[\"requestinitialized\",{\"1\":{\"2716\":1}}],[\"request就销毁\",{\"1\":{\"2674\":1}}],[\"request域对象\",{\"0\":{\"2673\":1}}],[\"request域\",{\"1\":{\"2653\":1}}],[\"requestdestroyed\",{\"1\":{\"2716\":1}}],[\"requestdemo2\",{\"1\":{\"2624\":1}}],[\"requestdemo1\",{\"1\":{\"2614\":1,\"2625\":1}}],[\"requestdispatcher\",{\"1\":{\"2652\":1}}],[\"request参数处理\",{\"0\":{\"2616\":1}}],[\"requests\",{\"1\":{\"2602\":1,\"2920\":1}}],[\"requesturi\",{\"1\":{\"2598\":2}}],[\"requesturl\",{\"1\":{\"2598\":2}}],[\"requestfacade\",{\"0\":{\"2589\":1},\"1\":{\"2589\":1}}],[\"request的继承体系为servletrequest\",{\"1\":{\"2590\":1}}],[\"request的继承体系\",{\"0\":{\"2588\":1}}],[\"request的作用\",{\"0\":{\"2584\":1}}],[\"request和response也存在自己的继承体系\",{\"1\":{\"2587\":1}}],[\"request和response对象是由服务器创建的\",{\"1\":{\"2582\":1}}],[\"request继承体系\",{\"0\":{\"2586\":1}}],[\"request对象在获取请求参数前先修改编码\",{\"1\":{\"2630\":1}}],[\"request对象为我们提供了如下方法\",{\"1\":{\"2621\":1}}],[\"request对象内部提供了更加强大的方法\",{\"1\":{\"2615\":1}}],[\"request对象被销毁后\",{\"1\":{\"2611\":1}}],[\"request对象提供了如下两种方式来获取其中的数据\",{\"1\":{\"2605\":1}}],[\"request对象都提供了对应的api方法来获取\",{\"1\":{\"2596\":1}}],[\"request对象是用来封装请求数据的对象\",{\"1\":{\"2584\":1}}],[\"request对象是来获取请求消息\",{\"1\":{\"2582\":1}}],[\"request对象中封装请求消息数据\",{\"1\":{\"2583\":1}}],[\"request是请求对象\",{\"1\":{\"2582\":1}}],[\"request\",{\"0\":{\"2594\":1,\"2650\":1},\"1\":{\"2531\":1,\"2566\":3,\"2598\":10,\"2601\":3,\"2602\":2,\"2610\":2,\"2623\":1,\"2625\":1,\"2630\":2,\"2632\":1,\"2640\":1,\"2652\":1,\"2655\":6,\"2661\":1,\"2662\":1,\"2668\":1,\"2675\":1,\"2682\":2,\"2694\":1,\"2697\":2,\"2702\":2,\"2703\":1,\"2795\":1,\"2814\":1,\"2820\":1,\"2975\":2,\"2977\":2,\"2978\":2,\"2980\":4,\"2983\":4,\"2984\":3,\"2986\":3,\"2987\":3,\"2991\":3,\"2992\":4,\"2993\":4,\"2994\":1,\"2997\":4,\"3000\":4,\"3002\":1,\"3003\":4,\"3005\":1,\"3006\":4,\"3008\":4,\"3010\":4,\"3014\":1,\"3015\":4,\"3018\":1,\"3019\":4}}],[\"requestbody\",{\"1\":{\"364\":2,\"365\":1,\"371\":2}}],[\"requestmapping\",{\"1\":{\"85\":1,\"242\":1,\"244\":1,\"263\":1,\"364\":1,\"371\":1}}],[\"req2\",{\"1\":{\"2623\":1,\"2624\":1}}],[\"req1\",{\"1\":{\"2614\":1}}],[\"req\",{\"1\":{\"2553\":1,\"2564\":4,\"2566\":5,\"2589\":1,\"2614\":6,\"2624\":7,\"2625\":3,\"2652\":1,\"2686\":1,\"2690\":1,\"2798\":1,\"2799\":2,\"2814\":1}}],[\"rewritebatchedstatements=true\",{\"1\":{\"2375\":1,\"2425\":1}}],[\"reachable\",{\"1\":{\"1948\":2}}],[\"real\",{\"1\":{\"1569\":4}}],[\"readanydatabase\",{\"1\":{\"3189\":1,\"3190\":1}}],[\"readable\",{\"1\":{\"564\":1}}],[\"readwriteanydatabase\",{\"1\":{\"3189\":1,\"3190\":1}}],[\"readwrite\",{\"1\":{\"3187\":1,\"3189\":1,\"3190\":1,\"3197\":1,\"3198\":1}}],[\"readconcernmajorityoptime\",{\"1\":{\"3156\":1}}],[\"readchar\",{\"1\":{\"1876\":1}}],[\"ready\",{\"1\":{\"3049\":1,\"3142\":1}}],[\"readme\",{\"0\":{\"1941\":1,\"2497\":1}}],[\"readobject\",{\"0\":{\"1900\":1},\"1\":{\"1900\":1,\"1904\":1,\"1909\":2}}],[\"readfully\",{\"1\":{\"1876\":1}}],[\"readfloat\",{\"1\":{\"1876\":1}}],[\"readutf\",{\"1\":{\"1876\":1,\"1879\":1}}],[\"readint\",{\"1\":{\"1876\":1,\"1879\":1}}],[\"readlong\",{\"1\":{\"1876\":1}}],[\"readline是一直等待输入的\",{\"1\":{\"1834\":1}}],[\"readline\",{\"0\":{\"581\":1,\"1834\":1},\"1\":{\"581\":2,\"1834\":3,\"1870\":1,\"2610\":1,\"2614\":1}}],[\"readshort\",{\"1\":{\"1876\":1}}],[\"readdouble\",{\"1\":{\"1876\":1}}],[\"readdata\",{\"1\":{\"565\":4}}],[\"readbyte\",{\"1\":{\"1876\":1}}],[\"readboolean\",{\"1\":{\"1876\":1,\"1879\":1}}],[\"read方法\",{\"1\":{\"1822\":1}}],[\"readerres\",{\"1\":{\"565\":2}}],[\"reader\",{\"0\":{\"564\":1,\"1783\":1,\"1785\":1},\"1\":{\"564\":2,\"565\":5,\"566\":5,\"571\":2,\"1777\":1,\"1783\":1,\"1830\":2,\"1846\":1,\"2614\":2}}],[\"read\",{\"0\":{\"565\":1,\"566\":1,\"570\":1,\"1801\":1,\"1850\":1},\"1\":{\"552\":1,\"565\":5,\"566\":7,\"570\":2,\"1335\":2,\"1344\":2,\"1352\":2,\"1801\":1,\"1804\":2,\"1805\":2,\"1817\":1,\"1823\":1,\"1836\":2,\"1853\":1,\"1858\":1,\"1888\":1,\"1977\":1,\"2365\":1,\"2390\":3,\"2391\":1,\"2646\":1,\"3187\":1,\"3189\":1,\"3190\":1}}],[\"reintyranttest\",{\"1\":{\"1536\":1}}],[\"reentrantlock\",{\"1\":{\"1532\":3,\"1533\":1,\"1536\":3}}],[\"reentrantlock类\",{\"0\":{\"1532\":1}}],[\"rentention\",{\"1\":{\"1410\":1}}],[\"renameto\",{\"0\":{\"559\":1},\"1\":{\"559\":2}}],[\"retries\",{\"1\":{\"2920\":1}}],[\"retrival\",{\"1\":{\"2394\":1}}],[\"retentionpolicy\",{\"0\":{\"1406\":1},\"1\":{\"1402\":2,\"1404\":2,\"1406\":4,\"1409\":2,\"1411\":3,\"1415\":1,\"1425\":1,\"1426\":1,\"1427\":1,\"1432\":2,\"2572\":1}}],[\"retention\",{\"0\":{\"1409\":1},\"1\":{\"1390\":1,\"1408\":1,\"1409\":2,\"1415\":1,\"1425\":1,\"1426\":1,\"1427\":1,\"1432\":2,\"2572\":1}}],[\"retainall\",{\"0\":{\"666\":1},\"1\":{\"666\":2}}],[\"return必须省略\",{\"1\":{\"2118\":1}}],[\"return也可以省略\",{\"1\":{\"2118\":1}}],[\"returnval\",{\"1\":{\"2063\":2}}],[\"returnvalue\",{\"1\":{\"2063\":2,\"2095\":2,\"2101\":2}}],[\"return终止了该代码块\",{\"1\":{\"1526\":1}}],[\"return关键字后面不可以声明执行语句\",{\"1\":{\"1030\":1}}],[\"return关键字\",{\"0\":{\"1030\":1},\"1\":{\"2116\":1}}],[\"return关键字来返回指定类型的变量或常量\",{\"1\":{\"1029\":1}}],[\"return直接结束整个方法\",{\"1\":{\"948\":1}}],[\"returntype\",{\"1\":{\"622\":2}}],[\"return\",{\"0\":{\"948\":1},\"1\":{\"85\":1,\"158\":1,\"160\":1,\"168\":1,\"242\":1,\"244\":1,\"263\":1,\"350\":1,\"360\":5,\"364\":6,\"369\":1,\"371\":6,\"498\":4,\"501\":5,\"508\":1,\"509\":3,\"555\":1,\"556\":1,\"557\":1,\"645\":3,\"651\":1,\"684\":1,\"812\":4,\"943\":1,\"1029\":3,\"1030\":1,\"1032\":1,\"1035\":2,\"1056\":1,\"1106\":1,\"1120\":1,\"1180\":7,\"1184\":1,\"1186\":1,\"1210\":3,\"1233\":2,\"1240\":1,\"1241\":1,\"1286\":1,\"1343\":3,\"1368\":1,\"1373\":3,\"1521\":2,\"1562\":1,\"1657\":2,\"1658\":1,\"1688\":1,\"1733\":1,\"2004\":1,\"2005\":1,\"2007\":3,\"2094\":1,\"2095\":1,\"2101\":1,\"2128\":1,\"2129\":2,\"2221\":3,\"2227\":1,\"2327\":1,\"2352\":2,\"2355\":2,\"2405\":8,\"2408\":4,\"2427\":1,\"2442\":2,\"2555\":1,\"2556\":1}}],[\"removeattribute\",{\"1\":{\"2654\":1,\"2678\":1,\"2690\":1,\"2818\":1}}],[\"removeall\",{\"0\":{\"665\":1},\"1\":{\"665\":2}}],[\"remove方法用来在遍历的时候\",{\"1\":{\"678\":1,\"1600\":1}}],[\"remove\",{\"0\":{\"664\":1,\"678\":1,\"702\":1,\"713\":1,\"1600\":1},\"1\":{\"664\":2,\"678\":3,\"702\":5,\"713\":3,\"787\":1,\"1600\":2,\"3086\":2,\"3087\":2}}],[\"remove等操作都是默认抛出异常的\",{\"1\":{\"649\":1}}],[\"reverse\",{\"0\":{\"456\":1,\"682\":1},\"1\":{\"456\":2,\"682\":2}}],[\"repair\",{\"1\":{\"3242\":1}}],[\"rep\",{\"1\":{\"2893\":1}}],[\"reponse的继承体系和request的继承体系也非常相似\",{\"1\":{\"2591\":1}}],[\"repository\",{\"1\":{\"93\":1}}],[\"replset\",{\"1\":{\"3152\":1}}],[\"replsetname\",{\"1\":{\"3142\":1}}],[\"replication\",{\"1\":{\"3142\":1}}],[\"replicate\",{\"1\":{\"3131\":1}}],[\"replica\",{\"1\":{\"3024\":1,\"3125\":1}}],[\"replicaset\",{\"0\":{\"3220\":1}}],[\"replicasetid\",{\"1\":{\"3153\":1}}],[\"replicas\",{\"1\":{\"2890\":1}}],[\"repl工具\",{\"0\":{\"2263\":1}}],[\"replacefirst\",{\"0\":{\"432\":1,\"742\":1},\"1\":{\"432\":2,\"742\":2}}],[\"replaceall\",{\"0\":{\"431\":1,\"690\":1,\"741\":1},\"1\":{\"431\":2,\"690\":2,\"741\":2}}],[\"replacement\",{\"1\":{\"430\":1,\"431\":1,\"432\":1,\"741\":1,\"742\":1}}],[\"replace\",{\"0\":{\"428\":1,\"429\":1,\"430\":1,\"454\":1},\"1\":{\"429\":2,\"430\":2,\"454\":2}}],[\"repeatable\",{\"1\":{\"1390\":1,\"1420\":2,\"2390\":1}}],[\"representable\",{\"1\":{\"534\":1}}],[\"regular\",{\"1\":{\"3033\":1}}],[\"registerdriver\",{\"1\":{\"2299\":1}}],[\"regist\",{\"1\":{\"1361\":2}}],[\"registry\",{\"1\":{\"393\":3}}],[\"regex\",{\"1\":{\"431\":1,\"432\":1,\"433\":1,\"434\":2,\"736\":2,\"738\":1,\"739\":2,\"741\":3,\"742\":3,\"743\":3,\"744\":2,\"748\":4,\"750\":2,\"751\":2,\"752\":5,\"753\":2}}],[\"reggie\",{\"1\":{\"390\":2}}],[\"refresh\",{\"1\":{\"3057\":1}}],[\"reflect包的方法对类进行反射调用\",{\"1\":{\"2029\":1}}],[\"reflectionstudy\",{\"1\":{\"2018\":1,\"2019\":1,\"2020\":2,\"2021\":2,\"2037\":1,\"2042\":2,\"2044\":3,\"2048\":1}}],[\"reflection\",{\"0\":{\"1998\":1},\"1\":{\"1998\":1}}],[\"reflect\",{\"1\":{\"1097\":1,\"1432\":1,\"2002\":3}}],[\"references\",{\"1\":{\"2148\":1}}],[\"reference类型\",{\"1\":{\"1298\":1}}],[\"reference\",{\"1\":{\"827\":1}}],[\"ref=\",{\"1\":{\"262\":9}}],[\"ref\",{\"1\":{\"262\":9}}],[\"redirect与forward的区别\",{\"0\":{\"2665\":1}}],[\"redirect\",{\"1\":{\"2657\":1,\"2665\":1}}],[\"redis主要把数据存储在内存中\",{\"1\":{\"3036\":1}}],[\"redis客户端选择\",{\"0\":{\"290\":1}}],[\"redis内部不支持java对象的储存格式\",{\"1\":{\"288\":1}}],[\"redistest\",{\"1\":{\"288\":1}}],[\"redistemplate\",{\"0\":{\"288\":1},\"1\":{\"288\":4}}],[\"redis基础配置\",{\"0\":{\"287\":1}}],[\"redis<\",{\"1\":{\"286\":1,\"326\":1,\"336\":1}}],[\"redis\",{\"0\":{\"64\":1,\"285\":1,\"326\":1,\"3035\":1},\"1\":{\"10\":1,\"29\":1,\"287\":1,\"292\":1,\"293\":1,\"336\":1,\"398\":1,\"3037\":1}}],[\"redeploy\",{\"1\":{\"2502\":1}}],[\"reduce模式\",{\"0\":{\"2241\":1}}],[\"reduce\",{\"0\":{\"2239\":1,\"2240\":1},\"1\":{\"2239\":4,\"2240\":4,\"2241\":5}}],[\"red\",{\"1\":{\"253\":1,\"2893\":1,\"2959\":1,\"3018\":1,\"3019\":2}}],[\"resp\",{\"1\":{\"2564\":4,\"2589\":1,\"2614\":3,\"2624\":3,\"2625\":3,\"2652\":1,\"2682\":1,\"2686\":1,\"2690\":1,\"2798\":1,\"2799\":1,\"2814\":1}}],[\"responsedemo2两个类都被访问到了\",{\"1\":{\"2663\":1}}],[\"responsedemo2\",{\"0\":{\"2662\":1},\"1\":{\"2662\":2,\"2663\":1}}],[\"responsedemo1类将请求转发给responsedemo2\",{\"1\":{\"2660\":1}}],[\"responsedemo1\",{\"0\":{\"2661\":1},\"1\":{\"2640\":1,\"2661\":2,\"2663\":2}}],[\"response重定向\",{\"1\":{\"2657\":1}}],[\"response响应字符数据\",{\"1\":{\"2638\":1}}],[\"response对象就会被销毁掉\",{\"1\":{\"2643\":1}}],[\"response对象提供了不同的方法还出了这三种响应内容\",{\"1\":{\"2634\":1}}],[\"response对象是用来做http响应的\",{\"1\":{\"2634\":1}}],[\"response对象是用来封装响应数据的对象\",{\"1\":{\"2585\":1}}],[\"response对象是来设置响应消息\",{\"1\":{\"2582\":1}}],[\"responsefacade\",{\"0\":{\"2593\":1}}],[\"response继承体系\",{\"0\":{\"2591\":1}}],[\"response的作用\",{\"0\":{\"2585\":1}}],[\"response是响应对象\",{\"1\":{\"2582\":1}}],[\"response\",{\"0\":{\"2633\":1,\"2634\":1,\"2657\":1},\"1\":{\"2531\":1,\"2566\":1,\"2598\":2,\"2601\":1,\"2602\":1,\"2610\":1,\"2639\":1,\"2640\":2,\"2641\":2,\"2642\":2,\"2645\":1,\"2646\":1,\"2647\":1,\"2648\":2,\"2652\":1,\"2655\":3,\"2659\":3,\"2661\":3,\"2662\":1,\"2668\":1,\"2694\":1,\"2697\":2,\"2794\":1,\"2798\":1,\"2804\":2,\"2805\":1,\"2806\":1,\"2822\":1,\"2975\":2,\"2977\":1,\"2978\":2,\"2980\":2,\"2983\":2,\"2984\":2,\"2986\":2,\"2987\":2,\"2991\":2,\"2992\":2,\"2993\":2,\"2997\":2,\"3000\":2,\"3003\":2,\"3006\":2,\"3008\":2,\"3010\":2,\"3015\":2,\"3019\":2}}],[\"res4\",{\"1\":{\"664\":2}}],[\"res3\",{\"1\":{\"663\":2}}],[\"resultsethandler<customer>\",{\"1\":{\"2442\":2}}],[\"resultsethandler<t>\",{\"1\":{\"2435\":2}}],[\"resultsethandler接口及实现类\",{\"0\":{\"2436\":1}}],[\"resultsethandler\",{\"1\":{\"2433\":1,\"2435\":1,\"2436\":1}}],[\"resultsetmetadata\",{\"1\":{\"2352\":2,\"2355\":2,\"2405\":4}}],[\"resultsetmetadate\",{\"1\":{\"2344\":1}}],[\"resultsetmetadate对象的常用方法\",{\"0\":{\"2345\":1}}],[\"resultsetmetadate对象\",{\"0\":{\"2344\":1}}],[\"resultset接口的方法\",{\"0\":{\"2341\":1}}],[\"resultset介绍\",{\"0\":{\"2339\":1}}],[\"resultset对象\",{\"0\":{\"2337\":1}}],[\"resultset\",{\"1\":{\"2323\":1,\"2338\":1,\"2339\":2,\"2340\":2,\"2342\":1,\"2343\":1,\"2344\":2,\"2345\":1,\"2349\":9,\"2352\":1,\"2355\":1,\"2365\":1,\"2404\":1,\"2405\":3,\"2435\":2,\"2436\":2,\"2442\":1}}],[\"result5\",{\"1\":{\"665\":1}}],[\"result3\",{\"1\":{\"562\":2}}],[\"result2\",{\"1\":{\"562\":2,\"2129\":2}}],[\"result\",{\"1\":{\"534\":1,\"562\":2,\"661\":2,\"891\":4,\"2129\":2,\"2435\":1,\"2901\":1,\"2910\":1,\"2912\":1,\"2915\":1}}],[\"res\",{\"1\":{\"502\":2,\"513\":2,\"525\":2,\"534\":2,\"537\":2,\"549\":2,\"550\":2,\"551\":2,\"552\":2,\"553\":2,\"555\":2,\"556\":2,\"557\":2,\"559\":2,\"648\":2,\"666\":2,\"676\":2,\"698\":2,\"700\":2,\"701\":2,\"720\":2,\"741\":2,\"742\":2,\"743\":2,\"750\":2,\"752\":2,\"753\":2,\"1977\":2,\"2553\":1,\"2566\":4}}],[\"resolve\",{\"1\":{\"1918\":1}}],[\"resolved\",{\"1\":{\"485\":1,\"486\":1}}],[\"resourcehandlerregistry\",{\"1\":{\"393\":1}}],[\"resource\",{\"1\":{\"216\":1,\"1988\":1,\"1995\":3,\"2495\":1,\"2502\":4,\"3184\":2}}],[\"resources目录下的static目录中\",{\"1\":{\"372\":1}}],[\"resources\",{\"1\":{\"149\":2,\"216\":1,\"261\":1,\"310\":1,\"313\":1}}],[\"res2\",{\"1\":{\"404\":2,\"716\":2,\"717\":2,\"719\":2}}],[\"res1\",{\"1\":{\"404\":2,\"535\":2,\"662\":2,\"716\":2,\"717\":2,\"719\":2}}],[\"restore\",{\"1\":{\"3189\":1,\"3190\":1}}],[\"resthighlevelclient\",{\"1\":{\"2972\":2,\"2975\":2,\"2977\":2,\"2978\":2,\"2980\":2,\"2983\":2,\"2984\":2,\"2986\":2,\"2987\":2,\"2991\":2,\"2992\":2,\"2993\":2,\"2997\":2,\"3000\":2,\"3003\":2,\"3006\":2,\"3008\":2,\"3010\":2,\"3015\":2,\"3019\":2}}],[\"restclient\",{\"1\":{\"2972\":1,\"2975\":1,\"2977\":1,\"2978\":1,\"2980\":1,\"2983\":1,\"2984\":1,\"2986\":1,\"2987\":1,\"2991\":1,\"2992\":1,\"2993\":1,\"2997\":1,\"3000\":1,\"3003\":1,\"3006\":1,\"3008\":1,\"3010\":1,\"3015\":1,\"3019\":1}}],[\"restclientbuilder\",{\"1\":{\"2972\":1,\"2975\":1,\"2977\":1,\"2978\":1,\"2980\":1,\"2983\":1,\"2984\":1,\"2986\":1,\"2987\":1,\"2991\":1,\"2992\":1,\"2993\":1,\"2997\":1,\"3000\":1,\"3003\":1,\"3006\":1,\"3008\":1,\"3010\":1,\"3015\":1,\"3019\":1}}],[\"restcontrolleradvice\",{\"1\":{\"369\":1}}],[\"restcontroller\",{\"1\":{\"85\":1,\"242\":1,\"244\":1,\"263\":1,\"371\":1}}],[\"rest\",{\"1\":{\"2971\":1}}],[\"restful\",{\"1\":{\"2858\":1,\"2861\":1}}],[\"restful+postman+数据格式\",{\"1\":{\"57\":1}}],[\"restriction>\",{\"1\":{\"2781\":3}}],[\"restriction\",{\"1\":{\"2781\":3}}],[\"restart\",{\"0\":{\"138\":1},\"1\":{\"150\":1,\"152\":1,\"153\":1,\"2502\":1}}],[\"restart类加载器执行\",{\"1\":{\"138\":1}}],[\"restart类加载器\",{\"1\":{\"137\":1}}],[\"e676dd308382\",{\"1\":{\"3198\":1}}],[\"ea87\",{\"1\":{\"3198\":1}}],[\"eat\",{\"1\":{\"1010\":1,\"1011\":1,\"1249\":4,\"1278\":1,\"2096\":1}}],[\"ef\",{\"1\":{\"3049\":1,\"3145\":1}}],[\"e3\",{\"1\":{\"2806\":1}}],[\"e3>\",{\"1\":{\"1715\":1}}],[\"edit\",{\"1\":{\"2498\":2}}],[\"edu\",{\"1\":{\"262\":1}}],[\"em>\",{\"1\":{\"2959\":1}}],[\"email\",{\"1\":{\"2319\":1,\"2325\":1,\"2349\":3,\"2351\":4,\"2353\":2,\"2356\":1,\"2364\":1,\"2365\":4,\"2408\":4,\"2438\":1,\"2440\":1,\"2441\":1,\"2442\":4}}],[\"emp2\",{\"1\":{\"2174\":2}}],[\"emp1\",{\"1\":{\"2173\":2}}],[\"emp\",{\"1\":{\"2157\":1,\"2158\":1}}],[\"empty\",{\"0\":{\"2253\":1},\"1\":{\"1432\":3,\"2253\":2,\"2254\":1,\"2744\":1}}],[\"employees\",{\"1\":{\"2237\":1}}],[\"employeedata\",{\"1\":{\"2210\":1,\"2211\":1,\"2212\":1,\"2213\":1,\"2229\":1,\"2230\":1,\"2232\":1,\"2233\":1}}],[\"employee类的对象\",{\"1\":{\"2209\":1,\"2214\":1}}],[\"employee类中的方法\",{\"1\":{\"2159\":1}}],[\"employee>\",{\"1\":{\"2176\":1,\"2177\":1,\"2179\":1,\"2180\":1}}],[\"employee\",{\"0\":{\"375\":1},\"1\":{\"374\":1,\"2157\":2,\"2166\":3,\"2168\":1,\"2173\":1,\"2174\":1,\"2176\":1,\"2177\":1,\"2179\":1,\"2180\":1,\"2232\":1,\"2233\":1,\"2236\":1,\"2241\":1}}],[\"e1\",{\"1\":{\"2236\":2,\"2387\":2}}],[\"eof\",{\"1\":{\"1966\":1}}],[\"e2\",{\"1\":{\"1715\":1,\"2236\":2}}],[\"evaluate\",{\"1\":{\"1252\":2}}],[\"event\",{\"1\":{\"2720\":2}}],[\"even\",{\"1\":{\"536\":1}}],[\"ee\",{\"1\":{\"763\":1,\"1262\":1}}],[\"eq表示计数准确\",{\"1\":{\"2930\":1}}],[\"eq\",{\"1\":{\"749\":1,\"2908\":1,\"2926\":1,\"2930\":1,\"2957\":1,\"3015\":1}}],[\"equals为true\",{\"1\":{\"1647\":1}}],[\"equals返回false\",{\"1\":{\"1641\":1}}],[\"equals是一个方法\",{\"1\":{\"1179\":1}}],[\"equals的具体使用要看自定义类里有没有\",{\"1\":{\"1181\":1}}],[\"equals的用法\",{\"0\":{\"1179\":1}}],[\"equals的不区分大小写版本\",{\"1\":{\"405\":1}}],[\"equals与\",{\"0\":{\"1177\":1}}],[\"equalsignorecase\",{\"0\":{\"405\":1},\"1\":{\"405\":2,\"1870\":2}}],[\"equals\",{\"0\":{\"404\":1,\"648\":1,\"667\":1,\"720\":1,\"1648\":1},\"1\":{\"344\":1,\"371\":2,\"404\":3,\"405\":1,\"648\":2,\"667\":2,\"720\":2,\"885\":1,\"1176\":1,\"1179\":1,\"1180\":12,\"1181\":1,\"1182\":1,\"1404\":1,\"1600\":1,\"1637\":1,\"1649\":1,\"1664\":4,\"2211\":1,\"2566\":2,\"2614\":2,\"2799\":1}}],[\"e>\",{\"1\":{\"658\":1}}],[\"epochmilli\",{\"1\":{\"479\":1}}],[\"e\",{\"1\":{\"407\":1,\"425\":2,\"426\":4,\"555\":2,\"579\":4,\"657\":2,\"677\":1,\"697\":1,\"698\":3,\"699\":1,\"702\":1,\"703\":2,\"704\":2,\"1155\":4,\"1156\":2,\"1339\":5,\"1343\":2,\"1344\":6,\"1352\":2,\"1361\":2,\"1481\":4,\"1547\":4,\"1556\":2,\"1562\":4,\"1626\":2,\"1710\":3,\"1714\":1,\"1719\":3,\"1720\":3,\"1721\":3,\"1733\":4,\"1734\":1,\"1804\":4,\"1805\":4,\"1816\":4,\"1817\":6,\"1823\":6,\"1834\":4,\"1836\":6,\"1870\":6,\"1873\":2,\"1983\":2,\"1984\":2,\"2167\":1,\"2196\":1,\"2197\":1,\"2210\":2,\"2229\":2,\"2230\":2,\"2231\":2,\"2235\":2,\"2243\":4,\"2325\":6,\"2328\":4,\"2329\":2,\"2333\":2,\"2349\":2,\"2352\":2,\"2355\":2,\"2386\":2,\"2387\":4,\"2405\":10,\"2409\":14,\"2427\":2,\"2428\":2,\"3078\":2}}],[\"elaticsearch\",{\"1\":{\"2843\":1}}],[\"elastic\",{\"0\":{\"2842\":1,\"2843\":1},\"1\":{\"2842\":1,\"2843\":1,\"2845\":3}}],[\"elasticsearch<\",{\"1\":{\"2971\":1}}],[\"elasticsearch采用的是倒排索引\",{\"1\":{\"2866\":1}}],[\"elasticsearch在windows下开启了安全认证\",{\"1\":{\"2860\":1}}],[\"elasticsearch是基于java开发的\",{\"1\":{\"2856\":1}}],[\"elasticsearch是目前全文搜索引擎的首选\",{\"1\":{\"2841\":1}}],[\"elasticsearch官网\",{\"1\":{\"2854\":1}}],[\"elasticsearch\",{\"0\":{\"56\":1,\"2864\":1},\"1\":{\"2842\":1,\"2844\":1,\"2846\":4,\"2855\":1,\"2857\":1,\"2858\":2,\"2863\":1,\"2864\":1,\"2963\":1,\"2967\":1,\"2968\":2,\"2971\":1,\"2976\":3}}],[\"elk\",{\"1\":{\"2842\":1}}],[\"electiondate\",{\"1\":{\"3156\":1}}],[\"electiontime\",{\"1\":{\"3156\":1}}],[\"electiontimeout\",{\"1\":{\"3156\":1}}],[\"electiontimeoutmillis\",{\"1\":{\"3153\":1,\"3156\":1}}],[\"electionterm\",{\"1\":{\"3156\":1}}],[\"electioncandidatemetrics\",{\"1\":{\"3156\":1}}],[\"eles\",{\"1\":{\"698\":3}}],[\"elementformdefault=\",{\"1\":{\"2781\":1}}],[\"elementdata初始化为\",{\"1\":{\"1621\":1}}],[\"elementdata\",{\"1\":{\"1618\":1}}],[\"elementdata存储\",{\"1\":{\"1612\":1,\"1614\":1}}],[\"elementtype\",{\"0\":{\"1405\":1},\"1\":{\"1402\":3,\"1404\":2,\"1405\":4,\"1412\":1,\"1413\":6,\"1426\":1,\"1432\":1,\"2572\":1}}],[\"element对象\",{\"1\":{\"1005\":1}}],[\"elements里双击需要添加到jar包的文件\",{\"1\":{\"2744\":1}}],[\"elements\",{\"1\":{\"811\":1}}],[\"element\",{\"1\":{\"697\":1,\"703\":1,\"1626\":2,\"2777\":5,\"2781\":6}}],[\"elementui\",{\"1\":{\"398\":1}}],[\"ele\",{\"1\":{\"697\":3}}],[\"else分支会导致程序的代码加长\",{\"1\":{\"1316\":1}}],[\"else时\",{\"1\":{\"929\":1}}],[\"else和switch\",{\"0\":{\"929\":1}}],[\"else是可以进行嵌套的\",{\"1\":{\"923\":1}}],[\"else结构中的else\",{\"1\":{\"927\":1}}],[\"else结构中的执行语句只有一行时\",{\"1\":{\"923\":1}}],[\"else结构\",{\"1\":{\"915\":1}}],[\"else\",{\"0\":{\"915\":1,\"918\":1},\"1\":{\"501\":2,\"509\":2,\"555\":1,\"556\":2,\"557\":2,\"645\":2,\"698\":1,\"915\":1,\"917\":1,\"921\":1,\"922\":3,\"929\":1,\"938\":2,\"1035\":1,\"1056\":1,\"1180\":1,\"1359\":1,\"1361\":1,\"1492\":1,\"1509\":1,\"1512\":1,\"1520\":1,\"1536\":1,\"1556\":1,\"1657\":2,\"1658\":1,\"2566\":1,\"2614\":1}}],[\"el\",{\"1\":{\"408\":2,\"409\":2}}],[\"elo\",{\"1\":{\"408\":1,\"409\":1}}],[\"erlang\",{\"1\":{\"1999\":1}}],[\"erver\",{\"1\":{\"341\":1}}],[\"errortest\",{\"1\":{\"1312\":1}}],[\"error和exception\",{\"1\":{\"1311\":1}}],[\"error\",{\"0\":{\"1312\":1},\"1\":{\"242\":2,\"244\":2,\"246\":1,\"262\":10,\"263\":2,\"812\":1,\"1323\":1,\"2702\":1,\"2957\":1,\"3204\":1,\"3243\":2}}],[\"eclipse\",{\"1\":{\"302\":1}}],[\"extensible\",{\"1\":{\"2767\":1}}],[\"extension>\",{\"1\":{\"2685\":1}}],[\"extends\",{\"0\":{\"1111\":1,\"1751\":1},\"1\":{\"283\":1,\"346\":1,\"360\":1,\"361\":2,\"393\":1,\"440\":2,\"529\":1,\"530\":1,\"572\":1,\"587\":1,\"612\":1,\"619\":1,\"628\":1,\"654\":1,\"658\":1,\"684\":1,\"686\":3,\"687\":3,\"689\":1,\"694\":1,\"712\":2,\"1112\":2,\"1113\":1,\"1120\":1,\"1128\":1,\"1133\":1,\"1134\":1,\"1136\":1,\"1160\":1,\"1252\":1,\"1261\":1,\"1262\":1,\"1364\":1,\"1404\":1,\"1472\":1,\"1480\":1,\"1481\":1,\"1489\":1,\"1499\":1,\"1723\":2,\"1724\":1,\"1725\":1,\"1726\":1,\"1751\":1,\"1753\":2,\"1828\":1,\"1829\":1,\"1830\":1,\"1831\":1,\"1846\":1,\"2019\":1,\"2200\":1,\"2219\":2,\"2408\":1,\"2564\":1,\"2566\":1,\"2598\":1,\"2614\":1,\"2624\":1,\"2625\":1,\"2640\":1,\"2655\":2,\"2661\":1,\"2662\":1}}],[\"exe命令对某个字节码文件进行解释运行\",{\"1\":{\"2013\":1}}],[\"exe命令以后\",{\"1\":{\"2013\":1}}],[\"exe\",{\"1\":{\"1441\":1}}],[\"executorservice\",{\"1\":{\"1569\":1}}],[\"executors\",{\"0\":{\"1567\":1},\"1\":{\"1567\":4,\"1569\":1}}],[\"executeupdate\",{\"1\":{\"2372\":1,\"2373\":1,\"2405\":1}}],[\"executebatch\",{\"0\":{\"2369\":1},\"1\":{\"2376\":1,\"2377\":1}}],[\"execute是可以执行多条预编译sql语句的\",{\"1\":{\"2323\":1}}],[\"executequery\",{\"1\":{\"2318\":1,\"2338\":2,\"2349\":1,\"2352\":1,\"2355\":1,\"2365\":1,\"2405\":3}}],[\"execute\",{\"0\":{\"2323\":1},\"1\":{\"1566\":1,\"1569\":1,\"2318\":1,\"2323\":1,\"2325\":1,\"2329\":1,\"2333\":1,\"2364\":1,\"2386\":1}}],[\"execute权限\",{\"1\":{\"552\":1}}],[\"executable\",{\"1\":{\"619\":1,\"628\":1}}],[\"executionexception\",{\"1\":{\"1562\":1}}],[\"execution\",{\"1\":{\"298\":1,\"301\":1}}],[\"examples\",{\"1\":{\"811\":1}}],[\"exact\",{\"1\":{\"534\":1}}],[\"exited\",{\"1\":{\"3243\":1}}],[\"exiting\",{\"1\":{\"3049\":1,\"3142\":1}}],[\"exit\",{\"0\":{\"634\":1},\"1\":{\"634\":1,\"1870\":2}}],[\"exists\",{\"0\":{\"551\":1},\"1\":{\"551\":2,\"555\":1,\"556\":1,\"557\":1,\"1920\":1}}],[\"explain\",{\"1\":{\"3118\":1,\"3120\":1}}],[\"exploded中的一个\",{\"1\":{\"2518\":1}}],[\"exploded\",{\"1\":{\"2475\":1,\"2499\":1,\"2500\":1,\"2517\":1}}],[\"expression\",{\"1\":{\"3033\":1}}],[\"expected=class\",{\"1\":{\"620\":1}}],[\"expansion\",{\"1\":{\"534\":1}}],[\"exp\",{\"1\":{\"521\":5}}],[\"ex\",{\"1\":{\"369\":2}}],[\"excel\",{\"1\":{\"1797\":1}}],[\"exceptionsorter\",{\"1\":{\"2426\":1}}],[\"exceptiontypes\",{\"1\":{\"2048\":6}}],[\"exceptiontest2\",{\"1\":{\"1352\":1}}],[\"exceptiontest\",{\"1\":{\"1339\":1}}],[\"exception会报编译时错误\",{\"1\":{\"1361\":1}}],[\"exception\",{\"0\":{\"1313\":1},\"1\":{\"369\":2,\"625\":2,\"812\":3,\"1319\":2,\"1323\":2,\"1339\":1,\"1360\":2,\"1361\":3,\"1364\":1,\"1432\":1,\"1562\":1,\"1816\":1,\"1858\":1,\"1983\":1,\"1984\":1,\"2004\":1,\"2005\":1,\"2009\":1,\"2010\":1,\"2299\":1,\"2300\":1,\"2303\":1,\"2325\":1,\"2327\":1,\"2329\":1,\"2333\":1,\"2349\":1,\"2352\":1,\"2355\":1,\"2364\":1,\"2376\":1,\"2386\":1,\"2387\":1,\"2391\":1,\"2405\":3,\"2409\":7,\"2424\":1,\"2427\":1,\"2428\":1,\"2438\":1,\"2439\":1,\"2440\":1,\"2441\":1,\"2442\":1,\"2443\":1,\"2741\":1,\"2976\":2}}],[\"exceptionhandler\",{\"1\":{\"369\":1}}],[\"excutorservice\",{\"0\":{\"1566\":1}}],[\"excludes\",{\"1\":{\"2999\":3,\"3000\":2}}],[\"exclude\",{\"1\":{\"150\":1}}],[\"exclusions>\",{\"1\":{\"110\":1}}],[\"exclusion>\",{\"1\":{\"110\":1}}],[\"ebank\",{\"1\":{\"221\":1,\"249\":2}}],[\"enrollment\",{\"1\":{\"2860\":1}}],[\"enumeration\",{\"1\":{\"2781\":3}}],[\"enumeration<string>\",{\"1\":{\"2602\":2,\"2621\":1}}],[\"enum和class一样可以实现接口\",{\"1\":{\"1382\":1}}],[\"enum使用示例\",{\"0\":{\"1381\":1}}],[\"enum使用说明\",{\"0\":{\"1377\":1}}],[\"enum是所有枚举类的父类\",{\"1\":{\"1379\":1}}],[\"enum的主要方法\",{\"0\":{\"1379\":1}}],[\"enum类\",{\"1\":{\"1377\":1}}],[\"enum关键字是替代class使用的\",{\"1\":{\"1376\":1}}],[\"enum关键字\",{\"0\":{\"1376\":1}}],[\"enum\",{\"0\":{\"1375\":1},\"1\":{\"1295\":1,\"1370\":1,\"1382\":1,\"1405\":2,\"1406\":2,\"2016\":1}}],[\"english\",{\"1\":{\"1011\":1}}],[\"engine=innodb\",{\"1\":{\"375\":1,\"376\":1,\"377\":1,\"378\":1,\"379\":1,\"380\":1,\"381\":1,\"382\":1,\"383\":1,\"384\":1,\"385\":1}}],[\"encapsulation\",{\"1\":{\"1003\":1}}],[\"encode\",{\"1\":{\"2806\":1}}],[\"encoder>\",{\"1\":{\"262\":4}}],[\"encoding\",{\"1\":{\"813\":1,\"1851\":2,\"2602\":1,\"2772\":1}}],[\"encoding=utf\",{\"1\":{\"2627\":1}}],[\"encoding=\",{\"1\":{\"262\":1,\"2771\":1,\"2772\":1,\"2779\":1}}],[\"end\",{\"1\":{\"453\":2,\"454\":2,\"956\":2,\"1251\":2,\"1838\":2,\"2373\":2,\"2376\":2}}],[\"endindex\",{\"1\":{\"421\":2}}],[\"endswith\",{\"0\":{\"413\":1},\"1\":{\"413\":2,\"1918\":1}}],[\"entries\",{\"1\":{\"723\":3}}],[\"entry<string\",{\"1\":{\"723\":1,\"1710\":3}}],[\"entry<k\",{\"1\":{\"723\":1}}],[\"entry是map接口的内部接口\",{\"1\":{\"723\":1}}],[\"entryset方法得到的是一个嵌套的泛型\",{\"1\":{\"1710\":1}}],[\"entryset集合中的元素都是entry\",{\"1\":{\"723\":1}}],[\"entryset\",{\"0\":{\"723\":1},\"1\":{\"723\":2,\"1680\":1,\"1687\":3,\"1710\":1}}],[\"entry==\",{\"1\":{\"710\":1}}],[\"entry\",{\"1\":{\"710\":1,\"723\":6,\"1670\":1,\"1687\":5,\"1710\":2}}],[\"entity\",{\"1\":{\"313\":1,\"343\":1}}],[\"enterprise\",{\"1\":{\"128\":1,\"2483\":1}}],[\"enablesharding\",{\"1\":{\"3187\":1}}],[\"enable\",{\"1\":{\"2860\":1}}],[\"enableconfigurationproperties\",{\"0\":{\"162\":1},\"1\":{\"163\":1}}],[\"enabled\",{\"1\":{\"152\":1,\"153\":1,\"2860\":3,\"3048\":1,\"3142\":1,\"3203\":1,\"3214\":1}}],[\"environment\",{\"1\":{\"776\":1}}],[\"enviroment\",{\"1\":{\"128\":1}}],[\"env\",{\"1\":{\"128\":4}}],[\"eureka\",{\"1\":{\"11\":1}}],[\"estest11\",{\"1\":{\"3019\":1}}],[\"estest10\",{\"1\":{\"3015\":1}}],[\"estest5\",{\"1\":{\"3008\":1,\"3010\":1}}],[\"estest9\",{\"1\":{\"3006\":1}}],[\"estest8\",{\"1\":{\"3003\":1}}],[\"estest6\",{\"1\":{\"3000\":1}}],[\"estest7\",{\"1\":{\"2997\":1}}],[\"estest4\",{\"1\":{\"2993\":1}}],[\"estest3\",{\"1\":{\"2980\":1,\"2983\":1,\"2984\":1,\"2986\":1,\"2987\":1,\"2991\":1,\"2992\":1}}],[\"estesttwo\",{\"1\":{\"2977\":1,\"2978\":1}}],[\"estestone\",{\"1\":{\"2972\":1,\"2975\":1}}],[\"esclient\",{\"1\":{\"2972\":2,\"2975\":3,\"2977\":3,\"2978\":3,\"2980\":3,\"2983\":3,\"2984\":3,\"2986\":3,\"2987\":3,\"2991\":3,\"2992\":3,\"2993\":3,\"2997\":3,\"3000\":3,\"3003\":3,\"3006\":3,\"3008\":3,\"3010\":3,\"3015\":3,\"3019\":3}}],[\"es有关的依赖如下\",{\"1\":{\"2971\":1}}],[\"es会将数据文字进行分词拆解操作\",{\"1\":{\"2941\":1}}],[\"es数据库地址\",{\"1\":{\"2899\":1,\"2902\":1,\"2905\":1,\"2908\":1,\"2910\":1,\"2911\":1,\"2913\":1,\"2918\":1,\"2923\":1,\"2926\":1,\"2928\":1,\"2954\":1,\"2963\":1}}],[\"es中没有表的概念\",{\"1\":{\"2897\":1}}],[\"es服务器地址\",{\"1\":{\"2883\":1,\"2888\":1,\"2892\":1,\"2895\":1}}],[\"es是基于索引\",{\"1\":{\"2881\":1}}],[\"es就采用了这种方案\",{\"1\":{\"2874\":1}}],[\"es安装\",{\"0\":{\"2854\":1}}],[\"es6中的\",{\"1\":{\"2109\":1}}],[\"es8\",{\"1\":{\"57\":1}}],[\"es面试题\",{\"1\":{\"57\":1}}],[\"es优化\",{\"1\":{\"57\":1}}],[\"es集成\",{\"1\":{\"57\":1}}],[\"es进阶\",{\"1\":{\"57\":1}}],[\"es环境\",{\"1\":{\"57\":1}}],[\"es基本操作\",{\"1\":{\"57\":1}}],[\"es介绍\",{\"0\":{\"2840\":1},\"1\":{\"57\":1}}],[\"es入门\",{\"1\":{\"57\":1}}],[\"es\",{\"0\":{\"2841\":1,\"2970\":1,\"2973\":1},\"1\":{\"10\":1,\"29\":1,\"2843\":2,\"2857\":1,\"2865\":1,\"2887\":1,\"2900\":1,\"2902\":1,\"2906\":1,\"2914\":1,\"2924\":1,\"2949\":1,\"2952\":1,\"2953\":1,\"2955\":1,\"2971\":2,\"2972\":1,\"2975\":1,\"2977\":1,\"2978\":1,\"2980\":1,\"2983\":1,\"2984\":1,\"2986\":1,\"2987\":1,\"2991\":1,\"2992\":1,\"2993\":1,\"2997\":1,\"3000\":1,\"3003\":1,\"3006\":1,\"3008\":1,\"3010\":1,\"3013\":1,\"3015\":1,\"3019\":1}}],[\"如查询耗费的时间\",{\"1\":{\"3118\":1}}],[\"如date和bindata类型\",{\"1\":{\"3033\":1}}],[\"如无模式\",{\"1\":{\"3024\":1}}],[\"如test\",{\"1\":{\"2743\":1}}],[\"如复选框\",{\"1\":{\"2621\":1}}],[\"如版本\",{\"1\":{\"2555\":1}}],[\"如图\",{\"1\":{\"2487\":1,\"2509\":1,\"2786\":1}}],[\"如learn\",{\"1\":{\"2482\":1}}],[\"如连接过多\",{\"1\":{\"2414\":1}}],[\"如servlet\",{\"1\":{\"2413\":1}}],[\"如string\",{\"1\":{\"1090\":1}}],[\"如string类型的数组\",{\"1\":{\"962\":1}}],[\"如customerdao\",{\"1\":{\"2396\":1}}],[\"如hibernate\",{\"1\":{\"2278\":1}}],[\"如收集到\",{\"1\":{\"2242\":1}}],[\"如同发快递包裹一样\",{\"1\":{\"1981\":1}}],[\"如192\",{\"1\":{\"1933\":1}}],[\"如读\",{\"1\":{\"1773\":1}}],[\"如读取配置\",{\"1\":{\"1239\":1}}],[\"如不是\",{\"1\":{\"1379\":1}}],[\"如nullpointerexception\",{\"1\":{\"1338\":1}}],[\"如进行x\",{\"1\":{\"1316\":1}}],[\"如何调用的\",{\"1\":{\"2565\":1}}],[\"如何使用函数式接口\",{\"0\":{\"2136\":1}}],[\"如何实现如此复杂的网络协议呢\",{\"1\":{\"1952\":1}}],[\"如何实现网络通信\",{\"0\":{\"1926\":1}}],[\"如何\",{\"1\":{\"1924\":1}}],[\"如何管理等是确定的\",{\"1\":{\"1699\":1}}],[\"如何判断是否要声明static\",{\"0\":{\"1237\":1}}],[\"如何才能调用子类特有的属性和方法\",{\"1\":{\"1162\":1}}],[\"如包含哪些属性\",{\"1\":{\"1186\":1}}],[\"如定义系统特性\",{\"1\":{\"1090\":1}}],[\"如int\",{\"1\":{\"1022\":1}}],[\"如抽象\",{\"1\":{\"1002\":1}}],[\"如a\",{\"1\":{\"972\":1}}],[\"如gbk转utf\",{\"1\":{\"855\":1}}],[\"如想实现排序\",{\"1\":{\"494\":1}}],[\"如异常信息\",{\"1\":{\"370\":1}}],[\"如上采用的blog账号\",{\"1\":{\"3206\":1}}],[\"如上方的代码\",{\"1\":{\"2564\":1}}],[\"如上图中的6个请求来自3个浏览器\",{\"1\":{\"2787\":1}}],[\"如上图上半部分是\",{\"1\":{\"2763\":1}}],[\"如上图\",{\"1\":{\"2516\":1}}],[\"如上\",{\"1\":{\"234\":1,\"560\":1,\"1018\":1,\"1055\":1,\"1058\":1,\"1420\":1,\"1494\":1,\"1514\":2,\"2199\":1,\"2224\":1,\"2357\":1,\"2902\":1,\"3187\":1,\"3225\":1}}],[\"如果采用了kill而非标准方式关闭了mongodb服务\",{\"1\":{\"3242\":1}}],[\"如果采用了上述的方式2\",{\"1\":{\"2487\":1}}],[\"如果连接的对方是副本集\",{\"1\":{\"3219\":1}}],[\"如果连接过程失败\",{\"1\":{\"1993\":1}}],[\"如果副本集具有偶数个成员\",{\"1\":{\"3132\":1}}],[\"如果复合索引由\",{\"1\":{\"3106\":1}}],[\"如果找不到匹配项\",{\"1\":{\"3081\":1}}],[\"如果某条数据插入失败\",{\"1\":{\"3077\":1}}],[\"如果某字段没值\",{\"1\":{\"3074\":1}}],[\"如果某个类使用了被\",{\"1\":{\"1416\":1}}],[\"如果成功删除选定集合\",{\"1\":{\"3068\":1}}],[\"如果成功就返回true\",{\"1\":{\"2434\":1}}],[\"如果集合不存在\",{\"1\":{\"3067\":1}}],[\"如果导错包\",{\"1\":{\"2976\":1}}],[\"如果为假\",{\"1\":{\"3072\":1}}],[\"如果为true\",{\"1\":{\"3072\":1}}],[\"如果为false\",{\"1\":{\"2966\":1}}],[\"如果为了防止不出异常\",{\"1\":{\"534\":1}}],[\"如果请求体变化\",{\"1\":{\"2910\":1}}],[\"如果查询不到结果\",{\"1\":{\"2907\":1,\"2925\":1}}],[\"如果查询的索引越界了就会报越界异常\",{\"1\":{\"407\":1}}],[\"如果重复创建相同的索引\",{\"1\":{\"2886\":1}}],[\"如果d1包含了马斯克和spacex\",{\"1\":{\"2873\":1}}],[\"如果数据量大的话即使对\",{\"1\":{\"2849\":1}}],[\"如果数组的索引处已经有值了\",{\"1\":{\"1644\":1}}],[\"如果浏览器或服务端都没有被关闭\",{\"1\":{\"2785\":1}}],[\"如果tomcat成功启动\",{\"1\":{\"2747\":1}}],[\"如果this对象不是null\",{\"1\":{\"1180\":1}}],[\"如果调用session提供的invalidate\",{\"1\":{\"2676\":1}}],[\"如果调用声明局部内部类的外部方法的局部变量的话\",{\"1\":{\"1210\":1}}],[\"如果服务器非正常关闭\",{\"1\":{\"2676\":1}}],[\"如果会话不中断\",{\"1\":{\"2675\":1}}],[\"如果都写两份代码\",{\"1\":{\"2613\":1}}],[\"如果都配置了\",{\"1\":{\"782\":1}}],[\"如果前端发送的是纯文本数据\",{\"1\":{\"2607\":1}}],[\"如果前端发送的是字节数据\",{\"1\":{\"2606\":1}}],[\"如果配置的是\",{\"1\":{\"2597\":1}}],[\"如果配置了\",{\"1\":{\"2577\":1}}],[\"如果项目中的servlet配置了\",{\"1\":{\"2577\":1}}],[\"如果路径配置的是\",{\"1\":{\"2576\":1}}],[\"如果路径配置的不是扩展名\",{\"1\":{\"2576\":1}}],[\"如果创建servlet比较耗时的话\",{\"1\":{\"2546\":1}}],[\"如果创建了一个类的多个对象\",{\"1\":{\"1013\":1}}],[\"如果未配置artifacts\",{\"1\":{\"2514\":1,\"2519\":1}}],[\"如果未设置此属性\",{\"1\":{\"262\":1}}],[\"如果同时配置了filters和proxyfilters\",{\"1\":{\"2426\":1}}],[\"如果同步代码有异常\",{\"1\":{\"1535\":1}}],[\"如果空闲时间大于timebetweenevictionrunsmillis\",{\"1\":{\"2426\":1}}],[\"如果空参构造器访问权限是不够\",{\"1\":{\"2037\":1}}],[\"如果validationquery为null\",{\"1\":{\"2426\":1}}],[\"如果对安全要求很高\",{\"1\":{\"3194\":1}}],[\"如果对该数据库连接对象设置了关闭自动提交\",{\"1\":{\"2384\":1}}],[\"如果对类进行了修改\",{\"1\":{\"1910\":1}}],[\"如果上传报错\",{\"1\":{\"2362\":1}}],[\"如果存在多个数据源\",{\"1\":{\"2426\":1}}],[\"如果存在则不会创建\",{\"1\":{\"1887\":1}}],[\"如果存储的文件过大\",{\"1\":{\"2360\":1}}],[\"如果第一个结果是更新计数或没有结果\",{\"1\":{\"2323\":1}}],[\"如果第一个结果是\",{\"1\":{\"2323\":1}}],[\"如果修改了配置信息\",{\"1\":{\"2304\":1}}],[\"如果全都返回true\",{\"1\":{\"2229\":1}}],[\"如果lambda体只有一条执行语句\",{\"1\":{\"2118\":1}}],[\"如果lambda形参列表只有一个参数\",{\"1\":{\"2118\":1}}],[\"如果类中没有无参构造器就不能使用newinstance了\",{\"1\":{\"2038\":1}}],[\"如果类没有空参构造器\",{\"1\":{\"2037\":1}}],[\"如果类没有显示定义这个静态常量\",{\"1\":{\"1910\":1}}],[\"如果其中一个文档出现错误\",{\"1\":{\"3072\":2}}],[\"如果其父类没有被初始化\",{\"1\":{\"2029\":1}}],[\"如果其他泛型的list想使用功能这个遍历方法\",{\"1\":{\"1747\":1}}],[\"如果发现其父类还没有进行初始化\",{\"1\":{\"2028\":1}}],[\"如果该类还未被加载到内存中\",{\"1\":{\"2025\":1}}],[\"如果该方法没有被重写过默认也是\",{\"1\":{\"1181\":1}}],[\"如果套接字未连接\",{\"1\":{\"1985\":2}}],[\"如果套接字是未连接的\",{\"1\":{\"1966\":1}}],[\"如果信息比包的长度长\",{\"1\":{\"1985\":1}}],[\"如果客户端请求连接\",{\"1\":{\"1973\":1}}],[\"如果尚未绑定套接字\",{\"1\":{\"1966\":1}}],[\"如果尚未连接套接字\",{\"1\":{\"1966\":1}}],[\"如果读取的文件不存在则会出现异常\",{\"1\":{\"1887\":1}}],[\"如果读到文件的末尾就返回null\",{\"1\":{\"581\":1}}],[\"如果和gbk等双字节编码方式一样\",{\"1\":{\"1863\":1}}],[\"如果返回\",{\"1\":{\"1801\":1}}],[\"如果返回false\",{\"1\":{\"1167\":1}}],[\"如果字节流操作文本文件\",{\"1\":{\"1790\":1}}],[\"如果字符流操作非文本文件\",{\"1\":{\"1790\":1}}],[\"如果pathname是相对路径\",{\"1\":{\"1767\":1}}],[\"如果实例化时\",{\"1\":{\"1711\":1}}],[\"如果实现类实现了多个接口\",{\"1\":{\"1269\":1}}],[\"如果实现类实现了接口中的所有抽象方法\",{\"1\":{\"1262\":1}}],[\"如果实现类重写了接口中的默认方法\",{\"1\":{\"1269\":1}}],[\"如果equals\",{\"1\":{\"1674\":2}}],[\"如果出现了两个不同输入有相同输出的情况\",{\"1\":{\"1651\":1}}],[\"如果自己手动重写\",{\"1\":{\"1649\":1}}],[\"如果相同\",{\"1\":{\"1642\":1}}],[\"如果试图把一个对象添加到\",{\"1\":{\"1639\":1}}],[\"如果需要提供给别人使用\",{\"1\":{\"2738\":1}}],[\"如果需要可以通过配置useunfairlock属性为true使用非公平锁\",{\"1\":{\"2426\":1}}],[\"如果需要修改配置信息\",{\"1\":{\"2304\":1}}],[\"如果需要访问文件内容本身\",{\"1\":{\"1761\":1}}],[\"如果需要创建iterator\",{\"1\":{\"1589\":1}}],[\"如果需要导入多个结构\",{\"1\":{\"1094\":1}}],[\"如果操作共享数据的代码完整的声明在一个方法中\",{\"1\":{\"1517\":1}}],[\"如果图片没加载出来就无法继续向上滑动\",{\"1\":{\"1446\":1}}],[\"如果用单线程做\",{\"1\":{\"1446\":1}}],[\"如果把标有\",{\"1\":{\"1416\":1}}],[\"如果只需要返回符合条件的第一条数据\",{\"1\":{\"3092\":1}}],[\"如果只有一条return语句\",{\"1\":{\"2118\":1}}],[\"如果只有一个参数成员\",{\"1\":{\"1400\":1}}],[\"如果只指定了两个参数\",{\"1\":{\"534\":1}}],[\"如果注解只有一个成员\",{\"1\":{\"1399\":1}}],[\"如果注释方法中的某一个步骤\",{\"1\":{\"815\":1}}],[\"如果枚举类中只有一个对象\",{\"1\":{\"1371\":1}}],[\"如果代码存在逻辑上的问题\",{\"1\":{\"1359\":1}}],[\"如果代码编译时没有异常\",{\"1\":{\"1356\":1}}],[\"如果代码进行过修改\",{\"1\":{\"792\":1}}],[\"如果父类中被重写的方法没有throws方式处理异常\",{\"1\":{\"1355\":1}}],[\"如果这两个异常的处理方式不一样\",{\"1\":{\"1352\":1}}],[\"如果异常没有在调用者方法中处理\",{\"1\":{\"1351\":1}}],[\"如果明确知道产生的是何种异常\",{\"1\":{\"1338\":1}}],[\"如果输入字符串就会报异常\",{\"1\":{\"1333\":1}}],[\"如果程序出现异常而未能关闭\",{\"1\":{\"2414\":1}}],[\"如果程序不处理\",{\"1\":{\"1324\":1}}],[\"如果程序既可以使用三元运算符\",{\"1\":{\"915\":1}}],[\"如果变量的值是引用数据类型\",{\"1\":{\"1306\":1}}],[\"如果变量的值是基本数据类型\",{\"1\":{\"1306\":1}}],[\"如果boolean\",{\"1\":{\"1282\":1}}],[\"如果子类\",{\"1\":{\"1269\":1}}],[\"如果子类构造器中既未显式调用父类或本类的构造器\",{\"1\":{\"1140\":1}}],[\"如果你的副本+主节点的个数是奇数\",{\"1\":{\"3132\":1}}],[\"如果你想返回指定条数的记录\",{\"1\":{\"3096\":1}}],[\"如果你没有选择数据库\",{\"1\":{\"3062\":1}}],[\"如果你不希望密码直接写在配置文件中\",{\"1\":{\"2426\":1}}],[\"如果你是\",{\"1\":{\"1258\":1}}],[\"如果你对log4j很熟悉\",{\"1\":{\"260\":1}}],[\"如果继承了抽象类或实现了接口\",{\"1\":{\"1215\":1}}],[\"如果两个以上条件之间是或者的关系\",{\"1\":{\"3102\":1}}],[\"如果两个数据的哈希值不同\",{\"1\":{\"1642\":1}}],[\"如果两个方法都使用在同步代码块或同步方法中\",{\"1\":{\"1555\":1}}],[\"如果两个对象一个name属性有初始值\",{\"1\":{\"1180\":1}}],[\"如果两个技术没有交集\",{\"1\":{\"265\":1}}],[\"如果x\",{\"1\":{\"1180\":3}}],[\"如果比较的是引用数据类型变量\",{\"1\":{\"1178\":1}}],[\"如果比较的是基本数据类型变量\",{\"1\":{\"1178\":1}}],[\"如果\",{\"1\":{\"1168\":1,\"1985\":1}}],[\"如果它不是晚绑定\",{\"1\":{\"1159\":1}}],[\"如果构造器的形参和类的属性同名时\",{\"1\":{\"1081\":1}}],[\"如果方法与调用者无关\",{\"1\":{\"1224\":1}}],[\"如果方法的形参和类的属性同名时\",{\"1\":{\"1080\":1}}],[\"如果方法没有返回值\",{\"1\":{\"1029\":1}}],[\"如果直接对类内部的属性进行访问和操作\",{\"1\":{\"1054\":1}}],[\"如果还有其他参数\",{\"1\":{\"1047\":1}}],[\"如果还未调用next\",{\"1\":{\"678\":1,\"1600\":1}}],[\"如果参数是引用数据类型\",{\"1\":{\"1045\":1}}],[\"如果我们想实现对某列值在原有值的基础上进行增加或减少\",{\"1\":{\"3084\":1}}],[\"如果我们只是简单的用新数据比对旧数据\",{\"1\":{\"1641\":1}}],[\"如果我们也想输出对象的实体内容\",{\"1\":{\"1186\":1}}],[\"如果我们没有显式的声明一个类的父类的话\",{\"1\":{\"1116\":1}}],[\"如果我们修改一个对象的属性a\",{\"1\":{\"1013\":1}}],[\"如果我们需要代表本地时间的对象\",{\"1\":{\"477\":1}}],[\"如果多个条件表达式之间有包含的关系\",{\"1\":{\"924\":1}}],[\"如果多个条件表达式之间有交集的关系\",{\"1\":{\"924\":1}}],[\"如果多个条件表达式之间是\",{\"1\":{\"924\":1}}],[\"如果instance真的==null\",{\"1\":{\"1522\":1}}],[\"如果index超出了范围\",{\"1\":{\"702\":1}}],[\"如果if\",{\"1\":{\"923\":1}}],[\"如果符号位是1\",{\"1\":{\"909\":1}}],[\"如果最高位移动到了符号位\",{\"1\":{\"909\":1}}],[\"如果左边为假\",{\"1\":{\"905\":1}}],[\"如果左边为真\",{\"1\":{\"905\":1}}],[\"如果想再次开启一个线程\",{\"1\":{\"1477\":1}}],[\"如果想使用重复注解\",{\"1\":{\"1419\":1}}],[\"如果想保留小数位\",{\"1\":{\"891\":1}}],[\"如果想看sql需要进行配置\",{\"1\":{\"348\":1}}],[\"如果值超过了int的范围\",{\"1\":{\"868\":1}}],[\"如果值超过了变量类型规定的范围\",{\"1\":{\"840\":1}}],[\"如果一个线程阻塞了\",{\"1\":{\"1522\":1}}],[\"如果一个异常回到main\",{\"1\":{\"1351\":1}}],[\"如果一个方法内抛出异常\",{\"1\":{\"1351\":1}}],[\"如果一个方法\",{\"1\":{\"1349\":1}}],[\"如果一个类中定义了多个非静态代码块\",{\"1\":{\"1280\":1}}],[\"如果一个类中定义了多个静态代码块\",{\"1\":{\"1279\":1}}],[\"如果一个类中声明了n个构造器\",{\"1\":{\"1082\":1}}],[\"如果一个类支持泛型时\",{\"1\":{\"811\":1}}],[\"如果一段程序是由多个作者来维护\",{\"1\":{\"811\":1}}],[\"如果指定的集合不存在就会自动创建集合\",{\"1\":{\"3071\":1}}],[\"如果指定的key不存在\",{\"1\":{\"713\":1}}],[\"如果指定了字符集\",{\"1\":{\"426\":1}}],[\"如果key1的哈希值和已经存在的某一个数据\",{\"1\":{\"1674\":1}}],[\"如果key1的哈希值与已经存在的数据的哈希值都不相同\",{\"1\":{\"1674\":1}}],[\"如果key不存在\",{\"1\":{\"715\":1}}],[\"如果key\",{\"1\":{\"711\":1}}],[\"如果取的index不存在\",{\"1\":{\"699\":1}}],[\"如果没有开启认证\",{\"1\":{\"3207\":1}}],[\"如果没有索引\",{\"1\":{\"3103\":1}}],[\"如果没有就在内存中创建一个session并返回\",{\"1\":{\"2676\":1}}],[\"如果没有导入可以手动导入\",{\"1\":{\"2525\":1}}],[\"如果没有配置\",{\"1\":{\"2426\":1,\"3152\":1}}],[\"如果没有值\",{\"1\":{\"2259\":1}}],[\"如果没有成员\",{\"1\":{\"1399\":1}}],[\"如果没有默认值\",{\"1\":{\"1301\":1}}],[\"如果没有显式的定义类的构造器的话\",{\"1\":{\"1072\":1}}],[\"如果没有初始化值\",{\"1\":{\"1022\":1}}],[\"如果没有超过int的范围\",{\"1\":{\"868\":1}}],[\"如果没有给出时间单位\",{\"1\":{\"262\":1}}],[\"如果没找到就返回负数\",{\"1\":{\"646\":1}}],[\"如果在套接字上调用\",{\"1\":{\"1966\":2}}],[\"如果在当前代码中没有找到相应的处理程序\",{\"1\":{\"1319\":1}}],[\"如果在类的声明中未使用extends关键字指明其父类\",{\"1\":{\"1175\":1}}],[\"如果在源文件中\",{\"1\":{\"1096\":1}}],[\"如果在本类中未找到\",{\"1\":{\"1084\":1}}],[\"如果在方法内或构造器内需要使用成员变量\",{\"1\":{\"1084\":1}}],[\"如果在接收的数据中不含有\",{\"1\":{\"581\":1,\"1834\":1}}],[\"如果在idea下测试工程时pom\",{\"1\":{\"238\":1}}],[\"如果已到达流的末尾\",{\"1\":{\"565\":1,\"566\":1,\"570\":1}}],[\"如果因为已经到达流末尾而没有可用的字节\",{\"1\":{\"566\":1}}],[\"如果因\",{\"1\":{\"565\":1}}],[\"如果此处未出现artifact\",{\"1\":{\"2518\":1}}],[\"如果此处配置了info级别\",{\"1\":{\"262\":1}}],[\"如果此位置上的数据不为空\",{\"1\":{\"1674\":1}}],[\"如果此位置上的数据为空\",{\"1\":{\"1674\":1}}],[\"如果此次的添加导致底层elementdata数组容量不够\",{\"1\":{\"1619\":1}}],[\"如果此文件目录的上层目录不存在\",{\"1\":{\"556\":1}}],[\"如果目录已存在\",{\"1\":{\"556\":1}}],[\"如果文件里有public修饰的类\",{\"1\":{\"798\":1}}],[\"如果文件或目录已经存在了\",{\"1\":{\"554\":1,\"1770\":1}}],[\"如果文件不存在则会去创建文件\",{\"1\":{\"1887\":1}}],[\"如果文件不存在\",{\"1\":{\"552\":1}}],[\"如果除不尽\",{\"1\":{\"536\":1}}],[\"如果设置为false\",{\"1\":{\"3081\":1}}],[\"如果设置为warn\",{\"1\":{\"262\":1}}],[\"如果设置一级域名相同\",{\"1\":{\"2809\":1}}],[\"如果设置的精度\",{\"1\":{\"535\":1}}],[\"如果年龄相同\",{\"1\":{\"500\":1}}],[\"如果当前对象this等于形参对象obj\",{\"1\":{\"497\":1}}],[\"如果当前对象this小于形参对象obj\",{\"1\":{\"497\":1}}],[\"如果当前对象this大于形参对象obj\",{\"1\":{\"497\":1}}],[\"如果当前页码值大于了总页码值\",{\"1\":{\"371\":1}}],[\"如果要查询结果返回部分字段\",{\"1\":{\"3093\":1}}],[\"如果要存整型\",{\"1\":{\"3074\":1}}],[\"如果要共享\",{\"1\":{\"2808\":1}}],[\"如果要创建只需要一行数据的方法\",{\"1\":{\"2358\":1}}],[\"如果要对集合中的所有元素进一步操作\",{\"1\":{\"2219\":1}}],[\"如果要针对不同的方法进行增强\",{\"1\":{\"2087\":1}}],[\"如果要在java程序中实现一些面向对象编程的常见需求\",{\"1\":{\"1283\":1}}],[\"如果要比较的两个对象是引用关系\",{\"1\":{\"1180\":1}}],[\"如果要比较该类的两个实例大小\",{\"1\":{\"496\":1}}],[\"如果要使用\",{\"1\":{\"1113\":1}}],[\"如果要进行换行和输入空格\",{\"1\":{\"576\":1}}],[\"如果要删除目录\",{\"1\":{\"562\":1}}],[\"如果要表示再大的整数\",{\"1\":{\"529\":1}}],[\"如果要获取其他范围的值\",{\"1\":{\"513\":1}}],[\"如果要该类的多个对象排序\",{\"1\":{\"496\":1}}],[\"如果要替换最后一个字符\",{\"1\":{\"454\":1}}],[\"如果超过了\",{\"1\":{\"434\":1,\"744\":1,\"753\":1}}],[\"如果使用mybatis\",{\"1\":{\"2760\":1}}],[\"如果使用构造器fileoutputstream\",{\"1\":{\"1797\":2}}],[\"如果使用定制排序\",{\"1\":{\"1658\":1}}],[\"如果使用treeset\",{\"1\":{\"1655\":1}}],[\"如果使用的类或接口是本包下定义的\",{\"1\":{\"1094\":1}}],[\"如果使用的类或接口是java\",{\"1\":{\"1094\":1}}],[\"如果使用的话\",{\"1\":{\"1029\":1}}],[\"如果使用\",{\"1\":{\"1033\":1}}],[\"如果使用第二个参数来指定字符集\",{\"1\":{\"426\":1}}],[\"如果使用java\",{\"1\":{\"200\":1}}],[\"如果做前后端分离的api开发\",{\"1\":{\"363\":1}}],[\"如果写错了会发生异常\",{\"1\":{\"356\":1}}],[\"如果测试的时候想用int作为id\",{\"1\":{\"348\":1}}],[\"如果有就记录文档的id\",{\"1\":{\"2874\":1}}],[\"如果有值则将其返回\",{\"1\":{\"2260\":1}}],[\"如果有值\",{\"1\":{\"2257\":1}}],[\"如果有开发人员试图使用或重写被\",{\"1\":{\"1425\":1}}],[\"如果有多个线程被wait\",{\"1\":{\"1551\":1}}],[\"如果有多个成员\",{\"1\":{\"1399\":1}}],[\"如果有多个属性要添加\",{\"1\":{\"210\":1}}],[\"如果有属性\",{\"1\":{\"1378\":1}}],[\"如果有的话\",{\"1\":{\"1378\":1}}],[\"如果有\",{\"1\":{\"1282\":1}}],[\"如果有try\",{\"1\":{\"579\":1}}],[\"如果有很个性化的需求\",{\"1\":{\"346\":1}}],[\"如果是手动安装的绿色版\",{\"1\":{\"3055\":1}}],[\"如果是手动通过maven创建的项目\",{\"1\":{\"179\":1}}],[\"如果是post请求\",{\"1\":{\"2566\":1}}],[\"如果是带缓冲区的流对象的close\",{\"1\":{\"1826\":1}}],[\"如果是在单元测试里运行代码\",{\"1\":{\"1767\":1}}],[\"如果是null\",{\"1\":{\"1522\":1}}],[\"如果是多核的话\",{\"1\":{\"1441\":1}}],[\"如果是多环境\",{\"1\":{\"307\":1}}],[\"如果是字符串\",{\"1\":{\"1193\":1}}],[\"如果是静态方法调用invoke\",{\"1\":{\"626\":1,\"2066\":1}}],[\"如果是引用类型\",{\"1\":{\"614\":1,\"622\":1,\"2045\":1}}],[\"如果是追加写\",{\"1\":{\"576\":1}}],[\"如果是空目录\",{\"1\":{\"546\":1,\"547\":1}}],[\"如果是文件则返回null\",{\"1\":{\"546\":1,\"547\":1}}],[\"如果是目录或空文件\",{\"1\":{\"544\":1}}],[\"如果是5\",{\"1\":{\"536\":2}}],[\"如果是char\",{\"1\":{\"452\":1}}],[\"如果不指定索引名\",{\"1\":{\"2895\":1}}],[\"如果不指定泛型\",{\"1\":{\"656\":1,\"695\":1}}],[\"如果不是的话\",{\"1\":{\"2434\":1}}],[\"如果不配置druid会根据url自动识别dbtype\",{\"1\":{\"2426\":1}}],[\"如果不同就以链表的形式添加到该元素后面\",{\"1\":{\"1642\":1}}],[\"如果不存在再调用\",{\"1\":{\"2758\":1}}],[\"如果不存在\",{\"1\":{\"700\":1,\"701\":1,\"1920\":1}}],[\"如果不重写equals方法\",{\"1\":{\"662\":1}}],[\"如果不设置会出问题\",{\"1\":{\"277\":1}}],[\"如果不这样就无法找到启动类\",{\"1\":{\"77\":1}}],[\"如果将tomcat端口号改为80\",{\"1\":{\"2457\":1}}],[\"如果将run方法的args删掉\",{\"1\":{\"213\":1}}],[\"如果将测试类的位置改变了\",{\"1\":{\"182\":1}}],[\"如果执行jar包时\",{\"1\":{\"209\":1}}],[\"如果关闭其他服务器和改端口号都解决不了问题\",{\"1\":{\"202\":1}}],[\"如果每次测试前改过来\",{\"1\":{\"184\":1}}],[\"如果包里找不到\",{\"1\":{\"183\":1}}],[\"如时间和空间的属性\",{\"1\":{\"170\":1}}],[\"如javabean\",{\"1\":{\"2748\":1}}],[\"如javaweb\",{\"1\":{\"2482\":1}}],[\"如java\",{\"1\":{\"1999\":1}}],[\"如jdbc数据库连接信息\",{\"1\":{\"129\":1}}],[\"如jetty\",{\"1\":{\"111\":1}}],[\"如常用的内嵌tomcat\",{\"1\":{\"107\":1}}],[\"如\",{\"1\":{\"105\":1,\"123\":1,\"300\":1,\"486\":1,\"523\":1,\"737\":1,\"738\":1,\"845\":2,\"878\":1,\"1312\":1,\"1313\":1,\"1338\":1,\"1422\":1,\"1582\":1,\"1700\":1,\"1933\":1,\"1938\":2,\"2192\":1,\"2290\":1,\"2447\":2,\"2463\":1,\"2467\":1,\"2505\":1,\"2583\":1,\"2597\":1,\"2647\":1,\"2684\":1,\"2706\":1,\"2754\":1,\"2909\":1,\"2942\":2,\"3041\":1}}],[\"如下在查询语句后面跟explain\",{\"1\":{\"3118\":1}}],[\"如下几个文档\",{\"1\":{\"2872\":1,\"2879\":1}}],[\"如下几个\",{\"1\":{\"1943\":1}}],[\"如下图位置\",{\"1\":{\"2627\":1}}],[\"如下图\",{\"1\":{\"849\":1}}],[\"如下\",{\"1\":{\"74\":1,\"93\":1,\"94\":1,\"99\":1,\"145\":1,\"288\":1,\"374\":1,\"530\":1,\"644\":1,\"909\":1,\"985\":1,\"986\":1,\"1056\":1,\"1167\":1,\"1176\":1,\"1228\":1,\"1286\":1,\"1429\":1,\"1747\":1,\"1748\":1,\"2311\":1,\"2424\":1,\"2483\":1,\"2486\":1,\"2583\":1,\"2614\":1,\"2902\":1,\"3056\":1,\"3100\":1,\"3148\":1,\"3197\":1,\"3224\":1}}],[\"如redis\",{\"1\":{\"11\":1}}],[\"如mysql\",{\"1\":{\"11\":1}}],[\"可读写\",{\"1\":{\"3130\":1}}],[\"可读性差\",{\"1\":{\"1316\":1}}],[\"可遍历性\",{\"1\":{\"3033\":1}}],[\"可分词\",{\"1\":{\"2963\":1}}],[\"可执行脚本目录\",{\"1\":{\"2856\":1}}],[\"可称为开发环境\",{\"1\":{\"2741\":1}}],[\"可称为jvm环境\",{\"1\":{\"2741\":1}}],[\"可根据预先的占用超时设定\",{\"1\":{\"2419\":1}}],[\"可在应用层通过数据库连接池的配置\",{\"1\":{\"2419\":1}}],[\"可使用事务\",{\"1\":{\"2400\":4}}],[\"可使用关键字final来修饰\",{\"1\":{\"1100\":1}}],[\"可返回表中的多条记录\",{\"1\":{\"2355\":1}}],[\"可用性\",{\"1\":{\"3125\":1}}],[\"可用文档数量\",{\"1\":{\"2893\":1}}],[\"可用1\",{\"1\":{\"1861\":1}}],[\"可用于类型的注解\",{\"0\":{\"1421\":1}}],[\"可用于修饰包\",{\"1\":{\"1387\":1}}],[\"可多次调用write\",{\"1\":{\"1816\":1}}],[\"可省略\",{\"1\":{\"1812\":1,\"2396\":1}}],[\"可操纵的东西\",{\"1\":{\"1448\":1}}],[\"可增强用户体验\",{\"1\":{\"1445\":1}}],[\"可重复的\",{\"1\":{\"1670\":1}}],[\"可重复的数据\",{\"1\":{\"1578\":1,\"1611\":1}}],[\"可重复的注解及可用于类型的注解\",{\"1\":{\"1417\":1}}],[\"可重复\",{\"1\":{\"1574\":1}}],[\"可重复注解\",{\"0\":{\"1418\":1}}],[\"可自己拿来用\",{\"1\":{\"2396\":1}}],[\"可自行选择\",{\"1\":{\"1359\":1}}],[\"可自动转换的基本数据类型除外\",{\"1\":{\"1178\":1}}],[\"可不创建对象\",{\"1\":{\"1225\":1}}],[\"可维护性\",{\"1\":{\"1053\":1}}],[\"可知构造器将pattern对象的引用赋于matcher中变量parentpattern\",{\"1\":{\"756\":1}}],[\"可通过class类的静态方法forname\",{\"1\":{\"588\":1,\"2020\":1}}],[\"可变形参\",{\"1\":{\"2332\":1}}],[\"可变形参的两种写法\",{\"1\":{\"1049\":1}}],[\"可变参数的重写\",{\"0\":{\"1128\":1}}],[\"可变个数形参在方法的形参中\",{\"1\":{\"1047\":2}}],[\"可变个数形参的第二种写法\",{\"1\":{\"1047\":1}}],[\"可变个数形参的方法与本类中方法名相同\",{\"1\":{\"1047\":2}}],[\"可变个数形参的方法\",{\"0\":{\"1046\":1}}],[\"可变个数形参\",{\"1\":{\"1046\":1}}],[\"可变的字符序列\",{\"1\":{\"442\":2}}],[\"可变性\",{\"1\":{\"438\":1,\"449\":1,\"460\":1}}],[\"可配置项非常多\",{\"1\":{\"312\":1}}],[\"可能存在线程安全问题\",{\"1\":{\"2547\":1}}],[\"可能有多个构造器\",{\"1\":{\"2050\":1}}],[\"可能发生变化\",{\"1\":{\"1910\":1}}],[\"可能生成某种异常\",{\"1\":{\"1349\":1}}],[\"可能读取失败\",{\"1\":{\"1344\":1}}],[\"可能出现classcastexception\",{\"1\":{\"1707\":1}}],[\"可能出现classcastexception的异常\",{\"1\":{\"1167\":1}}],[\"可能出现异常的代码\",{\"1\":{\"1337\":1}}],[\"可能是多个异常\",{\"1\":{\"625\":1,\"2048\":1}}],[\"可能抛出\",{\"1\":{\"588\":1,\"2020\":1}}],[\"可能没有一个真实存在的文件或目录\",{\"1\":{\"538\":1,\"1762\":1}}],[\"可能跟预想的不一样\",{\"1\":{\"173\":1}}],[\"可能会产生数据损坏\",{\"1\":{\"3242\":1}}],[\"可能会遇到报错\",{\"1\":{\"3161\":1}}],[\"可能会遇到bug\",{\"1\":{\"119\":1}}],[\"可能会损害数据\",{\"1\":{\"3050\":1}}],[\"可能会造成不必要的错误\",{\"1\":{\"2744\":1}}],[\"可能会造成不同对象拥有相同的hashcode\",{\"1\":{\"1650\":1}}],[\"可能会乱码\",{\"1\":{\"1790\":1}}],[\"可能会发生阻塞\",{\"1\":{\"1521\":1}}],[\"可能会发生除不尽的情况\",{\"1\":{\"535\":1}}],[\"可能会抛出的异常类型\",{\"1\":{\"1350\":1}}],[\"可能会带来意想不到的结果\",{\"1\":{\"1324\":1}}],[\"可能会导致数据的错误\",{\"1\":{\"1054\":1}}],[\"可能会导致写入失败\",{\"1\":{\"578\":1}}],[\"可能会出现驱动类过时的问题\",{\"1\":{\"278\":1}}],[\"可能会出现一个提示信息\",{\"1\":{\"165\":1}}],[\"可能会根据开发环境添加诸如application\",{\"1\":{\"118\":1}}],[\"可能与springboot的版本号对不上导致无法引入报错\",{\"1\":{\"76\":1}}],[\"可以看到有两个隐藏的集合\",{\"1\":{\"3198\":1}}],[\"可以看做一个库\",{\"1\":{\"2865\":1}}],[\"可以读写所有数据库中任何数据\",{\"1\":{\"3190\":1}}],[\"可以读写指定数据库中任何数据\",{\"1\":{\"3190\":1}}],[\"可以读取指定数据库以及对数据库进行清理\",{\"1\":{\"3190\":1}}],[\"可以读取指定数据库中任何数据\",{\"1\":{\"3190\":1}}],[\"可以读取任何数据库以及对数据库进行清理\",{\"1\":{\"3190\":1}}],[\"可以读取所有数据库中任何数据\",{\"1\":{\"3190\":1}}],[\"可以读或选举\",{\"1\":{\"3130\":1}}],[\"可以随意连接到实例进行各种操作\",{\"1\":{\"3178\":1}}],[\"可以随意定义\",{\"1\":{\"2468\":1}}],[\"可以发现members里存在了两个节点\",{\"1\":{\"3159\":1}}],[\"可以不加仲裁者\",{\"1\":{\"3132\":1}}],[\"可以不作处理\",{\"1\":{\"1325\":1}}],[\"可以说\",{\"1\":{\"3125\":1}}],[\"可以说是目前最好的连接池之一\",{\"1\":{\"2422\":1}}],[\"可以说是针对监控而生的db连接池\",{\"1\":{\"2422\":1}}],[\"可以移除指定的索引\",{\"1\":{\"3115\":1}}],[\"可以登录\",{\"1\":{\"3053\":1}}],[\"可以查看到主节点的信息\",{\"1\":{\"3151\":1}}],[\"可以查看指定索引下的所有文档\",{\"1\":{\"2992\":1}}],[\"可以查阅javaee\",{\"1\":{\"2590\":1}}],[\"可以依次指定多个要修改的字段\",{\"1\":{\"2983\":1}}],[\"可以添加多个映射\",{\"1\":{\"2963\":1}}],[\"可以添加隐藏的选项框\",{\"1\":{\"212\":1}}],[\"可以扩展到上百台服务器\",{\"1\":{\"2843\":1}}],[\"可以和程序的容器\",{\"1\":{\"2680\":1}}],[\"可以立即销毁session\",{\"1\":{\"2676\":1}}],[\"可以重定向到任何位置的资源\",{\"1\":{\"2664\":1}}],[\"可以重复的\",{\"1\":{\"1664\":1}}],[\"可以同时引入多个约束文档\",{\"1\":{\"2782\":1}}],[\"可以同时创建多层目录\",{\"1\":{\"557\":1}}],[\"可以同设置\",{\"1\":{\"2546\":1}}],[\"可以任意取\",{\"1\":{\"2498\":1,\"3014\":1}}],[\"可以任意指定长度\",{\"1\":{\"989\":1}}],[\"可以部署web项目\",{\"1\":{\"2446\":1}}],[\"可以很好的监控db池连接和sql的执行情况\",{\"1\":{\"2422\":1}}],[\"可以很简单的穷举出需要多少个函数式接口\",{\"1\":{\"2137\":1}}],[\"可以开启事务\",{\"1\":{\"2377\":1}}],[\"可以采用数据库连接池技术\",{\"1\":{\"2415\":1}}],[\"可以采用java的批量更新机制\",{\"1\":{\"2366\":1}}],[\"可以采用config\",{\"1\":{\"226\":1}}],[\"可以操作blob数据\",{\"1\":{\"2313\":1}}],[\"可以操作非public修饰的类内部成员\",{\"1\":{\"2069\":1}}],[\"可以组合ispresent一起用\",{\"1\":{\"2259\":1}}],[\"可以更好的表达这个概念\",{\"1\":{\"2247\":1}}],[\"可以方便地创建常见收集器实例\",{\"1\":{\"2242\":1}}],[\"可以方便地加入控制逻辑\",{\"1\":{\"1057\":1}}],[\"可以先使用flatmap\",{\"1\":{\"2224\":1}}],[\"可以接个map\",{\"1\":{\"2219\":1}}],[\"可以只返回聚合结果\",{\"1\":{\"2954\":1}}],[\"可以只有终止操作\",{\"1\":{\"2207\":1}}],[\"可以只选版本\",{\"1\":{\"305\":1}}],[\"可以执行非常复杂的查找\",{\"1\":{\"2188\":1}}],[\"可以认为是lambda表达式的一个语法糖\",{\"1\":{\"2148\":1}}],[\"可以代理所有的被代理类\",{\"1\":{\"2086\":1}}],[\"可以广播发送\",{\"1\":{\"1957\":1}}],[\"可以实现\",{\"1\":{\"2836\":1}}],[\"可以实现高效的批量操作\",{\"1\":{\"2313\":1}}],[\"可以实现无痛的网络连接\",{\"1\":{\"1923\":1}}],[\"可以实现代码重用\",{\"1\":{\"1028\":1}}],[\"可以替代标准的java\",{\"1\":{\"1913\":1}}],[\"可以替换成is\",{\"1\":{\"1282\":1}}],[\"可以向已存在的文件后追加内容\",{\"1\":{\"1881\":1}}],[\"可以强制将缓冲区的内容全部写入输出流\",{\"1\":{\"1826\":1}}],[\"可以强转\",{\"1\":{\"1167\":1}}],[\"可以强转为int\",{\"1\":{\"514\":1}}],[\"可以循环读取所有的数据\",{\"1\":{\"1801\":1}}],[\"可以获取数组的stream\",{\"1\":{\"2198\":1}}],[\"可以获取数据\",{\"1\":{\"1745\":1}}],[\"可以获取任何修饰符修饰的方法\",{\"1\":{\"611\":1,\"2064\":1}}],[\"可以赋值为null\",{\"1\":{\"3074\":1}}],[\"可以赋值\",{\"1\":{\"1743\":1}}],[\"可以声明为静态的\",{\"1\":{\"1734\":1}}],[\"可以声明多个变量\",{\"1\":{\"931\":1}}],[\"可以作为非静态属性的类型\",{\"1\":{\"1721\":1}}],[\"可以作为参数\",{\"1\":{\"481\":1}}],[\"可以指明具体的泛型类型\",{\"1\":{\"1711\":1}}],[\"可以指定构造器的第二个参数\",{\"1\":{\"1812\":1}}],[\"可以指定\",{\"1\":{\"749\":1}}],[\"可以指定泛型\",{\"1\":{\"656\":1,\"1709\":1}}],[\"可以指定复制的长度\",{\"1\":{\"647\":1}}],[\"可以指定字符串长度\",{\"1\":{\"448\":1}}],[\"可以指定第二个参数\",{\"1\":{\"434\":1,\"686\":1,\"687\":1,\"744\":1}}],[\"可以保证所有的\",{\"1\":{\"1666\":1,\"1685\":1}}],[\"可以保障并发访问安全问题\",{\"1\":{\"291\":1}}],[\"可以按照添加的顺序实现遍历\",{\"1\":{\"1665\":1}}],[\"可以按照添加的顺序遍历\",{\"1\":{\"1638\":1}}],[\"可以按照添加对象的指定属性\",{\"1\":{\"1639\":1}}],[\"可以确保集合元素处于排序状态\",{\"1\":{\"1639\":1}}],[\"可以存储null值\",{\"1\":{\"1635\":1}}],[\"可以存储生日\",{\"1\":{\"466\":1}}],[\"可以动态地把多个对象的引用放入容器中\",{\"1\":{\"1572\":1}}],[\"可以避免频繁创建销毁\",{\"1\":{\"1564\":1}}],[\"可以抛出异常\",{\"1\":{\"1559\":1}}],[\"可以显式加锁\",{\"1\":{\"1532\":1}}],[\"可以显式的使用\",{\"1\":{\"1082\":1}}],[\"可以创建多个cookie对象\",{\"1\":{\"2804\":1}}],[\"可以创建多个tomcat模板给不同的项目用\",{\"1\":{\"2504\":1}}],[\"可以创建多个线程来执行这些不同的任务\",{\"1\":{\"1440\":1}}],[\"可以创建一个customerdaoimpltest用来测试customerdaoimpl\",{\"1\":{\"2409\":1}}],[\"可以创建一个基础控制器basecontroller\",{\"1\":{\"243\":1}}],[\"可以访问相同的变量和对象\",{\"1\":{\"1439\":1}}],[\"可以取多个枚举值\",{\"1\":{\"1412\":1}}],[\"可以通俗的理解为\",{\"1\":{\"1404\":1}}],[\"可以通过设置优先级\",{\"1\":{\"3173\":1}}],[\"可以通过compass直接可视化的查看执行计划\",{\"1\":{\"3119\":1}}],[\"可以通过class类的getdeclaredconstructor\",{\"1\":{\"2038\":1}}],[\"可以通过官网下载独立安装包\",{\"1\":{\"3055\":1}}],[\"可以通过match\",{\"1\":{\"2944\":1}}],[\"可以通过修改配置文件\",{\"1\":{\"2825\":1}}],[\"可以通过手动创建cookie\",{\"1\":{\"2822\":1}}],[\"可以通过请求对象request获取cookie\",{\"1\":{\"2795\":1}}],[\"可以通过以下两种方式获取\",{\"1\":{\"2682\":1}}],[\"可以通过将\",{\"1\":{\"2552\":1}}],[\"可以通过调用\",{\"1\":{\"2316\":1,\"2319\":1,\"2340\":1}}],[\"可以通过下面的几个构造器来初始化一个\",{\"1\":{\"1990\":1}}],[\"可以通过构造方法设置name\",{\"1\":{\"1480\":1}}],[\"可以通过实现类对象来调用\",{\"1\":{\"1269\":1}}],[\"可以通过for循环遍历数组\",{\"1\":{\"974\":1}}],[\"可以通过标签指明要跳过的是哪一层循环\",{\"1\":{\"947\":1}}],[\"可以通过\",{\"1\":{\"171\":1,\"172\":1,\"811\":1,\"1026\":1,\"2141\":1,\"2340\":1,\"3043\":1}}],[\"可以通过application\",{\"1\":{\"150\":1}}],[\"可以像修饰符一样被使用\",{\"1\":{\"1387\":1}}],[\"可以根据单词快速获取包含这个单词的文档列表\",{\"1\":{\"2876\":1}}],[\"可以根据请求头\",{\"1\":{\"2599\":1}}],[\"可以根据需求修改servlet模板\",{\"1\":{\"2541\":1}}],[\"可以根据需要转型\",{\"1\":{\"616\":1}}],[\"可以根据序号存取容器中的元素\",{\"1\":{\"1610\":1}}],[\"可以根据名字判断异常类型\",{\"1\":{\"1363\":1,\"1365\":1}}],[\"可以将额外的mongod实例添加到副本集作为仲裁者\",{\"1\":{\"3132\":1}}],[\"可以将\",{\"1\":{\"2764\":1}}],[\"可以将流中元素反复结合起来\",{\"1\":{\"2239\":1}}],[\"可以将方法名看做是lambda表达式中\",{\"1\":{\"2151\":1}}],[\"可以将该异常throws到调用处\",{\"1\":{\"1361\":1}}],[\"可以将char\",{\"1\":{\"425\":1}}],[\"可以用上比较运算符\",{\"1\":{\"3100\":1}}],[\"可以用来存储限于本地单台服务器的任意集合\",{\"1\":{\"3060\":1}}],[\"可以用来进行搜索\",{\"1\":{\"2963\":1}}],[\"可以用来计算时间差\",{\"1\":{\"633\":1}}],[\"可以用于发送网络消息\",{\"1\":{\"1966\":1,\"1972\":1}}],[\"可以用于接收网络消息\",{\"1\":{\"1966\":1}}],[\"可以用randomaccessfile这个类\",{\"1\":{\"1892\":1}}],[\"可以用\",{\"1\":{\"1797\":1}}],[\"可以用集合取代\",{\"1\":{\"1575\":1}}],[\"可以用arithmeticexception\",{\"1\":{\"1338\":1}}],[\"可以用该异常类作为catch的参数\",{\"1\":{\"1338\":1}}],[\"可以进行样式配置\",{\"1\":{\"2959\":1}}],[\"可以进行数据的共享\",{\"1\":{\"2654\":1}}],[\"可以进行关闭切换其他tomcat模板\",{\"1\":{\"2512\":1}}],[\"可以进行add和其他操作了\",{\"1\":{\"1658\":1}}],[\"可以进行异常的处理\",{\"1\":{\"1323\":1}}],[\"可以进行遍历了\",{\"1\":{\"722\":1}}],[\"可以给静态属性赋值\",{\"1\":{\"1278\":1}}],[\"可以从生命周期的角度去理解\",{\"1\":{\"1236\":1}}],[\"可以从指定的index开始插入另一个集合的数据\",{\"1\":{\"698\":1}}],[\"可以考虑内部类声明为静态的\",{\"1\":{\"1207\":1}}],[\"可以考虑赋值的位置有\",{\"1\":{\"1104\":1}}],[\"可以被abstract修饰\",{\"1\":{\"1206\":1}}],[\"可以被final修饰\",{\"1\":{\"1206\":1}}],[\"可以被4种不同的权限修饰\",{\"1\":{\"1205\":1}}],[\"可以被static修饰\",{\"1\":{\"1205\":1}}],[\"可以转\",{\"1\":{\"1171\":1}}],[\"可以转为true\",{\"1\":{\"423\":1}}],[\"可以自动生成equals重写\",{\"1\":{\"1180\":1}}],[\"可以自动进行\",{\"1\":{\"1165\":1}}],[\"可以自己写递归\",{\"1\":{\"562\":1}}],[\"可以继承genericservlet\",{\"1\":{\"2559\":1}}],[\"可以继承的观点是\",{\"1\":{\"1118\":1}}],[\"可以继续添加非通用的api\",{\"1\":{\"361\":1}}],[\"可以链式继承\",{\"1\":{\"1115\":1}}],[\"可以理解为js\",{\"1\":{\"2109\":1}}],[\"可以理解为应用程序的集合\",{\"1\":{\"1435\":2}}],[\"可以理解为异常的处理方式\",{\"1\":{\"1318\":1}}],[\"可以理解为\",{\"1\":{\"1091\":1,\"1402\":2,\"2689\":1}}],[\"可以调用form和size方法设置分页\",{\"1\":{\"3007\":1}}],[\"可以调用fetchsource方法指定过滤的字段\",{\"1\":{\"2999\":1}}],[\"可以调用size\",{\"1\":{\"3016\":1}}],[\"可以调用sort方法\",{\"1\":{\"3009\":1}}],[\"可以调用son类中的属性了\",{\"1\":{\"1163\":1}}],[\"可以调用son类中独有的方法了\",{\"1\":{\"1163\":1}}],[\"可以调用stream类静态方法\",{\"1\":{\"2200\":1}}],[\"可以调用下面两个方法\",{\"1\":{\"1341\":1}}],[\"可以调用静态方法\",{\"1\":{\"1278\":1}}],[\"可以调用多个接口的\",{\"1\":{\"1270\":1}}],[\"可以调用外部类的结构\",{\"1\":{\"1205\":1}}],[\"可以调用类的属性\",{\"1\":{\"1078\":1}}],[\"可以调用当前类的属性或方法\",{\"1\":{\"1034\":1}}],[\"可以调用compareto方法比较两个digdecimal的数值大小\",{\"1\":{\"537\":1}}],[\"可以return一个表达式\",{\"1\":{\"1029\":1}}],[\"可以静态初始化\",{\"1\":{\"989\":1}}],[\"可以为循环添加label标识符\",{\"1\":{\"946\":1}}],[\"可以为类注入日志对象\",{\"1\":{\"244\":1}}],[\"可以控制循环的执行\",{\"1\":{\"943\":1}}],[\"可以有效描述非结构化数据和结构化数据\",{\"1\":{\"3033\":1}}],[\"可以有不同的方式来实现上述概念模型\",{\"1\":{\"2874\":1}}],[\"可以有class对象的元素\",{\"0\":{\"2016\":1}}],[\"可以有返回值\",{\"1\":{\"1559\":1}}],[\"可以有若干个\",{\"1\":{\"1402\":1}}],[\"可以有多个排序字段\",{\"1\":{\"2951\":1}}],[\"可以有多个属性\",{\"1\":{\"1392\":1}}],[\"可以有多个变量更新\",{\"1\":{\"931\":1}}],[\"可以有第二个参数\",{\"1\":{\"409\":1}}],[\"可以利用省略break的特性\",{\"1\":{\"928\":1}}],[\"可以把这个数值配置大一些\",{\"1\":{\"2426\":1}}],[\"可以把数组看做是一个特殊的类\",{\"1\":{\"2181\":1}}],[\"可以把一个用户线程变成一个守护线程\",{\"1\":{\"1463\":1}}],[\"可以把一个字符串转为对应的枚举类对象\",{\"1\":{\"1379\":1}}],[\"可以把接口当做工具类使用\",{\"1\":{\"1272\":1}}],[\"可以把语句组合成能完成一定功能的小逻辑模块\",{\"1\":{\"917\":1}}],[\"可以把正则表达式字符串编译成pattern对象\",{\"1\":{\"745\":1}}],[\"可以1个是空格\",{\"1\":{\"856\":1}}],[\"可以写多行\",{\"1\":{\"807\":1}}],[\"可以匹配一切字符\",{\"1\":{\"749\":1}}],[\"可以遍历了\",{\"1\":{\"721\":1}}],[\"可以迭代value\",{\"1\":{\"710\":1}}],[\"可以迭代key\",{\"1\":{\"710\":1}}],[\"可以比较值\",{\"1\":{\"662\":1}}],[\"可以正常比较值\",{\"1\":{\"662\":1}}],[\"可以正常查询\",{\"1\":{\"275\":1}}],[\"可以定义成内部类\",{\"1\":{\"645\":1}}],[\"可以当做读取数据的载体\",{\"1\":{\"567\":1}}],[\"可以表示不可变的任意精度的整数\",{\"1\":{\"529\":1}}],[\"可以省略驱动的注册\",{\"1\":{\"2300\":1}}],[\"可以省略初始值\",{\"1\":{\"2240\":1}}],[\"可以省略return\",{\"1\":{\"2116\":1}}],[\"可以省略abstract\",{\"1\":{\"1259\":1}}],[\"可以省略public\",{\"1\":{\"1259\":1}}],[\"可以省略循环体种的一些元素\",{\"1\":{\"938\":1}}],[\"可以省略的\",{\"1\":{\"923\":1}}],[\"可以省略\",{\"1\":{\"501\":1,\"1400\":1,\"2115\":1,\"2116\":1}}],[\"可以省略第二个参数\",{\"1\":{\"421\":1}}],[\"可以是索引名\",{\"1\":{\"3116\":1}}],[\"可以是1个或多个查询条件\",{\"1\":{\"2935\":1}}],[\"可以是文件对象\",{\"1\":{\"1885\":1}}],[\"可以是\",{\"1\":{\"538\":1,\"1767\":1}}],[\"可以是任意能转为string的数据类型\",{\"1\":{\"455\":1}}],[\"可以是各种能自动转为string的数据类型\",{\"1\":{\"452\":1}}],[\"可以额外指定两个范围参数\",{\"1\":{\"452\":1}}],[\"可以直接指定\",{\"1\":{\"3080\":1}}],[\"可以直接输入命令\",{\"1\":{\"3057\":1}}],[\"可以直接连接\",{\"1\":{\"3056\":1}}],[\"可以直接进行iterate遍历getheadernames方法的结果\",{\"1\":{\"2602\":1}}],[\"可以直接获取打包后可以部署的项目目录\",{\"1\":{\"2479\":1}}],[\"可以直接替换\",{\"1\":{\"2162\":1}}],[\"可以直接使用第三方封装好的io流操作包\",{\"1\":{\"1921\":1}}],[\"可以直接使用collection\",{\"1\":{\"496\":1}}],[\"可以直接通过uri进行连接\",{\"1\":{\"3237\":1}}],[\"可以直接通过数组名\",{\"1\":{\"972\":1}}],[\"可以直接通过下标\",{\"1\":{\"961\":1}}],[\"可以直接在编辑器里运行\",{\"1\":{\"794\":1}}],[\"可以直接查看该类的注释来使用正则语法\",{\"1\":{\"736\":1,\"738\":1}}],[\"可以直接调用compareto比较大小\",{\"1\":{\"525\":1}}],[\"可以直接下载\",{\"1\":{\"391\":1}}],[\"可以直接复制使用\",{\"1\":{\"336\":1}}],[\"可以点击basemapper查看具体有哪些api可以掉用\",{\"1\":{\"346\":1}}],[\"可以点x取消\",{\"1\":{\"72\":1}}],[\"可以对整个集群或数据库系统进行管理操作\",{\"1\":{\"3190\":1}}],[\"可以对\",{\"1\":{\"2735\":1}}],[\"可以对具体runnable\",{\"1\":{\"1560\":1}}],[\"可以对字符串内容进行增删\",{\"1\":{\"438\":1}}],[\"可以对餐厅的菜品\",{\"1\":{\"396\":1}}],[\"可以对将要生成的代码的模板进行配置\",{\"1\":{\"312\":1}}],[\"可以对基本的日志策略进行配置\",{\"1\":{\"258\":1}}],[\"可以在指定数据库创建和修改用户\",{\"1\":{\"3190\":2}}],[\"可以在ﬁnd方法后调用limit来返回结果\",{\"1\":{\"3096\":1}}],[\"可以在添加数据时\",{\"1\":{\"2902\":1}}],[\"可以在转发资源间使用request共享数据\",{\"1\":{\"2656\":1}}],[\"可以在范围内共享数据\",{\"1\":{\"2653\":1,\"2671\":1,\"2688\":1}}],[\"可以在中间接filter\",{\"1\":{\"2234\":1}}],[\"可以在java层面对nosql数据进行类似sql的操作\",{\"1\":{\"2187\":1}}],[\"可以在网络上查找相应的文件或其他资源\",{\"1\":{\"1988\":1}}],[\"可以在实例化时传递一个数据类型\",{\"1\":{\"1698\":1}}],[\"可以在任何需要的场景下调用\",{\"1\":{\"1555\":1}}],[\"可以在调用处\",{\"1\":{\"1361\":1}}],[\"可以在创建对象时\",{\"1\":{\"1280\":1}}],[\"可以在创建项目时\",{\"1\":{\"280\":1}}],[\"可以在方法中\",{\"1\":{\"1048\":1}}],[\"可以在声明属性时\",{\"1\":{\"1025\":1}}],[\"可以在注释里写html标签\",{\"1\":{\"808\":1}}],[\"可以在有main方法的类中\",{\"1\":{\"803\":1}}],[\"可以在各个平台运行\",{\"1\":{\"765\":1}}],[\"可以在键盘输入字符\",{\"1\":{\"639\":1,\"760\":1}}],[\"可以在线浏览菜品\",{\"1\":{\"396\":1}}],[\"可以在配置文件中\",{\"1\":{\"252\":1}}],[\"可以去修改mysql中的配置文件mysql\",{\"1\":{\"277\":1}}],[\"可以选择手动配置\",{\"1\":{\"3042\":1}}],[\"可以选择给变量一个初始化值\",{\"1\":{\"1022\":1}}],[\"可以选择在放在后端的resource目录中部署\",{\"1\":{\"391\":1}}],[\"可以选择使用druid连接池进行连接\",{\"1\":{\"270\":1}}],[\"可以选择其他方式创建\",{\"1\":{\"73\":1}}],[\"可以包含零个或多个appender元素\",{\"1\":{\"262\":1}}],[\"可以输出项目中的debug日志\",{\"1\":{\"262\":1}}],[\"可以使\",{\"1\":{\"262\":1}}],[\"可以使用任何方法生成密钥文件\",{\"1\":{\"3212\":1}}],[\"可以使用limit\",{\"1\":{\"3096\":1}}],[\"可以使用try\",{\"1\":{\"3078\":1}}],[\"可以使用方法动态获取虚拟路径\",{\"1\":{\"2668\":1}}],[\"可以使用方法引用\",{\"1\":{\"2149\":1}}],[\"可以使用request对象来共享数据\",{\"1\":{\"2665\":1}}],[\"可以使用return将修改后的数据返回\",{\"1\":{\"1044\":1}}],[\"可以使用configfilter\",{\"1\":{\"2426\":1}}],[\"可以使用批处理的方式\",{\"1\":{\"2374\":1}}],[\"可以使用此对象多次高效地执行该语句\",{\"1\":{\"2308\":1}}],[\"可以使用反射\",{\"1\":{\"2298\":1}}],[\"可以使用静态方法\",{\"1\":{\"2201\":1}}],[\"可以使用数据流\",{\"1\":{\"1874\":1}}],[\"可以使用泛型\",{\"1\":{\"1728\":1}}],[\"可以使用包装类替换\",{\"1\":{\"1721\":1}}],[\"可以使用get\",{\"1\":{\"1480\":1}}],[\"可以使用针对性的代码进行处理\",{\"1\":{\"1313\":1}}],[\"可以使用代码块进行\",{\"1\":{\"1281\":1}}],[\"可以使用在基本数据类型变量和引用数据类型变量中\",{\"1\":{\"1178\":1}}],[\"可以使用在switch\",{\"1\":{\"927\":1}}],[\"可以使用\",{\"1\":{\"1080\":1,\"1094\":1,\"3084\":1}}],[\"可以使用for循环创建\",{\"1\":{\"1018\":1}}],[\"可以使用第二个参数flags指明模式修饰符\",{\"1\":{\"748\":1}}],[\"可以使用生成的模式创建matcher对象\",{\"1\":{\"739\":1}}],[\"可以使用iterator接口或增强for循环遍历了\",{\"1\":{\"721\":1}}],[\"可以使用idea的设置进行自动隐藏\",{\"1\":{\"79\":1}}],[\"可以使用arrays\",{\"1\":{\"696\":1}}],[\"可以使用withxxx单独设置某个时间维度的时间\",{\"1\":{\"472\":1}}],[\"可以使用一个工具\",{\"1\":{\"344\":1}}],[\"可以使用双引号包裹\",{\"1\":{\"123\":1}}],[\"可以使用父工程的pom\",{\"1\":{\"91\":1}}],[\"可以拼接任意普通字符串\",{\"1\":{\"253\":1}}],[\"可以精确到某个包的日志等级\",{\"1\":{\"249\":1}}],[\"可以手动设置为\",{\"1\":{\"2940\":1}}],[\"可以手动设置cookie的存活时间\",{\"1\":{\"2805\":1}}],[\"可以手动销毁session\",{\"1\":{\"2826\":1}}],[\"可以手动加\",{\"1\":{\"346\":1}}],[\"可以手动导入该starter\",{\"1\":{\"179\":1}}],[\"可以手动指定版本号\",{\"1\":{\"76\":1}}],[\"可以提高配置的层级\",{\"1\":{\"153\":1}}],[\"可以成功获取\",{\"1\":{\"132\":1}}],[\"可选参数\",{\"1\":{\"1011\":1}}],[\"可选\",{\"0\":{\"347\":1},\"1\":{\"11\":1,\"414\":1,\"753\":1,\"1029\":1,\"1568\":1,\"3072\":2,\"3081\":4,\"3090\":2,\"3095\":1,\"3111\":1,\"3152\":1,\"3159\":1,\"3193\":1}}],[\"可略过\",{\"1\":{\"11\":1}}],[\"gt\",{\"1\":{\"2938\":1,\"3002\":1}}],[\"gte\",{\"1\":{\"2930\":1,\"2938\":1,\"3002\":2,\"3003\":1}}],[\"gz\",{\"1\":{\"2452\":1}}],[\"gmail\",{\"1\":{\"2325\":1}}],[\"gmt+08\",{\"1\":{\"1185\":1}}],[\"gb2312\",{\"1\":{\"1861\":1}}],[\"gbk等双字节编码方式\",{\"1\":{\"1861\":1}}],[\"gbk\",{\"1\":{\"426\":4,\"1858\":2,\"1861\":1}}],[\"g<\",{\"1\":{\"1741\":1}}],[\"g<a>和g<b>是没有关系的\",{\"1\":{\"1741\":1}}],[\"g<b>并不是g<a>的子类型\",{\"1\":{\"1737\":1}}],[\"girl\",{\"1\":{\"1432\":4,\"1836\":2,\"2364\":1}}],[\"github\",{\"1\":{\"2846\":2}}],[\"github页\",{\"1\":{\"2423\":1}}],[\"gitignore文件\",{\"1\":{\"302\":1}}],[\"gitignore\",{\"0\":{\"302\":1}}],[\"git\",{\"0\":{\"40\":1},\"1\":{\"10\":1}}],[\"google公司著名的guava项目引入了optional类\",{\"1\":{\"2248\":1}}],[\"google用它来进行网络搜索而出名\",{\"1\":{\"2241\":1}}],[\"google\",{\"1\":{\"1941\":1,\"1945\":2,\"2848\":1}}],[\"goods\",{\"1\":{\"2371\":1,\"2372\":1,\"2373\":1,\"2376\":1,\"2377\":1}}],[\"good\",{\"1\":{\"811\":1,\"1813\":1,\"1816\":1,\"3073\":1,\"3168\":1}}],[\"gof给迭代器模式\",{\"1\":{\"1587\":1}}],[\"goto\",{\"1\":{\"832\":1}}],[\"guava的启发\",{\"1\":{\"2248\":1}}],[\"guava通过使用检查空值的方式来防止代码污染\",{\"1\":{\"2248\":1}}],[\"gui\",{\"1\":{\"771\":1,\"1090\":1}}],[\"gulixueyuan\",{\"1\":{\"2907\":1,\"2908\":2,\"2925\":1,\"2926\":2}}],[\"guli\",{\"1\":{\"262\":2}}],[\"gc\",{\"0\":{\"635\":1},\"1\":{\"635\":1,\"1441\":1}}],[\"gcd\",{\"1\":{\"529\":1}}],[\"gg\",{\"1\":{\"508\":3,\"1606\":2,\"1607\":1}}],[\"g\",{\"1\":{\"429\":1}}],[\"global\",{\"1\":{\"341\":1,\"348\":1,\"390\":1}}],[\"geospatial\",{\"1\":{\"3107\":1}}],[\"gender\",{\"1\":{\"2964\":1,\"2965\":1,\"2981\":1,\"2983\":1,\"2986\":3,\"2991\":1,\"2992\":4,\"2993\":2,\"2997\":2,\"3003\":2,\"3006\":3,\"3008\":2,\"3011\":4,\"3019\":1}}],[\"gender和tel\",{\"1\":{\"2964\":1}}],[\"gentest<k\",{\"1\":{\"1715\":1}}],[\"generictypeclass<\",{\"1\":{\"1756\":1}}],[\"generictest\",{\"1\":{\"1747\":2,\"1748\":2}}],[\"genericclass<e>\",{\"1\":{\"1717\":1}}],[\"genericclass\",{\"1\":{\"1717\":1}}],[\"generic\",{\"0\":{\"1697\":1}}],[\"genericservlet将servlet接口中其他的方法做了默认空实现\",{\"1\":{\"2559\":1}}],[\"genericservlet抽象类\",{\"0\":{\"2559\":1},\"1\":{\"2558\":1}}],[\"generics\",{\"1\":{\"1430\":1}}],[\"genericsuperclass\",{\"1\":{\"594\":2,\"2052\":2,\"2053\":2,\"2405\":2}}],[\"genericdeclaration\",{\"1\":{\"584\":1}}],[\"generate\",{\"1\":{\"2201\":1,\"2203\":2}}],[\"generated\",{\"1\":{\"302\":1,\"2435\":2,\"2511\":1}}],[\"generator\",{\"1\":{\"312\":1}}],[\"gen\",{\"1\":{\"302\":1}}],[\"getwriter\",{\"1\":{\"2637\":1,\"2639\":1,\"2640\":1,\"2642\":1}}],[\"get请求获取请求参数的方式是request\",{\"1\":{\"2631\":1}}],[\"get请求就返回\",{\"1\":{\"2597\":1}}],[\"get方式\",{\"1\":{\"2612\":1}}],[\"get方式的处理逻辑\",{\"1\":{\"2566\":1}}],[\"gethits\",{\"1\":{\"2992\":1,\"2993\":1,\"2997\":1,\"3000\":1,\"3003\":1,\"3006\":1,\"3008\":1,\"3010\":1,\"3019\":1}}],[\"getheadernames\",{\"1\":{\"2602\":2}}],[\"getheader\",{\"0\":{\"2600\":1},\"1\":{\"2600\":1,\"2601\":2}}],[\"gethost\",{\"1\":{\"1991\":1}}],[\"gethostname\",{\"0\":{\"1947\":1},\"1\":{\"1947\":2}}],[\"gethostaddress\",{\"0\":{\"1946\":1},\"1\":{\"1946\":2}}],[\"gethour\",{\"1\":{\"471\":1}}],[\"getforlist\",{\"1\":{\"2356\":1,\"2400\":1,\"2405\":2,\"2408\":1}}],[\"getfile\",{\"1\":{\"1991\":1}}],[\"getfilename\",{\"1\":{\"1918\":1}}],[\"getfilepointer\",{\"1\":{\"1883\":1}}],[\"getfilepointer方法\",{\"0\":{\"1883\":1}}],[\"getfield\",{\"0\":{\"606\":1,\"2059\":1},\"1\":{\"606\":2,\"2059\":1}}],[\"getfields\",{\"0\":{\"604\":1,\"2041\":1},\"1\":{\"604\":2,\"2041\":1}}],[\"getgradelist\",{\"1\":{\"2221\":1,\"2223\":1}}],[\"getgenericsuperclass\",{\"0\":{\"594\":1,\"2052\":1},\"1\":{\"594\":2,\"2052\":1,\"2053\":1,\"2405\":1}}],[\"getobject\",{\"1\":{\"2352\":1,\"2355\":1,\"2405\":3}}],[\"getobj\",{\"1\":{\"2005\":1}}],[\"getoutputstream\",{\"1\":{\"1966\":1,\"1969\":1,\"1972\":1,\"1973\":1,\"1994\":1,\"2637\":1,\"2645\":1,\"2646\":1,\"2647\":1,\"2648\":1}}],[\"getquerystring\",{\"1\":{\"2597\":1,\"2598\":1,\"2612\":1,\"2614\":1,\"2631\":1}}],[\"getquery\",{\"1\":{\"1991\":1}}],[\"getlasterrordefaults\",{\"1\":{\"3153\":1}}],[\"getlasterrormodes\",{\"1\":{\"3153\":1}}],[\"getlastmodified\",{\"1\":{\"1994\":1}}],[\"getlength\",{\"1\":{\"1984\":1,\"1986\":1}}],[\"getlocalport\",{\"1\":{\"1966\":1,\"1985\":1}}],[\"getlocaladdress\",{\"1\":{\"1966\":1,\"1985\":1}}],[\"getlocalhost\",{\"0\":{\"1944\":1},\"1\":{\"1944\":2}}],[\"getlogger\",{\"1\":{\"242\":1}}],[\"getroot\",{\"1\":{\"1918\":1}}],[\"getrealpath\",{\"0\":{\"2692\":1},\"1\":{\"2692\":1,\"2694\":3}}],[\"getreader\",{\"1\":{\"2607\":1,\"2610\":1,\"2612\":1,\"2614\":1,\"2631\":1}}],[\"getrequest\",{\"1\":{\"2991\":3}}],[\"getrequestdispatcher\",{\"1\":{\"2652\":2,\"2655\":1}}],[\"getrequesturi\",{\"1\":{\"2597\":1,\"2598\":1}}],[\"getrequesturl\",{\"1\":{\"2597\":1,\"2598\":1}}],[\"getremoteaddr\",{\"1\":{\"2597\":1,\"2598\":1}}],[\"getresponse\",{\"1\":{\"2991\":1}}],[\"getresult\",{\"1\":{\"2980\":1,\"2983\":1,\"2984\":1}}],[\"getresultset\",{\"1\":{\"2323\":1}}],[\"getresourceasstream\",{\"0\":{\"2033\":1},\"1\":{\"2033\":1,\"2034\":1,\"2303\":1,\"2325\":1,\"2327\":1,\"2424\":1,\"2427\":1}}],[\"getreturntype\",{\"0\":{\"622\":1},\"1\":{\"622\":2,\"2048\":2}}],[\"getrecords\",{\"1\":{\"352\":1}}],[\"getemail\",{\"1\":{\"2408\":2}}],[\"getemployees\",{\"1\":{\"2210\":1,\"2211\":1,\"2212\":1,\"2213\":1,\"2229\":1,\"2230\":1,\"2232\":1,\"2233\":1}}],[\"getencoding\",{\"0\":{\"1851\":1},\"1\":{\"1851\":2}}],[\"getexceptiontypes\",{\"0\":{\"625\":1},\"1\":{\"625\":2,\"2048\":2}}],[\"getupdatecount\",{\"1\":{\"2323\":1}}],[\"getuname\",{\"1\":{\"1732\":1}}],[\"getuser\",{\"1\":{\"1153\":2}}],[\"getnum\",{\"1\":{\"1133\":1,\"1520\":2}}],[\"getnation\",{\"1\":{\"1233\":1,\"1234\":1}}],[\"getnano\",{\"1\":{\"471\":1}}],[\"getnamecount\",{\"1\":{\"1918\":1}}],[\"getname\",{\"0\":{\"542\":1,\"592\":1,\"615\":1,\"623\":1},\"1\":{\"356\":1,\"357\":2,\"360\":3,\"371\":2,\"542\":2,\"592\":2,\"615\":2,\"623\":2,\"624\":1,\"1184\":1,\"1472\":2,\"1473\":1,\"1479\":1,\"1480\":1,\"1489\":2,\"1492\":1,\"1509\":1,\"1512\":1,\"1520\":1,\"1536\":1,\"1556\":1,\"1562\":1,\"1569\":1,\"1918\":1,\"2007\":1,\"2045\":3,\"2048\":7,\"2053\":1,\"2158\":1,\"2159\":2,\"2167\":1,\"2168\":1,\"2231\":1,\"2408\":2,\"2717\":1,\"2718\":1,\"2719\":1,\"2720\":1,\"2796\":2,\"2799\":1}}],[\"getvalue\",{\"1\":{\"723\":1,\"1687\":1,\"1710\":1,\"2400\":1,\"2405\":2,\"2408\":2,\"2717\":1,\"2718\":1,\"2719\":1,\"2720\":1,\"2796\":2,\"2799\":1}}],[\"getkey\",{\"1\":{\"723\":1,\"1687\":1,\"1710\":1}}],[\"getid\",{\"1\":{\"2408\":1,\"2819\":1,\"2822\":1}}],[\"getiq\",{\"1\":{\"1106\":1}}],[\"getindexes\",{\"1\":{\"3109\":3,\"3112\":1,\"3113\":1}}],[\"getindexresponse\",{\"1\":{\"2977\":1}}],[\"getindexrequest\",{\"1\":{\"2977\":2}}],[\"getint\",{\"1\":{\"2349\":1,\"2365\":1,\"2442\":1}}],[\"getinterfaces\",{\"0\":{\"595\":1,\"2054\":1},\"1\":{\"595\":2,\"2054\":2,\"2094\":1}}],[\"getinetaddress\",{\"1\":{\"1966\":1,\"1985\":1}}],[\"getinputstream\",{\"1\":{\"1966\":1,\"1969\":1,\"1973\":1,\"1977\":1,\"1994\":1,\"2606\":1}}],[\"getinstance\",{\"1\":{\"1240\":3,\"1241\":1,\"1521\":2,\"2004\":2,\"2355\":1,\"2391\":1,\"2400\":1,\"2405\":2,\"2408\":1}}],[\"getinfo\",{\"1\":{\"1039\":3,\"1155\":2,\"1156\":1}}],[\"getitems\",{\"1\":{\"2986\":1,\"2987\":1}}],[\"getit\",{\"1\":{\"85\":1}}],[\"getcustomerbyid\",{\"1\":{\"2407\":1,\"2408\":1,\"2409\":1,\"2428\":1}}],[\"getcurrent\",{\"1\":{\"352\":1}}],[\"getcookies\",{\"1\":{\"2795\":2,\"2799\":1}}],[\"getcount\",{\"1\":{\"2407\":1,\"2408\":1,\"2409\":1}}],[\"getcolumndisplaysize\",{\"1\":{\"2345\":1}}],[\"getcolumntypename\",{\"1\":{\"2345\":1}}],[\"getcolumncount\",{\"1\":{\"2345\":1,\"2352\":1,\"2355\":1,\"2405\":2}}],[\"getcolumnlabel代替\",{\"1\":{\"2354\":1}}],[\"getcolumnlabel\",{\"1\":{\"2345\":1,\"2352\":1,\"2355\":1,\"2405\":2}}],[\"getcolumnname\",{\"1\":{\"2345\":1,\"2354\":1}}],[\"getcomparable\",{\"1\":{\"1210\":1}}],[\"getcontextpath\",{\"1\":{\"2597\":1,\"2598\":1,\"2668\":1}}],[\"getcontenttype\",{\"1\":{\"1994\":1}}],[\"getcontentlength\",{\"1\":{\"1994\":1}}],[\"getcontent\",{\"1\":{\"1994\":1}}],[\"getconstructor\",{\"1\":{\"2009\":1}}],[\"getconstructors\",{\"0\":{\"600\":1},\"1\":{\"600\":2,\"2050\":2}}],[\"getconnection3\",{\"1\":{\"2427\":1,\"2428\":1,\"2438\":1,\"2439\":1,\"2440\":1,\"2441\":1,\"2442\":1,\"2443\":1}}],[\"getconnection\",{\"1\":{\"2299\":1,\"2300\":1,\"2303\":1,\"2319\":1,\"2325\":1,\"2327\":2,\"2329\":1,\"2333\":1,\"2349\":1,\"2352\":1,\"2355\":1,\"2364\":1,\"2365\":1,\"2372\":1,\"2373\":1,\"2376\":1,\"2377\":1,\"2387\":1,\"2391\":1,\"2404\":1,\"2409\":7,\"2424\":2,\"2427\":1}}],[\"getconnect\",{\"1\":{\"1153\":1}}],[\"getclassloader\",{\"0\":{\"596\":1},\"1\":{\"589\":1,\"596\":2,\"597\":1,\"2021\":1,\"2032\":2,\"2034\":1,\"2094\":1,\"2303\":1}}],[\"getclass\",{\"1\":{\"587\":1,\"589\":1,\"1176\":1,\"1180\":2,\"1184\":1,\"2019\":1,\"2021\":1,\"2037\":1,\"2094\":2,\"2405\":1}}],[\"getaliases\",{\"1\":{\"2977\":1}}],[\"getall\",{\"1\":{\"347\":1,\"359\":1,\"364\":1,\"371\":1,\"2407\":1,\"2408\":1,\"2409\":1}}],[\"getattribute\",{\"1\":{\"2654\":1,\"2655\":1,\"2672\":2,\"2678\":1,\"2690\":2,\"2817\":1}}],[\"getactualtypearguments\",{\"0\":{\"2053\":1},\"1\":{\"2053\":1,\"2405\":1}}],[\"getaddress\",{\"1\":{\"1984\":1,\"1986\":1}}],[\"getannotation\",{\"1\":{\"1432\":1}}],[\"getannotations\",{\"0\":{\"620\":1,\"2056\":1},\"1\":{\"620\":2,\"1432\":1,\"2048\":2,\"2056\":1}}],[\"getabsolutepath\",{\"0\":{\"540\":1},\"1\":{\"540\":2}}],[\"getage\",{\"1\":{\"509\":6,\"1056\":2,\"1120\":3,\"1286\":1,\"1658\":2,\"1688\":2,\"2221\":1,\"2222\":1,\"2223\":1,\"2227\":2,\"2229\":1}}],[\"getsourceasstring\",{\"1\":{\"2991\":1,\"2992\":1,\"3000\":1,\"3003\":1,\"3006\":1,\"3008\":1,\"3010\":1}}],[\"getstring\",{\"1\":{\"2349\":2,\"2365\":2,\"2442\":2}}],[\"getstulist\",{\"1\":{\"2221\":1,\"2222\":1,\"2227\":1}}],[\"getsystemclassloader\",{\"1\":{\"2325\":1,\"2327\":1,\"2424\":1,\"2427\":1}}],[\"getsalary\",{\"1\":{\"2210\":1,\"2230\":1,\"2235\":1,\"2236\":2,\"2241\":1,\"2243\":2}}],[\"getsettings\",{\"1\":{\"2977\":1}}],[\"getsession\",{\"1\":{\"2675\":2,\"2676\":1,\"2718\":1,\"2720\":1,\"2814\":2,\"2820\":1}}],[\"getservletrequest\",{\"1\":{\"2719\":1}}],[\"getservletcontext\",{\"1\":{\"2682\":4,\"2686\":1,\"2690\":1,\"2694\":1,\"2717\":1}}],[\"getservletconfig\",{\"0\":{\"2556\":1},\"1\":{\"2551\":1,\"2556\":2}}],[\"getservletpath\",{\"1\":{\"2597\":1,\"2598\":1}}],[\"getservletinfo\",{\"0\":{\"2555\":1},\"1\":{\"2551\":1,\"2555\":2}}],[\"getseasondesc\",{\"1\":{\"1373\":1,\"1374\":1}}],[\"getseasonname\",{\"1\":{\"1373\":1,\"1374\":1}}],[\"getsecond\",{\"1\":{\"471\":1}}],[\"getsum\",{\"1\":{\"1035\":2}}],[\"getsuperclass\",{\"0\":{\"593\":1,\"2051\":1},\"1\":{\"593\":2,\"2051\":1,\"2054\":1}}],[\"getsize\",{\"1\":{\"352\":1}}],[\"getdate\",{\"1\":{\"1994\":1,\"2349\":1,\"2365\":1,\"2442\":1}}],[\"getdata\",{\"1\":{\"1984\":1,\"1986\":1}}],[\"getdayofyear\",{\"1\":{\"471\":1}}],[\"getdayofmonth\",{\"1\":{\"471\":1}}],[\"getdeclaredmethod\",{\"0\":{\"611\":1,\"2064\":1},\"1\":{\"611\":2,\"626\":1,\"2009\":1,\"2010\":1,\"2063\":2,\"2064\":1}}],[\"getdeclaredmethods\",{\"0\":{\"609\":1},\"1\":{\"609\":2,\"2047\":2,\"2048\":1}}],[\"getdeclaredfield\",{\"0\":{\"607\":1},\"1\":{\"607\":2,\"616\":1,\"617\":1,\"2009\":1,\"2010\":1,\"2058\":2,\"2060\":1,\"2352\":1,\"2355\":1,\"2405\":2}}],[\"getdeclaredfields\",{\"1\":{\"605\":2,\"2043\":1,\"2045\":1}}],[\"getdeclaredconstructor\",{\"0\":{\"602\":1,\"2038\":1,\"2068\":1},\"1\":{\"602\":2,\"629\":1,\"2010\":1,\"2038\":1,\"2067\":1}}],[\"getdeclaredconstructors\",{\"0\":{\"601\":1},\"1\":{\"601\":2,\"2050\":2}}],[\"getdeclarefields\",{\"0\":{\"605\":1,\"2043\":1}}],[\"getdescription\",{\"1\":{\"360\":3}}],[\"getmimetype\",{\"0\":{\"2686\":1},\"1\":{\"2686\":1}}],[\"getminute\",{\"1\":{\"471\":1}}],[\"getmaxbirth\",{\"1\":{\"2407\":1,\"2408\":1,\"2409\":1}}],[\"getmappings\",{\"1\":{\"2977\":1}}],[\"getmapping\",{\"1\":{\"85\":1,\"242\":1,\"244\":1,\"263\":1,\"364\":3,\"371\":3}}],[\"getmetadata\",{\"1\":{\"2344\":1,\"2352\":1,\"2355\":1,\"2405\":2}}],[\"getmethod\",{\"0\":{\"610\":1,\"2065\":1},\"1\":{\"610\":2,\"620\":1,\"1432\":2,\"2065\":1,\"2566\":1,\"2597\":1,\"2598\":1,\"2614\":1}}],[\"getmethods\",{\"0\":{\"608\":1},\"1\":{\"608\":2,\"2047\":2}}],[\"getmessage\",{\"1\":{\"1339\":1,\"1341\":1,\"1361\":1}}],[\"getmoreresults\",{\"1\":{\"2323\":1}}],[\"getmodifiers\",{\"0\":{\"621\":1},\"1\":{\"613\":2,\"621\":2,\"2045\":1,\"2048\":2}}],[\"getmodifier\",{\"0\":{\"613\":1},\"1\":{\"2045\":1}}],[\"getmonthvalue\",{\"1\":{\"471\":1}}],[\"getyear\",{\"1\":{\"471\":1}}],[\"getxxx\",{\"0\":{\"471\":1,\"2343\":1},\"1\":{\"1057\":1,\"1058\":1,\"1064\":1,\"2340\":2,\"2343\":1}}],[\"getport\",{\"1\":{\"1966\":1,\"1985\":1,\"1986\":1,\"1991\":1}}],[\"getproxyinstance\",{\"1\":{\"2094\":1,\"2096\":1,\"2097\":1}}],[\"getprotocol\",{\"1\":{\"1991\":1,\"2597\":1,\"2598\":1}}],[\"getpropertyaction\",{\"1\":{\"1831\":1}}],[\"getproperty\",{\"0\":{\"636\":1},\"1\":{\"128\":3,\"636\":8,\"1691\":1,\"1692\":2,\"1767\":1,\"2034\":2,\"2303\":4,\"2325\":4,\"2327\":4}}],[\"getpriority\",{\"1\":{\"1487\":1,\"1489\":2}}],[\"getparameternames\",{\"1\":{\"2621\":2}}],[\"getparameter\",{\"1\":{\"2621\":2,\"2624\":2,\"2625\":1,\"2630\":1}}],[\"getparametervalues\",{\"1\":{\"2621\":2,\"2624\":1}}],[\"getparametermap\",{\"1\":{\"2621\":2,\"2624\":1}}],[\"getparametertypes\",{\"0\":{\"624\":1},\"1\":{\"624\":2,\"2048\":2}}],[\"getparent\",{\"0\":{\"543\":1,\"597\":1},\"1\":{\"543\":2,\"597\":3,\"1918\":1,\"2032\":2}}],[\"getpackage\",{\"0\":{\"598\":1,\"2055\":1},\"1\":{\"598\":2,\"2055\":1}}],[\"getpath\",{\"0\":{\"541\":1},\"1\":{\"541\":2,\"1991\":1}}],[\"getpage\",{\"1\":{\"359\":1,\"360\":2,\"364\":2,\"371\":3}}],[\"getpages\",{\"1\":{\"352\":1,\"371\":2}}],[\"gettook\",{\"1\":{\"2986\":1,\"2987\":1}}],[\"gettotal\",{\"1\":{\"352\":1}}],[\"gettransactionisolation\",{\"0\":{\"2389\":1},\"1\":{\"2389\":1,\"2391\":1}}],[\"gettime\",{\"1\":{\"2322\":1,\"2325\":1}}],[\"gettype\",{\"0\":{\"614\":1},\"1\":{\"360\":3,\"614\":2,\"2045\":2}}],[\"getter\",{\"1\":{\"131\":1,\"156\":1,\"2981\":1}}],[\"get\",{\"0\":{\"616\":1,\"699\":1,\"715\":1,\"2259\":1},\"1\":{\"288\":2,\"289\":2,\"616\":2,\"617\":1,\"699\":3,\"715\":3,\"727\":1,\"1282\":1,\"1561\":1,\"1562\":1,\"1745\":1,\"1916\":1,\"1919\":3,\"2058\":1,\"2061\":1,\"2144\":1,\"2158\":1,\"2159\":1,\"2173\":1,\"2174\":1,\"2259\":2,\"2310\":1,\"2563\":2,\"2564\":1,\"2566\":1,\"2597\":1,\"2598\":1,\"2614\":1,\"2623\":1,\"2624\":1,\"2888\":1,\"2892\":1,\"2905\":1,\"2906\":1,\"2908\":1,\"2923\":1,\"2924\":1,\"2926\":1,\"2928\":1,\"2949\":1,\"2952\":1,\"2954\":1,\"2955\":1,\"2977\":1,\"2991\":1}}],[\"getbirth\",{\"1\":{\"2408\":2}}],[\"getbinarystream\",{\"1\":{\"2365\":1}}],[\"getblob\",{\"1\":{\"2363\":1,\"2365\":1}}],[\"getbelief\",{\"1\":{\"2096\":1,\"2097\":1}}],[\"getbelif\",{\"1\":{\"2096\":1}}],[\"getbean\",{\"1\":{\"104\":1}}],[\"getbyname\",{\"0\":{\"1945\":1},\"1\":{\"1945\":3,\"1946\":1,\"1947\":1,\"1948\":1,\"1983\":1}}],[\"getbytes\",{\"0\":{\"426\":1},\"1\":{\"426\":3,\"1891\":1,\"1972\":1,\"1983\":1,\"2648\":1}}],[\"getbyid\",{\"1\":{\"242\":1,\"244\":1,\"263\":1,\"274\":1,\"275\":1,\"359\":1,\"364\":2,\"371\":2}}],[\"grow\",{\"1\":{\"1034\":3}}],[\"groups\",{\"1\":{\"755\":1}}],[\"group中配置各个组环境组\",{\"1\":{\"234\":1}}],[\"groupid>\",{\"1\":{\"76\":1,\"93\":1,\"94\":1,\"95\":5,\"99\":5,\"110\":2,\"111\":1,\"141\":1,\"165\":1,\"174\":2,\"179\":1,\"193\":1,\"266\":1,\"270\":3,\"280\":3,\"286\":1,\"292\":1,\"316\":1,\"317\":1,\"318\":1,\"319\":1,\"321\":1,\"322\":1,\"323\":1,\"324\":1,\"326\":1,\"328\":1,\"330\":1,\"331\":1,\"332\":1,\"333\":1,\"335\":2,\"336\":12,\"344\":1,\"389\":9,\"2837\":1,\"2971\":2,\"2982\":1,\"3229\":1,\"3234\":1}}],[\"group\",{\"0\":{\"234\":1},\"1\":{\"71\":1,\"234\":1,\"249\":1,\"738\":1,\"2953\":2,\"2954\":2,\"2956\":1,\"2957\":1,\"3013\":2}}],[\"gradelist\",{\"1\":{\"2223\":2}}],[\"grade2\",{\"1\":{\"2221\":4}}],[\"grade1\",{\"1\":{\"2221\":4}}],[\"gradlew\",{\"1\":{\"302\":2}}],[\"graphical\",{\"1\":{\"771\":1}}],[\"gran\",{\"1\":{\"641\":1}}],[\"green\",{\"1\":{\"262\":1,\"2893\":1}}],[\"grep\",{\"1\":{\"261\":1,\"3145\":1}}],[\"gay\",{\"1\":{\"1019\":1,\"1278\":2}}],[\"gan\",{\"1\":{\"429\":1}}],[\"gamelan\",{\"1\":{\"1990\":1}}],[\"game\",{\"1\":{\"124\":2}}],[\"gateway\",{\"1\":{\"10\":1,\"11\":1,\"1992\":1}}],[\"瑞吉外卖后台\",{\"1\":{\"397\":1}}],[\"瑞吉外卖前台\",{\"1\":{\"397\":1}}],[\"瑞吉外卖\",{\"0\":{\"3258\":1},\"1\":{\"10\":1,\"395\":1,\"396\":1}}],[\"项目组的一个子项目\",{\"1\":{\"2844\":1}}],[\"项目访问路径\",{\"1\":{\"2667\":1}}],[\"项目名\",{\"1\":{\"2511\":1}}],[\"项目名称叫sgugo\",{\"1\":{\"2475\":1}}],[\"项目路径\",{\"0\":{\"2501\":1}}],[\"项目部署\",{\"0\":{\"2499\":1}}],[\"项目部署步骤\",{\"0\":{\"204\":1}}],[\"项目的根目录\",{\"1\":{\"2474\":1}}],[\"项目存放的路径\",{\"1\":{\"2468\":1}}],[\"项目中\",{\"1\":{\"1243\":1}}],[\"项目中包含的jar包\",{\"1\":{\"139\":1}}],[\"项目介绍\",{\"0\":{\"396\":1}}],[\"项目结构\",{\"0\":{\"388\":1}}],[\"项目异常处理\",{\"1\":{\"338\":1}}],[\"项目类路径config目录中配置文件\",{\"1\":{\"217\":1}}],[\"项目类路径配置文件\",{\"1\":{\"217\":1}}],[\"项目目录是test1\",{\"1\":{\"2467\":1}}],[\"项目目录下\",{\"1\":{\"2465\":1}}],[\"项目目录\",{\"1\":{\"198\":1,\"199\":1,\"2467\":1}}],[\"项目默认有一个测试类\",{\"1\":{\"181\":1}}],[\"项目开发规范\",{\"0\":{\"337\":1}}],[\"项目开发需要非常多的包\",{\"1\":{\"90\":1}}],[\"项目开发手册\",{\"1\":{\"10\":1}}],[\"项目搭建完后\",{\"1\":{\"89\":1}}],[\"项目包\",{\"1\":{\"77\":1,\"198\":1}}],[\"项目就创建成功了\",{\"1\":{\"72\":1}}],[\"项目创建后是可以手动添加依赖的\",{\"1\":{\"72\":1}}],[\"项目在硬盘上的位置\",{\"1\":{\"71\":1}}],[\"项目解析\",{\"0\":{\"83\":1},\"1\":{\"29\":1}}],[\"项目上线后\",{\"1\":{\"255\":1}}],[\"项目上线\",{\"1\":{\"22\":1}}],[\"项目整体架构设计\",{\"1\":{\"22\":1}}],[\"项目经理\",{\"1\":{\"22\":1}}],[\"项目\",{\"0\":{\"12\":1},\"1\":{\"10\":1,\"71\":1}}],[\"项目初始化\",{\"0\":{\"2\":1,\"296\":1}}],[\"轮子\",{\"1\":{\"10\":1}}],[\"durableoptime\",{\"1\":{\"3156\":1}}],[\"durationunit\",{\"1\":{\"171\":1}}],[\"durationunit注解描述时间单位\",{\"1\":{\"171\":1}}],[\"duration类\",{\"1\":{\"171\":1}}],[\"duration\",{\"0\":{\"171\":1},\"1\":{\"171\":1,\"461\":1}}],[\"d3\",{\"1\":{\"2872\":2,\"2879\":1}}],[\"d2\",{\"1\":{\"2872\":2,\"2879\":1}}],[\"dtd文件名字\",{\"1\":{\"2778\":1}}],[\"dtd文件的位置url\",{\"1\":{\"2778\":1}}],[\"dtd文件的位置\",{\"1\":{\"2778\":1}}],[\"dtd文档示例\",{\"0\":{\"2777\":1}}],[\"dtd\",{\"0\":{\"2776\":1},\"1\":{\"2775\":1,\"2779\":1}}],[\"dfile\",{\"1\":{\"2627\":1}}],[\"dql的操作步骤\",{\"0\":{\"2336\":1}}],[\"dql\",{\"0\":{\"2335\":1}}],[\"dql操作\",{\"1\":{\"2318\":1}}],[\"dql构造方法\",{\"1\":{\"370\":1}}],[\"dml方法\",{\"1\":{\"2405\":1}}],[\"dml\",{\"0\":{\"2324\":1},\"1\":{\"2400\":1}}],[\"dml操作示例\",{\"0\":{\"2387\":1}}],[\"dml操作的变量是sql预编译语句\",{\"1\":{\"2331\":1}}],[\"dml操作\",{\"1\":{\"2318\":1}}],[\"dml构造方法\",{\"1\":{\"370\":1}}],[\"dp\",{\"1\":{\"1983\":2,\"1984\":5}}],[\"dns\",{\"1\":{\"1936\":1}}],[\"d1和d3包含了\",{\"1\":{\"2873\":1}}],[\"d1\",{\"1\":{\"848\":1,\"866\":1,\"869\":2,\"1168\":2,\"1197\":2,\"2872\":2,\"2879\":1}}],[\"d+\",{\"1\":{\"431\":1,\"432\":1,\"433\":1,\"741\":1,\"742\":1}}],[\"ditectory选择jar包目标目录\",{\"1\":{\"2744\":1}}],[\"dispatchertype\",{\"1\":{\"2702\":2,\"2703\":2}}],[\"dispatchertypes的值可以是个数组\",{\"1\":{\"2703\":1}}],[\"dispatchertypes\",{\"1\":{\"2702\":2,\"2703\":1}}],[\"display\",{\"1\":{\"2048\":1}}],[\"distributions下的即为java源码\",{\"1\":{\"2452\":1}}],[\"distinct\",{\"0\":{\"2211\":1},\"1\":{\"2206\":1,\"2211\":2}}],[\"dis\",{\"1\":{\"1879\":5}}],[\"dish`\",{\"1\":{\"379\":1}}],[\"dish\",{\"0\":{\"377\":1,\"379\":1,\"380\":1},\"1\":{\"374\":3,\"377\":1}}],[\"dimission\",{\"1\":{\"1368\":1}}],[\"directconnection=true\",{\"1\":{\"3224\":1}}],[\"direct和replicaset\",{\"1\":{\"3218\":1}}],[\"direct\",{\"0\":{\"3219\":1},\"1\":{\"3150\":1,\"3159\":1,\"3168\":1,\"3210\":2}}],[\"directories\",{\"1\":{\"2495\":1}}],[\"directorystream<path>\",{\"1\":{\"1920\":1}}],[\"dir默认是在当前module中的\",{\"1\":{\"1767\":1}}],[\"dir默认为项目路径\",{\"1\":{\"1767\":1}}],[\"dir中存储\",{\"1\":{\"1767\":1}}],[\"dir\",{\"1\":{\"636\":1,\"724\":1,\"1767\":1}}],[\"divisor\",{\"1\":{\"534\":3}}],[\"divide\",{\"0\":{\"534\":1},\"1\":{\"534\":4}}],[\"digdecimal间不能直接使用\",{\"1\":{\"531\":1}}],[\"dickman\",{\"1\":{\"441\":1}}],[\"dio渚�\",{\"1\":{\"426\":1}}],[\"dio侠\",{\"1\":{\"426\":2}}],[\"dysmsapi<\",{\"1\":{\"335\":1}}],[\"daughterdo\",{\"1\":{\"1168\":1}}],[\"daughter\",{\"1\":{\"1167\":2,\"1168\":3}}],[\"day04\",{\"1\":{\"1595\":1}}],[\"days\",{\"1\":{\"473\":2,\"474\":1}}],[\"dayofyear\",{\"1\":{\"471\":2}}],[\"dayofmonthint\",{\"1\":{\"470\":1}}],[\"dayofmonth\",{\"1\":{\"470\":1}}],[\"day\",{\"1\":{\"471\":2,\"472\":4,\"928\":1}}],[\"dao的实现类\",{\"0\":{\"2397\":1}}],[\"dao的使用流程\",{\"0\":{\"2396\":1}}],[\"dao介绍\",{\"0\":{\"2393\":1}}],[\"dao层的方法名是比较直接的\",{\"1\":{\"358\":1}}],[\"dao开发\",{\"1\":{\"338\":1}}],[\"dao\",{\"0\":{\"274\":1,\"345\":1,\"349\":1,\"353\":1,\"2392\":1},\"1\":{\"274\":1,\"346\":1,\"1290\":1,\"2394\":1,\"2409\":8,\"2428\":1,\"2760\":1,\"2765\":2,\"3232\":1}}],[\"dat\",{\"1\":{\"1898\":2,\"1903\":1,\"1904\":1,\"1908\":1,\"1909\":1}}],[\"data的下的一个模块\",{\"1\":{\"3233\":1}}],[\"databind<\",{\"1\":{\"2982\":1}}],[\"databases\",{\"1\":{\"3057\":1,\"3060\":1}}],[\"database\",{\"1\":{\"2279\":1,\"2961\":1,\"3031\":2,\"3057\":1,\"3236\":2,\"3237\":2}}],[\"datagrampacket的缓冲区填充了接收的数据\",{\"1\":{\"1985\":1}}],[\"datagrampacket\",{\"0\":{\"1986\":1},\"1\":{\"1981\":2,\"1983\":2,\"1984\":2,\"1985\":3,\"1986\":4}}],[\"datagramsocket与datagrampacket\",{\"1\":{\"1982\":1}}],[\"datagramsocket\",{\"0\":{\"1985\":1},\"1\":{\"1981\":2,\"1983\":2,\"1984\":2,\"1985\":3}}],[\"datagram\",{\"1\":{\"1954\":1,\"1962\":1}}],[\"datagramchannel\",{\"1\":{\"1913\":1}}],[\"dataoutput这两个接口\",{\"1\":{\"1880\":1}}],[\"dataoutputstream中的方法\",{\"0\":{\"1877\":1}}],[\"dataoutputstream\",{\"0\":{\"1878\":1},\"1\":{\"1875\":1,\"1878\":2}}],[\"datainputstream中的方法\",{\"0\":{\"1876\":1}}],[\"datainputstream\",{\"0\":{\"1879\":1},\"1\":{\"1875\":1,\"1878\":1,\"1879\":2}}],[\"data注解\",{\"1\":{\"344\":1}}],[\"dataunit\",{\"1\":{\"172\":1}}],[\"datasizeunit\",{\"1\":{\"172\":1}}],[\"datasizeunit注解描述存储空间单位\",{\"1\":{\"172\":1}}],[\"datasize\",{\"1\":{\"170\":1,\"172\":2}}],[\"datasource用来取代drivermanager来获取connection\",{\"1\":{\"2420\":1}}],[\"datasource\",{\"1\":{\"129\":1,\"130\":1,\"131\":2,\"132\":2,\"156\":2,\"158\":1,\"159\":1,\"160\":2,\"168\":3,\"267\":1,\"271\":1,\"281\":1,\"341\":1,\"390\":1,\"2420\":2,\"2424\":2,\"2426\":1,\"2427\":1,\"2435\":1}}],[\"data\",{\"0\":{\"3232\":1,\"3233\":1},\"1\":{\"164\":1,\"167\":1,\"175\":1,\"176\":1,\"286\":1,\"326\":1,\"336\":1,\"343\":1,\"368\":1,\"370\":5,\"581\":2,\"1045\":7,\"1335\":4,\"1344\":4,\"1352\":4,\"1801\":1,\"1804\":4,\"1834\":4,\"1870\":4,\"1878\":1,\"1879\":1,\"2278\":1,\"2394\":1,\"2890\":1,\"3033\":1,\"3041\":1,\"3043\":1,\"3044\":1,\"3047\":1,\"3048\":1,\"3140\":1,\"3142\":1,\"3143\":1,\"3144\":1,\"3232\":2,\"3233\":2,\"3234\":1,\"3236\":1,\"3237\":1,\"3242\":2}}],[\"date中的年份是从1900开始的\",{\"1\":{\"460\":1}}],[\"date类都很像\",{\"1\":{\"475\":1}}],[\"date类\",{\"1\":{\"460\":1,\"475\":1}}],[\"datesize类\",{\"1\":{\"172\":1}}],[\"datesize\",{\"0\":{\"172\":1}}],[\"datetimestr\",{\"1\":{\"485\":2,\"488\":2}}],[\"datetimeformatter类用来取代之前的simpledateformatter类\",{\"1\":{\"480\":1}}],[\"datetimeformatter\",{\"0\":{\"480\":1},\"1\":{\"480\":1,\"483\":6,\"484\":2,\"485\":2,\"486\":2,\"487\":2,\"488\":2,\"489\":2}}],[\"datetime\",{\"1\":{\"123\":1,\"375\":2,\"376\":2,\"377\":2,\"378\":2,\"379\":2,\"380\":2,\"382\":2,\"383\":1,\"384\":2}}],[\"date\",{\"1\":{\"123\":1,\"262\":1,\"459\":2,\"461\":2,\"483\":4,\"484\":1,\"485\":1,\"498\":1,\"1172\":2,\"1179\":1,\"1185\":5,\"1331\":1,\"2004\":1,\"2314\":2,\"2322\":3,\"2325\":4,\"2349\":1,\"2351\":2,\"2365\":1,\"2407\":1,\"2408\":1,\"2409\":3,\"2442\":1,\"2443\":2,\"2858\":1,\"2890\":1,\"2963\":1,\"3073\":1,\"3074\":1,\"3076\":2,\"3082\":1,\"3156\":1,\"3168\":1}}],[\"dofiter方法以及该方法之前的代码都不会执行\",{\"1\":{\"2700\":1}}],[\"dofilter后面的代码不会执行\",{\"1\":{\"2699\":1}}],[\"dofilter\",{\"0\":{\"2698\":1},\"1\":{\"2697\":2,\"2705\":4}}],[\"do的前面不能加\",{\"1\":{\"2576\":1}}],[\"dopost方法被调用了\",{\"1\":{\"2564\":1}}],[\"dopost\",{\"1\":{\"2564\":2,\"2566\":2,\"2598\":1,\"2610\":1,\"2614\":1,\"2624\":1,\"2625\":1,\"2690\":1,\"2694\":1,\"2798\":1,\"2799\":1}}],[\"doprivileged\",{\"1\":{\"1831\":1}}],[\"dos\",{\"1\":{\"1878\":8}}],[\"docs\",{\"1\":{\"2893\":2}}],[\"document\",{\"1\":{\"3031\":1,\"3032\":2,\"3033\":1,\"3069\":1,\"3072\":1}}],[\"documents>\",{\"1\":{\"3071\":1}}],[\"documents\",{\"1\":{\"2865\":1}}],[\"documented\",{\"0\":{\"1415\":1},\"1\":{\"1390\":1,\"1402\":1,\"1408\":1,\"1415\":1,\"1425\":1,\"1426\":1,\"2572\":1}}],[\"doctype\",{\"1\":{\"2778\":2,\"2779\":1}}],[\"docbase=\",{\"1\":{\"2468\":1,\"2469\":1}}],[\"docbase\",{\"1\":{\"2468\":1}}],[\"doc\",{\"1\":{\"1797\":2,\"2899\":1,\"2900\":1,\"2902\":1,\"2905\":1,\"2906\":1,\"2910\":1,\"2911\":1,\"2913\":1,\"2914\":1,\"2923\":1,\"2924\":1,\"2957\":6,\"2983\":1}}],[\"docker\",{\"0\":{\"48\":1},\"1\":{\"10\":1}}],[\"doget是httpservlet中的service自动调用的方法\",{\"1\":{\"2589\":1}}],[\"doget方法或者是dopost方法最终都是由web服务器\",{\"1\":{\"2589\":1}}],[\"doget方法被调用了\",{\"1\":{\"2564\":1}}],[\"doget和dopost方法中的参数就变成httpservletrequest和httpservletreponse\",{\"1\":{\"2587\":1}}],[\"doget\",{\"1\":{\"2564\":2,\"2566\":2,\"2589\":1,\"2598\":1,\"2601\":1,\"2602\":1,\"2614\":2,\"2624\":2,\"2625\":2,\"2640\":1,\"2655\":2,\"2661\":1,\"2662\":1,\"2682\":1,\"2686\":1,\"2814\":1}}],[\"dog\",{\"1\":{\"1203\":1,\"1208\":3}}],[\"doit\",{\"1\":{\"1019\":2}}],[\"do\",{\"0\":{\"939\":1,\"941\":1},\"1\":{\"917\":1,\"940\":1,\"941\":1,\"1019\":1,\"2576\":3}}],[\"dotall\",{\"1\":{\"749\":1}}],[\"download\",{\"1\":{\"1990\":3,\"3040\":1,\"3053\":1,\"3055\":1}}],[\"downloadurl\",{\"1\":{\"1990\":1}}],[\"down\",{\"1\":{\"536\":2}}],[\"doublestream\",{\"1\":{\"2199\":1,\"2216\":1}}],[\"double数据的创建\",{\"1\":{\"530\":1}}],[\"doublevalue\",{\"1\":{\"524\":2}}],[\"double类型赋值给float会报错\",{\"1\":{\"868\":1}}],[\"double类型\",{\"1\":{\"522\":6}}],[\"double\",{\"1\":{\"423\":3,\"512\":1,\"513\":2,\"514\":3,\"515\":3,\"516\":3,\"517\":2,\"518\":3,\"519\":6,\"520\":5,\"521\":13,\"523\":1,\"524\":3,\"526\":1,\"528\":2,\"640\":1,\"761\":1,\"827\":1,\"846\":1,\"848\":1,\"866\":1,\"869\":1,\"891\":4,\"1025\":1,\"1071\":2,\"1125\":1,\"1178\":1,\"1197\":2,\"1298\":1,\"1393\":1,\"1876\":1,\"2042\":1,\"2199\":1,\"2209\":1,\"2214\":1,\"2235\":1,\"2236\":1,\"2241\":1,\"3033\":1}}],[\"doexception\",{\"1\":{\"369\":1}}],[\"domain\",{\"1\":{\"273\":1,\"343\":1,\"1290\":1}}],[\"d\",{\"1\":{\"253\":3,\"258\":2,\"262\":7,\"425\":2,\"470\":1,\"528\":2,\"538\":2,\"540\":1,\"576\":1,\"636\":2,\"649\":1,\"698\":3,\"704\":2,\"737\":1,\"748\":1,\"750\":1,\"751\":2,\"752\":1,\"753\":2,\"781\":1,\"811\":1,\"1178\":2,\"1547\":1,\"1767\":2,\"1768\":2,\"2196\":1,\"2197\":1,\"2468\":1,\"2469\":1,\"2646\":1,\"2647\":1,\"2781\":1,\"3044\":1}}],[\"dsaft\",{\"1\":{\"2782\":1}}],[\"ds\",{\"1\":{\"158\":2,\"160\":2,\"168\":2,\"302\":2,\"1983\":5,\"1984\":5}}],[\"db可选\",{\"1\":{\"3193\":1}}],[\"dbadminanydatabase\",{\"1\":{\"3189\":1,\"3190\":1}}],[\"dbadmin\",{\"1\":{\"3187\":1,\"3189\":1,\"3190\":1}}],[\"dbowner\",{\"1\":{\"3187\":1,\"3189\":1}}],[\"db指的是当前use的数据库\",{\"1\":{\"3063\":1}}],[\"db对象调用dropdatabase方法删除当前数据库\",{\"1\":{\"3063\":1}}],[\"dbs等\",{\"1\":{\"3146\":1}}],[\"dbs查看数据库时\",{\"1\":{\"3064\":1}}],[\"dbs\",{\"1\":{\"3060\":1}}],[\"dbpath设置仅适用于mongod\",{\"1\":{\"3048\":1,\"3142\":1}}],[\"dbpath\",{\"1\":{\"3043\":1,\"3044\":1,\"3048\":1,\"3142\":1,\"3143\":1,\"3144\":1}}],[\"dbpath=\",{\"1\":{\"3043\":1}}],[\"dbutils类提供了三个重载的关闭方法\",{\"1\":{\"2434\":1}}],[\"dbutils类\",{\"0\":{\"2434\":1}}],[\"dbutils就跟之前封装的dao一样\",{\"1\":{\"2431\":1}}],[\"dbutils介绍\",{\"0\":{\"2431\":1}}],[\"dbutils\",{\"0\":{\"2429\":1,\"2430\":1},\"1\":{\"2431\":1,\"2433\":4}}],[\"db39\",{\"1\":{\"1933\":1}}],[\"dbcp\",{\"1\":{\"1858\":2,\"2420\":1,\"2422\":1}}],[\"db\",{\"1\":{\"130\":1,\"267\":1,\"277\":1,\"341\":2,\"348\":1,\"390\":1,\"1290\":1,\"3041\":1,\"3043\":1,\"3044\":1,\"3047\":1,\"3048\":1,\"3050\":1,\"3062\":1,\"3063\":1,\"3067\":2,\"3068\":1,\"3071\":1,\"3073\":1,\"3075\":1,\"3076\":1,\"3078\":1,\"3080\":1,\"3082\":1,\"3083\":1,\"3084\":1,\"3086\":2,\"3087\":2,\"3090\":1,\"3091\":2,\"3092\":2,\"3093\":1,\"3095\":4,\"3096\":3,\"3097\":2,\"3099\":3,\"3100\":6,\"3101\":2,\"3102\":1,\"3109\":2,\"3110\":1,\"3112\":2,\"3113\":2,\"3116\":3,\"3117\":1,\"3118\":1,\"3120\":1,\"3122\":1,\"3140\":1,\"3142\":1,\"3143\":1,\"3144\":1,\"3161\":1,\"3168\":3,\"3186\":1,\"3187\":7,\"3188\":5,\"3193\":2,\"3195\":2,\"3196\":2,\"3197\":2,\"3198\":6,\"3199\":1,\"3200\":1,\"3201\":2,\"3207\":1,\"3210\":1,\"3242\":2}}],[\"dropuser\",{\"1\":{\"3199\":1}}],[\"dropindexes\",{\"1\":{\"3117\":1}}],[\"dropindex\",{\"1\":{\"3116\":3}}],[\"drop\",{\"1\":{\"3068\":1}}],[\"dropdatabase\",{\"1\":{\"3063\":1}}],[\"drawmoney\",{\"1\":{\"1252\":1}}],[\"driver的实现类不用获取了\",{\"1\":{\"2300\":1}}],[\"driver的对象\",{\"1\":{\"2297\":1}}],[\"drivermanager\",{\"1\":{\"2299\":2,\"2300\":1,\"2303\":1,\"2319\":1,\"2325\":1,\"2327\":1}}],[\"driverclass=com\",{\"1\":{\"2302\":1}}],[\"driverclass\",{\"1\":{\"2298\":2,\"2303\":3,\"2325\":3,\"2327\":3}}],[\"driverclassname=com\",{\"1\":{\"2425\":1}}],[\"driverclassname\",{\"1\":{\"159\":1,\"2426\":1,\"2434\":1}}],[\"driver接口实现类com\",{\"1\":{\"2297\":1}}],[\"driver\",{\"0\":{\"2287\":1,\"2293\":1},\"1\":{\"130\":2,\"131\":1,\"156\":1,\"159\":1,\"267\":2,\"270\":2,\"271\":2,\"278\":2,\"280\":1,\"281\":2,\"340\":1,\"341\":2,\"390\":2,\"2283\":1,\"2292\":1,\"2297\":5,\"2298\":2,\"2299\":5,\"2300\":1,\"2302\":1,\"2425\":1,\"3229\":2}}],[\"druid2\",{\"1\":{\"2426\":1}}],[\"druid是阿里巴巴开源平台上一个数据库连接池实现\",{\"1\":{\"2422\":1}}],[\"druid的连接信息\",{\"1\":{\"341\":1}}],[\"druid连接池依赖\",{\"1\":{\"322\":1}}],[\"druid依赖的坐标需要手动在pom\",{\"1\":{\"266\":1}}],[\"druiddatasourcefactory\",{\"1\":{\"2424\":2,\"2427\":1}}],[\"druiddatasource\",{\"1\":{\"158\":3,\"160\":3,\"168\":3}}],[\"druid\",{\"0\":{\"322\":1,\"2422\":1},\"1\":{\"29\":1,\"267\":1,\"270\":1,\"271\":1,\"280\":1,\"281\":1,\"336\":3,\"340\":1,\"341\":1,\"345\":1,\"390\":1,\"2420\":1,\"2424\":2,\"2425\":1,\"2427\":1}}],[\"dd\",{\"1\":{\"123\":1,\"258\":2,\"262\":7,\"466\":1,\"487\":2,\"488\":1,\"489\":1,\"658\":3,\"659\":1,\"660\":1,\"662\":1,\"663\":2,\"664\":2,\"665\":2,\"666\":1,\"1262\":1,\"1744\":1,\"2215\":3,\"2322\":1,\"2325\":1,\"2334\":1}}],[\"deactivation\",{\"1\":{\"2502\":1}}],[\"dead\",{\"1\":{\"421\":3,\"425\":1}}],[\"declaredconstructors\",{\"1\":{\"2050\":2}}],[\"declaredmethods\",{\"1\":{\"2047\":2,\"2048\":2}}],[\"declaredfields\",{\"1\":{\"2043\":2,\"2045\":2}}],[\"decimal\",{\"1\":{\"377\":1,\"378\":1,\"379\":1,\"383\":1,\"384\":1,\"385\":1,\"534\":2}}],[\"delivered\",{\"1\":{\"1368\":1}}],[\"deleteresponse\",{\"1\":{\"2984\":1}}],[\"deleterequest\",{\"1\":{\"2984\":3,\"2987\":6}}],[\"deleteindexrequest\",{\"1\":{\"2978\":2}}],[\"deleteifexists\",{\"1\":{\"1920\":1}}],[\"deleted\",{\"1\":{\"2893\":1,\"2915\":2,\"2920\":1}}],[\"deleted`\",{\"1\":{\"377\":1,\"378\":1,\"379\":1,\"380\":1,\"382\":1}}],[\"delete语句\",{\"1\":{\"2435\":1}}],[\"deletemapping\",{\"1\":{\"364\":1,\"371\":1}}],[\"deletebyid\",{\"1\":{\"347\":1,\"360\":1,\"2407\":1,\"2408\":1,\"2409\":1}}],[\"delete\",{\"0\":{\"453\":1,\"562\":1},\"1\":{\"347\":1,\"359\":1,\"360\":1,\"364\":2,\"371\":2,\"453\":2,\"562\":4,\"1920\":1,\"2334\":1,\"2366\":1,\"2394\":1,\"2408\":1,\"2439\":1,\"2563\":2,\"2895\":1,\"2913\":1,\"2914\":1,\"2918\":1,\"2919\":1,\"2978\":1,\"2984\":2}}],[\"demo6的doget方法都被执行了\",{\"1\":{\"2655\":1}}],[\"demo6\",{\"1\":{\"2655\":4,\"2656\":1}}],[\"demo5转发到\",{\"1\":{\"2656\":1}}],[\"demo5和\",{\"1\":{\"2655\":1}}],[\"demo5\",{\"1\":{\"2655\":4,\"2656\":1}}],[\"demo3\",{\"1\":{\"2598\":5,\"2609\":1}}],[\"demo2\",{\"1\":{\"2564\":1,\"2661\":1,\"2662\":1,\"2663\":1,\"2668\":1}}],[\"demo项目\",{\"1\":{\"2537\":1}}],[\"demo可以找到部署在tomcat服务器上的web\",{\"1\":{\"2537\":1}}],[\"demo`\",{\"1\":{\"2537\":1}}],[\"demo1请求\",{\"1\":{\"2537\":1}}],[\"demo1\",{\"1\":{\"2532\":1,\"2533\":1,\"2552\":1,\"2640\":2,\"2642\":1,\"2661\":1}}],[\"demo是我创建的项目名\",{\"1\":{\"1767\":1}}],[\"demo\",{\"1\":{\"538\":2,\"1767\":3,\"1768\":2,\"2531\":1,\"2537\":1,\"2566\":1,\"2571\":1,\"2574\":1,\"2575\":1,\"2576\":1,\"2577\":1,\"2623\":1}}],[\"defaultwriteconcern\",{\"1\":{\"3161\":1}}],[\"defaultservlet是用来处理静态资源\",{\"1\":{\"2577\":1}}],[\"defaultservlet的覆盖\",{\"1\":{\"2577\":1}}],[\"defaultservlet\",{\"1\":{\"2577\":1}}],[\"defaultcharbuffersize\",{\"1\":{\"1830\":1,\"1831\":1}}],[\"default结构是可选的\",{\"1\":{\"927\":1}}],[\"default`\",{\"1\":{\"382\":1}}],[\"default\",{\"1\":{\"375\":2,\"376\":3,\"377\":6,\"378\":6,\"379\":5,\"380\":3,\"381\":6,\"382\":11,\"383\":8,\"384\":9,\"385\":7,\"926\":1,\"927\":1,\"928\":1,\"1062\":1,\"1267\":2,\"1269\":1,\"1392\":1,\"1393\":2,\"1397\":1,\"1432\":1,\"1680\":2,\"1828\":1,\"2196\":1,\"2197\":1,\"2572\":4,\"2858\":1,\"2975\":1,\"2977\":1,\"2978\":1,\"2980\":1,\"2983\":1,\"2984\":1,\"2986\":1,\"2987\":1,\"2991\":1,\"2992\":1,\"2993\":1,\"2997\":1,\"3000\":1,\"3003\":1,\"3006\":1,\"3008\":1,\"3010\":1,\"3015\":1,\"3019\":1,\"3150\":1,\"3161\":1}}],[\"detail`\",{\"1\":{\"385\":1}}],[\"detail\",{\"0\":{\"385\":1},\"1\":{\"374\":1}}],[\"des\",{\"1\":{\"1821\":2}}],[\"desfile\",{\"1\":{\"1821\":2,\"1836\":2}}],[\"desc|asc\",{\"1\":{\"2951\":1}}],[\"descriptors\",{\"1\":{\"2495\":1}}],[\"description\",{\"1\":{\"273\":1,\"343\":1}}],[\"desc\",{\"1\":{\"1278\":3,\"2951\":1,\"3009\":1,\"3193\":1}}],[\"destination\",{\"1\":{\"3048\":1,\"3142\":1}}],[\"destroy\",{\"0\":{\"2554\":1},\"1\":{\"2551\":1,\"2554\":3,\"2697\":1}}],[\"destroy会在生命周期中被调用\",{\"1\":{\"2551\":1}}],[\"destroy线程会检测连接的间隔时间2\",{\"1\":{\"2426\":1}}],[\"destpath\",{\"1\":{\"1823\":2,\"1838\":2}}],[\"destfile\",{\"1\":{\"1817\":2,\"1823\":2}}],[\"dest\",{\"1\":{\"559\":1,\"689\":1,\"1920\":3,\"2602\":1}}],[\"desription\",{\"1\":{\"342\":1}}],[\"depath=\",{\"1\":{\"3242\":1}}],[\"depedencies选项卡中\",{\"1\":{\"2530\":1}}],[\"dependencymanagement>\",{\"1\":{\"95\":1}}],[\"dependency>\",{\"1\":{\"95\":4,\"99\":5,\"110\":1,\"111\":1,\"141\":1,\"165\":1,\"174\":2,\"179\":1,\"266\":1,\"270\":3,\"280\":3,\"292\":1,\"316\":1,\"317\":1,\"318\":1,\"319\":1,\"321\":1,\"322\":1,\"323\":1,\"324\":1,\"328\":1,\"330\":1,\"331\":1,\"332\":1,\"333\":1,\"335\":2,\"336\":10,\"344\":1,\"389\":9,\"2837\":1,\"2971\":2,\"2982\":1,\"3229\":1,\"3234\":1}}],[\"dependencies>\",{\"1\":{\"95\":1,\"99\":1,\"336\":1,\"344\":1,\"389\":1}}],[\"dependencies<\",{\"1\":{\"94\":1,\"95\":1}}],[\"dependencies\",{\"0\":{\"95\":1},\"1\":{\"72\":2,\"96\":2}}],[\"deprecation\",{\"1\":{\"1429\":1,\"1430\":1}}],[\"deprecated\",{\"0\":{\"1425\":1},\"1\":{\"1389\":1,\"1390\":1,\"1402\":1,\"1425\":4,\"1432\":3}}],[\"deployment\",{\"0\":{\"2499\":1},\"1\":{\"298\":1,\"301\":1,\"2495\":1}}],[\"debug也可以启动\",{\"1\":{\"2509\":1}}],[\"debug\",{\"0\":{\"119\":1,\"165\":1,\"238\":1,\"2362\":1,\"2458\":1,\"2859\":1,\"2976\":1,\"2988\":1,\"3161\":1,\"3241\":1},\"1\":{\"242\":2,\"244\":2,\"246\":1,\"248\":2,\"249\":3,\"262\":6,\"263\":2,\"2498\":1,\"2503\":1,\"2505\":1,\"2509\":1}}],[\"dev<\",{\"1\":{\"235\":1}}],[\"devmvc\",{\"1\":{\"231\":1,\"232\":1,\"234\":1}}],[\"devredis\",{\"1\":{\"231\":1,\"232\":1,\"234\":1}}],[\"devdb\",{\"1\":{\"231\":1,\"232\":1,\"234\":1}}],[\"dev环境额外新增的配置\",{\"1\":{\"232\":1}}],[\"dev环境配置文件\",{\"1\":{\"228\":1}}],[\"dev环境\",{\"1\":{\"118\":1}}],[\"development\",{\"1\":{\"23\":1,\"777\":1}}],[\"dev\",{\"0\":{\"3246\":1,\"3257\":1,\"3273\":1},\"1\":{\"10\":1,\"118\":1,\"226\":1,\"228\":1,\"229\":1,\"232\":1,\"234\":2,\"262\":1,\"313\":1}}],[\"devtools\",{\"1\":{\"150\":1,\"152\":1,\"153\":1}}],[\"devtools<\",{\"1\":{\"141\":1,\"332\":1,\"336\":1}}],[\"devtool\",{\"0\":{\"8\":1,\"332\":1}}],[\"nickname\",{\"1\":{\"3113\":3,\"3114\":1}}],[\"nike\",{\"1\":{\"2082\":2}}],[\"nikeclothfactory\",{\"1\":{\"2081\":1,\"2082\":1}}],[\"nike工厂生产一批运动服\",{\"1\":{\"2081\":1}}],[\"nike工厂\",{\"1\":{\"2078\":1}}],[\"nio已经成为文件处理中越来越重要的部分\",{\"1\":{\"1914\":1}}],[\"nio将以更加高效的方式进行文件的读写操作\",{\"1\":{\"1913\":1}}],[\"nio支持面向缓冲区的\",{\"1\":{\"1913\":1}}],[\"nio与原来的io有同样的作用和目的\",{\"1\":{\"1913\":1}}],[\"nio\",{\"0\":{\"1914\":1},\"1\":{\"1913\":2,\"1914\":2,\"1916\":3,\"1917\":2,\"1920\":1}}],[\"nio概述\",{\"0\":{\"1913\":1}}],[\"nio2\",{\"0\":{\"1912\":1}}],[\"nio2与jar包\",{\"0\":{\"1911\":1}}],[\"nchars\",{\"1\":{\"1830\":1,\"1831\":1}}],[\"ns\",{\"1\":{\"1562\":2}}],[\"nsomebody\",{\"1\":{\"1432\":1}}],[\"nt1\",{\"1\":{\"1556\":3}}],[\"n个子类适用于同一个方法\",{\"1\":{\"1152\":1}}],[\"n是没有关联的\",{\"1\":{\"1044\":1}}],[\"n和原始数据m\",{\"1\":{\"1044\":1}}],[\"n的值\",{\"1\":{\"1044\":1}}],[\"n传递给方法后\",{\"1\":{\"1044\":1}}],[\"n次\",{\"1\":{\"952\":1}}],[\"n大\",{\"1\":{\"913\":1,\"914\":1}}],[\"n也没用\",{\"1\":{\"749\":1}}],[\"n2的结果是int类型的\",{\"1\":{\"891\":1}}],[\"n2\",{\"1\":{\"516\":2,\"891\":3}}],[\"n1\",{\"1\":{\"516\":2,\"891\":4}}],[\"numvotesneeded\",{\"1\":{\"3156\":1}}],[\"numerical\",{\"1\":{\"2963\":1}}],[\"num+1\",{\"1\":{\"2690\":1}}],[\"num++\",{\"1\":{\"941\":1,\"1556\":1}}],[\"numtestsperevictionrun\",{\"1\":{\"2426\":1}}],[\"numtest\",{\"1\":{\"1556\":3}}],[\"num的值从100~1有序递减\",{\"1\":{\"1513\":1}}],[\"num>0\",{\"1\":{\"1492\":1,\"1509\":1}}],[\"num是try里面的局部变量\",{\"1\":{\"1339\":1}}],[\"num3\",{\"1\":{\"1195\":1}}],[\"numsum\",{\"1\":{\"1562\":3}}],[\"nums=11\",{\"1\":{\"1400\":1}}],[\"nums=12\",{\"1\":{\"1400\":1}}],[\"nums\",{\"1\":{\"971\":5,\"972\":2,\"974\":2,\"1393\":1}}],[\"num使用前必须先定义\",{\"1\":{\"933\":1}}],[\"num2\",{\"1\":{\"891\":2,\"1195\":2,\"1198\":1}}],[\"num1+0\",{\"1\":{\"891\":1}}],[\"num1\",{\"1\":{\"891\":1,\"1192\":2,\"1197\":2}}],[\"num\",{\"1\":{\"886\":4,\"933\":2,\"941\":5,\"1133\":3,\"1332\":1,\"1339\":2,\"1492\":2,\"1509\":2,\"1512\":4,\"1515\":1,\"1520\":4,\"1536\":4,\"1556\":3,\"1562\":1,\"1709\":2,\"1977\":2,\"2004\":2,\"2690\":1,\"3096\":2}}],[\"numberint\",{\"1\":{\"3073\":1,\"3076\":2,\"3082\":1,\"3084\":1,\"3100\":1,\"3102\":2,\"3168\":1}}],[\"numbertype\",{\"1\":{\"2781\":2}}],[\"number=\",{\"1\":{\"2779\":1,\"2782\":1}}],[\"numberformatexception\",{\"0\":{\"1332\":1},\"1\":{\"1323\":1,\"1339\":1}}],[\"number类型转string类型\",{\"1\":{\"526\":1}}],[\"number\",{\"0\":{\"523\":1},\"1\":{\"529\":1,\"530\":1,\"938\":3,\"1046\":1,\"2777\":1,\"2781\":2,\"2858\":1,\"2890\":2,\"3243\":1}}],[\"number`\",{\"1\":{\"375\":1,\"381\":1}}],[\"null的判断后\",{\"1\":{\"1521\":1}}],[\"null调用方法\",{\"1\":{\"998\":1}}],[\"nullpointerexception\",{\"0\":{\"1327\":1},\"1\":{\"998\":1,\"1323\":1,\"1339\":1,\"2048\":1}}],[\"null会被直接当做null字符串\",{\"1\":{\"357\":1}}],[\"null\",{\"1\":{\"123\":2,\"284\":1,\"347\":1,\"351\":1,\"352\":1,\"357\":2,\"360\":1,\"364\":1,\"375\":12,\"376\":8,\"377\":14,\"378\":13,\"379\":12,\"380\":9,\"381\":6,\"382\":19,\"383\":10,\"384\":14,\"385\":9,\"579\":1,\"689\":5,\"713\":1,\"715\":1,\"810\":2,\"990\":1,\"993\":1,\"998\":2,\"1025\":1,\"1180\":4,\"1241\":2,\"1304\":1,\"1327\":2,\"1344\":2,\"1423\":1,\"1521\":4,\"1636\":1,\"1737\":1,\"1738\":3,\"1743\":3,\"1744\":1,\"1745\":1,\"1753\":2,\"1804\":2,\"1805\":2,\"1816\":1,\"1817\":4,\"1823\":4,\"1834\":3,\"1836\":4,\"1870\":2,\"1873\":3,\"1966\":1,\"1983\":2,\"1984\":2,\"2032\":2,\"2037\":1,\"2048\":1,\"2063\":1,\"2247\":1,\"2254\":2,\"2256\":1,\"2257\":1,\"2259\":2,\"2260\":1,\"2325\":4,\"2328\":2,\"2329\":2,\"2333\":2,\"2345\":1,\"2349\":3,\"2352\":4,\"2355\":4,\"2386\":2,\"2387\":3,\"2405\":15,\"2409\":14,\"2428\":2,\"2438\":1,\"2439\":1,\"2440\":1,\"2441\":1,\"2442\":2,\"2443\":1,\"2799\":1,\"2957\":1,\"3015\":1,\"3033\":1,\"3034\":2,\"3073\":1,\"3168\":1}}],[\"noops\",{\"1\":{\"2920\":1}}],[\"nonematch\",{\"0\":{\"2231\":1},\"1\":{\"2231\":2}}],[\"non\",{\"1\":{\"1913\":1}}],[\"nonpayment\",{\"1\":{\"1368\":1}}],[\"node\",{\"1\":{\"1626\":1,\"1678\":1,\"2845\":1}}],[\"node<e>\",{\"1\":{\"1626\":5}}],[\"node的定义\",{\"0\":{\"1626\":1}}],[\"norm\",{\"1\":{\"1487\":1}}],[\"nosuchfieldexception\",{\"1\":{\"606\":1,\"607\":1}}],[\"nosuchmethodexception\",{\"1\":{\"602\":1,\"610\":1,\"611\":1}}],[\"nosql\",{\"0\":{\"325\":1},\"1\":{\"336\":1}}],[\"no\",{\"1\":{\"534\":1,\"2901\":1,\"2907\":1,\"2910\":1,\"2915\":1,\"2925\":1,\"3150\":1}}],[\"now\",{\"0\":{\"469\":1,\"476\":1},\"1\":{\"469\":3,\"471\":1,\"472\":1,\"473\":1,\"474\":1,\"476\":4,\"477\":4,\"478\":3,\"484\":1,\"486\":1,\"488\":1}}],[\"noargscontructor\",{\"1\":{\"344\":1}}],[\"notexists\",{\"1\":{\"1920\":1}}],[\"notifyall\",{\"0\":{\"1553\":1},\"1\":{\"1176\":1,\"1551\":1,\"1554\":3}}],[\"notify\",{\"0\":{\"1553\":1},\"1\":{\"1176\":1,\"1551\":1,\"1552\":1,\"1553\":1,\"1554\":3,\"1556\":1}}],[\"not\",{\"1\":{\"168\":1,\"375\":12,\"376\":7,\"377\":12,\"378\":9,\"379\":10,\"380\":8,\"381\":2,\"382\":11,\"383\":4,\"384\":8,\"385\":4,\"1278\":1,\"2917\":1,\"2935\":1}}],[\"n<\",{\"1\":{\"262\":3}}],[\"n\",{\"1\":{\"253\":2,\"262\":1,\"514\":2,\"515\":2,\"576\":1,\"581\":1,\"582\":1,\"749\":1,\"854\":2,\"913\":2,\"914\":3,\"1035\":4,\"1044\":6,\"1045\":3,\"1082\":1,\"1567\":2,\"1709\":4,\"1816\":1,\"1834\":1,\"1835\":1,\"2212\":1,\"2213\":4,\"3172\":1}}],[\"nezha\",{\"1\":{\"2325\":1}}],[\"nempty\",{\"1\":{\"1432\":1}}],[\"netchinaren\",{\"1\":{\"1993\":2}}],[\"net\",{\"1\":{\"1090\":1,\"1990\":1,\"1995\":1,\"1996\":1,\"3048\":1,\"3142\":1}}],[\"netstat\",{\"1\":{\"202\":2,\"2460\":1}}],[\"negativenumber++\",{\"1\":{\"938\":1}}],[\"negativenumber\",{\"1\":{\"938\":2}}],[\"necessary\",{\"1\":{\"535\":1}}],[\"nextelement\",{\"1\":{\"2602\":1}}],[\"next和finish就ok了\",{\"1\":{\"2483\":1}}],[\"nextchar\",{\"1\":{\"1830\":1,\"1831\":1}}],[\"nextval\",{\"1\":{\"677\":2,\"678\":1}}],[\"nextdouble\",{\"1\":{\"640\":1,\"761\":1}}],[\"nextfloat\",{\"1\":{\"640\":1,\"761\":1}}],[\"nextlong\",{\"1\":{\"640\":1,\"761\":1}}],[\"nextline\",{\"1\":{\"637\":1,\"758\":1}}],[\"nextint\",{\"1\":{\"640\":1,\"761\":1,\"938\":1,\"1333\":1,\"2004\":1}}],[\"nextshrot\",{\"1\":{\"640\":1,\"761\":1}}],[\"nextbigdecimal\",{\"1\":{\"640\":1,\"761\":1}}],[\"nextbiginter\",{\"1\":{\"640\":1,\"761\":1}}],[\"nextboolean\",{\"1\":{\"640\":1,\"761\":1}}],[\"nextbyte\",{\"1\":{\"640\":2,\"761\":2}}],[\"nextxxx\",{\"0\":{\"640\":1,\"761\":1}}],[\"next方法\",{\"1\":{\"640\":1,\"761\":1}}],[\"next方法获取输入的字符串\",{\"1\":{\"639\":1,\"760\":1}}],[\"next方法就获取输入的内容\",{\"1\":{\"639\":1,\"760\":1}}],[\"next\",{\"0\":{\"639\":1,\"677\":1,\"760\":1,\"1592\":1,\"2342\":1},\"1\":{\"72\":1,\"637\":1,\"639\":6,\"640\":2,\"677\":3,\"678\":2,\"721\":1,\"723\":1,\"758\":1,\"760\":6,\"761\":2,\"1592\":1,\"1595\":4,\"1596\":1,\"1597\":3,\"1600\":2,\"1626\":4,\"1654\":1,\"1687\":1,\"1709\":1,\"1710\":1,\"1747\":1,\"1748\":1,\"2340\":2,\"2342\":1,\"2349\":1,\"2352\":1,\"2355\":1,\"2365\":1,\"2405\":3,\"2442\":1}}],[\"newtermstartdate\",{\"1\":{\"3156\":1}}],[\"newproxyinstance的参数3\",{\"0\":{\"2095\":1}}],[\"newproxyinstance\",{\"0\":{\"2090\":1},\"1\":{\"2090\":1,\"2094\":1}}],[\"newpriority\",{\"1\":{\"1487\":1}}],[\"new一个类的对象\",{\"1\":{\"2029\":1}}],[\"newoutputstream\",{\"1\":{\"1920\":1}}],[\"newinputstream\",{\"1\":{\"1920\":1}}],[\"newinstance已经被jdk舍弃了\",{\"1\":{\"2298\":1}}],[\"newinstance方法只能调用无参构造器创建对象\",{\"1\":{\"2038\":1}}],[\"newinstance方法默认会调用类的空参构造器\",{\"1\":{\"2037\":1}}],[\"newinstance\",{\"0\":{\"591\":1,\"629\":1,\"2037\":1},\"1\":{\"591\":2,\"602\":2,\"616\":1,\"617\":1,\"626\":1,\"629\":2,\"2004\":1,\"2009\":1,\"2010\":1,\"2037\":2,\"2038\":2,\"2058\":1,\"2063\":1,\"2067\":1,\"2298\":1,\"2299\":1,\"2355\":1,\"2405\":2}}],[\"newdirectorystream\",{\"1\":{\"1920\":1}}],[\"newfixedthreadpool\",{\"1\":{\"1567\":1,\"1569\":1}}],[\"newcachedthreadpool\",{\"1\":{\"1567\":1}}],[\"newchar\",{\"1\":{\"429\":2}}],[\"new类创建对象时\",{\"1\":{\"1300\":1}}],[\"new+构造器\",{\"1\":{\"1067\":1}}],[\"newval\",{\"1\":{\"690\":1}}],[\"newlength\",{\"1\":{\"647\":1}}],[\"newline\",{\"0\":{\"582\":1,\"1835\":1}}],[\"new构造器\",{\"1\":{\"572\":1}}],[\"newbytechannel\",{\"1\":{\"1920\":1}}],[\"newb\",{\"1\":{\"559\":2}}],[\"newscheduledthreadpool\",{\"1\":{\"1567\":1}}],[\"newscale\",{\"1\":{\"535\":2}}],[\"newsinglethreadexecutor\",{\"1\":{\"1567\":1}}],[\"news1\",{\"1\":{\"417\":2,\"418\":2,\"421\":4}}],[\"new\",{\"0\":{\"304\":1,\"387\":1,\"638\":1,\"759\":1,\"1300\":1,\"1302\":1},\"1\":{\"71\":1,\"158\":1,\"160\":1,\"168\":1,\"213\":1,\"347\":2,\"350\":2,\"351\":1,\"352\":1,\"354\":1,\"355\":1,\"356\":1,\"357\":1,\"360\":3,\"369\":1,\"371\":8,\"401\":1,\"404\":2,\"425\":1,\"426\":2,\"441\":3,\"444\":4,\"445\":2,\"451\":3,\"452\":1,\"453\":1,\"454\":1,\"455\":1,\"456\":1,\"501\":1,\"502\":2,\"503\":6,\"508\":3,\"509\":1,\"529\":1,\"530\":3,\"531\":2,\"532\":2,\"533\":2,\"534\":2,\"535\":1,\"537\":2,\"538\":3,\"540\":1,\"541\":1,\"542\":1,\"543\":1,\"544\":1,\"545\":1,\"546\":1,\"547\":1,\"549\":1,\"550\":1,\"551\":1,\"552\":1,\"553\":1,\"555\":1,\"556\":1,\"557\":1,\"559\":2,\"562\":3,\"564\":6,\"565\":2,\"566\":4,\"569\":1,\"571\":2,\"574\":1,\"575\":1,\"576\":1,\"577\":1,\"578\":2,\"579\":1,\"581\":2,\"587\":1,\"638\":1,\"639\":1,\"640\":1,\"645\":1,\"650\":1,\"651\":1,\"657\":1,\"658\":2,\"662\":2,\"670\":1,\"682\":1,\"684\":1,\"689\":2,\"691\":1,\"697\":1,\"712\":2,\"759\":1,\"760\":1,\"761\":1,\"876\":1,\"877\":2,\"885\":2,\"938\":1,\"966\":1,\"970\":2,\"971\":2,\"974\":1,\"984\":2,\"985\":1,\"986\":1,\"988\":2,\"989\":3,\"990\":3,\"991\":1,\"997\":1,\"998\":3,\"1011\":2,\"1014\":1,\"1018\":2,\"1019\":4,\"1032\":1,\"1034\":1,\"1044\":1,\"1054\":1,\"1056\":1,\"1067\":1,\"1068\":1,\"1095\":1,\"1128\":2,\"1147\":2,\"1153\":2,\"1155\":2,\"1156\":1,\"1160\":4,\"1163\":1,\"1165\":1,\"1166\":1,\"1167\":1,\"1170\":1,\"1171\":1,\"1172\":2,\"1178\":4,\"1179\":4,\"1185\":2,\"1192\":7,\"1194\":2,\"1197\":1,\"1208\":3,\"1210\":1,\"1215\":1,\"1218\":1,\"1219\":2,\"1227\":2,\"1240\":1,\"1241\":1,\"1249\":1,\"1264\":6,\"1312\":1,\"1319\":1,\"1329\":1,\"1331\":1,\"1333\":1,\"1335\":2,\"1343\":1,\"1344\":2,\"1352\":2,\"1360\":2,\"1361\":3,\"1373\":4,\"1432\":5,\"1472\":2,\"1480\":1,\"1481\":1,\"1489\":1,\"1492\":4,\"1493\":1,\"1509\":3,\"1512\":5,\"1515\":1,\"1520\":5,\"1521\":2,\"1532\":1,\"1536\":5,\"1547\":5,\"1556\":3,\"1562\":3,\"1569\":1,\"1583\":1,\"1594\":2,\"1603\":2,\"1604\":1,\"1606\":1,\"1607\":1,\"1617\":1,\"1618\":1,\"1620\":1,\"1621\":1,\"1624\":1,\"1654\":3,\"1657\":6,\"1658\":3,\"1673\":1,\"1678\":1,\"1683\":1,\"1687\":5,\"1688\":3,\"1692\":2,\"1707\":1,\"1709\":1,\"1710\":1,\"1716\":2,\"1720\":2,\"1721\":5,\"1723\":1,\"1724\":1,\"1725\":1,\"1726\":1,\"1733\":1,\"1737\":1,\"1745\":1,\"1747\":3,\"1748\":3,\"1753\":3,\"1757\":1,\"1767\":2,\"1768\":1,\"1800\":3,\"1804\":2,\"1805\":3,\"1807\":1,\"1808\":1,\"1812\":3,\"1816\":2,\"1817\":5,\"1821\":6,\"1823\":5,\"1828\":2,\"1829\":2,\"1830\":2,\"1831\":3,\"1834\":2,\"1836\":7,\"1847\":2,\"1848\":2,\"1851\":2,\"1853\":3,\"1858\":5,\"1870\":2,\"1873\":3,\"1878\":2,\"1879\":2,\"1888\":3,\"1891\":1,\"1898\":4,\"1899\":1,\"1903\":3,\"1904\":2,\"1908\":5,\"1909\":2,\"1913\":1,\"1916\":1,\"1972\":1,\"1977\":3,\"1983\":2,\"1984\":4,\"1990\":4,\"1993\":1,\"2004\":1,\"2005\":1,\"2008\":1,\"2019\":1,\"2034\":3,\"2082\":2,\"2094\":1,\"2096\":1,\"2097\":1,\"2101\":1,\"2104\":1,\"2121\":1,\"2123\":1,\"2129\":1,\"2157\":1,\"2166\":1,\"2171\":1,\"2173\":1,\"2174\":1,\"2176\":1,\"2177\":1,\"2180\":1,\"2182\":1,\"2185\":1,\"2221\":11,\"2252\":1,\"2254\":1,\"2257\":1,\"2260\":1,\"2297\":2,\"2303\":1,\"2322\":2,\"2325\":3,\"2327\":1,\"2349\":1,\"2352\":1,\"2355\":1,\"2364\":2,\"2365\":3,\"2405\":1,\"2409\":5,\"2424\":1,\"2427\":1,\"2438\":1,\"2439\":1,\"2440\":2,\"2441\":2,\"2442\":3,\"2443\":3,\"2483\":1,\"2489\":1,\"2493\":1,\"2646\":2,\"2647\":1,\"2793\":2,\"2798\":1,\"2804\":2,\"2805\":1,\"2806\":1,\"2822\":1,\"2972\":2,\"2975\":3,\"2977\":3,\"2978\":3,\"2980\":5,\"2983\":3,\"2984\":3,\"2986\":6,\"2987\":6,\"2991\":3,\"2992\":4,\"2993\":4,\"2994\":1,\"2996\":1,\"2997\":4,\"2999\":1,\"3000\":4,\"3002\":2,\"3003\":5,\"3005\":1,\"3006\":4,\"3008\":4,\"3010\":4,\"3014\":1,\"3015\":4,\"3016\":1,\"3018\":2,\"3019\":5,\"3073\":1,\"3074\":1,\"3076\":2,\"3082\":1,\"3168\":1}}],[\"nation\",{\"1\":{\"1227\":5,\"1233\":3,\"2007\":3,\"2010\":2,\"2063\":1}}],[\"native\",{\"0\":{\"1109\":1},\"1\":{\"1109\":1}}],[\"native修饰\",{\"1\":{\"1069\":1}}],[\"navigableset<t>\",{\"1\":{\"691\":2}}],[\"navigablemap<k\",{\"1\":{\"691\":2}}],[\"nano\",{\"1\":{\"471\":2}}],[\"namtab\",{\"1\":{\"456\":1}}],[\"name+\",{\"1\":{\"2799\":1}}],[\"name栏填入自定义的名字\",{\"1\":{\"2744\":1}}],[\"name>helo<\",{\"1\":{\"2782\":1}}],[\"name>\",{\"1\":{\"2572\":1,\"2779\":1,\"2782\":2}}],[\"name是该tomcat模板的名字\",{\"1\":{\"2498\":1}}],[\"name`\",{\"1\":{\"376\":1,\"377\":1,\"378\":1,\"382\":3,\"384\":1}}],[\"name=自定义的类型名\",{\"1\":{\"2781\":1}}],[\"name=\",{\"1\":{\"262\":9,\"1186\":1,\"1654\":1,\"1657\":3,\"2007\":1,\"2010\":1,\"2037\":1,\"2232\":1,\"2233\":1,\"2236\":1,\"2609\":2,\"2623\":4,\"2781\":11}}],[\"name=ebank\",{\"1\":{\"221\":1}}],[\"name的值是变量的名称\",{\"1\":{\"262\":1}}],[\"name1\",{\"1\":{\"127\":1}}],[\"name\",{\"0\":{\"1301\":1},\"1\":{\"71\":2,\"124\":6,\"127\":1,\"168\":1,\"256\":1,\"258\":1,\"262\":1,\"267\":1,\"271\":1,\"273\":1,\"281\":1,\"289\":3,\"341\":1,\"342\":1,\"343\":1,\"355\":1,\"356\":2,\"357\":5,\"390\":2,\"501\":6,\"575\":2,\"590\":1,\"592\":2,\"606\":2,\"607\":1,\"610\":1,\"611\":2,\"615\":2,\"623\":2,\"624\":2,\"636\":2,\"885\":6,\"1010\":1,\"1011\":1,\"1068\":4,\"1104\":1,\"1136\":4,\"1180\":4,\"1186\":1,\"1209\":4,\"1278\":1,\"1432\":1,\"1468\":1,\"1657\":2,\"1692\":1,\"1879\":3,\"1885\":1,\"1995\":1,\"2007\":12,\"2010\":4,\"2044\":1,\"2045\":1,\"2058\":5,\"2059\":1,\"2060\":1,\"2064\":2,\"2065\":1,\"2179\":2,\"2231\":2,\"2319\":1,\"2321\":1,\"2325\":1,\"2329\":1,\"2334\":1,\"2349\":3,\"2351\":4,\"2353\":3,\"2356\":1,\"2364\":1,\"2365\":4,\"2371\":1,\"2372\":2,\"2373\":2,\"2376\":2,\"2377\":2,\"2408\":4,\"2426\":1,\"2436\":1,\"2438\":1,\"2440\":1,\"2441\":1,\"2442\":4,\"2483\":1,\"2572\":1,\"2598\":1,\"2600\":1,\"2621\":2,\"2636\":1,\"2654\":3,\"2672\":3,\"2678\":3,\"2690\":3,\"2777\":2,\"2781\":1,\"2793\":1,\"2796\":1,\"2799\":2,\"2801\":1,\"2816\":1,\"2817\":1,\"2818\":1,\"2858\":2,\"2890\":1,\"2964\":1,\"2976\":1,\"2981\":1,\"2983\":1,\"2986\":3,\"2991\":1,\"2992\":4,\"2993\":2,\"2997\":1,\"2999\":1,\"3000\":5,\"3003\":2,\"3005\":1,\"3006\":4,\"3008\":2,\"3011\":4,\"3018\":2,\"3019\":4,\"3067\":1,\"3109\":1,\"3111\":1,\"3112\":2,\"3113\":3,\"3156\":1,\"3159\":1,\"3160\":1}}],[\"nacos\",{\"1\":{\"10\":1,\"11\":1}}],[\"nginx\",{\"0\":{\"52\":1},\"1\":{\"10\":1,\"372\":1,\"398\":1}}],[\"a9898c75\",{\"1\":{\"3198\":1}}],[\"again\",{\"1\":{\"3161\":1}}],[\"aggregationbuilders可继续调用field函数\",{\"1\":{\"3014\":1}}],[\"aggregationbuilders可以调用聚合函数\",{\"1\":{\"3014\":1}}],[\"aggregationbuilders\",{\"1\":{\"3014\":2,\"3015\":1,\"3016\":1}}],[\"aggregation\",{\"0\":{\"3014\":1},\"1\":{\"3014\":1,\"3015\":1,\"3016\":1}}],[\"aggregations\",{\"1\":{\"2957\":1,\"3015\":1}}],[\"aggs\",{\"1\":{\"2954\":1,\"2956\":1}}],[\"agetype\",{\"1\":{\"2781\":3}}],[\"age>\",{\"1\":{\"2779\":1,\"2782\":1}}],[\"age>o\",{\"1\":{\"501\":1}}],[\"agent\",{\"1\":{\"2602\":1}}],[\"age=21\",{\"1\":{\"2260\":1}}],[\"age=1\",{\"1\":{\"2254\":1,\"2257\":1,\"2259\":2}}],[\"age=12\",{\"1\":{\"1654\":1,\"1657\":1}}],[\"age=0\",{\"1\":{\"2010\":1,\"2037\":1}}],[\"age=35\",{\"1\":{\"2236\":1}}],[\"age=34\",{\"1\":{\"2232\":1,\"2233\":1}}],[\"age=33\",{\"1\":{\"1657\":1}}],[\"age=32\",{\"1\":{\"1657\":1}}],[\"age=\",{\"1\":{\"1186\":1,\"2007\":1}}],[\"age++\",{\"1\":{\"1034\":1}}],[\"age<o\",{\"1\":{\"501\":1}}],[\"age1\",{\"1\":{\"127\":1}}],[\"age\",{\"0\":{\"1303\":1},\"1\":{\"124\":6,\"127\":1,\"288\":3,\"501\":6,\"606\":2,\"607\":3,\"615\":1,\"616\":4,\"617\":5,\"841\":1,\"972\":1,\"1010\":1,\"1011\":1,\"1014\":2,\"1018\":1,\"1019\":3,\"1022\":1,\"1034\":1,\"1054\":2,\"1056\":5,\"1068\":4,\"1071\":2,\"1082\":6,\"1104\":1,\"1120\":6,\"1160\":5,\"1165\":2,\"1180\":2,\"1186\":1,\"1278\":2,\"1286\":3,\"1432\":1,\"1657\":2,\"1879\":3,\"2007\":5,\"2008\":1,\"2009\":3,\"2044\":1,\"2045\":1,\"2221\":5,\"2321\":1,\"2777\":2,\"2781\":1,\"2981\":1,\"2986\":3,\"2991\":1,\"2992\":4,\"2993\":3,\"2997\":2,\"2999\":1,\"3000\":5,\"3002\":1,\"3003\":3,\"3006\":3,\"3008\":2,\"3010\":1,\"3011\":4,\"3015\":1,\"3019\":1}}],[\"a=\",{\"1\":{\"2782\":1}}],[\"a就前缀\",{\"1\":{\"2782\":1}}],[\"afilter就先执行了\",{\"1\":{\"2706\":1}}],[\"afilter\",{\"1\":{\"2706\":1}}],[\"aftifacts\",{\"1\":{\"2499\":1}}],[\"aop代理里的方法可以在执行目标方法之前\",{\"1\":{\"2100\":1}}],[\"aop代理包含了目标对象的全部方法\",{\"1\":{\"2100\":1}}],[\"aop代理可代替目标对象\",{\"1\":{\"2100\":1}}],[\"aop代理\",{\"0\":{\"2100\":1}}],[\"aop\",{\"0\":{\"2099\":1}}],[\"aop与动态代理\",{\"0\":{\"2098\":1}}],[\"avg\",{\"1\":{\"2953\":2,\"2954\":3,\"2957\":1,\"3013\":2,\"3014\":2}}],[\"avi\",{\"1\":{\"1797\":1,\"1838\":2}}],[\"availability\",{\"1\":{\"3026\":1}}],[\"available\",{\"1\":{\"2744\":1}}],[\"avatars\",{\"1\":{\"562\":1}}],[\"avatar\",{\"1\":{\"562\":1}}],[\"avadar\",{\"1\":{\"546\":1,\"547\":1}}],[\"a支付成功了\",{\"1\":{\"1506\":1}}],[\"a和b同时通过了if判断\",{\"1\":{\"1506\":1}}],[\"a使用该账户消费2000元\",{\"1\":{\"1506\":1}}],[\"a+b\",{\"1\":{\"1307\":2,\"1308\":2}}],[\"a++\",{\"1\":{\"1105\":1}}],[\"a的关系\",{\"1\":{\"1257\":1}}],[\"a返回true\",{\"1\":{\"1168\":1}}],[\"awt\",{\"1\":{\"1090\":1}}],[\"a<g>\",{\"1\":{\"1738\":1}}],[\"a<=0\",{\"1\":{\"1056\":1}}],[\"a<=20\",{\"1\":{\"901\":1}}],[\"a<20\",{\"1\":{\"525\":1}}],[\"a123\",{\"1\":{\"3196\":1}}],[\"a1\",{\"1\":{\"893\":2,\"1812\":2,\"1816\":1}}],[\"ahello10\",{\"1\":{\"886\":1}}],[\"a2cf\",{\"1\":{\"3198\":1}}],[\"a2\",{\"1\":{\"648\":1,\"893\":2}}],[\"authmechanism=default\",{\"1\":{\"3222\":1,\"3225\":1}}],[\"authentication\",{\"1\":{\"3201\":1,\"3204\":1,\"3236\":1,\"3237\":1}}],[\"auth=true\",{\"1\":{\"3180\":1}}],[\"auth\",{\"1\":{\"3180\":1,\"3201\":2}}],[\"authorization\",{\"1\":{\"3203\":1,\"3209\":1,\"3214\":1}}],[\"author\",{\"1\":{\"808\":1,\"811\":3}}],[\"autumn\",{\"1\":{\"1373\":1,\"1382\":1}}],[\"autocommit\",{\"1\":{\"2380\":1}}],[\"auto\",{\"1\":{\"348\":1,\"2371\":1,\"2435\":1}}],[\"autowired\",{\"1\":{\"128\":1,\"132\":1,\"181\":1,\"275\":1,\"284\":1,\"288\":1,\"289\":1,\"347\":1,\"360\":1,\"361\":1,\"364\":1,\"371\":1}}],[\"augend\",{\"1\":{\"531\":1}}],[\"attempted\",{\"1\":{\"3161\":1}}],[\"attlist\",{\"1\":{\"2777\":1}}],[\"attribute\",{\"1\":{\"2781\":1}}],[\"attributereplaced\",{\"1\":{\"2717\":1,\"2718\":1,\"2719\":1}}],[\"attributeremoved\",{\"1\":{\"2717\":1,\"2718\":1,\"2719\":1}}],[\"attributeadded\",{\"1\":{\"2717\":1,\"2718\":1,\"2719\":1}}],[\"attr\",{\"1\":{\"1920\":1}}],[\"atguigu\",{\"1\":{\"1178\":2,\"1179\":2,\"1983\":1,\"1990\":3,\"1993\":1,\"2004\":1}}],[\"atan\",{\"1\":{\"522\":1}}],[\"atoffset\",{\"0\":{\"477\":1},\"1\":{\"477\":2}}],[\"am\",{\"1\":{\"434\":2,\"741\":3,\"742\":3,\"744\":2}}],[\"amqp<\",{\"1\":{\"95\":1,\"328\":1,\"336\":1}}],[\"acknowledgedresponse\",{\"1\":{\"2978\":1}}],[\"acknowledged\",{\"1\":{\"2885\":2,\"2896\":1,\"2964\":1,\"2975\":2,\"3073\":1,\"3168\":1}}],[\"account\",{\"1\":{\"1908\":1}}],[\"accidental\",{\"1\":{\"812\":1}}],[\"access\",{\"1\":{\"2394\":1,\"3182\":1}}],[\"accesscontroller\",{\"1\":{\"1831\":1}}],[\"accessibleobject\",{\"1\":{\"612\":1}}],[\"accept方法\",{\"0\":{\"1976\":1}}],[\"accept\",{\"1\":{\"726\":1,\"1973\":1,\"1977\":1,\"2123\":2,\"2144\":1,\"2155\":1,\"2156\":2,\"2601\":3,\"2602\":3}}],[\"acos\",{\"1\":{\"522\":1}}],[\"ac\",{\"1\":{\"412\":1}}],[\"actualtypearguments\",{\"1\":{\"2053\":2}}],[\"actuator<\",{\"1\":{\"319\":1,\"336\":1}}],[\"actuator依赖\",{\"1\":{\"319\":1}}],[\"actuator监控\",{\"0\":{\"319\":1}}],[\"action=\",{\"1\":{\"2609\":1,\"2623\":1}}],[\"action\",{\"1\":{\"1831\":1,\"2502\":1,\"2976\":1,\"3184\":2}}],[\"activity\",{\"1\":{\"1291\":1}}],[\"activation>\",{\"1\":{\"235\":1}}],[\"activate\",{\"1\":{\"226\":2}}],[\"activebydefault>\",{\"1\":{\"235\":1}}],[\"active>pro<\",{\"1\":{\"235\":1}}],[\"active>\",{\"1\":{\"235\":2}}],[\"active>dev<\",{\"1\":{\"235\":1}}],[\"active指定哪个环境组生效\",{\"1\":{\"234\":1}}],[\"active\",{\"1\":{\"226\":1,\"229\":1,\"232\":1,\"234\":1,\"236\":2,\"237\":1,\"293\":2}}],[\"activemq<\",{\"1\":{\"95\":4}}],[\"activemq\",{\"1\":{\"95\":5}}],[\"about\",{\"1\":{\"3049\":1,\"3142\":1}}],[\"abd\",{\"1\":{\"2164\":1}}],[\"abb\",{\"1\":{\"743\":1}}],[\"abstractlist<string>\",{\"1\":{\"1738\":1}}],[\"abstractlist中的add\",{\"1\":{\"649\":1}}],[\"abstract修饰的\",{\"1\":{\"1260\":1}}],[\"abstract不能用来修饰私有方法\",{\"1\":{\"1248\":1}}],[\"abstract不能用来修饰属性\",{\"1\":{\"1248\":1}}],[\"abstract的使用注意\",{\"0\":{\"1248\":1}}],[\"abstract方法\",{\"0\":{\"1247\":1}}],[\"abstract关键字\",{\"1\":{\"1029\":1}}],[\"abstract\",{\"0\":{\"1245\":1,\"1246\":1},\"1\":{\"523\":1,\"564\":4,\"572\":3,\"1069\":1,\"1090\":1,\"1219\":1,\"1246\":1,\"1247\":1,\"1249\":2,\"1251\":2,\"1252\":2,\"1259\":3,\"2405\":1}}],[\"abstractstringbuilder\",{\"1\":{\"440\":2}}],[\"abs\",{\"0\":{\"512\":1},\"1\":{\"512\":4}}],[\"abc123\",{\"1\":{\"2299\":1,\"2300\":1}}],[\"abc\",{\"1\":{\"424\":1,\"811\":3,\"877\":2,\"878\":1,\"1327\":1,\"1330\":1,\"1332\":1,\"1339\":1,\"1418\":1,\"2164\":1}}],[\"ab\",{\"1\":{\"412\":1,\"444\":1}}],[\"aaa\",{\"1\":{\"2639\":1,\"2805\":1}}],[\"aaabbb\",{\"1\":{\"739\":1}}],[\"aa\",{\"1\":{\"404\":4,\"405\":2,\"508\":3,\"657\":2,\"658\":2,\"659\":1,\"660\":1,\"662\":2,\"663\":1,\"664\":2,\"665\":2,\"666\":1,\"877\":2,\"998\":1,\"1203\":1,\"1262\":1,\"1594\":1,\"1595\":1,\"1600\":1,\"1603\":1,\"1654\":2,\"1683\":1,\"1720\":1,\"1745\":2,\"1747\":2,\"1748\":2,\"2215\":3,\"2387\":1}}],[\"aaron=a\",{\"1\":{\"711\":2,\"712\":2,\"713\":2,\"714\":1,\"715\":1,\"716\":1,\"717\":1,\"718\":1,\"719\":1,\"720\":2,\"721\":1,\"722\":1,\"723\":2}}],[\"aaron\",{\"1\":{\"368\":1,\"502\":3,\"503\":2,\"509\":2,\"711\":1,\"721\":2,\"811\":1,\"2008\":1,\"2009\":1,\"2180\":1,\"2221\":6,\"2980\":1,\"3000\":1,\"3008\":1,\"3011\":1}}],[\"a\",{\"0\":{\"644\":1,\"645\":1,\"1244\":1,\"1997\":1,\"2011\":1,\"2023\":1,\"2035\":1,\"2070\":1},\"1\":{\"288\":1,\"424\":1,\"425\":2,\"444\":1,\"445\":2,\"512\":1,\"513\":3,\"514\":1,\"515\":1,\"516\":1,\"518\":1,\"519\":1,\"520\":1,\"521\":4,\"524\":2,\"525\":2,\"526\":3,\"527\":3,\"540\":2,\"541\":2,\"542\":2,\"543\":1,\"544\":1,\"545\":1,\"546\":1,\"547\":1,\"551\":1,\"552\":1,\"564\":2,\"565\":2,\"566\":2,\"571\":1,\"574\":1,\"576\":5,\"578\":1,\"579\":1,\"581\":1,\"626\":1,\"636\":2,\"642\":1,\"644\":1,\"645\":1,\"646\":1,\"648\":1,\"649\":2,\"650\":1,\"651\":4,\"670\":1,\"696\":2,\"697\":3,\"698\":2,\"699\":2,\"700\":1,\"701\":1,\"702\":3,\"703\":4,\"704\":3,\"711\":2,\"713\":1,\"715\":1,\"717\":1,\"722\":4,\"739\":1,\"741\":3,\"742\":3,\"743\":1,\"753\":2,\"854\":1,\"866\":1,\"871\":1,\"886\":2,\"887\":2,\"901\":1,\"1056\":2,\"1101\":2,\"1102\":1,\"1104\":2,\"1105\":1,\"1112\":2,\"1128\":3,\"1168\":2,\"1178\":1,\"1182\":5,\"1219\":5,\"1257\":1,\"1265\":1,\"1266\":1,\"1293\":1,\"1307\":2,\"1308\":2,\"1334\":2,\"1423\":1,\"1432\":1,\"1455\":2,\"1532\":1,\"1547\":1,\"1751\":2,\"1752\":2,\"1800\":2,\"1804\":1,\"1805\":1,\"1834\":1,\"1847\":1,\"1848\":1,\"1851\":1,\"1853\":2,\"1888\":2,\"1958\":4,\"1989\":1,\"2025\":1,\"2031\":1,\"2048\":2,\"2100\":1,\"2196\":1,\"2197\":1,\"2507\":1,\"2646\":1,\"2647\":1,\"2686\":1,\"2693\":1,\"2694\":2,\"3034\":1,\"3107\":1,\"3150\":1,\"3161\":2}}],[\"adapter\",{\"1\":{\"1291\":1}}],[\"admin库的管理用户\",{\"1\":{\"3194\":1}}],[\"admin数据库\",{\"1\":{\"3194\":1}}],[\"admin>\",{\"1\":{\"3193\":1,\"3195\":1,\"3198\":2,\"3201\":1,\"3210\":1}}],[\"admincommand\",{\"1\":{\"3161\":1}}],[\"admin\",{\"1\":{\"271\":2,\"281\":2,\"2976\":1,\"3050\":1,\"3060\":1,\"3184\":1,\"3193\":2,\"3194\":1,\"3195\":2,\"3196\":3,\"3198\":11,\"3201\":1,\"3207\":1,\"3210\":1,\"3236\":1,\"3237\":1}}],[\"additional\",{\"1\":{\"3243\":1}}],[\"addinnerinterceptor\",{\"1\":{\"350\":1}}],[\"addarb\",{\"1\":{\"3160\":2}}],[\"addall\",{\"0\":{\"658\":1,\"698\":1},\"1\":{\"658\":2,\"698\":2}}],[\"addcookie\",{\"1\":{\"2794\":2,\"2798\":1,\"2804\":2,\"2805\":1,\"2806\":1,\"2822\":1}}],[\"addjarpkg\",{\"1\":{\"2743\":1}}],[\"addbath\",{\"1\":{\"2368\":1,\"2369\":1,\"2370\":1}}],[\"addbatch\",{\"0\":{\"2368\":1},\"1\":{\"2376\":1,\"2377\":1}}],[\"add方法是有泛型限制的\",{\"1\":{\"1709\":1}}],[\"add添加数据\",{\"0\":{\"1625\":1}}],[\"add操作\",{\"0\":{\"1618\":1}}],[\"addxxxlistener\",{\"1\":{\"1283\":1}}],[\"add\",{\"0\":{\"531\":1,\"657\":1,\"697\":1},\"1\":{\"531\":2,\"649\":1,\"657\":3,\"658\":4,\"682\":3,\"689\":7,\"691\":3,\"697\":4,\"1128\":11,\"1594\":3,\"1603\":3,\"1618\":1,\"1619\":1,\"1621\":1,\"1625\":1,\"1654\":8,\"1657\":4,\"1707\":5,\"1709\":4,\"1733\":1,\"1744\":3,\"1745\":3,\"1747\":4,\"1748\":4,\"2221\":8,\"2290\":1,\"2355\":1,\"2405\":1,\"2486\":1,\"2530\":1,\"2986\":3,\"2987\":3,\"3159\":2}}],[\"addresourcelocations\",{\"1\":{\"393\":2}}],[\"addresourcehandler\",{\"1\":{\"393\":2}}],[\"addresourcehandlers\",{\"1\":{\"393\":1}}],[\"address\",{\"0\":{\"382\":1},\"1\":{\"167\":3,\"170\":1,\"374\":1,\"1964\":1,\"1971\":1,\"1986\":1,\"2460\":1}}],[\"addeed\",{\"1\":{\"72\":1}}],[\"already\",{\"1\":{\"2460\":1}}],[\"alt\",{\"1\":{\"2106\":1}}],[\"alen\",{\"1\":{\"2010\":2}}],[\"allocation\",{\"1\":{\"2890\":1}}],[\"allowed\",{\"1\":{\"2362\":1}}],[\"allmatch\",{\"0\":{\"2229\":1},\"1\":{\"2229\":2}}],[\"allen=a\",{\"1\":{\"711\":2,\"712\":2,\"713\":1,\"714\":1,\"715\":1,\"716\":1,\"717\":1,\"718\":1,\"719\":1,\"720\":2,\"721\":1,\"722\":1,\"723\":2}}],[\"allen\",{\"1\":{\"711\":1,\"713\":3,\"715\":3,\"721\":2}}],[\"allargscontructor\",{\"1\":{\"344\":1}}],[\"all\",{\"1\":{\"262\":2,\"1430\":1,\"2931\":1}}],[\"aliases查询结果\",{\"1\":{\"2977\":1}}],[\"aliases\",{\"1\":{\"2890\":1}}],[\"alipay\",{\"1\":{\"1368\":1}}],[\"aliyun<\",{\"1\":{\"335\":2}}],[\"aliyun\",{\"1\":{\"73\":1}}],[\"alibaba<\",{\"1\":{\"266\":1,\"270\":1,\"280\":1,\"322\":1,\"333\":1,\"336\":1,\"389\":2,\"2837\":1}}],[\"alibaba最新的稳定版需要的是springboot\",{\"1\":{\"72\":1}}],[\"alibaba\",{\"1\":{\"10\":1,\"2424\":1}}],[\"aifaceapplicationtests\",{\"1\":{\"180\":1}}],[\"aifaceapplication\",{\"1\":{\"103\":2}}],[\"asc\",{\"1\":{\"2951\":1,\"3009\":1,\"3010\":1}}],[\"ascii\",{\"1\":{\"854\":1,\"855\":1,\"1861\":1}}],[\"async\",{\"1\":{\"2702\":1}}],[\"asp\",{\"1\":{\"2447\":1}}],[\"aspect\",{\"0\":{\"2099\":1}}],[\"aspectj\",{\"1\":{\"95\":1}}],[\"aslist方法快速生成一个list集合\",{\"1\":{\"696\":1}}],[\"aslist\",{\"0\":{\"649\":1,\"651\":1,\"696\":1},\"1\":{\"649\":2,\"651\":2,\"696\":1,\"2215\":1,\"2221\":1,\"2226\":1,\"2239\":1,\"2240\":1}}],[\"asin\",{\"1\":{\"522\":1}}],[\"asshole\",{\"1\":{\"812\":1}}],[\"assign\",{\"1\":{\"390\":1}}],[\"assertj\",{\"1\":{\"95\":1}}],[\"analyze\",{\"1\":{\"3118\":1}}],[\"analyzer\",{\"1\":{\"2963\":1}}],[\"an\",{\"1\":{\"2435\":1,\"2860\":1,\"3204\":1}}],[\"any\",{\"1\":{\"2233\":2}}],[\"anymatch\",{\"0\":{\"2230\":1},\"1\":{\"2230\":2}}],[\"annos\",{\"1\":{\"2048\":2,\"2056\":2}}],[\"anno\",{\"1\":{\"620\":2}}],[\"annotations\",{\"1\":{\"1432\":2,\"2056\":2}}],[\"annotation在反射函数中的使用示例\",{\"1\":{\"1432\":1}}],[\"annotationtest\",{\"1\":{\"1432\":1}}],[\"annotationtest<\",{\"1\":{\"1423\":1}}],[\"annotationtype\",{\"1\":{\"1404\":1}}],[\"annotation类将被javadoc\",{\"1\":{\"1415\":1}}],[\"annotation类型\",{\"1\":{\"1408\":1}}],[\"annotation的生命周期\",{\"0\":{\"1411\":1}}],[\"annotation信息仅存在于编译器处理期间\",{\"1\":{\"1406\":1}}],[\"annotation有了某种用途\",{\"1\":{\"1405\":1}}],[\"annotation>\",{\"1\":{\"1404\":1}}],[\"annotation接口\",{\"1\":{\"1404\":1}}],[\"annotation组成部分\",{\"0\":{\"1403\":1}}],[\"annotation其实就是代码里的特殊标记\",{\"1\":{\"1387\":1}}],[\"annotation\",{\"0\":{\"1385\":1,\"1404\":1},\"1\":{\"620\":2,\"1295\":1,\"1387\":2,\"1389\":3,\"1395\":3,\"1402\":5,\"1404\":4,\"1405\":7,\"1406\":9,\"1408\":2,\"1409\":3,\"1412\":3,\"1415\":1,\"1416\":2,\"1426\":1,\"1431\":2,\"1432\":11,\"2016\":1,\"2048\":2,\"2056\":2}}],[\"annotatedelement\",{\"1\":{\"584\":1}}],[\"anonymous\",{\"1\":{\"2260\":2}}],[\"anotherxxx\",{\"1\":{\"525\":1}}],[\"anotherinteger\",{\"1\":{\"498\":2}}],[\"anotherstring\",{\"1\":{\"412\":1,\"498\":3}}],[\"anothrerstring\",{\"1\":{\"405\":1}}],[\"ano\",{\"1\":{\"202\":2,\"2460\":1}}],[\"antlr2\",{\"1\":{\"95\":1}}],[\"android中注解占据了更重要的角色\",{\"1\":{\"1388\":1}}],[\"android\",{\"1\":{\"764\":1}}],[\"and\",{\"1\":{\"79\":1,\"421\":2,\"2310\":1,\"2311\":1,\"2502\":2,\"3161\":1}}],[\"apache\",{\"0\":{\"2430\":1},\"1\":{\"95\":4,\"348\":1,\"390\":1,\"2431\":1,\"2433\":3,\"2489\":1,\"2844\":1}}],[\"appdata\",{\"1\":{\"2507\":1}}],[\"appliedoptime\",{\"1\":{\"3156\":1}}],[\"application域对象\",{\"0\":{\"2677\":1}}],[\"application项目的目录结构稍有不同\",{\"1\":{\"2484\":1}}],[\"application\",{\"0\":{\"2501\":1},\"1\":{\"74\":1,\"113\":1,\"117\":3,\"150\":1,\"198\":1,\"199\":1,\"216\":2,\"219\":1,\"228\":4,\"231\":3,\"271\":1,\"281\":1,\"310\":1,\"313\":3,\"340\":1,\"390\":1,\"1243\":1,\"2483\":1,\"2486\":1,\"2502\":1,\"2601\":1,\"2677\":1}}],[\"applet\",{\"1\":{\"2522\":1,\"2736\":1}}],[\"applet程序或者应用来使用这些对象\",{\"1\":{\"1284\":1}}],[\"apply\",{\"1\":{\"728\":1,\"2144\":1,\"2176\":1,\"2177\":1,\"2179\":1,\"2180\":1,\"2184\":1,\"2185\":1}}],[\"append参数\",{\"1\":{\"574\":1}}],[\"append\",{\"0\":{\"452\":1},\"1\":{\"445\":2,\"452\":3,\"574\":2,\"575\":2,\"1547\":8}}],[\"appender>\",{\"1\":{\"262\":4}}],[\"appengine\",{\"1\":{\"95\":1}}],[\"api文档的httpservletrequest接口中方法说明\",{\"1\":{\"2590\":1}}],[\"api介绍\",{\"0\":{\"2433\":1}}],[\"api使用背景\",{\"0\":{\"2189\":1}}],[\"api是操作集合和数组的\",{\"1\":{\"2187\":1}}],[\"api其实就是一套api\",{\"1\":{\"2187\":1}}],[\"api取得任何类的内部信息\",{\"1\":{\"1998\":1}}],[\"api中提供了两套nio\",{\"1\":{\"1913\":1}}],[\"api中创建线程的方式\",{\"0\":{\"1462\":1}}],[\"api提供了两个转换流的类\",{\"1\":{\"1842\":1}}],[\"api提供了带缓冲功能的流类\",{\"1\":{\"1825\":1}}],[\"api明确\",{\"1\":{\"1481\":1}}],[\"api开发\",{\"1\":{\"363\":1}}],[\"api接口提供控制开关\",{\"1\":{\"357\":1}}],[\"api<\",{\"1\":{\"174\":1}}],[\"api\",{\"0\":{\"2187\":1,\"2188\":1,\"2968\":1},\"1\":{\"57\":1,\"313\":1,\"461\":3,\"815\":1,\"1088\":1,\"1095\":2,\"1913\":2,\"2188\":4,\"2237\":1,\"2283\":3,\"2525\":1,\"2526\":1,\"2530\":1,\"2542\":1,\"2968\":1}}],[\"arbiter表示仲裁节点\",{\"1\":{\"3160\":1}}],[\"arbiteronly\",{\"1\":{\"3153\":1,\"3154\":1,\"3159\":2}}],[\"arbiter\",{\"1\":{\"3131\":1,\"3138\":1,\"3160\":1}}],[\"archive\",{\"1\":{\"2731\":1}}],[\"archetypes\",{\"1\":{\"2489\":1}}],[\"archetype\",{\"1\":{\"2489\":2,\"2493\":1}}],[\"arithmeticexception\",{\"0\":{\"1334\":1},\"1\":{\"1323\":1}}],[\"area\",{\"1\":{\"1298\":1}}],[\"are\",{\"1\":{\"811\":1,\"1816\":1}}],[\"arrstream\",{\"1\":{\"2198\":1}}],[\"arrs\",{\"1\":{\"1721\":1}}],[\"arr3\",{\"1\":{\"990\":3,\"998\":3}}],[\"arr2\",{\"1\":{\"647\":3,\"648\":2,\"968\":1,\"990\":2,\"998\":2,\"1573\":1}}],[\"arr1\",{\"1\":{\"642\":3,\"644\":3,\"645\":3,\"646\":3,\"647\":5,\"648\":2,\"650\":3,\"968\":1,\"990\":3,\"998\":2,\"1573\":1}}],[\"array和object\",{\"1\":{\"3033\":1}}],[\"arrayhandler\",{\"1\":{\"2436\":1}}],[\"arrayindexoutofboundsexception\",{\"0\":{\"1329\":1},\"1\":{\"997\":1,\"1323\":1,\"1343\":1}}],[\"array1\",{\"1\":{\"965\":1,\"966\":2}}],[\"array2\",{\"1\":{\"965\":1,\"966\":2}}],[\"arraylisthandler\",{\"1\":{\"2436\":1}}],[\"arraylist的底层做了一些改变\",{\"1\":{\"1621\":1}}],[\"arraylist的变化\",{\"0\":{\"1621\":1}}],[\"arraylist源码分析\",{\"0\":{\"1616\":1}}],[\"arraylist<t>\",{\"1\":{\"2355\":2,\"2405\":2}}],[\"arraylist<\",{\"1\":{\"1755\":1,\"1757\":2}}],[\"arraylist<object>\",{\"1\":{\"1753\":1}}],[\"arraylist<person>\",{\"1\":{\"1753\":1}}],[\"arraylist<man>\",{\"1\":{\"1753\":1}}],[\"arraylist<e>\",{\"1\":{\"1733\":1}}],[\"arraylist<string>\",{\"1\":{\"1716\":1,\"1721\":2,\"1737\":1,\"1738\":1,\"1747\":1,\"1748\":1}}],[\"arraylist<integer>\",{\"1\":{\"689\":1,\"1709\":1,\"1721\":1,\"1747\":1,\"1748\":1}}],[\"arraylist<>\",{\"1\":{\"651\":1,\"657\":1,\"658\":2,\"682\":1,\"689\":2,\"691\":1,\"697\":1,\"1709\":1,\"1716\":1,\"1721\":3,\"1733\":1,\"1745\":1,\"1747\":2,\"1748\":2,\"2221\":3}}],[\"arraylist$itr\",{\"1\":{\"671\":1}}],[\"arraylist\",{\"0\":{\"1612\":1},\"1\":{\"651\":1,\"655\":1,\"702\":1,\"810\":2,\"1578\":1,\"1583\":1,\"1594\":1,\"1603\":1,\"1611\":1,\"1617\":2,\"1620\":2,\"1621\":2,\"1707\":2}}],[\"arraylist中重写了这些方法\",{\"1\":{\"649\":1}}],[\"array\",{\"1\":{\"641\":1,\"827\":1,\"959\":1,\"2198\":1,\"2199\":3,\"2314\":1,\"2963\":1,\"3071\":1}}],[\"arrays工具类\",{\"0\":{\"999\":1},\"1\":{\"999\":1}}],[\"arrays$arraylist和arraylist都是继承abstractlist\",{\"1\":{\"649\":1}}],[\"arrays类重写了object类中的equals\",{\"1\":{\"648\":1}}],[\"arrays类即为操作数组的工具类\",{\"1\":{\"641\":1}}],[\"arrays\",{\"0\":{\"641\":1,\"696\":1},\"1\":{\"34\":1,\"425\":1,\"426\":2,\"503\":2,\"508\":4,\"509\":2,\"546\":1,\"547\":1,\"566\":1,\"595\":1,\"600\":1,\"601\":1,\"604\":1,\"605\":1,\"608\":1,\"609\":1,\"620\":1,\"624\":1,\"625\":1,\"641\":2,\"642\":1,\"644\":2,\"645\":2,\"646\":2,\"647\":3,\"648\":1,\"649\":1,\"650\":2,\"651\":1,\"669\":1,\"696\":1,\"753\":1,\"1237\":1,\"1853\":1,\"2198\":2,\"2199\":1,\"2215\":1,\"2221\":1,\"2226\":1,\"2239\":1,\"2240\":1,\"2986\":1,\"2987\":1}}],[\"arr\",{\"1\":{\"424\":2,\"425\":2,\"508\":5,\"649\":2,\"670\":1,\"973\":1,\"982\":4,\"984\":4,\"985\":3,\"986\":1,\"988\":3,\"989\":4,\"991\":3,\"992\":3,\"997\":3,\"1128\":2,\"1312\":1,\"1327\":2,\"1329\":2,\"1343\":2,\"1573\":1,\"1604\":2,\"1606\":5,\"1607\":4,\"1733\":2,\"1734\":1,\"1920\":1,\"2198\":2}}],[\"arg2\",{\"1\":{\"2128\":1,\"2130\":1}}],[\"arg1\",{\"1\":{\"2122\":1,\"2124\":1,\"2126\":1,\"2128\":1,\"2130\":1}}],[\"argumengts\",{\"1\":{\"1046\":1}}],[\"arguments选项框的\",{\"1\":{\"212\":1}}],[\"arguments就是输入临时属性的\",{\"1\":{\"212\":1}}],[\"arg\",{\"1\":{\"213\":3}}],[\"args数组\",{\"1\":{\"1293\":1}}],[\"args\",{\"1\":{\"103\":2,\"104\":3,\"153\":1,\"213\":4,\"626\":1,\"790\":1,\"936\":1,\"938\":1,\"956\":1,\"1011\":1,\"1019\":1,\"1032\":1,\"1034\":1,\"1044\":1,\"1054\":1,\"1056\":1,\"1105\":1,\"1153\":1,\"1160\":1,\"1218\":1,\"1219\":1,\"1249\":1,\"1312\":2,\"1352\":1,\"1361\":1,\"1432\":1,\"1472\":1,\"1480\":1,\"1481\":1,\"1489\":1,\"1492\":1,\"1509\":1,\"1512\":1,\"1520\":1,\"1536\":1,\"1547\":1,\"1556\":1,\"1562\":1,\"1569\":1,\"1720\":1,\"2048\":5,\"2066\":1,\"2082\":1,\"2095\":2,\"2101\":2,\"2333\":3,\"2352\":3,\"2355\":3,\"2386\":3,\"2405\":12,\"2972\":1,\"2975\":1,\"2977\":1,\"2978\":1,\"2980\":1,\"2983\":1,\"2984\":1,\"2986\":1,\"2987\":1,\"2991\":1,\"2992\":1,\"2993\":1,\"2997\":1,\"3000\":1,\"3003\":1,\"3006\":1,\"3008\":1,\"3010\":1,\"3015\":1,\"3019\":1}}],[\"articel\",{\"1\":{\"3168\":1}}],[\"article\",{\"1\":{\"3168\":2,\"3193\":1,\"3197\":1,\"3198\":1,\"3236\":1,\"3237\":1}}],[\"article>\",{\"1\":{\"3168\":1}}],[\"articleid\",{\"1\":{\"3073\":1,\"3076\":2,\"3082\":1,\"3083\":1,\"3168\":1}}],[\"artifacts配置\",{\"0\":{\"2514\":1}}],[\"artifacts\",{\"1\":{\"2475\":1,\"2487\":1,\"2514\":1,\"2744\":2}}],[\"artifactid>\",{\"1\":{\"76\":1,\"93\":1,\"94\":1,\"95\":5,\"99\":5,\"110\":2,\"111\":1,\"141\":1,\"165\":1,\"174\":2,\"179\":1,\"193\":1,\"266\":1,\"270\":3,\"280\":3,\"286\":1,\"292\":1,\"316\":1,\"317\":1,\"318\":1,\"319\":1,\"321\":1,\"322\":1,\"323\":1,\"324\":1,\"326\":1,\"328\":1,\"330\":1,\"331\":1,\"332\":1,\"333\":1,\"335\":2,\"336\":12,\"344\":1,\"389\":9,\"2837\":1,\"2971\":2,\"2982\":1,\"3229\":1,\"3234\":1}}],[\"artifact\",{\"1\":{\"71\":1,\"2483\":1}}],[\"artemis\",{\"1\":{\"95\":1}}],[\"a~z\",{\"1\":{\"10\":1}}],[\"mp\",{\"1\":{\"3018\":2,\"3019\":2}}],[\"mp4<\",{\"1\":{\"2685\":1}}],[\"mp4\",{\"1\":{\"1797\":1}}],[\"mp3\",{\"1\":{\"1797\":1}}],[\"mpconfig\",{\"1\":{\"350\":1}}],[\"mr1\",{\"1\":{\"1509\":3}}],[\"m27019\",{\"1\":{\"3139\":1,\"3144\":4,\"3213\":1}}],[\"m27018\",{\"1\":{\"3139\":1,\"3143\":4,\"3213\":1}}],[\"m27017\",{\"1\":{\"3139\":1,\"3142\":4,\"3213\":1,\"3214\":1}}],[\"m2\",{\"1\":{\"1472\":2}}],[\"m1对象不能重复调用start\",{\"1\":{\"1472\":1}}],[\"m1\",{\"1\":{\"1472\":4,\"1492\":4,\"1512\":4,\"1520\":4}}],[\"m4\",{\"1\":{\"1170\":1}}],[\"mvc与三层架构\",{\"0\":{\"2762\":1}}],[\"mvc的优点\",{\"0\":{\"2756\":1}}],[\"mvc的设计模式\",{\"1\":{\"1087\":1}}],[\"mvc\",{\"0\":{\"2753\":1},\"1\":{\"2754\":1,\"2763\":3,\"2764\":2}}],[\"mvc是常用的设计模式之一\",{\"1\":{\"1289\":1}}],[\"mvc设计模式\",{\"0\":{\"1289\":1}}],[\"mvn\",{\"1\":{\"190\":1}}],[\"mvnw\",{\"1\":{\"74\":2}}],[\"m+n\",{\"1\":{\"1044\":1}}],[\"m和n相等\",{\"1\":{\"914\":1}}],[\"m大\",{\"1\":{\"914\":1}}],[\"m>n\",{\"1\":{\"913\":2}}],[\"mc\",{\"1\":{\"645\":2}}],[\"millis\",{\"1\":{\"2920\":2}}],[\"millitime\",{\"1\":{\"1479\":1}}],[\"mimetype\",{\"1\":{\"2686\":1}}],[\"mime\",{\"1\":{\"2685\":2}}],[\"mime类型\",{\"0\":{\"2684\":1}}],[\"mi\",{\"1\":{\"1946\":1,\"1947\":2,\"1948\":1}}],[\"misc\",{\"1\":{\"596\":1,\"597\":1,\"2032\":2}}],[\"minimum\",{\"1\":{\"2858\":2}}],[\"mininclusive\",{\"1\":{\"2781\":1}}],[\"minidle\",{\"1\":{\"2426\":1}}],[\"minoccurs=\",{\"1\":{\"2781\":1}}],[\"minevictableidletimemillis\",{\"1\":{\"2426\":1}}],[\"min2\",{\"1\":{\"519\":2}}],[\"min1\",{\"1\":{\"519\":2}}],[\"minusweeks\",{\"1\":{\"474\":1}}],[\"minusnanos\",{\"1\":{\"474\":1}}],[\"minusseconds\",{\"1\":{\"474\":1}}],[\"minusminutes\",{\"1\":{\"474\":1}}],[\"minusmonths\",{\"1\":{\"474\":1}}],[\"minushours\",{\"1\":{\"474\":1}}],[\"minusdays\",{\"1\":{\"474\":1}}],[\"minusyears\",{\"1\":{\"474\":1}}],[\"minusxxx\",{\"0\":{\"474\":1}}],[\"minute\",{\"1\":{\"470\":2,\"471\":2}}],[\"min\",{\"0\":{\"519\":1,\"687\":1,\"2236\":1},\"1\":{\"176\":1,\"472\":2,\"473\":3,\"474\":1,\"498\":1,\"519\":3,\"641\":1,\"687\":5,\"1259\":1,\"1487\":1,\"1680\":2,\"2236\":4,\"2953\":2,\"2954\":3,\"2957\":1,\"3013\":2,\"3014\":2}}],[\"mkdirs\",{\"0\":{\"557\":1},\"1\":{\"557\":2}}],[\"mkdir不会抛出异常\",{\"1\":{\"556\":1,\"557\":1}}],[\"mkdir\",{\"0\":{\"556\":1},\"1\":{\"556\":2,\"3047\":2}}],[\"mustnot\",{\"1\":{\"2996\":1,\"2997\":1}}],[\"must\",{\"1\":{\"2935\":2,\"2996\":2,\"2997\":1}}],[\"music\",{\"1\":{\"124\":2}}],[\"multi\",{\"1\":{\"3081\":1,\"3083\":1}}],[\"multiline\",{\"1\":{\"749\":1}}],[\"multiplicand\",{\"1\":{\"533\":1}}],[\"multiply\",{\"0\":{\"533\":1},\"1\":{\"533\":2}}],[\"msomebody\",{\"1\":{\"1432\":3}}],[\"ms可选\",{\"1\":{\"470\":1}}],[\"ms\",{\"1\":{\"470\":2,\"472\":2,\"473\":2,\"474\":1,\"478\":2,\"479\":2,\"545\":2,\"633\":3}}],[\"msg2\",{\"1\":{\"2804\":1}}],[\"msg1\",{\"1\":{\"2804\":1}}],[\"msg=hello\",{\"1\":{\"2801\":1,\"2802\":1}}],[\"msg\",{\"1\":{\"262\":4,\"370\":7,\"1364\":2,\"2655\":4,\"2798\":1,\"2799\":1,\"2805\":1}}],[\"most\",{\"1\":{\"3127\":1}}],[\"mogondb\",{\"1\":{\"3082\":1}}],[\"mobile\",{\"1\":{\"2602\":1}}],[\"move\",{\"1\":{\"1920\":1}}],[\"modle\",{\"1\":{\"2765\":1}}],[\"modules\",{\"1\":{\"2530\":1,\"2856\":1}}],[\"module上右键\",{\"1\":{\"2486\":1}}],[\"module\",{\"1\":{\"2483\":1,\"2489\":1,\"2493\":1}}],[\"modularity\",{\"0\":{\"2262\":1}}],[\"mode\",{\"0\":{\"1886\":1},\"1\":{\"1885\":3,\"2602\":1}}],[\"model\",{\"0\":{\"1290\":1},\"1\":{\"1290\":3,\"2754\":1}}],[\"modcount\",{\"1\":{\"1680\":1}}],[\"modifier\",{\"1\":{\"621\":2,\"2045\":4,\"2048\":1}}],[\"modifiers\",{\"1\":{\"613\":2}}],[\"modify\",{\"1\":{\"360\":1,\"364\":1,\"371\":1}}],[\"more\",{\"1\":{\"811\":1,\"1919\":1}}],[\"mongdb的依赖\",{\"1\":{\"3233\":1}}],[\"mongdb\",{\"1\":{\"3233\":1}}],[\"mongo\",{\"1\":{\"3212\":2,\"3213\":3,\"3214\":1}}],[\"mongoservererror\",{\"1\":{\"3161\":1,\"3201\":1}}],[\"mongos或mongod会将新条目附加到现有日志文件的末尾\",{\"1\":{\"3142\":1}}],[\"mongosh\",{\"1\":{\"3057\":2}}],[\"mongo中的数字\",{\"1\":{\"3074\":1}}],[\"mongod实例存储其数据的目录\",{\"1\":{\"3048\":1,\"3142\":1}}],[\"mongod或mongos应向其发送所有诊断日志记录信息的日志文件的路径\",{\"1\":{\"3048\":1,\"3142\":1}}],[\"mongod\",{\"1\":{\"3043\":1,\"3044\":3,\"3047\":1,\"3048\":1,\"3049\":3,\"3050\":1,\"3140\":1,\"3142\":4,\"3143\":4,\"3144\":4,\"3145\":1,\"3242\":1}}],[\"mongodb<\",{\"1\":{\"3229\":1,\"3234\":1}}],[\"mongodb默认是被springboot管理的\",{\"1\":{\"3229\":1}}],[\"mongodb默认是没有用户认证的\",{\"1\":{\"3056\":1}}],[\"mongodb存储所有的用户信息在admin\",{\"1\":{\"3198\":1}}],[\"mongodb使用的是基于角色的访问控制\",{\"1\":{\"3182\":1}}],[\"mongodb实例启动运行时是没有启用用户访问权限控制的\",{\"1\":{\"3178\":1}}],[\"mongodb在副本集中\",{\"1\":{\"3171\":1}}],[\"mongodb在创建集合的过程中\",{\"1\":{\"3109\":1}}],[\"mongodb中的复制\",{\"0\":{\"3127\":1}}],[\"mongodb中的副本集\",{\"1\":{\"3125\":1}}],[\"mongodb中的记录是一个\",{\"1\":{\"3032\":1}}],[\"mongodb直接从索引返回结果\",{\"1\":{\"3122\":1}}],[\"mongodb提供了散列索引类型\",{\"1\":{\"3107\":1}}],[\"mongodb提供了两种特殊的索引\",{\"1\":{\"3107\":1}}],[\"mongodb提供高性能的数据持久性\",{\"1\":{\"3024\":1}}],[\"mongodb还支持多个字段的用户定义索引\",{\"1\":{\"3106\":1}}],[\"mongodb还可以使用索引中的排序返回排序结果\",{\"1\":{\"3103\":1}}],[\"mongodb索引使用b树数据结构\",{\"1\":{\"3103\":1}}],[\"mongodb必须执行全集合扫描\",{\"1\":{\"3103\":1}}],[\"mongodb将返回而不处理数组中的其余文档\",{\"1\":{\"3072\":1}}],[\"mongodb会默认创建以下三个数据库\",{\"1\":{\"3060\":1}}],[\"mongodb不会对连接客户端进行用户验证\",{\"1\":{\"3178\":1}}],[\"mongodb不再提供mongodb\",{\"1\":{\"3053\":1}}],[\"mongodb不支持\",{\"1\":{\"3031\":1}}],[\"mongodb发送所有日志输出的目标指定为文件\",{\"1\":{\"3048\":1,\"3142\":1}}],[\"mongodb却是一个\",{\"1\":{\"3036\":1}}],[\"mongodb数据库\",{\"1\":{\"3036\":1}}],[\"mongodb和redis都是nosql\",{\"1\":{\"3035\":1}}],[\"mongodb的模糊查询是通过正则表达式的方式实现的\",{\"1\":{\"3099\":1}}],[\"mongodb的版本命名规范如\",{\"1\":{\"3040\":1}}],[\"mongodb的最小存储单位就是文档\",{\"1\":{\"3032\":1}}],[\"mongodb的复制工具称为副本集\",{\"1\":{\"3024\":1}}],[\"mongodb文档类似于json对象\",{\"1\":{\"3032\":1}}],[\"mongodb支持的数据结构非常松散\",{\"1\":{\"3032\":1}}],[\"mongodb自动将\",{\"1\":{\"3031\":1}}],[\"mongodb通过嵌入式文档来替代多表连接\",{\"1\":{\"3031\":1}}],[\"mongodb术语\",{\"1\":{\"3031\":1}}],[\"mongodb可应对\",{\"1\":{\"3026\":1}}],[\"mongodb是一个开源\",{\"1\":{\"3021\":1}}],[\"mongodb并非很流行的技术\",{\"1\":{\"60\":1,\"61\":1}}],[\"mongodb\",{\"0\":{\"60\":1,\"3021\":1,\"3035\":1,\"3053\":1,\"3056\":1,\"3233\":1},\"1\":{\"10\":1,\"29\":1,\"3022\":1,\"3027\":6,\"3037\":1,\"3040\":1,\"3044\":1,\"3047\":2,\"3048\":4,\"3049\":2,\"3052\":1,\"3053\":2,\"3055\":2,\"3057\":1,\"3062\":1,\"3139\":3,\"3142\":4,\"3143\":4,\"3144\":4,\"3213\":3,\"3214\":1,\"3222\":1,\"3224\":1,\"3225\":1,\"3236\":1,\"3237\":2}}],[\"mongo还使用了特殊的数据类型\",{\"1\":{\"3033\":1}}],[\"monday\",{\"1\":{\"1368\":1}}],[\"mon\",{\"1\":{\"1185\":1}}],[\"money\",{\"1\":{\"841\":1,\"1071\":2}}],[\"month\",{\"1\":{\"470\":2,\"471\":2,\"472\":2,\"473\":3,\"474\":1}}],[\"m\",{\"1\":{\"212\":1,\"253\":2,\"429\":1,\"579\":1,\"691\":3,\"712\":1,\"739\":2,\"749\":1,\"913\":4,\"914\":3,\"1044\":5,\"1045\":3,\"1278\":2,\"1532\":1,\"2047\":4,\"2048\":7,\"2121\":2,\"2754\":1,\"2763\":1}}],[\"mf的文件路径\",{\"1\":{\"2744\":1}}],[\"mf文件中也就没有了main\",{\"1\":{\"201\":1}}],[\"mf文件中的main\",{\"1\":{\"201\":1}}],[\"mf中start\",{\"1\":{\"198\":1}}],[\"mf\",{\"0\":{\"200\":1},\"1\":{\"198\":1,\"199\":1,\"200\":2,\"2733\":1}}],[\"me\",{\"1\":{\"763\":1,\"3150\":1}}],[\"mempty\",{\"1\":{\"1432\":3}}],[\"members里多了一个对象\",{\"1\":{\"3160\":1}}],[\"members\",{\"1\":{\"3153\":1,\"3154\":1,\"3156\":1,\"3157\":1,\"3165\":3,\"3175\":1}}],[\"member\",{\"1\":{\"612\":1}}],[\"memcache\",{\"0\":{\"58\":1},\"1\":{\"10\":1,\"29\":1}}],[\"mediumblob\",{\"1\":{\"2360\":1}}],[\"medium\",{\"1\":{\"486\":1}}],[\"method=\",{\"1\":{\"2609\":1,\"2623\":1}}],[\"method和field\",{\"1\":{\"2069\":1}}],[\"method3\",{\"1\":{\"1267\":1,\"1269\":1,\"1270\":4}}],[\"method2\",{\"1\":{\"1267\":1,\"1269\":1,\"1352\":2,\"2101\":2}}],[\"method1\",{\"1\":{\"1267\":1,\"1268\":1,\"1352\":2,\"2101\":2,\"2140\":1}}],[\"methods\",{\"1\":{\"608\":2,\"609\":2,\"2047\":2}}],[\"method\",{\"0\":{\"619\":1},\"1\":{\"608\":2,\"609\":2,\"610\":4,\"611\":2,\"619\":1,\"620\":3,\"621\":1,\"622\":1,\"623\":1,\"624\":1,\"625\":1,\"626\":2,\"1009\":1,\"1249\":2,\"1298\":1,\"1343\":1,\"1405\":2,\"1412\":1,\"1413\":1,\"1422\":1,\"1427\":1,\"1431\":1,\"1432\":8,\"2002\":1,\"2009\":1,\"2010\":1,\"2047\":4,\"2048\":2,\"2063\":2,\"2064\":1,\"2066\":1,\"2092\":2,\"2095\":4,\"2101\":3,\"2148\":1,\"2563\":7,\"2566\":3,\"2598\":2,\"2614\":3}}],[\"method类数组\",{\"1\":{\"608\":1,\"609\":1}}],[\"method`\",{\"1\":{\"384\":1}}],[\"metadata\",{\"1\":{\"1386\":1}}],[\"meta\",{\"1\":{\"149\":2,\"198\":1,\"199\":1,\"2733\":1}}],[\"message\",{\"1\":{\"176\":2,\"368\":1}}],[\"megabytes\",{\"1\":{\"172\":1}}],[\"mm\",{\"1\":{\"123\":1,\"258\":2,\"262\":11,\"466\":1,\"470\":2,\"487\":4,\"488\":2,\"489\":2,\"508\":3,\"1185\":2,\"1606\":3,\"1607\":3,\"2322\":1,\"2325\":1}}],[\"md\",{\"1\":{\"74\":1}}],[\"majorityvotecount\",{\"1\":{\"3156\":1}}],[\"macos\",{\"0\":{\"3051\":1},\"1\":{\"2855\":1}}],[\"machine\",{\"1\":{\"767\":1}}],[\"male\",{\"1\":{\"2781\":1,\"2980\":1,\"2986\":3,\"2992\":3,\"2993\":1,\"2997\":1,\"3003\":2,\"3006\":3,\"3008\":2,\"3011\":4,\"3019\":1}}],[\"markup\",{\"1\":{\"2767\":1}}],[\"mame\",{\"1\":{\"1104\":1}}],[\"matchphrasequerybuilder\",{\"1\":{\"3018\":1,\"3019\":1}}],[\"matchphrasequery\",{\"0\":{\"3018\":1},\"1\":{\"3018\":1,\"3019\":1}}],[\"matchquery\",{\"1\":{\"2993\":1,\"2996\":1,\"2997\":2}}],[\"matchallquery\",{\"1\":{\"2992\":1,\"2994\":2,\"2999\":1,\"3000\":1,\"3008\":1,\"3010\":1}}],[\"match\",{\"1\":{\"2919\":1,\"2928\":1,\"2931\":1,\"2933\":1,\"2935\":1,\"2959\":1}}],[\"matchresult\",{\"1\":{\"755\":1}}],[\"matcher会初始化很多匹配的状态信息\",{\"1\":{\"757\":1}}],[\"matcher对象是一个状态机器\",{\"1\":{\"757\":1}}],[\"matcher的状态\",{\"0\":{\"757\":1}}],[\"matcher\",{\"0\":{\"750\":1,\"754\":1},\"1\":{\"736\":4,\"738\":2,\"739\":2,\"745\":1,\"750\":7,\"755\":1,\"756\":1}}],[\"matcher类提供了对正则表达式的分组支持\",{\"1\":{\"750\":1}}],[\"matcher类的构造方法是私有的\",{\"1\":{\"756\":1}}],[\"matcher类的构造方法也是私有的\",{\"1\":{\"750\":1}}],[\"matcher类的功能更加丰富\",{\"1\":{\"739\":1}}],[\"matcher类\",{\"1\":{\"736\":1}}],[\"matches​\",{\"1\":{\"752\":1}}],[\"matches\",{\"0\":{\"433\":1,\"743\":1,\"752\":1},\"1\":{\"433\":2,\"739\":1,\"743\":2,\"750\":1,\"752\":1}}],[\"math包的biginteger\",{\"1\":{\"529\":1}}],[\"math\",{\"0\":{\"511\":1},\"1\":{\"498\":1,\"511\":3,\"512\":1,\"513\":4,\"514\":1,\"515\":1,\"516\":3,\"517\":1,\"518\":2,\"519\":2,\"520\":2,\"521\":4,\"529\":1,\"530\":1,\"956\":1,\"1018\":1,\"1088\":1,\"1090\":1,\"1237\":1,\"2203\":1,\"2741\":1}}],[\"manager\",{\"1\":{\"1243\":1}}],[\"man\",{\"1\":{\"429\":1,\"430\":2,\"431\":2,\"432\":2,\"1170\":2,\"1368\":1,\"1753\":1}}],[\"manifeast\",{\"0\":{\"200\":1}}],[\"manifest\",{\"1\":{\"198\":1,\"199\":1,\"200\":2,\"2733\":1,\"2743\":1,\"2744\":1}}],[\"magenta\",{\"1\":{\"262\":2}}],[\"maxage\",{\"1\":{\"3015\":2}}],[\"maxactive\",{\"1\":{\"2426\":1}}],[\"maxactive=20\",{\"1\":{\"2425\":1}}],[\"maxoccurs=\",{\"1\":{\"2781\":1}}],[\"maxopenpreparedstatements\",{\"1\":{\"2426\":1}}],[\"maxwait\",{\"1\":{\"2426\":1}}],[\"maxwait=1000\",{\"1\":{\"2425\":1}}],[\"maxinclusive\",{\"1\":{\"2781\":1}}],[\"maxidle\",{\"1\":{\"2426\":1}}],[\"maximum\",{\"1\":{\"1680\":1}}],[\"maximumpoolsize\",{\"1\":{\"1565\":1}}],[\"maxbirth\",{\"1\":{\"2409\":2}}],[\"maxstr\",{\"1\":{\"914\":1}}],[\"max2\",{\"1\":{\"520\":2}}],[\"max1\",{\"1\":{\"520\":2}}],[\"maxhistory>\",{\"1\":{\"262\":3}}],[\"maxfilesize>\",{\"1\":{\"262\":3}}],[\"max\",{\"0\":{\"520\":1,\"686\":1,\"2235\":1},\"1\":{\"176\":1,\"258\":1,\"293\":2,\"520\":3,\"686\":5,\"913\":2,\"1259\":1,\"1487\":1,\"2235\":4,\"2362\":1,\"2408\":1,\"2443\":1,\"2908\":1,\"2926\":1,\"2930\":1,\"2953\":2,\"2954\":3,\"2957\":2,\"3013\":2,\"3014\":2,\"3015\":3}}],[\"mainfest\",{\"1\":{\"2743\":1}}],[\"main方法就是java程序的主线程\",{\"1\":{\"1465\":1}}],[\"main方法再执行时\",{\"1\":{\"213\":1}}],[\"main线程\",{\"1\":{\"1465\":1}}],[\"main的特点\",{\"1\":{\"1293\":1}}],[\"main的args参数\",{\"0\":{\"213\":1}}],[\"maina\",{\"1\":{\"1019\":1}}],[\"main\",{\"0\":{\"797\":1,\"1293\":1},\"1\":{\"103\":1,\"104\":1,\"153\":1,\"200\":1,\"213\":3,\"313\":2,\"790\":1,\"936\":1,\"938\":1,\"956\":1,\"1011\":1,\"1032\":1,\"1034\":1,\"1044\":1,\"1054\":1,\"1056\":1,\"1105\":1,\"1153\":1,\"1160\":1,\"1218\":1,\"1219\":1,\"1249\":1,\"1293\":3,\"1312\":2,\"1352\":1,\"1361\":1,\"1432\":1,\"1441\":1,\"1472\":1,\"1473\":1,\"1474\":1,\"1480\":2,\"1481\":1,\"1489\":1,\"1492\":1,\"1509\":1,\"1512\":1,\"1520\":1,\"1536\":1,\"1547\":1,\"1556\":1,\"1562\":1,\"1569\":1,\"1720\":1,\"2082\":1,\"2510\":1,\"2743\":2,\"2972\":1,\"2975\":1,\"2976\":1,\"2977\":1,\"2978\":1,\"2980\":1,\"2983\":1,\"2984\":1,\"2986\":1,\"2987\":1,\"2991\":1,\"2992\":1,\"2993\":1,\"2997\":1,\"3000\":1,\"3003\":1,\"3006\":1,\"3008\":1,\"3010\":1,\"3015\":1,\"3019\":1}}],[\"maplisthandler\",{\"1\":{\"2436\":1}}],[\"maphandler\",{\"1\":{\"2436\":1}}],[\"mappings查询结果\",{\"1\":{\"2977\":2}}],[\"mappings\",{\"1\":{\"2890\":1,\"2965\":1}}],[\"mapping>\",{\"1\":{\"2685\":2}}],[\"mapping\",{\"0\":{\"2346\":1},\"1\":{\"2961\":1,\"2963\":1}}],[\"mapper\",{\"0\":{\"283\":1,\"346\":1},\"1\":{\"274\":1,\"283\":1,\"313\":1,\"346\":1,\"2219\":1,\"2760\":1,\"2980\":2}}],[\"mapper注解是为了被ioc容器识别\",{\"1\":{\"274\":1}}],[\"mapper接口\",{\"0\":{\"274\":1}}],[\"map的使用\",{\"0\":{\"2222\":1}}],[\"map和flatmap的对比示例\",{\"0\":{\"2220\":1}}],[\"maptolong\",{\"0\":{\"2218\":1},\"1\":{\"2206\":1,\"2218\":1}}],[\"maptoint\",{\"0\":{\"2217\":1},\"1\":{\"2206\":1,\"2217\":1}}],[\"maptodouble\",{\"0\":{\"2216\":1},\"1\":{\"2206\":1,\"2216\":1}}],[\"map相关的方法比较少\",{\"1\":{\"1694\":1}}],[\"map中的entry\",{\"1\":{\"1670\":1}}],[\"map常用方法\",{\"0\":{\"1669\":1}}],[\"map与collection并列存在\",{\"1\":{\"1661\":1}}],[\"map集合是k\",{\"1\":{\"1710\":1}}],[\"map集合\",{\"0\":{\"1710\":1}}],[\"map集合的元素\",{\"1\":{\"1588\":1}}],[\"map集合内的数据是键值对\",{\"1\":{\"708\":1}}],[\"map接口的继承结构\",{\"0\":{\"1662\":1}}],[\"map接口的常用实现类\",{\"1\":{\"1661\":1}}],[\"map接口继承图\",{\"0\":{\"1580\":1}}],[\"map接口是没有iterator的\",{\"1\":{\"710\":1}}],[\"map<string\",{\"1\":{\"712\":1,\"2621\":1,\"2624\":1}}],[\"map<\",{\"1\":{\"712\":1}}],[\"map<k\",{\"1\":{\"691\":2,\"706\":1}}],[\"map有五个实现类\",{\"1\":{\"707\":1}}],[\"map\",{\"0\":{\"395\":1,\"692\":1,\"705\":1,\"1659\":1,\"1660\":1,\"2215\":1,\"2241\":1},\"1\":{\"34\":1,\"390\":1,\"681\":1,\"723\":2,\"1578\":2,\"1630\":1,\"1661\":4,\"1662\":1,\"1669\":1,\"1673\":1,\"1674\":1,\"1683\":5,\"1687\":8,\"1688\":1,\"1694\":1,\"1710\":7,\"2206\":1,\"2215\":3,\"2222\":1,\"2223\":1,\"2235\":1,\"2241\":3,\"2242\":1,\"2624\":3}}],[\"maven导入fastjson包\",{\"1\":{\"2837\":1}}],[\"maven是包管理器\",{\"1\":{\"2751\":1}}],[\"maven的版本要与springcloud与springboot兼容\",{\"1\":{\"298\":1}}],[\"maven的包信息\",{\"1\":{\"71\":1}}],[\"maven配置\",{\"0\":{\"298\":1}}],[\"maven设置多环境\",{\"0\":{\"235\":1}}],[\"maven插件\",{\"0\":{\"193\":1}}],[\"maven已经下载好了所需的依赖\",{\"1\":{\"82\":1}}],[\"maven\",{\"0\":{\"91\":1,\"198\":1,\"199\":1,\"2488\":1,\"2492\":1,\"2751\":1,\"3229\":1,\"3234\":1},\"1\":{\"10\":1,\"11\":1,\"70\":1,\"76\":2,\"149\":1,\"193\":1,\"194\":1,\"195\":3,\"200\":3,\"298\":1,\"336\":1,\"398\":1,\"2489\":2,\"2492\":1}}],[\"myroot\",{\"1\":{\"3194\":1,\"3195\":1,\"3198\":3}}],[\"myrs\",{\"1\":{\"3142\":1,\"3150\":1,\"3153\":1,\"3154\":1,\"3156\":1,\"3157\":1,\"3159\":1,\"3168\":1,\"3210\":2}}],[\"myrunnable类的实例\",{\"1\":{\"1493\":1}}],[\"myrunnable类没有继承\",{\"1\":{\"1493\":1}}],[\"myrunnable\",{\"1\":{\"1492\":4,\"1509\":3,\"1512\":3,\"1520\":3}}],[\"mystate\",{\"1\":{\"3156\":1,\"3157\":1}}],[\"myservlet\",{\"1\":{\"2566\":1}}],[\"mysql是b+tree\",{\"1\":{\"3103\":1}}],[\"mysql对比\",{\"0\":{\"2864\":1}}],[\"mysql事务\",{\"1\":{\"2378\":1}}],[\"mysql服务器默认是关闭批处理的\",{\"1\":{\"2375\":1}}],[\"mysql服务端端口号\",{\"1\":{\"2294\":1}}],[\"mysqld\",{\"1\":{\"2362\":1}}],[\"mysql配置文件中\",{\"1\":{\"2362\":1}}],[\"mysql的驱动要>=5\",{\"1\":{\"2375\":1}}],[\"mysql的四种blob类型\",{\"1\":{\"2360\":1}}],[\"mysql的jdbc驱动包\",{\"1\":{\"2289\":1}}],[\"mysql的jdbc驱动源码\",{\"1\":{\"2289\":1}}],[\"mysql中\",{\"1\":{\"2360\":1}}],[\"mysql默认端口是3306\",{\"1\":{\"2294\":1}}],[\"mysql占用端口3306\",{\"1\":{\"1938\":1}}],[\"mysqlconnect\",{\"1\":{\"1153\":1}}],[\"mysql版本在8\",{\"1\":{\"278\":1}}],[\"mysql驱动问题\",{\"0\":{\"278\":1}}],[\"mysql\",{\"0\":{\"62\":1,\"265\":1,\"321\":1,\"2360\":1},\"1\":{\"10\":1,\"11\":1,\"29\":1,\"130\":2,\"159\":1,\"267\":2,\"270\":1,\"271\":2,\"277\":1,\"278\":2,\"281\":2,\"336\":3,\"340\":1,\"341\":2,\"390\":2,\"1153\":1,\"2289\":1,\"2294\":2,\"2297\":4,\"2298\":1,\"2299\":2,\"2300\":2,\"2302\":2,\"2425\":2,\"2426\":2,\"2864\":1,\"2904\":1,\"3021\":1,\"3198\":1}}],[\"myinterface\",{\"1\":{\"2140\":1}}],[\"myinvocationhandle已经在创建代理类是获取了被代理类的对象名\",{\"1\":{\"2097\":1}}],[\"myinvocationhandler是他的参数之一\",{\"1\":{\"2097\":1}}],[\"myinvocationhandler\",{\"1\":{\"2094\":2,\"2095\":1}}],[\"mythread\",{\"1\":{\"1472\":5,\"1515\":1}}],[\"myannotation的值\",{\"1\":{\"1432\":1}}],[\"myannotation的target和retention等元注解与myannotations相同\",{\"1\":{\"1420\":1}}],[\"myannotations\",{\"1\":{\"1419\":2,\"1420\":1}}],[\"myannotation\",{\"1\":{\"1393\":1,\"1400\":2,\"1409\":1,\"1412\":1,\"1415\":1,\"1416\":1,\"1418\":2,\"1419\":3,\"1422\":1,\"1423\":2,\"1432\":12,\"2048\":1}}],[\"myexception\",{\"1\":{\"1364\":3}}],[\"mymethod\",{\"1\":{\"1270\":1}}],[\"mycomparable\",{\"1\":{\"1210\":1}}],[\"mycomparator\",{\"1\":{\"645\":3}}],[\"mybatista\",{\"1\":{\"2765\":1}}],[\"mybatis等只是更好的封装了jdbc\",{\"1\":{\"2278\":1}}],[\"mybatis<\",{\"1\":{\"323\":1}}],[\"mybatis依赖\",{\"1\":{\"323\":1}}],[\"mybatis或mybatisplus\",{\"1\":{\"268\":1}}],[\"mybatisplus也对这些方法进行了封装\",{\"1\":{\"361\":1}}],[\"mybatisplus将复杂的条件查询sql都封装好了\",{\"1\":{\"353\":1}}],[\"mybatisplus的ipage接口封装了所有与分页相关的信息和操作\",{\"1\":{\"351\":1}}],[\"mybatisplusinterceptor\",{\"1\":{\"350\":5}}],[\"mybatisplus内部有分页操作相关的api\",{\"1\":{\"349\":1}}],[\"mybatisplus是采用雪花算法生成uuid作为id的\",{\"1\":{\"348\":1}}],[\"mybatisplus依赖\",{\"1\":{\"324\":1}}],[\"mybatisplus\",{\"0\":{\"361\":1},\"1\":{\"10\":1,\"345\":1,\"346\":1}}],[\"mybatis\",{\"0\":{\"268\":1,\"323\":1,\"324\":1},\"1\":{\"10\":1,\"11\":1,\"29\":1,\"270\":2,\"313\":1,\"324\":1,\"336\":3,\"340\":1,\"341\":2,\"348\":1,\"390\":1,\"398\":1,\"2278\":1,\"2761\":1}}],[\"sneakythrows\",{\"1\":{\"2972\":1,\"2975\":1,\"2977\":1,\"2978\":1,\"2980\":1,\"2983\":1,\"2984\":1,\"2986\":1,\"2987\":1,\"2991\":1,\"2992\":1,\"2993\":1,\"2997\":1,\"3000\":1,\"3003\":1,\"3006\":1,\"3008\":1,\"3010\":1,\"3015\":1,\"3019\":1}}],[\"snapshot\",{\"1\":{\"200\":2,\"2511\":1,\"2858\":1}}],[\"s001\",{\"1\":{\"2779\":1}}],[\"srae\",{\"1\":{\"2719\":3}}],[\"sre\",{\"1\":{\"2716\":2}}],[\"src目录下的资源访问\",{\"1\":{\"2694\":1}}],[\"src目录\",{\"1\":{\"2693\":1}}],[\"srcpath\",{\"1\":{\"1823\":2,\"1838\":2}}],[\"srcfile\",{\"1\":{\"1817\":2,\"1821\":2,\"1823\":2,\"1836\":2}}],[\"src\",{\"1\":{\"302\":1,\"313\":2,\"689\":1,\"1821\":2,\"1920\":3,\"2034\":1,\"2289\":1,\"2326\":1,\"2425\":1,\"2472\":1,\"2510\":1}}],[\"src=>main=>resources内的\",{\"1\":{\"112\":1}}],[\"s架构的web项目\",{\"1\":{\"2561\":1}}],[\"sdf\",{\"1\":{\"2322\":2,\"2325\":2}}],[\"sdktest\",{\"1\":{\"302\":1}}],[\"sdk\",{\"1\":{\"95\":2,\"335\":2,\"2483\":1}}],[\"sdk的版本要与java处的sdk版本一致\",{\"1\":{\"71\":1}}],[\"smallint\",{\"1\":{\"2314\":1}}],[\"skip方法同样接受一个数字参数作为跳过的记录条数\",{\"1\":{\"3096\":1}}],[\"skipped\",{\"1\":{\"2908\":1,\"2926\":1,\"2930\":1,\"2957\":1,\"3015\":1}}],[\"skip\",{\"0\":{\"2213\":1},\"1\":{\"2206\":1,\"2213\":2,\"3096\":3,\"3097\":2}}],[\"sz\",{\"1\":{\"1830\":3,\"1831\":4}}],[\"s+\",{\"1\":{\"1382\":1}}],[\"s的方式\",{\"1\":{\"1133\":1}}],[\"switched\",{\"1\":{\"3168\":1}}],[\"switch中表达式的取值情况不太多\",{\"1\":{\"929\":1}}],[\"switch结构中的表达式\",{\"1\":{\"927\":1}}],[\"switch\",{\"0\":{\"925\":1},\"1\":{\"917\":1,\"926\":1,\"928\":1,\"929\":1,\"945\":1,\"1430\":1,\"2004\":1}}],[\"swap\",{\"0\":{\"685\":1},\"1\":{\"685\":2,\"1044\":2,\"1045\":1}}],[\"swagger3\",{\"1\":{\"336\":1}}],[\"swagger\",{\"0\":{\"46\":1,\"331\":1},\"1\":{\"10\":1,\"336\":2,\"398\":1}}],[\"salary=2500\",{\"1\":{\"2236\":1}}],[\"salary=6000\",{\"1\":{\"2232\":1,\"2233\":1}}],[\"safevarargs\",{\"1\":{\"1390\":1}}],[\"satic\",{\"1\":{\"1105\":1}}],[\"sayhello\",{\"1\":{\"1019\":2}}],[\"say\",{\"1\":{\"610\":1,\"611\":4,\"620\":1,\"623\":1,\"626\":4,\"810\":1,\"812\":2,\"1032\":2,\"1102\":1,\"1132\":3,\"1134\":2,\"1160\":4,\"1247\":1,\"1400\":1}}],[\"savebook\",{\"1\":{\"360\":1}}],[\"save\",{\"1\":{\"181\":1,\"359\":1,\"364\":2,\"371\":2,\"3071\":1}}],[\"sqrt\",{\"1\":{\"521\":5,\"956\":1}}],[\"sql术语\",{\"1\":{\"3031\":1}}],[\"sql2\",{\"1\":{\"2387\":2}}],[\"sql1\",{\"1\":{\"2387\":2}}],[\"sql语句中给列起别名\",{\"1\":{\"2354\":1}}],[\"sql语句是debug下才会打印\",{\"1\":{\"262\":1}}],[\"sql中占位符的个数与可变形参的长度应该相同\",{\"1\":{\"2332\":1}}],[\"sql中也是\",{\"1\":{\"2205\":1}}],[\"sql的占位符数量和类型都是不确定的\",{\"1\":{\"2332\":1}}],[\"sql的预编译语句\",{\"1\":{\"2332\":1}}],[\"sql类型\",{\"1\":{\"2314\":1}}],[\"sqlexception异常\",{\"1\":{\"2322\":1,\"2323\":1}}],[\"sqlexception\",{\"1\":{\"2297\":1,\"2325\":2,\"2328\":2,\"2387\":2,\"2405\":1,\"2427\":1,\"2434\":4,\"2435\":5,\"2442\":1}}],[\"sql也是\",{\"1\":{\"2205\":1}}],[\"sql相关\",{\"1\":{\"336\":1}}],[\"sql\",{\"0\":{\"6\":1,\"320\":1,\"3252\":1},\"1\":{\"10\":1,\"459\":1,\"1090\":1,\"1153\":1,\"2188\":1,\"2279\":2,\"2297\":1,\"2307\":1,\"2308\":4,\"2310\":2,\"2311\":3,\"2314\":3,\"2316\":1,\"2317\":1,\"2319\":5,\"2321\":5,\"2322\":3,\"2325\":2,\"2329\":2,\"2333\":2,\"2334\":4,\"2349\":2,\"2352\":2,\"2353\":4,\"2355\":2,\"2356\":2,\"2364\":2,\"2365\":2,\"2372\":2,\"2373\":2,\"2376\":3,\"2377\":3,\"2386\":2,\"2391\":2,\"2405\":8,\"2408\":14,\"2420\":1,\"2424\":1,\"2434\":1,\"2435\":6,\"2436\":2,\"2438\":2,\"2439\":2,\"2440\":2,\"2441\":2,\"2442\":2,\"2443\":4,\"2849\":1}}],[\"soundcloud\",{\"1\":{\"2846\":1}}],[\"sourcebuilder\",{\"1\":{\"2992\":3}}],[\"source\",{\"1\":{\"638\":1,\"759\":1,\"1406\":2,\"1411\":1,\"1427\":1,\"2291\":1,\"2424\":2,\"2427\":3,\"2452\":1,\"2511\":1,\"2907\":1,\"2908\":2,\"2925\":1,\"2926\":2,\"2930\":2,\"2963\":3,\"2980\":1,\"2986\":3,\"2992\":1,\"2993\":3,\"2994\":1,\"2997\":2,\"3000\":1,\"3002\":1,\"3003\":1,\"3005\":1,\"3006\":1,\"3008\":1,\"3010\":1,\"3014\":1,\"3015\":1,\"3018\":1,\"3019\":2}}],[\"solr\",{\"1\":{\"2844\":1}}],[\"sos\",{\"1\":{\"2648\":2}}],[\"socket是客户端和服务器之间的一个连接\",{\"1\":{\"1996\":1}}],[\"socket的构造器\",{\"0\":{\"1971\":1}}],[\"socket类常用方法\",{\"0\":{\"1966\":1}}],[\"socket类常用构造器\",{\"0\":{\"1963\":1}}],[\"socket分类\",{\"0\":{\"1962\":1}}],[\"socket允许程序把网络连接当成一个流\",{\"1\":{\"1961\":1}}],[\"socket\",{\"0\":{\"1939\":1,\"1960\":1},\"1\":{\"1939\":1,\"1961\":2,\"1962\":2,\"1964\":1,\"1965\":1,\"1969\":1,\"1971\":2,\"1972\":2,\"1976\":1,\"1977\":1,\"1996\":1}}],[\"socketchannel\",{\"1\":{\"1913\":1}}],[\"socrt\",{\"1\":{\"641\":1}}],[\"sombody\",{\"1\":{\"1432\":1}}],[\"somebody\",{\"1\":{\"1432\":5}}],[\"some\",{\"1\":{\"302\":1,\"811\":1,\"812\":1}}],[\"son4\",{\"1\":{\"1726\":1}}],[\"son4<>\",{\"1\":{\"1726\":1}}],[\"son4<string>\",{\"1\":{\"1726\":1}}],[\"son4<t2>\",{\"1\":{\"1726\":1}}],[\"son4仍是泛型类\",{\"1\":{\"1726\":1}}],[\"son3\",{\"1\":{\"1725\":1}}],[\"son3<>\",{\"1\":{\"1725\":1}}],[\"son3<string\",{\"1\":{\"1725\":1}}],[\"son3<t1\",{\"1\":{\"1725\":1}}],[\"son3仍是泛型类\",{\"1\":{\"1725\":1}}],[\"son的age\",{\"1\":{\"1165\":1}}],[\"sondo\",{\"1\":{\"1163\":1,\"1168\":1}}],[\"son1不是泛型类\",{\"1\":{\"1723\":1}}],[\"son1\",{\"1\":{\"1128\":1,\"1723\":4}}],[\"son2不是泛型类\",{\"1\":{\"1724\":1}}],[\"son2\",{\"1\":{\"1128\":3,\"1724\":4}}],[\"son\",{\"1\":{\"1120\":1,\"1128\":5,\"1132\":1,\"1133\":1,\"1134\":2,\"1136\":2,\"1147\":1,\"1160\":7,\"1163\":3,\"1165\":2,\"1166\":3,\"1167\":3,\"1168\":3,\"1261\":1,\"1723\":1}}],[\"soft\",{\"1\":{\"636\":1,\"781\":1}}],[\"sortorder\",{\"1\":{\"3009\":2,\"3010\":1}}],[\"sorted\",{\"0\":{\"2226\":1,\"2227\":1},\"1\":{\"2206\":1,\"2226\":2,\"2227\":2}}],[\"sortedset\",{\"1\":{\"1639\":1}}],[\"sortedset<t>\",{\"1\":{\"691\":2}}],[\"sortedmap<k\",{\"1\":{\"691\":2}}],[\"sort\",{\"0\":{\"499\":1,\"643\":1,\"644\":1,\"645\":1,\"684\":1},\"1\":{\"503\":1,\"505\":2,\"508\":2,\"509\":1,\"519\":1,\"524\":1,\"644\":2,\"645\":2,\"684\":4,\"2951\":2,\"3010\":1,\"3097\":6}}],[\"sort进行排序了\",{\"1\":{\"496\":1}}],[\"sort进行排序\",{\"1\":{\"496\":1,\"499\":1}}],[\"sort或arrays\",{\"1\":{\"496\":2,\"499\":1}}],[\"signature\",{\"1\":{\"3156\":1,\"3159\":1,\"3160\":1,\"3186\":1,\"3187\":1}}],[\"simpletype>\",{\"1\":{\"2781\":3}}],[\"simpletype\",{\"1\":{\"2781\":3}}],[\"simple\",{\"1\":{\"2781\":1}}],[\"simpledateformat\",{\"1\":{\"459\":1,\"2322\":2,\"2325\":2}}],[\"site\",{\"1\":{\"2602\":1}}],[\"single\",{\"1\":{\"3047\":3,\"3048\":2,\"3049\":1,\"3105\":1}}],[\"sing\",{\"1\":{\"1209\":1}}],[\"since\",{\"1\":{\"811\":2}}],[\"sin\",{\"1\":{\"522\":1}}],[\"size设置每页查询几条\",{\"1\":{\"3008\":1}}],[\"sizeandtimebasedfnatp\",{\"1\":{\"262\":3}}],[\"size\",{\"0\":{\"659\":1,\"718\":1,\"3016\":1},\"1\":{\"258\":1,\"441\":1,\"659\":4,\"670\":1,\"718\":4,\"1596\":1,\"1680\":1,\"1828\":5,\"1829\":4,\"1830\":1,\"1831\":1,\"1920\":1,\"2893\":2,\"2948\":3,\"2954\":1,\"2956\":1,\"3007\":2,\"3008\":1,\"3015\":1,\"3016\":1}}],[\"sync<\",{\"1\":{\"3229\":1}}],[\"syncsourceid\",{\"1\":{\"3156\":2,\"3159\":1,\"3160\":1}}],[\"syncsourcehost\",{\"1\":{\"3156\":2,\"3159\":1,\"3160\":1}}],[\"synchronize即不能包的代码多了\",{\"1\":{\"1514\":1}}],[\"synchronized有代码块锁和方法锁\",{\"1\":{\"1537\":1}}],[\"synchronized是隐式锁\",{\"1\":{\"1537\":1}}],[\"synchronized与lock的对比\",{\"0\":{\"1537\":1}}],[\"synchronizedsortedset\",{\"1\":{\"691\":1}}],[\"synchronizedsortedmap\",{\"1\":{\"691\":1}}],[\"synchronizedset\",{\"1\":{\"691\":1}}],[\"synchronizednavigableset\",{\"1\":{\"691\":1}}],[\"synchronizednavigablemap\",{\"1\":{\"691\":1}}],[\"synchronizedmap\",{\"1\":{\"691\":1}}],[\"synchronizedcollection\",{\"1\":{\"691\":1}}],[\"synchronizedlist\",{\"1\":{\"691\":2}}],[\"synchronizedxxx\",{\"0\":{\"691\":1},\"1\":{\"681\":1}}],[\"synchronized\",{\"1\":{\"449\":2,\"1069\":1,\"1511\":1,\"1512\":1,\"1517\":2,\"1520\":1,\"1521\":2,\"1532\":1,\"1547\":4,\"1556\":1}}],[\"synclist\",{\"1\":{\"691\":1}}],[\"systemlog\",{\"1\":{\"3048\":1,\"3142\":1}}],[\"system类\",{\"1\":{\"1101\":1}}],[\"system类代表系统\",{\"1\":{\"632\":1}}],[\"system和thread\",{\"1\":{\"1090\":1}}],[\"system\",{\"0\":{\"632\":1,\"1868\":1},\"1\":{\"85\":1,\"104\":1,\"128\":3,\"132\":1,\"153\":1,\"242\":1,\"244\":1,\"263\":1,\"275\":1,\"284\":2,\"289\":1,\"347\":1,\"352\":5,\"403\":1,\"404\":2,\"405\":2,\"407\":1,\"408\":2,\"409\":2,\"411\":1,\"412\":1,\"413\":1,\"414\":2,\"415\":1,\"417\":2,\"418\":2,\"419\":1,\"420\":1,\"421\":2,\"423\":1,\"424\":1,\"425\":2,\"426\":4,\"429\":1,\"430\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"451\":3,\"452\":2,\"453\":1,\"454\":1,\"455\":1,\"456\":1,\"459\":1,\"469\":3,\"471\":8,\"472\":8,\"473\":8,\"476\":1,\"477\":2,\"478\":1,\"479\":1,\"484\":1,\"485\":1,\"486\":2,\"488\":1,\"502\":1,\"503\":1,\"508\":2,\"509\":1,\"512\":1,\"513\":2,\"514\":1,\"515\":1,\"516\":2,\"517\":1,\"518\":2,\"519\":2,\"520\":2,\"521\":4,\"524\":1,\"525\":1,\"526\":2,\"528\":2,\"530\":2,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"537\":1,\"540\":1,\"541\":1,\"542\":1,\"543\":1,\"544\":1,\"545\":1,\"546\":1,\"547\":1,\"549\":1,\"550\":1,\"551\":1,\"552\":1,\"553\":1,\"555\":3,\"556\":3,\"557\":3,\"559\":3,\"562\":3,\"565\":3,\"566\":3,\"581\":1,\"586\":1,\"587\":1,\"588\":1,\"589\":1,\"590\":1,\"592\":1,\"593\":1,\"594\":1,\"595\":1,\"596\":1,\"597\":1,\"598\":1,\"600\":1,\"601\":1,\"604\":1,\"605\":1,\"606\":1,\"607\":1,\"608\":1,\"609\":1,\"610\":1,\"611\":1,\"613\":1,\"614\":1,\"615\":1,\"616\":1,\"617\":1,\"620\":1,\"621\":1,\"622\":1,\"623\":1,\"624\":2,\"625\":1,\"626\":1,\"632\":2,\"633\":2,\"636\":14,\"638\":1,\"639\":3,\"640\":3,\"642\":2,\"644\":1,\"645\":1,\"646\":2,\"647\":4,\"648\":1,\"649\":1,\"650\":1,\"651\":1,\"657\":1,\"658\":2,\"659\":1,\"660\":1,\"661\":1,\"662\":3,\"663\":1,\"664\":2,\"665\":1,\"666\":2,\"669\":1,\"671\":1,\"676\":1,\"677\":1,\"678\":1,\"682\":2,\"683\":3,\"684\":3,\"685\":2,\"686\":1,\"687\":1,\"688\":1,\"689\":2,\"690\":1,\"696\":1,\"697\":2,\"698\":3,\"699\":2,\"700\":1,\"701\":1,\"702\":3,\"703\":2,\"704\":2,\"711\":2,\"712\":1,\"713\":3,\"714\":1,\"715\":2,\"716\":2,\"717\":2,\"718\":1,\"719\":2,\"720\":1,\"721\":1,\"722\":2,\"723\":3,\"741\":2,\"742\":2,\"743\":1,\"744\":1,\"750\":1,\"751\":1,\"752\":1,\"753\":1,\"759\":1,\"760\":3,\"761\":3,\"790\":1,\"799\":2,\"811\":2,\"877\":2,\"885\":3,\"886\":3,\"893\":2,\"928\":2,\"936\":2,\"938\":3,\"941\":1,\"950\":1,\"954\":2,\"955\":2,\"956\":5,\"973\":1,\"974\":1,\"992\":2,\"997\":2,\"998\":2,\"1010\":2,\"1011\":1,\"1014\":1,\"1019\":2,\"1032\":1,\"1034\":1,\"1044\":1,\"1048\":1,\"1120\":3,\"1128\":3,\"1132\":1,\"1133\":2,\"1134\":1,\"1160\":4,\"1165\":2,\"1178\":5,\"1179\":2,\"1185\":2,\"1192\":1,\"1194\":2,\"1209\":3,\"1218\":1,\"1219\":1,\"1227\":2,\"1240\":1,\"1249\":1,\"1251\":3,\"1252\":3,\"1264\":7,\"1267\":3,\"1278\":2,\"1307\":2,\"1308\":2,\"1327\":2,\"1329\":1,\"1330\":1,\"1333\":2,\"1334\":1,\"1335\":1,\"1339\":7,\"1343\":2,\"1344\":1,\"1352\":2,\"1361\":2,\"1374\":3,\"1382\":4,\"1432\":5,\"1472\":2,\"1480\":1,\"1481\":3,\"1489\":4,\"1492\":1,\"1509\":1,\"1512\":1,\"1520\":1,\"1536\":1,\"1547\":4,\"1556\":1,\"1562\":2,\"1569\":1,\"1583\":1,\"1595\":4,\"1596\":1,\"1597\":1,\"1603\":1,\"1604\":1,\"1606\":1,\"1607\":1,\"1654\":2,\"1657\":1,\"1683\":1,\"1687\":1,\"1692\":2,\"1707\":1,\"1709\":2,\"1710\":1,\"1745\":1,\"1747\":1,\"1748\":1,\"1767\":4,\"1768\":1,\"1804\":1,\"1805\":1,\"1807\":1,\"1808\":1,\"1834\":1,\"1838\":3,\"1851\":1,\"1853\":1,\"1867\":2,\"1868\":2,\"1870\":5,\"1872\":1,\"1873\":3,\"1879\":3,\"1904\":1,\"1909\":2,\"1944\":1,\"1945\":2,\"1946\":1,\"1947\":1,\"1948\":1,\"1977\":1,\"1984\":1,\"2004\":1,\"2007\":2,\"2008\":1,\"2009\":2,\"2010\":2,\"2016\":3,\"2018\":1,\"2019\":1,\"2020\":1,\"2021\":1,\"2032\":4,\"2034\":1,\"2037\":2,\"2041\":1,\"2043\":1,\"2045\":4,\"2047\":2,\"2048\":12,\"2050\":3,\"2051\":1,\"2052\":1,\"2053\":1,\"2054\":3,\"2055\":1,\"2056\":1,\"2058\":1,\"2063\":2,\"2067\":1,\"2080\":2,\"2081\":1,\"2096\":1,\"2101\":2,\"2121\":2,\"2123\":3,\"2125\":1,\"2127\":1,\"2129\":6,\"2156\":1,\"2202\":1,\"2203\":1,\"2210\":1,\"2211\":1,\"2212\":1,\"2213\":1,\"2215\":2,\"2222\":1,\"2226\":1,\"2227\":1,\"2229\":1,\"2230\":1,\"2231\":1,\"2232\":1,\"2233\":1,\"2234\":1,\"2235\":1,\"2236\":1,\"2237\":1,\"2239\":1,\"2240\":1,\"2241\":1,\"2252\":1,\"2254\":2,\"2256\":1,\"2257\":1,\"2259\":2,\"2260\":1,\"2297\":1,\"2299\":1,\"2300\":1,\"2303\":1,\"2349\":1,\"2353\":2,\"2356\":1,\"2365\":1,\"2373\":2,\"2376\":2,\"2387\":1,\"2391\":2,\"2409\":8,\"2426\":1,\"2428\":1,\"2438\":1,\"2439\":1,\"2440\":1,\"2441\":1,\"2442\":2,\"2443\":2,\"2531\":1,\"2552\":1,\"2553\":1,\"2554\":1,\"2556\":1,\"2564\":2,\"2598\":8,\"2601\":2,\"2602\":1,\"2610\":1,\"2624\":6,\"2655\":3,\"2661\":1,\"2662\":1,\"2725\":2,\"2741\":1,\"2778\":1,\"2779\":1,\"2799\":1,\"2806\":1,\"2975\":1,\"2977\":3,\"2978\":1,\"2980\":1,\"2983\":1,\"2984\":1,\"2986\":2,\"2987\":2,\"2991\":1,\"2992\":1,\"2993\":1,\"2997\":1,\"3000\":1,\"3003\":1,\"3006\":1,\"3008\":1,\"3010\":1,\"3015\":1,\"3019\":1,\"3067\":1,\"3152\":1,\"3189\":1,\"3197\":1,\"3198\":3}}],[\"sb\",{\"1\":{\"454\":4,\"455\":3,\"456\":3}}],[\"sb3\",{\"1\":{\"441\":1,\"451\":2}}],[\"sb2\",{\"1\":{\"441\":1,\"451\":2,\"452\":2}}],[\"sb1\",{\"1\":{\"441\":1,\"445\":3,\"451\":2,\"452\":3,\"453\":3}}],[\"s7\",{\"1\":{\"419\":2}}],[\"successfully\",{\"1\":{\"3049\":1,\"3142\":1}}],[\"successful\",{\"1\":{\"2901\":1,\"2908\":1,\"2910\":1,\"2915\":1,\"2926\":1,\"2930\":1,\"2957\":1,\"3015\":1}}],[\"summer\",{\"1\":{\"1373\":1,\"1382\":1}}],[\"sum\",{\"1\":{\"941\":2,\"1035\":2,\"1562\":3,\"2239\":1,\"2240\":1,\"2241\":1,\"2953\":2,\"2954\":3,\"2957\":2,\"3013\":2,\"3014\":2}}],[\"sup2\",{\"1\":{\"2159\":1}}],[\"sup1\",{\"1\":{\"2158\":2}}],[\"support\",{\"1\":{\"2486\":1}}],[\"suppresswarnings\",{\"0\":{\"1427\":1},\"1\":{\"1389\":1,\"1390\":1,\"1427\":2,\"1428\":1,\"1429\":2}}],[\"supplier的get\",{\"1\":{\"2172\":1}}],[\"supplier中的\",{\"1\":{\"2159\":1}}],[\"supplier<employee>\",{\"1\":{\"2173\":1,\"2174\":1}}],[\"supplier<string>\",{\"1\":{\"2158\":1,\"2159\":1}}],[\"supplier<t>\",{\"1\":{\"727\":1,\"2144\":1,\"2203\":1}}],[\"supplier\",{\"0\":{\"727\":1},\"1\":{\"2203\":1}}],[\"super指的是当前对象的父类\",{\"1\":{\"1236\":1}}],[\"super关键字\",{\"1\":{\"1236\":1}}],[\"super与this的区别\",{\"0\":{\"1141\":1}}],[\"super是调用父类的构造器\",{\"1\":{\"1139\":1}}],[\"super和this\",{\"0\":{\"1139\":1}}],[\"super调用构造器\",{\"0\":{\"1136\":1}}],[\"super必加\",{\"1\":{\"1135\":1}}],[\"super必须不能省略\",{\"1\":{\"1133\":1}}],[\"super可用于在子类构造器中调用父类的构造器\",{\"1\":{\"1131\":1}}],[\"super可用于调用父类中定义的成员方法\",{\"1\":{\"1131\":1}}],[\"super可用于访问父类中定义的属性\",{\"1\":{\"1131\":1}}],[\"super的作用\",{\"0\":{\"1131\":1}}],[\"superclass\",{\"1\":{\"593\":2,\"1112\":2,\"2051\":2}}],[\"super\",{\"0\":{\"645\":1,\"1130\":1,\"1132\":1,\"1752\":1},\"1\":{\"593\":2,\"645\":1,\"684\":2,\"686\":2,\"687\":2,\"689\":1,\"1132\":5,\"1133\":1,\"1134\":2,\"1136\":2,\"1137\":1,\"1138\":2,\"1139\":2,\"1270\":3,\"1364\":1,\"1382\":1,\"1480\":1,\"1752\":1,\"1753\":1,\"1828\":1,\"1829\":1,\"1830\":1,\"1831\":1,\"2219\":1,\"2257\":1,\"2351\":2,\"2564\":2}}],[\"superman\",{\"1\":{\"454\":2,\"2096\":5,\"2097\":4}}],[\"sunday\",{\"1\":{\"1368\":1}}],[\"sun\",{\"1\":{\"596\":1,\"597\":1,\"1831\":1,\"1995\":1,\"2032\":2}}],[\"submit\",{\"1\":{\"1566\":1,\"2609\":1,\"2623\":1}}],[\"subclass\",{\"1\":{\"1112\":2}}],[\"sublist\",{\"0\":{\"704\":1},\"1\":{\"704\":2}}],[\"subtrahend\",{\"1\":{\"532\":1}}],[\"subtract\",{\"0\":{\"532\":1},\"1\":{\"532\":2}}],[\"substring\",{\"0\":{\"421\":1},\"1\":{\"421\":3,\"449\":1,\"811\":2}}],[\"subject\",{\"1\":{\"128\":1}}],[\"suffix\",{\"1\":{\"413\":1}}],[\"s4\",{\"1\":{\"404\":2,\"412\":2,\"434\":2,\"744\":2,\"877\":1}}],[\"s3==s4\",{\"1\":{\"877\":1}}],[\"s3\",{\"1\":{\"404\":2,\"411\":2,\"412\":2,\"434\":2,\"744\":2,\"876\":1,\"877\":1}}],[\"s2是产生了多态\",{\"1\":{\"1128\":1}}],[\"s2\",{\"1\":{\"404\":2,\"405\":3,\"407\":2,\"420\":2,\"426\":2,\"433\":2,\"508\":2,\"699\":2,\"877\":1,\"1128\":2,\"1547\":9,\"2164\":2,\"2241\":2}}],[\"s1++\",{\"1\":{\"893\":1}}],[\"s1是sort类型的\",{\"1\":{\"893\":1}}],[\"s1==s2\",{\"1\":{\"877\":1}}],[\"s1\",{\"1\":{\"401\":2,\"403\":2,\"404\":2,\"405\":3,\"408\":3,\"409\":3,\"413\":2,\"414\":3,\"415\":2,\"417\":3,\"418\":3,\"420\":2,\"421\":3,\"423\":2,\"424\":2,\"426\":5,\"429\":2,\"430\":2,\"431\":2,\"432\":2,\"508\":2,\"699\":2,\"702\":2,\"703\":2,\"741\":3,\"742\":3,\"743\":2,\"750\":2,\"752\":2,\"753\":1,\"876\":1,\"877\":1,\"893\":3,\"897\":2,\"1128\":2,\"1163\":3,\"1165\":3,\"1166\":1,\"1167\":1,\"1168\":2,\"1547\":9,\"2164\":1,\"2241\":2}}],[\"shards\",{\"1\":{\"2885\":1,\"2890\":1,\"2901\":1,\"2908\":1,\"2910\":1,\"2915\":1,\"2926\":1,\"2930\":1,\"2957\":1,\"3015\":1}}],[\"shanghai\",{\"1\":{\"390\":1}}],[\"shtml\",{\"1\":{\"1993\":1}}],[\"shutdownserver执行的条件\",{\"1\":{\"3207\":1}}],[\"shutdownserver\",{\"1\":{\"3050\":1,\"3207\":1}}],[\"shutdownoutput\",{\"1\":{\"1966\":2}}],[\"shutdowninput\",{\"1\":{\"1966\":2}}],[\"shutdown\",{\"1\":{\"1566\":1,\"1569\":1,\"2456\":1}}],[\"shuffle\",{\"0\":{\"683\":1},\"1\":{\"683\":3}}],[\"shit\",{\"1\":{\"1203\":1,\"1249\":1,\"1339\":1,\"2106\":1,\"2200\":1}}],[\"should\",{\"1\":{\"2935\":1,\"2996\":1}}],[\"showbuiltinroles\",{\"1\":{\"3187\":1}}],[\"showdesc\",{\"1\":{\"2048\":1,\"2063\":4}}],[\"shownation\",{\"1\":{\"2007\":1,\"2010\":4}}],[\"showinfo\",{\"1\":{\"1382\":1}}],[\"showseason\",{\"1\":{\"1382\":3,\"1383\":1}}],[\"show\",{\"1\":{\"1019\":2,\"1047\":1,\"1048\":1,\"1382\":2,\"2007\":1,\"2008\":1,\"2009\":3,\"2048\":1,\"2063\":5,\"3060\":2,\"3066\":2,\"3198\":1}}],[\"shot\",{\"1\":{\"827\":1}}],[\"short三种类型的变量做运算时\",{\"1\":{\"865\":1}}],[\"shortvalue\",{\"1\":{\"524\":1}}],[\"short\",{\"1\":{\"423\":3,\"486\":1,\"512\":2,\"523\":1,\"524\":1,\"640\":1,\"761\":1,\"841\":1,\"893\":1,\"897\":1,\"927\":1,\"1025\":1,\"1298\":1,\"1876\":1,\"2314\":1}}],[\"shopping\",{\"0\":{\"383\":1},\"1\":{\"374\":1,\"2884\":1,\"2885\":1,\"2889\":1,\"2890\":2,\"2896\":1,\"2900\":1,\"2901\":1,\"2906\":1,\"2907\":2,\"2908\":2,\"2910\":1,\"2914\":1,\"2915\":1,\"2916\":1,\"2919\":1,\"2924\":1,\"2925\":2,\"2926\":2,\"2930\":2,\"2949\":1,\"2952\":1}}],[\"shell工具\",{\"1\":{\"3057\":1}}],[\"shell了\",{\"1\":{\"3053\":1}}],[\"shell已经过时了\",{\"1\":{\"3052\":1}}],[\"shell和compass都可以连接mongodb\",{\"1\":{\"3052\":1}}],[\"shell\",{\"0\":{\"54\":1,\"3053\":1},\"1\":{\"10\":1,\"3053\":2,\"3054\":1,\"3057\":1}}],[\"ssb\",{\"1\":{\"2996\":2,\"2997\":3,\"2999\":2,\"3000\":3,\"3002\":2,\"3003\":2,\"3005\":2,\"3006\":2,\"3008\":3,\"3010\":3,\"3014\":3,\"3015\":3,\"3016\":2,\"3018\":4,\"3019\":4}}],[\"ssl\",{\"1\":{\"2860\":1}}],[\"sss\",{\"1\":{\"262\":3}}],[\"ss\",{\"1\":{\"262\":4,\"470\":1,\"487\":2,\"488\":1,\"489\":1}}],[\"ssm框架就是对三层架构的封装\",{\"1\":{\"2761\":1}}],[\"ssm\",{\"1\":{\"267\":1,\"277\":1,\"341\":1}}],[\"ssmp\",{\"1\":{\"200\":2}}],[\"ssmpapplication\",{\"1\":{\"153\":2,\"200\":1,\"213\":3}}],[\"ssm开发案例\",{\"0\":{\"338\":1},\"1\":{\"29\":1}}],[\"slist方法会返回一个arraylist\",{\"1\":{\"649\":1}}],[\"slf4j\",{\"0\":{\"244\":1},\"1\":{\"244\":2,\"263\":2,\"393\":1}}],[\"sleep\",{\"0\":{\"1555\":1},\"1\":{\"124\":2,\"1479\":1,\"1481\":2,\"1527\":1,\"1547\":2,\"1555\":2}}],[\"sgugo项目\",{\"1\":{\"2498\":1}}],[\"sgugo项目名的输出目录\",{\"1\":{\"2475\":1}}],[\"sgugo\",{\"1\":{\"180\":1,\"2475\":1,\"2972\":1}}],[\"s\",{\"1\":{\"168\":1,\"415\":1,\"423\":7,\"425\":3,\"452\":1,\"472\":2,\"473\":2,\"474\":1,\"527\":1,\"528\":1,\"566\":1,\"691\":3,\"749\":1,\"812\":1,\"1090\":2,\"1134\":1,\"1160\":7,\"1198\":1,\"1269\":2,\"1361\":3,\"1382\":1,\"1480\":2,\"1607\":2,\"1813\":1,\"1816\":1,\"2106\":1,\"2123\":6,\"2125\":2,\"2127\":2,\"2203\":1,\"3073\":1,\"3168\":1}}],[\"schemalocation=\",{\"1\":{\"2782\":1}}],[\"schemalocation\",{\"1\":{\"2782\":1}}],[\"schema>\",{\"1\":{\"2781\":1}}],[\"schema示例\",{\"0\":{\"2781\":1}}],[\"schema\",{\"0\":{\"2780\":1},\"1\":{\"2775\":1,\"2781\":1}}],[\"sce\",{\"1\":{\"2714\":2,\"2724\":2,\"2725\":2}}],[\"sc\",{\"1\":{\"2635\":1}}],[\"score\",{\"1\":{\"1333\":2,\"1707\":2,\"2908\":3,\"2926\":3,\"2930\":3,\"2957\":1,\"2993\":2,\"2997\":1,\"3015\":1,\"3019\":1,\"3106\":1}}],[\"scope>\",{\"1\":{\"99\":5,\"179\":1,\"270\":1,\"280\":1,\"318\":1,\"321\":1,\"332\":1,\"336\":2,\"389\":3}}],[\"scab\",{\"1\":{\"2717\":3}}],[\"scalability\",{\"1\":{\"3026\":1}}],[\"scalarhandler\",{\"1\":{\"2436\":1,\"2443\":4}}],[\"scale\",{\"1\":{\"534\":1}}],[\"scanperiod\",{\"1\":{\"262\":1}}],[\"scanperiod=\",{\"1\":{\"262\":1}}],[\"scan\",{\"1\":{\"262\":1,\"638\":1,\"639\":3,\"640\":2,\"759\":1,\"760\":3,\"761\":2,\"938\":2}}],[\"scan=\",{\"1\":{\"262\":1}}],[\"scanner没有提供char类型next方法\",{\"1\":{\"640\":1,\"761\":1}}],[\"scanner类的用法很多\",{\"1\":{\"637\":1,\"758\":1}}],[\"scanner\",{\"0\":{\"637\":1,\"638\":1,\"759\":1},\"1\":{\"34\":1,\"637\":2,\"638\":3,\"639\":3,\"640\":2,\"758\":2,\"759\":3,\"760\":3,\"761\":2,\"938\":3,\"1333\":5}}],[\"stepdown\",{\"1\":{\"3171\":1}}],[\"steamres\",{\"1\":{\"565\":2}}],[\"steam\",{\"1\":{\"565\":2,\"566\":1,\"571\":1}}],[\"st\",{\"1\":{\"2372\":2}}],[\"stu4\",{\"1\":{\"2254\":2}}],[\"stu3\",{\"1\":{\"2254\":2,\"2260\":2}}],[\"stu\",{\"1\":{\"2252\":2,\"2254\":2,\"2257\":2,\"2259\":1}}],[\"stu2\",{\"1\":{\"2227\":2,\"2254\":2,\"2256\":2,\"2260\":2}}],[\"stu1\",{\"1\":{\"2227\":2,\"2252\":2,\"2257\":2,\"2259\":3}}],[\"stulist\",{\"1\":{\"2222\":2,\"2227\":2}}],[\"stuscore\",{\"1\":{\"1707\":2}}],[\"studenttype里的属性\",{\"1\":{\"2781\":1}}],[\"studenttype\",{\"1\":{\"2781\":2}}],[\"studenttest\",{\"1\":{\"1361\":1}}],[\"student元素\",{\"1\":{\"2781\":1}}],[\"student>\",{\"1\":{\"2779\":1,\"2782\":1}}],[\"student+\",{\"1\":{\"2777\":1}}],[\"studentstype\",{\"1\":{\"2781\":2}}],[\"students>\",{\"1\":{\"2779\":1,\"2782\":1}}],[\"students\",{\"1\":{\"1261\":1,\"2221\":6,\"2777\":1,\"2779\":1,\"2781\":1,\"2782\":1}}],[\"student\",{\"1\":{\"1018\":1,\"1155\":2,\"1156\":1,\"1361\":3,\"2221\":18,\"2222\":2,\"2223\":2,\"2227\":1,\"2252\":2,\"2254\":4,\"2256\":1,\"2257\":3,\"2259\":5,\"2260\":4,\"2777\":2,\"2779\":1,\"2781\":1,\"2782\":2,\"2955\":1}}],[\"study\",{\"1\":{\"538\":2,\"1767\":2,\"1768\":2}}],[\"storage\",{\"1\":{\"3026\":1,\"3044\":1,\"3048\":2,\"3142\":2}}],[\"store\",{\"1\":{\"302\":2,\"2893\":2,\"2963\":2}}],[\"stop\",{\"1\":{\"1259\":1,\"1264\":5,\"1479\":1,\"1481\":1,\"1520\":2}}],[\"stdoutimpl\",{\"1\":{\"348\":1,\"390\":1}}],[\"stdout\",{\"1\":{\"348\":1,\"390\":1}}],[\"stackoverflowerror\",{\"1\":{\"1312\":1}}],[\"stackoverflowerror和oom\",{\"1\":{\"1312\":1}}],[\"stack\",{\"0\":{\"2842\":1},\"1\":{\"1298\":1,\"2842\":2,\"2843\":1,\"2846\":1}}],[\"stats\",{\"1\":{\"2954\":2,\"2956\":2,\"2957\":1}}],[\"statestr\",{\"1\":{\"3156\":1,\"3157\":1,\"3159\":1,\"3160\":1}}],[\"state\",{\"1\":{\"2953\":1,\"3013\":1,\"3014\":1,\"3073\":1,\"3076\":2,\"3082\":1,\"3093\":1,\"3156\":1,\"3159\":1,\"3160\":1,\"3168\":1}}],[\"statement和resultset为null情况下避免关闭\",{\"1\":{\"2434\":1}}],[\"statement和resultset\",{\"1\":{\"2434\":1}}],[\"statement的弊端\",{\"0\":{\"2309\":1}}],[\"statement\",{\"0\":{\"2317\":1},\"1\":{\"2308\":1,\"2317\":1,\"2328\":1,\"2372\":1,\"2404\":2}}],[\"stat日志用的filter\",{\"1\":{\"2426\":1}}],[\"status\",{\"1\":{\"634\":1,\"2893\":1,\"3155\":1,\"3159\":1}}],[\"static<t>\",{\"1\":{\"2200\":1,\"2202\":1,\"2203\":1}}],[\"staticproxytest\",{\"1\":{\"2082\":1}}],[\"static代码块\",{\"1\":{\"1278\":1}}],[\"static的返回当前类对象的方法\",{\"1\":{\"1241\":1,\"1521\":1}}],[\"static的背景\",{\"0\":{\"1223\":1}}],[\"static是静态修饰符\",{\"1\":{\"1222\":1}}],[\"static关键字的使用\",{\"0\":{\"1222\":1}}],[\"static介绍\",{\"0\":{\"1221\":1}}],[\"static方法\",{\"1\":{\"641\":1}}],[\"static\",{\"0\":{\"1098\":1,\"1107\":1,\"1220\":1},\"1\":{\"103\":1,\"104\":1,\"149\":1,\"150\":1,\"153\":1,\"198\":1,\"199\":1,\"213\":3,\"242\":1,\"440\":2,\"476\":1,\"479\":1,\"498\":1,\"517\":1,\"590\":1,\"641\":1,\"645\":1,\"651\":1,\"790\":1,\"812\":1,\"936\":1,\"938\":1,\"956\":1,\"1011\":1,\"1015\":2,\"1019\":1,\"1022\":1,\"1029\":1,\"1032\":1,\"1034\":1,\"1044\":1,\"1054\":1,\"1056\":1,\"1098\":1,\"1107\":1,\"1109\":1,\"1153\":1,\"1160\":1,\"1203\":1,\"1218\":1,\"1219\":1,\"1227\":1,\"1228\":1,\"1233\":3,\"1240\":2,\"1241\":2,\"1249\":2,\"1259\":5,\"1260\":1,\"1267\":1,\"1268\":1,\"1277\":1,\"1278\":3,\"1312\":1,\"1352\":3,\"1361\":1,\"1364\":1,\"1372\":1,\"1373\":5,\"1377\":1,\"1422\":1,\"1432\":2,\"1472\":1,\"1479\":3,\"1480\":1,\"1481\":1,\"1489\":1,\"1492\":1,\"1509\":1,\"1512\":2,\"1515\":2,\"1520\":1,\"1521\":3,\"1536\":1,\"1547\":1,\"1556\":1,\"1562\":1,\"1569\":1,\"1626\":1,\"1720\":1,\"1734\":1,\"1755\":1,\"1765\":1,\"1828\":1,\"1830\":1,\"1831\":1,\"1869\":2,\"1907\":1,\"1910\":2,\"1919\":2,\"1944\":1,\"1945\":1,\"2027\":1,\"2082\":1,\"2090\":1,\"2094\":1,\"2198\":1,\"2199\":3,\"2221\":2,\"2327\":1,\"2328\":1,\"2427\":3,\"2434\":7,\"2563\":7,\"2972\":1,\"2975\":1,\"2977\":1,\"2978\":1,\"2980\":1,\"2983\":1,\"2984\":1,\"2986\":1,\"2987\":1,\"2991\":1,\"2992\":1,\"2993\":1,\"2997\":1,\"3000\":1,\"3003\":1,\"3006\":1,\"3008\":1,\"3010\":1,\"3015\":1,\"3019\":1}}],[\"started\",{\"1\":{\"3049\":1,\"3142\":1}}],[\"starter依赖\",{\"1\":{\"316\":1}}],[\"starter与parent\",{\"0\":{\"101\":1}}],[\"starter<\",{\"1\":{\"99\":1,\"266\":1,\"270\":2,\"280\":2,\"316\":1,\"322\":1,\"324\":1,\"331\":1,\"336\":3,\"389\":3}}],[\"starter内部会包含很多依赖包的依赖信息\",{\"1\":{\"99\":1}}],[\"starter\",{\"0\":{\"94\":1,\"98\":1},\"1\":{\"93\":1,\"94\":1,\"96\":1,\"99\":3,\"101\":1,\"109\":3,\"110\":4,\"111\":2,\"179\":2,\"286\":1,\"316\":1,\"317\":2,\"318\":2,\"319\":2,\"326\":1,\"328\":1,\"336\":5,\"389\":2,\"3234\":1}}],[\"startup>\",{\"1\":{\"2572\":1}}],[\"startup\",{\"1\":{\"2455\":1}}],[\"start方法\",{\"0\":{\"1470\":1}}],[\"startwith\",{\"1\":{\"414\":1}}],[\"startswith\",{\"0\":{\"414\":1},\"1\":{\"414\":2,\"1918\":1,\"2231\":1}}],[\"start是可以嵌套的\",{\"1\":{\"99\":1}}],[\"start\",{\"1\":{\"73\":2,\"81\":1,\"200\":1,\"453\":2,\"454\":2,\"956\":2,\"1251\":2,\"1264\":5,\"1472\":3,\"1479\":1,\"1480\":1,\"1481\":1,\"1489\":1,\"1492\":3,\"1509\":2,\"1512\":3,\"1520\":3,\"1536\":3,\"1547\":2,\"1556\":2,\"1562\":1,\"1838\":2,\"2373\":1,\"2376\":1}}],[\"structure界面\",{\"1\":{\"2542\":1}}],[\"structure添加web\",{\"0\":{\"2485\":1}}],[\"structure\",{\"1\":{\"2107\":1,\"2485\":1,\"2495\":1,\"2515\":1,\"2744\":1}}],[\"strlist\",{\"1\":{\"1716\":2,\"2215\":1}}],[\"str+\",{\"1\":{\"1432\":1}}],[\"str3\",{\"1\":{\"1197\":1}}],[\"strs\",{\"1\":{\"1048\":3}}],[\"str2\",{\"1\":{\"486\":2,\"526\":2,\"1178\":2,\"1179\":2,\"1197\":1,\"1198\":2}}],[\"str1\",{\"1\":{\"444\":1,\"486\":2,\"526\":2,\"1172\":1,\"1178\":2,\"1179\":2,\"1197\":1,\"1198\":2}}],[\"str替换\",{\"0\":{\"430\":1}}],[\"str\",{\"1\":{\"408\":1,\"409\":1,\"420\":1,\"423\":1,\"425\":2,\"441\":1,\"444\":1,\"452\":1,\"454\":2,\"455\":1,\"484\":1,\"489\":2,\"576\":3,\"649\":3,\"657\":2,\"722\":2,\"886\":4,\"1049\":1,\"1172\":1,\"1185\":2,\"1327\":3,\"1330\":2,\"1331\":1,\"1332\":3,\"1339\":2,\"1379\":1,\"1432\":1,\"1807\":2,\"1900\":1,\"1904\":2,\"1984\":2,\"2033\":1,\"2155\":2,\"2215\":1}}],[\"strops\",{\"1\":{\"288\":1}}],[\"strredis\",{\"1\":{\"288\":1}}],[\"string新增方法\",{\"0\":{\"2267\":1}}],[\"string内部已经重新了排序了\",{\"1\":{\"1686\":1}}],[\"string内部底层定义了final\",{\"1\":{\"878\":1}}],[\"stringindexoutofboundsexception\",{\"0\":{\"1330\":1}}],[\"string是java的一个内置类\",{\"1\":{\"1018\":1}}],[\"string是一个final类\",{\"1\":{\"878\":1}}],[\"string数据类型就是引用类型\",{\"1\":{\"1018\":1}}],[\"string数据类型本质就是java内部定义的string类\",{\"1\":{\"1008\":1}}],[\"string可以和8种基本数据类型变量做运算\",{\"1\":{\"886\":1}}],[\"string可以作为参数\",{\"1\":{\"482\":1}}],[\"string对象中有一个属性values\",{\"1\":{\"883\":1}}],[\"string对象是储存在堆中的\",{\"1\":{\"883\":1}}],[\"string对象的储存\",{\"0\":{\"883\":1}}],[\"string对象的内存分析\",{\"0\":{\"882\":1}}],[\"string对象的创建\",{\"0\":{\"876\":1}}],[\"string实现了两个接口\",{\"1\":{\"878\":1}}],[\"string创建\",{\"1\":{\"876\":1}}],[\"string的操作\",{\"0\":{\"888\":1}}],[\"string的运算\",{\"0\":{\"886\":1}}],[\"string的compareto内置实现源码\",{\"1\":{\"498\":1}}],[\"string的方法\",{\"1\":{\"449\":1}}],[\"string的底层是将字符保存在char\",{\"1\":{\"444\":1}}],[\"string源码分析\",{\"0\":{\"444\":1}}],[\"stringbuilder的效率\",{\"0\":{\"447\":1}}],[\"stringbuilder对比\",{\"0\":{\"442\":1}}],[\"stringbuilder结构\",{\"1\":{\"440\":1}}],[\"stringbuilder是线程不安全的\",{\"1\":{\"439\":1}}],[\"stringbuilder和stringbuffer是一样的\",{\"1\":{\"439\":1}}],[\"stringbuilder\",{\"0\":{\"439\":1},\"1\":{\"435\":1,\"440\":1,\"442\":1,\"447\":1,\"448\":1}}],[\"stringbuffer不能使用\",{\"1\":{\"452\":1}}],[\"stringbuffer方法的特性\",{\"0\":{\"449\":1}}],[\"stringbuffer默认长度是16\",{\"1\":{\"446\":1}}],[\"stringbuffer扩容\",{\"0\":{\"446\":1}}],[\"stringbuffer底层也是保存到char数组中的\",{\"1\":{\"445\":1}}],[\"stringbuffer分析\",{\"0\":{\"445\":1}}],[\"stringbuffer结构\",{\"1\":{\"440\":1}}],[\"stringbuffer是线程安全的\",{\"1\":{\"439\":1}}],[\"stringbuffer很多方法与string是相同的\",{\"1\":{\"438\":1}}],[\"stringbuffer也是个字符串类\",{\"1\":{\"438\":1}}],[\"stringbuffer\",{\"0\":{\"435\":1,\"438\":1,\"442\":1,\"447\":1},\"1\":{\"33\":1,\"435\":1,\"440\":1,\"441\":10,\"442\":1,\"445\":1,\"447\":1,\"448\":1,\"451\":6,\"452\":5,\"453\":3,\"454\":3,\"455\":3,\"456\":3,\"1547\":4,\"2598\":1}}],[\"string有一个构造器是可以接受byte\",{\"1\":{\"426\":1}}],[\"string转基本数据类型\",{\"1\":{\"423\":1}}],[\"string转基本数据类型和基本数据类型转string\",{\"1\":{\"422\":1}}],[\"string类\",{\"1\":{\"1101\":1}}],[\"string类的方法\",{\"1\":{\"888\":1}}],[\"string类的特性\",{\"0\":{\"878\":1}}],[\"string类代表\",{\"1\":{\"878\":1}}],[\"string类型添加失败\",{\"1\":{\"1709\":1}}],[\"string类型的数组\",{\"1\":{\"1428\":1}}],[\"string类型的参数转为包装类对象\",{\"1\":{\"527\":1}}],[\"string类型转基本数据类型\",{\"0\":{\"1198\":1}}],[\"string类型\",{\"1\":{\"927\":1,\"2166\":1}}],[\"string类型是引用类型\",{\"1\":{\"875\":1}}],[\"string类里也有很多涉及正则的方法\",{\"1\":{\"427\":1,\"740\":1}}],[\"string类有不可变性\",{\"1\":{\"416\":1}}],[\"string类对equals进行重写\",{\"1\":{\"404\":1}}],[\"stringstream\",{\"1\":{\"2215\":2}}],[\"strings\",{\"1\":{\"360\":3,\"811\":1}}],[\"string>>\",{\"1\":{\"723\":1}}],[\"string>对象操作redis\",{\"1\":{\"289\":1}}],[\"string>\",{\"1\":{\"289\":1,\"712\":2,\"1423\":1,\"1673\":1,\"1724\":1,\"1725\":1,\"2167\":1,\"2168\":1}}],[\"stringredistemplatetest\",{\"1\":{\"289\":1}}],[\"stringredistemplate\",{\"0\":{\"289\":1},\"1\":{\"289\":3}}],[\"string2\",{\"1\":{\"123\":1}}],[\"string\",{\"0\":{\"401\":1,\"442\":1,\"740\":1,\"875\":1,\"1187\":1,\"1428\":1,\"1767\":1,\"1768\":2,\"1769\":1,\"2020\":1,\"2368\":1,\"2686\":1},\"1\":{\"33\":1,\"85\":1,\"103\":1,\"104\":1,\"123\":1,\"127\":4,\"131\":4,\"153\":1,\"156\":4,\"164\":1,\"167\":1,\"213\":5,\"242\":1,\"244\":1,\"263\":1,\"273\":3,\"289\":1,\"343\":3,\"356\":1,\"357\":1,\"370\":3,\"401\":4,\"403\":1,\"404\":6,\"405\":3,\"407\":1,\"408\":2,\"409\":2,\"411\":1,\"412\":3,\"413\":2,\"414\":2,\"415\":1,\"417\":3,\"418\":3,\"419\":2,\"420\":4,\"421\":4,\"423\":15,\"424\":5,\"425\":3,\"426\":7,\"429\":2,\"430\":2,\"431\":4,\"432\":4,\"433\":2,\"434\":6,\"441\":1,\"442\":1,\"444\":4,\"445\":1,\"447\":1,\"452\":1,\"454\":1,\"455\":1,\"481\":1,\"484\":1,\"485\":1,\"486\":2,\"488\":1,\"489\":1,\"498\":2,\"501\":3,\"508\":8,\"526\":6,\"527\":1,\"528\":1,\"538\":5,\"540\":2,\"541\":2,\"542\":2,\"543\":2,\"546\":2,\"574\":2,\"575\":2,\"576\":2,\"581\":1,\"590\":1,\"592\":2,\"600\":1,\"602\":2,\"606\":1,\"607\":1,\"610\":2,\"611\":3,\"615\":2,\"620\":1,\"623\":2,\"624\":3,\"626\":1,\"636\":9,\"639\":5,\"642\":1,\"649\":1,\"657\":1,\"670\":2,\"699\":2,\"702\":1,\"703\":1,\"713\":2,\"715\":2,\"722\":1,\"739\":1,\"741\":6,\"742\":6,\"743\":3,\"744\":6,\"746\":1,\"748\":3,\"750\":3,\"751\":2,\"752\":3,\"753\":4,\"760\":5,\"790\":1,\"810\":5,\"811\":3,\"812\":4,\"876\":3,\"877\":6,\"886\":1,\"887\":1,\"914\":1,\"936\":1,\"938\":1,\"956\":1,\"970\":4,\"991\":2,\"998\":2,\"1010\":2,\"1011\":1,\"1019\":1,\"1022\":1,\"1032\":2,\"1034\":2,\"1039\":2,\"1044\":1,\"1047\":1,\"1048\":1,\"1054\":2,\"1056\":2,\"1068\":2,\"1071\":4,\"1082\":2,\"1104\":1,\"1105\":1,\"1134\":1,\"1136\":3,\"1153\":1,\"1160\":1,\"1172\":3,\"1178\":4,\"1179\":4,\"1184\":1,\"1185\":2,\"1186\":1,\"1197\":5,\"1198\":3,\"1209\":1,\"1218\":1,\"1219\":1,\"1227\":1,\"1233\":2,\"1249\":1,\"1278\":2,\"1308\":2,\"1312\":1,\"1327\":1,\"1330\":1,\"1331\":2,\"1332\":1,\"1339\":1,\"1352\":1,\"1361\":1,\"1364\":1,\"1373\":7,\"1379\":1,\"1382\":3,\"1393\":1,\"1398\":2,\"1404\":1,\"1427\":1,\"1432\":6,\"1468\":2,\"1472\":1,\"1480\":2,\"1481\":1,\"1489\":1,\"1492\":1,\"1509\":1,\"1512\":1,\"1520\":1,\"1536\":1,\"1547\":1,\"1556\":1,\"1562\":1,\"1569\":1,\"1573\":1,\"1606\":2,\"1607\":3,\"1668\":3,\"1691\":3,\"1692\":2,\"1710\":1,\"1719\":2,\"1720\":1,\"1732\":1,\"1765\":1,\"1807\":2,\"1823\":2,\"1834\":1,\"1838\":2,\"1848\":1,\"1851\":2,\"1856\":1,\"1870\":2,\"1876\":1,\"1879\":1,\"1885\":3,\"1900\":2,\"1903\":1,\"1904\":2,\"1918\":3,\"1919\":2,\"1945\":1,\"1946\":2,\"1947\":2,\"1965\":1,\"1971\":1,\"1977\":2,\"1984\":2,\"1990\":8,\"1991\":6,\"1994\":1,\"1996\":1,\"2004\":2,\"2005\":1,\"2007\":8,\"2009\":1,\"2010\":2,\"2032\":1,\"2033\":1,\"2034\":2,\"2038\":2,\"2044\":1,\"2045\":2,\"2048\":3,\"2058\":1,\"2059\":1,\"2060\":1,\"2063\":2,\"2064\":1,\"2065\":1,\"2067\":1,\"2082\":1,\"2096\":1,\"2123\":2,\"2159\":1,\"2165\":1,\"2179\":1,\"2180\":1,\"2184\":2,\"2185\":2,\"2209\":1,\"2214\":1,\"2215\":1,\"2221\":2,\"2297\":1,\"2299\":3,\"2300\":3,\"2303\":4,\"2310\":3,\"2314\":1,\"2316\":1,\"2319\":4,\"2321\":1,\"2325\":5,\"2327\":4,\"2329\":1,\"2333\":1,\"2334\":2,\"2349\":3,\"2351\":4,\"2352\":2,\"2353\":1,\"2355\":2,\"2356\":1,\"2364\":1,\"2365\":3,\"2372\":1,\"2373\":1,\"2376\":1,\"2377\":1,\"2386\":1,\"2387\":2,\"2391\":1,\"2405\":6,\"2408\":7,\"2434\":1,\"2435\":5,\"2438\":1,\"2439\":1,\"2440\":1,\"2441\":1,\"2442\":3,\"2443\":2,\"2551\":1,\"2555\":2,\"2563\":7,\"2566\":1,\"2572\":3,\"2598\":7,\"2600\":2,\"2601\":2,\"2610\":1,\"2614\":2,\"2621\":5,\"2624\":8,\"2636\":2,\"2652\":1,\"2654\":3,\"2668\":1,\"2686\":2,\"2690\":3,\"2692\":1,\"2694\":3,\"2741\":1,\"2781\":5,\"2793\":2,\"2796\":4,\"2799\":2,\"2801\":2,\"2806\":1,\"2808\":1,\"2809\":1,\"2816\":1,\"2817\":1,\"2818\":1,\"2819\":1,\"2838\":1,\"2972\":1,\"2975\":1,\"2977\":1,\"2978\":1,\"2980\":2,\"2981\":2,\"2983\":1,\"2984\":1,\"2986\":1,\"2987\":1,\"2991\":1,\"2992\":1,\"2993\":1,\"2997\":1,\"2999\":4,\"3000\":3,\"3003\":1,\"3006\":1,\"3008\":1,\"3010\":1,\"3015\":1,\"3019\":1,\"3033\":1}}],[\"stream中的每个元素都会作为参数传递给方法中\",{\"1\":{\"2215\":1}}],[\"stream操作的方法\",{\"1\":{\"2204\":1}}],[\"stream2\",{\"1\":{\"2200\":1}}],[\"stream1\",{\"1\":{\"2200\":1}}],[\"stream有多个重载\",{\"1\":{\"2199\":1}}],[\"stream<r>\",{\"1\":{\"2219\":1}}],[\"stream<employee>\",{\"1\":{\"2210\":1,\"2211\":1,\"2212\":1,\"2213\":1}}],[\"stream<e>\",{\"1\":{\"2196\":1,\"2197\":1}}],[\"stream<integer>\",{\"1\":{\"2200\":1}}],[\"stream<\",{\"1\":{\"2200\":1,\"2219\":1}}],[\"stream<t>\",{\"1\":{\"2198\":1,\"2200\":1,\"2202\":1,\"2203\":1}}],[\"stream<string>\",{\"1\":{\"2196\":1,\"2197\":1,\"2215\":1}}],[\"stream的操作分为中间操作和终止操作\",{\"1\":{\"2204\":1}}],[\"stream的操作步骤\",{\"0\":{\"2192\":1}}],[\"stream的特点\",{\"0\":{\"2193\":1}}],[\"stream的实例化\",{\"1\":{\"2192\":1}}],[\"stream的本质\",{\"0\":{\"2190\":1}}],[\"streamtest\",{\"1\":{\"1836\":1}}],[\"streaming集成\",{\"1\":{\"57\":1}}],[\"stream\",{\"0\":{\"2186\":1,\"2187\":1,\"2188\":1,\"2189\":1,\"2191\":1,\"2194\":1,\"2204\":1},\"1\":{\"11\":1,\"571\":1,\"786\":1,\"811\":1,\"1773\":2,\"1777\":1,\"1962\":1,\"2187\":2,\"2188\":5,\"2191\":2,\"2196\":3,\"2198\":3,\"2199\":3,\"2200\":2,\"2201\":2,\"2202\":1,\"2203\":1,\"2210\":3,\"2211\":3,\"2212\":3,\"2213\":3,\"2215\":2,\"2222\":1,\"2223\":2,\"2226\":1,\"2227\":1,\"2229\":1,\"2230\":1,\"2231\":1,\"2232\":1,\"2233\":1,\"2234\":1,\"2235\":1,\"2236\":1,\"2237\":1,\"2239\":1,\"2240\":1,\"2241\":1,\"2243\":2}}],[\"spacex和星舰进行查询\",{\"1\":{\"2872\":1}}],[\"spacex\",{\"1\":{\"2872\":2,\"2879\":2,\"2880\":1}}],[\"spark\",{\"1\":{\"57\":1}}],[\"speed\",{\"1\":{\"1259\":2}}],[\"spendtime\",{\"1\":{\"1251\":1}}],[\"specified\",{\"1\":{\"3150\":1}}],[\"spec\",{\"1\":{\"200\":2,\"1990\":3}}],[\"split​\",{\"1\":{\"753\":1}}],[\"split\",{\"0\":{\"434\":1,\"744\":1,\"753\":1},\"1\":{\"434\":3,\"744\":3,\"753\":1}}],[\"sprint\",{\"0\":{\"332\":1}}],[\"spring的一个子项目\",{\"1\":{\"3232\":1}}],[\"spring2\",{\"1\":{\"1388\":1}}],[\"springfox<\",{\"1\":{\"331\":1,\"336\":1}}],[\"springframework<\",{\"1\":{\"99\":2}}],[\"springframework\",{\"1\":{\"76\":1,\"93\":1,\"94\":1,\"95\":1,\"99\":3,\"110\":2,\"111\":1,\"141\":1,\"165\":1,\"179\":1,\"193\":1,\"198\":1,\"200\":1,\"286\":1,\"316\":1,\"317\":1,\"318\":1,\"319\":1,\"326\":1,\"328\":1,\"332\":1,\"336\":7,\"389\":3,\"3234\":1}}],[\"spring提供的默认持久化技术是jdbctempalte\",{\"1\":{\"268\":1}}],[\"springprofile>\",{\"1\":{\"262\":2}}],[\"spring知识回顾\",{\"1\":{\"158\":1}}],[\"springapplication\",{\"1\":{\"103\":1,\"104\":2,\"153\":1,\"213\":3}}],[\"spring系列框架的配置和依赖太复杂了\",{\"1\":{\"67\":1}}],[\"springdata集成\",{\"1\":{\"57\":1}}],[\"spring全家桶\",{\"1\":{\"11\":1}}],[\"springcloud\",{\"1\":{\"10\":1}}],[\"springboot集成\",{\"0\":{\"3230\":1}}],[\"springboot测试类\",{\"1\":{\"347\":1}}],[\"springboot内置的组件\",{\"1\":{\"315\":1}}],[\"springboot整合redis技术提供了多种客户端兼容模式\",{\"1\":{\"290\":1}}],[\"springboot整合redis时提供了专用的api接口stringredistemplate\",{\"1\":{\"288\":1}}],[\"springboot整合任何技术其实就是在springboot中使用对应技术的api\",{\"1\":{\"265\":1}}],[\"springboot官网没有收录mybatisplus\",{\"1\":{\"280\":1}}],[\"springboot都完成了\",{\"1\":{\"272\":1}}],[\"springboot使用\",{\"1\":{\"236\":1}}],[\"springboot从2\",{\"1\":{\"234\":1}}],[\"springboot提供了四个级别的配置文件\",{\"1\":{\"216\":1}}],[\"springboot提供了临时属性的方式快速修改某些配置\",{\"1\":{\"210\":1}}],[\"springboot就可以单独运行了\",{\"1\":{\"198\":1}}],[\"springboot程序添加配置后会打出一个特殊的包\",{\"1\":{\"201\":1}}],[\"springboot程序是基于maven创建的\",{\"1\":{\"190\":1}}],[\"springboot程序包含的基础文件\",{\"1\":{\"74\":1}}],[\"springboot不用指定配置类\",{\"1\":{\"183\":1}}],[\"springboottest注解的类\",{\"1\":{\"183\":1}}],[\"springboottest注解添加一个classes属性\",{\"1\":{\"183\":1}}],[\"springboottest注解定义在类的上方\",{\"1\":{\"180\":1}}],[\"springboottest修饰\",{\"1\":{\"181\":1}}],[\"springboottest\",{\"1\":{\"180\":1,\"181\":1,\"183\":1,\"275\":1,\"284\":1,\"347\":1}}],[\"springboot已经默认创建了一个测试类\",{\"1\":{\"180\":1}}],[\"springboot已经将所有的项目依赖的最佳版本组合给提前设置好了\",{\"1\":{\"96\":1}}],[\"springboot13configurationapplication\",{\"1\":{\"163\":1}}],[\"springboot可以将配置文件中所有的配置项信息封装到environment对象中\",{\"1\":{\"128\":1}}],[\"springboot会自动执行引导类的main方法\",{\"1\":{\"213\":1}}],[\"springboot会自动导入配置文件的\",{\"1\":{\"126\":1}}],[\"springboot会整合很多技术\",{\"1\":{\"11\":1}}],[\"springboot为所有的重要的配置项基本都设置了默认值\",{\"1\":{\"113\":1}}],[\"springboot默认配置文件\",{\"1\":{\"113\":1}}],[\"springboot默认集成了unit\",{\"1\":{\"74\":1}}],[\"springboot将tomcat功能抽取出来封装到了一个对象\",{\"1\":{\"108\":1}}],[\"springboot中读取maven设置值\",{\"0\":{\"236\":1}}],[\"springboot中内嵌了一个tomcat服务器\",{\"1\":{\"108\":1}}],[\"springboot中常见的依赖类型\",{\"1\":{\"99\":1}}],[\"springbootapplication配置生效的\",{\"1\":{\"105\":1}}],[\"springbootapplication\",{\"0\":{\"105\":1},\"1\":{\"103\":1,\"104\":1,\"153\":1,\"158\":2,\"163\":1}}],[\"springboot依赖的版本就已经确认了\",{\"1\":{\"96\":1}}],[\"springboot依赖管理总结\",{\"0\":{\"96\":1}}],[\"springboot做了什么\",{\"0\":{\"88\":1}}],[\"springboot的maven打包插件\",{\"0\":{\"194\":1}}],[\"springboot的tomcat服务器是内置的\",{\"1\":{\"136\":1}}],[\"springboot的引导类是boot工程的执行入口\",{\"1\":{\"103\":1}}],[\"springboot的parent并非包含了所有依赖的坐标\",{\"1\":{\"97\":1}}],[\"springboot的启动类在项目中的位置是固定的\",{\"1\":{\"77\":1}}],[\"springboot的特点\",{\"0\":{\"68\":1}}],[\"springboot项目依然能启动\",{\"1\":{\"213\":1}}],[\"springboot项目热部署实现原理\",{\"0\":{\"136\":1}}],[\"springboot项目的配置文件都是放在\",{\"1\":{\"112\":1}}],[\"springboot项目是需要联网创建的\",{\"1\":{\"73\":1}}],[\"springboot项目构建是需要联网的\",{\"1\":{\"71\":1}}],[\"springboot对它们进行了非常大的简化\",{\"1\":{\"67\":1}}],[\"springboot是由pivotal团队提供的全新框架\",{\"1\":{\"67\":1}}],[\"springboot是java开发必备的\",{\"1\":{\"66\":1}}],[\"springboot\",{\"0\":{\"28\":1,\"92\":1,\"315\":1,\"316\":1},\"1\":{\"10\":1,\"11\":1,\"111\":1,\"130\":1,\"200\":2,\"242\":2,\"244\":2,\"263\":2,\"314\":1,\"336\":1}}],[\"springmvc\",{\"0\":{\"317\":1},\"1\":{\"10\":1,\"11\":1,\"336\":1,\"2761\":1,\"2765\":1}}],[\"spring\",{\"0\":{\"71\":1,\"95\":1,\"3232\":1,\"3233\":1},\"1\":{\"10\":1,\"11\":1,\"71\":1,\"72\":1,\"73\":1,\"81\":1,\"94\":1,\"109\":3,\"150\":1,\"152\":1,\"153\":1,\"179\":1,\"194\":1,\"200\":5,\"221\":2,\"226\":5,\"229\":1,\"234\":1,\"236\":1,\"260\":1,\"261\":1,\"266\":1,\"267\":1,\"270\":3,\"271\":1,\"280\":1,\"281\":1,\"287\":1,\"292\":1,\"293\":1,\"316\":2,\"317\":1,\"318\":1,\"319\":1,\"322\":1,\"336\":4,\"340\":1,\"341\":1,\"355\":1,\"389\":1,\"390\":1,\"398\":1,\"1368\":1,\"1373\":1,\"1374\":5,\"1382\":1,\"1383\":7,\"2761\":1,\"2765\":1,\"3232\":2,\"3233\":1,\"3236\":1,\"3237\":1}}],[\"self\",{\"1\":{\"3156\":1}}],[\"selectbyname\",{\"1\":{\"2758\":1}}],[\"selectbyid\",{\"1\":{\"284\":1,\"347\":1}}],[\"select天然就可以批量操作\",{\"1\":{\"2366\":1}}],[\"selectpage\",{\"1\":{\"351\":1,\"352\":1,\"360\":2}}],[\"selectlist\",{\"1\":{\"284\":1,\"347\":1,\"355\":1,\"356\":1,\"357\":1}}],[\"select\",{\"1\":{\"274\":2,\"2310\":1,\"2311\":1,\"2349\":1,\"2353\":2,\"2356\":1,\"2365\":1,\"2391\":1,\"2408\":4,\"2440\":1,\"2441\":1,\"2442\":1,\"2443\":2,\"2574\":2}}],[\"seq\",{\"1\":{\"2901\":1,\"2907\":1,\"2910\":1,\"2915\":1,\"2925\":1}}],[\"sequence>\",{\"1\":{\"2781\":4}}],[\"sequence\",{\"1\":{\"2781\":2}}],[\"sequences与正则表达式进行匹配\",{\"1\":{\"739\":1}}],[\"session是用来保存用户登录后的数据\",{\"1\":{\"2831\":1}}],[\"session占用服务器资源\",{\"1\":{\"2829\":1}}],[\"session默认30分钟\",{\"1\":{\"2829\":1}}],[\"session默认失效时间\",{\"1\":{\"2825\":1}}],[\"session无大小限制\",{\"1\":{\"2829\":1}}],[\"session安全\",{\"1\":{\"2829\":1}}],[\"session可以存储任意类型\",{\"1\":{\"2827\":1}}],[\"session用于存储一次会话的多次请求的数据\",{\"1\":{\"2827\":1}}],[\"session对象调用invalidate\",{\"1\":{\"2826\":1}}],[\"session活化\",{\"1\":{\"2823\":1}}],[\"session的特点\",{\"0\":{\"2827\":1}}],[\"session的销毁\",{\"0\":{\"2824\":1}}],[\"session的钝化\",{\"1\":{\"2823\":1}}],[\"session的钝化和活化\",{\"0\":{\"2823\":1}}],[\"session的有效期\",{\"0\":{\"2821\":1}}],[\"session的存在是依赖与cookie的\",{\"1\":{\"2820\":1}}],[\"session的原理\",{\"0\":{\"2820\":1}}],[\"session的工作流程\",{\"0\":{\"2813\":1}}],[\"sessionid是session的唯一标识id\",{\"1\":{\"2819\":1}}],[\"sessiondidactivate\",{\"1\":{\"2721\":1}}],[\"sessiondestroyed\",{\"1\":{\"2715\":1}}],[\"sessionwillpassivate\",{\"1\":{\"2721\":1}}],[\"sessioncreated\",{\"1\":{\"2715\":1}}],[\"session域中数据的监听器\",{\"1\":{\"2712\":1}}],[\"session域对象\",{\"0\":{\"2675\":1}}],[\"session也会消失\",{\"1\":{\"2676\":1}}],[\"session\",{\"0\":{\"2811\":1},\"1\":{\"2675\":1,\"2789\":1,\"2814\":1,\"2822\":1,\"2825\":2,\"2829\":1}}],[\"sendredirect\",{\"1\":{\"2659\":1,\"2668\":1}}],[\"send\",{\"1\":{\"1983\":1,\"1985\":1}}],[\"sentinel\",{\"1\":{\"10\":1,\"11\":1}}],[\"searchhit\",{\"1\":{\"2992\":1,\"2993\":1,\"2997\":1,\"3000\":1,\"3003\":1,\"3006\":1,\"3008\":1,\"3010\":1,\"3019\":1}}],[\"searchhits\",{\"1\":{\"2992\":1,\"2993\":1,\"2997\":1,\"3000\":1,\"3003\":1,\"3006\":1,\"3008\":1,\"3010\":1,\"3019\":1}}],[\"searchresponse\",{\"1\":{\"2992\":1,\"2993\":1,\"2997\":1,\"3000\":1,\"3003\":1,\"3006\":1,\"3008\":1,\"3010\":1,\"3015\":1,\"3019\":1}}],[\"searchrequest\",{\"1\":{\"2992\":3,\"2993\":3,\"2997\":3,\"3000\":3,\"3003\":3,\"3006\":3,\"3008\":3,\"3010\":3,\"3015\":3,\"3019\":3}}],[\"searchsourcebuilder对象调用aggregation方法可以进行聚合操作\",{\"1\":{\"3014\":1}}],[\"searchsourcebuilder\",{\"1\":{\"2992\":2,\"2993\":1,\"2994\":1,\"2996\":2,\"2997\":2,\"2999\":2,\"3000\":2,\"3002\":2,\"3003\":2,\"3005\":2,\"3006\":2,\"3008\":2,\"3010\":2,\"3014\":2,\"3015\":2,\"3016\":2,\"3018\":2,\"3019\":2}}],[\"search\",{\"0\":{\"2843\":1},\"1\":{\"2858\":1,\"2908\":1,\"2920\":1,\"2926\":1,\"2928\":1,\"2949\":1,\"2952\":1,\"2954\":1,\"2955\":1,\"2992\":1,\"2993\":1,\"2997\":1,\"3000\":1,\"3003\":1,\"3006\":1,\"3008\":1,\"3010\":1,\"3015\":1,\"3019\":1}}],[\"seasons\",{\"1\":{\"1382\":2,\"1383\":2}}],[\"seasondesc\",{\"1\":{\"1373\":6}}],[\"seasonname+\",{\"1\":{\"1382\":1}}],[\"seasonname\",{\"1\":{\"1373\":6,\"1382\":4}}],[\"season\",{\"1\":{\"1373\":10,\"1374\":2}}],[\"seata\",{\"1\":{\"10\":1,\"11\":1}}],[\"separator\",{\"1\":{\"1765\":1,\"1831\":1}}],[\"sep\",{\"1\":{\"1185\":1}}],[\"sextype\",{\"1\":{\"2781\":3}}],[\"sex>\",{\"1\":{\"2779\":1,\"2782\":1}}],[\"sex\",{\"1\":{\"1104\":2,\"2777\":2,\"2781\":1}}],[\"seesion就自动删除了\",{\"1\":{\"2825\":1}}],[\"seed\",{\"1\":{\"2202\":2}}],[\"seekablebytechannel\",{\"1\":{\"1920\":1}}],[\"seek\",{\"1\":{\"1884\":1,\"1891\":1}}],[\"seek方法\",{\"0\":{\"1884\":1}}],[\"see\",{\"1\":{\"811\":2,\"812\":1,\"3243\":1}}],[\"se标准类库\",{\"1\":{\"778\":1}}],[\"sec\",{\"1\":{\"2602\":7}}],[\"security\",{\"1\":{\"1831\":2,\"2860\":4,\"3203\":1,\"3214\":1}}],[\"securityexception\",{\"1\":{\"600\":1,\"601\":1,\"602\":1,\"604\":1,\"605\":1,\"606\":1,\"607\":1,\"608\":1,\"609\":1,\"610\":1,\"611\":1,\"618\":1}}],[\"secondaries\",{\"1\":{\"3130\":1}}],[\"secondary表示副节点\",{\"1\":{\"3159\":1}}],[\"secondarydelaysecs\",{\"1\":{\"3153\":1}}],[\"secondary\",{\"1\":{\"3128\":1,\"3138\":1,\"3150\":1,\"3159\":1}}],[\"second\",{\"1\":{\"470\":3,\"471\":2,\"2920\":1}}],[\"seconds\",{\"1\":{\"262\":1,\"2805\":1}}],[\"serlvlet\",{\"1\":{\"2755\":1}}],[\"serialized\",{\"1\":{\"3033\":1}}],[\"serializable>\",{\"1\":{\"2200\":1}}],[\"serializable接口\",{\"1\":{\"878\":1}}],[\"serializable\",{\"1\":{\"440\":2,\"466\":1,\"467\":1,\"468\":1,\"475\":1,\"538\":1,\"584\":1,\"595\":1,\"746\":1,\"1905\":1,\"1907\":1,\"1990\":1,\"2390\":1}}],[\"serial\",{\"1\":{\"1430\":1}}],[\"serialversionuid\",{\"0\":{\"1910\":1},\"1\":{\"440\":2,\"1364\":1,\"1430\":1,\"1905\":1,\"1907\":1,\"1910\":3}}],[\"service方法中的参数是servletrequest和servletresponse\",{\"1\":{\"2587\":1}}],[\"service方法中有servletrequest和servletresponse两个参数\",{\"1\":{\"2537\":1}}],[\"service方法被调用执行\",{\"1\":{\"2583\":1}}],[\"service方法的参数\",{\"1\":{\"2582\":1}}],[\"serviceimpl层\",{\"1\":{\"361\":1}}],[\"serviceimpl<bookdao\",{\"1\":{\"360\":1,\"361\":1}}],[\"service层\",{\"1\":{\"361\":1}}],[\"service层也有很多通用的curd方法\",{\"1\":{\"361\":1}}],[\"service作为业务层接口\",{\"1\":{\"358\":1}}],[\"service修正功能\",{\"1\":{\"338\":1}}],[\"service开发\",{\"1\":{\"338\":1}}],[\"service\",{\"0\":{\"358\":1,\"2553\":1,\"3251\":1},\"1\":{\"313\":1,\"358\":1,\"360\":1,\"361\":1,\"1291\":1,\"1569\":6,\"2531\":1,\"2551\":2,\"2553\":2,\"2566\":1,\"2760\":1,\"2765\":1}}],[\"serverless\",{\"0\":{\"3029\":1}}],[\"server>\",{\"1\":{\"2771\":1}}],[\"server模板\",{\"0\":{\"2498\":1}}],[\"servertimezone=asia\",{\"1\":{\"390\":1}}],[\"servertimezone=utc\",{\"1\":{\"267\":1,\"271\":1,\"277\":1,\"281\":1,\"341\":1}}],[\"servertimeout\",{\"1\":{\"171\":1}}],[\"serversocket\",{\"1\":{\"1973\":1,\"1975\":2,\"1977\":6,\"1996\":1}}],[\"serversocketchannel\",{\"1\":{\"1913\":1}}],[\"servers\",{\"1\":{\"164\":1,\"167\":2,\"170\":1,\"171\":1,\"172\":1,\"175\":1,\"176\":1}}],[\"serverconfig\",{\"1\":{\"163\":1,\"164\":1,\"167\":1,\"171\":1,\"172\":1,\"175\":1,\"176\":1}}],[\"server\",{\"0\":{\"2502\":1},\"1\":{\"71\":1,\"115\":2,\"128\":1,\"210\":1,\"213\":1,\"226\":3,\"256\":1,\"258\":2,\"390\":1,\"1977\":1,\"1978\":1,\"2457\":1,\"2468\":1,\"2498\":1,\"2502\":1,\"2522\":1,\"3049\":1,\"3142\":1}}],[\"servlet会创建一个响应头来返回创建的sessionid\",{\"1\":{\"2820\":1}}],[\"servlet用来删除还未到期的cook信息\",{\"1\":{\"2805\":1}}],[\"servlet2\",{\"0\":{\"2799\":1}}],[\"servlet1创建并发送cookie\",{\"0\":{\"2801\":1}}],[\"servlet1\",{\"0\":{\"2798\":1}}],[\"servlet规范中定义的一种特殊类\",{\"1\":{\"2711\":1}}],[\"servlet监听器\",{\"0\":{\"2711\":1}}],[\"servletcontext对象被销毁了\",{\"1\":{\"2725\":1}}],[\"servletcontext对象被销毁之前会调用该方法\",{\"1\":{\"2724\":1}}],[\"servletcontext对象被创建了\",{\"1\":{\"2725\":1}}],[\"servletcontext对象创建后会调用该方法\",{\"1\":{\"2724\":1}}],[\"servletcontext对象代表了整个web应用\",{\"1\":{\"2680\":1}}],[\"servletcontextattributeevent对象代表属性变化事件\",{\"1\":{\"2717\":1}}],[\"servletcontextattributeevent\",{\"1\":{\"2717\":3}}],[\"servletcontextattributelistener\",{\"0\":{\"2717\":1}}],[\"servletcontext销毁时调用\",{\"1\":{\"2714\":1}}],[\"servletcontext创建时调用\",{\"1\":{\"2714\":1}}],[\"servletcontextevent对象代表从servletcontext对象身上捕获到的事件\",{\"1\":{\"2714\":1}}],[\"servletcontextevent\",{\"1\":{\"2714\":2,\"2724\":2,\"2725\":2}}],[\"servletcontextlistener接口的方法\",{\"0\":{\"2724\":1}}],[\"servletcontextlistener\",{\"0\":{\"2714\":1,\"2722\":1},\"1\":{\"2725\":1,\"2726\":1}}],[\"servletcontext1\",{\"1\":{\"2682\":1}}],[\"servletcontext\",{\"0\":{\"2679\":1},\"1\":{\"2677\":1,\"2682\":5,\"2686\":1,\"2690\":1,\"2692\":1,\"2694\":1}}],[\"servletconfig对象\",{\"1\":{\"2556\":1}}],[\"servletconfig\",{\"1\":{\"2551\":2,\"2552\":2,\"2556\":7}}],[\"servlet中的request请求对象\",{\"1\":{\"2673\":1}}],[\"servletoutputstream\",{\"1\":{\"2637\":1,\"2645\":1,\"2646\":1,\"2647\":1,\"2648\":1}}],[\"servletinputstream\",{\"1\":{\"2606\":1}}],[\"servletpath\",{\"1\":{\"2598\":2}}],[\"servlet类中定义的路由\",{\"1\":{\"2597\":1}}],[\"servlet类中的service方法\",{\"1\":{\"2589\":1}}],[\"servlet类的选择\",{\"0\":{\"2561\":1}}],[\"servletdemo6\",{\"1\":{\"2655\":2}}],[\"servletdemo5\",{\"1\":{\"2655\":1}}],[\"servletdemo3\",{\"1\":{\"2598\":2}}],[\"servletdemo\",{\"1\":{\"2571\":1}}],[\"servletdemo2\",{\"1\":{\"2564\":1}}],[\"servletdemo1实现了servlet接口\",{\"1\":{\"2537\":1}}],[\"servletdemo1\",{\"1\":{\"2531\":1,\"2532\":1,\"2556\":1}}],[\"servlet接口有一个实现类\",{\"1\":{\"2558\":1}}],[\"servlet接口一共有五个方法\",{\"1\":{\"2551\":1}}],[\"servlet对象会被销毁\",{\"1\":{\"2554\":1}}],[\"servlet是单例的\",{\"1\":{\"2547\":1}}],[\"servlet是javaee规范之一\",{\"1\":{\"2522\":1}}],[\"servlet是javaweb最为核心的内容\",{\"1\":{\"2522\":1}}],[\"servlet运行在servlet容器\",{\"1\":{\"2544\":1}}],[\"servlet的体系结构\",{\"0\":{\"2558\":1}}],[\"servlet的init方法\",{\"1\":{\"2547\":1}}],[\"servlet的对象\",{\"0\":{\"2543\":1}}],[\"servlet的本质\",{\"0\":{\"2524\":1}}],[\"servlet方法由web服务器调用\",{\"1\":{\"2538\":1}}],[\"servlet由web服务器创建\",{\"1\":{\"2538\":1}}],[\"servlet执行流程概述\",{\"0\":{\"2536\":1}}],[\"servletexception\",{\"1\":{\"2531\":1,\"2551\":2,\"2552\":1,\"2553\":1,\"2556\":1,\"2564\":2,\"2566\":1,\"2598\":2,\"2601\":1,\"2602\":1,\"2610\":1,\"2614\":2,\"2624\":2,\"2625\":2,\"2640\":1,\"2655\":2,\"2661\":1,\"2662\":1,\"2697\":2}}],[\"servletresponse封装的是响应数据\",{\"1\":{\"2537\":1}}],[\"servletresponse\",{\"1\":{\"2531\":1,\"2551\":1,\"2553\":2,\"2566\":3,\"2652\":1,\"2697\":1,\"2794\":1}}],[\"servletrequestattributeevent对象代表属性变化事件\",{\"1\":{\"2719\":1}}],[\"servletrequestattributeevent\",{\"1\":{\"2719\":3}}],[\"servletrequestattributelistener\",{\"0\":{\"2719\":1}}],[\"servletrequest对象销毁时调用\",{\"1\":{\"2716\":1}}],[\"servletrequest对象创建时调用\",{\"1\":{\"2716\":1}}],[\"servletrequestevent对象代表从httpservletrequest对象身上捕获到的事件\",{\"1\":{\"2716\":1}}],[\"servletrequestevent\",{\"1\":{\"2716\":2}}],[\"servletrequestlistener\",{\"0\":{\"2716\":1}}],[\"servletrequest和httpservletrequest是继承关系\",{\"1\":{\"2588\":1}}],[\"servletrequest和httpservletrequest都是java提供的\",{\"1\":{\"2588\":1}}],[\"servletrequest封装的是请求数据\",{\"1\":{\"2537\":1}}],[\"servletrequest\",{\"1\":{\"2531\":1,\"2551\":1,\"2553\":2,\"2566\":3,\"2652\":1,\"2682\":1,\"2697\":1,\"2795\":1,\"2814\":1}}],[\"servlet实现类会被自动访问\",{\"1\":{\"2529\":1}}],[\"servlet包是tomcat\",{\"1\":{\"2525\":1}}],[\"servlet就是一个接口\",{\"1\":{\"2524\":1}}],[\"servlet介绍\",{\"0\":{\"2521\":1}}],[\"servlet需要依赖tomcat才能运行\",{\"1\":{\"2450\":1}}],[\"servlet容器都会调用servlet的service\",{\"1\":{\"2549\":1}}],[\"servlet容器\",{\"1\":{\"2450\":1}}],[\"servlet3\",{\"1\":{\"1389\":1}}],[\"servlet层\",{\"1\":{\"363\":1}}],[\"servlet\",{\"0\":{\"2535\":1,\"2544\":1,\"2551\":1,\"2557\":1,\"2610\":1,\"2624\":1,\"3266\":1},\"1\":{\"11\":1,\"1284\":1,\"2447\":1,\"2521\":1,\"2522\":1,\"2525\":1,\"2531\":2,\"2532\":1,\"2551\":1,\"2553\":1,\"2556\":1,\"2571\":1,\"2697\":2,\"2707\":1,\"2754\":1,\"2791\":3}}],[\"setgender\",{\"1\":{\"2980\":1}}],[\"setpath\",{\"1\":{\"2808\":1}}],[\"setpriority\",{\"1\":{\"1487\":1,\"1489\":1}}],[\"setproperty\",{\"1\":{\"153\":1,\"1691\":1,\"2297\":2}}],[\"setmaxage\",{\"1\":{\"2805\":2,\"2822\":1}}],[\"setmeal\",{\"0\":{\"378\":1,\"379\":1},\"1\":{\"374\":2,\"378\":1}}],[\"setheader\",{\"1\":{\"2636\":1,\"2641\":1,\"2659\":1,\"2661\":1}}],[\"setcontenttype\",{\"1\":{\"2641\":1,\"2642\":1,\"2648\":1}}],[\"setcorepoolsize\",{\"1\":{\"1569\":1}}],[\"setcharacterencoding\",{\"1\":{\"2629\":1,\"2630\":1,\"2632\":1}}],[\"setblob\",{\"1\":{\"2363\":1,\"2364\":1}}],[\"sets\",{\"1\":{\"3139\":1,\"3142\":4,\"3143\":4,\"3144\":4,\"3213\":3,\"3214\":1}}],[\"setstatus\",{\"1\":{\"2635\":1,\"2659\":1,\"2661\":1}}],[\"setstring\",{\"1\":{\"2322\":1,\"2325\":2,\"2373\":1,\"2376\":1}}],[\"setscale\",{\"0\":{\"535\":1},\"1\":{\"535\":3}}],[\"setint\",{\"1\":{\"2322\":1,\"2365\":1}}],[\"setin\",{\"1\":{\"1869\":1}}],[\"setid\",{\"1\":{\"347\":1}}],[\"setobject\",{\"1\":{\"2329\":2,\"2333\":1,\"2349\":1,\"2352\":1,\"2355\":1,\"2364\":3,\"2377\":1,\"2386\":1,\"2405\":4}}],[\"setout\",{\"1\":{\"1869\":1,\"1873\":1}}],[\"setout方法对默认设备进行改变\",{\"1\":{\"1869\":1}}],[\"setordere\",{\"1\":{\"1719\":1,\"1720\":1}}],[\"set数据存储的特点\",{\"0\":{\"1634\":1}}],[\"set接口中没有额外定义新的方法\",{\"1\":{\"1640\":1,\"1653\":1}}],[\"set接口的方法\",{\"0\":{\"1640\":1}}],[\"set接口的主要实现类\",{\"1\":{\"1635\":1}}],[\"set接口\",{\"1\":{\"1633\":1}}],[\"set接口是collection的子接口\",{\"1\":{\"1633\":1}}],[\"set和list\",{\"1\":{\"1582\":1}}],[\"setdefaultrwconcern\",{\"1\":{\"3161\":2}}],[\"setdescription\",{\"1\":{\"347\":2}}],[\"setdomain\",{\"1\":{\"2809\":1}}],[\"setdate\",{\"1\":{\"2322\":1,\"2325\":1}}],[\"setdaemon\",{\"1\":{\"1463\":1}}],[\"setxxx方法填充上述占位符\",{\"1\":{\"2322\":1}}],[\"setxxx方法才能访问\",{\"1\":{\"1119\":1}}],[\"setxxx来获取和操作\",{\"1\":{\"1113\":1}}],[\"setxxx\",{\"1\":{\"1064\":1,\"1283\":1,\"2321\":3,\"2322\":4}}],[\"setxxx和get方法来访问和操作属性\",{\"1\":{\"1056\":1}}],[\"setattribute\",{\"1\":{\"2654\":1,\"2655\":1,\"2672\":1,\"2678\":1,\"2690\":2,\"2816\":1}}],[\"setautocommit\",{\"0\":{\"2380\":1},\"1\":{\"2377\":1,\"2380\":1,\"2387\":2,\"2391\":1}}],[\"setage\",{\"1\":{\"1056\":2,\"1120\":2,\"2980\":1}}],[\"setaccessible启动和禁用访问安全检查的开关\",{\"1\":{\"2069\":1}}],[\"setaccessible\",{\"0\":{\"618\":1,\"627\":1,\"630\":1,\"2069\":1},\"1\":{\"616\":1,\"617\":1,\"618\":1,\"627\":1,\"629\":1,\"630\":1,\"2010\":3,\"2058\":1,\"2063\":2,\"2067\":1,\"2069\":1,\"2352\":1,\"2355\":1,\"2405\":2}}],[\"set<employee>\",{\"1\":{\"2243\":1}}],[\"set<map\",{\"1\":{\"723\":2,\"1710\":1}}],[\"set<string>\",{\"1\":{\"721\":1}}],[\"set<k>\",{\"1\":{\"721\":1}}],[\"set<t>\",{\"1\":{\"691\":2}}],[\"setname\",{\"1\":{\"347\":2,\"1479\":1,\"1480\":2,\"2007\":1,\"2980\":1}}],[\"set方法访问\",{\"1\":{\"1480\":1}}],[\"set方法\",{\"1\":{\"344\":1}}],[\"set\",{\"0\":{\"617\":1,\"703\":1,\"1631\":1,\"1632\":1,\"1653\":1},\"1\":{\"288\":1,\"382\":8,\"617\":2,\"655\":1,\"681\":1,\"703\":2,\"721\":2,\"1578\":1,\"1582\":2,\"1633\":1,\"1635\":2,\"1638\":1,\"1654\":11,\"1657\":6,\"1658\":1,\"1687\":1,\"1694\":1,\"2010\":1,\"2058\":1,\"2062\":1,\"2242\":1,\"2329\":1,\"2334\":1,\"2352\":1,\"2355\":1,\"2387\":2,\"2405\":2,\"2408\":1,\"2801\":1,\"2820\":1,\"3024\":1,\"3125\":1,\"3150\":1,\"3156\":1,\"3157\":1,\"3161\":1}}],[\"settransactionisolation\",{\"0\":{\"2390\":1},\"1\":{\"2390\":1,\"2391\":1}}],[\"settype\",{\"1\":{\"347\":2}}],[\"setter\",{\"1\":{\"131\":1,\"156\":1,\"344\":1,\"2981\":1}}],[\"settings\",{\"1\":{\"302\":2,\"2890\":1,\"3153\":1,\"3154\":1}}],[\"setting中勾选\",{\"1\":{\"145\":1}}],[\"setting\",{\"1\":{\"79\":1,\"298\":1}}],[\"se\",{\"1\":{\"11\":1,\"763\":1,\"2718\":3,\"2721\":2}}],[\"jpa\",{\"1\":{\"3232\":1}}],[\"jpa是基于注解的\",{\"1\":{\"1388\":1}}],[\"jpeg格式\",{\"1\":{\"2684\":1}}],[\"jpeg\",{\"1\":{\"2684\":1,\"2686\":1}}],[\"jpg\",{\"1\":{\"564\":2,\"565\":1,\"566\":1,\"571\":1,\"575\":1,\"1797\":1,\"1821\":4,\"1836\":2,\"1888\":2,\"2364\":1,\"2365\":1,\"2646\":1,\"2647\":1,\"2686\":1,\"2693\":1,\"2907\":1,\"2908\":2,\"2925\":1,\"2926\":2}}],[\"j++\",{\"1\":{\"950\":1,\"954\":1,\"955\":1,\"956\":2,\"992\":1}}],[\"j\",{\"1\":{\"685\":2,\"950\":4,\"954\":2,\"955\":4,\"956\":6,\"992\":3,\"1178\":1,\"2986\":1,\"2997\":1,\"3000\":1,\"3003\":1,\"3006\":1,\"3011\":1}}],[\"jre\",{\"0\":{\"776\":1,\"778\":1},\"1\":{\"636\":1,\"778\":2,\"779\":1,\"2012\":1,\"2741\":1}}],[\"jin\",{\"1\":{\"602\":2,\"2038\":2}}],[\"jinno\",{\"1\":{\"368\":1,\"503\":2,\"509\":2,\"662\":2,\"808\":1,\"970\":1,\"1034\":1,\"1068\":1,\"1104\":1,\"1163\":1,\"1594\":1,\"1603\":1,\"1692\":1,\"1710\":2,\"2157\":1,\"2166\":1,\"2221\":6,\"2322\":1,\"2992\":1}}],[\"journal\",{\"1\":{\"3048\":1,\"3142\":1}}],[\"joins\",{\"1\":{\"3031\":1}}],[\"join\",{\"1\":{\"1479\":1,\"1481\":2,\"3028\":1}}],[\"jobs=j\",{\"1\":{\"712\":2}}],[\"jobs\",{\"1\":{\"503\":2,\"509\":2,\"713\":3,\"716\":1}}],[\"joda\",{\"1\":{\"461\":1}}],[\"jetbrains\",{\"1\":{\"2507\":1}}],[\"jetty<\",{\"1\":{\"111\":1}}],[\"jetty\",{\"1\":{\"111\":1}}],[\"jerry\",{\"1\":{\"885\":1,\"1657\":2,\"1687\":1,\"1710\":1,\"2010\":1,\"2221\":6}}],[\"jedis\",{\"1\":{\"292\":1,\"293\":2}}],[\"jedis连接redis服务器是直连模式\",{\"1\":{\"291\":1}}],[\"junit默认已经被springboot继承了\",{\"1\":{\"178\":1}}],[\"junit\",{\"0\":{\"178\":1,\"318\":1},\"1\":{\"620\":2}}],[\"jakarta\",{\"1\":{\"2844\":1}}],[\"jackson\",{\"1\":{\"2982\":1}}],[\"jack\",{\"1\":{\"1657\":3,\"1687\":1}}],[\"japan\",{\"1\":{\"1227\":2}}],[\"jar指令来启动\",{\"1\":{\"2750\":1}}],[\"jar也都可以\",{\"1\":{\"2748\":1}}],[\"jar里有的war里也都有\",{\"1\":{\"2748\":1}}],[\"jar为文件扩展名\",{\"1\":{\"2731\":1}}],[\"jar文件内的文件名是unicode文本\",{\"1\":{\"2731\":1}}],[\"jar文件是一种归档文件\",{\"1\":{\"2731\":1}}],[\"jar文件\",{\"1\":{\"2731\":1}}],[\"jar文件中查看对应信息\",{\"1\":{\"237\":1}}],[\"jar了\",{\"1\":{\"2526\":1}}],[\"jar中的class文件时\",{\"1\":{\"2291\":1}}],[\"jar>java>net>inetaddress\",{\"1\":{\"1942\":1}}],[\"jar>java>util>regex>matcher\",{\"1\":{\"754\":1}}],[\"jar>java>util>regex>pattern\",{\"1\":{\"745\":1}}],[\"jar>java>util>function\",{\"1\":{\"724\":1}}],[\"jar>java>util>map\",{\"1\":{\"705\":1}}],[\"jar>java>util>list\",{\"1\":{\"693\":1}}],[\"jar>java>util>collections\",{\"1\":{\"679\":1}}],[\"jar>java>util>scanner\",{\"1\":{\"637\":1,\"758\":1}}],[\"jar>java>io>bufferedwriter\",{\"1\":{\"1831\":1}}],[\"jar>java>io>bufferedreader\",{\"1\":{\"1830\":1}}],[\"jar>java>io>bufferedoutputstream\",{\"1\":{\"1829\":1}}],[\"jar>java>io>bufferedinputstream\",{\"1\":{\"1828\":1}}],[\"jar>java>io>outputstreamr\",{\"1\":{\"572\":1}}],[\"jar>java>io>writer\",{\"1\":{\"572\":1}}],[\"jar>java>io>reader\",{\"1\":{\"564\":1}}],[\"jar>java>io>inputstream\",{\"1\":{\"564\":1}}],[\"jar>java>io>file>file\",{\"1\":{\"538\":1}}],[\"jar>java>math>bigdecimal\",{\"1\":{\"530\":1}}],[\"jar>java>math>biginteger\",{\"1\":{\"529\":1}}],[\"jar>java>lang>reflect>method\",{\"1\":{\"619\":1}}],[\"jar>java>lang>class\",{\"1\":{\"584\":1}}],[\"jar>java>lang>number\",{\"1\":{\"523\":1}}],[\"jar>java>lang>math\",{\"1\":{\"511\":1}}],[\"jar命令后运行的类\",{\"1\":{\"201\":1}}],[\"jar执行此程序包\",{\"1\":{\"200\":1}}],[\"jarlauncher类执行时会找到start\",{\"1\":{\"201\":1}}],[\"jarlauncher执行该类\",{\"1\":{\"200\":1}}],[\"jarlauncher\",{\"1\":{\"198\":1,\"200\":1}}],[\"jar包与war包的对比\",{\"0\":{\"2748\":1}}],[\"jar包与zip包\",{\"0\":{\"2733\":1}}],[\"jar包和war包使用\",{\"0\":{\"2749\":1}}],[\"jar包和war包\",{\"0\":{\"2746\":1}}],[\"jar包签名\",{\"0\":{\"2735\":1}}],[\"jar包主要是对class文件进行打包\",{\"1\":{\"2734\":1}}],[\"jar包的作用\",{\"0\":{\"2736\":1}}],[\"jar包的内容\",{\"0\":{\"2734\":1}}],[\"jar包的目录结构\",{\"0\":{\"197\":1}}],[\"jar包其实就是class文件的集合\",{\"1\":{\"2732\":1}}],[\"jar包介绍\",{\"0\":{\"2730\":1}}],[\"jar包\",{\"0\":{\"2423\":1,\"2729\":1},\"1\":{\"2289\":1}}],[\"jar包中的类和配置文件由于不会发生变化\",{\"1\":{\"137\":1}}],[\"jar\",{\"1\":{\"191\":2,\"200\":2,\"207\":2,\"210\":2,\"612\":1,\"2289\":1,\"2733\":3,\"2735\":1,\"2738\":2,\"2743\":2,\"2744\":1}}],[\"jar组成\",{\"1\":{\"190\":1}}],[\"java前端\",{\"0\":{\"3268\":1}}],[\"java单独操作mongodb\",{\"1\":{\"3228\":1}}],[\"java操作\",{\"0\":{\"3228\":1}}],[\"java编译生成的class文件是平台无关的\",{\"1\":{\"2734\":1}}],[\"java文件\",{\"1\":{\"2734\":1}}],[\"java包解析\",{\"0\":{\"2732\":1}}],[\"java归档\",{\"1\":{\"2731\":1}}],[\"java和静态资源变更都会重新部署\",{\"1\":{\"2502\":1}}],[\"java源码目录\",{\"1\":{\"2472\":1}}],[\"java源码中会用到\",{\"1\":{\"906\":1}}],[\"java代码参考\",{\"0\":{\"2405\":1}}],[\"java代码控制\",{\"1\":{\"357\":1}}],[\"java与数据库交互涉及到的相关api中的索引都从1开始\",{\"1\":{\"2343\":1}}],[\"java与sql对应数据类型转换表\",{\"0\":{\"2314\":1}}],[\"java类型\",{\"1\":{\"2314\":1}}],[\"java类可以实现多个接口\",{\"1\":{\"1262\":1}}],[\"javax\",{\"1\":{\"2279\":1,\"2420\":1,\"2424\":1,\"2435\":1,\"2697\":2}}],[\"java底层语法很多地方用到了optional\",{\"1\":{\"2249\":1}}],[\"java为不同格式的函数提供了不同类型的内置接口\",{\"1\":{\"2133\":1}}],[\"java安装\",{\"0\":{\"2105\":1}}],[\"java8\",{\"1\":{\"2104\":1,\"2188\":1}}],[\"java11\",{\"1\":{\"2104\":1}}],[\"java17\",{\"1\":{\"2104\":1}}],[\"java下载地址\",{\"1\":{\"2102\":1}}],[\"java版本\",{\"0\":{\"2102\":1}}],[\"java版本选择\",{\"0\":{\"769\":1}}],[\"java不是动态语言\",{\"1\":{\"1999\":1}}],[\"java不支持多重继承\",{\"1\":{\"1256\":1}}],[\"javascript\",{\"1\":{\"1999\":1,\"2447\":1}}],[\"javase\",{\"1\":{\"10\":1}}],[\"java提供的网络类库\",{\"1\":{\"1923\":1}}],[\"java提供了更强大的线程同步机制\",{\"1\":{\"1530\":1}}],[\"java提供了4种权限修饰符来修饰类及类的内部结构\",{\"1\":{\"1059\":1}}],[\"java提供了默认长度\",{\"1\":{\"850\":1}}],[\"java对象转json\",{\"0\":{\"2838\":1},\"1\":{\"2982\":1}}],[\"java对象转为json字符串\",{\"1\":{\"2835\":1}}],[\"java对nio进行了极大的扩展\",{\"1\":{\"1914\":1}}],[\"java对于每一种数据都定义了明确的具体数据类型\",{\"1\":{\"826\":1}}],[\"java泛型可以保证如果程序在编译时没有发出警告\",{\"1\":{\"1703\":1}}],[\"java引入了\",{\"1\":{\"1700\":1}}],[\"java引用变量有两个类型\",{\"1\":{\"1147\":1}}],[\"java垃圾回收就是一个典型的守护线程\",{\"1\":{\"1463\":1}}],[\"java采用的异常处理机制\",{\"1\":{\"1317\":1}}],[\"java语言的基于套接字编程分为服务端编程和客户端编程\",{\"1\":{\"1968\":1}}],[\"java语言的jvm可以通过java\",{\"1\":{\"1465\":1}}],[\"java语言使用thread类及其子类的对象来表示线程\",{\"1\":{\"1501\":1}}],[\"java语言欠缺属性\",{\"1\":{\"1283\":1}}],[\"java语言表达所操作的boolean值\",{\"1\":{\"860\":1}}],[\"javabean举例\",{\"0\":{\"1286\":1}}],[\"javabean的种类\",{\"0\":{\"1285\":1}}],[\"javabean是一种java语言写成的可重用组件\",{\"1\":{\"1282\":1}}],[\"javabean\",{\"0\":{\"1282\":1},\"1\":{\"2754\":1,\"2755\":1}}],[\"java开发中\",{\"1\":{\"1262\":1}}],[\"java开发人员使用的\",{\"1\":{\"777\":1}}],[\"java才是真正的面向对象\",{\"1\":{\"1189\":1}}],[\"java只支持单继承和多层继承\",{\"1\":{\"1115\":1}}],[\"java权限修饰符置于类的成员定义前\",{\"1\":{\"1061\":1}}],[\"java都会认的\",{\"1\":{\"1049\":1}}],[\"java里方法的参数传递方式只有一种\",{\"1\":{\"1043\":1}}],[\"java里的方法不能独立存在\",{\"1\":{\"1028\":1}}],[\"java规定的4种权限修饰符\",{\"1\":{\"1029\":1}}],[\"java内部已经将参数的类型穷举好了\",{\"1\":{\"2143\":1}}],[\"java内部就有很多这样的类\",{\"1\":{\"1101\":1}}],[\"java内置四大核心functional\",{\"0\":{\"2144\":1}}],[\"java内置了丰富的类\",{\"1\":{\"1016\":1}}],[\"java内置类\",{\"1\":{\"1016\":1}}],[\"java内容分类\",{\"0\":{\"763\":1}}],[\"java是纯面向对象的语言\",{\"1\":{\"2133\":1}}],[\"java是向前兼容的\",{\"1\":{\"2105\":1}}],[\"java是\",{\"1\":{\"1923\":1}}],[\"java是强类型语言\",{\"1\":{\"960\":1,\"1152\":1}}],[\"java是需要手动分配内存空间\",{\"1\":{\"850\":1}}],[\"java要怎么分配内存呢\",{\"1\":{\"850\":1}}],[\"java各整数类型有固定的表数范围和字段长度\",{\"1\":{\"838\":1}}],[\"java中允许将一个类a声明在另一个类b中\",{\"1\":{\"1201\":1}}],[\"java中没有关联数组\",{\"1\":{\"1575\":1}}],[\"java中没有\",{\"1\":{\"1178\":1}}],[\"java中通过将数据声明为私有的\",{\"1\":{\"1057\":1,\"1058\":1}}],[\"java中的数据存储技术\",{\"0\":{\"2278\":1}}],[\"java中的线程分为两类\",{\"1\":{\"1463\":1}}],[\"java中的万物皆对象\",{\"0\":{\"1005\":1}}],[\"java中的对象\",{\"1\":{\"491\":1}}],[\"java中必须先为数组分配内存空间\",{\"1\":{\"963\":1}}],[\"java中不会发生变量覆盖\",{\"1\":{\"825\":1}}],[\"java中每个变量必须先声明\",{\"1\":{\"825\":1}}],[\"javadoc是不包括注解的\",{\"1\":{\"1415\":1}}],[\"javadoc\",{\"1\":{\"813\":1,\"2139\":1}}],[\"javac\",{\"1\":{\"790\":1,\"792\":1,\"801\":1,\"802\":1,\"2117\":1}}],[\"java执行过程\",{\"0\":{\"790\":1}}],[\"java可以自动进行垃圾回收\",{\"1\":{\"768\":1}}],[\"java程序员只需要面向这套接口编程即可\",{\"1\":{\"2283\":1}}],[\"java程序访问数据库时是这样的\",{\"0\":{\"2280\":1,\"2281\":1}}],[\"java程序在执行过程中所发生的异常事件可分为两类\",{\"1\":{\"1311\":1}}],[\"java程序中\",{\"1\":{\"1773\":1}}],[\"java程序中变量通常声明为int型\",{\"1\":{\"842\":1}}],[\"java程序中的一个file对象\",{\"1\":{\"538\":1}}],[\"java程序才可在此平台运行\",{\"1\":{\"767\":1}}],[\"java虚拟机无法解决的严重问题\",{\"1\":{\"1312\":1}}],[\"java虚拟机中没有任何供boolean值专用的字节码指令\",{\"1\":{\"860\":1}}],[\"java虚拟机机制屏蔽了底层运行平台的差别\",{\"1\":{\"767\":1}}],[\"java虚拟机\",{\"0\":{\"767\":1}}],[\"java的动态性让编程的时候更加灵活\",{\"1\":{\"1999\":1}}],[\"java的io流共涉及40多个类\",{\"1\":{\"1776\":1}}],[\"java的调度方法\",{\"0\":{\"1486\":1}}],[\"java的入口是main方法\",{\"1\":{\"1465\":1}}],[\"java的多线程\",{\"0\":{\"1460\":1}}],[\"java的异常处理机制\",{\"0\":{\"1317\":1}}],[\"java的重载是可以包括父类和子类的\",{\"1\":{\"1159\":1}}],[\"java的整型常量默认为\",{\"1\":{\"842\":1}}],[\"java的核心机制\",{\"0\":{\"766\":1}}],[\"java的特点\",{\"0\":{\"765\":1}}],[\"java的string正则表达式是无法表示模式修饰符的\",{\"1\":{\"748\":1}}],[\"java主要应用方向\",{\"0\":{\"764\":1}}],[\"java移动版\",{\"1\":{\"763\":1}}],[\"java企业版\",{\"1\":{\"763\":1}}],[\"java标准版\",{\"1\":{\"763\":1}}],[\"java介绍\",{\"0\":{\"762\":1}}],[\"java正则语法指南\",{\"0\":{\"738\":1}}],[\"javahome\",{\"1\":{\"636\":2}}],[\"javaversion\",{\"1\":{\"636\":2}}],[\"javaee\",{\"1\":{\"401\":2,\"876\":2}}],[\"javaee的jsr303规范中给出了具体的数据校验标准\",{\"1\":{\"174\":1}}],[\"java=>\",{\"1\":{\"401\":1}}],[\"java<\",{\"1\":{\"270\":1,\"280\":1,\"321\":1,\"336\":1,\"389\":1}}],[\"java学习顺序\",{\"0\":{\"11\":1}}],[\"javaweb中有四大域对象\",{\"1\":{\"2671\":1}}],[\"javaweb核心三件套都可以直接new\",{\"1\":{\"2539\":1}}],[\"javaweb开发中\",{\"1\":{\"2524\":1}}],[\"javaweb就是用java技术来解决相关web互联网领域的技术栈\",{\"1\":{\"2471\":1}}],[\"javaweb项目结构\",{\"0\":{\"2471\":1}}],[\"javaweb项目部署到本地的tomcat服务器上\",{\"1\":{\"135\":1}}],[\"javaweb\",{\"1\":{\"10\":1,\"11\":1,\"2707\":1,\"2713\":1}}],[\"java\",{\"0\":{\"3\":1,\"1404\":1,\"1405\":1,\"1406\":1,\"1774\":1,\"1913\":1,\"2968\":1,\"3248\":1},\"1\":{\"10\":1,\"11\":1,\"57\":1,\"71\":1,\"180\":1,\"191\":1,\"207\":1,\"210\":1,\"275\":1,\"302\":1,\"313\":3,\"314\":1,\"335\":2,\"336\":1,\"340\":1,\"401\":1,\"435\":1,\"459\":3,\"461\":3,\"462\":5,\"466\":1,\"467\":1,\"468\":1,\"475\":2,\"480\":1,\"493\":2,\"495\":1,\"504\":1,\"511\":2,\"523\":1,\"529\":3,\"530\":1,\"538\":3,\"540\":1,\"564\":2,\"571\":1,\"572\":2,\"584\":2,\"593\":1,\"595\":2,\"600\":1,\"611\":1,\"612\":1,\"619\":1,\"624\":1,\"632\":1,\"636\":4,\"637\":1,\"641\":2,\"653\":1,\"671\":1,\"672\":1,\"679\":1,\"693\":1,\"705\":1,\"736\":2,\"737\":3,\"745\":1,\"746\":1,\"754\":1,\"758\":1,\"763\":3,\"767\":1,\"772\":1,\"776\":2,\"777\":2,\"778\":1,\"781\":1,\"786\":1,\"787\":4,\"790\":6,\"792\":1,\"793\":1,\"801\":1,\"802\":3,\"810\":4,\"811\":1,\"813\":1,\"815\":1,\"833\":1,\"834\":1,\"844\":1,\"878\":1,\"938\":1,\"1073\":1,\"1090\":7,\"1097\":1,\"1153\":1,\"1283\":1,\"1293\":1,\"1295\":1,\"1312\":2,\"1323\":3,\"1325\":1,\"1339\":4,\"1377\":1,\"1386\":1,\"1390\":4,\"1404\":1,\"1405\":1,\"1406\":1,\"1408\":1,\"1411\":2,\"1417\":1,\"1432\":7,\"1530\":1,\"1536\":1,\"1551\":1,\"1575\":1,\"1578\":1,\"1582\":1,\"1760\":1,\"1767\":3,\"1768\":2,\"1773\":1,\"1797\":1,\"1800\":1,\"1801\":1,\"1802\":1,\"1825\":1,\"1831\":1,\"1842\":1,\"1913\":3,\"1916\":3,\"1920\":1,\"1923\":2,\"1990\":2,\"1995\":2,\"1996\":3,\"1999\":1,\"2002\":4,\"2004\":3,\"2016\":2,\"2044\":1,\"2045\":1,\"2048\":5,\"2103\":1,\"2188\":1,\"2247\":1,\"2278\":1,\"2279\":2,\"2283\":2,\"2289\":2,\"2291\":1,\"2297\":1,\"2308\":1,\"2314\":3,\"2322\":2,\"2325\":1,\"2326\":1,\"2434\":2,\"2436\":2,\"2483\":1,\"2697\":1,\"2731\":1,\"2836\":1,\"2968\":2}}],[\"jdo\",{\"1\":{\"2278\":2}}],[\"jdk只有接口\",{\"1\":{\"2292\":1}}],[\"jdk与language\",{\"0\":{\"2108\":1}}],[\"jdk不提供此接口的任何直接实现\",{\"1\":{\"1582\":1}}],[\"jdk中只有jdbc定义的一系列操作数据库的接口\",{\"1\":{\"2287\":1}}],[\"jdk中内置了很多注解\",{\"1\":{\"1390\":1}}],[\"jdk中主要包介绍\",{\"0\":{\"1090\":1}}],[\"jdk7底层结构只有\",{\"1\":{\"1678\":1}}],[\"jdk7中底层实现原理\",{\"0\":{\"1672\":1}}],[\"jdk7中的arraylist的对象的创建类似于单例的饿汉式\",{\"1\":{\"1622\":1}}],[\"jdk7及之前\",{\"1\":{\"1664\":1}}],[\"jdk7和jdk8中通过vector\",{\"1\":{\"1629\":1}}],[\"jdk7\",{\"1\":{\"927\":1,\"1254\":1,\"1678\":1}}],[\"jdk一共内置了43个函数式接口\",{\"1\":{\"724\":1}}],[\"jdk11的内容指的是jdk9~jdk11\",{\"1\":{\"2261\":1}}],[\"jdk11\",{\"0\":{\"2261\":1}}],[\"jdk17\",{\"1\":{\"786\":1}}],[\"jdk1\",{\"1\":{\"636\":1,\"781\":1,\"1370\":2,\"1421\":1,\"1462\":1,\"1655\":1,\"1699\":1,\"1700\":1,\"1716\":1}}],[\"jdk内置实现\",{\"0\":{\"498\":1}}],[\"jdk8\",{\"1\":{\"1678\":1}}],[\"jdk8中底层结构\",{\"1\":{\"1678\":1}}],[\"jdk8中的底层实现原理\",{\"0\":{\"1678\":1}}],[\"jdk8中\",{\"0\":{\"1621\":1}}],[\"jdk8中除了定义全局常量和抽象方法之外\",{\"1\":{\"1267\":1}}],[\"jdk8下载地址\",{\"1\":{\"779\":1}}],[\"jdk8之后新时间api出现的背景\",{\"0\":{\"460\":1}}],[\"jdk8新增\",{\"1\":{\"171\":1,\"172\":1}}],[\"jdk5\",{\"1\":{\"442\":1,\"927\":1,\"1408\":1}}],[\"jdk版本是用来控制模块jdk的版本的\",{\"1\":{\"2108\":1}}],[\"jdk版本\",{\"1\":{\"71\":1}}],[\"jdk\",{\"0\":{\"33\":1,\"34\":1,\"192\":1,\"758\":1,\"777\":1,\"778\":1},\"1\":{\"71\":1,\"200\":2,\"460\":1,\"636\":1,\"777\":1,\"778\":1,\"779\":1,\"781\":1,\"1408\":1,\"1582\":1,\"1602\":1,\"1645\":2,\"1664\":1,\"1678\":1,\"1914\":1,\"2856\":1}}],[\"jdbc数据连接池的必要性\",{\"0\":{\"2412\":1}}],[\"jdbc工具类库\",{\"1\":{\"2431\":1}}],[\"jdbc工具类\",{\"0\":{\"2404\":1}}],[\"jdbc控制隔离级别示例\",{\"0\":{\"2391\":1}}],[\"jdbc控制隔离级别\",{\"0\":{\"2388\":1}}],[\"jdbc事务示例\",{\"0\":{\"2385\":1}}],[\"jdbc事务的处理流程\",{\"0\":{\"2383\":1}}],[\"jdbc事务处理方法\",{\"0\":{\"2379\":1}}],[\"jdbc的批量处理相关的方法\",{\"0\":{\"2367\":1}}],[\"jdbc的目标是使java程序员使用jdbc可以连接任何提供了jdbc驱动程序\",{\"1\":{\"2279\":1}}],[\"jdbcutils中\",{\"1\":{\"2427\":1}}],[\"jdbcutils更新\",{\"0\":{\"2350\":1}}],[\"jdbcutils\",{\"0\":{\"2404\":1,\"2427\":1},\"1\":{\"2326\":2,\"2329\":2,\"2333\":2,\"2349\":2,\"2352\":2,\"2355\":2,\"2364\":2,\"2365\":2,\"2372\":1,\"2373\":2,\"2376\":2,\"2377\":2,\"2386\":1,\"2387\":2,\"2391\":1,\"2404\":1,\"2405\":4,\"2409\":14,\"2428\":2,\"2433\":1,\"2438\":2,\"2439\":2,\"2440\":2,\"2441\":2,\"2442\":2,\"2443\":2}}],[\"jdbc模块的lib目录\",{\"1\":{\"2290\":1}}],[\"jdbc程序编写步骤\",{\"0\":{\"2284\":1}}],[\"jdbc接口\",{\"1\":{\"2283\":1}}],[\"jdbc体系结构\",{\"0\":{\"2283\":1}}],[\"jdbc为访问不同的数据库提供了一种统一的途径\",{\"1\":{\"2279\":1}}],[\"jdbc介绍\",{\"0\":{\"2279\":1}}],[\"jdbc是java访问数据库的基石\",{\"1\":{\"2278\":1}}],[\"jdbc直接访问数据库\",{\"1\":{\"2278\":1}}],[\"jdbc只用来了解底层\",{\"1\":{\"2276\":1}}],[\"jdbc1\",{\"1\":{\"2034\":2}}],[\"jdbc依赖\",{\"1\":{\"321\":1}}],[\"jdbcdatesource\",{\"1\":{\"131\":1,\"132\":1,\"156\":2}}],[\"jdbcdatesource类\",{\"1\":{\"131\":1}}],[\"jdbc驱动配置\",{\"1\":{\"130\":1}}],[\"jdbc\",{\"0\":{\"1265\":1},\"1\":{\"11\":1,\"29\":1,\"130\":2,\"159\":1,\"267\":2,\"270\":1,\"271\":2,\"277\":1,\"278\":2,\"280\":1,\"281\":2,\"341\":2,\"390\":2,\"1265\":1,\"1690\":1,\"1692\":1,\"2034\":1,\"2279\":1,\"2290\":1,\"2294\":2,\"2297\":4,\"2298\":1,\"2299\":2,\"2300\":2,\"2302\":2,\"2303\":1,\"2325\":1,\"2327\":1,\"2420\":1,\"2425\":1,\"2426\":2}}],[\"js+mysql的缝合\",{\"1\":{\"3023\":1}}],[\"jsession\",{\"1\":{\"2822\":1}}],[\"jsessionid=23a23234\",{\"1\":{\"2820\":1}}],[\"js\",{\"1\":{\"372\":1}}],[\"jstl\",{\"1\":{\"11\":1}}],[\"jsp一般充当mvc模式中的v\",{\"1\":{\"2728\":1}}],[\"jsp仅作了解\",{\"1\":{\"2728\":1}}],[\"jsp时才会被拦截\",{\"1\":{\"2701\":1}}],[\"jsp中取值\",{\"1\":{\"2672\":1}}],[\"jsp中存值\",{\"1\":{\"2672\":1}}],[\"jsp少量javaee规范\",{\"1\":{\"2450\":1}}],[\"jsp\",{\"1\":{\"11\":1,\"2447\":1,\"2672\":1,\"2701\":4,\"2755\":1,\"2759\":1}}],[\"json格式\",{\"1\":{\"2899\":1,\"3072\":1}}],[\"json转java对象\",{\"0\":{\"2839\":1}}],[\"json转换\",{\"0\":{\"2834\":1}}],[\"jsonstr\",{\"1\":{\"2838\":1,\"2839\":1}}],[\"json字符串转为java对象\",{\"1\":{\"2835\":1}}],[\"json与java对象的转换\",{\"0\":{\"2836\":1}}],[\"json与java对象\",{\"0\":{\"2835\":1}}],[\"json语法\",{\"0\":{\"2833\":1}}],[\"json数组格式\",{\"1\":{\"368\":1}}],[\"json对象\",{\"1\":{\"367\":1}}],[\"json<\",{\"1\":{\"99\":1}}],[\"json\",{\"0\":{\"2832\":1},\"1\":{\"11\":1,\"2836\":3,\"2838\":2,\"2839\":2,\"2861\":1,\"2980\":1,\"2983\":1,\"2986\":3,\"3032\":2,\"3033\":1,\"3069\":1}}],[\"jvm配置\",{\"1\":{\"2520\":1}}],[\"jvm将花费较少的时间来调度线程\",{\"1\":{\"1531\":1}}],[\"jvm会保留注释\",{\"1\":{\"1411\":1}}],[\"jvm不会保留注解\",{\"1\":{\"1411\":1}}],[\"jvm是不能自动的回收的\",{\"1\":{\"1342\":1}}],[\"jvm系统内部错误\",{\"1\":{\"1312\":1}}],[\"jvm的关系\",{\"0\":{\"778\":1}}],[\"jvm在各个平台都有\",{\"1\":{\"765\":1}}],[\"jvm\",{\"1\":{\"10\":1,\"11\":1,\"765\":1,\"767\":2,\"778\":1,\"787\":1,\"1296\":1,\"1923\":1,\"2015\":1,\"2031\":1}}],[\"站点内容地图\",{\"0\":{\"10\":1}}],[\"框架>maven\",{\"1\":{\"2751\":1}}],[\"框架中用的\",{\"1\":{\"2308\":1}}],[\"框架中底层用的也是jdbc\",{\"1\":{\"2276\":1}}],[\"框架用的就是线程池\",{\"1\":{\"1564\":1}}],[\"框架\",{\"0\":{\"4\":1,\"2761\":1},\"1\":{\"10\":1,\"310\":1,\"1388\":1}}],[\"当时初始化副本集的时候\",{\"1\":{\"3164\":1}}],[\"当mongos或mongod实例重新启动时\",{\"1\":{\"3142\":1}}],[\"当mongo用于分片设置时\",{\"1\":{\"3060\":1}}],[\"当查询条件和查询的投影仅包含索引字段时\",{\"1\":{\"3122\":1}}],[\"当于sql的and\",{\"1\":{\"3102\":1}}],[\"当query中有多条符合需要的文档记录时\",{\"1\":{\"3083\":1}}],[\"当向一个集合中插入一个文档的时候\",{\"1\":{\"3067\":1}}],[\"当实例重新启动时\",{\"1\":{\"3048\":1}}],[\"当初的设计就是用于简化开发和方便扩展\",{\"1\":{\"3021\":1}}],[\"当初始化一个类\",{\"1\":{\"2029\":1}}],[\"当初始化一个类的时候\",{\"1\":{\"2028\":1}}],[\"当上一个字段相同时\",{\"1\":{\"2951\":1}}],[\"当有多个排序字段时\",{\"1\":{\"2951\":1}}],[\"当有多个tomcat模板时\",{\"1\":{\"2512\":1}}],[\"当保存文档数据时\",{\"1\":{\"2941\":1}}],[\"当手动自定了\",{\"1\":{\"2903\":1}}],[\"当没有手动指定\",{\"1\":{\"2903\":1}}],[\"当启动elasticsearch后\",{\"1\":{\"2860\":1}}],[\"当启用了连接池后\",{\"1\":{\"2384\":1}}],[\"当用户发起查询时\",{\"1\":{\"2867\":1}}],[\"当用户查询时\",{\"1\":{\"2852\":1}}],[\"当用对象调用未赋值的属性时\",{\"1\":{\"1016\":1}}],[\"当服务器重启后\",{\"1\":{\"2823\":1}}],[\"当客户端关闭后\",{\"1\":{\"2821\":1}}],[\"当浏览器关闭后\",{\"1\":{\"2805\":1}}],[\"当浏览器再次发送强求时\",{\"1\":{\"2802\":1}}],[\"当tomcat的进程启动之后\",{\"1\":{\"2749\":1}}],[\"当treeset有参数时\",{\"1\":{\"1654\":1}}],[\"当treeset的构造函数有没有参数时\",{\"1\":{\"1654\":1}}],[\"当httpsession中的属性被修改时调用\",{\"1\":{\"2718\":1}}],[\"当被监视的对象发生情况时\",{\"1\":{\"2710\":1}}],[\"当一段时间内session没有被使用\",{\"1\":{\"2676\":1}}],[\"当一个thread类或其子类的对象被声明并创建时\",{\"1\":{\"1501\":1}}],[\"当一个对象\",{\"1\":{\"1457\":1}}],[\"当一个对象的产生需要比较多的资源时\",{\"1\":{\"1239\":1}}],[\"当一个事物的内部\",{\"1\":{\"1202\":1,\"1213\":1}}],[\"当一个方法\",{\"1\":{\"1728\":1}}],[\"当一个方法的参数是object数据类型时\",{\"1\":{\"1195\":1}}],[\"当一个方法需要传递的参数类型是一个类时\",{\"1\":{\"1152\":1}}],[\"当一个方法执行到一个return语句时\",{\"1\":{\"948\":1}}],[\"当请求结束时\",{\"1\":{\"2674\":1}}],[\"当请求来时创建request对象\",{\"1\":{\"2674\":1}}],[\"当请求完成后request对象就会被销毁\",{\"1\":{\"2611\":1}}],[\"当虚拟目录设置为\",{\"1\":{\"2667\":1}}],[\"当虚拟机启动\",{\"1\":{\"2029\":1}}],[\"当进行重定向访问的时候\",{\"1\":{\"2664\":1}}],[\"当idea失去焦点时\",{\"1\":{\"2502\":1}}],[\"当i==20时\",{\"1\":{\"1481\":1}}],[\"当i==10时\",{\"1\":{\"1481\":1}}],[\"当i==5时\",{\"1\":{\"1481\":1}}],[\"当项目有更新的时候\",{\"1\":{\"2502\":1}}],[\"当大于0时\",{\"1\":{\"2426\":1}}],[\"当应用程序向连接池请求的连接数超过最大连接数量时\",{\"1\":{\"2417\":1}}],[\"当需要释放内存或者容器关闭时\",{\"1\":{\"2550\":1}}],[\"当需要建立数据库连接时\",{\"1\":{\"2416\":1}}],[\"当需要成批插入或者更新记录时\",{\"1\":{\"2366\":1}}],[\"当需要定义一组常量时\",{\"1\":{\"1368\":1}}],[\"当列没有别名时\",{\"1\":{\"2354\":1}}],[\"当指针指向一行时\",{\"1\":{\"2340\":1}}],[\"当指针已经指向最后时\",{\"1\":{\"677\":1,\"1592\":1}}],[\"当要传递给lambda体的操作\",{\"1\":{\"2149\":1}}],[\"当通过代理类对象调用方法时\",{\"1\":{\"2096\":1}}],[\"当通过子类引用父类的静态变量\",{\"1\":{\"2029\":1}}],[\"当通过某一个对象修改静态变量时\",{\"1\":{\"1227\":1}}],[\"当访问一个静态域时\",{\"1\":{\"2029\":1}}],[\"当程序主动使用某个类时\",{\"1\":{\"2025\":1}}],[\"当程序运行需要的内存超过了剩余的内存时\",{\"1\":{\"1458\":1}}],[\"当与一个url建立连接时\",{\"1\":{\"1993\":1}}],[\"当此方法返回时\",{\"1\":{\"1985\":1}}],[\"当此属性设置为true时\",{\"1\":{\"262\":2}}],[\"当其挂\",{\"1\":{\"3128\":1}}],[\"当其他的url\",{\"1\":{\"2577\":1}}],[\"当其它程序获取了这种二进制流\",{\"1\":{\"1896\":1}}],[\"当其中一个变量的值改变时不会影响另一个\",{\"1\":{\"1306\":1}}],[\"当缓冲区的数据存满时\",{\"1\":{\"1833\":1}}],[\"当使用bufferedinputstream读取字节文件时\",{\"1\":{\"1826\":1}}],[\"当读取数据时\",{\"1\":{\"1826\":1}}],[\"当泛型方法所在类也是泛型类时\",{\"1\":{\"1731\":1}}],[\"当类是泛型类时\",{\"1\":{\"1730\":1}}],[\"当类的对象是有限个\",{\"1\":{\"1368\":1}}],[\"当桶中node的数量大到需要变红黑树时\",{\"1\":{\"1680\":1}}],[\"当数据库中没有数据时\",{\"1\":{\"3064\":1}}],[\"当数据库抛出一些不可恢复的异常时\",{\"1\":{\"2426\":1}}],[\"当数据库访问结束后\",{\"1\":{\"2421\":1}}],[\"当数组的某一个索引位置上的元素以链表形式存在的数据个数\",{\"1\":{\"1678\":1}}],[\"当数值常量参与运算的时候\",{\"1\":{\"867\":1}}],[\"当超出临界值\",{\"1\":{\"1676\":1}}],[\"当线程进入synchronized中时\",{\"1\":{\"1523\":1}}],[\"当线程通过instance\",{\"1\":{\"1521\":1}}],[\"当把synchronize声明在方法最外层时\",{\"1\":{\"1522\":1}}],[\"当只剩下一张票\",{\"1\":{\"1507\":1}}],[\"当多条语句在操作同一个线程共享数据时\",{\"1\":{\"1507\":1}}],[\"当多个买票程序同时通过是否有票的验证\",{\"1\":{\"1507\":1}}],[\"当多个线程操作同一个数据时\",{\"1\":{\"1505\":1}}],[\"当多线程模式下使用jedis会存在线程安全问题\",{\"1\":{\"291\":1}}],[\"当就绪的线程被调度并获得cpu资源时\",{\"1\":{\"1501\":1}}],[\"当执行此方法时\",{\"1\":{\"1479\":1}}],[\"当执行构建项目后\",{\"1\":{\"139\":1}}],[\"当运行\",{\"1\":{\"1411\":2}}],[\"当它修饰一个方法的时候\",{\"1\":{\"1406\":1}}],[\"当\",{\"1\":{\"1405\":1,\"1430\":1}}],[\"当成一个修饰符使用\",{\"1\":{\"1389\":1}}],[\"当异常出现时\",{\"1\":{\"1363\":1,\"1365\":1}}],[\"当产生异常类型3时的处理措施\",{\"1\":{\"1337\":1}}],[\"当产生异常类型2时的处理措施\",{\"1\":{\"1337\":1}}],[\"当产生异常类型1时的处理措施\",{\"1\":{\"1337\":1}}],[\"当在连接网络时输入一个主机的域名后\",{\"1\":{\"1936\":1}}],[\"当在可序列化的类上缺少\",{\"1\":{\"1430\":1}}],[\"当在初始化之前要进行一些操作时\",{\"1\":{\"1281\":1}}],[\"当在方法内需要用到调用该方法的对象时\",{\"1\":{\"1083\":1}}],[\"当功能内部一部分实现是确定的\",{\"1\":{\"1250\":1}}],[\"当修改其中一个对象中的非静态属性时\",{\"1\":{\"1227\":1}}],[\"当修改了文件\",{\"1\":{\"142\":1}}],[\"当想要在外部类的静态成员部分使用内部类时\",{\"1\":{\"1207\":1}}],[\"当做数值类型\",{\"1\":{\"1199\":1}}],[\"当子类重写了父类中的方法以后\",{\"1\":{\"1134\":1}}],[\"当子类和父类中定义了同名的属性时\",{\"1\":{\"1133\":1}}],[\"当子类创建了和父类中相同的属性时\",{\"1\":{\"1129\":1}}],[\"当形参与成员变量同名时\",{\"1\":{\"1084\":1}}],[\"当我们开发了一个程序以后\",{\"1\":{\"2738\":1}}],[\"当我们的servlet类继承的是httpservlet类的时候\",{\"1\":{\"2587\":1}}],[\"当我们的servlet类实现的是servlet接口的时候\",{\"1\":{\"2587\":1}}],[\"当我们要操作的集合是个嵌套集合时\",{\"1\":{\"2224\":1}}],[\"当我们要对集合中的每个元素进行操作\",{\"1\":{\"2224\":1}}],[\"当我们找到了一个除了方法名不一样\",{\"1\":{\"2151\":1}}],[\"当我们通过代理类的对象\",{\"1\":{\"2095\":1}}],[\"当我们通过子类的构造器创建子类对象时\",{\"1\":{\"1144\":1}}],[\"当我们编写一个类时\",{\"1\":{\"1223\":1}}],[\"当我们输出一个对象的引用时\",{\"1\":{\"1183\":1}}],[\"当我们在父类中定义了非空参构造器时\",{\"1\":{\"1140\":1}}],[\"当我们在一个类中调用属性或方法时\",{\"1\":{\"1135\":1}}],[\"当我们调用此方法时\",{\"1\":{\"1106\":1}}],[\"当我们使用一个类时\",{\"1\":{\"1054\":1}}],[\"当我们与常量数值进行运算时\",{\"1\":{\"850\":1}}],[\"当值为false时\",{\"1\":{\"931\":1}}],[\"当发现既可以使用switch\",{\"1\":{\"929\":1}}],[\"当调用thread类的run方法时\",{\"1\":{\"1493\":1}}],[\"当调用方法时\",{\"1\":{\"1047\":1}}],[\"当调用可变个数形参的方法时\",{\"1\":{\"1047\":1}}],[\"当调用完执行语句以后\",{\"1\":{\"927\":1}}],[\"当调用string的replace\",{\"1\":{\"880\":1}}],[\"当左边为真\",{\"1\":{\"905\":1}}],[\"当对属性进行修改时\",{\"1\":{\"1301\":1}}],[\"当对数组本身进行修改\",{\"1\":{\"979\":1}}],[\"当对数组进行初始化\",{\"1\":{\"975\":1}}],[\"当对现有的字符串进行连接操作时\",{\"1\":{\"880\":1}}],[\"当对字符串重新赋值时\",{\"1\":{\"880\":1}}],[\"当byte\",{\"1\":{\"865\":1}}],[\"当两个不同对象的哈希值相同时\",{\"1\":{\"1652\":1}}],[\"当两个不同的数据类型之间进行运算时\",{\"1\":{\"864\":1}}],[\"当两个数组中所有元素都相等时\",{\"1\":{\"648\":1}}],[\"当安装了多个版本的jdk时\",{\"1\":{\"782\":1}}],[\"当提示安装\",{\"1\":{\"779\":1}}],[\"当参数为system\",{\"1\":{\"638\":1,\"759\":1}}],[\"当字符取模5有余数时\",{\"1\":{\"569\":1,\"1808\":1}}],[\"当除不尽的时候\",{\"1\":{\"534\":1}}],[\"当元素的类型没有实现java\",{\"1\":{\"504\":1}}],[\"当年龄相同时\",{\"1\":{\"501\":1}}],[\"当添加的字符串超过16时\",{\"1\":{\"446\":1}}],[\"当servletrequest中的属性被修改时调用\",{\"1\":{\"2719\":1}}],[\"当servletcontext中的属性被修改时调用\",{\"1\":{\"2717\":1}}],[\"当servlet进行响应时\",{\"1\":{\"2700\":1}}],[\"当servlet第一次被访问时\",{\"1\":{\"2545\":1}}],[\"当s1和s2同时结束阻塞准备拿下一个锁的时候\",{\"1\":{\"1548\":1}}],[\"当scan为true时\",{\"1\":{\"262\":1}}],[\"当springboot项目启动时\",{\"1\":{\"138\":1}}],[\"当主环境dev与其他环境有相同属性时\",{\"1\":{\"233\":1}}],[\"当测试类与引导类的包不匹配时\",{\"1\":{\"183\":1}}],[\"当代码修改后\",{\"1\":{\"133\":1}}],[\"当覆盖时\",{\"1\":{\"117\":1}}],[\"当然也可以将仲裁服务器维护为副本集的一部分\",{\"1\":{\"3131\":1}}],[\"当然也可以存储在磁盘文件\",{\"1\":{\"2277\":1}}],[\"当然你也可以独立的存储某个字段\",{\"1\":{\"2963\":1}}],[\"当然如果是可执行jar包\",{\"1\":{\"2733\":1}}],[\"当然如果发生异常\",{\"1\":{\"1441\":1}}],[\"当然lettcus也支持多连接实例一起工作\",{\"1\":{\"291\":1}}],[\"当然\",{\"1\":{\"114\":1,\"1135\":1}}],[\"当前是在一台设备上模拟的副本集\",{\"1\":{\"3213\":1}}],[\"当前是第几页\",{\"1\":{\"351\":1}}],[\"当前\",{\"1\":{\"3029\":1}}],[\"当前页的起始索引\",{\"1\":{\"2948\":1,\"3007\":1}}],[\"当前服务器健康状态\",{\"1\":{\"2893\":1}}],[\"当前最新版本是8\",{\"1\":{\"2854\":1}}],[\"当前开发\",{\"1\":{\"2783\":1}}],[\"当前版本\",{\"1\":{\"3038\":1}}],[\"当前版本的tomcat已经解决了get方式的乱码问题\",{\"1\":{\"2626\":1}}],[\"当前版本为\",{\"1\":{\"297\":1}}],[\"当前类提供一个全局常量\",{\"1\":{\"1905\":1}}],[\"当前线程被阻塞\",{\"1\":{\"1556\":1}}],[\"当前线程将释放对象监控权\",{\"1\":{\"1552\":1}}],[\"当前线程必须具有对该对象的监控权\",{\"1\":{\"1552\":1,\"1553\":1}}],[\"当前线程就进入阻塞状态\",{\"1\":{\"1551\":1}}],[\"当前线程暂停\",{\"1\":{\"1526\":1}}],[\"当前线程在同步代码块\",{\"1\":{\"1526\":3}}],[\"当前线程的同步方法\",{\"1\":{\"1526\":1}}],[\"当前线程是阻塞状态\",{\"1\":{\"1479\":1}}],[\"当前jvm将退出\",{\"1\":{\"1463\":1}}],[\"当前module的src下\",{\"1\":{\"2034\":1}}],[\"当前mongodb版本为\",{\"1\":{\"60\":1,\"61\":1}}],[\"当前map对象中\",{\"1\":{\"711\":1}}],[\"当前项目具体引入的依赖合集\",{\"1\":{\"101\":1}}],[\"当前找不到太多相关中文资料\",{\"1\":{\"60\":1,\"61\":1}}],[\"当前处于建设阶段\",{\"1\":{\"0\":1,\"12\":1,\"31\":1,\"40\":1,\"42\":1,\"44\":1,\"46\":1,\"48\":1,\"50\":1,\"52\":1,\"54\":1}}],[\"当掌握某个知识点后\",{\"1\":{\"1\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
