const nt="ENTRIES",T="KEYS",V="VALUES",F="";class D{constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case V:return this.value();case T:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ot=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return W(e,t,s,n,i,1,o,""),n},W=(e,t,s,n,o,u,i,r)=>{const h=u*i;t:for(const c of e.keys())if(c===F){const a=o[h-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let l=0;l<c.length;++l,++a){const p=c[l],f=i*a,g=f-i;let d=o[f];const m=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let _=m;_<y;++_){const b=p!==t[_],z=o[g+_]+ +b,A=o[g+_+1]+1,w=o[f+_]+1,L=o[f+_+1]=Math.min(z,A,w);L<d&&(d=L)}if(d>s)continue t}W(e.get(c),t,s,n,o,a,i,r+c)}};class C{constructor(t=new Map,s=""){this._size=void 0,this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=I(n);for(const i of o.keys())if(i!==F&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ut(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ot(this._tree,t,s)}get(t){const s=O(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=O(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,T)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,M(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);let o=n.get(F);return o===void 0&&n.set(F,o=s()),o}values(){return new D(this,V)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},O=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return O(e.get(s),t.slice(s.length))},M=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==F&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const h=e.get(u);if(r===u.length)e=h;else{const c=new Map;c.set(u.slice(r),h),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ut=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)R(n);else if(s.size===1){const[o,u]=s.entries().next().value;$(n,o,u)}}},R=e=>{if(e.length===0)return;const[t,s]=I(e);if(t.delete(s),t.size===0)R(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==F&&$(e.slice(0,-1),n,o)}},$=(e,t,s)=>{if(e.length===0)return;const[n,o]=I(e);n.set(o+t,s),n.delete(o)},I=e=>e[e.length-1],it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",P="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},q=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},G=({score:e},{score:t})=>t-e,lt=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},N=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),q(n.terms,u)}}return e},[P]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);q(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,o,u)=>{const{k:i,b:r,d:h}=u;return Math.log(1+(s-t+.5)/(t+.5))*(h+e*(i+1)/(e+i*(1-r+r*n/o)))},dt=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},ft={k:1.2,b:.7,d:.5},gt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof(console==null?void 0:console[e])=="function"&&console[e](t)},autoVacuum:!0},H={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:ft},mt={combineWith:P,prefix:(e,t,s)=>t===s.length-1},pt={batchSize:1e3,batchWait:10},J={minDirtFactor:.1,minDirtCount:20},Ft={...pt,...J};class _t{constructor(t){if((t==null?void 0:t.fields)==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?Ft:t.autoVacuum;this._options={...gt,...t,autoVacuum:s,searchOptions:{...H,...t.searchOptions||{}},autoSuggestOptions:{...mt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=J,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const yt=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},U=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},At=(e,t,s,n)=>{if(!e._index.has(n)){U(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?U(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(ht[s])||new Map},B=(e,t,s,n,o,u,i,r,h=new Map)=>{if(o==null)return h;for(const c of Object.keys(u)){const a=u[c],l=e._fieldIds[c],p=o.get(l);if(p==null)continue;let f=p.size;const g=e._avgFieldLength[l];for(const d of p.keys()){if(!e._documentIds.has(d)){At(e,l,d,s),f-=1;continue}const m=i?i(e._documentIds.get(d),s,e._storedFields.get(d)):1;if(!m)continue;const y=p.get(d),_=e._fieldLength.get(d)[l],b=at(y,f,e._documentCount,_,g,r),z=n*a*m*b,A=h.get(d);if(A){A.score+=z,ct(A.terms,t);const w=N(A.match,s);w?w.push(c):A.match[s]=[c]}else h.set(d,{score:z,terms:[t],match:{[s]:[c]}})}}return h},Ct=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((d,m)=>({...d,[m]:N(n.boost,m)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:h}=n,{fuzzy:c,prefix:a}={...H.weights,...i},l=e._index.get(t.term),p=B(e,t.term,t.term,1,l,o,u,h);let f,g;if(t.prefix&&(f=e._index.atPrefix(t.term)),t.fuzzy){const d=t.fuzzy===!0?.2:t.fuzzy,m=d<1?Math.min(r,Math.round(t.term.length*d)):d;m&&(g=e._index.fuzzyGet(t.term,m))}if(f)for(const[d,m]of f){const y=d.length-t.term.length;if(!y)continue;g==null||g.delete(d);const _=a*d.length/(d.length+.3*y);B(e,t.term,d,_,m,o,u,h,p)}if(g)for(const d of g.keys()){const[m,y]=g.get(d);if(!y)continue;const _=c*d.length/(d.length+y);B(e,t.term,d,_,m,o,u,h,p)}return p},K=(e,t,s={})=>{if(typeof t!="string"){const a={...s,...t,queries:void 0},l=t.queries.map(p=>K(e,p,a));return Y(l,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:h}=i,c=r(t).flatMap(a=>h(a)).filter(a=>!!a).map(dt(i)).map(a=>Ct(e,a,i));return Y(c,i.combineWith)},X=(e,t,s={})=>{const n=K(e,t,s),o=[];for(const[u,{score:i,terms:r,match:h}]of n){const c=r.length,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(h),match:h};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return o.sort(G),o},Et=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of X(e,t,s)){const r=i.join(" "),h=n.get(r);h!=null?(h.score+=u,h.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:h}]of n)o.push({suggestion:u,terms:r,score:i/h});return o.sort(G),o},zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:h,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const l=new _t(a);l._documentCount=t,l._nextId=s,l._documentIds=k(n),l._idToShortId=new Map,l._fieldIds=o,l._fieldLength=k(u),l._avgFieldLength=i,l._storedFields=k(r),l._dirtCount=h||0,l._index=new C;for(const[p,f]of l._documentIds)l._idToShortId.set(f,p);for(const[p,f]of e){const g=new Map;for(const d of Object.keys(f)){let m=f[d];c===1&&(m=m.ds),g.set(parseInt(d,10),k(m))}l._index.set(p,g)}return l},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let l="";i===0?l=c.length>20?`… ${c.slice(-20)}`:c:a?l=c.length+i>100?`${c.slice(0,100-i)}… `:c:l=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,l&&o.push(l),i+=l.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let h=s.indexOf(n,u);if(h===-1)return null;for(;h>=0;){const c=h+n.length;if(r(e.slice(u,h)),u=c,i>100)break;h=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return X(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(o=>{const{id:u,terms:i,score:r}=o,h=u.includes("@"),c=u.includes("#"),[a,l]=u.split(/[#@]/),{contents:p}=n[a]??={title:"",contents:[]};if(h)p.push([{type:"customField",key:a,index:l,display:i.map(f=>o.c.map(g=>j(g,f))).flat().filter(f=>f!==null)},r]);else{const f=i.map(g=>j(o.h,g)).filter(g=>g!==null);if(f.length&&p.push([{type:c?"heading":"title",key:a,...c&&{anchor:l},display:f},r]),"t"in o)for(const g of o.t){const d=i.map(m=>j(g,m)).filter(m=>m!==null);d.length&&p.push([{type:"text",key:a,...c&&{anchor:l},display:d},r])}}}),Q(n).sort(([,o],[,u])=>"max"==="total"?xt(o,u):kt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=yt(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Et(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":3791,\"nextId\":3791,\"documentIds\":{\"0\":\"v-fffb8e28\",\"1\":\"v-09eb70ab\",\"2\":\"v-09eb70ab#项目初始化\",\"3\":\"v-09eb70ab#java\",\"4\":\"v-09eb70ab#框架\",\"5\":\"v-09eb70ab#微服务\",\"6\":\"v-09eb70ab#sql\",\"7\":\"v-09eb70ab#服务端\",\"8\":\"v-09eb70ab#devtool\",\"9\":\"v-96ccce3a\",\"10\":\"v-96ccce3a#站点内容地图\",\"11\":\"v-96ccce3a#java学习顺序\",\"12\":\"v-14c0e823\",\"13\":\"v-7cb8733b\",\"14\":\"v-58f3e54b\",\"15\":\"v-61ce9c38\",\"16\":\"v-2c452238\",\"17\":\"v-283f2e43\",\"18\":\"v-805bcbd6\",\"19\":\"v-45a78654\",\"20\":\"v-45a78654#第1阶段-需求分析\",\"21\":\"v-45a78654#规格说明书\",\"22\":\"v-45a78654#产品原型\",\"23\":\"v-45a78654#第2阶段-设计\",\"24\":\"v-45a78654#ui设计\",\"25\":\"v-45a78654#数据库设计\",\"26\":\"v-45a78654#接口设计\",\"27\":\"v-45a78654#第3阶段-编码\",\"28\":\"v-45a78654#项目代码编写\",\"29\":\"v-45a78654#单元测试\",\"30\":\"v-45a78654#第4阶段-测试\",\"31\":\"v-45a78654#第5阶段-上线运维\",\"32\":\"v-74f4183d\",\"33\":\"v-74f4183d#基本角色分工\",\"34\":\"v-239d4832\",\"35\":\"v-239d4832#软件环境\",\"36\":\"v-239d4832#开发环境-development\",\"37\":\"v-239d4832#测试环境-testing\",\"38\":\"v-239d4832#生产环境-production\",\"39\":\"v-239d4832#总结\",\"40\":\"v-cfd8e348\",\"41\":\"v-0e153f58\",\"42\":\"v-7aac2bfa\",\"43\":\"v-3f989e78\",\"44\":\"v-7f862bd6\",\"45\":\"v-f976cbdc\",\"46\":\"v-0f5da1fa\",\"47\":\"v-09ed86ae\",\"48\":\"v-55a1ceb4\",\"49\":\"v-55a1ceb4#项目介绍\",\"50\":\"v-55a1ceb4#项目目标\",\"51\":\"v-55a1ceb4#原型图\",\"52\":\"v-55a1ceb4#功能模块\",\"53\":\"v-55a1ceb4#技术选型\",\"54\":\"v-55a1ceb4#功能清单\",\"55\":\"v-55a1ceb4#角色介绍\",\"56\":\"v-4f3d8174\",\"57\":\"v-4f3d8174#jdk-常用类\",\"58\":\"v-4f3d8174#jdk-util包\",\"59\":\"v-4f3d8174#other\",\"60\":\"v-735d6ea1\",\"61\":\"v-2466e178\",\"62\":\"v-41d73924\",\"63\":\"v-5754cb9f\",\"64\":\"v-7ae11416\",\"65\":\"v-1085741c\",\"66\":\"v-e0934ad8\",\"67\":\"v-48411b91\",\"68\":\"v-6f11ae20\",\"69\":\"v-3bf3b9c6\",\"70\":\"v-8acce1b0\",\"71\":\"v-7e407c25\",\"72\":\"v-c5ed1ec8\",\"73\":\"v-537cacce\",\"74\":\"v-5f50a4e4\",\"75\":\"v-0e44d48b\",\"76\":\"v-58ba60b0\",\"77\":\"v-877d86b6\",\"78\":\"v-4791705c\",\"79\":\"v-5817eacf\",\"80\":\"v-1762ff32\",\"81\":\"v-a5688338\",\"82\":\"v-4bca14b0\",\"83\":\"v-19993ab6\",\"84\":\"v-f55442d2\",\"85\":\"v-34e9ec94\",\"86\":\"v-496c42e7\",\"87\":\"v-d881fe38\",\"88\":\"v-50d3b92e\",\"89\":\"v-23697faa\",\"90\":\"v-05918a78\",\"91\":\"v-05918a78#_1-简介\",\"92\":\"v-05918a78#_2-springboot的特点\",\"93\":\"v-05918a78#_3-需要学习的内容\",\"94\":\"v-1b838722\",\"95\":\"v-1b838722#_1-spring-initializr\",\"96\":\"v-1b838722#_2-配置工程\",\"97\":\"v-1b838722#_3-网络问题\",\"98\":\"v-1b838722#_4-构建结果\",\"99\":\"v-1b838722#_5-注意事项\",\"100\":\"v-1b838722#_5-1-pom-xml\",\"101\":\"v-1b838722#_5-2-启动类\",\"102\":\"v-1b838722#_5-3-依赖版本\",\"103\":\"v-1b838722#_6-隐藏无用的文件\",\"104\":\"v-1b838722#_7-其他方式创建springboot项目\",\"105\":\"v-1b838722#_7-1-使用官网创建springboot项目\",\"106\":\"v-1b838722#_7-2-手动创建项目\",\"107\":\"v-58f9eea8\",\"108\":\"v-58f9eea8#i-使用springboot\",\"109\":\"v-58f9eea8#_1-创建controller\",\"110\":\"v-58f9eea8#_2-启动项目\",\"111\":\"v-58f9eea8#_3-访问servlet\",\"112\":\"v-58f9eea8#_4-springboot做了什么\",\"113\":\"v-58f9eea8#_5-总结\",\"114\":\"v-58f9eea8#ii-统一依赖管理\",\"115\":\"v-58f9eea8#_1-maven-pom\",\"116\":\"v-58f9eea8#_2-springboot-中的-pom\",\"117\":\"v-58f9eea8#_2-1-pox-xml的parent\",\"118\":\"v-58f9eea8#_2-2-pring-boot-starter-parent\",\"119\":\"v-58f9eea8#_2-3-spring-boot-dependencies\",\"120\":\"v-58f9eea8#_4-springboot依赖管理总结\",\"121\":\"v-58f9eea8#_5-注意事项\",\"122\":\"v-58f9eea8#iii-starter\",\"123\":\"v-58f9eea8#_1-什么是starter\",\"124\":\"v-58f9eea8#_2-意义\",\"125\":\"v-58f9eea8#_3-starter与parent\",\"126\":\"v-58f9eea8#iv-引导类\",\"127\":\"v-58f9eea8#引导类-xxxapplication\",\"128\":\"v-58f9eea8#_2-容器\",\"129\":\"v-58f9eea8#_3-springbootapplication\",\"130\":\"v-58f9eea8#_4-总结\",\"131\":\"v-58f9eea8#v-辅助功能\",\"132\":\"v-58f9eea8#_1-内嵌tomcat\",\"133\":\"v-58f9eea8#_1-1-tomcat依赖的位置\",\"134\":\"v-58f9eea8#_1-2-不使用内嵌服务器\",\"135\":\"v-58f9eea8#_1-3-替换别的服务器\",\"136\":\"v-5f0fc8f4\",\"137\":\"v-5f0fc8f4#_1-默认配置文件\",\"138\":\"v-5f0fc8f4#_2-文件名\",\"139\":\"v-5f0fc8f4#_3-文件格式\",\"140\":\"v-5f0fc8f4#_4-多个配置文件\",\"141\":\"v-5f0fc8f4#_4-1-多格式配置文件\",\"142\":\"v-5f0fc8f4#_4-2-其他类型配置文件\",\"143\":\"v-5f0fc8f4#_5-debug\",\"144\":\"v-997e0fde\",\"145\":\"v-997e0fde#i-配置yml\",\"146\":\"v-997e0fde#_1-yaml语法规则\",\"147\":\"v-997e0fde#_2-字面量表示方式\",\"148\":\"v-997e0fde#_3-数组表示方式\",\"149\":\"v-997e0fde#_4-yml文件中的变量引用\",\"150\":\"v-997e0fde#ii-读取yml\",\"151\":\"v-997e0fde#_1-读取yml数据\",\"152\":\"v-997e0fde#_2-读取yaml全部属性数据\",\"153\":\"v-997e0fde#_3-读取yml引用类型数据\",\"154\":\"v-997e0fde#_3-1-待封装的数据\",\"155\":\"v-997e0fde#_3-2-创建数据对象\",\"156\":\"v-997e0fde#_3-3-注入数据并使用\",\"157\":\"v-00489529\",\"158\":\"v-00489529#运行机制\",\"159\":\"v-00489529#_1-配置生效\",\"160\":\"v-00489529#多模块项目\",\"161\":\"v-00489529#_1-创建父工程\",\"162\":\"v-00489529#_2-创建子模块\",\"163\":\"v-00489529#_3-web支持\",\"164\":\"v-00489529#_3-1-启动类\",\"165\":\"v-00489529#_3-2-配置文件\",\"166\":\"v-00489529#_4-引入第三方模块\",\"167\":\"v-00489529#_5-依赖管理\",\"168\":\"v-00489529#_6-打包\",\"169\":\"v-00489529#_6-1-父工程\",\"170\":\"v-00489529#_6-2-子模块-web模块\",\"171\":\"v-00489529#_6-3-子模块-普通模块\",\"172\":\"v-00489529#_6-4-打包方式\",\"173\":\"v-00489529#开发与测试\",\"174\":\"v-00489529#_1-web模块的开发\",\"175\":\"v-00489529#_2-web模块的访问\",\"176\":\"v-00489529#_3-web模块的测试\",\"177\":\"v-726603e4\",\"178\":\"v-726603e4#_1-热部署实现原理\",\"179\":\"v-726603e4#_1-1-非springboot项目热部署实现原理\",\"180\":\"v-726603e4#_1-2-springboot项目热部署实现原理\",\"181\":\"v-726603e4#_2-重启与重载\",\"182\":\"v-726603e4#_2-1-重启-restart\",\"183\":\"v-726603e4#_2-2-重载reload\",\"184\":\"v-726603e4#_3-手动启动热部署\",\"185\":\"v-726603e4#_3-1-导入坐标\",\"186\":\"v-726603e4#_3-2-构建项目\",\"187\":\"v-726603e4#_3-3-问题\",\"188\":\"v-726603e4#_4-自动启动热部署\",\"189\":\"v-726603e4#_4-1-设置-自动构建项目build-project\",\"190\":\"v-726603e4#_4-2-设置-允许在程序运行时进行自动构建\",\"191\":\"v-726603e4#_4-3-热部署的时机\",\"192\":\"v-726603e4#_5-热部署监控的文件范围\",\"193\":\"v-726603e4#_5-1-默认不参与热部署的目录\",\"194\":\"v-726603e4#_5-2-修改不参与热部署的目录或文件\",\"195\":\"v-726603e4#_6-关闭热部署\",\"196\":\"v-726603e4#_6-1-通过配置强制关闭热部署\",\"197\":\"v-726603e4#_6-2-通过启动类强制关闭热部署\",\"198\":\"v-080cac18\",\"199\":\"v-080cac18#i-第三方bean属性\",\"200\":\"v-080cac18#_1-configurationproperties\",\"201\":\"v-080cac18#_2-configurationproperties绑定第三方bean\",\"202\":\"v-080cac18#_2-1-将第三方类加入ioc\",\"203\":\"v-080cac18#_2-2-在yml配置文件中定义要绑定的属性\",\"204\":\"v-080cac18#_2-3-用-configurationproperties注解为第三方bean进行属性绑定\",\"205\":\"v-080cac18#_2-4-总结\",\"206\":\"v-080cac18#_3-enableconfigurationproperties\",\"207\":\"v-080cac18#_3-1-配置类统一管理\",\"208\":\"v-080cac18#_3-2-使用-configurationproperties的类\",\"209\":\"v-080cac18#_4-debug\",\"210\":\"v-080cac18#_5-宽松绑定\",\"211\":\"v-080cac18#_5-1-示例1-宽松绑定\",\"212\":\"v-080cac18#_5-2-示例2-prefix\",\"213\":\"v-080cac18#ii-计量单位\",\"214\":\"v-080cac18#_1-属性的单位\",\"215\":\"v-080cac18#_2-时间单位-duration\",\"216\":\"v-080cac18#_3-空间单位-datesize\",\"217\":\"v-080cac18#iii-数据校验\",\"218\":\"v-080cac18#_1-导入依赖\",\"219\":\"v-080cac18#_2-validated\",\"220\":\"v-080cac18#_3-对具体的字段设置校验规则\",\"221\":\"v-393db138\",\"222\":\"v-393db138#i-集成-junit\",\"223\":\"v-393db138#_1-pom-xml\",\"224\":\"v-393db138#_2-junit的使用方式\",\"225\":\"v-393db138#_3-test目录\",\"226\":\"v-393db138#_4-测试类\",\"227\":\"v-393db138#_5-测试的步骤\",\"228\":\"v-393db138#_6-测试类的目录规划\",\"229\":\"v-393db138#_7-classes属性\",\"230\":\"v-393db138#ii-加载测试专用配置\",\"231\":\"v-393db138#iii-测试api\",\"232\":\"v-393db138#iv-数据层测试\",\"233\":\"v-6c5eeffc\",\"234\":\"v-6c5eeffc#i-windows\",\"235\":\"v-6c5eeffc#_1-概念\",\"236\":\"v-6c5eeffc#_2-打包\",\"237\":\"v-6c5eeffc#_3-发布-运行\",\"238\":\"v-6c5eeffc#_3-1-jdk\",\"239\":\"v-6c5eeffc#_3-2-maven插件\",\"240\":\"v-6c5eeffc#_4-springboot的maven打包插件\",\"241\":\"v-6c5eeffc#_4-1-两种打包方式\",\"242\":\"v-6c5eeffc#_4-2-两种打包方式的对比\",\"243\":\"v-6c5eeffc#_5-jar包的目录结构\",\"244\":\"v-6c5eeffc#_5-1-带spring-boot-maven-plugin插件的jar包\",\"245\":\"v-6c5eeffc#_5-2-不带spring-boot-maven-plugin插件的jar包\",\"246\":\"v-6c5eeffc#_5-3-manifeast-mf\",\"247\":\"v-6c5eeffc#_5-4-总结\",\"248\":\"v-6c5eeffc#_6-端口号冲突\",\"249\":\"v-6c5eeffc#ii-linux\",\"250\":\"v-6c5eeffc#_1-项目部署步骤\",\"251\":\"v-6c5eeffc#_2-部署环境\",\"252\":\"v-6c5eeffc#_3-上传jar包\",\"253\":\"v-6c5eeffc#_4-启动项目\",\"254\":\"v-b5add28a\",\"255\":\"v-b5add28a#i-临时属性配置\",\"256\":\"v-b5add28a#_1-启动命令的临时属性\",\"257\":\"v-b5add28a#_2-属性加载的优先级\",\"258\":\"v-b5add28a#_3-开发中使用临时属性\",\"259\":\"v-b5add28a#_4-main的args参数\",\"260\":\"v-b5add28a#_5-总结\",\"261\":\"v-b5add28a#ii-配置文件分类\",\"262\":\"v-b5add28a#_1-配置文件的级别\",\"263\":\"v-b5add28a#_2-使用场景\",\"264\":\"v-b5add28a#_3-多层级配置文件的关系\",\"265\":\"v-b5add28a#iii-自定义配置文件\",\"266\":\"v-b5add28a#_1-应用场景\",\"267\":\"v-b5add28a#_2-配置方式\",\"268\":\"v-b5add28a#_3-补充说明\",\"269\":\"v-98eabe0a\",\"270\":\"v-98eabe0a#i-yml-单一文件版\",\"271\":\"v-98eabe0a#_1-示例\",\"272\":\"v-98eabe0a#_2-语法\",\"273\":\"v-98eabe0a#ii-yml-多文件版\",\"274\":\"v-98eabe0a#_1-定义多个配置文件\",\"275\":\"v-98eabe0a#_2-应用\",\"276\":\"v-98eabe0a#iii-多环境开发控制\",\"277\":\"v-98eabe0a#_1-include\",\"278\":\"v-98eabe0a#_1-1-使用\",\"279\":\"v-98eabe0a#_1-2-优先级\",\"280\":\"v-98eabe0a#_2-group\",\"281\":\"v-98eabe0a#_3-maven设置多环境\",\"282\":\"v-98eabe0a#_3-1-springboot中读取maven设置值\",\"283\":\"v-98eabe0a#_3-2-使用\",\"284\":\"v-98eabe0a#_3-3-debug\",\"285\":\"v-3d2ed920\",\"286\":\"v-3d2ed920#i-记录日志\",\"287\":\"v-3d2ed920#_1-日志的作用\",\"288\":\"v-3d2ed920#_2-使用日志对象记录日志\",\"289\":\"v-3d2ed920#_3-优化日志对象的创建\",\"290\":\"v-3d2ed920#_4-slf4j\",\"291\":\"v-3d2ed920#ii-日志的等级\",\"292\":\"v-3d2ed920#_1-等级划分\",\"293\":\"v-3d2ed920#_2-日志的等级选择\",\"294\":\"v-3d2ed920#_3-配置文件设置日志等级\",\"295\":\"v-3d2ed920#_4-通过日志组设置日志等级\",\"296\":\"v-3d2ed920#iii-日志输出格式\",\"297\":\"v-3d2ed920#_1-默认格式\",\"298\":\"v-3d2ed920#_2-配置文件控制日志格式\",\"299\":\"v-3d2ed920#_3-日志格式语法\",\"300\":\"v-3d2ed920#_4-日志处理\",\"301\":\"v-3d2ed920#iv-日志文件\",\"302\":\"v-3d2ed920#_1-设置日志文件\",\"303\":\"v-3d2ed920#_2-日志策略\",\"304\":\"v-3d2ed920#_3-日志策略配置\",\"305\":\"v-3d2ed920#v-logback-日志\",\"306\":\"v-3d2ed920#_1-介绍\",\"307\":\"v-3d2ed920#_2-配置logback日志\",\"308\":\"v-3d2ed920#_3-配置文件内容\",\"309\":\"v-3d2ed920#_4-手动输出日志\",\"310\":\"v-89c50cda\",\"311\":\"v-89c50cda#监控介绍\",\"312\":\"v-89c50cda#_1-什么是监控\",\"313\":\"v-89c50cda#_2-监控的内容\",\"314\":\"v-89c50cda#_3-监控的实施方式\",\"315\":\"v-89c50cda#_4-信息获取的方式\",\"316\":\"v-89c50cda#spring-boot-admin\",\"317\":\"v-89c50cda#_1-介绍\",\"318\":\"v-89c50cda#_2-创建-spring-boot-admin-服务端\",\"319\":\"v-89c50cda#_2-1-依赖\",\"320\":\"v-89c50cda#_2-2-在启动类上开启监控\",\"321\":\"v-89c50cda#_2-3-访问控制台\",\"322\":\"v-89c50cda#_3-spring-boot-admin-客户端配置\",\"323\":\"v-89c50cda#_3-1-依赖\",\"324\":\"v-89c50cda#_3-2-上传客户端信息\",\"325\":\"v-89c50cda#_3-3-再次查看服务的控制台\",\"326\":\"v-89c50cda#_3-客户端开放信息\",\"327\":\"v-89c50cda#_4-配置多个客户端\",\"328\":\"v-89c50cda#监控信息说明\",\"329\":\"v-89c50cda#_1-细节\",\"330\":\"v-89c50cda#_2-性能\",\"331\":\"v-89c50cda#_3-环境\",\"332\":\"v-89c50cda#_4-类\",\"333\":\"v-89c50cda#_5-配置属性\",\"334\":\"v-89c50cda#_6-计划任务\",\"335\":\"v-89c50cda#_7-日志配置\",\"336\":\"v-89c50cda#_8-jvm\",\"337\":\"v-89c50cda#_9-映射\",\"338\":\"v-89c50cda#_10-缓存\",\"339\":\"v-89c50cda#_11-日志报表\",\"340\":\"v-89c50cda#监控原理\",\"341\":\"v-89c50cda#_1-actuator\",\"342\":\"v-89c50cda#_2-端点\",\"343\":\"v-89c50cda#_3-配置显示的端点\",\"344\":\"v-89c50cda#自定义端点信息\",\"345\":\"v-89c50cda#_1-info端点\",\"346\":\"v-89c50cda#显示效果\",\"347\":\"v-89c50cda#复杂info信息\",\"348\":\"v-89c50cda#_2-health端点\",\"349\":\"v-89c50cda#_2-1-组件的状态\",\"350\":\"v-89c50cda#_2-2-配置health端点\",\"351\":\"v-89c50cda#_2-3-效果\",\"352\":\"v-89c50cda#_3-metrics端点\",\"353\":\"v-89c50cda#_4-自定义端点\",\"354\":\"v-24176c70\",\"355\":\"v-24176c70#_1-添加依赖\",\"356\":\"v-24176c70#_2-配置连接池\",\"357\":\"v-24176c70#_3-debug\",\"358\":\"v-24176c70#版本不兼容\",\"359\":\"v-374c8d84\",\"360\":\"v-374c8d84#i-集成mybatis\",\"361\":\"v-374c8d84#_1-添加mybatis依赖\",\"362\":\"v-374c8d84#_2-配置连接信息\",\"363\":\"v-374c8d84#_3-使用mybatis\",\"364\":\"v-374c8d84#_3-1-实体类\",\"365\":\"v-374c8d84#_3-2-dao-mapper接口\",\"366\":\"v-374c8d84#_3-3-使用测试\",\"367\":\"v-374c8d84#_4-注意事项\",\"368\":\"v-374c8d84#_4-1-时区错误\",\"369\":\"v-374c8d84#_4-2-mysql驱动问题\",\"370\":\"v-374c8d84#ii-集成mybatis-plus\",\"371\":\"v-374c8d84#_1-添加mybatis-plus依赖\",\"372\":\"v-374c8d84#_2-配置连接信息-1\",\"373\":\"v-374c8d84#_3-使用mybatisplus\",\"374\":\"v-374c8d84#_3-1-mapper-接口\",\"375\":\"v-374c8d84#_3-2-使用测试\",\"376\":\"v-fcb06c56\",\"377\":\"v-fcb06c56#_1-依赖\",\"378\":\"v-fcb06c56#_2-redis基础配置\",\"379\":\"v-fcb06c56#_4-使用redis-redistemplate\",\"380\":\"v-fcb06c56#_4-使用redis-stringredistemplate【常用】\",\"381\":\"v-fcb06c56#_5-redis客户端选择\",\"382\":\"v-fcb06c56#_5-1-lettcus与jedis区别\",\"383\":\"v-fcb06c56#_5-2-切换成jedis客户端技术\",\"384\":\"v-fcb06c56#_6-客户端的其他配置\",\"385\":\"v-4d16751d\",\"386\":\"v-4d16751d#导入\",\"387\":\"v-4d16751d#_1-依赖\",\"388\":\"v-4d16751d#_2-application-yml\",\"389\":\"v-4d16751d#_3-uri的格式\",\"390\":\"v-4d16751d#_3-1-致命bug-身份验证\",\"391\":\"v-4d16751d#_3-2-authsource-储存用户信息的数据库\",\"392\":\"v-4d16751d#_3-3-authmechanism-身份认证的机制\",\"393\":\"v-4d16751d#_4-mongotemplate\",\"394\":\"v-4d16751d#实体类\",\"395\":\"v-4d16751d#_1-document\",\"396\":\"v-4d16751d#_2-id与-id\",\"397\":\"v-4d16751d#_2-1-映射\",\"398\":\"v-4d16751d#_2-2-数据类型\",\"399\":\"v-4d16751d#_3-无表结构\",\"400\":\"v-4d16751d#_4-缺省数据\",\"401\":\"v-4d16751d#_5-class字段\",\"402\":\"v-4d16751d#api\",\"403\":\"v-4d16751d#_1-insert-插入一个文档\",\"404\":\"v-4d16751d#_2-remote-根据条件移除文档\",\"405\":\"v-4d16751d#查询语法\",\"406\":\"v-4d16751d#_3-upsert-updatefirst-更新一个文档\",\"407\":\"v-4d16751d#_4-updatemulti-更新多个文档\",\"408\":\"v-4d16751d#_5-findall-查询集合中所有数据\",\"409\":\"v-4d16751d#_6-findbyid-通过-id查询数据\",\"410\":\"v-4d16751d#_7-find-根据复杂条件查询\",\"411\":\"v-72132991\",\"412\":\"v-72132991#整合es\",\"413\":\"v-72132991#_1-依赖\",\"414\":\"v-72132991#_2-es客户端的版本变迁\",\"415\":\"v-72132991#连接es服务\",\"416\":\"v-72132991#_1-application-yml\",\"417\":\"v-72132991#_2-ssl证书\",\"418\":\"v-72132991#_3-配置es客户端\",\"419\":\"v-72132991#_4-连接测试\",\"420\":\"v-72132991#_5-debug\",\"421\":\"v-72132991#索引-api\",\"422\":\"v-72132991#_1-添加index\",\"423\":\"v-72132991#_2-查询index\",\"424\":\"v-72132991#_3-判断index是否存在\",\"425\":\"v-72132991#_4-删除index\",\"426\":\"v-72132991#文档-api\",\"427\":\"v-72132991#实体类\",\"428\":\"v-72132991#_1-插入-文档\",\"429\":\"v-72132991#_2-更新-文档\",\"430\":\"v-72132991#_3-判断-文档是否存在\",\"431\":\"v-72132991#_4-根据-id-删除-文档\",\"432\":\"v-72132991#_5-根据-id-获取文档的所有数据\",\"433\":\"v-72132991#bulk-批量操作\",\"434\":\"v-72132991#语法结构\",\"435\":\"v-72132991#全文搜索\",\"436\":\"v-96767010\",\"437\":\"v-96767010#rabbitmq\",\"438\":\"v-96767010#_1-依赖\",\"439\":\"v-96767010#_2-yml\",\"440\":\"v-96767010#_3-使用指南\",\"441\":\"v-96767010#基本使用过程\",\"442\":\"v-96767010#配置类说明\",\"443\":\"v-96767010#_4-使用示例-direct\",\"444\":\"v-96767010#_4-1-配置类\",\"445\":\"v-96767010#_4-2-生产者service-发送消息\",\"446\":\"v-96767010#_4-3-生成者controller-调用service发送消息\",\"447\":\"v-96767010#_4-4-消费者-监听消息\",\"448\":\"v-96767010#_4-5-测试效果\",\"449\":\"v-96767010#activemq\",\"450\":\"v-96767010#_1-依赖-1\",\"451\":\"v-96767010#_2-yml配置\",\"452\":\"v-96767010#_3-操作activemq\",\"453\":\"v-96767010#_3-1-convertandsend-发送消息\",\"454\":\"v-96767010#_3-2-receiveandconvert-接收消息\",\"455\":\"v-96767010#_4-消息监听器\",\"456\":\"v-96767010#_6-总结\",\"457\":\"v-96767010#rocketmq\",\"458\":\"v-96767010#kafka\",\"459\":\"v-5733d7f8\",\"460\":\"v-5733d7f8#缓存介绍\",\"461\":\"v-5733d7f8#_1-缓存是什么\",\"462\":\"v-5733d7f8#_2-缓存数据库数据\",\"463\":\"v-5733d7f8#_3-缓存临时数据\",\"464\":\"v-5733d7f8#_4-springboot缓存方案\",\"465\":\"v-5733d7f8#默认缓存simple\",\"466\":\"v-5733d7f8#_1-依赖\",\"467\":\"v-5733d7f8#_2-启用缓存\",\"468\":\"v-5733d7f8#_3-使用缓存\",\"469\":\"v-5733d7f8#案例-验证码\",\"470\":\"v-5733d7f8#_1-dto-实体类\",\"471\":\"v-5733d7f8#_2-service-业务层接口和实现类\",\"472\":\"v-5733d7f8#_3-工具类\",\"473\":\"v-5733d7f8#_4-controller-web层代码\",\"474\":\"v-5733d7f8#_5-使用测试\",\"475\":\"v-5733d7f8#ehcache\",\"476\":\"v-5733d7f8#_1-依赖-1\",\"477\":\"v-5733d7f8#_2-yml配置\",\"478\":\"v-5733d7f8#_3-ehcache-xml\",\"479\":\"v-5733d7f8#_4-使用encache\",\"480\":\"v-5733d7f8#_5-补充-缓存清除策略\",\"481\":\"v-5733d7f8#redis\",\"482\":\"v-5733d7f8#_1-依赖-2\",\"483\":\"v-5733d7f8#_2-yml配置-1\",\"484\":\"v-5733d7f8#_3-redis缓存用法\",\"485\":\"v-5733d7f8#_4-redis的-key-规则\",\"486\":\"v-5733d7f8#memcached\",\"487\":\"v-5733d7f8#jetcache\",\"488\":\"v-5733d7f8#底层兼容的缓存技术\",\"489\":\"v-5733d7f8#j2cache\",\"490\":\"v-475bc7de\",\"491\":\"v-475bc7de#timer\",\"492\":\"v-475bc7de#_1-主要方法\",\"493\":\"v-475bc7de#_2-简单示例\",\"494\":\"v-475bc7de#_3-timer的缺陷\",\"495\":\"v-475bc7de#quartz\",\"496\":\"v-475bc7de#task\",\"497\":\"v-475bc7de#_1-依赖\",\"498\":\"v-475bc7de#_2-开启定时任务功能\",\"499\":\"v-475bc7de#_3-定义定时任务\",\"500\":\"v-475bc7de#_4-yml相关配置\",\"501\":\"v-475bc7de#_5-cron表达式\",\"502\":\"v-475bc7de#_6-spring-task缺陷\",\"503\":\"v-39a2f902\",\"504\":\"v-008e2840\",\"505\":\"v-008e2840#bean的注册和加载\",\"506\":\"v-008e2840#xml-bean配置文件\",\"507\":\"v-008e2840#注解-xml扫描\",\"508\":\"v-008e2840#共有4个注解可用\",\"509\":\"v-008e2840#注解使用示例\",\"510\":\"v-008e2840#加载第三方bean\",\"511\":\"v-008e2840#扫描bean\",\"512\":\"v-008e2840#注解-spring配置类\",\"513\":\"v-008e2840#用java配置类取代xml配置类\",\"514\":\"v-008e2840#factorybean\",\"515\":\"v-008e2840#proxybeanmethods\",\"516\":\"v-008e2840#使用-import\",\"517\":\"v-008e2840#用途\",\"518\":\"v-008e2840#使用示例\",\"519\":\"v-008e2840#编程式注册bean\",\"520\":\"v-008e2840#_1-编程形式注册bean\",\"521\":\"v-008e2840#bean的覆盖\",\"522\":\"v-008e2840#_2-importselector\",\"523\":\"v-008e2840#_2-1-实现importselector接口\",\"524\":\"v-008e2840#_2-2-元数据的由来\",\"525\":\"v-008e2840#_2-3-判定元数据-控制bean的生成\",\"526\":\"v-008e2840#_3-importbeandefinitionregistrar\",\"527\":\"v-008e2840#_3-1-实现importbeandefinitionregistrar接口\",\"528\":\"v-008e2840#_3-2-加载bean\",\"529\":\"v-008e2840#_4-beandefinitionregistrypostprocessor\",\"530\":\"v-008e2840#_4-1-实现beandefinitionregistrypostprocessor接口\",\"531\":\"v-008e2840#_4-2-用途\",\"532\":\"v-49526124\",\"533\":\"v-49526124#对加载bean进行控制\",\"534\":\"v-49526124#编程式控制\",\"535\":\"v-49526124#_1-四种编程式注册bean的方式\",\"536\":\"v-49526124#_2-示例\",\"537\":\"v-49526124#_3-总结\",\"538\":\"v-49526124#注解式控制\",\"539\":\"v-49526124#conditional\",\"540\":\"v-49526124#_1-通过容器中是否存在某个类来控制加载\",\"541\":\"v-49526124#_2-通过容器中是否存在某个bean来控制加载\",\"542\":\"v-49526124#_3-其他条件\",\"543\":\"v-49526124#_4-真实案例\",\"544\":\"v-49526124#读取yml文件\",\"545\":\"v-49526124#_1-configurationproperties\",\"546\":\"v-49526124#如下所示\",\"547\":\"v-49526124#_2-通过配置文件为bean提供属性\",\"548\":\"v-49526124#_2-1-设置配置文件\",\"549\":\"v-49526124#_2-2-相关的bean\",\"550\":\"v-49526124#_2-3-使用bean时读取配置文件\",\"551\":\"v-49526124#_2-4-初始化异常\",\"552\":\"v-49526124#_3-封装用于读取配置文件的类\",\"553\":\"v-49526124#_3-1-定义读取属性的类\",\"554\":\"v-49526124#_3-2-使用配置读取类-获取配置\",\"555\":\"v-49526124#_3-3-使用cartooncatandmouse类\",\"556\":\"v-49526124#_4-总结\",\"557\":\"v-1d9f9581\",\"558\":\"v-1d9f9581#自动配置介绍\",\"559\":\"v-1d9f9581#springboot做了什么\",\"560\":\"v-1d9f9581#参数的定义\",\"561\":\"v-1d9f9581#手动操作\",\"562\":\"v-1d9f9581#springboot工作原理\",\"563\":\"v-1d9f9581#springbootapplication\",\"564\":\"v-1d9f9581#_1-springbootconfiguration\",\"565\":\"v-1d9f9581#_2-enableautoconfiguration\",\"566\":\"v-1d9f9581#_2-1-autoconfigurationpackage\",\"567\":\"v-1d9f9581#_2-2-import-autoconfigurationimportselector-class\",\"568\":\"v-1d9f9581#_3-componentscan\",\"569\":\"v-1737038c\",\"570\":\"v-3b166f7c\",\"571\":\"v-db90d16a\",\"572\":\"v-63b2e484\",\"573\":\"v-63b2e484#i-配置idea和git\",\"574\":\"v-63b2e484#_1-maven配置\",\"575\":\"v-63b2e484#_2-字符编码\",\"576\":\"v-63b2e484#_3-隐藏非必要文件\",\"577\":\"v-63b2e484#_4-开启热部署\",\"578\":\"v-63b2e484#_5-配置-gitignore\",\"579\":\"v-63b2e484#ii-创建工程\",\"580\":\"v-63b2e484#_1-new-project\",\"581\":\"v-63b2e484#_2-配置工程\",\"582\":\"v-63b2e484#_3-添加依赖\",\"583\":\"v-63b2e484#_4-配置yml\",\"584\":\"v-63b2e484#_5-初始化\",\"585\":\"v-63b2e484#iii-准备工作\",\"586\":\"v-63b2e484#_1-准备工作顺序\",\"587\":\"v-63b2e484#_2-常用工具类\",\"588\":\"v-63b2e484#_3-代码生成\",\"589\":\"v-63b2e484#iv-目录规范\",\"590\":\"v-67aa765e\",\"591\":\"v-67aa765e#i-springboot-组件\",\"592\":\"v-67aa765e#_1-springboot\",\"593\":\"v-67aa765e#_2-springmvc\",\"594\":\"v-67aa765e#_3-junit-测试依赖\",\"595\":\"v-67aa765e#_4-actuator监控\",\"596\":\"v-67aa765e#ii-sql\",\"597\":\"v-67aa765e#_1-mysql\",\"598\":\"v-67aa765e#_2-druid\",\"599\":\"v-67aa765e#_3-mybatis\",\"600\":\"v-67aa765e#_4-mybatis-plus\",\"601\":\"v-67aa765e#iii-nosql\",\"602\":\"v-67aa765e#_1-redis\",\"603\":\"v-67aa765e#iv-消息与缓存\",\"604\":\"v-67aa765e#_1-rabbitmq\",\"605\":\"v-67aa765e#v-工具\",\"606\":\"v-67aa765e#_1-lombok\",\"607\":\"v-67aa765e#_2-swagger\",\"608\":\"v-67aa765e#_3-sprint-boot-devtool\",\"609\":\"v-67aa765e#_4-fastjson\",\"610\":\"v-67aa765e#vi-第三方api\",\"611\":\"v-67aa765e#_1-阿里云短信服务\",\"612\":\"v-67aa765e#ω-pom-xml示例\",\"613\":\"v-4e83e4b5\",\"614\":\"v-755cc2d0\",\"615\":\"v-755cc2d0#_1-初始化\",\"616\":\"v-755cc2d0#_1-1-创建模块\",\"617\":\"v-755cc2d0#_1-2-配置文件\",\"618\":\"v-755cc2d0#_1-3-创建数据表book\",\"619\":\"v-755cc2d0#_2-实体类\",\"620\":\"v-755cc2d0#_2-1-lombok\",\"621\":\"v-755cc2d0#_3-dao-基本curd\",\"622\":\"v-755cc2d0#_3-1-mapper-接口\",\"623\":\"v-755cc2d0#_3-2-测试类-可选\",\"624\":\"v-755cc2d0#_3-3-配置\",\"625\":\"v-755cc2d0#_4-dao-分页功能\",\"626\":\"v-755cc2d0#_4-1-拦截器\",\"627\":\"v-755cc2d0#_4-2-ipage\",\"628\":\"v-755cc2d0#_4-3-test\",\"629\":\"v-755cc2d0#_5-dao-条件查询\",\"630\":\"v-755cc2d0#_5-1-querywrapper\",\"631\":\"v-755cc2d0#_5-2-示例\",\"632\":\"v-755cc2d0#_5-3-lambdaquerywrapper\",\"633\":\"v-755cc2d0#_5-4-动态条件拼接\",\"634\":\"v-755cc2d0#_6-service-业务层\",\"635\":\"v-755cc2d0#_6-1-bookservice-业务层接口\",\"636\":\"v-755cc2d0#_6-2-bookserviceimpl-业务层实现类\",\"637\":\"v-755cc2d0#_6-3-mybatisplus-通用service接口和通用service实现类\",\"638\":\"v-755cc2d0#_6-4-注意事项\",\"639\":\"v-755cc2d0#_7-controller-表现层\",\"640\":\"v-755cc2d0#_7-1-controller\",\"641\":\"v-755cc2d0#_7-2-注解\",\"642\":\"v-755cc2d0#_7-3-测试接口\",\"643\":\"v-755cc2d0#_8-接口优化\",\"644\":\"v-755cc2d0#_8-1-响应数据设计-详见restful规范\",\"645\":\"v-755cc2d0#_8-2-异常的统一处理\",\"646\":\"v-755cc2d0#_8-3-返回结果模型类\",\"647\":\"v-755cc2d0#_8-4-使用结果模型类\",\"648\":\"v-755cc2d0#_9-前端页面设计\",\"649\":\"v-f5abde66\",\"650\":\"v-f5abde66#i-属性\",\"651\":\"v-f5abde66#_1-length\",\"652\":\"v-f5abde66#_2-equals\",\"653\":\"v-f5abde66#_3-equalsignorecase\",\"654\":\"v-f5abde66#ii-获取\",\"655\":\"v-f5abde66#_1-charat\",\"656\":\"v-f5abde66#_2-indexof\",\"657\":\"v-f5abde66#_3-lastindexof\",\"658\":\"v-f5abde66#iii-检测与比较\",\"659\":\"v-f5abde66#_1-isempty\",\"660\":\"v-f5abde66#_2-compareto\",\"661\":\"v-f5abde66#_3-endswith\",\"662\":\"v-f5abde66#_4-startswith\",\"663\":\"v-f5abde66#_5-contains\",\"664\":\"v-f5abde66#iv-修改\",\"665\":\"v-f5abde66#_1-tolowercase\",\"666\":\"v-f5abde66#_2-touppercase\",\"667\":\"v-f5abde66#_3-trim\",\"668\":\"v-f5abde66#_4-concat\",\"669\":\"v-f5abde66#_5-substring\",\"670\":\"v-f5abde66#v-类型转换\",\"671\":\"v-f5abde66#_1-xxx-parsexxx\",\"672\":\"v-f5abde66#_2-valueof\",\"673\":\"v-f5abde66#_3-tochararray\",\"674\":\"v-f5abde66#_4-getbytes\",\"675\":\"v-f5abde66#vi-正则\",\"676\":\"v-f5abde66#_1-replace\",\"677\":\"v-f5abde66#_1-1-replace-char替换\",\"678\":\"v-f5abde66#_1-2-replace-str替换\",\"679\":\"v-f5abde66#_1-3-replaceall-正则全部替换\",\"680\":\"v-f5abde66#_1-4-replacefirst-正则替换第一个子字符串\",\"681\":\"v-f5abde66#_2-matches\",\"682\":\"v-f5abde66#_3-split\",\"683\":\"v-750e672e\",\"684\":\"v-750e672e#i-介绍\",\"685\":\"v-750e672e#_1-简介\",\"686\":\"v-750e672e#_1-1-stringbuffer\",\"687\":\"v-750e672e#_1-2-stringbuilder\",\"688\":\"v-750e672e#_2-结构\",\"689\":\"v-750e672e#_3-创建stringbuffer对象\",\"690\":\"v-750e672e#_4-string、stringbuffer、stringbuilder对比\",\"691\":\"v-750e672e#_5-源码分析\",\"692\":\"v-750e672e#_5-1-string源码分析\",\"693\":\"v-750e672e#_5-2-stringbuffer分析\",\"694\":\"v-750e672e#_5-3-stringbuffer扩容\",\"695\":\"v-750e672e#_6-对比string、stringbuffer、stringbuilder的效率\",\"696\":\"v-750e672e#_7-三种创建字符串方式的选择\",\"697\":\"v-750e672e#_8-stringbuffer方法的特性\",\"698\":\"v-750e672e#ii-常用方法\",\"699\":\"v-750e672e#_1-length\",\"700\":\"v-750e672e#_2-append\",\"701\":\"v-750e672e#_3-delete\",\"702\":\"v-750e672e#_4-replace\",\"703\":\"v-750e672e#_5-insert\",\"704\":\"v-750e672e#_6-reverse\",\"705\":\"v-30470382\",\"706\":\"v-30470382#i-日期与时间api\",\"707\":\"v-30470382#_1-旧的时间api\",\"708\":\"v-30470382#_2-jdk8之后新时间api出现的背景\",\"709\":\"v-30470382#_3-新时间api介绍\",\"710\":\"v-30470382#_4-新时间日期api包\",\"711\":\"v-30470382#_5-补充说明\",\"712\":\"v-30470382#ii-本地时间\",\"713\":\"v-30470382#_1-localdate、localtime-和-localdatetime\",\"714\":\"v-30470382#_1-1-localdate\",\"715\":\"v-30470382#_1-2-localtime\",\"716\":\"v-30470382#_1-3-localdatetime\",\"717\":\"v-30470382#_2-now\",\"718\":\"v-30470382#_3-of\",\"719\":\"v-30470382#_4-getxxx\",\"720\":\"v-30470382#_5-withxxx\",\"721\":\"v-30470382#_6-plusxxx\",\"722\":\"v-30470382#_7-minusxxx\",\"723\":\"v-30470382#iii-instant\",\"724\":\"v-30470382#_1-now\",\"725\":\"v-30470382#_2-atoffset\",\"726\":\"v-30470382#_3-toepochmillion\",\"727\":\"v-30470382#_4-ofepochmilli\",\"728\":\"v-30470382#iv-datetimeformatter\",\"729\":\"v-30470382#_1-format\",\"730\":\"v-30470382#_2-parse\",\"731\":\"v-30470382#_3-标准格式\",\"732\":\"v-30470382#_3-1-格式化\",\"733\":\"v-30470382#_3-2-解析\",\"734\":\"v-30470382#_4-本地格式\",\"735\":\"v-30470382#_5-自定义格式\",\"736\":\"v-30470382#_5-1-格式化\",\"737\":\"v-30470382#_5-2\",\"738\":\"v-d5e92c6e\",\"739\":\"v-d5e92c6e#i-介绍\",\"740\":\"v-d5e92c6e#_1-对象排序的实质\",\"741\":\"v-d5e92c6e#_2-排序接口\",\"742\":\"v-d5e92c6e#_3-comparable与comparator的区别\",\"743\":\"v-d5e92c6e#ii-comparable\",\"744\":\"v-d5e92c6e#_1-用法\",\"745\":\"v-d5e92c6e#_2-compareto\",\"746\":\"v-d5e92c6e#_3-jdk内置实现\",\"747\":\"v-d5e92c6e#_4-sort\",\"748\":\"v-d5e92c6e#_5-使用示例\",\"749\":\"v-d5e92c6e#_5-1-实现comparable接口-重写compareto方法\",\"750\":\"v-d5e92c6e#_5-2-比较-比较两个对象的大小\",\"751\":\"v-d5e92c6e#_5-3-排序-对多个对象进行排序\",\"752\":\"v-d5e92c6e#iii-comparator\",\"753\":\"v-d5e92c6e#_1-用法-1\",\"754\":\"v-d5e92c6e#_2-compare\",\"755\":\"v-d5e92c6e#_3-使用示例\",\"756\":\"v-d5e92c6e#_3-1-字符串排序\",\"757\":\"v-d5e92c6e#_3-2-自定义类的对象排序\",\"758\":\"v-ae60d024\",\"759\":\"v-ae60d024#i-math\",\"760\":\"v-ae60d024#_1-abs-绝对值\",\"761\":\"v-ae60d024#_2-random-随机数\",\"762\":\"v-ae60d024#_3-ceil-进1取整\",\"763\":\"v-ae60d024#_4-floor-舍去小数\",\"764\":\"v-ae60d024#_5-round-四舍五入\",\"765\":\"v-ae60d024#_6-pi圆周率\",\"766\":\"v-ae60d024#_7-rint-四舍五入\",\"767\":\"v-ae60d024#_8-min-求较小值\",\"768\":\"v-ae60d024#_9-max-求较大值\",\"769\":\"v-ae60d024#_10-数学公式\",\"770\":\"v-ae60d024#_11-几何函数\",\"771\":\"v-ae60d024#ii-number\",\"772\":\"v-ae60d024#_1-xxxvalue\",\"773\":\"v-ae60d024#_2-compareto\",\"774\":\"v-ae60d024#_3-tostring\",\"775\":\"v-ae60d024#_4-valueof\",\"776\":\"v-ae60d024#_5-parsexxx\",\"777\":\"v-ae60d024#iii-biginteger\",\"778\":\"v-ae60d024#iv-bigdecimal\",\"779\":\"v-ae60d024#_1-add\",\"780\":\"v-ae60d024#_2-subtract\",\"781\":\"v-ae60d024#_3-multiply\",\"782\":\"v-ae60d024#_4-divide\",\"783\":\"v-ae60d024#_5-setscale\",\"784\":\"v-ae60d024#_6-roundingmode\",\"785\":\"v-ae60d024#_7-compareto\",\"786\":\"v-1720b947\",\"787\":\"v-1720b947#i-获取信息\",\"788\":\"v-1720b947#_1-getabsolutepath\",\"789\":\"v-1720b947#_2-getpath\",\"790\":\"v-1720b947#_3-getname\",\"791\":\"v-1720b947#_4-getparent\",\"792\":\"v-1720b947#_5-length\",\"793\":\"v-1720b947#_6-lastmodified\",\"794\":\"v-1720b947#_7-list\",\"795\":\"v-1720b947#_8-listfiles\",\"796\":\"v-1720b947#ii-判断\",\"797\":\"v-1720b947#_1-isdirectory\",\"798\":\"v-1720b947#_2-isfile\",\"799\":\"v-1720b947#_3-exists\",\"800\":\"v-1720b947#_4-canxxx\",\"801\":\"v-1720b947#_5-ishidden\",\"802\":\"v-1720b947#iii-创建文件\",\"803\":\"v-1720b947#createnewfile\",\"804\":\"v-1720b947#mkdir\",\"805\":\"v-1720b947#_3-mkdirs\",\"806\":\"v-1720b947#iv-删改\",\"807\":\"v-1720b947#_1-renameto\",\"808\":\"v-1720b947#_1-1-重命名-移动-的条件\",\"809\":\"v-1720b947#_1-2-移动后的文件\",\"810\":\"v-1720b947#_2-delete\",\"811\":\"v-201e690c\",\"812\":\"v-201e690c#i-inputstream-reader\",\"813\":\"v-201e690c#_1-read-无参\",\"814\":\"v-201e690c#_2-read-一参\",\"815\":\"v-201e690c#_2-1-char-参数\",\"816\":\"v-201e690c#_2-2-byte-参数\",\"817\":\"v-201e690c#_2-3-一个误区\",\"818\":\"v-201e690c#_3-read-三参\",\"819\":\"v-201e690c#_4-close\",\"820\":\"v-201e690c#ii-outputstream-write\",\"821\":\"v-201e690c#_1-实例化\",\"822\":\"v-201e690c#_1-1-filewriter-实例化\",\"823\":\"v-201e690c#_1-2-fileoutstream-实例化\",\"824\":\"v-201e690c#_2-write-字符\",\"825\":\"v-201e690c#_3-write-字节流\",\"826\":\"v-201e690c#_4-flush\",\"827\":\"v-201e690c#_5-close\",\"828\":\"v-201e690c#iii-其他流的方法\",\"829\":\"v-201e690c#_1-readline\",\"830\":\"v-201e690c#_2-newline\",\"831\":\"v-a95cae96\",\"832\":\"v-a95cae96#i-class-类相关\",\"833\":\"v-a95cae96#_1-实例化\",\"834\":\"v-a95cae96#_1-1-类的class属性\",\"835\":\"v-a95cae96#_1-2-对象的getclass方法\",\"836\":\"v-a95cae96#_1-3-class-forname\",\"837\":\"v-a95cae96#_1-4-类加载器\",\"838\":\"v-a95cae96#_2-forname\",\"839\":\"v-a95cae96#_3-newinstance\",\"840\":\"v-a95cae96#_4-getname\",\"841\":\"v-a95cae96#_5-getsuperclass\",\"842\":\"v-a95cae96#_6-getgenericsuperclass\",\"843\":\"v-a95cae96#_7-getinterfaces\",\"844\":\"v-a95cae96#_8-getclassloader\",\"845\":\"v-a95cae96#_9-getparent\",\"846\":\"v-a95cae96#_10-getpackage\",\"847\":\"v-a95cae96#ii-class-构造器相关\",\"848\":\"v-a95cae96#_1-getconstructors\",\"849\":\"v-a95cae96#_2-getdeclaredconstructors\",\"850\":\"v-a95cae96#_3-getdeclaredconstructor\",\"851\":\"v-a95cae96#iii-class-属性方法相关\",\"852\":\"v-a95cae96#_1-getfields\",\"853\":\"v-a95cae96#_2-getdeclarefields\",\"854\":\"v-a95cae96#_3-getfield\",\"855\":\"v-a95cae96#_4-getdeclaredfield\",\"856\":\"v-a95cae96#_5-getmethods\",\"857\":\"v-a95cae96#_6-getdeclaredmethods\",\"858\":\"v-a95cae96#_7-getmethod\",\"859\":\"v-a95cae96#_8-getdeclaredmethod\",\"860\":\"v-a95cae96#iv-field\",\"861\":\"v-a95cae96#_1-getmodifier\",\"862\":\"v-a95cae96#_2-gettype\",\"863\":\"v-a95cae96#_3-getname\",\"864\":\"v-a95cae96#_4-get\",\"865\":\"v-a95cae96#_5-set\",\"866\":\"v-a95cae96#_6-setaccessible\",\"867\":\"v-a95cae96#v-method\",\"868\":\"v-a95cae96#_1-getannotations\",\"869\":\"v-a95cae96#_2-getmodifiers\",\"870\":\"v-a95cae96#_3-getreturntype\",\"871\":\"v-a95cae96#_4-getname-1\",\"872\":\"v-a95cae96#_5-getparametertypes\",\"873\":\"v-a95cae96#_6-getexceptiontypes\",\"874\":\"v-a95cae96#_7-invoke\",\"875\":\"v-a95cae96#_8-setaccessible\",\"876\":\"v-a95cae96#vi-constructor\",\"877\":\"v-a95cae96#_1-newinstance\",\"878\":\"v-a95cae96#_2-setaccessible\",\"879\":\"v-5263b62e\",\"880\":\"v-5263b62e#i-system\",\"881\":\"v-5263b62e#_1-currenttimemillion\",\"882\":\"v-5263b62e#_2-exit\",\"883\":\"v-5263b62e#_3-gc\",\"884\":\"v-5263b62e#_4-getproperty\",\"885\":\"v-436a12a6\",\"886\":\"v-436a12a6#_1-new-scanner\",\"887\":\"v-436a12a6#_2-next\",\"888\":\"v-436a12a6#_3-nextxxx\",\"889\":\"v-3e499b0e\",\"890\":\"v-3e499b0e#_1-tostring\",\"891\":\"v-3e499b0e#_2-sort\",\"892\":\"v-3e499b0e#_2-1-sort-int-a\",\"893\":\"v-3e499b0e#_2-2-sort-t-a-comparator-super-t-c\",\"894\":\"v-3e499b0e#_3-binarysearch\",\"895\":\"v-3e499b0e#_4-copyof\",\"896\":\"v-3e499b0e#_5-equals\",\"897\":\"v-3e499b0e#_6-aslist\",\"898\":\"v-3e499b0e#_7-fill\",\"899\":\"v-3e499b0e#_8-aslist\",\"900\":\"v-cd7f9aaa\",\"901\":\"v-cd7f9aaa#i-collection\",\"902\":\"v-cd7f9aaa#结构\",\"903\":\"v-cd7f9aaa#应用范围\",\"904\":\"v-cd7f9aaa#泛型\",\"905\":\"v-cd7f9aaa#_1-add\",\"906\":\"v-cd7f9aaa#_2-addall\",\"907\":\"v-cd7f9aaa#_3-size\",\"908\":\"v-cd7f9aaa#_4-clear\",\"909\":\"v-cd7f9aaa#_5-isempty\",\"910\":\"v-cd7f9aaa#_6-contains\",\"911\":\"v-cd7f9aaa#_7-containsall\",\"912\":\"v-cd7f9aaa#_8-remove\",\"913\":\"v-cd7f9aaa#_9-removeall\",\"914\":\"v-cd7f9aaa#_10-retainall\",\"915\":\"v-cd7f9aaa#_11-equals\",\"916\":\"v-cd7f9aaa#_12-toarray\",\"917\":\"v-cd7f9aaa#_12-1-转为object类型的数组\",\"918\":\"v-cd7f9aaa#_12-2-转为指定类型的数组\",\"919\":\"v-cd7f9aaa#_13-iterator\",\"920\":\"v-cd7f9aaa#ii-iterator\",\"921\":\"v-cd7f9aaa#结构-1\",\"922\":\"v-cd7f9aaa#使用\",\"923\":\"v-cd7f9aaa#指针\",\"924\":\"v-cd7f9aaa#_1-hasnext\",\"925\":\"v-cd7f9aaa#_2-next\",\"926\":\"v-cd7f9aaa#_3-remove\",\"927\":\"v-cd7f9aaa#iii-collections\",\"928\":\"v-cd7f9aaa#结构-2\",\"929\":\"v-cd7f9aaa#用途\",\"930\":\"v-cd7f9aaa#_1-reverse\",\"931\":\"v-cd7f9aaa#_2-shuffle\",\"932\":\"v-cd7f9aaa#_3-sort\",\"933\":\"v-cd7f9aaa#_4-swap\",\"934\":\"v-cd7f9aaa#_5-max\",\"935\":\"v-cd7f9aaa#_6-min\",\"936\":\"v-cd7f9aaa#_7-frequency\",\"937\":\"v-cd7f9aaa#_8-copy\",\"938\":\"v-cd7f9aaa#_9-replaceall\",\"939\":\"v-cd7f9aaa#_10-synchronizedxxx\",\"940\":\"v-5aaae15d\",\"941\":\"v-5aaae15d#i-list\",\"942\":\"v-5aaae15d#结构\",\"943\":\"v-5aaae15d#使用说明\",\"944\":\"v-5aaae15d#arrays-aslist\",\"945\":\"v-5aaae15d#_1-add\",\"946\":\"v-5aaae15d#_2-addall\",\"947\":\"v-5aaae15d#_3-get\",\"948\":\"v-5aaae15d#_4-indexof\",\"949\":\"v-5aaae15d#_5-lastindexof\",\"950\":\"v-5aaae15d#_6-remove\",\"951\":\"v-5aaae15d#_7-set\",\"952\":\"v-5aaae15d#_8-sublist\",\"953\":\"v-5aaae15d#ii-map\",\"954\":\"v-5aaae15d#结构-1\",\"955\":\"v-5aaae15d#实现类\",\"956\":\"v-5aaae15d#泛型\",\"957\":\"v-5aaae15d#特性\",\"958\":\"v-5aaae15d#遍历操作\",\"959\":\"v-5aaae15d#_1-put\",\"960\":\"v-5aaae15d#_2-putall\",\"961\":\"v-5aaae15d#_3-remove\",\"962\":\"v-5aaae15d#_4-clear\",\"963\":\"v-5aaae15d#_5-get\",\"964\":\"v-5aaae15d#_6-containskey\",\"965\":\"v-5aaae15d#_7-containsvalue\",\"966\":\"v-5aaae15d#_8-size\",\"967\":\"v-5aaae15d#_9-isempty\",\"968\":\"v-5aaae15d#_10-equals\",\"969\":\"v-5aaae15d#_11-keyset\",\"970\":\"v-5aaae15d#_12-values\",\"971\":\"v-5aaae15d#_13-entryset\",\"972\":\"v-4f63eb30\",\"973\":\"v-4f63eb30#〇-核心functional\",\"974\":\"v-4f63eb30#_1-consumer\",\"975\":\"v-4f63eb30#_2-supplier\",\"976\":\"v-4f63eb30#_3-function\",\"977\":\"v-4f63eb30#_4-predicate\",\"978\":\"v-4f63eb30#i-xxxconsumer\",\"979\":\"v-4f63eb30#ii-xxxsupplier\",\"980\":\"v-4f63eb30#iii-xxxfucntion\",\"981\":\"v-4f63eb30#iv-xxxpredicate\",\"982\":\"v-4f63eb30#v-xxxoperator\",\"983\":\"v-5f6cc20e\",\"984\":\"v-5f6cc20e#正则相关的类\",\"985\":\"v-5f6cc20e#注意事项\",\"986\":\"v-5f6cc20e#java正则语法指南\",\"987\":\"v-5f6cc20e#pattern与matcher的使用\",\"988\":\"v-5f6cc20e#i-string\",\"989\":\"v-5f6cc20e#_1-replaceall\",\"990\":\"v-5f6cc20e#_2-replacefirst\",\"991\":\"v-5f6cc20e#_3-matches\",\"992\":\"v-5f6cc20e#_4-split\",\"993\":\"v-5f6cc20e#ii-pattern\",\"994\":\"v-5f6cc20e#结构\",\"995\":\"v-5f6cc20e#构造器\",\"996\":\"v-5f6cc20e#_1-compile\",\"997\":\"v-5f6cc20e#_2-flags\",\"998\":\"v-5f6cc20e#_3-matcher\",\"999\":\"v-5f6cc20e#_4-pattern\",\"1000\":\"v-5f6cc20e#_5-matches\",\"1001\":\"v-5f6cc20e#_6-split\",\"1002\":\"v-5f6cc20e#iii-matcher\",\"1003\":\"v-5f6cc20e#结构-1\",\"1004\":\"v-5f6cc20e#实例化\",\"1005\":\"v-5f6cc20e#matcher的状态\",\"1006\":\"v-0635775a\",\"1007\":\"v-0635775a#_1-new-scanner\",\"1008\":\"v-0635775a#_2-next\",\"1009\":\"v-0635775a#_3-nextxxx\",\"1010\":\"v-60fbf706\",\"1011\":\"v-60fbf706#_1-java内容分类\",\"1012\":\"v-60fbf706#_2-java主要应用方向\",\"1013\":\"v-60fbf706#_3-java的特点\",\"1014\":\"v-60fbf706#_4-java的核心机制\",\"1015\":\"v-60fbf706#_4-1-java虚拟机\",\"1016\":\"v-60fbf706#_4-2-垃圾收集机制\",\"1017\":\"v-60fbf706#_5-java版本选择\",\"1018\":\"v-60fbf706#_6-概念补充\",\"1019\":\"v-60fbf706#_6-1-软件运行方式\",\"1020\":\"v-60fbf706#_6-2-编程语言介绍\",\"1021\":\"v-741aadec\",\"1022\":\"v-741aadec#i-开发环境搭建\",\"1023\":\"v-741aadec#_1-环境介绍\",\"1024\":\"v-741aadec#_1-1-jre\",\"1025\":\"v-741aadec#_1-2-jdk\",\"1026\":\"v-741aadec#_1-3-jdk、jre、jvm的关系\",\"1027\":\"v-741aadec#_2-安装jdk-windows\",\"1028\":\"v-741aadec#_3-环境变量path配置-windows\",\"1029\":\"v-741aadec#_3-1-直接配置path\",\"1030\":\"v-741aadec#_3-2-多版本jdk\",\"1031\":\"v-741aadec#_4-配置java-home\",\"1032\":\"v-741aadec#_4-1-创建变量\",\"1033\":\"v-741aadec#_4-2-使用变量\",\"1034\":\"v-741aadec#ii-生产环境搭建\",\"1035\":\"v-741aadec#_1-yum安装\",\"1036\":\"v-d0b05c46\",\"1037\":\"v-d0b05c46#i-编译执行\",\"1038\":\"v-d0b05c46#_1-java执行过程\",\"1039\":\"v-d0b05c46#_2-执行过程解析\",\"1040\":\"v-d0b05c46#_2-1-编译代码\",\"1041\":\"v-d0b05c46#_2-2-运行代码\",\"1042\":\"v-d0b05c46#_2-3-注意事项\",\"1043\":\"v-d0b05c46#_3-基本语法规则\",\"1044\":\"v-d0b05c46#_3-1-class-类\",\"1045\":\"v-d0b05c46#_3-2-main-入口\",\"1046\":\"v-d0b05c46#_3-3-注意\",\"1047\":\"v-d0b05c46#_4-输出语句\",\"1048\":\"v-d0b05c46#_5-基本使用测试\",\"1049\":\"v-d0b05c46#_5-1-包含两个类的java文件-编译后生成了两个class文件\",\"1050\":\"v-d0b05c46#_5-2-没有main文件-直接运行会报错\",\"1051\":\"v-d0b05c46#_5-3-结论\",\"1052\":\"v-d0b05c46#ii-注释\",\"1053\":\"v-d0b05c46#_1-注释的意义\",\"1054\":\"v-d0b05c46#_2-单行注释\",\"1055\":\"v-d0b05c46#_3-多行注释\",\"1056\":\"v-d0b05c46#_4-文档注释\",\"1057\":\"v-d0b05c46#iii-文档注释格式\",\"1058\":\"v-d0b05c46#_1-通用文档标记\",\"1059\":\"v-d0b05c46#_2-类上常用文档标记\",\"1060\":\"v-d0b05c46#_3-方法上常用文档标记\",\"1061\":\"v-d0b05c46#_4-使用命令行生成api文档\",\"1062\":\"v-d0b05c46#_5-使用ide生成帮助文档\",\"1063\":\"v-d0b05c46#iv-基本代码规范\",\"1064\":\"v-5637c00e\",\"1065\":\"v-5637c00e#i-变量\",\"1066\":\"v-5637c00e#_1-概念\",\"1067\":\"v-5637c00e#_2-作用\",\"1068\":\"v-5637c00e#_3-声明变量\",\"1069\":\"v-5637c00e#_3-1-只声明\",\"1070\":\"v-5637c00e#_3-2-变量的赋值\",\"1071\":\"v-5637c00e#_3-3-声明的同时赋值\",\"1072\":\"v-5637c00e#_4-变量的作用域\",\"1073\":\"v-5637c00e#_5-使用变量的注意事项\",\"1074\":\"v-5637c00e#_6-变量的分类\",\"1075\":\"v-5637c00e#_6-1-按照数据类型\",\"1076\":\"v-5637c00e#_6-2-按照变量声明的位置\",\"1077\":\"v-5637c00e#ii-关键字\",\"1078\":\"v-5637c00e#_1-介绍\",\"1079\":\"v-5637c00e#_2-关键字汇总\",\"1080\":\"v-5637c00e#_3-保留字\",\"1081\":\"v-5637c00e#iii-标识符\",\"1082\":\"v-5637c00e#_1-合法标识符规则\",\"1083\":\"v-5637c00e#_2-命名规范\",\"1084\":\"v-b55bf84e\",\"1085\":\"v-b55bf84e#i-整形-4种\",\"1086\":\"v-b55bf84e#_1-说明\",\"1087\":\"v-b55bf84e#_2-四种整形的对比\",\"1088\":\"v-b55bf84e#_3-注意事项\",\"1089\":\"v-b55bf84e#_4-使用示例\",\"1090\":\"v-b55bf84e#_5-默认整形\",\"1091\":\"v-b55bf84e#ii-浮点类型-2种\",\"1092\":\"v-b55bf84e#_1-说明-1\",\"1093\":\"v-b55bf84e#_2-浮点型的两种表示方式\",\"1094\":\"v-b55bf84e#_3-两种浮点类型的对比\",\"1095\":\"v-b55bf84e#_4-注意事项\",\"1096\":\"v-b55bf84e#_5-使用示例\",\"1097\":\"v-b55bf84e#_6-底层说明\",\"1098\":\"v-b55bf84e#_7-知识补充-long类型为什么加l\",\"1099\":\"v-b55bf84e#iii-字符类型-char\",\"1100\":\"v-b55bf84e#_1-说明-2\",\"1101\":\"v-b55bf84e#_2-声明字符\",\"1102\":\"v-b55bf84e#_3-字符变量的三种表现形式\",\"1103\":\"v-b55bf84e#_4-字符集介绍\",\"1104\":\"v-b55bf84e#_5-注意事项\",\"1105\":\"v-b55bf84e#iv-布尔类型-boolean\",\"1106\":\"v-b55bf84e#_1-说明-3\",\"1107\":\"v-b55bf84e#_2-使用示例\",\"1108\":\"v-b55bf84e#_3-注意\",\"1109\":\"v-b55bf84e#v-类型间的转换\",\"1110\":\"v-b55bf84e#_1-不同类型之间的运算\",\"1111\":\"v-b55bf84e#_2-自动类型提升\",\"1112\":\"v-b55bf84e#_2-1-运算的规则\",\"1113\":\"v-b55bf84e#_2-2-特殊情况\",\"1114\":\"v-b55bf84e#_2-3-示例\",\"1115\":\"v-b55bf84e#_3-数值常量的默认数据类型\",\"1116\":\"v-b55bf84e#_4-不加l和f发生的自动类型转换\",\"1117\":\"v-b55bf84e#_5-强制类型转换\",\"1118\":\"v-b55bf84e#vi-进制问题\",\"1119\":\"v-b55bf84e#_1-表示方法\",\"1120\":\"v-b55bf84e#_2-符号位\",\"1121\":\"v-b55bf84e#_3-原码、反码、补码\",\"1122\":\"v-b55bf84e#_4-进制转换\",\"1123\":\"v-618aca3e\",\"1124\":\"v-618aca3e#_1-string对象的创建\",\"1125\":\"v-618aca3e#_2-字符串常量池\",\"1126\":\"v-618aca3e#_3-string类的特性\",\"1127\":\"v-618aca3e#_4-字符串的不可变性\",\"1128\":\"v-618aca3e#_4-1-具体体现\",\"1129\":\"v-618aca3e#_4-2-内存图示\",\"1130\":\"v-618aca3e#_5-string对象的内存分析\",\"1131\":\"v-618aca3e#_5-1-string对象的储存\",\"1132\":\"v-618aca3e#_5-2-内存图示\",\"1133\":\"v-618aca3e#_5-3-对象中的字符串\",\"1134\":\"v-618aca3e#_6-string的运算-拼接操作\",\"1135\":\"v-618aca3e#_7-类型转换\",\"1136\":\"v-618aca3e#_8-string的操作\",\"1137\":\"v-3d99f73b\",\"1138\":\"v-3d99f73b#i-算术运算符\",\"1139\":\"v-3d99f73b#_1-除号运算的细节\",\"1140\":\"v-3d99f73b#_2-取模的细节\",\"1141\":\"v-3d99f73b#_3-自增、自减的细节\",\"1142\":\"v-3d99f73b#ii-赋值运算符\",\"1143\":\"v-3d99f73b#_1-赋值运算符\",\"1144\":\"v-3d99f73b#_2-扩展赋值运算符\",\"1145\":\"v-3d99f73b#_3-数据类型不改变\",\"1146\":\"v-3d99f73b#_4-开发中的选择\",\"1147\":\"v-3d99f73b#iii-比较运算符\",\"1148\":\"v-3d99f73b#_1-概述\",\"1149\":\"v-3d99f73b#_2-使用细节\",\"1150\":\"v-3d99f73b#iv-逻辑运算符\",\"1151\":\"v-3d99f73b#_1-概述-1\",\"1152\":\"v-3d99f73b#_2-使用\",\"1153\":\"v-3d99f73b#_3-短路情况\",\"1154\":\"v-3d99f73b#v-位运算符\",\"1155\":\"v-3d99f73b#_1-概述-2\",\"1156\":\"v-3d99f73b#_2-补位的细节\",\"1157\":\"v-3d99f73b#_3-细节补充\",\"1158\":\"v-3d99f73b#vi-三元运算符\",\"1159\":\"v-3d99f73b#_1-格式\",\"1160\":\"v-3d99f73b#_2-使用说明\",\"1161\":\"v-3d99f73b#_2-1-表达式1-和表达式2为-同种类型\",\"1162\":\"v-3d99f73b#_2-2-三元运算符的嵌套\",\"1163\":\"v-3d99f73b#_2-3-三元运算符与if-else\",\"1164\":\"v-3d99f73b#vii-运算符优先级\",\"1165\":\"v-ecc6e948\",\"1166\":\"v-ecc6e948#i-if-else\",\"1167\":\"v-ecc6e948#_1-语法\",\"1168\":\"v-ecc6e948#_1-1-单分支-选或跳过\",\"1169\":\"v-ecc6e948#_1-2-双分支-二选一\",\"1170\":\"v-ecc6e948#_1-3-多分支-多选一\",\"1171\":\"v-ecc6e948#_2-使用细节\",\"1172\":\"v-ecc6e948#_3-注意事项\",\"1173\":\"v-ecc6e948#ii-switch\",\"1174\":\"v-ecc6e948#_1-语法格式\",\"1175\":\"v-ecc6e948#_2-使用说明\",\"1176\":\"v-ecc6e948#_3-省略break的用法\",\"1177\":\"v-ecc6e948#_4-if-else和switch-case的选择\",\"1178\":\"v-ecc6e948#iii-for\",\"1179\":\"v-ecc6e948#循环的组成部分\",\"1180\":\"v-ecc6e948#_1-for循环的结构\",\"1181\":\"v-ecc6e948#_2-for循环的使用\",\"1182\":\"v-ecc6e948#iv-while\",\"1183\":\"v-ecc6e948#_1-语法结构\",\"1184\":\"v-ecc6e948#_2-while循环的使用\",\"1185\":\"v-ecc6e948#_3-for循环和while循环\",\"1186\":\"v-ecc6e948#_4-while-true-无限循环格式\",\"1187\":\"v-ecc6e948#v-do-while\",\"1188\":\"v-ecc6e948#_1-语法结构-1\",\"1189\":\"v-ecc6e948#_2-do-while循环的使用\",\"1190\":\"v-ecc6e948#_3-使用说明\",\"1191\":\"v-ecc6e948#vi-循环控制\",\"1192\":\"v-ecc6e948#_1-break\",\"1193\":\"v-ecc6e948#_1-1-使用范围\",\"1194\":\"v-ecc6e948#_1-2-嵌套循环中的使用\",\"1195\":\"v-ecc6e948#_2-continue\",\"1196\":\"v-ecc6e948#_3-return\",\"1197\":\"v-ecc6e948#_4-使用说明\",\"1198\":\"v-ecc6e948#_5-使用示例\",\"1199\":\"v-ecc6e948#vii-嵌套循环\",\"1200\":\"v-ecc6e948#_1-使用说明\",\"1201\":\"v-ecc6e948#_2-使用示例\",\"1202\":\"v-ecc6e948#_2-1-示例1-输出星星\",\"1203\":\"v-ecc6e948#_2-2-示例2-输出99乘法表\",\"1204\":\"v-ecc6e948#_2-3-示例3-100以内的所有质数的输出\",\"1205\":\"v-da928d2c\",\"1206\":\"v-da928d2c#i-概述\",\"1207\":\"v-da928d2c#_1-概念\",\"1208\":\"v-da928d2c#_2-数组的元素\",\"1209\":\"v-da928d2c#_3-数组的特点\",\"1210\":\"v-da928d2c#_4-数组的分类\",\"1211\":\"v-da928d2c#_5-使用数组的步骤\",\"1212\":\"v-da928d2c#_6-数组间的赋值与复制\",\"1213\":\"v-da928d2c#_6-1-赋值\",\"1214\":\"v-da928d2c#_6-2-复制一份内存空间\",\"1215\":\"v-da928d2c#ii-一维数组\",\"1216\":\"v-da928d2c#_1-声明数组\",\"1217\":\"v-da928d2c#_2-初始化数组\",\"1218\":\"v-da928d2c#_2-1-动态初始化\",\"1219\":\"v-da928d2c#_2-2-静态初始化\",\"1220\":\"v-da928d2c#_3-访问数组元素\",\"1221\":\"v-da928d2c#_4-获取数组长度\",\"1222\":\"v-da928d2c#_5-遍历数组\",\"1223\":\"v-da928d2c#_6-数组元素的默认初始化值\",\"1224\":\"v-da928d2c#_7-一维数组的内存解析\",\"1225\":\"v-da928d2c#_7-1-内存结构\",\"1226\":\"v-da928d2c#_7-2-数组的内存结构\",\"1227\":\"v-da928d2c#_7-3-储存的过程\",\"1228\":\"v-da928d2c#_8-注意事项\",\"1229\":\"v-da928d2c#iii-多维数组\",\"1230\":\"v-da928d2c#说明\",\"1231\":\"v-da928d2c#_1-二维数组的声明\",\"1232\":\"v-da928d2c#_1-1-静态初始化\",\"1233\":\"v-da928d2c#_1-2-动态初始化-指定内层数组长度\",\"1234\":\"v-da928d2c#_1-3-动态初始化-未指定数组内层长度\",\"1235\":\"v-da928d2c#_2-数组赋值\",\"1236\":\"v-da928d2c#_2-1-指定了内层数组长度\",\"1237\":\"v-da928d2c#_2-2-未指定内层数组长度\",\"1238\":\"v-da928d2c#_3-元素的访问和值\",\"1239\":\"v-da928d2c#_4-数组的长度\",\"1240\":\"v-da928d2c#_5-遍历数组-1\",\"1241\":\"v-da928d2c#_6-数组元素的默认初始化值-1\",\"1242\":\"v-da928d2c#_7-二维数组的内存解析\",\"1243\":\"v-da928d2c#_8-注意事项-1\",\"1244\":\"v-da928d2c#iv-常见异常\",\"1245\":\"v-da928d2c#_1-数组索引越界\",\"1246\":\"v-da928d2c#_2-空指针\",\"1247\":\"v-da928d2c#v-arrays工具类\",\"1248\":\"v-3bfc80ec\",\"1249\":\"v-3bfc80ec#i-面向对象\",\"1250\":\"v-3bfc80ec#_1-面向过程与面向对象\",\"1251\":\"v-3bfc80ec#_2-面向对象的三大特征\",\"1252\":\"v-3bfc80ec#_3-面向对象的思想概述\",\"1253\":\"v-3bfc80ec#_4-java中的万物皆对象\",\"1254\":\"v-3bfc80ec#ii-类与对象\",\"1255\":\"v-3bfc80ec#_1-什么是类与对象\",\"1256\":\"v-3bfc80ec#_2-类与引用数据类型\",\"1257\":\"v-3bfc80ec#_3-类与类的成员\",\"1258\":\"v-3bfc80ec#_4-创建类\",\"1259\":\"v-3bfc80ec#_5-创建对象\",\"1260\":\"v-3bfc80ec#_6-类和对象的使用\",\"1261\":\"v-3bfc80ec#_7-类与多个对象\",\"1262\":\"v-3bfc80ec#_8-对象间的赋值\",\"1263\":\"v-3bfc80ec#_9-类的访问机制\",\"1264\":\"v-3bfc80ec#_10-补充说明\",\"1265\":\"v-3bfc80ec#iii-特殊形式对象\",\"1266\":\"v-3bfc80ec#_1-对象数组\",\"1267\":\"v-3bfc80ec#_2-匿名对象\",\"1268\":\"v-758a1bd8\",\"1269\":\"v-758a1bd8#i-属性\",\"1270\":\"v-758a1bd8#_1-属性声明语法\",\"1271\":\"v-758a1bd8#_2-属性与局部变量的对比\",\"1272\":\"v-758a1bd8#_2-1-相同点\",\"1273\":\"v-758a1bd8#_2-2-不同点\",\"1274\":\"v-758a1bd8#_3-对属性可以赋值的位置\",\"1275\":\"v-758a1bd8#ii-方法\",\"1276\":\"v-758a1bd8#_1-概述\",\"1277\":\"v-758a1bd8#_2-方法的分类\",\"1278\":\"v-758a1bd8#_3-return关键字\",\"1279\":\"v-758a1bd8#_4-方法的调用\",\"1280\":\"v-758a1bd8#_4-1-调用在main所在类中声明的方法\",\"1281\":\"v-758a1bd8#_4-2-注意\",\"1282\":\"v-758a1bd8#_5-方法访问类的成员\",\"1283\":\"v-758a1bd8#_6-递归方法\",\"1284\":\"v-758a1bd8#iii-方法的重载\",\"1285\":\"v-758a1bd8#_1-overload-重载\",\"1286\":\"v-758a1bd8#_2-重载的调用\",\"1287\":\"v-758a1bd8#_3-重载示例\",\"1288\":\"v-758a1bd8#iv-参数传递\",\"1289\":\"v-758a1bd8#_1-概念\",\"1290\":\"v-758a1bd8#_2-参数的数据类型\",\"1291\":\"v-758a1bd8#_3-参数值的传递机制\",\"1292\":\"v-758a1bd8#_3-1-基本数据类型\",\"1293\":\"v-758a1bd8#_3-2-引用数据类型\",\"1294\":\"v-758a1bd8#_4-可变个数形参的方法\",\"1295\":\"v-758a1bd8#_4-1-使用说明\",\"1296\":\"v-758a1bd8#_4-2-遍历可变形参\",\"1297\":\"v-758a1bd8#_4-3-注意事项\",\"1298\":\"v-0c550b7e\",\"1299\":\"v-0c550b7e#i-介绍\",\"1300\":\"v-0c550b7e#程序设计的追求\",\"1301\":\"v-0c550b7e#_1-什么是封装\",\"1302\":\"v-0c550b7e#_2-封装性的意义\",\"1303\":\"v-0c550b7e#_2-1-直接访问属性\",\"1304\":\"v-0c550b7e#_2-2-通过封装保护属性\",\"1305\":\"v-0c550b7e#_2-3-总结\",\"1306\":\"v-0c550b7e#_3-封装思想的体现\",\"1307\":\"v-0c550b7e#_4-封装性的总结\",\"1308\":\"v-0c550b7e#ii-权限修饰符\",\"1309\":\"v-0c550b7e#_1-四种访问权限修饰符\",\"1310\":\"v-0c550b7e#_2-具体修饰的目标\",\"1311\":\"v-0c550b7e#_3-权限范围介绍\",\"1312\":\"v-0c550b7e#_4-开发中的做法\",\"1313\":\"v-614d3b8e\",\"1314\":\"v-614d3b8e#_1-构造器的作用\",\"1315\":\"v-614d3b8e#_1-1-创建对象\",\"1316\":\"v-614d3b8e#_1-2-给对象进行初始化\",\"1317\":\"v-614d3b8e#_2-构造器的语法\",\"1318\":\"v-614d3b8e#_3-构造器分类\",\"1319\":\"v-614d3b8e#_4-构造器重载\",\"1320\":\"v-614d3b8e#_5-默认构造器\",\"1321\":\"v-614d3b8e#_6-注意事项\",\"1322\":\"v-614d3b8e#_7-构造器的调用\",\"1323\":\"v-614d3b8e#_8-总结-属性赋值的先后顺序\",\"1324\":\"v-45f21e90\",\"1325\":\"v-45f21e90#i-this\",\"1326\":\"v-45f21e90#_1-this的作用\",\"1327\":\"v-45f21e90#_2-this的使用\",\"1328\":\"v-45f21e90#_2-1-在类的方法中\",\"1329\":\"v-45f21e90#_2-2-在类的构造器中\",\"1330\":\"v-45f21e90#_3-this调用构造器\",\"1331\":\"v-45f21e90#_4-this使用时机\",\"1332\":\"v-45f21e90#_5-总结\",\"1333\":\"v-45f21e90#ii-package\",\"1334\":\"v-45f21e90#_1-什么是包\",\"1335\":\"v-45f21e90#_2-包的作用\",\"1336\":\"v-45f21e90#_3-指定包\",\"1337\":\"v-45f21e90#_4-包的命名规则\",\"1338\":\"v-45f21e90#_5-jdk中主要包介绍\",\"1339\":\"v-45f21e90#iii-import\",\"1340\":\"v-45f21e90#_1-说明\",\"1341\":\"v-45f21e90#_2-语法格式\",\"1342\":\"v-45f21e90#_3-import的使用细节\",\"1343\":\"v-45f21e90#_4-全类名-不导入包直接用\",\"1344\":\"v-45f21e90#_5-不同包下的同名类\",\"1345\":\"v-45f21e90#_6-子包下的类\",\"1346\":\"v-45f21e90#_7-import-static\",\"1347\":\"v-45f21e90#iv-final\",\"1348\":\"v-45f21e90#_1-说明-1\",\"1349\":\"v-45f21e90#_2-final类-无法继承\",\"1350\":\"v-45f21e90#_3-final方法-不能重写\",\"1351\":\"v-45f21e90#_4-final变量-常量\",\"1352\":\"v-45f21e90#_4-1-final修饰属性\",\"1353\":\"v-45f21e90#_4-2-final修饰局部变量\",\"1354\":\"v-45f21e90#_4-3-final修饰形参\",\"1355\":\"v-45f21e90#_5-static-final\",\"1356\":\"v-45f21e90#v-其他\",\"1357\":\"v-45f21e90#_1-native\",\"1358\":\"v-e17bd350\",\"1359\":\"v-e17bd350#i-extends-继承\",\"1360\":\"v-e17bd350#_1-语法\",\"1361\":\"v-e17bd350#_2-继承后的效果\",\"1362\":\"v-e17bd350#_3-继承的意义\",\"1363\":\"v-e17bd350#_4-继承的规则总结\",\"1364\":\"v-e17bd350#_5-object类\",\"1365\":\"v-e17bd350#_6-权限问题\",\"1366\":\"v-e17bd350#_6-1-子类是否能继承父类的private成员\",\"1367\":\"v-e17bd350#_6-2-底层解析\",\"1368\":\"v-e17bd350#_6-3-子类访问父类中的private成员\",\"1369\":\"v-e17bd350#ii-override-重写\",\"1370\":\"v-e17bd350#_1-定义\",\"1371\":\"v-e17bd350#_2-重写的要求\",\"1372\":\"v-e17bd350#_2-1-访问修饰符\",\"1373\":\"v-e17bd350#_2-2-返回值\",\"1374\":\"v-e17bd350#_2-3-异常\",\"1375\":\"v-e17bd350#_2-4-静态方法的处理\",\"1376\":\"v-e17bd350#_3-可变参数的重写\",\"1377\":\"v-e17bd350#_4-关于父类中的属性\",\"1378\":\"v-e17bd350#iii-super\",\"1379\":\"v-e17bd350#_1-super的作用\",\"1380\":\"v-e17bd350#_2-super-调用父类属性和方法\",\"1381\":\"v-e17bd350#_2-1-子类调用父类同名属性\",\"1382\":\"v-e17bd350#_2-2-子类调用父类同名方法\",\"1383\":\"v-e17bd350#_2-3-属性和方法查找的过程分析\",\"1384\":\"v-e17bd350#_3-super调用构造器\",\"1385\":\"v-e17bd350#_3-1-声明位置\",\"1386\":\"v-e17bd350#_3-2-默认的super\",\"1387\":\"v-e17bd350#_3-3-super和this-对构造器的调用\",\"1388\":\"v-e17bd350#_3-4-父类没有空构造器的情况\",\"1389\":\"v-e17bd350#_4-super与this的区别\",\"1390\":\"v-e17bd350#iv-子类实例化过程\",\"1391\":\"v-e17bd350#_1-从结果上看\",\"1392\":\"v-e17bd350#_2-从过程上看\",\"1393\":\"v-7762f3d8\",\"1394\":\"v-7762f3d8#i-多态\",\"1395\":\"v-7762f3d8#_1-对象的多态性\",\"1396\":\"v-7762f3d8#_2-多态的使用\",\"1397\":\"v-7762f3d8#_2-1-规定\",\"1398\":\"v-7762f3d8#_2-2-规定解析\",\"1399\":\"v-7762f3d8#_2-3-使用限制\",\"1400\":\"v-7762f3d8#_3-多态的意义\",\"1401\":\"v-7762f3d8#_4-多态示例\",\"1402\":\"v-7762f3d8#_5-虚拟方法的调用\",\"1403\":\"v-7762f3d8#_5-1-正常的方法调用\",\"1404\":\"v-7762f3d8#_5-2-虚拟方法调用-多态情况下\",\"1405\":\"v-7762f3d8#_5-3-编译时类型与运行时类型\",\"1406\":\"v-7762f3d8#_5-4-虚拟方法调用举例\",\"1407\":\"v-7762f3d8#_6-早绑定与晚绑定\",\"1408\":\"v-7762f3d8#_7-赋值形式的多态\",\"1409\":\"v-7762f3d8#_8-多态开发中的应用\",\"1410\":\"v-7762f3d8#ii-转型\",\"1411\":\"v-7762f3d8#_1-向下转型说明\",\"1412\":\"v-7762f3d8#_2-转型的条件\",\"1413\":\"v-7762f3d8#_2-1-向上转型-子转父\",\"1414\":\"v-7762f3d8#_2-2-向下转型-父类转子类\",\"1415\":\"v-7762f3d8#_3-向下转型的异常\",\"1416\":\"v-7762f3d8#_4-instancof的\",\"1417\":\"v-7762f3d8#_5-转型的注意事项\",\"1418\":\"v-7762f3d8#_5-1-向下转型必须是父类引用子类的对象\",\"1419\":\"v-7762f3d8#_5-2-隔代转型\",\"1420\":\"v-7762f3d8#_5-3-转型必须有父子关系\",\"1421\":\"v-542ccf32\",\"1422\":\"v-542ccf32#i-object类\",\"1423\":\"v-542ccf32#_1-说明\",\"1424\":\"v-542ccf32#_2-object类的功能\",\"1425\":\"v-542ccf32#_3-equals与\",\"1426\":\"v-542ccf32#_3-1-的用法\",\"1427\":\"v-542ccf32#_3-2-equals的用法\",\"1428\":\"v-542ccf32#_3-3-自定义类重写equals\",\"1429\":\"v-542ccf32#_3-4-和equals-的区别\",\"1430\":\"v-542ccf32#_3-5-特殊情况\",\"1431\":\"v-542ccf32#_4-tostring\",\"1432\":\"v-542ccf32#_4-1-tostring的源码\",\"1433\":\"v-542ccf32#_4-2-特殊对象对tostring的重写\",\"1434\":\"v-542ccf32#_4-3-自定义重写tostring\",\"1435\":\"v-542ccf32#_4-4-string-tostring\",\"1436\":\"v-542ccf32#ii-包装类\",\"1437\":\"v-542ccf32#_1-说明-1\",\"1438\":\"v-542ccf32#_2-基本数据和对应的包装类\",\"1439\":\"v-542ccf32#_3-包装类的转换概述\",\"1440\":\"v-542ccf32#_4-基本数据类型转换为包装类\",\"1441\":\"v-542ccf32#_4-1-boolean转换的特殊性说明\",\"1442\":\"v-542ccf32#_5-包装类转换为基本数据类型\",\"1443\":\"v-542ccf32#_6-自动装箱与自动拆箱\",\"1444\":\"v-542ccf32#_7-基本数据类型和包装类与string类型的转换\",\"1445\":\"v-542ccf32#_7-1-基本数据类型、包装类-string类型\",\"1446\":\"v-542ccf32#_7-2-string类型转基本数据类型、包装类\",\"1447\":\"v-542ccf32#_8-注意事项\",\"1448\":\"v-542ccf32#iii-内部类\",\"1449\":\"v-542ccf32#_1-定义\",\"1450\":\"v-542ccf32#_2-内部类的作用\",\"1451\":\"v-542ccf32#_3-分类\",\"1452\":\"v-542ccf32#_4-成员内部类的特点\",\"1453\":\"v-542ccf32#_4-1-作为外部类的成员\",\"1454\":\"v-542ccf32#_4-2-作为一个类\",\"1455\":\"v-542ccf32#_4-3-注意事项\",\"1456\":\"v-542ccf32#_4-4-实例化成员内部类\",\"1457\":\"v-542ccf32#_4-5-成员内部类调用外部结构\",\"1458\":\"v-542ccf32#_5-局部内部类的使用\",\"1459\":\"v-542ccf32#_5-1-使用局部内部类\",\"1460\":\"v-542ccf32#_5-2-局部内部类的特点\",\"1461\":\"v-542ccf32#_6-内部列的作用\",\"1462\":\"v-542ccf32#iv-匿名类\",\"1463\":\"v-542ccf32#_1-格式\",\"1464\":\"v-542ccf32#_2-特点\",\"1465\":\"v-542ccf32#_3-示例\",\"1466\":\"v-542ccf32#_3-1-示例1\",\"1467\":\"v-542ccf32#_3-2-示例2\",\"1468\":\"v-e1474b4e\",\"1469\":\"v-e1474b4e#i-static介绍\",\"1470\":\"v-e1474b4e#_1-static关键字的使用\",\"1471\":\"v-e1474b4e#_2-static的背景\",\"1472\":\"v-e1474b4e#_3-类属性与类方法\",\"1473\":\"v-e1474b4e#_4-被static修饰后的成员具备的特点\",\"1474\":\"v-e1474b4e#ii-静态属性\",\"1475\":\"v-e1474b4e#_1-说明\",\"1476\":\"v-e1474b4e#_2-静态变量的声明\",\"1477\":\"v-e1474b4e#_3-静态变量的加载\",\"1478\":\"v-e1474b4e#_4-静态变量的使用\",\"1479\":\"v-e1474b4e#iii-静态方法\",\"1480\":\"v-e1474b4e#_1-概述\",\"1481\":\"v-e1474b4e#_2-静态方法的声明\",\"1482\":\"v-e1474b4e#_3-静态方法的调用\",\"1483\":\"v-e1474b4e#_4-静态方法与非静态方法的对比\",\"1484\":\"v-e1474b4e#_5-注意事项\",\"1485\":\"v-e1474b4e#_6-如何判断是否要声明static\",\"1486\":\"v-e1474b4e#iv-单例模式\",\"1487\":\"v-e1474b4e#_1-单例模式核心\",\"1488\":\"v-e1474b4e#_2-实现方式1-饿汉式\",\"1489\":\"v-e1474b4e#_3-实现方式2-懒汉式\",\"1490\":\"v-e1474b4e#_4-饿汉式和懒汉式的对比\",\"1491\":\"v-e1474b4e#_5-单例模式的使用场景\",\"1492\":\"v-78e14a34\",\"1493\":\"v-78e14a34#i-abstract\",\"1494\":\"v-78e14a34#_1-abstract-class-抽象类\",\"1495\":\"v-78e14a34#_2-abstract方法-抽象方法\",\"1496\":\"v-78e14a34#_3-abstract的使用注意\",\"1497\":\"v-78e14a34#_4-创建抽象类的匿名类\",\"1498\":\"v-78e14a34#_5-模板方法设计模式\",\"1499\":\"v-78e14a34#_5-1-示例-计算代码执行时间\",\"1500\":\"v-78e14a34#_5-2-示例-银行业务流程\",\"1501\":\"v-78e14a34#ii-interface\",\"1502\":\"v-78e14a34#说明\",\"1503\":\"v-78e14a34#_1-概述-接口的由来\",\"1504\":\"v-78e14a34#_1-1-多重继承\",\"1505\":\"v-78e14a34#_1-2-功能\",\"1506\":\"v-78e14a34#_2-接口的意义-规范\",\"1507\":\"v-78e14a34#_3-接口定义\",\"1508\":\"v-78e14a34#_4-接口的特点\",\"1509\":\"v-78e14a34#_5-接口的使用细节\",\"1510\":\"v-78e14a34#_6-接口的实现\",\"1511\":\"v-78e14a34#_7-接口示例\",\"1512\":\"v-78e14a34#_7-1-示例-模拟usb\",\"1513\":\"v-78e14a34#_7-2-jdbc\",\"1514\":\"v-78e14a34#_8-接口与抽象类的对比\",\"1515\":\"v-78e14a34#iii-接口新特性\",\"1516\":\"v-78e14a34#_1-静态方法\",\"1517\":\"v-78e14a34#_2-默认方法\",\"1518\":\"v-78e14a34#_3-在子类中调用父类、接口中被重写的方法\",\"1519\":\"v-78e14a34#_4-静态方法和默认方法的意义\",\"1520\":\"v-78e14a34#_4-1-静态方法\",\"1521\":\"v-78e14a34#_4-2-默认方法\",\"1522\":\"v-21b41a4d\",\"1523\":\"v-21b41a4d#i-代码块\",\"1524\":\"v-21b41a4d#_1-作用\",\"1525\":\"v-21b41a4d#_2-格式\",\"1526\":\"v-21b41a4d#_3-分类\",\"1527\":\"v-21b41a4d#_3-1-静态代码块\",\"1528\":\"v-21b41a4d#_3-2-非静态代码块\",\"1529\":\"v-21b41a4d#_4-开发中代码块的作用\",\"1530\":\"v-21b41a4d#ii-javabean\",\"1531\":\"v-21b41a4d#_1-背景\",\"1532\":\"v-21b41a4d#_2-意义\",\"1533\":\"v-21b41a4d#_3-javabean的种类\",\"1534\":\"v-21b41a4d#_4-javabean举例\",\"1535\":\"v-21b41a4d#iii-概念补充\",\"1536\":\"v-21b41a4d#_1-uml类图\",\"1537\":\"v-21b41a4d#_2-mvc设计模式\",\"1538\":\"v-21b41a4d#_2-1-model-模型层【操作数据】\",\"1539\":\"v-21b41a4d#_2-2-controller-控制器层【业务逻辑】\",\"1540\":\"v-21b41a4d#_2-3-view-视图层【前端】\",\"1541\":\"v-21b41a4d#_3-main\",\"1542\":\"v-21b41a4d#_4-连续操作\",\"1543\":\"v-21b41a4d#_5-四种java文件\",\"1544\":\"v-33098727\",\"1545\":\"v-33098727#i-类与对象\",\"1546\":\"v-33098727#_1-内存区域\",\"1547\":\"v-33098727#_2-对象的内存解析\",\"1548\":\"v-33098727#_2-1-person-p1-new-person\",\"1549\":\"v-33098727#_2-2-p1-name-tome-p1-ismale-true\",\"1550\":\"v-33098727#_2-3-person-p2-new-person\",\"1551\":\"v-33098727#_2-4-person-p3-p1-p3-age-10\",\"1552\":\"v-33098727#_3-注意事项\",\"1553\":\"v-33098727#ii-变量间赋值\",\"1554\":\"v-33098727#_1-结论\",\"1555\":\"v-33098727#_2-基本数据类型\",\"1556\":\"v-33098727#_3-引用数据类型\",\"1557\":\"v-382c2a0e\",\"1558\":\"v-382c2a0e#i-概述\",\"1559\":\"v-382c2a0e#_1-异常分类\",\"1560\":\"v-382c2a0e#_2-error-错误\",\"1561\":\"v-382c2a0e#_3-exception-异常\",\"1562\":\"v-382c2a0e#_4-异常处理\",\"1563\":\"v-382c2a0e#_5-异常处理的意义\",\"1564\":\"v-382c2a0e#ii-异常处理机制\",\"1565\":\"v-382c2a0e#_1-java的异常处理机制\",\"1566\":\"v-382c2a0e#_2-异常处理的抓抛模型\",\"1567\":\"v-382c2a0e#_3-异常对象的产生\",\"1568\":\"v-382c2a0e#_4-异常处理总结\",\"1569\":\"v-53742da0\",\"1570\":\"v-53742da0#i-异常体系结构\",\"1571\":\"v-53742da0#_1-异常分类\",\"1572\":\"v-53742da0#_2-编译时异常\",\"1573\":\"v-53742da0#_3-运行时异常\",\"1574\":\"v-53742da0#ii-常见异常\",\"1575\":\"v-53742da0#_1-nullpointerexception-空指针-运行异常\",\"1576\":\"v-53742da0#_2-indexoutofboundsexception-角标越界-运行异常\",\"1577\":\"v-53742da0#_3-1-arrayindexoutofboundsexception-数组角标越界\",\"1578\":\"v-53742da0#_3-2-stringindexoutofboundsexception-字符串角标越界\",\"1579\":\"v-53742da0#_3-classcastexception-类型转换异常-运行异常\",\"1580\":\"v-53742da0#_4-numberformatexception-数值格式异常-运行异常\",\"1581\":\"v-53742da0#_5-inputmismatchexception-输入不匹配异常-运行异常\",\"1582\":\"v-53742da0#_6-arithmeticexception-算学计算异常-运行异常\",\"1583\":\"v-53742da0#_7-ioexception-编译时异常\",\"1584\":\"v-6b594a6a\",\"1585\":\"v-6b594a6a#_1-语法结构\",\"1586\":\"v-6b594a6a#_2-异常类型的选择\",\"1587\":\"v-6b594a6a#_3-try-catch示例\",\"1588\":\"v-6b594a6a#_4-try-catch使用说明\",\"1589\":\"v-6b594a6a#_5-捕获异常的有关信息\",\"1590\":\"v-6b594a6a#_6-finally的使用\",\"1591\":\"v-6b594a6a#_6-1-示例1-finally一定会被执行\",\"1592\":\"v-6b594a6a#_6-2-示例2-资源的释放\",\"1593\":\"v-6b594a6a#_7-异常的嵌套\",\"1594\":\"v-6b594a6a#_8-注意事项\",\"1595\":\"v-6b594a6a#_9-编译时异常和运行时异常的不同处理\",\"1596\":\"v-837ae2dc\",\"1597\":\"v-837ae2dc#i-throws\",\"1598\":\"v-837ae2dc#_1-throws介绍\",\"1599\":\"v-837ae2dc#_2-异常的抛出机制\",\"1600\":\"v-837ae2dc#_3-throws使用示例\",\"1601\":\"v-837ae2dc#_4-try-catch-finally与throws的对比\",\"1602\":\"v-837ae2dc#_5-方法重写时的异常规则\",\"1603\":\"v-837ae2dc#_6-开发中try-catch-finally和throws的选择\",\"1604\":\"v-837ae2dc#_7-运行时异常的排查\",\"1605\":\"v-837ae2dc#ii-手动抛出异常\",\"1606\":\"v-837ae2dc#_1-关于异常的产生\",\"1607\":\"v-837ae2dc#_2-手动抛出异常的意义\",\"1608\":\"v-837ae2dc#_3-创建异常的语法\",\"1609\":\"v-837ae2dc#_4-示例\",\"1610\":\"v-837ae2dc#iii-自定义异常类\",\"1611\":\"v-837ae2dc#_1-自定义异常类的创建说明\",\"1612\":\"v-837ae2dc#_2-自定义异常类示例\",\"1613\":\"v-837ae2dc#_3-自定义异常类的总结\",\"1614\":\"v-0eaf02d8\",\"1615\":\"v-0eaf02d8#i-枚举类\",\"1616\":\"v-0eaf02d8#_1-什么是枚举类\",\"1617\":\"v-0eaf02d8#_2-枚举类的特点\",\"1618\":\"v-0eaf02d8#_3-枚举类的实现\",\"1619\":\"v-0eaf02d8#_4-自定义枚举类说明\",\"1620\":\"v-0eaf02d8#_5-示例-自定义枚举类\",\"1621\":\"v-0eaf02d8#_5-1-创建枚举类\",\"1622\":\"v-0eaf02d8#_5-2-测试\",\"1623\":\"v-0eaf02d8#ii-enum\",\"1624\":\"v-0eaf02d8#_1-enum关键字\",\"1625\":\"v-0eaf02d8#_2-enum使用说明\",\"1626\":\"v-0eaf02d8#_3-自定义枚举类的步骤\",\"1627\":\"v-0eaf02d8#_4-enum的主要方法\",\"1628\":\"v-0eaf02d8#_5-实现接口的枚举类\",\"1629\":\"v-0eaf02d8#_6-enum使用示例\",\"1630\":\"v-0eaf02d8#_6-1-定义枚举类-并实现一个接口\",\"1631\":\"v-0eaf02d8#_6-2-使用枚举类-并测试枚举类的方法\",\"1632\":\"v-220e4b10\",\"1633\":\"v-220e4b10#i-annotation\",\"1634\":\"v-220e4b10#_1-介绍\",\"1635\":\"v-220e4b10#_1-1-什么是annotation\",\"1636\":\"v-220e4b10#_1-2-注解的用途\",\"1637\":\"v-220e4b10#_2-注解的使用\",\"1638\":\"v-220e4b10#_3-注解的分类\",\"1639\":\"v-220e4b10#ii-自定义注解\",\"1640\":\"v-220e4b10#_1-语法\",\"1641\":\"v-220e4b10#_2-示例\",\"1642\":\"v-220e4b10#_3-语法解析\",\"1643\":\"v-220e4b10#_3-1-interface-声明注解\",\"1644\":\"v-220e4b10#_3-2-元注解\",\"1645\":\"v-220e4b10#_3-3-配置参数-本质是个常量\",\"1646\":\"v-220e4b10#_3-4-配置参数的类型\",\"1647\":\"v-220e4b10#_4-特殊配置参数\",\"1648\":\"v-220e4b10#_5-使用注解\",\"1649\":\"v-220e4b10#iii-注解结构\",\"1650\":\"v-220e4b10#_1-基本架构\",\"1651\":\"v-220e4b10#_2-annotation组成部分\",\"1652\":\"v-220e4b10#_2-1-annotation-java\",\"1653\":\"v-220e4b10#_2-2-elementtype-java\",\"1654\":\"v-220e4b10#_2-3-retentionpolicy-java\",\"1655\":\"v-220e4b10#iv-元注解\",\"1656\":\"v-220e4b10#_1-元注解说明\",\"1657\":\"v-220e4b10#_2-retention\",\"1658\":\"v-220e4b10#_2-1-使用说明\",\"1659\":\"v-220e4b10#_2-2-annotation的生命周期-成员变量的值\",\"1660\":\"v-220e4b10#_3-target\",\"1661\":\"v-220e4b10#_3-1-取值\",\"1662\":\"v-220e4b10#_3-2-注意\",\"1663\":\"v-220e4b10#_4-documented【不常用】\",\"1664\":\"v-220e4b10#_5-inherited【不常用】\",\"1665\":\"v-220e4b10#v-注解新特性\",\"1666\":\"v-220e4b10#_1-可重复注解\",\"1667\":\"v-220e4b10#_1-1-1-8之前的重复注解\",\"1668\":\"v-220e4b10#_1-2-1-8之后的重复注解\",\"1669\":\"v-220e4b10#_2-可用于类型的注解\",\"1670\":\"v-220e4b10#_2-1-type-parameter\",\"1671\":\"v-220e4b10#_2-2-type-use\",\"1672\":\"v-220e4b10#vi-常用注解解析\",\"1673\":\"v-220e4b10#_1-deprecated\",\"1674\":\"v-220e4b10#_2-inherited-元注解之一\",\"1675\":\"v-220e4b10#_3-suppresswarnings\",\"1676\":\"v-220e4b10#_3-1-string-value\",\"1677\":\"v-220e4b10#_3-2-使用举例\",\"1678\":\"v-220e4b10#_3-3-取值\",\"1679\":\"v-220e4b10#vii-反射获取注解信息\",\"1680\":\"v-220e4b10#_1-使用示例\",\"1681\":\"v-672e2b64\",\"1682\":\"v-672e2b64#i-基本概念\",\"1683\":\"v-672e2b64#_1-program-程序的概念\",\"1684\":\"v-672e2b64#_2-process-进程的概念\",\"1685\":\"v-672e2b64#_2-1-程序与进程的区别\",\"1686\":\"v-672e2b64#_2-2-程序与进程的联系\",\"1687\":\"v-672e2b64#_3-thread-线程的概念\",\"1688\":\"v-672e2b64#_4-进程与线程\",\"1689\":\"v-672e2b64#_5-单核cpu和多核cpu\",\"1690\":\"v-672e2b64#_6-并行与并发\",\"1691\":\"v-672e2b64#ii-多线程的意义\",\"1692\":\"v-672e2b64#背景\",\"1693\":\"v-672e2b64#_1-多线程程序的优点\",\"1694\":\"v-672e2b64#_2-何时需要多线程\",\"1695\":\"v-672e2b64#iii-扩展-内存\",\"1696\":\"v-672e2b64#_1-数据\",\"1697\":\"v-672e2b64#_2-内存\",\"1698\":\"v-672e2b64#_2-1-内存条的空间\",\"1699\":\"v-672e2b64#_2-2-内存的生命周期\",\"1700\":\"v-672e2b64#_2-3-内存储存的数据类型\",\"1701\":\"v-672e2b64#_2-4-内存空间的基本分类\",\"1702\":\"v-672e2b64#_3-变量\",\"1703\":\"v-672e2b64#_4-变量名-标识符\",\"1704\":\"v-672e2b64#_5-内存、数据、变量间的关系\",\"1705\":\"v-672e2b64#_6-垃圾回收\",\"1706\":\"v-672e2b64#_7-内存溢出和泄露\",\"1707\":\"v-b90389ae\",\"1708\":\"v-b90389ae#i-java的多线程\",\"1709\":\"v-b90389ae#_1-概述\",\"1710\":\"v-b90389ae#_2-api中创建线程的方式\",\"1711\":\"v-b90389ae#_3-线程的分类\",\"1712\":\"v-b90389ae#ii-继承thred类\",\"1713\":\"v-b90389ae#说明\",\"1714\":\"v-b90389ae#_1-thread类介绍\",\"1715\":\"v-b90389ae#_1-1-thread类-多线程类\",\"1716\":\"v-b90389ae#_1-2-构造器\",\"1717\":\"v-b90389ae#_1-3-run方法-线程体\",\"1718\":\"v-b90389ae#_1-4-start方法-开启线程\",\"1719\":\"v-b90389ae#_2-创建多线程的步骤\",\"1720\":\"v-b90389ae#_3-创建多线程示例\",\"1721\":\"v-b90389ae#_3-1-备注\",\"1722\":\"v-b90389ae#_3-2-执行结果\",\"1723\":\"v-b90389ae#_4-注意事项\",\"1724\":\"v-b90389ae#_4-1-不能通过调用run开始子线程\",\"1725\":\"v-b90389ae#_4-2-同一个thread类的对象不能重复调用start\",\"1726\":\"v-b90389ae#iii-thread常用方法\",\"1727\":\"v-b90389ae#方法列表\",\"1728\":\"v-b90389ae#_1-线程名\",\"1729\":\"v-b90389ae#_2-线程执行控制\",\"1730\":\"v-b90389ae#iv-线程的调度\",\"1731\":\"v-b90389ae#_1-cpu的调度策略\",\"1732\":\"v-b90389ae#_1-1-时间片\",\"1733\":\"v-b90389ae#_1-2-抢占式\",\"1734\":\"v-b90389ae#_2-java的调度方法\",\"1735\":\"v-b90389ae#_3-线程的优先级\",\"1736\":\"v-b90389ae#_4-注意事项-1\",\"1737\":\"v-b90389ae#_5-线程调度示例\",\"1738\":\"v-b90389ae#v-runnable接口\",\"1739\":\"v-b90389ae#_1-runnable接口创建多线程的步骤\",\"1740\":\"v-b90389ae#_2-示例\",\"1741\":\"v-b90389ae#_2-1\",\"1742\":\"v-b90389ae#_2-2-创建多个线程\",\"1743\":\"v-b90389ae#_2-3-共享成员变量\",\"1744\":\"v-b90389ae#_3-thread和runnable-两种方式的比较\",\"1745\":\"v-b90389ae#_3-1-开发中的选择\",\"1746\":\"v-b90389ae#_3-2-区别\",\"1747\":\"v-b90389ae#_3-3-联系\",\"1748\":\"v-6e057354\",\"1749\":\"v-6e057354#_1-线程的5种状态\",\"1750\":\"v-6e057354#_2-线程的生命周期图解\",\"1751\":\"v-478d9fb6\",\"1752\":\"v-478d9fb6#i-线程安全问题\",\"1753\":\"v-478d9fb6#_1-线程的安全问题概述\",\"1754\":\"v-478d9fb6#_2-示例1-消费问题\",\"1755\":\"v-478d9fb6#_3-示例2-卖票问题\",\"1756\":\"v-478d9fb6#_4-解决方案\",\"1757\":\"v-478d9fb6#_5-线程安全问题代码示例\",\"1758\":\"v-478d9fb6#ii-同步代码块\",\"1759\":\"v-478d9fb6#_1-同步代码块说明\",\"1760\":\"v-478d9fb6#_2-买票问题解决示例\",\"1761\":\"v-478d9fb6#_2-1-执行效果\",\"1762\":\"v-478d9fb6#_2-2-注意synchronized的位置\",\"1763\":\"v-478d9fb6#_3-处理继承thread类的线程安全问题\",\"1764\":\"v-478d9fb6#iii-同步方法\",\"1765\":\"v-478d9fb6#_1-同步方法说明\",\"1766\":\"v-478d9fb6#_1-1-runnable实现的-同步监视器\",\"1767\":\"v-478d9fb6#_1-2-继承thread类的-同步监视器\",\"1768\":\"v-478d9fb6#_2-买票问题解决示例-1\",\"1769\":\"v-478d9fb6#_3-解决懒汉式单例模式的线程安全问题\",\"1770\":\"v-478d9fb6#_3-1-高效修改的逻辑\",\"1771\":\"v-478d9fb6#_4-同步原理和总结\",\"1772\":\"v-478d9fb6#_4-1-同步机制中的锁\",\"1773\":\"v-478d9fb6#_4-2-同步的范围\",\"1774\":\"v-478d9fb6#_4-3-释放锁的操作\",\"1775\":\"v-478d9fb6#_4-4-不会释放锁的操作\",\"1776\":\"v-478d9fb6#_5-同步方式的优缺点\",\"1777\":\"v-478d9fb6#iv-lock锁\",\"1778\":\"v-478d9fb6#_1-说明\",\"1779\":\"v-478d9fb6#_2-lock的优点\",\"1780\":\"v-478d9fb6#_3-reentrantlock类\",\"1781\":\"v-478d9fb6#_3-1-构造函数\",\"1782\":\"v-478d9fb6#_3-2-加锁\",\"1783\":\"v-478d9fb6#_3-3-释放锁\",\"1784\":\"v-478d9fb6#_4-使用示例\",\"1785\":\"v-478d9fb6#_5-synchronized与lock的对比\",\"1786\":\"v-478d9fb6#_6-三种线程安全方式的优先使用顺序\",\"1787\":\"v-5bc349e0\",\"1788\":\"v-5bc349e0#_1-死锁介绍\",\"1789\":\"v-5bc349e0#_2-解决方法\",\"1790\":\"v-5bc349e0#_3-死锁示例\",\"1791\":\"v-5bc349e0#_4-死锁产生的具体原因\",\"1792\":\"v-5bc349e0#_4-1-系统资源的竞争\",\"1793\":\"v-5bc349e0#_4-2-进程推进顺序非法\",\"1794\":\"v-5bc349e0#_4-3-总结\",\"1795\":\"v-5bc349e0#_5-死锁的实例-嵌套锁\",\"1796\":\"v-5bc349e0#_5-1-死锁解析\",\"1797\":\"v-5bc349e0#_5-2-锁的补充\",\"1798\":\"v-ebe7d3e8\",\"1799\":\"v-ebe7d3e8#_1-线程通信涉及到的方法\",\"1800\":\"v-ebe7d3e8#_2-wait-使用说明\",\"1801\":\"v-ebe7d3e8#_3-notify-、notifyall-使用说明\",\"1802\":\"v-ebe7d3e8#_4-补充说明\",\"1803\":\"v-ebe7d3e8#_5-sleep-和wait-的异同\",\"1804\":\"v-ebe7d3e8#_6-线程的通信实例\",\"1805\":\"v-559c43b7\",\"1806\":\"v-559c43b7#i-callable接口\",\"1807\":\"v-559c43b7#_1-callable接口介绍\",\"1808\":\"v-559c43b7#_2-future接口介绍\",\"1809\":\"v-559c43b7#_3-使用callable新增线程的步骤\",\"1810\":\"v-559c43b7#_4-示例\",\"1811\":\"v-559c43b7#ii-线程池\",\"1812\":\"v-559c43b7#_1-线程池介绍\",\"1813\":\"v-559c43b7#_2-线程池的优点\",\"1814\":\"v-559c43b7#_3-excutorservice-线程池接口\",\"1815\":\"v-559c43b7#_4-executors-线程池工具类、工厂类\",\"1816\":\"v-559c43b7#_5-使用线程池步骤\",\"1817\":\"v-559c43b7#_6-示例\",\"1818\":\"v-0010529e\",\"1819\":\"v-0010529e#i-集合概述\",\"1820\":\"v-0010529e#_1-集合的由来\",\"1821\":\"v-0010529e#_2-数组在java内存储存方面的特点\",\"1822\":\"v-0010529e#_3-数组在储存数据方面的弊端\",\"1823\":\"v-0010529e#_4-集合的特点\",\"1824\":\"v-0010529e#_5-集合的使用场景\",\"1825\":\"v-0010529e#ii-集合框架\",\"1826\":\"v-0010529e#_1-集合框架的体系\",\"1827\":\"v-0010529e#_2-collection接口继承图\",\"1828\":\"v-0010529e#_3-map接口继承图\",\"1829\":\"v-6fcb2070\",\"1830\":\"v-6fcb2070#说明\",\"1831\":\"v-6fcb2070#实例化\",\"1832\":\"v-6fcb2070#collection接口的方法\",\"1833\":\"v-7f757179\",\"1834\":\"v-7f757179#i-iterator-接口\",\"1835\":\"v-7f757179#_1-迭代器\",\"1836\":\"v-7f757179#_2-iterator方法和iterator对象\",\"1837\":\"v-7f757179#_3-iterator对象\",\"1838\":\"v-7f757179#_4-遍历方法\",\"1839\":\"v-7f757179#_4-1-指针-游标\",\"1840\":\"v-7f757179#_4-2-next\",\"1841\":\"v-7f757179#_4-3-hashnext\",\"1842\":\"v-7f757179#_5-进行遍历\",\"1843\":\"v-7f757179#_5-1-手动遍历【不使用-仅演示】\",\"1844\":\"v-7f757179#_5-2-for循环遍历【不推荐-仅演示】\",\"1845\":\"v-7f757179#_5-3-while-hasnext遍历【推荐】\",\"1846\":\"v-7f757179#_6-迭代器执行的原理\",\"1847\":\"v-7f757179#_7-遍历的注意事项\",\"1848\":\"v-7f757179#_8-remove-移除元素\",\"1849\":\"v-7f757179#ii-增强-for-循环\",\"1850\":\"v-7f757179#_1-介绍\",\"1851\":\"v-7f757179#_2-示例-遍历集合\",\"1852\":\"v-7f757179#_3-示例-遍历数组\",\"1853\":\"v-7f757179#_4-练习-for循环与增强for循环的对比\",\"1854\":\"v-7f757179#_4-1-普通for循环\",\"1855\":\"v-7f757179#_4-2-增强for循环\",\"1856\":\"v-46df710a\",\"1857\":\"v-46df710a#i-list-接口\",\"1858\":\"v-46df710a#_1-介绍\",\"1859\":\"v-46df710a#_2-list接口的实现类\",\"1860\":\"v-46df710a#_2-1-arraylist-【主要使用】\",\"1861\":\"v-46df710a#_2-2-linkedlist\",\"1862\":\"v-46df710a#_2-3-vector\",\"1863\":\"v-46df710a#ii-源码分析\",\"1864\":\"v-46df710a#_1-arraylist源码分析\",\"1865\":\"v-46df710a#_1-1-构造器\",\"1866\":\"v-46df710a#_1-2-add操作\",\"1867\":\"v-46df710a#_1-3-扩容\",\"1868\":\"v-46df710a#_1-4-带参的构造器\",\"1869\":\"v-46df710a#_1-5-jdk8中-arraylist的变化\",\"1870\":\"v-46df710a#_1-6-总结\",\"1871\":\"v-46df710a#_2-linkedlist\",\"1872\":\"v-46df710a#_2-1-实例化\",\"1873\":\"v-46df710a#_2-2-add添加数据\",\"1874\":\"v-46df710a#_2-3-node的定义\",\"1875\":\"v-46df710a#_3-vector\",\"1876\":\"v-46df710a#_3-1-说明\",\"1877\":\"v-46df710a#_3-2-源码简介\",\"1878\":\"v-46df710a#iii-list方法\",\"1879\":\"v-51e29232\",\"1880\":\"v-51e29232#i-set-接口\",\"1881\":\"v-51e29232#_1-介绍\",\"1882\":\"v-51e29232#_2-set数据存储的特点\",\"1883\":\"v-51e29232#_3-hashset【主要实现类】\",\"1884\":\"v-51e29232#_3-1-特点\",\"1885\":\"v-51e29232#_3-2-hashset-集合判断两个元素相等的标准\",\"1886\":\"v-51e29232#_4-linkedhashset【hashset的子类】\",\"1887\":\"v-51e29232#_5-treeset\",\"1888\":\"v-51e29232#_6-set接口的方法\",\"1889\":\"v-51e29232#_7-底层原理-数据的添加过程与底层结构\",\"1890\":\"v-51e29232#_7-1-核心原理\",\"1891\":\"v-51e29232#_7-2-添加过程分析\",\"1892\":\"v-51e29232#_7-3-储存的方式\",\"1893\":\"v-51e29232#_7-4-链表的形式\",\"1894\":\"v-51e29232#_8-hashcode与equals的重写\",\"1895\":\"v-51e29232#_8-1-hahscode\",\"1896\":\"v-51e29232#_8-2-equals\",\"1897\":\"v-51e29232#_8-3-重写原则\",\"1898\":\"v-51e29232#_9-补充-hashcode与值\",\"1899\":\"v-51e29232#_9-1-哈希算法\",\"1900\":\"v-51e29232#_9-2-哈希冲突\",\"1901\":\"v-51e29232#ii-set-使用\",\"1902\":\"v-51e29232#_1-linkedhashset\",\"1903\":\"v-51e29232#_2-treeset\",\"1904\":\"v-51e29232#_2-1-比较对象是否相同的方法\",\"1905\":\"v-51e29232#_2-2-示例-自然排序\",\"1906\":\"v-51e29232#_2-3-示例-定制排序\",\"1907\":\"v-fcb66968\",\"1908\":\"v-fcb66968#i-map-接口\",\"1909\":\"v-fcb66968#_1-概述\",\"1910\":\"v-fcb66968#_2-map接口的继承结构\",\"1911\":\"v-fcb66968#_3-实现类简介\",\"1912\":\"v-fcb66968#_3-1-hashmap【使用频率最高的实现类】\",\"1913\":\"v-fcb66968#_3-2-linkedhashmap\",\"1914\":\"v-fcb66968#_3-3-treemap\",\"1915\":\"v-fcb66968#_3-4-hashtable\",\"1916\":\"v-fcb66968#_3-5-properties\",\"1917\":\"v-fcb66968#_4-map常用方法\",\"1918\":\"v-fcb66968#_5-key-value的储存特点\",\"1919\":\"v-fcb66968#ii-hashmap底层\",\"1920\":\"v-fcb66968#_1-jdk7中底层实现原理\",\"1921\":\"v-fcb66968#_1-1-初始化\",\"1922\":\"v-fcb66968#_1-2-添加数据\",\"1923\":\"v-fcb66968#_1-3-链表的产生\",\"1924\":\"v-fcb66968#_1-4-扩容\",\"1925\":\"v-fcb66968#_1-5-储存结构图\",\"1926\":\"v-fcb66968#_2-jdk8中的底层实现原理\",\"1927\":\"v-fcb66968#_3-源码分析\",\"1928\":\"v-fcb66968#_4-源码中的一些重要常量\",\"1929\":\"v-fcb66968#iii-linkedhashmap\",\"1930\":\"v-fcb66968#_1-底层\",\"1931\":\"v-fcb66968#_2-使用\",\"1932\":\"v-fcb66968#iv-treemap\",\"1933\":\"v-fcb66968#_1-特点\",\"1934\":\"v-fcb66968#_2-排序\",\"1935\":\"v-fcb66968#_2-1-自然排序\",\"1936\":\"v-fcb66968#_2-2-定制排序\",\"1937\":\"v-fcb66968#v-properties\",\"1938\":\"v-fcb66968#_1-定义配置文件\",\"1939\":\"v-fcb66968#_2-properties类的方法\",\"1940\":\"v-fcb66968#_3-读取配置文件-并加载配置信息\",\"1941\":\"v-f6d6ac5c\",\"1942\":\"v-f6d6ac5c#介绍\",\"1943\":\"v-f6d6ac5c#静态方法\",\"1944\":\"v-659e9238\",\"1945\":\"v-659e9238#i-generic-泛型\",\"1946\":\"v-659e9238#意义\",\"1947\":\"v-659e9238#_1-泛型的设计背景\",\"1948\":\"v-659e9238#_2-泛型的概念\",\"1949\":\"v-659e9238#_3-为什么要有泛型\",\"1950\":\"v-659e9238#_3-1-解决元素安全性问题\",\"1951\":\"v-659e9238#_3-2-解决获取元素时强制类型转换的问题\",\"1952\":\"v-659e9238#_4-集合中的泛型\",\"1953\":\"v-659e9238#_4-1-没有泛型时\",\"1954\":\"v-659e9238#_4-2-有泛型时\",\"1955\":\"v-659e9238#_5-不使用泛型的缺点\",\"1956\":\"v-659e9238#ii-集合中使用泛型\",\"1957\":\"v-659e9238#_1-使用示例-list集合\",\"1958\":\"v-659e9238#_2-使用示例-map集合\",\"1959\":\"v-659e9238#_3-使用总结\",\"1960\":\"v-2f92b158\",\"1961\":\"v-2f92b158#i-自定义泛型类\",\"1962\":\"v-2f92b158#_1-语法\",\"1963\":\"v-2f92b158#_1-1-声明泛型接口和泛型类\",\"1964\":\"v-2f92b158#_1-2-泛型类的实例化\",\"1965\":\"v-2f92b158#_1-3-泛型类的构造器\",\"1966\":\"v-2f92b158#_2-示例-自定义泛型类\",\"1967\":\"v-2f92b158#_2-1-定义泛型类\",\"1968\":\"v-2f92b158#_2-2-实例化泛型类\",\"1969\":\"v-2f92b158#_3-自定义泛型类-接口-的注意事项\",\"1970\":\"v-2f92b158#_4-继承泛型类\",\"1971\":\"v-2f92b158#_4-1-不保留泛型-擦除泛型\",\"1972\":\"v-2f92b158#_4-2-不保留泛型-指定父类泛型具体类型\",\"1973\":\"v-2f92b158#_4-3-保留泛型-全部保留\",\"1974\":\"v-2f92b158#_4-4-保留泛型-部分保留\",\"1975\":\"v-2f92b158#ii-自定义泛型方法\",\"1976\":\"v-2f92b158#_1-定义\",\"1977\":\"v-2f92b158#注意\",\"1978\":\"v-2f92b158#_2-误区\",\"1979\":\"v-2f92b158#_3-标识符\",\"1980\":\"v-2f92b158#_4-语法\",\"1981\":\"v-2f92b158#_5-示例\",\"1982\":\"v-2f92b158#_6-静态化\",\"1983\":\"v-0d8e7fcb\",\"1984\":\"v-0d8e7fcb#i-继承里的泛型\",\"1985\":\"v-0d8e7fcb#_1-不同泛型的类-不具备父子关系-不能互相赋值\",\"1986\":\"v-0d8e7fcb#_2-相同泛型的父子类-具有继承关系\",\"1987\":\"v-0d8e7fcb#_3-总结\",\"1988\":\"v-0d8e7fcb#ii-通配符的使用\",\"1989\":\"v-0d8e7fcb#_1-通配符\",\"1990\":\"v-0d8e7fcb#_2-使用通配符\",\"1991\":\"v-0d8e7fcb#_2-1-赋值\",\"1992\":\"v-0d8e7fcb#_2-2-添加数据\",\"1993\":\"v-0d8e7fcb#_2-3-获取数据\",\"1994\":\"v-0d8e7fcb#_3-方法的使用示例\",\"1995\":\"v-0d8e7fcb#_3-1-不使用通配符泛型\",\"1996\":\"v-0d8e7fcb#_3-2-使用通配符泛型\",\"1997\":\"v-0d8e7fcb#_3-3-总结\",\"1998\":\"v-0d8e7fcb#_4-有限制条件的通配符\",\"1999\":\"v-0d8e7fcb#_4-1-extends-上限\",\"2000\":\"v-0d8e7fcb#_4-2-super-下限\",\"2001\":\"v-0d8e7fcb#_4-3-示例\",\"2002\":\"v-0d8e7fcb#_5-注意事项\",\"2003\":\"v-0d8e7fcb#_5-1-不能用在泛型方法声明上\",\"2004\":\"v-0d8e7fcb#_5-2-不能用在泛型类的声明上\",\"2005\":\"v-0d8e7fcb#_5-3-不能用在创建对象上\",\"2006\":\"v-365b9755\",\"2007\":\"v-365b9755#i-file-类\",\"2008\":\"v-365b9755#_1-类介绍\",\"2009\":\"v-365b9755#_2-file的作用\",\"2010\":\"v-365b9755#_3-file类与文件\",\"2011\":\"v-365b9755#_4-路径分隔符\",\"2012\":\"v-365b9755#_4-1-路径分隔符和系统有关\",\"2013\":\"v-365b9755#_4-2-分隔符常量\",\"2014\":\"v-365b9755#_5-file-常用构造器\",\"2015\":\"v-365b9755#_5-1-public-file-string-pathname\",\"2016\":\"v-365b9755#_5-2-public-file-string-parent-string-child\",\"2017\":\"v-365b9755#_5-3-public-file-file-parent-string-child\",\"2018\":\"v-365b9755#_6-创建硬盘文件\",\"2019\":\"v-365b9755#ii-file-常用方法\",\"2020\":\"v-6a074025\",\"2021\":\"v-6a074025#_1-io简介\",\"2022\":\"v-6a074025#_2-java-io原理\",\"2023\":\"v-6a074025#_3-流的分类\",\"2024\":\"v-6a074025#_4-抽象基类\",\"2025\":\"v-6a074025#_5-io流体系\",\"2026\":\"v-6a074025#_6-节点流和处理流\",\"2027\":\"v-6a074025#_6-1-节点流\",\"2028\":\"v-6a074025#_6-2-处理流\",\"2029\":\"v-f4c0423a\",\"2030\":\"v-f4c0423a#说明\",\"2031\":\"v-f4c0423a#_1-输入流-inputstream-reader\",\"2032\":\"v-f4c0423a#_1-1-inputstream\",\"2033\":\"v-f4c0423a#_1-2-reader\",\"2034\":\"v-f4c0423a#_2-输出流-outputstream-writer\",\"2035\":\"v-f4c0423a#_2-1-outputstream\",\"2036\":\"v-f4c0423a#_2-2-writer\",\"2037\":\"v-f4c0423a#_3-关闭流\",\"2038\":\"v-f4c0423a#_4-字节流与字符流的选择\",\"2039\":\"v-f4c0423a#_5-节点流\",\"2040\":\"v-f4c0423a#_6-流操作的基本步骤\",\"2041\":\"v-f4c0423a#_7-输入流与输出流的方法\",\"2042\":\"v-495f7ca6\",\"2043\":\"v-495f7ca6#i-节点流介绍\",\"2044\":\"v-495f7ca6#_1-节点流的方法\",\"2045\":\"v-495f7ca6#_2-注意点\",\"2046\":\"v-495f7ca6#ii-filereader\",\"2047\":\"v-495f7ca6#_1-filereader的操作\",\"2048\":\"v-495f7ca6#_1-1-初始化-创建流对象\",\"2049\":\"v-495f7ca6#_1-2-read-数据读入\",\"2050\":\"v-495f7ca6#_1-3-close-关闭流\",\"2051\":\"v-495f7ca6#_2-filereader的异常处理\",\"2052\":\"v-495f7ca6#_3-filereader示例-文本文件读取\",\"2053\":\"v-495f7ca6#_4-一次读取多个字符\",\"2054\":\"v-495f7ca6#_4-1-代码解析\",\"2055\":\"v-495f7ca6#_4-2-通过string输出char数组\",\"2056\":\"v-495f7ca6#_4-3-误区\",\"2057\":\"v-495f7ca6#iii-filewriter\",\"2058\":\"v-495f7ca6#说明\",\"2059\":\"v-495f7ca6#_1-相关操作-详见流的基类\",\"2060\":\"v-495f7ca6#_1-1-初始化-开启流\",\"2061\":\"v-495f7ca6#_1-2-write-数据写出\",\"2062\":\"v-495f7ca6#_1-3-close-资源关闭\",\"2063\":\"v-495f7ca6#_2-异常处理\",\"2064\":\"v-495f7ca6#_3-filewriter写出示例\",\"2065\":\"v-495f7ca6#_4-filereader与filewriter结合示例-文件的复制\",\"2066\":\"v-495f7ca6#_5-处理图片资源\",\"2067\":\"v-495f7ca6#iv-字节流\",\"2068\":\"v-495f7ca6#说明-1\",\"2069\":\"v-495f7ca6#_1-初始化\",\"2070\":\"v-495f7ca6#_2-基本操作\",\"2071\":\"v-495f7ca6#_3-示例-创建copy方法-进行文件的复制\",\"2072\":\"v-12515210\",\"2073\":\"v-12515210#i-介绍\",\"2074\":\"v-12515210#原理和使用\",\"2075\":\"v-12515210#ii-缓冲流的类\",\"2076\":\"v-12515210#_1-字节流-读入\",\"2077\":\"v-12515210#_2-字节流-写出\",\"2078\":\"v-12515210#_3-字符流-读入\",\"2079\":\"v-12515210#_4-字符流-写出\",\"2080\":\"v-12515210#iii-基本操作\",\"2081\":\"v-12515210#_1-基本操作方法\",\"2082\":\"v-12515210#_2-readline-读取一行-bufferedreader\",\"2083\":\"v-12515210#_3-newline-输入换行符-bufferedwriter\",\"2084\":\"v-12515210#_4-缓冲流-字节流-使用示例\",\"2085\":\"v-12515210#_5-缓冲流-字符流-使用示例\",\"2086\":\"v-12515210#_6-效率测试\",\"2087\":\"v-3a91a2c3\",\"2088\":\"v-3a91a2c3#i-转换流介绍\",\"2089\":\"v-3a91a2c3#_1-说明\",\"2090\":\"v-3a91a2c3#_2-转换流的类\",\"2091\":\"v-3a91a2c3#_3-作用\",\"2092\":\"v-3a91a2c3#_4-使用说明\",\"2093\":\"v-3a91a2c3#ii-inputstreamreader\",\"2094\":\"v-3a91a2c3#说明\",\"2095\":\"v-3a91a2c3#_1-构造器1-不指定字符集\",\"2096\":\"v-3a91a2c3#_2-构造器2-指定字符集\",\"2097\":\"v-3a91a2c3#_3-主要方法\",\"2098\":\"v-3a91a2c3#_3-1-read\",\"2099\":\"v-3a91a2c3#_3-2-getencoding\",\"2100\":\"v-3a91a2c3#_3-3-close\",\"2101\":\"v-3a91a2c3#_4-使用示例\",\"2102\":\"v-3a91a2c3#iii-outputstreamwriter\",\"2103\":\"v-3a91a2c3#_1-构造器1-不指定字符集-1\",\"2104\":\"v-3a91a2c3#_2-构造器2-指定字符集-1\",\"2105\":\"v-3a91a2c3#_3-主要方法-1\",\"2106\":\"v-3a91a2c3#_4-综合示例-对文本文件进行转码\",\"2107\":\"v-3a91a2c3#iv-补充-字符集\",\"2108\":\"v-3a91a2c3#_1-编码表的由来\",\"2109\":\"v-3a91a2c3#_2-常见编码集\",\"2110\":\"v-3a91a2c3#_3-编码原理\",\"2111\":\"v-3a91a2c3#_4-unicode与utf-8的由来\",\"2112\":\"v-3a91a2c3#_5-utf-8的原理\",\"2113\":\"v-3a91a2c3#_6-总结\",\"2114\":\"v-2b0e0704\",\"2115\":\"v-2b0e0704#i-标准流\",\"2116\":\"v-2b0e0704#_1-system-in与system-out\",\"2117\":\"v-2b0e0704#_2-重定向\",\"2118\":\"v-2b0e0704#_3-示例-标准输入流、输出流的练习\",\"2119\":\"v-2b0e0704#ii-打印流\",\"2120\":\"v-2b0e0704#_1-printstream和printwriter\",\"2121\":\"v-2b0e0704#_2-示例-将基本数据类型输出到一个文件\",\"2122\":\"v-2b0e0704#iii-数据流\",\"2123\":\"v-2b0e0704#_1-数据流的类\",\"2124\":\"v-2b0e0704#_2-datainputstream中的方法\",\"2125\":\"v-2b0e0704#_3-dataoutputstream中的方法\",\"2126\":\"v-2b0e0704#_4-dataoutputstream-使用示例\",\"2127\":\"v-2b0e0704#_5-datainputstream-使用示例\",\"2128\":\"v-2b0e0704#iv-随机存储文件流\",\"2129\":\"v-2b0e0704#_1-随机访问机制\",\"2130\":\"v-2b0e0704#_2-记录指针与相关方法\",\"2131\":\"v-2b0e0704#_2-1-getfilepointer方法\",\"2132\":\"v-2b0e0704#_2-2-seek方法\",\"2133\":\"v-2b0e0704#_3-构造器与mode参数\",\"2134\":\"v-2b0e0704#_3-1-mode\",\"2135\":\"v-2b0e0704#_3-2-r模式与rw模式\",\"2136\":\"v-2b0e0704#_4-使用示例-copy文件\",\"2137\":\"v-2b0e0704#_5-使用指针\",\"2138\":\"v-2b0e0704#_5-1-实现追加和插入效果\",\"2139\":\"v-2b0e0704#_5-2-示例-在指针位置进行写入\",\"2140\":\"v-2b0e0704#_6-断点续传\",\"2141\":\"v-11e78490\",\"2142\":\"v-11e78490#介绍\",\"2143\":\"v-11e78490#_1-序列化与反序列化\",\"2144\":\"v-11e78490#_2-对象的序列化机制\",\"2145\":\"v-11e78490#_3-一些操作\",\"2146\":\"v-11e78490#_3-1-初始化\",\"2147\":\"v-11e78490#_3-2-writeobject\",\"2148\":\"v-11e78490#_3-3-readobject\",\"2149\":\"v-11e78490#_3-4-flush\",\"2150\":\"v-11e78490#_4-示例-字符串的序列化和反序列化\",\"2151\":\"v-11e78490#_4-1-序列化\",\"2152\":\"v-11e78490#_4-2-反序列化\",\"2153\":\"v-11e78490#_5-序列化类-需要满足的要求\",\"2154\":\"v-11e78490#_6-示例-自定义类实线序列化与反序列化\",\"2155\":\"v-11e78490#_6-1-目标类\",\"2156\":\"v-11e78490#_6-2-序列化\",\"2157\":\"v-11e78490#_6-3-反序列化\",\"2158\":\"v-11e78490#_7-serialversionuid\",\"2159\":\"v-00565ee0\",\"2160\":\"v-00565ee0#i-nio2\",\"2161\":\"v-00565ee0#_1-java-nio概述\",\"2162\":\"v-00565ee0#_2-nio-2-概述\",\"2163\":\"v-00565ee0#_3-核心api\",\"2164\":\"v-00565ee0#_3-1-path接口\",\"2165\":\"v-00565ee0#_3-2-paths和files工具类\",\"2166\":\"v-00565ee0#_4-path接口常用方法\",\"2167\":\"v-00565ee0#_5-paths类的方法\",\"2168\":\"v-00565ee0#_6-files类常用方法\",\"2169\":\"v-00565ee0#ii-第三方jar包\",\"2170\":\"v-25f158ce\",\"2171\":\"v-25f158ce#简介\",\"2172\":\"v-25f158ce#_1-网络基础\",\"2173\":\"v-25f158ce#_2-网络通信的要素\",\"2174\":\"v-25f158ce#_3-如何实现网络通信\",\"2175\":\"v-25f158ce#_4-网络通信协议\",\"2176\":\"v-25f158ce#_5-通信过程\",\"2177\":\"v-1399e2a7\",\"2178\":\"v-1399e2a7#i-ip与端口号\",\"2179\":\"v-1399e2a7#_1-hostaddress-ip地址介绍\",\"2180\":\"v-1399e2a7#_2-ip地址分类\",\"2181\":\"v-1399e2a7#_2-1-分类方式1-ipv4和ipv6\",\"2182\":\"v-1399e2a7#_2-2-分类方式2-公网地址和私有地址\",\"2183\":\"v-1399e2a7#_3-本机ip\",\"2184\":\"v-1399e2a7#_4-hostname-域名\",\"2185\":\"v-1399e2a7#_5-端口号\",\"2186\":\"v-1399e2a7#_6-端口分类\",\"2187\":\"v-1399e2a7#_7-socket\",\"2188\":\"v-1399e2a7#ii-inetaddress类\",\"2189\":\"v-1399e2a7#readme\",\"2190\":\"v-1399e2a7#_1-介绍\",\"2191\":\"v-1399e2a7#_2-构造器\",\"2192\":\"v-1399e2a7#_2-1-getlocalhost-获得本地ip对象\",\"2193\":\"v-1399e2a7#_2-2-getbyname\",\"2194\":\"v-1399e2a7#_3-gethostaddress\",\"2195\":\"v-1399e2a7#_4-gethostname-获取ip地址的主机名\",\"2196\":\"v-1399e2a7#_5-isreachable-测试是否可以达到该地址\",\"2197\":\"v-3971b80d\",\"2198\":\"v-3971b80d#i-网络通信协议\",\"2199\":\"v-3971b80d#_1-网络通信协议\",\"2200\":\"v-3971b80d#_2-通信协议的分层\",\"2201\":\"v-3971b80d#ii-tcp与udp\",\"2202\":\"v-3971b80d#_1-传输层协议\",\"2203\":\"v-3971b80d#_2-tcp-ip-协议簇\",\"2204\":\"v-3971b80d#_3-tcp协议\",\"2205\":\"v-3971b80d#_4-udp协议\",\"2206\":\"v-3971b80d#_5-tcp的三次握手\",\"2207\":\"v-3971b80d#_6-tcp的四次挥手\",\"2208\":\"v-7c301910\",\"2209\":\"v-7c301910#_1-说明\",\"2210\":\"v-7c301910#_2-socket分类\",\"2211\":\"v-7c301910#_3-socket类常用构造器\",\"2212\":\"v-7c301910#_3-1-根据ip创建\",\"2213\":\"v-7c301910#_3-2-根据host创建\",\"2214\":\"v-7c301910#_4-socket类常用方法\",\"2215\":\"v-0320aed6\",\"2216\":\"v-0320aed6#_1-基于socket的tcp编程\",\"2217\":\"v-0320aed6#_2-客户端socket\",\"2218\":\"v-0320aed6#_3-客户端创建socket对象\",\"2219\":\"v-0320aed6#_3-1-socket的构造器\",\"2220\":\"v-0320aed6#_3-2-示例\",\"2221\":\"v-0320aed6#_4-服务器端socket\",\"2222\":\"v-0320aed6#_5-服务器端建立serversocket\",\"2223\":\"v-0320aed6#_5-1-创建serversocket对象\",\"2224\":\"v-0320aed6#_5-2-accept方法\",\"2225\":\"v-0320aed6#_5-3-使用示例\",\"2226\":\"v-0320aed6#_6-tcp网络编程示例\",\"2227\":\"v-79fb5655\",\"2228\":\"v-79fb5655#i-udp网络编程\",\"2229\":\"v-79fb5655#_1-udp网络通信\",\"2230\":\"v-79fb5655#_2-udp通信流程\",\"2231\":\"v-79fb5655#_3-发送端示例\",\"2232\":\"v-79fb5655#_4-接收端示例\",\"2233\":\"v-79fb5655#ii-datagramsocket\",\"2234\":\"v-79fb5655#iii-datagrampacket\",\"2235\":\"v-952b4f74\",\"2236\":\"v-952b4f74#_1-url介绍\",\"2237\":\"v-952b4f74#_2-url的基本结构\",\"2238\":\"v-952b4f74#_3-url类\",\"2239\":\"v-952b4f74#_4-url类常用方法\",\"2240\":\"v-952b4f74#_5-urlconnection\",\"2241\":\"v-952b4f74#_5-1-urlconnection的创建\",\"2242\":\"v-952b4f74#_5-2-交互方法\",\"2243\":\"v-952b4f74#_6-uri、url和urn的区别\",\"2244\":\"v-952b4f74#_7-小结\",\"2245\":\"v-679946d5\",\"2246\":\"v-679946d5#reflection-反射机制\",\"2247\":\"v-679946d5#_1-动态语言与静态语言\",\"2248\":\"v-679946d5#_2-class与反射工作原理\",\"2249\":\"v-679946d5#_3-反射机制提供的功能\",\"2250\":\"v-679946d5#_4-反射相关api\",\"2251\":\"v-679946d5#_5-反射的动态性\",\"2252\":\"v-679946d5#_5-1-示例\",\"2253\":\"v-679946d5#_5-2-补充说明\",\"2254\":\"v-679946d5#_6-反射机制使用示例-仅体验\",\"2255\":\"v-679946d5#_6-1-创建test类-person\",\"2256\":\"v-679946d5#_6-2-不使用反射-对person的操作\",\"2257\":\"v-679946d5#_6-3-使用反射-操作person\",\"2258\":\"v-679946d5#_6-4-使用反射-操作person私有成员\",\"2259\":\"v-3fce3636\",\"2260\":\"v-3fce3636#_1-class类\",\"2261\":\"v-3fce3636#_2-class与类的加载\",\"2262\":\"v-3fce3636#_3-使用class的本质\",\"2263\":\"v-3fce3636#_4-class的特点\",\"2264\":\"v-3fce3636#_5-可以有class对象的元素\",\"2265\":\"v-3fce3636#_6-获取class类的实例\",\"2266\":\"v-3fce3636#_6-1-调用运行时类的属性-class\",\"2267\":\"v-3fce3636#_6-2-通过运行时类的对象-调用getclass\",\"2268\":\"v-3fce3636#_6-3-调用class的静态方法-forname-string-classpath-【常用】\",\"2269\":\"v-3fce3636#_6-4-使用类的加载器-classloader-了解\",\"2270\":\"v-3fce3636#_7-class类的常用方法\",\"2271\":\"v-2fee7965\",\"2272\":\"v-2fee7965#i-类的加载\",\"2273\":\"v-2fee7965#_1-类的初始化\",\"2274\":\"v-2fee7965#_1-1-load-类的加载\",\"2275\":\"v-2fee7965#_1-2-link-类的链接\",\"2276\":\"v-2fee7965#_1-3-initialize-类的初始化\",\"2277\":\"v-2fee7965#_2-类初始化的时机\",\"2278\":\"v-2fee7965#ii-classloader\",\"2279\":\"v-2fee7965#_1-类加载器\",\"2280\":\"v-2fee7965#_2-加载器获取\",\"2281\":\"v-2fee7965#_3-getresourceasstream-获取类路径下的指定文件的输入流\",\"2282\":\"v-2fee7965#_4-使用classloader加载配置文件\",\"2283\":\"v-3b69e562\",\"2284\":\"v-3b69e562#i-运行时类的对象\",\"2285\":\"v-3b69e562#_1-newinstance-通过反射创建对应的运行时类的对象\",\"2286\":\"v-3b69e562#_2-getdeclaredconstructor\",\"2287\":\"v-3b69e562#_3-获取运行时类的完整结构\",\"2288\":\"v-3b69e562#ii-获取属性结构\",\"2289\":\"v-3b69e562#_1-getfields-获取自己和父类所有public属性\",\"2290\":\"v-3b69e562#输出结果\",\"2291\":\"v-3b69e562#_2-getdeclarefields-获取所有自己所有权限的属性\",\"2292\":\"v-3b69e562#遍历结果\",\"2293\":\"v-3b69e562#_3-获取属性的结构\",\"2294\":\"v-3b69e562#iii-获取方法结构\",\"2295\":\"v-3b69e562#_1-获取运行时类的方法\",\"2296\":\"v-3b69e562#_2-获取运行时方法的结构\",\"2297\":\"v-3b69e562#iv-获取其他信息\",\"2298\":\"v-3b69e562#_1-获取运行时类的构造器结构\",\"2299\":\"v-3b69e562#_2-getsuperclass-获取运行时类的父类\",\"2300\":\"v-3b69e562#_3-getgenericsuperclass-获取运行时类的父类的泛型\",\"2301\":\"v-3b69e562#getactualtypearguments-获取运行时类的父类的泛型\",\"2302\":\"v-3b69e562#_4-getinterfaces-获取运行时类实现的接口\",\"2303\":\"v-3b69e562#_5-getpackage-获取运行时类所在的包\",\"2304\":\"v-3b69e562#_6-getannotations-获取运行时类声明的注解\",\"2305\":\"v-3b69e562#v-调用指定结构\",\"2306\":\"v-3b69e562#_1-调用属性\",\"2307\":\"v-3b69e562#_1-1-getfield-获取属性【一般不用】\",\"2308\":\"v-3b69e562#_1-2getdeclaredfield-获取属性\",\"2309\":\"v-3b69e562#_1-3get-获取属性值\",\"2310\":\"v-3b69e562#_1-4set-设置属性值\",\"2311\":\"v-3b69e562#_2-调用方法\",\"2312\":\"v-3b69e562#_2-1-getdeclaredmethod-获取指定的某个方法\",\"2313\":\"v-3b69e562#_2-2-getmethod-获取指定的某个方法【一般不用】\",\"2314\":\"v-3b69e562#_2-3-invoke-执行invoke\",\"2315\":\"v-3b69e562#_3-调用构造器\",\"2316\":\"v-3b69e562#getdeclaredconstructor-获取指定的构造器\",\"2317\":\"v-3b69e562#_4-setaccessible-允许操作封装的类结构\",\"2318\":\"v-7e149adb\",\"2319\":\"v-7e149adb#i-动态代理\",\"2320\":\"v-7e149adb#_1-代理设计模式\",\"2321\":\"v-7e149adb#例子\",\"2322\":\"v-7e149adb#_2-静态代理\",\"2323\":\"v-7e149adb#_2-1-示例\",\"2324\":\"v-7e149adb#_2-2-缺点\",\"2325\":\"v-7e149adb#_3-动态代理介绍\",\"2326\":\"v-7e149adb#_4-静态代理示例\",\"2327\":\"v-7e149adb#_4-1-接口\",\"2328\":\"v-7e149adb#_4-2-代理类\",\"2329\":\"v-7e149adb#_4-3-被代理类\",\"2330\":\"v-7e149adb#_4-4-使用\",\"2331\":\"v-7e149adb#ii-动态代理使用\",\"2332\":\"v-7e149adb#_1-需求\",\"2333\":\"v-7e149adb#_2-逻辑链条\",\"2334\":\"v-7e149adb#_2-1-特点\",\"2335\":\"v-7e149adb#_2-2-针对不通的方法进行增强\",\"2336\":\"v-7e149adb#_3-相关api\",\"2337\":\"v-7e149adb#_3-1-proxy-所有动态代理类的父类\",\"2338\":\"v-7e149adb#_3-2-proxy-newproxyinstance\",\"2339\":\"v-7e149adb#_3-3-invocationhandler-调用被代理类方法的接口\",\"2340\":\"v-7e149adb#_3-4-invocationhandler-invoke-调用被代理类方法的方法\",\"2341\":\"v-7e149adb#_4-代理类代码分析\",\"2342\":\"v-7e149adb#_4-1-代理类\",\"2343\":\"v-7e149adb#_4-2-代理类-proxy-newproxyinstance的参数3\",\"2344\":\"v-7e149adb#_4-3-使用示例\",\"2345\":\"v-7e149adb#_4-4-代理流程分析\",\"2346\":\"v-7e149adb#_5-aop与动态代理\",\"2347\":\"v-7e149adb#_5-1-aop-aspect-orient-programming\",\"2348\":\"v-7e149adb#_5-2-aop代理\",\"2349\":\"v-7e149adb#_5-3-示例\",\"2350\":\"v-66593afe\",\"2351\":\"v-66593afe#_1-版本说明\",\"2352\":\"v-66593afe#_2-lts\",\"2353\":\"v-66593afe#_3-java安装\",\"2354\":\"v-66593afe#_4-配置idea\",\"2355\":\"v-66593afe#_5-idea-多版本切换\",\"2356\":\"v-66593afe#_6-jdk与language-level\",\"2357\":\"v-a6f71656\",\"2358\":\"v-a6f71656#i-lambda表达式\",\"2359\":\"v-a6f71656#_1-简介\",\"2360\":\"v-a6f71656#_2-lambda本质\",\"2361\":\"v-a6f71656#_3-应用场景\",\"2362\":\"v-a6f71656#_4-格式\",\"2363\":\"v-a6f71656#_4-1-一定省略的内容\",\"2364\":\"v-a6f71656#_4-2-特殊情况下省略的内容\",\"2365\":\"v-a6f71656#_5-类型推断\",\"2366\":\"v-a6f71656#_6-语法总结\",\"2367\":\"v-a6f71656#ii-lambda的使用\",\"2368\":\"v-a6f71656#_1-示例-无参、无return\",\"2369\":\"v-a6f71656#示例-runnable接口的run函数\",\"2370\":\"v-a6f71656#_2-格式2-1参、无return\",\"2371\":\"v-a6f71656#示例-consumer接口的accept方法\",\"2372\":\"v-a6f71656#_3-格式3-省略数据类型\",\"2373\":\"v-a6f71656#示例-见格式2精简模式\",\"2374\":\"v-a6f71656#_4-格式4-省略1参的小括号\",\"2375\":\"v-a6f71656#示例-见格式2示例的\",\"2376\":\"v-a6f71656#_5-格式5-多参、多执行语句\",\"2377\":\"v-a6f71656#示例-comparator接口-compare方法\",\"2378\":\"v-a6f71656#_6-省略\",\"2379\":\"v-1d2bd89a\",\"2380\":\"v-1d2bd89a#i-函数式接口\",\"2381\":\"v-1d2bd89a#functional-的意义\",\"2382\":\"v-1d2bd89a#_1-functional-介绍\",\"2383\":\"v-1d2bd89a#函数式接口的特点\",\"2384\":\"v-1d2bd89a#如何使用函数式接口\",\"2385\":\"v-1d2bd89a#函数式接口要定义多少\",\"2386\":\"v-1d2bd89a#内置函数式接口\",\"2387\":\"v-1d2bd89a#_2-注解\",\"2388\":\"v-1d2bd89a#_3-自定义函数式接口\",\"2389\":\"v-1d2bd89a#_4-lambda与创建functional对象\",\"2390\":\"v-1d2bd89a#_5-缺点\",\"2391\":\"v-1d2bd89a#ii-内置functional\",\"2392\":\"v-1d2bd89a#_1-java内置四大核心functional\",\"2393\":\"v-1d2bd89a#_2-其他类型functional\",\"2394\":\"v-377171aa\",\"2395\":\"v-377171aa#i-方法引用介绍\",\"2396\":\"v-377171aa#_1-定义\",\"2397\":\"v-377171aa#_2-使用情景\",\"2398\":\"v-377171aa#_3-语法格式\",\"2399\":\"v-377171aa#解析\",\"2400\":\"v-377171aa#_4-使用要求\",\"2401\":\"v-377171aa#ii-方法引用示例\",\"2402\":\"v-377171aa#_1-示例1-情况1-对象-非静态方法\",\"2403\":\"v-377171aa#_1-1-lambda表达式写法\",\"2404\":\"v-377171aa#_1-2-方法引用写法\",\"2405\":\"v-377171aa#_2-示例2-情况1-对象-非静态方法-自定义类\",\"2406\":\"v-377171aa#_2-1-lambda表达式\",\"2407\":\"v-377171aa#_2-2-方法引用\",\"2408\":\"v-377171aa#_3-示例3-情况二-类-静态方法\",\"2409\":\"v-377171aa#_3-1-lambda\",\"2410\":\"v-377171aa#_3-2-方法引用\",\"2411\":\"v-377171aa#_4-示例4-情况三-类-实例方法\",\"2412\":\"v-377171aa#_4-1-lambda\",\"2413\":\"v-377171aa#_4-2-方法引用\",\"2414\":\"v-377171aa#_5-示例5-情况三-类-实例方法-自定义类\",\"2415\":\"v-377171aa#_5-1-lambda\",\"2416\":\"v-377171aa#_5-2-方法引用\",\"2417\":\"v-377171aa#iii-构造器引用\",\"2418\":\"v-377171aa#_1-使用条件\",\"2419\":\"v-377171aa#_2-语法格式\",\"2420\":\"v-377171aa#_3-示例1-空参构造器\",\"2421\":\"v-377171aa#_3-1-lambda-1\",\"2422\":\"v-377171aa#_3-2-构造器引用\",\"2423\":\"v-377171aa#_4-示例2-单参构造器\",\"2424\":\"v-377171aa#_4-1-lambda-1\",\"2425\":\"v-377171aa#_4-2-构造器引用\",\"2426\":\"v-377171aa#_5-示例3-多参构造器\",\"2427\":\"v-377171aa#_5-1-lambda-1\",\"2428\":\"v-377171aa#_5-2-构造器引用\",\"2429\":\"v-377171aa#iv-数组引用\",\"2430\":\"v-377171aa#_1-语法格式\",\"2431\":\"v-377171aa#_2-示例\",\"2432\":\"v-377171aa#_2-1-lambda\",\"2433\":\"v-377171aa#_2-2-构造器引用\",\"2434\":\"v-3e82f83f\",\"2435\":\"v-3e82f83f#i-stream-api\",\"2436\":\"v-3e82f83f#_1-stream-api-说明\",\"2437\":\"v-3e82f83f#_2-stream-api使用背景\",\"2438\":\"v-3e82f83f#_3-stream的本质\",\"2439\":\"v-3e82f83f#stream-和-collection-集合的区别\",\"2440\":\"v-3e82f83f#_4-stream的操作步骤\",\"2441\":\"v-3e82f83f#_5-stream的特点\",\"2442\":\"v-3e82f83f#ii-stream-实例化\",\"2443\":\"v-3e82f83f#_1-通过集合创建stream\",\"2444\":\"v-3e82f83f#_1-1-顺序流\",\"2445\":\"v-3e82f83f#_1-2-并行流\",\"2446\":\"v-3e82f83f#_2-通过数组创建stream\",\"2447\":\"v-3e82f83f#重载形式\",\"2448\":\"v-3e82f83f#_3-通过stream的of-创建stream\",\"2449\":\"v-3e82f83f#_4-创建无限流stream【了解】\",\"2450\":\"v-3e82f83f#_4-1-迭代\",\"2451\":\"v-3e82f83f#_4-2-生成\",\"2452\":\"v-3e82f83f#iii-stream-的操作\",\"2453\":\"v-3e82f83f#_1-中间操作说明\",\"2454\":\"v-3e82f83f#_2-总结操作的方法\",\"2455\":\"v-3e82f83f#_3-终止操作说明\",\"2456\":\"v-3e82f83f#_4-终止操作的方法\",\"2457\":\"v-3e82f83f#iv-筛选与切片\",\"2458\":\"v-3e82f83f#_1-filter-筛选\",\"2459\":\"v-3e82f83f#_2-distinct-去重\",\"2460\":\"v-3e82f83f#_3-limit-截断\",\"2461\":\"v-3e82f83f#_4-skip-跳过\",\"2462\":\"v-3e82f83f#v-映射\",\"2463\":\"v-3e82f83f#_1-map\",\"2464\":\"v-3e82f83f#_1-1-maptodouble\",\"2465\":\"v-3e82f83f#_1-2-maptoint\",\"2466\":\"v-3e82f83f#_1-3-maptolong\",\"2467\":\"v-3e82f83f#_2-flatmap\",\"2468\":\"v-3e82f83f#_3-map和flatmap的对比示例、\",\"2469\":\"v-3e82f83f#_3-1-素材\",\"2470\":\"v-3e82f83f#_3-2-map的使用\",\"2471\":\"v-3e82f83f#_3-3-flatmap\",\"2472\":\"v-3e82f83f#_3-4-总结\",\"2473\":\"v-3e82f83f#vi-排序\",\"2474\":\"v-3e82f83f#_1-sorted-自然排序\",\"2475\":\"v-3e82f83f#_2-sorted-comparator-com-定制排序\",\"2476\":\"v-3e82f83f#vii-匹配与查找\",\"2477\":\"v-3e82f83f#_1-allmatch-检查是否匹配所有元素\",\"2478\":\"v-3e82f83f#_2-anymatch-检查是否至少匹配一个元素\",\"2479\":\"v-3e82f83f#_3-nonematch-检查是否没有匹配任何元素\",\"2480\":\"v-3e82f83f#_4-findfirst-返回第一个元素\",\"2481\":\"v-3e82f83f#_5-findany-返回当前流中任意元素\",\"2482\":\"v-3e82f83f#_6-count-返回流中元素总数\",\"2483\":\"v-3e82f83f#_7-max-返回流中最大值\",\"2484\":\"v-3e82f83f#_8-min-返回流中最小值\",\"2485\":\"v-3e82f83f#_9-foreach-内部迭代\",\"2486\":\"v-3e82f83f#viii-归约与收集\",\"2487\":\"v-3e82f83f#_1-reduce-归约\",\"2488\":\"v-3e82f83f#_1-1-reduce-binaryoperator-b\",\"2489\":\"v-3e82f83f#_1-2-map-reduce模式\",\"2490\":\"v-3e82f83f#_2-收集\",\"2491\":\"v-3e82f83f#collectors\",\"2492\":\"v-3e82f83f#collectors的方法\",\"2493\":\"v-3611b120\",\"2494\":\"v-3611b120#i-optional-介绍\",\"2495\":\"v-3611b120#_1-介绍\",\"2496\":\"v-3611b120#_2-产生背景\",\"2497\":\"v-3611b120#_3-应用场景\",\"2498\":\"v-3611b120#ii-optional常用方法\",\"2499\":\"v-3611b120#_1-创建optional类\",\"2500\":\"v-3611b120#_1-1-optional-of-t-t\",\"2501\":\"v-3611b120#_1-2-optional-empty\",\"2502\":\"v-3611b120#_1-3-optional-ofnullable-t-t-【常用】\",\"2503\":\"v-3611b120#_2-判断optional容器中是否有对象\",\"2504\":\"v-3611b120#_2-1-ispresent\",\"2505\":\"v-3611b120#_2-2-ifpresent\",\"2506\":\"v-3611b120#_3-获取optional容器的对象值\",\"2507\":\"v-3611b120#_3-1-get-获取对象包含的值\",\"2508\":\"v-3611b120#_3-2-t-orelse\",\"2509\":\"v-5d5ace0a\",\"2510\":\"v-5d5ace0a#i-modularity\",\"2511\":\"v-5d5ace0a#ii-repl工具\",\"2512\":\"v-5d5ace0a#iii-try语句\",\"2513\":\"v-5d5ace0a#iv-底层改变\",\"2514\":\"v-5d5ace0a#v-变量类型推断\",\"2515\":\"v-5d5ace0a#vi-string新增方法\",\"2516\":\"v-5d5ace0a#vii-其他\",\"2517\":\"v-5d5ace0a#_1-copyof\",\"2518\":\"v-5d5ace0a#_2-optional加强\",\"2519\":\"v-5d5ace0a#_3-局部类型推断升级\",\"2520\":\"v-5d5ace0a#_4-httpclient\",\"2521\":\"v-5d5ace0a#_5-更简化的编译运行\",\"2522\":\"v-5d5ace0a#_6-接口中声明私有方法\",\"2523\":\"v-5d5ace0a#_7-钻石操作符-的增强\",\"2524\":\"v-18070eda\",\"2525\":\"v-18070eda#_1-数据持久化\",\"2526\":\"v-18070eda#_2-java中的数据存储技术\",\"2527\":\"v-18070eda#_3-jdbc介绍\",\"2528\":\"v-18070eda#_3-1-没有jdbc-java程序访问数据库时是这样的\",\"2529\":\"v-18070eda#_3-2-有了jdbc-java程序访问数据库时是这样的\",\"2530\":\"v-18070eda#_3-3-总结\",\"2531\":\"v-18070eda#_4-jdbc体系结构\",\"2532\":\"v-18070eda#_5-jdbc程序编写步骤\",\"2533\":\"v-23acedac\",\"2534\":\"v-23acedac#i-安装驱动\",\"2535\":\"v-23acedac#_1-driver-驱动介绍\",\"2536\":\"v-23acedac#_2-下载mysql驱动\",\"2537\":\"v-23acedac#_3-驱动文件介绍\",\"2538\":\"v-23acedac#_4-安装并使用驱动\",\"2539\":\"v-23acedac#_5-加载驱动源码\",\"2540\":\"v-23acedac#ii-数据库连接要素\",\"2541\":\"v-23acedac#_1-driver\",\"2542\":\"v-23acedac#_2-url\",\"2543\":\"v-23acedac#_3-用户名、密码\",\"2544\":\"v-23acedac#iii-连接数据库\",\"2545\":\"v-23acedac#_1-方式1-使用mysql驱动的api连接\",\"2546\":\"v-23acedac#_2-方式2-使用反射-不体现第三方api\",\"2547\":\"v-23acedac#_3-方式3-使用drivermanager\",\"2548\":\"v-23acedac#_4-方式4-省略驱动的注册\",\"2549\":\"v-23acedac#_5-方式5-将连接方式写入配置文件让驱动加载【最终方案】\",\"2550\":\"v-23acedac#_5-1-配置文件\",\"2551\":\"v-23acedac#_5-2-代码\",\"2552\":\"v-23acedac#_5-3-使用配置文件的好处\",\"2553\":\"v-6cdcc950\",\"2554\":\"v-6cdcc950#i-操作和访问数据库\",\"2555\":\"v-6cdcc950#_1-说明\",\"2556\":\"v-6cdcc950#_2-对数据库的调用方式\",\"2557\":\"v-6cdcc950#_3-statement的弊端\",\"2558\":\"v-6cdcc950#_3-1-问题一-存在拼串操作-繁琐\",\"2559\":\"v-6cdcc950#_3-2-问题二-存在sql注入问题\",\"2560\":\"v-6cdcc950#_4-开发中访问数据库的方式选择\",\"2561\":\"v-6cdcc950#_5-preparedstatement的优点\",\"2562\":\"v-6cdcc950#_6-java与sql对应数据类型转换表\",\"2563\":\"v-6cdcc950#ii-preparedstatement\",\"2564\":\"v-6cdcc950#_1-简介\",\"2565\":\"v-6cdcc950#_2-preparedstatement-与-statement\",\"2566\":\"v-6cdcc950#_3-preparedstatement的操作步骤\",\"2567\":\"v-6cdcc950#_4-创建preparedstatement对象\",\"2568\":\"v-6cdcc950#_5-预编译sql语句与占位符\",\"2569\":\"v-6cdcc950#_5-1-预编译sql语句\",\"2570\":\"v-6cdcc950#_5-2-填充占位符\",\"2571\":\"v-6cdcc950#_6-execute-执行dml操作\",\"2572\":\"v-6cdcc950#iii-dml\",\"2573\":\"v-6cdcc950#_1-添加-代码示例\",\"2574\":\"v-6cdcc950#_2-封装数据库连接的获取和资源的关闭\",\"2575\":\"v-6cdcc950#_2-1-获取数据库连接\",\"2576\":\"v-6cdcc950#_2-2-关闭连接和statement的操作\",\"2577\":\"v-6cdcc950#_3-使用封装好的工具-更新操作示例\",\"2578\":\"v-6cdcc950#_4-封装通用的增删改操作\",\"2579\":\"v-6cdcc950#_4-1-功能设计\",\"2580\":\"v-6cdcc950#_4-2-参数设计\",\"2581\":\"v-6cdcc950#_4-3-源码\",\"2582\":\"v-6cdcc950#_4-4-使用示例\",\"2583\":\"v-6cdcc950#iv-dql\",\"2584\":\"v-6cdcc950#_1-dql的操作步骤\",\"2585\":\"v-6cdcc950#_2-resultset对象\",\"2586\":\"v-6cdcc950#_2-1-获取\",\"2587\":\"v-6cdcc950#_2-2-resultset介绍\",\"2588\":\"v-6cdcc950#_2-3-指针\",\"2589\":\"v-6cdcc950#_3-resultset接口的方法\",\"2590\":\"v-6cdcc950#_3-1-next-移动指针\",\"2591\":\"v-6cdcc950#_3-2-getxxx-获取指针所在行的数据\",\"2592\":\"v-6cdcc950#_4-resultsetmetadate对象\",\"2593\":\"v-6cdcc950#_5-resultsetmetadate对象的常用方法\",\"2594\":\"v-6cdcc950#_6-orm编程思想-object-relational-mapping\",\"2595\":\"v-6cdcc950#_7-图解查询操作的流程\",\"2596\":\"v-6cdcc950#v-查询示例\",\"2597\":\"v-6cdcc950#_1-基本查询示例-查询custom表中的数据\",\"2598\":\"v-6cdcc950#_1-1-jdbcutils更新\",\"2599\":\"v-6cdcc950#_1-2-custom对象\",\"2600\":\"v-6cdcc950#_2-封装-针对custom表的通用查询操作\",\"2601\":\"v-6cdcc950#_2-1-使用示例\",\"2602\":\"v-6cdcc950#_2-2-列的别名\",\"2603\":\"v-6cdcc950#_3-通用查询操作封装-针对不同表\",\"2604\":\"v-6cdcc950#_3-1-使用示例\",\"2605\":\"v-6cdcc950#_3-2-查询不同的表-class-t-参数与返回值-list-t\",\"2606\":\"v-6cdcc950#_3-3-返回多条数据\",\"2607\":\"v-433f3da8\",\"2608\":\"v-433f3da8#_1-mysql-blob类型\",\"2609\":\"v-433f3da8#_2-应用场景\",\"2610\":\"v-433f3da8#_3-debug-文件大小的限制\",\"2611\":\"v-433f3da8#_4-相关方法\",\"2612\":\"v-433f3da8#_5-示例-向数据表插入blob类型\",\"2613\":\"v-433f3da8#_6-示例-从数据表中读取blob类型字段\",\"2614\":\"v-9f2f38a4\",\"2615\":\"v-9f2f38a4#_1-jdbc的批量处理相关的方法\",\"2616\":\"v-9f2f38a4#_1-1-addbatch-string-积攒sql语句\",\"2617\":\"v-9f2f38a4#_1-2-executebatch-执行batch\",\"2618\":\"v-9f2f38a4#_1-3-clearbatch-清空batch\",\"2619\":\"v-9f2f38a4#_2-测试数据表\",\"2620\":\"v-9f2f38a4#_3-方式1-使用statement\",\"2621\":\"v-9f2f38a4#_4-方式2-使用preparedstatement\",\"2622\":\"v-9f2f38a4#_5-方式3-使用批处理\",\"2623\":\"v-9f2f38a4#_5-1-开启批处理\",\"2624\":\"v-9f2f38a4#_5-2-code\",\"2625\":\"v-9f2f38a4#_6-终极方案-批处理-手动提交\",\"2626\":\"v-da323a7c\",\"2627\":\"v-da323a7c#_1-jdbc事务处理方法\",\"2628\":\"v-da323a7c#_1-1-setautocommit-设置事务的自动提交\",\"2629\":\"v-da323a7c#_1-2-commit-提交事务\",\"2630\":\"v-da323a7c#_1-3-rollback-回滚事务\",\"2631\":\"v-da323a7c#_2-jdbc事务的处理流程\",\"2632\":\"v-da323a7c#连接池\",\"2633\":\"v-da323a7c#_3-jdbc事务示例\",\"2634\":\"v-da323a7c#_3-1-添加事务后-更改数据库通用的增删改方法\",\"2635\":\"v-da323a7c#_3-2-dml操作示例-使用事务\",\"2636\":\"v-da323a7c#_3-jdbc控制隔离级别\",\"2637\":\"v-da323a7c#_3-1-gettransactionisolation-获取当前隔离级别\",\"2638\":\"v-da323a7c#_3-2-settransactionisolation-设置数据库隔离级别\",\"2639\":\"v-da323a7c#_4-jdbc控制隔离级别示例\",\"2640\":\"v-7a69a2a0\",\"2641\":\"v-7a69a2a0#i-dao介绍\",\"2642\":\"v-7a69a2a0#_1-说明\",\"2643\":\"v-7a69a2a0#_2-作用\",\"2644\":\"v-7a69a2a0#_3-dao的使用流程\",\"2645\":\"v-7a69a2a0#ii-dao的实现类\",\"2646\":\"v-7a69a2a0#_1-basedao设计\",\"2647\":\"v-7a69a2a0#_1-1-类\",\"2648\":\"v-7a69a2a0#_1-2-需要实现的基本数据表操作\",\"2649\":\"v-7a69a2a0#_2-需要实现的特殊操作\",\"2650\":\"v-7a69a2a0#_2-1-方案1-定义orm类的属性\",\"2651\":\"v-7a69a2a0#_2-2-方案2-通过泛型传递orm类名\",\"2652\":\"v-7a69a2a0#_3-jdbc工具类-jdbcutils\",\"2653\":\"v-7a69a2a0#_4-basedao-java代码参考\",\"2654\":\"v-7a69a2a0#iii-basedao的使用\",\"2655\":\"v-7a69a2a0#_1-创建数据表实现接口-customerdao\",\"2656\":\"v-7a69a2a0#_2-创建数据表实现类-customerdaoimpl\",\"2657\":\"v-7a69a2a0#_3-使用customerdaoimpl\",\"2658\":\"v-2c4afa32\",\"2659\":\"v-2c4afa32#i-连接池介绍\",\"2660\":\"v-2c4afa32#_1-jdbc数据连接池的必要性\",\"2661\":\"v-2c4afa32#_1-1-在使用开发基于数据库的web程序时-传统的模式基本是按以下步骤\",\"2662\":\"v-2c4afa32#_1-2-这种模式开发-存在的问题\",\"2663\":\"v-2c4afa32#_2-数据库连接池技术介绍\",\"2664\":\"v-2c4afa32#_2-1-数据库连接池的基本思想\",\"2665\":\"v-2c4afa32#_2-2-工作方式\",\"2666\":\"v-2c4afa32#_3-数据库连接池工作原理\",\"2667\":\"v-2c4afa32#_4-数据库连接池的优点\",\"2668\":\"v-2c4afa32#_5-开源的数据库连接池技术\",\"2669\":\"v-2c4afa32#注意事项\",\"2670\":\"v-2c4afa32#ii-druid-德鲁伊\",\"2671\":\"v-2c4afa32#_1-加载驱动-jar包\",\"2672\":\"v-2c4afa32#_2-使用德鲁伊\",\"2673\":\"v-2c4afa32#_3-配置文件\",\"2674\":\"v-2c4afa32#_4-配置项\",\"2675\":\"v-2c4afa32#_5-jdbcutils\",\"2676\":\"v-2c4afa32#_6-使用示例\",\"2677\":\"v-765a569d\",\"2678\":\"v-765a569d#i-apache-dbutils\",\"2679\":\"v-765a569d#_1-dbutils介绍\",\"2680\":\"v-765a569d#_2-驱动\",\"2681\":\"v-765a569d#_3-api介绍\",\"2682\":\"v-765a569d#_4-dbutils类-工具类api-取代自己写的jdbcutils\",\"2683\":\"v-765a569d#_5-queryrunner-curd的api-取代自己写的basedao\",\"2684\":\"v-765a569d#_6-resultsethandler接口及实现类\",\"2685\":\"v-765a569d#ii-使用示例\",\"2686\":\"v-765a569d#_1-添加\",\"2687\":\"v-765a569d#_2-删除\",\"2688\":\"v-765a569d#_3-查询一条记录\",\"2689\":\"v-765a569d#_4-查询多条记录构成的集合\",\"2690\":\"v-765a569d#_5-自定义resultsethandler的实现类\",\"2691\":\"v-765a569d#_6-查询类似于最大的-最小的-平均的-总和-个数相关的数据\",\"2692\":\"v-38eee582\",\"2693\":\"v-38eee582#i-tomcat介绍\",\"2694\":\"v-38eee582#_1-web服务器\",\"2695\":\"v-38eee582#_2-资源分类\",\"2696\":\"v-38eee582#_3-web服务器软件使用步骤\",\"2697\":\"v-38eee582#_4-网络通信三要素\",\"2698\":\"v-38eee582#_5-tomcat\",\"2699\":\"v-38eee582#ii-基本开发使用\",\"2700\":\"v-38eee582#_1-下载\",\"2701\":\"v-38eee582#_2-安装与卸载\",\"2702\":\"v-38eee582#_3-目录结构\",\"2703\":\"v-38eee582#_4-启动\",\"2704\":\"v-38eee582#_5-关闭\",\"2705\":\"v-38eee582#_6-端口配置\",\"2706\":\"v-38eee582#_7-debug\",\"2707\":\"v-38eee582#_7-1-控制台乱码\",\"2708\":\"v-38eee582#_7-2-端口冲突\",\"2709\":\"v-38eee582#_7-3-启动时-窗口一闪而过\",\"2710\":\"v-38eee582#iii-手动部署\",\"2711\":\"v-38eee582#_1-访问tomcat服务器\",\"2712\":\"v-38eee582#_2-在webapps下部署\",\"2713\":\"v-38eee582#_2-1-在webapps下创建项目\",\"2714\":\"v-38eee582#_2-2-在其他目录下创建项目-并通过war包部署\",\"2715\":\"v-38eee582#_2-3-访问项目\",\"2716\":\"v-38eee582#_3-修改配置文件-创建一个路由\",\"2717\":\"v-38eee582#通过子配置文件\",\"2718\":\"v-38eee582#_4-配合nginx代理\",\"2719\":\"v-38eee582#iv-javaweb项目结构\",\"2720\":\"v-38eee582#_1-开发时的项目结构【工作目录】\",\"2721\":\"v-38eee582#_2-部署时的项目目录结构【运行目录】\",\"2722\":\"v-38eee582#_2-1-通用目录\",\"2723\":\"v-38eee582#_2-2-在idea中的输出目录\",\"2724\":\"v-426c1fa0\",\"2725\":\"v-426c1fa0#i-web项目目录\",\"2726\":\"v-426c1fa0#_1-开发中的项目\",\"2727\":\"v-426c1fa0#_2-打包后可以部署的项目\",\"2728\":\"v-426c1fa0#ii-创建web项目\",\"2729\":\"v-426c1fa0#_1-idea-创建web项目\",\"2730\":\"v-426c1fa0#_1-1-新建工程\",\"2731\":\"v-426c1fa0#_1-2-创建module\",\"2732\":\"v-426c1fa0#_2-idea-非web项目-web项目\",\"2733\":\"v-426c1fa0#_2-1-通过project-structure添加web\",\"2734\":\"v-426c1fa0#_2-2-通过在module上右键添加web\",\"2735\":\"v-426c1fa0#_2-3-配置artifacts\",\"2736\":\"v-426c1fa0#_3-maven-使用骨架创建web项目\",\"2737\":\"v-426c1fa0#_3-1-创建module\",\"2738\":\"v-426c1fa0#_3-2-删除pom-xml中多余的内容\",\"2739\":\"v-426c1fa0#_3-3-补齐maven-web项目确实的目录结构\",\"2740\":\"v-426c1fa0#_4-maven-不使用骨架创建web项目【推荐】\",\"2741\":\"v-426c1fa0#_4-1-创建module\",\"2742\":\"v-426c1fa0#_4-2-设置pom-xml的打包方式\",\"2743\":\"v-426c1fa0#_4-3-补齐maven-web缺失的webapp目录结构\",\"2744\":\"v-426c1fa0#iii-配置tomcat\",\"2745\":\"v-426c1fa0#readme\",\"2746\":\"v-426c1fa0#_1-打开tomcat-server模板\",\"2747\":\"v-426c1fa0#_2-deployment-项目部署\",\"2748\":\"v-426c1fa0#_2-1-部署模式介绍\",\"2749\":\"v-426c1fa0#_2-2-application-context-项目路径\",\"2750\":\"v-426c1fa0#_3-server-tomcat服务器配置\",\"2751\":\"v-426c1fa0#_4-添加配置好的tomcat模板\",\"2752\":\"v-426c1fa0#_5-配置多个tomcat\",\"2753\":\"v-426c1fa0#_5-1-添加tomcat模板\",\"2754\":\"v-426c1fa0#_5-2-配置tomcat模板\",\"2755\":\"v-426c1fa0#_5-3-配置文件\",\"2756\":\"v-426c1fa0#iv-使用tomcat\",\"2757\":\"v-426c1fa0#_1-启动tomcat\",\"2758\":\"v-426c1fa0#_2-访问测试\",\"2759\":\"v-426c1fa0#_3-编译后的项目目录\",\"2760\":\"v-426c1fa0#_4-多个tomcat目标的使用\",\"2761\":\"v-426c1fa0#v-注意事项\",\"2762\":\"v-426c1fa0#_1-artifacts配置\",\"2763\":\"v-426c1fa0#_1-1-配置artifacts\",\"2764\":\"v-426c1fa0#_1-2-添加导出方式\",\"2765\":\"v-426c1fa0#_2-tomcat导出方式介绍\",\"2766\":\"v-426c1fa0#_2-1-tomcat添加导出方式\",\"2767\":\"v-426c1fa0#_2-2-注意事项\",\"2768\":\"v-5cf0ae60\",\"2769\":\"v-0fd3271c\",\"2770\":\"v-0fd3271c#_1-概述\",\"2771\":\"v-0fd3271c#_2-解析\",\"2772\":\"v-0fd3271c#_3-servlet的本质\",\"2773\":\"v-0fd3271c#_4-导入servlet包\",\"2774\":\"v-0fd3271c#_5-注意事项\",\"2775\":\"v-fc983098\",\"2776\":\"v-fc983098#i-快速入门\",\"2777\":\"v-fc983098#快速入门步骤\",\"2778\":\"v-fc983098#_1-创建项目\",\"2779\":\"v-fc983098#_2-创建servlet实现类\",\"2780\":\"v-fc983098#_3-配置路由\",\"2781\":\"v-fc983098#_4-访问servlet实现类\",\"2782\":\"v-fc983098#_5-测试\",\"2783\":\"v-fc983098#ii-servlet-执行流程\",\"2784\":\"v-fc983098#_1-servlet执行流程概述\",\"2785\":\"v-fc983098#_2-解析\",\"2786\":\"v-fc983098#_3-总结\",\"2787\":\"v-fc983098#iii-idea中快速使用\",\"2788\":\"v-fc983098#_1-使用方式\",\"2789\":\"v-fc983098#_2-修改模板\",\"2790\":\"v-fc983098#_3-注意事项\",\"2791\":\"v-0337f94d\",\"2792\":\"v-0337f94d#i-servlet-生命周期\",\"2793\":\"v-0337f94d#_1-阶段1-加载和实例化\",\"2794\":\"v-0337f94d#_1-1-修改为启动servlet时创建\",\"2795\":\"v-0337f94d#_1-2-线程安全问题\",\"2796\":\"v-0337f94d#_2-阶段2-初始化\",\"2797\":\"v-0337f94d#_3-阶段3-请求处理\",\"2798\":\"v-0337f94d#_4-阶段4-服务终止\",\"2799\":\"v-0337f94d#ii-servlet-方法\",\"2800\":\"v-0337f94d#_1-init-初始化\",\"2801\":\"v-0337f94d#_2-service-服务代码\",\"2802\":\"v-0337f94d#_3-destroy-销毁方法\",\"2803\":\"v-0337f94d#_4-getservletinfo-获取servlet信息\",\"2804\":\"v-0337f94d#_5-getservletconfig-获取servletconfig对象\",\"2805\":\"v-0337f94d#iii-servlet-体系结构\",\"2806\":\"v-0337f94d#_1-servlet的体系结构-继承结构\",\"2807\":\"v-0337f94d#_2-genericservlet抽象类\",\"2808\":\"v-0337f94d#_3-httpservlet抽象类\",\"2809\":\"v-0337f94d#_4-servlet类的选择\",\"2810\":\"v-0337f94d#_5-httpservlet的使用\",\"2811\":\"v-0337f94d#_5-1-请求方式\",\"2812\":\"v-0337f94d#_5-2-编写格式\",\"2813\":\"v-0337f94d#_6-httpservlet的原理\",\"2814\":\"v-0337f94d#_6-1-手动实现httpservlet的逻辑\",\"2815\":\"v-0337f94d#_6-2-意义\",\"2816\":\"v-1bd4e2cc\",\"2817\":\"v-1bd4e2cc#i-注解配置路由\",\"2818\":\"v-1bd4e2cc#_1-urlpattern\",\"2819\":\"v-1bd4e2cc#_2-语法\",\"2820\":\"v-1bd4e2cc#_3-配置项\",\"2821\":\"v-1bd4e2cc#ii-匹配模式\",\"2822\":\"v-1bd4e2cc#_1-精确匹配\",\"2823\":\"v-1bd4e2cc#_2-目录匹配\",\"2824\":\"v-1bd4e2cc#_3-扩展名匹配\",\"2825\":\"v-1bd4e2cc#_4-任意匹配\",\"2826\":\"v-1bd4e2cc#_5-优先级\",\"2827\":\"v-1bd4e2cc#iii-xml配置路由\",\"2828\":\"v-2c8ec93e\",\"2829\":\"v-2c8ec93e#i-请求与响应概述\",\"2830\":\"v-2c8ec93e#介绍\",\"2831\":\"v-2c8ec93e#_1-完整的请求处理过程\",\"2832\":\"v-2c8ec93e#_2-request的作用-获取请求数据\",\"2833\":\"v-2c8ec93e#_3-response的作用-设置响应数据\",\"2834\":\"v-2c8ec93e#ii-request继承体系\",\"2835\":\"v-2c8ec93e#介绍-1\",\"2836\":\"v-2c8ec93e#_1-request的继承体系\",\"2837\":\"v-2c8ec93e#_2-requestfacade\",\"2838\":\"v-2c8ec93e#_3-总结\",\"2839\":\"v-2c8ec93e#iii-response继承体系\",\"2840\":\"v-2c8ec93e#_1-继承关系\",\"2841\":\"v-2c8ec93e#_2-responsefacade\",\"2842\":\"v-2450d0dc\",\"2843\":\"v-2450d0dc#i-获取请求行\",\"2844\":\"v-2450d0dc#请求行\",\"2845\":\"v-2450d0dc#_1-常用请求方法\",\"2846\":\"v-2450d0dc#_2-使用测试\",\"2847\":\"v-2450d0dc#ii-获取请求头\",\"2848\":\"v-2450d0dc#_1-getheader-获取请求头的值\",\"2849\":\"v-2450d0dc#_2-使用测试-1\",\"2850\":\"v-2450d0dc#_3-获取所有请求头的名称\",\"2851\":\"v-2450d0dc#iii-获取请求体\",\"2852\":\"v-2450d0dc#_1-请求体\",\"2853\":\"v-2450d0dc#_2-获取请求体的方式\",\"2854\":\"v-2450d0dc#_2-1-获取字节输入流\",\"2855\":\"v-2450d0dc#_2-2-获取字符输入流\",\"2856\":\"v-2450d0dc#_3-使用测试\",\"2857\":\"v-2450d0dc#_3-1-前端表单\",\"2858\":\"v-2450d0dc#_3-2-servlet\",\"2859\":\"v-2450d0dc#_4-注意事项\",\"2860\":\"v-2450d0dc#iv-请求参数\",\"2861\":\"v-2450d0dc#_1-需求-问题\",\"2862\":\"v-2450d0dc#_2-解决方案\",\"2863\":\"v-2450d0dc#_3-方案优化\",\"2864\":\"v-2450d0dc#v-request参数处理\",\"2865\":\"v-2450d0dc#_1-底层原理\",\"2866\":\"v-2450d0dc#_1-1-根据不同的请求方式获取请求参数\",\"2867\":\"v-2450d0dc#_1-2-把获取到的内容进行分割\",\"2868\":\"v-2450d0dc#_1-3-把分割后端数据-存入到一个map集合中\",\"2869\":\"v-2450d0dc#_2-相关方法\",\"2870\":\"v-2450d0dc#_3-示例\",\"2871\":\"v-2450d0dc#_3-1-前端代码\",\"2872\":\"v-2450d0dc#_3-2-servlet-1\",\"2873\":\"v-2450d0dc#_4-总结\",\"2874\":\"v-2450d0dc#vi-乱码问题\",\"2875\":\"v-2450d0dc#控制台乱码\",\"2876\":\"v-2450d0dc#_1-乱码原因\",\"2877\":\"v-2450d0dc#_2-解决方案-1\",\"2878\":\"v-2450d0dc#_3-代码\",\"2879\":\"v-2450d0dc#_4-说明\",\"2880\":\"v-2450d0dc#_5-总结\",\"2881\":\"v-74550c91\",\"2882\":\"v-74550c91#i-response\",\"2883\":\"v-74550c91#_1-响应行\",\"2884\":\"v-74550c91#_2-响应头\",\"2885\":\"v-74550c91#_3-对于响应体-是通过字符、字节输出流的方式往浏览器写\",\"2886\":\"v-74550c91#ii-响应字符数据\",\"2887\":\"v-74550c91#_1-步骤\",\"2888\":\"v-74550c91#_2-示例-向浏览器响应字符hello\",\"2889\":\"v-74550c91#_3-设置响应的数据类型\",\"2890\":\"v-74550c91#_4-示例-向浏览器响应html标签\",\"2891\":\"v-74550c91#_5-注意\",\"2892\":\"v-74550c91#iii-响应字节数据\",\"2893\":\"v-74550c91#_1-实现步骤\",\"2894\":\"v-74550c91#_2-示例-向浏览器响应一张图片\",\"2895\":\"v-74550c91#第三方工具对拷\",\"2896\":\"v-74550c91#_3-示例-以字节的形式输出字符\",\"2897\":\"v-6eb8e954\",\"2898\":\"v-6eb8e954#i-request-请求转发\",\"2899\":\"v-6eb8e954#_1-介绍\",\"2900\":\"v-6eb8e954#_2-请求转发的实现方式\",\"2901\":\"v-6eb8e954#_3-转发时共享数据\",\"2902\":\"v-6eb8e954#相关方法\",\"2903\":\"v-6eb8e954#_4-示例-进行请求转发同时共享数据\",\"2904\":\"v-6eb8e954#_5-请求转发的特点\",\"2905\":\"v-6eb8e954#ii-response-重定向\",\"2906\":\"v-6eb8e954#_1-重定向的过程\",\"2907\":\"v-6eb8e954#_2-重定向的实现方式\",\"2908\":\"v-6eb8e954#_3-示例-重定向\",\"2909\":\"v-6eb8e954#_3-1-responsedemo1\",\"2910\":\"v-6eb8e954#_3-2-responsedemo2\",\"2911\":\"v-6eb8e954#_3-3-测试\",\"2912\":\"v-6eb8e954#_4-重定向的特点\",\"2913\":\"v-6eb8e954#_5-redirect与forward的区别\",\"2914\":\"v-6eb8e954#iii-路径问题\",\"2915\":\"v-6eb8e954#_1-是否要加虚拟路径\",\"2916\":\"v-6eb8e954#_2-动态获取虚拟路径\",\"2917\":\"v-3583ecf7\",\"2918\":\"v-3583ecf7#i-域对象\",\"2919\":\"v-3583ecf7#_1-概念\",\"2920\":\"v-3583ecf7#_2-page域对象\",\"2921\":\"v-3583ecf7#_3-request域对象\",\"2922\":\"v-3583ecf7#生命周期\",\"2923\":\"v-3583ecf7#_4-session域对象\",\"2924\":\"v-3583ecf7#生命周期-1\",\"2925\":\"v-3583ecf7#_5-application域对象\",\"2926\":\"v-3583ecf7#_6-域对象共有的方法\",\"2927\":\"v-3583ecf7#ii-servletcontext\",\"2928\":\"v-3583ecf7#_1-概念-1\",\"2929\":\"v-3583ecf7#_2-主要功能\",\"2930\":\"v-3583ecf7#_3-获取servletcontext对象\",\"2931\":\"v-3583ecf7#_4-获取mime类型\",\"2932\":\"v-3583ecf7#_4-1-mime类型\",\"2933\":\"v-3583ecf7#_4-2-底层\",\"2934\":\"v-3583ecf7#_4-3-getmimetype-string-file-获取文件类型\",\"2935\":\"v-3583ecf7#_4-4-局限性\",\"2936\":\"v-3583ecf7#_5-作为域对象\",\"2937\":\"v-3583ecf7#_5-1-域的范围\",\"2938\":\"v-3583ecf7#_5-2-方法\",\"2939\":\"v-3583ecf7#_6-获取文件服务器路径\",\"2940\":\"v-3583ecf7#_6-1-getrealpath\",\"2941\":\"v-3583ecf7#_6-2-文件的工作路径\",\"2942\":\"v-3583ecf7#_6-3-示例\",\"2943\":\"v-0d12a4ac\",\"2944\":\"v-0d12a4ac#_1-filter的位置\",\"2945\":\"v-0d12a4ac#_2-实现filter接口\",\"2946\":\"v-0d12a4ac#dofilter-放行\",\"2947\":\"v-0d12a4ac#放行前的逻辑\",\"2948\":\"v-0d12a4ac#放行后的逻辑\",\"2949\":\"v-0d12a4ac#_2-配置拦截路径\",\"2950\":\"v-0d12a4ac#_3-拦截方式的配置\",\"2951\":\"v-0d12a4ac#配置多个值\",\"2952\":\"v-0d12a4ac#_4-过滤器链-多个过滤器\",\"2953\":\"v-0d12a4ac#多个过滤器的执行顺序\",\"2954\":\"v-0d12a4ac#_5-过滤器的优先级\",\"2955\":\"v-3d5ed71e\",\"2956\":\"v-3d5ed71e#i-监听器介绍\",\"2957\":\"v-3d5ed71e#_1-观察者模式\",\"2958\":\"v-3d5ed71e#_2-监听器概念\",\"2959\":\"v-3d5ed71e#_3-servlet监听器-listener\",\"2960\":\"v-3d5ed71e#_4-监听器分类\",\"2961\":\"v-3d5ed71e#ii-监听器列表\",\"2962\":\"v-3d5ed71e#_1-servletcontextlistener\",\"2963\":\"v-3d5ed71e#_2-httpsessionlistener\",\"2964\":\"v-3d5ed71e#_3-servletrequestlistener\",\"2965\":\"v-3d5ed71e#_4-servletcontextattributelistener\",\"2966\":\"v-3d5ed71e#_5-httpsessionattributelistener\",\"2967\":\"v-3d5ed71e#_6-servletrequestattributelistener\",\"2968\":\"v-3d5ed71e#_7-httpsessionbindinglistener\",\"2969\":\"v-3d5ed71e#_8-httpsessionactivationlistener\",\"2970\":\"v-3d5ed71e#iii-servletcontextlistener\",\"2971\":\"v-3d5ed71e#_1-监听器的使用步骤\",\"2972\":\"v-3d5ed71e#_2-servletcontextlistener接口的方法\",\"2973\":\"v-3d5ed71e#使用示例\",\"2974\":\"v-3d5ed71e#_3-注册监听器\",\"2975\":\"v-3d5ed71e#_4-监听器触发机制\",\"2976\":\"v-30e97f85\",\"2977\":\"v-4a4300dc\",\"2978\":\"v-4a4300dc#i-jar包介绍\",\"2979\":\"v-4a4300dc#_1-概述\",\"2980\":\"v-4a4300dc#_2-java包解析\",\"2981\":\"v-4a4300dc#_3-jar包与zip包\",\"2982\":\"v-4a4300dc#_4-jar包的内容\",\"2983\":\"v-4a4300dc#_5-jar包签名\",\"2984\":\"v-4a4300dc#_6-jar包的作用\",\"2985\":\"v-4a4300dc#_7-为什么要打jar包\",\"2986\":\"v-4a4300dc#_7-1-发布和使用类库\",\"2987\":\"v-4a4300dc#_7-2-util类库\",\"2988\":\"v-4a4300dc#ii-使用jar包\",\"2989\":\"v-4a4300dc#_1-使用java内置的jar包\",\"2990\":\"v-4a4300dc#_2-打jar包\",\"2991\":\"v-4a4300dc#_2-1-手动打\",\"2992\":\"v-4a4300dc#_2-2-使用idea\",\"2993\":\"v-4a4300dc#_3-添加jar包依赖\",\"2994\":\"v-4a4300dc#iii-jar包和war包\",\"2995\":\"v-4a4300dc#_1-war包介绍\",\"2996\":\"v-4a4300dc#_2-jar包与war包的对比\",\"2997\":\"v-4a4300dc#_3-jar包和war包使用\",\"2998\":\"v-4a4300dc#_4-微服务\",\"2999\":\"v-4a4300dc#iv-maven\",\"3000\":\"v-59d1b54d\",\"3001\":\"v-59d1b54d#i-mvc\",\"3002\":\"v-59d1b54d#_1-概述\",\"3003\":\"v-59d1b54d#_2-过程\",\"3004\":\"v-59d1b54d#_3-mvc的优点\",\"3005\":\"v-59d1b54d#ii-三层架构\",\"3006\":\"v-59d1b54d#_1-概述-1\",\"3007\":\"v-59d1b54d#_2-业务流程\",\"3008\":\"v-59d1b54d#_3-命名\",\"3009\":\"v-59d1b54d#_4-框架\",\"3010\":\"v-59d1b54d#iii-mvc与三层架构\",\"3011\":\"v-59d1b54d#_1-关系\",\"3012\":\"v-59d1b54d#_2-总结\",\"3013\":\"v-59d1b54d#_3-应用\",\"3014\":\"v-1d46bbde\",\"3015\":\"v-1d46bbde#i-xml-介绍\",\"3016\":\"v-1d46bbde#_1-xml与html的区别\",\"3017\":\"v-1d46bbde#_2-xml的用途\",\"3018\":\"v-1d46bbde#_3-基本语法\",\"3019\":\"v-1d46bbde#_4-简单示例\",\"3020\":\"v-1d46bbde#_5-xml的组成部分\",\"3021\":\"v-1d46bbde#ii-约束\",\"3022\":\"v-1d46bbde#_1-什么是约束\",\"3023\":\"v-1d46bbde#_2-约束文档的技术实现\",\"3024\":\"v-1d46bbde#_3-dtd\",\"3025\":\"v-1d46bbde#_3-1-dtd文档示例\",\"3026\":\"v-1d46bbde#_3-2-引入dtd文档\",\"3027\":\"v-1d46bbde#_3-3-引入dtd-编写xml\",\"3028\":\"v-1d46bbde#_4-schema\",\"3029\":\"v-1d46bbde#_4-1-schema示例\",\"3030\":\"v-1d46bbde#_4-2-引入约束写xml\",\"3031\":\"v-5a379abc\",\"3032\":\"v-5a379abc#i-会话技术介绍\",\"3033\":\"v-5a379abc#_1-会话\",\"3034\":\"v-5a379abc#_2-不同的会话\",\"3035\":\"v-5a379abc#_3-会话跟踪\",\"3036\":\"v-5a379abc#_4-无状态协议\",\"3037\":\"v-5a379abc#_5-会话追踪技术\",\"3038\":\"v-5a379abc#ii-cookie\",\"3039\":\"v-5a379abc#_1-使用步骤\",\"3040\":\"v-5a379abc#_2-cookie的相关方法\",\"3041\":\"v-5a379abc#_2-1-创建cookie对象\",\"3042\":\"v-5a379abc#_2-2-发送cookie对象\",\"3043\":\"v-5a379abc#_2-3-获取cookie数据\",\"3044\":\"v-5a379abc#_2-4-获取cookie的name和value\",\"3045\":\"v-5a379abc#_3-cookie使用范例\",\"3046\":\"v-5a379abc#_3-1-servlet1-创建cookie\",\"3047\":\"v-5a379abc#_3-2-servlet2-获取cookie\",\"3048\":\"v-5a379abc#_4-cookie的工作原理\",\"3049\":\"v-5a379abc#_4-1-servlet1创建并发送cookie\",\"3050\":\"v-5a379abc#_4-2-浏览器-保存cookie-并在下次请求时携带cookie\",\"3051\":\"v-5a379abc#_4-3-cookie的识别\",\"3052\":\"v-5a379abc#_5-发送多个cookie\",\"3053\":\"v-5a379abc#_6-cookie的保存时间\",\"3054\":\"v-5a379abc#_7-储存中文\",\"3055\":\"v-5a379abc#_8-cookie的共享\",\"3056\":\"v-5a379abc#_8-1-同一tomcat服务器中-多个web项目的cookie的共享\",\"3057\":\"v-5a379abc#_8-2-不同tomcat服务器间cookie的共享\",\"3058\":\"v-5a379abc#_9-总结\",\"3059\":\"v-5a379abc#iii-session\",\"3060\":\"v-5a379abc#_1-概念\",\"3061\":\"v-5a379abc#_2-session的工作流程\",\"3062\":\"v-5a379abc#_3-获取httpsession对象\",\"3063\":\"v-5a379abc#_4-httpsession对象的方法\",\"3064\":\"v-5a379abc#_4-1-设置session的键值\",\"3065\":\"v-5a379abc#_4-2-通过键获取session的值\",\"3066\":\"v-5a379abc#_4-3-通过键删除键值对\",\"3067\":\"v-5a379abc#_4-4-获取sessionid\",\"3068\":\"v-5a379abc#_5-session的原理\",\"3069\":\"v-5a379abc#_6-session的有效期\",\"3070\":\"v-5a379abc#定义session的有效期\",\"3071\":\"v-5a379abc#_7-session的钝化和活化\",\"3072\":\"v-5a379abc#_8-session的销毁\",\"3073\":\"v-5a379abc#_8-1\",\"3074\":\"v-5a379abc#_8-2-手动销毁\",\"3075\":\"v-5a379abc#_9-session的特点\",\"3076\":\"v-5a379abc#iv-总结\",\"3077\":\"v-5a379abc#_1-cookie与session的区别\",\"3078\":\"v-5a379abc#_2-cookie与session的应用场景\",\"3079\":\"v-5a379abc#_3-结论\",\"3080\":\"v-ecbdccf8\",\"3081\":\"v-ecbdccf8#i-json语法\",\"3082\":\"v-ecbdccf8#ii-json转换\",\"3083\":\"v-ecbdccf8#_1-json与java对象\",\"3084\":\"v-ecbdccf8#_2-fastjson-json与java对象的转换\",\"3085\":\"v-ecbdccf8#导入坐标\",\"3086\":\"v-ecbdccf8#_3-java对象转json\",\"3087\":\"v-ecbdccf8#_4-json转java对象\",\"3088\":\"v-48a9a854\",\"3089\":\"v-48a9a854#es-概述\",\"3090\":\"v-48a9a854#_1-elastic-stack\",\"3091\":\"v-48a9a854#_2-elastic-search\",\"3092\":\"v-48a9a854#_3-lucene\",\"3093\":\"v-48a9a854#_4-分布式\",\"3094\":\"v-48a9a854#_5-大企业的选择\",\"3095\":\"v-48a9a854#全文搜索引擎\",\"3096\":\"v-48a9a854#_1-背景\",\"3097\":\"v-48a9a854#_2-传统数据库的缺点\",\"3098\":\"v-48a9a854#_3-不适用常规搜索的场景\",\"3099\":\"v-48a9a854#_4-全文搜索\",\"3100\":\"v-48a9a854#工作原理\",\"3101\":\"v-48a9a854#es的数据格式\",\"3102\":\"v-48a9a854#elasticsearch-与-mysql对比\",\"3103\":\"v-9de9ea26\",\"3104\":\"v-9de9ea26#es安装\",\"3105\":\"v-9de9ea26#_1-系统\",\"3106\":\"v-9de9ea26#_2-安装软件\",\"3107\":\"v-9de9ea26#_3-启动服务\",\"3108\":\"v-9de9ea26#_4-访问测试\",\"3109\":\"v-9de9ea26#_5-debug\",\"3110\":\"v-9de9ea26#取消安全验证\",\"3111\":\"v-9de9ea26#http\",\"3112\":\"v-b422d4d0\",\"3113\":\"v-98f1bca6\",\"3114\":\"v-06bddc7b\",\"3115\":\"v-01bd6192\",\"3116\":\"v-01bd6192#创建索引\",\"3117\":\"v-01bd6192#_1-语法\",\"3118\":\"v-01bd6192#_2-示例\",\"3119\":\"v-01bd6192#_3-响应结果分析\",\"3120\":\"v-01bd6192#_4-put与post\",\"3121\":\"v-01bd6192#查看某个索引\",\"3122\":\"v-01bd6192#_1-语法-1\",\"3123\":\"v-01bd6192#_2-示例-1\",\"3124\":\"v-01bd6192#_3-响应信息解析\",\"3125\":\"v-01bd6192#查看所有索引\",\"3126\":\"v-01bd6192#_1-语法-2\",\"3127\":\"v-01bd6192#_2-返回数据解析\",\"3128\":\"v-01bd6192#删除索引\",\"3129\":\"v-01bd6192#_1-语法-3\",\"3130\":\"v-01bd6192#_2-示例-2\",\"3131\":\"v-3b305edc\",\"3132\":\"v-3b305edc#创建文档\",\"3133\":\"v-3b305edc#_1-语法\",\"3134\":\"v-3b305edc#_2-示例\",\"3135\":\"v-3b305edc#_3-响应结果分析\",\"3136\":\"v-3b305edc#_4-自定义-id\",\"3137\":\"v-3b305edc#_5-post与put\",\"3138\":\"v-3b305edc#查看文档\",\"3139\":\"v-3b305edc#_1-语法-1\",\"3140\":\"v-3b305edc#_2-示例-1\",\"3141\":\"v-3b305edc#_3-响应结果分析-1\",\"3142\":\"v-3b305edc#_4-查看索引下的全部文档\",\"3143\":\"v-3b305edc#修改文档\",\"3144\":\"v-3b305edc#_1-完全覆盖\",\"3145\":\"v-3b305edc#_2-局部数据修改\",\"3146\":\"v-3b305edc#_2-1-示例\",\"3147\":\"v-3b305edc#删除文档\",\"3148\":\"v-3b305edc#_1-删除示例\",\"3149\":\"v-3b305edc#_1-1-响应结果分析\",\"3150\":\"v-3b305edc#_1-2-查询已删除的文档\",\"3151\":\"v-3b305edc#_1-3-删除不存在的文档\",\"3152\":\"v-3b305edc#_2-条件删除\",\"3153\":\"v-3b305edc#_2-1-示例-1\",\"3154\":\"v-3b305edc#_2-2-响应结果分析\",\"3155\":\"v-216bc50c\",\"3156\":\"v-216bc50c#基本查询\",\"3157\":\"v-216bc50c#_1-通过主键-id-查看\",\"3158\":\"v-216bc50c#_1-2-示例\",\"3159\":\"v-216bc50c#_1-3-响应结果分析\",\"3160\":\"v-216bc50c#_2-查看索引下的全部文档\",\"3161\":\"v-216bc50c#条件查询\",\"3162\":\"v-216bc50c#_1-语法\",\"3163\":\"v-216bc50c#_2-查询示例\",\"3164\":\"v-216bc50c#_2-1-服务器响应结果解析\",\"3165\":\"v-216bc50c#_3-查询所有数据-全查询\",\"3166\":\"v-216bc50c#_3-1-示例\",\"3167\":\"v-216bc50c#_4-语法总结\",\"3168\":\"v-216bc50c#多条件查询\",\"3169\":\"v-216bc50c#_1-语法-1\",\"3170\":\"v-216bc50c#_2-示例\",\"3171\":\"v-216bc50c#范围查询\",\"3172\":\"v-216bc50c#_1-语法-2\",\"3173\":\"v-216bc50c#_2-示例-1\",\"3174\":\"v-216bc50c#完全匹配\",\"3175\":\"v-216bc50c#_1-全文检索\",\"3176\":\"v-216bc50c#_1-1-效果\",\"3177\":\"v-216bc50c#_1-2-示例-1\",\"3178\":\"v-216bc50c#_2-完全匹配查询\",\"3179\":\"v-216bc50c#_2-1-示例\",\"3180\":\"v-216bc50c#_2-2-值的一部分\",\"3181\":\"v-216bc50c#分页\",\"3182\":\"v-216bc50c#_1-语法-3\",\"3183\":\"v-216bc50c#_2-示例-2\",\"3184\":\"v-216bc50c#排序\",\"3185\":\"v-216bc50c#_1-语法-4\",\"3186\":\"v-216bc50c#_2-示例-3\",\"3187\":\"v-216bc50c#聚合操作\",\"3188\":\"v-216bc50c#_1-语法-5\",\"3189\":\"v-216bc50c#_2-示例-4\",\"3190\":\"v-216bc50c#_2-1-请求体\",\"3191\":\"v-216bc50c#_2-2-响应体\",\"3192\":\"v-216bc50c#高亮显示\",\"3193\":\"v-216bc50c#_1-语法-6\",\"3194\":\"v-216bc50c#_2-示例-5\",\"3195\":\"v-6afd33f7\",\"3196\":\"v-6afd33f7#创建映射\",\"3197\":\"v-6afd33f7#_1-语法\",\"3198\":\"v-6afd33f7#_2-示例\",\"3199\":\"v-6afd33f7#查看映射\",\"3200\":\"v-6afd33f7#映射的效果\",\"3201\":\"v-068ab148\",\"3202\":\"v-068ab148#java-api\",\"3203\":\"v-068ab148#搭建项目\",\"3204\":\"v-068ab148#es-7-x\",\"3205\":\"v-068ab148#_1-依赖\",\"3206\":\"v-068ab148#_2-客户端对象\",\"3207\":\"v-068ab148#es-8-x\",\"3208\":\"v-27a98d80\",\"3209\":\"v-27a98d80#_1-创建索引\",\"3210\":\"v-27a98d80#_1-1-debug\",\"3211\":\"v-27a98d80#_2-查看索引\",\"3212\":\"v-27a98d80#_3-删除索引\",\"3213\":\"v-0321c627\",\"3214\":\"v-0321c627#新增文档\",\"3215\":\"v-0321c627#_1-数据对象\",\"3216\":\"v-0321c627#_2-objectmapper\",\"3217\":\"v-0321c627#修改文档\",\"3218\":\"v-0321c627#删除文档\",\"3219\":\"v-0321c627#批量操作\",\"3220\":\"v-0321c627#_1-批量新增文档\",\"3221\":\"v-0321c627#_2-批量删除文档\",\"3222\":\"v-0321c627#debug\",\"3223\":\"v-0e75af15\",\"3224\":\"v-0e75af15#基本查询\",\"3225\":\"v-0e75af15#_1-根据-id-查询文档\",\"3226\":\"v-0e75af15#_2-查询所有文档\",\"3227\":\"v-0e75af15#条件查询\",\"3228\":\"v-0e75af15#全量查询\",\"3229\":\"v-0e75af15#组合查询\",\"3230\":\"v-0e75af15#_1-boolquerybuilder\",\"3231\":\"v-0e75af15#_2-示例代码\",\"3232\":\"v-0e75af15#过滤查询\",\"3233\":\"v-0e75af15#fetchsource\",\"3234\":\"v-0e75af15#示例代码\",\"3235\":\"v-0e75af15#范围查询\",\"3236\":\"v-0e75af15#_1-rangequerybuilder\",\"3237\":\"v-0e75af15#_2-示例代码-1\",\"3238\":\"v-0e75af15#模糊查询\",\"3239\":\"v-0e75af15#_1-fuzzyquerybuilder\",\"3240\":\"v-0e75af15#_2-示例代码-2\",\"3241\":\"v-0e75af15#分页\",\"3242\":\"v-0e75af15#示例代码-1\",\"3243\":\"v-0e75af15#排序\",\"3244\":\"v-0e75af15#测试代码\",\"3245\":\"v-0e75af15#打印结果\",\"3246\":\"v-0e75af15#多个字段排序\",\"3247\":\"v-0e75af15#聚合操作\",\"3248\":\"v-0e75af15#_1-aggregation\",\"3249\":\"v-0e75af15#_2-代码示例\",\"3250\":\"v-0e75af15#_3-size-0\",\"3251\":\"v-0e75af15#高亮显示\",\"3252\":\"v-0e75af15#_1-matchphrasequery-与-hightlightbuilder\",\"3253\":\"v-0e75af15#_2-代码示例-1\",\"3254\":\"v-29e4b1f0\",\"3255\":\"v-29e4b1f0#springdata-集成\",\"3256\":\"v-29e4b1f0#spark-streaming-集成\",\"3257\":\"v-29e4b1f0#flink-集成\",\"3258\":\"v-6965be9f\",\"3259\":\"v-6965be9f#_1-单机\",\"3260\":\"v-6965be9f#_2-集群-cluster\",\"3261\":\"v-6965be9f#_3-节点-node\",\"3262\":\"v-09cedb40\",\"3263\":\"v-09cedb40#准备\",\"3264\":\"v-09cedb40#_1-创建节点\",\"3265\":\"v-09cedb40#_2-配置内存\",\"3266\":\"v-09cedb40#报错信息如下\",\"3267\":\"v-09cedb40#手动指定jvm的内存\",\"3268\":\"v-09cedb40#配置节点\",\"3269\":\"v-09cedb40#_1-节点1-es-9300\",\"3270\":\"v-09cedb40#_2-节点2-es-9400\",\"3271\":\"v-09cedb40#_3-节点3-es-9500\",\"3272\":\"v-09cedb40#_4-选举机制简介\",\"3273\":\"v-09cedb40#_4-1-首次启动\",\"3274\":\"v-09cedb40#_4-2-再次启动\",\"3275\":\"v-09cedb40#_4-3-过半原则\",\"3276\":\"v-09cedb40#_4-4-集群降级\",\"3277\":\"v-09cedb40#启动集群\",\"3278\":\"v-09cedb40#_1-启动第一个节点-es-9300\",\"3279\":\"v-09cedb40#_2-启动第二个节点-es-9400\",\"3280\":\"v-09cedb40#_3-启动第三个节点\",\"3281\":\"v-09cedb40#使用测试\",\"3282\":\"v-09cedb40#_1-向节点-es-9300-添加索引\",\"3283\":\"v-09cedb40#_2-通过节点-es-9400-查看索引\",\"3284\":\"v-1c0b7401\",\"3285\":\"v-1c0b7401#整体步骤\",\"3286\":\"v-1c0b7401#安装\",\"3287\":\"v-1c0b7401#_1-下载es\",\"3288\":\"v-1c0b7401#_2-上传安装包-规划目录\",\"3289\":\"v-1c0b7401#_3-解压缩\",\"3290\":\"v-1c0b7401#_4-补齐目录\",\"3291\":\"v-1c0b7401#_5-创建es用户\",\"3292\":\"v-1c0b7401#ca证书\",\"3293\":\"v-1c0b7401#_1-ca模式。\",\"3294\":\"v-1c0b7401#_2-ca证书\",\"3295\":\"v-1c0b7401#_3-ca证书工作机理\",\"3296\":\"v-1c0b7401#_4-签发ca证书\",\"3297\":\"v-1c0b7401#_5-移动证书\",\"3298\":\"v-1c0b7401#_6-签发http证书\",\"3299\":\"v-1c0b7401#_7-解压并移动http证书\",\"3300\":\"v-1c0b7401#_7-1-解压http证书\",\"3301\":\"v-1c0b7401#_7-2-移动证书\",\"3302\":\"v-1c0b7401#配置文件\",\"3303\":\"v-1c0b7401#启动es\",\"3304\":\"v-1c0b7401#_1-第一次启动启\",\"3305\":\"v-1c0b7401#_1-1-返回验证信息\",\"3306\":\"v-1c0b7401#_1-2-创建证书\",\"3307\":\"v-1c0b7401#_1-3-开启安全模块\",\"3308\":\"v-1c0b7401#_2-登录es\",\"3309\":\"v-1c0b7401#_5-其他登录方式\",\"3310\":\"v-1c0b7401#_4-守护进程\",\"3311\":\"v-1c0b7401#debug\",\"3312\":\"v-1c0b7401#_1-默认jvm内存过大\",\"3313\":\"v-1c0b7401#_2-虚拟内存过小\",\"3314\":\"v-1c0b7401#_3-协议错误\",\"3315\":\"v-1c0b7401#_4-忘记密码\",\"3316\":\"v-6d8575cd\",\"3317\":\"v-6d8575cd#安装es\",\"3318\":\"v-6d8575cd#_1-下载es\",\"3319\":\"v-6d8575cd#_2-上传安装包-规划目录\",\"3320\":\"v-6d8575cd#_3-解压缩\",\"3321\":\"v-6d8575cd#_4-补齐目录\",\"3322\":\"v-6d8575cd#_5-创建es用户\",\"3323\":\"v-6d8575cd#_6-多节点安装\",\"3324\":\"v-6d8575cd#集群-区域网\",\"3325\":\"v-6d8575cd#_1-启动主节点\",\"3326\":\"v-6d8575cd#_1-1-创建证书\",\"3327\":\"v-6d8575cd#_1-2-自动修改配置文件\",\"3328\":\"v-6d8575cd#_1-3-返回授权信息\",\"3329\":\"v-6d8575cd#信息总结\",\"3330\":\"v-6d8575cd#_2-验证节点\",\"3331\":\"v-6d8575cd#_3-主节点-创建一个注册token\",\"3332\":\"v-6d8575cd#_4-主节点-修改配置文件并重启\",\"3333\":\"v-6d8575cd#_5-新节点-加入集群\",\"3334\":\"v-6d8575cd#集群-非区域网\",\"3335\":\"v-6d8575cd#集群-单机模拟\",\"3336\":\"v-6d8575cd#_1-创建主节点\",\"3337\":\"v-6d8575cd#_2-配置\",\"3338\":\"v-6d8575cd#_3-复刻其他节点\",\"3339\":\"v-6d8575cd#_4-配置另外连个节点\",\"3340\":\"v-6d8575cd#_5-启动集群并验证\",\"3341\":\"v-6d8575cd#集群管理\",\"3342\":\"v-6d8575cd#_1-守护进程\",\"3343\":\"v-6d8575cd#_2-重获授权信息\",\"3344\":\"v-6d8575cd#debug\",\"3345\":\"v-6d8575cd#_1-默认jvm内存过大\",\"3346\":\"v-6d8575cd#_2-虚拟内存过小\",\"3347\":\"v-6d8575cd#_3-协议错误\",\"3348\":\"v-6d8575cd#_4-线程问题\",\"3349\":\"v-6d8575cd#_5-端口限制\",\"3350\":\"v-6f0ec6e9\",\"3351\":\"v-6f0ec6e9#安装kibana\",\"3352\":\"v-6f0ec6e9#修改配置文件\",\"3353\":\"v-6f0ec6e9#windows下使用\",\"3354\":\"v-d9ea991a\",\"3355\":\"v-d9ea991a#elasticsearch-yaml\",\"3356\":\"v-d9ea991a#jvm-options\",\"3357\":\"v-d9ea991a#log4j2-properties\",\"3358\":\"v-d9ea991a#索引setting\",\"3359\":\"v-647e8b18\",\"3360\":\"v-647e8b18#_1-index-索引\",\"3361\":\"v-647e8b18#_2-type-类型\",\"3362\":\"v-647e8b18#_3-document-文档\",\"3363\":\"v-647e8b18#_4-field-字段\",\"3364\":\"v-647e8b18#_5-mapping-映射\",\"3365\":\"v-647e8b18#_6-shards-分片\",\"3366\":\"v-647e8b18#_6-1-分片的部署\",\"3367\":\"v-647e8b18#_6-2-分片与索引\",\"3368\":\"v-647e8b18#_7-replicas-副本\",\"3369\":\"v-647e8b18#_7-1-主分片与复制分片\",\"3370\":\"v-647e8b18#_7-2-默认处理\",\"3371\":\"v-647e8b18#_8-allocation-分配\",\"3372\":\"v-02f18031\",\"3373\":\"v-02f18031#系统架构\",\"3374\":\"v-02f18031#_1-概述\",\"3375\":\"v-02f18031#_2-主节点\",\"3376\":\"v-02f18031#_3-请求处理\",\"3377\":\"v-02f18031#单节点集群\",\"3378\":\"v-02f18031#_1-创建单节点集群\",\"3379\":\"v-02f18031#_2-索引分片\",\"3380\":\"v-02f18031#_2-1-查询集群信息\",\"3381\":\"v-02f18031#_2-2-查询索引信息\",\"3382\":\"v-02f18031#_3-分析集群情况\",\"3383\":\"v-02f18031#_3-1-elasticsearch-head插件\",\"3384\":\"v-02f18031#_3-2-分析\",\"3385\":\"v-02f18031#单点故障\",\"3386\":\"v-02f18031#_1-启动第二个节点\",\"3387\":\"v-02f18031#_2-查看集群情况\",\"3388\":\"v-02f18031#_3-总结\",\"3389\":\"v-02f18031#水平扩容\",\"3390\":\"v-02f18031#_1-启动第三个节点\",\"3391\":\"v-02f18031#_2-查看集群情况-1\",\"3392\":\"v-02f18031#_3-扩容的节点数量\",\"3393\":\"v-02f18031#_4-多个副本\",\"3394\":\"v-02f18031#_5-再次查看集群情况\",\"3395\":\"v-02f18031#集群故障处理\",\"3396\":\"v-02f18031#_1-节点丢失\",\"3397\":\"v-02f18031#_2-节点恢复\",\"3398\":\"v-55914da2\",\"3399\":\"v-55914da2#路由计算\",\"3400\":\"v-55914da2#es的算法\",\"3401\":\"v-55914da2#固定主分片苏联\",\"3402\":\"v-55914da2#routing参数\",\"3403\":\"v-55914da2#分片控制简介\",\"3404\":\"v-55914da2#协调节点\",\"3405\":\"v-55914da2#轮询\",\"3406\":\"v-55914da2#写流程\",\"3407\":\"v-55914da2#文档-写操作-的具体流程\",\"3408\":\"v-55914da2#改变流程\",\"3409\":\"v-55914da2#读-查询-流程\",\"3410\":\"v-55914da2#文档-读-检索-操作的具体流程\",\"3411\":\"v-55914da2#协调节点的协调\",\"3412\":\"v-55914da2#更新流程\",\"3413\":\"v-55914da2#文档-更新-操作的具体流程\",\"3414\":\"v-55914da2#副本的更改\",\"3415\":\"v-55914da2#多文档操作流程\",\"3416\":\"v-55914da2#多文档-查询-的具体步骤\",\"3417\":\"v-55914da2#多文档-写操作-的具体步骤\",\"3418\":\"v-782c5fa9\",\"3419\":\"v-782c5fa9#正排索引\",\"3420\":\"v-782c5fa9#_1-概述\",\"3421\":\"v-782c5fa9#_2-正向索引的结构\",\"3422\":\"v-782c5fa9#_3-正向索引解析\",\"3423\":\"v-782c5fa9#_4-正向索引的缺点\",\"3424\":\"v-782c5fa9#关键字-文档矩阵\",\"3425\":\"v-782c5fa9#示例\",\"3426\":\"v-782c5fa9#矩阵解读\",\"3427\":\"v-782c5fa9#搜索引擎的索引\",\"3428\":\"v-782c5fa9#倒排索引\",\"3429\":\"v-782c5fa9#_1-概述-1\",\"3430\":\"v-782c5fa9#_2-倒排索引的结构\",\"3431\":\"v-782c5fa9#_3-组成\",\"3432\":\"v-782c5fa9#_4-倒排索引的简单实现示例\",\"3433\":\"v-782c5fa9#略微复杂的倒排列表\",\"3434\":\"v-782c5fa9#匹配处理\",\"3435\":\"v-782c5fa9#_1-词条的分词\",\"3436\":\"v-782c5fa9#_2-标准化\",\"3437\":\"v-782c5fa9#_3-分词器\",\"3438\":\"v-c95b1876\",\"3439\":\"v-c95b1876#索引分段\",\"3440\":\"v-c95b1876#_1-早期文档搜索的做法\",\"3441\":\"v-c95b1876#_1-1-不变性的优点\",\"3442\":\"v-c95b1876#_1-2-不变性的缺点\",\"3443\":\"v-c95b1876#_2-动态更新索引\",\"3444\":\"v-c95b1876#_3-动态更新的过程\",\"3445\":\"v-c95b1876#_4-按段搜索\",\"3446\":\"v-c95b1876#_5-提交点\",\"3447\":\"v-c95b1876#_6-删除操作\",\"3448\":\"v-c95b1876#更新的生效\",\"3449\":\"v-c95b1876#_1-更新生效的流程\",\"3450\":\"v-c95b1876#_2-近实时搜索\",\"3451\":\"v-c95b1876#_3-更新控制\",\"3452\":\"v-c95b1876#_3-1-手动刷新\",\"3453\":\"v-c95b1876#_3-2-时效与效率的选择\",\"3454\":\"v-c95b1876#_3-3-自动刷新的关闭与开启\",\"3455\":\"v-c95b1876#_4-一致性问题-持久化变更\",\"3456\":\"v-c95b1876#段合并\",\"3457\":\"v-c95b1876#_1-自动段合并\",\"3458\":\"v-c95b1876#_2-无效的文档\",\"3459\":\"v-264a2283\",\"3460\":\"v-264a2283#文档分析介绍\",\"3461\":\"v-264a2283#_1-为什么需要文档分析\",\"3462\":\"v-264a2283#_2-文档分析包括什么\",\"3463\":\"v-264a2283#分析器\",\"3464\":\"v-264a2283#_1-分析器介绍\",\"3465\":\"v-264a2283#_2-内置分析器\",\"3466\":\"v-264a2283#_2-1-标准分析器\",\"3467\":\"v-264a2283#_2-2-简单分析器\",\"3468\":\"v-264a2283#_2-3-空格分析器\",\"3469\":\"v-264a2283#_2-4-语言分析器\",\"3470\":\"v-264a2283#_3-分析器使用场景\",\"3471\":\"v-264a2283#使用分析器\",\"3472\":\"v-264a2283#_1-analyze-api\",\"3473\":\"v-264a2283#_2-使用analyze\",\"3474\":\"v-264a2283#_3-指定分析器\",\"3475\":\"v-264a2283#中文处理\",\"3476\":\"v-264a2283#_1-中文的默认处理\",\"3477\":\"v-264a2283#_2-ik-分词器\",\"3478\":\"v-264a2283#_3-安装-ik-分词器\",\"3479\":\"v-264a2283#debug\",\"3480\":\"v-264a2283#_4-使用ik分词器\",\"3481\":\"v-264a2283#_5-ik分词器的-模式\",\"3482\":\"v-264a2283#ik-max-word\",\"3483\":\"v-264a2283#ik-smart\",\"3484\":\"v-264a2283#词汇扩展\",\"3485\":\"v-264a2283#_1-游戏词汇测试\",\"3486\":\"v-264a2283#_2-添加扩展词汇\",\"3487\":\"v-264a2283#_2-1-创建扩展词典\",\"3488\":\"v-264a2283#_2-2-配置扩展词典\",\"3489\":\"v-264a2283#_3-测试扩展词汇\",\"3490\":\"v-264a2283#自定义分析器\",\"3491\":\"v-33f606d2\",\"3492\":\"v-33f606d2#文档冲突介绍\",\"3493\":\"v-33f606d2#_1-冲突产生原因\",\"3494\":\"v-33f606d2#_2-场景示例\",\"3495\":\"v-33f606d2#_3-解决方案\",\"3496\":\"v-33f606d2#乐观并发控制\",\"3497\":\"v-33f606d2#_1-version\",\"3498\":\"v-33f606d2#_2-外部系统版本控制\",\"3499\":\"v-431c4b0e\",\"3500\":\"v-431c4b0e#硬件\",\"3501\":\"v-431c4b0e#_1-硬盘\",\"3502\":\"v-431c4b0e#_2-内存\",\"3503\":\"v-431c4b0e#设置es内存\",\"3504\":\"v-431c4b0e#内存分片策略\",\"3505\":\"v-431c4b0e#_3-其他硬件优化\",\"3506\":\"v-431c4b0e#分片策略\",\"3507\":\"v-431c4b0e#_1-分片的代价\",\"3508\":\"v-431c4b0e#_2-设计分片的基本原则\",\"3509\":\"v-431c4b0e#_3-推迟分片分配\",\"3510\":\"v-431c4b0e#查询优化\",\"3511\":\"v-431c4b0e#_1-使用路由\",\"3512\":\"v-431c4b0e#写入优化\",\"3513\":\"v-431c4b0e#_1-需要优化的方向\",\"3514\":\"v-431c4b0e#_2-批量数据提交\",\"3515\":\"v-431c4b0e#_3-合理使用合并\",\"3516\":\"v-431c4b0e#_4-减少-refresh-的次数\",\"3517\":\"v-431c4b0e#_5-加大-flush-设置\",\"3518\":\"v-431c4b0e#_6-减少副本的数量\",\"3519\":\"v-7766ffdb\",\"3520\":\"v-7b39f53d\",\"3521\":\"v-f7a0629c\",\"3522\":\"v-5a99bee4\",\"3523\":\"v-5a99bee4#基础知识点\",\"3524\":\"v-5a99bee4#_1-为什么要使用-elasticsearch\",\"3525\":\"v-5a99bee4#工作流程\",\"3526\":\"v-5a99bee4#_1-elasticsearch-的-master-选举流程\",\"3527\":\"v-5a99bee4#_2-elasticsearch-索引文档的流程\",\"3528\":\"v-5a99bee4#_3-elasticsearch-更新和删除文档的流程\",\"3529\":\"v-5a99bee4#_4-elasticsearch-搜索的流程\",\"3530\":\"v-5a99bee4#异常处理\",\"3531\":\"v-5a99bee4#_1-集群脑裂问题\",\"3532\":\"v-5a99bee4#_1-1-成因\",\"3533\":\"v-5a99bee4#_1-2-方案\",\"3534\":\"v-cb6166ca\",\"3535\":\"v-cb6166ca#i-mongodb-简介\",\"3536\":\"v-cb6166ca#_1-line\",\"3537\":\"v-cb6166ca#_2-语法风格\",\"3538\":\"v-cb6166ca#_3-优点\",\"3539\":\"v-cb6166ca#_4-应用场景\",\"3540\":\"v-cb6166ca#_3-1-解决的问题\",\"3541\":\"v-cb6166ca#_3-2-具体应用场景\",\"3542\":\"v-cb6166ca#_3-3-选择的依据\",\"3543\":\"v-cb6166ca#_4-serverless\",\"3544\":\"v-cb6166ca#ii-存储结构\",\"3545\":\"v-cb6166ca#_1-和mysql对比\",\"3546\":\"v-cb6166ca#_2-数据结构\",\"3547\":\"v-cb6166ca#_3-bson\",\"3548\":\"v-cb6166ca#_4-bson数据类型参考\",\"3549\":\"v-cb6166ca#iii-mongodb-与-redis\",\"3550\":\"v-cb6166ca#_1-定位\",\"3551\":\"v-cb6166ca#_2-应用场景对比\",\"3552\":\"v-678bcd60\",\"3553\":\"v-678bcd60#i-windows\",\"3554\":\"v-678bcd60#_1-下载安装包\",\"3555\":\"v-678bcd60#_2-安装\",\"3556\":\"v-678bcd60#_3-启动\",\"3557\":\"v-678bcd60#_3-1-通过参数启动服务\",\"3558\":\"v-678bcd60#_3-2-通过配置文件启动服务\",\"3559\":\"v-678bcd60#ii-linux\",\"3560\":\"v-678bcd60#_1-下载压缩包\",\"3561\":\"v-678bcd60#_2-安装-1\",\"3562\":\"v-678bcd60#_3-配置\",\"3563\":\"v-678bcd60#_4-启动服务\",\"3564\":\"v-678bcd60#_5-关闭服务\",\"3565\":\"v-678bcd60#iii-macos\",\"3566\":\"v-a6837e0a\",\"3567\":\"v-a6837e0a#i-mongodb-shell\",\"3568\":\"v-a6837e0a#ii-compass\",\"3569\":\"v-a6837e0a#_1-介绍\",\"3570\":\"v-a6837e0a#_2-compass-连接-mongodb\",\"3571\":\"v-a6837e0a#_3-页面介绍\",\"3572\":\"v-607d6490\",\"3573\":\"v-607d6490#i-数据库操作\",\"3574\":\"v-607d6490#_1-查看所有数据库\",\"3575\":\"v-607d6490#_2-选择或创建数据库\",\"3576\":\"v-607d6490#_3-查看正在使用的数据库\",\"3577\":\"v-607d6490#_4-数据库删除\",\"3578\":\"v-607d6490#_5-数据库的状态\",\"3579\":\"v-607d6490#ii-集合操作\",\"3580\":\"v-607d6490#_1-查看当前库中的集合\",\"3581\":\"v-607d6490#_2-创建集合\",\"3582\":\"v-607d6490#_3-删除集合\",\"3583\":\"v-0c271460\",\"3584\":\"v-0c271460#i-文档的插入\",\"3585\":\"v-0c271460#_1-单个文档插入\",\"3586\":\"v-0c271460#_1-1-参数\",\"3587\":\"v-0c271460#_1-2-示例\",\"3588\":\"v-0c271460#_1-3-注意\",\"3589\":\"v-0c271460#_2-批量插入\",\"3590\":\"v-0c271460#_2-1-示例\",\"3591\":\"v-0c271460#_2-2-注意\",\"3592\":\"v-0c271460#_3-try-catch插入\",\"3593\":\"v-0c271460#_4-文档键命名规范\",\"3594\":\"v-0c271460#ii-更新文档\",\"3595\":\"v-0c271460#_1-options选项\",\"3596\":\"v-0c271460#_2-更新指定字段\",\"3597\":\"v-0c271460#_3-批量更新\",\"3598\":\"v-0c271460#_4-列值增长的修改\",\"3599\":\"v-0c271460#iii-删除文档\",\"3600\":\"v-0c271460#_1-移除全部数据\",\"3601\":\"v-0c271460#_2-删除指定数据\",\"3602\":\"v-b6a5f404\",\"3603\":\"v-b6a5f404#i-基本查询\",\"3604\":\"v-b6a5f404#_1-语法\",\"3605\":\"v-b6a5f404#_2-查询所有数据\",\"3606\":\"v-b6a5f404#_3-根据条件查询数据\",\"3607\":\"v-b6a5f404#_4-投影查询\",\"3608\":\"v-b6a5f404#ii-文档的分页查询\",\"3609\":\"v-b6a5f404#_1-统计查询\",\"3610\":\"v-b6a5f404#_2-分页列表查询\",\"3611\":\"v-b6a5f404#_3-排序查询\",\"3612\":\"v-b6a5f404#iii-更多复杂查询\",\"3613\":\"v-b6a5f404#_1-正则条件查询\",\"3614\":\"v-b6a5f404#_2-比较查询\",\"3615\":\"v-b6a5f404#_3-包含查询\",\"3616\":\"v-b6a5f404#_4-条件连接查询\",\"3617\":\"v-09da746c\",\"3618\":\"v-09da746c#i-索引的类型\",\"3619\":\"v-09da746c#_1-单字段索引\",\"3620\":\"v-09da746c#_2-复合索引\",\"3621\":\"v-09da746c#_3-其他索引\",\"3622\":\"v-09da746c#ii-管理索引\",\"3623\":\"v-09da746c#_1-查看索引\",\"3624\":\"v-09da746c#_2-创建索引\",\"3625\":\"v-09da746c#_2-1-参数\",\"3626\":\"v-09da746c#_2-2-创建单字段索引\",\"3627\":\"v-09da746c#_2-3-创建复合索引\",\"3628\":\"v-09da746c#_2-4-索引默认命名规范\",\"3629\":\"v-09da746c#_3-移除索引\",\"3630\":\"v-09da746c#_3-1-移除指定索引\",\"3631\":\"v-09da746c#_3-2-移除所有索引\",\"3632\":\"v-09da746c#_4-执行计划\",\"3633\":\"v-09da746c#_4-1-compass可视化查看\",\"3634\":\"v-09da746c#_4-2-示例\",\"3635\":\"v-09da746c#_4-3-查询结果解析\",\"3636\":\"v-09da746c#_5-涵盖查询\",\"3637\":\"v-f841d8ce\",\"3638\":\"v-f841d8ce#i-副本集\",\"3639\":\"v-f841d8ce#_1-概述\",\"3640\":\"v-f841d8ce#_2-冗余和数据可用性\",\"3641\":\"v-f841d8ce#_3-mongodb中的复制\",\"3642\":\"v-f841d8ce#_4-主从复制和副本集区别\",\"3643\":\"v-f841d8ce#_5-副本集的类型和角色\",\"3644\":\"v-f841d8ce#_5-1-两种类型\",\"3645\":\"v-f841d8ce#_5-2-三种角色\",\"3646\":\"v-f841d8ce#_5-3-仲裁者额外说明\",\"3647\":\"v-f841d8ce#_6-副本集架构示例\",\"3648\":\"v-f841d8ce#ii-分片集群\",\"3649\":\"v-f2553160\",\"3650\":\"v-f2553160#i-副本集设计\",\"3651\":\"v-f2553160#_1-架构\",\"3652\":\"v-f2553160#_2-端口设计\",\"3653\":\"v-f2553160#_3-目录设计\",\"3654\":\"v-f2553160#_4-文件设计\",\"3655\":\"v-f2553160#ii-创建节点\",\"3656\":\"v-f2553160#_1-创建主节点\",\"3657\":\"v-f2553160#_2-创建副本节点\",\"3658\":\"v-f2553160#_3-创建仲裁节点\",\"3659\":\"v-f2553160#_4-查看启动结果\",\"3660\":\"v-f2553160#iii-初始化副本集\",\"3661\":\"v-f2553160#_1-连接节点\",\"3662\":\"v-f2553160#_2-连接后查看\",\"3663\":\"v-f2553160#_3-初始化副本集\",\"3664\":\"v-f2553160#_4-副本集初始化结果\",\"3665\":\"v-f2553160#iv-查看副本集\",\"3666\":\"v-f2553160#_1-查看副本集的配置内容\",\"3667\":\"v-f2553160#_1-1-执行结果\",\"3668\":\"v-f2553160#_1-2-结果解析\",\"3669\":\"v-f2553160#_2-查看副本集状态\",\"3670\":\"v-f2553160#_2-1-执行结果\",\"3671\":\"v-f2553160#_2-2-结果解析\",\"3672\":\"v-f2553160#v-添加节点\",\"3673\":\"v-f2553160#_1-添加副本从节点\",\"3674\":\"v-f2553160#_2-添加仲裁从节点\",\"3675\":\"v-f2553160#_3-debug\",\"3676\":\"v-7d3726e6\",\"3677\":\"v-7d3726e6#i-连接副本集\",\"3678\":\"v-7d3726e6#_1-修复host\",\"3679\":\"v-7d3726e6#_1-1-修改副本集节点的host\",\"3680\":\"v-7d3726e6#_2-连接副本集\",\"3681\":\"v-7d3726e6#ii-数据读写\",\"3682\":\"v-7d3726e6#_1-主节点读写\",\"3683\":\"v-7d3726e6#_2-从节点读写\",\"3684\":\"v-7d3726e6#iii-主节点的选举\",\"3685\":\"v-7d3726e6#_1-选举触发条件\",\"3686\":\"v-7d3726e6#_2-投票\",\"3687\":\"v-7d3726e6#_3-优先级\",\"3688\":\"v-7d3726e6#_3-1-查看优先级\",\"3689\":\"v-7d3726e6#_3-2-修改优先级\",\"3690\":\"v-7d3726e6#iv-故障测试\",\"3691\":\"v-086c61b4\",\"3692\":\"v-f9ff9fbc\",\"3693\":\"v-f9ff9fbc#_1-安全保障手段\",\"3694\":\"v-f9ff9fbc#_2-启动访问控制\",\"3695\":\"v-f9ff9fbc#_3-概念\",\"3696\":\"v-f9ff9fbc#_3-1-启动访问控制\",\"3697\":\"v-f9ff9fbc#_3-2-角色\",\"3698\":\"v-f9ff9fbc#_3-3-权限\",\"3699\":\"v-f9ff9fbc#_4-查看角色权限\",\"3700\":\"v-f9ff9fbc#_4-1-查询所有角色权限-仅用户自定义角色\",\"3701\":\"v-f9ff9fbc#_4-2-查询所有角色权限-包含内置角色\",\"3702\":\"v-f9ff9fbc#_4-3-查询指定权限\",\"3703\":\"v-f9ff9fbc#_5-常用的内置角色\",\"3704\":\"v-f9ff9fbc#_6-角色说明\",\"3705\":\"v-403f3337\",\"3706\":\"v-403f3337#i-管理用户\",\"3707\":\"v-403f3337#_1-createuser\",\"3708\":\"v-403f3337#_2-创建用户示例\",\"3709\":\"v-403f3337#_2-1-创建myroot\",\"3710\":\"v-403f3337#_2-2-创建admin\",\"3711\":\"v-403f3337#_2-3-创建普通用户\",\"3712\":\"v-403f3337#_3-查看用户\",\"3713\":\"v-403f3337#_4-删除用户\",\"3714\":\"v-403f3337#_5-修改密码\",\"3715\":\"v-403f3337#_6-认证测试\",\"3716\":\"v-403f3337#ii-开启认证\",\"3717\":\"v-403f3337#_1-修改配置文件\",\"3718\":\"v-403f3337#_2-通过认证登录\",\"3719\":\"v-403f3337#_2-1-登录时进行验证\",\"3720\":\"v-403f3337#_2-2-登录后的权限\",\"3721\":\"v-403f3337#iii-关闭mongodb\",\"3722\":\"v-9cf394c0\",\"3723\":\"v-9cf394c0#_1-认证的内容\",\"3724\":\"v-9cf394c0#_2-添加账号\",\"3725\":\"v-9cf394c0#_3-创建x-509证书\",\"3726\":\"v-9cf394c0#_3-1-通过openssl生成证书\",\"3727\":\"v-9cf394c0#_3-2-复制证书\",\"3728\":\"v-9cf394c0#_4-修改配置文件\",\"3729\":\"v-9cf394c0#_5-连接副本集\",\"3730\":\"v-abf051c2\",\"3731\":\"v-1d054808\",\"3732\":\"v-1d054808#i-连接方式\",\"3733\":\"v-1d054808#_1-direct\",\"3734\":\"v-1d054808#_2-replicaset\",\"3735\":\"v-1d054808#_3-权限认证\",\"3736\":\"v-1d054808#ii-连接单实例\",\"3737\":\"v-1d054808#iii-连接副本集\",\"3738\":\"v-1d054808#_1-初始化前的连接\",\"3739\":\"v-1d054808#_2-直连副本集\",\"3740\":\"v-1d054808#_3-只连接一个节点\",\"3741\":\"v-1d054808#iv-连接分片集群\",\"3742\":\"v-39d46f7d\",\"3743\":\"v-39d46f7d#_1-maven\",\"3744\":\"v-66fdecfc\",\"3745\":\"v-66fdecfc#引入\",\"3746\":\"v-66fdecfc#_1-spring-data\",\"3747\":\"v-66fdecfc#_2-spring-data-mongodb\",\"3748\":\"v-66fdecfc#_3-maven\",\"3749\":\"v-66fdecfc#yml配置\",\"3750\":\"v-66fdecfc#_1-通过host和port连接\",\"3751\":\"v-66fdecfc#_2-通过uri连接\",\"3752\":\"v-66fdecfc#操作方式\",\"3753\":\"v-66fdecfc#curd\",\"3754\":\"v-4a3a5b26\",\"3755\":\"v-68839503\",\"3756\":\"v-68839503#_1-数据损坏的修复\",\"3757\":\"v-68839503#_2-服务启动失败\",\"3758\":\"v-68be5650\",\"3759\":\"v-78b2fcd3\",\"3760\":\"v-7445cd33\",\"3761\":\"v-7e1f989b\",\"3762\":\"v-14c69af4\",\"3763\":\"v-e4cb1150\",\"3764\":\"v-4dabea43\",\"3765\":\"v-28ddfa13\",\"3766\":\"v-744cca9a\",\"3767\":\"v-688315f7\",\"3768\":\"v-6a5ff542\",\"3769\":\"v-34e89cba\",\"3770\":\"v-20b96d23\",\"3771\":\"v-74673f80\",\"3772\":\"v-3bc508c5\",\"3773\":\"v-eb9b9c9a\",\"3774\":\"v-3274ac86\",\"3775\":\"v-3670953c\",\"3776\":\"v-4a8d2097\",\"3777\":\"v-17b81500\",\"3778\":\"v-01ed9ba8\",\"3779\":\"v-0ea08c70\",\"3780\":\"v-33644c36\",\"3781\":\"v-07c1e4c2\",\"3782\":\"v-e2a81af0\",\"3783\":\"v-113e9cfd\",\"3784\":\"v-45d9536e\",\"3785\":\"v-f2811d10\",\"3786\":\"v-4370741c\",\"3787\":\"v-6ebbf680\",\"3788\":\"v-8cd22b3a\",\"3789\":\"v-07a1d28a\",\"3790\":\"v-af90ecea\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,2],\"1\":[2,8],\"2\":[1],\"3\":[1],\"4\":[1],\"5\":[1],\"6\":[1],\"7\":[1],\"8\":[1],\"9\":[1],\"10\":[1,61],\"11\":[1,65],\"12\":[1,2],\"13\":[2,3],\"14\":[2,3],\"15\":[2,3],\"16\":[2,3],\"17\":[2,3],\"18\":[2,3],\"19\":[2,1],\"20\":[2,3],\"21\":[1,11],\"22\":[1,11],\"23\":[2,5],\"24\":[1,7],\"25\":[1,6],\"26\":[1,9],\"27\":[2,3],\"28\":[1,4],\"29\":[1,8],\"30\":[2,4],\"31\":[2,7],\"32\":[2],\"33\":[1,36],\"34\":[2],\"35\":[1,10],\"36\":[3,14],\"37\":[3,10],\"38\":[3,7],\"39\":[1,10],\"40\":[2,2],\"41\":[2,2],\"42\":[2,3],\"43\":[2,2],\"44\":[2,3],\"45\":[2,37],\"46\":[2,2],\"47\":[1,2],\"48\":[2,5],\"49\":[1,27],\"50\":[1,8],\"51\":[1,5],\"52\":[1],\"53\":[1,16],\"54\":[1,29],\"55\":[1,8],\"56\":[2],\"57\":[2,8],\"58\":[2,7],\"59\":[1,1],\"60\":[2,2],\"61\":[2,2],\"62\":[2,2],\"63\":[2,2],\"64\":[1,2],\"65\":[2,3],\"66\":[1,2],\"67\":[2,3],\"68\":[1,2],\"69\":[2,3],\"70\":[1,2],\"71\":[2,3],\"72\":[2,2],\"73\":[2,3],\"74\":[2,2],\"75\":[2,3],\"76\":[2,2],\"77\":[2,3],\"78\":[2,2],\"79\":[2,3],\"80\":[1,21],\"81\":[2,21],\"82\":[2,5],\"83\":[2,5],\"84\":[2,24],\"85\":[2,24],\"86\":[2,3],\"87\":[2,3],\"88\":[2,3],\"89\":[2,3],\"90\":[2,5],\"91\":[2,6],\"92\":[2,4],\"93\":[2,6],\"94\":[3,7],\"95\":[3,39],\"96\":[2,34],\"97\":[2,15],\"98\":[2,25],\"99\":[2],\"100\":[4,30],\"101\":[3,9],\"102\":[3,6],\"103\":[2,18],\"104\":[2],\"105\":[3,19],\"106\":[3,10],\"107\":[3],\"108\":[2,4],\"109\":[2,21],\"110\":[2,6],\"111\":[2,8],\"112\":[2],\"113\":[2,7],\"114\":[2,4],\"115\":[3,9],\"116\":[4,5],\"117\":[4,26],\"118\":[5,29],\"119\":[5,68],\"120\":[2,26],\"121\":[2,6],\"122\":[2],\"123\":[2,40],\"124\":[2,8],\"125\":[2,10],\"126\":[2],\"127\":[2,16],\"128\":[2,27],\"129\":[2,16],\"130\":[2,4],\"131\":[2,4],\"132\":[2,6],\"133\":[2,11],\"134\":[3,26],\"135\":[3,23],\"136\":[3,4],\"137\":[2,7],\"138\":[2,7],\"139\":[2,18],\"140\":[2],\"141\":[3,9],\"142\":[3,9],\"143\":[2,7],\"144\":[3,3],\"145\":[2],\"146\":[2,10],\"147\":[2,57],\"148\":[2,20],\"149\":[2,11],\"150\":[2,6],\"151\":[2,32],\"152\":[2,22],\"153\":[2,14],\"154\":[3,16],\"155\":[3,25],\"156\":[2,13],\"157\":[3],\"158\":[1],\"159\":[2,20],\"160\":[1,8],\"161\":[2,12],\"162\":[2,25],\"163\":[2,27],\"164\":[3,14],\"165\":[3,5],\"166\":[2,16],\"167\":[2,4],\"168\":[2,3],\"169\":[3,20],\"170\":[4,23],\"171\":[4,20],\"172\":[3,15],\"173\":[1],\"174\":[2,9],\"175\":[2,6],\"176\":[2,9],\"177\":[3,13],\"178\":[2],\"179\":[2,10],\"180\":[3,12],\"181\":[2,13],\"182\":[4,12],\"183\":[2,11],\"184\":[2,3],\"185\":[3,14],\"186\":[3,13],\"187\":[2,3],\"188\":[2,3],\"189\":[5,4],\"190\":[4,3],\"191\":[3,5],\"192\":[2,4],\"193\":[3,8],\"194\":[3,13],\"195\":[2,3],\"196\":[3,6],\"197\":[3,24],\"198\":[2],\"199\":[2],\"200\":[2,32],\"201\":[2,8],\"202\":[3,17],\"203\":[2,7],\"204\":[4,11],\"205\":[3,4],\"206\":[2,6],\"207\":[3,11],\"208\":[4,19],\"209\":[2,17],\"210\":[2,9],\"211\":[4,29],\"212\":[4,22],\"213\":[2],\"214\":[2,19],\"215\":[3,19],\"216\":[3,21],\"217\":[2,11],\"218\":[2,20],\"219\":[2,14],\"220\":[2,24],\"221\":[3],\"222\":[3,2],\"223\":[3,21],\"224\":[2,9],\"225\":[2,19],\"226\":[2,18],\"227\":[2,24],\"228\":[2,6],\"229\":[2,22],\"230\":[2,13],\"231\":[2,6],\"232\":[2,4],\"233\":[3],\"234\":[2,4],\"235\":[2,6],\"236\":[2,10],\"237\":[4,11],\"238\":[3,3],\"239\":[3,22],\"240\":[2,5],\"241\":[3,9],\"242\":[3,6],\"243\":[2],\"244\":[6,28],\"245\":[6,11],\"246\":[4,60],\"247\":[3,22],\"248\":[2,21],\"249\":[2],\"250\":[2,6],\"251\":[2,3],\"252\":[2,5],\"253\":[2,5],\"254\":[3,6],\"255\":[2,9],\"256\":[2,21],\"257\":[2,2],\"258\":[2,14],\"259\":[2,30],\"260\":[2,4],\"261\":[2,4],\"262\":[2,22],\"263\":[2,16],\"264\":[2,4],\"265\":[2,5],\"266\":[2,8],\"267\":[2,12],\"268\":[2,9],\"269\":[2,13],\"270\":[3,3],\"271\":[2,2],\"272\":[2,26],\"273\":[3,6],\"274\":[2,15],\"275\":[2,12],\"276\":[2],\"277\":[2,8],\"278\":[2,14],\"279\":[3,5],\"280\":[2,31],\"281\":[2,26],\"282\":[3,8],\"283\":[3,8],\"284\":[2,4],\"285\":[3,4],\"286\":[2],\"287\":[2,12],\"288\":[2,37],\"289\":[2,11],\"290\":[2,29],\"291\":[2],\"292\":[2,18],\"293\":[2,6],\"294\":[2,7],\"295\":[2,23],\"296\":[2],\"297\":[2,5],\"298\":[2,7],\"299\":[2,26],\"300\":[2,12],\"301\":[2,4],\"302\":[2,8],\"303\":[2,12],\"304\":[2,27],\"305\":[3],\"306\":[2,6],\"307\":[2,15],\"308\":[2,222],\"309\":[2,30],\"310\":[3,8],\"311\":[1,6],\"312\":[2,10],\"313\":[2,34],\"314\":[2,20],\"315\":[2,13],\"316\":[3,5],\"317\":[2,13],\"318\":[6],\"319\":[3,53],\"320\":[2,15],\"321\":[3,14],\"322\":[5],\"323\":[3,21],\"324\":[3,11],\"325\":[2,6],\"326\":[2,28],\"327\":[2,3],\"328\":[1,4],\"329\":[2,22],\"330\":[2,5],\"331\":[2,6],\"332\":[2,15],\"333\":[2,9],\"334\":[2,2],\"335\":[2,9],\"336\":[2,5],\"337\":[2,19],\"338\":[2,3],\"339\":[2,6],\"340\":[1,9],\"341\":[2,12],\"342\":[2,112],\"343\":[2,40],\"344\":[1,6],\"345\":[2,40],\"346\":[1,3],\"347\":[1,42],\"348\":[2,14],\"349\":[3,13],\"350\":[2,39],\"351\":[3,3],\"352\":[2,9],\"353\":[2,8],\"354\":[3,18],\"355\":[2,27],\"356\":[2,21],\"357\":[2],\"358\":[1,32],\"359\":[3,6],\"360\":[2,2],\"361\":[2,39],\"362\":[2,28],\"363\":[2,6],\"364\":[3,13],\"365\":[4,21],\"366\":[2,26],\"367\":[2],\"368\":[3,22],\"369\":[3,10],\"370\":[3],\"371\":[3,38],\"372\":[2,27],\"373\":[2,5],\"374\":[4,10],\"375\":[3,20],\"376\":[3],\"377\":[2,12],\"378\":[2,12],\"379\":[3,62],\"380\":[5,27],\"381\":[2,5],\"382\":[3,10],\"383\":[3,23],\"384\":[2,18],\"385\":[2],\"386\":[1],\"387\":[2,17],\"388\":[3,36],\"389\":[2,21],\"390\":[4,15],\"391\":[4,4],\"392\":[3,14],\"393\":[2,14],\"394\":[1,20],\"395\":[2,12],\"396\":[3,7],\"397\":[3,10],\"398\":[2,15],\"399\":[2,8],\"400\":[2,5],\"401\":[2,13],\"402\":[1,27],\"403\":[3,36],\"404\":[3,52],\"405\":[1,10],\"406\":[5,56],\"407\":[3,41],\"408\":[3,39],\"409\":[4,33],\"410\":[3,48],\"411\":[3],\"412\":[1],\"413\":[2,32],\"414\":[2,35],\"415\":[1,8],\"416\":[3,28],\"417\":[2,12],\"418\":[2,150],\"419\":[2,36],\"420\":[2,27],\"421\":[3,5],\"422\":[2,39],\"423\":[2,53],\"424\":[2,30],\"425\":[2,30],\"426\":[3,4],\"427\":[1,18],\"428\":[3,61],\"429\":[3,57],\"430\":[3,33],\"431\":[5,47],\"432\":[4,47],\"433\":[2,18],\"434\":[1,6],\"435\":[1,3],\"436\":[3],\"437\":[1,9],\"438\":[2,15],\"439\":[2,31],\"440\":[2],\"441\":[1,22],\"442\":[1,12],\"443\":[3],\"444\":[3,35],\"445\":[4,18],\"446\":[4,20],\"447\":[3,28],\"448\":[3,17],\"449\":[1],\"450\":[2,13],\"451\":[2,17],\"452\":[2,30],\"453\":[4,7],\"454\":[4,8],\"455\":[2,36],\"456\":[2,6],\"457\":[1,3],\"458\":[1,3],\"459\":[3],\"460\":[1,6],\"461\":[2,7],\"462\":[2,21],\"463\":[2,8],\"464\":[2,22],\"465\":[1,3],\"466\":[2,13],\"467\":[2,8],\"468\":[2,38],\"469\":[2,25],\"470\":[3,16],\"471\":[3,69],\"472\":[2,36],\"473\":[3,32],\"474\":[2,14],\"475\":[1,13],\"476\":[2,10],\"477\":[2,21],\"478\":[3,78],\"479\":[2,9],\"480\":[3,19],\"481\":[1,7],\"482\":[2,14],\"483\":[2,38],\"484\":[2,4],\"485\":[4,18],\"486\":[1,5],\"487\":[1,14],\"488\":[1,19],\"489\":[1,15],\"490\":[3,6],\"491\":[1,12],\"492\":[2,30],\"493\":[2,42],\"494\":[2,11],\"495\":[1,3],\"496\":[1,4],\"497\":[2,5],\"498\":[2,16],\"499\":[2,36],\"500\":[2,24],\"501\":[2,79],\"502\":[3,5],\"503\":[3,3],\"504\":[3,31],\"505\":[1,6],\"506\":[2,49],\"507\":[1,9],\"508\":[1,11],\"509\":[1,9],\"510\":[1,18],\"511\":[1,47],\"512\":[1],\"513\":[1,28],\"514\":[1,55],\"515\":[1,3],\"516\":[2,9],\"517\":[1,9],\"518\":[1,11],\"519\":[1],\"520\":[2,32],\"521\":[1,28],\"522\":[2,8],\"523\":[3,25],\"524\":[2,17],\"525\":[4,47],\"526\":[2,11],\"527\":[3,37],\"528\":[3,15],\"529\":[2,14],\"530\":[3,22],\"531\":[3,9],\"532\":[3,12],\"533\":[1,5],\"534\":[1,4],\"535\":[2,9],\"536\":[2,34],\"537\":[2,6],\"538\":[1],\"539\":[2,12],\"540\":[2,24],\"541\":[2,23],\"542\":[2,6],\"543\":[2,18],\"544\":[1,9],\"545\":[2,24],\"546\":[1,30],\"547\":[2,5],\"548\":[3,10],\"549\":[2,16],\"550\":[3,37],\"551\":[3,10],\"552\":[2,4],\"553\":[3,22],\"554\":[5,58],\"555\":[2,24],\"556\":[2,30],\"557\":[3,8],\"558\":[1,5],\"559\":[1,13],\"560\":[1,14],\"561\":[1,5],\"562\":[1,35],\"563\":[2,28],\"564\":[2,9],\"565\":[2,5],\"566\":[3,14],\"567\":[5,63],\"568\":[2,16],\"569\":[3,4],\"570\":[3,6],\"571\":[2,2],\"572\":[3,3],\"573\":[2,5],\"574\":[2,21],\"575\":[2,6],\"576\":[2,6],\"577\":[2,9],\"578\":[3,36],\"579\":[2],\"580\":[3,4],\"581\":[2,6],\"582\":[2,2],\"583\":[2,9],\"584\":[2],\"585\":[2],\"586\":[2,18],\"587\":[2,2],\"588\":[2,18],\"589\":[2,39],\"590\":[3,17],\"591\":[3,2],\"592\":[2,17],\"593\":[2,15],\"594\":[3,17],\"595\":[2,15],\"596\":[2],\"597\":[2,18],\"598\":[2,18],\"599\":[2,18],\"600\":[3,22],\"601\":[2],\"602\":[2,12],\"603\":[2],\"604\":[2,14],\"605\":[2],\"606\":[2,11],\"607\":[2,16],\"608\":[4,18],\"609\":[2,13],\"610\":[2],\"611\":[2,20],\"612\":[3,110],\"613\":[3,2],\"614\":[3,43],\"615\":[2],\"616\":[2,14],\"617\":[3,34],\"618\":[3,8],\"619\":[2,17],\"620\":[3,28],\"621\":[3,3],\"622\":[4,18],\"623\":[5,45],\"624\":[2,34],\"625\":[3,3],\"626\":[3,26],\"627\":[3,22],\"628\":[3,28],\"629\":[3,3],\"630\":[3,10],\"631\":[3,20],\"632\":[3,25],\"633\":[3,30],\"634\":[3,11],\"635\":[4,20],\"636\":[4,49],\"637\":[4,32],\"638\":[3,4],\"639\":[3,12],\"640\":[3,36],\"641\":[3,4],\"642\":[3,1],\"643\":[2,10],\"644\":[4,25],\"645\":[3,31],\"646\":[3,39],\"647\":[3,62],\"648\":[2,17],\"649\":[2,18],\"650\":[2],\"651\":[2,15],\"652\":[2,23],\"653\":[2,18],\"654\":[2],\"655\":[2,17],\"656\":[2,23],\"657\":[2,23],\"658\":[2],\"659\":[2,16],\"660\":[2,27],\"661\":[2,15],\"662\":[2,24],\"663\":[2,17],\"664\":[2,4],\"665\":[2,19],\"666\":[2,15],\"667\":[2,15],\"668\":[2,18],\"669\":[2,29],\"670\":[2,2],\"671\":[3,44],\"672\":[2,33],\"673\":[2,36],\"674\":[2,66],\"675\":[2,2],\"676\":[2],\"677\":[3,20],\"678\":[4,15],\"679\":[4,17],\"680\":[4,17],\"681\":[2,14],\"682\":[2,26],\"683\":[3,5],\"684\":[2],\"685\":[2],\"686\":[2,7],\"687\":[3,6],\"688\":[2,23],\"689\":[2,19],\"690\":[4,15],\"691\":[2],\"692\":[3,16],\"693\":[3,21],\"694\":[3,9],\"695\":[4,9],\"696\":[2,12],\"697\":[2,21],\"698\":[2],\"699\":[2,21],\"700\":[2,32],\"701\":[2,24],\"702\":[2,31],\"703\":[2,33],\"704\":[2,16],\"705\":[3,5],\"706\":[2],\"707\":[2,14],\"708\":[2,19],\"709\":[2,38],\"710\":[2,11],\"711\":[2,7],\"712\":[2,13],\"713\":[5,7],\"714\":[2,21],\"715\":[3,16],\"716\":[3,14],\"717\":[2,32],\"718\":[2,34],\"719\":[2,44],\"720\":[2,60],\"721\":[2,51],\"722\":[2,33],\"723\":[2,21],\"724\":[2,18],\"725\":[2,33],\"726\":[2,13],\"727\":[2,23],\"728\":[2,17],\"729\":[2,12],\"730\":[2,11],\"731\":[2,15],\"732\":[3,29],\"733\":[3,24],\"734\":[2,63],\"735\":[2,16],\"736\":[3,26],\"737\":[2,22],\"738\":[3],\"739\":[2,15],\"740\":[2,3],\"741\":[2,8],\"742\":[2,9],\"743\":[2,16],\"744\":[2,19],\"745\":[2,17],\"746\":[2,56],\"747\":[2,5],\"748\":[2,5],\"749\":[4,48],\"750\":[4,16],\"751\":[4,25],\"752\":[2,25],\"753\":[2,7],\"754\":[2,17],\"755\":[2],\"756\":[3,36],\"757\":[3,37],\"758\":[3],\"759\":[2,14],\"760\":[3,21],\"761\":[3,33],\"762\":[3,18],\"763\":[3,18],\"764\":[3,25],\"765\":[2,16],\"766\":[3,17],\"767\":[3,23],\"768\":[3,16],\"769\":[2,30],\"770\":[2,17],\"771\":[2,20],\"772\":[2,28],\"773\":[2,20],\"774\":[2,17],\"775\":[2,19],\"776\":[2,22],\"777\":[2,48],\"778\":[2,68],\"779\":[2,21],\"780\":[2,19],\"781\":[2,19],\"782\":[2,41],\"783\":[2,49],\"784\":[2,56],\"785\":[2,25],\"786\":[3,51],\"787\":[2],\"788\":[2,18],\"789\":[2,17],\"790\":[2,15],\"791\":[2,16],\"792\":[2,20],\"793\":[2,17],\"794\":[2,26],\"795\":[2,25],\"796\":[2],\"797\":[2,15],\"798\":[2,15],\"799\":[2,17],\"800\":[2,22],\"801\":[2,17],\"802\":[2,12],\"803\":[1,29],\"804\":[1,28],\"805\":[2,27],\"806\":[2],\"807\":[2,29],\"808\":[4,4],\"809\":[3,10],\"810\":[2,32],\"811\":[4],\"812\":[3,41],\"813\":[3,60],\"814\":[3,59],\"815\":[4,6],\"816\":[3,6],\"817\":[3,17],\"818\":[3,20],\"819\":[2,25],\"820\":[3,32],\"821\":[2,13],\"822\":[3,35],\"823\":[4,25],\"824\":[3,57],\"825\":[3,38],\"826\":[2,18],\"827\":[2,33],\"828\":[2],\"829\":[2,35],\"830\":[2,8],\"831\":[3],\"832\":[3,16],\"833\":[2,2],\"834\":[2,14],\"835\":[3,18],\"836\":[4,21],\"837\":[3,21],\"838\":[2,23],\"839\":[2,16],\"840\":[2,19],\"841\":[2,20],\"842\":[2,10],\"843\":[2,22],\"844\":[2,18],\"845\":[2,18],\"846\":[2,12],\"847\":[3],\"848\":[2,25],\"849\":[2,18],\"850\":[2,27],\"851\":[3],\"852\":[2,19],\"853\":[2,20],\"854\":[2,21],\"855\":[2,18],\"856\":[2,19],\"857\":[2,20],\"858\":[2,26],\"859\":[2,36],\"860\":[2,18],\"861\":[2,19],\"862\":[2,14],\"863\":[2,11],\"864\":[2,35],\"865\":[2,34],\"866\":[2,10],\"867\":[2,15],\"868\":[2,26],\"869\":[2,19],\"870\":[2,14],\"871\":[2,11],\"872\":[2,22],\"873\":[2,15],\"874\":[2,38],\"875\":[2,5],\"876\":[2,10],\"877\":[2,24],\"878\":[2,4],\"879\":[3],\"880\":[2,17],\"881\":[2,12],\"882\":[2,9],\"883\":[2,7],\"884\":[2,43],\"885\":[3,28],\"886\":[3,14],\"887\":[2,36],\"888\":[2,54],\"889\":[2,28],\"890\":[2,23],\"891\":[2,7],\"892\":[6,26],\"893\":[9,50],\"894\":[2,36],\"895\":[2,31],\"896\":[2,26],\"897\":[2,31],\"898\":[2,17],\"899\":[2,29],\"900\":[3],\"901\":[2,6],\"902\":[1,7],\"903\":[1,17],\"904\":[1,7],\"905\":[2,21],\"906\":[2,28],\"907\":[2,15],\"908\":[2,15],\"909\":[2,13],\"910\":[2,45],\"911\":[2,27],\"912\":[2,27],\"913\":[2,25],\"914\":[2,25],\"915\":[2,20],\"916\":[2,2],\"917\":[3,12],\"918\":[3,12],\"919\":[2,17],\"920\":[2,6],\"921\":[1,4],\"922\":[1,6],\"923\":[1,8],\"924\":[2,21],\"925\":[2,30],\"926\":[2,33],\"927\":[2,14],\"928\":[1,5],\"929\":[1,19],\"930\":[2,25],\"931\":[2,18],\"932\":[2,45],\"933\":[2,28],\"934\":[2,34],\"935\":[2,34],\"936\":[2,20],\"937\":[2,34],\"938\":[2,20],\"939\":[2,37],\"940\":[4],\"941\":[2,11],\"942\":[1,6],\"943\":[1,7],\"944\":[2,14],\"945\":[2,31],\"946\":[2,42],\"947\":[2,25],\"948\":[2,20],\"949\":[2,20],\"950\":[2,37],\"951\":[2,22],\"952\":[2,26],\"953\":[2,6],\"954\":[1,5],\"955\":[1,9],\"956\":[1,5],\"957\":[1,3],\"958\":[1,15],\"959\":[2,33],\"960\":[2,35],\"961\":[2,28],\"962\":[2,15],\"963\":[2,26],\"964\":[2,22],\"965\":[2,21],\"966\":[2,16],\"967\":[2,20],\"968\":[2,24],\"969\":[2,28],\"970\":[2,22],\"971\":[2,37],\"972\":[3,9],\"973\":[2,2],\"974\":[2,10],\"975\":[2,8],\"976\":[2,11],\"977\":[2,11],\"978\":[2,5],\"979\":[2,2],\"980\":[2,2],\"981\":[2,2],\"982\":[2,2],\"983\":[3,3],\"984\":[1,36],\"985\":[1,22],\"986\":[1,19],\"987\":[1,41],\"988\":[2,2],\"989\":[2,28],\"990\":[2,26],\"991\":[2,17],\"992\":[2,27],\"993\":[2,16],\"994\":[1,12],\"995\":[1,4],\"996\":[2,15],\"997\":[2,56],\"998\":[2,42],\"999\":[2,15],\"1000\":[2,34],\"1001\":[2,33],\"1002\":[2,6],\"1003\":[1,13],\"1004\":[1,14],\"1005\":[1,9],\"1006\":[3,28],\"1007\":[3,14],\"1008\":[2,36],\"1009\":[2,54],\"1010\":[2],\"1011\":[2,13],\"1012\":[2,4],\"1013\":[2,12],\"1014\":[2],\"1015\":[3,23],\"1016\":[3,4],\"1017\":[2,5],\"1018\":[2],\"1019\":[3,10],\"1020\":[3,14],\"1021\":[3],\"1022\":[2,1],\"1023\":[2],\"1024\":[2,9],\"1025\":[3,11],\"1026\":[5,9],\"1027\":[3,16],\"1028\":[3],\"1029\":[3,12],\"1030\":[3,8],\"1031\":[3,9],\"1032\":[3,2],\"1033\":[3,2],\"1034\":[2,7],\"1035\":[2,27],\"1036\":[3],\"1037\":[2],\"1038\":[2,40],\"1039\":[2],\"1040\":[3,19],\"1041\":[2,8],\"1042\":[3,6],\"1043\":[2],\"1044\":[4,4],\"1045\":[4,8],\"1046\":[2,6],\"1047\":[2,8],\"1048\":[2],\"1049\":[4,9],\"1050\":[4,13],\"1051\":[3,12],\"1052\":[2],\"1053\":[2,5],\"1054\":[2,2],\"1055\":[2,3],\"1056\":[2,21],\"1057\":[2],\"1058\":[2,47],\"1059\":[2,92],\"1060\":[2,50],\"1061\":[2,15],\"1062\":[2,2],\"1063\":[2,19],\"1064\":[3],\"1065\":[2],\"1066\":[2,6],\"1067\":[2,2],\"1068\":[2],\"1069\":[3,7],\"1070\":[3,10],\"1071\":[2,10],\"1072\":[2,9],\"1073\":[2,11],\"1074\":[2,4],\"1075\":[3,27],\"1076\":[3,19],\"1077\":[2],\"1078\":[2,6],\"1079\":[2,1],\"1080\":[2,5],\"1081\":[2,7],\"1082\":[2,16],\"1083\":[2,24],\"1084\":[3],\"1085\":[3],\"1086\":[2,5],\"1087\":[2,4],\"1088\":[2,10],\"1089\":[2,14],\"1090\":[2,6],\"1091\":[3],\"1092\":[2,6],\"1093\":[2,12],\"1094\":[2,14],\"1095\":[2,6],\"1096\":[2,9],\"1097\":[2,12],\"1098\":[3,17],\"1099\":[3],\"1100\":[2,9],\"1101\":[2,11],\"1102\":[2,27],\"1103\":[2,27],\"1104\":[2,5],\"1105\":[3],\"1106\":[2,6],\"1107\":[2,7],\"1108\":[2,12],\"1109\":[2],\"1110\":[2,5],\"1111\":[2,10],\"1112\":[3,16],\"1113\":[2,8],\"1114\":[3,20],\"1115\":[2,29],\"1116\":[2,40],\"1117\":[2,29],\"1118\":[2],\"1119\":[2,8],\"1120\":[2,6],\"1121\":[4,41],\"1122\":[2,17],\"1123\":[3,5],\"1124\":[2,16],\"1125\":[2,30],\"1126\":[2,19],\"1127\":[2,8],\"1128\":[3,8],\"1129\":[3,2],\"1130\":[2],\"1131\":[3,11],\"1132\":[3,3],\"1133\":[3,20],\"1134\":[3,25],\"1135\":[2,14],\"1136\":[2,2],\"1137\":[3],\"1138\":[2,2],\"1139\":[2,28],\"1140\":[2,3],\"1141\":[3,38],\"1142\":[2],\"1143\":[3,10],\"1144\":[2,9],\"1145\":[2,19],\"1146\":[2,4],\"1147\":[2],\"1148\":[2,9],\"1149\":[2,14],\"1150\":[2,3],\"1151\":[2,10],\"1152\":[2,5],\"1153\":[2,21],\"1154\":[2,3],\"1155\":[2,6],\"1156\":[2,3],\"1157\":[2,40],\"1158\":[2],\"1159\":[2,7],\"1160\":[2],\"1161\":[5,16],\"1162\":[2,17],\"1163\":[4,11],\"1164\":[2,5],\"1165\":[3,20],\"1166\":[3],\"1167\":[2,4],\"1168\":[3,4],\"1169\":[4,6],\"1170\":[4,8],\"1171\":[2,11],\"1172\":[2,18],\"1173\":[2],\"1174\":[2,11],\"1175\":[2,48],\"1176\":[2,23],\"1177\":[4,17],\"1178\":[2],\"1179\":[1,19],\"1180\":[2,10],\"1181\":[2,30],\"1182\":[2],\"1183\":[2,9],\"1184\":[2,29],\"1185\":[2,16],\"1186\":[4,57],\"1187\":[3],\"1188\":[2,7],\"1189\":[3,26],\"1190\":[2,4],\"1191\":[2,6],\"1192\":[2,5],\"1193\":[3,4],\"1194\":[3,4],\"1195\":[2,8],\"1196\":[2,7],\"1197\":[2,9],\"1198\":[2,24],\"1199\":[2,5],\"1200\":[2,9],\"1201\":[2],\"1202\":[4,19],\"1203\":[3,16],\"1204\":[4,59],\"1205\":[3],\"1206\":[2],\"1207\":[2,6],\"1208\":[2,12],\"1209\":[2,12],\"1210\":[2,9],\"1211\":[2,7],\"1212\":[2],\"1213\":[3,6],\"1214\":[3,14],\"1215\":[2],\"1216\":[2,10],\"1217\":[2,3],\"1218\":[3,17],\"1219\":[2,16],\"1220\":[2,29],\"1221\":[2,9],\"1222\":[2,20],\"1223\":[2,12],\"1224\":[2],\"1225\":[3,3],\"1226\":[3,11],\"1227\":[3,27],\"1228\":[2,8],\"1229\":[2],\"1230\":[1,23],\"1231\":[2],\"1232\":[2,11],\"1233\":[4,19],\"1234\":[4,18],\"1235\":[2,4],\"1236\":[3,15],\"1237\":[2,22],\"1238\":[2,27],\"1239\":[2,14],\"1240\":[2,18],\"1241\":[2,13],\"1242\":[2,3],\"1243\":[2,16],\"1244\":[2],\"1245\":[2,16],\"1246\":[2,30],\"1247\":[2,4],\"1248\":[3],\"1249\":[2],\"1250\":[2,24],\"1251\":[2,7],\"1252\":[2,13],\"1253\":[2,15],\"1254\":[2],\"1255\":[2,19],\"1256\":[2,4],\"1257\":[2,8],\"1258\":[2,31],\"1259\":[2,44],\"1260\":[2,4],\"1261\":[2,7],\"1262\":[2,15],\"1263\":[2,9],\"1264\":[2,9],\"1265\":[2],\"1266\":[2,41],\"1267\":[2,41],\"1268\":[2],\"1269\":[2],\"1270\":[2,33],\"1271\":[2,10],\"1272\":[3,9],\"1273\":[2,60],\"1274\":[2,20],\"1275\":[2],\"1276\":[2,9],\"1277\":[2,61],\"1278\":[2,13],\"1279\":[2],\"1280\":[3,24],\"1281\":[3,13],\"1282\":[2,42],\"1283\":[2,36],\"1284\":[2],\"1285\":[3,18],\"1286\":[2,6],\"1287\":[2,10],\"1288\":[2],\"1289\":[2,6],\"1290\":[2,6],\"1291\":[2,7],\"1292\":[3,41],\"1293\":[3,21],\"1294\":[2,9],\"1295\":[3,34],\"1296\":[3,19],\"1297\":[3,7],\"1298\":[3],\"1299\":[2],\"1300\":[1,6],\"1301\":[2,10],\"1302\":[2,22],\"1303\":[3,9],\"1304\":[2,34],\"1305\":[3,16],\"1306\":[2,12],\"1307\":[2,3],\"1308\":[2],\"1309\":[2,7],\"1310\":[2,13],\"1311\":[2,3],\"1312\":[2,7],\"1313\":[3,5],\"1314\":[2],\"1315\":[2,8],\"1316\":[3,22],\"1317\":[2,14],\"1318\":[2,6],\"1319\":[2,21],\"1320\":[2,8],\"1321\":[2,8],\"1322\":[2,3],\"1323\":[3,14],\"1324\":[3],\"1325\":[2],\"1326\":[2,4],\"1327\":[2],\"1328\":[3,16],\"1329\":[2,17],\"1330\":[2,32],\"1331\":[2,5],\"1332\":[2,9],\"1333\":[2,2],\"1334\":[2,6],\"1335\":[2,16],\"1336\":[2,12],\"1337\":[2,13],\"1338\":[2,34],\"1339\":[2,4],\"1340\":[2,4],\"1341\":[2,7],\"1342\":[2,17],\"1343\":[3,11],\"1344\":[2,14],\"1345\":[2,16],\"1346\":[3,7],\"1347\":[2],\"1348\":[2,9],\"1349\":[3,13],\"1350\":[3,11],\"1351\":[3,6],\"1352\":[3,24],\"1353\":[3,14],\"1354\":[3,25],\"1355\":[4,4],\"1356\":[2],\"1357\":[2,15],\"1358\":[3],\"1359\":[3,5],\"1360\":[2,13],\"1361\":[2,16],\"1362\":[2,8],\"1363\":[2,20],\"1364\":[2,12],\"1365\":[2],\"1366\":[4,23],\"1367\":[3,14],\"1368\":[3,29],\"1369\":[3],\"1370\":[2,14],\"1371\":[2],\"1372\":[3,3],\"1373\":[2,13],\"1374\":[3,3],\"1375\":[3,8],\"1376\":[2,44],\"1377\":[2,9],\"1378\":[2],\"1379\":[2,4],\"1380\":[3,22],\"1381\":[3,33],\"1382\":[2,24],\"1383\":[3,17],\"1384\":[2,24],\"1385\":[3,5],\"1386\":[3,8],\"1387\":[3,11],\"1388\":[3,16],\"1389\":[2,3],\"1390\":[2],\"1391\":[2,6],\"1392\":[2,15],\"1393\":[3],\"1394\":[2],\"1395\":[2,26],\"1396\":[2],\"1397\":[3,12],\"1398\":[2,13],\"1399\":[3,9],\"1400\":[2,15],\"1401\":[2,36],\"1402\":[2],\"1403\":[3,7],\"1404\":[5,15],\"1405\":[3,7],\"1406\":[3,11],\"1407\":[2,27],\"1408\":[2,37],\"1409\":[2,10],\"1410\":[2,10],\"1411\":[2,22],\"1412\":[2],\"1413\":[4,16],\"1414\":[3,11],\"1415\":[2,22],\"1416\":[2,21],\"1417\":[2],\"1418\":[3,9],\"1419\":[3,14],\"1420\":[3,12],\"1421\":[3],\"1422\":[2],\"1423\":[2,13],\"1424\":[2,24],\"1425\":[3],\"1426\":[3,62],\"1427\":[3,38],\"1428\":[2,69],\"1429\":[4,32],\"1430\":[3,18],\"1431\":[2,3],\"1432\":[3,15],\"1433\":[3,31],\"1434\":[3,16],\"1435\":[3,7],\"1436\":[2],\"1437\":[2,8],\"1438\":[2,2],\"1439\":[2,5],\"1440\":[2,36],\"1441\":[3,9],\"1442\":[2,29],\"1443\":[2,21],\"1444\":[2],\"1445\":[5,28],\"1446\":[4,19],\"1447\":[2,7],\"1448\":[2],\"1449\":[2,10],\"1450\":[2,5],\"1451\":[2,17],\"1452\":[2],\"1453\":[3,6],\"1454\":[3,10],\"1455\":[3,13],\"1456\":[2,11],\"1457\":[3,21],\"1458\":[2,21],\"1459\":[3,7],\"1460\":[3,20],\"1461\":[2,5],\"1462\":[2,6],\"1463\":[2,8],\"1464\":[2,3],\"1465\":[2],\"1466\":[3,19],\"1467\":[3,22],\"1468\":[3],\"1469\":[2],\"1470\":[2,5],\"1471\":[2,9],\"1472\":[2,12],\"1473\":[2,7],\"1474\":[2],\"1475\":[2,36],\"1476\":[2,9],\"1477\":[2,7],\"1478\":[2,11],\"1479\":[2],\"1480\":[2,5],\"1481\":[2,14],\"1482\":[2,6],\"1483\":[2,4],\"1484\":[2,9],\"1485\":[2,15],\"1486\":[2,3],\"1487\":[2,11],\"1488\":[3,31],\"1489\":[3,26],\"1490\":[2,13],\"1491\":[2,27],\"1492\":[3],\"1493\":[2],\"1494\":[4,13],\"1495\":[3,17],\"1496\":[2,8],\"1497\":[2,32],\"1498\":[2,16],\"1499\":[4,28],\"1500\":[4,48],\"1501\":[2],\"1502\":[1,13],\"1503\":[3],\"1504\":[2,7],\"1505\":[3,17],\"1506\":[3,21],\"1507\":[2,28],\"1508\":[2,10],\"1509\":[2,22],\"1510\":[2,17],\"1511\":[2,3],\"1512\":[4,41],\"1513\":[3,12],\"1514\":[2,3],\"1515\":[2,19],\"1516\":[2,8],\"1517\":[2,27],\"1518\":[3,12],\"1519\":[2],\"1520\":[4,13],\"1521\":[3,13],\"1522\":[3],\"1523\":[2],\"1524\":[2,5],\"1525\":[2,4],\"1526\":[2,37],\"1527\":[3,11],\"1528\":[3,13],\"1529\":[2,4],\"1530\":[2,15],\"1531\":[2,15],\"1532\":[2,11],\"1533\":[2,8],\"1534\":[2,23],\"1535\":[2],\"1536\":[2,16],\"1537\":[2,11],\"1538\":[6,8],\"1539\":[5,11],\"1540\":[6,5],\"1541\":[2,30],\"1542\":[2,4],\"1543\":[2,11],\"1544\":[3,4],\"1545\":[2],\"1546\":[2,36],\"1547\":[2,2],\"1548\":[6,11],\"1549\":[6,7],\"1550\":[7,9],\"1551\":[8,7],\"1552\":[2,7],\"1553\":[2],\"1554\":[2,14],\"1555\":[2,18],\"1556\":[2,17],\"1557\":[3],\"1558\":[2,5],\"1559\":[2,2],\"1560\":[3,32],\"1561\":[3,9],\"1562\":[2,13],\"1563\":[2,19],\"1564\":[2,13],\"1565\":[2,7],\"1566\":[2,16],\"1567\":[2,20],\"1568\":[2,2],\"1569\":[3],\"1570\":[2],\"1571\":[2,35],\"1572\":[2,7],\"1573\":[2,11],\"1574\":[2],\"1575\":[5,14],\"1576\":[5],\"1577\":[4,9],\"1578\":[4,10],\"1579\":[5,8],\"1580\":[5,10],\"1581\":[5,15],\"1582\":[5,11],\"1583\":[4,19],\"1584\":[3],\"1585\":[2,22],\"1586\":[2,16],\"1587\":[3,51],\"1588\":[3,17],\"1589\":[2,19],\"1590\":[2,19],\"1591\":[4,29],\"1592\":[4,42],\"1593\":[2,5],\"1594\":[2,12],\"1595\":[2,23],\"1596\":[3],\"1597\":[2,11],\"1598\":[2,19],\"1599\":[2,14],\"1600\":[2,50],\"1601\":[4,7],\"1602\":[2,7],\"1603\":[4,13],\"1604\":[2,8],\"1605\":[2],\"1606\":[2,5],\"1607\":[2,15],\"1608\":[2,15],\"1609\":[2,47],\"1610\":[2],\"1611\":[2,13],\"1612\":[2,15],\"1613\":[2,6],\"1614\":[3],\"1615\":[2],\"1616\":[2,56],\"1617\":[2,8],\"1618\":[2,6],\"1619\":[2,13],\"1620\":[3,11],\"1621\":[3,49],\"1622\":[3,13],\"1623\":[2],\"1624\":[2,5],\"1625\":[2,17],\"1626\":[2,16],\"1627\":[2,16],\"1628\":[2,11],\"1629\":[2],\"1630\":[4,58],\"1631\":[4,20],\"1632\":[3],\"1633\":[2],\"1634\":[2,10],\"1635\":[2,20],\"1636\":[3,22],\"1637\":[2,33],\"1638\":[2,42],\"1639\":[2],\"1640\":[2,10],\"1641\":[2,13],\"1642\":[2],\"1643\":[4,18],\"1644\":[3,3],\"1645\":[3,9],\"1646\":[3,5],\"1647\":[2,16],\"1648\":[2,25],\"1649\":[2],\"1650\":[2,28],\"1651\":[2],\"1652\":[4,37],\"1653\":[3,52],\"1654\":[4,52],\"1655\":[2],\"1656\":[2,22],\"1657\":[2,19],\"1658\":[3,7],\"1659\":[4,19],\"1660\":[2,26],\"1661\":[3,17],\"1662\":[3,4],\"1663\":[4,15],\"1664\":[4,16],\"1665\":[2,8],\"1666\":[2,9],\"1667\":[2,22],\"1668\":[3,15],\"1669\":[2,11],\"1670\":[4,17],\"1671\":[3,11],\"1672\":[2],\"1673\":[2,16],\"1674\":[4,14],\"1675\":[2,21],\"1676\":[5,3],\"1677\":[3,10],\"1678\":[2,26],\"1679\":[2,11],\"1680\":[2,102],\"1681\":[3],\"1682\":[2],\"1683\":[3,16],\"1684\":[3,16],\"1685\":[3,9],\"1686\":[2,1],\"1687\":[3,20],\"1688\":[2,22],\"1689\":[2,21],\"1690\":[2,11],\"1691\":[2],\"1692\":[1,18],\"1693\":[2,11],\"1694\":[2,18],\"1695\":[3],\"1696\":[2,8],\"1697\":[2],\"1698\":[3,6],\"1699\":[2,6],\"1700\":[3,7],\"1701\":[3,5],\"1702\":[2,6],\"1703\":[4,17],\"1704\":[4,8],\"1705\":[2,9],\"1706\":[2,8],\"1707\":[3],\"1708\":[2],\"1709\":[2,4],\"1710\":[2,10],\"1711\":[2,16],\"1712\":[2,3],\"1713\":[1,11],\"1714\":[2],\"1715\":[3,4],\"1716\":[3,12],\"1717\":[4,6],\"1718\":[4,9],\"1719\":[2,13],\"1720\":[2,56],\"1721\":[3,10],\"1722\":[3,10],\"1723\":[2],\"1724\":[3,11],\"1725\":[3,9],\"1726\":[2],\"1727\":[1,40],\"1728\":[2,46],\"1729\":[2,86],\"1730\":[2],\"1731\":[2],\"1732\":[2,3],\"1733\":[3,1],\"1734\":[2,5],\"1735\":[2,24],\"1736\":[2,3],\"1737\":[2,45],\"1738\":[2,2],\"1739\":[2,9],\"1740\":[2,59],\"1741\":[2,21],\"1742\":[2,7],\"1743\":[3,8],\"1744\":[3],\"1745\":[3,7],\"1746\":[3,5],\"1747\":[2,12],\"1748\":[3,3],\"1749\":[2,27],\"1750\":[2,3],\"1751\":[3],\"1752\":[2],\"1753\":[2,7],\"1754\":[3,15],\"1755\":[3,25],\"1756\":[2,8],\"1757\":[2,44],\"1758\":[2,2],\"1759\":[2,26],\"1760\":[2,44],\"1761\":[3,3],\"1762\":[2,13],\"1763\":[2,24],\"1764\":[2],\"1765\":[2,12],\"1766\":[3,2],\"1767\":[4,11],\"1768\":[2,53],\"1769\":[2,39],\"1770\":[3,21],\"1771\":[2,12],\"1772\":[3,18],\"1773\":[3,14],\"1774\":[3,12],\"1775\":[2,15],\"1776\":[2,9],\"1777\":[2,1],\"1778\":[2,15],\"1779\":[2,6],\"1780\":[2,24],\"1781\":[3,12],\"1782\":[3,2],\"1783\":[2,7],\"1784\":[2,51],\"1785\":[2,10],\"1786\":[2,6],\"1787\":[2,5],\"1788\":[2,9],\"1789\":[2,9],\"1790\":[2,13],\"1791\":[2],\"1792\":[3,5],\"1793\":[3,12],\"1794\":[3,9],\"1795\":[3,39],\"1796\":[3,13],\"1797\":[3,6],\"1798\":[3,8],\"1799\":[2,24],\"1800\":[3,19],\"1801\":[4,10],\"1802\":[2,11],\"1803\":[4,17],\"1804\":[2,55],\"1805\":[3],\"1806\":[2,4],\"1807\":[2,11],\"1808\":[2,15],\"1809\":[2,15],\"1810\":[2,69],\"1811\":[2],\"1812\":[2,17],\"1813\":[2,13],\"1814\":[3,18],\"1815\":[4,13],\"1816\":[2,9],\"1817\":[2,51],\"1818\":[3],\"1819\":[2],\"1820\":[2,16],\"1821\":[2,13],\"1822\":[2,17],\"1823\":[2,13],\"1824\":[2,9],\"1825\":[2],\"1826\":[2,39],\"1827\":[2,2],\"1828\":[2,3],\"1829\":[3],\"1830\":[1,29],\"1831\":[1,14],\"1832\":[1,2],\"1833\":[3],\"1834\":[3,3],\"1835\":[2,14],\"1836\":[2,14],\"1837\":[2,10],\"1838\":[2,2],\"1839\":[5,7],\"1840\":[4,13],\"1841\":[4,2],\"1842\":[2,21],\"1843\":[6,14],\"1844\":[6,12],\"1845\":[5,15],\"1846\":[2,3],\"1847\":[2,8],\"1848\":[3,21],\"1849\":[4],\"1850\":[2,11],\"1851\":[3,21],\"1852\":[3,19],\"1853\":[3,4],\"1854\":[3,18],\"1855\":[3,19],\"1856\":[3],\"1857\":[3],\"1858\":[2,11],\"1859\":[2,15],\"1860\":[5,6],\"1861\":[2,5],\"1862\":[3,5],\"1863\":[2],\"1864\":[2],\"1865\":[2,7],\"1866\":[3,10],\"1867\":[3,12],\"1868\":[3,11],\"1869\":[4,21],\"1870\":[3,5],\"1871\":[2,5],\"1872\":[3,11],\"1873\":[2,6],\"1874\":[3,14],\"1875\":[2],\"1876\":[3,8],\"1877\":[3,6],\"1878\":[2,7],\"1879\":[3],\"1880\":[3],\"1881\":[2,18],\"1882\":[2,14],\"1883\":[4,17],\"1884\":[3,5],\"1885\":[4,16],\"1886\":[4,16],\"1887\":[2,28],\"1888\":[2,4],\"1889\":[3,11],\"1890\":[3,23],\"1891\":[3,23],\"1892\":[3,9],\"1893\":[4,10],\"1894\":[2,10],\"1895\":[3,14],\"1896\":[3,3],\"1897\":[3,22],\"1898\":[3,10],\"1899\":[3,24],\"1900\":[3,6],\"1901\":[3,5],\"1902\":[2,48],\"1903\":[2,13],\"1904\":[3,9],\"1905\":[3,42],\"1906\":[4,34],\"1907\":[2],\"1908\":[3],\"1909\":[2,30],\"1910\":[2,20],\"1911\":[2],\"1912\":[5,39],\"1913\":[3,15],\"1914\":[2,21],\"1915\":[3,7],\"1916\":[3,14],\"1917\":[2,3],\"1918\":[3,18],\"1919\":[2],\"1920\":[2],\"1921\":[2,10],\"1922\":[3,36],\"1923\":[3,5],\"1924\":[3,10],\"1925\":[3,8],\"1926\":[2,29],\"1927\":[2,2],\"1928\":[2,40],\"1929\":[2],\"1930\":[2,7],\"1931\":[2,19],\"1932\":[2],\"1933\":[2,21],\"1934\":[2,10],\"1935\":[3,49],\"1936\":[2,28],\"1937\":[2,2],\"1938\":[2,9],\"1939\":[2,7],\"1940\":[3,30],\"1941\":[3,6],\"1942\":[1,9],\"1943\":[1,6],\"1944\":[3],\"1945\":[3],\"1946\":[1,20],\"1947\":[2,13],\"1948\":[2,31],\"1949\":[2,4],\"1950\":[3,5],\"1951\":[3,11],\"1952\":[2,3],\"1953\":[3,2],\"1954\":[3,3],\"1955\":[2,34],\"1956\":[2],\"1957\":[3,41],\"1958\":[3,59],\"1959\":[2,34],\"1960\":[3],\"1961\":[2],\"1962\":[2,5],\"1963\":[2,12],\"1964\":[3,15],\"1965\":[3,6],\"1966\":[3],\"1967\":[3,22],\"1968\":[2,27],\"1969\":[4,48],\"1970\":[2,6],\"1971\":[4,14],\"1972\":[4,10],\"1973\":[4,13],\"1974\":[3,12],\"1975\":[2],\"1976\":[2,8],\"1977\":[1,3],\"1978\":[2,7],\"1979\":[2,4],\"1980\":[2,15],\"1981\":[2,17],\"1982\":[2,13],\"1983\":[3],\"1984\":[2],\"1985\":[4,17],\"1986\":[3,15],\"1987\":[2,6],\"1988\":[2],\"1989\":[2,11],\"1990\":[2],\"1991\":[3,15],\"1992\":[2,12],\"1993\":[3,26],\"1994\":[2,4],\"1995\":[3,46],\"1996\":[3,42],\"1997\":[2,11],\"1998\":[2,1],\"1999\":[4,8],\"2000\":[4,7],\"2001\":[3,35],\"2002\":[2,2],\"2003\":[3,13],\"2004\":[3,7],\"2005\":[3,10],\"2006\":[3],\"2007\":[3],\"2008\":[2,15],\"2009\":[2,11],\"2010\":[2,9],\"2011\":[2,2],\"2012\":[3,7],\"2013\":[3,8],\"2014\":[3],\"2015\":[7,34],\"2016\":[8,20],\"2017\":[8,4],\"2018\":[2,11],\"2019\":[3,2],\"2020\":[3],\"2021\":[2,23],\"2022\":[3,14],\"2023\":[2,29],\"2024\":[2,6],\"2025\":[2,14],\"2026\":[2],\"2027\":[3,4],\"2028\":[3,10],\"2029\":[3],\"2030\":[1,4],\"2031\":[4,5],\"2032\":[2,5],\"2033\":[3,4],\"2034\":[4],\"2035\":[3,5],\"2036\":[2,4],\"2037\":[2,8],\"2038\":[2,12],\"2039\":[2,7],\"2040\":[2,8],\"2041\":[2,2],\"2042\":[3],\"2043\":[2,6],\"2044\":[2,3],\"2045\":[2,34],\"2046\":[2,2],\"2047\":[2],\"2048\":[3,21],\"2049\":[4,16],\"2050\":[4,7],\"2051\":[2,7],\"2052\":[3,44],\"2053\":[2,41],\"2054\":[3,8],\"2055\":[3,14],\"2056\":[3,30],\"2057\":[2,2],\"2058\":[1,6],\"2059\":[3],\"2060\":[3,26],\"2061\":[4,11],\"2062\":[4,6],\"2063\":[2,3],\"2064\":[2,43],\"2065\":[3,46],\"2066\":[2,4],\"2067\":[2,4],\"2068\":[1,5],\"2069\":[2,19],\"2070\":[2,11],\"2071\":[4,47],\"2072\":[3],\"2073\":[2,9],\"2074\":[1,33],\"2075\":[2,5],\"2076\":[3,31],\"2077\":[3,28],\"2078\":[3,32],\"2079\":[3,42],\"2080\":[2],\"2081\":[2,20],\"2082\":[5,51],\"2083\":[5,6],\"2084\":[4,57],\"2085\":[4,3],\"2086\":[2,27],\"2087\":[3],\"2088\":[2],\"2089\":[2,5],\"2090\":[2,11],\"2091\":[2,17],\"2092\":[2,8],\"2093\":[2],\"2094\":[1,9],\"2095\":[3,19],\"2096\":[3,20],\"2097\":[2],\"2098\":[3,4],\"2099\":[3,20],\"2100\":[2,3],\"2101\":[2,25],\"2102\":[2,4],\"2103\":[3,5],\"2104\":[3,7],\"2105\":[2,10],\"2106\":[3,44],\"2107\":[3],\"2108\":[2,9],\"2109\":[2,28],\"2110\":[2,3],\"2111\":[3,48],\"2112\":[3,3],\"2113\":[2,3],\"2114\":[3],\"2115\":[2,7],\"2116\":[4,10],\"2117\":[2,12],\"2118\":[4,52],\"2119\":[2,2],\"2120\":[2,16],\"2121\":[3,42],\"2122\":[2,6],\"2123\":[2,9],\"2124\":[2,22],\"2125\":[2,2],\"2126\":[3,35],\"2127\":[3,36],\"2128\":[2,14],\"2129\":[2,9],\"2130\":[2,5],\"2131\":[3,4],\"2132\":[2,7],\"2133\":[2,14],\"2134\":[3,13],\"2135\":[3,10],\"2136\":[3,28],\"2137\":[2,16],\"2138\":[3,10],\"2139\":[4,19],\"2140\":[2,11],\"2141\":[2],\"2142\":[1,12],\"2143\":[2,6],\"2144\":[2,9],\"2145\":[2],\"2146\":[3,19],\"2147\":[3,8],\"2148\":[2,10],\"2149\":[3,7],\"2150\":[3],\"2151\":[3,24],\"2152\":[3,27],\"2153\":[3,17],\"2154\":[3],\"2155\":[3,12],\"2156\":[3,28],\"2157\":[3,27],\"2158\":[2,24],\"2159\":[3],\"2160\":[2],\"2161\":[3,32],\"2162\":[3,13],\"2163\":[2,7],\"2164\":[3,26],\"2165\":[3,8],\"2166\":[2,41],\"2167\":[2,14],\"2168\":[2,71],\"2169\":[2,6],\"2170\":[3,3],\"2171\":[1,17],\"2172\":[2,16],\"2173\":[2,4],\"2174\":[2,14],\"2175\":[2,2],\"2176\":[2,3],\"2177\":[3],\"2178\":[2],\"2179\":[3,5],\"2180\":[2],\"2181\":[4,29],\"2182\":[3,10],\"2183\":[2,8],\"2184\":[3,10],\"2185\":[2,8],\"2186\":[3,18],\"2187\":[2,5],\"2188\":[2],\"2189\":[1,13],\"2190\":[2,11],\"2191\":[2,6],\"2192\":[4,18],\"2193\":[2,23],\"2194\":[2,22],\"2195\":[3,15],\"2196\":[3,21],\"2197\":[3],\"2198\":[2],\"2199\":[2,8],\"2200\":[2,18],\"2201\":[2],\"2202\":[2,9],\"2203\":[4,19],\"2204\":[2,16],\"2205\":[2,14],\"2206\":[2,21],\"2207\":[2,11],\"2208\":[3],\"2209\":[2,13],\"2210\":[2,9],\"2211\":[2],\"2212\":[3,11],\"2213\":[3,11],\"2214\":[2,59],\"2215\":[3],\"2216\":[2,5],\"2217\":[2,29],\"2218\":[2,3],\"2219\":[3,12],\"2220\":[3,29],\"2221\":[2,26],\"2222\":[2],\"2223\":[3,18],\"2224\":[3,11],\"2225\":[3,42],\"2226\":[2,14],\"2227\":[3],\"2228\":[2],\"2229\":[2,17],\"2230\":[2,8],\"2231\":[2,30],\"2232\":[2,34],\"2233\":[2,59],\"2234\":[2,36],\"2235\":[3],\"2236\":[2,21],\"2237\":[2,22],\"2238\":[2,50],\"2239\":[2,17],\"2240\":[2,18],\"2241\":[3,22],\"2242\":[3,16],\"2243\":[3,38],\"2244\":[2,51],\"2245\":[3],\"2246\":[2,7],\"2247\":[2,30],\"2248\":[2,11],\"2249\":[2,7],\"2250\":[2,17],\"2251\":[2,5],\"2252\":[3,43],\"2253\":[3,21],\"2254\":[3],\"2255\":[4,28],\"2256\":[4,18],\"2257\":[4,41],\"2258\":[4,46],\"2259\":[3],\"2260\":[2,16],\"2261\":[2,13],\"2262\":[2,11],\"2263\":[2,15],\"2264\":[2,33],\"2265\":[2,8],\"2266\":[4,14],\"2267\":[5,18],\"2268\":[8,20],\"2269\":[6,17],\"2270\":[2,2],\"2271\":[3],\"2272\":[2],\"2273\":[2,6],\"2274\":[3,10],\"2275\":[4,18],\"2276\":[4,12],\"2277\":[2,25],\"2278\":[2,9],\"2279\":[2,15],\"2280\":[2,34],\"2281\":[3,5],\"2282\":[2,38],\"2283\":[3],\"2284\":[2],\"2285\":[3,39],\"2286\":[2,29],\"2287\":[2,7],\"2288\":[2],\"2289\":[3,16],\"2290\":[1,10],\"2291\":[3,13],\"2292\":[1,12],\"2293\":[2,51],\"2294\":[2],\"2295\":[2,25],\"2296\":[2,89],\"2297\":[2],\"2298\":[2,19],\"2299\":[3,11],\"2300\":[3,12],\"2301\":[2,20],\"2302\":[3,16],\"2303\":[3,12],\"2304\":[3,14],\"2305\":[2],\"2306\":[2,29],\"2307\":[5,8],\"2308\":[3,8],\"2309\":[3,6],\"2310\":[3,14],\"2311\":[2,34],\"2312\":[4,12],\"2313\":[5,7],\"2314\":[4,18],\"2315\":[2,28],\"2316\":[2,2],\"2317\":[3,22],\"2318\":[3],\"2319\":[2],\"2320\":[2,10],\"2321\":[1,23],\"2322\":[2,7],\"2323\":[3,10],\"2324\":[2,6],\"2325\":[2,18],\"2326\":[2,19],\"2327\":[3,5],\"2328\":[3,19],\"2329\":[3,13],\"2330\":[2,19],\"2331\":[2],\"2332\":[2,5],\"2333\":[2,21],\"2334\":[3,7],\"2335\":[2,7],\"2336\":[2],\"2337\":[4,3],\"2338\":[4,31],\"2339\":[3,4],\"2340\":[5,16],\"2341\":[2],\"2342\":[3,22],\"2343\":[5,37],\"2344\":[3,27],\"2345\":[2,39],\"2346\":[2],\"2347\":[6,5],\"2348\":[3,9],\"2349\":[3,36],\"2350\":[3,2],\"2351\":[2,17],\"2352\":[2,9],\"2353\":[2,6],\"2354\":[2,10],\"2355\":[3,6],\"2356\":[3,10],\"2357\":[3,4],\"2358\":[2],\"2359\":[2,7],\"2360\":[2,4],\"2361\":[2,4],\"2362\":[2,16],\"2363\":[3,8],\"2364\":[3,11],\"2365\":[2,13],\"2366\":[2,18],\"2367\":[2,4],\"2368\":[4,3],\"2369\":[2,24],\"2370\":[4,5],\"2371\":[2,23],\"2372\":[3,6],\"2373\":[2,9],\"2374\":[3,3],\"2375\":[2,9],\"2376\":[4,5],\"2377\":[3,28],\"2378\":[3,5],\"2379\":[3],\"2380\":[2,3],\"2381\":[2,28],\"2382\":[3],\"2383\":[1,4],\"2384\":[1,7],\"2385\":[1,9],\"2386\":[1,10],\"2387\":[2,9],\"2388\":[2,7],\"2389\":[2,10],\"2390\":[2,9],\"2391\":[2,4],\"2392\":[2,34],\"2393\":[2,3],\"2394\":[3],\"2395\":[2],\"2396\":[2,10],\"2397\":[2,4],\"2398\":[2,10],\"2399\":[1,15],\"2400\":[2,12],\"2401\":[2],\"2402\":[5,3],\"2403\":[2,10],\"2404\":[3,29],\"2405\":[7,15],\"2406\":[3,8],\"2407\":[2,15],\"2408\":[5,2],\"2409\":[3,11],\"2410\":[3,18],\"2411\":[5,2],\"2412\":[3,11],\"2413\":[3,12],\"2414\":[7,13],\"2415\":[3,8],\"2416\":[3,12],\"2417\":[2,2],\"2418\":[2,2],\"2419\":[2,2],\"2420\":[3,8],\"2421\":[3,8],\"2422\":[3,7],\"2423\":[3,9],\"2424\":[3,11],\"2425\":[3,13],\"2426\":[3,12],\"2427\":[3,14],\"2428\":[3,12],\"2429\":[2,3],\"2430\":[2,2],\"2431\":[2,3],\"2432\":[3,10],\"2433\":[2,9],\"2434\":[3],\"2435\":[3,15],\"2436\":[4,22],\"2437\":[3,4],\"2438\":[2,6],\"2439\":[4,14],\"2440\":[2,21],\"2441\":[2,6],\"2442\":[3],\"2443\":[2],\"2444\":[2,18],\"2445\":[3,18],\"2446\":[2,21],\"2447\":[1,17],\"2448\":[3,24],\"2449\":[4,9],\"2450\":[3,33],\"2451\":[3,25],\"2452\":[3,5],\"2453\":[2,9],\"2454\":[2,13],\"2455\":[2,12],\"2456\":[2,3],\"2457\":[2,14],\"2458\":[3,29],\"2459\":[3,21],\"2460\":[3,20],\"2461\":[3,25],\"2462\":[2,14],\"2463\":[2,43],\"2464\":[2,8],\"2465\":[3,8],\"2466\":[3,8],\"2467\":[2,36],\"2468\":[3],\"2469\":[3,51],\"2470\":[3,15],\"2471\":[2,19],\"2472\":[3,13],\"2473\":[2],\"2474\":[3,29],\"2475\":[5,25],\"2476\":[2],\"2477\":[3,30],\"2478\":[3,22],\"2479\":[3,21],\"2480\":[3,25],\"2481\":[3,28],\"2482\":[3,14],\"2483\":[3,24],\"2484\":[3,29],\"2485\":[3,19],\"2486\":[2],\"2487\":[3,43],\"2488\":[5,33],\"2489\":[4,29],\"2490\":[2,16],\"2491\":[1,26],\"2492\":[1,3],\"2493\":[3],\"2494\":[3],\"2495\":[2,16],\"2496\":[2,10],\"2497\":[2,7],\"2498\":[2],\"2499\":[2],\"2500\":[6,21],\"2501\":[5,8],\"2502\":[8,24],\"2503\":[2],\"2504\":[3,18],\"2505\":[2,25],\"2506\":[2],\"2507\":[4,21],\"2508\":[5,26],\"2509\":[4,3],\"2510\":[2],\"2511\":[2],\"2512\":[2],\"2513\":[2],\"2514\":[2],\"2515\":[2],\"2516\":[2],\"2517\":[3],\"2518\":[2],\"2519\":[2],\"2520\":[2],\"2521\":[2],\"2522\":[2],\"2523\":[2],\"2524\":[2,8],\"2525\":[2,13],\"2526\":[2,17],\"2527\":[2,21],\"2528\":[5,2],\"2529\":[5,2],\"2530\":[2,5],\"2531\":[2,20],\"2532\":[2,2],\"2533\":[3],\"2534\":[2],\"2535\":[3,6],\"2536\":[2,5],\"2537\":[2,15],\"2538\":[2,17],\"2539\":[2,20],\"2540\":[2,12],\"2541\":[2,3],\"2542\":[2,16],\"2543\":[3,4],\"2544\":[2,4],\"2545\":[3,56],\"2546\":[4,24],\"2547\":[3,42],\"2548\":[3,44],\"2549\":[5,4],\"2550\":[3,16],\"2551\":[3,44],\"2552\":[3,6],\"2553\":[3],\"2554\":[2],\"2555\":[2,6],\"2556\":[2,19],\"2557\":[2],\"2558\":[5,24],\"2559\":[4,23],\"2560\":[2,6],\"2561\":[2,6],\"2562\":[2,27],\"2563\":[2],\"2564\":[2,9],\"2565\":[4,7],\"2566\":[2,18],\"2567\":[2,40],\"2568\":[2],\"2569\":[3,34],\"2570\":[3,50],\"2571\":[3,25],\"2572\":[2,1],\"2573\":[3,84],\"2574\":[2,6],\"2575\":[3,36],\"2576\":[2,19],\"2577\":[3,43],\"2578\":[2,4],\"2579\":[3,6],\"2580\":[3,8],\"2581\":[3,46],\"2582\":[2,22],\"2583\":[2,2],\"2584\":[2,6],\"2585\":[2],\"2586\":[3,9],\"2587\":[2,4],\"2588\":[3,23],\"2589\":[2],\"2590\":[4,7],\"2591\":[4,20],\"2592\":[2,7],\"2593\":[2,22],\"2594\":[5,4],\"2595\":[2,3],\"2596\":[2,2],\"2597\":[3,63],\"2598\":[2,3],\"2599\":[3,19],\"2600\":[3,82],\"2601\":[3,21],\"2602\":[2,22],\"2603\":[3,95],\"2604\":[3,22],\"2605\":[6,10],\"2606\":[2,5],\"2607\":[3,5],\"2608\":[3,23],\"2609\":[2,3],\"2610\":[3,13],\"2611\":[2,4],\"2612\":[3,59],\"2613\":[3,76],\"2614\":[3,11],\"2615\":[2],\"2616\":[4,4],\"2617\":[4,4],\"2618\":[4,4],\"2619\":[2,15],\"2620\":[3,29],\"2621\":[3,41],\"2622\":[3,9],\"2623\":[3,10],\"2624\":[3,51],\"2625\":[3,58],\"2626\":[3,3],\"2627\":[2,1],\"2628\":[3,8],\"2629\":[4,3],\"2630\":[4,3],\"2631\":[2,11],\"2632\":[1,9],\"2633\":[2],\"2634\":[4,46],\"2635\":[4,61],\"2636\":[2,7],\"2637\":[4,3],\"2638\":[4,19],\"2639\":[2,44],\"2640\":[3],\"2641\":[2],\"2642\":[2,23],\"2643\":[2,3],\"2644\":[2,14],\"2645\":[2],\"2646\":[2],\"2647\":[2,3],\"2648\":[3,11],\"2649\":[2,5],\"2650\":[4,7],\"2651\":[3,9],\"2652\":[3,18],\"2653\":[3,118],\"2654\":[2],\"2655\":[3,40],\"2656\":[3,69],\"2657\":[2,81],\"2658\":[3],\"2659\":[2],\"2660\":[2],\"2661\":[4,6],\"2662\":[5,30],\"2663\":[2,3],\"2664\":[3,12],\"2665\":[2,9],\"2666\":[2,7],\"2667\":[2,25],\"2668\":[2,42],\"2669\":[1,13],\"2670\":[3,9],\"2671\":[4,4],\"2672\":[2,40],\"2673\":[2,24],\"2674\":[2,130],\"2675\":[2,36],\"2676\":[2,25],\"2677\":[3],\"2678\":[3],\"2679\":[2,13],\"2680\":[2,2],\"2681\":[2,14],\"2682\":[5,44],\"2683\":[5,69],\"2684\":[2,36],\"2685\":[2],\"2686\":[2,41],\"2687\":[2,34],\"2688\":[2,37],\"2689\":[2,40],\"2690\":[2,47],\"2691\":[6,38],\"2692\":[3],\"2693\":[2],\"2694\":[2,18],\"2695\":[2,21],\"2696\":[2,4],\"2697\":[2,16],\"2698\":[2,9],\"2699\":[2,2],\"2700\":[2,14],\"2701\":[2,7],\"2702\":[2,2],\"2703\":[2,16],\"2704\":[2,12],\"2705\":[2,15],\"2706\":[2],\"2707\":[3,7],\"2708\":[3,16],\"2709\":[4,5],\"2710\":[2],\"2711\":[2,10],\"2712\":[2,3],\"2713\":[3,8],\"2714\":[3,5],\"2715\":[3,13],\"2716\":[3,28],\"2717\":[1,14],\"2718\":[2,2],\"2719\":[2,2],\"2720\":[4,7],\"2721\":[4,5],\"2722\":[3,14],\"2723\":[2,16],\"2724\":[2],\"2725\":[2,2],\"2726\":[2,2],\"2727\":[2,10],\"2728\":[2],\"2729\":[3],\"2730\":[2,4],\"2731\":[3,22],\"2732\":[4,6],\"2733\":[4,10],\"2734\":[2,16],\"2735\":[3,11],\"2736\":[3],\"2737\":[3,16],\"2738\":[4,5],\"2739\":[3,4],\"2740\":[5,2],\"2741\":[3,11],\"2742\":[4,2],\"2743\":[4,23],\"2744\":[2],\"2745\":[1,7],\"2746\":[3,23],\"2747\":[3,10],\"2748\":[3,7],\"2749\":[4,4],\"2750\":[3,50],\"2751\":[2,13],\"2752\":[2,5],\"2753\":[3,14],\"2754\":[3,6],\"2755\":[3,19],\"2756\":[2],\"2757\":[2,8],\"2758\":[2,18],\"2759\":[2,15],\"2760\":[2,6],\"2761\":[2],\"2762\":[2,9],\"2763\":[2,3],\"2764\":[3,4],\"2765\":[2,7],\"2766\":[3,12],\"2767\":[2,4],\"2768\":[2,13],\"2769\":[3,4],\"2770\":[2,14],\"2771\":[2,20],\"2772\":[2,10],\"2773\":[2,14],\"2774\":[2,8],\"2775\":[3],\"2776\":[2],\"2777\":[1,18],\"2778\":[2,14],\"2779\":[2,29],\"2780\":[2,11],\"2781\":[2,11],\"2782\":[2,5],\"2783\":[3,4],\"2784\":[2,3],\"2785\":[2,31],\"2786\":[2,5],\"2787\":[2,3],\"2788\":[2,7],\"2789\":[2,3],\"2790\":[2,11],\"2791\":[2],\"2792\":[3,6],\"2793\":[3,6],\"2794\":[2,15],\"2795\":[3,10],\"2796\":[3,7],\"2797\":[3,3],\"2798\":[3,8],\"2799\":[3,22],\"2800\":[3,25],\"2801\":[3,35],\"2802\":[3,19],\"2803\":[3,11],\"2804\":[3,28],\"2805\":[3,6],\"2806\":[4,6],\"2807\":[2,8],\"2808\":[2,15],\"2809\":[2,5],\"2810\":[2,10],\"2811\":[3,20],\"2812\":[3,33],\"2813\":[2,4],\"2814\":[3,54],\"2815\":[3,15],\"2816\":[3,5],\"2817\":[2],\"2818\":[2,8],\"2819\":[2,16],\"2820\":[2,33],\"2821\":[2,6],\"2822\":[2,16],\"2823\":[2,18],\"2824\":[2,21],\"2825\":[2,29],\"2826\":[2,5],\"2827\":[2,4],\"2828\":[3],\"2829\":[2],\"2830\":[1,8],\"2831\":[2,25],\"2832\":[3,11],\"2833\":[3,12],\"2834\":[2],\"2835\":[1,7],\"2836\":[2,9],\"2837\":[2,24],\"2838\":[2,9],\"2839\":[2,1],\"2840\":[2,2],\"2841\":[2,2],\"2842\":[3],\"2843\":[2],\"2844\":[1,9],\"2845\":[2,37],\"2846\":[2,56],\"2847\":[2,5],\"2848\":[3,4],\"2849\":[2,25],\"2850\":[2,51],\"2851\":[2],\"2852\":[2,6],\"2853\":[2,6],\"2854\":[3,6],\"2855\":[2,5],\"2856\":[2],\"2857\":[3,20],\"2858\":[3,28],\"2859\":[2,6],\"2860\":[2,6],\"2861\":[3,14],\"2862\":[2,48],\"2863\":[2,8],\"2864\":[2],\"2865\":[2],\"2866\":[2,3],\"2867\":[3,4],\"2868\":[4,8],\"2869\":[2,19],\"2870\":[2],\"2871\":[3,29],\"2872\":[3,57],\"2873\":[2,26],\"2874\":[2,9],\"2875\":[1,11],\"2876\":[2,8],\"2877\":[2,8],\"2878\":[2,9],\"2879\":[2,8],\"2880\":[2,6],\"2881\":[3],\"2882\":[2,7],\"2883\":[2,10],\"2884\":[2,9],\"2885\":[5,7],\"2886\":[2,1],\"2887\":[2,12],\"2888\":[3,30],\"2889\":[2,16],\"2890\":[3,18],\"2891\":[2,4],\"2892\":[2],\"2893\":[2,12],\"2894\":[3,31],\"2895\":[1,25],\"2896\":[3,22],\"2897\":[3],\"2898\":[3],\"2899\":[2,8],\"2900\":[2,17],\"2901\":[2,8],\"2902\":[2,18],\"2903\":[3,46],\"2904\":[2,11],\"2905\":[3,6],\"2906\":[2,7],\"2907\":[2,15],\"2908\":[3,3],\"2909\":[3,29],\"2910\":[3,22],\"2911\":[2,12],\"2912\":[2,11],\"2913\":[2,16],\"2914\":[2],\"2915\":[2,18],\"2916\":[2,14],\"2917\":[3],\"2918\":[2],\"2919\":[2,9],\"2920\":[2,25],\"2921\":[2,6],\"2922\":[1,5],\"2923\":[2,14],\"2924\":[1,16],\"2925\":[2,6],\"2926\":[2,8],\"2927\":[2],\"2928\":[2,6],\"2929\":[2,6],\"2930\":[2,20],\"2931\":[2],\"2932\":[3,13],\"2933\":[3,21],\"2934\":[6,22],\"2935\":[2,5],\"2936\":[2,6],\"2937\":[3,14],\"2938\":[4,28],\"2939\":[2,4],\"2940\":[4,9],\"2941\":[3,19],\"2942\":[3,26],\"2943\":[3,4],\"2944\":[2,4],\"2945\":[2,38],\"2946\":[2,5],\"2947\":[1,11],\"2948\":[1,8],\"2949\":[2,27],\"2950\":[2,32],\"2951\":[1,10],\"2952\":[3,4],\"2953\":[1,11],\"2954\":[2,8],\"2955\":[3,11],\"2956\":[2],\"2957\":[2,12],\"2958\":[2,4],\"2959\":[3,6],\"2960\":[2,6],\"2961\":[2,3],\"2962\":[2,12],\"2963\":[2,12],\"2964\":[2,13],\"2965\":[2,20],\"2966\":[2,20],\"2967\":[2,20],\"2968\":[2,17],\"2969\":[2,13],\"2970\":[2,5],\"2971\":[2,6],\"2972\":[2,9],\"2973\":[1,18],\"2974\":[2,10],\"2975\":[2,2],\"2976\":[1,11],\"2977\":[3],\"2978\":[2],\"2979\":[2,22],\"2980\":[2,8],\"2981\":[2,26],\"2982\":[2,10],\"2983\":[2,8],\"2984\":[2,6],\"2985\":[2],\"2986\":[3,16],\"2987\":[3,8],\"2988\":[2],\"2989\":[2,23],\"2990\":[2],\"2991\":[3,21],\"2992\":[2,37],\"2993\":[2,5],\"2994\":[2],\"2995\":[2,8],\"2996\":[2,24],\"2997\":[2,11],\"2998\":[2,19],\"2999\":[2,6],\"3000\":[3],\"3001\":[2],\"3002\":[2,25],\"3003\":[2,13],\"3004\":[2,6],\"3005\":[2,1],\"3006\":[2,24],\"3007\":[2,8],\"3008\":[2,12],\"3009\":[2,11],\"3010\":[2],\"3011\":[2,22],\"3012\":[2,13],\"3013\":[2,13],\"3014\":[3,8],\"3015\":[3,8],\"3016\":[2,6],\"3017\":[2,5],\"3018\":[2,9],\"3019\":[2,20],\"3020\":[2,40],\"3021\":[2],\"3022\":[2,10],\"3023\":[2,10],\"3024\":[2],\"3025\":[3,27],\"3026\":[3,18],\"3027\":[3,27],\"3028\":[2,7],\"3029\":[3,104],\"3030\":[3,54],\"3031\":[3,5],\"3032\":[2],\"3033\":[2,16],\"3034\":[2,6],\"3035\":[2,10],\"3036\":[2,9],\"3037\":[2,7],\"3038\":[2,4],\"3039\":[2,11],\"3040\":[2],\"3041\":[3,11],\"3042\":[2,10],\"3043\":[3,10],\"3044\":[3,18],\"3045\":[2],\"3046\":[4,20],\"3047\":[4,34],\"3048\":[2,5],\"3049\":[3,11],\"3050\":[5,8],\"3051\":[3,9],\"3052\":[2,15],\"3053\":[2,32],\"3054\":[2,33],\"3055\":[2],\"3056\":[4,12],\"3057\":[3,10],\"3058\":[2,12],\"3059\":[2],\"3060\":[2,8],\"3061\":[2,5],\"3062\":[2,15],\"3063\":[2],\"3064\":[3,7],\"3065\":[3,5],\"3066\":[3,5],\"3067\":[2,5],\"3068\":[2,22],\"3069\":[2,6],\"3070\":[1,15],\"3071\":[2,15],\"3072\":[2],\"3073\":[2,22],\"3074\":[3,3],\"3075\":[2,4],\"3076\":[2],\"3077\":[2,18],\"3078\":[2,7],\"3079\":[2,2],\"3080\":[3],\"3081\":[2,3],\"3082\":[2],\"3083\":[2,7],\"3084\":[3,10],\"3085\":[1,14],\"3086\":[2,12],\"3087\":[2,13],\"3088\":[2],\"3089\":[2,6],\"3090\":[3,17],\"3091\":[3,16],\"3092\":[2,18],\"3093\":[2,11],\"3094\":[2,27],\"3095\":[1],\"3096\":[2,9],\"3097\":[2,16],\"3098\":[2,13],\"3099\":[2,6],\"3100\":[1,8],\"3101\":[1,4],\"3102\":[3,19],\"3103\":[3],\"3104\":[1,12],\"3105\":[2,12],\"3106\":[2,22],\"3107\":[2,14],\"3108\":[2,59],\"3109\":[2],\"3110\":[1,54],\"3111\":[1,7],\"3112\":[3,2],\"3113\":[3,10],\"3114\":[4,34],\"3115\":[3,5],\"3116\":[1,5],\"3117\":[2,6],\"3118\":[2,12],\"3119\":[2,13],\"3120\":[2,8],\"3121\":[1,9],\"3122\":[2,6],\"3123\":[2,7],\"3124\":[2,41],\"3125\":[1,2],\"3126\":[2,11],\"3127\":[2,32],\"3128\":[1,2],\"3129\":[2,11],\"3130\":[2,13],\"3131\":[2,4],\"3132\":[1,5],\"3133\":[2,14],\"3134\":[2,16],\"3135\":[2,30],\"3136\":[3,26],\"3137\":[2,14],\"3138\":[1,12],\"3139\":[2,9],\"3140\":[2,18],\"3141\":[2,39],\"3142\":[2,61],\"3143\":[1,14],\"3144\":[2,40],\"3145\":[2,16],\"3146\":[3,8],\"3147\":[1,14],\"3148\":[2,18],\"3149\":[2,26],\"3150\":[3,9],\"3151\":[3,5],\"3152\":[2,21],\"3153\":[3,15],\"3154\":[2,28],\"3155\":[3],\"3156\":[1,4],\"3157\":[4,9],\"3158\":[3,18],\"3159\":[3,39],\"3160\":[2,61],\"3161\":[1,3],\"3162\":[2,15],\"3163\":[2,4],\"3164\":[3,45],\"3165\":[4,8],\"3166\":[3,2],\"3167\":[2,8],\"3168\":[1,4],\"3169\":[2,25],\"3170\":[2,5],\"3171\":[1,3],\"3172\":[2,21],\"3173\":[2,4],\"3174\":[1,5],\"3175\":[2,11],\"3176\":[2,13],\"3177\":[3,9],\"3178\":[2,6],\"3179\":[3,6],\"3180\":[2,10],\"3181\":[1,3],\"3182\":[2,19],\"3183\":[2,22],\"3184\":[1,3],\"3185\":[2,22],\"3186\":[2,18],\"3187\":[1,24],\"3188\":[2,36],\"3189\":[2,18],\"3190\":[3,10],\"3191\":[2,43],\"3192\":[1,4],\"3193\":[2,25],\"3194\":[2,6],\"3195\":[3,15],\"3196\":[1,6],\"3197\":[2,76],\"3198\":[2,20],\"3199\":[1,16],\"3200\":[1,11],\"3201\":[3,10],\"3202\":[2,9],\"3203\":[1,3],\"3204\":[3],\"3205\":[2,22],\"3206\":[2,31],\"3207\":[3],\"3208\":[3],\"3209\":[2,50],\"3210\":[2,26],\"3211\":[2,52],\"3212\":[2,45],\"3213\":[2],\"3214\":[1,68],\"3215\":[2,17],\"3216\":[2,23],\"3217\":[1,60],\"3218\":[1,52],\"3219\":[1,6],\"3220\":[2,80],\"3221\":[2,63],\"3222\":[1,10],\"3223\":[3],\"3224\":[1,5],\"3225\":[4,58],\"3226\":[2,74],\"3227\":[1,77],\"3228\":[1,12],\"3229\":[1,4],\"3230\":[2,35],\"3231\":[2,83],\"3232\":[1,3],\"3233\":[1,25],\"3234\":[1,76],\"3235\":[1],\"3236\":[2,34],\"3237\":[2,72],\"3238\":[1,1],\"3239\":[2,28],\"3240\":[2,75],\"3241\":[1,13],\"3242\":[1,76],\"3243\":[1,9],\"3244\":[1,67],\"3245\":[1,12],\"3246\":[1,6],\"3247\":[1,24],\"3248\":[2,39],\"3249\":[2,80],\"3250\":[4,17],\"3251\":[1,4],\"3252\":[4,38],\"3253\":[2,93],\"3254\":[3],\"3255\":[2,4],\"3256\":[3,4],\"3257\":[2,5],\"3258\":[3],\"3259\":[2,25],\"3260\":[3,12],\"3261\":[3,32],\"3262\":[3,12],\"3263\":[1],\"3264\":[2,15],\"3265\":[2,17],\"3266\":[1,4],\"3267\":[1,72],\"3268\":[1,60],\"3269\":[4,50],\"3270\":[4,49],\"3271\":[4,49],\"3272\":[2],\"3273\":[3,9],\"3274\":[3,9],\"3275\":[3,18],\"3276\":[3,17],\"3277\":[1,17],\"3278\":[4,65],\"3279\":[4,40],\"3280\":[2,40],\"3281\":[1],\"3282\":[5,14],\"3283\":[5,38],\"3284\":[4],\"3285\":[1,34],\"3286\":[1,4],\"3287\":[2,21],\"3288\":[3,14],\"3289\":[2,34],\"3290\":[2,4],\"3291\":[2,20],\"3292\":[1,22],\"3293\":[3,25],\"3294\":[2,14],\"3295\":[2,14],\"3296\":[2,49],\"3297\":[2,18],\"3298\":[2,151],\"3299\":[2,5],\"3300\":[3,19],\"3301\":[3,24],\"3302\":[1,8],\"3303\":[1,5],\"3304\":[2,23],\"3305\":[2,93],\"3306\":[3,6],\"3307\":[3,81],\"3308\":[2,23],\"3309\":[2,6],\"3310\":[2,15],\"3311\":[1,2],\"3312\":[2,20],\"3313\":[2,32],\"3314\":[2,12],\"3315\":[2,18],\"3316\":[2,28],\"3317\":[1,4],\"3318\":[2,21],\"3319\":[3,14],\"3320\":[2,34],\"3321\":[2,8],\"3322\":[2,20],\"3323\":[2,9],\"3324\":[2,24],\"3325\":[2,19],\"3326\":[2,30],\"3327\":[3,88],\"3328\":[3,94],\"3329\":[2,23],\"3330\":[2,20],\"3331\":[3,11],\"3332\":[3,28],\"3333\":[3,9],\"3334\":[2,7],\"3335\":[2,38],\"3336\":[2,13],\"3337\":[2,71],\"3338\":[2,8],\"3339\":[2,29],\"3340\":[2,21],\"3341\":[1],\"3342\":[2,21],\"3343\":[2,8],\"3344\":[1,2],\"3345\":[2,20],\"3346\":[2,34],\"3347\":[2,12],\"3348\":[2,24],\"3349\":[2,8],\"3350\":[3,10],\"3351\":[1,9],\"3352\":[1,33],\"3353\":[1,12],\"3354\":[3],\"3355\":[2,207],\"3356\":[2,1],\"3357\":[2,1],\"3358\":[1,1],\"3359\":[3],\"3360\":[3,26],\"3361\":[3,9],\"3362\":[3,16],\"3363\":[3,4],\"3364\":[3,17],\"3365\":[3,31],\"3366\":[3,8],\"3367\":[3,9],\"3368\":[3,14],\"3369\":[3,11],\"3370\":[3,17],\"3371\":[3,8],\"3372\":[3],\"3373\":[1,32],\"3374\":[2,11],\"3375\":[2,11],\"3376\":[2,10],\"3377\":[1,5],\"3378\":[2,46],\"3379\":[2,23],\"3380\":[3,44],\"3381\":[2,33],\"3382\":[2,6],\"3383\":[4,10],\"3384\":[3,23],\"3385\":[1,5],\"3386\":[2,7],\"3387\":[2,22],\"3388\":[2,10],\"3389\":[1,4],\"3390\":[2,4],\"3391\":[2,35],\"3392\":[2,18],\"3393\":[2,36],\"3394\":[2,28],\"3395\":[1],\"3396\":[2,25],\"3397\":[2,19],\"3398\":[3,1],\"3399\":[1,9],\"3400\":[1,30],\"3401\":[1,6],\"3402\":[1,17],\"3403\":[1,16],\"3404\":[1,5],\"3405\":[1,4],\"3406\":[1,2],\"3407\":[3,27],\"3408\":[1,4],\"3409\":[3,1],\"3410\":[4,20],\"3411\":[1,10],\"3412\":[1,1],\"3413\":[3,36],\"3414\":[1,4],\"3415\":[1,10],\"3416\":[3,11],\"3417\":[3,18],\"3418\":[3],\"3419\":[1,4],\"3420\":[2,7],\"3421\":[2,3],\"3422\":[2,7],\"3423\":[2,6],\"3424\":[2,5],\"3425\":[1,15],\"3426\":[1,8],\"3427\":[1,24],\"3428\":[1],\"3429\":[2,14],\"3430\":[2,16],\"3431\":[2,23],\"3432\":[2,24],\"3433\":[1,29],\"3434\":[1],\"3435\":[2,23],\"3436\":[2,21],\"3437\":[2,8],\"3438\":[2,4],\"3439\":[1],\"3440\":[2,7],\"3441\":[2,23],\"3442\":[3,11],\"3443\":[2,10],\"3444\":[2,23],\"3445\":[2,12],\"3446\":[2,12],\"3447\":[2,30],\"3448\":[1,3],\"3449\":[2,42],\"3450\":[2,14],\"3451\":[2],\"3452\":[3,18],\"3453\":[3,13],\"3454\":[2,16],\"3455\":[3,8],\"3456\":[1,12],\"3457\":[2,7],\"3458\":[2,5],\"3459\":[3,17],\"3460\":[1],\"3461\":[2,8],\"3462\":[2,12],\"3463\":[1],\"3464\":[2,35],\"3465\":[2,17],\"3466\":[3,23],\"3467\":[2,12],\"3468\":[3,14],\"3469\":[3,26],\"3470\":[2,15],\"3471\":[1],\"3472\":[3,5],\"3473\":[2,40],\"3474\":[2,9],\"3475\":[1,3],\"3476\":[2,41],\"3477\":[3,37],\"3478\":[4,14],\"3479\":[1,24],\"3480\":[2,35],\"3481\":[3,13],\"3482\":[3,28],\"3483\":[2,18],\"3484\":[1,13],\"3485\":[2,38],\"3486\":[2,2],\"3487\":[3,17],\"3488\":[2,48],\"3489\":[2,29],\"3490\":[1,6],\"3491\":[3],\"3492\":[1],\"3493\":[2,11],\"3494\":[2,29],\"3495\":[2,22],\"3496\":[1,11],\"3497\":[2,19],\"3498\":[2,30],\"3499\":[3],\"3500\":[1],\"3501\":[2,38],\"3502\":[2,7],\"3503\":[1,75],\"3504\":[1,55],\"3505\":[2,5],\"3506\":[1,13],\"3507\":[2,20],\"3508\":[2,39],\"3509\":[2,24],\"3510\":[1],\"3511\":[2,4],\"3512\":[1,7],\"3513\":[2,28],\"3514\":[2,18],\"3515\":[2,19],\"3516\":[4,26],\"3517\":[4,20],\"3518\":[2,26],\"3519\":[3,2],\"3520\":[3,2],\"3521\":[3,2],\"3522\":[2],\"3523\":[1],\"3524\":[3,23],\"3525\":[1],\"3526\":[6,45],\"3527\":[3,70],\"3528\":[3,24],\"3529\":[3,1],\"3530\":[1],\"3531\":[2],\"3532\":[2,26],\"3533\":[3,38],\"3534\":[2],\"3535\":[3,11],\"3536\":[2,6],\"3537\":[2,2],\"3538\":[2,15],\"3539\":[2,4],\"3540\":[3,13],\"3541\":[3,29],\"3542\":[2,14],\"3543\":[2,4],\"3544\":[2],\"3545\":[2,31],\"3546\":[2,29],\"3547\":[2,41],\"3548\":[2,36],\"3549\":[4,6],\"3550\":[2,16],\"3551\":[2,10],\"3552\":[3,4],\"3553\":[2],\"3554\":[2,19],\"3555\":[2,8],\"3556\":[2,7],\"3557\":[3,13],\"3558\":[3,22],\"3559\":[2],\"3560\":[2,6],\"3561\":[2,26],\"3562\":[2,47],\"3563\":[2,32],\"3564\":[2,22],\"3565\":[2,3],\"3566\":[3,7],\"3567\":[3,21],\"3568\":[2,7],\"3569\":[2,15],\"3570\":[4,17],\"3571\":[2,24],\"3572\":[3],\"3573\":[2],\"3574\":[2,24],\"3575\":[2,13],\"3576\":[2,8],\"3577\":[2,7],\"3578\":[2,8],\"3579\":[2,3],\"3580\":[2,5],\"3581\":[2,25],\"3582\":[2,7],\"3583\":[3,10],\"3584\":[2],\"3585\":[2,20],\"3586\":[2,16],\"3587\":[3,27],\"3588\":[3,18],\"3589\":[2,11],\"3590\":[3,34],\"3591\":[2,9],\"3592\":[3,13],\"3593\":[2,10],\"3594\":[2,12],\"3595\":[2,23],\"3596\":[2,34],\"3597\":[2,15],\"3598\":[2,12],\"3599\":[2],\"3600\":[2,7],\"3601\":[2,8],\"3602\":[3],\"3603\":[2],\"3604\":[2,16],\"3605\":[2,5],\"3606\":[2,11],\"3607\":[2,14],\"3608\":[2],\"3609\":[2,23],\"3610\":[2,26],\"3611\":[2,32],\"3612\":[2],\"3613\":[2,18],\"3614\":[2,24],\"3615\":[2,13],\"3616\":[2,29],\"3617\":[3,13],\"3618\":[2],\"3619\":[2,12],\"3620\":[2,15],\"3621\":[2,25],\"3622\":[2],\"3623\":[2,35],\"3624\":[2,7],\"3625\":[3,21],\"3626\":[2,14],\"3627\":[3,17],\"3628\":[3,14],\"3629\":[2,3],\"3630\":[3,13],\"3631\":[3,10],\"3632\":[2,20],\"3633\":[3,3],\"3634\":[3,10],\"3635\":[3,13],\"3636\":[2,17],\"3637\":[3],\"3638\":[2],\"3639\":[2,18],\"3640\":[2,14],\"3641\":[2,20],\"3642\":[2,13],\"3643\":[2,1],\"3644\":[3,13],\"3645\":[3,21],\"3646\":[3,19],\"3647\":[2,5],\"3648\":[2,2],\"3649\":[2,2],\"3650\":[2],\"3651\":[2,11],\"3652\":[2,10],\"3653\":[2,14],\"3654\":[2,10],\"3655\":[2],\"3656\":[2,81],\"3657\":[2,22],\"3658\":[2,22],\"3659\":[2,8],\"3660\":[2,7],\"3661\":[2,7],\"3662\":[2,6],\"3663\":[2,6],\"3664\":[2,35],\"3665\":[2,6],\"3666\":[2,14],\"3667\":[2,45],\"3668\":[3,23],\"3669\":[2,5],\"3670\":[3,97],\"3671\":[2,17],\"3672\":[2,4],\"3673\":[2,96],\"3674\":[2,66],\"3675\":[2,37],\"3676\":[3],\"3677\":[2],\"3678\":[2,13],\"3679\":[2,24],\"3680\":[2,2],\"3681\":[2],\"3682\":[2,43],\"3683\":[2,10],\"3684\":[2],\"3685\":[2,11],\"3686\":[2,15],\"3687\":[2,19],\"3688\":[3,5],\"3689\":[3,14],\"3690\":[2,2],\"3691\":[3,2],\"3692\":[3,8],\"3693\":[2,13],\"3694\":[2,11],\"3695\":[2],\"3696\":[3,11],\"3697\":[3,5],\"3698\":[3,25],\"3699\":[2],\"3700\":[5,25],\"3701\":[5,38],\"3702\":[3,11],\"3703\":[3,24],\"3704\":[2,37],\"3705\":[3],\"3706\":[2],\"3707\":[2,32],\"3708\":[2,16],\"3709\":[3,15],\"3710\":[2,13],\"3711\":[3,21],\"3712\":[2,67],\"3713\":[2,7],\"3714\":[2,8],\"3715\":[2,27],\"3716\":[2,5],\"3717\":[2,10],\"3718\":[2,13],\"3719\":[3,4],\"3720\":[2,8],\"3721\":[2,14],\"3722\":[2],\"3723\":[2,13],\"3724\":[2,20],\"3725\":[3],\"3726\":[3,14],\"3727\":[3,14],\"3728\":[2,17],\"3729\":[2,3],\"3730\":[3,2],\"3731\":[3,3],\"3732\":[2,3],\"3733\":[2,5],\"3734\":[2,3],\"3735\":[2,6],\"3736\":[2,17],\"3737\":[2,6],\"3738\":[2,19],\"3739\":[2,27],\"3740\":[2,3],\"3741\":[2,2],\"3742\":[3,5],\"3743\":[2,21],\"3744\":[3],\"3745\":[1],\"3746\":[3,15],\"3747\":[4,8],\"3748\":[2,14],\"3749\":[1],\"3750\":[2,21],\"3751\":[2,25],\"3752\":[1,2],\"3753\":[1,2],\"3754\":[2,2],\"3755\":[3],\"3756\":[2,11],\"3757\":[2,16],\"3758\":[1],\"3759\":[1],\"3760\":[1],\"3761\":[1],\"3762\":[1],\"3763\":[1],\"3764\":[1],\"3765\":[1],\"3766\":[1],\"3767\":[2],\"3768\":[2],\"3769\":[2],\"3770\":[2],\"3771\":[2],\"3772\":[2],\"3773\":[2],\"3774\":[2],\"3775\":[2],\"3776\":[2],\"3777\":[2],\"3778\":[2],\"3779\":[2],\"3780\":[2],\"3781\":[3],\"3782\":[2],\"3783\":[2],\"3784\":[2],\"3785\":[2],\"3786\":[2],\"3787\":[2],\"3788\":[2],\"3789\":[2],\"3790\":[2]},\"averageFieldLength\":[2.3592719599050356,17.268376482313613],\"storedFields\":{\"0\":{\"h\":\"指南\",\"t\":[\"提示\",\"当前处于建设阶段\"]},\"1\":{\"h\":\"   快捷笔记\",\"t\":[\"什么是快捷笔记\",\"快捷笔记就是对知识的精华总结。当掌握某个知识点后，就创建他有关的快捷笔记，之后无论复习还是使用，直接查看快捷笔记。\",\"快捷笔记的命名为：\"]},\"2\":{\"h\":\"项目初始化\"},\"3\":{\"h\":\"Java\"},\"4\":{\"h\":\"框架\"},\"5\":{\"h\":\"微服务\"},\"6\":{\"h\":\"SQL\"},\"7\":{\"h\":\"服务端\"},\"8\":{\"h\":\"DevTool\"},\"9\":{\"h\":\"技术栈导航\"},\"10\":{\"h\":\"站点内容地图\",\"t\":[\"编号顺序：0~9-a~z\",\"指南：【编号0】\",\"Java：【编号1】 \",\"JavaSE【编号11】\",\"JavaWeb【编号12】\",\"JVM【编号13】\",\"内置资源\",\"IDEA\",\"框架：【编号2】 \",\"Maven\",\"Spring\",\"SpringMVC\",\"MyBatis\",\"MyBatisPlus\",\"SpringBoot\",\"微服务：【编号3】 \",\"微服务架构 SpringCloud & Alibaba\",\"Nacos\",\"Gateway\",\"OpenFeign\",\"Seata\",\"Sentinel\",\"SQL：【编号4】 \",\"MySQL\",\"Redis\",\"MongoDB\",\"Memcache\",\"ES\",\"服务端：【编号5】 \",\"Linux\",\"Shell\",\"Nginx\",\"Docker\",\"轮子：【编号6】 \",\"若依rouyi\",\"dev：【编号7】 \",\"项目开发手册\",\"项目：【编号8】 \",\"瑞吉外卖\",\"其他：【编号9】 \",\"Git\",\"设计模式\",\"正则\",\"swagger\"]},\"11\":{\"h\":\"Java学习顺序\",\"t\":[\"提示\",\"仅包含Java相关的，其他知识，如MySQL，不再这里提及\",\"Java SE\",\"JVM： 可略过，回头再学，纯理论知识\",\"JavaWeb：理解为主 \",\"必学：jdbc、Tomcat、Servlet（Fileter & Listener）、环境搭建、WEB架构、JSON\",\"可选：JSP、JSTL、XML、会话技术\",\"Maven：先学基本用法，复杂配置等学完Spring系列再研究\",\"Spring全家桶 \",\"Spring： 理解为主\",\"SpringMVC\",\"MyBatis：包括MyBatisPlus \",\"需要前置知识：MySQL\",\"SpringBoot：重点实践 \",\"SpringBoot会整合很多技术，这些技术你不会就没法整合，如Redis\",\"其他Spring组件：用到了再学\",\"微服务：（学这个之前了解下项目架构） \",\"常用：Gateway、Nacos、OpenFeign、Seata、Sentinel\",\"已过时：Eureka、Ribbon、LoadBalancer、Bus、Config、Stream、Hystrix\",\"中间件 \",\"消息队列：RabbitMQ（最常用）\"]},\"12\":{\"h\":\"项目\",\"t\":[\"提示\",\"当前处于建设阶段\"]},\"13\":{\"h\":\"     ->Map\",\"t\":[\"提示\",\"文档迁移中...\"]},\"14\":{\"h\":\"     ->Map\",\"t\":[\"提示\",\"文档迁移中...\"]},\"15\":{\"h\":\"     ->Map\",\"t\":[\"提示\",\"文档迁移中...\"]},\"16\":{\"h\":\"     ->Map\",\"t\":[\"提示\",\"文档迁移中...\"]},\"17\":{\"h\":\"     ->Map\",\"t\":[\"提示\",\"文档迁移中...\"]},\"18\":{\"h\":\"     ->Map\",\"t\":[\"提示\",\"文档迁移中...\"]},\"19\":{\"h\":\"1. 软件开发流程\",\"t\":[\"1-1\"]},\"20\":{\"h\":\"第1阶段：需求分析\",\"t\":[\"完成需求规格说明书、产品原型编写。\"]},\"21\":{\"h\":\"规格说明书\",\"t\":[\"需求规格说明书， 一般来说就是使用 Word 文档来描述当前项目的各个组成部分，如：系统定义、应用环境、功能规格、性能需求等，都会在文档中描述。\",\"1-1\"]},\"22\":{\"h\":\"产品原型\",\"t\":[\"一般是通过网页(html)的形式展示当前的页面展示什么样的数据, 页面的布局是什么样子的，点击某个菜单，打开什么页面，点击某个按钮，出现什么效果，都可以通过产品原型看到。\",\"1-2\"]},\"23\":{\"h\":\"第2阶段：设计\",\"t\":[\"设计的内容包含 UI设计、数据库设计、接口设计。\"]},\"24\":{\"h\":\"UI设计\",\"t\":[\"用户界面的设计，主要设计项目的页面效果，小到一个按钮，大到一个页面布局，还有人机交互逻辑的体现。\",\"1-3\"]},\"25\":{\"h\":\"数据库设计\",\"t\":[\"需要设计当前项目中涉及到哪些数据库，每一个数据库里面包含哪些表，这些表结构之间的关系是什么样的，表结构中包含哪些字段。\",\"1-4\"]},\"26\":{\"h\":\"接口设计\",\"t\":[\"通过分析原型图，首先，粗粒度地分析每个页面有多少接口，然后，再细粒度地分析每个接口的传入参数，返回值参数，同时明确接口路径及请求方式。\",\"1-5\"]},\"27\":{\"h\":\"第3阶段: 编码\",\"t\":[\"编写项目代码、并完成单元测试。\"]},\"28\":{\"h\":\"项目代码编写\",\"t\":[\"作为软件开发工程师，我们需要对项目的模块功能分析后，进行编码实现。\"]},\"29\":{\"h\":\"单元测试\",\"t\":[\"编码实现完毕后，进行单元测试，单元测试通过后再进入到下一阶段。\",\"1-6\",\"注意：单元测试是有开发者进行的基本debug测试，并非项目测试\"]},\"30\":{\"h\":\"第4阶段: 测试\",\"t\":[\"在该阶段中主要由测试人员, 对部署在测试环境的项目进行功能测试, 并出具测试报告。\"]},\"31\":{\"h\":\"第5阶段: 上线运维\",\"t\":[\"在项目上线之前， 会由运维人员准备服务器上的软件环境安装、配置， 配置完毕后，再将我们开发好的项目，部署在服务器上运行。\"]},\"32\":{\"h\":\"2. 协作分工\"},\"33\":{\"h\":\"基本角色分工\",\"t\":[\"2-1\",\"岗位/角色\",\"对应阶段\",\"职责/分工\",\"项目经理\",\"全阶段\",\"对整个项目负责，任务分配、把控进度\",\"产品经理\",\"需求分析\",\"进行需求调研，输出需求调研文档、产品原型等\",\"UI设计师\",\"设计\",\"根据产品原型输出界面效果图\",\"架构师\",\"设计\",\"项目整体架构设计、技术选型等\",\"测试工程师\",\"测试\",\"编写测试用例，输出测试报告\",\"运维工程师\",\"上线运维\",\"软件环境搭建、项目上线\",\"在实际的项目中, 有一些项目组由于人员配置紧张, 可能并没有专门的架构师或测试人员, 这个时候可能需要有项目经理或者程序员兼任。\"]},\"34\":{\"h\":\"3. 软件环境\"},\"35\":{\"h\":\"软件环境\",\"t\":[\"3-1\",\"作为软件开发工程师，在编码的过程中就不可避免地会接触多种软件环境，我们主要来分析在工作中经常遇到的三套环境， 分别是: 开发环境、测试环境、生产环境。\"]},\"36\":{\"h\":\"开发环境(development)\",\"t\":[\"我们作为软件开发人员，在开发阶段使用的环境，就是开发环境，一般外部用户无法访问。\",\"比如，我们在开发中使用的MySQL数据库和其他的一些常用软件，我们可以安装在本地， 也可以安装在一台专门的服务器中， 这些应用软件仅仅在软件开发过程中使用， 项目测试、上线时，我们不会使用这套环境了，这个环境就是开发环境。\"]},\"37\":{\"h\":\"测试环境(testing)\",\"t\":[\"当软件开发工程师，将项目的功能模块开发完毕，并且单元测试通过后，就需要将项目部署到测试服务器上，让测试人员对项目进行测试。那这台测试服务器就是专门给测试人员使用的环境， 也就是测试环境，用于项目测试，一般外部用户无法访问。\"]},\"38\":{\"h\":\"生产环境(production)\",\"t\":[\"当项目开发完毕，并且由测试人员测试通过之后，就可以上线项目，将项目部署到线上环境，并正式对外提供服务，这个线上环境也称之为生产环境。\"]},\"39\":{\"h\":\"总结\",\"t\":[\"首先，会在开发环境中进行项目开发，往往开发环境大多数都是本地的电脑环境和局域网内的环境。\",\"当开发完毕后，然后会把项目部署到测试环境，测试环境一般是一台独立测试服务器的环境。\",\"项目测试通过后，最终把项目部署到生产环境，生产环境可以是机房或者云服务器等线上环境。\"]},\"40\":{\"h\":\"     ->Map\",\"t\":[\"提示\",\"文档迁移中\"]},\"41\":{\"h\":\"   ->Map\",\"t\":[\"提示\",\"文档迁移中\"]},\"42\":{\"h\":\"   ->Map\",\"t\":[\"提示\",\"文档迁移中...\"]},\"43\":{\"h\":\"     ->Map\",\"t\":[\"提示\",\"文档迁移中\"]},\"44\":{\"h\":\"               SpringBoot\",\"t\":[\"提示\",\"文档迁移中...\"]},\"45\":{\"h\":\"     ->Map\",\"t\":[\"基础 \",\"介绍\",\"创建项目\",\"项目解析\",\"基本配置文件\",\"yaml配置语法\",\"实用功能 \",\"SSM开发案例\",\"热部署\",\"高级配置\",\"代码测试\",\"基本运维 \",\"打包与发布\",\"配置文件设计\",\"多环境开发\",\"log 日志\",\"监控\",\"集成Data \",\"MySQL：JDBC、Druid\",\"MyBatis：包含MyBatis Plus\",\"Redis\",\"MongoDB\",\"Memcache\",\"ES\",\"集成其他技术 \",\"缓存技术\",\"消息队列\",\"底层原理 \",\"bean加载方式\",\"自动配置\",\"启动流程\",\"其他\"]},\"46\":{\"h\":\"    ->Map\",\"t\":[\"提示\",\"文档迁移中\"]},\"47\":{\"h\":\"苍穹外卖\",\"t\":[\"提示\",\"当前处于建设阶段\"]},\"48\":{\"h\":\"      苍穹外卖介绍\",\"t\":[\"介绍\",\"该项目来自于黑马程序员的 苍穹外卖\",\"该项目是瑞吉外卖的进阶版。\"]},\"49\":{\"h\":\"项目介绍\",\"t\":[\"本项目（苍穹外卖）是专门为餐饮企业（餐厅、饭店）定制的一款软件产品，包括 系统管理后台 和 小程序端应用 两部分。\",\"其中系统管理后台主要提供给餐饮企业内部员工使用，可以对餐厅的分类、菜品、套餐、订单、员工等进行管理维护，对餐厅的各类数据进行统计，同时也可进行来单语音播报功能。\",\"001\",\"小程序端主要提供给消费者使用，可以在线浏览菜品、添加购物车、下单、支付、催单等。\",\"002\"]},\"50\":{\"h\":\"项目目标\",\"t\":[\"该项目用来练习：基于 Spring Boot 的标准项目开发。\",\"开发过程中会用到MVC前后的分离结构，和众多常用开发技术。\"]},\"51\":{\"h\":\"原型图\",\"t\":[\"苍穹外卖前台（用户端）\",\"苍穹外卖后台（管理端）\"]},\"52\":{\"h\":\"功能模块\"},\"53\":{\"h\":\"技术选型\",\"t\":[\"前端：H5、Vue、ElementUI\",\"后端：Spring Boot\",\"数据层：MyBatis Plus、Redis\",\"服务：Nginx\",\"工具：Maven、Swagger\"]},\"54\":{\"h\":\"功能清单\",\"t\":[\"后台系统\",\"权限管理：登录、退出\",\"员工管理：新增、修改、列表、禁用\",\"分类管理：新增、修改、列表、删除\",\"菜品管理：新增、修改、列表、删除\",\"套餐管理：新增、修改、列表、删除、停售\",\"订单管理：列表、状态\",\"用户端应用\",\"登录：手机号、微信\",\"个人中心：地址管理、历史订单\",\"浏览：菜品、套餐\",\"购物车：添加购物车、清空购物车\",\"下单\"]},\"55\":{\"h\":\"角色介绍\",\"t\":[\"管理员：后台系统超管，拥有所有权限\",\"员工：后台系统普通员工，仅能管理菜品和订单\",\"用户：使用用户端应用\"]},\"56\":{\"h\":\"->Map\"},\"57\":{\"h\":\"JDK 常用类\",\"t\":[\"String\",\"StringBuffer\",\"时间\",\"比较器\",\"数学与数值\",\"IO类\",\"反射类\",\"其他内置类\"]},\"58\":{\"h\":\"JDK.util包\",\"t\":[\"Scanner\",\"Arrays\",\"Collection+\",\"List&Map\",\"Functional\",\"正则\"]},\"59\":{\"h\":\"Other\",\"t\":[\"常用注解\"]},\"60\":{\"h\":\"->Map\",\"t\":[\"提示\",\"内容正在迁移中\"]},\"61\":{\"h\":\"   ->Map\",\"t\":[\"提示\",\"内容正在迁移中\"]},\"62\":{\"h\":\"  ->Map\",\"t\":[\"提示\",\"内容正在迁移中\"]},\"63\":{\"h\":\"->Map\",\"t\":[\"提示\",\"内容正在迁移中\"]},\"64\":{\"h\":\"git\",\"t\":[\"提示\",\"当前处于建设阶段\"]},\"65\":{\"h\":\"     ->Map\",\"t\":[\"提示\",\"文档迁移中...\"]},\"66\":{\"h\":\"设计模式\",\"t\":[\"提示\",\"当前处于建设阶段\"]},\"67\":{\"h\":\"     ->Map\",\"t\":[\"提示\",\"文档迁移中...\"]},\"68\":{\"h\":\"正则\",\"t\":[\"提示\",\"当前处于建设阶段\"]},\"69\":{\"h\":\"     ->Map\",\"t\":[\"提示\",\"文档迁移中...\"]},\"70\":{\"h\":\"Swagger\",\"t\":[\"提示\",\"当前处于建设阶段\"]},\"71\":{\"h\":\"     ->Map\",\"t\":[\"提示\",\"文档迁移中...\"]},\"72\":{\"h\":\"          Docker\",\"t\":[\"提示\",\"当前处于建设阶段\"]},\"73\":{\"h\":\"     ->Map\",\"t\":[\"提示\",\"文档迁移中...\"]},\"74\":{\"h\":\"                    Linux\",\"t\":[\"提示\",\"当前处于建设阶段\"]},\"75\":{\"h\":\"     ->Map\",\"t\":[\"提示\",\"文档迁移中...\"]},\"76\":{\"h\":\"                nginx\",\"t\":[\"提示\",\"当前处于建设阶段\"]},\"77\":{\"h\":\"     ->Map\",\"t\":[\"提示\",\"文档迁移中...\"]},\"78\":{\"h\":\"             shell\",\"t\":[\"提示\",\"当前处于建设阶段\"]},\"79\":{\"h\":\"     ->Map\",\"t\":[\"提示\",\"文档迁移中...\"]},\"80\":{\"h\":\"ElasticSearch\",\"t\":[\"提示\",\"本笔记以 ElasticSearch 8.x版本为主，以7.x 版本为辅。\",\"当前市面上依然流行的ES7.x ，不过ES8.x已经更新了一年多了。\",\"本笔记所有场景所使用的版本均为：8.7.0，包括使用部分ES7.x的API。\",\"警告\",\"因临时有事，该笔记仅记录了入门级内容，还有大量内容等待后续添加。\",\"TBD\"]},\"81\":{\"h\":\"     ->Map\",\"t\":[\"提示\",\"本笔记以 ElasticSearch 8.x版本为主，以7.x 版本为辅。\",\"当前市面上依然流行的ES7.x ，不过ES8.x已经更新了一年多了。\",\"本笔记所有场景所使用的版本均为：8.7.0，包括使用部分ES7.x的API。\",\"警告\",\"因临时有事，该笔记仅记录了入门级内容，还有大量内容等待后续添加。\",\"TBD\"]},\"82\":{\"h\":\"    Memcache\",\"t\":[\"相关信息\",\"这个目前不太流行了，暂时不做整理了。\\n等用到了再说。\"]},\"83\":{\"h\":\"     ->Map\",\"t\":[\"相关信息\",\"这个目前不太流行了，暂时不做整理了。\\n等用到了再说。\"]},\"84\":{\"h\":\"    MongoDB\",\"t\":[\"Line\",\"当前MongoDB版本为 6.0.5\",\"官网文档[没有中文]\",\"中文文档[翻译很烂]\",\"内容说明\",\"MongoDB并非很流行的技术，当前找不到太多相关中文资料，目前能找到的中文资料版本都在4.0左右，严重落后现有版本，很多规则和内置的API都跟当前版本不同。\",\"本笔记是以6.0.5版本为基础的，因为找不到好的资料，所以没有深入探索复杂内容。\",\"基础操作可以保证正确性，本人都经过验证了，集群等复杂操作只能保证尽量正确。\"]},\"85\":{\"h\":\"     ->Map\",\"t\":[\"Line\",\"当前MongoDB版本为 6.0.5\",\"官网文档[没有中文]\",\"中文文档[翻译很烂]\",\"内容说明\",\"MongoDB并非很流行的技术，当前找不到太多相关中文资料，目前能找到的中文资料版本都在4.0左右，严重落后现有版本，很多规则和内置的API都跟当前版本不同。\",\"本笔记是以6.0.5版本为基础的，因为找不到好的资料，所以没有深入探索复杂内容。\",\"基础操作可以保证正确性，本人都经过验证了，集群等复杂操作只能保证尽量正确。\"]},\"86\":{\"h\":\"         MySQL\",\"t\":[\"提示\",\"文档迁移中...\"]},\"87\":{\"h\":\"     ->Map\",\"t\":[\"提示\",\"文档迁移中...\"]},\"88\":{\"h\":\"        Redis\",\"t\":[\"提示\",\"文档迁移中...\"]},\"89\":{\"h\":\"     ->Map\",\"t\":[\"提示\",\"文档迁移中...\"]},\"90\":{\"h\":\"1-1. 介绍\",\"t\":[\"重要性\",\"SpringBoot是Java开发必备的，是重要性第一位的框架，非常重要。\"]},\"91\":{\"h\":\"1. 简介\",\"t\":[\"SpringBoot是由Pivotal团队提供的全新框架，其设计目的是用来简化Spring应用的初始搭建以及开发过程。 PS：Spring系列框架的配置和依赖太复杂了，SpringBoot对它们进行了非常大的简化。\"]},\"92\":{\"h\":\"2. SpringBoot的特点\",\"t\":[\"简化依赖管理\",\"简化常用工程相关配置\",\"内置服务器\",\"...\"]},\"93\":{\"h\":\"3. 需要学习的内容\",\"t\":[\"了解SpringBoot开发流程，能够基于SpringBoot实现基础SSM框架整合\",\"掌握各式各样的第三方技术与SpringBoot整合的方案\",\"理解SpringBoot底层\",\"基于原理理解基础上，实现自主研发基于SpringBoot整合任意技术的开发方式\"]},\"94\":{\"h\":\"1-2. 创建项目\",\"t\":[\"提示\",\"这里采用的是IDEA里的Spring Initializr 创建的工程。\",\"需要前置知识：Maven。\"]},\"95\":{\"h\":\"1. Spring Initializr\",\"t\":[\"创建工程（new Project）时选择 Spring Initializr。\",\"1-2-1\",\"选项解释\",\"Server URL：SpringBoot项目构建是需要联网的，该URL就是要连接的网址，默认是官网。\",\"Name：项目（工程或模块）的名字\",\"Location：项目在硬盘上的位置\",\"Language：语言，选Java就行\",\"Type：选Maven就行\",\"Group / Artifact / Package name：Maven的包信息\",\"Project JDK：JDK版本，注意版本适配\",\"Java：Project SDK的版本要与Java处的SDK版本一致。\",\"Packaging：打包方式选择Jar，即使是Web工程。\"]},\"96\":{\"h\":\"2. 配置工程\",\"t\":[\"接上一步，点击 NEXT ，进行工程（或模块）的配置。\",\"1-2-2\",\"在这里配置SpringBoot版本，和需要添加的依赖，具体如下：\",\"Spring Boot：选择版本，默认是最新的稳定版，要根据项目的其他组件依赖进行选择 \",\"比如SpringCloud alibaba最新的稳定版需要的是SpringBoot 2.7，而默认的版本是3.0.0\",\"Dependencies：这里可以选择项目所需的一些依赖，比如Lombok \",\"项目创建后是可以手动添加依赖的，这里不用纠结\",\"Addeed dependencies：已经勾选的依赖，可以点X取消。\",\"配置完后，点击 Finish 项目就创建成功了。\"]},\"97\":{\"h\":\"3. 网络问题\",\"t\":[\"SpringBoot项目是需要联网创建的，默认网址是：start.spring.io如果网络不通畅，可以选择其他方式创建，或者使用国内镜像。\",\"切换阿里云镜像\",\"地址：https://start.aliyun.com\",\"1-2-3\"]},\"98\":{\"h\":\"4. 构建结果\",\"t\":[\"自动构建了项目的目录，如下：\",\"1-2-4\",\"目录解读\",\"BolgApplication：核心类，用来启动SpringBoot项目\",\"application.properties：核心配置文件 \",\"不过后续使用时会采用yaml格式的配置文件\",\"pom：核心文件，确认了SpringBoot的依赖（SpringBoot程序包含的基础文件）\",\"test：测试目录，SpringBoot默认集成了Unit\",\"无用的文件：HELP.md 、mvnw、mvnw.cmd\"]},\"99\":{\"h\":\"5. 注意事项\"},\"100\":{\"h\":\"5.1 pom.xml\",\"t\":[\"pom.xml中的spring-boot-maven-plugin是没有指定version的，使用的是IDEA默认的version，可能与SpringBoot的版本号对不上导致无法引入报错。\",\"1-2-5\",\"解决方案\",\"可以手动指定版本号（与SpringBoot的版本号一样）。\",\"<plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <version>2.7.10</version> </plugin> </plugins> \"]},\"101\":{\"h\":\"5.2 启动类\",\"t\":[\"SpringBoot的启动类在项目中的位置是固定的，确保启动类与直接在“项目包”的目录下\",\"即：启动类与三层架构放在同一级，如果不这样就无法找到启动类，无法启动项目。\"]},\"102\":{\"h\":\"5.3 依赖版本\",\"t\":[\"创建项目的过程中，勾选依赖时无法指定版本，想修改版本需要在项目构建完后，在pom.xml中进行设置。\"]},\"103\":{\"h\":\"6. 隐藏无用的文件\",\"t\":[\"创建SpringBoot会产生很多无意义的文件，影响目录观感。 每次手动删太麻烦，可以使用IDEA的设置进行自动隐藏。\",\"Setting → File Types → Ignored Files and Folders\",\"输入要隐藏的文件名，支持*号通配符回车确认添加\",\"注意：不要隐藏.idea文件\"]},\"104\":{\"h\":\"7. 其他方式创建SpringBoot项目\"},\"105\":{\"h\":\"7.1 使用官网创建SpringBoot项目\",\"t\":[\"打开SpringBoot 官网，选择Quickstart Your Project，或者直接输入：ttps://start.spring.io/\",\"创建工程，并保存项目（步骤同IDEA）\",\"导入项目：创建完成后，会自动下载一个项目压缩包，解压项目，通过IDE导入项目即可。\"]},\"106\":{\"h\":\"7.2 手动创建项目\",\"t\":[\"前提：Maven已经下载好了所需的依赖。\",\"核心：pom.xml和启动类需要手动进行创建。\\n手动创建一个Maven工程，手动编辑pom.xml和创建启动类\\n文件内容和自动创建的一样。\"]},\"107\":{\"h\":\"1-3. 项目解析\"},\"108\":{\"h\":\"Ⅰ. 使用SpringBoot\",\"t\":[\"提示\",\"创建好SpringBoot项目后，就可以使用SpringBoot进行开发了。\"]},\"109\":{\"h\":\"1. 创建Controller\",\"t\":[\"开发一个控制器类，在项目包下创建controller包，并创建一个Rest风格的Controller。\",\"@RestController @RequestMapping(\\\"/test\\\") public class TestController { @GetMapping public String getIt(){ System.out.println(\\\"hello:boot_introduction_1\\\"); return \\\"hello:boot_introduction_1\\\"; } } \"]},\"110\":{\"h\":\"2. 启动项目\",\"t\":[\"右键，运行启动类，启动SpringBoot项目，启动结果如下：\",\"1-3-1\"]},\"111\":{\"h\":\"3. 访问Servlet\",\"t\":[\"使用浏览器访问：localhost:8080/test\",\"TestController类的getIt方法被成功执行，命令行打印出了指定的文本，浏览器也返回了指定的文本。\"]},\"112\":{\"h\":\"4. SpringBoot做了什么\"},\"113\":{\"h\":\"5. 总结\",\"t\":[\"项目搭建完后，所有配置文件都不需要管，自动创建好了（采用的默认配置）。 同时Tomcat也不用进行配置，直接可以使用内置的Tomcat。\"]},\"114\":{\"h\":\"Ⅱ. 统一依赖管理\",\"t\":[\"项目开发需要非常多的包，这些包的版本配置非常麻烦，要保证效果最佳且没有bug。\"]},\"115\":{\"h\":\"1. Maven pom\",\"t\":[\"在使用Maven开发时，可以使用父工程的pom.xml对所有项目的依赖进行统一管理。\",\"父工程规定项目所需依赖的版本，子项目手动引入所需的依赖（不用指定版本）并安装，版本采用父类中的版本。\"]},\"116\":{\"h\":\"2. SpringBoot 中的 pom\",\"t\":[\"在SpringBoot项目的bom.xml中，所有的依赖都是没有版本的。他们的版本由SpringBoot项目内置的父工程来进行管理。\"]},\"117\":{\"h\":\"2.1 pox.xml的parent\",\"t\":[\"如下：工程的pom竟然也有parent，该parent就是SpringBoot内置的专门用来管理依赖的父pom。\",\"<parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.7.9</version> <relativePath/> <!-- lookup parent from repository --> </parent> \"]},\"118\":{\"h\":\"2.2 pring-boot-starter-parent\",\"t\":[\"ctrl + 左键 点击parent的artifactId，就可以查看该文件（spring-boot-starter-parent-2.7.9.pom），如下，该文件还有一个父工程。\",\"<parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-dependencies</artifactId> <version>2.7.9</version> </parent> \"]},\"119\":{\"h\":\"2.3 spring-boot-dependencies\",\"t\":[\"同样进入该文件，观察该文件，截取如下：\",\"... <!--文件坐标--> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-dependencies</artifactId> <version>2.7.9</version> <packaging>pom</packaging> ... <!--变量：依赖的版本号--> <properties> <activemq.version>5.16.6</activemq.version> <antlr2.version>2.7.7</antlr2.version> <appengine-sdk.version>1.9.98</appengine-sdk.version> <artemis.version>2.19.1</artemis.version> <aspectj.version>1.9.7</aspectj.version> <assertj.version>3.22.0</assertj.version> ... </properties> <!--依赖管理：包含了几乎所有开发中可能用到的依赖--> <dependencyManagement> <dependencies> <dependency> <groupId>org.apache.activemq</groupId> <artifactId>activemq-amqp</artifactId> <version>${activemq.version}</version> </dependency> <dependency> <groupId>org.apache.activemq</groupId> <artifactId>activemq-blueprint</artifactId> <version>${activemq.version}</version> </dependency> <dependency> <groupId>org.apache.activemq</groupId> <artifactId>activemq-broker</artifactId> <version>${activemq.version}</version> </dependency> <dependency> <groupId>org.apache.activemq</groupId> <artifactId>activemq-camel</artifactId> <version>${activemq.version}</version> </dependency> ... </dependencies> </dependencyManagement> \"]},\"120\":{\"h\":\"4. SpringBoot依赖管理总结\",\"t\":[\"SpringBoot已经将所有的项目依赖的最佳版本组合给提前设置好了，这个文件存放在spring-boot-dependencies-2.7.9.pom中。\",\"我们自己创建的SpringBoot项目，pom文件会自动将继承spring-boot-starter-parent-2.7.4.pom并间接继承spring-boot-dependencies-2.7.4.pom\",\"此时，SpringBoot依赖的版本就已经确认了，除非手动在pom.xml中指定某个依赖的版本，不然就是采用内置父工程的版本。\",\"在创建SpringBoot项目时，只指定了SpringBoot的版本，依赖的版本完全取决于SpringBoot的版本，版本组合是最佳的，一般不用手动调整。\"]},\"121\":{\"h\":\"5. 注意事项\",\"t\":[\"SpringBoot的Parent并非包含了所有依赖的坐标，只是包含了常用依赖的坐标\",\"实际开发时仅书写GAV中的G和A，V由SpringBoot提供，除非SpringBoot未提供对应版本 \",\"或者遇到了特殊的版本bug\"]},\"122\":{\"h\":\"Ⅲ. starter\"},\"123\":{\"h\":\"1. 什么是starter\",\"t\":[\"SpringBoot中常见的依赖类型，该类型依赖出现的目的是减少依赖配置的数量。\",\"1个starter往往包含了若干个相关联的依赖包。在进行项目开发时，需要什么技术，就会导入对应的starter，starter内部会包含很多依赖包的依赖信息。\",\"如下：点击spring-boot-starter-web就会打开一个包含所有依赖信息的文件：\",\"<dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter</artifactId> <version>2.7.9</version> <scope>compile</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-json</artifactId> <version>2.7.9</version> <scope>compile</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <version>2.7.9</version> <scope>compile</scope> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-web</artifactId> <version>5.3.25</version> <scope>compile</scope> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-webmvc</artifactId> <version>5.3.25</version> <scope>compile</scope> </dependency> </dependencies> \",\"start是可以嵌套的。\"]},\"124\":{\"h\":\"2. 意义\",\"t\":[\"之前开发某类项目，要用到一堆依赖，这里只需要几个Starter就搞定了。\",\"每个不同的starter根据功能不同，通常包含多个依赖坐标，使用starter可以实现快速配置的效果，达到简化配置的目的。\"]},\"125\":{\"h\":\"3. starter与parent\",\"t\":[\"parent：进行依赖管理，预设好了几乎所有依赖的版本 \",\"目的：统一版本管理，设置最佳版本组合。\",\"starter：当前项目具体引入的依赖合集。 \",\"目的：减少pom.xml中的配置项\"]},\"126\":{\"h\":\"Ⅳ. 引导类\"},\"127\":{\"h\":\"引导类：XxxApplication\",\"t\":[\"SpringBoot的引导类是Boot工程的执行入口，运行main方法就可以启动项目，引导类的类名随意（一般为XxxApplication）。\",\"@SpringBootApplication public class AifaceApplication { public static void main(String[] args) { SpringApplication.run(AifaceApplication.class, args); } } \"]},\"128\":{\"h\":\"2. 容器\",\"t\":[\"代码 SpringApplication.run(BootIntroduction1Application.class, args); 执行后，返回值为：ConfigurableApplicationContext。\",\"ConfigurableApplicationContext就是一个IOC容器。\",\"测试使用容器\",\"@SpringBootApplication public class BootIntroduction1Application { public static void main(String[] args) { ConfigurableApplicationContext ctx = SpringApplication.run(BootIntroduction1Application.class, args); TestController bean = ctx.getBean(TestController.class); System.out.prinln(bean);//成功的获取了bean } } \"]},\"129\":{\"h\":\"3. @SpringBootApplication\",\"t\":[\"该引导类是靠@SpringBootApplication配置生效的。 该注解的功能：扫描bean，读取配置，开启IOC容器。\",\"扫描的包\",\"扫描的包是引导类所在的包（如:com.cybercell.blog）。\",\"因此：引导类需要放到项目包中，不要放入组件包。\"]},\"130\":{\"h\":\"4. 总结\",\"t\":[\"引导类的意义就是初始化Spring容器，扫描引导类所在包，将所有的bean纳入IOC管理。\"]},\"131\":{\"h\":\"Ⅴ. 辅助功能\",\"t\":[\"非SpringBoot核心功能，按需加载，如常用的内嵌Tomcat。\"]},\"132\":{\"h\":\"1. 内嵌Tomcat\",\"t\":[\"SpringBoot中内嵌了一个Tomcat服务器。Tomcat服务器代码也是java写的，SpringBoot将Tomcat功能抽取出来封装到了一个对象，并交给了Spring的IOC容器。因此就可以内嵌Tomcat了。\"]},\"133\":{\"h\":\"1.1 Tomcat依赖的位置\",\"t\":[\"pom.xml:spring-boot-starter-web -> spring-boot-starter-web-2.7.9.pom：spring-boot-starter-tomcat\"]},\"134\":{\"h\":\"1.2 不使用内嵌服务器\",\"t\":[\"注解掉spring-boot-starter-tomcat这个starter就可以。 或者在pom.xml中对spring-boot-starter-web进行排除依赖\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> <exclusions> <exclusion> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> </exclusion> </exclusions> </dependency> \",\"排除掉Tomcat的starter后，再启动SpringBoot，就不会开启Tomcat了。\"]},\"135\":{\"h\":\"1.3 替换别的服务器\",\"t\":[\"添加别的服务器的starter就可以替换内嵌的服务器了，如jetty\",\"<!-- 添加 Jetty 起步依赖，版本由 SpringBoot 的 starter 控制 --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-jetty</artifactId> </dependency> \"]},\"136\":{\"h\":\"1-4. 配置文件介绍\",\"t\":[\"提示\",\"springBoot项目的配置文件都是放在 src=>main=>resources内的。\"]},\"137\":{\"h\":\"1. 默认配置文件\",\"t\":[\"SpringBoot默认配置文件：application.properties。\",\"该该配置文件可以配置所有可以自定义的配置项。\",\"SpringBoot为所有的重要的配置项基本都设置了默认值，所以该文件默认是空的。\"]},\"138\":{\"h\":\"2. 文件名\",\"t\":[\"默认是application，不要修改这个名字，不然无法自动加载。 当然，后缀是可以改的，支持多种文件格式。\"]},\"139\":{\"h\":\"3. 文件格式\",\"t\":[\"properties：默认的文件后缀就是properties。 \",\"配置项是K-V格式。\",\"yml：带层级的k-v，（推荐） \",\"yml和yaml是一回事\",\"//1.propeties格式 server.port=80 //2.yml格式 server: port: 81 \"]},\"140\":{\"h\":\"4. 多个配置文件\"},\"141\":{\"h\":\"4.1 多格式配置文件\",\"t\":[\"application.properties、application.yml、application.yaml共存时，他们的配置会互相叠加覆盖，当覆盖时，就需要考虑优先级了。\",\"优先级为：properties>yml>yaml\"]},\"142\":{\"h\":\"4.2 其他类型配置文件\",\"t\":[\"实际开发时，可能会根据开发环境添加诸如application-dev(dev环境)这类的配置文件，或是bootstrap.yml配置文件。\",\"具体见后续章节和微服务。\"]},\"143\":{\"h\":\"5. debug\",\"t\":[\"有时，可能会遇到bug，导致配置文件无效（配置文件没有小叶子的图标），此时需要手动将该配置文件激活。\",\"1-4-1\"]},\"144\":{\"h\":\"1-5. yml语法\",\"t\":[\" yaml是一种数据存储格式，类似XML和Properties. \"]},\"145\":{\"h\":\"Ⅰ. 配置yml\"},\"146\":{\"h\":\"1. yaml语法规则\",\"t\":[\"大小写敏感\",\"属性层级关系使用多行描述，每行结尾使用冒号结束\",\"使用缩进表示层级关系，同层级左侧对齐，只允许使用空格（不允许使用Tab键）\",\"属性值前面添加空格（属性名与属性值之间使用冒号+空格作为分隔）\",\"# 表示注释\"]},\"147\":{\"h\":\"2. 字面量表示方式\",\"t\":[\"boolean: TRUE #TRUE,true,True,FALSE,false ， False 均可 float: 3.14 #6.8523015e+5 # 支持科学计数法 int: 123 #0b1010_0111_0100_1010_1110 # 支持二进制、八进制、十六进制 null: ~ # 使用 ~ 表示 null string: HelloWorld # 字符串可以直接书写 string2: \\\"Hello World\\\" # 可以使用双引号包裹,此时可以解析特殊字符了，如\\\\t变成空格 date: 2018-02-17 # 日期必须使用 yyyy-MM-dd 格式 datetime: 2018-02-17T15:02:31+08:00 # 时间和日期之间使用 T 连接，最后使用+ 代表时区 \"]},\"148\":{\"h\":\"3. 数组表示方式\",\"t\":[\"在属性名书写位置的下方使用减号作为数据开始符号，每行书写一个数据，减号与数据间空格分隔。\",\"likes: - game - music - sleep likes2: [game,music,sleep] #缩略格式 # 对象数组 users: - name: zhangsan age: 18 - name: lisi age: 17 users2: - name: zhangsan age: 18 - name: lisi age: 17 users3: [{name:zhangsan,age:18},{name:lisi,age:17}] \"]},\"149\":{\"h\":\"4. yml文件中的变量引用\",\"t\":[\"在yml中可以使用 ${属性名} 引用数据，将其他配置项的值作为自己值的一部分。\",\"baseDir: c:\\\\win10 tempDir: ${baseDir}\\\\temp # c:\\\\win10\\\\temp \"]},\"150\":{\"h\":\"Ⅱ. 读取yml\",\"t\":[\"底层是IOC容器，通过注入的方式读取配置项，SpringBoot会自动导入配置文件的，直接使用@Value读配置项即可。\"]},\"151\":{\"h\":\"1. 读取yml数据\",\"t\":[\"提示\",\"这里指的是手动读取配置项，大部分配置信息SpringBoot会自动读取。\",\"使用@Value读取单个数据，属性名引用方式：${一级属性名.二级属性名……}\",\"简单读取：@Value(\\\"${属性名}\\\")\",\"多级数据：@Value(\\\"${一级属性名.二级属性名……}\\\")\",\"数组中数据：@Value(\\\"${数组名[索引]}\\\")\",\"对象数组中数据：@Value(\\\"${数组名[索引].对象属性}\\\")\",\"@Value(\\\"${country}\\\") private String country1; @Value(\\\"${user.name}\\\") private String name1; @Value(\\\"${likes[1]}\\\") private String likes1; @Value(\\\"${users[1].age}\\\") private String age1; \"]},\"152\":{\"h\":\"2. 读取yaml全部属性数据\",\"t\":[\"通过自动装配，SpringBoot可以将配置文件中所有的配置项信息封装到Environment对象中。\",\"这种方式可以省去定义太多成员变量。\",\"通过Environment对象的getProperty方法可以读取具体的配置项，参数是配置项名。\",\"//注入方式 @Autowired private Enviroment env; //读取配置项 System.out.println(env.getProperty(\\\"server.port\\\")); System.out.println(env.getProperty(\\\"user\\\")); System.out.println(env.getProperty(\\\"enterprise.subject[0]\\\")); \"]},\"153\":{\"h\":\"3. 读取yml引用类型数据\",\"t\":[\"yaml配置项的主流配置方式是：将一组数据封装到一个java对象中，使用的时候加载该对象，通过该对象读取所需配置。\",\"创建类：用于封装一组数据，如JDBC数据库连接信息（datasource）\",\"加载数据到对象：由Spring将这组数据加载到数据对象中\",\"使用数据：使用时从spring中直接获取数据使用\",\"示例如下：\"]},\"154\":{\"h\":\"3.1 待封装的数据\",\"t\":[\"# JDBC驱动配置 datasource: driver: com.mysql.jdbc.Driver url: jdbc:mysql://localhost/springboot_db username: root password: root666123 \"]},\"155\":{\"h\":\"3.2 创建数据对象\",\"t\":[\"创建config包，创建文件：JDBCDateSource类\",\"/定义数据模型封装yaml文件中对应的数据 @Component//定义为spring管控的bean //指定加载的数据(配置文件中的哪个配置项):datasource @ConfigurationProperties(prefix = \\\"datasource\\\") public class JDBCDateSource { //属性和要封装的数据一一兑对应 private String driver; private String url; private String username; private String password; ....getter\\\\setter\\\\.... } \"]},\"156\":{\"h\":\"3.3 注入数据并使用\",\"t\":[\"注入数据对象（自动装配），直接就可以使用了。\",\"@Autowired private JDBCDateSource dataSource; System.out.println(dataSource.url);//可以成功获取 \"]},\"157\":{\"h\":\"1-6. 细节补充\"},\"158\":{\"h\":\"运行机制\"},\"159\":{\"h\":\"1. 配置生效\",\"t\":[\"SpringBoot将大部分配置都整合到了application.yml文件中。在写代码时，并没有主动引用application.yml中的配置，这些配置是如何生效的？\",\"application.yml中的配置默认是不生效的，比如设置了链接MongoDB的配置，在写代码时，即使引入了MongoDB依赖，也无法创建相关的类（因为配置未生效，MongoDB服务器未连接）。\",\"只有启动SpringBoot服务（内置Tomcat），才能将配置文件加载到内存总读取，此时配置才能生效，因此开发时，SpringBoot都处于启动状态。\"]},\"160\":{\"h\":\"多模块项目\",\"t\":[\"提示\",\"本质是依靠maven相互之间的依赖，把多个模块融合进一个项目中。\",\"之前提到的创建项目，指的是单模块项目，其实SpringBoot项目内是可以创建多个模块的，对于复杂的项目可以使用多模块进行开发。\"]},\"161\":{\"h\":\"1. 创建父工程\",\"t\":[\"和之前创建项目的过程一样，都是新建一个Spring Initializr项目。\",\"项目创建完后要把父工程内目录删除，除了pom.xml文件外全部删掉(.idea、.mvn设置隐藏，不要误删)。\",\"代码是在模块中写的，父工程只负责管理依赖。\"]},\"162\":{\"h\":\"2. 创建子模块\",\"t\":[\"根据需求创建子模块。\",\"父工程上右键->new：Module，创建模块，创建方式要选择Maven而不是Spring Initializr\",\"Spring Initializr：使用该方式创建的子模块，是一个完全独立的Spring项目，他和父工程之间的没有建立父子关系，需要手动创建，很麻烦。\",\"Maven：使用Maven方式可以比较放标创建模块，建立完善的父子关系。\",\"1-6-1\",\"如下图是通过Spring Initializr方式创建的子模块，他只是在目录结构上属于父工程的子目录，但他是独立的(root)项目。\",\"1-6-2\"]},\"163\":{\"h\":\"3. web支持\",\"t\":[\"提示\",\"web模块就是提供web服务的模块，web模块同时引入 spring-boot-starter-web ，这样才能开启SprigMVC，从而启动Tomcat，让程序成为web程序，从而能持续运行。\",\"普通模块就算有启动类，也只能运行一次就暂停，不能持续运行。\",\"只要是提供web服务的模块，都要设计成web模块。\",\"使用Maven方式创建的项目，是没有启动类和配置文件的，需要自己手动创建。\",\"注意：不要盲目创建，如果该模块不需要启动，只是作为其他模块的依赖，就不需要补齐启动类和配置文件，例如：common模块。\"]},\"164\":{\"h\":\"3.1 启动类\",\"t\":[\"补齐启动类后，该模块就可以作为独立的SpringBoot启动了。\",\"@SpringBootApplication public class AifaceApplication { public static void main(String[] args) { SpringApplication.run(AifaceApplication.class, args); } } \"]},\"165\":{\"h\":\"3.2 配置文件\",\"t\":[\"在resources目录下创建application.yml配置文件，运行启动类时，配置文件会被加载。\"]},\"166\":{\"h\":\"4. 引入第三方模块\",\"t\":[\"如果子模块是直接从外部复制进去的，一定要维护好父子pom的。确保模块名字没有和路径名字是一样的，如果出现了，右键模块rename修改即可。\",\"复制过来的模块代码源路径常常后面存在resource root的字样，这种情况选择File --> Project Structure -->Modules ，随后找到模块的source，右侧会有灰色的内容，删除掉即可。\"]},\"167\":{\"h\":\"5. 依赖管理\",\"t\":[\"这是Maven部分的内容，和普通的Maven创建的项目一样，父工程可以管理子模块的依赖。\"]},\"168\":{\"h\":\"6. 打包\",\"t\":[\"直接进行打包会出现很多问题，需要进行以下多个设置：\"]},\"169\":{\"h\":\"6.1 父工程\",\"t\":[\"父工程的设置编译插件 spring-boot-maven-plugin\",\"<plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <!-- 可能会有bug，需要添加版本，版本与SpringBoot版本一致 --> </plugin> \"]},\"170\":{\"h\":\"6.2 子模块：Web模块\",\"t\":[\"带启动类的模块，需要手动指定启动类，以防报bug\",\"<plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <configuration> <mainClass>com.sgugo.web.BootWebApplication</mainClass> </configuration> </plugin> \"]},\"171\":{\"h\":\"6.3 子模块：普通模块\",\"t\":[\"没有启动类的模块，设置不让springboot-maven编译插件将当前模块作为启动模块编译\",\"<plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <configuration> <skip>true</skip> </configuration> </plugin> \"]},\"172\":{\"h\":\"6.4 打包方式\",\"t\":[\"确保所有的子模块pom文件声明了jar打包方式。\",\"如果你不申明很可能会报'packaging' with value 'jar' is invalid. Aggregator projects require 'pom' as packaging.的错误\",\"父工程的打包方式应该是pom\"]},\"173\":{\"h\":\"开发与测试\"},\"174\":{\"h\":\"1. web模块的开发\",\"t\":[\"对于web模块，开发时是需要启动SpringBoot的。\",\"而一旦启动了模块，就不能在通过@Test标签运行方法。因为运行方法的时候会让Tomcat暂停，Tomcat暂停就读不到很多配置，影响测试结果。\"]},\"175\":{\"h\":\"2. web模块的访问\",\"t\":[\"web模块只能通过http协议进行访问，也就是通过Controller上定义的路由进行访问。\",\"一般是浏览器或postman输入url查看访问结果，也可以携带一些测试代码，查看测试结果。\"]},\"176\":{\"h\":\"3. web模块的测试\",\"t\":[\"web模块不能直接使用@Test标签，不能直接运行mian方法，但取而代之是可以采用spring-boot-starter-test进行测试。\",\"详见：实用功能>代码测试\"]},\"177\":{\"h\":\"2-1. 热部署\",\"t\":[\"提示\",\"开发阶段，当代码修改后，想查看效果就要重启服务器，非常麻烦，而使用热部署就能解决这个问题。\",\"注意：热部署是在开发阶段配置的，方便代码的调试。生产阶段不要开启热部署。\",\"热部署就是代码修改后，服务器会自己悄悄的把更新后的程序给重新加载一遍。\"]},\"178\":{\"h\":\"1. 热部署实现原理\"},\"179\":{\"h\":\"1.1 非SpringBoot项目热部署实现原理\",\"t\":[\"背景：JavaWeb项目部署到本地的Tomcat服务器上。\",\"方案1：在tomcat服务器的配置文件中进行配置\",\"方案2：在IDEA中进行配置。\",\"核心思想：使用服务器去监控其中加载的应用，发现产生了变化就重新加载一次。\"]},\"180\":{\"h\":\"1.2 SpringBoot项目热部署实现原理\",\"t\":[\"SpringBoot的Tomcat服务器是内置的，tomcat本身也是对象，和我们的程序是平级的，都是spring容器中的组件。\",\"这就需要额外设置一个程序，监控开发的文件，发生变化，就命令Tomcat重新加载开发的文件就OK了。 这样做spring容器中东西不用全部重新加载一遍，只需要重新加载正则开发的文件就可以了，效率更高了。\"]},\"181\":{\"h\":\"2. 重启与重载\",\"t\":[\"一个springboot项目在运行时实际上是分两个过程进行的，根据加载的东西不同，划分成base类加载器与restart类加载器。\",\"base类加载器：用来加载jar包中的类，jar包中的类和配置文件由于不会发生变化，因此不管加载多少次，加载的内容不会发生变化.\",\"restart类加载器：用来加载开发者自己开发的类、配置文件、页面等信息，这一类文件受开发者影响\"]},\"182\":{\"h\":\"2.1 重启：Restart\",\"t\":[\"加载内容：自定义开发代码，包含类、页面、配置文件等，加载位置restart类加载器。\",\"当springboot项目启动时，base类加载器执行，加载jar包中的信息后，restart类加载器执行，加载开发者制作的内容。\"]},\"183\":{\"h\":\"2.2 重载Reload\",\"t\":[\"加载内容：项目中包含的jar包，加载位置base类加载器。\",\"当执行构建项目后，由于jar中的信息不会变化，因此base类加载器无需再次执行，所以仅仅运行restart类加载即可，也就是将开发者自己制作的内容重新加载就行了，这就完成了一次热部署的过程，也可以说热部署的过程实际上是重新加载restart类加载器中的信息。\"]},\"184\":{\"h\":\"3. 手动启动热部署\",\"t\":[\"导入一个SpringBoot开发依赖，其中包含热部署工具。\"]},\"185\":{\"h\":\"3.1 导入坐标\",\"t\":[\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <optional>true</optional> </dependency> \"]},\"186\":{\"h\":\"3.2 构建项目\",\"t\":[\"热部署需要手动生效，当修改了文件，准备测试前，手动使用IDEA进行Build Project\",\"菜单栏：Buidl->Build Project（快捷键 Ctrl + F9）。\"]},\"187\":{\"h\":\"3.3 问题\",\"t\":[\"每次进行热部署都需要开发者手工操作，非常麻烦。\"]},\"188\":{\"h\":\"4. 自动启动热部署\",\"t\":[\"这个是IDEA中的设置，让IDEA自动进行热部署。\"]},\"189\":{\"h\":\"4.1 设置：自动构建项目build project\",\"t\":[\"Setting中勾选，如下：\",\"2-1-1\"]},\"190\":{\"h\":\"4.2 设置：允许在程序运行时进行自动构建\",\"t\":[\"继续在Setting进行如下设置：\",\"2-1-2\"]},\"191\":{\"h\":\"4.3 热部署的时机\",\"t\":[\"默认当idea工具失去焦点5秒后进行热部署，改完程序需要到浏览器上去调试，这个时候idea就自动进行热部署操作，很人性化。\"]},\"192\":{\"h\":\"5. 热部署监控的文件范围\",\"t\":[\"并发所有的文件修改都会触发热部署，开发中工具中有一组配置，该配置就是来指定哪些文件的修改会触发热部署。\"]},\"193\":{\"h\":\"5.1 默认不参与热部署的目录\",\"t\":[\"/META-INF/maven\",\"/META-INF/resources\",\"/resources\",\"/static\",\"/public\",\"/templates\"]},\"194\":{\"h\":\"5.2 修改不参与热部署的目录或文件\",\"t\":[\"可以通过application.yml文件进行设定哪些文件不参与热部署操作。\",\"spring: devtools: restart: # 设置不参与热部署的文件或文件夹 exclude: static/**,public/**,config/application.yml \"]},\"195\":{\"h\":\"6. 关闭热部署\",\"t\":[\"热部署是纯开发阶段的功能，生产阶段必须关闭热部署。\"]},\"196\":{\"h\":\"6.1 通过配置强制关闭热部署\",\"t\":[\"spring: devtools: restart: enabled: false \"]},\"197\":{\"h\":\"6.2 通过启动类强制关闭热部署\",\"t\":[\"配置文件层级过多可能会导致相符覆盖最终引起配置失效，可以提高配置的层级，在更高层级中配置关闭热部署。 比如：最高等级的启动文类中进行关闭。\",\"@SpringBootApplication public class SSMPApplication { public static void main(String[] args) { System.setProperty(\\\"spring.devtools.restart.enabled\\\",\\\"false\\\"); SpringApplication.run(SSMPApplication.class); } } \"]},\"198\":{\"h\":\"2-2. 高级配置\"},\"199\":{\"h\":\"Ⅰ. 第三方Bean属性\"},\"200\":{\"h\":\"1. @ConfigurationProperties\",\"t\":[\"yaml配置项的主流配置方式是：将一组数据封装到一个对象中，使用的时候加载该对象，通过该对象读取所需配置。\",\"@ConfigurationProperties注解就是用来指定加载的数据(配置文件中的哪个配置项)。\",\"//file:config/JDBCDateSource：该类用来创建数据对象 @Component//定义为spring管控的bean //指定加载的数据(配置文件中的哪个配置项):datasource @ConfigurationProperties(prefix = \\\"datasource\\\") public class JDBCDateSource { //属性和要封装的数据一一对应 private String driver; private String url; private String username; private String password; ...getter/setter... } \",\"在需要使用这组配置的类中，注入该数据对象，就可以动态获取配置的数据了。\"]},\"201\":{\"h\":\"2. @ConfigurationProperties绑定第三方Bean\",\"t\":[\"@ConfigurationProperties注解是写在类定义的上方，而第三方开发的bean源代码不是你自己书写的，你也不可能到源代码中去添加@ConfigurationProperties注解，不过@ConfigurationProperties注解依然可以为第三方Bean进行属性绑定，只是格式不同。\"]},\"202\":{\"h\":\"2.1 将第三方类加入IOC\",\"t\":[\"Spring知识回顾\",\"在方法上加@Bean注解，该方法的返回值就会加入IOC管理。\",\"以在启动类中，获取德鲁伊对象为例：\",\"@SpringBootApplication public class SpringBootApplication{ @Bean public DruidDataSource datasource(){ DruidDataSource ds = new DruidDataSource(); return ds; } } \"]},\"203\":{\"h\":\"2.2 在yml配置文件中定义要绑定的属性\",\"t\":[\"datasource: driverClassName: com.mysql.jdbc.Driver \"]},\"204\":{\"h\":\"2.3 用@ConfigurationProperties注解为第三方bean进行属性绑定\",\"t\":[\"@Bean @ConfigurationProperties(prefix = \\\"datasource\\\") public DruidDataSource datasource(){ DruidDataSource ds = new DruidDataSource(); return ds; } \"]},\"205\":{\"h\":\"2.4 总结\",\"t\":[\"和自定义Bean的属性绑定操作类似，只不过@ConfigurationProperties注解是添加在方法上的。\"]},\"206\":{\"h\":\"3. @EnableConfigurationProperties\",\"t\":[\"该注解是作用在配置类上的，属性值是个数组，用来标注要使用@ConfigurationProperties注解绑定属性的类。\",\"该注解的意义就是对绑定属性的类进行统一的管理。\"]},\"207\":{\"h\":\"3.1 配置类统一管理\",\"t\":[\"@SpringBootApplication //配置类：同时也是SpringBoot启动类 //标注ServerConfig类使用@ConfigurationProperties注解绑定属性 @EnableConfigurationProperties(ServerConfig.class) public class Springboot13ConfigurationApplication { } \"]},\"208\":{\"h\":\"3.2 使用@ConfigurationProperties的类\",\"t\":[\"//该类不能再声明为bean,统一管理时，已经将其自动声明为bean了 @Data @ConfigurationProperties(prefix = \\\"servers\\\") public class ServerConfig { private String ipAddress; private int port; private long timeout; } \"]},\"209\":{\"h\":\"4. debug\",\"t\":[\"使用@ConfigurationProperties注解时，可能会出现一个提示信息，只需要添加一个坐标此提醒就消失了。\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-configuration-processor</artifactId> </dependency> \"]},\"210\":{\"h\":\"5. 宽松绑定\",\"t\":[\"配置文件：在进行属性绑定时，配置文件中的命名格式与变量名的命名格式可以进行格式上的最大化兼容。\",\"书写前缀：prefix的值只支持烤肉串书写模式（全小写或用-分割）\",\"@Value：该注解不支持宽松绑定\"]},\"211\":{\"h\":\"5.1 示例1：宽松绑定\",\"t\":[\"//配置文件中的servers.ipAddress属性各种书写模式 servers: ipAddress: 192.168.0.2 # 驼峰模式 ip_address: 192.168.0.2 # 下划线模式 ip-address: 192.168.0.2 # 烤肉串模式 IP_ADDRESS: 192.168.0.2 # 常量模式 \",\"@Component @Data @ConfigurationProperties(prefix = \\\"servers\\\") public class ServerConfig { private String ipAddress; //无论配置文件中IPAddress哪种书写模式，这里都生效 } \"]},\"212\":{\"h\":\"5.2 示例2：prefix\",\"t\":[\"@Bean @ConfigurationProperties(prefix = \\\"dataSource\\\") public DruidDataSource datasource(){ DruidDataSource ds = new DruidDataSource(); return ds; } \",\"报错：Configuration property name 'dataSource' is not valid:Invalid characters: 'S'\"]},\"213\":{\"h\":\"Ⅱ. 计量单位\"},\"214\":{\"h\":\"1. 属性的单位\",\"t\":[\"配置文件中的属性，有些是有单位的，如时间和空间的属性。\",\"servers: ip-address: 192.168.0.1 port: 2345 timeout: 200 # 时间属性， datasize: 20MB # 空间属性 \"]},\"215\":{\"h\":\"2. 时间单位：Duration\",\"t\":[\"Duration类：JDK8新增，表示时间间隔，可以通过@DurationUnit注解描述时间单位\",\"@ConfigurationProperties(prefix = \\\"servers\\\") public class ServerConfig { @DurationUnit(ChronoUnit.HOURS) private Duration serverTimeOut; } \"]},\"216\":{\"h\":\"3. 空间单位：DateSize\",\"t\":[\"DateSize类：JDK8新增，表示存储空间，可以通过@DataSizeUnit注解描述存储空间单位。\",\"注意：空间属性在配置文件中是可以直接指定单位的。\",\"@ConfigurationProperties(prefix = \\\"servers\\\") public class ServerConfig { @DataSizeUnit(DataUnit.MEGABYTES) private DataSize dataSize; } \"]},\"217\":{\"h\":\"Ⅲ. 数据校验\",\"t\":[\"配置文件中的属性值，可能跟预想的不一样，比如要配置Int类型的数据，确给了个String类型的值。 为了避免这种问题，就要用到属性校验了。\",\"提示\",\"仅做了解，配置很重要，肯定要遵守规范书写的。\"]},\"218\":{\"h\":\"1. 导入依赖\",\"t\":[\"JAVAEE的JSR303规范中给出了具体的数据校验标准，开发者可以根据自己的需要选择对应的校验框架。\",\"<!--1.导入JSR303规范--> <dependency> <groupId>javax.validation</groupId> <artifactId>validation-api</artifactId> </dependency> <!--使用hibernate框架提供的校验器做实现--> <dependency> <groupId>org.hibernate.validator</groupId> <artifactId>hibernate-validator</artifactId> </dependency> \"]},\"219\":{\"h\":\"2. @Validated\",\"t\":[\"在需要开启校验功能的类上使用注解@Validated开启校验功能。\",\"@Component @Data @ConfigurationProperties(prefix = \\\"servers\\\") //开启对当前bean的属性注入校验 @Validated public class ServerConfig { } \"]},\"220\":{\"h\":\"3. 对具体的字段设置校验规则\",\"t\":[\"@Component @Data @ConfigurationProperties(prefix = \\\"servers\\\") //开启对当前bean的属性注入校验 @Validated public class ServerConfig { //设置具体的规则 @Max(value = 8888,message = \\\"最大值不能超过8888\\\") @Min(value = 202,message = \\\"最小值不能低于202\\\") private int port; } \"]},\"221\":{\"h\":\"2-3. 代码测试\"},\"222\":{\"h\":\"Ⅰ. 集成 Junit\",\"t\":[\"junit默认已经被SpringBoot集成了。\"]},\"223\":{\"h\":\"1. pom.xml\",\"t\":[\"spring-boot-starter-test就是junit测试有关的模块，在创建SpringBoot工程时，他是默认导入的。如果是手动通过Maven创建的项目，可以手动导入该starter。\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> \"]},\"224\":{\"h\":\"2. junit的使用方式\",\"t\":[\"SpringBoot是需要启动的，一旦启动了，就不能在手动运行代码里的main方法和被@Test注解修饰的方法，否则SpringBoot会暂停。\",\"因此对于SpringBoot项目，junit不是简单的通过注解来使用的，而是通过测试类。\"]},\"225\":{\"h\":\"3. test目录\",\"t\":[\"SpringBoot默认有个test目录， 与src/main同级，该目录就是用来写测试代码的。\",\"该目录如果不存在，就手动创建（对于多模块SpringBoot项目，子模块内就没有该目录）。手动创建后需要右键test目录：Mark Directory as -> Test Sources Root。\",\"使该目录成为SpringBoot的测试目录，同时目录由灰色变为绿色。\"]},\"226\":{\"h\":\"4. 测试类\",\"t\":[\"SpringBoot已经默认创建了一个测试类：test/java/com/sgugo/XxxApplicationTests\",\"@SpringBootTest //声明测试类 class AifaceApplicationTests { @Test //声明测试方法 void contextLoads() { //测试代码 } } \",\"@SpringBootTest注解定义在类的上方，声明该类为测试类。\"]},\"227\":{\"h\":\"5. 测试的步骤\",\"t\":[\"导入测试对应的starter（创建项目时SpringBoot自动导入了）\",\"创建测试类（由@SpringBootTest修饰），项目默认有一个测试类。\",\"注入要测试的对象（IOC自动装载）\",\"执行要测试的对象对应的方法。 \",\"方法执行时会自动启动SpringBoot，然后执行该方法。\",\"@SpringBootTest class BlogApplicationTests { @Autowired private BookDao bookDao;//注入要测试的对象 @Test void contextLoads() { bookDao.save(); //执行要测试的对象的方法。 } } \"]},\"228\":{\"h\":\"6. 测试类的目录规划\",\"t\":[\"测试类默认的位置和引导类是对应的（package是一样的）。 如果将测试类的位置改变了，测试类将无法运行（包不匹配）。\"]},\"229\":{\"h\":\"7. classes属性\",\"t\":[\"当测试类与引导类的包不匹配时，将无法执行测试类。\",\"此时需要为@SpringBootTest注解添加一个classes属性，指明当前项目的引导类，这样测试类就再次有效了。\",\"@SpringBootTest(calssess = BlogApplication.class) class BlogApplicationTests { } \",\"和Spring整合Junit一样，只是SpringBoot进行了整合简化。SpringBoot不用指定配置类，而是自动去查找配置类（在和引导类相同的包中），如果包里找不到@SpringBootTest注解的类，就会报错，此时就必须手动指定配置类了。\"]},\"230\":{\"h\":\"Ⅱ. 加载测试专用配置\",\"t\":[\"相关信息\",\"配置文件已经设置好了，但是要测试的属性值与配置文件中的不一样（比如测试兼容性）。如果每次测试前改过来，每次测试后改回去，这太麻烦了。因此需要在测试环境中临时创建一组属性，来覆盖源码中设定的属性。\",\"注意\",\"并不常用，暂略。\"]},\"231\":{\"h\":\"Ⅲ. 测试API\",\"t\":[\"注意\",\"在test中测试API，而不是在POSTMAN中。\",\"一般使用POSTMAN或者Swagger，暂略。\"]},\"232\":{\"h\":\"Ⅳ. 数据层测试\",\"t\":[\"注意\",\"暂略，一般会有测试用的数据库。\"]},\"233\":{\"h\":\"3-1. 打包与发布\"},\"234\":{\"h\":\"Ⅰ. Windows\",\"t\":[\"实际开发时都是部署到Linux服务器上的，windows服务器仅作为测试。\",\"其实测试版基本也是在Linux上。\"]},\"235\":{\"h\":\"1. 概念\",\"t\":[\"打包：指将程序转换成一个可执行的文件，\",\"发布：指不依赖开发环境执行打包产生的文件。\",\"上述两个操作都有对应的命令可以快速执行。\"]},\"236\":{\"h\":\"2. 打包\",\"t\":[\"SpringBoot程序是基于Maven创建的，在Maven中提供有打包的指令，叫做package。 本操作可以在Idea环境下执行。\",\"mvn package \",\"打包后会产生一个与工程名类似的jar文件，其名称由模块名+版本号+.jar组成。\"]},\"237\":{\"h\":\"3. 发布 (运行)\",\"t\":[\"程序打包好以后，就可以直接执行了。 在程序包所在路径下，执行指令：\",\"java -jar 工程包名.jar \",\"执行程序打包指令后，程序正常运行，与在Idea下执行程序没有区别。\"]},\"238\":{\"h\":\"3.1 JDK\",\"t\":[\"计算机上必须安装JDK，否则无法执行java命令。\"]},\"239\":{\"h\":\"3.2 Maven插件\",\"t\":[\"在使用向导创建SpringBoot工程时，pom.xml文件中会有如下配置，这一段配置千万不能删除，否则打包后无法正常执行程序。\",\"<build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> \"]},\"240\":{\"h\":\"4. SpringBoot的Maven打包插件\",\"t\":[\"spring-boot-maven-plugin插件用于将当前程序打包成一个可以独立运行的程序包。\"]},\"241\":{\"h\":\"4.1 两种打包方式\",\"t\":[\"方式1：不使用spring-boot-maven-plugin插件打包 \",\"将默认生成的spring-boot-maven-plugin插件注释掉。\",\"方式2：使用spring-boot-maven-plugin插件打包\"]},\"242\":{\"h\":\"4.2 两种打包方式的对比\",\"t\":[\"打包后文件的大小不同：差了30倍\",\"打包后所包含的内容不同\",\"打包程序中个别文件内容不同\",\"3-1-1\"]},\"243\":{\"h\":\"5 Jar包的目录结构\"},\"244\":{\"h\":\"5.1 带spring-boot-maven-plugin插件的jar包\",\"t\":[\"META-INF \",\"MANIFEST.MF\",\"BOOT-INF \",\"classes：项目目录 \",\"com：项目包\",\"static：页面\",\"application.yml：配置文件\",\"lib：所有springboot项目依赖的jar包都在这里了，依赖这些Jar包，springboot就可以单独运行了\",\"Org.Springframework.boot.loader \",\"JarLauncher.class：该类内部要查找MANIFEST.MF中Start-Class属性配置的类，并执行\"]},\"245\":{\"h\":\"5.2 不带spring-boot-maven-plugin插件的jar包\",\"t\":[\"com：项目目录\",\"META-INF \",\"MANIFEST.MF：\",\"static：页面目录\",\"application.yml：配置文件\"]},\"246\":{\"h\":\"5.3 MANIFEAST.MF\",\"t\":[\"//1.普通工程的MANIFEAST.MF Manifest-Version: 1.0 Implementation-Title: springboot_08_ssmp Implementation-Version: 0.0.1-SNAPSHOT Build-Jdk-Spec: 1.8 Created-By: Maven Jar Plugin 3.2.0 //2.带spring-boot-maven-plugin的jar包的MANIFEAST.MF Manifest-Version: 1.0 Spring-Boot-Classpath-Index: BOOT-INF/classpath.idx Implementation-Title: springboot_08_ssmp Implementation-Version: 0.0.1-SNAPSHOT Spring-Boot-Layers-Index: BOOT-INF/layers.idx //JarLauncher执行该类：启动类 Start-Class: com.itheima.SSMPApplication Spring-Boot-Classes: BOOT-INF/classes/ Spring-Boot-Lib: BOOT-INF/lib/ Build-Jdk-Spec: 1.8 Spring-Boot-Version: 2.5.4 Created-By: Maven Jar Plugin 3.2.0 //如果使用java -jar执行此程序包，将执行Main-Class属性配置的类 Main-Class: org.springframework.boot.loader.JarLauncher \"]},\"247\":{\"h\":\"5.4 总结\",\"t\":[\"SpringBoot程序添加配置后会打出一个特殊的包，包含Spring框架部分功能，原始工程内容，原始工程依赖的jar包\",\"首先读取MANIFEST.MF文件中的Main-Class属性，用来标记执行java -jar命令后运行的类\",\"JarLauncher类执行时会找到Start-Class属性，也就是启动类类名\",\"运行启动类时会运行当前工程的内容\",\"运行当前工程时会使用依赖的jar包，从lib目录中查找\",\"这就是为什么这个jar包能独立运行的原因。\",\"而不带Maven插件打包的结果只是一个普通包，在MANIFEST.MF文件中也就没有了Main-Class对应的属性了，所以运行时提示找不到主清单属性，运行报错。\"]},\"248\":{\"h\":\"6. 端口号冲突\",\"t\":[\"一般80端口冲突都是因为开启了多个服务器，常用解决方案时，其他服务器关闭，或者修改端口号，比如前端服务器的端口号改为8080。\",\"如果关闭其他服务器和改端口号都解决不了问题，就要针对性的结束进程了。\",\"# 查询端口 netstat -ano # 查询指定端口 netstat -ano |findstr \\\"端口号\\\" # 根据进程PID查询进程名称 tasklist |findstr \\\"进程PID号\\\" # 根据PID杀死任务 taskkill /F /PID \\\"进程PID号\\\" \"]},\"249\":{\"h\":\"Ⅱ. Linux\"},\"250\":{\"h\":\"1. 项目部署步骤\",\"t\":[\"本地：开发部门使用git将项目上传道版本服务器\",\"服务器：使用git下载项目\",\"服务器：使用Maven工具在当前真机环境下构建项目\",\"启动服务\"]},\"251\":{\"h\":\"2. 部署环境\",\"t\":[\"安装JDK，搭建数据库并创建好数据表。\"]},\"252\":{\"h\":\"3. 上传jar包\",\"t\":[\"将SpringBoot打包好的jar包上传道 /usr/local目录中（其他目录也可以）。\"]},\"253\":{\"h\":\"4. 启动项目\",\"t\":[\"基本命令和windows上的相同。\",\"执行jar命令：java –jar 工程名.jar\"]},\"254\":{\"h\":\"3-2. 配置文件设计\",\"t\":[\"提示\",\"以下知识点仅做了解，实际开发时：\",\"采用多环境配置文件区分不同场景下的配置。\",\"采用配置中心更新配置文件。\"]},\"255\":{\"h\":\"Ⅰ. 临时属性配置\",\"t\":[\"程序包打好以后，里面的配置都已经是固定的了，比如配置了服务器的端口是8080。\",\"如果执行jar包时，发现端口被占用了，而占用端口的程序又不能关闭，这是该怎么办呢？要重新打包吗？\"]},\"256\":{\"h\":\"1. 启动命令的临时属性\",\"t\":[\"SpringBoot提供了临时属性的方式快速修改某些配置，在启动服务的时候，将配置作为参数添加即可。\",\"java -jar blog.jar --server.port=81 \",\"语法 输入启动命令后，空一格输入两个-，然后按照 属性名=属性值 的方式添加参数（参数的键值对格式为properties），如果有多个属性要添加，按照上述格式继续写，属性与属性之间使用 空格 分隔。\"]},\"257\":{\"h\":\"2. 属性加载的优先级\",\"t\":[\"临时属性的优先级高于配置文件。\"]},\"258\":{\"h\":\"3. 开发中使用临时属性\",\"t\":[\"在IDEA中，也可以输入临时属性： 点击右上角的SpringBoot引导类的运行界面，Program arguments就是输入临时属性的\",\"注意：新版的IDEA默认是没有Program arguments选项框的，使用快捷键Alt m 可以添加隐藏的选项框。\",\"3-2-1\"]},\"259\":{\"h\":\"4. main的args参数\",\"t\":[\"启动项目时，SpringBoot会自动执行引导类的main方法，main方法再执行时，将args参数传递给了里面的run方法。\",\"在Idea中配置的临时参数就是通过这个位置传递到我们的程序中的。 如果将run方法的args删掉，Springboot项目依然能启动， 但是就无法使用临时属性了。\",\"public static void main(String[] args) { SpringApplication.run(SSMPApplication.class,args); } public static void main(String[] args) { SpringApplication.run(SSMPApplication.class);//不携带args参数，临时属性失效 } //自定义临时属性 public static void main(String[] args) { String[] arg = new String[1]; arg[0] = \\\"--server.port=8082\\\"; //依然能够生效 SpringApplication.run(SSMPApplication.class, arg); } \"]},\"260\":{\"h\":\"5. 总结\",\"t\":[\"警告\",\"临时属性一般不用，而是采用多个配置文件。\"]},\"261\":{\"h\":\"Ⅱ. 配置文件分类\",\"t\":[\"开发中使用的配置文件与项目上线后的配置文件是有一定区别的。 因此需要对配置文件分类，采用多个配置文件。\"]},\"262\":{\"h\":\"1. 配置文件的级别\",\"t\":[\"SpringBoot提供了四个级别的配置文件（级别指的是优先级）。 其实就是四个配置文件书写的位置，不同的位置优先级不同。\",\"4级：类路径下配置文件（一直使用的是这个，resources/application.yml文件）【最低】\",\"3级：类路径下config目录下配置文件，resource/config/application.yml\",\"2级：程序包所在目录中配置文件\",\"1级：程序包所在目录中config目录下配置文件【最高】\"]},\"263\":{\"h\":\"2. 使用场景\",\"t\":[\"1级与2级留做系统打包后设置通用属性，1级常用于运维经理进行线上整体项目部署方案调控\",\"3级与4级用于系统开发阶段设置通用属性，3级常用于项目经理进行整体项目属性调控\",\"项目类路径配置文件（4级）：服务于开发人员本机开发与测试\",\"项目类路径config目录中配置文件（3级）：服务于项目经理整体调控\",\"工程路径配置文件（2级）：服务于运维人员配置涉密线上环境\",\"工程路径config目录中配置文件（1级）：服务于运维经理整体调控\"]},\"264\":{\"h\":\"3. 多层级配置文件的关系\",\"t\":[\"不同配置相互叠加。 相同配置，高优先级覆盖低优先级的。\"]},\"265\":{\"h\":\"Ⅲ. 自定义配置文件\",\"t\":[\"配置文件名默认为：application.yml，这个名字是可以修改的。\"]},\"266\":{\"h\":\"1. 应用场景\",\"t\":[\"比如元旦做活动，需要修改服务器配置，1周后活动取消，这时候更新下配置文件即可。\",\"我们不能再原始配置文件上修改，而是新建一个配置文件，方便维护。\"]},\"267\":{\"h\":\"2. 配置方式\",\"t\":[\"使用临时属性设置配置文件名，注意仅仅是名称，不要带扩展名 \",\"properties与yml文件格式均支持：--spring.config.name=ebank\",\"使用临时属性设置配置文件路径，这个是全路径名 \",\"--spring.config.loaction=classpath:/ebank.properties\"]},\"268\":{\"h\":\"3. 补充说明\",\"t\":[\"现在写的SpringBoot项目都是单体项目（单服务器版本），企业开发时更多的是基于SpringCloud的多服务器的微服务项目。\",\"这种配置方式和我们现在学习的完全不一样，所有的服务器将不再设置自己的配置文件，而是通过配置中心获取配置，动态加载配置信息，目的是为了集中管理。\"]},\"269\":{\"h\":\"3-3. 多环境开发\",\"t\":[\"什么是多环境\",\"电脑上写的程序最终要放到别人的服务器上去运行。每个计算机环境不一样，这就是多环境。\",\"比如连接的数据库不一样，设置的访问端口不一样等等。\",\"常见的多环境开发主要兼顾3种环境设置：\",\"生产环境：服务器部署使用\",\"开发环境：开发人员使用\",\"测试环境：公司测试部门使用\"]},\"270\":{\"h\":\"Ⅰ. yml 单一文件版\",\"t\":[\"在一个yaml文件中，设置三种环境。\"]},\"271\":{\"h\":\"1. 示例\",\"t\":[\"3-3-1\"]},\"272\":{\"h\":\"2. 语法\",\"t\":[\"以---分割各个环境，spring.profiles：指定环境名，名字随意。\",\"最顶层是来配置当前启动的环境的。一般最顶层也会加上一些通用的配置。\",\"spring: profiles: active: pro # 启动pro --- spring: profiles: pro server: port: 80 --- spring: profiles: dev server: port: 81 --- spring: config: #profiles 过时了，可以采用config.activate.on-profile代替 activate: on-profile: test server: port: 82 \"]},\"273\":{\"h\":\"Ⅱ. yml 多文件版\",\"t\":[\"单个文件存放多个环境配置，不容易维护，且容易暴露信息。\",\"比如：生产环境的密码被测试任意拿到。\"]},\"274\":{\"h\":\"1. 定义多个配置文件\",\"t\":[\"在resource目录下设置如下配置文件（注意：命名严格要求application-xx）\",\"application.yml【主配置文件，存放通用配置】\",\"application-dev.yml【dev环境配置文件】\",\"application-test.yml【test环境配置文件】\",\"application-pro.yml【生产环境配置文件】\"]},\"275\":{\"h\":\"2. 应用\",\"t\":[\"在主配置文件中指定要引入哪个环境的配置文件。\",\"主配置文件还会存放通用的配置信息，环境分类配置文件中常用于设置冲突属性（局部）。 启用的名字就是application-后面的名字。\",\"spring: profiles: active: dev #启用dev环境的配置文件 \"]},\"276\":{\"h\":\"Ⅲ. 多环境开发控制\"},\"277\":{\"h\":\"1. include\",\"t\":[\"将所有的配置根据功能对配置文件中的信息进行拆分，并制作成独立的配置文件。\",\"命名规则如下：\",\"application-devDB.yml\",\"application-devRedis.yml\",\"application-devMVC.yml\"]},\"278\":{\"h\":\"1.1 使用\",\"t\":[\"使用include属性在激活指定环境的情况下，同时对多个环境进行加载使其生效，多个环境间使用逗号分隔。\",\"pring: profiles: active: dev # 主环境dev include: devDB,devRedis,devMVC #dev环境额外新增的配置 \"]},\"279\":{\"h\":\"1.2 优先级\",\"t\":[\"当主环境dev与其他环境有相同属性时，主环境属性生效；其他环境中有相同属性时，最后加载的环境属性生效。\"]},\"280\":{\"h\":\"2. group\",\"t\":[\"include有一个问题，比如我要切换dev环境为pro时，include也要修改。 SpringBoot从2.4版开始使用group属性替代include属性，降低了配置书写量。\",\"spring: profiles: active: dev group: \\\"dev\\\": devDB,devRedis,devMVC \\\"pro\\\": proDB,proRedis,proMVC \\\"test\\\": testDB,testRedis,testMVC \",\"如上，active指定哪个环境组生效。group中配置各个组环境组，其中键为主环境，值为额外include的环境。主环境的优先级最低（最先加载），其他的根据加载顺序确定。\"]},\"281\":{\"h\":\"3. Maven设置多环境\",\"t\":[\"先在maven环境中设置用什么具体的环境，在SpringBoot中读取maven设置的环境即可。\",\"<!--设置多环境--> <profiles> <profile> <id>env_dev</id> <properties> <profile.active>dev</profile.active> </properties> <activation> //设置默认启动的环境 <activeByDefault>true</activeByDefault> </activation> </profile> <profile> <id>env_pro</id> <properties> <profile.active>pro</profile.active> </properties> </profile> </profiles> \"]},\"282\":{\"h\":\"3.1 SpringBoot中读取maven设置值\",\"t\":[\"SpringBoot使用@..@占位符读取Maven对应的配置属性值。\",\"spring: profiles: active: @profile.active@ #动态读取配置 \"]},\"283\":{\"h\":\"3.2 使用\",\"t\":[\"执行Maven打包指令，并在生成的boot打包文件.jar文件中查看对应信息，发现 @profile.active@被替换成了具体的值。\"]},\"284\":{\"h\":\"3.3 debug\",\"t\":[\"基于SpringBoot读取Maven配置属性的前提下，如果在Idea下测试工程时pom.xml每次更新需要手动compile方可生效。\"]},\"285\":{\"h\":\"3-4. log日志\",\"t\":[\"提示\",\"实际开发时，是要在应用后台对日志进行可视化处理的。\"]},\"286\":{\"h\":\"Ⅰ. 记录日志\"},\"287\":{\"h\":\"1. 日志的作用\",\"t\":[\"编程期调试代码\",\"运营期记录信息\",\"记录日常运营重要信息（峰值流量、平均响应时长……）\",\"记录应用报错信息（错误堆栈）\",\"记录运维过程数据（扩容、宕机、报警……）\"]},\"288\":{\"h\":\"2. 使用日志对象记录日志\",\"t\":[\"例如：在某个Controller添加日志记录。\",\"@RestController @RequestMapping(\\\"/books\\\") public class BookController { @GetMapping public String getById(){ System.out.println(\\\"springboot is running...2\\\"); //1.创建日志对象 private static final logger log = LoggerFactory.getLogger(BookController.class); //2.记录日志(日志会在控制台打印):调用日志对象的API记录日志 log.debug(\\\"debug...\\\"); log.info(\\\"info...\\\"); log.warn(\\\"warn...\\\"); log.error(\\\"error...\\\"); return \\\"springboot is running...2\\\"; } } \"]},\"289\":{\"h\":\"3. 优化日志对象的创建\",\"t\":[\"每个类都要创建日志对象，太麻烦了。\",\"可以创建一个基础控制器BaseController，在该控制器中创建日志对象，需要记录日志的控制器就继承该控制器。 缺点：还是比较繁琐，需要继承，继承只能一次，不能浪费了。\"]},\"290\":{\"h\":\"4. @Slf4j\",\"t\":[\"lombok包提供的类注解@Slf4j，可以为类注入日志对象。\",\"@Slf4j //注入日志对象,对象名就是：log @RestController @RequestMapping(\\\"/books\\\") public class BookController { @GetMapping public String getById(){ System.out.println(\\\"springboot is running...2\\\"); //直接使用注入的对象log log.debug(\\\"debug...\\\"); log.info(\\\"info...\\\"); log.warn(\\\"warn...\\\"); log.error(\\\"error...\\\"); return \\\"springboot is running...2\\\"; } } \"]},\"291\":{\"h\":\"Ⅱ. 日志的等级\"},\"292\":{\"h\":\"1. 等级划分\",\"t\":[\"日志设置好以后可以根据设置选择哪些参与记录。这里是根据日志的级别来设置的。\",\"日志的级别分为6种，分别是：\",\"TRACE：运行堆栈信息，使用率低\",\"DEBUG：程序员调试代码使用\",\"INFO：记录运维过程数据\",\"WARN：记录运维过程报警数据\",\"ERROR：记录错误堆栈信息\",\"FATAL：灾难信息，合并计入ERROR\"]},\"293\":{\"h\":\"2. 日志的等级选择\",\"t\":[\"一般情况下，开发时候使用DEBUG，上线后使用INFO，运维信息记录使用WARN即可。\",\"日志等级一般在application配置文件中设置。\"]},\"294\":{\"h\":\"3. 配置文件设置日志等级\",\"t\":[\"# 开启 debug 模式，输出调试信息，常用于检查系统运行状况 debug: true \"]},\"295\":{\"h\":\"4. 通过日志组设置日志等级\",\"t\":[\"直接设置日志等级太粗暴了，日志系统提供了更加细致的日志等级控制，可以精确到某个包的日志等级\",\"也可以同时为多个包设置日志等级（日志组）。\",\"logging: # 设置日志组 group: # 自定义组名，设置当前组中所包含的包 ebank: com.blog.controller level: # 默认日志组root，控制项目下所有包 root: debug # 为对应组设置日志级别 ebank: debug # 为对包设置日志级别 com.itheima.controller: debug \"]},\"296\":{\"h\":\"Ⅲ. 日志输出格式\"},\"297\":{\"h\":\"1. 默认格式\",\"t\":[\"在控制台打印日志时，默认的格式如下：\",\"3-4-1\"]},\"298\":{\"h\":\"2. 配置文件控制日志格式\",\"t\":[\"可以在配置文件中，配置日志格式。\",\"logging: pattern: console: \\\"具体的格式\\\" \"]},\"299\":{\"h\":\"3. 日志格式语法\",\"t\":[\"%d：日期\",\"%m：消息\",\"%n：换行\",\"%clr()：颜色 \",\"%clr(%d){red}：后接中括号可以指定日志的颜色\",\"长度：用于对齐，在字母前使用数字，数字就代表该部分日志占多少位\",\"普通字符串：可以拼接任意普通字符串，更加易读\",\"logging: pattern: console: \\\"%d %clr(%p) --- [%16t] %clr(%-40.40c){cyan} : %m %n\\\" \"]},\"300\":{\"h\":\"4. 日志处理\",\"t\":[\"实际开发中，都是将日志写入文件，然后再使用工具读取日志文件。再使用各种字符串处理方法和前端的美化，做日志可视化处理。 这样在后台就可以看见非常：直观、美观、动态、且包含数据分析、警示等各种附加功能的日志了。\"]},\"301\":{\"h\":\"Ⅳ. 日志文件\",\"t\":[\"项目上线后，就要将日志写入文件，然后在进行可视化处理了。\"]},\"302\":{\"h\":\"1. 设置日志文件\",\"t\":[\"在配置文件中开启日志文件。\",\"logging: file: name: server.log #日志文件名 \"]},\"303\":{\"h\":\"2. 日志策略\",\"t\":[\"对于日志文件的使用存在各种各样的策略，例如每日记录，分类记录，报警后记录等。\",\"其中最基础的策略就是：日志分文件存储（防止文件太大，难易读取）。 分文件存储就要为每个文件设置动态有序的文件名，并设置新增文件的时机（限制日志大小）。\"]},\"304\":{\"h\":\"3. 日志策略配置\",\"t\":[\"在配置文件中，可以对基本的日志策略进行配置：\",\"logging: logback: rollingpolicy: #日志文件大小限制,超过该大小就新建日志文件 max-file-size: 3MB #新建日志文件的命名规则 file-name-pattern: server.%d{yyyy-MM-dd}.%i.log \",\"命名规则\",\"server：固定部分\",\"%d{yyyy-MM-dd}：日期，中括号可选，用来配置日期格式\",\"%i：从0开始的自增数字\"]},\"305\":{\"h\":\"Ⅴ. Logback 日志\"},\"306\":{\"h\":\"1. 介绍\",\"t\":[\"spring boot内部使用Logback作为日志实现的框架。\",\"Logback和log4j非常相似，如果你对log4j很熟悉，那对logback很快就会得心应手。\",\"logback相对于log4j的一些优点\"]},\"307\":{\"h\":\"2. 配置logback日志\",\"t\":[\"删除日志配置：删除配置文件中所有的日志配置，包括mybatis的\",\"安装插件：安装idea彩色日志插件：grep-console\",\"创建配置文件：resources 中创建 logback-spring.xml \",\"自动在该模块中生效。\"]},\"308\":{\"h\":\"3. 配置文件内容\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <configuration scan=\\\"true\\\" scanPeriod=\\\"10 seconds\\\"> <!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 --> <!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true --> <!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 --> <!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --> <contextName>logback</contextName> <!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。 --> <property name=\\\"log.path\\\" value=\\\"D:/guli_1010/edu\\\" /> <!-- 彩色日志 --> <!-- 配置格式变量：CONSOLE_LOG_PATTERN 彩色日志格式 --> <!-- magenta:洋红 --> <!-- boldMagenta:粗红--> <!-- cyan:青色 --> <!-- white:白色 --> <!-- magenta:洋红 --> <property name=\\\"CONSOLE_LOG_PATTERN\\\" value=\\\"%yellow(%date{yyyy-MM-dd HH:mm:ss}) |%highlight(%-5level) |%blue(%thread) |%blue(%file:%line) |%green(%logger) |%cyan(%msg%n)\\\"/> <!--输出到控制台--> <appender name=\\\"CONSOLE\\\" class=\\\"ch.qos.logback.core.ConsoleAppender\\\"> <!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--> <!-- 例如：如果此处配置了INFO级别，则后面其他位置即使配置了DEBUG级别的日志，也不会被输出 --> <filter class=\\\"ch.qos.logback.classic.filter.ThresholdFilter\\\"> <level>INFO</level> </filter> <encoder> <Pattern>${CONSOLE_LOG_PATTERN}</Pattern> <!-- 设置字符集 --> <charset>UTF-8</charset> </encoder> </appender> <!--输出到文件--> <!-- 时间滚动输出 level为 INFO 日志 --> <appender name=\\\"INFO_FILE\\\" class=\\\"ch.qos.logback.core.rolling.RollingFileAppender\\\"> <!-- 正在记录的日志文件的路径及文件名 --> <file>${log.path}/log_info.log</file> <!--日志文件输出格式--> <encoder> <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern> <charset>UTF-8</charset> </encoder> <!-- 日志记录器的滚动策略，按日期，按大小记录 --> <rollingPolicy class=\\\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\\\"> <!-- 每天日志归档路径以及格式 --> <fileNamePattern>${log.path}/info/log-info-%d{yyyy-MM-dd}.%i.log</fileNamePattern> <timeBasedFileNamingAndTriggeringPolicy class=\\\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\\\"> <maxFileSize>100MB</maxFileSize> </timeBasedFileNamingAndTriggeringPolicy> <!--日志文件保留天数--> <maxHistory>15</maxHistory> </rollingPolicy> <!-- 此日志文件只记录info级别的 --> <filter class=\\\"ch.qos.logback.classic.filter.LevelFilter\\\"> <level>INFO</level> <onMatch>ACCEPT</onMatch> <onMismatch>DENY</onMismatch> </filter> </appender> <!-- 时间滚动输出 level为 WARN 日志 --> <appender name=\\\"WARN_FILE\\\" class=\\\"ch.qos.logback.core.rolling.RollingFileAppender\\\"> <!-- 正在记录的日志文件的路径及文件名 --> <file>${log.path}/log_warn.log</file> <!--日志文件输出格式--> <encoder> <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern> <charset>UTF-8</charset> <!-- 此处设置字符集 --> </encoder> <!-- 日志记录器的滚动策略，按日期，按大小记录 --> <rollingPolicy class=\\\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\\\"> <fileNamePattern>${log.path}/warn/log-warn-%d{yyyy-MM-dd}.%i.log</fileNamePattern> <timeBasedFileNamingAndTriggeringPolicy class=\\\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\\\"> <maxFileSize>100MB</maxFileSize> </timeBasedFileNamingAndTriggeringPolicy> <!--日志文件保留天数--> <maxHistory>15</maxHistory> </rollingPolicy> <!-- 此日志文件只记录warn级别的 --> <filter class=\\\"ch.qos.logback.classic.filter.LevelFilter\\\"> <level>warn</level> <onMatch>ACCEPT</onMatch> <onMismatch>DENY</onMismatch> </filter> </appender> <!-- 时间滚动输出 level为 ERROR 日志 --> <appender name=\\\"ERROR_FILE\\\" class=\\\"ch.qos.logback.core.rolling.RollingFileAppender\\\"> <!-- 正在记录的日志文件的路径及文件名 --> <file>${log.path}/log_error.log</file> <!--日志文件输出格式--> <encoder> <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern> <charset>UTF-8</charset> <!-- 此处设置字符集 --> </encoder> <!-- 日志记录器的滚动策略，按日期，按大小记录 --> <rollingPolicy class=\\\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\\\"> <fileNamePattern>${log.path}/error/log-error-%d{yyyy-MM-dd}.%i.log</fileNamePattern> <timeBasedFileNamingAndTriggeringPolicy class=\\\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\\\"> <maxFileSize>100MB</maxFileSize> </timeBasedFileNamingAndTriggeringPolicy> <!--日志文件保留天数--> <maxHistory>15</maxHistory> </rollingPolicy> <!-- 此日志文件只记录ERROR级别的 --> <filter class=\\\"ch.qos.logback.classic.filter.LevelFilter\\\"> <level>ERROR</level> <onMatch>ACCEPT</onMatch> <onMismatch>DENY</onMismatch> </filter> </appender> <!-- <logger>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。 <logger>仅有一个name属性， 一个可选的level和一个可选的addtivity属性。 name:用来指定受此logger约束的某一个包或者具体的某一个类。 level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF， 如果未设置此属性，那么当前logger将会继承上级的级别。 --> <!-- 使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作： 第一种把<root level=\\\"INFO\\\">改成<root level=\\\"DEBUG\\\">这样就会打印sql，不过这样日志那边会出现很多其他消息 第二种就是单独给mapper下目录配置DEBUG模式，代码如下，这样配置sql语句会打印，其他还是正常DEBUG级别： --> <!--开发环境:打印控制台--> <springProfile name=\\\"dev\\\"> <!--可以输出项目中的debug日志，包括mybatis的sql日志--> <logger name=\\\"com.guli\\\" level=\\\"INFO\\\" /> <!-- root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性 level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，默认是DEBUG 可以包含零个或多个appender元素。 --> <root level=\\\"INFO\\\"> <appender-ref ref=\\\"CONSOLE\\\" /> <appender-ref ref=\\\"INFO_FILE\\\" /> <appender-ref ref=\\\"WARN_FILE\\\" /> <appender-ref ref=\\\"ERROR_FILE\\\" /> </root> </springProfile> <!--生产环境:输出到文件--> <springProfile name=\\\"pro\\\"> <root level=\\\"INFO\\\"> <appender-ref ref=\\\"CONSOLE\\\" /> <appender-ref ref=\\\"DEBUG_FILE\\\" /> <appender-ref ref=\\\"INFO_FILE\\\" /> <appender-ref ref=\\\"ERROR_FILE\\\" /> <appender-ref ref=\\\"WARN_FILE\\\" /> </root> </springProfile> </configuration> \"]},\"309\":{\"h\":\"4. 手动输出日志\",\"t\":[\"在需要手动输出日志的类上同样加上 @Slf4j 注解，输出的语法就是Slf4j的语法。\",\"@Slf4j //注入日志对象,对象名就是log @RestController @RequestMapping(\\\"/books\\\") public class BookController { @GetMapping public String getById(){ System.out.println(\\\"springboot is running...2\\\"); //直接使用注入的对象log log.debug(\\\"debug...\\\"); log.info(\\\"info...\\\"); log.warn(\\\"warn...\\\"); log.error(\\\"error...\\\"); return \\\"springboot is running...2\\\"; } } \"]},\"310\":{\"h\":\"3-5. 监控\",\"t\":[\"提示\",\"这里的监控是基本的，真的源代码的性能监控。\",\"企业级开发会开发自定义专业监控：性能监控、业务监控、日志监控、大数据\"]},\"311\":{\"h\":\"监控介绍\",\"t\":[\"对于web开发，软件是一直在线运行的，再加上分布式集群部署，程序运行的稳定性越来也脆弱，而获知软件的运行健康状态显得尤为重要。\"]},\"312\":{\"h\":\"1. 什么是监控\",\"t\":[\"就是通过软件的方式展示另一个软件的运行情况，运行的情况则通过各种各样的指标数据反馈给监控人员。例如网络是否顺畅、服务器是否在运行、程序的功能是否能够整百分百运行成功，内存是否够用等。\",\"现在的互联网程序大部分都是基于微服务的，且是以集群部署的，因此第一个要监控的指标就是服务是否正常运行，也就是监控服务状态是否处理宕机状态\"]},\"313\":{\"h\":\"2.监控的内容\",\"t\":[\"对于现代的互联网程序来说，规模越来越大，功能越来越复杂，还要追求更好的客户体验，因此要监控的信息量也就比较大了。\",\"监控服务状态是否宕机：现在的互联网程序大部分都是基于微服务的，且是以集群部署的，因此第一个要监控的指标就是服务是否正常运行，也就是监控服务状态是否处理宕机状态\",\"监控服务运行指标（内存、虚拟机、线程、请求等）：web服务的客户量巨大，要考虑到用户体验。比如内存占用严重，请求无法及时响应处理等，这就是第二个要监控的重要指标，监控服务运行指标。\",\"监控日志：监控具体的功能隐患，在不停机的情况下，监控系统运行情况，这就需要用到日志。\",\"管理服务（服务下线）：由于突发情况的出现，例如服务器被攻击、服务器内存溢出等情况造成了服务器宕机，此时当前服务不能满足使用需要，就要将其重启甚至关闭，这就是管理服务。\"]},\"314\":{\"h\":\"3. 监控的实施方式\",\"t\":[\"监控服务是独立的Spring Boot项目，它可以监控多个项目，将多个被监控的服务对应的监控指标信息汇总在一起（而不是一个项目一个监控面板，微服务的项目个数太多了）。\",\"监控分为实施监控的项目（服务的）和要被监控的生产项目（客户端）\",\"服务端：显示监控信息的服务器，用于获取服务信息，并显示对应的信息\",\"客户端：运行的服务，启动时主动上报，告知监控服务器自己需要受到监控\",\"3-5-1\"]},\"315\":{\"h\":\"4. 信息获取的方式\",\"t\":[\"监控程序必须具有主动发起请求获取被监控服务信息的能力。如果被动获取被监控程序上报的信息，可能会出现无法判断是信息一直没更新，还是对方已经宕机了\",\"既然选择主动监控，就需要对方配合（开启信息接口），因此被监控的服务要能够与监控程序通信，告知对方来监控自己，且开放自己的接口（具体开发什么信息接口，可以做详细配置）。\"]},\"316\":{\"h\":\"Spring Boot Admin\",\"t\":[\"Spring Boot Admin是一个开源的可视化监控平台，用用于管理和监控SpringBoot应用程序。\"]},\"317\":{\"h\":\"1. 介绍\",\"t\":[\"Spring Boot Admin 包含有客户端和服务端两部分，而监控平台指的就是服务端。\",\"我们做的程序如果需要被监控，就将我们做的程序添加客户端依赖，然后配置服务端地址后，服务端就可以通过HTTP请求的方式从客户端获取对应的信息，并通过UI界面展示对应信息。\",\"其实服务端可以理解为是一个web程序，收到一些信息后展示这些信息。\"]},\"318\":{\"h\":\"2. 创建 Spring Boot Admin 服务端\"},\"319\":{\"h\":\"2.1 依赖\",\"t\":[\"提示\",\"要同时引入 spring-boot-starter-web ，这样才能开启SprigMVC，启动Tomcat，让程序成为web程序，从而能持续运行（否则就只会执行一次）。监控就是要持续的进行实时监控。\",\"导入springboot admin对应的starter，版本与当前使用的springboot版本保持一致\",\"<dependency> <groupId>de.codecentric</groupId> <artifactId>spring-boot-admin-starter-server</artifactId> <version>2.7.4</version> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> \",\"实测：并不能完全与SpringBoot版本保持一致，只能保证基本一致，比如2.7.13版本就匹配不到，只能使用2.7.4版本，可以采用Spring Initializr的方式创建监控项目（它本身就是独立的项目）并勾选：Ops->* Spring Boot Admin(Server)，此时springboot admin就能自动获取版本信息了。\"]},\"320\":{\"h\":\"2.2 在启动类上开启监控\",\"t\":[\"在启动类上添加注解@EnableAdminServer，声明当前应用启动后作为SpringBootAdmin的服务器使用\",\"@SpringBootApplication @EnableAdminServer public class MonitorApplication { public static void main(String[] args) { SpringApplication.run(MonitorApplication.class,args); } } \"]},\"321\":{\"h\":\"2.3 访问控制台\",\"t\":[\"配置好后就可以直接在浏览器上访问Spring Boot Admin 控制台了。\",\"uri: http://ip:port\",\"3-5-2\",\"当前还没有被监控的项目，所以内容是空白的。\"]},\"322\":{\"h\":\"3. Spring Boot Admin 客户端配置\"},\"323\":{\"h\":\"3.1 依赖\",\"t\":[\"被监控的项目一般都是web项目。\",\"导入springboot admin对应的starter，版本与当前使用的springboot版本保持一致\",\"<dependency> <groupId>de.codecentric</groupId> <artifactId>spring-boot-admin-starter-client</artifactId> <version>2.7.4</version> </dependency> \"]},\"324\":{\"h\":\"3.2 上传客户端信息\",\"t\":[\"设置当前客户端将信息上传到哪个服务器上，通过yml文件配置\",\"spring: boot: admin: client: url: http://localhost:8000 \"]},\"325\":{\"h\":\"3.3 再次查看服务的控制台\",\"t\":[\"3-5-3\",\"点击服务器选项就可以进去看到详情了，只是当前客户端没有开发什么信息，什么也看不到。\",\"3-5-4\"]},\"326\":{\"h\":\"3. 客户端开放信息\",\"t\":[\"客户端默认什么信息都没开放，需要自己在客户端配置文件中手动开放信息。\",\"spring: boot: admin: client: url: http://localhost:8000 management: endpoint: health: show-details: always # 默认是never，什么都不显示 endpoints: web: exposure: include: \\\"*\\\" # 配置显示什么种类的信息，默认值是health \",\"上面配置表示：显示所有种类的监控信息，其中健康信息要显示所有内容。\"]},\"327\":{\"h\":\"4. 配置多个客户端\",\"t\":[\"可以通过配置客户端的方式在其他的springboot程序中添加客户端坐标，这样当前服务器就可以监控多个客户端程序了。每个客户端展示不同的监控信息\"]},\"328\":{\"h\":\"监控信息说明\",\"t\":[\"当配置展示所有信息后，会展示如下图十几类监控信息。\",\"3-5-5\"]},\"329\":{\"h\":\"1. 细节\",\"t\":[\"细节分类的信息包括：\",\"信息\",\"元数据：项目启动时间\",\"健康：数据库、磁盘、网络\",\"进程：进程运行的信息\",\"垃圾回收：垃圾回收历史\",\"线程：展示运行的线程，包括守护线程\",\"内存：显示内存占用信息，包括Non heap\",\"3-5-6\"]},\"330\":{\"h\":\"2. 性能\",\"t\":[\"可以添加任何性能指标进行监控，包括http请求的性能：\",\"3-5-7\"]},\"331\":{\"h\":\"3. 环境\",\"t\":[\"可以查看项目运行的所有环境设置（上百项），包括yml中配置的运行环境。\",\"3-5-8\"]},\"332\":{\"h\":\"4. 类\",\"t\":[\"提示\",\"内存中的类：web项目是持续提供服务的，因此初始化启动时，Tomcat会将非常多的类直接加载到内存中（一般是以单例的形式），方便以后调用（所以项目启动时间很长，但启动后再访问就很快）。\",\"会监控所有加载到内存中的类，包括内置类和自定义的类（前提是设置了Bean注入）。\",\"3-5-9\"]},\"333\":{\"h\":\"5. 配置属性\",\"t\":[\"这里展示的是Spring配置属性，这些都是可以在yml中配置的，配置项有几百个，之所以有这么多，是因为大部分配置项是SpringBoot的默认值，不用我们配置。\",\"3-5-10\"]},\"334\":{\"h\":\"6. 计划任务\",\"t\":[\"系统中开启的定时任务。\"]},\"335\":{\"h\":\"7. 日志配置\",\"t\":[\"可以以类为单位设置日志的等级、开关日志。\",\"3-5-11\",\"注意：这里只是日志配置，不能查看具体的日志。\"]},\"336\":{\"h\":\"8. JVM\",\"t\":[\"事实查看JVM信息，包括线程和内存\",\"3-5-12\"]},\"337\":{\"h\":\"9. 映射\",\"t\":[\"项目开放的所有API的详细信息，包括：\",\"url：显示的http://host/后面的的部分，包括参数\",\"方法：该API的请求方式\",\"返回内容类型：也就是响应的格式：一般为json\",\"处理程序：处理该API的类.方法\",\"这里列出了所有客户端暴漏的API，包括自定义的API和一些插件提供的API。\",\"3-5-13\"]},\"338\":{\"h\":\"10. 缓存\",\"t\":[\"显示缓存的详细信息，需要项目开启缓存。\"]},\"339\":{\"h\":\"11. 日志报表\",\"t\":[\"可以查看日志相亲，不过可视化做的一般，不如自己开发。\",\"3-5-14\"]},\"340\":{\"h\":\"监控原理\",\"t\":[\"查阅监控中的 映射，可以看到当前系统中可以运行的请求路径，有很多以 /actuator 开头\",\"3-5-15\"]},\"341\":{\"h\":\"1. actuator\",\"t\":[\"通过访问/actuator可知，监控中显示的信息实际上是通过发送/actuator开头的请求后得到json数据，然后再进行可视化的展示。\",\"也就是说：监控平台中显示的信息实际上是通过对被监控的应用发送请求得到的。这些请求是springboot admin对应的client包中的一个actuator依赖包定义的。被监控的应用之所以可以对外提供上述请求路径，就是因为添加了这个包。\"]},\"342\":{\"h\":\"2. 端点\",\"t\":[\"Actuator，可以称为端点，描述了一组监控信息。\",\"SpringBootAdmin提供了多个内置端点，通过访问端点就可以获取对应的监控信息，也可以根据需要自定义端点信息。通过发送请求路劲/actuator可以访问应用所有端点信息，如果端点中还有明细信息可以发送请求/actuator/端点名称 来获取详细信息。以下列出了所有端点信息说明：\",\"ID\",\"描述\",\"默认启用\",\"auditevents\",\"暴露当前应用程序的审计事件信息。\",\"是\",\"beans\",\"显示应用程序中所有 Spring bean 的完整列表。\",\"是\",\"caches\",\"暴露可用的缓存。\",\"是\",\"conditions\",\"显示在配置和自动配置类上评估的条件以及它们匹配或不匹配的原因。\",\"是\",\"configprops\",\"显示所有 @ConfigurationProperties 的校对清单。\",\"是\",\"env\",\"暴露 Spring ConfigurableEnvironment 中的属性。\",\"是\",\"flyway\",\"显示已应用的 Flyway 数据库迁移。\",\"是\",\"health\",\"显示应用程序健康信息\",\"是\",\"httptrace\",\"显示 HTTP 追踪信息（默认情况下，最后 100 个 HTTP 请求/响应交换）。\",\"是\",\"info\",\"显示应用程序信息。\",\"是\",\"integrationgraph\",\"显示 Spring Integration 图。\",\"是\",\"loggers\",\"显示和修改应用程序中日志记录器的配置。\",\"是\",\"liquibase\",\"显示已应用的 Liquibase 数据库迁移。\",\"是\",\"metrics\",\"显示当前应用程序的指标度量信息。\",\"是\",\"mappings\",\"显示所有 @RequestMapping 路径的整理清单。\",\"是\",\"scheduledtasks\",\"显示应用程序中的调度任务。\",\"是\",\"sessions\",\"允许从 Spring Session 支持的会话存储中检索和删除用户会话。当使用 Spring Session 的响应式 Web 应用程序支持时不可用。\",\"是\",\"shutdown\",\"正常关闭应用程序。\",\"否\",\"threaddump\",\"执行线程 dump。\",\"是\",\"heapdump\",\"返回一个 hprof 堆 dump 文件。\",\"是\",\"jolokia\",\"通过 HTTP 暴露 JMX bean（当 Jolokia 在 classpath 上时，不适用于 WebFlux）。\",\"是\",\"logfile\",\"返回日志文件的内容（如果已设置 logging.file 或 logging.path 属性）。支持使用 HTTP Range 头来检索部分日志文件的内容。\",\"是\",\"prometheus\",\"以可以由 Prometheus 服务器抓取的格式暴露指标。\",\"是\"]},\"343\":{\"h\":\"3. 配置显示的端点\",\"t\":[\"可以在SpringBoot Admin 客户端的yml文件总进行配置，指定那些端点对外开放。\",\"配置分为两类：\",\"management: endpoint: # 配置指定端点,一般用来配置端点的开放情况 health: # 端点名称, health端点强制开放,不然就报错. show-details: always # 具体开放的内容 info: # 端点名称 enabled: true # 是否开放 endpoints: # 对所有端点进行配置 web: # 哪些端点信息被允许通过HTTP请求获取（前提必须是已经开放的端点） exposure: include: \\\"*\\\" # * 表示开放所有端点的WEB端HTTP请求权限 # springboot admin设置了13个较为常用的端点作为默认开放的端点 enabled-by-default: true # 默认端点的开放状态,默认true \",\"通过management.endpoint控制那些端点禁止开放,通过endpoints进行端点的通用配置,包括那些端点允许通过HTTP请求访问。\"]},\"344\":{\"h\":\"自定义端点信息\",\"t\":[\"端点描述了被监控的信息，除了系统默认的指标，还可以自行添加显示的指标。\",\"下面是三个示例，可以举一反三进行端点信息的二次开发。\"]},\"345\":{\"h\":\"1. INFO端点\",\"t\":[\"INFO端点就是应用的描述信息，这个信息Spring Boot提供不了，需要自己提前写。\",\"info信息是写在application.yml中的，配置项就是info，info下有多个k-v，k-v就是配置要配置的数据\",\"management: endpoint: health: show-details: always endpoints: web: exposure: include: \\\"*\\\" info: # info端点比较特殊，需要单独配置开启web端显示 env: enabled: true # 开启info信息的显示 info: # 配置要显示的info信息 appName: 监控测试 # 以key-value的形式显示，可以任意配置 author: @project.artifactId@ # 可以动态读取项目信息 version: @project.version@ \"]},\"346\":{\"h\":\"显示效果\",\"t\":[\"3-5-16\"]},\"347\":{\"h\":\"复杂info信息\",\"t\":[\"yml中的info信息过于简单，可以创建一个配置类，显示复杂的信息。\",\"package com.sgugo.cache.config; @Component //加入bean，加载到内存 public class ActuatorInfo implements InfoContributor { @Override public void contribute(Info.Builder builder) { //添加单个信息 builder.withDetail(\\\"runTime\\\",System.currentTimeMillis()); //添加一组信息 Map infoMap = new HashMap(); infoMap.put(\\\"buildTime\\\",\\\"2006\\\"); infoMap.put(\\\"status\\\",\\\"2\\\"); builder.withDetails(infoMap); } } \",\"上面添加的三个信息，会和yml中的信息一起显示在info中。\"]},\"348\":{\"h\":\"2. Health端点\",\"t\":[\"Health端点用来监控重要组件的运行状态，是最重要的端点，被监控的任何逐渐状态异常，都会导致服务无法正常运行。\",\"Health默认会监控最基本的程序状态：磁盘空间（diskSpace）和网络（ping）。如果开启了其他服务，比如数据库、redis或mongodb，他们的状态也会显示在这里。\"]},\"349\":{\"h\":\"2.1 组件的状态\",\"t\":[\"当任意一个组件状态不为UP时，整体应用对外服务状态为非UP状态。\",\"UP：正常状态，组件运行正常\",\"DOWN：组件掉线\",\"OUT_OF_SERVICE：组件无法提供服务\",\"UNKNOWN：组件状态未知\"]},\"350\":{\"h\":\"2.2 配置Health端点\",\"t\":[\"health端点描述当前应用的运行健康指标，需要自定义配置类进行设置。\",\"不要轻易添加健康指标，因为组件不健康会直接影响整个程序的运行。\",\"@Component public class StatusConfig extends AbstractHealthIndicator { @Override protected void doHealthCheck(Health.Builder builder) throws Exception { // 一般用来动态的监控一个自定义的组件状态 boolean status = false; if(status){ // 定义组件状态为UP builder.status(Status.UP); // 暂时自定义信息，kv格式定义 builder.withDetail(\\\"什么情况\\\",\\\"程序在正常运行\\\"); }else{ // 定义组件状态为DOWN builder.status(Status.DOWN); builder.withDetail(\\\"什么情况\\\",\\\"太逊了，程序已经掉线\\\"); } } } \"]},\"351\":{\"h\":\"2.3 效果\",\"t\":[\"3-5-17\"]},\"352\":{\"h\":\"3. Metrics端点\",\"t\":[\"Metrics属于性能监控端点，不过本质是列举了很多统计信息。\",\"注意\",\"实际开发中，我们不会在Spring Boot Admin上查看统计信息，而是要做专门的程序后台来查看。\",\"暂略\"]},\"353\":{\"h\":\"4. 自定义端点\",\"t\":[\"注意\",\"自定义的端点意义不大，无法进行复杂的操作，也无法进行可视化渲染。\",\"企业级开发，会开发专门的监控和大数据模块，不用再这里自定义端点进行监控。\",\"暂略\"]},\"354\":{\"h\":\"4-1. MySQL\",\"t\":[\"相关信息\",\"在进行整合之前先梳理一下整合的思想，springboot整合任何技术其实就是在springboot中使用对应技术的API。 如果两个技术没有交集，就不存在整合的概念了。所谓整合其实就是使用springboot技术去管理其他技术。\",\"需要先导入对应技术的坐标，而整合之后，这些坐标都有了一些变化\",\"任何技术通常都会有一些相关的设置信息，整合之后，这些信息如何写，写在哪是一个问题\",\"没有整合之前操作如果是模式A的话，整合之后如果没有给开发者带来一些便捷操作，那整合将毫无意义，所以整合后操作肯定要简化一些，那对应的操作方式自然也有所不同\"]},\"355\":{\"h\":\"1. 添加依赖\",\"t\":[\"连接MySQL一般使用druid连接池。\",\"Druid依赖的坐标需要手动在pom.xml中导入。\",\"<dependency> <groupId>com.alibaba</groupId> <artifactId>druid-spring-boot-starter</artifactId> <version>1.2.6</version> </dependency> <!-- druid是依赖jdbc的 --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-jdbc</artifactId> </dependency> \"]},\"356\":{\"h\":\"2. 配置连接池\",\"t\":[\"spring: datasource: druid: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC username: root password: root \"]},\"357\":{\"h\":\"3. debug\"},\"358\":{\"h\":\"版本不兼容\",\"t\":[\"报错信息：error {dataSource-1} init error java.sql.SQLException: com.mysql.cj.jdbc.Driver\",\"原因：服务器mysql版本高于idea致使版本不兼容\",\"解决方案：通过引入依赖，手动指定idear上MySQL的版本\",\"<dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.28</version> </dependency> \"]},\"359\":{\"h\":\"4-2. MyBatis\",\"t\":[\"相关信息\",\"主流持久层技术是：MyBatis或MyBatisPlus。 Spring提供的默认持久化技术是JdbcTempalte，一般不直接用。\"]},\"360\":{\"h\":\"Ⅰ. 集成MyBatis\",\"t\":[\"需要配置的是数据库的连接信息和MyBatis的SQL映射。\"]},\"361\":{\"h\":\"1. 添加MyBatis依赖\",\"t\":[\"使用SpringBoot创建项目时，勾选SQL->MyBatis Framework、MySQL Driver，或者手动引入坐标，可以选择使用Druid连接池进行连接。\",\"具体坐标如下：\",\" <!--MyBatis--> <dependency> <groupId>org.mybatis.spring.boot</groupId> <artifactId>mybatis-spring-boot-starter</artifactId> </dependency> <!--JDBC Driver--> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <scope>runtime</scope> </dependency> <!--druid--> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid-spring-boot-starter</artifactId> <version>1.2.16</version> </dependency> \"]},\"362\":{\"h\":\"2. 配置连接信息\",\"t\":[\"只需要配置数据库连接信息即可，其他的配置采用默认值。\",\"# file: application.yml spring: datasource: druid: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://192.75.225.162:3306/test?serverTimezone=UTC username: admin password: admin \"]},\"363\":{\"h\":\"3. 使用MyBatis\",\"t\":[\"创建实体类和Mapper接口，使用Mapper接口时，直接将Mapper接口当实现类使用即可，中间创建接口实体类的过程，SpringBoot都完成了。\"]},\"364\":{\"h\":\"3.1 实体类\",\"t\":[\"//file: domain/Book public class Book { private Integer id; private String type; private String name; private String description; } \"]},\"365\":{\"h\":\"3.2 Dao: Mapper接口\",\"t\":[\"@Mapper注解是为了被IOC容器识别，自动产生Mapper接口的对象，并加入IOC容器。\",\"//file: dao/BookDao @Mapper public interface BookDao { @Select(\\\"select * from tbl_book where id = #{id}\\\") public Book getById(Integer id); } \"]},\"366\":{\"h\":\"3.3 使用测试\",\"t\":[\"这里就不创建Controller了，直接使用测试类访问Mapper接口\",\"//file: test/java/com/blog/cybercell/BlogApplicationTests @SpringBootTest class BlogApplicationTests { @Autowired private BookDao bookDao; @Test void contextLoads() { //直接调用Mapper接口中的方法 System.out.println(bookDao.getById(11)); //可以正常查询 } } \"]},\"367\":{\"h\":\"4. 注意事项\"},\"368\":{\"h\":\"4.1 时区错误\",\"t\":[\"使用SpringBoot2.4.3（不含）之前版本会出现一个小BUG，就是MySQL驱动升级到8以后要求强制配置时区，如果不设置会出问题。\",\"url: jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC \",\"可以去修改mysql中的配置文件mysql.ini，在mysqld项中添加default-time-zone=+8:00也可以解决这个问题。\"]},\"369\":{\"h\":\"4.2 MySQL驱动问题\",\"t\":[\"MySQL版本在8.0以上时，可能会出现驱动类过时的问题。\",\"方案：弃用com.mysql.jdbc.Driver，换用com.mysql.cj.jdbc.Driver\"]},\"370\":{\"h\":\"Ⅱ. 集成MyBatis Plus\"},\"371\":{\"h\":\"1. 添加MyBatis Plus依赖\",\"t\":[\"SpringBoot官网没有收录MyBatisPlus，无法像导入MyBatis那样直接导入。\",\"可以在创建项目时，切换成阿里云的源，或者直接手动导入。\",\"具体坐标如下：\",\"<dependency> <groupId>com.baomidou</groupId> <artifactId>mybatis-plus-boot-starter</artifactId> <version>3.5.2</version> </dependency> <!--JDBC Driver--> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <scope>runtime</scope> </dependency> <!--druid--> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid-spring-boot-starter</artifactId> <version>1.2.16</version> </dependency> \"]},\"372\":{\"h\":\"2. 配置连接信息\",\"t\":[\"和MyBatis的连接配置一样。\",\"# file: application.yml spring: datasource: druid: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://192.75.225.162:3306/test?serverTimezone=UTC username: admin password: admin \"]},\"373\":{\"h\":\"3. 使用MyBatisplus\",\"t\":[\"只需要继承BaseMapper并传入实体类（表名）的泛型，所有基本的SQL操作方法就自动添加了。\"]},\"374\":{\"h\":\"3.1 Mapper 接口\",\"t\":[\"创建Mapper接口，继承MyBatisPlus中的BaseMapper接口。\",\"@Mapper public interface BookDao extends BaseMapper<Book> { //自动携带了众多BaseMapper中的方法。 } \"]},\"375\":{\"h\":\"3.2 使用测试\",\"t\":[\"使用测试类访问Mapper接口。\",\"@SpringBootTest class BlogApplicationTests { @Autowired private BookDao bookDao; @Test void contextLoads() { System.out.println(bookDao.selectById(2)); } @Test void testGetAll() { System.out.println(bookDao.selectList(null)); } } \"]},\"376\":{\"h\":\"4-3. Redis\"},\"377\":{\"h\":\"1. 依赖\",\"t\":[\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-redis</artifactId> <dependency> \"]},\"378\":{\"h\":\"2. redis基础配置\",\"t\":[\"spring: redis: host: 159.75.225.162 port: 6379 password: hello1234 \"]},\"379\":{\"h\":\"4. 使用Redis：RedisTemplate\",\"t\":[\"使用springboot整合redis的专用客户端接口操作，此处使用的是RedisTemplate，使用步骤如下\",\"注入RedisTemplate\",\"根据要操作的数据类型，调用opsForXxx方法，获取对应的XxxOperations对象（Xxx指的是Redis的数据类型） \",\"在操作redis时，需要先确认操作何种数据，根据数据种类得到操作接口。\",\"剩下的就是调用对应api操作了\",\"使用XxxOperations对象调用方法，操作Redis，方法名和参数，与Redis的指令和参数相同。\",\"public class RedisTest{ @Autowired //注入RedisTemplate private RedisTemplate redisTemplate; public void strRedis(){ //获取String类型的操作对象 ValueOpeartions strOps = redisTemplate.opsForValue(); //使用ValueOperations对象操作Redis ops.set(\\\"age\\\",31) Object age = ops.get(\\\"age\\\"); } public void hashRedis(){ HashOperations ops = redisTemplate.opsForHash(); ops.put(\\\"info\\\",\\\"a\\\",\\\"b\\\"); Object val = ops.get(\\\"info\\\", \\\"b\\\"); } } \",\"各种类型的数据操作接口\",\"如下：\",\"4-3-1\",\"问题\",\"通过对象往Redis数据库中存储的数据是对象格式的，Redis内部不支持java对象的储存格式，因此当操作的数据以对象的形式存在时，会进行转码，转换成字符串格式（序列化）后进行操作。\",\"为了方便开发者使用基于字符串为数据的操作，springboot整合redis时提供了专用的API接口StringRedisTemplate，你可以理解为这是RedisTemplate的一种指定数据泛型的操作API。\"]},\"380\":{\"h\":\"4. 使用Redis：StringRedisTemplate【常用】\",\"t\":[\"使用步骤和RedisTemplate一样。\",\"public class StringRedisTemplateTest { @Autowired //注入StringRedisTemplate对象 private StringRedisTemplate stringRedisTemplate; void get(){ //获取String类型的操作对象，泛型永远都是String，无论操作对象是操作何种类型 ValueOperations<String, String> ops = stringRedisTemplate.opsForValue(); //使用ValueOperations<String, String>对象操作Redis String name = ops.get(\\\"name\\\"); System.out.println(name); } } \"]},\"381\":{\"h\":\"5. Redis客户端选择\",\"t\":[\"springboot整合redis技术提供了多种客户端兼容模式，默认提供的是lettucs客户端技术，也可以根据需要切换成指定客户端技术，例如jedis客户端技术。\"]},\"382\":{\"h\":\"5.1 lettcus与jedis区别\",\"t\":[\"jedis连接Redis服务器是直连模式，当多线程模式下使用jedis会存在线程安全问题，解决方案可以通过配置连接池使每个连接专用，这样整体性能就大受影响\",\"lettcus基于Netty框架进行与Redis服务器连接，底层设计中采用线程安全的StatefulRedisConnection，可以保障并发访问安全问题，所以一个连接可以被多线程复用。当然lettcus也支持多连接实例一起工作。\"]},\"383\":{\"h\":\"5.2 切换成jedis客户端技术\",\"t\":[\"导入jedis坐标\",\"<dependency> <groupId>redis.clients</groupId> <artifactId>jedis</artifactId> </dependency> \",\"yml配置文件：添加redis客户端类型配置\",\"spring: redis: host: localhost port: 6379 password: hello1235 client-type: jedis \"]},\"384\":{\"h\":\"6. 客户端的其他配置\",\"t\":[\"除了基础配置，还可以根据需要设置对应的配置\",\"spring: redis: host: localhost port: 6379 client-type: jedis lettuce: pool: //设置连接池 max-active: 16 jedis: pool: max-active: 16 \"]},\"385\":{\"h\":\"4-4. MongoDB\"},\"386\":{\"h\":\"导入\"},\"387\":{\"h\":\"1. 依赖\",\"t\":[\"一般采用springboot data 整合的MongoDB\",\"<!-- mongodb --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-mongodb<artifactId> </dependency> \"]},\"388\":{\"h\":\"2. application.yml\",\"t\":[\"主要配置MongoDB的连接参数。\",\"有两种连接方式：\",\"URI：直接使用URI进行连接，这个URI和MongoDB Compass连接信息里的URI基本是一样的 \",\"推荐这种，配置项更简洁\",\"由于有身份校验bug的存在，只能采用这种方式连接\",\"选项链接：列出连接数据库的各个选项进行链接\",\"# URI链接 spring: data: mongodb: uri: mongodb://myroot:2ck23-5@159.75.225.162:27017/article ?authSource=admin&authMechanism=SCRAM-SHA-1 # 选项连接的方式：目前仅支持无密码的库 spring: data: mongodb: database: article host: 159.75.225.162 port: 27017 \"]},\"389\":{\"h\":\"3. URI的格式\",\"t\":[\"提示\",\"在Java中使用MongoDB需要指明操作的库，且库要提前创建好，对于MongoDB总，每个库都有所属的用户，因此操作那个库，就使用哪个库的用户名。\",\"使用超级管理员用户也可以，就是不够安全。\",\"无密码：mongodb://ip:port/数据库名\",\"有密码：mongodb://username:password@ip:port/数据库名?authSource=admin&authMechanism=SCRAM-SHA-1\"]},\"390\":{\"h\":\"3.1 致命Bug：身份验证\",\"t\":[\"当服务器开启密码验证时，连接服务器就需要用户名和密码了，不过只给出用户名和密码可能无法连接，从而报错（至少当前版本是这样的）。\",\"报错信息：Exception authenticating MongoCredential\",\"原因：没有指明身份验证用到的数据库（authSource）和认证机制（authMechanism）\"]},\"391\":{\"h\":\"3.2 authSource：储存用户信息的数据库\",\"t\":[\"MongoDB默认把所有的用户信息都储存在了内置的admin数据库。\",\"Spring-mongodb并不知道这个信息，因此需要指明\"]},\"392\":{\"h\":\"3.3 authMechanism：身份认证的机制\",\"t\":[\"ongodb的认证机制有2种：SCRAM-SHA-1和MONGODB-CR\",\"SCRAM-SHA-1：3.0版本之后Mongodb默认的认证机制\",\"MONGOOD-CR：3.0版本之前Mongodb的认证机制\",\"spring-mongodb并不知道采用哪种认证机制，因此需要指明。\"]},\"393\":{\"h\":\"4. MongoTemplate\",\"t\":[\"Java对MongoDB所有的操作都是通过MongoTemplate类实现的。操作MongoDB就是使用MongoTemplate的方法。\",\"注意：受限于版本因素，当前MongoTemplate类无法直接通过@Autowired进行注入，要么手动添加@Bean，要么通过@Resource进行注入\",\"@Resource MongoTemplate mongoTemplate; \"]},\"394\":{\"h\":\"实体类\",\"t\":[\"操作MongoDB里的数据是需要实体类作为载体的，如下：\",\"@Data @Document(collection=\\\"student\\\") public class Student { @Id private String id; private long userid; private String username; private int age; private String gender; } \"]},\"395\":{\"h\":\"1. @Document\",\"t\":[\"@Document注解的collection属性用来绑定当前实体类对应的集合（表）。\",\"当实体类的类名和集合名相同时（不区分大小写），就不需要该注解绑定\",\"当实体类的类名和集合名不同时，就需要该注解进行绑定\",\"如果操作的实体类没有对应的集合，API也不会报错，而是得到空结果。\",\"建议统一加该注解\"]},\"396\":{\"h\":\"2. @id与 _id\",\"t\":[\"向集合添加文档时，文档会自动添加一个_id字段（开发中该字段一般采用自动生成的）。_id字段的数据类型是ObjectId，其实可以被解析为字符串。\"]},\"397\":{\"h\":\"2.1 映射\",\"t\":[\"自动映射：当实体类中出现id字段时，会被自动被映射为_id字段，对该字段的操作就是对ObjectId的操作。\",\"@id注解：可以使用@id注解手动将一个字段与_id字段建立映射。\"]},\"398\":{\"h\":\"2.2 数据类型\",\"t\":[\"_id的数据类型是有限制的，当一个字段被映射为_id字段后，也应该遵守相同的限制。 必须是：String、BigInteger或ObjectID中的一种。\",\"如果数据类型不符合限制就会报异常：No converter found capable of converting...\"]},\"399\":{\"h\":\"3. 无表结构\",\"t\":[\"MongoDB不是关系型数据库，没有标结果，同一个集合总储存的文档可以有不同的字段，字段类型也可以不同。\",\"不过开发者还是会保持：集合内字段统一、类型统一。\"]},\"400\":{\"h\":\"4. 缺省数据\",\"t\":[\"对集合进行CURD操作，可能会出现集合的字段和实体类的字段不匹配，此时无值的字段就会自动变为null，而不会报错。\"]},\"401\":{\"h\":\"5. _class字段\",\"t\":[\"向集合中插入数据时，所有的文档都会自动添加一个_class字段，该字段用来储存添加数据的实体类。如：\\\"com.sgugo.es.Student\\\"\",\"可以创建一个配置类，监听MongoDB保存数据，跳过创建_class字段。\"]},\"402\":{\"h\":\"API\",\"t\":[\"MongoTemplatel类的方法包含了所需的所有对MongoDB数据库的操作。\",\"增 \",\"insert：插入一条文档\",\"insertAll：插入多条文档\",\"删 \",\"remove：根据条件移除文档\",\"改 \",\"updateFirst：更新一个文档，只能更新一个。 \",\"upsert：同上，上述方法的别名\",\"updateMulti：根据条件更新多个文档\",\"查 \",\"findAll：查询指定集合的全部数据\",\"findById：根据_id查询数据\",\"find：根据复杂的查询条件，查询数据\"]},\"403\":{\"h\":\"1. insert：插入一个文档\",\"t\":[\"insert方法常用参数为实体类，将实体类的数据插入绑定的集合\",\"@SpringBootTest public class MongoDbBaseTest { @Resource MongoTemplate mongoTemplate; @Test void insertTest(){ Student student = new Student(); student.setUserid(10); student.setUsername(\\\"Aaron\\\"); student.setAge(20); student.setGender(\\\"male\\\"); mongoTemplate.insert(student); } } \",\"执行结果：\",\"4-4-1\",\"PS：默认情况下额外插入一个名为_class的字段。\",\"PS：没有为id字段指定值，MongoDB自动创建_id（主键不能为空）\"]},\"404\":{\"h\":\"2. remote：根据条件移除文档\",\"t\":[\"该方法一般接受两个参数，并有一个返回值\",\"参数1：Query对象，一个查询对象，删除时需要依据该查询结果\",\"参数2：Class<?> entityClass，实体类.calss，用来指定删除哪个集合中的文档\",\"返回值：返回删除的条数，返回的是一个对象，需要通过getDeletedCount()方法获取具体的条数。\",\"@SpringBootTest public class MongoDbBaseTest { @Resource MongoTemplate mongoTemplate; @Test void remoteTest(){ // 注意Query在org.springframework.data.mongodb.core.query; Query query = new Query(Criteria.where(\\\"username\\\").is(null)); DeleteResult result = mongoTemplate.remove(query,Student.class); System.out.println(result.getDeletedCount()); // 1 } } \"]},\"405\":{\"h\":\"查询语法\",\"t\":[\"Criteria.where(\\\"要查询的字段\\\").查询方法(匹配的值)\",\"查询方法非常多，基本可以见名知意，通过IDEA的提示信息使用，不用记忆。\"]},\"406\":{\"h\":\"3. upsert || updateFirst：更新一个文档\",\"t\":[\"upsert是updateFirst方法的别名，用法和作用都一样。\",\"参数1：Query，查询对象，查询出要更新的文档\",\"参数2：Update，更新对象，设置要更新的内容\",\"参数3：Class<?> entityClass，实体类.calss，用来指定更新哪个集合中的文档\",\"返回值：updateResult对象，通过getModifiedCount获取影响的行数\",\"import org.springframework.data.mongodb.core.query.Query; import org.springframework.data.mongodb.core.query.Update; @SpringBootTest public class MongoDbBaseTest { @Resource MongoTemplate mongoTemplate; @Test void updateTest(){ Query query = new Query(Criteria.where(\\\"age\\\").is(\\\"21\\\")); Update update = new Update().set(\\\"age\\\", 12); UpdateResult updateResult = mongoTemplate.updateFirst(query,update,Student.class); System.out.println(updateResult.getModifiedCount()); } } \"]},\"407\":{\"h\":\"4. updateMulti：更新多个文档\",\"t\":[\"updateMulti的用法和updateFirst完全一样，只是updateMulti可以更新所有符合条件的文档，updateFirst只能更新符合条件的第一个文档。\",\"import org.springframework.data.mongodb.core.query.Query; import org.springframework.data.mongodb.core.query.Update; @SpringBootTest public class MongoDbBaseTest { @Resource MongoTemplate mongoTemplate; @Test void updateTest(){ Query query = new Query(Criteria.where(\\\"age\\\").is(20)); Update update = new Update().set(\\\"age\\\", 10); UpdateResult updateResult = mongoTemplate.updateMulti(query, update, Student.class); System.out.println(updateResult.getModifiedCount()); } } \"]},\"408\":{\"h\":\"5. findAll：查询集合中所有数据\",\"t\":[\"该方法会返回集合中所有的文档，参数是实体类。\",\"参数实体类绑定的集合就是要查询的集合，查询的结果同时也被实体类的属性接收。\",\"@SpringBootTest public class MongoDbBaseTest { @Resource MongoTemplate mongoTemplate; @Test void findAllTest(){ List<Student> all = mongoTemplate.findAll(Student.class); System.out.println(all); } } //打印结果 [ Student( id=64a4d9aaad5837556a80e329, userid=2, username=Jinno, age=10, gender=famale), Student( id=64a4df85481a3664d13fb90e, userid=10, username=Aaron, age=10, gender=male ) ] \",\"文档中有，而实体类中没有的字段，不会返回；\",\"文档中没有，而实体类总有该属性，就赋值null。\"]},\"409\":{\"h\":\"6. FindById：通过_id查询数据\",\"t\":[\"参数1：要查询的文档的_id\",\"参数2：实体类.class，用来获取绑定的文档，并接收数据\",\"返回值：实体类\",\"@SpringBootTest public class MongoDbBaseTest { @Resource MongoTemplate mongoTemplate; @Test void findByItTest(){ Student result = mongoTemplate.findById(\\\"64a4d9aaad5837556a80e329\\\", Student.class); System.out.println(result); } } //打印结果 Student(id=64a4d9aaad5837556a80e329, userid=2, username=Jinno, age=10, gender=famale) \"]},\"410\":{\"h\":\"7. find：根据复杂条件查询\",\"t\":[\"find方法可以进行各种复杂的查询\",\"参数1：Query对象\",\"参数2：实体类.class\",\"返回值：List<Class<T>>无论查询结果是几条，返回结果都是List 因为Query对象可以进行各种复杂的查询，所有find方法也可以进行各种复杂的查询。\",\"包括：多条件查询、范围查询、模糊查询、分页查询、聚合查询，这些都与Query对象的方法有关。\",\"@SpringBootTest public class MongoDbBaseTest { @Resource MongoTemplate mongoTemplate; @Test void findTest(){ Query query = new Query(Criteria.where(\\\"username\\\").is(\\\"Jinno\\\").and(\\\"age\\\").gt(5)); List<Student> students = mongoTemplate.find(query, Student.class); System.out.println(students); } } \"]},\"411\":{\"h\":\"4-5. Elasticsearch\"},\"412\":{\"h\":\"整合ES\"},\"413\":{\"h\":\"1. 依赖\",\"t\":[\"这里选择官方推出的可以操作ES8.x的最新版客户端依赖。\",\"同时操作ES的API经常需要使用JSON格式的数据，因此同时添加一个JSON工具依赖\",\"<dependency> <groupId>co.elastic.clients</groupId> <artifactId>elasticsearch-java</artifactId> <!-- version与ES服务端的version一致 --> <version>8.7.0</version> <dependency> <!--工具：Java对象转JSON --> <dependency> <groupId>com.fasterxml.jackson.core</groupId> <artifactId>jackson-databind</artifactId> <version>2.15.2</version> </dependency> \"]},\"414\":{\"h\":\"2. ES客户端的版本变迁\",\"t\":[\"RestLowLevelClient：最初的ES客户端，该客户端也被低版本的SpringBoot内置 \",\"被spring-boot-starter-data-elasticsearch集成\",\"RestHighLevelClient：之后RestLowLevelClient客户端被弃用，SpringBoot没有及时更新，因此当时需要手动添加ES的依赖。不过后来SpringBoot集成了该API。\",\"ElasticSearchClient：在ES7.15版本之后RRestHighLevelClient客户端也被弃用了，推出了Elasticsearch Java API Client，该客户端可以操作ES8.x\",\"高版本的SpringData已经内置了最新的客户端：详见SpringData ES，直接使用SpringData也是一种选择。\",\"spring-boot-starter-data-elasticsearch的更新速度很慢，虽然简化了操作，但无法适配高版本的ES服务，因此推荐采用Elasticsearch Java API Client。该客户端需要手动导入，并指定版本，版本号与服务器开启的ES服务版本号一致。\"]},\"415\":{\"h\":\"连接ES服务\",\"t\":[\"注意\",\"这里的连接ES的代码仅针对ElasticSearch8.7版本。\",\"为了操作高版本的ES，并没有使用SpringBoot集成的ES，再加上要使用SSL，连接ES的服务非常复杂。\"]},\"416\":{\"h\":\"1. application.yml\",\"t\":[\"注意：由于没有采用spring-boot-starter-data-elasticsearch 集成的ES客户端，因此在application.yml中进行的配置仅仅起到了变量的作用，SpringBoot是无法帮忙直接连接ES服务的。\",\"spring: elasticsearch: host: 159.75.225.162 port: 9200 username: elastic password: xNit99mzkgKjstx_UhsH crtName: http_ca.crt \"]},\"417\":{\"h\":\"2. ssl证书\",\"t\":[\"ElasticSearch开启了安全认证，客户端需要SSL证书才能进行访问。\",\"copy服务中ES目录下的 /config/certs/http_ca.crt证书，将其放到resource目录下，该目录下文件可以直接访问到，因此只需要在yml设置证书的名字即可。\"]},\"418\":{\"h\":\"3. 配置ES客户端\",\"t\":[\"创建配置类配置ES客户端。将ElasticsearchClient对象配置后，加入@Bean，以备使用。\",\"package com.sgugo.es.config; import co.elastic.clients.elasticsearch.ElasticsearchClient; import co.elastic.clients.json.jackson.JacksonJsonpMapper; import co.elastic.clients.transport.ElasticsearchTransport; import co.elastic.clients.transport.rest_client.RestClientTransport; import lombok.extern.slf4j.Slf4j; import org.apache.http.HttpHost; import org.apache.http.auth.AuthScope; import org.apache.http.auth.UsernamePasswordCredentials; import org.apache.http.client.CredentialsProvider; import org.apache.http.conn.ssl.NoopHostnameVerifier; import org.apache.http.impl.client.BasicCredentialsProvider; import org.apache.http.ssl.SSLContextBuilder; import org.apache.http.ssl.SSLContexts; import org.elasticsearch.client.RestClient; import org.elasticsearch.client.RestClientBuilder; import org.springframework.beans.factory.annotation.Value; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.core.io.ClassPathResource; import javax.annotation.PostConstruct; import javax.net.ssl.SSLContext; import java.io.IOException; import java.io.InputStream; import java.security.KeyManagementException; import java.security.KeyStore; import java.security.KeyStoreException; import java.security.NoSuchAlgorithmException; import java.security.cert.Certificate; import java.security.cert.CertificateException; import java.security.cert.CertificateFactory; @Configuration @Slf4j public class ElasticSearchConfig { @Value(\\\"${spring.elasticsearch.host}\\\") private String host; @Value(\\\"${spring.elasticsearch.port}\\\") private int port; @Value(\\\"${spring.elasticsearch.username}\\\") private String userName; @Value(\\\"${spring.elasticsearch.password}\\\") private String passWord; @Value(\\\"${spring.elasticsearch.crtName}\\\") private String tempCrtName; private static String crtName; @PostConstruct private void init() { crtName = tempCrtName; } //解析配置的字符串，转为HttpHost对象数组 private HttpHost toHttpHost() { HttpHost httpHost = new HttpHost(host, port, \\\"https\\\"); return httpHost; } @Bean public ElasticsearchClient clientByPasswd() throws Exception { ElasticsearchTransport transport = getElasticsearchTransport(userName, passWord, toHttpHost()); return new ElasticsearchClient(transport); } private static SSLContext buildSSLContext() { ClassPathResource resource = new ClassPathResource(crtName); SSLContext sslContext = null; try { CertificateFactory factory = CertificateFactory.getInstance(\\\"X.509\\\"); Certificate trustedCa; try (InputStream is = resource.getInputStream()) { trustedCa = factory.generateCertificate(is); } KeyStore trustStore = KeyStore.getInstance(\\\"pkcs12\\\"); trustStore.load(null, null); trustStore.setCertificateEntry(\\\"ca\\\", trustedCa); SSLContextBuilder sslContextBuilder = SSLContexts.custom() .loadTrustMaterial(trustStore, null); sslContext = sslContextBuilder.build(); } catch (CertificateException | IOException | KeyStoreException | NoSuchAlgorithmException | KeyManagementException e) { log.error(\\\"ES连接认证失败\\\", e); } return sslContext; } private static ElasticsearchTransport getElasticsearchTransport(String username, String passwd, HttpHost... hosts) { // 账号密码的配置 final CredentialsProvider credentialsProvider = new BasicCredentialsProvider(); credentialsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(username, passwd)); // 自签证书的设置，并且还包含了账号密码 RestClientBuilder.HttpClientConfigCallback callback = httpAsyncClientBuilder -> httpAsyncClientBuilder .setSSLContext(buildSSLContext()) .setSSLHostnameVerifier(NoopHostnameVerifier.INSTANCE) .setDefaultCredentialsProvider(credentialsProvider); // 用builder创建RestClient对象 RestClient client = RestClient .builder(hosts) .setHttpClientConfigCallback(callback) .build(); return new RestClientTransport(client, new JacksonJsonpMapper()); } } \"]},\"419\":{\"h\":\"4. 连接测试\",\"t\":[\"创建一个索引，测试是否能连接ES成功。\",\"@SpringBootTest @Slf4j public class EsBaseTest { @Resource private ElasticsearchClient elasticsearchClient; @Test void contextLoads() throws IOException{ log.info(\\\"创建索引\\\"); //写法比RestHighLevelClient更加简洁 CreateIndexResponse indexResponse = elasticsearchClient.indices() .create(c -> c.index(\\\"student\\\")); log.info(String.valueOf(indexResponse)); } } \",\"打印结果：{\\\"index\\\":\\\"student\\\",\\\"shards_acknowledged\\\":true,\\\"acknowledged\\\":true}\"]},\"420\":{\"h\":\"5. debug\",\"t\":[\"连接错误：如果yaml文件中的连接信息填错，就会产生异常\",\"ES服务未开启：如果ES服务没有开启，会爆出java.io.IOException: Connection reset异常\",\"API错误：操作ES的数据时，如果数据出错（比如重复插入或操作不存在的数据），就会直接抛出异ElasticsearchException常，可以操作前先判断下。\",\"依赖缺失：如果没有jakarta.json依赖，使用ES客户端时会报错，报错原因是创建@Bean失败，因为配置ES客户端时，用到了new JacksonJsonpMapper()，该类需要jakarta.json依赖。\"]},\"421\":{\"h\":\"索引 -> API\",\"t\":[\"以下示例都是直接在测试类中写的，实际开发中，要做详细架构和工具类的。\",\"索引类API的操作结果可以进一步调用内置方法获取更细节的数据。\"]},\"422\":{\"h\":\"1. 添加Index\",\"t\":[\"API：indices().create()\",\"@SpringBootTest public class EsBaseTest { @Resource //注入ES客户端 private ElasticsearchClient client; @Test void indicesCreateTest() throws Exception{ CreateIndexResponse response = client.indices().create( //index方法的参数就是要创建的索引名 c -> c.index(\\\"book2\\\") ); System.out.println(response); System.out.println(response.acknowledged()); //true，创建成功 } } //打印结果： CreateIndexResponse: { //CreateIndexResponse对象 \\\"index\\\":\\\"book2\\\",\\\"shards_acknowledged\\\":true,\\\"acknowledged\\\":true } \",\"create方法可能会抛出两个异常：IOException和ElasticsearchException。比如当创建的索引已经存在时，就会抛出ES异常。\"]},\"423\":{\"h\":\"2. 查询Index\",\"t\":[\"API：client.indices().get()\",\"@SpringBootTest public class EsBaseTest { @Resource private ElasticsearchClient client; @Test public void indicesQueryTest() throws IOException { GetIndexResponse response = client.indices().get( c -> c.index(\\\"user\\\") ); System.out.println(response); } } \",\"执行结果：\",\"GetIndexResponse: { \\\"user\\\":{ \\\"aliases\\\":{}, \\\"mappings\\\":{}, \\\"settings\\\":{ \\\"index\\\":{ \\\"number_of_shards\\\":\\\"1\\\", \\\"number_of_replicas\\\":\\\"1\\\", \\\"routing\\\":{ \\\"allocation\\\":{ \\\"include\\\":{ \\\"_tier_preference\\\":\\\"data_content\\\" } } }, \\\"provided_name\\\":\\\"user\\\", \\\"creation_date\\\":1688553677137, \\\"uuid\\\":\\\"6KQ0XegcTCiAe3nYvBEklA\\\", \\\"version\\\":{ \\\"created\\\":\\\"8070099\\\" } } } } } \"]},\"424\":{\"h\":\"3. 判断Index是否存在\",\"t\":[\"API：client.indices().exists()\",\"@SpringBootTest public class EsBaseTest { @Resource private ElasticsearchClient client; @Test public void indicesExistsTest() throws IOException { BooleanResponse response = client.indices().exists( c -> c.index(\\\"user\\\") ); System.out.println(response.value()); } } \",\"exists().value() 返回boolean类型的结果，true表示存在。\"]},\"425\":{\"h\":\"4. 删除Index\",\"t\":[\"API：client.indices().delete()\",\"@SpringBootTest public class EsBaseTest { @Resource private ElasticsearchClient client; @Test public void deleteTest() throws IOException { DeleteIndexResponse response = client.indices().delete( d -> d.index(\\\"user\\\") ); System.out.println(response); System.out.println(response.acknowledged()); } } \",\"response.acknowledged()返回boolean类型的结果，true表示删除成功。\"]},\"426\":{\"h\":\"文档 -> API\",\"t\":[\"以下示例都是直接在测试类中写的，实际开发中，要做详细架构和工具类的。\"]},\"427\":{\"h\":\"实体类\",\"t\":[\"对文档的操作就是对数据的操作，需要创建一个实体类作为载体，如下\",\"@Data @NoArgsConstructor //习惯性的要有空参构造器，不然可能出意外的bug @AllArgsConstructor public class User { private String username; private int age; private String intro; } \"]},\"428\":{\"h\":\"1. 插入 文档\",\"t\":[\"API：client.index()\",\"@SpringBootTest public class EsBaseTest { @Resource private ElasticsearchClient client; @Test public void addDocumentTest() throws IOException { User user = new User(\\\"Tom\\\", 11,\\\"我很酷\\\"); IndexResponse response = client.index( //index(索引).id(文档id).document(要插入的数据=实体类) i -> i.index(\\\"user\\\").id(\\\"2\\\").document(user) ); System.out.println(response); } } \",\"response的打印结果：\",\"IndexResponse: { \\\"_id\\\":\\\"2\\\", //文档id \\\"_index\\\":\\\"user\\\", //文档所在索引 \\\"_primary_term\\\":1, \\\"result\\\":\\\"created\\\", //执行结果：created表示创建成功 \\\"_seq_no\\\":2, \\\"_shards\\\":{ //分片信息 \\\"failed\\\":0.0, \\\"successful\\\":1.0, \\\"total\\\":2.0 }, \\\"_version\\\":1 //数据的版本 } \",\"插入的时候要指定文档所在的index，以及文档的_id，如果重复插入数据（文档_id不变），插入就变成了更新，result字段也变成了updated\"]},\"429\":{\"h\":\"2. 更新 文档\",\"t\":[\"API：client.update()\",\"@SpringBootTest public class EsBaseTest { @Resource private ElasticsearchClient client; @Test public void updateDocumentTest() throws IOException { User user = new User(\\\"Aaron\\\", 12,\\\"我很酷\\\"); UpdateResponse<User> response = client.update( u -> u.index(\\\"user\\\").id(\\\"1\\\").doc(user), User.class ); System.out.println(response); } } \",\"response的打印结果：\",\"IndexResponse: { \\\"_id\\\":\\\"1\\\", // 文档id \\\"_index\\\":\\\"user\\\", //文档所在索引 \\\"_primary_term\\\":1, \\\"result\\\":\\\"updated\\\", //操作结果，updated表示更新 \\\"_seq_no\\\":3, \\\"_shards\\\":{ //分片信息 \\\"failed\\\":0.0, \\\"successful\\\":1.0, \\\"total\\\":2.0 }, \\\"_version\\\":2 //版本，更新了一次就变成了2 } \"]},\"430\":{\"h\":\"3. 判断 文档是否存在\",\"t\":[\"API：client.exists()\",\"@SpringBootTest public class EsBaseTest { @Resource private ElasticsearchClient client; @Test public void existDocumentTest() throws IOException { BooleanResponse response = client.exists( //指定要判断的文档的：索引和文档id e -> e.index(\\\"user\\\").id(\\\"1\\\") ); System.out.println(response.value()); } } \",\"response.value()的结果是boolean，true表示文档存在。\"]},\"431\":{\"h\":\"4. 根据_id 删除 文档\",\"t\":[\"API：client.delete()\",\"@SpringBootTest public class EsBaseTest { @Resource private ElasticsearchClient client; @Test public void deleteDocumentTest() throws IOException { DeleteResponse response = client.delete( //删除要指定索引和文档id d -> d.index(\\\"user\\\").id(\\\"2\\\") ); System.out.println(response); } } \",\"response打印结果：\",\"DeleteResponse: { \\\"_id\\\":\\\"2\\\", \\\"_index\\\":\\\"user\\\", \\\"_primary_term\\\":1, \\\"result\\\":\\\"deleted\\\", //执行结果，deleted表示删除成功 \\\"_seq_no\\\":5, \\\"_shards\\\":{ \\\"failed\\\":0.0,\\\"successful\\\":1.0,\\\"total\\\":2.0 }, \\\"_version\\\":3 } \"]},\"432\":{\"h\":\"5. 根据_id 获取文档的所有数据\",\"t\":[\"API：client.get()\",\"@SpringBootTest public class EsBaseTest { @Resource private ElasticsearchClient client; @Test public void getDocumentTest() throws IOException { GetResponse<User> response = client.get( g -> g.index(\\\"user\\\").id(\\\"1\\\"), User.class ); System.out.println(response); System.out.println(response.source()); System.out.println(response.source().getAge()); } } \",\"response的返回结果：\",\"GetResponse: { \\\"_index\\\":\\\"user\\\", \\\"found\\\":true, \\\"_id\\\":\\\"1\\\", \\\"_primary_term\\\":1, \\\"_seq_no\\\":4, \\\"_source\\\":\\\"User(username=Aaron, age=12, intro=我很酷)\\\", \\\"_version\\\":3 } \\\"User(username=Aaron, age=12, intro=我很酷)\\\" \",\"response.source()：返回文档的所有数据\",\"response.source().getXxx()：获取某个具体的字段的值\"]},\"433\":{\"h\":\"bulk 批量操作\",\"t\":[\"bulk 操作，是用来批量发送请求，比较节省资源。\",\"bulk操作发送了_bulk请求\",\"create：创建文档，若文档存在就返回错误\",\"index：创建文档，若文档存在就更新\",\"update：更新文档，如果文档不存在就返回错误\",\"delete：删除文档，如果要删除的文档id不存在，就返回错误\"]},\"434\":{\"h\":\"语法结构\",\"t\":[\"一个操作分为两部分，一部分指定操作类型和索引，另一部分是请求体\",\"提示\",\"TBD，用到时再整理\"]},\"435\":{\"h\":\"全文搜索\",\"t\":[\"提示\",\"TBD，用到时再整理\"]},\"436\":{\"h\":\"5-1. 消息队列\"},\"437\":{\"h\":\"RabbitMQ\",\"t\":[\"提示\",\"连接信息在yml配置文件中配置。\",\"队列、交换机的声明在专门的配置类中，消费者和生产者直接使用即可。\",\"SpringBoot对RabbitMQ只是整合了依赖和配置，具体用法详见：RabbitMQ。\"]},\"438\":{\"h\":\"1. 依赖\",\"t\":[\"<!--rabbitmq--> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-amqp</artifactId> </dependency> \"]},\"439\":{\"h\":\"2. yml\",\"t\":[\"serserver: port: 8021 spring: application: name: rabbitmq-provider rabbitmq: #配置rabbitmq服务器 host: 159.75.225.162 port: 5672 username: admin password: 123456 virtual-host: / #虚拟host,默认是 listener: simple: prefetch: 1 # 设置预取值,默认是0[轮训],1为根据性能不公平分发 \"]},\"440\":{\"h\":\"3. 使用指南\"},\"441\":{\"h\":\"基本使用过程\",\"t\":[\"搭建好环境：引入依赖、做好yml配置\",\"创建一个config包，包里按需创建队列配置类， \",\"返回队列Bean\",\"返回交换器Bean（共五种）\",\"返回绑定Bean\",\"生产者发送消息 \",\"创建一个生产者Service，调用RabbitTemplate.convertAndSend向交换机发送消息\",\"消费者接收消息 \",\"创建一个消费者Service，使用@RabbitListener监听目标队列，来接受消息。\",\"PS：实际开发中，生产者和消费者大概率分属于两个SpringBoot模块。\"]},\"442\":{\"h\":\"配置类说明\",\"t\":[\"-目的：创建队列和交换机并将他们绑定，然后全部加入Bean。\",\"按需创建配置类，一个配置类可以创建多个队列，可以创建各种类型的交换机（因为配置类本身就可以放很多@Bean）\",\"为了结构清晰，配置类根据功能创建；不要忘记将配置类和队列绑定。\"]},\"443\":{\"h\":\"4. 使用示例：Direct\"},\"444\":{\"h\":\"4.1 配置类\",\"t\":[\"package com.sgugo.rabbitmq.config; @Configuration public class RabbitConfig { //定义队列名和交换机名 public static String DIRECT_Q1 = \\\"direct_Q1\\\"; public static String DIRECT_EXCHANGE = \\\"directExchange\\\"; @Bean //返回一个队列 public Queue directQueue(){ return new Queue(DIRECT_Q1); } @Bean //返回一个交换机 public DirectExchange directExchange(){ return new DirectExchange(DIRECT_EXCHANGE); } @Bean //将交换机与队列绑定 public Binding bindingDirect(){ return BindingBuilder.bind(directQueue()).to(directExchange()).with(\\\"route1\\\"); } } \"]},\"445\":{\"h\":\"4.2 生产者Service：发送消息\",\"t\":[\"@Service public class SendMessageServer { @Resource RabbitTemplate rabbitTemplate; public void sendDirectMsg(){ String message = \\\"love & peace\\\"; rabbitTemplate.convertAndSend(\\\"directExchange\\\",\\\"route1\\\",message); } } \"]},\"446\":{\"h\":\"4.3 生成者Controller：调用Service发送消息\",\"t\":[\"package com.sgugo.rabbitmq.controller; @RestController public class RabbitMQController { @Autowired private SendMessageServer server; @RequestMapping(\\\"sendMsg\\\") public String sendMsg(){ server.sendDirectMsg(); return \\\"OK\\\"; } } \"]},\"447\":{\"h\":\"4.4 消费者：监听消息\",\"t\":[\"通过@RabbitListener注解的queues监听指定的队列。当交换机想队列中推送消息时，消息将会逐条赋值给注解下面方法的参数。\",\"@Component public class DirectConsumer { @RabbitListener(queues = \\\"direct-queue1\\\")//设置监听队列1 public void listenerDirect1(String msg){ System.out.println(\\\"direct接受消息1\\\" + msg); } @RabbitListener(queues = \\\"direct-queue2\\\")//设置监听队列2 public void listenerDirect2(String msg){ System.out.println(\\\"direct接受消息2\\\" + msg); } } \"]},\"448\":{\"h\":\"4.5 测试效果\",\"t\":[\"启动服务器：队列和交换机被创建出来，可在web页面查看\",\"发送消息：访问Controller中的sendMsg方法发送消息，访问多次，可发送多次消息。 \",\"同时在web页面可以看到，积压了发送的消息。\",\"创建消费者：消费者只需创建，无需执行（当然类需要加入bean） \",\"只要@RabbitListener监听的队列有消息推送过来，就会自动执行下面的方法去处理消息。\"]},\"449\":{\"h\":\"ActiveMQ\"},\"450\":{\"h\":\"1. 依赖\",\"t\":[\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-activemq</artifactId> </dependency> \"]},\"451\":{\"h\":\"2. yml配置\",\"t\":[\"spring: activemq: broker-url: tcp://localhost:61616 # 配置ActiveMQ的服务器地址 jms: pub-sub-domain: true # 配置消息模型,true表示订阅模式，默认为点对点模式 \"]},\"452\":{\"h\":\"3. 操作ActiveMQ\",\"t\":[\"使用JmsMessagingTemplate操作ActiveMQ\",\"@Service public class MessageServiceActivemqImpl implements MessageService { @Autowired private JmsMessagingTemplate messagingTemplate; @Override public void sendMessage(String id) { System.out.println(\\\"待发送短信的订单已纳入处理队列，id：\\\"+id); messagingTemplate.convertAndSend(\\\"order.queue.id\\\",id); } @Override public String doMessage() { String id = messagingTemplate.receiveAndConvert(\\\"order.queue.id\\\",String.class); System.out.println(\\\"已完成短信发送业务，id：\\\"+id); return id; } } \"]},\"453\":{\"h\":\"3.1 convertAndSend：发送消息\",\"t\":[\"该方法发送消息时会先将消息的类型转换成字符串，然后再发送。\",\"参数1：队列名，消息发送的位置\",\"参数2：消息内容\"]},\"454\":{\"h\":\"3.2 receiveAndConvert：接收消息\",\"t\":[\"接收消息会先将消息接收到，然后再转换成指定的数据类型\",\"参数1：队列，消息读取的位置\",\"参数2：消息要转换成什么类型。\"]},\"455\":{\"h\":\"4. 消息监听器\",\"t\":[\"使用消息监听器在服务器启动后，监听指定位置（生产者），当消息出现后，立即消费消息\",\"@Component //加入bean public class MessageListener { @JmsListener(destination = \\\"order.queue.id\\\") @SendTo(\\\"order.other.queue.id\\\") public String receive(String id){ System.out.println(\\\"已完成短信发送业务，id：\\\"+id); return \\\"new:\\\"+id; } } \",\"@JmsListener：注解@JmsListener定义当前方法监听ActiveMQ中指定名称的消息队列 \",\"destination属性就是要监听的队列名\",\"@SendTo：队列转发。消息接收并处理完后，转发到下一个消息队列中。这样即可构造连续执行的顺序消息队列。 \",\"属性value就是要转发的队列名。\"]},\"456\":{\"h\":\"6. 总结\",\"t\":[\"springboot整合ActiveMQ提供了JmsMessagingTemplate对象作为客户端操作消息队列\",\"操作ActiveMQ需要配置ActiveMQ服务器地址，默认端口61616\",\"企业开发时通常使用监听器来处理消息队列中的消息，设置监听器使用注解@JmsListener\"]},\"457\":{\"h\":\"RocketMQ\",\"t\":[\"提示\",\"暂略。\"]},\"458\":{\"h\":\"Kafka\",\"t\":[\"提示\",\"暂略。\"]},\"459\":{\"h\":\"5-2. 缓存技术\"},\"460\":{\"h\":\"缓存介绍\",\"t\":[\"缓存的作用主要有两个\",\"储存数据库中的数据，降低数据库的读取\",\"储存临时数据（如验证码）\"]},\"461\":{\"h\":\"1. 缓存是什么\",\"t\":[\"缓存是一种介于数据永久存储介质与应用程序之间的数据临时存储介质，使用缓存可以有效的减少低速数据读取过程的次数（例如磁盘IO），提高系统性能。此外缓存不仅可以用于提高永久性存储介质的数据读取效率，还可以提供临时的数据存储空间。\"]},\"462\":{\"h\":\"2. 缓存数据库数据\",\"t\":[\"大部分应用的主要任务就是处理数据，尤其是读取数据，同时数据库的性能往往是服务器的瓶颈。\",\"为了解决访问数据库的瓶颈，常会在应用程序与数据库之间建立一种临时的数据存储机制，该区域中的数据在内存中保存，读写速度较快，可以有效解决数据库访问效率低下的问题。这一块临时存储数据的区域就是缓存。\",\"5-2-1\",\"使用缓存前：应用 ->直接与数据库交互\",\"使用缓存后：应用与缓存交互，缓存与数据库交互 \",\"缓存中的数据在内存中，可以反复使用，效率高\"]},\"463\":{\"h\":\"3. 缓存临时数据\",\"t\":[\"有些数据是临时的，比如验证码，这类数据没必要储存到数据库，而是选择存入缓存。\",\"尤其是一些实时生成的数据，如坐标，也会存入缓存。\"]},\"464\":{\"h\":\"4. SpringBoot缓存方案\",\"t\":[\"springboot技术提供有内置的缓存解决方案，可以帮助开发者快速开启缓存技术，并使用缓存技术进行数据的快速操作。\",\"SpringBoot提供的缓存技术除了提供默认的缓存方案，还可以对其他缓存技术进行整合，统一接口，方便缓存技术的开发与管理，如下：包含了多种缓存技术。\",\"Simple（默认）\",\"Ehcache（常用）\",\"Redis（常用）\",\"Memcached（常用，但没被整合）\",\"Generic\",\"JCache\",\"Hazelcast\",\"Infinispan\",\"Couchbase\",\"Caffeine\"]},\"465\":{\"h\":\"默认缓存Simple\",\"t\":[\"Simple是SpringBoot内置的缓存解决方案，开箱即用。\"]},\"466\":{\"h\":\"1. 依赖\",\"t\":[\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-cache</artifactId> </dependency> \"]},\"467\":{\"h\":\"2. 启用缓存\",\"t\":[\"缓存功能需要在启动类上开启\",\"@SpringBootApplication @EnableCaching//开启缓存功能 public class Application{...} \"]},\"468\":{\"h\":\"3. 使用缓存\",\"t\":[\"缓存数据无需手动操作，是全自动的，只需要用注解在方法上开启，就可以决定方法return的数据是否缓存，以及以何种方式缓存。\",\"@Cacheable：对方法的返回值进行缓存，调用所修饰的方式时，先查看key里面是否有值，有值就不执行方法，直接返回缓存值；没值就执行方法，并将方法的return结果缓存。 \",\"value属性：缓存所在的空间；\",\"key属性：缓存的键，一般设置为#参数形参的形式，这样key就是动态的了 \",\"比如形参是username，不同的用户掉用key就不同。\",\"@CachePut：对方法的return结果进行缓存，且方法每次必被调用 \",\"参数同上\",\"//一个根据用户id获取用户地址的方法，对用户请求的地址进行缓存。 //不同的用户使用不同的键缓存，不会覆盖 @Cacheable(value=\\\"address\\\",key=\\\"#uid\\\") public String getAddress(String uid){ ... } \"]},\"469\":{\"h\":\"案例：验证码\",\"t\":[\"该案例是模拟验证码的流程，从而熟悉SpringBoot 内置Cache接口的用法以及缓存的工作机制。业务流程如下：\",\"请求验证码：向Controller发请求，输入手机号请求验证码\",\"生成验证码：由于是模拟生成验证码，实际是返回的四位数字的随机数\",\"缓存验证码：将验证码返回的同时进行缓存，以待进行核对 \",\"key就是手机号，一个手机号一个验证码\",\"缓存方式是CachePut，一个手机号可以多次请求验证码，新的覆盖旧的\",\"检查验证码：发送核验验证码的请求（请求体是手机号和验证码），将请求体的值存入实体类中，然后根据请求的手机号取出缓存中的验证码，与请求体中的验证码进行比对。\"]},\"470\":{\"h\":\"1. dto：实体类\",\"t\":[\"用来存储手机号和验证码\",\"package com.sgugo.cache.dto; @Data @NoArgsConstructor public class SMSCode { private String tele; private String code; } \"]},\"471\":{\"h\":\"2. service：业务层接口和实现类\",\"t\":[\"共有两个业务方法：返回验证码和检查验证码\",\"interface：\",\"package com.sgugo.cache.service; public interface SMSCodeService { //根据手机号返回验证码 public String sendCodeToSMS(String tele); // 检查验证码 public boolean checkCode(SMSCode smsCode); } \",\"impl：\",\"package com.sgugo.cache.service.impl; @Service public class SMSCodeServiceImpl implements SMSCodeService { @Resource //注入工具类，使用工具类帮忙生成验证码和校验验证码 private CodeUtils codeUtils; @Override @CachePut(value=\\\"smsCode\\\",key=\\\"#tele\\\") //根据请求的电话，生成验证码，然后缓存并返回 public String sendCodeToSMS(String tele) { return codeUtils.generator(tele); } @Override //取出内存中的验证码与传递过来的验证码比对，如果相同，返回true public boolean checkCode(SMSCode smsCode) { String code = smsCode.getCode(); String cacheCode = codeUtils.get(smsCode.getTele()); return code.equals(cacheCode); } // @Cacheable(value=\\\"smsCode\\\",key=\\\"#tele\\\") // public String get(String tele){ // return null; // } } \",\"注意\",\"？疑问：为什么不直接在业务代码里实现，而是要借助工具类呢？\",\"因为缓存是通过注解生效的，且需要SpringBoot开启。如上面代码中的get方法，如果写在业务类中，将永远返回null，因为在Service层内部调用方法，不经过@Bean管理，此时缓存注解就不会生效。而sendCodeToSMS方法就可以直接使用缓存注解，因为该方法并没有在类中被掉用，而是被Controller通过@Bean管理的Service对象调用。\"]},\"472\":{\"h\":\"3. 工具类\",\"t\":[\"该类用于使用算法生成验证码，以及获取缓存中的验证码\",\"package com.sgugo.cache.utils; @Component public class CodeUtils { //用一种算法，为不同的手机号模拟出不同的验证码，这里直接返回4位随机数 public String generator(String tele){ double code = floor(Math.random() * 10000); return String.valueOf(code); } //获取缓存中的验证码，有就返回，没有就返回null @Cacheable(value=\\\"smsCode\\\",key=\\\"#tele\\\") public String get(String tele){ return null; } } \"]},\"473\":{\"h\":\"4. Controller：web层代码\",\"t\":[\"提供两个接口，地址一样，通过请求方式区分\",\"package com.sgugo.cache.controller; @RestController @RequestMapping(\\\"/sms\\\") public class SMSCodeController { @Resource private SMSCodeService smsCodeService; @GetMapping public String getCode(String tele){ return smsCodeService.sendCodeToSMS(tele); } @PostMapping public boolean checkCode(SMSCode smsCode){ //这里是用实体类接收参数的，注意参数与实体类中的变了名一致 return smsCodeService.checkCode(smsCode); } } \"]},\"474\":{\"h\":\"5. 使用测试\",\"t\":[\"获取验证码：GET http://localhost:8080/sms?tele=18888888888\",\"每请求一次就返回一个验证码，如：3799\",\"检测验证码：POST http://localhost:8080/sms?tele=18888888888&code=2964\",\"使用上次GET请求的手机号和返回的验证码为参数\"]},\"475\":{\"h\":\"Ehcache\",\"t\":[\"Ehcache也是SpringBoot整合的缓存技术，和默认的Simple用法基本一样，只需引入Ehcache依赖，做一下简单的配置即可。\",\"springboot整合缓存技术做的是通用格式，不管你整合哪种缓存技术，只是 实现 变化了，操作方式一样。这也体现出springboot技术的优点，统一同类技术的整合方式。\"]},\"476\":{\"h\":\"1. 依赖\",\"t\":[\"<dependency> <groupId>net.sf.ehcache</groupId> <artifactId>ehcache</artifactId> </dependency> \"]},\"477\":{\"h\":\"2. yml配置\",\"t\":[\"SpringBoot默认采取的是Simple缓存，需要在配置文件中更改缓存方式\",\"spring: cache: type: ehcache # 指定缓存方式，默认是Simple ehcache: # 可以对ehcache进一步配置，指定ehcache的配置文件 config: ehcache.xml # 默认就是resource下的ehcache.xml，可以不配置 \",\"注意\",\"type的值都是固定的（idea会有提示），只用SpringBoot整合的技术才可以直接在这里更好服务商，没有被整合的不能这样更好，如：memcached就没被整合\"]},\"478\":{\"h\":\"3. ehcache.xml\",\"t\":[\"ehcaceh提供了更强大的缓存技术，有很多自定义缓存策略需要在配置文件中配置。\",\"<!-- file: resource/ehcache.xml --> <?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <ehcache xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:noNamespaceSchemaLocation=\\\"http://ehcache.org/ehcache.xsd\\\" updateCheck=\\\"false\\\"> <diskStore path=\\\"D:\\\\ehcache\\\" /> <!--默认缓存策略 --> <!-- external：是否永久存在，设置为true则不会被清除，此时与timeout冲突，通常设置为false--> <!-- diskPersistent：是否启用磁盘持久化--> <!-- maxElementsInMemory：最大缓存数量--> <!-- overflowToDisk：超过最大缓存数量是否持久化到磁盘--> <!-- timeToIdleSeconds：最大不活动间隔，设置过长缓存容易溢出，设置过短无效果，可用于记录时效性数据，例如验证码--> <!-- timeToLiveSeconds：最大存活时间--> <!-- memoryStoreEvictionPolicy：缓存清除策略--> <defaultCache eternal=\\\"false\\\" diskPersistent=\\\"false\\\" maxElementsInMemory=\\\"1000\\\" overflowToDisk=\\\"false\\\" timeToIdleSeconds=\\\"60\\\" timeToLiveSeconds=\\\"60\\\" memoryStoreEvictionPolicy=\\\"LRU\\\" /> <cache name=\\\"smsCode\\\" eternal=\\\"false\\\" diskPersistent=\\\"false\\\" maxElementsInMemory=\\\"1000\\\" overflowToDisk=\\\"false\\\" timeToIdleSeconds=\\\"10\\\" timeToLiveSeconds=\\\"10\\\" memoryStoreEvictionPolicy=\\\"LRU\\\" /> </ehcache> \",\"不同的缓存策写在不同的Cache标签里。每个缓存策略（除了default）都有自己的name属性，该属性为缓存策略的命名空间。\",\"使用缓存时指定的缓存空间，也同时匹配了缓存策略。\"]},\"479\":{\"h\":\"4. 使用encache\",\"t\":[\"代码基本不用变，就是要注意缓存空间要跟缓存策略里的name匹配。\",\"Encache在功能上更强大，可以自定义很多策略，比如规定缓存到期时间，让缓存的验证码5分钟后失效（该策略仅在smsCode缓存空间生效）缓存空间轻松的隔离了各种缓存策略。\"]},\"480\":{\"h\":\"5. 补充：缓存清除策略\",\"t\":[\"上面的缓存策略配置里，缓存清除策略有以下四种：\",\"LRU：挑选最近最早使用的数据淘汰 \",\"比如一组数据中，最近20秒内访问时间离当前时间间隔最长的数据被淘汰\",\"LFU：挑选最近使用次数最少的数据淘汰 \",\"比如一组数据中，最近20秒内，被访问次数最少的被淘汰掉。\",\"TTL：将要过期的数据淘汰\",\"RANDOM：随机淘汰\",\"注意LRU和LFU是不同的，一段时间内使用时间最早的数据，也有可能使用次数是最多的。\",\"5-2-2\"]},\"481\":{\"h\":\"Redis\",\"t\":[\"Redis也是SpringBoot整合的缓存技术，和默认的Simple和Encache用法基本一样，只需引入Redis依赖，做一下简单的配置即可。\",\"这里只是SpringBoot利用Redis替代Simple作为缓存实现，并不能使用完整的Redis功能。\"]},\"482\":{\"h\":\"1. 依赖\",\"t\":[\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-redis</artifactId> </dependency> \"]},\"483\":{\"h\":\"2. yml配置\",\"t\":[\"Redie缓存没有专门的配置文件，而是直接在yml中配置缓存策略。\",\"注意\",\"yml中有两种Redis配置，spring.redis 是配置原始的Redis的，spring.cache.redis 才是配置作为缓存的reids。\",\"# 在application.yml中开启redis缓存并配置redis的缓存策略 spring: redis: # 这里的redis是常规的redis配置 host: localhost # 常规的reids配置用来设置Redis的连接信息 port: 6379 cache: type: redis # 指定缓存方式，默认是Simple redis: # 对redis缓存进行配置 use-key-prefix: false # 是否使用前缀名（系统定义前缀名） key-prefix: sms_ # 追加自定义前缀名 cache-null-values: false # 是否允许存储空值 time-to-live: 10s # 有效时长 \"]},\"484\":{\"h\":\"3. redis缓存用法\",\"t\":[\"和默认的simple缓存用法完全一样，代码完全不用该，只是redis有自己的存储策略和key规则。\"]},\"485\":{\"h\":\"4. redis的 key 规则\",\"t\":[\"redis的键名默认由两部分组成：储存空间:key 比如@Cacheable(value=\\\"address\\\",key=\\\"#uid\\\")缓存到redis中的键名为：address:123423\",\"如果设置了不使用前缀名use-key-prefix: false ，键名里就不会包含储存空间:\",\"如果设置了自定义前缀，键名就会变为：自定义前缀:储存空间:key\"]},\"486\":{\"h\":\"Memcached\",\"t\":[\"提示\",\"TBD\",\"暂时不用这个技术了，如果工作需要再学习。\"]},\"487\":{\"h\":\"Jetcache\",\"t\":[\"提示\",\"Jetcache是阿里巴巴开发的产品，是基于Java的缓存系统，提供统一的API和注解来简化缓存的使用。可以将Jetcache看作是一个小型框架，它本身不提供缓存服务，而是利用其他缓存技术提供服务。\",\"Jetcache可以替代SpringCache自成体系。\",\"jetCache对SpringCache进行了封装，在原有功能基础上实现了多级缓存、缓存统计、自动刷新、异步调用、数据报表等功能\"]},\"488\":{\"h\":\"底层兼容的缓存技术\",\"t\":[\"jetCache设定了本地缓存与远程缓存的多级缓存解决方案，目前只兼容四种缓存技术：\",\"本地缓存（local） \",\"LinkedHashMap\",\"Caffeine\",\"远程缓存（remote） \",\"Redis\",\"Tair\",\"以上四种缓存技术，可以任意组合，也可以只用一种。\",\"相关信息\",\"TBD. 等项目中用到的时候再说。或者等系统性的整理中间件->缓存的时候再研究。\"]},\"489\":{\"h\":\"J2cache\",\"t\":[\"j2cache是一个缓存整合框架，可以提供缓存的整合方案，使各种缓存搭配使用，自身不提供缓存功能，基于 ehcache + redis 进行整合\",\"相关信息\",\"TBD.\\n等项目中用到的时候再说。或者等系统性的整理中间件->缓存的时候再研究。\"]},\"490\":{\"h\":\"5-3. 任务\",\"t\":[\"这里说的任务系统指的是定时任务。定时任务是开发中必不可少的组成部分，如长周期业务数据的计算、监控类任务和定时触发的活动等，都离不开任务系统。\"]},\"491\":{\"h\":\"Timer\",\"t\":[\"Timer是Java 内置的一个定时器工具类，很小巧，用来在一个后台线程计划执行指定任务。它可以安排任务“执行一次”或者定期“执行多次”。\",\"Timer 可以做简单的定时任务，这里仅作了解。\"]},\"492\":{\"h\":\"1. 主要方法\",\"t\":[\"schedule(TimerTask task, Date time)：安排在 \\\"指定的时间\\\" 执行 指定的任务。（只执行一次）\",\"schedule(TimerTask task,long delay)：安排在指定延迟后执行指定的任务\",\"schedule(TimerTask task, Date firstTime , long period)：安排指定的任务在 \\\"指定的时间 \\\" 开始进行 \\\"重复\\\" 的固定延迟执行\",\"schedule(TimerTask task,long delay,long period)：安排指定的任务指定的延迟后开始进行重复的固定延迟执行．\",\"scheduleAtFixedRate(TimerTask task,Date firstTime,long period)：安排指定的任务在指定的时间开始进行重复的固定速率执行．\",\"scheduleAtFixedRate(TimerTask task,long delay,long period)：安排指定的任务在指定的延迟后开始进行重复的固定速率执行．\",\"Timer.cancal()：终止此计时器，丢弃所有当前已安排的任务。\",\"Timer.purge()：从此计时器的任务队列中移除所有已取消的任务。\",\"TimerTask.cancal()：把当前任务取消\"]},\"493\":{\"h\":\"2. 简单示例\",\"t\":[\"注意：定时任务是以来Tomcat环境的，只有Tomcat启动了，定时任务的线程才能一直被调度，被执行。如果没有启动SpringBoot，或在test（SpringBootTest）中进行测试，不会正常执行定时任务。\",\"public class TaskTest { public static void main(String[] args) { Timer timer = new Timer(); TimerTask task = new TimerTask() { @Override public void run() { System.out.println(\\\"每秒一次：酷\\\"); } }; timer.schedule(task,0,2000); } } \",\"Timer类用来创建定时器，Timer的schedule方法用来执行定时任务，第一个参数是TimerTask，TimerTask是要执行的定时任，该类是个抽象类，需要实现run方法，run方法内的代码就是要定时执行的任务。\"]},\"494\":{\"h\":\"3. Timer的缺陷\",\"t\":[\"Timer底层是使用单线程来处理多个Timer任务，这意味着所有任务实际上都是串行执行，前一个任务的延迟会影响到之后的任务的执行。\",\"由于单线程的缘故，一旦某个定时任务在运行时，产生未处理的异常，那么不仅当前这个线程会停止，所有的定时任务都会停止。\",\"Timer任务执行是依赖于系统绝对时间，系统时间变化会导致执行计划的变更。\"]},\"495\":{\"h\":\"Quartz\",\"t\":[\"注意\",\"被task取代了，不用学\"]},\"496\":{\"h\":\"task\",\"t\":[\"Spring Task是一个轻量级的定时任务框架，用起来非常简洁。\"]},\"497\":{\"h\":\"1. 依赖\",\"t\":[\"spring task 是spring自主开发的框架，不需要依赖其他额外的包。\"]},\"498\":{\"h\":\"2. 开启定时任务功能\",\"t\":[\"使用注解 @EnableScheduling 在引导类上开启定时任务功能.\",\"@SpringBootApplication //开启定时任务功能 @EnableScheduling public class Springboot22TaskApplication { public static void main(String[] args) { SpringApplication.run(Springboot22TaskApplication.class, args); } } \"]},\"499\":{\"h\":\"3. 定义定时任务\",\"t\":[\"定义一个Bean，在对应要定时执行的操作上方，使用注解@Scheduled定义执行的时间，执行时间的描述方式是 cron表达式\",\"@Component public class MyBean { @Scheduled(cron = \\\"0/1 * * * * ?\\\") public void print(){ //Thread.currentThread().getName()用来获取线程名 System.out.println(Thread.currentThread().getName()+\\\"hello\\\"); } } \",\"触发任务：不用做任何额外的触发配置，该类加上了@Component注解，启动Spring Boot后，该类会被加入Bean管理，同时Spring通过@Scheduled注解自动创建了定时任务。\"]},\"500\":{\"h\":\"4. yml相关配置\",\"t\":[\"spring: task: scheduling: pool: size: 1 # 任务调度线程池大小 默认 1 thread-name-prefix: ssm_ # 调度线程名称前缀 默认 scheduling，用于调试时区分线程名 shutdown: await-termination: false # 线程池关闭时等待所有任务完成 await-termination-period: 10s # 调度线程关闭前最大等待时间，确保最后一定关闭 \"]},\"501\":{\"h\":\"5. cron表达式\",\"t\":[\"提示\",\"嫌麻烦可以搞个core表达式生成器，或者使用其他人提供的core表达式生成工具。\",\"@Scheduled(cron = \\\"* * * * * *\\\") core 表达式详解：\",\"{ 秒数} {分钟} {小时} {日期} {月份} {星期} {年份(可为空)}\",\"字段\",\"是否必填\",\"允许值\",\"允许的特殊字符\",\"秒（Seconds）\",\"y\",\"0~59的整数\",\", - * / 四个字符\",\"分（Minutes）\",\"y\",\"0~59的整数\",\", - * / 四个字符\",\"小时（Hours）\",\"y\",\"0~23的整数\",\", - * / 四个字符\",\"日期（DayofMonth）\",\"y\",\"1~31的整数（但是你需要考虑你月的天数）\",\",- * / ? L W C 八个字符\",\"月份（Month）\",\"y\",\"1~12的整数或者 JAN-DEC\",\", - * / 四个字符\",\"星期（DayofWeek）\",\"y\",\"1~7的整数或者 SUN-SAT （1=SUN）\",\", - * / ? L C # 八个字符\",\"年（Year）\",\"n(可选，留空)\",\"1970~2099\",\", - * / 四个字符\",\"每一个域都使用数字，但还可以出现如下特殊字符，它们的含义是：\",\",：表示列出枚举值。例如：在Minutes域使用5,20，则意味着在5和20分每分钟触发一次。\",\"-：表示范围。例如在Minutes域使用5-20，表示从5分到20分钟每分钟触发一次。\",\"*：表示匹配该域的任意值。假如在Minutes域使用*, 即表示每分钟都会触发事件。\",\"/：表示步长，在初始值后累加一次步长触发一次。例如在Minutes域使用5/20,则意味着在5分钟时触发一次，而5+20分钟，5+20+20分钟等分别触发一次。\",\"?：只能用在DayofMonth和DayofWeek两个域。表示不关注该域，防止DayofMonth和DayofWeek会相互影响\",\"#：用于确定每个月第几个星期几，只能出现在DayofWeek域。例如在4#2，表示某月的第二个星期三。\"]},\"502\":{\"h\":\"6. Spring Task缺陷\",\"t\":[\"不支持持久化，也没有推出官方的分布式集群模式。\",\"若想实现持久化或分布式集群，需要手动编码实现。\"]},\"503\":{\"h\":\"5-4. 邮件\",\"t\":[\"相关信息\",\"用到的时候再整理。\",\"TBD\"]},\"504\":{\"h\":\"6-1. bean的加载方式\",\"t\":[\"提示\",\"bean是Spring框架的基础部分，这里做一个总结，方便理解Spring Boot的自动装配。\",\"Bean是干嘛的 ？\",\"Bean就是被加载到内存中的类。\",\"我们启动一个Web程序，该程序需要持续提供服务。\",\"性能：启动时，Tomcat将基本所有用到的类（其实是被设置为Bean的类的对象）都加载到了内存中，且是单例的，提供服务时，用到哪个类（对象）就去内存中拿，不用现场new。\",\"开发便利：将一个类设置为Bean，他就被加入内存了，也就是该类的对象已经创建了，用到这个类直接注入即可，不用麻烦的先引入再new。\",\"上面的解释并非是真实的加载场景，只是帮助理解Bean的作用。\",\"Bean对于性能和开发便利帮助都非常大，是Spring框架的核心和基础。\"]},\"505\":{\"h\":\"Bean的注册和加载\",\"t\":[\"注册：也就是把一个类设置为Bean，以告诉Spring，该类是可以被加载进容器的。\",\"加载：就是Spring将Bean加载到容器的过程\"]},\"506\":{\"h\":\"xml Bean配置文件\",\"t\":[\"在专门配置bean的配置文件中，手动指定哪些类要成为bean，在<bean/>给出bean的类名，Spring内部会根据反射机制加载class。\",\"bean配置文件示例：\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\\\"> <!--xml方式声明自己开发的bean--> <bean id=\\\"cat\\\" class=\\\"Cat\\\"/> <bean class=\\\"Dog\\\"/> <!--xml方式声明第三方开发的bean--> <bean id=\\\"dataSource\\\" class=\\\"com.alibaba.druid.pool.DruidDataSource\\\"/> <bean class=\\\"com.alibaba.druid.pool.DruidDataSource\\\"/> <bean class=\\\"com.alibaba.druid.pool.DruidDataSource\\\"/> </beans> \"]},\"507\":{\"h\":\"注解+xml扫描\",\"t\":[\"方式1 需要将spring管控的bean全部写在xml文件中，非常麻烦。在类上面使用注解，哪一个类要受到spring管控，就在那个类上加，还可以顺带起一个bean的名字（id）。\"]},\"508\":{\"h\":\"共有4个注解可用\",\"t\":[\"@Component：通用的\",\"@Service：给Service用的\",\"@Controller：给Controller用的\",\"@Repository：给Repository\",\"上面四个注解作用是一样的，不同的名字只是用来标注该类逻辑上的作用。\"]},\"509\":{\"h\":\"注解使用示例\",\"t\":[\"//该类被加入了Bean，且起了一个名字叫tom，默认名字其实是类名 @Component(\\\"tom\\\") public class Cat { ... } \"]},\"510\":{\"h\":\"加载第三方Bean\",\"t\":[\"无法在第三方提供的技术源代码中去添加上述4个注解，当需要加载第三方开发的bean的时候，可以创建专门的配置类加载第三方Bean。\",\"@Component//先将该配置文件加入Bean管理 public class DbConfig { @Bean //使用@Bean注解式该方法的返回值加入Bean public DruidDataSource dataSource(){ DruidDataSource ds = new DruidDataSource(); return ds; } } \"]},\"511\":{\"h\":\"扫描bean\",\"t\":[\"上面提供的仅仅是bean的声明，spring并不会主动感知他们，想让Spring发现这些注解并加入Bean管理，就需要在xml配置文件中配置Spring扫描包含Bean注解的包。\",\"<!-- 这个配置文件，还是Bean的xml配置文件 --> <?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd \\\"> <!--指定扫描加载bean的位置--> <context:component-scan base-package=\\\"com.sgugo.bean,com.sgugo.config\\\"/> </beans> \"]},\"512\":{\"h\":\"注解+Spring配置类\"},\"513\":{\"h\":\"用Java配置类取代XML配置类\",\"t\":[\"N3里的 写XML配置扫描包太low了。XML的功能很简单，Spring还提供了使用Java格式的Spring配置来取代XML格式的Bean配置。\",\"同时，也可以直接在Spring配置文件中定义方法配置第三方类。\",\"@Configuration //定义为Spring配置类 // @ComponentScan用来指定指定要扫描的包 @ComponentScan({com.sgugo.bean,com.sgugo.config}) public class SpringConfig3 { // 类名随便起，重要的是上面的注解 // 如果不需要加载第三方Bean，这里直接定义成空类就OK // 这里可以定义N个方法用来加载第三方Bean @Bean public DogFactoryBean dog(){ return new DogFactoryBean(); } } \"]},\"514\":{\"h\":\"FactoryBean\",\"t\":[\"spring提供了一个接口FactoryBean接口，可以看作是创建Bean的 工厂模式。实现了FactoryBean接口的类造出来的对象不是当前类的对象，而是FactoryBean接口泛型指定类型的对象。\",\"意义和工厂模式类似，在返回Bean前做一些初始化操作，比如返回一个连接Redis的类，不能直接调用空参构造将对象返回，而是要先检测Redis服务是否正常，然后读取配置信息，进行Redis连接，然后再返回。\",\"如下列，造出来的bean并不是RedisFactoryBean，而是Redis，且可在返回Bean前进行初始化。\",\"public class RedisFactoryBean implements FactoryBean<Redis> { @Override public Redis getObject() throws Exception { //创建实例前对Redis服务进行连接测试 //... Redis redis = newRedis(...); //返回Bean前进行加强操作，比如写个日志 return d; } @Override public Class<?> getObjectType() { return Redis.class; } @Override public boolean isSingleton() { return true; } } //上面的工厂Bean类通常使用@Bean的方式进行加载 @Configuration @ComponentScan({com.sgugo.bean,com.sgugo.config}) public class SpringConfig3 { @Bean public DogFactoryBean dog(){ return new DogFactoryBean(); } } \"]},\"515\":{\"h\":\"proxyBeanMethods\",\"t\":[\"用来控制Bean单例的，默认就开启了。\"]},\"516\":{\"h\":\"使用@Import\",\"t\":[\"通过扫描的方式将设置了注解的类加入Bean是个粒度比较大的导入方式，有可能会扫描到一些用不到的包，甚至可能触发包冲突（好的命名规范非常难得）。\",\"而@Import的加载方式是一种精准的Bean加载方式。只需要在Spring配置类注解的参数中写上加载的类对应的.class即可。\"]},\"517\":{\"h\":\"用途\",\"t\":[\"这种方式非常麻烦，唯一的优点是可以指定加载，@Import注解在特殊场景很有用，比如要加载Bean的类没有使用@Component修饰。\",\"对于无侵入编程（源码里不出现框架的痕迹），类上面就没有设置Bean的注解。\"]},\"518\":{\"h\":\"使用示例\",\"t\":[\"@Import({Dog.class,DbConfig.class}) public class SpringConfig4 { ... } //除了加载bean，还可以使用@Import注解加载配置类 @Import(DogFactoryBean.class) public class SpringConfig4 { ... } \"]},\"519\":{\"h\":\"编程式注册bean\"},\"520\":{\"h\":\"1. 编程形式注册bean\",\"t\":[\"前面介绍的加载bean的方式都是在容器启动阶段完成bean的加载，下面这种方式可以在容器初始化完成后手动加载bean。通过这种方式可以实现编程式控制bean的加载。\",\"这种方式注册Bean开发时不用用到，但框架中用的到。\",\"public class App5 { public static void main(String[] args) { // 初始化上下文对象，该对象提供了注册bean的方法 AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(SpringConfig.class); //上下文容器对象已经初始化完毕后，手工加载bean //被加载的类，没有使用配置类和配置文件。 ctx.register(Mouse.class); //手动注册一个bean,并取名为tom ctx.registerBean(\\\"tom\\\",Cat.class); } } \"]},\"521\":{\"h\":\"Bean的覆盖\",\"t\":[\"使用上下文对象多次创建多一个类的Bean，会产生覆盖。\",\"public class App5 { public static void main(String[] args) { AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(SpringConfig.class); //上下文容器对象已经初始化完毕后，手工加载bean ctx.registerBean(\\\"tom\\\", Cat.class,0); ctx.registerBean(\\\"tom\\\", Cat.class,1); ctx.registerBean(\\\"tom\\\", Cat.class,2); System.out.println(ctx.getBean(Cat.class)); //{tom,2} } } \"]},\"522\":{\"h\":\"2. ImportSelector\",\"t\":[\"上面加载Bean的方式，可以对bean的加载进行编程化的控制，不过是在容器初始化后实现的。\",\"若使用实现ImportSelector接口的类，可以实现在容器初始化过程中进行bean的加载控制。这种方式注册Bean开发时基本不用，但框架源码中经常被用到。\"]},\"523\":{\"h\":\"2.1 实现ImportSelector接口\",\"t\":[\"随便创建一个类来实现ImportSelector接口，重写selectImports方法，该方法返回一个String[]，他的值是全类名，写入哪个类就能创建哪个类的Bean。\",\"selectImports方法有个AnnotationMetadata类型的参数，该参数有一系列方法可以获取和判断类的各种元数据。可以通过这些元数据来决定bean的加载。\",\"public class MyImportSelector implements ImportSelector{ @Override public String[] selectImports(AnnotationMetadata metadata){ return new String[]{\\\"com.sgugo.Dog\\\",\\\"com.sgugo.Cat\\\"} } } \"]},\"524\":{\"h\":\"2.2 元数据的由来\",\"t\":[\"AnnotationMetadata获取的是哪个类的元数据了呢？\",\"当创建了ImportSelector接口的实现类后，需要使用Spring配置类的@Import注解加载该实现类，而AnnotationMetadata就是获取的该配置类的元数据。\",\"现在可以通过控制该配置类的元数据，简介控制ImportSelector的实现类了。\",\"package com.sgugo.config; @Import(MyImportSelector.class) public class SpringConfig1{ } \"]},\"525\":{\"h\":\"2.3 判定元数据，控制Bean的生成\",\"t\":[\"获取引入ImportSelector实现类的配置类的元数据，来通过编程的形式决定如何加载bean,只要能编程就能判定，能判定意味着可以控制程序的运行走向，进而控制一切。\",\"public class MyImportSelector implements ImportSelector{ @Override public String[] selectImports(AnnotationMetadata metadata){ //由于获取的是配置类的元数据，所以getClassName()方法获取的类名是： //com.sgugo.config.SpringConfig1 System.out.print(metadata.getClassName()) //判断元数据：hanAnnotation判断配置类是否有某个注解 boolean status = metadata.hasAnnotation(\\\"org.springframework.context.annotation.Configuration\\\") //如上所述，metadata和获取和判断配置类的各项元数据 //进行个简单的控制示例：通过判断注解来加载不同的bean if(status){ return new String[]{\\\"com.sgugo.Dog\\\"} } return new String[]{\\\"com.sgugo.Cat\\\"} } } \"]},\"526\":{\"h\":\"3. ImportBeanDefinitionRegistrar\",\"t\":[\"ImportBeanDefinitionRegistrar接口是 ImportSelector接口的加强版。\",\"bean的加载不是一个简简单单的对象，spring中定义了一个叫做BeanDefinition的东西，它才是控制bean初始化加载的核心。BeanDefinition接口中给出了若干种方法，可以控制bean的相关属性（比如是否是单例）。\",\"我们可以通过定义一个类，然后实现ImportBeanDefinitionRegistrar接口的方式定义bean，并且还可以让你对bean的初始化进行更加细粒度的控制\"]},\"527\":{\"h\":\"3.1 实现ImportBeanDefinitionRegistrar接口\",\"t\":[\"该接口的registerBeanDefinitions比ImportSelector接口的selectImports方法多了一个参数BeanDefinitionRegistry，用来注册一个BeanDefinition接口的实现类，该参数就是用来控制bean的属性的。\",\"public class MyRegistrar implements ImportBeanDefinitionRegistrar { @Override public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry) { //1. AnnotationMetadata用来进行元数据的判断 //2. BeanDefinitionRegistry用来进行bean属性的控制 //2.1 创建BeanDefinition对象的方式有很多，下面只是其中的一种 BeanDefinition beanDefinition = BeanDefinitionBuilder.rootBeanDefinition(BookServiceImpl2.class) .getBeanDefinition(); //2.2 有了BeanDefinition对象，就可以配置bean的各种属性了，比如单例 beanDefinition.setScope(); //2.2 注册BeanDefinition对象，此时bean也被注册了 registry.registerBeanDefinition(\\\"bookService\\\",beanDefinition); } } \"]},\"528\":{\"h\":\"3.2 加载bean\",\"t\":[\"现在可以创建Spring配置对象，@import MyRegistrar，为 ImportBeanDefinitionRegistrar的实现类提供元数据，并加载该bean。\",\"package com.sgugo.config; @Import(MyRegistrar.class) public class SpringConfig2{ } \"]},\"529\":{\"h\":\"4. BeanDefinitionRegistryPostProcessor\",\"t\":[\"上述所有创建Bean的方式，都是在容器初始化过程中进行bean的加载或者声明的，可能会产生冲突bug，一个bean被多种方式定义，参数了冲突。\",\"Bean的加载是有顺序的，虽然最终还是会加载一个Bean，但可能不是自己预想的bean，尤其是多人协作开发时。\",\"BeanDefinitionRegistryPostProcessor接口（后置注册处理器）就是用来做最终的裁决的，他会在所有Bean注册完毕后运行。\"]},\"530\":{\"h\":\"4.1 实现BeanDefinitionRegistryPostProcessor接口\",\"t\":[\"public class MyPostProcessor implements BeanDefinitionRegistryPostProcessor { @Override public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) throws BeansException { BeanDefinition beanDefinition = BeanDefinitionBuilder.rootBeanDefinition(BookServiceImpl4.class).getBeanDefinition(); registry.registerBeanDefinition(\\\"bookService\\\",beanDefinition); } } \"]},\"531\":{\"h\":\"4.2 用途\",\"t\":[\"该接口是个保障型的接口，可以用来替换默认配置。比如第三方框架提供了默认配置的Bean。而这个Bean并不符合期望，然后就在配置文件中做一些配置，框架读取配置后，用配置信息重新注册了一个Bean，覆盖默认的Bean。\"]},\"532\":{\"h\":\"6-2. bean加载控制\",\"t\":[\"那些Bean要被加载\",\"虽然一般人立马想到了加载所有Bean，但企业级开发中不可能在spring容器中进行bean的饱和式加载的（饱和式加载，就是不管用不用，全部加载）。\",\"虽然开发时自定义的bean不是很多，但JDK中就有两万个类，加载两万个bean，显然是不合理的，因为大部分类根本就用不到。\"]},\"533\":{\"h\":\"对加载Bean进行控制\",\"t\":[\"合理的加载Bean的方式，应该是用到哪个就加载哪个。也就是web项目提供服务时，调用了哪个类就加载对应的Bean。\"]},\"534\":{\"h\":\"编程式控制\",\"t\":[\"编程式注册bean里四种注册Bean的方式，都可以实现对Bean加载的控制，这种控制方式就是编程式Bean加载控制。\"]},\"535\":{\"h\":\"1. 四种编程式注册Bean的方式\",\"t\":[\"AnnotationConfigApplicationContext.register：动态注册\",\"@Import导入ImportSelector：通过判断元数据控制加载\",\"@Import导入ImportBeanDefinitionRegistrar：通过判断元数据控制加载，且能定义Bean的属性\",\"@Import导入BeanDefinitionRegistryPostProcessor：对Bean的加载进行最终裁决\"]},\"536\":{\"h\":\"2. 示例\",\"t\":[\"判断当前环境中是否有名为Mouse的Bean，若有就加载名为Cat的Bean\",\"这里采用ImportSelector接口的方式控制\",\"public class MyImportSelector implements ImportSelector { @Override public String[] selectImports(AnnotationMetadata importingClassMetadata) { try { Class<?> clazz = Class.forName(\\\"com.sgugo.bean.Mouse\\\"); if(clazz != null) { return new String[]{\\\"com.sgugo.bean.Cat\\\"}; } } catch (ClassNotFoundException e) { return new String[0]; } return null; } } \"]},\"537\":{\"h\":\"3. 总结\",\"t\":[\"根据条件加载Bean是企业级开发中的场景操作，但上面的写法太复杂了，于是Spring和Spring Boot提供了更好的解决方案：注解式Bean加载控制。\"]},\"538\":{\"h\":\"注解式控制\"},\"539\":{\"h\":\"@Conditional\",\"t\":[\"Spring提供了@Conditional注解，用来进行Bean的加载控制，不过该注解依然需要手写实现接口定义规则，还是很麻烦。\",\"于是，Spring Boot提供了大量@Conditional的派生注解，来组合各种条件。实现仅通过注解就能控制bean的加载。\"]},\"540\":{\"h\":\"1. 通过容器中是否存在某个类来控制加载\",\"t\":[\"@ConditionalOnClass(name=\\\"全类名\\\")：若参数中的类在环境中存在，就执行下方代码\",\"@ConditionalOnMissingClass(\\\"全类名\\\")：若参数中的类在环境中不存在，就执行下方代码\",\"public class SpringConfig{ @Bean @ConditionalOnClass(name = \\\"com.sgugo.bean.Wolf\\\") public Cat tom(){ return new Cat(); } @Bean //返回的对象被加入到了bean @ConditionalOnMissingClass(\\\"com.sgugo.bean.Dog\\\") public Cat tom(){ return new Cat(); } } \"]},\"541\":{\"h\":\"2. 通过容器中是否存在某个Bean来控制加载\",\"t\":[\"@ConditionalOnBean(各种表示Bean的类型)：若环境中有参数指定的Bean，就执行下方代码\",\"public class SpringConfig{ @Bean @ConditionalOnBean(name=\\\"jery\\\") //可以是全类名，也可以是具体的bean名称 @ConditionalOnMissingClass(\\\"com.sgugo.bean.Dog\\\") //可以组合多个条件 public Cat tom(){ return new Cat(); } } \"]},\"542\":{\"h\":\"3. 其他条件\",\"t\":[\"有十几种注解，可以控制各种条件，也可以将他们组合起来形成组合条件。这里就不一一列举了，最常用的判定条件就是根据类是否加载来进行控制。\"]},\"543\":{\"h\":\"4. 真实案例\",\"t\":[\"判定当前是否加载了mysql的驱动类，如果加载了，我就给你搞一个Druid的数据源对象出来。\",\"public class SpringConfig { @Bean @ConditionalOnClass(name=\\\"com.mysql.jdbc.Driver\\\") public DruidDataSource dataSource(){ return new DruidDataSource(); } } \"]},\"544\":{\"h\":\"读取yml文件\",\"t\":[\"bean在运行的时候，实现对应的业务逻辑时有可能需要开发者提供一些设置值（也就是属性了）。如果使用构造方法就不太灵活了，使用配置文件是个比较好的方案。使用Bean的时候，可以直接去yml文件里读取配置，然后对Bean进行属性设置。\"]},\"545\":{\"h\":\"1. @ConfigurationProperties\",\"t\":[\"先提前了解@ConfigurationProperties注解的用法，他是专门用来读取配置文件的。\",\"在 SpringBoot 中，当想需要获取到配置文件数据时，除了可以用 Spring 自带的@Value 注解外，SpringBoot 还提供了一种更加方便的方式：@ConfigurationProperties。\",\"只要在 Bean 上添加上了这个注解，指定好配置文件的前缀，那么对应的配置文件数据就会自动填充到 Bean 中，注意当前类一定要注册到Bean。\",\"配置文件可以是properties也可以是yml，这没有影响，只要是SpringBoot的配置文件就行。\"]},\"546\":{\"h\":\"如下所示\",\"t\":[\"application.yml: 设置配置文件\",\"check: user: username: \\\"Jinno\\\" password: \\\"123345\\\" status: 0 \",\"CheckUser.java：使用配置文件\",\"@Component //必须注册到Bean，不能是普通的类 @Data //设置Getter和Setter @ConfigurationProperties(prefix=\\\"check\\\") //前缀为check的配置已经被载入 public class CheckUser{ private User user; //check.user自动赋值给User对象 private Integer status; //check.status自动赋值给User对象 } \"]},\"547\":{\"h\":\"2. 通过配置文件为Bean提供属性\",\"t\":[\"创建Bean时，读取配置文件，为Bean提供一些属性，使Bean的创建更灵活。\"]},\"548\":{\"h\":\"2.1 设置配置文件\",\"t\":[\"carton: cat: name: \\\"Tom\\\" age: 4 mouse: name: \\\"Jerry\\\" age: 3 \"]},\"549\":{\"h\":\"2.2 相关的Bean\",\"t\":[\"有两个类注册了Bean，用于测试：Dog和Cat\",\"@Component @Data public class Cat{ private String name; private Integer age; } ================================= @Component @Data public class Mouse{ private String name; private Integer age; } \"]},\"550\":{\"h\":\"2.3 使用Bean时读取配置文件\",\"t\":[\"创建一个类使用上面两个Bean，并通过配置文件为Bean提供属性\",\"@Component @Data //通过getter和setter为两个类赋值，值游下面的注解提供 @ConfigurationProperties(prefix=\\\"cartoon\\\") public class CartoonCatAndMouse{ private Cat cat; private Mouse mouse; public void play(){ //这里要获取cat和mouse对象的属性，就需要初始化两个对象。 //可以手动进行创建对象并初始化，只是这样不够灵活，属性是斜视。 //因此可以选择从配置文件中读取两个类的配置，并返回初始化后的bean System.out.println(cat.getAge()+\\\"岁的\\\"+cat.getName()+\\\"和\\\" +mouse.getAge()+\\\"岁的\\\"+mouse.getName()) } } \"]},\"551\":{\"h\":\"2.4 初始化异常\",\"t\":[\"上面的Cat类和Mouse类创建对象时用的是配置文件提供的属性初始化的。如果此时配置文件不提供属性，那这两个类就无法创建对象，那么cat.getAge()等方法的调用都会报空指针异常。\",\"且此时CartoonCatAndMouse类与cartoon下的配置绑死了，配置文件不提供配置的话，该类就完全不可用了。\"]},\"552\":{\"h\":\"3. 封装用于读取配置文件的类\",\"t\":[\"为了解决上述方式产生的初始化异常，出现了一种全新的解决方案，封装一个读取配置文件的专属类。\"]},\"553\":{\"h\":\"3.1 定义读取属性的类\",\"t\":[\"定义一个类，加载配置文件，读取对应前缀相关的属性值\",\"//读取配置文件，并设置要读取的配置的前缀 @ConfigurationProperties(prefix=\\\"cartoon\\\") //此时配置文件中carton开头的配置已经全部装载进来了。 @Data @Component //该类必须注册为Bean，才能加载配置文件 public class CartoonProperties { private Cat cat; private Mouse mouse; } \"]},\"554\":{\"h\":\"3.2 使用 配置读取类 获取配置\",\"t\":[\"在需要使用配置的地方，注入配置读取类\",\"// 注册CartoonProperties对象 @EnableConfigurationProperties(CartoonProperties.class) @Data //该类没有注册我bean,而是使用时再通过@import动态声明为bean public class CartoonCatAndMouse{ @Autowired //CartoonProperties已经注册到容器里了，这里直接注入他 private CartoonProperties cartoonProperties; // 为了避免再次出现初始化异常，这里通过三目运算：在获取配置时设置默认值 // 定义一个构造函数用来进行初始化 public CartoonCatAndMouse(CartoonProperties){ this.cartoonProperties = cartoonProperties; cat = new Cat(); cat.setName(cartoonProperties.getCat()!=null &&StringUtils.hasText(cartoonProperties.getCat().getName())?cartoonProperties.getCat().getName():\\\"tom\\\"); cat.setAge(cartoonProperties.getCat()!=null &&StringUtils.hasText(cartoonProperties.getCat().getAge())?cartoonProperties.getCat().getAge():3); mouse = new Mouse(); ....//同上 public void play(){ System.out.println(cat.getAge()+\\\"岁的\\\"+cat.getName()+\\\"和\\\" +mouse.getAge()+\\\"岁的\\\"+mouse.getName()) } } } \",\"@EnableConfigurationProperties注解也是用来加载Bean的 \",\"同时CartoonProperties类可以不声明为Bean了（不用加@Component 注解）\",\"这种声明方式会在所修饰的类被使用时加载bean，不使用时不加载，减少spring管控的资源数量。\"]},\"555\":{\"h\":\"3.3 使用CartoonCatAndMouse类\",\"t\":[\"这里直接在SpringBoot启动类中调用CartoonCatAndMouse类，用以测试。\",\"@SpringBootApplication @Import(CartoonCatAndMouse.class) //导入类，声明为bean public class App{ public static void main(String[] args){ ConfigurableApplicationContext ctx = SpringApplication.run(App.class); CartoonCatAndMouse bean = ctx.getBean(CartoonCatAndMouse.class); bean.play(); } } \"]},\"556\":{\"h\":\"4. 总结\",\"t\":[\"需要的功能是：加载Bean时，可以通过配置文件设置他的属性，若配置文件中没有设置对应的值，就采用默认值（实际开发中，对于必须给值的属性，配置文件中没值可以直接抛出异常，比如数据库连接）。\",\"application.yml：再配置文件中为bean配置一些属性（属性值要与Bean的属性值对应） \",\"通过@ConfigurationProperties读取配置文件的属性\",\"Bean属性读取类：设置一个专门的类为需要自定义的Bean读取配置文件的属性\",\"使用Bean：再使用Bean的类中加载Bean属性读取类，为创建的类设置属性 \",\"默认值：为了防止yml中没有配置属性值，可以再加载配置文件的属性前先进行判断，若没有给值，就设置一个默认值。\",\"实现的效果：通过配置文件控制了Bean加载的初始化，同时也可以给Bean初始化设置默认的配置（这就是yml配置文件的工作原理）。\"]},\"557\":{\"h\":\"6-3. 自动配置\",\"t\":[\"说明\",\"自动装配是非常底层的技术，内容既多又复杂，需要花大量时间整理和理解，这里暂时不做深入的研究了。等以后又空闲时间再从Spring开始，慢慢总结。\"]},\"558\":{\"h\":\"自动配置介绍\",\"t\":[\"自动配置：简单说就是springboot根据我们开发者的行为猜测你要做什么事情，然后把你要用的bean都给你准备好，同时在配置文件中提供了很多配置项。\"]},\"559\":{\"h\":\"SpringBoot做了什么\",\"t\":[\"通过你编码中导入的类，就知道你有可能需要的Bean，于是就把这些Bean提前加载好了，这些Bean可以直接用了，不用再手动的加载Bean，加快了开发速度。\",\"之前通过各种方式加载Bean的做法，都不用做了，Spring配置文件，各种动态加载Bean的注解也完全不用写了，SprigBoot都帮我们做好了，这很酷。\"]},\"560\":{\"h\":\"参数的定义\",\"t\":[\"很多Bean是需要手动提供参数才能正确加载的，SpringBoot如何处理这些类呢？\",\"答案就是 Application.yml配置文件，比如数据库连接，你就需要在yml配置中根据SpringBoot预定义好的属性名提供值，Spring Boot会自动加载他们。\",\"SpringBoot 对几乎所有常用的基数都提供了预定义属性名以及设置了通用的属性值，他会根据pom中导入的包加载，IDEA也会有提示。\"]},\"561\":{\"h\":\"手动操作\",\"t\":[\"对于特殊操作和冷门技术，SpringBoot没有整合方案，就需要通过手动创建配置类，手动进行配置和加载了。\"]},\"562\":{\"h\":\"SpringBoot工作原理\",\"t\":[\"疑问？\",\"SpringBoot是如何知道那些具体的Bean要加载，那些属性要配置？既SpringBoot自动配置是如何具体操作的？\",\"step 1->收集Spring开发者的编程习惯，整理开发过程使用的常用技术列表——>(技术集A)\",\"step 2->收集常用技术(技术集A)的使用参数，整理开发过程中每个技术的常用设置列表——>(设置集B)\",\"step 3->初始化SpringBoot基础环境，加载用户自定义的bean和导入的其他坐标，形成初始化环境\",\"step 4->将技术集A包含的所有技术都定义出来，在Spring/SpringBoot启动时默认全部加载\",\"step 5->将技术集A中具有使用条件的技术约定出来，设置成按条件加载，由开发者决定是否使用该技术（与初始化环境比对）\",\"step 6->将设置集B作为默认配置加载（约定大于配置），减少开发者配置工作量\",\"step 7->开放设置集B的配置覆盖接口，由开发者根据自身需要决定是否覆盖默认配置\"]},\"563\":{\"h\":\"@SpringBootApplication\",\"t\":[\"SpringBoot运行是从启动类的main方法开始的，而启动类是由@SpringBoot注解修饰的。\",\"@SpringBoot是个组合注解，底层是三个注解，他的嵌套结构如下：\",\"@SpringBootConfiguration \",\"@Configuration(@Component)\",\"@Indexed\",\"@EnableAutoConfiguration \",\"@AutoConfigurationPackage \",\"@Import(AutoConfigurationPackages.Registrar.class)\",\"@Import(AutoConfigurationImportSelector.class)\",\"@ComponentScan：(excludeFilters = { @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),@Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })\"]},\"564\":{\"h\":\"1. @SpringBootConfiguration\",\"t\":[\"该注解又包含两个注解，\",\"@Configuration：其实就是@Component\",\"@Indexed：该注解是用来加速启动的，比如将需要启动的包存入一个文件，然后加载这个文件。\"]},\"565\":{\"h\":\"2. @EnableAutoConfiguration\",\"t\":[\"该注解也是由两部分组成，都是用来@import Bean的。\"]},\"566\":{\"h\":\"2.1 @AutoConfigurationPackage\",\"t\":[\"该注解内部还嵌套了一个@Import注解@Import(AutoConfigurationPackages.Registrar.class)。导入的类底层实现了ImportBeanDefinitionRegistrar接口，用来编程式加载Bean，并对Bean进行初始化。\",\"该类获取了当前启动类所在包路径，作为要扫描的包，后续要针对当前的包进行扫描，这个包里面其实就是开发者手写的类。\"]},\"567\":{\"h\":\"2.2 @Import(AutoConfigurationImportSelector.class)\",\"t\":[\"该注解引入了AutoConfigurationImportSelector.class类，该类实现了6个接口，这些接口可以分为三类，都是Bean生命周期里的接口。\",\"DeferredImportSelector：存放延迟加载类。继承自ImportSelector，是ImportSelector接口的扩展 （ImportSelector是将selectImports方法返回的字符串数组，注册成为Bean）。\",\"该类承担了自动装配的任务，他逻辑代码是在process方法中执行的，在他之前的代码中已经将@componentScans、@propertySource、@Bean等注解解析完了。\",\"该接口的的主要作用：与AutoConfigurationImportSelector的作用类似，调用AutoConfigurationImportSelector 的某些方法来确定要导入哪些自动装配的配置类，由selectImports方法来返回这些类。在应用程序初始化阶段不导入所有配置，而是在需要时才导入额外的配置。\",\"应用：当需要根据不同的环境或配置选项加载额外的配置时，或在某些情况下懒惰加载配置以提高启动速度。还可以通过实现排序接口，在导入额外的配置时按照特定的顺序进行排序，以便确保额外的配置在正确的顺序中加载。\",\"spring.factories\",\"BeanClassLoaderAware, ResourceLoaderAware, BeanFactoryAware, EnvironmentAware：Aware类接口为 Spring 容器的核心接口，是一个具有标识作用的超级接口，实现了该接口的 bean 是具有被 Spring 容器通知的能力，通知的方式是采用回调的方式。\",\"意义：Spring 容器在初始化时主动检测当前 bean 是否实现了 Aware 接口，如果实现了则回调其 set 方法将相应的参数设置给该 bean ，这个时候该 bean 就从 Spring 容器中取得相应的资源\",\"怎么做的：太复杂，略\",\"Ordered：指定当前类在Spring容器中的加载顺序（优先级）。\"]},\"568\":{\"h\":\"3. @ComponentScan\",\"t\":[\"该注解是用来扫描Bean的。\",\"excludeFilters = { // 磁盘扫描过滤器，定义过滤规则：按类型排除性的过滤器 @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class), // 磁盘扫描过滤器，定义过滤规则：自动配置排除过滤器 @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) } \"]},\"569\":{\"h\":\"6-4. 自定义starter\",\"t\":[\"说明\",\"自定义starter要用到用到自动装配的技术。\",\"Spring源码还不是很连接。\",\"TBD\"]},\"570\":{\"h\":\"6-5. 框架运行\",\"t\":[\"说明\",\"SpringBoot 是用来加快Spring程序开发的，核心还是Spring。\",\"Spring源码还不是了解。\",\"TBD\"]},\"571\":{\"h\":\"6.底层原理\",\"t\":[\"相关信息\",\"TBD\"]},\"572\":{\"h\":\"x-1. 项目初始化\",\"t\":[\"内容说明\",\"开发SpringBoot项目的一些通用操作。\"]},\"573\":{\"h\":\"Ⅰ. 配置IDEA和GIT\",\"t\":[\"提示\",\"以下操作和IDEA的版本相关，当前版本为：2021.3\"]},\"574\":{\"h\":\"1. Maven配置\",\"t\":[\"不采用IDEA内置的Maven，内置的Maven不方便修改配置，这里采用自己下载的Maven。\",\"Maven的版本要与SpringCloud与SpringBoot兼容，同时要与IDEA兼容。\",\"一般采用IDEA内置Maven的版本进行下载\",\"在IDEA中，替换手动下载的Maven、setting.xml和本地库。 设置位置：Build,Execution,Deployment > Build Tools > Maven\",\"x-1-1\",\"一般也会设置跳过Maven单元测试\",\"x-1-2\"]},\"575\":{\"h\":\"2. 字符编码\",\"t\":[\"将整个IDEA全部改为UTF-8编码（三个地方）。\",\"x-1-3\"]},\"576\":{\"h\":\"3. 隐藏非必要文件\",\"t\":[\"如：idea、iml等。\",\"x-1-4\"]},\"577\":{\"h\":\"4. 开启热部署\",\"t\":[\"设置位置：Build,Execution,Deployment->Compiler 配置完后重启IDEA。\",\"x-1-5\"]},\"578\":{\"h\":\"5. 配置.gitignore\",\"t\":[\"在项目的根目录添加.gitignore文件。\",\"# IntelliJ IDEA # .idea/ /.idea/ */.idea/ *.iws *.iml *.ipr # Eclipse Project files .classpath .project /.settings/ .settings/ # Java class files *.class # Generated files */bin/ */gen/ */out/ ### user ### target/ /target/ /src/logs/ #*.zip sdkTest.log #some local files */.DS_Store .DS_Store gradlew gradlew.bat unused.txt \"]},\"579\":{\"h\":\"Ⅱ. 创建工程\"},\"580\":{\"h\":\"1. new project\",\"t\":[\"以Spring Initializr的方式创建工程。\",\"1-2-1\"]},\"581\":{\"h\":\"2. 配置工程\",\"t\":[\"选择合适的Spring Boot版本和需要直接安装的组件（可以只选版本，组件后面再安装）。\",\"1-2-2\"]},\"582\":{\"h\":\"3. 添加依赖\",\"t\":[\"根据项目需求添加依赖和插件。\"]},\"583\":{\"h\":\"4. 配置yml\",\"t\":[\"删除application.properties，创建application.yml，并进行基本的application配置\",\"如果是多环境，需要创建dev、test、pro多个配置文件\"]},\"584\":{\"h\":\"5. 初始化\"},\"585\":{\"h\":\"Ⅲ. 准备工作\"},\"586\":{\"h\":\"1. 准备工作顺序\",\"t\":[\"前提：开发环境（框架）已经搭建好了，数据库也创建好了，依赖和插件等都准备好了。\",\"连接数据库：IDEA连接数据库\",\"完善目录\",\"创建所有配置：resources/application.yml\",\"利用MyBatis-plus逆向生成代码\",\"将所需的所有工具类和插件搭建\",\"利用启动类启动服务\",\"写业务代码\"]},\"587\":{\"h\":\"2. 常用工具类\",\"t\":[\"统一响应格式\",\"配置Swagger\"]},\"588\":{\"h\":\"3. 代码生成\",\"t\":[\"使用MyBatis X插件，利用MyBatisPlus生成代码\",\"配置数据源：在IDEA右边选择DataBase，连接数据库\",\"生成代码：数据源中选择目标数据表，右键：选择第一个选项MyBatis-Generator\",\"配置代码模板：可以对将要生成的代码的模板进行配置，可配置项非常多\",\"x-1-6\",\"x-1-7\"]},\"589\":{\"h\":\"Ⅳ. 目录规范\",\"t\":[\"根据以下规范，按需创建目录\",\"blog [cc.cybercell]> src > main > java > cc.cybercell.blog ├── common: 公共类 ├── config: 配置 ├── controller: 控制器（API） ├── entity: 实体类（也可命名为domain或pojo） ├── filter: 拦截器 ├── mapper: MyBatis Plus的mapper ├── service: 服务层接口 ├── impl: 服务层接口实现类 ├── utils: 工具 ├── BlogApplication.java :启动类 blog [cc.cybercell]> src > main > java > resources ├── application.yml ├── application-dev.yml ├── application-prod.yml \"]},\"590\":{\"h\":\"x-2. 依赖列表\",\"t\":[\"核心版本\",\"更新时间：2023-4-27，版本可以直接复制，不用更改。\",\"SpringBoot： 2.7.9\",\"Java：17 PS：下次更新，就是SpringBoot3了。\"]},\"591\":{\"h\":\"Ⅰ. SpringBoot 组件\",\"t\":[\"SpringBoot内置的组件。\"]},\"592\":{\"h\":\"1. SpringBoot\",\"t\":[\"spring-boot-starter依赖。 spring-boot-starter-web依赖包含了该依赖，一般不用添加。\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter</artifactId> </dependency> \"]},\"593\":{\"h\":\"2. SpringMvc\",\"t\":[\"spring-boot-starter-web依赖。\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> \"]},\"594\":{\"h\":\"3. Junit 测试依赖\",\"t\":[\"spring-boot-starter-test依赖。\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> \"]},\"595\":{\"h\":\"4. actuator监控\",\"t\":[\"spring-boot-starter-actuator依赖。\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-actuator</artifactId> </dependency> \"]},\"596\":{\"h\":\"Ⅱ. SQL\"},\"597\":{\"h\":\"1. MySQL\",\"t\":[\"JDBC依赖，需要手动指定版本。\",\"<dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <scope>runtime</scope> <version>8.0.16</version> </dependency> \"]},\"598\":{\"h\":\"2. Druid\",\"t\":[\"Druid连接池依赖，需要手动指定版本。\",\"<dependency> <groupId>com.alibaba</groupId> <artifactId>druid-spring-boot-starter</artifactId> <version>1.2.16</version> </dependency> \"]},\"599\":{\"h\":\"3. MyBatis\",\"t\":[\"MyBatis依赖，需要手动指定版本，和MyBatis Plus 只能存在一个。\",\"<dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis</artifactId> <version>3.5.7</version> </dependency> \"]},\"600\":{\"h\":\"4. MyBatis Plus\",\"t\":[\"mybatisplus依赖，需要手动指定版本。 mybatis plus包含了mybatis，不要再引入mybatis了，以免版本冲突。\",\"<dependency> <groupId>com.baomidou</groupId> <artifactId>mybatis-plus-boot-starter</artifactId> <version>3.5.2</version> </dependency> \"]},\"601\":{\"h\":\"Ⅲ. NoSQL\"},\"602\":{\"h\":\"1. Redis\",\"t\":[\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-redis</artifactId> <dependency> \"]},\"603\":{\"h\":\"Ⅳ. 消息与缓存\"},\"604\":{\"h\":\"1. Rabbitmq\",\"t\":[\"消息队列RabbitMQ依赖。\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-amqp</artifactId> </dependency> \"]},\"605\":{\"h\":\"Ⅴ. 工具\"},\"606\":{\"h\":\"1. lombok\",\"t\":[\"<dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <optional>true</optional> </dependency> \"]},\"607\":{\"h\":\"2. swagger\",\"t\":[\"需要手动指定版本。\",\"<dependency> <groupId>io.springfox</groupId> <artifactId>springfox-boot-starter</artifactId> <version>3.0.0</version> </dependency> \"]},\"608\":{\"h\":\"3. sprint-boot-devtool\",\"t\":[\"用于开启热部署，需要Maven设置支持。\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <scope>runtime</scope> <optional>true</optional> </dependency> \"]},\"609\":{\"h\":\"4. fastjson\",\"t\":[\"<dependency> <groupId>com.alibaba</groupId> <artifactId>fastjson</artifactId> <version>1.2.76</version> </dependency> \"]},\"610\":{\"h\":\"Ⅵ. 第三方API\"},\"611\":{\"h\":\"1. 阿里云短信服务\",\"t\":[\"<dependency> <groupId>com.aliyun</groupId> <artifactId>aliyun-java-sdk-core</artifactId> <version>4.5.16</version> </dependency> <dependency> <groupId>com.aliyun</groupId> <artifactId>aliyun-java-sdk-dysmsapi</artifactId> <version>2.1.0</version> </dependency> \"]},\"612\":{\"h\":\"Ω. pom.xml示例\",\"t\":[\"说明\",\"仅包含了常用的依赖，可以直接复制使用，对于不常用的依赖，自己手动添加。\",\"包含了properties部分dependencies部分和build部分。\",\"<properties> <java.version>17</java.version> <mysql.version>8.0.16</mysql.version> <druid.version>1.2.16</druid.version> <mybatis.plus.version>3.5.2</mybatis.plus.version> <swagger.version>3.0.0</swagger.version> </properties> <dependencies> <!-- ========================================================= --> <!-- ==================== SpringBoot 组件 ==================== --> <!-- ========================================================= --> <!--Spring:springmvc--> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <!--Spring:test--> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> <!--Spring:图形化处理--> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-actuator</artifactId> </dependency> <!-- ========================================================= --> <!-- ======================== SQL相关 ======================== --> <!-- ========================================================= --> <!--mysql--> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <scope>runtime</scope> <version>${mysql.version}</version> </dependency> <!--druid--> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid-spring-boot-starter</artifactId> <version>${druid.version}</version> </dependency> <!--mybatis-plus--> <dependency> <groupId>com.baomidou</groupId> <artifactId>mybatis-plus-boot-starter</artifactId> <version>${mybatis.plus.version}</version> </dependency> <!-- ========================================================= --> <!-- ==================== NoSQL、缓存、消息 =================== --> <!-- ========================================================= --> <!-- Redis --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-redis</artifactId> <dependency> <!-- RabbitMQ --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-amqp</artifactId> </dependency> <!-- ========================================================= --> <!-- ========================== 工具 ========================= --> <!-- ========================================================= --> <!--lombok--> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <optional>true</optional> </dependency> <!--swagger3--> <dependency> <groupId>io.springfox</groupId> <artifactId>springfox-boot-starter</artifactId> <version>${swagger.version}</version> </dependency> <!--开启热部署--> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <optional>true</optional> </dependency> <!-- ========================================================= --> <!-- ======================= 第三方API ======================= --> <!-- ========================================================= --> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <version>2.7.9</version> </plugin> </plugins> </build> \"]},\"613\":{\"h\":\"x-3. 项目开发规范\",\"t\":[\"相关信息\",\"TBD\"]},\"614\":{\"h\":\"x-4. SSM开发案例\",\"t\":[\"提示\",\"需要前置知识：\",\"集成MySQL\",\"集成MyBatisPlus\",\"通过一个案例了解使用SpringBoot开发项目的过程。\",\"要开发的内容\",\"实体类开发————使用Lombok快速制作实体类\",\"Dao开发————整合MyBatisPlus，制作数据层测试\",\"Service开发————基于MyBatisPlus进行增量开发，制作业务层测试类\",\"Controller开发————基于Restful开发，使用PostMan测试接口功能\",\"Controller开发————前后端开发协议制作\",\"页面开发————基于VUE+ElementUI制作，前后端联调，页面数据处理，页面消息处理 \",\"列表、新增、修改、删除、分页、查询\",\"项目异常处理\",\"按条件查询————页面功能调整、Controller修正功能、Service修正功能\",\"架构 前端(浏览器)->前端服务器->后端服务器（分布式）。 本次案例仅考虑浏览器向服务器发送请求接受响应，不考虑前端服务器。\"]},\"615\":{\"h\":\"1. 初始化\"},\"616\":{\"h\":\"1.1 创建模块\",\"t\":[\"依赖：Spring Web；MySQL Driver；MyBatis-Plus；Druid；\",\"目录优化 \",\"启动类文件名改为：Application.java，简洁一些。\",\"配置文件后缀改为yml\"]},\"617\":{\"h\":\"1.2 配置文件\",\"t\":[\"配置端口号、Druid的连接信息、mybatis-plus的常用设置。\",\"erver: port: 80 spring: datasource: druid: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC username: root password: root mybatis-plus: global-config: db-config: table-prefix: tbl_ \"]},\"618\":{\"h\":\"1.3 创建数据表Book\",\"t\":[\"结构：id(int)；type(varchar)；name(varchar)； desription(varchar)\"]},\"619\":{\"h\":\"2. 实体类\",\"t\":[\"根据要操作的数据表创建实体类。 实体类包名：domain( or entity)。\",\"@Data public class Book { private Integer id; private String type; private String name; private String description; } \"]},\"620\":{\"h\":\"2.1 lombok\",\"t\":[\"实体类需要手动生成get/set方法，创建toString等，非常麻烦。可以使用一个工具：lombok，该java类库提供了一些注解可以简化实体类的开发。\",\"@Data注解：自动添加getter、setter、toString、equals、hashCode\",\"@AllArgsContructor：全参构造方法；\",\"@NoArgsContructor：无参构造方法。\",\"<dependencies> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> </dependency> </dependencies> \"]},\"621\":{\"h\":\"3. Dao：基本CURD\",\"t\":[\"基于：MyBatisPlus、Druid\"]},\"622\":{\"h\":\"3.1 Mapper 接口\",\"t\":[\"所在包：dao\",\"@Mapper //MyBatisPlus public interface BookDao extends BaseMapper<Book> { //实体类泛型 //这里什么都不用写，基本的CURDBaseMapper中都定义了 //可以点击BaseMapper查看具体有哪些API可以掉用，注释是中文的。 //如果有很个性化的需求，可以手动加，建议用注解的方式加SQL } \"]},\"623\":{\"h\":\"3.2 测试类（可选）\",\"t\":[\"@SpringBootTest //SpringBoot测试类 public class BookDaoTestCase { @Autowired //注入Mapper private BookDao bookDao; @Test //查询 void testGetById(){ System.out.println(bookDao.selectById(1)); } @Test //增加 void testSave(){ Book book = new Book(); book.setType(\\\"测试数据123\\\"); book.setName(\\\"测试数据123\\\"); book.setDescription(\\\"测试数据123\\\"); bookDao.insert(book); } @Test //Update void testUpdate(){ Book book = new Book(); book.setId(17); book.setType(\\\"测试数据abcdefg\\\"); book.setName(\\\"测试数据123\\\"); book.setDescription(\\\"测试数据123\\\"); bookDao.updateById(book); } @Test //delete void testDelete(){ bookDao.deleteById(16); } @Test //getAll void testGetAll(){ bookDao.selectList(null); } } \"]},\"624\":{\"h\":\"3.3 配置\",\"t\":[\"MyBatisPlus是采用雪花算法生成UUID作为id的，如果测试的时候想用int作为id，就需要额外的配置。\",\"基础的CRUD操作均由MyBatisPlus给我们提供，不需要再写SQL，如果想看SQL需要进行配置： \",\"不只是显示SQL，会显示所有跟SQL相关的操作（仅开发时才能开启）。\",\"mybatis-plus: global-config: db-config: table-prefix: tbl_ id-type: auto # 生成策略为参照数据库设定的策略 configuration: # 在配置文件里开启日志，设置日志输出方式为：标准输出 log-impl: org.apache.ibatis.logging.stdout.StdOutImpl \"]},\"625\":{\"h\":\"4. Dao：分页功能\",\"t\":[\"MyBatisPlus内部有分页操作相关的API，使用分页API需要通过拦截器实现。\"]},\"626\":{\"h\":\"4.1 拦截器\",\"t\":[\"创建包config，专门存放配置信息相关的类，创建MPconfig用来配置分页相关的拦截器：MybatisPlusInterceptor。\",\"@Configuration //设置为配置类(该注解会被启动类扫描) public class MPConfig { @Bean //管理第三方bean：将方法的返回值加入IOC容器 public MybatisPlusInterceptor mybatisPlusInterceptor(){ //定义MyBatisPlus拦截器（只是一个壳） MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor(); //添加具体的拦截器：PaginationInnerInterceptor（分页相关的拦截器） interceptor.addInnerInterceptor(new PaginationInnerInterceptor()); return interceptor;//返回拦截器 } } \"]},\"627\":{\"h\":\"4.2 IPage\",\"t\":[\"MyBatisPlus的IPage接口封装了所有与分页相关的信息和操作，实现类为Page。\",\"参数1：当前是第几页\",\"参数2：每页显示多少条数据\",\"Ipage page = new Page(1,5); //进行分页查询，要调用Mapper接口的selectPage方法,参数就是page对象 //返回的是依然是Ipage对象，此时该对象已经包含了各种信息 bookDao.selectPage(page,null); \"]},\"628\":{\"h\":\"4.3 Test\",\"t\":[\"@Test void testGetPage(){ IPage page = new Page(2,5); bookDao.selectPage(page, null); System.out.println(page.getCurrent());//获取当前页（从第几页开始查询） System.out.println(page.getSize());//获取每页显示的条数 System.out.println(page.getTotal());//获取总条数 System.out.println(page.getPages());//获取总页数 System.out.println(page.getRecords());//查询结果 } \"]},\"629\":{\"h\":\"5. Dao：条件查询\",\"t\":[\"MyBatisPlus将复杂的条件查询SQL都封装好了，使用时直接掉用API接口就行了。\"]},\"630\":{\"h\":\"5.1 QueryWrapper\",\"t\":[\"QueryWrapper类是用于封装查询条件的，接受一个实体类作为泛型。 该类包含了很多条件查询相关的方法，直接调用就可以拼接查询条件。\",\"QueryWrapper<Book> qw = new QueryWrapper<>(); \"]},\"631\":{\"h\":\"5.2 示例\",\"t\":[\"@Test void testGetBy(){ QueryWrapper<Book> qw = new QueryWrapper<>(); //设置条件：调用like方法，进行模糊查询，传入模糊查询的条件作为参数 qw.like(\\\"name\\\",\\\"Spring\\\"); bookDao.selectList(qw);//进行条件查询，QueryWrapper对象作为参数 } \"]},\"632\":{\"h\":\"5.3 LambdaQueryWrapper\",\"t\":[\"问题：查询条件的属性名是直接手写的字符串，如果写错了会发生异常。\",\"解决：支持Lambda表达式的条件查询API，有更好的提示，防止写错字段。\",\"@Test void testGetBy2(){ String name = \\\"1\\\"; LambdaQueryWrapper<Book> lqw = new LambdaQueryWrapper<Book>(); //通过实体类获取字段名，防止出错 lqw.like(Book::getName,name); bookDao.selectList(lqw); } \"]},\"633\":{\"h\":\"5.4 动态条件拼接\",\"t\":[\"问题：进行条件查询时，浏览器可能没有传递条件，即条件可能是null，null会被直接当做null字符串。\",\"解决：使用动态条件拼接，防止将null数据作为条件使用。\",\"@Test void testGetBy2(){ String name = \\\"1\\\"; LambdaQueryWrapper<Book> lqw = new LambdaQueryWrapper<Book>(); //if(name != null) lqw.like(Book::getName,name);//方式一：JAVA代码控制 lqw.like(name != null,Book::getName,name);//方式二：API接口提供控制开关 bookDao.selectList(lqw); } \"]},\"634\":{\"h\":\"6. Service：业务层\",\"t\":[\"提示\",\"注意区分业务层和数据层，dao层的方法名是比较直接的，直接与数据库字段和要进行的操作相关，而业务层的方法名就是要做的业务。\",\"创建包：service作为业务层接口，创建BookService作为业务接口\",\"创建包：service/impl作为业务层实现类，创建BookServiceImpl作为对应业务层接口的实现类\"]},\"635\":{\"h\":\"6.1 BookService：业务层接口\",\"t\":[\"public interface BookService { Boolean save(Book book); Boolean update(Book book); Boolean delete(Integer id); Book getById(Integer id); List<Book> getAll(); IPage<Book> getPage(int currentPage,int pageSize); } \"]},\"636\":{\"h\":\"6.2 BookServiceImpl：业务层实现类\",\"t\":[\"@Service public class BookServiceImpl extends ServiceImpl<BookDao, Book> implements IBookService { @Autowired private BookDao bookDao; @Override public boolean saveBook(Book book) { return bookDao.insert(book) > 0; } @Override public boolean modify(Book book) { return bookDao.updateById(book) > 0; } @Override public boolean delete(Integer id) { return bookDao.deleteById(id) > 0; } @Override public IPage<Book> getPage(int currentPage, int pageSize) { IPage page = new Page(currentPage,pageSize); bookDao.selectPage(page,null); return page; } @Override public IPage<Book> getPage(int currentPage, int pageSize, Book book) { LambdaQueryWrapper<Book> lqw = new LambdaQueryWrapper<Book>(); lqw.like(Strings.isNotEmpty(book.getType()),Book::getType,book.getType()); lqw.like(Strings.isNotEmpty(book.getName()),Book::getName,book.getName()); lqw.like(Strings.isNotEmpty(book.getDescription()),Book::getDescription,book.getDescription()); IPage page = new Page(currentPage,pageSize); bookDao.selectPage(page,lqw); return page; } } \"]},\"637\":{\"h\":\"6.3 MyBatisPlus：通用Service接口和通用Service实现类\",\"t\":[\"Service层也有很多通用的CURD方法，MyBatisPlus也对这些方法进行了封装。\",\"//Service层：继承IService<Book>类，并填写增强的实体类作为泛型 public interface IBookService extends IService<Book> { //添加非通用操作API接口 //可以继续添加非通用的API } //ServiceImpl层：继承的类需要传入两个泛型，一个是数据层接口，另一个是实体类。 @Service //IOC 管理 public class BookServiceImpl extends ServiceImpl<BookDao, Book> implements IBookService { @Autowired private BookDao bookDao; //添加非通用操作API，注意命名，不要覆盖掉原始操作 } \"]},\"638\":{\"h\":\"6.4 注意事项\",\"t\":[\"接口命名一般以I开头。 实际开发时，业务层必须进行Test测试。\"]},\"639\":{\"h\":\"7. Controller：表现层\",\"t\":[\"创建包：controller作为表现层，创建BookController类。\",\"表现层其实就是：servlet层，调用业务层获取数据，将数据响应给前端，并指定跳转的页面。\",\"API开发：如果做前后端分离的API开发，Controller只需要响应JSON格式数据即可。\"]},\"640\":{\"h\":\"7.1 Controller\",\"t\":[\"@RequestMapping(\\\"/books\\\") public class BookController2 { @Autowired private IBookService bookService; @GetMapping public List<Book> getAll(){ return bookService.list(); } @PostMapping public Boolean save(@RequestBody Book book){ return bookService.save(book); } @PutMapping public Boolean update(@RequestBody Book book){ return bookService.modify(book); } @DeleteMapping(\\\"{id}\\\") public Boolean delete(@PathVariable Integer id){ return bookService.delete(id); } @GetMapping(\\\"{id}\\\") public Book getById(@PathVariable Integer id){ return bookService.getById(id); } @GetMapping(\\\"{currentPage}/{pageSize}\\\") public IPage<Book> getPage( @PathVariable int currentPage,@PathVariable int pageSize){ return bookService.getPage(currentPage,pageSize, null); } \"]},\"641\":{\"h\":\"7.2 注解\",\"t\":[\"实体数据：@RequestBody\",\"路径变量：@PathVariable\"]},\"642\":{\"h\":\"7.3 测试接口\",\"t\":[\"使用Postman进行接口测试\"]},\"643\":{\"h\":\"8. 接口优化\",\"t\":[\"上述Controller响应的数据有一个问题，返回的数据类型未统一：有JSON数组、JSON对象、Boolean、INT，我们必须返回一致的数据类型让前端使用，即：表现层消息一致性处理。\"]},\"644\":{\"h\":\"8.1 响应数据设计：详见RESTful规范\",\"t\":[\"格式：统一为JSON对象\",\"{ \\\"code\\\":1, //响应状态码，提前规定好：比如1表示成功 \\\"message\\\":\\\"处理成功\\\", //响应信息 \\\"time\\\":12321654351,//接口响应的时间戳，用于安全 \\\"data\\\":[ //响应的数据 ,JSON数组格式(也可以是其他数据格式) { \\\"id\\\":10, \\\"uname\\\":\\\"Jinno\\\" },{ \\\"id\\\":12, \\\"uname\\\":\\\"Aaron\\\" } ] } \"]},\"645\":{\"h\":\"8.2 异常的统一处理\",\"t\":[\"在表现层做统一的异常处理，使用SpringMVC提供的异常处理器做统一的异常处理。 比如：将异常信息加入异常日志、发送消息给运维等。\",\"包：controller/utils，也将异常处理类放入utile包中。 只需要对controller层做异常处理即可，其他层的异常最终会抛到controller。\",\"//作为springmvc的异常处理器 @RestControllerAdvice public class ProjectExceptionAdvice { //拦截所有的异常信息 @ExceptionHandler(Exception.class) public R doException(Exception ex){ //记录日志 //通知运维 //通知开发 ex.printStackTrace(); return new R(\\\"服务器故障，请稍后再试！\\\"); } } \"]},\"646\":{\"h\":\"8.3 返回结果模型类\",\"t\":[\"将所有操作的操作结果数据格式统一起来，需要设计表现层返回结果的模型类，用于后端与前端进行数据格式统一，也称为前后端数据协议\",\"包：创建controller/utils包，专门存放工具类的，创建类R作为返回结果模型类。\",\"构造方法：根据不同的响应数据类型，设计多个构造方法\",\"异常处理：返回结果模型，不要漏掉了异常的信息\",\"@Data public class R { private Boolean flag;//操作是否成功 private Object data; //响应的具体数据 private String msg; //响应信息，如异常信息 public R(){} //空参构造方法 public R(Boolean flag){ //DML构造方法 this.flag = flag; } public R(Boolean flag,Object data){ //DQL构造方法 this.flag = flag; this.data = data; } public R(Boolean flag,String msg){ //带响应信息的构造方法 this.flag = flag; this.msg = msg; } public R(String msg){ //异常专用构造方法 this.flag = false; this.msg = msg; } } \"]},\"647\":{\"h\":\"8.4 使用结果模型类\",\"t\":[\"在Controller类中，将所有方法的返回值类型都修改为R，对所有的返回值都使用R对象进行包装。 返回定义好的JSON格式数据。\",\"@RestController @RequestMapping(\\\"/books\\\") public class BookController { @Autowired private IBookService bookService; @GetMapping public R getAll(){ return new R(true, bookService.list()); } @PostMapping public R save(@RequestBody Book book) throws IOException { if (book.getName().equals(\\\"123\\\") ) throw new IOException(); boolean flag = bookService.save(book); return new R(flag, flag ? \\\"添加成功^_^\\\" : \\\"添加失败-_-!\\\"); } @PutMapping public R update(@RequestBody Book book) throws IOException { if (book.getName().equals(\\\"123\\\") ) throw new IOException(); boolean flag = bookService.modify(book); return new R(flag, flag ? \\\"修改成功^_^\\\" : \\\"修改失败-_-!\\\"); } @DeleteMapping(\\\"{id}\\\") public R delete(@PathVariable Integer id){ return new R(bookService.delete(id)); } @GetMapping(\\\"{id}\\\") public R getById(@PathVariable Integer id){ return new R(true, bookService.getById(id)); } @GetMapping(\\\"{currentPage}/{pageSize}\\\") public R getPage (@PathVariable int currentPage,@PathVariable int pageSize,Book book){ IPage<Book> page = bookService.getPage(currentPage, pageSize,book); //如果当前页码值大于了总页码值，那么重新执行查询操作，使最大页码值作为当前页码值 if( currentPage > page.getPages()){ page = bookService.getPage((int)page.getPages(), pageSize,book); } return new R(true, page); } } \"]},\"648\":{\"h\":\"9. 前端页面设计\",\"t\":[\"实际开发时，都是前后端分离的，有专门的前端服务器（Nginx）。\",\"现在只是作测试，前端页面放到：resources目录下的static目录中。\",\"子目录为：css；js;pages；plugins;templates;\",\"技术栈：采用Vue和Axios。\",\"暂略。\"]},\"649\":{\"h\":\"1-1. String\",\"t\":[\"提示\",\"位置 class: Libraries=> java=> lang=> String.java\",\"创建String\",\"String s1 = \\\"javaEE\\\"; //字面量方式：常用,会存入字符串常量池 String s1 = new String(\\\"javaEE\\\"); //构造函数方式 \"]},\"650\":{\"h\":\"Ⅰ. 属性\"},\"651\":{\"h\":\"1. length\",\"t\":[\"返回字符串的长度，这里是字符长度，与编码无关。\",\"int length() ========================= String s1 = \\\"你OK\\\"; System.out.println(s1.length()); //3 \"]},\"652\":{\"h\":\"2. equals\",\"t\":[\"String类对equals进行重写，比较的是内容是否相同，而非内存地址。\",\"boolean equals(Object obj); ================================== String s1 = \\\"aa\\\"; String s2 = \\\"aa\\\"; boolean res1 = s1.equals(s2); String s3 = new String(\\\"aa\\\"); String s4 = new String(\\\"aa\\\"); boolean res2 = s3.equals(s4); System.out.println(res1); //true System.out.println(res2); //true \"]},\"653\":{\"h\":\"3. equalsIgnoreCase\",\"t\":[\"equals的不区分大小写版本。\",\"boolean equalsIgnoreCase(String anothrerString); ================================= String s1 = \\\"aa\\\"; String s2 = \\\"Aa\\\"; System.out.println(s1.equals(s2)); //false System.out.println(s1.equalsIgnoreCase(s2)); //true \"]},\"654\":{\"h\":\"Ⅱ. 获取\"},\"655\":{\"h\":\"1. charAt\",\"t\":[\"返回指定索引处的字符，如果查询的索引越界了就会报越界异常。\",\"char charAt(int index); ========================= String s2 = \\\"helloGoogle\\\"; System.out.println(s2.charAt(1));//e \"]},\"656\":{\"h\":\"2. indexOf\",\"t\":[\"返回指定字符串在此字符串中第一次出现的索引。\",\"第二个参数可选，表示从该索引处开始找；若未找到目标字符串，则返回-1；\",\"int indexOf(String str,int fromIndex); ========================================================== String s1 = \\\"hel elo\\\"; System.out.println(s1.indexOf(\\\"el\\\")); //1 System.out.println(s1.indexOf(\\\"el\\\",3)); //4 \"]},\"657\":{\"h\":\"3. lastIndexOf\",\"t\":[\"返回指定子字符串在此字符串中最后一次出现的索引，可以有第二个参数：formIndex，从该索引处反向搜索 该方法如果未找到，将返回-1；\",\"int lastIndexOf(String str,int fromIndex); ========================================================== String s1 = \\\"hel elo\\\"; System.out.println(s1.lastIndexOf(\\\"el\\\")); System.out.println(s1.lastIndexOf(\\\"el\\\",3)); \"]},\"658\":{\"h\":\"Ⅲ. 检测与比较\"},\"659\":{\"h\":\"1. isEmpty\",\"t\":[\"判断是否是空字符串，算法是：value.length==0\",\"boolean isEmpty(); =================================== String s3 = \\\" \\\";//空格不是空字符串 System.out.println(s3.isEmpty());//false \"]},\"660\":{\"h\":\"2. compareTo\",\"t\":[\"比较两个字符串的大小，算法：比较字符的ASCII，从第一个字符开始比较，相等就比较下一个。\",\"返回值：\",\"0：相当；\",\">0：左边的大；\",\"<0：右边的大。\",\"int compareTo(String anotherString); =================================== String s3 = \\\"ab\\\"; String s4 = \\\"ac\\\"; System.out.println(s3.compareTo(s4));//-1 \"]},\"661\":{\"h\":\"3. endsWith\",\"t\":[\"测试此字符串是否以指定的后缀结束。\",\"boolean endsWith(String suffix); ========================================================== String s1 = \\\"hello\\\"; System.out.println(s1.endsWith(\\\"lo\\\")); //true \"]},\"662\":{\"h\":\"4. startsWith\",\"t\":[\"测试此字符串是否以指定潜在开始，第二个参数toffset，可选，表示舍去前面N个字符后，开始比较。\",\"boolean startWith(String prefix,int toffset); ========================================================== String s1 = \\\"hello\\\"; System.out.println(s1.startsWith(\\\"ll\\\")); //false System.out.println(s1.startsWith(\\\"ll\\\",2)); //true \"]},\"663\":{\"h\":\"5. contains\",\"t\":[\"查询字符串是否包含某个字符串\",\"boolean contains(CharSequence s); //CharSequence可以看做字符串 ========================================================== String s1 = \\\"hello\\\"; System.out.println(s1.contains(\\\"ll\\\")); //true \"]},\"664\":{\"h\":\"Ⅳ. 修改\",\"t\":[\"String类有不可变性，这里的修改是新创建了个一个字符串并返回，而不是修改了源字符串。\"]},\"665\":{\"h\":\"1. tolowerCase\",\"t\":[\"将所有字符转为小写。\",\"注意：字符串本身没有改变，返回的是新的字符串。\",\"String toLowerCase(); ========================================================== String s1 = \\\"FUck YoU\\\"; String newS1 = s1.toLowerCase(); System.out.println(s1); //FUck YoU ,源字符串没有变化 System.out.println(newS1); //fuck you \"]},\"666\":{\"h\":\"2. toUpperCase\",\"t\":[\"将所有字符转为大写。\",\"String toUpperCase(); ========================================================== String s1 = \\\"FUck YoU\\\"; String newS1 = s1.toUpperCase(); System.out.println(s1); //FUck YoU System.out.println(newS1); //FUCK YOU \"]},\"667\":{\"h\":\"3. trim\",\"t\":[\"注意\",\"暂时没有找到只去除一边空白的方法。\",\"去除字符串首尾空白。\",\"String trim(); ========================================================== String s7 = \\\" ok,fuck you \\\"; System.out.println(s7.trim()); //ok,fuck you \"]},\"668\":{\"h\":\"4. concat\",\"t\":[\"连接字符串，等价于 \\\"+\\\"，将参数字符串连接到此字符串的结尾。\",\"String concat(String str); //参数可以是字符串或代表字符串的变量 ========================================================== String s1 = \\\"hello\\\"; String s2 = s1.concat(\\\" world\\\"); System.out.println(s2); //hello world \"]},\"669\":{\"h\":\"5. substring\",\"t\":[\"字符串截取。\",\"参数1：beginIndex：开始截取的字符串索引位置\",\"参数2：endIndex：字符串截取的end位置，可以省略第二个参数，默认是截取到末尾。\",\"String substring(int beginIndex,int endIndex); ========================================================== String s1 = \\\"love,dead and robot\\\"; String newS1 = s1.substring(1); String newS1_2 = s1.substring(5, 10); System.out.println(newS1); //ove,dead and robot System.out.println(newS1_2); //dead \"]},\"670\":{\"h\":\"Ⅴ. 类型转换\",\"t\":[\"包括：String转基本数据类型和基本数据类型转String\"]},\"671\":{\"h\":\"1. Xxx.parseXxx\",\"t\":[\"String转基本数据类型（包装类）。 转不同的数据类型，需要调用对应包装类的静态方法：parseXxx(str)。\",\"注意：char类型没有parseXxx方法；boolean类型的字符串只有true（不区分大小写）可以转为true，其他的都是false\",\"byte Byte.parseByte(String s); //String -> byte short Short.parseByte(String s); //String -> short int Integer.parseInt(String s); //String -> int long Long.parseLong(String s); //String -> long float Float.parseFloat(String s); //String -> float double Double.parseDouble(String s); //String -> double boolean Boolean.parseBoolean(String s); //String -> boolean ========================================================== String s1 = \\\"123\\\"; int intS1 = Integer.parseInt(s1); System.out.println(intS1); //123 \"]},\"672\":{\"h\":\"2. valueOf\",\"t\":[\"基本数据类型转String类型，也可以使用 + “” 取代。\",\"valueOf根据参数数据类型的不同，有多个重构方法。\",\"参数类型可以为：8种基本数据类型（包括包装类）、char[]\",\"string valueOf(int i); //参数可以是8种基本数据类型 string valueOf(char[] c); //参数可以是char[],转为string是将所有char连接在一起 string valueOf(Object obj);//参数也可以是引用数据类型 ========================================================== char[] arr = {'a','b','c'}; String s1 = String.valueOf(arr); System.out.println(s1);//abc \"]},\"673\":{\"h\":\"3. toCharArray\",\"t\":[\"将String转为char[]。\",\"char[] toCharArray(); ========================================================== String str = \\\"love dead & robots\\\"; char[] chars = str.toCharArray(); System.out.println(Arrays.toString(chars)); //[l, o, v, e, , d, e, a, d, , &, , r, o, b, o, t, s] \",\"char[]转String 通过String的一个特殊构造器，可以将char[]转为String。\",\"char[] arr = {'a','b','c'}; String s = new String(arr);//构造函数的参数可以是一个char[]类型的数组 System.out.println(s); \"]},\"674\":{\"h\":\"4. getBytes\",\"t\":[\"编码：将String转为byte[]数组，byte[]是ASCII编码组成的数组\",\"字符集：String 与 byte[]（编码和解码）时，字符集必须一致，不然会乱码 \",\"在UTF8字符集中，一个字母用1个字符表示，一个中文用3个字符表示\",\"如果指定了字符集：将可能抛出异常，需要对异常进行处理\",\"byte[] getBytes(String charsetName);//参数可选，默认是UTF8 ========================================================== String s1 = \\\"Dio侠\\\"; byte[] bytes = s1.getBytes(); System.out.println(Arrays.toString(bytes)); //[68, 105, 111, -28, -66, -96] //使用了指定字符集的参数，就需要进行异常处理 try { byte[] gbk = s1.getBytes(\\\"gbk\\\"); System.out.println(Arrays.toString(gbk)); //[68, 105, 111, -49, -64] } catch (UnsupportedEncodingException e) { e.printStackTrace(); } \",\"解码 解码就是将byte[]数组转为String。\",\"方式：调用String的构造器，String有一个构造器是可以接受byte[]类型的。\",\"构造器：同时，该构造器可以接受第二个参数，来指定编码的字符集，默认是UTF8。\",\"byte[] bytes = {68, 105, 111, -28, -66, -96}; String s1 = new String(bytes); System.out.println(s1); //Dio侠 //如果使用第二个参数来指定字符集，就需要处理异常 try { String s2 = new String(bytes, \\\"gbk\\\"); System.out.println(s2);//Dio渚�,错误的字符集将解码错误 } catch (UnsupportedEncodingException e) { e.printStackTrace(); } \"]},\"675\":{\"h\":\"Ⅵ. 正则\",\"t\":[\"String类里也有很多涉及正则的方法。\"]},\"676\":{\"h\":\"1. replace\"},\"677\":{\"h\":\"1.1 replace：char替换\",\"t\":[\"返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。\",\"String replace(char oldChar, char newChar); String s1 = \\\"I2bat8 man\\\"; System.out.println(s1.replace('m','g'));//I2bat8 gan \"]},\"678\":{\"h\":\"1.2 replace：str替换\",\"t\":[\"使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。\",\"String replace(CharSequence target, CharSequence replacement); String s1 = \\\"I2bat8 man\\\"; System.out.println(s1.replace(\\\"man\\\",\\\"van\\\")); //I2bat8 van \"]},\"679\":{\"h\":\"1.3 replaceAll：正则全部替换\",\"t\":[\"使用给定的replacement 替换此字符串所有匹配给定的正则表达式的子字符串。\",\"String replaceAll(String regex, String replacement); String s1 = \\\"I2bat8 man\\\"; System.out.println(s1.replaceAll(\\\"\\\\\\\\d+\\\",\\\",\\\")); //I,bat, man \"]},\"680\":{\"h\":\"1.4 replaceFirst：正则替换第一个子字符串\",\"t\":[\"使用给定的replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。\",\"String replaceFirst(String regex, String replacement); String s1 = \\\"I2bat8 man\\\"; System.out.println(s1.replaceFirst(\\\"\\\\\\\\d+\\\",\\\",\\\"));//I,bat8 man \"]},\"681\":{\"h\":\"2. matches\",\"t\":[\"告知此字符串是否匹配给定的正则表达式。\",\"boolean matches(String regex); String s2 = \\\"1234\\\"; System.out.println(s2.matches(\\\"\\\\\\\\d+\\\")); //true \"]},\"682\":{\"h\":\"3. split\",\"t\":[\"根据给定正则表达式的匹配拆分此字符串。\",\"可以指定第二个参数：limit，表示切片最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中\",\"返回值：返回值是个字符串数组，而非字符串\",\"String[] split(String regex); String[] split(String regex, int limit); String s3 = \\\"I am Bat Van\\\"; String[] s4 = s3.split(\\\" \\\"); //根据空格分割 System.out.println(s4[1]); //am \"]},\"683\":{\"h\":\"1-2. StringBuffer\",\"t\":[\"提示\",\"Libraries>java>lang StringBuffer.java Libraries>java>lang StringBuilder\"]},\"684\":{\"h\":\"Ⅰ. 介绍\"},\"685\":{\"h\":\"1. 简介\"},\"686\":{\"h\":\"1.1 StringBuffer\",\"t\":[\"StringBuffer也是个字符串类，代表可变的字符序列吗，可以对字符串内容进行增删，此时不会产生新的对象（可变性）。\",\"StringBuffer很多方法与String是相同的。\"]},\"687\":{\"h\":\"1.2 StringBuilder\",\"t\":[\"在功能上，StringBuilder和StringBuffer是一样的。\",\"区别是：StringBuffer是线程安全的，StringBuilder是线程不安全的。\"]},\"688\":{\"h\":\"2. 结构\",\"t\":[\"//StringBuffer结构 public final class StringBuffer extends AbstractStringBuilder implements Serializable,CharSequence{ private transient char[] toStringCache; static final long serialVersionUID = 3388685877147921107L; } //StringBuilder结构 public final class StringBuilder extends AbstractStringBuilder implements Serializable,CharSequence{ static final long serialVersionUID = 4383685877147921099L; } \"]},\"689\":{\"h\":\"3. 创建StringBuffer对象\",\"t\":[\"StringBuffer 类不同于String ，其对象必须使用构造器生成。有三个构造器：\",\"StringBuffer() ：初始容量为16的字符串缓冲区\",\"StringBuffer(int size) ：构造指定容量的字符串缓冲区\",\"StringBuffer(String str) ：将内容初始化为指定字符串内容\",\"StringBuffer sb1 = new StringBuffer(); StringBuffer sb2 = new StringBuffer(100); StringBuffer sb3 = new StringBuffer(\\\"Dickman\\\"); \"]},\"690\":{\"h\":\"4. String、StringBuffer、StringBuilder对比\",\"t\":[\"String：不可变的字符序列；底层使用final char[]存储\",\"StringBuffer：可变的字符序列；线程安全的，效率低；底层使用char[]存储\",\"StringBuilder：可变的字符序列；jdk5.0新增的，线程不安全的，效率高；底层使用char[]存储\"]},\"691\":{\"h\":\"5. 源码分析\"},\"692\":{\"h\":\"5.1 String源码分析\",\"t\":[\"String的底层是将字符保存在char[]数组中的，且是final不可变的（内容和长度都不可变）。\",\"String str = new String();//char[] value = new char[0]; String str1 = new String(\\\"ab\\\");//char[] value = new char[]{'a','b'}; \"]},\"693\":{\"h\":\"5.2 StringBuffer分析\",\"t\":[\"StringBuffer底层也是保存到char数组中的，但是这个char[]不是final，且默认有16个长度，因此就具有了可变性。\",\"//底层默认创建了16个长度的char数组 StringBuffer sb1 = new String();//char[] value = new char[16] //添加操作 sb1.append('a');//value[0] = 'a'; sb1.append('b');//value[1] = 'b'; \"]},\"694\":{\"h\":\"5.3 StringBuffer扩容\",\"t\":[\"StringBuffer默认长度是16，当添加的字符串超过16时，会自动进行扩容，默认情况下，扩容为原来容量的2倍 + 2，同时将原有数组中的元素复制到新的数组中。\"]},\"695\":{\"h\":\"6. 对比String、StringBuffer、StringBuilder的效率\",\"t\":[\"经过简单的循环向字符串中添加数字，从0添加到两万。耗时大致分别为：\",\"StringBuffer：5ms\",\"StringBuilder：2ms\",\"String：1139ms\"]},\"696\":{\"h\":\"7. 三种创建字符串方式的选择\",\"t\":[\"有线程安全：StringBuffer(int capacity)\",\"无线程安全：StringBuilder(int capacity) 总结：优先选择可变的字符串类，为了避免扩容，提高效率，可以指定字符串长度。\"]},\"697\":{\"h\":\"8. StringBuffer方法的特性\",\"t\":[\"可变性：改变StringBuffer内容的方法，会直接改变源StringBuffer，而不是返回一个新的\",\"synchronized：因为StringBuffer是线程安全的，所以StringBuffer的方法上都会带 synchronized\",\"同String的方法：String的方法，一般StringBuffer也能使用 \",\"length：获取字符串内容的长度，这里获取的不是底层char[] 的长度，而是已有的内容的长度\",\"indexOf：返回指定字符串在此字符串第一次出现的索引\",\"substring：字符串截取\",\"charAt：返回指定索引处的字符\"]},\"698\":{\"h\":\"Ⅱ. 常用方法\"},\"699\":{\"h\":\"1. length\",\"t\":[\"和String的length方法类似，返回StringBuffer的长度。 这里的长度值得是存入StringBuffer的字符数量count，而不是StringBuffer本身的长度。\",\"int length(); ======================= StringBuffer sb1 = new StringBuffer(); System.out.println(sb1.length());//0 StringBuffer sb2 = new StringBuffer(20); System.out.println(sb2.length()); //0 StringBuffer sb3 = new StringBuffer(\\\"hello\\\"); System.out.println(sb3.length()); //5 \"]},\"700\":{\"h\":\"2. append\",\"t\":[\"字符串拼接，StringBuffer不能使用“+”进行字符串拼接，只能使用append方法。 该方法针对不通数据类型的参数，有多个重构方法，能自动转为String类型的数据类型都可以作为参数。\",\"StringBuffer append(String s);//可以是各种能自动转为String的数据类型 //如果是char[],可以额外指定两个范围参数 StringBuffer append(char[] str, int offset, int len); ========================================= StringBuffer sb1 = new StringBuffer(\\\"Hello\\\"); StringBuffer sb2 = sb1.append(\\\" baby\\\"); System.out.println(sb1); //Hello baby;直接改的源StringBuffer System.out.println(sb2); //Hello baby;直接改的源StringBuffer \"]},\"701\":{\"h\":\"3. delete\",\"t\":[\"删除指定位置的内容\",\"参数1：start：起始位置的index，包含start\",\"参数2：end：结束位置的index，不包含end\",\"StringBuffer delete(int start, int end) ============================ StringBuffer sb1 = new StringBuffer(\\\"Hello Bitman\\\"); sb1.delete(0,6); System.out.println(sb1); //Bitman \"]},\"702\":{\"h\":\"4. replace\",\"t\":[\"字符串替换。\",\"参数1 start：替换其实位置的index（包括start）\",\"参数2 end：替换结束为主的index（不包括end），如果要替换最后一个字符，需要end=length+1\",\"参数3 str：用来替换的字符串\",\"StringBuffer replace(int start, int end, String str); =============================== StringBuffer sb = new StringBuffer(\\\"Hello Batman\\\"); sb.replace(6,sb.length(),\\\"Superman\\\"); System.out.println(sb); // Hello Superman \"]},\"703\":{\"h\":\"5. insert\",\"t\":[\"在指定位置插入内容。\",\"参数1 offset：偏移值，从左开始算，从1开始算（非index）。\",\"参数2 xxx：待插入的内容（可以是任意能转为String的数据类型、包括引用类型） \",\"根据参数2不同的数据类型，有多个重载方法\",\"//参数2可以是任意能转为String的数据类型 StringBuffer insert(int offset, String str); ======================================== StringBuffer sb = new StringBuffer(\\\"Hello Batman\\\"); sb.insert(11,\\\",fuck you\\\"); System.out.println(sb); \"]},\"704\":{\"h\":\"6. reverse\",\"t\":[\"把当前字符序列逆转，即颠倒字符串\",\"StringBuffer reverse(); ========================================= StringBuffer sb = new StringBuffer(\\\"Hello Batman\\\"); sb.reverse(); System.out.println(sb);//namtaB olleH \"]},\"705\":{\"h\":\"1-3. 时间\",\"t\":[\"警告\",\"在开发中，我们采用JDK8新增的时间API，旧的不要再用了。\"]},\"706\":{\"h\":\"Ⅰ. 日期与时间API\"},\"707\":{\"h\":\"1. 旧的时间API\",\"t\":[\"System.currentTimeMillis：获取ms时间戳\",\"java.util.Date：获取日期\",\"java.sql.Date：获取用于SQL的日期\",\"java.text.SimpleDateFormat：格式化和解析日期\",\"Calendar：日历类\"]},\"708\":{\"h\":\"2. JDK8之后新时间API出现的背景\",\"t\":[\"JDK 1.0中包含了一个java.util.Date类，但是它的大多数方法已经在JDK 1.1引入Calendar类之后被弃用了。而Calendar并不比Date好多少。它们面临的问题是：\",\"可变性：像日期和时间这样的类应该是不可变的\",\"偏移性：Date中的年份是从1900开始的，而月份都从0开始\",\"格式化：格式化只对Date有用，Calendar则不行\",\"不是线程安全：不能处理闰秒等\"]},\"709\":{\"h\":\"3. 新时间API介绍\",\"t\":[\"第三次引入的API是成功的，并且Java 8中引入的java.time API 已经纠正了过去的缺陷，将来很长一段时间内它都会为我们服务。\",\"Java 8 吸收了 Joda-Time 的精华，以一个新的开始为 Java 创建优秀的 API。新的 java.time 中包含了所有关于本地日期（LocalDate）、本地时间（LocalTime）、本地日期时间（LocalDateTime）、时区（ZonedDateTime）和持续时间（Duration）的类。历史悠久的 Date 类新增了 toInstant() 方法，用于把 Date 转换成新的表示形式。这些新增的本地化时间日期 API 大大简化了日期时间和本地化的管理。\"]},\"710\":{\"h\":\"4. 新时间日期API包\",\"t\":[\"java.time – 包含值对象的基础包\",\"java.time.chrono – 提供对不同的日历系统的访问\",\"java.time.format – 格式化解析时间和日期\",\"java.time.temporal – 包括底层框架和扩展特性\",\"java.time.zone – 包含时区支持的类\"]},\"711\":{\"h\":\"5. 补充说明\",\"t\":[\"大多数开发者只会用到基础包和format包，也可能会用到temporal包。因此，尽管有68个新的公开类型，大多数开发者，大概将只会用到其中的三分之一。\"]},\"712\":{\"h\":\"Ⅱ. 本地时间\",\"t\":[\"跟本地时间有关的类有三个：LocalDate、LocalTime、LocalDateTime。\",\"这三个类类似于Calendar，但是更方便，且具有不可变性（无法修改源时间）。它们的实例是不可变的对象。它们提供了简单的本地日期或时间，并不包含当前的时间信息，也不包含与时区相关的信息。\"]},\"713\":{\"h\":\"1. LocalDate、LocalTime 和 LocalDateTime\",\"t\":[\"三个类的方法都是类似的，且这三个类具有不可变性，对日期时间进行的修改将返回同样的一个类的对象，而不是修改源数据。这些方法操作的也是日期、时间相关的属性。\"]},\"714\":{\"h\":\"1.1 LocalDate\",\"t\":[\"本地日期，代表IOS格式（yyyy-MM-dd）的日期,可以存储生日、纪念日等日期。\",\"//位置：Libraries>java>time>LocalDate.java [class] public final class LocalDate implements Temporal,TemporalAdjuster, ChronoLocalDate,Serializable{ } \"]},\"715\":{\"h\":\"1.2 LocalTime\",\"t\":[\"本地时间，表示一个时间，而不是日期。\",\"//位置：Libraries>java>time>LocalTime.java [class] public final class LocalTime implements Temporal, TemporalAdjuster, Comparable<LocalTime>, Serializable { } \"]},\"716\":{\"h\":\"1.3 LocalDateTime\",\"t\":[\"本地日期和时间，这是一个最常用的类之一。\",\"//位置：Libraries>java>time>LocalDateTime.java [class] public final class LocalDateTimeimplements Temporal, TemporalAdjuster, ChronoLocalDateTime<LocalDate>, Serializable { } \"]},\"717\":{\"h\":\"2. now\",\"t\":[\"实例化类（无参），这三个类无法直接new实例化，需要借助方法。\",\"LocalDate ldNow = LocalDate.now(); LocalTime ltNow = LocalTime.now(); LocalDateTime ldtNow = LocalDateTime.now(); ======================================== System.out.println(ldNow); //2022-06-09(年-月-日) System.out.println(ltNow); //7:25:17.169(时:分:秒.毫秒) System.out.println(ldtNow); //2022-06-09T17:25:17.169 \"]},\"718\":{\"h\":\"3. of\",\"t\":[\"参数用来指定日期和时间，格式为：yyyy,MM,d,hh,mm,ss 。\",\"LocalDate.of(int year, int month, int dayOfMonth); LocalTime.of(int hour,int minute, int second,int ms);//后两个参数可选 LocalDateTime.of(int year, int month, int dayOfMonthint,int hour,int minute, int second,int ms);//second 和 ms可选 ============================================== LocalDate ld = LocalDate.of(2020, 2, 22); LocalTime lt = LocalTime.of(22, 22, 22,222); LocalDateTime ldt = LocalDateTime.of(2020, 2, 22, 22, 22, 22, 222); \"]},\"719\":{\"h\":\"4. getXxx\",\"t\":[\"获取时间和日期信息，以LocalDateTime类为例：\",\"LocalDateTime ldtNow = LocalDateTime.now(); int year = ldtNow.getYear(); //获取year int month = ldtNow.getMonthValue(); //获取Month int day = ldtNow.getDayOfMonth(); //获取day int hour = ldt.getHour(); //获取hour int minute = ldt.getMinute(); //获取minute int second = ldt.getSecond(); //获取秒 int nano = ldt.getNano(); //获取毫秒 int dayOfYear = ldtNow.getDayOfYear(); //获取现在是一年中的第几天 System.out.println(year); //2022 System.out.println(month); //6 System.out.println(day); //9 System.out.println(hour); //18 System.out.println(minute); //29 System.out.println(second); //41 System.out.println(nano); //328000000 System.out.println(dayOfYear); //160 \"]},\"720\":{\"h\":\"5. withXxx\",\"t\":[\"设置日期时间信息，可以使用withXxx单独设置某个时间维度的时间，以LocalDateTime类为例：\",\"LocalDateTime ldt = LocalDateTime.now(); LocalDateTime ldt1_year = ldt.withYear(1999); //设置year LocalDateTime ldt2_month = ldt.withMonth(9); //设置Month LocalDateTime ldt3_day = ldt.withDayOfMonth(9); //设置day LocalDateTime ldt4_hour = ldt.withHour(3); //设置hour LocalDateTime ldt5_min = ldt.withMinute(23); //设置mins LocalDateTime ldt6_s = ldt.withSecond(10); //设置秒 LocalDateTime ldt7_ms = ldt.withNano(333); //设置毫秒 LocalDateTime ldt8_day_year = ldt.withDayOfYear(100); //设置为当年的第N天 System.out.println(ldt1_year); //1999-06-09T18:21:56.556 System.out.println(ldt2_month); //2022-09-09T18:21:56.556 System.out.println(ldt3_day); //2022-06-09T18:21:56.556 System.out.println(ldt4_hour); //2022-06-09T03:21:56.556 System.out.println(ldt5_min); //2022-06-09T18:23:56.556 System.out.println(ldt6_s); //2022-06-09T18:21:10.556 System.out.println(ldt7_ms); //2022-06-09T18:21:56.000000333 System.out.println(ldt8_day_year); //2022-04-10T18:21:56.556 \"]},\"721\":{\"h\":\"6. plusXxx\",\"t\":[\"增加日期时间，即向当前时间对象上进行指定单位的时间增加。\",\"LocalDateTime ldt = LocalDateTime.now(); LocalDateTime ldt1_year = ldt.plusYears(1); // +年 LocalDateTime ldt2_month = ldt.plusMonths(1); // + month LocalDateTime ldt3_days = ldt.plusDays(1); // +days LocalDateTime ldt4_hour = ldt.plusHours(1); // +Hours LocalDateTime ldt5_min = ldt.plusMinutes(1); // + min LocalDateTime ldt6_s = ldt.plusSeconds(1); //+second LocalDateTime ldt7_ms = ldt.plusNanos(1); //+ms LocalDateTime ldt8_week = ldt.plusWeeks(1); //+week System.out.println(ldt1_year);//2023-06-09T18:37:52.878 System.out.println(ldt2_month);//2022-07-09T18:37:52.878 System.out.println(ldt3_days); System.out.println(ldt4_hour); System.out.println(ldt5_min); System.out.println(ldt6_s); System.out.println(ldt7_ms); System.out.println(ldt8_week);//2022-06-16T18:37:52.878 \"]},\"722\":{\"h\":\"7. minusXxx\",\"t\":[\"减少日期时间，同上，plus变成了minus。\",\"LocalDateTime ldt = LocalDateTime.now(); LocalDateTime ldt1_year = ldt.minusYears(1); LocalDateTime ldt2_month = ldt.minusMonths(1); LocalDateTime ldt3_days = ldt.minusDays(1); LocalDateTime ldt4_hour = ldt.minusHours(1); LocalDateTime ldt5_min = ldt.minusMinutes(1); LocalDateTime ldt6_s = ldt.minusSeconds(1); LocalDateTime ldt7_ms = ldt.minusNanos(1); LocalDateTime ldt8_week = ldt.minusWeeks(1); \"]},\"723\":{\"h\":\"Ⅲ. Instant\",\"t\":[\"提示\",\"位置：Libraries>java>time>Instant.java [class]\",\"类似 java.util.Date类，\",\"Instant：时间线上的一个瞬时点。 这可能被用来记录应用程序中的事件时间戳。\",\"他的功能和方法与java.util.Date类都很像。\",\"public final class Instant implements Temporal,TemporalAdjuster, Comparable<Instant>,Serializable{ } \"]},\"724\":{\"h\":\"1. now\",\"t\":[\"实例化，通过Instant类的now静态方法，获取包含当前时间的Instant对象。\",\"static Instant now(); ================================ Instant now = Instant.now(); System.out.println(now);//2022-06-09T10:51:01.562Z \"]},\"725\":{\"h\":\"2. atOffset\",\"t\":[\"添加时间偏移量，通过now方法获取的Instant对象，表示的时间是格林威治时间，即0时区时间，非本地时间，如果我们需要代表本地时间的对象，需要进行时间偏移，获得一个OffsetDateTime时间对象。\",\"OffsetDateTime atOffset(ZoneOffset offset); ===================================== Instant now = Instant.now(); OffsetDateTime China_time = now.atOffset(ZoneOffset.ofHours(8)); System.out.println(now);//2022-06-09T10:56:20.146Z System.out.println(China_time);//2022-06-09T18:56:20.146+08:00 \"]},\"726\":{\"h\":\"3. toEpochMillion\",\"t\":[\"获取毫秒时间戳。\",\"long toEpochMilli(); ===================================== Instant now = Instant.now(); long ms = now.toEpochMilli(); System.out.println(ms); //1654789042842 \"]},\"727\":{\"h\":\"4. ofEpochMilli\",\"t\":[\"通过毫秒时间戳获取Instant对象，这其实也是实例化Instant类的一种方式。\",\"static Instant ofEpochMilli(long epochMilli);//参数是时间戳 ========================================== long ms = 1654740094502L; Instant time = Instant.ofEpochMilli(ms); System.out.println(time); //2022-06-09T02:01:34.502Z \"]},\"728\":{\"h\":\"Ⅳ. DateTimeFormatter\",\"t\":[\"提示\",\"位置：Libraries>java>time>format>DateTimeFormatter.java [class]\",\"DateTimeFormatter类用来取代之前的SimpleDateFormatter类，用来格式化和解析日期时间。\",\"该类有三种实例化的方式；我们一般使用第三种：自定义格式。实例化后，我们主要用该对象进行日期时间的 格式化和解析。\",\"public final class DateTimeFormatter { } \"]},\"729\":{\"h\":\"1. format\",\"t\":[\"格式化：format方法，日期->字符串\",\"参数是TemporlAccessor，LocalDateTime实现了该接口，可以作为参数。\",\"String format(TemporalAccessor temporal); \"]},\"730\":{\"h\":\"2. parse\",\"t\":[\"解析：parse方法，字符串->日期\",\"参数是CharSequence，String可以作为参数。\",\"TemporalAccessor parse(CharSequence text); \"]},\"731\":{\"h\":\"3. 标准格式\",\"t\":[\"有三种标准格式，每种格式都返回一个DateTimeFormatter对象\",\"ISO_LOCAL_DATE_TIME：日期时间\",\"ISO_LOCAL_DATE：日期\",\"ISO_LOCAL_TIME：时间\",\"DateTimeFormatter isoDateTime = DateTimeFormatter.ISO_LOCAL_DATE_TIME; DateTimeFormatter isoDate = DateTimeFormatter.ISO_LOCAL_DATE; DateTimeFormatter isoTime = DateTimeFormatter.ISO_LOCAL_TIME; \"]},\"732\":{\"h\":\"3.1 格式化\",\"t\":[\"调用format方法，进行格式化，将日期数据转为String，以DATE_TIME为例\",\"DateTimeFormatter isoDateTime = DateTimeFormatter.ISO_LOCAL_DATE_TIME; LocalDateTime ldt = LocalDateTime.now(); String ldtStr = isoDateTime.format(ldt); //进行格式化 System.out.println(ldtStr);//Str:2022-06-10T15:53:22.532 \"]},\"733\":{\"h\":\"3.2 解析\",\"t\":[\"DateTimeFormatter isoDateTime = DateTimeFormatter.ISO_LOCAL_DATE_TIME; String dateTimeStr = \\\"2022-06-10T15:53:22.532\\\"; TemporalAccessor tal = isoDateTime.parse(dateTimeStr); System.out.println(tal);//{},ISO resolved to 2022-06-10T15:53:22.532 \"]},\"734\":{\"h\":\"4. 本地格式\",\"t\":[\"同样有三个静态方法来进行实例化：\",\"ofLocalizedDateTime：日期时间\",\"ofLocalizedDate：日期\",\"ofLocalizedTime：时间\",\"上述三个方法，都有多个参数，来进行格式化，如：\",\"FormatStyle.FULL：2022年3月3日 星期四\",\"FormatStyle.LONG：2022年3月3日 上午01时18分16秒\",\"FormatStyle.MEDIUM：2022-3-3 1:19:21\",\"FormatStyle.SHORT：22-3-3 上午1:19（适用于LocalDate）\",\"注意：参数与实例化方法的配合，有可能无法识别值。\",\"//1.实例化 DateTimeFormatter formatter2 = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.LONG); LocalDateTime ldt2 = LocalDateTime.now(); //2.格式化 String time_str1 = formatter2.format(ldt2); System.out.println(time_str1);//2022年3月3日 上午01时21分07秒 //3.解析 String str2 = \\\"2019年2月18日 下午03时47分16秒\\\"; TemporalAccessor ldt3 = formatter2.parse(str2); System.out.println(ldt3);//{},ISO resolved to 2019-02-18T15:47:16 \"]},\"735\":{\"h\":\"5. 自定义格式\",\"t\":[\"调用ofPattern方法，参数为自定义的日期时间格式。\",\"常用的格式为：yyyy-MM-dd hh:mm:ss\",\"//参数是String，但是要是特定的String DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\\\"yyyy-MM-dd hh:mm:ss\\\"); \"]},\"736\":{\"h\":\"5.1 格式化\",\"t\":[\"DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\\\"yyyy-MM-dd hh:mm:ss\\\"); LocalDateTime ldt = LocalDateTime.now(); String dateTimeStr = formatter.format(ldt); System.out.println(dateTimeStr); //2022-06-10 04:09:26 \"]},\"737\":{\"h\":\"5.2\",\"t\":[\"DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\\\"yyyy-MM-dd hh:mm:ss\\\"); String str = \\\"2022-06-10 04:09:26\\\"; TemporalAccessor ta = formatter.parse(str); \"]},\"738\":{\"h\":\"1-4. 比较器\"},\"739\":{\"h\":\"Ⅰ. 介绍\",\"t\":[\"Java中的对象，正常情况下，只能进行比较：== 或 != 。不能使用 > 或 < 的。 但是在开发场景中，我们需要对多个对象进行排序，言外之意，就需要比较对象的大小。\"]},\"740\":{\"h\":\"1. 对象排序的实质\",\"t\":[\"实际比较的是对象的属性的大小，本质还是比较的基本数据类型。\"]},\"741\":{\"h\":\"2. 排序接口\",\"t\":[\"使用以下两个接口中的任何一个来实现对象的排序\",\"java.lang.Comparable ：自然排序\",\"java.util.Comparator：定制排序\"]},\"742\":{\"h\":\"3. Comparable与Comparator的区别\",\"t\":[\"Comparable 是在集合内部定义的方法实现的排序，Comparator 是在集合外部实现的排序，所以，如想实现排序，就需要在集合外定义Comparator接口的方法或在集合内实现 Comparable接口的方法。\"]},\"743\":{\"h\":\"Ⅱ. Comparable\",\"t\":[\"提示\",\"位置：Libraries>java>lang>Comparable.java 【interface】\",\"Comparable接口，就是比较器里的自然排序接口。 Comparable接口强行对实现它的每个类的对象进行整体排序。这种排序被称为类的自然排序。\",\"public interface Comparable<T>{ public int compareTo(T o); } \"]},\"744\":{\"h\":\"1. 用法\",\"t\":[\"很多JDK内置的类，都实现了Comparable接口，可以直接使用Collection.sort或Arrays.sort进行排序。\",\"对于自定义的类，就需要实现Comparable接口，然后重写接口中的compareTo方法，在compareTo(obj)方法中指明如何比较大小，重写时要满足重写规则。 \",\"之后，如果要比较该类的两个实例大小，就可以调用实例的compareTo方法进行比较了\",\"如果要该类的多个对象排序，也可以使用Collection.sort或Arrays.sort进行排序了。\"]},\"745\":{\"h\":\"2. compareTo\",\"t\":[\"实现 Comparable 的类必须实现 compareTo(Object obj) 方法，两个对象通过 compareTo(Object obj) 方法的返回值来比较大小。\",\"重写compareTo(obj)的规则：\",\"如果当前对象this大于形参对象obj，则返回正整数\",\"如果当前对象this小于形参对象obj，则返回负整数\",\"如果当前对象this等于形参对象obj，则返回零\"]},\"746\":{\"h\":\"3. JDK内置实现\",\"t\":[\"在JDK中，有很多类，已经实现了自然排序接口Comparable。\",\"String：按照字符串中字符的Unicode值进行比较\",\"Character：按照字符的Unicode值来进行比较\",\"数值类型对应的包装类以及BigInteger、BigDecimal：按照它们对应的数值大小进行比较\",\"Boolean：true 对应的包装类实例大于 false 对应的包装类实例\",\"Date、Time等：后面的日期时间比前面的日期时间大\",\"数组、集合\",\"//String的compareTo内置实现源码 public int compareTo(String anotherString) { int len1 = value.length; int len2 = anotherString.value.length; int lim = Math.min(len1, len2); char v1[] = value; char v2[] = anotherString.value; int k = 0; while (k < lim) { char c1 = v1[k]; char c2 = v2[k]; if (c1 != c2) { return c1 - c2; } k++; } return len1 - len2; } //Integer的CompareTo内置实现源码 public int compareTo(Integer anotherInteger) { return compare(this.value, anotherInteger.value); } public static int compare(int x, int y) { return (x < y) ? -1 : ((x == y) ? 0 : 1); } \"]},\"747\":{\"h\":\"4. sort\",\"t\":[\"对于实现了Comparable接口的类，都可以使用Collection.sort或Arrays.sort进行排序。\"]},\"748\":{\"h\":\"5. 使用示例\",\"t\":[\"要求：Person类，根据年龄比较大小，如果年龄相同，就按名字字母进行排序\"]},\"749\":{\"h\":\"5.1 实现Comparable接口，重写CompareTo方法\",\"t\":[\"//这里直接用泛型限制了，数据类型，否则就会允许接收任意Object类进行比较 class Person implements Comparable<Person>{ private int age; private String name; public Person(int age,String name){ this.age = age; this.name = name; } @Override public int compareTo(Person o) { //1.判断数据类型是否相同,由于这里直接用Person限制了因此，可以省略 //if(!(o instanceof Person)){ // throw new RuntimeException(\\\"数据类型不一致\\\"); //} //2.判断这两个对象，是否是同一个对象 if(this == o){ return 0; //同一个对象肯定相等 } //3.先比较年龄属性 if(this.age>o.age){ return 1; }else if(this.age<o.age){ return -1; }else{ //4.当年龄相同时，比较name属性 return this.name.compareTo(o.name);//直接调用String类的compareTo } } @Override public String toString() { return \\\"[\\\"+name+\\\"-\\\"+age+\\\"]\\\"; } } \"]},\"750\":{\"h\":\"5.2 比较：比较两个对象的大小\",\"t\":[\"Person aaron = new Person(10, \\\"Aaron\\\"); Person bob = new Person(10, \\\"Bob\\\"); int res = aaron.compareTo(bob); System.out.println(res);//-1, \"]},\"751\":{\"h\":\"5.3 排序：对多个对象进行排序\",\"t\":[\"Person[] person = new Person[5]; person[0] = new Person(10,\\\"Aaron\\\"); person[1] = new Person(3,\\\"Jinno\\\"); person[2] = new Person(3,\\\"Bob\\\"); person[3] = new Person(23,\\\"Flank\\\"); person[4] = new Person(8,\\\"Jobs\\\"); Arrays.sort(person); System.out.println(Arrays.toString(person)); //[[Bob-3], [Jinno-3], [Jobs-8], [Aaron-10], [Flank-23]] \"]},\"752\":{\"h\":\"Ⅲ. Comparator\",\"t\":[\"提示\",\"位置：Libraries>java>util>Comparator.java 【interface】\",\"Comparator接口是用来实现定制排序的。当元素的类型没有实现java.lang.Comparable接口而又不方便修改代码，或者实现了java.lang.Comparable接口的排序规则不适合当前的操作，那么可以考虑使用 Comparator 的对象来排序，强行对多个对象进行整体排序的比较。\",\"@FunctionalInterface //该接口是个函数式接口 public interface Comparator<T>{ int compare(T o1,T o2); ...; } \"]},\"753\":{\"h\":\"1. 用法\",\"t\":[\"Comparator常作为Collections.sort()或Arrays.sort()的第二个参数（以匿名内部类的方式）。 此时sort方法将按照重写的compare进行排序。\"]},\"754\":{\"h\":\"2. compare\",\"t\":[\"使用Comparator接口，需重写compare(Object o1,Object o2)方法，比较o1和o2的大小 比较规则为：\",\"返回正整数，则表示o1 大于o2 ；\",\"返回0 ，表示相等；\",\"返回负整数，表示o1 小于o2。\"]},\"755\":{\"h\":\"3. 使用示例\"},\"756\":{\"h\":\"3.1 字符串排序\",\"t\":[\"String[] arr = new String[]{\\\"AA\\\",\\\"CC\\\",\\\"KK\\\",\\\"MM\\\",\\\"GG\\\"}; Arrays.sort(arr); System.out.println(Arrays.toString(arr));//[AA, CC, GG, KK, MM] //使用Comparator接口，进行降序排序 Arrays.sort(arr,new Comparator() { public int compare(Object o1,Object o2){ if(!(o1 instanceof String && o2 instanceof String)){ throw new RuntimeException(\\\"类型不一致，无法比较\\\"); } String s1 = (String)o1; String s2 = (String)o2; return -s1.compareTo(s2);//直接用负数将compare改成降序 } }); System.out.println(Arrays.toString(arr));//[MM, KK, GG, CC, AA] \"]},\"757\":{\"h\":\"3.2 自定义类的对象排序\",\"t\":[\"同上，Comparable排序示例，这次要反向进行排序\",\"Arrays.sort(person,new Comparator<Person>(){ @Override public int compare(Person o1, Person o2) { if(o1.getAge() > o2.getAge()) { return -1; }else if(o1.getAge()<o2.getAge()){ return 1; }else{ return -o1.getAge()-o2.getAge(); } } }); System.out.println(Arrays.toString(person)); //[[Flank-23], [Aaron-10], [Jobs-8], [Jinno-3], [Bob-3]] //[[Bob-3], [Jinno-3], [Jobs-8], [Aaron-10], [Flank-23]],这个是之前的 \"]},\"758\":{\"h\":\"1-5. 数学与数值\"},\"759\":{\"h\":\"Ⅰ. Math\",\"t\":[\"提示\",\"位置：rt.jar>java>lang>Math.java 【class】\",\"java.lang.Math 提供了一系列静态方法用于科学计算。其方法的参数和返回为值类型一般为double型。\",\"public final class Math{ private Math(){} } \"]},\"760\":{\"h\":\"1. abs 绝对值\",\"t\":[\"求数值的绝对值，参数是Number类（包含：Byte、short、int、long、float、double）。 比int小的数值类型，会自动转为int：byte、short。\",\"int abs(int a); int abs = Math.abs(-1); System.out.println(abs);//1 \"]},\"761\":{\"h\":\"2. random 随机数\",\"t\":[\"随机数的范围是：[0.0,1.0)，包含0.0，不包含1.0。 返回值是一个伪随机数，在该范围内(近似)均匀分布。\",\"随机数的精确度为：小数点后16位，如果要获取其他范围的值，需要将random结果乘一个倍数。\",\"任意区间随机数公式：[a,b]:(int)(Math.random() * (b - a + 1) )+ a\",\"double random(); double random = Math.random(); System.out.println(random); //0.3190675085212945 int res = (int)Math.ceil(Math.random() * 100);//修改为返回[1,100]间的随机数 System.out.println(res);//30 \"]},\"762\":{\"h\":\"3. ceil 进1取整\",\"t\":[\"进1取整，向上取整，返回大于等于给定参数的最小整数。 返回值类型是double，可以强转为int。\",\"double ceil(double a); double n = 1.1; int ceil = (int)Math.ceil(n); System.out.println(ceil); //2 \"]},\"763\":{\"h\":\"4. floor 舍去小数\",\"t\":[\"舍去小数取整，向下取整，返回小于等于（<=）给定参数的最大整数 。\",\"double floor(double a); double n = 1.99; int floor = (int)Math.floor(n); System.out.println(floor);//1 \"]},\"764\":{\"h\":\"5. round 四舍五入\",\"t\":[\"算法为 Math.floor(x+0.5)，即将原来的数字加上 0.5 后再向下取整。\",\"long round(double a); double n1 = 1.5111; double n2 = 1.4999; long r1 = Math.round(n1); long r2 = Math.round(n2); System.out.println(r1);//2 System.out.println(r2);//1 \"]},\"765\":{\"h\":\"6. PI圆周率\",\"t\":[\"π = 3.141592653589793\",\"public static final double PI = 3.14159265358979323846; double pi = Math.PI; System.out.println(pi); \"]},\"766\":{\"h\":\"7. rint 四舍五入\",\"t\":[\"该函数也是四舍五入，返回与参数最接近的整数，不过返回值类型是double类型的。\",\"double rint(double a); double rint = Math.rint(2.1); long round = Math.round(2.1); System.out.println(rint);//2.0 System.out.println(round);//2 \"]},\"767\":{\"h\":\"8. min 求较小值\",\"t\":[\"参数是Number类型的子类：int、long、flot、double（byte、sort ->int）。\",\"double min(double a, double b); double min1 = Math.min(1, 1.0); double min2 = Math.min(2, 3); System.out.println(min1);//1.0 System.out.println(min2);//2.0 \"]},\"768\":{\"h\":\"9. max 求较大值\",\"t\":[\"double max(double a, double b); double max1 = Math.max(1, 1.0); double max2 = Math.max(2, 3); System.out.println(max1); System.out.println(max2); \"]},\"769\":{\"h\":\"10. 数学公式\",\"t\":[\"exp：返回自然数底数e的参数次方 \",\"以e为底的对数称为自然对数。\",\"log：求log，返回参数的自然数底数的对数值\",\"pow：就次方，返回第一个参数的第二个参数次方\",\"sqrt：求参数的算术平方根\",\"double exp(double a); double log(double a); double pow(double a, double b); double sqrt(double a); double exp = Math.exp(10); System.out.println(exp);//22026.465794806718 double log = Math.log(10); System.out.println(log);//2.302585092994046 double pow = Math.pow(2, 3); System.out.println(pow);//8.0 double sqrt = Math.sqrt(2); System.out.println(sqrt);//1.4142135623730951 \"]},\"770\":{\"h\":\"11. 几何函数\",\"t\":[\"sin：求sin值，double类型\",\"cos：求cos值，double类型\",\"tan：求tan值，double类型\",\"asin：求asin值，double类型\",\"acos：求acos值，double类型\",\"atan：求atan值，double类型\",\"toDegrees：将参数转为角度\",\"toRadians：将角度转为弧度\"]},\"771\":{\"h\":\"Ⅱ. Number\",\"t\":[\"提示\",\"位置：rt.jar>java>lang>Number.java 【abstract】\",\"所有包装类(如：Integer，Long，Byte，Double，Float，Short)都是抽象类Number的子类。 由于Number是抽象类，实际使用的时候，用的都是他的子类（包装类）。\"]},\"772\":{\"h\":\"1. xxxValue\",\"t\":[\"将Number对象的值转换为xxx数据类型并返回。\",\"包装类包括->byte、sort、int、long、float、double\",\"任意一个包装类，转为其他六种基本数据类型\",\"byte byteValue() short shortValue() int intValue() long longValue() float floatValue() double doubleValue() Integer a = 10; double v = a.doubleValue(); System.out.println(v);//10.0 \"]},\"773\":{\"h\":\"2. compareTo\",\"t\":[\"所有Number类的子类都实现了Comparable接口，可以直接调用compareTo比较大小。 注意包装类的数据类型应该与参数数据类型对应。\",\"xxx compareTo(xxx anotherxxx); //xxx是任意包装类 Integer a = 10; int res = a.compareTo(20); System.out.println(res);//-1，a<20 \"]},\"774\":{\"h\":\"3. toString\",\"t\":[\"Number类型转String类型。和String.valueOf效果一样。\",\"String toString(); Double a = 10.1; String str1 = a.toString(); String str2 = String.valueOf(a); System.out.println(str1); //String:10.1 System.out.println(str2); //String:10.1 \"]},\"775\":{\"h\":\"4. valueOf\",\"t\":[\"将基本数据类型、String类型的参数转为包装类对象。 注意：该方法与String.valueOf的效果是相反的。\",\"Xxx valueOf(String s);//Xxx是某种包装类 int a = 10; Integer b1 = Integer.valueOf(a); Integer b2 = a; Integer b3 = Integer.valueOf(\\\"10\\\"); \"]},\"776\":{\"h\":\"5. parseXxx\",\"t\":[\"将String数值字符串转为基本数据类型。\",\"xxx parseXxx(String s);//xxx是基本数据类型 int i = Integer.parseInt(\\\"10\\\"); double d = Double.parseDouble(\\\"20.0\\\"); System.out.println(i); System.out.println(d); \"]},\"777\":{\"h\":\"Ⅲ. BigInteger\",\"t\":[\"提示\",\"位置：rt.jar>java>math>BigInteger 【class】 使用较少，仅了解。\",\"Integer类作为int的包装类，能存储的最大整型值为2 31 -1，Long类也是有限的，最大为2 63 -1。如果要表示再大的整数，不管是基本数据类型还是他们的包装类都无能为力，更不用说进行运算了。\",\"java.math包的BigInteger 可以表示不可变的任意精度的整数。BigInteger 提供所有 Java 的基本整数操作符的对应物，并提供 java.lang.Math 的所有相关方法。另外，BigInteger 还提供以下运算：模算术、GCD 计算、质数测试、素数生成、位操作以及一些其他操作。\",\"//结构 public class BigInteger extends Number implements Comparable<BigInteger>{ ... } //构造器 BigInteger bi = new BigInteger(\\\"12433241123\\\"); \"]},\"778\":{\"h\":\"Ⅳ. BigDecimal\",\"t\":[\"提示\",\"位置：rt.jar>java>math>BigDecimal.java 【class】\",\"一般的Float类和Double类可以用来做科学计算或工程计算，但在商业计算中，到要求数字精度比较高，故用到java.math.BigDecimal类。\",\"原因：十进制值通常没有完全相同的二进制表示形式；十进制数的二进制表示形式可能不精确。\",\"BigDecimal类支持不可变的、任意精度的有符号十进制定点数。\",\"结构\",\"public class BigDecimal extends Number implements Comparable<BigDecimal>{ private final BigInteger intVal; } \",\"构造器\",\"参数可以是double类型的数值，也可以是字符串。如下：字符串参数更加精准\",\"BigDecimal bd1 = new BigDecimal(12345.12121200000001408625394105911254882812555); BigDecimal bd2 = new BigDecimal(\\\"12345.12121200000001408625394105911254882812555\\\"); BigDecimal bd3 = new BigDecimal(12345);//int类型直接用也是很精准的 System.out.println(bd1);//12345.121212000000014086253941059112548828125 System.out.println(bd2);//12345.12121200000001408625394105911254882812555 \",\"BigDecimal的特殊创建方法\",\"//特殊的0、1、10可以这么创建： BigDecimal zero = BigDecimal.ZERO; BigDecimal one = BigDecimal.ONE; BigDecimal ten = BigDecimal.TEN; //简单int、long、double数据的创建 BigDecimal bd = BigDecimal.valueOf(123345.21); \",\"运算\",\"BigDecimal所创建的是对象，我们不能使用传统的+、-、*、/等算术，需要使用特点的方法。\"]},\"779\":{\"h\":\"1. add\",\"t\":[\"加法运算，DigDecimal间不能直接使用 + 。\",\"BigDecimal add(BigDecimal augend); BigDecimal bd1 = new BigDecimal(\\\"123.45\\\"); BigDecimal bd2 = new BigDecimal(\\\"234.56\\\"); BigDecimal bd3 = bd1.add(bd2); System.out.println(bd3);//358.01 \"]},\"780\":{\"h\":\"2. subtract\",\"t\":[\"减法运算。\",\"BigDecimal subtract(BigDecimal subtrahend); BigDecimal bd1 = new BigDecimal(\\\"123.45\\\"); BigDecimal bd2 = new BigDecimal(\\\"234.56\\\"); BigDecimal bd3 = bd1.subtract(bd2); System.out.println(bd3);//-111.11 \"]},\"781\":{\"h\":\"3. multiply\",\"t\":[\"乘法运算。\",\"BigDecimal multiply(BigDecimal multiplicand); BigDecimal bd1 = new BigDecimal(\\\"123.45\\\"); BigDecimal bd2 = new BigDecimal(\\\"234.56\\\"); BigDecimal bd3 = bd1.multiply(bd2); System.out.println(bd3);//28956.4320 \"]},\"782\":{\"h\":\"4. divide\",\"t\":[\"除法运算；当除不尽的时候，会直接抛出异常，报Non-terminating decimal expansion; no exact representable decimal result（这时因为BigDecimal默认的舍入策略是精准模式）。\",\"因此使用时应该尽量采用带有三个参数的重载方法。\",\"参数2是精度，参数3是舍入策略\",\"参数2和3都可选的，如果为了防止不出异常，就必须指定参数3\",\"如果只指定了两个参数，第二个参数默认是：roundingMode\",\"BigDecimal divide(BigDecimal divisor); BigDecimal divide(BigDecimal divisor,int roundingMode); BigDecimal divide(BigDecimal divisor, int scale, int roundingMode) BigDecimal bd1 = new BigDecimal(\\\"10\\\"); BigDecimal bd2 = new BigDecimal(\\\"3\\\"); BigDecimal res = bd1.divide(bd2,2, RoundingMode.CEILING); System.out.println(res);//3.34 \"]},\"783\":{\"h\":\"5. setScale\",\"t\":[\"设置值的精度，有两个作用：\",\"作用1：改变BigDecimal值的精度\",\"作用2：用与divide运算。\",\"改变BigDecimal值的精度时，往往会发生值大小的改变，此时就需要指定一个舍入策略，系统默认的舍入策略不是四舍五入，而是：ROUND_UNNECESSARY = 7（精准模式，不会改变值的大小）。\",\"如果设置的精度，会改变值的大小，就必须显示的指定舍入策略，不然会报错：Rounding necessary。\",\"在进行divide运算时，可能会发生除不尽的情况，这时，就必须指定舍入策略（精度会有默认值，也可以进行指定），不然会报错。\",\"BigDecimal setScale(int newScale);//不指定舍入策略 BigDecimal setScale(int newScale, int roundingMode);//指定舍入策略 BigDecimal bd1 = new BigDecimal(\\\"1.5555\\\"); BigDecimal res1 = bd1.setScale(2, RoundingMode.UP); System.out.println(res1);//1.56 \"]},\"784\":{\"h\":\"6. roundingMode\",\"t\":[\"舍入策略，常配合精度一起使用，比如四舍五入只是舍入策略的一种。 以下舍入策略，既可以取常量名，也可以直接使用int类型的常量值。\",\"ROUND_UP = 0：进一位，在绝对值的角度，往大变 \",\"10/3 = 3.34（精度2），10/3=4（精度0）\",\"10/-3=-3.34（精度2），10/-3=-4（精度0）\",\"ROUND_DOWN = 1：舍去，无效精度外的数值全部舍去，无论正负 \",\"10/3=3.33（精度2），10/3=3（精度0）\",\"10/3=-3.33（精度2），10/-3=-3（精度0）\",\"ROUND_CEILING = 2：正常值下，往大变，正数就进一，负数就舍去 \",\"10/3=3.34（精度2）；10/3=4（精度0）\",\"10/-3=3.33（精度2）；10/-3=-3（精度0）\",\"ROUND_FLOOR = 3：正常值下，往小变，正数就舍去，负数就进一 \",\"10/3=3.33（精度2），10/3=3（精度0）\",\"10/-3=-3.34（精度2）；10/-3=-4（精度0）\",\"ROUND_HALF_UP = 4：在绝对值的角度，四舍五入 \",\"10/3=3.33（精度2），10/3=3（精度0）\",\"10/3=-3.33（精度2），10/-3=-3（精度0）\",\"ROUND_HALF_DOWN = 5：在绝对值的角度，5舍6入 \",\"10/3=3.33（精度2），10/3=3（精度0）\",\"10/3=-3.33（精度2），10/-3=-3（精度0）\",\"ROUND_HALF_EVEN = 6：绝对值角度：0-4舍，6-9入，如果是5，则结果为偶数 \",\"如果是5，结果是偶数，具体舍入都可以。\",\"ROUND_UNNECESSARY = 7：不进行舍入，精准模式。 \",\"如果除不尽，会报错\"]},\"785\":{\"h\":\"7. compareTo\",\"t\":[\"BigDecimal继承了Comparable接口，可以调用compareTo方法比较两个DigDecimal的数值大小。\",\"返回1：>参数；\",\"返回-1：<参数；\",\"返回0：=参数\",\"int compareTo(BigDecimal val); BigDecimal bd1 = new BigDecimal(\\\"10.0\\\"); BigDecimal bd2 = new BigDecimal(\\\"10\\\"); int res = bd1.compareTo(bd2); System.out.println(res);//0,10 == 10.0 \"]},\"786\":{\"h\":\"1-6. File\",\"t\":[\"位置\",\"rt.jar>java>io>File>File.java 【class】\",\"File 能新建、删除、重命名文件和目录，但 File 不能访问文件内容本身。 Java程序中的一个File对象，可能没有一个真实存在的文件或目录。\",\"结构\",\"public class File implements Serializable,Comparable<File>{ private final String path; } \",\"构造器\",\"路径：可以是 绝对路径或者相对路径，默认根路径为项目路径\",\"//1.根据文件路径创建文件对象 public File(String pathname) File f1 = new File(\\\"hello.txt\\\"); File f2 = new File(\\\"D:/Java/workplace/Demo/study/hi.txt\\\"); //2.根据父路径和子路径拼接创建文件对象 public File(String parent,String child) File f3 = new File(\\\"D:/Java/workplace/Demo/study\\\", \\\"img\\\"); //3.根据父File对象拼接子文件路径创建文件对象 public File(File parent,String child) \"]},\"787\":{\"h\":\"Ⅰ. 获取信息\"},\"788\":{\"h\":\"1. getAbsolutePath\",\"t\":[\"获取文件的绝对路径。\",\"String getAbsolutePath() File file = new File(\\\"File/a.txt\\\"); String path = file.getAbsolutePath(); System.out.println(path);//D:\\\\Java\\\\workplace\\\\Learn\\\\File\\\\a.txt \"]},\"789\":{\"h\":\"2. getPath\",\"t\":[\"获取文件路径，定义的时候是绝对路径，就获取绝对路径，是相对路径就获取相对路径。\",\"String getPath(); File file = new File(\\\"File/a.txt\\\"); String path = file.getPath(); System.out.println(path);//File\\\\a.txt \"]},\"790\":{\"h\":\"3. getName\",\"t\":[\"获取文件的名称（包含后缀）。\",\"String getName(); File file = new File(\\\"File/a.txt\\\"); String fileName = file.getName(); System.out.println(fileName);//a.txt \"]},\"791\":{\"h\":\"4. getParent\",\"t\":[\"获取当前文件上层文件目录的路径，若无，则返回null；\",\"String getParent(); File file = new File(\\\"File/a.txt\\\"); String parentPath = file.getParent(); System.out.println(parentPath);//File \"]},\"792\":{\"h\":\"5. length\",\"t\":[\"获取文件长度，指的是获取文件的大小（单位byte），只能获取文件，不能获取目录。\",\"如果是目录或空文件，都返回0.\",\"long length(); File file = new File(\\\"File/a.txt\\\"); long length = file.length(); System.out.println(length); //13 \"]},\"793\":{\"h\":\"6. lastModified\",\"t\":[\"获取最后一次的修改时间，单位是：毫秒时间戳。\",\"long lastModified(); File file = new File(\\\"File/a.txt\\\"); long ms = file.lastModified(); System.out.println(ms);//1655442970466 \"]},\"794\":{\"h\":\"7. list\",\"t\":[\"获取目录下的文件名称组成的String数组，包括子目录，目录本身也是文件\",\"注意：只是名字，不包含路径；\",\"注意：该方法的参数应该是个目录，如果是文件则返回null，如果是空目录，就返回空数组[]\",\"String[] list(); File file = new File(\\\"File\\\"); String[] list = file.list(); System.out.println(Arrays.toString(list)); //[a.txt, Avadar, b.txt] \"]},\"795\":{\"h\":\"8. listFiles\",\"t\":[\"获取目录下所有文件(包含目录)组成的File类数组，注意：是File类不是文件名\",\"注意：该方法的参数应该是个目录，如果是文件则返回null，如果是空目录，就返回空数组[]\",\"File[] listFiles(); File file = new File(\\\"File\\\"); File[] files = file.listFiles(); System.out.println(Arrays.toString(files)); //[File\\\\a.txt, File\\\\Avadar, File\\\\b.txt] \"]},\"796\":{\"h\":\"Ⅱ. 判断\"},\"797\":{\"h\":\"1. isDirectory\",\"t\":[\"判断File是否为目录，是就返回true，是文件或file不存在都返回false。\",\"boolean isDirectory(); File file = new File(\\\"File\\\"); boolean res = file.isDirectory(); System.out.println(res);//true \"]},\"798\":{\"h\":\"2. isFile\",\"t\":[\"判断File是否为文件，是就返回true，是目录或文件不存在都返回false。\",\"boolean isFile(); File file = new File(\\\"File\\\"); boolean res = file.isFile(); System.out.println(res);//true \"]},\"799\":{\"h\":\"3. exists\",\"t\":[\"判断文件（目录）是否在硬盘上存在。\",\"boolean exists(); File file = new File(\\\"File/a.txt\\\"); boolean res = file.exists(); System.out.println(res);//true \"]},\"800\":{\"h\":\"4. canXxx\",\"t\":[\"判断文件是否有：Write、Read、Execute权限\",\"如果文件不存在，也返回false\",\"boolean canRead(); boolean canWrite(); boolean canExecute() File file = new File(\\\"File/a.txt\\\"); boolean res = file.canRead(); System.out.println(res);//true \"]},\"801\":{\"h\":\"5. isHidden\",\"t\":[\"该文件是否已经隐藏。\",\"在Linux中，. 开头的文件就是隐藏文件，在windows中需要手动设置隐藏。\",\"boolean isHidden(); File file = new File(\\\"File/.hidden\\\"); boolean res = file.isHidden(); System.out.println(res);//true \"]},\"802\":{\"h\":\"Ⅲ. 创建文件\",\"t\":[\"说明\",\"先创建File对象，然后再调用创建文件或目录的方法进行创建。\",\"文件和目录创建的路径和名字就是File对象的路径和名字。\",\"如果文件或目录已经存在了，就无法进行创建，返回false\",\"目录本身也是文件，文件是可以没有后缀的，同一目录下的目录和文件不能同名\",\"一个无实体的File对象即可以是目录也可以是文件，就看用什么方法创建\"]},\"803\":{\"h\":\"createNewFile\",\"t\":[\"使用文件对象创建文件。\",\"boolean createNewFile() throws IOException; File file = new File(\\\"File/c.txt\\\"); if(file.exists()){ System.out.println(\\\"创建失败,文件已存在\\\"); return; } try { boolean res = file.createNewFile(); if(res){ System.out.println(\\\"文件创建成功\\\"); }else{ System.out.println(\\\"文件创建失败，原因未知\\\"); } } catch (IOException e) { e.printStackTrace(); } \"]},\"804\":{\"h\":\"mkdir\",\"t\":[\"创建文件目录，如果目录已存在，将无法创建，如果此文件目录的上层目录不存在，也不创建，并返回false。\",\"boolean mkdir();//mkdir不会抛出异常 File file = new File(\\\"File/c\\\"); if(file.exists()){ System.out.println(\\\"目录已存在，无法创建\\\"); return; }else{ boolean res = file.mkdir(); if(res){ System.out.println(\\\"目录创建成功\\\"); }else{ System.out.println(\\\"目录创建失败，原因未知\\\"); } } \"]},\"805\":{\"h\":\"3. mkdirs\",\"t\":[\"递归创建文件目录，可以同时创建多层目录（上层文件目录不存在，一并创建）。\",\"boolean mkdirs() ;//mkdir不会抛出异常 File file = new File(\\\"File/c/b/b\\\"); if(file.exists()){ System.out.println(\\\"目录已存在，无法创建\\\"); return; }else{ boolean res = file.mkdirs(); if(res){ System.out.println(\\\"目录创建成功\\\"); }else{ System.out.println(\\\"目录创建失败，原因未知\\\"); } } \"]},\"806\":{\"h\":\"Ⅳ. 删改\"},\"807\":{\"h\":\"1. renameTo\",\"t\":[\"文件重命名（移动）。\",\"这里的文件名是完整的文件名，完整的文件名是带路径的，因此重命名也可以做移动文件（文件名不改，路径改了）。\",\"方法参数是一个包含文件路径属性的File对象。\",\"boolean renameTo(File dest); File f1= new File(\\\"File/b.txt\\\"); File f2 = new File(\\\"File/c/newB.txt\\\"); boolean res = f1.renameTo(f2); System.out.println(res);//true System.out.println(f1);//File\\\\b.txt，f1的硬盘文件已经不存在了 System.out.println(f2);//File\\\\c\\\\newB.txt，f1的硬盘文件跑这里了 \"]},\"808\":{\"h\":\"1.1 重命名（移动）的条件\",\"t\":[\"如上：需要保证被移动的文件在硬盘中是存在的，且目标位置不能在硬盘中存在。\"]},\"809\":{\"h\":\"1.2 移动后的文件\",\"t\":[\"f1移动到f2后，f1和f2的对象都还在，只是此时，f1在硬盘上不存在了，到了f2的位置。 即：我们操作f2时，操作的是原来的f1，f1变成了一个硬盘上不存在的文件。\"]},\"810\":{\"h\":\"2. delete\",\"t\":[\"删除广义文件（包含目录）；不会进回收站；文件不存在会返回false。 如果要删除目录，只能删除空的目录，即：不能递归删除（安全考虑，可以自己写递归）。\",\"boolean delete(); File f1 = new File(\\\"files/img/avatar\\\"); File f2 = new File(\\\"files/img/avatars\\\"); File f3 = new File(\\\"files\\\"); boolean result = f1.delete(); System.out.println(result);//true boolean result2 = f2.delete(); System.out.println(result2); //false:删除的文件不存在 boolean result3 = f3.delete(); System.out.println(result3); //false:不能递归删除 \"]},\"811\":{\"h\":\"1-7. IO 类\"},\"812\":{\"h\":\"Ⅰ. InputStream & Reader\",\"t\":[\"位置\",\"rt.jar>java>io>InputStream.java 【abstract】\",\"rt.jar>java>io>Reader.java 【abstract】\",\"InputStream和Reader都是输入流，一个是读取字节的一个是读取字符的。\",\"他们的方法基本都是一样的。\",\"结构\",\"//1.InputStream public abstract class InputStream implements Closeable{ ...... } //2.Reader public abstract class Reader implements Readable,Closeable{ ... } \",\"构造器\",\"两个都是抽象类无法直接实现。\",\"下面例子均采用典型实现：FileInputStream和FileReader.\",\"注意：读取文件需处理异常：FileNotFoundException\",\"File f1 = new File(\\\"File/a.txt\\\"); FileInputStream fs = new FileInputStream(f1); FileInputStream fs = new FileInputStream(\\\"File/a.txt\\\");//方式二 File f2 = new File(\\\"File/k.jpg\\\"); FileReader fr = new FileReader(f2); FileReader fr = new FileReader(\\\"File/k.jpg\\\"); //方式二 \"]},\"813\":{\"h\":\"1. read 无参\",\"t\":[\"读取一个字节（字节流）或一个字符（字符流）\",\"InputStream：从输入流中读取数据的下一个字节。返回 0 到 255 范围内的 int 字节值。如果因 为已经到达流末尾而没有可用的字节，则返回值 -1\",\"Reader：读取单个字符。作为整数读取的字符，范围在 0 到 65535 之间 (0x00-0xffff)（2个字节的Unicode码），如果已到达流的末尾，则返回 -1\",\"该方法会抛出java.io.IOException异常\",\"int read(); FileInputStream steam = new FileInputStream(\\\"File/a.txt\\\"); FileReader reader = new FileReader(\\\"File/k.jpg\\\"); //读取一次 int steamRes = steam.read(); System.out.println(steamRes);//255,一个字节的二进制数据 char readerRes = (char)reader.read();//将字符的Unicode值转为字符 System.out.println(readerRes);//A,读到了字符A，转换成了65 //循环读取:以FileReader为例 int readData = reader.read(); while(readData != -1){ System.out.println((char)readData); readData = reader.read(); } \"]},\"814\":{\"h\":\"2. read 一参\",\"t\":[\"一次读取多个字节/字符到数组中。\",\"InputSteam： int read(byte[] b)，从此输入流中将最多 b.length 个字节的数据读入一个 byte 数组中，如果因为已经到达流末尾而没有可用的字节，则返回值 -1。否则以整数形式返回实际读取的字节数\",\"Reader： int read(char[] cbuf)，将字符读入数组。如果已到达流的末尾，则返回 -1。否则返回本次实际读取的字符数\",\"该方法会抛出java.io.IOException异常\",\"int read(byte[] b); int read(char[] cbuf); FileInputStream steam = new FileInputStream(\\\"File/a.txt\\\"); FileReader reader = new FileReader(\\\"File/k.jpg\\\"); //以FileReader读取字符为例 //读取一次 char[] cbuf = new char[3];//设置每次读取的长度 int len = reader.read(cbuf);//读取一次，返回值是字符数 System.out.println(len);//3 System.out.println(Arrays.toString(cbuf));//[A, , s],打印读取的字符数组 //循环读取 char[] cbuf = new char[5];//设置每次读取的长度 int len = reader.read(cbuf);//读取一次，返回值是字符数 while(len != -1){ for(int i = 0;i<len;i++){ System.out.println(cbuf[i]); } len = reader.read(cbuf); } \"]},\"815\":{\"h\":\"2.1 char[]参数\",\"t\":[\"可以当做读取数据的载体，没有他的时候，我们一次只能读1个字符，现在我们可以先将多个字符放入该数组中，然后一次读取多个字符。\"]},\"816\":{\"h\":\"2.2 byte[]参数\",\"t\":[\"同上，只是char[] 变成了 byte[]，读取的单位从字符变成了字节。\"]},\"817\":{\"h\":\"2.3 一个误区\",\"t\":[\"char[] cbuf = new char[5];\",\"char数组每次装 5个字符，下一次装载字符时，并非是空数组过去的，而是5个字符还在，装载时进行新旧字符的替换。当字符取模5有余数时，最后一趟是装不满的，也就是会有字符没有被替换，这时如果将数组中的字符全部取下来，就会取到错误的字符。\"]},\"818\":{\"h\":\"3. read 三参\",\"t\":[\"该方法额外多了两个参数：off和len，即将字符读入数组时，从off处开始读，最多读len个字符(或字节），如果已到达流的末尾，则返回 -1。否则返回本次读取的字符数。\",\"不是很常用。\",\"int read(byte[] b, int off,int len); int read(char[] cbuf,int off,int len); \"]},\"819\":{\"h\":\"4. close\",\"t\":[\"关闭流，该方法也需要处理异常：java.io.IOException，且close操作要方法其他异常的finally中。 所有打开的流资源，都必须手动调用close方法进行关闭。\",\"public void close() throws IOException; FileInputStream steam = new FileInputStream(\\\"File/a.txt\\\"); FileReader reader = new FileReader(\\\"File/k.jpg\\\"); stream.close(); reader.close(); \"]},\"820\":{\"h\":\"Ⅱ. OutputStream & Write\",\"t\":[\"位置\",\"rt.jar>java>io>Writer.java 【abstract】\",\"rt.jar>java>io>OutputStreamr.java 【abstract】\",\"OutputStream和Write都是输出流，一个是往外写字节的，一个是往外写字符的。\",\"他们的方法基本都是一样的。\",\"结构\",\"public class FileWriter extends OutputStreamWriter{} Public abstract class OutputStream implements Closeable, Flushable {} \",\"使用步骤\",\"实例化：new构造器\",\"写出：调用write()\",\"刷新：flush，将写的内容刷入文件\",\"关闭：close，关闭流\"]},\"821\":{\"h\":\"1. 实例化\",\"t\":[\"OutputStream和Write都是抽象类，无法直接实例化。 他们的常用实现类是：FileWriter和FileOutputStream。他们的方法基本是一样的。\",\"实例化的文件不存在：自动创建，前提是有权限\",\"实例化的文件已经存在：覆盖或追加写，由参数决定\",\"异常：会抛出IOException异常\"]},\"822\":{\"h\":\"1.1 FileWriter 实例化\",\"t\":[\"file：文件对象，数据会写到这个文件对象里。\",\"fileName：文件名，直接使用文件名,构造器内部自动new File(文件名) \",\"数据直接写入指定的文件名创建的文件中，\",\"append参数：true=追加写；false=覆盖写(默认)\",\"异常：会产生FileNotFoundException异常\",\"FileWriter(File file);//写入指定文件,覆盖写 FileWriter(File file, boolean append);//写入指定文件,自定义写入方式 FileWriter(String fileName);//写入指定文件名,覆盖写 FileWriter(String fileName, boolean append);//写入指定文件名,自定义写入方式 FileWriter(FileDescriptor fd);//略 FileWriter fileWriter = new FileWriter(\\\"File/a.txt\\\",true); fileWriter.write(\\\"Batman\\\"); \"]},\"823\":{\"h\":\"1.2 FileOutStream 实例化\",\"t\":[\"会产生IOException异常，参数同FileWriter。\",\"FileOutputStream(File file);//写入指定文件,覆盖写 FileOutputStream(File file, boolean append);//写入指定文件,自定义写入方式 FileOutputStream(String name);//写入指定文件名,覆盖写 FileOutputStream(String name, boolean append);//写入指定文件名,自定义写入方式 FileOutputStream(FileDescriptor fdObj);//略 FileOutputStream fos = new FileOutputStream(\\\"File/k.jpg\\\"); fileWriter.write(11); \"]},\"824\":{\"h\":\"2. write 字符\",\"t\":[\"将字符写入指定的文件。\",\"参数 int c：写入0 到 65535 之间的Unicode码\",\"参数 cbuf：写入字符数组\",\"参数 str：写入：字符串\",\"参数 int off & int len：写入cbuf或str的某一部分。从off开始，写入len个字符\",\"异常：会产生，IOException异常\",\"void write(int c)//写入Unicode void write(char[] cbuf)//写入char[] void write(char[] cbuf,int off,int len)//写入char[]的一部分 void write(String str);//写入String void write(String str,int off,int len)//写入String的一部分 FileWriter fileWriter = new FileWriter(\\\"File/a.txt\\\",false);//覆盖写 fileWriter.write(97);//写入Unicode 97->a,a.txt中出现a char[] cbuf = {'a','b','c','d'}; fileWriter.write(cbuf);//写入char[]数组,a.txt中出现了abcd fileWriter.write(\\\"Batman\\\");//写入字符串,a.txt中出现了Batman \",\"空格与换行符 如果是追加写，每次写入的字符都是无空格连在一起的，在同一行。如果要进行换行和输入空格，就需要手动输入空格或换行符\\\\n。\"]},\"825\":{\"h\":\"3. write 字节流\",\"t\":[\"向一张图片上写入字符，图片就打不开了。\",\"int b：写入字节，0~255\",\"byte[] b：将 b.length 个字节从指定的 byte 数组写入此输出流。write(b) 的常规协定是：应该与调用 write(b, 0, b.length) 的效果完全相同\",\"int off & int len：将指定 byte 数组中从偏移量 off 开始的 len 个字节写入此输出流\",\"void write(int b);//写入0~255字节数据 void write(byte[] b);//写入byte[] void write(byte[] b,int off,int len)//写入byte[]的一部分 FileOutputStream fos= new FileOutputStream(\\\"File/b\\\"); fos.write(1); byte[] b = {1,2,3,4,5}; fos.write(b); \",\"向一张图片上写入字符，图片就打不开了。\"]},\"826\":{\"h\":\"4. flush\",\"t\":[\"刷新该流的缓冲，则立即将它们写入预期目标。 该方法若不调用，可能会导致写入失败。\",\"void flush(); FileWriter fileWriter = new FileWriter(\\\"File/a\\\",false); FileOutputStream fos= new FileOutputStream(\\\"File/b\\\"); .... FileWriter.flush(); fos.flush(); \"]},\"827\":{\"h\":\"5. close\",\"t\":[\"关闭此输出流并释放与该流关联的所有系统资源。\",\"如果有try...catch语句，close方法一定要放到finally语句里，以保证资源肯定能被关闭。\",\"注意：该方法本身也会抛出异常，也需要进行处理。\",\"void close()throws IOException; FileWriter fw = null; try { fw = new FileWriter(\\\"File/a\\\", false); fw.write(\\\"I'm Batman\\\"); fw.flush(); } catch (IOException e) { e.printStackTrace(); } finally { try { if(fw !=null) fw.close(); } catch (IOException e) { e.printStackTrace(); } } \"]},\"828\":{\"h\":\"Ⅲ. 其他流的方法\"},\"829\":{\"h\":\"1. readLine\",\"t\":[\"使用缓冲流：BufferedReader，读取一行。\",\"该方法是读取一行数据（根据换行符来判定），并返回读到的数据，该方法是阻塞的，如果在接收的数据中不含有'\\\\n','\\\\r'或者结束符时，往往导致进程挂起，从而程序无法继续。\",\"如果读到文件的末尾就返回null。\",\"在IO模式下，该方法是一直等待输入的，直到遇到换行符，才会结束执行。\",\"String readLine() throws IOException; FileReader fr = new FileReader(\\\"files/a.txt\\\"); BufferedReader br = new BufferedReader(fr); data = br.readLine(); System.out.println(data); \"]},\"830\":{\"h\":\"2. newLine\",\"t\":[\"使用缓冲流BufferedWrite，输入换行符。\",\"在写出文件时，有时需要写出换行符，该方法就可以写出换行符，等价于 \\\"\\\\n\\\"\"]},\"831\":{\"h\":\"1-8. 反射类\"},\"832\":{\"h\":\"Ⅰ. Class - 类相关\",\"t\":[\"提示\",\"位置：rt.jar>java>lang>Class.java 【class】\",\"public final class Class<T> implements java.io.Serializable,GenericDeclaration,Type,AnnotatedElement{ ... } \"]},\"833\":{\"h\":\"1. 实例化\",\"t\":[\"共有四种获取Class类的实例的方式。\"]},\"834\":{\"h\":\"1.1 类的class属性\",\"t\":[\"若已知具体的类，通过类的class属性获取，该方法最为安全可靠，程序性能最高。\",\"Class<Person> clazz = Person.class; System.out.println(clazz); //class Basic.Person \"]},\"835\":{\"h\":\"1.2 对象的getClass方法\",\"t\":[\"已知某个类的实例，调用该实例的getClass()方法获取Class对象。\",\"Person person = new Person(); Class<? extends Person> clazz = person.getClass(); System.out.println(clazz); //class Basic.Person \"]},\"836\":{\"h\":\"1.3 Class.forName\",\"t\":[\"已知一个类的全类名（包+类名），且该类在类路径下，可通过Class类的静态方法forName()获取。\",\"可能抛出 ClassNotFoundException 异常\",\"Class<?> clazz = Class.forName(\\\"Basic.Person\\\"); System.out.println(clazz); //class Basic.Person \"]},\"837\":{\"h\":\"1.4 类加载器\",\"t\":[\"使用类的加载器：ClassLoader。\",\"ClassLoader cl = this.getClass().getClassLoader(); //获取当前对象的类加载器 Class<?> clazz = cl.loadClass(\\\"Basic.Person\\\");//根据类加载器加载目标类 System.out.println(clazz); //class Basic.Person,得到了目标类的Class实例 \"]},\"838\":{\"h\":\"2. forName\",\"t\":[\"返回指定类名 name 的 Class 对象，类名为全类名。\",\"static Class<?> forName(String className)throws ClassNotFoundException Class<?> clazz = Class.forName(\\\"Basic.Person\\\"); System.out.println(clazz); //class Basic.Person \"]},\"839\":{\"h\":\"3. newInstance\",\"t\":[\"使用当前运行时类，通过反射创建该类的对象。默认调用空参构造器。\",\"T newInstance() throws InstantiationException, IllegalAccessException Class<Person> clazz = Person.class;//获取Person类的Class对象 Person person = clazz.newInstance(); \"]},\"840\":{\"h\":\"4. getName\",\"t\":[\"返回此当前运行时类所表示的实体（类、接口、数组类、基本类型或void）名称。\",\"String getName() Class<Person> clazz = Person.class; String name = clazz.getName(); System.out.println(name);//Basic.Person \"]},\"841\":{\"h\":\"5. getSuperclass\",\"t\":[\"返回当前运行时类的父类的Class对象，Object是所有类的父类。\",\"Class<? super T> getSuperclass(); Class<Person> clazz = Person.class; Class<? super Person> superclass = clazz.getSuperclass(); System.out.println(superclass);//class java.lang.Object \"]},\"842\":{\"h\":\"6. getGenericSuperclass\",\"t\":[\"获取运行时类的父类的泛型。\",\"Type getGenericSuperclass(); Type genericSuperclass = clazz.getGenericSuperclass(); System.out.println(genericSuperclass); \"]},\"843\":{\"h\":\"7. getInterfaces\",\"t\":[\"获取当前运行时类实现的所有接口。\",\"Class<?>[] getInterfaces() Class<Person> clazz = Person.class; Class<?>[] interfaces = clazz.getInterfaces(); System.out.println(Arrays.toString(interfaces)); //[interface java.io.Serializable, interface java.lang.Comparable] \"]},\"844\":{\"h\":\"8. getClassLoader\",\"t\":[\"通过当前运行时类，返回该类的类加载器。\",\"ClassLoader getClassLoader() Class<Person> clazz = Person.class; ClassLoader classLoader = clazz.getClassLoader(); System.out.println(classLoader);//sun.misc.Launcher$AppClassLoader@18b4aac2 \"]},\"845\":{\"h\":\"9. getParent\",\"t\":[\"ClassLoader.getParent，获取加载器的父类。\",\"ClassLoader getParent(); Class<Person> clazz = Person.class; ClassLoader parent = clazz.getClassLoader().getParent(); System.out.println(parent);//sun.misc.Launcher$ExtClassLoader@677327b6 \"]},\"846\":{\"h\":\"10. getPackage\",\"t\":[\"获取运行时类所在的包。\",\"Package getPackage() Package pack = clazz.getPackage(); System.out.println(pack);//package Basic \"]},\"847\":{\"h\":\"Ⅱ. Class - 构造器相关\"},\"848\":{\"h\":\"1. getConstructors\",\"t\":[\"获取当前运行时类的构造器对象组成的数组，注意：不包含private构造器。\",\"Constructor<?>[] getConstructors() throws SecurityException Class<Person> clazz = Person.class; Constructor<?>[] constructors = clazz.getConstructors(); System.out.println(Arrays.toString(constructors)); //[public Basic.Person(), public Basic.Person(java.lang.String)] \"]},\"849\":{\"h\":\"2. getDeclaredConstructors\",\"t\":[\"获取当前运行时类中声明的所有的构造器。\",\"Constructor<?>[] getDeclaredConstructors() throws SecurityException Class<Person> clazz = Person.class; Constructor<?>[] cons = clazz.getDeclaredConstructors(); System.out.println(Arrays.toString(cons)); \"]},\"850\":{\"h\":\"3. getDeclaredConstructor\",\"t\":[\"取得本类的指定形参类型的构造器； 参数：就是构造器参数所属的Class。\",\"Constructor<T> getDeclaredConstructor(Class<?>... parameterTypes) throws NoSuchMethodException, SecurityException Class<Person> clazz = Person.class; Person p1 = clazz.newInstance();//调用无参构造器，创建Person对象 //调用有参构造器，该构造器接受一个String类谢谢的参数：String.class Constructor cons = clazz.getDeclaredConstructor(String.class); Person jin = (Person)cons.newInstance(\\\"jin\\\"); \"]},\"851\":{\"h\":\"Ⅲ. Class - 属性方法相关\"},\"852\":{\"h\":\"1. getFields\",\"t\":[\"获取当前运行时类及其父类中声明为public访问权限的属性。 返回值类型是：Field类数组。\",\"Field[] getFields() throws SecurityException Class<Person> clazz = Person.class; Field[] fields = clazz.getFields(); System.out.println(Arrays.toString(fields)); \"]},\"853\":{\"h\":\"2. getDeclareFields\",\"t\":[\"获取当前运行时类中声明的所有属性（不包含父类中声明的属性）。 返回值类型是：Field类数组。\",\"Field[] getDeclaredFields() throws SecurityException Class<Person> clazz = Person.class; Field[] fields = clazz.getDeclaredFields(); System.out.println(Arrays.toString(fields)); \"]},\"854\":{\"h\":\"3. getField\",\"t\":[\"获取指定的属性对象，不包括私有属性。 参数：参数就是String类型的属性名。\",\"Field getField(String name)throws NoSuchFieldException, SecurityException Class<Person> clazz = Person.class; Field age = clazz.getField(\\\"name\\\"); System.out.println(age); \"]},\"855\":{\"h\":\"4. getDeclaredField\",\"t\":[\"获取指定的属性对象，包括私有属性。 参数：参数就是String类型的属性名。\",\"Field getDeclaredField(String name)throws NoSuchFieldException, SecurityException Field age = clazz.getDeclaredField(\\\"age\\\"); System.out.println(age); \"]},\"856\":{\"h\":\"5. getMethods\",\"t\":[\"获取当前运行时类及其所有父类中声明为public权限的方法 返回值：Method类数组\",\"Method[] getMethods() throws SecurityException Class<Person> clazz = Person.class; Method[] methods = clazz.getMethods(); System.out.println(Arrays.toString(methods)); \"]},\"857\":{\"h\":\"6. getDeclaredMethods\",\"t\":[\"获取当前运行时类中声明的所有权限的方法（不包含父类中声明的方法）。 返回值：Method类数组\",\"Method[] getDeclaredMethods() throws SecurityException Class<Person> clazz = Person.class; Method[] methods = clazz.getDeclaredMethods(); System.out.println(Arrays.toString(methods)); \"]},\"858\":{\"h\":\"7. getMethod\",\"t\":[\"获取当前运行时类中的某一个方法的Method对象。\",\"参数就是String类型的方法名，以及参数类型列表。 只能获取public修饰的方法，一般用getDeclaredMethod。\",\"Method getMethod(String name, Class<?>... parameterTypes) throws NoSuchMethodException, SecurityException; Class<Person> clazz = Person.class; Method method = clazz.getMethod(\\\"say\\\",String.class); System.out.println(method); \"]},\"859\":{\"h\":\"8.getDeclaredMethod\",\"t\":[\"获取当前运行时类中的某一个方法的Method对象。可以获取任何修饰符修饰的方法。\",\"参数1 name：指明获取的方法的名\",\"参数2+：指明获取的方法的形参列表(参数类型)， \",\"注意：获取的是参数数据类型的Class对象\",\"有几个参数就写几个\",\"Method getDeclaredMethod(String name, Class<?>... parameterTypes) throws NoSuchMethodException, SecurityException Class<Person> clazz = Person.class; Method say = clazz.getDeclaredMethod(\\\"say\\\", String.class, int.class); System.out.println(say);//public void Basic.Person.say(java.lang.String,int) \"]},\"860\":{\"h\":\"Ⅳ. Field\",\"t\":[\"位置\",\"rt.jar.>java>lang>reflect>Field.java 【class】\",\"一个Field对象，就代表了一个运行时类的属性。\",\"结构\",\"class Field extends AccessibleObject implements Member {} \",\"实例化 通过Class类进行实例化，见上。\"]},\"861\":{\"h\":\"1. getModifier\",\"t\":[\"获取当前属性的权限修饰符。 返回值是0~3的int数字：\",\"0：默认类型\",\"1：public\",\"2：private\",\"3：protected\",\"int getModifiers() int modifiers = field.getModifiers(); System.out.println(modifiers);//2 \"]},\"862\":{\"h\":\"2. getType\",\"t\":[\"获取属性的数据类型，如果是引用类型，会返回完整的类名。\",\"Class<?> getType() Class<?> type = field.getType(); System.out.println(type);//int \"]},\"863\":{\"h\":\"3. getName\",\"t\":[\"获取字符串形式的属性名。\",\"String getName() String name = field.getName(); System.out.println(name);//age \"]},\"864\":{\"h\":\"4. get\",\"t\":[\"通过Field对象，获取属性值。\",\"参数： \",\"参数1：要获取哪个对象的属性（需要先创建对象）\",\"参数2：要设置的属性的值\",\"返回值：Object类型，可以根据需要转型\",\"Private：无法直接操作private属性，需要先调用setAccessible\",\"Object get(Object obj) Class<Person> clazz = Person.class; Person person = clazz.newInstance(); Field age = clazz.getDeclaredField(\\\"age\\\"); age.setAccessible(true); int o = (int)age.get(person); System.out.println(o); \"]},\"865\":{\"h\":\"5. set\",\"t\":[\"通过Field对象，设置属性的值。\",\"参数：要设置哪个对象的属性（需要先创建对象）\",\"Private：无法直接操作private属性，需要先调用setAccessible\",\"void set(Object obj, Object value) throws IllegalArgumentException, IllegalAccessException Class<Person> clazz = Person.class; Person person = clazz.newInstance(); Field age = clazz.getDeclaredField(\\\"age\\\"); age.setAccessible(true); age.set(person,30); System.out.println(age.get(person));//30 \"]},\"866\":{\"h\":\"6. setAccessible\",\"t\":[\"保证当前属性是可访问的，包括private类型的。\",\"void setAccessible(boolean flag) throws SecurityException //见上 \"]},\"867\":{\"h\":\"Ⅴ. Method\",\"t\":[\"位置\",\"rt.jar>java>lang>reflect>Method.java 【class】\",\"结构\",\"public final class Method extends Executable {} \",\"实例化 通过Class进行实例化；见上。\"]},\"868\":{\"h\":\"1. getAnnotations\",\"t\":[\"获取方法的注解\",\"Annotation[] getAnnotations() Class<Person> clazz = Person.class; Method method = clazz.getMethod(\\\"say\\\",String.class); Annotation[] anno = method.getAnnotations(); System.out.println(Arrays.toString(anno)); //[@org.junit.Test(timeout=0, expected=class org.junit.Test$None)] \"]},\"869\":{\"h\":\"2.getModifiers\",\"t\":[\"获取权限修饰符，返回值是0~3的int数字\",\"0：默认类型\",\"1：public\",\"2：private\",\"3：protected\",\"int getModifiers() int modifier = method.getModifiers(); System.out.println(modifier);//1 \"]},\"870\":{\"h\":\"3. getReturnType\",\"t\":[\"获取返回值类型,如果是引用类型，会返回完整的类名。\",\"Class<?> getReturnType() Class<?> returnType = method.getReturnType(); System.out.println(returnType);//void \"]},\"871\":{\"h\":\"4. getName\",\"t\":[\"获取字符串形式的方法名。\",\"String getName() String name = method.getName(); System.out.println(name);//say \"]},\"872\":{\"h\":\"5. getParameterTypes\",\"t\":[\"获取形参列表，返回的只有形参的类型。\",\"Class<?>[] getParameterTypes() Class<?>[] params = method.getParameterTypes(); System.out.println(Arrays.toString(params));//[class java.lang.String] String name = params[0].getName(); System.out.println(name);//String:获取字符串类型的形参 \"]},\"873\":{\"h\":\"6. getExceptionTypes\",\"t\":[\"获取抛出的异常，可能是多个异常，返回的是数组。\",\"Class<?>[] getExceptionTypes() Class<?>[] exception = method.getExceptionTypes(); System.out.println(Arrays.toString(exception));//[] \"]},\"874\":{\"h\":\"7.invoke\",\"t\":[\"调用方法对象（Method）的invoke方法来执行获得的方法\",\"参数1：方法的调用者\",\"参数2：给方法形参赋值的实参\",\"返回值：对应类中调用的方法的返回值，没有返回值就返回null。\",\"静态方法：如果是静态方法调用invoke，那么调用者是类或者null也可以。\",\"Object invoke(Object obj, Object... args) throws IllegalAccessException, IllegalArgumentException,InvocationTargetException Class<Person> clazz = Person.class; Person person = clazz.newInstance(); Method say = clazz.getDeclaredMethod(\\\"say\\\", String.class, int.class); System.out.println(say); say.invoke(person,\\\"a\\\", 1); \"]},\"875\":{\"h\":\"8. setAccessible\",\"t\":[\"保证当前方法是可访问的，包括private类型的。 同Field.setAccessible。\"]},\"876\":{\"h\":\"Ⅵ. Constructor\",\"t\":[\"构造方法\",\"public final class Constructor<T> extends Executable {} \",\"实例化 同Class对象进行获取Constructor对象。\"]},\"877\":{\"h\":\"1. newInstance\",\"t\":[\"根据获取的构造器创建类的对象\",\"T newInstance(Object ... initargs) throws InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException Class<Person> clazz = Person.class; Constructor<Person> cons = clazz.getDeclaredConstructor(int.class); cons.setAccessible(true); Person person = cons.newInstance(1); \"]},\"878\":{\"h\":\"2. setAccessible\",\"t\":[\"保证当前构造器是可访问的，包括private类型的。\\n同Field.setAccessible\"]},\"879\":{\"h\":\"1-9. 其他类\"},\"880\":{\"h\":\"Ⅰ. System\",\"t\":[\"位置\",\"Library>java>lang>System.java 【class】\",\"System类代表系统，系统级的很多属性和控制方法都放置在该类的内部。\",\"由于该类的构造器是private的，所以无法创建该类的对象，也就是无法实例化该类。其内部的成员变量和成员方法都是static的，所以也可以很方便的进行调用。\",\"结构\",\"public final class System { private System(){} } \"]},\"881\":{\"h\":\"1. currentTimeMillion\",\"t\":[\"获取毫秒时间戳，单位 ms，可以用来计算时间差。\",\"long currentTimeMillis(); long ms = System.currentTimeMillis(); System.out.println(ms); //1654740094502 \"]},\"882\":{\"h\":\"2. exit\",\"t\":[\"该方法的作用是退出程序。其中status的值为0代表正常退出，非零代表异常退出。 使用该方法可以在图形界面编程中实现程序的退出功能等。\",\"void exit(int status); \"]},\"883\":{\"h\":\"3. gc\",\"t\":[\"垃圾回收，该方法的作用是请求系统进行垃圾回收。至于系统是否立刻回收，则取决于系统中垃圾回收算法的实现以及系统执行时的情况。\",\"void gc(); \"]},\"884\":{\"h\":\"4. getProperty\",\"t\":[\"获取系统信息，该方法的作用是获得系统中属性名对应的值。\",\"系统中常见的属性名以及属性的作用如下表所示：\",\"String getProperty(String key); ====================================================================== String javaVersion = System.getProperty(\\\"java.version\\\"); System.out.println(javaVersion); //1.8.0_321 String javaHome = System.getProperty(\\\"java.home\\\"); System.out.println(javaHome);//D:\\\\Java\\\\Soft\\\\JDK\\\\jdk1.8.0_321\\\\jre String osName = System.getProperty(\\\"os.name\\\"); System.out.println(osName);//Windows 10 String osVersion = System.getProperty(\\\"os.version\\\"); System.out.println(osVersion);//10.0 String userName = System.getProperty(\\\"user.name\\\"); System.out.println(userName);//A String userHome = System.getProperty(\\\"user.home\\\"); System.out.println(userHome);//C:\\\\Users\\\\A String userDir = System.getProperty(\\\"user.dir\\\"); System.out.println(userDir);//D:\\\\Java\\\\workplace\\\\Learn \"]},\"885\":{\"h\":\"2-1. Scanner\",\"t\":[\"位置\",\"rt.jar>java>util>Scanner.java 【class】\",\"用来扫描输入文本的类。 Scanner类的用法很多，这里只介绍简单的命令行，方便进行一些测试。\",\"结构\",\"public final class Scanner implements Iterator<String>,Closeable{ .... } \",\"使用 通过Scanner类来获取用户的输入。\",\"通过 Scanner 类的 next() 与 nextLine() 方法获取输入的字符串，在读取前我们一般需要使用hasNext 与 hasNextLine 判断是否还有输入的数据。\"]},\"886\":{\"h\":\"1. new Scanner\",\"t\":[\"构建一个Scanner对象，他生产从指定输入流扫描的值。当参数为System.in：表示从键盘获取输入的内容。\",\"Scanner(InputStream source);//这只是构造方法之一 Scanner scan = new Scanner(System.in); \"]},\"887\":{\"h\":\"2. next\",\"t\":[\"从此扫描仪查找并返回下一个完整令牌。\",\"用户从键盘输入内容，按回车即输入完毕，输入完毕后，Scanner.next方法就获取输入的内容。\",\"无参数：对即将获取的内容无限制。\",\"有参数：参数可以是String类型的正则或者Pattern类，该参数将限制接下来要输入的数据格式，只有与正则匹配的内容才可以。\",\"String next(); String next(String pattern); String next(Pattern pattern); Scanner scan = new Scanner(System.in); System.out.println(\\\"请输入姓名\\\"); String next = scan.next();//键盘输入：hello System.out.println(next);//hello \",\"效果\",\"执行代码；弹出命令行窗口，显示打印的字符：请输入姓名\",\"可以在键盘输入字符，点击Enter键完成输入\",\"输入完毕后，scan.next方法获取输入的字符串，并继续向下执行代码\",\"代码执行完毕，命令行交互结束\"]},\"888\":{\"h\":\"3. nextXxx\",\"t\":[\"next方法，会将获取的索引内容都当做字符串处理。\",\"也可以调用nextXxx方法（Xxx为基本数据类型），限制输入的字符类型。\",\"对于Number类型的Xxx有一个可选参数 radix，radix指的是进制。 \",\"radix取值为：2~36，即：最小是2进制，最大是36进制。\",\"输入数据时如果输入的值超过了进制或者超过了数据类型的范围，或者与数据类型不符都会报错。\",\"对于输入的非十进制数据，获取后的值依然是十进制。\",\"注意：Scanner没有提供Char类型next方法\",\"byte nextByte(int radix); boolean nextBoolean(); short nextShrot(int radix); int nextInt(int radix); long nextLong(int radix); float nextFloat(int radix); double nextDouble(int radix); BigInteger nextBigInter(int radix); BigDecimal nextBigDecimal(); Scanner scan = new Scanner(System.in); System.out.println(\\\"请输入\\\"); int next = scan.nextByte(2);//Byte类型的二进制数据 //键入：11111 System.out.println(next);//31,11111自动转为了十进制 \"]},\"889\":{\"h\":\"2-2. Arrays\",\"t\":[\"提示\",\"位置：Libraries>java.util Arrays.java 【class】\",\"java.util.Arrays类即为操作数组的工具类，包含了用来操作数组（比如排序和搜索）的各种方法 该类为工具类，因此该类的方法都是 public static方法。\",\"结构\",\"public class Arrays { private static final int MIN_ARRAY_SOCRT_GRAN = 1 <<13; } \"]},\"890\":{\"h\":\"1. toString\",\"t\":[\"将数组转为字符串形式。 数组是引用类型，直接打印，打印的是内存地址，使用该方法可以将数组作为字符串打印。\",\"String toString( Object [] a);//该方法对各种类型的参数进行了重构 int[] arr1 = {1,2,3}; System.out.println(arr1); //[I@677327b6 System.out.println(Arrays.toString(arr1));//[1, 2, 3] \"]},\"891\":{\"h\":\"2. sort\",\"t\":[\"注意\",\"排序并非是返回一个新数组，而是直接改变了源数组\",\"对数组进行排序，该方法有好几个重构方法，针对不同的数据类型和排序方式。\"]},\"892\":{\"h\":\"2.1 sort(int[] a)\",\"t\":[\"对int类型数组的值按数字大小的升序(默认)进行排序。\",\"如下：formIndex为开始排序的下标，toIndex-1为终点下标，不指定就是排序整个数组。\",\"void sort(int[] a, int fromIndex, int toIndex) int[] arr1 = {1,5,8,2,3}; Arrays.sort(arr1); System.out.println(Arrays.toString(arr1));//[1, 2, 3, 5, 8] \"]},\"893\":{\"h\":\"2.2 sort(T[] a, Comparator<? super T> c)\",\"t\":[\"根据传入的Comparator接口子类，自定义排序规则。\",\"sort(T[] a, Comparator<? super T> c) Integer[] arr1 = {1,5,8,2,3};//因为使用了泛型，这里要用Integer而非int //2.创建MyComparator类的对象 MyComparator mc = new MyComparator(); //3.将mc作为参数传入给sort方法 Arrays.sort(arr1,mc); System.out.println(Arrays.toString(arr1));//[8, 5, 3, 2, 1] //1.先定义一个实现Comparator接口的类:可以定义成内部类 static class MyComparator implements Comparator<Integer>{ @Override //重写比较大小的核心方法：int类型倒序 public int compare(Integer o1, Integer o2) { if(o1<o2){ return 1; }else if(o1>o2){ return -1; }else{ return 0; } } } \"]},\"894\":{\"h\":\"3. binarySearch\",\"t\":[\"在数组中查询指定元素，返回元素的索引，这里采用的是二分法。 根据参数数组的数据类型不同，该方法有很多重构方法。同时有一个包含Comparator的重构方法，自定义排序算法。\",\"参数：formIndex参数指定开始排序的下标，toIndex指定结束排序的下标（不包含toIndex）\",\"返回值：如果没找到就返回负数（不一定是-1），找到了就返回第一次出现的索引。\",\"int binarySearch(int[] a, int fromIndex, int toIndex,int key) int[] arr1 = {1,5,8,8,2,3}; int k1 = Arrays.binarySearch(arr1, 8); int k2 = Arrays.binarySearch(arr1, 6); System.out.println(k1); //2 System.out.println(k2); //-3 \"]},\"895\":{\"h\":\"4. copyOf\",\"t\":[\"提示\",\"注意：该复制是真的值复制，而非引用的复制\",\"复制指定的数组，可以指定复制的长度。\",\"T[] copyOf(T[] original, int newLength) int[] arr1 = {1,5,8,8,2,3}; int[] arr2 = Arrays.copyOf(arr1, arr1.length); System.out.println(arr1); //[I@677327b6 System.out.println(arr2); //[I@14ae5a5 两个内存地址是不一样的 System.out.println(Arrays.toString(arr1)); //[1, 5, 8, 8, 2, 3] System.out.println(Arrays.toString(arr2)); //[1, 5, 8, 8, 2, 3] 值一样 \"]},\"896\":{\"h\":\"5. equals\",\"t\":[\"比较两个数组是否相等，Arrays类重写了Object类中的equals，当两个数组中所有元素都相等时，两个数组就相等。(该仿佛根据参数中的数组数据类型不通有多个重构方法)。\",\"值相等也意味着值的数据类型必须相等。\",\"boolean equals(int[] a, int[] a2) int[] arr1 = {1,5,8,8,2,3}; int[] arr2 = {1,5,8,8,2,3}; boolean res = Arrays.equals(arr1, arr2); System.out.println(res); //true \"]},\"897\":{\"h\":\"6. asList\",\"t\":[\"数组转换为List集合。\",\"List<T> asList(T... a) String[] arr = {\\\"a\\\",\\\"b\\\",\\\"c\\\",\\\"d\\\"}; List<String> str = Arrays.asList(arr); str.add(\\\"ff\\\"); //这里会报异常 System.out.println(str); \",\"注意\",\"sList方法会返回一个ArrayList，但是该ArrayList只是Arrays的内部静态类的ArrayList，他跟真正的ArrayList集合是有差异的，Arrays$ArrayList和ArrayList都是继承AbstractList，AbstractList中的add、remove等操作都是默认抛出异常的，ArrayList中重写了这些方法，但是Arrays$ArrayList中并没有重写这些方法，因此在使用时会报异常：UnsupportedOperationException\"]},\"898\":{\"h\":\"7. fill\",\"t\":[\"将指定值填充到数组之中，用于数组的初始化和填充。\",\"fill(int[] a, int val) int[] arr1 = new int[5]; Arrays.fill(arr1,7); System.out.println(Arrays.toString(arr1)); //[7, 7, 7, 7, 7] \"]},\"899\":{\"h\":\"8. asList\",\"t\":[\"快速生成一个List集合，该方式返回的是 ArrayList 实例。 该方法可用于快速生成一个List集合。\",\"参数：就是集合的元素，注意参数类型要统一。\",\"public static <T> List<T> asList(T... a) { return new ArrayList<>(a);//返回的是ArrayList } List<String> list = Arrays.asList(\\\"a\\\", \\\"b\\\", \\\"c\\\"); System.out.println(list);//[a, b, c] \"]},\"900\":{\"h\":\"2-3. Collection+\"},\"901\":{\"h\":\"Ⅰ. Collection\",\"t\":[\"位置\",\"Libraries>java>util Collection.java 【interface】\"]},\"902\":{\"h\":\"结构\",\"t\":[\"public interface Collection<E> extends Iterable<E>{ //无成员变量 } \"]},\"903\":{\"h\":\"应用范围\",\"t\":[\"Collection 接口是 List、Set 和 Queue 接口的父接口，因此Collection接口中定义的方法，其子接口和子接口的实现类也同样可以使用。 实现类为：ArrayList; Vector;LinkedList; HashSet; LinkedHashSet; TreeSet;\"]},\"904\":{\"h\":\"泛型\",\"t\":[\"创建容器对象时，可以指定泛型，此时使用Collection接口的方法就会被泛型类型限制了。 如果不指定泛型，则不会有泛型限制，统一视为obj类型。\"]},\"905\":{\"h\":\"1. add\",\"t\":[\"将元素添加到集合中，元素可以是任何类型，基本数据类型会自动装箱。\",\"boolean add(E e); ========================================================= Collection<String> coll = new ArrayList<>(); coll.add(\\\"aa\\\"); String str = \\\"bb\\\"; coll.add(str); System.out.println(coll); //[aa, bb] \"]},\"906\":{\"h\":\"2. addAll\",\"t\":[\"将其他集合的元素添加到当前集合，即合并另一个集合。\",\"boolean addAll(Collection<? extends E> c); //注意两个集合的泛型要求 ========================================================= Collection<String> coll = new ArrayList<>(); coll.add(\\\"aa\\\"); coll.add(\\\"bb\\\"); Collection<String> coll2 = new ArrayList<>(); coll2.add(\\\"cc\\\"); coll2.add(\\\"dd\\\"); coll.addAll(coll2);//将coll2集合中的元素添加到集合coll System.out.println(coll);//[aa, bb, cc, dd] System.out.println(coll2);//[cc, dd]; 集合coll2依然还在,还可以继续使用 \"]},\"907\":{\"h\":\"3. size\",\"t\":[\"获取集合的元素个数。\",\"int size(); ========================================== int size = coll.size(); //[aa, bb, cc, dd] System.out.println(size); //4 \"]},\"908\":{\"h\":\"4. clear\",\"t\":[\"清空集合元素，集合变为空集合。\",\"void clear(); ==================================== coll.clear(); //coll == [aa, bb, cc, dd] System.out.println(coll); // [] \"]},\"909\":{\"h\":\"5. isEmpty\",\"t\":[\"判断集合是否为空。\",\"boolean isEmpty(); ============================== coll.clear(); boolean result = coll.isEmpty(); System.out.println(result); //true \"]},\"910\":{\"h\":\"6. contains\",\"t\":[\"集合中是否包含某个元素。 注意：比较的方式是，将待比较元素与集合中的元素做equal。\",\"对于基本数据类型的包装类和String，都重写了equals方法，可以正常比较值；\",\"而我们自定义的类，如果不重写equals方法，将无法进行比较，直接返回false。 \",\"因此向Collection接口的实现类的对象中添加数据obj时，要求obj所在类要重写equals()\",\"boolean contains(Object o); ========================================================= boolean res1 = coll.contains(\\\"aa\\\"); //coll == [aa, bb, cc, dd] System.out.println(res1);//true //自定义类：未重写equals，无法比较值，返回false System.out.println(coll.contains(new Person(\\\"jinno\\\",20)));//false //在Person类中重写equals后 //自定义类：已重写equals，可以比较值，若属性完全相同，返回true System.out.println(coll.contains(new Person(\\\"jinno\\\",20)));//true \"]},\"911\":{\"h\":\"7. containsAll\",\"t\":[\"比较是否包含某个集合\",\"算法：拿两个集合的元素挨个比较，判断形参c中的所有元素是否都存在于当前集合中，都存在（即被包含）就返回true。\",\"boolean containsAll(Collection<?> c); ============================================= //coll == [aa, bb, cc, dd]; coll2 == [cc,dd] boolean res3 = coll.containsAll(coll2); System.out.println(res3); //true \"]},\"912\":{\"h\":\"8. remove\",\"t\":[\"从集合中删除指定的元素，算法是：使用参数与集合中的每个元素做equals判断，找到即删除。 该方法只会删除找到的第一个元素，对于自定义类，需要重写equals方法，不如无法删除成功。\",\"boolean remove(Object obj);//该方法最初是定义在iterator中的 ========================================================= //coll == [aa,bb,cc,dd] boolean res4 = coll.remove(\\\"dd\\\"); System.out.println(res4); //true; System.out.println(coll); //[aa,bb,cc] \"]},\"913\":{\"h\":\"9. removeAll\",\"t\":[\"移除交集，求差集；\",\"将当前集合与参数集合做差集，并将差集从当前集合中移除。即移除当前集合中，参数集合也有的元素。\",\"boolean removeAll(Collection<?> c); ======================================== //coll == [aa,bb,cc,dd]; coll2 == [cc,dd] boolean result5 = coll.removeAll(coll2); System.out.println(coll); //[aa,bb] \"]},\"914\":{\"h\":\"10. retainAll\",\"t\":[\"计算当前集合和参数集合的交集，并将交集返回到当前的集合中。\",\"boolean retainAll(Collection<?> c); ========================================================= //coll == [aa,bb,cc,dd]; coll2 == [cc,hello] boolean res = coll.retainAll(coll2); System.out.println(res);//true,true表示执行成功,而非找到了交集 System.out.println(coll); //[cc] \"]},\"915\":{\"h\":\"11. equals\",\"t\":[\"判断两个集合是否想等，两个集合会用equals比对集合中的所有obj，全部相等就会返回true。\",\"注意：不同的Collection子类都重写了equal方法，比对时，不同的子类对顺序要求不同，对于ArrayList，他是有序的，所以集合元素如果都相同，但是顺序不同，也会返回false。\",\"boolean equals(Object o); ================================= coll.equals(coll2);//boolean \"]},\"916\":{\"h\":\"12. toArray\",\"t\":[\"将集合转为数组。\"]},\"917\":{\"h\":\"12.1 转为Object类型的数组\",\"t\":[\"Object[] toArray(); ==================================== Object[] obj = coll.toArray(); System.out.println(Arrays.toString(obj)); \"]},\"918\":{\"h\":\"12.2 转为指定类型的数组\",\"t\":[\"<T> T[] toArray(T[] a); ===================================================== String[] arr = coll.toArray(new String[coll.size()]); \"]},\"919\":{\"h\":\"13. iterator\",\"t\":[\"返回迭代器对象，用于集合遍历\",\"Iterator<E> iterator(); ===================================== Iterator it = coll.iterator(); System.out.println(it); //java.util.ArrayList$Itr@4554617c \"]},\"920\":{\"h\":\"Ⅱ. Iterator\",\"t\":[\"位置\",\"Libraries>java>util Iterator.java 【interface】\"]},\"921\":{\"h\":\"结构\",\"t\":[\"public interface Iterator<E>{ ... } \"]},\"922\":{\"h\":\"使用\",\"t\":[\"通过Collection接口的iterator()方法获取 实现了Iterator接口的对象。 Collection接口实现对象，每调用一次iterator方法，就会产生一个Iterator迭代器对象\"]},\"923\":{\"h\":\"指针\",\"t\":[\"iterator对象有一个指针，指向集合中的某个元素。对于一个全新的迭代器，他的指针在第一个元素之前（注意是之前），每次执行一次next方法，指针就往后移动一次。\"]},\"924\":{\"h\":\"1. hasNext\",\"t\":[\"用来判断指针后面还有没有集合元素。\",\"boolean hasNext(); ===================================== //Collection<Integer> coll == [1,2,3,4] Iterator<Integer> it = coll.iterator(); boolean res = it.hasNext(); System.out.println(res); //true \"]},\"925\":{\"h\":\"2. next\",\"t\":[\"iterator.next()用来向后移动一次指针，并取出指针指向的集合元素，进行返回。\",\"注意：当指针已经指向最后时，就不能再调用next方法了，会抛出异常，且取完数据后，指针就会呆在集合末尾，不会自动重置。\",\"E next(); ===================================== //Collection<Integer> coll == [1,2,3,4] Iterator<Integer> it = coll.iterator(); Integer nextVal = it.next(); System.out.println(nextVal); //1 \"]},\"926\":{\"h\":\"3. remove\",\"t\":[\"remove方法用来在遍历的时候，删除集合中的元素。此方法不同于集合直接调用remove()。\",\"注意：如果还未调用next()或在上一次调用 next 方法之后已经调用了 remove 方法，再调用remove都会报IllegalStateException。\",\"void remove() ===================================== //Collection<Integer> coll == [1,2,3,4] Iterator<Integer> it = coll.iterator(); Integer nextVal = it.next();//此时指针指向1; it.remove();//移除指针指向的值：1; System.out.println(coll); //[2, 3, 4] ,值为1的集合元素被删除 \"]},\"927\":{\"h\":\"Ⅲ. Collections\",\"t\":[\"位置\",\"rt.jar>java>util>Collections.java 【class】\",\"不要跟Collection搞混了，前者是个集合接口，后者是操作接口的工具类。\",\"Collections 中提供了一系列静态的方法对集合元素进行排序、查询和修改等操作，还提供了对集合对象设置不可变、对集合对象实现同步控制等方法。\"]},\"928\":{\"h\":\"结构\",\"t\":[\"public class Collections{ private Collections(){} } \"]},\"929\":{\"h\":\"用途\",\"t\":[\"Collections 是一个操作 Set、List 和 Map 等集合的工具类Map相关的方法比较少。\",\"排序：主要是List集合，就他用顺序。\",\"查找替换：主要是Collection集合的操作方法\",\"多线程同步：Collections 类中提供了多个 synchronizedXxx() 方法，该方法可使将指定集合包装成线程同步的集合，从而可以解决多线程并发访问集合时的线程安全问题。\"]},\"930\":{\"h\":\"1. reverse\",\"t\":[\"元素反转，仅List可用，就他有顺序。 反转 List 中元素的顺序。\",\"void reverse(List<?> list) ======================================== List<Integer> list = new ArrayList<>(); list.add(1); list.add(2); list.add(3); System.out.println(list); //[1, 2, 3] Collections.reverse(list); System.out.println(list); //[3, 2, 1] \"]},\"931\":{\"h\":\"2. shuffle\",\"t\":[\"随机排序，仅List可用，就他有顺序。\",\"void shuffle(List<?> list); ==================================== //list = [1,3,3] System.out.println(list); //[1, 2, 3] Collections.shuffle(list); System.out.println(list); //[3, 2, 1] Collections.shuffle(list); System.out.println(list); //[3, 1, 2] \"]},\"932\":{\"h\":\"3. sort\",\"t\":[\"排序，仅List可用，就他有顺序。\",\"自然排序：仅一个参数，待排序的list\",\"自定义排序：根据指定的第二个参数Comparator进行排序\",\"<T extends Comparable<? super T>> void sort(List<T> list); <T> void sort(List<T> list, Comparator<? super T> c); ========================================================= //list = [1, 5, 3, 6, 4] System.out.println(list); //[1, 5, 3, 6, 4] Collections.sort(list); //进行自然排序 System.out.println(list);//[1, 3, 4, 5, 6] Collections.sort(list,new Comparator(){ //进行定制排序 public int compare(Object o1, Object o2) { return (int) o2 - (int) o1; //从大到小排序 } }); System.out.println(list); //[6, 5, 4, 3, 1] \"]},\"933\":{\"h\":\"4. swap\",\"t\":[\"交换元素位置，仅List可用，就他有顺序。 将指定 list 集合中的 i 处元素和 j 处元素进行交换\",\"void swap(List<?> list, int i, int j) ========================================== //list = [1, 5, 3, 6, 4] System.out.println(list);//[1, 5, 3, 6, 4] Collections.swap(list,1,2); System.out.println(list);//[1, 3, 5, 6, 4] \"]},\"934\":{\"h\":\"5. max\",\"t\":[\"返回给定集合中的最大元素\",\"自然排序：默认采用自然排序。\",\"定制排序：可以指定第二个参数，进行定制排序。\",\"<T extends Object & Comparable<? super T>> T max(Collection<? extends T> coll); <T> T max(Collection<? extends T> coll, Comparator<? super T> comp); ========================================================= //list = [1, 5, 3, 6, 4] Integer max = Collections.max(list); System.out.println(max);//6 \"]},\"935\":{\"h\":\"6. min\",\"t\":[\"返回最小元素\",\"自然排序：默认采用自然排序。\",\"定制排序：可以指定第二个参数，进行定制排序。\",\"<T extends Object & Comparable<? super T>> T min(Collection<? extends T> coll); <T> T min(Collection<? extends T> coll, Comparator<? super T> comp); ========================================================= //list = [1, 5, 3, 6, 4] Integer min = Collections.min(list); System.out.println(min);//1 \"]},\"936\":{\"h\":\"7. frequency\",\"t\":[\"返回指定集合中指定元素的出现次数\",\"int frequency(Collection<?> c, Object o); =============================================== //list = [1, 5, 2, 3, 5] int frequency = Collections.frequency(list, 5); System.out.println(frequency);//2 \"]},\"937\":{\"h\":\"8. copy\",\"t\":[\"集合复制，将参数src集合的内容复制到参数dest集合中。\",\"注意：直接向一个空的集合中复制会报异常，IndexOutOfBoundsException，需要先创建一个同等长度的集合（也可以大于）。\",\"<T> void copy(List<? super T> dest, List<? extends T> src) ========================================================= List<Integer> list = new ArrayList<>(); list.add(1); list.add(2); list.add(3); ArrayList<Integer> list2 = new ArrayList<>(); list2.add(null); list2.add(null); list2.add(null); list2.add(null); Collections.copy(list2,list); System.out.println(list);//[1, 2, 3] System.out.println(list2);//[1, 2, 3, null] \"]},\"938\":{\"h\":\"9. replaceAll\",\"t\":[\"使用新值替换List 对象的所有旧值。\",\"<T> boolean replaceAll(List<T> list, T oldVal, T newVal); ========================================================= //list = [1, 1,0] Collections.replaceAll(list, 1, 2); System.out.println(list);//[2, 2, 0] \"]},\"939\":{\"h\":\"10. synchronizedXxx\",\"t\":[\"获取线程安全的集合，参数传入一个线程不安全的集合，返回一个线程安全的同类集合。\",\"<T> List<T> synchronizedList(List<T> list); <T> Collection<T> synchronizedCollection(Collection<T> c); <K,V> Map<K,V> synchronizedMap(Map<K,V> m); <K,V> NavigableMap<K,V> synchronizedNavigableMap(NavigableMap<K,V> m); <T> NavigableSet<T> synchronizedNavigableSet(NavigableSet<T> s); <T> Set<T> synchronizedSet(Set<T> s); <K,V> SortedMap<K,V> synchronizedSortedMap(SortedMap<K,V> m); <T> SortedSet<T> synchronizedSortedSet(SortedSet<T> s); ========================================================= List<Integer> list = new ArrayList<>(); list.add(1); list.add(1); list.add(0); List<Integer> syncList = Collections.synchronizedList(list); \"]},\"940\":{\"h\":\"2-4. List & Map\"},\"941\":{\"h\":\"Ⅰ. List\",\"t\":[\"位置\",\"rt.jar>java>util>List.java 【interface】\",\"List除了从Collection集合继承的方法外，List 集合里添加了一些根据索引来操作集合元素的方法。 并对Collection的很多方法进行了重载。以下介绍的方法都是新增或重载后的方法。\"]},\"942\":{\"h\":\"结构\",\"t\":[\"public interface List<E> extends Collection<E>{ ... } \"]},\"943\":{\"h\":\"使用说明\",\"t\":[\"List是接口不能直接实例化，这里所有案例均以ArrayList为例。 集合都是可以指定泛型的，如果不指定泛型，就接受Object类，以下使用均会含有泛型。\"]},\"944\":{\"h\":\"Arrays.asList\",\"t\":[\"可以使用Arrays.asList方法快速生成一个List集合。\",\"List<String> list = Arrays.asList(\\\"a\\\", \\\"b\\\", \\\"c\\\"); System.out.println(list);//[a, b, c] \"]},\"945\":{\"h\":\"1. add\",\"t\":[\"添加数据，重载方法。\",\"1个参数 ele：就是使用的collection的add()，\",\"2个参数 index,ele：就使用ArrayList中重载的，即向某个index插入数据，其他数据index顺延。 \",\"index：集合的索引\",\"ele：待添加的集合元素。\",\"void add(int index, E element); ======================================= List<String> list = new ArrayList<>(); list.add(\\\"a\\\"); list.add(\\\"c\\\"); System.out.println(list);//[a, c] list.add(1,\\\"b\\\"); System.out.println(list);//[a, c] \"]},\"946\":{\"h\":\"2. addAll\",\"t\":[\"添加另一个集合的元素，重载方法。\",\"1个参数 eles：就是使用的collection中的addAll，直接添加另一个集合\",\"2个参数 index,eles：使用ArrayList重载的，可以从指定的index开始插入另一个集合的数据。 \",\"index：集合的索引\",\"else：待添加的集合\",\"效果：该方法会将参数集合中的所有元素都添加到自己的集合中，该方法会改变源集合。\",\"返回值：Boolean，添加成功就返回true。\",\"boolean addAll(int index, Collection eles); =========================================================== //list1 = [a,b,c]; list2 = [d,e,f]; boolean res = list1.addAll(list2); System.out.println(res); //true：添加成功 System.out.println(list1);//[a, b, c, d, e, f]，源集合改变了 System.out.println(list2);//[d, e, f]，参数集合还在 \"]},\"947\":{\"h\":\"3. get\",\"t\":[\"获取指定index 位置的元素。 如果取的index不存在，就会报异常：IndexOutOfBoundsException。\",\"E get(int index); ========================================================= //list1 = [a,b,c]; String s1 = list1.get(0); String s2 = list1.get(3); System.out.println(s1);//a System.out.println(s2);//抛出异常：IndexOutOfBoundsException \"]},\"948\":{\"h\":\"4. indexOf\",\"t\":[\"查询某个元素首次出现的位置（index），如果不存在，返回-1.\",\"int indexOf(Object o); ================================ //list1 = [a,b,b,c]; int res = list1.indexOf(\\\"b\\\"); System.out.println(res);//1 \"]},\"949\":{\"h\":\"5. lastIndexOf\",\"t\":[\"返回元素最后出现的位置，如果不存在，返回-1。\",\"int lastIndexOf(Object o); ================================== //list1 = [a,b,b,c]; int res = list1.lastIndexOf(\\\"b\\\"); System.out.println(res);//2 \"]},\"950\":{\"h\":\"6. remove\",\"t\":[\"移除指定index的元素，重载方法\",\"参数是index：移除指定index的元素并返回（ArrayList 重载） \",\"返回值是被移除的元素\",\"如果index超出了范围，就会报IndexOutOfBoundsException。\",\"参数是obj：移除元素的值为obj的元素（Collection） \",\"返回值是Boolean，表示是否移除成功，移除的元素不存在，就返回false\",\"E remove(int index); ========================================================= //list1 = [a,b,c]; boolean b = list1.remove(\\\"b\\\");//调用的是Collection.remove() System.out.println(list1);//[a, c] String s1 = list1.remove(0);//调用的是List.remove() System.out.println(s1);//a:被删除的元素 System.out.println(list1);//[c] \"]},\"951\":{\"h\":\"7. set\",\"t\":[\"修改指定index的元素 。 返回值：修改前的obj元素。\",\"E set(int index, E element); ============================================================= //list1 = [a,b,c]; String s1 = list1.set(0, \\\"A\\\"); System.out.println(s1);//a System.out.println(list1);//[A, b, c] \"]},\"952\":{\"h\":\"8. subList\",\"t\":[\"返回两个index区间的元素，返回从fromIndex到toIndex位置的左闭右开区间的子集合。 返回了一个新集合，源集合没有变化。\",\"List<E> subList(int fromIndex, int toIndex); ================================================ //list1 = [a,b,c,d,e,f]; List<String> list2 = list1.subList(0, 3); System.out.println(list1);//[a, b, c, d, e, f] System.out.println(list2);//[a, b, c] \"]},\"953\":{\"h\":\"Ⅱ. Map\",\"t\":[\"位置\",\"rt.jar>java>util>Map.java 【Interface】\"]},\"954\":{\"h\":\"结构\",\"t\":[\"public interface Map<K,V>{ .... } \"]},\"955\":{\"h\":\"实现类\",\"t\":[\"Map有五个实现类：HashMap、LinkedHashMap、TreeMap、Hashtable、Properties。 常用实现类为HashMap，这里所有的例子均以HashMap为例。\"]},\"956\":{\"h\":\"泛型\",\"t\":[\"Map集合内的数据是键值对，因此Map支持两个集合，第一个表示键的类型，第二个表示值的类型。\"]},\"957\":{\"h\":\"特性\",\"t\":[\"键不可以重复，值可以重复。\"]},\"958\":{\"h\":\"遍历操作\",\"t\":[\"Map接口是没有iterator的，即没有迭代器接口，但可以对Key，Value进行遍历。\",\"key：key是有set组成的，可以迭代key\",\"value：value也是由set组成的，可以迭代value\",\"entry：也是有set组成的，同理(entry== key,value)。\"]},\"959\":{\"h\":\"1. put\",\"t\":[\"增改元素，将指定key-value添加到(或修改)当前map对象中，如果key，已经存在，则为修改value。\",\"开发中，key一般为String。\",\"V put(K key, V value); ================================================= hm.put(\\\"Aaron\\\",\\\"A\\\"); hm.put(\\\"Allen\\\",\\\"A\\\"); hm.put(\\\"Bob\\\",\\\"B\\\"); System.out.println(hm);//{Aaron=A, Bob=B, Allen=A} hm.put(\\\"Bob\\\",\\\"b\\\");//相同的key，则为修改。 System.out.println(hm);//{Aaron=A, Bob=b, Allen=A} \"]},\"960\":{\"h\":\"2. putAll\",\"t\":[\"增改集合，将参数集合中的所有key-value对存放到当前map中。 相当于将参数集合中的所有元素挨个添加到了当前集合，同样会发生覆盖（修改）。 注意：参数集合的泛型必须与本集合的泛型相同或是子类。\",\"void putAll(Map<? extends K, ? extends V> m); ========================================================= Map<String, String> hm = new HashMap<>(); HashMap<String, String> hm2 = new HashMap<>(); //hm={Aaron=A, Bob=B, Allen=A} hm2={Bob=BB, Jobs=J} hm.putAll(hm2); System.out.println(hm);//{Aaron=A, Bob=BB, Jobs=J, Allen=A} \"]},\"961\":{\"h\":\"3. remove\",\"t\":[\"移除元素：移除指定key的key-value对，并返回value。 如果指定的key不存在，则返回null。\",\"V remove(Object key); ========================================== //hm={Aaron=A, Bob=B, Allen=A} String allen = hm.remove(\\\"Allen\\\"); System.out.println(allen);//A String jobs = hm.remove(\\\"Jobs\\\"); System.out.println(jobs);//null System.out.println(hm);//{Aaron=A, Bob=B} \"]},\"962\":{\"h\":\"4. clear\",\"t\":[\"清空集合：清空当前map中的所有数据，变为空的map集合\",\"void clear(); ================================= //hm={Aaron=A, Bob=B, Allen=A} hm.clear(); System.out.println(hm);//{} \"]},\"963\":{\"h\":\"5. get\",\"t\":[\"获取value，获取指定key对应的value，如果key不存在，就返回null。\",\"V get(Object key); =================================== //hm={Aaron=A, Bob=B, Allen=A} String allen = hm.get(\\\"Allen\\\"); System.out.println(allen);//A String he = hm.get(\\\"He\\\"); System.out.println(he);//null \"]},\"964\":{\"h\":\"6. containsKey\",\"t\":[\"是否包含指定的key。\",\"boolean containsKey(Object key); ====================================== //hm={Aaron=A, Bob=B, Allen=A} boolean res1 = hm.containsKey(\\\"Bob\\\"); boolean res2 = hm.containsKey(\\\"Jobs\\\"); System.out.println(res1);//true System.out.println(res2);//false \"]},\"965\":{\"h\":\"7. containsValue\",\"t\":[\"boolean containsValue(Object value); ========================================= //hm={Aaron=A, Bob=B, Allen=A} boolean res1 = hm.containsValue(\\\"A\\\"); boolean res2 = hm.containsValue(\\\"C\\\"); System.out.println(res1);//true System.out.println(res2);//false \"]},\"966\":{\"h\":\"8. size\",\"t\":[\"返回map中key-value对的个数。\",\"int size(); =============================== //hm={Aaron=A, Bob=B, Allen=A} int size = hm.size(); System.out.println(size);//3 \"]},\"967\":{\"h\":\"9. isEmpty\",\"t\":[\"判断当前map是否为空，空则返回true。\",\"boolean isEmpty(); ================================= //hm={Aaron=A, Bob=B, Allen=A} boolean res1 = hm.isEmpty(); System.out.println(res1);//false hm.clear(); boolean res2 = hm.isEmpty(); System.out.println(res2);//true \"]},\"968\":{\"h\":\"10. equals\",\"t\":[\"判断两个集合是否想等，会比对集合中的所有元素。 集合中元素的顺序不影响比对结果，key=>value 是一起参与比对的\",\"boolean equals(Object o); =========================================================== //hm={Aaron=A, Bob=B, Allen=A} hm2={ Bob=B,Aaron=A, Allen=A} boolean res = hm.equals(hm2); System.out.println(res);//true \"]},\"969\":{\"h\":\"11. keySet\",\"t\":[\"返回所有key构成的Set集合，可以使用iterator接口或增强for循环遍历了。\",\"Set<K> keySet(); ============================================================= //hm={Aaron=A, Bob=B, Allen=A} Set<String> set = hm.keySet();//[Aaron, Bob, Allen] Iterator it = set.iterator(); //拥有了iterator接口 while(it.hasNext()){ System.out.println(it.next()); //可以遍历了：Aaron, Bob, Allen } \"]},\"970\":{\"h\":\"12. values\",\"t\":[\"返回所有value构成的Set集合,可以进行遍历了。\",\"Collection<V> values(); ====================================== //hm={Aaron=A, Bob=B, Allen=A} Collection<String> val = hm.values(); System.out.println(val);[A, B, A] for(String str:val){ System.out.println(str);//A, B, A } \"]},\"971\":{\"h\":\"13. entrySet\",\"t\":[\"返回所有k-v(entry)构成的Set集合，entrySet集合中的元素都是entry。 Entry是Map接口的内部接口。\",\"Set<Map.Entry<K, V>> entrySet(); ============================================================ //hm={Aaron=A, Bob=B, Allen=A} Set<Map.Entry<String, String>> entries = hm.entrySet(); System.out.println(entries);//[Aaron=A, Bob=B, Allen=A] Iterator it = entries.iterator(); //拥有了iterator接口 while(it.hasNext()){ Object obj = it.next(); Map.Entry entry = (Map.Entry)obj; System.out.println(entry.getKey()); System.out.println(entry.getValue()); } \"]},\"972\":{\"h\":\"2-5. Functional\",\"t\":[\"提示\",\"此处将列举JDK所有内置的函数式接口。 JDK一共内置了43个函数式接口，包含了所有可能的情况。\",\"位置：rt.jar>java>util>function 【dir】\"]},\"973\":{\"h\":\"〇. 核心Functional\",\"t\":[\"43中函数式接口都是这四种接口的变形。\"]},\"974\":{\"h\":\"1. Consumer\",\"t\":[\"消费型：提供一个参数，什么都不返回：参数被消耗了。\",\"Consumer<T>{ void accept(T t); } \"]},\"975\":{\"h\":\"2. Supplier\",\"t\":[\"供给型：不提供参数，返回了一个值：供给了一个值。\",\"Supplier<T>{ T get(); } \"]},\"976\":{\"h\":\"3. Function\",\"t\":[\"函数型：提供参数，参数类型是对象T，返回值类型是对象R。\",\"Function<T,R>{ R apply(T t); } \"]},\"977\":{\"h\":\"4. Predicate\",\"t\":[\"断定型：提供一个参数，进行判断，返回boolean：进行一些参数的断定\",\"Predicate<T>{ boolean test(T t) } \"]},\"978\":{\"h\":\"Ⅰ. XxxConsumer\",\"t\":[\"消费型Functional，接受参数，并不返回任何结果、\",\"提示\",\"TBD\"]},\"979\":{\"h\":\"Ⅱ. XxxSupplier\",\"t\":[\"提示\",\"TBD\"]},\"980\":{\"h\":\"Ⅲ. XxxFucntion\",\"t\":[\"提示\",\"TBD\"]},\"981\":{\"h\":\"Ⅳ. XxxPredicate\",\"t\":[\"提示\",\"TBD\"]},\"982\":{\"h\":\"Ⅴ. XxxOperator\",\"t\":[\"提示\",\"TBD\"]},\"983\":{\"h\":\"2-6. 正则类\",\"t\":[\"提示\",\"正则的语法都是通用的，这里介绍的是正则相关的Java内置API\"]},\"984\":{\"h\":\"正则相关的类\",\"t\":[\"Java 正则表达式和 Perl 的是最为相似的。\",\"java.util.regex 包主要包括以下三个类：\",\"Pattern 类：pattern 对象是一个正则表达式的编译表示。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法，它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第一个参数。\",\"Matcher类：Matcher 对象是对输入字符串进行解释和匹配操作的引擎。与Pattern 类一样，Matcher 也没有公共构造方法。你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。\",\"PatternSyntaxException类：PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。 \",\"在JDK中java.util.regex.Pattern类的注释包含了所有Java的正则语法，可以直接查看该类的注释来使用正则语法。\"]},\"985\":{\"h\":\"注意事项\",\"t\":[\"在 Java 中，\\\\\\\\ 表示：我要插入一个正则表达式的反斜线，所以其后的字符具有特殊的意义。\",\"所以，在其他的语言中（如 Perl），一个反斜杠 \\\\就足以具有转义的作用，而在 Java 中正则表达式中则需要有两个反斜杠才能被解析为其他语言中的转义作用。也可以简单的理解在 Java 的正则表达式中，两个 \\\\\\\\ 代表其他语言中的一个 \\\\，这也就是为什么表示一位数字的正则表达式是 \\\\\\\\d，而表示一个普通的反斜杠是 \\\\\\\\。\"]},\"986\":{\"h\":\"Java正则语法指南\",\"t\":[\"在JDK中java.util.regex.Pattern类的注释包含了所有Java的正则语法，可以直接查看该类的注释来使用正则语法。\",\"Pattern：Pattern，专门用来编译正则表达式的，一次编译，多次使用。\",\"Matcher：对于复杂的表达式需要使用JDK中的Matcher类来处理。 \",\"如：反向引用：Matcher.group\",\"模式修饰符：在java中，通过正则字符串不能表示模式修饰符，需要借助Pattern中的flags。\"]},\"987\":{\"h\":\"Pattern与Matcher的使用\",\"t\":[\"必须首先将指定为字符串的正则表达式编译为此类的实例。\",\"然后，可以使用生成的模式创建Matcher对象 \",\"该对象可以将任意character sequences与正则表达式进行匹配。\",\"参与执行匹配的所有状态都驻留在匹配器中，因此许多匹配器可以共享相同的模式。\",\"//1.定义正则表达式 String regex = \\\"a*b\\\"; //2.创建Pattern类的实例：正则模式对象 Pattern p = Pattern.compile(regex,CASE_INSENSITIVE ); //3.创建Matcher类的实例：比较器 Matcher m = p.matcher(\\\"aaabbb\\\"); //4.使用比较器进行匹配：调用某个Matcher实例的方法，获取结果 boolean b = m.matches(); \",\"提示\",\"Pattern本身也可以调用很多正则方法，完成正则匹配。 不过，Matcher类的功能更加丰富。\"]},\"988\":{\"h\":\"Ⅰ. String\",\"t\":[\"String类里也有很多涉及正则的方法。\"]},\"989\":{\"h\":\"1. replaceAll\",\"t\":[\"使用正则全部替换。 使用参数replacement替换所有正则表达式匹配到的字符串部分。\",\"参数1：正则表达式\",\"参数2：用来替换匹配到的内容。\",\"String replaceAll(String regex, String replacement); ====================================================== String s1 = \\\"I 1 am 2 a 3 Batman\\\"; String regex = \\\"\\\\\\\\d+\\\"; //设计正则表达式 String res = s1.replaceAll(regex, \\\"@\\\"); //进行替换 System.out.println(s1); //I 1 am 2 a 3 Batman System.out.println(res); //I @ am @ a @ Batman \"]},\"990\":{\"h\":\"2. replaceFirst\",\"t\":[\"使用参数replacement替换正则表达式匹配到的第一个字符串部分。\",\"参数1：正则表达式\",\"参数2：用来替换正则表达式第一个匹配到的内容\",\"String replaceFirst(String regex, String replacement); ======================================================= String s1 = \\\"I 1 am 2 a 3 Batman\\\"; String regex = \\\"\\\\\\\\d+\\\"; String res = s1.replaceFirst(regex, \\\"@\\\"); System.out.println(s1); //I 1 am 2 a 3 Batman System.out.println(res);//I @ am 2 a 3 Batman,只有第一个数字没替换了 \"]},\"991\":{\"h\":\"3. matches\",\"t\":[\"判断参数字符串是否匹配到了给定的正则表达式。\",\"boolean matches(String regex); ================================== String regex = \\\"a.b\\\"; String s1 = \\\"abb\\\"; boolean res = s1.matches(regex); System.out.println(res);//true \"]},\"992\":{\"h\":\"4. split\",\"t\":[\"根据给定正则表达式的匹配拆分此字符串。\",\"可以指定第二个参数：limit，表示切片最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。\",\"返回值：返回值是个字符串数组，而非字符串，数组的每个元素就是源字符串切后的小字符串。\",\"String[] split(String regex); String[] split(String regex, int limit); String s3 = \\\"I am Bat Van\\\"; String[] s4 = s3.split(\\\" \\\"); //根据空格分割 System.out.println(s4[1]); //am \"]},\"993\":{\"h\":\"Ⅱ. Pattern\",\"t\":[\"位置\",\"rt.jar>java>util>regex>Pattern.java [class]\",\"反复使用一个正则表达式字符串进行匹配效率较低，可以把正则表达式字符串编译成Pattern对象，然后反复使用该对象，实现一次编译多次使用。\",\"pattern (模式器) 与 matcher (匹配器) 搭配使用实现对字符序列的检索和指定模式匹配。\"]},\"994\":{\"h\":\"结构\",\"t\":[\"public final class Pattern implements java.io.Serializable{ private String pattern; ... } \"]},\"995\":{\"h\":\"构造器\",\"t\":[\"Pattern类的构造器是private，不能通过new创建示例，需要调用静态方法compile返回Pattern实例。\"]},\"996\":{\"h\":\"1. compile\",\"t\":[\"返回一个Pattern对象，参数是String正则表达式。 Java的String正则表达式是无法表示模式修饰符的，可以使用第二个参数flags指明模式修饰符。\",\"Pattern compile(String regex); Pattern compile(String regex, int flags); =========================================== String regex = \\\"\\\\\\\\d\\\"; Pattern pattern = Pattern.compile(regex); \"]},\"997\":{\"h\":\"2. flags\",\"t\":[\"falgs表示模式Pattern对象的模式修饰符，在创建Pattern对象的时候，可以指定。\",\"CASE_INSENSITIVE：忽略大小写 \",\"也可以通过表达式添加(?i)来启用。\",\"MULTILINE：开启多行模式(?m)； \",\"此时每行都能单独匹配^或$。\",\"不开多行模式的话整个字符串会被视作一行（加\\\\n也没用）。\",\"DOTALL：开启dotAll模式(?s)； \",\"此时字符.可以匹配一切字符，包括换行符。\",\"UNICODE_CASE：支持Unicode的忽略大小写 \",\"与CASE_INSENSITIVE的不同，未知。\",\"CANON_EQ：使规范等价 \",\"用法：未知\",\"UNIX_LINES：Unix行模式 \",\"在此模式中，只有'\\\\n'行结束符在.^和$的行为中被识别\",\"LITERAL：启用文字解析 \",\"表达式中的所有元字符转义字符将不具备特殊含义。\",\"UNICODE_CHARACTER_CLASS：启用Unicode版本的预定义字符类和POSIX字符类。 \",\"用法未知\",\"COMMENTS：允许在表达式中使用空格和注释 \",\"空格将被忽略，并且以#开头的注释也会被忽略。\",\"flags()\",\"flags方法：返回此模式的匹配标志\",\"int flags(); \"]},\"998\":{\"h\":\"3. matcher\",\"t\":[\"获取Matcher类的实例。\",\"Matcher类的构造方法也是私有的,不能随意创建,只能通过Pattern.matcher(CharSequence input)方法得到该类的实例。Pattern类只能做一些简单的匹配操作,要想得到更强更便捷的正则匹配操作,那就需要将Pattern与Matcher一起合作。\",\"Matcher类提供了对正则表达式的分组支持,以及对正则表达式的多次匹配支持。\",\"该方法的参数是：待匹配的CharSequence（string）。\",\"Matcher matcher(CharSequence input); ================================================================ String regex = \\\"\\\\\\\\d{4,}\\\"; //定义String正则表达式 String s1 = \\\"1223\\\";//待匹配的字符串 Pattern pattern = Pattern.compile(regex);//创建模式器 Matcher matcher = pattern.matcher(s1);//创建比较器 boolean res = matcher.matches();//调用比较器的某个方法进行正则匹配 System.out.println(res);//true,获取匹配的结果 \"]},\"999\":{\"h\":\"4. pattern\",\"t\":[\"返回该模式器的String类型的正则表达式。\",\"String pattern(); ========================================= Pattern p = Pattern.compile(\\\"\\\\\\\\d{4,}\\\"); String regex = p.pattern(); System.out.println(regex);//\\\\d{4,} \"]},\"1000\":{\"h\":\"5. matches\",\"t\":[\"精准匹配：判断参数字符串是否匹配到了Pattern实例指定的正则表达式。\",\"参数1：regex，正则表达式；\",\"参数2：input，要匹配的字符序列\",\"返回值：Boolean，正则表达式是否与字符序列匹配\",\"boolean matches​(String regex, CharSequence input); ================================================================ String regex = \\\"\\\\\\\\d{4,}\\\"; String s1 = \\\"1223\\\"; Pattern p = Pattern.compile(regex);//创建Pattern对象 boolean res = p.matches(regex,s1);//注意：这里还是需要指定正则表达式 System.out.println(res);//true \"]},\"1001\":{\"h\":\"6. split\",\"t\":[\"参数1：input，要拆分的字符序列；\",\"参数2：limit，可选，拆分的数目，表示切片最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。\",\"String[] split​(CharSequence input); ===================================================== String regex = \\\",\\\"; String s1 = \\\"1223\\\"; Pattern p = Pattern.compile(regex); String[] res = p.split(\\\"a,b,c,d\\\"); System.out.println(Arrays.toString(res));//[a, b, c, d] \"]},\"1002\":{\"h\":\"Ⅲ. Matcher\",\"t\":[\"位置\",\"rt.jar>java>util>regex>Matcher.java 【class】\"]},\"1003\":{\"h\":\"结构\",\"t\":[\"public final class Matcher implements MatchResult{ Pattern parentPattern; int[] groups; int from,to; ... } \"]},\"1004\":{\"h\":\"实例化\",\"t\":[\"Matcher类的构造方法是私有的,不能随意创建,只能通过Pattern.matcher(CharSequence input)方法得到该类的实例。\",\"对照Matcher构造器源码，可知构造器将Pattern对象的引用赋于Matcher中变量parentPattern，目标字符串赋于变量text；并创建了数组groups和locals 。\",\"数组groups是组使用的存储。存储的是当前匹配的各捕获组的first和last信息。-\"]},\"1005\":{\"h\":\"Matcher的状态\",\"t\":[\"Matcher对象是一个状态机器，在创建Matcher对象后，Matcher会初始化很多匹配的状态信息，这些信息都是私有的，没法直接获取。\\n对于非完全匹配（精准匹配），这些信息是很有用的。\"]},\"1006\":{\"h\":\"2.JDK.util包\",\"t\":[\"位置\",\"rt.jar>java>util>Scanner.java 【class】\",\"用来扫描输入文本的类。 Scanner类的用法很多，这里只介绍简单的命令行，方便进行一些测试。\",\"结构\",\"public final class Scanner implements Iterator<String>,Closeable{ .... } \",\"使用 通过Scanner类来获取用户的输入。\",\"通过 Scanner 类的 next() 与 nextLine() 方法获取输入的字符串，在读取前我们一般需要使用hasNext 与 hasNextLine 判断是否还有输入的数据。\"]},\"1007\":{\"h\":\"1. new Scanner\",\"t\":[\"构建一个Scanner对象，他生产从指定输入流扫描的值。当参数为System.in：表示从键盘获取输入的内容。\",\"Scanner(InputStream source);//这只是构造方法之一 Scanner scan = new Scanner(System.in); \"]},\"1008\":{\"h\":\"2. next\",\"t\":[\"从此扫描仪查找并返回下一个完整令牌。\",\"用户从键盘输入内容，按回车即输入完毕，输入完毕后，Scanner.next方法就获取输入的内容。\",\"无参数：对即将获取的内容无限制。\",\"有参数：参数可以是String类型的正则或者Pattern类，该参数将限制接下来要输入的数据格式，只有与正则匹配的内容才可以。\",\"String next(); String next(String pattern); String next(Pattern pattern); Scanner scan = new Scanner(System.in); System.out.println(\\\"请输入姓名\\\"); String next = scan.next();//键盘输入：hello System.out.println(next);//hello \",\"效果\",\"执行代码；弹出命令行窗口，显示打印的字符：请输入姓名\",\"可以在键盘输入字符，点击Enter键完成输入\",\"输入完毕后，scan.next方法获取输入的字符串，并继续向下执行代码\",\"代码执行完毕，命令行交互结束\"]},\"1009\":{\"h\":\"3. nextXxx\",\"t\":[\"next方法，会将获取的索引内容都当做字符串处理。\",\"也可以调用nextXxx方法（Xxx为基本数据类型），限制输入的字符类型。\",\"对于Number类型的Xxx有一个可选参数 radix，radix指的是进制。 \",\"radix取值为：2~36，即：最小是2进制，最大是36进制。\",\"输入数据时如果输入的值超过了进制或者超过了数据类型的范围，或者与数据类型不符都会报错。\",\"对于输入的非十进制数据，获取后的值依然是十进制。\",\"注意：Scanner没有提供Char类型next方法\",\"byte nextByte(int radix); boolean nextBoolean(); short nextShrot(int radix); int nextInt(int radix); long nextLong(int radix); float nextFloat(int radix); double nextDouble(int radix); BigInteger nextBigInter(int radix); BigDecimal nextBigDecimal(); Scanner scan = new Scanner(System.in); System.out.println(\\\"请输入\\\"); int next = scan.nextByte(2);//Byte类型的二进制数据 //键入：11111 System.out.println(next);//31,11111自动转为了十进制 \"]},\"1010\":{\"h\":\"1-1. Java介绍\"},\"1011\":{\"h\":\"1. Java内容分类\",\"t\":[\"Java SE：Java标准版；一开始是用于开发桌面级应用的，现在成了Java基础（去除桌面相关的API）。\",\"Java EE：Java企业版；主要用于应用后台开发。\",\"Java ME：Java移动版，已经被Android取代。\"]},\"1012\":{\"h\":\"2. Java主要应用方向\",\"t\":[\"企业级应用：主要是软件后台API\",\"Android\",\"大数据开发\"]},\"1013\":{\"h\":\"3. Java的特点\",\"t\":[\"面向对象\",\"健壮性：吸收了C的优点，提供了一个相对安全的内存管理和访问机制。\",\"跨平台：运行在JVM，JVM在各个平台都有。 \",\"JVM：一个运行Java的虚拟机，可以在各个平台运行，因此JAVA代码就可以在各个平台运行。\"]},\"1014\":{\"h\":\"4. Java的核心机制\"},\"1015\":{\"h\":\"4.1 Java虚拟机\",\"t\":[\"JVM：Java Virtal Machine\",\"JVM 是一个虚拟的计算机，具有指令集并使用不同的存储区域。负责执行指令，管理数据、内存、寄存器。\",\"对于不同的平台，有不同的虚拟机；只有某平台提供了对应的java虚拟机，java程序才可在此平台运行。\",\"Java虚拟机机制屏蔽了底层运行平台的差别，实现了“一次编译，到处运行”【跨平台本质】\",\"开发者->代码->JVM编译->操作系统运行\"]},\"1016\":{\"h\":\"4.2 垃圾收集机制\",\"t\":[\"Java可以自动进行垃圾回收，将不用内存收回（比如没有变量指向的对象）。\"]},\"1017\":{\"h\":\"5. Java版本选择\",\"t\":[\"目前常用的Jave8(1.8)，开发中使用Java8以上版本。\"]},\"1018\":{\"h\":\"6. 概念补充\"},\"1019\":{\"h\":\"6.1 软件运行方式\",\"t\":[\"GUI：Graphical User Interface；图形化界面。\",\"CLI：Command Line Interface；命令行方式。\"]},\"1020\":{\"h\":\"6.2 编程语言介绍\",\"t\":[\"机器语言：第一代，指令以二进制代码形式存在。\",\"汇编语言：第二代，使用助记符表示一条机器指令。\",\"高级语言：第三代 \",\"面向过程语言：C语言等\",\"面向对象语言：JAVA、PHP、Python\"]},\"1021\":{\"h\":\"1-2. 环境搭建\"},\"1022\":{\"h\":\"Ⅰ. 开发环境搭建\",\"t\":[\"官网\"]},\"1023\":{\"h\":\"1. 环境介绍\"},\"1024\":{\"h\":\"1.1 JRE\",\"t\":[\"Java Runtime Environment Java 运行环境\",\"用来运行Java的环境，包括Java虚拟机和Java程序所需的核心类库等，只需要运行JAVA程序可以下载这个（服务器就要单独下载这个）。\"]},\"1025\":{\"h\":\"1.2 JDK\",\"t\":[\"JDK：Java Development Kit Java 开发工具包\",\"Java开发人员使用的，其中包含了java的开发工具，也包括了JRE。所以安装了JDK，就不用在单独安装JRE了。\"]},\"1026\":{\"h\":\"1.3 JDK、JRE、JVM的关系\",\"t\":[\"JDK = JRE + 开发工具集（例如Javac编译工具等）\",\"JRE = JVM + Java SE标准类库\"]},\"1027\":{\"h\":\"2. 安装JDK：windows\",\"t\":[\"JDK8下载地址\",\"傻瓜式安装即可。版本选择：jdk-8u321-windows-x64（最基础版本）\",\"注意：当提示安装 JRE 时，正常在JDK安装时已经装过了，但是为了后续使用Eclipse等开发工具不报错，建议也根据提示安装JRE。\"]},\"1028\":{\"h\":\"3. 环境变量path配置：windows\"},\"1029\":{\"h\":\"3.1 直接配置path\",\"t\":[\"将jdk bin目录添加到path。\",\"地址示例：D:\\\\Java\\\\Soft\\\\JDK\\\\jdk1.8.0_321\\\\bin\"]},\"1030\":{\"h\":\"3.2 多版本JDK\",\"t\":[\"当安装了多个版本的JDK时，环境变量配置的是哪个就使用的哪个版本。如果都配置了，就看谁在上面（前面）。\",\"对于IDE开发工具来时，简单设置就可以随意切换Java版本。\"]},\"1031\":{\"h\":\"4. 配置JAVA_HOME\",\"t\":[\"先配置个JAVA_HOME环境变量，然后使用该环境变量配置path\",\"意义：tomcat服务器启动时，会自动识别JAVA_HOME这个变量，来启动。\"]},\"1032\":{\"h\":\"4.1 创建变量\",\"t\":[\"1-2-1\"]},\"1033\":{\"h\":\"4.2 使用变量\",\"t\":[\"1-2-2\"]},\"1034\":{\"h\":\"Ⅱ. 生产环境搭建\",\"t\":[\"OS：CentOS 9 Stream\",\"Java Version：JDK17\"]},\"1035\":{\"h\":\"1. yum安装\",\"t\":[\"yum -y list java* # 列出所有的java \",\"有多个Java版本，且可安装内容不止有jdk，还有javadoc等。\",\"1-2-3\",\"进行安装java17：\",\"# 安装指定版本的所有Java内容 yum -y install java-17-openjdk* # 查看安装：查看版本信息 java -version # 安装目录 cd /usr/lib/jvm # 卸载 yum -y remove java-17-openjdk* \"]},\"1036\":{\"h\":\"1-3. 基本语法\"},\"1037\":{\"h\":\"Ⅰ. 编译执行\"},\"1038\":{\"h\":\"1. Java执行过程\",\"t\":[\" 示例：\",\"//文件：workpace/test.java class Hello{ public static void main(String[] args){ //单行注释 System.out.println(\\\"fuck world\\\"); } } //命令行编译：需要在文件所在位置执行命令 workplace>javac test.java workplace>java Hello \",\"编写：将 Java 代码 编写到扩展名为 .java 的文件中\",\"编译：通过过 javac 命令对该 java 文件进行编译，编译为class文件\",\"运行：通过 java 命令对生成的 class 文件进行\"]},\"1039\":{\"h\":\"2. 执行过程解析\"},\"1040\":{\"h\":\"2.1 编译代码\",\"t\":[\"javac test.java \",\"使用javac 命令来编译代码的源文件（文件名区分大小写），将其编译成JVM可识别的二进制文件（字节码文件）。 \",\"编译成功后，会在当前目录下生成一个编译后的文件（源文件还在）。\",\"编译后的文件以代码中的类名作为文件名（Hello），以.class作为后缀。\",\"如果代码进行过修改，就需要重新编译（新编译后的文件会覆盖原文件）。\"]},\"1041\":{\"h\":\"2.2 运行代码\",\"t\":[\"java Hello \",\"运行的是编译后的.class结尾的文件。使用java命令进行运行\",\"执行文件时，不要加文件后缀。\"]},\"1042\":{\"h\":\"2.3 注意事项\",\"t\":[\"命令行的编译和执行，需要在文件所在目录执行命令\",\"使用IDE或者智能编辑器，可以直接在编辑器里运行，自动编译执行。\"]},\"1043\":{\"h\":\"3. 基本语法规则\"},\"1044\":{\"h\":\"3.1 class：类\",\"t\":[\"在一个java源文件中可以声明多个class。\",\"只能最多有一个类声明为public的。\",\"声明为public的类的类名必须与源文件名相同。\"]},\"1045\":{\"h\":\"3.2 main：入口\",\"t\":[\"程序的入口是main()方法。格式是固定的，必须有main方法，不然只能编译不能执行。 运行class文件时，就是从main方法开始运行的。\"]},\"1046\":{\"h\":\"3.3 注意\",\"t\":[\"每一行执行语句都以 ; 结束。\",\"如果文件里有public修饰的类，则文件名必须与类名一样，不然会编译失败。\"]},\"1047\":{\"h\":\"4. 输出语句\",\"t\":[\"一般用于测试：\",\"System.out.println(): 先输出数据，然后换行\",\"System.out.print(): 只输出数据\"]},\"1048\":{\"h\":\"5. 基本使用测试\"},\"1049\":{\"h\":\"5.1 包含两个类的java文件，编译后生成了两个class文件\",\"t\":[\"public class Hello{ } class Hi{ } //############################# javac Hello.java; //在当前目录下生成了两个class文件：Hello.class和Hi.class \"]},\"1050\":{\"h\":\"5.2 没有main文件，直接运行会报错\",\"t\":[\"public class Hello{ } class Hi{ } //############################ javac Hello.java; //先编译 java Hello; //执行Hello.class java Hi; //执行Hi.class \",\"执行结果如下：\",\"1-3-2\"]},\"1051\":{\"h\":\"5.3 结论\",\"t\":[\"一个文件可以有多个class，编译后，有几个class就形成几个文件，文件名就是类名；\",\"想单独执行某个class，则该class必须有main方法，不然无法执行。\",\"备注：可以在有main方法的类中，调用没有main方法的class文件（调用他的方法），因此main方法并非是类的必备方法\"]},\"1052\":{\"h\":\"Ⅱ. 注释\"},\"1053\":{\"h\":\"1. 注释的意义\",\"t\":[\"生成api文档\",\"增加可读性\",\"调试。\",\"整理思路，先写注释后写具体代码\"]},\"1054\":{\"h\":\"2. 单行注释\",\"t\":[\"//这里是单行注释 \"]},\"1055\":{\"h\":\"3. 多行注释\",\"t\":[\"/* 这里是多行注释 可以写多行 */ \"]},\"1056\":{\"h\":\"4. 文档注释\",\"t\":[\"文档注释可以用来生成API文档，写文档注释时要按照一定的格式来写。\",\"/** @author jinno @version 1.0.8 */ \",\"位置：放在类，接口，构造函数，方法或字段声明之前（方法中不要加）。\",\"块标记：以@作为标记区分每个注释块的内容\",\"HTML：可以在注释里写HTML标签，生成的文档会解析HTML代码。\"]},\"1057\":{\"h\":\"Ⅲ. 文档注释格式\"},\"1058\":{\"h\":\"1. 通用文档标记\",\"t\":[\"适用于类、接口、方法、变量、常量等。\",\"@link：用于快速链接到相关代码，使用格式：{@link 包名.类名#方法名(参数类型)}\",\"注意：该标记外外面必须加{}，没有这个大引号，就无法直接跳转到目标代码了\",\"完全限定的类名：{@link java.util.Collections}\",\"省略包名，只写类名：{@link String}\",\"省略类名，表示指向当前的某一方法：{@link #toString}\",\"完全限定方法名，指向某类的某个方法：{@link java.lang.String#charAt(int)}\",\"@code：将文本标记为代码样式文本，一般在Javadoc中只要涉及到类名或者方法名，都需要使用@code进行标记，使用格式：{@code text}，其会被解析为 text。 \",\"标记类名：{@code ArrayList}\",\"标记方法名：{@code isEmpty}\",\"标记某个代码关键字：{@code null}\",\"/** * {@link java.util.Collections} * {@link String} * {@link #say(String word)} * {@link java.lang.String#charAt(int)} * {@code ArrayList} * {@code isEmpty} * {@code null} */ \"]},\"1059\":{\"h\":\"2. 类上常用文档标记\",\"t\":[\"@author 类的作者，后面跟作者名或邮箱、官网等 \",\"如果一段程序是由多个作者来维护，则可以标记多个@author\",\"@param：如果一个类支持泛型时，可以通过@param来解释泛型的类型\",\"@version 用于标记当前类版本，默认为1.0\",\"@see 参考链接，用于标记与本类相关联的类，该标注可以用在类或方法上\",\"@since：表示从以下版本开始有这个类，标记文件创建时项目当时对应的版本，后面可以跟版本号或是时间。\",\"/** * this {@code Hello} class is very good; * <h1>作用</h1> * 用于测试基JavaSE语法 * <p>比如，文档注释是可以写标签的</p> * </pre></blockquote><p> * Here are some more examples of how strings can be used: * <blockquote><pre> * System.out.println(\\\"abc\\\"); * String cde = \\\"cde\\\"; * System.out.println(\\\"abc\\\" + cde); * String c = \\\"abc\\\".substring(2,3); * String d = cde.substring(1, 2); * </pre></blockquote> //上面的就是文档的概要描述和详细描述 * @author Aaron * @version 1.0.0 * @see java.util.stream.LongStream * @since 1.0.0 * @param <E> the type of elements in this list */ public class Hello<E> { .... } \",\"以上是类上常用的文档标注，类上的文档格式如下：\",\"概要描述：通常用一段话简要的描述该类的基本内容。\",\"详细描述：通常用几大段话详细描述该类的功能与相关情况。 \",\"这里常使用很多html标签\",\"文档标注：用于标注该类的作者、时间、版本、参略等信息。\"]},\"1060\":{\"h\":\"3. 方法上常用文档标记\",\"t\":[\"@param：方法的参数名，包括参数描述。\",\"@return：返回值的描述。\",\"@throws：异常的类型和异常的描述，用于方法需要抛出异常的情况\",\"@exception：方法签名throws对应的异常\",\"@see：类和方法都可以用，表示参考的类和方法\",\" /** * this{@code say}function is asshole * <h1>作用</h1> * <p> 用来输出一段话</p> * @param word String,the value will return * @return String,the function's param * @throws Exception some Accidental error */ public static String say(String word) throws Exception{ return \\\"hello\\\"+word; } \",\"以上是方法上常用的文档标注，方法上的文档格式如下：\",\"概要描述：通常用一段话简要的描述该方法的基本内容。\",\"详细描述：通常用几大段话详细描述该方法的功能与相关情况。\",\"文档标注：用于标注该方法的参数、返回值、异常、参略等信息\"]},\"1061\":{\"h\":\"4. 使用命令行生成API文档\",\"t\":[\"用wiodow打开cmd终端，然后进入要编译的java文件目录的路径中。\",\"javadoc -encoding UTF-8 -charset UTF-8 *.java //*也可以表示具体的文件名 \",\"编译成功后当前路径下会多出很多文件，点击打开index.html就可以查看文档了。\",\"1-3-2\"]},\"1062\":{\"h\":\"5. 使用IDE生成帮助文档\",\"t\":[\"提示\",\"暂略\"]},\"1063\":{\"h\":\"Ⅳ. 基本代码规范\",\"t\":[\"正确的注释和注释风格 \",\"使用文档注释来注释整个类或整个方法\",\"如果注释方法中的某一个步骤，使用单行或多行注释。\",\"正确的缩进和空白 \",\"使用一次tab操作，实现缩进\",\"运算符两边习惯性各加一个空格。比如：2 + 4 * 5。\",\"大括号的风格: Java API 源代码选择了行尾风格（大括号不换行）\"]},\"1064\":{\"h\":\"1-4. 变量\"},\"1065\":{\"h\":\"Ⅰ. 变量\"},\"1066\":{\"h\":\"1. 概念\",\"t\":[\"变量是内存中的一个存储区域，该区域的数据可以在同一类型范围内不断变化。\",\"变量是程序中最基本的存储单元。包含变量类型、变量名和存储的值。\"]},\"1067\":{\"h\":\"2. 作用\",\"t\":[\"用于在内存中保存数据。\"]},\"1068\":{\"h\":\"3. 声明变量\"},\"1069\":{\"h\":\"3.1 只声明\",\"t\":[\"语法：数据类型 变量名称\",\"int var; //声明但未初始化 \"]},\"1070\":{\"h\":\"3.2 变量的赋值\",\"t\":[\"语法：变量名 = 值\",\"int var; var = 10; //赋值的变量必须已经声明过了(无论有没有初始化) \"]},\"1071\":{\"h\":\"3.3 声明的同时赋值\",\"t\":[\"语法：数据类型 变量名 = 初始化值\",\"int var = 10; //声明变量的同时进行初始化 \"]},\"1072\":{\"h\":\"4. 变量的作用域\",\"t\":[\"变量只有在其作用域内才有效；在哪个 {} 内定义，就在哪个 {} 中使用，跨 {} 找不到该标识符（报错）。\"]},\"1073\":{\"h\":\"5. 使用变量的注意事项\",\"t\":[\"Java中每个变量必须先声明，后使用\",\"使用变量时，该变量必须已经被初始化过了（赋值）。\",\"同一个作用域内，不能定义重名的变量，会报错（java中不会发生变量覆盖，而是报错）。\"]},\"1074\":{\"h\":\"6. 变量的分类\",\"t\":[\"java对于每一种数据都定义了明确的具体数据类型（强类型语言），在内存中分配了不同大小的内存空间。\"]},\"1075\":{\"h\":\"6.1 按照数据类型\",\"t\":[\"变量可以分为8种基本数据类型，和3种引用类型。\",\"基本数据类型：primitive type \",\"数值型： \",\"整形 \",\"byte\",\"shot\",\"int\",\"long\",\"浮点型 \",\"float\",\"double\",\"字符型：char\",\"布尔型：boolean\",\"引用数据类型：reference type \",\"类：class\",\"接口：interface\",\"数组：array[ ]\"]},\"1076\":{\"h\":\"6.2 按照变量声明的位置\",\"t\":[\"成员变量：在方法体外，类体内声明的变量 \",\"实例变量：不易static修饰\",\"类变量：以static修饰\",\"局部变量：在方法体内部声明的变量 \",\"形参：方法、构造器中定义的变量\",\"方法的局部变量：在方法内定义\",\"代码块局部变量：在代码块内定义\",\"注意：局部变量除形参外，需显式初始化\"]},\"1077\":{\"h\":\"Ⅱ. 关键字\"},\"1078\":{\"h\":\"1. 介绍\",\"t\":[\"关键字和保留字是被Java 语言赋予了特殊含义，用做专门用途的字符串（单词）\",\"特点：关键字中所有字母都为小写\"]},\"1079\":{\"h\":\"2. 关键字汇总\",\"t\":[\"官方地址\"]},\"1080\":{\"h\":\"3. 保留字\",\"t\":[\"现有Java版本尚未使用，但以后版本可能会作为关键字使用。自己命名标识符时要避免使用这些保留字 ：goto 、const\"]},\"1081\":{\"h\":\"Ⅲ. 标识符\",\"t\":[\"Java 对各种 变量、 方法和 类等要素命名时使用的字符序列称为标识符；\",\"也就是凡是自己可以起名字的地方都叫标识符\\\\\"]},\"1082\":{\"h\":\"1. 合法标识符规则\",\"t\":[\"规则是必须遵守的\",\"由26 个英文字母大小写，0-9 ，_或 或 $ 组成\",\"数字不可以开头。\",\"不可以使用关键字和保留字，但能包含关键字和保留字。\",\"Java 中严格区分大小写，长度无限制。\",\"标识符不能包含空格。\"]},\"1083\":{\"h\":\"2. 命名规范\",\"t\":[\"规范是最好遵守的\",\"包名【全小写】：多单词组成时所有字母都小写：xxxyyyzzz\",\"类名、接口名【大驼峰】：多单词组成时，所有单词的首字母大写：XxxYyyZzz\",\"变量名、方法名【小驼峰】：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：xxxYyyZzz\",\"常量名【全大写下划线分隔】：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ\"]},\"1084\":{\"h\":\"1-5. 基本数据类型\"},\"1085\":{\"h\":\"Ⅰ. 整形：4种\"},\"1086\":{\"h\":\"1. 说明\",\"t\":[\"Java各整数类型有固定的表数范围和字段长度，不受具体OS的影响，以保证java程序的可移植性。 四种整形仅仅是储存空间大小和表示的数据范围有区别。\"]},\"1087\":{\"h\":\"2. 四种整形的对比\",\"t\":[\"通常定义整形变量时，使用int。\",\"1-5-1\"]},\"1088\":{\"h\":\"3. 注意事项\",\"t\":[\"给变量赋值时，如果值超过了变量类型规定的范围，将编译失败\",\"声明long类型时，必须以“l\\\"或”L\\\"结尾。\"]},\"1089\":{\"h\":\"4. 使用示例\",\"t\":[\"byte age = 20; short pet = 2; int houseNum = 10000000000000000; long money = 146841646541651654681L; \"]},\"1090\":{\"h\":\"5. 默认整形\",\"t\":[\"java的整型常量默认为 int 型，java程序中变量通常声明为int型，除非不足以表示较大的数，才使用long\"]},\"1091\":{\"h\":\"Ⅱ. 浮点类型：2种\"},\"1092\":{\"h\":\"1. 说明\",\"t\":[\"和整形类似，Java 浮点类型也有固定的表示范围和字段长度，不受具体操作系统的影响。\",\"浮点型其实就是小数。\"]},\"1093\":{\"h\":\"2. 浮点型的两种表示方式\",\"t\":[\"十进制数形式：如：5.12 ；512.0f ；.512 (必须有小数点)\",\"科学计数法形式：如：5.12e2； 512E2 ；100E-2\"]},\"1094\":{\"h\":\"3. 两种浮点类型的对比\",\"t\":[\"两种浮点类型只是表示的数据范围和精度不同。我们一般使用时选择double。\",\"1-5-2\",\"float: 单精度，尾数可以精确到7位有效数字。很多情况下，精度很难满足需求\",\"double: 双精度，精度是float的两倍。通常采用此类型\"]},\"1095\":{\"h\":\"4. 注意事项\",\"t\":[\"定义float类型变量时，变量要以\\\"f\\\"或\\\"F\\\"结尾\"]},\"1096\":{\"h\":\"5. 使用示例\",\"t\":[\"float f1 = 23.23F; double d1 = 23.2321e12; \"]},\"1097\":{\"h\":\"6. 底层说明\",\"t\":[\"fload表示数据的数据范围比long还大，却只占用4个字节，为什么？\",\"这跟fload表示数据的方式有关，如下图：\",\"1-5-3\",\"第一个bit表示正负，第2~8个bit表示E指数，剩下的表示小数点。\"]},\"1098\":{\"h\":\"7. 知识补充：long类型为什么加L\",\"t\":[\"java是需要手动分配内存空间，然后再进行储值的。我们定义变量时，就需要先定义变量类型，再初始化赋值。\",\"当我们与常量数值进行运算时，这个数值我们没有定义容量，java要怎么分配内存呢？答案是，java提供了默认长度（int），按int长度分配内存。\",\"因此当我们需要long类型的常量数值时，就需要加个L告诉java分配8个Byte的内存。而加L的操作也延续到了定义变量的时候。\",\"float同理。\"]},\"1099\":{\"h\":\"Ⅲ. 字符类型：char\"},\"1100\":{\"h\":\"1. 说明\",\"t\":[\"char 型数据用来表示通常意义上“字符”(2字节)。\",\"这里的字符是任意语言的一个字，比如一个字母、一个汉字、一个片假名。\"]},\"1101\":{\"h\":\"2. 声明字符\",\"t\":[\"需要使用单引号表示值（不能使用双引号，否则报错）。\",\"字符类型只能是一个字符，超过一个字符会报错（字符类型不是字符串）。\",\"char c1 = 'h'; \"]},\"1102\":{\"h\":\"3. 字符变量的三种表现形式\",\"t\":[\"除了直接使用字符作为值外，还可以使用能表示字符的其他形式；\",\"普通字符：用单引号('')括起来的单个字符\",\"转义字符：使用转义字符 \\\\ 来将其后的字符转变为特殊字符型常量\",\"Unicode：使用 Unicode 值来表示字符型常量\",\"ASCII：直接使用整数ASCII码\",\"char c1 = '帅'; char c2 = '\\\\n'; //\\\\n:表示换行符 char c3 = '\\\\u0043'; char c4 = 97; //a,不推荐使用 \"]},\"1103\":{\"h\":\"4. 字符集介绍\",\"t\":[\"计算机内部都是二进制的；我们输入的字符都是通过转码变成二进制让计算机识别的。文字==字符集转码==>计算机能够识别的二进制\",\"转码就需要用到字符集了（密码本），针对不同的字符类型会有不同的字符集，常见的如下：\",\"ASCII：只能表示英文的编码集\",\"Unicode：将世界所有字符都纳入其中，解决乱码问题。\",\"UTF-8：真正实现了，将所有字符都纳入其中，是在互联网上使用最广的一种 Unicode 的实现方式。\",\"乱码：不同字符集编码的字符进行传输时，就会出现乱码（密码本不一样，解密解不出）。\",\"转码：将一种字符集编码的字符转换成其他字符集编码的字符，如GBK转UTF-8.\"]},\"1104\":{\"h\":\"5. 注意事项\",\"t\":[\"char类型的值不能是空字符串（可以1个是空格）。\",\"必须使用单引号，不能使用双引号。\"]},\"1105\":{\"h\":\"Ⅳ. 布尔类型：boolean\"},\"1106\":{\"h\":\"1. 说明\",\"t\":[\"boolean 类型用来判断逻辑条件，一般用于程序流程控制。\",\"boolean类型数据只允许取值true和false，无null。\"]},\"1107\":{\"h\":\"2. 使用示例\",\"t\":[\"boolean b1 = true; boolean b2 = false; \"]},\"1108\":{\"h\":\"3. 注意\",\"t\":[\"在java中，boolean只能用true和false表示。不可以使用0或非 0 的整数替代false和true，这点和C语言不同。\",\"Java虚拟机中没有任何供boolean值专用的字节码指令，Java语言表达所操作的boolean值，在编译之后都使用java虚拟机中的int数据类型来代替：true用1表示，false用0表示。\"]},\"1109\":{\"h\":\"Ⅴ. 类型间的转换\"},\"1110\":{\"h\":\"1. 不同类型之间的运算\",\"t\":[\"除了boolean类型外，其他7种基本数据类型是可以互相运算的。\",\"boolean只能取true和false没法参加运算；char是通过转为ASCII码进行运算的。\"]},\"1111\":{\"h\":\"2. 自动类型提升\",\"t\":[\"自动类型转换：容量小的类型自动转换为容量大的数据类型\",\"1-5-3\",\"有多种类型的数据混合运算时，系统首先自动将所有数据转换成容量最大的那种数据类型，然后再进行计算（接收结果的变量也要定义成相应的数据类型）。\"]},\"1112\":{\"h\":\"2.1 运算的规则\",\"t\":[\"当两个不同的数据类型之间进行运算时，必须使用较大的数据类型进行接收，不然就无法编译（这里的大指的是表示的数据范围大小，float就比long要大）。\",\"byte b1 = 10; int i1 = 200; int i2 = b1 + i1; //使用较大的数据类型进行接收 \"]},\"1113\":{\"h\":\"2.2 特殊情况\",\"t\":[\"当byte、char、short三种类型的变量做运算时，结果必须为int型。\",\"char会转为整形的ASCII进行运算。\",\"有浮点型参与的运算，即使是整数，也会出现小数点\"]},\"1114\":{\"h\":\"2.3 示例\",\"t\":[\"char c1 = 'a'; //97 byte b1 = 10; int i1 = c1 + b1; //107 int i2 = 100; double d1 = i2; //赋值;此时变成了 100.0 \"]},\"1115\":{\"h\":\"3. 数值常量的默认数据类型\",\"t\":[\"对于一个数值常量，他有自己默认的数据类型：\",\"整型常量：默认类型为int\",\"浮点常量：默认为double 当数值常量参与运算的时候，接收的值数据类型不能小于数值常量的数据类型。\",\"//12是个整数常量，默认是int类型，进行计算时，必须用int类型接收。 byte b = 10; byte b1 = b + 12 //报错，应该用int类型接收 //10.1是浮点数常量，默认是double类型的。 byte b = 10; float f1 = b + 10.1; //编译失败，应该用double类型接收 \"]},\"1116\":{\"h\":\"4. 不加L和F发生的自动类型转换\",\"t\":[\"为long类型赋值时，值的末尾要L，但不加L有时会报错，有时不会报错；为什么？\",\"没有加L时，默认数值是int类型的，如果值超过了int的范围，就直接报错（报错的情况）\",\"如果没有超过int的范围，赋值的过程就自动发生了变量提升（不报错的情况）。\",\"float同理\",\"//示例1：为long型变量赋值，没加L，默认为int long l1 = 1000; //编译正常 //示例2：long型没有加L，则取默认的int型，但该值超过了int范围，故报错 long l2 = 21323232323232332323; //编译报错 //示例3：提供的值没有加F，因此默认是double类型，double类型赋值给float会报错 float f1 = 12.3; //编译报错 \"]},\"1117\":{\"h\":\"5. 强制类型转换\",\"t\":[\"自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使用时要加上强制转换符：()，但可能造成精度降低或溢出。\",\"double d1 = 2302323.123; int i1 = (int)d1; //结果：2302323；截断操作 int i2 = 128; byte b1 = (byte)i2; //结果：-128；溢出，发生了二进制运算 byte b = 3; b = b + 4; //报错 b = (byte)(b+4); //OK \",\"注意：boolean类型不可以转换为其它的数据类型。\"]},\"1118\":{\"h\":\"Ⅵ. 进制问题\"},\"1119\":{\"h\":\"1. 表示方法\",\"t\":[\"二进制：以0b或0B开头\",\"八进制：以数字0开头表示\",\"十六进制： 以0x或0X开头表示，a-f不区分大小写\"]},\"1120\":{\"h\":\"2. 符号位\",\"t\":[\"储存数据时，专门有一位来储存数据的正负。\",\"符号位在最高位，0表示整数，1表示负数。\"]},\"1121\":{\"h\":\"3. 原码、反码、补码\",\"t\":[\"二进制的整数有如下三种形式【在计算机底层，都已补码的方式来存储数据】。\",\"原码：直接将一个数值换成二进制数。最高位是符号位【用最高位表示正负，其余表示值】\",\"反码：正数的反码是其本身；负数的反码是源码基础上，符号位不变，其余各个位取反（1,0互换）\",\"补码：正数的补码就是其本身；负数的补码是在其源码的基础上，符号位不变，区域各位取反，最后+1（==反码+1）\",\"三个码的意义： 计算机辨别“符号位”显然会让计算机的基础电路设计变得十分复杂! 于是人们想出了将符号位也参与运算的方法. 我们知道, 根据运算法则减去一个正数等于加上一个负数, 即: 1-1 = 1 + (-1) = 0 , 所以机器可以只有加法而没有减法, 这样计算机运算的设计就更简单了。\",\"1-1 = 1 + (-1) = [0000 0001]原 + [1000 0001]原 = [0000 0001]补 + [1111 1111]补 = [0000 0000]补=[0000 0000]原\"]},\"1122\":{\"h\":\"4. 进制转换\",\"t\":[\"二进制《=》十进制 \",\"二进制转成十进制： 乘以2的幂数\",\"十进制转成二进制：除以2 取余数\",\"二进制《=》八进制 \",\"二进制转八进制：三个位加起来作为一个位\",\"八进制转二进制：一个位分解成3个位表示\",\"二进制《=》十六进制 \",\"同上，变成了1:4的转换\"]},\"1123\":{\"h\":\"1-6. String\",\"t\":[\"String类型是引用类型，不属于基本数据类型。定义时必须使用双引号，不能使用单引号。\"]},\"1124\":{\"h\":\"1. String对象的创建\",\"t\":[\"有两种创建方式：\",\"字面量：和基本数据类型一样，只是关键字是String，因为String经常用到，所以JDK对它进行了优化。\",\"构造器：使用new String创建\",\"String s1 = \\\"javaEE\\\"; String s3 = new String(\\\"javaEE\\\"); \"]},\"1125\":{\"h\":\"2. 字符串常量池\",\"t\":[\"通过字面量的方式（区别于new）给一个字符串赋值，此时的字符串值声明在字符串常量池中。 字符串常量池中是不会存储相同内容的字符串的。\",\"结论：给两个String类型的变量，赋值相同的值，他们会指向同一个内存地址。\",\"String s1 = \\\"abc\\\"; //关键字是String，值必须加双引号 String s2 = \\\"abc\\\"; System.out.println(s1==s2); //true,说明两个变量内存地址相同 =================================== String s3 = new String(\\\"aa\\\"); String s4 = new String(\\\"aa\\\"); System.out.println(s3==s4); //false \"]},\"1126\":{\"h\":\"3. String类的特性\",\"t\":[\"String类代表 字符串。Java 程序中的所有字符串字面值（如 \\\"abc\\\" ）都作为此类的实例实现。\",\"String是一个final类，代表不可变的字符序列。简称：不可变性。\",\"String实现了两个接口 \",\"Serializable接口：表示字符串是支持序列化的。\",\"实现了Comparable接口：表示String可以比较大小\",\"String内部底层定义了final char[] value用于存储字符串数据\"]},\"1127\":{\"h\":\"4. 字符串的不可变性\",\"t\":[\"字符串也属于引用类型，但他是个Final类，储存值使用的是一个Final数组，因此一旦赋值成功，该内存地址（引用）里的值将无法改变。\"]},\"1128\":{\"h\":\"4.1 具体体现\",\"t\":[\"当对字符串重新赋值时，需要重新指定内存区域赋值，不能使用原有的value进行赋值。\",\"当对现有的字符串进行连接操作时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。\",\"当调用String的replace()方法修改指定字符或字符串时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。\"]},\"1129\":{\"h\":\"4.2 内存图示\",\"t\":[\"1-6-1\"]},\"1130\":{\"h\":\"5. String对象的内存分析\"},\"1131\":{\"h\":\"5.1 String对象的储存\",\"t\":[\"通过字面量创建的String，值是直接储存在字符串常量词的，标识符保存常量池的内存地址；\",\"通过new+构造器的方式创建的String，String对象是储存在堆中的，标识符保存String对象的地址。 \",\"String对象中有一个属性values，该属性是引用类型，保存了具体字符串值的内存地址，具体的值也是保存在常量词中的。\"]},\"1132\":{\"h\":\"5.2 内存图示\",\"t\":[\"1-6-2\"]},\"1133\":{\"h\":\"5.3 对象中的字符串\",\"t\":[\"字符串属于引用类型，在创建的对象中，属性只能保存字符串的内存地址，真正的值是储存在常量池中的。\",\"Person p1 = new Person(\\\"Tom\\\",12); Person p2 = new Person(\\\"Tom\\\",12); System.out.println(p1.name.equals(p2.name));//true System.out.println(p1.name == p2.name);//true p1.name = \\\"Jerry\\\"; System.out.println(p2.name);//Tom \"]},\"1134\":{\"h\":\"6. String的运算：拼接操作\",\"t\":[\"String可以和8种基本数据类型变量做运算，且运算只能是连接运算：+。\",\"运算的结构是将这些值连接起来了，依然是String类型\",\"char c = 'a';//97 A:65 int num = 10; String str = \\\"hello\\\"; System.out.println(c + num + str);//107hello System.out.println(c + str + num);//ahello10 System.out.println(str + num + c);//hello10a \"]},\"1135\":{\"h\":\"7. 类型转换\",\"t\":[\"不支持直接string类型转其他类型，包括强制类型转换。\",\"实在需要转换类型，需要使用包装函数进行（详见OOP）。\",\" String a = \\\"43\\\"; int i = Integer.parseInt(a); \"]},\"1136\":{\"h\":\"8. String的操作\",\"t\":[\"详见 String类的方法\"]},\"1137\":{\"h\":\"1-7. 运算符\"},\"1138\":{\"h\":\"Ⅰ. 算术运算符\",\"t\":[\"1-7-1\"]},\"1139\":{\"h\":\"1. 除号运算的细节\",\"t\":[\"两个int类型相除，结果一定是个int类型（舍去小数位），即便用double类型接收，也是int类型的结果转为了double，小数位的值，还是被舍弃了，如果想保留小数位，则需要运算时就进行类型转换。\",\"int n1 = 12; int n2 = 5; int result = n1/n2;//2, n1/n2的结果是int类型的，没有小数位 double result = n1/n2;//2.0,只是将int类型的结果2.0类型转换成了double double result = (double)num1/num2;//2.4 double result = (num1+0.0)/num2;//2.4 \"]},\"1140\":{\"h\":\"2. 取模的细节\",\"t\":[\"结果的符号与被膜数的符号形同。取模一般用来判断是否能除尽。\"]},\"1141\":{\"h\":\"3. 自增、自减的细节\",\"t\":[\"(前)++ :先自增1，后运算\",\"(后)++ :先运算，后自增1\",\"(前)-- :先自减1，后运算\",\"(后)-- :先运算，后自减1\",\"int a1 = 10; int a2 = ++a1; System.out.println(a1,a2);//11,11 int b1 = 10; int b2 = b1++;//b1先取10，赋值给b2,然后才自增的 System.out.println(b1,b2);//11,10 \",\"自增、自减不会改变数据类型\",\"short s1 = 10; s1 = s1 + 1;//编译失败，s1是sort类型的，无法接收int类型的1 s1++; //正确，自增不会改变变量的数据类型 \"]},\"1142\":{\"h\":\"Ⅱ. 赋值运算符\"},\"1143\":{\"h\":\"1. == 赋值运算符\",\"t\":[\"支持连续赋值\",\"int i1,i2; i1 = i2 = 10; int i3 = 10; i4 = 20; \"]},\"1144\":{\"h\":\"2. 扩展赋值运算符\",\"t\":[\"+=, -=, *=, /=, %= 先运算再把结果进行赋值；\",\"int i1 = 10; i1 += 5// i1 = i1 + 5; \"]},\"1145\":{\"h\":\"3. 数据类型不改变\",\"t\":[\"与自增自减一样，扩展赋值运算符，不会改变变量本身的数据类型；\",\"short s1 = 10; s1 += 2; //12,不会报错，变量本身的数据类型没有发生改变 int i = 1; i *= 0.1; //0;不会改变变量类型，所以结果是0. \"]},\"1146\":{\"h\":\"4. 开发中的选择\",\"t\":[\"因为扩展赋值运算符不会改变变量的类型，所以在开发中，优先选择他来替代算数运算符。\"]},\"1147\":{\"h\":\"Ⅲ. 比较运算符\"},\"1148\":{\"h\":\"1. 概述\",\"t\":[\"比较运算符的结果都是boolean型，也就是要么是true，要么是false。\",\"注意：比较运算符 == 不能误写成 =。\"]},\"1149\":{\"h\":\"2. 使用细节\",\"t\":[\"比较运算符不能连续使用；\",\"int a = 10; if(5<a<=20) XXX ;//这种写法是错误的 if(5<a && a<=20) √;//正确的写法 \"]},\"1150\":{\"h\":\"Ⅳ. 逻辑运算符\",\"t\":[\"1-7-2\"]},\"1151\":{\"h\":\"1. 概述\",\"t\":[\"&: 逻辑与\",\"|: —逻辑或\",\"!: 逻辑非\",\"&&: 短路与\",\"||: 短路或\",\"^: 逻辑异或\"]},\"1152\":{\"h\":\"2. 使用\",\"t\":[\"逻辑运算符用于连接布尔型表达式，在Java中不可以写成3<x<6，应该写成x>3 & x<6 。\"]},\"1153\":{\"h\":\"3. 短路情况\",\"t\":[\"开发中，优先使用短路的&和|\",\"“&”和“&&”的区别：单&时，左边无论真假，右边都进行运算；双&时，如果左边为真，右边参与运算，如果左边为假，那么右边不参与运算。\",\"“|”和“||”的区别同理，||表示：当左边为真，右边不参与运算。\"]},\"1154\":{\"h\":\"Ⅴ. 位运算符\",\"t\":[\"仅了解，Java源码中会用到。\"]},\"1155\":{\"h\":\"1. 概述\",\"t\":[\"位运算符，就是在内存上进行的二进制bit位的运算。【只支持数值类型】\",\"1-7-3\"]},\"1156\":{\"h\":\"2. 补位的细节\",\"t\":[\"1-7-4\"]},\"1157\":{\"h\":\"3. 细节补充\",\"t\":[\"<< 左移：bit位向左移动，右边补0，每移动一位，相当于 乘了一次2。 \",\"如果最高位移动到了符号位，就会变成负数。（符号位是1，则变负数）\",\">> 右移：bit位向右移动，左边补位，如果符号位是1，就补1，是0就补0.\",\"~ 取反 \",\"如下：底层表示-6，是以补码的形式，因此 -6的反码 == -6的补码-1（负数补码= 反码+1），所以6取反的结果是-7\",\" 0000 0000 0000 0000 0000 0000 0000 0110 //6 1000 0000 0000 0000 0000 0000 0000 0110 //-6的源码 1111 1111 1111 1111 1111 1111 1001 //-6的反码 \"]},\"1158\":{\"h\":\"Ⅵ. 三元运算符\"},\"1159\":{\"h\":\"1. 格式\",\"t\":[\"条件表达式的结果为boolean类型； 根据条件表达式真或假，决定执行表达式1，还是表达式2\",\"1-7-5\"]},\"1160\":{\"h\":\"2. 使用说明\"},\"1161\":{\"h\":\"2.1 表达式1 和表达式2为 同种类型\",\"t\":[\"三元运算符的结果是要被变量接收的，接收的变量类型要与表达式结果的变量类型一致（或能自动转换）。所以也要求表达式1和表达式2的数据类型要一样。\",\"int m = 10; int n = 5; int max = (m>n)? m : n; //m int max = (m>n)? m : \\\"n大\\\"; //报错，两个表达式类型不一致 \"]},\"1162\":{\"h\":\"2.2 三元运算符的嵌套\",\"t\":[\"三元运算符是可以嵌套使用的，比如计算两个值谁大，或者是相等\",\"int m = 10; int n = 5; String maxStr = (m > n)? \\\"m大\\\" : ((m == n)? \\\"m和n相等\\\" : \\\"n大\\\"); \"]},\"1163\":{\"h\":\"2.3 三元运算符与if-else\",\"t\":[\"凡是可以使用三元运算符的地方，都可以改写为if-else； 如果程序既可以使用三元运算符，又可以使用if-else结构，那么优先选择三元运算符。\",\"原因：简洁、执行效率高。\"]},\"1164\":{\"h\":\"Ⅶ. 运算符优先级\",\"t\":[\"提示\",\"不用记，不确定的地方加（）就行了。\"]},\"1165\":{\"h\":\"1-8. 流程控制\",\"t\":[\"流程控制语句是用来控制程序中各语句执行顺序的语句，可以把语句组合成能完成一定功能的小逻辑模块。\",\"流程控制方式采用结构化程序设计中规定的三种基本流程结构，即：\",\"顺序结构：冲上到下逐行执行，无任何判断和跳转。\",\"分支结构：根据条件，选择性的执行某段代码 \",\"if...else\",\"switch-case\",\"循环结构：根据循环条件，重复性的执行某段代码 \",\"for\",\"while\",\"do...while\"]},\"1166\":{\"h\":\"Ⅰ. if..else\"},\"1167\":{\"h\":\"1. 语法\",\"t\":[\"分支（条件判断）结构有三种格式；\"]},\"1168\":{\"h\":\"1.1 单分支：选或跳过\",\"t\":[\"if( 条件表达式){ 执行代码块; } \"]},\"1169\":{\"h\":\"1.2 双分支：二选一\",\"t\":[\"if(条件表达式){ 执行表达式1 }else{ 执行表达式2 } \"]},\"1170\":{\"h\":\"1.3 多分支：多选一\",\"t\":[\"if(条件表达式){ 执行表达式1 }else if(条件表达式){ 执行表达式2 }else if(条件表达式){ 执行表达式3 } ... else{ 执行表达式n } \"]},\"1171\":{\"h\":\"2. 使用细节\",\"t\":[\"嵌套: if...else是可以进行嵌套的，不过尽量别超过3层。\",\"省略大括号: 如果if-else结构中的执行语句只有一行时，对应的一对{}可以省略的，不建议省略。\"]},\"1172\":{\"h\":\"3. 注意事项\",\"t\":[\"多条件表达式的顺序 \",\"如果多个条件表达式之间是“互斥”关系(或没有交集的关系),哪个判断和执行语句声明在上面还是下面，无所谓。\",\"如果多个条件表达式之间有交集的关系，需要根据实际情况，考虑清楚应该将哪个结构声明在上面。\",\"如果多个条件表达式之间有包含的关系，通常情况下，需要将范围小的声明在范围大的上面。否则，范围小的就没机会执行了\",\"条件表达式必须是布尔表达式（关系表达式或逻辑表达式）、布尔变量\"]},\"1173\":{\"h\":\"Ⅱ. switch\"},\"1174\":{\"h\":\"1. 语法格式\",\"t\":[\"switch(表达式){ case 常量1: 执行语句1; //break; case 常量2: 执行语句2; //break; ... default: 执行语句n; //break; } \"]},\"1175\":{\"h\":\"2. 使用说明\",\"t\":[\"执行过程 \",\"根据switch表达式中的值，依次匹配各个case中的常量。一旦匹配成功，则进入相应case结构中，调用其执行语句。\",\"当调用完执行语句以后，则仍然继续向下执行其他case结构中的执行语句，直到遇到break关键字或此switch-case结构 末尾结束为止。\",\"break：可以使用在switch-case结构中，表示一旦执行到此关键字，就跳出switch-case结构。 break关键字是可选的，没有break时，就算执行完了case匹配的表达式，还是会继续向下执行，并且不再判断是否满足case了。\",\"表达式的限制： switch结构中的表达式，只能是如下的6种数据类型之一： \",\"byte 、short、char、int、枚举类型(JDK5.0新增)、String类型(JDK7.0新增)。\",\"注意：不能是boolean\",\"case的限制：case 之后只能声明常量。不能声明范围、变量或不确定的表达式。且同一个switch语句，所有case子句中的常量值互不相同\",\"default：相当于if-else结构中的else，default结构是可选的，而且位置是灵活的。\"]},\"1176\":{\"h\":\"3. 省略break的用法\",\"t\":[\"可以利用省略break的特性，让代码更简洁。\",\"例如：周末是双休的，给出今天是星期几（星期日用0表示），算出今天是否用上班。\",\"switch(day){ case 1: case 2: case 3: case 4: case 5: System.out.println(\\\"今天需要上班\\\"); break; default: System.out.println(\\\"今天不用上班\\\"); } \"]},\"1177\":{\"h\":\"4. if..else和switch...case的选择\",\"t\":[\"我们写分支结构时，当发现既可以使用switch-case,（同时，switch中表达式的取值情况不太多），又可以使用if-else时，我们优先选择使用switch-case。原因：switch-case执行效率稍高。\",\"使用switch-case的，都可以改写为if-else。反之不成立。\"]},\"1178\":{\"h\":\"Ⅲ. for\"},\"1179\":{\"h\":\"循环的组成部分\",\"t\":[\"循环结构的4个要素\",\"初始化条件：可以声明多个变量，但必须是同一个类型，用逗号分隔\",\"循环条件：是boolean类型；当值为false时，退出循环\",\"循环体\",\"迭代条件：可以有多个变量更新，用逗号分隔\",\"执行过程：直到循环条件不满足，则退出，永远满足，则是死循环。\",\"1-8-1\"]},\"1180\":{\"h\":\"1. for循环的结构\",\"t\":[\"执行过程：初始化条件 - 循环条件 - 循环体 - 迭代条件- 循环条件 - 循环体 - 迭代条件 - ... - 循环条件\",\"1-8-2\",\"for(初始化条件; 循环条件; 迭代条件){ 循环体; } \"]},\"1181\":{\"h\":\"2. for循环的使用\",\"t\":[\"示例：遍历100以内的偶数,输出所有偶数的和,输出偶数的个数\",\"int num = 0; int count = 0; for(int i=0;i<100;i++){ if(i%2 == 0){ num += i; count++; } } \",\"i 变量只在循环内有效，出了for循环就失效了。\",\"num使用前必须先定义（在for循环外定义）。 \",\"循环内定义，会每次循环都重复生命，在java中，会直接报错。\",\"i变量的声明别忘了加数据类型，这个也是声明变量。\"]},\"1182\":{\"h\":\"Ⅳ. while\"},\"1183\":{\"h\":\"1. 语法结构\",\"t\":[\"while循环没有迭代条件也能编译成功，所以一定不要忘了迭代条件。\",\"执行过程：初始化条件 - 循环条件 - 循环体 - 迭代条件- 循环条件 - 循环体 - 迭代条件 - ... - 循环条件\",\"初始化条件 while(循环条件){ 循环体 迭代条件 } \"]},\"1184\":{\"h\":\"2. while循环的使用\",\"t\":[\"示例：遍历100以内的所有偶数\",\"class WhileTest{ public static void main(String[] args) { //遍历100以内的所有偶数 int i = 1; while(i <= 100){ if(i % 2 == 0){ System.out.println(i); } i++; } //初始化变量出了while循环以后，仍可以调用。 System.out.println(i);//101 } } \"]},\"1185\":{\"h\":\"3. for循环和while循环\",\"t\":[\"for循环和while循环是可以相互转换的！且没有执行效率的差别。\",\"区别：for循环和while循环的初始化条件部分的作用范围不同。但是for循环也可以通过以下方式实现初始化部分外移\",\"int i = 0; //for循环内只要有两个;;就行，里面有无内容都可以编译 for(;i<10;i++){...} \"]},\"1186\":{\"h\":\"4. while(true)：无限循环格式\",\"t\":[\"可以省略循环体种的一些元素，来实现人为的不限制次数的循环，并用break根据条件退出循环。\",\"//while循环 while(true){ //只有循环条件和循环体也能编译 循环体; } //for循环 for(;;){ //只要有两个;;就能编译 循环体; } \",\"示例：从键盘读入个数不确定的整数，并判断读入的正数和负数的个数，输入为0时结束程序。\",\"import java.util.Scanner; class ForWhileTest { public static void main(String[] args) { Scanner scan = new Scanner(System.in); int positiveNumber = 0;//记录正数的个数 int negativeNumber = 0;//记录负数的个数 for(;;){//while(true){ int number = scan.nextInt(); //判断number的正负情况 if(number > 0){ positiveNumber++; }else if(number < 0){ negativeNumber++; }else{ //一旦执行break，跳出循环 break; } } System.out.println(\\\"输入的正数个数为：\\\" + positiveNumber); System.out.println(\\\"输入的负数个数为：\\\" + negativeNumber); } } \"]},\"1187\":{\"h\":\"Ⅴ. do...while\"},\"1188\":{\"h\":\"1. 语法结构\",\"t\":[\"初始化 do{ 循环体 迭代条件 }while(循环条件); \"]},\"1189\":{\"h\":\"2. do...while循环的使用\",\"t\":[\"示例：遍历100以内的偶数,并计算所有偶数的和及偶数的个数\",\"int num = 1; int sum = 0;//记录总和 int count = 0;//记录个数 do{ if(num % 2 == 0){ System.out.println(num); sum += num; count++; } num++; }while(num <= 100); \"]},\"1190\":{\"h\":\"3. 使用说明\",\"t\":[\"在循环体必须执行一次的时候，使用该循环；开发中较少使用。\"]},\"1191\":{\"h\":\"Ⅵ. 循环控制\",\"t\":[\"特殊关键字 break、continue、return 可以控制循环的执行。\"]},\"1192\":{\"h\":\"1. break\",\"t\":[\"break语句用于终止某个语句块的执行。【只能用于switch 语句和 循环语句中】\"]},\"1193\":{\"h\":\"1.1 使用范围：\",\"t\":[\"switch...case中\",\"循环语句中：跳出当前循环\"]},\"1194\":{\"h\":\"1.2 嵌套循环中的使用\",\"t\":[\"break; 默认跳出包裹此关键字最近的一层循环。\",\"可以为循环添加label标识符，来跳出指定标识的循环\"]},\"1195\":{\"h\":\"2. continue\",\"t\":[\"continue用于结束当次循环【只能用于 循环语句中】\",\"用于跳过其所在循环语句块的一次执行，继续下一次循环。\",\"嵌套循环中的使用：continue默认跳过包裹此关键字最近的一层循环。可以通过标签指明要跳过的是哪一层循环\"]},\"1196\":{\"h\":\"3. return\",\"t\":[\"并非专门用于结束循环的，它的功能是结束一个方法。当一个方法执行到一个return语句时，这个方法将被结束。\",\"与break和continue不同的是，return直接结束整个方法，不管这个return处于多少层循环之内\"]},\"1197\":{\"h\":\"4. 使用说明\",\"t\":[\"continue 只能用于 循环语句中。因为程序永远不会执行其后的语句。\",\"continue是终止 本次循环，break是终止 本层循环。\"]},\"1198\":{\"h\":\"5. 使用示例\",\"t\":[\"label:for(int i = 1;i <= 4;i++){ for(int j = 1;j <= 10;j++){ if(j % 4 == 0){ //break;//默认跳出包裹此关键字最近的一层循环。 //continue; //break label;//结束指定标识的一层循环结构 continue label;//结束指定标识的一层循环结构当次循环 } System.out.print(j); } } \"]},\"1199\":{\"h\":\"Ⅶ. 嵌套循环\",\"t\":[\"循环是可以嵌套的，将一个循环结构A声明在另一个循环结构B的循环体中,就构成了嵌套循环；一般最多写三层。\"]},\"1200\":{\"h\":\"1. 使用说明\",\"t\":[\"内层循环结构遍历一遍，只相当于外层循环循环体执行了一次。\",\"假设外层循环需要执行m次，内层循环需要执行n次。此时内层循环的循环体一共执行了m * n次 两层循环相当于是一个矩阵，外层循环控制行数，内层循环控制列数\"]},\"1201\":{\"h\":\"2. 使用示例\"},\"1202\":{\"h\":\"2.1 示例1：输出星星\",\"t\":[\"输出5行 * ，在第几行就输出几个*\",\"for(int i = 1;i <= 5;i++){//控制行数 for(int j = 1;j <= i;j++){//控制列数 System.out.print(\\\"*\\\"); } System.out.println(); } \"]},\"1203\":{\"h\":\"2.2 示例2：输出99乘法表\",\"t\":[\"for(int i = 1;i <= 9;i++){ for(int j = 1;j <= i;j++){ System.out.print(i + \\\" * \\\" + j + \\\" = \\\" + (i * j) + \\\" \\\"); } System.out.println(); } \"]},\"1204\":{\"h\":\"2.3 示例3：100以内的所有质数的输出\",\"t\":[\"public static void main(String[] args) { boolean isFlag = true;//标识i是否被j除尽，一旦除尽，修改其值 int count = 0;//记录质数的个数 //获取当前时间距离1970-01-01 00:00:00 的毫秒数 long start = System.currentTimeMillis(); for(int i = 2;i <= 100000;i++){//遍历100000以内的自然数 //优化二：对本身是质数的自然数是有效的。 //for(int j = 2;j < i;j++){ for(int j = 2;j <= Math.sqrt(i);j++){//j:被i去除 if(i % j == 0){ //i被j除尽 isFlag = false; break;//优化一：只对本身非质数的自然数是有效的。 } } // if(isFlag == true){ //System.out.println(i); count++; } //重置isFlag isFlag = true; } //获取当前时间距离1970-01-01 00:00:00 的毫秒数 long end = System.currentTimeMillis(); System.out.println(\\\"质数的个数为：\\\" + count); System.out.println(\\\"所花费的时间为：\\\" + (end - start)); //17110 - 优化一：break:1546 - 优化二：13 } \"]},\"1205\":{\"h\":\"1-9. 数组\"},\"1206\":{\"h\":\"Ⅰ. 概述\"},\"1207\":{\"h\":\"1. 概念\",\"t\":[\"数组(Array)，是多个相同类型数据按一定顺序排列的集合，并使用一个名字命名，并通过编号的方式对这些数据进行统一管理。\"]},\"1208\":{\"h\":\"2. 数组的元素\",\"t\":[\"数组的变量类型：数组内部元素的变量类型\",\"索引：数组的下标，从0开始步进（注意：Java是强类型语言，没有关联数组一说）\",\"数组元素：数组中的每个元素\",\"数组的长度：数组元素的个数\"]},\"1209\":{\"h\":\"3. 数组的特点\",\"t\":[\"数组本身是引用数据类型，而数组中的元素可以是任何数据类型，包括基本数据类型和引用数据类型。\",\"创建数组对象会在内存中开辟一整块连续的空间，而数组名中引用的是这块连续空间的首地址。 \",\"可以直接通过下标(或索引)的方式调用指定位置的元素，速度很快\",\"数组的长度一旦确定，就不能修改。\"]},\"1210\":{\"h\":\"4. 数组的分类\",\"t\":[\"按照维度：一维数组、二维数组、多维数组\",\"按照元素数据类型：基本数据类型元素的数组、引用数据类型元素的数组（如String类型的数组）\"]},\"1211\":{\"h\":\"5.使用数组的步骤\",\"t\":[\"声明数组\",\"分配空间：数组分配的内存空间是连续的 \",\"java中必须先为数组分配内存空间，才能使用数组\",\"赋值\",\"处理数据\"]},\"1212\":{\"h\":\"6. 数组间的赋值与复制\"},\"1213\":{\"h\":\"6.1 赋值\",\"t\":[\"将array1保存的数组的地址值赋给了array2，使得array1和array2的指针共同指向同一个数组实体。\",\"array2 = array1; \"]},\"1214\":{\"h\":\"6.2 复制一份内存空间\",\"t\":[\"array2 = new int[array1.length]; //初始化并分配空间 for(int i=0;i<array2.length.i++){ //赋值 array2[i] = array1[i]; } \"]},\"1215\":{\"h\":\"Ⅱ. 一维数组\"},\"1216\":{\"h\":\"1. 声明数组\",\"t\":[\"声明语法1：数据类型[ ] 数组名；\",\"声明语法2：数据类型 数组名[]\",\"int[] arr1; //声明数组：确定数据类型 int arr2[]; \"]},\"1217\":{\"h\":\"2. 初始化数组\",\"t\":[\"数组一旦初始化完成，其长度就确定了。\"]},\"1218\":{\"h\":\"2.1 动态初始化\",\"t\":[\"先给数组分配空间，然后再进行赋值。\",\"String[] users; //声明 users = new String[2];//初始化：分配空间 String[] users = new String[2]; //声明+初始化 users[0] = \\\"jinno\\\" //赋值：通过下标取出数组元素，然后赋值 \"]},\"1219\":{\"h\":\"2.2 静态初始化\",\"t\":[\"数组的初始化和数组元素的赋值操作同时进行，不要给数组长度，赋值时自动获得长度。\",\"优先使用简化写法：int[ ] nums = {1,2,3};\",\"int[] nums;//声明 nums = new int[]{1,2,3};//初始化和赋值同时进行 int[] nums = new int[]{1,2,3};//声明+初始化 int[] nums = {1,2,3};//简化写法 \"]},\"1220\":{\"h\":\"3. 访问数组元素\",\"t\":[\"定义并用运算符new为之分配空间后，才可以访问数组中的每个元素；\",\"可以直接通过数组名[ 数组元素下标 ]的方式调用指定位置的元素; \",\"数组元素下标可以是整型常量或整型表达式。如a[3] , b[i] , c[6*i];\",\"数组元素下标从0开始；长度为n的数组合法下标取值范围: 0 —>n-1；\",\"//为指定索引处的元素赋值，若已有值，则为修改值 nums[1] = 20; //获取指定索引出的值，若指定索引处没有值，就获取默认值 int age = nums[1]; \"]},\"1221\":{\"h\":\"4. 获取数组长度\",\"t\":[\"每个数组都有一个属性length指明它的长度。 数组初始化完成后，其长度就不可变了。\",\"System.out.println(arr.length); \"]},\"1222\":{\"h\":\"5. 遍历数组\",\"t\":[\"可以通过for循环遍历数组\",\"int[] nums = new int[]{1,2,3,4,5}; for(i=0;i<nums.length;i++){ System.out.println(nums[i]); } \"]},\"1223\":{\"h\":\"6. 数组元素的默认初始化值\",\"t\":[\"数组是引用类型，它的元素相当于类的成员变量，因此数组一经分配空间，其中的每个元素也被按照成员变量同样的方式被隐式初始化。即：当对数组进行初始化，还没有分配值的时候，数组的元素会有一个默认值。\",\"默认值与数组的数据类型有关，具体如下：\",\"1-9-1\"]},\"1224\":{\"h\":\"7. 一维数组的内存解析\"},\"1225\":{\"h\":\"7.1 内存结构\",\"t\":[\"1-9-2\"]},\"1226\":{\"h\":\"7.2 数组的内存结构\",\"t\":[\"注意：非精准详细的解析，只是对数组的结构进行一些解释（详见JVM）。\",\"栈：用来存放标识符【数组名】\",\"堆：用来存放new出来的数组【数组的值】\"]},\"1227\":{\"h\":\"7.3 储存的过程\",\"t\":[\"数组储存的过程：初始化数组时，在栈内存以栈的结构储存数组的标识符（k）和数组第一个元素的内存地址（v），堆内存中储存（分配空间）数组的值（默认值）。给数组赋值时，就将赋的值替换掉元素的默认值。\",\"数组删除和修改的过程：删除数组时，就将数组在栈中储存的K=V出栈，同时数组堆中的值成为垃圾，等待被回收。当对数组本身进行修改，重新初始化时（重新分配空间），就将栈中储存的数组第一个元素的地址替换掉（之前与值的指针断裂）；重新指向新的数组的值，同时就数组的值成为垃圾，等待被回收。\",\"1-9-3\"]},\"1228\":{\"h\":\"8. 注意事项\",\"t\":[\"数组长度：数组的长度是固定的，在初始化时就确定了，无法更改\",\"数据类型：数组的中的元素具有相同的数据类型（或能自动转换类型），声明数组时要确定数据类型\"]},\"1229\":{\"h\":\"Ⅲ. 多维数组\"},\"1230\":{\"h\":\"说明\",\"t\":[\"对于二维数组的理解，我们可以看成是一维数组array1又作为另一个一维数组array2的元素而存在。其实，从数组底层的运行机制来看，其实没有多维数组。\",\"因为数组是引用类型，所以其实二维元素的值是一个内存地址（指针），指向了一个一维数组。\",\"外层数组：指的是二维数组本身，他的元素全是一维数组\",\"内层数组：指的是二维数组的元素。\",\"外层数组元素：arr[0],arr[1] 等，值为内层数组的内存地址\",\"内层数组元素：arr[0][0],arr[1][2] 等，值为数据\"]},\"1231\":{\"h\":\"1. 二维数组的声明\"},\"1232\":{\"h\":\"1.1 静态初始化\",\"t\":[\"int[][] arr;//声明和初始化分开 arr = new int[][]{{1},{2}}; int[][] arr = new int[][]{{1,2,3},{2,3}}; //合并成一行 int[][] arr = {{1,2,3},{2,3}};//简化写法 \"]},\"1233\":{\"h\":\"1.2 动态初始化-指定内层数组长度\",\"t\":[\"为数组和内层数组都直接分配了内存空间。此时，数组的长度和内层数组的长度都确定了。\",\"如下：定义了名称为arr的二维数组；二维数组中有3个一维数组；每一个一维数组中有2个元素；一维数组的名称分别为arr[0], arr[1], arr[2]\",\"int[][] arr = new int[3][2];//外层2个元素，内层3个元素 \"]},\"1234\":{\"h\":\"1.3 动态初始化-未指定数组内层长度\",\"t\":[\"只为数组本身指定长度，不为数组内部的内层数组指定长度（内层数组只声明，不初始化）。\",\"意义：二维数组每个元素的数组长度，不再强制相等。\",\"如下：二维数组中有3个一维数组。每个一维数组都是默认初始化值null。\",\"int[][] arr = new int[3][]; //只规定外层长度，不指定内层长度。 \"]},\"1235\":{\"h\":\"2. 数组赋值\",\"t\":[\"动态初始化后，就可以为数组元素赋值了（静态初始化已经赋值过了）。\"]},\"1236\":{\"h\":\"2.1 指定了内层数组长度\",\"t\":[\"为外层元素赋值：外层元素的值是一个一维数组，赋的值也必须是个数组。\",\"为内层元素赋值：层层进。\",\"int[][] arr = new int[3][2] //为外层元素赋值 arr[0] = new int[]{1,2,3}; //为内层元素赋值 arr[0][1] = 10; \"]},\"1237\":{\"h\":\"2.2 未指定内层数组长度\",\"t\":[\"为外层元素赋值：虽然是数组，但是他们的值是空的，需要进行数组的初始化，可以静态初始化，也可以动态初始化，内层数组的长度不限。\",\"为内层元素赋值：外层元素必须初始化，才能为内层元素赋值，不然会报错。\",\"int[][] arr = new int[3][]; //为外层元素赋值，可以任意指定长度 arr[0] = new int[3]; arr[0] = new int[]{1,2,3}; //为内层元素赋值 arr[0][0] = 20; \"]},\"1238\":{\"h\":\"3. 元素的访问和值\",\"t\":[\"任何元素访问前必须初始化，未指定内层数组长度的要先初始化内层数组才能访问内层元素。 访问外层数组元素，得到的是一个内存地址值，指向的是内层数组。\",\"int[][] arr1 = new int[][]{{1,2,3},{2,3}}; arr1[0][1];//2 arr1[0]; // [I@15db9742 [表示数组;I表示int类型;15db9742表示16进制内存地址 int[][] arr2 = new int[3][2]; arr2[1][1];//0 int[][] arr3 = new int[3][]; arr3[1] = null;//外层元素能访问，值为null arr3[1][1];//报错，内层数组未初始化，不能访问内层数据 \"]},\"1239\":{\"h\":\"4. 数组的长度\",\"t\":[\"外层数组的长度：外层元素的个数\",\"内层数组的长度：内层元素的个数\",\"String[][] arr = new String[2][3]; arr.length;//2,外层数组的长度 arr[0].length;//3,第一个内层数组的长度 \"]},\"1240\":{\"h\":\"5. 遍历数组\",\"t\":[\"遍历二维数组就需要嵌套循环了\",\"for(int i = 0;i < arr.length;i++){ for(int j = 0;j < arr[i].length;j++){ System.out.print(arr[i][j] + \\\" \\\"); } System.out.println(); } \"]},\"1241\":{\"h\":\"6. 数组元素的默认初始化值\",\"t\":[\"指定了内层数组的长度 \",\"外层元素的初始化值为：地址值，指向的内层数组\",\"内层元素的初始化值为：与一维数组初始化情况相同\",\"未指定内层数组的长度 \",\"外层元素的初始化值为：null，没有初始化，没有地址\",\"内层元素的初始化值为：不能调用，否则报错。\"]},\"1242\":{\"h\":\"7. 二维数组的内存解析\",\"t\":[\"1-9-4\"]},\"1243\":{\"h\":\"8. 注意事项\",\"t\":[\"数据类型：二维数组也要指定数据类型，这个数据类型限制的是内层数组的元素（外层元素本质上是一维数组，引用类型），也就是内层数组的元素类型也是确定的。\",\"元素访问：未初始化的不能访问。\",\"元素的值：外层数组元素的值是一个内存地址（未初始化则为null）； \",\"即使未赋值，也能取，因为分配内存的时候，内存地址就已经确定了。\"]},\"1244\":{\"h\":\"Ⅳ. 常见异常\"},\"1245\":{\"h\":\"1. 数组索引越界\",\"t\":[\"ArrayIndexOutOfBoundsException：用了不存在的索引（超过范围的索引）\",\"int[] arr = new int[]{1,2,3,4,5}; System.out.println(arr[-1]); System.out.println(arr[5]); \"]},\"1246\":{\"h\":\"2. 空指针\",\"t\":[\"NullPointerException：数组标识符指向的内存没了，或者不存在。\",\"//情况1：数组被赋值为null int[] arr1 = new int[]{1,2,3}; arr1 = null; //情况2：访问未初始化的数组 int[][] arr2 = new int[4][]; System.out.println(arr2[0][0]); //情况3：null调用方法 String[] arr3 = new String[]{\\\"AA\\\",\\\"BB\\\",\\\"CC\\\"}; arr3[0] = null; System.out.println(arr3[0].toString()); \"]},\"1247\":{\"h\":\"Ⅴ. Arrays工具类\",\"t\":[\"操作数组的工具类，包含了很多用来操作数据的方法\",\"详见：Arrays工具类\"]},\"1248\":{\"h\":\"2-1. 类与对象\"},\"1249\":{\"h\":\"Ⅰ. 面向对象\"},\"1250\":{\"h\":\"1. 面向过程与面向对象\",\"t\":[\"面向对象：OOP，Object Oriented Programming\",\"面向过程：Procedure Oriented Programming 二者都是一种思想，面向对象是相对于面向过程而言的。面向过程，强调的是功能行为，以函数为最小单位，考虑怎么做。面向对象，将功能封装进对象，强调具备了功能的对象，以类/对象为最小单位，考虑谁来做。\",\"面向对象更加强调运用人类在日常的思维逻辑中采用的思想方法与原则，如抽象、分类、继承、聚合、多态等。\"]},\"1251\":{\"h\":\"2. 面向对象的三大特征\",\"t\":[\"封装 (Encapsulation)\",\"继承 (Inheritance)\",\"多态 (Polymorphism)\"]},\"1252\":{\"h\":\"3. 面向对象的思想概述\",\"t\":[\"程序员从面向过程的执行者转化成了面向对象的指挥者\",\"面向对象分析方法分析问题的思路和步骤： \",\"根据问题需要，选择问题所针对的现实世界中的实体。\",\"从实体中寻找解决问题相关的属性和功能，这些属性和功能就形成了概念世界中的类。\",\"把抽象的实体用计算机语言进行描述，形成计算机世界中类的定义。即借助某种程序语言，把类构造成计算机能够识别和处理的数据结构。\",\"将类实例化成计算机世界中的对象。对象是计算机世界中解决问题的最终工具。\"]},\"1253\":{\"h\":\"4. Java中的万物皆对象\",\"t\":[\"在Java语言范畴中，我们都将功能、结构等封装到类中，通过类的实例化，来调用具体的功能结构\",\"在java中，万物皆对象，所有代码都要归属为一个对象；包括涉及到Java语言与前端Html（element对象）、后端的数据库交互时，前后端的结构在Java层面交互时，都体现为类、对象。\"]},\"1254\":{\"h\":\"Ⅱ. 类与对象\"},\"1255\":{\"h\":\"1. 什么是类与对象\",\"t\":[\"类(Class)和对象(Object)是面向对象的核心概念。\",\"类是对一类事物的描述，是抽象的、概念上的定义\",\"对象是实际存在的该类事物的每个个体，因而也称为实例(instance)。万事万物皆对象；\",\"类 = 抽象概念的人；对象 = 实实在在的某个人\",\"面向对象程序设计的重点是 类的设计；类的设计，其实就是类的成员的设计\"]},\"1256\":{\"h\":\"2. 类与引用数据类型\",\"t\":[\"所有类都是引用数据类型，类型就是类名。\",\"String数据类型本质就是java内部定义的String类。\"]},\"1257\":{\"h\":\"3. 类与类的成员\",\"t\":[\"成员变量（field）：类拥有的属性\",\"方法（method）：类可以做的事（行为）\"]},\"1258\":{\"h\":\"4. 创建类\",\"t\":[\"一个文件中可以创建多个类（只能有一个带public的），但是开发中，通常一个文件中只有一个类。\",\"class Person{ //class关键字 类名 String name; //属性 int age = 1; //属性，定义并初始化 public void eat(){ //方法 System.out.println(\\\"吃饭\\\"); } public void talk(String language){ //带参数的方法 System.out.pringln(\\\"说\\\"+language); } } \"]},\"1259\":{\"h\":\"5. 创建对象\",\"t\":[\"根据类创建类的对象，我们使用类的成员时是通过具体的对象使用的。\",\"创建类的对象 = 类的实例化 = 实例化类\",\"语法：类名 对象名 = new 类名(可选参数);\",\"创建玩对象后，就可以使用“对象名. 对象成员 ”的方式访问对象成员（包括属性和 方法）\",\"public class Person{ public static void main(String[] args){ //在程序入口中调用类 Person p1 = new Person(); //使用对象调用属性：对象.属性名 p1.name = \\\"Tom\\\" //为属性赋值 System.out.println(p1.age);//获取属性的值 //使用对象调用方法：对象.方法名 p1.eat(); p1.talk(\\\"English\\\"); } } \"]},\"1260\":{\"h\":\"6. 类和对象的使用\",\"t\":[\"创建类：设计类的成员\",\"创建类的对象\",\"通过对象调用属性和方法\"]},\"1261\":{\"h\":\"7. 类与多个对象\",\"t\":[\"如果创建了一个类的多个对象，则每个对象都独立的拥有一套类的属性（非static的）。\",\"意味着：如果我们修改一个对象的属性a，则不影响另外一个对象属性a的值。\"]},\"1262\":{\"h\":\"8. 对象间的赋值\",\"t\":[\"对象间进行赋值时，是把保存对象的内存地址赋给了对方，因此两个对象指向同一份内存地址，即执行同一个对象实体。\",\"Person p1 = new Person(); Person p2 = p1; p2.age = 20; system.out.println(p1.age);//20 \"]},\"1263\":{\"h\":\"9. 类的访问机制\",\"t\":[\"在一个类中的访问机制： 类中的方法可以直接访问类中的成员变量 。 \",\"例外：static 方法访问非 static， ， 编译不通过 。\",\"在不同类中的访问机制： 先创建要访问类的对象 ， 再用对象访问类中定义的成员\"]},\"1264\":{\"h\":\"10. 补充说明\",\"t\":[\"java内置类：我们是通过创建类和方法来完成一些功能的，java内置了丰富的类，帮我们完成了很多常见的功能。\",\"属性的默认值：当用对象调用未赋值的属性时，属性会有个默认值，这个默认值跟数组中元素的默认值一样。\"]},\"1265\":{\"h\":\"Ⅲ. 特殊形式对象\"},\"1266\":{\"h\":\"1. 对象数组\",\"t\":[\"数组可以是任何类型：基本数据类型、引用类型都可以。对象就是引用类型的，具体类型就是类名，例如：String数据类型就是引用类型，String是java的一个内置类。\",\"创建对象数组：假设有Person类，我们需要一次性创建20个Person类的实例、\",\"Person [] p1 = new Person[20]; //直接声明了20个对象 for(int i=0; i<p1.legnth;i++){ p1[i] = new Student(); //循环创建对象 p1[i][age] = (int)(Math.random()*10+11));//为age赋值 } \",\"如上，此时内存中有1个数组，数组中包含了20个元素，每个元素是Person类型，但是只是null，并不是对象，具体对象还需要我们进一步创建（初始化），可以使用for循环创建。\"]},\"1267\":{\"h\":\"2. 匿名对象\",\"t\":[\"我们创建的对象，没有显式的赋给一个变量名，即为匿名对象。\",\"特征：匿名对象只能调用一次\",\"使用场景：对象作为函数的参数\",\"public class Test(){ public static void maina(String[] args){ new Phone().age = 20;//创建对象，不赋值，直接使用，执行完就失效 new Phone().age; //1; //应用场景：对象作为方法的参数 HelloGay hg = new HelloGay(); hg.show(new Phone()); } } class HelloGay{ public void show(Phone phone){ public void sayHello() public void doIt(); } } class Gay{ int age = 1; public void sayHello(){ System.out.println('Hello') } public void doIt(){ System.out.println(\\\"Do\\\"); } } \"]},\"1268\":{\"h\":\"2-2. 属性与方法\"},\"1269\":{\"h\":\"Ⅰ. 属性\"},\"1270\":{\"h\":\"1. 属性声明语法\",\"t\":[\"修饰符 数据类型 属性名 = 初始化值; public String age = 10; \",\"修饰符 \",\"权限修饰符：private、缺省、protected、public（详见封装）\",\"其他修饰符：static、final（见后续章节）\",\"数据类型：任何基本数据类型(如int、Boolean) 或 任何引用数据类型。 \",\"包括：属性的类型可以是一个类（修饰符将表示一个对象，对象也是引用数据类型）。\",\"属性名：属于标识符，符合命名规则和规范即可。\",\"初始化值：可以选择给变量一个初始化值，如果没有初始化值，会采用数据类型的默认值。\"]},\"1271\":{\"h\":\"2. 属性与局部变量的对比\",\"t\":[\"属性（成员变量）：声明在类中的变量\",\"局部变量：只在局部作用域有效的变量 \",\"方法内、方法形参、构造器内、构造器形参、代码块内\"]},\"1272\":{\"h\":\"2.1 相同点\",\"t\":[\"定义变量的格式：数据类型 变量名 = 变量值 \",\"属性还会多个权限控制符\",\"先声明，后使用\",\"变量都有其对应的作用域\"]},\"1273\":{\"h\":\"2.2 不同点\",\"t\":[\"2-2-1\",\"在类中声明的位置的不同 \",\"属性：直接定义在类的一对{}内\",\"局部变量：声明在方法内、方法形参、代码块内、构造器形参、构造器内部的变量\",\"关于权限修饰符的不同 \",\"属性：可以在声明属性时，指明其权限，使用权限修饰符。常用的权限修饰符：private、public、缺省、protected --->封装性\",\"局部变量：不可以使用权限修饰符。\",\"默认初始化值的情况 \",\"属性：类的属性，根据其类型，都有默认初始化值（和数组元素的默认值一样）。 \",\"整型（byte、short、int、long）：0\",\"浮点型（float、double）：0.0\",\"字符型（char）：0 （或'\\\\u0000'）\",\"布尔型（boolean）：false\",\"引用数据类型（类、数组、接口）：null\",\"局部变量：没有默认初始化值。意味着，我们在调用局部变量之前，一定要显式赋值。 \",\"特别地：形参在调用时，我们赋值即可。\",\"在内存中加载的位置： \",\"属性：加载到堆空间中（非static）\",\"局部变量：加载到栈空间\"]},\"1274\":{\"h\":\"3. 对属性可以赋值的位置\",\"t\":[\"①默认初始化\",\"②显式初始化\",\"③构造器中初始化\",\"④有了对象以后，可以通过\\\"对象.属性\\\"或\\\"对象.方法\\\"的方式，进行赋值\",\"⑤在代码块中赋值\",\"执行的先后顺序：① - ② =⑤ - ③ - ④；②跟⑤谁在前就先执行谁，一般②在前\"]},\"1275\":{\"h\":\"Ⅱ. 方法\"},\"1276\":{\"h\":\"1. 概述\",\"t\":[\"方法：描述类应该具有的功能。\",\"功能封装为方法的目的是，可以实现代码重用，简化代码。Java里的方法不能独立存在，所有的方法必须定义在类里。\",\"2-2-1\"]},\"1277\":{\"h\":\"2. 方法的分类\",\"t\":[\"权限修饰符 其他关键字 返回值类型 方法名(形参列表){ 方法体 return 返回值;//可选 } //暂时不考虑：static、final、abstract关键字 \",\"权限修饰符：Java规定的4种权限修饰符：private、public、缺省、protected （详见封装）\",\"返回值：分为有返回值的和没返回值的 \",\"有返回值：必须在方法声明时，指定返回值的类型。同时，方法中，需要使用 return关键字来返回指定类型的变量或常量：“return 数据”。 \",\"可以return一个表达式，只要这个表达式的结果是一个值。\",\"没有返回值：如果方法没有返回值，则方法声明时，使用void来表示。通常，没有返回值的方法中，就不需要使用return.但是，如果使用的话，只能“return;”表示结束此方法的意思。 \",\"比如在条件判断中，对不满足条件的参数，直接return，结束程序，不继续执行了。\",\"方法名：属于标识符，遵循标识符的规则和规范，“见名知意”\",\"形参列表：方法可以声明0个，1个，或多个形参。 \",\"格式：数据类型1 形参1,数据类型2 形参2,...\",\"注意：形参不能有默认值\",\"方法体：方法功能的体现。\"]},\"1278\":{\"h\":\"3. return关键字\",\"t\":[\"使用在方法体中，有以下作用\",\"结束方法\",\"针对于有返回值类型的方法，使用\\\"return 数据\\\"方法返回所要的数据。\",\"注意：return关键字后面不可以声明执行语句（会直接报错），但可以是有结果的表达式。\"]},\"1279\":{\"h\":\"4. 方法的调用\"},\"1280\":{\"h\":\"4.1 调用在main所在类中声明的方法\",\"t\":[\"在main所在类中声明的普通方法（非static），不能在main中直接调用，也需要先建立对象，再进行调用\",\"public class Person{ public static void main(String [] args){ Person p1 = new Person(); //依然需要new对象 System.out.println(p1.say()); } public String say(){ return \\\"hello\\\"; } } \"]},\"1281\":{\"h\":\"4.2 注意\",\"t\":[\"方法被调用一次，就会执行一次\",\"没有具体返回值的情况，返回值类型用关键字void表示，那么方法体中可以不必使用return语句。如果使用，仅用来结束方法。\",\"定义方法时，方法的结果应该返回给调用者，交由调用者处理\",\"方法中只能调用方法或属性，不可以在方法内部定义方法。\"]},\"1282\":{\"h\":\"5. 方法访问类的成员\",\"t\":[\"方法中，可以调用当前类的属性或方法，包括调用自己（递归）。方法中也可以定义变量，但注意不能定义方法。\",\"语法：直接用就行，没有特殊语法，在调用时可以对属性进行修改\",\"class hello { public static void main(String[] args) { Person p = new Person(); p.grow();//我是jinno我现在11岁[属性值被方法修改了] p.grow();//我是jinno我现在12岁 } } class Person{ int age = 10; String uname = \\\"jinno\\\"; public void grow(){ age++; talk(); } public void talk(){ System.out.println(\\\"我是\\\"+uname+\\\"我现在\\\"+age+\\\"岁\\\"); } } \"]},\"1283\":{\"h\":\"6. 递归方法\",\"t\":[\"提示\",\"详见：数据结构与算法>递归\",\"一个方法体内调用它自身。\",\"方法递归包含了一种隐式的循环，它会重复执行某段代码，但这种重复执行无须循环控制。递归一定要向已知方向递归，否则这种递归就变成了无穷递归，类似于死循环。\",\"示例：计算1-100之间所有自然数的和\",\"//使用循环 int sum = 0; for (int i = 1; i <= 100; i++) { sum += i; } //使用递归函数 public int getSum(int n) {// 3 if (n == 1) { return 1; } else { return n + getSum(n - 1); } } \"]},\"1284\":{\"h\":\"Ⅲ. 方法的重载\"},\"1285\":{\"h\":\"1. overload：重载\",\"t\":[\"在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同即可（跟方法的权限修饰符、返回值类型、形参变量名、方法体都没有关系！）。\",\"重载的判断方式：两同一不同\",\"两同：同一个类、相同方法名\",\"不同：参数列表不同 \",\"参数个数不同\",\"参数类型不同：参数是有顺序的；\"]},\"1286\":{\"h\":\"2. 重载的调用\",\"t\":[\"调用方法时，是通过方法名和参数列表来确定调用哪一个方法的。\",\"即通过法名 ---> 参数列表确定某一个指定的方法。\"]},\"1287\":{\"h\":\"3. 重载示例\",\"t\":[\"public void getInfo(int id){...} public void getInfo(String id){...} private void getInfo(String id,Char flag){...} \"]},\"1288\":{\"h\":\"Ⅳ. 参数传递\"},\"1289\":{\"h\":\"1. 概念\",\"t\":[\"方法必须由其所在类或对象调用才有意义。方法是可以有参数的：\",\"形参：方法声明时的参数\",\"实参：方法调用时实际传给形参的参数值\"]},\"1290\":{\"h\":\"2. 参数的数据类型\",\"t\":[\"方法的参数可以是任意数据类型。\",\"基础数据类型\",\"引用数据类型：包括对象作为参数（数据类型是类）。\"]},\"1291\":{\"h\":\"3. 参数值的传递机制\",\"t\":[\"Java里方法的参数传递方式只有一种：值传递。 即将实际参数值的副本（复制品）传入方法内，而参数本身不受影响。\"]},\"1292\":{\"h\":\"3.1 基本数据类型\",\"t\":[\"参数赋给形参的是实参真实存储的数据值，传递完之后，两个变量互不干扰。\",\"示例：交换两个变量（基本变量）的值。\",\"public class Test{ public static void main(String[] args){ int m = 10; int n = 20; Test test = new Test() test.swap(m,n); System.out.println(m+n); //10,20 } public void swap(int m,int n){ int temp = m ; m = n; n = temp; } } \",\"错误分析：我们将m,n传递给方法后，方法的形参被赋予了m,n的值，方法中操作的是形参中的m,n，形参中的m,n和原始数据m,n是没有关联的，所以这个交换值的函数失败了。可以使用return将修改后的数据返回。\"]},\"1293\":{\"h\":\"3.2 引用数据类型\",\"t\":[\"如果参数是引用数据类型，此时实参赋给形参的是实参存储数据的地址值。我们经常会用到将一个对象作为参数。\",\"示例：交换两个变量的值。\",\"class Test{ public void Swap(Data data){ int temp = data.m ; data.m = data.n; data.n = temp; } } class Data{ int m = 10; int n = 20; } \",\"这时上面的需求被实现了。\"]},\"1294\":{\"h\":\"4. 可变个数形参的方法\",\"t\":[\"可变个数形参（Varargs：variable number or argumengts）机制：允许直接定义能和多个实参相匹配的形参。\"]},\"1295\":{\"h\":\"4.1 使用说明\",\"t\":[\"格式1：方法名(参数的类型 ...参数名)\",\"格式2：方法名(参数的类型[] 参数名) ；这个写法不推荐，这是JDK5.0以前的写法\",\"public void show(int i,String ...hobbyl){...} \",\"当调用可变个数形参的方法时，传入的参数个数可以是：0个，1个,2个，。。。\",\"可变个数形参的方法与本类中方法名相同，形参不同的方法之间构成重载\",\"可变个数形参的方法与本类中方法名相同，形参类型也相同的数组之间不构成重载。换句话说，二者不能共存（可变个数形参的第二种写法）。\",\"如果还有其他参数，可变个数形参在方法的形参中，必须声明在末尾\",\"可变个数形参在方法的形参中,最多只能声明一个可变形参。\",\"当调用方法时，传递的参数有符合条件的非可变形参方法，就优先调用。\"]},\"1296\":{\"h\":\"4.2 遍历可变形参\",\"t\":[\"可以在方法中，使用for循环遍历可变个数形参。\",\"public void show(String ... strs){ for(int i = 0;i < strs.length;i++){ System.out.println(strs[i]); } } \"]},\"1297\":{\"h\":\"4.3 注意事项\",\"t\":[\"可变形参的两种写法，java都会认的，所以不要同时出现。\",\"尽量使用第一种写法 ...str；避免方法重载冲突。\"]},\"1298\":{\"h\":\"2-3. 封装\"},\"1299\":{\"h\":\"Ⅰ. 介绍\"},\"1300\":{\"h\":\"程序设计的追求\",\"t\":[\"高内聚 ：类的内部数据操作细节自己完成，不允许外部干涉；\",\"低耦合 ：仅对外暴露少量的方法用于使用。\"]},\"1301\":{\"h\":\"1. 什么是封装\",\"t\":[\"隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提高系统的可扩展性、可维护性。通俗的说，把该隐藏的隐藏起来，该暴露的暴露出来。这就是封装性的设计思想。\"]},\"1302\":{\"h\":\"2. 封装性的意义\",\"t\":[\"当我们使用一个类时，如果直接对类内部的属性进行访问和操作，可能会导致数据的错误、混乱或安全性问题。\",\"public class Test{ public static void main(String[] args){ Person p1 = new Person(); p1.age = -1; //修改了Person类内部的属性 } } class Person{ int age; String uname; } \"]},\"1303\":{\"h\":\"2.1 直接访问属性\",\"t\":[\"如上，我们在类外部直接访问了类内部的属性，将年龄设置成了负数，这是不符合常理且危险的。我们正确的做法是，属性只能在类的内部访问，在类外部访问需要通过方法，我们可以在方法中通过方法体来验证和保护要访问的数据。\"]},\"1304\":{\"h\":\"2.2 通过封装保护属性\",\"t\":[\"如下，我们通过将属性设置为私有的，禁止外部访问，来包含属性，并设置 setxxx和get方法来访问和操作属性。\",\"public class Test{ public static void main(String[] args){ Person p1 = new Person(); p1.getAge; p1.age = 10;//报错，私有属性无权访问 p1.setAge(10) } } class Person{ private int age; String uname; public void setAge(a){ if(a<=0){ age = 1; }else{ age = a; } } public void getAge(){ return age; } } \"]},\"1305\":{\"h\":\"2.3 总结\",\"t\":[\"Java中通过将数据声明为私有的(private)，再提供公共的（public）方法:getXxx() 和setXxx()实现对该属性的操作，以实现下述目的：\",\"隐藏一个类中不需要对外提供的实现细节；\",\"使用者只能通过事先定制好的方法来访问数据，可以方便地加入控制逻辑，限制对属性的不合理操作；\",\"便于修改，增强代码的可维护性；\"]},\"1306\":{\"h\":\"3. 封装思想的体现\",\"t\":[\"如上：Java中通过将数据声明为私有的(private)，再提供公共的（public）方法:getXxx() 和setXxx()实现对该属性的操作\",\"不对外暴露的私有的方法：将一些方法也设置成私有的。\",\"单例模式\"]},\"1307\":{\"h\":\"4. 封装性的总结\",\"t\":[\"Java提供了4种权限修饰符来修饰类及类的内部结构，体现类及类的内部结构在被调用时的可见性的大小。\"]},\"1308\":{\"h\":\"Ⅱ. 权限修饰符\"},\"1309\":{\"h\":\"1. 四种访问权限修饰符\",\"t\":[\"Java权限修饰符置于类的成员定义前，用来限定对象对该类成员的访问权限。\",\"四种权限从大到小为：public、protected、缺省、private\"]},\"1310\":{\"h\":\"2. 具体修饰的目标\",\"t\":[\"修饰类的内部结构：属性、方法、构造器、内部类\",\"修饰类：修饰类的话，只能使用：缺省、public \",\"public类可以在任意地方被访问\",\"default（缺省）类只可以被同一个包内部的类访问\"]},\"1311\":{\"h\":\"3. 权限范围介绍\",\"t\":[\"2-3-1\"]},\"1312\":{\"h\":\"4. 开发中的做法\",\"t\":[\"在实际开发中，我们一般都将属性定义为私有的，访问和操作都以方法的形式\",\"setXxx：设置成员\",\"getXxx：获取成员\"]},\"1313\":{\"h\":\"2-4. 构造器\",\"t\":[\"constructor 构造器，也叫构造方法，是java语言中类的一个成员。\"]},\"1314\":{\"h\":\"1. 构造器的作用\"},\"1315\":{\"h\":\"1.1 创建对象\",\"t\":[\"我们创建对象时进行的语法其实是调用的构造器（构造方法）：new+构造器。\",\"Person p1 = new Person(); \"]},\"1316\":{\"h\":\"1.2 给对象进行初始化\",\"t\":[\"构造器可以带参数，创建对象时利用传参进行属性的初始化。\",\"初始化：过滤，为属性赋值等。\",\"Person p1 = new Person(\\\"jinno\\\",14); public class Person{ private String name; private int age; public Person(String name,int age){ //带参数的构造方法，用于对属性初始化 this.name = name; this.age = age; } } \"]},\"1317\":{\"h\":\"2. 构造器的语法\",\"t\":[\"修饰符 类名 (参数列表){ 初始化语句; } \",\"它具有与类相同的名称（必须一样）\",\"它不声明返回值类型。（与声明为void不同）\",\"不能被static、final、synchronized、abstract、native修饰\",\"不能有return语句返回值\"]},\"1318\":{\"h\":\"3. 构造器分类\",\"t\":[\"隐式无参构造器（系统默认提供）\",\"显式定义一个或多个构造器（无参、有参）\"]},\"1319\":{\"h\":\"4. 构造器重载\",\"t\":[\"构造器虽然不是方法，但是也能像方法那样重载。\",\"即可以定义多个互相重载的构造器。和方法重载一样，重载时，参数列表必须不同\",\"class Person{ int age; String uname; Double Money; public Person(){...}; public Person(String uname){...} public Person(String uname,int age){...} public Person(String uname,Double money){...} } \",\"我们创建对象时，会根据参数，选择符合参数列表的构造器，使初始化时更加灵活。\"]},\"1320\":{\"h\":\"5. 默认构造器\",\"t\":[\"如果没有显式的定义类的构造器的话，则系统默认提供一个空参的构造器（权限跟类一样）。一旦我们显式的定义了类的构造器之后，系统就不再提供默认的空参构造器\",\"也可以显式的创建一个空参构造器（一般开发中都会提供一个）。\"]},\"1321\":{\"h\":\"6. 注意事项\",\"t\":[\"Java 语言中，每个类都至少有一个构造器\",\"默认构造器的修饰符与所属类的修饰符一致\",\"一旦显式定义了构造器，则系统不再提供默认构造器\",\"一个类可以创建多个重载的构造器\",\"父类的构造器不可被子类继承\"]},\"1322\":{\"h\":\"7. 构造器的调用\",\"t\":[\"创建对象时，根据参数列表调用对应的构造器来创建对象。\"]},\"1323\":{\"h\":\"8. 总结：属性赋值的先后顺序\",\"t\":[\"① 默认初始化\",\"② 显式初始化\",\"③ 构造器中初始化\",\"④ 通过\\\"对象.方法\\\" 或 \\\"对象.属性\\\"的方式，赋值\"]},\"1324\":{\"h\":\"2-5. 关键字\"},\"1325\":{\"h\":\"Ⅰ. this\"},\"1326\":{\"h\":\"1. this的作用\",\"t\":[\"this 可以调用类的属性、方法和构造器。\"]},\"1327\":{\"h\":\"2. this的使用\"},\"1328\":{\"h\":\"2.1 在类的方法中\",\"t\":[\"可以使用 this.属性 或 this.方法 的方式，调用当前对象属性或方法。\",\"通常情况下，都选择省略 this.。特殊情况下，如果方法的形参和类的属性同名时，我们必须显式的使用 this.变量 的方式，表明此变量是属性，而非形参。\"]},\"1329\":{\"h\":\"2.2 在类的构造器中\",\"t\":[\"在类的构造器中，我们可以使用 this.属性 或 this.方法 的方式，调用当前正在创建的对象属性或方法。\",\"通常情况下，我们都选择省略this.。特殊情况下，如果构造器的形参和类的属性同名时，我们必须显式的使用 this.变量 的方式，表明此变量是属性，而非形参。\"]},\"1330\":{\"h\":\"3. this调用构造器\",\"t\":[\"我们在类的构造器中，可以显式的使用\\\"this(形参列表)\\\"方式，调用本类中指定的其他构造器，以运行其他构造器的代码，省的再写一份，减少了冗余。\",\"public class Person{ private int age; private String uanme; public Person(int age){ this.age = age;//this调用属性 } public Person(int age,String uname){ this(age);//this调用构造器 this.uanme = uanme; } } \",\"\\\"this(形参列表)\\\"必须声明在当前构造器的首行\",\"this的调用不要写成死循环（互相this，或this自己）\",\"如果一个类中声明了n个构造器，则最多有 n - 1个构造器中使用了\\\"this(形参列表)\\\"\",\"构造器内部，最多只能声明一个\\\"this(形参列表)\\\"，用来调用其他的构造器\"]},\"1331\":{\"h\":\"4. this使用时机\",\"t\":[\"当在方法内需要用到调用该方法的对象时，就用this。\",\"具体的：我们可以用this来区分属性和局部变量。\"]},\"1332\":{\"h\":\"5. 总结\",\"t\":[\"哪个对象调用或者哪个对象正在创建，this就表明是哪个对象。\",\"当形参与成员变量同名时，如果在方法内或构造器内需要使用成员变量，必须添加this来表明该变量是类的成员变量\",\"使用this访问属性和方法时，如果在本类中未找到，会从父类中查找\",\"也可以通过添加this增加可读性\"]},\"1333\":{\"h\":\"Ⅱ. package\",\"t\":[\"package就是包的意思。\"]},\"1334\":{\"h\":\"1. 什么是包\",\"t\":[\"为了更好的实现项目中类的管理，提供包的概念。\",\"本质就是一个文件夹，里面包含了一系列类，方便类的管理。\"]},\"1335\":{\"h\":\"2. 包的作用\",\"t\":[\"包帮助管理大型软件系统：将功能相近的类划分到同一个包中。比如：MVC的设计模式\",\"包可以包含类和子包，划分项目层次，便于管理\",\"解决类命名冲突的问题\",\"控制访问权限\",\"包虽然就是个文件夹，但是跟文件夹还是不一样的。在同一个类中，只要用package设置了包名，就可以直接实例化包中其他类。而不用将类导入。\"]},\"1336\":{\"h\":\"3. 指定包\",\"t\":[\"package语句作为Java源文件的第一条语句，指明该文件中定义的类所在的包。\",\"若缺省该语句，则指定为无名包\",\"//package 顶层包名.子包名 ; package math; package api.back.user; \"]},\"1337\":{\"h\":\"4. 包的命名规则\",\"t\":[\"包属于标识符，遵循标识符的命名规则、规范(xxxyyyzzz)、且最好“见名知意”。\",\"另外包是有层级的（目录的层级），层级可以用包名的点区分，每 . 一次，就代表一层文件目录。\"]},\"1338\":{\"h\":\"5. JDK中主要包介绍\",\"t\":[\"java.lang----包含一些Java语言的核心类，如String、Math、Integer、 System和Thread，提供常用功能\",\"java.net----包含执行与网络相关的操作的类和接口。\",\"java.io----包含能提供多种输入/输出功能的类。\",\"java.util----包含一些实用工具类，如定义系统特性、接口的集合框架类、使用与日期日历相关的函数。\",\"java.text----包含了一些java格式化相关的类\",\"java.sql----包含了java进行JDBC数据库编程的相关类/接口\",\"java.awt----包含了构成抽象窗口工具集（abstract window toolkits）的多个类，这些类被用来构建和管理应用程序的图形用户界面(GUI)。 B/S C/S\"]},\"1339\":{\"h\":\"Ⅲ. import\",\"t\":[\"可以理解为：package用来定义命名空间，而import是导入命名空间的。\"]},\"1340\":{\"h\":\"1. 说明\",\"t\":[\"为使用定义在不同包中的Java类，需用import语句来引入指定包层次下所需要的类或全部类(.*)。\",\"import语句告诉编译器到哪里去寻找类。\"]},\"1341\":{\"h\":\"2. 语法格式\",\"t\":[\"在源文件中显式的使用import结构导入指定包下的类、接口\",\"import 包名.类名; import 包名.*; //*表示所有类 \"]},\"1342\":{\"h\":\"3. import的使用细节\",\"t\":[\"位置：声明在包的声明和类的声明之间\",\"导入多个结构：如果需要导入多个结构，则并列写出即可\",\"导入包下全部类：可以使用\\\"xxx.*\\\"的方式，表示可以导入xxx包下的所有结构\",\"lang包：如果使用的类或接口是java.lang包下定义的，则可以省略import结构\",\"同包类：如果使用的类或接口是本包下定义的，则可以省略import结构，直接用\"]},\"1343\":{\"h\":\"4. 全类名：不导入包直接用\",\"t\":[\"想不导入直接用也可以，在类前面加上包名就行。\",\"带包名的类名，也称为全类名。\",\"api.back.User u1 = new api.back.User(); \"]},\"1344\":{\"h\":\"5. 不同包下的同名类\",\"t\":[\"如果在源文件中，使用了不同包下的同名的类，则必须至少有一个类需要以全类名的方式显示（也可以都用全类名）。\",\"注意：使用了全类名，就不需要导入了，也一定不要导入，不然还有可能会出问题。\",\"此时：导入包和类名的可以直接用类名初始化；没导入的用全类名，互不干扰。\"]},\"1345\":{\"h\":\"6. 子包下的类\",\"t\":[\"使用\\\"xxx.*\\\"方式表明可以调用xxx包下的所有结构。但是如果使用的是xxx子包下的结构，则仍需要显式导入（包括本包下的子包）；\",\"比如：lang包无需导入，但是要使用lang包下的子包，还是需要导入。\",\"import java.lang.reflect.Field; \"]},\"1346\":{\"h\":\"7. import static\",\"t\":[\"import static：导入指定类或接口中的静态结构（属性或方法）。\",\"即：直接导入静态属性和静态方法。\"]},\"1347\":{\"h\":\"Ⅳ. final\"},\"1348\":{\"h\":\"1. 说明\",\"t\":[\"在Java中声明类、变量和方法时，可使用关键字final来修饰,表示“最终的”。\",\"final可以用来修饰的结构：类、方法、变量\"]},\"1349\":{\"h\":\"2. final类：无法继承\",\"t\":[\"final用来修饰一个类:此类不能被其他类所继承，提高安全性\",\"java内部就有很多这样的类：比如：String类、System类\",\"final public class A{}//final在public前后都可以 final class A{} \"]},\"1350\":{\"h\":\"3. final方法：不能重写\",\"t\":[\"final 用来修饰方法：表明此方法不可以被重写。\",\"比如：Object类中的getClass()。\",\"class A{ public final void say(){...} } \"]},\"1351\":{\"h\":\"4. final变量：常量\",\"t\":[\"final 用来修饰变量：此时的\\\"变量\\\"就称为是一个常量，此时常量名要大写\"]},\"1352\":{\"h\":\"4.1 final修饰属性\",\"t\":[\"修饰的属性必须赋值，且只能被赋值一次，不然会报错，可以考虑赋值的位置有：显式初始化、代码块中初始化、构造器中初始化；即在生命周期内，必须在对象创建前初始化。\",\"class A{ final int AGE = 18;//显式初始化 final String MAME; final int SEX; { NAME = \\\"jinno\\\" } public A{ SEX = 1; } } \"]},\"1353\":{\"h\":\"4.2 final修饰局部变量\",\"t\":[\"public satic void main(String[] args){ final int A = 10; A++;//出错 } \"]},\"1354\":{\"h\":\"4.3 final修饰形参\",\"t\":[\"形参也属于局部变量；final修饰形参时，表明此形参是一个常量。当我们调用此方法时，给常量形参赋一个实参。一旦赋值以后，就只能在方法体内使用此形参，但不能进行重新赋值。\",\"public void getIQ(fianl int IQ){ //这里不赋值，不会报错 IQ = 143; //IQ++;报错 return IQ+10;//这样是可以的，没有改变IQ } \"]},\"1355\":{\"h\":\"5. static + final\",\"t\":[\"static final 用来修饰属性：全局常量\"]},\"1356\":{\"h\":\"Ⅴ. 其他\"},\"1357\":{\"h\":\"1. native\",\"t\":[\"主要用在方法上，一个native方法就是一个Java调用非Java代码的接口。一个native方法是指该方法的实现由非Java语言实现，比如用C或C++实现。在定义一个native方法时，并不提供实现体（比较像定义一个Java Interface），因为其实现体是由非Java语言在外面实现的。\",\"public static native long currentTimeMillis(); \"]},\"1358\":{\"h\":\"2-6. 继承\"},\"1359\":{\"h\":\"Ⅰ. extends 继承\",\"t\":[\"多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中，那么多个类无需再定义这些属性和行为，只要继承那个类即可。\"]},\"1360\":{\"h\":\"1. 语法\",\"t\":[\"class Subclass extends SuperClass{ } class A extends B{} \",\"A：子类、派生类、subclass\",\"B：父类、超类、基类、superclass\"]},\"1361\":{\"h\":\"2. 继承后的效果\",\"t\":[\"一旦子类A继承父类B以后，子类A中就获取了父类B中声明的所有的属性和方法。\",\"private属性和方法也继承了，继承过来后也是private权限。如果要使用，也需要使用getxxx和 setXxx来获取和操作；继承不能破坏封装性。\",\"子类继承父类以后，还可以声明自己特有的属性或方法：实现功能的拓展。子类和父类的关系，不同于子集和集合的关系。extends：延展、扩展\"]},\"1362\":{\"h\":\"3. 继承的意义\",\"t\":[\"继承的出现减少了代码冗余，提高了代码的复用性。‘\",\"便于功能的扩展\",\"继承的出现让类与类之间产生了关系，为之后多态性的使用，提供了前提\",\"注意：不要仅为了获取其他类中某个功能而去继承\"]},\"1363\":{\"h\":\"4. 继承的规则总结\",\"t\":[\"一个类可以被多个子类继承。\",\"子类不能直接访问父类中私有的(private) 的成员变量和方法\",\"Java只支持单继承和多层继承，不允许多重继承； \",\"一个类只能有一个父类，可以链式继承，不能多重继承。\",\"子类父类是相对的概念（父类的父类也是父类）\",\"子类直接继承的父类，称为：直接父类。间接继承的父类称为：间接父类\",\"子类继承父类以后，就获取了直接父类以及所有间接父类中声明的属性和方法 \",\"private修饰的成员也继承了，但是不能直接访问private修饰的成员\"]},\"1364\":{\"h\":\"5. Object类\",\"t\":[\"如果我们没有显式的声明一个类的父类的话，则此类继承于java.lang.Object类\",\"所有的java类（除java.lang.Object类之外）都直接或间接的继承于java.lang.Object类\",\"意味着，所有的java类具有java.lang.Object类声明的功能。\"]},\"1365\":{\"h\":\"6. 权限问题\"},\"1366\":{\"h\":\"6.1 子类是否能继承父类的private成员？\",\"t\":[\"关于子类是否能继承父类的private成员，目前有两种说法：\",\"说法一：能继承 \",\"可以继承的观点是，在堆内存中，子类实例其实是，在【父类实例】的基础上，再增加子类独有的属性。因为子类实例中包含父类中的private成员，所以认为可以继承\",\"这种观点认为，封装和继承是独立的，继承是不会破坏封装性的\",\"说法二：不能继承 \",\"不可以继承的观点是，根据定义，子类只能通过父类方法来访问父类中的private成员，而不可以直接访问，所以认为不可以继承\"]},\"1367\":{\"h\":\"6.2 底层解析\",\"t\":[\"创建子类对象时，除了将本类所有的成员复制一份到内存外，还会将父类所有的成员复制一份，子类对象访问继承来的属性和方法时，访问的就是继承来的。\",\"对于父类中的private成员，子类实例也会同样复制一份（这也是为什么有观点认为private成员能继承）。不过这个继承来的private成员，子类是无法直接访问的，必须借助父类的getXxx、setXxx方法才能访问（这也是为什么有观点认为private成员是无法继承的）。\"]},\"1368\":{\"h\":\"6.3 子类访问父类中的private成员\",\"t\":[\"需要父类实现了private成员的getXxx和setXxx方法，子类继承了这些方法后，就可以通过调用这些方法来实现。\",\"[子类继承父类private成员的测试:] class Father{ private int age = 88; public int getAge() { return age; } public void setAge(int age) { this.age = age; } } class Son extends Father{ public void info(){ //System.out.println(age); //直接访问继承到的父类的private属性，会报错 System.out.println(getAge()); //通过继承的父类的getAge方法获取 setAge(50); //通过继承的父类的setAge方法来设置 System.out.println(getAge()); } } \"]},\"1369\":{\"h\":\"Ⅱ. override 重写\"},\"1370\":{\"h\":\"1. 定义\",\"t\":[\"在子类中可以根据需要对从父类中继承来的方法进行改造，也称为方法的重置、覆盖。\",\"在程序执行时，子类的方法将覆盖父类的方法。约定俗称：子类中的叫重写的方法，父类中的叫被重写的方法。也就是说，子类可以创建一个跟父类相同的方法，并根据子类的需求创建不同的方法体。\",\"相同指的是：子类重写的方法的方法名和形参列表与父类被重写的方法的方法名和形参列表相同。\"]},\"1371\":{\"h\":\"2. 重写的要求\"},\"1372\":{\"h\":\"2.1 访问修饰符\",\"t\":[\"子类重写的方法的权限修饰符不小于父类被重写的方法的权限修饰符。\",\"特殊情况：子类不能重写父类中声明为private权限的方法\"]},\"1373\":{\"h\":\"2.2 返回值\",\"t\":[\"void：父类被重写的方法的返回值类型是void，则子类重写的方法的返回值类型只能是void。\",\"引用类型：父类被重写的方法的返回值类型是A类型，则子类重写的方法的返回值类型可以是A类或A类的子类\",\"基本数据类型：父类被重写的方法的返回值类型是基本数据类型(比如：double)，则子类重写的方法的返回值类型必须是相同的基本数据类型(必须也是double)\"]},\"1374\":{\"h\":\"2.3 异常\",\"t\":[\"子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型。详见异常。\"]},\"1375\":{\"h\":\"2.4 静态方法的处理\",\"t\":[\"子类和父类中的同名同参数的方法要么都声明为非static的（考虑重写），要么都声明为static的（不报错，但不叫重写）。\",\"因为static方法是属于类的，子类无法覆盖父类的方法。\"]},\"1376\":{\"h\":\"3. 可变参数的重写\",\"t\":[\"拥有可变参数，依然可以进行重写。\",\"PS：以下示例涉及到多态：\",\"class Father{ public void add(int a, int ...arr){ System.out.println(\\\"add-father\\\") } } class Son extends Father{ public void add(int a, int[] arr){ System.out.println(\\\"add-son\\\") } public void add(int a,int b,int c){ System.out.println(\\\"add-son2\\\"); } } Son s1 = new Son(); s1.add(1,2,3)//add-son2 Fatehr s2 = new Son();//多态 s2.add(1,2,3);//add-son1 \",\"有可变参数的子类add方法重写了有可变参数的父类add；\",\"我们执行s1.add(1,2,3)时，优先寻找的是参数为3（优先找固定参数的）的方法；\",\"因此s1调用时，输出add-son2；\",\"s2是产生了多态，父类的引用指向子类的方法，因此s2调用add时会调用子类中重写的add方法。\"]},\"1377\":{\"h\":\"4. 关于父类中的属性\",\"t\":[\"子类可以重写父类中的方法，但是不能重写父类中的属性。\",\"当子类创建了和父类中相同的属性时，仅仅是在子类中新增了一个同类的属性，并没有重新。 访问时，默认访问的是子类的同名属性，要想访问父类中的同名属性就要使用Super关键字了。\"]},\"1378\":{\"h\":\"Ⅲ. Super\"},\"1379\":{\"h\":\"1. Super的作用\",\"t\":[\"在Java类中使用super来调用父类中的指定成员：\",\"super可用于访问父类中定义的属性\",\"super可用于调用父类中定义的成员方法\",\"super可用于在子类构造器中调用父类的构造器\"]},\"1380\":{\"h\":\"2. super：调用父类属性和方法\",\"t\":[\"我们可以在子类的方法或构造器中。通过使用 super.属性 或 super.方法 的方式，显式的调用父类中声明的属性或方法。但是，通常情况下，我们习惯省略 super.。除非遇到特殊情况（父子类之间出现了同名的方法或属性）。\",\"super.id; public void say(){ super.say(); System.out.println(\\\"son:say\\\"); } \"]},\"1381\":{\"h\":\"2.1 子类调用父类同名属性\",\"t\":[\"当子类和父类中定义了同名的属性时，我们要想在子类中调用父类中声明的属性，则必须显式的使用super.属性 s的方式，表明调用的是父类中声明的属性。\",\"//例如：子类和父类都声明了num这个属性,在父类中需要同时访问这两个属性 class Son extends Father{ int num = 20;//父类也有这个属性,值为10 public void getNum(){ System.out.println(this.num);//20.这个是子类中的num,this可以省略 System.out.println(super.num);//10.这个是父类中的num，super必须不能省略 } } \"]},\"1382\":{\"h\":\"2.2 子类调用父类同名方法\",\"t\":[\"当子类重写了父类中的方法以后，我们想在子类的方法中调用父类中被重写的方法时，则必须显式的使用\\\"super.方法\\\"的方式，表明调用的是父类中被重写的方法。\",\"class Son extends Father{ public void say(String world){ //假如父类也有这个方法 super.say(world); //调用父类中的say System.out.println(\\\"Son's\\\"+world); } } \"]},\"1383\":{\"h\":\"2.3 属性和方法查找的过程分析\",\"t\":[\"当我们在一个类中调用属性或方法时：\",\"①先从本类中查找是否有该属性或方法，找到了就使用，并不会去父类中查找\",\"②当本类中没有找到时，就自动去父类中寻找，相当于自动加了个super.\",\"③当父类和子类中拥有相同的属性或方法时，这里执行①就停止了，因此想使用父类的元素，就要手动的加上super（当然，子类和父类可以同时使用，同时使用时，super必加，this随意）。\"]},\"1384\":{\"h\":\"3. super调用构造器\",\"t\":[\"我们可以在子类的构造器中显式的使用\\\"super(形参列表)\\\"的方式，调用父类中声明的指定的构造器（虽然调用了父类的构造器，但是内存中还是只创建了子类的一个对象）。\",\"无论通过哪个构造器创建子类对象，需要保证先初始化父类；目的是当子类继承父类后，继承父类中所有的属性和方法，因此子类必须知道父类如何为对象进行初始化。\",\"class Son extends Fathe{ String name; public Son(String name,String fa){ super.Father(fa); this.name = name; } } \"]},\"1385\":{\"h\":\"3.1 声明位置\",\"t\":[\"\\\"super(形参列表)\\\"的使用，必须声明在子类构造器的首行！\"]},\"1386\":{\"h\":\"3.2 默认的super\",\"t\":[\"在构造器的首行，没有显式的声明\\\"this(形参列表)\\\"或\\\"super(形参列表)\\\"，则默认调用的是父类中空参的构造器：super()\"]},\"1387\":{\"h\":\"3.3 super和this：对构造器的调用\",\"t\":[\"this.构造器是调用本类的其他构造器，this.super是调用父类的构造器\",\"\\\"this(形参列表)\\\"或\\\"super(形参列表)\\\"只能二选一，不能同时出现\",\"在类的多个构造器中，至少有一个类的构造器中使用了\\\"super(形参列表)\\\"，调用父类中的构造器\"]},\"1388\":{\"h\":\"3.4 父类没有空构造器的情况\",\"t\":[\"如果子类构造器中既未显式调用父类或本类的构造器，且父类中又没有无参的构造器，则编译报错\",\"解析：子类是一定会调用父类的构造器的，我们不手动调用，他也会自动隐式调用了一个空参的父类构造器。当我们在父类中定义了非空参构造器时，父类中的空参构造器就会被删除。这时候如果子类没有使用super显式的调用父类中的非空参构造器，就会报错。\",\"方案：在类中写非空参构造器时，手动写一个空参空方法体的构造器，防止被继承后子类报错。\"]},\"1389\":{\"h\":\"4. super与this的区别\",\"t\":[\"2-6-1\"]},\"1390\":{\"h\":\"Ⅳ. 子类实例化过程\"},\"1391\":{\"h\":\"1. 从结果上看\",\"t\":[\"子类继承父类以后，就获取了父类中声明的属性和方法。\",\"创建子类的对象，在堆空间中，就会加载所有父类中声明的属性。\"]},\"1392\":{\"h\":\"2. 从过程上看\",\"t\":[\"当我们通过子类的构造器创建子类对象时，我们一定会直接或间接的调用其父类的构造器，进而调用父类的父类的构造器，...直到调用了java.lang.Object类中空参的构造器为止。正因为加载过所有的父类的结构，所以才可以看到内存中有父类中的结构，子类对象才可以考虑进行调用。\",\"注意：虽然创建子类对象时，调用了父类的构造器，但是自始至终就创建过一个对象，即为new的子类对象。\"]},\"1393\":{\"h\":\"2-7. 多态\"},\"1394\":{\"h\":\"Ⅰ. 多态\"},\"1395\":{\"h\":\"1. 对象的多态性\",\"t\":[\"父类的引用指向子类的对象（或子类的对象赋给父类的引用）\",\"父类 标识符 = new 子类(); Father f1 = new Son(); \",\"Java引用变量有两个类型： 编译时类型和运行时类型。编译时类型由声明该变量时使用的类型决定，运行时类型由实际赋给该变量的对象决定。\",\"简称：编译看左边；运行看右边。\",\"看左边：看的是父类的引用（父类中不具备子类特有的方法）\",\"看右边 ： 看的是子类的对象（实际运行的是子类重写父类的方法）\",\"而这种：编译时类型和运行时类型不一致 ， 就是对象的多态性\"]},\"1396\":{\"h\":\"2. 多态的使用\"},\"1397\":{\"h\":\"2.1 规定\",\"t\":[\"有了对象的多态性以后，我们在编译期，只能调用父类中声明的方法，但在运行期，我们实际执行的是子类重写父类的方法。\",\"因此使用多态，是以父类的类型，使用子类中重写的父类方法。 即对象的类型是父类；使用的方法是子类的，该方法必须是重写了父类方法。\"]},\"1398\":{\"h\":\"2.2 规定解析\",\"t\":[\"由规定可知，对象在编译期间，判断的是左边（父类）的数据类型（用于传参），运行时执行的是右边（子类）的方法。\",\"这样我们就可以向一个函数传递参数时，表面传递的是父类的数据类型，而实际使用的是子类。\"]},\"1399\":{\"h\":\"2.3 使用限制\",\"t\":[\"一个引用类型变量如果声明为父类的类型，但实际引用的是子类对象，那么该变量就不能再访问子类中添加的属性和方法。\",\"对象的多态性，只适用于方法，不适用于属性，属性只用左边的（父类）\"]},\"1400\":{\"h\":\"3. 多态的意义\",\"t\":[\"Java是强类型语言，当一个方法需要传递的参数类型是一个类时，那么参数就必须传递该类生成的对象。那么如果该方法适用很多类，就需要创建很多个除了数据类型（类）外其他完全一样的方法了，这样造成了很大的冗余。\",\"在实际开发中，经常会遇到这样的情景，N个子类适用于同一个方法，需要为每个子类创建一个方法，太冗余了。因此我们就需要多态了。\"]},\"1401\":{\"h\":\"4. 多态示例\",\"t\":[\"需求：数据库连接\",\"我们需要在User类中调用getUser方法获取数据，获取数据需要数据库链接，这时需要将数据库对象传入getUsers方法然后用数据库对象连接数据库进行操作。\",\"数据库对象不止一种（MySQL、Oracle等），我们不能为每一种数据库都定义一套方法，因此我们这里就要用到多态性。\",\"定义：所有数据库连接对象的父类都是 java.sql.Connection;（也可以是接口）。\",\"public class User{ public static void main(String[] args){ User user = new User(); //传入我们想用的数据库对象，这里是MySQL user.getUser(new MysqlConnect()); } public void getUser(Connection conn){ conn.getConnect();//连接数据库 conn...//其他操作 } } \"]},\"1402\":{\"h\":\"5. 虚拟方法的调用\"},\"1403\":{\"h\":\"5.1 正常的方法调用\",\"t\":[\"Person e = new Person(); e.getInfo(); Student e = new Student(); e.getInfo(); \"]},\"1404\":{\"h\":\"5.2 虚拟方法调用（多态情况下）\",\"t\":[\"子类中定义了与父类同名同参数的方法，在多态情况下，将此时父类的方法称为虚拟方法，父类根据赋给它的不同子类对象，动态调用属于子类的该方法。这样的方法调用在编译期是无法确定的。\",\"Person e = new Student(); e.getInfo(); // 调用Student 类的getInfo() \"]},\"1405\":{\"h\":\"5.3 编译时类型与运行时类型\",\"t\":[\"编译时e为Person 类型，而方法的调用是在运行时确定的，所以调用的是Student类的 的getInfo() 方法。\"]},\"1406\":{\"h\":\"5.4 虚拟方法调用举例\",\"t\":[\"定义：Person类中定义了welcome()方法，各个子类重写了welcome()。\",\"执行：多态的情况下，调用对象的welcome()方法，实际执行的是子类重写的方法。\",\"2-7-1\"]},\"1407\":{\"h\":\"6. 早绑定与晚绑定\",\"t\":[\"通过分析重载和重写在编译和运行是状态来判断早绑定与晚绑定\",\"早绑定（静态绑定）：重载，是指允许存在多个同名方法，而这些方法的参数不同，编译器根据方法不同的参数表，对同名方法的名称做修饰。对于编译器而言，这些同名方法就成了不同的方法，它们的调用地址在编译期就绑定了。Java的重载是可以包括父类和子类的，即子类可以重载父类的同名不同参数的方法。所以：对于重载而言，在方法调用之前，编译器就已经确定了所要调用的方法，这称为“早绑定”或“静态绑定”；\",\"晚绑定（动态绑定）：而对于多态，只有等到方法调用的那一刻，解释运行器才会确定所要调用的具体方法，这称为“晚绑定”或“动态绑定”。如果它不是晚绑定，它就不是多态。\"]},\"1408\":{\"h\":\"7. 赋值形式的多态\",\"t\":[\"将子类对象赋值给父类数据类型的标识符，也属于父类的引用指向子类的对象。\",\"同时父类和子类的标识符执指向同一地址\",\"Son s = new Son(); //相当于：Father f = new Son(); f = s; Father f = s; f.age;//调用的是父类中的属性。 f.say();//调用的是子类中的say方法 \",\"示例：\",\"public class Test{ public static void main(String[] args){ Son s = new Son(); Father f = s; //Father f = new Son() && f = s System.out.println(f == s);//true System.out.println(f.count);//50,访问的是父类的属性 f.say();//20;调用的是子类的方法，多态的特性 } } class Father{ int age = 50; public void say(){ System.out.println(age); } } class Son extends Father{ int age = 20; public void say(){ System.out.println(age); } } \"]},\"1409\":{\"h\":\"8. 多态开发中的应用\",\"t\":[\"多态提高了代码的通用性，常用作接口重用。\",\"没有多态，接口就没有意义了（只能规范，不能实例化没用）。 同时也提高了代码的健硕性，直接使用父类中定义的方法，子类实现可以随意更换。\"]},\"1410\":{\"h\":\"Ⅱ. 转型\",\"t\":[\"有了对象的多态性以后，内存中实际上是加载了子类特有的属性和方法的，但是由于变量声明为父类类型，导致编译时，只能调用父类中声明的属性和方法。子类特有的属性和方法不能调用。如何才能调用子类特有的属性和方法？\",\"答案是向下转型：使用强制类型转换符。\"]},\"1411\":{\"h\":\"1. 向下转型说明\",\"t\":[\"向上转型：子类转父类，自动转，称为多态\",\"向下转型：父类转子类，强制转，称为向下转型\",\"Father f1 = New Son(); Son s1 = (Son)f1;//f1是父类型对象，向下转型成子类型 s1.sonDO();//可以调用son类中独有的方法了 s1.Teacher = \\\"jinno\\\";//可以调用son类中的属性了 \"]},\"1412\":{\"h\":\"2. 转型的条件\"},\"1413\":{\"h\":\"2.1 向上转型：子转父\",\"t\":[\"随便转，没有限制，可以自动进行\",\"Son s1 = new Son(); System.out.println(s1.age); //Son的age Father f2 = (Father)s1; System.out.println(f2.age);//father的age \"]},\"1414\":{\"h\":\"2.2 向下转型：父类转子类\",\"t\":[\"父类的引用必须指向子类的对象（这样编译时才能加载子类），不然无法转\",\"Father f1 = new Son(); Son s1 = (Son)f1;//这样才能转 \"]},\"1415\":{\"h\":\"3. 向下转型的异常\",\"t\":[\"使用强转时，可能出现ClassCastException的异常，如下：\",\"Father f1 = New Son(); Son s1 = (Son)f1; //可以强转 Daughter = (Daughter)f1;//强转失败，F1是由Son生产的而不是Daughter，不能强转 \",\"为了避免出错，我们在向下转型之前，先进行instanceof的判断，一旦返回true，就进行向下转型。如果返回false，不进行向下转型。\"]},\"1416\":{\"h\":\"4. instancof的\",\"t\":[\"对象 instanceof 类名: 这个是用来测试一个对象的类名的\",\"if(f1 instanceof Son){ Son s1 = (Son)f1; s1.sonDo(); } if(f1 instanceof Daughter){ Daughter d1 = (Daughter)f1; d1.daughterDo(); } \",\"补充：如果 a instanceof A返回true,则 a instanceof B也返回true 其中类B是类A的父类。\"]},\"1417\":{\"h\":\"5. 转型的注意事项\"},\"1418\":{\"h\":\"5.1 向下转型必须是父类引用子类的对象\",\"t\":[\"Person p4 = new Person(); Man m4 = (Man)p4; //不能转，p4里面没有加载子类的元素 \"]},\"1419\":{\"h\":\"5.2 隔代转型\",\"t\":[\"Object->Person->Woman；\",\"Object引用的Woman子类，Object可以强转成Woman，更何况强转成Person。\",\"Object obj = new Woman(); Person p = (Person)obj; //可以转 \"]},\"1420\":{\"h\":\"5.3 转型必须有父子关系\",\"t\":[\"无继承关系的引用类型间的转换是非法的\",\"String str = new Date(); Object o = new Date(); String str1 = (String)o; //编译时是不报错的，但是运行还是会出错 \"]},\"1421\":{\"h\":\"2-8. 特殊类\"},\"1422\":{\"h\":\"Ⅰ. Object类\"},\"1423\":{\"h\":\"1. 说明\",\"t\":[\"Object类是所有Java类的根父类；如果在类的声明中未使用extends关键字指明其父类，则默认父类为java.lang.Object类；Object类中的功能(属性、方法)具有通用性。\",\"Object的主要结构如下：\",\"2-8-1\"]},\"1424\":{\"h\":\"2. Object类的功能\",\"t\":[\"Object类无属性且构造器是空参构造器\",\"主要功能（方法）如下：\",\"clone：克隆 对象\",\"equals：判断两个对象是否想等\",\"finalize：垃圾回收方法（不要手动调用，由垃圾回收机制自动调用）\",\"getClass：获取当前对象的所属类\",\"hashCode：获取当前对象的哈希值（详见集合）\",\"toString：打印对象\",\"wait：详见多线程\",\"notify：详见多线程\",\"notifyAll：详见多线程\"]},\"1425\":{\"h\":\"3. equals与 ==\"},\"1426\":{\"h\":\"3.1 ==的用法\",\"t\":[\"关系操作符 == 生成的是一个boolean结果，它们计算的是操作数的值之间的关系\",\"可以使用在基本数据类型变量和引用数据类型变量中；\",\"如果比较的是基本数据类型变量：比较两个变量保存的数据是否相等（不一定类型要相同,运算时会- 自动类型提升）。\",\"如果比较的是引用数据类型变量：比较两个对象的地址值是否相同.即两个引用是否指向同一个对象实体。\",\"boolean类型不与其他类型参与比较\",\"用“==”进行比较时，符号两边的 数据类型必须兼容(可自动转换的基本数据类型除外)，否则编译出错\",\"注意：java中没有 ===（全等于）符号。\",\"//基本数据类型 int j = 10; double d = 10.0; System.out.println(i == d);//true,只比较值，不比较数据类型 char c = 10; System.out.println(i == c);//true,char类型就是以数值方式储存的 char c1 = 'A'; char c2 = 65; System.out.println(c1 == c2);//true,同上 //引用类型 Customer cust1 = new Customer(\\\"Tom\\\",21); Customer cust2 = new Customer(\\\"Tom\\\",21); System.out.println(cust1 == cust2);//false;地址不同 String str1 = new String(\\\"atguigu\\\"); String str2 = new String(\\\"atguigu\\\"); System.out.println(str1 == str2);//false;同上，地址不同 \"]},\"1427\":{\"h\":\"3.2 equals的用法\",\"t\":[\"Customer cust1 = new Customer(\\\"Tom\\\",21); Customer cust2 = new Customer(\\\"Tom\\\",21); System.out.println(cust1 == cust2);//false String str1 = new String(\\\"atguigu\\\"); String str2 = new String(\\\"atguigu\\\"); System.out.println(str1.equals(str2));//true \",\"equals是一个方法，而非运算符，因此只能适用于引用数据类型\",\"Object类中（源码）定义的equals()和==的作用是相同的：比较两个对象的地址值是否相同.即两个引用是否指向同一个对象实体。\",\"像String、Date、File、包装类等都重写了Object类中的equals()方法。重写后，比较的不是两个引用的地址是否相同，而是比较两个对象的\\\"实体内容\\\"是否相同。\"]},\"1428\":{\"h\":\"3.3 自定义类重写equals\",\"t\":[\"通常情况下，我们自定义的类如果使用equals()的话，也通常是比较两个对象的\\\"实体内容\\\"是否相同。那么，我们就需要对Object类中的equals()进行重写.\",\"重写的原则：比较两个对象的实体内容是否相同，IDE 可以自动生成equals重写（比较两个对象实体是否相同）\",\"对称性：如果x.equals(y)返回是“true”，那么y.equals(x)也应该返回是“true”。\",\"自反性：x.equals(x)必须返回是“true”。\",\"传递性：如果x.equals(y)返回是“true”，而且y.equals(z)返回是“true”，那么z.equals(x)也应该返回是“true”。\",\"一致性：如果x.equals(y)返回是“true”，只要x和y内容一直不变，不管你重复x.equals(y)多少次，返回都是“true”。\",\"任何情况下，x.equals(null)，永远返回是“false”；x.equals(和x不同类型的对象)永远返回是“false”。\",\"public boolean equals(Object obj){ if(this == obj){ //如果要比较的两个对象是引用关系，直接返回true return true; } if(obj == null){ return false;//obj是null，直接返回false } if(this.getClass() != obj.getClass()){ return false;//类不同，直接返回false； } //运行到这里，obj和Person是同属一个类的对象 Person other = (Person)obj; //将obj的Object类型向下转型为Person以便对比属性 if(this.age != other.age){ return false;//判断两个对象的属性是否相同 } if(this.name == null){ if(other.name != null){ return false;//如果两个对象一个name属性有初始值，一个没有，返回false } }else if (!name.equals(other.name)){ return false; //如果this对象不是null，则调用String重新的equals判断两个name是否相等 } return true; } \"]},\"1429\":{\"h\":\"3.4 ==和equals()的区别\",\"t\":[\"== 既可以比较基本类型也可以比较引用类型。对于基本类型就是比较值，对于引用类型就是比较内存地址\",\"equals 的话，它是属于java.lang.Object 类里面的方法，如果该方法没有被重写过默认也是 是==; 我们可以到 看到String类 等类的 的equals 方法是被重写过的，而且String 类在日常开发中 用的比较多，久而久之，形成了equals 是比较值的错误观点。\",\"equals的具体使用要看自定义类里有没有 重写Object 的equals 方法来 判断，通常情况下，重写equals 方法，会比较类中的相应属性是否都相等。\"]},\"1430\":{\"h\":\"3.5 特殊情况\",\"t\":[\"对于Integer类来说，-128127经常使用，所以系统进行了缓存。因此当值的范围在-128127时，相同值的Integer类指向的是同一个内存地址（除非直接new Integer（））。\",\"Integer a = 200; Integer b = 200; a == b; //false a.equals(b); //true Integer a = 100; Integer b = 100; a == b; //true \"]},\"1431\":{\"h\":\"4. toString\",\"t\":[\"当我们输出一个对象的引用时，实际上就是调用当前对象的toString()\"]},\"1432\":{\"h\":\"4.1 toString的源码\",\"t\":[\"toString在Object中输出的是带对象类型的地址。\",\"public String toString() { //test.Test@15db9742 return getClass().getName() + \\\"@\\\" + Integer.toHexString(hashCode()); } \"]},\"1433\":{\"h\":\"4.2 特殊对象对toString的重写\",\"t\":[\"像String、Date、File、包装类等都重写了Object类中的toString()方法。使得在调用对象的toString()时，返回\\\"实体内容\\\"信息\",\"String str = new String(\\\"MM\\\"); System.out.println(str);//MM Date date = new Date(4534534534543L); System.out.println(date.toString());//Mon Sep 11 08:55:34 GMT+08:00 2113 \"]},\"1434\":{\"h\":\"4.3 自定义重写toString\",\"t\":[\"如果我们也想输出对象的实体内容（如包含哪些属性）就需要在类中对toString进行自定义重写； IDE有一键重写功能（输出的就是类名和类的属性）\",\"public String toString() { return \\\" Person[name=\\\" + name + \\\", age=\\\" + age + \\\"]\\\"; } \"]},\"1435\":{\"h\":\"4.4 String.toString\",\"t\":[\"在行进行String与其它类型数据的连接操作时 ，自动调用toString() 基本类型数据转换为String 类型时，的 调用了对应包装类的toString()\"]},\"1436\":{\"h\":\"Ⅱ. 包装类\"},\"1437\":{\"h\":\"1. 说明\",\"t\":[\"包装类就是将基本数据类型的值包装成引用数据类型（对象）\",\"针对八种基本数据类型定义相应的引用类型—包装类（封装类）有了类的特点，就可以调用类中的方法，Java才是真正的面向对象\"]},\"1438\":{\"h\":\"2. 基本数据和对应的包装类\",\"t\":[\"2-8-2\"]},\"1439\":{\"h\":\"3. 包装类的转换概述\",\"t\":[\"基本数据类型、包装类与String类的互相转换示意图：\",\"2-8-3\"]},\"1440\":{\"h\":\"4. 基本数据类型转换为包装类\",\"t\":[\"装箱：通过包装类的构造器实现。\",\"语法：包装类 标识符 = new 包装类的构造器(基本数据类型的值或标识符);\",\"//int示例 int num1 = 10; Integer in1 = new Integer(num1); System.out.println(in1.toString());//现在是类了可以调用toString了 Integer in2 = new Integer(\\\"123\\\");//纯数值的字符串也可以作为参数 Integer in1 = new Integer(23);//基本数据类型的值当然也可以 //Boolean示例 Boolean b1 = new Boolean(true);//使用基本数据类型的值 Boolean b2 = new Boolean(\\\"TrUe\\\");// true Boolean b3 = new Boolean(\\\"true123\\\");//false \"]},\"1441\":{\"h\":\"4.1 boolean转换的特殊性说明\",\"t\":[\"Boolean构造器的值，如果是字符串，那么经过大小写的转换只要是true，就会转换为true，否则一律转为false\",\"Boolean类的默认值是null，而不是false（现在已经是类了）。\"]},\"1442\":{\"h\":\"5. 包装类转换为基本数据类型\",\"t\":[\"拆箱：获得 包装类对象中包装的基本类型变量\",\"语法：调用包装类Xxx的xxxValue()即可\",\"Integer in1 = new Integer(12); int i1 = in1.intValue(); //变成了 int 12 System.out.println(i1 + 1); //13;转换后可以进行运算了 Float f1 = new Float(12.3); float f2 = f1.floatValue(); System.out.println(f2 + 1); \"]},\"1443\":{\"h\":\"6. 自动装箱与自动拆箱\",\"t\":[\"自动装箱：基本数据类型可以自动转为对应的包装类类型，而不用使用构造器\",\"自动拆箱：包装类自动转为基本数据类型，而不用调用包装类Xxx的xxxValue()\",\"注意：类型必须匹配\",\"int num2 = 10; Integer in1 = num2;//自动装箱 int num3 = in1;//自动拆箱 \",\"传参：当一个方法的参数是Object数据类型时，基本数据类型不用转换，直接传进去就行，因为会触发自动装箱。\"]},\"1444\":{\"h\":\"7. 基本数据类型和包装类与String类型的转换\"},\"1445\":{\"h\":\"7.1 基本数据类型、包装类--->String类型\",\"t\":[\"方式1：连接运算，任何基本数据类型+String类型都会转为String类型\",\"方式2：调用String重载的valueOf(Xxx xxx)\",\"int num1 = 10; //方式1：连接运算 String str1 = num1 + \\\"\\\"; //方式2：调用String的valueOf(Xxx xxx) float f1 = 12.3f; String str2 = String.valueOf(f1);//\\\"12.3\\\" Double d1 = new Double(12.4); String str3 = String.valueOf(d1); //\\\"12.4\\\" \"]},\"1446\":{\"h\":\"7.2 String类型转基本数据类型、包装类\",\"t\":[\"不能强转，需要调用包装类的parseXxx(String s)\",\"String str1 = \\\"123\\\"; int num2 = Integer.parseInt(str1);//int 123// String str2 = \\\"true111\\\"; boolean b1 = Boolean.parseBoolean(str2); //boolean false \"]},\"1447\":{\"h\":\"8. 注意事项\",\"t\":[\"进行互相转换时，要保证输入的类型是正确的。\",\"比如：不能把123ab或\\\"123ab\\\"当做数值类型.\"]},\"1448\":{\"h\":\"Ⅲ. 内部类\"},\"1449\":{\"h\":\"1. 定义\",\"t\":[\"Inner class：内部类。\",\"Java中允许将一个类A声明在另一个类B中，则类A就是内部类，类B称为外部类。一般用在定义它的类或语句块之内，在外部引用它时必须给出完整的名称。Inner class的名字不能与包含它的外部类类名相同；\"]},\"1450\":{\"h\":\"2. 内部类的作用\",\"t\":[\"当一个事物的内部，还有一个部分需要一个完整的结构进行描述，而这个内部的完整的结构又只为外部事物提供服务，那么整个内部的完整结构最好使用内部类。\"]},\"1451\":{\"h\":\"3. 分类\",\"t\":[\"class Person{ class Dog{ //成员内部类 } static class Shit{ //静态成员内部类 } public Person(){ class AA{} //局部内部类 } { class Cat{} //局部内部类 } public Person(){ class CC{} //局部内部类 } } \",\"成员内部类：定义在类里面和类的成员并列的 \",\"静态成员内部类\",\"非静态成员内部类\",\"局部内部类：定义在方法内、代码块内、构造器内的类\"]},\"1452\":{\"h\":\"4. 成员内部类的特点\"},\"1453\":{\"h\":\"4.1 作为外部类的成员\",\"t\":[\"可以调用外部类的结构\",\"可以被static修饰，但此时就不能再使用外层类的非static的成员变量；\",\"可以被4种不同的权限修饰（外部类不能由private和protected修饰）。\"]},\"1454\":{\"h\":\"4.2 作为一个类\",\"t\":[\"类内可以定义属性、方法、构造器等\",\"可以被final修饰，表示此类不能被继承。言外之意，不使用final，就可以被继承\",\"可以被abstract修饰，因此可以被其它的内部类继承\"]},\"1455\":{\"h\":\"4.3 注意事项\",\"t\":[\"非static的成员内部类中的成员不能声明为static的，只有在外部类或static的成员内部类中才可声明static成员。\",\"外部类访问成员内部类的成员，需要“内部类.成员”或“内部类对象.成员”的方式\",\"成员内部类可以直接使用外部类的所有成员，包括私有的数据\",\"当想要在外部类的静态成员部分使用内部类时，可以考虑内部类声明为静态的\"]},\"1456\":{\"h\":\"4.4 实例化成员内部类\",\"t\":[\"Person.Dog dog = new Person.Dog(); //静态成员内部类 Person p = new Person(); Person.Bird bird = p.new Bird(); //非静态成员内部类 \"]},\"1457\":{\"h\":\"4.5 成员内部类调用外部结构\",\"t\":[\"不重名的情况下，直接调用即可，重名是要采用以下方法调用。\",\"{ class Bird{ String name = \\\"bird\\\"; public void sing(){ System.out.println(name);//使用方法的形参 System.out.println(this.name);//调用内部类的name System.out.println(Person.this.name);//调用外部类的name } } } \"]},\"1458\":{\"h\":\"5. 局部内部类的使用\",\"t\":[\"直接使用很少见；一般用来返回实现了某个接口的类的对象\",\"class Person{ public Comparable getComparable(){ class MyComparable implements Comparable{ public int compareTo(Object o) { return 0; } } //方式二 return new Comparable(){ public int compareTo(Object o) { return 0; } }; } } \",\"在局部内部类的方法中，如果调用声明局部内部类的外部方法的局部变量的话，要求此局部变量声明为final的。\"]},\"1459\":{\"h\":\"5.1 使用局部内部类\",\"t\":[\"只能在声明它的方法或代码块中使用，而且是先声明后使用。除此之外的任何地方 都不能使用该类\",\"但是它的对象可以通过外部方法的返回值返回使用，返回值类型只能是局部内部类 的父类或父接口类型\"]},\"1460\":{\"h\":\"5.2 局部内部类的特点\",\"t\":[\"内部类仍然是一个独立的类，在编译之后内部类会被编译成独立的.class文件，但是前面冠以外部类的类名和$符号，以及数字编号。\",\"只能在声明它的方法或代码块中使用，而且是先声明后使用。除此之外的任何地方都不能使用该类。\",\"局部内部类可以使用外部类的成员，包括私有的。\",\"局部内部类可以使用外部方法的局部变量，但是必须是final的。由局部内部类和局部变量的声明周期不同所致。\",\"局部内部类和局部变量地位类似，不能使用public,protected,缺省,private\",\"局部内部类不能使用static修饰，因此也不能包含静态成员\"]},\"1461\":{\"h\":\"6. 内部列的作用\",\"t\":[\"当一个事物的内部，还有一个部分需要一个完整的结构进行描述，而这个内部的完整的结构又只为外部事物提供服务，那么整个内部的完整结构最好使用内部类。\"]},\"1462\":{\"h\":\"Ⅳ. 匿名类\",\"t\":[\"匿名类不能定义任何静态成员、方法和类，只能创建匿名类的一个实例。一个匿名类一定是在new的后面，用其隐含实现一个接口或实现一个类。\"]},\"1463\":{\"h\":\"1. 格式\",\"t\":[\"new 父类构造器(实参列表) 或要实现的接口(){ //匿名内部类的类体部分 //如果继承了抽象类或实现了接口，这里要重写抽象方法 } \"]},\"1464\":{\"h\":\"2. 特点\",\"t\":[\"匿名类必须继承父类或实现接口\",\"匿名类只能有一个对象\",\"匿名类对象只能使用多态形式引用\"]},\"1465\":{\"h\":\"3. 示例\"},\"1466\":{\"h\":\"3.1 示例1\",\"t\":[\"public class Test { public static void main(String[] args) { I o1 = new I() { public void fun() { System.out.println(\\\"hello\\\"); } }; o1.fun();//hello } } interface I{ void fun(); } \"]},\"1467\":{\"h\":\"3.2 示例2\",\"t\":[\"interface A{ public abstract void fun1(); } public class Outer{ public static void main(String[] args){ new Outer().callnener(new A(){ public void fun1(){ System.out.println(\\\"implement for fun1\\\"); } }); } public void callneer(A a){ a.fun1(); } } \"]},\"1468\":{\"h\":\"2-9. static\"},\"1469\":{\"h\":\"Ⅰ. static介绍\"},\"1470\":{\"h\":\"1. static关键字的使用\",\"t\":[\"static是静态修饰符，用来修饰属性、方法、代码块和内部类的。\"]},\"1471\":{\"h\":\"2. static的背景\",\"t\":[\"当我们编写一个类时，其实就是在描述其对象的属性和行为，而并没有产生实质上的对象，只有通过new关键字才会产生出对象，这时系统才会分配内存空间给对象，其方法才可以供外部调用。我们有时候希望无论是否产生了对象或无论产生了多少对象的情况下，某些特定的数据在内存空间里只有一份。\"]},\"1472\":{\"h\":\"3. 类属性与类方法\",\"t\":[\"类属性：类属性作为该类各个对象之间共享的变量。 \",\"在设计类时, 分析哪些属性不因对象的不同而改变 ，将这些属性设置为类属性。相应的方法设置为类方法。\",\"类方法：如果方法与调用者无关，则这样的方法通常被声明为类方法，由于不需要创建对象就可以调用类方法 ，从而简化了方法的调用。\"]},\"1473\":{\"h\":\"4. 被static修饰后的成员具备的特点\",\"t\":[\"随着类的加载而加载\",\"优先于对象存在\",\"修饰的成员，被所有对象所共享\",\"访问权限允许时，可不创建对象，直接被类调用\"]},\"1474\":{\"h\":\"Ⅱ. 静态属性\"},\"1475\":{\"h\":\"1. 说明\",\"t\":[\"静态属性，又称为静态变量、类变量。\",\"被static修饰的属性就是静态属性，因此类的属性就分为：静态属性和非静态属性了。\",\"Class Person{ static String nation; } Person p1 = new Person(); Person p2 = new Person(); p1.nation = \\\"China\\\"; System.out.println(p2.nation);//China;p1赋的值，p2也能取到 p2.nation = \\\"Japan\\\"; System.out.println(p1.nation);//Japan;p2改的值，p1也受影响 \",\"静态变量（类变量）：我们创建了类的多个对象，多个对象共享同一个静态变量。当通过某一个对象修改静态变量时，会导致其他对象调用此静态变量时，是修改过了的。\",\"非静态变量（实例变量）：我们创建了类的多个对象，每个对象都独立的拥有一套类中的非静态属性。当修改其中一个对象中的非静态属性时，不会导致其他对象中同样的属性值的修改。\"]},\"1476\":{\"h\":\"2. 静态变量的声明\",\"t\":[\"如下：访问修饰符和static的顺序可以调换。\",\"class ClassName{ static 访问修饰符 属性名;//也可以初始化 } \"]},\"1477\":{\"h\":\"3. 静态变量的加载\",\"t\":[\"静态变量是随着类的加载而加载，静态变量的加载要早于对象的创建。由于类只会加载一次，则静态变量在内存中也只会存在一份：存在方法区的静态域中。因此一个类的不同实例拥有的静态变量是同一个。\"]},\"1478\":{\"h\":\"4. 静态变量的使用\",\"t\":[\"由于静态变量的加载早于对象，因此可以通过\\\"类.静态变量\\\"的方式进行调用。\\\\\",\"Person.country = \\\"USA\\\";//直接使用类名访问静态变量 \"]},\"1479\":{\"h\":\"Ⅲ. 静态方法\"},\"1480\":{\"h\":\"1. 概述\",\"t\":[\"使用static修饰的方法，就是静态方法（与之相对的是非静态方法）。\",\"静态方法也是随着类的加载而加载的。\"]},\"1481\":{\"h\":\"2. 静态方法的声明\",\"t\":[\"public static 返回值类型 方法名(形参列表){ ... } class Person{ static String nation = \\\"China\\\"; public static String getNation(){ return nation;//return Person.nation; } } \"]},\"1482\":{\"h\":\"3. 静态方法的调用\",\"t\":[\"因为加载类时已经有静态方法了，因此可以直接通过类名调用静态方法。\",\"Person.getNation();//直接用类调用静态方法 \"]},\"1483\":{\"h\":\"4. 静态方法与非静态方法的对比\",\"t\":[\"静态方法中只能调用静态的方法和静态属性。\",\"非静态方法中，既可以调用非静态的方法或属性，也可以调用静态的方法或属性\"]},\"1484\":{\"h\":\"5. 注意事项\",\"t\":[\"在静态的方法内，不能使用this关键字（this指向的是对象）、super关键字（super指的是当前对象的父类，也要先有对象）。\",\"关于静态属性和静态方法的使用，可以从生命周期的角度去理解。\"]},\"1485\":{\"h\":\"6. 如何判断是否要声明static\",\"t\":[\"属性 \",\"属性是可以被多个对象所共享的，不会随着对象的不同而不同的\",\"类中的常量也常常声明为static\",\"方法 \",\"操作静态属性的方法，通常设置为static的（静态成员的生命周期同步）。\",\"工具类中的方法，习惯上声明为static的。 比如：Math、Arrays、Collections \",\"方便直接用类调用\"]},\"1486\":{\"h\":\"Ⅳ. 单例模式\",\"t\":[\"提示\",\"详见：设计模式>单例模式\"]},\"1487\":{\"h\":\"1. 单例模式核心\",\"t\":[\"所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例。\",\"由于单例模式只生成一个实例，减少了系统性能开销，当一个对象的产生需要比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后永久驻留内存的方式来解决。\"]},\"1488\":{\"h\":\"2. 实现方式1： 饿汉式\",\"t\":[\"私有化类的构造器：阻止类外随便造对象\",\"内部创建类的对象，并保存为静态属性\",\"提供公共的静态方法，返回累的对象。\",\"class Bank{ //1.私有化类的构造器 private Bank(){} //2.内部创建类的对象 //4.要求此对象也必须声明为静态的 private static Bank instance = new Bank(); //3.提供公共的静态的方法，返回类的对象 public static Bank getInstance(){ return instance; } } Bank bank1 = Bank.getInstance(); Bank bank2 = Bank.getInstance(); System.out.println(bank1 == bank2);//true \"]},\"1489\":{\"h\":\"3. 实现方式2：懒汉式\",\"t\":[\"和饿汉式差不多，这里变成了在方法中调用构造器\",\"class Order{ //1.私有化类的构造器 private Order(){} //2.声明当前类对象，没有初始化 //4.此对象也必须声明为static的 private static Order instance = null; //3.声明public、static的返回当前类对象的方法 public static Order getInstance(){ if(instance == null){ instance = new Order(); } return instance; } } \"]},\"1490\":{\"h\":\"4. 饿汉式和懒汉式的对比\",\"t\":[\"饿汉式 \",\"优点：对象加载时间过长。\",\"缺点：饿汉式是线程安全的\",\"懒汉式 \",\"优点：延迟对象的创建。\",\"缺点：线程不安全（无法应对高并发）；需要进行多线程的修改【详见：多线程】。\"]},\"1491\":{\"h\":\"5. 单例模式的使用场景\",\"t\":[\"网站的计数器，一般也是单例模式实现，否则难以同步。\",\"应用程序的日志应用，一般都使用单例模式实现，这一般是由于共享的日志文件一直处于打开状态，因为只能有一个实例去操作，否则内容不好追加。\",\"数据库连接池的设计一般也是采用单例模式，因为数据库连接是一种数据库资源。\",\"项目中，读取配置文件的类，一般也只有一个对象。没有必要每次使用配置文件数据，都生成一个对象去读取。\",\"Application 也是单例的典型应用\",\"Manager (任务管理器)就是很典型的单例模式\",\"Windows的Recycle Bin (回收站)也是典型的单例应用。在整个系统运行过程中，回收站一直维护着仅有的一个实例。\"]},\"1492\":{\"h\":\"2-a. 抽象类与接口\"},\"1493\":{\"h\":\"Ⅰ. abstract\"},\"1494\":{\"h\":\"1. abstract class：抽象类\",\"t\":[\"用abstract关键字来修饰一个类，这个类叫做抽象类\",\"虽然不能实例化，抽象类中还是存在构造器的，因为抽象类的子类还是要实例化的。开发中，都会提供抽象类的子类，让子类实例化，完成相关的操作。\",\"abstract class Person{...} \"]},\"1495\":{\"h\":\"2. abstract方法：抽象方法\",\"t\":[\"用abstract来修饰一个方法，该方法叫做抽象方法。\",\"抽象方法只有方法的声明，没有方法体,以分号结束；含有抽象方法的类必须被声明为抽象类。\",\"若子类重写了父类中的所有的抽象方法后，此子类方可实例化，也就是说，子类必须重写父类中所有的抽象方法（提供方法体），除非自己也声明成抽象类。\",\"public abstract void Say(); \"]},\"1496\":{\"h\":\"3. abstract的使用注意\",\"t\":[\"抽象类不一定有抽象方法，但是有抽象方法的类一定要声明成抽象类。\",\"abstract不能用来修饰属性、代码块构造器等结构\",\"abstract不能用来修饰私有方法、静态方法、final的方法、final的类\"]},\"1497\":{\"h\":\"4. 创建抽象类的匿名类\",\"t\":[\"普通类是可以创建匿名对象的，而抽象类不能实例化，所以理论上无法创建匿名对象。\",\"但可以通过特殊的方法创建匿名类，达到匿名对象同样的效果\",\"abstract class Person{ //匿名类 public abstract eat(); //匿名方法 } //现在不用子类继承，不实例化子类，来实例化一个匿名类 public class Test(){ public static void main(String[] args){ method(new Person(){ //直接new抽象类 public void eat(){ //需要重写抽象类里的抽象方法。 System.out.println(\\\"eat shit\\\"); } }); } public static void method(Person p){ p.eat();//调用匿名类里的eat方法 } } \"]},\"1498\":{\"h\":\"5. 模板方法设计模式\",\"t\":[\"抽象类可用于模板方法设计模式。\",\"思想：当功能内部一部分实现是确定的，一部分实现是不确定的。这时可以把不确定的部分暴露出去，让子类去实现。\",\"换句话说，在软件开发中实现一个算法时，整体步骤很固定、通用，这些步骤已经在父类中写好了。但是某些部分易变，易变部分可以抽象出来，供不同子类实现。这就是一种模板模式。\"]},\"1499\":{\"h\":\"5.1 示例：计算代码执行时间\",\"t\":[\"解析：创建一个计算代码执行时间的类，我们并不知道要计算的代码具体是什么代码，因此可以将要计算的代码作为抽象方法来定义和使用。\",\"abstract class Template{ // 计算代码执行时间的类 //计算某段代码执行所需要花费的时间的方法 public void spendTime(){ long start = System.currentTimeMillis(); this.code();//不确定的部分、易变的部分 long end = System.currentTimeMillis(); System.out.println(\\\"花费的时间为：\\\" + (end - start)); } public abstract void code(); //不确定部分设计成抽象方法 } \"]},\"1500\":{\"h\":\"5.2 示例：银行业务流程\",\"t\":[\"解析：银行的业务流程是固定的：预约取号->办理业务->评分；我们可以将其作为一个类，但是办理的具体业务是不确定的，因此我们可以将办理的业务作为抽象方法；然后为具体的业务创建子类继承该抽象类，实现具体业务的代码即可。\",\"abstract class BankTemplateMethod { public void takeNumber() { System.out.println(\\\"取号排队\\\");//步骤一： } //这种步骤中不确定，需要具体子类确定的步骤，像个钩子，被称为钩子函数 public abstract void transact(); // 步骤二：不确定 办理具体的业务 public void evaluate() { //步骤三：反抗评分 System.out.println(\\\"反馈评分\\\"); } // 模板方法，把基本操作组合到一起，子类一般不能重写 public final void process() { this.takeNumber(); this.transact();// 像个钩子，具体执行时，挂哪个子类，就执行哪个子类 this.evaluate(); } } class DrawMoney extends BankTemplateMethod { //示例：实现 public void transact() { System.out.println(\\\"我要取款！！！\\\"); } } \"]},\"1501\":{\"h\":\"Ⅱ. interface\"},\"1502\":{\"h\":\"说明\",\"t\":[\"接口和类是并列关系，或者可以理解为一种特殊的类。从本质上讲，接口是一种特殊的抽象类，这种抽象类中只包含常量和方法的定义(JDK7.0及之前)，而没有变量和方法的实现。\",\"在开发中，常看到一个类不是去继承一个已经实现好的类，而是要么继承抽象类，要么实现接口。\"]},\"1503\":{\"h\":\"1. 概述：接口的由来\"},\"1504\":{\"h\":\"1.1 多重继承\",\"t\":[\"有时必须从几个类中派生出一个子类，继承它们所有的属性和方法。但是，Java不支持多重继承。有了接口，就可以得到多重继承的效果。\"]},\"1505\":{\"h\":\"1.2 功能\",\"t\":[\"有时必须从几个类中抽取出一些共同的行为特征，而它们之间又没有is-a的关系，仅仅是具有相同的行为特征而已。例如：鼠标、键盘、打印机、扫描仪、移动硬盘等都支持USB连接。不能定义一个USB父类让他们都去继承，USB是他们的一个功能，而不是他们的一个抽象。因此就需要用到接口了。\",\"2-a-1\"]},\"1506\":{\"h\":\"2. 接口的意义：规范\",\"t\":[\"接口的本质是契约，标准，规范，就像我们的法律一样。制定好后大家都要遵守。\",\"接口就是规范，定义的是一组规则，体现了现实世界中“如果你是/要...则必须能...”的思想。\",\"继承是一个\\\"是不是\\\"的关系，而接口实现则是 \\\"能不能\\\"的关系。\",\"在开发中，常看到一个类不是去继承一个已经实现好的类，而是要么继承抽象类，要么实现接口\"]},\"1507\":{\"h\":\"3. 接口定义\",\"t\":[\"接口采用interface关键字来定义，接口(interface)是抽象方法和常量值定义的集合；接口内部只能定义全局常量和抽象方法\",\"全局常量：public static final \",\"可以省略public static final，默认就是public static final\",\"抽象方法：public abstract。 \",\"可以省略abstract，默认就是abstract\",\"interface Flyable{ public static final int MAX_SPEED = 7900;//全局常量 int MIN_SPEED = 1;//省略了public static final public abstract void fly(); //抽象方法 void stop(); //省略了public abstract } \"]},\"1508\":{\"h\":\"4. 接口的特点\",\"t\":[\"接口中不能定义构造器的！意味着接口不可以实例化\",\"接口与接口之间可以继承，而且可以多继承\",\"接口中的所有成员变量都默认是由public static final修饰的。\",\"接口中的所有抽象方法都默认是由public abstract修饰的。\"]},\"1509\":{\"h\":\"5. 接口的使用细节\",\"t\":[\"定义Java类的语法格式：先写extends，后写implements \",\"class Son extends Father implements Students{...}\",\"一个类可以实现多个接口，接口也可以继承其它接口。\",\"实现接口的类中必须提供接口中所有方法的具体实现内容，方可实例化。否则，仍需定义为抽象类。\",\"接口的主要用途就是被实现类实现。（面向接口编程） \",\"几乎所有的设计模式都是面向接口编程的。\",\"与继承关系类似，接口与实现类之间存在多态性 \",\"很多设计模式都用到了接口这个特性。\"]},\"1510\":{\"h\":\"6. 接口的实现\",\"t\":[\"Java开发中，接口通过让类去实现(implements)的方式来使用；如果实现类实现了接口中的所有抽象方法，则此实现类就可以实例化；否则就只能定义为抽象类。\",\"Java类可以实现多个接口 --->弥补了Java单继承性的局限性\",\"class AA extends BB implements CC,DD,EE{...} \"]},\"1511\":{\"h\":\"7. 接口示例\",\"t\":[\"接口的具体使用，体现多态性。\"]},\"1512\":{\"h\":\"7.1 示例：模拟USB\",\"t\":[\"//定义USB接口 interface USB{ ...//常量：定义了长、宽、最大最小的传输速度等 void start();//连接USB void stop();//断开USB } //实现USB接口 class Flash implements USB{ public void start(){ System.out.println(\\\"U盘开启工作\\\"); } public void stop() { System.out.println(\\\"U盘结束工作\\\"); } } //在电脑上使用USB class Computer{ public void transferData(USB usb){//USB usb = new Flash(); usb.start(); System.out.println(\\\"具体传输数据的细节\\\"); usb.stop(); } } //用法：有4中方式使用flash Computer com = new Computer(); //实例化子类 Flash flash = new Flash(); //实例化子类 com.transferData(flash); //创建了接口的非匿名实现类的匿名对象 com.transferData(new Flash);//匿名对象 //创建了接口的匿名实现类的非匿名对象 USB flash = new USB(){ public void start() { System.out.println(\\\"USB开始工作\\\"); } public void stop() { System.out.println(\\\"USB结束工作\\\"); } } com.transferData(flash); //创建了接口的匿名实现类的匿名对象 com.transferData(new USB(){ public void start() { System.out.println(\\\"USB开始工作\\\"); } public void stop() { System.out.println(\\\"USB结束工作\\\"); } }); \"]},\"1513\":{\"h\":\"7.2 JDBC\",\"t\":[\"JDBC：接口，定义了所有操作数据库的抽象方法。\",\"其他数据库驱动实现接口（一些接口的实现集合）。操作时操作JDBC接口里的方法。\",\"2-a-2\",\"意义：只掌握一套连接数据库的方法，就能操作所有数据库。\"]},\"1514\":{\"h\":\"8. 接口与抽象类的对比\",\"t\":[\"2-a-3\"]},\"1515\":{\"h\":\"Ⅲ. 接口新特性\",\"t\":[\"JDK8中除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法\",\"public interface CompareA { //静态方法 public static void method1(){ System.out.println(\\\"CompareA:北京\\\"); } //默认方法 public default void method2(){ System.out.println(\\\"CompareA：上海\\\"); } default void method3(){ System.out.println(\\\"CompareA：上海\\\"); } } \"]},\"1516\":{\"h\":\"1. 静态方法\",\"t\":[\"使用 static 关键字修饰。只能通过接口直接调用静态方法，并执行其方法体。\",\"CompareA.method1(); \"]},\"1517\":{\"h\":\"2. 默认方法\",\"t\":[\"默认方法使用 default 关键字修饰。可以通过实现类对象来调用。\",\"s.method2(); s.method3(); \",\"重写：如果实现类重写了接口中的默认方法，调用时，仍然调用的是重写以后的方法\",\"类优先：如果子类(或实现类)继承的父类和实现的接口中声明了同名同参数的默认方法，那么子类在没有重写此方法的情况下，默认调用的是父类中的同名同参数的方法。-->类优先原则。\",\"接口冲突：如果实现类实现了多个接口，而这多个接口中定义了同名同参数的默认方法，那么在实现类没有重写此方法的情况下，报错。-->接口冲突。解决：需要我们必须在实现类中重写此方法。\"]},\"1518\":{\"h\":\"3. 在子类中调用父类、接口中被重写的方法\",\"t\":[\" public void myMethod(){ method3();//调用自己定义的重写的方法 super.method3();//调用的是父类中声明的 //调用接口中的默认方法,可以调用多个接口的 CompareA.super.method3(); CompareB.super.method3(); } \"]},\"1519\":{\"h\":\"4. 静态方法和默认方法的意义\"},\"1520\":{\"h\":\"4.1 静态方法：\",\"t\":[\"解释：静态方法，就是接口可以直接掉用的方法，不用实现类也可以\",\"意义：不用实现接口也能调用这些方法，可以把接口当做工具类使用\",\"详细：静态方法在实现类中是看不到，无法调用（但可以重写），静态方法只是用来取代一些工具类的。\"]},\"1521\":{\"h\":\"4.2 默认方法\",\"t\":[\"解释：就是方法的默认实现；即实现接口的类可以直接使用这些方法。\",\"意义：它将允许我们向较旧的接口添加方法。\",\"详细：接口的实现类可以直接使用这些默认的方法，同时还可以重写默认的方法，这不是强制性的重写。默认方法使得开发者可以在不破坏二进制兼容性的前提下，往现存接口中添加新的方法，即不强制那些实现了该接口的类也同时实现这个新加的方法。\"]},\"1522\":{\"h\":\"2-b. 特殊结构\"},\"1523\":{\"h\":\"Ⅰ. 代码块\"},\"1524\":{\"h\":\"1. 作用\",\"t\":[\"用来初始化类、对象；\",\"代码块里面可以像方法体一样，写一些执行的代码。\"]},\"1525\":{\"h\":\"2. 格式\",\"t\":[\"{ //这里写代码 } static{ //静态代码块 //这里写代码 } \"]},\"1526\":{\"h\":\"3. 分类\",\"t\":[\"一个类中代码块若有修饰符，则只能被static修饰，称为 静态代码块(static block)，没有使用static修饰的，为非静态代码块。\",\"class Person{ String name; int age; static String desc = \\\"I'm Gay\\\"; static{//static代码块 System.out.println(\\\"代码块可以输出\\\"); desc = \\\"I'm not Gay\\\";//可以给静态属性赋值 info();//可以调用静态方法 } { //非static代码块 System.out.println(\\\"代码块可以输出\\\"); age = 20;//调用非静态结构：为非静态属性赋值 eat();//掉用非静态方法 desc = \\\"Yes\\\" //调用静态结构 info(); } } \"]},\"1527\":{\"h\":\"3.1 静态代码块\",\"t\":[\"内部可以有输出语句\",\"随着类的加载而执行,而且只执行一次\",\"作用：初始化类的信息\",\"如果一个类中定义了多个静态代码块，则按照声明的先后顺序执行\",\"静态代码块的执行要优先于非静态代码块的执行\",\"静态代码块内只能调用静态的属性、静态的方法，不能调用非静态的结构\"]},\"1528\":{\"h\":\"3.2 非静态代码块\",\"t\":[\"内部可以有输出语句\",\"随着对象的创建而执行\",\"每创建一个对象，就执行一次非静态代码块\",\"作用：可以在创建对象时，对对象的属性等进行初始化\",\"如果一个类中定义了多个非静态代码块，则按照声明的先后顺序执行\",\"非静态代码块内可以调用静态的属性、静态的方法，或非静态的属性、非静态的方法\"]},\"1529\":{\"h\":\"4. 开发中代码块的作用\",\"t\":[\"当在初始化之前要进行一些操作时，可以使用代码块进行：先操作再赋值。\"]},\"1530\":{\"h\":\"Ⅱ. JavaBean\",\"t\":[\"JavaBean是一种Java语言写成的可重用组件（本质是一套Java书写规范）。\",\"所谓javaBean，是指符合如下标准的Java类：\",\"类是公共的\",\"有一个无参的公共的构造器\",\"所有属性(如果有) 都是private，并且提供set/get (如果boolean 则get 可以替换成is)\"]},\"1531\":{\"h\":\"1. 背景\",\"t\":[\"Java语言欠缺属性、事件、多重继承功能。所以，如果要在Java程序中实现一些面向对象编程的常见需求，只能手写大量胶水代码。Java Bean正是编写这套胶水代码的惯用模式或约定。这些约定包括getXxx、setXxx、isXxx、addXxxListener、XxxEvent等。遵守上述约定的类可以用于若干工具或库。\"]},\"1532\":{\"h\":\"2. 意义\",\"t\":[\"用户可以使用JavaBean将功能、处理、值、数据库访问和其他任何可以用Java代码创造的对象进行打包，并且其他的开发者可以通过内部的JSP页面、Servlet、其他JavaBean、applet程序或者应用来使用这些对象。用户可以认为JavaBean提供了一种随时随地的复制和粘贴的功能，而不用关心任何改变。\"]},\"1533\":{\"h\":\"3. JavaBean的种类\",\"t\":[\"第一种：封装数据，这种JavaBean也被叫做实体类，一般来说对应的是数据库中的一张表\",\"第二种：封装逻辑，这种JavaBean用于实现业务逻辑。目的是为了提高代码的复用和解耦\"]},\"1534\":{\"h\":\"4. JavaBean举例\",\"t\":[\"如下：获取用户的年龄\",\"//不使用JavaBean public class Person{ public int age; } //使用JavaBean public class Person{ private int age; public int getAge(){ return age; } } \",\"假如某一天，逻辑修改了，不能获取用户的年龄了，怎么办？\",\"不使用JavaBean就只能隐藏age属性，这样很多其他代码都会受到牵连，比如无法获取属性，报一大堆异常。\",\"而使用JavaBean设计的类，就可以只修改getXxx内的代码逻辑即可。\"]},\"1535\":{\"h\":\"Ⅲ. 概念补充\"},\"1536\":{\"h\":\"1. UML类图\",\"t\":[\"2-b-1\",\"权限控制： + 表示 public 类型， - 表示 private 类型，#表示protected类型\",\"方法的写法：方法的类型(+、-) 方法名(参数名： 参数类型)：返回值类型\"]},\"1537\":{\"h\":\"2. MVC设计模式\",\"t\":[\"MVC是常用的设计模式之一，将整个程序分为三个层次：视图模型层，控制器层，与数据模型层。这种将程序输入输出、数据处理，以及数据的展示分离开来的设计模式使程序结构变的灵活而且清晰，同时也描述了程序各个对象间的通信方式，降低了程序的耦合性。\"]},\"1538\":{\"h\":\"2.1 Model：模型层【操作数据】\",\"t\":[\"数据对象封装 model.bean/domain\",\"数据库操作类 model.dao\",\"数据库 model.db\"]},\"1539\":{\"h\":\"2.2 Controller：控制器层【业务逻辑】\",\"t\":[\"应用界面相关 controller.activity\",\"存放fragment controller.fragment\",\"显示列表的适配器 controller.adapter\",\"服务相关的 controller.service\",\"抽取的基类 controller.base\"]},\"1540\":{\"h\":\"2.3 View：视图层【前端】\",\"t\":[\"相关工具类 view.utils\",\"自定义view view.ui\"]},\"1541\":{\"h\":\"3. main\",\"t\":[\"main()方法作为程序的入口\",\"main()方法也是一个普通的静态方法\",\"main()方法可以作为我们与控制台交互的方式。（之前：使用Scanner） \",\"用法：控制台 java a.class 空格 参数\",\"参数将传递给main方法的 args数组。\",\"main的特点 \",\"由于Java虚拟机需要调用类的main()方法，所以该方法的访问权限必须是public，又因为Java虚拟机在执行main()方法时不必创建对象，所以该方法必须是static的，该方法接收一个String类型的数组参数，该数组中保存执行Java命令时传递给所运行的类的参数。\",\"又因为main() 方法是静态的，我们不能直接访问该类中的非静态成员，必须创建该类的一个实例对象后，才能通过这个对象去访问类中的非静态成员。\"]},\"1542\":{\"h\":\"4. 连续操作\",\"t\":[\"方法是可以连续调用的，方法如果有返回值，返回的是一个对象，那么就可以继续调用该对象的方法\"]},\"1543\":{\"h\":\"5. 四种Java文件\",\"t\":[\"以下四种文件是平级的，且后缀都是.java\",\"Class：标准的Java类\",\"Interface：接口\",\"Enum：枚举\",\"Annotation：注解\"]},\"1544\":{\"h\":\"2-c. 内存解析\",\"t\":[\"提示\",\"仅简单介绍，详见：JVM\"]},\"1545\":{\"h\":\"Ⅰ. 类与对象\"},\"1546\":{\"h\":\"1. 内存区域\",\"t\":[\"2-c-1\",\"堆（Heap）：用于存放对象实例；所有的对象实例以及数组都要在堆上分配内存。\",\"栈（Stack）：是指虚拟机栈。虚拟机栈用于存储局部变量等。 \",\"局部变量表存放了编译期可知长度的各种基本数据类型（boolean、byte、char 、 short 、 int 、 float 、 long 、double）、对象引用（reference类型，它不等同于对象本身，是对象在堆内存的首地址）。 方法执行完，自动释放。\",\"方法区（Method Area）：存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。\",\"其他区域：其他区域跟类和对象无关，不用关注\"]},\"1547\":{\"h\":\"2. 对象的内存解析\",\"t\":[\"2-c-2\"]},\"1548\":{\"h\":\"2.1 Person p1 = new Person\",\"t\":[\"new类创建对象时，在堆内存中，保存了对象的实体；同时在栈内存中，是k=v的形式，用k保存了对象的标识符p1，用v保存了对象实体所在内存空间的首地址。即对象的标识符p1保存了对象的内存地址，p1指向了对象实体；而对象实体中保存了对象的属性。\"]},\"1549\":{\"h\":\"2.2 p1.name = Tome；p1.isMale=true\",\"t\":[\"对象的属性是复制类的，属性的默认值就是类里定义的值；如果没有默认值，就采用数据类型的默认值。当对属性进行修改时，对象实体内属性的值就被修改了。\"]},\"1550\":{\"h\":\"2.3 Person p2 = new Person()\",\"t\":[\"再新建一个对象时，堆内存中又开辟了一块内存空间储存对象的实体。同时栈内存中，用p2保存了新对象的内存地址。\",\"p1和p2是完全独立的，他们指向各自的对象内存地址。两个对象中保存的属性也是互不相干的（各种有自己的内存空间）。\"]},\"1551\":{\"h\":\"2.4 Person p3 = p1；p3.age = 10\",\"t\":[\"通过变量赋值的方式，将p1保存的内存地址赋给了p3，因此现在p1和p3保存的是相同的内存地址，指向同一个对象，通过p1和p3对对象的属性进行修改，会互相影响到对方。\"]},\"1552\":{\"h\":\"3. 注意事项\",\"t\":[\"引用类型的变量，只可能存储两类值：null 或 地址值（含变量的类型）\"]},\"1553\":{\"h\":\"Ⅱ. 变量间赋值\"},\"1554\":{\"h\":\"1. 结论\",\"t\":[\"将一个变量的值赋值给另一个变量时，\",\"如果变量的值是基本数据类型：那么只是将值复制给另一个变量，两个变量各种保存了一份值，互不干扰，当其中一个变量的值改变时不会影响另一个。\",\"如果变量的值是引用数据类型：那么变量保存的其实是值所在内存的内存地址，进行赋值时，是将内存地址传给了对方，两个变量指向同一内存地址，互为引用，互相干扰。\"]},\"1555\":{\"h\":\"2. 基本数据类型\",\"t\":[\"基本数据类型的值，是直接跟变量对应的，没有通过保存指针来用变量指向值。\",\"所以基本数据类型在赋值的时候，是直接将值赋给了对方，两个变量互不干扰。\",\"int a = 10; int b = a; System.out.println(a+b);//10 10 inb b = 20; System.out.println(a+b);//10 20 \"]},\"1556\":{\"h\":\"3. 引用数据类型\",\"t\":[\"引用数据类型的标识符保存的是值的内存地址，因此在向其他变量赋值的时候，是将内存地址传过去了，两个变量指向同一内存地址，互为引用，互相干扰。\",\"String a = 'hello'; String b = a; System.out.println(a+b);//hello hello b = \\\"OK \\\"; System.out.println(a+b);//OK OK \"]},\"1557\":{\"h\":\"3-1. 异常概述\"},\"1558\":{\"h\":\"Ⅰ. 概述\",\"t\":[\"在Java语言中，将程序执行中发生的不正常情况称为“异常”。(开发过程中的语法错误和逻辑错误不是异常)\"]},\"1559\":{\"h\":\"1. 异常分类\",\"t\":[\"Java程序在执行过程中所发生的异常事件可分为两类：Error和Exception\"]},\"1560\":{\"h\":\"2. Error：错误\",\"t\":[\"Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源耗尽等严重情况。比如：StackOverflowError和OOM。一般不编写针对性的代码进行处理。\",\"我们常说的异常处理，不包括这个，这个是我们处理不了的。\",\"public class ErrorTest { public static void main(String[] args) { //1.栈溢出：java.lang.StackOverflowError main(args); //2.堆溢出：java.lang.OutOfMemoryError Integer[] arr = new Integer[1024*1024*1024]; } } \"]},\"1561\":{\"h\":\"3. Exception：异常\",\"t\":[\"其它因编程错误或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理。\",\"如：空指针访问、试图读取不存在的文件、网络连接中断、数组角标越界\",\"我们平时说的异常一般指的就是Exception。\"]},\"1562\":{\"h\":\"4. 异常处理\",\"t\":[\"对于这些错误，一般有两种 解决方法：一是遇到错误就终止程序的运行。另一种方法是由程序员在编写程序时，就考虑到错误的检测、错误消息的提示，以及错误的处理。\",\"使用程序处理异常，又分为两种形式：try-catch和throws.\"]},\"1563\":{\"h\":\"5. 异常处理的意义\",\"t\":[\"异常的处理只是为了保证代码的正常运行，并非真正解决了异常。\",\"例如：点击点击首页时，因为缺少某个资源，发生了乱码，我们进行处理的效果是提示用户发生了资源缺失，而不是让用户看乱码，这就是异常的意义。但是要明确，异常并没有被解决，我们需要将异常写入日志，上报到后台，然后再去真正的解决异常。\",\"也就是：异常处理只是为了跟用户友好的交互，真正解决异常，还是要后台根据收集的异常信息去优化代码。\"]},\"1564\":{\"h\":\"Ⅱ. 异常处理机制\",\"t\":[\"在编写程序时，经常要在可能出现错误的地方加上检测的代码，如进行x/y运算时，要检测分母为0，数据为空，输入的不是数据而是字符等。过多的if-else分支会导致程序的代码加长、臃肿，可读性差。因此采用异常处理机制。\"]},\"1565\":{\"h\":\"1. java的异常处理机制\",\"t\":[\"Java采用的异常处理机制，是将异常处理的程序代码集中在一起，与正常的程序代码分开，使得程序简洁、优雅，并易于维护。\"]},\"1566\":{\"h\":\"2. 异常处理的抓抛模型\",\"t\":[\"抛（throw）：程序在正常执行的过程中，一旦出现异常，就会在异常代码处生成一个对应异常类的对象。并将此对象抛出。 一旦抛出对象以后，其后的代码就不再执行。\",\"抓（catch）：可以理解为异常的处理方式：① try-catch-finally ② throws\"]},\"1567\":{\"h\":\"3. 异常对象的产生\",\"t\":[\"系统自动生成的异常对象：由虚拟机 自动生成：程序运行过程中，虚拟机检测到程序发生了问题，如果在当前代码中没有找到相应的处理程序，就会在后台自动创建一个对应异常类的实例对象并抛出——自动抛出\",\"手动的生成一个异常对象，并抛出（throw）：由开发人员手动创建：Exception exception = new ClassCastException();——创建好的异常对象不抛出对程序没有任何影响，和创建一个普通对象一样。\"]},\"1568\":{\"h\":\"4. 异常处理总结\",\"t\":[\"3-1-1\"]},\"1569\":{\"h\":\"3-2. 常见异常\"},\"1570\":{\"h\":\"Ⅰ. 异常体系结构\"},\"1571\":{\"h\":\"1. 异常分类\",\"t\":[\"捕获错误最理想的是在 编译期间，但有的错误只有在 运行时才会发生。比如：除数为0，数组下标越界等\",\"异常（Exception）分为：编译时异常和运行时异常\",\"java.lang.Throwable |-----java.lang.Error:一般不编写针对性的代码进行处理。 |-----java.lang.Exception:可以进行异常的处理 |------编译时异常(checked) |-----IOException |-----FileNotFoundException |-----ClassNotFoundException |------运行时异常(unchecked,RuntimeException) |-----NullPointerException |-----ArrayIndexOutOfBoundsException |-----ClassCastException |-----NumberFormatException |-----InputMismatchException |-----ArithmeticException \",\"3-2-1\"]},\"1572\":{\"h\":\"2. 编译时异常\",\"t\":[\"是指编译器要求必须处置的异常。即程序在运行时由于外界因素造成的一般性异常。编译器要求Java程序必须捕获或声明所有编译时异常。\",\"对于这类异常，如果程序不处理，可能会带来意想不到的结果。\"]},\"1573\":{\"h\":\"3. 运行时异常\",\"t\":[\"是指编译器不要求强制处置的异常。一般是指编程时的逻辑错误，是程序员应该积极避免其出现的异常。java.lang.RuntimeException类及它的子类都是运行时异常。\",\"对于这类异常，可以不作处理，因为这类异常很普遍，若全处理可能会对程序的可读性和运行效率产生影响。\"]},\"1574\":{\"h\":\"Ⅱ. 常见异常\"},\"1575\":{\"h\":\"1. NullPointerException：空指针（运行异常）\",\"t\":[\"int[] arr = null; System.out.println(arr[3]); String str = \\\"abc\\\"; str = null; System.out.println(str.charAt(0)); \"]},\"1576\":{\"h\":\"2. IndexOutOfBoundsException：角标越界（运行异常）\"},\"1577\":{\"h\":\"3.1 ArrayIndexOutOfBoundsException：数组角标越界\",\"t\":[\"int[] arr = new int[10]; System.out.println(arr[10]); \"]},\"1578\":{\"h\":\"3.2 StringIndexOutOfBoundsException：字符串角标越界\",\"t\":[\"String str = \\\"abc\\\" System.out.println(str.charAt(3)); \"]},\"1579\":{\"h\":\"3. ClassCastException：类型转换异常（运行异常）\",\"t\":[\"Object obj = new Date(); String str = (String)obj; \"]},\"1580\":{\"h\":\"4. NumberFormatException：数值格式异常（运行异常）\",\"t\":[\"String str = \\\"123\\\"; str = \\\"abc\\\"; int num = Integer.parseInt(str); \"]},\"1581\":{\"h\":\"5. InputMismatchException：输入不匹配异常（运行异常）\",\"t\":[\"Scanner scanner = new Scanner(System.in); int score = scanner.nextInt(); System.out.println(score);//需求是输入int，如果输入字符串就会报异常 scanner.close(); \"]},\"1582\":{\"h\":\"6. ArithmeticException：算学计算异常（运行异常）\",\"t\":[\"int a = 10; int b = 0; System.out.println(a / b);//0作为了被除数 \"]},\"1583\":{\"h\":\"7. IOException（编译时异常）\",\"t\":[\"File file = new File(\\\"hello.txt\\\"); FileInputStream fis = new FileInputStream(file); int data = fis.read(); while(data != -1){ System.out.print((char)data); data = fis.read(); } fis.close(); \"]},\"1584\":{\"h\":\"3-3. try-catch\"},\"1585\":{\"h\":\"1. 语法结构\",\"t\":[\"try{ //可能出现异常的代码 }catch(异常类型1 变量名1){ //当产生异常类型1时的处理措施 }catch(异常类型2 变量名2){ //当产生异常类型2时的处理措施 }catch(异常类型3 变量名3){ //当产生异常类型3时的处理措施 } .... finally{ //无论是否发生异常，都无条件执行的语句 } \",\"try：捕获异常的第一步是用try{…}语句块选定捕获异常的范围，将可能出现异常的代码放在try语句块中。\",\"catch：在catch语句块中是对异常对象进行处理的代码。每个try语句块可以伴随一个或多个catch语句，用于处理可能产生的不同类型的异常对象。\"]},\"1586\":{\"h\":\"2. 异常类型的选择\",\"t\":[\"如果明确知道产生的是何种异常，可以用该异常类作为catch的参数；也可 以用其父类作为catch的参数。比 如 ： 可以用ArithmeticException 类作为参数的地方，就可以用 RuntimeException类作为参数，或者用所有异常的父类Exception类作为参数。\",\"但不能是与ArithmeticException类无关的异常，如NullPointerException（catch 中的语句将不会执行）。\"]},\"1587\":{\"h\":\"3. try-catch示例\",\"t\":[\"import java.io.File; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.IOException; public class ExceptionTest{ public void test1(){ String str = \\\"abc\\\"; //非数字字符串 try{ int num = Integer.parseInt(str); //非数字字符串转不了 System.out.println(\\\"shit,这里出问题了\\\"); }catch(NumberFormatException e){ //尝试捕获数值类型异常 System.out.println(\\\"YES,捕获到了数值异常\\\"); System.out.pintln(e.getMessage());//获取异常信息 e.printStackTrace();//打印详细异常：堆栈追踪 }catch(NullPointerException e){ //尝试捕获空指针异常 System.out.println(\\\"YES,捕获到了空指针异常\\\"); }catch(Exception e){ //尝试捕获异常 System.out.println(\\\"这里出现了异常，类型不明\\\"); } System.out.println(num);//无法获取num，num是try里面的局部变量 System.out.println(\\\"后续代码继续执行\\\"); } } \"]},\"1588\":{\"h\":\"4. try-catch使用说明\",\"t\":[\"finally是可选的。\",\"使用try将可能出现异常代码包装起来，在执行过程中，一旦出现异常，就会生成一个对应异常类的对象，根据此对象的类型，去catch中进行匹配\",\"一旦try中的异常对象匹配到某一个catch时，就进入catch中进行异常的处理。一旦处理完成，就跳出当前的try-catch结构（在没有写finally的情况）。继续执行其后的代码（不会再执行其他catch了，只捕获一次）。\"]},\"1589\":{\"h\":\"5. 捕获异常的有关信息\",\"t\":[\"捕获异常后，会获取异常对象，对于异常对象e，可以调用下面两个方法，处理（查看）异常信息。\",\"3-3-1\",\"getMessage：获取异常信息，返回字符串\",\"printStackTrace：打印详细异常：堆栈追踪。获取异常类名和异常信息，以及异常出现在程序中的位置。返回值void。\"]},\"1590\":{\"h\":\"6. finally的使用\",\"t\":[\"finally是可选的；finally中声明的是一定会被执行的代码。即使catch中又出现异常了，try中有return语句，catch中有return语句，代码没有异常等。finally语句为异常处理提供一个统一的出口，使得在控制流转到程序的其它部分以前，能够对程序的状态作统一的管理。\",\"使用场景：像数据库连接、输入输出流、网络编程Socket等资源，JVM是不能自动的回收的，我们需要自己手动的进行资源的释放。此时的资源释放，就需要声明在finally中。即无论如何资源都会被释放。\"]},\"1591\":{\"h\":\"6.1 示例1：finally一定会被执行\",\"t\":[\"若无异常，执行结果为：finally 1\",\"若有异常，执行结果为：finally 2\",\"若finally中有return 3，执行结果为：finally 3 总结：finally中的代码总会执行，且会在return之前执行。\",\"public int method(){ try{ int[] arr = new int[10]; System.out.println(arr[10]);//角标越位异常 return 1; }catch(ArrayIndexOutOfBoundsException e){ e.printStrackTrace(); return 2; }finally{ System.out.println(\\\"finally\\\"); //return 3; } } \"]},\"1592\":{\"h\":\"6.2 示例2：资源的释放\",\"t\":[\" public void test2(){ FileInputStream fis = null; //初始化资源 try { File file = new File(\\\"hello1.txt\\\"); fis = new FileInputStream(file);//读取资源,可能读取失败 int data = fis.read(); //开始读取 while(data != -1){ System.out.print((char)data); data = fis.read(); } } catch (FileNotFoundException e) { //异常：文件打开失败 e.printStackTrace(); } catch (IOException e) { //异常：文件传输失败 e.printStackTrace(); }finally{ try { //finally里吗也可能有异常，所以要嵌套一个try...catch if(fis != null)//先判断资源是否打开 fis.close(); //在finally里面关闭资源 } catch (IOException e) { e.printStackTrace(); } } } \"]},\"1593\":{\"h\":\"7. 异常的嵌套\",\"t\":[\"try-catch-finally结构可以嵌套。\",\"catch和finally里面也可能会有异常。\"]},\"1594\":{\"h\":\"8. 注意事项\",\"t\":[\"catch捕获的顺序：catch中的异常类型如果没有子父类关系，则谁声明在上，谁声明在下无所谓。 catch中的异常类型如果满足子父类关系，则要求子类一定声明在父类的上面。否则，报错\",\"变量的范围：在try结构中声明的变量，在出了try结构以后，就不能再被调用\"]},\"1595\":{\"h\":\"9. 编译时异常和运行时异常的不同处理\",\"t\":[\"编译时异常：进行try...catch处理；将其延后成运行时异常 \",\"使用try-catch-finally处理编译时异常，使得程序在编译时就不再报错，但是运行时仍可能报错。相当于我们使用try-catch-finally将一个编译时可能出现的异常，延迟到运行时出现。针对于编译时异常，一定要考虑异常的处理。\",\"运行时异常：处理没有意义，不用try...catch进行处理。： \",\"开发中，由于运行时异常比较常见，所以我们通常就不针对运行时异常编写try-catch-finally了。\"]},\"1596\":{\"h\":\"3-4. trows\"},\"1597\":{\"h\":\"Ⅰ. throws\",\"t\":[\"如果一个方法(中的语句执行时)可能生成某种异常，但是并不能确定如何处理这种异常，则此方法应显示地声明抛出异常，表明该方法将不对这些异常进行处理，而由该方法的调用者负责处理。\",\"在方法声明中用throws语句可以声明抛出异常的列表，throws后面的异常类型可以是方法中产生的异常类型，也可以是它的父类 。\"]},\"1598\":{\"h\":\"1. throws介绍\",\"t\":[\"throws只是用来抛出异常的，将异常抛到代码的调用处，并不会处理异常，处理异常还是要在代码调用处使用try-catch结构。\",\"\\\"throws + 异常类型\\\"写在方法的声明处。指明此方法执行时，可能会抛出的异常类型。一旦当方法体执行时，出现异常，仍会在异常代码处生成一个异常类的对象，此对象满足throws后异常类型时，就会被抛出。异常代码后续的代码，就不再执行！\"]},\"1599\":{\"h\":\"2. 异常的抛出机制\",\"t\":[\"如果一个方法内抛出异常，该异常对象会被抛给调用者方法中处理。如果异常没有在调用者方法中处理，它继续被抛给这个调用方法的上层方法。这个过程将一直继续下去，直到异常被处理。\",\"如果一个异常回到main()方法，并且main()也不处理，则程序运行终止。\",\"3-4-1\"]},\"1600\":{\"h\":\"3. throws使用示例\",\"t\":[\"public class ExceptionTest2 { public static void main(String[] args){ //这里再抛就到虚拟机了，不能再抛了 try{ //这里开始处理异常 method2(); }catch(IOException e){ e.printStackTrace(); } } //因为IOException包含了FileNotFountException,所以可以合并成一个异常 //如果这两个异常的处理方式不一样，比如返回的错误码不一样，则不要合并。 public static void method2() throws IOException{ method1(); //异常又被抛出去了，所以这里不用处理异常 } //这里将异常抛出到调用处，因此不用进行处理。 public static void method1() throws FileNotFoundException,IOException{ File file = new File(\\\"hello1.txt\\\"); FileInputStream fis = new FileInputStream(file); int data = fis.read(); while(data != -1){ System.out.print((char)data); data = fis.read(); } fis.close(); System.out.println(\\\"hahaha!\\\"); } } \"]},\"1601\":{\"h\":\"4. try-catch-finally与throws的对比\",\"t\":[\"try-catch-finally:真正的将异常给处理掉了。\",\"throws的方式只是将异常抛给了方法的调用者。并没有真正将异常处理掉。\"]},\"1602\":{\"h\":\"5. 方法重写时的异常规则\",\"t\":[\"子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型。\",\"因为我们调用父类方法时要进行异常处理，而此时若使用多态，实际调用的是子类的方法，则必须能处理掉子类的异常，不然会报错。\"]},\"1603\":{\"h\":\"6. 开发中try-catch-finally和throws的选择\",\"t\":[\"如果父类中被重写的方法没有throws方式处理异常，则子类重写的方法也不能使用throws，意味着如果子类重写的方法中有异常，必须使用try-catch-finally方式处理。\",\"执行的方法a中，先后又调用了另外的几个方法，这几个方法是递进关系执行的。我们建议这几个方法使用throws的方式进行处理。而执行的方法a可以考虑使用try-catch-finally方式进行处理。\"]},\"1604\":{\"h\":\"7. 运行时异常的排查\",\"t\":[\"如果代码编译时没有异常，运行时出现了异常，比如空指针；那么应该对代码进行排查，优化，而不是进行try..catch处理。\"]},\"1605\":{\"h\":\"Ⅱ. 手动抛出异常\"},\"1606\":{\"h\":\"1. 关于异常的产生\",\"t\":[\"系统自动生成的异常对象\",\"手动生成一个异常对象，并抛出（throw）\"]},\"1607\":{\"h\":\"2. 手动抛出异常的意义\",\"t\":[\"异常是抛给调用者看的，调用者分为其他方法调用，或前端调用。有些异常是逻辑上的，需要我们自己手动抛出。抛出异常和返回一个特殊值，都能解决问题；可自行选择，抛出异常可以省掉很多if...else... 但是返回值更精准。\",\"如果代码存在逻辑上的问题，我们就需要抛出异常，告诉代码的调用者。\"]},\"1608\":{\"h\":\"3. 创建异常的语法\",\"t\":[\"由于是逻辑上的异常，需要我们自己new异常类，我们选择的异常类型有：\",\"Exception：编译异常（编译时会报错）\",\"RuntimeException：运行时异常（选他，不会报错）-->选这个\",\"throw new Exception(\\\"异常信息\\\"); throw new RuntimeException(\\\"异常信息\\\"); \"]},\"1609\":{\"h\":\"4. 示例\",\"t\":[\"自定义的异常也是可以throws到调用处的，比如抛出的是个编译时异常，就可以抛出到调用处进行处理。自定义异常中定义的异常信息，可以在调用处，使用异常类的getMessage方法获取。\",\"class Student{ private int id; //这里可以将异常信息再次throws到调用处 public void regist(int id) throws Exception { if(id > 0){ this.id = id; }else{ //手动抛出异常对象,运行时异常不会报编译时错误 throw new RuntimeException(\\\"您输入的数据非法！\\\"); //Exception会报编译时错误，可以将该异常throws到调用处 throw new Exception(\\\"您输入的数据非法\\\"); } } } public class StudentTest { public static void main(String[] args) { try { //处理throws来的的异常 Student s = new Student(); s.regist(-1001); System.out.println(s); } catch (Exception e) { System.out.println(e.getMessage()); } } } \"]},\"1610\":{\"h\":\"Ⅲ. 自定义异常类\"},\"1611\":{\"h\":\"1. 自定义异常类的创建说明\",\"t\":[\"一般地，用户自定义异常类都是RuntimeException的子类；\",\"自定义异常类通常需要编写几个重载的构造器。\",\"自定义异常需要提供serialVersionUID \",\"类的标识，随便定义，要是long类型，够长\",\"自定义的异常通过throw抛出。\",\"自定义异常最重要的是异常类的名字，当异常出现时，可以根据名字判断异常类型。\"]},\"1612\":{\"h\":\"2. 自定义异常类示例\",\"t\":[\"public class MyException extends Exception{ static final long serialVersionUID = -7034897193246939L; public MyException(){ } public MyException(String msg){ super(msg); } } \"]},\"1613\":{\"h\":\"3. 自定义异常类的总结\",\"t\":[\"直接继承RuntimeException即可，方法直接使用父类的。自定义异常类的意义在于异常类的名字，当异常出现时，可以根据名字判断异常类型。\"]},\"1614\":{\"h\":\"4-1. 枚举\"},\"1615\":{\"h\":\"Ⅰ. 枚举类\"},\"1616\":{\"h\":\"1. 什么是枚举类\",\"t\":[\"当类的对象是有限个，且确定的情况下，这个类就是枚举类，当需要定义一组常量时，强烈建议使用枚举类，例如：\",\"星期：Monday(星期一)、......、Sunday(星期天)\",\"性别：Man(男)、Woman(女)\",\"季节：Spring(春节)......Winter(冬天)\",\"支付方式：Cash（现金）、WeChatPay（微信）、Alipay(支付宝)、BankCard(银行卡)、CreditCard(信用卡)、就职状态：Busy、Free、Vocation、Dimission、\",\"订单状态：Nonpayment（未付款）、Paid（已付款）、Delivered（已发货）、Return（退货）、Checked（已确认）Fulfilled（已配货）、\",\"线程状态：创建、就绪、运行、阻塞、死亡\"]},\"1617\":{\"h\":\"2. 枚举类的特点\",\"t\":[\"一个类，他有固定的对象数量，且对象不可改变（final）这些对象是作为类的属性的，用的时候直接取即可。且该类不能再创建对象。\"]},\"1618\":{\"h\":\"3. 枚举类的实现\",\"t\":[\"JDK1.5之前：需要自定义枚举类\",\"JDK1.5新增：enum 关键字用于定义枚举类\"]},\"1619\":{\"h\":\"4. 自定义枚举类说明\",\"t\":[\"枚举动 类对象的属性不应允许被改动, 所以应该使用 private final 修饰\",\"枚举类的使用 private final 修饰的属性应该在构造器中为其赋值\",\"若枚举类显式的定义了带参数的构造器, 则在列出枚举值时也必须对应的传入参数\",\"如果枚举类中只有一个对象，则可以作为单例模式的实现方式。\"]},\"1620\":{\"h\":\"5. 示例：自定义枚举类\",\"t\":[\"创建细节：\",\"私有化类的构造器，保证不能在类的外部创建其对象\",\"在类的内部创建枚举类的实例。声明为：public static final\",\"对象如果有实例变量，应该声明为private final，并在构造器中初始化\"]},\"1621\":{\"h\":\"5.1 创建枚举类\",\"t\":[\"需求：创建一个季节枚举类，包含四季，属性为季节名和季节描述\",\"class Season{ //1.声明Season对象的属性:private final修饰 private final String seasonName; private final String seasonDesc; //2.私有化类的构造器,并给对象属性赋值 private Season(String seasonName,String seasonDesc){ this.seasonName = seasonName; this.seasonDesc = seasonDesc; } //3.提供当前枚举类的多个对象：public static final的 public static final Season SPRING = new Season(\\\"春\\\",\\\"交配季节\\\"); public static final Season SUMMER = new Season(\\\"夏\\\",\\\"好大雨\\\"); public static final Season AUTUMN = new Season(\\\"秋\\\",\\\"落叶\\\"); public static final Season WINTER = new Season(\\\"冬\\\",\\\"好大雪\\\"); //4.其他诉求：获取枚举类对象的属性 public String getSeasonName() { return seasonName; } public String getSeasonDesc() { return seasonDesc; } //5.toString，测试用 @Override public String toString() { return \\\"{\\\"+ seasonName + \\\":\\\" + seasonDesc + '}'; } } \"]},\"1622\":{\"h\":\"5.2 测试\",\"t\":[\"Season spring = Season.SPRING; System.out.println(spring.toString()); //{春:交配季节} System.out.println(spring.getSeasonName()); //春 System.out.println(spring.getSeasonDesc()); //交配季节 \"]},\"1623\":{\"h\":\"Ⅱ. enum\"},\"1624\":{\"h\":\"1. enum关键字\",\"t\":[\"enum关键字是替代class使用的，用来定义枚举类的。\",\"即enum也是用来修饰类的，被他修饰类就是枚举类。\"]},\"1625\":{\"h\":\"2. enum使用说明\",\"t\":[\"枚举类默认继承了 java.lang.Enum类，因此不能再继承其他类\",\"枚举类的构造器只能使用 private 权限修饰符\",\"枚举类的所有实例必须在枚举类中显式列出(, 分隔 ; 结尾)。列出的实例系统会自动添加 public static final 修饰\",\"必须在枚举类的第一行声明枚举类对象\"]},\"1626\":{\"h\":\"3. 自定义枚举类的步骤\",\"t\":[\"①提供枚举对象：一开始直接定义枚举对象，枚举对象如果有属性，就在括号内加属性。\",\"OBJNAME1, ... OBJNAME2; //OBJNAME1(\\\"OBJ\\\",\\\"yes\\\"), \",\"②可选：声明枚举对象的属性（如果有的话）\",\"③私有化类的构造器,并给对象属性赋值（如果有属性）\",\"④其他操作：其他方法\"]},\"1627\":{\"h\":\"4. Enum的主要方法\",\"t\":[\"Enum是所有枚举类的父类，方法直接用即可。\",\"values：返回枚举类型的对象数组。该方法可以很方便地遍历所有的枚举值。\",\"valueOf(String str)：可以把一个字符串转为对应的枚举类对象。要求字符串必须是枚举类对象的“名字”。如不是，会有运行时异常：IllegalArgumentException。\",\"toString()：返回当前枚举类对象常量的名称\"]},\"1628\":{\"h\":\"5. 实现接口的枚举类\",\"t\":[\"统一实现抽象方法：和普通类一样，重写抽象方法，无论哪个枚举对象调用，返回的内容都一样。\",\"分别实现抽象方法：若需要每个枚举值在调用实现的接口方法呈现出不同的行为方式,则可以让每个枚举值分别来实现该方法，在枚举值后面加{方法名{...}}\"]},\"1629\":{\"h\":\"6. enum使用示例\"},\"1630\":{\"h\":\"6.1 定义枚举类，并实现一个接口\",\"t\":[\"需求：定义四季，每个季节都有自己的名字\",\"package Basic;//和正常类一样，也属于某个包 interface show{ //定义一个接口 void showSeason(); } //enum和class一样可以实现接口，并需要重写接口中的方法 public enum Seasons implements show {、 //枚举类的对象必须创建在开头 SPRING(\\\"春天\\\"){ //括号里的参数是构造方法的参数 public void showInfo(){ //在枚举对象中可以单独重写接口中的方法 super.showSeason();//调用类中被重写的showInfo方法 System.out.println(\\\"春天是交配的季节\\\"); } }, //枚举对象间用逗号分割 SUMMER(\\\"夏天\\\"), AUTUMN(\\\"秋天\\\"), WINTER(\\\"春天\\\");//最后一个枚举对象以分号结束 private final String seasonName; //枚举类的private final 属性 //枚举类的私有化构造函数 private Seasons(String seasonName){ this.seasonName = seasonName; System.out.println(seasonName+\\\"来了\\\"); } //和普通类一样，枚举类中也可以定义普通方法 public void info(String s){ System.out.println(s+\\\"真好\\\"); } @Override//重写接口中定义的方法 public void showSeason() { System.out.println(\\\"春夏秋冬\\\"); } } \"]},\"1631\":{\"h\":\"6.2 使用枚举类，并测试枚举类的方法\",\"t\":[\"//获取一个Seasons对象：SPRING //控制台会输出：春天来了 夏天来了 秋天来了 冬天来了 Seasons spring = Seasons.SPRING; spring.toString(); //输出标识符代表的对象名：SPRING spring.info(\\\"今天\\\");//调用info方法,输出：今天真好 spring.showSeason(); //调用的是Spring重写的showSeason方法 \"]},\"1632\":{\"h\":\"4-2. 注解\"},\"1633\":{\"h\":\"Ⅰ. Annotation\"},\"1634\":{\"h\":\"1. 介绍\",\"t\":[\"从JDK5.0 开始, Java 增加了对元数据(MetaData) 的支持, 也就是Annotation(注解)。\"]},\"1635\":{\"h\":\"1.1 什么是Annotation\",\"t\":[\"Annotation其实就是代码里的特殊标记, 这些标记可以在编译, 类加载, 运行时被读取, 并执行相应的处理。\",\"通过使用Annotation, 程序员可以在不改变原有逻辑的情况下, 在源文件中嵌入一些补充信息。 \",\"代码分析工具、开发工具和部署工具可以通过这些补充信息进行验证或者进行部署。\",\"Annotation 可以像修饰符一样被使用, 可用于修饰包, 类, 构造器, 方法, 成员变量, 参数, 局部变量, 这些信息被保存在 Annotation\"]},\"1636\":{\"h\":\"1.2 注解的用途\",\"t\":[\"在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。\",\"在JavaEE/Android中注解占据了更重要的角色.\",\"未来的开发模式都是基于注解的，JPA是基于注解的，Spring2.5以上都是基于注解的，Hibernate3.x以后也是基于注解的，现在的Struts2有一部分也是基于注解的了，注解是一种趋势，一定程度上可以说：框架 = 注解 + 反射 + 设计模式。\"]},\"1637\":{\"h\":\"2. 注解的使用\",\"t\":[\"使用 Annotation 时要在其前面增加 @ 符号, 并把该 Annotation 当成一个修饰符使用。用于修饰它支持的程序元素。\",\"①用于文档注释：格式详见：基本语法->文档注释\",\"②在编译时进行格式检查 \",\"@Override：限制下面的方法为重写父类中的方法\",\"@Deprecated：标记所修饰的类、方法等已过时，有更好的选择\",\"@SuppressWarnings：抑制编译器警告，比如拼写检查\",\"③减少配置：运行时动态处理，得到注解信息，实现代替配置文件的功能； \",\"实现替代配置文件功能：常用于JavaWeb\",\"Servlet3.0提供了注解(annotation),使得不再需要在web.xml文件中进行Servlet的部署。\"]},\"1638\":{\"h\":\"3. 注解的分类\",\"t\":[\"JDK中内置了很多注解，我们也可以手动实现Annotation接口来创建自定义注解\",\"作用在代码的注解 \",\"@Override：限制下面的方法为重写父类中的方法\",\"@Deprecated：标记所修饰的类、方法等已过时，有更好的选择\",\"@SuppressWarnings：抑制编译器警告，比如拼写检查\",\"@SafeVarargs - Java 7 开始支持，忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告。\",\"@FunctionalInterface - Java 8 开始支持，标识一个匿名函数或函数式接口。\",\"元注解 \",\"@Retention - 标识这个注解怎么保存，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问\",\"@Documented - 标记这些注解是否包含在用户文档中。\",\"@Target - 标记这个注解应该是哪种 Java 成员。\",\"@Inherited - 标记这个注解是继承于哪个注解类(默认 注解并没有继承于任何子类)\",\"@Repeatable - Java 8 开始支持，标识某注解可以在同一个声明上使用多次。\",\"自定义注解 \",\"实现一些自定义的逻辑，比如JUnit框架中有个@Test注解，用来对方法进行测试\"]},\"1639\":{\"h\":\"Ⅱ. 自定义注解\"},\"1640\":{\"h\":\"1. 语法\",\"t\":[\"@元注解 public @interface 注解名称{ public 配置参数类型 配置参数名() default 默认值; ... //可以有多个属性 } \"]},\"1641\":{\"h\":\"2. 示例\",\"t\":[\"public @interface MyAnnotation{ String value() default \\\"hello\\\"; //特殊配置参数 double nums() default 9.99; } \"]},\"1642\":{\"h\":\"3. 语法解析\"},\"1643\":{\"h\":\"3.1 @interface：声明注解\",\"t\":[\"@interface是注解的关键字与class平级\",\"注解使用@interface关键字声明，自定义注解自动继承了java.lang.annotation.Annotation 接口。\",\"注意：它和我们通常的 implemented 实现接口的方法不同。Annotation 接口的实现细节都由编译器完成。通过 @interface 定义注解后，该注解不能继承其他的注解或接口。\"]},\"1644\":{\"h\":\"3.2 元注解\",\"t\":[\"用来修饰注解的注解为“元注解”，详见JDK中的元注解\"]},\"1645\":{\"h\":\"3.3 配置参数：本质是个常量\",\"t\":[\"注解类的成员，或称之为：注解的配置参数，以无参数方法的形式来声明，我们称之为配置参数。\",\"default：用来声明默认值（初始值）\"]},\"1646\":{\"h\":\"3.4 配置参数的类型\",\"t\":[\"所有基本类型；\",\"String；\",\"枚举类型；\",\"基本类型、String、Class以及枚举的数组\"]},\"1647\":{\"h\":\"4. 特殊配置参数\",\"t\":[\"没有属性：如果没有成员，那么注解仅起到标识的作用\",\"只有一个成员：如果注解只有一个成员，就使用value表示。且在使用注解时，value属性可以省略不写。\",\"有多个成员：如果有多个成员（且有成员没有默认值），那么Value名称是不能呢省略的， \",\"在使用注解时，所有没有默认值的成员，都必须显式的赋值。\"]},\"1648\":{\"h\":\"5. 使用注解\",\"t\":[\"语法：@注解类名(配置参数名=\\\"配置参数值\\\")\",\"注解中定义的成员如果含有配置参数，使用时就必须指明，除非有默认值。如果只有一个参数成员，且名称为value，可以省略“value=”\",\"使用位置：类上面、方法上面\",\"@MyAnnotation(value=\\\"hello\\\",nums=12.0) public class Person{ @MyAnnotation(nums=11.0) public void say(){ ... } } \"]},\"1649\":{\"h\":\"Ⅲ. 注解结构\"},\"1650\":{\"h\":\"1. 基本架构\",\"t\":[\"4-2-1\",\"1 个 Annotation 和 1 个 RetentionPolicy 关联。 \",\"可以理解为：每1个Annotation对象，都会有唯一的RetentionPolicy属性。\",\"1 个 Annotation 和 1~n 个 ElementType 关联。 \",\"可以理解为：对于每 1 个 Annotation 对象，可以有若干个 ElementType 属性\",\"Annotation 有许多实现类，包括：Deprecated, Documented, Inherited, Override 等等。 \",\"Annotation 的每一个实现类，都 \\\"和 1 个 RetentionPolicy 关联\\\" 并且 \\\" 和 1~n 个 ElementType 关联\\\"。\"]},\"1651\":{\"h\":\"2. Annotation组成部分\"},\"1652\":{\"h\":\"2.1 Annotation.java\",\"t\":[\"\\\"每 1 个 Annotation\\\" 都与 \\\"1 个 RetentionPolicy\\\" 关联，并且与 \\\"1～n 个 ElementType\\\" 关联。\",\"可以通俗的理解为：每 1 个 Annotation 对象，都会有唯一的 RetentionPolicy 属性；至于 ElementType 属性，则有 1~n 个。\",\"package java.lang.annotation; public interface Annotation{ //Annotation接口 boolean equals(Object obj); int hashCode(); String toString(); Class<? extends Annotation> annotationType(); } \"]},\"1653\":{\"h\":\"2.2 ElementType.java\",\"t\":[\"ElementType 是 Enum 枚举类型，它用来指定 Annotation 的类型。\",\"\\\"每 1 个 Annotation\\\" 都与 \\\"1～n 个 ElementType\\\" 关联。当 Annotation 与某个 ElementType 关联时，就意味着：Annotation有了某种用途。例如，若一个 Annotation 对象是 METHOD 类型，则该 Annotation 只能用来修饰方法。\",\"package java.lang.annotation; public enum ElementType { TYPE, /* 类、接口（包括注释类型）或枚举声明 */ FIELD, /* 字段声明（包括枚举常量） */ METHOD, /* 方法声明 */ PARAMETER, /* 参数声明 */ CONSTRUCTOR, /* 构造方法声明 */ LOCAL_VARIABLE, /* 局部变量声明 */ ANNOTATION_TYPE, /* 注释类型声明 */ PACKAGE /* 包声明 */ } \"]},\"1654\":{\"h\":\"2.3 RetentionPolicy.java\",\"t\":[\"RetentionPolicy 是 Enum 枚举类型，它用来指定 Annotation 的策略。通俗点说，就是不同 RetentionPolicy 类型的 Annotation 的作用域不同。\\\"每 1 个 Annotation\\\" 都与 \\\"1 个 RetentionPolicy\\\" 关联。\",\"SOURCE：Annotation 仅存在于编译器处理期间，编译器处理完之后，该 Annotation 就没用了。 \",\"例如：override，当它修饰一个方法的时候，就意味着该方法覆盖父类的方法；并且在编译期间会进行语法检查！编译器处理完后，\\\"@Override\\\" 就没有任何作用了。\",\"CLASS：编译器将 Annotation 存储于类对应的 .class 文件中，它是 Annotation 的默认行为。\",\"RUNTIME：编译器将 Annotation 存储于 class 文件中，并且可由JVM读入。\",\"package java.lang.annotation; public enum RetentionPolicy { SOURCE, /* Annotation信息仅存在于编译器处理期间，编译器处理完之后就没有该Annotation信息了 */ CLASS, /* 编译器将Annotation存储于类对应的.class文件中。默认行为 */ RUNTIME /* 编译器将Annotation存储于class文件中，并且可由JVM读入 */ } \"]},\"1655\":{\"h\":\"Ⅳ. 元注解\"},\"1656\":{\"h\":\"1. 元注解说明\",\"t\":[\"JDK 的元注解用于修饰其他 Annotation 定义，JDK5.0提供了4个标准的meta-annotation类型，分别是：\",\"Retention：指定所修饰的 Annotation 的生命周期。\",\"Target：标记这个注解应该是哪种 Java 成员。\",\"Documented：标记这些注解是否包含在用户文档中。\",\"Inherited：标记这个注解是继承于哪个注解类(默认 注解并没有继承于任何子类)\"]},\"1657\":{\"h\":\"2. @Retention\",\"t\":[\"指定所修饰的 Annotation 的生命周期。标识这个注解怎么保存，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问。\",\"RetentionPolicy 是 Annotation 的策略属性，而 @Retention 的作用，就是指定 Annotation 的策略属性。\",\"@Retention(RetentionPolicy.RUNTIME) public @interface MyAnnotation{...} \"]},\"1658\":{\"h\":\"2.1 使用说明\",\"t\":[\"使用@Rentention 时必须为该 value 成员变量指定值（枚举类型）\"]},\"1659\":{\"h\":\"2.2 Annotation的生命周期（成员变量的值）\",\"t\":[\"RetentionPolicy.SOURCE：在源文件中有效（即源java文件保留），编译器直接丢弃这种策略的注释\",\"RetentionPolicy.CLASS:在class文件中有效（即class保留） ， 当运行 Java 程序时, JVM不会保留注解。 【默认值】\",\"RetentionPolicy.RUNTIME:在运行时有效（即运行时保留），当运行 Java 程序时, JVM会保留注释。程序可以通过反射获取注释。\"]},\"1660\":{\"h\":\"3. @Target\",\"t\":[\"ElementType 是 Annotation 的类型属性。而 @Target 的作用，就是来指定 Annotation 的类型属性。\",\"用于指定被修饰的 Annotation 能用于修饰哪些程序元素，@Target 也包含一个名为 value 的成员变量，可以取多个枚举值。\",\"@Target({TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE,TYPE_PARAMETER,TYPE_USE}) public @interface MyAnnotation{...} \"]},\"1661\":{\"h\":\"3.1 取值\",\"t\":[\"ElementType.TYPE：只能用来标注 类、接口、枚举\",\"ElementType.FIELD：只能用来标注 字段声明\",\"ElementType.METHOD：只能用来标注 方法\",\"ElementType.PARAMETER：只能用来标注 参数\",\"ElementType.CONSTRUCTOR：只能用来标注 构造方法\",\"ElementType.LOCAL_VARIABLE：只能用来标注 局部变量\"]},\"1662\":{\"h\":\"3.2 注意\",\"t\":[\"若没有指定@Target元注解，那么所定义的注解可以用于任何地方。\"]},\"1663\":{\"h\":\"4. @Documented【不常用】\",\"t\":[\"用于指定被该元 Annotation 修饰的 Annotation类将被javadoc 工具提取成文档。默认情况下，javadoc是不包括注解的。\",\"@Documented Retention(RetentionPolicy.RUNTIME) public @interface MyAnnotation{...} \",\"定义为Documented的注解必须设置Retention值为RUNTIME\"]},\"1664\":{\"h\":\"5. @Inherited【不常用】\",\"t\":[\"@Inherited public @interface MyAnnotation{...} \",\"被它修饰的 Annotation 将具有 继承性。如果某个类使用了被@Inherited 修饰的 Annotation, 则其子类将自动具有该注解。\",\"比如：如果把标有@Inherited注解的自定义的注解标注在类级别上，子类则可以继承父类类级别的注解\"]},\"1665\":{\"h\":\"Ⅴ. 注解新特性\",\"t\":[\"Java 8对注解处理提供了两点改进：可重复的注解及可用于类型的注解。此外，反射也得到了加强，在Java8中能够得到方法参数的名称。这会简化标注在方法参数上的注解。\"]},\"1666\":{\"h\":\"1. 可重复注解\",\"t\":[\"即，同一个注解可以重复用多次。\",\"@MyAnnotation(value=\\\"hi\\\") @MyAnnotation(value=\\\"abc\\\") class Person{...} \"]},\"1667\":{\"h\":\"1.1 1.8之前的重复注解\",\"t\":[\"在1.8之前，不支持重复注解，同一个注解，多次使用，会报错，编译不通过。\",\"如果想使用重复注解，就要吧注解的成员变量写成数组的形式\",\"//注解定义 public @interface MyAnnotations { MyAnnotation[] value(); //定义成数组的形式 } //注解使用 @MyAnnotations({@MyAnnotation(value=\\\"hi\\\"),@MyAnnotation(value=\\\"hi\\\")}) class Person{...} \"]},\"1668\":{\"h\":\"1.2 1.8之后的重复注解\",\"t\":[\"步骤，以MyAnnotation为例：\",\"创建MyAnnotations注解，如上，定义数组形式的成员变量\",\"在MyAnnotation注解上使用元注解@Repeatable，值为MyAnnotations.class \",\"这样这两个注解就被关联起来了。\",\"注意： MyAnnotation的Target和Retention等元注解与MyAnnotations相同。\",\"@Repeatable(MyAnnotations.class) //其他元注解要相同 \"]},\"1669\":{\"h\":\"2. 可用于类型的注解\",\"t\":[\"JDK1.8之后，关于元注解@Target的参数类型ElementType枚举值多了两个：\",\"TYPE_PARAMETER\",\"TYPE_USE\",\"@Target({...,TYPE_PARAMETER,TYPE_USE});//要加到@Target中 \"]},\"1670\":{\"h\":\"2.1 TYPE_PARAMETER\",\"t\":[\"表示该注解能写在类型变量的声明语句中（如：泛型声明）\",\"public class TestTypeDefine<@TypeDefine() U> {...} public static <@MyAnnotation T> void method(T t) {...} \"]},\"1671\":{\"h\":\"2.2 TYPE_USE\",\"t\":[\"表示该注解能写在使用类型的任何语句中。\",\"AnnotationTest<@MyAnnotation String> t = null; int a = (@MyAnnotation int) 2L; \"]},\"1672\":{\"h\":\"Ⅵ. 常用注解解析\"},\"1673\":{\"h\":\"1. Deprecated\",\"t\":[\"@Deprecated 所标注内容，不再被建议使用。若某个方法被 @Deprecated 标注，则该方法不再被建议使用。如果有开发人员试图使用或重写被 @Deprecated 标示的方法，编译器会给相应的提示信息。\",\"@Documented @Retention(RetentionPolicy.RUNTIME) public @interface Deprecated { } \"]},\"1674\":{\"h\":\"2. @Inherited（元注解之一）\",\"t\":[\"@Inherited 的含义是，它所标注的Annotation将具有继承性。\",\"@Documented @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.ANNOTATION_TYPE) public @interface Inherited { } \"]},\"1675\":{\"h\":\"3. @SuppressWarnings\",\"t\":[\"SuppressWarnings 的作用是，让编译器对\\\"它所标注的内容\\\"的某些警告保持静默。\",\"@Target({TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE}) @Retention(RetentionPolicy.SOURCE) public @interface SuppressWarnings { String[] value(); } \"]},\"1676\":{\"h\":\"3.1 String[] value();\",\"t\":[\"SuppressWarnings 能指定参数，String类型的数组\"]},\"1677\":{\"h\":\"3.2 使用举例\",\"t\":[\"如下：\\\"SuppressWarnings 不再建议使用警告\\\"和\\\"未检查的转换时的警告\\\"保持沉默。\",\"@SuppressWarnings(value={\\\"deprecation\\\", \\\"unchecked\\\"})\\\" \"]},\"1678\":{\"h\":\"3.3 取值\",\"t\":[\"deprecation：使用了不赞成使用的类或方法时的警告\",\"unchecked：执行了未检查的转换时的警告，例如当使用集合时没有用泛型 (Generics) 来指定集合保存的类型。\",\"fallthrough：当 Switch 程序块直接通往下一种情况而没有 Break 时的警告。\",\"path：在类路径、源文件路径等中有不存在的路径时的警告。\",\"serial：当在可序列化的类上缺少 serialVersionUID 定义时的警告。\",\"finally：任何 finally 子句不能正常完成时的警告。\",\"all：关于以上所有情况的警告。\"]},\"1679\":{\"h\":\"Ⅶ. 反射获取注解信息\",\"t\":[\"在反射的 Class, Method, Field 等函数中，有许多于 Annotation 相关的接口。这也意味着，我们可以在反射中解析并使用 Annotation。\"]},\"1680\":{\"h\":\"1. 使用示例\",\"t\":[\"import java.lang.annotation.Annotation; import java.lang.annotation.Target; import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Inherited; import java.lang.reflect.Method; /** * Annotation在反射函数中的使用示例 */ @Retention(RetentionPolicy.RUNTIME) @interface MyAnnotation { String[] value() default \\\"unknown\\\"; } /** * Person类。它会使用MyAnnotation注解。 */ class Person { /** * empty()方法同时被 \\\"@Deprecated\\\" 和 \\\"@MyAnnotation(value={\\\"a\\\",\\\"b\\\"})\\\"所标注 * (01) @Deprecated，意味着empty()方法，不再被建议使用 * (02) @MyAnnotation, 意味着empty() 方法对应的MyAnnotation的value值 是默认值\\\"unknown */ @MyAnnotation @Deprecated public void empty(){ System.out.println(\\\"\\\\nempty\\\"); } /** * sombody() 被 @MyAnnotation(value={\\\"girl\\\",\\\"boy\\\"}) 所标注， * @MyAnnotation(value={\\\"girl\\\",\\\"boy\\\"}), 意味着MyAnnotation的value值 是{\\\"girl\\\",\\\"boy\\\"} */ @MyAnnotation(value={\\\"girl\\\",\\\"boy\\\"}) public void somebody(String name, int age){ System.out.println(\\\"\\\\nsomebody: \\\"+name+\\\", \\\"+age); } } public class AnnotationTest { public static void main(String[] args) throws Exception { // 新建Person Person person = new Person(); // 获取Person的Class实例 Class<Person> c = Person.class; // 获取 somebody() 方法的Method实例 Method mSomebody = c.getMethod(\\\"somebody\\\", new Class[]{String.class, int.class}); // 执行该方法 mSomebody.invoke(person, new Object[]{\\\"lily\\\", 18}); iteratorAnnotations(mSomebody); // 获取 somebody() 方法的Method实例 Method mEmpty = c.getMethod(\\\"empty\\\", new Class[]{}); // 执行该方法 mEmpty.invoke(person, new Object[]{}); iteratorAnnotations(mEmpty); } public static void iteratorAnnotations(Method method) { // 判断 somebody() 方法是否包含MyAnnotation注解 if(method.isAnnotationPresent(MyAnnotation.class)){ // 获取该方法的MyAnnotation注解实例 MyAnnotation myAnnotation = method.getAnnotation(MyAnnotation.class); // 获取 myAnnotation的值，并打印出来 String[] values = myAnnotation.value(); for (String str:values) System.out.printf(str+\\\", \\\"); System.out.println(); } // 获取方法上的所有注解，并打印出来 Annotation[] annotations = method.getAnnotations(); for(Annotation annotation : annotations){ System.out.println(annotation); } } } \"]},\"1681\":{\"h\":\"5-1. 概念\"},\"1682\":{\"h\":\"Ⅰ. 基本概念\"},\"1683\":{\"h\":\"1. Program：程序的概念\",\"t\":[\"程序(program)是为完成特定任务、用某种语言编写的一组指令的集合。即指一段静态的代码，静态对象。\",\"程序和软件的区别\",\"软件是为了完成特定的功能，解决特定的问题而用计算机语言编写的命令序列集合，可以理解为应用程序的集合。而应用程序是软件的一个组成部分，它是软件的必要元素。简单来说，“软件=程序+文档=数据结构+算法+文档”。\",\"程序和软件的区别是，软件是为了完成特定的功能，解决特定的问题而用计算机语言编写的命令序列集合，可以理解为应用程序的集合。而应用程序是软件的一个组成部分，它是软件的必要元素。\"]},\"1684\":{\"h\":\"2. Process：进程的概念\",\"t\":[\"进程(process)是程序的一次执行过程，或是正在运行的一个程序。是一个动态的过程：有它自身的产生、存在和消亡的过程。——生命周期。\",\"程序是静态的，进程是动态的；\",\"进程作为资源分配的单位，系统在运行时会为每个进程分配不同的内存区域\",\"每个进程之间是独立的，每个进程均运行在其专用的且受保护的内存（即进程之间不方便通信）\"]},\"1685\":{\"h\":\"2.1 程序与进程的区别\",\"t\":[\"程序是静态的，进程是动态的：程序是存储在某种介质上的二进制代码，进程对应了程序的执行过程，系统不需要为一个不执行的程序创建进程，一旦进程被创建，就处于不断变化的动态过程中，对应了一个不断变化的上下文环境。\"]},\"1686\":{\"h\":\"2.2 程序与进程的联系\",\"t\":[\"一个程序可以对应多个进程\"]},\"1687\":{\"h\":\"3. Thread：线程的概念\",\"t\":[\"进程可进一步细化为线程，是一个程序内部的一条执行路径。若一个进程同一时间 并行执行多个线程，就是支持多线程的;\",\"线程作为调度和执行的单位，每个线程拥有独立的运行栈和程序计数器(pc)，线程切换的开销小;\",\"一个进程中的多个线程共享相同的内存单元/内存地址空间->它们从同一堆中分配对象，可以访问相同的变量和对象。这就使得线程间通信更简便、高效。但多个线程操作共享的系统资源可能就会带来安全的隐患。\",\"程序启动会默认开启一条线程，这条线程被称为主线程或 UI 线程\"]},\"1688\":{\"h\":\"4. 进程与线程\",\"t\":[\"一款软件具有某些功能，任一一个功能的执行就是一个进程（同一功能多次开启也算加了一个进程）。每个进程需要多个任务协同完成，可以创建多个线程来执行这些不同的任务。\",\"5-1-1\",\"资源拥有：同一进程内的线程共享本进程的资源如内存、I/O、cpu等，但是进程之间的资源是独立的。\",\"一个进程崩溃后，在保护模式下不会对其他进程产生影响，但是一个线程崩溃整个进程都死掉。所以多进程要比多线程健壮。\",\"一个进程至少有一个线程(主)。是进程内的一个独立执行单元\",\"程序是在某个进程中的某个线程执行的。\"]},\"1689\":{\"h\":\"5. 单核CPU和多核CPU\",\"t\":[\"单核CPU，其实是一种假的多线程，因为在一个时间单元内，也只能执行一个线程的任务。但是因为CPU时间单元特别短（快速在各个线程间切换），因此感觉不出来。\",\"如果是多核的话，才能更好的发挥多线程的效率。（现在的服务器都是多核的）。\",\"一个Java应用程序java.exe，其实至少有三个线程：main()主线程，gc()垃圾回收线程，异常处理线程。当然如果发生异常，会影响主线程。\"]},\"1690\":{\"h\":\"6. 并行与并发\",\"t\":[\"并行：多个CPU同时执行多个任务。比如：多个人同时做不同的事。\",\"并发：一个CPU(采用时间片)同时执行多个任务。比如：秒杀、多个人做同一件事。\"]},\"1691\":{\"h\":\"Ⅱ. 多线程的意义\"},\"1692\":{\"h\":\"背景\",\"t\":[\"以单核CPU为例，只使用单个线程先后完成多个任务（调用多个方法），肯定比用多个线程来完成用的时间更短（省去了切换线程），为何仍需多线程呢？\",\"例如：我们复制文件（程序：文件复制开启），复制完一个，再复制下一个是要比同时复制两个文件要快的（单核CPU省去了切换）。假如是4核CPU，只能同时复制4个文件，第5个文件就需要排队了。拿还要多线程干什么。\"]},\"1693\":{\"h\":\"1. 多线程程序的优点\",\"t\":[\"提高应用程序的响应。对图形化界面更有意义，可增强用户体验。 \",\"用户同时在电脑手机上干多件事\",\"提高计算机系统CPU的利用率：CPU的切换效率很高，很多时候无法利用完CPU的性能\",\"改善程序结构：将既长又复杂的进程分为多个线程，独立运行，利于理解和修改\"]},\"1694\":{\"h\":\"2. 何时需要多线程\",\"t\":[\"程序需要同时执行两个或多个任务。\",\"程序需要实现一些需要等待的任务时 \",\"比如：下滑显示新的评论，需要三个功能：加载评论内容、加载头像、页面上滑，如果用单线程做，就会按顺序加载这些内容，如果图片没加载出来就无法继续向上滑动，软件就会显得很卡。多线程，就可以解决该问题。滑动和加载图片分开。\",\"需要一些后台运行的程序时：比如Java需要后台一直运行GC垃圾回收。\"]},\"1695\":{\"h\":\"Ⅲ. 扩展：内存\"},\"1696\":{\"h\":\"1. 数据\",\"t\":[\"存在于内存中可读，可操纵的东西，一切皆数据，函数也是数据。\",\"内存存在的意义，就是对数据进行操作，（硬盘才是储存数据的）。\"]},\"1697\":{\"h\":\"2. 内存\"},\"1698\":{\"h\":\"2.1 内存条的空间\",\"t\":[\"内存条通电后产生的存储空间(临时的)就是内存，内存是临时性的储存，是有生命周期的。\"]},\"1699\":{\"h\":\"2.2 内存的生命周期\",\"t\":[\"内存条==》通电==》产生内存空间==》储存数据==》断电==》内存空间和数据都消失\"]},\"1700\":{\"h\":\"2.3 内存储存的数据类型\",\"t\":[\"数据：直接储存数据【普通类型】\",\"内存地址：储存其他内存块的地址【引用类型】。\"]},\"1701\":{\"h\":\"2.4 内存空间的基本分类\",\"t\":[\"栈：全局变量和局部变量的值和对象的地址储存在这里。\",\"堆：对象储存在这里。\"]},\"1702\":{\"h\":\"3. 变量\",\"t\":[\"值的标识符，该标识符是可变的，就称为变量，一个变量对应一小块内存，他的值保存在内存中，即内存中的数据==变量的值\"]},\"1703\":{\"h\":\"4. 变量名（标识符）\",\"t\":[\"内存中储存的是变量的值，变量的名是不会储存的，变量的名可以理解为内存的地址标识。\",\"变量名是给我们程序员操作内存来使用的。比如我们定义了一个全局的int a;那么编译器都为我们做了什么呢？它会为程序预留4个字节的空间（假设在32位平台），并把我们的变量名“a”保存进符号表，并用这个符号表的索引对应实际的空间。这是写编译器需要做的，我们需要建立符号表。变量名编译后，变成一个内存地址，这个内存地址一般是直接存在于代码段中\"]},\"1704\":{\"h\":\"5. 内存、数据、变量间的关系\",\"t\":[\"内存是容器, 用来存储不同数据；\",\"变量是内存的标识, 通过变量我们可以操作(读/写)内存中的数据；\"]},\"1705\":{\"h\":\"6. 垃圾回收\",\"t\":[\"当一个对象，没有任何的变量或属性对它进行引用，此时我们将永远无法操作该对象，此时这种对象就是一个垃圾。这种对象过多，会占用大量的内存空间，导致程序运行过慢，所以需要进行清理。\"]},\"1706\":{\"h\":\"7. 内存溢出和泄露\",\"t\":[\"溢出：一种程序运行出现的错误，当程序运行需要的内存超过了剩余的内存时, 就出抛出内存溢出的错误。\",\"泄露：占用的内存没有及时释放，内存泄露积累多了就容易导致内存溢出。\"]},\"1707\":{\"h\":\"5-2. 使用多线程\"},\"1708\":{\"h\":\"Ⅰ. Java的多线程\"},\"1709\":{\"h\":\"1. 概述\",\"t\":[\"在java里，一条线顺序执行叫一个线程，并列执行的才是多线程。\"]},\"1710\":{\"h\":\"2. API中创建线程的方式\",\"t\":[\"JDK1.5之前创建新执行线程有两种方法： \",\"①继承Thread类的方式\",\"②实现Runnable接口的方式\",\"在JDK5.0后新增了一种 \",\"③实现Callable接口\",\"④线程池（常用）\"]},\"1711\":{\"h\":\"3. 线程的分类\",\"t\":[\"Java中的线程分为两类：一种是 守护线程，一种是 用户线程。\",\"它们在几乎每个方面都是相同的，唯一的区别是判断JVM何时离开。\",\"护线程是用来服务用户线程的，通过在start()方法前调用thread.setDaemon(true)可以把一个用户线程变成一个守护线程。\",\"Java垃圾回收就是一个典型的守护线程。\",\"若JVM中都是守护线程，当前JVM将退出。\"]},\"1712\":{\"h\":\"Ⅱ. 继承Thred类\",\"t\":[\"创建多线程的方式之一：继承方式，通过继承Thread类\"]},\"1713\":{\"h\":\"说明\",\"t\":[\"Java语言的JVM可以通过java.lang.Thread类来实现多线程。\",\"main线程：java的入口是main方法，main方法就是java程序的主线程，又叫main线程\",\"子线程：我们用Thread类创建的其他线程，统称为子线程。\"]},\"1714\":{\"h\":\"1. Thread类介绍\"},\"1715\":{\"h\":\"1.1 Thread类：多线程类\",\"t\":[\"Thread类，用来创建和执行多线程。\",\"我们通过实例化Thread类的子类对象来创建多线程。\"]},\"1716\":{\"h\":\"1.2 构造器\",\"t\":[\"前两个构造器是继承Thread类创建多线程用的，后两个构造器是利用Runable接口创建多线程用的。\",\"Thread() ：创建新的Thread对象\",\"Thread(String threadname)：创建线程并指定线程实例名\",\"Thread(Runnable target) ：指定创建线程的目标对象，它实现了Runnable接口中的run方法\",\"Thread(Runnable target, String name) ：创建新的Thread对象\"]},\"1717\":{\"h\":\"1.3 run方法：线程体\",\"t\":[\"run方法是该线程操作的入口，需要将此线程的操作声明在run方法中。\",\"每个线程都是通过某个特定Thread对象的run()方法来完成操作的，经常把run()方法的主体称为线程体\"]},\"1718\":{\"h\":\"1.4 start方法：开启线程\",\"t\":[\"通过Thread类的对象调用该方法，用来启动线程。该方法会启动对象对应的线程，并调用对象中的run方法。\",\"注意：通过该Thread对象的start()方法来启动这个线程，而非直接调用run()\"]},\"1719\":{\"h\":\"2. 创建多线程的步骤\",\"t\":[\"5-2-1\",\"创建一个继承于Thread类的子类\",\"子类重写Thread类的run() --> 将此线程执行的操作声明在run()中\",\"创建Thread类的子类的对象，即创建线程对象\",\"通过此对象调用start()：启动创建的线程，自动调用run方法\"]},\"1720\":{\"h\":\"3. 创建多线程示例\",\"t\":[\"要求：使用三个线程，每个线程都遍历1~100间的偶数。\",\"1.//创建一个继承于Thread类的子类 class MyThread extends Thread{ 2.//重写Thread类的run方法：在里面放入我们要执行的代码 public void run() { for (int i = 0; i<100;i++){ if(i%2 == 0){ System.out.println(Thread.currentThread().getName()+\\\"***\\\"+i); } } } } public class ThreadTest { public static void main(String[] args) { 3.//创建Thread类的子类的对象(创建子线程对象) MyThread m1 = new MyThread(); 4.//调用start方法：启动当前线程;调用当前线程的run(); m1.start(); //m1.start(); //m1对象不能重复调用start，将抛出异常 // m1.run(); //没有开启线程，只是在main线程调用了一个普通的run方法 //这个是main线程的遍历代码 for (int i = 0; i<100;i++){ if(i%2 == 0){ System.out.println(Thread.currentThread().getName()+\\\"***\\\"+i); } } //再次创建一个Thread类的子类对象(再次创建一个子线程对象)，并调用start MyThread m2 = new MyThread(); m2.start(); } } \"]},\"1721\":{\"h\":\"3.1 备注\",\"t\":[\"Thread.currentThread().getName()用来返回当前线程的实例名。\",\"主线程默认名是 main。\",\"子线程默认名是 Thread-0（0~N）\"]},\"1722\":{\"h\":\"3.2 执行结果\",\"t\":[\"main***i、Thread***i、Thread***i 交替遍历，没有固定的先后顺序。\",\"这说明，这三个遍历是并列的，有三个线程在执行遍历代码。\",\"5-2-2\"]},\"1723\":{\"h\":\"4. 注意事项\"},\"1724\":{\"h\":\"4.1 不能通过调用run开始子线程\",\"t\":[\"通过直接调用run()不能开启子线程，只是普通的在main线程中调用一个方法。 开启子线程必须使用start()，让start方法去调用run。\",\"run()方法由JVM调用，什么时候调用，执行的过程控制都有操作系统的CPU 调度决定。\"]},\"1725\":{\"h\":\"4.2 同一个Thread类的对象不能重复调用start\",\"t\":[\"一个线程对象只能调用一次start()方法启动，开启一个子线程。\",\"同一个线程对象重复调用start方法会抛出异常（IllegalThreadStateException异常）。\",\"如果想再次开启一个线程，需要再次创建一个线程对象（这些对象可以属于同一个Thread类的子类）。\"]},\"1726\":{\"h\":\"Ⅲ. Thread常用方法\"},\"1727\":{\"h\":\"方法列表\",\"t\":[\"详见Thread的API\",\"start()：启动当前线程；调用当前线程的run()\",\"run()：通常需要重写Thread类中的此方法，将创建的线程要执行的操作声明在此方法中。\",\"Thread.curretnThread()：【static】返回执行当前代码的线程 \",\"在Thread子类中就是this，通常用于主线程和Runnable实现类\",\"getName()：获取当前线程的名字（需要先获取执行当前代码的线程）\",\"setName()：设置当前线程的名字（需要先获取执行当前代码的线程）\",\"yield():【static】释放当前cpu的执行权\",\"join():在线程a中调用线程b的join(),此时线程a就进入阻塞状态，直到线程b完全执行完以后，线程a才结束阻塞状态。\",\"sleep(long millitime)：【static】让当前线程“睡眠”指定的millitime毫秒。在指定的millitime毫秒时间内，当前线程是阻塞状态。\",\"isAlive():判断当前线程是否存活\",\"stop():已过时。当执行此方法时，强制结束当前线程。\"]},\"1728\":{\"h\":\"1. 线程名\",\"t\":[\"每个线程都有自己的名字，线程名是个静态属性，可以使用get、set方法访问，也可以使用构造函数初始化。\",\"默认的线程名为：主线程：main；子线程：Thread-0（0~n）\",\"public class ThreadMethodTest { public static void main(String[] args) { HelloThread ht1 = new HelloThread(\\\"线程1\\\");//可以通过构造方法设置name ht1.setName(\\\"work one\\\"); //要在start前设置Name ht1.start(); //通过方法获取主线程，并设置线程名 Thread.currentThread().setName(\\\"主线程\\\"); } } class HelloThread extends Thread{ public HelloThread(String s){ super(s); } @Override public void run() { //获取当前线程，并获取线程名 System.out.println(Thread.currentThread().getName()+\\\":HelloThread\\\"); } } \"]},\"1729\":{\"h\":\"2. 线程执行控制\",\"t\":[\"public class ThreadMethodTest { public static void main(String[] args) { HelloThread ht1 = new HelloThread(); ht1.start(); for(int i = 0;i<10;i++){ System.out.println(i); if(i == 5){ try { ht1.join(); //当i==5时，先执行ht1进程，该进程执行完，再接着执行main进程 } catch (InterruptedException e) { e.printStackTrace(); } } } //判断main进程是否还在激活状态：true System.out.println(Thread.currentThread().isAlive()); } } class HelloThread extends Thread{ @Override public void run() { for(int i = 0; i < 100; i++){ System.out.println(i); if(i == 10){ Thread.yield(); //当i==10时，释放本次的执行权 } if(i == 20){ try { Thread.sleep(2000); //当i==20时，阻塞当前进程2秒钟 } catch (InterruptedException e) { e.printStackTrace(); } } } } } \",\"yield：释放当次执行权 \",\"CPU是来回切换执行线程的，执行该方法，会释放本次获得的执行权，然后重新加入CPU分配的队列。若队列中没有同优先级的线程，忽略此方法\",\"join：线程插队 \",\"在线程a中调用线程b的join(),此时线程a就进入阻塞状态，优先执行线程b，直到线程b执行完，线程a，才重新进入CPU分配线程的队列。\",\"该方法会抛异常，需要try...catch\",\"sleep：睡眠线程(指定时间:毫秒) \",\"让当前线程睡眠（暂停、阻塞）指定的时间。然后再重新加入CPU分配的队列。\",\"该方法会抛InterruptedException异常，需要try...catch\",\"stop：结束当前线程；【API明确，该方法已不推荐使用】\",\"isAlive：判断当前线程是否存活（执行完就死了）\"]},\"1730\":{\"h\":\"Ⅳ. 线程的调度\"},\"1731\":{\"h\":\"1. CPU的调度策略\"},\"1732\":{\"h\":\"1.1 时间片\",\"t\":[\"5-2-3\"]},\"1733\":{\"h\":\"1.2 抢占式\",\"t\":[\"高优先级的线程抢占CPU\"]},\"1734\":{\"h\":\"2. Java的调度方法\",\"t\":[\"同优先级线程组成先进先出队列（先到先服务），使用时间片策略；对高优先级，使用优先调度的抢占式策略\"]},\"1735\":{\"h\":\"3. 线程的优先级\",\"t\":[\"优先级为1~10。\",\"MAX_PRIORITY：10\",\"MIN _PRIORITY：1\",\"NORM_PRIORITY：5 -->默认优先级\",\"高优先级的线程要抢占低优先级线程cpu的执行权。但是只是从概率上讲，高优先级的线程高概率的情况下被执行。并不意味着只有当高优先级的线程执行完以后，低优先级的线程才执行。\",\"查看线程的优先级 getPriority() ：返回线程优先值，返回的是int\",\"修改线程的优先级 setPriority(int newPriority) ：改变线程的优先级，参数是常量或1~10\"]},\"1736\":{\"h\":\"4. 注意事项\",\"t\":[\"线程创建时继承父线程的优先级\",\"低优先级只是获得调度的概率低，并非一定是在高优先级线程之后才被调用\"]},\"1737\":{\"h\":\"5. 线程调度示例\",\"t\":[\"效果：两个线程无序交替执行，高优先级的线程被优先执行。\",\"public class ThreadMethodTest { public static void main(String[] args) { HelloThread ht1 = new HelloThread(); //获得线程的优先级，int System.out.println(\\\"线程的默认优先级为：\\\"+ht1.getPriority());//5 //设置线程的优先级 ht1.setPriority(10); System.out.println(\\\"线程的优先级被修改为：\\\"+ht1.getPriority());//10 ht1.start(); for(int i = 0;i<50;i++){ System.out.println(Thread.currentThread().getName()+\\\"***\\\"+i); } } } class HelloThread extends Thread{ @Override public void run() { for(int i = 0; i < 50; i++){ System.out.println(getName()+\\\"***\\\"+i); } } } \"]},\"1738\":{\"h\":\"Ⅴ. Runnable接口\",\"t\":[\"Runnable接口是创建多线程的方式之一。\"]},\"1739\":{\"h\":\"1. Runnable接口创建多线程的步骤\",\"t\":[\"创建一个实现了Runnable接口的类\",\"实现类去实现Runnable中的抽象方法：run()\",\"创建实现类的对象\",\"将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象\",\"通过Thread类的对象调用start()：开启线程，并调用重写的run方法\"]},\"1740\":{\"h\":\"2. 示例\",\"t\":[\"public class RunnableTest { public static void main(String[] args) { 3.//创建实现类的对象 MyRunnable m1 = new MyRunnable(); 4.//将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象 Thread t1 = new Thread(m1); Thread t2 = new Thread(m1); Thread t3 = new Thread(m1); 5.//通过Thread类的对象调用start() t1.start(); t2.start(); t3.start(); } } 1.//创建一个实现了Runnable接口的类：MyRunnable class MyRunnable implements Runnable{ private int num = 100; @Override 2.//实现类去实现Runnable中的抽象方法：run() public void run() { while(true){ //因为循环条件是成员变量，所以要这样写 if(num>0){ System.out.println(Thread.currentThread().getName()+\\\"***\\\"+num); num--; }else{ break; } } } } \",\"这里通过将Runnable接口的实例作为参数传入Thread类中，再通过new Thread类来创建线程的。 开启线程还是需要掉用Thread类的start方法\",\"执行结果：三个线程交替输出100->1，共享一个num变量\"]},\"1741\":{\"h\":\"2.1\",\"t\":[\"疑问：MyRunnable类没有继承，也没有重写Thread类的run方法，为什么Thread类调用start()时会执行MyRunnable类的run方法。\",\"解答：new Thread类时，将Runnable接口的实例(MyRunnable类的实例)传递了进去，Thread类有一个构造方法是接收 Runnable类型的变量的，该构造方法将Runnble接口实现类的实例赋值给了Target变量，当调用Thread类的run方法时，会判断Target变量是否有值，就值就调用Target的run方法，因此调用的是Runnable的run方法，由于多态的缘故，最终被调用的就是MyRunnable类的run方法了。\"]},\"1742\":{\"h\":\"2.2 创建多个线程\",\"t\":[\"如上；创建新的线程，不需要重复new Runnable实现类的实例，只需new Thread类就能创建一个新的线程。\"]},\"1743\":{\"h\":\"2.3 共享成员变量\",\"t\":[\"由于使用Runnable接口创建多个线程时，每个线程使用的都是同一个 Runnable的实现类实例。所以这些线程的run方法操作的是同一个对象的成员变量，即共享成员变量，每个线程对成员变量的修改都会影响到其他线程，不需要额外加static。\"]},\"1744\":{\"h\":\"3. Thread和Runnable 两种方式的比较\"},\"1745\":{\"h\":\"3.1 开发中的选择\",\"t\":[\"开发中：优先选择：实现Runnable接口的方式，原因如下：\",\"实现的方式没有类的单继承性的局限性\",\"实现的方式更适合来处理多个线程有共享数据的情况。\"]},\"1746\":{\"h\":\"3.2 区别\",\"t\":[\"继承Thread：线程代码存放Thread子类run方法中。\",\"实现Runnable：线程代码存在接口的实现类的run方法。\"]},\"1747\":{\"h\":\"3.3 联系\",\"t\":[\"相同点：两种方式都需要重写run(),将线程要执行的逻辑声明在run()中。\",\"public class Thread extends Object implements Runnable \"]},\"1748\":{\"h\":\"5-3. 生命周期\",\"t\":[\"线程是有生命周期（状态）的\"]},\"1749\":{\"h\":\"1. 线程的5种状态\",\"t\":[\"要想实现多线程，必须在主线程中创建新的线程对象。Java语言使用Thread类及其子类的对象来表示线程，在它的一个完整的生命周期中通常要经历如下的五种状态\",\"新建：当一个Thread类或其子类的对象被声明并创建时，新生的线程对象处于新建状态\",\"就绪：处于新建状态的线程被start()后，将进入线程队列等待CPU时间片，此时它已具备了运行的条件，只是没分配到CPU资源\",\"运行：当就绪的线程被调度并获得CPU资源时,便进入运行状态， run()方法定义了线程的操作和功能\",\"阻塞：在某种特殊情况下，被人为挂起或执行输入输出操作时，让出 CPU 并临时中止自己的执行，进入阻塞状态\",\"死亡：线程完成了它的全部工作或线程被提前强制性地中止或出现异常导致结束\"]},\"1750\":{\"h\":\"2. 线程的生命周期图解\",\"t\":[\"5-3-1\"]},\"1751\":{\"h\":\"5-4. 安全与同步\"},\"1752\":{\"h\":\"Ⅰ. 线程安全问题\"},\"1753\":{\"h\":\"1. 线程的安全问题概述\",\"t\":[\"当多个线程操作同一个数据时，有可能发生，数据更新不及时，导致a线程更新完数据后，b线程拿到的是老数据，没有及时拿到新数据。\"]},\"1754\":{\"h\":\"2. 示例1：消费问题\",\"t\":[\"假设有一个银行账户里有3000元，A使用该账户消费2000元，支付时，系统进行if判断，钱的数目是够的，于是进入了确认支付环节。同时B也使用该账户进行消费2000元，支付时，系统也进行了判断，钱的数目是够的。A和B同时通过了if判断，都还没有更新数据，此时，A支付成功了，B却不会重新进行if判断，这时就产生了线程安全问题。\"]},\"1755\":{\"h\":\"3. 示例2：卖票问题\",\"t\":[\"模拟火车站售票程序，有三个窗口售票（电子打印）。\",\"问题1-出现重复票：当多个买票程序同时通过是否有票的验证，验证通过时，都进行票据的打印，然后才跟着票号--，就会出现打印的是同一张票的情况。\",\"问题2-多打印：当只剩下一张票，而多个买票程序通过是否有票的判断时，就会出现多打印票的状况。\",\"5-4-1\",\"问题的原因：当多条语句在操作同一个线程共享数据时，一个线程对多条语句只执行了一部分，还没有执行完，另一个线程参与进来执行。导致共享数据的错误。\"]},\"1756\":{\"h\":\"4. 解决方案\",\"t\":[\"对多条操作共享数据的语句，只能让一个线程都执行完，在执行过程中，其他线程不可以参与执行。 在Java中，我们通过同步机制，来解决线程的安全问题，同步机制有多种方式\"]},\"1757\":{\"h\":\"5. 线程安全问题代码示例\",\"t\":[\"public class OneTest { public static void main(String[] args) { MyRunnable mr1 = new MyRunnable(); Thread t1 = new Thread(mr1); t1.start(); Thread t2 = new Thread(mr1); t2.start(); } } class MyRunnable implements Runnable{ private int num = 100; public void run() { while(true){ if(num>0){ System.out.println(\\\"子线程：\\\"+Thread.currentThread().getName()+\\\"--\\\"+num); num--; }else{ break; } } } } //效果：多次执行，发现会出现重复数字，小于0的数字，且数字不是完全递减的。 \"]},\"1758\":{\"h\":\"Ⅱ. 同步代码块\",\"t\":[\"同步代码块可以解决线程安全问题。\"]},\"1759\":{\"h\":\"1. 同步代码块说明\",\"t\":[\"public void run(){ synchronized(同步监视器){ //需要被同步的代码块..操作共享数据的代码 } } \",\"操作共享数据的代码：即为需要被同步的代码。-->不能包含代码多了，也不能包含代码少了。\",\"共享数据：多个线程共同操作的变量。\",\"同步监视器 \",\"俗称：锁。任何一个类的对象，都可以充当锁。\",\"要求：多个线程必须要共用同一把锁。\",\"补充：在实现Runnable接口创建多线程的方式中，我们可以考虑使用this充当同步监视器，但是要注意，在继承Thread类创建多线程的方式中，慎用this充当同步监视器，考虑使用当前类充当同步监视器。\"]},\"1760\":{\"h\":\"2. 买票问题解决示例\",\"t\":[\"public class RunnableTest { public static void main(String[] args) { MyRunnable m1 = new MyRunnable(); Thread t1 = new Thread(m1); Thread t2 = new Thread(m1); Thread t3 = new Thread(m1); t1.start(); t2.start(); t3.start(); } } class MyRunnable implements Runnable{ private int num = 100; //private static Object obj = new Object(); @Override public void run() { while (true) { synchronized(this) { //创建一个obj也可以 if (num > 0) { System.out.println(Thread.currentThread().getName()+ num); num--; } else { break; } } } } } \"]},\"1761\":{\"h\":\"2.1 执行效果\",\"t\":[\"num的值从100~1有序递减，且不存在重复和过界的数字。\"]},\"1762\":{\"h\":\"2.2 注意synchronized的位置\",\"t\":[\"如上，synchronize即不能包的代码多了，也不能包的代码少了。\",\"包的少了，还是会出现线程安全问题，包的多了可能会产生意外的错误，如上，假如把while(true)也包含在内，那么一个线程拿到锁，就会走完所有循环，多线程就失去意义了。\"]},\"1763\":{\"h\":\"3. 处理继承Thread类的线程安全问题\",\"t\":[\"继承Thread类实现多线程的方式和实现Runnable接口是不同的，因为Thread类会通过创建多个Thread类的子类来作为线程对象。每个对象的成员变量都是独立的，因此要注意以下两点：\",\"将成员变量设置成static。\",\"将同步监视器也设置成static类，（不要用this），或者使用.class类[反射：类也是对象]。\",\"private static int num = 100; private static Object obj = new Object(); MyThread.class //类也可以作为对象 \"]},\"1764\":{\"h\":\"Ⅲ. 同步方法\"},\"1765\":{\"h\":\"1. 同步方法说明\",\"t\":[\"synchronized 还可以放在方法声明中，表示整个方法为同步方法\",\"如果操作共享数据的代码完整的声明在一个方法中，我们不妨将此方法声明同步的。\",\"注意：同步方法仍然涉及到同步监视器，只是不需要我们显式的声明。\",\"public synchronized void run(){}; \"]},\"1766\":{\"h\":\"1.1 Runnable实现的：同步监视器\",\"t\":[\"Runnable实现的方式中，默认this是同步监视器\"]},\"1767\":{\"h\":\"1.2 继承Thread类的：同步监视器\",\"t\":[\"同理，this表示的是对象，继承Thread的线程对象，每个线程都会创建一个对象，每个对象的的同步方法都是独立的，同步监视器表示是各自的对象。\",\"解决方案：将同步方法设置为静态方法（此时就变成类调用该方法了，类也是一个对象）。\"]},\"1768\":{\"h\":\"2. 买票问题解决示例\",\"t\":[\"public class RunnableTest { public static void main(String[] args) { MyRunnable m1 = new MyRunnable(); Thread t1 = new Thread(m1); Thread t2 = new Thread(m1); Thread t3 = new Thread(m1); t1.start(); t2.start(); t3.start(); } } class MyRunnable implements Runnable{ private int num = 100; // final Object obj = new Object(); @Override public void run() { while (true) { getNum(); } } //因为while(true)，不能包裹，所以把while(true)里面的代码提取出来声明成同步方法，再调用 public synchronized void getNum(){ if (num > 0) { System.out.println(Thread.currentThread().getName() + \\\"***\\\" + num); num--; }else{ //stop()已经被废弃了，但是这里如果不stop,线程就不会结束,因为while一直在执行。 Thread.currentThread().stop(); } } } \"]},\"1769\":{\"h\":\"3. 解决懒汉式单例模式的线程安全问题\",\"t\":[\"详见单例模式；\",\"安全问题解析：当线程通过instance == null的判断后，可能会发生阻塞，这时将会有多个线程进来，从而创造了多个对象。\",\"解决方案：使用同步方法解决。\",\"class Order{ //1.私有化类的构造器 private Order(){} //2.声明当前类对象，没有初始化 //4.此对象也必须声明为static的 private static Order instance = null; //3.声明 public、static的返回当前类对象的方法 //方式1：将synchronize声明在getInstance处：效率低 public static synchronized Order getInstance(){ if(instance == null){ instance = new Order(); } return instance; } //方式2：高效率的修改 public static Order getInstance(){ if(instance == null){ synchronized(Order.class){ if(instance == null){ instance = new Order(); } } return instance } } \"]},\"1770\":{\"h\":\"3.1 高效修改的逻辑\",\"t\":[\"在方式一，当把synchronize声明在方法最外层时，每当有线程进去，其他线程都要进行等待，哪怕对象已经创建好了。如果一个线程阻塞了，其他线程都需要在后面排队，如果instance真的==null，无可厚非，但如果不是，不如直接return instance。\",\"改进的方案：将syschronized声明在if里面，一旦判断instance不是null，直接返回对象，如果是null，在进行synchronized，这个方法立面再加一层if判断，保证线程安全。\"]},\"1771\":{\"h\":\"4. 同步原理和总结\",\"t\":[\"将需要同步的数据放入synchronized包裹的方法中，当线程进入synchronized中时，该线程将拿到锁，此时synchronized变成上锁状态，其他线程需要等待，等线程执行完synchronized中的代码后，锁就被去掉，所有线程开始重新争抢这把锁。这种上锁的方式保证了线程的安全性。\",\"5-4-2\"]},\"1772\":{\"h\":\"4.1 同步机制中的锁\",\"t\":[\"需要某种方式来防止两个任务访问相同的资源（其实就是共享资源竞争）。 防止这种冲突的方法就是当资源被一个任务使用时，在其上加锁。第一个访问某项资源的任务必须锁定这项资源，使其他任务在其被解锁之前，就无法访问它了，而在其被解锁之时，另一个任务就可以锁定并使用它了。\",\"注意： 一个线程类中的所有静态方法共用同一把锁（类名.class），所有非静态方法共用同一把锁（this），同步代码块（指定需谨慎）\"]},\"1773\":{\"h\":\"4.2 同步的范围\",\"t\":[\"明确哪些代码是多线程运行的代码；明确多个线程是否有共享数据；明确多线程运行代码中是否有多条语句操作共享数据\",\"对多条操作共享数据的语句，只能让一个线程都执行完，在执行过程中，其他线程不可以参与执行。即所有操作共享数据的这些语句都要放在同步范围中\",\"注意： 范围太小：没锁住所有有安全问题的代码；范围太大：没发挥多线程的功能。\"]},\"1774\":{\"h\":\"4.3 释放锁的操作\",\"t\":[\"当前线程的同步方法、同步代码块执行结束。\",\"当前线程在同步代码块、同步方法中遇到break、return终止了该代码块、该方法继续执行。\",\"当前线程在同步代码块、同步方法中出现了未处理的Error或Exception，导致异常结束。\",\"当前线程在同步代码块、同步方法中执行了线程对象的wait()方法，当前线程暂停，并释放锁\"]},\"1775\":{\"h\":\"4.4 不会释放锁的操作\",\"t\":[\"线程执行同步代码块或同步方法时，程序调用Thread.sleep()、Thread.yield()方法暂停当前线程的执行\",\"线程执行同步代码块时，其他线程调用了该线程的suspend()方法将该线程挂起，该线程不会释放锁（同步监视器）。\",\"注意：应尽量避免使用suspend()和resume()来控制线程\"]},\"1776\":{\"h\":\"5. 同步方式的优缺点\",\"t\":[\"优点：完全解决了线程的安全问题 缺点：操作同步代码时，只能有一个线程参与，其他线程等待。相当于是一个单线程的过程，效率低。\"]},\"1777\":{\"h\":\"Ⅳ. Lock锁\",\"t\":[\"Lock锁方式也可以解决线程安全问题\"]},\"1778\":{\"h\":\"1. 说明\",\"t\":[\"从JDK 5.0开始，Java提供了更强大的线程同步机制——通过显式定义同步锁对象来实现同步。同步锁使用Lock对象充当。\",\"java.util.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应先获得Lock对象。\"]},\"1779\":{\"h\":\"2. Lock的优点\",\"t\":[\"使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（提供更多的子类）\"]},\"1780\":{\"h\":\"3. ReentrantLock类\",\"t\":[\"ReentrantLock 类实现了 Lock ，它拥有与 synchronized 相同的并发性和内存语义，可以显式加锁、释放锁。\",\"class A{ private final ReentrantLock lock = new ReenTrantLock(); public void m(){ lock.lock(); try{ // 被保证线程安全的代码; } finally{ lock.unlock(); } } } \"]},\"1781\":{\"h\":\"3.1 构造函数\",\"t\":[\"接收一个boolean参数，默认是false，true表示公平的多线程\",\"true：多个线程安装1:1的几率执行run方法\",\"false：多个线程安装CPU的调度执行run方法\",\"public ReenTrantLock(Boolean false); \"]},\"1782\":{\"h\":\"3.2 加锁\",\"t\":[\"lock.lock(); \"]},\"1783\":{\"h\":\"3.3 释放锁\",\"t\":[\"注意：如果同步代码有异常，要将unlock()写入finally语句块\",\"lock.unlock(); \"]},\"1784\":{\"h\":\"4. 使用示例\",\"t\":[\"package ThreadSafety; import java.util.concurrent.locks.ReentrantLock; public class ReinTyrantTest { public static void main(String[] args) { Test test = new Test(); Thread t1 = new Thread(test); Thread t2 = new Thread(test); Thread t3 = new Thread(test); t1.start(); t2.start(); t3.start(); } } class Test implements Runnable{ private int num = 100; private ReentrantLock lock = new ReentrantLock(true); @Override public void run() { while(true){ try { lock.lock(); if (num > 0) { System.out.println(Thread.currentThread().getName() + \\\"@\\\" + num); num--; } else { lock.unlock(); break; } }finally{ lock.unlock(); } } } } \"]},\"1785\":{\"h\":\"5. synchronized与lock的对比\",\"t\":[\"相同点：都可以解决线程安全问题\",\"不用点 \",\"Lock是显式锁（手动开启和关闭锁，别忘记关闭锁），synchronized是隐式锁，出了作用域自动释放\",\"Lock只有代码块锁，synchronized有代码块锁和方法锁\"]},\"1786\":{\"h\":\"6. 三种线程安全方式的优先使用顺序\",\"t\":[\"Lock>同步代码块（已经进入了方法体，分配了相应资源）->同步方法（在方法体之外）\"]},\"1787\":{\"h\":\"5-5. 线程的死锁\",\"t\":[\"我们使用同步时，要避免出现死锁。很多死锁都是很隐蔽，有时根本发现不了。\"]},\"1788\":{\"h\":\"1. 死锁介绍\",\"t\":[\"不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁。\",\"出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于阻塞状态，无法继续。\"]},\"1789\":{\"h\":\"2. 解决方法\",\"t\":[\"专门的算法、原则；\",\"尽量减少同步资源的定义；\",\"尽量避免嵌套同步\",\"加锁时限（线程尝试获取锁的时候加上一定的时限，超过时限则放弃对该锁的请求，并释放自己占有的锁）\",\"死锁检测\"]},\"1790\":{\"h\":\"3. 死锁示例\",\"t\":[\"例如，某计算机系统中只有一台打印机和一台输入 设备，进程P1正占用输入设备，同时又提出使用打印机的请求，但此时打印机正被进程P2 所占用，而P2在未释放打印机之前，又提出请求使用正被P1占用着的输入设备。这样两个进程相互无休止地等待下去，均无法继续执行，此时两个进程陷入死锁状态。\"]},\"1791\":{\"h\":\"4. 死锁产生的具体原因\"},\"1792\":{\"h\":\"4.1 系统资源的竞争\",\"t\":[\"通常系统中拥有的不可剥夺资源，其数量不足以满足多个进程运行的需要，使得进程在运行过程中，会因争夺资源而陷入僵局。\"]},\"1793\":{\"h\":\"4.2 进程推进顺序非法\",\"t\":[\"进程在运行过程中，请求和释放资源的顺序不当，也同样会导致死锁。\",\"例如，并发进程 P1、P2分别保持了资源R1、R2，而进程P1申请资源R2，进程P2申请资源R1时，两者都会因为所需资源被占用而阻塞。\"]},\"1794\":{\"h\":\"4.3 总结\",\"t\":[\"产生死锁可能性的最根本原因是：线程在获得一个锁L1的情况下再去申请另外一个锁L2，也就是锁L1想要包含了锁L2，也就是说在获得了锁L1，并且没有释放锁L1的情况下，又去申请获得锁L2，这个是产生死锁的最根本原因。另一个原因是默认的锁申请操作是阻塞的。\"]},\"1795\":{\"h\":\"5. 死锁的实例：嵌套锁\",\"t\":[\"public class ThreadTest { public static void main(String[] args) { StringBuffer s1 = new StringBuffer(); StringBuffer s2 = new StringBuffer(); new Thread(){ @Override public void run() { synchronized (s1){ s1.append(\\\"a\\\"); s2.append(\\\"1\\\"); try { Thread.sleep(100); } catch (InterruptedException e) { e.printStackTrace(); } synchronized (s2){ s1.append(\\\"b\\\"); s2.append(\\\"2\\\"); System.out.println(s1); System.out.println(s2); } } } }.start(); new Thread(new Runnable() { @Override public void run() { synchronized (s2){ s1.append(\\\"c\\\"); s2.append(\\\"3\\\"); try { Thread.sleep(100); } catch (InterruptedException e) { e.printStackTrace(); } synchronized (s1){ s1.append(\\\"d\\\"); s2.append(\\\"4\\\"); System.out.println(s1); System.out.println(s2); } } } }).start(); } } \"]},\"1796\":{\"h\":\"5.1 死锁解析\",\"t\":[\"线程1：将s1作为锁，发生阻塞，然后再将s2作为锁，\",\"线程2：将s2作为锁，发生阻塞，然后再将s1作为锁，\",\"当s1和s2同时结束阻塞准备拿下一个锁的时候，发现自己需要的锁，被占着者，于是只能等待，这就形成了死锁。\"]},\"1797\":{\"h\":\"5.2 锁的补充\",\"t\":[\"锁（对象）只有释放了，才能被其他线程拿到，无论这两个线程是否属于同一对象。\"]},\"1798\":{\"h\":\"5-6. 线程的通信\",\"t\":[\"线程的通信指的是多个线程之间的交流。\",\"比如，使用两个线程打印 1-100。线程1, 线程2 交替打印\"]},\"1799\":{\"h\":\"1. 线程通信涉及到的方法\",\"t\":[\"注意：这三个方法只有在synchronized方法或synchronized代码块中才能使用，否则会报 java.lang.IllegalMonitorStateException异常。\",\"wait：一旦执行此方法，当前线程就进入阻塞状态，并释放同步监视器。 \",\"令当前线程挂起并放弃CPU、同步资源并等待，使别的线程可访问并修改共享资源，而当前线程排队等候其他线程调用notify()或notifyAll()方法唤醒，唤醒后等待重新获得对监视器的所有权后才能继续执行。\",\"notify：一旦执行此方法，就会唤醒被wait的一个线程。如果有多个线程被wait，就唤醒优先级高的那个。\",\"notifyAll：一旦执行此方法，就会唤醒所有等待的线程。\"]},\"1800\":{\"h\":\"2. wait()使用说明\",\"t\":[\"在当前线程中调用方法： 对象名.wait()；\",\"使当前线程进入等待（某对象）状态 ，直到另一线程对该对象发出 notify(或notifyAll) 为止。\",\"调用方法的必要条件：当前线程必须具有对该对象的监控权（加锁）\",\"调用此方法后，当前线程将释放对象监控权\",\"在当前线程被notify后，要重新获得监控权，然后从断点处继续代码的执行。\"]},\"1801\":{\"h\":\"3. notify()、notifyAll()使用说明\",\"t\":[\"在当前线程中调用方法： 对象名.notify()\",\"功能：唤醒等待该对象监控权的一个/所有线程。\",\"调用方法的必要条件：当前线程必须具有对该对象的监控权（加锁）\"]},\"1802\":{\"h\":\"4. 补充说明\",\"t\":[\"wait()，notify()，notifyAll()三个方法必须使用在同步代码块或同步方法中。\",\"wait()，notify()，notifyAll()三个方法的调用者必须是同步代码块或同步方法中的同步监视器。否则，会出现IllegalMonitorStateException异常\",\"wait()，notify()，notifyAll()三个方法是定义在java.lang.Object类中。\"]},\"1803\":{\"h\":\"5. sleep()和wait()的异同\",\"t\":[\"相同点：一旦执行方法，都可以使得当前的线程进入阻塞状态。\",\"不同点 \",\"两个方法声明的位置不同：Thread类中声明sleep() , Object类中声明wait()\",\"用的要求不同：sleep()可以在任何需要的场景下调用。 wait()必须使用在同步代码块或同步方法中\",\"关于是否释放同步监视器：如果两个方法都使用在同步代码块或同步方法中，sleep()不会释放锁，wait()会释放锁。\"]},\"1804\":{\"h\":\"6. 线程的通信实例\",\"t\":[\"使用两个线程打印 1-100。线程1, 线程2 交替打印\",\"public class WaitTest { public static void main(String[] args) { NumTest nt1 = new NumTest(); Thread t1 = new Thread(nt1); Thread t2 = new Thread(nt1); t1.start(); t2.start(); } } class NumTest implements Runnable{ private int num = 1; @Override public void run() { while(true) { synchronized (this) { notify(); //将被wait的线程重新激活 if (num <= 100) { System.out.println(Thread.currentThread().getName() + \\\"@\\\" + num); num++; try { wait();//当前线程被阻塞，并释放锁 } catch (InterruptedException e) { e.printStackTrace(); } } else { break; } } } } } \"]},\"1805\":{\"h\":\"5-7. 线程池\"},\"1806\":{\"h\":\"Ⅰ. Callable接口\",\"t\":[\"实现Callable接口是JDK5.0新增的一种方式，他比实现Runnable接口更强大。\"]},\"1807\":{\"h\":\"1. Callable接口介绍\",\"t\":[\"通过实现Callable接口，并重写call()来创建多线程，相当于Runnable接口，Callable接口更加强大，有如下优势：\",\"call()相当于run()，可以有返回值\",\"call()可以抛出异常\",\"支持泛型\"]},\"1808\":{\"h\":\"2. Future接口介绍\",\"t\":[\"Callable接口的实例，需要借助FutureTask类，进行其他操作，比如：获取返回结果\",\"FutrueTask是Futrue接口的唯一的实现类\",\"可以对具体Runnable、Callable任务的执行结果进行取消、查询是否完成、获取结果等。\",\"FutureTask 同时实现了Runnable, Future接口。它既可以作为Runnable被线程执行，又可以作为Future得到Callable的返回值\"]},\"1809\":{\"h\":\"3. 使用Callable新增线程的步骤\",\"t\":[\"①创建一个实现Callable的实现类\",\"②实现call方法，将此线程需要执行的操作声明在call()中\",\"③创建Callable接口实现类的对象\",\"④将此Callable接口实现类的对象作为参数传递到FutureTask构造器中，创建FutureTask的对象\",\"⑤将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象，并调用start()\",\"⑥获取Callable中call方法的返回值：get()返回值即为FutureTask构造器参数Callable实现类重写的call()的返回值。\"]},\"1810\":{\"h\":\"4. 示例\",\"t\":[\"1.//创建一个实现Callable的实现类 class NumSum implements Callable { private int num = 100; @Override 2.//实现call方法，将此线程需要执行的操作声明在call()中 public Object call() throws Exception { int sum = 0; for(int i=0;i<=num;i++){ System.out.println(Thread.currentThread().getName()+\\\"#\\\"+i); sum += i; } return sum; } } public class CallableTest { public static void main(String[] args) { 3.//创建Callable接口实现类的对象 NumSum ns = new NumSum(); 5.//将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象 FutureTask ft = new FutureTask(ns); Thread t1 = new Thread(ft); t1.start();//调用start方法，开启线程 try { 6.//获取Callable中call方法的返回值 System.out.println(\\\"总和为\\\"+ft.get()); } catch (InterruptedException e) { e.printStackTrace(); } catch (ExecutionException e) { e.printStackTrace(); } } } \"]},\"1811\":{\"h\":\"Ⅱ. 线程池\"},\"1812\":{\"h\":\"1. 线程池介绍\",\"t\":[\"开发中，框架用的就是线程池，我们只管用就行\",\"背景：经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，对性能影响很大。\",\"思路：提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。类似生活中的公共交通工具。\"]},\"1813\":{\"h\":\"2. 线程池的优点\",\"t\":[\"提高响应速度（减少了创建新线程的时间）\",\"降低资源消耗（重复利用线程池中线程，不需要每次都创建）\",\"便于线程管理 \",\"corePoolSize：核心池的大小\",\"maximumPoolSize：最大线程数\",\"keepAliveTime：线程没有任务时最多保持多长时间后会终止\",\"…\"]},\"1814\":{\"h\":\"3. ExcutorService：线程池接口\",\"t\":[\"常见子类ThreadPoolExecutor\",\"void execute(Runnable command) ：执行任务/命令，没有返回值，一般用来执行Runnable\",\"<T> Future<T> submit(Callable<T> task)：执行任务，有返回值，一般用来执行Callable\",\"void shutdown() ：关闭连接池\"]},\"1815\":{\"h\":\"4. Executors：线程池工具类、工厂类\",\"t\":[\"用于创建并返回不同类型的线程池\",\"Executors.newCachedThreadPool()：创建一个可根据需要创建新线程的线程池\",\"Executors.newFixedThreadPool(n); 创建一个可重用固定线程数的线程池\",\"Executors.newSingleThreadExecutor() ：创建一个只有一个线程的线程池\",\"Executors.newScheduledThreadPool(n)：创建一个线程池，它可安排在给定延迟后运行命令或者定期地执行。\"]},\"1816\":{\"h\":\"5. 使用线程池步骤\",\"t\":[\"创建线程池：需要用到Executors工厂类\",\"可选：设置线程池属性，需要使用ExecutorService接口的子类\",\"指定线程的操作：使用execute或submit进行操作，需要提供实现Runnable接口或Callable接口实现类的对象做参数\",\"关闭连接池\"]},\"1817\":{\"h\":\"6. 示例\",\"t\":[\"public class ThreadPool { public static void main(String[] args) { 1.//创建线程池：使用创建指定线程数量的方法。 ExecutorService service = Executors.newFixedThreadPool(10); 2.//将线程池接口类型转为接口的子类类型，方便设置线程属性 ThreadPoolExecutor real_service = (ThreadPoolExecutor) service; real_service.setCorePoolSize(15); 3.//执行指定的线程的操作 real_service.execute(new PrintSum()); 4.//关闭连接池 real_service.shutdown(); } } class PrintSum implements Runnable{ @Override //线程需要完成的操作 public void run() { for(int i=0;i<100;i++){ System.out.println(Thread.currentThread().getName()+\\\"@\\\"+i); } } } \"]},\"1818\":{\"h\":\"6-1. 集合概述\"},\"1819\":{\"h\":\"Ⅰ. 集合概述\"},\"1820\":{\"h\":\"1. 集合的由来\",\"t\":[\"面向对象语言对事物的体现都是以对象的形式，为了方便对多个对象的操作，就要对对象进行存储。使用Array在存储对象方面具有 一些弊端，而Java 集合就像一种容器，可以动态地把多个对象的引用放入容器中。\",\"**容器：**集合、数组都是对多个数据进行存储操作的结构，简称Java容器。此时的存储，主要指的是内存层面的存储，不涉及到持久化的存储。\"]},\"1821\":{\"h\":\"2. 数组在Java内存储存方面的特点\",\"t\":[\"一旦初始化以后，其长度就确定了。\",\"数组一旦定义好，其元素的类型也就确定了。我们也就只能操作指定类型的数据了。 \",\"比如：String[] arr;int[] arr1;Object[] arr2;\"]},\"1822\":{\"h\":\"3. 数组在储存数据方面的弊端\",\"t\":[\"一旦初始化以后，其长度就不可修改。\",\"数组中提供的方法非常有限，对于添加、删除、插入数据等操作，非常不便，同时效率不高。\",\"获取数组中实际元素的个数的需求，数组没有现成的属性或方法可用\",\"数组存储数据的特点：有序、可重复。对于无序、不可重复的需求，不能满足。\"]},\"1823\":{\"h\":\"4. 集合的特点\",\"t\":[\"提示\",\"关联数组：在其他语言中是有关联数组的，K-V键值对，Java中没有关联数组，可以用集合取代。\",\"数组的弊端，集合都解决了。\",\"Java 集合类可以用于存储数量不等的多个对象，还可用于保存具有映射关系的关联数组。\"]},\"1824\":{\"h\":\"5. 集合的使用场景\",\"t\":[\"数组和集合都是容器，但是开发中，凡是涉及到对多个数据进行操作时，一般用集合。\",\"能用集合就用集合，除非要求用数组。集合出现的目的，就是取代数组。\"]},\"1825\":{\"h\":\"Ⅱ. 集合框架\"},\"1826\":{\"h\":\"1. 集合框架的体系\",\"t\":[\"Java 集合可分为 Collection 和 Map 两种体系\",\"Collection 接口 ：单列数据，定义了存取一组对象的方法的集合 \",\"List： 存储有序的、可重复的数据。 -->“动态”数组 \",\"ArrayList、LinkedList、Vector\",\"Set： 存储无序的、不可重复的数据 -->数学里的“集合” \",\"HashSet、LinkedHashSet、TreeSet\",\"Map 接口：双列数据，保存具有映射关系“key-value对”的集合-->存储无序的、不可重复的数据 -->数学中的\\\"函数\\\" \",\"HashMap、LinkedHashMap、TreeMap、Hashtable、Properties\"]},\"1827\":{\"h\":\"2. Collection接口继承图\",\"t\":[\"6-1-1\"]},\"1828\":{\"h\":\"3. Map接口继承图\",\"t\":[\"6-1-2\"]},\"1829\":{\"h\":\"6-2. Collection\"},\"1830\":{\"h\":\"说明\",\"t\":[\"Collection 接口是 List、Set 和 Queue 接口的父接口，该接口里定义的方法既可用于操作 Set 集合，也可用于操作 List 和 Queue 集合。\",\"JDK不提供此接口的任何直接实现，而是提供更具体的子接口(如：Set和List)实现。\",\"从 JDK 5.0 增加了 泛型以后，Java 集合可以记住容器中对象的数据类型（而非都当成obj）。\",\"下面的方法测试，都是以实现类做测试的（抽象方法，无法执行）。\"]},\"1831\":{\"h\":\"实例化\",\"t\":[\"实际开发中，根据需求选择合适的子类，这些子类的方法都是一样的。\",\"Collection coll = new ArrayList(); //用实现类进行实例化 System.out.println(coll); //[],一个空的集合 \"]},\"1832\":{\"h\":\"Collection接口的方法\",\"t\":[\"详见：内置函数>Collection+\"]},\"1833\":{\"h\":\"6-3. Iterator\"},\"1834\":{\"h\":\"Ⅰ. Iterator 接口\",\"t\":[\"Iterator是个迭代器接口，用于集合元素的遍历。\"]},\"1835\":{\"h\":\"1. 迭代器\",\"t\":[\"GOF给迭代器模式(设计模式的一种)的定义为：提供一种方法访问一个容器(container)对象中各个元素，而又不需暴露该对象的内部细节。 迭代器模式，就是为容器而生。\",\"Iterator对象称为迭代器(设计模式的一种)，主要用于遍历 Collection 集合中的元素。\"]},\"1836\":{\"h\":\"2. iterator方法和Iterator对象\",\"t\":[\"Collection接口继承了java.lang.Iterable接口，该接口有一个iterator()方法，那么所有实现了Collection接口的集合类都有一个iterator()方法，用以返回一个实现了Iterator接口的对象。\",\"Iterator对象称为迭代器，主要用于遍历 Collection 集合中的元素。\",\"Map集合的元素，不使用Iterator遍历。\"]},\"1837\":{\"h\":\"3. iterator对象\",\"t\":[\"Iterator 仅用于遍历集合，Iterator 本身并不提供承装对象的能力。如果需要创建Iterator 对象，则必须有一个被迭代的集合\",\"集合对象每次调用iterator()方法都得到一个全新的迭代器对象，默认游标都在集合的第一个元素之前。\"]},\"1838\":{\"h\":\"4. 遍历方法\",\"t\":[\"详见：内置函数>Collection+\"]},\"1839\":{\"h\":\"4.1 指针（游标）\",\"t\":[\"iterator对象有一个指针，指向集合中的某个元素。对于一个全新的迭代器，他的指针在第一个元素之前，每次执行一次next方法，指针就往后移动一次。\"]},\"1840\":{\"h\":\"4.2 next()\",\"t\":[\"iterator.next()用来向后移动一次指针，并取出指针指向的集合元素，进行返回。\",\"注意：当指针已经指向最后时，就不能再调用next方法了，会抛出异常，且取完数据后，指针就会呆在集合末尾，不会自动重置。\"]},\"1841\":{\"h\":\"4.3 hashNext()\",\"t\":[\"用来判断指针后面还有没有集合元素。\"]},\"1842\":{\"h\":\"5. 进行遍历\",\"t\":[\"//1.创建集合对象,并添加元素 Collection coll = new ArrayList(); coll.add(123); coll.add(\\\"aa\\\"); coll.add(new Person(\\\"jinno\\\",20)); //2.创建Iterator对象,准备遍历 Iterator it = coll.iterator(); \"]},\"1843\":{\"h\":\"5.1 手动遍历【不使用，仅演示】\",\"t\":[\"System.out.println(it.next()); //123 System.out.println(it.next()); //aa System.out.println(it.next()); //day04.Person@1b6d3586 //没有数据，继续next,报异常 System.out.println(it.next()); \"]},\"1844\":{\"h\":\"5.2 for循环遍历【不推荐，仅演示】\",\"t\":[\"for(int i=0;i<coll.size();i++){ System.out.println(it.next()); } \"]},\"1845\":{\"h\":\"5.3 while+hasNext遍历【推荐】\",\"t\":[\"在调用it.next()方法之前必须要调用it.hasNext()进行检测。若不调用，且下一条记录无效，直接调用it.next()会抛出NoSuchElementException异常\",\"while(it.hasNext()){ System.out.println(it.next()); } \"]},\"1846\":{\"h\":\"6. 迭代器执行的原理\",\"t\":[\"6-3-1\"]},\"1847\":{\"h\":\"7. 遍历的注意事项\",\"t\":[\"每次调用iterator方法，都会返回一个全新的迭代器，指针指向第一个元素前面\",\"取完数据后，指针不会重置，再调用next()会抛异常，想再遍历就重新获得迭代器\"]},\"1848\":{\"h\":\"8. remove：移除元素\",\"t\":[\"remove方法用来在遍历的时候，删除集合中的元素。此方法不同于集合直接调用remove()。\",\"注意：如果还未调用next()或在上一次调用 next 方法之后已经调用了 remove 方法，再调用remove都会报IllegalStateException。\",\"while(it.hasNext()){ Object obj = it.next(); if(\\\"aa\\\".equals(obj)){ it.remove(); } } \"]},\"1849\":{\"h\":\"Ⅱ. 增强 for 循环\"},\"1850\":{\"h\":\"1. 介绍\",\"t\":[\"jdk 5.0 新增了foreach循环(又称增强for循环)，用于遍历集合、数组。\",\"遍历操作不需获取Collection或数组的长度，无需使用索引访问元素。 遍历集合的底层调用Iterator完成操作。\"]},\"1851\":{\"h\":\"2. 示例：遍历集合\",\"t\":[\"for(集合元素的类型 局部变量 : 集合对象)\",\"Collection coll = new ArrayList(); coll.add(123); coll.add(\\\"aa\\\"); coll.add(new Person(\\\"jinno\\\",20)); //for(集合元素的类型 局部变量 : 集合对象) for(Object obj : coll){ System.out.println(obj); } \"]},\"1852\":{\"h\":\"3. 示例：遍历数组\",\"t\":[\"for(数组元素的类型 局部变量 : 数组对象)\",\"int[] arr = new int[]{1,2,3,4,5,6}; //for(数组元素的类型 局部变量 : 数组对象) for(int i : arr){ System.out.println(i); } \"]},\"1853\":{\"h\":\"4. 练习：for循环与增强for循环的对比\",\"t\":[\"重点：增强for循环中，是把值赋给了局部变量。\"]},\"1854\":{\"h\":\"4.1 普通for循环\",\"t\":[\"String[] arr = new String[]{\\\"MM\\\",\\\"MM\\\",\\\"MM\\\"}; for(int i = 0;i < arr.length;i++){ arr[i] = \\\"GG\\\"; } for(int i = 0;i < arr.length;i++){ System.out.println(arr[i]); //输出的都是 GG } \"]},\"1855\":{\"h\":\"4.2 增强for循环\",\"t\":[\"String[] arr = new String[]{\\\"MM\\\",\\\"MM\\\",\\\"MM\\\"}; for(String s : arr){ s = \\\"GG\\\"; } for(int i = 0;i < arr.length;i++){ System.out.println(arr[i]); //输出的都是MM } \"]},\"1856\":{\"h\":\"6-4. List\"},\"1857\":{\"h\":\"Ⅰ. List 接口\"},\"1858\":{\"h\":\"1. 介绍\",\"t\":[\"List接口为Collection接口的子接口，常称为：动态数组\",\"鉴于Java中数组用来存储数据的局限性，我们通常使用List替代数组；\",\"List集合类中元素有序、且可重复，集合中的每个元素都有其对应的顺序索引。\",\"List容器中的元素都对应一个整数型的序号记载其在容器中的位置，可以根据序号存取容器中的元素。\"]},\"1859\":{\"h\":\"2. List接口的实现类\",\"t\":[\"List接口是Collection的子接口，该接口有三个实现类\",\"Collection 接口 ：单列数据，定义了存取一组对象的方法的集合 \",\"List： 存储有序的、可重复的数据。 -->“动态”数组 \",\"ArrayList、LinkedList、Vector\"]},\"1860\":{\"h\":\"2.1 ArrayList 【主要使用】\",\"t\":[\"作为List接口的主要实现类；一般情况下用这个\",\"线程不安全的，效率高；\",\"底层使用Object[] elementData存储\"]},\"1861\":{\"h\":\"2.2 LinkedList\",\"t\":[\"对于频繁的插入、删除操作，使用此类效率比ArrayList高；\",\"底层使用双向链表存储。\"]},\"1862\":{\"h\":\"2.3 Vector\",\"t\":[\"作为List接口的古老实现类；\",\"线程安全的，效率低；\",\"底层使用Object[] elementData存储\"]},\"1863\":{\"h\":\"Ⅱ. 源码分析\"},\"1864\":{\"h\":\"1. ArrayList源码分析\"},\"1865\":{\"h\":\"1.1 构造器\",\"t\":[\"底层创建了长度是10的Object[]数组elementData\",\"ArrayList list = new ArrayList(); \"]},\"1866\":{\"h\":\"1.2 add操作\",\"t\":[\"List.add(123); //相当于 elementData[0] = new Interger(123); \"]},\"1867\":{\"h\":\"1.3 扩容\",\"t\":[\"如果此次的添加导致底层elementData数组容量不够，则扩容。默认情况下，扩容为原来的容量的1.5倍，同时需要将原有数组中的数据复制到新的数组中。\",\"......//连续添加10次数据 list.add(11);//第11次添加数据 \"]},\"1868\":{\"h\":\"1.4 带参的构造器\",\"t\":[\"扩容是非常消耗资源的，因此尽量不要扩容，建议开发中使用带参的构造器：\",\"ArrayList list = new ArrayList(int capacity);//参数就是容量 \"]},\"1869\":{\"h\":\"1.5 JDK8中，ArrayList的变化\",\"t\":[\"在JDK8时，ArrayList的底层做了一些改变。\",\"初始化时，底层Object[] elementData初始化为{}。并没有创建长度为10的数组，而是在第一次add的时候，底层才创建了长度10的数组，并将数据加到elementData[0]，后续的添加和扩容操作与JDK8之前一样。\",\"ArrayList list = new ArrayList(); //底层是个空的Object[] list.add(123); //第一次调用add(),才真正创建了数组 \"]},\"1870\":{\"h\":\"1.6 总结\",\"t\":[\"jdk7中的ArrayList的对象的创建类似于单例的饿汉式，而jdk8中的ArrayList的对象的创建类似于单例的懒汉式，延迟了数组的创建，节省内存。\"]},\"1871\":{\"h\":\"2. LinkedList\",\"t\":[\"LinkedList是典型的双向链表结构，数据的添加、移除等操作，也是双向链表的基本操作。\"]},\"1872\":{\"h\":\"2.1 实例化\",\"t\":[\"内部声明了Node类型的first（上一个Node）和last（下一个Node）属性，默认值为null\",\"LinkedList list = new LinkedList(); \"]},\"1873\":{\"h\":\"2.2 add添加数据\",\"t\":[\"list.add(123);//将123封装到Node中，创建了Node对象 \"]},\"1874\":{\"h\":\"2.3 Node的定义\",\"t\":[\"体现了LinkedList的双向链表的说法\",\"private static class Node<E> { E item; Node<E> next; Node<E> prev; Node(Node<E> prev, E element, Node<E> next) { this.item = element; this.next = next; this.prev = prev; } } \"]},\"1875\":{\"h\":\"3. Vector\"},\"1876\":{\"h\":\"3.1 说明\",\"t\":[\"Vector已经被放弃了，开发时不会用。\",\"Vector虽然是线程安全的，但是我们需要线程安全问题时，也不用用它，而是使用synchronizedList对ArrayList数据进行处理，取得线程安全的ArrayList。\"]},\"1877\":{\"h\":\"3.2 源码简介\",\"t\":[\"jdk7和jdk8中通过Vector()构造器创建对象时，底层都创建了长度为10的数组。在扩容方面，默认扩容为原来的数组长度的2倍。\"]},\"1878\":{\"h\":\"Ⅲ. List方法\",\"t\":[\"List除了从Collection集合继承的方法外，List 集合里添加了一些根据索引来操作集合元素的方法。并对Collection的很多方法进行了重载。\",\"详见：内置函数>List & Map\"]},\"1879\":{\"h\":\"6-5. Set\"},\"1880\":{\"h\":\"Ⅰ. Set 接口\"},\"1881\":{\"h\":\"1. 介绍\",\"t\":[\"Set接口是Collection的子接口，Set 集合用来储存无序的的不相同的元素（使用equals()判断）。该接口的结构如下：\",\"Collection接口：单列集合，用来存储一个一个的对象 \",\"Set接口：存储无序的、不可重复的数据 -->数学中的“集合” \",\"HashSet：主要实现类 \",\"LinkedHashSet\",\"TreeSet\"]},\"1882\":{\"h\":\"2. Set数据存储的特点\",\"t\":[\"储存无序的，不可重复的数据，以HashSet为例：\",\"无序性：不等于随机性。存储的数据在底层数组中并非按照数组索引的顺序添加，而是根据数据的哈希值决定的。\",\"不可重复性：保证添加的元素按照equals()判断时，不能返回true.即：相同的元素只能添加一个。\"]},\"1883\":{\"h\":\"3. HashSet【主要实现类】\",\"t\":[\"HashSet 是 Set 接口的典型实现，大多数时候使用 Set 集合时都使用这个实现类。\",\"数据结构：数组+链表\",\"HashSet 按 Hash 算法来存储集合中的元素，因此具有很好的存取、查找、删除性能。\",\"Set接口的主要实现类；线程不安全的；可以存储null值\"]},\"1884\":{\"h\":\"3.1 特点\",\"t\":[\"不能保证元素的排列顺序\",\"HashSet 不是线程安全的\",\"集合元素可以是 null\"]},\"1885\":{\"h\":\"3.2 HashSet 集合判断两个元素相等的标准\",\"t\":[\"两个对象通过 hashCode() 方法比较相等，并且两个对象的 equals() 方法返回值也相等。\",\"对于存放在Set容器中的对象， 对应的类一定要重写equals() 和hashCode(Object obj) 方法，以实现对象相等规则 。即： “相等的对象必须具有相等的散列码”\"]},\"1886\":{\"h\":\"4. LinkedHashSet【HashSet的子类】\",\"t\":[\"数据结构：数组+链表\",\"遍历其内部数据时，可以按照添加的顺序遍历\",\"LinkedHashSet插入性能略低于 HashSet，但在迭代访问 Set 里的全部元素时有很好的性能。\",\"LinkedHashSet 根据元素的 hashCode 值来决定元素的存储位置，但它同时使用双向链表维护元素的次序，这使得元素看起来是以插入顺序保存的。\"]},\"1887\":{\"h\":\"5. TreeSet\",\"t\":[\"数据结构：Tree（红黑树）\",\"TreeSet 是 SortedSet 接口的实现类，TreeSet 可以确保集合元素处于排序状态。\",\"TreeSet类新增了很多方法。\",\"可以按照添加对象的指定属性，进行排序。\",\"特点：有序，查询速度比List快\",\"自然排序：TreeSet 会调用集合元素的 compareTo(Object obj) 方法来比较元素之间的大小关系，然后将集合元素按升序(默认情况)排列 \",\"如果试图把一个对象添加到 TreeSet 时，则该对象的类必须实现 Comparable接口。\"]},\"1888\":{\"h\":\"6. Set接口的方法\",\"t\":[\"Set接口中没有额外定义新的方法，使用的都是Collection中声明过的方法。\",\"详见：内置函数>Collection+\"]},\"1889\":{\"h\":\"7. 底层原理：数据的添加过程与底层结构\",\"t\":[\"核心：数据添加时要保证，数据的不可重复性（equals返回false）。\",\"如果我们只是简单的用新数据比对旧数据，那么当集合中的数据过多时，就要跟之前添加的每一个数据进行equals比对，效率太低，所以java采用的别的方法，以HashSet为例：\"]},\"1890\":{\"h\":\"7.1 核心原理\",\"t\":[\"不同数据的hash值是不同的，所以java采用了一种特殊的算法，先把要添加的元素取哈希值，然后通过一种算法算出他应该储存的位置（比如取模16）。\",\"这样，如果两个数据的哈希值不同，就一定不会放到同一个位置，即存放数据之前，只要该位置没有其他数据，就一定不会存在重复的数据\",\"而如果两个元素通过算法计算的位置是一样的（元素不一定相同），则先去判断hash值是否相同，不同就添加成功，相同的话再去判断equals，如果不同就以链表的形式添加到该元素后面，如果相同，就添加失败。\",\"无序性：这也是为什么Set集合是无序的原因：为了高效的进行互斥性比对。\"]},\"1891\":{\"h\":\"7.2 添加过程分析\",\"t\":[\"①向HashSet中添加元素a：首先调用元素所在类的hashCode()方法，计算元素a的哈希值，此哈希值，接着通过某种算法计算在HashSet底层数组中存放的位置（索引位置）。\",\"②判断要添加的位置上有没有其他元素： \",\"情况1：没有其他元素，直接添加成功\",\"有其他元素b（或者以链表形式存在多个元素），这比较a与元素b的hash值 \",\"情况2：hash值不同，添加成功\",\"hash值相同，则需要调用a所在类的equals方法： \",\"返回true，元素a添加失败\",\"情况3：返回false，添加成功\"]},\"1892\":{\"h\":\"7.3 储存的方式\",\"t\":[\"HashSet底层是以数组+链表的形式储存的。\",\"添加元素时，元素首先以数组的形式储存【上述情况1】。如果数组的索引处已经有值了，还需要在此处添加元素【上述情况2和3】，则与已经存在指定索引位置上数据以链表的方式存储。\"]},\"1893\":{\"h\":\"7.4 链表的形式：\",\"t\":[\"jdk 7 :元素a放到数组中，指向原来的元素。\",\"jdk 8 :原来的元素在数组中，指向元素a\",\"6-5-1\"]},\"1894\":{\"h\":\"8. hashCode与equals的重写\",\"t\":[\"要求：向set(主要指：HashSet、LinkedHashSet)中添加的数据，其所在的类一定要重写hashCode()和equals()，尤其是自定义的类。\"]},\"1895\":{\"h\":\"8.1 HahsCode\",\"t\":[\"对于object元素，即使两个对象完全一样（equals为true），但是只要他们不是同一个对象，其hashcode也是不同的，因为Object类底层默认是通过对象储存的地址来计算hashcode的，对象的存放地址是随机的，即hashcode值也是随机，且不同的。\",\"因此，对于自定义类，我们要重写hashCode()方法。\"]},\"1896\":{\"h\":\"8.2 equals\",\"t\":[\"因为我们想通过对象的值是否相同来判断对象的异同，而非地址，因此要重写equals方法\"]},\"1897\":{\"h\":\"8.3 重写原则\",\"t\":[\"在ideal中，直接alt + insert，让编辑器帮我们重写即可。具体重写的规则和细节，暂时不需要掌握。\",\"如果自己手动重写，则有以下注意点：\",\"重写的hashCode()和equals()尽可能保持一致性：相等的对象必须具有相等的散列码\",\"小技巧：对象中用作 equals() 方法比较的 Field，都应该用来计算 hashCode 值。\"]},\"1898\":{\"h\":\"9. 补充：hashCode与值\",\"t\":[\"结论：hashCode相同，值不一定相同，值相同，那么hashCode一定相同。\",\"不同的类对hashCode的重写方式（算法）不同，可能会造成不同对象拥有相同的HashCode。\"]},\"1899\":{\"h\":\"9.1 哈希算法\",\"t\":[\"详情，查询：密码学，哈希算法；\",\"哈希值的长度是固定的，也就是取值范围是有限的，而输入数据的取值范围是无限的，所以总会找到两个不同的输入拥有相同的哈希。所以，哈希函数的安全性肯定是个相对概念。如果出现了两个不同输入有相同输出的情况，就叫碰撞，collision 。不同的哈希算法，哈希位数越多，也就基本意味着安全级别越高，或者说它的”抗碰撞性“就越好。\",\"我们在重写hashCode，设计哈希算法时，要综合考虑效率和”哈希冲突“。\"]},\"1900\":{\"h\":\"9.2 哈希冲突\",\"t\":[\"当两个不同对象的哈希值相同时，就称为：哈希冲突。\",\"频繁的哈希冲突会降低数据存取的效率，需要优化哈希算法。\"]},\"1901\":{\"h\":\"Ⅱ. Set 使用\",\"t\":[\"Set接口中没有额外定义新的方法，使用的都是Collection中声明过的方法。\",\"基本的使用，就是Collection接口中方法的使用。\"]},\"1902\":{\"h\":\"1. LinkedHashSet\",\"t\":[\"LinkedHashSet作为HashSet的子类，也不允许出现重复的元素。\",\"遍历LinkedHashSet集合，会根据添加数据的顺序进行遍历。\",\"底层：LinkedHashSet 根据元素的 hashCode 值来决定元素的存储位置，但它同时使用双向链表维护元素的次序，这使得元素看起来是以插入顺序保存的记录了一个双向链表。\",\"特点：LinkedHashSet插入性能略低于 HashSet，但对于频繁的遍历操作，LinkedHashSet效率高于HashSet。\",\"注意：当TreeSet的构造函数有没有参数时，该集合的类必须实现Comparable接口，并重写compareTo方法，当TreeSet有参数时，该参数必须是Comparator的对象。\",\"使用示例：\",\"LinkedHashSet set = new LinkedHashSet(); set.add(456); set.add(123); set.add(123); set.add(\\\"AA\\\"); set.add(\\\"CC\\\"); set.add(new User(\\\"Tom\\\",12)); set.add(new User(\\\"Tom\\\",12)); set.add(129); //打印结果：[456, 123, AA, CC, User{name='Tom', age=12}, 129] System.out.println(set); Iterator it = set.iterator(); while(it.hasNext()){ System.out.println(it.next()); } \",\"注意：自定义类中一定要重写equal和hashcode方法\"]},\"1903\":{\"h\":\"2. TreeSet\",\"t\":[\"如果使用TreeSet，一定要重写compareTo方法或compare方法，不然会抛出异常（JDK1.8）。 TreeSet遍历数据，会根据自己定义的排序方式进行排序。\",\"向TreeSet中添加的数据，要求是相同类的对象。不然就报异常。TreeSet中不允许添加相同的对象。\",\"底层：TreeSet底层是红黑树\"]},\"1904\":{\"h\":\"2.1 比较对象是否相同的方法\",\"t\":[\"TreeSet中，不是通过比较两个对象的equals和hashcode来判断是否相同的，而是通过排序方法。\",\"①自然排序：compareTo()返回0，即两个对象相同\",\"②定制排序：compare()返回0，即两个对象相同\"]},\"1905\":{\"h\":\"2.2 示例：自然排序\",\"t\":[\"TreeSet set = new TreeSet(); set.add(new User(\\\"Tom\\\",12)); set.add(new User(\\\"Jerry\\\",32)); set.add(new User(\\\"Jack\\\",33)); set.add(new User(\\\"Jack\\\",33)); //[User{name='Tom', age=12}, User{name='Jerry', age=32}, //User{name='Jack', age=33}] System.out.println(set); //重复的数据被排除 ============================================ //compareTo的重写 public int compareTo(Object o) { if(o instanceof User){ User user = (User)o; int compare = -this.name.compareTo(user.name); if(compare != 0){ return compare; }else{ return Integer.compare(this.age,user.age); } }else{ throw new RuntimeException(\\\"输入的类型不匹配\\\"); } } \"]},\"1906\":{\"h\":\"2.3 示例：定制排序\",\"t\":[\"定制排序，就是使用Comparetor接口进行排序。\",\"如果使用定制排序，那么TreeSet的构造函数需要传入参数，参数就是Comparator接口的实例。\",\"//Comparator接口的实例 Comparator com = new Comparator(){ public int compare(Object o1,Object o2){ if(o1 instanceof User && o2 instanceof User){ User u1 = (User)o1; User u2 = (User)o2; return Integer.compare(u1.getAge(),u2.getAge()); }else{ throw new RuntimeException(\\\"输入的数据类型不匹配\\\"); } } }; TreeSet set = new TreeSet(com); //将Comparator对象作为参数 ...//其它的同上，可以进行add和其他操作了。 \"]},\"1907\":{\"h\":\"6-6. Map\"},\"1908\":{\"h\":\"Ⅰ. Map 接口\"},\"1909\":{\"h\":\"1. 概述\",\"t\":[\"Map与Collection并列存在。用于保存具有 映射关系的数据:key-value\",\"Map 中的 key 和 value 都可以是任何引用类型的数据\",\"Map 中的 key 用Set来存放，不允许重复，即同一个 Map 对象所对应的类，须重写hashCode()和equals()方法 \",\"常用String类作为Map的“键”\",\"key 和 value 之间存在单向一对一关系，即通过指定的 key 总能找到唯一的、确定的 value\",\"Map接口的常用实现类：HashMap、TreeMap、LinkedHashMap和Properties。 \",\"其中，HashMap是 Map 接口使用频率最高的实现类。\"]},\"1910\":{\"h\":\"2. Map接口的继承结构\",\"t\":[\"Map:双列数据，存储key-value对的数据 ---类似于高中的函数：y = f(x) \",\"HashMap 【第一个实现类】 \",\"LinkedHashMap【第二个实现类】\",\"TreeMap【第三个实现类】\",\"Hashtable【第四个实现类】 \",\"Properties【第五个实现类】\"]},\"1911\":{\"h\":\"3. 实现类简介\"},\"1912\":{\"h\":\"3.1 HashMap【使用频率最高的实现类】\",\"t\":[\"底层结构：数组+链表 （jdk7及之前）；数组+链表+红黑树 （jdk 8）\",\"线程不安全的，效率高；\",\"允许使用null键和null值，与HashSet一样，不保证映射的顺序。\",\"所有的key构成的集合是Set:无序的、不可重复的。所以，key所在的类要重写：equals()和hashCode() \",\"HashMap 判断两个 key 相等的标准是：两个 key 通过 equals() 方法返回 true，hashCode 值也相等。\",\"所有的value构成的集合是Collection:无序的、可以重复的。所以，value所在的类要重写：equals() \",\"HashMap 判断两个 value 相等的标准是：两个 value 通过 equals() 方法返回 true。\",\"一个key-value构成一个entry，所有的entry构成的集合是Set:无序的、不可重复的\",\"注意：HashMap是无序的，添加顺序和遍历顺序并没有关联。\"]},\"1913\":{\"h\":\"3.2 LinkedHashMap\",\"t\":[\"底层结构：同上\",\"LinkedHashMap 是 HashMap 的子类\",\"遍历map元素时，可以按照添加的顺序实现遍历。 \",\"原因：在原有的HashMap底层结构基础上，添加了双向链表结构。\",\"特点：对于频繁的遍历操作，此类执行效率高于HashMap。\"]},\"1914\":{\"h\":\"3.3 TreeMap\",\"t\":[\"底层结构：红黑树\",\"TreeMap存储 Key-Value 对时，需要根据 key-value 对进行 \",\"key可以自然排序或定制排序\",\"TreeMap 可以保证所有的 Key-Value 对处于有序状态。\",\"TreeMap判断 两个key 相等的标准：两个key通过compareTo()方法或者compare()方法返回0。\"]},\"1915\":{\"h\":\"3.4 Hashtable\",\"t\":[\"实现原理和结构与HashMap相同，功能也相同，基本被抛弃。\",\"作为古老的实现类；线程安全的，效率低；不能存储null的key和value\"]},\"1916\":{\"h\":\"3.5 Properties\",\"t\":[\"Hahstable的子类，常用来处理配置文件。\",\"由于属性文件里的 key、value 都是字符串类型，所以 Properties 里的key和value都是String类型\",\"存取数据时，建议使用setProperty(String key,String value)方法和getProperty(String key)方法\"]},\"1917\":{\"h\":\"4. Map常用方法\",\"t\":[\"详见：内置函数>List & Map\"]},\"1918\":{\"h\":\"5. key-value的储存特点\",\"t\":[\"以HashMap为例\",\"Key：无序的、不可重复的，使用Set存储所有的key； \",\"key所在的类要重写equals()和hashCode() （以HashMap为例）\",\"Value：无序的、可重复的，使用Collection存储所有的value \",\"value所在的类要重写equals()，因为要进行查询。\",\"Entry：键值对key-value，构成了一个Entry对象。 \",\"Map中的entry:无序的、不可重复的，使用Set存储所有的entry\"]},\"1919\":{\"h\":\"Ⅱ. HashMap底层\"},\"1920\":{\"h\":\"1. JDK7中底层实现原理\"},\"1921\":{\"h\":\"1.1 初始化\",\"t\":[\"在实例化以后，底层创建了长度是16的一维数组Entry[] table。\",\"HashMap<Integer, String> map = new HashMap<>(); \"]},\"1922\":{\"h\":\"1.2 添加数据\",\"t\":[\"map.put(key1,value1): 首先，调用key1所在类的hashCode()计算key1哈希值，此哈希值经过某种算法计算以后，得到在Entry数组中的存放位置。\",\"情况1：如果此位置上的数据为空，此时的key1-value1添加成功。\",\"如果此位置上的数据不为空，(意味着此位置上存在一个或多个数据(以链表形式存在)),此时应比较key1和已经存在的一个或多个数据的哈希值： \",\"情况2：如果key1的哈希值与已经存在的数据的哈希值都不相同，此时key1-value1添加成功。\",\"如果key1的哈希值和已经存在的某一个数据(key2-value2)的哈希值相同，继续比较：调用key1所在类的equals(key2)方法，比较： \",\"情况3-1：如果equals()返回false:此时key1-value1添加成功。\",\"情况3-2：如果equals()返回true:使用value1替换value2。\"]},\"1923\":{\"h\":\"1.3 链表的产生\",\"t\":[\"关于情况2和情况3-1：此时key1-value1和原来的数据以链表的方式存储。\"]},\"1924\":{\"h\":\"1.4 扩容\",\"t\":[\"在不断的添加过程中，会涉及到扩容问题，当超出临界值(且要存放的位置非空)时，扩容。默认的扩容方式：扩容为原来容量的2倍，并将原有的数据复制过来。\"]},\"1925\":{\"h\":\"1.5 储存结构图\",\"t\":[\"①JDK7：HashMap是数组+链表结构(即为链地址法)\",\"6-6-2\",\"②JDK8：HashMap是数组+链表+红黑树实现。\",\"6-6-3\"]},\"1926\":{\"h\":\"2. JDK8中的底层实现原理\",\"t\":[\"相较于jdk7在底层实现方面的不同点为：\",\"new HashMap():底层没有创建一个长度为16的数组\",\"首次调用put()方法时，底层创建长度为16的数组\",\"jdk 8底层的数组是：Node[],而非Entry[]\",\"jdk7底层结构只有：数组+链表。jdk8中底层结构：数组+链表+红黑树。 \",\"形成链表时，七上八下（jdk7:新元素指向旧元素。jdk8：旧元素指向新元素）\",\"红黑树的形成：当数组的某一个索引位置上的元素以链表形式存在的数据个数 > 8且当前数组的长度 > 64时，此时此索引位置上的所数据改为使用红黑树存储（比对速度更快）。\"]},\"1927\":{\"h\":\"3. 源码分析\",\"t\":[\"暂略。\"]},\"1928\":{\"h\":\"4. 源码中的一些重要常量\",\"t\":[\"DEFAULT_INITIAL_CAPACITY : HashMap的默认容量，16\",\"MAXIMUM_CAPACITY ： ： HashMap的最大支持容量，2^30\",\"DEFAULT_LOAD_FACTOR ：HashMap的默认加载因子\",\"TREEIFY_THRESHOLD ：Bucket中链表长度大于该默认值，转化为红黑树 -UNTREEIFY_THRESHOLD ：Bucket中红黑树存储的Node小于该默认值，转化为链表\",\"MIN_TREEIFY_CAPACITY ：桶中的Node被树化时最小的hash表容量。（当桶中Node的数量大到需要变红黑树时，若hash表容量小于MIN_TREEIFY_CAPACITY时，此时应执行resize扩容操作这个- MIN_TREEIFY_CAPACITY的值至少是TREEIFY_THRESHOLD的4倍。）\",\"table ：存储元素的数组，总是2的n次幂\",\"entrySet： ：存储具体元素的集\",\"size ：HashMap中存储的键值对的数量\",\"modCount ：HashMap扩容和结构改变的次数。\",\"threshold ：扩容的临界值，=容量*填充因子\",\"loadFactor： ：填充因子\"]},\"1929\":{\"h\":\"Ⅲ. LinkedHashMap\"},\"1930\":{\"h\":\"1. 底层\",\"t\":[\"暂略，比HahsMap多了个双向链表，\",\"顺序：迭代顺序与 Key-Value 对的插入顺序一致\"]},\"1931\":{\"h\":\"2. 使用\",\"t\":[\"LinkedHashMap map = new LinkedHashMap(); map.put(123,\\\"AA\\\"); map.put(345,\\\"BB\\\"); map.put(12,\\\"CC\\\"); //遍历顺序与添加顺序一致 System.out.println(map); //{123=AA, 345=BB, 12=CC} \"]},\"1932\":{\"h\":\"Ⅳ. TreeMap\"},\"1933\":{\"h\":\"1. 特点\",\"t\":[\"TreeMap存储 Key-Value 对时，需要根据 key-value 对进行排序。 \",\"TreeMap 可以保证所有的 Key-Value 对处于 有序状态。\",\"TreeSet底层使用 红黑树结构存储数据\",\"TreeMap判断 两个key 相等的标准：两个key通过compareTo()方法或者compare()方法返回0。\"]},\"1934\":{\"h\":\"2. 排序\",\"t\":[\"向TreeMap中添加key-value，要求key必须是由同一个类创建的对象，因为要按照key进行排序。排序分为：自然排序和定制排序\",\"实际开发中，我们一般使用String作为key，String内部已经重新了排序了。\"]},\"1935\":{\"h\":\"2.1 自然排序\",\"t\":[\"需要key所在的类，实现Comparable，重写compareTo方法\",\"TreeMap map = new TreeMap(); User u1 = new User(\\\"Tom\\\",23); User u2 = new User(\\\"Jerry\\\",32); User u3 = new User(\\\"Jack\\\",20); User u4 = new User(\\\"Rose\\\",18) ===== User类中已经重写了compareTo ===== map.put(u1,98); map.put(u2,89); map.put(u3,76); map.put(u4,100); Set entrySet = map.entrySet(); Iterator iterator1 = entrySet.iterator(); while (iterator1.hasNext()){ Object obj = iterator1.next(); Map.Entry entry = (Map.Entry) obj; //根据自定义的排序方式进行了排序输出 System.out.println(entry.getKey() + \\\"---->\\\" + entry.getValue()); } \"]},\"1936\":{\"h\":\"2.2 定制排序\",\"t\":[\"TreeMap的构造器接收一个参数，参数即为Comparator接口的实例，接口中重写类的排序方法compare。\",\"TreeMap map = new TreeMap(new Comparator() { @Override public int compare(Object o1, Object o2) { if(o1 instanceof User && o2 instanceof User){ User u1 = (User)o1; User u2 = (User)o2; return Integer.compare(u1.getAge(),u2.getAge()); } throw new RuntimeException(\\\"输入的类型不匹配！\\\"); } }); //其他代码的同上 \"]},\"1937\":{\"h\":\"Ⅴ. Properties\",\"t\":[\"该类是专门用来处理项目中的配置文件的。\"]},\"1938\":{\"h\":\"1. 定义配置文件\",\"t\":[\"先定义一个配置文件，用于测试，例如：jdbc.properties（数据库连接的配置）\",\"uname=jinno password=123abc \"]},\"1939\":{\"h\":\"2. Properties类的方法\",\"t\":[\"getProperty(String key)：获取配置的值\",\"setProperty(String key,String value)：设置配置的值\"]},\"1940\":{\"h\":\"3. 读取配置文件，并加载配置信息\",\"t\":[\"利用Properties类可以读取配置信息。\",\"//1.创建Properties类的对象 Properties pros = new Properties(); //2.加载文件的流 FileInputStream fis = new FileInputStream(\\\"jdbc.properties\\\"); //3.加载流对应的文件 pros.load(fis); //4.读取配置信息 String uname = pros.getProperty(\\\"name\\\"); String password = pros.getProperty(\\\"password\\\"); System.out.println(uanme); //jinno System.out.println(password); //123abc \"]},\"1941\":{\"h\":\"6-7. Collections\",\"t\":[\"提示\",\"不要跟Collection搞混了，前者是个集合接口，后者是操作接口的工具类\",\"详见：内置函数>Collection+\"]},\"1942\":{\"h\":\"介绍\",\"t\":[\"Collections 是一个操作 Set、List 和 Map 等集合的工具类\",\"Map相关的方法比较少。\"]},\"1943\":{\"h\":\"静态方法\",\"t\":[\"Collections 中提供了一系列静态的方法对集合元素进行排序、查询和修改等操作，还提供了对集合对象设置不可变、对集合对象实现同步控制等方法。\"]},\"1944\":{\"h\":\"7-1. 使用泛型\"},\"1945\":{\"h\":\"Ⅰ. Generic 泛型\"},\"1946\":{\"h\":\"意义\",\"t\":[\"我们在定义数据类型时，有时不确定究竟定义为何种类型，以前的做法是定义为Object，这样什么类型的数据都支持。但是这样做，比较危险（类型错误），且麻烦（经常需要强制类型转换）。现在我们可以定义一个泛型，用一个符占位表示，可以在实例化时传递一个数据类型，这样在实际使用时，就可以确定他的数据类型了。\",\"核心：数据类型，先占位，用的时候再定义。\",\"使用泛型的主要优点是能够在编译时而不是在运行时检测错误。\"]},\"1947\":{\"h\":\"1. 泛型的设计背景\",\"t\":[\"集合容器类在设计阶段/声明阶段不能确定这个容器到底实际存的是什么类型的对象，所以在JDK1.5之前只能把元素类型设计为Object。JDK1.5之后使用泛型来解决。因为这个时候除了元素的类型不确定，其他的部分是确定的，例如关于这个元素如何保存，如何管理等是确定的，因此此时把元素的类型设计成一个参数，这个类型参数叫做泛型。\"]},\"1948\":{\"h\":\"2. 泛型的概念\",\"t\":[\"所谓泛型，就是允许在定义类、接口时通过一个标识表示类中某个属性的类型或者是某个方法的返回值及参数类型。这个类型参数将在使用时（例如，继承或实现这个接口，用这个类型声明变量、创建对象时）确定（即传入实际的类型参数，也称为类型实参）。\",\"参数化类型：从JDK1.5以后，Java引入了“参数化类型（Parameterized type）”的概念，允许我们在创建集合时再指定集合元素的类型，如：List<String>，这表明该List只能保存字符串类型的对象。\",\"泛型的发展：JDK1.5改写了集合框架中的全部接口和类，为这些接口、类增加了泛型支持，从而可以在声明集合变量、创建集合对象时传入类型实参。集合也是泛型使用最多的场景。\"]},\"1949\":{\"h\":\"3. 为什么要有泛型\",\"t\":[\"那么为什么要有泛型呢 ，直接Object 不是也可以存储数据吗 ？\"]},\"1950\":{\"h\":\"3.1 解决元素安全性问题\",\"t\":[\"解决元素存储的安全性问题，好比商品、药品标签，不会弄错。\"]},\"1951\":{\"h\":\"3.2 解决获取元素时强制类型转换的问题\",\"t\":[\"解决获取数据元素时，需要类型强制转换的问题，好比不用每回拿商品、药品都要辨别。\",\"Java泛型可以保证如果程序在编译时没有发出警告，运行时就不会产生 ClassCastException异常。同时，代码更加简洁、健壮。\"]},\"1952\":{\"h\":\"4. 集合中的泛型\",\"t\":[\"泛型主要用于集合，也可以用于自定义类。\"]},\"1953\":{\"h\":\"4.1 没有泛型时\",\"t\":[\"7-1-1\"]},\"1954\":{\"h\":\"4.2 有泛型时\",\"t\":[\"7-1-2\"]},\"1955\":{\"h\":\"5. 不使用泛型的缺点\",\"t\":[\"以ArrayList集合为例，假设我们的集合需要存放学生的成绩（int）。\",\"ArrayList list = new ArrayList(); //需求：存放学生的成绩 list.add(78); list.add(76); list.add(89); list.add(88); //问题一：类型不安全，Tom不是int类型的 list.add(\\\"Tom\\\"); for(Object score : list){ //问题二：强转时，可能出现ClassCastException，某个值不是int //问题二+：每次都要强转，比较繁琐 int stuScore = (Integer) score; System.out.println(stuScore); } \"]},\"1956\":{\"h\":\"Ⅱ. 集合中使用泛型\"},\"1957\":{\"h\":\"1. 使用示例：List集合\",\"t\":[\"//1.实例化ArrayList类时，可以指定泛型 ArrayList<Integer> list = new ArrayList<>(); list.add(10); list.add(20); list.add(30); //2.add方法是有泛型限制的，String类型添加失败 //泛型的类型检查，在编译时就会进行，保证了数据安全 //list.add(\\\"tom\\\"); //3.进行遍历 //3.1-1 这里可以直接指定泛型类型，而不是用Object for(Integer num:list){ //3.1-2 不用进行强转 Integer n = num; System.out.println(n); } //3.2-1 创建迭代器时，也会使用泛型 Iterator<Integer> it = list.iterator(); while(it.hasNext()){ //3.2-2 不用进行强转了 Integer n = it.next(); System.out.println(n); } \"]},\"1958\":{\"h\":\"2. 使用示例：Map集合\",\"t\":[\"注意：Map集合是K-V 数据结构，因此规定了两个泛型\",\"//1.实例化HashMap类时，指定了Key和Value的泛型 HashMap<String, Integer> map = new HashMap<>(); map.put(\\\"Jerry\\\",20); map.put(\\\"Tom\\\",40); map.put(\\\"Jinno\\\",50); //2.put方法是有泛型限制的，错误的类型添加失败 //map.put(20,\\\"jinno\\\"); //3.泛型的嵌套:entrySet方法得到的是一个嵌套的泛型 Set<Map.Entry<String, Integer>> entry = map.entrySet(); //4.Iterator方法也得到了了嵌套的泛型 Iterator<Map.Entry<String, Integer>> iterator = entry.iterator(); while(iterator.hasNext()){ //5.嵌套的泛型成为了数据类型 Map.Entry<String, Integer> e = iterator.next(); //6.这里省去了类型强转 String key = e.getKey(); Integer value = e.getValue(); System.out.println(key+\\\"--->\\\"+value); } \"]},\"1959\":{\"h\":\"3. 使用总结\",\"t\":[\"集合类的泛型 \",\"集合接口或集合类在jdk5.0时都修改为带泛型的结构，因此我们在使用的时候可以指定泛型。\",\"在类的定义时，没有指定泛型，用的时候就不能指定。\",\"指定泛型 \",\"在实例化集合类时，可以指明具体的泛型类型。\",\"一旦指明后，在集合类或接口中凡是定义类或接口时，内部结构（比如：方法、构造器、属性等）使用到类的泛型的位置，都指定为实例化的泛型类型。\",\"这些内部结构也都受到泛型的约束。\",\"泛型的类型 \",\"泛型的类型必须是类，不能是基本数据类型。需要用到基本数据类型的位置，拿包装类替换\",\"比如：int->Integer\",\"默认泛型 \",\"如果实例化时，没有指明泛型的类型。默认类型为java.lang.Object类型。\"]},\"1960\":{\"h\":\"7-2. 自定义泛型\"},\"1961\":{\"h\":\"Ⅰ. 自定义泛型类\"},\"1962\":{\"h\":\"1. 语法\",\"t\":[\"泛型一般用T、E、K、V字母表示。\"]},\"1963\":{\"h\":\"1.1 声明泛型接口和泛型类\",\"t\":[\"泛型类可能有多个参数，此时应将多个参数一起放在尖括号内，比如：<E1,E2,E3>\",\"interface List<T>{...} class GenTest<K,V>{...} \"]},\"1964\":{\"h\":\"1.2 泛型类的实例化\",\"t\":[\"构造器中只加个<>即可，指定类型参数的值。\",\"注意：泛型的类型只能是类，不能用基本数据类型填充。但可以使用包装类填充。\",\"List<String> strList = new ArrayList<String>(); List<String> strList = new ArrayList<>();//JDK1.7之后的语法 \"]},\"1965\":{\"h\":\"1.3 泛型类的构造器\",\"t\":[\"public GenericClass(){}//正确的 public GenericClass<E>(){} //错误的 \"]},\"1966\":{\"h\":\"2. 示例：自定义泛型类\"},\"1967\":{\"h\":\"2.1 定义泛型类\",\"t\":[\"//将该类定义为泛型类 public class Order <E>{ String orderName; int orderId; //定义一个泛型 类型的属性 E orderE; //泛型 类型 作为参数 public Order(String orderName,int orderId,E orderE){ this.orderName = orderName; this.orderId = orderId; this.orderE = orderE; } //泛型 类型 作为返回值 public void setOrderE(E orderE){ this.orderE = orderE; } } \"]},\"1968\":{\"h\":\"2.2 实例化泛型类\",\"t\":[\"public static void main(String[] args) { //定义泛型类，但可以不指定泛型，泛型默认是Object类型(不推荐) Order order = new Order(); //实例化时，指定泛型的类型（建议） Order<String> order1 = new Order<>(\\\"AA\\\", 10, \\\"E\\\"); //调用参数设置为泛型的函数，此时参数类型变为String order1.setOrderE(\\\"E-E\\\"); } \"]},\"1969\":{\"h\":\"3. 自定义泛型类（接口）的注意事项\",\"t\":[\"实例化后，操作原来泛型位置的结构必须与指定的泛型类型一致。\",\"泛型不同的引用不能相互赋值。\",\"ArrayList<String> list1 = new ArrayList<>(); ArrayList<String> list2 = new ArrayList<>(); ArrayList<Integer> list3 = new ArrayList<>(); list1 = list2; list1 = list2; //没报错 list3 = list2; //报错：编译不通过 \",\"泛型擦除：泛型如果不指定，将被擦除，泛型对应的类型均按照Object处理，但不等价于Object。 \",\"经验：泛型要使用一路都用。要不用，一路都不要用。\",\"包装类：泛型的指定中不能使用基本数据类型，可以使用包装类替换\",\"泛型修饰类/接口的成员：在类/接口上声明的泛型，在本类或本接口中即代表某种类型，可以作为非静态属性的类型、非静态方法的参数类型、非静态方法的返回值类型。 \",\"但在静态方法中不能使用类的泛型，因为类可以直接调用静态方法。\",\"异常类不能是泛型：包括自定义的异常类和try...catch中的异常类。\",\"泛型类型的数组：不能直接 new E[]，创建泛型数组，而是要利用Object进行强转。\",\"E[] arrs = (E[])new Object[10]; \"]},\"1970\":{\"h\":\"4. 继承泛型类\",\"t\":[\"父类有泛型，子类可以选择保留泛型也可以选择指定泛型类型\",\"class Father<T1, T2> {...} \"]},\"1971\":{\"h\":\"4.1 不保留泛型：擦除泛型\",\"t\":[\"Son1不是泛型类\",\"//等价于：lass Son extends Father<Object,Object>{...} class Son1 extends Father{...} Son1 son1 = new Son1(); \"]},\"1972\":{\"h\":\"4.2 不保留泛型：指定父类泛型具体类型\",\"t\":[\"Son2不是泛型类\",\"class Son2 extends Father<Integer, String> {...} Son2 son2 = new Son2(); \"]},\"1973\":{\"h\":\"4.3 保留泛型：全部保留\",\"t\":[\"Son3仍是泛型类\",\"class Son3<T1, T2> extends Father<T1, T2> {..} Son3<String, String> son3 = new Son3<>(); \"]},\"1974\":{\"h\":\"4.4 保留泛型：部分保留\",\"t\":[\"Son4仍是泛型类\",\"class Son4<T2> extends Father<Integer, T2> {...} Son4<String> son4 = new Son4<>(); \"]},\"1975\":{\"h\":\"Ⅱ. 自定义泛型方法\"},\"1976\":{\"h\":\"1. 定义\",\"t\":[\"概念：当一个方法，不确定变量的类型时，可以使用泛型，该方法就是泛型方法。\",\"在泛型方法中可以定义泛型参数，此时，参数的类型就是传入数据的类型\"]},\"1977\":{\"h\":\"注意\",\"t\":[\"泛型方法跟泛型类、泛型接口没有任何关系。\",\"泛型方法所属的类是不是泛型都没有关系\"]},\"1978\":{\"h\":\"2. 误区\",\"t\":[\"当类是泛型类时，假如定义了泛型标识E，那么方法参数类型是E的方法，并不是泛型方法，因为他的类型是确定的，和类初始化给的类型一致或是Object。\"]},\"1979\":{\"h\":\"3. 标识符\",\"t\":[\"当泛型方法所在类也是泛型类时，泛型方法使用的泛型标识，不要跟类的泛型标识一样。\"]},\"1980\":{\"h\":\"4. 语法\",\"t\":[\"访问权限 < 泛型> 返回类型 方法名([ 泛型标识 参数名称]) 抛出的异常\",\"public <T> String getUname(T id){...} \"]},\"1981\":{\"h\":\"5. 示例\",\"t\":[\"将数组中的数据copy到list中\",\"public <E> List<E> copyFromArrayToList(E[] arr){ ArrayList<E> list = new ArrayList<>(); for(E e : arr){ list.add(e); } return list; } \"]},\"1982\":{\"h\":\"6. 静态化\",\"t\":[\"public static <E> List<E> copyFromArrayToList(E[] arr){...} \",\"泛型方法，可以声明为静态的。\",\"原因：泛型参数是在调用方法时确定的。并非在实例化类时确定。\"]},\"1983\":{\"h\":\"7-3. 通配符\"},\"1984\":{\"h\":\"Ⅰ. 继承里的泛型\"},\"1985\":{\"h\":\"1. 不同泛型的类，不具备父子关系，不能互相赋值\",\"t\":[\"例如：B是A的一个子类型（子类或者子接口），而G是具有泛型声明的类或接口，G<B>并不是G<A>的子类型！\",\"List<Object> list1 = null; List<String> list2 = new ArrayList<String>(); //2.编译不通过，不是同一个 //list1 = list2 \"]},\"1986\":{\"h\":\"2. 相同泛型的父子类，具有继承关系\",\"t\":[\"例如：类A是类B的父类，A<G> 是 B<G> 的父类\",\"AbstractList<String> list1 = null; List<String> list2 = null; ArrayList<String> list3 = null; list1 = list3; list2 = list3; \"]},\"1987\":{\"h\":\"3. 总结\",\"t\":[\"带泛型的对象，降低了多态的范围，对子类要求也要具备相应的泛型，才能使用多态的特性。不过，我们可以用通配符解决这个问题\"]},\"1988\":{\"h\":\"Ⅱ. 通配符的使用\"},\"1989\":{\"h\":\"1. 通配符\",\"t\":[\"不同泛型的父子类，不具有继承关系，这造成了很大的麻烦，因此有了通配符。\",\"？：通配符，表示所有泛型的父类。\",\"类A是类B的父类，G<A>和G<B>是没有关系的，二者共同的父类是：G<?>\"]},\"1990\":{\"h\":\"2. 使用通配符\"},\"1991\":{\"h\":\"2.1 ？：赋值\",\"t\":[\"List<Object> list1 = null; List<String> list2 = null; List<?> list = null; //无法赋值，报错 //List1 = list2; //可以赋值,List<?>是另外两个的父类 list = list1; list = list2; \"]},\"1992\":{\"h\":\"2.2 添加数据\",\"t\":[\"对于List<?>，不能向其内部添加数据，除了添加null之外\",\"//以下两个add方法，产生编译错误 //list.add(\\\"DD\\\"); //list.add('?'); //只能添加null list.add(null); \"]},\"1993\":{\"h\":\"2.3 获取数据\",\"t\":[\"？泛型，允许读取数据，读取的数据类型为Object。\",\"List<String> list3 = new ArrayList<>(); List<?> list = null; list3.add(\\\"AA\\\"); list3.add(\\\"BB\\\"); list3.add(\\\"CC\\\"); list = list3; //可以获取数据, Object o = list.get(0); System.out.println(o); //aa \"]},\"1994\":{\"h\":\"3. 方法的使用示例\",\"t\":[\"要求：定义一个方法，用来遍历List类型的集合。\"]},\"1995\":{\"h\":\"3.1 不使用通配符泛型\",\"t\":[\"如下：我们定义的方法中，参数类型是 List<String>,因此该方法只能被泛型为String的List调用，其他泛型的List就无法调用了，如果其他泛型的List想使用功能这个遍历方法，就需要定义多个不同泛型类型的遍历方法，非常的冗余。\",\"//1.定义方法 public void print(List<String> list){ Iterator<?> iterator = list.iterator(); while(iterator.hasNext()){ Object obj = iterator.next(); System.out.println(obj); } } //2.使用方法 GenericTest test = new GenericTest(); ArrayList<String> list1 = new ArrayList<>(); list1.add(\\\"aa\\\"); list1.add(\\\"bb\\\"); test.print(list1); //aa;bb ArrayList<Integer> list2 = new ArrayList<>(); list2.add(11); list2.add(22); //报错，参数类型错误，无法调用该方法 test.print(list2); \"]},\"1996\":{\"h\":\"3.2 使用通配符泛型\",\"t\":[\"如下：我们定义的方法中，类型是List<?>；我们在使用的时候，泛型是任何类型的List都可以调用这个方法；通配符大大扩大了方法的兼容性，我们不用为每一个泛型都定义一个同样的方法了。\",\"//1.定义方法 public void print(List<?> list){ Iterator<?> iterator = list.iterator(); while(iterator.hasNext()){ Object obj = iterator.next(); System.out.println(obj); } } //2.使用方法 GenericTest test = new GenericTest(); ArrayList<String> list1 = new ArrayList<>(); list1.add(\\\"aa\\\"); list1.add(\\\"bb\\\"); test.print(list1); //aa;bb ArrayList<Integer> list2 = new ArrayList<>(); list2.add(11); list2.add(22); test.print(list2); //11;22 \"]},\"1997\":{\"h\":\"3.3 总结\",\"t\":[\"带通配符的泛型，是其他所有泛型的父类，相当于实现了泛型中的多态。我们使用功能泛型通配符，即保证了，集合中的元素都是同一类型，有能适配所有的泛型。\",\"场景：只对集合内元素类型统一有要求，具体是什么类型无要求，比如各种集合工具类\"]},\"1998\":{\"h\":\"4. 有限制条件的通配符\",\"t\":[\"即为通配符指定匹配的上限和下限\"]},\"1999\":{\"h\":\"4.1 extends:上限\",\"t\":[\"? extends A\",\"即，通配符只能表示A类，或A类的子类 ==> ( 无穷小，A]\"]},\"2000\":{\"h\":\"4.2 super：下限\",\"t\":[\"? super A\",\"即，通配符只能表示A类，或A类的父类==> ( A，无穷大]\"]},\"2001\":{\"h\":\"4.3 示例\",\"t\":[\"//1.定义父子类 class Person{} class Man extends Person{} //2.使用有限制的? //list1: <= Person类 List<? extends Person> list1 = null; //list2: >= Person类 List<? super Person> list2 = null; //3. List<Man> list3 = new ArrayList<Man>(); List<Person> list4 = new ArrayList<Person>(); List<Object> list5 = new ArrayList<Object>(); //4.1 测试extends list1: <= Person类 list1 = list3; list1 = list4; //list1 = list5;//编译报错 //4.2 测试Super list2: >= Person类 //list2 = list3;//编译错误 list2 = list4; list2 = list5; \"]},\"2002\":{\"h\":\"5. 注意事项\",\"t\":[\"一般只用在集合上。\"]},\"2003\":{\"h\":\"5.1 不能用在泛型方法声明上\",\"t\":[\"//注意点1：编译错误：不能用在泛型方法声明上，返回值类型前面<>不能使用? public static <?> void test(ArrayList<?> list){ } \"]},\"2004\":{\"h\":\"5.2 不能用在泛型类的声明上\",\"t\":[\"//注意点2：编译错误：不能用在泛型类的声明上 class GenericTypeClass<?>{ } \"]},\"2005\":{\"h\":\"5.3 不能用在创建对象上\",\"t\":[\"//注意点3：编译错误：不能用在创建对象上，右边属于创建集合对象 ArrayList<?> list2 = new ArrayList<?>(); \"]},\"2006\":{\"h\":\"8-1. File\"},\"2007\":{\"h\":\"Ⅰ. File 类\"},\"2008\":{\"h\":\"1. 类介绍\",\"t\":[\"java.io.File类：文件和文件目录路径的抽象表示形式，与平台无关。File类即能表示文件，也能表示目录（目录本质也是文件）。\",\"约定：\",\"广义文件：文件和目录\",\"狭义文件或文件：仅指文件\",\"目录：仅值目录\"]},\"2009\":{\"h\":\"2. File的作用\",\"t\":[\"File 能新建、删除、重命名文件和目录，但 File 不能访问文件内容本身。\",\"如果需要访问文件内容本身，则需要使用输入/输出流（File对象可以作为参数传递给流的构造器）。\"]},\"2010\":{\"h\":\"3. File类与文件\",\"t\":[\"想要在Java程序中表示一个真实存在的文件或目录，那么必须有一个File对象。但是Java程序中的一个File对象，可能没有一个真实存在的文件或目录。\",\"即：我们操作File类是在内存层面上进行操作的，硬盘上没有这个文件也可以。\",\"8-1-1\"]},\"2011\":{\"h\":\"4. 路径分隔符\",\"t\":[\"路径中的每级目录之间用一个路径分隔符隔开。\"]},\"2012\":{\"h\":\"4.1 路径分隔符和系统有关\",\"t\":[\"windows和DOS系统默认使用“\\\\”来表示\",\"UNIX和URL使用“/”来表示 但在windows下使用 \\\"/\\\"，也能识别，因此统一使用\\\"/\\\"\"]},\"2013\":{\"h\":\"4.2 分隔符常量\",\"t\":[\"File类提供了一个常量：public static final String separator。\",\"根据操作系统，动态的提供分隔符\"]},\"2014\":{\"h\":\"5. File：常用构造器\"},\"2015\":{\"h\":\"5.1 public File(String pathname)\",\"t\":[\"以pathname为路径创建File对象，可以是 绝对路径或者相对路径，\",\"如果pathname是相对路径，则默认的当前路径在系统属性user.dir中存储 \",\"在JDK1.8中user.dir默认为项目路径。\",\"如果是在单元测试里运行代码，那么user.dir默认是在当前module中的。\",\"File f1 = new File(\\\"hello.txt\\\"); File f2 = new File(\\\"D:/Java/workplace/Demo/study/hi.txt\\\"); System.out.println(f1); //hello.txt System.out.println(f2); //D:\\\\Java\\\\workplace\\\\Demo\\\\study\\\\hi.txt //默认为项目路径:\\\\Java\\\\workplace\\\\Demo (Demo是我创建的项目名) System.out.println(System.getProperty(\\\"user.dir\\\")); \"]},\"2016\":{\"h\":\"5.2 public File(String parent,String child)\",\"t\":[\"parent：父路径\",\"child：子路径\",\"File f3 = new File(\\\"D:/Java/workplace/Demo/study\\\", \\\"img\\\"); //路径也是一种文件，万物皆文件 System.out.println(f3); // D:\\\\Java\\\\workplace\\\\Demo\\\\study\\\\img \"]},\"2017\":{\"h\":\"5.3 public File(File parent,String child)\",\"t\":[\"parent：父File对象\",\"child：子文件路径\"]},\"2018\":{\"h\":\"6. 创建硬盘文件\",\"t\":[\"先创建File对象，然后再调用创建文件或目录的方法进行创建。\",\"文件和目录创建的路径和名字就是File对象的路径和名字。\",\"如果文件或目录已经存在了，就无法进行创建，返回false\",\"目录本身也是文件，文件是可以没有后缀的，同一目录下的目录和文件不能同名\",\"一个无实体的File对象即可以是目录也可以是文件，就看用什么方法创建\"]},\"2019\":{\"h\":\"Ⅱ. File 常用方法\",\"t\":[\"详见：内置函数>IO类\"]},\"2020\":{\"h\":\"8-2. IO流介绍\"},\"2021\":{\"h\":\"1. IO简介\",\"t\":[\"什么是IO：I/O是Input/Output的缩写；I/O技术是非常实用的技术，用于处理设备之间的数据传输。如读/写文件，网络通讯等。\",\"stream：流：Java程序中，对于数据的输入/输出操作以 “流(stream)” 的方式进行。\",\"流的接口：java.io包下提供了各种“流”类和接口，用以获取不同种类的数据，并通过 标准的方法输入或输出数据。\"]},\"2022\":{\"h\":\"2. Java IO原理\",\"t\":[\"输入 input：读取外部数据（磁盘、光盘等存储设备的数据）到程序（内存）中。\",\"输出 output：将程序（内存）数据输出到磁盘、光盘等存储设备中。\"]},\"2023\":{\"h\":\"3. 流的分类\",\"t\":[\"8-2-1\",\"按操作 数据单位不同 \",\"字节流(8bit)：操作二进制字节\",\"字符流(16bit)：直接操作字符，适用于文本文件\",\"按数据流的流向不同 \",\"输入流\",\"输出流\",\"按流的角色的不同 \",\"节点流（直接连接文件）：直接从数据源或目的地读写数据\",\"处理流（不直接连接文件：不直接连接到数据源或目的地，而是“连接”在已存在的流（节点流或其他处理流）之上，通过对数据的处理为程序提供更为强大的读写功能。\"]},\"2024\":{\"h\":\"4. 抽象基类\",\"t\":[\"Java的IO流共涉及40多个类，实际上非常规则，都是从如下4个抽象基类派生的。\",\"由这四个类派生出来的子类名称都是以其父类名作为子类名后缀。\",\"8-2-2\"]},\"2025\":{\"h\":\"5. IO流体系\",\"t\":[\"类的识别技巧：\",\"Input：输入；\",\"Output：输出\",\"Stream：字节流\",\"Reader：输入字符流\",\"Writer：输出字符流\",\"8-2-3\"]},\"2026\":{\"h\":\"6. 节点流和处理流\"},\"2027\":{\"h\":\"6.1 节点流\",\"t\":[\"直接从数据源或目的地读写数据\",\"8-2-4\"]},\"2028\":{\"h\":\"6.2 处理流\",\"t\":[\"不直接连接到数据源或目的地，而是“连接”在已存在的流（节点流或处理流）之上，通过对数据的处理为程序提供更为强大的读写功能。\",\"8-2-5\"]},\"2029\":{\"h\":\"8-3. 流的基类\"},\"2030\":{\"h\":\"说明\",\"t\":[\"流的基类都是节点流\",\"8-3-1\"]},\"2031\":{\"h\":\"1. 输入流：InputStream & Reader\",\"t\":[\"InputStream 和 Reader 是所有输入流的基类。\"]},\"2032\":{\"h\":\"1.1 InputStream\",\"t\":[\"典型实现：FileInputStream\",\"FileInputStream 从文件系统中的某个文件中获得输入字节。FileInputStream用于读取非文本数据之类的原始字节流。\"]},\"2033\":{\"h\":\"1.2 Reader\",\"t\":[\"典型实现：FileReader\",\"要读取字符流，需要使用 FileReader\"]},\"2034\":{\"h\":\"2. 输出流：OutPutStream & Writer\"},\"2035\":{\"h\":\"2.1 OutPutStream\",\"t\":[\"典型实现：FileOutputStream\",\"FileOutputStream 从文件系统中的某个文件中获得输出字节。FileOutputStream用于写出非文本数据之类的原始字节流。\"]},\"2036\":{\"h\":\"2.2 Writer\",\"t\":[\"典型实现：FileWriter\",\"要写出字符流，需要使用 FileWriter\"]},\"2037\":{\"h\":\"3. 关闭流\",\"t\":[\"程序中打开的文件 IO 资源不属于内存里的资源，垃圾回收机制无法回收该资源，所以应该件 显式关闭文件 IO 资源。\"]},\"2038\":{\"h\":\"4. 字节流与字符流的选择\",\"t\":[\"文本文件->字符流，以字符而非字节为单位读取\",\"非文本文件->字节流：能够解析\",\"如果字符流操作非文本文件，会无法解析。如果字节流操作文本文件，在内存层面读（println）可能会乱码\"]},\"2039\":{\"h\":\"5. 节点流\",\"t\":[\"节点流是最基本的实现（典型实现），其他实现跟节点流类似。\",\"实际开发中，我们不会去直接使用节点流，因为他读写效率比较低。\"]},\"2040\":{\"h\":\"6. 流操作的基本步骤\",\"t\":[\"创建文件对象\",\"创建流对象（读/写）\",\"进行流的操作（读/写）\",\"关闭流（close） 以上操作需要进行异常处理\"]},\"2041\":{\"h\":\"7. 输入流与输出流的方法\",\"t\":[\"详见：内置函数>IO类\"]},\"2042\":{\"h\":\"8-4. 节点流\"},\"2043\":{\"h\":\"Ⅰ. 节点流介绍\",\"t\":[\"节点流是流基类的典型实现，直接从数据源或目的地读写数据。 实际开发中，我们不会去直接使用节点流，因为他读写效率比较低。\"]},\"2044\":{\"h\":\"1. 节点流的方法\",\"t\":[\"和流基类的方法一样。\",\"详见：内置函数>IO类\"]},\"2045\":{\"h\":\"2. 注意点\",\"t\":[\"定义文件路径时，注意：可以用“/”或者“\\\\”。\",\"在写入一个文件时，如果使用构造器FileOutputStream(file)，则目录下有同名文件将被覆盖。\",\"如果使用构造器FileOutputStream(file,true)，则目录下的同名文件不会被覆盖，在文件内容末尾追加内容。\",\"在读取文件时，必须保证该文件已存在，否则报异常。\",\"字节流操作字节，比如：.mp3，.avi，.rmvb，mp4，.jpg，.doc，.ppt\",\"字符流操作字符，只能操作普通文本文件。最常见的文本文件：.txt，.java，.c，.cpp 等语言的源代码。尤其注意.doc,excel,ppt这些不是文本文件\"]},\"2046\":{\"h\":\"Ⅱ. FileReader\",\"t\":[\"FileReader：字符流的数据读入\"]},\"2047\":{\"h\":\"1. FileReader的操作\"},\"2048\":{\"h\":\"1.1 初始化：创建流对象\",\"t\":[\"初始化需要处理异常： java.io.FileNotFoundException\",\"File f1 = new File(\\\"files/a.txt\\\"); //实例化FileReader对象，开启输入流,参数是文件对象 FileReader fr = new FileReader(f1); //方式二：直接使用文件名：构造器内部自动new File(文件名) FileReader fr = new FileReader(\\\"files/a.txt\\\"); \"]},\"2049\":{\"h\":\"1.2 read：数据读入\",\"t\":[\"每次只读取一个字节，返回值是char的ASCII码，如果返回-1，代表文件已经读完了。可以循环读取所有的数据。\",\"该方法需要处理异常：java.io.IOException\",\"int data = fr.read(); \"]},\"2050\":{\"h\":\"1.3 close：关闭流\",\"t\":[\"该方法需要处理异常：java.io.IOException\",\"fr.close(); \"]},\"2051\":{\"h\":\"2. FileReader的异常处理\",\"t\":[\"开启流、读取数据、关闭流都需要处理异常。\",\"由于关闭流是必须要进行的操作，所以要用try...catch...finally处理异常\"]},\"2052\":{\"h\":\"3. FileReader示例：文本文件读取\",\"t\":[\"public void fileReaderTest() { FileReader fr = null; //放外面，是因为close操作要用到fr try { //1.实例化File类的对象，指明要操作的文件 File f1 = new File(\\\"files/a.txt\\\"); //2.创造FileReader输入流 fr = new FileReader(f1); //3.仅需数据的读入，循环全部读入 int data = fr.read(); while(data != -1){ System.out.print((char)data); data = fr.read(); } } catch (IOException e) { e.printStackTrace(); } finally { try { if(fr != null){ //房子fr是null,参生空指针异常 //4.流的关闭 fr.close(); } } catch (IOException e) { e.printStackTrace(); } } } \"]},\"2053\":{\"h\":\"4. 一次读取多个字符\",\"t\":[\"使用read()的重载方法read(char[] cbuf)，一次读取多个字符\",\"public void fileReaderTest(){ File f1 = new File(\\\"files/a.txt\\\"); FileReader fr = null; try { fr = new FileReader(f1); char[] cbuf = new char[5]; int len = fr.read(cbuf); while(len != -1){ for(int i=0;i<len;i++){ System.out.println(cbuf[i]); } len = fr.read(cbuf); } } catch (IOException e) { e.printStackTrace(); } finally { try { if(fr != null) fr.close(); } catch (IOException e) { e.printStackTrace(); } } } \"]},\"2054\":{\"h\":\"4.1 代码解析\",\"t\":[\"①read(cbuf)：该步骤已经将数据读入到创建的char[] cbuf数组中了，返回值就是读取的字符数\",\"②双重循环：外循环是用来循环读取数据的，内循环是用来读取cbuf数组中的字符\"]},\"2055\":{\"h\":\"4.2 通过String输出char数组\",\"t\":[\"不一定非得用个内循环打印char数组，使用String也可以\",\"//内循环改为如下代码： String str = new String(cbuf,0,len); System.out.print(str); \"]},\"2056\":{\"h\":\"4.3 误区\",\"t\":[\"char[] cbuf = new char[5];char数组每次装 5个字符，下一次装载字符时，并非是空数组过去的，而是5个字符还在，装载时进行新旧字符的替换。\",\"当字符取模5有余数时，最后一趟是装不满的，也就是会有字符没有被替换，这时如果将数组中的字符全部取下来，就会取到错误的字符。\",\"//错误示例，cbuf.length并不能代表真实的字符数，最后一次可能会出错 for(int i = 0;i < cbuf.length;i++){ System.out.print(cbuf[i]); } \"]},\"2057\":{\"h\":\"Ⅲ. FileWriter\",\"t\":[\"FileWriter：字符流的数据写出\"]},\"2058\":{\"h\":\"说明\",\"t\":[\"输出操作，对应的File可以不存在的。并不会报异常，在输出的过程中，会自动创建此文件。\"]},\"2059\":{\"h\":\"1. 相关操作：详见流的基类\"},\"2060\":{\"h\":\"1.1 初始化：开启流\",\"t\":[\"需要处理java.io.FileNotFoundException异常\",\"File对应的硬盘中的文件如果存在：可以指定构造器的第二个参数：\",\"false：覆盖写；默认（可省略），对原有文件的覆盖\",\"true：追加写\",\"File f1 = new File(\\\"files/a1.txt\\\"); FileWriter fw = new FileWriter(f1,false); //方式二：直接使用文件名：构造器内部自动new File(文件名) FileWriter fw = new FileWriter(\\\"files/a1.txt\\\",false); \"]},\"2061\":{\"h\":\"1.2 write：数据写出\",\"t\":[\"会产生java.io.IOException异常，write有多种重载，详见流的基类\",\"fw.write(\\\"that's good\\\"); \"]},\"2062\":{\"h\":\"1.3 close：资源关闭\",\"t\":[\"会产生java.io.IOException异常\",\"fw.close(); \"]},\"2063\":{\"h\":\"2. 异常处理\",\"t\":[\"同上需要进行try...catch...finally处理\"]},\"2064\":{\"h\":\"3. FileWriter写出示例\",\"t\":[\"public void fileWriterTest(){ //1.提供File类的对象，指明写出到的文件 File f1 = new File(\\\"files/a1.txt\\\"); try { //2.提供FileWriter的对象，用于数据的写出 fw = new FileWriter(f1,true); //3.写出的操作，可多次调用write fw.write(\\\"that's good \\\\n\\\"); fw.write(\\\"are you ok\\\"); } catch (IOException e) { e.printStackTrace(); } finally { try { //4.流资源的关闭 if(fw != null) fw.close(); } catch (Exception e) { e.printStackTrace(); } } } \"]},\"2065\":{\"h\":\"4. FileReader与FileWriter结合示例：文件的复制\",\"t\":[\" public void testFileReaderFileWriter() { FileReader fr = null; FileWriter fw = null; try { //1.创建File类的对象，指明读入和写出的文件 File srcFile = new File(\\\"hello.txt\\\"); File destFile = new File(\\\"hello2.txt\\\"); //2.创建输入流和输出流的对象 fr = new FileReader(srcFile); fw = new FileWriter(destFile); //3.数据的读入和写出操作 char[] cbuf = new char[5]; int len;//记录每次读入到cbuf数组中的字符的个数 while((len = fr.read(cbuf)) != -1){ //每次写出len个字符 fw.write(cbuf,0,len); } } catch (IOException e) { e.printStackTrace(); } finally { //4.关闭流资源,两个都要关闭 try { if(fw != null) fw.close(); } catch (IOException e) { e.printStackTrace(); } try { if(fr != null) fr.close(); } catch (IOException e) { e.printStackTrace(); } } } \"]},\"2066\":{\"h\":\"5. 处理图片资源\",\"t\":[\"FileReader和FileWriter都无法处理图片资源，因为图片属于二进制资源，不是文本资源。\"]},\"2067\":{\"h\":\"Ⅳ. 字节流\",\"t\":[\"FileInputStream：字节流读入\",\"FileOutputStream：字节流写出\"]},\"2068\":{\"h\":\"说明\",\"t\":[\"字节流的操作流程和字符流是一样。用的方法也是一样的，无非是参数有char类型变成了byte类型。\",\"详见：流的基类\"]},\"2069\":{\"h\":\"1. 初始化\",\"t\":[\"File srcFile = new File(\\\"src.jpg\\\"); File desFile = new File(\\\"des.jpg\\\"); //FileInputStream：读入 FileInputStream fis = new FileInputStream(srcFile); //FileOutputStream:写出 FileOutputStream fos = new FileOutputStream(desFile); //方式二：直接使用文件名：构造器内部自动new File(文件名) FileInputStream fis = new FileInputStream(\\\"src.jpg\\\"); FileOutputStream fos = new FileOutputStream(\\\"des.jpg\\\"); \"]},\"2070\":{\"h\":\"2. 基本操作\",\"t\":[\"详见流的基类\",\"读：read方法，同上，只是参数类型变成了byte\",\"写：write方法，同上，只是参数类型变成了byte\",\"关闭资源：同上，close()\",\"异常：需要处理同样的异常\"]},\"2071\":{\"h\":\"3. 示例：创建copy方法，进行文件的复制\",\"t\":[\"要求：指定路径下文件的复制\",\"public void copyFile(String srcPath,String destPath){ FileInputStream fis = null; FileOutputStream fos = null; try { //1. 造文件 File srcFile = new File(srcPath); File destFile = new File(destPath); //2.造流 fis = new FileInputStream(srcFile); fos = new FileOutputStream(destFile); byte[] buffer = new byte[1024];//这里是byte[],而非char[] int len; //3.1 读数据 while((len = fis.read(buffer)) != -1){ //3.2 写数据 fos.write(buffer,0,len); } } catch (IOException e) { e.printStackTrace(); } finally { //4.关闭资源 if(fos != null){ try { fos.close(); } catch (IOException e) { e.printStackTrace(); } } if(fis != null){ try { fis.close(); } catch (IOException e) { e.printStackTrace(); } } } } \"]},\"2072\":{\"h\":\"8-5. 缓冲流\"},\"2073\":{\"h\":\"Ⅰ. 介绍\",\"t\":[\"为了提高数据读写的速度，Java API提供了带缓冲功能的流类，缓冲流是处理流的一种，使用的时候需要套接在已有流的基础上。\",\"作用：缓冲流的作用是提高流的读取、写出速度。\"]},\"2074\":{\"h\":\"原理和使用\",\"t\":[\"在使用这些流类时，会创建一个内部缓冲区数组，缺省使用8192个字节的缓冲区。\",\"8-5-1\",\"当读取数据时，数据按块读入缓冲区，其后的读操作则直接访问缓冲区\",\"当使用BufferedInputStream读取字节文件时，BufferedInputStream会一次性从文件中读取8192个(8Kb)，存在缓冲区中，直到缓冲区装满了，才重新从文件中读取下一个8192个字节数组。\",\"向流中写入字节时，不会直接写到文件，先写到缓冲区中直到缓冲区写满，BufferedOutputStream才会把缓冲区中的数据一次性写到文件里。 \",\"使用方法flush()可以强制将缓冲区的内容全部写入输出流\",\"关闭流的顺序和打开流的顺序相反。只要关闭最外层流即可，关闭最外层流也 会相应关闭内层节点流\",\"flush()方法的使用：手动将buffer中内容写入文件\",\"如果是带缓冲区的流对象的close()方法，不但会关闭流，还会在关闭流之前刷新缓冲区，关闭后不能再写出\"]},\"2075\":{\"h\":\"Ⅱ. 缓冲流的类\",\"t\":[\"缓冲流要“套接”在相应的节点流之上，根据数据操作单位可以把缓冲流分为：\"]},\"2076\":{\"h\":\"1. 字节流：读入\",\"t\":[\"rt.jar>java>io>BufferedInputStream\",\"class BufferedInputStream extends FilterInputStream { private static int DEFAULT_BUFFER_SIZE = 8192;//内部缓冲区数组默认大小 //该构造函数可以自定义内部缓冲区数组的大小 public BufferedInputStream(InputStream in, int size) { super(in); if (size <= 0) { throw new IllegalArgumentException(\\\"Buffer size <= 0\\\"); } buf = new byte[size]; } } \"]},\"2077\":{\"h\":\"2. 字节流：写出\",\"t\":[\"rt.jar>java>io>BufferedOutputStream\",\"class BufferedOutputStream extends FilterOutputStream { public BufferedOutputStream(OutputStream out) { this(out, 8192);//默认内部缓冲区数组大小。 } //该构造函数可以自定义内部缓冲区数组的大小 public BufferedOutputStream(OutputStream out, int size) { super(out); if (size <= 0) { throw new IllegalArgumentException(\\\"Buffer size <= 0\\\"); } buf = new byte[size];//自定义缓冲区数组大小 } } \"]},\"2078\":{\"h\":\"3. 字符流：读入\",\"t\":[\"rt.jar>java>io>BufferedReader\",\"public class BufferedReader extends Reader { private static int defaultCharBufferSize = 8192;//内部缓冲区数组默认大小 //该构造函数可以自定义内部缓冲区数组的大小 public BufferedReader(Reader in, int sz) { super(in); if (sz <= 0) throw new IllegalArgumentException(\\\"Buffer size <= 0\\\"); this.in = in; cb = new char[sz]; nextChar = nChars = 0; } } \"]},\"2079\":{\"h\":\"4. 字符流：写出\",\"t\":[\"rt.jar>java>io>BufferedWriter\",\"public class BufferedWriter extends Writer { private static int defaultCharBufferSize = 8192;//内部缓冲区数组默认大小 //该构造函数可以自定义内部缓冲区数组的大小 public BufferedWriter(Writer out, int sz) { super(out); if (sz <= 0) throw new IllegalArgumentException(\\\"Buffer size <= 0\\\"); this.out = out; cb = new char[sz]; nChars = sz; nextChar = 0; lineSeparator = java.security.AccessController.doPrivileged( new sun.security.action.GetPropertyAction(\\\"line.separator\\\")); } } \"]},\"2080\":{\"h\":\"Ⅲ. 基本操作\"},\"2081\":{\"h\":\"1. 基本操作方法\",\"t\":[\"读入数据：和节点流的操作一样，也是用read方法\",\"写出数据：和节点流的操作一样，也是用write方法\",\"flush：当缓冲区的数据存满时，会自动将数据读入/写出，也可以手动调用flush方法，将buffer中的内容读入/写出。\",\"close：关闭流的顺序和打开流的顺序相反，即：先关处理流，再关节点流。关闭最外层流也会相应关闭内层节点流，所以只关外层流也可以。 \",\"x.close();\"]},\"2082\":{\"h\":\"2. readLine：读取一行（BufferedReader）\",\"t\":[\"该方法是读取一行数据（根据换行符来判定）。\",\"阻塞：readLine()方法是阻塞的，如果在接收的数据中不含有'\\\\n','\\\\r'或者结束符时，往往导致进程挂起，从而程序无法继续。\",\"返回值：返回读到的数据，读到文件的结尾时才会返回null。\",\"网络编程：在IO模式下，readline是一直等待输入的（文件内容，或者标准输入流），只有遇到换行符，才会结束执行。\",\"示例：从文件中，一行一行的读，读一行，就在控制台输出一行。\",\"BufferedReader br = null; try { FileReader fr = new FileReader(\\\"files/a.txt\\\"); br = new BufferedReader(fr); String data = br.readLine(); while( data != null){ System.out.println(data); data = br.readLine(); } } catch (IOException e) { e.printStackTrace(); } finally { try { if(br != null) br.close(); } catch (IOException e) { e.printStackTrace(); } } \"]},\"2083\":{\"h\":\"3. newLine：输入换行符（BufferedWriter）\",\"t\":[\"在写出文件时，有时需要写出换行符，该方法就可以写出换行符，等价于 \\\"\\\\n\\\"\"]},\"2084\":{\"h\":\"4. 缓冲流-字节流：使用示例\",\"t\":[\"进行文件的复制：读入，再写出\",\"public void StreamTest(){ BufferedInputStream bis = null; BufferedOutputStream bos = null; try { //1.创建文件对象 File srcFile = new File(\\\"files/girl.jpg\\\"); File desFile = new File(\\\"files/girl-1.jpg\\\"); //2.1 创造流：节点流 FileInputStream fis = new FileInputStream(srcFile); FileOutputStream fos = new FileOutputStream(desFile); //2.2 创造流：在节点流上创造缓冲流 bis = new BufferedInputStream(fis); bos = new BufferedOutputStream(fos); //3.进行复制：读入、写出 byte[] buf = new byte[1024]; //使用byte[]参数的重载方法 int len = bis.read(buf); while(len != -1){ bos.write(buf,0,len); //0,len：防止最后一次buf出现不满载情况 len = bis.read(buf); //将数据读入，循环读 } } catch (IOException e) { e.printStackTrace(); } finally { //4.close：关闭所有流 try { if(bis != null) bis.close(); } catch (IOException e) { e.printStackTrace(); } try { if(bos != null) bos.close(); } catch (IOException e) { e.printStackTrace(); } } } \"]},\"2085\":{\"h\":\"5. 缓冲流-字符流：使用示例\",\"t\":[\"略，跟上面区别不大。\"]},\"2086\":{\"h\":\"6. 效率测试\",\"t\":[\"分别测试使用节点流和缓冲流进行文件的测试。\",\"使用System.currentTimeMillis进行计时，计算两者小号的时间。\",\"long start = System.currentTimeMillis(); String srcPath = \\\"01-视频.avi\\\"; String destPath = \\\"03-视频.avi\\\"; copyFileWithBuffered(srcPath,destPath); long end = System.currentTimeMillis(); System.out.println(\\\"复制操作花费的时间为：\\\" + (end - start)); //再进行节点流的时间计算，同上 \",\"结论：缓冲流消耗的时间，远小于节点流\"]},\"2087\":{\"h\":\"8-6. 转换流\"},\"2088\":{\"h\":\"Ⅰ. 转换流介绍\"},\"2089\":{\"h\":\"1. 说明\",\"t\":[\"转换流也是一种处理流：提供了在字节流和字符流之间的转换\",\"8-6-1\"]},\"2090\":{\"h\":\"2. 转换流的类\",\"t\":[\"Java API提供了两个转换流的类：\",\"InputStreamReader：将InputStream转为Reader（字节流输入->字符流输入）\",\"OutputStreamWriter：将Writer转为OutputStream（字符流输出->字节流输出）\"]},\"2091\":{\"h\":\"3. 作用\",\"t\":[\"提高操作效率：字节流中的数据都是字符时，转成字符流操作更高效。\",\"转码：进行转码，将文本文件转换成别的编码输出。 很多时候我们使用转换流来处理文件乱码问题。实现编码和解码的功能。 \",\"解码：字节、字节数组 --->字符数组、字符串\",\"编码：字符数组、字符串 ---> 字节、字节数组/\"]},\"2092\":{\"h\":\"4. 使用说明\",\"t\":[\"这两个流都是用来操作文本文件的，文本文件也可以做为字节流进行IO\",\"InputStreamReader的字符集参数要和文件本身的编码统一\",\"使用的方法、操作流程、异常处理，和流的基类基本一致。\"]},\"2093\":{\"h\":\"Ⅱ. InputStreamReader\"},\"2094\":{\"h\":\"说明\",\"t\":[\"InputStreamReader实现将字节的输入流按指定字符集转换为字符的输入流。需要和InputStream“套接”。\",\"public class InputStreamReader extends Reader {} \"]},\"2095\":{\"h\":\"1. 构造器1：不指定字符集\",\"t\":[\"参数是InputStream流，默认编码是utf-8,，即将字节流转为utf-8编码的字符流\",\"public InputStreamReader(InputStream in); =================================================== FileInputStream fis = new FileInputStream(\\\"File/a.txt\\\"); InputStreamReader isr = new InputStreamReader(fis); \"]},\"2096\":{\"h\":\"2. 构造器2：指定字符集\",\"t\":[\"提供第二个参数来指定编码集\",\"public InputSreamReader(InputStream in,String charsetName); =================================================== FileInputStream fis = new FileInputStream(\\\"File/a.txt\\\",\\\"utf-8\\\"); InputStreamReader isr = new InputStreamReader(fis); \"]},\"2097\":{\"h\":\"3. 主要方法\"},\"2098\":{\"h\":\"3.1 read\",\"t\":[\"和流基类的read方法类似，有三个重载方法。 以字符流的形式读取字符。\"]},\"2099\":{\"h\":\"3.2 getEncoding\",\"t\":[\"获取FileInputStream对象的字符集。\",\"String getEncoding(); FileInputStream fis = new FileInputStream(\\\"File/a.txt\\\",\\\"utf-8\\\"); InputStreamReader isr = new InputStreamReader(fis); String encoding = isr.getEncoding(); System.out.println(encoding);//UTF8 \"]},\"2100\":{\"h\":\"3.3 close\",\"t\":[\"关闭转换流，关闭该流会自动关闭参数InputStream流。\"]},\"2101\":{\"h\":\"4. 使用示例\",\"t\":[\"FileInputStream fis = new FileInputStream(\\\"File/a.txt\\\"); InputStreamReader isr = new InputStreamReader(fis,\\\"utf-8\\\"); char[] cbuf = new char[3]; int len = isr.read(cbuf); System.out.println(Arrays.toString(cbuf));//[a, b, c] \"]},\"2102\":{\"h\":\"Ⅲ. OutputStreamWriter\",\"t\":[\"实现将字符的输出流按指定字符集转换为字节的输出流。需要和OutputStream“套接”。\"]},\"2103\":{\"h\":\"1. 构造器1：不指定字符集\",\"t\":[\"public OutputStreamWriter(OutputStream out) \"]},\"2104\":{\"h\":\"2. 构造器2：指定字符集\",\"t\":[\"public OutputSreamWriter(OutputStream out,String charsetName) \"]},\"2105\":{\"h\":\"3. 主要方法\",\"t\":[\"write：将字符流以字节流的方式写出到文件中，字符的编码，由构造器指定。 \",\"和流基类的字节流方法基本一样，有三个重构方法\",\"flush：刷新流\",\"close：关闭流\"]},\"2106\":{\"h\":\"4. 综合示例：对文本文件进行转码\",\"t\":[\"//注意：为了结构清晰，这里直接把异常抛出了，实际应该使用try...catch处理 public void test2() throws Exception { //1.造文件、造流 FileInputStream fis = new FileInputStream(\\\"dbcp.txt\\\"); FileOutputStream fos = new FileOutputStream(\\\"dbcp_gbk.txt\\\"); InputStreamReader isr = new InputStreamReader(fis,\\\"utf-8\\\"); OutputStreamWriter osw = new OutputStreamWriter(fos,\\\"gbk\\\"); //2.读写过程 char[] cbuf = new char[20]; int le while((len = isr.read(cbuf)) != -1){ osw.write(cbuf,0,len); } //3.关闭资源 isr.close(); osw.close(); } \"]},\"2107\":{\"h\":\"Ⅳ. 补充：字符集\"},\"2108\":{\"h\":\"1. 编码表的由来\",\"t\":[\"计算机只能识别二进制数据，早期由来是电信号。为了方便应用计算机，让它可以识别各个国家的文字。就将各个国家的文字用数字来表示，并一一对应，形成一张表。这就是编码表。\"]},\"2109\":{\"h\":\"2. 常见编码集\",\"t\":[\"ASCII：美国标准信息交换码。用一个字节的7位可以表示。\",\"ISO8859-1：拉丁码表。欧洲码表，用一个字节的8位表示。\",\"GB2312：中国的中文编码表。最多两个字节编码所有字符\",\"GBK：中国的中文编码表升级，融合了更多的中文文字符号。最多两个字节编 \",\"GBK等双字节编码方式，用最高位是1或0表示两个字节和一个字节。\",\"Unicode：国际标准码，融合了目前人类使用的所有字符。为每个字符分配唯一的字符码。所有的文字都用两个字节来表示。\",\"UTF-8：变长的编码方式，可用1-4个字节来表示一个字符。\"]},\"2110\":{\"h\":\"3. 编码原理\",\"t\":[\"8-6-2\"]},\"2111\":{\"h\":\"4. Unicode与UTF-8的由来\",\"t\":[\"Unicode：在Unicode 出现之前，所有的字符集都是和具体编码方案绑定在一起的（即字符集≈ 编码方式），都是直接将字符和最终字节流绑定死了。Unicode是一种将全世界所有文字都包含的编码集，但是 Unicode不完美，这里就有三个问题：一个是，我们已经知道，英文字母只用一个字节表示就够了，第二个问题是如何才能区别Unicode和ASCII？计算机怎么知道两个字节表示一个符号，而不是分别表示两个符号呢？第三个，如果和GBK等双字节编码方式一样，用最高位是1或0表示两个字节和一个字节，就少了很多值无法用于表示字符，不够表示所有字符。Unicode在很长一段时间内无法推广，直到互联网的出现。\",\"UTF-8：面向传输的众多 UTF（UCS Transfer Format）标准出现了，顾名思义，UTF-8就是每次8个位传输数据，而UTF-16就是每次16个位。这是为传输而设计的编码，并使编码无国界，这样就可以显示全世界上所有文化的字符了。\",\"Unicode与UTF-8：Unicode只是定义了一个庞大的、全球通用的字符集，并为每个字符规定了唯一确定的编号，具体存储成什么样的字节流，取决于字符编码方案。推荐的Unicode编码是UTF-8和UTF-16。\"]},\"2112\":{\"h\":\"5. UTF-8的原理\",\"t\":[\"8-6-3\"]},\"2113\":{\"h\":\"6. 总结\",\"t\":[\"8-6-4\"]},\"2114\":{\"h\":\"8-7. 其他流\"},\"2115\":{\"h\":\"Ⅰ. 标准流\",\"t\":[\"System.in：标准的输入流，默认从键盘输入\",\"System.out：标准的输出流，默认从控制台输出\"]},\"2116\":{\"h\":\"1. System.in与System.out\",\"t\":[\"System.in：他是System类的一个变量，类型是InputStream。\",\"System.out：也是System类的一个变量，类型是PrintStream。 \",\"该类是：OutputStream的子类FilterOutputStream的子类。\"]},\"2117\":{\"h\":\"2. 重定向\",\"t\":[\"通过System类的setIn，setOut方法对默认设备进行改变。\",\"public static void setIn(InputStream in) public static void setOut(PrintStream out) \"]},\"2118\":{\"h\":\"3. 示例：标准输入流、输出流的练习\",\"t\":[\"要求：从键盘输入字符串，要求将读取到的整行字符串转成大写输出。然后继续进行输入操作，直至当输入“e”或者“exit”时，退出程序。\",\"方法一：使用Scanner实现，调用next()返回一个字符串\",\"方法二：使用System.in实现【以该方法为例】 \",\"System.in ---> 转换流 ---> BufferedReader的readLine()\",\"BufferedReader br = null; try { InputStreamReader isr = new InputStreamReader(System.in); br = new BufferedReader(isr); while (true) { System.out.println(\\\"请输入字符串：\\\"); String data = br.readLine(); if (\\\"e\\\".equalsIgnoreCase(data)||\\\"exit\\\".equalsIgnoreCase(data)){ System.out.println(\\\"程序结束\\\"); break; } String upperCase = data.toUpperCase(); System.out.println(upperCase); } } catch (IOException e) { e.printStackTrace(); } finally { if (br != null) { try { br.close(); } catch (IOException e) { e.printStackTrace(); } } } \"]},\"2119\":{\"h\":\"Ⅱ. 打印流\",\"t\":[\"OutPutStream和FileWriter的处理流，实现将基本数据类型的数据格式转化为字符串输出\"]},\"2120\":{\"h\":\"1. PrintStream和PrintWriter\",\"t\":[\"PrintStream写出字节流；PrintWriter写出字符流。\",\"提供了一系列重载的print()和println()方法，用于多种数据类型的输出\",\"PrintStream和PrintWriter的输出不会抛出IOException异常\",\"PrintStream和PrintWriter有自动flush功能\",\"PrintStream 打印的所有字符都使用平台的默认字符编码转换为字节。在需要写入字符而不是写入字节的情况下，应该使用 PrintWriter 类。\",\"System.out返回的是PrintStream的实例\"]},\"2121\":{\"h\":\"2. 示例：将基本数据类型输出到一个文件\",\"t\":[\"PrintStream ps = null; try { FileOutputStream fos = new FileOutputStream(new File(\\\"text.txt\\\")); // 创建打印输出流 ps = new PrintStream(fos, true); if (ps != null) {// 把标准输出流(控制台输出)改成文件 System.setOut(ps); } for (int i = 0; i <= 255; i++) { // 输出ASCII字符 System.out.print((char) i); if (i % 50 == 0) { // 每50个数据一行 System.out.println(); // 换行 } } } catch (FileNotFoundException e) { e.printStackTrace(); } finally { if (ps != null) { ps.close(); } } \"]},\"2122\":{\"h\":\"Ⅲ. 数据流\",\"t\":[\"为了方便地操作Java语言的基本数据类型和String的数据，可以使用数据流。\",\"作用：将java的基本数据类型和String数据写出到文件中，并能够将文件中的java基本数据类型和String数据读取还愿。\"]},\"2123\":{\"h\":\"1. 数据流的类\",\"t\":[\"DataInputStream：读入，“套接”在 InputStream 子类的流上\",\"DataOutputStream：写出，“套接”在OutputStream 子类的流上\"]},\"2124\":{\"h\":\"2. DataInputStream中的方法\",\"t\":[\"boolean readBoolean()\",\"byte readByte()\",\"char readChar()\",\"float readFloat()\",\"double readDouble()\",\"short readShort()\",\"long readLong()\",\"int readInt()\",\"String readUTF()\",\"void readFully(byte[] b)\"]},\"2125\":{\"h\":\"3. DataOutputStream中的方法\",\"t\":[\"将上述的方法的read改为相应的write即可。\"]},\"2126\":{\"h\":\"4. DataOutputStream：使用示例\",\"t\":[\"将内存中的字符串、基本数据类型的变量写出到文件中\",\"注意：该文件只能用DataInputStream来读入，其他方法无法解析，查看\",\"//1.创建流 FileOutputStream fos = new FileOutputStream(\\\"data.txt\\\"); DataOutputStream dos = new DataOutputStream(fos); //2.使用 DataInputStream 中的方法将各类数据写入文件 dos.writeUTF(\\\"刘建辰\\\"); dos.flush();//刷新操作，将内存中的数据写入文件 dos.writeInt(23); dos.flush(); dos.writeBoolean(true); dos.flush(); //3.关闭流 dos.close(); //异常处理：省略 \"]},\"2127\":{\"h\":\"5. DataInputStream：使用示例\",\"t\":[\"将文件中存储的基本数据类型变量和字符串读取到内存中，保存在变量中。\",\"注意：读取不同类型的数据的顺序要与当初写入文件时，保存的数据的顺序一致！\",\"//1.创建流 FileInputStream fis = new FileInputStream(\\\"data.txt\\\"); DataInputStream dis = new DataInputStream(fis); //2.使用DataOutputStream将文件中各类数据读入 String name = dis.readUTF(); int age = dis.readInt(); boolean isMale = dis.readBoolean(); System.out.println(\\\"name = \\\" + name); System.out.println(\\\"age = \\\" + age); System.out.println(\\\"isMale = \\\" + isMale); //3.关闭流 dis.close(); //异常处理：省略 \"]},\"2128\":{\"h\":\"Ⅳ. 随机存储文件流\",\"t\":[\"随机存储文件流 RandomAccessFile 声明在java.io包下，但直接继承于java.lang.Object类，没有继承抽象流基类。并且它实现了DataInput、DataOutput这两个接口，也就意味着这个类既可以读也可以写（既可以作为一个输入流，又可以作为一个输出流）。\"]},\"2129\":{\"h\":\"1. 随机访问机制\",\"t\":[\"RandomAccessFile 类支持 “随机访问” 的方式，程序可以直接跳到文件的任意地方来读、写文件；\",\"支持只访问文件的部分内容；\",\"可以向已存在的文件后追加内容。\"]},\"2130\":{\"h\":\"2. 记录指针与相关方法\",\"t\":[\"RandomAccessFile 对象包含一个记录指针，用以标示当前读写处的位置。RandomAccessFile 类对象可以自由移动记录指针。\"]},\"2131\":{\"h\":\"2.1 getFilePointer方法\",\"t\":[\"获取文件记录指针的当前位置\",\"long getFilePointer() \"]},\"2132\":{\"h\":\"2.2 seek方法\",\"t\":[\"将文件记录指针定位到 pos 位置\",\"void seek(long pos) \"]},\"2133\":{\"h\":\"3. 构造器与mode参数\",\"t\":[\"参数1：要操作的文件，可以是文件对象，也可以是文件名\",\"参数2：mode：访问模式\",\"public RandomAccessFile(File file, String mode) public RandomAccessFile(String name, String mode) \"]},\"2134\":{\"h\":\"3.1 mode\",\"t\":[\"共有4种访问模式，只需要注意前两种。\",\"r: 以只读方式打开\",\"rw ：打开以便读取和写入\",\"rwd: 打开以便读取和 写入；同步文件内容的更新\",\"rws: 打开以便读取和 写入； 同步文件内容和元数据 的\"]},\"2135\":{\"h\":\"3.2 r模式与rw模式\",\"t\":[\"r：只读，不会创建文件，而是会去读取一个已经存在的文件，如果读取的文件不存在则会出现异常。\",\"rw：读写，如果文件不存在则会去创建文件，如果存在则不会创建。\"]},\"2136\":{\"h\":\"4. 使用示例：copy文件\",\"t\":[\"//1.RandomAccessFile对象 RandomAccessFile rafRead = new RandomAccessFile(\\\"a.jpg\\\",\\\"r\\\"); RandomAccessFile rafWrite = new RandomAccessFile(\\\"a-1.jpg\\\",\\\"rw\\\"); //2.进行读和写,完成复制 byte[] buffer = new byte[1024]; int len = rafRead.read(buffer); while(len != -1){ rafWrite.write(buffer,0,len); } //3.关闭流 rafRead.close(); rafWrite.close(); //省略了异常处理 \"]},\"2137\":{\"h\":\"5. 使用指针\",\"t\":[\"该类的核心就是可以操作指针，在任意位置进行读写。\",\"读：只是简单的读。\",\"写：这里的写是覆盖写，即从指针位置开始写，新写入的内容会覆盖旧的内容。 \",\"注意：不是文件覆盖，而是内容覆盖；不是追加写，而是从指定指针位置处写；不是插入写，而是覆盖写；\"]},\"2138\":{\"h\":\"5.1 实现追加和插入效果\",\"t\":[\"追加效果：将指针指到文件末尾，进行写的操作，就是追加写。\",\"插入效果：将指针位置后面的数据赋值一份，写完后，再将复制的文件，进行追加写。\"]},\"2139\":{\"h\":\"5.2 示例：在指针位置进行写入\",\"t\":[\"//1.RandomAccessFile对象 RandomAccessFile raf1 = new RandomAccessFile(\\\"hello.txt\\\",\\\"rw\\\"); raf1.seek(3);//将指针调到角标为3的位置 //进行写入 raf1.write(\\\"xyz\\\".getBytes()); //关闭资源 raf1.close(); \"]},\"2140\":{\"h\":\"6. 断点续传\",\"t\":[\"可以用RandomAccessFile这个类，来实现一个多线程断点下载的功能，下载工具下载前都会建立两个临时文件，一个是与被下载文件大小相同的空文件，另一个是记录文件指针的位置文件，每次暂停的时候，都会保存上一次的指针，然后断点下载的时候，会继续从上一次的地方下载，从而实现断点下载或上传的功能。\"]},\"2141\":{\"h\":\"8-8. 对象流\"},\"2142\":{\"h\":\"介绍\",\"t\":[\"由ObjectInputStream 和OjbectOutputSteam两个类组成\",\"作用：用于存储和读取基本数据类型数据或对象的处理流。它的强大之处就是可以把Java中的对象写入到数据源中（序列化），也能把对象从数据源中还原回来（反序列化）。\",\"实际开发中，我们都是将对象格式化成JSON进行传输，而不是进行序列化传输。\"]},\"2143\":{\"h\":\"1. 序列化与反序列化\",\"t\":[\"序列化：用ObjectOutputStream类，将内存中的java对象保存到磁盘中或通过网络传输出去。\",\"反序列化：用ObjectInputStream类将磁盘文件中的对象还原为内存中的一个java对象。\"]},\"2144\":{\"h\":\"2. 对象的序列化机制\",\"t\":[\"对象序列化机制允许把内存中的Java对象转换成平台无关的二进制流，从而允许把这种二进制流持久地保存在磁盘上，或通过网络将这种二进制流传输到另一个网络节点。//当其它程序获取了这种二进制流，就可以恢复成原来的Java对象\",\"意义：序列化的好处在于可将任何实现了Serializable接口的对象转化为 字节数据，使其在保存和传输时可被还原\"]},\"2145\":{\"h\":\"3. 一些操作\"},\"2146\":{\"h\":\"3.1 初始化\",\"t\":[\"创建序列化流，需要套接在FileOutputStream上。\",\"//1. 创建序列化流，需要套接在FileOutputStream上 FileOutputStream fos = new FileOutputStream(\\\"object.dat\\\") ObjectOutputStream oos = new ObjectOutputStream(fos); //2.创建反序列化流,需要套接在FileInputStream上 FileInputStream fis = new FileInputStream(\\\"object.dat\\\") ObjectInputStream ois = new ObjectInputStream(fis); \"]},\"2147\":{\"h\":\"3.2 writeObject\",\"t\":[\"输出可序列化对象，每操作一次，就需要flush一次\",\"oos.writeObject(new xxObject(...)); \"]},\"2148\":{\"h\":\"3.3 readObject\",\"t\":[\"读取流中的对象，返回值类型是被反序列化对象的类。\",\"Object obj = ois.readObject(); String str = (String) obj; \"]},\"2149\":{\"h\":\"3.4 flush\",\"t\":[\"刷新操作，输出可序列化对象，每操作一次，就需要flush一次\",\"oos.flush(); \"]},\"2150\":{\"h\":\"4. 示例：字符串的序列化和反序列化\"},\"2151\":{\"h\":\"4.1 序列化\",\"t\":[\"//1.创建输入流、序列化流 FileOutputStream fos = new FileOutputStream(\\\"object.dat\\\") ObjectOutputStream oos = new ObjectOutputStream(fos); //2.使用writerObject方法进行序列化 oos.writeObject(new String(\\\"我爱n门\\\")); oos.flush();//刷新操作 //3.关闭流 oos.close(); //异常处理：省略 \"]},\"2152\":{\"h\":\"4.2 反序列化\",\"t\":[\"//1.创建写出流、反序列化流 FileInputStream fis = new FileInputStream(\\\"object.dat\\\") ObjectInputStream ois = new ObjectInputStream(fis); //2.使用readObejct方法进行反序列化 Object obj = ois.readObject(); String str = (String) obj; System.out.println(str); //3.关闭流 ois.close(); //异常处理：省略 \"]},\"2153\":{\"h\":\"5. 序列化类，需要满足的要求\",\"t\":[\"需要实现接口：Serializable \",\"基本数据类型和String都已经实现该接口了\",\"该接口是个标识接口，里面是空的，只是用来标识类可以进行实例化\",\"当前类提供一个全局常量：serialVersionUID\",\"除了当前Person类需要实现Serializable接口之外，还必须保证其内部所有属性也必须是可序列化的。（ \",\"默认情况下，基本数据类型可序列化\",\"要注意的是，某个属性的类型是其他类，这个类也需要能序列化\",\"序列化后的结果中，不包含static和transient修饰的成员变量\"]},\"2154\":{\"h\":\"6. 示例：自定义类实线序列化与反序列化\"},\"2155\":{\"h\":\"6.1 目标类\",\"t\":[\"public class Person implements Serializable{ public static final long serialVersionUID = 475463534532L; ...... } \"]},\"2156\":{\"h\":\"6.2 序列化\",\"t\":[\"//1.创建输入流、序列化流 FileOutputStream fos = new FileOutputStream(\\\"object.dat\\\") ObjectOutputStream oos = new ObjectOutputStream(fos); //2.使用writerObject方法进行序列化 oos.writeObject(new Person(\\\"王铭\\\",23)); oos.flush(); oos.writeObject(new Person(\\\"张学良\\\",23,1001,new Account(5000))); oos.flush(); //3.关闭流 oos.close(); //异常处理：省略 \"]},\"2157\":{\"h\":\"6.3 反序列化\",\"t\":[\"//1.创建写出流、反序列化流 FileInputStream fis = new FileInputStream(\\\"object.dat\\\") ObjectInputStream ois = new ObjectInputStream(fis); //2.使用readObejct方法进行反序列化 Person p = (Person) ois.readObject(); Person p1 = (Person) ois.readObject(); //进行toString输出 System.out.println(p); System.out.println(p1); //3.关闭流 ois.close(); //异常处理：省略 \"]},\"2158\":{\"h\":\"7. serialVersionUID\",\"t\":[\"凡是实现Serializable接口的类都有一个表示序列化版本标识符的静态变量：值可自定义。 如果类没有显示定义这个静态常量，它的值是Java运行时环境根据类的内部细节自动生成的。若类的实例变量做了修改，serialVersionUID 可能发生变化。故建议，显式声明，否则，在对象序列化后，如果对类进行了修改，将无法反序列化。\",\"反序列化时，会比对这个ID，一致后才能正常反序列化。\",\"private static final long serialVersionUID; public static final long serialVersionUID = 475463534532L; \"]},\"2159\":{\"h\":\"8-9. NIO2与Jar包\"},\"2160\":{\"h\":\"Ⅰ. NIO2\"},\"2161\":{\"h\":\"1. Java NIO概述\",\"t\":[\"Java NIO (New IO，Non-Blocking IO)是从Java 1.4版本开始引入的一套新的IO API，可以替代标准的Java IO API。NIO与原来的IO有同样的作用和目的，但是使用的方式完全不同，NIO支持面向缓冲区的(IO是面向流的)、基于通道的IO操作。NIO将以更加高效的方式进行文件的读写操作。\",\"Java API中提供了两套NIO，一套是针对标准输入输出NIO，另一套就是网络编程NIO。\",\"java.nio.channels.Channel \",\"FileChannel:处理本地文件\",\"SocketChannel：TCP网络编程的客户端的Channel\",\"ServerSocketChannel:TCP网络编程的服务器端的Channel\",\"DatagramChannel：UDP网络编程中发送端和接收端的Channe\"]},\"2162\":{\"h\":\"2. NIO.2 概述\",\"t\":[\"随着 JDK 7 的发布，Java对NIO进行了极大的扩展，增强了对文件处理和文件系统特性的支持，以至于我们称他们为 NIO.2。因为 NIO 提供的一些功能，NIO已经成为文件处理中越来越重要的部分。\"]},\"2163\":{\"h\":\"3. 核心API\",\"t\":[\"早期的Java只提供了一个File类来访问文件系统，但File类的功能比较有限，所提供的方法性能也不高。而且，大多数方法在出错时仅返回失败，并不会提供异常信息。\"]},\"2164\":{\"h\":\"3.1 Path接口\",\"t\":[\"NIO. 2为了弥补这种不足，引入了Path接口，代表一个平台无关的平台路径，描述了目录结构中文件的位置。Path可以看成是File类的升级版本，实际引用的资源也可以不存在。\",\"//以前IO操作都是这样写的: import java.io.File; File file = new File(\\\"index.html\\\"); //在Java7 中，我们可以这样写： import java.nio.file.Path; import java.nio.file.Paths; Path path = Paths.get(\\\"index.html\\\"); \"]},\"2165\":{\"h\":\"3.2 Paths和Files工具类\",\"t\":[\"NIO.2在java.nio.file包下还提供了Files、Paths工具类，Files包含了大量静态的工具方法来操作文件；Paths则包含了两个返回Path的静态工厂方法。\"]},\"2166\":{\"h\":\"4. Path接口常用方法\",\"t\":[\"String toString() ： 返回调用 Path 对象的字符串表示形式\",\"boolean startsWith(String path) : 判断是否以 path 路径开始\",\"boolean endsWith(String path) : 判断是否以 path 路径结束\",\"boolean isAbsolute() : 判断是否是绝对路径\",\"Path getParent() ：返回Path对象包含整个路径，不包含 Path 对象指定的文件路径\",\"Path getRoot() ：返回调用 Path 对象的根路径\",\"Path getFileName() : 返回与调用 Path 对象关联的文件名\",\"int getNameCount() : 返回Path 根目录后面元素的数量\",\"Path getName(int idx) : 返回指定索引位置 idx 的路径名称\",\"Path toAbsolutePath() : 作为绝对路径返回调用 Path 对象\",\"Path resolve(Path p) :合并两个路径，返回合并后的路径对应的Path对象\",\"File toFile(): 将Path转化为File类的对象\"]},\"2167\":{\"h\":\"5. Paths类的方法\",\"t\":[\"Paths 类提供的静态 get() 方法用来获取 Path 对象：\",\"static Path get(String first, String … more) : 用于将多个字符串串连成路径\",\"static Path get(URI uri): 返回指定uri对应的Path路径\"]},\"2168\":{\"h\":\"6. Files类常用方法\",\"t\":[\"java.nio.file.Files 用于操作文件或目录的工具类。\",\"Path copy(Path src, Path dest, CopyOption … how) : 文件的复制\",\"Path createDirectory(Path path, FileAttribute<?> … attr) : 创建一个目录\",\"Path createFile(Path path, FileAttribute<?> … arr) : 创建一个文件\",\"void delete(Path path) : 删除一个文件/目录，如果不存在，执行报错\",\"void deleteIfExists(Path path) : Path对应的文件/目录如果存在，执行删除\",\"Path move(Path src, Path dest, CopyOption…how) : 将 src 移动到 dest 位置\",\"long size(Path path) : 返回 path 指定文件的大小\",\"boolean exists(Path path, LinkOption … opts) : 判断文件是否存在\",\"boolean isDirectory(Path path, LinkOption … opts) : 判断是否是目录\",\"boolean isRegularFile(Path path, LinkOption … opts) : 判断是否是文件\",\"boolean isHidden(Path path) : 判断是否是隐藏文件\",\"boolean isReadable(Path path) : 判断文件是否可读\",\"boolean isWritable(Path path) : 判断文件是否可写\",\"boolean notExists(Path path, LinkOption … opts) : 判断文件是否不存在\",\"SeekableByteChannel newByteChannel(Path path, OpenOption…how) : 获取与指定文件的连接，how 指定打开方式\",\"DirectoryStream<Path> newDirectoryStream(Path path) : 打开 path 指定的目录\",\"InputStream newInputStream(Path path, OpenOption…how):获取 InputStream 对象\",\"OutputStream newOutputStream(Path path, OpenOption…how) : 获取 OutputStream 对象\"]},\"2169\":{\"h\":\"Ⅱ. 第三方Jar包\",\"t\":[\"我们在开发中，可以直接使用第三方封装好的IO流操作包。这些第三方包底层用的也是基本的IO流操作。这些封装后的IO操作更加简单，高效。\"]},\"2170\":{\"h\":\"9-1. 概述\",\"t\":[\"提示\",\"更多网络编程内容详见：通信协议和JavaWeb\"]},\"2171\":{\"h\":\"简介\",\"t\":[\"Java是 Internet 上的语言，它从语言级上提供了对网络应用程序的支持，程序员能够很容易开发常见的网络应用程序。\",\"Java提供的网络类库，可以实现无痛的网络连接，联网的底层细节被隐藏在 Java 的本机安装系统里，由 JVM 进行控制。并且 Java 实现了一个跨平台的网络库， 程序员面对的是一个统一的网络编程环境。\"]},\"2172\":{\"h\":\"1. 网络基础\",\"t\":[\"计算机网络：把分布在不同地理区域的计算机与专门的外部设备用通信线路互连成一个规模大、功能强的网络系统，从而使众多的计算机可以方便地互相传递信息、共享硬件、软件、数据信息等资源。\",\"网络编程的目的：直接或间接地通过网络协议与 其它计算机实现数据交换，进行通讯。\",\"网络编程中的主要问题 \",\"如何 准确地定位网络上一台或多台主机；定位主机上的特定的应用\",\"找到主机后如何可靠高效地进行数据传输\"]},\"2173\":{\"h\":\"2. 网络通信的要素\",\"t\":[\"IP和端口号：解决如何找到和定位主机\",\"网络通信协议：解决如何高效的进行数据传输\"]},\"2174\":{\"h\":\"3. 如何实现网络通信\",\"t\":[\"通信双方的地址：IP、端口号\",\"一定的规则：网络通信协议 \",\"OSI参考模型：模型过于理想化，未能在因特网上进行广泛推广\",\"TCP/IP参考模型(或TCP/IP协议)：事实上的国际标准。\"]},\"2175\":{\"h\":\"4. 网络通信协议\",\"t\":[\"9-1-1\"]},\"2176\":{\"h\":\"5. 通信过程\",\"t\":[\"9-1-2\"]},\"2177\":{\"h\":\"9-2. IP与端口号\"},\"2178\":{\"h\":\"Ⅰ. IP与端口号\"},\"2179\":{\"h\":\"1. hostAddress：IP地址介绍\",\"t\":[\"唯一的标识 Internet 上的计算机（通信实体）\"]},\"2180\":{\"h\":\"2. IP地址分类\"},\"2181\":{\"h\":\"2.1 分类方式1：IPV4和IPV6\",\"t\":[\"IPV4：4个字节组成，4个0-255。大概42亿，30亿都在北美，亚洲4亿。2011年初已经用尽。以点分十进制表示，如192.168.0.1\",\"IPV6：128位（16个字节），写成8个无符号整数，每个整数用四个十六进制位表示，数之间用冒号（：）分开 \",\"如：3ffe:3201:1401:1280:c8ff:fe4d:db39:1984\"]},\"2182\":{\"h\":\"2.2 分类方式2：公网地址和私有地址\",\"t\":[\"公网地址：万维网使用\",\"私有地址：局域网使用。 \",\"192.168.开头的就是私有址址，范围即为192.168.0.0--192.168.255.255\"]},\"2183\":{\"h\":\"3. 本机IP\",\"t\":[\"本地回环地址(hostAddress)：127.0.0.1 主机名(hostName)：localhost\"]},\"2184\":{\"h\":\"4. hostName：域名\",\"t\":[\"用来对应IP地址，域名需要进行解析才能与IP地址对应。\",\"当在连接网络时输入一个主机的域名后，域名服务器(DNS)负责将域名转化成IP地址，这样才能和主机建立连接。\",\"9-2-1\"]},\"2185\":{\"h\":\"5. 端口号\",\"t\":[\"端口号标识正在计算机上运行的进程（程序），不同的进程有不同的端口号，被规定为一个16位的整数，范围： 0~65535。\",\"9-2-2\"]},\"2186\":{\"h\":\"6. 端口分类：\",\"t\":[\"公认端口：0~1023。被预先定义的服务通信占用（如：HTTP占用端口80，FTP占用端口21，Telnet占用端口23）\",\"注册端口：1024~49151。分配给用户进程或应用程序。（如：Tomcat占用端口8080，MySQL占用端口3306，Oracle占用端口1521等）\",\"动态/私有端口：49152~65535。自己写的程序用的。\"]},\"2187\":{\"h\":\"7. Socket\",\"t\":[\"端口号与IP 地址的组合得出一个网络套接字： 接字：Socket。\"]},\"2188\":{\"h\":\"Ⅱ. InetAddress类\"},\"2189\":{\"h\":\"readme\",\"t\":[\"Internet上的主机有两种方式表示地址：\",\"域名(hostName)：www.google.com\",\"IP 地址(hostAddress)：202.108.35.210\"]},\"2190\":{\"h\":\"1. 介绍\",\"t\":[\"class：rt.jar>java>net>InetAddress\",\"InetAddress类主要表示IP地址，两个子类：Inet4Address、Inet6Address。\",\"InetAddress 类对象含有一个 Internet 主机地址的域名和IP地址\"]},\"2191\":{\"h\":\"2. 构造器\",\"t\":[\"InetAddress 类没有提供公共的构造器，而是提供 了 如下几个 静态方法来获取InetAddress\"]},\"2192\":{\"h\":\"2.1 getLocalHost：获得本地IP对象\",\"t\":[\"public static InetAddress getLocalHost() throws UnknownHostException{...}; ================================================================== InetAddress ip = InetAddress.getLocalHost(); System.out.println(ip);//Viktor/192.168.31.247 \"]},\"2193\":{\"h\":\"2.2 getByName\",\"t\":[\"根据参数获得IP对象（参数ip地址字符串或域名字符串）。\",\"public static InetAddress getByName(String host) =========================================================== InetAddress inet2 = InetAddress.getByName(\\\"www.google.com\\\"); System.out.println(inet2); //www.google.com/199.96.59.61 InetAddress inet3 = InetAddress.getByName(\\\"199.96.59.61\\\"); System.out.println(inet3); //199.96.59.61 \"]},\"2194\":{\"h\":\"3. getHostAddress\",\"t\":[\"以文本的形式，返回IP地址字符串\",\"public String getHostAddress(); ================================================= InetAddress inet4 = InetAddress.getByName(\\\"www.mi.com\\\"); String inetHostAddress = inet4.getHostAddress(); System.out.println(inetHostAddress);//113.106.97.4 \"]},\"2195\":{\"h\":\"4. getHostName：获取IP地址的主机名\",\"t\":[\"String getHostName() ================================================= InetAddress inet4 = InetAddress.getByName(\\\"www.mi.com\\\"); String hostName = inet4.getHostName(); System.out.println(hostName); //www.mi.com \"]},\"2196\":{\"h\":\"5. isReachable：测试是否可以达到该地址\",\"t\":[\"参数是超时的时间，单位是ms时间戳\",\"boolean isReachable(int timeout) ================================================= InetAddress inet4 = InetAddress.getByName(\\\"www.mi.com\\\"); boolean reachable = inet4.isReachable(200); System.out.println(reachable); //true \"]},\"2197\":{\"h\":\"9-3. 网络协议\"},\"2198\":{\"h\":\"Ⅰ. 网络通信协议\"},\"2199\":{\"h\":\"1. 网络通信协议\",\"t\":[\"计算机网络中实现通信必须有一些约定，即通信协议.\",\"对速率、传输代码、代码结构、传输控制步骤、出错控制等制定标准。\"]},\"2200\":{\"h\":\"2. 通信协议的分层\",\"t\":[\"计算机网络通信涉及内容很多，比如指定源地址和目标地址，加密解密，压缩解压缩，差错控制，流量控制，路由控制，如何实现如此复杂的网络协议呢？\",\"在制定协议时，把复杂成份分解成一些简单的成份，再将它们复合起来。\",\"最常用的复合方式是层次方式，即同层间可以通信、上一层可以调用下一层，而与再下一层不发生关系。各层互不影响，利于系统的开发和扩展。\"]},\"2201\":{\"h\":\"Ⅱ. TCP与UDP\"},\"2202\":{\"h\":\"1. 传输层协议\",\"t\":[\"传输层协议中有两个非常重要的协议：\",\"传输控制协议TCP(Transmission Control Protocol)\",\"用户数据报协议UDP(User Datagram Protocol)。\"]},\"2203\":{\"h\":\"2. TCP/IP 协议簇\",\"t\":[\"TCP/IP 以其两个主要协议：传输控制协议(TCP) 和网络互联协议(IP)而得名，实际上是一组协议，包括多个具有不同功能且互为关联的协议。\",\"TCP/IP协议模型从更实用的角度出发，形成了高效的四层体系结构，即物理链路层、IP层、传输层和应用层。\",\"IP协议：IP(Internet Protocol)协议是网络层的主要协议，支持网间互连的数据通信。\"]},\"2204\":{\"h\":\"3. TCP协议\",\"t\":[\"使用TCP协议前，须先建立TCP连接，形成传输数据通道\",\"传输前，采用“ 三次握手”方式，点对点通信，是可靠的\",\"TCP协议进行通信的两个应用进程：客户端、服务端。\",\"在连接中可进行大数据量的传输\",\"传输完毕，需释放已建立的连接，效率低\"]},\"2205\":{\"h\":\"4. UDP协议\",\"t\":[\"常用于：视频播放。\",\"将数据、源、目的封装成数据包，不需要建立连接\",\"每个数据报的大小限制在64K内\",\"发送不管对方是否准备好，接收方收到也不确认，故是不可靠的\",\"可以广播发送\",\"发送数据结束时无需释放资源，开销小，速度快\"]},\"2206\":{\"h\":\"5. TCP的三次握手\",\"t\":[\"形象类比：A（客户端）与B（服务端）进行对话\",\"A：B，你好，我是A；\",\"B：A，你好，我是B，我知道你是A\",\"A：B，OK，我现在知道你知道我是A了。 结论：至此，三次对话，双方都知道对方是谁了，也知道对方知道自己是谁了。\",\"9-3-1\"]},\"2207\":{\"h\":\"6. TCP的四次挥手\",\"t\":[\"客户端：我要断开连接了->服务端\",\"服务端：我知道了->客户端\",\"服务端：连接断开->客户端\",\"客户端：测试是否断开->服务端\",\"9-3-2\"]},\"2208\":{\"h\":\"9-4. Socket\"},\"2209\":{\"h\":\"1. 说明\",\"t\":[\"网络上具有唯一标识的IP地址和端口号组合在一起才能构成唯一能识别的标识符套接字 Socket\",\"利用套接字(Socket)开发网络应用程序早已被广泛的采用，以至于成为事实上的标准。\",\"网络通信其实就是Socket间的通信。 \",\"通信的两端都要有Socket，是两台机器间通信的端点。\",\"Socket允许程序把网络连接当成一个流，数据在两个Socket间通过IO传输。\",\"一般主动发起通信的应用程序属客户端，等待通信请求的为服务端。\"]},\"2210\":{\"h\":\"2. Socket分类\",\"t\":[\"流套接字（stream socket）：使用TCP提供可依赖的字节流服务\",\"数据报套接字（datagram socket）：使用UDP提供“尽力而为”的数据报服务\"]},\"2211\":{\"h\":\"3. Socket类常用构造器\"},\"2212\":{\"h\":\"3.1 根据IP创建\",\"t\":[\"创建一个流套接字并将其连接到指定IP 地址的指定端口号。\",\"public Socket(InetAddress address,int port)throws IOException \"]},\"2213\":{\"h\":\"3.2 根据host创建\",\"t\":[\"创建一个流套接字并将其连接到指定主机上的指定端口号。\",\"public Socket(String host,int port)throws UnknownHostException,IOException \"]},\"2214\":{\"h\":\"4. Socket类常用方法\",\"t\":[\"public InputStream getInputStream()返回此套接字的输入流。可以用于接收网络消息\",\"public OutputStream getOutputStream()返回此套接字的输出流。可以用于发送网络消息\",\"public InetAddress getInetAddress()此套接字连接到的远程 IP 地址；如果套接字是未连接的，则返回 null。\",\"public InetAddress getLocalAddress()获取套接字绑定的本地地址。 即本端的IP地址\",\"public int getPort()此套接字连接到的远程端口号；如果尚未连接套接字，则返回0。\",\"public int getLocalPort()返回此套接字绑定到的本地端口。 如果尚未绑定套接字，则返回 -1。即本端的端口号。\",\"public void close()关闭此套接字。套接字被关闭后，便不可在以后的网络连接中使用（即无法重新连接或重新绑定）。需要创建新的套接字对象。 关闭此套接字也将会关闭该套接字的 InputStream 和OutputStream。\",\"public void shutdownInput()如果在套接字上调用 shutdownInput() 后从套接字输入流读取内容，则流将返回 EOF（文件结束符）。即不能在从此套接字的输入流中接收任何数据。\",\"public void shutdownOutput()禁用此套接字的输出流。对于 TCP 套接字，任何以前写入的数据都将被发送，并且后跟 TCP 的正常连接终止序列。 如果在套接字上调用 shutdownOutput() 后写入套接字输出流，\",\"则该流将抛出 IOException。 即不能通过此套接字的输出流发送任何数据。\"]},\"2215\":{\"h\":\"9-5. TCP编程\"},\"2216\":{\"h\":\"1. 基于Socket的TCP编程\",\"t\":[\"Java语言的基于套接字编程分为服务端编程和客户端编程，其通信模型如图所示：\",\"9-5-1\"]},\"2217\":{\"h\":\"2. 客户端Socket\",\"t\":[\"客户端Socket 的工作过程包含以下四个基本的步骤\",\"创建Socket：根据指定服务端的 IP 地址或端口号构造 Socket 类对象。若服务器端 响应，则建立客户端到服务器的通信线路。若连接失败，会出现异常。\",\"打开连接到Socket的输入/写出流 \",\"使用 getInputStream()方法获得输入流\",\"使用 getOutputStream()方法获得输出流，进行数据传输\",\"按照一定的协议对Socket进行读/写操作 \",\"通过输入流读取服务器放入线路的信息（但不能读取自己放入线路的信息）\",\"通过输出流将信息写入线程\",\"关闭Socket：断开客户端到服务器的连接，释放线路\"]},\"2218\":{\"h\":\"3. 客户端创建Socket对象\",\"t\":[\"客户端程序可以使用Socket类创建对象， 创建的同时会自动向服务器方发起连接。\"]},\"2219\":{\"h\":\"3.1 Socket的构造器\",\"t\":[\"public Socket(InetAddress address,int port)throws IOException public Socket(String host,int port)throws UnknownHostException,IOException \"]},\"2220\":{\"h\":\"3.2 示例\",\"t\":[\"public void client() throws IOException { //1.创建Socket对象,参数是服务器端的IP和端口号 Socket clientSocket = new Socket(\\\"127.0.0.1\\\", 2333); //2.返回此Socket对象的输出流,可以用于发送网络消息 OutputStream out = clientSocket.getOutputStream(); //3.进行输出byte[] out.write(\\\"hello\\\".getBytes()); //关闭Socket clientSocket.close(); } \"]},\"2221\":{\"h\":\"4. 服务器端Socket\",\"t\":[\"服务器程序的工作过程包含以下四个基本的步骤\",\"创建服务端的ServerSocket：调用 ServerSocket(int port) 创建一个服务器端套接字，并绑定到指定端口上。用于监听客户端的请求。\",\"监听连接请求：调用 accept()监听连接请求，如果客户端请求连接，则接受连接，返回通信套接字对象\",\"获取输入流和输出流：调用该Socket 类对象的 getOutputStream() 和 getInputStream ()获取输出流和输入流，开始网络数据的发送和接收。\",\"关闭ServerSocket：客户端访问结束，关闭通信套接字。\"]},\"2222\":{\"h\":\"5. 服务器端建立ServerSocket\"},\"2223\":{\"h\":\"5.1 创建ServerSocket对象\",\"t\":[\"ServerSocket 对象负责等待客户端请求建立套接字连接，类似邮局某个窗口中的业务员。也就是说， 服务器必须事先建立一个等待客户请求建立套接字的 连接的ServerSocket 对象。\",\"该类的构造器，接受一个端口号作为参数，端口号就是本服务端的端口号，客户端通过服务端的ip和创建ServerSocket对象时指定的端口号，来找到服务端。\",\"public ServerSocket(int port) throws IOException; \"]},\"2224\":{\"h\":\"5.2 accept方法\",\"t\":[\"所谓“接收”客户的套接字请求，就是accept()方法会返回一个 Socket 对象。\",\"这个Socket对象就是客户端的Socket对象，有了该对象就可以与客户端进行通信 了。\"]},\"2225\":{\"h\":\"5.3 使用示例\",\"t\":[\"public void server() throws IOException { //1.创建服务器套接字对象：ServerSocket ServerSocket serverSocket = new ServerSocket(2333); //2.监听接受客户端的请求，并获取请求的套接字对象 Socket client = serverSocket.accept(); //3.根据请求的套接字对象，获取请求时发送过来的流对象 InputStream inputStream = client.getInputStream(); //4.使用获取的流对象read流的数据 byte[] buf = new byte[1024]; int num = inputStream.read(buf); String res = new String(buf, 0, num); System.out.println(res); //5.关闭服务器套接字和获取的客户端套接字 client.close(); serverSocket.close(); } \"]},\"2226\":{\"h\":\"6. TCP网络编程示例\",\"t\":[\"就是把上面两个方法结合起来。\",\"先启动服务端：调用服务端方法：server()，此时服务端将一直处于监听状态，等待客户端连接。\",\"再启动客户端：调用客户端方法：client()，注意ip和端口\",\"此时客户端与服务端连接成功，客户端开始想服务端传输数据，服务端接受到数据。\"]},\"2227\":{\"h\":\"9-6. UDP编程\"},\"2228\":{\"h\":\"Ⅰ. UDP网络编程\"},\"2229\":{\"h\":\"1. UDP网络通信\",\"t\":[\"类 DatagramSocket 和 DatagramPacket 实现了基于 UDP 协议网络程序。\",\"UDP数据报通过数据报套接字 DatagramSocket 发送和接收，系统不保证UDP数据报一定能够安全送到目的地，也不能确定什么时候可以抵达。\",\"DatagramPacket 对象封装了UDP数据报，在数据报中包含了发送端的IP地址和端口号以及接收端的IP地址和端口号。\",\"UDP协议中每个数据报都给出了完整的地址信息，因此无须建立发送方和接收方的连接。如同发快递包裹一样。\"]},\"2230\":{\"h\":\"2. UDP通信流程\",\"t\":[\"发送端与接收端是两个独立的运行程序\",\"DatagramSocket与DatagramPacket\",\"建立发送端，接收端\",\"建立数据包\",\"调用Socket的发送、接收方法\",\"关闭Socket\"]},\"2231\":{\"h\":\"3. 发送端示例\",\"t\":[\"DatagramSocket ds = null; try { ds = new DatagramSocket(); byte[] by = \\\"hello,atguigu.com\\\".getBytes(); DatagramPacket dp = new DatagramPacket (by, 0, by.length,InetAddress.getByName(\\\"127.0.0.1\\\"), 10000); ds.send(dp); } catch (Exception e) { e.printStackTrace(); } finally { if (ds != null) ds.close(); } \"]},\"2232\":{\"h\":\"4. 接收端示例\",\"t\":[\"在接收端，要指定监听的接口\",\"DatagramSocket ds = null; try { ds = new DatagramSocket(10000); byte[] by = new byte[1024]; DatagramPacket dp = new DatagramPacket(by, by.length); ds.receive(dp); String str = new String(dp.getData(), 0, dp.getLength()); System.out.println(str + \\\"--\\\" + dp.getAddress()); } catch (Exception e) { e.printStackTrace(); } finally { if (ds != null) ds.close(); } \"]},\"2233\":{\"h\":\"Ⅱ. DatagramSocket\",\"t\":[\"DatagramSocket 类的常用方法如下：\",\"public DatagramSocket(int port)创建数据报套接字并将其绑定到本地主机上的指定端口。套接字将被绑定到通配符地址，IP 地址由内核来选择。\",\"public DatagramSocket(int port,InetAddress laddr)创建数据报套接字，将其绑定到指定的本地地址。本地端口必须在 0 到 65535 之间（包括两者）。如果 IP 地址为 0.0.0.0，套接字将被绑定到通配符地址，IP 地址由内核选择。\",\"public void close()关闭此数据报套接字。\",\"public void send(DatagramPacket p)从此套接字发送数据报包。DatagramPacket 包含的信息指示：将要发送的数据、其长度、远程主机的IP 地址和远程主机的端口号。\",\"public void receive(DatagramPacket p)从此套接字接收数据报包。当此方法返回时，DatagramPacket的缓冲区填充了接收的数据。数据报包也包含发送方的 IP 地址和发送方机器上的端口号。 此方法在接收到数据报前一直阻塞。数据报包对象的 length 字段包含所接收信息的长度。如果信息比包的长度长，该信息将被截短。\",\"public InetAddress getLocalAddress()获取套接字绑定的本地地址。\",\"public int getLocalPort()返回此套接字绑定的本地主机上的端口号。\",\"public InetAddress getInetAddress()返回此套接字连接的地址。如果套接字未连接，则返回null。\",\"public int getPort()返回此套接字的端口。如果套接字未连接，则返回-1。\"]},\"2234\":{\"h\":\"Ⅲ. DatagramPacket\",\"t\":[\"DatagramPacket 类的常用方法如下\",\"public DatagramPacket(byte[] buf,int length)构造 DatagramPacket，用来接收长度为 length 的数据包。 length 参数必须小于等于 buf.length。\",\"public DatagramPacket(byte[] buf,int length,InetAddress address,int port)构造数据报包，用来将长度为 length 的包发送到指定主机上的指定端口号。length参数必须小于等于 buf.length。\",\"public InetAddress getAddress()返回某台机器的 IP 地址，此数据报将要发往该机器或者是从该机器接收到的。\",\"public int getPort()返回某台远程主机的端口号，此数据报将要发往该主机或者是从该主机接收到的。\",\"public byte[] getData()返回数据缓冲区。接收到的或将要发送的数据从缓冲区中的偏移量 offset 处开始，持续 length 长度。\",\"public int getLength()返回将要发送或接收到的数据的长度。\"]},\"2235\":{\"h\":\"9-7. URL编程\"},\"2236\":{\"h\":\"1. URL介绍\",\"t\":[\"URL(Uniform Resource Locator)：统一资源定位符，它表示 Internet 上某一 资源的地址。\",\"它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源。通过 URL 我们可以访问 Internet 上的各种网络资源，比如最常见的 www，ftp站点。\",\"浏览器通过解析给定的 URL 可以在网络上查找相应的文件或其他资源。\"]},\"2237\":{\"h\":\"2. URL的基本结构\",\"t\":[\"由5部分组成：< 传输协议>://< 主机名>:< 端口号>/< 文件名># 片段名?\",\"#片段名：即锚点\",\"参数列表格式：参数名=参数值&参数名=参数值....\",\"http://192.168.1.100:8080/helloworld/user#a?uname=shk&password=123 \"]},\"2238\":{\"h\":\"3. URL类\",\"t\":[\"为了表示URL，java.net 中实现了类 URL。\",\"public final class URL implements java.io.Serializable {} \",\"可以通过下面的几个构造器来初始化一个 URL 对象。\",\"spec：URL地址的字符串\",\"context：基 URL\",\"protocol：传输协议\",\"host：主机名\",\"file：文件名\",\"port：端口号\",\"public URL(String spec) public URL(URL context, String spec) Public URL(String protocol, String host, String file) public URL(String protocol, String host, int port, String file) ==================================================================== URL url = new URL (\\\"http://www. atguigu.com/\\\"); URL downloadUrl = new URL(url, \\\"download.html\\\") URL url = new URL(\\\"http\\\",\\\"www.atguigu.com\\\", \\\"download. html\\\"); URL gamelan = new URL(\\\"http\\\", \\\"www.atguigu.com\\\", 80, \\\"download.html\\\"); \",\"异常处理：以上构造器会抛出MalformedURLException异常，URL类的构造器都声明抛出非运行时异常，必须要对这一异常进行处理，通常是用 try-catch 语句进行捕获。\"]},\"2239\":{\"h\":\"4. URL类常用方法\",\"t\":[\"一个URL对象生成后，其属性是不能被改变的，但可以通过它给定的方法来获取这些属性：\",\"public String getProtocol( ) 获取该URL的协议名\",\"public String getHost( ) 获取该URL的主机名\",\"public String getPort( ) 获取该URL的端口号\",\"public String getPath( ) 获取该URL的文件路径\",\"public String getFile( ) 获取该URL的文件名\",\"public String getQuery( ) 获取该URL的查询名\"]},\"2240\":{\"h\":\"5. URLConnection\",\"t\":[\"URLConnection类是专门针对HTTP协议的。\",\"URL的方法 openStream()：能从网络上读取数据\",\"若希望输出数据，例如向服务器端的 CGI （公共网关接口-Common Gateway Interface-的简称，是用户浏览器和服务器端的应用程序进行连接的接口）程序发送一些数据，则必须先与URL建立连接，然后才能对其进行读写，此时需要使用URLConnection 。\"]},\"2241\":{\"h\":\"5.1 URLConnection的创建\",\"t\":[\"表示到URL所引用的远程对象的连接。当与一个URL建立连接时，首先要在一个 URL 对象上通过方法 openConnection() 生成对应的 URLConnection对象。如果连接过程失败，将产生IOException.\",\"URL netchinaren = new URL (\\\"http://www.atguigu.com/index.shtml\\\"); URLConnectonn u = netchinaren.openConnection( ); \"]},\"2242\":{\"h\":\"5.2 交互方法\",\"t\":[\"public Object getContent( ) throws IOException\",\"public int getContentLength( )\",\"public String getContentType( )\",\"public long getDate( )\",\"public long getLastModified( )\",\"public InputStream getInputStream( )throws IOException\",\"public OutputSteram getOutputStream( )throws IOException\"]},\"2243\":{\"h\":\"6. URI、URL和URN的区别\",\"t\":[\"URI，是uniform resource identifier，统一资源标识符，用来唯一的标识一个资源。\",\"而URL是uniform resource locator，统一资源定位符，它是一种具体的URI。即URL可以用来标识一个资源，而且还指明了如何locate这个资源。\",\"而URN，uniform resource name，统一资源命名，是通过名字来标识资源，比如mailto:java-net@java.sun.com。也就是说，URI是以一种抽象的，高层次概念定义统一资源标识，而URL和URN则是具体的资源标识的方式。\",\"9-7-1\",\"URL和URN都是一种URI。在Java的URI中，一个URI实例可以代表绝对的，也可以是相对的，只要它符合URI的语法规则。而URL类则不仅符合语义，还包含了定位该资源的信息，因此它不能是相对的。\"]},\"2244\":{\"h\":\"7. 小结\",\"t\":[\"位于网络中的计算机具有唯一的IP地址，这样不同的主机可以互相区分。\",\"客户端－服务器是一种最常见的网络应用程序模型。服务器是一个为其客户端提供某种特定服务的硬件或软件。客户机是一个用户应用程序，用于访问某台服务器提供的服务。端口号是对一个服务的访问场所，它用于区分同一物理计算机上的多个服务。套接字用于连接客户端和服务器，客户端和服务器之间的每个通信会话使用一个不同的套接字。TCP协议用于实现面向连接的会话。\",\"Java 中有关网络方面的功能都定义在 java.net 程序包中。Java 用 InetAddress 对象表示 IP 地址，该对象里有两个字段：主机名(String) 和 IP 地址(int)。\",\"类 Socket 和 ServerSocket 实现了基于TCP协议的客户端－服务器程序。Socket是客户端和服务器之间的一个连接，连接创建的细节被隐藏了。这个连接提供了一个安全的数据传输通道，这是因为 TCP 协议可以解决数据在传送过程中的丢失、损坏、重复、乱序以及网络拥挤等问题，它保证数据可靠的传送。\",\"类 URL 和 URLConnection 提供了最高级网络应用。URL 的网络资源的位置来同一表示Internet 上各种网络资源。通过URL对象可以创建当前应用程序和 URL 表示的网络资源之间的连接，这样当前程序就可以读取网络资源数据，或者把自己的数据传送到网络上去\"]},\"2245\":{\"h\":\"a-1. 反射机制介绍\"},\"2246\":{\"h\":\"Reflection：反射机制\",\"t\":[\"Reflection（反射）是被视为动态语言的关键，反射机制允许程序在执行期借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。\"]},\"2247\":{\"h\":\"1. 动态语言与静态语言\",\"t\":[\"动态语言：是一类在运行时可以改变其结构的语言：例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或是其他结构上的变化。通俗点说就是 在运行时代码可以根据某些条件改变自身结构。 \",\"主要动态语言：Object-C、C#、JavaScript、PHP、Python、Erlang。\",\"静态语言：需要编译，与动态语言相对应的，运行时结构不可变的语言就是静态语言。 \",\"如Java、C、C++。\",\"Java：Java不是动态语言，但Java可以称之为“准动态语言”。即Java有一定的动态性，我们可以利用反射机制、字节码操作获得类似动态语言的特性。Java的动态性让编程的时候更加灵活！\"]},\"2248\":{\"h\":\"2. Class与反射工作原理\",\"t\":[\"Class类是类的类，加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象（一个类只有一个Class对象），这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以，我们形象的称之为： 反射\"]},\"2249\":{\"h\":\"3. 反射机制提供的功能\",\"t\":[\"在运行时判断任意一个对象所属的类\",\"在运行时构造任意一个类的对象\",\"在运行时判断任意一个类所具有的成员变量和方法\",\"在运行时获取泛型信息\",\"在运行时调用任意一个对象的成员变量和方法\",\"在运行时处理注解\",\"生成动态代理\"]},\"2250\":{\"h\":\"4. 反射相关API\",\"t\":[\"java.lang.Class: 代表一个类\",\"java.lang.reflect.Method: 代表类的方法\",\"java.lang.reflect.Field: 代表类的 成员 变量\",\"java.lang.reflect.Constructor: 代表类 的 构造 器\",\"…\"]},\"2251\":{\"h\":\"5. 反射的动态性\",\"t\":[\"反射机制最大的特点，就是动态性（通用性），这也是为什么框架中会大量的使用反射。\"]},\"2252\":{\"h\":\"5.1 示例\",\"t\":[\"使用代码体验反射的动态性\",\"//1.创建一个函数：根据全类名参数创建类的对象 public Object getInstance(String classPath) throws Exception { Class clazz = Class.forName(classPath); return clazz.newInstance(); } //2.动态创建一个随机对象 public void test2(){ int num = new Random().nextInt(3);//0,1,2 String classPath = \\\"\\\"; switch(num){ case 0: classPath = \\\"java.util.Date\\\"; break; case 1: classPath = \\\"java.lang.Object\\\"; break; case 2: classPath = \\\"com.atguigu.java.Person\\\"; break; } Object obj = getInstance(classPath); System.out.println(obj); } \"]},\"2253\":{\"h\":\"5.2 补充说明\",\"t\":[\"为什么不用new，而用反射创建类的对象：我们不知道要创建什么对象，所以无法确定变量的类型，无法new\",\"public Object getObj(String className) throws Exception{ className cn1 = new className(); //直接报错 return cn1; } \",\"为什么不直接同判断返回new好的对象：要同时new很多对象，浪费资源。\"]},\"2254\":{\"h\":\"6. 反射机制使用示例：仅体验\"},\"2255\":{\"h\":\"6.1 创建Test类：Person\",\"t\":[\"class Person{ private String name; public int age; public String toString() { return \\\"Person{\\\" +\\\"name='\\\" + name + '\\\\'' +\\\", age=\\\" + age +'}'; } public String getName() { return name; } public void setName(String name) { this.name = name; } public Person(String name, int age) { this.name = name; this.age = age; } private Person(String name) { this.name = name; } public void show(){ System.out.println(\\\"你好，我是一个人\\\"); } private String showNation(String nation){ System.out.println(\\\"我的国籍是：\\\" + nation); return nation; } } \"]},\"2256\":{\"h\":\"6.2 不使用反射：对Person的操作\",\"t\":[\"public void test(){ Person p1 = new Person(\\\"Aaron\\\", 20); p1.age = 20; System.out.println(p1); //调用toString方法 p1.show(); //你好，我是一个人 } \"]},\"2257\":{\"h\":\"6.3 使用反射：操作Person\",\"t\":[\"public void test1() throws Exception { //1.通过反射，创建Person类的对象 Class<Person> pClass = Person.class; Constructor<Person> cons = pClass.getConstructor(String.class, int.class); Person p = cons.newInstance(\\\"Aaron\\\", 20); System.out.println(p); //调用了Person对象的toString方法 //2.通过反射，调用对象指定的属性、方法 Field age = pClass.getDeclaredField(\\\"age\\\"); //调用属性 System.out.println(age); //20 Method show = pClass.getDeclaredMethod(\\\"show\\\"); //调用方法 show.invoke(p);//你好，我是一个人 } \"]},\"2258\":{\"h\":\"6.4 使用反射：操作Person私有成员\",\"t\":[\"public void test2() throws Exception { //1.通过反射，调用私有化构造器，创建Person对象 Class<Person> pClass = Person.class; Constructor<Person> cons = pClass.getDeclaredConstructor(String.class); cons.setAccessible(true); Person p1 = cons.newInstance(\\\"Jerry\\\"); //2.调用私有属性 Field name = pClass.getDeclaredField(\\\"name\\\"); name.setAccessible(true); name.set(p1,\\\"Alen\\\"); System.out.println(p1); //Person{name='Alen', age=0} //3.调用私有方法 Method showNation = pClass.getDeclaredMethod(\\\"showNation\\\", String.class); showNation.setAccessible(true); Object nation = showNation.invoke(p1, \\\"China\\\"); //我的国籍是：China System.out.println(nation); //China } \"]},\"2259\":{\"h\":\"a-2. Class\"},\"2260\":{\"h\":\"1. Class类\",\"t\":[\"Class的全类名为：Object.lang.Class\",\"Class属于类的类，即每个类所属的类，我们把类当做是对象（万物皆对象），那么类所属的类就是Class类。对于每个类而言，JRE 都为其保留一个不变的 Class 类型的对象。\",\"Class类是反射的源头。我们需要使用Class类的对象拿到想要的内容。\"]},\"2261\":{\"h\":\"2. Class与类的加载\",\"t\":[\"程序经过javac.exe命令以后，会生成一个或多个字节码文件(.class结尾)。接着我们使用java.exe命令对某个字节码文件进行解释运行。相当于将某个字节码文件加载到内存中。此过程就称为类的加载。加载到内存中的类，我们就称为运行时类，此运行时类，就作为Class的一个实例。\"]},\"2262\":{\"h\":\"3. 使用Class的本质\",\"t\":[\"Class是直接操纵加载到内存里的类的，Class的实例就对应着一个运行时类。\",\"我们使用类时，会将类加载到内存中，内存中的这个类就是Class的一个实例。我们可以使用Class类的实例，利用Class提供的方法，来操作内存中的类的一切元素，包括私有元素，因为私有元素也加载到内存中了。\"]},\"2263\":{\"h\":\"4. Class的特点\",\"t\":[\"Class本身也是一个类\",\"Class 对象只能由系统建立对象\",\"一个加载的类在 JVM 中只会有一个Class实例\",\"一个Class对象对应的是一个加载到JVM中的一个.class文件\",\"每个类的实例都会记得自己是由哪个 Class 实例所生成\",\"通过Class可以完整地得到一个类中的所有被加载的结构\",\"Class类是Reflection的根源，针对任何你想动态加载、运行的类，唯有先获得相应的Class对象\"]},\"2264\":{\"h\":\"5. 可以有Class对象的元素\",\"t\":[\"class：外部类，成员(成员内部类，静态内部类)，局部内部类，匿名内部类\",\"interface：接口\",\"[]：数组\",\"enum：枚举\",\"annotation：注解@interface\",\"primitive type：基本数据类型\",\"void\",\"Class<Object> c1 = Object.class; System.out.println(c1); //class java.lang.Object Class<Override> c2 = Override.class; System.out.println(c2); //interface java.lang.Override Class<Void> c3 = void.class; System.out.println(c3); //void \"]},\"2265\":{\"h\":\"6. 获取Class类的实例\",\"t\":[\"加载到内存中的运行时类，会缓存一定的时间。在此时间之内，我们可以通过不同的方式来获取此运行时类（即获取Class类的实例），一共有四种方法，以下四个方法创建的Class是同一个Class。\"]},\"2266\":{\"h\":\"6.1 调用运行时类的属性：.class\",\"t\":[\"若已知具体的类，通过类的class属性获取，该方法最为安全可靠，程序性能最高\",\"Class<Person> c1 = Person.class; System.out.println(c1); //class ReflectionStudy.Person \"]},\"2267\":{\"h\":\"6.2 通过运行时类的对象,调用getClass()\",\"t\":[\"已知某个类的实例，调用该实例的getClass()方法获取Class对象\",\"Person p1 = new Person(); Class<? extends Person> c2 = p1.getClass(); System.out.println(c2); //class ReflectionStudy.Person \"]},\"2268\":{\"h\":\"6.3 调用Class的静态方法：forName(String classPath)【常用】\",\"t\":[\"已知一个类的全类名（包+类名），且该类在类路径下，可通过Class类的静态方法forName()获取，可能抛出 ClassNotFoundException\",\"Class<?> c3 = Class.forName(\\\"ReflectionStudy.Person\\\"); System.out.println(c3); //class ReflectionStudy.Person \"]},\"2269\":{\"h\":\"6.4 使用类的加载器：ClassLoader (了解)\",\"t\":[\"ClassLoader cl = this.getClass().getClassLoader(); Class<?> c4 = cl.loadClass(\\\"ReflectionStudy.Person\\\"); System.out.println(c4); //class ReflectionStudy.Person \"]},\"2270\":{\"h\":\"7. Class类的常用方法\",\"t\":[\"详见：内置函数>反射类\"]},\"2271\":{\"h\":\"a-3. 类的加载\"},\"2272\":{\"h\":\"Ⅰ. 类的加载\"},\"2273\":{\"h\":\"1.类的初始化\",\"t\":[\"当程序主动使用某个类时，如果该类还未被加载到内存中，则系统会通过如下三个步骤来对该类进行初始化：\",\"a-3-1\"]},\"2274\":{\"h\":\"1.1 Load：类的加载\",\"t\":[\"将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口（即引用地址）。所有需要访问和使用类数据只能通过这个Class对象。这个加载的过程需要类加载器参与。\"]},\"2275\":{\"h\":\"1.2 Link：类的链接\",\"t\":[\"将Java类的二进制代码合并到JVM的运行状态之中的过程。\",\"验证：确保加载的类信息符合JVM规范，例如：以cafe开头，没有安全方面的问题\",\"准备：正式为类变量（static）分配内存并 设置类变量默认初始值的阶段，这些内存都将在方法区中进行分配。\",\"解析：虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）的过程\"]},\"2276\":{\"h\":\"1.3 Initialize：类的初始化\",\"t\":[\"执行类构造器<clinit>()方法的过程。类构造器<clinit>()方法是由编译期自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的。（类构造器是构造类信息的，不是构造该类对象的构造器）。\",\"当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。\",\"虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确加锁和同步。\"]},\"2277\":{\"h\":\"2. 类初始化的时机\",\"t\":[\"类的主动引用 ：一定会发生类的初始化 \",\"当虚拟机启动，先初始化main方法所在的类\",\"new一个类的对象\",\"调用类的静态成员（除了final常量）和静态方法\",\"使用java.lang.reflect包的方法对类进行反射调用\",\"当初始化一个类，如果其父类没有被初始化，则先会初始化它的父类\",\"类的被动引用： 不会发生类的初始化 \",\"当访问一个静态域时，只有真正声明这个域的类才会被初始化 \",\"当通过子类引用父类的静态变量，不会导致子类初始化\",\"通过数组定义类引用，不会触发此类的初始化\",\"引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池中了）\"]},\"2278\":{\"h\":\"Ⅱ. ClassLoader\",\"t\":[\"ClassLoader：类加载器\",\"标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载（缓存）一段时间。不过JVM垃圾回收机制可以回收这些Class对象。\"]},\"2279\":{\"h\":\"1. 类加载器\",\"t\":[\"类加载器作用是用来把类(class)装载进内存的。JVM 规范定义了如下类型的类的加载器。\",\"a-3-2\",\"系统类加载器：加载自定义类\",\"扩展类加载器：加载ext下的jar包\",\"引导类加载器：加载核心类库，该加载器无法获取\"]},\"2280\":{\"h\":\"2. 加载器获取\",\"t\":[\"//1.获得当前自定义类加载器：系统类加载器 ClassLoader cl1 = ClassTest.class.getClassLoader(); System.out.println(cl1); //sun.misc.Launcher$AppClassLoader@18b4aac2 //2.调用系统类加载器的getParent()：获取扩展类加载器 ClassLoader cl2 = cl1.getParent(); System.out.println(cl2);//sun.misc.Launcher$ExtClassLoader@77556fd //3.调用扩展类加载器的getParent()：无法获取引导类加载器 ClassLoader cl3 = cl2.getParent(); System.out.println(cl3); //null //4.获得核心类库String的类加载器：无法获取核心类库的引导类加载器 ClassLoader cl4 = String.class.getClassLoader(); System.out.println(cl4); //null \"]},\"2281\":{\"h\":\"3. getResourceAsStream：获取类路径下的指定文件的输入流\",\"t\":[\"将文件加载为InputStream\",\"getResourceAsStream(String str) \"]},\"2282\":{\"h\":\"4. 使用ClassLoader加载配置文件\",\"t\":[\"使用ClassLoader的getResourceAsStream方法加载配置文件，结合Properties类（读取配置文件的输入流）使用。\",\"Properties pros = new Properties(); //此时的文件默认在当前的module下。 //读取配置文件的方式一： FileInputStream fis = new FileInputStream(\\\"jdbc.properties\\\"); FileInputStream fis = new FileInputStream(\\\"src\\\\\\\\jdbc1.properties\\\"); pros.load(fis); //读取配置文件的方式二：使用ClassLoader //配置文件默认识别为：当前module的src下 ClassLoader classLoader = ClassLoaderTest.class.getClassLoader(); InputStream is = classLoader.getResourceAsStream(\\\"jdbc1.properties\\\"); pros.load(is); String user = pros.getProperty(\\\"user\\\"); String password = pros.getProperty(\\\"password\\\"); System.out.println(\\\"user = \\\" + user + \\\",password = \\\" + password); \"]},\"2283\":{\"h\":\"a-4. 运行时类\"},\"2284\":{\"h\":\"Ⅰ. 运行时类的对象\"},\"2285\":{\"h\":\"1. newInstance：通过反射创建对应的运行时类的对象\",\"t\":[\"要求：类必须有一个无参数的构造器，且访问权限需要足够。\",\"//创建Person类的Class实例 Class<Person> pClass = Person.class; //2.通过反射创建对象 Person p = pClass.newInstance(); //调用的是空参构造器 System.out.println(p.getClass()); //class ReflectionStudy.Person System.out.println(p); // Person{name='null', age=0} \",\"异常说明 \",\"如果类没有空参构造器，newInstance()方法将抛出InstantiationException异常；\",\"如果空参构造器访问权限是不够(private)，将抛出：IllegalAccessException异常。\",\"空参构造器 \",\"newInstance方法默认会调用类的空参构造器，又因为可能会产生异常，所以：在javabean中要求提供一个public的空参构造器。\",\"同时：也便于子类继承此运行时类时，默认调用super()时，保证父类有此构造器\"]},\"2286\":{\"h\":\"2. getDeclaredConstructor\",\"t\":[\"取得本类的指定形参类型的构造器；newInstance方法只能调用无参构造器创建对象，如果类中没有无参构造器就不能使用newInstance了。\",\"可以通过Class类的getDeclaredConstructor(Class … parameterTypes)取得本类的指定形参类 型的构造器向构造器的形参中传递一个对象数组进去，里面包含了构造器中所需的各个参数。通过Constructor实例化对象。\",\"参数：就是构造器参数所属的Class。\",\"Class<Person> clazz = Person.class; Person p1 = clazz.newInstance();//调用无参构造器，创建Person对象 //调用有参构造器，该构造器接受一个String类谢谢的参数：String.class Constructor cons = clazz.getDeclaredConstructor(String.class); Person jin = (Person)cons.newInstance(\\\"jin\\\"); \"]},\"2287\":{\"h\":\"3. 获取运行时类的完整结构\",\"t\":[\"既然运行时类已经加载到了内存中，那么我们就可以从内存中，获取运行时类的所有结构，只需要使用定义好的Class的方法。\",\"仅了解：方便看框架源码。\"]},\"2288\":{\"h\":\"Ⅱ. 获取属性结构\"},\"2289\":{\"h\":\"1. getFields：获取自己和父类所有Public属性\",\"t\":[\"获取当前运行时类及其父类中声明为public访问权限的属性\",\"Class<Person> personClass = Person.class; Field[] fields = personClass.getFields(); for(Field f:fields){ //遍历包含属性的数组 System.out.println(f); } \"]},\"2290\":{\"h\":\"输出结果\",\"t\":[\"public int ReflectionStudy.Person.id ：Person类中的public属性\",\"public double ReflectionStudy.Creature.weight：Person父类的public属性\"]},\"2291\":{\"h\":\"2. getDeclareFields：获取所有自己所有权限的属性\",\"t\":[\"获取当前运行时类中声明的所有属性。（不包含父类中声明的属性）\",\"Field[] declaredFields = personClass.getDeclaredFields(); for(Field f:declaredFields){ System.out.println(f); } \"]},\"2292\":{\"h\":\"遍历结果\",\"t\":[\"输出了所有Person类的属性\",\"private java.lang.String ReflectionStudy.Person.name\",\"int ReflectionStudy.Person.age\",\"public int ReflectionStudy.Person.id\"]},\"2293\":{\"h\":\"3. 获取属性的结构\",\"t\":[\"包括：权限修饰符、数据类型、变量名\",\"Field[] declaredFields = personClass.getDeclaredFields(); for(Field f:declaredFields){ //1.权限修饰符 int modifier = f.getModifiers(); System.out.println(modifier); System.out.println(Modifier.toString(modifier)+\\\"\\\\t\\\"); //2.数据类型 Class<?> type = f.getType(); System.out.println(type.getName()); String fName = f.getName(); System.out.println(fName); } \",\"getModifier：获取权限修饰符，返回值：2,0,1，返回的结果是int类型的：0~3 \",\"0：默认类型\",\"1：public\",\"2：private\",\"3：protected\",\"getType：获取数据类型，返回值：java.lang.String、int、int \",\"返回数据类型，如果是引用类型，会返回完整的类名\",\"getName：获取属性名，返回值：name、age、int，返回字符串形式的属性名\"]},\"2294\":{\"h\":\"Ⅲ. 获取方法结构\"},\"2295\":{\"h\":\"1. 获取运行时类的方法\",\"t\":[\"Class clazz = Person.class; Method[] methods = clazz.getMethods(); for(Method m : methods){ System.out.println(m); } Method[] declaredMethods = clazz.getDeclaredMethods(); for(Method m : declaredMethods){ System.out.println(m); } \",\"getMethods：获取类和父类中public方法 \",\"返回值：略（包括Object这个父类的方法）\",\"获取当前运行时类及其所有父类中声明为public权限的方法\",\"getDeclaredMethods：获取本类所有权限的方法 \",\"返回值：略（包含private方法）\",\"获取当前运行时类中声明的所有方法。（不包含父类中声明的方法）\"]},\"2296\":{\"h\":\"2. 获取运行时方法的结构\",\"t\":[\"包括：权限修饰符、返回值类型、方法名、形参列表、方法的注解、异常列表\",\"Class clazz = Person.class; Method[] declaredMethods = clazz.getDeclaredMethods(); for(Method m : declaredMethods){ //1.获取方法声明的注解 Annotation[] annos = m.getAnnotations(); for(Annotation a : annos){ System.out.println(a); } //2.权限修饰符 System.out.print(Modifier.toString(m.getModifiers()) + \\\"\\\\t\\\"); //3.返回值类型 System.out.print(m.getReturnType().getName() + \\\"\\\\t\\\"); //4.方法名 System.out.print(m.getName()); System.out.print(\\\"(\\\"); //5.形参列表 Class[] parameterTypes = m.getParameterTypes(); if(!(parameterTypes == null && parameterTypes.length == 0)){ for(int i = 0;i < parameterTypes.length;i++){ if(i == parameterTypes.length - 1){ System.out.print(parameterTypes[i].getName() +\\\"args_\\\" +i); break; } System.out.print(parameterTypes[i].getName()+\\\"args_\\\" +i+ \\\",\\\"); } } System.out.print(\\\")\\\"); //6.抛出的异常 Class[] exceptionTypes = m.getExceptionTypes(); if(exceptionTypes.length > 0){ System.out.print(\\\"throws \\\"); for(int i = 0;i < exceptionTypes.length;i++){ if(i == exceptionTypes.length - 1){ System.out.print(exceptionTypes[i].getName()); break; } System.out.print(exceptionTypes[i].getName() + \\\",\\\"); } } System.out.println(); } \",\"getAnnotations：获取方法的注解 \",\"返回值：@ReflectionStudy.MyAnnotation(value=hello)\",\"一般用来获取自定义的注解\",\"getModifiers：获取权限修饰符 \",\"返回值：1、1、2、1、2\",\"同属性的权限修饰符\",\"getReturnType：获取返回值类型 \",\"返回值：java.lang.String、int、int、void ...\",\"同属性的返回值类型\",\"getName：获取方法名 \",\"返回值：compareTo、info()、show()、display、showDesc()\",\"获取字符串形式的方法名\",\"getParameterTypes：获取形参列表 \",\"返回值：(java.lang.String args_0)、(java.lang.String args_0,int args_1)......\",\"返回的只有形参的类型，需要自己进行循环拼接形参名\",\"getExceptionTypes：获取抛出的异常 \",\"返回值：throws java.lang.NullPointerException,java.lang.ClassCastException\",\"可能是多个异常，返回的是数组。\"]},\"2297\":{\"h\":\"Ⅳ. 获取其他信息\"},\"2298\":{\"h\":\"1. 获取运行时类的构造器结构\",\"t\":[\"可能有多个构造器，所以返回数组\",\"Class clazz = Person.class; //获取当前运行时类中声明为public的构造器 Constructor[] constructors = clazz.getConstructors(); for(Constructor c : constructors){ System.out.println(c); } System.out.println(); //获取当前运行时类中声明的所有的构造器 Constructor[] declaredConstructors = clazz.getDeclaredConstructors(); for(Constructor c : declaredConstructors){ System.out.println(c); } \",\"getConstructors：获取当前运行时类中声明为public的构造器\",\"getDeclaredConstructors：获取当前运行时类中声明的所有的构造器\"]},\"2299\":{\"h\":\"2. getSuperclass：获取运行时类的父类\",\"t\":[\"Class clazz = Person.class; Class superclass = clazz.getSuperclass(); System.out.println(superclass); \"]},\"2300\":{\"h\":\"3. getGenericSuperclass：获取运行时类的父类的泛型\",\"t\":[\"Class clazz = Person.class; Type genericSuperclass = clazz.getGenericSuperclass(); System.out.println(genericSuperclass); \"]},\"2301\":{\"h\":\"getActualTypeArguments：获取运行时类的父类的泛型\",\"t\":[\"只返回泛型\",\"Class clazz = Person.class; Type genericSuperclass = clazz.getGenericSuperclass(); ParameterizedType paramType = (ParameterizedType) genericSuperclass; //获取泛型类型 Type[] actualTypeArguments = paramType.getActualTypeArguments(); System.out.println(((Class)actualTypeArguments[0]).getName()); \"]},\"2302\":{\"h\":\"4. getInterfaces：获取运行时类实现的接口\",\"t\":[\"Class clazz = Person.class; Class[] interfaces = clazz.getInterfaces(); for(Class c : interfaces){ System.out.println(c); } System.out.println(); //获取运行时类的父类实现的接口 Class[] interfaces1 = clazz.getSuperclass().getInterfaces(); for(Class c : interfaces1){ System.out.println(c); } \"]},\"2303\":{\"h\":\"5. getPackage：获取运行时类所在的包\",\"t\":[\"Class clazz = Person.class; Package pack = clazz.getPackage(); System.out.println(pack); \"]},\"2304\":{\"h\":\"6. getAnnotations：获取运行时类声明的注解\",\"t\":[\"Class clazz = Person.class; Annotation[] annotations = clazz.getAnnotations(); for(Annotation annos : annotations){ System.out.println(annos); } \"]},\"2305\":{\"h\":\"Ⅴ. 调用指定结构\"},\"2306\":{\"h\":\"1. 调用属性\",\"t\":[\"Class clazz = Person.class; //创建运行时类的对象 Person p = (Person) clazz.newInstance(); //1. getDeclaredField(String fieldName):获取运行时类中指定变量名的属性 Field name = clazz.getDeclaredField(\\\"name\\\"); //2.保证当前属性是可访问的 name.setAccessible(true); //3.获取、设置指定对象的此属性值 name.set(p,\\\"Tom\\\"); System.out.println(name.get(p)); \"]},\"2307\":{\"h\":\"1.1 getField：获取属性【一般不用】\",\"t\":[\"获取运行类中指定变量名的属性，获取的是public修饰的属性。\",\"public Field getField(String name) \"]},\"2308\":{\"h\":\"1.2getDeclaredField：获取属性\",\"t\":[\"获取运行类中指定变量名的属性，获取的是该类的所有属性\",\"public Field getDeclaredField(String name) \"]},\"2309\":{\"h\":\"1.3get：获取属性值\",\"t\":[\"取得指定对象obj上此Field的属性内容\",\"public Object get(Object obj) \"]},\"2310\":{\"h\":\"1.4set：设置属性值\",\"t\":[\"设置指定对象obj上此Field的属性内容\",\"注意：非public属性，我们能够获取，但是不能直接设置，需要先setAccessible(true).\",\"public void set(Object obj,Object value) \"]},\"2311\":{\"h\":\"2. 调用方法\",\"t\":[\"//创建运行时类的对象 Class clazz = Person.class; Person p = (Person) clazz.newInstance(); //1.获取指定的方法 Method show = clazz.getDeclaredMethod(\\\"show\\\", String.class); //2.保证当前方法是可访问的 show.setAccessible(true); //3.执行获取的函数 Object returnValue = show.invoke(p,\\\"CHN\\\"); //String nation = p.show(\\\"CHN\\\"); System.out.println(returnValue); //调用静态方法 Method showDesc = clazz.getDeclaredMethod(\\\"showDesc\\\"); showDesc.setAccessible(true); //静态方法的调用写是类或者null Object returnVal = showDesc.invoke(Person.class); System.out.println(returnVal);//null \"]},\"2312\":{\"h\":\"2.1 getDeclaredMethod：获取指定的某个方法\",\"t\":[\"可以获取任何修饰符修饰的方法。\",\"参数1：name：指明获取的方法的名\",\"参数2：指明获取的方法的形参列表(参数类型)\",\"Method getDeclaredMethod(String name,parameterTypes) \"]},\"2313\":{\"h\":\"2.2 getMethod：获取指定的某个方法【一般不用】\",\"t\":[\"只能获取public修饰的方法\",\"getMethod(String name,Class…parameterTypes) \"]},\"2314\":{\"h\":\"2.3 invoke：执行invoke\",\"t\":[\"调用方法对象（Method）的invoke方法来执行获得的方法\",\"参数1：方法的调用者\",\"参数2：给方法形参赋值的实参\",\"返回值：对应类中调用的方法的返回值，没有返回值就返回null。\",\"静态方法：如果是静态方法调用invoke，那么调用者是类或者null也可以。\",\"Object invoke(Object obj, Object[] args) \"]},\"2315\":{\"h\":\"3. 调用构造器\",\"t\":[\"仅了解，实际开发中，99%用newInstance调用空参构造器\",\"Class clazz = Person.class; //1.获取指定的构造器 Constructor constructor = clazz.getDeclaredConstructor(String.class); //2.保证此构造器是可访问的 constructor.setAccessible(true); //3.调用此构造器创建运行时类的对象 Person per = (Person) constructor.newInstance(\\\"Tom\\\"); System.out.println(per); \"]},\"2316\":{\"h\":\"getDeclaredConstructor：获取指定的构造器\",\"t\":[\"参数：指明构造器的参数列表\"]},\"2317\":{\"h\":\"4. setAccessible：允许操作封装的类结构\",\"t\":[\"运行时类的属性、方法、构造器，我们都能够获取到\",\"但是非public修饰的成员，我们无法直接进行访问，需要通过setAccessible进行设置。\",\"void setAccessible(boolean bool) \",\"Method和Field、Constructor对象都有setAccessible()方法。\",\"setAccessible启动和禁用访问安全检查的开关。\",\"参数true：不进行访问检测，可以操作非public修饰的类内部成员\",\"参数false(默认)：进行访问检查，禁止访问非public修饰的类内部成员。\"]},\"2318\":{\"h\":\"a-5. 动态代理\"},\"2319\":{\"h\":\"Ⅰ. 动态代理\"},\"2320\":{\"h\":\"1. 代理设计模式\",\"t\":[\"原理：使用一个代理将对象包装起来, 然后用该代理对象取代原始对象。任何对原始对象的调用都要通过代理。代理对象决定是否以及何时将方法调用转到原始对象上。\",\"意义：在不改变原有方法的情况下，对原有方法进行增强、完善。\"]},\"2321\":{\"h\":\"例子\",\"t\":[\"要求：我们连接数据库时需要进行安全检查。\",\"接口：我们定义了一个接口，进行连接数据库，需要连接数据库的类都要继承他 \",\"conncetDB方法用于连接数据库\",\"被代理类：User类 重写connectBD方法进行数据库连接。\",\"代理类：ProxyUser 同样实现接口，并重写connectDB方法。 \",\"构造函数：就是被代理类User\",\"connectDB方法中，对数据库连接进行安全检测，并掉用User.conncetDB方法连接数据库\",\"链接数据库后，将连接信息写入日志。\"]},\"2322\":{\"h\":\"2. 静态代理\",\"t\":[\"特征是代理类和目标对象的类都是在编译期间确定下来，不利于程序的扩展。同时，每一个代理类只能为一个接口服务，这样一来程序开发中必然产生过多的代理。 最好可以通过一个代理类完成全部的代理功能 。\"]},\"2323\":{\"h\":\"2.1 示例\",\"t\":[\"还拿连接数据库举例，静态代理需要，每个要连接数据库的类，都声明一个静态代理，即使代理做的操作是一样的，都是：安全检查、掉用被代理类的conncetDB方法、将连接信息写入日志。\"]},\"2324\":{\"h\":\"2.2 缺点\",\"t\":[\"代理类和被代理类在编译期间，就确定下来了，不灵活。我们要多很多相似类都定义一个代理类，过于冗余。\"]},\"2325\":{\"h\":\"3. 动态代理介绍\",\"t\":[\"原理：动态代理是指客户通过代理类来调用其它对象的方法，并且是在程序运行时根据需要动态创建目标类的代理对象。\",\"使用场合 \",\"调试\",\"远程方法调用\",\"优点：抽象角色中（接口）声明的所有方法都被转移到调用处理器一个集中的方法中处理，这样，我们可以更加灵活和统一的处理众多的方法。\",\"示例：还拿连接数据库举例，我们调用哪个类，就实例化并代理哪个类，动态代理。\"]},\"2326\":{\"h\":\"4. 静态代理示例\",\"t\":[\"接口：定义一个衣服工厂接口ClothFactory，并声明produceCloth方法用于生产服装\",\"被代理类：Nike工厂，实现接口，重写produceCloth方法用于生产服装。\",\"代理类：代理Nike工厂，也实现接口，重写produceCloth方法， \",\"并在该方法中，进行工厂的准备工作，比如：原料准备\",\"调用Nike工厂的produceCloth方法进行衣服生产\",\"进行一些收尾工作，比如写个日志，清洗工厂等\"]},\"2327\":{\"h\":\"4.1 接口\",\"t\":[\"interface ClothFactory{ void produceCloth(); } \"]},\"2328\":{\"h\":\"4.2 代理类\",\"t\":[\"class ProxyClothFactory implements ClothFactory{ private ClothFactory factory;//用被代理类对象进行实例化 public ProxyClothFactory(ClothFactory factory){ this.factory = factory; } @Override public void produceCloth() { System.out.println(\\\"代理工厂做一些准备工作\\\"); factory.produceCloth(); System.out.println(\\\"代理工厂做一些后续的收尾工作\\\"); } } \"]},\"2329\":{\"h\":\"4.3 被代理类\",\"t\":[\"class NikeClothFactory implements ClothFactory{ @Override public void produceCloth() { System.out.println(\\\"Nike工厂生产一批运动服\\\"); } } \"]},\"2330\":{\"h\":\"4.4 使用\",\"t\":[\"public class StaticProxyTest { public static void main(String[] args) { //创建被代理类的对象 ClothFactory nike = new NikeClothFactory(); //创建代理类的对象 ClothFactory proxyClothFactory = new ProxyClothFactory(nike); proxyClothFactory.produceCloth(); } } \"]},\"2331\":{\"h\":\"Ⅱ. 动态代理使用\"},\"2332\":{\"h\":\"1. 需求\",\"t\":[\"①根据加载到内存中的被代理类，动态的创建一个代理类及其对象。\",\"②当通过代理类的对象调用方法a时，动态的去调用被代理类中的同名方法a。\"]},\"2333\":{\"h\":\"2. 逻辑链条\",\"t\":[\"①实例化被代理类，获取被代理类的对象。\",\"②通过反射获取该对象的类和所实现的所有接口\",\"③通过获取的类和接口，创建一个对象，该对象就是代理对象。\",\"④获取代理对象后，就可以使用代理对象取代源对象了 \",\"该对象有被代理对象的同名方法，但里的逻辑代码进行了加强。\",\"⑤使用代理对象调用被代理类中的同名方法 \",\"首先，代理对象会读取被代理类中的同名方法的方法名和形参列表。\",\"其次，将这些信息传递作为参数给代理对象的invoke方法\",\"invoke方法里主要做两件事 \",\"根据传递的信息调用源被代理对象的方法；\",\"执行invoke代码体里写的增强逻辑；这个增强逻辑：就是代理的意义，\"]},\"2334\":{\"h\":\"2.1 特点\",\"t\":[\"通过上述的逻辑链条可知：\",\"一个动态代理类，可以代理所有的被代理类。\",\"被代理类中的所有方法都会被代理类中的invoke方法增强，且增强的方式是一样，都可以在调用源方法的前后执行一些指定的增强逻辑。\"]},\"2335\":{\"h\":\"2.2 针对不通的方法进行增强\",\"t\":[\"如果要针对不同的方法进行增强，就要通过invoke方法的参数，获取要增强的方法名，进行switch...case判断，进行个性化的增强。\"]},\"2336\":{\"h\":\"3. 相关API\"},\"2337\":{\"h\":\"3.1 Proxy：所有动态代理类的父类\",\"t\":[\"专门完成代理的操作类，通过此类为一个或多个接口动态地生成实现类。\"]},\"2338\":{\"h\":\"3.2 Proxy.newProxyInstance\",\"t\":[\"Proxy类提供的用于创建动态代理类和动态代理对象的静态方法\",\"参数1：类加载器\",\"参数2：得到被代理类实现的全部接口，同时这些接口也会成为代理类的接口（支持多个接口）。\",\"参数3：InvocationHandler接口 \",\"需要手动的实现该接口，并把实现类的示例对象作为实参传入；也可以直接写成匿名实现类。\",\"作用：创建代理对象，其中有个invoke方法，该方法用来调用被代理类的方法，并做一些增强。\",\"返回值：返回被代理类的代理对象 \",\"该对象是由参数3的实现类创建的。\",\"static Object newProxyInstance (ClassLoader loader, Class<?>[] interfaces,InvocationHandler h) \"]},\"2339\":{\"h\":\"3.3 InvocationHandler：调用被代理类方法的接口\",\"t\":[\"创建一个实现接口InvocationHandler的类，它必须实现invoke方法，以完成代理的具体操作。\"]},\"2340\":{\"h\":\"3.4 InvocationHandler.invoke：调用被代理类方法的方法\",\"t\":[\"通过InvocationHandler接口的实现类调用该方法，来实现调用被代理类方法的方法\",\"参数1：代理类对象\",\"参数2：要调用的方法\",\"参数3：方法调用时所需要的参数\",\"public Object invoke(Object theProxy, Method method, Object[] params); \"]},\"2341\":{\"h\":\"4. 代理类代码分析\"},\"2342\":{\"h\":\"4.1 代理类\",\"t\":[\"class ProxyFactory{ //调用此方法，返回一个代理类的对象 public static Object getProxyInstance(Object obj){//obj:被代理类的对象 MyInvocationHandler handler = new MyInvocationHandler(); handler.bind(obj); return Proxy.newProxyInstance (obj.getClass().getClassLoader(),obj.getClass().getInterfaces()handler); } } \"]},\"2343\":{\"h\":\"4.2 代理类：Proxy.newProxyInstance的参数3\",\"t\":[\"class MyInvocationHandler implements InvocationHandler{ private Object obj;//需要使用被代理类的对象进行赋值 //通过bind方法传入被代理对象，为属性赋值 public void bind(Object obj){ //参数是Object类型会更通用 this.obj = obj; } //当我们通过代理类的对象，调用方法a时，就会自动的调用如下的方法：invoke() //将被代理类要执行的方法a的功能就声明在invoke()中 @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { //method:即为代理类对象调用的方法，此方法也就作为了被代理类对象要调用的方法 //obj:被代理类的对象 Object returnValue = method.invoke(obj,args); //上述方法的返回值就作为当前类中的invoke()的返回值。 return returnValue; } } \"]},\"2344\":{\"h\":\"4.3 使用示例\",\"t\":[\"前提：\",\"接口：Human，两个类：getBelif、和eat\",\"被代理类：SuperMan，实现了接口\",\"SuperMan superMan = new SuperMan(); //proxyInstance:代理类的对象 Human proxyInstance = (Human) ProxyFactory.getProxyInstance(superMan); //当通过代理类对象调用方法时，会自动的调用被代理类中同名的方法 String belief = proxyInstance.getBelief(); System.out.println(belief); proxyInstance.eat(\\\"四川麻辣烫\\\"); \"]},\"2345\":{\"h\":\"4.4 代理流程分析\",\"t\":[\"①SuperMan superMan = new SuperMan()：实例化被代理类，获取被代理类对象superMan\",\"②Human proxyInstance = (Human) ProxyFactory.getProxyInstance(superMan)：调用ProxyFactory类的静态方法（将被代理类对象 SuperMan 作为参数传入） \",\"生成一个被代理类\",\"ProxyFactory中调用了newProxyInstance方法，创建了代理类proxyInstance\",\"原理：通过反射获取被代理类的接口和类，并创建一个实现同样接口的类\",\"在此方法中，也将被代理类传递给了MyInvocationHandler类的invoke方法\",\"③String belief = proxyInstance.getBelief(); 代理类调用一个被代理类的同名方法，此时发生了如下事情： \",\"proxyInstance自动调用了MyInvocationHandler类的invoke方法 \",\"创建proxyInstance时，MyInvocationHandler是他的参数之一，已经进行了绑定\",\"并将自己调用的方法名、参数列表传递给MyInvocationHandle的invoke方法\",\"MyInvocationHandle已经在创建代理类是获取了被代理类的对象名，此时又获取了要调用的方法和参数列表\",\"利用反射，调用被代理类的同名方法。并获取返回值\"]},\"2346\":{\"h\":\"5. AOP与动态代理\"},\"2347\":{\"h\":\"5.1 AOP：Aspect Orient Programming\",\"t\":[\"就是上章写的在动态代理里写一些通用的代码。\",\"比如：调用被代理类方法前进行安全检查，调用后进行日志记录。\"]},\"2348\":{\"h\":\"5.2 AOP代理\",\"t\":[\"a-5-1\",\"上面这种动态代理在AOP中被称为AOP代理，AOP代理可代替目标对象，AOP代理包含了目标对象的全部方法。但AOP代理中的方法与目标对象的方法存在差异：AOP代理里的方法可以在执行目标方法之前、之后插入一些通用处理\"]},\"2349\":{\"h\":\"5.3 示例\",\"t\":[\"以上面的例子为例，加一些通用操作，加入后，我们再调用代理类的方法时就会进行一些附加操作。\",\"//创建一个类，来包含通用操作，也可以直接写在MyInvocationHandler.invoke方法里 class HumanUtil{ public void method1(){ System.out.println(\\\"============通用方法一===========\\\"); } public void method2(){ System.out.println(\\\"============通用方法二============\\\"); } } //将通用方法加入MyInvocationHandler.invoke，也可以直接写到里面。 public Object invoke(Object proxy, Method method, Object[] args){ HumanUtil util = new HumanUtil(); util.method1(); //通用方法一 Object returnValue = method.invoke(obj,args); util.method2();//通用方法二 return returnValue; } \"]},\"2350\":{\"h\":\"b-1. Java版本\",\"t\":[\"提示\",\"Java下载地址\"]},\"2351\":{\"h\":\"1. 版本说明\",\"t\":[\"从Java 9 这个版本开始，Java 的计划发布周期是 6 个月，着Java的更新从传统的以特性驱动的发布周期，转变为以时间驱动的（6 个月为周期）发布模式。\",\"针对企业客户的需求，Oracle 将以三年为周期发布长期支持版本（long termsupport）\"]},\"2352\":{\"h\":\"2. LTS\",\"t\":[\"Java17：2021，LTS版本，【New】\",\"Java11：2019，LTS版本\",\"Java8：2014，LTS版本，\"]},\"2353\":{\"h\":\"3. Java安装\",\"t\":[\"从官网直接下载安装即可，注意修改环境变量（修改为最新的Java）。\",\"Java是向前兼容的，配置成最新的Java版本环境变量即可。\"]},\"2354\":{\"h\":\"4. 配置IDEA\",\"t\":[\"需要打开项目配置菜单，选择SDK版本。\",\"备注：新建的Module的SDK默认是Project设置的SDK。\",\"快捷键：Ctrl + Alt + shit + s\"]},\"2355\":{\"h\":\"5. IDEA，多版本切换\",\"t\":[\"在项目配置菜单 Project Structure 中选择目标模块，在SDK选项中切换指定的SDK版本。\"]},\"2356\":{\"h\":\"6. JDK与Language level\",\"t\":[\"JDK版本是用来控制模块JDK的版本的，而Language Level是编辑器用来对代码进行语言检查的版本。\",\"即：就算JDK支持新语法，只要Language level指定的版本不支持新语法，编辑器也会报错。\",\"b-1-1\"]},\"2357\":{\"h\":\"b-2. Lambda\",\"t\":[\"提示\",\"可以理解为JS-ES6中的 箭头函数\"]},\"2358\":{\"h\":\"Ⅰ. Lambda表达式\"},\"2359\":{\"h\":\"1. 简介\",\"t\":[\"Lambda 是一个 匿名函数，使用它可以写出更简洁、更灵活的代码。\",\"是一种更紧凑的代码风格。\"]},\"2360\":{\"h\":\"2. Lambda本质\",\"t\":[\"Lambda表达式的本质：作为函数式接口的实例。\",\"用匿名实现类表示的都可以用Lambda表达式来写。\"]},\"2361\":{\"h\":\"3. 应用场景\",\"t\":[\"只有函数式接口可以这么用\",\"函数式接口：只有一个方法的接口。\"]},\"2362\":{\"h\":\"4. 格式\",\"t\":[\" Comparator<Integer> com2 = (o1,o2) -> Integer.compare(o1,o2); \",\"->：Lambda操作符或箭头操作符\",\"->左边：Lambda形参列表（其实就是接口中的抽象方法的形参列表）\",\"->右边：lambda体 （其实就是重写的抽象方法的方法体）\"]},\"2363\":{\"h\":\"4.1 一定省略的内容\",\"t\":[\"接口构造器：通过标识符的数据类型就能推断出接口构造器\",\"参数类型：同类型推断能推断出参数类型\",\"重写的接口的方法：函数接口只有一个方法，可以省略，只保留方法体\"]},\"2364\":{\"h\":\"4.2 特殊情况下省略的内容\",\"t\":[\"形参小括号：只有一个参数可以省略\",\"方法体外的{}：只有一句方法体，可以省略\",\"return关键字：方法中只要规定了返回值类型，就默认方法体种一定有返回值了，只有一句方法体，肯定是return语句，可以省略return。\"]},\"2365\":{\"h\":\"5. 类型推断\",\"t\":[\"Lambda 表达式中的参数类型都是由编译器推断得出的。Lambda表达式中无需指定类型，程序依然可以编译，这是因为 javac 根据程序的上下文，在后台推断出了参数的类型。Lambda 表达式的类型依赖于上下文环境，是由编译器推断出来的。这就是所谓的“类型推断”。\"]},\"2366\":{\"h\":\"6. 语法总结\",\"t\":[\"->左边 \",\"lambda形参列表的参数类型可以省略(类型推断)；\",\"如果lambda形参列表只有一个参数，其一对()也可以省略\",\"没有参数不可省略括号\",\"->右边 \",\"lambda体应该使用一对{}包裹；\",\"如果lambda体只有一条执行语句，省略这一对{}。\",\"如果只有一条return语句，return也可以省略，且如果{}省略，return必须省略。\"]},\"2367\":{\"h\":\"Ⅱ. Lambda的使用\",\"t\":[\"Lambda表达式的使用，分为6中情况。本质还是上面的语法总结。\"]},\"2368\":{\"h\":\"1. 示例：无参、无return\",\"t\":[\" = ()->{...;}; \"]},\"2369\":{\"h\":\"示例：Runnable接口的run函数\",\"t\":[\"//1.老写法 Runnable r1 = new Runnable() { @Override public void run(){ System.out.println(\\\"I'm batman\\\"); } }; r1.run(); ========================================== //2.Lambda Runnable r2 = () -> { System.out.println(\\\"I'm bat van\\\"); }; r2.run(); \"]},\"2370\":{\"h\":\"2. 格式2：1参、无return\",\"t\":[\"= (Object arg1)->{...;}; \"]},\"2371\":{\"h\":\"示例：Consumer接口的accept方法\",\"t\":[\"//1.老写法 Consumer<String> con = new Consumer<String>(){ @Override public void accept(String s){ System.out.println(s); } }; con.accept(\\\"hello\\\"); ================================================= //2.Lambda Consumer<String> con2 = (String s) ->{System.out.println(s)} ==>进一步更精简模式 Consumer<String> con2 = s -> System.out.println(s); \"]},\"2372\":{\"h\":\"3. 格式3：省略数据类型\",\"t\":[\"见上一个例子，数据类型是根据接口的规范进行推断的，跟泛型无关。\",\"(arg1)->{...;}; \"]},\"2373\":{\"h\":\"示例：见格式2精简模式\",\"t\":[\"Consumer<String> con2 = s -> System.out.println(s); \"]},\"2374\":{\"h\":\"4. 格式4：省略1参的小括号\",\"t\":[\"arg1->{...;}; \"]},\"2375\":{\"h\":\"示例：见格式2示例的\",\"t\":[\"Consumer<String> con2 = s -> System.out.println(s); \"]},\"2376\":{\"h\":\"5. 格式5：多参、多执行语句\",\"t\":[\"(arg1,arg2)->{ ...; ....; return ...; }; \"]},\"2377\":{\"h\":\"示例：Comparator接口 compare方法\",\"t\":[\"//1.老写法 Comparator<Integer> com1 = new Comparator<Integer>() { @Override public int compare(Integer o1, Integer o2) { System.out.println(o1); System.out.println(o2); return o1.compareTo(o2); } }; //Comparator int result = com1.compare(10, 20); System.out.println(result); ================================================= Comparator<Integer>com2 = (o1,o2) -> { System.out.println(o1); System.out.println(o2); return o1.compareTo(o2); }; int result2 = com2.compare(10, 20); System.out.println(result2); \"]},\"2378\":{\"h\":\"6. 省略{}\",\"t\":[\"见格式2的更精简写法\",\"(arg1,arg2)->...; \"]},\"2379\":{\"h\":\"b-3. Functional\"},\"2380\":{\"h\":\"Ⅰ. 函数式接口\",\"t\":[\"只包含一个抽象方法的接口，称为函数式接口。\"]},\"2381\":{\"h\":\"Functional 的意义\",\"t\":[\"Java是纯面向对象的语言，失去了面向过程（面向函数）的灵活性，比如PHP语言可以直接定义函数，使用函数，以函数为单位提供一个简单的独立的功能。\",\"而Java不能直接定义函数，所有函数必须以方法的形式属于某个类，这就不够灵活了，而函数式接口就补气了这个短板，以函数式接口的形式模拟了面向函数的特点。\",\"函数式接口本质上是穷举了所有函数的格式，不同的函数，格式上只有参数和返回值的区别，即多少个参数，有无返回值，返回值是怎么获取的。\",\"因此函数式接口就是一个载体，用来执行一个函数，Java为不同格式的函数提供了不同类型的内置接口，根据需求选择符合要求（参数和返回值）的接口，实现他的方法，写出需要的功能，就OK了。\"]},\"2382\":{\"h\":\"1. Functional 介绍\"},\"2383\":{\"h\":\"函数式接口的特点\",\"t\":[\"由接口名、形参列表、函数名组成。\"]},\"2384\":{\"h\":\"如何使用函数式接口\",\"t\":[\"我们需要一个功能，为一个功能创建一个类太浪费了。\",\"我们可以利用函数式接口，寻找或定义一个参数符合的接口。然后利用Lambda的方式调用即可，函数体直接在使用的时候定义。\"]},\"2385\":{\"h\":\"函数式接口要定义多少\",\"t\":[\"函数式接口本质上只是一个载体，用来执行函数体的载体，本身毫无意义。\",\"但是由于方法是有参数限制的（数量和类型），因此我们需要定义多个函数式接口，这些接口的区别就是参数不一样，可以很简单的穷举出需要多少个函数式接口。\"]},\"2386\":{\"h\":\"内置函数式接口\",\"t\":[\"在java.util.function包下定义了Java 8 的丰富的函数式接口。\",\"包含4中常用的函数式接口，和一些不常用的。也就是Java替我们穷举好了，我们直接使用即可。\"]},\"2387\":{\"h\":\"2. 注解\",\"t\":[\"@FunctionalInterface\",\"该注解表示下面要定义的接口为：函数式接口；这样做可以检查它是否是一个函数式接口。同时 javadoc 也会包含一条声明，说明这个接口是一个函数式接口。\"]},\"2388\":{\"h\":\"3. 自定义函数式接口\",\"t\":[\"@FunctionalInterface public interface MyInterface { void method1(); } \"]},\"2389\":{\"h\":\"4. Lambda与创建Functional对象\",\"t\":[\"可以通过 Lambda 表达式来创建该接口的对象。（若 Lambda 表达式抛出一个受检异常(即：非运行时异常)，那么该异常需要在目标接口的抽象方法上进行声明）。\",\"用匿名实现类表示的都可以用Lambda表达式来写。\"]},\"2390\":{\"h\":\"5. 缺点\",\"t\":[\"每次使用都要写方法体，太繁琐了，在支持函数式编程的语言了，都是提前定义好方法，随用随调，方法体都省了。\",\"解决方案：方法引用。\"]},\"2391\":{\"h\":\"Ⅱ. 内置Functional\",\"t\":[\"Java内部已经将参数的类型穷举好了，提供了很多内置的Functional，直接用即可。\"]},\"2392\":{\"h\":\"1. Java内置四大核心Functional\",\"t\":[\"b-3-1\",\"消费型：提供一个参数，什么都不返回：参数被消耗了 \",\"Consumer<T> void accept(T t)\",\"供给型：不提供参数，返回了一个值：供给了一个值 \",\"Supplier<T> T get()\",\"函数型：提供参数，参数类型是对象T，返回值类型是对象R。 \",\"Function<T,R> R apply(T t)\",\"断定型：提供一个参数，进行判断，返回boolean：进行一些参数的断定 \",\"Predicate<T> boolean test(T t)\"]},\"2393\":{\"h\":\"2. 其他类型Functional\",\"t\":[\"b-3-2\"]},\"2394\":{\"h\":\"b-4. 方法引用\"},\"2395\":{\"h\":\"Ⅰ. 方法引用介绍\"},\"2396\":{\"h\":\"1. 定义\",\"t\":[\"Method References：方法引用，本质上就是Lambda表达式，而Lambda表达式可以作为函数式接口的实例。所以方法引用，也是函数式接口的实例。通过方法的名字来指向一个方法，可以认为是Lambda表达式的一个语法糖。\"]},\"2397\":{\"h\":\"2. 使用情景\",\"t\":[\"当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！\"]},\"2398\":{\"h\":\"3. 语法格式\",\"t\":[\"使用格式：类(或对象) :: 方法名\",\"情况1：对象 :: 非静态方法\",\"情况2：类 :: 静态方法\",\"情况3：类 :: 非静态方法\"]},\"2399\":{\"h\":\"解析\",\"t\":[\"可以将方法名看做是Lambda表达式中，接口中方法的方法名。\",\"当我们找到了一个除了方法名不一样，其他完全一样的方法（参数、返回值，方法体逻辑），我们就会用这个方法，替代接口中的方法，而不用自己再去定义了。\",\":: 就可以认为告诉了表达式要用后面的方法替代接口中的方法。由于后面的方法已经定义过了，参数和返回值也都定义好了，因此只需要写方法名即可。\"]},\"2400\":{\"h\":\"4. 使用要求\",\"t\":[\"情况1和2：要求接口中的抽象方法的形参列表和返回值类型与方法引用的方法的形参列表和返回值类型相同！\",\"情况3：要求接口中的抽象方法中，第一个形参是方法引用中的方法的调用者，且其他形参和返回值类型相同。 \",\"方法引用时，要使用参数1的类，而非对象，比如参数1是个字符串，就要用String类。\"]},\"2401\":{\"h\":\"Ⅱ. 方法引用示例\"},\"2402\":{\"h\":\"1. 示例1：情况1： 对象 :: 非静态方法\",\"t\":[\"要求：使用Consumer接口，打印参数\"]},\"2403\":{\"h\":\"1.1 Lambda表达式写法\",\"t\":[\"Consumer<String> con1 = str->System.out.println(str); con1.accept(\\\"hello\\\"); \"]},\"2404\":{\"h\":\"1.2 方法引用写法\",\"t\":[\"解析：Lambda要实现的操作（方法体）已经有方法实现过了，就是System.out类的println方法，因此可以直接使用方法引用，使用println这个方法。\",\"Consumer中的方法为：void accept(T t)\",\"PrintStream中的方法为：void println(T t)\",\"参数一样，功能也一样，满足条件。由于参数也一样，故可以省略参数。\",\"PrintStream ps = System.out; Consumer<string> con2 = ps::println; con2.accept(\\\"hi\\\"); \"]},\"2405\":{\"h\":\"2. 示例2：情况1： 对象 :: 非静态方法（自定义类）\",\"t\":[\"说明：自定义类Employee中，有一个方法getName，无参数，用来获取员工姓名的。\",\"//创建一个员工对象 Employee emp = new Employee(100,\\\"Jinno\\\",23,4000); \"]},\"2406\":{\"h\":\"2.1 Lambda表达式\",\"t\":[\"Supplier<String> = sup1 -> emp.getName(); sup1.get(); \"]},\"2407\":{\"h\":\"2.2 方法引用\",\"t\":[\"解析：Employee类中的方法 String getName()；Supplier中的 T get()方法都是空参，返回一个值，因此可以用getName替代get()。\",\"Supplier<string> = sup2->emp::getName(); \"]},\"2408\":{\"h\":\"3. 示例3：情况二：类 :: 静态方法\",\"t\":[\"要求：使用Comparator接口比较俩个数值的大小\"]},\"2409\":{\"h\":\"3.1 Lambda\",\"t\":[\"Comparator<Integer> com1 = (t1,t2)-> Integer.compare(t1,t2); com1.compare(10,20); \"]},\"2410\":{\"h\":\"3.2 方法引用\",\"t\":[\"解析：Comparator中的int compare(T t1,T t2)；Integer中的int compare(T t1,T t2)算法、返回值、参数都是一样的，可以直接替换。\",\"Comparator<Integer> com2 = Integer::compare; com2.compare(10,20); \"]},\"2411\":{\"h\":\"4. 示例4：情况三： 类 :: 实例方法\",\"t\":[\"要求：使用Comparator接口比较两个字符串的大小\"]},\"2412\":{\"h\":\"4.1 Lambda\",\"t\":[\"Comparator<String> com1 = (s1,s2)->s1.compareTo(s2); com1.compare(\\\"abc\\\",\\\"abd\\\"); \"]},\"2413\":{\"h\":\"4.2 方法引用\",\"t\":[\"解析：参数s1（属于String类），刚好是compareTo方法的调用者，且两个方法的其他参数和返回值相同，故可以进行方法引用\",\"Comparator<String> com2 = String::compareTo; \"]},\"2414\":{\"h\":\"5. 示例5：情况三：类 :: 实例方法 （自定义类）\",\"t\":[\"要求：调用自定义类的getName方法，获取员工姓名（String类型）。\",\"Employee employee = new Employee(100,\\\"Jinno\\\",23,34); \"]},\"2415\":{\"h\":\"5.1 Lambda\",\"t\":[\"Function<Employee,String> fun1 = e ->e.getName(); \"]},\"2416\":{\"h\":\"5.2 方法引用\",\"t\":[\"解析：Function接口的第一个参数刚好是方法的调用者（只有一个参数）；返回值也符合要求，故可以使用方法因引用\",\"Function<Employee,String> fun2 = Employee::getName(); \"]},\"2417\":{\"h\":\"Ⅲ. 构造器引用\",\"t\":[\"函数返回的是一个对象，就可以采用构造器引用\"]},\"2418\":{\"h\":\"1. 使用条件\",\"t\":[\"函数式接口的抽象方法的形参列表和构造器的形参列表一致。\",\"抽象方法的返回值类型即为构造器所属的类的类型\"]},\"2419\":{\"h\":\"2. 语法格式\",\"t\":[\"ClassName::new\"]},\"2420\":{\"h\":\"3. 示例1：空参构造器\",\"t\":[\"要求：获得一个Employee（自定义员工类对象）对象（空参构造器创建的）。\",\"方法：采用供给型接口：Supplier的get()方法\"]},\"2421\":{\"h\":\"3.1 Lambda\",\"t\":[\"Supplier<Employee> emp1 = ()-> new Employee(); emp1.get(); \"]},\"2422\":{\"h\":\"3.2 构造器引用\",\"t\":[\"Supplier<Employee> emp2 = Employee::new; emp2.get(); \"]},\"2423\":{\"h\":\"4. 示例2：单参构造器\",\"t\":[\"要求：获得一个Employee（自定义员工类对象）对象（单参构造器创建的）。\",\"方法：采用函数型接口Function，提供一个参数，返回一个new的对象\"]},\"2424\":{\"h\":\"4.1 Lambda\",\"t\":[\"Function<Integer,Employee> func1 = id -> new Employee(id); func1.apply(10); \"]},\"2425\":{\"h\":\"4.2 构造器引用\",\"t\":[\"解析：泛型里已经规定了有一个Integer类型的参数，所以调用的是单参构造器.\",\"Fucntion<Integer,Employee> func2 = Employee:new fucn2.apply(10) \"]},\"2426\":{\"h\":\"5. 示例3：多参构造器\",\"t\":[\"要求：获得一个Employee（自定义员工类对象）对象（双参构造器创建的）。\",\"方法：采用函数式接口BiFunction<T,U,R>，提供两个类参数，返回一个对象。\"]},\"2427\":{\"h\":\"5.1 Lambda\",\"t\":[\"BiFUnction<Integer,String,Employee> fun1 = (id,name) ->new Employee(id,name); func1.apply(100,\\\"Tom\\\"); \"]},\"2428\":{\"h\":\"5.2 构造器引用\",\"t\":[\"BiFUnction<Integer,String,Employee> fun2 = Employee::new; func2.apply(101,\\\"Aaron\\\"); \"]},\"2429\":{\"h\":\"Ⅳ. 数组引用\",\"t\":[\"可以把数组看做是一个特殊的类，则写法与构造器引用一致。\"]},\"2430\":{\"h\":\"1. 语法格式\",\"t\":[\"type[] :: new\"]},\"2431\":{\"h\":\"2. 示例\",\"t\":[\"要求：根据Integer参数，返回指定长度的空数组\"]},\"2432\":{\"h\":\"2.1 Lambda\",\"t\":[\"Function<Integer,String[]> func1 = length->new String[length]; func1.apply(5); \"]},\"2433\":{\"h\":\"2.2 构造器引用\",\"t\":[\"Function<Integer,String[]> func2 = String[]::new; func2.apply(10); \"]},\"2434\":{\"h\":\"b-5. Stream\"},\"2435\":{\"h\":\"Ⅰ. Stream API\",\"t\":[\"Stream API其实就是一套API，用来操作集合类数据的，这套API的操作跟SQL里的操作类似。只是SQL里的操作是操作数据库的，Stream API是操作集合和数组的。\",\"对于从NoSQL获取的数据，非常有用，可以在java层面对NoSQL数据进行类似SQL的操作（几乎一切操作：过滤、去重、筛选、分页等....）。\"]},\"2436\":{\"h\":\"1. Stream API 说明\",\"t\":[\"Stream API ( java.util.stream) 把真正的函数式编程风格引入到Java中。\",\"Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。\",\"使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。简言之，Stream API 提供了一种高效且易于使用的处理数据的方式。\"]},\"2437\":{\"h\":\"2. Stream API使用背景\",\"t\":[\"对于Mysql等数据库层面的数据源，数据库已经对数据进行处理。\",\"而NoSQL的数据就需要Java层面去处理了。\"]},\"2438\":{\"h\":\"3. Stream的本质\",\"t\":[\"是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。\"]},\"2439\":{\"h\":\"Stream 和 Collection 集合的区别\",\"t\":[\"“集合讲的是数据，Stream 讲的是计算！”\",\"Collection 是一种静态的内存数据结构，而 Stream 是有关计算的。前者是主要面向内存，存储在内存中，后者主要是面向 CPU，通过 CPU 实现计算。\"]},\"2440\":{\"h\":\"4. Stream的操作步骤\",\"t\":[\"b-5-1\",\"创建Stream：Stream的实例化：通过一个数据源（如：集合、数组），获取一个Stream\",\"中间操作：一个中间操作链，对数据源的数据进行处理\",\"终止操作（终端操作）：一旦执行终止操作，就执行中间操作链，并产生结果。之后，中间操作不会再被使用。\"]},\"2441\":{\"h\":\"5. Stream的特点\",\"t\":[\"自己不会存储元素。\",\"不会改变源对象。相反，他们会返回一个持有结果的新Stream。\",\"操作是延迟执行的。这意味着他们会等到需要结果的时候才执行\"]},\"2442\":{\"h\":\"Ⅱ. Stream 实例化\"},\"2443\":{\"h\":\"1. 通过集合创建Stream\"},\"2444\":{\"h\":\"1.1 顺序流\",\"t\":[\"通过集合的Stream方法，返回一个顺序流Stream\",\"顺序流：按顺序从集合中取出数据\",\"default Stream<E> stream(); ================================================ //list ->{\\\"a\\\",\\\"b\\\",\\\"c\\\",\\\"d\\\",\\\"e\\\"} Stream<String> stream = list.stream(); \"]},\"2445\":{\"h\":\"1.2 并行流\",\"t\":[\"通过集合的parallelStream方法，返回一个并行流Stream\",\"多线程从集合中取出数据，不按顺序\",\" default Stream<E> parallelStream() ================================================ //list ->{\\\"a\\\",\\\"b\\\",\\\"c\\\",\\\"d\\\",\\\"e\\\"} Stream<String> parallelStream = list.parallelStream(); \"]},\"2446\":{\"h\":\"2. 通过数组创建Stream\",\"t\":[\"Arrays 的静态方法 stream() 可以获取数组的Stream：\",\"static <T> Stream<T> stream(T[] array) =========================================== int[] arr = {1, 2, 3, 4, 5}; IntStream arrStream = Arrays.stream(arr); \"]},\"2447\":{\"h\":\"重载形式\",\"t\":[\"如上，不同数据类型的数组，通过该方法，会生成不同类型的Stream。Arrays.stream有多个重载：\",\"public static IntStream stream(int[] array)\",\"public static LongStream stream(long[] array)\",\"public static DoubleStream stream(double[] array)\"]},\"2448\":{\"h\":\"3. 通过Stream的of()创建Stream\",\"t\":[\"可以调用Stream类静态方法 of(), 通过显示值创建一个流。它可以接收任意数量的参数。\",\"public static<T> Stream<T> of(T... values); ================================================ Stream<? extends Serializable> stream1 = Stream.of(1, 2, 3, \\\"hello\\\", \\\"shit\\\"); Stream<Integer> stream2 = Stream.of(1, 2, 3); \"]},\"2449\":{\"h\":\"4. 创建无限流Stream【了解】\",\"t\":[\"可以使用静态方法 Stream.iterate() 和 Stream.generate(),创建无限流。\",\"无限流就是数据无限生成，需要加终止条件和限制条件辅助生成。\"]},\"2450\":{\"h\":\"4.1 迭代\",\"t\":[\"参数1：seed->种子，初始值\",\"参数2：UnaryOperator，对种子进行的操作，一元运算符\",\"public static<T> Stream<T> iterate(final T seed, final UnaryOperator<T> f) ================================================ //示例:遍历偶数，通过limit限制为10个 Stream.iterate(0, t -> t + 2).limit(10).forEach(System.out::println); \"]},\"2451\":{\"h\":\"4.2 生成\",\"t\":[\"参数：Supplier，供应者，参数数据的对象.方法\",\"public static<T> Stream<T> generate(Supplier<T> s) ================================================ //示例:生成随机数，通过limit限制为10个 Stream.generate(Math::random).limit(10).forEach(System.out::println); \"]},\"2452\":{\"h\":\"Ⅲ. Stream 的操作\",\"t\":[\"Stream的操作分为中间操作和终止操作。\",\"Stream操作的方法，和SQL中的效果类似，名字也基本一样。\"]},\"2453\":{\"h\":\"1. 中间操作说明\",\"t\":[\"多个中间操作可以连接起来形成一个流水线（SQL中也是）。 除非流水线上触发终止操作，否则 中间操作不会执行任何的处理（SQL也是），而在终止操作时一次性全部处理，称为“惰性求值\"]},\"2454\":{\"h\":\"2. 总结操作的方法\",\"t\":[\"筛选与切片：filter、distinct、limit、skip\",\"映射：map、mapToDouble、mapToInt、mapToLong、flatMap\",\"排序：sorted\"]},\"2455\":{\"h\":\"3. 终止操作说明\",\"t\":[\"终止操作会从流的流水线生成结果。其结果可以是任何不是流的值，例如：List、Integer，甚至是 void 。\",\"流进行了终止操作后，不能再次使用。\",\"可以只有终止操作，没有中间操作。\"]},\"2456\":{\"h\":\"4. 终止操作的方法\",\"t\":[\"匹配与查找\",\"归约\",\"收集\"]},\"2457\":{\"h\":\"Ⅳ. 筛选与切片\",\"t\":[\"b-5-2\",\"测试数据源：Employee类的对象，属性包括： id(int)、姓名(string)、年龄(int)、收入(double)。\"]},\"2458\":{\"h\":\"1. filter：筛选\",\"t\":[\"接收 Lambda，从流中排除某些元素，参数就是流操作的数据源。\",\"filter(Predicate p) ========================================== //1.获取员工集合，并通过集合获取Stream List<Employee> list = EmployeeData.getEmployees(); Stream<Employee> stream = list.stream(); //2.筛选工资>7000的员工 stream.filter(e -> e.getSalary() > 7000).forEach(System.out::println); \"]},\"2459\":{\"h\":\"2. distinct：去重\",\"t\":[\"和SQL的distinct类似，去重，通过流所生成元素的 hashCode() 和 equals() 去除重复元素\",\"distinct(); ========================================== List<Employee> list = EmployeeData.getEmployees(); Stream<Employee> stream = list.stream(); stream.distinct().forEach(System.out::println); \"]},\"2460\":{\"h\":\"3. limit：截断\",\"t\":[\"截断流，使其元素不超过给定数量。\",\"根据遍历顺序，只获取前N个数据\",\"limit(n) ========================================== List<Employee> list = EmployeeData.getEmployees(); Stream<Employee> stream = list.stream(); list.stream().limit(3).forEach(System.out::println); \"]},\"2461\":{\"h\":\"4. skip：跳过\",\"t\":[\"跳过元素，返回一个扔掉了前 n 个元素的流。若流中元素不足 n 个，则返回一个空流。与 limit(n) 互补\",\"skip(n); ========================================== List<Employee> list = EmployeeData.getEmployees(); Stream<Employee> stream = list.stream(); stream.skip(3).forEach(System.out::println); \"]},\"2462\":{\"h\":\"Ⅴ. 映射\",\"t\":[\"b-5-3\",\"测试数据源：Employee类的对象，属性包括： id(int)、姓名(string)、年龄(int)、收入(double)\"]},\"2463\":{\"h\":\"1. map\",\"t\":[\"接收一个函数作为参数，该函数会被应用到每个元素上。\",\"Stream中的每个元素都会作为参数传递给方法中，做同样的方法体操作。该操作会返回一个新的Stream，函数的每次操作都会将参数映射成一个新的元素。\",\"主要用途：从一个流中获取新流，比如从用户流中getAge获取年轻，得到一个用户年龄流。\",\"map(Function f) ========================================== List<String> list = Arrays.asList(\\\"aa\\\", \\\"bb\\\", \\\"cc\\\", \\\"dd\\\"); //将所有元素都转为大写{AA,BB,CC,DD} list.stream().map(str->str.toUpperCase()).forEach(System.out::println); //返回了一个新的Stream,新Stream已经是元素修改后的了{AA,BB,CC,DD} Stream<String> stringStream = strList.stream().map(String::toUpperCase); stringStream.forEach(System.out::println); \"]},\"2464\":{\"h\":\"1.1 mapToDouble\",\"t\":[\"接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 DoubleStream。\",\"mapToDouble(ToDoubleFunction f); \"]},\"2465\":{\"h\":\"1.2 mapToInt\",\"t\":[\"接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 IntStream。\",\"mapToInt(ToIntFunction f); \"]},\"2466\":{\"h\":\"1.3 mapToLong\",\"t\":[\"接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 LongStream。\",\"mapToLong(ToLongFunction f); \"]},\"2467\":{\"h\":\"2. flatMap\",\"t\":[\"使用前提：生成Stream的集合是一个嵌套集合，即：集合中的每个元素，都是一个集合。\",\"将Stream中的每个元素（集合）中的元素，提取出来应用到方法中，并统一放回到一个集合中返回。（嵌套集合，返回成了非嵌套集合）。\",\"flatMap(Function f) <R> Stream<R> flatMap(Function<? super T, ? extends Stream<? extends R>> mapper); \",\"使用注意：flatMap中，每个输入始终是一个集合，不然就报错。 \",\"实测：该方法不会递归，仅支持展开一层嵌套。\",\"用途：一般仅作用集合的展开，如果要对集合中的所有元素进一步操作，可以接个map()\"]},\"2468\":{\"h\":\"3. map和flatMap的对比示例、\"},\"2469\":{\"h\":\"3.1 素材\",\"t\":[\"①使用Map从学生集合中获取每个学生的年龄\",\"②使用flatMap从年级集合中，获取每个学生的年龄\",\"//1.一个学生类，包含姓名和年龄两个属性 class Student{ private String userName; private int age = 1; public Student(String userName,int age){ this.userName = userName; this.age = age; } public int getAge() { return age; } //2.获取一个集合，包含所有学生数据(元素是学生类) public static List<Student> getStuList(){ Student ton = new Student(\\\"Ton\\\", 20); Student jerry = new Student(\\\"Jerry\\\", 22); Student jinno = new Student(\\\"Jinno\\\", 20); Student aaron = new Student(\\\"Aaron\\\", 19); List<Student> students = new ArrayList<>(); students.add(ton); students.add(jerry); students.add(jinno); students.add(aaron); return students; } //3.获取一个集合，包含子集合，子集合是班级，班级本身是学生数据集合 public static List<List<Student>> getGradeList(){ Student ton = new Student(\\\"Ton\\\", 20); Student jerry = new Student(\\\"Jerry\\\", 22); Student jinno = new Student(\\\"Jinno\\\", 20); Student aaron = new Student(\\\"Aaron\\\", 19); List<Student> grade1 = new ArrayList<>(); List<Student> grade2 = new ArrayList<>(); grade1.add(ton); grade1.add(jerry); grade2.add(jinno); grade2.add(aaron); return Arrays.asList(grade1, grade2); } } \"]},\"2470\":{\"h\":\"3.2 map的使用\",\"t\":[\"从学生对象集合中，获取班级学生所有年龄组成的集合。\",\"List<Student> stuList = Student.getStuList(); stuList.stream().map(Student::getAge).forEach(System.out::println); \"]},\"2471\":{\"h\":\"3.3 flatMap\",\"t\":[\"从班级对象集合中，获取班级学生所有年龄组成的集合。\",\"嵌套集合，外部集合内嵌套了班级集合，班级集合内的元素才是学生对象。\",\"List<List<Student>> gradeList = Student.getGradeList(); gradeList.stream().flatMap(Collection::stream) .map(Student::getAge).collect(Collectors.toList()); \"]},\"2472\":{\"h\":\"3.4 总结\",\"t\":[\"如上，当我们要对集合中的每个元素进行操作，并返回一个新集合是，使用map\",\"当我们要操作的集合是个嵌套集合时，就无法直接使用map了，可以先使用flatMap，从嵌套集合生成的流中，获取子集合，并将子集合全部转化为Stream（接着flatMap会将这些stream合并成一个Stream），然后再调用Map进行进一步的操作。\"]},\"2473\":{\"h\":\"Ⅵ. 排序\"},\"2474\":{\"h\":\"1. sorted：自然排序\",\"t\":[\"自然排序，产生一个新流，其中元素按自然顺序排序\",\"使用前提：集合的元素需要实现Comparable接口（尤其是自定义的类），否则抛异常\",\"sorted(); ========================================== List<Integer> list = Arrays.asList(12, 43, 65, 34, 87, 0, -98, 7); //输出内容：-98;0;7;12;34;43;65;87 list.stream().sorted().forEach(System.out::println); \"]},\"2475\":{\"h\":\"2. sorted(Comparator com)：定制排序\",\"t\":[\"产生一个新流，其中元素按比较器顺序排序\",\"sorted(Comparator com); ========================================== List<Student> stuList = Student.getStuList(); //根据学生的年龄进行排序 stuList.stream().sorted((stu1,stu2)->{ return Integer.compare(stu1.getAge(),stu2.getAge()); }).forEach(System.out::println); \"]},\"2476\":{\"h\":\"Ⅶ. 匹配与查找\"},\"2477\":{\"h\":\"1. allMatch：检查是否匹配所有元素\",\"t\":[\"作用：将stream代表的集合中的每一个元素作为参数在方法中进行操作，如果全都返回true，则整体返回true，否则返回false。\",\"参数：一个Predicate Functional\",\"boolean allMatch(Prodecate p); //示例：是否所有的员工的年龄都大于18 List<Employee> list = EmployeeData.getEmployees(); boolean b = list.stream().allMatch(e -> e.getAge() > 18); System.out.println(b); //false \"]},\"2478\":{\"h\":\"2. anyMatch：检查是否至少匹配一个元素\",\"t\":[\"boolean anyMatch(Predicate p); //示例：是否存在员工的工资大于 10000 List<Employee> list = EmployeeData.getEmployees(); boolean b1 = list.stream().anyMatch(e -> e.getSalary() > 10000); System.out.println(b1); //false \"]},\"2479\":{\"h\":\"3. noneMatch：检查是否没有匹配任何元素\",\"t\":[\"Boolean noneMatch(Predicate p) //示例：是否存在员工姓进 boolean name = list.stream().noneMatch(e -> e.getName().startsWith(\\\"进\\\")); System.out.println(name);//true \"]},\"2480\":{\"h\":\"4. findFirst：返回第一个元素\",\"t\":[\"返回值类型是Optional对象\",\"Optional<> findFirst(); //示例：返回第一个元素 List<Employee> list = EmployeeData.getEmployees(); Optional<Employee> first = list.stream().findFirst(); System.out.println(first); //Optional[Employee{id=1001, name='马化腾', age=34, salary=6000.38}] \"]},\"2481\":{\"h\":\"5. findAny：返回当前流中任意元素\",\"t\":[\"注意：不能用这个方法来获取随机元素，因为获取的元素是固定的，只是未必是第一个。\",\"Optional<> findAny(); //示例：默认返回的还是第一个 List<Employee> list = EmployeeData.getEmployees(); Optional<Employee> any = list.stream().findAny(); System.out.println(any); //Optional[Employee{id=1001, name='马化腾', age=34, salary=6000.38}] \"]},\"2482\":{\"h\":\"6. count：返回流中元素总数\",\"t\":[\"可以在中间接filter，获取要筛选的元素的总数\",\"long count(); //示例：返回员工总数 long count = list.stream().count(); System.out.println(count); //8 \"]},\"2483\":{\"h\":\"7. max：返回流中最大值\",\"t\":[\"参数是Comparator接口\",\"Optional<> max(Comparator c) //示例：返回工作最高的员工的工资 Optional<Double> max = list.stream().map(e -> e.getSalary()).max(Double::compare); System.out.println(max); //Optional[9876.12] \"]},\"2484\":{\"h\":\"8. min：返回流中最小值\",\"t\":[\"参数是Comparator接口\",\"Optional<> min(Comparator c); //示例：获取工资最低的员工对象 Optional<Employee> min = list.stream().min((e1, e2) -> Double.compare(e1.getSalary(), e2.getSalary())); System.out.println(min); //Optional[Employee{id=1008, name='扎克伯格', age=35, salary=2500.32}] \"]},\"2485\":{\"h\":\"9. forEach：内部迭代\",\"t\":[\"使用 Collection 接口需要用户去做迭代，称为外部迭代。\",\"相反，Stream API 使用内部迭代——它帮你把迭代做了\",\"forEach(Consumer c); //示例：遍历Stream中集合的所有元素 employees.forEach(System.out::println); \"]},\"2486\":{\"h\":\"Ⅷ. 归约与收集\"},\"2487\":{\"h\":\"1. reduce：归约\",\"t\":[\"可以将流中元素反复结合起来，得到一个值。\",\"参数1：iden，初始值\",\"参数2：BinaryOpearator Functional（对两个类型相同的参数进行二元运算）。\",\"返回值：和初始值类型相同的值。\",\"T reduce(T iden, BinaryOperator b) //示例：获取1到10的总和 List<Integer> intList = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10); //注意：初始值要写0，不然会多算一个1. Integer reduce = intList.stream().reduce(0, Integer::sum); System.out.println(reduce); \"]},\"2488\":{\"h\":\"1.1 reduce(BinaryOperator b)\",\"t\":[\"可以省略初始值，进行计算。直接使用集合中的第一个元素进行计算。\",\"返回值： Optional<T>\",\"reduce(BinaryOperator b);// List<Integer> intList = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10); Optional<Integer> reduce = intList.stream().reduce(Integer::sum); System.out.println(reduce); //Optional[55] \"]},\"2489\":{\"h\":\"1.2 map-reduce模式\",\"t\":[\"map 和 reduce 的连接通常称为 map-reduce 模式，因 Google用它来进行网络搜索而出名。\",\"示例：计算公式所有员工工资的总和\",\"Optional<Double> reduce = list.stream().map(Employee::getSalary) .reduce((s1, s2) -> s1 + s2); //也可以写成：(Double::sum) System.out.println(reduce); //Optional[48424.08] \"]},\"2490\":{\"h\":\"2. 收集\",\"t\":[\"将流转换为其他形式。接收一个 Collector接口的实现，用于给Stream中元素做汇总的方法.\",\"Collector 接口中方法的实现决定了如何对流执行收集的操作(如收集到 List、Set、Map)。\",\"Collectors 实用类提供了很多静态方法，可以方便地创建常见收集器实例。\",\"collect(Collector c) \"]},\"2491\":{\"h\":\"Collectors\",\"t\":[\"//1.示例：获取工资大于6000的员工List集合 List<Employee> cList = list.stream().filter(e -> e.getSalary() > 6000) .collect(Collectors.toList()); //2.示例：获取工资大于6000的员工Set集合 Set<Employee> cSet = list.stream().filter(e -> e.getSalary() > 6000) .collect(Collectors.toSet()); \",\"常用1：toList：返回List集合\",\"常用2：toSet：返回Set集合\"]},\"2492\":{\"h\":\"Collectors的方法\",\"t\":[\"b-5-4\",\"b-5-5\"]},\"2493\":{\"h\":\"b-6. Optional\"},\"2494\":{\"h\":\"Ⅰ. Optional 介绍\"},\"2495\":{\"h\":\"1. 介绍\",\"t\":[\"Optional<T>类(java.util.Optional) 是一个容器类，它可以保存类型T的值，代表这个值存在。或者仅仅保存null，表示这个值不存在。原来用 null 表示一个值不存在，现在 Optional 可以更好的表达这个概念。并且可以避免空指针异常。\"]},\"2496\":{\"h\":\"2. 产生背景\",\"t\":[\"臭名昭著的空指针异常是导致Java应用程序失败的最常见原因。以前，为了解决空指针异常，Google公司著名的Guava项目引入了Optional类，Guava通过使用检查空值的方式来防止代码污染，它鼓励程序员写更干净的代码。受到Google Guava的启发，Optional类已经成为Java 8类库的一部分\"]},\"2497\":{\"h\":\"3. 应用场景\",\"t\":[\"用来防止空指针异常，很少使用。\",\"Java底层语法很多地方用到了Optional，因此需要了解。\",\"主要使用T orElse来防止空指针。\"]},\"2498\":{\"h\":\"Ⅱ. Optional常用方法\"},\"2499\":{\"h\":\"1. 创建Optional类\"},\"2500\":{\"h\":\"1.1 Optional.of(T,t)\",\"t\":[\"创建一个 Optional 实例，t必须非空；\",\"Optional<T> Optional.of(T,t); ==================================== Student stu = new Student(); //要包装stu非null,不然会抛出异常 Optional<Student> stu1 = Optional.of(stu); System.out.println(stu1); \"]},\"2501\":{\"h\":\"1.2 Optional.empty()\",\"t\":[\"创建一个空的 Optional 实例，意义不大\",\"Optional<Object> empty = Optional.empty(); \"]},\"2502\":{\"h\":\"1.3 Optional.ofNullable(T t) 【常用】\",\"t\":[\"创建一个Optional实例，t可以为null\",\"Optional<T> Optional.ofNullable(T t); ===================================== Student stu = new Student(); Student stu2 = null; Optional<Student> stu3 = Optional.ofNullable(stu2); Optional<Student> stu4 = Optional.ofNullable(stu); System.out.println(stu4);//Optional[Student{userName='null', age=1}] System.out.println(stu3); //Optional.empty \"]},\"2503\":{\"h\":\"2. 判断Optional容器中是否有对象\"},\"2504\":{\"h\":\"2.1 isPresent\",\"t\":[\"判断Optional容器中是否有对象\",\"boolean isPresent(); ===================================== Student stu2 = null; Optional<Student> optStu2 = Optional.ofNullable(stu2); boolean b = optStu2.isPresent(); System.out.println(b); //false \"]},\"2505\":{\"h\":\"2.2 ifPresent\",\"t\":[\"如果有值，就执行Consumer接口的实现代码，并且该值会作为参数传给它。\",\"void ifPresent(Consumer<? super T> consumer) ===================================== Student stu = new Student(); Optional<Student> stu1 = Optional.ofNullable(stu); stu1.ifPresent(System.out::println); //Student{userName='null', age=1} \"]},\"2506\":{\"h\":\"3. 获取Optional容器的对象值\"},\"2507\":{\"h\":\"3.1 get：获取对象包含的值\",\"t\":[\"如果没有值，就抛异常，可以组合isPresent一起用。\",\"T get(); ===================================== Optional<Student> stu1 = Optional.ofNullable(stu); //Optional[Student{userName='null', age=1}] System.out.println(stu1); Student student = stu1.get(); //Student{userName='null', age=1} System.out.println(student); \"]},\"2508\":{\"h\":\"3.2 T orElse：\",\"t\":[\"如果有值则将其返回，否则返回指定的other对象。 加强版get()，防止空值异常。\",\"T orElse(T other); ===================================== Student stu2 = null; Optional<Student> optStu = Optional.ofNullable(stu2); Student stu3 = optStu.orElse(new Student(\\\"Anonymous\\\",21)); System.out.println(stu3);//Student{userName='Anonymous', age=21} \"]},\"2509\":{\"h\":\"b-7. JDK11 LTS\",\"t\":[\"提示\",\"JDK11的内容指的是JDK9~JDK11\",\"暂略\"]},\"2510\":{\"h\":\"Ⅰ. Modularity\"},\"2511\":{\"h\":\"Ⅱ. REPL工具\"},\"2512\":{\"h\":\"Ⅲ. try语句\"},\"2513\":{\"h\":\"Ⅳ. 底层改变\"},\"2514\":{\"h\":\"Ⅴ. 变量类型推断\"},\"2515\":{\"h\":\"Ⅵ. String新增方法\"},\"2516\":{\"h\":\"Ⅶ. 其他\"},\"2517\":{\"h\":\"1. copyOf()\"},\"2518\":{\"h\":\"2. Optional加强\"},\"2519\":{\"h\":\"3. 局部类型推断升级\"},\"2520\":{\"h\":\"4. HttpClient\"},\"2521\":{\"h\":\"5. 更简化的编译运行\"},\"2522\":{\"h\":\"6. 接口中声明私有方法\"},\"2523\":{\"h\":\"7. 钻石操作符<>的增强\"},\"2524\":{\"h\":\"1-1. 概述\",\"t\":[\"提示\",\"开发中，使用的是框架中的数据库操作方法，JDBC只用来了解底层。\",\"框架中底层用的也是JDBC。\",\"【本章内容：用来了解底层】\"]},\"2525\":{\"h\":\"1. 数据持久化\",\"t\":[\"持久化(persistence)：把数据保存到可掉电式存储设备中以供之后使用。大多数情况下，特别是企业级应用，数据持久化意味着将内存中的数据保存到硬盘上加以”固化”，而持久化的实现过程大多通过各种关系数据库来完成。\",\"1-1-1\",\"持久化的主要应用是将内存中的数据存储在关系型数据库中，当然也可以存储在磁盘文件、XML数据文件中。\"]},\"2526\":{\"h\":\"2. Java中的数据存储技术\",\"t\":[\"在Java中，数据库存取技术可分为如下几类：\",\"JDBC直接访问数据库\",\"JDO (Java Data Object )技术\",\"第三方O/R工具，如Hibernate, Mybatis 等\",\"JDBC是java访问数据库的基石，JDO、Hibernate、MyBatis等只是更好的封装了JDBC。\"]},\"2527\":{\"h\":\"3. JDBC介绍\",\"t\":[\"JDBC(Java Database Connectivity)是一个独立于特定数据库管理系统、通用的SQL数据库存取和操作的公共接口（一组API），定义了用来访问数据库的标准Java类库，（java.sql,javax.sql）使用这些类库可以以一种标准的方法、方便地访问数据库资源。\",\"JDBC为访问不同的数据库提供了一种统一的途径，为开发者屏蔽了一些细节问题。\",\"JDBC的目标是使Java程序员使用JDBC可以连接任何提供了JDBC驱动程序（也就是接口的实现类）的数据库系统，这样就使得程序员无需对特定的数据库系统的特点有过多的了解，从而大大简化和加快了开发过程。\"]},\"2528\":{\"h\":\"3.1 没有JDBC，Java程序访问数据库时是这样的：\",\"t\":[\"1-1-2\"]},\"2529\":{\"h\":\"3.2 有了JDBC，Java程序访问数据库时是这样的：\",\"t\":[\"1-1-3\"]},\"2530\":{\"h\":\"3.3 总结\",\"t\":[\"一般选择使用JDBC来连接数据库，而不是直接操作数据库，这样Java程序的移植性更高，编写难度更低。\"]},\"2531\":{\"h\":\"4. JDBC体系结构\",\"t\":[\"JDBC接口（API）包括两个层次：\",\"面向应用的API：Java API，抽象接口，供应用程序开发人员使用（连接数据库，执行SQL语句，获得结果），java程序员只需要面向这套接口编程即可。\",\"面向数据库的API：Java Driver API，供开发商开发数据库驱动程序用。不同的数据库厂商，需要针对这套接口，提供不同实现。不同的实现的集合，即为不同数据库的驱动。\"]},\"2532\":{\"h\":\"5. JDBC程序编写步骤\",\"t\":[\"1-1-4\"]},\"2533\":{\"h\":\"1-2. 连接数据库\"},\"2534\":{\"h\":\"Ⅰ. 安装驱动\"},\"2535\":{\"h\":\"1. Driver：驱动介绍\",\"t\":[\"JDK中只有JDBC定义的一系列操作数据库的接口，并没有预装驱动，需要我们自己下载\",\"目前：以MySql驱动进行操作。\"]},\"2536\":{\"h\":\"2. 下载MySQL驱动\",\"t\":[\"选择：Platform Independent\",\"1-2-1\"]},\"2537\":{\"h\":\"3. 驱动文件介绍\",\"t\":[\"解压后的驱动文件，其中：\",\"src：MySQL的JDBC驱动源码（.java）\",\"mysql-connector-java-8.0.27.jar：jar包，MySql的JDBC驱动包\",\"1-2-2\"]},\"2538\":{\"h\":\"4. 安装并使用驱动\",\"t\":[\"①将jar包移动到项目目录下，如：Learn/JDBC/lib (JDBC模块的lib目录)\",\"②在idea中，右键jar包文件：add to Library，将jar包加载到扩展库\",\"③如图，选择jar包的等级和要加载到哪个模块就OK了。\",\"1-2-3\"]},\"2539\":{\"h\":\"5. 加载驱动源码\",\"t\":[\"加载的第三方jar包都是class文件，查看到的源码是经过反编译的，需要将真正的源码导入。 在查看mysql-connector-java-8.0.27.jar中的class文件时，会提示：\",\"1-2-4\",\"点击右边的Choose Source，选择之前解压的MySQL驱动目录，选择src目录作为源码来源。\",\"URL：获取要连接的数据库信息\"]},\"2540\":{\"h\":\"Ⅱ. 数据库连接要素\",\"t\":[\"连接数据库，必备条件有三个（前提先创建好了数据库）：\",\"Driver：数据库驱动，JDK只有接口，需要安装具体的实现类\",\"URL：即要连接的数据库地址\",\"用户名、密码：连接数据库的用户名密码\"]},\"2541\":{\"h\":\"1. Driver\",\"t\":[\"见：安装驱动。\"]},\"2542\":{\"h\":\"2. URL\",\"t\":[\"以MySQL为例：URL的格式为：jdbc:mysql://主机ip:mysql服务端端口号/数据库名称?其他k=v\",\"MySQL默认端口是3306（也可以自己指定），其他k=v是字符集，采用默认的就行\",\"\\\"jdbc:mysql://localhost:3306/test?\\\"; \"]},\"2543\":{\"h\":\"3. 用户名、密码\",\"t\":[\"user,password可以用 属性名=属性值 方式告诉数据库\"]},\"2544\":{\"h\":\"Ⅲ. 连接数据库\",\"t\":[\"有5种方法，以下5中方法是循序渐进的，用的时候直接用第五种即可。\"]},\"2545\":{\"h\":\"1. 方式1：使用MySQL驱动的API连接\",\"t\":[\"import java.sql.Connection; public void connectionDB1() throws SQLException { //1.初始化驱动：Driver接口实现类com.mysql.jdbc.Driver的对象 Driver driver = new com.mysql.cj.jdbc.Driver(); //2. 提供URL String url = \\\"jdbc:mysql://localhost:3306/test\\\"; //3.提供用户名和密码：使用Properties对象 Properties info = new Properties(); info.setProperty(\\\"user\\\",\\\"root\\\"); info.setProperty(\\\"password\\\",\\\"root\\\"); //4.调用driver的connect()，获取连接对象 //connect方法的第二个参数就是Properties类，因此必须以该类储存账号和密码信息 Connection conn = driver.connect(url, info); System.out.println(conn); } \",\"Properties类：Properties 继承于 Hashtable。表示一个持久的属性集.属性列表中每个键及其对应值都是一个字符串。\",\"弊端：出现了第三方API com.mysql.jdbc.Driver，失去了移植性。\"]},\"2546\":{\"h\":\"2. 方式2：使用反射，不体现第三方API\",\"t\":[\"方式1获取Driver实现类的时候使用了第三方API，失去了移植性。\",\"可以使用反射，来隐藏第三方api\",\"//1.使用反射初始化驱动 Class<?> driverClass = Class.forName(\\\"com.mysql.cj.jdbc.Driver\\\"); Object driver = driverClass.newInstance(); ...//后续的操作同方式1 \",\"说明：newInstance已经被jdk舍弃了。\"]},\"2547\":{\"h\":\"3. 方式3：使用DriverManager\",\"t\":[\"使用DriverManager类替换Driver\",\"public void testConnection3() throws Exception { //1.使用反射获取Driver实现类的对象 Class clazz = Class.forName(\\\"com.mysql.jdbc.Driver\\\"); Driver driver = (Driver) clazz.newInstance(); //2.提供另外三个连接的基本信息： String url = \\\"jdbc:mysql://localhost:3306/test\\\"; String user = \\\"root\\\"; String password = \\\"abc123\\\"; //3.注册驱动 DriverManager.registerDriver(driver); //4.获取连接 Connection conn = DriverManager.getConnection(url, user, password); System.out.println(conn); } \"]},\"2548\":{\"h\":\"4. 方式4：省略驱动的注册\",\"t\":[\"驱动会自动注册的，可以省略驱动的注册，只进行驱动的加载即可。\",\"public void testConnection3() throws Exception { //1.Driver的实现类不用获取了,因为驱动不用注册... // 2.提供三个连接的基本信息： String url = \\\"jdbc:mysql://localhost:3306/test\\\"; String user = \\\"root\\\"; String password = \\\"abc123\\\"; //3.驱动注册可以省略,会自动注册... //3.1 将1和3连在一起，只加载驱动即可 Class.ForName(\\\"com.mysql.jdbc.Driver\\\"); //4.获取连接 Connection conn = DriverManager.getConnection(url, user, password); System.out.println(conn); } \"]},\"2549\":{\"h\":\"5. 方式5：将连接方式写入配置文件让驱动加载【最终方案】\",\"t\":[\"使用配置文件的方式保存配置信息，在代码中加载配置文件。数据库连接的三个要素，都可以保存到配置文件中\"]},\"2550\":{\"h\":\"5.1 配置文件\",\"t\":[\"位置：配置文件声明在工程的src目录下\",\"文件名：jdbc.properties\",\"user=root password=root url=jdbc:mysql://localhost:3306/test driverClass=com.mysql.cj.jdbc.Driver \"]},\"2551\":{\"h\":\"5.2 代码\",\"t\":[\"public void connectionDB1() throws Exception { //1.加载配置文件：使用ClassLoader和Properties类 InputStream is = ConnectionTest.class.getClassLoader() .getResourceAsStream(\\\"jdbc.properties\\\"); Properties pros = new Properties(); pros.load(is); //2.读取配置信息 String user = pros.getProperty(\\\"user\\\"); String password = pros.getProperty(\\\"password\\\"); String url = pros.getProperty(\\\"url\\\"); String driverClass = pros.getProperty(\\\"driverClass\\\"); //3.加载驱动：使用Class类的forName方法根据全类名参数创建对象 Class.forName(driverClass); //4.获取连接 Connection conn = DriverManager.getConnection(url, user,password); System.out.println(conn); } \"]},\"2552\":{\"h\":\"5.3 使用配置文件的好处\",\"t\":[\"实现了代码和数据的分离，如果需要修改配置信息，直接在配置文件中修改，不需要深入代码\",\"如果修改了配置信息，省去重新编译的过程\"]},\"2553\":{\"h\":\"1-3. CURD\"},\"2554\":{\"h\":\"Ⅰ. 操作和访问数据库\"},\"2555\":{\"h\":\"1. 说明\",\"t\":[\"数据库连接被用于向数据库服务器发送命令和 SQL 语句，并接受数据库服务器返回的结果。其实一个数据库连接就是一个Socket连接。\"]},\"2556\":{\"h\":\"2. 对数据库的调用方式\",\"t\":[\"在 java.sql 包中有 3 个接口分别定义了对数据库的调用的不同方式：\",\"Statement：用于执行静态 SQL 语句并返回它所生成结果的对象。\",\"PrepatedStatement：SQL 语句被预编译并存储在此对象中，可以使用此对象多次高效地执行该语句。\",\"CallableStatement：用于执行 SQL 存储过程【框架中用的，暂不关注】\",\"1-3-1\"]},\"2557\":{\"h\":\"3. statement的弊端\"},\"2558\":{\"h\":\"3.1 问题一：存在拼串操作，繁琐\",\"t\":[\"String userName = ...; //获取用户名 String password = ...; //获取用户密码 //进行SQL语句的拼接：非常繁琐，且不易阅读 String sql = \\\"SELECT user,password FROM user_table WHERE USER = '\\\" + userName + \\\"' AND PASSWORD = '\\\" + password User user = get(sql, User.class); //执行SQL \"]},\"2559\":{\"h\":\"3.2 问题二：存在SQL注入问题\",\"t\":[\"SQL 注入是利用某些系统没有对用户输入的数据进行充分的检查，而在用户输入数据中注入非法的 SQL 语句段或命令从而利用系统的 SQL 引擎完成恶意行为的做法。\",\"如下：通过填写用户名：'1' or ' ，密码：=1 or '1' = '1 进行SQL注入\",\"SELECT user,password FROM user_table WHERE USER = '1' or ' AND PASSWORD = '='1' or '1' = '1'; \"]},\"2560\":{\"h\":\"4. 开发中访问数据库的方式选择\",\"t\":[\"PreptredStatement是Statemet你的子接口，更安全和高效，开发中选择它。\",\"1-3-2\"]},\"2561\":{\"h\":\"5. PreparedStatement的优点\",\"t\":[\"解决了Statement的拼串问题\",\"解决了SQL注入问题\",\"可以操作Blob数据\",\"可以实现高效的批量操作（只需要预编译的时候校验一次SQL语句）\"]},\"2562\":{\"h\":\"6. Java与SQL对应数据类型转换表\",\"t\":[\"Java类型\",\"SQL类型\",\"boolean\",\"BIT\",\"byte\",\"TINYINT\",\"short\",\"SMALLINT\",\"int\",\"INTEGER\",\"long\",\"BIGINT\",\"String\",\"CHAR,VARCHAR,LONGVARCHAR\",\"byte array\",\"BINARY , VAR BINARY\",\"java.sql.Date\",\"DATE\",\"java.sql.Time\",\"TIME\",\"java.sql.Timestamp\",\"TIMESTAMP\"]},\"2563\":{\"h\":\"Ⅱ. PreparedStatement\"},\"2564\":{\"h\":\"1. 简介\",\"t\":[\"可以通过调用 Connection 对象的 preparedStatement(String sql)方法获取 PreparedStatement 对象\"]},\"2565\":{\"h\":\"2. PreparedStatement 与 Statement\",\"t\":[\"PreparedStatement 接口是 Statement 的子接口，它表示一条预编译过的 SQL 语句\"]},\"2566\":{\"h\":\"3. PreparedStatement的操作步骤\",\"t\":[\"获取数据库连接对象 \",\"①读取配置文件中的数据库连接信息\",\"②加载驱动\",\"③获取链接\",\"编写SQL语句 \",\"④拼接预编译SQL字符串，带占位符“？”，并返回PrepareStatemet对象\",\"⑤填充占位符\",\"⑥执行操作 \",\"execute：DML操作\",\"executeQuery：DQL操作\",\"⑦关闭资源： \",\"close：关闭PreparedStatement资源\",\"close：关闭连接资源\"]},\"2567\":{\"h\":\"4. 创建PreparedStatement对象\",\"t\":[\"可以通过调用 Connection 对象的 preparedStatement(String sql)方法获取 PreparedStatement 对象\",\"获取Connection对象->预编译sql字符串->调用 preparedStatement(String sql) = PreparedStatement对象\",\"PrepareStatement Connection.prepareStatement(String sql); ====================================================== ...//读取配置文件中的数据库连接信息，加载驱动 //1.获取Connection对象：数据库连接对象 Connection conn = DriverManager.getConnection(url, user, password); //2.编写预编译sql字符串 String sql = \\\"insert into customers(name,email,birth)values(?,?,?)\\\"; //3.Connection对象调用preparedStatement方法执行预编译SQL获取PreparedStatemet对象 PreparedStatement ps = conn.prepareStatement(sql); \"]},\"2568\":{\"h\":\"5. 预编译SQL语句与占位符\"},\"2569\":{\"h\":\"5.1 预编译SQL语句\",\"t\":[\"PreparedStatement 对象所代表的 SQL 语句中的参数用问号(?)来表示\",\"setXxx（Xxx是数据类型）：PreparedStatement 对象的 setXxx() 方法来设置这些参数. setXxx() 方法有两个参数，第一个参数是要设置的 SQL 语句中的参数的索引(从 1 开始)，第二个是设置的 SQL 语句中的参数的值。\",\"//1.预编译字符串示例 String sql = \\\"insert into customers(name,age,birth)values(?,?,?)\\\"; //2.获取PreparedStatement对象 PreparedStatement ps = conn.prepareStatement(sql); \"]},\"2570\":{\"h\":\"5.2 填充占位符\",\"t\":[\"setXxx（Xxx是数据类型）：PreparedStatement 对象的 setXxx() 方法来设置这些参数. setXxx() 方法有两个参数，第一个参数是要设置的 SQL 语句中的参数的索引(从 1 开始)，第二个是设置的 SQL 语句中的参数的值。\",\"该方法会抛出：java.sql.SQLException异常\",\"void PreparedStatement.setXxx(int paramenterIndex,Xxx x); ====================================== //调用 setXxx方法填充上述占位符 ps.setString(1,\\\"Jinno\\\"); ps.setInt(2,20); SimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy-MM-dd\\\"); java.util.Date date = sdf.parse(\\\"1000-01-01\\\"); ps.setDate(3,new(date.getTime()));//要填SQL中的Date对象 \"]},\"2571\":{\"h\":\"6. execute：执行DML操作\",\"t\":[\"执行PreparedStatement对象包含的所有任意SQL语句。\",\"该操作会抛出：SQLException异常\",\"boolean PreparedStatement.execute(); \",\"指针 \",\"execute是可以执行多条预编译SQL语句的，返回值返回的是第一条语句的处理结果。\",\"需要调用方法 getResultSet 或 getUpdateCount 来检索结果，调用 getMoreResults 才能移动到任何后续结果\",\"返回值 \",\"如果第一个结果是 ResultSet 对象，则返回 true；\",\"如果第一个结果是更新计数或没有结果，则返回 false\"]},\"2572\":{\"h\":\"Ⅲ. DML\",\"t\":[\"PreparedStatement的DML操作\"]},\"2573\":{\"h\":\"1. 添加：代码示例\",\"t\":[\"public void testInsert() { Connection conn = null; PreparedStatement ps = null; try { // 1.读取配置文件中的4个基本信息 InputStream is = ClassLoader.getSystemClassLoader() .getResourceAsStream(\\\"jdbc.properties\\\"); Properties pros = new Properties(); pros.load(is); String user = pros.getProperty(\\\"user\\\"); String password = pros.getProperty(\\\"password\\\"); String url = pros.getProperty(\\\"url\\\"); String driverClass = pros.getProperty(\\\"driverClass\\\"); // 2.加载驱动 Class.forName(driverClass); // 3.获取连接 conn = DriverManager.getConnection(url, user, password); //4.预编译sql语句，返回PreparedStatement的实例 String sql = \\\"insert into customers(name,email,birth)values(?,?,?)\\\"; ps = conn.prepareStatement(sql); //5.填充占位符 ps.setString(1, \\\"哪吒\\\"); ps.setString(2, \\\"nezha@gmail.com\\\"); SimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy-MM-dd\\\"); java.util.Date date = sdf.parse(\\\"1000-01-01\\\"); ps.setDate(3, new Date(date.getTime())); //6.执行操作 ps.execute(); } catch (Exception e) { e.printStackTrace(); }finally{ //7.资源的关闭 try { if(ps != null) ps.close(); } catch (SQLException e) { e.printStackTrace(); } try { if(conn != null) conn.close(); } catch (SQLException e) { e.printStackTrace(); } } } \"]},\"2574\":{\"h\":\"2. 封装数据库连接的获取和资源的关闭\",\"t\":[\"文件：src/util/JDBCUtils.java\",\"类：JDBCUtils\"]},\"2575\":{\"h\":\"2.1 获取数据库连接\",\"t\":[\"public static Connection getConnection() throws Exception { // 1.读取配置文件中的4个基本信息 InputStream is = ClassLoader.getSystemClassLoader() .getResourceAsStream(\\\"jdbc.properties\\\"); Properties pros = new Properties(); pros.load(is); String user = pros.getProperty(\\\"user\\\"); String password = pros.getProperty(\\\"password\\\"); String url = pros.getProperty(\\\"url\\\"); String driverClass = pros.getProperty(\\\"driverClass\\\"); // 2.加载驱动 Class.forName(driverClass); // 3.获取连接 Connection conn = DriverManager.getConnection(url, user, password); return conn; } \"]},\"2576\":{\"h\":\"2.2 关闭连接和Statement的操作\",\"t\":[\"PropertyStatement是Statement的子类。\",\"public static void closeResource(Connection conn,Statement ps){ try { if(ps != null) ps.close(); } catch (SQLException e) { e.printStackTrace(); } try { if(conn != null) conn.close(); } catch (SQLException e) { e.printStackTrace(); } } \"]},\"2577\":{\"h\":\"3. 使用封装好的工具：更新操作示例\",\"t\":[\"public void testUpdate(){ Connection conn = null; PreparedStatement ps = null; try { //1.获取数据库的连接 conn = JDBCUtils.getConnection(); //2.预编译sql语句，返回PreparedStatement的实例 String sql = \\\"update customers set name = ? where id = ?\\\"; ps = conn.prepareStatement(sql); //3.填充占位符 ps.setObject(1,\\\"莫扎特\\\"); ps.setObject(2, 18); //4.执行 ps.execute(); } catch (Exception e) { e.printStackTrace(); }finally{ //5.资源的关闭 JDBCUtils.closeResource(conn, ps); } } \"]},\"2578\":{\"h\":\"4. 封装通用的增删改操作\",\"t\":[\"对于DML来说，除了SQL语句外，其他的步骤都是相通的。\"]},\"2579\":{\"h\":\"4.1 功能设计\",\"t\":[\"DML操作的变量是SQL预编译语句，和给占位符赋的值，因此我们可以将SQL预编译语句和占位符作为形参，让用户传输，然后将所有操作封装。\"]},\"2580\":{\"h\":\"4.2 参数设计\",\"t\":[\"SQL的预编译语句，作为方法的第一个参数。SQL的占位符数量和类型都是不确定的，因此可以设计成Object类型的 可变形参。\",\"使用的时候注意：sql中占位符的个数与可变形参的长度应该相同！\"]},\"2581\":{\"h\":\"4.3 源码\",\"t\":[\"public void update(String sql,Object ...args){ Connection conn = null; PreparedStatement ps = null; try { //1.获取数据库的连接 conn = JDBCUtils.getConnection(); //2.预编译sql语句，返回PreparedStatement的实例 ps = conn.prepareStatement(sql); //3.填充占位符 for(int i = 0;i < args.length;i++){ ps.setObject(i + 1, args[i]);//小心参数声明错误！！ } //4.执行 ps.execute(); } catch (Exception e) { e.printStackTrace(); }finally{ //5.资源的关闭 JDBCUtils.closeResource(conn, ps); } } \"]},\"2582\":{\"h\":\"4.4 使用示例\",\"t\":[\"//1.示例1：删除某表中的1个数据 String sql = \\\"delete from customers where id = ?\\\"; update(sql,3) //2.示例2：更新某表中的一个数据 String sql = \\\"update `order` set order_name = ? where order_id = ?\\\"; update(sql,\\\"DD\\\",\\\"2\\\"); \"]},\"2583\":{\"h\":\"Ⅳ. DQL\",\"t\":[\"PreparedStatement的DQL操作。\"]},\"2584\":{\"h\":\"1. DQL的操作步骤\",\"t\":[\"基本步骤与DML一致，只是DQL执行查询的方法是executeQuery()，而不是execute()。\",\"查询操作比较复杂一点，需要对查询的结果进行处理。\"]},\"2585\":{\"h\":\"2. ResultSet对象\"},\"2586\":{\"h\":\"2.1 获取\",\"t\":[\"调用PreparedStatement 的 executeQuery() 方法，查询结果是一个ResultSet 对象\",\"ResultSet PreparedStatement.executeQuery(); \"]},\"2587\":{\"h\":\"2.2 ResultSet介绍\",\"t\":[\"ResultSet 对象以逻辑表格的形式封装了执行数据库操作的结果集。ResultSet 返回的实际上就是一张数据表。\"]},\"2588\":{\"h\":\"2.3 指针\",\"t\":[\"ResultSet 对象维护了一个指向当前数据行的指针，指针指向数据表的第一条记录的前面。可以通过 ResultSet 对象的 next() 方法移动到下一行。调用 next()方法检测下一行是否有效。若有效，该方法返回 true，且指针下移，并返回该行的数据。\",\"当指针指向一行时, 可以通过调用 getXxx(int index) 或 getXxx(int columnName) 获取每一列的值。\"]},\"2589\":{\"h\":\"3. ResultSet接口的方法\"},\"2590\":{\"h\":\"3.1 next：移动指针\",\"t\":[\"判断下一行有没有数据，没有就返回false，有就移动指针到下一行。\",\"boolean ResultSet.next() \"]},\"2591\":{\"h\":\"3.2 getXxx：获取指针所在行的数据\",\"t\":[\"参数：列的label或索引 \",\"列的label，列名，推荐这种，更灵活安全，意义明显。\",\"列的索引，Java与数据库交互涉及到的相关API中的索引都从1开始。\",\"返回值：返回该列的值\",\"数据类型：Xxx代表数据类型，用来获取不同类型的值\",\"Xxx ResultSet.getXxx(int index); \"]},\"2592\":{\"h\":\"4. ResultSetMetaDate对象\",\"t\":[\"用于获取关于 ResultSet 对象中列的类型和属性信息的对象，也就是用于获取结果集的源数据。\",\"ResultSetMetaDate ResultSet.getMetaData(); \"]},\"2593\":{\"h\":\"5. ResultSetMetaDate对象的常用方法\",\"t\":[\"getColumnName(int column)：获取指定列的名称\",\"getColumnLabel(int column)：获取指定列的别名\",\"getColumnCount()：返回当前 ResultSet 对象中的列数。\",\"getColumnTypeName(int column)：检索指定列的数据库特定的类型名称。\",\"getColumnDisplaySize(int column)：指示指定列的最大标准宽度，以字符为单位。\",\"isNullable(int column)：指示指定列中的值是否可以为 null。\",\"isAutoIncrement(int column)：指示是否自动为指定列进行编号，这样这些列仍然是只读的。\"]},\"2594\":{\"h\":\"6. ORM编程思想：object relational mapping\",\"t\":[\"一个数据表对应一个java类，表中的一条记录对应java类的一个对象，表中的一个字段对应java类的一个属性。\"]},\"2595\":{\"h\":\"7. 图解查询操作的流程\",\"t\":[\"1-3-3\",\"1-3-4\"]},\"2596\":{\"h\":\"Ⅴ. 查询示例\",\"t\":[\"PreparedStatement的DQL查询示例。\"]},\"2597\":{\"h\":\"1. 基本查询示例：查询custom表中的数据\",\"t\":[\"这里用到了上章定义的JDBCUtils，并使用了ORM对象来处理查询的数据\",\"public void testQuery1() { Connection conn = null; PreparedStatement ps = null; ResultSet resultSet = null; try { //1.获取连接对象 conn = JDBCUtils.getConnection(); //2.获取PreparedStatement对象并给占位符赋值 String sql = \\\"select id,name,email,birth from customers where id = ?\\\"; ps = conn.prepareStatement(sql); ps.setObject(1, 1); //3.执行查询,并返回结果集 resultSet = ps.executeQuery(); //4.处理结果集 if(resultSet.next()){ //4.1 获取当前这条数据的各个字段值 int id = resultSet.getInt(1); String name = resultSet.getString(2); String email = resultSet.getString(3); Date birth = resultSet.getDate(4); //4.2将数据封装为一个对象（推荐） Customer customer = new Customer(id, name, email, birth); System.out.println(customer); } } catch (Exception e) { e.printStackTrace(); }finally{ //5. 关闭资源 JDBCUtils.closeResource(conn, ps, resultSet); } } \"]},\"2598\":{\"h\":\"1.1 JDBCUtils更新\",\"t\":[\"上章封装的JDBCUtils工具中的关闭资源方法，只关闭了两个资源，而DQL操作需要额外关闭一个resultSet资源\"]},\"2599\":{\"h\":\"1.2 Custom对象\",\"t\":[\"根据ORM编程思想，需要创建一个Customer类（与数据表同名）来储存查询到的数据。\",\"public class Customer{ private int id; private String name; private String email; private Date birth; public Customer() { super(); } public Customer(int id, String name, String email, Date birth) { super(); this.id = id; this.name = name; this.email = email; this.birth = birth; } ... } \"]},\"2600\":{\"h\":\"2. 封装：针对custom表的通用查询操作\",\"t\":[\"该操作仅支持Custom表，且只能查询一行数据\",\"public Customer queryForCustomers(String sql,Object...args){ Connection conn = null; PreparedStatement ps = null; ResultSet rs = null; try { //1.获取连接对象 conn = JDBCUtils.getConnection(); //2.获取PreparedStatement对象,并给占位符赋值 ps = conn.prepareStatement(sql); for(int i = 0;i < args.length;i++){ ps.setObject(i + 1, args[i]); } //3.执行查询,并返回结果集 rs = ps.executeQuery(); //3.1 获取结果集的元数据 :ResultSetMetaData ResultSetMetaData rsmd = rs.getMetaData(); //3.2 通过ResultSetMetaData获取结果集中的列数 int columnCount = rsmd.getColumnCount(); //4.循环获取结果集中每列的数据 if(rs.next()){ Customer cust = new Customer(); //4.1 处理结果集一行数据中的每一个列 for(int i = 0;i <columnCount;i++){ //4.2 获取列值 Object columValue = rs.getObject(i + 1); //4.3 获取每个列的列名 String columnLabel = rsmd.getColumnLabel(i + 1); //4.4 给cust对象指定的columnName属性，赋值为columValue：通过反射 Field field = Customer.class.getDeclaredField(columnLabel); field.setAccessible(true); field.set(cust, columValue); } //5. 返回结果集 return cust; } } catch (Exception e) { e.printStackTrace(); }finally{ //6.关闭资源 JDBCUtils.closeResource(conn, ps, rs); } return null; } \"]},\"2601\":{\"h\":\"2.1 使用示例\",\"t\":[\"String sql = \\\"select id,name,birth,email from customers where id = ?\\\"; Customer customer = queryForCustomers(sql, 13); System.out.println(customer); sql = \\\"select name,email from customers where name = ?\\\"; Customer customer1 = queryForCustomers(sql,\\\"周杰伦\\\"); System.out.println(customer1); \"]},\"2602\":{\"h\":\"2.2 列的别名\",\"t\":[\"问题：数据表中，列的名字和储存数据的对象中属性的名字是一一对应的，但是未必完全一样，比如：数据库中是用下划线分隔单词的，而Java中是驼峰分隔单词的。这时使用列名作为类的属性名就会报错（找不到该属性）。\",\"解决方案：SQL语句中给列起别名，别名 = 数据类的属性名，然后把获取列名的方法改成获取列的别名的方法。 getColumnLabel代替 getColumnName.\",\"补充：当列没有别名时，就默认把列名当成别名，所以不用担心没有起别名。\"]},\"2603\":{\"h\":\"3. 通用查询操作封装：针对不同表\",\"t\":[\"针对于不同的表的通用的查询操作，可返回表中的多条记录\",\"public <T> List<T> getInstance(Class<T> clazz, String sql, Object... args) { Connection conn = null; PreparedStatement ps = null; ResultSet rs = null; try { //1.获取连接对象 conn = JDBCUtils.getConnection(); //2.获取PreparedStatement对象,并给占位符赋值 ps = conn.prepareStatement(sql); for (int i = 0; i < args.length; i++) { ps.setObject(i + 1, args[i]); } //3.执行查询,并返回结果集 rs = ps.executeQuery(); //3.1获取结果集的元数据 :ResultSetMetaData ResultSetMetaData rsmd = rs.getMetaData(); //3.2通过ResultSetMetaData获取结果集中的列数 int columnCount = rsmd.getColumnCount(); //4.创建集合对象，用来放结果集 ArrayList<T> list = new ArrayList<T>(); //5.循环获取每一行数据 while(rs.next()) { T t = clazz.newInstance(); //通过反射创建存放数据的对象 //6. 处理结果集一行数据中的每一个列:给t对象指定的属性赋值 for (int i = 0; i < columnCount; i++) { //6.1 获取列值 Object columValue = rs.getObject(i + 1); //6.2 获取每个列的列名 String columnLabel = rsmd.getColumnLabel(i + 1); //6.3 给t对象指定的columnName属性，赋值为columValue：通过反射 Field field = clazz.getDeclaredField(columnLabel); field.setAccessible(true); field.set(t, columValue); } //6.4 将循环拿到的每行数据对象，放到集合中 list.add(t); } //7. 返回结果集 return list; } catch (Exception e) { e.printStackTrace(); } finally { //6.关闭资源 JDBCUtils.closeResource(conn, ps, rs); } return null; } \"]},\"2604\":{\"h\":\"3.1 使用示例\",\"t\":[\"String sql = \\\"select id,name,email from customers where id < ?\\\"; List<Customer> list = getForList(Customer.class,sql,12); list.forEach(System.out::println); \"]},\"2605\":{\"h\":\"3.2 查询不同的表： Class<T> 参数与返回值 List<T>\",\"t\":[\"为所有的表都创建一个ORM类，调用方法的时候，将类名.class传递进去，如上。\",\"在方法内通过newInstance()创建数据对象。返回值的类型就是ORM类，也写成泛型的样式。\"]},\"2606\":{\"h\":\"3.3 返回多条数据\",\"t\":[\"利用集合和吧next放入循环来获取多条数据。\",\"如果要创建只需要一行数据的方法，把while循环改成if判断，取消集合就可以了。\"]},\"2607\":{\"h\":\"1-4. 操作Blob\",\"t\":[\"使用PreparedStatement操作Blob数据，Blob数据，就是二进制数据，比如一张图片。\"]},\"2608\":{\"h\":\"1. MySQL Blob类型\",\"t\":[\"MySQL中，BLOB是一个二进制大型对象，是一个可以存储大量数据的容器，它能容纳不同大小的数据。\",\"插入BLOB类型的数据必须使用PreparedStatement，因为BLOB类型的数据无法使用字符串拼接写的。\",\"MySQL的四种BLOB类型(除了在存储的最大信息量上不同外，他们是等同的) \",\"TinyBlob：255Byte\",\"Blob：65KB【常用】\",\"MediumBlob：16M\",\"LongBlob：4G\",\"注意：如果存储的文件过大，数据库的性能会下降。实际使用中根据需要存入的数据大小定义不同的BLOB类型。\"]},\"2609\":{\"h\":\"2. 应用场景\",\"t\":[\"常用来储存缩略图，使用<=65KB的Blob类型。\"]},\"2610\":{\"h\":\"3. debug：文件大小的限制\",\"t\":[\"MySQL配置文件中，会对数据的大小进行限制，默认是1M。\",\"如果上传报错：xxx too large，就修改配置文件，\",\"[mysqld] max_allowed_packet=16M \"]},\"2611\":{\"h\":\"4. 相关方法\",\"t\":[\"setBlob：插入Blob类型\",\"getBlob：获取Blob类型的数据\"]},\"2612\":{\"h\":\"5. 示例：向数据表插入Blob类型\",\"t\":[\"public void testInsert() throws Exception{ //1.使用封装好的JDBCUtiles获取连接对象 Connection conn = JDBCUtils.getConnection(); //2.设置SQL，获取PreparedStatement对象并给占位符赋值 String sql = \\\"insert into customers(name,email,birth,photo)values(?,?,?,?)\\\"; PreparedStatement ps = conn.prepareStatement(sql); ps.setObject(1,\\\"袁浩\\\"); ps.setObject(2, \\\"yuan@qq.com\\\"); ps.setObject(3,\\\"1992-09-08\\\"); //2.1 创建文件输入流 FileInputStream is = new FileInputStream(new File(\\\"girl.jpg\\\")); //2.2 调用setBlob方法,将文件输入流作为Blob类型插入数据表 ps.setBlob(4, is); //3.执行插入 ps.execute(); //4.关闭资源(数据库连接资源和文件流资源) JDBCUtils.closeResource(conn, ps); } \",\"修改Blob类型的字段：和添加的步骤一样，只是SQL语句变成了Updata\",\"删除Blob类型的字段：和删除普通字段的操作一样。\"]},\"2613\":{\"h\":\"6. 示例：从数据表中读取Blob类型字段\",\"t\":[\"以下代码省去了try...catch\",\"public void testQuery(){ //1.使用封装好的JDBCUtiles获取连接对象 Connection conn = JDBCUtils.getConnection(); //2.设置SQL,获取PreparedStatement对象并给占位符赋值 String sql = \\\"select id,name,email,birth,photo from customers where id = ?\\\"; PreparedStatement ps = conn.prepareStatement(sql); ps.setInt(1, 21); //3.执行查询,并返回结果集 ResultSet rs = ps.executeQuery(); //4.处理结果集 if(rs.next()){ int id = rs.getInt(\\\"id\\\"); String name = rs.getString(\\\"name\\\"); String email = rs.getString(\\\"email\\\"); Date birth = rs.getDate(\\\"birth\\\"); Customer cust = new Customer(id, name, email, birth); System.out.println(cust); //4.1 将Blob类型的字段下载下来，以文件的方式保存在本地 Blob photo = rs.getBlob(\\\"photo\\\"); InputStream is = photo.getBinaryStream(); FileOutputStream fos = new FileOutputStream(\\\"zhangyuhao.jpg\\\"); byte[] buffer = new byte[1024]; int len; while((len = is.read(buffer)) != -1){ fos.write(buffer, 0, len); } } //5. 关闭资源 is.close(); JDBCUtils.closeResource(conn, ps, rs); } \"]},\"2614\":{\"h\":\"1-5. 批量操作\",\"t\":[\"update、delete、select天然就可以批量操作。这里主要指的批量操作是：批量insert（批量插入）。\",\"当需要成批插入或者更新记录时，可以采用Java的批量更新机制，这一机制允许多条语句一次性提交给数据库批量处理。通常情况下比单独提交处理更有效率。\"]},\"2615\":{\"h\":\"1. JDBC的批量处理相关的方法\"},\"2616\":{\"h\":\"1.1 addBatch(String)：积攒SQL语句\",\"t\":[\"添加需要批量处理的SQL语句或是参数；\",\"PreparedStatement.addBath(); \"]},\"2617\":{\"h\":\"1.2 executeBatch()：执行batch\",\"t\":[\"执行批量处理语句；\",\"PreparedStatement.addBath(); \"]},\"2618\":{\"h\":\"1.3 clearBatch():清空batch\",\"t\":[\"清空缓存的数据\",\"PreparedStatement.addBath(); \"]},\"2619\":{\"h\":\"2. 测试数据表\",\"t\":[\"向数据表中插入1百万条数据，数据表结构如下：\",\"CREATE TABLE goods( id INT PRIMARY KEY AUTO_INCREMENT, NAME VARCHAR(20) ); \"]},\"2620\":{\"h\":\"3. 方式1：使用Statement\",\"t\":[\"【消耗400s】\",\"不推荐，每循环一次，就要创建一次SQL\",\"Connection conn = JDBCUtils.getConnection(); Statement st = conn.createStatement(); for(int i = 1;i <= 20000;i++){ String sql = \\\"insert into goods(name) values('name_' + \\\"+ i +\\\")\\\"; st.executeUpdate(sql); } \"]},\"2621\":{\"h\":\"4. 方式2：使用PreparedStatement\",\"t\":[\"【消耗：42s】\",\"使用PreparedStatement，将SQL在循环外面创建。每次循环只是重新为占位符赋值。\",\"Connection conn = JDBCUtils.getConnection(); String sql = \\\"insert into goods(name)values(?)\\\"; PreparedStatement ps = conn.prepareStatement(sql); for(int i = 1;i <= 20000;i++){ ps.setString(1, \\\"name_\\\" + i); ps.executeUpdate(); } long end = System.currentTimeMillis(); System.out.println(\\\"花费的时间为：\\\" + (end - start));//82340 JDBCUtils.closeResource(conn, ps); \"]},\"2622\":{\"h\":\"5. 方式3：使用批处理\",\"t\":[\"【消耗：16s】\",\"方式2，每循环一次，就要executeUpdate一次，跟服务器的交互太频繁。 可以使用批处理的方式，积攒一波SQL然后集中的去连接服务器执行。\"]},\"2623\":{\"h\":\"5.1 开启批处理\",\"t\":[\"首先需要注意：MySQL的驱动要>=5.1.37才支持批处理\",\"其次：mysql服务器默认是关闭批处理的，我们需要通过一个参数，让mysql开启批处理的支持。 ?rewriteBatchedStatements=true 写在配置文件的url后面\"]},\"2624\":{\"h\":\"5.2 code\",\"t\":[\"public void testInsert1() throws Exception{ Connection conn = JDBCUtils.getConnection(); String sql = \\\"insert into goods(name)values(?)\\\"; PreparedStatement ps = conn.prepareStatement(sql); for(int i = 1;i <= 1000000;i++){ ps.setString(1, \\\"name_\\\" + i); //1.“攒”sql ps.addBatch(); if(i % 500 == 0){ //2.执行 ps.executeBatch(); //3.清空 ps.clearBatch(); } } long end = System.currentTimeMillis(); System.out.println(\\\"花费的时间为：\\\" + (end - start)); JDBCUtils.closeResource(conn, ps); } \"]},\"2625\":{\"h\":\"6. 终极方案：批处理+手动提交\",\"t\":[\"【消耗5s】\",\"每执行一次executeBatch，数据库就会自动提交，每提交一次，就要将输入写入数据库一次，比较花时间，可以开启事务，阻止自动提交，等循环执行完所有数据都通过executeBatch传完以后，再统一提交。\",\"以下代码，省略了Exception处理。\",\"public void testInsert3() { Connection conn = JDBCUtils.getConnection(); //设置不允许自动提交数据 conn.setAutoCommit(false); String sql = \\\"insert into goods(name)values(?)\\\"; PreparedStatement ps = conn.prepareStatement(sql); for(int i = 1;i <= 1000000;i++){ ps.setObject(1, \\\"name_\\\" + i); //1.\\\"攒\\\"sql ps.addBatch(); if(i % 500 == 0){ //2.执行batch ps.executeBatch(); //3.清空batch ps.clearBatch(); } } //手动提交数据 conn.commit(); JDBCUtils.closeResource(conn, ps); } \"]},\"2626\":{\"h\":\"1-6. 事务\",\"t\":[\"提示\",\"详见：MySQL事务\"]},\"2627\":{\"h\":\"1. JDBC事务处理方法\",\"t\":[\"以下三个方法都会抛出SQLException异常\"]},\"2628\":{\"h\":\"1.1 setAutoCommit：设置事务的自动提交\",\"t\":[\"参数false表示关闭自动提交，true表示开启（默认）。\",\"Connection.setAutoCommit(boolean autoCommit) \"]},\"2629\":{\"h\":\"1.2 commit：提交事务\",\"t\":[\"Connection.commit() \"]},\"2630\":{\"h\":\"1.3 rollback：回滚事务\",\"t\":[\"Connection.rollback() \"]},\"2631\":{\"h\":\"2. JDBC事务的处理流程\",\"t\":[\"数据一旦提交，就无法回滚了，因此应该将数据库连接，放到数据库更新方法的调用处，进行开启和关闭，而不应该放到数据库连接内部。\",\"同时如果每个操作使用的是自己单独的连接，则无法保证事务，即同一个事务的多个操作必须在同一个连接下，因此数据库的连接和关闭必须放到数据库的操作方法调用处。\"]},\"2632\":{\"h\":\"连接池\",\"t\":[\"当启用了连接池后，关闭连接时，并不是真正的关闭了链接，而是将数据库连接对象放到了联机池中，如果对该数据库连接对象设置了关闭自动提交，就必须在关闭连接前，将设置改回去，以便别的操作使用该数据库连接对象。\"]},\"2633\":{\"h\":\"3. JDBC事务示例\"},\"2634\":{\"h\":\"3.1 添加事务后：更改数据库通用的增删改方法\",\"t\":[\"public void updata(Connection conn,String sql,Object.. args){ PreparedStatement ps = null; try { // 1.获取PreparedStatement的实例 (或：预编译sql语句) ps = conn.prepareStatement(sql); // 2.填充占位符 for (int i = 0; i < args.length; i++) { ps.setObject(i + 1, args[i]); } // 3.执行sql语句 ps.execute(); //该操作执行后并不会提交 } catch (Exception e) { e.printStackTrace(); } finally { // 4.关闭资源:第一个参数设置为null，不要关闭数据库连接 JDBCUtils.closeResource(null, ps); } } \"]},\"2635\":{\"h\":\"3.2 DML操作示例：使用事务\",\"t\":[\"public void testJDBCTransaction() { Connection conn = null; try { // 1.获取数据库连接 conn = JDBCUtils.getConnection(); // 2.开启事务 conn.setAutoCommit(false); // 3.进行数据库操作 String sql1 = \\\"update user_table set balance = balance - 100 where user = ?\\\"; update(conn, sql1, \\\"AA\\\"); // 模拟网络异常 //System.out.println(10 / 0); String sql2 = \\\"update user_table set balance = balance + 100 where user = ?\\\"; update(conn, sql2, \\\"BB\\\"); // 4.若没有异常，则提交事务 conn.commit(); } catch (Exception e) { e.printStackTrace(); // 5.若有异常，则回滚事务 try { conn.rollback(); } catch (SQLException e1) { e1.printStackTrace(); } } finally { try { //6.恢复每次DML操作的自动提交功能：用于连接池 conn.setAutoCommit(true); } catch (SQLException e) { e.printStackTrace(); } //7.关闭连接：将数据库连接关闭 JDBCUtils.closeResource(conn, null, null); } } \"]},\"2636\":{\"h\":\"3. JDBC控制隔离级别\",\"t\":[\"在JDBC中，即JAVA端，也能控制隔离级别，不过实际开发中，比如在框架中，都是通过配置文件进行控制的。\",\"以下两个方法都会抛出SQLException\"]},\"2637\":{\"h\":\"3.1 getTransactionIsolation：获取当前隔离级别\",\"t\":[\"Connection.getTransactionIsolation() \"]},\"2638\":{\"h\":\"3.2 setTransactionIsolation：设置数据库隔离级别\",\"t\":[\"参数是数字，也可以是隔离级别常量，对照如下：\",\"Connection.TRANSACTION_READ_UNCOMMITTED =1\",\"Connection.TRANSACTION_READ_COMMITTED = 2；\",\"Connection.TRANSACTION_REPEATABLE_READ = 3；\",\"Connection.TRANSACTION_SERIALIZABLE = 4；\",\"Connection.setTransactionIsolation(int level) \"]},\"2639\":{\"h\":\"4. JDBC控制隔离级别示例\",\"t\":[\"public void testTransactionSelect() throws Exception{ //1.获取连接对象 Connection conn = JDBCUtils.getConnection(); //2.获取当前连接的隔离级别 System.out.println(conn.getTransactionIsolation()); //3.设置数据库的隔离级别： conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED); //4.取消自动提交数据 conn.setAutoCommit(false); String sql = \\\"select user,password,balance from user_table where user = ?\\\"; //5.调用查询方法 User user = getInstance(conn, User.class, sql, \\\"CC\\\"); System.out.println(user); } \"]},\"2640\":{\"h\":\"1-7. DAO\"},\"2641\":{\"h\":\"Ⅰ. DAO介绍\"},\"2642\":{\"h\":\"1. 说明\",\"t\":[\"DAO：Data Access Object：访问数据信息的类和接口。\",\"本质：就是对JDBC中一些列基本常见的操作的封装。包括了对数据表的CRUD（Create、Retrival、Update、Delete）操作，有时也称作：BaseDAO。\",\"对于具体的数据表（和业务耦合）来说，要先创建相关的数据表操作类，然后继承DAO接口，重写DAO里面的方法，用来专门操作某张表。\"]},\"2643\":{\"h\":\"2. 作用\",\"t\":[\"为了实现功能的模块化，更有利于代码的维护和升级。\"]},\"2644\":{\"h\":\"3. DAO的使用流程\",\"t\":[\"①定义DAO接口：BaseDao，里面包含了所有JDBC的基本操作方法，可自己拿来用\",\"②定义数据表的接口，用来规范数据表的操作，如CustomerDao【可省略】\",\"③创建数据表的实现，用来继承BaseDao接口，并实现CustomerDao接口 额外还需要一个查询结果的储存类，和一个用来连接和关闭资源的JDBC工具类。\"]},\"2645\":{\"h\":\"Ⅱ. DAO的实现类\"},\"2646\":{\"h\":\"1. BaseDao设计\"},\"2647\":{\"h\":\"1.1 类\",\"t\":[\"设置为abstract类，只能继承和实现，不能实例化\"]},\"2648\":{\"h\":\"1.2 需要实现的基本数据表操作\",\"t\":[\"update：DML，通用的增删改操作【可使用事务】\",\"getInstance：用来返回一条记录的通用查询操作【可使用事务】\",\"getForList：用来返回数据表中多条记录构成的集合【可使用事务】\",\"getValue：用于特殊查询的通用方法【可使用事务】\"]},\"2649\":{\"h\":\"2. 需要实现的特殊操作\",\"t\":[\"在getForList和getValue方法中，我们需要将查询到的结果，放到一个ORM类中（该类同时也表名）。\"]},\"2650\":{\"h\":\"2.1 方案1：定义ORM类的属性\",\"t\":[\"在数据表的实现类中，定义当前类操作的ORM类名，作为属性，查询的时候传递该属性。\",\"这个方法过于繁琐，每个实现类中都要定义一次。\"]},\"2651\":{\"h\":\"2.2 方案2：通过泛型传递ORM类名\",\"t\":[\"在数据表实现类继承BaseDao时，直接指定BaseDao的泛型为ORM类名。\",\"然后在BaseDao类中，获取该泛型作为属性clazz的值。\",\"在需要使用ORM类的地方，直接使用clazz属性即可，省去了传递Class<T> clazz参数，具体获取方式见代码\"]},\"2652\":{\"h\":\"3. JDBC工具类：JDBCUtils\",\"t\":[\"用于操作数据库的工具类：JDBCUtils\",\"不要将这个类中的方法都放到BaseDao中。而是独作为一个额外的工具类，因为设计到事务操作，需要将数据库的链接和关闭操作再数据表实现类的调用处执行。\",\"该类实现的基本功能为：\",\"getConnection：获取数据库连接对象\",\"closeResource(Connection conn,Statement ps)：关闭数据库连接资源和Statement资源\",\"closeResource(Connection conn,Statement ps,ResultSet rs)：额外多关闭一个查询结果集资源\"]},\"2653\":{\"h\":\"4. BaseDao.java代码参考\",\"t\":[\"public abstract class BaseDAO<T> { //============================== 1、获取泛型值 ========================= private Class<T> clazz = null; { //获取当前BaseDAO的子类继承的父类中的泛型 Type genericSuperclass = this.getClass().getGenericSuperclass(); ParameterizedType paramType = (ParameterizedType) genericSuperclass; //获取了父类的泛型参数 Type[] typeArguments = paramType.getActualTypeArguments(); clazz = (Class<T>) typeArguments[0];//泛型的第一个参数 } //=========================== 2、update：DML方法 ====================== public int update(Connection conn, String sql, Object... args) { PreparedStatement ps = null; try { // 1.预编译sql语句，返回PreparedStatement的实例 ps = conn.prepareStatement(sql); // 2.填充占位符 for (int i = 0; i < args.length; i++) { ps.setObject(i + 1, args[i]);// 小心参数声明错误！！ } // 3.执行 return ps.executeUpdate(); } catch (Exception e) { e.printStackTrace(); } finally { // 4.资源的关闭 JDBCUtils.closeResource(null, ps); } return 0; } //============== 3、getInstance：返回一条记录的DQL方法 ================= public T getInstance(Connection conn, String sql, Object... args) { PreparedStatement ps = null; ResultSet rs = null; try { ps = conn.prepareStatement(sql); for (int i = 0; i < args.length; i++) { ps.setObject(i + 1, args[i]); } rs = ps.executeQuery(); // 获取结果集的元数据 :ResultSetMetaData ResultSetMetaData rsmd = rs.getMetaData(); // 通过ResultSetMetaData获取结果集中的列数 int columnCount = rsmd.getColumnCount(); if (rs.next()) { T t = clazz.newInstance(); // 处理结果集一行数据中的每一个列 for (int i = 0; i < columnCount; i++) { // 获取列值 Object columValue = rs.getObject(i + 1); // 获取每个列的列名 String columnLabel = rsmd.getColumnLabel(i + 1); // 给t对象指定的columnName属性，赋值为columValue：通过反射 Field field = clazz.getDeclaredField(columnLabel); field.setAccessible(true); field.set(t, columValue); } return t; } } catch (Exception e) { e.printStackTrace(); } finally { JDBCUtils.closeResource(null, ps, rs); } return null; } //============== 4、getForList：返回多条记录的DQL方法 ================= public List<T> getForList(Connection conn, String sql, Object... args) { PreparedStatement ps = null; ResultSet rs = null; try { ps = conn.prepareStatement(sql); for (int i = 0; i < args.length; i++) { ps.setObject(i + 1, args[i]); } rs = ps.executeQuery(); // 获取结果集的元数据 :ResultSetMetaData ResultSetMetaData rsmd = rs.getMetaData(); // 通过ResultSetMetaData获取结果集中的列数 int columnCount = rsmd.getColumnCount(); // 创建集合对象 ArrayList<T> list = new ArrayList<T>(); while (rs.next()) { T t = clazz.newInstance(); // 处理结果集一行数据中的每一个列:给t对象指定的属性赋值 for (int i = 0; i < columnCount; i++) { // 获取列值 Object columValue = rs.getObject(i + 1); // 获取每个列的列名 String columnLabel = rsmd.getColumnLabel(i + 1); // 给t对象指定的columnName属性，赋值为columValue：通过反射 Field field = clazz.getDeclaredField(columnLabel); field.setAccessible(true); field.set(t, columValue); } list.add(t); } return list; } catch (Exception e) { e.printStackTrace(); } finally { JDBCUtils.closeResource(null, ps, rs); } return null; } //============== 5、getValue：查询特殊值的DQL方法 ================= public <E> E getValue(Connection conn,String sql,Object...args){ PreparedStatement ps = null; ResultSet rs = null; try { ps = conn.prepareStatement(sql); for(int i = 0;i < args.length;i++){ ps.setObject(i + 1, args[i]); } rs = ps.executeQuery(); if(rs.next()){ return (E) rs.getObject(1); } } catch (SQLException e) { e.printStackTrace(); }finally{ JDBCUtils.closeResource(null, ps, rs); } return null; } } \"]},\"2654\":{\"h\":\"Ⅲ. BaseDao的使用\"},\"2655\":{\"h\":\"1. 创建数据表实现接口：CustomerDAO\",\"t\":[\"根据业务需求编写接口\",\"public interface CustomerDAO{ //1.插入数据,通过ORM类 Customer void insert(Connection conn,Customer cust); //2.针对指定的id，删除表中的一条记录 void deleteById(Connection conn,int id); //3.针对 ORM对象，去修改数据表中指定的记录 void update(Connection conn,Customer cust); //4.针对指定的id查询得到对应的Customer对象 Customer getCustomerById(Connection conn,int id); //5.查询表中的所有记录构成的集合 List<Customer> getAll(Connection conn); //6.返回数据表中的数据的条目数 Long getCount(Connection conn); //7.返回数据表中最大的生日 Date getMaxBirth(Connection conn); } \"]},\"2656\":{\"h\":\"2. 创建数据表实现类：CustomerDAOImpl\",\"t\":[\"public class CustomerDAOImpl extends BaseDAO<Customer> implements CustomerDAO{ //1.插入数据,通过ORM类 Customer public void insert(Connection conn, Customer cust) { String sql = \\\"insert into customers(name,email,birth)values(?,?,?)\\\"; update(conn, sql,cust.getName(),cust.getEmail(),cust.getBirth()); } //2.针对指定的id，删除表中的一条记录 public void deleteById(Connection conn, int id) { String sql = \\\"delete from customers where id = ?\\\"; update(conn, sql, id); } //3.针对 ORM对象，去修改数据表中指定的记录 public void update(Connection conn, Customer cust) { String sql = \\\"update customers set name = ?,email = ?,birth = ? where id = ?\\\"; update(conn, sql,cust.getName(),cust.getEmail(),cust.getBirth(),cust.getId()); } //4.针对指定的id查询得到对应的Customer对象 public Customer getCustomerById(Connection conn, int id) { String sql = \\\"select id,name,email,birth from customers where id = ?\\\"; Customer customer = getInstance(conn, sql,id); return customer; } //5.查询表中的所有记录构成的集合 public List<Customer> getAll(Connection conn) { String sql = \\\"select id,name,email,birth from customers\\\"; List<Customer> list = getForList(conn, sql); return list; } //6.返回数据表中的数据的条目数 public Long getCount(Connection conn) { String sql = \\\"select count(*) from customers\\\"; return getValue(conn, sql); } //7.返回数据表中最大的生日 public Date getMaxBirth(Connection conn) { String sql = \\\"select max(birth) from customers\\\"; return getValue(conn, sql); } } \"]},\"2657\":{\"h\":\"3. 使用CustomerDAOImpl\",\"t\":[\"可以创建一个CustomerDAOImplTest用来测试CustomerDAOImpl\",\"public class CustomerDAOImplTest { private CustomerDAOImpl dao = new CustomerDAOImpl(); //1.测试添加 public void testInsert() { Connection conn = null; try { conn = JDBCUtils.getConnection(); Customer cust = new Customer(1, \\\"于小飞\\\", \\\"xiaofei@126.com\\\",new Date(43534646435L)); dao.insert(conn, cust); System.out.println(\\\"添加成功\\\"); } catch (Exception e) { e.printStackTrace(); }finally{ JDBCUtils.closeResource(conn, null); } } //2.测试删除 public void testDeleteById() { Connection conn = null; try { conn = JDBCUtils.getConnection(); dao.deleteById(conn, 13); System.out.println(\\\"删除成功\\\"); } catch (Exception e) { e.printStackTrace(); }finally{ JDBCUtils.closeResource(conn, null); } } //3.测试更新 public void testUpdateConnectionCustomer() { Connection conn = null; try { conn = JDBCUtils.getConnection(); Customer cust = new Customer(18,\\\"贝多芬\\\",\\\"beiduofen@126.com\\\",new Date(453465656L)); dao.update(conn, cust); System.out.println(\\\"修改成功\\\"); } catch (Exception e) { e.printStackTrace(); }finally{ JDBCUtils.closeResource(conn, null); } } //4.测试单行数据查询 public void testGetCustomerById() { Connection conn = null; try { conn = JDBCUtils.getConnection(); Customer cust = dao.getCustomerById(conn, 19); System.out.println(cust); } catch (Exception e) { e.printStackTrace(); }finally{ JDBCUtils.closeResource(conn, null); } } //5.测试多行数据查询 public void testGetAll() { Connection conn = null; try { conn = JDBCUtils.getConnection(); List<Customer> list = dao.getAll(conn); list.forEach(System.out::println); System.out.println(\\\"\\\"); } catch (Exception e) { e.printStackTrace(); }finally{ JDBCUtils.closeResource(conn, null); } } //6.测试特殊查询：获取数据表的count public void testGetCount() { Connection conn = null; try { conn = JDBCUtils.getConnection(); Long count = dao.getCount(conn); System.out.println(\\\"表中的记录数为：\\\" + count); } catch (Exception e) { e.printStackTrace(); }finally{ JDBCUtils.closeResource(conn, null); } } //7.测试特殊查询：获取最大的生日 public void testGetMaxBirth() { Connection conn = null; try { conn = JDBCUtils.getConnection(); Date maxBirth = dao.getMaxBirth(conn); System.out.println(\\\"最大的生日为：\\\" + maxBirth); } catch (Exception e) { e.printStackTrace(); }finally{ JDBCUtils.closeResource(conn, null); } } } \"]},\"2658\":{\"h\":\"1-8. 数据库连接池\"},\"2659\":{\"h\":\"Ⅰ. 连接池介绍\"},\"2660\":{\"h\":\"1. JDBC数据连接池的必要性\"},\"2661\":{\"h\":\"1.1 在使用开发基于数据库的web程序时，传统的模式基本是按以下步骤：\",\"t\":[\"在主程序（如servlet、beans）中建立数据库连接\",\"进行sql操作\",\"断开数据库连接\"]},\"2662\":{\"h\":\"1.2 这种模式开发，存在的问题:\",\"t\":[\"普通的JDBC数据库连接使用 数据库驱动来获取，每次向数据库建立连接的时候都要将 Connection 加载到内存中，再验证用户名和密码(得花费0.05s～1s的时间)。需要数据库连接的时候，就向数据库要求一个，执行完成后再断开连接。 \",\"这样的方式将会消耗大量的资源和时间。\",\"数据库的连接资源并没有得到很好的重复利用。若同时有几百人甚至几千人在线，频繁的进行数据库连接操作将占用很多的系统资源，严重的甚至会造成服务器的崩溃。\",\"对于每一次数据库连接，使用完后都得断开。否则，如果程序出现异常而未能关闭，将会导致数据库系统中的内存泄漏（未关闭数据库连接，导致连接一直存在，最终将导致重启数据库。\",\"这种开发不能控制被创建的连接对象数，系统资源会被毫无顾及的分配出去，如连接过多，也可能导致内存泄漏，服务器崩溃。\"]},\"2663\":{\"h\":\"2. 数据库连接池技术介绍\",\"t\":[\"为解决传统开发中的数据库连接问题，可以采用数据库连接池技术。\"]},\"2664\":{\"h\":\"2.1 数据库连接池的基本思想\",\"t\":[\"就是为数据库连接建立一个“缓冲池”。预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从“缓冲池”中取出一个，使用完毕之后再放回去。\",\"数据库连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个。\"]},\"2665\":{\"h\":\"2.2 工作方式\",\"t\":[\"数据库连接池在初始化时将创建一定数量的数据库连接放到连接池中，这些数据库连接的数量是由最小数据库连接数来设定的。无论这些数据库连接是否被使用，连接池都将一直保证至少拥有这么多的连接数量。连接池的最大数据库连接数量限定了这个连接池能占有的最大连接数，当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列中。\",\"1-8-1\"]},\"2666\":{\"h\":\"3. 数据库连接池工作原理\",\"t\":[\"连接数据库：从连接池拿出一个连接对象\",\"断开数据库：将连接对象放回连接池\",\"1-8-2\"]},\"2667\":{\"h\":\"4. 数据库连接池的优点\",\"t\":[\"资源重用：由于数据库连接得以重用，避免了频繁创建，释放连接引起的大量性能开销。在减少系统消耗的基础上，另一方面也增加了系统运行环境的平稳性。\",\"更快的系统反应速度：数据库连接池在初始化过程中，往往已经创建了若干数据库连接置于连接池中备用。此时连接的初始化工作均已完成。对于业务请求处理而言，直接利用现有可用连接，避免了数据库连接初始化和释放过程的时间开销，从而减少了系统的响应时间\",\"新的资源分配手段：对于多应用共享同一数据库的系统而言，可在应用层通过数据库连接池的配置，实现某一应用最大可用数据库连接数的限制，避免某一应用独占所有的数据库资源\",\"统一的连接管理，避免数据库连接泄漏：在较为完善的数据库连接池实现中，可根据预先的占用超时设定，强制回收被占用连接，从而避免了常规数据库连接操作中可能出现的资源泄露\"]},\"2668\":{\"h\":\"5. 开源的数据库连接池技术\",\"t\":[\"JDBC 的数据库连接池使用 javax.sql.DataSource 来表示，DataSource 只是一个接口，该接口通常由服务器(Weblogic, WebSphere, Tomcat)提供实现，也有一些开源组织提供实现。\",\"DBCP 是Apache提供的数据库连接池。tomcat 服务器自带dbcp数据库连接池。速度相对c3p0较快，但因自身存在BUG，Hibernate3已不再提供支持。\",\"C3P0 是一个开源组织提供的一个数据库连接池，速度相对较慢，稳定性还可以。hibernate官方推荐使用\",\"Proxool 是sourceforge下的一个开源项目数据库连接池，有监控连接池状态的功能，稳定性较c3p0差一点\",\"BoneCP 是一个开源组织提供的数据库连接池，速度快\",\"Druid 是阿里提供的数据库连接池，据说是集DBCP 、C3P0 、Proxool 优点于一身的数据库连接池，但是速度不确定是否有BoneCP快【常用】\",\"DataSource用来取代DriverManager来获取Connection，获取速度快，同时可以大幅度提高数据库访问速度。\"]},\"2669\":{\"h\":\"注意事项\",\"t\":[\"数据源和数据库连接不同，数据源无需创建多个，它是产生数据库连接的工厂，因此整个应用只需要一个数据源即可。\",\"当数据库访问结束后，程序还是像以前一样关闭数据库连接：conn.close(); 但conn.close()并没有关闭数据库的物理连接，它仅仅把数据库连接释放，归还给了数据库连接池。\"]},\"2670\":{\"h\":\"Ⅱ. Druid：德鲁伊\",\"t\":[\"Druid是阿里巴巴开源平台上一个数据库连接池实现，它结合了C3P0、DBCP、Proxool等DB池的优点，同时加入了日志监控，可以很好的监控DB池连接和SQL的执行情况，可以说是针对监控而生的DB连接池，可以说是目前最好的连接池之一。\"]},\"2671\":{\"h\":\"1. 加载驱动（jar包）\",\"t\":[\"下载页\",\"github页\",\"下载jar包，并将jar包导入项目\"]},\"2672\":{\"h\":\"2. 使用德鲁伊\",\"t\":[\"只考虑使用配置文件获取Druid连接池的方法，如下：\",\"...... import javax.sql.DataSource; import com.alibaba.druid.pool.DruidDataSourceFactory; public void getConnection() throws Exception{ Properties pros = new Properties(); InputStream is = ClassLoader.getSystemClassLoader() .getResourceAsStream(\\\"druid.properties\\\"); //1.加载配置文件 pros.load(is); //2.使用工厂方法，创建连接池，参数是配置文件输入流 DataSource source = DruidDataSourceFactory.createDataSource(pros); //3.获取数据库连接对象, Connection conn = source.getConnection(); } \"]},\"2673\":{\"h\":\"3. 配置文件\",\"t\":[\"src/druid.properties\",\"url=jdbc:mysql://localhost:3306/test?rewriteBatchedStatements=true username=root password=123456 driverClassName=com.mysql.jdbc.Driver initialSize=10 //初始化数据库连接池时连接的数量 maxActive=20 //最大连接池数量 maxWait=1000 //获取连接时最大等待时间，单位毫秒。 filters=wall //跟日志相关的配置 \"]},\"2674\":{\"h\":\"4. 配置项\",\"t\":[\"配置项如下：\",\"配置\",\"缺省\",\"说明\",\"name\",\"配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。 如果没有配置，将会生成一个名字，格式是：”DataSource-” + System.identityHashCode(this)\",\"url\",\"连接数据库的url，不同数据库不一样。例如：mysql : jdbc:mysql://10.20.153.104:3306/druid2 oracle : jdbc:oracle:thin:@10.20.149.85:1521:ocnauto\",\"username\",\"连接数据库的用户名\",\"password\",\"连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细看这里\",\"driverClassName\",\"根据url自动识别 这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)\",\"initialSize\",\"0\",\"初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时\",\"maxActive\",\"8\",\"最大连接池数量\",\"maxIdle\",\"8\",\"已经不再使用，配置了也没效果\",\"minIdle\",\"最小连接池数量\",\"maxWait\",\"获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。\",\"poolPreparedStatements\",\"false\",\"是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。\",\"maxOpenPreparedStatements\",\"-1\",\"要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100\",\"validationQuery\",\"用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。\",\"testOnBorrow\",\"true\",\"申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。\",\"testOnReturn\",\"false\",\"归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能\",\"testWhileIdle\",\"false\",\"建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。\",\"timeBetweenEvictionRunsMillis\",\"有两个含义： 1)Destroy线程会检测连接的间隔时间2)testWhileIdle的判断依据，详细看testWhileIdle属性的说明\",\"numTestsPerEvictionRun\",\"不再使用，一个DruidDataSource只支持一个EvictionRun\",\"minEvictableIdleTimeMillis\",\"connectionInitSqls\",\"物理连接初始化的时候执行的sql\",\"exceptionSorter\",\"根据dbType自动识别 当数据库抛出一些不可恢复的异常时，抛弃连接\",\"filters\",\"属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall\",\"proxyFilters\",\"类型是List，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系\"]},\"2675\":{\"h\":\"5. JDBCUtils\",\"t\":[\"连接池应该放到之前建立的JDBC功能类：JDBCUtils中。\",\"private static DataSource source; static{ try { Properties pros = new Properties(); InputStream is = ClassLoader.getSystemClassLoader() .getResourceAsStream(\\\"druid.properties\\\"); pros.load(is); source = DruidDataSourceFactory.createDataSource(pros); } catch (Exception e) { e.printStackTrace(); } } public static Connection getConnection3() throws SQLException{ Connection conn = source.getConnection(); return conn; //返回一个数据库连接，从池子里拿出一个数据库连接 } \"]},\"2676\":{\"h\":\"6. 使用示例\",\"t\":[\"public void testGetCustomerById() { Connection conn = null; try { conn = JDBCUtils.getConnection3(); Customer cust = dao.getCustomerById(conn, 19); System.out.println(cust); } catch (Exception e) { e.printStackTrace(); }finally{ JDBCUtils.closeResource(conn, null); } } \"]},\"2677\":{\"h\":\"1-9. DBUtils\"},\"2678\":{\"h\":\"Ⅰ. Apache-DBUtils\"},\"2679\":{\"h\":\"1. DBUtils介绍\",\"t\":[\"DBUtils就跟之前封装的Dao一样，这个是Apache提供的。\",\"commons-dbutils 是 Apache 组织提供的一个开源 JDBC工具类库，它是对JDBC的简单封装，学习成本极低，并且使用dbutils能极大简化jdbc编码的工作量，同时也不会影响程序的性能。\"]},\"2680\":{\"h\":\"2. 驱动\",\"t\":[\"下载包并导入。\"]},\"2681\":{\"h\":\"3. API介绍\",\"t\":[\"org.apache.commons.dbutils.QueryRunner【BaseDao】\",\"org.apache.commons.dbutils.ResultSetHandler【处理不同的查询结果集，由不同子类实现】\",\"工具类：org.apache.commons.dbutils.DbUtils【JDBCUtils，但不能连接】\"]},\"2682\":{\"h\":\"4. DbUtils类：工具类API（取代自己写的JDBCUtils）\",\"t\":[\"提供如关闭连接、装载JDBC驱动程序等常规工作的工具类，里面的所有方法都是静态的。主要方法如下：\",\"public static void close(…) throws java.sql.SQLException： DbUtils类提供了三个重载的关闭方法。这些方法检查所提供的参数是不是NULL，如果不是的话，它们就关闭Connection、Statement和ResultSet。\",\"public static void closeQuietly(…): 这一类方法不仅能在Connection、Statement和ResultSet为NULL情况下避免关闭，还能隐藏一些在程序中抛出的SQLEeception。\",\"public static void commitAndClose(Connection conn)throws SQLException： 用来提交连接的事务，然后关闭连接\",\"public static void commitAndCloseQuietly(Connection conn)： 用来提交连接，然后关闭连接，并且在关闭连接时不抛出SQL异常。\",\"public static void rollback(Connection conn)throws SQLException：允许conn为null，因为方法内部做了判断\",\"public static void rollbackAndClose(Connection conn)throws SQLException\",\"rollbackAndCloseQuietly(Connection)\",\"public static boolean loadDriver(java.lang.String driverClassName)：这一方装载并注册JDBC驱动程序，如果成功就返回true。使用该方法，你不需要捕捉这个异常ClassNotFoundException。\"]},\"2683\":{\"h\":\"5. QueryRunner：CURD的API（取代自己写的BaseDao）\",\"t\":[\"该类简单化了SQL查询，它与ResultSetHandler组合在一起使用可以完成大部分的数据库操作，能够大大减少编码量。\",\"QueryRunner类提供了两个构造器： \",\"默认的构造器\",\"需要一个 javax.sql.DataSource 来作参数的构造器\",\"QueryRunner类的主要方法： \",\"更新 \",\"public int update(Connection conn, String sql, Object... params) throws SQLException:用来执行一个更新（插入、更新或删除）操作。\",\"......\",\"插入 \",\"public <T> T insert(Connection conn,String sql,ResultSetHandler<T> rsh, Object... params) throws SQLException：只支持INSERT语句，其中 rsh - The handler used to create the result object from the ResultSet of auto-generated keys. 返回值: An object generated by the handler.即自动生成的键值\",\"....\",\"批处理 \",\"public int[] batch(Connection conn,String sql,Object params)throws SQLException： INSERT, UPDATE, or DELETE语句\",\"public <T> T insertBatch(Connection conn,String sql,ResultSetHandler<T> rsh,Object params)throws SQLException：只支持INSERT语句\",\".....\",\"查询 \",\"public Object query(Connection conn, String sql, ResultSetHandler rsh,Object... params) throws SQLException：执行一个查询操作，在这个查询中，对象数组中的每个元素值被用来作为查询语句的置换参数。该方法会自行处理 PreparedStatement 和 ResultSet 的创建和关闭。\",\"......\"]},\"2684\":{\"h\":\"6. ResultSetHandler接口及实现类\",\"t\":[\"该接口用于处理 java.sql.ResultSet，将数据按要求转换为另一种形式。ResultSetHandler 接口提供了一个单独的方法：Object handle (java.sql.ResultSet .rs)。\",\"接口的主要实现类：\",\"ArrayHandler：把结果集中的第一行数据转成对象数组。\",\"ArrayListHandler：把结果集中的每一行数据都转成一个数组，再存放到List中。\",\"BeanHandler：将结果集中的第一行数据封装到一个对应的JavaBean实例中。\",\"BeanListHandler：将结果集中的每一行数据都封装到一个对应的JavaBean实例中，存放到List里。\",\"ColumnListHandler：将结果集中某一列的数据存放到List中。\",\"KeyedHandler(name)：将结果集中的每一行数据都封装到一个Map里，再把这些map再存到一个map里，其key为指定的key。\",\"MapHandler：将结果集中的第一行数据封装到一个Map里，key是列名，value就是对应的值。\",\"MapListHandler：将结果集中的每一行数据都封装到一个Map里，然后再存放到List\",\"ScalarHandler：查询单个值对象\"]},\"2685\":{\"h\":\"Ⅱ. 使用示例\"},\"2686\":{\"h\":\"1. 添加\",\"t\":[\"public void testInsert() throws Exception { QueryRunner runner = new QueryRunner(); Connection conn = JDBCUtils.getConnection3(); String sql = \\\"insert into customers(name,email,birth)values(?,?,?)\\\"; int count = runner.update(conn, sql, \\\"何成飞\\\", \\\"he@qq.com\\\", \\\"1992-09-08\\\"); System.out.println(\\\"添加了\\\" + count + \\\"条记录\\\"); JDBCUtils.closeResource(conn, null); } \"]},\"2687\":{\"h\":\"2. 删除\",\"t\":[\"public void testDelete() throws Exception { QueryRunner runner = new QueryRunner(); Connection conn = JDBCUtils.getConnection3(); String sql = \\\"delete from customers where id < ?\\\"; int count = runner.update(conn, sql,3); System.out.println(\\\"删除了\\\" + count + \\\"条记录\\\"); JDBCUtils.closeResource(conn, null); } \"]},\"2688\":{\"h\":\"3. 查询一条记录\",\"t\":[\"public void testQueryInstance() throws Exception{ QueryRunner runner = new QueryRunner(); Connection conn = JDBCUtils.getConnection3(); String sql = \\\"select id,name,email,birth from customers where id = ?\\\"; BeanHandler<Customer> handler = new BeanHandler<>(Customer.class); Customer customer = runner.query(conn, sql, handler, 23); System.out.println(customer); JDBCUtils.closeResource(conn, null); } \"]},\"2689\":{\"h\":\"4. 查询多条记录构成的集合\",\"t\":[\"public void testQueryList() throws Exception{ QueryRunner runner = new QueryRunner(); Connection conn = JDBCUtils.getConnection3(); String sql = \\\"select id,name,email,birth from customers where id < ?\\\"; BeanListHandler<Customer> handler = new BeanListHandler<>(Customer.class); List<Customer> list = runner.query(conn, sql, handler, 23); list.forEach(System.out::println); JDBCUtils.closeResource(conn, null); } \"]},\"2690\":{\"h\":\"5. 自定义ResultSetHandler的实现类\",\"t\":[\"public void testQueryInstance1() throws Exception{ QueryRunner runner = new QueryRunner(); Connection conn = JDBCUtils.getConnection3(); String sql = \\\"select id,name,email,birth from customers where id = ?\\\"; ResultSetHandler<Customer> handler = new ResultSetHandler<Customer>() { public Customer handle(ResultSet rs) throws SQLException { System.out.println(\\\"handle\\\"); if(rs.next()){ int id = rs.getInt(\\\"id\\\"); String name = rs.getString(\\\"name\\\"); String email = rs.getString(\\\"email\\\"); Date birth = rs.getDate(\\\"birth\\\"); return new Customer(id, name, email, birth); } return null; } }; Customer customer = runner.query(conn, sql, handler, 23); System.out.println(customer); JDBCUtils.closeResource(conn, null); } \"]},\"2691\":{\"h\":\"6. 查询类似于最大的，最小的，平均的，总和，个数相关的数据\",\"t\":[\"public void testQueryValue() throws Exception{ QueryRunner runner = new QueryRunner(); Connection conn = JDBCUtils.getConnection3(); //测试一： String sql = \\\"select count(*) from customers where id < ?\\\"; ScalarHandler handler = new ScalarHandler(); long count = (long) runner.query(conn, sql, handler, 20); System.out.println(count); //测试二： String sql = \\\"select max(birth) from customers\\\"; ScalarHandler handler = new ScalarHandler(); Date birth = (Date) runner.query(conn, sql, handler); System.out.println(birth); JDBCUtils.closeResource(conn, null); } \"]},\"2692\":{\"h\":\"2-1. 基本使用\"},\"2693\":{\"h\":\"Ⅰ. Tomcat介绍\"},\"2694\":{\"h\":\"1. web服务器\",\"t\":[\"本质是安装了服务器软件的计算机。\",\"服务器软件：接收用户的请求，处理请求，调用服务器资源，做出响应，在web服务器软件中，可以部署web项目，让用户通过浏览器来访问这些项目。\",\"Web服务器是安装在服务器端的一款软件，本质上Web服务器是一个应用程序，对HTTP协议的操作进行封装，使得程序员不必直接对协议进行操作，让Web开发更加便捷。\",\"相关软件：Tomcat（最常用）\"]},\"2695\":{\"h\":\"2. 资源分类\",\"t\":[\"静态资源：所有用户访问后，得到的结果都是一样的，称为静态资源.静态资源可以直接被浏览器解析 \",\"如： html,css,JavaScript\",\"动态资源:每个用户访问相同资源后，得到的结果可能不一样。称为动态资源。动态资源被访问后，需要先转换为静态资源，在返回给浏览器 \",\"如：servlet/jsp,php,asp....\"]},\"2696\":{\"h\":\"3. Web服务器软件使用步骤\",\"t\":[\"准备静态资源\",\"下载安装Web服务器软件\",\"将静态资源部署到Web服务器上\",\"启动Web服务器使用浏览器访问对应的资源\"]},\"2697\":{\"h\":\"4. 网络通信三要素\",\"t\":[\"IP：电子设备(计算机)在网络中的唯一标识。\",\"端口：应用程序在计算机中的唯一标识。 0~65536\",\"传输协议：规定了数据传输的规则\",\"tcp：安全协议，三次握手。 速度稍慢\",\"udp：不安全协议。 速度快\"]},\"2698\":{\"h\":\"5. Tomcat\",\"t\":[\"Tomcat是一个开源免费的轻量级Web服务器，支持Servlet/JSP少量JavaEE规范。Tomcat也被称为Web容器、Servlet容器，Servlet需要依赖Tomcat才能运行。\",\"官网\",\"2-1-1\"]},\"2699\":{\"h\":\"Ⅱ. 基本开发使用\",\"t\":[\"环境：Windows系统上的开发环境\"]},\"2700\":{\"h\":\"1. 下载\",\"t\":[\"下载地址\",\"版本选择：8.5以上\",\"8.5下载地址直达\",\"文件选择：Core下的zip包即可（Linux选tar.gz）\",\"源码：Source Code Distributions下的即为java源码。\"]},\"2701\":{\"h\":\"2. 安装与卸载\",\"t\":[\"安装：该软件是绿色软件，不用安装，解压即可使用。\",\"卸载：删除即为卸载。\"]},\"2702\":{\"h\":\"3. 目录结构\",\"t\":[\"2-1-2\"]},\"2703\":{\"h\":\"4. 启动\",\"t\":[\"前提：主机上运行着jdk，且配置好了JAVA_HOME，不然命令窗口会一闪而过，启动失败。\",\"双击bin/startup.bat即可启动，启动后会弹出dos窗口，常驻\",\"注意：因为有端口占用，只能启动一个Tomcat，除非重新进行端口配置。\"]},\"2704\":{\"h\":\"5. 关闭\",\"t\":[\"正常关闭：在程序的dos端口按ctrl c【推荐】\",\"正常关闭：双击bin/shutdown.bat\",\"强制关闭：关闭dos窗口，不推荐，某些destory方法无法生效。\"]},\"2705\":{\"h\":\"6. 端口配置\",\"t\":[\"Tomcat默认的端口是8080，要想修改Tomcat启动的端口号，需要修改 conf/server.xml\",\"HTTP协议默认端口号为80，如果将Tomcat端口号改为80，则将来访问Tomcat时，将不用输入端口号。 同样，https协议的默认端口号是443.\",\"2-1-3\"]},\"2706\":{\"h\":\"7. debug\"},\"2707\":{\"h\":\"7.1 控制台乱码\",\"t\":[\"原因：命令行默认是GBK编码，Tomcat模式是UTF8；\",\"IDEA中：将控制台改为UTF8。\",\"或配置修改：\"]},\"2708\":{\"h\":\"7.2 端口冲突\",\"t\":[\"报错：Address already in use:bind，端口以备占用\",\"解决：关闭占用端口的软件，或修改Tomcat的端口。\",\"netstat -ano //查看进程，会显示端口号和pid，根据pid找到对应的进程 \"]},\"2709\":{\"h\":\"7.3 启动时，窗口一闪而过\",\"t\":[\"原因：找不到JDK环境。\",\"解决：检查JAVA_HOME环境变量是否正确配置\"]},\"2710\":{\"h\":\"Ⅲ. 手动部署\"},\"2711\":{\"h\":\"1. 访问Tomcat服务器\",\"t\":[\"访问地址是ip地址、域名或localhost，端口号是8080（默认） 地址：http://ipxx:8080 如：http://localhost:8080\"]},\"2712\":{\"h\":\"2. 在webapps下部署\",\"t\":[\"Tomcat的\\\\webapps目录是用来部署项目的。\"]},\"2713\":{\"h\":\"2.1 在webapps下创建项目\",\"t\":[\"在Tomcat目录下的webapps目录下创建一个目录，该目录就是一个独立的项目。\",\"项目目录下，需要再创建一个必备的目录：WEB-INF（名称固定）。\"]},\"2714\":{\"h\":\"2.2 在其他目录下创建项目，并通过war包部署\",\"t\":[\"将项目打成一个war包，再将war包放置到webapps目录下。\",\"war包会自动解压缩（war包和zip包差不多）。\"]},\"2715\":{\"h\":\"2.3 访问项目\",\"t\":[\"http://localhost:8080/项目目录/目标文件\",\"如：项目目录是test1，要访问的文件是index.html\",\"Tomcat默认访问index.* 的\",\"http://localhost:8080/test1/ \"]},\"2716\":{\"h\":\"3. 修改配置文件，创建一个路由\",\"t\":[\"修改tomcat配置文件，创建一个路由，指向项目的目录\",\"文件：conf/server.xml，在<Host>标签体中配置\",\"docBase:项目存放的路径\",\"path：虚拟目录，可以随意定义\",\"<Context docBase=\\\"D:\\\\hello\\\" path=\\\"/hehe\\\" /> \",\"访问项目：http://localhost:8080/path\",\"缺点：Tomcat可能会运行多个项目，直接修改server配置文件，会影响到其他项目\"]},\"2717\":{\"h\":\"通过子配置文件\",\"t\":[\"在 conf/Catalina/localhost中创建任意xml文件，在文件中编写配置项。\",\"注意：path不用定义，就是文件的名称。\",\"<Context docBase=\\\"D:\\\\hello\\\" /> \"]},\"2718\":{\"h\":\"4. 配合Nginx代理\",\"t\":[\"常用，见Nginx\"]},\"2719\":{\"h\":\"Ⅳ. JavaWeb项目结构\",\"t\":[\"JavaWeb就是用Java技术来解决相关web互联网领域的技术栈。\"]},\"2720\":{\"h\":\"1. 开发时的项目结构【工作目录】\",\"t\":[\"详见：idea & tomcat\",\"src：java源码目录\",\"web：静态资源目录\"]},\"2721\":{\"h\":\"2. 部署时的项目目录结构【运行目录】\",\"t\":[\"真正部署项目时，是把该目录部署到服务器，而非开始时的项目。\",\"同时这个目录也是Tomcat真正访问的目录。\"]},\"2722\":{\"h\":\"2.1 通用目录\",\"t\":[\"项目的根目录 \",\"WEB-INF：不能被浏览器直接访问的目录 \",\"web.xml：web项目的核心配置文件【非必须】\",\"classes：编译后的java字节码文件目录\",\"lib：放置依赖的jar包\",\"其他各种可以被浏览器访问的静态资源。\"]},\"2723\":{\"h\":\"2.2 在idea中的输出目录\",\"t\":[\"假如：项目名称叫sgugo，（详见idea & Tomcat）\",\"out \",\"artifacts \",\"sgugo_war_exploded：sgugo项目名的输出目录 \",\"WEB-INF：不能被浏览器直接访问的目录 \",\"classes：编译后java类\",\"其他静态资源\"]},\"2724\":{\"h\":\"2-2. IDEA使用\"},\"2725\":{\"h\":\"Ⅰ. Web项目目录\",\"t\":[\"以下目录是使用Maven创建的JavaWeb项目的标准目录。\"]},\"2726\":{\"h\":\"1. 开发中的项目\",\"t\":[\"2-2-1\"]},\"2727\":{\"h\":\"2. 打包后可以部署的项目\",\"t\":[\"通过打包命令，可以直接获取打包后可以部署的项目目录。\",\"编译后的Java字节码文件和resources的资源文件，会被放到WEB-INF下的classes目录下\",\"pom.xml中依赖坐标对应的jar包，会被放入WEB-INF下的lib目录下\",\"2-2-2\"]},\"2728\":{\"h\":\"Ⅱ. 创建Web项目\"},\"2729\":{\"h\":\"1. IDEA：创建Web项目\"},\"2730\":{\"h\":\"1.1 新建工程\",\"t\":[\"新建一个空Project：如Learn\",\"里面用一个Module来使用Tomcat：如JavaWeb\"]},\"2731\":{\"h\":\"1.2 创建Module\",\"t\":[\"New Module：弹出如下窗口，选择：Java Enterprise（即java企业版）\",\"右边选项中，进行必要的设置，如下：\",\"Name/Artifact：模块名\",\"Project template：Web application\",\"Project SDK：1.8 然后点击 Next和Finish就OK了\"]},\"2732\":{\"h\":\"2. IDEA：非Web项目->Web项目\",\"t\":[\"将已有的项目（模块）部署到Tomcat，和直接创建Web application项目的目录结构稍有不同。\"]},\"2733\":{\"h\":\"2.1 通过Project Structure添加Web\",\"t\":[\"打开Project Structure：Ctrl+ALT+Shift+S，选择右边的：Facets，点击+号，选择Web，然后选择要添加Web的模块\",\"2-2-3\"]},\"2734\":{\"h\":\"2.2 通过在Module上右键添加Web\",\"t\":[\"module上右键：Add Frameworks Support\",\"在弹出的页面中，选择：Web Application\",\"如下：也可以取消勾选 Create web.xml，使用注解的方式配置项目\",\"2-2-4\"]},\"2735\":{\"h\":\"2.3 配置Artifacts\",\"t\":[\"注意：如果采用了上述的方式2，就不用配置Artifacts，因为都已经配置好了。\",\"点击 Artifacts：配置输出文件的目录，和输出Type，如图：\",\"2-2-5\"]},\"2736\":{\"h\":\"3. Maven：使用骨架创建Web项目\"},\"2737\":{\"h\":\"3.1 创建Module\",\"t\":[\"new Module：选择Maven\",\"勾选Great from archetype：选中org.apache.maven.archetypes：maven_archetype-webapp\",\"点击Next，填写项目名称，和Maven的坐标。\",\"Finish：完成创建\"]},\"2738\":{\"h\":\"3.2 删除pom.xml中多余的内容\",\"t\":[\"<project ...>...</project>外的其他标签内容都删除。\"]},\"2739\":{\"h\":\"3.3 补齐Maven Web项目确实的目录结构\",\"t\":[\"默认的目录是没有java和resources的，需要手动创建补齐。\",\"2-2-6\"]},\"2740\":{\"h\":\"4. Maven：不使用骨架创建Web项目【推荐】\",\"t\":[\"详见：Maven\"]},\"2741\":{\"h\":\"4.1 创建Module\",\"t\":[\"new Module：选择Maven\",\"不勾选Great from archetype\",\"点击Next，填写项目名称，和Maven的坐标。\",\"Finish：完成创建\"]},\"2742\":{\"h\":\"4.2 设置pom.xml的打包方式\",\"t\":[\"<packaging>war</packaging>\"]},\"2743\":{\"h\":\"4.3 补齐Maven Web缺失的Webapp目录结构\",\"t\":[\"打开Project Structure：Ctrl+ALT+Shift+S：\",\"Facets->Web：选中之前创建的Web项目：在右边进行设置\",\"Web Resource Directories：双击按照提示补齐webapp目录\",\"Deployment Descriptors：点击+号，按照提示，添加缺失的WEB-INF/web.xml \",\"注意：WEB-INF所在的目录为webapp。\"]},\"2744\":{\"h\":\"Ⅲ. 配置Tomcat\"},\"2745\":{\"h\":\"readme\",\"t\":[\"使用IDEA和下载的Tomcat软件，配置Tomcat模板。该模板只需配置一次，以后再创建Javaweb项目就可以直接使用了。\",\"注意：这里使用的是本地之前下载的Tomcat。\"]},\"2746\":{\"h\":\"1. 打开Tomcat Server模板\",\"t\":[\"①右上角点击：Edit Comfigurations（或者：菜单栏run/Edit Comfigurations）\",\"②在弹出的窗口中点击右下角的edit configuration templates...\",\"③在弹出的窗口：Run/Debug Configuration Templates中：\",\"右边选择Tomcat Server->Local，然后就可以配置Tomcat了，配置项如下： 其中：Name是该Tomcat模板的名字，可以任意取，比如：Sgugo项目\"]},\"2747\":{\"h\":\"2. Deployment：项目部署\",\"t\":[\"点击该选项卡，部署项目，优先设置该选项卡，再设置Server选项卡\",\"点击+号，选择：Aftifacts->JavaWeb:war exploded\"]},\"2748\":{\"h\":\"2.1 部署模式介绍\",\"t\":[\"war：将WEB工程打成war包，把war包发布到Tomcat服务器上 \",\"该方式无法实现热部署\",\"war exploded：将WEB工程以当前文件夹的位置关系发布到Tomcat服务器上 \",\"热部署模式\"]},\"2749\":{\"h\":\"2.2 Application context：项目路径\",\"t\":[\"只有一个项目，建议直接改成 / , 这样以后就不用输入项目目录。\"]},\"2750\":{\"h\":\"3. Server：TomCat服务器配置\",\"t\":[\"Application server：指定本地Tomcat软件的具体路径 \",\"配置Tomcat服务器软件的目录，点击右边的Configure进行配置，选择Tomcat的主目录即可。\",\"Open Browser：启动项目后默认自动打开的浏览器\",\"URL：打开浏览器后要访问的项目目录，一般设置为：http://localhost:80/\",\"On Update action：当项目有更新的时候，该怎么做，推荐update resource：需要编译时按ctrl + f9即可 \",\"update resource：资源变动时，重新部署，非java文件的其他文件\",\"update calsses and resource：java和静态资源变更都会重新部署【热部署】\",\"Redeploy：把当前的一个项目重新部署到Tomcat服务器上\",\"restart：重启tomcat，将服务器上所有的项目都重新部署\",\"On fream deactivation：当idea失去焦点时，做什么 \",\"推荐update calsses and resource。自动更新class和资源。【方便调试】\",\"HTTP port：访问的端口号，默认是8080，改为80就不用输入端口号了。\"]},\"2751\":{\"h\":\"4. 添加配置好的Tomcat模板\",\"t\":[\"在 Run/Debug Configurations中点击右上角的+号，然后选择刚配置好的Tomcat（通过Name选择）\",\"以后就可以直接点击这个Tomcat 8.5.78进行Tomcat的配置和项目部署了。点击OK，结束Tomcat的配置。\"]},\"2752\":{\"h\":\"5. 配置多个Tomcat\",\"t\":[\"一台主机可以启动多太Tomcat服务器，只要端口号不同就可以。\",\"这里只介绍一下配置，可以创建多个Tomcat模板给不同的项目用。\"]},\"2753\":{\"h\":\"5.1 添加Tomcat模板\",\"t\":[\"打开窗口：Run/Debug Configuration ，点击+ 号，选择Tomcat，就可以再创建一个Tomcat模板了。\",\"注意：不同的Tomcat模板可以起不同的名字，如：起成对应的项目名称，方便区分。\"]},\"2754\":{\"h\":\"5.2 配置Tomcat模板\",\"t\":[\"选择一个Tomcat模板就可以在右边进行配置。\",\"具体配置见上文，配置方式一样（更简单，因为有了前一个模板的默认值）。\"]},\"2755\":{\"h\":\"5.3 配置文件\",\"t\":[\"IDEA会为每一个tomcat部署的项目单独建立一份配置文件。不用修改这个配置文件，按照上面的方法在IDEA中修改Tomcat会自动修改配置文件。\",\"配置文件地址：查看控制台的log：Using CATALINA_BASE:\\\"C:\\\\Users\\\\A\\\\AppData\\\\Local\\\\JetBrains\\\\IntelliJIdea2021.3\\\\tomcat\\\\4dc041da\\\"\"]},\"2756\":{\"h\":\"Ⅳ. 使用Tomcat\"},\"2757\":{\"h\":\"1. 启动Tomcat\",\"t\":[\"如图，下拉框选择Tomcat，并点击右边的 绿色启动按钮启动。\",\"debug：debug也可以启动，同时进行debug。\"]},\"2758\":{\"h\":\"2. 访问测试\",\"t\":[\"在JavaWeb/src/main/webapp/ 目录下创建 index.html，并输入<h1>Hi Tomcat</h1> 在浏览器中输入：localhost:8080/index.html，就可以看到页面了。\",\"注意：要关闭之前通过双击打开的Tomcat服务，不然会报端口占用的错误。\"]},\"2759\":{\"h\":\"3. 编译后的项目目录\",\"t\":[\"idea没有使用Tomcat的webapps作为项目目录，而是使用 模块目录下的 target作为项目目录，其中有三个文件夹：\",\"classes：对应编译后java文件\",\"generated-source：对应资源文件\",\"项目名-1.0-SNAPSHOT：前端快照\"]},\"2760\":{\"h\":\"4. 多个Tomcat目标的使用\",\"t\":[\"在右上角的下拉框中选择指定的tomcat模板，就可以启动了。\",\"当有多个Tomcat模板时，可以进行关闭切换其他Tomcat模板，并进行启动。\"]},\"2761\":{\"h\":\"Ⅴ. 注意事项\"},\"2762\":{\"h\":\"1. Artifacts配置\",\"t\":[\"新建的JavaWeb项目可能会出现未配置项目导出方式（Artifacts）。\",\"如果未配置Artifacts，会导致Tomcat选项中，只有普通的build打包，不能打war包，更不能热部署（没这个选项）。\"]},\"2763\":{\"h\":\"1.1 配置Artifacts\",\"t\":[\"打开Project Structure：ctrl+alt+shift+s\"]},\"2764\":{\"h\":\"1.2 添加导出方式\",\"t\":[\"如上图，主要用到两个导出方式。\",\"选中导出方式和要设置的项目进行设置。\"]},\"2765\":{\"h\":\"2. Tomcat导出方式介绍\",\"t\":[\"war：将WEB工程打成war包，把war包自动发布到Tomcat服务器上 \",\"该方式无法实现热部署\",\"war exploded：将WEB工程以当前文件夹的位置关系发布到Tomcat服务器上 \",\"热部署模式\"]},\"2766\":{\"h\":\"2.1 Tomcat添加导出方式\",\"t\":[\"在配置Tomcat的目标时，应该首先配置Deployment。\",\"点击+号，添加项目部署的导出方式。\",\"选择Artifact...选择war或war exploded中的一个。\",\"如果此处未出现Artifact...选项，说明Artifacts配置有问题，需要进行配置。\"]},\"2767\":{\"h\":\"2.2 注意事项\",\"t\":[\"如果未配置Artifacts，Tomcat的模板的设置界面将不会出现下面两个选项。\",\"热部署的具体配置：见上面的配置Tomcat\"]},\"2768\":{\"h\":\"@缺少的内容\",\"t\":[\"待补充的内容，都是一些高级的Tomcat使用\",\"详细配置\",\"关联Nginx\",\"性能调优\",\"Tomcat架构\",\"配置：服务器配置、Web应用配置、JVM配置\",\"Tomcat集群\",\"Tomcat安全\",\"WebSocket\"]},\"2769\":{\"h\":\"3-1. Servlet介绍\",\"t\":[\"提示\",\"Servlet Filter Listner是Javaweb的核心三件套\"]},\"2770\":{\"h\":\"1. 概述\",\"t\":[\"3-1-1\",\"Servlet：server applet，运行在服务器端（Tomcat）的小程序；\",\"Servlet是JavaWeb最为核心的内容，它是Java提供的一门动态web资源开发技术。\",\"Servlet是JavaEE规范之一，其实就是一个接口，将来我们需要定义Servlet类实现Servlet接口，并由web服务器运行Servlet\"]},\"2771\":{\"h\":\"2. 解析\",\"t\":[\"浏览器访问服务器时，会访问两种资源，静态资源和动态资源。\",\"对于动态资源来说，他是动态生成的，不同的访问条件，返回的内容是不一样的，也就是说，动态资源是具有逻辑性的，这个逻辑性就是由java代码控制的。\",\"服务器中的java代码，是需要tomcat来解析，才能生效。\",\"并不是所有的java代码，tomcat都能解析，而是需要遵守一些规则（接口）。这个规则（接口）就是Servlet。\"]},\"2772\":{\"h\":\"3. Servlet的本质\",\"t\":[\"Servlet就是一个接口，定义了Java类被浏览器访问到(tomcat识别)的规则。\",\"Javaweb开发中，自定义一个类，要实现Servlet接口，复写方法，才能被Tomcat解析.\"]},\"2773\":{\"h\":\"4. 导入servlet包\",\"t\":[\"servlet包是tomcat lib中的一个包，默认是导入的，如果没有导入可以手动导入： 打开模块设置（ctrl+alt+shift+s）->Libraries->+->选择tomcat/lib/servlet-api->导入到指定module。\"]},\"2774\":{\"h\":\"5. 注意事项\",\"t\":[\"打包web项目时，一定不要打包Servlet包，无论是开发时是何种配置。\",\"服务器Tomcat中已经有servlet-api.jar了，重复打包会产生冲突。\"]},\"2775\":{\"h\":\"3-2. 基本使用\"},\"2776\":{\"h\":\"Ⅰ. 快速入门\"},\"2777\":{\"h\":\"快速入门步骤\",\"t\":[\"创建项目：配置好Tomcat和Servlet\",\"创建Servlet实现类：实现Servlet接口 \",\"并重写所有方法，其中server方法中打印一句话进行测设\",\"配置路由：使用注解的方式为Servlet类配置一个访问路径（暂时不用深究）\",\"访问Servlet实现类：通过 基本url+路由的方式访问 \",\"访问前别忘了重启服务器\",\"测设：观察访问结果 \",\"不用写测设类，Servlet实现类会被自动访问，并自动调用server方法\"]},\"2778\":{\"h\":\"1. 创建项目\",\"t\":[\"创建Web项目，并配置Tomcat和Servlet。\",\"右键Librarys中的servlet-api：Add to Modules....：选择具体的module\",\"也可以在具体Module的：Depedencies选项卡中，手动添加\",\"3-2-1\"]},\"2779\":{\"h\":\"2. 创建Servlet实现类\",\"t\":[\"定义一个类，实现Servlet接口，并重写接口中所有方法，并在service方法中打印hello\",\"package servlet.demo; public class ServletDemo1 implements Servlet { @Override public void service(ServletRequest request, ServletResponse response) throws ServletException, IOException { System.out.println(\\\"hello\\\"); } ...//其他方法不用管，暂时只考虑service方法 } \"]},\"2780\":{\"h\":\"3. 配置路由\",\"t\":[\"在类上使用@WebServlet注解，配置该Servlet的访问路径\",\"@WebServlet(\\\"/demo1\\\") public class ServletDemo1 implements Servlet {...} \"]},\"2781\":{\"h\":\"4. 访问Servlet实现类\",\"t\":[\"启动/重启 Tomcat，浏览器中输入URL地址（基本URL+路由）访问该Servlet\",\"http://localhost:8080/demo1 \"]},\"2782\":{\"h\":\"5. 测试\",\"t\":[\"观察启动后的命令行，发现打印了hello。\",\"刷新访问的页面，每刷新一次就打印一次hello。\"]},\"2783\":{\"h\":\"Ⅱ. Servlet 执行流程\",\"t\":[\"我们并没有创建Servlet类的对象，也没有调用对象中的service方法，为什么在控制台就打印了hello这句话呢?\"]},\"2784\":{\"h\":\"1. Servlet执行流程概述\",\"t\":[\"3-2-5\"]},\"2785\":{\"h\":\"2. 解析\",\"t\":[\"浏览器发http://localhost:8080/web-demo/demo1请求，从请求中可以解析出三部分内容分别是`localhost:8080`、`web-demo`、`demo1`\",\"根据localhost:8080可以找到要访问的Tomcat Web服务器\",\"根据web-demo可以找到部署在Tomcat服务器上的web-demo项目\",\"根据demo1可以找到要访问的是项目中的哪个Servlet类，根据@WebServlet后面的值进行匹配\",\"找到ServletDemo1这个类后，Tomcat Web服务器就会为ServletDemo1这个类创建一个对象，然后调用对象中的service方法 \",\"ServletDemo1实现了Servlet接口，所以类中必然会重写service方法供Tomcat Web服务器进行调用\",\"service方法中有ServletRequest和ServletResponse两个参数，ServletRequest封装的是请求数据，ServletResponse封装的是响应数据，后期我们可以通过这两个参数实现前后端的数据交互\"]},\"2786\":{\"h\":\"3. 总结\",\"t\":[\"Servlet由web服务器创建，Servlet方法由web服务器调用\",\"因为我们自定义的Servlet,必须实现Servlet接口并复写其方法，而Servlet接口中有service方法\"]},\"2787\":{\"h\":\"Ⅲ. IDEA中快速使用\",\"t\":[\"在IDEA中可以快速创建Servlet实现类。\",\"JavaWeb核心三件套都可以直接new。\"]},\"2788\":{\"h\":\"1. 使用方式\",\"t\":[\"右键new时直接显示Servlet。\",\"效果：直接配置好了WebServlet，继承了HttpServlet，且自动重写了doGet和doPost。\",\"3-2-2\"]},\"2789\":{\"h\":\"2. 修改模板\",\"t\":[\"可以根据需求修改Servlet模板\",\"3-2-3\"]},\"2790\":{\"h\":\"3. 注意事项\",\"t\":[\"前提：已经导入了servlet.api\",\"在Project Structure界面，点击Module选项卡：将Source Roots中对应的src目录勾选上。\",\"3-2-4\"]},\"2791\":{\"h\":\"3-3. Servlet的对象\"},\"2792\":{\"h\":\"Ⅰ. Servlet 生命周期\",\"t\":[\"对象的生命周期指一个对象从被创建到被销毁的整个过程。Servlet运行在Servlet容器(web服务器)中，其生命周期由容器来管理，分为4个阶段\"]},\"2793\":{\"h\":\"1. 阶段1：加载和实例化\",\"t\":[\"默认情况下，当Servlet第一次被访问时，由容器创建Servlet对象。该对象只会创建一次，Tomcat会将其常驻内存。\"]},\"2794\":{\"h\":\"1.1 修改为启动Servlet时创建\",\"t\":[\"如果创建Servlet比较耗时的话，那么第一个访问的人等待的时间就比较长，用户的体验就比较差（注意：只会影响第一个访问的人而已，其实问题也不是很大），可以同设置，将Servlet的创建放到服务器启动的时候来创建。\",\"通过修改@WebServlet注解中loadOnStartup的值来改变Servlet对象的创建时机：\",\"取值负整数:第一次访问时创建Servlet对象\",\"0或正整数:服务器启动时创建Servlet对象，数字越小优先级越高\"]},\"2795\":{\"h\":\"1.2 线程安全问题\",\"t\":[\"Servlet的init方法，只执行一次，说明一个Servlet在内存中只存在一个对象，Servlet是单例的，也就是说多个用户同时访问时，可能存在线程安全问题。\",\"解决：尽量不要在Servlet中定义成员变量。即使定义了成员变量，也不要修改值\"]},\"2796\":{\"h\":\"2. 阶段2：初始化\",\"t\":[\"在Servlet实例化之后，容器将自动调用Servlet的init()方法初始化这个对象，完成一些如加载配置文件、创建连接等初始化的工作。该方法只调用一次。\"]},\"2797\":{\"h\":\"3. 阶段3：请求处理\",\"t\":[\"每次请求Servlet时，Servlet容器都会调用Servlet的service()方法对请求进行处理\"]},\"2798\":{\"h\":\"4. 阶段4：服务终止\",\"t\":[\"当需要释放内存或者容器关闭时，容器就会调用Servlet实例的destroy()方法完成资源的释放。在destroy()方法调用之后，容器会释放这个Servlet实例，该实例随后会被Java的垃圾收集器所回收。\"]},\"2799\":{\"h\":\"Ⅱ. Servlet 方法\",\"t\":[\"Servlet接口一共有五个方法，其中init、service、destroy会在生命周期中被调用。\",\"public interface Servlet { void init(ServletConfig var1) throws ServletException; ServletConfig getServletConfig(); void service(ServletRequest var1, ServletResponse var2) throws ServletException, IOException; String getServletInfo(); void destroy(); } \"]},\"2800\":{\"h\":\"1. init：初始化\",\"t\":[\"初始化方法，默认在Servlet被第一次访问时调用，只执行一次。\",\"可以通过将@WebServlet注解中的loadOnStartup修改为0或整数，将该方法的调用时机改为服务器启动时调用。\",\"void init(ServletConfig config) ================================== @WebServlet(urlPatterns=\\\"/demo1\\\",loadOnStartup=1) //修改调用时机 public void init(ServletConfig config) throws ServletException { //通过控制台观察代码块运行结果可知：该方法仅启动了一次 System.out.println(\\\"init...\\\"); } \"]},\"2801\":{\"h\":\"2. service：服务代码\",\"t\":[\"这是Servlet的最核心方法，业务逻辑就是写在该方法内的。\",\"每次该servlet的url被访问，该方法都会执行一次，开发时，主要关注该方法。该方法会获取访问时的请求信息，并会将服务的响应返回给请求处（见后续章节：请求与响应）\",\"void service(ServletRequest var1, ServletResponse var2); ======================================================= public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException { //观察可知：每次访问(刷新)配置的url，该方法中的代码块都会执行一次 System.out.println(\\\"servlet hello world~\\\"); } \"]},\"2802\":{\"h\":\"3. destroy：销毁方法\",\"t\":[\"内存释放或者服务器关闭的时候，Servlet对象会被销毁，调用。\",\"由于Servlet对象指挥创建一次，因此也只能销毁一次，所以该方法只会执行一次。\",\"注意：只有服务器正常关闭时，才会执行destroy方法。\",\"void destroy(); ======================== public void destroy() { //通过控制台观察代码块运行结果可知：该方法仅运行了一次 System.out.println(\\\"destroy...\\\"); } \"]},\"2803\":{\"h\":\"4. getServletInfo：获取Servlet信息\",\"t\":[\"该方法用来返回Servlet的相关信息，如版本、作者等。\",\"没有什么太大的用处，一般我们返回一个空字符串即可\",\"String getServletInfo(); ============================ public String getServletInfo() { return \\\"\\\"; } \"]},\"2804\":{\"h\":\"5. getServletConfig：获取ServletConfig对象\",\"t\":[\"ServletConfig对象，在init方法的参数中有，而Tomcat Web服务器在创建Servlet对象的时候会调用init方法，必定会传入一个ServletConfig对象，我们只需要将服务器传过来的ServletConfig进行返回即可。\",\"ServletConfig getServletConfig(); ======================================= public class ServletDemo1 implements Servlet{ private ServletConfig servletConfig; public void init(ServletConfig config) throws ServletException{ this.servletConfig = config; System.out.println(\\\"init...\\\"); } public ServletConfig getServletConfig(){ return servletConfig; } } \"]},\"2805\":{\"h\":\"Ⅲ. Servlet 体系结构\",\"t\":[\"要想编写一个Servlet就必须要实现Servlet接口，重写接口中的5个方法，虽然已经能完成要求，但是编写起来还是比较麻烦的，因为我们更关注的其实只有service方法。\"]},\"2806\":{\"h\":\"1. Servlet的体系结构（继承结构）\",\"t\":[\"Servlet接口有一个实现类：\",\"GenericServlet抽象类。该类也有一个实现类： \",\"HttpServlet抽象类\",\"3-3-1\"]},\"2807\":{\"h\":\"2. GenericServlet抽象类\",\"t\":[\"GenericServlet将Servlet接口中其他的方法做了默认空实现，只将service()方法作为抽象。\",\"因此：将来定义Servlet类时，可以继承GenericServlet，仅实现service()方法即可\"]},\"2808\":{\"h\":\"3. HttpServlet抽象类\",\"t\":[\"在JavaWeb开发中，我们在Servlet中写的代码其实就是对http协议请求的一种响应。即接收get/post等一些列类型的请求，并进行一些操作。而在每次操作前，首要任务就是判断请求类型，每个servlet的实现类都需要进行判断，非常繁琐，因此有了HttpServlet。\",\"HttpServlet是对http协议的一种封装，简化操作，该类是没有抽象方法的抽象类。并提供了真的不同请求方式的请求方法。\"]},\"2809\":{\"h\":\"4. Servlet类的选择\",\"t\":[\"因为我们将来开发B/S架构的web项目，都是针对HTTP协议，所以我们自定义Servlet,会通过继承HttpServlet\"]},\"2810\":{\"h\":\"5. HttpServlet的使用\",\"t\":[\"注意1：这里是继承HttpServlet 类，而不是实现，HttpServlet是抽象类，不是接口。\",\"注意2：HttpServlet类中没有抽象方法，因此只需要按需重写方法即可。\"]},\"2811\":{\"h\":\"5.1 请求方式\",\"t\":[\"请求方式一共有7种，HttpServlet中也对每种请求方式做了定义。\",\"实际开发中，根据需求，重写对应请求方式的doXxx方法，一般doPost和doGet是要被重写的。\",\"private static final String METHOD_DELETE = \\\"DELETE\\\"; private static final String METHOD_HEAD = \\\"HEAD\\\"; private static final String METHOD_GET = \\\"GET\\\"; private static final String METHOD_OPTIONS = \\\"OPTIONS\\\"; private static final String METHOD_POST = \\\"POST\\\"; private static final String METHOD_PUT = \\\"PUT\\\"; private static final String METHOD_TRACE = \\\"TRACE\\\"; \"]},\"2812\":{\"h\":\"5.2 编写格式\",\"t\":[\"仅考虑重写doGet和doPost方法。\",\"@WebServlet(\\\"/demo2\\\") public class ServletDemo2 extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { //super.doGet(req, resp); System.out.println(\\\"GET 请求方式的处理逻辑\\\"); } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { //super.doPost(req, resp); System.out.println(\\\"Post 请求方式的处理逻辑\\\"); } } \",\"如上方的代码。\",\"通过浏览器地址栏请求该Servlet，doGet方法被调用了。\",\"通过表达的post方式请求该Servlet，doPost方法被调用了。\"]},\"2813\":{\"h\":\"6. HttpServlet的原理\",\"t\":[\"HttpServlet中为什么要根据请求方式的不同，调用不同的方法? 如何调用的?\"]},\"2814\":{\"h\":\"6.1 手动实现HttpServlet的逻辑\",\"t\":[\"为了验证第一个问题，这里来通过继承原始的Servlet类，来手动实现server方法\",\"@WebServlet(\\\"/demo\\\") public class MyServlet extends HttpServlet { @Override public void service(ServletRequest request, ServletResponse response) throws ServletException, IOException { HttpServletRequest request = (HttpServletRequest)req; //1. 获取请求方式 String method = request.getMethod(); //2. 判断 if(\\\"GET\\\".equals(method)){ // get方式的处理逻辑 doGet(req,res); }else if(\\\"POST\\\".equals(method)){ // post方式的处理逻辑 doPost(req,res); } } protected void doPost(ServletRequest req, ServletResponse res) { } protected void doGet(ServletRequest req, ServletResponse res) { } ...//其它四个重写的接口方法暂不考虑 } \",\"有了MyServlet这个指定的类后，以后我们再编写Servlet类的时候，只需要继承MyHttpServlet，重写父类中的doGet和doPost方法，就可以用来处理GET和POST请求的业务逻辑。\",\"将来页面发送的是GET请求，则会进入到doGet方法中进行执行，如果是POST请求，则进入到doPost方法。这样代码在编写的时候就相对来说更加简单快捷。\",\"而HttpServlet的原理也是如此。\"]},\"2815\":{\"h\":\"6.2 意义\",\"t\":[\"在JavaWeb开发中，我们在Servlet中写的代码其实就是对http协议请求的一种响应。\",\"接收get/post等一些列类型的请求，并进行一些操作。而在每次操作前，首要任务就是判断请求类型，每个servlet的实现类都需要进行判断，非常繁琐，因此有了HttpServlet。\",\"HttpServlet是对http协议的一种封装，简化操作，该类是没有抽象方法的抽象类。并提供了真的不同请求方式的请求方法。\"]},\"2816\":{\"h\":\"3-4. 路由\",\"t\":[\"提示\",\"采用注解的方式配置路由。\",\"也可以采用XML，不过一般不这么用。\"]},\"2817\":{\"h\":\"Ⅰ. 注解配置路由\"},\"2818\":{\"h\":\"1. urlPattern\",\"t\":[\"配置路由用的是@WebServlet注解，在该注解中，value和urlPatterns是等效的，都可以用来指定url。且他们都是数组，因此一个Servlet可以配置多个urlPattern。\"]},\"2819\":{\"h\":\"2. 语法\",\"t\":[\"在Servlet实现类的@WebServlet注解内。\",\"@WebServlet(urlPatterns=\\\"/资源路径\\\"); //只有一个属性可以省略urlPatterns @WebServlet(\\\"资源路径\\\"); //不写属性就相当于是value @WebServlet(\\\"/demo\\\"); //必须要加/,不能直接demo public class ServletDemo implements Servlet {...} \"]},\"2820\":{\"h\":\"3. 配置项\",\"t\":[\"WebServer有很多配置项，而且除了路由，所有配置项都有默认值，且采用默认值即可。因此只需要配置一下路由。\",\"@Target({ElementType.TYPE}) @Retention(RetentionPolicy.RUNTIME) @Documented public @interface WebServlet { String name() default \\\"\\\";//相当于<Servlet-name> String[] value() default {};//代表urlPatterns()属性配置 String[] urlPatterns() default {};//相当于<url-pattern> int loadOnStartup() default -1;//相当于<load-on-startup> } \"]},\"2821\":{\"h\":\"Ⅱ. 匹配模式\",\"t\":[\"urlPattern一共有四种匹配模式：精准、目录、扩展名、任意。\"]},\"2822\":{\"h\":\"1. 精确匹配\",\"t\":[\"配置的路径和访问的路径是一样的。\",\"3-4-1\",\"@WebServlet(urlPatterns = \\\"/user/select\\\") //访问路径：http://localhost:8080/web-demo/user/select \"]},\"2823\":{\"h\":\"2. 目录匹配\",\"t\":[\"3-4-2\",\"/* 代表的是零或多个层级访问目录。\",\"只要是/*前面的能匹配到，后面是什么都无所谓。\",\"@WebServlet(urlPatterns = \\\"/user/*\\\") //访问路径http://localhost:8080/web-demo/user/任意 \"]},\"2824\":{\"h\":\"3. 扩展名匹配\",\"t\":[\"该匹配规则和其他三个是不同的，它只识别扩展名。\",\"3-4-3\",\"如果路径配置的不是扩展名，那么在路径的前面就必须要加/否则会报错\",\"如果路径配置的是*.do,那么在*.do的前面不能加/,否则会报错\",\"@WebServlet(urlPatterns = \\\"*.do\\\") //访问路径http://localhost:8080/web-demo/任意.do \"]},\"2825\":{\"h\":\"4. 任意匹配\",\"t\":[\"3-4-3\",\"@WebServlet(urlPatterns = \\\"/*\\\") //访问路径http://localhost:8080/demo-web/任意 \",\"defaultServlet：Tomcat中有一个DefaultServlet，当其他的url-pattern都匹配不上时都会走这个Servlet\",\"/ 与 /*：/ 与 /* 都表示任意匹配。 /*的优先级 > /\",\"使用 / 会覆盖掉defaultServlet。\",\"defaultServlet的覆盖：如果项目中的Servlet配置了 \\\"/\\\",会覆盖掉tomcat中的DefaultServlet \",\"DefaultServlet是用来处理静态资源，如果配置了\\\"/\\\"会把默认的覆盖掉，就会引发请求静态资源的时候没有走默认的而是走了自定义的Servlet类，最终导致静态资源不能被访问\"]},\"2826\":{\"h\":\"5. 优先级\",\"t\":[\"精确匹配 > 目录匹配> 扩展名匹配 > /* > /\"]},\"2827\":{\"h\":\"Ⅲ. XML配置路由\",\"t\":[\"提示\",\"略，用注解就可以了。\"]},\"2828\":{\"h\":\"3-5. 请求与响应\"},\"2829\":{\"h\":\"Ⅰ. 请求与响应概述\"},\"2830\":{\"h\":\"介绍\",\"t\":[\"Request是请求对象，Response是响应对象。\",\"这两个对象都是Servlet接口中，service方法的参数。request和response对象是由服务器创建的，我们来使用它们。request对象是来获取请求消息，response对象是来设置响应消息\"]},\"2831\":{\"h\":\"1. 完整的请求处理过程\",\"t\":[\"3-5-1\",\"如下：这只是基本的处理过程，省略很多非核心步骤，如：过滤\",\"前端：客户端发起请求\",\"Tomcat接收到请求： \",\"①tomcat服务器会根据请求url中的资源路径，创建对应的Servlet实现类的对象。\",\"②tomcat服务器,会创建request和response对象，request对象中封装请求消息数据。\",\"③tomcat将request和response两个对象传递给service方法，并调用service方法。\",\"service方法被调用执行 \",\"在service方法中，程序员可以通过request对象获取请求消息数据\",\"也可以通过response对象设置相应消息数据\",\"Tomcat从response对象中拿到程序中设置的响应消息数据 \",\"tomcat向之前发起请求的浏览器返回响应\",\"前端：浏览器接收响应\"]},\"2832\":{\"h\":\"2. request的作用：获取请求数据\",\"t\":[\"request对象是用来封装请求数据的对象\",\"浏览器会发送HTTP请求到后台服务器[ Tomcat ] HTTP的请求中会包含很多请求数据[ 请求行+请求头+请求体 ]\",\"后台服务器[ Tomcat ]会对HTTP请求中的数据进行解析并把解析结果存入到一个对象中\",\"所存入的对象即为request对象，所以我们可以从request对象中获取请求的相关参数\",\"获取到数据后就可以继续后续的业务，比如获取用户名和密码就可以实现登录操作的相关业务\"]},\"2833\":{\"h\":\"3. response的作用：设置响应数据\",\"t\":[\"response对象是用来封装响应数据的对象\",\"业务处理完后，后台就需要给前端返回业务处理的结果即响应数据\",\"把响应数据封装到response对象中\",\"后台服务器[ Tomcat ]会解析response对象,按照[ 响应行+响应头+响应体 ]格式拼接结果\",\"浏览器最终解析结果，把内容展示在浏览器给用户浏览\"]},\"2834\":{\"h\":\"Ⅱ. Request继承体系\"},\"2835\":{\"h\":\"介绍\",\"t\":[\"当我们的Servlet类实现的是Servlet接口的时候，service方法中的参数是ServletRequest和ServletResponse\",\"当我们的Servlet类继承的是HttpServlet类的时候，doGet和doPost方法中的参数就变成HttpServletRequest和HttpServletReponse\",\"和Servlet类似，Request和Response也存在自己的继承体系。\"]},\"2836\":{\"h\":\"1.Request的继承体系\",\"t\":[\"3-5-2\",\"ServletRequest和HttpServletRequest都是Java提供的，ServletRequest和HttpServletRequest是继承关系，并且两个都是接口，接口是无法创建对象。我们真正使用的类是RequestFacade类。\"]},\"2837\":{\"h\":\"2. RequestFacade\",\"t\":[\"真正使用的Request对象的类是：RequestFacade（根据多态显示的类是HttpServletRequest）\",\"该类实现了HttpServletRequest接口，也间接实现了ServletRequest接口。\",\"Servlet类中的service方法、doGet方法或者是doPost方法最终都是由Web服务器- [ Tomcat ]来调用的，所以Tomcat提供了方法参数接口的具体实现类，并完成了对象的创建\",\"要想了解RequestFacade中都提供了哪些方法，我们可以直接查看JavaEE的API文档中关于ServletRequest和HttpServletRequest的接口文档，因为RequestFacade实现了其接口就需要重写接口中的方法\",\"//doGet是HttpServlet中的Service自动调用的方法，参数跟Service一样 protected void doGet(HttpServletRequest req, HttpServletResponse resp) \"]},\"2838\":{\"h\":\"3. 总结\",\"t\":[\"Request的继承体系为ServletRequest-->HttpServletRequest-->RequestFacade\",\"Tomcat需要解析请求数据，封装为request对象,并且创建request对象传递到service方法\",\"使用request对象，可以查阅JavaEE API文档的HttpServletRequest接口中方法说明\"]},\"2839\":{\"h\":\"Ⅲ. Response继承体系\",\"t\":[\"Reponse的继承体系和Request的继承体系也非常相似\"]},\"2840\":{\"h\":\"1. 继承关系\",\"t\":[\"3-5-3\"]},\"2841\":{\"h\":\"2. ResponseFacade\",\"t\":[\"和RequestFacade一样，只是Request变成了Response\"]},\"2842\":{\"h\":\"3-6. Request\"},\"2843\":{\"h\":\"Ⅰ. 获取请求行\"},\"2844\":{\"h\":\"请求行\",\"t\":[\"请求行包含三块内容，分别是请求方式、请求资源路径、HTTP协议及版本\",\"对于这三部分内容，request对象都提供了对应的API方法来获取\",\"3-6-1\"]},\"2845\":{\"h\":\"1. 常用请求方法\",\"t\":[\"这些方法都是返回String类型(或StringBuffer类型)的getXxx方法。\",\"getMethod：获取请求方式 \",\"get请求就返回：GET；\",\"getContextPath：获取虚拟目录 \",\"即项目的访问路径，该路径是通过Tomcat的Deployment->Application context配置的。\",\"如果配置的是 / ，那么该方法将什么都不返回。\",\"getRequestURL：获取URL，统一资源定位符，完整的网址\",\"getRequestURI：获取URI，统一资源标识符，基础网址后面的部分。\",\"getServletPath()：获取Servlet路径，Servlet类中定义的路由\",\"getProtocol()： 获取协议及版本，如：HTTP/1.1\",\"getQueryString：获取get的请求参数，url？号后面的键值对\",\"getRemoteAddr()：获取客户机的IP地址\"]},\"2846\":{\"h\":\"2. 使用测试\",\"t\":[\"启动服务器，访问：http://localhost:8080/demo3?uname=sgugo\",\"@WebServlet(name = \\\"ServletDemo3\\\", value = \\\"/demo3\\\") public class ServletDemo3 extends HttpServlet { @Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { String method = request.getMethod(); System.out.println(method); //GET String contextPath = request.getContextPath(); System.out.println(contextPath); //配置的是 / 什么都不返回 StringBuffer requestURL = request.getRequestURL(); System.out.println(requestURL); //http://localhost:8080/demo3 String requestURI = request.getRequestURI(); System.out.println(requestURI); // /demo3 String servletPath = request.getServletPath(); System.out.println(servletPath); // /demo3 String protocol = request.getProtocol(); System.out.println(protocol); // HTTP/1.1 String queryString = request.getQueryString(); System.out.println(queryString); // uname=sgugo String ip = request.getRemoteAddr(); System.out.println(ip); // 0:0:0:0:0:0:0:1 } @Override protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { } } \"]},\"2847\":{\"h\":\"Ⅱ. 获取请求头\",\"t\":[\"HTTP请求头的数据是键值对的形式key：value\",\"可以根据请求头，来获取对应的值。\"]},\"2848\":{\"h\":\"1. getHeader：获取请求头的值\",\"t\":[\"String getHeader(String name); \"]},\"2849\":{\"h\":\"2. 使用测试\",\"t\":[\"protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { String host = request.getHeader(\\\"host\\\"); String accept = request.getHeader(\\\"accept\\\"); System.out.println(host); // localhost:8080 System.out.println(accept); //text/html,application/xhtml+xml,... } \"]},\"2850\":{\"h\":\"3. 获取所有请求头的名称\",\"t\":[\"可以直接进行iterate遍历getHeaderNames方法的结果，获取所有的请求头。\",\"不常用，因为请求头的名字都是固定的，没必要通过这个方法获取，多走这一步。\",\"Enumeration<String> getHeaderNames(); ============================================= protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { Enumeration<String> headers = request.getHeaderNames(); //循环遍历获取打印请求头 while(headers.hasMoreElements()) { System.out.println(headers.nextElement()); } } \",\"请求结果如下：\",\"host\",\"connection\",\"cache-control\",\"sec-ch-ua\",\"sec-ch-ua-mobile\",\"sec-ch-ua-platform\",\"upgrade-insecure-requests\",\"user-agent\",\"accept\",\"sec-fetch-site\",\"sec-fetch-mode\",\"sec-fetch-user\",\"sec-fetch-dest\",\"accept-encoding\",\"accept-language\",\"cookie\"]},\"2851\":{\"h\":\"Ⅲ. 获取请求体\"},\"2852\":{\"h\":\"1. 请求体\",\"t\":[\"浏览器在发送GET请求的时候是没有请求体的，所以需要把请求方式变更为POST，请求体中的数据格式如下:\",\"3-6-2\"]},\"2853\":{\"h\":\"2. 获取请求体的方式\",\"t\":[\"对于请求体中的数据，Request对象提供了如下两种方式来获取其中的数据。\",\"都是先获取流对象，再从流对象中拿数据（读取流）。\"]},\"2854\":{\"h\":\"2.1 获取字节输入流\",\"t\":[\"如果前端发送的是字节数据，比如传递的是文件数据，则使用该方法\",\"ServletInputStream getInputStream() \"]},\"2855\":{\"h\":\"2.2 获取字符输入流\",\"t\":[\"如果前端发送的是纯文本数据，则使用该方法\",\"BufferedReader getReader() \"]},\"2856\":{\"h\":\"3. 使用测试\"},\"2857\":{\"h\":\"3.1 前端表单\",\"t\":[\"//file：index.html <form action=\\\"/demo3\\\" method=\\\"post\\\"> <input type=\\\"text\\\" name=\\\"uname\\\"> <input type=\\\"password\\\" name=\\\"pwd\\\"> <input type=\\\"submit\\\"> </form> \"]},\"2858\":{\"h\":\"3.2 Servlet\",\"t\":[\"protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { //1. 获取字符输入流 BufferedReader br = request.getReader(); //2. 读取数据 String line = br.readLine(); //每读一行就是一个请求键值对 System.out.println(line); //uname=Aaron&pwd=12354 } \"]},\"2859\":{\"h\":\"4. 注意事项\",\"t\":[\"BufferedReader流是通过request对象来获取的，当请求完成后request对象就会被销毁，request对象被销毁后，BufferedReader流就会自动关闭，所以此处就不需要手动关闭流了。\"]},\"2860\":{\"h\":\"Ⅳ. 请求参数\",\"t\":[\"请求参数的处理方式\",\"get方式： getQueryString()\",\"post方式：getReader();\"]},\"2861\":{\"h\":\"1. 需求&问题\",\"t\":[\"一个Servlet类中一般都要定义doGet方法和doPost方法。\",\"假如，某个Servlet实现类，既可以使用Get方法访问，又可以使用post方法访问，且两种方法方式的代码逻辑都是一样的。此时我们需要分别在doGet方法和doPost方法中，写两份几乎一样的代码，仅获取参数的代码不同。\",\"问题：这种情况很常见，如果都写两份代码，太冗余了。\"]},\"2862\":{\"h\":\"2. 解决方案\",\"t\":[\"逻辑代码只写在doGet方法中，并在方法中判断请求方式是get还是post，根据请求方式的不通，调用对应的方法来获取参数。\",\"而在doPost方法中，只需要去掉用doGet方法即可，如下：\",\"@WebServlet(\\\"/req1\\\") public class RequestDemo1 extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { String method = req.getMethod(); //获取请求方式 String params = \\\"\\\";//获取请求参数 if(\\\"GET\\\".equals(method)){ params = req.getQueryString(); }else if(\\\"POST\\\".equals(method)){ BufferedReader reader = req.getReader(); params = reader.readLine(); } ...//后续逻辑处理 } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { this.doGet(req,resp);//调用get方法，并传入参数 } } \"]},\"2863\":{\"h\":\"3. 方案优化\",\"t\":[\"每个servlet类都需要进行判断，还是有点冗余\",\"Request对象内部提供了更加强大的方法，解决了上述问题，不用再进行判断，且request提供的方法功能更强大。以后只需要调用request提供的方法即可，\"]},\"2864\":{\"h\":\"Ⅴ. Request参数处理\"},\"2865\":{\"h\":\"1. 底层原理\"},\"2866\":{\"h\":\"1.1 根据不同的请求方式获取请求参数\",\"t\":[\"获取的内容如下:\",\"3-6-3\"]},\"2867\":{\"h\":\"1.2 把获取到的内容进行分割\",\"t\":[\"内容如下:\",\"3-6-4\"]},\"2868\":{\"h\":\"1.3 把分割后端数据，存入到一个Map集合中\",\"t\":[\"注意：请求参数的键都是字符串，值也是字符串，但可能有多个，所以Map的值的类型为String数组。\",\"3-6-5\"]},\"2869\":{\"h\":\"2. 相关方法\",\"t\":[\"基于上述理论，request对象为我们提供了如下方法\",\"//getParameterMap：获取所有参数Map集合 Map<String,String[]> getParameterMap() //getParameterValues：根据名称获取参数值（数组），如复选框 String[] getParameterValues(String name) //getParameter：根据名称获取参数值(单个值)【常用】 String getParameter(String name) //getParameterNames：获取所有请求的参数名称 Enumeration<String> getParameterNames() \"]},\"2870\":{\"h\":\"3. 示例\"},\"2871\":{\"h\":\"3.1 前端代码\",\"t\":[\"一个form表单，其中的method可以选择get和post分别进行测试\",\"<form action=\\\"/request-demo/req2\\\" method=\\\"get\\\"> <input type=\\\"text\\\" name=\\\"username\\\"><br> <input type=\\\"password\\\" name=\\\"password\\\"><br> <input type=\\\"checkbox\\\" name=\\\"hobby\\\" value=\\\"1\\\"> 游泳 <input type=\\\"checkbox\\\" name=\\\"hobby\\\" value=\\\"2\\\"> 爬山 <br> <input type=\\\"submit\\\"> </form> \"]},\"2872\":{\"h\":\"3.2 Servlet\",\"t\":[\"@WebServlet(\\\"/req2\\\") public class RequestDemo2 extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { //1. 获取所有参数的Map集合 Map<String, String[]> map = req.getParameterMap(); for (String key : map.keySet()) { System.out.print(key+\\\":\\\");// username:zhangsan lisi String[] values = map.get(key);//获取值 for (String value : values) { System.out.print(value + \\\" \\\"); } System.out.println(); } //2. 根据key获取参数值，数组 String[] hobbies = req.getParameterValues(\\\"hobby\\\"); for (String hobby : hobbies) { System.out.println(hobby); } //3. 根据key 获取单个参数值 String username = req.getParameter(\\\"username\\\"); String password = req.getParameter(\\\"password\\\"); System.out.println(username); System.out.println(password); } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { this.doGet(req,resp); //直接转发 } } \"]},\"2873\":{\"h\":\"4. 总结\",\"t\":[\"request.getParameter()方法使用的频率会比较高\",\"以后再写代码的时候，就只需要按照如下格式来编写:\",\"public class RequestDemo1 extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { //采用request提供的获取请求参数的通用方式来获取请求参数 //编写其他的业务代码... } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { this.doGet(req,resp); } } \"]},\"2874\":{\"h\":\"Ⅵ. 乱码问题\",\"t\":[\"不管是GET还是POST请求，在发送的请求参数中如果有中文，在后台接收的时候，都会出现中文乱码的问题\",\"提示\",\"注：当前版本的Tomcat已经解决了GET方式的乱码问题，只需手动解决POST乱码问题即可。\"]},\"2875\":{\"h\":\"控制台乱码\",\"t\":[\"注意：在测试乱码问题的代码时，一定要先处理控制台乱码，不然会干扰测试结果。如下图位置，添加：-Dfile.encoding=UTF-8\",\"3-6-6\"]},\"2876\":{\"h\":\"1. 乱码原因\",\"t\":[\"POST的请求参数是通过request的getReader()来获取流中的数据\",\"TOMCAT在获取流的时候采用的编码是ISO-8859-1\",\"ISO-8859-1编码是不支持中文的，所以会出现乱码\"]},\"2877\":{\"h\":\"2. 解决方案\",\"t\":[\"页面设置的编码格式为UTF-8\",\"把TOMCAT在获取流数据之前的编码设置为UTF-8\",\"通过request.setCharacterEncoding(\\\"UTF-8\\\")设置编码,UTF-8也可以写成小写\"]},\"2878\":{\"h\":\"3. 代码\",\"t\":[\"//request对象在获取请求参数前先修改编码 request.setCharacterEncoding(\\\"UTF-8\\\"); request.getParameter(\\\"uname\\\");//获取请求参数 \"]},\"2879\":{\"h\":\"4. 说明\",\"t\":[\"POST请求中文乱码的问题就已经解决，但是这种方案不适用于GET请求. GET请求获取请求参数的方式是request.getQueryString() POST请求获取请求参数的方式是request.getReader()\",\"不过get请求的乱码Tomcat已解决了。\"]},\"2880\":{\"h\":\"5. 总结\",\"t\":[\"一行代码解决所有乱码问题\",\"request.setCharacterEncoding(\\\"utf-8\\\"); \"]},\"2881\":{\"h\":\"3-7. Response\"},\"2882\":{\"h\":\"Ⅰ. Response\",\"t\":[\"Response对象是用来做HTTP响应的，共分为三个部分：响应行、响应头、响应体。\",\"Response对象提供了不同的方法还出了这三种响应内容。\"]},\"2883\":{\"h\":\"1. 响应行\",\"t\":[\"3-7-1\",\"对于响应行，比较常用的是设置响应状态码\",\"void setStatus(int sc); \"]},\"2884\":{\"h\":\"2. 响应头\",\"t\":[\"3-7-1\",\"void setHeader(String name,String value); \"]},\"2885\":{\"h\":\"3. 对于响应体，是通过字符、字节输出流的方式往浏览器写，\",\"t\":[\"获取字符输出流\",\"PrintWriter getWriter(); \",\"获取字节输出流\",\"ServletOutputStream getOutputStream(); \"]},\"2886\":{\"h\":\"Ⅱ. 响应字符数据\",\"t\":[\"Response响应字符数据\"]},\"2887\":{\"h\":\"1. 步骤\",\"t\":[\"要想将字符数据写回到浏览器，我们需要两个步骤:\",\"通过Response对象获取字符输出流： PrintWriter writer = response.getWriter();\",\"通过字符输出流写数据: writer.write(\\\"aaa\\\");\"]},\"2888\":{\"h\":\"2. 示例：向浏览器响应字符hello\",\"t\":[\"浏览器访问：http://localhost:8080/demo1，浏览器页面上显示：hello\",\"@WebServlet(\\\"/demo1\\\") public class ResponseDemo1 extends HttpServlet { @Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { PrintWriter writer = response.getWriter(); writer.write(\\\"hello\\\"); } } \"]},\"2889\":{\"h\":\"3. 设置响应的数据类型\",\"t\":[\"响应的字符数据，默认是按照text解析的，也可以通过修改响应头，改为其他方式解析。\",\"response.setContentType(\\\"text/html;charset=utf-8\\\");//直接修改ContextType response.setHeader(\\\"context-type\\\",\\\"text/html\\\");//修改响应头的方式修改响应类型 \"]},\"2890\":{\"h\":\"4. 示例：向浏览器响应html标签\",\"t\":[\"浏览器访问：http://localhost:8080/demo1，浏览器页面上显示：被`h1`渲染后的hello\",\"response.setContentType(\\\"text/html\\\"); PrintWriter writer = response.getWriter(); writer.write(\\\"<h1>hello<h1>\\\"); \"]},\"2891\":{\"h\":\"5. 注意\",\"t\":[\"一次请求响应结束后，response对象就会被销毁掉，所以不要手动关闭流。\"]},\"2892\":{\"h\":\"Ⅲ. 响应字节数据\"},\"2893\":{\"h\":\"1. 实现步骤\",\"t\":[\"要想将字节数据写回到浏览器，我们需要两个步骤:\",\"通过Response对象获取字节输出流：ServletOutputStream outputStream = response.getOutputStream();\",\"通过字节输出流写数据: outputStream.write(字节数据);\"]},\"2894\":{\"h\":\"2. 示例：向浏览器响应一张图片\",\"t\":[\"先从硬盘读取一个图片文件，然后获取字节输出流，进行字节流对拷。\",\"//1. 读取文件 FileInputStream fis = new FileInputStream(\\\"d://a.jpg\\\"); //2. 获取response字节输出流 ServletOutputStream os = response.getOutputStream(); //3. 完成流的copy byte[] buff = new byte[1024]; int len = 0; while ((len = fis.read(buff))!= -1){ os.write(buff,0,len); } fis.close(); \"]},\"2895\":{\"h\":\"第三方工具对拷\",\"t\":[\"上述代码中，对于流的copy的代码还是比较复杂的，所以我们可以使用别人提供好的方法来简化代码的开发。\",\"如：commons-io\",\"//1. 读取文件 FileInputStream fis = new FileInputStream(\\\"d://a.jpg\\\"); //2. 获取response字节输出流 ServletOutputStream os = response.getOutputStream(); IOUtils.copy(fis,os); fis.close(); \"]},\"2896\":{\"h\":\"3. 示例：以字节的形式输出字符\",\"t\":[\"//1.设置编码 response.setContentType(\\\"text/html;charset=utf-8\\\"); //2.获取字节输出流 ServletOutputStream sos = response.getOutputStream(); //3.用直接流输出字符(并设置好编码) sos.write(\\\"你好\\\".getBytes(\\\"utf-8\\\")); \"]},\"2897\":{\"h\":\"3-8. 转发与重定向\"},\"2898\":{\"h\":\"Ⅰ. Request 请求转发\"},\"2899\":{\"h\":\"1. 介绍\",\"t\":[\"浏览器发送请求给服务器，服务器中对应的资源A接收到请求\",\"资源A处理完请求后将请求发给资源B\",\"资源B处理完后将结果响应给浏览器\",\"请求从资源A到资源B的过程就叫请求转发\",\"3-8-1\"]},\"2900\":{\"h\":\"2. 请求转发的实现方式\",\"t\":[\"采用request对象的getRequestDispatch方法获取请求转发器对象，然后使用请求转发器对象的forward方法进行转发。\",\"RequestDispatcher getRequestDispatcher(String path) forward(ServletRequest request, ServletResponse response) ======================================================== requset.getRequestDispatcher(\\\"资源B路径\\\").forward(req,resp); \"]},\"2901\":{\"h\":\"3. 转发时共享数据\",\"t\":[\"在转发请求的同时，共享一些数据。\",\"域对象：一个有作用范围的对象，可以在范围内共享数据。\",\"request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据\"]},\"2902\":{\"h\":\"相关方法：\",\"t\":[\"转发时，可以进行数据的共享，需要使用request对象提供的三个方法\",\"//以键值对的形式存储数据到request域[范围,数据是存储在request对象]中 void setAttribute(String name,Object o); //根据key获取值 Object getAttribute(String name); //根据key删除该键值对 void removeAttribute(String name); \"]},\"2903\":{\"h\":\"4. 示例：进行请求转发同时共享数据\",\"t\":[\"在浏览器中输入：http://localhost:8080/demo5\",\"执行结果：控制台打印：demo5 demo6，hello，\",\"结论：/demo5和/demo6的doGet方法都被执行了，且共享数据成功。\",\"@WebServlet(\\\"/demo5\\\") public class ServletDemo5 extends HttpServlet { @Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { System.out.println(\\\"Demo5\\\"); //存储数据 request.setAttribute(\\\"msg\\\",\\\"hello\\\"); //进行转发 request.getRequestDispatcher(\\\"/demo6\\\").forward(request,response); } } //ServletDemo6 @WebServlet(\\\"/demo6\\\") public class ServletDemo6 extends HttpServlet { @Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { System.out.println(\\\"demo6\\\"); //获取转发时发送的共享数据 Object msg = request.getAttribute(\\\"msg\\\"); System.out.println(msg); } } \"]},\"2904\":{\"h\":\"5. 请求转发的特点\",\"t\":[\"浏览器地址栏路径不发生变化：虽然后台从/demo5转发到/demo6,但是浏览器的地址一直是/demo5,未发生变化\",\"只能转发到当前服务器的内部资源：不能从一个服务器通过转发访问另一台服务器\",\"一次请求，可以在转发资源间使用request共享数据\"]},\"2905\":{\"h\":\"Ⅱ. Response 重定向\",\"t\":[\"Response重定向(redirect)：一种资源跳转方式。\",\"3-8-2\"]},\"2906\":{\"h\":\"1. 重定向的过程\",\"t\":[\"浏览器发送请求给服务器，服务器中对应的资源A接收到请求\",\"资源A现在无法处理该请求，就会给浏览器响应一个302的状态码+location的一个访问资源B的路径\",\"浏览器接收到响应状态码为302就会重新发送请求到location对应的访问地址去访问资源B\",\"资源B接收到请求后进行处理并最终给浏览器响应结果，这整个过程就叫重定向\"]},\"2907\":{\"h\":\"2. 重定向的实现方式\",\"t\":[\"需要响应对象，调用setStatus方法响应一个302状态码，然后设置location响应头，响应重定向后的访问路径。\",\"response.setStatus(302); response.setHeader(\\\"location\\\",\\\"资源B的访问路径\\\"); //直接进行重定向 response.sendRedirect(\\\"资源访问路径\\\") //相当于把上面两步合成了一步 \"]},\"2908\":{\"h\":\"3. 示例：重定向\",\"t\":[\"向ResponseDemo1类发送请求，ResponseDemo1类将请求转发给ResponseDemo2。\"]},\"2909\":{\"h\":\"3.1 ResponseDemo1\",\"t\":[\"@WebServlet(\\\"/demo1\\\") public class ResponseDemo1 extends HttpServlet { @Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { System.out.println(\\\"ResponseDemo1\\\"); response.setStatus(302);//设置响应状态码 response.setHeader(\\\"Location\\\",\\\"/demo2\\\");//通过响应头进行重定向 } } \"]},\"2910\":{\"h\":\"3.2 ResponseDemo2\",\"t\":[\"@WebServlet(\\\"/demo2\\\") public class ResponseDemo2 extends HttpServlet { @Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { System.out.println(\\\"ResponseDemo2\\\"); } } \"]},\"2911\":{\"h\":\"3.3 测试\",\"t\":[\"浏览器输入：http://localhost:8080/demo2\",\"输出结果：ResponseDemo1、ResponseDemo2\",\"分析：ResponseDemo1、ResponseDemo2两个类都被访问到了，发生了重定向。\"]},\"2912\":{\"h\":\"4. 重定向的特点\",\"t\":[\"浏览器地址栏发生变化：当进行重定向访问的时候，由于是由浏览器发送的两次请求，所以地址会发生变化\",\"可以重定向到任何位置的资源，包括任意其他服务器上的。\",\"两次请求，不能在多个资源使用request共享数据，因为浏览器发送了两次请求，是两个不同的request对象，就无法通过request对象进行共享数据\"]},\"2913\":{\"h\":\"5. redirect与forward的区别\",\"t\":[\"重定向的特点:redirect【浏览器->服务器】 \",\"地址栏发生变化\",\"重定向可以访问其他站点(服务器)的资源\",\"重定向是两次请求。不能使用request对象来共享数据\",\"转发的特点：forward【服务器->服务器】 \",\"转发地址栏路径不变\",\"转发只能访问当前服务器下的资源\",\"转发是一次请求，可以使用request对象来共享数据\"]},\"2914\":{\"h\":\"Ⅲ. 路径问题\"},\"2915\":{\"h\":\"1. 是否要加虚拟路径\",\"t\":[\"浏览器使用: 需要加虚拟目录(项目访问路径) \",\"超链接，从浏览器发送，需要加\",\"表单，从浏览器发送，需要加\",\"重定向，是由浏览器进行跳转，需要加。\",\"服务端使用: 不需要加虚拟目录 \",\"转发，是从服务器内部跳转，不需要加\",\"当虚拟目录设置为 / 时，加不加是一样的。\"]},\"2916\":{\"h\":\"2. 动态获取虚拟路径\",\"t\":[\"在项目代码里写死虚拟路径，不方便维护，可以使用方法动态获取虚拟路径\",\"String contextPath = request.getContextPath(); response.sendRedirect(contextPath+\\\"/demo2\\\"); //使用动态虚拟路径拼接完整路径 \"]},\"2917\":{\"h\":\"3-9. 域对象\"},\"2918\":{\"h\":\"Ⅰ. 域对象\"},\"2919\":{\"h\":\"1. 概念\",\"t\":[\"域对象就是一个有作用范围的对象，可以在范围内共享数据。\",\"JavaWeb中有四大域对象，分别表示四个范围，在范围内数据可以共享。\",\"之所以他们是域对象，原因是他们都内置了map集合，都有setAttribute和getAttribute方法。\"]},\"2920\":{\"h\":\"2. page域对象\",\"t\":[\"该域对象是JSP中的。\",\"作用域是一个页面，不同页面无法共享域中的数据。\",\"//我们在page1.jsp中存值。 pageContext.setAttribute(\\\"name\\\",\\\"123\\\"); //我们在page1.jsp中取值：此时可以取到值 pageContext域：<%=pageContext.getAttribute(\\\"name\\\") %><br> //定义一个page2.jsp，按照相同的方法取值：此时无法取值 pageContext域：<%=pageContext.getAttribute(\\\"name\\\") %><br> \",\"注意：该域对象仅在JSP中有用，对于前后端分离项目，是没有page域对象的。\"]},\"2921\":{\"h\":\"3. Request域对象\",\"t\":[\"Servlet中的Request请求对象（常用HttpServlet），同时也是Request域对象。\",\"作用域是一次请求，请求转发也是可以共享数据的。\"]},\"2922\":{\"h\":\"生命周期\",\"t\":[\"当请求来时创建request对象\",\"当请求结束时，request就销毁。\",\"每次请求都是一个新的request对象。\"]},\"2923\":{\"h\":\"4. Session域对象\",\"t\":[\"在服务器端通过request.getSession()创建Session对象，就可以实现Session域了。\",\"作用域是一次会话，关闭浏览器数据就会丢失，如果会话不中断，所有页面都可以获取session中的数据。\",\"HttpSession session = request.getSession(); \",\"在同一服务器上不同的request请求是会得到唯一的session。\"]},\"2924\":{\"h\":\"生命周期\",\"t\":[\"在第一次调用request.getSession()方法时，服务器会检查是否已经有对应的session，如果没有就在内存中创建一个session并返回。\",\"当一段时间内session没有被使用（默认为30分钟），则服务器会销毁该session。\",\"如果服务器非正常关闭，没有到期的session也会跟着销毁。\",\"如果调用session提供的invalidate()，可以立即销毁session。\",\"浏览器关闭，会话结束，Session也会消失（储存SessionID的Cookie没有了\"]},\"2925\":{\"h\":\"5. Application域对象\",\"t\":[\"在Servlet中有一个ServletContext对象，该对象代表了整个web应用（Application）。 详见：ServletContext。\"]},\"2926\":{\"h\":\"6. 域对象共有的方法\",\"t\":[\"setAttribute(name,value)：存储数据\",\"getAttribute(name)：根据那么获取对应数据值\",\"removeAttribute(name)：根据name删除数据\"]},\"2927\":{\"h\":\"Ⅱ. ServletContext\"},\"2928\":{\"h\":\"1. 概念\",\"t\":[\"ServletContext对象代表了整个web应用，可以和程序的容器(Tomcat)来通信。\",\"该对象会在Tomcat启动时创建。\"]},\"2929\":{\"h\":\"2. 主要功能\",\"t\":[\"获取MIME类型\",\"域对象：共享数据\",\"获取文件的真实（服务器）路径\"]},\"2930\":{\"h\":\"3. 获取ServletContext对象\",\"t\":[\"可以通过以下两种方式获取，这两种方式获取的是同一个对象。\",\"protected void doGet(HttpServletRequest request, HttpServletResponse resp){ ServletContext servletContext = request.getServletContext(); ServletContext servletContext1 = this.getServletContext(); } \",\"通过Request对象获取\",\"ServletContext ServletRequest.getServletContext(); \",\"通过HttpServlet\",\"ServletContext HttpServlet.getServletContext(); \"]},\"2931\":{\"h\":\"4. 获取MIME类型\"},\"2932\":{\"h\":\"4.1 MIME类型\",\"t\":[\"在互联网通信过程中定义的一种文件数据类型\",\"格式为：大类型/小类型\",\"如：text/html(文本/html)； image/jpeg(图片类型/jpeg格式)\"]},\"2933\":{\"h\":\"4.2 底层\",\"t\":[\"在Tomcat服务器的一个配置文件（ tomcat/conf/web.xml）中，记录了所有的文件的扩展名和和mime类型的对应关系。而ServletContext对象是可以直接跟Tomcat通信的，因此可以使用ServletContext获取指定文件的MIME类型（通过扩展名）。\",\"//web.xml:足有4千行代码记录对照关系 ... <mime-mapping> <extension>m4a</extension> <mime-type>audio/mp4</mime-type> </mime-mapping> ... \"]},\"2934\":{\"h\":\"4.3 getMimeType(String file)：获取文件类型\",\"t\":[\"protected void doGet(HttpServletRequest req, HttpServletResponse resp){ ServletContext context = this.getServletContext(); String filename = \\\"a.jpg\\\";//自定义一个文件名用来测试 String mimeType = context.getMimeType(filename); //image/jpeg } \"]},\"2935\":{\"h\":\"4.4 局限性\",\"t\":[\"该方法是通过后缀名获取文件类型的，而后缀名可以随便定义。\",\"因此获取的mime类型并不是很准确，只能做初步的筛选和使用。\"]},\"2936\":{\"h\":\"5. 作为域对象\",\"t\":[\"一个有作用范围的对象，可以在范围内共享数据。\",\"和request对象一样，其方法也一样（域对象都有相同的三个方法）。\"]},\"2937\":{\"h\":\"5.1 域的范围\",\"t\":[\"最大范围：所有用户的所有请求数据，任何地方都可以保存，任何地方都能获取。\",\"可以理解为：全局变量。\",\"注意：由于所有用户都可以创建和使用，且常驻内存，直到服务器关闭，因此要谨慎使用。[ 比如可以储存access_token ]\"]},\"2938\":{\"h\":\"5.2 方法：\",\"t\":[\"setAttribute(String name,Object value)：设置k-v数据\",\"getAttribute(String name)：通过k获取v\",\"removeAttribute(String name)：通过k移除k-v\",\"protected void doPost(HttpServletRequest req, HttpServletResponse resp){ ServletContext context = this.getServletContext(); Object num = context.getAttribute(\\\"top\\\"); context.setAttribute(\\\"top\\\",num+1); } \"]},\"2939\":{\"h\":\"6. 获取文件服务器路径\",\"t\":[\"这里的路径指的是部署到 Tomcat上的资源和编译后的java类路径，而不是工作空间里的路径。\"]},\"2940\":{\"h\":\"6.1 getRealPath()\",\"t\":[\"参数：参数就是文件的路径（指的是工作目录下的路径）。\",\"该方法的作用就是通过工作目录下的路径，获取其真正部署后的路径。\",\"String ServletContext.getRealPath(); \"]},\"2941\":{\"h\":\"6.2 文件的工作路径\",\"t\":[\"文件可能存在于以下三个地方\",\"web目录下： / 就代表了web目录下，\",\"WEB-INF目录：WEB-INF目录也在web目录下，因此直接使用/WEB-INF表示\",\"src目录：/ （根目录）表示的是web目录，而src不再web目录下，访问src目录的路径为：/WEB-INF/classes/a.jpg（classes默认是编译后的java文件目录）\"]},\"2942\":{\"h\":\"6.3 示例\",\"t\":[\"protected void doPost(HttpServletRequest request, HttpServletResponse response){ ServletContext context = this.getServletContext(); // 获取文件的服务器路径 String b = context.getRealPath(\\\"/b.txt\\\");//web目录下资源访问 //WEB-INF目录下的资源访问 String c = context.getRealPath(\\\"/WEB-INF/c.txt\\\"); //src目录下的资源访问 String a = context.getRealPath(\\\"/WEB-INF/classes/a.txt\\\"); } \"]},\"2943\":{\"h\":\"4-1. Filter\",\"t\":[\"提示\",\"Fileter是JavaWeb核心三模块之一，不过内容不多。\"]},\"2944\":{\"h\":\"1. Filter的位置\",\"t\":[\"Filter是独立的Web模块，应该与Servlet的包在同一目录级创建Filter包，存放Filter类。\"]},\"2945\":{\"h\":\"2. 实现Filter接口\",\"t\":[\"注意是：javax.servlet.Filter接口\",\"import javax.servlet.*; import java.io.IOException; public class filterDemo implements Filter { @Override public void init(FilterConfig filterConfig) throws ServletException { //初始化时的操作，不用关注 } @Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { //这里是过滤器主要操作的内容：重点关注这个 ...//放行前的逻辑 chain.doFilter(request,response);//默认是直接拦截的，需要放行 ...//放行后的逻辑 } @Override public void destroy() { //过滤器正常关闭前的操作，不用关注 } } \"]},\"2946\":{\"h\":\"doFilter：放行\",\"t\":[\"请求被拦截后就不会去访问Servlet了，必须进行放行，才能继续访问接着访问。\",\"使用doFilter方法中的chain对象的doFilter方法进行放行，参数是Request类和Response类\"]},\"2947\":{\"h\":\"放行前的逻辑\",\"t\":[\"请求时会执行的逻辑，向Servlet发送请求时，被拦截器拦截，就会执行放行前的逻辑，然后放行去访问Servlet。\",\"注意：请求阶段，不会执行放行后的逻辑（chain.doFilter后面的代码不会执行）\"]},\"2948\":{\"h\":\"放行后的逻辑\",\"t\":[\"当Servlet进行响应时，也是会被对应的拦截器拦截的吗，此时就会执行放行后的逻辑。\",\"注意：此时放行前的逻辑不会再执行了（chain.doFiter方法以及该方法之前的代码都不会执行）。\"]},\"2949\":{\"h\":\"2. 配置拦截路径\",\"t\":[\"使用@WebFilter注解进行配置，拦截路径有如下四种配置方式\",\"拦截具体的资源：/index.jsp：只有访问index.jsp时才会被拦截\",\"目录拦截：/user/*：访问/user下的所有资源，都会被拦截\",\"后缀名拦截：*.jsp：访问后缀名为jsp的资源，都会被拦截\",\"拦截所有：/*：访问所有资源，都会被拦截\",\"//具体资源路径:只拦截具体的某个路径的访问 @WebServlet(\\\"/index.jsp\\\") //拦截目录:拦截某个目录下所有资源的请求 @WebServlet(\\\"/user/*\\\") //后缀名拦截:对某类格式的资源请求进行拦截 @WebServlet(\\\"*.jsp\\\") //拦截所有资源:访问所有资源时，过滤器都会被执行 @WebServlet(\\\"/*\\\") \"]},\"2950\":{\"h\":\"3. 拦截方式的配置\",\"t\":[\"拦截方式，即资源被访问的方式，一共有5种。\",\"需要使用@WebFilter注解的dispatcherTypes属性来配置，不配置的话有缺省值。\",\"REQUEST：默认值；只有浏览器直接请求的资源，才会被拦截拦截\",\"FORWARD：转发；只有Servlet内部转发的请求，才会被拦截\",\"INCLUDE：包含；转发访问资源，[ 仅了解 ]\",\"ERROR：错误；错误跳转资源，暂略\",\"ASYNC：异步；异步访问资源，用于Ajax的访问，暂略。\",\"@WebFilter(value=\\\"/*\\\", dispatcherTypes = DispatcherType.REQUEST) @WebFilter(value=\\\"/*\\\", dispatcherTypes = DispatcherType.FORWARD) \"]},\"2951\":{\"h\":\"配置多个值\",\"t\":[\"dispatcherTypes的值可以是个数组，来同时配置多个值\",\"@WebFilter( value=\\\"/*\\\", dispatcherTypes ={DispatcherType.REQUEST,DispatcherType.FORWARD} ) \"]},\"2952\":{\"h\":\"4. 过滤器链：多个过滤器\",\"t\":[\"某个资源可以有多个过滤器时，此时注意过滤器执行的顺序\",\"4-1-1\"]},\"2953\":{\"h\":\"多个过滤器的执行顺序\",\"t\":[\"先进，后出\",\"过滤器1：请求，执行chain.doFilter()前的代码\",\"过滤器2：请求，执行chain.doFilter()前的代码\",\"资源的访问\",\"过滤器2：响应，执行chain.doFilter()后的代码\",\"过滤器1：响应，执行chain.doFilter()后的代码\"]},\"2954\":{\"h\":\"5. 过滤器的优先级\",\"t\":[\"按照过滤器类名的字符串自然排序规则比较，值小的先执行\",\"如： AFilter 和 BFilter，AFilter就先执行了。\"]},\"2955\":{\"h\":\"4-2. Listener\",\"t\":[\"提示\",\"Listener 表示监听器，是 JavaWeb 三大组件(Servlet、Filter、Listener)之一，不过内容不多。作用类似于框架中的钩子函数\"]},\"2956\":{\"h\":\"Ⅰ. 监听器介绍\"},\"2957\":{\"h\":\"1. 观察者模式\",\"t\":[\"监听器采用的就是观察者模式。#\",\"观察者：监控『被观察者』的行为，一旦发现『被观察者』触发了事件，就会调用事先准备好的方法执行操作。\",\"被观察者：『被观察者』一旦触发了被监控的事件，就会被『观察者』发现。\"]},\"2958\":{\"h\":\"2. 监听器概念\",\"t\":[\"专门用于对其他对象身上发生的事件或状态改变进行监听和相应处理的对象，当被监视的对象发生情况时，立即采取相应的行动。\"]},\"2959\":{\"h\":\"3. Servlet监听器->Listener\",\"t\":[\"Servlet规范中定义的一种特殊类，它用于监听Web应用程序中的ServletContext，HttpSession 和HttpServletRequest等域对象的创建与销毁事件，以及监听这些域对象中的属性发生修改的事件。\"]},\"2960\":{\"h\":\"4. 监听器分类\",\"t\":[\"4-2-1\",\"域对象监听器\",\"域对象的属性域监听器\",\"Session域中数据的监听器\"]},\"2961\":{\"h\":\"Ⅱ. 监听器列表\",\"t\":[\"JavaWeb 提供了8个监听器：\"]},\"2962\":{\"h\":\"1. ServletContextListener\",\"t\":[\"作用：监听ServletContext对象的创建与销毁\",\"方法名\",\"作用\",\"contextInitialized(ServletContextEvent sce)\",\"ServletContext创建时调用\",\"contextDestroyed(ServletContextEvent sce)\",\"ServletContext销毁时调用\",\"ServletContextEvent对象代表从ServletContext对象身上捕获到的事件，通过这个事件对象我们可以获取到ServletContext对象。\"]},\"2963\":{\"h\":\"2. HttpSessionListener\",\"t\":[\"作用：监听HttpSession对象的创建与销毁\",\"方法名\",\"作用\",\"sessionCreated(HttpSessionEvent hse)\",\"HttpSession对象创建时调用\",\"sessionDestroyed(HttpSessionEvent hse)\",\"HttpSession对象销毁时调用\",\"HttpSessionEvent对象代表从HttpSession对象身上捕获到的事件，通过这个事件对象我们可以获取到触发事件的HttpSession对象。\"]},\"2964\":{\"h\":\"3. ServletRequestListener\",\"t\":[\"作用：监听ServletRequest对象的创建与销毁\",\"方法名\",\"作用\",\"requestInitialized(ServletRequestEvent sre)\",\"ServletRequest对象创建时调用\",\"requestDestroyed(ServletRequestEvent sre)\",\"ServletRequest对象销毁时调用\",\"ServletRequestEvent对象代表从HttpServletRequest对象身上捕获到的事件，通过这个事件对象我们可以获取到触发事件的HttpServletRequest对象。另外还有一个方法可以获取到当前Web应用的ServletContext对象。\"]},\"2965\":{\"h\":\"4. ServletContextAttributeListener\",\"t\":[\"作用：监听ServletContext中属性的创建、修改和销毁\",\"方法名\",\"作用\",\"attributeAdded(ServletContextAttributeEvent scab)\",\"向ServletContext中添加属性时调用\",\"attributeRemoved(ServletContextAttributeEvent scab)\",\"从ServletContext中移除属性时调用\",\"attributeReplaced(ServletContextAttributeEvent scab)\",\"当ServletContext中的属性被修改时调用\",\"ServletContextAttributeEvent对象代表属性变化事件，它包含的方法如下：\",\"方法名\",\"作用\",\"getName()\",\"获取修改或添加的属性名\",\"getValue()\",\"获取被修改或添加的属性值\",\"getServletContext()\",\"获取ServletContext对象\"]},\"2966\":{\"h\":\"5. HttpSessionAttributeListener\",\"t\":[\"作用：监听HttpSession中属性的创建、修改和销毁\",\"方法名\",\"作用\",\"attributeAdded(HttpSessionBindingEvent se)\",\"向HttpSession中添加属性时调用\",\"attributeRemoved(HttpSessionBindingEvent se)\",\"从HttpSession中移除属性时调用\",\"attributeReplaced(HttpSessionBindingEvent se)\",\"当HttpSession中的属性被修改时调用\",\"HttpSessionBindingEvent对象代表属性变化事件，它包含的方法如下：\",\"方法名\",\"作用\",\"getName()\",\"获取修改或添加的属性名\",\"getValue()\",\"获取被修改或添加的属性值\",\"getSession()\",\"获取触发事件的HttpSession对象\"]},\"2967\":{\"h\":\"6. ServletRequestAttributeListener\",\"t\":[\"作用：监听ServletRequest中属性的创建、修改和销毁\",\"方法名\",\"作用\",\"attributeAdded(ServletRequestAttributeEvent srae)\",\"向ServletRequest中添加属性时调用\",\"attributeRemoved(ServletRequestAttributeEvent srae)\",\"从ServletRequest中移除属性时调用\",\"attributeReplaced(ServletRequestAttributeEvent srae)\",\"当ServletRequest中的属性被修改时调用\",\"ServletRequestAttributeEvent对象代表属性变化事件，它包含的方法如下：\",\"方法名\",\"作用\",\"getName()\",\"获取修改或添加的属性名\",\"getValue()\",\"获取被修改或添加的属性值\",\"getServletRequest ()\",\"获取触发事件的ServletRequest对象\"]},\"2968\":{\"h\":\"7. HttpSessionBindingListener\",\"t\":[\"作用：监听某个对象在Session域中的创建与移除\",\"方法名\",\"作用\",\"valueBound(HttpSessionBindingEvent event)\",\"该类的实例被放到Session域中时调用\",\"valueUnbound(HttpSessionBindingEvent event)\",\"该类的实例从Session中移除时调用\",\"HttpSessionBindingEvent对象代表属性变化事件，它包含的方法如下：\",\"方法名\",\"作用\",\"getName()\",\"获取当前事件涉及的属性名\",\"getValue()\",\"获取当前事件涉及的属性值\",\"getSession()\",\"获取触发事件的HttpSession对象\"]},\"2969\":{\"h\":\"8. HttpSessionActivationListener\",\"t\":[\"作用：监听某个对象在Session中的序列化与反序列化。\",\"方法名\",\"作用\",\"sessionWillPassivate(HttpSessionEvent se)\",\"该类实例和Session一起钝化到硬盘时调用\",\"sessionDidActivate(HttpSessionEvent se)\",\"该类实例和Session一起活化到内存时调用\",\"HttpSessionEvent对象代表事件对象，通过getSession()方法获取事件涉及的HttpSession对象。\"]},\"2970\":{\"h\":\"Ⅲ. ServletContextListener\",\"t\":[\"将来使用SpringMVC的时候，会用到一个ContextLoaderListener，这个监听器就实现了ServletContextListener接口，表示对ServletContext对象本身的生命周期进行监控。\"]},\"2971\":{\"h\":\"1. 监听器的使用步骤\",\"t\":[\"定义一个类，实现某个监听器接口\",\"复写接口中的方法\",\"进行监听器配置：添加@WebLister注解\"]},\"2972\":{\"h\":\"2. ServletContextListener接口的方法\",\"t\":[\"该监听器接口一共有两个方法：\",\"void contextDestroyed(ServletContextEvent sce) ：ServletContext对象被销毁之前会调用该方法，一般用来加载资源文件\",\"void contextInitialized(ServletContextEvent sce) ：ServletContext对象创建后会调用该方法\"]},\"2973\":{\"h\":\"使用示例\",\"t\":[\"//file：web/listener/ContextLoaderListener public class ContextLoaderListener implement ServletContextListener{ public void contextInitialized(ServletContextEvent sce){ System.out.print(\\\"ServletContext对象被创建了...\\\"); } public void contextInitialized(ServletContextEvent sce){ System.out.print(\\\"ServletContext对象被销毁了...\\\"); } } \"]},\"2974\":{\"h\":\"3. 注册监听器\",\"t\":[\"在实现了监听器接口的类上添加@WebLister注解\",\"该注解不需要任何参数\",\"@WebListener public class ContextLoaderListener implement ServletContextListener{ ... } \"]},\"2975\":{\"h\":\"4. 监听器触发机制\",\"t\":[\"监听器是通过事件自动触发的。\"]},\"2976\":{\"h\":\"说明\",\"t\":[\"企业都是RESTAPI：前后端分离。\",\"JSP仅作了解，一般不使用JSP。\",\"JSP一般充当MVC模式中的V：view，视图\",\"警告\",\"了解都没必要，浪费时间，略了\"]},\"2977\":{\"h\":\"6-1. Jar包\"},\"2978\":{\"h\":\"Ⅰ. Jar包介绍\"},\"2979\":{\"h\":\"1. 概述\",\"t\":[\"JAR文件（Java归档，英语：Java Archive）是一种软件包文件格式，通常用于聚合大量的Java类文件、相关的元数据和资源（文本、图片等）文件到一个文件，以便开发Java平台应用软件或库。\",\"JAR文件是一种归档文件，以ZIP格式构建，以.jar为文件扩展名。用户可以使用JDK自带的jar命令创建或提取JAR文件。也可以使用其他zip压缩工具，不过压缩时zip文件头里的条目顺序很重要，因为Manifest文件常需放在首位。JAR文件内的文件名是Unicode文本。\"]},\"2980\":{\"h\":\"2. Java包解析\",\"t\":[\"我们自己写的Java代码编译成的是class文件，把多个class文件进行打包，就成了一个jar包，jar包其实就是class文件的集合，多个jar包放到一起我们就称之为组件（组件也可以理解为工具类）工具类可以辅助我们进行开发。\"]},\"2981\":{\"h\":\"3. Jar包与zip包\",\"t\":[\"jar 与 zip 唯一的区别就是在 jar 文件的内容中，包含了一个 META-INF/MANIFEST.MF 文件，该文件是在生成 jar 文件的时候自动创建的，作为jar里面的\\\"详情单\\\"，包含了该Jar包的版本、创建人和类搜索路径Class-Path等信息，当然如果是可执行Jar包，会包含Main-Class属性，表明Main方法入口，尤其是较为重要的Class-Path和Main-Class。\"]},\"2982\":{\"h\":\"4. Jar包的内容\",\"t\":[\"jar包主要是对class文件进行打包，而非.java文件。\",\"java编译生成的class文件是平台无关的，这就意味着jar包是跨平台的，所以不必关心涉及具体平台的问题。\",\"除了class外，还有其他的元数据文件、资源文件等。\"]},\"2983\":{\"h\":\"5. Jar包签名\",\"t\":[\"可以对 JAR 文件内容加上数字化签名。这样，能够识别签名的工具就可以有选择地为您授予软件安全特权，这是其他文件做不到的，它还可以检测代码是否被篡改过。\"]},\"2984\":{\"h\":\"6. Jar包的作用\",\"t\":[\"用于发布和使用类库\",\"作为应用程序和扩展的构建单元\",\"作为组件、applet 或者插件程序的部署单位\",\"用于打包与组件相关联的辅助资源\"]},\"2985\":{\"h\":\"7. 为什么要打jar包\"},\"2986\":{\"h\":\"7.1 发布和使用类库\",\"t\":[\"当我们开发了一个程序以后，程序中有很多的类，如果需要提供给别人使用,发给对方一大堆源文件是非常不好的，因此通常需要把这些类以及相关的资源文件打包成一个 jar 包,把这个 jar 包提供给别人使用,同时提供给使用者清晰的文档。这样他人在拿到我们提供的jar之后，就能方便地进行调用。而且安全。能够对JAR文件进行数字签名，只让能够识别数字签名的用户使用里面的东西。\"]},\"2987\":{\"h\":\"7.2 util类库\",\"t\":[\"建议平时写代码时，将代码中的通用部分抽离出来，逐渐积累一些通用的util类（工具类），并逐渐将其模块模块化，最后打成jar包在项目或模块中使用。 积累jar包的过程也会考验代码的重构能力和模块的抽象能力。\"]},\"2988\":{\"h\":\"Ⅱ. 使用Jar包\"},\"2989\":{\"h\":\"1. 使用Java内置的Jar包\",\"t\":[\"使用java自带jar包：也称基础类库，又分两类分别存放在两个地方\",\"一是在java安装目录的jre\\\\lib下，用于已发布的软件运行时调用，可称为jvm环境\",\"二是在java安装目录的jdk\\\\jre\\\\lib下，用于开发时调试软件调用，可称为开发环境\",\"在自己新建的项目工程中，基础类库下的类不用导包，即不用手动import，系统默认导入，System、Exception、Math、String，都属于java.lang包下，无需import操作。\"]},\"2990\":{\"h\":\"2. 打Jar包\"},\"2991\":{\"h\":\"2.1 手动打\",\"t\":[\"先使用javac编译java文件，得到class文件，\",\"创建manifest：内容如下\",\"Manifest-Version: 1.0 Main-Class: addJarPkg \",\"把编译好的class文件和manifest文件放入指定文件夹，如test\",\"在cmd中运行命令\",\"jar -cvfm main.jar mainfest -C test. \"]},\"2992\":{\"h\":\"2.2 使用IDEA\",\"t\":[\"点击项目->点击“File”菜单 -> Project Structure\",\"点击\\\"Artifacts\\\" -> 绿色的\\\"+\\\" -> “JAR” -> Empty\",\"Name栏填入自定义的名字，Output ditectory选择jar包目标目录，Available Elements里双击需要添加到jar包的文件，即可添加到左边的jar包目录下，具体看下图\",\"6-1-1\",\"点击Create Manifest，选择放置MANIFEST.MF的文件路径（直接默认项目根目录就行，尽量不要选别的路径，可能会造成不必要的错误），点击OK。\",\"点击Main Class后面选择按钮\",\"弹出框中选择需要运行程序入口main函数，点击OK\",\"以上设置完之后，点击OK\",\"点击菜单中“Build” -> “Build Artifacts” -双击弹出框中待生成jar包下面的build即可\"]},\"2993\":{\"h\":\"3. 添加Jar包依赖\",\"t\":[\"提示\",\"实际开发中都是使用Maven添加的。\",\"手动添加方式：暂略。\"]},\"2994\":{\"h\":\"Ⅲ. Jar包和war包\"},\"2995\":{\"h\":\"1. war包介绍\",\"t\":[\"war是一个可以直接运行的web模块，通常应用于web项目中，将其打成war包部署到Tomcat等容器中。将war包放置在tomcat根目录的webapps目录下，如果Tomcat成功启动，这个包就会自动解压，就相当于发布了。\"]},\"2996\":{\"h\":\"2. jar包与war包的对比\",\"t\":[\"除了目录结构外，jar里有的war里也都有。\",\"war包是Sun提出的一种web应用程序格式，与jar类似，是很多文件的压缩包。war包中的文件按照一定目录结构来组织。根据其根目录下包含有html和jsp文件，或者包含有这两种文件的目录，另外还有WEB-INF目录。\",\"通常在WEB-INF目录下含有一个web.xml文件和一个classes目录，web.xml是这个应用的配置文件，而classes目录下则包含编译好的servlet类和jsp，或者servlet所依赖的其他类（如JavaBean）。\",\"这些所依赖的类也可以打包成jar包放在WEB-INF下的lib目录下。这也就意味着，war能打包的内容，jar也都可以。\"]},\"2997\":{\"h\":\"3. jar包和war包使用\",\"t\":[\"对于现今的应用来讲，主流都是用jar来替代war了。因为war仅服务于Web应用，而jar的涵盖范围更广。目前，war相较于jar的唯一优势在于，当tomcat的进程启动之后，将符合规范的war包放在tomcat的webapps目录下的时候，tomcat会自动将war包解压并对外提供web服务，而jar包则不行。\"]},\"2998\":{\"h\":\"4. 微服务\",\"t\":[\"过去由于并未通过微服务将机器资源进行隔离，因此提倡的是一个tomcat实例管理多个java web项目，因此对于java web项目，都提倡将其打成war包然后放置于同一个tomcat的webapps下进行管理，便于资源的统一利用。\",\"随着微服务成为主流，同一台机器上的多个web服务可以通过docker等容器进行隔离，因此我们可以让每个容器都单独运行一个tomcat实例，每个tomcat实例独立运行一个web服务，换句话说，我们可以像springboot一样，将tomcat和web项目打成jar放在一起，以内嵌的方式来启动web服务，使得所有服务的启动方式更优雅和统一，不管是Web服务还是后台服务，均使用java -jar指令来启动。\"]},\"2999\":{\"h\":\"Ⅳ. Maven\",\"t\":[\"提示\",\"Maven是包管理器，实际开发中，都是使用Maven来管理包的。\",\"详见：框架>Maven\"]},\"3000\":{\"h\":\"6-2. Web架构\"},\"3001\":{\"h\":\"Ⅰ. MVC\"},\"3002\":{\"h\":\"1. 概述\",\"t\":[\"MVC 是一种分层开发的模式，其中\",\"M：Model，业务模型，处理业务【JavaBean】 \",\"完成具体的业务操作，如：查询数据库，封装对象\",\"V：View，视图，界面展示【前端】 \",\"展示数据\",\"C：Controller，控制器。Servlet \",\"获取用户的输入\",\"调用模型\",\"将数据交给视图进行展示\"]},\"3003\":{\"h\":\"2. 过程\",\"t\":[\"控制器（serlvlet）用来接收浏览器发送过来的请求，控制器调用模型（JavaBean）来获取数据，比如从数据库查询数据；控制器获取到数据后再交由视图（JSP）进行数据展示\",\"6-2-1\"]},\"3004\":{\"h\":\"3. MVC的优点\",\"t\":[\"职责单一，互不影响。每个角色做它自己的事，各司其职。\",\"有利于分工协作。\",\"有利于组件重用\"]},\"3005\":{\"h\":\"Ⅱ. 三层架构\",\"t\":[\"三层架构\"]},\"3006\":{\"h\":\"1. 概述\",\"t\":[\"三层架构是将我们的项目分成了三个层面，分别是 表现层、业务逻辑层、数据访问层。\",\"数据访问层：对数据库的CRUD基本操作\",\"业务逻辑层：对业务逻辑进行封装，组合数据访问层层中基本功能，形成复杂的业务逻辑功能。 \",\"例如 注册业务功能 ，我们会先调用 数据访问层 的 selectByName() 方法判断该用户名是否存在，如果不存在再调用 数据访问层 的 insert() 方法进行数据的添加操作\",\"表现层：接收请求，封装数据，调用业务逻辑层，响应数据\",\"6-2-2\"]},\"3007\":{\"h\":\"2. 业务流程\",\"t\":[\"浏览器发送请求，表现层的Servlet接收请求并调用业务逻辑层的方法进行业务逻辑处理，而业务逻辑层方法调用数据访问层方法进行数据的操作，依次返回到serlvet，然后servlet将数据交由 JSP 进行展示。\"]},\"3008\":{\"h\":\"3. 命名\",\"t\":[\"三层架构的每一层都有特有的包名称：\",\"表现层： controller 或者 web\",\"业务逻辑层：service\",\"数据访问层：dao 或者 mapper（如果使用MyBatis）\"]},\"3009\":{\"h\":\"4. 框架\",\"t\":[\"SSM框架就是对三层架构的封装，不同的框架对应不同的层。\",\"SpringMVC：表现层\",\"Spring：业务逻辑层\",\"MyBatis：数据访问层\",\"6-2-3\"]},\"3010\":{\"h\":\"Ⅲ. MVC与三层架构\"},\"3011\":{\"h\":\"1. 关系\",\"t\":[\"6-2-4\",\"如上图上半部分是 MVC 模式，上图下半部分是三层架构。 MVC 模式 中的 C（控制器）和 V（视图）就是 三层架构 中的表现层，而 MVC 模式 中的 M（模型）就是 三层架构 中的 业务逻辑层 和 数据访问层。\"]},\"3012\":{\"h\":\"2. 总结\",\"t\":[\"可以将 MVC 模式 理解成是一个大的概念，而 三层架构 是对 MVC 模式 实现架构的思想。 那么我们以后按照要求将不同层的代码写在不同的包下，每一层里功能职责做到单一，将来如果将表现层的技术换掉，而业务逻辑层和数据访问层的代码不需要发生变化。\"]},\"3013\":{\"h\":\"3. 应用\",\"t\":[\"web（表示层）= Controller+View = SpringMVC\",\"service（业务逻辑层） = Modle - dao = Spring\",\"dao（数据访问层）= 基本的数据访问操作 = MyBatista\"]},\"3014\":{\"h\":\"6-3. XML\",\"t\":[\"提示\",\"使用Spring全家桶开发时，很多配置文件都是xml格式，因此需要对xml了解一下。\",\"仅了解，实际使用时，都有固定的模板。\"]},\"3015\":{\"h\":\"Ⅰ. xml 介绍\",\"t\":[\"xml：Extensible Markup Language，W3C推出的可扩展标记语言。\",\"标签都是自定义的，什么标签名都可以。\"]},\"3016\":{\"h\":\"1. xml与html的区别\",\"t\":[\"xml标签都是自定义的，html标签是预定义。\",\"xml的语法严格，html语法松散\",\"xml是存储数据的，html是展示数据\"]},\"3017\":{\"h\":\"2. xml的用途\",\"t\":[\"作为配置文件，这是主要用途，很多框架的配置文件都是用xml写的\",\"在网络中传输数据，这个已经基本被JSON取代了\"]},\"3018\":{\"h\":\"3. 基本语法\",\"t\":[\"xml文档的后缀名 .xml\",\"xml第一行必须定义为文档声明\",\"xml文档中必须有且仅有一个根标签\",\"属性值必须使用引号(单双都可)引起来\",\"标签必须正确关闭\",\"xml标签名称区分大小写\"]},\"3019\":{\"h\":\"4. 简单示例\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?> <server id=\\\"1\\\"> <uname>shit</uname> <pwd>123456</pwd> <url>fuck.com</url> </server> \"]},\"3020\":{\"h\":\"5. xml的组成部分\",\"t\":[\"①文档声明 \",\"version：版本，必备，现在是1.0。\",\"encoding：编码，建议：utf-8\",\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?> \",\"②指令：略，这个指令是用来结合CSS控制标签的样式的，因为早起XML是用来取代HTML的，现在XML不用来作为前端显示页面了，指令已经没用了。\",\"③标签：自定义的标签名 \",\"规则：遵循常用的命名规则即可，注意不能包含空格，不能以xml开头\",\"④属性：id属性值是唯一的，用引号括起来。\",\"⑤文本：CDATA区，在该区域中的数据会被原样展示 \",\"<![CDATA[ 数据 ]]>\",\"⑥注释：和HTML一样。\"]},\"3021\":{\"h\":\"Ⅱ. 约束\"},\"3022\":{\"h\":\"1. 什么是约束\",\"t\":[\"xml现在的主要作用是作为配置文件，由于xml中标签是自由设置的，所以框架的使用者可以随便配置xml。但是对于框架来说，只有某些标签才是有意义的，因此框架要对xml配置文件中的内容进行一些约束。\",\"本质：规定xml文档（配置文件）的书写规则\"]},\"3023\":{\"h\":\"2. 约束文档的技术实现\",\"t\":[\"DTD:一种简单的约束技术（有缺陷，只能约束格式，无法约束内容）\",\"Schema:一种复杂的约束技术\",\"能够在xml中引入约束文档，能简单看懂约束文档即可。\"]},\"3024\":{\"h\":\"3. DTD\"},\"3025\":{\"h\":\"3.1 dtd文档示例\",\"t\":[\"<!-- 声明一个students标签，+和正则一样，必须出现1次或多次 --> <!ELEMENT students (student+) > <!-- 里面可以声明三个有参的子标签 --> <!ELEMENT student (name,age,sex)> <!-- 声明name标签，值是字符串 --> <!ELEMENT name (#PCDATA)> <!-- 声明age标签，值是字符串 --> <!ELEMENT age (#PCDATA)> <!-- 声明sex标签，值是字符串 --> <!ELEMENT sex (#PCDATA)> <!-- 声明student标签的属性，属性名是number，类型是ID，必须设置 --> <!ATTLIST student number ID #REQUIRED> \"]},\"3026\":{\"h\":\"3.2 引入dtd文档\",\"t\":[\"根据约束文档写xml文档之前，要先将dtd文档引入xml文档中。 内部dtd：将约束规则定义在xml文档中【不常用】 外部dtd：将约束的规则定义在外部的dtd文件中 本地：<!DOCTYPE 根标签名 SYSTEM \\\"dtd文件的位置\\\"> 网络：<!DOCTYPE 根标签名 PUBLIC \\\"dtd文件名字\\\" \\\"dtd文件的位置URL\\\">\"]},\"3027\":{\"h\":\"3.3 引入dtd，编写xml\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE students SYSTEM \\\"student.dtd\\\"> <students> <student number=\\\"s001\\\"> <name>zhangsan</name> <age>abc</age> <sex>hehe</sex> </student> </students> \"]},\"3028\":{\"h\":\"4. schema\",\"t\":[\"比dtd更复杂，能约束更复杂的内容，包括标签、格式、内容，包含了很多正则。\"]},\"3029\":{\"h\":\"4.1 Schema示例\",\"t\":[\"本身也是个xml文档\",\"xsd:element：定义元素，包含元素名和类型\",\"xsd:complexType：自定义类型的说明，name=自定义的类型名\",\"<?xml version=\\\"1.0\\\"?> <xsd:schema xmlns=\\\"http://www.itcast.cn/xml\\\" xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" targetNamespace=\\\"http://www.itcast.cn/xml\\\" elementFormDefault=\\\"qualified\\\" > <!-- 声明一个自定义类型的元素 --> <xsd:element name=\\\"students\\\" type=\\\"studentsType\\\"/> <!-- 约束自定义的studentsType类型，complexTye:组合类型 --> <xsd:complexType name=\\\"studentsType\\\"> <!-- sequence：按顺序出现 student元素 --> <xsd:sequence> <!-- 定义student元素，类型自定义，最少出现0次，最多无限制 --> <xsd:element name=\\\"student\\\" type=\\\"studentType\\\" minOccurs=\\\"0\\\" maxOccurs=\\\"unbounded\\\"/> </xsd:sequence> </xsd:complexType> <!-- 约束自定义的studentTyep类型 --> <xsd:complexType name=\\\"studentType\\\"> <!-- sequence：按顺序出现以下元素 --> <xsd:sequence> <!-- type是String类型 --> <xsd:element name=\\\"name\\\" type=\\\"xsd:string\\\"/> <!-- 自定义类型：ageType --> <xsd:element name=\\\"age\\\" type=\\\"ageType\\\" /> <!-- 自定义类型：sexType --> <xsd:element name=\\\"sex\\\" type=\\\"sexType\\\" /> </xsd:sequence> <!-- studentType里的属性，属性名：number，类型是numberType，required：必须出现 --> <xsd:attribute name=\\\"number\\\" type=\\\"numberType\\\" use=\\\"required\\\"/> </xsd:complexType> <!-- 对sexType类型的约束，simple：简单类型 --> <xsd:simpleType name=\\\"sexType\\\"> <!-- 基本数据格式：string --> <xsd:restriction base=\\\"xsd:string\\\"> <!-- enumeration:枚举，二选一 --> <xsd:enumeration value=\\\"male\\\"/> <xsd:enumeration value=\\\"female\\\"/> </xsd:restriction> </xsd:simpleType> <!-- 对ageType类型的约束 --> <xsd:simpleType name=\\\"ageType\\\"> <!-- 基本数据格式是integer --> <xsd:restriction base=\\\"xsd:integer\\\"> <!-- 最小值 --> <xsd:minInclusive value=\\\"0\\\"/> <!-- 最大值 --> <xsd:maxInclusive value=\\\"256\\\"/> </xsd:restriction> </xsd:simpleType> <!-- 对numberType类型的约束 --> <xsd:simpleType name=\\\"numberType\\\"> <!-- 基本数据格式：string --> <xsd:restriction base=\\\"xsd:string\\\"> <!-- 正则约束，必须heima开头后跟_加4个数字 --> <xsd:pattern value=\\\"heima_\\\\d{4}\\\"/> </xsd:restriction> </xsd:simpleType> </xsd:schema> \"]},\"3030\":{\"h\":\"4.2 引入约束写xml\",\"t\":[\"可以同时引入多个约束文档，使用命名空间区分。\",\"<!-- students：根标签 --> <students //引入xsi前缀：这行是固定格式 xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" //为命名空间起个前缀，默认前缀是空 xmlns=\\\"http://www.itcast.cn/xml\\\" //为命名空间起前缀，a就前缀 xmlns:a=\\\"http://www.dsaft.cn/xml\\\" //使用xsi引入文件，schemaLocation：命名空间，student.xsd是文件名 xsi:schemaLocation=\\\"http://www.itcast.cn/xml student.xsd\\\" > <!-- 标签省略了前缀，即为默认命名空间 --> <student number=\\\"heima_0001\\\"> <name>tom</name> <age>18</age> <sex>male</sex> </student> <!-- 指定命名空间的标签 --> <a:name>helo</name> </students> \"]},\"3031\":{\"h\":\"6-4. 会话技术\",\"t\":[\"提醒\",\"当前开发，以移动平台为主，因此优先采用的是Token技术。\",\"Cookie和Session只有浏览器能用\"]},\"3032\":{\"h\":\"Ⅰ. 会话技术介绍\"},\"3033\":{\"h\":\"1. 会话\",\"t\":[\"用户打开浏览器，访问web服务器的资源，会话建立，直到有一方断开连接，会话结束。\",\"在一次会话中可以包含多次请求和响应。\",\"从浏览器发出请求到服务端响应数据给前端之后，一次会话(在浏览器和服务器之间)就被建立了\",\"会话被建立后，如果浏览器或服务端都没有被关闭，则会话就会持续建立着\",\"浏览器和服务器就可以继续使用该会话进行请求发送和响应，上述的整个过程就被称之为会话。\"]},\"3034\":{\"h\":\"2. 不同的会话\",\"t\":[\"每个浏览器与服务器建立的会话都是不同的会话，如图，一共有三个会话。\",\"6-4-1\"]},\"3035\":{\"h\":\"3. 会话跟踪\",\"t\":[\"一种维护浏览器状态的方法，服务器需要识别多次请求是否来自于同一浏览器，以便在同一次会话的多次请求间共享数据。\",\"服务器会收到多个请求，这多个请求可能来自多个浏览器，如上图中的6个请求来自3个浏览器\",\"服务器需要用来识别请求是否来自同一个浏览器\",\"服务器用来识别浏览器的过程，这个过程就是会话跟踪\",\"服务器识别浏览器后就可以在同一个会话中多次请求之间来共享数据\"]},\"3036\":{\"h\":\"4. 无状态协议\",\"t\":[\"浏览器和服务器之间使用的是HTTP请求来进行数据传输，HTTP协议是无状态的，每次浏览器向服务器请求时，服务器都会将该请求视为新的请求。HTTP协议设计成无状态的目的是让每次请求之间相互独立，互不影响，请求与请求之间独立后，就无法实现多次请求之间的数据共享。\"]},\"3037\":{\"h\":\"5. 会话追踪技术\",\"t\":[\"cookie：客户端会话跟踪技术\",\"session：服务端会话跟踪技术 这两个技术都可以实现会话跟踪，它们之间最大的区别:Cookie是存储在浏览器端而Session是存储在服务器端\"]},\"3038\":{\"h\":\"Ⅱ. Cookie\",\"t\":[\"客户端会话技术，将数据保存到客户端，以后每次请求都携带Cookie数据进行访问。\"]},\"3039\":{\"h\":\"1. 使用步骤\",\"t\":[\"Servlet-1：创建Cookie对象，绑定数据\",\"Servlet-1：发送Cookie对象->给浏览器\",\"浏览器：保存Cookie，并在下一次请求时携带Cookie\",\"Servlet-2：拿到浏览器发送请求时携带的Cookie数据\"]},\"3040\":{\"h\":\"2. Cookie的相关方法\"},\"3041\":{\"h\":\"2.1 创建Cookie对象\",\"t\":[\"同时构造方法会设置cookie的key 和value\",\"new Cookie(String name, String value) Cookie cookie = new Cookie(\\\"key\\\",\\\"value\\\"); \"]},\"3042\":{\"h\":\"2.2 发送Cookie对象\",\"t\":[\"将cookie对象通过响应对象Response，发送到客户端。\",\"void ServletResponse.addCookie(Cookie c); response.addCookie(cookie); \"]},\"3043\":{\"h\":\"2.3 获取Cookie数据\",\"t\":[\"可以通过请求对象Request获取cookie，Cookie可能有多个，因此返回的是数组\",\"Cookie[] ServletRequest.getCookies(); Cookie[] cookies = request.getCookies(); \"]},\"3044\":{\"h\":\"2.4 获取Cookie的name和value\",\"t\":[\"遍历获取的Cookie数据（数组）,来获取具体的key，value\",\"String Cookie.getName(); //获取Cookie的name String Cookie.getValue();//获取Cookie的Value //循环Cookie[]获取Cookie for (Cookie c : cs) { String name = c.getName(); String value = c.getValue(); } \"]},\"3045\":{\"h\":\"3. Cookie使用范例\"},\"3046\":{\"h\":\"3.1 servlet1：创建cookie\",\"t\":[\"protected void doPost(HttpServletRequest req, HttpServletResponse resp){ //1.创建Cookie对象 Cookie c = new Cookie(\\\"msg\\\",\\\"hello\\\"); //2.发送Cookie response.addCookie(c); } \"]},\"3047\":{\"h\":\"3.2 servlet2：获取cookie\",\"t\":[\"protected void doPost(HttpServletRequest req, HttpServletResponse resp){ //3. 获取Cookie Cookie[] cs = req.getCookies(); //4.获取数据，遍历Cookies if(cs != null){ for (Cookie c : cs) { String name = c.getName(); if(\\\"msg\\\".equals(name)){ String value = c.getValue(); System.out.println(name+\\\":\\\"+value); break; } } } } \"]},\"3048\":{\"h\":\"4. Cookie的工作原理\",\"t\":[\"提示：Cookie有关的所有操作都是基于请求头和响应头的，只是Servlet直接封装了一套api，省去了直接操作消息头。\"]},\"3049\":{\"h\":\"4.1 Servlet1创建并发送Cookie\",\"t\":[\"创建new Cookie(String name, String value)的本质是创建了一个响应头\",\"set-cookie:msg=hello \",\"然后通过response响应给了浏览器，响应头里就有了set-cookie\"]},\"3050\":{\"h\":\"4.2 浏览器：保存Cookie，并在下次请求时携带Cookie\",\"t\":[\"浏览器会根据HTTP协议，自动将响应头里的set-cookie保存起来\",\"当浏览器再次发送强求时，会携带上cookie。\",\"cookie:msg=hello \"]},\"3051\":{\"h\":\"4.3 cookie的识别\",\"t\":[\"cookie不止是储存了键值对，还储存了：\",\"域名（cookie的适用范围）\",\"路径（细化cookie的适用范围）\",\"过期时间：默认关掉浏览器会话就会失效，也可以指定会话时间\"]},\"3052\":{\"h\":\"5. 发送多个Cookie\",\"t\":[\"可以创建多个Cookie对象，使用response调用多次addCookie方法发送cookie即可。\",\"响应头和消息头都会携带多个cookie键值对。\",\"Cookie c1 = new Cookie(\\\"msg1\\\",\\\"hello\\\"); Cookie c2 = new Cookie(\\\"msg2\\\",\\\"hi\\\"); response.addCookie(c1); response.addCookie(c2); \"]},\"3053\":{\"h\":\"6. Cookie的保存时间\",\"t\":[\"默认情况下，当浏览器关闭后，Cookie数据被销毁，可以手动设置Cookie的存活时间\",\"Cookie setMaxAge(int seconds) Cookie c1 = new Cookie(\\\"msg\\\",\\\"aaa\\\"); c1.setMaxAge(2000); response.addCookie(c1); \",\"参数值的细节：\",\"正数：将Cookie数据写到硬盘的文件中，持久化存储。 \",\"并指定cookie存活时间（单位s），时间到后，cookie文件自动失效\",\"负数：默认值，会话数据储存在内存中，关闭浏览器或服务器就失效。\",\"0：删除cookie信息，Servlet用来删除还未到期的cook信息。\"]},\"3054\":{\"h\":\"7.储存中文\",\"t\":[\"在tomcat 8 之前 cookie中不能直接存储中文数据。需要将中文数据转码-一般采用URL编码(%E3)。\",\"在tomcat 8 之后，cookie支持中文数据。特殊字符还是不支持，建议使用URL编码存储，URL解码解析\",\"String value = \\\"张三\\\"; value = URLEncoder.encode(value, \\\"UTF-8\\\");//对中文进行URL编码 System.out.println(\\\"存储数据：\\\"+value); //将编码后的值存入Cookie中 Cookie cookie = new Cookie(\\\"username\\\",value); response.addCookie(cookie); \"]},\"3055\":{\"h\":\"8. cookie的共享\"},\"3056\":{\"h\":\"8.1 同一Tomcat服务器中，多个Web项目的cookie的共享\",\"t\":[\"假设在一个tomcat服务器中，部署了多个web项目，这些web项目中cookie默认情况是不能共享的。\",\"setPath(String path):设置cookie的获取范围。默认情况下，设置当前的虚拟目录， 如果要共享，则可以将path设置为\\\"/\\\"\"]},\"3057\":{\"h\":\"8.2 不同Tomcat服务器间Cookie的共享\",\"t\":[\"setDomain(String path):如果设置一级域名相同，那么多个服务器之间cookie可以共享setDomain(\\\".baidu.com\\\"),那么tieba.baidu.com和news.baidu.com中cookie可以共享\"]},\"3058\":{\"h\":\"9. 总结\",\"t\":[\"cookie的特性 \",\"cookie存储数据在客户端浏览器\",\"浏览器对于单个cookie 的大小有限制(4kb) 以及 对同一个域名下的总cookie数量也有限制(20个)\",\"作用 \",\"cookie一般用于存出少量的不太敏感的数据\",\"在不登录的情况下，完成服务器对客户端的身份识别\"]},\"3059\":{\"h\":\"Ⅲ. Session\"},\"3060\":{\"h\":\"1. 概念\",\"t\":[\"服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。这个对象就是HttpSession。\",\"说明：由于session数据是保存在一个对象里的，所以SESSION本质是在内存中的。\"]},\"3061\":{\"h\":\"2. Session的工作流程\",\"t\":[\"在服务端的AServlet获取一个Session对象，把数据存入其中\",\"在服务端的BServlet获取到相同的Session对象，从中取出数据\",\"就可以实现一次会话中多次请求之间的数据共享了\"]},\"3062\":{\"h\":\"3. 获取HttpSession对象\",\"t\":[\"使用Request对象的getSession方法来获取Session对象。\",\"HttpSession ServletRequest.getSession(); protected void doGet(HttpServletRequest req, HttpServletResponse resp){ HttpSession session = request.getSession(); } \"]},\"3063\":{\"h\":\"4. HttpSession对象的方法\"},\"3064\":{\"h\":\"4.1 设置session的键值\",\"t\":[\"void setAttribute(String name, Object value) \"]},\"3065\":{\"h\":\"4.2 通过键获取session的值\",\"t\":[\"Object getAttribute(String name) \"]},\"3066\":{\"h\":\"4.3 通过键删除键值对\",\"t\":[\"void removeAttribute(String name) \"]},\"3067\":{\"h\":\"4.4 获取SESSIONID\",\"t\":[\"SESSIONID是session的唯一标识id。\",\"String HttpSession.getId() \"]},\"3068\":{\"h\":\"5. Session的原理\",\"t\":[\"session的存在是依赖与cookie的，创建Session时，会将sessionid储存到cookie中。\",\"浏览器：发送请求，调用的service方法中有创建session的代码。\",\"request.getSession()：第一次创建Session时，会在内存中创建一个Session对象 \",\"该session对象有一个id属性\",\"响应：servlet会创建一个响应头来返回创建的sessionid \",\"set-cookie:JSESSIONID=23a23234\",\"浏览器：浏览器再次请求时，就会携带cookie，cookie中有JSESSIONID，服务器会自动获取JSESSIONID，用来判断是同一个用户发的请求，并调取SEESION对象的值\"]},\"3069\":{\"h\":\"6. session的有效期\",\"t\":[\"当客户端关闭后，服务器不关闭，两次获取的session并不是同一个。\",\"因为保存JSESSIOID的cookie默认只在会话期是有效的，关闭浏览器cookie就会消失，就无法获取JSEESIONID了\"]},\"3070\":{\"h\":\"定义SESSION的有效期\",\"t\":[\"可以通过手动创建Cookie，并指定Cookie存在的时间，来定义SESSION的有效时间。\",\"Cookie c = new Cookie(\\\"JSESSION\\\",session.getId()); c.setMaxAge(60*60*60); response.addCookie(c); \"]},\"3071\":{\"h\":\"7. session的钝化和活化\",\"t\":[\"当服务器重启后，由于Session是保存在内存中的，所以默认重启后session将失效。 不过Tomcat服务器或自动对Session对象进行钝化和活化。\",\"session的钝化：在服务器正常关闭之前，将session对象系列化到硬盘上\",\"session活化：在服务器启动后，将session文件转化为内存中的session对象即可。\",\"注意：idea中是无法实现活化的，测试的时候要注意，生产环境无影响。\"]},\"3072\":{\"h\":\"8. session的销毁\"},\"3073\":{\"h\":\"8.1\",\"t\":[\"服务器关闭：自动销毁内存中的SESSION（其实是会钝化处理的）\",\"session默认失效时间 30分钟，也就是30分钟后，SEESION就自动删除了，假如使用Session储存登陆信息，30分钟就会自动掉线。可以通过修改配置文件，设置session自动销毁的时间：\",\"文件：web.xml\",\"<session-config> <session-timeout>30</session-timeout> //单位是分钟 </session-config> \"]},\"3074\":{\"h\":\"8.2 手动销毁\",\"t\":[\"session对象调用invalidate() 可以手动销毁session。\"]},\"3075\":{\"h\":\"9. session的特点\",\"t\":[\"session用于存储一次会话的多次请求的数据，存在服务器端\",\"session可以存储任意类型，任意大小的数据\"]},\"3076\":{\"h\":\"Ⅳ. 总结\"},\"3077\":{\"h\":\"1. Cookie与Session的区别\",\"t\":[\"存储位置：Cookie 是将数据存储在客户端，Session 将数据存储在服务端\",\"安全性：Cookie不安全，Session安全\",\"数据大小：Cookie最大3KB，Session无大小限制\",\"存储时间：Cookie可以通过setMaxAge()长期存储，Session默认30分钟\",\"服务器性能：Cookie不占服务器资源，Session占用服务器资源\"]},\"3078\":{\"h\":\"2. Cookie与Session的应用场景\",\"t\":[\"购物车:使用Cookie来存储\",\"以登录用户的名称展示:使用Session来存储\",\"记住我功能:使用Cookie来存储\",\"验证码:使用session来存储\"]},\"3079\":{\"h\":\"3. 结论\",\"t\":[\"Cookie是用来保证用户在未登录情况下的身份识别\",\"Session是用来保存用户登录后的数据\"]},\"3080\":{\"h\":\"6-5. JSON\"},\"3081\":{\"h\":\"Ⅰ. JSON语法\",\"t\":[\"详见：前端>基础>JS>8.其他>json\"]},\"3082\":{\"h\":\"Ⅱ. JSON转换\"},\"3083\":{\"h\":\"1. JSON与Java对象\",\"t\":[\"6-5-1\",\"请求数据：JSON字符串转为Java对象\",\"响应数据：Java对象转为JSON字符串\"]},\"3084\":{\"h\":\"2. Fastjson：JSON与Java对象的转换\",\"t\":[\"Fastjson 是阿里巴巴提供的一个Java语言编写的高性能功能完善的 JSON 库，是目前Java语言中最快的 JSON 库，可以实现 Java 对象和 JSON 字符串的相互转换。\"]},\"3085\":{\"h\":\"导入坐标\",\"t\":[\"Maven导入Fastjson包\",\"<dependency> <groupId>com.alibaba</groupId> <artifactId>fastjson</artifactId> <version>1.2.62</version> </dependency> \"]},\"3086\":{\"h\":\"3. Java对象转JSON\",\"t\":[\"使用 Fastjson 提供的 JSON 类中的 toJSONString() 静态方法即可。\",\"String jsonStr = JSON.toJSONString(obj); \"]},\"3087\":{\"h\":\"4. JSON转Java对象\",\"t\":[\"使用 Fastjson 提供的 JSON 类中的 parseObject() 静态方法即可。\",\"User user = JSON.parseObject(jsonStr, User.class); \"]},\"3088\":{\"h\":\"1-1. ES介绍\"},\"3089\":{\"h\":\"ES 概述\",\"t\":[\"全文搜索属于最常见的需求，开源的 Elasticsearch是目前全文搜索引擎的首选。\",\"它可以快速地储存、搜索和分析海量数据。\"]},\"3090\":{\"h\":\"1. Elastic Stack\",\"t\":[\"1-1-1\",\"The Elastic Stack, 包括 Elasticsearch、Kibana、Beats 和 Logstash（也称为 ELK Stack）。\",\"这个技术栈能够安全可靠地获取任何来源、任何格式的数据，然后实时地对数据进行搜索、分析和可视化。\"]},\"3091\":{\"h\":\"2. Elastic Search\",\"t\":[\"Elaticsearch，简称为 ES，ES 是一个开源的高扩展的分布式全文搜索引擎，是整个 Elastic Stack 技术栈的核心。\",\"它可以近乎实时的存储、检索数据；本身扩展性很好，可以扩展到上百台服务器，处理 PB 级别的数据。\"]},\"3092\":{\"h\":\"3. Lucene\",\"t\":[\"Lucene 是 Apache 软件基金会 Jakarta 项目组的一个子项目，能够做全文索引和搜寻。Lucene只是一个提供全文搜索功能类库的核心工具包，需要晚上的服务框架搭建起来进行应用。\",\"主流搜索引擎软件就两款：ElasticSearch 和 Solr, 这两款都是基于 Lucene 搭建的，两者的功能和效率基本一样。市面上比较流行的是ElasticSearch。\"]},\"3093\":{\"h\":\"4. 分布式\",\"t\":[\"Elastic 本质上是一个分布式数据库，允许多台服务器协同工作，每台服务器可以运行多个 Elastic 实例。单个 Elastic 实例称为一个节点（node）。一组节点构成一个集群（cluster）\"]},\"3094\":{\"h\":\"5. 大企业的选择\",\"t\":[\"以下IT公司采用了ElasticSearch\",\"GitHub：GitHub 使用Elasticsearch 搜索 20TB 的数据\",\"维基百科：启动以 Elasticsearch 为基础的核心搜索架构\",\"SoundCloud：为 1.8 亿用户提供即时而精准的音乐搜索\",\"百度：目前广泛使用 Elasticsearch 作为文本数据分析\",\"新浪：使用 Elasticsearch 分析处理 32 亿条实时日志\",\"阿里：使用 Elasticsearch 构建日志采集和分析体系\",\"Stack Overflow\"]},\"3095\":{\"h\":\"全文搜索引擎\"},\"3096\":{\"h\":\"1. 背景\",\"t\":[\"Google，百度类的网站搜索，它们都是根据网页中的关键字生成索引，我们在搜索的时候输入关键字，它们会将该关键字即索引匹配到的所有网页返回；还有常见的项目中应用日志的搜索等等。对于这些非结构化的数据文本，关系型数据库搜索不是能很好的支持。\"]},\"3097\":{\"h\":\"2. 传统数据库的缺点\",\"t\":[\"一般传统数据库，全文检索都实现的很鸡肋，因为一般也没人用数据库存文本字段。进行全文检索需要扫描整个表，如果数据量大的话即使对 SQL 的语法优化，也收效甚微。建立了索引，但是维护起来也很麻烦，对于 insert 和 update 操作都会重新构建索引。\"]},\"3098\":{\"h\":\"3. 不适用常规搜索的场景\",\"t\":[\"基于以上原因可以分析得出，在一些生产环境中，使用常规的搜索方式，性能是非常差的：\",\"搜索的数据对象是大量的非结构化的文本数据。\",\"文件记录量达到数十万或数百万个甚至更多。\",\"支持大量基于交互式文本的查询。\",\"需求非常灵活的全文搜索查询。\",\"对高度相关的搜索结果的有特殊需求，但是没有可用的关系数据库可以满足\",\"对不同记录类型、非文本数据操作或安全事务处理的需求相对较少的情况。\"]},\"3099\":{\"h\":\"4. 全文搜索\",\"t\":[\"为了解决结构化数据搜索和非结构化数据搜索性能问题，我们就需要专业，健壮，强大的全文搜索引擎。这里说到的全文搜索引擎指的是目前广泛应用的主流搜索引擎。\"]},\"3100\":{\"h\":\"工作原理\",\"t\":[\"它的工作原理是计算机索引程序通过扫描文章中的每一个词，对每一个词建立一个索引，指明该词在文章中出现的次数和位置，当用户查询时，检索程序就根据事先建立的索引进行查找，并将查找的结果反馈给用户的检索方式。这个过程类似于通过字典中的检索字表查字的过程。\"]},\"3101\":{\"h\":\"ES的数据格式\",\"t\":[\"Elasticsearch 是面向文档型数据库，一条数据在这里就是一个文档。\"]},\"3102\":{\"h\":\"ElasticSearch 与 MySQL对比\",\"t\":[\"为了方便理解，将 Elasticsearch 里存储文档数据和关系型数据库 MySQL 存储数据的概念进行一个类比\",\"1-3-1\",\"ES 里的 Index 可以看做一个库，而 Types 相当于表，Documents 则相当于表的行。\",\"这里 Types 的概念\"]},\"3103\":{\"h\":\"1-2. 环境准备\"},\"3104\":{\"h\":\"ES安装\",\"t\":[\"ElasticSearch官网\",\"下载地址\",\"不要选最新的版本，因为ES需要用到中文分词器插件，该插件的版本要和ES的版本完全对应，且一般比ES版本慢一些，比如当前ES最新版为8.8.2，而IK中文分词器版本为：8.7.0\"]},\"3105\":{\"h\":\"1. 系统\",\"t\":[\"Elasticsearch 分为 Linux 、MacOS 和 Windows 版本，先使用Windows环境作为学习和开发使用，生产时要部署到Linux服务器。\",\"Linux环境的部署，见后续章节。\"]},\"3106\":{\"h\":\"2. 安装软件\",\"t\":[\"该软件为绿色软件，将下载的压缩包解压后即可使用。\",\"目录结构如下：\",\"1-2-1\",\"bin：可执行脚本目录\",\"config：配置目录\",\"jdk：内置JDK目录\",\"lib：类库\",\"logs：日志目录\",\"modules：模块目录\",\"plugins：插件目录\",\"由目录结构可知，ElasticSearch是基于Java开发的。\"]},\"3107\":{\"h\":\"3. 启动服务\",\"t\":[\"解压后，进入 bin 文件目录，点击 elasticsearch.bat 文件启动 ES 服务\",\"由于ES内置了JDK，所以默认不会采用电脑里的JDK，而是用自己捆绑的JDK。\"]},\"3108\":{\"h\":\"4. 访问测试\",\"t\":[\"9300 端口为 Elasticsearch 集群间组件的通信端口\",\"9200 端口为浏览器访问的 http协议 RESTful 端口。\",\"打开浏览器输入地址：http://localhost:9200，进行访问\",\"访问结果如下：\",\"{ \\\"name\\\" : \\\"PC-20210318BCMF\\\", \\\"cluster_name\\\" : \\\"elasticsearch\\\", \\\"cluster_uuid\\\" : \\\"PbTqhy8eTVS2B7eO_0P_oA\\\", \\\"version\\\" : { \\\"number\\\" : \\\"8.8.1\\\", \\\"build_flavor\\\" : \\\"default\\\", \\\"build_type\\\" : \\\"zip\\\", \\\"build_hash\\\" : \\\"f8edfccba429b6477927a7c1ce1bc6729521305e\\\", \\\"build_date\\\" : \\\"2023-06-05T21:32:25.188464208Z\\\", \\\"build_snapshot\\\" : false, \\\"lucene_version\\\" : \\\"9.6.0\\\", \\\"minimum_wire_compatibility_version\\\" : \\\"7.17.0\\\", \\\"minimum_index_compatibility_version\\\" : \\\"7.0.0\\\" }, \\\"tagline\\\" : \\\"You Know, for Search\\\" } \"]},\"3109\":{\"h\":\"5. debug\"},\"3110\":{\"h\":\"取消安全验证\",\"t\":[\"警告\",\"对于一个未启动过的ES软件，配置文件中是没有安全验证相关的代码的，需要先启动一次，这些代码才会出现。\",\"同时：启动一次后，config目录下才会出现certs目录(证书)和elasticsearch.keystore文件。\",\"当启动Elasticsearch后，在浏览器输入地址 http://localhost:9200/，会产生报错。\",\"报错信息：received plaintext http traffic on an https channel, closing connection\",\"原因：Elasticsearch在Windows下开启了安全认证，虽然started成功，但访问http://localhost:9200/失败\",\"解决方案：找到config/目录下面的elasticsearch.yml配置文件，把安全认证开关从原先的true都改成false，实现免密登录访问即可，修改这两处都为false后：\",\"# Enable security features xpack.security.enabled: false # 这里由true改为false xpack.security.enrollment.enabled: true xpack.security.http.ssl: enabled: false # 这里由true改为false keystore.path: certs/http.p12 \"]},\"3111\":{\"h\":\"HTTP\",\"t\":[\"浏览器是通过HTTP协议向ElasticSearch服务器发送请求的。\",\"RESTFul：通过RESTFul风格访问ES服务器的资源\",\"JSON：通过JSON格式传递数据\",\"Postman：通过Postman工具进行数据访问的测试\"]},\"3112\":{\"h\":\"1-3. 应用场景\",\"t\":[\"所有涉及到搜索的场景都可以使用ES。\"]},\"3113\":{\"h\":\"1-4. 工作过程\",\"t\":[\"ES的工作过程分为两部分：\",\"创建文档 \",\"在某些场景进行数据，对数据进行分析\",\"将数据储存到ES，并建立索引\",\"查询文档 \",\"根据索引查询ES，返回命中的文档\",\"后续可能需要根据文档里保存的数据id查询MySQL\"]},\"3114\":{\"h\":\"1-5. ES 8\",\"t\":[\"ES8 于2022年2月11日发布。\",\"目前市面上主流的ES版本还是ES7.x 不过ES8.x更强大，易用。\",\"Elasticsearch 8.x的新特性\",\"减少内存堆使用：完全支持 ARM 架构，引入全新的方式以使用更少的存储空间，从而让每个节点托管更多的数据\",\"降低查询开销，在大规模部署中成效尤为明显\",\"提高日期直方图和搜索聚合的速度，增强了页面缓存的性能，并创建了一个新的“pre-filter”搜索短语\",\"增加对自然语言处理 (NLP) 模型的原生支持，让矢量搜索功能更容易实现，让客户和员工能够使用他们自己的文字和语言来搜索并收到高度相关的结果。\",\"直接在 Elasticsearch 中执行命名实体识别、情感分析、文本分类等，而无需使用额外的组件或进行编码\"]},\"3115\":{\"h\":\"2-1. 索引\",\"t\":[\"提示\",\"ES是基于索引，索引相当于关系型数据库里的 库。\"]},\"3116\":{\"h\":\"创建索引\",\"t\":[\"对比关系型数据库，创建索引就等同于创建数据库。\",\"创建方式：通过向ES服务器发送put请求来创建索引。\"]},\"3117\":{\"h\":\"1. 语法\",\"t\":[\"请求方式：put\",\"请求地址：http://ES服务器地址/要创建的索引名\"]},\"3118\":{\"h\":\"2. 示例\",\"t\":[\"通过postman发送put请求，请求地址为：http://localhost:9200/shopping\",\"2-1-1\",\"请求成功后，就在ES服务器中创建了名为shopping的索引（库）。\"]},\"3119\":{\"h\":\"3. 响应结果分析\",\"t\":[\"{ \\\"acknowledged\\\": true, //响应结果，true表示成功 \\\"shards_acknowledged\\\": true, //分片操作结果，true表示成功 \\\"index\\\": \\\"shopping\\\" //索引名称 } \",\"创建索引库的分片数默认 1 片\"]},\"3120\":{\"h\":\"4. put与post\",\"t\":[\"只能同put请求创建索引，不能通过post。使用post会报错。\",\"put操作是幂等性的（post不是），如果重复创建相同的索引，也会报错。\"]},\"3121\":{\"h\":\"查看某个索引\",\"t\":[\"查看索引向 ES 服务器发送的请求路径和创建索引是一致的。但是 HTTP 方法不一致。\",\"通过向ES服务器发送GET请求，来查看索引。\"]},\"3122\":{\"h\":\"1. 语法\",\"t\":[\"请求方式：GET\",\"请求地址：http://ES服务器地址/要查看的索引名\"]},\"3123\":{\"h\":\"2. 示例\",\"t\":[\"通过postman发送GET请求，请求地址为：http://localhost:9200/shopping\",\"查看ES服务器上的shopping索引\"]},\"3124\":{\"h\":\"3. 响应信息解析\",\"t\":[\"上述示例的响应信息如下：\",\"{ \\\"shopping\\\": { //索引名 \\\"aliases\\\": {}, //别名 \\\"mappings\\\": {},//映射 \\\"settings\\\": { //设置 \\\"index\\\": { //设置：索引 \\\"routing\\\": { //设置：索引->路由 \\\"allocation\\\": { \\\"include\\\": { \\\"_tier_preference\\\": \\\"data_content\\\" } } }, \\\"number_of_shards\\\": \\\"1\\\", //设置：索引->主分片数量 \\\"provided_name\\\": \\\"shopping\\\", //设置：索引->名称 \\\"creation_date\\\": \\\"1687746960161\\\", //设置：索引->创建时间 \\\"number_of_replicas\\\": \\\"1\\\", //设置：索引->副分片数量 \\\"uuid\\\": \\\"H6j6hlYfQDe8M4CCZpCniA\\\", //设置：索引->唯一标识 \\\"version\\\": { //设置：索引->版本 \\\"created\\\": \\\"8080199\\\" } } } } } \"]},\"3125\":{\"h\":\"查看所有索引\",\"t\":[\"让ES服务器返回所有索引的基本信息。\"]},\"3126\":{\"h\":\"1. 语法\",\"t\":[\"请求方式：GET 请求地址：http://ES服务器地址/_cat/indices?v\",\"2-1-2\",\"返回的数据格式类似于一个表格\"]},\"3127\":{\"h\":\"2. 返回数据解析\",\"t\":[\"表头\",\"含义\",\"health\",\"当前服务器健康状态：green(集群完整) yellow(单点正常、集群不完整) red(单点不正常)\",\"status\",\"索引打开、关闭状态\",\"index\",\"索引名\",\"uuid\",\"索引统一编号\",\"pri\",\"主分片数量\",\"rep\",\"副本数量\",\"docs.count\",\"可用文档数量\",\"docs.deleted\",\"文档删除状态（逻辑删除）\",\"store.size\",\"主分片和副分片整体占空间大小\",\"pri.store.size\",\"主分片占空间大小\"]},\"3128\":{\"h\":\"删除索引\",\"t\":[\"通过向ES发送DELETE请求，删除某个索引\"]},\"3129\":{\"h\":\"1. 语法\",\"t\":[\"请求方式：DELETE\",\"请求地址：http://ES服务器地址/要删除的索引名\",\"如果不指定索引名，直接删除，不会删除所有索引，而是会报错。\"]},\"3130\":{\"h\":\"2. 示例\",\"t\":[\"通过postman向ES服务器发送DELETE请求，删除shopping索引\",\"请求地址：http://localhost:9200/shopping\",\"返回值如下：\",\"{ \\\"acknowledged\\\": true } \",\"删除不存在的索引（包括已经删除了的），会报错\"]},\"3131\":{\"h\":\"2-2. 文档增删改\",\"t\":[\"提示\",\"ES中没有表的概念，文档相当于关系型数据库中的一行数据。\"]},\"3132\":{\"h\":\"创建文档\",\"t\":[\"创建好索引后，就可以向索引（库）中创建文档并添加数据了。\"]},\"3133\":{\"h\":\"1. 语法\",\"t\":[\"请求方式：POST\",\"请求地址：http://ES数据库地址/索引名/_doc\",\"请求体：JSON格式\",\"添加数据，必须有数据才行（没有会报错），数据通过JSON格式的请求体发送。\"]},\"3134\":{\"h\":\"2. 示例\",\"t\":[\"在 Postman 中，向 ES 服务器发 POST 请求 ：http://127.0.0.1:9200/shopping/_doc\",\"2-2-1\"]},\"3135\":{\"h\":\"3. 响应结果分析\",\"t\":[\"{ \\\"_index\\\": \\\"shopping\\\", //索引 \\\"_id\\\": \\\"o7K19YgBBr3LfT2KiQat\\\", //唯一标识 \\\"_version\\\": 1, //版本 \\\"result\\\": \\\"created\\\", //结果，created表示创建成功 \\\"_shards\\\": { //分片 \\\"total\\\": 2, //分片总数 \\\"successful\\\": 1, //分片是否成功，1表示成功 \\\"failed\\\": 0 //分片是否失败，0表示为未失败 }, \\\"_seq_no\\\": 0, \\\"_primary_term\\\": 1 } \"]},\"3136\":{\"h\":\"4. 自定义 _id\",\"t\":[\"提示\",\"_id是唯一标识，默认情况下，ES 服务器会随机生成一个。每次POST请求，都会随机生成一个，即使请求的内容完全相同。\",\"默认生成的_id是不容易记得，可以在添加数据时，手动指定一个id，此时的请求链接为：http://ES数据库地址/索引名/_doc/_id，如下：\",\"2-2-2\",\"如上，返回的id已经是自定义的id了，此时重复发送请求，返回的结果是一样的（因为ES不会再返回一个随机的_id）。\"]},\"3137\":{\"h\":\"5. POST与PUT\",\"t\":[\"PUT是幂等性的，POST不是。\",\"当没有手动指定_id时，相同请求的每次返回的结果是不同的（_id不同），此时只能使用POST请求，因为PUT是幂等性的。\",\"当手动自定了_id时，相同请求的每次返回的结果是相同的（_id是固定的），此时既可以使用POST请求，也可以使用PUT请求。\"]},\"3138\":{\"h\":\"查看文档\",\"t\":[\"提示\",\"为了方便查看文档增删改的结果，先了解两个简单查看文档的方法。\",\"详细的文档查询详见下章：文档查询\",\"查看文档就是查看数据，通过文档的唯一标识_id进行查看，也可以查看所有的文档。\",\"类似于 MySQL 中数据的主键查询\"]},\"3139\":{\"h\":\"1. 语法\",\"t\":[\"请求方式：GET\",\"请求地址：http://ES数据库地址/索引名/_doc/要查看的文档_id\"]},\"3140\":{\"h\":\"2. 示例\",\"t\":[\"在 Postman 中，向 ES 服务器发 GET 请求 ：http://127.0.0.1:9200/shopping/_doc/1000\",\"2-2-3\"]},\"3141\":{\"h\":\"3. 响应结果分析\",\"t\":[\"正常查询到结果的响应信息如下：\",\"{ \\\"_index\\\": \\\"shopping\\\", // 索引 \\\"_id\\\": \\\"1000\\\", \\\"_version\\\": 1, \\\"_seq_no\\\": 2, \\\"_primary_term\\\": 1, \\\"found\\\": true, // 查询结果： true 表示查找到，false 表示未查找到 \\\"_source\\\": { // 文档原信息 \\\"title\\\": \\\"小米手机\\\", \\\"category\\\": \\\"小米\\\", \\\"images\\\": \\\"http://www.gulixueyuan.com/xm.jpg\\\", \\\"price\\\": 3999.00 } } \",\"如果查询不到结果，相应信息如下：\",\"{ \\\"_index\\\": \\\"shopping\\\", \\\"_id\\\": \\\"10000\\\", \\\"found\\\": false } \"]},\"3142\":{\"h\":\"4. 查看索引下的全部文档\",\"t\":[\"请求方式：GET\",\"请求地址：http://ES数据库地址/索引名/_search\",\"2-2-4\",\"查询结果如下：\",\"{ \\\"took\\\": 155, //耗时，单位ms \\\"timed_out\\\": false, //是否超时 \\\"_shards\\\": { \\\"total\\\": 1, \\\"successful\\\": 1, \\\"skipped\\\": 0, \\\"failed\\\": 0 }, \\\"hits\\\": { //查询命中 \\\"total\\\": { //统计信息 \\\"value\\\": 2, //结果条数 \\\"relation\\\": \\\"eq\\\" }, \\\"max_score\\\": 1.0, \\\"hits\\\": [ { \\\"_index\\\": \\\"shopping\\\", \\\"_id\\\": \\\"o7K19YgBBr3LfT2KiQat\\\", \\\"_score\\\": 1.0, \\\"_source\\\": { \\\"title\\\": \\\"小米手机\\\", \\\"category\\\": \\\"小米\\\", \\\"images\\\": \\\"http://www.gulixueyuan.com/xm.jpg\\\", \\\"price\\\": 3999.00 } }, { \\\"_index\\\": \\\"shopping\\\", \\\"_id\\\": \\\"1000\\\", \\\"_score\\\": 1.0, \\\"_source\\\": { \\\"title\\\": \\\"小米手机\\\", \\\"category\\\": \\\"小米\\\", \\\"images\\\": \\\"http://www.gulixueyuan.com/xm.jpg\\\", \\\"price\\\": 3999.00 } } ] } } \",\"之前创建文档时，对相同的请求体和请求链接发送了两次请求，一次返回系统自定义的_id，一次手动指定的_id，因此查询到了两条数据（仅_id不同）。\"]},\"3143\":{\"h\":\"修改文档\",\"t\":[\"分为两种修改方式：\",\"完全覆盖：整个文档的数据全部替换（_还是原来的文档，就是数据全变了）\",\"局部修改：仅修改文档中的某条数据，其他的数据不变\",\"修改文档指的是修改文档的数据（请求体），而不是其他内容（如_id）。\"]},\"3144\":{\"h\":\"1. 完全覆盖\",\"t\":[\"和新增文档一样，输入相同的 URL 地址请求，如果请求体变化，会将原有的数据内容覆盖\",\"请求方式：POST\",\"请求地址：http://ES数据库地址/索引名/_doc/待修改的文档_id\",\"2-2-5\",\"响应结果里的result:\\\"updated\\\"表示更新成功。\",\"{ \\\"_index\\\": \\\"shopping\\\", \\\"_id\\\": \\\"1000\\\", \\\"_version\\\": 2, // 版本：修改一次版本就会+1 \\\"result\\\": \\\"updated\\\", // updated 表示数据被更新 \\\"_shards\\\": { \\\"total\\\": 2, \\\"successful\\\": 1, \\\"failed\\\": 0 }, \\\"_seq_no\\\": 3, \\\"_primary_term\\\": 1 } \"]},\"3145\":{\"h\":\"2. 局部数据修改\",\"t\":[\"修改数据时，也可以只修改某一给条数据的局部信息\",\"请求方式：POST\",\"请求地址：http://ES数据库地址/索引名/_update/待修改的文档_id\",\"此时请求体的格式是固定的：\",\"{ \\\"doc\\\":{ \\\"待修改的字段\\\": 新的值， ... } } \"]},\"3146\":{\"h\":\"2.1 示例\",\"t\":[\"修改了文档数据中的title和price\",\"2-2-6\",\"响应结果和完全覆盖一样，result:\\\"updated\\\"表示更新成功。\"]},\"3147\":{\"h\":\"删除文档\",\"t\":[\"删除文档，底层是逻辑删除（而非从磁盘上删除）。\",\"删除文档是根据文档的_id进行删除的。\",\"请求方式：DELETE\",\"请求地址：http://ES数据库地址/索引名/_doc/待删除的文档_id\"]},\"3148\":{\"h\":\"1. 删除示例\",\"t\":[\"在 Postman 中，向 ES 服务器发 DELETE 请求 ：http://127.0.0.1:9200/shopping/_doc/1000\",\"2-2-7\"]},\"3149\":{\"h\":\"1.1 响应结果分析\",\"t\":[\"{ \\\"_index\\\": \\\"shopping\\\", \\\"_id\\\": \\\"1000\\\", \\\"_version\\\": 7, //版本：对数据的操作，都会更新版本 \\\"result\\\": \\\"deleted\\\", //结果： deleted 表示数据被标记为删除 \\\"_shards\\\": { \\\"total\\\": 2, \\\"successful\\\": 1, \\\"failed\\\": 0 }, \\\"_seq_no\\\": 8, \\\"_primary_term\\\": 1 } \"]},\"3150\":{\"h\":\"1.2 查询已删除的文档\",\"t\":[\"响应结果如下：found:false表示文档数据已被删除\",\"{ \\\"_index\\\": \\\"shopping\\\", \\\"_id\\\": \\\"1000\\\", \\\"found\\\": false } \"]},\"3151\":{\"h\":\"1.3 删除不存在的文档\",\"t\":[\"响应的结果中有result:\\\"not_found\\\"，表示待删除的文档未找到。\"]},\"3152\":{\"h\":\"2. 条件删除\",\"t\":[\"一般删除数据都是根据文档的唯一性标识进行删除，实际操作时，也可以根据条件对多条数 据进行删除（所有满足条件的文档都会被删除）。\",\"请求方式：POST 一定要注意是POST请求，不是DELETE请求\",\"请求地址：http://ES数据库地址/索引名/_delete_by_query\",\"在请求体中，输入查询语句（详见：高级查询）\"]},\"3153\":{\"h\":\"2.1 示例\",\"t\":[\"查询删除price值为5000的文档。\",\"请求体内容为：\",\"{ \\\"query\\\":{ \\\"match\\\":{ \\\"price\\\":5000 } } } \",\"在postman中向ES服务器发POST请求: http://localhost:9200/shopping/_delete_by_query\",\"2-2-8\"]},\"3154\":{\"h\":\"2.2 响应结果分析\",\"t\":[\"{ \\\"took\\\": 985, // 耗时ms \\\"timed_out\\\": false, \\\"total\\\": 2, //命中的文档总数 \\\"deleted\\\": 2, //删除数量 \\\"batches\\\": 1, \\\"version_conflicts\\\": 0, \\\"noops\\\": 0, \\\"retries\\\": { \\\"bulk\\\": 0, \\\"search\\\": 0 }, \\\"throttled_millis\\\": 0, \\\"requests_per_second\\\": -1.0, \\\"throttled_until_millis\\\": 0, \\\"failures\\\": [] } \"]},\"3155\":{\"h\":\"2-3. 文档查询\"},\"3156\":{\"h\":\"基本查询\",\"t\":[\"通过文档的唯一标识_id进行查看，也可以查看所有的文档。\"]},\"3157\":{\"h\":\"1. 通过主键 _id 查看\",\"t\":[\"请求方式：GET\",\"请求地址：http://ES数据库地址/索引名/_doc/要查看的文档_id\"]},\"3158\":{\"h\":\"1.2 示例\",\"t\":[\"在 Postman 中，向 ES 服务器发 GET 请求 ：http://127.0.0.1:9200/shopping/_doc/1000\",\"2-2-3\"]},\"3159\":{\"h\":\"1.3. 响应结果分析\",\"t\":[\"正常查询到结果的响应信息如下：\",\"{ \\\"_index\\\": \\\"shopping\\\", // 索引 \\\"_id\\\": \\\"1000\\\", \\\"_version\\\": 1, \\\"_seq_no\\\": 2, \\\"_primary_term\\\": 1, \\\"found\\\": true, // 查询结果： true 表示查找到，false 表示未查找到 \\\"_source\\\": { // 文档原信息 \\\"title\\\": \\\"小米手机\\\", \\\"category\\\": \\\"小米\\\", \\\"images\\\": \\\"http://www.gulixueyuan.com/xm.jpg\\\", \\\"price\\\": 3999.00 } } \",\"如果查询不到结果，响应信息如下：\",\"{ \\\"_index\\\": \\\"shopping\\\", \\\"_id\\\": \\\"10000\\\", \\\"found\\\": false } \"]},\"3160\":{\"h\":\"2. 查看索引下的全部文档\",\"t\":[\"请求方式：GET\",\"请求地址：http://ES数据库地址/索引名/_search\",\"2-2-4\",\"查询结果如下：\",\"{ \\\"took\\\": 155, //耗时，单位ms \\\"timed_out\\\": false, //是否超时 \\\"_shards\\\": { \\\"total\\\": 1, \\\"successful\\\": 1, \\\"skipped\\\": 0, \\\"failed\\\": 0 }, \\\"hits\\\": { //查询命中 \\\"total\\\": { //统计信息 \\\"value\\\": 2, //结果条数 \\\"relation\\\": \\\"eq\\\" }, \\\"max_score\\\": 1.0, \\\"hits\\\": [ { \\\"_index\\\": \\\"shopping\\\", \\\"_id\\\": \\\"o7K19YgBBr3LfT2KiQat\\\", \\\"_score\\\": 1.0, \\\"_source\\\": { \\\"title\\\": \\\"小米手机\\\", \\\"category\\\": \\\"小米\\\", \\\"images\\\": \\\"http://www.gulixueyuan.com/xm.jpg\\\", \\\"price\\\": 3999.00 } }, { \\\"_index\\\": \\\"shopping\\\", \\\"_id\\\": \\\"1000\\\", \\\"_score\\\": 1.0, \\\"_source\\\": { \\\"title\\\": \\\"小米手机\\\", \\\"category\\\": \\\"小米\\\", \\\"images\\\": \\\"http://www.gulixueyuan.com/xm.jpg\\\", \\\"price\\\": 3999.00 } } ] } } \",\"之前创建文档时，对相同的请求体和请求链接发送了两次请求，一次返回系统自定义的_id，一次手动指定的_id，因此查询到了两条数据（仅_id不同）。\"]},\"3161\":{\"h\":\"条件查询\",\"t\":[\"通过请求体的查询条件，匹配查询满足条件的文档数据。\"]},\"3162\":{\"h\":\"1. 语法\",\"t\":[\"请求方式：GET\",\"请求地址：http://ES数据库地址/索引名/_search\",\"请求条件一般通过JSON格式写在请求体中，语法如下：\",\"{ \\\"query\\\":{ \\\"match\\\":{ //设置查询的条件 \\\"字段\\\":\\\"字段的值\\\" } } } \"]},\"3163\":{\"h\":\"2. 查询示例\",\"t\":[\"查询price为5000的数据：\",\"2-4-1\"]},\"3164\":{\"h\":\"2.1 服务器响应结果解析\",\"t\":[\"{ \\\"took\\\": 546, \\\"timed_out\\\": false, \\\"_shards\\\": { \\\"total\\\": 1, \\\"successful\\\": 1, //成功 \\\"skipped\\\": 0, //忽略 \\\"failed\\\": 0 //失败 }, \\\"hits\\\": { //查询到的结果 \\\"total\\\": { \\\"value\\\": 2, //结果总数 \\\"relation\\\": \\\"eq\\\" //计数规则：eq表示计数准确，gte 表示计数不准确 }, \\\"max_score\\\": 1.0, //匹配度分值 \\\"hits\\\": [ //结果集合 { \\\"_index\\\": \\\"shopping\\\", \\\"_id\\\": \\\"1000\\\", \\\"_score\\\": 1.0, \\\"_source\\\": { \\\"title\\\": \\\"小米手机\\\", \\\"category\\\": \\\"小米\\\", \\\"price\\\": 5000 } }, { \\\"_index\\\": \\\"shopping\\\", \\\"_id\\\": \\\"6000\\\", \\\"_score\\\": 1.0, \\\"_source\\\": { \\\"title\\\": \\\"苹果手机\\\", \\\"category\\\": \\\"iPhone\\\", \\\"price\\\": 5000 } } ] } } \"]},\"3165\":{\"h\":\"3. 查询所有数据（全查询）\",\"t\":[\"不设置请求体，或设置如下请求体，将查询当前索引下的所有文档\",\"{ \\\"query\\\":{ \\\"match_all\\\":{} //查询所有文档 } } \"]},\"3166\":{\"h\":\"3.1 示例\",\"t\":[\"2-4-2\"]},\"3167\":{\"h\":\"4. 语法总结\",\"t\":[\"query：代表一个查询对象，里面可以有不同的查询属性\",\"match：查询类型\",\"查询条件：根据不同的查询类型，有不同的查询条件写法\"]},\"3168\":{\"h\":\"多条件查询\",\"t\":[\"又称组合查询，根据多个查询条件进行查询，和MySQL的组合查询类似。\"]},\"3169\":{\"h\":\"1. 语法\",\"t\":[\"通过bool关键字进行组合查询，有多种组合方式：\",\"must：必须，多个条件必须全部符合\",\"must_not：必须不，多个添加必须都不符合\",\"should：或，多个条只要符合一个即可\",\"语法格式如下：\",\"{ \\\"query\\\":{ \\\"bool\\\":{ //组合查询的关键字 \\\"组合方式\\\":[ { //第一个查询条件 \\\"match\\\":{ //查询条件 \\\"字段\\\":字段的值 } }, { //第二个查询条件 }, { ...//可以是1个或多个查询条件 } ], ...//多种组合方式可以同时采用 } } } \"]},\"3170\":{\"h\":\"2. 示例\",\"t\":[\"查询price为5000，同时category为iPhone的文档。\",\"2-4-5\"]},\"3171\":{\"h\":\"范围查询\",\"t\":[\"根据值的范围进行查询，比如价格和年龄的范围。\"]},\"3172\":{\"h\":\"1. 语法\",\"t\":[\"通过range关键字进行范围查询，range查询运行以下字符：\",\"gt：>，大于\",\"gte：>=，大于等于\",\"lt：<，小于\",\"lte：<=，小于等于\",\"查询条件的写法:\",\"{ \\\"query\\\":{ \\\"range\\\":{ \\\"待查询的字段\\\":{ \\\"范围查询的字符\\\": 用于范围比较的值 } } } } \"]},\"3173\":{\"h\":\"2. 示例\",\"t\":[\"查询price>6500的文档。\",\"2-4-6\"]},\"3174\":{\"h\":\"完全匹配\",\"t\":[\"默认查询的方式是“全文检索”，可以手动设置为“完全匹配”。\"]},\"3175\":{\"h\":\"1. 全文检索\",\"t\":[\"当保存文档数据时，ES会将数据文字进行分词拆解操作，并将拆解后的数据报错到倒排索引当中，因此只需要使用文字的一部分，也能查询出数据，这种检索方式就是“全文检索”\",\"PS: 中文是按照汉字进行拆分的，英文是按照单词进行拆分的。一定注意英文是按照单词进行拆分的而不是字母\"]},\"3176\":{\"h\":\"1.1 效果\",\"t\":[\"查询条件是字段值的一部分，也可以匹配到 \",\"如：查询\\\"category\\\":\\\"红米\\\"，会返回\\\"category\\\":\\\"小米\\\"的结果\",\"查询条件被拆解开分别进行各自的匹配 \",\"如：查询\\\"category\\\":\\\"小 iphone\\\"，会返回\\\"category\\\":\\\"iphone\\\"和\\\"category\\\":\\\"小米\\\"的结果\"]},\"3177\":{\"h\":\"1.2 示例\",\"t\":[\"查询\\\"category\\\":\\\"红米\\\"，返回了\\\"category\\\":\\\"小米\\\"的结果\",\"2-4-7\"]},\"3178\":{\"h\":\"2. 完全匹配查询\",\"t\":[\"完全匹配就是禁止全文检索，查询条件和查询结果要完全对应。\",\"可以通过match_phrase关键字取代match关键字，强制查询结果为完全匹配。\"]},\"3179\":{\"h\":\"2.1 示例\",\"t\":[\"使用match_phrase时，便不再能进行全文检索\",\"2-4-8\"]},\"3180\":{\"h\":\"2.2 值的一部分\",\"t\":[\"即使开启了完全匹配查询，查询条件是值的一部分，也可以返回查询结果。\",\"比如：查询\\\"category\\\":\\\"米\\\"，会返回\\\"category\\\":\\\"小米\\\"的结果\"]},\"3181\":{\"h\":\"分页\",\"t\":[\"对查询结果进行分页，和MySQL里的分页差不多。\"]},\"3182\":{\"h\":\"1. 语法\",\"t\":[\"在请求条件中，通过from和size字段进行分页查询。\",\"from：当前页的起始索引，默认从 0 开始 \",\"分页公式：from = (pageNum - 1) * size\",\"size：每页显示多少条\",\"{ \\\"query\\\":{...}, //查询条件 \\\"from\\\":0, //起始索引 \\\"size\\\":3 //每页显示的条数 } \"]},\"3183\":{\"h\":\"2. 示例\",\"t\":[\"在 Postman 中，向 ES 服务器发 GET 请求 ：http://127.0.0.1:9200/shopping/_search\",\"每页显示3条数据，查询第二页的数据（from = 3）\",\"2-4-3\"]},\"3184\":{\"h\":\"排序\",\"t\":[\"对查询的结果进行排序，和MySQL里的排序差不多。\"]},\"3185\":{\"h\":\"1. 语法\",\"t\":[\"在请求条件中，通过sort定义排序，可以有多个排序字段，并通过order指定排序方式\",\"desc：降序\",\"asc：升序\",\"{ \\\"query\\\":{...}, //查询条件 // sort: 定义排序 \\\"sort\\\":[ //因为可以多个字段排序，所以是数组 { \\\"排序的字段\\\":{ \\\"order\\\":\\\"desc|asc\\\" } }, ...//其他排序的字段 ] } \",\"当有多个排序字段时，会按定义的顺序进行排序，当上一个字段相同时，再按照下一个定义的排序字段进行排序\"]},\"3186\":{\"h\":\"2. 示例\",\"t\":[\"在 Postman 中，向 ES 服务器发 GET 请求 ：http://127.0.0.1:9200/shopping/_search\",\"查询结果根据price字段进行倒叙排序。\",\"2-4-4\"]},\"3187\":{\"h\":\"聚合操作\",\"t\":[\"聚合允许使用者对 es 文档进行统计分析，类似与关系型数据库中的 group by和一系列聚合函数。\",\"包括以下具体的操作：\",\"max：对某个字段取最大值\",\"min：对某个字段取最小值\",\"sum：对某个字段求和\",\"avg：对某个字段取平均值\",\"cardinality：对某个字段的值进行去重之后再取总数\",\"state：聚合，对某个字段一次性返回 count，max，min，avg 和 sum 五个指标\",\"group：进行分组\"]},\"3188\":{\"h\":\"1.语法\",\"t\":[\"请求方式：GET\",\"请求地址：http://ES数据库地址/索引名/_search\",\"聚合操作要使用aggs关键字定义，各个聚合操作的语法如下：\",\"{ \\\"aggs\\\":{ //max：取最大值 \\\"聚合查询结果名字\\\":{ \\\"max\\\":{ \\\"field\\\": \\\"字段名\\\" } }, //min：取最小值 \\\"聚合查询结果名字\\\":{ \\\"min\\\":{ \\\"field\\\": \\\"字段名\\\" } }, //sum：对某个字段求和 \\\"聚合查询结果名字\\\":{ \\\"sum\\\":{ \\\"field\\\": \\\"字段名\\\" } }, //avg：对某个字段取平均值 \\\"聚合查询结果名字\\\":{ \\\"avg\\\":{ \\\"field\\\": \\\"字段名\\\" } }, //cardinality：对某个字段的值进行去重之后再取总数 \\\"聚合查询结果名字\\\":{ \\\"cardinality\\\":{ \\\"field\\\": \\\"字段名\\\" } }, //stats：对某个字段一次性返回 count，max，min，avg 和 sum 五个指标 \\\"聚合查询结果名字\\\":{ \\\"stats\\\":{ \\\"field\\\": \\\"字段名\\\" } }, //group：对查询结果分组 \\\"聚合查询结果名字\\\":{ \\\"group\\\":{ \\\"field\\\": \\\"字段名\\\" } }, }, //聚合查询的同时也会返回所有的数据信息，设置size为0，可以只返回聚合结果 \\\"size\\\": 0 } \"]},\"3189\":{\"h\":\"2. 示例\",\"t\":[\"在 Postman 中，向 ES 服务器发 GET 请求 ：http://127.0.0.1:9200/student/_search\",\"查询price字段的所有聚合数据，并针对price进行分组。\"]},\"3190\":{\"h\":\"2.1 请求体\",\"t\":[\"{ \\\"aggs\\\":{ \\\"stats_price\\\":{ \\\"stats\\\":{ \\\"field\\\":\\\"price\\\" } }, \\\"group_category\\\":{ \\\"terms\\\":{ \\\"field\\\":\\\"price\\\" } } }, \\\"size\\\":0 } \"]},\"3191\":{\"h\":\"2.2 响应体\",\"t\":[\"{ \\\"took\\\": 2, \\\"timed_out\\\": false, \\\"_shards\\\": { \\\"total\\\": 1, \\\"successful\\\": 1, \\\"skipped\\\": 0, \\\"failed\\\": 0 }, \\\"hits\\\": { \\\"total\\\": { \\\"value\\\": 8, \\\"relation\\\": \\\"eq\\\" }, \\\"max_score\\\": null, \\\"hits\\\": [] }, \\\"aggregations\\\": { \\\"group_category\\\": { \\\"doc_count_error_upper_bound\\\": 0, \\\"sum_other_doc_count\\\": 0, \\\"buckets\\\": [ { \\\"key\\\": 5000, \\\"doc_count\\\": 2 }, { \\\"key\\\": 6000, \\\"doc_count\\\": 2 }, { \\\"key\\\": 7000, \\\"doc_count\\\": 2 }, { \\\"key\\\": 8000, \\\"doc_count\\\": 2 } ] }, \\\"stats_price\\\": { \\\"count\\\": 8, \\\"min\\\": 5000.0, \\\"max\\\": 8000.0, \\\"avg\\\": 6500.0, \\\"sum\\\": 52000.0 } } } \"]},\"3192\":{\"h\":\"高亮显示\",\"t\":[\"类似于百度，进行关键字搜索时，搜索出的内容中的关键字会进行高亮显示。\"]},\"3193\":{\"h\":\"1. 语法\",\"t\":[\"通过hightlight关键字，进行开启高亮显示。同时可以在hightlight中设置高亮显示的标签和高亮显示的字段。\",\"查询条件的写法:\",\"{ \\\"query\\\":{ \\\"match\\\":{...}//查询条件 }, \\\"highlight\\\":{ //开启高亮查询 \\\"fields\\\":{ \\\"需要高亮显示的字段\\\":{} //实测该字段必须出现在查询条件中 }, //可以进行样式配置，不配置就采用默认的 \\\"pre_tags\\\": \\\"<font color='red'>\\\", \\\"post_tags\\\": \\\"</font>\\\" } } \",\"默认的高亮标签是<em>结果中的关键字</em>\"]},\"3194\":{\"h\":\"2. 示例\",\"t\":[\"查询category:\\\"米\\\"，并对category字段里的米字进行高亮显示\",\"2-4-9\"]},\"3195\":{\"h\":\"2-4. 映射\",\"t\":[\"什么是映射\",\"映射类似于数据库(database)中的表结构(table)。\",\"创建数据库表需要设置字段名称，类型，长度，约束等；索引库也一样，需要知道这个类型下有哪些字段，每个字段有哪些约束信息，这就叫做映射(mapping)\"]},\"3196\":{\"h\":\"创建映射\",\"t\":[\"创建完索引（库）后，就可以为索引（库）添加映射信息了。\"]},\"3197\":{\"h\":\"1. 语法\",\"t\":[\"请求方式：PUT\",\"请求地址：http://ES数据库地址/索引名/_mapping\",\"映射信息通过JSON格式的请求体添加，请求体语法：\",\"{ \\\"properties\\\": { //表示添加映射 //可以添加多个映射，键为字段名，值为对象格式的映射信息 \\\"字段名\\\":{ //为uname字段添加映射 //type 为字段类型：text=可以全文检索，keyword=要完全匹配 \\\"type\\\": \\\"text\\\" , //index 表示是否创建索引，true=创建，false=不创建 \\\"index\\\": true, } } } \",\"字段名：随便写，字段名的值是一个对象，用来自定很多属性\",\"type：类型，Elasticsearch 中支持的数据类型非常丰富，常见的有以下几种 \",\"字符串 \",\"text：可分词，支持全文检索\",\"keyword：不可分词，数据必须进行完全匹配\",\"其他类型：这些不是太常用 \",\"Numerical：数字类型，包含多种子类型\",\"Date：日期类型\",\"Array：数组类型\",\"Object：对象类型\",\"index：是否索引，默认为true（也就是默认所有字段都会被索引） \",\"true：字段会被索引，可以用来进行搜索\",\"false：字段不会被索引，不能用来搜索\",\"store：是否将数据进行独立存储，默认为 false \",\"原始的文本会存储在_source 里面，默认情况下其他提取出来的字段都不是独立存储的，是从_source 里面提取出来的。当然你也可以独立的存储某个字段，只要设置\\\"store\\\": true 即可，获取独立存储的字段要比从_source 中解析快得多，但是也会占用更多的空间，所以要根据实际业务需求来设置。\",\"analyzer：分词器\"]},\"3198\":{\"h\":\"2. 示例\",\"t\":[\"有个User索引，包含三个字段：name，gender和tel，为user索引创建映射\",\"请求体：\",\"{ \\\"properties\\\":{ \\\"uname\\\":{ \\\"type\\\": \\\"text\\\", \\\"index\\\": true }, \\\"gender\\\":{ \\\"type\\\": \\\"keyword\\\", \\\"index\\\": true }, \\\"tel\\\":{ \\\"type\\\":\\\"keyword\\\", \\\"index\\\": false } } } \",\"响应：\",\"{ \\\"acknowledged\\\": true //表示创建成功 } \"]},\"3199\":{\"h\":\"查看映射\",\"t\":[\"查看索引中创建的映射，请求地址和创建映射相同，只是请求方式变成了GET。\",\"查询结果:\",\"{ \\\"user\\\": { \\\"mappings\\\": { \\\"properties\\\": { \\\"gender\\\": { \\\"type\\\": \\\"keyword\\\" }, \\\"tel\\\": { \\\"type\\\": \\\"keyword\\\", \\\"index\\\": false }, \\\"uname\\\": { \\\"type\\\": \\\"text\\\" } } } } } \"]},\"3200\":{\"h\":\"映射的效果\",\"t\":[\"想索引中插入数据后，插入的数据就会被映射限制。\",\"type：keyword类型的字段，无法进行分词查询（全文检索），只能进行完全匹配\",\"index：如果为false，将无法通过该字段进行查询。\"]},\"3201\":{\"h\":\"3-1. 配置\",\"t\":[\"警告\",\"ElasticSearch 7.x版本和ElasticSearch 8.x 版本的JavaAPI 使用相差很大，这里都列出来。\"]},\"3202\":{\"h\":\"Java API\",\"t\":[\"Elasticsearch 软件是由 Java 语言开发的，所以也可以通过 Java API 的方式对 Elasticsearch 服务进行访问 。\"]},\"3203\":{\"h\":\"搭建项目\",\"t\":[\"搭建普通的Java项目或SpringBoot项目即可。\",\"搭建完项目后，创建ESTest类用于测试JavaAPI\"]},\"3204\":{\"h\":\"ES 7.x\"},\"3205\":{\"h\":\"1. 依赖\",\"t\":[\"ES有关的依赖如下：\",\"<!-- ES 服务端 --> <dependency> <groupId>org.elasticsearch</groupId> <artifactId>elasticsearch</artifactId> <version>8.8.1</version> </dependency> <!-- ES 客户端 --> <dependency> <groupId>org.elasticsearch.client</groupId> <artifactId>elasticsearch-rest-client</artifactId> <version>8.8.1</version> </dependency> \"]},\"3206\":{\"h\":\"2. 客户端对象\",\"t\":[\"创建客户端对象用于访问ES服务器。\",\"package com.sgugo.es; public class ESTestOne { @SneakyThrows //忽略了异常的处理 public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); // 关闭ES 客户端 esClient.close(); } } \"]},\"3207\":{\"h\":\"ES 8.x\"},\"3208\":{\"h\":\"3-2. 索引\"},\"3209\":{\"h\":\"1. 创建索引\",\"t\":[\"代码如下：\",\"public class ESTestOne { @SneakyThrows public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); //创建索引 //创建索引请求对象 CreateIndexRequest request = new CreateIndexRequest(\\\"user\\\"); //发送请求，创建索引,获取响应对象 CreateIndexResponse response = esClient.indices() .create(request, RequestOptions.DEFAULT); //查看操作状态：检测索引是否创建成功 boolean acknowledged = response.isAcknowledged(); System.out.println(acknowledged); // 控制台打印：true //关闭 ES 客户端 esClient.close(); } } \"]},\"3210\":{\"h\":\"1.1 debug\",\"t\":[\"运行代码时可能会报错：Exception in thread \\\"main\\\" ...[Elasticsearch exception [... [include_type_name]]]\",\"原因：CreateIndexRequest 对象有两个，如果导错包，就会报错。\",\"正确的包：import org.elasticsearch.client.indices.CreateIndexRequest;\",\"错误的包：import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;\"]},\"3211\":{\"h\":\"2. 查看索引\",\"t\":[\"代码如下：\",\"public class ESTestTwo { @SneakyThrows public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); //查询索引：请求对象 GetIndexRequest request = new GetIndexRequest(\\\"user\\\"); //发送请求，获取查询结果 GetIndexResponse response = esClient.indices() .get(request, RequestOptions.DEFAULT); //查看索引的：别名、映射和设置 System.out.println(\\\"Aliases查询结果：\\\"+response.getAliases()); System.out.println(\\\"Mappings查询结果：\\\"+response.getMappings()); System.out.println(\\\"Mappings查询结果：\\\"+response.getSettings()); //关闭 ES 客户端 esClient.close(); } } \"]},\"3212\":{\"h\":\"3. 删除索引\",\"t\":[\"代码如下：\",\"public class ESTestTwo { @SneakyThrows public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); //删除索引 DeleteIndexRequest request = new DeleteIndexRequest(\\\"user\\\"); //发送删除所以你的请求，获取响应结果 AcknowledgedResponse response = esClient.indices() .delete(request, RequestOptions.DEFAULT); //查看响应状态：删除操作是否成功 System.out.println(response.isAcknowledged()) //关闭 ES 客户端 esClient.close(); } } \"]},\"3213\":{\"h\":\"3-3. 文档增删改\"},\"3214\":{\"h\":\"新增文档\",\"t\":[\"代码如下：\",\"public class ESTest3 { @SneakyThrows public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); //新增文档 //创建请求对象 IndexRequest request = new IndexRequest(); //指明请求对象的关联的索引，并手动设置一个_id request.index(\\\"user\\\").id(\\\"1001\\\"); //实例化数据对象，该对象转为JSON格式后，就是要添加的文档数据 User user = new User(); user.setName(\\\"Aaron\\\"); user.setAge(20); user.setGender(\\\"male\\\"); //使用ObjectMapper将数据对象转为JSON格式：向ES中插入数据必须是JSON格式 ObjectMapper mapper = new ObjectMapper(); String userJson = mapper.writeValueAsString(user); //将json数据作为请求体与请求对象关联 request.source(userJson, XContentType.JSON); //发送请求，获取响应对象 IndexResponse response = esClient.index(request, RequestOptions.DEFAULT); //查看返回的结果 System.out.println(response.getResult()); //关闭 ES 客户端 esClient.close(); } } \"]},\"3215\":{\"h\":\"1. 数据对象\",\"t\":[\"在Java中储存数据，一般要创建一个数据对象，这里创建了一个JavaBean User\",\"public class User { private String name; private String gender; private Integer age; //getter & setter } \",\"并不是强制使用数据对象，直接手写JSON字符串作为source方法的第一个参数也可以。\"]},\"3216\":{\"h\":\"2. ObjectMapper\",\"t\":[\"向ES插入的数据必须是JSON个格式，因此需要将Java对象转成JSON字符串。\",\"ObjectMapper是Jackson依赖里的类，因此需要先导入依赖。\",\"<!--工具：Java对象转JSON --> <dependency> <groupId>com.fasterxml.jackson.core</groupId> <artifactId>jackson-databind</artifactId> <version>2.15.2</version> </dependency> \"]},\"3217\":{\"h\":\"修改文档\",\"t\":[\"需要UpdateRequest请求对象，代码如下：\",\"public class ESTest3 { @SneakyThrows public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); //修改数据：这里指的是局部修改 //创建请求对象：UpdateRequest UpdateRequest request = new UpdateRequest(); //指定要修改的索引和文档的_id request.index(\\\"user\\\").id(\\\"1001\\\"); //指定要修改的内容：可以依次指定多个要修改的字段 request.doc(XContentType.JSON,\\\"name\\\",\\\"Victor\\\",\\\"gender\\\",\\\"female\\\"); //发送请求，获取请求对象 UpdateResponse response = esClient.update(request, RequestOptions.DEFAULT); //查看请求的结果 System.out.println(response.getResult()); //UPDATE //关闭 ES 客户端 esClient.close(); } } \"]},\"3218\":{\"h\":\"删除文档\",\"t\":[\"根据 _id 删除文档，需要DeleteRequest请求对象，代码如下：\",\"public class ESTest3 { @SneakyThrows public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); //根据_id删除文档 //创建请求对象：DeleteRequest DeleteRequest request = new DeleteRequest(); //关联要删除的索引和文档_id request.index(\\\"user\\\").id(\\\"1001\\\"); //发送请求，获取响应结果 DeleteResponse response = esClient.delete(request, RequestOptions.DEFAULT); //打印操作的结果 System.out.println(response.getResult); //DELETE //关闭 ES 客户端 esClient.close(); } } \"]},\"3219\":{\"h\":\"批量操作\",\"t\":[\"需要使用BulkRequest请求对象，该对象通过add方法，添加多个普通的请求对象，从而实现将多个普通的请求对象，一次性进行请求。\"]},\"3220\":{\"h\":\"1. 批量新增文档\",\"t\":[\"需要结合BulkRequest请求对象和IndexRequest请求对象，代码如下：\",\"public class ESTest3 { @SneakyThrows public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); //批量新增文档 //创建请求对象：BulkRequest() BulkRequest request = new BulkRequest(); //添加文档数据：需要使用IndexRequest请求对象 //为了简化操作，这里直接手写JSON字符串，而不是先创建数据对象再转为JSON IndexRequest user1 = new IndexRequest().index(\\\"user\\\").id(\\\"1002\\\") .source(XContentType.JSON, \\\"name\\\", \\\"V\\\", \\\"age\\\", 20, \\\"gender\\\", \\\"male\\\"); IndexRequest user2 = new IndexRequest().index(\\\"user\\\").id(\\\"1003\\\") .source(XContentType.JSON, \\\"name\\\", \\\"J\\\", \\\"age\\\", 21, \\\"gender\\\", \\\"male\\\"); IndexRequest user3 = new IndexRequest().index(\\\"user\\\").id(\\\"1004\\\") .source(XContentType.JSON, \\\"name\\\", \\\"T\\\", \\\"age\\\", 22, \\\"gender\\\", \\\"male\\\"); request.add(user1).add(user2).add(user3); //发送请求，获取响应 BulkResponse response = esClient.bulk(request, RequestOptions.DEFAULT); //查看操作结果 System.out.println(\\\"耗时：\\\"+response.getTook()); System.out.println(\\\"成员：\\\"+ Arrays.toString(response.getItems())); //关闭 ES 客户端 esClient.close(); } } \"]},\"3221\":{\"h\":\"2. 批量删除文档\",\"t\":[\"需要结合BulkRequest请求对象和DeleteRequest请求对象，操作步骤和批量添加类似\",\"代码如下：\",\"public class ESTest3 { @SneakyThrows public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); //批量删除文档 //创建请求对象：BulkRequest() BulkRequest request = new BulkRequest(); //删除文档：需要使用DeleteRequest请求对象 DeleteRequest user1 = new DeleteRequest().index(\\\"user\\\").id(\\\"1002\\\"); DeleteRequest user2 = new DeleteRequest().index(\\\"user\\\").id(\\\"1002\\\"); DeleteRequest user3 = new DeleteRequest().index(\\\"user\\\").id(\\\"1002\\\"); request.add(user1).add(user2).add(user3); //发送请求，获取响应 BulkResponse response = esClient.bulk(request, RequestOptions.DEFAULT); //查看操作结果 System.out.println(\\\"耗时：\\\"+response.getTook()); System.out.println(\\\"成员：\\\"+ Arrays.toString(response.getItems())); //关闭 ES 客户端 esClient.close(); } } \"]},\"3222\":{\"h\":\"debug\",\"t\":[\"在使用SpringBoot时，很有可能会报错，这是因为ES版本与SpringBoot版本不兼容。\",\"不过即使报错，数据也还是插入成功了（只是无法获取响应数据了）。\",\"解决方案：\",\"匹配合适的版本\",\"捕获异常，并将报错信息忽略\"]},\"3223\":{\"h\":\"3-4. 文档查询\"},\"3224\":{\"h\":\"基本查询\",\"t\":[\"最基本的查询是：通过主键 _id 查询，或者直接查询索引下所有的文档\"]},\"3225\":{\"h\":\"1. 根据_id 查询文档\",\"t\":[\"需要GetRequest请求对象，代码如下：\",\"public class ESTest3 { @SneakyThrows public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); //根据_id查询文档：这里指的是局部修改 //创建请求对象：GetRequest GetRequest request = new GetRequest(); //关联要修改的索引和文档_id request.index(\\\"user\\\").id(\\\"1001\\\"); //发送请求，获取响应结果 GetResponse response = esClient.get(request, RequestOptions.DEFAULT); //以JSON字符串的格式打印查询结果 System.out.println(response.getSourceAsString()); //关闭 ES 客户端 esClient.close(); } } \",\"打印结果：{\\\"name\\\":\\\"Victor\\\",\\\"gender\\\":\\\"female\\\",\\\"age\\\":20}\"]},\"3226\":{\"h\":\"2. 查询所有文档\",\"t\":[\"通过SearchRequest对象，可以查看指定索引下的所有文档，代码如下：\",\"public class ESTest3 { @SneakyThrows public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); //查询所有文档 //创建请求对象：SearchRequest SearchRequest request = new SearchRequest(); //关联要查看的索引 request.indices(\\\"user\\\"); // 构建查询的请求体 SearchSourceBuilder sourceBuilder = new SearchSourceBuilder(); //查询所有数据 sourceBuilder.query(QueryBuilders.matchAllQuery()); request.source(sourceBuilder); //发送请求 SearchResponse response = esClient.search(request, RequestOptions.DEFAULT); //查看查询的结果 SearchHits hits = response.getHits(); for (SearchHit hit : hits) { System.out.println(hit.getSourceAsString()); } //关闭 ES 客户端 esClient.close(); } } \",\"打印结果如下：\",\"{\\\"name\\\":\\\"Victor\\\",\\\"gender\\\":\\\"female\\\",\\\"age\\\":20} {\\\"name\\\":\\\"V\\\",\\\"age\\\":\\\"20\\\",\\\"gender\\\":\\\"male\\\"} {\\\"name\\\":\\\"Jinno\\\",\\\"age\\\":\\\"21\\\",\\\"gender\\\":\\\"male\\\"} {\\\"name\\\":\\\"Tom\\\",\\\"age\\\":\\\"22\\\",\\\"gender\\\":\\\"male\\\"} \"]},\"3227\":{\"h\":\"条件查询\",\"t\":[\"通过SearchRequest请求对象进行查询，通过SearchSourceBuilder对象构建查询的请求体，在请求体中设置查询条件。\",\"示例代码：\",\"public class ESTest4 { @SneakyThrows public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); //条件查询 //创建请求对象：SearchRequest SearchRequest request = new SearchRequest(); //指定要查询的索引 request.indices(\\\"user\\\"); //构建查询条件：也就是请求体 request.source( new SearchSourceBuilder().query( QueryBuilders.matchQuery(\\\"age\\\", \\\"20\\\") ) ); //发送请求，查询数据 SearchResponse response = esClient.search(request, RequestOptions.DEFAULT); //查看查询的结果集 SearchHits hits = response.getHits(); for(SearchHit hit : hits){ System.out.println(hit); } //关闭 ES 客户端 esClient.close(); } } \",\"打印的结果\",\"{ \\\"_index\\\" : \\\"user\\\", \\\"_id\\\" : \\\"1001\\\", \\\"_score\\\" : 1.0, \\\"_source\\\" : { \\\"name\\\" : \\\"Victor\\\", \\\"gender\\\" : \\\"female\\\", \\\"age\\\" : 20 } } { \\\"_index\\\" : \\\"user\\\", \\\"_id\\\" : \\\"1002\\\", \\\"_score\\\" : 1.0, \\\"_source\\\" : { \\\"name\\\" : \\\"V\\\", \\\"age\\\" : \\\"20\\\", \\\"gender\\\" : \\\"male\\\" } } \"]},\"3228\":{\"h\":\"全量查询\",\"t\":[\"请求体内的查询条件可以设置为：matchAllQuery()，这样就可以查询索引内所有的文档了。\",\"//构建查询条件：也就是请求体 request.source( new SearchSourceBuilder().query(QueryBuilders.matchAllQuery()) ); \"]},\"3229\":{\"h\":\"组合查询\",\"t\":[\"又称多条件查询，根据多个查询条件进行查询，和MySQL的组合查询类似。\"]},\"3230\":{\"h\":\"1. BoolQueryBuilder\",\"t\":[\"通过BoolQueryBuilder对象调用组合方法进行组合查询，组合方法有三个：\",\"must：必须，多个条件必须全部符合\",\"mustNot：必须不，多个条件必须都不符合\",\"should：或，多个条只要符合一个即可\",\"这三个方法的参数都是包含查询条件的QueryBuilders对象\",\"//构建查询条件：也就是请求体 SearchSourceBuilder ssb = new SearchSourceBuilder(); // 创建BoolQueryBuilder对象 BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery(); // 调用组合方法 boolQueryBuilder.must(QueryBuilders.matchQuery(\\\"字段\\\",\\\"字段的值\\\")); //请求体拼接 组合查询的条件：BoolQueryBuilder对象 ssb.query(boolQueryBuilder); \",\"多个条件，需要多次调用组合方法，而不是提供多个参数。\"]},\"3231\":{\"h\":\"2. 示例代码\",\"t\":[\"public class ESTest7 { @SneakyThrows public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); //分页查询 //创建请求对象：SearchRequest SearchRequest request = new SearchRequest(); //指定要查询的索引 request.indices(\\\"user\\\"); //构建查询条件：也就是请求体 SearchSourceBuilder ssb = new SearchSourceBuilder(); // 创建BoolQueryBuilder对象 BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery(); // 调用组合方法 boolQueryBuilder.must(QueryBuilders.matchQuery(\\\"age\\\",\\\"21\\\")); boolQueryBuilder.mustNot(QueryBuilders.matchQuery(\\\"gender\\\",\\\"female\\\")); //请求体拼接 组合查询的条件：BoolQueryBuilder对象 ssb.query(boolQueryBuilder); //请求对象添加查询条件 request.source(ssb); //发送请求，查询数据 SearchResponse response = esClient.search(request, RequestOptions.DEFAULT); //查看查询的结果集 SearchHits hits = response.getHits(); for(SearchHit hit : hits){ System.out.println(hit); } //关闭 ES 客户端 esClient.close(); } } \",\"打印结果：\",\"{ \\\"_index\\\" : \\\"user\\\", \\\"_id\\\" : \\\"1003\\\", \\\"_score\\\" : 1.0, \\\"_source\\\" : { \\\"name\\\" : \\\"J\\\", \\\"age\\\" : 21, \\\"gender\\\" : \\\"male\\\" } } \"]},\"3232\":{\"h\":\"过滤查询\",\"t\":[\"过滤查询指的是返回指定的字段，而不是默认返回所有字段。\"]},\"3233\":{\"h\":\"fetchSource\",\"t\":[\"通过SearchSourceBuilder对象构建查询条件时，可以调用fetchSource方法指定过滤的字段，该方法有两个参数：\",\"includes：类型 String[]，排除的字段\",\"excludes：类型 String[]，包含的字段\",\"//构建查询条件：也就是请求体，这里进行全量查询 SearchSourceBuilder ssb = new SearchSourceBuilder().query(QueryBuilders.matchAllQuery()); //设置fetchSource方法的参数 String[] includes = {\\\"name\\\",\\\"age\\\"}; String[] excludes = {}; //设置查询的过滤条件 ssb.fetchSource(includes,excludes); \"]},\"3234\":{\"h\":\"示例代码\",\"t\":[\"public class ESTest6 { @SneakyThrows public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); //过滤查询 //创建请求对象：SearchRequest SearchRequest request = new SearchRequest(); //指定要查询的索引 request.indices(\\\"user\\\"); //构建查询条件：也就是请求体，这里进行全量查询 SearchSourceBuilder ssb = new SearchSourceBuilder() .query(QueryBuilders.matchAllQuery()); //设置fetchSource方法的参数 String[] includes = {\\\"name\\\",\\\"age\\\"}; String[] excludes = {}; //设置查询的过滤条件 ssb.fetchSource(includes,excludes); //请求对象添加查询条件 request.source(ssb); //发送请求，查询数据 SearchResponse response = esClient.search(request, RequestOptions.DEFAULT); //查看查询的结果集 SearchHits hits = response.getHits(); for(SearchHit hit : hits){ System.out.println(hit.getSourceAsString()); } //关闭 ES 客户端 esClient.close(); } } \",\"打印结果：\",\"{\\\"name\\\":\\\"Aaron\\\",\\\"age\\\":20} {\\\"name\\\":\\\"V\\\",\\\"age\\\":20} {\\\"name\\\":\\\"J\\\",\\\"age\\\":21} {\\\"name\\\":\\\"T\\\",\\\"age\\\":22} \"]},\"3235\":{\"h\":\"范围查询\"},\"3236\":{\"h\":\"1. RangeQueryBuilder\",\"t\":[\"通过RangeQueryBuilder对象可以创建范围查询构造器，使用对象调用范围查询的方法便能进行范围查询，范围查询的方法包括：\",\"gt：>，大于\",\"gte：>=，大于等于\",\"lt：<，小于\",\"lte：<=，小于等于\",\"RangeQueryBuilder对象的参数是要进行范围查询的字段；返回查询方法可以多次调用。\",\"//创建范围查询的builder RangeQueryBuilder rangeQueryBuilder = new RangeQueryBuilder(\\\"age\\\"); //调用范围查询的方法 rangeQueryBuilder.gte(21).lte(22); //设置查询条件 SearchSourceBuilder ssb = new SearchSourceBuilder().query(rangeQueryBuilder); //请求对象添加查询条件 request.source(ssb); \"]},\"3237\":{\"h\":\"2. 示例代码\",\"t\":[\"public class ESTest8 { @SneakyThrows public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); //范围查询 //创建请求对象：SearchRequest SearchRequest request = new SearchRequest(); //指定要查询的索引 request.indices(\\\"user\\\"); //创建范围查询的builder RangeQueryBuilder rangeQueryBuilder = new RangeQueryBuilder(\\\"age\\\"); //调用范围查询的方法 rangeQueryBuilder.gte(21).lte(22); //设置查询条件 SearchSourceBuilder ssb = new SearchSourceBuilder().query(rangeQueryBuilder); //请求对象添加查询条件 request.source(ssb); //发送请求，查询数据 SearchResponse response = esClient.search(request, RequestOptions.DEFAULT); //查看查询的结果集 SearchHits hits = response.getHits(); for(SearchHit hit : hits){ System.out.println(hit.getSourceAsString()); } //关闭 ES 客户端 esClient.close(); } } \",\"打印结果：\",\"{\\\"name\\\":\\\"J\\\",\\\"age\\\":21,\\\"gender\\\":\\\"male\\\"} {\\\"name\\\":\\\"T\\\",\\\"age\\\":22,\\\"gender\\\":\\\"male\\\"} \"]},\"3238\":{\"h\":\"模糊查询\",\"t\":[\"类似于MySQl的like\"]},\"3239\":{\"h\":\"1. fuzzyQueryBuilder\",\"t\":[\"QueryBuilders对象调用fuzzyQuery方法可以进行模糊查询，调用fuzziness方法可设置模糊查询的偏移值。\",\"fuzzyQuery：创建模糊查询构造器，参数是要进行模糊查询的字段和值\",\"fuzziness：指定模糊查询的偏移值，即跟指定值相差几个字符可以命中 \",\"Fuzziness.ONE：表示相差一个\",\"Fuzziness.ONE：表示相差两个\",\"//创建SearchSourceBuilder FuzzyQueryBuilder fuzzyQueryBuilder = QueryBuilders.fuzzyQuery(\\\"name\\\", \\\"T\\\") .fuzziness(Fuzziness.ONE); //将fuzzyQueryBuilder加入请求体 SearchSourceBuilder ssb = new SearchSourceBuilder().query(fuzzyQueryBuilder); //请求对象添加查询条件 request.source(ssb); \"]},\"3240\":{\"h\":\"2. 示例代码\",\"t\":[\"public class ESTest9 { @SneakyThrows public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); //模糊查询 //创建请求对象：SearchRequest SearchRequest request = new SearchRequest(); //指定要查询的索引 request.indices(\\\"user\\\"); //创建SearchSourceBuilder FuzzyQueryBuilder fuzzyQueryBuilder = QueryBuilders.fuzzyQuery(\\\"name\\\", \\\"T\\\") .fuzziness(Fuzziness.ONE); SearchSourceBuilder ssb = new SearchSourceBuilder().query(fuzzyQueryBuilder); //请求对象添加查询条件 request.source(ssb); //发送请求，查询数据 SearchResponse response = esClient.search(request, RequestOptions.DEFAULT); //查看查询的结果集 SearchHits hits = response.getHits(); for(SearchHit hit : hits){ System.out.println(hit.getSourceAsString()); } //关闭 ES 客户端 esClient.close(); } } \",\"打印的结果：\",\"{\\\"name\\\":\\\"V\\\",\\\"age\\\":20,\\\"gender\\\":\\\"male\\\"} {\\\"name\\\":\\\"J\\\",\\\"age\\\":21,\\\"gender\\\":\\\"male\\\"} {\\\"name\\\":\\\"T\\\",\\\"age\\\":22,\\\"gender\\\":\\\"male\\\"} \"]},\"3241\":{\"h\":\"分页\",\"t\":[\"通过SearchSourceBuilder对象构建查询条件时，可以调用form和size方法设置分页。\",\"from：当前页的起始索引，默认从 0 开始 \",\"分页公式：from = (pageNum - 1) * size\",\"size：每页显示多少条\"]},\"3242\":{\"h\":\"示例代码\",\"t\":[\"public class ESTest5 { @SneakyThrows public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); //分页查询 //创建请求对象：SearchRequest SearchRequest request = new SearchRequest(); //指定要查询的索引 request.indices(\\\"user\\\"); //构建查询条件：也就是请求体，这里进行全量查询 SearchSourceBuilder ssb = new SearchSourceBuilder() .query(QueryBuilders.matchAllQuery()); //设置分页数据：from设置查询的起始index，size设置每页查询几条 ssb.from(0).size(2); //请求对象添加查询条件 request.source(ssb); //发送请求，查询数据 SearchResponse response = esClient.search(request, RequestOptions.DEFAULT); //查看查询的结果集 SearchHits hits = response.getHits(); for(SearchHit hit : hits){ System.out.println(hit.getSourceAsString()); } //关闭 ES 客户端 esClient.close(); } } \",\"打印的结果：\",\"{\\\"name\\\":\\\"Aaron\\\",\\\"age\\\":20,\\\"gender\\\":\\\"male\\\"} {\\\"name\\\":\\\"V\\\",\\\"age\\\":20,\\\"gender\\\":\\\"male\\\"} \"]},\"3243\":{\"h\":\"排序\",\"t\":[\"通过SearchSourceBuilder对象构建查询条件时，可以调用sort方法，指定一个字段作为排序依据，并指明排序方式。\",\"SortOrder.ASC：正序\",\"SortOrder.DESC：倒序\"]},\"3244\":{\"h\":\"测试代码\",\"t\":[\"public class ESTest5 { @SneakyThrows public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); //排序查询 //创建请求对象：SearchRequest SearchRequest request = new SearchRequest(); //指定要查询的索引 request.indices(\\\"user\\\"); //构建查询条件：也就是请求体，这里进行全量查询 SearchSourceBuilder ssb = new SearchSourceBuilder() .query(QueryBuilders.matchAllQuery()); //设置排序方式 ssb.sort(\\\"age\\\", SortOrder.ASC); //请求对象添加 查询条件 request.source(ssb); //发送请求，查询数据 SearchResponse response = esClient.search(request, RequestOptions.DEFAULT); //查看查询的结果集 SearchHits hits = response.getHits(); for(SearchHit hit : hits){ System.out.println(hit.getSourceAsString()); } //关闭 ES 客户端 esClient.close(); } } \"]},\"3245\":{\"h\":\"打印结果\",\"t\":[\"{\\\"name\\\":\\\"Aaron\\\",\\\"age\\\":20,\\\"gender\\\":\\\"male\\\"} {\\\"name\\\":\\\"V\\\",\\\"age\\\":20,\\\"gender\\\":\\\"male\\\"} {\\\"name\\\":\\\"J\\\",\\\"age\\\":21,\\\"gender\\\":\\\"male\\\"} {\\\"name\\\":\\\"T\\\",\\\"age\\\":22,\\\"gender\\\":\\\"male\\\"} \"]},\"3246\":{\"h\":\"多个字段排序\",\"t\":[\"实测，无论是直接写多个参数，还是多次调用sort，都会报错。暂时无法进行多个字段排序。\"]},\"3247\":{\"h\":\"聚合操作\",\"t\":[\"聚合允许使用者对 es 文档进行统计分析，类似与关系型数据库中的 group by和一系列聚合函数。\",\"包括以下具体的操作：\",\"max：对某个字段取最大值\",\"min：对某个字段取最小值\",\"sum：对某个字段求和\",\"avg：对某个字段取平均值\",\"cardinality：对某个字段的值进行去重之后再取总数\",\"state：聚合，对某个字段一次性返回 count，max，min，avg 和 sum 五个指标\",\"group：进行分组\"]},\"3248\":{\"h\":\"1. aggregation\",\"t\":[\"SearchSourceBuilder对象调用aggregation方法可以进行聚合操作，其中aggregation方法的参数就是聚合函数构造器：AggregationBuilders。\",\"AggregationBuilders可以调用聚合函数\",\"max：对某个字段取最大值\",\"min：对某个字段取最小值\",\"avg：对某个字段取平均值\",\"sum：对某个字段求和\",\"terms：分组\",\"cardinality：对某个字段的值进行去重之后再取总数\",\"state：聚合，对某个字段一次性返回 count，max，min，avg 和 sum 五个指标\",\"聚合函数的参数就是此次查询的名字，可以任意取。\",\"AggregationBuilders可继续调用field函数，指定要操作的字段。\",\"SearchSourceBuilder ssb = new SearchSourceBuilder(); ssb.aggregation(AggregationBuilders.聚合函数(\\\"操作名\\\").field(\\\"操作的字段\\\")); //请求对象添加查询条件 request.source(ssb); \"]},\"3249\":{\"h\":\"2. 代码示例\",\"t\":[\"public class ESTest10 { @SneakyThrows public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); //聚合操作 //创建请求对象：SearchRequest SearchRequest request = new SearchRequest(); //指定要查询的索引 request.indices(\\\"user\\\"); SearchSourceBuilder ssb = new SearchSourceBuilder(); //调用aggregation方法，使用聚合函数 ssb.aggregation(AggregationBuilders.max(\\\"maxAge\\\").field(\\\"age\\\")).size(0); //请求对象添加查询条件 request.source(ssb); //发送请求，查询数据 SearchResponse response = esClient.search(request, RequestOptions.DEFAULT); //查看查询的结果 System.out.println(response); //关闭 ES 客户端 esClient.close(); } } \",\"打印的结果：\",\"{ \\\"took\\\":1, \\\"timed_out\\\":false, \\\"_shards\\\":{ \\\"total\\\":1, \\\"successful\\\":1, \\\"skipped\\\":0, \\\"failed\\\":0 }, \\\"hits\\\":{ //调用了size(0)，所以hits里不会有查询结果 \\\"total\\\":{ \\\"value\\\":4, \\\"relation\\\":\\\"eq\\\" }, \\\"max_score\\\":null, \\\"hits\\\":[] }, \\\"aggregations\\\":{ \\\"max#maxAge\\\":{ \\\"value\\\":22.0 //这是我们要的值 } } } \"]},\"3250\":{\"h\":\"3. size(0)\",\"t\":[\"聚合查询，会同时进行全量查询，可以调用size(0)，不返回全量查询的结果。\",\"SearchSourceBuilder ssb = new SearchSourceBuilder(); ssb.aggregation(AggregationBuilders.聚合函数(\\\"操作名\\\").field(\\\"操作的字段\\\")).size(0); \"]},\"3251\":{\"h\":\"高亮显示\",\"t\":[\"类似于百度，进行关键字搜索时，搜索出的内容中的关键字会进行高亮显示。\"]},\"3252\":{\"h\":\"1. matchPhraseQuery 与 HightlightBuilder\",\"t\":[\"QueryBuilders对象调用matchPhraseQuery方法可以创建创建高亮查询构造器。\",\"对于高亮查询可以通过HighlightBuilder对象对高亮显示进行配置，配置的方法如下：\",\"preTags：设置标签前缀\",\"postTags：设置标签后缀\",\"field：设置高亮字段\",\"//创建强求体 SearchSourceBuilder ssb = new SearchSourceBuilder(); //构建查询方式：高亮查询 MatchPhraseQueryBuilder mp = QueryBuilders.matchPhraseQuery(\\\"name\\\", \\\"T\\\"); //设置高亮字段 HighlightBuilder highlightBuilder = new HighlightBuilder(); highlightBuilder.preTags(\\\"<font color='red'>\\\");//设置标签前缀 highlightBuilder.postTags(\\\"</font>\\\");//设置标签后缀 highlightBuilder.field(\\\"name\\\");//设置高亮字段 ssb.highlighter(highlightBuilder); //设置查询方式 ssb.query(mp); //设置请求体：请求对象添加查询条件 request.source(ssb); \"]},\"3253\":{\"h\":\"2. 代码示例\",\"t\":[\"public class ESTest11 { @SneakyThrows public static void main(String[] args) { //创建ES 客户端 RestClientBuilder builder = RestClient.builder( new HttpHost(\\\"localhost\\\", 9200, \\\"http\\\") ); RestHighLevelClient esClient = new RestHighLevelClient(builder); //高亮查询 //创建请求对象：SearchRequest SearchRequest request = new SearchRequest(); //指定要查询的索引 request.indices(\\\"user\\\"); //创建强求体 SearchSourceBuilder ssb = new SearchSourceBuilder(); //构建查询方式：高亮查询 MatchPhraseQueryBuilder mp = QueryBuilders.matchPhraseQuery(\\\"name\\\", \\\"T\\\"); //设置高亮字段 HighlightBuilder highlightBuilder = new HighlightBuilder(); highlightBuilder.preTags(\\\"<font color='red'>\\\");//设置标签前缀 highlightBuilder.postTags(\\\"</font>\\\");//设置标签后缀 highlightBuilder.field(\\\"name\\\");//设置高亮字段 ssb.highlighter(highlightBuilder); //设置查询方式 ssb.query(mp); //设置请求体：请求对象添加查询条件 request.source(ssb); //发送请求，查询数据 SearchResponse response = esClient.search(request, RequestOptions.DEFAULT); //查看查询的结果集 SearchHits hits = response.getHits(); for(SearchHit hit : hits){ System.out.println(hit); } //关闭 ES 客户端 esClient.close(); } } \",\"打印结果：\",\"{ \\\"_index\\\" : \\\"user\\\", \\\"_id\\\" : \\\"1004\\\", \\\"_score\\\" : 1.2039728, \\\"_source\\\" : { \\\"name\\\" : \\\"T\\\", \\\"age\\\" : 22, \\\"gender\\\" : \\\"male\\\" }, \\\"highlight\\\" : { \\\"name\\\" : [ \\\"<font color='red'>T</font>\\\" ] } } \"]},\"3254\":{\"h\":\"3-5. ES集成\"},\"3255\":{\"h\":\"SpringData 集成\",\"t\":[\"警告\",\"暂略\",\"没有使用SpringData的计划，都是使用MyBaits\"]},\"3256\":{\"h\":\"Spark Streaming 集成\",\"t\":[\"警告\",\"暂略\",\"Spark是大数据框架，没有计划涉及\"]},\"3257\":{\"h\":\"Flink 集成\",\"t\":[\"提示\",\"暂略\",\"Flink 是大数据框架，没有计划涉及\"]},\"3258\":{\"h\":\"4-1. 单机与集群\"},\"3259\":{\"h\":\"1. 单机\",\"t\":[\"单台 Elasticsearch 服务器提供服务，往往都有最大的负载能力，超过这个阈值，服务器 性能就会大大降低甚至不可用，所以生产环境中，一般都是运行在指定服务器集群中。\",\"除了负载能力，单点服务器也存在其他问题：\",\"单台机器存储容量有限\",\"单服务器容易出现单点故障，无法实现高可用\",\"单服务的并发处理能力有\",\"配置服务器集群时，集群中节点数量没有限制，大于等于 2 个节点就可以看做是集群了。一 般出于高性能及高可用方面来考虑集群中节点数量都是 3 个以上。\"]},\"3260\":{\"h\":\"2. 集群 Cluster\",\"t\":[\"一个集群就是由一个或多个服务器节点组织在一起，共同持有整个的数据，并一起提供索引和搜索功能。\",\"一个 Elasticsearch 集群有一个唯一的名字标识，这个名字默认就是”elasticsearch”。这个名字是重要的，因为一个节点只能通过指定某个集群的名字，来加入这个集群。\"]},\"3261\":{\"h\":\"3. 节点 Node\",\"t\":[\"集群中包含很多服务器，一个节点就是其中的一个服务器。作为集群的一部分，它存储数据，参与集群的索引和搜索功能。\",\"一个节点也是由一个名字来标识的，默认情况下，这个名字是一个随机的漫威漫画角色的名字，这个名字会在启动的时候赋予节点。这个名字对于管理工作来说挺重要的，因为在这个管理过程中，你会去确定网络中的哪些服务器对应于 Elasticsearch 集群中的哪些节点。\",\"一个节点可以通过配置集群名称的方式来加入一个指定的集群。默认情况下，每个节点都会被安排加入到一个叫做“elasticsearch”的集群中，这意味着，如果你在你的网络中启动了若干个节点，并假定它们能够相互发现彼此，它们将会自动地形成并加入到一个叫做 “elasticsearch”的集群中\",\"在一个集群里，只要你想，可以拥有任意多个节点。而且，如果当前你的网络中没有运行任何 Elasticsearch 节点，这时启动一个节点，会默认创建并加入一个叫做“elasticsearch”的集群。\"]},\"3262\":{\"h\":\"4-2. windows集群\",\"t\":[\"注意\",\"仅做了解，开发中和生产中都不会使用Windows环境。\",\"环境以ElasticSearch 8.8.1 为例\",\"集群要配置在多台电脑才有意义，这里仅做测试，在一台电脑上模拟集群，通过端口号区分。\"]},\"3263\":{\"h\":\"准备\"},\"3264\":{\"h\":\"1. 创建节点\",\"t\":[\"创建 es-cluster 文件夹，在内部复制三个ES软件包，如果是复制之前的单节点es目录，记得删除data目录，清空logs目录\",\"4-2-1\",\"如上创建了三个节点：设计的端口号为9300，9400，9500\"]},\"3265\":{\"h\":\"2. 配置内存\",\"t\":[\"警告\",\"这一步非常重要，很多教程都没有提及，不配置可能要遭遇严重bug。\",\"尤其是练习集群配置，将多个节点部署到一台电脑上。\",\"ES是基于Java的，启动ES时会同时启动自身内置的JVM。\",\"ES的配置中，默认为JVM分配了4G的内存，当电脑内存不足时，就会报错。且每启动一个节点，就会占用4G内存。假如电脑只有8G内存，启动第二个节点时就必然会闪退。\"]},\"3266\":{\"h\":\"报错信息如下\",\"t\":[\"通过powershell手动执行才能不闪退，从而看到报错信息\",\"4-2-2\"]},\"3267\":{\"h\":\"手动指定JVM的内存\",\"t\":[\"为了避免内存不足，根据电脑内存大小，手动指定JVM的内存占用，比如设置为512m\",\"JVM配置文件：config/jvm.options\",\"################################################################ ## IMPORTANT: JVM heap size ################################################################ ## ## The heap size is automatically configured by Elasticsearch ## based on the available memory in your system and the roles ## each node is configured to fulfill. If specifying heap is ## required, it should be done through a file in jvm.options.d, ## which should be named with .options suffix, and the min and ## max should be set to the same value. For example, to set the ## heap to 4 GB, create a new file in the jvm.options.d ## directory containing these lines: ## ## -Xms4g ## -Xmx4g -Xms512m # 初始启动大小 -Xmx512m # 可分配的最大内置值 \",\"如上，手动指定JVM内存占用为512m，防止发生闪退故障。\"]},\"3268\":{\"h\":\"配置节点\",\"t\":[\"修改集群文件目录中每个节点的 config/elasticsearch.yml 配置文件\",\"需要配置的内容：\",\"名称 \",\"cluster.name：集群名称，节点之间要保持一致\",\"node.name：节点名称，集群内要唯一\",\"节点类型 \",\"node.roles: [ master,data ]，节点所属的角色 \",\"master：表示可以被选举为主节点\",\"data：表示该结点是数据结点，用于保存数据，执行数据相关的操作\",\"cluster.initial_master_nodes：初始主节点 \",\"当开启一个全新的集群时，会有一个集群的引导步骤，这步骤用来确定哪些节点参与第一次的主节点选举\",\"必须且只能在第一个启动的节点处配置，配置是当前节点的node.name\",\"注意：仅在第一次启动集群时生效\",\"通信信息 \",\"network.host：ip地址，localhost表示本机地址\",\"http.port: 端口\",\"transport.port：tcp 监听端口，用于节点内部通信\",\"发现模块，用于发现其他节点 \",\"discovery.seed_hosts: 被查询发现的其他节点的[ ip:transport.port ]\",\"跨域配置 \",\"http.cors.enabled: 是否允许跨域\",\"http.cors.allow-origin: 允许跨域的目录，* 表示所有目录\"]},\"3269\":{\"h\":\"1. 节点1：es-9300\",\"t\":[\"#节点 1 的配置信息： #集群名称，节点之间要保持一致 cluster.name: my-es #节点名称，集群内要唯一 node.name: node-9300 #ip 地址 network.host: localhost # 本机地址 #http 端口 http.port: 9300 #tcp 监听端口 transport.port: 9301 # 发现模块，用于发现其他节点，这里的端口是transport.port # 第一个节点，可以不配置discovery.seed_hosts，因为启动时，只有他自己 discovery.seed_hosts: [\\\"localhost:9401\\\",\\\"localhost:9501\\\"] # 初始主节点：必须包含当前节点 cluster.initial_master_nodes: [\\\"node-9300\\\"] # 跨域配置 http.cors.enabled: true http.cors.allow-origin: \\\"*\\\" \"]},\"3270\":{\"h\":\"2. 节点2：es-9400\",\"t\":[\"#节点 2 的配置信息： #集群名称，节点之间要保持一致 cluster.name: my-es #节点名称，集群内要唯一 node.name: node-9400 #ip 地址 network.host: localhost # 本机地址 #http 端口 http.port: 9400 #tcp 监听端口 transport.port: 9401 # 发现模块，用于发现其他节点，这里的端口是transport.port discovery.seed_hosts: [\\\"localhost:9301\\\",\\\"localhost:9501\\\"] # 初始主节点 除了第一个节点，其他节点，一定不能配置该值，否则闪退 # cluster.initial_master_nodes: # 跨域配置 http.cors.enabled: true http.cors.allow-origin: \\\"*\\\" \"]},\"3271\":{\"h\":\"3. 节点3：es-9500\",\"t\":[\"#节点 2 的配置信息： #集群名称，节点之间要保持一致 cluster.name: my-es #节点名称，集群内要唯一 node.name: node-9500 #ip 地址 network.host: localhost # 本机地址 #http 端口 http.port: 9500 #tcp 监听端口 transport.port: 9501 # 发现模块，用于发现其他节点，这里的端口是transport.port discovery.seed_hosts: [\\\"localhost:9301\\\",\\\"localhost:9401\\\"] # 初始主节点 除了第一个节点，其他节点，一定不能配置该值，否则闪退 # cluster.initial_master_nodes: # 跨域配置 http.cors.enabled: true http.cors.allow-origin: \\\"*\\\" \"]},\"3272\":{\"h\":\"4. 选举机制简介\"},\"3273\":{\"h\":\"4.1 首次启动\",\"t\":[\"集群第一次启动时，需要 cluster.initial_master_nodes 配置指定一个master类型的节点列表，来选举一个主节点。\"]},\"3274\":{\"h\":\"4.2 再次启动\",\"t\":[\"此后，所有加入集群的节点信息将会报错到data目录，供下次启动时访问，也就是说再次启动集群，cluster.initial_master_nodes就不在起作用了。\"]},\"3275\":{\"h\":\"4.3 过半原则\",\"t\":[\"非第一次启动的化，就会根据data中的节点信息进行选取，当选举配置集合中超过一半的节点存活时，集群才提供服务（也就是过半原则，通常集群解决脑裂问题都是采用这种方式）\",\"如果是第一次启动集群，往往是因为没有配置 cluster.initial_master_nodes 参数导致的。如果不是第一次启动，也就是说集群启动的节点不满足过半原则，不能选举出主节点，这样只需要将过半的节点启动就可以了。\"]},\"3276\":{\"h\":\"4.4 集群降级，\",\"t\":[\"如果不愿意启动多个节点，也就是要将多节点集群降级，如何减少集群中的节点数，最简单的做法是删除data目录，不过这样会丢失数据。\",\"推荐做法：\",\"一次性删除节点不要太多，可以逐渐删除，留给集群足够的时间，让它自动调整Voting Configurations中的配置\",\"如果只剩下最后两个节点了，那么都不能删除，如果要删除，就要配置Voting configuration exclusions来实现\"]},\"3277\":{\"h\":\"启动集群\",\"t\":[\"注意事项\",\"在修改配置文件之前，先依次启动一次所有节点，这样配置文件中跟安全有关的配置就会显示出来。这样方便配置忽略安全检测，启动完后，记得删除data目录，清空logs目录\",\"启动节点是有顺序的，第一个启动的节点必须包含cluster.initial_master_nodes配置\",\"配置好一个节点，就启动一个，观察集群信息。\"]},\"3278\":{\"h\":\"1. 启动第一个节点：es-9300\",\"t\":[\"这是启动的第一个节点，该节点必须包含cluster.initial_master_nodes配置\",\"启动后，查看集群信息：\",\"请求方式：GET\",\"url地址：http://localhost:9300/_cluster/health\",\"返回的信息如下：\",\"{ \\\"cluster_name\\\": \\\"my-es\\\", // 集群名称 \\\"status\\\": \\\"green\\\", //集群状态，green表示健康 \\\"timed_out\\\": false, //是否超时 \\\"number_of_nodes\\\": 1, //节点数量，只启动了一个，所以是1 \\\"number_of_data_nodes\\\": 1, //数据节点数量，只启动了一个，所以是1 \\\"active_primary_shards\\\": 0, \\\"active_shards\\\": 0, \\\"relocating_shards\\\": 0, \\\"initializing_shards\\\": 0, \\\"unassigned_shards\\\": 0, \\\"delayed_unassigned_shards\\\": 0, \\\"number_of_pending_tasks\\\": 0, \\\"number_of_in_flight_fetch\\\": 0, \\\"task_max_waiting_in_queue_millis\\\": 0, \\\"active_shards_percent_as_number\\\": 100.0 } \",\"\\\"status\\\"：集群状态：\",\"green：健康，所有主分片和副本分片都正常运行\",\"yellow：所有主分片都正常运行，但不是所有的副本分片都正常运行\",\"red：有主分片没能正常运行\"]},\"3279\":{\"h\":\"2. 启动第二个节点：es-9400\",\"t\":[\"启动后，再次查看集群信息：\",\"访问方式和地址不变\",\"{ \\\"cluster_name\\\": \\\"my-es\\\", \\\"status\\\": \\\"green\\\", \\\"timed_out\\\": false, \\\"number_of_nodes\\\": 2, //节点数量变成了2 \\\"number_of_data_nodes\\\": 2, \\\"active_primary_shards\\\": 0, \\\"active_shards\\\": 0, \\\"relocating_shards\\\": 0, \\\"initializing_shards\\\": 0, \\\"unassigned_shards\\\": 0, \\\"delayed_unassigned_shards\\\": 0, \\\"number_of_pending_tasks\\\": 0, \\\"number_of_in_flight_fetch\\\": 0, \\\"task_max_waiting_in_queue_millis\\\": 0, \\\"active_shards_percent_as_number\\\": 100.0 } \"]},\"3280\":{\"h\":\"3. 启动第三个节点\",\"t\":[\"启动后，再次查看集群信息：\",\"访问方式和地址不变\",\"{ \\\"cluster_name\\\": \\\"my-es\\\", \\\"status\\\": \\\"green\\\", \\\"timed_out\\\": false, \\\"number_of_nodes\\\": 3, //节点数量变成了3 \\\"number_of_data_nodes\\\": 3, \\\"active_primary_shards\\\": 0, \\\"active_shards\\\": 0, \\\"relocating_shards\\\": 0, \\\"initializing_shards\\\": 0, \\\"unassigned_shards\\\": 0, \\\"delayed_unassigned_shards\\\": 0, \\\"number_of_pending_tasks\\\": 0, \\\"number_of_in_flight_fetch\\\": 0, \\\"task_max_waiting_in_queue_millis\\\": 0, \\\"active_shards_percent_as_number\\\": 100.0 } \"]},\"3281\":{\"h\":\"使用测试\"},\"3282\":{\"h\":\"1. 向节点 es-9300 添加索引\",\"t\":[\"请求方式：PUT\",\"请求地址：http://localhost:9300/user\",\"向es-9300服务添加了一个索引：user\",\"{ \\\"acknowledged\\\": true, \\\"shards_acknowledged\\\": true, \\\"index\\\": \\\"user\\\" } \"]},\"3283\":{\"h\":\"2. 通过节点 es-9400 查看索引\",\"t\":[\"请求方式：GET\",\"请求地址：http://localhost:9400/user\",\"返回结果如下：\",\"{ \\\"user\\\": { \\\"aliases\\\": {}, \\\"mappings\\\": {}, \\\"settings\\\": { \\\"index\\\": { \\\"routing\\\": { \\\"allocation\\\": { \\\"include\\\": { \\\"_tier_preference\\\": \\\"data_content\\\" } } }, \\\"number_of_shards\\\": \\\"1\\\", \\\"provided_name\\\": \\\"user\\\", \\\"creation_date\\\": \\\"1687940386790\\\", \\\"number_of_replicas\\\": \\\"1\\\", \\\"uuid\\\": \\\"y_ZFVzSOQnyF55VFHGEjiw\\\", \\\"version\\\": { \\\"created\\\": \\\"8080199\\\" } } } } } \",\"能够正常查看到该索引，集群能正常工作。\"]},\"3284\":{\"h\":\"4-3. Linux 单机\"},\"3285\":{\"h\":\"整体步骤\",\"t\":[\"安装 \",\"下载Elasticsearch 8.7.0\",\"上传到服务器：/opt/soft-bar/\",\"解压到：/opt/es/（此时ES软件目录为：/opt/es/es-8.7.0/）\",\"补齐目录：es-8.7.0/data和es-8.7.0/certs\",\"创建es用户：创建一个专门的用户es，用来启动es服务\",\"证书：千万不要再签发证书了，新版本的ES是自动签发证书的\",\"配置：config/elasticsearch.yml \",\"一些基本的配置，因为不是集群，所以不用配置集群信息\",\"启动 \",\"debug：有很多bug要提前解决\",\"启动：常见bug解决后再进行启动\",\"访问：启动后就可以在浏览器端访问了\"]},\"3286\":{\"h\":\"安装\",\"t\":[\"ES8需要Java17，不过ES8会默认会捆绑JDK，所以不配置Java环境也可以。\"]},\"3287\":{\"h\":\"1. 下载ES\",\"t\":[\"下载地址：LINUX_X86_64\",\"可以在本地下载上传到服务器，也可以直接在服务器进行wget下载。\",\"wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-8.7.0-linux-x86_64.tar.gz \"]},\"3288\":{\"h\":\"2. 上传安装包，规划目录\",\"t\":[\"上传目录：/opt/soft-bar/，该目录用来存放安装包\",\"工作目录：/opt/es/：该目录存放所有ES相关的内容 \",\"解压目录：/opt/es/es-8.7.0/\",\"其他ES文件也都放在该目录下，包括Kibana\"]},\"3289\":{\"h\":\"3. 解压缩\",\"t\":[\"cd /opt/soft-bar tar -zxvf elasticsearch-8.7.0-linux-x86_64.tar.gz -C /opt/es \",\"解压后的目录结构：\",\"4-3-1\",\"bin：可执行脚本目录\",\"config：配置目录\",\"jdk：内置JDK\",\"lib：内置类库\",\"logs：日志目录\",\"modules：模块目录\",\"plugins：插件目录\"]},\"3290\":{\"h\":\"4. 补齐目录\",\"t\":[\"解压后的目录结构还缺一个数据文件目录和证书目录。\",\"提示\",\"不用补齐，这俩目录都会自动创建\"]},\"3291\":{\"h\":\"5. 创建es用户\",\"t\":[\"Elasticsearch 不能使用 root用户启动，因此要创建一个名为es的用户操作Elasticsearch。\",\"useradd es # 创建用户 passwd es # 设置密码，回车输入密码，这里暂密码暂定为es chown -R es:es /opt/es/elasticsearch-8.7.0 # 修改文件拥有者 \"]},\"3292\":{\"h\":\"CA证书\",\"t\":[\"警告\",\"不要再创建证书了，从ES8.4（也许更早）版本开始，证书是自动创建的，手动创建的证书可能会发生冲突，以下创建证书的步骤依然保留，但实际开发中不要创建。\",\"如下图，启动ES时，自动创建certs目录，并创建了3个证书\",\"4-3-6\",\"证书是用来进行身份验证，防止请求被篡改的。不使用证书可能会报错。\",\"ES通过内置的elasticsearch-certutil工具来生成证书。\"]},\"3293\":{\"h\":\"1. CA模式。\",\"t\":[\"创建证书有四种模式：ca、cert、csr、http，我们这里采用CA模式\",\"CA模式生成新的证书颁发机构(ca)。默认情况下，它生成一个PKCS#12输出文件，其中保存CA证书和CA的私钥。\",\"也可以指定–pem参数，则命令生成一个zip文件，其中包含PEM格式的证书和私钥。随后可以使用这些文件作为命令的cert模式的输入。\",\"PKCS#12文件：一种交换数字证书的加密标准。通常用它来加密打包一个私钥及有关的 X.509 证书，产生的文件就是PKCS#12文件。\"]},\"3294\":{\"h\":\"2. CA证书\",\"t\":[\"证书：用来证明受访问的服务身份信息。\",\"签名：存在证书上的一个可信标识，代表该证书是经过认证的，因为假冒服务器也可以有证书。\",\"CA证书：是公认可靠的CA(certificate authority)机构签发的证书\",\"4-3-2\"]},\"3295\":{\"h\":\"3. CA证书工作机理\",\"t\":[\"通过HTTPS请求的步骤来说明CA证书的工作机理\",\"浏览器发起https请求\",\"服务器返回它的证书\",\"浏览器通过CA的公钥对证书签名进行校验，检查证书是否有效\",\"浏览器生成一个临时秘钥并用服务器的公钥对它加密，然后将其发送给服务器。\",\"服务器用私钥解密，得到浏览器发送给它的秘钥， 然后用该秘钥对数据进行加密\",\"浏览器得到加密数据，并用发给服务端的秘钥进行解密。\",\"4-3-3\"]},\"3296\":{\"h\":\"4. 签发ca证书\",\"t\":[\"警告\",\"不用签发，启动ES时，会自动签发。这一步不要再做了\",\"需要用到内置的elasticsearch-certutil ca 命令，在 elasticsearch-8.7.0/bin目录中\",\"su es # 切换用户 cd /opt/es/elasticsearch-8.7.0/bin # 进入bin目录 ./elasticsearch-certutil ca # 签发 ca 证书 # 签发 ca 证书时有两次交互，直接回车即可 # 第一次交互：设置文件名，回车采用默认名，默认文件在ES软件根目录中 Please enter the desired output file [elastic-stack-ca.p12]: # 第二次交互：设置ca证书密码，直接回车将采用空密码，如果设置了要保存后，后续会用 Enter password for elastic-stack-ca.p12 : # 设置密码 \",\"默认生成的证书位置：/opt/es/elasticsearch-8.7.0/elastic-stack-ca.p12\"]},\"3297\":{\"h\":\"5. 移动证书\",\"t\":[\"警告\",\"会自动生成证书，这一步不要再做了\",\"生成的证书要放到到config目录内，可以在config目录下创建certs目录用来存放证书。\",\"cd /opt/es/elasticsearch-8.7.0/config mkdir certs cd .. mv elastic-* config/certs \"]},\"3298\":{\"h\":\"6. 签发HTTP证书\",\"t\":[\"警告\",\"不用签发，启动ES时，会自动签发。这一步不要再做了\",\"注意\",\"注意：使用使用 elasticsearch-certutil 工具自己生成的CA，签发的证书属于自认证证书，该证书浏览器是不不会信任的，需要手动让浏览器信任。\",\"可以选择使用第三方签发的受信任的证书。\",\"使用CA证书签发HTTP证书，以便可以使用HTTP REST API方式访问ES服务。\",\"其他组件（例如 Kibana 或任何 Elastic 语言客户端）在连接到 ES服务 时会验证此证书。\",\"生成证书的流程很复杂，交互很多，如下：\",\"# 用户 和目录同上 ./elasticsearch-certutil http # 生成http证书的过程要进行以下10次交互 ########################## # 第1次: 是否生成证书签名请求 Generate a CSR? [y/N] # n # 第2次: 是否要使用现有 CA Use an existing CA? [y/N] # y # 第3次: 指定ca证书的路径：以es软件/config为起始路径 CA Path: # certs/elastic-stack-ca.p12 # 第4次: 输入CA证书的密码，之前创建ca证书时未设置，这里直接回车 Password for elastic-stack-ca.p12: # 直接回车 # 第5次: 证书的生效时间：默认是5y(5年) For how long should your certificate be valid? [5y] # 20y # 第6次: 是否为每个节点创建一个单独的证书：不需要，即使是集群也只需主节点创建证书 Generate a certificate per node? [y/N] # n # 第7和8是用来配置DNS与证书绑定的：(域名->ip)：绑定证书 # 第7次：输入链接到ES的主机名称（域名） # 如果是集群需要所如所有集群的主机名称 ## 如果没有DNS解析的主机名（域名），就需要使用本地进行hosts映射，或者直接用IP aicell.cc # 回车一次就可以输入一个名字，两次回车就输入完毕 #159.75.225.162 没有被DNS解析的域名，直接用ip，访问的时候用ip访问 Is this correct [Y/n] #y，确认名字输入是否正确 # 第8次: 输入主机名(域名）解析的ip地址，需要提前进行DNS解析，或hosts映射 ## 如果是单节点集群，就要指定端口号 159.75.225.162 # 要与主机名对应， Is this correct [Y/n] #y，确认名字输入是否正确 # 第9次: 是否对集群中的每个节点重复上述操作，不用 Do you wish to change any of these options? [y/N] # n # 第10次: 是否给证书加密 Provide a password for the \\\"http.p12\\\" file: # 连续回车两次，不加密 \",\"完成上述10个步骤，证书就生成好了，是一个压缩包，需要解压获取证书。 证书位置：/opt/es/elasticsearch-8.7.0/elasticsearch-ssl-http.zip\"]},\"3299\":{\"h\":\"7. 解压并移动http证书\",\"t\":[\"警告\",\"不用签发，启动ES时，会自动签发。这一步不要再做了\"]},\"3300\":{\"h\":\"7.1 解压http证书\",\"t\":[\"cd /opt/es/elasticsearch-8.7.0 unzip elasticsearch-ssl-http.zip \",\"解压后会在/opt/es/elasticsearch-8.7.0/ 目录下产生两个信息目录\",\"elasticsearch：目录内有http.p12证书\",\"kibana：目录内有elasticsearch-ca.pem证书\"]},\"3301\":{\"h\":\"7.2 移动证书\",\"t\":[\"将两个证书移动到certs目录中。\",\"cd /opt/es/elasticsearch-8.7.0 mv elasticsearch/http.p12 kibana/elasticsearch-ca.pem config/certs rm -rf elasticsearch kibana # 删除之前生成的目录 mv elasticsearch-ssl-http.zip ../ # 将http证书压缩包移动到别的位置，备份 \"]},\"3302\":{\"h\":\"配置文件\",\"t\":[\"修改主配置文件：config/elasticsearch.yml\",\"由于是单机ES，很多配置不用开启，基本上所有配置都采用默认即可。\"]},\"3303\":{\"h\":\"启动ES\",\"t\":[\"提示\",\"启动前，最好是先看下debug部分的内容。提前排错。\"]},\"3304\":{\"h\":\"1. 第一次启动启\",\"t\":[\"第一次启动比较特殊，会额外做三件事：\",\"返回验证信息：账号、密码、Token等\",\"创建证书：证书会自动创建\",\"开启安全模块：开启SSL验证，并自动索引证书，运行其他其他IP访问RESTFul API\",\"# 启动服务 cd /opt/es/elasticsearch-8.7.0/ bin/elasticsearch \"]},\"3305\":{\"h\":\"1.1 返回验证信息\",\"t\":[\"第一次启动控制台打印的验证信息\",\"━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\",\"✅ Elasticsearch security features have been automatically configured!\",\"✅ Authentication is enabled and cluster connections are encrypted.\",\"Password for the elastic user (reset with bin/elasticsearch-reset-password -u elastic):\",\"p1V7xKwWO8lgV62_aUfd\",\"HTTP CA certificate SHA-256 fingerprint:\",\"30b920bb03429973b605b035c144f7c51c7df327ec396f85e9db3ad82923157d\",\"Configure Kibana to use this cluster: Run Kibana and click the configuration link in the terminal when Kibana starts. Copy the following enrollment token and paste it into Kibana in your browser (valid for the next 30 minutes):\",\"eyJ2ZXIiOiI4LjcuMCIsImFkciI6WyIxNzIuMTYuMC45OjkyMDAiXSwiZmdyIjoiMzBiOTIwYmIwMzQyOTk3M2I2MDViMDM1YzE0NGY3YzUxYzdkZjMyN2VjMzk2Zjg1ZTlkYjNhZDgyOTIzMTU3ZCIsImtleSI6ImczdTZFSWtCb24xMUUyVjlFTmJoOjFjemlfR2FDVFJtaWswQ1Y5TzJJX1EifQ==\",\"Configure other nodes to join this cluster: Copy the following enrollment token and start new Elasticsearch nodes with bin/elasticsearch --enrollment-token <token> (valid for the next 30 minutes):\",\"eyJ2ZXIiOiI4LjcuMCIsImFkciI6WyIxNzIuMTYuMC45OjkyMDAiXSwiZmdyIjoiMzBiOTIwYmIwMzQyOTk3M2I2MDViMDM1YzE0NGY3YzUxYzdkZjMyN2VjMzk2Zjg1ZTlkYjNhZDgyOTIzMTU3ZCIsImtleSI6ImdYdTZFSWtCb24xMUUyVjlFTmJlOm5xQVR4NWwxUUptdWN1endFeWg1alEifQ==\",\"If you're running in Docker, copy the enrollment token and run:\",\"docker run -e \\\"ENROLLMENT_TOKEN=<token>\\\" \",\"docker.elastic.co/elasticsearch/elasticsearch:8.7.0 ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\",\"上面的内容只会在第一次启动时显示，注意保存里面的内容，尤其是账号和密码\",\"账号: elastic\",\"密码: p1V7xKwWO8lgV62_aUfd\"]},\"3306\":{\"h\":\"1.2 创建证书\",\"t\":[\"ES会自动创建ca、http和节点通信三个证书，如下：\",\"4-3-6\"]},\"3307\":{\"h\":\"1.3 开启安全模块\",\"t\":[\"ES会自动在配置文件elasticsearch.yaml中添加安全相关的配置\",\"# Enable security features ## 激活安全验证能模块 xpack.security.enabled: true xpack.security.enrollment.enabled: true # Enable encryption for HTTP API client connections, such as Kibana ## 开启SSL验证，所有HTTP API都要进行SSL验证 xpack.security.http.ssl: enabled: true keystore.path: certs/http.p12 # 索引的证书 # Enable encryption and mutual authentication between cluster nodes # 开启集群节点间的加密和相互认证功能 xpack.security.transport.ssl: enabled: true verification_mode: certificate keystore.path: certs/transport.p12 # 节点通信的证书 truststore.path: certs/transport.p12 # Create a new cluster with the current node only # Additional nodes can still join the cluster later ## 使用当前节点创建一个新集群，主节点就是当前主机名 ## 其他节点随后可以加入该节点 cluster.initial_master_nodes: [\\\"tx-1\\\"] # Allow HTTP API connections from anywhere # Connections are encrypted and require user authentication ## 运行所有IP访问 HTTP API http.host: 0.0.0.0 # Allow other nodes to join the cluster from anywhere # Connections are encrypted and mutually authenticated # 节点通信配置：该配置运行其他任何ip的节点加入该集群，默认是没有开启的。 #transport.host: 0.0.0.0 \"]},\"3308\":{\"h\":\"2. 登录ES\",\"t\":[\"输入https://ip或hostname:端口号/ 进行访问\",\"当前配置的URL： https://159.75.225.162:9200/ （没有主机映射，就直接用ip访问了）\",\"第一次访问要输入账号和密码，就是第一次启动ES时返回的账号密码（换一个客户端就要输一次密码）。\",\"4-3-4\",\"登录后的页面：\",\"4-3-5\",\"则表示服务正常启动，且能访问了。\"]},\"3309\":{\"h\":\"5. 其他登录方式\",\"t\":[\"所有登录方式都要进行身份验证。\",\"postman：以请求头的方式，添加格式化后的账号密码\",\"kibana：需要验证token\"]},\"3310\":{\"h\":\"4. 守护进程\",\"t\":[\"ES默认启动的方式是前台启动，第一次前台启动为了获取密码信息，之后可以选择守护进程的方式启动\",\"su es cd /opt/es/elasticsearch-8.7.0/ # 后台启动服务 bin/elasticsearch -d \"]},\"3311\":{\"h\":\"debug\",\"t\":[\"一些启动时可能会出现的问题。\"]},\"3312\":{\"h\":\"1. 默认JVM内存过大\",\"t\":[\"ES内置JVM的默认内存是4G。\",\"如果Linux服务器剩余内存过小，就会直接卡死，可以按照优化章节的内容重新配置内存\",\"ES 目录的 config/jvm.options文件是用来配置内存的。\",\"################################################################ ## IMPORTANT: JVM heap size ################################################################ ## -Xms4g ## -Xmx4g -Xms1g # 初始启动大小 -Xmx1g # 可分配的最大内置值 \"]},\"3313\":{\"h\":\"2. 虚拟内存过小\",\"t\":[\"报错：max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]，虚拟内存过小，只有65530，至少需要262144\",\"将虚拟内存修改层262144\",\"# 查看当前虚拟内存 cat /proc/sys/vm/max_map_count # 65530 # 修改虚拟内存 sudo sysctl -w vm.max_map_count=262144 # vm.max_map_count=262144 # 再次查看当前内存 cat /proc/sys/vm/max_map_count # 262144 \"]},\"3314\":{\"h\":\"3. 协议错误\",\"t\":[\"报错：received plaintext http traffic on an https chann 配置了ssl，就要用https访问，而不是http\"]},\"3315\":{\"h\":\"4. 忘记密码\",\"t\":[\"第一次启动ES会返回密码信息，如果没有保存，可以采用指令重置密码\",\"PS: 用户名默认是elastic\",\"cd /opt/es/elasticsearch-8.7.0/ bin/elasticsearch-reset-password -u elastic \"]},\"3316\":{\"h\":\"4-4. Linux集群\",\"t\":[\"致命注意事项：\",\"搭建集群默认是在一个局域网的，无论是官网提示的操作步骤还是网络上别人分享的教程，都是在同一个区域网下的集群。\",\"跨网络的集群搭建按照各种教程都会失败，因为节点互相访问时采用的是内网ip。\",\"ES会发现同一区域网下的其他节点，很多教程都是基于这个自动发现搭建的。\",\"跨网络集群属于高级内容\",\"ES不推荐跨低于节点组成一个集群，在网络拥塞的情况下会导致各种问题。\",\"官方教程推荐使用elasticsearch-create-enrollment-token -s node参数注册token的方式添加新集群，但这种方式仅适用于局域网。\",\"暂时不再研究跨区域网集群，尝试了10个小时，失败了\",\"提示\",\"Linux上的Elasticsearch集群和单机有很多重复的步骤，这里进行了重复的列出，方便查询。\",\"这里仅包含：单主机模拟集成环境、区域网集成环境\"]},\"3317\":{\"h\":\"安装ES\",\"t\":[\"ES8需要Java17，不过ES8会默认会捆绑JDK，所以不配置Java环境也可以。\"]},\"3318\":{\"h\":\"1. 下载ES\",\"t\":[\"下载地址：LINUX_X86_64\",\"可以在本地下载上传到服务器，也可以直接在服务器进行wget下载。\",\"wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-8.7.0-linux-x86_64.tar.gz \"]},\"3319\":{\"h\":\"2. 上传安装包，规划目录\",\"t\":[\"上传目录：/opt/soft-bar/，该目录用来存放安装包\",\"工作目录：/opt/es/：该目录存放所有ES相关的内容 \",\"解压目录：/opt/es/es-8.7.0/\",\"其他ES文件也都放在该目录下，包括Kibana\"]},\"3320\":{\"h\":\"3. 解压缩\",\"t\":[\"cd /opt/soft-bar tar -zxvf elasticsearch-8.7.0-linux-x86_64.tar.gz -C /opt/es \",\"解压后的目录结构：\",\"4-3-1\",\"bin：可执行脚本目录\",\"config：配置目录\",\"jdk：内置JDK\",\"lib：内置类库\",\"logs：日志目录\",\"modules：模块目录\",\"plugins：插件目录\"]},\"3321\":{\"h\":\"4. 补齐目录\",\"t\":[\"解压后的目录结构还缺一个数据文件目录 /data/ 和证书目录 /config/certs。\",\"这俩目录会在首次启动ES时，自动创建。\"]},\"3322\":{\"h\":\"5. 创建es用户\",\"t\":[\"Elasticsearch 不能使用 root用户启动，因此要创建一个名为es的用户操作Elasticsearch。\",\"useradd es # 创建用户 passwd es # 设置密码，回车输入密码，这里暂密码暂定为es chown -R es:es /opt/es/elasticsearch-8.7.0 # 修改文件拥有者 \"]},\"3323\":{\"h\":\"6. 多节点安装\",\"t\":[\"单主机模拟集群：一切都配置好后，字节cp目录，修改配置，创建多个节点\",\"区域网集群*跨网络集群：多态主机同步进行安装。\"]},\"3324\":{\"h\":\"集群：区域网\",\"t\":[\"提示\",\"以区域网的方式创建集群，这是官方推荐的方式，网络上查询的教程也都是基于区域网的。\",\"node1: 172.16.0.7\",\"node2: 172.16.0.8\",\"node1: 172.16.0.9\",\"三台主机都配置好后，首先启动主节点node-1，其他的主机不要启动。\",\"# 启动服务 cd /opt/es/elasticsearch-8.7.0/ bin/e \"]},\"3325\":{\"h\":\"1. 启动主节点\",\"t\":[\"不用修改任何配置，采用默认的即可，直接启动主节点(node-1)。\",\"启动主节点后，会自动开启安全配置功能，包括：\",\"创建证书：为传输层和HTTP层启用TLS，并自动生成用于配置TLS的密钥和证书\",\"自动修改配置文件：自动在配置文件中加入安全配置信息\",\"返回授权信息：启用身份认证和授权，并将授权信息返回 \",\"内置超级用户​​elastic​​,并生成默认密码\",\"生成注册token等\"]},\"3326\":{\"h\":\"1.1 创建证书\",\"t\":[\"第一次启动节点时，会自动创建证书。证书是用来进行身份验证，防止请求被篡改的。仅在主节点\",\"警告\",\"不要再手动创建证书了，从ES8.4（也许更早）版本开始，证书是自动创建的，手动创建的证书可能会发生冲突。如下图，启动ES时，自动创建certs目录，并创建了3个证书\",\"创建的证书如下：\",\"4-3-6\",\"http.p12：ssl证书，用与http的SSL通信\",\"http_ca.crt：ca证书\",\"transports.p12：节点证书，用于集群节点见通信\"]},\"3327\":{\"h\":\"1.2 自动修改配置文件\",\"t\":[\"第一次启动ES后，会自动开启安全配置功能，并修改配置文件，添加安全类配置：\",\"# Enable security features ## 1. 激活安全验证能模块 xpack.security.enabled: true xpack.security.enrollment.enabled: true # Enable encryption for HTTP API client connections, such as Kibana ## 2. 开启SSL验证，所有HTTP API都要进行SSL验证 xpack.security.http.ssl: enabled: true keystore.path: certs/http.p12 # 索引的证书 # Enable encryption and mutual authentication between cluster nodes ## 3.开启集群节点间的加密和相互认证功能 xpack.security.transport.ssl: enabled: true verification_mode: certificate keystore.path: certs/transport.p12 # 节点通信的证书 truststore.path: certs/transport.p12 # Create a new cluster with the current node only # Additional nodes can still join the cluster later ## 4. 使用当前节点创建一个新集群，主节点就是当前主机名 ## 其他节点随后可以加入该节点 cluster.initial_master_nodes: [\\\"tx-1\\\"] # Allow HTTP API connections from anywhere # Connections are encrypted and require user authentication ## 5. 允许所有IP访问 HTTP API http.host: 0.0.0.0 # Allow other nodes to join the cluster from anywhere # Connections are encrypted and mutually authenticated # 6. 节点通信配置：该配置允许其他任何ip的节点加入该集群，默认是没有开启的。 #transport.host: 0.0.0.0 \"]},\"3328\":{\"h\":\"1.3 返回授权信息\",\"t\":[\"开启安全配置功能，还会启用身份认证和授权，并将授权信息返回。\",\"返回的内容如下：\",\"━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\",\"✅ Elasticsearch security features have been automatically configured!\",\"✅ Authentication is enabled and cluster connections are encrypted.\",\"ℹ️ Password for the elastic user (reset with bin/elasticsearch-reset-password -u elastic):\",\"IXlAmG6eb1V57*bN72gx\",\"ℹ️ HTTP CA certificate SHA-256 fingerprint:\",\"050f72bcd20a7a53ac68cb37663c37d318f1e71af2c8c98b16e58dcdfa83909c\",\"ℹ️ Configure Kibana to use this cluster:\",\"Run Kibana and click the configuration link in the terminal when Kibana starts.\",\"Copy the following enrollment token and paste it into Kibana in your browser (valid for the next 30 minutes):\",\"eyJ2ZXIiOiI4LjcuMCIsImFkciI6WyIxNzIuMTYuMC45OjkyMDAiXSwiZmdyIjoiMDUwZjcyYmNkMjBhN2E1M2FjNjhjYjM3NjYzYzM3ZDMxOGYxZTcxYWYyYzhjOThiMTZlNThkY2RmYTgzOTA5YyIsImtleSI6IlNDTmNHb2tCTWlMRHlaaVVYUTNGOnZibmJUdUFLUjhTRjZ1aXVHU0xZTlEifQ==\",\"ℹ️ Configure other nodes to join this cluster:\",\"On this node: \",\"Create an enrollment token with bin/elasticsearch-create-enrollment-token -s node.\",\"Uncomment the transport.host setting at the end of config/elasticsearch.yml.\",\"Restart Elasticsearch.\",\"On other nodes: \",\"Start Elasticsearch with bin/elasticsearch --enrollment-token <token>, using the enrollment token that you generated.\",\"━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\"]},\"3329\":{\"h\":\"信息总结：\",\"t\":[\"用户名：elastic（这个用户是超级用户，系统内置的用户名）\",\"密码：xbqtuCmjMmlU6b_OXhsg\",\"Kibana token：用于配置Kibana，有效时间30分钟\",\"其他节点加入该集群的步骤 \",\"在该节点上： \",\"创建一个注册token\",\"修稿配置文件中的：transport.host，允许其他节点加入\",\"重启当前ES节点\",\"在新的节点上 \",\"修改配置文件\",\"在启动节点时，使用主节点产生的注册token\"]},\"3330\":{\"h\":\"2. 验证节点\",\"t\":[\"登录主节点，查看主节点状态。\",\"输入https://ip或hostname:端口号/ 进行访问\",\"当前配置的URL： https://159.75.225.162:9200/ （没有主机映射，就直接用ip访问了）\",\"第一次访问要输入账号和密码，就是第一次启动ES时返回的账号密码（换一个客户端就要输一次密码）。\",\"4-3-4\"]},\"3331\":{\"h\":\"3. 主节点：创建一个注册token\",\"t\":[\"在主节点上创建一个节点注册token，用来让新节点加入集群。\",\"bin/elasticsearch-create-enrollment-token -s node # 会返回很长的token字符串 \"]},\"3332\":{\"h\":\"4. 主节点：修改配置文件并重启\",\"t\":[\"在主节点上修改集群配置信息、开放其他节点的访问，然后重启\",\"cluster.name: es-com node.name: node-1 node.roles: [master,data] path.data: /opt/es/elasticsearch-8.7.0/data path.logs: /opt/es/elasticsearch-8.7.0/logs network.host: 0.0.0.0 http.port: 9200 transport.host: 0.0.0.0 cluster.initial_master_nodes: [\\\"node-1\\\"] \"]},\"3333\":{\"h\":\"5. 新节点：加入集群\",\"t\":[\"新节点通过主节点创建的注册token加入集群。新节点什么都不用修改直接通过注册token启动。\",\"bin/elasticsearch --enrollment-token <enrollment-token> \"]},\"3334\":{\"h\":\"集群：非区域网\",\"t\":[\"警告\",\"不推荐，节点之间会有网络延迟，仅考虑容灾复制。\",\"网上包括官方手册，都没有找到与非区域有关的教程。\",\"暂略\"]},\"3335\":{\"h\":\"集群：单机模拟\",\"t\":[\"提示\",\"在一台主机上模拟集群，ip相同（内网ip），以端口号作为区分。\",\"node-9201：http.port=9201，transport.port=9301\",\"node-9202：http.port=9202，transport.port=9302\",\"node-9203：http.port=9203，transport.port=9303\",\"大概过程如下：\",\"创建node-9201：主节点\",\"配置node-9201\",\"启动node-9201：本次启动是为了获取certs证书和elasticsearch.keystore\",\"关闭node-9201，清理data和logs目录\",\"拷贝node-9201，生成两份拷贝node-9202和node-9203\",\"依次启动node-9201、node-9202、node-9203，从而形成集群\",\"登录 multi Elasticsearch Head 插件，查看集群信息。\"]},\"3336\":{\"h\":\"1. 创建主节点\",\"t\":[\"创建目录：opt/es/cluster用来存放集群。\",\"解压ES软件包到该目录下，命名为node-9201，该节点即为初始主节点\",\"直接启动ES服务，用于生成：certs下的三个证书、elasticsearch-keystore和安全模块的配置\"]},\"3337\":{\"h\":\"2. 配置\",\"t\":[\"关闭node-9201的ES服务，并对节点进行如下配置：\",\"# 集群名：各节点统一 cluster.name: es-com # 节点名：集群内唯一 node.name: node-9201 # 节点角色 node.roles: [master,data] # 目录规划：data和logs目录 path.data: /opt/es/cluster/node-9201/data path.logs: /opt/es/cluster/node-9201/logs # 节点绑定的主机：0.0.0.0表示运行所有主机访问 network.host: 0.0.0.0 # 节点端口 http.port: 9201 # 允许和那些主机上的节点通信：0.0.0.0表示全网所有主机上的节点都允许 transport.host: 0.0.0.0 # 主机间通信的端口 transport.port: 9301 # 用于广播发现其他主机：ip:transport.port discovery.seed_hosts: [\\\"localhost:9302\\\",\\\"localhost:9303\\\"] # 初始化集群时，谁来作为备选主节点 cluster.initial_master_nodes: [\\\"node-9201\\\"] # 跨域配置 http.cors.enabled: true http.cors.allow-origin: \\\"*\\\" ##### 下面是自动生成的安全模块配置 ###### xpack.security.enabled: true # 开启安全模块 xpack.security.enrollment.enabled: true xpack.security.http.ssl: enabled: true # 开启https keystore.path: certs/http.p12 xpack.security.transport.ssl: enabled: true # 开启节点间的ssl通信 verification_mode: certificate keystore.path: certs/transport.p12 truststore.path: certs/transport.p12 # 允许所有主机访问HTTP API http.host: 0.0.0.0 \"]},\"3338\":{\"h\":\"3. 复刻其他节点\",\"t\":[\"清空data和logs目录后，在cluster目录下复刻两个节点：node-9202和node-9203\",\"复刻的节点内证书都是一样的，所以可以互相通信。\"]},\"3339\":{\"h\":\"4. 配置另外连个节点\",\"t\":[\"大部分配置都是一样，只需要改下节点名、端口等，如下是需要修改的地方：\",\"# node-9202 node.name: node-9202 path.data: /opt/es/cluster/node-9202/data path.logs: /opt/es/cluster/node-9202/logs http.port: 9202 transport.port: 9302 discovery.seed_hosts: [\\\"localhost:9301\\\",\\\"localhost:9303\\\"] # cluster.initial_master_nodes，直接注释掉 # node-9203 node.name: node-9203 path.data: /opt/es/cluster/node-9203/data path.logs: /opt/es/cluster/node-9203/logs http.port: 9203 transport.port: 9303 discovery.seed_hosts: [\\\"localhost:9301\\\",\\\"localhost:9302\\\"] # cluster.initial_master_nodes，直接注释掉 \"]},\"3340\":{\"h\":\"5. 启动集群并验证\",\"t\":[\"依次启动三个集群，每个节点启动都会返回授权信息，需要报错下（不保存也可以，可以重置）\",\"cd /opt/es/cluster/node-9201/bin ./elasticsearch cd /opt/es/cluster/node-9202/bin ./elasticsearch cd /opt/es/cluster/node-9203/bin ./elasticsearch \",\"启动完后，访问主节点，输入账号密码，查看集群信息\",\"4-4-1\"]},\"3341\":{\"h\":\"集群管理\"},\"3342\":{\"h\":\"1. 守护进程\",\"t\":[\"ES默认启动的方式是前台启动，第一次前台启动为了获取密码信息，之后可以选择守护进程的方式启动\",\"# 后台启动服务 bin/elasticsearch -d # 重启服务：重复启动命令就会重启 # 停止ES运行：查询ES的pid，然后手动kill ps -ef | grep elastic kill -9 pid \"]},\"3343\":{\"h\":\"2. 重获授权信息\",\"t\":[\"# 重置密码 bin/elasticsearch-reset-password -u elastic \"]},\"3344\":{\"h\":\"debug\",\"t\":[\"一些启动时可能会出现的问题。\"]},\"3345\":{\"h\":\"1. 默认JVM内存过大\",\"t\":[\"ES内置JVM的默认内存是4G。\",\"如果Linux服务器剩余内存过小，就会直接卡死，可以按照优化章节的内容重新配置内存\",\"ES 目录的 config/jvm.options文件是用来配置内存的。\",\"################################################################ ## IMPORTANT: JVM heap size ################################################################ ## -Xms4g ## -Xmx4g -Xms1g # 初始启动大小 -Xmx1g # 可分配的最大内置值 \"]},\"3346\":{\"h\":\"2. 虚拟内存过小\",\"t\":[\"报错：max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]，虚拟内存过小，只有65530，至少需要262144\",\"将虚拟内存修改层262144\",\"# 查看当前虚拟内存 cat /proc/sys/vm/max_map_count # 65530 # 修改虚拟内存 sudo sysctl -w vm.max_map_count=262144 # vm.max_map_count=262144 # 再次查看当前内存 cat /proc/sys/vm/max_map_count # 262144 \",\"PS :主机若进行了重启，就要重新修改虚拟内存\"]},\"3347\":{\"h\":\"3. 协议错误\",\"t\":[\"报错：received plaintext http traffic on an https chann 配置了ssl，就要用https访问，而不是http\"]},\"3348\":{\"h\":\"4. 线程问题\",\"t\":[\"默认线程数太少，要修改成4080 报错：max number of threads [3565] for user [ec2-user] is too low, increase to at least [4096]\",\"ulimit -u 4096 # 临时修改，重启失效 \"]},\"3349\":{\"h\":\"5. 端口限制\",\"t\":[\"有些云平台的主机看似关闭了防火墙，但平台网关其实开启了防火墙，且是以白名单的形式，比如阿里云。此时9200端口是禁止访问的，在主机上查看防火墙是关闭状态，这只能在云平台的安全组中进行设置。\"]},\"3350\":{\"h\":\"4-5. Kibana\",\"t\":[\"Kibana是一个Kibana是一个开源的ES分析与可视化工具。可以用kibana搜索、查看存放在Elasticsearch中的数据。Kibana与Elasticsearch的交互方式是各种不同的图表、表格、地图等，直观的展示数据，从而达到高级的数据分析与可视化的目的。\",\"Elasticsearch、Logstash和Kibana这三个技术就是我们常说的ELK技术栈\"]},\"3351\":{\"h\":\"安装Kibana\",\"t\":[\"下载地址-最新版\",\"下载地址-多版本选择\",\"版本：Kibana版本和ES版本是同步更新的 \",\"必须保证Kibana的版本与ES的版本完全一致，否则报错\",\"该软件是绿色软件，解压后即可使用\"]},\"3352\":{\"h\":\"修改配置文件\",\"t\":[\"Kibana是需要连接ES的，默认的配置未必能连上，需要进行配置。\",\"文件：config/kibana.yml\",\"# host server.host: \\\"localhost\\\" # 默认 # 端口 server.port: 5601 # 默认 # 连接ES 服务器的地址：如果是集群就连接master节点 elasticsearch.hosts: [\\\"http://localhost:9200\\\"] # 默认 # 支持中文 i18n.locale: \\\"zh-CN\\\" # 默认值是 \\\"en\\\" # 学习阶段可以暂时关闭SSL server.ssl.enabled: false \"]},\"3353\":{\"h\":\"windows下使用\",\"t\":[\"下执行 bin/kibana.bat 文件\",\"通过浏览器访问 : http://localhost:5601\",\"4-5-1\"]},\"3354\":{\"h\":\"4-6. 重要配置\"},\"3355\":{\"h\":\"elasticsearch.yaml\",\"t\":[\"elasticsearch.yaml主要配置项如下：\",\"# ==================== Elasticsearch Configuration ================= # 配置文件目录：/config/elasticsearch.yaml # PS：改配置是以集群为前提配置的 # --------------------------- Cluster：集群信息 ---------------------- # # 集群名：同一集群的节点 要有相同的集群名 cluster.name: my-application # # ---------------------------- Node：节点信息 ------------------------- # # # 节点名：同一集群总不得重复，一旦设置不能更改，建议包含主机信息 node.name: HOSTNAME # # Add custom attributes to the node: # #node.attr.rack: r1 # # --------------------------- Paths：文件路径信息 ---------------------- # # # 索引数据储存的目录 path.data: /data # # # 日志文件储存的目录 # path.logs: /path/to/logs # # ----------------------------------- Memory ------------------------- # # Lock the memory on startup: # #bootstrap.memory_lock: true # # Make sure that the heap size is set to about half the memory available # on the system and that the owner of the process is allowed to use this # limit. # # Elasticsearch performs poorly when the system is swapping the memory. # # ---------------------------------- Network -------------------------- # # By default Elasticsearch is only accessible on localhost. Set a different # address here to expose this node on the network: # #network.host: 192.168.0.1 # # # ES服务端口 http.port: 9200 # # For more information, consult the network module documentation. # # --------------------------------- Discovery -------------------- # # Pass an initial list of hosts to perform discovery when this node # is started:The default list of hosts is [\\\"127.0.0.1\\\", \\\"[::1]\\\"] # # # 查找集群中其他节点的：值为其他节点的通信地址 discovery.seed_hosts: [\\\"host1\\\", \\\"host2\\\"] # # Bootstrap the cluster using an initial set of master-eligible nodes: # #cluster.initial_master_nodes: [\\\"node-1\\\", \\\"node-2\\\"] # # For more information, consult the discovery and cluster formation # module documentation. # # ---------------------------------- Various ----------------------- # # Allow wildcard deletion of indices: # #action.destructive_requires_name: false #-------- BEGIN SECURITY AUTO CONFIGURATION：SSL安全配置 ------------ # # The following settings, TLS certificates, and keys have been automatically # generated to configure Elasticsearch security features on 30-06-2023 02:47:03 # # Enable security features xpack.security.enabled: false xpack.security.enrollment.enabled: true # Enable encryption for HTTP API client connections, such as Kibana, Logstash, and Agents xpack.security.http.ssl: enabled: false keystore.path: certs/http.p12 # Enable encryption and mutual authentication between cluster nodes xpack.security.transport.ssl: enabled: true verification_mode: certificate keystore.path: certs/transport.p12 truststore.path: certs/transport.p12 # Create a new cluster with the current node only # Additional nodes can still join the cluster later cluster.initial_master_nodes: [\\\"PC-20210318BCMF\\\"] # Allow HTTP API connections from anywhere # Connections are encrypted and require user authentication http.host: 0.0.0.0 # Allow other nodes to join the cluster from anywhere # Connections are encrypted and mutually authenticated #transport.host: 0.0.0.0 #----------------------- END SECURITY AUTO CONFIGURATION ------------------------- \"]},\"3356\":{\"h\":\"jvm.options\",\"t\":[\"暂略\"]},\"3357\":{\"h\":\"log4j2.properties\",\"t\":[\"暂略\"]},\"3358\":{\"h\":\"索引setting\",\"t\":[\"暂略\"]},\"3359\":{\"h\":\"5-1. 核心概念\"},\"3360\":{\"h\":\"1. Index：索引\",\"t\":[\"提示\",\"在结构层次方面，类似于MySQL中的库\",\"一个索引就是一个拥有几分相似特征的文档的集合。比如说，你可以有一个客户数据的索引，另一个产品目录的索引，还有一个订单数据的索引。\",\"一个索引由一个名字来标识（必须全部是小写字母），并且当我们要对这个索引中的文档进行索引、搜索、更新和删除的时候，都要使用到这个名字。在一个集群中，可以定义任意多的索引。\",\"能搜索的数据必须索引，这样的好处是可以提高查询速度，比如：新华字典前面的目录 就是索引的意思，目录可以提高查询速度。\",\"Elasticsearch 索引的精髓：一切设计都是为了提高搜索的性能。\"]},\"3361\":{\"h\":\"2. Type：类型\",\"t\":[\"提示\",\"ES 7.x 及以上版本已经没有Type这层概念了。\",\"Type表示逻辑上的分类，当前已经不支持自定义，默认类型为：_doc\"]},\"3362\":{\"h\":\"3. Document：文档\",\"t\":[\"提示\",\"在结构层次方面，类似于MySQL中数据表的一行数据\",\"一个文档是一个可被索引的基础信息单元，也就是一条数据\",\"比如：你可以拥有某一个客户的文档，某一个产品的一个文档，当然，也可以拥有某个 订单的一个文档。文档以 JSON格式来表示，\",\"在一个索引里面，可以存储任意多的文档。\"]},\"3363\":{\"h\":\"4. Field：字段\",\"t\":[\"提示\",\"在结构层次方面，类似于MySQL中数据表里的字段\",\"对文档数据根据不同属性进行的分类标识\"]},\"3364\":{\"h\":\"5. Mapping：映射\",\"t\":[\"提示\",\"映射类似于MySQL中的表结构\",\"mapping 是处理数据的方式和规则方面做一些限制\",\"如：某个字段的数据类型、默认值、分析器、是否被索引等等。这些都是映射里面可以设置的，其它就是处理 ES 里面数据的一些使用规则设置。\",\"按着最优规则处理数据对性能提高很大，因此才需要建立映射，并且需要思考如何建立映射才能对性能更好。\"]},\"3365\":{\"h\":\"6. Shards：分片\",\"t\":[\"提示\",\"类似MySQL中的水平分表，目的是为了水平扩容和分布式效率提升\",\"一个索引可以存储超出单个节点硬件限制的大量数据。 比如，一个具有 10 亿文档数据的索引占据 1TB 的磁盘空间，而任一节点都可能没有这样大的磁盘空间。或者单个节点处理搜索请求，响应太慢。为了解决这个问题，Elasticsearch 提供了将索引划分成多份的能力，每一份就称之为分片。\",\"当你创建一个索引的时候，你可以指定你想要的分片的数量。每个分片本身也是一个功能完善并且独立的“索引”，这个“索引”可以被放置到集群中的任何节点上。\",\"分片很重要，主要有主要有两方面的原因：\",\"允许你水平分割 / 扩展你的内容容量\",\"允许你在分片之上进行分布式的、并行的操作，进而提高性能/吞吐量\"]},\"3366\":{\"h\":\"6.1 分片的部署\",\"t\":[\"和MySQL不同，一个分片怎样分布，它的文档怎样聚合和搜索请求，是完全由 Elasticsearch 管理的，开发者不用进行手动部署。\"]},\"3367\":{\"h\":\"6.2 分片与索引\",\"t\":[\"索引是分片的集合。\",\"当 Elasticsearch 在索引中搜索的时候， 他发送查询到每一个属于索引的分片(Lucene 索引)，然后合并每个分片的结果到一个全局的结果集。\"]},\"3368\":{\"h\":\"7. Replicas：副本\",\"t\":[\"提示\",\"类似于MySQL分布式部署中的从节点，是为了高并发和高可用。\",\"为了节点的高可用，创建副本是很有必要且推荐的。Elasticsearch 允许你创建分片的一份或多份拷贝，这些拷贝叫做复制分片(副本)。\",\"除了高可用外，副本也可以提高性能、吞吐量，也就是高并发。\"]},\"3369\":{\"h\":\"7.1 主分片与复制分片\",\"t\":[\"一旦复制了，每个索引就有了主分片（作为复制源的原来的分片）和复制分片（主分片的拷贝）之别。分片和复制的数量可以在索引创建的时候指定。在索引创建之后，你可以在任何时候动态地改变复制的数量，但是你事后不能改变分片的数量。\"]},\"3370\":{\"h\":\"7.2 默认处理\",\"t\":[\"默认情况下，Elasticsearch 中的每个索引被分片 1 个主分片和 1 个复制，这意味着，如果你的集群中至少有两个节点，你的索引将会有 1 个主分片和另外 1 个复制分片（1 个完全拷贝），这样的话每个索引总共就有 2 个分片，我们需要根据索引需要确定分片个数。\"]},\"3371\":{\"h\":\"8. Allocation：分配\",\"t\":[\"将分片分配给某个节点的过程，包括分配主分片或者副本。\",\"如果是副本，还包含从主分片复制数据的过程。这个过程是由 master 节点完成的。\"]},\"3372\":{\"h\":\"5-2. 分布式集群\"},\"3373\":{\"h\":\"系统架构\",\"t\":[\"5-2-1\",\"如图：（节点数：3、分片数：2、备份数：1）\",\"节点：集群有三个节点，其中Node1是主节点 \",\"主节点在启动时根据配置指定，在运行中可以选举产生\",\"分片：索引被分片储存了，储存在了各个节点：P0、P1、P2 \",\"并非每个节点都有一个分片，而是根据规则创建，所以上图只有两个分片\",\"副本：每个分片都有自己的副本，P0->R0、P1->R1、P2->R2 \",\"副本跟被复制的分片肯定是不能在同一个节点的（高可用）\",\"副本数量也不是和节点关联的，而且根据设置的规则创建，默认是1个副本\"]},\"3374\":{\"h\":\"1. 概述\",\"t\":[\"一个运行中的 Elasticsearch 实例称为一个节点，而集群是由一个或者多个拥有相同cluster.name（集群名） 配置的节点组成， 它们共同承担数据和负载的压力。\",\"当有节点加入集群中或者从集群中移除节点时，集群将会重新平均分布所有的数据。\"]},\"3375\":{\"h\":\"2. 主节点\",\"t\":[\"当一个节点被选举成为主节点时， 它将负责管理集群范围内的所有变更，例如增加、删除索引，或者增加、删除节点等。\",\"主节点并不需要涉及到文档级别的变更和搜索等操作，所以当集群只拥有一个主节点的情况下，即使流量的增加它也不会成为瓶颈。 任何节点都可以成为主节点。\"]},\"3376\":{\"h\":\"3. 请求处理\",\"t\":[\"可以将请求发送到集群中的任何节点，包括主节点。\",\"每个节点都知道任意文档所处的位置，并且能够将我们的请求直接转发到存储我们所需文档的节点。\",\"无论我们将请求发送到哪个节点，它都能负责从各个包含我们所需文档的节点收集回数据，并将最终结果返回給客户端。 Elasticsearch 对这一切的管理都是透明的。\"]},\"3377\":{\"h\":\"单节点集群\",\"t\":[\"单节点集群指的是集群中只有一个节点，该节点内可以包含有多个分片和副本。实际开发中不会出现单节点集群，这里只是为了演示集群的原理。\"]},\"3378\":{\"h\":\"1. 创建单节点集群\",\"t\":[\"创建单节点集群，并查看集群信息\",\"GET请求http://localhost:9300/_cluster/health查看集群的节点信息，返回如下信息：\",\"{ \\\"cluster_name\\\": \\\"my-es\\\", \\\"status\\\": \\\"green\\\", //状态为green \\\"timed_out\\\": false, \\\"number_of_nodes\\\": 1, //单节点 \\\"number_of_data_nodes\\\": 1, //分片信息都是0 \\\"active_primary_shards\\\": 0, \\\"active_shards\\\": 0, \\\"relocating_shards\\\": 0, \\\"initializing_shards\\\": 0, \\\"unassigned_shards\\\": 0, \\\"delayed_unassigned_shards\\\": 0, \\\"number_of_pending_tasks\\\": 0, \\\"number_of_in_flight_fetch\\\": 0, \\\"task_max_waiting_in_queue_millis\\\": 0, \\\"active_shards_percent_as_number\\\": 100.0 } \"]},\"3379\":{\"h\":\"2. 索引分片\",\"t\":[\"创建完单节点集群后，创建名为 users 的索引，并将索引分成3个主分片和一份副本（每个主分片拥有一个副本分片）\",\"通过PUT请求 http://localhost:9300/user创建索引，并通过以下请求体进行分片\",\"{ \\\"settings\\\":{ \\\"number_of_shards\\\":3, //创建的分片数量 \\\"number_of_replicas\\\":1 //创建的副本数量，每个分片都会有副本的 } } \"]},\"3380\":{\"h\":\"2.1 查询集群信息\",\"t\":[\"创建成功后，再次发送请求，查询集群信息\",\"{ \\\"cluster_name\\\": \\\"my-es\\\", \\\"status\\\": \\\"yellow\\\", //状态为yellow \\\"timed_out\\\": false, \\\"number_of_nodes\\\": 1, //单节点 \\\"number_of_data_nodes\\\": 1, \\\"active_primary_shards\\\": 3, //主分片：3个 \\\"active_shards\\\": 3, \\\"relocating_shards\\\": 0, \\\"initializing_shards\\\": 0, \\\"unassigned_shards\\\": 3, \\\"delayed_unassigned_shards\\\": 0, \\\"number_of_pending_tasks\\\": 0, \\\"number_of_in_flight_fetch\\\": 0, \\\"task_max_waiting_in_queue_millis\\\": 0, \\\"active_shards_percent_as_number\\\": 50.0 } \"]},\"3381\":{\"h\":\"2.2 查询索引信息\",\"t\":[\"发送请求查看刚创建的索引信息。\",\"{ \\\"user\\\": { \\\"aliases\\\": {}, \\\"mappings\\\": {}, \\\"settings\\\": { \\\"index\\\": { \\\"routing\\\": { \\\"allocation\\\": { \\\"include\\\": { \\\"_tier_preference\\\": \\\"data_content\\\" } } }, \\\"number_of_shards\\\": \\\"3\\\", //分片数量3 \\\"provided_name\\\": \\\"user\\\", \\\"creation_date\\\": \\\"1688003784177\\\", \\\"number_of_replicas\\\": \\\"1\\\", //副本数量1 \\\"uuid\\\": \\\"FhGd7_y9RHmSAgkRqZj7kA\\\", \\\"version\\\": { \\\"created\\\": \\\"8080199\\\" } } } } } \"]},\"3382\":{\"h\":\"3. 分析集群情况\",\"t\":[\"集群现在是拥有一个索引的单节点集群。所有 3 个主分片都被分配在 node-1\"]},\"3383\":{\"h\":\"3.1 elasticsearch-head插件\",\"t\":[\"可以安装浏览器插件elasticsearch-head，然后进去插件，输入地址，查看集群情况\",\"5-2-2\",\"加星号的是主节点，另一个是副节点。\"]},\"3384\":{\"h\":\"3.2 分析\",\"t\":[\"如上图，分析集群的情况：\",\"集群健康值:yellow( 3 of 6 )：表示当前集群的全部主分片都正常运行，但是副本分片没有全部处在正常状态\",\"node-9300：3个主分片都正常（绿色的）\",\"Unassigned：3 个副本分片都是 Unassigned，它们都没有被分配到任何节点。 在同 一个节点上既保存原始数据又保存副本是没有意义的，因为一旦失去了那个节点，我们也将丢失该节点上的所有副本数据。\",\"总结：当前我们的集群是正常运行的，但是在硬件故障时有丢失数据的风险\"]},\"3385\":{\"h\":\"单点故障\",\"t\":[\"当集群中只有一个节点在运行时，意味着会有一个单点故障问题——没有冗余（高可用）。\"]},\"3386\":{\"h\":\"1. 启动第二个节点\",\"t\":[\"为集群启动第二个节点（它和第一个节点有同样的 cluster.name 配置），它会自动发现集群并加入到其中。\"]},\"3387\":{\"h\":\"2. 查看集群情况\",\"t\":[\"再次使用elasticsearch-head插件，查看集群情况。\",\"5-2-3\",\"集群健康值：green( 6 of 6 ) : 表示所有 6 个分片（包括 3 个主分片和 3 个副本分片）都在正常运行。\",\"node-9300：3 个主分片正常\",\"node-9400：3个副本分片也正常，且和主分片不再同一个节点\"]},\"3388\":{\"h\":\"3. 总结\",\"t\":[\"当第二个节点加入到集群后，3 个副本分片将会分配到这个节点上——每个主分片对应一个副本分片。这意味着当集群内任何一个节点出现问题时，我们的数据都完好无损。\",\"所有新近被索引的文档都将会保存在主分片上，然后被并行的复制到对应的副本分片上。这就保证了我们既可以从主分片又可以从副本分片上获得文档。\"]},\"3389\":{\"h\":\"水平扩容\",\"t\":[\"水平扩容指的是：增加节点数量，从而加大数据的吞吐量和性能。\"]},\"3390\":{\"h\":\"1. 启动第三个节点\",\"t\":[\"当启动了第三个节点，集群将会拥有三个节点，集群为了分散负载会对分片进行重新分配。\"]},\"3391\":{\"h\":\"2. 查看集群情况\",\"t\":[\"使用elasticsearch-head插件，查看三个节点的集群情况。\",\"5-2-4\",\"集群健康值:green( 6 of 6 ) : 表示所有 6 个分片（包括 3 个主分片和 3 个副本分片）都在正常运行，（增加节点不会凭空增加副本数量）。\",\"分片：node-9300和node-9400上各有一个分片被迁移到了新的 Node-9500节点\",\"现在每个节点上都拥有 2 个分片，而不是之前的 3 个。 这表示每个节点的硬件资源（CPU, RAM, I/O）将被更少的分片所共享，每个分片的性能将会得到提升。\"]},\"3392\":{\"h\":\"3. 扩容的节点数量\",\"t\":[\"分片是一个功能完整的搜索引擎，它拥有使用一个节点上的所有资源的能力。 我们这个拥有 6 个分片（3 个主分片和 3 个副本分片）的索引可以最大扩容到 6 个节点，每个节点上存在一个分片，并且每个分片拥有所在节点的全部资源。\",\"原因：主分片三个，副分片三个，最多一个节点一个分片，也就是最多扩容到6个节点。\"]},\"3393\":{\"h\":\"4. 多个副本\",\"t\":[\"如果扩容的节点数量超过了分片数量（超过6个节点），将会有空闲的节点。\",\"主分片的数目在索引创建时就已经确定了下来。实际上，这个数目定义了这个索引能够 存储 的最大数据量。（实际大小取决于你的数据、硬件和使用场景。）\",\"但是，读操作——搜索和返回数据——可以同时被主分片 或 副本分片所处理，所以当你拥有越多的副本分片时，也将拥有越高的吞吐量（同时高可用也增加了）。\",\"在运行中的集群上是可以动态调整副本分片数目的，可以按需伸缩集群，比如将副本数量变成2：\",\"请求方式：PUT\",\"请求URL：http://localhost:9300/user/_settings\",\"请求体如下\",\"{ \\\"settings\\\":{ \\\"number_of_replicas\\\":2 } } \"]},\"3394\":{\"h\":\"5. 再次查看集群情况\",\"t\":[\"设置成两个副本后，再次通过 elasticsearch-head 插件查看集群情况\",\"5-2-5\",\"如图：users 索引现在拥有 9 个分片：3 个主分片和 6 个副本分片。 每个分片有两个副本，此时可以将以将集群扩容到 9 个节点，每个节点上一个分片。相比原来 3 个节点时，集群搜索性能可以提升 3 倍。\",\"不扩容节点，创建多个副本不会增加性能，只是增加了高可用。\"]},\"3395\":{\"h\":\"集群故障处理\"},\"3396\":{\"h\":\"1. 节点丢失\",\"t\":[\"关闭一个节点后，再次查看集群状态，如图：（关闭node-9300，主节点）\",\"5-2-6\",\"如图，主节点丢失了，集群必须拥有一个主节点来保证正常工作，所以发生的第一件事情就是选举一个新的主节点：Node-9400 。\",\"关闭 Node-9300的同时也失去了主分片，在缺失主分片的时候理论上索引也不能正常工作（集群状态red），不过node-9400和node-9500节点上存在着主分片的完整副本，所以新的主节点立即将备份的副分片提升为主分片, 此时集群的状态将会为yellow。这个提升主分片的过程是瞬间发生的。\"]},\"3397\":{\"h\":\"2. 节点恢复\",\"t\":[\"恢复丢失的节点（重启node-9300），再次查看集群状态，如图：\",\"5-2-7\",\"节点恢复后，集群可以将缺失的副本分片再次进行分配，那么集群的状态也将恢复成之前的状态。如果丢失的节点依然拥有着之前的分片，它将尝试去重用它们，同时仅从主分片复制发生了修改的数据文件。和之前的集群相比，只是 Master 节点切换了。\"]},\"3398\":{\"h\":\"5-3. 分片控制\",\"t\":[\"控制文档与分片之间的匹配关系\"]},\"3399\":{\"h\":\"路由计算\",\"t\":[\"集群有多个分片，不同的分片里数据是不同的，当索引一个文档的时候，文档会被存储到一个主分片中，ES是如何决定放入哪个分片呢？\",\"由于储存的数据是为了以后查询使用，所以不会随机存入用一个分片，否则查询的时候就不知道去哪个分片查了。\"]},\"3400\":{\"h\":\"ES的算法\",\"t\":[\"ES有自己的算法来决定文档存储的分片位置，如下：\",\"shard = hash(routing) % primary_shards_num \",\"routing：一个可变值，默认是文档的 _id ，也可以设置成一个自定义的值\",\"primary_shards_num：主分片的数量\",\"routing 通过hash 函数生成一个数字，然后这个数字再除以number_of_primary_shards后得到余数 。这个分布在 0 到 number_of_primary_shards-1 之间的余数，就是我们所寻求的文档所在分片的位置。\",\"储存数据和查询数据时，采用同样的算法，就能在查询时找到正确的分片了。\"]},\"3401\":{\"h\":\"固定主分片苏联\",\"t\":[\"要在创建索引的时候就确定好主分片的数量 并且永远不会改变这个数量：因为如果数量变化了，那么所有之前路由的值都会无效，文档也再也找不到了。\"]},\"3402\":{\"h\":\"routing参数\",\"t\":[\"所有的文档 API（ get 、 index 、 delete 、 bulk 、 update 以及 mget ）都接受一个叫做 routing 的路由参数 ，通过这个参数我们可以自定义文档到分片的映射。\",\"一个自定义的路由参数可以用来确保所有相关的文档——例如所有属于同一个用户的文档——都被存储到同一个分片中。\"]},\"3403\":{\"h\":\"分片控制简介\",\"t\":[\"假设有一个集群由三个节点组成。 它包含一个叫 emps 的索引，有两个主分片，每个主分片有两个副本分片。相同分片的副本不会放在同一节点。\",\"5-3-1\",\"我们可以发送请求到集群中的任一节点。每个节点都有能力处理任意请求。每个节点都知 道集群中任一文档位置，所以可以直接将请求转发到需要的节点上。\"]},\"3404\":{\"h\":\"协调节点\",\"t\":[\"如果将所有的请求发送到固定的节点上，该节点就是协调节点(coordinating node)\"]},\"3405\":{\"h\":\"轮询\",\"t\":[\"当发送请求的时候，为了扩展负载，更好的做法是轮询集群中所有的节点。\"]},\"3406\":{\"h\":\"写流程\",\"t\":[\"对文档的增删请求都是写操作，写操作必须在主分片上面完成之后才能被复制到相关的副本分片\"]},\"3407\":{\"h\":\"文档 写操作 的具体流程\",\"t\":[\"5-3-2\",\"客户端向 Node 1（协调节点） 发送文档的增删请求。 \",\"可以是任意节点作为协调节点，这里假设是Node 1\",\"协调节点通过路由计算，确定文档属于分片 0，请求会被转发到 Node 3，因为分片 0 的主分片目前被分配在 Node 3 上。\",\"Node 3 在主分片上面执行请求，进行写操作\",\"主分片写完后，将请求并行转发到 Node 1 和 Node 2 的副本分片上。\",\"一旦所有的副本分片都报告成功, Node 3 将向协调节点报告成功，协调节点向客户端报告成功\",\"客户端获取反馈\"]},\"3408\":{\"h\":\"改变流程\",\"t\":[\"有一些可选的请求参数可以改变默认的流程。\",\"暂略，不建议这么做，\"]},\"3409\":{\"h\":\"读（查询）流程\",\"t\":[\"可以从主分片或者从其它任意副本分片检索文档\"]},\"3410\":{\"h\":\"文档 读（检索）操作的具体流程\",\"t\":[\"5-3-3\",\"客户端向 Node 1（协调节点） 发送获取文档的请求\",\"节点使用文档的 _id 来确定文档属于分片 0 。分片 0 的副本分片存在于所有的三个节点上。 \",\"在这种情况下，会进行轮询，假设它将请求转发到 Node 2 。\",\"Node 2 将文档返回给 Node 1 ，然后将文档返回给客户端。\"]},\"3411\":{\"h\":\"协调节点的协调\",\"t\":[\"在处理读取请求时，协调结点在每次请求的时候都会通过轮询所有的副本分片来达到负载均衡。在文档被检索时，已经被索引的文档可能已经存在于主分片上但是还没有复制到副本分片。 在这种情况下，副本分片可能会报告文档不存在，但是主分片可能成功返回文档。 一旦索引请求成功返回给用户，文档在主分片和副本分片都是可用的。\"]},\"3412\":{\"h\":\"更新流程\",\"t\":[\"更新一个文档结合了先前说明的读取和写入流程\"]},\"3413\":{\"h\":\"文档 更新 操作的具体流程\",\"t\":[\"5-3-4\",\"客户端向 Node 1（协调节点） 发送文档更新请求。\",\"Node 1 使用文档的 _id 来确定文档属于分片 0，将请求转发到主分片所在的 Node 3\",\"Node 3 从主分片检索文档，修改 _source 字段中的 JSON ，并且尝试重新索引主分片的文档。如果文档已经被另一个进程修改，它会重试步骤 3 ，超过 retry_on_conflict 次后放弃。\",\"如果 Node 3 成功地更新文档，它将新版本的文档并行转发到 Node 1 和 Node 2 上的副本分片，重新建立索引。一旦所有副本分片都返回成功， Node 3 向协调节点也返回成功，协调节点向客户端返回成\"]},\"3414\":{\"h\":\"副本的更改\",\"t\":[\"当主分片把更改转发到副本分片时， 它不会转发更新请求，而是转发完整文档的新版本。\"]},\"3415\":{\"h\":\"多文档操作流程\",\"t\":[\"和单文档操作的流程原理是一样的。\",\"协调节点将整个多文档请求分解成 每个分片 的多文档请求，并且将这些请求并行转 发到每个参与节点。\",\"协调节点一旦收到来自每个节点的应答，就将每个节点的响应收集整理成单个响应，返 回给客户端\"]},\"3416\":{\"h\":\"多文档 查询 的具体步骤\",\"t\":[\"客户端向协调节点（假设是Node1）发送多个文档的查询请求（mget）\",\"Node 1 为每个分片构建多文档获取请求，然后并行转发这些请求到托管在每个所需的主分片或者副本分片的节点上。\",\"一旦收到所有答复， Node 1 构建响应并将其返回给客户端。\"]},\"3417\":{\"h\":\"多文档 写操作 的具体步骤\",\"t\":[\"客户端向协调节点（假设是Node1）发送多个文档的写操作请求（bulk）\",\"Node 1 为每个节点创建一个批量请求，并将这些请求并行转发到每个包含主分片的节点主机。\",\"主分片一个接一个按顺序执行每个操作。\",\"当每个操作成功时，主分片并行转发新文档（或删除）到副本分片，然后执行下一个操作。\",\"一旦所有的副本分片报告所有操作成功，该节点将向协调节点报告成功，协调节点将这些响应收集整理并返回给客户端。\"]},\"3418\":{\"h\":\"5-4. 倒排索引\"},\"3419\":{\"h\":\"正排索引\",\"t\":[\"提示\",\"ElasticSearch采用的是倒排索引，在此之前先了解下正排索引。\"]},\"3420\":{\"h\":\"1.概述\",\"t\":[\"又称正向索引，当用户发起查询时（假设查询为一个关键词），搜索引擎会扫描索引库中的所有文档，找出所有包含关键词的文档，这样依次从文档中去查找是否含有关键词的方法叫做正向索引。\"]},\"3421\":{\"h\":\"2. 正向索引的结构\",\"t\":[\"1-3-2\"]},\"3422\":{\"h\":\"3. 正向索引解析\",\"t\":[\"我们查询数据时，输入的是关键字,搜索引擎会扫描库中包含该关键字的所有文档，然后返回文档的id，通过id获取文档，我们就可以查询到结果了。\"]},\"3423\":{\"h\":\"4. 正向索引的缺点\",\"t\":[\"对于文档的查询来说，一个站点存在的文档可能会非常多，这样遍历的索引结构效率低下，无法满足用户需求。\",\"因此才有了对文档搜索效率更高的倒排索引。\"]},\"3424\":{\"h\":\"关键字-文档矩阵\",\"t\":[\"提示\",\"先了解下关键字与文档之间的关系。\",\"单词-文档矩阵是表达两者之间所具有的一种包含关系的概念模型。\"]},\"3425\":{\"h\":\"示例\",\"t\":[\"如下几个文档：\",\"d1：马斯克创建了SpaceX\",\"d2：SpaceX 星舰下个月发射\",\"d3：马斯克说将亲自指挥星舰的发射\",\"此时，用户将以马斯克、SpaceX和星舰进行查询，关键字与文档的矩阵为：\",\"d1\",\"d2\",\"d3\",\"马斯克\",\"√\",\"√\",\"SpaceX\",\"√\",\"√\",\"星舰\",\"√\",\"√\"]},\"3426\":{\"h\":\"矩阵解读\",\"t\":[\"横向：表示哪些文档包含了该关键字，d1和d3包含了 马斯克 这个关键字\",\"纵向：表示每个单独的文档包含了哪些关键字，如果d1包含了马斯克和SpaceX\"]},\"3427\":{\"h\":\"搜索引擎的索引\",\"t\":[\"搜索引擎的索引其实就是实现 关键字-矩阵的具体数据结构。可以有不同的方式来实现上述概念模型\",\"正排索引：创建的索引是文档的id，搜索的过程是遍历每一个文档，比对是否有所要查询的关键字，如果有就记录文档的id，最后返回所有的文档id。 \",\"然后通过文档id获取对应的文档作为结果呈现。\",\"这种方式非常的低效\",\"倒排索引：为所有关键字创建索引，关键字对应的值就是包含该关键字的所有文档id。搜索的过程是直接通过索引拿到关键字对应的文档id。 \",\"然后通过id获取对应的文档作为结果呈现。\",\"这种方式是最佳的方案，ES就采用了这种方案。\",\"其他方式：签名文件、后缀树等，这些方式的效率也都不如倒排索引。\"]},\"3428\":{\"h\":\"倒排索引\"},\"3429\":{\"h\":\"1. 概述\",\"t\":[\"倒排索引(Inverted Index)：倒排索引是实现“单词-文档矩阵”的一种具体存储形式，通过倒排索引，可以根据单词快速获取包含这个单词的文档列表。\",\"单词，又称词条，也可以称之为关键字，他是创建文档的“字段“\"]},\"3430\":{\"h\":\"2. 倒排索引的结构\",\"t\":[\"为了增加效率，搜索引擎会把正向索引变为反向索引（倒排索引）即把“文档→单词”的形式变为“单词→文档”的形式。倒排索引具体机构如下:\",\"单词1→文档1的ID；文档2的ID；文档3的ID…\",\"单词2→文档1的ID；文档4的ID；文档7的ID…\"]},\"3431\":{\"h\":\"3. 组成\",\"t\":[\"倒排索引主要由两个部分组成：“单词词典”和“倒排文件”。\",\"单词词典(Lexicon)：搜索引擎的索引单位是单词，单词词典是由文档集合中出现过的所有单词构成的字符串集合，单词词典内每条索引项记载单词本身的一些信息以及指向“倒排列表”的指针。\",\"倒排列表(PostingList)：倒排列表记载了出现过某个单词的所有文档的文档列表及单词在该文档中出现的位置信息，每条记录称为一个倒排项(Posting)。根据倒排列表，即可获知哪些文档包含某个单词。\",\"倒排文件(Inverted File)：所有单词的倒排列表往往顺序地存储在磁盘的某个文件里，这个文件即被称之为倒排文件，倒排文件是存储倒排索引的物理文件。\",\"1-3-3\"]},\"3432\":{\"h\":\"4. 倒排索引的简单实现示例\",\"t\":[\"如下几个文档：\",\"d1：马斯克创建了SpaceX\",\"d2：SpaceX 星舰下个月发射\",\"d3：马斯克说将亲自指挥星舰的发射\",\"通过这5个文档建立简单的倒排索引:\",\"单词id\",\"关键字（单词）\",\"倒排列表\",\"1\",\"马斯克\",\"{1,3}\",\"2\",\"SpaceX\",\"{1,2}\",\"3\",\"星舰\",\"{2,3}\",\"首先要用分词系统将文档自动切分成单词序列，这样就让文档转换为由单词序列构成的数据流，并对每个不同的单词赋予唯一的单词编号(WordID)，并且每个单词都有对应的含有该单词的文档列表即倒排列表。\"]},\"3433\":{\"h\":\"略微复杂的倒排列表\",\"t\":[\"下面介绍一种更加复杂，包含信息更多的倒排索引。\",\"单词id\",\"关键字（单词）\",\"倒排列表(文档id;TF;<Pos>)\",\"1\",\"马斯克\",\"(1;1;<1>),(3;1;<1>)\",\"2\",\"SpaceX\",\"(1;1;<7>),(2;1;<1>)\",\"3\",\"星舰\",\"(2;1;<7>),(3;1;<10>)\",\"TF：单词在文档中出现的次数\",\"Pos: 单词在文档中出现的位置，也就是字符顺序\",\"这个表格展示了更加复杂的倒排索引，前两列不变，第三列倒排索引包含的信息为(文档ID，单词频次，<单词位置>)\"]},\"3434\":{\"h\":\"匹配处理\"},\"3435\":{\"h\":\"1. 词条的分词\",\"t\":[\"ES搜索的基本单位是单词（词条，创建索引时的字段），也可以称之为关键字。对于英文来说就是一个单词或词组，对于汉语来说就是汉字和词语。\",\"词条也可以可以进行分词的，与词条的种类有关，创建文档时，词条（字段）的类型如果是keyword就不能分词，如果是text就可以分词。\",\"示例：比如词条苹果手机，可以分词为：苹果和手机（具体怎么分词与分词器和设置有关）。对分词进行搜索可能会包含很多无关内容，比如其他品牌的手机和真正的苹果。如果禁止分词，搜索苹果的时候可能不会出现苹果手机。\",\"分词时覆盖度和准确度都是需要考虑的。\"]},\"3436\":{\"h\":\"2.标准化\",\"t\":[\"为了搜索更准确，更接近人的思维，倒排索引还有一个同义词、相似词的问题。\",\"相同的词：马斯克、MUSK、musk其实是一个意思\",\"相似的词：dog和dogs是相似的，拥有同样的词根\",\"同义词：工资和薪水看似不是同一个词，但是表达的意思是一样的\",\"如果想根据人的思维模式，返回更符合预期的内容，就需要将词条规范为标准模式，这样就能查询到，与用户搜索的词条不完全一致的结果，但具有很强的相关性。\"]},\"3437\":{\"h\":\"3. 分词器\",\"t\":[\"为了使查询更加智能，就需要进行分词和标准化处理，分词和标准化的过程称为分析。\",\"分析是由ES中的分词器完成的，针对不通的场景（比如中文和英文）会有不同的分词器。\"]},\"3438\":{\"h\":\"5-5. 更新与搜索\",\"t\":[\"分片是 Elasticsearch 最小的工作单元。\"]},\"3439\":{\"h\":\"索引分段\"},\"3440\":{\"h\":\"1. 早期文档搜索的做法\",\"t\":[\"早期的全文检索会为整个文档集合建立一个很大的倒排索引并将其写入到磁盘。 一旦新的索引就绪，旧的就会被其替换，这样最近的变化便可以被检索到。\",\"倒排索引被写入磁盘后是不可改变的，它永远不会修改。\"]},\"3441\":{\"h\":\"1.1 不变性的优点\",\"t\":[\"不需要锁。如果从来不更新索引，你就不需要担心多进程同时修改数据的问题。\",\"一旦索引被读入内核的文件系统缓存，便会留在哪里，由于其不变性。只要文件系统缓存中还有足够的空间，那么大部分读请求会直接请求内存，而不会命中磁盘。这提供了很大的性能提升。\",\"其它缓存(像 filter 缓存)，在索引的生命周期内始终有效。它们不需要在每次数据改变时被重建，因为数据不会变化。\",\"写入单个大的倒排索引允许数据被压缩，减少磁盘 I/O 和 需要被缓存到内存的索引的使用量\"]},\"3442\":{\"h\":\"1.2 不变性的缺点\",\"t\":[\"既然不变了，就无法修改倒排索引本身，而只能进行替换，如果新增了一个文档，想被搜索到，就需要重构整个索引。\",\"这样的话就非常麻烦，只能采取定时（比如一周更新一次）更新的策略。\"]},\"3443\":{\"h\":\"2. 动态更新索引\",\"t\":[\"需求：保证不变性的前提下实现倒排索引的更新？ 方案：使用更多的索引，进行增量更新！\",\"通过增加新的补充索引来反映新近的修改，而不是直接重写整个倒排索引。每一个倒排索引都会被轮流查询到，从最早的开始查询完后再对结果进行合并。\"]},\"3444\":{\"h\":\"3. 动态更新的过程\",\"t\":[\"当产生了新的文档时，就需要将文档进行动态更新，更新过程如下：\",\"5-5-1\",\"客户端提交新的文档到集群\",\"协调节点根据文档的_id计算要放入的主分片（PO）\",\"主分片写入更新\",\"主分片将更新复制到副分片RO和R1 \",\"这两个复制是同时进行的，不过完成复制的时间不一定相同。\",\"副分片更新完后，整个更新流程结束，向客户端响应\",\"根据上面的更新流程可知，更新是有延迟的：\",\"延时 = 主分片延时 + 并行写入副本的最大延时\"]},\"3445\":{\"h\":\"4. 按段搜索\",\"t\":[\"因为是按增量更新的，每更新就新建了一个倒排索引，因此搜索的时候需要每个倒排索引都进行搜索，一个倒排索引就是一段，这个搜索过程就称为：按段搜索。\",\"当一个查询被触发，所有已知的段按顺序被查询。词项统计会对所有段的结果进行聚合，以保证每个词和每个文档的关联都被准确计算。这种方式可以用相对较低的成本将新文档添加到索引。\"]},\"3446\":{\"h\":\"5. 提交点\",\"t\":[\"Elasticsearch 基于 Lucene, 这个 java 库引入了按段搜索的概念。 每一段本身都是一个倒排索引，但索引在 Lucene 中除表示所有段的集合外， 还增加了提交点的概念：一个列出了所有已知段的文件。\"]},\"3447\":{\"h\":\"6. 删除操作\",\"t\":[\"段是不可改变的，所以既不能从把文档从旧的段中移除，也不能修改旧的段来进行反映文档 的更新，那么如何处理增量更新后 之前的旧版本文档，以及如何删除文档呢？\",\"删除：每个提交点会包含一个 .del 文件，文件中会列出这些被删除文档的段信息。当一个文档被 “删除” 时，它实际上只是在 .del 文件中被标记删除。一个被标记删除的文档仍然可以被查询匹配到， 但它会在最终结果被返回前从结果集中移除。\",\"更新：文档更新也是类似的操作方式：当一个文档被更新时，旧版本文档被标记删除，文档的新版本被索引到一个新的段中。 可能两个版本的文档都会被一个查询匹配到，但被删除的那个旧版本文档在结果集返回前就已经被移除。\",\"PS：不用担心无效文档越积越多，段合并的时候，会删除他们的。\"]},\"3448\":{\"h\":\"更新的生效\",\"t\":[\"更新生效：指的是更新能被搜索到。\"]},\"3449\":{\"h\":\"1. 更新生效的流程\",\"t\":[\"索引底层是按段更新的，更新最终要写入磁盘后才能生效，写入磁盘生效的过程如下：\",\"5-5-2\",\"内存（Memory）：首先，新文档被收集到内存索引缓存\",\"内存->OS Cache：缓存被不断的刷写（refresh）到OS Cache \",\"OS Cache：同样也是内存，而非硬盘，OS Cache是为了减少磁盘IO参数的，当数据被刷到OS Cache时，就已经可以被查询到了。\",\"直接刷到硬盘：直接刷写到硬盘也是可以的，只是IO的效率很低。更新生效需要的时间更长。\",\"OS Cache->磁盘（Disk）：将内存中的数据写入到磁盘（物理文件） \",\"磁盘创建新的段：一个追加的倒排索引\",\"OS Cache中的数据被定时（30min）刷新（flush）到磁盘\",\"一个新的包含新段名字的提交点也同时被写入磁盘\",\"磁盘（Disk）：新的段被开启，让它包含的文档可以被搜索\",\"内存（Memory & OS Cache）：内存缓存被清空，等待接收新的文档\"]},\"3450\":{\"h\":\"2. 近实时搜索\",\"t\":[\"新增文档，会以每秒一次的频次从 内存索引缓存 刷写到 OS Cache ，OS Cache里的文件已经可以查询了（只是没有持久化）。\",\"这就是为什么我们说 Elasticsearch 是近实时搜索: 文档的变化并不是立即对搜索可见，但会在一秒之内变为可见。\"]},\"3451\":{\"h\":\"3. 更新控制\"},\"3452\":{\"h\":\"3.1 手动刷新\",\"t\":[\"当用户索引了一个文件并立即搜索它时，会发现根本搜不到，这会给用户产生困惑。\",\"解决方法：用 refresh API 执行一次手动刷新: /users/_refresh\",\"当写测试的时候， 手动刷新很有用，但是不要在生产环境下每次索引一个文档都去手动刷新。 相反，你的应用需要意识到 Elasticsearch 的近实时的性质，并接受它的不足。\"]},\"3453\":{\"h\":\"3.2 时效与效率的选择\",\"t\":[\"并不是所有的情况都需要每秒刷新。\",\"比如：在使用 Elasticsearch 索引大量的日志文件，你可能想优化索引速度而不是近实时搜索， 可以通过设置 refresh_interval ， 降低每个索引的刷新频率\",\"{ \\\"settings\\\": { \\\"refresh_interval\\\": \\\"30s\\\" } } \"]},\"3454\":{\"h\":\"3.3 自动刷新的关闭与开启\",\"t\":[\"在生产环境中，当你正在建立一个大的新索引时，可以先关闭自动刷新，待开始使用该索引时，再把它们调回来\",\"请求：PUT /users/_settings\",\"// 关闭自动刷新 { \\\"refresh_interval\\\": -1 } // 每一秒刷新 { \\\"refresh_interval\\\": \\\"1s\\\" } \"]},\"3455\":{\"h\":\"4. 一致性问题：持久化变更\",\"t\":[\"问题：内存中的数据向内存中刷写时可能会遇到突发状况，导致写入失败，这是可能会导致数据丢失。\",\"解决方案：和MySQL的解决方案一样，通过Translog日志来解决。\"]},\"3456\":{\"h\":\"段合并\",\"t\":[\"于自动刷新流程每秒会创建一个新的段，这样会导致短时间内的段数量暴增。而段数目太多会带来较大的麻烦。\",\"每一个段都会消耗文件句柄、内存和 cpu 运行周期。更重要的是，每个搜索请求都必须轮流检查每个段；所以段越多，搜索也就越慢。\"]},\"3457\":{\"h\":\"1. 自动段合并\",\"t\":[\"Elasticsearch 在后台可以进行自动段合并，小的段被合并到大的段，然后这些大的段再被合并到更大的段。\",\"启动段合并不需要你做任何事。进行索引和搜索时会自动进行。\"]},\"3458\":{\"h\":\"2. 无效的文档\",\"t\":[\"段合并的时候会将那些旧的已删除文档从文件系统中清除。被删除的文档（或被更新文档的旧版本）不会被拷贝到新的大段中。\"]},\"3459\":{\"h\":\"5-6. 文档分析\",\"t\":[\"文档分析是干嘛的\",\"将一句话（段落）进行分析，拆解成N个关键字，然后使用关键字进行索引。\",\"存储：对储存的文本进行拆解，形成几个关键字（比如视频的描述信息）\",\"搜索：对用户搜索的句子进行插件，形成几个关键字，与ES的关键字比对。\",\"文档分析就是对句子（段落）拆解与标准化的 操作。\"]},\"3460\":{\"h\":\"文档分析介绍\"},\"3461\":{\"h\":\"1. 为什么需要文档分析\",\"t\":[\"用户搜索的时候，很大概率输入的是一段话，将一段话进行匹配是不精准也艰难的。\",\"正确的做法就是提取这句话的关键信息：关键字。\",\"然后使用关键字与ES中文档保存的字段的值做匹配，从而获取搜索的内容。\"]},\"3462\":{\"h\":\"2. 文档分析包括什么\",\"t\":[\"文档分析包含下面两个过程\",\"将一段文本 分成适合于 倒排索引 的独立的 词条\",\"将这些词条统一化为标准格式以提高它们的“可搜索性”，或者 recall(返回率)\"]},\"3463\":{\"h\":\"分析器\"},\"3464\":{\"h\":\"1. 分析器介绍\",\"t\":[\"分析器就是用来做文档分析的，他一共包含了三个功能：\",\"字符过滤器：字符串按顺序通过每个字符过滤器。他们的任务是在分词前整理字符串。一个字符过滤器可以用来去掉 HTML，或者将 & 转化成 and等。\",\"分词器：字符串被 分词器 分为单个的词条。一个简单的分词器遇到空格和标点的时候，可能会将文本拆分成词条。\",\"Token 过滤器：一种标准化的行为，词条按顺序通过每个 token 过滤器 。这个过程可能会改变词条（例如，小写化Quick ），删除词条（例如， 像 a， and， the 等无用词），或者增加词条（例如，像 jump 和 leap 这种同义词）。\"]},\"3465\":{\"h\":\"2. 内置分析器\",\"t\":[\"Elasticsearch 还附带了可以直接使用的预包装的分析器。\",\"接下来我们会列出最重要的分析器。为了证明它们的差异，我们看看每个分析器会从下面的字符串得到哪些词条：\\\"Set the shape to semi-transparent by calling set_trans(5)\\\"\"]},\"3466\":{\"h\":\"2.1 标准分析器\",\"t\":[\"标准分析器是 Elasticsearch 默认使用的分析器。它是分析各种语言文本最常用的选择。 它根据 Unicode 联盟定义的 单词边界 划分文本。并删除绝大部分标点。最后，将词条小写。\",\"分析结果：set, the, shape, to, semi, transparent, by, calling, set_trans, 5\"]},\"3467\":{\"h\":\"2.2 简单分析器\",\"t\":[\"简单分析器在任何不是字母的地方分隔文本，将词条小写。\",\"分析结果：set, the, shape, to, semi, transparent, by, calling, set, trans\"]},\"3468\":{\"h\":\"2.3 空格分析器\",\"t\":[\"空格分析器在空格的地方划分文本。\",\"分析结果：Set, the, shape, to, semi-transparent, by, calling, set_trans(5)\"]},\"3469\":{\"h\":\"2.4 语言分析器\",\"t\":[\"特定语言分析器可用于很多语言。它们可以考虑指定语言的特点。\",\"例如， 英语分析器附带了一组英语无用词（例如 and 或者 the ，它们对相关性没有多少影响），它们会被删除。 由于理解英语语法的规则，这个分词器可以提取英语单词的 词干 。\",\"分析结果：set, shape, semi, transpar, call, set_tran, 5 （transparent、 calling 和 set_trans 已经变为词根格式）\"]},\"3470\":{\"h\":\"3. 分析器使用场景\",\"t\":[\"当我们索引一个文档，它的全文域被分析成词条以用来创建倒排索引。 但是，当我们在全文域搜索的时候，我们需要将查询字符串通过相同的分析过程 ，以保证我们搜索的词条格式与索引中的词条格式一致\",\"当你查询一个全文域时， 会对查询字符串应用相同的分析器，以产生正确的搜索词条列表。\",\"当你查询一个 精确值 域时，不会分析查询字符串，而是搜索你指定的精确值。\"]},\"3471\":{\"h\":\"使用分析器\"},\"3472\":{\"h\":\"1. analyze API\",\"t\":[\"analyze API 可以用来查看文本是如何被分析器分析的。该API只是为了方便理解分词的过程和实际被存储到索引中的词条是什么。\"]},\"3473\":{\"h\":\"2. 使用analyze\",\"t\":[\"基本用法如下：\",\"请求： GET http://localhost:9200/_analyze\",\"请求体：\",\"{ \\\"analyzer\\\": \\\"standard\\\", //指定一个分析器，这里选择standard \\\"text\\\": \\\"Text to anlyze\\\" //待测试的文本 } \",\"分析的结果：\",\"{ \\\"tokens\\\": [ { \\\"token\\\": \\\"text\\\", \\\"start_offset\\\": 0, \\\"end_offset\\\": 4, \\\"type\\\": \\\"<ALPHANUM>\\\", \\\"position\\\": 0 }, { \\\"token\\\": \\\"to\\\", \\\"start_offset\\\": 5, \\\"end_offset\\\": 7, \\\"type\\\": \\\"<ALPHANUM>\\\", \\\"position\\\": 1 }, { \\\"token\\\": \\\"anlyze\\\", \\\"start_offset\\\": 8, \\\"end_offset\\\": 14, \\\"type\\\": \\\"<ALPHANUM>\\\", \\\"position\\\": 2 } ] } \",\"如上：token 是实际存储到索引中的词条。 position 指明词条在原始文本中出现的位置。start_offset 和 end_offset 指明字符在原始字符串中的位置。\"]},\"3474\":{\"h\":\"3. 指定分析器\",\"t\":[\"指定适合的分析器：可以根据语言类型和使用场景指定适合的分析器，而不总是使用standard\",\"不使用分析器：有些场景是不进行分词的，比如匹配用户的ID 或者一个标签。 \",\"此时无需使用分析器，需要手动设置映射\"]},\"3475\":{\"h\":\"中文处理\",\"t\":[\"内置的分词器对中文的处理有些问题，我们需要手动加载专门处理中文的分词器：IK\"]},\"3476\":{\"h\":\"1. 中文的默认处理\",\"t\":[\"如下，尝试对中文进行分词处理。\",\"请求：GET http://localhost:9200/_analyze 请求体：\",\"{ //采用默认的分词器 \\\"text\\\": \\\"测试单词\\\" //待测试的文本 } 分词结果： ```json { \\\"tokens\\\": [ { \\\"token\\\": \\\"测\\\", \\\"start_offset\\\": 0, \\\"end_offset\\\": 1, \\\"type\\\": \\\"<IDEOGRAPHIC>\\\", \\\"position\\\": 0 }, { \\\"token\\\": \\\"试\\\", \\\"start_offset\\\": 1, \\\"end_offset\\\": 2, \\\"type\\\": \\\"<IDEOGRAPHIC>\\\", \\\"position\\\": 1 }, { \\\"token\\\": \\\"单\\\", \\\"start_offset\\\": 2, \\\"end_offset\\\": 3, \\\"type\\\": \\\"<IDEOGRAPHIC>\\\", \\\"position\\\": 2 }, { \\\"token\\\": \\\"词\\\", \\\"start_offset\\\": 3, \\\"end_offset\\\": 4, \\\"type\\\": \\\"<IDEOGRAPHIC>\\\", \\\"position\\\": 3 } ] } \",\"ES 的默认分词器无法识别中文的词语，只能简单的将每个字拆开，这基本毫无意义，我们预期的结果是根据词语分词，比如上述测试的预期结果应该是：“测试”，“单词”\"]},\"3477\":{\"h\":\"2. IK 分词器\",\"t\":[\"ES没有内置的支持中文的分词器，因此我们需要手动下载一个中文分词器，然后以ES插件的形式使用。\",\"常用的中文分词器为：IK中文分词器\",\"IKAnalyzer是一个开源的，基于java语言开发的轻量级的中文分词工具包，特性如下：\",\"采用了特有的“正向迭代最细粒度切分算法“，具有60万字/秒的高速处理能力\",\"采用了多子处理器分析模式，支持：英文字母（IP地址、Email、URL）、数字（日期，常用中文数量词，罗马数字，科学计数法），中文词汇（姓名、地名处理）等分词处理。\",\"对中英联合支持不是很好,在这方面的处理比较麻烦，需再做一次查询,同时是支持个人词条的优化的词典存储，更小的内存占用。\",\"支持用户词典扩展定义。\",\"针对Lucene全文检索优化的查询分析IKQueryParser；采用歧义分析算法优化查询关键字的搜索排列组合，能极大的提高Lucene检索的命中率。\"]},\"3478\":{\"h\":\"3. 安装 IK 分词器\",\"t\":[\"下载地址：github-releases\",\"版本：IK分词器的版本要与ElasticSearch的版本完全对应。\",\"安装：绿色软件，解压后的文件放入ES根目录下的plugins目录内。\",\"重启ES后 IK分词器 就生效了，不用做额外的配置，只需要指定analyzer的类型。\"]},\"3479\":{\"h\":\"debug\",\"t\":[\"IK分词器的版本必须严格和ES版本一致，否则有如下报错：Plugin [ analysis-ik ] was built for Elasticsearch version 8.7.0 but version 8.8.1 is running\",\"要下载.zip后缀的包，不然可能会报错：plugin-descriptor.properties NoSuchFileException\"]},\"3480\":{\"h\":\"4. 使用IK分词器\",\"t\":[\"提示\",\"IK分词器文档-github\",\"该文档同样存在与源码包里。\",\"发送请求： GET http://localhost:9200/_analyze\",\"请求体中将analyzer改为IK分词器。\",\"{ \\\"text\\\": \\\"测试单词\\\", \\\"analyzer\\\": \\\"ik_max_word\\\" } \",\"返回的结果：\",\"{ \\\"tokens\\\": [ { \\\"token\\\": \\\"测试\\\", \\\"start_offset\\\": 0, \\\"end_offset\\\": 2, \\\"type\\\": \\\"CN_WORD\\\", \\\"position\\\": 0 }, { \\\"token\\\": \\\"单词\\\", \\\"start_offset\\\": 2, \\\"end_offset\\\": 4, \\\"type\\\": \\\"CN_WORD\\\", \\\"position\\\": 1 } ] } \",\"这个返回结果是符合预期的。\"]},\"3481\":{\"h\":\"5. IK分词器的 模式\",\"t\":[\"IK分词器有两种模式，（两种类型的analyzer参数）\",\"ik_max_word：将文本做最细粒度的拆分\",\"ik_smart：智能拆分\",\"这两种模式的分词结果是不一样的，ik_max_word广度优先，ik_sart准确的优先。\",\"如下示例：\"]},\"3482\":{\"h\":\"ik_max_word\",\"t\":[\"{ \\\"text\\\": \\\"我是中国人\\\", \\\"analyzer\\\": \\\"ik_max_word\\\" } { \\\"tokens\\\": [ { \\\"token\\\": \\\"我\\\", \\\"start_offset\\\": 0, \\\"end_offset\\\": 1, \\\"type\\\": \\\"CN_CHAR\\\", \\\"position\\\": 0 }, { \\\"token\\\": \\\"是\\\", \\\"start_offset\\\": 1, \\\"end_offset\\\": 2, \\\"type\\\": \\\"CN_CHAR\\\", \\\"position\\\": 1 }, { \\\"token\\\": \\\"中国人\\\", \\\"start_offset\\\": 2, \\\"end_offset\\\": 5, \\\"type\\\": \\\"CN_WORD\\\", \\\"position\\\": 2 }, { \\\"token\\\": \\\"中国\\\", \\\"start_offset\\\": 2, \\\"end_offset\\\": 4, \\\"type\\\": \\\"CN_WORD\\\", \\\"position\\\": 3 }, { \\\"token\\\": \\\"国人\\\", \\\"start_offset\\\": 3, \\\"end_offset\\\": 5, \\\"type\\\": \\\"CN_WORD\\\", \\\"position\\\": 4 } ] } \"]},\"3483\":{\"h\":\"ik_smart\",\"t\":[\"{ \\\"tokens\\\": [ { \\\"token\\\": \\\"我\\\", \\\"start_offset\\\": 0, \\\"end_offset\\\": 1, \\\"type\\\": \\\"CN_CHAR\\\", \\\"position\\\": 0 }, { \\\"token\\\": \\\"是\\\", \\\"start_offset\\\": 1, \\\"end_offset\\\": 2, \\\"type\\\": \\\"CN_CHAR\\\", \\\"position\\\": 1 }, { \\\"token\\\": \\\"中国人\\\", \\\"start_offset\\\": 2, \\\"end_offset\\\": 5, \\\"type\\\": \\\"CN_WORD\\\", \\\"position\\\": 2 } ] } \"]},\"3484\":{\"h\":\"词汇扩展\",\"t\":[\"提示\",\"很多分析器都支持扩展词汇，这里以IK 为例。\",\"IK 分词器里仅支持日常基本词汇，很多专有词汇和新词是没有的，比如：网络新梗、游戏角色。\",\"好在，IK分词器支持词汇扩展。\"]},\"3485\":{\"h\":\"1. 游戏词汇测试\",\"t\":[\"请求：GET http://localhost:9200/_analyze\",\"{ \\\"text\\\": \\\"班德尔城好大\\\", \\\"analyzer\\\": \\\"ik_max_word\\\" } \",\"分词结果：\",\"{ \\\"tokens\\\": [ { \\\"token\\\": \\\"班\\\", \\\"start_offset\\\": 0, \\\"end_offset\\\": 1, \\\"type\\\": \\\"CN_CHAR\\\", \\\"position\\\": 0 }, { \\\"token\\\": \\\"德\\\", \\\"start_offset\\\": 1, \\\"end_offset\\\": 2, \\\"type\\\": \\\"CN_CHAR\\\", \\\"position\\\": 1 }, { \\\"token\\\": \\\"尔\\\", \\\"start_offset\\\": 2, \\\"end_offset\\\": 3, \\\"type\\\": \\\"CN_CHAR\\\", \\\"position\\\": 2 }, { \\\"token\\\": \\\"城\\\", \\\"start_offset\\\": 3, \\\"end_offset\\\": 4, \\\"type\\\": \\\"CN_CHAR\\\", \\\"position\\\": 3 }, { \\\"token\\\": \\\"好大\\\", \\\"start_offset\\\": 4, \\\"end_offset\\\": 6, \\\"type\\\": \\\"CN_WORD\\\", \\\"position\\\": 4 } ] } \",\"这不符合我们的预期，预期中，班德尔城是一个词语。\"]},\"3486\":{\"h\":\"2. 添加扩展词汇\",\"t\":[\"扩展词汇要在ik扩展的配置里进行添加。\"]},\"3487\":{\"h\":\"2.1 创建扩展词典\",\"t\":[\"在 ES根目录下的/plugin/ik/config目录里 添加一个字典文件：custom.dic\",\"该文件将用来添加扩展词汇，以存文本的方式打开custom.dic，然后直接添加要扩展的词汇，一行一个，如下：添加了两个扩展词汇：\",\"5-6-1\"]},\"3488\":{\"h\":\"2.2 配置扩展词典\",\"t\":[\"打开同级目录下的 `IKAnalyzer.cfg.xml文件，将新建的 custom.dic 配置其中\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <!DOCTYPE properties SYSTEM \\\"http://java.sun.com/dtd/properties.dtd\\\"> <properties> <comment>IK Analyzer 扩展配置</comment> <!--用户可以在这里配置自己的扩展字典 --> <entry key=\\\"ext_dict\\\">custom.dic</entry> <!--用户可以在这里配置自己的扩展停止词字典--> <entry key=\\\"ext_stopwords\\\"></entry> <!--用户可以在这里配置远程扩展字典 --> <!-- <entry key=\\\"remote_ext_dict\\\">words_location</entry> --> <!--用户可以在这里配置远程扩展停止词字典--> <!-- <entry key=\\\"remote_ext_stopwords\\\">words_location</entry> --> </properties> \",\"重启ES即可生效\"]},\"3489\":{\"h\":\"3. 测试扩展词汇\",\"t\":[\"请求：GET http://localhost:9200/_analyze\",\"{ \\\"text\\\": \\\"班德尔城好大\\\", \\\"analyzer\\\": \\\"ik_max_word\\\" } \",\"分词结果：\",\"{ \\\"tokens\\\": [ { \\\"token\\\": \\\"班德尔城\\\", \\\"start_offset\\\": 0, \\\"end_offset\\\": 4, \\\"type\\\": \\\"CN_WORD\\\", \\\"position\\\": 0 }, { \\\"token\\\": \\\"好大\\\", \\\"start_offset\\\": 4, \\\"end_offset\\\": 6, \\\"type\\\": \\\"CN_WORD\\\", \\\"position\\\": 1 } ] } \"]},\"3490\":{\"h\":\"自定义分析器\",\"t\":[\"提示\",\"暂略，使用别人提供的分析器即可。\",\"日常使用，只需要添加扩展词汇。\"]},\"3491\":{\"h\":\"5-7. 文档冲突\"},\"3492\":{\"h\":\"文档冲突介绍\"},\"3493\":{\"h\":\"1. 冲突产生原因\",\"t\":[\"当对文档进行修改时，会读取原文档，修改后，会重新索引新文档。不过ES的修改并非是单线程的，可能存在多个人同时修改文档。\",\"虽然ES储存的只是提供于搜索的数据，主要数据存在于MySQL，且同时修改一个文档的概率很小。但某些场景下非常影响体验。\"]},\"3494\":{\"h\":\"2. 场景示例\",\"t\":[\"比如一个商品促销场景，使用 Elasticsearch 存储商品库存的数量， 每卖一个商品的时候，Elasticsearch 中将库存数量减少（促销场景下，一秒钟会卖出很多）。\",\"如下图：产生了多个web程序修改ES的场景\",\"5-7-1\",\"问题：web_1 对 stock_count 所做的更改已经丢失，因为 web_2 不知道它的 stock_count 的拷贝已经过期。 结果我们会认为有超过商品的实际数量的库存，因为卖给顾客的库存商品并不存在。\",\"变更越频繁，读数据和更新数据的间隙越长，也就越可能丢失变更。\"]},\"3495\":{\"h\":\"3. 解决方案\",\"t\":[\"在数据库领域中，有两种方法通常被用来确保并发更新时变更不会丢失：\",\"悲观并发控制：这种方法被关系型数据库广泛使用，它假定有变更冲突可能发生，因此阻塞访问资源以防止冲突。 一个典型的例子是读取一行数据之前先将其锁住，确保只有放置锁的线程能够对这行数据进行修改。\",\"乐观并发控制：Elasticsearch 中使用的这种方法假定冲突是不可能发生的，并且不会阻塞正在尝试的操作。 然而，如果源数据在读写当中被修改，更新将会失败。应用程序接下来将决定该如何 解决冲突。 例如，可以重试更新、使用新的数据、或者将相关情况报告给用户。\"]},\"3496\":{\"h\":\"乐观并发控制\",\"t\":[\"Elasticsearch 是分布式的。当文档创建、更新或删除时， 新版本的文档必须复制到集群中的其他节点。\",\"Elasticsearch 也是异步和并发的，这意味着这些复制请求被并行发送，并且到达目的地时也许 顺序是乱的 。 Elasticsearch 需要一种方法确保文档的旧版本不会覆盖新的版本。\"]},\"3497\":{\"h\":\"1. _version\",\"t\":[\"每个文档都会自动创建一个 _version （版本）号，当文档被修改时版本号递增。Elasticsearch 使用这个 version 号来确保变更以正确顺序得到执行。如果旧版本的文档在新版本之后到达，它可以被简单的忽略。\",\"原理：可以利用 _version 号来确保 应用中相互冲突的变更不会导致数据丢失。修改前获取的版本号，修改后，如果发现版本好变了，就会修改失败。\"]},\"3498\":{\"h\":\"2. 外部系统版本控制\",\"t\":[\"一个常见的设置是使用其它数据库作为主要的数据存储，使用 Elasticsearch 做数据检索， 这意味着主数据库的所有更改发生时都需要被复制到 Elasticsearch ，如果多个进程负责这一数据同步，你可能遇到类似于之前描述的并发问题。\",\"如果你的主数据库已经有了版本号 — 或一个能作为版本号的字段值比如 timestamp —那么你就可以在 Elasticsearch 中通过增加 version_type=external 到查询字符串的方式重用这些相同的版本号\",\"原理：Elasticsearch 不是检查当前 _version 和请求中指定的版本号是否相同， 而是检查当前_version 是否 小于 指定的版本号。 如果请求成功，外部的版本号作为文档的新 _version 进行存储。\",\"外部版本号不仅在索引和删除请求是可以指定，而且在 创建 新文档时也可以指定。\"]},\"3499\":{\"h\":\"7-1. 基本优化\"},\"3500\":{\"h\":\"硬件\"},\"3501\":{\"h\":\"1. 硬盘\",\"t\":[\"Elasticsearch 的基础是 Lucene，所有的索引和文档数据是存储在本地的磁盘中。\",\"# 一些与磁盘路由晶哥的配置：./config/elasticserch.yml path.data: /data # data存储的路径 path.logs: /logs # logs文件储存的路径 \",\"因此磁盘性能是ES最大瓶颈（也计划是所有类型服务器的瓶颈）。Elasticsearch 重度使用磁盘，磁盘能处理的吞吐量越大，节点就越稳定。\",\"一些优化磁盘 I/O 的技巧：\",\"使用 SSD：IO效率是机械盘的10倍以上\",\"使用RAID 0：可以提升并发吞吐量 \",\"不要使用 其他RAID策略，因为分片副本已经提供了高可用保障。\",\"使用多块硬盘：每个硬盘的IO总速度都是独立的。 \",\"允许 Elasticsearch 通过多个 path.data 目录配置把数据条带化分配到它们上面\",\"不要使用远程挂载的存储：会增加额外的网络损耗成本\"]},\"3502\":{\"h\":\"2. 内存\",\"t\":[\"ES 默认安装后设置的内存是 4GB。对于企业级开发，4GB很小，需要重新设置。\"]},\"3503\":{\"h\":\"设置ES内存\",\"t\":[\"ES 目录的 config/jvm.options文件是用来配置内存的。\",\"################################################################ ## IMPORTANT: JVM heap size ################################################################ ## ## The heap size is automatically configured by Elasticsearch ## based on the available memory in your system and the roles ## each node is configured to fulfill. If specifying heap is ## required, it should be done through a file in jvm.options.d, ## which should be named with .options suffix, and the min and ## max should be set to the same value. For example, to set the ## heap to 4 GB, create a new file in the jvm.options.d ## directory containing these lines: ## ## -Xms4g ## -Xmx4g -Xms31g # 初始启动大小 -Xmx31g # 可分配的最大内置值 \",\"确保 Xmx 和 Xms 的大小是相同的，其目的是为了能够在 Java 垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小而浪费资源，可以减轻伸缩堆大小带来的压力\"]},\"3504\":{\"h\":\"内存分片策略\",\"t\":[\"ES 堆内存的分配需要满足以下两个原则：\",\"不要超过物理内存的 50%：Lucene 的设计目的是把底层 OS 里的数据缓存到内存中。 \",\"Lucene 的段是分别存储到单个文件中的，这些文件都是不会变化的，所以很利于缓存，同时操作系统也会把这些段文件缓存起来，以便更快的访问。\",\"如果我们设置的堆内存过大，Lucene 可用的内存将会减少，就会严重影响降低 Lucene 的全文本查询性能。\",\"堆内存的大小最好不要超过 32GB：在 Java 中，所有对象都分配在堆上，然后有一个 Klass Pointer 指针指向它的类元数据。 \",\"这个指针在 64 位的操作系统上为 64 位，64 位的操作系统可以使用更多的内存（2^64）。在 32 位的系统上为 32 位，32 位的操作系统的最大寻址空间为 4GB（2^32）。\",\"64 位的指针意味着更大的浪费，因为你的指针本身大了。浪费内存不算，更糟糕的是，更大的指针在主内存和缓存器（例如 LLC, L1 等）之间移动数据的时候，会占用更多的带宽。\",\"最终策略： 选用64GB内存的服务器作为ES专用服务器，并为ES分片31G的内存\",\"-Xms31g -Xmx31g \"]},\"3505\":{\"h\":\"3. 其他硬件优化\",\"t\":[\"最好服务器是专门用来搞ES的，提升硬件利用率。\",\"对于CPU来说，核心数越多越好。\"]},\"3506\":{\"h\":\"分片策略\",\"t\":[\"分片设计为ES提供了高可用和高并发的特性，但并不意味着分片和副本越多越好，且分片的数量是不能修改的（会影响的路由计算）。\",\"在创建索引时，要计算好分片数量（副本数量可以动态更改）。其实倒也不必计划的太长远，大不了后期数据量多了，进行阶段性升级，重建ES服务，进行搜索功能升级和迁移。\"]},\"3507\":{\"h\":\"1. 分片的代价\",\"t\":[\"设计分片时，要了解以下内容：\",\"分片是有硬件损耗的：一个分片的底层即为一个 Lucene 索引，会消耗一定文件句柄、内存、以及 CPU 运转。\",\"一个节点分片不要过多：每一个搜索请求都需要命中索引中的每一个分片，如果每一个分片都处于不同的节点还好， 但如果多个分片都需要在同一个节点上竞争使用相同的资源就有些糟糕了。\",\"相关度统计：用于计算相关度的词项统计信息是基于分片的。如果有许多分片，每一个都只有很少的数据会导致很低的相关度。\"]},\"3508\":{\"h\":\"2. 设计分片的基本原则\",\"t\":[\"一个业务索引具体需要分配多少分片可能需要架构师和技术人员对业务的增长有个预先的判断，横向扩展应当分阶段进行。一般来说，我们遵循一些原则：\",\"分片容量：控制每个分片占用的硬盘容量不超过 ES 的最大 JVM 的堆空间设置 \",\"一般设置不超过 32G\",\"如果索引的总容量在 500G 左右，那分片大小不得超过 16 个\",\"节点数量：一般一个节点有时候就是一台物理机，如果分片数过多，大大超过了节点数，很可能会导致一个节点上存在多个分片，一旦该节点故障，即使保持了 1 个以上的副本，同样有可能会导致数据丢失，集群无法恢复。 \",\"一般都设置分片数不超过节点数的 3 倍\",\"副本数量：主分片，副本和节点最大数之间数量，我们分配的时候可以参考以下关系： \",\"节点数<=主分片数*（副本数+1）\"]},\"3509\":{\"h\":\"3. 推迟分片分配\",\"t\":[\"当节点产生故障时，集群等待1分支后，就会重写规划新的分片\",\"中断节点恢复：重新加入的节点会保持其现有的分片数据，不会触发新的分片分配，减少了ES分片时带来的开销\",\"中断节点未回复：重写分配分片\",\"可以通过修改参数 delayed_timeout，延长再均衡的时间，可以全局设置也可以在索引级别进行修改:\",\"PUT /_all/_settings\",\"{ \\\"settings\\\": { \\\"index.unassigned.node_left.delayed_timeout\\\": \\\"5m\\\" //改为5分钟 } } \"]},\"3510\":{\"h\":\"查询优化\"},\"3511\":{\"h\":\"1. 使用路由\",\"t\":[\"可以使用路由快速计算文档所在分片，如果不使用路由，就需要对所有的分片进行查询。\"]},\"3512\":{\"h\":\"写入优化\",\"t\":[\"ES 的默认配置，是综合了数据可靠性、写入速度、搜索实时性等因素。实际使用时可根据业务场景进行偏向性的优化。\"]},\"3513\":{\"h\":\"1. 需要优化的方向\",\"t\":[\"针对于搜索性能要求不高，但是对写入要求较高的场景，可以考虑以下几个方面来提升写索引的性能：\",\"加大 Translog Flush ，目的是降低 Iops、Writeblock。\",\"增加 Index Refresh 间隔，目的是减少 Segment Merge 的次数。\",\"整 Bulk 线程池和队列。\",\"优化节点间的任务分布。\",\"优化 Lucene 层的索引建立，目的是降低 CPU 及 IO。\"]},\"3514\":{\"h\":\"2. 批量数据提交\",\"t\":[\"ES 提供了 Bulk API 支持批量操作，当我们有大量的写任务时，可以使用 Bulk 来进行批量写入。\",\"通用的策略如下：Bulk 默认设置批量提交的数据量不能超过 100M。数据条数一般是根据文档的大小和服务器性能而定的，但是单次批处理的数据大小应从 5MB～15MB 逐渐增加，当性能没有提升时，把这个数据量作为最大值。\"]},\"3515\":{\"h\":\"3. 合理使用合并\",\"t\":[\"Lucene 以段的形式存储数据。当有新的数据写入索引时，Lucene 就会自动创建一个新的段。随着数据量的变化，段的数量会越来越多，消耗的多文件句柄数及 CPU 就越多，查询效率就会下降。\",\"由于 Lucene 段合并的计算量庞大，会消耗大量的 I/O，所以 ES 默认采用较保守的策略，让后台定期进行段合并\"]},\"3516\":{\"h\":\"4. 减少 Refresh 的次数\",\"t\":[\"Lucene 在新增数据时，采用了延迟写入的策略，默认情况下索引的 refresh_interval 为1 秒。\",\"Lucene 将待写入的数据先写到内存中，超过 1 秒（默认）时就会触发一次 Refresh，然后 Refresh 会把内存中的的数据刷新到操作系统的文件缓存系统中。\",\"如果我们对搜索的实效性要求不高，可以将 Refresh 周期延长，例如 30 秒。这样还可以有效地减少段刷新次数，但这同时意味着需要消耗更多的 Heap 内存。\"]},\"3517\":{\"h\":\"5. 加大 Flush 设置\",\"t\":[\"Flush 的主要目的是把文件缓存系统中的段持久化到硬盘，当 Translog 的数据量达到512MB 或者 30 分钟时，会触发一次 Flush。\",\"index.translog.flush_threshold_size 参数的默认值是 512MB，我们可以进行修改。增加参数值意味着文件缓存系统中可能需要存储更多的数据，所以我们需要为操作系统的文件缓存系统留下足够的空间。\"]},\"3518\":{\"h\":\"6. 减少副本的数量\",\"t\":[\"ES 为了保证集群的可用性，提供了 Replicas（副本）支持，然而每个副本也会执行分析、索引及可能的合并过程，所以 Replicas 的数量会严重影响写索引的效率。\",\"当写索引时，需要把写入的数据都同步到副本节点，副本节点越多，写索引的效率就越慢。\",\"如果需要大批量进行写入操作， 可以先禁止 Replica 复制 ， 设置index.number_of_replicas: 0 关闭副本。在写入完成后，Replica 修改回正常的状态\"]},\"3519\":{\"h\":\"x-1. demo项目\",\"t\":[\"提示\",\"TBD\"]},\"3520\":{\"h\":\"x-2. 开源项目\",\"t\":[\"提示\",\"TBD\"]},\"3521\":{\"h\":\"x-3. 开发资源\",\"t\":[\"提示\",\"TBD\"]},\"3522\":{\"h\":\"x-x 面试题\"},\"3523\":{\"h\":\"基础知识点\"},\"3524\":{\"h\":\"1. 为什么要使用 Elasticsearch\",\"t\":[\"ES 查询速度快，基于倒排索引的全文搜索很适合做为搜索引擎。\",\"系统中的数据，随着业务的发展，时间的推移，将会非常多，而业务中往往采用模糊查询进行数据的搜索，而模糊查询会导致查询引擎放弃索引，导致系统查询数据时都是全表扫描，在百万级别的数据中，查询效率是非常低下的，而我们使用 ES 做一个全文索引，将经常查询的系统功能的某些字段，比如说电商系统的商品表中商品名，描述、价格还有 id 这些字段我们放入 ES 索引库里，可以提高查询速度。\"]},\"3525\":{\"h\":\"工作流程\"},\"3526\":{\"h\":\"1. Elasticsearch 的 master 选举流程？\",\"t\":[\"master 节点的职责主要包括集群、节点和索引的管理，不负责文档级别的管理；data 节点可以关闭 http功能。\",\"Elasticsearch 的选主是 ZenDiscovery 模块负责的，主要包含 Ping（节点之间通过这个 RPC 来发现彼此）和 Unicast（单播模块包含一个主机列表以控制哪些节点需要 ping 通）这两部分\",\"对所有可以成为 master 的节点（node.master: true）根据 nodeId 字典排序，每次选举每个节点都把自己所知道节点排一次序，然后选出第一个（第 0 位）节点，暂且认为它是 master 节点。\",\"如果对某个节点的投票数达到一定的值（可以成为 master 节点数 n/2+1）并且该节点自己也选举自己，那这个节点就是 master。否则重新选举一直到满足上述条件。\"]},\"3527\":{\"h\":\"2. Elasticsearch 索引文档的流程\",\"t\":[\"路由计算：协调节点默认使用文档 ID 参与计算（也支持通过 routing），以便为路由提供合适的分片 \",\"公式：shard = hash(document_id) % (num_of_primary_shards)\",\"refresh：当分片所在的节点接收到来自协调节点的请求后，会将请求写入到 Memory Buffer，然后定时（默认是每隔 1 秒）写入到 Filesystem Cache，这个从 Memory Buffer 到 Filesystem Cache 的过程就叫做 refresh；\",\"translog & flush：某些情况下，存在 Momery Buffer 和 Filesystem Cache 的数据可能会丢失，ES 是通过 translog的机制来保证数据的可靠性的。其实现机制是接收到请求后，同时也会写入到 translog 中，当 Filesystem cache 中的数据写入到磁盘中时，才会清除掉，这个过程叫做 flush；\",\"在 flush 过程中，内存中的缓冲将被清除，内容被写入一个新段，段的 fsync 将创建一个新的提交点，并将内容刷新到磁盘，旧的 translog 将被删除并开始一个新的 translog。\",\"flush 触发的时机是定时触发（默认 30 分钟）或者 translog 变得太大（默认为 512M）时；\"]},\"3528\":{\"h\":\"3. Elasticsearch 更新和删除文档的流程\",\"t\":[\"删除和更新也都是写操作，但是 Elasticsearch 中的文档是不可变的，因此不能被删除或者改动以展示其变更；\",\"磁盘上的每个段都有一个相应的.del 文件。当删除请求发送后，文档并没有真的被删除，而是在.del文件中被标记为删除。该文档依然能匹配查询，但是会在结果中被过滤掉。当段合并时，在.del 文件中被标记为删除的文档将不会被写入新段。\",\"在新的文档被创建时，Elasticsearch 会为该文档指定一个版本号，当执行更新时，旧版本的文档在.del文件中被标记为删除，新版本的文档被索引到一个新段。旧版本的文档依然能匹配查询，但是会在结果中被过滤掉。\"]},\"3529\":{\"h\":\"4. Elasticsearch 搜索的流程\",\"t\":[\"暂略\"]},\"3530\":{\"h\":\"异常处理\"},\"3531\":{\"h\":\"1. 集群脑裂问题\"},\"3532\":{\"h\":\"1.1 成因\",\"t\":[\"网络问题：集群间的网络延迟导致一些节点访问不到 master，认为 master 挂掉了从而选举出新的master，并对 master 上的分片和副本标红，分配新的主分片\",\"节点负载：主节点的角色既为 master 又为 data，访问量较大时可能会导致 ES 停止响应造成大面积延迟，此时其他节点得不到主节点的响应认为主节点挂掉了，会重新选取主节点。\",\"内存回收：data 节点上的 ES 进程占用的内存较大，引发 JVM 的大规模内存回收，造成 ES 进程失去响应。\"]},\"3533\":{\"h\":\"1.2 方案\",\"t\":[\"减少误判：discovery.zen.ping_timeout 节点状态的响应时间，默认为 3s，可以适当调大，如果 master 在该响应时间的范围内没有做出响应应答，判断该节点已经挂掉了。调大参数（如 6s， discovery.zen.ping_timeout:6），可适当减少误判。\",\"选举触发: discovery.zen.minimum_master_nodes: 1，该参数是用于控制选举行为发生的最小集群主节点数量。当备选主节点的个数大于等于该参数的值，且备选主节点中有该参数个节点认为主节点挂了，进行选举。官方建议为（n/2）+1，n 为主节点个数（即有资格成为主节点的节点个数）\",\"角色分离：即 master 节点与 data 节点分离，限制角色\"]},\"3534\":{\"h\":\"1-1. 介绍\"},\"3535\":{\"h\":\"Ⅰ. MongoDB 简介\",\"t\":[\"MongoDB是一个开源、高性能、无模式的 文档型数据库 ，当初的设计就是用于简化开发和方便扩展，是NoSQL数据库产品中的一种。是 最像关系型数据库（MySQL） 的非关系型数据库。\"]},\"3536\":{\"h\":\"1. line\",\"t\":[\"官网：https://www.mongodb.com/\"]},\"3537\":{\"h\":\"2. 语法风格\",\"t\":[\"类似于: JS+MySQL的缝合\"]},\"3538\":{\"h\":\"3. 优点\",\"t\":[\"高性能：MongoDB提供高性能的数据持久性。\",\"高可用：MongoDB的复制工具称为副本集（replica set），它可提供自动故障转移和数据冗余。\",\"高扩展：提供了水平可扩展性作为其核心功能的一部分。\",\"丰富查询支持：支持丰富的查询语言\",\"其他：如无模式（动态模式）、灵活的文档模型\"]},\"3539\":{\"h\":\"4. 应用场景\",\"t\":[\"很多应用场景，关系型数据库难易应对。 其实MogoDB很多时候是关系型数据库的一个替代。\"]},\"3540\":{\"h\":\"3.1 解决的问题\",\"t\":[\"MongoDB可应对“三高”需求：\",\"High performance - 对数据库高并发读写的需求。\",\"Huge Storage - 对海量数据的高效率存储和访问的需求。\",\"High Scalability && High Availability- 对数据库的高可扩展性和高可用性的需求。\"]},\"3541\":{\"h\":\"3.2 具体应用场景\",\"t\":[\"适合：数据流大、读写频繁以及价值比较低的数据。\",\"社交场景：使用 MongoDB 存储用户信息，以及用户发表的朋友圈信息，通过地理位置索引实现附近的人、地点等功能。\",\"游戏场景：使用 MongoDB 存储游戏用户信息，用户的装备、积分等直接以内嵌文档的形式存储，方便查询、高效率存储和访问。\",\"物流场景：使用 MongoDB 存储订单信息，订单状态在运送过程中会不断更新，以 MongoDB 内嵌数组的形式来存储，一次查询就能将订单所有的变更读取出来。\",\"物联网场景：使用 MongoDB 存储所有接入的智能设备信息，以及设备汇报的日志信息，并对这些信息进行多维度的分析。\",\"视频直播，使用 MongoDB 存储用户信息、点赞互动信息等。\"]},\"3542\":{\"h\":\"3.3 选择的依据\",\"t\":[\"新应用，需求会变，数据模型无法确定，想快速迭代开发\",\"应用不需要事务及复杂 join 支持\",\"应用需要TB甚至 PB 级别数据存储\",\"应用发展迅速，需要能快速水平扩展\",\"应用需要大量的地理位置查询、文本查询\"]},\"3543\":{\"h\":\"4. Serverless\",\"t\":[\"当前，云服务兴起，云服务一般采用以MongoDB为核心的数据库架构。\"]},\"3544\":{\"h\":\"Ⅱ. 存储结构\"},\"3545\":{\"h\":\"1. 和MySQL对比\",\"t\":[\"1-1-1\",\"术语对比\",\"SQL术语\",\"MongoDB术语\",\"说明\",\"database\",\"database\",\"数据库\",\"table\",\"collection\",\"数据库表/集合\",\"row\",\"document\",\"数据记录行/文档\",\"column\",\"ﬁeld\",\"数据字段/域\",\"index\",\"index\",\"索引\",\"table joins\",\"表连接,MongoDB不支持\",\"嵌入文档\",\"MongoDB通过嵌入式文档来替代多表连接\",\"primary key\",\"primary key\",\"主键,MongoDB自动将_id字段设置为主键\"]},\"3546\":{\"h\":\"2. 数据结构\",\"t\":[\"MongoDB支持的数据结构非常松散，是一种类似于 JSON 的 格式叫BSON，所以它既可以存储比较复杂的数据类型，又相当的灵活。\",\"MongoDB中的记录是一个 文档 ，它是一个由字段和值对（ﬁeld:value）组成的数据结构。MongoDB文档类似于JSON对象，即 一个文档认为就是一个对象 。字段的数据类型是字符型，它的值除了使用基本的一些类型外，还可以包括其他文档、普通数组和文档数组。\",\"MongoDB的最小存储单位就是文档(document)对象。文档(document)对象对应于关系型数据库的 行 。 数据在MongoDB中以BSON（Binary-JSON）文档的格式存储在磁盘上。\"]},\"3547\":{\"h\":\"3. BSON\",\"t\":[\"BSON（Binary Serialized Document Format）是一种类json的一种二进制形式的存储格式，简称Binary JSON。BSON和JSON一样，支持内嵌的文档对象和数组对象，但是BSON有JSON没有的一些数据类型，如Date和BinData类型。\",\"BSON采用了类似于 C 语言结构体的名称、对表示方法，支持内嵌的文档对象和数组对象，具有轻量性、可遍历性、高效性的三个特点，可以有效描述非结构化数据和结构化数据。这种格式的优点是灵活性高，但它的缺点是空间利用率不是很理想。\",\"Bson中，除了基本的JSON类型：string,integer,boolean,double,null,array和object，mongo还使用了特殊的数据类型。这些类型包括date,object id,binary data,regular expression 和code。每一个驱动都以特定语言的方式实现了这些类型。\"]},\"3548\":{\"h\":\"4. BSON数据类型参考\",\"t\":[\"数据类型\",\"描述\",\"举例\",\"字符串\",\"字符串类型的数据\",\"{\\\"x\\\" : \\\"foobar\\\"} \",\"对象id\",\"文档的12字节的唯一 ID\",\"{\\\"x\\\" \\\\:ObjectId() } \",\"布尔值\",\"true或者false\",\"{\\\"x\\\"\\\\:true} \",\"数组\",\"值的集合或者列表可以表示成数组\",\"{\\\"x\\\" ： \\\\[\\\"a\\\", \\\"b\\\", \\\"c\\\"]}\",\"浮点数\",\"数字就这一种类型，不支持整数\",\"{\\\"x\\\"：3.14159，\\\"y\\\"：3}\",\"null\",\"空值或者未定义的对象\",\"{\\\"x\\\"\\\\:null}\",\"undeﬁned\",\"未定义类型\",\"{\\\"x\\\"\\\\:undeﬁned}\",\"正则表达式\",\"采用JavaScript的正则表达式语法\",\"{\\\"x\\\" ： /foobar/i} \",\"代码\",\"文档中还可以包含JavaScript代码\",\"{\\\"x\\\" ： function() { /\\\\* …… \\\\*/ }}\"]},\"3549\":{\"h\":\"Ⅲ. MongoDB 与 Redis\",\"t\":[\"MongoDB和Redis都是NoSQL，采用结构型数据存储。 现在的分布式项目基本都会用到redis和mongodb。 二者在使用场景中，存在一定的区别。\"]},\"3550\":{\"h\":\"1. 定位\",\"t\":[\"定为不同：大家一般称之为Redis缓存、MongoDB数据库。\",\"Redis主要把数据存储在内存中，其“缓存”的性质远大于其“数据存储“的性质，其中数据的增删改查也只是像变量操作一样简单；\",\"MongoDB却是一个“存储数据”的系统，增删改查可以添加很多条件，就像SQL数据库一样灵活。\"]},\"3551\":{\"h\":\"2. 应用场景对比\",\"t\":[\"Redis︰场景较多，比如分布式架构，做session共享，高速缓存。\",\"Mongodb︰日志记录、内容管理或者博客平台，比如评论系统。\"]},\"3552\":{\"h\":\"1-2. 安装\",\"t\":[\"当前版本：6.0.5\"]},\"3553\":{\"h\":\"Ⅰ. Windows\"},\"3554\":{\"h\":\"1. 下载安装包\",\"t\":[\"下载地址：https://www.mongodb.com/download-center#community\",\"1-2-1\",\"版本的选择\",\"MongoDB的版本命名规范如：x.y.z；\",\"y为奇数时表示当前版本为开发版\",\"y为偶数时表示当前版本为稳定版\",\"z是修正版本号，数字越大越好\"]},\"3555\":{\"h\":\"2. 安装\",\"t\":[\"下载的打包格式选zip，即为绿色软件，直接解压即可。 在解压的目录中，创建一个存放数据的目录，如：data/db\"]},\"3556\":{\"h\":\"3. 启动\",\"t\":[\"提示\",\"下载的是绿色软件，是没有配置环境变量的（可以选择手动配置），启动时需要在bin目录输入命令，且需要手动指定参数。\"]},\"3557\":{\"h\":\"3.1 通过参数启动服务\",\"t\":[\"在软件的bin目录，输入以下命令：\",\"mongod --dbpath=..\\\\data\\\\db \",\"--dbpath：该参数用来指定数据库存放的位置\",\"启动的方式是进程占用（非守护进程）\",\"默认的服务端口是27017，可以通过--port来手动指定端口\"]},\"3558\":{\"h\":\"3.2 通过配置文件启动服务\",\"t\":[\"将启动的参数写入配置文件，然后通过配置文件启动服务。\",\"在解压目录中新建 config 文件夹，该文件夹中新建配置文件 mongod.conf ，内容参考如下：\",\"storage: dbPath: D:\\\\vender\\\\mongodb-6.0.5\\\\data\\\\db \",\"启动方式\",\"mongod -f ../config/mongod.conf \"]},\"3559\":{\"h\":\"Ⅱ. Linux\"},\"3560\":{\"h\":\"1. 下载压缩包\",\"t\":[\"平台选Linux，打包格式选tgz。 下载安装包，并上传到服务器的 /opt/目录\"]},\"3561\":{\"h\":\"2. 安装\",\"t\":[\"该软件是绿色软件，在Linux上也不用安装，解压即可。\",\"tar -zxvf mongodb-6.0.5.tgz -C /opt/mongodb/ \",\"解压后需要在mongodb目录下新建目录和配置文件\",\"mkdir -p ./single/data/db # 数据存储目录 mkdir -p ./single/log # 日志存储目录 touch ./single/mongod.conf # 配置文件 \"]},\"3562\":{\"h\":\"3. 配置\",\"t\":[\"生产端配置的详细一些，格式为yml 配置文件的内容如下：\",\"systemLog: #MongoDB发送所有日志输出的目标指定为文件 destination: file #mongod或mongos应向其发送所有诊断日志记录信息的日志文件的路径 path: \\\"/opt/mongodb/mongodb-6.0.5/single/log/mongod.log\\\" #当实例重新启动时，会将新条目附加到现有日志文件的末尾。 logAppend: true storage: #mongod实例存储其数据的目录。storage.dbPath设置仅适用于mongod。 dbPath: \\\"/opt/mongodb/mongodb-6.0.5/single/data/db\\\" journal: #启用或禁用持久性日志以确保数据文件保持有效和可恢复。 enabled: true processManagement: #启用在后台运行mongos或mongod进程的守护进程模式。 fork: true net: #服务实例绑定的IP，默认是localhost,配置的是服务器内网IP bindIp: localhost,172.16.0.9 #bindIp绑定的端口，默认是27017 port: 27017 \"]},\"3563\":{\"h\":\"4. 启动服务\",\"t\":[\"/opt/mongodb/bin/mongod -f /opt/mongodb/single/mongod.conf # 启动成功的提示信息 about to fork child process, waiting until server is ready for connections. forked process: 3019275 # 进程编号 child process started successfully, parent exiting # 查看是否启动了 ps -ef |grep mongod \"]},\"3564\":{\"h\":\"5. 关闭服务\",\"t\":[\"关闭服务设计到权限验证，详见：安全认证\",\"#方式一：通过进程编号关闭节点，可能会损害数据 kill -2 54410 #方式二：通过命令关闭，需要先连接MongoDB mongod --port 27017 use admin # 切换到admin库 db.shutdownServer() #关闭服务 \"]},\"3565\":{\"h\":\"Ⅲ. MacOS\",\"t\":[\"注意\",\"暂略，用到时再说\"]},\"3566\":{\"h\":\"1-3. 连接MongoDB\",\"t\":[\"提示\",\"MongoDB shell和Compass都可以连接MongoDB，不过MongoDB Shell已经过时了，现在只需要使用Compass即可。\"]},\"3567\":{\"h\":\"Ⅰ. MongoDB shell\",\"t\":[\"MongoDB Shell 是一个基于javascript的解释器。 他是安装的一个本地shell客户端，可以登录，并执行MongoDB命令。\",\"警告\",\"4.x版本以后，MongoDB不再提供MongoDB Shell了。 想用需要自己手动安装：https://www.mongodb.com/try/download/shell\",\"请选择Compass方式连接MongoDB。\"]},\"3568\":{\"h\":\"Ⅱ. Compass\",\"t\":[\"提示\",\"Compass 是可视化的MongoDB管理工具，但是也支持shell命令，完全可替代MongoDB shell。\"]},\"3569\":{\"h\":\"1. 介绍\",\"t\":[\"mongoDB Compass是mongoDB官方提供的可视化数据管理工具，通过msi包安装MongoDB时可以选择自动安装MongoDB Compass。\",\"如果是手动安装的绿色版（tar包），可以通过官网下载独立安装包。 官方下载地址：https://www.mongodb.com/try/download/compass\"]},\"3570\":{\"h\":\"2. Compass 连接 MongoDB\",\"t\":[\"警告\",\"MongoDB默认是没有用户认证的，通过compass只要输入IP+port就可以直接连接上。 这非常危险，上线时一定要设置安全认证，详见：安全认证章节\",\"默认是没有用户认证的，可以直接连接。\",\"如下：点击new Connection，输入url（ip+port）就可以直接连接上\",\"1-3-1\"]},\"3571\":{\"h\":\"3. 页面介绍\",\"t\":[\"功能很直观，所见即所得。 其中底部>_MONGOSH 就是Compass内置的 shell工具，可以直接输入命令\",\"1-3-2\",\"Connect： 连接与断开MongoDB连接相关\",\"Databases：数据库列表 \",\"Create database：创建数据库\",\"Refresh：刷新数据库\",\"Performance：数据库监控\",\">_MONGOSH：MongoDB Shell\"]},\"3572\":{\"h\":\"1-4. 库与集合\"},\"3573\":{\"h\":\"Ⅰ. 数据库操作\"},\"3574\":{\"h\":\"1. 查看所有数据库\",\"t\":[\"提示\",\"只能查看有权限的数据库，MongoDB会默认创建以下三个数据库：\",\"admin：从权限的角度来看，这是\\\"root\\\"数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。\",\"local：这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合。\",\"conﬁg: 当Mongo用于分片设置时，conﬁg数据库在内部使用，用于保存分片的相关信息。\",\"命令\",\"show dbs show databases \"]},\"3575\":{\"h\":\"2. 选择或创建数据库\",\"t\":[\"数据库存在就是选择，数据库不存在就是创建。\",\"use 数据库名称 \",\"数据库名规范\",\"不能是空字符串（\\\"\\\")。\",\"不得含有' '（空格)、.、$、/、\\\\和\\\\0 (空字符)。\",\"应全部小写\"]},\"3576\":{\"h\":\"3. 查看正在使用的数据库\",\"t\":[\"MongoDB 中默认的数据库为 test，如果你没有选择数据库，集合将存放在 test 数据库中。\",\"db \"]},\"3577\":{\"h\":\"4. 数据库删除\",\"t\":[\"主要用来删除已经持久化的数据库。 语法和JS类似，db对象调用dropDatabase方法删除当前数据库，db指的是当前use的数据库。\",\"db.dropDatabase() \"]},\"3578\":{\"h\":\"5. 数据库的状态\",\"t\":[\"当数据库中没有数据时，数据库默认只存在与内存中，而没有在硬盘中。 使用show dbs查看数据库时，不会显示只存在于内存中的数据库，不过使用db命令可以看到当前使用的仅存在于内存中的数据库。\"]},\"3579\":{\"h\":\"Ⅱ. 集合操作\",\"t\":[\"集合，类似关系型数据库中的表。\"]},\"3580\":{\"h\":\"1. 查看当前库中的集合\",\"t\":[\"show collections 或 show tables \"]},\"3581\":{\"h\":\"2. 创建集合\",\"t\":[\"当向一个集合中插入一个文档的时候，如果集合不存在，则会自动创建集合。 也可以手动创建集合（不推荐）\",\"db.createCollection(name) //示例 db.createCollection('user') \",\"集合的命名规范\",\"集合名不能是空字符串\\\"\\\"。\",\"集合名不能含有\\\\0字符（空字符)，这个字符表示集合名的结尾。\",\"集合名不能以\\\"system.\\\"开头，这是为系统集合保留的前缀。\",\"用户创建的集合名字不能含有保留字符。有些驱动程序的确支持在集合名里面包含，这是因为某些系统生成的集合中包含该字符。除非你要访问这种系统创建的集合，否则千万不要在名字里出现$\"]},\"3582\":{\"h\":\"3. 删除集合\",\"t\":[\"如果成功删除选定集合，这返回true，否则返回false\",\"db.集合名.drop() \"]},\"3583\":{\"h\":\"1-5. 文档增删改\",\"t\":[\"提示\",\"文档（document）的数据结构和 JSON 基本一样。 所有存储在集合中的数据都是 BSON 格式。\"]},\"3584\":{\"h\":\"Ⅰ. 文档的插入\"},\"3585\":{\"h\":\"1. 单个文档插入\",\"t\":[\"使用insertOne() 或 save() 方法向集合中插入文档。 PS：如果指定的集合不存在就会自动创建集合（集合的隐式创建）。\",\"db.集合名.insert( <document or array of documents>, { writeConcern: <document>, ordered: <boolean> } ) \"]},\"3586\":{\"h\":\"1.1 参数\",\"t\":[\"document：要插入到集合中的文档或文档数组。（(json格式）\",\"writeConcern：可选，性能和可靠性的级别。\",\"ordered：可选，如果为true（默认），则按顺序插入数组中的文档，如果其中一个文档出现错误，MongoDB将返回而不处理数组中的其余文档。如果为假，则执行无序插入，如果其中一个文档出现错误，则继续处理数组中的主文档。\"]},\"3587\":{\"h\":\"1.2 示例\",\"t\":[\"db.comment.insertOne({ \\\"articleid\\\":\\\"10000\\\", \\\"content\\\": \\\"that's good\\\", \\\"userid\\\":\\\"1000\\\", \\\"createdatetime\\\": new Date(), \\\"likenum\\\":NumberInt(10), \\\"state\\\":null }) //执行后，返回如下对象 { acknowledged: true, insertedId: ObjectId(\\\"6432843354a1d1820aa07159\\\") } \"]},\"3588\":{\"h\":\"1.3 注意\",\"t\":[\"comment集合如果不存在，则会隐式创建\",\"mongo中的数字，默认情况下是double类型，如果要存整型，必须使用函数NumberInt(整型数字)，否则取出来就有问题了。\",\"插入当前日期使用 new Date()\",\"插入的数据没有指定 _id ，会自动生成主键值\",\"如果某字段没值，可以赋值为null，或不写该字段。\",\"writeConcern和ordered两个参数一般不用管\"]},\"3589\":{\"h\":\"2. 批量插入\",\"t\":[\"db.collection.insertMany( [<document 1>, <document 2>,...], { writeConcern:<document>, ordered:<boolean> } ) \"]},\"3590\":{\"h\":\"2.1 示例\",\"t\":[\"批量插入两条文章评论\",\"db.comment.insertMany([ { \\\"_id\\\":\\\"1\\\", \\\"articleid\\\":\\\"100001\\\", \\\"content\\\":\\\"我们不应该把清晨浪费在手机上\\\", \\\"userid\\\":\\\"1002\\\", \\\"createdatetime\\\":new Date(\\\"2019-08-05T22:08:15.522Z\\\"), \\\"likenum\\\":NumberInt(1000), \\\"state\\\":\\\"1\\\" }, { \\\"_id\\\":\\\"2\\\", \\\"articleid\\\":\\\"100001\\\", \\\"content\\\":\\\"我夏天空腹喝凉开水，冬天喝温开水\\\", \\\"userid\\\":\\\"1005\\\", \\\"createdatetime\\\":new Date(\\\"2019-08-05T23:58:51.485Z\\\"), \\\"likenum\\\":NumberInt(888), \\\"state\\\":\\\"1\\\" } ]) \"]},\"3591\":{\"h\":\"2.2 注意\",\"t\":[\"插入时指定了 _id ，则主键就是该值（实际开发时，一般不指定）。 如果某条数据插入失败，将会终止插入，但已经插入成功的数据不会回滚掉。\"]},\"3592\":{\"h\":\"3. try catch插入\",\"t\":[\"因为批量插入由于数据较多容易出现失败，因此，可以使用try catch进行异常捕捉处理。\",\"try{ db.comment.insertMany([{...},{...}]) //这里是多条插入语句 } catch(e) { print(e) } \"]},\"3593\":{\"h\":\"4. 文档键命名规范\",\"t\":[\"键不能含有\\\\0 (空字符)。这个字符用来表示键的结尾。\",\".和$有特别的意义，只有在特定环境下才能使用。\",\"以下划线\\\"_\\\"开头的键是保留的(不是严格要求的)。\"]},\"3594\":{\"h\":\"Ⅱ. 更新文档\",\"t\":[\"使用update方法更新文档。\",\"db.集合名.update(query, update, options) \",\"query：待更新的文档，可以直接指定_id，也可以使用查询语句\",\"update：要更新的内容\",\"options：更新选项\"]},\"3595\":{\"h\":\"1. options选项\",\"t\":[\"options里有很多选项，控制了更新的细节，一般只需关注前两个。\",\"upsert：[boolean]，可选，true表示没有与查询条件匹配的文档时创建新文档。默认值为false，如果找不到匹配项，则不会插入新文档。\",\"multi：[boolean]，可选，设置为true，则更新符合查询条件的多个文档。如果设置为false，则更新一个文档。默认值为false。\",\"writeConcern：可选。表示写问题的文档。抛出异常的级别。\",\"collation：可选。指定要用于操作的校对规则。校对规则允许用户为字符串比较指定特定于语言的规则，例如字母大小写和重音标记的规则。\"]},\"3596\":{\"h\":\"2. 更新指定字段\",\"t\":[\"警告\",\"MogonDB 6.0.0+ 经过实测，已经不支持覆盖更新了,只能使用$set修改器进行更新\",\"使用$set修改器，更新指定的字段(单个或多个)，\",\"db.comment.updateOne( {_id:\\\"1\\\"}, { $set:{ articleid:\\\"1001\\\", createdatetime:new Date(\\\"2019-08-05T23:58:51.485Z\\\"), likenum: NumberInt(10), state:\\\"2\\\", } } ) \"]},\"3597\":{\"h\":\"3. 批量更新\",\"t\":[\"当query中有多条符合需要的文档记录时，默认只会更新第一条。 若想全部更新，需要使用options中的multi选项\",\"db.comment.updateMany( {userid:\\\"1000\\\"}, { $set:{articleid:\\\"100000\\\"}, }, {multi:true} ) \"]},\"3598\":{\"h\":\"4. 列值增长的修改\",\"t\":[\"如果我们想实现对某列值在原有值的基础上进行增加或减少，可以使用 $inc 运算符来实现。\",\"db.comment.update( {_id:\\\"1\\\"}, {$inc:{likenum:NumberInt(1)}} ) \"]},\"3599\":{\"h\":\"Ⅲ. 删除文档\"},\"3600\":{\"h\":\"1. 移除全部数据\",\"t\":[\"将所有的数据都删除，！！！慎用！！。\",\"db.集合名称.remove({}) db.comment.remove({}) \"]},\"3601\":{\"h\":\"2. 删除指定数据\",\"t\":[\"db.集合名称.remove({条件}) db.comment.remove({_id:\\\"1\\\"}) \"]},\"3602\":{\"h\":\"1-6. 文档查询\"},\"3603\":{\"h\":\"Ⅰ. 基本查询\"},\"3604\":{\"h\":\"1. 语法\",\"t\":[\"db.集合名.find(<query>,[projection]) \",\"参数\",\"query：可选。使用查询运算符指定选择筛选器。若要返回集合中的所有文档，请省略此参数或传递空文档( {} )。\",\"projection：可选，指定要在与查询筛选器匹配的文档中返回的字段（投影）。若要返回匹配文档中的所有字段，请省略此参数。\"]},\"3605\":{\"h\":\"2. 查询所有数据\",\"t\":[\"db.comment.find() or db.comment.find({}) \"]},\"3606\":{\"h\":\"3. 根据条件查询数据\",\"t\":[\"根据query条件查询数据，默认会返回所有符合条件的数据。 如果只需要返回符合条件的第一条数据，我们可以使用ﬁndOne命令来实现。\",\"db.comment.find({userid:'1'}) db.comment.findOne({userid:'1'}) \"]},\"3607\":{\"h\":\"4. 投影查询\",\"t\":[\"如果要查询结果返回部分字段，则需要使用投影查询（不显示所有字段，只显示指定的字段）。 PS： _id字段默认总是显示的。\",\"db.comment.find( {_id:'1'}, {userid:1,state:1} ) \"]},\"3608\":{\"h\":\"Ⅱ. 文档的分页查询\"},\"3609\":{\"h\":\"1. 统计查询\",\"t\":[\"统计查询使用count()方法返回符合条件的全部记录条数。 countDocuments方法 用来返回文档中的记录总数。 语法如下：\",\"db.集合名.countDocuments() db.集合名.count(query,options) \",\"参数\",\"query：查询条件\",\"options：可选，用于修改计数的额外选项\",\"示例\",\"//统计所有记录数 db.comment.countDocument() //按条件统计记录数： db.comment.count({userid:\\\"1\\\"}) \"]},\"3610\":{\"h\":\"2. 分页列表查询\",\"t\":[\"可以使用limit()方法来读取指定数量的数据，使用skip()方法来跳过指定数量的数据(两个方法可以单独使用，也可以一起使用)。\",\"如果你想返回指定条数的记录，可以在ﬁnd方法后调用limit来返回结果(TopN)，默认值20\",\"skip方法同样接受一个数字参数作为跳过的记录条数。（前N个不要）,默认值是0\",\"db.集合名.find().limit(num).skip(num) \",\"示例\",\"//分页查询，每页查两个 db.comment.find().skip(0),limit(2) db.comment.find().skip(2).limit(2) \"]},\"3611\":{\"h\":\"3. 排序查询\",\"t\":[\"sort() 方法对数据进行排序，sort() 方法可以通过参数指定排序的字段，并使用1 和 -1 来指定排序的方式，其中 1 为升序排列，而 -1 是用于降序排列。\",\"排序方式可以是多个字段。\",\"db.集合名.find().sort(排序方式...) \",\"示例 对userid降序排列，并对访问量进行升序排列\",\"db.comment.find().sort({userid:-1,likenum:1}) \",\"注意 skip(), limilt(), sort()三个放在一起执行的时候，执行的顺序是先 sort(), 然后是 skip()，最后是显示的 limit()，和命令编写顺序无关。\"]},\"3612\":{\"h\":\"Ⅲ. 更多复杂查询\"},\"3613\":{\"h\":\"1. 正则条件查询\",\"t\":[\"提示\",\"正则表达式是js的语法\",\"MongoDB的模糊查询是通过正则表达式的方式实现的。格式如下：\",\"db.集合.find({字段:/正则表达式/}) \",\"示例\",\"//查询评论内容包含hello的 db.comment.find({content:/hello/}) //查询用户id是1开头的 db.comment.find({userid:/^1/}) \"]},\"3614\":{\"h\":\"2. 比较查询\",\"t\":[\"查询的时候，可以用上比较运算符，如下：\",\"db.集合名称.find({ \\\"field\\\" : { $gt: value }}) //field > value db.集合名称.find({ \\\"field\\\" : { $lt: value }}) //field < value db.集合名称.find({ \\\"field\\\" : { $gte: value }}) //field >= value db.集合名称.find({ \\\"field\\\" : { $lte: value }}) //field <= value db.集合名称.find({ \\\"field\\\" : { $ne: value }}) //field != value //查询评论点赞数量大于700的记录 db.comment.find({likenum:{$gt:NumberInt(700)}}) \"]},\"3615\":{\"h\":\"3. 包含查询\",\"t\":[\"包含使用$in操作符，不包含使用$nin操作符。\",\"//查询评论的集合中userid字段包含1003或1004的文档 db.comment.find({userid:{$in:[\\\"1003\\\",\\\"1004\\\"]}}) //查询评论集合中userid字段不包含1003和1004的文档 db.comment.find({userid:{$nin:[\\\"1003\\\",\\\"1004\\\"]}}) \"]},\"3616\":{\"h\":\"4. 条件连接查询\",\"t\":[\"我们如果需要查询同时满足两个以上条件，需要使用 $and 操作符将条件进行关联（相 当于SQL的and）。 如果两个以上条件之间是或者的关系，我们使用 $or 操作符进行关联\",\"$and:[{条件},{条件},{条件}] $or:[ { 条件},{条件},{条件} ] //查询评论集合中likenum大于等于700 并且小于2000的文档： b.comment.find( {$and:[ {likenum:{$gte:NumberInt(700)}}, {likenum:{$lt:NumberInt(2000)}} ]} ) //查询评论集合中userid为1003，或者点赞数小于1000的文档记录 db.comment.find({$or:[ {userid:\\\"1003\\\"} ,{likenum:{$lt:1000} }]}) \"]},\"3617\":{\"h\":\"1-7. 索引\",\"t\":[\"索引支持在MongoDB中高效地执行查询。\",\"如果没有索引，MongoDB必须执行全集合扫描，以选择与查询语句匹配的文档。这种扫描全集合的查询效率是非常低的。\",\"索引项的排序支持有效的相等匹配和基于范围的查询操作。此外，MongoDB还可以使用索引中的排序返回排序结果。\",\"MongoDB索引使用B树数据结构（确切的说是B-Tree，MySQL是B+Tree）\"]},\"3618\":{\"h\":\"Ⅰ. 索引的类型\"},\"3619\":{\"h\":\"1. 单字段索引\",\"t\":[\"在文档的单个字段上创建用户定义的升序/降序索引，称为单字段索引（Single Field Index）。\",\"对于单个字段索引和排序操作，索引键的排序顺序（即升序或降序）并不重要，因为MongoDB可以在任何方向上遍历索引。\"]},\"3620\":{\"h\":\"2. 复合索引\",\"t\":[\"MongoDB还支持多个字段的用户定义索引，即复合索引（Compound Index）。\",\"复合索引中列出的字段顺序很重要。例如，如果复合索引由 { userid: 1, score: -1 } 组成，则索引首先按userid正序排序，然后在每个userid的值内，再在按score倒序排序。\"]},\"3621\":{\"h\":\"3. 其他索引\",\"t\":[\"地理空间索引（Geospatial Index）：为了支持对地理空间坐标数据的有效查询，MongoDB提供了两种特殊的索引：返回结果时使用平面几何的二维索引和返回结果时使用球面几何的二维球面索引。\",\"文本索引（Text Indexes）：支持在集合中搜索字符串内容。这些文本索引不存储特定于语言的停止词（例如“the”、“a”、“or”），而将集合中的词作为词干，只存储根词。\",\"哈希索引（Hashed Indexes）：MongoDB提供了散列索引类型，它对字段值的散列进行索引。这些索引在其范围内的值分布更加随机，但只支持相等匹配，不支持基于范围的查询。\"]},\"3622\":{\"h\":\"Ⅱ. 管理索引\"},\"3623\":{\"h\":\"1. 查看索引\",\"t\":[\"getIndexes()方法返回一个集合中的所有索引的数组。\",\"db.集合.getIndexes() \",\"示例\",\"//查看comment集合中所有的索引情况 db.comment.getIndexes() //结果 [ { v: 2, //索引引擎版本，不用管，内置的 key: { _id: 1 //索引的字段，和排序方式 }, name: '_id_' //索引名，默认是索引字段+ _ } ] \",\"_id索引\",\"MongoDB在创建集合的过程中，在_id 字段上创建一个唯一的索引，默认名字为_id_。\",\"注意：该索引是唯一索引，因此值不能重复，即 _id 值不能重复的。在分片集群中，通常使用 _id 作为片键。\"]},\"3624\":{\"h\":\"2. 创建索引\",\"t\":[\"在集合上通过createIndex方法创建索引。\",\"db.集合.createIndex(keys,options) \"]},\"3625\":{\"h\":\"2.1 参数\",\"t\":[\"keys：该参数是一个对象，用来设置索引的字段和索引的排序方式。 \",\"{字段: 排序方式}。\",\"排序方式取值1或-1,1表示正序创建索引，-1表示降序创建索引。\",\"options：可选，包含一组控制索引创建的选项的文档，一般不用设置。 \",\"unique：建立的索引是否唯一，指定为true创建唯一索引。默认值为false.\",\"name：索引的名称，不指定的话就会根据字段名自动生成一个。\"]},\"3626\":{\"h\":\"2.2 创建单字段索引\",\"t\":[\"db.comment.createIndex({userid:1}) //查询刚创建的索引 db.comment.getIndexes() [ { v: 2, key: { _id: 1 }, name: '_id_' }, { v: 2, key: { userid: 1 }, name: 'userid_1' } ] \",\"compass中查看\",\"1-7-1\"]},\"3627\":{\"h\":\"2.3 创建复合索引\",\"t\":[\"对多个字段联合创建一个索引。\",\"db.comment.createIndex( {userid:1, nickname:-1} ) //查看创建的索引 db.comment.getIndexes() [ { v: 2, key: { _id: 1 }, name: '_id_' }, { v: 2, key: { userid: 1 }, name: 'userid_1' }, { v: 2, key: { userid: 1, nickname: -1 }, //复合索引 name: 'userid_1_nickname_-1' } ] \",\"compass中查看\",\"1-7-2\"]},\"3628\":{\"h\":\"2.4 索引默认命名规范\",\"t\":[\"字段名 + _ + 1或-1\",\"联合索引可以是上述规则重复N次，用_相连\",\"1表示正序，-1表示倒叙。\",\"//示例 userid_1 //userid字段的单字段正序索引 userid_1_nickname_-1 \"]},\"3629\":{\"h\":\"3. 移除索引\",\"t\":[\"可以移除指定的索引，或移除所有索引。\"]},\"3630\":{\"h\":\"3.1 移除指定索引\",\"t\":[\"参数index指定要删除的索引，可以是索引名，也可以是索引规范文档。\",\"db.集合名.dropIndex(index) //示例： db.comment.dropIndex({userid:1}) //or db.comment.dropIndex(userid_1) \"]},\"3631\":{\"h\":\"3.2 移除所有索引\",\"t\":[\"移除指定集合内的所有索引。 注意：_id 的字段的索引是无法删除的，只能删除非 _id 字段的索引。\",\"db.集合名.dropIndexes() \"]},\"3632\":{\"h\":\"4. 执行计划\",\"t\":[\"分析查询性能（Analyze Query Performance）通常使用执行计划来查看查询的情况，如查询耗费的时间、是否基于索引查询（建立的索引是否有效）等。 语法：如下在查询语句后面跟explain()方法即可。\",\"db.collection.find(query,options).explain(opeitons) \"]},\"3633\":{\"h\":\"4.1 compass可视化查看\",\"t\":[\"可以通过compass直接可视化的查看执行计划，更直观。\"]},\"3634\":{\"h\":\"4.2 示例\",\"t\":[\"根据uerid查询数据，查看执行计划\",\"db.comment.find({userid:\\\"1002\\\"}).explain() //也可以直接在compass上查看 \"]},\"3635\":{\"h\":\"4.3 查询结果解析\",\"t\":[\"返回的结果很多，重点看stage：\",\"IXCAN：基于索引查询\",\"COLLSCAN：全盘扫描查询\",\"FETCH：基于缓存查询\",\"PROJECTION：覆盖查询\",\"1-7-4\"]},\"3636\":{\"h\":\"5. 涵盖查询\",\"t\":[\"当查询条件和查询的投影仅包含索引字段时，MongoDB直接从索引返回结果，而不扫描任何文档或将文档带入内存。 简单来说，查询的字段只包含索引时，就直接从索引返回结果。\",\"db.comment.find({userid:\\\"1002\\\"},{userid:1,_id:0}) \",\"通过compass查看\",\"1-7-5\"]},\"3637\":{\"h\":\"2-1. 介绍\"},\"3638\":{\"h\":\"Ⅰ. 副本集\"},\"3639\":{\"h\":\"1. 概述\",\"t\":[\"MongoDB中的副本集（Replica Set）是一组维护相同数据集的mongod服务。 副本集可提供冗余和高 可用性，是所有生产部署的基础。\",\"可以说，副本集类似于有自动故障恢复功能的主从集群。通俗的讲就是用多台机器进行同一数据的异 步同步，从而使多台机器拥有同一数据的多个副本，并且当主库当掉时在不需要用户干预的情况下自动 切换其他备份服务器做主库。而且还可以利用副本服务器做只读服务器，实现读写分离，提高负载。\"]},\"3640\":{\"h\":\"2. 冗余和数据可用性\",\"t\":[\"复制提供冗余并提高数据可用性。 通过在不同数据库服务器上提供多个数据副本，复制可提供一定级别的容错功能，以防止丢失单个数据库服务器。\",\"在某些情况下，复制可以提供增加的读取性能，因为客户端可以将读取操作发送到不同的服务上， 在不 同数据中心维护数据副本可以增加分布式应用程序的数据位置和可用性。 还可以为专用目的维护其他 副本，例如灾难恢复，报告或备份。\"]},\"3641\":{\"h\":\"3. MongoDB中的复制\",\"t\":[\"副本集是一组维护相同数据集的mongod实例。 副本集包含多个数据承载节点和可选的一个仲裁节点。 在承载数据的节点中，一个且仅一个成员被视为主节点，而其他节点被视为次要（从）节点。\",\"主节点接收所有写操作。 副本集只能有一个主要能够确认具有{w：“most”}写入关注的写入; 虽然在某 些情况下，另一个mongod实例可能暂时认为自己也是主要的。主要记录其操作日志中的数据集的所有 更改，即oplog。\",\"2-1-1\"]},\"3642\":{\"h\":\"4. 主从复制和副本集区别\",\"t\":[\"主从集群和副本集最大的区别就是副本集没有固定的“主节点”；整个集群会选出一个“主节点”，当其挂 掉后，又在剩下的从节点中选中其他节点为“主节点”，副本集总有一个活跃点(主、primary)和一个或多个备份节点(从、secondary)。\"]},\"3643\":{\"h\":\"5. 副本集的类型和角色\",\"t\":[\"副本集有两种类型三种角色\"]},\"3644\":{\"h\":\"5.1 两种类型\",\"t\":[\"主节点（Primary）类型：数据操作的主要连接点，可读写。\",\"次要（辅助、从）节点（Secondaries）类型：数据冗余备份节点，可以读或选举。\"]},\"3645\":{\"h\":\"5.2 三种角色\",\"t\":[\"主要成员（Primary）：主要接收所有写操作。就是主节点。\",\"副本成员（Replicate）：从主节点通过复制操作以维护相同的数据集，即备份数据，不可写操作，但可以读操作（但需要配置）。是默认的一种从节点类型。\",\"仲裁者（Arbiter）：不保留任何数据的副本，只具有投票选举作用。当然也可以将仲裁服务器维护为副本集的一部分，即副本成员同时也可以是仲裁者。也是一种从节点类型。\",\"2-1-2\"]},\"3646\":{\"h\":\"5.3 仲裁者额外说明\",\"t\":[\"可以将额外的mongod实例添加到副本集作为仲裁者。 仲裁者不维护数据集，仲裁者的目的是通过 响应其他副本集成员的心跳和选举请求来维护副本集中的仲裁。 因为它们不存储数据集，所以仲裁器可 以是提供副本集仲裁功能的好方法，其资源成本比具有数据集的全功能副本集成员更便宜。\",\"如果副本集具有偶数个成员，添加仲裁者以获得主要选举中的“大多数”投票。 \",\"如果你的副本+主节点的个数是奇数，可以不加仲裁者。\",\"仲裁者不需要专用硬件。\",\"仲裁者将永远是仲裁者，而主要人员可能会退出并成为次要人员，而次要人员可能成为选举期间的主要人员。\"]},\"3647\":{\"h\":\"6. 副本集架构示例\",\"t\":[\"最小的副本集架构：一主一副本一仲裁\",\"2-1-3\"]},\"3648\":{\"h\":\"Ⅱ. 分片集群\",\"t\":[\"提示\",\"TBD\"]},\"3649\":{\"h\":\"2-2. 创建副本集\",\"t\":[\"最小副本集架构\",\"一主一副本一仲裁\"]},\"3650\":{\"h\":\"Ⅰ. 副本集设计\"},\"3651\":{\"h\":\"1. 架构\",\"t\":[\"根据最小副本集架构搭建副本集，以下操作示例将在同一台设备上进行，以端口（配置文件）作为区分，实际开发应该在多台服务器上进行。\",\"PS：是安装一次MongoDB，多次启动，每次端口不同。\"]},\"3652\":{\"h\":\"2. 端口设计\",\"t\":[\"27017：主节点（Primary）\",\"27018：副节点（Secondary）\",\"27019：选举节点（Arbiter）\"]},\"3653\":{\"h\":\"3. 目录设计\",\"t\":[\"软件安装目录：/opt/mongodb/mongodb-6.0.5/\",\"文件目录：/opt/mongodb/sets/ \",\"m27017/：主节点目录\",\"m27018/：副节点目录\",\"m27019/：选举节点目录\"]},\"3654\":{\"h\":\"4. 文件设计\",\"t\":[\"每个节点目录下都有以下文件：\",\"log/：日志目录\",\"data/db/：数据目录\",\"mongod.conf：配置文件，\"]},\"3655\":{\"h\":\"Ⅱ. 创建节点\"},\"3656\":{\"h\":\"1. 创建主节点\",\"t\":[\"根据上述设计，创建主节点的目录和相关文件，其中配置文件如下：\",\"#和单机MongoDB差不多，就是多了个replSetName（副本集配置）。 systemLog: #MongoDB发送所有日志输出的目标指定为文件 destination: file #mongod或mongos应向其发送所有诊断日志记录信息的日志文件的路径 path: \\\"/opt/mongodb/sets/m27017/log/mongod.log\\\" #当mongos或mongod实例重新启动时，mongos或mongod会将新条目附加到现有日志文件的末尾。 logAppend: true storage: #mongod实例存储其数据的目录。storage.dbPath设置仅适用于mongod。 dbPath: \\\"/opt/mongodb/sets/m27017/data/db\\\" journal: #启用或禁用持久性日志以确保数据文件保持有效和可恢复。 enabled: true processManagement: #启用在后台运行mongos或mongod进程的守护进程模式。 fork: true #指定用于保存mongos或mongod进程的进程ID的文件位置，其中mongos或mongod将写入其PID pidFilePath: \\\"/opt/mongodb/sets/m27017/log/mongod.pid\\\" net: #服务实例绑定所有IP，有副作用，副本集初始化的时候，节点名字会自动设置为本地域名，而不是ip #bindIpAll: true #服务实例绑定的IP bindIp: localhost,172.16.0.9 #bindIp绑定的端口 port: 27017 replication: #副本集的名称 replSetName: myrs \",\"启动节点\",\"[bin] ./mongod -f /opt/mongodb/sets/m27017/mongod.conf # about to fork child process, waiting until server is ready for connections. # forked process: 3062446 # child process started successfully, parent exiting \"]},\"3657\":{\"h\":\"2. 创建副本节点\",\"t\":[\"同上创建对应的目录和文件，副节点的配置文件和主节点配置文件相比只有一些目录和端口的配置不同。副本节点和主节点拥有相同的副本集名称以组成副本集。\",\"path: \\\"/opt/mongodb/sets/m27018/log/mongod.log\\\" dbPath: \\\"/opt/mongodb/sets/m27018/data/db\\\" pidFilePath: \\\"/opt/mongodb/sets/m27018/log/mongod.pid\\\" port: 27018 \",\"启动副本节点\",\"[bin] ./mongod -f /opt/mongodb/sets/m27018/mongod.conf \"]},\"3658\":{\"h\":\"3. 创建仲裁节点\",\"t\":[\"同上创建对应的目录和文件，仲裁节点的配置文件和主节点配置文件相比只有一些目录和端口的配置不同。仲裁节点和主节点拥有相同的副本集名称以组成副本集。\",\"path: \\\"/opt/mongodb/sets/m27019/log/mongod.log\\\" dbPath: \\\"/opt/mongodb/sets/m27019/data/db\\\" pidFilePath: \\\"/opt/mongodb/sets/m27019/log/mongod.pid\\\" port: 27019 \",\"启动仲裁节点\",\"[bin] ./mongod -f /opt/mongodb/sets/m27019/mongod.conf \"]},\"3659\":{\"h\":\"4. 查看启动结果\",\"t\":[\"看下三个mongodb服务是否启动成功\",\"ps -ef | grep mongod \",\"2-2-1\"]},\"3660\":{\"h\":\"Ⅲ. 初始化副本集\",\"t\":[\"注意\",\"连接上任意一个节点后，很多命令无法使用，比如show dbs等，操作前必须初始化副本集才行。\"]},\"3661\":{\"h\":\"1. 连接节点\",\"t\":[\"使用Compass连接主节点，注意，由于副本集未初始化，直接连接副本集将失败， 需要勾选如下设置，以直接连接的方式连接副本集主节点：\",\"2-2-2\"]},\"3662\":{\"h\":\"2. 连接后查看\",\"t\":[\"如下：视图中无法显示数据库列表，输入查看数据库的指令，也无法执行。\",\"2-2-3\"]},\"3663\":{\"h\":\"3. 初始化副本集\",\"t\":[\"rs.initiate(configuration) \",\"选项一般为空即可，选项是一些与副本集设置有关的信息。\"]},\"3664\":{\"h\":\"4. 副本集初始化结果\",\"t\":[\"rs.initiate() { info2: 'no configuration specified. Using a default configuration for the set', me: '172.16.0.9:27017', ok: 1 } myrs [direct: secondary] test> \",\"解析\",\"ok值为1，表示副本集创建成功\",\"命令行提示符发生变化，变成了一个从节点角色。 \",\"此时默认不能读写。稍等片刻，回车，变成主节点。\",\"此时已经可以读到数据库了。\"]},\"3665\":{\"h\":\"Ⅳ. 查看副本集\",\"t\":[\"主节点\",\"副本集初始化后，也同时配置好了主节点，查看副本集信息时，可以查看到主节点的信息。\"]},\"3666\":{\"h\":\"1. 查看副本集的配置内容\",\"t\":[\"提示\",\"副本集配置的查看命令，本质是查询的是 system.replset 的表中的数据\",\"rs.conf(configuration) \",\"conﬁguration：可选，如果没有配置，则使用默认主节点配置。\"]},\"3667\":{\"h\":\"1.1 执行结果\",\"t\":[\"rs.conf() { _id: 'myrs', version: 1, term: 1, members: [ { _id: 0, host: '172.16.0.9:27017', arbiterOnly: false, buildIndexes: true, hidden: false, priority: 1, tags: {}, secondaryDelaySecs: Long(\\\"0\\\"), votes: 1 } ], protocolVersion: Long(\\\"1\\\"), writeConcernMajorityJournalDefault: true, settings: { chainingAllowed: true, heartbeatIntervalMillis: 2000, heartbeatTimeoutSecs: 10, electionTimeoutMillis: 10000, catchUpTimeoutMillis: -1, catchUpTakeoverDelayMillis: 30000, getLastErrorModes: {}, getLastErrorDefaults: { w: 1, wtimeout: 0 }, replicaSetId: ObjectId(\\\"6447e68241b3272f43080f4d\\\") } \"]},\"3668\":{\"h\":\"1.2 结果解析\",\"t\":[\"_id: 'myrs'：副本集的配置数据存储的主键值，默认就是副本集的名字\",\"members ：副本集成员数组， \",\"此时只有一个：\\\"host\\\":\\\"172.16.0.9:27017\\\" ， \",\"该成员不是仲裁节点： \\\"arbiterOnly\\\" : false\",\"优先级（权重值）：\\\"priority\\\" : 1\",\"settings：副本集的参数配置\"]},\"3669\":{\"h\":\"2. 查看副本集状态\",\"t\":[\"rs.status() \",\"返回包含状态信息的文档。\",\"此输出使用从副本集的其他成员发送的心跳包中获得的数据反映副本集的当前状态。\"]},\"3670\":{\"h\":\"2.1 执行结果\",\"t\":[\"{ set: 'myrs', date: 2023-04-25T14:54:27.116Z, myState: 1, term: Long(\\\"1\\\"), syncSourceHost: '', syncSourceId: -1, heartbeatIntervalMillis: Long(\\\"2000\\\"), majorityVoteCount: 1, writeMajorityCount: 1, votingMembersCount: 1, writableVotingMembersCount: 1, optimes: { lastCommittedOpTime: { ts: Timestamp({ t: 1682434466, i: 1 }), t: Long(\\\"1\\\") }, lastCommittedWallTime: 2023-04-25T14:54:26.680Z, readConcernMajorityOpTime: { ts: Timestamp({ t: 1682434466, i: 1 }), t: Long(\\\"1\\\") }, appliedOpTime: { ts: Timestamp({ t: 1682434466, i: 1 }), t: Long(\\\"1\\\") }, durableOpTime: { ts: Timestamp({ t: 1682434466, i: 1 }), t: Long(\\\"1\\\") }, lastAppliedWallTime: 2023-04-25T14:54:26.680Z, lastDurableWallTime: 2023-04-25T14:54:26.680Z }, lastStableRecoveryTimestamp: Timestamp({ t: 1682434446, i: 1 }), electionCandidateMetrics: { lastElectionReason: 'electionTimeout', lastElectionDate: 2023-04-25T14:41:06.438Z, electionTerm: Long(\\\"1\\\"), lastCommittedOpTimeAtElection: { ts: Timestamp({ t: 1682433666, i: 1 }), t: Long(\\\"-1\\\") }, lastSeenOpTimeAtElection: { ts: Timestamp({ t: 1682433666, i: 1 }), t: Long(\\\"-1\\\") }, numVotesNeeded: 1, priorityAtElection: 1, electionTimeoutMillis: Long(\\\"10000\\\"), newTermStartDate: 2023-04-25T14:41:06.593Z, wMajorityWriteAvailabilityDate: 2023-04-25T14:41:06.683Z }, members: [ { _id: 0, name: '172.16.0.9:27017', health: 1, state: 1, stateStr: 'PRIMARY', uptime: 3784, optime: [Object], optimeDate: 2023-04-25T14:54:26.000Z, lastAppliedWallTime: 2023-04-25T14:54:26.680Z, lastDurableWallTime: 2023-04-25T14:54:26.680Z, syncSourceHost: '', syncSourceId: -1, infoMessage: '', electionTime: Timestamp({ t: 1682433666, i: 2 }), electionDate: 2023-04-25T14:41:06.000Z, configVersion: 1, configTerm: 1, self: true, lastHeartbeatMessage: '' } ], ok: 1, '$clusterTime': { clusterTime: Timestamp({ t: 1682434466, i: 1 }), signature: { hash: Binary(Buffer.from(\\\"0000000000000000000000000000000000000000\\\", \\\"hex\\\"), 0), keyId: Long(\\\"0\\\") } }, operationTime: Timestamp({ t: 1682434466, i: 1 }) } \"]},\"3671\":{\"h\":\"2.2 结果解析\",\"t\":[\"set: 'myrs'：副本集的名字\",\"myState: 1：值为1，说明状态正常\",\"members： 副本集成员数组，此时只有一个，就是主节点。 \",\"stateStr: 'PRIMARY'：角色名\",\"health: 1：值为1，表示该节点是健康的。\"]},\"3672\":{\"h\":\"Ⅴ. 添加节点\",\"t\":[\"完成副本集\",\"手动将副本从节点和仲裁从节点添加到副本集，副本集就真正创建成功了。\"]},\"3673\":{\"h\":\"1. 添加副本从节点\",\"t\":[\"rs.add(host, arbiterOnly) \",\"host：要添加到副本集的新成员。 \",\"字符串：指定新成员的主机名和可选的端口号\",\"文档：指定配置文档\",\"arbiterOnly：可选，值为Boolean，若为true，表示要添加的主机为仲裁者 \",\"默认是false\",\"一般不用给这个值，添加仲裁节点可以用别的方法\",\"将从节点添加道副本集\",\"myrs [direct: primary]test> rs.add(\\\"172.16.0.9:27018\\\") { ok: 1, '$clusterTime': { clusterTime: Timestamp({ t: 1682435169, i: 1 }), signature: { hash: Binary(Buffer.from(\\\"0000000000000000000000000000000000000000\\\", \\\"hex\\\"), 0), keyId: Long(\\\"0\\\") } }, operationTime: Timestamp({ t: 1682435169, i: 1 }) } \",\"结果说明ok: 1：值为1，表示添加成功。\",\"此时执行 rs.status() 查看副本集状态，可以发现members里存在了两个节点，刚加入的节点信息如下：\",\"{ _id: 1, # 节点id name: '172.16.0.9:27018', # 节点ip:port health: 1, # 是否健康 state: 2, stateStr: 'SECONDARY', # 角色名，SECONDARY表示副节点 uptime: 195, optime: [Object], optimeDurable: [Object], optimeDate: 2023-04-25T15:09:16.000Z, optimeDurableDate: 2023-04-25T15:09:16.000Z, lastAppliedWallTime: 2023-04-25T15:09:16.699Z, lastDurableWallTime: 2023-04-25T15:09:16.699Z, lastHeartbeat: 2023-04-25T15:09:23.805Z, lastHeartbeatRecv: 2023-04-25T15:09:24.306Z, pingMs: Long(\\\"0\\\"), lastHeartbeatMessage: '', syncSourceHost: '172.16.0.9:27017', syncSourceId: 0, infoMessage: '', configVersion: 3, configTerm: 1 } \"]},\"3674\":{\"h\":\"2. 添加仲裁从节点\",\"t\":[\"rs.addArb(host) \",\"将仲裁节点添加到副本集\",\"rs.addArb(\\\"159.75.225.162:27019\\\") { ok: 1, '$clusterTime': { clusterTime: Timestamp({ t: 1682436386, i: 1 }), signature: { hash: Binary(Buffer.from(\\\"000000000000000000000000000000\\\", \\\"hex\\\"), 0), keyId: Long(\\\"0\\\") } }, operationTime: Timestamp({ t: 1682436386, i: 1 }) } \",\"查看副本集状态\",\"此时，members里多了一个对象，就是刚新加入的仲裁节点，内容如下：\",\"{ _id: 2, name: '159.75.225.162:27019', # ip:port health: 1, # 表示健康 state: 7, stateStr: 'ARBITER', # 角色名，ARBITER表示仲裁节点 uptime: 65, lastHeartbeat: 2023-04-25T15:27:30.240Z, lastHeartbeatRecv: 2023-04-25T15:27:30.276Z, pingMs: Long(\\\"0\\\"), lastHeartbeatMessage: '', syncSourceHost: '', syncSourceId: -1, infoMessage: '', configVersion: 4, configTerm: 1 } \"]},\"3675\":{\"h\":\"3. debug\",\"t\":[\"添加节点时，可能会遇到报错：MongoServerError: Reconfig attempted to install a config that would change the implicit default write concern. Use the setDefaultRWConcern command to set a cluster-wide write concern and try the reconfig again.\",\"解决\",\"先执行下面这条命令，然后再添加节点。\",\"db.adminCommand( { \\\"setDefaultRWConcern\\\" : 1, \\\"defaultWriteConcern\\\" : { \\\"w\\\" : 2 } } ) \"]},\"3676\":{\"h\":\"2-3. 操作副本集\"},\"3677\":{\"h\":\"Ⅰ. 连接副本集\"},\"3678\":{\"h\":\"1. 修复host\",\"t\":[\"当时初始化副本集的时候，节点成员的host都是区域网ip，这是无法正常连接的。\",\"rs.conf() //查看member可知，节点的host都是区域网ip \",\"在使用Compass连接副本集时，会连接这些ip，本地ip肯定是不行的，会连接失败，因此需要修复这些host。\"]},\"3679\":{\"h\":\"1.1 修改副本集节点的host\",\"t\":[\"实际上就是改一下 config，修改的代码如下：\",\"config = rs.conf() config.members[0].host=\\\"159.75.225.162:27017\\\" //主节点 config.members[1].host=\\\"159.75.225.162:27018\\\" //从节点 config.members[2].host=\\\"159.75.225.162:27019\\\" //从节点 rs.reconfig(config,{\\\"force\\\":true}) \"]},\"3680\":{\"h\":\"2. 连接副本集\",\"t\":[\"详见：Compass\"]},\"3681\":{\"h\":\"Ⅱ. 数据读写\"},\"3682\":{\"h\":\"1. 主节点读写\",\"t\":[\"登录主节点进行读写操作。\",\"myrs[direct:primary]article> use article # 创建或选择article库 # 'switched to db article' db articel # 显示当前数据库 db.comment.insertOne({ # 插入一条数据 \\\"articleid\\\":\\\"10000\\\", \\\"content\\\": \\\"that's good\\\", \\\"userid\\\":\\\"1000\\\", \\\"createdatetime\\\": new Date(), \\\"likenum\\\":NumberInt(10), \\\"state\\\":null }) { # 插入成功 acknowledged: true, insertedId: ObjectId(\\\"64487fe22c64c9d9921960f8\\\") } \",\"插入数据成功后，在Compass中，确实可以看到数据库创建成功，数据也插入成功。\"]},\"3683\":{\"h\":\"2. 从节点读写\",\"t\":[\"警告\",\"老的教程显示，从节点是没有读写权限的，需要使用slaveOk方法赋予权限。\",\"实测，若以replicaSet的方式登录， 主节点和从节点的默认优先级是相同的，操作的一直都是主节点。\",\"暂略。\"]},\"3684\":{\"h\":\"Ⅲ. 主节点的选举\"},\"3685\":{\"h\":\"1. 选举触发条件\",\"t\":[\"MongoDB在副本集中，会自动进行主节点的选举，触发条件为：\",\"主节点故障\",\"主节点网络不可达（默认心跳信息为10秒）\",\"人工干预（rs.stepDown(600)）\"]},\"3686\":{\"h\":\"2. 投票\",\"t\":[\"每个节点都可以投票。 选举规则是根据票数来决定谁获胜：\",\"票数最高：且获得了“大多数”成员的投票支持的节点获胜，大多数为 N/2 + 1。\",\"票数相同，且都获得了“大多数”成员的投票支持的，数据新的节点获胜\"]},\"3687\":{\"h\":\"3. 优先级\",\"t\":[\"在获得票数的时候，优先级（priority）参数影响重大。\",\"可以通过设置优先级（priority）来设置额外票数。优先级即权重，取值为0-1000，相当于可额外增加0-1000的票数，优先级的值越大，就越可能获得多数成员的投票（votes）数。 指定较高的值可使成员更有资格成为主要成员，默认情况下，优先级的值是1。\"]},\"3688\":{\"h\":\"3.1 查看优先级\",\"t\":[\"rs.conf() //返回的数据中members.priority就是优先级的值 \"]},\"3689\":{\"h\":\"3.2 修改优先级\",\"t\":[\"cfg=rs.conf() //将配置导入变量 cfg.members[0].priority=2 //修改0号成员的优先级 rs.reconfig(cfg) //重新加载配置 \",\"修改优先级后，就会开始重新选举。\"]},\"3690\":{\"h\":\"Ⅳ. 故障测试\",\"t\":[\"相关信息\",\"TBD\"]},\"3691\":{\"h\":\"2-4. 分片集群\",\"t\":[\"提示\",\"TBD\"]},\"3692\":{\"h\":\"3-1. 角色与权限\",\"t\":[\"默认情况\",\"默认情况下，MongoDB实例启动运行时是没有启用用户访问权限控制的。 也就是说，可以随意连接到实例进行各种操作，MongoDB不会对连接客户端进行用户验证，这是非常危险的。\"]},\"3693\":{\"h\":\"1. 安全保障手段\",\"t\":[\"使用新的端口，默认的27017端口如果一旦知道了ip就能连接上，不太安全\",\"设置mongodb的网络环境，最好将mongodb部署到公司服务器内网，这样外网是访问不到的。公 司内部访问使用vpn等。\",\"开启安全认证。认证要同时设置服务器之间的内部认证方式，同时要设置客户端连接到集群的账号 密码认证方式。\"]},\"3694\":{\"h\":\"2. 启动访问控制\",\"t\":[\"为了强制开启用户访问控制(用户验证)，则需要在MongoDB实例启动时使用选项 --auth 或在指定启动 配置文件中添加选项 auth=true。\",\"请选择在配置文件中添加选项，因为启动时加选项毫无意义，别人可以选择不加。\"]},\"3695\":{\"h\":\"3. 概念\"},\"3696\":{\"h\":\"3.1 启动访问控制\",\"t\":[\"MongoDB使用的是基于角色的访问控制(Role-Based Access Control,RBAC)来管理用户对实例的访问。\",\"通过对用户授予一个或多个角色来控制用户访问数据库资源的权限和数据库操作的权限，在对用户分配 角色之前，用户无法访问实例\"]},\"3697\":{\"h\":\"3.2 角色\",\"t\":[\"在MongoDB中通过角色对用户授予相应数据库资源的操作权限，每个角色当中的权限可以显式指定， 也可以通过继承其他角色的权限，或者两都都存在的权限。\"]},\"3698\":{\"h\":\"3.3 权限：\",\"t\":[\"权限由指定的数据库资源(resource)以及允许在指定资源上进行的操作(action)组成。\",\"资源(resource)包括：数据库、集合、部分集合和集群；\",\"操作(action)包括：对资源进行的增、删、改、查(CRUD)操作。\",\"在角色定义时可以包含一个或多个已存在的角色，新创建的角色会继承包含的角色所有的权限。在同一 个数据库中，新创建角色可以继承其他角色的权限，在 admin 数据库中创建的角色可以继承在其它任意数据库中角色的权限。\"]},\"3699\":{\"h\":\"4. 查看角色权限\"},\"3700\":{\"h\":\"4.1 查询所有角色权限（仅用户自定义角色）\",\"t\":[\" db.runCommand({ rolesInfo: 1 }) { roles: [], ok: 1, '$clusterTime': { clusterTime: Timestamp({ t: 1682481367, i: 1 }), signature: { hash: Binary(Buffer.from(\\\"0000000000000000000000000000\\\", \\\"hex\\\"), 0), keyId: Long(\\\"0\\\") } }, operationTime: Timestamp({ t: 1682481367, i: 1 }) } \",\"默认是没有自定义角色的。\"]},\"3701\":{\"h\":\"4.2 查询所有角色权限(包含内置角色)\",\"t\":[\"db.runCommand({ rolesInfo: 1, showBuiltinRoles: true }) { roles: [ { role: 'dbOwner', db: 'test', isBuiltin: true, roles: [], inheritedRoles: [] }, { role: 'readWrite', db: 'test', isBuiltin: true, roles: [], inheritedRoles: [] }, { role: 'userAdmin', db: 'test', isBuiltin: true, roles: [], inheritedRoles: [] }, { role: 'dbAdmin', db: 'test', isBuiltin: true, roles: [], inheritedRoles: [] }, { role: 'read', db: 'test', isBuiltin: true, roles: [], inheritedRoles: [] }, { role: 'enableSharding', db: 'test', isBuiltin: true, roles: [], inheritedRoles: [] } ], ok: 1, '$clusterTime': { clusterTime: Timestamp({ t: 1682481447, i: 1 }), signature: { hash: Binary(Buffer.from(\\\"00000000000000000000000000\\\", \\\"hex\\\"), 0), keyId: Long(\\\"0\\\") } }, operationTime: Timestamp({ t: 1682481447, i: 1 }) } \",\"如上，有6个内置的角色。\"]},\"3702\":{\"h\":\"4.3 查询指定权限\",\"t\":[\"# 查询当前数据库中的某角色的权限 > db.runCommand({ rolesInfo: \\\"<rolename>\\\" }) # 查询其它数据库中指定的角色权限 > db.runCommand({ rolesInfo: { role: \\\"<rolename>\\\", db: \\\"<database>\\\" } } # 查询多个角色权限 > db.runCommand( { rolesInfo: [ \\\"<rolename>\\\", { role: \\\"<rolename>\\\", db: \\\"<database>\\\" }, ... ] } ) \"]},\"3703\":{\"h\":\"5. 常用的内置角色：\",\"t\":[\"数据库用户角色：read、readWrite;\",\"所有数据库用户角色：readAnyDatabase、readWriteAnyDatabase、 userAdminAnyDatabase、dbAdminAnyDatabase\",\"数据库管理角色：dbAdmin、dbOwner、userAdmin；\",\"集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；\",\"备份恢复角色：backup、restore；\",\"超级用户角色：root\",\"内部角色：system\"]},\"3704\":{\"h\":\"6. 角色说明\",\"t\":[\"角色\",\"权限描述\",\"read\",\"可以读取指定数据库中任何数据。\",\"readWrite\",\"可以读写指定数据库中任何数据，包括创建、重命名、删除集合。\",\"readAnyDatabase\",\"可以读取所有数据库中任何数据(除了数据库config和local之外)。\",\"readWriteAnyDatabase\",\"可以读写所有数据库中任何数据(除了数据库config和local之外)。\",\"userAdminAnyDatabase\",\"可以在指定数据库创建和修改用户(除了数据库config和local之外)。\",\"dbAdminAnyDatabase\",\"可以读取任何数据库以及对数据库进行清理、修改、压缩、获取统计信息、执行检查等操作(除了数据库config和local之外)。\",\"dbAdmin\",\"可以读取指定数据库以及对数据库进行清理、修改、压缩、获取统计信息、执行检查等操作。\",\"userAdmin\",\"可以在指定数据库创建和修改用户。\",\"clusterAdmin\",\"可以对整个集群或数据库系统进行管理操作。\",\"backup\",\"备份MongoDB数据最小的权限。\",\"restore\",\"从备份文件中还原恢复MongoDB数据(除了system.profile集合)的权限。\",\"root\",\"超级账号，超级权限\"]},\"3705\":{\"h\":\"3-2. 单实例环境\"},\"3706\":{\"h\":\"Ⅰ. 管理用户\"},\"3707\":{\"h\":\"1. createUser\",\"t\":[\"创建用户需要使用db.createUser方法，该方法有一个对象参数。\",\"admin> db.createUser( { user: \\\"admin\\\", # 用户名 pwd: \\\"123456\\\", # 设置密码 customData:{ # 账户描述信息，可选 \\\"desc\\\":\\\"this user is admin\\\" } roles:[ # 设置角色，赋予权限 { role:\\\"root\\\" # 赋予root角色 # db可选，默认在所有的数据库上都有效 db:\\\"article\\\" # 赋予角色所属的数据库 } ] } ) { ok: 1 } # 表示创建成功 \"]},\"3708\":{\"h\":\"2. 创建用户示例\",\"t\":[\"连接mongodb，use admin数据库，并创建以下三个账户\",\"myroot：系统超级用户，角色为root \",\"如果对安全要求很高，防止超管泄漏，则不要创建root超管用户。\",\"admin：admin库的管理用户，角色为userAdminAnyDatabase\",\"blog：普通用户，仅能操作article数据库\"]},\"3709\":{\"h\":\"2.1 创建myroot\",\"t\":[\"test> use admin admin> db.createUser( {user:'myroot',pwd:'2ck23-5',roles:[{role:'root', db:'admin'}]} ) \"]},\"3710\":{\"h\":\"2.2 创建admin\",\"t\":[\"创建专门用来管理admin库的账号myadmin，只用来作为用户权限的管理。\",\"use admin db.createUser( {user:'admin',pwd:'a123', roles:[{role:'userAdminAnyDatabase', db:'admin'}]} ) \"]},\"3711\":{\"h\":\"2.3 创建普通用户\",\"t\":[\"创建普通用户可以在没有开启认证的时候添加，也可以在开启认证之后添加，但开启认证之后，必须使 用有操作admin库的用户登录认证后才能操作。底层都是将用户信息保存在了admin数据库的集合 system.users中。\",\"如下，创建一个仅能对article库进行读写的用户。\",\"db.createUser( {user:\\\"blog\\\",pwd:\\\"1234\\\",roles:[{role:\\\"readWrite\\\",db:\\\"article\\\"}]} ) \"]},\"3712\":{\"h\":\"3. 查看用户\",\"t\":[\"提示\",\"和其它数据库（MySQL）一样，权限的管理都差不多一样，也是将用户和权限信息保存到数据库对 应的表中。 Mongodb存储所有的用户信息在admin 数据库的集合system.users中，保存用户名、密码 和数据库信息。 PS：这个集合是隐藏的，没法在Compass上直接看到，需要输入查看命令。\",\"admin> show collections system.users # 可以看到有两个隐藏的集合 system.version \",\"输入指令查看所有的用户信息：\",\"admin> db.system.users.find() \",\"查询的结果如下：\",\"// 第一个添加的用户: myroot { _id: 'admin.myroot', // 用户id：admin.用户名 userId: UUID(\\\"a9898c75-ea87-4506-a2cf-30cee1936861\\\"), user: 'myroot', // 用户名 db: 'admin', // 用户所在的数据库 credentials:{ // 加密 key ... }, roles:[ // 角色信息 { role:'root', db: 'admin' //用户管理的数据库 } ] } // 第二个添加的用户: admin { _id: 'admin.admin', userId: UUID(\\\"3b994547-15ef-4cc1-9632-e676dd308382\\\"), user: 'admin', db: 'admin', credentials:{ ... }, roles:[ ... ] // 第三个添加的用户: blog _id: 'admin.blog', userId: UUID(\\\"c8710e95-2218-4032-9ef5-855ed8bca863\\\"), user: 'blog', db: 'admin', credentials:{ ... }, roles:[ { role: 'readWrite', db: 'article' } ] } \"]},\"3713\":{\"h\":\"4. 删除用户\",\"t\":[\"db.dropUser(\\\"用户名\\\") { ok: 1 } // 表示操作成功 \"]},\"3714\":{\"h\":\"5. 修改密码\",\"t\":[\"db.changeUserPassword(\\\"用户名\\\",\\\"新密码\\\") { ok: 1 } // 表示操作成功 \"]},\"3715\":{\"h\":\"6. 认证测试\",\"t\":[\"并非真正的开启用户验证，只是测试下创建的账号。\",\"注意：无论用户管理的数据库是哪个，该用户的信息都是存储在admin数据库的，因此需要在admin数据库下使用auth方法进行验证。\",\"//一定要切到admin数据库，不如怎么验证都是失败 use admin //先使用错误的用户名和密码 admin> db.auth(\\\"person\\\",\\\"23d23\\\") 报错：MongoServerError:Authentication failed. //使用正确的用户名和密码 db.auth(\\\"blog\\\",\\\"1234\\\") {ok: 1} //验证通过 \"]},\"3716\":{\"h\":\"Ⅱ. 开启认证\",\"t\":[\"警告\",\"创建用户后，还要开启登录认证，不然创建的用户毫无意义。\"]},\"3717\":{\"h\":\"1. 修改配置文件\",\"t\":[\"修改mongod.conf配置文件，添加权限验证。\",\"security: #开启授权认证 authorization: enabled \",\"此时再启动服务，就开启了登录认证。\"]},\"3718\":{\"h\":\"2. 通过认证登录\",\"t\":[\"不认证通过Compass直接登录，会报错：\",\"An error occurred while loading instance info: command hostInfo requires authentication\"]},\"3719\":{\"h\":\"2.1 登录时进行验证\",\"t\":[\"需要在登录时就选择进行权限验证：\",\"3-2-1\"]},\"3720\":{\"h\":\"2.2 登录后的权限\",\"t\":[\"用什么账号登录，就有什么账号的权限，如上采用的blog账号，该账号仅能读写article库，因此登录后就只能看到article库，只能操作article库。\",\"3-2-2\"]},\"3721\":{\"h\":\"Ⅲ. 关闭MongoDB\",\"t\":[\"除了暴力kill进程，还可以使用命名关闭MongoDB服务。\",\"use admin db.shutdownServer() \",\"shutdownServer执行的条件\",\"必须是在admin库下执行该关闭服务命令\",\"如果没有开启认证，必须是从localhost登陆的，才能执行关闭服务命令\",\"非localhost的、通过远程登录的，必须有登录且必须登录用户有对admin操作权限才可以\"]},\"3722\":{\"h\":\"3-3. 副本集环境\"},\"3723\":{\"h\":\"1. 认证的内容\",\"t\":[\"对于副本集，有两个地方需要进行权限认证：\",\"authorization：用户认证，和单实例的用户登录认证类似\",\"keyFile：节点成员内部认证，副本集和共享集群的各个节点成员之间使用内部身份验证，一般采用的认证方式是x.509证书。 \",\"原理：集群中每一个实例彼此连接的时候都检验彼此使用的证书的内容是否相同。 只有证书相同的实例彼此才可以访问\"]},\"3724\":{\"h\":\"2. 添加账号\",\"t\":[\"登录主节点，添加一个管理员账号。 只需要在主节点上添加用户，副本集会自动同步。\",\"myrs [direct:primary] test> use admin myrs [direct:primary] admin> db.createUser({ user:\\\"root\\\",pwd:\\\"23cx@fdw\\\",roles:[\\\"root\\\"] }) \"]},\"3725\":{\"h\":\"3. 创建x.509证书\"},\"3726\":{\"h\":\"3.1 通过openssl生成证书\",\"t\":[\"可以使用任何方法生成密钥文件，这里采用openssl生成密码文件。\",\"# 在当前目录生成证书 openssl rand -base64 90 > ./mongo.keyfile # 修改证书权限 chmod 400 mongo.keyfile \"]},\"3727\":{\"h\":\"3.2 复制证书\",\"t\":[\"赋值该证书到所有节点所在的设备，保证所有的副本集节点都使用同一份证书。\",\"当前是在一台设备上模拟的副本集，因此拷贝到各自的目录即可：\",\"cp mongo.keyfile /opt/mongodb/sets/m27017/ cp mongo.keyfile /opt/mongodb/sets/m27018/ cp mongo.keyfile /opt/mongodb/sets/m27019/ \"]},\"3728\":{\"h\":\"4. 修改配置文件\",\"t\":[\"修改配置文件，添加开启authorization和keyFile鉴权的配置。\",\"security: #KeyFile鉴权文件 keyFile: /opt/mongodb/sets/m27017/mongo.keyfile #开启认证方式运行 authorization: enabled \",\"每个节点都要修改，注意证书路径。\"]},\"3729\":{\"h\":\"5. 连接副本集\",\"t\":[\"重启所有节点，并通过用户认证连接副本集。\"]},\"3730\":{\"h\":\"3-4. 分片集群环境\",\"t\":[\"提示\",\"TBD\"]},\"3731\":{\"h\":\"4-1. Compass\",\"t\":[\"提示\",\"关于Compass的介绍见：连接MongoDB\"]},\"3732\":{\"h\":\"Ⅰ. 连接方式\",\"t\":[\"共有两种连接方式：direct和replicaSet。\"]},\"3733\":{\"h\":\"1. direct\",\"t\":[\"直接连接mongodb服务，如果连接的对方是副本集，那么忽略他是副本集，直接连接。\"]},\"3734\":{\"h\":\"2. replicaSet\",\"t\":[\"以副本集的形式连接，连接的是整个副本集。\"]},\"3735\":{\"h\":\"3. 权限认证\",\"t\":[\"一般采用账户名密码的形式进行权限认证，在连接的时候，切换到Authentication选项卡，输入账户名密码即可。\",\"4-1-1\"]},\"3736\":{\"h\":\"Ⅱ. 连接单实例\",\"t\":[\"连接单实例，默认采用的就direct连接方式，非常简单。\",\"Comment info为：\",\"mongodb://blog:1234@159.75.225.162:27017/?authMechanism=DEFAULT \",\"4-1-2\"]},\"3737\":{\"h\":\"Ⅲ. 连接副本集\",\"t\":[\"注意\",\"需要先搭建好副本集，并且进行启动，除了主节点，连接其他节点需要进行初始化。\"]},\"3738\":{\"h\":\"1. 初始化前的连接\",\"t\":[\"在副本集初始化之前，是不能以副本集的形式连接的，只能以direct的形式连接副本集的主节点，并进行初始化。\",\"Comment info为：\",\"mongodb://159.75.225.162:27017/?directConnection=true \",\"如下：连接时需要勾选Direct Connection\",\"4-1-3\"]},\"3739\":{\"h\":\"2. 直连副本集\",\"t\":[\"前置条件\",\"连接前，需要对副本集进行初始化，添加好节点，保证host无误，方能进行连接。 也要提前配置好权限认证，并启动所有节点。\",\"直接连接副本集，就是以replicaSet的方式连接mongodb。\",\" 如上，需要添加多个host。\",\"Comment info为：\",\"mongodb://root:23cx%40fdw @159.75.225.162:27017,159.75.225.162:27018,159.75.225.162:27019 /?authMechanism=DEFAULT \"]},\"3740\":{\"h\":\"3. 只连接一个节点\",\"t\":[\"也可以以replicaSet的方式只连接一个节点。\",\"注意\",\"暂时意义不明\"]},\"3741\":{\"h\":\"Ⅳ. 连接分片集群\",\"t\":[\"相关信息\",\"TBD\"]},\"3742\":{\"h\":\"4-2. Java操作\",\"t\":[\"转移\",\"直接上手SpringBoot集成MongoDB。 Java单独操作MongoDB，暂时省略了。\"]},\"3743\":{\"h\":\"1. Maven\",\"t\":[\"使用MongoDB需要先导入驱动。 MongoDB默认是被SpringBoot管理的，使用SpringBoot可以不写版本号。\",\"<dependency> <groupId>org.mongodb</groupId> <artifactId>mongodb-driver-sync</artifactId> <version>4.9.1</version> </dependency> \",\"子依赖\\n该依赖会自动添加子依赖：bson和mongodb-driver-core\"]},\"3744\":{\"h\":\"4-3. SpringBoot集成\"},\"3745\":{\"h\":\"引入\"},\"3746\":{\"h\":\"1. Spring Data\",\"t\":[\"Spring的一个子项目，用于简化数据库访问，支持NoSQL和关系数据存储。其主要目标是使用数据库的访问变得方便快捷。\",\"Spring Data 致力于减少数据访问层 (DAO) 的开发量. 开发者唯一要做的，就只是声明持久层的接口，其他都交给 Spring Data JPA 来帮你完成！\"]},\"3747\":{\"h\":\"2. Spring Data MongoDB\",\"t\":[\"Spring Data MongDB 是Spring Data的下的一个模块，在SpringBoot中整合MongoDB就需要添加Spring Data MongDB的依赖。\"]},\"3748\":{\"h\":\"3. Maven\",\"t\":[\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-mongodb</artifactId> </dependency> \"]},\"3749\":{\"h\":\"yml配置\"},\"3750\":{\"h\":\"1. 通过host和port连接\",\"t\":[\"在application.yml文件中添加MongoDB的连接参数。\",\"spring: data: mongodb: host: 159.75.225.162 port: 27017 authentication-database: admin username: blog password: 1234 database: article \"]},\"3751\":{\"h\":\"2. 通过uri连接\",\"t\":[\"可以直接通过URI进行连接，对于副本集只能通过URI进行连接。\",\"spring: data: mongodb: uri: mongodb://root:23cx%40fdw@159.75.225.162:27017,159.75.225.162:27018,159.75.225.162:27019/ authentication-database: admin username: blog password: 1234 database: article \"]},\"3752\":{\"h\":\"操作方式\",\"t\":[\"提示\",\"TBD\"]},\"3753\":{\"h\":\"CURD\",\"t\":[\"提示\",\"TBD\"]},\"3754\":{\"h\":\"4-4. 使用示例\",\"t\":[\"提示\",\"TBD\"]},\"3755\":{\"h\":\"4-5. Debug\"},\"3756\":{\"h\":\"1. 数据损坏的修复\",\"t\":[\"注意\",\"如果采用了kill而非标准方式关闭了mongoDB服务，可能会产生数据损坏。\",\"删除lock文件： */data/db/*.lock\",\"修复数据：./mongod --repair --depath= */data/db\"]},\"3757\":{\"h\":\"2. 服务启动失败\",\"t\":[\"注意\",\"ERROR: child process failed, exited with error number 1 To see additional infor\",\"原因：配置文件中的一些路径出现问题\"]},\"3758\":{\"h\":\"Blocks\"},\"3759\":{\"h\":\"Cloud\"},\"3760\":{\"h\":\"Dev\"},\"3761\":{\"h\":\"Frame\"},\"3762\":{\"h\":\"Java\"},\"3763\":{\"h\":\"Other\"},\"3764\":{\"h\":\"Plugin\"},\"3765\":{\"h\":\"Service\"},\"3766\":{\"h\":\"Sql\"},\"3767\":{\"h\":\"1.入门\"},\"3768\":{\"h\":\"2.实用功能\"},\"3769\":{\"h\":\"3.基本运维\"},\"3770\":{\"h\":\"4.集成数据层\"},\"3771\":{\"h\":\"5.实用技术集成\"},\"3772\":{\"h\":\"X.dev\"},\"3773\":{\"h\":\"1.基础\"},\"3774\":{\"h\":\"3.异常处理\"},\"3775\":{\"h\":\"4.枚举与注解\"},\"3776\":{\"h\":\"5.多线程\"},\"3777\":{\"h\":\"6.集合\"},\"3778\":{\"h\":\"7.泛型\"},\"3779\":{\"h\":\"9.网络编程\"},\"3780\":{\"h\":\"3. Servlet\"},\"3781\":{\"h\":\"4. Filter Listener\"},\"3782\":{\"h\":\"5. Java前端\"},\"3783\":{\"h\":\"6.扩展内容\"},\"3784\":{\"h\":\"4.环境部署\"},\"3785\":{\"h\":\"5.底层原理\"},\"3786\":{\"h\":\"7.优化\"},\"3787\":{\"h\":\"1.基本操作\"},\"3788\":{\"h\":\"2.集群\"},\"3789\":{\"h\":\"3.安全认证\"},\"3790\":{\"h\":\"4.dev\"}},\"dirtCount\":0,\"index\":[[\"入门\",{\"0\":{\"3767\":1}}],[\"入口\",{\"0\":{\"1045\":1}}],[\"致力于减少数据访问层\",{\"1\":{\"3746\":1}}],[\"致命注意事项\",{\"1\":{\"3316\":1}}],[\"致命bug\",{\"0\":{\"390\":1}}],[\"账户描述信息\",{\"1\":{\"3707\":1}}],[\"账号\",{\"1\":{\"3304\":1,\"3305\":1}}],[\"账号密码的配置\",{\"1\":{\"418\":1}}],[\"压缩\",{\"1\":{\"3704\":2}}],[\"压缩解压缩\",{\"1\":{\"2200\":1}}],[\"认证的内容\",{\"0\":{\"3723\":1}}],[\"认证测试\",{\"0\":{\"3715\":1}}],[\"认证要同时设置服务器之间的内部认证方式\",{\"1\":{\"3693\":1}}],[\"认为\",{\"1\":{\"3532\":1}}],[\"司内部访问使用vpn等\",{\"1\":{\"3693\":1}}],[\"票数相同\",{\"1\":{\"3686\":1}}],[\"票数最高\",{\"1\":{\"3686\":1}}],[\"人工干预\",{\"1\":{\"3685\":1}}],[\"老的教程显示\",{\"1\":{\"3683\":1}}],[\"老写法\",{\"1\":{\"2369\":1,\"2371\":1,\"2377\":1}}],[\"刚加入的节点信息如下\",{\"1\":{\"3673\":1}}],[\"刚好是compareto方法的调用者\",{\"1\":{\"2413\":1}}],[\"权重值\",{\"1\":{\"3668\":1}}],[\"权限认证\",{\"0\":{\"3735\":1}}],[\"权限的管理都差不多一样\",{\"1\":{\"3712\":1}}],[\"权限描述\",{\"1\":{\"3704\":1}}],[\"权限由指定的数据库资源\",{\"1\":{\"3698\":1}}],[\"权限\",{\"0\":{\"3698\":1}}],[\"权限控制\",{\"1\":{\"1536\":1}}],[\"权限问题\",{\"0\":{\"1365\":1}}],[\"权限跟类一样\",{\"1\":{\"1320\":1}}],[\"权限范围介绍\",{\"0\":{\"1311\":1}}],[\"权限修饰符\",{\"0\":{\"1308\":1},\"1\":{\"1270\":1,\"1277\":2,\"1625\":1,\"2293\":2,\"2296\":2}}],[\"权限管理\",{\"1\":{\"54\":1}}],[\"稍等片刻\",{\"1\":{\"3664\":1}}],[\"仲裁节点和主节点拥有相同的副本集名称以组成副本集\",{\"1\":{\"3658\":1}}],[\"仲裁节点的配置文件和主节点配置文件相比只有一些目录和端口的配置不同\",{\"1\":{\"3658\":1}}],[\"仲裁者将永远是仲裁者\",{\"1\":{\"3646\":1}}],[\"仲裁者不需要专用硬件\",{\"1\":{\"3646\":1}}],[\"仲裁者不维护数据集\",{\"1\":{\"3646\":1}}],[\"仲裁者的目的是通过\",{\"1\":{\"3646\":1}}],[\"仲裁者额外说明\",{\"0\":{\"3646\":1}}],[\"仲裁者\",{\"1\":{\"3645\":1}}],[\"投票\",{\"0\":{\"3686\":1},\"1\":{\"3646\":1}}],[\"投影查询\",{\"0\":{\"3607\":1}}],[\"投影\",{\"1\":{\"3604\":1}}],[\"辅助\",{\"1\":{\"3644\":1}}],[\"辅助功能\",{\"0\":{\"131\":1}}],[\"次要\",{\"1\":{\"3644\":1}}],[\"次后放弃\",{\"1\":{\"3413\":1}}],[\"掉后\",{\"1\":{\"3642\":1}}],[\"掉用被代理类的conncetdb方法\",{\"1\":{\"2323\":1}}],[\"掉用非静态方法\",{\"1\":{\"1526\":1}}],[\"些情况下\",{\"1\":{\"3641\":1}}],[\"冗余和数据可用性\",{\"0\":{\"3640\":1}}],[\"步同步\",{\"1\":{\"3639\":1}}],[\"步骤\",{\"0\":{\"2887\":1},\"1\":{\"1668\":1}}],[\"步骤三\",{\"1\":{\"1500\":1}}],[\"步骤二\",{\"1\":{\"1500\":1}}],[\"步骤一\",{\"1\":{\"1500\":1}}],[\"步骤同idea\",{\"1\":{\"105\":1}}],[\"涵盖查询\",{\"0\":{\"3636\":1}}],[\"慎用\",{\"1\":{\"3600\":1}}],[\"慎用this充当同步监视器\",{\"1\":{\"1759\":1}}],[\"校对规则允许用户为字符串比较指定特定于语言的规则\",{\"1\":{\"3595\":1}}],[\"平台选linux\",{\"1\":{\"3560\":1}}],[\"平均的\",{\"0\":{\"2691\":1}}],[\"平均响应时长\",{\"1\":{\"287\":1}}],[\"举例\",{\"1\":{\"3548\":1}}],[\"嵌入文档\",{\"1\":{\"3545\":1}}],[\"嵌套集合\",{\"1\":{\"2467\":1,\"2471\":1}}],[\"嵌套的泛型成为了数据类型\",{\"1\":{\"1958\":1}}],[\"嵌套锁\",{\"0\":{\"1795\":1}}],[\"嵌套循环\",{\"0\":{\"1199\":1}}],[\"嵌套循环中的使用\",{\"0\":{\"1194\":1},\"1\":{\"1195\":1}}],[\"嵌套\",{\"1\":{\"1171\":1}}],[\"ﬁeld\",{\"1\":{\"3545\":1,\"3546\":1}}],[\"术语对比\",{\"1\":{\"3545\":1}}],[\"云服务一般采用以mongodb为核心的数据库架构\",{\"1\":{\"3543\":1}}],[\"云服务兴起\",{\"1\":{\"3543\":1}}],[\"物联网场景\",{\"1\":{\"3541\":1}}],[\"物流场景\",{\"1\":{\"3541\":1}}],[\"物理文件\",{\"1\":{\"3449\":1}}],[\"物理连接初始化的时候执行的sql\",{\"1\":{\"2674\":1}}],[\"社交场景\",{\"1\":{\"3541\":1}}],[\"适合\",{\"1\":{\"3541\":1}}],[\"适用于文本文件\",{\"1\":{\"2023\":1}}],[\"适用于类\",{\"1\":{\"1058\":1}}],[\"适用于localdate\",{\"1\":{\"734\":1}}],[\"灵活的文档模型\",{\"1\":{\"3538\":1}}],[\"丰富查询支持\",{\"1\":{\"3538\":1}}],[\"挂掉了从而选举出新的master\",{\"1\":{\"3532\":1}}],[\"挂哪个子类\",{\"1\":{\"1500\":1}}],[\"价格还有\",{\"1\":{\"3524\":1}}],[\"面试题\",{\"0\":{\"3522\":1}}],[\"面向数据库的api\",{\"1\":{\"2531\":1}}],[\"面向应用的api\",{\"1\":{\"2531\":1}}],[\"面向函数\",{\"1\":{\"2381\":1}}],[\"面向传输的众多\",{\"1\":{\"2111\":1}}],[\"面向接口编程\",{\"1\":{\"1509\":1}}],[\"面向过程\",{\"1\":{\"1250\":2}}],[\"面向过程与面向对象\",{\"0\":{\"1250\":1}}],[\"面向过程语言\",{\"1\":{\"1020\":1}}],[\"面向对象程序设计的重点是\",{\"1\":{\"1255\":1}}],[\"面向对象分析方法分析问题的思路和步骤\",{\"1\":{\"1252\":1}}],[\"面向对象的思想概述\",{\"0\":{\"1252\":1}}],[\"面向对象的三大特征\",{\"0\":{\"1251\":1}}],[\"面向对象更加强调运用人类在日常的思维逻辑中采用的思想方法与原则\",{\"1\":{\"1250\":1}}],[\"面向对象是相对于面向过程而言的\",{\"1\":{\"1250\":1}}],[\"面向对象语言对事物的体现都是以对象的形式\",{\"1\":{\"1820\":1}}],[\"面向对象语言\",{\"1\":{\"1020\":1}}],[\"面向对象\",{\"0\":{\"1249\":1},\"1\":{\"1013\":1,\"1250\":2}}],[\"逐渐增加\",{\"1\":{\"3514\":1}}],[\"逐渐积累一些通用的util类\",{\"1\":{\"2987\":1}}],[\"及\",{\"1\":{\"3513\":1}}],[\"及以上版本已经没有type这层概念了\",{\"1\":{\"3361\":1}}],[\"然而每个副本也会执行分析\",{\"1\":{\"3518\":1}}],[\"然而\",{\"1\":{\"3495\":1}}],[\"然后是\",{\"1\":{\"3611\":1}}],[\"然后定时\",{\"1\":{\"3527\":1}}],[\"然后选出第一个\",{\"1\":{\"3526\":1}}],[\"然后选择刚配置好的tomcat\",{\"1\":{\"2751\":1}}],[\"然后选择要添加web的模块\",{\"1\":{\"2733\":1}}],[\"然后选择相应的driverclassname\",{\"1\":{\"2674\":1}}],[\"然后有一个\",{\"1\":{\"3504\":1}}],[\"然后直接添加要扩展的词汇\",{\"1\":{\"3487\":1}}],[\"然后以es插件的形式使用\",{\"1\":{\"3477\":1}}],[\"然后这些大的段再被合并到更大的段\",{\"1\":{\"3457\":1}}],[\"然后这个数字再除以number\",{\"1\":{\"3400\":1}}],[\"然后返回文档的id\",{\"1\":{\"3422\":1}}],[\"然后执行下一个操作\",{\"1\":{\"3417\":1}}],[\"然后执行该方法\",{\"1\":{\"227\":1}}],[\"然后并行转发这些请求到托管在每个所需的主分片或者副本分片的节点上\",{\"1\":{\"3416\":1}}],[\"然后被并行的复制到对应的副本分片上\",{\"1\":{\"3388\":1}}],[\"然后进去插件\",{\"1\":{\"3383\":1}}],[\"然后进入要编译的java文件目录的路径中\",{\"1\":{\"1061\":1}}],[\"然后合并每个分片的结果到一个全局的结果集\",{\"1\":{\"3367\":1}}],[\"然后手动kill\",{\"1\":{\"3342\":1}}],[\"然后用该秘钥对数据进行加密\",{\"1\":{\"3295\":1}}],[\"然后用该代理对象取代原始对象\",{\"1\":{\"2320\":1}}],[\"然后实时地对数据进行搜索\",{\"1\":{\"3090\":1}}],[\"然后实现importbeandefinitionregistrar接口的方式定义bean\",{\"1\":{\"526\":1}}],[\"然后通过配置文件启动服务\",{\"1\":{\"3558\":1}}],[\"然后通过id获取对应的文档作为结果呈现\",{\"1\":{\"3427\":1}}],[\"然后通过文档id获取对应的文档作为结果呈现\",{\"1\":{\"3427\":1}}],[\"然后通过response响应给了浏览器\",{\"1\":{\"3049\":1}}],[\"然后通过一种算法算出他应该储存的位置\",{\"1\":{\"1890\":1}}],[\"然后servlet将数据交由\",{\"1\":{\"3007\":1}}],[\"然后放行去访问servlet\",{\"1\":{\"2947\":1}}],[\"然后设置location响应头\",{\"1\":{\"2907\":1}}],[\"然后使用关键字与es中文档保存的字段的值做匹配\",{\"1\":{\"3461\":1}}],[\"然后使用关键字进行索引\",{\"1\":{\"3459\":1}}],[\"然后使用请求转发器对象的forward方法进行转发\",{\"1\":{\"2900\":1}}],[\"然后使用该环境变量配置path\",{\"1\":{\"1031\":1}}],[\"然后获取字节输出流\",{\"1\":{\"2894\":1}}],[\"然后调用对象中的service方法\",{\"1\":{\"2785\":1}}],[\"然后就可以配置tomcat了\",{\"1\":{\"2746\":1}}],[\"然后就在配置文件中做一些配置\",{\"1\":{\"531\":1}}],[\"然后点击\",{\"1\":{\"2731\":1}}],[\"然后关闭连接\",{\"1\":{\"2682\":2}}],[\"然后在每个userid的值内\",{\"1\":{\"3620\":1}}],[\"然后在basedao类中\",{\"1\":{\"2651\":1}}],[\"然后在进行可视化处理了\",{\"1\":{\"301\":1}}],[\"然后继承dao接口\",{\"1\":{\"2642\":1}}],[\"然后继续进行输入操作\",{\"1\":{\"2118\":1}}],[\"然后把获取列名的方法改成获取列的别名的方法\",{\"1\":{\"2602\":1}}],[\"然后把你要用的bean都给你准备好\",{\"1\":{\"558\":1}}],[\"然后将文档返回给客户端\",{\"1\":{\"3410\":1}}],[\"然后将其发送给服务器\",{\"1\":{\"3295\":1}}],[\"然后将所有操作封装\",{\"1\":{\"2579\":1}}],[\"然后将集合元素按升序\",{\"1\":{\"1887\":1}}],[\"然后利用lambda的方式调用即可\",{\"1\":{\"2384\":1}}],[\"然后生成一个代表这个类的java\",{\"1\":{\"2274\":1}}],[\"然后断点下载的时候\",{\"1\":{\"2140\":1}}],[\"然后从断点处继续代码的执行\",{\"1\":{\"1800\":1}}],[\"然后才能对其进行读写\",{\"1\":{\"2240\":1}}],[\"然后才跟着票号\",{\"1\":{\"1755\":1}}],[\"然后才自增的\",{\"1\":{\"1141\":1}}],[\"然后重启\",{\"1\":{\"3332\":1}}],[\"然后重新加入cpu分配的队列\",{\"1\":{\"1729\":1}}],[\"然后重写接口中的compareto方法\",{\"1\":{\"744\":1}}],[\"然后为具体的业务创建子类继承该抽象类\",{\"1\":{\"1500\":1}}],[\"然后永久驻留内存的方式来解决\",{\"1\":{\"1487\":1}}],[\"然后赋值\",{\"1\":{\"1218\":1}}],[\"然后换行\",{\"1\":{\"1047\":1}}],[\"然后反复使用该对象\",{\"1\":{\"993\":1}}],[\"然后一次读取多个字符\",{\"1\":{\"815\":1}}],[\"然后加载这个文件\",{\"1\":{\"564\":1}}],[\"然后对bean进行属性设置\",{\"1\":{\"544\":1}}],[\"然后读取配置信息\",{\"1\":{\"514\":1}}],[\"然后缓存并返回\",{\"1\":{\"471\":1}}],[\"然后根据请求的手机号取出缓存中的验证码\",{\"1\":{\"469\":1}}],[\"然后全部加入bean\",{\"1\":{\"442\":1}}],[\"然后再添加节点\",{\"1\":{\"3675\":1}}],[\"然后再存放到list\",{\"1\":{\"2684\":1}}],[\"然后再调用map进行进一步的操作\",{\"1\":{\"2472\":1}}],[\"然后再调用创建文件或目录的方法进行创建\",{\"1\":{\"802\":1,\"2018\":1}}],[\"然后再将s1作为锁\",{\"1\":{\"1796\":1}}],[\"然后再将s2作为锁\",{\"1\":{\"1796\":1}}],[\"然后再重新加入cpu分配的队列\",{\"1\":{\"1729\":1}}],[\"然后再去真正的解决异常\",{\"1\":{\"1563\":1}}],[\"然后再进行赋值\",{\"1\":{\"1218\":1}}],[\"然后再进行计算\",{\"1\":{\"1111\":1}}],[\"然后再进行储值的\",{\"1\":{\"1098\":1}}],[\"然后再进行可视化的展示\",{\"1\":{\"341\":1}}],[\"然后再返回\",{\"1\":{\"514\":1}}],[\"然后再转换成指定的数据类型\",{\"1\":{\"454\":1}}],[\"然后再发送\",{\"1\":{\"453\":1}}],[\"然后再使用工具读取日志文件\",{\"1\":{\"300\":1}}],[\"然后配置服务端地址后\",{\"1\":{\"317\":1}}],[\"然后按照\",{\"1\":{\"256\":1}}],[\"然后会把项目部署到测试环境\",{\"1\":{\"39\":1}}],[\"然后\",{\"1\":{\"26\":1,\"987\":1,\"3516\":1}}],[\"乐观并发控制\",{\"0\":{\"3496\":1},\"1\":{\"3495\":1}}],[\"悲观并发控制\",{\"1\":{\"3495\":1}}],[\"促销场景下\",{\"1\":{\"3494\":1}}],[\"冲突产生原因\",{\"0\":{\"3493\":1}}],[\"冲上到下逐行执行\",{\"1\":{\"1165\":1}}],[\"城\",{\"1\":{\"3485\":1}}],[\"尔\",{\"1\":{\"3485\":1}}],[\"德\",{\"1\":{\"3485\":1}}],[\"德鲁伊\",{\"0\":{\"2670\":1}}],[\"班德尔城\",{\"1\":{\"3489\":1}}],[\"班德尔城是一个词语\",{\"1\":{\"3485\":1}}],[\"班德尔城好大\",{\"1\":{\"3485\":1,\"3489\":1}}],[\"班\",{\"1\":{\"3485\":1}}],[\"班级集合内的元素才是学生对象\",{\"1\":{\"2471\":1}}],[\"班级本身是学生数据集合\",{\"1\":{\"2469\":1}}],[\"国人\",{\"1\":{\"3482\":1}}],[\"国际标准码\",{\"1\":{\"2109\":1}}],[\"智能拆分\",{\"1\":{\"3481\":1}}],[\"科学计数法\",{\"1\":{\"3477\":1}}],[\"科学计数法形式\",{\"1\":{\"1093\":1}}],[\"罗马数字\",{\"1\":{\"3477\":1}}],[\"试\",{\"1\":{\"3476\":1}}],[\"试图读取不存在的文件\",{\"1\":{\"1561\":1}}],[\"刷写到\",{\"1\":{\"3450\":1}}],[\"刷新数据库\",{\"1\":{\"3571\":1}}],[\"刷新访问的页面\",{\"1\":{\"2782\":1}}],[\"刷新操作\",{\"1\":{\"2126\":1,\"2149\":1,\"2151\":1}}],[\"刷新流\",{\"1\":{\"2105\":1}}],[\"刷新该流的缓冲\",{\"1\":{\"826\":1}}],[\"刷新\",{\"1\":{\"820\":1,\"2801\":1,\"3449\":1}}],[\"近实时搜索\",{\"0\":{\"3450\":1}}],[\"近似\",{\"1\":{\"761\":1}}],[\"段的\",{\"1\":{\"3527\":1}}],[\"段的数量会越来越多\",{\"1\":{\"3515\":1}}],[\"段落\",{\"1\":{\"3459\":2}}],[\"段合并的计算量庞大\",{\"1\":{\"3515\":1}}],[\"段合并的时候会将那些旧的已删除文档从文件系统中清除\",{\"1\":{\"3458\":1}}],[\"段合并的时候\",{\"1\":{\"3447\":1}}],[\"段合并\",{\"0\":{\"3456\":1}}],[\"段是不可改变的\",{\"1\":{\"3447\":1}}],[\"词汇扩展\",{\"0\":{\"3484\":1}}],[\"词\",{\"1\":{\"3476\":1}}],[\"词干\",{\"1\":{\"3469\":1}}],[\"词项统计会对所有段的结果进行聚合\",{\"1\":{\"3445\":1}}],[\"词条按顺序通过每个\",{\"1\":{\"3464\":1}}],[\"词条也可以可以进行分词的\",{\"1\":{\"3435\":1}}],[\"词条\",{\"1\":{\"3435\":2,\"3462\":1}}],[\"词条的分词\",{\"0\":{\"3435\":1}}],[\"苹果和手机\",{\"1\":{\"3435\":1}}],[\"苹果手机\",{\"1\":{\"3164\":1}}],[\"矩阵的具体数据结构\",{\"1\":{\"3427\":1}}],[\"矩阵解读\",{\"0\":{\"3426\":1}}],[\"纵向\",{\"1\":{\"3426\":1}}],[\"横向扩展应当分阶段进行\",{\"1\":{\"3508\":1}}],[\"横向\",{\"1\":{\"3426\":1}}],[\"星舰\",{\"1\":{\"3425\":1,\"3432\":1,\"3433\":1}}],[\"星舰下个月发射\",{\"1\":{\"3425\":1,\"3432\":1}}],[\"星期天\",{\"1\":{\"1616\":1}}],[\"星期一\",{\"1\":{\"1616\":1}}],[\"星期日用0表示\",{\"1\":{\"1176\":1}}],[\"星期四\",{\"1\":{\"734\":1}}],[\"星期\",{\"1\":{\"501\":2,\"1616\":1}}],[\"马斯克\",{\"1\":{\"3425\":1,\"3426\":1,\"3432\":1,\"3433\":1,\"3436\":1}}],[\"马斯克说将亲自指挥星舰的发射\",{\"1\":{\"3425\":1,\"3432\":1}}],[\"马斯克创建了spacex\",{\"1\":{\"3425\":1,\"3432\":1}}],[\"马化腾\",{\"1\":{\"2480\":1,\"2481\":1}}],[\"倒排列表记载了出现过某个单词的所有文档的文档列表及单词在该文档中出现的位置信息\",{\"1\":{\"3431\":1}}],[\"倒排列表\",{\"1\":{\"3431\":2,\"3432\":1,\"3433\":1}}],[\"倒排文件是存储倒排索引的物理文件\",{\"1\":{\"3431\":1}}],[\"倒排文件\",{\"1\":{\"3431\":2}}],[\"倒排索引被写入磁盘后是不可改变的\",{\"1\":{\"3440\":1}}],[\"倒排索引还有一个同义词\",{\"1\":{\"3436\":1}}],[\"倒排索引的简单实现示例\",{\"0\":{\"3432\":1}}],[\"倒排索引的结构\",{\"0\":{\"3430\":1}}],[\"倒排索引主要由两个部分组成\",{\"1\":{\"3431\":1}}],[\"倒排索引具体机构如下\",{\"1\":{\"3430\":1}}],[\"倒排索引是实现\",{\"1\":{\"3429\":1}}],[\"倒排索引\",{\"0\":{\"3418\":1,\"3428\":1},\"1\":{\"3427\":1,\"3429\":1,\"3430\":1,\"3462\":1}}],[\"倒序\",{\"1\":{\"3243\":1}}],[\"返\",{\"1\":{\"3415\":1}}],[\"返回包含状态信息的文档\",{\"1\":{\"3669\":1}}],[\"返回如下对象\",{\"1\":{\"3587\":1}}],[\"返回如下信息\",{\"1\":{\"3378\":1}}],[\"返回率\",{\"1\":{\"3462\":1}}],[\"返回更符合预期的内容\",{\"1\":{\"3436\":1}}],[\"返回授权信息\",{\"0\":{\"3328\":1},\"1\":{\"3325\":1}}],[\"返回验证信息\",{\"0\":{\"3305\":1},\"1\":{\"3304\":1}}],[\"返回验证码和检查验证码\",{\"1\":{\"471\":1}}],[\"返回查询方法可以多次调用\",{\"1\":{\"3236\":1}}],[\"返回了\",{\"1\":{\"3177\":1}}],[\"返回了一个新的stream\",{\"1\":{\"2463\":1}}],[\"返回了一个新集合\",{\"1\":{\"952\":1}}],[\"返回了一个值\",{\"1\":{\"975\":1,\"2392\":1}}],[\"返回命中的文档\",{\"1\":{\"3113\":1}}],[\"返回多条记录的dql方法\",{\"1\":{\"2653\":1}}],[\"返回多条数据\",{\"0\":{\"2606\":1}}],[\"返回一条记录的dql方法\",{\"1\":{\"2653\":1}}],[\"返回一个数据库连接\",{\"1\":{\"2675\":1}}],[\"返回一个扔掉了前\",{\"1\":{\"2461\":1}}],[\"返回一个并行流stream\",{\"1\":{\"2445\":1}}],[\"返回一个顺序流stream\",{\"1\":{\"2444\":1}}],[\"返回一个对象\",{\"1\":{\"2426\":1}}],[\"返回一个new的对象\",{\"1\":{\"2423\":1}}],[\"返回一个值\",{\"1\":{\"2407\":1}}],[\"返回一个代理类的对象\",{\"1\":{\"2342\":1}}],[\"返回一个字符串\",{\"1\":{\"2118\":1}}],[\"返回一个pattern对象\",{\"1\":{\"996\":1}}],[\"返回一个线程安全的同类集合\",{\"1\":{\"939\":1}}],[\"返回一个新的字符串\",{\"1\":{\"677\":1}}],[\"返回一个交换机\",{\"1\":{\"444\":1}}],[\"返回一个队列\",{\"1\":{\"444\":1}}],[\"返回一个\",{\"1\":{\"342\":1}}],[\"返回preparedstatement的实例\",{\"1\":{\"2573\":1,\"2577\":1,\"2581\":1,\"2653\":1}}],[\"返回path\",{\"1\":{\"2166\":1}}],[\"返回path对象包含整个路径\",{\"1\":{\"2166\":1}}],[\"返回set集合\",{\"1\":{\"2491\":1}}],[\"返回stringbuffer的长度\",{\"1\":{\"699\":1}}],[\"返回list集合\",{\"1\":{\"2491\":1}}],[\"返回工作最高的员工的工资\",{\"1\":{\"2483\":1}}],[\"返回流中最小值\",{\"0\":{\"2484\":1}}],[\"返回流中最大值\",{\"0\":{\"2483\":1}}],[\"返回流中元素总数\",{\"0\":{\"2482\":1}}],[\"返回员工总数\",{\"1\":{\"2482\":1}}],[\"返回第一个元素\",{\"0\":{\"2480\":1},\"1\":{\"2480\":1}}],[\"返回第一个参数的第二个参数次方\",{\"1\":{\"769\":1}}],[\"返回成了非嵌套集合\",{\"1\":{\"2467\":1}}],[\"返回被代理类的代理对象\",{\"1\":{\"2338\":1}}],[\"返回数据解析\",{\"0\":{\"3127\":1}}],[\"返回数据表中最大的生日\",{\"1\":{\"2655\":1,\"2656\":1}}],[\"返回数据表中的数据的条目数\",{\"1\":{\"2655\":1,\"2656\":1}}],[\"返回数据类型\",{\"1\":{\"2293\":1}}],[\"返回数据缓冲区\",{\"1\":{\"2234\":1}}],[\"返回将要发送或接收到的数据的长度\",{\"1\":{\"2234\":1}}],[\"返回某台远程主机的端口号\",{\"1\":{\"2234\":1}}],[\"返回某台机器的\",{\"1\":{\"2234\":1}}],[\"返回通信套接字对象\",{\"1\":{\"2221\":1}}],[\"返回ip地址字符串\",{\"1\":{\"2194\":1}}],[\"返回合并后的路径对应的path对象\",{\"1\":{\"2166\":1}}],[\"返回与调用\",{\"1\":{\"2166\":1}}],[\"返回与参数最接近的整数\",{\"1\":{\"766\":1}}],[\"返回调用\",{\"1\":{\"2166\":2}}],[\"返回读到的数据\",{\"1\":{\"2082\":1}}],[\"返回类型\",{\"1\":{\"1980\":1}}],[\"返回类的对象\",{\"1\":{\"1488\":1}}],[\"返回线程优先值\",{\"1\":{\"1735\":1}}],[\"返回执行当前代码的线程\",{\"1\":{\"1727\":1}}],[\"返回当前\",{\"1\":{\"2593\":1}}],[\"返回当前流中任意元素\",{\"0\":{\"2481\":1}}],[\"返回当前枚举类对象常量的名称\",{\"1\":{\"1627\":1}}],[\"返回当前运行时类的父类的class对象\",{\"1\":{\"841\":1}}],[\"返回枚举类型的对象数组\",{\"1\":{\"1627\":1}}],[\"返回字符串形式的属性名\",{\"1\":{\"2293\":1}}],[\"返回字符串\",{\"1\":{\"1589\":1}}],[\"返回字符串的长度\",{\"1\":{\"651\":1}}],[\"返回累的对象\",{\"1\":{\"1488\":1}}],[\"返回都是\",{\"1\":{\"1428\":1}}],[\"返回是\",{\"1\":{\"1428\":4}}],[\"返回该列的值\",{\"1\":{\"2591\":1}}],[\"返回该模式器的string类型的正则表达式\",{\"1\":{\"999\":1}}],[\"返回该类的类加载器\",{\"1\":{\"844\":1}}],[\"返回此socket对象的输出流\",{\"1\":{\"2220\":1}}],[\"返回此套接字的端口\",{\"1\":{\"2233\":1}}],[\"返回此套接字的输出流\",{\"1\":{\"2214\":1}}],[\"返回此套接字的输入流\",{\"1\":{\"2214\":1}}],[\"返回此套接字连接的地址\",{\"1\":{\"2233\":1}}],[\"返回此套接字绑定的本地主机上的端口号\",{\"1\":{\"2233\":1}}],[\"返回此套接字绑定到的本地端口\",{\"1\":{\"2214\":1}}],[\"返回此模式的匹配标志\",{\"1\":{\"997\":1}}],[\"返回此当前运行时类所表示的实体\",{\"1\":{\"840\":1}}],[\"返回所有k\",{\"1\":{\"971\":1}}],[\"返回所有key构成的set集合\",{\"1\":{\"969\":1}}],[\"返回所有value构成的set集合\",{\"1\":{\"970\":1}}],[\"返回map中key\",{\"1\":{\"966\":1}}],[\"返回从fromindex到toindex位置的左闭右开区间的子集合\",{\"1\":{\"952\":1}}],[\"返回两个index区间的元素\",{\"1\":{\"952\":1}}],[\"返回元素最后出现的位置\",{\"1\":{\"949\":1}}],[\"返回元素的索引\",{\"1\":{\"894\":1}}],[\"返回最小元素\",{\"1\":{\"935\":1}}],[\"返回给定集合中的最大元素\",{\"1\":{\"934\":1}}],[\"返回迭代器对象\",{\"1\":{\"919\":1}}],[\"返回false\",{\"1\":{\"802\":1,\"910\":1,\"1428\":1,\"1891\":1,\"1922\":1,\"2018\":1}}],[\"返回\",{\"1\":{\"785\":1,\"813\":1,\"948\":1,\"949\":1,\"1433\":1,\"2168\":1}}],[\"返回1\",{\"1\":{\"785\":1}}],[\"返回参数的自然数底数的对数值\",{\"1\":{\"769\":1}}],[\"返回自然数底数e的参数次方\",{\"1\":{\"769\":1}}],[\"返回小于等于\",{\"1\":{\"763\":1}}],[\"返回大于等于给定参数的最小整数\",{\"1\":{\"762\":1}}],[\"返回负整数\",{\"1\":{\"754\":1}}],[\"返回0\",{\"1\":{\"754\":1,\"785\":1,\"1904\":2}}],[\"返回正整数\",{\"1\":{\"754\":1}}],[\"返回指定长度的空数组\",{\"1\":{\"2431\":1}}],[\"返回指定uri对应的path路径\",{\"1\":{\"2167\":1}}],[\"返回指定索引位置\",{\"1\":{\"2166\":1}}],[\"返回指定索引处的字符\",{\"1\":{\"655\":1,\"697\":1}}],[\"返回指定集合中指定元素的出现次数\",{\"1\":{\"936\":1}}],[\"返回指定类名\",{\"1\":{\"838\":1}}],[\"返回指定字符串在此字符串第一次出现的索引\",{\"1\":{\"697\":1}}],[\"返回指定字符串在此字符串中第一次出现的索引\",{\"1\":{\"656\":1}}],[\"返回指定子字符串在此字符串中最后一次出现的索引\",{\"1\":{\"657\":1}}],[\"返回定义好的json格式数据\",{\"1\":{\"647\":1}}],[\"返回结果时使用平面几何的二维索引和返回结果时使用球面几何的二维球面索引\",{\"1\":{\"3621\":1}}],[\"返回结果如下\",{\"1\":{\"3283\":1}}],[\"返回结果集\",{\"1\":{\"2600\":1,\"2603\":1}}],[\"返回结果模型\",{\"1\":{\"646\":1}}],[\"返回结果模型类\",{\"0\":{\"646\":1}}],[\"返回结果都是list\",{\"1\":{\"410\":1}}],[\"返回拦截器\",{\"1\":{\"626\":1}}],[\"返回的结果很多\",{\"1\":{\"3635\":1}}],[\"返回的结果\",{\"1\":{\"3480\":1}}],[\"返回的结果是一样的\",{\"1\":{\"3136\":1}}],[\"返回的结果是int类型的\",{\"1\":{\"2293\":1}}],[\"返回的信息如下\",{\"1\":{\"3278\":1}}],[\"返回的id已经是自定义的id了\",{\"1\":{\"3136\":1}}],[\"返回的数据中members\",{\"1\":{\"3688\":1}}],[\"返回的数据格式类似于一个表格\",{\"1\":{\"3126\":1}}],[\"返回的数据类型未统一\",{\"1\":{\"643\":1}}],[\"返回的内容如下\",{\"1\":{\"3328\":1}}],[\"返回的内容是不一样的\",{\"1\":{\"2771\":1}}],[\"返回的内容都一样\",{\"1\":{\"1628\":1}}],[\"返回的实际上就是一张数据表\",{\"1\":{\"2587\":1}}],[\"返回的只有形参的类型\",{\"1\":{\"872\":1,\"2296\":1}}],[\"返回的是int\",{\"1\":{\"1735\":1}}],[\"返回的是arraylist\",{\"1\":{\"899\":1}}],[\"返回的是数组\",{\"1\":{\"873\":1,\"2296\":1}}],[\"返回的是新的字符串\",{\"1\":{\"665\":1}}],[\"返回的是依然是ipage对象\",{\"1\":{\"627\":1}}],[\"返回的是一个对象\",{\"1\":{\"404\":1,\"1542\":1}}],[\"返回的对象被加入到了bean\",{\"1\":{\"540\":1}}],[\"返回boolean\",{\"1\":{\"977\":1,\"2392\":1}}],[\"返回boolean类型的结果\",{\"1\":{\"424\":1,\"425\":1}}],[\"返回bean前进行加强操作\",{\"1\":{\"514\":1}}],[\"返回true\",{\"1\":{\"471\":1,\"910\":1,\"1891\":1,\"1922\":1}}],[\"返回绑定bean\",{\"1\":{\"441\":1}}],[\"返回交换器bean\",{\"1\":{\"441\":1}}],[\"返回队列bean\",{\"1\":{\"441\":1}}],[\"返回文档的所有数据\",{\"1\":{\"432\":1}}],[\"返回删除的条数\",{\"1\":{\"404\":1}}],[\"返回日志文件的内容\",{\"1\":{\"342\":1}}],[\"返回内容类型\",{\"1\":{\"337\":1}}],[\"返回值如下\",{\"1\":{\"3130\":1}}],[\"返回值的类型就是orm类\",{\"1\":{\"2605\":1}}],[\"返回值的描述\",{\"1\":{\"1060\":1}}],[\"返回值返回的是第一条语句的处理结果\",{\"1\":{\"2571\":1}}],[\"返回值也符合要求\",{\"1\":{\"2416\":1}}],[\"返回值就是读取的字符数\",{\"1\":{\"2054\":1}}],[\"返回值即为futuretask构造器参数callable实现类重写的call\",{\"1\":{\"1809\":1}}],[\"返回值void\",{\"1\":{\"1589\":1}}],[\"返回值类型前面<>不能使用\",{\"1\":{\"2003\":1}}],[\"返回值类型只能是局部内部类\",{\"1\":{\"1459\":1}}],[\"返回值类型用关键字void表示\",{\"1\":{\"1281\":1}}],[\"返回值类型\",{\"1\":{\"1277\":1,\"1285\":1,\"1481\":1,\"1536\":1,\"2296\":2}}],[\"返回值类型是optional对象\",{\"1\":{\"2480\":1}}],[\"返回值类型是被反序列化对象的类\",{\"1\":{\"2148\":1}}],[\"返回值类型是对象r\",{\"1\":{\"976\":1,\"2392\":1}}],[\"返回值类型是\",{\"1\":{\"852\":1,\"853\":1}}],[\"返回值类型是double\",{\"1\":{\"762\":1}}],[\"返回值是怎么获取的\",{\"1\":{\"2381\":1}}],[\"返回值是char的ascii码\",{\"1\":{\"2049\":1}}],[\"返回值是boolean\",{\"1\":{\"950\":1}}],[\"返回值是被移除的元素\",{\"1\":{\"950\":1}}],[\"返回值是0~3的int数字\",{\"1\":{\"861\":1,\"869\":1}}],[\"返回值是字符数\",{\"1\":{\"814\":2}}],[\"返回值是一个伪随机数\",{\"1\":{\"761\":1}}],[\"返回值是个字符串数组\",{\"1\":{\"682\":1,\"992\":1}}],[\"返回值\",{\"0\":{\"1373\":1},\"1\":{\"404\":1,\"406\":1,\"409\":1,\"410\":1,\"660\":1,\"682\":1,\"856\":1,\"857\":1,\"864\":1,\"874\":1,\"894\":1,\"946\":1,\"951\":1,\"992\":1,\"1000\":1,\"1060\":1,\"1277\":2,\"2082\":1,\"2293\":3,\"2295\":2,\"2296\":6,\"2314\":1,\"2338\":1,\"2399\":1,\"2410\":1,\"2487\":1,\"2488\":1,\"2571\":1,\"2591\":1,\"2683\":1}}],[\"返回值为\",{\"1\":{\"128\":1}}],[\"返回值参数\",{\"1\":{\"26\":1}}],[\"道集群中任一文档位置\",{\"1\":{\"3403\":1}}],[\"恢复丢失的节点\",{\"1\":{\"3397\":1}}],[\"恢复每次dml操作的自动提交功能\",{\"1\":{\"2635\":1}}],[\"倍\",{\"1\":{\"3394\":1,\"3508\":1}}],[\"硬件\",{\"0\":{\"3500\":1}}],[\"硬件和使用场景\",{\"1\":{\"3393\":1}}],[\"硬盘\",{\"0\":{\"3501\":1}}],[\"硬盘上没有这个文件也可以\",{\"1\":{\"2010\":1}}],[\"硬盘才是储存数据的\",{\"1\":{\"1696\":1}}],[\"副节点的配置文件和主节点配置文件相比只有一些目录和端口的配置不同\",{\"1\":{\"3657\":1}}],[\"副节点目录\",{\"1\":{\"3653\":1}}],[\"副节点\",{\"1\":{\"3652\":1}}],[\"副分片更新完后\",{\"1\":{\"3444\":1}}],[\"副分片三个\",{\"1\":{\"3392\":1}}],[\"副本节点和主节点拥有相同的副本集名称以组成副本集\",{\"1\":{\"3657\":1}}],[\"副本节点越多\",{\"1\":{\"3518\":1}}],[\"副本成员\",{\"1\":{\"3645\":1}}],[\"副本集会自动同步\",{\"1\":{\"3724\":1}}],[\"副本集和共享集群的各个节点成员之间使用内部身份验证\",{\"1\":{\"3723\":1}}],[\"副本集环境\",{\"0\":{\"3722\":1}}],[\"副本集就真正创建成功了\",{\"1\":{\"3672\":1}}],[\"副本集成员数组\",{\"1\":{\"3668\":1,\"3671\":1}}],[\"副本集初始化后\",{\"1\":{\"3665\":1}}],[\"副本集初始化结果\",{\"0\":{\"3664\":1}}],[\"副本集初始化的时候\",{\"1\":{\"3656\":1}}],[\"副本集的名字\",{\"1\":{\"3671\":1}}],[\"副本集的名称\",{\"1\":{\"3656\":1}}],[\"副本集的参数配置\",{\"1\":{\"3668\":1}}],[\"副本集的配置数据存储的主键值\",{\"1\":{\"3668\":1}}],[\"副本集的类型和角色\",{\"0\":{\"3643\":1}}],[\"副本集配置的查看命令\",{\"1\":{\"3666\":1}}],[\"副本集配置\",{\"1\":{\"3656\":1}}],[\"副本集设计\",{\"0\":{\"3650\":1}}],[\"副本集架构示例\",{\"0\":{\"3647\":1}}],[\"副本集有两种类型三种角色\",{\"1\":{\"3643\":1}}],[\"副本集总有一个活跃点\",{\"1\":{\"3642\":1}}],[\"副本集只能有一个主要能够确认具有\",{\"1\":{\"3641\":1}}],[\"副本集包含多个数据承载节点和可选的一个仲裁节点\",{\"1\":{\"3641\":1}}],[\"副本集是一组维护相同数据集的mongod实例\",{\"1\":{\"3641\":1}}],[\"副本集类似于有自动故障恢复功能的主从集群\",{\"1\":{\"3639\":1}}],[\"副本集可提供冗余和高\",{\"1\":{\"3639\":1}}],[\"副本集\",{\"0\":{\"3638\":1}}],[\"副本数+1\",{\"1\":{\"3508\":1}}],[\"副本数量可以动态更改\",{\"1\":{\"3506\":1}}],[\"副本数量1\",{\"1\":{\"3381\":1}}],[\"副本数量也不是和节点关联的\",{\"1\":{\"3373\":1}}],[\"副本数量\",{\"1\":{\"3127\":1,\"3508\":1}}],[\"副本和节点最大数之间数量\",{\"1\":{\"3508\":1}}],[\"副本的更改\",{\"0\":{\"3414\":1}}],[\"副本分片可能会报告文档不存在\",{\"1\":{\"3411\":1}}],[\"副本分片所处理\",{\"1\":{\"3393\":1}}],[\"副本跟被复制的分片肯定是不能在同一个节点的\",{\"1\":{\"3373\":1}}],[\"副本也可以提高性能\",{\"1\":{\"3368\":1}}],[\"副本\",{\"0\":{\"3368\":1},\"1\":{\"3368\":1,\"3373\":1,\"3518\":1,\"3640\":1}}],[\"水平扩容指的是\",{\"1\":{\"3389\":1}}],[\"水平扩容\",{\"0\":{\"3389\":1}}],[\"吞吐量\",{\"1\":{\"3365\":1,\"3368\":1}}],[\"地理空间索引\",{\"1\":{\"3621\":1}}],[\"地点等功能\",{\"1\":{\"3541\":1}}],[\"地名处理\",{\"1\":{\"3477\":1}}],[\"地图等\",{\"1\":{\"3350\":1}}],[\"地址请求\",{\"1\":{\"3144\":1}}],[\"地址栏发生变化\",{\"1\":{\"2913\":1}}],[\"地址和发送方机器上的端口号\",{\"1\":{\"2233\":1}}],[\"地址和远程主机的端口号\",{\"1\":{\"2233\":1}}],[\"地址由内核选择\",{\"1\":{\"2233\":1}}],[\"地址由内核来选择\",{\"1\":{\"2233\":1}}],[\"地址为\",{\"1\":{\"2233\":1}}],[\"地址或端口号构造\",{\"1\":{\"2217\":1}}],[\"地址的指定端口号\",{\"1\":{\"2212\":1}}],[\"地址的组合得出一个网络套接字\",{\"1\":{\"2187\":1}}],[\"地址不同\",{\"1\":{\"1426\":2}}],[\"地址值\",{\"1\":{\"1241\":1,\"1552\":1}}],[\"地址示例\",{\"1\":{\"1029\":1}}],[\"地址一样\",{\"1\":{\"473\":1}}],[\"地址\",{\"1\":{\"97\":1,\"2189\":1,\"2214\":1,\"2234\":1,\"2244\":2,\"2275\":1,\"2711\":1,\"3269\":1,\"3270\":1,\"3271\":1}}],[\"地址管理\",{\"1\":{\"54\":1}}],[\"停止响应造成大面积延迟\",{\"1\":{\"3532\":1}}],[\"停止es运行\",{\"1\":{\"3342\":1}}],[\"停售\",{\"1\":{\"54\":1}}],[\"谁来作为备选主节点\",{\"1\":{\"3337\":1}}],[\"谁声明在下无所谓\",{\"1\":{\"1594\":1}}],[\"拷贝node\",{\"1\":{\"3335\":1}}],[\"ℹ️\",{\"1\":{\"3328\":4}}],[\"━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\",{\"1\":{\"3328\":2}}],[\"━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\",{\"1\":{\"3305\":1}}],[\"━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\",{\"1\":{\"3305\":1}}],[\"尝试对中文进行分词处理\",{\"1\":{\"3476\":1}}],[\"尝试了10个小时\",{\"1\":{\"3316\":1}}],[\"尝试捕获异常\",{\"1\":{\"1587\":1}}],[\"尝试捕获空指针异常\",{\"1\":{\"1587\":1}}],[\"尝试捕获数值类型异常\",{\"1\":{\"1587\":1}}],[\"忘记密码\",{\"0\":{\"3315\":1}}],[\"守护进程\",{\"0\":{\"3310\":1,\"3342\":1}}],[\"守护线程\",{\"1\":{\"1711\":1}}],[\"激活安全验证能模块\",{\"1\":{\"3307\":1,\"3327\":1}}],[\"✅\",{\"1\":{\"3305\":2,\"3328\":2}}],[\"备份mongodb数据最小的权限\",{\"1\":{\"3704\":1}}],[\"备份恢复角色\",{\"1\":{\"3703\":1}}],[\"备份数\",{\"1\":{\"3373\":1}}],[\"备份\",{\"1\":{\"3301\":1}}],[\"备注\",{\"0\":{\"1721\":1},\"1\":{\"1051\":1,\"2354\":1}}],[\"绑定证书\",{\"1\":{\"3298\":1}}],[\"绑定数据\",{\"1\":{\"3039\":1}}],[\"签发的证书属于自认证证书\",{\"1\":{\"3298\":1}}],[\"签发http证书\",{\"0\":{\"3298\":1}}],[\"签发\",{\"1\":{\"3296\":2}}],[\"签发ca证书\",{\"0\":{\"3296\":1}}],[\"签名文件\",{\"1\":{\"3427\":1}}],[\"签名\",{\"1\":{\"3294\":1}}],[\"千万不要再签发证书了\",{\"1\":{\"3285\":1}}],[\"留给集群足够的时间\",{\"1\":{\"3276\":1}}],[\"留空\",{\"1\":{\"501\":1}}],[\"般出于高性能及高可用方面来考虑集群中节点数量都是\",{\"1\":{\"3259\":1}}],[\"五个指标\",{\"1\":{\"3187\":1,\"3188\":1,\"3247\":1,\"3248\":1}}],[\"升序\",{\"1\":{\"3185\":1}}],[\"降序索引\",{\"1\":{\"3619\":1}}],[\"降序\",{\"1\":{\"3185\":1}}],[\"降低每个索引的刷新频率\",{\"1\":{\"3453\":1}}],[\"降低查询开销\",{\"1\":{\"3114\":1}}],[\"降低资源消耗\",{\"1\":{\"1813\":1}}],[\"降低了多态的范围\",{\"1\":{\"1987\":1}}],[\"降低了程序的耦合性\",{\"1\":{\"1537\":1}}],[\"降低了配置书写量\",{\"1\":{\"280\":1}}],[\"降低数据库的读取\",{\"1\":{\"460\":1}}],[\"米\",{\"1\":{\"3180\":1,\"3194\":1}}],[\"红米\",{\"1\":{\"3176\":1,\"3177\":1}}],[\"红黑树结构存储数据\",{\"1\":{\"1933\":1}}],[\"红黑树的形成\",{\"1\":{\"1926\":1}}],[\"红黑树\",{\"1\":{\"1887\":1,\"1914\":1}}],[\"据进行删除\",{\"1\":{\"3152\":1}}],[\"据说是集dbcp\",{\"1\":{\"2668\":1}}],[\"耗时ms\",{\"1\":{\"3154\":1}}],[\"耗时\",{\"1\":{\"3142\":1,\"3160\":1,\"3220\":1,\"3221\":1}}],[\"耗时大致分别为\",{\"1\":{\"695\":1}}],[\"片\",{\"1\":{\"3119\":1}}],[\"片段名\",{\"1\":{\"2237\":2}}],[\"情感分析\",{\"1\":{\"3114\":1}}],[\"情况三\",{\"0\":{\"2411\":1,\"2414\":1}}],[\"情况二\",{\"0\":{\"2408\":1}}],[\"情况3\",{\"1\":{\"1246\":1,\"1891\":1,\"1922\":2,\"2398\":1,\"2400\":1}}],[\"情况2\",{\"1\":{\"1246\":1,\"1891\":1,\"1922\":1,\"2398\":1}}],[\"情况1和2\",{\"1\":{\"2400\":1}}],[\"情况1\",{\"0\":{\"2402\":1,\"2405\":1},\"1\":{\"1246\":1,\"1891\":1,\"1922\":1,\"2398\":1}}],[\"易用\",{\"1\":{\"3114\":1}}],[\"易变的部分\",{\"1\":{\"1499\":1}}],[\"易变部分可以抽象出来\",{\"1\":{\"1498\":1}}],[\"失败了\",{\"1\":{\"3316\":1}}],[\"失败\",{\"1\":{\"3110\":1,\"3164\":1}}],[\"失去了移植性\",{\"1\":{\"2545\":1,\"2546\":1}}],[\"失去了面向过程\",{\"1\":{\"2381\":1}}],[\"证书会自动创建\",{\"1\":{\"3304\":1}}],[\"证书位置\",{\"1\":{\"3298\":1}}],[\"证书就生成好了\",{\"1\":{\"3298\":1}}],[\"证书的生效时间\",{\"1\":{\"3298\":1}}],[\"证书时有两次交互\",{\"1\":{\"3296\":1}}],[\"证书是用来进行身份验证\",{\"1\":{\"3292\":1,\"3326\":1}}],[\"证书是自动创建的\",{\"1\":{\"3292\":1,\"3326\":1}}],[\"证书\",{\"1\":{\"3110\":1,\"3285\":1,\"3293\":1,\"3294\":1,\"3296\":1}}],[\"插件查看集群情况\",{\"1\":{\"3394\":1}}],[\"插件\",{\"1\":{\"3335\":1}}],[\"插件目录\",{\"1\":{\"3106\":1,\"3289\":1,\"3320\":1}}],[\"插入成功\",{\"1\":{\"3682\":1}}],[\"插入时指定了\",{\"1\":{\"3591\":1}}],[\"插入当前日期使用\",{\"1\":{\"3588\":1}}],[\"插入的数据没有指定\",{\"1\":{\"3588\":1}}],[\"插入的数据就会被映射限制\",{\"1\":{\"3200\":1}}],[\"插入的时候要指定文档所在的index\",{\"1\":{\"428\":1}}],[\"插入数据成功后\",{\"1\":{\"3682\":1}}],[\"插入数据\",{\"1\":{\"2655\":1,\"2656\":1}}],[\"插入数据等操作\",{\"1\":{\"1822\":1}}],[\"插入blob类型\",{\"1\":{\"2611\":1}}],[\"插入blob类型的数据必须使用preparedstatement\",{\"1\":{\"2608\":1}}],[\"插入效果\",{\"1\":{\"2138\":1}}],[\"插入就变成了更新\",{\"1\":{\"428\":1}}],[\"插入\",{\"0\":{\"428\":1},\"1\":{\"2683\":2}}],[\"插入一条数据\",{\"1\":{\"3682\":1}}],[\"插入一条文档\",{\"1\":{\"402\":1}}],[\"插入一个文档\",{\"0\":{\"403\":1}}],[\"插入多条文档\",{\"1\":{\"402\":1}}],[\"阿里\",{\"1\":{\"3094\":1}}],[\"阿里云短信服务\",{\"0\":{\"611\":1}}],[\"亿文档数据的索引占据\",{\"1\":{\"3365\":1}}],[\"亿条实时日志\",{\"1\":{\"3094\":1}}],[\"亿用户提供即时而精准的音乐搜索\",{\"1\":{\"3094\":1}}],[\"百度类的网站搜索\",{\"1\":{\"3096\":1}}],[\"百度\",{\"1\":{\"3094\":1}}],[\"维基百科\",{\"1\":{\"3094\":1}}],[\"搜索实时性等因素\",{\"1\":{\"3512\":1}}],[\"搜索也就越慢\",{\"1\":{\"3456\":1}}],[\"搜索苹果的时候可能不会出现苹果手机\",{\"1\":{\"3435\":1}}],[\"搜索的流程\",{\"0\":{\"3529\":1}}],[\"搜索的过程是直接通过索引拿到关键字对应的文档id\",{\"1\":{\"3427\":1}}],[\"搜索的过程是遍历每一个文档\",{\"1\":{\"3427\":1}}],[\"搜索的数据对象是大量的非结构化的文本数据\",{\"1\":{\"3098\":1}}],[\"搜索引擎会把正向索引变为反向索引\",{\"1\":{\"3430\":1}}],[\"搜索引擎会扫描库中包含该关键字的所有文档\",{\"1\":{\"3422\":1}}],[\"搜索引擎会扫描索引库中的所有文档\",{\"1\":{\"3420\":1}}],[\"搜索引擎的索引单位是单词\",{\"1\":{\"3431\":1}}],[\"搜索引擎的索引其实就是实现\",{\"1\":{\"3427\":1}}],[\"搜索引擎的索引\",{\"0\":{\"3427\":1}}],[\"搜索和返回数据\",{\"1\":{\"3393\":1}}],[\"搜索和分析海量数据\",{\"1\":{\"3089\":1}}],[\"搜索出的内容中的关键字会进行高亮显示\",{\"1\":{\"3192\":1,\"3251\":1}}],[\"搜索短语\",{\"1\":{\"3114\":1}}],[\"搜索\",{\"1\":{\"3094\":1,\"3360\":1,\"3459\":1}}],[\"市面上比较流行的是elasticsearch\",{\"1\":{\"3092\":1}}],[\"级别数据存储\",{\"1\":{\"3542\":1}}],[\"级别的数据\",{\"1\":{\"3091\":1}}],[\"级别指的是优先级\",{\"1\":{\"262\":1}}],[\"库与集合\",{\"0\":{\"3572\":1}}],[\"库引入了按段搜索的概念\",{\"1\":{\"3446\":1}}],[\"库\",{\"1\":{\"3084\":2,\"3115\":1,\"3118\":1,\"3132\":1,\"3196\":2}}],[\"记得删除data目录\",{\"1\":{\"3264\":1,\"3277\":1}}],[\"记住我功能\",{\"1\":{\"3078\":1}}],[\"记录了所有的文件的扩展名和和mime类型的对应关系\",{\"1\":{\"2933\":1}}],[\"记录指针与相关方法\",{\"0\":{\"2130\":1}}],[\"记录每次读入到cbuf数组中的字符的个数\",{\"1\":{\"2065\":1}}],[\"记录质数的个数\",{\"1\":{\"1204\":1}}],[\"记录个数\",{\"1\":{\"1189\":1}}],[\"记录总和\",{\"1\":{\"1189\":1}}],[\"记录负数的个数\",{\"1\":{\"1186\":1}}],[\"记录正数的个数\",{\"1\":{\"1186\":1}}],[\"记录错误堆栈信息\",{\"1\":{\"292\":1}}],[\"记录运维过程报警数据\",{\"1\":{\"292\":1}}],[\"记录运维过程数据\",{\"1\":{\"287\":1,\"292\":1}}],[\"记录应用报错信息\",{\"1\":{\"287\":1}}],[\"记录日常运营重要信息\",{\"1\":{\"287\":1}}],[\"记录日志\",{\"0\":{\"286\":1},\"1\":{\"288\":1,\"645\":1}}],[\"长期存储\",{\"1\":{\"3077\":1}}],[\"长度为n的数组合法下标取值范围\",{\"1\":{\"1220\":1}}],[\"长度无限制\",{\"1\":{\"1082\":1}}],[\"长度\",{\"1\":{\"299\":1,\"2234\":1,\"3195\":1}}],[\"张三\",{\"1\":{\"3054\":1}}],[\"张学良\",{\"1\":{\"2156\":1}}],[\"细化cookie的适用范围\",{\"1\":{\"3051\":1}}],[\"细节分类的信息包括\",{\"1\":{\"329\":1}}],[\"细节\",{\"0\":{\"329\":1}}],[\"细节补充\",{\"0\":{\"157\":1,\"1157\":1}}],[\"约束等\",{\"1\":{\"3195\":1}}],[\"约束自定义的studenttyep类型\",{\"1\":{\"3029\":1}}],[\"约束自定义的studentstype类型\",{\"1\":{\"3029\":1}}],[\"约束文档的技术实现\",{\"0\":{\"3023\":1}}],[\"约束\",{\"0\":{\"3021\":1}}],[\"约定\",{\"1\":{\"2008\":1}}],[\"约定俗称\",{\"1\":{\"1370\":1}}],[\"约定大于配置\",{\"1\":{\"562\":1}}],[\"展示数据\",{\"1\":{\"3002\":1}}],[\"展示运行的线程\",{\"1\":{\"329\":1}}],[\"界面展示\",{\"1\":{\"3002\":1}}],[\"绿色软件\",{\"1\":{\"3478\":1}}],[\"绿色的\",{\"1\":{\"2992\":1,\"3384\":1}}],[\"绿色启动按钮启动\",{\"1\":{\"2757\":1}}],[\"英文字母\",{\"1\":{\"3477\":1}}],[\"英文字母只用一个字节表示就够了\",{\"1\":{\"2111\":1}}],[\"英文是按照单词进行拆分的\",{\"1\":{\"3175\":1}}],[\"英语分析器附带了一组英语无用词\",{\"1\":{\"3469\":1}}],[\"英语\",{\"1\":{\"2979\":1}}],[\"浪费内存不算\",{\"1\":{\"3504\":1}}],[\"浪费时间\",{\"1\":{\"2976\":1}}],[\"浪费资源\",{\"1\":{\"2253\":1}}],[\"立即采取相应的行动\",{\"1\":{\"2958\":1}}],[\"立即消费消息\",{\"1\":{\"455\":1}}],[\"触发条件为\",{\"1\":{\"3685\":1}}],[\"触发的时机是定时触发\",{\"1\":{\"3527\":1}}],[\"触发了事件\",{\"1\":{\"2957\":1}}],[\"触发任务\",{\"1\":{\"499\":1}}],[\"足有4千行代码记录对照关系\",{\"1\":{\"2933\":1}}],[\"域\",{\"1\":{\"3545\":1}}],[\"域时\",{\"1\":{\"3470\":1}}],[\"域的范围\",{\"0\":{\"2937\":1}}],[\"域对象的属性域监听器\",{\"1\":{\"2960\":1}}],[\"域对象监听器\",{\"1\":{\"2960\":1}}],[\"域对象都有相同的三个方法\",{\"1\":{\"2936\":1}}],[\"域对象共有的方法\",{\"0\":{\"2926\":1}}],[\"域对象就是一个有作用范围的对象\",{\"1\":{\"2919\":1}}],[\"域对象\",{\"0\":{\"2917\":1,\"2918\":1},\"1\":{\"2901\":1,\"2929\":1}}],[\"域名或localhost\",{\"1\":{\"2711\":1}}],[\"域名服务器\",{\"1\":{\"2184\":1}}],[\"域名需要进行解析才能与ip地址对应\",{\"1\":{\"2184\":1}}],[\"域名\",{\"0\":{\"2184\":1},\"1\":{\"2189\":1,\"3051\":1,\"3298\":4}}],[\"爬山\",{\"1\":{\"2871\":1}}],[\"游戏场景\",{\"1\":{\"3541\":1}}],[\"游戏词汇测试\",{\"0\":{\"3485\":1}}],[\"游戏角色\",{\"1\":{\"3484\":1}}],[\"游泳\",{\"1\":{\"2871\":1}}],[\"游标\",{\"0\":{\"1839\":1}}],[\"体系结构\",{\"0\":{\"2805\":1}}],[\"体现了linkedlist的双向链表的说法\",{\"1\":{\"1874\":1}}],[\"体现了现实世界中\",{\"1\":{\"1506\":1}}],[\"体现多态性\",{\"1\":{\"1511\":1}}],[\"体现类及类的内部结构在被调用时的可见性的大小\",{\"1\":{\"1307\":1}}],[\"销毁方法\",{\"0\":{\"2802\":1}}],[\"阶段4\",{\"0\":{\"2798\":1}}],[\"阶段3\",{\"0\":{\"2797\":1}}],[\"阶段2\",{\"0\":{\"2796\":1}}],[\"阶段1\",{\"0\":{\"2793\":1}}],[\"`ikanalyzer\",{\"1\":{\"3488\":1}}],[\"```json\",{\"1\":{\"3476\":1}}],[\"`demo1`\",{\"1\":{\"2785\":1}}],[\"`web\",{\"1\":{\"2785\":1}}],[\"`order`\",{\"1\":{\"2582\":1}}],[\"观察集群信息\",{\"1\":{\"3277\":1}}],[\"观察者\",{\"1\":{\"2957\":2}}],[\"观察者模式\",{\"0\":{\"2957\":1}}],[\"观察可知\",{\"1\":{\"2801\":1}}],[\"观察启动后的命令行\",{\"1\":{\"2782\":1}}],[\"观察访问结果\",{\"1\":{\"2777\":1}}],[\"观察该文件\",{\"1\":{\"119\":1}}],[\"测\",{\"1\":{\"3476\":1}}],[\"测设\",{\"1\":{\"2777\":1}}],[\"测试扩展词汇\",{\"0\":{\"3489\":1}}],[\"测试单词\",{\"1\":{\"3476\":1,\"3480\":1}}],[\"测试单行数据查询\",{\"1\":{\"2657\":1}}],[\"测试的时候要注意\",{\"1\":{\"3071\":1}}],[\"测试的步骤\",{\"0\":{\"227\":1}}],[\"测试二\",{\"1\":{\"2691\":1}}],[\"测试一\",{\"1\":{\"2691\":1}}],[\"测试特殊查询\",{\"1\":{\"2657\":2}}],[\"测试多行数据查询\",{\"1\":{\"2657\":1}}],[\"测试更新\",{\"1\":{\"2657\":1}}],[\"测试删除\",{\"1\":{\"2657\":1}}],[\"测试添加\",{\"1\":{\"2657\":1}}],[\"测试是否断开\",{\"1\":{\"2207\":1}}],[\"测试是否可以达到该地址\",{\"0\":{\"2196\":1}}],[\"测试是否能连接es成功\",{\"1\":{\"419\":1}}],[\"测试super\",{\"1\":{\"2001\":1}}],[\"测试extends\",{\"1\":{\"2001\":1}}],[\"测试用\",{\"1\":{\"1621\":1}}],[\"测试此字符串是否以指定潜在开始\",{\"1\":{\"662\":1}}],[\"测试此字符串是否以指定的后缀结束\",{\"1\":{\"661\":1}}],[\"测试接口\",{\"0\":{\"642\":1}}],[\"测试数据表\",{\"0\":{\"2619\":1}}],[\"测试数据源\",{\"1\":{\"2457\":1,\"2462\":1}}],[\"测试数据abcdefg\",{\"1\":{\"623\":1}}],[\"测试数据123\",{\"1\":{\"623\":5}}],[\"测试依赖\",{\"0\":{\"594\":1}}],[\"测试效果\",{\"0\":{\"448\":1}}],[\"测试api\",{\"0\":{\"231\":1}}],[\"测试代码\",{\"0\":{\"3244\":1},\"1\":{\"226\":1}}],[\"测试类将无法运行\",{\"1\":{\"228\":1}}],[\"测试类默认的位置和引导类是对应的\",{\"1\":{\"228\":1}}],[\"测试类的目录规划\",{\"0\":{\"228\":1}}],[\"测试类\",{\"0\":{\"226\":1,\"623\":1}}],[\"测试使用容器\",{\"1\":{\"128\":1}}],[\"测试目录\",{\"1\":{\"98\":1}}],[\"测试环境一般是一台独立测试服务器的环境\",{\"1\":{\"39\":1}}],[\"测试环境\",{\"0\":{\"37\":1},\"1\":{\"35\":1,\"269\":1}}],[\"测试工程师\",{\"1\":{\"33\":1}}],[\"测试\",{\"0\":{\"30\":1,\"1622\":1,\"2782\":1,\"2911\":1},\"1\":{\"33\":1,\"3476\":1,\"3480\":1}}],[\"号来确保\",{\"1\":{\"3497\":1}}],[\"号来确保变更以正确顺序得到执行\",{\"1\":{\"3497\":1}}],[\"号后面的键值对\",{\"1\":{\"2845\":1}}],[\"号\",{\"1\":{\"2753\":1,\"3497\":1}}],[\"号通配符回车确认添加\",{\"1\":{\"103\":1}}],[\"填写项目名称\",{\"1\":{\"2737\":1,\"2741\":1}}],[\"填充占位符\",{\"0\":{\"2570\":1},\"1\":{\"2573\":1,\"2577\":1,\"2581\":1,\"2634\":1,\"2653\":1}}],[\"填充因子\",{\"1\":{\"1928\":2}}],[\"弹出框中选择需要运行程序入口main函数\",{\"1\":{\"2992\":1}}],[\"弹出如下窗口\",{\"1\":{\"2731\":1}}],[\"弹出命令行窗口\",{\"1\":{\"887\":1,\"1008\":1}}],[\"配合nginx代理\",{\"0\":{\"2718\":1}}],[\"配置其中\",{\"1\":{\"3488\":1}}],[\"配置扩展词典\",{\"0\":{\"3488\":1}}],[\"配置另外连个节点\",{\"0\":{\"3339\":1}}],[\"配置node\",{\"1\":{\"3335\":1}}],[\"配置指定一个master类型的节点列表\",{\"1\":{\"3273\":1}}],[\"配置指定端点\",{\"1\":{\"343\":1}}],[\"配置是当前节点的node\",{\"1\":{\"3268\":1}}],[\"配置节点\",{\"0\":{\"3268\":1}}],[\"配置内存\",{\"0\":{\"3265\":1}}],[\"配置服务器集群时\",{\"1\":{\"3259\":1}}],[\"配置目录\",{\"1\":{\"3106\":1,\"3289\":1,\"3320\":1}}],[\"配置拦截路径\",{\"0\":{\"2949\":1}}],[\"配置的节点组成\",{\"1\":{\"3374\":1}}],[\"配置的方法如下\",{\"1\":{\"3252\":1}}],[\"配置的是服务器内网ip\",{\"1\":{\"3562\":1}}],[\"配置的是\",{\"1\":{\"2846\":1}}],[\"配置的路径和访问的路径是一样的\",{\"1\":{\"2822\":1}}],[\"配置的url\",{\"1\":{\"2801\":1}}],[\"配置该servlet的访问路径\",{\"1\":{\"2780\":1}}],[\"配置路由用的是\",{\"1\":{\"2818\":1}}],[\"配置路由\",{\"0\":{\"2780\":1},\"1\":{\"2777\":1}}],[\"配置好一个节点\",{\"1\":{\"3277\":1}}],[\"配置好tomcat和servlet\",{\"1\":{\"2777\":1}}],[\"配置好后就可以直接在浏览器上访问spring\",{\"1\":{\"321\":1}}],[\"配置多个值\",{\"0\":{\"2951\":1}}],[\"配置多个tomcat\",{\"0\":{\"2752\":1}}],[\"配置多个客户端\",{\"0\":{\"327\":1}}],[\"配置tomcat服务器软件的目录\",{\"1\":{\"2750\":1}}],[\"配置tomcat模板\",{\"0\":{\"2754\":1},\"1\":{\"2745\":1}}],[\"配置tomcat\",{\"0\":{\"2744\":1}}],[\"配置输出文件的目录\",{\"1\":{\"2735\":1}}],[\"配置artifacts\",{\"0\":{\"2735\":1,\"2763\":1}}],[\"配置activemq的服务器地址\",{\"1\":{\"451\":1}}],[\"配置了ssl\",{\"1\":{\"3314\":1,\"3347\":1}}],[\"配置了maxwait之后\",{\"1\":{\"2674\":1}}],[\"配置了也没效果\",{\"1\":{\"2674\":1}}],[\"配置这个属性的意义在于\",{\"1\":{\"2674\":1}}],[\"配置idea\",{\"0\":{\"2354\":1}}],[\"配置idea和git\",{\"0\":{\"573\":1}}],[\"配置成最新的java版本环境变量即可\",{\"1\":{\"2353\":1}}],[\"配置参数值\",{\"1\":{\"1648\":1}}],[\"配置参数的类型\",{\"0\":{\"1646\":1}}],[\"配置参数\",{\"0\":{\"1645\":1}}],[\"配置参数名=\",{\"1\":{\"1648\":1}}],[\"配置参数名\",{\"1\":{\"1640\":1}}],[\"配置参数类型\",{\"1\":{\"1640\":1}}],[\"配置java\",{\"0\":{\"1031\":1}}],[\"配置端口号\",{\"1\":{\"617\":1}}],[\"配置代码模板\",{\"1\":{\"588\":1}}],[\"配置数据源\",{\"1\":{\"588\":1}}],[\"配置swagger\",{\"1\":{\"587\":1}}],[\"配置读取类\",{\"0\":{\"554\":1}}],[\"配置消息模型\",{\"1\":{\"451\":1}}],[\"配置rabbitmq服务器\",{\"1\":{\"439\":1}}],[\"配置es客户端\",{\"0\":{\"418\":1}}],[\"配置连接信息\",{\"0\":{\"362\":1,\"372\":1}}],[\"配置连接池\",{\"0\":{\"356\":1}}],[\"配置health端点\",{\"0\":{\"350\":1}}],[\"配置要显示的info信息\",{\"1\":{\"345\":1}}],[\"配置分为两类\",{\"1\":{\"343\":1}}],[\"配置显示的端点\",{\"0\":{\"343\":1}}],[\"配置显示什么种类的信息\",{\"1\":{\"326\":1}}],[\"配置项如下\",{\"1\":{\"2674\":1,\"2746\":1}}],[\"配置项\",{\"0\":{\"2674\":1,\"2820\":1}}],[\"配置项更简洁\",{\"1\":{\"388\":1}}],[\"配置项就是info\",{\"1\":{\"345\":1}}],[\"配置项有几百个\",{\"1\":{\"333\":1}}],[\"配置项是k\",{\"1\":{\"139\":1}}],[\"配置属性\",{\"0\":{\"333\":1}}],[\"配置格式变量\",{\"1\":{\"308\":1}}],[\"配置logback日志\",{\"0\":{\"307\":1}}],[\"配置日志格式\",{\"1\":{\"298\":1}}],[\"配置方式一样\",{\"1\":{\"2754\":1}}],[\"配置方式\",{\"0\":{\"267\":1}}],[\"配置很重要\",{\"1\":{\"217\":1}}],[\"配置类根据功能创建\",{\"1\":{\"442\":1}}],[\"配置类说明\",{\"0\":{\"442\":1}}],[\"配置类\",{\"0\":{\"444\":1},\"1\":{\"207\":1}}],[\"配置类统一管理\",{\"0\":{\"207\":1}}],[\"配置生效\",{\"0\":{\"159\":1}}],[\"配置yml\",{\"0\":{\"145\":1,\"583\":1}}],[\"配置文件的内容如下\",{\"1\":{\"3562\":1}}],[\"配置文件的级别\",{\"0\":{\"262\":1}}],[\"配置文件目录\",{\"1\":{\"3355\":1}}],[\"配置文件地址\",{\"1\":{\"2755\":1}}],[\"配置文件声明在工程的src目录下\",{\"1\":{\"2550\":1}}],[\"配置文件默认识别为\",{\"1\":{\"2282\":1}}],[\"配置文件后缀改为yml\",{\"1\":{\"616\":1}}],[\"配置文件中添加选项\",{\"1\":{\"3694\":1}}],[\"配置文件中是没有安全验证相关的代码的\",{\"1\":{\"3110\":1}}],[\"配置文件中没值可以直接抛出异常\",{\"1\":{\"556\":1}}],[\"配置文件中的一些路径出现问题\",{\"1\":{\"3757\":1}}],[\"配置文件中的属性值\",{\"1\":{\"217\":1}}],[\"配置文件中的属性\",{\"1\":{\"214\":1}}],[\"配置文件中的servers\",{\"1\":{\"211\":1}}],[\"配置文件中的命名格式与变量名的命名格式可以进行格式上的最大化兼容\",{\"1\":{\"210\":1}}],[\"配置文件中的哪个配置项\",{\"1\":{\"155\":1,\"200\":2}}],[\"配置文件不提供配置的话\",{\"1\":{\"551\":1}}],[\"配置文件可以是properties也可以是yml\",{\"1\":{\"545\":1}}],[\"配置文件如果发生改变\",{\"1\":{\"308\":1}}],[\"配置文件内容\",{\"0\":{\"308\":1}}],[\"配置文件控制日志格式\",{\"0\":{\"298\":1}}],[\"配置文件设置日志等级\",{\"0\":{\"294\":1}}],[\"配置文件设计\",{\"0\":{\"254\":1},\"1\":{\"45\":1}}],[\"配置文件名默认为\",{\"1\":{\"265\":1}}],[\"配置文件分类\",{\"0\":{\"261\":1}}],[\"配置文件已经设置好了\",{\"1\":{\"230\":1}}],[\"配置文件层级过多可能会导致相符覆盖最终引起配置失效\",{\"1\":{\"197\":1}}],[\"配置文件等\",{\"1\":{\"182\":1}}],[\"配置文件会被加载\",{\"1\":{\"165\":1}}],[\"配置文件\",{\"0\":{\"165\":1,\"617\":1,\"2550\":1,\"2673\":1,\"2755\":1,\"3302\":1},\"1\":{\"181\":1,\"210\":1,\"244\":1,\"245\":1,\"3022\":1,\"3268\":1,\"3561\":1,\"3651\":1,\"3654\":1}}],[\"配置文件没有小叶子的图标\",{\"1\":{\"143\":1}}],[\"配置文件介绍\",{\"0\":{\"136\":1}}],[\"配置完后重启idea\",{\"1\":{\"577\":1}}],[\"配置完后\",{\"1\":{\"96\":1}}],[\"配置完毕后\",{\"1\":{\"31\":1}}],[\"配置工程\",{\"0\":{\"96\":1,\"581\":1}}],[\"配置\",{\"0\":{\"578\":1,\"624\":1,\"3201\":1,\"3337\":1,\"3562\":1},\"1\":{\"31\":1,\"589\":1,\"2674\":1,\"2768\":1,\"3285\":1,\"3386\":1}}],[\"窗口一闪而过\",{\"0\":{\"2709\":1}}],[\"条记录\",{\"1\":{\"2686\":1,\"2687\":1}}],[\"条件连接查询\",{\"0\":{\"3616\":1}}],[\"条件\",{\"1\":{\"3601\":1,\"3616\":6}}],[\"条件删除\",{\"0\":{\"3152\":1}}],[\"条件表达式必须是布尔表达式\",{\"1\":{\"1172\":1}}],[\"条件表达式\",{\"1\":{\"1168\":1,\"1169\":1,\"1170\":3}}],[\"条件表达式的结果为boolean类型\",{\"1\":{\"1159\":1}}],[\"条件判断\",{\"1\":{\"1167\":1}}],[\"条件查询\",{\"0\":{\"629\":1,\"3161\":1,\"3227\":1},\"1\":{\"3227\":1}}],[\"何成飞\",{\"1\":{\"2686\":1}}],[\"何时需要多线程\",{\"0\":{\"1694\":1}}],[\"学习阶段可以暂时关闭ssl\",{\"1\":{\"3352\":1}}],[\"学习成本极低\",{\"1\":{\"2679\":1}}],[\"学这个之前了解下项目架构\",{\"1\":{\"11\":1}}],[\"申请连接的时候检测\",{\"1\":{\"2674\":1}}],[\"申请连接时执行validationquery检测连接是否有效\",{\"1\":{\"2674\":1}}],[\"归还连接时执行validationquery检测连接是否有效\",{\"1\":{\"2674\":1}}],[\"归还给了数据库连接池\",{\"1\":{\"2669\":1}}],[\"归约与收集\",{\"0\":{\"2486\":1}}],[\"归约\",{\"0\":{\"2487\":1},\"1\":{\"2456\":1}}],[\"稳定性较c3p0差一点\",{\"1\":{\"2668\":1}}],[\"稳定性还可以\",{\"1\":{\"2668\":1}}],[\"避免数据库连接泄漏\",{\"1\":{\"2667\":1}}],[\"避免某一应用独占所有的数据库资源\",{\"1\":{\"2667\":1}}],[\"避免了数据库连接初始化和释放过程的时间开销\",{\"1\":{\"2667\":1}}],[\"避免了频繁创建\",{\"1\":{\"2667\":1}}],[\"避免方法重载冲突\",{\"1\":{\"1297\":1}}],[\"严重的甚至会造成服务器的崩溃\",{\"1\":{\"2662\":1}}],[\"严重落后现有版本\",{\"1\":{\"84\":1,\"85\":1}}],[\"频繁的进行数据库连接操作将占用很多的系统资源\",{\"1\":{\"2662\":1}}],[\"频繁的哈希冲突会降低数据存取的效率\",{\"1\":{\"1900\":1}}],[\"得花费0\",{\"1\":{\"2662\":1}}],[\"得到浏览器发送给它的秘钥\",{\"1\":{\"3295\":1}}],[\"得到class文件\",{\"1\":{\"2991\":1}}],[\"得到一个值\",{\"1\":{\"2487\":1}}],[\"得到一个用户年龄流\",{\"1\":{\"2463\":1}}],[\"得到被代理类实现的全部接口\",{\"1\":{\"2338\":1}}],[\"得到在entry数组中的存放位置\",{\"1\":{\"1922\":1}}],[\"得到注解信息\",{\"1\":{\"1637\":1}}],[\"得到了目标类的class实例\",{\"1\":{\"837\":1}}],[\"得到的结果可能不一样\",{\"1\":{\"2695\":1}}],[\"得到的结果都是一样的\",{\"1\":{\"2695\":1}}],[\"得到的是一个内存地址值\",{\"1\":{\"1238\":1}}],[\"得到的\",{\"1\":{\"677\":1}}],[\"贝多芬\",{\"1\":{\"2657\":1}}],[\"于自动刷新流程每秒会创建一个新的段\",{\"1\":{\"3456\":1}}],[\"于2022年2月11日发布\",{\"1\":{\"3114\":1}}],[\"于小飞\",{\"1\":{\"2657\":1}}],[\"于是只能等待\",{\"1\":{\"1796\":1}}],[\"于是进入了确认支付环节\",{\"1\":{\"1754\":1}}],[\"于是人们想出了将符号位也参与运算的方法\",{\"1\":{\"1121\":1}}],[\"于是就把这些bean提前加载好了\",{\"1\":{\"559\":1}}],[\"于是\",{\"1\":{\"539\":1}}],[\"于是spring和spring\",{\"1\":{\"537\":1}}],[\"额外多关闭一个查询结果集资源\",{\"1\":{\"2652\":1}}],[\"额外还需要一个查询结果的储存类\",{\"1\":{\"2644\":1}}],[\"批处理\",{\"1\":{\"2683\":1}}],[\"批处理+手动提交\",{\"0\":{\"2625\":1}}],[\"批量更新\",{\"0\":{\"3597\":1}}],[\"批量数据提交\",{\"0\":{\"3514\":1}}],[\"批量删除文档\",{\"0\":{\"3221\":1},\"1\":{\"3221\":1}}],[\"批量新增文档\",{\"0\":{\"3220\":1},\"1\":{\"3220\":1}}],[\"批量插入两条文章评论\",{\"1\":{\"3590\":1}}],[\"批量插入\",{\"0\":{\"3589\":1},\"1\":{\"2614\":1}}],[\"批量insert\",{\"1\":{\"2614\":1}}],[\"批量操作\",{\"0\":{\"433\":1,\"2614\":1,\"3219\":1}}],[\"攒\",{\"1\":{\"2624\":1,\"2625\":1}}],[\"积分等直接以内嵌文档的形式存储\",{\"1\":{\"3541\":1}}],[\"积累jar包的过程也会考验代码的重构能力和模块的抽象能力\",{\"1\":{\"2987\":1}}],[\"积攒一波sql然后集中的去连接服务器执行\",{\"1\":{\"2622\":1}}],[\"积攒sql语句\",{\"0\":{\"2616\":1}}],[\"积压了发送的消息\",{\"1\":{\"448\":1}}],[\"袁浩\",{\"1\":{\"2612\":1}}],[\"别人可以选择不加\",{\"1\":{\"3694\":1}}],[\"别名\",{\"1\":{\"2602\":1,\"3124\":1,\"3211\":1}}],[\"别忘记关闭锁\",{\"1\":{\"1785\":1}}],[\"周期延长\",{\"1\":{\"3516\":1}}],[\"周杰伦\",{\"1\":{\"2601\":1}}],[\"周末是双休的\",{\"1\":{\"1176\":1}}],[\"莫扎特\",{\"1\":{\"2577\":1}}],[\"⑦关闭资源\",{\"1\":{\"2566\":1}}],[\"⑥注释\",{\"1\":{\"3020\":1}}],[\"⑥执行操作\",{\"1\":{\"2566\":1}}],[\"⑥获取callable中call方法的返回值\",{\"1\":{\"1809\":1}}],[\"繁琐\",{\"0\":{\"2558\":1}}],[\"弊端\",{\"1\":{\"2545\":1}}],[\"驱动\",{\"0\":{\"2680\":1}}],[\"驱动注册可以省略\",{\"1\":{\"2548\":1}}],[\"驱动会自动注册的\",{\"1\":{\"2548\":1}}],[\"驱动文件介绍\",{\"0\":{\"2537\":1}}],[\"驱动介绍\",{\"0\":{\"2535\":1}}],[\"固定主分片苏联\",{\"0\":{\"3401\":1}}],[\"固定部分\",{\"1\":{\"304\":1}}],[\"固化\",{\"1\":{\"2525\":1}}],[\"持久化变更\",{\"0\":{\"3455\":1}}],[\"持久化存储\",{\"1\":{\"3053\":1}}],[\"持久化的主要应用是将内存中的数据存储在关系型数据库中\",{\"1\":{\"2525\":1}}],[\"持久化\",{\"1\":{\"2525\":1}}],[\"持续\",{\"1\":{\"2234\":1}}],[\"钻石操作符<>的增强\",{\"0\":{\"2523\":1}}],[\"受到google\",{\"1\":{\"2496\":1}}],[\"受限于版本因素\",{\"1\":{\"393\":1}}],[\"臭名昭著的空指针异常是导致java应用程序失败的最常见原因\",{\"1\":{\"2496\":1}}],[\"ⅷ\",{\"0\":{\"2486\":1}}],[\"扎克伯格\",{\"1\":{\"2484\":1}}],[\"素材\",{\"0\":{\"2469\":1}}],[\"素数生成\",{\"1\":{\"777\":1}}],[\"姓名\",{\"1\":{\"2457\":1,\"2462\":1,\"3477\":1}}],[\"收入\",{\"1\":{\"2457\":1,\"2462\":1}}],[\"收集\",{\"0\":{\"2490\":1},\"1\":{\"2456\":1}}],[\"收到一些信息后展示这些信息\",{\"1\":{\"317\":1}}],[\"惰性求值\",{\"1\":{\"2453\":1}}],[\"终极方案\",{\"0\":{\"2625\":1}}],[\"终端操作\",{\"1\":{\"2440\":1}}],[\"终止操作的方法\",{\"0\":{\"2456\":1}}],[\"终止操作会从流的流水线生成结果\",{\"1\":{\"2455\":1}}],[\"终止操作说明\",{\"0\":{\"2455\":1}}],[\"终止操作\",{\"1\":{\"2440\":1}}],[\"终止此计时器\",{\"1\":{\"492\":1}}],[\"讲的是计算\",{\"1\":{\"2439\":1}}],[\"筛选工资>7000的员工\",{\"1\":{\"2458\":1}}],[\"筛选与切片\",{\"0\":{\"2457\":1},\"1\":{\"2454\":1}}],[\"筛选\",{\"0\":{\"2458\":1},\"1\":{\"2435\":1}}],[\"满足条件\",{\"1\":{\"2404\":1}}],[\"替代接口中的方法\",{\"1\":{\"2399\":1}}],[\"替换为直接引用\",{\"1\":{\"2275\":1}}],[\"替换结束为主的index\",{\"1\":{\"702\":1}}],[\"替换其实位置的index\",{\"1\":{\"702\":1}}],[\"替换此字符串匹配给定的正则表达式的第一个子字符串\",{\"1\":{\"680\":1}}],[\"替换此字符串所有匹配给定的正则表达式的子字符串\",{\"1\":{\"679\":1}}],[\"替换此字符串中出现的所有\",{\"1\":{\"677\":1}}],[\"替换手动下载的maven\",{\"1\":{\"574\":1}}],[\"替换别的服务器\",{\"0\":{\"135\":1}}],[\"寻找或定义一个参数符合的接口\",{\"1\":{\"2384\":1}}],[\"箭头函数\",{\"1\":{\"2357\":1}}],[\"着java的更新从传统的以特性驱动的发布周期\",{\"1\":{\"2351\":1}}],[\"清理data和logs目录\",{\"1\":{\"3335\":1}}],[\"清洗工厂等\",{\"1\":{\"2326\":1}}],[\"清空data和logs目录后\",{\"1\":{\"3338\":1}}],[\"清空logs目录\",{\"1\":{\"3264\":1,\"3277\":1}}],[\"清空\",{\"1\":{\"2624\":1}}],[\"清空缓存的数据\",{\"1\":{\"2618\":1}}],[\"清空batch\",{\"0\":{\"2618\":1},\"1\":{\"2625\":1}}],[\"清空当前map中的所有数据\",{\"1\":{\"962\":1}}],[\"清空集合\",{\"1\":{\"962\":1}}],[\"清空集合元素\",{\"1\":{\"908\":1}}],[\"清空购物车\",{\"1\":{\"54\":1}}],[\"链接数据库后\",{\"1\":{\"2321\":1}}],[\"链表的产生\",{\"0\":{\"1923\":1}}],[\"链表的形式\",{\"0\":{\"1893\":1}}],[\"唯一标识\",{\"1\":{\"3135\":1}}],[\"唯一的区别就是在\",{\"1\":{\"2981\":1}}],[\"唯一的区别是判断jvm何时离开\",{\"1\":{\"1711\":1}}],[\"唯一的标识\",{\"1\":{\"2179\":1}}],[\"唯一的优点是可以指定加载\",{\"1\":{\"517\":1}}],[\"唯有先获得相应的class对象\",{\"1\":{\"2263\":1}}],[\"器\",{\"1\":{\"2250\":1}}],[\"透过这个镜子看到类的结构\",{\"1\":{\"2248\":1}}],[\"甚至是\",{\"1\":{\"2455\":1}}],[\"甚至代码可以被引进\",{\"1\":{\"2247\":1}}],[\"甚至可能触发包冲突\",{\"1\":{\"516\":1}}],[\"乱序以及网络拥挤等问题\",{\"1\":{\"2244\":1}}],[\"乱码原因\",{\"0\":{\"2876\":1}}],[\"乱码问题\",{\"0\":{\"2874\":1}}],[\"乱码\",{\"1\":{\"1103\":1}}],[\"损坏\",{\"1\":{\"2244\":1}}],[\"客户机是一个用户应用程序\",{\"1\":{\"2244\":1}}],[\"客户的套接字请求\",{\"1\":{\"2224\":1}}],[\"客户端提交新的文档到集群\",{\"1\":{\"3444\":1}}],[\"客户端获取反馈\",{\"1\":{\"3407\":1}}],[\"客户端向协调节点\",{\"1\":{\"3416\":1,\"3417\":1}}],[\"客户端向\",{\"1\":{\"3407\":1,\"3410\":1,\"3413\":1}}],[\"客户端对象\",{\"0\":{\"3206\":1}}],[\"客户端会话技术\",{\"1\":{\"3038\":1}}],[\"客户端会话跟踪技术\",{\"1\":{\"3037\":1}}],[\"客户端发起请求\",{\"1\":{\"2831\":1}}],[\"客户端和服务器之间的每个通信会话使用一个不同的套接字\",{\"1\":{\"2244\":1}}],[\"客户端开始想服务端传输数据\",{\"1\":{\"2226\":1}}],[\"客户端开放信息\",{\"0\":{\"326\":1}}],[\"客户端通过服务端的ip和创建serversocket对象时指定的端口号\",{\"1\":{\"2223\":1}}],[\"客户端访问结束\",{\"1\":{\"2221\":1}}],[\"客户端程序可以使用socket类创建对象\",{\"1\":{\"2218\":1}}],[\"客户端创建socket对象\",{\"0\":{\"2218\":1}}],[\"客户端socket\",{\"0\":{\"2217\":1},\"1\":{\"2217\":1}}],[\"客户端需要ssl证书才能进行访问\",{\"1\":{\"417\":1}}],[\"客户端的其他配置\",{\"0\":{\"384\":1}}],[\"客户端的yml文件总进行配置\",{\"1\":{\"343\":1}}],[\"客户端默认什么信息都没开放\",{\"1\":{\"326\":1}}],[\"客户端配置\",{\"0\":{\"322\":1}}],[\"客户端\",{\"1\":{\"314\":2,\"2204\":1,\"2206\":1,\"2207\":2,\"2244\":1,\"3205\":1,\"3206\":2,\"3209\":2,\"3211\":2,\"3212\":2,\"3214\":2,\"3217\":2,\"3218\":2,\"3220\":2,\"3221\":2,\"3225\":2,\"3226\":2,\"3227\":2,\"3231\":2,\"3234\":2,\"3237\":2,\"3240\":2,\"3242\":2,\"3244\":2,\"3249\":2,\"3253\":2}}],[\"速度稍慢\",{\"1\":{\"2697\":1}}],[\"速度相对较慢\",{\"1\":{\"2668\":1}}],[\"速度相对c3p0较快\",{\"1\":{\"2668\":1}}],[\"速度快\",{\"1\":{\"2205\":1,\"2668\":1,\"2697\":1}}],[\"速度很快\",{\"1\":{\"1209\":1}}],[\"点赞互动信息等\",{\"1\":{\"3541\":1}}],[\"点对点通信\",{\"1\":{\"2204\":1}}],[\"点击new\",{\"1\":{\"3570\":1}}],[\"点击next\",{\"1\":{\"2737\":1,\"2741\":1}}],[\"点击菜单中\",{\"1\":{\"2992\":1}}],[\"点击main\",{\"1\":{\"2992\":1}}],[\"点击module选项卡\",{\"1\":{\"2790\":1}}],[\"点击create\",{\"1\":{\"2992\":1}}],[\"点击项目\",{\"1\":{\"2992\":1}}],[\"点击+\",{\"1\":{\"2753\":1}}],[\"点击+号\",{\"1\":{\"2733\":1,\"2743\":1,\"2747\":1,\"2766\":1}}],[\"点击ok\",{\"1\":{\"2751\":1,\"2992\":3}}],[\"点击该选项卡\",{\"1\":{\"2747\":1}}],[\"点击右边的configure进行配置\",{\"1\":{\"2750\":1}}],[\"点击右边的choose\",{\"1\":{\"2539\":1}}],[\"点击右上角的springboot引导类的运行界面\",{\"1\":{\"258\":1}}],[\"点击点击首页时\",{\"1\":{\"1563\":1}}],[\"点击打开index\",{\"1\":{\"1061\":1}}],[\"点击enter键完成输入\",{\"1\":{\"887\":1,\"1008\":1}}],[\"点击服务器选项就可以进去看到详情了\",{\"1\":{\"325\":1}}],[\"点击spring\",{\"1\":{\"123\":1}}],[\"点击parent的artifactid\",{\"1\":{\"118\":1}}],[\"点击\",{\"1\":{\"96\":2,\"2735\":1,\"2992\":1,\"3107\":1}}],[\"点击某个按钮\",{\"1\":{\"22\":1}}],[\"点击某个菜单\",{\"1\":{\"22\":1}}],[\"须先建立tcp连接\",{\"1\":{\"2204\":1}}],[\"须重写hashcode\",{\"1\":{\"1909\":1}}],[\"协调结点在每次请求的时候都会通过轮询所有的副本分片来达到负载均衡\",{\"1\":{\"3411\":1}}],[\"协调节点默认使用文档\",{\"1\":{\"3527\":1}}],[\"协调节点根据文档的\",{\"1\":{\"3444\":1}}],[\"协调节点将这些响应收集整理并返回给客户端\",{\"1\":{\"3417\":1}}],[\"协调节点将整个多文档请求分解成\",{\"1\":{\"3415\":1}}],[\"协调节点一旦收到来自每个节点的应答\",{\"1\":{\"3415\":1}}],[\"协调节点向客户端返回成\",{\"1\":{\"3413\":1}}],[\"协调节点向客户端报告成功\",{\"1\":{\"3407\":1}}],[\"协调节点的协调\",{\"0\":{\"3411\":1}}],[\"协调节点通过路由计算\",{\"1\":{\"3407\":1}}],[\"协调节点\",{\"0\":{\"3404\":1},\"1\":{\"3407\":1,\"3410\":1,\"3413\":1}}],[\"协议错误\",{\"0\":{\"3314\":1,\"3347\":1}}],[\"协议可以解决数据在传送过程中的丢失\",{\"1\":{\"2244\":1}}],[\"协议网络程序\",{\"1\":{\"2229\":1}}],[\"协议是网络层的主要协议\",{\"1\":{\"2203\":1}}],[\"协议簇\",{\"0\":{\"2203\":1}}],[\"协作分工\",{\"0\":{\"32\":1}}],[\"路由计算\",{\"0\":{\"3399\":1},\"1\":{\"3527\":1}}],[\"路由\",{\"0\":{\"2816\":1}}],[\"路由控制\",{\"1\":{\"2200\":1}}],[\"路径问题\",{\"0\":{\"2914\":1}}],[\"路径结束\",{\"1\":{\"2166\":1}}],[\"路径开始\",{\"1\":{\"2166\":1}}],[\"路径也是一种文件\",{\"1\":{\"2016\":1}}],[\"路径中的每级目录之间用一个路径分隔符隔开\",{\"1\":{\"2011\":1}}],[\"路径分隔符和系统有关\",{\"0\":{\"2012\":1}}],[\"路径分隔符\",{\"0\":{\"2011\":1}}],[\"路径改了\",{\"1\":{\"807\":1}}],[\"路径\",{\"1\":{\"786\":1,\"2929\":1,\"3051\":1}}],[\"路径变量\",{\"1\":{\"641\":1}}],[\"路径的整理清单\",{\"1\":{\"342\":1}}],[\"差错控制\",{\"1\":{\"2200\":1}}],[\"差了30倍\",{\"1\":{\"242\":1}}],[\"了解都没必要\",{\"1\":{\"2976\":1}}],[\"了解\",{\"0\":{\"2269\":1,\"2449\":1}}],[\"了解springboot开发流程\",{\"1\":{\"93\":1}}],[\"了\",{\"1\":{\"2191\":1,\"2224\":1}}],[\"局限性\",{\"0\":{\"2935\":1}}],[\"局域网使用\",{\"1\":{\"2182\":1}}],[\"局部数据修改\",{\"0\":{\"3145\":1}}],[\"局部修改\",{\"1\":{\"3143\":1}}],[\"局部类型推断升级\",{\"0\":{\"2519\":1}}],[\"局部内部类不能使用static修饰\",{\"1\":{\"1460\":1}}],[\"局部内部类和局部变量地位类似\",{\"1\":{\"1460\":1}}],[\"局部内部类可以使用外部方法的局部变量\",{\"1\":{\"1460\":1}}],[\"局部内部类可以使用外部类的成员\",{\"1\":{\"1460\":1}}],[\"局部内部类的特点\",{\"0\":{\"1460\":1}}],[\"局部内部类的使用\",{\"0\":{\"1458\":1}}],[\"局部内部类\",{\"1\":{\"1451\":4,\"2264\":1}}],[\"局部变量声明\",{\"1\":{\"1653\":1}}],[\"局部变量表存放了编译期可知长度的各种基本数据类型\",{\"1\":{\"1546\":1}}],[\"局部变量除形参外\",{\"1\":{\"1076\":1}}],[\"局部变量\",{\"1\":{\"1076\":1,\"1271\":1,\"1273\":4,\"1635\":1,\"1661\":1,\"1851\":2,\"1852\":2}}],[\"局部\",{\"1\":{\"275\":1}}],[\"亚洲4亿\",{\"1\":{\"2181\":1}}],[\"准动态语言\",{\"1\":{\"2247\":1}}],[\"准确地定位网络上一台或多台主机\",{\"1\":{\"2172\":1}}],[\"准备静态资源\",{\"1\":{\"2696\":1}}],[\"准备\",{\"0\":{\"3263\":1},\"1\":{\"2275\":1}}],[\"准备遍历\",{\"1\":{\"1842\":1}}],[\"准备工作顺序\",{\"0\":{\"586\":1}}],[\"准备工作\",{\"0\":{\"585\":1}}],[\"准备测试前\",{\"1\":{\"186\":1}}],[\"联合索引可以是上述规则重复n次\",{\"1\":{\"3628\":1}}],[\"联盟定义的\",{\"1\":{\"3466\":1}}],[\"联网的底层细节被隐藏在\",{\"1\":{\"2171\":1}}],[\"联系\",{\"0\":{\"1747\":1}}],[\"根标签\",{\"1\":{\"3030\":1}}],[\"根标签名\",{\"1\":{\"3026\":2}}],[\"根目录\",{\"1\":{\"2941\":1}}],[\"根目录后面元素的数量\",{\"1\":{\"2166\":1}}],[\"根据上述设计\",{\"1\":{\"3656\":1}}],[\"根据上面的更新流程可知\",{\"1\":{\"3444\":1}}],[\"根据最小副本集架构搭建副本集\",{\"1\":{\"3651\":1}}],[\"根据uerid查询数据\",{\"1\":{\"3634\":1}}],[\"根据url自动识别\",{\"1\":{\"2674\":1}}],[\"根据query条件查询数据\",{\"1\":{\"3606\":1}}],[\"根据倒排列表\",{\"1\":{\"3431\":1}}],[\"根据电脑内存大小\",{\"1\":{\"3267\":1}}],[\"根据值的范围进行查询\",{\"1\":{\"3171\":1}}],[\"根据多个查询条件进行查询\",{\"1\":{\"3168\":1,\"3229\":1}}],[\"根据多态显示的类是httpservletrequest\",{\"1\":{\"2837\":1}}],[\"根据索引查询es\",{\"1\":{\"3113\":1}}],[\"根据约束文档写xml文档之前\",{\"1\":{\"3026\":1}}],[\"根据其根目录下包含有html和jsp文件\",{\"1\":{\"2996\":1}}],[\"根据其类型\",{\"1\":{\"1273\":1}}],[\"根据name删除数据\",{\"1\":{\"2926\":1}}],[\"根据那么获取对应数据值\",{\"1\":{\"2926\":1}}],[\"根据key删除该键值对\",{\"1\":{\"2902\":1}}],[\"根据key获取值\",{\"1\":{\"2902\":1}}],[\"根据key获取参数值\",{\"1\":{\"2872\":1}}],[\"根据key\",{\"1\":{\"2872\":1}}],[\"根据名称获取参数值\",{\"1\":{\"2869\":2}}],[\"根据不同的查询类型\",{\"1\":{\"3167\":1}}],[\"根据不同的请求方式获取请求参数\",{\"0\":{\"2866\":1}}],[\"根据不同的响应数据类型\",{\"1\":{\"646\":1}}],[\"根据请求方式的不通\",{\"1\":{\"2862\":1}}],[\"根据请求的套接字对象\",{\"1\":{\"2225\":1}}],[\"根据请求的电话\",{\"1\":{\"471\":1}}],[\"根据demo1可以找到要访问的是项目中的哪个servlet类\",{\"1\":{\"2785\":1}}],[\"根据dbtype自动识别\",{\"1\":{\"2674\":1}}],[\"根据web\",{\"1\":{\"2785\":1}}],[\"根据localhost\",{\"1\":{\"2785\":1}}],[\"根据pid找到对应的进程\",{\"1\":{\"2708\":1}}],[\"根据pid杀死任务\",{\"1\":{\"248\":1}}],[\"根据业务需求编写接口\",{\"1\":{\"2655\":1}}],[\"根据orm编程思想\",{\"1\":{\"2599\":1}}],[\"根据学生的年龄进行排序\",{\"1\":{\"2475\":1}}],[\"根据遍历顺序\",{\"1\":{\"2460\":1}}],[\"根据integer参数\",{\"1\":{\"2431\":1}}],[\"根据ip创建\",{\"0\":{\"2212\":1}}],[\"根据程序的上下文\",{\"1\":{\"2365\":1}}],[\"根据传递的信息调用源被代理对象的方法\",{\"1\":{\"2333\":1}}],[\"根据传入的comparator接口子类\",{\"1\":{\"893\":1}}],[\"根据全类名参数创建类的对象\",{\"1\":{\"2252\":1}}],[\"根据指定服务端的\",{\"1\":{\"2217\":1}}],[\"根据指定的第二个参数comparator进行排序\",{\"1\":{\"932\":1}}],[\"根据host创建\",{\"0\":{\"2213\":1}}],[\"根据数据操作单位可以把缓冲流分为\",{\"1\":{\"2075\":1}}],[\"根据数据种类得到操作接口\",{\"1\":{\"379\":1}}],[\"根据操作系统\",{\"1\":{\"2013\":1}}],[\"根据自定义的排序方式进行了排序输出\",{\"1\":{\"1935\":1}}],[\"根据元素的\",{\"1\":{\"1886\":1,\"1902\":1}}],[\"根据需求\",{\"1\":{\"2811\":1}}],[\"根据需求选择符合要求\",{\"1\":{\"2381\":1}}],[\"根据需求选择合适的子类\",{\"1\":{\"1831\":1}}],[\"根据需求创建子模块\",{\"1\":{\"162\":1}}],[\"根据此对象的类型\",{\"1\":{\"1588\":1}}],[\"根据定义\",{\"1\":{\"1366\":1}}],[\"根据类创建类的对象\",{\"1\":{\"1259\":1}}],[\"根据类加载器加载目标类\",{\"1\":{\"837\":1}}],[\"根据问题需要\",{\"1\":{\"1252\":1}}],[\"根据switch表达式中的值\",{\"1\":{\"1175\":1}}],[\"根据循环条件\",{\"1\":{\"1165\":1}}],[\"根据运算法则减去一个正数等于加上一个负数\",{\"1\":{\"1121\":1}}],[\"根据参数获得ip对象\",{\"1\":{\"2193\":1}}],[\"根据参数列表调用对应的构造器来创建对象\",{\"1\":{\"1322\":1}}],[\"根据参数数组的数据类型不同\",{\"1\":{\"894\":1}}],[\"根据参数2不同的数据类型\",{\"1\":{\"703\":1}}],[\"根据获取的构造器创建类的对象\",{\"1\":{\"877\":1}}],[\"根据换行符来判定\",{\"1\":{\"829\":1,\"2082\":1}}],[\"根据父file对象拼接子文件路径创建文件对象\",{\"1\":{\"786\":1}}],[\"根据父路径和子路径拼接创建文件对象\",{\"1\":{\"786\":1}}],[\"根据文件路径创建文件对象\",{\"1\":{\"786\":1}}],[\"根据年龄比较大小\",{\"1\":{\"748\":1}}],[\"根据空格分割\",{\"1\":{\"682\":1,\"992\":1}}],[\"根据给定正则表达式的匹配拆分此字符串\",{\"1\":{\"682\":1,\"992\":1}}],[\"根据要操作的数据表创建实体类\",{\"1\":{\"619\":1}}],[\"根据要操作的数据类型\",{\"1\":{\"379\":1}}],[\"根据以下规范\",{\"1\":{\"589\":1}}],[\"根据项目需求添加依赖和插件\",{\"1\":{\"582\":1}}],[\"根据手机号返回验证码\",{\"1\":{\"471\":1}}],[\"根据复杂条件查询\",{\"0\":{\"410\":1}}],[\"根据复杂的查询条件\",{\"1\":{\"402\":1}}],[\"根据\",{\"0\":{\"431\":1,\"432\":1,\"3225\":1},\"1\":{\"402\":1,\"2785\":1,\"3218\":2,\"3225\":1,\"3526\":1}}],[\"根据条件查询数据\",{\"0\":{\"3606\":1}}],[\"根据条件\",{\"1\":{\"1165\":1}}],[\"根据条件表达式真或假\",{\"1\":{\"1159\":1}}],[\"根据条件加载bean是企业级开发中的场景操作\",{\"1\":{\"537\":1}}],[\"根据条件更新多个文档\",{\"1\":{\"402\":1}}],[\"根据条件移除文档\",{\"0\":{\"404\":1},\"1\":{\"402\":1}}],[\"根据进程pid查询进程名称\",{\"1\":{\"248\":1}}],[\"根据加载的东西不同\",{\"1\":{\"181\":1}}],[\"根据产品原型输出界面效果图\",{\"1\":{\"33\":1}}],[\"王铭\",{\"1\":{\"2156\":1}}],[\"刘建辰\",{\"1\":{\"2126\":1}}],[\"顾名思义\",{\"1\":{\"2111\":1}}],[\"融合了目前人类使用的所有字符\",{\"1\":{\"2109\":1}}],[\"融合了更多的中文文字符号\",{\"1\":{\"2109\":1}}],[\"欧洲码表\",{\"1\":{\"2109\":1}}],[\"拉丁码表\",{\"1\":{\"2109\":1}}],[\"美国标准信息交换码\",{\"1\":{\"2109\":1}}],[\"美观\",{\"1\":{\"300\":1}}],[\"早期的全文检索会为整个文档集合建立一个很大的倒排索引并将其写入到磁盘\",{\"1\":{\"3440\":1}}],[\"早期的java只提供了一个file类来访问文件系统\",{\"1\":{\"2163\":1}}],[\"早期文档搜索的做法\",{\"0\":{\"3440\":1}}],[\"早期由来是电信号\",{\"1\":{\"2108\":1}}],[\"早绑定\",{\"1\":{\"1407\":2}}],[\"早绑定与晚绑定\",{\"0\":{\"1407\":1}}],[\"综合示例\",{\"0\":{\"2106\":1}}],[\"远程方法调用\",{\"1\":{\"2325\":1}}],[\"远程主机的ip\",{\"1\":{\"2233\":1}}],[\"远程缓存\",{\"1\":{\"488\":1}}],[\"远小于节点流\",{\"1\":{\"2086\":1}}],[\"视频直播\",{\"1\":{\"3541\":1}}],[\"视频播放\",{\"1\":{\"2205\":1}}],[\"视频\",{\"1\":{\"2086\":2}}],[\"视图中无法显示数据库列表\",{\"1\":{\"3662\":1}}],[\"视图\",{\"1\":{\"2976\":1,\"3002\":1,\"3011\":1}}],[\"视图层\",{\"0\":{\"1540\":1}}],[\"视图模型层\",{\"1\":{\"1537\":1}}],[\"套接字用于连接客户端和服务器\",{\"1\":{\"2244\":1}}],[\"套接字将被绑定到通配符地址\",{\"1\":{\"2233\":2}}],[\"套接字\",{\"1\":{\"2214\":1}}],[\"套接字被关闭后\",{\"1\":{\"2214\":1}}],[\"套接\",{\"1\":{\"2075\":1,\"2094\":1,\"2102\":1,\"2123\":2}}],[\"套餐管理\",{\"1\":{\"54\":1}}],[\"套餐\",{\"1\":{\"49\":1,\"54\":1}}],[\"缓冲池\",{\"1\":{\"2664\":2}}],[\"缓冲流消耗的时间\",{\"1\":{\"2086\":1}}],[\"缓冲流要\",{\"1\":{\"2075\":1}}],[\"缓冲流的类\",{\"0\":{\"2075\":1}}],[\"缓冲流的作用是提高流的读取\",{\"1\":{\"2073\":1}}],[\"缓冲流是处理流的一种\",{\"1\":{\"2073\":1}}],[\"缓冲流\",{\"0\":{\"2072\":1,\"2084\":1,\"2085\":1}}],[\"缓存被不断的刷写\",{\"1\":{\"3449\":1}}],[\"缓存统计\",{\"1\":{\"487\":1}}],[\"缓存到redis中的键名为\",{\"1\":{\"485\":1}}],[\"缓存空间轻松的隔离了各种缓存策略\",{\"1\":{\"479\":1}}],[\"缓存清除策略有以下四种\",{\"1\":{\"480\":1}}],[\"缓存清除策略\",{\"0\":{\"480\":1},\"1\":{\"478\":1}}],[\"缓存方式是cacheput\",{\"1\":{\"469\":1}}],[\"缓存验证码\",{\"1\":{\"469\":1}}],[\"缓存的键\",{\"1\":{\"468\":1}}],[\"缓存的作用主要有两个\",{\"1\":{\"460\":1}}],[\"缓存所在的空间\",{\"1\":{\"468\":1}}],[\"缓存数据无需手动操作\",{\"1\":{\"468\":1}}],[\"缓存数据库数据\",{\"0\":{\"462\":1}}],[\"缓存功能需要在启动类上开启\",{\"1\":{\"467\":1}}],[\"缓存临时数据\",{\"0\":{\"463\":1}}],[\"缓存中的数据在内存中\",{\"1\":{\"462\":1}}],[\"缓存与数据库交互\",{\"1\":{\"462\":1}}],[\"缓存是一种介于数据永久存储介质与应用程序之间的数据临时存储介质\",{\"1\":{\"461\":1}}],[\"缓存是什么\",{\"0\":{\"461\":1}}],[\"缓存介绍\",{\"0\":{\"460\":1}}],[\"缓存\",{\"0\":{\"338\":1},\"1\":{\"612\":1,\"2278\":1,\"3441\":1,\"3550\":1}}],[\"缓存技术\",{\"0\":{\"459\":1},\"1\":{\"45\":1}}],[\"造成\",{\"1\":{\"3532\":1}}],[\"造流\",{\"1\":{\"2071\":1,\"2106\":1}}],[\"造文件\",{\"1\":{\"2071\":1,\"2106\":1}}],[\"造出来的bean并不是redisfactorybean\",{\"1\":{\"514\":1}}],[\"房子fr是null\",{\"1\":{\"2052\":1}}],[\"创造流\",{\"1\":{\"2084\":2}}],[\"创造filereader输入流\",{\"1\":{\"2052\":1}}],[\"创建x\",{\"0\":{\"3725\":1}}],[\"创建普通用户可以在没有开启认证的时候添加\",{\"1\":{\"3711\":1}}],[\"创建普通用户\",{\"0\":{\"3711\":1}}],[\"创建专门用来管理admin库的账号myadmin\",{\"1\":{\"3710\":1}}],[\"创建admin\",{\"0\":{\"3710\":1}}],[\"创建application\",{\"1\":{\"583\":1}}],[\"创建或选择article库\",{\"1\":{\"3682\":1}}],[\"创建仲裁节点\",{\"0\":{\"3658\":1}}],[\"创建副本节点\",{\"0\":{\"3657\":1}}],[\"创建副本集\",{\"0\":{\"3649\":1}}],[\"创建副本是很有必要且推荐的\",{\"1\":{\"3368\":1}}],[\"创建复合索引\",{\"0\":{\"3627\":1}}],[\"创建单字段索引\",{\"0\":{\"3626\":1}}],[\"创建单节点集群\",{\"0\":{\"3378\":1},\"1\":{\"3378\":1}}],[\"创建集合\",{\"0\":{\"3581\":1}}],[\"创建集合对象时传入类型实参\",{\"1\":{\"1948\":1}}],[\"创建集合对象\",{\"1\":{\"1842\":1,\"2603\":1,\"2653\":1}}],[\"创建扩展词典\",{\"0\":{\"3487\":1}}],[\"创建名为\",{\"1\":{\"3379\":1}}],[\"创建目录\",{\"1\":{\"3336\":1}}],[\"创建主节点的目录和相关文件\",{\"1\":{\"3656\":1}}],[\"创建主节点\",{\"0\":{\"3336\":1,\"3656\":1}}],[\"创建node\",{\"1\":{\"3335\":1}}],[\"创建new\",{\"1\":{\"3049\":1}}],[\"创建证书\",{\"0\":{\"3306\":1,\"3326\":1},\"1\":{\"3304\":1,\"3325\":1}}],[\"创建证书有四种模式\",{\"1\":{\"3293\":1}}],[\"创建用户后\",{\"1\":{\"3716\":1}}],[\"创建用户示例\",{\"0\":{\"3708\":1}}],[\"创建用户需要使用db\",{\"1\":{\"3707\":1}}],[\"创建用户\",{\"1\":{\"3291\":1,\"3322\":1}}],[\"创建节点\",{\"0\":{\"3264\":1,\"3655\":1}}],[\"创建强求体\",{\"1\":{\"3252\":1,\"3253\":1}}],[\"创建范围查询的builder\",{\"1\":{\"3236\":1,\"3237\":1}}],[\"创建请求对象\",{\"1\":{\"3214\":1,\"3217\":1,\"3218\":1,\"3220\":1,\"3221\":1,\"3225\":1,\"3226\":1,\"3227\":1,\"3231\":1,\"3234\":1,\"3237\":1,\"3240\":1,\"3242\":1,\"3244\":1,\"3249\":1,\"3253\":1}}],[\"创建es用户\",{\"0\":{\"3291\":1,\"3322\":1},\"1\":{\"3285\":1}}],[\"创建es\",{\"1\":{\"3206\":1,\"3209\":1,\"3211\":1,\"3212\":1,\"3214\":1,\"3217\":1,\"3218\":1,\"3220\":1,\"3221\":1,\"3225\":1,\"3226\":1,\"3227\":1,\"3231\":1,\"3234\":1,\"3237\":1,\"3240\":1,\"3242\":1,\"3244\":1,\"3249\":1,\"3253\":1}}],[\"创建estest类用于测试javaapi\",{\"1\":{\"3203\":1}}],[\"创建客户端对象用于访问es服务器\",{\"1\":{\"3206\":1}}],[\"创建完单节点集群后\",{\"1\":{\"3379\":1}}],[\"创建完索引\",{\"1\":{\"3196\":1}}],[\"创建完成后\",{\"1\":{\"105\":1}}],[\"创建映射\",{\"0\":{\"3196\":1}}],[\"创建方式\",{\"1\":{\"3116\":1}}],[\"创建方式要选择maven而不是spring\",{\"1\":{\"162\":1}}],[\"创建人和类搜索路径class\",{\"1\":{\"2981\":1}}],[\"创建对应的servlet实现类的对象\",{\"1\":{\"2831\":1}}],[\"创建对象时\",{\"1\":{\"1322\":1,\"1948\":1}}],[\"创建对象时利用传参进行属性的初始化\",{\"1\":{\"1316\":1}}],[\"创建对象数组\",{\"1\":{\"1266\":1}}],[\"创建对象\",{\"0\":{\"1259\":1,\"1315\":1},\"1\":{\"1267\":1}}],[\"创建连接等初始化的工作\",{\"1\":{\"2796\":1}}],[\"创建连接池\",{\"1\":{\"2672\":1}}],[\"创建web项目\",{\"0\":{\"2728\":1,\"2729\":1},\"1\":{\"2778\":1}}],[\"创建optional类\",{\"0\":{\"2499\":1}}],[\"创建无限流\",{\"1\":{\"2449\":1}}],[\"创建无限流stream\",{\"0\":{\"2449\":1}}],[\"创建代理对象\",{\"1\":{\"2338\":1}}],[\"创建代理类的对象\",{\"1\":{\"2330\":1}}],[\"创建被代理类的对象\",{\"1\":{\"2330\":1}}],[\"创建运行时类的对象\",{\"1\":{\"2306\":1,\"2311\":1}}],[\"创建服务器套接字对象\",{\"1\":{\"2225\":1}}],[\"创建服务端的serversocket\",{\"1\":{\"2221\":1}}],[\"创建的索引是文档的id\",{\"1\":{\"3427\":1}}],[\"创建的副本数量\",{\"1\":{\"3379\":1}}],[\"创建的分片数量\",{\"1\":{\"3379\":1}}],[\"创建的证书如下\",{\"1\":{\"3326\":1}}],[\"创建的同时会自动向服务器方发起连接\",{\"1\":{\"2218\":1}}],[\"创建的工程\",{\"1\":{\"94\":1}}],[\"创建写出流\",{\"1\":{\"2152\":1,\"2157\":1}}],[\"创建输入流\",{\"1\":{\"2151\":1,\"2156\":1}}],[\"创建输入流和输出流的对象\",{\"1\":{\"2065\":1}}],[\"创建反序列化流\",{\"1\":{\"2146\":1}}],[\"创建序列化流\",{\"1\":{\"2146\":2}}],[\"创建流\",{\"1\":{\"2126\":1,\"2127\":1}}],[\"创建流对象\",{\"0\":{\"2048\":1},\"1\":{\"2040\":1}}],[\"创建打印输出流\",{\"1\":{\"2121\":1}}],[\"创建file类的对象\",{\"1\":{\"2065\":1}}],[\"创建futuretask的对象\",{\"1\":{\"1809\":1}}],[\"创建硬盘文件\",{\"0\":{\"2018\":1}}],[\"创建泛型数组\",{\"1\":{\"1969\":1}}],[\"创建迭代器时\",{\"1\":{\"1957\":1}}],[\"创建了代理类proxyinstance\",{\"1\":{\"2345\":1}}],[\"创建了node对象\",{\"1\":{\"1873\":1}}],[\"创建了接口的匿名实现类的匿名对象\",{\"1\":{\"1512\":1}}],[\"创建了接口的匿名实现类的非匿名对象\",{\"1\":{\"1512\":1}}],[\"创建了接口的非匿名实现类的匿名对象\",{\"1\":{\"1512\":1}}],[\"创建iterator对象\",{\"1\":{\"1842\":1}}],[\"创建线程池\",{\"1\":{\"1816\":1,\"1817\":1}}],[\"创建线程并指定线程实例名\",{\"1\":{\"1716\":1}}],[\"创建cookie\",{\"0\":{\"3046\":1}}],[\"创建cookie对象\",{\"0\":{\"3041\":1},\"1\":{\"3039\":1,\"3046\":1}}],[\"创建copy方法\",{\"0\":{\"2071\":1}}],[\"创建config包\",{\"1\":{\"155\":1}}],[\"创建controller\",{\"0\":{\"109\":1},\"1\":{\"646\":1}}],[\"创建callable接口实现类的对象\",{\"1\":{\"1810\":1}}],[\"创建新的线程\",{\"1\":{\"1742\":1}}],[\"创建新的thread对象\",{\"1\":{\"1716\":2}}],[\"创建多个副本不会增加性能\",{\"1\":{\"3394\":1}}],[\"创建多个节点\",{\"1\":{\"3323\":1}}],[\"创建多个线程\",{\"0\":{\"1742\":1}}],[\"创建多线程示例\",{\"0\":{\"1720\":1}}],[\"创建多线程的步骤\",{\"0\":{\"1719\":1}}],[\"创建多线程的方式之一\",{\"1\":{\"1712\":1}}],[\"创建test类\",{\"0\":{\"2255\":1}}],[\"创建thread对象\",{\"1\":{\"1809\":1,\"1810\":1}}],[\"创建thread类的对象\",{\"1\":{\"1739\":1,\"1740\":1}}],[\"创建thread类的子类的对象\",{\"1\":{\"1719\":1,\"1720\":1}}],[\"创建tostring等\",{\"1\":{\"620\":1}}],[\"创建枚举类\",{\"0\":{\"1621\":1}}],[\"创建细节\",{\"1\":{\"1620\":1}}],[\"创建异常的语法\",{\"0\":{\"1608\":1}}],[\"创建好索引后\",{\"1\":{\"3132\":1}}],[\"创建好的异常对象不抛出对程序没有任何影响\",{\"1\":{\"1567\":1}}],[\"创建好springboot项目后\",{\"1\":{\"108\":1}}],[\"创建抽象类的匿名类\",{\"0\":{\"1497\":1}}],[\"创建子线程对象\",{\"1\":{\"1720\":1}}],[\"创建子类的对象\",{\"1\":{\"1391\":1}}],[\"创建子类对象时\",{\"1\":{\"1367\":1}}],[\"创建子模块\",{\"0\":{\"162\":1}}],[\"创建玩对象后\",{\"1\":{\"1259\":1}}],[\"创建数组对象会在内存中开辟一整块连续的空间\",{\"1\":{\"1209\":1}}],[\"创建数据库\",{\"1\":{\"3571\":1}}],[\"创建数据库表需要设置字段名称\",{\"1\":{\"3195\":1}}],[\"创建数据表实现类\",{\"0\":{\"2656\":1}}],[\"创建数据表实现接口\",{\"0\":{\"2655\":1}}],[\"创建数据表book\",{\"0\":{\"618\":1}}],[\"创建数据报套接字\",{\"1\":{\"2233\":1}}],[\"创建数据报套接字并将其绑定到本地主机上的指定端口\",{\"1\":{\"2233\":1}}],[\"创建数据对象\",{\"0\":{\"155\":1},\"1\":{\"2605\":1}}],[\"创建变量\",{\"0\":{\"1032\":1}}],[\"创建比较器\",{\"1\":{\"998\":1}}],[\"创建模糊查询构造器\",{\"1\":{\"3239\":1}}],[\"创建模式器\",{\"1\":{\"998\":1}}],[\"创建模块\",{\"0\":{\"616\":1},\"1\":{\"162\":1}}],[\"创建preparedstatement对象\",{\"0\":{\"2567\":1}}],[\"创建proxyinstance时\",{\"1\":{\"2345\":1}}],[\"创建properties类的对象\",{\"1\":{\"1940\":1}}],[\"创建person类的class实例\",{\"1\":{\"2285\":1}}],[\"创建person类的对象\",{\"1\":{\"2257\":1}}],[\"创建person对象\",{\"1\":{\"850\":1,\"2258\":1,\"2286\":1}}],[\"创建pattern对象\",{\"1\":{\"1000\":1}}],[\"创建pattern类的实例\",{\"1\":{\"987\":1}}],[\"创建容器对象时\",{\"1\":{\"904\":1}}],[\"创建失败\",{\"1\":{\"803\":1}}],[\"创建优秀的\",{\"1\":{\"709\":1}}],[\"创建searchsourcebuilder\",{\"1\":{\"3239\":1,\"3240\":1}}],[\"创建session时\",{\"1\":{\"3068\":1}}],[\"创建session对象\",{\"1\":{\"2923\":1}}],[\"创建servlet实现类\",{\"0\":{\"2779\":1},\"1\":{\"2777\":1}}],[\"创建serversocket对象\",{\"0\":{\"2223\":1}}],[\"创建stream\",{\"0\":{\"2448\":1},\"1\":{\"2440\":1}}],[\"创建stringbuffer对象\",{\"0\":{\"689\":1}}],[\"创建string\",{\"1\":{\"649\":1}}],[\"创建socket对象\",{\"1\":{\"2220\":1}}],[\"创建socket\",{\"1\":{\"2217\":1}}],[\"创建springboot会产生很多无意义的文件\",{\"1\":{\"103\":1}}],[\"创建boolquerybuilder对象\",{\"1\":{\"3230\":1,\"3231\":1}}],[\"创建bookcontroller类\",{\"1\":{\"639\":1}}],[\"创建bookserviceimpl作为对应业务层接口的实现类\",{\"1\":{\"634\":1}}],[\"创建bookservice作为业务接口\",{\"1\":{\"634\":1}}],[\"创建bean时\",{\"1\":{\"547\":1}}],[\"创建beandefinition对象的方式有很多\",{\"1\":{\"527\":1}}],[\"创建包\",{\"1\":{\"634\":2,\"639\":1}}],[\"创建包config\",{\"1\":{\"626\":1}}],[\"创建module\",{\"0\":{\"2731\":1,\"2737\":1,\"2741\":1}}],[\"创建myroot\",{\"0\":{\"3709\":1}}],[\"创建myannotations注解\",{\"1\":{\"1668\":1}}],[\"创建mycomparator类的对象\",{\"1\":{\"893\":1}}],[\"创建manifest\",{\"1\":{\"2991\":1}}],[\"创建matcher类的实例\",{\"1\":{\"987\":1}}],[\"创建mapper接口\",{\"1\":{\"374\":1}}],[\"创建mpconfig用来配置分页相关的拦截器\",{\"1\":{\"626\":1}}],[\"创建所有配置\",{\"1\":{\"586\":1}}],[\"创建实现类的对象\",{\"1\":{\"1739\":1,\"1740\":1}}],[\"创建实例前对redis服务进行连接测试\",{\"1\":{\"514\":1}}],[\"创建实体类和mapper接口\",{\"1\":{\"363\":1}}],[\"创建消费者\",{\"1\":{\"448\":1}}],[\"创建队列和交换机并将他们绑定\",{\"1\":{\"442\":1}}],[\"创建一个仅能对article库进行读写的用户\",{\"1\":{\"3711\":1}}],[\"创建一个存放数据的目录\",{\"1\":{\"3555\":1}}],[\"创建一个注册token\",{\"0\":{\"3331\":1},\"1\":{\"3329\":1}}],[\"创建一个专门的用户es\",{\"1\":{\"3285\":1}}],[\"创建一个路由\",{\"0\":{\"2716\":1},\"1\":{\"2716\":1}}],[\"创建一个optional实例\",{\"1\":{\"2502\":1}}],[\"创建一个obj也可以\",{\"1\":{\"1760\":1}}],[\"创建一个空的\",{\"1\":{\"2501\":1}}],[\"创建一个\",{\"1\":{\"2500\":1}}],[\"创建一个员工对象\",{\"1\":{\"2405\":1}}],[\"创建一个类\",{\"1\":{\"2349\":1}}],[\"创建一个类使用上面两个bean\",{\"1\":{\"550\":1}}],[\"创建一个对象\",{\"1\":{\"2333\":1}}],[\"创建一个函数\",{\"1\":{\"2252\":1}}],[\"创建一个服务器端套接字\",{\"1\":{\"2221\":1}}],[\"创建一个流套接字并将其连接到指定主机上的指定端口号\",{\"1\":{\"2213\":1}}],[\"创建一个流套接字并将其连接到指定ip\",{\"1\":{\"2212\":1}}],[\"创建一个文件\",{\"1\":{\"2168\":1}}],[\"创建一个目录\",{\"1\":{\"2168\":1}}],[\"创建一个线程池\",{\"1\":{\"1815\":1}}],[\"创建一个只有一个线程的线程池\",{\"1\":{\"1815\":1}}],[\"创建一个可重用固定线程数的线程池\",{\"1\":{\"1815\":1}}],[\"创建一个可根据需要创建新线程的线程池\",{\"1\":{\"1815\":1}}],[\"创建一个实现接口invocationhandler的类\",{\"1\":{\"2339\":1}}],[\"创建一个实现callable的实现类\",{\"1\":{\"1810\":1}}],[\"创建一个实现了runnable接口的类\",{\"1\":{\"1739\":1,\"1740\":1}}],[\"创建一个继承于thread类的子类\",{\"1\":{\"1719\":1,\"1720\":1}}],[\"创建一个季节枚举类\",{\"1\":{\"1621\":1}}],[\"创建一个计算代码执行时间的类\",{\"1\":{\"1499\":1}}],[\"创建一个消费者service\",{\"1\":{\"441\":1}}],[\"创建一个生产者service\",{\"1\":{\"441\":1}}],[\"创建一个config包\",{\"1\":{\"441\":1}}],[\"创建一个索引\",{\"1\":{\"419\":1}}],[\"创建文档时\",{\"1\":{\"3435\":1}}],[\"创建文档\",{\"0\":{\"3132\":1},\"1\":{\"433\":2,\"3113\":1}}],[\"创建文件输入流\",{\"1\":{\"2612\":1}}],[\"创建文件对象\",{\"1\":{\"2040\":1,\"2084\":1}}],[\"创建文件目录\",{\"1\":{\"804\":1}}],[\"创建文件\",{\"0\":{\"802\":1},\"1\":{\"155\":1}}],[\"创建成功后\",{\"1\":{\"3380\":1}}],[\"创建成功\",{\"1\":{\"422\":1}}],[\"创建索引时的字段\",{\"1\":{\"3435\":1}}],[\"创建索引请求对象\",{\"1\":{\"3209\":1}}],[\"创建索引库的分片数默认\",{\"1\":{\"3119\":1}}],[\"创建索引就等同于创建数据库\",{\"1\":{\"3116\":1}}],[\"创建索引\",{\"0\":{\"3116\":1,\"3209\":1,\"3624\":1},\"1\":{\"419\":1,\"3209\":2}}],[\"创建配置类配置es客户端\",{\"1\":{\"418\":1}}],[\"创建配置文件\",{\"1\":{\"307\":1}}],[\"创建\",{\"0\":{\"318\":1},\"1\":{\"1616\":1,\"3264\":1,\"3498\":1}}],[\"创建日志对象\",{\"1\":{\"288\":1}}],[\"创建测试类\",{\"1\":{\"227\":1}}],[\"创建父工程\",{\"0\":{\"161\":1}}],[\"创建类的对象\",{\"1\":{\"1259\":1,\"1260\":1}}],[\"创建类r作为返回结果模型类\",{\"1\":{\"646\":1}}],[\"创建类\",{\"0\":{\"1258\":1},\"1\":{\"153\":1,\"1260\":1}}],[\"创建工程\",{\"0\":{\"579\":1},\"1\":{\"95\":1,\"105\":1}}],[\"创建项目时springboot自动导入了\",{\"1\":{\"227\":1}}],[\"创建项目的过程中\",{\"1\":{\"102\":1}}],[\"创建项目\",{\"0\":{\"94\":1,\"2778\":1},\"1\":{\"45\":1,\"2777\":1}}],[\"尤其注意\",{\"1\":{\"2045\":1}}],[\"尤其是账号和密码\",{\"1\":{\"3305\":1}}],[\"尤其是练习集群配置\",{\"1\":{\"3265\":1}}],[\"尤其是较为重要的class\",{\"1\":{\"2981\":1}}],[\"尤其是自定义的类\",{\"1\":{\"1894\":1,\"2474\":1}}],[\"尤其是多人协作开发时\",{\"1\":{\"529\":1}}],[\"尤其是一些实时生成的数据\",{\"1\":{\"463\":1}}],[\"尤其是读取数据\",{\"1\":{\"462\":1}}],[\"典型实现\",{\"1\":{\"2032\":1,\"2033\":1,\"2035\":1,\"2036\":1,\"2039\":1}}],[\"节点成员内部认证\",{\"1\":{\"3723\":1}}],[\"节点成员的host都是区域网ip\",{\"1\":{\"3678\":1}}],[\"节点的host都是区域网ip\",{\"1\":{\"3678\":1}}],[\"节点的职责主要包括集群\",{\"1\":{\"3526\":1}}],[\"节点ip\",{\"1\":{\"3673\":1}}],[\"节点id\",{\"1\":{\"3673\":1}}],[\"节点分离\",{\"1\":{\"3533\":1}}],[\"节点与\",{\"1\":{\"3533\":1}}],[\"节点状态的响应时间\",{\"1\":{\"3533\":1}}],[\"节点上的\",{\"1\":{\"3532\":1}}],[\"节点负载\",{\"1\":{\"3532\":1}}],[\"节点可以关闭\",{\"1\":{\"3526\":1}}],[\"节点和索引的管理\",{\"1\":{\"3526\":1}}],[\"节点就越稳定\",{\"1\":{\"3501\":1}}],[\"节点使用文档的\",{\"1\":{\"3410\":1}}],[\"节点切换了\",{\"1\":{\"3397\":1}}],[\"节点恢复后\",{\"1\":{\"3397\":1}}],[\"节点恢复\",{\"0\":{\"3397\":1}}],[\"节点丢失\",{\"0\":{\"3396\":1}}],[\"节点数<=主分片数\",{\"1\":{\"3508\":1}}],[\"节点数\",{\"1\":{\"3373\":1,\"3526\":1}}],[\"节点数量变成了3\",{\"1\":{\"3280\":1}}],[\"节点数量变成了2\",{\"1\":{\"3279\":1}}],[\"节点数量\",{\"1\":{\"3278\":1,\"3508\":1}}],[\"节点完成的\",{\"1\":{\"3371\":1}}],[\"节点信息\",{\"1\":{\"3355\":1}}],[\"节点端口\",{\"1\":{\"3337\":1}}],[\"节点绑定的主机\",{\"1\":{\"3337\":1}}],[\"节点角色\",{\"1\":{\"3337\":1}}],[\"节点名字会自动设置为本地域名\",{\"1\":{\"3656\":1}}],[\"节点名\",{\"1\":{\"3337\":1,\"3355\":1}}],[\"节点名称\",{\"1\":{\"3268\":1,\"3269\":1,\"3270\":1,\"3271\":1}}],[\"节点之间通过这个\",{\"1\":{\"3526\":1}}],[\"节点之间会有网络延迟\",{\"1\":{\"3334\":1}}],[\"节点之间要保持一致\",{\"1\":{\"3268\":1,\"3269\":1,\"3270\":1,\"3271\":1}}],[\"节点证书\",{\"1\":{\"3326\":1}}],[\"节点通信配置\",{\"1\":{\"3307\":1,\"3327\":1}}],[\"节点通信的证书\",{\"1\":{\"3307\":1,\"3327\":1}}],[\"节点3\",{\"0\":{\"3271\":1}}],[\"节点2\",{\"0\":{\"3270\":1}}],[\"节点1\",{\"0\":{\"3269\":1}}],[\"节点所属的角色\",{\"1\":{\"3268\":1}}],[\"节点类型\",{\"1\":{\"3268\":1}}],[\"节点\",{\"0\":{\"3261\":1},\"1\":{\"3261\":1,\"3269\":1,\"3270\":1,\"3271\":1,\"3373\":1,\"3526\":2,\"3641\":1,\"3644\":1}}],[\"节点流的方法\",{\"0\":{\"2044\":1}}],[\"节点流是流基类的典型实现\",{\"1\":{\"2043\":1}}],[\"节点流是最基本的实现\",{\"1\":{\"2039\":1}}],[\"节点流介绍\",{\"0\":{\"2043\":1}}],[\"节点流或处理流\",{\"1\":{\"2028\":1}}],[\"节点流或其他处理流\",{\"1\":{\"2023\":1}}],[\"节点流和处理流\",{\"0\":{\"2026\":1}}],[\"节点流\",{\"0\":{\"2027\":1,\"2039\":1,\"2042\":1},\"1\":{\"2023\":1,\"2084\":1}}],[\"节省内存\",{\"1\":{\"1870\":1}}],[\"光盘等存储设备中\",{\"1\":{\"2022\":1}}],[\"光盘等存储设备的数据\",{\"1\":{\"2022\":1}}],[\"流程\",{\"0\":{\"3409\":1}}],[\"流程控制方式采用结构化程序设计中规定的三种基本流程结构\",{\"1\":{\"1165\":1}}],[\"流程控制语句是用来控制程序中各语句执行顺序的语句\",{\"1\":{\"1165\":1}}],[\"流程控制\",{\"0\":{\"1165\":1}}],[\"流进行了终止操作后\",{\"1\":{\"2455\":1}}],[\"流套接字\",{\"1\":{\"2210\":1}}],[\"流量控制\",{\"1\":{\"2200\":1}}],[\"流资源的关闭\",{\"1\":{\"2064\":1}}],[\"流操作的基本步骤\",{\"0\":{\"2040\":1}}],[\"流的关闭\",{\"1\":{\"2052\":1}}],[\"流的基类都是节点流\",{\"1\":{\"2030\":1}}],[\"流的基类\",{\"0\":{\"2029\":1},\"1\":{\"2068\":1}}],[\"流的分类\",{\"0\":{\"2023\":1}}],[\"流的接口\",{\"1\":{\"2021\":1}}],[\"流\",{\"1\":{\"2021\":3}}],[\"狭义文件或文件\",{\"1\":{\"2008\":1}}],[\"广义文件\",{\"1\":{\"2008\":1}}],[\"场景较多\",{\"1\":{\"3551\":1}}],[\"场景示例\",{\"0\":{\"3494\":1}}],[\"场景\",{\"1\":{\"1997\":1}}],[\"误区\",{\"0\":{\"1978\":1,\"2056\":1}}],[\"部分集合和集群\",{\"1\":{\"3698\":1}}],[\"部分保留\",{\"0\":{\"1974\":1}}],[\"部署了多个web项目\",{\"1\":{\"3056\":1}}],[\"部署模式介绍\",{\"0\":{\"2748\":1}}],[\"部署项目\",{\"1\":{\"2747\":1}}],[\"部署到tomcat\",{\"1\":{\"2732\":1}}],[\"部署时的项目目录结构\",{\"0\":{\"2721\":1}}],[\"部署环境\",{\"0\":{\"251\":1}}],[\"部署在服务器上运行\",{\"1\":{\"31\":1}}],[\"擦除泛型\",{\"0\":{\"1971\":1}}],[\"药品都要辨别\",{\"1\":{\"1951\":1}}],[\"药品标签\",{\"1\":{\"1950\":1}}],[\"顺序是乱的\",{\"1\":{\"3496\":1}}],[\"顺序流\",{\"0\":{\"2444\":1},\"1\":{\"2444\":1}}],[\"顺序\",{\"1\":{\"1930\":1}}],[\"顺序结构\",{\"1\":{\"1165\":1}}],[\"桶中的node被树化时最小的hash表容量\",{\"1\":{\"1928\":1}}],[\"旧版本的文档依然能匹配查询\",{\"1\":{\"3528\":1}}],[\"旧版本的文档在\",{\"1\":{\"3528\":1}}],[\"旧版本文档被标记删除\",{\"1\":{\"3447\":1}}],[\"旧元素指向新元素\",{\"1\":{\"1926\":1}}],[\"旧的\",{\"1\":{\"3527\":1}}],[\"旧的就会被其替换\",{\"1\":{\"3440\":1}}],[\"旧的时间api\",{\"0\":{\"707\":1}}],[\"旧的不要再用了\",{\"1\":{\"705\":1}}],[\"七上八下\",{\"1\":{\"1926\":1}}],[\"首次启动\",{\"0\":{\"3273\":1}}],[\"首次调用put\",{\"1\":{\"1926\":1}}],[\"首要任务就是判断请求类型\",{\"1\":{\"2808\":1,\"2815\":1}}],[\"首先要用分词系统将文档自动切分成单词序列\",{\"1\":{\"3432\":1}}],[\"首先要在一个\",{\"1\":{\"2241\":1}}],[\"首先启动主节点node\",{\"1\":{\"3324\":1}}],[\"首先需要注意\",{\"1\":{\"2623\":1}}],[\"首先调用元素所在类的hashcode\",{\"1\":{\"1891\":1}}],[\"首先读取manifest\",{\"1\":{\"247\":1}}],[\"首先\",{\"1\":{\"26\":1,\"39\":1,\"1922\":1,\"2333\":1,\"3449\":1}}],[\"抗碰撞性\",{\"1\":{\"1899\":1}}],[\"哈希索引\",{\"1\":{\"3621\":1}}],[\"哈希冲突\",{\"0\":{\"1900\":1},\"1\":{\"1899\":1,\"1900\":1}}],[\"哈希位数越多\",{\"1\":{\"1899\":1}}],[\"哈希函数的安全性肯定是个相对概念\",{\"1\":{\"1899\":1}}],[\"哈希值的长度是固定的\",{\"1\":{\"1899\":1}}],[\"哈希算法\",{\"0\":{\"1899\":1},\"1\":{\"1899\":1}}],[\"密码认证方式\",{\"1\":{\"3693\":1}}],[\"密码\",{\"0\":{\"2543\":1},\"1\":{\"2540\":1,\"2559\":1,\"3304\":1,\"3305\":1,\"3329\":1,\"3712\":1}}],[\"密码学\",{\"1\":{\"1899\":1}}],[\"密码本不一样\",{\"1\":{\"1103\":1}}],[\"密码本\",{\"1\":{\"1103\":1}}],[\"鉴于java中数组用来存储数据的局限性\",{\"1\":{\"1858\":1}}],[\"练习\",{\"0\":{\"1853\":1}}],[\"迭代\",{\"0\":{\"2450\":1}}],[\"迭代顺序与\",{\"1\":{\"1930\":1}}],[\"迭代器执行的原理\",{\"0\":{\"1846\":1}}],[\"迭代器模式\",{\"1\":{\"1835\":1}}],[\"迭代器\",{\"0\":{\"1835\":1}}],[\"迭代条件\",{\"1\":{\"1179\":1,\"1180\":3,\"1183\":3,\"1188\":1}}],[\"凡是实现serializable接口的类都有一个表示序列化版本标识符的静态变量\",{\"1\":{\"2158\":1}}],[\"凡是涉及到对多个数据进行操作时\",{\"1\":{\"1824\":1}}],[\"凡是可以使用三元运算符的地方\",{\"1\":{\"1163\":1}}],[\"放行\",{\"0\":{\"2946\":1}}],[\"放行后的逻辑\",{\"0\":{\"2948\":1},\"1\":{\"2945\":1}}],[\"放行前的逻辑\",{\"0\":{\"2947\":1},\"1\":{\"2945\":1}}],[\"放置依赖的jar包\",{\"1\":{\"2722\":1}}],[\"放到一个orm类中\",{\"1\":{\"2649\":1}}],[\"放到数据库更新方法的调用处\",{\"1\":{\"2631\":1}}],[\"放到集合中\",{\"1\":{\"2603\":1}}],[\"放外面\",{\"1\":{\"2052\":1}}],[\"放入线程池中\",{\"1\":{\"1812\":1}}],[\"放在类\",{\"1\":{\"1056\":1}}],[\"思路\",{\"1\":{\"1812\":1}}],[\"思想\",{\"1\":{\"1498\":1}}],[\"总和\",{\"0\":{\"2691\":1}}],[\"总和为\",{\"1\":{\"1810\":1}}],[\"总是2的n次幂\",{\"1\":{\"1928\":1}}],[\"总能找到唯一的\",{\"1\":{\"1909\":1}}],[\"总结操作的方法\",{\"0\":{\"2454\":1}}],[\"总结\",{\"0\":{\"39\":1,\"113\":1,\"130\":1,\"205\":1,\"247\":1,\"260\":1,\"456\":1,\"537\":1,\"556\":1,\"1305\":1,\"1323\":1,\"1332\":1,\"1794\":1,\"1870\":1,\"1987\":1,\"1997\":1,\"2113\":1,\"2472\":1,\"2530\":1,\"2786\":1,\"2838\":1,\"2873\":1,\"2880\":1,\"3012\":1,\"3058\":1,\"3076\":1,\"3388\":1},\"1\":{\"696\":1,\"1591\":1,\"3384\":1}}],[\"⑤文本\",{\"1\":{\"3020\":1}}],[\"⑤填充占位符\",{\"1\":{\"2566\":1}}],[\"⑤使用代理对象调用被代理类中的同名方法\",{\"1\":{\"2333\":1}}],[\"⑤将futuretask的对象作为参数传递到thread类的构造器中\",{\"1\":{\"1809\":1}}],[\"⑤在代码块中赋值\",{\"1\":{\"1274\":1}}],[\"唤醒等待该对象监控权的一个\",{\"1\":{\"1801\":1}}],[\"唤醒后等待重新获得对监视器的所有权后才能继续执行\",{\"1\":{\"1799\":1}}],[\"令当前线程挂起并放弃cpu\",{\"1\":{\"1799\":1}}],[\"某一个产品的一个文档\",{\"1\":{\"3362\":1}}],[\"某些情况下\",{\"1\":{\"3527\":1}}],[\"某些destory方法无法生效\",{\"1\":{\"2704\":1}}],[\"某些特定的数据在内存空间里只有一份\",{\"1\":{\"1471\":1}}],[\"某个字段的数据类型\",{\"1\":{\"3364\":1}}],[\"某个资源可以有多个过滤器时\",{\"1\":{\"2952\":1}}],[\"某个servlet实现类\",{\"1\":{\"2861\":1}}],[\"某个属性的类型是其他类\",{\"1\":{\"2153\":1}}],[\"某个值不是int\",{\"1\":{\"1955\":1}}],[\"某对象\",{\"1\":{\"1800\":1}}],[\"某计算机系统中只有一台打印机和一台输入\",{\"1\":{\"1790\":1}}],[\"死锁解析\",{\"0\":{\"1796\":1}}],[\"死锁的实例\",{\"0\":{\"1795\":1}}],[\"死锁产生的具体原因\",{\"0\":{\"1791\":1}}],[\"死锁示例\",{\"0\":{\"1790\":1}}],[\"死锁检测\",{\"1\":{\"1789\":1}}],[\"死锁介绍\",{\"0\":{\"1788\":1}}],[\"死亡\",{\"1\":{\"1616\":1,\"1749\":1}}],[\"明确多线程运行代码中是否有多条语句操作共享数据\",{\"1\":{\"1773\":1}}],[\"明确多个线程是否有共享数据\",{\"1\":{\"1773\":1}}],[\"明确哪些代码是多线程运行的代码\",{\"1\":{\"1773\":1}}],[\"买票问题解决示例\",{\"0\":{\"1760\":1,\"1768\":1}}],[\"锁的补充\",{\"0\":{\"1797\":1}}],[\"锁提供了对共享资源的独占访问\",{\"1\":{\"1778\":1}}],[\"锁就被去掉\",{\"1\":{\"1771\":1}}],[\"锁\",{\"1\":{\"1759\":1,\"1797\":1}}],[\"俗称\",{\"1\":{\"1759\":1}}],[\"验证通过\",{\"1\":{\"3715\":1}}],[\"验证通过时\",{\"1\":{\"1755\":1}}],[\"验证节点\",{\"0\":{\"3330\":1}}],[\"验证\",{\"1\":{\"2275\":1}}],[\"验证码\",{\"0\":{\"469\":1},\"1\":{\"3078\":1}}],[\"电子设备\",{\"1\":{\"2697\":1}}],[\"电子打印\",{\"1\":{\"1755\":1}}],[\"电脑上写的程序最终要放到别人的服务器上去运行\",{\"1\":{\"269\":1}}],[\"卖票问题\",{\"0\":{\"1755\":1}}],[\"钱的数目是够的\",{\"1\":{\"1754\":2}}],[\"便会留在哪里\",{\"1\":{\"3441\":1}}],[\"便不再能进行全文检索\",{\"1\":{\"3179\":1}}],[\"便不可在以后的网络连接中使用\",{\"1\":{\"2214\":1}}],[\"便进入运行状态\",{\"1\":{\"1749\":1}}],[\"便于资源的统一利用\",{\"1\":{\"2998\":1}}],[\"便于线程管理\",{\"1\":{\"1813\":1}}],[\"便于功能的扩展\",{\"1\":{\"1362\":1}}],[\"便于管理\",{\"1\":{\"1335\":1}}],[\"便于修改\",{\"1\":{\"1305\":1}}],[\"便于外界调用\",{\"1\":{\"1301\":1}}],[\"低优先级只是获得调度的概率低\",{\"1\":{\"1736\":1}}],[\"低优先级的线程才执行\",{\"1\":{\"1735\":1}}],[\"低耦合\",{\"1\":{\"1300\":1}}],[\"抢占式\",{\"0\":{\"1733\":1}}],[\"释放连接引起的大量性能开销\",{\"1\":{\"2667\":1}}],[\"释放线路\",{\"1\":{\"2217\":1}}],[\"释放锁\",{\"0\":{\"1783\":1},\"1\":{\"1780\":1}}],[\"释放锁的操作\",{\"0\":{\"1774\":1}}],[\"释放当次执行权\",{\"1\":{\"1729\":1}}],[\"释放当前cpu的执行权\",{\"1\":{\"1727\":1}}],[\"释放本次的执行权\",{\"1\":{\"1729\":1}}],[\"睡眠线程\",{\"1\":{\"1729\":1}}],[\"睡眠\",{\"1\":{\"1727\":1}}],[\"统计所有记录数\",{\"1\":{\"3609\":1}}],[\"统计查询使用count\",{\"1\":{\"3609\":1}}],[\"统计查询\",{\"0\":{\"3609\":1}}],[\"统计信息\",{\"1\":{\"3142\":1,\"3160\":1}}],[\"统称为子线程\",{\"1\":{\"1713\":1}}],[\"统一的连接管理\",{\"1\":{\"2667\":1}}],[\"统一资源命名\",{\"1\":{\"2243\":1}}],[\"统一资源标识符\",{\"1\":{\"2243\":1,\"2845\":1}}],[\"统一资源定位符\",{\"1\":{\"2236\":1,\"2243\":1,\"2845\":1}}],[\"统一实现抽象方法\",{\"1\":{\"1628\":1}}],[\"统一视为obj类型\",{\"1\":{\"904\":1}}],[\"统一为json对象\",{\"1\":{\"644\":1}}],[\"统一响应格式\",{\"1\":{\"587\":1}}],[\"统一同类技术的整合方式\",{\"1\":{\"475\":1}}],[\"统一接口\",{\"1\":{\"464\":1}}],[\"统一管理时\",{\"1\":{\"208\":1}}],[\"统一版本管理\",{\"1\":{\"125\":1}}],[\"统一依赖管理\",{\"0\":{\"114\":1}}],[\"护线程是用来服务用户线程的\",{\"1\":{\"1711\":1}}],[\"占用的内存没有及时释放\",{\"1\":{\"1706\":1}}],[\"占位符读取maven对应的配置属性值\",{\"1\":{\"282\":1}}],[\"泄露\",{\"1\":{\"1706\":1}}],[\"临时修改\",{\"1\":{\"3348\":1}}],[\"临时的\",{\"1\":{\"1698\":1}}],[\"临时属性一般不用\",{\"1\":{\"260\":1}}],[\"临时属性失效\",{\"1\":{\"259\":1}}],[\"临时属性的优先级高于配置文件\",{\"1\":{\"257\":1}}],[\"临时属性配置\",{\"0\":{\"255\":1}}],[\"函数生成一个数字\",{\"1\":{\"3400\":1}}],[\"函数的每次操作都会将参数映射成一个新的元素\",{\"1\":{\"2463\":1}}],[\"函数返回的是一个对象\",{\"1\":{\"2417\":1}}],[\"函数体直接在使用的时候定义\",{\"1\":{\"2384\":1}}],[\"函数名组成\",{\"1\":{\"2383\":1}}],[\"函数接口只有一个方法\",{\"1\":{\"2363\":1}}],[\"函数式接口的抽象方法的形参列表和构造器的形参列表一致\",{\"1\":{\"2418\":1}}],[\"函数式接口的特点\",{\"0\":{\"2383\":1}}],[\"函数式接口本质上只是一个载体\",{\"1\":{\"2385\":1}}],[\"函数式接口本质上是穷举了所有函数的格式\",{\"1\":{\"2381\":1}}],[\"函数式接口要定义多少\",{\"0\":{\"2385\":1}}],[\"函数式接口\",{\"0\":{\"2380\":1},\"1\":{\"2361\":1,\"2387\":1}}],[\"函数\",{\"1\":{\"1826\":1}}],[\"函数也是数据\",{\"1\":{\"1696\":1}}],[\"函数型\",{\"1\":{\"976\":1,\"2392\":1}}],[\"滑动和加载图片分开\",{\"1\":{\"1694\":1}}],[\"利于系统的开发和扩展\",{\"1\":{\"2200\":1}}],[\"利于理解和修改\",{\"1\":{\"1693\":1}}],[\"利用集合和吧next放入循环来获取多条数据\",{\"1\":{\"2606\":1}}],[\"利用反射\",{\"1\":{\"2345\":1}}],[\"利用class提供的方法\",{\"1\":{\"2262\":1}}],[\"利用套接字\",{\"1\":{\"2209\":1}}],[\"利用properties类可以读取配置信息\",{\"1\":{\"1940\":1}}],[\"利用启动类启动服务\",{\"1\":{\"586\":1}}],[\"利用mybatisplus生成代码\",{\"1\":{\"588\":1}}],[\"利用mybatis\",{\"1\":{\"586\":1}}],[\"独立运行\",{\"1\":{\"1693\":1}}],[\"拿到浏览器发送请求时携带的cookie数据\",{\"1\":{\"3039\":1}}],[\"拿包装类替换\",{\"1\":{\"1959\":1}}],[\"拿还要多线程干什么\",{\"1\":{\"1692\":1}}],[\"拿两个集合的元素挨个比较\",{\"1\":{\"911\":1}}],[\"肯定是return语句\",{\"1\":{\"2364\":1}}],[\"肯定比用多个线程来完成用的时间更短\",{\"1\":{\"1692\":1}}],[\"肯定要遵守规范书写的\",{\"1\":{\"217\":1}}],[\"抑制编译器警告\",{\"1\":{\"1637\":1,\"1638\":1}}],[\"忽略了异常的处理\",{\"1\":{\"3206\":1}}],[\"忽略\",{\"1\":{\"3164\":1}}],[\"忽略此方法\",{\"1\":{\"1729\":1}}],[\"忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告\",{\"1\":{\"1638\":1}}],[\"忽略警告等\",{\"1\":{\"1636\":1}}],[\"忽略大小写\",{\"1\":{\"997\":1}}],[\"括号里的参数是构造方法的参数\",{\"1\":{\"1630\":1}}],[\"括起来的单个字符\",{\"1\":{\"1102\":1}}],[\"冬\",{\"1\":{\"1621\":1}}],[\"冬天喝温开水\",{\"1\":{\"3590\":1}}],[\"冬天来了\",{\"1\":{\"1631\":1}}],[\"冬天\",{\"1\":{\"1616\":1}}],[\"落叶\",{\"1\":{\"1621\":1}}],[\"秋天来了\",{\"1\":{\"1631\":1}}],[\"秋天\",{\"1\":{\"1630\":1}}],[\"秋\",{\"1\":{\"1621\":1}}],[\"好在\",{\"1\":{\"3484\":1}}],[\"好比不用每回拿商品\",{\"1\":{\"1951\":1}}],[\"好比商品\",{\"1\":{\"1950\":1}}],[\"好大\",{\"1\":{\"3485\":1,\"3489\":1}}],[\"好大雪\",{\"1\":{\"1621\":1}}],[\"好大雨\",{\"1\":{\"1621\":1}}],[\"好的命名规范非常难得\",{\"1\":{\"516\":1}}],[\"夏天来了\",{\"1\":{\"1631\":1}}],[\"夏天\",{\"1\":{\"1630\":1}}],[\"夏\",{\"1\":{\"1621\":1}}],[\"春夏秋冬\",{\"1\":{\"1630\":1}}],[\"春天来了\",{\"1\":{\"1631\":1}}],[\"春天是交配的季节\",{\"1\":{\"1630\":1}}],[\"春天\",{\"1\":{\"1630\":2}}],[\"春\",{\"1\":{\"1621\":1,\"1622\":2}}],[\"春节\",{\"1\":{\"1616\":1}}],[\"阻止自动提交\",{\"1\":{\"2625\":1}}],[\"阻止类外随便造对象\",{\"1\":{\"1488\":1}}],[\"阻塞当前进程2秒钟\",{\"1\":{\"1729\":1}}],[\"阻塞\",{\"1\":{\"1616\":1,\"1729\":1,\"1749\":1,\"2082\":1}}],[\"退货\",{\"1\":{\"1616\":1}}],[\"退出程序\",{\"1\":{\"2118\":1}}],[\"退出循环\",{\"1\":{\"1179\":1}}],[\"退出\",{\"1\":{\"54\":1}}],[\"信用卡\",{\"1\":{\"1616\":1}}],[\"信息总结\",{\"0\":{\"3329\":1}}],[\"信息\",{\"1\":{\"329\":1,\"1433\":1}}],[\"信息获取的方式\",{\"0\":{\"315\":1}}],[\"季节\",{\"1\":{\"1616\":1}}],[\"女\",{\"1\":{\"1616\":1}}],[\"男\",{\"1\":{\"1616\":1}}],[\"性别\",{\"1\":{\"1616\":1}}],[\"性能和可靠性的级别\",{\"1\":{\"3586\":1}}],[\"性能就会大大降低甚至不可用\",{\"1\":{\"3259\":1}}],[\"性能是非常差的\",{\"1\":{\"3098\":1}}],[\"性能调优\",{\"1\":{\"2768\":1}}],[\"性能更好\",{\"1\":{\"1779\":1}}],[\"性能\",{\"0\":{\"330\":1},\"1\":{\"504\":1}}],[\"性能监控\",{\"1\":{\"310\":1}}],[\"性能需求等\",{\"1\":{\"21\":1}}],[\"够长\",{\"1\":{\"1611\":1}}],[\"您输入的数据非法\",{\"1\":{\"1609\":2}}],[\"告诉代码的调用者\",{\"1\":{\"1607\":1}}],[\"告知此字符串是否匹配给定的正则表达式\",{\"1\":{\"681\":1}}],[\"告知对方来监控自己\",{\"1\":{\"315\":1}}],[\"告知监控服务器自己需要受到监控\",{\"1\":{\"314\":1}}],[\"资源文件等\",{\"1\":{\"2982\":1}}],[\"资源访问路径\",{\"1\":{\"2907\":1}}],[\"资源a现在无法处理该请求\",{\"1\":{\"2906\":1}}],[\"资源a处理完请求后将请求发给资源b\",{\"1\":{\"2899\":1}}],[\"资源b的访问路径\",{\"1\":{\"2907\":1}}],[\"资源b接收到请求后进行处理并最终给浏览器响应结果\",{\"1\":{\"2906\":1}}],[\"资源b路径\",{\"1\":{\"2900\":1}}],[\"资源b处理完后将结果响应给浏览器\",{\"1\":{\"2899\":1}}],[\"资源路径\",{\"1\":{\"2819\":2}}],[\"资源变动时\",{\"1\":{\"2750\":1}}],[\"资源分类\",{\"0\":{\"2695\":1}}],[\"资源重用\",{\"1\":{\"2667\":1}}],[\"资源的访问\",{\"1\":{\"2953\":1}}],[\"资源的关闭\",{\"1\":{\"2573\":1,\"2577\":1,\"2581\":1,\"2653\":1}}],[\"资源的地址\",{\"1\":{\"2236\":1}}],[\"资源的释放\",{\"0\":{\"1592\":1}}],[\"资源关闭\",{\"0\":{\"2062\":1}}],[\"资源\",{\"1\":{\"2037\":1,\"3698\":1}}],[\"资源不属于内存里的资源\",{\"1\":{\"2037\":1}}],[\"资源拥有\",{\"1\":{\"1688\":1}}],[\"资源耗尽等严重情况\",{\"1\":{\"1560\":1}}],[\"去修改数据表中指定的记录\",{\"1\":{\"2655\":1,\"2656\":1}}],[\"去重\",{\"0\":{\"2459\":1},\"1\":{\"2435\":1,\"2459\":1}}],[\"去catch中进行匹配\",{\"1\":{\"1588\":1}}],[\"去除重复元素\",{\"1\":{\"2459\":1}}],[\"去除桌面相关的api\",{\"1\":{\"1011\":1}}],[\"去除字符串首尾空白\",{\"1\":{\"667\":1}}],[\"捕获异常\",{\"1\":{\"3222\":1}}],[\"捕获异常后\",{\"1\":{\"1589\":1}}],[\"捕获异常的有关信息\",{\"0\":{\"1589\":1}}],[\"捕获异常的第一步是用try\",{\"1\":{\"1585\":1}}],[\"捕获到了空指针异常\",{\"1\":{\"1587\":1}}],[\"捕获到了数值异常\",{\"1\":{\"1587\":1}}],[\"捕获错误最理想的是在\",{\"1\":{\"1571\":1}}],[\"角标越位异常\",{\"1\":{\"1591\":1}}],[\"角标越界\",{\"0\":{\"1576\":1}}],[\"角色信息\",{\"1\":{\"3712\":1}}],[\"角色为useradminanydatabase\",{\"1\":{\"3708\":1}}],[\"角色为root\",{\"1\":{\"3708\":1}}],[\"角色说明\",{\"0\":{\"3704\":1}}],[\"角色之前\",{\"1\":{\"3696\":1}}],[\"角色与权限\",{\"0\":{\"3692\":1}}],[\"角色名\",{\"1\":{\"3671\":1,\"3673\":1,\"3674\":1}}],[\"角色分离\",{\"1\":{\"3533\":1}}],[\"角色介绍\",{\"0\":{\"55\":1}}],[\"角色\",{\"0\":{\"3697\":1},\"1\":{\"33\":1,\"3704\":1}}],[\"抓\",{\"1\":{\"1566\":1}}],[\"抛弃连接\",{\"1\":{\"2674\":1}}],[\"抛出的异常\",{\"1\":{\"1980\":1,\"2296\":1}}],[\"抛出异常的级别\",{\"1\":{\"3595\":1}}],[\"抛出异常可以省掉很多if\",{\"1\":{\"1607\":1}}],[\"抛出异常和返回一个特殊值\",{\"1\":{\"1607\":1}}],[\"抛出异常\",{\"1\":{\"947\":1}}],[\"抛\",{\"1\":{\"1566\":1}}],[\"臃肿\",{\"1\":{\"1564\":1}}],[\"含义\",{\"1\":{\"3127\":1}}],[\"含变量的类型\",{\"1\":{\"1552\":1}}],[\"含有抽象方法的类必须被声明为抽象类\",{\"1\":{\"1495\":1}}],[\"枚举与注解\",{\"0\":{\"3775\":1}}],[\"枚举对象间用逗号分割\",{\"1\":{\"1630\":1}}],[\"枚举对象如果有属性\",{\"1\":{\"1626\":1}}],[\"枚举动\",{\"1\":{\"1619\":1}}],[\"枚举类中也可以定义普通方法\",{\"1\":{\"1630\":1}}],[\"枚举类默认继承了\",{\"1\":{\"1625\":1}}],[\"枚举类的私有化构造函数\",{\"1\":{\"1630\":1}}],[\"枚举类的private\",{\"1\":{\"1630\":1}}],[\"枚举类的对象必须创建在开头\",{\"1\":{\"1630\":1}}],[\"枚举类的所有实例必须在枚举类中显式列出\",{\"1\":{\"1625\":1}}],[\"枚举类的构造器只能使用\",{\"1\":{\"1625\":1}}],[\"枚举类的使用\",{\"1\":{\"1619\":1}}],[\"枚举类的实现\",{\"0\":{\"1618\":1}}],[\"枚举类的特点\",{\"0\":{\"1617\":1}}],[\"枚举类\",{\"0\":{\"1615\":1}}],[\"枚举类型\",{\"1\":{\"1175\":1,\"1646\":1,\"1653\":1,\"1654\":1,\"1658\":1}}],[\"枚举\",{\"0\":{\"1614\":1},\"1\":{\"1543\":1,\"1661\":1,\"2264\":1,\"3029\":1}}],[\"连续回车两次\",{\"1\":{\"3298\":1}}],[\"连续添加10次数据\",{\"1\":{\"1867\":1}}],[\"连续操作\",{\"0\":{\"1542\":1}}],[\"连接分片集群\",{\"0\":{\"3741\":1}}],[\"连接前\",{\"1\":{\"3739\":1}}],[\"连接时需要勾选direct\",{\"1\":{\"3738\":1}}],[\"连接其他节点需要进行初始化\",{\"1\":{\"3737\":1}}],[\"连接单实例\",{\"0\":{\"3736\":1},\"1\":{\"3736\":1}}],[\"连接的是整个副本集\",{\"1\":{\"3734\":1}}],[\"连接的serversocket\",{\"1\":{\"2223\":1}}],[\"连接方式\",{\"0\":{\"3732\":1}}],[\"连接副本集\",{\"0\":{\"3677\":1,\"3680\":1,\"3729\":1,\"3737\":1}}],[\"连接后查看\",{\"0\":{\"3662\":1}}],[\"连接节点\",{\"0\":{\"3661\":1}}],[\"连接上任意一个节点后\",{\"1\":{\"3660\":1}}],[\"连接与断开mongodb连接相关\",{\"1\":{\"3571\":1}}],[\"连接mongodb\",{\"0\":{\"3566\":1},\"1\":{\"3708\":1,\"3731\":1}}],[\"连接mysql一般使用druid连接池\",{\"1\":{\"355\":1}}],[\"连接池应该放到之前建立的jdbc功能类\",{\"1\":{\"2675\":1}}],[\"连接池的最大数据库连接数量限定了这个连接池能占有的最大连接数\",{\"1\":{\"2665\":1}}],[\"连接池都将一直保证至少拥有这么多的连接数量\",{\"1\":{\"2665\":1}}],[\"连接池介绍\",{\"0\":{\"2659\":1}}],[\"连接池\",{\"0\":{\"2632\":1}}],[\"连接创建的细节被隐藏了\",{\"1\":{\"2244\":1}}],[\"连接断开\",{\"1\":{\"2207\":1}}],[\"连接usb\",{\"1\":{\"1512\":1}}],[\"连接运算\",{\"1\":{\"1445\":2}}],[\"连接字符串\",{\"1\":{\"668\":1}}],[\"连接数据库的密码\",{\"1\":{\"2674\":1}}],[\"连接数据库的用户名\",{\"1\":{\"2674\":1}}],[\"连接数据库的用户名密码\",{\"1\":{\"2540\":1}}],[\"连接数据库的url\",{\"1\":{\"2674\":1}}],[\"连接数据库\",{\"0\":{\"2533\":1,\"2544\":1},\"1\":{\"586\":1,\"588\":1,\"1401\":1,\"2531\":1,\"2540\":1,\"2666\":1}}],[\"连接信息在yml配置文件中配置\",{\"1\":{\"437\":1}}],[\"连接错误\",{\"1\":{\"420\":1}}],[\"连接测试\",{\"0\":{\"419\":1}}],[\"连接es\",{\"1\":{\"3352\":1}}],[\"连接es的服务非常复杂\",{\"1\":{\"415\":1}}],[\"连接es服务\",{\"0\":{\"415\":1}}],[\"连接服务器就需要用户名和密码了\",{\"1\":{\"390\":1}}],[\"连接\",{\"0\":{\"3570\":1},\"1\":{\"147\":1,\"2023\":1,\"2028\":1}}],[\"抽取的基类\",{\"1\":{\"1539\":1}}],[\"抽象接口\",{\"1\":{\"2531\":1}}],[\"抽象角色中\",{\"1\":{\"2325\":1}}],[\"抽象基类\",{\"0\":{\"2024\":1}}],[\"抽象方法的返回值类型即为构造器所属的类的类型\",{\"1\":{\"2418\":1}}],[\"抽象方法只有方法的声明\",{\"1\":{\"1495\":1}}],[\"抽象方法\",{\"0\":{\"1495\":1},\"1\":{\"1507\":2,\"1830\":1}}],[\"抽象类可用于模板方法设计模式\",{\"1\":{\"1498\":1}}],[\"抽象类不一定有抽象方法\",{\"1\":{\"1496\":1}}],[\"抽象类中还是存在构造器的\",{\"1\":{\"1494\":1}}],[\"抽象类\",{\"0\":{\"1494\":1}}],[\"抽象类与接口\",{\"0\":{\"1492\":1}}],[\"抽象概念的人\",{\"1\":{\"1255\":1}}],[\"怎么办\",{\"1\":{\"1534\":1}}],[\"怎么做的\",{\"1\":{\"567\":1}}],[\"遵循常用的命名规则即可\",{\"1\":{\"3020\":1}}],[\"遵循标识符的命名规则\",{\"1\":{\"1337\":1}}],[\"遵循标识符的规则和规范\",{\"1\":{\"1277\":1}}],[\"遵守上述约定的类可以用于若干工具或库\",{\"1\":{\"1531\":1}}],[\"事务\",{\"0\":{\"2626\":1}}],[\"事实上的国际标准\",{\"1\":{\"2174\":1}}],[\"事实查看jvm信息\",{\"1\":{\"336\":1}}],[\"事件\",{\"1\":{\"1531\":1}}],[\"北京\",{\"1\":{\"1515\":1}}],[\"断开数据库\",{\"1\":{\"2666\":1}}],[\"断开数据库连接\",{\"1\":{\"2661\":1}}],[\"断开客户端到服务器的连接\",{\"1\":{\"2217\":1}}],[\"断开usb\",{\"1\":{\"1512\":1}}],[\"断点续传\",{\"0\":{\"2140\":1}}],[\"断电==\",{\"1\":{\"1699\":1}}],[\"断定型\",{\"1\":{\"977\":1,\"2392\":1}}],[\"宽\",{\"1\":{\"1512\":1}}],[\"宽松绑定\",{\"0\":{\"210\":1,\"211\":1}}],[\"几乎一切操作\",{\"1\":{\"2435\":1}}],[\"几乎所有的设计模式都是面向接口编程的\",{\"1\":{\"1509\":1}}],[\"几何函数\",{\"0\":{\"770\":1}}],[\"仍会在异常代码处生成一个异常类的对象\",{\"1\":{\"1598\":1}}],[\"仍然调用的是重写以后的方法\",{\"1\":{\"1517\":1}}],[\"仍需定义为抽象类\",{\"1\":{\"1509\":1}}],[\"仍可以调用\",{\"1\":{\"1184\":1}}],[\"制定好后大家都要遵守\",{\"1\":{\"1506\":1}}],[\"制作业务层测试类\",{\"1\":{\"614\":1}}],[\"制作数据层测试\",{\"1\":{\"614\":1}}],[\"鼠标\",{\"1\":{\"1505\":1}}],[\"办理具体的业务\",{\"1\":{\"1500\":1}}],[\"预期中\",{\"1\":{\"3485\":1}}],[\"预先在缓冲池中放入一定数量的连接\",{\"1\":{\"2664\":1}}],[\"预编译字符串示例\",{\"1\":{\"2569\":1}}],[\"预编译sql语句\",{\"0\":{\"2569\":1},\"1\":{\"2573\":1,\"2577\":1,\"2581\":1,\"2634\":1,\"2653\":1}}],[\"预编译sql语句与占位符\",{\"0\":{\"2568\":1}}],[\"预约取号\",{\"1\":{\"1500\":1}}],[\"预设好了几乎所有依赖的版本\",{\"1\":{\"125\":1}}],[\"银行卡\",{\"1\":{\"1616\":1}}],[\"银行的业务流程是固定的\",{\"1\":{\"1500\":1}}],[\"银行业务流程\",{\"0\":{\"1500\":1}}],[\"花费的时间为\",{\"1\":{\"1499\":1,\"2621\":1,\"2624\":1}}],[\"供下次启动时访问\",{\"1\":{\"3274\":1}}],[\"供开发商开发数据库驱动程序用\",{\"1\":{\"2531\":1}}],[\"供应用程序开发人员使用\",{\"1\":{\"2531\":1}}],[\"供应者\",{\"1\":{\"2451\":1}}],[\"供不同子类实现\",{\"1\":{\"1498\":1}}],[\"供给了一个值\",{\"1\":{\"975\":1,\"2392\":1}}],[\"供给型\",{\"1\":{\"975\":1,\"2392\":1}}],[\"达到匿名对象同样的效果\",{\"1\":{\"1497\":1}}],[\"达到简化配置的目的\",{\"1\":{\"124\":1}}],[\"回给客户端\",{\"1\":{\"3415\":1}}],[\"回车\",{\"1\":{\"3664\":1}}],[\"回车一次就可以输入一个名字\",{\"1\":{\"3298\":1}}],[\"回车采用默认名\",{\"1\":{\"3296\":1}}],[\"回车输入密码\",{\"1\":{\"3291\":1,\"3322\":1}}],[\"回滚事务\",{\"0\":{\"2630\":1}}],[\"回收站一直维护着仅有的一个实例\",{\"1\":{\"1491\":1}}],[\"回收站\",{\"1\":{\"1491\":1}}],[\"回头再学\",{\"1\":{\"11\":1}}],[\"网上包括官方手册\",{\"1\":{\"3334\":1}}],[\"网站的计数器\",{\"1\":{\"1491\":1}}],[\"网络新梗\",{\"1\":{\"3484\":1}}],[\"网络上查询的教程也都是基于区域网的\",{\"1\":{\"3324\":1}}],[\"网络上具有唯一标识的ip地址和端口号组合在一起才能构成唯一能识别的标识符套接字\",{\"1\":{\"2209\":1}}],[\"网络协议\",{\"0\":{\"2197\":1}}],[\"网络通信三要素\",{\"0\":{\"2697\":1}}],[\"网络通信其实就是socket间的通信\",{\"1\":{\"2209\":1}}],[\"网络通信协议\",{\"0\":{\"2175\":1,\"2198\":1,\"2199\":1},\"1\":{\"2173\":1,\"2174\":1}}],[\"网络通信的要素\",{\"0\":{\"2173\":1}}],[\"网络通讯等\",{\"1\":{\"2021\":1}}],[\"网络基础\",{\"0\":{\"2172\":1}}],[\"网络编程中的主要问题\",{\"1\":{\"2172\":1}}],[\"网络编程的目的\",{\"1\":{\"2172\":1}}],[\"网络编程\",{\"0\":{\"3779\":1},\"1\":{\"2082\":1}}],[\"网络编程socket等资源\",{\"1\":{\"1590\":1}}],[\"网络连接中断\",{\"1\":{\"1561\":1}}],[\"网络\",{\"1\":{\"329\":1,\"3026\":1}}],[\"网络问题\",{\"0\":{\"97\":1},\"1\":{\"3532\":1}}],[\"延长再均衡的时间\",{\"1\":{\"3509\":1}}],[\"延时\",{\"1\":{\"3444\":1}}],[\"延迟了数组的创建\",{\"1\":{\"1870\":1}}],[\"延迟到运行时出现\",{\"1\":{\"1595\":1}}],[\"延迟对象的创建\",{\"1\":{\"1490\":1}}],[\"延展\",{\"1\":{\"1361\":1}}],[\"懒汉式\",{\"0\":{\"1489\":1},\"1\":{\"1490\":1}}],[\"私有端口\",{\"1\":{\"2186\":1}}],[\"私有地址\",{\"1\":{\"2182\":1}}],[\"私有化类的构造器\",{\"1\":{\"1488\":2,\"1489\":1,\"1620\":1,\"1621\":1,\"1769\":1}}],[\"私有属性无权访问\",{\"1\":{\"1304\":1}}],[\"饿汉式是线程安全的\",{\"1\":{\"1490\":1}}],[\"饿汉式和懒汉式的对比\",{\"0\":{\"1490\":1}}],[\"饿汉式\",{\"0\":{\"1488\":1},\"1\":{\"1490\":1}}],[\"习惯上声明为static的\",{\"1\":{\"1485\":1}}],[\"习惯性的要有空参构造器\",{\"1\":{\"427\":1}}],[\"又在剩下的从节点中选中其他节点为\",{\"1\":{\"3642\":1}}],[\"又相当的灵活\",{\"1\":{\"3546\":1}}],[\"又为\",{\"1\":{\"3532\":1}}],[\"又分两类分别存放在两个地方\",{\"1\":{\"2989\":1}}],[\"又分为两种形式\",{\"1\":{\"1562\":1}}],[\"又称词条\",{\"1\":{\"3429\":1}}],[\"又称正向索引\",{\"1\":{\"3420\":1}}],[\"又称多条件查询\",{\"1\":{\"3229\":1}}],[\"又称组合查询\",{\"1\":{\"3168\":1}}],[\"又称增强for循环\",{\"1\":{\"1850\":1}}],[\"又称为静态变量\",{\"1\":{\"1475\":1}}],[\"又可以使用post方法访问\",{\"1\":{\"2861\":1}}],[\"又可以使用if\",{\"1\":{\"1163\":1,\"1177\":1}}],[\"又可以作为一个输出流\",{\"1\":{\"2128\":1}}],[\"又可以作为future得到callable的返回值\",{\"1\":{\"1808\":1}}],[\"又去申请获得锁l2\",{\"1\":{\"1794\":1}}],[\"又提出请求使用正被p1占用着的输入设备\",{\"1\":{\"1790\":1}}],[\"又叫main线程\",{\"1\":{\"1713\":1}}],[\"又因为可能会产生异常\",{\"1\":{\"2285\":1}}],[\"又因为main\",{\"1\":{\"1541\":1}}],[\"又因为java虚拟机在执行main\",{\"1\":{\"1541\":1}}],[\"匿名函数\",{\"1\":{\"2359\":1}}],[\"匿名内部类\",{\"1\":{\"2264\":1}}],[\"匿名内部类的类体部分\",{\"1\":{\"1463\":1}}],[\"匿名方法\",{\"1\":{\"1497\":1}}],[\"匿名类对象只能使用多态形式引用\",{\"1\":{\"1464\":1}}],[\"匿名类只能有一个对象\",{\"1\":{\"1464\":1}}],[\"匿名类必须继承父类或实现接口\",{\"1\":{\"1464\":1}}],[\"匿名类不能定义任何静态成员\",{\"1\":{\"1462\":1}}],[\"匿名类\",{\"0\":{\"1462\":1},\"1\":{\"1497\":1}}],[\"匿名对象只能调用一次\",{\"1\":{\"1267\":1}}],[\"匿名对象\",{\"0\":{\"1267\":1},\"1\":{\"1512\":1}}],[\"拆解与标准化的\",{\"1\":{\"3459\":1}}],[\"拆解成n个关键字\",{\"1\":{\"3459\":1}}],[\"拆箱\",{\"1\":{\"1442\":1}}],[\"拆分的数目\",{\"1\":{\"1001\":1}}],[\"纯数值的字符串也可以作为参数\",{\"1\":{\"1440\":1}}],[\"纯理论知识\",{\"1\":{\"11\":1}}],[\"装载jdbc驱动程序等常规工作的工具类\",{\"1\":{\"2682\":1}}],[\"装载进内存的\",{\"1\":{\"2279\":1}}],[\"装载时进行新旧字符的替换\",{\"1\":{\"817\":1,\"2056\":1}}],[\"装箱\",{\"1\":{\"1440\":1}}],[\"久而久之\",{\"1\":{\"1429\":1}}],[\"永远返回是\",{\"1\":{\"1428\":2}}],[\"永远满足\",{\"1\":{\"1179\":1}}],[\"像\",{\"1\":{\"3441\":1,\"3464\":2}}],[\"像数据库连接\",{\"1\":{\"1590\":1}}],[\"像个钩子\",{\"1\":{\"1500\":2}}],[\"像string\",{\"1\":{\"1427\":1,\"1433\":1}}],[\"像日期和时间这样的类应该是不可变的\",{\"1\":{\"708\":1}}],[\"克隆\",{\"1\":{\"1424\":1}}],[\"隔代转型\",{\"0\":{\"1419\":1}}],[\"晚绑定\",{\"1\":{\"1407\":2}}],[\"各节点统一\",{\"1\":{\"3337\":1}}],[\"各个聚合操作的语法如下\",{\"1\":{\"3188\":1}}],[\"各个子类重写了welcome\",{\"1\":{\"1406\":1}}],[\"各司其职\",{\"1\":{\"3004\":1}}],[\"各层互不影响\",{\"1\":{\"2200\":1}}],[\"各种有自己的内存空间\",{\"1\":{\"1550\":1}}],[\"各种动态加载bean的注解也完全不用写了\",{\"1\":{\"559\":1}}],[\"各种表示bean的类型\",{\"1\":{\"541\":1}}],[\"各种类型的数据操作接口\",{\"1\":{\"379\":1}}],[\"经过实测\",{\"1\":{\"3596\":1}}],[\"经过简单的循环向字符串中添加数字\",{\"1\":{\"695\":1}}],[\"经验\",{\"1\":{\"1969\":1}}],[\"经常需要强制类型转换\",{\"1\":{\"1946\":1}}],[\"经常创建和销毁\",{\"1\":{\"1812\":1}}],[\"经常把run\",{\"1\":{\"1717\":1}}],[\"经常要在可能出现错误的地方加上检测的代码\",{\"1\":{\"1564\":1}}],[\"经常会遇到这样的情景\",{\"1\":{\"1400\":1}}],[\"外部版本号不仅在索引和删除请求是可以指定\",{\"1\":{\"3498\":1}}],[\"外部的版本号作为文档的新\",{\"1\":{\"3498\":1}}],[\"外部系统版本控制\",{\"0\":{\"3498\":1}}],[\"外部dtd\",{\"1\":{\"3026\":1}}],[\"外部集合内嵌套了班级集合\",{\"1\":{\"2471\":1}}],[\"外部类\",{\"1\":{\"2264\":1}}],[\"外部类访问成员内部类的成员\",{\"1\":{\"1455\":1}}],[\"外部类不能由private和protected修饰\",{\"1\":{\"1453\":1}}],[\"外循环是用来循环读取数据的\",{\"1\":{\"2054\":1}}],[\"外其他完全一样的方法了\",{\"1\":{\"1400\":1}}],[\"外层元素本质上是一维数组\",{\"1\":{\"1243\":1}}],[\"外层元素的初始化值为\",{\"1\":{\"1241\":2}}],[\"外层元素的个数\",{\"1\":{\"1239\":1}}],[\"外层元素的值是一个一维数组\",{\"1\":{\"1236\":1}}],[\"外层元素能访问\",{\"1\":{\"1238\":1}}],[\"外层元素必须初始化\",{\"1\":{\"1237\":1}}],[\"外层2个元素\",{\"1\":{\"1233\":1}}],[\"外层数组的长度\",{\"1\":{\"1239\":2}}],[\"外层数组元素的值是一个内存地址\",{\"1\":{\"1243\":1}}],[\"外层数组元素\",{\"1\":{\"1230\":1}}],[\"外层数组\",{\"1\":{\"1230\":1}}],[\"外层循环控制行数\",{\"1\":{\"1200\":1}}],[\"看下三个mongodb服务是否启动成功\",{\"1\":{\"3659\":1}}],[\"看到string类\",{\"1\":{\"1429\":1}}],[\"看的是子类的对象\",{\"1\":{\"1395\":1}}],[\"看的是父类的引用\",{\"1\":{\"1395\":1}}],[\"看右边\",{\"1\":{\"1395\":1}}],[\"看左边\",{\"1\":{\"1395\":1}}],[\"间隔\",{\"1\":{\"3513\":1}}],[\"间接父类\",{\"1\":{\"1363\":1}}],[\"间接继承的父类称为\",{\"1\":{\"1363\":1}}],[\"间的随机数\",{\"1\":{\"761\":1}}],[\"称为单字段索引\",{\"1\":{\"3619\":1}}],[\"称为动态资源\",{\"1\":{\"2695\":1}}],[\"称为静态资源\",{\"1\":{\"2695\":1}}],[\"称为外部迭代\",{\"1\":{\"2485\":1}}],[\"称为函数式接口\",{\"1\":{\"2380\":1}}],[\"称为向下转型\",{\"1\":{\"1411\":1}}],[\"称为多态\",{\"1\":{\"1411\":1}}],[\"称为\",{\"1\":{\"1363\":1,\"1526\":1,\"2453\":1}}],[\"超级权限\",{\"1\":{\"3704\":1}}],[\"超级账号\",{\"1\":{\"3704\":1}}],[\"超级用户角色\",{\"1\":{\"3703\":1}}],[\"超链接\",{\"1\":{\"2915\":1}}],[\"超类\",{\"1\":{\"1360\":1}}],[\"超过\",{\"1\":{\"3413\":1,\"3516\":1}}],[\"超过6个节点\",{\"1\":{\"3393\":1}}],[\"超过这个阈值\",{\"1\":{\"3259\":1}}],[\"超过时限则放弃对该锁的请求\",{\"1\":{\"1789\":1}}],[\"超过范围的索引\",{\"1\":{\"1245\":1}}],[\"超过一个字符会报错\",{\"1\":{\"1101\":1}}],[\"超过最大缓存数量是否持久化到磁盘\",{\"1\":{\"478\":1}}],[\"超过该大小就新建日志文件\",{\"1\":{\"304\":1}}],[\"派生类\",{\"1\":{\"1360\":1}}],[\"层的索引建立\",{\"1\":{\"3513\":1}}],[\"层级可以用包名的点区分\",{\"1\":{\"1337\":1}}],[\"层层进\",{\"1\":{\"1236\":1}}],[\"顶层包名\",{\"1\":{\"1336\":1}}],[\"划分文本\",{\"1\":{\"3466\":1}}],[\"划分项目层次\",{\"1\":{\"1335\":1}}],[\"划分成base类加载器与restart类加载器\",{\"1\":{\"181\":1}}],[\"互不影响\",{\"1\":{\"3004\":1,\"3036\":1}}],[\"互不干扰\",{\"1\":{\"1344\":1,\"1554\":1}}],[\"互补\",{\"1\":{\"2461\":1}}],[\"互相干扰\",{\"1\":{\"1554\":1,\"1556\":1}}],[\"互相this\",{\"1\":{\"1330\":1}}],[\"互为引用\",{\"1\":{\"1554\":1,\"1556\":1}}],[\"互斥\",{\"1\":{\"1172\":1}}],[\"省去了直接操作消息头\",{\"1\":{\"3048\":1}}],[\"省去了传递class<t>\",{\"1\":{\"2651\":1}}],[\"省去了切换线程\",{\"1\":{\"1692\":1}}],[\"省去重新编译的过程\",{\"1\":{\"2552\":1}}],[\"省的再写一份\",{\"1\":{\"1330\":1}}],[\"省略很多非核心步骤\",{\"1\":{\"2831\":1}}],[\"省略驱动的注册\",{\"0\":{\"2548\":1}}],[\"省略1参的小括号\",{\"0\":{\"2374\":1}}],[\"省略数据类型\",{\"0\":{\"2372\":1}}],[\"省略这一对\",{\"1\":{\"2366\":1}}],[\"省略了exception处理\",{\"1\":{\"2625\":1}}],[\"省略了异常处理\",{\"1\":{\"2136\":1}}],[\"省略了public\",{\"1\":{\"1507\":2}}],[\"省略\",{\"0\":{\"2378\":1},\"1\":{\"2126\":1,\"2127\":1,\"2151\":1,\"2152\":1,\"2156\":1,\"2157\":1,\"2366\":1}}],[\"省略break的用法\",{\"0\":{\"1176\":1}}],[\"省略大括号\",{\"1\":{\"1171\":1}}],[\"省略类名\",{\"1\":{\"1058\":1}}],[\"省略包名\",{\"1\":{\"1058\":1}}],[\"父file对象\",{\"1\":{\"2017\":1}}],[\"父路径\",{\"1\":{\"2016\":1}}],[\"父子类之间出现了同名的方法或属性\",{\"1\":{\"1380\":1}}],[\"父类有泛型\",{\"1\":{\"1970\":1}}],[\"父类构造器\",{\"1\":{\"1463\":1}}],[\"父类转子类\",{\"0\":{\"1414\":1},\"1\":{\"1411\":1}}],[\"父类根据赋给它的不同子类对象\",{\"1\":{\"1404\":1}}],[\"父类中不具备子类特有的方法\",{\"1\":{\"1395\":1}}],[\"父类中的空参构造器就会被删除\",{\"1\":{\"1388\":1}}],[\"父类中的叫被重写的方法\",{\"1\":{\"1370\":1}}],[\"父类没有空构造器的情况\",{\"0\":{\"1388\":1}}],[\"父类也有这个属性\",{\"1\":{\"1381\":1}}],[\"父类被重写的方法的返回值类型是基本数据类型\",{\"1\":{\"1373\":1}}],[\"父类被重写的方法的返回值类型是a类型\",{\"1\":{\"1373\":1}}],[\"父类被重写的方法的返回值类型是void\",{\"1\":{\"1373\":1}}],[\"父类实例\",{\"1\":{\"1366\":1}}],[\"父类的引用必须指向子类的对象\",{\"1\":{\"1414\":1}}],[\"父类的引用指向子类的对象\",{\"1\":{\"1395\":1}}],[\"父类的引用指向子类的方法\",{\"1\":{\"1376\":1}}],[\"父类的父类也是父类\",{\"1\":{\"1363\":1}}],[\"父类的构造器不可被子类继承\",{\"1\":{\"1321\":1}}],[\"父类\",{\"1\":{\"1360\":1,\"1395\":1,\"1398\":1,\"1399\":1}}],[\"父工程的打包方式应该是pom\",{\"1\":{\"172\":1}}],[\"父工程的设置编译插件\",{\"1\":{\"169\":1}}],[\"父工程\",{\"0\":{\"169\":1}}],[\"父工程可以管理子模块的依赖\",{\"1\":{\"167\":1}}],[\"父工程上右键\",{\"1\":{\"162\":1}}],[\"父工程只负责管理依赖\",{\"1\":{\"161\":1}}],[\"父工程规定项目所需依赖的版本\",{\"1\":{\"115\":1}}],[\"隐式无参构造器\",{\"1\":{\"1318\":1}}],[\"隐藏一个类中不需要对外提供的实现细节\",{\"1\":{\"1305\":1}}],[\"隐藏对象内部的复杂性\",{\"1\":{\"1301\":1}}],[\"隐藏非必要文件\",{\"0\":{\"576\":1}}],[\"隐藏无用的文件\",{\"0\":{\"103\":1}}],[\"过半原则\",{\"0\":{\"3275\":1}}],[\"过期时间\",{\"1\":{\"3051\":1}}],[\"过程中\",{\"1\":{\"3527\":1}}],[\"过程\",{\"0\":{\"3003\":1}}],[\"过去由于并未通过微服务将机器资源进行隔离\",{\"1\":{\"2998\":1}}],[\"过于冗余\",{\"1\":{\"2324\":1}}],[\"过多的if\",{\"1\":{\"1564\":1}}],[\"过滤查询指的是返回指定的字段\",{\"1\":{\"3232\":1}}],[\"过滤查询\",{\"0\":{\"3232\":1},\"1\":{\"3234\":1}}],[\"过滤器\",{\"1\":{\"3464\":2}}],[\"过滤器的优先级\",{\"0\":{\"2954\":1}}],[\"过滤器2\",{\"1\":{\"2953\":2}}],[\"过滤器1\",{\"1\":{\"2953\":2}}],[\"过滤器链\",{\"0\":{\"2952\":1}}],[\"过滤器都会被执行\",{\"1\":{\"2949\":1}}],[\"过滤器正常关闭前的操作\",{\"1\":{\"2945\":1}}],[\"过滤和映射数据等操作\",{\"1\":{\"2436\":1}}],[\"过滤\",{\"1\":{\"1316\":1,\"2435\":1,\"2831\":1}}],[\"过时了\",{\"1\":{\"272\":1}}],[\"禁止访问非public修饰的类内部成员\",{\"1\":{\"2317\":1}}],[\"禁止外部访问\",{\"1\":{\"1304\":1}}],[\"禁用此套接字的输出流\",{\"1\":{\"2214\":1}}],[\"禁用\",{\"1\":{\"54\":1}}],[\"混乱或安全性问题\",{\"1\":{\"1302\":1}}],[\"尽力而为\",{\"1\":{\"2210\":1}}],[\"尽可能保持一致性\",{\"1\":{\"1897\":1}}],[\"尽量不要选别的路径\",{\"1\":{\"2992\":1}}],[\"尽量不要在servlet中定义成员变量\",{\"1\":{\"2795\":1}}],[\"尽量避免嵌套同步\",{\"1\":{\"1789\":1}}],[\"尽量减少同步资源的定义\",{\"1\":{\"1789\":1}}],[\"尽量使用第一种写法\",{\"1\":{\"1297\":1}}],[\"尽管有68个新的公开类型\",{\"1\":{\"711\":1}}],[\"机构签发的证书\",{\"1\":{\"3294\":1}}],[\"机制\",{\"1\":{\"1294\":1}}],[\"机器语言\",{\"1\":{\"1020\":1}}],[\"传统数据库的缺点\",{\"0\":{\"3097\":1}}],[\"传统的模式基本是按以下步骤\",{\"0\":{\"2661\":1}}],[\"传输协议\",{\"1\":{\"2238\":1,\"2697\":1}}],[\"传输协议>\",{\"1\":{\"2237\":1}}],[\"传输完毕\",{\"1\":{\"2204\":1}}],[\"传输前\",{\"1\":{\"2204\":1}}],[\"传输层和应用层\",{\"1\":{\"2203\":1}}],[\"传输层协议中有两个非常重要的协议\",{\"1\":{\"2202\":1}}],[\"传输层协议\",{\"0\":{\"2202\":1}}],[\"传输控制协议\",{\"1\":{\"2203\":1}}],[\"传输控制协议tcp\",{\"1\":{\"2202\":1}}],[\"传输控制步骤\",{\"1\":{\"2199\":1}}],[\"传输代码\",{\"1\":{\"2199\":1}}],[\"传参\",{\"1\":{\"1443\":1}}],[\"传递了进去\",{\"1\":{\"1741\":1}}],[\"传递性\",{\"1\":{\"1428\":1}}],[\"传递的参数有符合条件的非可变形参方法\",{\"1\":{\"1295\":1}}],[\"传递完之后\",{\"1\":{\"1292\":1}}],[\"传入我们想用的数据库对象\",{\"1\":{\"1401\":1}}],[\"传入的参数个数可以是\",{\"1\":{\"1295\":1}}],[\"传入方法内\",{\"1\":{\"1291\":1}}],[\"传入模糊查询的条件作为参数\",{\"1\":{\"631\":1}}],[\"跟日志相关的配置\",{\"1\":{\"2673\":1}}],[\"跟服务器的交互太频繁\",{\"1\":{\"2622\":1}}],[\"跟泛型无关\",{\"1\":{\"2372\":1}}],[\"跟上面区别不大\",{\"1\":{\"2085\":1}}],[\"跟方法的权限修饰符\",{\"1\":{\"1285\":1}}],[\"跟本地时间有关的类有三个\",{\"1\":{\"712\":1}}],[\"岁\",{\"1\":{\"1282\":1}}],[\"岁的\",{\"1\":{\"550\":2,\"554\":2}}],[\"递归一定要向已知方向递归\",{\"1\":{\"1283\":1}}],[\"递归方法\",{\"0\":{\"1283\":1}}],[\"递归\",{\"1\":{\"1282\":1}}],[\"递归创建文件目录\",{\"1\":{\"805\":1}}],[\"交互很多\",{\"1\":{\"3298\":1}}],[\"交互方法\",{\"0\":{\"2242\":1}}],[\"交替打印\",{\"1\":{\"1798\":1,\"1804\":1}}],[\"交替遍历\",{\"1\":{\"1722\":1}}],[\"交配季节\",{\"1\":{\"1621\":1,\"1622\":2}}],[\"交由调用者处理\",{\"1\":{\"1281\":1}}],[\"交换两个变量的值\",{\"1\":{\"1293\":1}}],[\"交换两个变量\",{\"1\":{\"1292\":1}}],[\"交换元素位置\",{\"1\":{\"933\":1}}],[\"交换机的声明在专门的配置类中\",{\"1\":{\"437\":1}}],[\"针对lucene全文检索优化的查询分析ikqueryparser\",{\"1\":{\"3477\":1}}],[\"针对\",{\"1\":{\"2655\":1,\"2656\":1}}],[\"针对指定的id查询得到对应的customer对象\",{\"1\":{\"2655\":1,\"2656\":1}}],[\"针对指定的id\",{\"1\":{\"2655\":1,\"2656\":1}}],[\"针对custom表的通用查询操作\",{\"0\":{\"2600\":1}}],[\"针对企业客户的需求\",{\"1\":{\"2351\":1}}],[\"针对不通的场景\",{\"1\":{\"3437\":1}}],[\"针对不通的方法进行增强\",{\"0\":{\"2335\":1}}],[\"针对不同表\",{\"0\":{\"2603\":1}}],[\"针对不同的字符类型会有不同的字符集\",{\"1\":{\"1103\":1}}],[\"针对不同的数据类型和排序方式\",{\"1\":{\"891\":1}}],[\"针对任何你想动态加载\",{\"1\":{\"2263\":1}}],[\"针对于搜索性能要求不高\",{\"1\":{\"3513\":1}}],[\"针对于不同的表的通用的查询操作\",{\"1\":{\"2603\":1}}],[\"针对于编译时异常\",{\"1\":{\"1595\":1}}],[\"针对于有返回值类型的方法\",{\"1\":{\"1278\":1}}],[\"针对八种基本数据类型定义相应的引用类型\",{\"1\":{\"1437\":1}}],[\"④属性\",{\"1\":{\"3020\":1}}],[\"④拼接预编译sql字符串\",{\"1\":{\"2566\":1}}],[\"④获取代理对象后\",{\"1\":{\"2333\":1}}],[\"④将此callable接口实现类的对象作为参数传递到futuretask构造器中\",{\"1\":{\"1809\":1}}],[\"④线程池\",{\"1\":{\"1710\":1}}],[\"④其他操作\",{\"1\":{\"1626\":1}}],[\"④\",{\"1\":{\"1274\":1,\"1323\":1}}],[\"④有了对象以后\",{\"1\":{\"1274\":1}}],[\"③标签\",{\"1\":{\"3020\":1}}],[\"③tomcat将request和response两个对象传递给service方法\",{\"1\":{\"2831\":1}}],[\"③在弹出的窗口\",{\"1\":{\"2746\":1}}],[\"③创建数据表的实现\",{\"1\":{\"2644\":1}}],[\"③创建callable接口实现类的对象\",{\"1\":{\"1809\":1}}],[\"③获取链接\",{\"1\":{\"2566\":1}}],[\"③如图\",{\"1\":{\"2538\":1}}],[\"③string\",{\"1\":{\"2345\":1}}],[\"③通过获取的类和接口\",{\"1\":{\"2333\":1}}],[\"③实现callable接口\",{\"1\":{\"1710\":1}}],[\"③减少配置\",{\"1\":{\"1637\":1}}],[\"③私有化类的构造器\",{\"1\":{\"1626\":1}}],[\"③当父类和子类中拥有相同的属性或方法时\",{\"1\":{\"1383\":1}}],[\"③\",{\"1\":{\"1274\":1,\"1323\":1}}],[\"③构造器中初始化\",{\"1\":{\"1274\":1}}],[\"②指令\",{\"1\":{\"3020\":1}}],[\"②tomcat服务器\",{\"1\":{\"2831\":1}}],[\"②定义数据表的接口\",{\"1\":{\"2644\":1}}],[\"②定制排序\",{\"1\":{\"1904\":1}}],[\"②加载驱动\",{\"1\":{\"2566\":1}}],[\"②在弹出的窗口中点击右下角的edit\",{\"1\":{\"2746\":1}}],[\"②在idea中\",{\"1\":{\"2538\":1}}],[\"②在编译时进行格式检查\",{\"1\":{\"1637\":1}}],[\"②使用flatmap从年级集合中\",{\"1\":{\"2469\":1}}],[\"②human\",{\"1\":{\"2345\":1}}],[\"②通过反射获取该对象的类和所实现的所有接口\",{\"1\":{\"2333\":1}}],[\"②当通过代理类的对象调用方法a时\",{\"1\":{\"2332\":1}}],[\"②当本类中没有找到时\",{\"1\":{\"1383\":1}}],[\"②双重循环\",{\"1\":{\"2054\":1}}],[\"②jdk8\",{\"1\":{\"1925\":1}}],[\"②判断要添加的位置上有没有其他元素\",{\"1\":{\"1891\":1}}],[\"②实现call方法\",{\"1\":{\"1809\":1}}],[\"②实现runnable接口的方式\",{\"1\":{\"1710\":1}}],[\"②可选\",{\"1\":{\"1626\":1}}],[\"②跟⑤谁在前就先执行谁\",{\"1\":{\"1274\":1}}],[\"②\",{\"1\":{\"1274\":1,\"1323\":1,\"1566\":1}}],[\"②显式初始化\",{\"1\":{\"1274\":1}}],[\"①文档声明\",{\"1\":{\"3020\":1}}],[\"①tomcat服务器会根据请求url中的资源路径\",{\"1\":{\"2831\":1}}],[\"①右上角点击\",{\"1\":{\"2746\":1}}],[\"①定义dao接口\",{\"1\":{\"2644\":1}}],[\"①读取配置文件中的数据库连接信息\",{\"1\":{\"2566\":1}}],[\"①将jar包移动到项目目录下\",{\"1\":{\"2538\":1}}],[\"①使用map从学生集合中获取每个学生的年龄\",{\"1\":{\"2469\":1}}],[\"①superman\",{\"1\":{\"2345\":1}}],[\"①实例化被代理类\",{\"1\":{\"2333\":1}}],[\"①根据加载到内存中的被代理类\",{\"1\":{\"2332\":1}}],[\"①read\",{\"1\":{\"2054\":1}}],[\"①jdk7\",{\"1\":{\"1925\":1}}],[\"①自然排序\",{\"1\":{\"1904\":1}}],[\"①向hashset中添加元素a\",{\"1\":{\"1891\":1}}],[\"①创建一个实现callable的实现类\",{\"1\":{\"1809\":1}}],[\"①继承thread类的方式\",{\"1\":{\"1710\":1}}],[\"①用于文档注释\",{\"1\":{\"1637\":1}}],[\"①提供枚举对象\",{\"1\":{\"1626\":1}}],[\"①先从本类中查找是否有该属性或方法\",{\"1\":{\"1383\":1}}],[\"①\",{\"1\":{\"1274\":1,\"1323\":1,\"1566\":1}}],[\"①默认初始化\",{\"1\":{\"1274\":1}}],[\"符号\",{\"1\":{\"1426\":1,\"1637\":1}}],[\"符号两边的\",{\"1\":{\"1426\":1}}],[\"符号位是1\",{\"1\":{\"1157\":1}}],[\"符号位不变\",{\"1\":{\"1121\":2}}],[\"符号位在最高位\",{\"1\":{\"1120\":1}}],[\"符号位\",{\"0\":{\"1120\":1},\"1\":{\"1121\":1}}],[\"符合命名规则和规范即可\",{\"1\":{\"1270\":1}}],[\"属于string类\",{\"1\":{\"2413\":1}}],[\"属于标识符\",{\"1\":{\"1270\":1,\"1277\":1}}],[\"属性配置\",{\"1\":{\"2820\":1}}],[\"属性类型是字符串\",{\"1\":{\"2674\":1}}],[\"属性列表中每个键及其对应值都是一个字符串\",{\"1\":{\"2545\":1}}],[\"属性包括\",{\"1\":{\"2457\":1,\"2462\":1}}],[\"属性等\",{\"1\":{\"1959\":1}}],[\"属性为季节名和季节描述\",{\"1\":{\"1621\":1}}],[\"属性是可以被多个对象所共享的\",{\"1\":{\"1485\":1}}],[\"属性是斜视\",{\"1\":{\"550\":1}}],[\"属性只用左边的\",{\"1\":{\"1399\":1}}],[\"属性只能在类的内部访问\",{\"1\":{\"1303\":1}}],[\"属性只能保存字符串的内存地址\",{\"1\":{\"1133\":1}}],[\"属性和方法查找的过程分析\",{\"0\":{\"1383\":1}}],[\"属性和要封装的数据一一对应\",{\"1\":{\"200\":1}}],[\"属性和要封装的数据一一兑对应\",{\"1\":{\"155\":1}}],[\"属性或方法\",{\"1\":{\"1346\":1}}],[\"属性赋值的先后顺序\",{\"0\":{\"1323\":1}}],[\"属性还会多个权限控制符\",{\"1\":{\"1272\":1}}],[\"属性声明语法\",{\"0\":{\"1270\":1}}],[\"属性与局部变量的对比\",{\"0\":{\"1271\":1}}],[\"属性与方法\",{\"0\":{\"1268\":1}}],[\"属性与属性之间使用\",{\"1\":{\"256\":1}}],[\"属性会有个默认值\",{\"1\":{\"1264\":1}}],[\"属性的类型可以是一个类\",{\"1\":{\"1270\":1}}],[\"属性的默认值就是类里定义的值\",{\"1\":{\"1549\":1}}],[\"属性的默认值\",{\"1\":{\"1264\":1}}],[\"属性的单位\",{\"0\":{\"214\":1}}],[\"属性方法相关\",{\"0\":{\"851\":1}}],[\"属性value就是要转发的队列名\",{\"1\":{\"455\":1}}],[\"属性\",{\"0\":{\"650\":1,\"1269\":1},\"1\":{\"342\":1,\"1258\":2,\"1271\":1,\"1273\":4,\"1274\":1,\"1310\":1,\"1323\":1,\"1328\":1,\"1329\":1,\"1380\":1,\"1381\":1,\"1423\":1,\"1485\":1,\"1630\":1,\"1650\":1,\"1652\":2,\"1872\":1}}],[\"属性加载的优先级\",{\"0\":{\"257\":1}}],[\"属性值必须使用引号\",{\"1\":{\"3018\":1}}],[\"属性值被方法修改了\",{\"1\":{\"1282\":1}}],[\"属性值要与bean的属性值对应\",{\"1\":{\"556\":1}}],[\"属性值是个数组\",{\"1\":{\"206\":1}}],[\"属性值前面添加空格\",{\"1\":{\"146\":1}}],[\"属性名是number\",{\"1\":{\"3025\":1}}],[\"属性名=属性值\",{\"1\":{\"256\":1,\"2543\":1}}],[\"属性名引用方式\",{\"1\":{\"151\":1}}],[\"属性名\",{\"1\":{\"149\":1,\"151\":1,\"1259\":1,\"1270\":2,\"1476\":1,\"3029\":1}}],[\"属性名与属性值之间使用冒号+空格作为分隔\",{\"1\":{\"146\":1}}],[\"属性层级关系使用多行描述\",{\"1\":{\"146\":1}}],[\"见nginx\",{\"1\":{\"2718\":1}}],[\"见\",{\"1\":{\"2541\":1}}],[\"见格式2的更精简写法\",{\"1\":{\"2378\":1}}],[\"见格式2示例的\",{\"0\":{\"2375\":1}}],[\"见格式2精简模式\",{\"0\":{\"2373\":1}}],[\"见名知意\",{\"1\":{\"1277\":1,\"1337\":1}}],[\"见后续章节\",{\"1\":{\"1270\":1,\"2801\":1,\"3105\":1}}],[\"见上面的配置tomcat\",{\"1\":{\"2767\":1}}],[\"见上一个例子\",{\"1\":{\"2372\":1}}],[\"见上\",{\"1\":{\"860\":1,\"866\":1,\"867\":1}}],[\"修复数据\",{\"1\":{\"3756\":1}}],[\"修复host\",{\"0\":{\"3678\":1}}],[\"修稿配置文件中的\",{\"1\":{\"3329\":1}}],[\"修饰\",{\"1\":{\"1619\":1,\"1625\":1}}],[\"修饰的\",{\"1\":{\"1663\":1,\"1664\":1}}],[\"修饰的属性应该在构造器中为其赋值\",{\"1\":{\"1619\":1}}],[\"修饰的属性必须赋值\",{\"1\":{\"1352\":1}}],[\"修饰的成员\",{\"1\":{\"1473\":1}}],[\"修饰类的话\",{\"1\":{\"1310\":1}}],[\"修饰类的内部结构\",{\"1\":{\"1310\":1}}],[\"修饰类\",{\"1\":{\"1310\":1}}],[\"修饰符将表示一个对象\",{\"1\":{\"1270\":1}}],[\"修饰符\",{\"1\":{\"1270\":2,\"1317\":1}}],[\"修改证书权限\",{\"1\":{\"3726\":1}}],[\"修改mongod\",{\"1\":{\"3717\":1}}],[\"修改密码\",{\"0\":{\"3714\":1}}],[\"修改0号成员的优先级\",{\"1\":{\"3689\":1}}],[\"修改优先级后\",{\"1\":{\"3689\":1}}],[\"修改优先级\",{\"0\":{\"3689\":1}}],[\"修改的代码如下\",{\"1\":{\"3679\":1}}],[\"修改副本集节点的host\",{\"0\":{\"3679\":1}}],[\"修改回正常的状态\",{\"1\":{\"3518\":1}}],[\"修改前获取的版本号\",{\"1\":{\"3497\":1}}],[\"修改前的obj元素\",{\"1\":{\"951\":1}}],[\"修改后\",{\"1\":{\"3493\":1,\"3497\":1}}],[\"修改配置\",{\"1\":{\"3323\":1}}],[\"修改配置文件并重启\",{\"0\":{\"3332\":1}}],[\"修改配置文件\",{\"0\":{\"2716\":1,\"3352\":1,\"3717\":1,\"3728\":1},\"1\":{\"3329\":1,\"3728\":1}}],[\"修改虚拟内存\",{\"1\":{\"3313\":1,\"3346\":1}}],[\"修改主配置文件\",{\"1\":{\"3302\":1}}],[\"修改文件拥有者\",{\"1\":{\"3291\":1,\"3322\":1}}],[\"修改文档指的是修改文档的数据\",{\"1\":{\"3143\":1}}],[\"修改文档\",{\"0\":{\"3143\":1,\"3217\":1}}],[\"修改集群文件目录中每个节点的\",{\"1\":{\"3268\":1}}],[\"修改数据\",{\"1\":{\"3217\":1}}],[\"修改数据时\",{\"1\":{\"3145\":1}}],[\"修改了文档数据中的title和price\",{\"1\":{\"3146\":1}}],[\"修改了person类内部的属性\",{\"1\":{\"1302\":1}}],[\"修改一次版本就会+1\",{\"1\":{\"3144\":1}}],[\"修改这两处都为false后\",{\"1\":{\"3110\":1}}],[\"修改和销毁\",{\"1\":{\"2965\":1,\"2966\":1,\"2967\":1}}],[\"修改响应头的方式修改响应类型\",{\"1\":{\"2889\":1}}],[\"修改调用时机\",{\"1\":{\"2800\":1}}],[\"修改模板\",{\"0\":{\"2789\":1}}],[\"修改tomcat配置文件\",{\"1\":{\"2716\":1}}],[\"修改成功\",{\"1\":{\"2657\":1}}],[\"修改成功^\",{\"1\":{\"647\":1}}],[\"修改blob类型的字段\",{\"1\":{\"2612\":1}}],[\"修改为启动servlet时创建\",{\"0\":{\"2794\":1}}],[\"修改为最新的java\",{\"1\":{\"2353\":1}}],[\"修改为返回\",{\"1\":{\"761\":1}}],[\"修改线程的优先级\",{\"1\":{\"1735\":1}}],[\"修改其值\",{\"1\":{\"1204\":1}}],[\"修改指定index的元素\",{\"1\":{\"951\":1}}],[\"修改失败\",{\"1\":{\"647\":1}}],[\"修改不参与热部署的目录或文件\",{\"0\":{\"194\":1}}],[\"修改\",{\"0\":{\"664\":1},\"1\":{\"54\":4,\"614\":1,\"960\":1,\"3413\":1,\"3704\":2}}],[\"帮我们完成了很多常见的功能\",{\"1\":{\"1264\":1}}],[\"例子\",{\"0\":{\"2321\":1}}],[\"例外\",{\"1\":{\"1263\":1}}],[\"例如灾难恢复\",{\"1\":{\"3640\":1}}],[\"例如字母大小写和重音标记的规则\",{\"1\":{\"3595\":1}}],[\"例如所有属于同一个用户的文档\",{\"1\":{\"3402\":1}}],[\"例如增加\",{\"1\":{\"3375\":1}}],[\"例如新的函数\",{\"1\":{\"2247\":1}}],[\"例如向服务器端的\",{\"1\":{\"2240\":1}}],[\"例如关于这个元素如何保存\",{\"1\":{\"1947\":1}}],[\"例如当使用集合时没有用泛型\",{\"1\":{\"1678\":1}}],[\"例如标记过时的功能\",{\"1\":{\"1636\":1}}],[\"例如javac编译工具等\",{\"1\":{\"1026\":1}}],[\"例如jedis客户端技术\",{\"1\":{\"381\":1}}],[\"例如在4\",{\"1\":{\"501\":1}}],[\"例如在minutes域使用5\",{\"1\":{\"501\":2}}],[\"例如验证码\",{\"1\":{\"478\":1}}],[\"例如磁盘io\",{\"1\":{\"461\":1}}],[\"例如服务器被攻击\",{\"1\":{\"313\":1}}],[\"例如网络是否顺畅\",{\"1\":{\"312\":1}}],[\"例如每日记录\",{\"1\":{\"303\":1}}],[\"例如\",{\"1\":{\"163\":1,\"288\":1,\"308\":1,\"501\":1,\"1176\":1,\"1266\":1,\"1381\":1,\"1505\":1,\"1563\":1,\"1616\":1,\"1653\":1,\"1654\":1,\"1692\":1,\"1790\":1,\"1793\":1,\"1938\":1,\"1948\":1,\"1985\":1,\"1986\":1,\"2275\":1,\"2455\":1,\"2674\":1,\"3006\":1,\"3298\":1,\"3464\":3,\"3469\":2,\"3495\":1,\"3504\":1,\"3516\":1,\"3620\":1,\"3621\":1}}],[\"意味着会有一个单点故障问题\",{\"1\":{\"3385\":1}}],[\"意味着此位置上存在一个或多个数据\",{\"1\":{\"1922\":1}}],[\"意味着myannotation的value值\",{\"1\":{\"1680\":1}}],[\"意味着empty\",{\"1\":{\"1680\":2}}],[\"意味着如果子类重写的方法中有异常\",{\"1\":{\"1603\":1}}],[\"意味着接口不可以实例化\",{\"1\":{\"1508\":1}}],[\"意味着\",{\"1\":{\"1261\":1,\"1273\":1,\"1364\":1}}],[\"意义明显\",{\"1\":{\"2591\":1}}],[\"意义不大\",{\"1\":{\"2501\":1}}],[\"意义和工厂模式类似\",{\"1\":{\"514\":1}}],[\"意义\",{\"0\":{\"124\":1,\"1532\":1,\"1946\":1,\"2815\":1},\"1\":{\"567\":1,\"1031\":1,\"1234\":1,\"1513\":1,\"1520\":1,\"1521\":1,\"2144\":1,\"2320\":1}}],[\"说法二\",{\"1\":{\"1366\":1}}],[\"说法一\",{\"1\":{\"1366\":1}}],[\"说\",{\"1\":{\"1258\":1}}],[\"说明状态正常\",{\"1\":{\"3671\":1}}],[\"说明一个servlet在内存中只存在一个对象\",{\"1\":{\"2795\":1}}],[\"说明artifacts配置有问题\",{\"1\":{\"2766\":1}}],[\"说明这个接口是一个函数式接口\",{\"1\":{\"2387\":1}}],[\"说明两个变量内存地址相同\",{\"1\":{\"1125\":1}}],[\"说明\",{\"0\":{\"1086\":1,\"1092\":1,\"1100\":1,\"1106\":1,\"1230\":1,\"1340\":1,\"1348\":1,\"1423\":1,\"1437\":1,\"1475\":1,\"1502\":1,\"1713\":1,\"1778\":1,\"1830\":1,\"1876\":1,\"2030\":1,\"2058\":1,\"2068\":1,\"2089\":1,\"2094\":1,\"2209\":1,\"2436\":1,\"2555\":1,\"2642\":1,\"2879\":1,\"2976\":1},\"1\":{\"557\":1,\"569\":1,\"570\":1,\"612\":1,\"802\":1,\"2405\":1,\"2546\":1,\"2674\":1,\"3060\":1,\"3545\":1}}],[\"吃饭\",{\"1\":{\"1258\":1}}],[\"行\",{\"1\":{\"3546\":1}}],[\"行为\",{\"1\":{\"1257\":1}}],[\"行结束符在\",{\"1\":{\"997\":1}}],[\"万维网使用\",{\"1\":{\"2182\":1}}],[\"万物皆文件\",{\"1\":{\"2016\":1}}],[\"万物皆对象\",{\"1\":{\"1253\":1,\"2260\":1}}],[\"万事万物皆对象\",{\"1\":{\"1255\":1}}],[\"聚合函数\",{\"1\":{\"3248\":1,\"3250\":1}}],[\"聚合函数的参数就是此次查询的名字\",{\"1\":{\"3248\":1}}],[\"聚合允许使用者对\",{\"1\":{\"3187\":1,\"3247\":1}}],[\"聚合操作要使用aggs关键字定义\",{\"1\":{\"3188\":1}}],[\"聚合操作\",{\"0\":{\"3187\":1,\"3247\":1},\"1\":{\"3249\":1}}],[\"聚合\",{\"1\":{\"1250\":1,\"3187\":1,\"3247\":1,\"3248\":1}}],[\"聚合查询的同时也会返回所有的数据信息\",{\"1\":{\"3188\":1}}],[\"聚合查询结果名字\",{\"1\":{\"3188\":7}}],[\"聚合查询\",{\"1\":{\"410\":1,\"3250\":1}}],[\"考虑使用当前类充当同步监视器\",{\"1\":{\"1759\":1}}],[\"考虑重写\",{\"1\":{\"1375\":1}}],[\"考虑谁来做\",{\"1\":{\"1250\":1}}],[\"考虑怎么做\",{\"1\":{\"1250\":1}}],[\"考虑清楚应该将哪个结构声明在上面\",{\"1\":{\"1172\":1}}],[\"赋予角色所属的数据库\",{\"1\":{\"3707\":1}}],[\"赋予root角色\",{\"1\":{\"3707\":1}}],[\"赋予权限\",{\"1\":{\"3707\":1}}],[\"赋的值也必须是个数组\",{\"1\":{\"1236\":1}}],[\"赋值该证书到所有节点所在的设备\",{\"1\":{\"3727\":1}}],[\"赋值为columvalue\",{\"1\":{\"2600\":1,\"2603\":1,\"2653\":2}}],[\"赋值形式的多态\",{\"0\":{\"1408\":1}}],[\"赋值时自动获得长度\",{\"1\":{\"1219\":1}}],[\"赋值运算符\",{\"0\":{\"1142\":1,\"1143\":1}}],[\"赋值给b2\",{\"1\":{\"1141\":1}}],[\"赋值相同的值\",{\"1\":{\"1125\":1}}],[\"赋值的过程就自动发生了变量提升\",{\"1\":{\"1116\":1}}],[\"赋值的变量必须已经声明过了\",{\"1\":{\"1070\":1}}],[\"赋值\",{\"0\":{\"1213\":1,\"1991\":1},\"1\":{\"1073\":1,\"1114\":1,\"1211\":1,\"1214\":1,\"1218\":1,\"1323\":1}}],[\"栈溢出\",{\"1\":{\"1560\":1}}],[\"栈\",{\"1\":{\"1226\":1,\"1546\":1,\"1701\":1}}],[\"静态资源和动态资源\",{\"1\":{\"2771\":1}}],[\"静态资源目录\",{\"1\":{\"2720\":1}}],[\"静态资源可以直接被浏览器解析\",{\"1\":{\"2695\":1}}],[\"静态资源\",{\"1\":{\"2695\":1}}],[\"静态代理示例\",{\"0\":{\"2326\":1}}],[\"静态代理需要\",{\"1\":{\"2323\":1}}],[\"静态代理\",{\"0\":{\"2322\":1}}],[\"静态代码块内只能调用静态的属性\",{\"1\":{\"1527\":1}}],[\"静态代码块的执行要优先于非静态代码块的执行\",{\"1\":{\"1527\":1}}],[\"静态代码块\",{\"0\":{\"1527\":1},\"1\":{\"1525\":1,\"1526\":1}}],[\"静态内部类\",{\"1\":{\"2264\":1}}],[\"静态语言\",{\"1\":{\"2247\":1}}],[\"静态化\",{\"0\":{\"1982\":1}}],[\"静态对象\",{\"1\":{\"1683\":1}}],[\"静态的方法\",{\"1\":{\"1527\":1,\"1528\":1}}],[\"静态成员的生命周期同步\",{\"1\":{\"1485\":1}}],[\"静态成员内部类\",{\"1\":{\"1451\":2,\"1456\":1}}],[\"静态变量是随着类的加载而加载\",{\"1\":{\"1477\":1}}],[\"静态变量的使用\",{\"0\":{\"1478\":1}}],[\"静态变量的加载要早于对象的创建\",{\"1\":{\"1477\":1}}],[\"静态变量的加载\",{\"0\":{\"1477\":1}}],[\"静态变量的声明\",{\"0\":{\"1476\":1}}],[\"静态变量\",{\"1\":{\"1475\":1,\"1478\":1,\"1546\":1}}],[\"静态属性和非静态属性了\",{\"1\":{\"1475\":1}}],[\"静态属性\",{\"0\":{\"1474\":1},\"1\":{\"1475\":1}}],[\"静态绑定\",{\"1\":{\"1407\":2}}],[\"静态初始化已经赋值过了\",{\"1\":{\"1235\":1}}],[\"静态初始化\",{\"0\":{\"1219\":1,\"1232\":1}}],[\"静态方法即可\",{\"1\":{\"3086\":1,\"3087\":1}}],[\"静态方法来获取inetaddress\",{\"1\":{\"2191\":1}}],[\"静态方法只是用来取代一些工具类的\",{\"1\":{\"1520\":1}}],[\"静态方法在实现类中是看不到\",{\"1\":{\"1520\":1}}],[\"静态方法和默认方法的意义\",{\"0\":{\"1519\":1}}],[\"静态方法中只能调用静态的方法和静态属性\",{\"1\":{\"1483\":1}}],[\"静态方法与非静态方法的对比\",{\"0\":{\"1483\":1}}],[\"静态方法的调用写是类或者null\",{\"1\":{\"2311\":1}}],[\"静态方法的调用\",{\"0\":{\"1482\":1}}],[\"静态方法的声明\",{\"0\":{\"1481\":1}}],[\"静态方法的处理\",{\"0\":{\"1375\":1}}],[\"静态方法也是随着类的加载而加载的\",{\"1\":{\"1480\":1}}],[\"静态方法\",{\"0\":{\"1479\":1,\"1516\":1,\"1520\":1,\"1943\":1,\"2408\":1},\"1\":{\"874\":1,\"1496\":1,\"1515\":1,\"1520\":1,\"2314\":1,\"2398\":1}}],[\"质数的个数为\",{\"1\":{\"1204\":1}}],[\"质数测试\",{\"1\":{\"777\":1}}],[\"假如电脑只有8g内存\",{\"1\":{\"3265\":1}}],[\"假如使用session储存登陆信息\",{\"1\":{\"3073\":1}}],[\"假如\",{\"1\":{\"2723\":1,\"2861\":1}}],[\"假如定义了泛型标识e\",{\"1\":{\"1978\":1}}],[\"假如把while\",{\"1\":{\"1762\":1}}],[\"假如是4核cpu\",{\"1\":{\"1692\":1}}],[\"假如某一天\",{\"1\":{\"1534\":1}}],[\"假如父类也有这个方法\",{\"1\":{\"1382\":1}}],[\"假如在minutes域使用\",{\"1\":{\"501\":1}}],[\"假设查询为一个关键词\",{\"1\":{\"3420\":1}}],[\"假设是node1\",{\"1\":{\"3416\":1,\"3417\":1}}],[\"假设它将请求转发到\",{\"1\":{\"3410\":1}}],[\"假设在一个tomcat服务器中\",{\"1\":{\"3056\":1}}],[\"假设在32位平台\",{\"1\":{\"1703\":1}}],[\"假设我们的集合需要存放学生的成绩\",{\"1\":{\"1955\":1}}],[\"假设有一个集群由三个节点组成\",{\"1\":{\"3403\":1}}],[\"假设有一个银行账户里有3000元\",{\"1\":{\"1754\":1}}],[\"假设有person类\",{\"1\":{\"1266\":1}}],[\"假设外层循环需要执行m次\",{\"1\":{\"1200\":1}}],[\"跳过元素\",{\"1\":{\"2461\":1}}],[\"跳过\",{\"0\":{\"2461\":1}}],[\"跳过创建\",{\"1\":{\"401\":1}}],[\"跳出当前循环\",{\"1\":{\"1193\":1}}],[\"跳出循环\",{\"1\":{\"1186\":1}}],[\"出了作用域自动释放\",{\"1\":{\"1785\":1}}],[\"出了for循环就失效了\",{\"1\":{\"1181\":1}}],[\"出错控制等制定标准\",{\"1\":{\"2199\":1}}],[\"出错\",{\"1\":{\"1353\":1}}],[\"出现了第三方api\",{\"1\":{\"2545\":1}}],[\"出现了一种全新的解决方案\",{\"1\":{\"552\":1}}],[\"出现之前\",{\"1\":{\"2111\":1}}],[\"出现死锁后\",{\"1\":{\"1788\":1}}],[\"出现重复票\",{\"1\":{\"1755\":1}}],[\"出现异常\",{\"1\":{\"1598\":1}}],[\"出现什么效果\",{\"1\":{\"22\":1}}],[\"遍历cookies\",{\"1\":{\"3047\":1}}],[\"遍历获取的cookie数据\",{\"1\":{\"3044\":1}}],[\"遍历stream中集合的所有元素\",{\"1\":{\"2485\":1}}],[\"遍历偶数\",{\"1\":{\"2450\":1}}],[\"遍历结果\",{\"0\":{\"2292\":1}}],[\"遍历包含属性的数组\",{\"1\":{\"2289\":1}}],[\"遍历顺序与添加顺序一致\",{\"1\":{\"1931\":1}}],[\"遍历map元素时\",{\"1\":{\"1913\":1}}],[\"遍历linkedhashset集合\",{\"1\":{\"1902\":1}}],[\"遍历其内部数据时\",{\"1\":{\"1886\":1}}],[\"遍历集合\",{\"0\":{\"1851\":1}}],[\"遍历集合的底层调用iterator完成操作\",{\"1\":{\"1850\":1}}],[\"遍历的注意事项\",{\"0\":{\"1847\":1}}],[\"遍历方法\",{\"0\":{\"1838\":1}}],[\"遍历可变形参\",{\"0\":{\"1296\":1}}],[\"遍历二维数组就需要嵌套循环了\",{\"1\":{\"1240\":1}}],[\"遍历数组\",{\"0\":{\"1222\":1,\"1240\":1,\"1852\":1}}],[\"遍历100000以内的自然数\",{\"1\":{\"1204\":1}}],[\"遍历100以内的所有偶数\",{\"1\":{\"1184\":2}}],[\"遍历100以内的偶数\",{\"1\":{\"1181\":1,\"1189\":1}}],[\"遍历操作不需获取collection或数组的长度\",{\"1\":{\"1850\":1}}],[\"遍历操作\",{\"0\":{\"958\":1}}],[\"今天真好\",{\"1\":{\"1631\":1}}],[\"今天\",{\"1\":{\"1631\":1}}],[\"今天不用上班\",{\"1\":{\"1176\":1}}],[\"今天需要上班\",{\"1\":{\"1176\":1}}],[\"末尾结束为止\",{\"1\":{\"1175\":1}}],[\"循环cookie\",{\"1\":{\"3044\":1}}],[\"循环遍历获取打印请求头\",{\"1\":{\"2850\":1}}],[\"循环获取每一行数据\",{\"1\":{\"2603\":1}}],[\"循环获取结果集中每列的数据\",{\"1\":{\"2600\":1}}],[\"循环读\",{\"1\":{\"2084\":1}}],[\"循环读取\",{\"1\":{\"813\":1,\"814\":1}}],[\"循环全部读入\",{\"1\":{\"2052\":1}}],[\"循环\",{\"0\":{\"1849\":1}}],[\"循环创建对象\",{\"1\":{\"1266\":1}}],[\"循环是可以嵌套的\",{\"1\":{\"1199\":1}}],[\"循环语句中\",{\"1\":{\"1192\":1,\"1193\":1,\"1195\":1,\"1197\":1}}],[\"循环控制\",{\"0\":{\"1191\":1}}],[\"循环内定义\",{\"1\":{\"1181\":1}}],[\"循环体\",{\"1\":{\"1179\":1,\"1180\":3,\"1183\":3,\"1186\":2,\"1188\":1}}],[\"循环条件\",{\"1\":{\"1179\":1,\"1180\":4,\"1183\":4,\"1188\":1}}],[\"循环的组成部分\",{\"0\":{\"1179\":1}}],[\"循环结构的4个要素\",{\"1\":{\"1179\":1}}],[\"循环结构\",{\"1\":{\"1165\":1}}],[\"ⅶ\",{\"0\":{\"1164\":1,\"1199\":1,\"1679\":1,\"2476\":1,\"2516\":1}}],[\"决定执行表达式1\",{\"1\":{\"1159\":1}}],[\"双击弹出框中待生成jar包下面的build即可\",{\"1\":{\"2992\":1}}],[\"双击按照提示补齐webapp目录\",{\"1\":{\"2743\":1}}],[\"双击bin\",{\"1\":{\"2703\":1,\"2704\":1}}],[\"双参构造器创建的\",{\"1\":{\"2426\":1}}],[\"双方都知道对方是谁了\",{\"1\":{\"2206\":1}}],[\"双列数据\",{\"1\":{\"1826\":1,\"1910\":1}}],[\"双分支\",{\"0\":{\"1169\":1}}],[\"双\",{\"1\":{\"1153\":1}}],[\"双精度\",{\"1\":{\"1094\":1}}],[\"短路情况\",{\"0\":{\"1153\":1}}],[\"短路或\",{\"1\":{\"1151\":1}}],[\"短路与\",{\"1\":{\"1151\":1}}],[\"逻辑删除\",{\"1\":{\"3127\":1}}],[\"逻辑代码只写在doget方法中\",{\"1\":{\"2862\":1}}],[\"逻辑链条\",{\"0\":{\"2333\":1}}],[\"逻辑修改了\",{\"1\":{\"1534\":1}}],[\"逻辑异或\",{\"1\":{\"1151\":1}}],[\"逻辑非\",{\"1\":{\"1151\":1}}],[\"逻辑或\",{\"1\":{\"1151\":1}}],[\"逻辑与\",{\"1\":{\"1151\":1}}],[\"逻辑运算符用于连接布尔型表达式\",{\"1\":{\"1152\":1}}],[\"逻辑运算符\",{\"0\":{\"1150\":1}}],[\"√\",{\"1\":{\"1149\":1,\"3425\":6}}],[\"扩展内容\",{\"0\":{\"3783\":1}}],[\"扩展配置<\",{\"1\":{\"3488\":1}}],[\"扩展词汇要在ik扩展的配置里进行添加\",{\"1\":{\"3486\":1}}],[\"扩展你的内容容量\",{\"1\":{\"3365\":1}}],[\"扩展名匹配\",{\"0\":{\"2824\":1},\"1\":{\"2826\":1}}],[\"扩展名\",{\"1\":{\"2821\":1}}],[\"扩展类加载器\",{\"1\":{\"2279\":1}}],[\"扩展\",{\"0\":{\"1695\":1},\"1\":{\"1361\":1}}],[\"扩展赋值运算符\",{\"0\":{\"1144\":1},\"1\":{\"1145\":1}}],[\"扩容的节点数量\",{\"0\":{\"3392\":1}}],[\"扩容的临界值\",{\"1\":{\"1928\":1}}],[\"扩容是非常消耗资源的\",{\"1\":{\"1868\":1}}],[\"扩容为原来的容量的1\",{\"1\":{\"1867\":1}}],[\"扩容为原来容量的2倍\",{\"1\":{\"694\":1,\"1924\":1}}],[\"扩容\",{\"0\":{\"1867\":1,\"1924\":1},\"1\":{\"287\":1,\"1924\":1}}],[\"算学计算异常\",{\"0\":{\"1582\":1}}],[\"算出今天是否用上班\",{\"1\":{\"1176\":1}}],[\"算术运算符\",{\"0\":{\"1138\":1}}],[\"算法来存储集合中的元素\",{\"1\":{\"1883\":1}}],[\"算法为\",{\"1\":{\"764\":1}}],[\"算法\",{\"1\":{\"660\":1,\"911\":1,\"1898\":1,\"2410\":1}}],[\"算法是\",{\"1\":{\"659\":1,\"912\":1}}],[\"拼接操作\",{\"0\":{\"1134\":1}}],[\"里存储文档数据和关系型数据库\",{\"1\":{\"3102\":1}}],[\"里的数据缓存到内存中\",{\"1\":{\"3504\":1}}],[\"里的\",{\"1\":{\"3102\":1}}],[\"里的key和value都是string类型\",{\"1\":{\"1916\":1}}],[\"里的全部元素时有很好的性能\",{\"1\":{\"1886\":1}}],[\"里的值将无法改变\",{\"1\":{\"1127\":1}}],[\"里面数据的一些使用规则设置\",{\"1\":{\"3364\":1}}],[\"里面提取出来的\",{\"1\":{\"3197\":1}}],[\"里面\",{\"1\":{\"3197\":1}}],[\"里面可以有不同的查询属性\",{\"1\":{\"3167\":1}}],[\"里面可以声明三个有参的子标签\",{\"1\":{\"3025\":1}}],[\"里面用一个module来使用tomcat\",{\"1\":{\"2730\":1}}],[\"里面包含了所有jdbc的基本操作方法\",{\"1\":{\"2644\":1}}],[\"里面包含了构造器中所需的各个参数\",{\"1\":{\"2286\":1}}],[\"里面包含了一系列类\",{\"1\":{\"1334\":1}}],[\"里面是空的\",{\"1\":{\"2153\":1}}],[\"里面的所有方法都是静态的\",{\"1\":{\"2682\":1}}],[\"里面的代码提取出来声明成同步方法\",{\"1\":{\"1768\":1}}],[\"里面的配置都已经是固定的了\",{\"1\":{\"255\":1}}],[\"里面有无内容都可以编译\",{\"1\":{\"1185\":1}}],[\"乘了一次2\",{\"1\":{\"1157\":1}}],[\"乘以2的幂数\",{\"1\":{\"1122\":1}}],[\"乘法运算\",{\"1\":{\"781\":1}}],[\"区域网\",{\"0\":{\"3324\":1}}],[\"区域网集群\",{\"1\":{\"3323\":1}}],[\"区域网集成环境\",{\"1\":{\"3316\":1}}],[\"区域各位取反\",{\"1\":{\"1121\":1}}],[\"区别\",{\"0\":{\"1746\":1},\"1\":{\"1185\":1}}],[\"区别于new\",{\"1\":{\"1125\":1}}],[\"区别是\",{\"1\":{\"687\":1}}],[\"二是在java安装目录的jdk\",{\"1\":{\"2989\":1}}],[\"二者在使用场景中\",{\"1\":{\"3549\":1}}],[\"二者共同的父类是\",{\"1\":{\"1989\":1}}],[\"二者不能共存\",{\"1\":{\"1295\":1}}],[\"二者都是一种思想\",{\"1\":{\"1250\":1}}],[\"二维数组也要指定数据类型\",{\"1\":{\"1243\":1}}],[\"二维数组的内存解析\",{\"0\":{\"1242\":1}}],[\"二维数组的声明\",{\"0\":{\"1231\":1}}],[\"二维数组每个元素的数组长度\",{\"1\":{\"1234\":1}}],[\"二维数组中有3个一维数组\",{\"1\":{\"1233\":1,\"1234\":1}}],[\"二维数组\",{\"1\":{\"1210\":1}}],[\"二选一\",{\"0\":{\"1169\":1},\"1\":{\"3029\":1}}],[\"二进制转八进制\",{\"1\":{\"1122\":1}}],[\"二进制转成十进制\",{\"1\":{\"1122\":1}}],[\"二进制的整数有如下三种形式\",{\"1\":{\"1121\":1}}],[\"二进制\",{\"1\":{\"1119\":1,\"1122\":3}}],[\"二级属性名\",{\"1\":{\"151\":2}}],[\"溢出\",{\"1\":{\"1117\":1,\"1706\":1}}],[\"截断流\",{\"1\":{\"2460\":1}}],[\"截断\",{\"0\":{\"2460\":1}}],[\"截断操作\",{\"1\":{\"1117\":1}}],[\"截取如下\",{\"1\":{\"119\":1}}],[\"故障测试\",{\"0\":{\"3690\":1}}],[\"故可以使用方法因引用\",{\"1\":{\"2416\":1}}],[\"故可以进行方法引用\",{\"1\":{\"2413\":1}}],[\"故可以省略参数\",{\"1\":{\"2404\":1}}],[\"故是不可靠的\",{\"1\":{\"2205\":1}}],[\"故建议\",{\"1\":{\"2158\":1}}],[\"故报错\",{\"1\":{\"1116\":1}}],[\"故用到java\",{\"1\":{\"778\":1}}],[\"容量小的类型自动转换为容量大的数据类型\",{\"1\":{\"1111\":1}}],[\"容器会释放这个servlet实例\",{\"1\":{\"2798\":1}}],[\"容器就会调用servlet实例的destroy\",{\"1\":{\"2798\":1}}],[\"容器将自动调用servlet的init\",{\"1\":{\"2796\":1}}],[\"容器中取得相应的资源\",{\"1\":{\"567\":1}}],[\"容器在初始化时主动检测当前\",{\"1\":{\"567\":1}}],[\"容器通知的能力\",{\"1\":{\"567\":1}}],[\"容器的核心接口\",{\"1\":{\"567\":1}}],[\"容器\",{\"0\":{\"128\":1},\"1\":{\"1820\":1}}],[\"布尔值\",{\"1\":{\"3548\":1}}],[\"布尔变量\",{\"1\":{\"1172\":1}}],[\"布尔类型\",{\"0\":{\"1105\":1}}],[\"布尔型\",{\"1\":{\"1075\":1,\"1273\":1}}],[\"帅\",{\"1\":{\"1102\":1}}],[\"答案是向下转型\",{\"1\":{\"1410\":1}}],[\"答案是\",{\"1\":{\"1098\":1}}],[\"答案就是\",{\"1\":{\"560\":1}}],[\"知识补充\",{\"0\":{\"1098\":1}}],[\"却只占用4个字节\",{\"1\":{\"1097\":1}}],[\"尾数可以精确到7位有效数字\",{\"1\":{\"1094\":1}}],[\"浮点数\",{\"1\":{\"3548\":1}}],[\"浮点常量\",{\"1\":{\"1115\":1}}],[\"浮点类型也有固定的表示范围和字段长度\",{\"1\":{\"1092\":1}}],[\"浮点类型\",{\"0\":{\"1091\":1}}],[\"浮点型的两种表示方式\",{\"0\":{\"1093\":1}}],[\"浮点型其实就是小数\",{\"1\":{\"1092\":1}}],[\"浮点型\",{\"1\":{\"1075\":1,\"1273\":1}}],[\"型的构造器向构造器的形参中传递一个对象数组进去\",{\"1\":{\"2286\":1}}],[\"型数据用来表示通常意义上\",{\"1\":{\"1100\":1}}],[\"型\",{\"1\":{\"1090\":1}}],[\"现金\",{\"1\":{\"1616\":1}}],[\"现有java版本尚未使用\",{\"1\":{\"1080\":1}}],[\"现在只需要使用compass即可\",{\"1\":{\"3566\":1}}],[\"现在只是作测试\",{\"1\":{\"648\":1}}],[\"现在每个节点上都拥有\",{\"1\":{\"3391\":1}}],[\"现在xml不用来作为前端显示页面了\",{\"1\":{\"3020\":1}}],[\"现在是1\",{\"1\":{\"3020\":1}}],[\"现在是类了可以调用tostring了\",{\"1\":{\"1440\":1}}],[\"现在\",{\"1\":{\"2495\":1}}],[\"现在我们可以定义一个泛型\",{\"1\":{\"1946\":1}}],[\"现在我们可以先将多个字符放入该数组中\",{\"1\":{\"815\":1}}],[\"现在的分布式项目基本都会用到redis和mongodb\",{\"1\":{\"3549\":1}}],[\"现在的服务器都是多核的\",{\"1\":{\"1689\":1}}],[\"现在的struts2有一部分也是基于注解的了\",{\"1\":{\"1636\":1}}],[\"现在的互联网程序大部分都是基于微服务的\",{\"1\":{\"312\":1,\"313\":1}}],[\"现在不用子类继承\",{\"1\":{\"1497\":1}}],[\"现在已经是类了\",{\"1\":{\"1441\":1}}],[\"现在成了java基础\",{\"1\":{\"1011\":1}}],[\"现在可以创建spring配置对象\",{\"1\":{\"528\":1}}],[\"现在可以通过控制该配置类的元数据\",{\"1\":{\"524\":1}}],[\"现在写的springboot项目都是单体项目\",{\"1\":{\"268\":1}}],[\"保留泛型\",{\"0\":{\"1973\":1,\"1974\":1}}],[\"保留字\",{\"0\":{\"1080\":1}}],[\"保存用户名\",{\"1\":{\"3712\":1}}],[\"保存cookie\",{\"0\":{\"3050\":1},\"1\":{\"3039\":1}}],[\"保存的数据的顺序一致\",{\"1\":{\"2127\":1}}],[\"保存在变量中\",{\"1\":{\"2127\":1}}],[\"保存具有映射关系\",{\"1\":{\"1826\":1}}],[\"保存进符号表\",{\"1\":{\"1703\":1}}],[\"保存了对象的实体\",{\"1\":{\"1548\":1}}],[\"保存了具体字符串值的内存地址\",{\"1\":{\"1131\":1}}],[\"保持沉默\",{\"1\":{\"1677\":1}}],[\"保证host无误\",{\"1\":{\"3739\":1}}],[\"保证所有的副本集节点都使用同一份证书\",{\"1\":{\"3727\":1}}],[\"保证不变性的前提下实现倒排索引的更新\",{\"1\":{\"3443\":1}}],[\"保证不能在类的外部创建其对象\",{\"1\":{\"1620\":1}}],[\"保证此构造器是可访问的\",{\"1\":{\"2315\":1}}],[\"保证父类有此构造器\",{\"1\":{\"2285\":1}}],[\"保证了数据安全\",{\"1\":{\"1957\":1}}],[\"保证添加的元素按照equals\",{\"1\":{\"1882\":1}}],[\"保证线程安全\",{\"1\":{\"1770\":1}}],[\"保证当前构造器是可访问的\",{\"1\":{\"878\":1}}],[\"保证当前方法是可访问的\",{\"1\":{\"875\":1,\"2311\":1}}],[\"保证当前属性是可访问的\",{\"1\":{\"866\":1,\"2306\":1}}],[\"官方下载地址\",{\"1\":{\"3569\":1}}],[\"官方建议为\",{\"1\":{\"3533\":1}}],[\"官方教程推荐使用elasticsearch\",{\"1\":{\"3316\":1}}],[\"官方地址\",{\"1\":{\"1079\":1}}],[\"官网等\",{\"1\":{\"1059\":1}}],[\"官网\",{\"1\":{\"105\":1,\"1022\":1,\"2698\":1,\"3536\":1}}],[\"官网文档\",{\"1\":{\"84\":1,\"85\":1}}],[\"关联要查看的索引\",{\"1\":{\"3226\":1}}],[\"关联要修改的索引和文档\",{\"1\":{\"3225\":1}}],[\"关联要删除的索引和文档\",{\"1\":{\"3218\":1}}],[\"关联nginx\",{\"1\":{\"2768\":1}}],[\"关联数组\",{\"1\":{\"1823\":1}}],[\"关联时\",{\"1\":{\"1653\":1}}],[\"关联\",{\"1\":{\"1650\":4,\"1652\":2,\"1653\":1,\"1654\":1}}],[\"关于compass的介绍见\",{\"1\":{\"3731\":1}}],[\"关于情况2和情况3\",{\"1\":{\"1923\":1}}],[\"关于是否释放同步监视器\",{\"1\":{\"1803\":1}}],[\"关于以上所有情况的警告\",{\"1\":{\"1678\":1}}],[\"关于元注解\",{\"1\":{\"1669\":1}}],[\"关于异常的产生\",{\"0\":{\"1606\":1}}],[\"关于静态属性和静态方法的使用\",{\"1\":{\"1484\":1}}],[\"关于父类中的属性\",{\"0\":{\"1377\":1}}],[\"关于子类是否能继承父类的private成员\",{\"1\":{\"1366\":1}}],[\"关于权限修饰符的不同\",{\"1\":{\"1273\":1}}],[\"关系型数据库难易应对\",{\"1\":{\"3539\":1}}],[\"关系型数据库搜索不是能很好的支持\",{\"1\":{\"3096\":1}}],[\"关系操作符\",{\"1\":{\"1426\":1}}],[\"关系表达式或逻辑表达式\",{\"1\":{\"1172\":1}}],[\"关系\",{\"0\":{\"3011\":1},\"1\":{\"1172\":1}}],[\"关键字对应的值就是包含该关键字的所有文档id\",{\"1\":{\"3427\":1}}],[\"关键字与文档的矩阵为\",{\"1\":{\"3425\":1}}],[\"关键字用于定义枚举类\",{\"1\":{\"1618\":1}}],[\"关键字修饰\",{\"1\":{\"1516\":1,\"1517\":1}}],[\"关键字是string\",{\"1\":{\"1125\":1}}],[\"关键字汇总\",{\"0\":{\"1079\":1}}],[\"关键字中所有字母都为小写\",{\"1\":{\"1078\":1}}],[\"关键字和保留字是被java\",{\"1\":{\"1078\":1}}],[\"关键字\",{\"0\":{\"1077\":1,\"1324\":1,\"3424\":1},\"1\":{\"3427\":1,\"3432\":1,\"3433\":1,\"3461\":1}}],[\"关闭mongodb\",{\"0\":{\"3721\":1}}],[\"关闭服务设计到权限验证\",{\"1\":{\"3564\":1}}],[\"关闭服务\",{\"0\":{\"3564\":1},\"1\":{\"3564\":1}}],[\"关闭服务器套接字和获取的客户端套接字\",{\"1\":{\"2225\":1}}],[\"关闭副本\",{\"1\":{\"3518\":1}}],[\"关闭自动刷新\",{\"1\":{\"3454\":1}}],[\"关闭一个节点后\",{\"1\":{\"3396\":1}}],[\"关闭node\",{\"1\":{\"3335\":1,\"3337\":1,\"3396\":1}}],[\"关闭es\",{\"1\":{\"3206\":1}}],[\"关闭状态\",{\"1\":{\"3127\":1}}],[\"关闭浏览器cookie就会消失\",{\"1\":{\"3069\":1}}],[\"关闭浏览器或服务器就失效\",{\"1\":{\"3053\":1}}],[\"关闭浏览器数据就会丢失\",{\"1\":{\"2923\":1}}],[\"关闭占用端口的软件\",{\"1\":{\"2708\":1}}],[\"关闭dos窗口\",{\"1\":{\"2704\":1}}],[\"关闭数据库连接资源和statement资源\",{\"1\":{\"2652\":1}}],[\"关闭连接\",{\"1\":{\"2635\":1}}],[\"关闭连接时\",{\"1\":{\"2632\":1}}],[\"关闭连接和statement的操作\",{\"0\":{\"2576\":1}}],[\"关闭连接资源\",{\"1\":{\"2566\":1}}],[\"关闭连接池\",{\"1\":{\"1814\":1,\"1816\":1,\"1817\":1}}],[\"关闭preparedstatement资源\",{\"1\":{\"2566\":1}}],[\"关闭通信套接字\",{\"1\":{\"2221\":1}}],[\"关闭serversocket\",{\"1\":{\"2221\":1}}],[\"关闭socket\",{\"1\":{\"2217\":1,\"2220\":1,\"2230\":1}}],[\"关闭此数据报套接字\",{\"1\":{\"2233\":1}}],[\"关闭此套接字也将会关闭该套接字的\",{\"1\":{\"2214\":1}}],[\"关闭此套接字\",{\"1\":{\"2214\":1}}],[\"关闭此输出流并释放与该流关联的所有系统资源\",{\"1\":{\"827\":1}}],[\"关闭该流会自动关闭参数inputstream流\",{\"1\":{\"2100\":1}}],[\"关闭转换流\",{\"1\":{\"2100\":1}}],[\"关闭所有流\",{\"1\":{\"2084\":1}}],[\"关闭后不能再写出\",{\"1\":{\"2074\":1}}],[\"关闭最外层流也会相应关闭内层节点流\",{\"1\":{\"2081\":1}}],[\"关闭最外层流也\",{\"1\":{\"2074\":1}}],[\"关闭资源\",{\"1\":{\"2070\":1,\"2071\":1,\"2106\":1,\"2139\":1,\"2597\":1,\"2600\":1,\"2603\":1,\"2612\":1,\"2613\":1,\"2634\":1}}],[\"关闭\",{\"0\":{\"2704\":1},\"1\":{\"820\":1,\"3209\":1,\"3211\":1,\"3212\":1,\"3214\":1,\"3217\":1,\"3218\":1,\"3220\":1,\"3221\":1,\"3225\":1,\"3226\":1,\"3227\":1,\"3231\":1,\"3234\":1,\"3237\":1,\"3240\":1,\"3242\":1,\"3244\":1,\"3249\":1,\"3253\":1,\"3396\":1}}],[\"关闭流的顺序和打开流的顺序相反\",{\"1\":{\"2074\":1,\"2081\":1}}],[\"关闭流资源\",{\"1\":{\"2065\":1}}],[\"关闭流都需要处理异常\",{\"1\":{\"2051\":1}}],[\"关闭流\",{\"0\":{\"2037\":1,\"2050\":1},\"1\":{\"819\":1,\"820\":1,\"2040\":1,\"2105\":1,\"2126\":1,\"2127\":1,\"2136\":1,\"2151\":1,\"2152\":1,\"2156\":1,\"2157\":1}}],[\"关闭热部署\",{\"0\":{\"195\":1}}],[\"形象类比\",{\"1\":{\"2206\":1}}],[\"形成几个关键字\",{\"1\":{\"3459\":2}}],[\"形成复杂的业务逻辑功能\",{\"1\":{\"3006\":1}}],[\"形成传输数据通道\",{\"1\":{\"2204\":1}}],[\"形成了高效的四层体系结构\",{\"1\":{\"2203\":1}}],[\"形成了equals\",{\"1\":{\"1429\":1}}],[\"形成一张表\",{\"1\":{\"2108\":1}}],[\"形成链表时\",{\"1\":{\"1926\":1}}],[\"形成计算机世界中类的定义\",{\"1\":{\"1252\":1}}],[\"形成初始化环境\",{\"1\":{\"562\":1}}],[\"形参小括号\",{\"1\":{\"2364\":1}}],[\"形参也属于局部变量\",{\"1\":{\"1354\":1}}],[\"形参类型也相同的数组之间不构成重载\",{\"1\":{\"1295\":1}}],[\"形参不同的方法之间构成重载\",{\"1\":{\"1295\":1}}],[\"形参不能有默认值\",{\"1\":{\"1277\":1}}],[\"形参中的m\",{\"1\":{\"1292\":1}}],[\"形参变量名\",{\"1\":{\"1285\":1}}],[\"形参2\",{\"1\":{\"1277\":1}}],[\"形参1\",{\"1\":{\"1277\":1}}],[\"形参列表\",{\"1\":{\"1277\":2,\"1330\":4,\"1384\":1,\"1385\":1,\"1386\":2,\"1387\":3,\"1481\":1,\"2296\":2,\"2383\":1}}],[\"形参在调用时\",{\"1\":{\"1273\":1}}],[\"形参\",{\"1\":{\"1076\":1,\"1289\":1}}],[\"成因\",{\"0\":{\"3532\":1}}],[\"成功地更新文档\",{\"1\":{\"3413\":1}}],[\"成功\",{\"1\":{\"3164\":1}}],[\"成功的获取了bean\",{\"1\":{\"128\":1}}],[\"成员的投票支持的\",{\"1\":{\"3686\":1}}],[\"成员的投票支持的节点获胜\",{\"1\":{\"3686\":1}}],[\"成员\",{\"1\":{\"1455\":2,\"1638\":1,\"1656\":1,\"2250\":1,\"2264\":1,\"3220\":1,\"3221\":1}}],[\"成员内部类调用外部结构\",{\"0\":{\"1457\":1}}],[\"成员内部类可以直接使用外部类的所有成员\",{\"1\":{\"1455\":1}}],[\"成员内部类的特点\",{\"0\":{\"1452\":1}}],[\"成员内部类\",{\"1\":{\"1451\":2,\"2264\":1}}],[\"成员变量的值\",{\"0\":{\"1659\":1}}],[\"成员变量指定值\",{\"1\":{\"1658\":1}}],[\"成员变量\",{\"1\":{\"1076\":1,\"1257\":1,\"1271\":1,\"1635\":1}}],[\"强大的全文搜索引擎\",{\"1\":{\"3099\":1}}],[\"强转时\",{\"1\":{\"1955\":1}}],[\"强转失败\",{\"1\":{\"1415\":1}}],[\"强烈建议使用枚举类\",{\"1\":{\"1616\":1}}],[\"强制查询结果为完全匹配\",{\"1\":{\"3178\":1}}],[\"强制关闭\",{\"1\":{\"2704\":1}}],[\"强制回收被占用连接\",{\"1\":{\"2667\":1}}],[\"强制结束当前线程\",{\"1\":{\"1727\":1}}],[\"强制转\",{\"1\":{\"1411\":1}}],[\"强制类型转换\",{\"0\":{\"1117\":1}}],[\"强调具备了功能的对象\",{\"1\":{\"1250\":1}}],[\"强调的是功能行为\",{\"1\":{\"1250\":1}}],[\"强类型语言\",{\"1\":{\"1074\":1}}],[\"强行对多个对象进行整体排序的比较\",{\"1\":{\"752\":1}}],[\"找出所有包含关键词的文档\",{\"1\":{\"3420\":1}}],[\"找不到jdk环境\",{\"1\":{\"2709\":1}}],[\"找不到该属性\",{\"1\":{\"2602\":1}}],[\"找不到该标识符\",{\"1\":{\"1072\":1}}],[\"找到config\",{\"1\":{\"3110\":1}}],[\"找到servletdemo1这个类后\",{\"1\":{\"2785\":1}}],[\"找到主机后如何可靠高效地进行数据传输\",{\"1\":{\"2172\":1}}],[\"找到了就使用\",{\"1\":{\"1383\":1}}],[\"找到了就返回第一次出现的索引\",{\"1\":{\"894\":1}}],[\"找到即删除\",{\"1\":{\"912\":1}}],[\"跨网络集群\",{\"1\":{\"3323\":1}}],[\"跨网络集群属于高级内容\",{\"1\":{\"3316\":1}}],[\"跨网络的集群搭建按照各种教程都会失败\",{\"1\":{\"3316\":1}}],[\"跨域配置\",{\"1\":{\"3268\":1,\"3269\":1,\"3270\":1,\"3271\":1,\"3337\":1}}],[\"跨\",{\"1\":{\"1072\":1}}],[\"跨平台本质\",{\"1\":{\"1015\":1}}],[\"跨平台\",{\"1\":{\"1013\":1}}],[\"详情单\",{\"1\":{\"2981\":1}}],[\"详情\",{\"1\":{\"1899\":1}}],[\"详细的文档查询详见下章\",{\"1\":{\"3138\":1}}],[\"详细配置\",{\"1\":{\"2768\":1}}],[\"详细看testwhileidle属性的说明\",{\"1\":{\"2674\":1}}],[\"详细看这里\",{\"1\":{\"2674\":1}}],[\"详细\",{\"1\":{\"1520\":1,\"1521\":1}}],[\"详细描述\",{\"1\":{\"1059\":1,\"1060\":1}}],[\"详见idea\",{\"1\":{\"2723\":1}}],[\"详见流的基类\",{\"0\":{\"2059\":1},\"1\":{\"2061\":1,\"2070\":1}}],[\"详见单例模式\",{\"1\":{\"1769\":1}}],[\"详见thread的api\",{\"1\":{\"1727\":1}}],[\"详见jdk中的元注解\",{\"1\":{\"1644\":1}}],[\"详见jvm\",{\"1\":{\"1226\":1}}],[\"详见多线程\",{\"1\":{\"1424\":3}}],[\"详见集合\",{\"1\":{\"1424\":1}}],[\"详见异常\",{\"1\":{\"1374\":1}}],[\"详见封装\",{\"1\":{\"1270\":1,\"1277\":1}}],[\"详见oop\",{\"1\":{\"1135\":1}}],[\"详见restful规范\",{\"0\":{\"644\":1}}],[\"详见springdata\",{\"1\":{\"414\":1}}],[\"详见\",{\"1\":{\"176\":1,\"1136\":1,\"1247\":1,\"1283\":1,\"1486\":1,\"1490\":1,\"1544\":1,\"1832\":1,\"1838\":1,\"1878\":1,\"1888\":1,\"1917\":1,\"1941\":1,\"2019\":1,\"2041\":1,\"2044\":1,\"2068\":1,\"2270\":1,\"2626\":1,\"2720\":1,\"2740\":1,\"2925\":1,\"2999\":1,\"3081\":1,\"3152\":1,\"3564\":1,\"3570\":1,\"3680\":1}}],[\"概述\",{\"0\":{\"1148\":1,\"1151\":1,\"1155\":1,\"1206\":1,\"1276\":1,\"1480\":1,\"1503\":1,\"1558\":1,\"1709\":1,\"1909\":1,\"2162\":1,\"2170\":1,\"2524\":1,\"2770\":1,\"2979\":1,\"3002\":1,\"3006\":1,\"3089\":1,\"3374\":1,\"3420\":1,\"3429\":1,\"3639\":1}}],[\"概要描述\",{\"1\":{\"1059\":1,\"1060\":1}}],[\"概念上的定义\",{\"1\":{\"1255\":1}}],[\"概念补充\",{\"0\":{\"1018\":1,\"1535\":1}}],[\"概念\",{\"0\":{\"235\":1,\"1066\":1,\"1207\":1,\"1289\":1,\"1681\":1,\"2919\":1,\"2928\":1,\"3060\":1,\"3695\":1},\"1\":{\"1976\":1}}],[\"块标记\",{\"1\":{\"1056\":1}}],[\"卸载\",{\"1\":{\"1035\":1,\"2701\":1}}],[\"傻瓜式安装即可\",{\"1\":{\"1027\":1}}],[\"汇编语言\",{\"1\":{\"1020\":1}}],[\"垃圾收集机制\",{\"0\":{\"1016\":1}}],[\"垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小而浪费资源\",{\"1\":{\"3503\":1}}],[\"垃圾回收机制无法回收该资源\",{\"1\":{\"2037\":1}}],[\"垃圾回收线程\",{\"1\":{\"1689\":1}}],[\"垃圾回收方法\",{\"1\":{\"1424\":1}}],[\"垃圾回收历史\",{\"1\":{\"329\":1}}],[\"垃圾回收\",{\"0\":{\"1705\":1},\"1\":{\"329\":1,\"883\":1}}],[\"寄存器\",{\"1\":{\"1015\":1}}],[\"负责将域名转化成ip地址\",{\"1\":{\"2184\":1}}],[\"负责执行指令\",{\"1\":{\"1015\":1}}],[\"负数\",{\"1\":{\"3053\":1}}],[\"负数补码=\",{\"1\":{\"1157\":1}}],[\"负数的补码是在其源码的基础上\",{\"1\":{\"1121\":1}}],[\"负数的反码是源码基础上\",{\"1\":{\"1121\":1}}],[\"负数就进一\",{\"1\":{\"784\":1}}],[\"负数就舍去\",{\"1\":{\"784\":1}}],[\"具有轻量性\",{\"1\":{\"3547\":1}}],[\"具有60万字\",{\"1\":{\"3477\":1}}],[\"具有继承关系\",{\"0\":{\"1986\":1}}],[\"具有通用性\",{\"1\":{\"1423\":1}}],[\"具有指令集并使用不同的存储区域\",{\"1\":{\"1015\":1}}],[\"具体应用场景\",{\"0\":{\"3541\":1}}],[\"具体怎么分词与分词器和设置有关\",{\"1\":{\"3435\":1}}],[\"具体看下图\",{\"1\":{\"2992\":1}}],[\"具体资源路径\",{\"1\":{\"2949\":1}}],[\"具体配置见上文\",{\"1\":{\"2754\":1}}],[\"具体获取方式见代码\",{\"1\":{\"2651\":1}}],[\"具体存储成什么样的字节流\",{\"1\":{\"2111\":1}}],[\"具体是什么类型无要求\",{\"1\":{\"1997\":1}}],[\"具体重写的规则和细节\",{\"1\":{\"1897\":1}}],[\"具体传输数据的细节\",{\"1\":{\"1512\":1}}],[\"具体执行时\",{\"1\":{\"1500\":1}}],[\"具体修饰的目标\",{\"0\":{\"1310\":1}}],[\"具体对象还需要我们进一步创建\",{\"1\":{\"1266\":1}}],[\"具体类型就是类名\",{\"1\":{\"1266\":1}}],[\"具体的\",{\"1\":{\"1331\":1}}],[\"具体的值也是保存在常量词中的\",{\"1\":{\"1131\":1}}],[\"具体的格式\",{\"1\":{\"298\":1}}],[\"具体体现\",{\"0\":{\"1128\":1}}],[\"具体舍入都可以\",{\"1\":{\"784\":1}}],[\"具体用法详见\",{\"1\":{\"437\":1}}],[\"具体坐标如下\",{\"1\":{\"361\":1,\"371\":1}}],[\"具体开放的内容\",{\"1\":{\"343\":1}}],[\"具体开发什么信息接口\",{\"1\":{\"315\":1}}],[\"具体见后续章节和微服务\",{\"1\":{\"142\":1}}],[\"具体如下\",{\"1\":{\"96\":1,\"1223\":1}}],[\"健壮\",{\"1\":{\"1951\":1,\"3099\":1}}],[\"健壮性\",{\"1\":{\"1013\":1}}],[\"健康\",{\"1\":{\"329\":1,\"3278\":1}}],[\"未定义类型\",{\"1\":{\"3548\":1}}],[\"未发生变化\",{\"1\":{\"2904\":1}}],[\"未关闭数据库连接\",{\"1\":{\"2662\":1}}],[\"未能在因特网上进行广泛推广\",{\"1\":{\"2174\":1}}],[\"未检查的转换时的警告\",{\"1\":{\"1677\":1}}],[\"未来的开发模式都是基于注解的\",{\"1\":{\"1636\":1}}],[\"未付款\",{\"1\":{\"1616\":1}}],[\"未初始化则为null\",{\"1\":{\"1243\":1}}],[\"未初始化的不能访问\",{\"1\":{\"1243\":1}}],[\"未指定内层数组的长度\",{\"1\":{\"1241\":1}}],[\"未指定内层数组长度的要先初始化内层数组才能访问内层元素\",{\"1\":{\"1238\":1}}],[\"未指定内层数组长度\",{\"0\":{\"1237\":1}}],[\"未指定数组内层长度\",{\"0\":{\"1234\":1}}],[\"未知\",{\"1\":{\"997\":2}}],[\"未重写equals\",{\"1\":{\"910\":1}}],[\"搭配使用实现对字符序列的检索和指定模式匹配\",{\"1\":{\"993\":1}}],[\"搭建集群默认是在一个局域网的\",{\"1\":{\"3316\":1}}],[\"搭建完项目后\",{\"1\":{\"3203\":1}}],[\"搭建普通的java项目或springboot项目即可\",{\"1\":{\"3203\":1}}],[\"搭建项目\",{\"0\":{\"3203\":1}}],[\"搭建的\",{\"1\":{\"3092\":1}}],[\"搭建好环境\",{\"1\":{\"441\":1}}],[\"搭建数据库并创建好数据表\",{\"1\":{\"251\":1}}],[\"匹配处理\",{\"0\":{\"3434\":1}}],[\"匹配合适的版本\",{\"1\":{\"3222\":1}}],[\"匹配度分值\",{\"1\":{\"3164\":1}}],[\"匹配查询满足条件的文档数据\",{\"1\":{\"3161\":1}}],[\"匹配模式\",{\"0\":{\"2821\":1}}],[\"匹配与查找\",{\"0\":{\"2476\":1},\"1\":{\"2456\":1}}],[\"匹配器\",{\"1\":{\"993\":1}}],[\"匹配的值\",{\"1\":{\"405\":1}}],[\"参与计算\",{\"1\":{\"3527\":1}}],[\"参与集群的索引和搜索功能\",{\"1\":{\"3261\":1}}],[\"参与执行匹配的所有状态都驻留在匹配器中\",{\"1\":{\"987\":1}}],[\"参生空指针异常\",{\"1\":{\"2052\":1}}],[\"参略等信息\",{\"1\":{\"1059\":1,\"1060\":1}}],[\"参考链接\",{\"1\":{\"1059\":1}}],[\"参数影响重大\",{\"1\":{\"3687\":1}}],[\"参数index指定要删除的索引\",{\"1\":{\"3630\":1}}],[\"参数ip地址字符串或域名字符串\",{\"1\":{\"2193\":1}}],[\"参数导致的\",{\"1\":{\"3275\":1}}],[\"参数值的细节\",{\"1\":{\"3053\":1}}],[\"参数值的传递机制\",{\"0\":{\"1291\":1}}],[\"参数跟service一样\",{\"1\":{\"2837\":1}}],[\"参数与返回值\",{\"0\":{\"2605\":1}}],[\"参数与实例化方法的配合\",{\"1\":{\"734\":1}}],[\"参数设计\",{\"0\":{\"2580\":1}}],[\"参数数据的对象\",{\"1\":{\"2451\":1}}],[\"参数s1\",{\"1\":{\"2413\":1}}],[\"参数都是一样的\",{\"1\":{\"2410\":1}}],[\"参数一样\",{\"1\":{\"2404\":1}}],[\"参数和返回值也都定义好了\",{\"1\":{\"2399\":1}}],[\"参数和返回值\",{\"1\":{\"2381\":1}}],[\"参数false表示关闭自动提交\",{\"1\":{\"2628\":1}}],[\"参数false\",{\"1\":{\"2317\":1}}],[\"参数true\",{\"1\":{\"2317\":1}}],[\"参数必须小于等于\",{\"1\":{\"2234\":1}}],[\"参数化类型\",{\"1\":{\"1948\":2}}],[\"参数即为comparator接口的实例\",{\"1\":{\"1936\":1}}],[\"参数声明\",{\"1\":{\"1653\":1}}],[\"参数将传递给main方法的\",{\"1\":{\"1541\":1}}],[\"参数名=参数值\",{\"1\":{\"2237\":2}}],[\"参数名称\",{\"1\":{\"1980\":1}}],[\"参数名\",{\"1\":{\"1295\":2,\"1536\":1}}],[\"参数赋给形参的是实参真实存储的数据值\",{\"1\":{\"1292\":1}}],[\"参数传递\",{\"0\":{\"1288\":1}}],[\"参数传入一个线程不安全的集合\",{\"1\":{\"939\":1}}],[\"参数列表传递给myinvocationhandle的invoke方法\",{\"1\":{\"2345\":1}}],[\"参数列表格式\",{\"1\":{\"2237\":1}}],[\"参数列表必须不同\",{\"1\":{\"1319\":1}}],[\"参数列表\",{\"1\":{\"1317\":1}}],[\"参数列表确定某一个指定的方法\",{\"1\":{\"1286\":1}}],[\"参数列表不同\",{\"1\":{\"1285\":1}}],[\"参数个数不同\",{\"1\":{\"1285\":1}}],[\"参数被消耗了\",{\"1\":{\"974\":1,\"2392\":1}}],[\"参数集合的泛型必须与本集合的泛型相同或是子类\",{\"1\":{\"960\":1}}],[\"参数集合还在\",{\"1\":{\"946\":1}}],[\"参数集合也有的元素\",{\"1\":{\"913\":1}}],[\"参数类型错误\",{\"1\":{\"1995\":1}}],[\"参数类型是\",{\"1\":{\"1995\":1}}],[\"参数类型是对象t\",{\"1\":{\"976\":1,\"2392\":1}}],[\"参数类型不同\",{\"1\":{\"1285\":1}}],[\"参数类型\",{\"1\":{\"859\":1,\"1058\":1,\"1536\":1,\"2312\":1,\"2363\":1}}],[\"参数类型可以为\",{\"1\":{\"672\":1}}],[\"参数就是文件的路径\",{\"1\":{\"2940\":1}}],[\"参数就是流操作的数据源\",{\"1\":{\"2458\":1}}],[\"参数就是comparator接口的实例\",{\"1\":{\"1906\":1}}],[\"参数就是容量\",{\"1\":{\"1868\":1}}],[\"参数就是string类型的方法名\",{\"1\":{\"858\":1}}],[\"参数就是string类型的属性名\",{\"1\":{\"854\":1,\"855\":1}}],[\"参数就是page对象\",{\"1\":{\"627\":1}}],[\"参数同filewriter\",{\"1\":{\"823\":1}}],[\"参数同上\",{\"1\":{\"468\":1}}],[\"参数\",{\"0\":{\"815\":1,\"816\":1,\"3586\":1,\"3625\":1},\"1\":{\"824\":4,\"850\":1,\"854\":1,\"855\":1,\"864\":1,\"865\":1,\"894\":1,\"899\":1,\"1541\":1,\"1635\":1,\"1661\":1,\"2286\":1,\"2316\":1,\"2399\":1,\"2451\":1,\"2477\":1,\"2591\":1,\"2940\":1,\"3604\":1,\"3609\":1}}],[\"参数为自定义的日期时间格式\",{\"1\":{\"735\":1}}],[\"参数用来指定日期和时间\",{\"1\":{\"718\":1}}],[\"参数可选\",{\"1\":{\"674\":1}}],[\"参数可以是string类型的正则或者pattern类\",{\"1\":{\"887\":1,\"1008\":1}}],[\"参数可以是double类型的数值\",{\"1\":{\"778\":1}}],[\"参数可以是char\",{\"1\":{\"672\":1}}],[\"参数可以是8种基本数据类型\",{\"1\":{\"672\":1}}],[\"参数可以是字符串或代表字符串的变量\",{\"1\":{\"668\":1}}],[\"参数也可以是引用数据类型\",{\"1\":{\"672\":1}}],[\"参数的默认值是\",{\"1\":{\"3517\":1}}],[\"参数的重载方法\",{\"1\":{\"2084\":1}}],[\"参数的类型就是传入数据的类型\",{\"1\":{\"1976\":1}}],[\"参数的类型\",{\"1\":{\"1295\":2}}],[\"参数的数据类型\",{\"0\":{\"1290\":1}}],[\"参数的定义\",{\"0\":{\"560\":1}}],[\"参数的键值对格式为properties\",{\"1\":{\"256\":1}}],[\"参数了冲突\",{\"1\":{\"529\":1}}],[\"参数形参的形式\",{\"1\":{\"468\":1}}],[\"参数实体类绑定的集合就是要查询的集合\",{\"1\":{\"408\":1}}],[\"参数是要进行模糊查询的字段和值\",{\"1\":{\"3239\":1}}],[\"参数是request类和response类\",{\"1\":{\"2946\":1}}],[\"参数是配置文件输入流\",{\"1\":{\"2672\":1}}],[\"参数是配置项名\",{\"1\":{\"152\":1}}],[\"参数是数字\",{\"1\":{\"2638\":1}}],[\"参数是comparator接口\",{\"1\":{\"2483\":1,\"2484\":1}}],[\"参数是charsequence\",{\"1\":{\"730\":1}}],[\"参数是服务器端的ip和端口号\",{\"1\":{\"2220\":1}}],[\"参数是超时的时间\",{\"1\":{\"2196\":1}}],[\"参数是inputstream流\",{\"1\":{\"2095\":1}}],[\"参数是index\",{\"1\":{\"950\":1}}],[\"参数是文件对象\",{\"1\":{\"2048\":1}}],[\"参数是常量或1~10\",{\"1\":{\"1735\":1}}],[\"参数是有顺序的\",{\"1\":{\"1285\":1}}],[\"参数是object类型会更通用\",{\"1\":{\"2343\":1}}],[\"参数是obj\",{\"1\":{\"950\":1}}],[\"参数是number类型的子类\",{\"1\":{\"767\":1}}],[\"参数是number类\",{\"1\":{\"760\":1}}],[\"参数是string正则表达式\",{\"1\":{\"996\":1}}],[\"参数是string\",{\"1\":{\"735\":1}}],[\"参数是temporlaccessor\",{\"1\":{\"729\":1}}],[\"参数是时间戳\",{\"1\":{\"727\":1}}],[\"参数是实体类\",{\"1\":{\"408\":1}}],[\"参数3是舍入策略\",{\"1\":{\"782\":1}}],[\"参数3\",{\"1\":{\"406\":1,\"702\":1,\"2338\":1,\"2340\":1}}],[\"参数2+\",{\"1\":{\"859\":1}}],[\"参数2和3都可选的\",{\"1\":{\"782\":1}}],[\"参数2是精度\",{\"1\":{\"782\":1}}],[\"参数2可以是任意能转为string的数据类型\",{\"1\":{\"703\":1}}],[\"参数2\",{\"1\":{\"404\":1,\"406\":1,\"409\":1,\"410\":1,\"453\":1,\"454\":1,\"627\":1,\"669\":1,\"701\":1,\"702\":1,\"703\":1,\"864\":1,\"874\":1,\"989\":1,\"990\":1,\"1000\":1,\"1001\":1,\"2133\":1,\"2312\":1,\"2314\":1,\"2338\":1,\"2340\":1,\"2450\":1,\"2487\":1}}],[\"参数1\",{\"1\":{\"404\":1,\"406\":1,\"409\":1,\"410\":1,\"453\":1,\"454\":1,\"627\":1,\"669\":1,\"701\":1,\"702\":1,\"703\":1,\"859\":1,\"864\":1,\"874\":1,\"989\":1,\"990\":1,\"1000\":1,\"1001\":1,\"2133\":1,\"2312\":1,\"2314\":1,\"2338\":1,\"2340\":1,\"2450\":1,\"2487\":1}}],[\"专门用于对其他对象身上发生的事件或状态改变进行监听和相应处理的对象\",{\"1\":{\"2958\":1}}],[\"专门用来编译正则表达式的\",{\"1\":{\"986\":1}}],[\"专门完成代理的操作类\",{\"1\":{\"2337\":1}}],[\"专门的算法\",{\"1\":{\"1789\":1}}],[\"专门有一位来储存数据的正负\",{\"1\":{\"1120\":1}}],[\"专门存放工具类的\",{\"1\":{\"646\":1}}],[\"专门存放配置信息相关的类\",{\"1\":{\"626\":1}}],[\"〇\",{\"0\":{\"973\":1}}],[\"拥有同样的词根\",{\"1\":{\"3436\":1}}],[\"拥有可变参数\",{\"1\":{\"1376\":1}}],[\"拥有了iterator接口\",{\"1\":{\"969\":1,\"971\":1}}],[\"拥有所有权限\",{\"1\":{\"55\":1}}],[\"特定语言分析器可用于很多语言\",{\"1\":{\"3469\":1}}],[\"特别是企业级应用\",{\"1\":{\"2525\":1}}],[\"特别地\",{\"1\":{\"1273\":1}}],[\"特征是代理类和目标对象的类都是在编译期间确定下来\",{\"1\":{\"2322\":1}}],[\"特征\",{\"1\":{\"1267\":1}}],[\"特殊字符还是不支持\",{\"1\":{\"3054\":1}}],[\"特殊配置参数\",{\"0\":{\"1647\":1},\"1\":{\"1641\":1}}],[\"特殊结构\",{\"0\":{\"1522\":1}}],[\"特殊对象对tostring的重写\",{\"0\":{\"1433\":1}}],[\"特殊类\",{\"0\":{\"1421\":1}}],[\"特殊形式对象\",{\"0\":{\"1265\":1}}],[\"特殊关键字\",{\"1\":{\"1191\":1}}],[\"特殊情况下省略的内容\",{\"0\":{\"2364\":1}}],[\"特殊情况下\",{\"1\":{\"1328\":1,\"1329\":1}}],[\"特殊情况\",{\"0\":{\"1113\":1,\"1430\":1},\"1\":{\"1372\":1}}],[\"特殊的0\",{\"1\":{\"778\":1}}],[\"特点\",{\"0\":{\"1464\":1,\"1884\":1,\"1933\":1,\"2334\":1},\"1\":{\"1078\":1,\"1887\":1,\"1902\":1,\"1913\":1}}],[\"特性如下\",{\"1\":{\"3477\":1}}],[\"特性\",{\"0\":{\"957\":1}}],[\"处开始\",{\"1\":{\"2234\":1}}],[\"处于新建状态的线程被start\",{\"1\":{\"1749\":1}}],[\"处元素进行交换\",{\"1\":{\"933\":1}}],[\"处元素和\",{\"1\":{\"933\":1}}],[\"处理业务\",{\"1\":{\"3002\":1}}],[\"处理请求\",{\"1\":{\"2694\":1}}],[\"处理不同的查询结果集\",{\"1\":{\"2681\":1}}],[\"处理结果集一行数据中的每一个列\",{\"1\":{\"2600\":1,\"2603\":1,\"2653\":2}}],[\"处理结果集\",{\"1\":{\"2597\":1,\"2613\":1}}],[\"处理本地文件\",{\"1\":{\"2161\":1}}],[\"处理图片资源\",{\"0\":{\"2066\":1}}],[\"处理流\",{\"0\":{\"2028\":1},\"1\":{\"2023\":1}}],[\"处理继承thread类的线程安全问题\",{\"0\":{\"1763\":1}}],[\"处理throws来的的异常\",{\"1\":{\"1609\":1}}],[\"处理异常还是要在代码调用处使用try\",{\"1\":{\"1598\":1}}],[\"处理没有意义\",{\"1\":{\"1595\":1}}],[\"处理\",{\"1\":{\"1532\":1,\"1589\":1,\"3091\":1}}],[\"处理数据\",{\"1\":{\"1211\":1}}],[\"处理成功\",{\"1\":{\"644\":1}}],[\"处理该api的类\",{\"1\":{\"337\":1}}],[\"处理程序\",{\"1\":{\"337\":1}}],[\"反序列化时\",{\"1\":{\"2158\":1}}],[\"反序列化流\",{\"1\":{\"2152\":1,\"2157\":1}}],[\"反序列化\",{\"0\":{\"2152\":1,\"2157\":1},\"1\":{\"2142\":1,\"2143\":1}}],[\"反射的动态性\",{\"0\":{\"2251\":1}}],[\"反射相关api\",{\"0\":{\"2250\":1}}],[\"反射机制使用示例\",{\"0\":{\"2254\":1}}],[\"反射机制最大的特点\",{\"1\":{\"2251\":1}}],[\"反射机制提供的功能\",{\"0\":{\"2249\":1}}],[\"反射机制允许程序在执行期借助于reflection\",{\"1\":{\"2246\":1}}],[\"反射机制\",{\"0\":{\"2246\":1}}],[\"反射机制介绍\",{\"0\":{\"2245\":1}}],[\"反射获取注解信息\",{\"0\":{\"1679\":1}}],[\"反射也得到了加强\",{\"1\":{\"1665\":1}}],[\"反射\",{\"1\":{\"1636\":1,\"1763\":1,\"2246\":1,\"2248\":1}}],[\"反射类\",{\"0\":{\"831\":1},\"1\":{\"57\":1}}],[\"反馈评分\",{\"1\":{\"1500\":1}}],[\"反抗评分\",{\"1\":{\"1500\":1}}],[\"反之不成立\",{\"1\":{\"1177\":1}}],[\"反码+1\",{\"1\":{\"1157\":1}}],[\"反码\",{\"0\":{\"1121\":1},\"1\":{\"1121\":1}}],[\"反复使用一个正则表达式字符串进行匹配效率较低\",{\"1\":{\"993\":1}}],[\"反向引用\",{\"1\":{\"986\":1}}],[\"反转\",{\"1\":{\"930\":1}}],[\"移除所有索引\",{\"0\":{\"3631\":1}}],[\"移除索引\",{\"0\":{\"3629\":1}}],[\"移除全部数据\",{\"0\":{\"3600\":1}}],[\"移除等操作\",{\"1\":{\"1871\":1}}],[\"移除元素\",{\"0\":{\"1848\":1},\"1\":{\"961\":1}}],[\"移除元素的值为obj的元素\",{\"1\":{\"950\":1}}],[\"移除的元素不存在\",{\"1\":{\"950\":1}}],[\"移除指定集合内的所有索引\",{\"1\":{\"3631\":1}}],[\"移除指定索引\",{\"0\":{\"3630\":1}}],[\"移除指定key的key\",{\"1\":{\"961\":1}}],[\"移除指定index的元素并返回\",{\"1\":{\"950\":1}}],[\"移除指定index的元素\",{\"1\":{\"950\":1}}],[\"移除指针指向的值\",{\"1\":{\"926\":1}}],[\"移除交集\",{\"1\":{\"913\":1}}],[\"移动证书\",{\"0\":{\"3297\":1,\"3301\":1}}],[\"移动指针\",{\"0\":{\"2590\":1}}],[\"移动到\",{\"1\":{\"2168\":1}}],[\"移动硬盘等都支持usb连接\",{\"1\":{\"1505\":1}}],[\"移动后的文件\",{\"0\":{\"809\":1}}],[\"移动\",{\"0\":{\"808\":1},\"1\":{\"807\":1}}],[\"元注解之一\",{\"0\":{\"1674\":1}}],[\"元注解说明\",{\"0\":{\"1656\":1}}],[\"元注解\",{\"0\":{\"1644\":1,\"1655\":1},\"1\":{\"1638\":1,\"1640\":1,\"1644\":1}}],[\"元素是学生类\",{\"1\":{\"2469\":1}}],[\"元素a放到数组中\",{\"1\":{\"1893\":1}}],[\"元素a添加失败\",{\"1\":{\"1891\":1}}],[\"元素首先以数组的形式储存\",{\"1\":{\"1892\":1}}],[\"元素不一定相同\",{\"1\":{\"1890\":1}}],[\"元素的值\",{\"1\":{\"1243\":1}}],[\"元素的访问和值\",{\"0\":{\"1238\":1}}],[\"元素访问\",{\"1\":{\"1243\":1}}],[\"元素反转\",{\"1\":{\"930\":1}}],[\"元素可以是任何类型\",{\"1\":{\"905\":1}}],[\"元数据的由来\",{\"0\":{\"524\":1}}],[\"元数据\",{\"1\":{\"329\":1}}],[\"泛型里已经规定了有一个integer类型的参数\",{\"1\":{\"2425\":1}}],[\"泛型是任何类型的list都可以调用这个方法\",{\"1\":{\"1996\":1}}],[\"泛型参数是在调用方法时确定的\",{\"1\":{\"1982\":1}}],[\"泛型标识\",{\"1\":{\"1980\":1}}],[\"泛型>\",{\"1\":{\"1980\":1}}],[\"泛型方法\",{\"1\":{\"1982\":1}}],[\"泛型方法使用的泛型标识\",{\"1\":{\"1979\":1}}],[\"泛型方法所属的类是不是泛型都没有关系\",{\"1\":{\"1977\":1}}],[\"泛型方法跟泛型类\",{\"1\":{\"1977\":1}}],[\"泛型接口没有任何关系\",{\"1\":{\"1977\":1}}],[\"泛型修饰类\",{\"1\":{\"1969\":1}}],[\"泛型要使用一路都用\",{\"1\":{\"1969\":1}}],[\"泛型对应的类型均按照object处理\",{\"1\":{\"1969\":1}}],[\"泛型如果不指定\",{\"1\":{\"1969\":1}}],[\"泛型擦除\",{\"1\":{\"1969\":1}}],[\"泛型不同的引用不能相互赋值\",{\"1\":{\"1969\":1}}],[\"泛型默认是object类型\",{\"1\":{\"1968\":1}}],[\"泛型类型的数组\",{\"1\":{\"1969\":1}}],[\"泛型类的构造器\",{\"0\":{\"1965\":1}}],[\"泛型类的实例化\",{\"0\":{\"1964\":1}}],[\"泛型类可能有多个参数\",{\"1\":{\"1963\":1}}],[\"泛型一般用t\",{\"1\":{\"1962\":1}}],[\"泛型主要用于集合\",{\"1\":{\"1952\":1}}],[\"泛型的第一个参数\",{\"1\":{\"2653\":1}}],[\"泛型的指定中不能使用基本数据类型\",{\"1\":{\"1969\":1}}],[\"泛型的类型只能是类\",{\"1\":{\"1964\":1}}],[\"泛型的类型必须是类\",{\"1\":{\"1959\":1}}],[\"泛型的类型\",{\"1\":{\"1959\":1}}],[\"泛型的类型检查\",{\"1\":{\"1957\":1}}],[\"泛型的嵌套\",{\"1\":{\"1958\":1}}],[\"泛型的发展\",{\"1\":{\"1948\":1}}],[\"泛型的概念\",{\"0\":{\"1948\":1}}],[\"泛型的设计背景\",{\"0\":{\"1947\":1}}],[\"泛型以后\",{\"1\":{\"1830\":1}}],[\"泛型声明\",{\"1\":{\"1670\":1}}],[\"泛型\",{\"0\":{\"904\":1,\"956\":1,\"1945\":1,\"3778\":1},\"1\":{\"1967\":2,\"1993\":1}}],[\"泛型永远都是string\",{\"1\":{\"380\":1}}],[\"快速入门步骤\",{\"0\":{\"2777\":1}}],[\"快速入门\",{\"0\":{\"2776\":1}}],[\"快速在各个线程间切换\",{\"1\":{\"1689\":1}}],[\"快速生成一个list集合\",{\"1\":{\"899\":1}}],[\"快捷键\",{\"1\":{\"186\":1,\"2354\":1}}],[\"快捷笔记的命名为\",{\"1\":{\"1\":1}}],[\"快捷笔记就是对知识的精华总结\",{\"1\":{\"1\":1}}],[\"快捷笔记\",{\"0\":{\"1\":1}}],[\"限制角色\",{\"1\":{\"3533\":1}}],[\"限制下面的方法为重写父类中的方法\",{\"1\":{\"1637\":1,\"1638\":1}}],[\"限制对属性的不合理操作\",{\"1\":{\"1305\":1}}],[\"限制输入的字符类型\",{\"1\":{\"888\":1,\"1009\":1}}],[\"限制日志大小\",{\"1\":{\"303\":1}}],[\"键不能含有\",{\"1\":{\"3593\":1}}],[\"键不可以重复\",{\"1\":{\"957\":1}}],[\"键为字段名\",{\"1\":{\"3197\":1}}],[\"键值对key\",{\"1\":{\"1918\":1}}],[\"键\",{\"1\":{\"1909\":1}}],[\"键盘\",{\"1\":{\"1505\":1}}],[\"键盘输入\",{\"1\":{\"887\":1,\"1008\":1}}],[\"键入\",{\"1\":{\"888\":1,\"1009\":1}}],[\"键名就会变为\",{\"1\":{\"485\":1}}],[\"键名里就不会包含储存空间\",{\"1\":{\"485\":1}}],[\"至此\",{\"1\":{\"2206\":1}}],[\"至于\",{\"1\":{\"1652\":1}}],[\"至于系统是否立刻回收\",{\"1\":{\"883\":1}}],[\"至少需要262144\",{\"1\":{\"3313\":1,\"3346\":1}}],[\"至少有一个类的构造器中使用了\",{\"1\":{\"1387\":1}}],[\"至少当前版本是这样的\",{\"1\":{\"390\":1}}],[\"名字也基本一样\",{\"1\":{\"2452\":1}}],[\"名字\",{\"1\":{\"1627\":1}}],[\"名字随意\",{\"1\":{\"272\":1}}],[\"名称固定\",{\"1\":{\"2713\":1}}],[\"名称\",{\"1\":{\"840\":1,\"3268\":1}}],[\"覆盖查询\",{\"1\":{\"3635\":1}}],[\"覆盖\",{\"1\":{\"1370\":1}}],[\"覆盖写\",{\"1\":{\"822\":2,\"823\":2,\"824\":1,\"2060\":1}}],[\"覆盖或追加写\",{\"1\":{\"821\":1}}],[\"覆盖默认的bean\",{\"1\":{\"531\":1}}],[\"范围\",{\"1\":{\"2185\":1,\"2902\":1}}],[\"范围即为192\",{\"1\":{\"2182\":1}}],[\"范围太大\",{\"1\":{\"1773\":1}}],[\"范围太小\",{\"1\":{\"1773\":1}}],[\"范围小的就没机会执行了\",{\"1\":{\"1172\":1}}],[\"范围在\",{\"1\":{\"813\":1}}],[\"范围内的\",{\"1\":{\"813\":1}}],[\"范围查询的方法包括\",{\"1\":{\"3236\":1}}],[\"范围查询的字符\",{\"1\":{\"3172\":1}}],[\"范围查询\",{\"0\":{\"3171\":1,\"3235\":1},\"1\":{\"410\":1,\"3237\":1}}],[\"到查询字符串的方式重用这些相同的版本号\",{\"1\":{\"3498\":1}}],[\"到磁盘\",{\"1\":{\"3449\":1}}],[\"到os\",{\"1\":{\"3449\":1}}],[\"到副本分片\",{\"1\":{\"3417\":1}}],[\"到程序\",{\"1\":{\"2022\":1}}],[\"到处运行\",{\"1\":{\"1015\":1}}],[\"到\",{\"1\":{\"813\":2,\"824\":1,\"2233\":1,\"3400\":1,\"3527\":1}}],[\"到了f2的位置\",{\"1\":{\"809\":1}}],[\"到要求数字精度比较高\",{\"1\":{\"778\":1}}],[\"组合方法有三个\",{\"1\":{\"3230\":1}}],[\"组合方式\",{\"1\":{\"3169\":1}}],[\"组合查询的条件\",{\"1\":{\"3230\":1,\"3231\":1}}],[\"组合查询的关键字\",{\"1\":{\"3169\":1}}],[\"组合查询\",{\"0\":{\"3229\":1}}],[\"组合类型\",{\"1\":{\"3029\":1}}],[\"组合数据访问层层中基本功能\",{\"1\":{\"3006\":1}}],[\"组织提供的一个开源\",{\"1\":{\"2679\":1}}],[\"组成的数据结构\",{\"1\":{\"3546\":1}}],[\"组成的file类数组\",{\"1\":{\"795\":1}}],[\"组成\",{\"0\":{\"3431\":1},\"1\":{\"1082\":1,\"3620\":1,\"3698\":1}}],[\"组件也可以理解为工具类\",{\"1\":{\"2980\":1}}],[\"组件\",{\"0\":{\"591\":1},\"1\":{\"612\":1}}],[\"组件后面再安装\",{\"1\":{\"581\":1}}],[\"组件状态未知\",{\"1\":{\"349\":1}}],[\"组件无法提供服务\",{\"1\":{\"349\":1}}],[\"组件掉线\",{\"1\":{\"349\":1}}],[\"组件运行正常\",{\"1\":{\"349\":1}}],[\"组件的状态\",{\"0\":{\"349\":1}}],[\"绝对路径或者相对路径\",{\"1\":{\"786\":1,\"2015\":1}}],[\"绝对值角度\",{\"1\":{\"784\":1}}],[\"绝对值\",{\"0\":{\"760\":1}}],[\"往现存接口中添加新的方法\",{\"1\":{\"1521\":1}}],[\"往小变\",{\"1\":{\"784\":1}}],[\"往大变\",{\"1\":{\"784\":2}}],[\"往往是因为没有配置\",{\"1\":{\"3275\":1}}],[\"往往都有最大的负载能力\",{\"1\":{\"3259\":1}}],[\"往往已经创建了若干数据库连接置于连接池中备用\",{\"1\":{\"2667\":1}}],[\"往往导致进程挂起\",{\"1\":{\"829\":1,\"2082\":1}}],[\"往往会发生值大小的改变\",{\"1\":{\"783\":1}}],[\"往往开发环境大多数都是本地的电脑环境和局域网内的环境\",{\"1\":{\"39\":1}}],[\"舍去\",{\"1\":{\"784\":1}}],[\"舍去小数位\",{\"1\":{\"1139\":1}}],[\"舍去小数取整\",{\"1\":{\"763\":1}}],[\"舍去小数\",{\"0\":{\"763\":1}}],[\"舍入策略\",{\"1\":{\"784\":1}}],[\"精确值\",{\"1\":{\"3470\":1}}],[\"精确匹配\",{\"0\":{\"2822\":1},\"1\":{\"2826\":1}}],[\"精准\",{\"1\":{\"2821\":1}}],[\"精准匹配\",{\"1\":{\"1000\":1,\"1005\":1}}],[\"精准模式\",{\"1\":{\"783\":1,\"784\":1}}],[\"精度是float的两倍\",{\"1\":{\"1094\":1}}],[\"精度很难满足需求\",{\"1\":{\"1094\":1}}],[\"精度0\",{\"1\":{\"784\":12}}],[\"精度2\",{\"1\":{\"784\":12}}],[\"精度会有默认值\",{\"1\":{\"783\":1}}],[\"作者等\",{\"1\":{\"2803\":1}}],[\"作用类似于框架中的钩子函数\",{\"1\":{\"2955\":1}}],[\"作用域是一次会话\",{\"1\":{\"2923\":1}}],[\"作用域是一次请求\",{\"1\":{\"2921\":1}}],[\"作用域是一个页面\",{\"1\":{\"2920\":1}}],[\"作用在代码的注解\",{\"1\":{\"1638\":1}}],[\"作用\",{\"0\":{\"1067\":1,\"1524\":1,\"2091\":1,\"2643\":1},\"1\":{\"1527\":1,\"1528\":1,\"2073\":1,\"2122\":1,\"2142\":1,\"2338\":1,\"2477\":1,\"2962\":2,\"2963\":2,\"2964\":2,\"2965\":3,\"2966\":3,\"2967\":3,\"2968\":3,\"2969\":2,\"3058\":1}}],[\"作用2\",{\"1\":{\"783\":1}}],[\"作用1\",{\"1\":{\"783\":1}}],[\"作为区分\",{\"1\":{\"3651\":1}}],[\"作为片键\",{\"1\":{\"3623\":1}}],[\"作为复制源的原来的分片\",{\"1\":{\"3369\":1}}],[\"作为集群的一部分\",{\"1\":{\"3261\":1}}],[\"作为文本数据分析\",{\"1\":{\"3094\":1}}],[\"作为配置文件\",{\"1\":{\"3017\":1}}],[\"作为组件\",{\"1\":{\"2984\":1}}],[\"作为应用程序和扩展的构建单元\",{\"1\":{\"2984\":1}}],[\"作为jar里面的\",{\"1\":{\"2981\":1}}],[\"作为域对象\",{\"0\":{\"2936\":1}}],[\"作为属性\",{\"1\":{\"2650\":1}}],[\"作为方法的第一个参数\",{\"1\":{\"2580\":1}}],[\"作为方法区中类数据的访问入口\",{\"1\":{\"2274\":1}}],[\"作为函数式接口的实例\",{\"1\":{\"2360\":1}}],[\"作为绝对路径返回调用\",{\"1\":{\"2166\":1}}],[\"作为返回值\",{\"1\":{\"1967\":1}}],[\"作为参数传入\",{\"1\":{\"2345\":1}}],[\"作为参数\",{\"1\":{\"1967\":1}}],[\"作为古老的实现类\",{\"1\":{\"1915\":1}}],[\"作为list接口的古老实现类\",{\"1\":{\"1862\":1}}],[\"作为list接口的主要实现类\",{\"1\":{\"1860\":1}}],[\"作为一个类\",{\"0\":{\"1454\":1}}],[\"作为外部类的成员\",{\"0\":{\"1453\":1}}],[\"作为标记区分每个注释块的内容\",{\"1\":{\"1056\":1}}],[\"作为整数读取的字符\",{\"1\":{\"813\":1}}],[\"作为springmvc的异常处理器\",{\"1\":{\"645\":1}}],[\"作为要扫描的包\",{\"1\":{\"566\":1}}],[\"作为软件开发工程师\",{\"1\":{\"28\":1,\"35\":1}}],[\"十进制转成二进制\",{\"1\":{\"1122\":1}}],[\"十进制\",{\"1\":{\"1122\":1}}],[\"十进制数形式\",{\"1\":{\"1093\":1}}],[\"十进制数的二进制表示形式可能不精确\",{\"1\":{\"778\":1}}],[\"十进制值通常没有完全相同的二进制表示形式\",{\"1\":{\"778\":1}}],[\"十六进制\",{\"1\":{\"147\":1,\"1119\":1,\"1122\":1}}],[\"位的指针意味着更大的浪费\",{\"1\":{\"3504\":1}}],[\"位的系统上为\",{\"1\":{\"3504\":1}}],[\"位的操作系统的最大寻址空间为\",{\"1\":{\"3504\":1}}],[\"位的操作系统可以使用更多的内存\",{\"1\":{\"3504\":1}}],[\"位的操作系统上为\",{\"1\":{\"3504\":1}}],[\"位\",{\"1\":{\"3504\":2,\"3526\":1}}],[\"位于网络中的计算机具有唯一的ip地址\",{\"1\":{\"2244\":1}}],[\"位运算符\",{\"0\":{\"1154\":1},\"1\":{\"1155\":1}}],[\"位操作以及一些其他操作\",{\"1\":{\"777\":1}}],[\"位置的元素\",{\"1\":{\"947\":1}}],[\"位置\",{\"1\":{\"649\":1,\"714\":1,\"715\":1,\"716\":1,\"723\":1,\"728\":1,\"743\":1,\"752\":1,\"759\":1,\"771\":1,\"777\":1,\"778\":1,\"786\":1,\"812\":1,\"820\":1,\"832\":1,\"860\":1,\"867\":1,\"880\":1,\"885\":1,\"889\":1,\"901\":1,\"920\":1,\"927\":1,\"941\":1,\"953\":1,\"972\":1,\"993\":1,\"1002\":1,\"1006\":1,\"1056\":1,\"1342\":1,\"2132\":1,\"2168\":1,\"2550\":1}}],[\"另外还有web\",{\"1\":{\"2996\":1}}],[\"另外还有一个方法可以获取到当前web应用的servletcontext对象\",{\"1\":{\"2964\":1}}],[\"另外包是有层级的\",{\"1\":{\"1337\":1}}],[\"另外\",{\"1\":{\"777\":1}}],[\"另一方面也增加了系统运行环境的平稳性\",{\"1\":{\"2667\":1}}],[\"另一套就是网络编程nio\",{\"1\":{\"2161\":1}}],[\"另一个mongod实例可能暂时认为自己也是主要的\",{\"1\":{\"3641\":1}}],[\"另一个产品目录的索引\",{\"1\":{\"3360\":1}}],[\"另一个是副节点\",{\"1\":{\"3383\":1}}],[\"另一个是记录文件指针的位置文件\",{\"1\":{\"2140\":1}}],[\"另一个是实体类\",{\"1\":{\"637\":1}}],[\"另一个原因是默认的锁申请操作是阻塞的\",{\"1\":{\"1794\":1}}],[\"另一个任务就可以锁定并使用它了\",{\"1\":{\"1772\":1}}],[\"另一个线程参与进来执行\",{\"1\":{\"1755\":1}}],[\"另一种方法是由程序员在编写程序时\",{\"1\":{\"1562\":1}}],[\"另一部分是请求体\",{\"1\":{\"434\":1}}],[\"求差集\",{\"1\":{\"913\":1}}],[\"求atan值\",{\"1\":{\"770\":1}}],[\"求acos值\",{\"1\":{\"770\":1}}],[\"求asin值\",{\"1\":{\"770\":1}}],[\"求tan值\",{\"1\":{\"770\":1}}],[\"求cos值\",{\"1\":{\"770\":1}}],[\"求sin值\",{\"1\":{\"770\":1}}],[\"求参数的算术平方根\",{\"1\":{\"769\":1}}],[\"求log\",{\"1\":{\"769\":1}}],[\"求较大值\",{\"0\":{\"768\":1}}],[\"求较小值\",{\"0\":{\"767\":1}}],[\"求数值的绝对值\",{\"1\":{\"760\":1}}],[\"π\",{\"1\":{\"765\":1}}],[\"均使用java\",{\"1\":{\"2998\":1}}],[\"均无法继续执行\",{\"1\":{\"1790\":1}}],[\"均匀分布\",{\"1\":{\"761\":1}}],[\"均可\",{\"1\":{\"147\":1}}],[\"排除的字段\",{\"1\":{\"3233\":1}}],[\"排除掉tomcat的starter后\",{\"1\":{\"134\":1}}],[\"排列\",{\"1\":{\"1887\":1}}],[\"排序方式取值1或\",{\"1\":{\"3625\":1}}],[\"排序方式\",{\"1\":{\"3611\":1,\"3625\":1}}],[\"排序方式可以是多个字段\",{\"1\":{\"3611\":1}}],[\"排序查询\",{\"0\":{\"3611\":1},\"1\":{\"3244\":1}}],[\"排序的字段\",{\"1\":{\"3185\":1}}],[\"排序分为\",{\"1\":{\"1934\":1}}],[\"排序并非是返回一个新数组\",{\"1\":{\"891\":1}}],[\"排序\",{\"0\":{\"751\":1,\"1934\":1,\"2473\":1,\"3184\":1,\"3243\":1},\"1\":{\"929\":1,\"932\":1,\"2454\":1}}],[\"排序接口\",{\"0\":{\"741\":1}}],[\"言外之意\",{\"1\":{\"739\":1,\"1454\":1}}],[\"获得结果\",{\"1\":{\"2531\":1}}],[\"获得一个employee\",{\"1\":{\"2420\":1,\"2423\":1,\"2426\":1}}],[\"获得一个offsetdatetime时间对象\",{\"1\":{\"725\":1}}],[\"获得核心类库string的类加载器\",{\"1\":{\"2280\":1}}],[\"获得当前自定义类加载器\",{\"1\":{\"2280\":1}}],[\"获得本地ip对象\",{\"0\":{\"2192\":1}}],[\"获得线程的优先级\",{\"1\":{\"1737\":1}}],[\"获得\",{\"1\":{\"1442\":1}}],[\"获取统计信息\",{\"1\":{\"3704\":2}}],[\"获取响应\",{\"1\":{\"3220\":1,\"3221\":1}}],[\"获取响应结果\",{\"1\":{\"3212\":1,\"3218\":1,\"3225\":1}}],[\"获取响应对象\",{\"1\":{\"3209\":1,\"3214\":1}}],[\"获取查询结果\",{\"1\":{\"3211\":1}}],[\"获取独立存储的字段要比从\",{\"1\":{\"3197\":1}}],[\"获取httpsession对象\",{\"0\":{\"3062\":1}}],[\"获取hour\",{\"1\":{\"719\":1}}],[\"获取触发事件的servletrequest对象\",{\"1\":{\"2967\":1}}],[\"获取触发事件的httpsession对象\",{\"1\":{\"2966\":1,\"2968\":1}}],[\"获取被修改或添加的属性值\",{\"1\":{\"2965\":1,\"2966\":1,\"2967\":1}}],[\"获取被代理类对象superman\",{\"1\":{\"2345\":1}}],[\"获取被代理类的对象\",{\"1\":{\"2333\":1}}],[\"获取修改或添加的属性名\",{\"1\":{\"2965\":1,\"2966\":1,\"2967\":1}}],[\"获取其真正部署后的路径\",{\"1\":{\"2940\":1}}],[\"获取其他信息\",{\"0\":{\"2297\":1}}],[\"获取转发时发送的共享数据\",{\"1\":{\"2903\":1}}],[\"获取response字节输出流\",{\"1\":{\"2894\":1,\"2895\":1}}],[\"获取单个参数值\",{\"1\":{\"2872\":1}}],[\"获取值\",{\"1\":{\"2872\":1}}],[\"获取的内容如下\",{\"1\":{\"2866\":1}}],[\"获取的是该类的所有属性\",{\"1\":{\"2308\":1}}],[\"获取的是public修饰的属性\",{\"1\":{\"2307\":1}}],[\"获取的是参数数据类型的class对象\",{\"1\":{\"859\":1}}],[\"获取字节输出流\",{\"1\":{\"2885\":1,\"2896\":1}}],[\"获取字节输入流\",{\"0\":{\"2854\":1}}],[\"获取字符输出流\",{\"1\":{\"2885\":1}}],[\"获取字符输入流\",{\"0\":{\"2855\":1},\"1\":{\"2858\":1}}],[\"获取字符串类型的形参\",{\"1\":{\"872\":1}}],[\"获取字符串形式的方法名\",{\"1\":{\"871\":1,\"2296\":1}}],[\"获取字符串形式的属性名\",{\"1\":{\"863\":1}}],[\"获取字符串内容的长度\",{\"1\":{\"697\":1}}],[\"获取所有参数的map集合\",{\"1\":{\"2872\":1}}],[\"获取所有参数map集合\",{\"1\":{\"2869\":1}}],[\"获取所有请求的参数名称\",{\"1\":{\"2869\":1}}],[\"获取所有请求头的名称\",{\"0\":{\"2850\":1}}],[\"获取所有的请求头\",{\"1\":{\"2850\":1}}],[\"获取所有自己所有权限的属性\",{\"0\":{\"2291\":1}}],[\"获取客户机的ip地址\",{\"1\":{\"2845\":1}}],[\"获取get的请求参数\",{\"1\":{\"2845\":1}}],[\"获取协议及版本\",{\"1\":{\"2845\":1}}],[\"获取uri\",{\"1\":{\"2845\":1}}],[\"获取url\",{\"1\":{\"2845\":1}}],[\"获取虚拟目录\",{\"1\":{\"2845\":1}}],[\"获取到数据后就可以继续后续的业务\",{\"1\":{\"2832\":1}}],[\"获取请求对象\",{\"1\":{\"3217\":1}}],[\"获取请求参数\",{\"1\":{\"2862\":1,\"2878\":1}}],[\"获取请求体的方式\",{\"0\":{\"2853\":1}}],[\"获取请求体\",{\"0\":{\"2851\":1}}],[\"获取请求头的值\",{\"0\":{\"2848\":1}}],[\"获取请求头\",{\"0\":{\"2847\":1}}],[\"获取请求行\",{\"0\":{\"2843\":1}}],[\"获取请求数据\",{\"0\":{\"2832\":1}}],[\"获取请求方式\",{\"1\":{\"2814\":1,\"2845\":1,\"2862\":1}}],[\"获取请求时发送过来的流对象\",{\"1\":{\"2225\":1}}],[\"获取sessionid\",{\"0\":{\"3067\":1}}],[\"获取servletcontext对象\",{\"0\":{\"2930\":1},\"1\":{\"2965\":1}}],[\"获取servletconfig对象\",{\"0\":{\"2804\":1}}],[\"获取servlet路径\",{\"1\":{\"2845\":1}}],[\"获取servlet信息\",{\"0\":{\"2803\":1}}],[\"获取string类型的操作对象\",{\"1\":{\"379\":1,\"380\":1}}],[\"获取速度快\",{\"1\":{\"2668\":1}}],[\"获取最大的生日\",{\"1\":{\"2657\":1}}],[\"获取最后一次的修改时间\",{\"1\":{\"793\":1}}],[\"获取了父类的泛型参数\",{\"1\":{\"2653\":1}}],[\"获取泛型值\",{\"1\":{\"2653\":1}}],[\"获取泛型类型\",{\"1\":{\"2301\":1}}],[\"获取blob类型的数据\",{\"1\":{\"2611\":1}}],[\"获取列值\",{\"1\":{\"2600\":1,\"2603\":1,\"2653\":2}}],[\"获取指针所在行的数据\",{\"0\":{\"2591\":1}}],[\"获取指定列的别名\",{\"1\":{\"2593\":1}}],[\"获取指定列的名称\",{\"1\":{\"2593\":1}}],[\"获取指定的构造器\",{\"0\":{\"2316\":1},\"1\":{\"2315\":1}}],[\"获取指定的某个方法\",{\"0\":{\"2312\":1,\"2313\":1}}],[\"获取指定的方法\",{\"1\":{\"2311\":1}}],[\"获取指定的属性对象\",{\"1\":{\"854\":1,\"855\":1}}],[\"获取指定索引出的值\",{\"1\":{\"1220\":1}}],[\"获取指定key对应的value\",{\"1\":{\"963\":1}}],[\"获取指定index\",{\"1\":{\"947\":1}}],[\"获取preparedstatement的实例\",{\"1\":{\"2634\":1}}],[\"获取preparedstatement对象并给占位符赋值\",{\"1\":{\"2597\":1,\"2612\":1,\"2613\":1}}],[\"获取preparedstatement对象\",{\"1\":{\"2569\":1,\"2600\":1,\"2603\":1}}],[\"获取person的class实例\",{\"1\":{\"1680\":1}}],[\"获取person类的class对象\",{\"1\":{\"839\":1}}],[\"获取连接时最大等待时间\",{\"1\":{\"2673\":1,\"2674\":1}}],[\"获取连接\",{\"1\":{\"2547\":1,\"2548\":1,\"2551\":1,\"2573\":1,\"2575\":1}}],[\"获取连接对象\",{\"1\":{\"2545\":1,\"2597\":1,\"2600\":1,\"2603\":1,\"2639\":1}}],[\"获取对象包含的值\",{\"0\":{\"2507\":1}}],[\"获取对应的xxxoperations对象\",{\"1\":{\"379\":1}}],[\"获取optional容器的对象值\",{\"0\":{\"2506\":1}}],[\"获取工资大于6000的员工set集合\",{\"1\":{\"2491\":1}}],[\"获取工资大于6000的员工list集合\",{\"1\":{\"2491\":1}}],[\"获取工资最低的员工对象\",{\"1\":{\"2484\":1}}],[\"获取1到10的总和\",{\"1\":{\"2487\":1}}],[\"获取要连接的数据库信息\",{\"1\":{\"2539\":1}}],[\"获取要筛选的元素的总数\",{\"1\":{\"2482\":1}}],[\"获取要增强的方法名\",{\"1\":{\"2335\":1}}],[\"获取子集合\",{\"1\":{\"2472\":1}}],[\"获取班级学生所有年龄组成的集合\",{\"1\":{\"2470\":1,\"2471\":1}}],[\"获取一个集合\",{\"1\":{\"2469\":2}}],[\"获取一个stream\",{\"1\":{\"2440\":1}}],[\"获取一个seasons对象\",{\"1\":{\"1631\":1}}],[\"获取每个列的列名\",{\"1\":{\"2600\":1,\"2603\":1,\"2653\":2}}],[\"获取每个学生的年龄\",{\"1\":{\"2469\":1}}],[\"获取每一列的值\",{\"1\":{\"2588\":1}}],[\"获取每页显示的条数\",{\"1\":{\"628\":1}}],[\"获取员工集合\",{\"1\":{\"2458\":1}}],[\"获取员工姓名\",{\"1\":{\"2414\":1}}],[\"获取运行类中指定变量名的属性\",{\"1\":{\"2307\":1,\"2308\":1}}],[\"获取运行时方法的结构\",{\"0\":{\"2296\":1}}],[\"获取运行时类中指定变量名的属性\",{\"1\":{\"2306\":1}}],[\"获取运行时类声明的注解\",{\"0\":{\"2304\":1}}],[\"获取运行时类实现的接口\",{\"0\":{\"2302\":1}}],[\"获取运行时类的父类实现的接口\",{\"1\":{\"2302\":1}}],[\"获取运行时类的父类\",{\"0\":{\"2299\":1}}],[\"获取运行时类的父类的泛型\",{\"0\":{\"2300\":1,\"2301\":1},\"1\":{\"842\":1}}],[\"获取运行时类的构造器结构\",{\"0\":{\"2298\":1}}],[\"获取运行时类的方法\",{\"0\":{\"2295\":1}}],[\"获取运行时类的所有结构\",{\"1\":{\"2287\":1}}],[\"获取运行时类的完整结构\",{\"0\":{\"2287\":1}}],[\"获取运行时类所在的包\",{\"0\":{\"2303\":1},\"1\":{\"846\":1}}],[\"获取本类所有权限的方法\",{\"1\":{\"2295\":1}}],[\"获取类和父类中public方法\",{\"1\":{\"2295\":1}}],[\"获取类路径下的指定文件的输入流\",{\"0\":{\"2281\":1}}],[\"获取自己和父类所有public属性\",{\"0\":{\"2289\":1}}],[\"获取扩展类加载器\",{\"1\":{\"2280\":1}}],[\"获取cookie\",{\"0\":{\"3047\":1},\"1\":{\"3044\":1,\"3047\":1}}],[\"获取cookie的value\",{\"1\":{\"3044\":1}}],[\"获取cookie的name\",{\"1\":{\"3044\":1}}],[\"获取cookie的name和value\",{\"0\":{\"3044\":1}}],[\"获取cookie数据\",{\"0\":{\"3043\":1}}],[\"获取connection对象\",{\"1\":{\"2567\":2}}],[\"获取class类的实例\",{\"0\":{\"2265\":1}}],[\"获取callable中call方法的返回值\",{\"1\":{\"1810\":1}}],[\"获取该泛型作为属性clazz的值\",{\"1\":{\"2651\":1}}],[\"获取该url的查询名\",{\"1\":{\"2239\":1}}],[\"获取该url的文件名\",{\"1\":{\"2239\":1}}],[\"获取该url的文件路径\",{\"1\":{\"2239\":1}}],[\"获取该url的端口号\",{\"1\":{\"2239\":1}}],[\"获取该url的主机名\",{\"1\":{\"2239\":1}}],[\"获取该url的协议名\",{\"1\":{\"2239\":1}}],[\"获取该方法的myannotation注解实例\",{\"1\":{\"1680\":1}}],[\"获取输出流和输入流\",{\"1\":{\"2221\":1}}],[\"获取输入流和输出流\",{\"1\":{\"2221\":1}}],[\"获取套接字绑定的本地地址\",{\"1\":{\"2214\":1,\"2233\":1}}],[\"获取ip地址的主机名\",{\"0\":{\"2195\":1}}],[\"获取与指定文件的连接\",{\"1\":{\"2168\":1}}],[\"获取fileinputstream对象的字符集\",{\"1\":{\"2099\":1}}],[\"获取返回结果\",{\"1\":{\"1808\":1}}],[\"获取返回值类型\",{\"1\":{\"870\":1,\"2296\":1}}],[\"获取方法名\",{\"1\":{\"2296\":1}}],[\"获取方法声明的注解\",{\"1\":{\"2296\":1}}],[\"获取方法结构\",{\"0\":{\"2294\":1}}],[\"获取方法上的所有注解\",{\"1\":{\"1680\":1}}],[\"获取方法的注解\",{\"1\":{\"868\":1,\"2296\":1}}],[\"获取枚举类对象的属性\",{\"1\":{\"1621\":1}}],[\"获取异常类名和异常信息\",{\"1\":{\"1589\":1}}],[\"获取异常信息\",{\"1\":{\"1587\":1,\"1589\":1}}],[\"获取用户的输入\",{\"1\":{\"3002\":1}}],[\"获取用户的年龄\",{\"1\":{\"1534\":1}}],[\"获取用户密码\",{\"1\":{\"2558\":1}}],[\"获取用户名\",{\"1\":{\"2558\":1}}],[\"获取用于sql的日期\",{\"1\":{\"707\":1}}],[\"获取数据表的count\",{\"1\":{\"2657\":1}}],[\"获取数据库的连接\",{\"1\":{\"2577\":1,\"2581\":1}}],[\"获取数据库连接\",{\"0\":{\"2575\":1},\"1\":{\"2635\":1}}],[\"获取数据库连接对象\",{\"1\":{\"2566\":1,\"2652\":1,\"2672\":1}}],[\"获取数据类型\",{\"1\":{\"2293\":1}}],[\"获取数据\",{\"0\":{\"1993\":1},\"1\":{\"3047\":1}}],[\"获取数据需要数据库链接\",{\"1\":{\"1401\":1}}],[\"获取数组中实际元素的个数的需求\",{\"1\":{\"1822\":1}}],[\"获取数组长度\",{\"0\":{\"1221\":1}}],[\"获取成员\",{\"1\":{\"1312\":1}}],[\"获取匹配的结果\",{\"1\":{\"998\":1}}],[\"获取结果集的元数据\",{\"1\":{\"2600\":1,\"2653\":2}}],[\"获取结果等\",{\"1\":{\"1808\":1}}],[\"获取结果\",{\"1\":{\"987\":1}}],[\"获取value\",{\"1\":{\"963\":1}}],[\"获取线程安全的集合\",{\"1\":{\"939\":1}}],[\"获取集合的元素个数\",{\"1\":{\"907\":1}}],[\"获取后的值依然是十进制\",{\"1\":{\"888\":1,\"1009\":1}}],[\"获取系统信息\",{\"1\":{\"884\":1}}],[\"获取抛出的异常\",{\"1\":{\"873\":1,\"2296\":1}}],[\"获取形参列表\",{\"1\":{\"872\":1,\"2296\":1}}],[\"获取权限修饰符\",{\"1\":{\"869\":1,\"2293\":1,\"2296\":1}}],[\"获取属性\",{\"0\":{\"2307\":1,\"2308\":1}}],[\"获取属性名\",{\"1\":{\"2293\":1}}],[\"获取属性结构\",{\"0\":{\"2288\":1}}],[\"获取属性的结构\",{\"0\":{\"2293\":1}}],[\"获取属性的值\",{\"1\":{\"1259\":1}}],[\"获取属性的数据类型\",{\"1\":{\"862\":1}}],[\"获取属性值\",{\"0\":{\"2309\":1},\"1\":{\"864\":1}}],[\"获取加载器的父类\",{\"1\":{\"845\":1}}],[\"获取目录下所有文件\",{\"1\":{\"795\":1}}],[\"获取目录下的文件名称组成的string数组\",{\"1\":{\"794\":1}}],[\"获取当前事件涉及的属性值\",{\"1\":{\"2968\":1}}],[\"获取当前事件涉及的属性名\",{\"1\":{\"2968\":1}}],[\"获取当前basedao的子类继承的父类中的泛型\",{\"1\":{\"2653\":1}}],[\"获取当前连接的隔离级别\",{\"1\":{\"2639\":1}}],[\"获取当前隔离级别\",{\"0\":{\"2637\":1}}],[\"获取当前这条数据的各个字段值\",{\"1\":{\"2597\":1}}],[\"获取当前线程\",{\"1\":{\"1728\":1}}],[\"获取当前线程的名字\",{\"1\":{\"1727\":1}}],[\"获取当前对象的哈希值\",{\"1\":{\"1424\":1}}],[\"获取当前对象的所属类\",{\"1\":{\"1424\":1}}],[\"获取当前对象的类加载器\",{\"1\":{\"837\":1}}],[\"获取当前时间距离1970\",{\"1\":{\"1204\":2}}],[\"获取当前属性的权限修饰符\",{\"1\":{\"861\":1}}],[\"获取当前运行时类中声明为public的构造器\",{\"1\":{\"2298\":2}}],[\"获取当前运行时类中声明的所有方法\",{\"1\":{\"2295\":1}}],[\"获取当前运行时类中声明的所有权限的方法\",{\"1\":{\"857\":1}}],[\"获取当前运行时类中声明的所有属性\",{\"1\":{\"853\":1,\"2291\":1}}],[\"获取当前运行时类中声明的所有的构造器\",{\"1\":{\"849\":1,\"2298\":2}}],[\"获取当前运行时类中的某一个方法的method对象\",{\"1\":{\"858\":1,\"859\":1}}],[\"获取当前运行时类及其所有父类中声明为public权限的方法\",{\"1\":{\"856\":1,\"2295\":1}}],[\"获取当前运行时类及其父类中声明为public访问权限的属性\",{\"1\":{\"852\":1,\"2289\":1}}],[\"获取当前运行时类的构造器对象组成的数组\",{\"1\":{\"848\":1}}],[\"获取当前运行时类实现的所有接口\",{\"1\":{\"843\":1}}],[\"获取当前文件上层文件目录的路径\",{\"1\":{\"791\":1}}],[\"获取当前页\",{\"1\":{\"628\":1}}],[\"获取文件服务器路径\",{\"0\":{\"2939\":1}}],[\"获取文件类型\",{\"0\":{\"2934\":1}}],[\"获取文件记录指针的当前位置\",{\"1\":{\"2131\":1}}],[\"获取文件长度\",{\"1\":{\"792\":1}}],[\"获取文件的服务器路径\",{\"1\":{\"2942\":1}}],[\"获取文件的真实\",{\"1\":{\"2929\":1}}],[\"获取文件的名称\",{\"1\":{\"790\":1}}],[\"获取文件的绝对路径\",{\"1\":{\"788\":1}}],[\"获取文件路径\",{\"1\":{\"789\":1}}],[\"获取文档的所有数据\",{\"0\":{\"432\":1}}],[\"获取信息\",{\"0\":{\"787\":1}}],[\"获取包含当前时间的instant对象\",{\"1\":{\"724\":1}}],[\"获取现在是一年中的第几天\",{\"1\":{\"719\":1}}],[\"获取毫秒时间戳\",{\"1\":{\"726\":1,\"881\":1}}],[\"获取毫秒\",{\"1\":{\"719\":1}}],[\"获取秒\",{\"1\":{\"719\":1}}],[\"获取day\",{\"1\":{\"719\":1}}],[\"获取mime类型\",{\"0\":{\"2931\":1},\"1\":{\"2929\":1}}],[\"获取minute\",{\"1\":{\"719\":1}}],[\"获取matcher类的实例\",{\"1\":{\"998\":1}}],[\"获取month\",{\"1\":{\"719\":1}}],[\"获取ms时间戳\",{\"1\":{\"707\":1}}],[\"获取year\",{\"1\":{\"719\":1}}],[\"获取时间和日期信息\",{\"1\":{\"719\":1}}],[\"获取日期\",{\"1\":{\"707\":1}}],[\"获取\",{\"0\":{\"654\":1,\"2586\":1},\"1\":{\"836\":1,\"1680\":3,\"2168\":2,\"2268\":1,\"2306\":1}}],[\"获取总页数\",{\"1\":{\"628\":1}}],[\"获取总条数\",{\"1\":{\"628\":1}}],[\"获取配置的值\",{\"1\":{\"1939\":1}}],[\"获取配置\",{\"0\":{\"554\":1}}],[\"获取引入importselector实现类的配置类的元数据\",{\"1\":{\"525\":1}}],[\"获取验证码\",{\"1\":{\"474\":1}}],[\"获取缓存中的验证码\",{\"1\":{\"472\":1}}],[\"获取某个具体的字段的值\",{\"1\":{\"432\":1}}],[\"获取德鲁伊对象为例\",{\"1\":{\"202\":1}}],[\"毫秒时间戳\",{\"1\":{\"793\":1}}],[\"毫秒\",{\"1\":{\"717\":1,\"1729\":1}}],[\"月\",{\"1\":{\"717\":1}}],[\"月份\",{\"1\":{\"501\":2}}],[\"纪念日等日期\",{\"1\":{\"714\":1}}],[\"历史悠久的\",{\"1\":{\"709\":1}}],[\"历史订单\",{\"1\":{\"54\":1}}],[\"吸收了c的优点\",{\"1\":{\"1013\":1}}],[\"吸收了\",{\"1\":{\"709\":1}}],[\"偏移性\",{\"1\":{\"708\":1}}],[\"偏移值\",{\"1\":{\"703\":1}}],[\"结合properties类\",{\"1\":{\"2282\":1}}],[\"结果说明ok\",{\"1\":{\"3673\":1}}],[\"结果解析\",{\"0\":{\"3668\":1,\"3671\":1}}],[\"结果我们会认为有超过商品的实际数量的库存\",{\"1\":{\"3494\":1}}],[\"结果集合\",{\"1\":{\"3164\":1}}],[\"结果总数\",{\"1\":{\"3164\":1}}],[\"结果条数\",{\"1\":{\"3142\":1,\"3160\":1}}],[\"结果的符号与被膜数的符号形同\",{\"1\":{\"1140\":1}}],[\"结果一定是个int类型\",{\"1\":{\"1139\":1}}],[\"结果\",{\"1\":{\"1117\":2,\"3135\":1,\"3149\":1,\"3623\":1}}],[\"结果必须为int型\",{\"1\":{\"1113\":1}}],[\"结果是偶数\",{\"1\":{\"784\":1}}],[\"结尾\",{\"1\":{\"1088\":1,\"1095\":1,\"1625\":1}}],[\"结论\",{\"0\":{\"1051\":1,\"1554\":1,\"3079\":1},\"1\":{\"1125\":1,\"1898\":1,\"2086\":1,\"2206\":1,\"2903\":1}}],[\"结束tomcat的配置\",{\"1\":{\"2751\":1}}],[\"结束当前线程\",{\"1\":{\"1729\":1}}],[\"结束方法\",{\"1\":{\"1278\":1}}],[\"结束程序\",{\"1\":{\"1277\":1}}],[\"结束指定标识的一层循环结构当次循环\",{\"1\":{\"1198\":1}}],[\"结束指定标识的一层循环结构\",{\"1\":{\"1198\":1}}],[\"结束\",{\"1\":{\"1046\":1}}],[\"结束位置的index\",{\"1\":{\"701\":1}}],[\"结构等封装到类中\",{\"1\":{\"1253\":1}}],[\"结构有三种格式\",{\"1\":{\"1167\":1}}],[\"结构\",{\"0\":{\"688\":1,\"902\":1,\"921\":1,\"928\":1,\"942\":1,\"954\":1,\"994\":1,\"1003\":1},\"1\":{\"618\":1,\"777\":1,\"778\":1,\"786\":1,\"812\":1,\"820\":1,\"860\":1,\"867\":1,\"880\":1,\"885\":1,\"889\":1,\"1006\":1}}],[\"起始索引\",{\"1\":{\"3182\":1}}],[\"起始位置的index\",{\"1\":{\"701\":1}}],[\"起成对应的项目名称\",{\"1\":{\"2753\":1}}],[\"起步依赖\",{\"1\":{\"135\":1}}],[\"三高\",{\"1\":{\"3540\":1}}],[\"三台主机都配置好后\",{\"1\":{\"3324\":1}}],[\"三层架构的每一层都有特有的包名称\",{\"1\":{\"3008\":1}}],[\"三层架构是将我们的项目分成了三个层面\",{\"1\":{\"3006\":1}}],[\"三层架构\",{\"0\":{\"3005\":1},\"1\":{\"3005\":1,\"3011\":2,\"3012\":1}}],[\"三大组件\",{\"1\":{\"2955\":1}}],[\"三次对话\",{\"1\":{\"2206\":1}}],[\"三次握手\",{\"1\":{\"2204\":1,\"2697\":1}}],[\"三种角色\",{\"0\":{\"3645\":1}}],[\"三种线程安全方式的优先使用顺序\",{\"0\":{\"1786\":1}}],[\"三种创建字符串方式的选择\",{\"0\":{\"696\":1}}],[\"三元运算符与if\",{\"0\":{\"1163\":1}}],[\"三元运算符是可以嵌套使用的\",{\"1\":{\"1162\":1}}],[\"三元运算符的嵌套\",{\"0\":{\"1162\":1}}],[\"三元运算符的结果是要被变量接收的\",{\"1\":{\"1161\":1}}],[\"三元运算符\",{\"0\":{\"1158\":1}}],[\"三参\",{\"0\":{\"818\":1}}],[\"三个放在一起执行的时候\",{\"1\":{\"3611\":1}}],[\"三个方法是定义在java\",{\"1\":{\"1802\":1}}],[\"三个方法的调用者必须是同步代码块或同步方法中的同步监视器\",{\"1\":{\"1802\":1}}],[\"三个方法必须使用在同步代码块或同步方法中\",{\"1\":{\"1802\":1}}],[\"三个线程交替输出100\",{\"1\":{\"1740\":1}}],[\"三个位加起来作为一个位\",{\"1\":{\"1122\":1}}],[\"三个码的意义\",{\"1\":{\"1121\":1}}],[\"三个类的方法都是类似的\",{\"1\":{\"713\":1}}],[\"三个地方\",{\"1\":{\"575\":1}}],[\"存入到一个map集合中\",{\"0\":{\"2868\":1}}],[\"存取数据时\",{\"1\":{\"1916\":1}}],[\"存在一定的区别\",{\"1\":{\"3549\":1}}],[\"存在\",{\"1\":{\"3527\":1}}],[\"存在证书上的一个可信标识\",{\"1\":{\"3294\":1}}],[\"存在服务器端\",{\"1\":{\"3075\":1}}],[\"存在的问题\",{\"0\":{\"2662\":1}}],[\"存在sql注入问题\",{\"0\":{\"2559\":1}}],[\"存在拼串操作\",{\"0\":{\"2558\":1}}],[\"存在缓冲区中\",{\"1\":{\"2074\":1}}],[\"存在于内存中可读\",{\"1\":{\"1696\":1}}],[\"存在和消亡的过程\",{\"1\":{\"1684\":1}}],[\"存在方法区的静态域中\",{\"1\":{\"1477\":1}}],[\"存储结构\",{\"0\":{\"3544\":1}}],[\"存储所有接入的智能设备信息\",{\"1\":{\"3541\":1}}],[\"存储订单信息\",{\"1\":{\"3541\":1}}],[\"存储游戏用户信息\",{\"1\":{\"3541\":1}}],[\"存储用户信息\",{\"1\":{\"3541\":2}}],[\"存储商品库存的数量\",{\"1\":{\"3494\":1}}],[\"存储时间\",{\"1\":{\"3077\":1}}],[\"存储位置\",{\"1\":{\"3077\":1}}],[\"存储数据的概念进行一个类比\",{\"1\":{\"3102\":1}}],[\"存储数据\",{\"1\":{\"2903\":1,\"2926\":1,\"3054\":1,\"3550\":1}}],[\"存储过程\",{\"1\":{\"2556\":1}}],[\"存储在内存中\",{\"1\":{\"2439\":1}}],[\"存储具体元素的集\",{\"1\":{\"1928\":1}}],[\"存储元素的数组\",{\"1\":{\"1928\":1}}],[\"存储key\",{\"1\":{\"1910\":1}}],[\"存储的数据在底层数组中并非按照数组索引的顺序添加\",{\"1\":{\"1882\":1}}],[\"存储的是当前匹配的各捕获组的first和last信息\",{\"1\":{\"1004\":1}}],[\"存储无序的\",{\"1\":{\"1826\":1,\"1881\":1}}],[\"存储有序的\",{\"1\":{\"1826\":1,\"1859\":1}}],[\"存储于\",{\"1\":{\"1654\":1}}],[\"存储于类对应的\",{\"1\":{\"1654\":1}}],[\"存储已被虚拟机加载的类信息\",{\"1\":{\"1546\":1}}],[\"存储\",{\"1\":{\"690\":3,\"3393\":1,\"3459\":1}}],[\"存放filter类\",{\"1\":{\"2944\":1}}],[\"存放fragment\",{\"1\":{\"1539\":1}}],[\"存放到list里\",{\"1\":{\"2684\":1}}],[\"存放学生的成绩\",{\"1\":{\"1955\":1}}],[\"存放延迟加载类\",{\"1\":{\"567\":1}}],[\"存放通用配置\",{\"1\":{\"274\":1}}],[\"初始主节点\",{\"1\":{\"3268\":1,\"3269\":1,\"3270\":1,\"3271\":1}}],[\"初始启动大小\",{\"1\":{\"3267\":1,\"3312\":1,\"3345\":1,\"3503\":1}}],[\"初始值要写0\",{\"1\":{\"2487\":1}}],[\"初始值\",{\"1\":{\"1645\":1,\"2450\":1,\"2487\":1}}],[\"初始容量为16的字符串缓冲区\",{\"1\":{\"689\":1}}],[\"初始化前的连接\",{\"0\":{\"3738\":1}}],[\"初始化副本集\",{\"0\":{\"3660\":1,\"3663\":1}}],[\"初始化集群时\",{\"1\":{\"3337\":1}}],[\"初始化方法\",{\"1\":{\"2800\":1}}],[\"初始化发生在显示调用init方法\",{\"1\":{\"2674\":1}}],[\"初始化数据库连接池时连接的数量\",{\"1\":{\"2673\":1}}],[\"初始化数组时\",{\"1\":{\"1227\":1}}],[\"初始化数组\",{\"0\":{\"1217\":1}}],[\"初始化驱动\",{\"1\":{\"2545\":1}}],[\"初始化需要处理异常\",{\"1\":{\"2048\":1}}],[\"初始化时的操作\",{\"1\":{\"2945\":1}}],[\"初始化时建立物理连接的个数\",{\"1\":{\"2674\":1}}],[\"初始化时\",{\"1\":{\"1869\":1}}],[\"初始化资源\",{\"1\":{\"1592\":1}}],[\"初始化类的信息\",{\"1\":{\"1527\":1}}],[\"初始化语句\",{\"1\":{\"1317\":1}}],[\"初始化和赋值同时进行\",{\"1\":{\"1219\":1}}],[\"初始化并分配空间\",{\"1\":{\"1214\":1}}],[\"初始化变量出了while循环以后\",{\"1\":{\"1184\":1}}],[\"初始化条件\",{\"1\":{\"1179\":1,\"1180\":2,\"1183\":2}}],[\"初始化值\",{\"1\":{\"1071\":1,\"1270\":2}}],[\"初始化\",{\"0\":{\"584\":1,\"615\":1,\"1921\":1,\"2048\":1,\"2060\":1,\"2069\":1,\"2146\":1,\"2796\":1,\"2800\":1},\"1\":{\"1188\":1,\"1218\":1,\"1266\":1,\"1316\":1}}],[\"初始化异常\",{\"0\":{\"551\":1}}],[\"初始化上下文对象\",{\"1\":{\"520\":1}}],[\"剩下的表示小数点\",{\"1\":{\"1097\":1}}],[\"剩下的全部都放到最后一个元素中\",{\"1\":{\"682\":1,\"992\":1,\"1001\":1}}],[\"剩下的就是调用对应api操作了\",{\"1\":{\"379\":1}}],[\"错误跳转资源\",{\"1\":{\"2950\":1}}],[\"错误示例\",{\"1\":{\"2056\":1}}],[\"错误的包\",{\"1\":{\"3210\":1}}],[\"错误的\",{\"1\":{\"1965\":1}}],[\"错误的类型添加失败\",{\"1\":{\"1958\":1}}],[\"错误的字符集将解码错误\",{\"1\":{\"674\":1}}],[\"错误消息的提示\",{\"1\":{\"1562\":1}}],[\"错误\",{\"0\":{\"1560\":1},\"1\":{\"2950\":1}}],[\"错误分析\",{\"1\":{\"1292\":1}}],[\"错误堆栈\",{\"1\":{\"287\":1}}],[\"取最小值\",{\"1\":{\"3188\":1}}],[\"取最大值\",{\"1\":{\"3188\":1}}],[\"取消安全验证\",{\"0\":{\"3110\":1}}],[\"取消自动提交数据\",{\"1\":{\"2639\":1}}],[\"取消集合就可以了\",{\"1\":{\"2606\":1}}],[\"取决于字符编码方案\",{\"1\":{\"2111\":1}}],[\"取得指定对象obj上此field的属性内容\",{\"1\":{\"2309\":1}}],[\"取得本类的指定形参类\",{\"1\":{\"2286\":1}}],[\"取得本类的指定形参类型的构造器\",{\"1\":{\"850\":1,\"2286\":1}}],[\"取得线程安全的arraylist\",{\"1\":{\"1876\":1}}],[\"取完数据后\",{\"1\":{\"1847\":1}}],[\"取值为0\",{\"1\":{\"3687\":1}}],[\"取值负整数\",{\"1\":{\"2794\":1}}],[\"取值\",{\"0\":{\"1661\":1,\"1678\":1}}],[\"取号排队\",{\"1\":{\"1500\":1}}],[\"取反\",{\"1\":{\"1157\":1}}],[\"取模一般用来判断是否能除尽\",{\"1\":{\"1140\":1}}],[\"取模的细节\",{\"0\":{\"1140\":1}}],[\"取余数\",{\"1\":{\"1122\":1}}],[\"取代自己写的basedao\",{\"0\":{\"2683\":1}}],[\"取代自己写的jdbcutils\",{\"0\":{\"2682\":1}}],[\"取代\",{\"1\":{\"672\":1}}],[\"取出内存中的验证码与传递过来的验证码比对\",{\"1\":{\"471\":1}}],[\"源\",{\"1\":{\"2205\":1}}],[\"源文件路径等中有不存在的路径时的警告\",{\"1\":{\"1678\":1}}],[\"源文件还在\",{\"1\":{\"1040\":1}}],[\"源代码选择了行尾风格\",{\"1\":{\"1063\":1}}],[\"源集合没有变化\",{\"1\":{\"952\":1}}],[\"源集合改变了\",{\"1\":{\"946\":1}}],[\"源码中的一些重要常量\",{\"0\":{\"1928\":1}}],[\"源码简介\",{\"0\":{\"1877\":1}}],[\"源码\",{\"0\":{\"2581\":1},\"1\":{\"1427\":1,\"2700\":1}}],[\"源码分析\",{\"0\":{\"691\":1,\"1863\":1,\"1927\":1}}],[\"源码里不出现框架的痕迹\",{\"1\":{\"517\":1}}],[\"源字符串没有变化\",{\"1\":{\"665\":1}}],[\"左右\",{\"1\":{\"3508\":1}}],[\"左移\",{\"1\":{\"1157\":1}}],[\"左边补位\",{\"1\":{\"1157\":1}}],[\"左边无论真假\",{\"1\":{\"1153\":1}}],[\"左边的大\",{\"1\":{\"660\":1}}],[\"左键\",{\"1\":{\"118\":1}}],[\"^1\",{\"1\":{\"3613\":1}}],[\"^和$的行为中被识别\",{\"1\":{\"997\":1}}],[\"^\",{\"1\":{\"647\":2,\"1151\":1}}],[\"构成了一个entry对象\",{\"1\":{\"1918\":1}}],[\"构成的set集合\",{\"1\":{\"971\":1}}],[\"构造数据报包\",{\"1\":{\"2234\":1}}],[\"构造\",{\"1\":{\"2234\":1,\"2250\":1}}],[\"构造指定容量的字符串缓冲区\",{\"1\":{\"689\":1}}],[\"构造器引用\",{\"0\":{\"2417\":1,\"2422\":1,\"2425\":1,\"2428\":1,\"2433\":1}}],[\"构造器与mode参数\",{\"0\":{\"2133\":1}}],[\"构造器2\",{\"0\":{\"2096\":1,\"2104\":1}}],[\"构造器1\",{\"0\":{\"2095\":1,\"2103\":1}}],[\"构造器创建对象时\",{\"1\":{\"1877\":1}}],[\"构造器等\",{\"1\":{\"1454\":1}}],[\"构造器是调用本类的其他构造器\",{\"1\":{\"1387\":1}}],[\"构造器中只加个<>即可\",{\"1\":{\"1964\":1}}],[\"构造器中初始化\",{\"1\":{\"1323\":1,\"1352\":1}}],[\"构造器中定义的变量\",{\"1\":{\"1076\":1}}],[\"构造器虽然不是方法\",{\"1\":{\"1319\":1}}],[\"构造器重载\",{\"0\":{\"1319\":1}}],[\"构造器分类\",{\"0\":{\"1318\":1}}],[\"构造器的调用\",{\"0\":{\"1322\":1}}],[\"构造器的语法\",{\"0\":{\"1317\":1}}],[\"构造器的作用\",{\"0\":{\"1314\":1}}],[\"构造器可以带参数\",{\"1\":{\"1316\":1}}],[\"构造器形参\",{\"1\":{\"1271\":1,\"1273\":1}}],[\"构造器内的类\",{\"1\":{\"1451\":1}}],[\"构造器内部\",{\"1\":{\"1330\":1}}],[\"构造器内部的变量\",{\"1\":{\"1273\":1}}],[\"构造器内部自动new\",{\"1\":{\"822\":1,\"2048\":1,\"2060\":1,\"2069\":1}}],[\"构造器内\",{\"1\":{\"1271\":1}}],[\"构造器相关\",{\"0\":{\"847\":1}}],[\"构造器\",{\"0\":{\"995\":1,\"1313\":1,\"1716\":1,\"1865\":1,\"2191\":1},\"1\":{\"674\":1,\"777\":1,\"778\":1,\"786\":1,\"812\":1,\"1124\":1,\"1310\":1,\"1313\":1,\"1635\":1,\"1959\":1,\"2317\":1}}],[\"构造函数\",{\"0\":{\"1781\":1},\"1\":{\"1056\":1,\"2321\":1}}],[\"构造函数的参数可以是一个char\",{\"1\":{\"673\":1}}],[\"构造函数方式\",{\"1\":{\"649\":1}}],[\"构造方法声明\",{\"1\":{\"1653\":1}}],[\"构造方法\",{\"1\":{\"646\":1,\"876\":1,\"1315\":1,\"1661\":1}}],[\"构建响应并将其返回给客户端\",{\"1\":{\"3416\":1}}],[\"构建查询方式\",{\"1\":{\"3252\":1,\"3253\":1}}],[\"构建查询条件\",{\"1\":{\"3227\":1,\"3228\":1,\"3230\":1,\"3231\":1,\"3233\":1,\"3234\":1,\"3242\":1,\"3244\":1}}],[\"构建查询的请求体\",{\"1\":{\"3226\":1}}],[\"构建日志采集和分析体系\",{\"1\":{\"3094\":1}}],[\"构建一个scanner对象\",{\"1\":{\"886\":1,\"1007\":1}}],[\"构建项目\",{\"0\":{\"186\":1}}],[\"构建结果\",{\"0\":{\"98\":1}}],[\"请选择在配置文件中添加选项\",{\"1\":{\"3694\":1}}],[\"请选择compass方式连接mongodb\",{\"1\":{\"3567\":1}}],[\"请省略此参数\",{\"1\":{\"3604\":1}}],[\"请省略此参数或传递空文档\",{\"1\":{\"3604\":1}}],[\"请输入字符串\",{\"1\":{\"2118\":1}}],[\"请输入\",{\"1\":{\"888\":1,\"1009\":1}}],[\"请输入姓名\",{\"1\":{\"887\":2,\"1008\":2}}],[\"请稍后再试\",{\"1\":{\"645\":1}}],[\"请求会被转发到\",{\"1\":{\"3407\":1}}],[\"请求url\",{\"1\":{\"3393\":1}}],[\"请求对象添加\",{\"1\":{\"3244\":1}}],[\"请求对象添加查询条件\",{\"1\":{\"3231\":1,\"3234\":1,\"3236\":1,\"3237\":1,\"3239\":1,\"3240\":1,\"3242\":1,\"3248\":1,\"3249\":1,\"3252\":1,\"3253\":1}}],[\"请求对象\",{\"1\":{\"3211\":1}}],[\"请求条件一般通过json格式写在请求体中\",{\"1\":{\"3162\":1}}],[\"请求成功后\",{\"1\":{\"3118\":1}}],[\"请求地址和创建映射相同\",{\"1\":{\"3199\":1}}],[\"请求地址为\",{\"1\":{\"3118\":1,\"3123\":1}}],[\"请求地址\",{\"1\":{\"3117\":1,\"3122\":1,\"3126\":1,\"3129\":1,\"3130\":1,\"3133\":1,\"3139\":1,\"3142\":1,\"3144\":1,\"3145\":1,\"3147\":1,\"3152\":1,\"3157\":1,\"3160\":1,\"3162\":1,\"3188\":1,\"3197\":1,\"3282\":1,\"3283\":1}}],[\"请求数据\",{\"1\":{\"3083\":1}}],[\"请求与请求之间独立后\",{\"1\":{\"3036\":1}}],[\"请求与响应概述\",{\"0\":{\"2829\":1}}],[\"请求与响应\",{\"0\":{\"2828\":1},\"1\":{\"2801\":1}}],[\"请求阶段\",{\"1\":{\"2947\":1}}],[\"请求时会执行的逻辑\",{\"1\":{\"2947\":1}}],[\"请求被拦截后就不会去访问servlet了\",{\"1\":{\"2946\":1}}],[\"请求从资源a到资源b的过程就叫请求转发\",{\"1\":{\"2899\":1}}],[\"请求转发也是可以共享数据的\",{\"1\":{\"2921\":1}}],[\"请求转发的特点\",{\"0\":{\"2904\":1}}],[\"请求转发的实现方式\",{\"0\":{\"2900\":1}}],[\"请求转发\",{\"0\":{\"2898\":1}}],[\"请求参数的键都是字符串\",{\"1\":{\"2868\":1}}],[\"请求参数的处理方式\",{\"1\":{\"2860\":1}}],[\"请求参数\",{\"0\":{\"2860\":1}}],[\"请求体中将analyzer改为ik分词器\",{\"1\":{\"3480\":1}}],[\"请求体中的数据格式如下\",{\"1\":{\"2852\":1}}],[\"请求体如下\",{\"1\":{\"3393\":1}}],[\"请求体拼接\",{\"1\":{\"3230\":1,\"3231\":1}}],[\"请求体内的查询条件可以设置为\",{\"1\":{\"3228\":1}}],[\"请求体内容为\",{\"1\":{\"3153\":1}}],[\"请求体语法\",{\"1\":{\"3197\":1}}],[\"请求体\",{\"0\":{\"2852\":1,\"3190\":1},\"1\":{\"3133\":1,\"3143\":1,\"3198\":1,\"3473\":1,\"3476\":1}}],[\"请求体是手机号和验证码\",{\"1\":{\"469\":1}}],[\"请求结果如下\",{\"1\":{\"2850\":1}}],[\"请求资源路径\",{\"1\":{\"2844\":1}}],[\"请求行包含三块内容\",{\"1\":{\"2844\":1}}],[\"请求行\",{\"0\":{\"2844\":1}}],[\"请求行+请求头+请求体\",{\"1\":{\"2832\":1}}],[\"请求方式的处理逻辑\",{\"1\":{\"2812\":2}}],[\"请求方式一共有7种\",{\"1\":{\"2811\":1}}],[\"请求方式\",{\"0\":{\"2811\":1},\"1\":{\"3117\":1,\"3122\":1,\"3126\":1,\"3129\":1,\"3133\":1,\"3139\":1,\"3142\":1,\"3144\":1,\"3145\":1,\"3147\":1,\"3152\":1,\"3157\":1,\"3160\":1,\"3162\":1,\"3188\":1,\"3197\":1,\"3278\":1,\"3282\":1,\"3283\":1,\"3393\":1}}],[\"请求处理\",{\"0\":{\"2797\":1,\"3376\":1}}],[\"请求和释放资源的顺序不当\",{\"1\":{\"1793\":1}}],[\"请求验证码\",{\"1\":{\"469\":1}}],[\"请求\",{\"1\":{\"342\":1,\"2953\":2,\"3134\":1,\"3140\":1,\"3148\":1,\"3158\":1,\"3183\":1,\"3186\":1,\"3189\":1,\"3454\":1,\"3473\":1,\"3476\":1,\"3485\":1,\"3489\":1}}],[\"请求无法及时响应处理等\",{\"1\":{\"313\":1}}],[\"请求等\",{\"1\":{\"313\":1}}],[\"拦截方式\",{\"1\":{\"2950\":1}}],[\"拦截方式的配置\",{\"0\":{\"2950\":1}}],[\"拦截某个目录下所有资源的请求\",{\"1\":{\"2949\":1}}],[\"拦截目录\",{\"1\":{\"2949\":1}}],[\"拦截所有资源\",{\"1\":{\"2949\":1}}],[\"拦截所有\",{\"1\":{\"2949\":1}}],[\"拦截所有的异常信息\",{\"1\":{\"645\":1}}],[\"拦截具体的资源\",{\"1\":{\"2949\":1}}],[\"拦截路径有如下四种配置方式\",{\"1\":{\"2949\":1}}],[\"拦截器\",{\"0\":{\"626\":1},\"1\":{\"589\":1}}],[\"异步访问资源\",{\"1\":{\"2950\":1}}],[\"异步\",{\"1\":{\"2950\":1}}],[\"异步调用\",{\"1\":{\"487\":1}}],[\"异常列表\",{\"1\":{\"2296\":1}}],[\"异常说明\",{\"1\":{\"2285\":1}}],[\"异常类不能是泛型\",{\"1\":{\"1969\":1}}],[\"异常类型\",{\"1\":{\"1598\":1}}],[\"异常类型的选择\",{\"0\":{\"1586\":1}}],[\"异常类型3\",{\"1\":{\"1585\":1}}],[\"异常类型2\",{\"1\":{\"1585\":1}}],[\"异常类型1\",{\"1\":{\"1585\":1}}],[\"异常是抛给调用者看的\",{\"1\":{\"1607\":1}}],[\"异常又被抛出去了\",{\"1\":{\"1600\":1}}],[\"异常代码后续的代码\",{\"1\":{\"1598\":1}}],[\"异常信息\",{\"1\":{\"1589\":1,\"1608\":2}}],[\"异常体系结构\",{\"0\":{\"1570\":1}}],[\"异常对象的产生\",{\"0\":{\"1567\":1}}],[\"异常并没有被解决\",{\"1\":{\"1563\":1}}],[\"异常分类\",{\"0\":{\"1559\":1,\"1571\":1}}],[\"异常概述\",{\"0\":{\"1557\":1}}],[\"异常的抛出机制\",{\"0\":{\"1599\":1}}],[\"异常的嵌套\",{\"0\":{\"1593\":1}}],[\"异常的处理只是为了保证代码的正常运行\",{\"1\":{\"1563\":1}}],[\"异常的类型和异常的描述\",{\"1\":{\"1060\":1}}],[\"异常的统一处理\",{\"0\":{\"645\":1}}],[\"异常\",{\"0\":{\"1374\":1,\"1561\":1},\"1\":{\"821\":1,\"822\":1,\"824\":1,\"836\":1,\"1060\":1,\"1558\":1,\"1571\":1,\"1592\":2,\"2070\":1}}],[\"异常专用构造方法\",{\"1\":{\"646\":1}}],[\"异常处理线程\",{\"1\":{\"1689\":1}}],[\"异常处理总结\",{\"0\":{\"1568\":1}}],[\"异常处理的抓抛模型\",{\"0\":{\"1566\":1}}],[\"异常处理的意义\",{\"0\":{\"1563\":1}}],[\"异常处理机制\",{\"0\":{\"1564\":1}}],[\"异常处理只是为了跟用户友好的交互\",{\"1\":{\"1563\":1}}],[\"异常处理\",{\"0\":{\"1562\":1,\"2063\":1,\"3530\":1,\"3774\":1},\"1\":{\"646\":1,\"2092\":1,\"2126\":1,\"2127\":1,\"2151\":1,\"2152\":1,\"2156\":1,\"2157\":1,\"2238\":1}}],[\"响应其他副本集成员的心跳和选举请求来维护副本集中的仲裁\",{\"1\":{\"3646\":1}}],[\"响应太慢\",{\"1\":{\"3365\":1}}],[\"响应结果如下\",{\"1\":{\"3150\":1}}],[\"响应结果和完全覆盖一样\",{\"1\":{\"3146\":1}}],[\"响应结果里的result\",{\"1\":{\"3144\":1}}],[\"响应结果\",{\"1\":{\"3119\":1}}],[\"响应结果分析\",{\"0\":{\"3119\":1,\"3135\":1,\"3141\":1,\"3149\":1,\"3154\":1,\"3159\":1}}],[\"响应数据\",{\"1\":{\"3006\":1,\"3083\":1}}],[\"响应数据设计\",{\"0\":{\"644\":1}}],[\"响应重定向后的访问路径\",{\"1\":{\"2907\":1}}],[\"响应字节数据\",{\"0\":{\"2892\":1}}],[\"响应字符数据\",{\"0\":{\"2886\":1}}],[\"响应体\",{\"0\":{\"3191\":1},\"1\":{\"2882\":1}}],[\"响应头和消息头都会携带多个cookie键值对\",{\"1\":{\"3052\":1}}],[\"响应头里就有了set\",{\"1\":{\"3049\":1}}],[\"响应头\",{\"0\":{\"2884\":1},\"1\":{\"2882\":1}}],[\"响应行\",{\"0\":{\"2883\":1},\"1\":{\"2882\":1}}],[\"响应行+响应头+响应体\",{\"1\":{\"2833\":1}}],[\"响应\",{\"1\":{\"2217\":1,\"2953\":2,\"3068\":1,\"3198\":1}}],[\"响应的结果中有result\",{\"1\":{\"3151\":1}}],[\"响应的字符数据\",{\"1\":{\"2889\":1}}],[\"响应的具体数据\",{\"1\":{\"646\":1}}],[\"响应的数据\",{\"1\":{\"644\":1}}],[\"响应信息如下\",{\"1\":{\"3159\":1}}],[\"响应信息解析\",{\"0\":{\"3124\":1}}],[\"响应信息\",{\"1\":{\"644\":1,\"646\":1}}],[\"响应状态码\",{\"1\":{\"644\":1}}],[\"响应交换\",{\"1\":{\"342\":1}}],[\"标签省略了前缀\",{\"1\":{\"3030\":1}}],[\"标签必须正确关闭\",{\"1\":{\"3018\":1}}],[\"标签都是自定义的\",{\"1\":{\"3015\":1}}],[\"标示的方法\",{\"1\":{\"1673\":1}}],[\"标注\",{\"1\":{\"1673\":1}}],[\"标注serverconfig类使用\",{\"1\":{\"207\":1}}],[\"标识某注解可以在同一个声明上使用多次\",{\"1\":{\"1638\":1}}],[\"标识这个注解怎么保存\",{\"1\":{\"1638\":1,\"1657\":1}}],[\"标识一个匿名函数或函数式接口\",{\"1\":{\"1638\":1}}],[\"标识i是否被j除尽\",{\"1\":{\"1204\":1}}],[\"标识符保存string对象的地址\",{\"1\":{\"1131\":1}}],[\"标识符保存常量池的内存地址\",{\"1\":{\"1131\":1}}],[\"标识符不能包含空格\",{\"1\":{\"1082\":1}}],[\"标识符\",{\"0\":{\"1081\":1,\"1703\":1,\"1979\":1},\"1\":{\"1395\":1,\"1440\":1}}],[\"标记这个注解是继承于哪个注解类\",{\"1\":{\"1638\":1,\"1656\":1}}],[\"标记这个注解应该是哪种\",{\"1\":{\"1638\":1,\"1656\":1}}],[\"标记这些注解是否包含在用户文档中\",{\"1\":{\"1638\":1,\"1656\":1}}],[\"标记所修饰的类\",{\"1\":{\"1637\":1,\"1638\":1}}],[\"标记文件创建时项目当时对应的版本\",{\"1\":{\"1059\":1}}],[\"标记某个代码关键字\",{\"1\":{\"1058\":1}}],[\"标记方法名\",{\"1\":{\"1058\":1}}],[\"标记类名\",{\"1\":{\"1058\":1}}],[\"标准分析器是\",{\"1\":{\"3466\":1}}],[\"标准分析器\",{\"0\":{\"3466\":1}}],[\"标准化\",{\"0\":{\"3436\":1}}],[\"标准输入流\",{\"0\":{\"2118\":1}}],[\"标准输出\",{\"1\":{\"624\":1}}],[\"标准流\",{\"0\":{\"2115\":1}}],[\"标准出现了\",{\"1\":{\"2111\":1}}],[\"标准的javase类加载器可以按要求查找类\",{\"1\":{\"2278\":1}}],[\"标准的java类\",{\"1\":{\"1543\":1}}],[\"标准的输出流\",{\"1\":{\"2115\":1}}],[\"标准的输入流\",{\"1\":{\"2115\":1}}],[\"标准的方法输入或输出数据\",{\"1\":{\"2021\":1}}],[\"标准\",{\"1\":{\"1506\":1}}],[\"标准格式\",{\"0\":{\"731\":1}}],[\"架构\",{\"0\":{\"3651\":1},\"1\":{\"614\":1,\"3114\":1}}],[\"架构师\",{\"1\":{\"33\":1}}],[\"ω\",{\"0\":{\"612\":1}}],[\"ⅵ\",{\"0\":{\"610\":1,\"675\":1,\"876\":1,\"1118\":1,\"1158\":1,\"1191\":1,\"1672\":1,\"2473\":1,\"2515\":1,\"2874\":1}}],[\"公\",{\"1\":{\"3693\":1}}],[\"公式\",{\"1\":{\"3527\":1}}],[\"公共网关接口\",{\"1\":{\"2240\":1}}],[\"公共类\",{\"1\":{\"589\":1}}],[\"公认端口\",{\"1\":{\"2186\":1}}],[\"公网地址\",{\"1\":{\"2182\":1}}],[\"公网地址和私有地址\",{\"0\":{\"2182\":1}}],[\"公司测试部门使用\",{\"1\":{\"269\":1}}],[\"├──\",{\"1\":{\"589\":13}}],[\"完整的网址\",{\"1\":{\"2845\":1}}],[\"完整的请求处理过程\",{\"0\":{\"2831\":1}}],[\"完整的文件名是带路径的\",{\"1\":{\"807\":1}}],[\"完善\",{\"1\":{\"2320\":1}}],[\"完善目录\",{\"1\":{\"586\":1}}],[\"完全可替代mongodb\",{\"1\":{\"3568\":1}}],[\"完全匹配就是禁止全文检索\",{\"1\":{\"3178\":1}}],[\"完全匹配查询\",{\"0\":{\"3178\":1}}],[\"完全匹配\",{\"0\":{\"3174\":1},\"1\":{\"3174\":1}}],[\"完全覆盖\",{\"0\":{\"3144\":1},\"1\":{\"3143\":1}}],[\"完全支持\",{\"1\":{\"3114\":1}}],[\"完全解决了线程的安全问题\",{\"1\":{\"1776\":1}}],[\"完全限定方法名\",{\"1\":{\"1058\":1}}],[\"完全限定的类名\",{\"1\":{\"1058\":1}}],[\"完成副本集\",{\"1\":{\"3672\":1}}],[\"完成上述10个步骤\",{\"1\":{\"3298\":1}}],[\"完成服务器对客户端的身份识别\",{\"1\":{\"3058\":1}}],[\"完成具体的业务操作\",{\"1\":{\"3002\":1}}],[\"完成流的copy\",{\"1\":{\"2894\":1}}],[\"完成一些如加载配置文件\",{\"1\":{\"2796\":1}}],[\"完成创建\",{\"1\":{\"2737\":1,\"2741\":1}}],[\"完成复制\",{\"1\":{\"2136\":1}}],[\"完成相关的操作\",{\"1\":{\"1494\":1}}],[\"完成正则匹配\",{\"1\":{\"987\":1}}],[\"完成需求规格说明书\",{\"1\":{\"20\":1}}],[\"略微复杂的倒排列表\",{\"0\":{\"3433\":1}}],[\"略了\",{\"1\":{\"2976\":1}}],[\"略\",{\"1\":{\"567\":1,\"822\":1,\"823\":1,\"2085\":1,\"2295\":2,\"2827\":1,\"3020\":1}}],[\"既然不变了\",{\"1\":{\"3442\":1}}],[\"既然运行时类已经加载到了内存中\",{\"1\":{\"2287\":1}}],[\"既然选择主动监控\",{\"1\":{\"315\":1}}],[\"既可以使用get方法访问\",{\"1\":{\"2861\":1}}],[\"既可以作为一个输入流\",{\"1\":{\"2128\":1}}],[\"既可以调用非静态的方法或属性\",{\"1\":{\"1483\":1}}],[\"既可以比较基本类型也可以比较引用类型\",{\"1\":{\"1429\":1}}],[\"既可以取常量名\",{\"1\":{\"784\":1}}],[\"既springboot自动配置是如何具体操作的\",{\"1\":{\"562\":1}}],[\"慢慢总结\",{\"1\":{\"557\":1}}],[\"封装对象\",{\"1\":{\"3002\":1}}],[\"封装为request对象\",{\"1\":{\"2838\":1}}],[\"封装通用的增删改操作\",{\"0\":{\"2578\":1}}],[\"封装逻辑\",{\"1\":{\"1533\":1}}],[\"封装数据库连接的获取和资源的关闭\",{\"0\":{\"2574\":1}}],[\"封装数据\",{\"1\":{\"1533\":1,\"3006\":1}}],[\"封装类\",{\"1\":{\"1437\":1}}],[\"封装和继承是独立的\",{\"1\":{\"1366\":1}}],[\"封装性的总结\",{\"0\":{\"1307\":1}}],[\"封装性的意义\",{\"0\":{\"1302\":1}}],[\"封装思想的体现\",{\"0\":{\"1306\":1}}],[\"封装\",{\"0\":{\"1298\":1,\"2600\":1},\"1\":{\"1251\":1}}],[\"封装一个读取配置文件的专属类\",{\"1\":{\"552\":1}}],[\"封装用于读取配置文件的类\",{\"0\":{\"552\":1}}],[\"值不能重复的\",{\"1\":{\"3623\":1}}],[\"值不一定相同\",{\"1\":{\"1898\":1}}],[\"值是字符串\",{\"1\":{\"3025\":3}}],[\"值是直接储存在字符串常量词的\",{\"1\":{\"1131\":1}}],[\"值小的先执行\",{\"1\":{\"2954\":1}}],[\"值也是字符串\",{\"1\":{\"2868\":1}}],[\"值也相等\",{\"1\":{\"1912\":1}}],[\"值可自定义\",{\"1\":{\"2158\":1}}],[\"值可以重复\",{\"1\":{\"957\":1}}],[\"值相同\",{\"1\":{\"1898\":1}}],[\"值相等也意味着值的数据类型必须相等\",{\"1\":{\"896\":1}}],[\"值来决定元素的存储位置\",{\"1\":{\"1886\":1,\"1902\":1}}],[\"值来表示字符型常量\",{\"1\":{\"1102\":1}}],[\"值的集合或者列表可以表示成数组\",{\"1\":{\"3548\":1}}],[\"值的一部分\",{\"0\":{\"3180\":1}}],[\"值的标识符\",{\"1\":{\"1702\":1}}],[\"值的末尾要l\",{\"1\":{\"1116\":1}}],[\"值传递\",{\"1\":{\"1291\":1}}],[\"值必须加双引号\",{\"1\":{\"1125\":1}}],[\"值\",{\"1\":{\"1070\":1,\"1532\":1,\"1897\":1}}],[\"值为boolean\",{\"1\":{\"3673\":1}}],[\"值为其他节点的通信地址\",{\"1\":{\"3355\":1}}],[\"值为对象格式的映射信息\",{\"1\":{\"3197\":1}}],[\"值为myannotations\",{\"1\":{\"1668\":1}}],[\"值为1\",{\"1\":{\"3671\":2,\"3673\":1}}],[\"值为10\",{\"1\":{\"1381\":1}}],[\"值为1的集合元素被删除\",{\"1\":{\"926\":1}}],[\"值为null\",{\"1\":{\"1238\":1}}],[\"值为数据\",{\"1\":{\"1230\":1}}],[\"值为内层数组的内存地址\",{\"1\":{\"1230\":1}}],[\"值为额外include的环境\",{\"1\":{\"280\":1}}],[\"值一样\",{\"1\":{\"895\":1}}],[\"值游下面的注解提供\",{\"1\":{\"550\":1}}],[\"真好\",{\"1\":{\"1630\":1}}],[\"真正使用的request对象的类是\",{\"1\":{\"2837\":1}}],[\"真正部署项目时\",{\"1\":{\"2721\":1}}],[\"真正的将异常给处理掉了\",{\"1\":{\"1601\":1}}],[\"真正的值是储存在常量池中的\",{\"1\":{\"1133\":1}}],[\"真正解决异常\",{\"1\":{\"1563\":1}}],[\"真正实现了\",{\"1\":{\"1103\":1}}],[\"真实案例\",{\"0\":{\"543\":1}}],[\"真的源代码的性能监控\",{\"1\":{\"310\":1}}],[\"四川麻辣烫\",{\"1\":{\"2344\":1}}],[\"四种java文件\",{\"0\":{\"1543\":1}}],[\"四种权限从大到小为\",{\"1\":{\"1309\":1}}],[\"四种访问权限修饰符\",{\"0\":{\"1309\":1}}],[\"四种整形的对比\",{\"0\":{\"1087\":1}}],[\"四种整形仅仅是储存空间大小和表示的数据范围有区别\",{\"1\":{\"1086\":1}}],[\"四种编程式注册bean的方式\",{\"0\":{\"535\":1}}],[\"四舍五入\",{\"0\":{\"764\":1,\"766\":1},\"1\":{\"784\":1}}],[\"四个字符\",{\"1\":{\"501\":5}}],[\"应的表中\",{\"1\":{\"3712\":1}}],[\"应全部小写\",{\"1\":{\"3575\":1}}],[\"应尽量避免使用suspend\",{\"1\":{\"1775\":1}}],[\"应该与servlet的包在同一目录级创建filter包\",{\"1\":{\"2944\":1}}],[\"应该与调用\",{\"1\":{\"825\":1}}],[\"应该首先配置deployment\",{\"1\":{\"2766\":1}}],[\"应该使用\",{\"1\":{\"2120\":1}}],[\"应该声明为private\",{\"1\":{\"1620\":1}}],[\"应该写成x>3\",{\"1\":{\"1152\":1}}],[\"应该用double类型接收\",{\"1\":{\"1115\":1}}],[\"应该用int类型接收\",{\"1\":{\"1115\":1}}],[\"应该是用到哪个就加载哪个\",{\"1\":{\"533\":1}}],[\"应用需要大量的地理位置查询\",{\"1\":{\"3542\":1}}],[\"应用需要tb甚至\",{\"1\":{\"3542\":1}}],[\"应用发展迅速\",{\"1\":{\"3542\":1}}],[\"应用不需要事务及复杂\",{\"1\":{\"3542\":1}}],[\"应用中相互冲突的变更不会导致数据丢失\",{\"1\":{\"3497\":1}}],[\"应用界面相关\",{\"1\":{\"1539\":1}}],[\"应用程序接下来将决定该如何\",{\"1\":{\"3495\":1}}],[\"应用程序在计算机中的唯一标识\",{\"1\":{\"2697\":1}}],[\"应用程序的日志应用\",{\"1\":{\"1491\":1}}],[\"应用程序支持时不可用\",{\"1\":{\"342\":1}}],[\"应用范围\",{\"0\":{\"903\":1}}],[\"应用与缓存交互\",{\"1\":{\"462\":1}}],[\"应用\",{\"0\":{\"275\":1,\"3013\":1},\"1\":{\"462\":1,\"567\":1}}],[\"应用场景对比\",{\"0\":{\"3551\":1}}],[\"应用场景\",{\"0\":{\"266\":1,\"2361\":1,\"2497\":1,\"2609\":1,\"3112\":1,\"3539\":1},\"1\":{\"1267\":1}}],[\"应用环境\",{\"1\":{\"21\":1}}],[\"合理使用合并\",{\"0\":{\"3515\":1}}],[\"合理的加载bean的方式\",{\"1\":{\"533\":1}}],[\"合并两个路径\",{\"1\":{\"2166\":1}}],[\"合并成一行\",{\"1\":{\"1232\":1}}],[\"合并计入error\",{\"1\":{\"292\":1}}],[\"合法标识符规则\",{\"0\":{\"1082\":1}}],[\"显式声明\",{\"1\":{\"2158\":1}}],[\"显式关闭文件\",{\"1\":{\"2037\":1}}],[\"显式的调用父类中声明的属性或方法\",{\"1\":{\"1380\":1}}],[\"显式初始化\",{\"1\":{\"1323\":1,\"1352\":2}}],[\"显式定义一个或多个构造器\",{\"1\":{\"1318\":1}}],[\"显然会让计算机的基础电路设计变得十分复杂\",{\"1\":{\"1121\":1}}],[\"显然是不合理的\",{\"1\":{\"532\":1}}],[\"显示当前数据库\",{\"1\":{\"3682\":1}}],[\"显示当前应用程序的指标度量信息\",{\"1\":{\"342\":1}}],[\"显示列表的适配器\",{\"1\":{\"1539\":1}}],[\"显示打印的字符\",{\"1\":{\"887\":1,\"1008\":1}}],[\"显示复杂的信息\",{\"1\":{\"347\":1}}],[\"显示效果\",{\"0\":{\"346\":1}}],[\"显示和修改应用程序中日志记录器的配置\",{\"1\":{\"342\":1}}],[\"显示\",{\"1\":{\"342\":2}}],[\"显示应用程序中的调度任务\",{\"1\":{\"342\":1}}],[\"显示应用程序中所有\",{\"1\":{\"342\":1}}],[\"显示应用程序信息\",{\"1\":{\"342\":1}}],[\"显示应用程序健康信息\",{\"1\":{\"342\":1}}],[\"显示已应用的\",{\"1\":{\"342\":2}}],[\"显示所有\",{\"1\":{\"342\":2}}],[\"显示所有种类的监控信息\",{\"1\":{\"326\":1}}],[\"显示在配置和自动配置类上评估的条件以及它们匹配或不匹配的原因\",{\"1\":{\"342\":1}}],[\"显示缓存的详细信息\",{\"1\":{\"338\":1}}],[\"显示的http\",{\"1\":{\"337\":1}}],[\"显示内存占用信息\",{\"1\":{\"329\":1}}],[\"显示监控信息的服务器\",{\"1\":{\"314\":1}}],[\"饱和式加载\",{\"1\":{\"532\":1}}],[\"虽然在某\",{\"1\":{\"3641\":1}}],[\"虽然es储存的只是提供于搜索的数据\",{\"1\":{\"3493\":1}}],[\"虽然started成功\",{\"1\":{\"3110\":1}}],[\"虽然后台从\",{\"1\":{\"2904\":1}}],[\"虽然已经能完成要求\",{\"1\":{\"2805\":1}}],[\"虽然不能实例化\",{\"1\":{\"1494\":1}}],[\"虽然创建子类对象时\",{\"1\":{\"1392\":1}}],[\"虽然调用了父类的构造器\",{\"1\":{\"1384\":1}}],[\"虽然是数组\",{\"1\":{\"1237\":1}}],[\"虽然开发时自定义的bean不是很多\",{\"1\":{\"532\":1}}],[\"虽然一般人立马想到了加载所有bean\",{\"1\":{\"532\":1}}],[\"虽然最终还是会加载一个bean\",{\"1\":{\"529\":1}}],[\"虽然简化了操作\",{\"1\":{\"414\":1}}],[\"能极大的提高lucene检索的命中率\",{\"1\":{\"3477\":1}}],[\"能搜索的数据必须索引\",{\"1\":{\"3360\":1}}],[\"能约束更复杂的内容\",{\"1\":{\"3028\":1}}],[\"能简单看懂约束文档即可\",{\"1\":{\"3023\":1}}],[\"能从网络上读取数据\",{\"1\":{\"2240\":1}}],[\"能用集合就用集合\",{\"1\":{\"1824\":1}}],[\"能用于修饰哪些程序元素\",{\"1\":{\"1660\":1}}],[\"能指定参数\",{\"1\":{\"1676\":1}}],[\"能够正常查看到该索引\",{\"1\":{\"3283\":1}}],[\"能够做全文索引和搜寻\",{\"1\":{\"3092\":1}}],[\"能够在xml中引入约束文档\",{\"1\":{\"3023\":1}}],[\"能够对jar文件进行数字签名\",{\"1\":{\"2986\":1}}],[\"能够对程序的状态作统一的管理\",{\"1\":{\"1590\":1}}],[\"能够识别签名的工具就可以有选择地为您授予软件安全特权\",{\"1\":{\"2983\":1}}],[\"能够大大减少编码量\",{\"1\":{\"2683\":1}}],[\"能够解析\",{\"1\":{\"2038\":1}}],[\"能够基于springboot实现基础ssm框架整合\",{\"1\":{\"93\":1}}],[\"能不能\",{\"1\":{\"1506\":1}}],[\"能继承\",{\"1\":{\"1366\":1}}],[\"能新建\",{\"1\":{\"786\":1,\"2009\":1}}],[\"能存储的最大整型值为2\",{\"1\":{\"777\":1}}],[\"能自动转为string类型的数据类型都可以作为参数\",{\"1\":{\"700\":1}}],[\"能判定意味着可以控制程序的运行走向\",{\"1\":{\"525\":1}}],[\"判定当前是否加载了mysql的驱动类\",{\"1\":{\"543\":1}}],[\"判定元数据\",{\"0\":{\"525\":1}}],[\"判断该节点已经挂掉了\",{\"1\":{\"3533\":1}}],[\"判断下一行有没有数据\",{\"1\":{\"2590\":1}}],[\"判断optional容器中是否有对象\",{\"0\":{\"2503\":1},\"1\":{\"2504\":1}}],[\"判断时\",{\"1\":{\"1882\":1}}],[\"判断main进程是否还在激活状态\",{\"1\":{\"1729\":1}}],[\"判断两个\",{\"1\":{\"1912\":2}}],[\"判断两个对象的属性是否相同\",{\"1\":{\"1428\":1}}],[\"判断两个对象是否想等\",{\"1\":{\"1424\":1}}],[\"判断两个集合是否想等\",{\"1\":{\"915\":1,\"968\":1}}],[\"判断的是左边\",{\"1\":{\"1398\":1}}],[\"判断number的正负情况\",{\"1\":{\"1186\":1}}],[\"判断参数字符串是否匹配到了pattern实例指定的正则表达式\",{\"1\":{\"1000\":1}}],[\"判断参数字符串是否匹配到了给定的正则表达式\",{\"1\":{\"991\":1}}],[\"判断当前线程是否存活\",{\"1\":{\"1727\":1,\"1729\":1}}],[\"判断当前map是否为空\",{\"1\":{\"967\":1}}],[\"判断当前环境中是否有名为mouse的bean\",{\"1\":{\"536\":1}}],[\"判断形参c中的所有元素是否都存在于当前集合中\",{\"1\":{\"911\":1}}],[\"判断集合是否为空\",{\"1\":{\"909\":1}}],[\"判断是否是隐藏文件\",{\"1\":{\"2168\":1}}],[\"判断是否是文件\",{\"1\":{\"2168\":1}}],[\"判断是否是目录\",{\"1\":{\"2168\":1}}],[\"判断是否是绝对路径\",{\"1\":{\"2166\":1}}],[\"判断是否是空字符串\",{\"1\":{\"659\":1}}],[\"判断是否以\",{\"1\":{\"2166\":2}}],[\"判断是否还有输入的数据\",{\"1\":{\"885\":1,\"1006\":1}}],[\"判断文件是否不存在\",{\"1\":{\"2168\":1}}],[\"判断文件是否可写\",{\"1\":{\"2168\":1}}],[\"判断文件是否可读\",{\"1\":{\"2168\":1}}],[\"判断文件是否存在\",{\"1\":{\"2168\":1}}],[\"判断文件是否有\",{\"1\":{\"800\":1}}],[\"判断文件\",{\"1\":{\"799\":1}}],[\"判断file是否为文件\",{\"1\":{\"798\":1}}],[\"判断file是否为目录\",{\"1\":{\"797\":1}}],[\"判断这两个对象\",{\"1\":{\"749\":1}}],[\"判断数据类型是否相同\",{\"1\":{\"749\":1}}],[\"判断元数据\",{\"1\":{\"525\":1}}],[\"判断\",{\"0\":{\"430\":1,\"796\":1},\"1\":{\"1429\":1,\"1680\":1,\"1881\":1,\"2814\":1}}],[\"判断index是否存在\",{\"0\":{\"424\":1}}],[\"给t对象指定的columnname属性\",{\"1\":{\"2603\":1,\"2653\":2}}],[\"给t对象指定的属性赋值\",{\"1\":{\"2603\":1,\"2653\":1}}],[\"给cust对象指定的columnname属性\",{\"1\":{\"2600\":1}}],[\"给controller用的\",{\"1\":{\"508\":1}}],[\"给常量形参赋一个实参\",{\"1\":{\"1354\":1}}],[\"给对象进行初始化\",{\"0\":{\"1316\":1}}],[\"给数组赋值时\",{\"1\":{\"1227\":1}}],[\"给出今天是星期几\",{\"1\":{\"1176\":1}}],[\"给两个string类型的变量\",{\"1\":{\"1125\":1}}],[\"给一个字符串赋值\",{\"1\":{\"1125\":1}}],[\"给变量赋值时\",{\"1\":{\"1088\":1}}],[\"给方法形参赋值的实参\",{\"1\":{\"874\":1,\"2314\":1}}],[\"给定参数的最大整数\",{\"1\":{\"763\":1}}],[\"给repository\",{\"1\":{\"508\":1}}],[\"给service用的\",{\"1\":{\"508\":1}}],[\"哪吒\",{\"1\":{\"2573\":1}}],[\"哪怕对象已经创建好了\",{\"1\":{\"1770\":1}}],[\"哪个对象调用或者哪个对象正在创建\",{\"1\":{\"1332\":1}}],[\"哪个判断和执行语句声明在上面还是下面\",{\"1\":{\"1172\":1}}],[\"哪一个类要受到spring管控\",{\"1\":{\"507\":1}}],[\"哪些端点信息被允许通过http请求获取\",{\"1\":{\"343\":1}}],[\"邮件\",{\"0\":{\"503\":1}}],[\"防止超管泄漏\",{\"1\":{\"3708\":1}}],[\"防止请求被篡改的\",{\"1\":{\"3292\":1,\"3326\":1}}],[\"防止发生闪退故障\",{\"1\":{\"3267\":1}}],[\"防止空值异常\",{\"1\":{\"2508\":1}}],[\"防止最后一次buf出现不满载情况\",{\"1\":{\"2084\":1}}],[\"防止这种冲突的方法就是当资源被一个任务使用时\",{\"1\":{\"1772\":1}}],[\"防止被继承后子类报错\",{\"1\":{\"1388\":1}}],[\"防止将null数据作为条件使用\",{\"1\":{\"633\":1}}],[\"防止出错\",{\"1\":{\"632\":1}}],[\"防止写错字段\",{\"1\":{\"632\":1}}],[\"防止dayofmonth和dayofweek会相互影响\",{\"1\":{\"501\":1}}],[\"防止文件太大\",{\"1\":{\"303\":1}}],[\"年龄\",{\"1\":{\"2457\":1,\"2462\":1}}],[\"年\",{\"1\":{\"501\":1,\"717\":1}}],[\"年份\",{\"1\":{\"501\":1}}],[\"八个字符\",{\"1\":{\"501\":2}}],[\"八进制转二进制\",{\"1\":{\"1122\":1}}],[\"八进制\",{\"1\":{\"147\":1,\"1119\":1,\"1122\":1}}],[\"秒的高速处理能力\",{\"1\":{\"3477\":1}}],[\"秒杀\",{\"1\":{\"1690\":1}}],[\"秒\",{\"1\":{\"501\":1,\"717\":1,\"3516\":3,\"3527\":1}}],[\"秒数\",{\"1\":{\"501\":1}}],[\"嫌麻烦可以搞个core表达式生成器\",{\"1\":{\"501\":1}}],[\"调大参数\",{\"1\":{\"3533\":1}}],[\"调度决定\",{\"1\":{\"1724\":1}}],[\"调度线程关闭前最大等待时间\",{\"1\":{\"500\":1}}],[\"调度线程名称前缀\",{\"1\":{\"500\":1}}],[\"调试\",{\"1\":{\"1053\":1,\"2325\":1}}],[\"调用aggregation方法\",{\"1\":{\"3249\":1}}],[\"调用autoconfigurationimportselector\",{\"1\":{\"567\":1}}],[\"调用fuzziness方法可设置模糊查询的偏移值\",{\"1\":{\"3239\":1}}],[\"调用format方法\",{\"1\":{\"732\":1}}],[\"调用范围查询的方法\",{\"1\":{\"3236\":1,\"3237\":1}}],[\"调用组合方法\",{\"1\":{\"3230\":1,\"3231\":1}}],[\"调用的service方法中有创建session的代码\",{\"1\":{\"3068\":1}}],[\"调用的是空参构造器\",{\"1\":{\"2285\":1}}],[\"调用的是spring重写的showseason方法\",{\"1\":{\"1631\":1}}],[\"调用的是父类中声明的\",{\"1\":{\"1518\":1}}],[\"调用的是父类中的属性\",{\"1\":{\"1408\":1}}],[\"调用的是子类的方法\",{\"1\":{\"1408\":1}}],[\"调用的是子类中的say方法\",{\"1\":{\"1408\":1}}],[\"调用的是list\",{\"1\":{\"950\":1}}],[\"调用的是collection\",{\"1\":{\"950\":1}}],[\"调用业务逻辑层\",{\"1\":{\"3006\":1}}],[\"调用业务层获取数据\",{\"1\":{\"639\":1}}],[\"调用模型\",{\"1\":{\"3002\":1}}],[\"调用get方法\",{\"1\":{\"2862\":1}}],[\"调用getclass\",{\"0\":{\"2267\":1}}],[\"调用对应的方法来获取参数\",{\"1\":{\"2862\":1}}],[\"调用对象指定的属性\",{\"1\":{\"2257\":1}}],[\"调用对象的welcome\",{\"1\":{\"1406\":1}}],[\"调用不同的方法\",{\"1\":{\"2813\":1}}],[\"调用服务器资源\",{\"1\":{\"2694\":1}}],[\"调用服务端方法\",{\"1\":{\"2226\":1}}],[\"调用查询方法\",{\"1\":{\"2639\":1}}],[\"调用preparedstatement\",{\"1\":{\"2586\":1}}],[\"调用proxyfactory类的静态方法\",{\"1\":{\"2345\":1}}],[\"调用driver的connect\",{\"1\":{\"2545\":1}}],[\"调用自定义类的getname方法\",{\"1\":{\"2414\":1}}],[\"调用自己定义的重写的方法\",{\"1\":{\"1518\":1}}],[\"调用后进行日志记录\",{\"1\":{\"2347\":1}}],[\"调用被代理类方法前进行安全检查\",{\"1\":{\"2347\":1}}],[\"调用被代理类方法的方法\",{\"0\":{\"2340\":1}}],[\"调用被代理类方法的接口\",{\"0\":{\"2339\":1}}],[\"调用被代理类的同名方法\",{\"1\":{\"2345\":1}}],[\"调用nike工厂的producecloth方法进行衣服生产\",{\"1\":{\"2326\":1}}],[\"调用next\",{\"1\":{\"2118\":1}}],[\"调用此方法\",{\"1\":{\"2342\":1}}],[\"调用此方法后\",{\"1\":{\"1800\":1}}],[\"调用此构造器创建运行时类的对象\",{\"1\":{\"2315\":1}}],[\"调用构造器\",{\"0\":{\"2315\":1}}],[\"调用静态方法\",{\"1\":{\"2311\":1}}],[\"调用静态结构\",{\"1\":{\"1526\":1}}],[\"调用指定结构\",{\"0\":{\"2305\":1}}],[\"调用扩展类加载器的getparent\",{\"1\":{\"2280\":1}}],[\"调用系统类加载器的getparent\",{\"1\":{\"2280\":1}}],[\"调用类的静态成员\",{\"1\":{\"2277\":1}}],[\"调用类中被重写的showinfo方法\",{\"1\":{\"1630\":1}}],[\"调用class的静态方法\",{\"0\":{\"2268\":1}}],[\"调用运行时类的属性\",{\"0\":{\"2266\":1}}],[\"调用私有方法\",{\"1\":{\"2258\":1}}],[\"调用私有属性\",{\"1\":{\"2258\":1}}],[\"调用私有化构造器\",{\"1\":{\"2258\":1}}],[\"调用属性\",{\"0\":{\"2306\":1},\"1\":{\"2257\":1}}],[\"调用tostring方法\",{\"1\":{\"2256\":1}}],[\"调用客户端方法\",{\"1\":{\"2226\":1}}],[\"调用该socket\",{\"1\":{\"2221\":1}}],[\"调用该实例的getclass\",{\"1\":{\"835\":1,\"2267\":1}}],[\"调用\",{\"1\":{\"2221\":2,\"2570\":1,\"2571\":1,\"2588\":1,\"2802\":1}}],[\"调用参数设置为泛型的函数\",{\"1\":{\"1968\":1}}],[\"调用key1所在类的equals\",{\"1\":{\"1922\":1}}],[\"调用key1所在类的hashcode\",{\"1\":{\"1922\":1}}],[\"调用多个方法\",{\"1\":{\"1692\":1}}],[\"调用info方法\",{\"1\":{\"1631\":1}}],[\"调用者分为其他方法调用\",{\"1\":{\"1607\":1}}],[\"调用非静态结构\",{\"1\":{\"1526\":1}}],[\"调用接口中的默认方法\",{\"1\":{\"1518\":1}}],[\"调用时\",{\"1\":{\"1517\":1}}],[\"调用匿名类里的eat方法\",{\"1\":{\"1497\":1}}],[\"调用外部类的name\",{\"1\":{\"1457\":1}}],[\"调用内部类的name\",{\"1\":{\"1457\":1}}],[\"调用包装类xxx的xxxvalue\",{\"1\":{\"1442\":1}}],[\"调用了size\",{\"1\":{\"3249\":1}}],[\"调用了person对象的tostring方法\",{\"1\":{\"2257\":1}}],[\"调用了对应包装类的tostring\",{\"1\":{\"1435\":1}}],[\"调用了父类的构造器\",{\"1\":{\"1392\":1}}],[\"调用了哪个类就加载对应的bean\",{\"1\":{\"533\":1}}],[\"调用父类中的构造器\",{\"1\":{\"1387\":1}}],[\"调用父类中的say\",{\"1\":{\"1382\":1}}],[\"调用父类中声明的指定的构造器\",{\"1\":{\"1384\":1}}],[\"调用父类属性和方法\",{\"0\":{\"1380\":1}}],[\"调用本类中指定的其他构造器\",{\"1\":{\"1330\":1}}],[\"调用当前线程的run\",{\"1\":{\"1720\":1,\"1727\":1}}],[\"调用当前正在创建的对象属性或方法\",{\"1\":{\"1329\":1}}],[\"调用当前对象属性或方法\",{\"1\":{\"1328\":1}}],[\"调用方法的时候\",{\"1\":{\"2605\":1}}],[\"调用方法的必要条件\",{\"1\":{\"1800\":1,\"1801\":1}}],[\"调用方法a时\",{\"1\":{\"2343\":1}}],[\"调用方法\",{\"0\":{\"2311\":1},\"1\":{\"2257\":1}}],[\"调用方法时\",{\"1\":{\"1286\":1}}],[\"调用方法对象\",{\"1\":{\"874\":1,\"2314\":1}}],[\"调用在main所在类中声明的方法\",{\"0\":{\"1280\":1}}],[\"调用其执行语句\",{\"1\":{\"1175\":1}}],[\"调用他的方法\",{\"1\":{\"1051\":1}}],[\"调用没有main方法的class文件\",{\"1\":{\"1051\":1}}],[\"调用比较器的某个方法进行正则匹配\",{\"1\":{\"998\":1}}],[\"调用某个matcher实例的方法\",{\"1\":{\"987\":1}}],[\"调用有参构造器\",{\"1\":{\"850\":1,\"2286\":1}}],[\"调用无参构造器\",{\"1\":{\"850\":1,\"2286\":1}}],[\"调用write\",{\"1\":{\"820\":1}}],[\"调用ofpattern方法\",{\"1\":{\"735\":1}}],[\"调用opsforxxx方法\",{\"1\":{\"379\":1}}],[\"调用setstatus方法响应一个302状态码\",{\"1\":{\"2907\":1}}],[\"调用setblob方法\",{\"1\":{\"2612\":1}}],[\"调用service发送消息\",{\"0\":{\"446\":1}}],[\"调用socket的发送\",{\"1\":{\"2230\":1}}],[\"调用start方法\",{\"1\":{\"1720\":1,\"1810\":1}}],[\"调用string的valueof\",{\"1\":{\"1445\":1}}],[\"调用string的构造器\",{\"1\":{\"674\":1}}],[\"调用string重载的valueof\",{\"1\":{\"1445\":1}}],[\"调用student\",{\"1\":{\"1404\":1}}],[\"调用like方法\",{\"1\":{\"631\":1}}],[\"调用所修饰的方式时\",{\"1\":{\"468\":1}}],[\"调用rabbittemplate\",{\"1\":{\"441\":1}}],[\"调用日志对象的api记录日志\",{\"1\":{\"288\":1}}],[\"产生了多个web程序修改es的场景\",{\"1\":{\"3494\":1}}],[\"产生的文件就是pkcs\",{\"1\":{\"3293\":1}}],[\"产生背景\",{\"0\":{\"2496\":1}}],[\"产生一个新流\",{\"1\":{\"2474\":1,\"2475\":1}}],[\"产生一个新的\",{\"1\":{\"2464\":1,\"2465\":1,\"2466\":1}}],[\"产生编译错误\",{\"1\":{\"1992\":1}}],[\"产生死锁可能性的最根本原因是\",{\"1\":{\"1794\":1}}],[\"产生内存空间==\",{\"1\":{\"1699\":1}}],[\"产生其他依赖对象时\",{\"1\":{\"1487\":1}}],[\"产生未处理的异常\",{\"1\":{\"494\":1}}],[\"产品经理\",{\"1\":{\"33\":1}}],[\"产品原型等\",{\"1\":{\"33\":1}}],[\"产品原型\",{\"0\":{\"22\":1}}],[\"产品原型编写\",{\"1\":{\"20\":1}}],[\"酷\",{\"1\":{\"493\":1}}],[\"丢弃所有当前已安排的任务\",{\"1\":{\"492\":1}}],[\"安全保障手段\",{\"0\":{\"3693\":1}}],[\"安全认证章节\",{\"1\":{\"3570\":1}}],[\"安全认证\",{\"0\":{\"3789\":1},\"1\":{\"3564\":1}}],[\"安全性\",{\"1\":{\"3077\":1}}],[\"安全协议\",{\"1\":{\"2697\":1}}],[\"安全检查\",{\"1\":{\"2323\":1}}],[\"安全问题解析\",{\"1\":{\"1769\":1}}],[\"安全与同步\",{\"0\":{\"1751\":1}}],[\"安全考虑\",{\"1\":{\"810\":1}}],[\"安排指定的任务指定的延迟后开始进行重复的固定延迟执行\",{\"1\":{\"492\":1}}],[\"安排指定的任务在指定的延迟后开始进行重复的固定速率执行\",{\"1\":{\"492\":1}}],[\"安排指定的任务在指定的时间开始进行重复的固定速率执行\",{\"1\":{\"492\":1}}],[\"安排指定的任务在\",{\"1\":{\"492\":1}}],[\"安排在指定延迟后执行指定的任务\",{\"1\":{\"492\":1}}],[\"安排在\",{\"1\":{\"492\":1}}],[\"安装kibana\",{\"0\":{\"3351\":1}}],[\"安装es\",{\"0\":{\"3317\":1}}],[\"安装软件\",{\"0\":{\"3106\":1}}],[\"安装\",{\"0\":{\"3286\":1,\"3478\":1,\"3552\":1,\"3555\":1,\"3561\":1},\"1\":{\"2701\":1,\"3285\":1,\"3478\":1}}],[\"安装与卸载\",{\"0\":{\"2701\":1}}],[\"安装并使用驱动\",{\"0\":{\"2538\":1}}],[\"安装驱动\",{\"0\":{\"2534\":1},\"1\":{\"2541\":1}}],[\"安装目录\",{\"1\":{\"1035\":1}}],[\"安装指定版本的所有java内容\",{\"1\":{\"1035\":1}}],[\"安装idea彩色日志插件\",{\"1\":{\"307\":1}}],[\"安装插件\",{\"1\":{\"307\":1}}],[\"安装jdk\",{\"0\":{\"1027\":1},\"1\":{\"251\":1}}],[\"追加效果\",{\"1\":{\"2138\":1}}],[\"追加写\",{\"1\":{\"2060\":1}}],[\"追加自定义前缀名\",{\"1\":{\"483\":1}}],[\"追踪信息\",{\"1\":{\"342\":1}}],[\"才会清除掉\",{\"1\":{\"3527\":1}}],[\"才会被拦截\",{\"1\":{\"2950\":1}}],[\"才会被拦截拦截\",{\"1\":{\"2950\":1}}],[\"才会执行destroy方法\",{\"1\":{\"2802\":1}}],[\"才会结束执行\",{\"1\":{\"829\":1,\"2082\":1}}],[\"才重新从文件中读取下一个8192个字节数组\",{\"1\":{\"2074\":1}}],[\"才重新进入cpu分配线程的队列\",{\"1\":{\"1729\":1}}],[\"才真正创建了数组\",{\"1\":{\"1869\":1}}],[\"才可以访问数组中的每个元素\",{\"1\":{\"1220\":1}}],[\"才使用long\",{\"1\":{\"1090\":1}}],[\"才能执行关闭服务命令\",{\"1\":{\"3721\":1}}],[\"才能继续访问接着访问\",{\"1\":{\"2946\":1}}],[\"才能被tomcat解析\",{\"1\":{\"2772\":1}}],[\"才能被其他线程拿到\",{\"1\":{\"1797\":1}}],[\"才能生效\",{\"1\":{\"2771\":1}}],[\"才能移动到任何后续结果\",{\"1\":{\"2571\":1}}],[\"才能使用多态的特性\",{\"1\":{\"1987\":1}}],[\"才能使用数组\",{\"1\":{\"1211\":1}}],[\"才能更好的发挥多线程的效率\",{\"1\":{\"1689\":1}}],[\"才能通过这个对象去访问类中的非静态成员\",{\"1\":{\"1541\":1}}],[\"才能为内层元素赋值\",{\"1\":{\"1237\":1}}],[\"才能加载配置文件\",{\"1\":{\"553\":1}}],[\"才能将配置文件加载到内存总读取\",{\"1\":{\"159\":1}}],[\"才是配置作为缓存的reids\",{\"1\":{\"483\":1}}],[\"随后可以使用这些文件作为命令的cert模式的输入\",{\"1\":{\"3293\":1}}],[\"随后找到模块的source\",{\"1\":{\"166\":1}}],[\"随用随调\",{\"1\":{\"2390\":1}}],[\"随着业务的发展\",{\"1\":{\"3524\":1}}],[\"随着数据量的变化\",{\"1\":{\"3515\":1}}],[\"随着微服务成为主流\",{\"1\":{\"2998\":1}}],[\"随着\",{\"1\":{\"2162\":1}}],[\"随着对象的创建而执行\",{\"1\":{\"1528\":1}}],[\"随着类的加载而执行\",{\"1\":{\"1527\":1}}],[\"随着类的加载而加载\",{\"1\":{\"1473\":1}}],[\"随便写\",{\"1\":{\"3197\":1}}],[\"随便定义\",{\"1\":{\"1611\":1}}],[\"随便转\",{\"1\":{\"1413\":1}}],[\"随便创建一个类来实现importselector接口\",{\"1\":{\"523\":1}}],[\"随机访问\",{\"1\":{\"2129\":1}}],[\"随机访问机制\",{\"0\":{\"2129\":1}}],[\"随机存储文件流\",{\"0\":{\"2128\":1},\"1\":{\"2128\":1}}],[\"随机排序\",{\"1\":{\"931\":1}}],[\"随机数的精确度为\",{\"1\":{\"761\":1}}],[\"随机数的范围是\",{\"1\":{\"761\":1}}],[\"随机数\",{\"0\":{\"761\":1}}],[\"随机淘汰\",{\"1\":{\"480\":1}}],[\"挑选最近使用次数最少的数据淘汰\",{\"1\":{\"480\":1}}],[\"挑选最近最早使用的数据淘汰\",{\"1\":{\"480\":1}}],[\"变得太大\",{\"1\":{\"3527\":1}}],[\"变更越频繁\",{\"1\":{\"3494\":1}}],[\"变长的编码方式\",{\"1\":{\"2109\":1}}],[\"变成主节点\",{\"1\":{\"3664\":1}}],[\"变成一个内存地址\",{\"1\":{\"1703\":1}}],[\"变成了一个从节点角色\",{\"1\":{\"3664\":1}}],[\"变成了1\",{\"1\":{\"1122\":1}}],[\"变成了\",{\"1\":{\"816\":1,\"1442\":1}}],[\"变为空的map集合\",{\"1\":{\"962\":1}}],[\"变化了\",{\"1\":{\"475\":1}}],[\"变量类型推断\",{\"0\":{\"2514\":1}}],[\"变量间的关系\",{\"0\":{\"1704\":1}}],[\"变量间赋值\",{\"0\":{\"1553\":1}}],[\"变量和方法时\",{\"1\":{\"1348\":1}}],[\"变量都有其对应的作用域\",{\"1\":{\"1272\":1}}],[\"变量值\",{\"1\":{\"1272\":1}}],[\"变量只在循环内有效\",{\"1\":{\"1181\":1}}],[\"变量只有在其作用域内才有效\",{\"1\":{\"1072\":1}}],[\"变量或不确定的表达式\",{\"1\":{\"1175\":1}}],[\"变量本身的数据类型没有发生改变\",{\"1\":{\"1145\":1}}],[\"变量要以\",{\"1\":{\"1095\":1}}],[\"变量可以分为8种基本数据类型\",{\"1\":{\"1075\":1}}],[\"变量的名可以理解为内存的地址标识\",{\"1\":{\"1703\":1}}],[\"变量的名是不会储存的\",{\"1\":{\"1703\":1}}],[\"变量的范围\",{\"1\":{\"1594\":1}}],[\"变量的分类\",{\"0\":{\"1074\":1}}],[\"变量的作用域\",{\"0\":{\"1072\":1}}],[\"变量的赋值\",{\"0\":{\"1070\":1}}],[\"变量名编译后\",{\"1\":{\"1703\":1}}],[\"变量名是给我们程序员操作内存来使用的\",{\"1\":{\"1703\":1}}],[\"变量名3\",{\"1\":{\"1585\":1}}],[\"变量名2\",{\"1\":{\"1585\":1}}],[\"变量名1\",{\"1\":{\"1585\":1}}],[\"变量名\",{\"0\":{\"1703\":1},\"1\":{\"1070\":1,\"1071\":1,\"1083\":1,\"1272\":1,\"2293\":1}}],[\"变量名称\",{\"1\":{\"1069\":1}}],[\"变量名和存储的值\",{\"1\":{\"1066\":1}}],[\"变量是内存的标识\",{\"1\":{\"1704\":1}}],[\"变量是内存中的一个存储区域\",{\"1\":{\"1066\":1}}],[\"变量是程序中最基本的存储单元\",{\"1\":{\"1066\":1}}],[\"变量\",{\"0\":{\"1064\":1,\"1065\":1,\"1702\":1},\"1\":{\"119\":1,\"1058\":1,\"1081\":1,\"1328\":1,\"1329\":1,\"1348\":1,\"1351\":1,\"2250\":1}}],[\"检索\",{\"0\":{\"3410\":1}}],[\"检索程序就根据事先建立的索引进行查找\",{\"1\":{\"3100\":1}}],[\"检索数据\",{\"1\":{\"3091\":1}}],[\"检索指定列的数据库特定的类型名称\",{\"1\":{\"2593\":1}}],[\"检查证书是否有效\",{\"1\":{\"3295\":1}}],[\"检查java\",{\"1\":{\"2709\":1}}],[\"检查是否没有匹配任何元素\",{\"0\":{\"2479\":1}}],[\"检查是否至少匹配一个元素\",{\"0\":{\"2478\":1}}],[\"检查是否匹配所有元素\",{\"0\":{\"2477\":1}}],[\"检查验证码\",{\"1\":{\"469\":1,\"471\":1}}],[\"检测索引是否创建成功\",{\"1\":{\"3209\":1}}],[\"检测与比较\",{\"0\":{\"658\":1}}],[\"检测验证码\",{\"1\":{\"474\":1}}],[\"疑问\",{\"1\":{\"471\":1,\"562\":1,\"1741\":1}}],[\"共同持有整个的数据\",{\"1\":{\"3260\":1}}],[\"共分为三个部分\",{\"1\":{\"2882\":1}}],[\"共享一些数据\",{\"1\":{\"2901\":1}}],[\"共享一个num变量\",{\"1\":{\"1740\":1}}],[\"共享硬件\",{\"1\":{\"2172\":1}}],[\"共享数据\",{\"1\":{\"1759\":1,\"2929\":1}}],[\"共享成员变量\",{\"0\":{\"1743\":1}}],[\"共有两种连接方式\",{\"1\":{\"3732\":1}}],[\"共有两个业务方法\",{\"1\":{\"471\":1}}],[\"共有4种访问模式\",{\"1\":{\"2134\":1}}],[\"共有4个注解可用\",{\"0\":{\"508\":1}}],[\"共有四种获取class类的实例的方式\",{\"1\":{\"833\":1}}],[\"共五种\",{\"1\":{\"441\":1}}],[\"向客户端响应\",{\"1\":{\"3444\":1}}],[\"向协调节点也返回成功\",{\"1\":{\"3413\":1}}],[\"向节点\",{\"0\":{\"3282\":1}}],[\"向es\",{\"1\":{\"3282\":1}}],[\"向es插入的数据必须是json个格式\",{\"1\":{\"3216\":1}}],[\"向es中插入数据必须是json格式\",{\"1\":{\"3214\":1}}],[\"向\",{\"1\":{\"3134\":1,\"3140\":1,\"3148\":1,\"3158\":1,\"3183\":1,\"3186\":1,\"3189\":1}}],[\"向httpsession中添加属性时调用\",{\"1\":{\"2966\":1}}],[\"向servletrequest中添加属性时调用\",{\"1\":{\"2967\":1}}],[\"向servletcontext中添加属性时调用\",{\"1\":{\"2965\":1}}],[\"向servlet发送请求时\",{\"1\":{\"2947\":1}}],[\"向set\",{\"1\":{\"1894\":1}}],[\"向responsedemo1类发送请求\",{\"1\":{\"2908\":1}}],[\"向浏览器响应一张图片\",{\"0\":{\"2894\":1}}],[\"向浏览器响应html标签\",{\"0\":{\"2890\":1}}],[\"向浏览器响应字符hello\",{\"0\":{\"2888\":1}}],[\"向数据表中插入1百万条数据\",{\"1\":{\"2619\":1}}],[\"向数据表插入blob类型\",{\"0\":{\"2612\":1}}],[\"向流中写入字节时\",{\"1\":{\"2074\":1}}],[\"向treemap中添加key\",{\"1\":{\"1934\":1}}],[\"向treeset中添加的数据\",{\"1\":{\"1903\":1}}],[\"向上转型\",{\"0\":{\"1413\":1},\"1\":{\"1411\":1}}],[\"向上取整\",{\"1\":{\"762\":1}}],[\"向下转型必须是父类引用子类的对象\",{\"0\":{\"1418\":1}}],[\"向下转型的异常\",{\"0\":{\"1415\":1}}],[\"向下转型成子类型\",{\"1\":{\"1411\":1}}],[\"向下转型\",{\"0\":{\"1414\":1},\"1\":{\"1411\":1}}],[\"向下转型说明\",{\"0\":{\"1411\":1}}],[\"向下取整\",{\"1\":{\"763\":1}}],[\"向一张图片上写入字符\",{\"1\":{\"825\":2}}],[\"向controller发请求\",{\"1\":{\"469\":1}}],[\"向集合中插入数据时\",{\"1\":{\"401\":1}}],[\"向集合添加文档时\",{\"1\":{\"396\":1}}],[\"业务流程\",{\"0\":{\"3007\":1}}],[\"业务流程如下\",{\"1\":{\"469\":1}}],[\"业务模型\",{\"1\":{\"3002\":1}}],[\"业务处理完后\",{\"1\":{\"2833\":1}}],[\"业务逻辑层\",{\"1\":{\"3006\":2,\"3008\":1,\"3009\":1,\"3011\":1,\"3013\":1}}],[\"业务逻辑就是写在该方法内的\",{\"1\":{\"2801\":1}}],[\"业务逻辑\",{\"0\":{\"1539\":1}}],[\"业务层必须进行test测试\",{\"1\":{\"638\":1}}],[\"业务层实现类\",{\"0\":{\"636\":1}}],[\"业务层接口\",{\"0\":{\"635\":1}}],[\"业务层接口和实现类\",{\"0\":{\"471\":1}}],[\"业务层\",{\"0\":{\"634\":1}}],[\"业务监控\",{\"1\":{\"310\":1}}],[\"案例\",{\"0\":{\"469\":1}}],[\"没法在compass上直接看到\",{\"1\":{\"3712\":1}}],[\"没法直接获取\",{\"1\":{\"1005\":1}}],[\"没必要通过这个方法获取\",{\"1\":{\"2850\":1}}],[\"没这个选项\",{\"1\":{\"2762\":1}}],[\"没报错\",{\"1\":{\"1969\":1}}],[\"没发挥多线程的功能\",{\"1\":{\"1773\":1}}],[\"没锁住所有有安全问题的代码\",{\"1\":{\"1773\":1}}],[\"没导入的用全类名\",{\"1\":{\"1344\":1}}],[\"没加l\",{\"1\":{\"1116\":1}}],[\"没值就执行方法\",{\"1\":{\"468\":1}}],[\"没有冗余\",{\"1\":{\"3385\":1}}],[\"没有主机映射\",{\"1\":{\"3308\":1,\"3330\":1}}],[\"没有被dns解析的域名\",{\"1\":{\"3298\":1}}],[\"没有被整合的不能这样更好\",{\"1\":{\"477\":1}}],[\"没有计划涉及\",{\"1\":{\"3256\":1,\"3257\":1}}],[\"没有会报错\",{\"1\":{\"3133\":1}}],[\"没有到期的session也会跟着销毁\",{\"1\":{\"2924\":1}}],[\"没有什么太大的用处\",{\"1\":{\"2803\":1}}],[\"没有就返回false\",{\"1\":{\"2590\":1}}],[\"没有就返回null\",{\"1\":{\"472\":1}}],[\"没有jdbc\",{\"0\":{\"2528\":1}}],[\"没有中间操作\",{\"1\":{\"2455\":1}}],[\"没有中文\",{\"1\":{\"84\":1,\"85\":1}}],[\"没有参数不可省略括号\",{\"1\":{\"2366\":1}}],[\"没有安全方面的问题\",{\"1\":{\"2275\":1}}],[\"没有继承抽象流基类\",{\"1\":{\"2128\":1}}],[\"没有指明泛型的类型\",{\"1\":{\"1959\":1}}],[\"没有指明身份验证用到的数据库\",{\"1\":{\"390\":1}}],[\"没有指定泛型\",{\"1\":{\"1959\":1}}],[\"没有泛型时\",{\"0\":{\"1953\":1}}],[\"没有其他元素\",{\"1\":{\"1891\":1}}],[\"没有数据\",{\"1\":{\"1843\":1}}],[\"没有及时拿到新数据\",{\"1\":{\"1753\":1}}],[\"没有固定的先后顺序\",{\"1\":{\"1722\":1}}],[\"没有开启线程\",{\"1\":{\"1720\":1}}],[\"没有任何的变量或属性对它进行引用\",{\"1\":{\"1705\":1}}],[\"没有属性\",{\"1\":{\"1647\":1}}],[\"没有通过保存指针来用变量指向值\",{\"1\":{\"1555\":1}}],[\"没有使用springdata的计划\",{\"1\":{\"3255\":1}}],[\"没有使用static修饰的\",{\"1\":{\"1526\":1}}],[\"没有使用配置类和配置文件\",{\"1\":{\"520\":1}}],[\"没有方法体\",{\"1\":{\"1495\":1}}],[\"没有必要每次使用配置文件数据\",{\"1\":{\"1491\":1}}],[\"没有限制\",{\"1\":{\"1413\":1}}],[\"没有多态\",{\"1\":{\"1409\":1}}],[\"没有显式的声明\",{\"1\":{\"1386\":1}}],[\"没有显式的赋给一个变量名\",{\"1\":{\"1267\":1}}],[\"没有改变iq\",{\"1\":{\"1354\":1}}],[\"没有特殊语法\",{\"1\":{\"1282\":1}}],[\"没有具体返回值的情况\",{\"1\":{\"1281\":1}}],[\"没有返回值的方法中\",{\"1\":{\"1277\":1}}],[\"没有返回值\",{\"1\":{\"1277\":1,\"1814\":1}}],[\"没有返回值就返回null\",{\"1\":{\"874\":1,\"2314\":1}}],[\"没有默认初始化值\",{\"1\":{\"1273\":1}}],[\"没有地址\",{\"1\":{\"1241\":1}}],[\"没有初始化\",{\"1\":{\"1241\":1,\"1489\":1,\"1769\":1}}],[\"没有关联数组一说\",{\"1\":{\"1208\":1}}],[\"没有break时\",{\"1\":{\"1175\":1}}],[\"没有小数位\",{\"1\":{\"1139\":1}}],[\"没有加l时\",{\"1\":{\"1116\":1}}],[\"没有这个大引号\",{\"1\":{\"1058\":1}}],[\"没有main文件\",{\"0\":{\"1050\":1}}],[\"没有他的时候\",{\"1\":{\"815\":1}}],[\"没有为id字段指定值\",{\"1\":{\"403\":1}}],[\"没有标结果\",{\"1\":{\"399\":1}}],[\"没有整合之前操作如果是模式a的话\",{\"1\":{\"354\":1}}],[\"没有启动类的模块\",{\"1\":{\"171\":1}}],[\"读操作\",{\"1\":{\"3393\":1}}],[\"读写频繁以及价值比较低的数据\",{\"1\":{\"3541\":1}}],[\"读写\",{\"1\":{\"2135\":1}}],[\"读写过程\",{\"1\":{\"2106\":1}}],[\"读写速度较快\",{\"1\":{\"462\":1}}],[\"读一行\",{\"1\":{\"2082\":1}}],[\"读到文件的结尾时才会返回null\",{\"1\":{\"2082\":1}}],[\"读到了字符a\",{\"1\":{\"813\":1}}],[\"读数据和更新数据的间隙越长\",{\"1\":{\"3494\":1}}],[\"读数据\",{\"1\":{\"2071\":1}}],[\"读入数据\",{\"1\":{\"2081\":1}}],[\"读入\",{\"0\":{\"2076\":1,\"2078\":1},\"1\":{\"2069\":1,\"2084\":2,\"2123\":1}}],[\"读\",{\"0\":{\"3409\":1,\"3410\":1},\"1\":{\"1704\":1,\"2040\":2,\"2070\":1,\"2137\":1}}],[\"读取文件\",{\"1\":{\"2894\":1,\"2895\":1}}],[\"读取文件需处理异常\",{\"1\":{\"812\":1}}],[\"读取流\",{\"1\":{\"2853\":1}}],[\"读取流中的对象\",{\"1\":{\"2148\":1}}],[\"读取不同类型的数据的顺序要与当初写入文件时\",{\"1\":{\"2127\":1}}],[\"读取数据\",{\"1\":{\"2051\":1,\"2858\":1}}],[\"读取外部数据\",{\"1\":{\"2022\":1}}],[\"读取的数据类型为object\",{\"1\":{\"1993\":1}}],[\"读取的单位从字符变成了字节\",{\"1\":{\"816\":1}}],[\"读取资源\",{\"1\":{\"1592\":1}}],[\"读取一行\",{\"0\":{\"2082\":1},\"1\":{\"829\":1}}],[\"读取一次\",{\"1\":{\"813\":1,\"814\":3}}],[\"读取一个字节\",{\"1\":{\"813\":1}}],[\"读取单个字符\",{\"1\":{\"813\":1}}],[\"读取对应前缀相关的属性值\",{\"1\":{\"553\":1}}],[\"读取yaml全部属性数据\",{\"0\":{\"152\":1}}],[\"读取yml文件\",{\"0\":{\"544\":1}}],[\"读取yml引用类型数据\",{\"0\":{\"153\":1}}],[\"读取yml数据\",{\"0\":{\"151\":1}}],[\"读取yml\",{\"0\":{\"150\":1}}],[\"读取配置信息\",{\"1\":{\"1940\":1,\"2551\":1}}],[\"读取配置文件中的4个基本信息\",{\"1\":{\"2573\":1,\"2575\":1}}],[\"读取配置文件中的数据库连接信息\",{\"1\":{\"2567\":1}}],[\"读取配置文件的方式二\",{\"1\":{\"2282\":1}}],[\"读取配置文件的方式一\",{\"1\":{\"2282\":1}}],[\"读取配置文件的输入流\",{\"1\":{\"2282\":1}}],[\"读取配置文件的类\",{\"1\":{\"1491\":1}}],[\"读取配置文件\",{\"0\":{\"1940\":1},\"1\":{\"547\":1,\"553\":1}}],[\"读取配置项\",{\"1\":{\"152\":1}}],[\"读取配置\",{\"1\":{\"129\":1}}],[\"提升硬件利用率\",{\"1\":{\"3505\":1}}],[\"提交点\",{\"0\":{\"3446\":1}}],[\"提交事务\",{\"0\":{\"2629\":1}}],[\"提醒\",{\"1\":{\"3031\":1}}],[\"提取出来应用到方法中\",{\"1\":{\"2467\":1}}],[\"提前排错\",{\"1\":{\"3303\":1}}],[\"提前创建好多个线程\",{\"1\":{\"1812\":1}}],[\"提前规定好\",{\"1\":{\"644\":1}}],[\"提高负载\",{\"1\":{\"3639\":1}}],[\"提高日期直方图和搜索聚合的速度\",{\"1\":{\"3114\":1}}],[\"提高操作效率\",{\"1\":{\"2091\":1}}],[\"提高响应速度\",{\"1\":{\"1813\":1}}],[\"提高计算机系统cpu的利用率\",{\"1\":{\"1693\":1}}],[\"提高应用程序的响应\",{\"1\":{\"1693\":1}}],[\"提高了代码的复用性\",{\"1\":{\"1362\":1}}],[\"提高安全性\",{\"1\":{\"1349\":1}}],[\"提高效率\",{\"1\":{\"696\":1}}],[\"提高系统性能\",{\"1\":{\"461\":1}}],[\"提供如关闭连接\",{\"1\":{\"2682\":1}}],[\"提供实现\",{\"1\":{\"2668\":1}}],[\"提供三个连接的基本信息\",{\"1\":{\"2548\":1}}],[\"提供另外三个连接的基本信息\",{\"1\":{\"2547\":1}}],[\"提供用户名和密码\",{\"1\":{\"2545\":1}}],[\"提供url\",{\"1\":{\"2545\":1}}],[\"提供不同实现\",{\"1\":{\"2531\":1}}],[\"提供两个类参数\",{\"1\":{\"2426\":1}}],[\"提供两个接口\",{\"1\":{\"473\":1}}],[\"提供的\",{\"1\":{\"3086\":1,\"3087\":1}}],[\"提供的一些功能\",{\"1\":{\"2162\":1}}],[\"提供的值没有加f\",{\"1\":{\"1116\":1}}],[\"提供第二个参数来指定编码集\",{\"1\":{\"2096\":1}}],[\"提供filewriter的对象\",{\"1\":{\"2064\":1}}],[\"提供file类的对象\",{\"1\":{\"2064\":1}}],[\"提供一种方法访问一个容器\",{\"1\":{\"1835\":1}}],[\"提供一个参数\",{\"1\":{\"974\":1,\"977\":1,\"2392\":2,\"2423\":1}}],[\"提供更多的子类\",{\"1\":{\"1779\":1}}],[\"提供当前枚举类的多个对象\",{\"1\":{\"1621\":1}}],[\"提供方法体\",{\"1\":{\"1495\":1}}],[\"提供公共的静态的方法\",{\"1\":{\"1488\":1}}],[\"提供公共的静态方法\",{\"1\":{\"1488\":1}}],[\"提供了水平可扩展性作为其核心功能的一部分\",{\"1\":{\"3538\":1}}],[\"提供了\",{\"1\":{\"3514\":1,\"3518\":1}}],[\"提供了将索引划分成多份的能力\",{\"1\":{\"3365\":1}}],[\"提供了8个监听器\",{\"1\":{\"2961\":1}}],[\"提供了很多内置的functional\",{\"1\":{\"2391\":1}}],[\"提供了最高级网络应用\",{\"1\":{\"2244\":1}}],[\"提供了在字节流和字符流之间的转换\",{\"1\":{\"2089\":1}}],[\"提供了前提\",{\"1\":{\"1362\":1}}],[\"提供了一种高效且易于使用的处理数据的方式\",{\"1\":{\"2436\":1}}],[\"提供了一系列重载的print\",{\"1\":{\"2120\":1}}],[\"提供了一系列静态方法用于科学计算\",{\"1\":{\"759\":1}}],[\"提供了一个相对安全的内存管理和访问机制\",{\"1\":{\"1013\":1}}],[\"提供常用功能\",{\"1\":{\"1338\":1}}],[\"提供包的概念\",{\"1\":{\"1334\":1}}],[\"提供参数\",{\"1\":{\"976\":1,\"2392\":1}}],[\"提供所有\",{\"1\":{\"777\":1}}],[\"提供对不同的日历系统的访问\",{\"1\":{\"710\":1}}],[\"提供服务时\",{\"1\":{\"504\":1}}],[\"提供统一的api和注解来简化缓存的使用\",{\"1\":{\"487\":1}}],[\"提示\",{\"1\":{\"0\":1,\"11\":1,\"12\":1,\"13\":1,\"14\":1,\"15\":1,\"16\":1,\"17\":1,\"18\":1,\"40\":1,\"41\":1,\"42\":1,\"43\":1,\"44\":1,\"46\":1,\"47\":1,\"60\":1,\"61\":1,\"62\":1,\"63\":1,\"64\":1,\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"72\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"94\":1,\"108\":1,\"136\":1,\"151\":1,\"160\":1,\"163\":1,\"177\":1,\"217\":1,\"254\":1,\"285\":1,\"310\":1,\"319\":1,\"332\":1,\"389\":1,\"434\":1,\"435\":1,\"437\":1,\"457\":1,\"458\":1,\"486\":1,\"487\":1,\"501\":1,\"504\":1,\"573\":1,\"614\":1,\"634\":1,\"649\":1,\"683\":1,\"723\":1,\"728\":1,\"743\":1,\"752\":1,\"759\":1,\"771\":1,\"777\":1,\"778\":1,\"832\":1,\"889\":1,\"895\":1,\"972\":1,\"978\":1,\"979\":1,\"980\":1,\"981\":1,\"982\":1,\"983\":1,\"987\":1,\"1062\":1,\"1164\":1,\"1283\":1,\"1486\":1,\"1544\":1,\"1823\":1,\"1941\":1,\"2170\":1,\"2350\":1,\"2357\":1,\"2509\":1,\"2524\":1,\"2626\":1,\"2769\":1,\"2816\":1,\"2827\":1,\"2874\":1,\"2943\":1,\"2955\":1,\"2993\":1,\"2999\":1,\"3014\":1,\"3048\":1,\"3115\":1,\"3131\":1,\"3136\":1,\"3138\":1,\"3257\":1,\"3290\":1,\"3303\":1,\"3316\":1,\"3324\":1,\"3335\":1,\"3360\":1,\"3361\":1,\"3362\":1,\"3363\":1,\"3364\":1,\"3365\":1,\"3368\":1,\"3419\":1,\"3424\":1,\"3480\":1,\"3484\":1,\"3490\":1,\"3519\":1,\"3520\":1,\"3521\":1,\"3556\":1,\"3566\":1,\"3568\":1,\"3574\":1,\"3583\":1,\"3613\":1,\"3648\":1,\"3666\":1,\"3691\":1,\"3712\":1,\"3730\":1,\"3731\":1,\"3752\":1,\"3753\":1,\"3754\":1}}],[\"储存在了各个节点\",{\"1\":{\"3373\":1}}],[\"储存中文\",{\"0\":{\"3054\":1}}],[\"储存sessionid的cookie没有了\",{\"1\":{\"2924\":1}}],[\"储存结构图\",{\"0\":{\"1925\":1}}],[\"储存的方式\",{\"0\":{\"1892\":1}}],[\"储存的过程\",{\"0\":{\"1227\":1}}],[\"储存无序的\",{\"1\":{\"1882\":1}}],[\"储存其他内存块的地址\",{\"1\":{\"1700\":1}}],[\"储存值使用的是一个final数组\",{\"1\":{\"1127\":1}}],[\"储存数据和查询数据时\",{\"1\":{\"3400\":1}}],[\"储存数据==\",{\"1\":{\"1699\":1}}],[\"储存数据时\",{\"1\":{\"1120\":1}}],[\"储存数据库中的数据\",{\"1\":{\"460\":1}}],[\"储存空间\",{\"1\":{\"485\":2}}],[\"储存临时数据\",{\"1\":{\"460\":1}}],[\"储存用户信息的数据库\",{\"0\":{\"391\":1}}],[\"待更新的文档\",{\"1\":{\"3594\":1}}],[\"待测试的文本\",{\"1\":{\"3473\":1,\"3476\":1}}],[\"待开始使用该索引时\",{\"1\":{\"3454\":1}}],[\"待查询的字段\",{\"1\":{\"3172\":1}}],[\"待删除的文档\",{\"1\":{\"3147\":1}}],[\"待修改的字段\",{\"1\":{\"3145\":1}}],[\"待修改的文档\",{\"1\":{\"3144\":1,\"3145\":1}}],[\"待补充的内容\",{\"1\":{\"2768\":1}}],[\"待匹配的字符串\",{\"1\":{\"998\":1}}],[\"待匹配的charsequence\",{\"1\":{\"998\":1}}],[\"待添加的集合\",{\"1\":{\"946\":1}}],[\"待添加的集合元素\",{\"1\":{\"945\":1}}],[\"待排序的list\",{\"1\":{\"932\":1}}],[\"待插入的内容\",{\"1\":{\"703\":1}}],[\"待发送短信的订单已纳入处理队列\",{\"1\":{\"452\":1}}],[\"待封装的数据\",{\"0\":{\"154\":1}}],[\"生命周期\",{\"0\":{\"1748\":1,\"2792\":1,\"2922\":1,\"2924\":1},\"1\":{\"1684\":1}}],[\"生成两份拷贝node\",{\"1\":{\"3335\":1}}],[\"生成注册token等\",{\"1\":{\"3325\":1}}],[\"生成http证书的过程要进行以下10次交互\",{\"1\":{\"3298\":1}}],[\"生成证书的流程很复杂\",{\"1\":{\"3298\":1}}],[\"生成stream的集合是一个嵌套集合\",{\"1\":{\"2467\":1}}],[\"生成随机数\",{\"1\":{\"2451\":1}}],[\"生成\",{\"0\":{\"2451\":1}}],[\"生成一个被代理类\",{\"1\":{\"2345\":1}}],[\"生成动态代理\",{\"1\":{\"2249\":1}}],[\"生成对应的\",{\"1\":{\"2241\":1}}],[\"生成的证书要放到到config目录内\",{\"1\":{\"3297\":1}}],[\"生成的是一个boolean结果\",{\"1\":{\"1426\":1}}],[\"生成的文档会解析html代码\",{\"1\":{\"1056\":1}}],[\"生成api文档\",{\"1\":{\"1053\":1}}],[\"生成策略为参照数据库设定的策略\",{\"1\":{\"624\":1}}],[\"生成代码\",{\"1\":{\"588\":1}}],[\"生成验证码\",{\"1\":{\"469\":1,\"471\":1}}],[\"生成者controller\",{\"0\":{\"446\":1}}],[\"生产端配置的详细一些\",{\"1\":{\"3562\":1}}],[\"生产时要部署到linux服务器\",{\"1\":{\"3105\":1}}],[\"生产者\",{\"1\":{\"455\":1}}],[\"生产者service\",{\"0\":{\"445\":1}}],[\"生产者和消费者大概率分属于两个springboot模块\",{\"1\":{\"441\":1}}],[\"生产者发送消息\",{\"1\":{\"441\":1}}],[\"生产阶段必须关闭热部署\",{\"1\":{\"195\":1}}],[\"生产阶段不要开启热部署\",{\"1\":{\"177\":1}}],[\"生产环境无影响\",{\"1\":{\"3071\":1}}],[\"生产环境搭建\",{\"0\":{\"1034\":1}}],[\"生产环境配置文件\",{\"1\":{\"274\":1}}],[\"生产环境的密码被测试任意拿到\",{\"1\":{\"273\":1}}],[\"生产环境可以是机房或者云服务器等线上环境\",{\"1\":{\"39\":1}}],[\"生产环境\",{\"0\":{\"38\":1},\"1\":{\"35\":1,\"269\":1,\"308\":1}}],[\"做session共享\",{\"1\":{\"3551\":1}}],[\"做一个全文索引\",{\"1\":{\"3524\":1}}],[\"做一下简单的配置即可\",{\"1\":{\"475\":1,\"481\":1}}],[\"做数据检索\",{\"1\":{\"3498\":1}}],[\"做什么\",{\"1\":{\"2750\":1}}],[\"做出响应\",{\"1\":{\"2694\":1}}],[\"做了这个配置会降低性能\",{\"1\":{\"2674\":2}}],[\"做同样的方法体操作\",{\"1\":{\"2463\":1}}],[\"做好yml配置\",{\"1\":{\"441\":1}}],[\"做日志可视化处理\",{\"1\":{\"300\":1}}],[\"轮询\",{\"0\":{\"3405\":1}}],[\"轮训\",{\"1\":{\"439\":1}}],[\"轮子\",{\"1\":{\"10\":1}}],[\"虚拟内存过小\",{\"0\":{\"3313\":1,\"3346\":1},\"1\":{\"3313\":1,\"3346\":1}}],[\"虚拟目录\",{\"1\":{\"2716\":1}}],[\"虚拟方法调用举例\",{\"0\":{\"1406\":1}}],[\"虚拟方法调用\",{\"0\":{\"1404\":1}}],[\"虚拟方法的调用\",{\"0\":{\"1402\":1}}],[\"虚拟host\",{\"1\":{\"439\":1}}],[\"虚拟机会保证一个类的<clinit>\",{\"1\":{\"2276\":1}}],[\"虚拟机常量池内的符号引用\",{\"1\":{\"2275\":1}}],[\"虚拟机检测到程序发生了问题\",{\"1\":{\"1567\":1}}],[\"虚拟机栈用于存储局部变量等\",{\"1\":{\"1546\":1}}],[\"虚拟机\",{\"1\":{\"313\":1}}],[\"消耗的多文件句柄数及\",{\"1\":{\"3515\":1}}],[\"消耗5s\",{\"1\":{\"2625\":1}}],[\"消耗\",{\"1\":{\"2621\":1,\"2622\":1}}],[\"消耗400s\",{\"1\":{\"2620\":1}}],[\"消费问题\",{\"0\":{\"1754\":1}}],[\"消费型functional\",{\"1\":{\"978\":1}}],[\"消费型\",{\"1\":{\"974\":1,\"2392\":1}}],[\"消费者只需创建\",{\"1\":{\"448\":1}}],[\"消费者\",{\"0\":{\"447\":1}}],[\"消费者接收消息\",{\"1\":{\"441\":1}}],[\"消费者和生产者直接使用即可\",{\"1\":{\"437\":1}}],[\"消息与缓存\",{\"0\":{\"603\":1}}],[\"消息接收并处理完后\",{\"1\":{\"455\":1}}],[\"消息监听器\",{\"0\":{\"455\":1}}],[\"消息要转换成什么类型\",{\"1\":{\"454\":1}}],[\"消息读取的位置\",{\"1\":{\"454\":1}}],[\"消息内容\",{\"1\":{\"453\":1}}],[\"消息发送的位置\",{\"1\":{\"453\":1}}],[\"消息将会逐条赋值给注解下面方法的参数\",{\"1\":{\"447\":1}}],[\"消息\",{\"1\":{\"299\":1,\"612\":1}}],[\"消息队列rabbitmq依赖\",{\"1\":{\"604\":1}}],[\"消息队列\",{\"0\":{\"436\":1},\"1\":{\"11\":1,\"45\":1}}],[\"队列转发\",{\"1\":{\"455\":1}}],[\"队列名\",{\"1\":{\"453\":1}}],[\"队列和交换机被创建出来\",{\"1\":{\"448\":1}}],[\"队列\",{\"1\":{\"437\":1,\"454\":1}}],[\"若以replicaset的方式登录\",{\"1\":{\"3683\":1}}],[\"若为true\",{\"1\":{\"3673\":1}}],[\"若要返回匹配文档中的所有字段\",{\"1\":{\"3604\":1}}],[\"若要返回集合中的所有文档\",{\"1\":{\"3604\":1}}],[\"若想全部更新\",{\"1\":{\"3597\":1}}],[\"若想实现持久化或分布式集群\",{\"1\":{\"502\":1}}],[\"若同时有几百人甚至几千人在线\",{\"1\":{\"2662\":1}}],[\"若流中元素不足\",{\"1\":{\"2461\":1}}],[\"若\",{\"1\":{\"2389\":1}}],[\"若希望输出数据\",{\"1\":{\"2240\":1}}],[\"若连接失败\",{\"1\":{\"2217\":1}}],[\"若服务器端\",{\"1\":{\"2217\":1}}],[\"若类的实例变量做了修改\",{\"1\":{\"2158\":1}}],[\"若hash表容量小于min\",{\"1\":{\"1928\":1}}],[\"若不调用\",{\"1\":{\"1845\":1}}],[\"若队列中没有同优先级的线程\",{\"1\":{\"1729\":1}}],[\"若jvm中都是守护线程\",{\"1\":{\"1711\":1}}],[\"若某个方法被\",{\"1\":{\"1673\":1}}],[\"若没有异常\",{\"1\":{\"2635\":1}}],[\"若没有指定\",{\"1\":{\"1662\":1}}],[\"若没有给值\",{\"1\":{\"556\":1}}],[\"若一个进程同一时间\",{\"1\":{\"1687\":1}}],[\"若一个\",{\"1\":{\"1653\":1}}],[\"若需要每个枚举值在调用实现的接口方法呈现出不同的行为方式\",{\"1\":{\"1628\":1}}],[\"若枚举类显式的定义了带参数的构造器\",{\"1\":{\"1619\":1}}],[\"若finally中有return\",{\"1\":{\"1591\":1}}],[\"若有效\",{\"1\":{\"2588\":1}}],[\"若有异常\",{\"1\":{\"1591\":1,\"2635\":1}}],[\"若有就加载名为cat的bean\",{\"1\":{\"536\":1}}],[\"若全处理可能会对程序的可读性和运行效率产生影响\",{\"1\":{\"1573\":1}}],[\"若子类重写了父类中的所有的抽象方法后\",{\"1\":{\"1495\":1}}],[\"若缺省该语句\",{\"1\":{\"1336\":1}}],[\"若指定索引处没有值\",{\"1\":{\"1220\":1}}],[\"若已有值\",{\"1\":{\"1220\":1}}],[\"若已知具体的类\",{\"1\":{\"834\":1,\"2266\":1}}],[\"若属性完全相同\",{\"1\":{\"910\":1}}],[\"若无异常\",{\"1\":{\"1591\":1}}],[\"若无\",{\"1\":{\"791\":1}}],[\"若未找到目标字符串\",{\"1\":{\"656\":1}}],[\"若配置文件中没有设置对应的值\",{\"1\":{\"556\":1}}],[\"若环境中有参数指定的bean\",{\"1\":{\"541\":1}}],[\"若参数中的类在环境中不存在\",{\"1\":{\"540\":1}}],[\"若参数中的类在环境中存在\",{\"1\":{\"540\":1}}],[\"若使用实现importselector接口的类\",{\"1\":{\"522\":1}}],[\"若文档存在就更新\",{\"1\":{\"433\":1}}],[\"若文档存在就返回错误\",{\"1\":{\"433\":1}}],[\"若依rouyi\",{\"1\":{\"10\":1}}],[\"我夏天空腹喝凉开水\",{\"1\":{\"3590\":1}}],[\"我\",{\"1\":{\"3482\":1,\"3483\":1}}],[\"我的国籍是\",{\"1\":{\"2255\":1,\"2258\":1}}],[\"我知道了\",{\"1\":{\"2207\":1}}],[\"我知道你是a\",{\"1\":{\"2206\":1}}],[\"我爱n门\",{\"1\":{\"2151\":1}}],[\"我要断开连接了\",{\"1\":{\"2207\":1}}],[\"我要取款\",{\"1\":{\"1500\":1}}],[\"我要插入一个正则表达式的反斜线\",{\"1\":{\"985\":1}}],[\"我现在知道你知道我是a了\",{\"1\":{\"2206\":1}}],[\"我现在\",{\"1\":{\"1282\":1}}],[\"我是中国人\",{\"1\":{\"3482\":1}}],[\"我是一个人\",{\"1\":{\"2255\":1,\"2256\":1,\"2257\":1}}],[\"我是b\",{\"1\":{\"2206\":1}}],[\"我是a\",{\"1\":{\"2206\":1}}],[\"我是\",{\"1\":{\"1282\":1}}],[\"我是jinno我现在12岁\",{\"1\":{\"1282\":1}}],[\"我是jinno我现在11岁\",{\"1\":{\"1282\":1}}],[\"我就给你搞一个druid的数据源对象出来\",{\"1\":{\"543\":1}}],[\"我很酷\",{\"1\":{\"428\":1,\"429\":1}}],[\"我们如果需要查询同时满足两个以上条件\",{\"1\":{\"3616\":1}}],[\"我们分配的时候可以参考以下关系\",{\"1\":{\"3508\":1}}],[\"我们遵循一些原则\",{\"1\":{\"3508\":1}}],[\"我们预期的结果是根据词语分词\",{\"1\":{\"3476\":1}}],[\"我们看看每个分析器会从下面的字符串得到哪些词条\",{\"1\":{\"3465\":1}}],[\"我们查询数据时\",{\"1\":{\"3422\":1}}],[\"我们这个拥有\",{\"1\":{\"3392\":1}}],[\"我们这里采用ca模式\",{\"1\":{\"3293\":1}}],[\"我们的数据都完好无损\",{\"1\":{\"3388\":1}}],[\"我们会先调用\",{\"1\":{\"3006\":1}}],[\"我们真正使用的类是requestfacade类\",{\"1\":{\"2836\":1}}],[\"我们来使用它们\",{\"1\":{\"2830\":1}}],[\"我们只需要将服务器传过来的servletconfig进行返回即可\",{\"1\":{\"2804\":1}}],[\"我们只管用就行\",{\"1\":{\"1812\":1}}],[\"我们并没有创建servlet类的对象\",{\"1\":{\"2783\":1}}],[\"我们并不知道要计算的代码具体是什么代码\",{\"1\":{\"1499\":1}}],[\"我们直接使用即可\",{\"1\":{\"2386\":1}}],[\"我们再调用代理类的方法时就会进行一些附加操作\",{\"1\":{\"2349\":1}}],[\"我们调用哪个类\",{\"1\":{\"2325\":1}}],[\"我们连接数据库时需要进行安全检查\",{\"1\":{\"2321\":1}}],[\"我们无法直接进行访问\",{\"1\":{\"2317\":1}}],[\"我们能够获取\",{\"1\":{\"2310\":1}}],[\"我们就可以查询到结果了\",{\"1\":{\"3422\":1}}],[\"我们就会用这个方法\",{\"1\":{\"2399\":1}}],[\"我们就称为运行时类\",{\"1\":{\"2261\":1}}],[\"我们就需要专业\",{\"1\":{\"3099\":1}}],[\"我们就需要抛出异常\",{\"1\":{\"1607\":1}}],[\"我们就需要对object类中的equals\",{\"1\":{\"1428\":1}}],[\"我们把类当做是对象\",{\"1\":{\"2260\":1}}],[\"我们形象的称之为\",{\"1\":{\"2248\":1}}],[\"我们已经知道\",{\"1\":{\"2111\":1}}],[\"我们操作file类是在内存层面上进行操作的\",{\"1\":{\"2010\":1}}],[\"我们操作f2时\",{\"1\":{\"809\":1}}],[\"我们定义了一个接口\",{\"1\":{\"2321\":1}}],[\"我们定义的方法中\",{\"1\":{\"1995\":1,\"1996\":1}}],[\"我们定义变量时\",{\"1\":{\"1098\":1}}],[\"我们要多很多相似类都定义一个代理类\",{\"1\":{\"2324\":1}}],[\"我们要重写hashcode\",{\"1\":{\"1895\":1}}],[\"我们要想在子类中调用父类中声明的属性\",{\"1\":{\"1381\":1}}],[\"我们通常使用list替代数组\",{\"1\":{\"1858\":1}}],[\"我们通过同步机制\",{\"1\":{\"1756\":1}}],[\"我们通过实例化thread类的子类对象来创建多线程\",{\"1\":{\"1715\":1}}],[\"我们通过将属性设置为私有的\",{\"1\":{\"1304\":1}}],[\"我们也将丢失该节点上的所有副本数据\",{\"1\":{\"3384\":1}}],[\"我们也就只能操作指定类型的数据了\",{\"1\":{\"1821\":1}}],[\"我们也可以手动实现annotation接口来创建自定义注解\",{\"1\":{\"1638\":1}}],[\"我们使用\",{\"1\":{\"3616\":1}}],[\"我们使用类时\",{\"1\":{\"2262\":1}}],[\"我们使用类的成员时是通过具体的对象使用的\",{\"1\":{\"1259\":1}}],[\"我们使用功能泛型通配符\",{\"1\":{\"1997\":1}}],[\"我们使用同步时\",{\"1\":{\"1787\":1}}],[\"我们用thread类创建的其他线程\",{\"1\":{\"1713\":1}}],[\"我们复制文件\",{\"1\":{\"1692\":1}}],[\"我们称之为配置参数\",{\"1\":{\"1645\":1}}],[\"我们选择的异常类型有\",{\"1\":{\"1608\":1}}],[\"我们建议这几个方法使用throws的方式进行处理\",{\"1\":{\"1603\":1}}],[\"我们进行处理的效果是提示用户发生了资源缺失\",{\"1\":{\"1563\":1}}],[\"我们平时说的异常一般指的就是exception\",{\"1\":{\"1561\":1}}],[\"我们常说的异常处理\",{\"1\":{\"1560\":1}}],[\"我们有时候希望无论是否产生了对象或无论产生了多少对象的情况下\",{\"1\":{\"1471\":1}}],[\"我们自己写的java代码编译成的是class文件\",{\"1\":{\"2980\":1}}],[\"我们自己创建的springboot项目\",{\"1\":{\"120\":1}}],[\"我们自定义的类如果使用equals\",{\"1\":{\"1428\":1}}],[\"我们实际执行的是子类重写父类的方法\",{\"1\":{\"1397\":1}}],[\"我们想在子类的方法中调用父类中被重写的方法时\",{\"1\":{\"1382\":1}}],[\"我们习惯省略\",{\"1\":{\"1380\":1}}],[\"我们执行s1\",{\"1\":{\"1376\":1}}],[\"我们都能够获取到\",{\"1\":{\"2317\":1}}],[\"我们都是将对象格式化成json进行传输\",{\"1\":{\"2142\":1}}],[\"我们都选择省略this\",{\"1\":{\"1329\":1}}],[\"我们都将功能\",{\"1\":{\"1253\":1}}],[\"我们必须显式的使用\",{\"1\":{\"1328\":1,\"1329\":1}}],[\"我们必须返回一致的数据类型让前端使用\",{\"1\":{\"643\":1}}],[\"我们创建了类的多个对象\",{\"1\":{\"1475\":2}}],[\"我们创建对象时\",{\"1\":{\"1319\":1}}],[\"我们创建对象时进行的语法其实是调用的构造器\",{\"1\":{\"1315\":1}}],[\"我们创建的对象\",{\"1\":{\"1267\":1}}],[\"我们正确的做法是\",{\"1\":{\"1303\":1}}],[\"我们经常会用到将一个对象作为参数\",{\"1\":{\"1293\":1}}],[\"我们将m\",{\"1\":{\"1292\":1}}],[\"我们赋值即可\",{\"1\":{\"1273\":1}}],[\"我们在搜索的时候输入关键字\",{\"1\":{\"3096\":1}}],[\"我们在page1\",{\"1\":{\"2920\":2}}],[\"我们在servlet中写的代码其实就是对http协议请求的一种响应\",{\"1\":{\"2808\":1,\"2815\":1}}],[\"我们在开发中\",{\"1\":{\"2169\":1}}],[\"我们在开发中使用的mysql数据库和其他的一些常用软件\",{\"1\":{\"36\":1}}],[\"我们在使用的时候\",{\"1\":{\"1996\":1}}],[\"我们在定义数据类型时\",{\"1\":{\"1946\":1}}],[\"我们在重写hashcode\",{\"1\":{\"1899\":1}}],[\"我们在向下转型之前\",{\"1\":{\"1415\":1}}],[\"我们在编译期\",{\"1\":{\"1397\":1}}],[\"我们在类的构造器中\",{\"1\":{\"1330\":1}}],[\"我们在类外部直接访问了类内部的属性\",{\"1\":{\"1303\":1}}],[\"我们在调用局部变量之前\",{\"1\":{\"1273\":1}}],[\"我们需要手动加载专门处理中文的分词器\",{\"1\":{\"3475\":1}}],[\"我们需要根据索引需要确定分片个数\",{\"1\":{\"3370\":1}}],[\"我们需要两个步骤\",{\"1\":{\"2887\":1,\"2893\":1}}],[\"我们需要将查询字符串通过相同的分析过程\",{\"1\":{\"3470\":1}}],[\"我们需要将查询到的结果\",{\"1\":{\"2649\":1}}],[\"我们需要将异常写入日志\",{\"1\":{\"1563\":1}}],[\"我们需要通过一个参数\",{\"1\":{\"2623\":1}}],[\"我们需要一个功能\",{\"1\":{\"2384\":1}}],[\"我们需要一次性创建20个person类的实例\",{\"1\":{\"1266\":1}}],[\"我们需要使用class类的对象拿到想要的内容\",{\"1\":{\"2260\":1}}],[\"我们需要建立符号表\",{\"1\":{\"1703\":1}}],[\"我们需要自己手动的进行资源的释放\",{\"1\":{\"1590\":1}}],[\"我们需要在user类中调用getuser方法获取数据\",{\"1\":{\"1401\":1}}],[\"我们需要对多个对象进行排序\",{\"1\":{\"739\":1}}],[\"我们需要对项目的模块功能分析后\",{\"1\":{\"28\":1}}],[\"我们是通过创建类和方法来完成一些功能的\",{\"1\":{\"1264\":1}}],[\"我们优先选择使用switch\",{\"1\":{\"1177\":1}}],[\"我们写分支结构时\",{\"1\":{\"1177\":1}}],[\"我们知道\",{\"1\":{\"1121\":1}}],[\"我们输入的字符都是通过转码变成二进制让计算机识别的\",{\"1\":{\"1103\":1}}],[\"我们一定会直接或间接的调用其父类的构造器\",{\"1\":{\"1392\":1}}],[\"我们一般都将属性定义为私有的\",{\"1\":{\"1312\":1}}],[\"我们一般使用string作为key\",{\"1\":{\"1934\":1}}],[\"我们一般使用时选择double\",{\"1\":{\"1094\":1}}],[\"我们一般使用第三种\",{\"1\":{\"728\":1}}],[\"我们一次只能读1个字符\",{\"1\":{\"815\":1}}],[\"我们主要用该对象进行日期时间的\",{\"1\":{\"728\":1}}],[\"我们主要来分析在工作中经常遇到的三套环境\",{\"1\":{\"35\":1}}],[\"我们采用jdk8新增的时间api\",{\"1\":{\"705\":1}}],[\"我们可以进行修改\",{\"1\":{\"3517\":1}}],[\"我们可以发送请求到集群中的任一节点\",{\"1\":{\"3403\":1}}],[\"我们可以像springboot一样\",{\"1\":{\"2998\":1}}],[\"我们可以直接查看javaee的api文档中关于servletrequest和httpservletrequest的接口文档\",{\"1\":{\"2837\":1}}],[\"我们可以利用函数式接口\",{\"1\":{\"2384\":1}}],[\"我们可以利用反射机制\",{\"1\":{\"2247\":1}}],[\"我们可以更加灵活和统一的处理众多的方法\",{\"1\":{\"2325\":1}}],[\"我们可以通过不同的方式来获取此运行时类\",{\"1\":{\"2265\":1}}],[\"我们可以通过这个对象看到类的结构\",{\"1\":{\"2248\":1}}],[\"我们可以通过定义一个类\",{\"1\":{\"526\":1}}],[\"我们可以访问\",{\"1\":{\"2236\":1}}],[\"我们可以这样写\",{\"1\":{\"2164\":1}}],[\"我们可以用通配符解决这个问题\",{\"1\":{\"1987\":1}}],[\"我们可以用this来区分属性和局部变量\",{\"1\":{\"1331\":1}}],[\"我们可以考虑使用this充当同步监视器\",{\"1\":{\"1759\":1}}],[\"我们可以将其作为一个类\",{\"1\":{\"1500\":1}}],[\"我们可以到\",{\"1\":{\"1429\":1}}],[\"我们可以在反射中解析并使用\",{\"1\":{\"1679\":1}}],[\"我们可以在子类的构造器中显式的使用\",{\"1\":{\"1384\":1}}],[\"我们可以在子类的方法或构造器中\",{\"1\":{\"1380\":1}}],[\"我们可以在方法中通过方法体来验证和保护要访问的数据\",{\"1\":{\"1303\":1}}],[\"我们可以使用ﬁndone命令来实现\",{\"1\":{\"3606\":1}}],[\"我们可以使用class类的实例\",{\"1\":{\"2262\":1}}],[\"我们可以使用\",{\"1\":{\"1329\":1}}],[\"我们可以看成是一维数组array1又作为另一个一维数组array2的元素而存在\",{\"1\":{\"1230\":1}}],[\"我们可以安装在本地\",{\"1\":{\"36\":1}}],[\"我们启动一个web程序\",{\"1\":{\"504\":1}}],[\"我们做的程序如果需要被监控\",{\"1\":{\"317\":1}}],[\"我们不应该把清晨浪费在手机上\",{\"1\":{\"3590\":1}}],[\"我们不知道要创建什么对象\",{\"1\":{\"2253\":1}}],[\"我们不用为每一个泛型都定义一个同样的方法了\",{\"1\":{\"1996\":1}}],[\"我们不妨将此方法声明同步的\",{\"1\":{\"1765\":1}}],[\"我们不手动调用\",{\"1\":{\"1388\":1}}],[\"我们不能直接访问该类中的非静态成员\",{\"1\":{\"1541\":1}}],[\"我们不能为每一种数据库都定义一套方法\",{\"1\":{\"1401\":1}}],[\"我们不能使用传统的+\",{\"1\":{\"778\":1}}],[\"我们不能再原始配置文件上修改\",{\"1\":{\"266\":1}}],[\"我们不会去直接使用节点流\",{\"1\":{\"2039\":1,\"2043\":1}}],[\"我们不会在spring\",{\"1\":{\"352\":1}}],[\"我们不会使用这套环境了\",{\"1\":{\"36\":1}}],[\"我们作为软件开发人员\",{\"1\":{\"36\":1}}],[\"写索引的效率就越慢\",{\"1\":{\"3518\":1}}],[\"写流程\",{\"0\":{\"3406\":1}}],[\"写两份几乎一样的代码\",{\"1\":{\"2861\":1}}],[\"写操作必须在主分片上面完成之后才能被复制到相关的副本分片\",{\"1\":{\"3406\":1}}],[\"写操作\",{\"0\":{\"3407\":1,\"3417\":1},\"1\":{\"2217\":1}}],[\"写成8个无符号整数\",{\"1\":{\"2181\":1}}],[\"写完后\",{\"1\":{\"2138\":1}}],[\"写数据\",{\"1\":{\"2071\":1}}],[\"写文件\",{\"1\":{\"2021\":1,\"2129\":1}}],[\"写文档注释时要按照一定的格式来写\",{\"1\":{\"1056\":1}}],[\"写\",{\"1\":{\"1704\":1,\"2040\":2,\"2070\":1,\"2137\":1}}],[\"写在配置文件的url后面\",{\"1\":{\"2623\":1}}],[\"写在方法的声明处\",{\"1\":{\"1598\":1}}],[\"写在哪是一个问题\",{\"1\":{\"354\":1}}],[\"写一些执行的代码\",{\"1\":{\"1524\":1}}],[\"写入关注的写入\",{\"1\":{\"3641\":1}}],[\"写入到\",{\"1\":{\"3527\":1}}],[\"写入速度\",{\"1\":{\"3512\":1}}],[\"写入优化\",{\"0\":{\"3512\":1}}],[\"写入磁盘生效的过程如下\",{\"1\":{\"3449\":1}}],[\"写入单个大的倒排索引允许数据被压缩\",{\"1\":{\"3441\":1}}],[\"写入finally语句块\",{\"1\":{\"1783\":1}}],[\"写入byte\",{\"1\":{\"825\":2}}],[\"写入字节\",{\"1\":{\"825\":1}}],[\"写入字符串\",{\"1\":{\"824\":1}}],[\"写入字符数组\",{\"1\":{\"824\":1}}],[\"写入string的一部分\",{\"1\":{\"824\":1}}],[\"写入string\",{\"1\":{\"824\":1}}],[\"写入char\",{\"1\":{\"824\":3}}],[\"写入cbuf或str的某一部分\",{\"1\":{\"824\":1}}],[\"写入unicode\",{\"1\":{\"824\":2}}],[\"写入len个字符\",{\"1\":{\"824\":1}}],[\"写入\",{\"1\":{\"824\":1,\"2134\":2}}],[\"写入0~255字节数据\",{\"1\":{\"825\":1}}],[\"写入0\",{\"1\":{\"824\":1}}],[\"写入指定文件名\",{\"1\":{\"822\":2,\"823\":2}}],[\"写入指定文件\",{\"1\":{\"822\":2,\"823\":2}}],[\"写入哪个类就能创建哪个类的bean\",{\"1\":{\"523\":1}}],[\"写出需要的功能\",{\"1\":{\"2381\":1}}],[\"写出流\",{\"1\":{\"2217\":1}}],[\"写出数据\",{\"1\":{\"2081\":1}}],[\"写出速度\",{\"1\":{\"2073\":1}}],[\"写出的操作\",{\"1\":{\"2064\":1}}],[\"写出\",{\"0\":{\"2077\":1,\"2079\":1},\"1\":{\"820\":1,\"2069\":1,\"2081\":2,\"2084\":1,\"2123\":1}}],[\"写业务代码\",{\"1\":{\"586\":1}}],[\"写xml配置扫描包太low了\",{\"1\":{\"513\":1}}],[\"写法比resthighlevelclient更加简洁\",{\"1\":{\"419\":1}}],[\"转移\",{\"1\":{\"3742\":1}}],[\"转化成\",{\"1\":{\"3464\":1}}],[\"转化为链表\",{\"1\":{\"1928\":1}}],[\"转化为红黑树\",{\"1\":{\"1928\":1}}],[\"转发访问资源\",{\"1\":{\"2950\":1}}],[\"转发\",{\"1\":{\"2915\":1,\"2950\":1}}],[\"转发是一次请求\",{\"1\":{\"2913\":1}}],[\"转发只能访问当前服务器下的资源\",{\"1\":{\"2913\":1}}],[\"转发地址栏路径不变\",{\"1\":{\"2913\":1}}],[\"转发的特点\",{\"1\":{\"2913\":1}}],[\"转发时\",{\"1\":{\"2902\":1}}],[\"转发时共享数据\",{\"0\":{\"2901\":1}}],[\"转发与重定向\",{\"0\":{\"2897\":1}}],[\"转发到下一个消息队列中\",{\"1\":{\"455\":1}}],[\"转变为以时间驱动的\",{\"1\":{\"2351\":1}}],[\"转成字符流操作更高效\",{\"1\":{\"2091\":1}}],[\"转换流的类\",{\"0\":{\"2090\":1}}],[\"转换流也是一种处理流\",{\"1\":{\"2089\":1}}],[\"转换流介绍\",{\"0\":{\"2088\":1}}],[\"转换流\",{\"0\":{\"2087\":1},\"1\":{\"2118\":1}}],[\"转换后可以进行运算了\",{\"1\":{\"1442\":1}}],[\"转换成了65\",{\"1\":{\"813\":1}}],[\"转换成新的表示形式\",{\"1\":{\"709\":1}}],[\"转换成字符串格式\",{\"1\":{\"379\":1}}],[\"转型必须有父子关系\",{\"0\":{\"1420\":1}}],[\"转型的注意事项\",{\"0\":{\"1417\":1}}],[\"转型的条件\",{\"0\":{\"1412\":1}}],[\"转型\",{\"0\":{\"1410\":1}}],[\"转码\",{\"1\":{\"1103\":1,\"2091\":1}}],[\"转码就需要用到字符集了\",{\"1\":{\"1103\":1}}],[\"转义字符\",{\"1\":{\"1102\":1}}],[\"转string\",{\"1\":{\"673\":1}}],[\"转为指定类型的数组\",{\"0\":{\"918\":1}}],[\"转为object类型的数组\",{\"0\":{\"917\":1}}],[\"转为其他六种基本数据类型\",{\"1\":{\"772\":1}}],[\"转为string\",{\"1\":{\"673\":1}}],[\"转为string是将所有char连接在一起\",{\"1\":{\"672\":1}}],[\"转为httphost对象数组\",{\"1\":{\"418\":1}}],[\"转不同的数据类型\",{\"1\":{\"671\":1}}],[\"推迟分片分配\",{\"0\":{\"3509\":1}}],[\"推出了elasticsearch\",{\"1\":{\"414\":1}}],[\"推荐做法\",{\"1\":{\"3276\":1}}],[\"推荐update\",{\"1\":{\"2750\":2}}],[\"推荐的unicode编码是utf\",{\"1\":{\"2111\":1}}],[\"推荐这种\",{\"1\":{\"388\":1,\"2591\":1}}],[\"推荐\",{\"0\":{\"1845\":1,\"2740\":1},\"1\":{\"139\":1,\"2597\":1,\"2704\":1}}],[\"模块负责的\",{\"1\":{\"3526\":1}}],[\"模块目录\",{\"1\":{\"3106\":1,\"3289\":1,\"3320\":1}}],[\"模块目录下的\",{\"1\":{\"2759\":1}}],[\"模块\",{\"1\":{\"2732\":1}}],[\"模块名\",{\"1\":{\"2731\":1}}],[\"模型的原生支持\",{\"1\":{\"3114\":1}}],[\"模型\",{\"1\":{\"3011\":1}}],[\"模型过于理想化\",{\"1\":{\"2174\":1}}],[\"模型层\",{\"0\":{\"1538\":1}}],[\"模拟网络异常\",{\"1\":{\"2635\":1}}],[\"模拟火车站售票程序\",{\"1\":{\"1755\":1}}],[\"模拟usb\",{\"0\":{\"1512\":1}}],[\"模板方法\",{\"1\":{\"1500\":1}}],[\"模板方法设计模式\",{\"0\":{\"1498\":1}}],[\"模算术\",{\"1\":{\"777\":1}}],[\"模糊查询\",{\"0\":{\"3238\":1},\"1\":{\"410\":1,\"3240\":1}}],[\"模式器\",{\"1\":{\"993\":1}}],[\"模式修饰符\",{\"1\":{\"986\":1}}],[\"模式\",{\"0\":{\"3481\":1},\"1\":{\"294\":1,\"2489\":1,\"3011\":3,\"3012\":2}}],[\"qq\",{\"1\":{\"2612\":1,\"2686\":1}}],[\"qw\",{\"1\":{\"630\":1,\"631\":3}}],[\"qualified\",{\"1\":{\"3029\":1}}],[\"quartz\",{\"0\":{\"495\":1}}],[\"queue2\",{\"1\":{\"447\":1}}],[\"queue1\",{\"1\":{\"447\":1}}],[\"queues\",{\"1\":{\"447\":2}}],[\"queue\",{\"1\":{\"444\":2,\"452\":2,\"455\":2,\"903\":1,\"1830\":2,\"3278\":1,\"3279\":1,\"3280\":1,\"3378\":1,\"3380\":1}}],[\"querybuilders对象调用matchphrasequery方法可以创建创建高亮查询构造器\",{\"1\":{\"3252\":1}}],[\"querybuilders对象调用fuzzyquery方法可以进行模糊查询\",{\"1\":{\"3239\":1}}],[\"querybuilders\",{\"1\":{\"3226\":1,\"3227\":1,\"3228\":1,\"3230\":2,\"3231\":3,\"3233\":1,\"3234\":1,\"3239\":1,\"3240\":1,\"3242\":1,\"3244\":1,\"3252\":1,\"3253\":1}}],[\"querystring\",{\"1\":{\"2846\":2}}],[\"queryrunner类的主要方法\",{\"1\":{\"2683\":1}}],[\"queryrunner类提供了两个构造器\",{\"1\":{\"2683\":1}}],[\"queryrunner\",{\"0\":{\"2683\":1},\"1\":{\"2681\":1,\"2686\":2,\"2687\":2,\"2688\":2,\"2689\":2,\"2690\":2,\"2691\":2}}],[\"queryforcustomers\",{\"1\":{\"2600\":1,\"2601\":2}}],[\"querywrapper对象作为参数\",{\"1\":{\"631\":1}}],[\"querywrapper<>\",{\"1\":{\"630\":1,\"631\":1}}],[\"querywrapper<book>\",{\"1\":{\"630\":1,\"631\":1}}],[\"querywrapper类是用于封装查询条件的\",{\"1\":{\"630\":1}}],[\"querywrapper\",{\"0\":{\"630\":1}}],[\"query\",{\"1\":{\"404\":5,\"406\":8,\"407\":7,\"410\":4,\"2683\":1,\"2688\":1,\"2689\":1,\"2690\":1,\"2691\":2,\"3152\":1,\"3153\":2,\"3162\":1,\"3165\":1,\"3167\":1,\"3169\":1,\"3172\":1,\"3182\":1,\"3185\":1,\"3193\":1,\"3226\":1,\"3227\":1,\"3228\":1,\"3230\":1,\"3231\":1,\"3233\":1,\"3234\":1,\"3236\":1,\"3237\":1,\"3239\":1,\"3240\":1,\"3242\":1,\"3244\":1,\"3252\":1,\"3253\":1,\"3594\":2,\"3604\":1,\"3609\":2,\"3632\":2}}],[\"query对象\",{\"1\":{\"404\":1,\"410\":1}}],[\"q1\",{\"1\":{\"444\":3}}],[\"qos\",{\"1\":{\"308\":14}}],[\"更改\",{\"1\":{\"3641\":1}}],[\"更改数据库通用的增删改方法\",{\"0\":{\"2634\":1}}],[\"更直观\",{\"1\":{\"3633\":1}}],[\"更多复杂查询\",{\"0\":{\"3612\":1}}],[\"更多网络编程内容详见\",{\"1\":{\"2170\":1}}],[\"更大的指针在主内存和缓存器\",{\"1\":{\"3504\":1}}],[\"更糟糕的是\",{\"1\":{\"3504\":1}}],[\"更小的内存占用\",{\"1\":{\"3477\":1}}],[\"更重要的是\",{\"1\":{\"3456\":1}}],[\"更接近人的思维\",{\"1\":{\"3436\":1}}],[\"更好的做法是轮询集群中所有的节点\",{\"1\":{\"3405\":1}}],[\"更不能热部署\",{\"1\":{\"2762\":1}}],[\"更不用说进行运算了\",{\"1\":{\"777\":1}}],[\"更简单\",{\"1\":{\"2754\":1}}],[\"更简化的编译运行\",{\"0\":{\"2521\":1}}],[\"更快的系统反应速度\",{\"1\":{\"2667\":1}}],[\"更有利于代码的维护和升级\",{\"1\":{\"2643\":1}}],[\"更灵活安全\",{\"1\":{\"2591\":1}}],[\"更灵活的代码\",{\"1\":{\"2359\":1}}],[\"更安全和高效\",{\"1\":{\"2560\":1}}],[\"更何况强转成person\",{\"1\":{\"1419\":1}}],[\"更新指定的字段\",{\"1\":{\"3596\":1}}],[\"更新指定字段\",{\"0\":{\"3596\":1}}],[\"更新选项\",{\"1\":{\"3594\":1}}],[\"更新和删除文档的流程\",{\"0\":{\"3528\":1}}],[\"更新和删除的时候\",{\"1\":{\"3360\":1}}],[\"更新将会失败\",{\"1\":{\"3495\":1}}],[\"更新控制\",{\"0\":{\"3451\":1}}],[\"更新最终要写入磁盘后才能生效\",{\"1\":{\"3449\":1}}],[\"更新生效需要的时间更长\",{\"1\":{\"3449\":1}}],[\"更新生效的流程\",{\"0\":{\"3449\":1}}],[\"更新生效\",{\"1\":{\"3448\":1}}],[\"更新的生效\",{\"0\":{\"3448\":1}}],[\"更新的策略\",{\"1\":{\"3442\":1}}],[\"更新是有延迟的\",{\"1\":{\"3444\":1}}],[\"更新过程如下\",{\"1\":{\"3444\":1}}],[\"更新与搜索\",{\"0\":{\"3438\":1}}],[\"更新流程\",{\"0\":{\"3412\":1}}],[\"更新或删除时\",{\"1\":{\"3496\":1}}],[\"更新或删除\",{\"1\":{\"2683\":1}}],[\"更新某表中的一个数据\",{\"1\":{\"2582\":1}}],[\"更新操作示例\",{\"0\":{\"2577\":1}}],[\"更新时间\",{\"1\":{\"590\":1}}],[\"更新文档\",{\"0\":{\"3594\":1},\"1\":{\"433\":1}}],[\"更新了一次就变成了2\",{\"1\":{\"429\":1}}],[\"更新\",{\"0\":{\"429\":1,\"3413\":1},\"1\":{\"2683\":1,\"3447\":1}}],[\"更新多个文档\",{\"0\":{\"407\":1}}],[\"更新对象\",{\"1\":{\"406\":1}}],[\"更新一个文档结合了先前说明的读取和写入流程\",{\"1\":{\"3412\":1}}],[\"更新一个文档\",{\"0\":{\"406\":1},\"1\":{\"402\":1}}],[\"更加易读\",{\"1\":{\"299\":1}}],[\"改配置是以集群为前提配置的\",{\"1\":{\"3355\":1}}],[\"改为5分钟\",{\"1\":{\"3509\":1}}],[\"改为其他方式解析\",{\"1\":{\"2889\":1}}],[\"改为80就不用输入端口号了\",{\"1\":{\"2750\":1}}],[\"改成文件\",{\"1\":{\"2121\":1}}],[\"改进的方案\",{\"1\":{\"1770\":1}}],[\"改善程序结构\",{\"1\":{\"1693\":1}}],[\"改变流程\",{\"0\":{\"3408\":1}}],[\"改变线程的优先级\",{\"1\":{\"1735\":1}}],[\"改变bigdecimal值的精度时\",{\"1\":{\"783\":1}}],[\"改变bigdecimal值的精度\",{\"1\":{\"783\":1}}],[\"改变stringbuffer内容的方法\",{\"1\":{\"697\":1}}],[\"改\",{\"1\":{\"402\":1,\"3698\":1}}],[\"改完程序需要到浏览器上去调试\",{\"1\":{\"191\":1}}],[\"删改\",{\"0\":{\"806\":1}}],[\"删\",{\"1\":{\"402\":1,\"3698\":1}}],[\"删除lock文件\",{\"1\":{\"3756\":1}}],[\"删除用户\",{\"0\":{\"3713\":1}}],[\"删除指定数据\",{\"0\":{\"3601\":1}}],[\"删除指定位置的内容\",{\"1\":{\"701\":1}}],[\"删除集合\",{\"0\":{\"3582\":1},\"1\":{\"3704\":1}}],[\"删除集合中的元素\",{\"1\":{\"926\":1,\"1848\":1}}],[\"删除和更新也都是写操作\",{\"1\":{\"3528\":1}}],[\"删除词条\",{\"1\":{\"3464\":1}}],[\"删除节点等\",{\"1\":{\"3375\":1}}],[\"删除之前生成的目录\",{\"1\":{\"3301\":1}}],[\"删除数量\",{\"1\":{\"3154\":1}}],[\"删除数组时\",{\"1\":{\"1227\":1}}],[\"删除不存在的文档\",{\"0\":{\"3151\":1}}],[\"删除不存在的索引\",{\"1\":{\"3130\":1}}],[\"删除示例\",{\"0\":{\"3148\":1}}],[\"删除shopping索引\",{\"1\":{\"3130\":1}}],[\"删除某个索引\",{\"1\":{\"3128\":1}}],[\"删除某表中的1个数据\",{\"1\":{\"2582\":1}}],[\"删除索引\",{\"0\":{\"3128\":1,\"3212\":1},\"1\":{\"3212\":1,\"3375\":1}}],[\"删除cookie信息\",{\"1\":{\"3053\":1}}],[\"删除pom\",{\"0\":{\"2738\":1}}],[\"删除即为卸载\",{\"1\":{\"2701\":1}}],[\"删除了\",{\"1\":{\"2687\":1}}],[\"删除成功\",{\"1\":{\"2657\":1}}],[\"删除表中的一条记录\",{\"1\":{\"2655\":1,\"2656\":1}}],[\"删除blob类型的字段\",{\"1\":{\"2612\":1}}],[\"删除一个文件\",{\"1\":{\"2168\":1}}],[\"删除性能\",{\"1\":{\"1883\":1}}],[\"删除操作是否成功\",{\"1\":{\"3212\":1}}],[\"删除操作\",{\"0\":{\"3447\":1},\"1\":{\"1861\":1}}],[\"删除的文件不存在\",{\"1\":{\"810\":1}}],[\"删除广义文件\",{\"1\":{\"810\":1}}],[\"删除application\",{\"1\":{\"583\":1}}],[\"删除文档是根据文档的\",{\"1\":{\"3147\":1}}],[\"删除文档\",{\"0\":{\"3147\":1,\"3218\":1,\"3599\":1},\"1\":{\"433\":1,\"3147\":1,\"3218\":1,\"3221\":1}}],[\"删除要指定索引和文档id\",{\"1\":{\"431\":1}}],[\"删除index\",{\"0\":{\"425\":1}}],[\"删除时需要依据该查询结果\",{\"1\":{\"404\":1}}],[\"删除配置文件中所有的日志配置\",{\"1\":{\"307\":1}}],[\"删除日志配置\",{\"1\":{\"307\":1}}],[\"删除掉即可\",{\"1\":{\"166\":1}}],[\"删除\",{\"0\":{\"431\":1,\"2687\":1},\"1\":{\"54\":3,\"614\":1,\"786\":1,\"1822\":1,\"2009\":1,\"3447\":2}}],[\"增删改查可以添加很多条件\",{\"1\":{\"3550\":1}}],[\"增强了页面缓存的性能\",{\"1\":{\"3114\":1}}],[\"增强了对文件处理和文件系统特性的支持\",{\"1\":{\"2162\":1}}],[\"增强for循环\",{\"0\":{\"1855\":1}}],[\"增强for循环中\",{\"1\":{\"1853\":1}}],[\"增强\",{\"0\":{\"1849\":1}}],[\"增强代码的可维护性\",{\"1\":{\"1305\":1}}],[\"增改集合\",{\"1\":{\"960\":1}}],[\"增改元素\",{\"1\":{\"959\":1}}],[\"增加参数值意味着文件缓存系统中可能需要存储更多的数据\",{\"1\":{\"3517\":1}}],[\"增加节点不会凭空增加副本数量\",{\"1\":{\"3391\":1}}],[\"增加节点数量\",{\"1\":{\"3389\":1}}],[\"增加对自然语言处理\",{\"1\":{\"3114\":1}}],[\"增加了\",{\"1\":{\"1830\":1}}],[\"增加了对元数据\",{\"1\":{\"1634\":1}}],[\"增加可读性\",{\"1\":{\"1053\":1}}],[\"增加日期时间\",{\"1\":{\"721\":1}}],[\"增加\",{\"1\":{\"623\":1,\"3513\":1}}],[\"增\",{\"1\":{\"402\":1}}],[\"监听端口\",{\"1\":{\"3268\":1,\"3269\":1,\"3270\":1,\"3271\":1}}],[\"监听某个对象在session中的序列化与反序列化\",{\"1\":{\"2969\":1}}],[\"监听某个对象在session域中的创建与移除\",{\"1\":{\"2968\":1}}],[\"监听httpsession中属性的创建\",{\"1\":{\"2966\":1}}],[\"监听httpsession对象的创建与销毁\",{\"1\":{\"2963\":1}}],[\"监听servletrequest中属性的创建\",{\"1\":{\"2967\":1}}],[\"监听servletrequest对象的创建与销毁\",{\"1\":{\"2964\":1}}],[\"监听servletcontext中属性的创建\",{\"1\":{\"2965\":1}}],[\"监听servletcontext对象的创建与销毁\",{\"1\":{\"2962\":1}}],[\"监听器是通过事件自动触发的\",{\"1\":{\"2975\":1}}],[\"监听器触发机制\",{\"0\":{\"2975\":1}}],[\"监听器的使用步骤\",{\"0\":{\"2971\":1}}],[\"监听器列表\",{\"0\":{\"2961\":1}}],[\"监听器分类\",{\"0\":{\"2960\":1}}],[\"监听器概念\",{\"0\":{\"2958\":1}}],[\"监听器采用的就是观察者模式\",{\"1\":{\"2957\":1}}],[\"监听器介绍\",{\"0\":{\"2956\":1}}],[\"监听接受客户端的请求\",{\"1\":{\"2225\":1}}],[\"监听连接请求\",{\"1\":{\"2221\":2}}],[\"监听指定位置\",{\"1\":{\"455\":1}}],[\"监听消息\",{\"0\":{\"447\":1}}],[\"监听mongodb保存数据\",{\"1\":{\"401\":1}}],[\"监控统计用的filter\",{\"1\":{\"2674\":1}}],[\"监控类任务和定时触发的活动等\",{\"1\":{\"490\":1}}],[\"监控测试\",{\"1\":{\"345\":1}}],[\"监控平台中显示的信息实际上是通过对被监控的应用发送请求得到的\",{\"1\":{\"341\":1}}],[\"监控中显示的信息实际上是通过发送\",{\"1\":{\"341\":1}}],[\"监控原理\",{\"0\":{\"340\":1}}],[\"监控信息说明\",{\"0\":{\"328\":1}}],[\"监控就是要持续的进行实时监控\",{\"1\":{\"319\":1}}],[\"监控程序必须具有主动发起请求获取被监控服务信息的能力\",{\"1\":{\"315\":1}}],[\"监控分为实施监控的项目\",{\"1\":{\"314\":1}}],[\"监控的时候可以通过名字来区分开来\",{\"1\":{\"2674\":1}}],[\"监控的实施方式\",{\"0\":{\"314\":1}}],[\"监控的内容\",{\"0\":{\"313\":1}}],[\"监控系统运行情况\",{\"1\":{\"313\":1}}],[\"监控具体的功能隐患\",{\"1\":{\"313\":1}}],[\"监控日志\",{\"1\":{\"313\":1}}],[\"监控服务是独立的spring\",{\"1\":{\"314\":1}}],[\"监控服务运行指标\",{\"1\":{\"313\":2}}],[\"监控服务状态是否宕机\",{\"1\":{\"313\":1}}],[\"监控介绍\",{\"0\":{\"311\":1}}],[\"监控开发的文件\",{\"1\":{\"180\":1}}],[\"监控\",{\"0\":{\"310\":1},\"1\":{\"45\":1,\"2957\":1}}],[\"缺少的内容\",{\"0\":{\"2768\":1}}],[\"缺省启用公平锁\",{\"1\":{\"2674\":1}}],[\"缺省使用8192个字节的缓冲区\",{\"1\":{\"2074\":1}}],[\"缺省\",{\"1\":{\"1270\":1,\"1273\":1,\"1277\":1,\"1309\":1,\"1310\":2,\"1460\":1,\"2674\":1}}],[\"缺省数据\",{\"0\":{\"400\":1}}],[\"缺点\",{\"0\":{\"2324\":1,\"2390\":1},\"1\":{\"289\":1,\"1490\":2,\"1776\":1,\"2716\":1}}],[\"必备\",{\"1\":{\"3020\":1}}],[\"必备条件有三个\",{\"1\":{\"2540\":1}}],[\"必定会传入一个servletconfig对象\",{\"1\":{\"2804\":1}}],[\"必须使\",{\"1\":{\"3711\":1}}],[\"必须使用函数numberint\",{\"1\":{\"3588\":1}}],[\"必须使用在同步代码块或同步方法中\",{\"1\":{\"1803\":1}}],[\"必须使用try\",{\"1\":{\"1603\":1}}],[\"必须使用较大的数据类型进行接收\",{\"1\":{\"1112\":1}}],[\"必须使用单引号\",{\"1\":{\"1104\":1}}],[\"必须全部是小写字母\",{\"1\":{\"3360\":1}}],[\"必须保证kibana的版本与es的版本完全一致\",{\"1\":{\"3351\":1}}],[\"必须保证该文件已存在\",{\"1\":{\"2045\":1}}],[\"必须包含当前节点\",{\"1\":{\"3269\":1}}],[\"必须且只能在第一个启动的节点处配置\",{\"1\":{\"3268\":1}}],[\"必须不\",{\"1\":{\"3169\":1,\"3230\":1}}],[\"必须\",{\"1\":{\"3169\":1,\"3230\":1}}],[\"必须heima开头后跟\",{\"1\":{\"3029\":1}}],[\"必须出现\",{\"1\":{\"3029\":1}}],[\"必须出现1次或多次\",{\"1\":{\"3025\":1}}],[\"必须设置\",{\"1\":{\"3025\":1}}],[\"必须进行放行\",{\"1\":{\"2946\":1}}],[\"必须要加\",{\"1\":{\"2819\":1}}],[\"必须要对这一异常进行处理\",{\"1\":{\"2238\":1}}],[\"必须实现servlet接口并复写其方法\",{\"1\":{\"2786\":1}}],[\"必须配置大于0\",{\"1\":{\"2674\":1}}],[\"必须创建该类的一个实例对象后\",{\"1\":{\"1541\":1}}],[\"必须返回是\",{\"1\":{\"1428\":1}}],[\"必须也是double\",{\"1\":{\"1373\":1}}],[\"必须借助父类的getxxx\",{\"1\":{\"1367\":1}}],[\"必须在主线程中创建新的线程对象\",{\"1\":{\"1749\":1}}],[\"必须在枚举类的第一行声明枚举类对象\",{\"1\":{\"1625\":1}}],[\"必须在对象创建前初始化\",{\"1\":{\"1352\":1}}],[\"必须在方法声明时\",{\"1\":{\"1277\":1}}],[\"必须添加this来表明该变量是类的成员变量\",{\"1\":{\"1332\":1}}],[\"必须声明在子类构造器的首行\",{\"1\":{\"1385\":1}}],[\"必须声明在当前构造器的首行\",{\"1\":{\"1330\":1}}],[\"必须声明在末尾\",{\"1\":{\"1295\":1}}],[\"必须一样\",{\"1\":{\"1317\":1}}],[\"必须用int类型接收\",{\"1\":{\"1115\":1}}],[\"必须有登录且必须登录用户有对admin操作权限才可以\",{\"1\":{\"3721\":1}}],[\"必须有数据才行\",{\"1\":{\"3133\":1}}],[\"必须有小数点\",{\"1\":{\"1093\":1}}],[\"必须有main方法\",{\"1\":{\"1045\":1}}],[\"必须以\",{\"1\":{\"1088\":1}}],[\"必须首先将指定为字符串的正则表达式编译为此类的实例\",{\"1\":{\"987\":1}}],[\"必须注册到bean\",{\"1\":{\"546\":1}}],[\"必须是从localhost登陆的\",{\"1\":{\"3721\":1}}],[\"必须是在admin库下执行该关闭服务命令\",{\"1\":{\"3721\":1}}],[\"必须是\",{\"1\":{\"398\":1}}],[\"必学\",{\"1\":{\"11\":1}}],[\"建立的索引是否有效\",{\"1\":{\"3632\":1}}],[\"建立的索引是否唯一\",{\"1\":{\"3625\":1}}],[\"建立了索引\",{\"1\":{\"3097\":1}}],[\"建立数据包\",{\"1\":{\"2230\":1}}],[\"建立发送端\",{\"1\":{\"2230\":1}}],[\"建立完善的父子关系\",{\"1\":{\"162\":1}}],[\"建议包含主机信息\",{\"1\":{\"3355\":1}}],[\"建议使用url编码存储\",{\"1\":{\"3054\":1}}],[\"建议使用setproperty\",{\"1\":{\"1916\":1}}],[\"建议平时写代码时\",{\"1\":{\"2987\":1}}],[\"建议直接改成\",{\"1\":{\"2749\":1}}],[\"建议配置为true\",{\"1\":{\"2674\":1}}],[\"建议配置下\",{\"1\":{\"2674\":1}}],[\"建议\",{\"1\":{\"1968\":1,\"3020\":1}}],[\"建议开发中使用带参的构造器\",{\"1\":{\"1868\":1}}],[\"建议也根据提示安装jre\",{\"1\":{\"1027\":1}}],[\"建议用注解的方式加sql\",{\"1\":{\"622\":1}}],[\"建议统一加该注解\",{\"1\":{\"395\":1}}],[\"操作方式\",{\"0\":{\"3752\":1}}],[\"操作方式一样\",{\"1\":{\"475\":1}}],[\"操作副本集\",{\"0\":{\"3676\":1}}],[\"操作前必须初始化副本集才行\",{\"1\":{\"3660\":1}}],[\"操作符进行关联\",{\"1\":{\"3616\":1}}],[\"操作符将条件进行关联\",{\"1\":{\"3616\":1}}],[\"操作的一直都是主节点\",{\"1\":{\"3683\":1}}],[\"操作的具体流程\",{\"0\":{\"3410\":1,\"3413\":1}}],[\"操作的字段\",{\"1\":{\"3248\":1,\"3250\":1}}],[\"操作的是原来的f1\",{\"1\":{\"809\":1}}],[\"操作名\",{\"1\":{\"3248\":1,\"3250\":1}}],[\"操作步骤和批量添加类似\",{\"1\":{\"3221\":1}}],[\"操作都会重新构建索引\",{\"1\":{\"3097\":1}}],[\"操作blob\",{\"0\":{\"2607\":1}}],[\"操作和访问数据库\",{\"0\":{\"2554\":1}}],[\"操作是延迟执行的\",{\"1\":{\"2441\":1}}],[\"操作是否成功\",{\"1\":{\"646\":1}}],[\"操作person私有成员\",{\"0\":{\"2258\":1}}],[\"操作person\",{\"0\":{\"2257\":1}}],[\"操作流程\",{\"1\":{\"2092\":1}}],[\"操作二进制字节\",{\"1\":{\"2023\":1}}],[\"操作原来泛型位置的结构必须与指定的泛型类型一致\",{\"1\":{\"1969\":1}}],[\"操作同步代码时\",{\"1\":{\"1776\":1}}],[\"操作共享数据的代码\",{\"1\":{\"1759\":2}}],[\"操作数据\",{\"0\":{\"1538\":1}}],[\"操作数组的工具类\",{\"1\":{\"1247\":1}}],[\"操作时操作jdbc接口里的方法\",{\"1\":{\"1513\":1}}],[\"操作静态属性的方法\",{\"1\":{\"1485\":1}}],[\"操作activemq需要配置activemq服务器地址\",{\"1\":{\"456\":1}}],[\"操作activemq\",{\"0\":{\"452\":1}}],[\"操作\",{\"1\":{\"433\":1,\"2642\":1,\"2683\":1,\"3459\":1,\"3698\":2}}],[\"操作结果\",{\"1\":{\"429\":1}}],[\"操作es的数据时\",{\"1\":{\"420\":1}}],[\"操作mongodb里的数据是需要实体类作为载体的\",{\"1\":{\"394\":1}}],[\"操作mongodb就是使用mongotemplate的方法\",{\"1\":{\"393\":1}}],[\"操作redis\",{\"1\":{\"379\":1}}],[\"身份认证的机制\",{\"0\":{\"392\":1}}],[\"身份验证\",{\"0\":{\"390\":1}}],[\"列值增长的修改\",{\"0\":{\"3598\":1}}],[\"列的名字和储存数据的对象中属性的名字是一一对应的\",{\"1\":{\"2602\":1}}],[\"列的别名\",{\"0\":{\"2602\":1}}],[\"列的索引\",{\"1\":{\"2591\":1}}],[\"列的label\",{\"1\":{\"2591\":1}}],[\"列的label或索引\",{\"1\":{\"2591\":1}}],[\"列名\",{\"1\":{\"2591\":1}}],[\"列出的实例系统会自动添加\",{\"1\":{\"1625\":1}}],[\"列出所有的java\",{\"1\":{\"1035\":1}}],[\"列出连接数据库的各个选项进行链接\",{\"1\":{\"388\":1}}],[\"列表\",{\"1\":{\"54\":5,\"614\":1}}],[\"你可能遇到类似于之前描述的并发问题\",{\"1\":{\"3498\":1}}],[\"你可能想优化索引速度而不是近实时搜索\",{\"1\":{\"3453\":1}}],[\"你可以在任何时候动态地改变复制的数量\",{\"1\":{\"3369\":1}}],[\"你可以指定你想要的分片的数量\",{\"1\":{\"3365\":1}}],[\"你可以拥有某一个客户的文档\",{\"1\":{\"3362\":1}}],[\"你可以有一个客户数据的索引\",{\"1\":{\"3360\":1}}],[\"你可以理解为这是redistemplate的一种指定数据泛型的操作api\",{\"1\":{\"379\":1}}],[\"你的应用需要意识到\",{\"1\":{\"3452\":1}}],[\"你的索引将会有\",{\"1\":{\"3370\":1}}],[\"你就不需要担心多进程同时修改数据的问题\",{\"1\":{\"3441\":1}}],[\"你就需要在yml配置中根据springboot预定义好的属性名提供值\",{\"1\":{\"560\":1}}],[\"你会去确定网络中的哪些服务器对应于\",{\"1\":{\"3261\":1}}],[\"你不需要捕捉这个异常classnotfoundexception\",{\"1\":{\"2682\":1}}],[\"你好\",{\"1\":{\"2206\":2,\"2255\":1,\"2256\":1,\"2257\":1,\"2896\":1}}],[\"你需要调用\",{\"1\":{\"984\":1}}],[\"你必须首先调用其公共静态编译方法\",{\"1\":{\"984\":1}}],[\"你ok\",{\"1\":{\"651\":1}}],[\"你也不可能到源代码中去添加\",{\"1\":{\"201\":1}}],[\"序列化后的结果中\",{\"1\":{\"2153\":1}}],[\"序列化类\",{\"0\":{\"2153\":1}}],[\"序列化流\",{\"1\":{\"2151\":1,\"2156\":1}}],[\"序列化的好处在于可将任何实现了serializable接口的对象转化为\",{\"1\":{\"2144\":1}}],[\"序列化与反序列化\",{\"0\":{\"2143\":1}}],[\"序列化\",{\"0\":{\"2151\":1,\"2156\":1},\"1\":{\"379\":1,\"2142\":1,\"2143\":1}}],[\"切换到authentication选项卡\",{\"1\":{\"3735\":1}}],[\"切换到admin库\",{\"1\":{\"3564\":1}}],[\"切换其他备份服务器做主库\",{\"1\":{\"3639\":1}}],[\"切换用户\",{\"1\":{\"3296\":1}}],[\"切换成jedis客户端技术\",{\"0\":{\"383\":1}}],[\"切换成阿里云的源\",{\"1\":{\"371\":1}}],[\"切换阿里云镜像\",{\"1\":{\"97\":1}}],[\"换一个客户端就要输一次密码\",{\"1\":{\"3308\":1,\"3330\":1}}],[\"换句话说\",{\"1\":{\"1295\":1,\"1498\":1,\"2998\":1}}],[\"换用com\",{\"1\":{\"369\":1}}],[\"换行\",{\"1\":{\"299\":1,\"2121\":1}}],[\"弃用com\",{\"1\":{\"369\":1}}],[\"z是修正版本号\",{\"1\":{\"3554\":1}}],[\"zen\",{\"1\":{\"3533\":3}}],[\"zendiscovery\",{\"1\":{\"3526\":1}}],[\"zero\",{\"1\":{\"778\":2}}],[\"zh\",{\"1\":{\"3352\":1}}],[\"zhangyuhao\",{\"1\":{\"2613\":1}}],[\"zhangsan\",{\"1\":{\"148\":3,\"2872\":1}}],[\"zxvf\",{\"1\":{\"3289\":1,\"3320\":1,\"3561\":1}}],[\"zfvzsoqnyf55vfhgejiw\",{\"1\":{\"3283\":1}}],[\"z\",{\"1\":{\"1428\":1,\"3554\":1}}],[\"zzz\",{\"1\":{\"1083\":1}}],[\"zoneoffset\",{\"1\":{\"725\":2}}],[\"zone\",{\"1\":{\"710\":1}}],[\"zoneddatetime\",{\"1\":{\"709\":1}}],[\"zone=+8\",{\"1\":{\"368\":1}}],[\"zip后缀的包\",{\"1\":{\"3479\":1}}],[\"zip\",{\"1\":{\"578\":1,\"2981\":1,\"3108\":1,\"3298\":1,\"3300\":1,\"3301\":1}}],[\"勾选great\",{\"1\":{\"2737\":1}}],[\"勾选sql\",{\"1\":{\"361\":1}}],[\"勾选依赖时无法指定版本\",{\"1\":{\"102\":1}}],[\"整\",{\"1\":{\"3513\":1}}],[\"整个集群会选出一个\",{\"1\":{\"3642\":1}}],[\"整个更新流程结束\",{\"1\":{\"3444\":1}}],[\"整个文档的数据全部替换\",{\"1\":{\"3143\":1}}],[\"整体步骤\",{\"0\":{\"3285\":1}}],[\"整体步骤很固定\",{\"1\":{\"1498\":1}}],[\"整体应用对外服务状态为非up状态\",{\"1\":{\"349\":1}}],[\"整型数字\",{\"1\":{\"3588\":1}}],[\"整型\",{\"1\":{\"1273\":1}}],[\"整型常量\",{\"1\":{\"1115\":1}}],[\"整形\",{\"0\":{\"1085\":1},\"1\":{\"1075\":1}}],[\"整理思路\",{\"1\":{\"1053\":1}}],[\"整理开发过程中每个技术的常用设置列表\",{\"1\":{\"562\":1}}],[\"整理开发过程使用的常用技术列表\",{\"1\":{\"562\":1}}],[\"整合mybatisplus\",{\"1\":{\"614\":1}}],[\"整合es\",{\"0\":{\"412\":1}}],[\"整合的mongodb\",{\"1\":{\"387\":1}}],[\"整合之后如果没有给开发者带来一些便捷操作\",{\"1\":{\"354\":1}}],[\"整合之后\",{\"1\":{\"354\":1}}],[\"任一一个功能的执行就是一个进程\",{\"1\":{\"1688\":1}}],[\"任何节点都可以成为主节点\",{\"1\":{\"3375\":1}}],[\"任何格式的数据\",{\"1\":{\"3090\":1}}],[\"任何地方都能获取\",{\"1\":{\"2937\":1}}],[\"任何地方都可以保存\",{\"1\":{\"2937\":1}}],[\"任何对原始对象的调用都要通过代理\",{\"1\":{\"2320\":1}}],[\"任何以前写入的数据都将被发送\",{\"1\":{\"2214\":1}}],[\"任何一个类的对象\",{\"1\":{\"1759\":1}}],[\"任何\",{\"1\":{\"1678\":1}}],[\"任何情况下\",{\"1\":{\"1428\":1}}],[\"任何引用数据类型\",{\"1\":{\"1270\":1}}],[\"任何基本数据类型+string类型都会转为string类型\",{\"1\":{\"1445\":1}}],[\"任何基本数据类型\",{\"1\":{\"1270\":1}}],[\"任何元素访问前必须初始化\",{\"1\":{\"1238\":1}}],[\"任何技术通常都会有一些相关的设置信息\",{\"1\":{\"354\":1}}],[\"任意大小的数据\",{\"1\":{\"3075\":1}}],[\"任意匹配\",{\"0\":{\"2825\":1}}],[\"任意\",{\"1\":{\"2821\":1,\"2823\":1,\"2824\":1,\"2825\":1}}],[\"任意精度的有符号十进制定点数\",{\"1\":{\"778\":1}}],[\"任意一个包装类\",{\"1\":{\"772\":1}}],[\"任意区间随机数公式\",{\"1\":{\"761\":1}}],[\"任务管理器\",{\"1\":{\"1491\":1}}],[\"任务调度线程池大小\",{\"1\":{\"500\":1}}],[\"任务\",{\"0\":{\"490\":1}}],[\"任务分配\",{\"1\":{\"33\":1}}],[\"效率测试\",{\"0\":{\"2086\":1}}],[\"效率太低\",{\"1\":{\"1889\":1}}],[\"效率低\",{\"1\":{\"690\":1,\"1769\":1,\"1776\":1,\"1862\":1,\"1915\":1,\"2204\":1}}],[\"效率高\",{\"1\":{\"462\":1,\"690\":1,\"1860\":1,\"1912\":1}}],[\"效率更高了\",{\"1\":{\"180\":1}}],[\"效果\",{\"0\":{\"351\":1,\"3176\":1},\"1\":{\"887\":1,\"946\":1,\"1008\":1,\"1737\":1,\"1757\":1,\"2788\":1}}],[\"太繁琐了\",{\"1\":{\"2390\":1}}],[\"太冗余了\",{\"1\":{\"1400\":1,\"2861\":1}}],[\"太复杂\",{\"1\":{\"567\":1}}],[\"太逊了\",{\"1\":{\"350\":1}}],[\"太麻烦了\",{\"1\":{\"289\":1}}],[\"加密\",{\"1\":{\"3712\":1}}],[\"加密解密\",{\"1\":{\"2200\":1}}],[\"加大\",{\"0\":{\"3517\":1},\"1\":{\"3513\":1}}],[\"加星号的是主节点\",{\"1\":{\"3383\":1}}],[\"加4个数字\",{\"1\":{\"3029\":1}}],[\"加不加是一样的\",{\"1\":{\"2915\":1}}],[\"加强版get\",{\"1\":{\"2508\":1}}],[\"加一些通用操作\",{\"1\":{\"2349\":1}}],[\"加锁时限\",{\"1\":{\"1789\":1}}],[\"加锁\",{\"0\":{\"1782\":1},\"1\":{\"1800\":1,\"1801\":1}}],[\"加\",{\"1\":{\"997\":1}}],[\"加法运算\",{\"1\":{\"779\":1}}],[\"加快了开发速度\",{\"1\":{\"559\":1}}],[\"加入集群\",{\"0\":{\"3333\":1}}],[\"加入后\",{\"1\":{\"2349\":1}}],[\"加入\",{\"1\":{\"418\":1}}],[\"加入bean\",{\"1\":{\"347\":1,\"455\":1}}],[\"加载和实例化\",{\"0\":{\"2793\":1}}],[\"加载驱动\",{\"0\":{\"2671\":1},\"1\":{\"2551\":1,\"2567\":1,\"2573\":1,\"2575\":1}}],[\"加载驱动源码\",{\"0\":{\"2539\":1}}],[\"加载的第三方jar包都是class文件\",{\"1\":{\"2539\":1}}],[\"加载的内容不会发生变化\",{\"1\":{\"181\":1}}],[\"加载器获取\",{\"0\":{\"2280\":1}}],[\"加载核心类库\",{\"1\":{\"2279\":1}}],[\"加载ext下的jar包\",{\"1\":{\"2279\":1}}],[\"加载自定义类\",{\"1\":{\"2279\":1}}],[\"加载完类之后\",{\"1\":{\"2248\":1}}],[\"加载流对应的文件\",{\"1\":{\"1940\":1}}],[\"加载文件的流\",{\"1\":{\"1940\":1}}],[\"加载头像\",{\"1\":{\"1694\":1}}],[\"加载评论内容\",{\"1\":{\"1694\":1}}],[\"加载到栈空间\",{\"1\":{\"1273\":1}}],[\"加载到堆空间中\",{\"1\":{\"1273\":1}}],[\"加载到内存中\",{\"1\":{\"2662\":1}}],[\"加载到内存中的运行时类\",{\"1\":{\"2265\":1}}],[\"加载到内存中的类\",{\"1\":{\"2261\":1}}],[\"加载到内存\",{\"1\":{\"347\":1}}],[\"加载用户自定义的bean和导入的其他坐标\",{\"1\":{\"562\":1}}],[\"加载配置文件\",{\"1\":{\"553\":1,\"2551\":1,\"2672\":1}}],[\"加载两万个bean\",{\"1\":{\"532\":1}}],[\"加载bean时\",{\"1\":{\"556\":1}}],[\"加载bean\",{\"0\":{\"528\":1}}],[\"加载第三方bean\",{\"0\":{\"510\":1}}],[\"加载\",{\"1\":{\"505\":1}}],[\"加载测试专用配置\",{\"0\":{\"230\":1}}],[\"加载位置base类加载器\",{\"1\":{\"183\":1}}],[\"加载位置restart类加载器\",{\"1\":{\"182\":1}}],[\"加载开发者制作的内容\",{\"1\":{\"182\":1}}],[\"加载jar包中的信息后\",{\"1\":{\"182\":1}}],[\"加载内容\",{\"1\":{\"182\":1,\"183\":1}}],[\"加载数据到对象\",{\"1\":{\"153\":1}}],[\"klass\",{\"1\":{\"3504\":1}}],[\"know\",{\"1\":{\"3108\":1}}],[\"kill\",{\"1\":{\"3342\":1,\"3564\":1}}],[\"kibana是需要连接es的\",{\"1\":{\"3352\":1}}],[\"kibana是一个kibana是一个开源的es分析与可视化工具\",{\"1\":{\"3350\":1}}],[\"kibana版本和es版本是同步更新的\",{\"1\":{\"3351\":1}}],[\"kibana与elasticsearch的交互方式是各种不同的图表\",{\"1\":{\"3350\":1}}],[\"kibana\",{\"0\":{\"3350\":1},\"1\":{\"3090\":1,\"3298\":1,\"3300\":1,\"3301\":2,\"3305\":4,\"3307\":1,\"3309\":1,\"3327\":1,\"3328\":4,\"3329\":1,\"3352\":1,\"3353\":1,\"3355\":1}}],[\"kit\",{\"1\":{\"1025\":1}}],[\"keepalivetime\",{\"1\":{\"1813\":1}}],[\"keyfile鉴权文件\",{\"1\":{\"3728\":1}}],[\"keyfile\",{\"1\":{\"3723\":1,\"3726\":2,\"3727\":3,\"3728\":2}}],[\"keyid\",{\"1\":{\"3670\":1,\"3673\":1,\"3674\":1,\"3700\":1,\"3701\":1}}],[\"keyword类型的字段\",{\"1\":{\"3200\":1}}],[\"keyword\",{\"1\":{\"3197\":1,\"3198\":2,\"3199\":2}}],[\"keyword=要完全匹配\",{\"1\":{\"3197\":1}}],[\"key是列名\",{\"1\":{\"2684\":1}}],[\"key是有set组成的\",{\"1\":{\"958\":1}}],[\"keyedhandler\",{\"1\":{\"2684\":1}}],[\"key+\",{\"1\":{\"1958\":1,\"2872\":1}}],[\"key2\",{\"1\":{\"1922\":2}}],[\"key1\",{\"1\":{\"1922\":1}}],[\"key可以自然排序或定制排序\",{\"1\":{\"1914\":1}}],[\"key所在的类要重写equals\",{\"1\":{\"1918\":1}}],[\"key所在的类要重写\",{\"1\":{\"1912\":1}}],[\"keys\",{\"1\":{\"2683\":1,\"3355\":1,\"3624\":1,\"3625\":1}}],[\"keyset\",{\"0\":{\"969\":1},\"1\":{\"969\":2,\"2872\":1}}],[\"keystore和安全模块的配置\",{\"1\":{\"3336\":1}}],[\"keystore文件\",{\"1\":{\"3110\":1}}],[\"keystoreexception\",{\"1\":{\"418\":2}}],[\"keystore\",{\"1\":{\"418\":3,\"3110\":1,\"3307\":2,\"3327\":2,\"3335\":1,\"3337\":2,\"3355\":2}}],[\"key一般为string\",{\"1\":{\"959\":1}}],[\"key\",{\"0\":{\"485\":1,\"1918\":1},\"1\":{\"483\":2,\"485\":3,\"884\":1,\"894\":1,\"958\":2,\"959\":1,\"961\":1,\"963\":1,\"964\":1,\"1826\":1,\"1909\":5,\"1912\":2,\"1914\":3,\"1916\":3,\"1918\":1,\"1930\":1,\"1933\":3,\"1939\":2,\"1958\":1,\"2619\":1,\"2872\":2,\"3041\":1,\"3191\":4,\"3545\":2,\"3623\":1,\"3626\":2,\"3627\":3,\"3712\":1}}],[\"key就是手机号\",{\"1\":{\"469\":1}}],[\"key=>value\",{\"1\":{\"968\":1}}],[\"key=\",{\"1\":{\"468\":1,\"471\":2,\"472\":1,\"485\":1,\"3488\":4}}],[\"key属性\",{\"1\":{\"468\":1}}],[\"keymanagementexception\",{\"1\":{\"418\":2}}],[\"k2\",{\"1\":{\"894\":2}}],[\"k1\",{\"1\":{\"894\":2}}],[\"kk\",{\"1\":{\"756\":3}}],[\"k++\",{\"1\":{\"746\":1}}],[\"kafka\",{\"0\":{\"458\":1}}],[\"kv格式定义\",{\"1\":{\"350\":1}}],[\"k\",{\"1\":{\"345\":1,\"746\":4,\"812\":2,\"813\":1,\"814\":1,\"819\":1,\"823\":1,\"959\":1,\"960\":1,\"1227\":1,\"1823\":1,\"1962\":1}}],[\"头来检索部分日志文件的内容\",{\"1\":{\"342\":1}}],[\"堆内存的大小最好不要超过\",{\"1\":{\"3504\":1}}],[\"堆内存的分配需要满足以下两个原则\",{\"1\":{\"3504\":1}}],[\"堆内存中又开辟了一块内存空间储存对象的实体\",{\"1\":{\"1550\":1}}],[\"堆内存中储存\",{\"1\":{\"1227\":1}}],[\"堆栈追踪\",{\"1\":{\"1587\":1,\"1589\":1}}],[\"堆溢出\",{\"1\":{\"1560\":1}}],[\"堆\",{\"1\":{\"342\":1,\"1226\":1,\"1546\":1,\"1701\":1}}],[\"否\",{\"1\":{\"342\":1}}],[\"否则取出来就有问题了\",{\"1\":{\"3588\":1}}],[\"否则千万不要在名字里出现$\",{\"1\":{\"3581\":1}}],[\"否则重新选举一直到满足上述条件\",{\"1\":{\"3526\":1}}],[\"否则有如下报错\",{\"1\":{\"3479\":1}}],[\"否则查询的时候就不知道去哪个分片查了\",{\"1\":{\"3399\":1}}],[\"否则闪退\",{\"1\":{\"3270\":1,\"3271\":1}}],[\"否则返回指定的other对象\",{\"1\":{\"2508\":1}}],[\"否则返回false\",{\"1\":{\"2477\":1,\"3582\":1}}],[\"否则返回本次读取的字符数\",{\"1\":{\"818\":1}}],[\"否则返回本次实际读取的字符数\",{\"1\":{\"814\":1}}],[\"否则抛异常\",{\"1\":{\"2474\":1}}],[\"否则报异常\",{\"1\":{\"2045\":1}}],[\"否则报错\",{\"1\":{\"1101\":1,\"1241\":1,\"3351\":1}}],[\"否则会报错\",{\"1\":{\"2824\":2}}],[\"否则会报\",{\"1\":{\"1799\":1}}],[\"否则内容不好追加\",{\"1\":{\"1491\":1}}],[\"否则难以同步\",{\"1\":{\"1491\":1}}],[\"否则一律转为false\",{\"1\":{\"1441\":1}}],[\"否则编译出错\",{\"1\":{\"1426\":1}}],[\"否则这种递归就变成了无穷递归\",{\"1\":{\"1283\":1}}],[\"否则\",{\"1\":{\"1172\":1,\"1509\":1,\"1594\":1,\"1802\":1,\"2158\":1,\"2453\":1,\"2662\":1}}],[\"否则以整数形式返回实际读取的字节数\",{\"1\":{\"814\":1}}],[\"否则就只能定义为抽象类\",{\"1\":{\"1510\":1}}],[\"否则就只会执行一次\",{\"1\":{\"319\":1}}],[\"否则就会允许接收任意object类进行比较\",{\"1\":{\"749\":1}}],[\"否则打包后无法正常执行程序\",{\"1\":{\"239\":1}}],[\"否则无法执行java命令\",{\"1\":{\"238\":1}}],[\"否则springboot会暂停\",{\"1\":{\"224\":1}}],[\"允许\",{\"1\":{\"3501\":1}}],[\"允许你创建分片的一份或多份拷贝\",{\"1\":{\"3368\":1}}],[\"允许你在分片之上进行分布式的\",{\"1\":{\"3365\":1}}],[\"允许你水平分割\",{\"1\":{\"3365\":1}}],[\"允许所有主机访问http\",{\"1\":{\"3337\":1}}],[\"允许所有ip访问\",{\"1\":{\"3327\":1}}],[\"允许和那些主机上的节点通信\",{\"1\":{\"3337\":1}}],[\"允许其他节点加入\",{\"1\":{\"3329\":1}}],[\"允许跨域的目录\",{\"1\":{\"3268\":1}}],[\"允许多台服务器协同工作\",{\"1\":{\"3093\":1}}],[\"允许conn为null\",{\"1\":{\"2682\":1}}],[\"允许操作封装的类结构\",{\"0\":{\"2317\":1}}],[\"允许读取数据\",{\"1\":{\"1993\":1}}],[\"允许我们在创建集合时再指定集合元素的类型\",{\"1\":{\"1948\":1}}],[\"允许使用null键和null值\",{\"1\":{\"1912\":1}}],[\"允许直接定义能和多个实参相匹配的形参\",{\"1\":{\"1294\":1}}],[\"允许存在一个以上的同名方法\",{\"1\":{\"1285\":1}}],[\"允许在表达式中使用空格和注释\",{\"1\":{\"997\":1}}],[\"允许在程序运行时进行自动构建\",{\"0\":{\"190\":1}}],[\"允许的特殊字符\",{\"1\":{\"501\":1}}],[\"允许值\",{\"1\":{\"501\":1}}],[\"允许从\",{\"1\":{\"342\":1}}],[\"图片等\",{\"1\":{\"2979\":1}}],[\"图片类型\",{\"1\":{\"2932\":1}}],[\"图片就打不开了\",{\"1\":{\"825\":2}}],[\"图解查询操作的流程\",{\"0\":{\"2595\":1}}],[\"图形化界面\",{\"1\":{\"1019\":1}}],[\"图形化处理\",{\"1\":{\"612\":1}}],[\"图\",{\"1\":{\"342\":1}}],[\"个数据库中\",{\"1\":{\"3698\":1}}],[\"个数相关的数据\",{\"0\":{\"2691\":1}}],[\"个节点时\",{\"1\":{\"3394\":1}}],[\"个节点\",{\"1\":{\"3392\":1,\"3394\":1}}],[\"个节点就可以看做是集群了\",{\"1\":{\"3259\":1}}],[\"个副本分片将会分配到这个节点上\",{\"1\":{\"3388\":1}}],[\"个副本分片\",{\"1\":{\"3387\":1,\"3391\":1,\"3392\":1,\"3394\":1}}],[\"个副本分片都是\",{\"1\":{\"3384\":1}}],[\"个主分片正常\",{\"1\":{\"3387\":1}}],[\"个主分片都被分配在\",{\"1\":{\"3382\":1}}],[\"个主分片和另外\",{\"1\":{\"3370\":1}}],[\"个主分片和\",{\"1\":{\"3370\":1,\"3387\":1,\"3391\":1,\"3392\":1,\"3394\":1}}],[\"个分片\",{\"1\":{\"3370\":1,\"3387\":1,\"3391\":2,\"3392\":1,\"3394\":1}}],[\"个完全拷贝\",{\"1\":{\"3370\":1}}],[\"个复制分片\",{\"1\":{\"3370\":1}}],[\"个复制\",{\"1\":{\"3370\":1}}],[\"个以上的副本\",{\"1\":{\"3508\":1}}],[\"个以上\",{\"1\":{\"3259\":1}}],[\"个接口分别定义了对数据库的调用的不同方式\",{\"1\":{\"2556\":1}}],[\"个元素的流\",{\"1\":{\"2461\":1}}],[\"个月为周期\",{\"1\":{\"2351\":1}}],[\"个月\",{\"1\":{\"2351\":1}}],[\"个英文字母大小写\",{\"1\":{\"1082\":1}}],[\"个字节写入此输出流\",{\"1\":{\"825\":1}}],[\"个字节从指定的\",{\"1\":{\"825\":1}}],[\"个字节的数据读入一个\",{\"1\":{\"814\":1}}],[\"个\",{\"1\":{\"342\":1,\"1650\":7,\"1652\":5,\"1653\":2,\"1654\":2,\"2461\":1,\"3391\":1,\"3508\":1}}],[\"个人中心\",{\"1\":{\"54\":1}}],[\"暴露\",{\"1\":{\"342\":2}}],[\"暴露可用的缓存\",{\"1\":{\"342\":1}}],[\"暴露当前应用程序的审计事件信息\",{\"1\":{\"342\":1}}],[\"描述了目录结构中文件的位置\",{\"1\":{\"2164\":1}}],[\"描述了一组监控信息\",{\"1\":{\"342\":1}}],[\"描述类应该具有的功能\",{\"1\":{\"1276\":1}}],[\"描述\",{\"1\":{\"342\":1,\"3524\":1,\"3548\":1}}],[\"端口设计\",{\"0\":{\"3652\":1}}],[\"端口限制\",{\"0\":{\"3349\":1}}],[\"端口等\",{\"1\":{\"3339\":1}}],[\"端口为浏览器访问的\",{\"1\":{\"3108\":1}}],[\"端口为\",{\"1\":{\"3108\":1}}],[\"端口以备占用\",{\"1\":{\"2708\":1}}],[\"端口冲突\",{\"0\":{\"2708\":1}}],[\"端口配置\",{\"0\":{\"2705\":1}}],[\"端口\",{\"1\":{\"2697\":1,\"3108\":1,\"3268\":1,\"3269\":1,\"3270\":1,\"3271\":1,\"3352\":1}}],[\"端口分类\",{\"0\":{\"2186\":1}}],[\"端口号是8080\",{\"1\":{\"2711\":1}}],[\"端口号是对一个服务的访问场所\",{\"1\":{\"2244\":1}}],[\"端口号>\",{\"1\":{\"2237\":1}}],[\"端口号就是本服务端的端口号\",{\"1\":{\"2223\":1}}],[\"端口号与ip\",{\"1\":{\"2187\":1}}],[\"端口号标识正在计算机上运行的进程\",{\"1\":{\"2185\":1}}],[\"端口号\",{\"0\":{\"2185\":1},\"1\":{\"248\":1,\"2174\":1,\"2238\":1,\"3308\":1,\"3330\":1}}],[\"端口号冲突\",{\"0\":{\"248\":1}}],[\"端点描述了被监控的信息\",{\"1\":{\"344\":1}}],[\"端点名称\",{\"1\":{\"342\":1,\"343\":2}}],[\"端点\",{\"0\":{\"342\":1}}],[\"映射类似于mysql中的表结构\",{\"1\":{\"3364\":1}}],[\"映射类似于数据库\",{\"1\":{\"3195\":1}}],[\"映射和设置\",{\"1\":{\"3211\":1}}],[\"映射的效果\",{\"0\":{\"3200\":1}}],[\"映射信息通过json格式的请求体添加\",{\"1\":{\"3197\":1}}],[\"映射关系的数据\",{\"1\":{\"1909\":1}}],[\"映射\",{\"0\":{\"337\":1,\"397\":1,\"2462\":1,\"3195\":1,\"3364\":1},\"1\":{\"340\":1,\"2454\":1,\"3124\":1}}],[\"磁盘上的每个段都有一个相应的\",{\"1\":{\"3528\":1}}],[\"磁盘能处理的吞吐量越大\",{\"1\":{\"3501\":1}}],[\"磁盘创建新的段\",{\"1\":{\"3449\":1}}],[\"磁盘扫描过滤器\",{\"1\":{\"568\":2}}],[\"磁盘空间\",{\"1\":{\"348\":1}}],[\"磁盘\",{\"1\":{\"329\":1,\"2022\":1,\"3449\":1}}],[\"什么标签名都可以\",{\"1\":{\"3015\":1}}],[\"什么时候调用\",{\"1\":{\"1724\":1}}],[\"什么都不返回\",{\"1\":{\"974\":1,\"2392\":1,\"2846\":1}}],[\"什么都不显示\",{\"1\":{\"326\":1}}],[\"什么情况\",{\"1\":{\"350\":2}}],[\"什么也看不到\",{\"1\":{\"325\":1}}],[\"什么是映射\",{\"1\":{\"3195\":1}}],[\"什么是约束\",{\"0\":{\"3022\":1}}],[\"什么是io\",{\"1\":{\"2021\":1}}],[\"什么是annotation\",{\"0\":{\"1635\":1}}],[\"什么是枚举类\",{\"0\":{\"1616\":1}}],[\"什么是包\",{\"0\":{\"1334\":1}}],[\"什么是封装\",{\"0\":{\"1301\":1}}],[\"什么是类与对象\",{\"0\":{\"1255\":1}}],[\"什么是监控\",{\"0\":{\"312\":1}}],[\"什么是多环境\",{\"1\":{\"269\":1}}],[\"什么是starter\",{\"0\":{\"123\":1}}],[\"什么是快捷笔记\",{\"1\":{\"1\":1}}],[\"被删除的文档\",{\"1\":{\"3458\":1}}],[\"被删除的元素\",{\"1\":{\"950\":1}}],[\"被查询发现的其他节点的\",{\"1\":{\"3268\":1}}],[\"被观察者\",{\"1\":{\"2957\":4}}],[\"被拦截器拦截\",{\"1\":{\"2947\":1}}],[\"被`h1`渲染后的hello\",{\"1\":{\"2890\":1}}],[\"被代理类的对象\",{\"1\":{\"2342\":1,\"2343\":1}}],[\"被代理类中的所有方法都会被代理类中的invoke方法增强\",{\"1\":{\"2334\":1}}],[\"被代理类\",{\"0\":{\"2329\":1},\"1\":{\"2321\":1,\"2326\":1,\"2344\":1}}],[\"被预先定义的服务通信占用\",{\"1\":{\"2186\":1}}],[\"被规定为一个16位的整数\",{\"1\":{\"2185\":1}}],[\"被占着者\",{\"1\":{\"1796\":1}}],[\"被保证线程安全的代码\",{\"1\":{\"1780\":1}}],[\"被人为挂起或执行输入输出操作时\",{\"1\":{\"1749\":1}}],[\"被\",{\"1\":{\"1680\":1}}],[\"被它修饰的\",{\"1\":{\"1664\":1}}],[\"被他修饰类就是枚举类\",{\"1\":{\"1624\":1}}],[\"被称为钩子函数\",{\"1\":{\"1500\":1}}],[\"被所有对象所共享\",{\"1\":{\"1473\":1}}],[\"被static修饰的属性就是静态属性\",{\"1\":{\"1475\":1}}],[\"被static修饰后的成员具备的特点\",{\"0\":{\"1473\":1}}],[\"被spring\",{\"1\":{\"414\":1}}],[\"被i去除\",{\"1\":{\"1204\":1}}],[\"被加载的类\",{\"1\":{\"520\":1}}],[\"被task取代了\",{\"1\":{\"495\":1}}],[\"被执行\",{\"1\":{\"493\":1}}],[\"被访问次数最少的被淘汰掉\",{\"1\":{\"480\":1}}],[\"被监控的任何逐渐状态异常\",{\"1\":{\"348\":1}}],[\"被监控的应用之所以可以对外提供上述请求路径\",{\"1\":{\"341\":1}}],[\"被监控的项目一般都是web项目\",{\"1\":{\"323\":1}}],[\"被替换成了具体的值\",{\"1\":{\"283\":1}}],[\"访问量较大时可能会导致\",{\"1\":{\"3532\":1}}],[\"访问主节点\",{\"1\":{\"3340\":1}}],[\"访问方式和地址不变\",{\"1\":{\"3279\":1,\"3280\":1}}],[\"访问结果如下\",{\"1\":{\"3108\":1}}],[\"访问web服务器的资源\",{\"1\":{\"3033\":1}}],[\"访问所有资源时\",{\"1\":{\"2949\":1}}],[\"访问所有资源\",{\"1\":{\"2949\":1}}],[\"访问后缀名为jsp的资源\",{\"1\":{\"2949\":1}}],[\"访问src目录的路径为\",{\"1\":{\"2941\":1}}],[\"访问servlet实现类\",{\"0\":{\"2781\":1},\"1\":{\"2777\":1}}],[\"访问servlet\",{\"0\":{\"111\":1}}],[\"访问\",{\"1\":{\"2846\":1,\"2949\":1,\"3285\":1}}],[\"访问路径http\",{\"1\":{\"2823\":1,\"2824\":1,\"2825\":1}}],[\"访问路径\",{\"1\":{\"2822\":1}}],[\"访问该servlet\",{\"1\":{\"2781\":1}}],[\"访问前别忘了重启服务器\",{\"1\":{\"2777\":1}}],[\"访问测试\",{\"0\":{\"2758\":1,\"3108\":1}}],[\"访问项目\",{\"0\":{\"2715\":1},\"1\":{\"2716\":1}}],[\"访问地址是ip地址\",{\"1\":{\"2711\":1}}],[\"访问tomcat服务器\",{\"0\":{\"2711\":1}}],[\"访问数据信息的类和接口\",{\"1\":{\"2642\":1}}],[\"访问数组元素\",{\"0\":{\"1220\":1}}],[\"访问模式\",{\"1\":{\"2133\":1}}],[\"访问权限\",{\"1\":{\"1980\":1}}],[\"访问权限允许时\",{\"1\":{\"1473\":1}}],[\"访问的时候用ip访问\",{\"1\":{\"3298\":1}}],[\"访问的端口号\",{\"1\":{\"2750\":1}}],[\"访问的是父类的属性\",{\"1\":{\"1408\":1}}],[\"访问的就是继承来的\",{\"1\":{\"1367\":1}}],[\"访问时\",{\"1\":{\"1377\":1}}],[\"访问修饰符和static的顺序可以调换\",{\"1\":{\"1476\":1}}],[\"访问修饰符\",{\"0\":{\"1372\":1},\"1\":{\"1476\":1}}],[\"访问和操作都以方法的形式\",{\"1\":{\"1312\":1}}],[\"访问未初始化的数组\",{\"1\":{\"1246\":1}}],[\"访问外层数组元素\",{\"1\":{\"1238\":1}}],[\"访问多次\",{\"1\":{\"448\":1}}],[\"访问controller中的sendmsg方法发送消息\",{\"1\":{\"448\":1}}],[\"访问控制台\",{\"0\":{\"321\":1}}],[\"它对字段值的散列进行索引\",{\"1\":{\"3621\":1}}],[\"它假定有变更冲突可能发生\",{\"1\":{\"3495\":1}}],[\"它根据\",{\"1\":{\"3466\":1}}],[\"它实际上只是在\",{\"1\":{\"3447\":1}}],[\"它实现了runnable接口中的run方法\",{\"1\":{\"1716\":1}}],[\"它永远不会修改\",{\"1\":{\"3440\":1}}],[\"它包含一个叫\",{\"1\":{\"3403\":1}}],[\"它包含的方法如下\",{\"1\":{\"2965\":1,\"2966\":1,\"2967\":1,\"2968\":1}}],[\"它拥有使用一个节点上的所有资源的能力\",{\"1\":{\"3392\":1}}],[\"它拥有与\",{\"1\":{\"1780\":1}}],[\"它和第一个节点有同样的\",{\"1\":{\"3386\":1}}],[\"它和我们通常的\",{\"1\":{\"1643\":1}}],[\"它都能负责从各个包含我们所需文档的节点收集回数据\",{\"1\":{\"3376\":1}}],[\"它生成一个pkcs\",{\"1\":{\"3293\":1}}],[\"它存储数据\",{\"1\":{\"3261\":1}}],[\"它还可以检测代码是否被篡改过\",{\"1\":{\"2983\":1}}],[\"它只识别扩展名\",{\"1\":{\"2824\":1}}],[\"它与resultsethandler组合在一起使用可以完成大部分的数据库操作\",{\"1\":{\"2683\":1}}],[\"它结合了c3p0\",{\"1\":{\"2670\":1}}],[\"它仅仅把数据库连接释放\",{\"1\":{\"2669\":1}}],[\"它允许应用程序重复使用一个现有的数据库连接\",{\"1\":{\"2664\":1}}],[\"它能容纳不同大小的数据\",{\"1\":{\"2608\":1}}],[\"它鼓励程序员写更干净的代码\",{\"1\":{\"2496\":1}}],[\"它帮你把迭代做了\",{\"1\":{\"2485\":1}}],[\"它必须实现invoke方法\",{\"1\":{\"2339\":1}}],[\"它将新版本的文档并行转发到\",{\"1\":{\"3413\":1}}],[\"它将尝试去重用它们\",{\"1\":{\"3397\":1}}],[\"它将负责管理集群范围内的所有变更\",{\"1\":{\"3375\":1}}],[\"它将维持加载\",{\"1\":{\"2278\":1}}],[\"它将允许我们向较旧的接口添加方法\",{\"1\":{\"1521\":1}}],[\"它保证数据可靠的传送\",{\"1\":{\"2244\":1}}],[\"它用于监听web应用程序中的servletcontext\",{\"1\":{\"2959\":1}}],[\"它用于区分同一物理计算机上的多个服务\",{\"1\":{\"2244\":1}}],[\"它用来指定\",{\"1\":{\"1653\":1,\"1654\":1}}],[\"它表示一条预编译过的\",{\"1\":{\"2565\":1}}],[\"它表示一个正则表达式模式中的语法错误\",{\"1\":{\"984\":1}}],[\"它表示\",{\"1\":{\"2236\":1}}],[\"它从语言级上提供了对网络应用程序的支持\",{\"1\":{\"2171\":1}}],[\"它可提供自动故障转移和数据冗余\",{\"1\":{\"3538\":1}}],[\"它可安排在给定延迟后运行命令或者定期地执行\",{\"1\":{\"1815\":1}}],[\"它可以被简单的忽略\",{\"1\":{\"3497\":1}}],[\"它可以近乎实时的存储\",{\"1\":{\"3091\":1}}],[\"它可以快速地储存\",{\"1\":{\"3089\":1}}],[\"它可以保存类型t的值\",{\"1\":{\"2495\":1}}],[\"它可以接收任意数量的参数\",{\"1\":{\"2448\":1}}],[\"它可以指定你希望对集合进行的操作\",{\"1\":{\"2436\":1}}],[\"它可以安排任务\",{\"1\":{\"491\":1}}],[\"它可以监控多个项目\",{\"1\":{\"314\":1}}],[\"它既可以作为runnable被线程执行\",{\"1\":{\"1808\":1}}],[\"它会重试步骤\",{\"1\":{\"3413\":1}}],[\"它会重复执行某段代码\",{\"1\":{\"1283\":1}}],[\"它会自动发现集群并加入到其中\",{\"1\":{\"3386\":1}}],[\"它会为程序预留4个字节的空间\",{\"1\":{\"1703\":1}}],[\"它会使用myannotation注解\",{\"1\":{\"1680\":1}}],[\"它所标注的内容\",{\"1\":{\"1675\":1}}],[\"它所标注的annotation将具有继承性\",{\"1\":{\"1674\":1}}],[\"它继续被抛给这个调用方法的上层方法\",{\"1\":{\"1599\":1}}],[\"它不会转发更新请求\",{\"1\":{\"3414\":1}}],[\"它不等同于对象本身\",{\"1\":{\"1546\":1}}],[\"它不声明返回值类型\",{\"1\":{\"1317\":1}}],[\"它是一个由字段和值对\",{\"1\":{\"3546\":1}}],[\"它是一种具体的uri\",{\"1\":{\"2236\":1,\"2243\":1}}],[\"它是分析各种语言文本最常用的选择\",{\"1\":{\"3466\":1}}],[\"它是java提供的一门动态web资源开发技术\",{\"1\":{\"2770\":1}}],[\"它是对jdbc的简单封装\",{\"1\":{\"2679\":1}}],[\"它是产生数据库连接的工厂\",{\"1\":{\"2669\":1}}],[\"它是软件的必要元素\",{\"1\":{\"1683\":2}}],[\"它是\",{\"1\":{\"1654\":1}}],[\"它是属于java\",{\"1\":{\"1429\":1}}],[\"它是通过用\",{\"1\":{\"677\":1}}],[\"它就不是多态\",{\"1\":{\"1407\":1}}],[\"它具有与类相同的名称\",{\"1\":{\"1317\":1}}],[\"它的值除了使用基本的一些类型外\",{\"1\":{\"3546\":1}}],[\"它的值是java运行时环境根据类的内部细节自动生成的\",{\"1\":{\"2158\":1}}],[\"它的全文域被分析成词条以用来创建倒排索引\",{\"1\":{\"3470\":1}}],[\"它的文档怎样聚合和搜索请求\",{\"1\":{\"3366\":1}}],[\"它的工作原理是计算机索引程序通过扫描文章中的每一个词\",{\"1\":{\"3100\":1}}],[\"它的强大之处就是可以把java中的对象写入到数据源中\",{\"1\":{\"2142\":1}}],[\"它的元素相当于类的成员变量\",{\"1\":{\"1223\":1}}],[\"它的功能是结束一个方法\",{\"1\":{\"1196\":1}}],[\"它返回一个\",{\"1\":{\"984\":1}}],[\"它们会被删除\",{\"1\":{\"3469\":1}}],[\"它们会将该关键字即索引匹配到的所有网页返回\",{\"1\":{\"3096\":1}}],[\"它们对相关性没有多少影响\",{\"1\":{\"3469\":1}}],[\"它们可以考虑指定语言的特点\",{\"1\":{\"3469\":1}}],[\"它们不需要在每次数据改变时被重建\",{\"1\":{\"3441\":1}}],[\"它们都没有被分配到任何节点\",{\"1\":{\"3384\":1}}],[\"它们都是根据网页中的关键字生成索引\",{\"1\":{\"3096\":1}}],[\"它们共同承担数据和负载的压力\",{\"1\":{\"3374\":1}}],[\"它们将会自动地形成并加入到一个叫做\",{\"1\":{\"3261\":1}}],[\"它们之间最大的区别\",{\"1\":{\"3037\":1}}],[\"它们就关闭connection\",{\"1\":{\"2682\":1}}],[\"它们在几乎每个方面都是相同的\",{\"1\":{\"1711\":1}}],[\"它们计算的是操作数的值之间的关系\",{\"1\":{\"1426\":1}}],[\"它们提供了简单的本地日期或时间\",{\"1\":{\"712\":1}}],[\"它们的调用地址在编译期就绑定了\",{\"1\":{\"1407\":1}}],[\"它们的实例是不可变的对象\",{\"1\":{\"712\":1}}],[\"它们的含义是\",{\"1\":{\"501\":1}}],[\"它们面临的问题是\",{\"1\":{\"708\":1}}],[\"它才是控制bean初始化加载的核心\",{\"1\":{\"526\":1}}],[\"它本身不提供缓存服务\",{\"1\":{\"487\":1}}],[\"它本身就是独立的项目\",{\"1\":{\"319\":1}}],[\"线程问题\",{\"0\":{\"3348\":1}}],[\"线程需要完成的操作\",{\"1\":{\"1817\":1}}],[\"线程没有任务时最多保持多长时间后会终止\",{\"1\":{\"1813\":1}}],[\"线程池和队列\",{\"1\":{\"3513\":1}}],[\"线程池工具类\",{\"0\":{\"1815\":1}}],[\"线程池接口\",{\"0\":{\"1814\":1}}],[\"线程池的优点\",{\"0\":{\"1813\":1}}],[\"线程池介绍\",{\"0\":{\"1812\":1}}],[\"线程池\",{\"0\":{\"1805\":1,\"1811\":1}}],[\"线程池关闭时等待所有任务完成\",{\"1\":{\"500\":1}}],[\"线程通信涉及到的方法\",{\"0\":{\"1799\":1}}],[\"线程2\",{\"1\":{\"1796\":1,\"1798\":1,\"1804\":1}}],[\"线程在获得一个锁l1的情况下再去申请另外一个锁l2\",{\"1\":{\"1794\":1}}],[\"线程尝试获取锁的时候加上一定的时限\",{\"1\":{\"1789\":1}}],[\"线程开始访问共享资源之前应先获得lock对象\",{\"1\":{\"1778\":1}}],[\"线程执行同步代码块时\",{\"1\":{\"1775\":1}}],[\"线程执行同步代码块或同步方法时\",{\"1\":{\"1775\":1}}],[\"线程执行控制\",{\"0\":{\"1729\":1}}],[\"线程就不会结束\",{\"1\":{\"1768\":1}}],[\"线程安全问题代码示例\",{\"0\":{\"1757\":1}}],[\"线程安全问题\",{\"0\":{\"1752\":1,\"2795\":1}}],[\"线程安全的\",{\"1\":{\"690\":1,\"1862\":1,\"1915\":1}}],[\"线程完成了它的全部工作或线程被提前强制性地中止或出现异常导致结束\",{\"1\":{\"1749\":1}}],[\"线程是有生命周期\",{\"1\":{\"1748\":1}}],[\"线程代码存在接口的实现类的run方法\",{\"1\":{\"1746\":1}}],[\"线程代码存放thread子类run方法中\",{\"1\":{\"1746\":1}}],[\"线程调度示例\",{\"0\":{\"1737\":1}}],[\"线程创建时继承父线程的优先级\",{\"1\":{\"1736\":1}}],[\"线程a\",{\"1\":{\"1729\":1}}],[\"线程a才结束阻塞状态\",{\"1\":{\"1727\":1}}],[\"线程插队\",{\"1\":{\"1729\":1}}],[\"线程1\",{\"1\":{\"1728\":1,\"1796\":1,\"1798\":1,\"1804\":1}}],[\"线程名是个静态属性\",{\"1\":{\"1728\":1}}],[\"线程名\",{\"0\":{\"1728\":1}}],[\"线程体\",{\"0\":{\"1717\":1}}],[\"线程的通信实例\",{\"0\":{\"1804\":1}}],[\"线程的通信指的是多个线程之间的交流\",{\"1\":{\"1798\":1}}],[\"线程的通信\",{\"0\":{\"1798\":1}}],[\"线程的死锁\",{\"0\":{\"1787\":1}}],[\"线程的安全问题概述\",{\"0\":{\"1753\":1}}],[\"线程的生命周期图解\",{\"0\":{\"1750\":1}}],[\"线程的5种状态\",{\"0\":{\"1749\":1}}],[\"线程的默认优先级为\",{\"1\":{\"1737\":1}}],[\"线程的优先级被修改为\",{\"1\":{\"1737\":1}}],[\"线程的优先级\",{\"0\":{\"1735\":1}}],[\"线程的调度\",{\"0\":{\"1730\":1}}],[\"线程的分类\",{\"0\":{\"1711\":1}}],[\"线程的概念\",{\"0\":{\"1687\":1}}],[\"线程切换的开销小\",{\"1\":{\"1687\":1}}],[\"线程作为调度和执行的单位\",{\"1\":{\"1687\":1}}],[\"线程状态\",{\"1\":{\"1616\":1}}],[\"线程不安全\",{\"1\":{\"1490\":1}}],[\"线程不安全的\",{\"1\":{\"690\":1,\"1860\":1,\"1883\":1,\"1912\":1}}],[\"线程\",{\"1\":{\"313\":1,\"329\":1,\"1687\":1}}],[\"规划目录\",{\"0\":{\"3288\":1,\"3319\":1}}],[\"规定xml文档\",{\"1\":{\"3022\":1}}],[\"规定了数据传输的规则\",{\"1\":{\"2697\":1}}],[\"规定解析\",{\"0\":{\"1398\":1}}],[\"规定\",{\"0\":{\"1397\":1}}],[\"规范定义了如下类型的类的加载器\",{\"1\":{\"2279\":1}}],[\"规范\",{\"0\":{\"1506\":1},\"1\":{\"1337\":1,\"1506\":1}}],[\"规范是最好遵守的\",{\"1\":{\"1083\":1}}],[\"规则是必须遵守的\",{\"1\":{\"1082\":1}}],[\"规则\",{\"0\":{\"485\":1},\"1\":{\"3020\":1}}],[\"规模越来越大\",{\"1\":{\"313\":1}}],[\"规格说明书\",{\"0\":{\"21\":1}}],[\"企业都是restapi\",{\"1\":{\"2976\":1}}],[\"企业级应用\",{\"1\":{\"1012\":1}}],[\"企业级开发\",{\"1\":{\"353\":1}}],[\"企业级开发会开发自定义专业监控\",{\"1\":{\"310\":1}}],[\"企业开发时通常使用监听器来处理消息队列中的消息\",{\"1\":{\"456\":1}}],[\"企业开发时更多的是基于springcloud的多服务器的微服务项目\",{\"1\":{\"268\":1}}],[\"正向迭代最细粒度切分算法\",{\"1\":{\"3477\":1}}],[\"正向索引的缺点\",{\"0\":{\"3423\":1}}],[\"正向索引的结构\",{\"0\":{\"3421\":1}}],[\"正向索引解析\",{\"0\":{\"3422\":1}}],[\"正排索引\",{\"0\":{\"3419\":1},\"1\":{\"3427\":1}}],[\"正序\",{\"1\":{\"3243\":1}}],[\"正式为类变量\",{\"1\":{\"2275\":1}}],[\"正因为加载过所有的父类的结构\",{\"1\":{\"1392\":1}}],[\"正确\",{\"1\":{\"1141\":1}}],[\"正确的做法就是提取这句话的关键信息\",{\"1\":{\"3461\":1}}],[\"正确的包\",{\"1\":{\"3210\":1}}],[\"正确的\",{\"1\":{\"1965\":1}}],[\"正确的写法\",{\"1\":{\"1149\":1}}],[\"正确的缩进和空白\",{\"1\":{\"1063\":1}}],[\"正确的注释和注释风格\",{\"1\":{\"1063\":1}}],[\"正数\",{\"1\":{\"3053\":1}}],[\"正数的补码就是其本身\",{\"1\":{\"1121\":1}}],[\"正数的反码是其本身\",{\"1\":{\"1121\":1}}],[\"正数就舍去\",{\"1\":{\"784\":1}}],[\"正数就进一\",{\"1\":{\"784\":1}}],[\"正常查询到结果的响应信息如下\",{\"1\":{\"3141\":1,\"3159\":1}}],[\"正常关闭\",{\"1\":{\"2704\":2}}],[\"正常关闭应用程序\",{\"1\":{\"342\":1}}],[\"正常的方法调用\",{\"0\":{\"1403\":1}}],[\"正常在jdk安装时已经装过了\",{\"1\":{\"1027\":1}}],[\"正常值下\",{\"1\":{\"784\":2}}],[\"正常情况下\",{\"1\":{\"739\":1}}],[\"正常状态\",{\"1\":{\"349\":1}}],[\"正在记录的日志文件的路径及文件名\",{\"1\":{\"308\":3}}],[\"正则条件查询\",{\"0\":{\"3613\":1}}],[\"正则约束\",{\"1\":{\"3029\":1}}],[\"正则表达式是js的语法\",{\"1\":{\"3613\":1}}],[\"正则表达式是否与字符序列匹配\",{\"1\":{\"1000\":1}}],[\"正则表达式\",{\"1\":{\"989\":1,\"990\":1,\"1000\":1,\"3548\":1,\"3613\":1}}],[\"正则表达式和\",{\"1\":{\"984\":1}}],[\"正则模式对象\",{\"1\":{\"987\":1}}],[\"正则相关的类\",{\"0\":{\"984\":1}}],[\"正则的语法都是通用的\",{\"1\":{\"983\":1}}],[\"正则类\",{\"0\":{\"983\":1}}],[\"正则替换第一个子字符串\",{\"0\":{\"680\":1}}],[\"正则全部替换\",{\"0\":{\"679\":1}}],[\"正则\",{\"0\":{\"68\":1,\"675\":1},\"1\":{\"10\":1,\"58\":1}}],[\"则使用默认主节点配置\",{\"1\":{\"3666\":1}}],[\"则使用该方法\",{\"1\":{\"2854\":1,\"2855\":1}}],[\"则索引首先按userid正序排序\",{\"1\":{\"3620\":1}}],[\"则更新一个文档\",{\"1\":{\"3595\":1}}],[\"则更新符合查询条件的多个文档\",{\"1\":{\"3595\":1}}],[\"则主键就是该值\",{\"1\":{\"3591\":1}}],[\"则继续处理数组中的主文档\",{\"1\":{\"3586\":1}}],[\"则执行无序插入\",{\"1\":{\"3586\":1}}],[\"则按顺序插入数组中的文档\",{\"1\":{\"3586\":1}}],[\"则按照声明的先后顺序执行\",{\"1\":{\"1527\":1,\"1528\":1}}],[\"则表示服务正常启动\",{\"1\":{\"3308\":1}}],[\"则表示o1\",{\"1\":{\"754\":1}}],[\"则命令生成一个zip文件\",{\"1\":{\"3293\":1}}],[\"则相当于表的行\",{\"1\":{\"3102\":1}}],[\"则会隐式创建\",{\"1\":{\"3588\":1}}],[\"则会自动创建集合\",{\"1\":{\"3581\":1}}],[\"则会话就会持续建立着\",{\"1\":{\"3033\":1}}],[\"则会进入到doget方法中进行执行\",{\"1\":{\"2814\":1}}],[\"则服务器会销毁该session\",{\"1\":{\"2924\":1}}],[\"则进入到dopost方法\",{\"1\":{\"2814\":1}}],[\"则进入相应case结构中\",{\"1\":{\"1175\":1}}],[\"则将来访问tomcat时\",{\"1\":{\"2705\":1}}],[\"则回滚事务\",{\"1\":{\"2635\":1}}],[\"则提交事务\",{\"1\":{\"2635\":1}}],[\"则无法保证事务\",{\"1\":{\"2631\":1}}],[\"则整体返回true\",{\"1\":{\"2477\":1}}],[\"则写法与构造器引用一致\",{\"1\":{\"2429\":1}}],[\"则先会初始化它的父类\",{\"1\":{\"2277\":1}}],[\"则先去判断hash值是否相同\",{\"1\":{\"1890\":1}}],[\"则接受连接\",{\"1\":{\"2221\":1}}],[\"则建立客户端到服务器的通信线路\",{\"1\":{\"2217\":1}}],[\"则流将返回\",{\"1\":{\"2214\":1}}],[\"则目录下的同名文件不会被覆盖\",{\"1\":{\"2045\":1}}],[\"则目录下有同名文件将被覆盖\",{\"1\":{\"2045\":1}}],[\"则与已经存在指定索引位置上数据以链表的方式存储\",{\"1\":{\"1892\":1}}],[\"则需要在mongodb实例启动时使用选项\",{\"1\":{\"3694\":1}}],[\"则需要使用投影查询\",{\"1\":{\"3607\":1}}],[\"则需要使用输入\",{\"1\":{\"2009\":1}}],[\"则需要先触发其父类的初始化\",{\"1\":{\"2276\":1}}],[\"则需要调用a所在类的equals方法\",{\"1\":{\"1891\":1}}],[\"则需要运算时就进行类型转换\",{\"1\":{\"1139\":1}}],[\"则扩容\",{\"1\":{\"1867\":1}}],[\"则其子类将自动具有该注解\",{\"1\":{\"1664\":1}}],[\"则该流将抛出\",{\"1\":{\"2214\":1}}],[\"则该对象的类必须实现\",{\"1\":{\"1887\":1}}],[\"则该方法不再被建议使用\",{\"1\":{\"1673\":1}}],[\"则该\",{\"1\":{\"1653\":1}}],[\"则该class必须有main方法\",{\"1\":{\"1051\":1}}],[\"则有以下注意点\",{\"1\":{\"1897\":1}}],[\"则有\",{\"1\":{\"1652\":1}}],[\"则在列出枚举值时也必须对应的传入参数\",{\"1\":{\"1619\":1}}],[\"则子类重写的方法也不能使用throws\",{\"1\":{\"1603\":1}}],[\"则子类重写的方法的返回值类型必须是相同的基本数据类型\",{\"1\":{\"1373\":1}}],[\"则子类重写的方法的返回值类型可以是a类或a类的子类\",{\"1\":{\"1373\":1}}],[\"则子类重写的方法的返回值类型只能是void\",{\"1\":{\"1373\":1}}],[\"则程序运行终止\",{\"1\":{\"1599\":1}}],[\"则要求子类一定声明在父类的上面\",{\"1\":{\"1594\":1}}],[\"则谁声明在上\",{\"1\":{\"1594\":1}}],[\"则get\",{\"1\":{\"1530\":1}}],[\"则只能被static修饰\",{\"1\":{\"1526\":1}}],[\"则此方法应显示地声明抛出异常\",{\"1\":{\"1597\":1}}],[\"则此实现类就可以实例化\",{\"1\":{\"1510\":1}}],[\"则此类继承于java\",{\"1\":{\"1364\":1}}],[\"则静态变量在内存中也只会存在一份\",{\"1\":{\"1477\":1}}],[\"则这样的方法通常被声明为类方法\",{\"1\":{\"1472\":1}}],[\"则类a就是内部类\",{\"1\":{\"1449\":1}}],[\"则调用string重新的equals判断两个name是否相等\",{\"1\":{\"1428\":1}}],[\"则默认的当前路径在系统属性user\",{\"1\":{\"2015\":1}}],[\"则默认父类为java\",{\"1\":{\"1423\":1}}],[\"则默认调用的是父类中空参的构造器\",{\"1\":{\"1386\":1}}],[\"则\",{\"1\":{\"1416\":1}}],[\"则编译报错\",{\"1\":{\"1388\":1}}],[\"则必须先与url建立连接\",{\"1\":{\"2240\":1}}],[\"则必须有一个被迭代的集合\",{\"1\":{\"1837\":1}}],[\"则必须能处理掉子类的异常\",{\"1\":{\"1602\":1}}],[\"则必须能\",{\"1\":{\"1506\":1}}],[\"则必须显式的使用\",{\"1\":{\"1382\":1}}],[\"则必须显式的使用super\",{\"1\":{\"1381\":1}}],[\"则必须至少有一个类需要以全类名的方式显示\",{\"1\":{\"1344\":1}}],[\"则仍需要显式导入\",{\"1\":{\"1345\":1}}],[\"则仍然继续向下执行其他case结构中的执行语句\",{\"1\":{\"1175\":1}}],[\"则可以将path设置为\",{\"1\":{\"3056\":1}}],[\"则可以让每个枚举值分别来实现该方法\",{\"1\":{\"1628\":1}}],[\"则可以作为单例模式的实现方式\",{\"1\":{\"1619\":1}}],[\"则可以通过在应用启动时直接产生一个单例对象\",{\"1\":{\"1487\":1}}],[\"则可以省略import结构\",{\"1\":{\"1342\":2}}],[\"则可以标记多个\",{\"1\":{\"1059\":1}}],[\"则并列写出即可\",{\"1\":{\"1342\":1}}],[\"则指定为无名包\",{\"1\":{\"1336\":1}}],[\"则最多有\",{\"1\":{\"1330\":1}}],[\"则系统会通过如下三个步骤来对该类进行初始化\",{\"1\":{\"2273\":1}}],[\"则系统不再提供默认构造器\",{\"1\":{\"1321\":1}}],[\"则系统默认提供一个空参的构造器\",{\"1\":{\"1320\":1}}],[\"则方法声明时\",{\"1\":{\"1277\":1}}],[\"则不要创建root超管用户\",{\"1\":{\"3708\":1}}],[\"则不要合并\",{\"1\":{\"1600\":1}}],[\"则不会插入新文档\",{\"1\":{\"3595\":1}}],[\"则不会有泛型限制\",{\"1\":{\"904\":1}}],[\"则不影响另外一个对象属性a的值\",{\"1\":{\"1261\":1}}],[\"则每个对象都独立的拥有一套类的属性\",{\"1\":{\"1261\":1}}],[\"则是死循环\",{\"1\":{\"1179\":1}}],[\"则退出\",{\"1\":{\"1179\":1}}],[\"则变负数\",{\"1\":{\"1157\":1}}],[\"则取默认的int型\",{\"1\":{\"1116\":1}}],[\"则取决于系统中垃圾回收算法的实现以及系统执行时的情况\",{\"1\":{\"883\":1}}],[\"则文件名必须与类名一样\",{\"1\":{\"1046\":1}}],[\"则为修改值\",{\"1\":{\"1220\":1}}],[\"则为修改\",{\"1\":{\"959\":1}}],[\"则为修改value\",{\"1\":{\"959\":1}}],[\"则立即将它们写入预期目标\",{\"1\":{\"826\":1}}],[\"则结果为偶数\",{\"1\":{\"784\":1}}],[\"则返回一个空流\",{\"1\":{\"2461\":1}}],[\"则返回0\",{\"1\":{\"2214\":1}}],[\"则返回值\",{\"1\":{\"813\":1,\"814\":1}}],[\"则返回null\",{\"1\":{\"791\":1,\"961\":1,\"2233\":1}}],[\"则返回零\",{\"1\":{\"745\":1}}],[\"则返回负整数\",{\"1\":{\"745\":1}}],[\"则返回正整数\",{\"1\":{\"745\":1}}],[\"则返回\",{\"1\":{\"656\":1,\"813\":1,\"814\":1,\"818\":1,\"2214\":2,\"2233\":1,\"2571\":2}}],[\"则意味着在5分钟时触发一次\",{\"1\":{\"501\":1}}],[\"则意味着在5和20分每分钟触发一次\",{\"1\":{\"501\":1}}],[\"则后面其他位置即使配置了debug级别的日志\",{\"1\":{\"308\":1}}],[\"则低于warn的信息都不会输出\",{\"1\":{\"308\":1}}],[\"|grep\",{\"1\":{\"3563\":1}}],[\"||表示\",{\"1\":{\"1153\":1}}],[\"||\",{\"0\":{\"406\":1},\"1\":{\"1151\":1,\"1153\":1,\"2118\":1}}],[\"|\",{\"1\":{\"308\":5,\"418\":4,\"1151\":1,\"1153\":1,\"1571\":13,\"3342\":1,\"3659\":1}}],[\"|findstr\",{\"1\":{\"248\":2}}],[\"白色\",{\"1\":{\"308\":1}}],[\"青色\",{\"1\":{\"308\":1}}],[\"粗红\",{\"1\":{\"308\":1}}],[\"粗粒度地分析每个页面有多少接口\",{\"1\":{\"26\":1}}],[\"洋红\",{\"1\":{\"308\":2}}],[\"彩色日志格式\",{\"1\":{\"308\":1}}],[\"彩色日志\",{\"1\":{\"308\":1}}],[\"来帮你完成\",{\"1\":{\"3746\":1}}],[\"来管理用户对实例的访问\",{\"1\":{\"3696\":1}}],[\"来设置额外票数\",{\"1\":{\"3687\":1}}],[\"来发现彼此\",{\"1\":{\"3526\":1}}],[\"来进行批量写入\",{\"1\":{\"3514\":1}}],[\"来进行格式化\",{\"1\":{\"734\":1}}],[\"来确定文档属于分片\",{\"1\":{\"3410\":1,\"3413\":1}}],[\"来选举一个主节点\",{\"1\":{\"3273\":1}}],[\"来加入这个集群\",{\"1\":{\"3260\":1}}],[\"来查看索引\",{\"1\":{\"3121\":1}}],[\"来定义session的有效时间\",{\"1\":{\"3070\":1}}],[\"来同时配置多个值\",{\"1\":{\"2951\":1}}],[\"来通信\",{\"1\":{\"2928\":1}}],[\"来通过编程的形式决定如何加载bean\",{\"1\":{\"525\":1}}],[\"来获取具体的key\",{\"1\":{\"3044\":1}}],[\"来获取数据\",{\"1\":{\"3003\":1}}],[\"来获取流中的数据\",{\"1\":{\"2876\":1}}],[\"来获取对应的值\",{\"1\":{\"2847\":1}}],[\"来获取详细信息\",{\"1\":{\"342\":1}}],[\"来调用的\",{\"1\":{\"2837\":1}}],[\"来调用具体的功能结构\",{\"1\":{\"1253\":1}}],[\"来手动实现server方法\",{\"1\":{\"2814\":1}}],[\"来作参数的构造器\",{\"1\":{\"2683\":1}}],[\"来说\",{\"1\":{\"2642\":1}}],[\"来储存查询到的数据\",{\"1\":{\"2599\":1}}],[\"来检索结果\",{\"1\":{\"2571\":1}}],[\"来隐藏第三方api\",{\"1\":{\"2546\":1}}],[\"来并行执行操作\",{\"1\":{\"2436\":1}}],[\"来包含通用操作\",{\"1\":{\"2349\":1}}],[\"来包含属性\",{\"1\":{\"1304\":1}}],[\"来操作内存中的类的一切元素\",{\"1\":{\"2262\":1}}],[\"来找到服务端\",{\"1\":{\"2223\":1}}],[\"来表示\",{\"1\":{\"2012\":2,\"2569\":1,\"2668\":1}}],[\"来创建多线程\",{\"1\":{\"1807\":1}}],[\"来控制线程\",{\"1\":{\"1775\":1}}],[\"来解决线程的安全问题\",{\"1\":{\"1756\":1}}],[\"来指定排序的方式\",{\"1\":{\"3611\":1}}],[\"来指定集合保存的类型\",{\"1\":{\"1678\":1}}],[\"来指定编码的字符集\",{\"1\":{\"674\":1}}],[\"来了\",{\"1\":{\"1630\":1}}],[\"来实现调用被代理类方法的方法\",{\"1\":{\"2340\":1}}],[\"来实现一个多线程断点下载的功能\",{\"1\":{\"2140\":1}}],[\"来实现人为的不限制次数的循环\",{\"1\":{\"1186\":1}}],[\"来实例化一个匿名类\",{\"1\":{\"1497\":1}}],[\"来跳出指定标识的循环\",{\"1\":{\"1194\":1}}],[\"来将其后的字符转变为特殊字符型常量\",{\"1\":{\"1102\":1}}],[\"来启动\",{\"1\":{\"1031\":1}}],[\"来启用\",{\"1\":{\"997\":1}}],[\"来组合各种条件\",{\"1\":{\"539\":1}}],[\"来接受消息\",{\"1\":{\"441\":1}}],[\"来使用变量\",{\"1\":{\"308\":1}}],[\"来覆盖源码中设定的属性\",{\"1\":{\"230\":1}}],[\"此输出使用从副本集的其他成员发送的心跳包中获得的数据反映副本集的当前状态\",{\"1\":{\"3669\":1}}],[\"此后\",{\"1\":{\"3274\":1}}],[\"此运行时类\",{\"1\":{\"2261\":1}}],[\"此过程就称为类的加载\",{\"1\":{\"2261\":1}}],[\"此数据报将要发往该主机或者是从该主机接收到的\",{\"1\":{\"2234\":1}}],[\"此数据报将要发往该机器或者是从该机器接收到的\",{\"1\":{\"2234\":1}}],[\"此方法也就作为了被代理类对象要调用的方法\",{\"1\":{\"2343\":1}}],[\"此方法在接收到数据报前一直阻塞\",{\"1\":{\"2233\":1}}],[\"此方法不同于集合直接调用remove\",{\"1\":{\"926\":1,\"1848\":1}}],[\"此套接字连接到的远程端口号\",{\"1\":{\"2214\":1}}],[\"此套接字连接到的远程\",{\"1\":{\"2214\":1}}],[\"此类执行效率高于hashmap\",{\"1\":{\"1913\":1}}],[\"此类不能被其他类所继承\",{\"1\":{\"1349\":1}}],[\"此哈希值经过某种算法计算以后\",{\"1\":{\"1922\":1}}],[\"此哈希值\",{\"1\":{\"1891\":1}}],[\"此外\",{\"1\":{\"1665\":1,\"3617\":1}}],[\"此外缓存不仅可以用于提高永久性存储介质的数据读取效率\",{\"1\":{\"461\":1}}],[\"此对象满足throws后异常类型时\",{\"1\":{\"1598\":1}}],[\"此对象也必须声明为static的\",{\"1\":{\"1489\":1,\"1769\":1}}],[\"此子类方可实例化\",{\"1\":{\"1495\":1}}],[\"此处将列举jdk所有内置的函数式接口\",{\"1\":{\"972\":1}}],[\"此处使用的是redistemplate\",{\"1\":{\"379\":1}}],[\"此处设置字符集\",{\"1\":{\"308\":2}}],[\"此日志文件只记录error级别的\",{\"1\":{\"308\":1}}],[\"此日志文件只记录warn级别的\",{\"1\":{\"308\":1}}],[\"此日志文件只记录info级别的\",{\"1\":{\"308\":1}}],[\"此日志appender是为开发使用\",{\"1\":{\"308\":1}}],[\"此属性生效\",{\"1\":{\"308\":1}}],[\"此时再启动服务\",{\"1\":{\"3717\":1}}],[\"此时执行\",{\"1\":{\"3673\":1}}],[\"此时只有一个\",{\"1\":{\"3668\":1,\"3671\":1}}],[\"此时只能使用post请求\",{\"1\":{\"3137\":1}}],[\"此时已经可以读到数据库了\",{\"1\":{\"3664\":1}}],[\"此时默认不能读写\",{\"1\":{\"3664\":1}}],[\"此时其他节点得不到主节点的响应认为主节点挂掉了\",{\"1\":{\"3532\":1}}],[\"此时集群的状态将会为yellow\",{\"1\":{\"3396\":1}}],[\"此时9200端口是禁止访问的\",{\"1\":{\"3349\":1}}],[\"此时es软件目录为\",{\"1\":{\"3285\":1}}],[\"此时请求体的格式是固定的\",{\"1\":{\"3145\":1}}],[\"此时既可以使用post请求\",{\"1\":{\"3137\":1}}],[\"此时重复发送请求\",{\"1\":{\"3136\":1}}],[\"此时注意过滤器执行的顺序\",{\"1\":{\"2952\":1}}],[\"此时放行前的逻辑不会再执行了\",{\"1\":{\"2948\":1}}],[\"此时无需使用分析器\",{\"1\":{\"3474\":1}}],[\"此时无法取值\",{\"1\":{\"2920\":1}}],[\"此时无值的字段就会自动变为null\",{\"1\":{\"400\":1}}],[\"此时可以将以将集群扩容到\",{\"1\":{\"3394\":1}}],[\"此时可以取到值\",{\"1\":{\"2920\":1}}],[\"此时可以解析特殊字符了\",{\"1\":{\"147\":1}}],[\"此时我们需要分别在doget方法和dopost方法中\",{\"1\":{\"2861\":1}}],[\"此时我们将永远无法操作该对象\",{\"1\":{\"1705\":1}}],[\"此时连接的初始化工作均已完成\",{\"1\":{\"2667\":1}}],[\"此时又获取了要调用的方法和参数列表\",{\"1\":{\"2345\":1}}],[\"此时发生了如下事情\",{\"1\":{\"2345\":1}}],[\"此时客户端与服务端连接成功\",{\"1\":{\"2226\":1}}],[\"此时服务端将一直处于监听状态\",{\"1\":{\"2226\":1}}],[\"此时参数类型变为string\",{\"1\":{\"1968\":1}}],[\"此时应将多个参数一起放在尖括号内\",{\"1\":{\"1963\":1}}],[\"此时应执行resize扩容操作这个\",{\"1\":{\"1928\":1}}],[\"此时应比较key1和已经存在的一个或多个数据的哈希值\",{\"1\":{\"1922\":1}}],[\"此时此索引位置上的所数据改为使用红黑树存储\",{\"1\":{\"1926\":1}}],[\"此时key1\",{\"1\":{\"1922\":2,\"1923\":1}}],[\"此时两个进程陷入死锁状态\",{\"1\":{\"1790\":1}}],[\"此时它已具备了运行的条件\",{\"1\":{\"1749\":1}}],[\"此时线程a就进入阻塞状态\",{\"1\":{\"1727\":1,\"1729\":1}}],[\"此时这种对象就是一个垃圾\",{\"1\":{\"1705\":1}}],[\"此时常量名要大写\",{\"1\":{\"1351\":1}}],[\"此时的请求链接为\",{\"1\":{\"3136\":1}}],[\"此时的文件默认在当前的module下\",{\"1\":{\"2282\":1}}],[\"此时的key1\",{\"1\":{\"1922\":1}}],[\"此时的存储\",{\"1\":{\"1820\":1}}],[\"此时的资源释放\",{\"1\":{\"1590\":1}}],[\"此时的\",{\"1\":{\"1351\":1}}],[\"此时的字符串值声明在字符串常量池中\",{\"1\":{\"1125\":1}}],[\"此时实参赋给形参的是实参存储数据的地址值\",{\"1\":{\"1293\":1}}],[\"此时内存中有1个数组\",{\"1\":{\"1266\":1}}],[\"此时内层循环的循环体一共执行了m\",{\"1\":{\"1200\":1}}],[\"此时变成了\",{\"1\":{\"1114\":1}}],[\"此时字符\",{\"1\":{\"997\":1}}],[\"此时每行都能单独匹配^或$\",{\"1\":{\"997\":1}}],[\"此时指针指向1\",{\"1\":{\"926\":1}}],[\"此时使用collection接口的方法就会被泛型类型限制了\",{\"1\":{\"904\":1}}],[\"此时就会执行放行后的逻辑\",{\"1\":{\"2948\":1}}],[\"此时就变成类调用该方法了\",{\"1\":{\"1767\":1}}],[\"此时就需要指定一个舍入策略\",{\"1\":{\"783\":1}}],[\"此时就必须手动指定配置类了\",{\"1\":{\"229\":1}}],[\"此时synchronized变成上锁状态\",{\"1\":{\"1771\":1}}],[\"此时sort方法将按照重写的compare进行排序\",{\"1\":{\"753\":1}}],[\"此时springboot\",{\"1\":{\"319\":1}}],[\"此时不会产生新的对象\",{\"1\":{\"686\":1}}],[\"此时该对象已经包含了各种信息\",{\"1\":{\"627\":1}}],[\"此时配置文件中carton开头的配置已经全部装载进来了\",{\"1\":{\"553\":1}}],[\"此时配置才能生效\",{\"1\":{\"159\":1}}],[\"此时bean也被注册了\",{\"1\":{\"527\":1}}],[\"此时与timeout冲突\",{\"1\":{\"478\":1}}],[\"此时缓存注解就不会生效\",{\"1\":{\"471\":1}}],[\"此时当前服务不能满足使用需要\",{\"1\":{\"313\":1}}],[\"此时需要使用urlconnection\",{\"1\":{\"2240\":1}}],[\"此时需要为\",{\"1\":{\"229\":1}}],[\"此时需要手动将该配置文件激活\",{\"1\":{\"143\":1}}],[\"此时\",{\"1\":{\"120\":1,\"1233\":1,\"1344\":1,\"1754\":1,\"1976\":1,\"3425\":1,\"3674\":1}}],[\"那分片大小不得超过\",{\"1\":{\"3508\":1}}],[\"那就需要将pattern与matcher一起合作\",{\"1\":{\"998\":1}}],[\"那些属性要配置\",{\"1\":{\"562\":1}}],[\"那些bean要被加载\",{\"1\":{\"532\":1}}],[\"那这个节点就是\",{\"1\":{\"3526\":1}}],[\"那这两个类就无法创建对象\",{\"1\":{\"551\":1}}],[\"那这台测试服务器就是专门给测试人员使用的环境\",{\"1\":{\"37\":1}}],[\"那么忽略他是副本集\",{\"1\":{\"3733\":1}}],[\"那么你就可以在\",{\"1\":{\"3498\":1}}],[\"那么如何处理增量更新后\",{\"1\":{\"3447\":1}}],[\"那么如果该方法适用很多类\",{\"1\":{\"1400\":1}}],[\"那么大部分读请求会直接请求内存\",{\"1\":{\"3441\":1}}],[\"那么集群的状态也将恢复成之前的状态\",{\"1\":{\"3397\":1}}],[\"那么都不能删除\",{\"1\":{\"3276\":1}}],[\"那么tieba\",{\"1\":{\"3057\":1}}],[\"那么treeset的构造函数需要传入参数\",{\"1\":{\"1906\":1}}],[\"那么多个服务器之间cookie可以共享setdomain\",{\"1\":{\"3057\":1}}],[\"那么多个类无需再定义这些属性和行为\",{\"1\":{\"1359\":1}}],[\"那么我们以后按照要求将不同层的代码写在不同的包下\",{\"1\":{\"3012\":1}}],[\"那么我们就可以从内存中\",{\"1\":{\"2287\":1}}],[\"那么在\",{\"1\":{\"2824\":1}}],[\"那么在路径的前面就必须要加\",{\"1\":{\"2824\":1}}],[\"那么在实现类没有重写此方法的情况下\",{\"1\":{\"1517\":1}}],[\"那么第一个访问的人等待的时间就比较长\",{\"1\":{\"2794\":1}}],[\"那么该方法将什么都不返回\",{\"1\":{\"2845\":1}}],[\"那么该异常需要在目标接口的抽象方法上进行声明\",{\"1\":{\"2389\":1}}],[\"那么该变量就不能再访问子类中添加的属性和方法\",{\"1\":{\"1399\":1}}],[\"那么类所属的类就是class类\",{\"1\":{\"2260\":1}}],[\"那么user\",{\"1\":{\"2015\":1}}],[\"那么必须有一个file对象\",{\"1\":{\"2010\":1}}],[\"那么方法参数类型是e的方法\",{\"1\":{\"1978\":1}}],[\"那么方法体中可以不必使用return语句\",{\"1\":{\"1281\":1}}],[\"那么为什么要有泛型呢\",{\"1\":{\"1949\":1}}],[\"那么hashcode一定相同\",{\"1\":{\"1898\":1}}],[\"那么当集合中的数据过多时\",{\"1\":{\"1889\":1}}],[\"那么当前logger将会继承上级的级别\",{\"1\":{\"308\":1}}],[\"那么所有之前路由的值都会无效\",{\"1\":{\"3401\":1}}],[\"那么所有实现了collection接口的集合类都有一个iterator\",{\"1\":{\"1836\":1}}],[\"那么所定义的注解可以用于任何地方\",{\"1\":{\"1662\":1}}],[\"那么一个线程拿到锁\",{\"1\":{\"1762\":1}}],[\"那么编译器都为我们做了什么呢\",{\"1\":{\"1703\":1}}],[\"那么value名称是不能呢省略的\",{\"1\":{\"1647\":1}}],[\"那么注解仅起到标识的作用\",{\"1\":{\"1647\":1}}],[\"那么应该对代码进行排查\",{\"1\":{\"1604\":1}}],[\"那么变量保存的其实是值所在内存的内存地址\",{\"1\":{\"1554\":1}}],[\"那么只是将值复制给另一个变量\",{\"1\":{\"1554\":1}}],[\"那么就可以继续调用该对象的方法\",{\"1\":{\"1542\":1}}],[\"那么子类在没有重写此方法的情况下\",{\"1\":{\"1517\":1}}],[\"那么整个内部的完整结构最好使用内部类\",{\"1\":{\"1450\":1,\"1461\":1}}],[\"那么经过大小写的转换只要是true\",{\"1\":{\"1441\":1}}],[\"那么z\",{\"1\":{\"1428\":1}}],[\"那么y\",{\"1\":{\"1428\":1}}],[\"那么\",{\"1\":{\"1428\":1}}],[\"那么参数就必须传递该类生成的对象\",{\"1\":{\"1400\":1}}],[\"那么优先选择三元运算符\",{\"1\":{\"1163\":1}}],[\"那么右边不参与运算\",{\"1\":{\"1153\":1}}],[\"那么调用者是类或者null也可以\",{\"1\":{\"874\":1,\"2314\":1}}],[\"那么可以考虑使用\",{\"1\":{\"752\":1}}],[\"那么重新执行查询操作\",{\"1\":{\"647\":1}}],[\"那么cat\",{\"1\":{\"551\":1}}],[\"那么对应的配置文件数据就会自动填充到\",{\"1\":{\"545\":1}}],[\"那么不仅当前这个线程会停止\",{\"1\":{\"494\":1}}],[\"那对应的操作方式自然也有所不同\",{\"1\":{\"354\":1}}],[\"那对logback很快就会得心应手\",{\"1\":{\"306\":1}}],[\"那整合将毫无意义\",{\"1\":{\"354\":1}}],[\"难易读取\",{\"1\":{\"303\":1}}],[\"警示等各种附加功能的日志了\",{\"1\":{\"300\":1}}],[\"警告\",{\"1\":{\"80\":1,\"81\":1,\"260\":1,\"705\":1,\"2976\":1,\"3110\":1,\"3201\":1,\"3255\":1,\"3256\":1,\"3265\":1,\"3292\":1,\"3296\":1,\"3297\":1,\"3298\":1,\"3299\":1,\"3326\":1,\"3334\":1,\"3567\":1,\"3570\":1,\"3596\":1,\"3683\":1,\"3716\":1}}],[\"且都获得了\",{\"1\":{\"3686\":1}}],[\"且获得了\",{\"1\":{\"3686\":1}}],[\"且需要手动指定参数\",{\"1\":{\"3556\":1}}],[\"且需要springboot开启\",{\"1\":{\"471\":1}}],[\"且备选主节点中有该参数个节点认为主节点挂了\",{\"1\":{\"3533\":1}}],[\"且分片的数量是不能修改的\",{\"1\":{\"3506\":1}}],[\"且同时修改一个文档的概率很小\",{\"1\":{\"3493\":1}}],[\"且同一个switch语句\",{\"1\":{\"1175\":1}}],[\"且和主分片不再同一个节点\",{\"1\":{\"3387\":1}}],[\"且能访问了\",{\"1\":{\"3308\":1}}],[\"且能定义bean的属性\",{\"1\":{\"535\":1}}],[\"且每启动一个节点\",{\"1\":{\"3265\":1}}],[\"且一般比es版本慢一些\",{\"1\":{\"3104\":1}}],[\"且常驻内存\",{\"1\":{\"2937\":1}}],[\"且共享数据成功\",{\"1\":{\"2903\":1}}],[\"且request提供的方法功能更强大\",{\"1\":{\"2863\":1}}],[\"且两种方法方式的代码逻辑都是一样的\",{\"1\":{\"2861\":1}}],[\"且两个方法的其他参数和返回值相同\",{\"1\":{\"2413\":1}}],[\"且采用默认值即可\",{\"1\":{\"2820\":1}}],[\"且他们都是数组\",{\"1\":{\"2818\":1}}],[\"且自动重写了doget和dopost\",{\"1\":{\"2788\":1}}],[\"且配置好了java\",{\"1\":{\"2703\":1}}],[\"且只能查询一行数据\",{\"1\":{\"2600\":1}}],[\"且只能被赋值一次\",{\"1\":{\"1352\":1}}],[\"且指针下移\",{\"1\":{\"2588\":1}}],[\"且其他形参和返回值类型相同\",{\"1\":{\"2400\":1}}],[\"且如果\",{\"1\":{\"2366\":1}}],[\"且增强的方式是一样\",{\"1\":{\"2334\":1}}],[\"且访问权限需要足够\",{\"1\":{\"2285\":1}}],[\"且麻烦\",{\"1\":{\"1946\":1}}],[\"且要存放的位置非空\",{\"1\":{\"1924\":1}}],[\"且不易阅读\",{\"1\":{\"2558\":1}}],[\"且不同的\",{\"1\":{\"1895\":1}}],[\"且不存在重复和过界的数字\",{\"1\":{\"1761\":1}}],[\"且下一条记录无效\",{\"1\":{\"1845\":1}}],[\"且数字不是完全递减的\",{\"1\":{\"1757\":1}}],[\"且名称为value\",{\"1\":{\"1648\":1}}],[\"且有成员没有默认值\",{\"1\":{\"1647\":1}}],[\"且在使用注解时\",{\"1\":{\"1647\":1}}],[\"且该类不能再创建对象\",{\"1\":{\"1617\":1}}],[\"且该类在类路径下\",{\"1\":{\"836\":1,\"2268\":1}}],[\"且对象不可改变\",{\"1\":{\"1617\":1}}],[\"且确定的情况下\",{\"1\":{\"1616\":1}}],[\"且会在return之前执行\",{\"1\":{\"1591\":1}}],[\"且后缀都是\",{\"1\":{\"1543\":1}}],[\"且父类中又没有无参的构造器\",{\"1\":{\"1388\":1}}],[\"且最好\",{\"1\":{\"1337\":1}}],[\"且没有执行效率的差别\",{\"1\":{\"1185\":1}}],[\"且运算只能是连接运算\",{\"1\":{\"1134\":1}}],[\"且可重复\",{\"1\":{\"1858\":1}}],[\"且可安装内容不止有jdk\",{\"1\":{\"1035\":1}}],[\"且可在返回bean前进行初始化\",{\"1\":{\"514\":1}}],[\"且取完数据后\",{\"1\":{\"925\":1,\"1840\":1}}],[\"且close操作要方法其他异常的finally中\",{\"1\":{\"819\":1}}],[\"且目标位置不能在硬盘中存在\",{\"1\":{\"808\":1}}],[\"且这三个类具有不可变性\",{\"1\":{\"713\":1}}],[\"且具有不可变性\",{\"1\":{\"712\":1}}],[\"且默认有16个长度\",{\"1\":{\"693\":1}}],[\"且此时cartooncatandmouse类与cartoon下的配置绑死了\",{\"1\":{\"551\":1}}],[\"且起了一个名字叫tom\",{\"1\":{\"509\":1}}],[\"且是以白名单的形式\",{\"1\":{\"3349\":1}}],[\"且是以集群部署的\",{\"1\":{\"312\":1,\"313\":1}}],[\"且是final不可变的\",{\"1\":{\"692\":1}}],[\"且是单例的\",{\"1\":{\"504\":1}}],[\"且方法每次必被调用\",{\"1\":{\"468\":1}}],[\"且库要提前创建好\",{\"1\":{\"389\":1}}],[\"且开放自己的接口\",{\"1\":{\"315\":1}}],[\"且包含数据分析\",{\"1\":{\"300\":1}}],[\"且容易暴露信息\",{\"1\":{\"273\":1}}],[\"直连副本集\",{\"0\":{\"3739\":1}}],[\"直至当输入\",{\"1\":{\"2118\":1}}],[\"直到有一方断开连接\",{\"1\":{\"3033\":1}}],[\"直到服务器关闭\",{\"1\":{\"2937\":1}}],[\"直到互联网的出现\",{\"1\":{\"2111\":1}}],[\"直到缓冲区装满了\",{\"1\":{\"2074\":1}}],[\"直到另一线程对该对象发出\",{\"1\":{\"1800\":1}}],[\"直到线程b执行完\",{\"1\":{\"1729\":1}}],[\"直到线程b完全执行完以后\",{\"1\":{\"1727\":1}}],[\"直到异常被处理\",{\"1\":{\"1599\":1}}],[\"直到调用了java\",{\"1\":{\"1392\":1}}],[\"直到循环条件不满足\",{\"1\":{\"1179\":1}}],[\"直到遇到break关键字或此switch\",{\"1\":{\"1175\":1}}],[\"直到遇到换行符\",{\"1\":{\"829\":1}}],[\"直观的展示数据\",{\"1\":{\"3350\":1}}],[\"直观\",{\"1\":{\"300\":1}}],[\"直接上手springboot集成mongodb\",{\"1\":{\"3742\":1}}],[\"直接连接副本集\",{\"1\":{\"3739\":1}}],[\"直接连接副本集将失败\",{\"1\":{\"3661\":1}}],[\"直接连接\",{\"1\":{\"3733\":1}}],[\"直接连接mongodb服务\",{\"1\":{\"3733\":1}}],[\"直接连接文件\",{\"1\":{\"2023\":1}}],[\"直接解压即可\",{\"1\":{\"3555\":1}}],[\"直接刷写到硬盘也是可以的\",{\"1\":{\"3449\":1}}],[\"直接刷到硬盘\",{\"1\":{\"3449\":1}}],[\"直接注释掉\",{\"1\":{\"3339\":2}}],[\"直接启动es服务\",{\"1\":{\"3336\":1}}],[\"直接启动主节点\",{\"1\":{\"3325\":1}}],[\"直接回车\",{\"1\":{\"3298\":1}}],[\"直接回车将采用空密码\",{\"1\":{\"3296\":1}}],[\"直接回车即可\",{\"1\":{\"3296\":1}}],[\"直接手写json字符串作为source方法的第一个参数也可以\",{\"1\":{\"3215\":1}}],[\"直接删除\",{\"1\":{\"3129\":1}}],[\"直接在\",{\"1\":{\"3114\":1}}],[\"直接在配置文件中修改\",{\"1\":{\"2552\":1}}],[\"直接默认项目根目录就行\",{\"1\":{\"2992\":1}}],[\"直接进行重定向\",{\"1\":{\"2907\":1}}],[\"直接进行打包会出现很多问题\",{\"1\":{\"168\":1}}],[\"直接修改contexttype\",{\"1\":{\"2889\":1}}],[\"直接修改server配置文件\",{\"1\":{\"2716\":1}}],[\"直接转发\",{\"1\":{\"2872\":1}}],[\"直接配置好了webservlet\",{\"1\":{\"2788\":1}}],[\"直接配置path\",{\"0\":{\"1029\":1}}],[\"直接利用现有可用连接\",{\"1\":{\"2667\":1}}],[\"直接指定basedao的泛型为orm类名\",{\"1\":{\"2651\":1}}],[\"直接报错\",{\"1\":{\"2253\":1}}],[\"直接或间接地通过网络协议与\",{\"1\":{\"2172\":1}}],[\"直接从数据源或目的地读写数据\",{\"1\":{\"2023\":1,\"2027\":1,\"2043\":1}}],[\"直接操作字符\",{\"1\":{\"2023\":1}}],[\"直接object\",{\"1\":{\"1949\":1}}],[\"直接alt\",{\"1\":{\"1897\":1}}],[\"直接添加成功\",{\"1\":{\"1891\":1}}],[\"直接添加另一个集合\",{\"1\":{\"946\":1}}],[\"直接储存数据\",{\"1\":{\"1700\":1}}],[\"直接继承runtimeexception即可\",{\"1\":{\"1613\":1}}],[\"直接new抽象类\",{\"1\":{\"1497\":1}}],[\"直接被类调用\",{\"1\":{\"1473\":1}}],[\"直接传进去就行\",{\"1\":{\"1443\":1}}],[\"直接访问继承到的父类的private属性\",{\"1\":{\"1368\":1}}],[\"直接访问属性\",{\"0\":{\"1303\":1}}],[\"直接父类\",{\"1\":{\"1363\":1}}],[\"直接导入静态属性和静态方法\",{\"1\":{\"1346\":1}}],[\"直接用ip\",{\"1\":{\"3298\":1}}],[\"直接用即可\",{\"1\":{\"2391\":1}}],[\"直接用类调用静态方法\",{\"1\":{\"1482\":1}}],[\"直接用\",{\"1\":{\"1342\":1}}],[\"直接用就行\",{\"1\":{\"1282\":1}}],[\"直接用负数将compare改成降序\",{\"1\":{\"756\":1}}],[\"直接return\",{\"1\":{\"1277\":1}}],[\"直接定义在类的一对\",{\"1\":{\"1273\":1}}],[\"直接声明了20个对象\",{\"1\":{\"1266\":1}}],[\"直接将一个数值换成二进制数\",{\"1\":{\"1121\":1}}],[\"直接将mapper接口当实现类使用即可\",{\"1\":{\"363\":1}}],[\"直接运行会报错\",{\"0\":{\"1050\":1}}],[\"直接向一个空的集合中复制会报异常\",{\"1\":{\"937\":1}}],[\"直接返回对象\",{\"1\":{\"1770\":1}}],[\"直接返回true\",{\"1\":{\"1428\":1}}],[\"直接返回false\",{\"1\":{\"910\":1,\"1428\":2}}],[\"直接返回缓存值\",{\"1\":{\"468\":1}}],[\"直接打印\",{\"1\":{\"890\":1}}],[\"直接改的源stringbuffer\",{\"1\":{\"700\":2}}],[\"直接与数据库字段和要进行的操作相关\",{\"1\":{\"634\":1}}],[\"直接调用it\",{\"1\":{\"1845\":1}}],[\"直接调用即可\",{\"1\":{\"1457\":1}}],[\"直接调用string类的compareto\",{\"1\":{\"749\":1}}],[\"直接调用就可以拼接查询条件\",{\"1\":{\"630\":1}}],[\"直接调用mapper接口中的方法\",{\"1\":{\"366\":1}}],[\"直接设置日志等级太粗暴了\",{\"1\":{\"295\":1}}],[\"直接就可以使用了\",{\"1\":{\"156\":1}}],[\"直接使用clazz属性即可\",{\"1\":{\"2651\":1}}],[\"直接使用集合中的第一个元素进行计算\",{\"1\":{\"2488\":1}}],[\"直接使用类名访问静态变量\",{\"1\":{\"1478\":1}}],[\"直接使用很少见\",{\"1\":{\"1458\":1}}],[\"直接使用父类中定义的方法\",{\"1\":{\"1409\":1}}],[\"直接使用整数ascii码\",{\"1\":{\"1102\":1}}],[\"直接使用文件名\",{\"1\":{\"822\":1,\"2048\":1,\"2060\":1,\"2069\":1}}],[\"直接使用springdata也是一种选择\",{\"1\":{\"414\":1}}],[\"直接使用uri进行连接\",{\"1\":{\"388\":1}}],[\"直接使用测试类访问mapper接口\",{\"1\":{\"366\":1}}],[\"直接使用注入的对象log\",{\"1\":{\"290\":1,\"309\":1}}],[\"直接使用\",{\"1\":{\"150\":1,\"1267\":1}}],[\"直接可以使用内置的tomcat\",{\"1\":{\"113\":1}}],[\"直接查看快捷笔记\",{\"1\":{\"1\":1}}],[\"颜色\",{\"1\":{\"299\":1}}],[\"为升序排列\",{\"1\":{\"3611\":1}}],[\"为主节点个数\",{\"1\":{\"3533\":1}}],[\"为1\",{\"1\":{\"3516\":1}}],[\"为所有关键字创建索引\",{\"1\":{\"3427\":1}}],[\"为所有的表都创建一个orm类\",{\"1\":{\"2605\":1}}],[\"为每个节点创建一个批量请求\",{\"1\":{\"3417\":1}}],[\"为每个分片构建多文档获取请求\",{\"1\":{\"3416\":1}}],[\"为每个字符分配唯一的字符码\",{\"1\":{\"2109\":1}}],[\"为集群启动第二个节点\",{\"1\":{\"3386\":1}}],[\"为传输层和http层启用tls\",{\"1\":{\"3325\":1}}],[\"为例\",{\"1\":{\"3262\":1,\"3484\":1}}],[\"为user索引创建映射\",{\"1\":{\"3198\":1}}],[\"为uname字段添加映射\",{\"1\":{\"3197\":1}}],[\"为字段类型\",{\"1\":{\"3197\":1}}],[\"为基础的核心搜索架构\",{\"1\":{\"3094\":1}}],[\"为命名空间起前缀\",{\"1\":{\"3030\":1}}],[\"为命名空间起个前缀\",{\"1\":{\"3030\":1}}],[\"为解决传统开发中的数据库连接问题\",{\"1\":{\"2663\":1}}],[\"为开发者屏蔽了一些细节问题\",{\"1\":{\"2527\":1}}],[\"为一个功能创建一个类太浪费了\",{\"1\":{\"2384\":1}}],[\"为这些接口\",{\"1\":{\"1948\":1}}],[\"为止\",{\"1\":{\"1800\":1}}],[\"为何仍需多线程呢\",{\"1\":{\"1692\":1}}],[\"为非静态属性赋值\",{\"1\":{\"1526\":1}}],[\"为非静态代码块\",{\"1\":{\"1526\":1}}],[\"为之后多态性的使用\",{\"1\":{\"1362\":1}}],[\"为使用定义在不同包中的java类\",{\"1\":{\"1340\":1}}],[\"为age赋值\",{\"1\":{\"1266\":1}}],[\"为属性赋值等\",{\"1\":{\"1316\":1}}],[\"为属性赋值\",{\"1\":{\"1259\":1,\"2343\":1}}],[\"为内层元素赋值\",{\"1\":{\"1236\":2,\"1237\":2}}],[\"为外层元素赋值\",{\"1\":{\"1236\":2,\"1237\":2}}],[\"为数组和内层数组都直接分配了内存空间\",{\"1\":{\"1233\":1}}],[\"为指定索引处的元素赋值\",{\"1\":{\"1220\":1}}],[\"为long型变量赋值\",{\"1\":{\"1116\":1}}],[\"为long类型赋值时\",{\"1\":{\"1116\":1}}],[\"为什么需要文档分析\",{\"0\":{\"3461\":1}}],[\"为什么要使用\",{\"0\":{\"3524\":1}}],[\"为什么要打jar包\",{\"0\":{\"2985\":1}}],[\"为什么要有泛型\",{\"0\":{\"1949\":1}}],[\"为什么在控制台就打印了hello这句话呢\",{\"1\":{\"2783\":1}}],[\"为什么不直接同判断返回new好的对象\",{\"1\":{\"2253\":1}}],[\"为什么不直接在业务代码里实现\",{\"1\":{\"471\":1}}],[\"为什么不用new\",{\"1\":{\"2253\":1}}],[\"为什么thread类调用start\",{\"1\":{\"1741\":1}}],[\"为什么\",{\"1\":{\"1097\":1,\"1116\":1}}],[\"为已经到达流末尾而没有可用的字节\",{\"1\":{\"813\":1}}],[\"为创建的类设置属性\",{\"1\":{\"556\":1}}],[\"为bean提供一些属性\",{\"1\":{\"547\":1}}],[\"为\",{\"1\":{\"528\":1,\"3094\":1}}],[\"为不同的手机号模拟出不同的验证码\",{\"1\":{\"472\":1}}],[\"为了强制开启用户访问控制\",{\"1\":{\"3694\":1}}],[\"为了支持对地理空间坐标数据的有效查询\",{\"1\":{\"3621\":1}}],[\"为了保证集群的可用性\",{\"1\":{\"3518\":1}}],[\"为了证明它们的差异\",{\"1\":{\"3465\":1}}],[\"为了使查询更加智能\",{\"1\":{\"3437\":1}}],[\"为了搜索更准确\",{\"1\":{\"3436\":1}}],[\"为了增加效率\",{\"1\":{\"3430\":1}}],[\"为了扩展负载\",{\"1\":{\"3405\":1}}],[\"为了节点的高可用\",{\"1\":{\"3368\":1}}],[\"为了简化操作\",{\"1\":{\"3220\":1}}],[\"为了验证第一个问题\",{\"1\":{\"2814\":1}}],[\"为了实现功能的模块化\",{\"1\":{\"2643\":1}}],[\"为了表示url\",{\"1\":{\"2238\":1}}],[\"为了提高数据读写的速度\",{\"1\":{\"2073\":1}}],[\"为了高效的进行互斥性比对\",{\"1\":{\"1890\":1}}],[\"为了方便查看文档增删改的结果\",{\"1\":{\"3138\":1}}],[\"为了方便理解\",{\"1\":{\"3102\":1}}],[\"为了方便地操作java语言的基本数据类型和string的数据\",{\"1\":{\"2122\":1}}],[\"为了方便应用计算机\",{\"1\":{\"2108\":1}}],[\"为了方便对多个对象的操作\",{\"1\":{\"1820\":1}}],[\"为了方便开发者使用基于字符串为数据的操作\",{\"1\":{\"379\":1}}],[\"为了更好的实现项目中类的管理\",{\"1\":{\"1334\":1}}],[\"为了防止yml中没有配置属性值\",{\"1\":{\"556\":1}}],[\"为了避免内存不足\",{\"1\":{\"3267\":1}}],[\"为了避免出错\",{\"1\":{\"1415\":1}}],[\"为了避免扩容\",{\"1\":{\"696\":1}}],[\"为了避免再次出现初始化异常\",{\"1\":{\"554\":1}}],[\"为了避免这种问题\",{\"1\":{\"217\":1}}],[\"为了解决这个问题\",{\"1\":{\"3365\":1}}],[\"为了解决结构化数据搜索和非结构化数据搜索性能问题\",{\"1\":{\"3099\":1}}],[\"为了解决空指针异常\",{\"1\":{\"2496\":1}}],[\"为了解决上述方式产生的初始化异常\",{\"1\":{\"552\":1}}],[\"为了解决访问数据库的瓶颈\",{\"1\":{\"462\":1}}],[\"为了结构清晰\",{\"1\":{\"442\":1,\"2106\":1}}],[\"为了操作高版本的es\",{\"1\":{\"415\":1}}],[\"为对包设置日志级别\",{\"1\":{\"295\":1}}],[\"为对应组设置日志级别\",{\"1\":{\"295\":1}}],[\"灾难信息\",{\"1\":{\"292\":1}}],[\"等分词处理\",{\"1\":{\"3477\":1}}],[\"等无用词\",{\"1\":{\"3464\":1}}],[\"等循环执行完所有数据都通过executebatch传完以后\",{\"1\":{\"2625\":1}}],[\"等待接收新的文档\",{\"1\":{\"3449\":1}}],[\"等待客户端连接\",{\"1\":{\"2226\":1}}],[\"等待通信请求的为服务端\",{\"1\":{\"2209\":1}}],[\"等待被回收\",{\"1\":{\"1227\":2}}],[\"等语言的源代码\",{\"1\":{\"2045\":1}}],[\"等集合的工具类\",{\"1\":{\"1942\":1}}],[\"等集合的工具类map相关的方法比较少\",{\"1\":{\"929\":1}}],[\"等线程执行完synchronized中的代码后\",{\"1\":{\"1771\":1}}],[\"等函数中\",{\"1\":{\"1679\":1}}],[\"等等\",{\"1\":{\"1650\":1}}],[\"等类的\",{\"1\":{\"1429\":1}}],[\"等\",{\"1\":{\"1230\":2,\"2526\":1,\"3504\":1,\"3632\":1}}],[\"等算术\",{\"1\":{\"778\":1}}],[\"等价于\",{\"1\":{\"668\":1,\"830\":1,\"1971\":1,\"2083\":1}}],[\"等以后又空闲时间再从spring开始\",{\"1\":{\"557\":1}}],[\"等方法的调用都会报空指针异常\",{\"1\":{\"551\":1}}],[\"等项目中用到的时候再说\",{\"1\":{\"488\":1,\"489\":1}}],[\"等级划分\",{\"0\":{\"292\":1}}],[\"等用到了再说\",{\"1\":{\"82\":1,\"83\":1}}],[\"继续比较\",{\"1\":{\"1922\":1}}],[\"继续next\",{\"1\":{\"1843\":1}}],[\"继续执行其后的代码\",{\"1\":{\"1588\":1}}],[\"继续下一次循环\",{\"1\":{\"1195\":1}}],[\"继续在setting进行如下设置\",{\"1\":{\"190\":1}}],[\"继承关系\",{\"0\":{\"2840\":1}}],[\"继承结构\",{\"0\":{\"2806\":1}}],[\"继承了httpservlet\",{\"1\":{\"2788\":1}}],[\"继承于\",{\"1\":{\"2545\":1}}],[\"继承里的泛型\",{\"0\":{\"1984\":1}}],[\"继承泛型类\",{\"0\":{\"1970\":1}}],[\"继承或实现这个接口\",{\"1\":{\"1948\":1}}],[\"继承thread的线程对象\",{\"1\":{\"1767\":1}}],[\"继承thread类的\",{\"0\":{\"1767\":1}}],[\"继承thread类实现多线程的方式和实现runnable接口是不同的\",{\"1\":{\"1763\":1}}],[\"继承thread\",{\"1\":{\"1746\":1}}],[\"继承thred类\",{\"0\":{\"1712\":1}}],[\"继承方式\",{\"1\":{\"1712\":1}}],[\"继承性\",{\"1\":{\"1664\":1}}],[\"继承是一个\",{\"1\":{\"1506\":1}}],[\"继承是不会破坏封装性的\",{\"1\":{\"1366\":1}}],[\"继承它们所有的属性和方法\",{\"1\":{\"1504\":1}}],[\"继承父类中所有的属性和方法\",{\"1\":{\"1384\":1}}],[\"继承的父类和实现的接口中声明了同名同参数的默认方法\",{\"1\":{\"1517\":1}}],[\"继承的规则总结\",{\"0\":{\"1363\":1}}],[\"继承的出现让类与类之间产生了关系\",{\"1\":{\"1362\":1}}],[\"继承的出现减少了代码冗余\",{\"1\":{\"1362\":1}}],[\"继承的意义\",{\"0\":{\"1362\":1}}],[\"继承的类需要传入两个泛型\",{\"1\":{\"637\":1}}],[\"继承不能破坏封装性\",{\"1\":{\"1361\":1}}],[\"继承过来后也是private权限\",{\"1\":{\"1361\":1}}],[\"继承后的效果\",{\"0\":{\"1361\":1}}],[\"继承\",{\"0\":{\"1358\":1,\"1359\":1},\"1\":{\"1250\":1,\"1251\":1}}],[\"继承iservice<book>类\",{\"1\":{\"637\":1}}],[\"继承自importselector\",{\"1\":{\"567\":1}}],[\"继承mybatisplus中的basemapper接口\",{\"1\":{\"374\":1}}],[\"继承只能一次\",{\"1\":{\"289\":1}}],[\"还要开启登录认证\",{\"1\":{\"3716\":1}}],[\"还要追求更好的客户体验\",{\"1\":{\"313\":1}}],[\"还附带了可以直接使用的预包装的分析器\",{\"1\":{\"3465\":1}}],[\"还增加了提交点的概念\",{\"1\":{\"3446\":1}}],[\"还包含从主分片复制数据的过程\",{\"1\":{\"3371\":1}}],[\"还包含了定位该资源的信息\",{\"1\":{\"2243\":1}}],[\"还储存了\",{\"1\":{\"3051\":1}}],[\"还能隐藏一些在程序中抛出的sqleeception\",{\"1\":{\"2682\":1}}],[\"还拿连接数据库举例\",{\"1\":{\"2323\":1,\"2325\":1}}],[\"还必须保证其内部所有属性也必须是可序列化的\",{\"1\":{\"2153\":1}}],[\"还会启用身份认证和授权\",{\"1\":{\"3328\":1}}],[\"还会在关闭流之前刷新缓冲区\",{\"1\":{\"2074\":1}}],[\"还会将父类所有的成员复制一份\",{\"1\":{\"1367\":1}}],[\"还需要在此处添加元素\",{\"1\":{\"1892\":1}}],[\"还可用于保存具有映射关系的关联数组\",{\"1\":{\"1823\":1}}],[\"还可以为专用目的维护其他\",{\"1\":{\"3640\":1}}],[\"还可以包括其他文档\",{\"1\":{\"3546\":1}}],[\"还可以放在方法声明中\",{\"1\":{\"1765\":1}}],[\"还可以定义静态方法\",{\"1\":{\"1515\":1}}],[\"还可以声明自己特有的属性或方法\",{\"1\":{\"1361\":1}}],[\"还可以继续使用\",{\"1\":{\"906\":1}}],[\"还可以通过实现排序接口\",{\"1\":{\"567\":1}}],[\"还可以使用命名关闭mongodb服务\",{\"1\":{\"3721\":1}}],[\"还可以使用能表示字符的其他形式\",{\"1\":{\"1102\":1}}],[\"还可以使用\",{\"1\":{\"518\":1}}],[\"还可以顺带起一个bean的名字\",{\"1\":{\"507\":1}}],[\"还可以对其他缓存技术进行整合\",{\"1\":{\"464\":1}}],[\"还可以提供临时的数据存储空间\",{\"1\":{\"461\":1}}],[\"还可以根据需要设置对应的配置\",{\"1\":{\"384\":1}}],[\"还可以自行添加显示的指标\",{\"1\":{\"344\":1}}],[\"还没有执行完\",{\"1\":{\"1755\":1}}],[\"还没有分配值的时候\",{\"1\":{\"1223\":1}}],[\"还提供了对集合对象设置不可变\",{\"1\":{\"927\":1,\"1943\":1}}],[\"还提供了一种更加方便的方式\",{\"1\":{\"545\":1}}],[\"还提供以下运算\",{\"1\":{\"777\":1}}],[\"还是多次调用sort\",{\"1\":{\"3246\":1}}],[\"还是原来的文档\",{\"1\":{\"3143\":1}}],[\"还是有点冗余\",{\"1\":{\"2863\":1}}],[\"还是会出现线程安全问题\",{\"1\":{\"1762\":1}}],[\"还是会继续向下执行\",{\"1\":{\"1175\":1}}],[\"还是编入class文件中\",{\"1\":{\"1638\":1,\"1657\":1}}],[\"还是要后台根据收集的异常信息去优化代码\",{\"1\":{\"1563\":1}}],[\"还是需要导入\",{\"1\":{\"1345\":1}}],[\"还是表达式2\",{\"1\":{\"1159\":1}}],[\"还是被舍弃了\",{\"1\":{\"1139\":1}}],[\"还是很麻烦\",{\"1\":{\"539\":1}}],[\"还是bean的xml配置文件\",{\"1\":{\"511\":1}}],[\"还是对方已经宕机了\",{\"1\":{\"315\":1}}],[\"还是比较繁琐\",{\"1\":{\"289\":1}}],[\"还有一个订单数据的索引\",{\"1\":{\"3360\":1}}],[\"还有一个部分需要一个完整的结构进行描述\",{\"1\":{\"1450\":1,\"1461\":1}}],[\"还有常见的项目中应用日志的搜索等等\",{\"1\":{\"3096\":1}}],[\"还有其他的元数据文件\",{\"1\":{\"2982\":1}}],[\"还有javadoc等\",{\"1\":{\"1035\":1}}],[\"还有大量内容等待后续添加\",{\"1\":{\"80\":1,\"81\":1}}],[\"还有人机交互逻辑的体现\",{\"1\":{\"24\":1}}],[\"优雅\",{\"1\":{\"1565\":1}}],[\"优点于一身的数据库连接池\",{\"1\":{\"2668\":1}}],[\"优点\",{\"0\":{\"3538\":1},\"1\":{\"1490\":2,\"1776\":1,\"2325\":1}}],[\"优化节点间的任务分布\",{\"1\":{\"3513\":1}}],[\"优化\",{\"0\":{\"3786\":1},\"1\":{\"1604\":1,\"3513\":1}}],[\"优化一\",{\"1\":{\"1204\":2}}],[\"优化二\",{\"1\":{\"1204\":2}}],[\"优化日志对象的创建\",{\"0\":{\"289\":1}}],[\"优先设置该选项卡\",{\"1\":{\"2747\":1}}],[\"优先执行线程b\",{\"1\":{\"1729\":1}}],[\"优先于对象存在\",{\"1\":{\"1473\":1}}],[\"优先找固定参数的\",{\"1\":{\"1376\":1}}],[\"优先寻找的是参数为3\",{\"1\":{\"1376\":1}}],[\"优先使用简化写法\",{\"1\":{\"1219\":1}}],[\"优先使用短路的\",{\"1\":{\"1153\":1}}],[\"优先选择\",{\"1\":{\"1745\":1}}],[\"优先选择他来替代算数运算符\",{\"1\":{\"1146\":1}}],[\"优先选择可变的字符串类\",{\"1\":{\"696\":1}}],[\"优先级的值是1\",{\"1\":{\"3687\":1}}],[\"优先级的值越大\",{\"1\":{\"3687\":1}}],[\"优先级即权重\",{\"1\":{\"3687\":1}}],[\"优先级\",{\"0\":{\"279\":1,\"2826\":1,\"3687\":1},\"1\":{\"567\":1,\"3668\":1,\"3687\":1}}],[\"优先级为1~10\",{\"1\":{\"1735\":1}}],[\"优先级为\",{\"1\":{\"141\":1}}],[\"报告或备份\",{\"1\":{\"3640\":1}}],[\"报异常\",{\"1\":{\"1843\":1}}],[\"报一大堆异常\",{\"1\":{\"1534\":1}}],[\"报non\",{\"1\":{\"782\":1}}],[\"报警后记录等\",{\"1\":{\"303\":1}}],[\"报警\",{\"1\":{\"287\":1}}],[\"报错的情况\",{\"1\":{\"1116\":1}}],[\"报错原因是创建\",{\"1\":{\"420\":1}}],[\"报错信息如下\",{\"0\":{\"3266\":1}}],[\"报错信息\",{\"1\":{\"358\":1,\"390\":1,\"3110\":1}}],[\"报错\",{\"1\":{\"212\":1,\"1072\":1,\"1115\":1,\"1117\":1,\"1161\":1,\"1238\":1,\"1304\":1,\"1354\":1,\"1517\":1,\"1594\":1,\"1969\":1,\"1991\":1,\"1995\":1,\"2708\":1,\"3313\":1,\"3314\":1,\"3346\":1,\"3347\":1,\"3348\":1,\"3715\":1}}],[\"宕机\",{\"1\":{\"287\":1}}],[\"峰值流量\",{\"1\":{\"287\":1}}],[\"动态模式\",{\"1\":{\"3538\":1}}],[\"动态更新的过程\",{\"0\":{\"3444\":1}}],[\"动态更新索引\",{\"0\":{\"3443\":1}}],[\"动态获取虚拟路径\",{\"0\":{\"2916\":1}}],[\"动态资源是具有逻辑性的\",{\"1\":{\"2771\":1}}],[\"动态资源被访问后\",{\"1\":{\"2695\":1}}],[\"动态资源\",{\"1\":{\"2695\":1}}],[\"动态的去调用被代理类中的同名方法a\",{\"1\":{\"2332\":1}}],[\"动态的创建一个代理类及其对象\",{\"1\":{\"2332\":1}}],[\"动态的提供分隔符\",{\"1\":{\"2013\":1}}],[\"动态代理使用\",{\"0\":{\"2331\":1}}],[\"动态代理是指客户通过代理类来调用其它对象的方法\",{\"1\":{\"2325\":1}}],[\"动态代理介绍\",{\"0\":{\"2325\":1}}],[\"动态代理\",{\"0\":{\"2318\":1,\"2319\":1},\"1\":{\"2325\":1}}],[\"动态创建一个随机对象\",{\"1\":{\"2252\":1}}],[\"动态语言\",{\"1\":{\"2247\":1}}],[\"动态语言与静态语言\",{\"0\":{\"2247\":1}}],[\"动态数组\",{\"1\":{\"1858\":1}}],[\"动态绑定\",{\"1\":{\"1407\":2}}],[\"动态调用属于子类的该方法\",{\"1\":{\"1404\":1}}],[\"动态初始化后\",{\"1\":{\"1235\":1}}],[\"动态初始化\",{\"0\":{\"1218\":1,\"1233\":1,\"1234\":1}}],[\"动态条件拼接\",{\"0\":{\"633\":1}}],[\"动态注册\",{\"1\":{\"535\":1}}],[\"动态\",{\"1\":{\"300\":1,\"1826\":1,\"1859\":1,\"2186\":1}}],[\"动态读取配置\",{\"1\":{\"282\":1}}],[\"动态加载配置信息\",{\"1\":{\"268\":1}}],[\"先执行下面这条命令\",{\"1\":{\"3675\":1}}],[\"先执行ht1进程\",{\"1\":{\"1729\":1}}],[\"先了解下关键字与文档之间的关系\",{\"1\":{\"3424\":1}}],[\"先了解两个简单查看文档的方法\",{\"1\":{\"3138\":1}}],[\"先依次启动一次所有节点\",{\"1\":{\"3277\":1}}],[\"先使用错误的用户名和密码\",{\"1\":{\"3715\":1}}],[\"先使用windows环境作为学习和开发使用\",{\"1\":{\"3105\":1}}],[\"先使用javac编译java文件\",{\"1\":{\"2991\":1}}],[\"先进\",{\"1\":{\"2953\":1}}],[\"先进行instanceof的判断\",{\"1\":{\"1415\":1}}],[\"先从硬盘读取一个图片文件\",{\"1\":{\"2894\":1}}],[\"先初始化main方法所在的类\",{\"1\":{\"2277\":1}}],[\"先启动服务端\",{\"1\":{\"2226\":1}}],[\"先关处理流\",{\"1\":{\"2081\":1}}],[\"先占位\",{\"1\":{\"1946\":1}}],[\"先定义一个配置文件\",{\"1\":{\"1938\":1}}],[\"先定义一个实现comparator接口的类\",{\"1\":{\"893\":1}}],[\"先把要添加的元素取哈希值\",{\"1\":{\"1890\":1}}],[\"先到先服务\",{\"1\":{\"1734\":1}}],[\"先后又调用了另外的几个方法\",{\"1\":{\"1603\":1}}],[\"先判断资源是否打开\",{\"1\":{\"1592\":1}}],[\"先操作再赋值\",{\"1\":{\"1529\":1}}],[\"先写到缓冲区中直到缓冲区写满\",{\"1\":{\"2074\":1}}],[\"先写extends\",{\"1\":{\"1509\":1}}],[\"先写注释后写具体代码\",{\"1\":{\"1053\":1}}],[\"先声明\",{\"1\":{\"1272\":1}}],[\"先创建要访问类的对象\",{\"1\":{\"1263\":1}}],[\"先创建file对象\",{\"1\":{\"802\":1,\"2018\":1}}],[\"先给数组分配空间\",{\"1\":{\"1218\":1}}],[\"先自减1\",{\"1\":{\"1141\":1}}],[\"先自增1\",{\"1\":{\"1141\":1}}],[\"先运算再把结果进行赋值\",{\"1\":{\"1144\":1}}],[\"先运算\",{\"1\":{\"1141\":2}}],[\"先编译\",{\"1\":{\"1050\":1}}],[\"先输出数据\",{\"1\":{\"1047\":1}}],[\"先配置个java\",{\"1\":{\"1031\":1}}],[\"先比较年龄属性\",{\"1\":{\"749\":1}}],[\"先提前了解\",{\"1\":{\"545\":1}}],[\"先将该配置文件加入bean管理\",{\"1\":{\"510\":1}}],[\"先查看key里面是否有值\",{\"1\":{\"468\":1}}],[\"先在maven环境中设置用什么具体的环境\",{\"1\":{\"281\":1}}],[\"先学基本用法\",{\"1\":{\"11\":1}}],[\"启用在后台运行mongos或mongod进程的守护进程模式\",{\"1\":{\"3562\":1,\"3656\":1}}],[\"启用或禁用持久性日志以确保数据文件保持有效和可恢复\",{\"1\":{\"3562\":1,\"3656\":1}}],[\"启用身份认证和授权\",{\"1\":{\"3325\":1}}],[\"启用unicode版本的预定义字符类和posix字符类\",{\"1\":{\"997\":1}}],[\"启用文字解析\",{\"1\":{\"997\":1}}],[\"启用缓存\",{\"0\":{\"467\":1}}],[\"启用dev环境的配置文件\",{\"1\":{\"275\":1}}],[\"启用的名字就是application\",{\"1\":{\"275\":1}}],[\"启动访问控制\",{\"0\":{\"3694\":1,\"3696\":1}}],[\"启动仲裁节点\",{\"1\":{\"3658\":1}}],[\"启动副本节点\",{\"1\":{\"3657\":1}}],[\"启动节点\",{\"1\":{\"3656\":1}}],[\"启动节点是有顺序的\",{\"1\":{\"3277\":1}}],[\"启动成功的提示信息\",{\"1\":{\"3563\":1}}],[\"启动方式\",{\"1\":{\"3558\":1}}],[\"启动的方式是进程占用\",{\"1\":{\"3557\":1}}],[\"启动段合并不需要你做任何事\",{\"1\":{\"3457\":1}}],[\"启动node\",{\"1\":{\"3335\":1}}],[\"启动主节点后\",{\"1\":{\"3325\":1}}],[\"启动主节点\",{\"0\":{\"3325\":1}}],[\"启动前\",{\"1\":{\"3303\":1}}],[\"启动es\",{\"0\":{\"3303\":1}}],[\"启动es时\",{\"1\":{\"3292\":1,\"3296\":1,\"3298\":1,\"3299\":1,\"3326\":1}}],[\"启动es时会同时启动自身内置的jvm\",{\"1\":{\"3265\":1}}],[\"启动后就可以在浏览器端访问了\",{\"1\":{\"3285\":1}}],[\"启动后\",{\"1\":{\"3278\":1,\"3279\":1,\"3280\":1}}],[\"启动后会弹出dos窗口\",{\"1\":{\"2703\":1}}],[\"启动第三个节点\",{\"0\":{\"3280\":1,\"3390\":1}}],[\"启动第二个节点\",{\"0\":{\"3279\":1,\"3386\":1}}],[\"启动第二个节点时就必然会闪退\",{\"1\":{\"3265\":1}}],[\"启动第一个节点\",{\"0\":{\"3278\":1}}],[\"启动完后\",{\"1\":{\"3277\":1,\"3340\":1}}],[\"启动集群并验证\",{\"0\":{\"3340\":1}}],[\"启动集群\",{\"0\":{\"3277\":1}}],[\"启动一次后\",{\"1\":{\"3110\":1}}],[\"启动以\",{\"1\":{\"3094\":1}}],[\"启动失败\",{\"1\":{\"2703\":1}}],[\"启动\",{\"0\":{\"2703\":1,\"3556\":1},\"1\":{\"2781\":1,\"3285\":2}}],[\"启动web服务器使用浏览器访问对应的资源\",{\"1\":{\"2696\":1}}],[\"启动当前线程\",{\"1\":{\"1720\":1,\"1727\":1}}],[\"启动创建的线程\",{\"1\":{\"1719\":1}}],[\"启动时需要在bin目录输入命令\",{\"1\":{\"3556\":1}}],[\"启动时\",{\"0\":{\"2709\":1},\"1\":{\"504\":1}}],[\"启动时主动上报\",{\"1\":{\"314\":1}}],[\"启动spring\",{\"1\":{\"499\":1}}],[\"启动springboot项目\",{\"1\":{\"110\":1}}],[\"启动tomcat\",{\"0\":{\"2757\":1},\"1\":{\"319\":1}}],[\"启动pro\",{\"1\":{\"272\":1}}],[\"启动命令的临时属性\",{\"0\":{\"256\":1}}],[\"启动服务器\",{\"1\":{\"448\":1,\"2846\":1}}],[\"启动服务\",{\"0\":{\"3107\":1,\"3563\":1},\"1\":{\"250\":1,\"3304\":1,\"3324\":1}}],[\"启动结果如下\",{\"1\":{\"110\":1}}],[\"启动项目后默认自动打开的浏览器\",{\"1\":{\"2750\":1}}],[\"启动项目时\",{\"1\":{\"259\":1}}],[\"启动项目\",{\"0\":{\"110\":1,\"253\":1}}],[\"启动类文件名改为\",{\"1\":{\"616\":1}}],[\"启动类与三层架构放在同一级\",{\"1\":{\"101\":1}}],[\"启动类\",{\"0\":{\"101\":1,\"164\":1},\"1\":{\"246\":1,\"589\":1}}],[\"启动流程\",{\"1\":{\"45\":1}}],[\"环境部署\",{\"0\":{\"3784\":1}}],[\"环境以elasticsearch\",{\"1\":{\"3262\":1}}],[\"环境准备\",{\"0\":{\"3103\":1}}],[\"环境变量配置的是哪个就使用的哪个版本\",{\"1\":{\"1030\":1}}],[\"环境变量path配置\",{\"0\":{\"1028\":1}}],[\"环境介绍\",{\"0\":{\"1023\":1}}],[\"环境\",{\"0\":{\"331\":1},\"1\":{\"2699\":1}}],[\"环境分类配置文件中常用于设置冲突属性\",{\"1\":{\"275\":1}}],[\"环境搭建\",{\"0\":{\"1021\":1},\"1\":{\"11\":1}}],[\"主从集群和副本集最大的区别就是副本集没有固定的\",{\"1\":{\"3642\":1}}],[\"主从复制和副本集区别\",{\"0\":{\"3642\":1}}],[\"主键\",{\"1\":{\"3545\":1}}],[\"主键不能为空\",{\"1\":{\"403\":1}}],[\"主节点网络不可达\",{\"1\":{\"3685\":1}}],[\"主节点故障\",{\"1\":{\"3685\":1}}],[\"主节点的选举\",{\"0\":{\"3684\":1}}],[\"主节点的角色既为\",{\"1\":{\"3532\":1}}],[\"主节点和从节点的默认优先级是相同的\",{\"1\":{\"3683\":1}}],[\"主节点读写\",{\"0\":{\"3682\":1}}],[\"主节点目录\",{\"1\":{\"3653\":1}}],[\"主节点接收所有写操作\",{\"1\":{\"3641\":1}}],[\"主节点丢失了\",{\"1\":{\"3396\":1}}],[\"主节点并不需要涉及到文档级别的变更和搜索等操作\",{\"1\":{\"3375\":1}}],[\"主节点在启动时根据配置指定\",{\"1\":{\"3373\":1}}],[\"主节点\",{\"0\":{\"3331\":1,\"3332\":1,\"3375\":1},\"1\":{\"3335\":1,\"3396\":1,\"3642\":3,\"3644\":1,\"3652\":1,\"3665\":1,\"3679\":1}}],[\"主节点就是当前主机名\",{\"1\":{\"3307\":1,\"3327\":1}}],[\"主分片延时\",{\"1\":{\"3444\":1}}],[\"主分片将更新复制到副分片ro和r1\",{\"1\":{\"3444\":1}}],[\"主分片写入更新\",{\"1\":{\"3444\":1}}],[\"主分片写完后\",{\"1\":{\"3407\":1}}],[\"主分片并行转发新文档\",{\"1\":{\"3417\":1}}],[\"主分片一个接一个按顺序执行每个操作\",{\"1\":{\"3417\":1}}],[\"主分片的数量\",{\"1\":{\"3400\":1}}],[\"主分片的数目在索引创建时就已经确定了下来\",{\"1\":{\"3393\":1}}],[\"主分片的拷贝\",{\"1\":{\"3369\":1}}],[\"主分片三个\",{\"1\":{\"3392\":1}}],[\"主分片\",{\"1\":{\"3380\":1,\"3508\":1}}],[\"主分片与复制分片\",{\"0\":{\"3369\":1}}],[\"主分片占空间大小\",{\"1\":{\"3127\":1}}],[\"主分片和副分片整体占空间大小\",{\"1\":{\"3127\":1}}],[\"主分片数量\",{\"1\":{\"3127\":1}}],[\"主流搜索引擎软件就两款\",{\"1\":{\"3092\":1}}],[\"主流都是用jar来替代war了\",{\"1\":{\"2997\":1}}],[\"主流持久层技术是\",{\"1\":{\"359\":1}}],[\"主机若进行了重启\",{\"1\":{\"3346\":1}}],[\"主机间通信的端口\",{\"1\":{\"3337\":1}}],[\"主机上运行着jdk\",{\"1\":{\"2703\":1}}],[\"主机ip\",{\"1\":{\"2542\":1}}],[\"主机地址的域名和ip地址\",{\"1\":{\"2190\":1}}],[\"主机名>\",{\"1\":{\"2237\":1}}],[\"主机名\",{\"1\":{\"2183\":1,\"2238\":1,\"2244\":1}}],[\"主线程默认名是\",{\"1\":{\"1721\":1}}],[\"主线程\",{\"1\":{\"1689\":1,\"1728\":2}}],[\"主\",{\"1\":{\"1688\":1,\"3642\":1}}],[\"主要接收所有写操作\",{\"1\":{\"3645\":1}}],[\"主要成员\",{\"1\":{\"3645\":1}}],[\"主要记录其操作日志中的数据集的所有\",{\"1\":{\"3641\":1}}],[\"主要包含\",{\"1\":{\"3526\":1}}],[\"主要数据存在于mysql\",{\"1\":{\"3493\":1}}],[\"主要有主要有两方面的原因\",{\"1\":{\"3365\":1}}],[\"主要关注该方法\",{\"1\":{\"2801\":1}}],[\"主要动态语言\",{\"1\":{\"2247\":1}}],[\"主要指\",{\"1\":{\"1894\":1}}],[\"主要指的是内存层面的存储\",{\"1\":{\"1820\":1}}],[\"主要实现类\",{\"0\":{\"1883\":1},\"1\":{\"1881\":1}}],[\"主要使用t\",{\"1\":{\"2497\":1}}],[\"主要使用\",{\"0\":{\"1860\":1}}],[\"主要功能\",{\"0\":{\"2929\":1},\"1\":{\"1424\":1}}],[\"主要用来删除已经持久化的数据库\",{\"1\":{\"3577\":1}}],[\"主要用到两个导出方式\",{\"1\":{\"2764\":1}}],[\"主要用途\",{\"1\":{\"2463\":1}}],[\"主要用于遍历\",{\"1\":{\"1835\":1,\"1836\":1}}],[\"主要用于应用后台开发\",{\"1\":{\"1011\":1}}],[\"主要用在方法上\",{\"1\":{\"1357\":1}}],[\"主要是软件后台api\",{\"1\":{\"1012\":1}}],[\"主要是collection集合的操作方法\",{\"1\":{\"929\":1}}],[\"主要是list集合\",{\"1\":{\"929\":1}}],[\"主要方法如下\",{\"1\":{\"2682\":1}}],[\"主要方法\",{\"0\":{\"492\":1,\"2097\":1,\"2105\":1}}],[\"主要配置mongodb的连接参数\",{\"1\":{\"388\":1}}],[\"主要设计项目的页面效果\",{\"1\":{\"24\":1}}],[\"主环境的优先级最低\",{\"1\":{\"280\":1}}],[\"主环境属性生效\",{\"1\":{\"279\":1}}],[\"主环境dev\",{\"1\":{\"278\":1}}],[\"主配置文件还会存放通用的配置信息\",{\"1\":{\"275\":1}}],[\"主配置文件\",{\"1\":{\"274\":1}}],[\"命中的文档总数\",{\"1\":{\"3154\":1}}],[\"命令\",{\"1\":{\"1814\":1,\"3296\":1,\"3574\":1}}],[\"命令来编译代码的源文件\",{\"1\":{\"1040\":1}}],[\"命令对生成的\",{\"1\":{\"1038\":1}}],[\"命令对该\",{\"1\":{\"1038\":1}}],[\"命令行提示符发生变化\",{\"1\":{\"3664\":1}}],[\"命令行默认是gbk编码\",{\"1\":{\"2707\":1}}],[\"命令行的编译和执行\",{\"1\":{\"1042\":1}}],[\"命令行编译\",{\"1\":{\"1038\":1}}],[\"命令行方式\",{\"1\":{\"1019\":1}}],[\"命令行交互结束\",{\"1\":{\"887\":1,\"1008\":1}}],[\"命令行打印出了指定的文本\",{\"1\":{\"111\":1}}],[\"命名为node\",{\"1\":{\"3336\":1}}],[\"命名空间\",{\"1\":{\"3030\":1}}],[\"命名\",{\"0\":{\"3008\":1}}],[\"命名规范\",{\"0\":{\"1083\":1}}],[\"命名规则\",{\"1\":{\"304\":1}}],[\"命名规则如下\",{\"1\":{\"277\":1}}],[\"命名严格要求application\",{\"1\":{\"274\":1}}],[\"单实例环境\",{\"0\":{\"3705\":1}}],[\"单字段索引\",{\"0\":{\"3619\":1}}],[\"单播模块包含一个主机列表以控制哪些节点需要\",{\"1\":{\"3526\":1}}],[\"单节点\",{\"1\":{\"3378\":1,\"3380\":1}}],[\"单节点集群指的是集群中只有一个节点\",{\"1\":{\"3377\":1}}],[\"单节点集群\",{\"0\":{\"3377\":1}}],[\"单主机模拟集群\",{\"1\":{\"3323\":1}}],[\"单主机模拟集成环境\",{\"1\":{\"3316\":1}}],[\"单服务的并发处理能力有\",{\"1\":{\"3259\":1}}],[\"单服务器容易出现单点故障\",{\"1\":{\"3259\":1}}],[\"单服务器版本\",{\"1\":{\"268\":1}}],[\"单台机器存储容量有限\",{\"1\":{\"3259\":1}}],[\"单台\",{\"1\":{\"3259\":1}}],[\"单机模拟\",{\"0\":{\"3335\":1}}],[\"单机\",{\"0\":{\"3259\":1,\"3284\":1}}],[\"单机与集群\",{\"0\":{\"3258\":1}}],[\"单点故障\",{\"0\":{\"3385\":1}}],[\"单点服务器也存在其他问题\",{\"1\":{\"3259\":1}}],[\"单点不正常\",{\"1\":{\"3127\":1}}],[\"单点正常\",{\"1\":{\"3127\":1}}],[\"单双都可\",{\"1\":{\"3018\":1}}],[\"单个或多个\",{\"1\":{\"3596\":1}}],[\"单个文档插入\",{\"0\":{\"3585\":1}}],[\"单个文件存放多个环境配置\",{\"1\":{\"273\":1}}],[\"单个\",{\"1\":{\"3093\":1}}],[\"单个值\",{\"1\":{\"2869\":1}}],[\"单参构造器创建的\",{\"1\":{\"2423\":1}}],[\"单参构造器\",{\"0\":{\"2423\":1}}],[\"单列集合\",{\"1\":{\"1881\":1}}],[\"单列数据\",{\"1\":{\"1826\":1,\"1859\":1}}],[\"单核cpu省去了切换\",{\"1\":{\"1692\":1}}],[\"单核cpu\",{\"1\":{\"1689\":1}}],[\"单核cpu和多核cpu\",{\"0\":{\"1689\":1}}],[\"单例模式的使用场景\",{\"0\":{\"1491\":1}}],[\"单例模式核心\",{\"0\":{\"1487\":1}}],[\"单例模式\",{\"0\":{\"1486\":1},\"1\":{\"1306\":1}}],[\"单分支\",{\"0\":{\"1168\":1}}],[\"单\",{\"1\":{\"1153\":1,\"3476\":1}}],[\"单精度\",{\"1\":{\"1094\":1}}],[\"单词边界\",{\"1\":{\"3466\":1}}],[\"单词频次\",{\"1\":{\"3433\":1}}],[\"单词在文档中出现的位置\",{\"1\":{\"3433\":1}}],[\"单词在文档中出现的次数\",{\"1\":{\"3433\":1}}],[\"单词id\",{\"1\":{\"3432\":1,\"3433\":1}}],[\"单词词典内每条索引项记载单词本身的一些信息以及指向\",{\"1\":{\"3431\":1}}],[\"单词词典是由文档集合中出现过的所有单词构成的字符串集合\",{\"1\":{\"3431\":1}}],[\"单词词典\",{\"1\":{\"3431\":2}}],[\"单词2→文档1的id\",{\"1\":{\"3430\":1}}],[\"单词1→文档1的id\",{\"1\":{\"3430\":1}}],[\"单词→文档\",{\"1\":{\"3430\":1}}],[\"单词\",{\"1\":{\"1078\":1,\"3424\":1,\"3429\":2,\"3432\":1,\"3433\":1,\"3476\":1,\"3480\":1}}],[\"单行注释\",{\"0\":{\"1054\":1},\"1\":{\"1038\":1}}],[\"单位ms\",{\"1\":{\"3142\":1,\"3160\":1}}],[\"单位s\",{\"1\":{\"3053\":1}}],[\"单位毫秒\",{\"1\":{\"2673\":1,\"2674\":1}}],[\"单位\",{\"1\":{\"881\":1}}],[\"单位是分钟\",{\"1\":{\"3073\":1}}],[\"单位是ms时间戳\",{\"1\":{\"2196\":1}}],[\"单位是\",{\"1\":{\"793\":1}}],[\"单位byte\",{\"1\":{\"792\":1}}],[\"单一文件版\",{\"0\":{\"270\":1}}],[\"单元测试是有开发者进行的基本debug测试\",{\"1\":{\"29\":1}}],[\"单元测试通过后再进入到下一阶段\",{\"1\":{\"29\":1}}],[\"单元测试\",{\"0\":{\"29\":1}}],[\"补齐目录\",{\"0\":{\"3290\":1,\"3321\":1},\"1\":{\"3285\":1}}],[\"补齐maven\",{\"0\":{\"2739\":1,\"2743\":1}}],[\"补齐启动类后\",{\"1\":{\"164\":1}}],[\"补位的细节\",{\"0\":{\"1156\":1}}],[\"补=\",{\"1\":{\"1121\":1}}],[\"补\",{\"1\":{\"1121\":2}}],[\"补码\",{\"0\":{\"1121\":1},\"1\":{\"1121\":1}}],[\"补充\",{\"0\":{\"480\":1,\"1898\":1,\"2107\":1},\"1\":{\"1416\":1,\"1759\":1,\"2602\":1}}],[\"补充说明\",{\"0\":{\"268\":1,\"711\":1,\"1264\":1,\"1802\":1,\"2253\":1}}],[\"高速缓存\",{\"1\":{\"3551\":1}}],[\"高扩展\",{\"1\":{\"3538\":1}}],[\"高性能\",{\"1\":{\"3535\":1,\"3538\":1}}],[\"高可用\",{\"1\":{\"3373\":1,\"3385\":1,\"3538\":1}}],[\"高亮查询\",{\"1\":{\"3252\":1,\"3253\":2}}],[\"高亮显示\",{\"0\":{\"3192\":1,\"3251\":1}}],[\"高层次概念定义统一资源标识\",{\"1\":{\"2243\":1}}],[\"高优先级的线程被优先执行\",{\"1\":{\"1737\":1}}],[\"高优先级的线程高概率的情况下被执行\",{\"1\":{\"1735\":1}}],[\"高优先级的线程要抢占低优先级线程cpu的执行权\",{\"1\":{\"1735\":1}}],[\"高优先级的线程抢占cpu\",{\"1\":{\"1733\":1}}],[\"高优先级覆盖低优先级的\",{\"1\":{\"264\":1}}],[\"高效性的三个特点\",{\"1\":{\"3547\":1}}],[\"高效率存储和访问\",{\"1\":{\"3541\":1}}],[\"高效率的修改\",{\"1\":{\"1769\":1}}],[\"高效修改的逻辑\",{\"0\":{\"1770\":1}}],[\"高效\",{\"1\":{\"1687\":1,\"2169\":1}}],[\"高内聚\",{\"1\":{\"1300\":1}}],[\"高级查询\",{\"1\":{\"3152\":1}}],[\"高级语言\",{\"1\":{\"1020\":1}}],[\"高级配置\",{\"0\":{\"198\":1},\"1\":{\"45\":1}}],[\"高版本的springdata已经内置了最新的客户端\",{\"1\":{\"414\":1}}],[\"相连\",{\"1\":{\"3628\":1}}],[\"相\",{\"1\":{\"3616\":1}}],[\"相似的词\",{\"1\":{\"3436\":1}}],[\"相似词的问题\",{\"1\":{\"3436\":1}}],[\"相比原来\",{\"1\":{\"3394\":1}}],[\"相应信息如下\",{\"1\":{\"3141\":1}}],[\"相应的方法设置为类方法\",{\"1\":{\"1472\":1}}],[\"相反\",{\"1\":{\"2441\":1,\"2485\":1,\"3452\":1}}],[\"相较于jdk7在底层实现方面的不同点为\",{\"1\":{\"1926\":1}}],[\"相等的标准\",{\"1\":{\"1914\":1,\"1933\":1}}],[\"相等的标准是\",{\"1\":{\"1912\":2}}],[\"相等的对象必须具有相等的散列码\",{\"1\":{\"1885\":1,\"1897\":1}}],[\"相等就比较下一个\",{\"1\":{\"660\":1}}],[\"相同分片的副本不会放在同一节点\",{\"1\":{\"3403\":1}}],[\"相同请求的每次返回的结果是相同的\",{\"1\":{\"3137\":1}}],[\"相同请求的每次返回的结果是不同的\",{\"1\":{\"3137\":1}}],[\"相同泛型的父子类\",{\"0\":{\"1986\":1}}],[\"相同的词\",{\"1\":{\"3436\":1}}],[\"相同的话再去判断equals\",{\"1\":{\"1890\":1}}],[\"相同的元素只能添加一个\",{\"1\":{\"1882\":1}}],[\"相同的并发性和内存语义\",{\"1\":{\"1780\":1}}],[\"相同的key\",{\"1\":{\"959\":1}}],[\"相同值的integer类指向的是同一个内存地址\",{\"1\":{\"1430\":1}}],[\"相同指的是\",{\"1\":{\"1370\":1}}],[\"相同方法名\",{\"1\":{\"1285\":1}}],[\"相同点\",{\"0\":{\"1272\":1},\"1\":{\"1747\":1,\"1785\":1,\"1803\":1}}],[\"相同配置\",{\"1\":{\"264\":1}}],[\"相当于可额外增加0\",{\"1\":{\"3687\":1}}],[\"相当于表\",{\"1\":{\"3102\":1}}],[\"相当于把上面两步合成了一步\",{\"1\":{\"2907\":1}}],[\"相当于<load\",{\"1\":{\"2820\":1}}],[\"相当于<url\",{\"1\":{\"2820\":1}}],[\"相当于<servlet\",{\"1\":{\"2820\":1}}],[\"相当于将某个字节码文件加载到内存中\",{\"1\":{\"2261\":1}}],[\"相当于将参数集合中的所有元素挨个添加到了当前集合\",{\"1\":{\"960\":1}}],[\"相当于实现了泛型中的多态\",{\"1\":{\"1997\":1}}],[\"相当于run\",{\"1\":{\"1807\":1}}],[\"相当于runnable接口\",{\"1\":{\"1807\":1}}],[\"相当于是一个单线程的过程\",{\"1\":{\"1776\":1}}],[\"相当于我们使用try\",{\"1\":{\"1595\":1}}],[\"相当于自动加了个super\",{\"1\":{\"1383\":1}}],[\"相当于if\",{\"1\":{\"1175\":1}}],[\"相当于\",{\"1\":{\"1157\":1,\"1408\":1,\"1866\":1}}],[\"相当\",{\"1\":{\"660\":1}}],[\"相关度统计\",{\"1\":{\"3507\":1}}],[\"相关软件\",{\"1\":{\"2694\":1}}],[\"相关方法\",{\"0\":{\"2611\":1,\"2869\":1,\"2902\":1}}],[\"相关api\",{\"0\":{\"2336\":1}}],[\"相关操作\",{\"0\":{\"2059\":1}}],[\"相关的元数据和资源\",{\"1\":{\"2979\":1}}],[\"相关的接口\",{\"1\":{\"1679\":1}}],[\"相关的bean\",{\"0\":{\"549\":1}}],[\"相关工具类\",{\"1\":{\"1540\":1}}],[\"相关信息\",{\"1\":{\"82\":1,\"83\":1,\"230\":1,\"354\":1,\"359\":1,\"488\":1,\"489\":1,\"503\":1,\"571\":1,\"613\":1,\"3690\":1,\"3741\":1}}],[\"类库\",{\"1\":{\"3106\":1}}],[\"类必须有一个无参数的构造器\",{\"1\":{\"2285\":1}}],[\"类初始化的时机\",{\"0\":{\"2277\":1}}],[\"类构造器是构造类信息的\",{\"1\":{\"2276\":1}}],[\"类构造器<clinit>\",{\"1\":{\"2276\":1}}],[\"类没有提供公共的构造器\",{\"1\":{\"2191\":1}}],[\"类没有公共构造方法\",{\"1\":{\"984\":1}}],[\"类提供的静态\",{\"1\":{\"2167\":1}}],[\"类对象的\",{\"1\":{\"2221\":1}}],[\"类对象的属性不应允许被改动\",{\"1\":{\"1619\":1}}],[\"类对象\",{\"1\":{\"2217\":1}}],[\"类对象含有一个\",{\"1\":{\"2190\":1}}],[\"类对象可以自由移动记录指针\",{\"1\":{\"2130\":1}}],[\"类支持\",{\"1\":{\"2129\":1}}],[\"类介绍\",{\"0\":{\"2008\":1}}],[\"类a是类b的父类\",{\"1\":{\"1986\":1,\"1989\":1}}],[\"类增加了泛型支持\",{\"1\":{\"1948\":1}}],[\"类实现了\",{\"1\":{\"1780\":1}}],[\"类也是一个对象\",{\"1\":{\"1767\":1}}],[\"类也是对象\",{\"1\":{\"1763\":1}}],[\"类也可以作为对象\",{\"1\":{\"1763\":1}}],[\"类加载\",{\"1\":{\"1635\":1}}],[\"类加载器作用是用来把类\",{\"1\":{\"2279\":1}}],[\"类加载器\",{\"0\":{\"837\":1,\"2279\":1},\"1\":{\"2278\":1,\"2338\":1}}],[\"类作为参数的地方\",{\"1\":{\"1586\":1}}],[\"类是公共的\",{\"1\":{\"1530\":1}}],[\"类是对一类事物的描述\",{\"1\":{\"1255\":1}}],[\"类优先\",{\"1\":{\"1517\":1}}],[\"类方法\",{\"1\":{\"1472\":1}}],[\"类属性作为该类各个对象之间共享的变量\",{\"1\":{\"1472\":1}}],[\"类属性\",{\"1\":{\"1472\":1}}],[\"类属性与类方法\",{\"0\":{\"1472\":1}}],[\"类内可以定义属性\",{\"1\":{\"1454\":1}}],[\"类b称为外部类\",{\"1\":{\"1449\":1}}],[\"类在日常开发中\",{\"1\":{\"1429\":1}}],[\"类里面的方法\",{\"1\":{\"1429\":1}}],[\"类不同\",{\"1\":{\"1428\":1}}],[\"类不同于string\",{\"1\":{\"689\":1}}],[\"类只可以被同一个包内部的类访问\",{\"1\":{\"1310\":1}}],[\"类中的\",{\"1\":{\"3086\":1,\"3087\":1}}],[\"类中的常量也常常声明为static\",{\"1\":{\"1485\":1}}],[\"类中的方法可以直接访问类中的成员变量\",{\"1\":{\"1263\":1}}],[\"类中提供了多个\",{\"1\":{\"929\":1}}],[\"类和接口\",{\"1\":{\"2021\":1}}],[\"类和对象的使用\",{\"0\":{\"1260\":1}}],[\"类和方法都可以用\",{\"1\":{\"1060\":1}}],[\"类可以做的事\",{\"1\":{\"1257\":1}}],[\"类拥有的属性\",{\"1\":{\"1257\":1}}],[\"类与多个对象\",{\"0\":{\"1261\":1}}],[\"类与类的成员\",{\"0\":{\"1257\":1}}],[\"类与引用数据类型\",{\"0\":{\"1256\":1}}],[\"类与对象\",{\"0\":{\"1248\":1,\"1254\":1,\"1545\":1}}],[\"类等要素命名时使用的字符序列称为标识符\",{\"1\":{\"1081\":1}}],[\"类变量\",{\"1\":{\"1076\":1,\"1475\":2}}],[\"类体内声明的变量\",{\"1\":{\"1076\":1}}],[\"类上面\",{\"1\":{\"1648\":1}}],[\"类上面就没有设置bean的注解\",{\"1\":{\"517\":1}}],[\"类上的文档格式如下\",{\"1\":{\"1059\":1}}],[\"类上常用文档标记\",{\"0\":{\"1059\":1}}],[\"类一样\",{\"1\":{\"984\":1}}],[\"类的被动引用\",{\"1\":{\"2277\":1}}],[\"类的主动引用\",{\"1\":{\"2277\":1}}],[\"类的链接\",{\"0\":{\"2275\":1}}],[\"类的初始化\",{\"0\":{\"2273\":1,\"2276\":1}}],[\"类的加载\",{\"0\":{\"2271\":1,\"2272\":1,\"2274\":1}}],[\"类的常用方法如下\",{\"1\":{\"2233\":1,\"2234\":1}}],[\"类的识别技巧\",{\"1\":{\"2025\":1}}],[\"类的标识\",{\"1\":{\"1611\":1}}],[\"类的getinfo\",{\"1\":{\"1404\":1}}],[\"类的内部数据操作细节自己完成\",{\"1\":{\"1300\":1}}],[\"类的属性\",{\"1\":{\"1273\":1}}],[\"类的访问机制\",{\"0\":{\"1263\":1}}],[\"类的实例化\",{\"1\":{\"1259\":1}}],[\"类的设计\",{\"1\":{\"1255\":2}}],[\"类的作者\",{\"1\":{\"1059\":1}}],[\"类的\",{\"1\":{\"885\":1,\"1006\":1}}],[\"类的class属性\",{\"0\":{\"834\":1}}],[\"类名\",{\"1\":{\"1058\":1,\"1083\":1,\"1258\":1,\"1259\":2,\"1317\":1,\"1341\":1,\"1416\":1,\"1772\":1}}],[\"类名为全类名\",{\"1\":{\"838\":1}}],[\"类名随便起\",{\"1\":{\"513\":1}}],[\"类相关\",{\"0\":{\"832\":1}}],[\"类似关系型数据库中的表\",{\"1\":{\"3579\":1}}],[\"类似mysql中的水平分表\",{\"1\":{\"3365\":1}}],[\"类似与关系型数据库中的\",{\"1\":{\"3187\":1,\"3247\":1}}],[\"类似邮局某个窗口中的业务员\",{\"1\":{\"2223\":1}}],[\"类似于mysql分布式部署中的从节点\",{\"1\":{\"3368\":1}}],[\"类似于mysql中数据表里的字段\",{\"1\":{\"3363\":1}}],[\"类似于mysql中数据表的一行数据\",{\"1\":{\"3362\":1}}],[\"类似于mysql中的库\",{\"1\":{\"3360\":1}}],[\"类似于mysql的like\",{\"1\":{\"3238\":1}}],[\"类似于百度\",{\"1\":{\"3192\":1,\"3251\":1}}],[\"类似于\",{\"1\":{\"3138\":1,\"3537\":1}}],[\"类似于高中的函数\",{\"1\":{\"1910\":1}}],[\"类似于死循环\",{\"1\":{\"1283\":1}}],[\"类似生活中的公共交通工具\",{\"1\":{\"1812\":1}}],[\"类似\",{\"1\":{\"723\":1}}],[\"类似xml和properties\",{\"1\":{\"144\":1}}],[\"类新增了\",{\"1\":{\"709\":1}}],[\"类型自定义\",{\"1\":{\"3029\":1}}],[\"类型推断\",{\"0\":{\"2365\":1},\"1\":{\"2365\":1,\"2366\":1}}],[\"类型是numbertype\",{\"1\":{\"3029\":1}}],[\"类型是id\",{\"1\":{\"3025\":1}}],[\"类型是inputstream\",{\"1\":{\"2116\":1}}],[\"类型是list\",{\"1\":{\"2674\":1}}],[\"类型是list<\",{\"1\":{\"1996\":1}}],[\"类型是printstream\",{\"1\":{\"2116\":1}}],[\"类型错误\",{\"1\":{\"1946\":1}}],[\"类型不安全\",{\"1\":{\"1955\":1}}],[\"类型不明\",{\"1\":{\"1587\":1}}],[\"类型不一致\",{\"1\":{\"756\":1}}],[\"类型必须匹配\",{\"1\":{\"1443\":1}}],[\"类型时\",{\"1\":{\"1435\":1}}],[\"类型\",{\"0\":{\"3361\":1},\"1\":{\"1405\":1,\"1536\":2,\"1653\":1,\"1967\":2,\"3195\":1,\"3197\":1,\"3233\":2,\"3644\":2}}],[\"类型就是类名\",{\"1\":{\"1256\":1}}],[\"类型间的转换\",{\"0\":{\"1109\":1}}],[\"类型用来判断逻辑条件\",{\"1\":{\"1106\":1}}],[\"类型的对象\",{\"1\":{\"2260\":1}}],[\"类型的属性\",{\"1\":{\"1967\":1}}],[\"类型的\",{\"1\":{\"674\":1,\"1654\":1}}],[\"类型的数组\",{\"1\":{\"673\":1}}],[\"类型转换异常\",{\"0\":{\"1579\":1}}],[\"类型转换\",{\"0\":{\"670\":1,\"1135\":1}}],[\"类型统一\",{\"1\":{\"399\":1}}],[\"类\",{\"0\":{\"332\":1,\"811\":1,\"1044\":1,\"2007\":1,\"2408\":1,\"2411\":1,\"2414\":1,\"2647\":1},\"1\":{\"840\":1,\"984\":1,\"1075\":1,\"1255\":2,\"1273\":1,\"1348\":1,\"1400\":1,\"1478\":1,\"1635\":1,\"1653\":1,\"1661\":1,\"2120\":1,\"2229\":1,\"2244\":2,\"2398\":3,\"2574\":1,\"2810\":1}}],[\"类路径下config目录下配置文件\",{\"1\":{\"262\":1}}],[\"类路径下配置文件\",{\"1\":{\"262\":1}}],[\"依次启动三个集群\",{\"1\":{\"3340\":1}}],[\"依次启动node\",{\"1\":{\"3335\":1}}],[\"依次返回到serlvet\",{\"1\":{\"3007\":1}}],[\"依次匹配各个case中的常量\",{\"1\":{\"1175\":1}}],[\"依然可以进行重写\",{\"1\":{\"1376\":1}}],[\"依然需要new对象\",{\"1\":{\"1280\":1}}],[\"依然是string类型\",{\"1\":{\"1134\":1}}],[\"依然能够生效\",{\"1\":{\"259\":1}}],[\"依赖列表\",{\"0\":{\"590\":1}}],[\"依赖和插件等都准备好了\",{\"1\":{\"586\":1}}],[\"依赖缺失\",{\"1\":{\"420\":1}}],[\"依赖\",{\"0\":{\"319\":1,\"323\":1,\"377\":1,\"387\":1,\"413\":1,\"438\":1,\"450\":1,\"466\":1,\"476\":1,\"482\":1,\"497\":1,\"3205\":1},\"1\":{\"616\":1}}],[\"依赖这些jar包\",{\"1\":{\"244\":1}}],[\"依赖的版本完全取决于springboot的版本\",{\"1\":{\"120\":1}}],[\"依赖的版本号\",{\"1\":{\"119\":1}}],[\"依赖管理\",{\"0\":{\"167\":1},\"1\":{\"119\":1}}],[\"依赖版本\",{\"0\":{\"102\":1}}],[\"新密码\",{\"1\":{\"3714\":1}}],[\"新创建角色可以继承其他角色的权限\",{\"1\":{\"3698\":1}}],[\"新创建的角色会继承包含的角色所有的权限\",{\"1\":{\"3698\":1}}],[\"新应用\",{\"1\":{\"3542\":1}}],[\"新文档时也可以指定\",{\"1\":{\"3498\":1}}],[\"新文档被收集到内存索引缓存\",{\"1\":{\"3449\":1}}],[\"新华字典前面的目录\",{\"1\":{\"3360\":1}}],[\"新节点什么都不用修改直接通过注册token启动\",{\"1\":{\"3333\":1}}],[\"新节点通过主节点创建的注册token加入集群\",{\"1\":{\"3333\":1}}],[\"新节点\",{\"0\":{\"3333\":1}}],[\"新版本的文档被索引到一个新段\",{\"1\":{\"3528\":1}}],[\"新版本的文档必须复制到集群中的其他节点\",{\"1\":{\"3496\":1}}],[\"新版本的es是自动签发证书的\",{\"1\":{\"3285\":1}}],[\"新版的idea默认是没有program\",{\"1\":{\"258\":1}}],[\"新浪\",{\"1\":{\"3094\":1}}],[\"新stream已经是元素修改后的了\",{\"1\":{\"2463\":1}}],[\"新写入的内容会覆盖旧的内容\",{\"1\":{\"2137\":1}}],[\"新元素指向旧元素\",{\"1\":{\"1926\":1}}],[\"新生的线程对象处于新建状态\",{\"1\":{\"1749\":1}}],[\"新建的javaweb项目可能会出现未配置项目导出方式\",{\"1\":{\"2762\":1}}],[\"新建的module的sdk默认是project设置的sdk\",{\"1\":{\"2354\":1}}],[\"新建一个空project\",{\"1\":{\"2730\":1}}],[\"新建工程\",{\"0\":{\"2730\":1}}],[\"新建\",{\"1\":{\"1749\":1}}],[\"新建person\",{\"1\":{\"1680\":1}}],[\"新建日志文件的命名规则\",{\"1\":{\"304\":1}}],[\"新编译后的文件会覆盖原文件\",{\"1\":{\"1040\":1}}],[\"新时间日期api包\",{\"0\":{\"710\":1}}],[\"新时间api介绍\",{\"0\":{\"709\":1}}],[\"新的段被开启\",{\"1\":{\"3449\":1}}],[\"新的值\",{\"1\":{\"3145\":1}}],[\"新的资源分配手段\",{\"1\":{\"2667\":1}}],[\"新的\",{\"1\":{\"709\":1}}],[\"新的覆盖旧的\",{\"1\":{\"469\":1}}],[\"新增文档\",{\"0\":{\"3214\":1},\"1\":{\"3214\":1,\"3450\":1}}],[\"新增了foreach循环\",{\"1\":{\"1850\":1}}],[\"新增\",{\"1\":{\"54\":4,\"614\":1}}],[\"按条件统计记录数\",{\"1\":{\"3609\":1}}],[\"按条件查询\",{\"1\":{\"614\":1}}],[\"按段搜索\",{\"0\":{\"3445\":1},\"1\":{\"3445\":1}}],[\"按着最优规则处理数据对性能提高很大\",{\"1\":{\"3364\":1}}],[\"按顺序出现以下元素\",{\"1\":{\"3029\":1}}],[\"按顺序出现\",{\"1\":{\"3029\":1}}],[\"按顺序从集合中取出数据\",{\"1\":{\"2444\":1}}],[\"按流的角色的不同\",{\"1\":{\"2023\":1}}],[\"按数据流的流向不同\",{\"1\":{\"2023\":1}}],[\"按操作\",{\"1\":{\"2023\":1}}],[\"按\",{\"1\":{\"1883\":1}}],[\"按int长度分配内存\",{\"1\":{\"1098\":1}}],[\"按回车即输入完毕\",{\"1\":{\"887\":1,\"1008\":1}}],[\"按照过滤器类名的字符串自然排序规则比较\",{\"1\":{\"2954\":1}}],[\"按照相同的方法取值\",{\"1\":{\"2920\":1}}],[\"按照\",{\"1\":{\"2833\":1}}],[\"按照上面的方法在idea中修改tomcat会自动修改配置文件\",{\"1\":{\"2755\":1}}],[\"按照上述格式继续写\",{\"1\":{\"256\":1}}],[\"按照提示\",{\"1\":{\"2743\":1}}],[\"按照一定的协议对socket进行读\",{\"1\":{\"2217\":1}}],[\"按照元素数据类型\",{\"1\":{\"1210\":1}}],[\"按照维度\",{\"1\":{\"1210\":1}}],[\"按照变量声明的位置\",{\"0\":{\"1076\":1}}],[\"按照数据类型\",{\"0\":{\"1075\":1}}],[\"按照它们对应的数值大小进行比较\",{\"1\":{\"746\":1}}],[\"按照字符的unicode值来进行比较\",{\"1\":{\"746\":1}}],[\"按照字符串中字符的unicode值进行比较\",{\"1\":{\"746\":1}}],[\"按类型排除性的过滤器\",{\"1\":{\"568\":1}}],[\"按需创建目录\",{\"1\":{\"589\":1}}],[\"按需创建配置类\",{\"1\":{\"442\":1}}],[\"按需加载\",{\"1\":{\"131\":1}}],[\"按大小记录\",{\"1\":{\"308\":3}}],[\"按日期\",{\"1\":{\"308\":3}}],[\"空字符\",{\"1\":{\"3575\":1,\"3581\":1,\"3593\":1}}],[\"空值或者未定义的对象\",{\"1\":{\"3548\":1}}],[\"空参构造器创建的\",{\"1\":{\"2420\":1}}],[\"空参构造器\",{\"0\":{\"2420\":1},\"1\":{\"2285\":1}}],[\"空参构造方法\",{\"1\":{\"646\":1}}],[\"空指针访问\",{\"1\":{\"1561\":1}}],[\"空指针\",{\"0\":{\"1246\":1,\"1575\":1}}],[\"空则返回true\",{\"1\":{\"967\":1}}],[\"空格分析器在空格的地方划分文本\",{\"1\":{\"3468\":1}}],[\"空格分析器\",{\"0\":{\"3468\":1}}],[\"空格将被忽略\",{\"1\":{\"997\":1}}],[\"空格与换行符\",{\"1\":{\"824\":1}}],[\"空格不是空字符串\",{\"1\":{\"659\":1}}],[\"空格\",{\"1\":{\"256\":1,\"1541\":1,\"3575\":1}}],[\"空一格输入两个\",{\"1\":{\"256\":1}}],[\"空间单位\",{\"0\":{\"216\":1}}],[\"空间属性在配置文件中是可以直接指定单位的\",{\"1\":{\"216\":1}}],[\"空间属性\",{\"1\":{\"214\":1}}],[\"语句中的参数的值\",{\"1\":{\"2569\":1,\"2570\":1}}],[\"语句中的参数的索引\",{\"1\":{\"2569\":1,\"2570\":1}}],[\"语句中的参数用问号\",{\"1\":{\"2569\":1}}],[\"语句段或命令从而利用系统的\",{\"1\":{\"2559\":1}}],[\"语句被预编译并存储在此对象中\",{\"1\":{\"2556\":1}}],[\"语句并返回它所生成结果的对象\",{\"1\":{\"2556\":1}}],[\"语句\",{\"1\":{\"2555\":1,\"2565\":1}}],[\"语句进行捕获\",{\"1\":{\"2238\":1}}],[\"语句块选定捕获异常的范围\",{\"1\":{\"1585\":1}}],[\"语句和\",{\"1\":{\"1192\":1}}],[\"语法和js类似\",{\"1\":{\"3577\":1}}],[\"语法风格\",{\"0\":{\"3537\":1}}],[\"语法如下\",{\"1\":{\"3162\":1,\"3609\":1}}],[\"语法总结\",{\"0\":{\"2366\":1,\"3167\":1}}],[\"语法解析\",{\"0\":{\"1642\":1}}],[\"语法格式如下\",{\"1\":{\"3169\":1}}],[\"语法格式\",{\"0\":{\"1174\":1,\"1341\":1,\"2398\":1,\"2419\":1,\"2430\":1}}],[\"语法结构\",{\"0\":{\"434\":1,\"1183\":1,\"1188\":1,\"1585\":1}}],[\"语法\",{\"0\":{\"272\":1,\"1167\":1,\"1360\":1,\"1640\":1,\"1962\":1,\"1980\":1,\"2819\":1,\"3117\":1,\"3122\":1,\"3126\":1,\"3129\":1,\"3133\":1,\"3139\":1,\"3162\":1,\"3169\":1,\"3172\":1,\"3182\":1,\"3185\":1,\"3188\":1,\"3193\":1,\"3197\":1,\"3604\":1},\"1\":{\"256\":1,\"1069\":1,\"1070\":1,\"1071\":1,\"1259\":1,\"1282\":1,\"1440\":1,\"1442\":1,\"1648\":1,\"3632\":1}}],[\"语言结构体的名称\",{\"1\":{\"3547\":1}}],[\"语言分析器\",{\"0\":{\"3469\":1}}],[\"语言客户端\",{\"1\":{\"3298\":1}}],[\"语言开发的\",{\"1\":{\"3202\":1}}],[\"语言中\",{\"1\":{\"1321\":1}}],[\"语言赋予了特殊含义\",{\"1\":{\"1078\":1}}],[\"语言\",{\"1\":{\"95\":1}}],[\"采用结构型数据存储\",{\"1\":{\"3549\":1}}],[\"采用javascript的正则表达式语法\",{\"1\":{\"3548\":1}}],[\"采用歧义分析算法优化查询关键字的搜索排列组合\",{\"1\":{\"3477\":1}}],[\"采用了延迟写入的策略\",{\"1\":{\"3516\":1}}],[\"采用了多子处理器分析模式\",{\"1\":{\"3477\":1}}],[\"采用了特有的\",{\"1\":{\"3477\":1}}],[\"采用同样的算法\",{\"1\":{\"3400\":1}}],[\"采用默认的分词器\",{\"1\":{\"3476\":1}}],[\"采用默认的即可\",{\"1\":{\"3325\":1}}],[\"采用默认的就行\",{\"1\":{\"2542\":1}}],[\"采用request对象的getrequestdispatch方法获取请求转发器对象\",{\"1\":{\"2900\":1}}],[\"采用request提供的获取请求参数的通用方式来获取请求参数\",{\"1\":{\"2873\":1}}],[\"采用注解的方式配置路由\",{\"1\":{\"2816\":1}}],[\"采用函数式接口bifunction<t\",{\"1\":{\"2426\":1}}],[\"采用函数型接口function\",{\"1\":{\"2423\":1}}],[\"采用供给型接口\",{\"1\":{\"2420\":1}}],[\"采用\",{\"1\":{\"2204\":1}}],[\"采用时间片\",{\"1\":{\"1690\":1}}],[\"采用vue和axios\",{\"1\":{\"648\":1}}],[\"采用多个配置文件\",{\"1\":{\"261\":1}}],[\"采用多环境配置文件区分不同场景下的配置\",{\"1\":{\"254\":1}}],[\"采用配置中心更新配置文件\",{\"1\":{\"254\":1}}],[\"采用的默认配置\",{\"1\":{\"113\":1}}],[\"进入bin目录\",{\"1\":{\"3296\":1}}],[\"进入\",{\"1\":{\"3107\":1}}],[\"进入阻塞状态\",{\"1\":{\"1749\":1}}],[\"进\",{\"1\":{\"2479\":1}}],[\"进而提高性能\",{\"1\":{\"3365\":1}}],[\"进而调用父类的父类的构造器\",{\"1\":{\"1392\":1}}],[\"进而控制一切\",{\"1\":{\"525\":1}}],[\"进制转换\",{\"0\":{\"1122\":1}}],[\"进制问题\",{\"0\":{\"1118\":1}}],[\"进一位\",{\"1\":{\"784\":1}}],[\"进1取整\",{\"0\":{\"762\":1},\"1\":{\"762\":1}}],[\"进程编号\",{\"1\":{\"3563\":1}}],[\"进程失去响应\",{\"1\":{\"3532\":1}}],[\"进程占用的内存较大\",{\"1\":{\"3532\":1}}],[\"进程在运行过程中\",{\"1\":{\"1793\":1}}],[\"进程推进顺序非法\",{\"0\":{\"1793\":1}}],[\"进程p2申请资源r1时\",{\"1\":{\"1793\":1}}],[\"进程p1正占用输入设备\",{\"1\":{\"1790\":1}}],[\"进程pid号\",{\"1\":{\"248\":2}}],[\"进程与线程\",{\"0\":{\"1688\":1}}],[\"进程可进一步细化为线程\",{\"1\":{\"1687\":1}}],[\"进程对应了程序的执行过程\",{\"1\":{\"1685\":1}}],[\"进程作为资源分配的单位\",{\"1\":{\"1684\":1}}],[\"进程是动态的\",{\"1\":{\"1684\":1,\"1685\":1}}],[\"进程的概念\",{\"0\":{\"1684\":1}}],[\"进程运行的信息\",{\"1\":{\"329\":1}}],[\"进程\",{\"1\":{\"329\":1,\"1684\":1}}],[\"进行选举\",{\"1\":{\"3533\":1}}],[\"进行搜索功能升级和迁移\",{\"1\":{\"3506\":1}}],[\"进行阶段性升级\",{\"1\":{\"3506\":1}}],[\"进行存储\",{\"1\":{\"3498\":1}}],[\"进行索引和搜索时会自动进行\",{\"1\":{\"3457\":1}}],[\"进行增量更新\",{\"1\":{\"3443\":1}}],[\"进行开启高亮显示\",{\"1\":{\"3193\":1}}],[\"进行开启和关闭\",{\"1\":{\"2631\":1}}],[\"进行关键字搜索时\",{\"1\":{\"3192\":1,\"3251\":1}}],[\"进行分析\",{\"1\":{\"3459\":1}}],[\"进行分组\",{\"1\":{\"3187\":1,\"3247\":1}}],[\"进行分页查询\",{\"1\":{\"627\":1}}],[\"进行访问\",{\"1\":{\"3108\":1,\"3308\":1,\"3330\":1}}],[\"进行访问检查\",{\"1\":{\"2317\":1}}],[\"进行全文检索需要扫描整个表\",{\"1\":{\"3097\":1}}],[\"进行展示\",{\"1\":{\"3007\":1}}],[\"进行监听器配置\",{\"1\":{\"2971\":1}}],[\"进行转发\",{\"1\":{\"2903\":1}}],[\"进行转码\",{\"1\":{\"2091\":1}}],[\"进行请求转发同时共享数据\",{\"0\":{\"2903\":1}}],[\"进行字节流对拷\",{\"1\":{\"2894\":1}}],[\"进行字符串拼接\",{\"1\":{\"700\":1}}],[\"进行必要的设置\",{\"1\":{\"2731\":1}}],[\"进行数据展示\",{\"1\":{\"3003\":1}}],[\"进行数据库操作\",{\"1\":{\"2635\":1}}],[\"进行数据传输\",{\"1\":{\"2217\":1}}],[\"进行sql操作\",{\"1\":{\"2661\":1}}],[\"进行sql注入\",{\"1\":{\"2559\":1}}],[\"进行sql语句的拼接\",{\"1\":{\"2558\":1}}],[\"进行switch\",{\"1\":{\"2335\":1}}],[\"进行计算\",{\"1\":{\"2488\":1}}],[\"进行计算时\",{\"1\":{\"1115\":1}}],[\"进行个性化的增强\",{\"1\":{\"2335\":1}}],[\"进行个简单的控制示例\",{\"1\":{\"525\":1}}],[\"进行一些收尾工作\",{\"1\":{\"2326\":1}}],[\"进行一些参数的断定\",{\"1\":{\"977\":1,\"2392\":1}}],[\"进行工厂的准备工作\",{\"1\":{\"2326\":1}}],[\"进行工程\",{\"1\":{\"96\":1}}],[\"进行连接数据库\",{\"1\":{\"2321\":1}}],[\"进行输出byte\",{\"1\":{\"2220\":1}}],[\"进行对话\",{\"1\":{\"2206\":1}}],[\"进行通讯\",{\"1\":{\"2172\":1}}],[\"进行控制\",{\"1\":{\"2171\":1}}],[\"进行tostring输出\",{\"1\":{\"2157\":1}}],[\"进行try\",{\"1\":{\"1595\":1}}],[\"进行写操作\",{\"1\":{\"3407\":1}}],[\"进行写入\",{\"1\":{\"2139\":1}}],[\"进行写的操作\",{\"1\":{\"2138\":1}}],[\"进行追加写\",{\"1\":{\"2138\":1}}],[\"进行读和写\",{\"1\":{\"2136\":1}}],[\"进行复制\",{\"1\":{\"2084\":1}}],[\"进行文件的复制\",{\"0\":{\"2071\":1},\"1\":{\"2084\":1}}],[\"进行流的操作\",{\"1\":{\"2040\":1}}],[\"进行检测\",{\"1\":{\"1845\":1}}],[\"进行遍历\",{\"0\":{\"1842\":1},\"1\":{\"1957\":1}}],[\"进行其他操作\",{\"1\":{\"1808\":1}}],[\"进行互相转换时\",{\"1\":{\"1447\":1}}],[\"进行重写\",{\"1\":{\"1428\":1}}],[\"进行比较时\",{\"1\":{\"1426\":1}}],[\"进行赋值时\",{\"1\":{\"1554\":1}}],[\"进行赋值\",{\"1\":{\"1274\":1}}],[\"进行安装java17\",{\"1\":{\"1035\":1}}],[\"进行替换\",{\"1\":{\"989\":1}}],[\"进行判断\",{\"1\":{\"977\":1,\"2392\":1}}],[\"进行定制排序\",{\"1\":{\"932\":1,\"934\":1,\"935\":1}}],[\"进行自然排序\",{\"1\":{\"932\":1}}],[\"进行返回\",{\"1\":{\"925\":1,\"1840\":1}}],[\"进行排序\",{\"1\":{\"892\":1,\"1887\":1}}],[\"进行降序排序\",{\"1\":{\"756\":1}}],[\"进行格式化\",{\"1\":{\"732\":2}}],[\"进行条件查询时\",{\"1\":{\"633\":1}}],[\"进行条件查询\",{\"1\":{\"631\":1}}],[\"进行模糊查询\",{\"1\":{\"631\":1}}],[\"进行redis连接\",{\"1\":{\"514\":1}}],[\"进行整合\",{\"1\":{\"489\":1}}],[\"进行依赖管理\",{\"1\":{\"125\":1}}],[\"进行需求调研\",{\"1\":{\"33\":1}}],[\"进行单元测试\",{\"1\":{\"29\":1}}],[\"进行编码实现\",{\"1\":{\"28\":1}}],[\"查找集群中其他节点的\",{\"1\":{\"3355\":1}}],[\"查找\",{\"1\":{\"1883\":1}}],[\"查找替换\",{\"1\":{\"929\":1}}],[\"查看用户\",{\"0\":{\"3712\":1}}],[\"查看角色权限\",{\"0\":{\"3699\":1}}],[\"查看优先级\",{\"0\":{\"3688\":1}}],[\"查看member可知\",{\"1\":{\"3678\":1}}],[\"查看副本集状态\",{\"0\":{\"3669\":1},\"1\":{\"3673\":1,\"3674\":1}}],[\"查看副本集的配置内容\",{\"0\":{\"3666\":1}}],[\"查看副本集信息时\",{\"1\":{\"3665\":1}}],[\"查看副本集\",{\"0\":{\"3665\":1}}],[\"查看启动结果\",{\"0\":{\"3659\":1}}],[\"查看执行计划\",{\"1\":{\"3634\":1}}],[\"查看创建的索引\",{\"1\":{\"3627\":1}}],[\"查看comment集合中所有的索引情况\",{\"1\":{\"3623\":1}}],[\"查看当前库中的集合\",{\"0\":{\"3580\":1}}],[\"查看当前虚拟内存\",{\"1\":{\"3313\":1,\"3346\":1}}],[\"查看正在使用的数据库\",{\"0\":{\"3576\":1}}],[\"查看所有数据库\",{\"0\":{\"3574\":1}}],[\"查看所有索引\",{\"0\":{\"3125\":1}}],[\"查看是否启动了\",{\"1\":{\"3563\":1}}],[\"查看三个节点的集群情况\",{\"1\":{\"3391\":1}}],[\"查看集群情况\",{\"0\":{\"3387\":1,\"3391\":1},\"1\":{\"3383\":1,\"3387\":1}}],[\"查看集群信息\",{\"1\":{\"3278\":1,\"3335\":1,\"3340\":1}}],[\"查看存放在elasticsearch中的数据\",{\"1\":{\"3350\":1}}],[\"查看主节点状态\",{\"1\":{\"3330\":1}}],[\"查看查询的结果集\",{\"1\":{\"3227\":1,\"3231\":1,\"3234\":1,\"3237\":1,\"3240\":1,\"3242\":1,\"3244\":1,\"3253\":1}}],[\"查看查询的结果\",{\"1\":{\"3226\":1,\"3249\":1}}],[\"查看操作结果\",{\"1\":{\"3220\":1,\"3221\":1}}],[\"查看操作状态\",{\"1\":{\"3209\":1}}],[\"查看请求的结果\",{\"1\":{\"3217\":1}}],[\"查看返回的结果\",{\"1\":{\"3214\":1}}],[\"查看响应状态\",{\"1\":{\"3212\":1}}],[\"查看映射\",{\"0\":{\"3199\":1}}],[\"查看索引的\",{\"1\":{\"3211\":1}}],[\"查看索引\",{\"0\":{\"3211\":1,\"3283\":1,\"3623\":1}}],[\"查看索引中创建的映射\",{\"1\":{\"3199\":1}}],[\"查看索引下的全部文档\",{\"0\":{\"3142\":1,\"3160\":1}}],[\"查看索引向\",{\"1\":{\"3121\":1}}],[\"查看文档就是查看数据\",{\"1\":{\"3138\":1}}],[\"查看文档\",{\"0\":{\"3138\":1}}],[\"查看es服务器上的shopping索引\",{\"1\":{\"3123\":1}}],[\"查看某个索引\",{\"0\":{\"3121\":1}}],[\"查看控制台的log\",{\"1\":{\"2755\":1}}],[\"查看进程\",{\"1\":{\"2708\":1}}],[\"查看到的源码是经过反编译的\",{\"1\":{\"2539\":1}}],[\"查看线程的优先级\",{\"1\":{\"1735\":1}}],[\"查看\",{\"0\":{\"3157\":1},\"1\":{\"1589\":1,\"2126\":1}}],[\"查看版本信息\",{\"1\":{\"1035\":1}}],[\"查看安装\",{\"1\":{\"1035\":1}}],[\"查看测试结果\",{\"1\":{\"175\":1}}],[\"查\",{\"1\":{\"402\":1,\"3698\":1}}],[\"查阅监控中的\",{\"1\":{\"340\":1}}],[\"查询多个角色权限\",{\"1\":{\"3702\":1}}],[\"查询多条记录构成的集合\",{\"0\":{\"2689\":1}}],[\"查询其它数据库中指定的角色权限\",{\"1\":{\"3702\":1}}],[\"查询当前数据库中的某角色的权限\",{\"1\":{\"3702\":1}}],[\"查询刚创建的索引\",{\"1\":{\"3626\":1}}],[\"查询评论集合中userid为1003\",{\"1\":{\"3616\":1}}],[\"查询评论集合中userid字段不包含1003和1004的文档\",{\"1\":{\"3615\":1}}],[\"查询评论集合中likenum大于等于700\",{\"1\":{\"3616\":1}}],[\"查询评论的集合中userid字段包含1003或1004的文档\",{\"1\":{\"3615\":1}}],[\"查询评论点赞数量大于700的记录\",{\"1\":{\"3614\":1}}],[\"查询评论内容包含hello的\",{\"1\":{\"3613\":1}}],[\"查询用户id是1开头的\",{\"1\":{\"3613\":1}}],[\"查询效率是非常低下的\",{\"1\":{\"3524\":1}}],[\"查询效率就会下降\",{\"1\":{\"3515\":1}}],[\"查询速度快\",{\"1\":{\"3524\":1}}],[\"查询速度比list快\",{\"1\":{\"1887\":1}}],[\"查询优化\",{\"0\":{\"3510\":1}}],[\"查询集群信息\",{\"0\":{\"3380\":1},\"1\":{\"3380\":1}}],[\"查询集合中所有数据\",{\"0\":{\"408\":1}}],[\"查询es的pid\",{\"1\":{\"3342\":1}}],[\"查询索引信息\",{\"0\":{\"3381\":1}}],[\"查询索引\",{\"1\":{\"3211\":1}}],[\"查询category\",{\"1\":{\"3194\":1}}],[\"查询custom表中的数据\",{\"0\":{\"2597\":1}}],[\"查询第二页的数据\",{\"1\":{\"3183\":1}}],[\"查询price字段的所有聚合数据\",{\"1\":{\"3189\":1}}],[\"查询price>6500的文档\",{\"1\":{\"3173\":1}}],[\"查询price为5000\",{\"1\":{\"3170\":1}}],[\"查询price为5000的数据\",{\"1\":{\"3163\":1}}],[\"查询条件是值的一部分\",{\"1\":{\"3180\":1}}],[\"查询条件是字段值的一部分\",{\"1\":{\"3176\":1}}],[\"查询条件和查询结果要完全对应\",{\"1\":{\"3178\":1}}],[\"查询条件被拆解开分别进行各自的匹配\",{\"1\":{\"3176\":1}}],[\"查询条件的写法\",{\"1\":{\"3172\":1,\"3193\":1}}],[\"查询条件的属性名是直接手写的字符串\",{\"1\":{\"632\":1}}],[\"查询条件\",{\"1\":{\"3167\":1,\"3169\":1,\"3182\":1,\"3185\":1,\"3193\":1,\"3244\":1,\"3609\":1}}],[\"查询类型\",{\"1\":{\"3167\":1}}],[\"查询类似于最大的\",{\"0\":{\"2691\":1}}],[\"查询所有角色权限\",{\"0\":{\"3700\":1,\"3701\":1}}],[\"查询所有文档\",{\"0\":{\"3226\":1},\"1\":{\"3165\":1,\"3226\":1}}],[\"查询所有数据\",{\"0\":{\"3165\":1,\"3605\":1},\"1\":{\"3226\":1}}],[\"查询到的结果\",{\"1\":{\"3164\":1}}],[\"查询删除price值为5000的文档\",{\"1\":{\"3153\":1}}],[\"查询已删除的文档\",{\"0\":{\"3150\":1}}],[\"查询命中\",{\"1\":{\"3142\":1,\"3160\":1}}],[\"查询文档\",{\"0\":{\"3225\":1},\"1\":{\"3113\":1}}],[\"查询一条记录\",{\"0\":{\"2688\":1}}],[\"查询单个值对象\",{\"1\":{\"2684\":1}}],[\"查询表中的所有记录构成的集合\",{\"1\":{\"2655\":1,\"2656\":1}}],[\"查询特殊值的dql方法\",{\"1\":{\"2653\":1}}],[\"查询的结果如下\",{\"1\":{\"3712\":1}}],[\"查询的结果同时也被实体类的属性接收\",{\"1\":{\"408\":1}}],[\"查询的字段只包含索引时\",{\"1\":{\"3636\":1}}],[\"查询的时候\",{\"1\":{\"3614\":1}}],[\"查询的时候传递该属性\",{\"1\":{\"2650\":1}}],[\"查询不同的表\",{\"0\":{\"2605\":1}}],[\"查询示例\",{\"0\":{\"2596\":1,\"3163\":1}}],[\"查询操作比较复杂一点\",{\"1\":{\"2584\":1}}],[\"查询是否完成\",{\"1\":{\"1808\":1}}],[\"查询某个元素首次出现的位置\",{\"1\":{\"948\":1}}],[\"查询和修改等操作\",{\"1\":{\"927\":1,\"1943\":1}}],[\"查询字符串是否包含某个字符串\",{\"1\":{\"663\":1}}],[\"查询结果解析\",{\"0\":{\"3635\":1}}],[\"查询结果根据price字段进行倒叙排序\",{\"1\":{\"3186\":1}}],[\"查询结果如下\",{\"1\":{\"3142\":1,\"3160\":1}}],[\"查询结果是一个resultset\",{\"1\":{\"2586\":1}}],[\"查询结果\",{\"1\":{\"628\":1,\"3141\":1,\"3159\":1,\"3199\":1}}],[\"查询\",{\"0\":{\"3409\":1,\"3416\":1},\"1\":{\"614\":1,\"623\":1,\"1899\":1,\"2683\":1,\"3176\":2,\"3177\":1,\"3180\":1,\"3224\":1}}],[\"查询index\",{\"0\":{\"423\":1}}],[\"查询出要更新的文档\",{\"1\":{\"406\":1}}],[\"查询对象\",{\"1\":{\"406\":1}}],[\"查询方法非常多\",{\"1\":{\"405\":1}}],[\"查询方法\",{\"1\":{\"405\":1}}],[\"查询语法\",{\"0\":{\"405\":1}}],[\"查询数据库\",{\"1\":{\"3002\":1}}],[\"查询数据\",{\"1\":{\"402\":1,\"3227\":1,\"3231\":1,\"3234\":1,\"3237\":1,\"3240\":1,\"3242\":1,\"3244\":1,\"3249\":1,\"3253\":1}}],[\"查询指定权限\",{\"0\":{\"3702\":1}}],[\"查询指定集合的全部数据\",{\"1\":{\"402\":1}}],[\"查询指定端口\",{\"1\":{\"248\":1}}],[\"查询端口\",{\"1\":{\"248\":1}}],[\"从备份文件中还原恢复mongodb数据\",{\"1\":{\"3704\":1}}],[\"从节点是没有读写权限的\",{\"1\":{\"3683\":1}}],[\"从节点读写\",{\"0\":{\"3683\":1}}],[\"从节点\",{\"1\":{\"3679\":2}}],[\"从主节点通过复制操作以维护相同的数据集\",{\"1\":{\"3645\":1}}],[\"从主分片检索文档\",{\"1\":{\"3413\":1}}],[\"从权限的角度来看\",{\"1\":{\"3574\":1}}],[\"从最早的开始查询完后再对结果进行合并\",{\"1\":{\"3443\":1}}],[\"从es8\",{\"1\":{\"3292\":1,\"3326\":1}}],[\"从中取出数据\",{\"1\":{\"3061\":1}}],[\"从浏览器发出请求到服务端响应数据给前端之后\",{\"1\":{\"3033\":1}}],[\"从浏览器发送\",{\"1\":{\"2915\":2}}],[\"从servletrequest中移除属性时调用\",{\"1\":{\"2967\":1}}],[\"从servletcontext中移除属性时调用\",{\"1\":{\"2965\":1}}],[\"从httpsession中移除属性时调用\",{\"1\":{\"2966\":1}}],[\"从请求中可以解析出三部分内容分别是`localhost\",{\"1\":{\"2785\":1}}],[\"从池子里拿出一个数据库连接\",{\"1\":{\"2675\":1}}],[\"从连接池拿出一个连接对象\",{\"1\":{\"2666\":1}}],[\"从数据表中读取blob类型字段\",{\"0\":{\"2613\":1}}],[\"从数组底层的运行机制来看\",{\"1\":{\"1230\":1}}],[\"从嵌套集合生成的流中\",{\"1\":{\"2472\":1}}],[\"从班级对象集合中\",{\"1\":{\"2471\":1}}],[\"从学生对象集合中\",{\"1\":{\"2470\":1}}],[\"从一个流中获取新流\",{\"1\":{\"2463\":1}}],[\"从流中排除某些元素\",{\"1\":{\"2458\":1}}],[\"从官网直接下载安装即可\",{\"1\":{\"2353\":1}}],[\"从java\",{\"1\":{\"2351\":1}}],[\"从jdk1\",{\"1\":{\"1948\":1}}],[\"从jdk\",{\"1\":{\"1778\":1}}],[\"从jdk5\",{\"1\":{\"1634\":1}}],[\"从键盘输入字符串\",{\"1\":{\"2118\":1}}],[\"从键盘读入个数不确定的整数\",{\"1\":{\"1186\":1}}],[\"从文件中\",{\"1\":{\"2082\":1}}],[\"从文件系统中的某个文件中获得输出字节\",{\"1\":{\"2035\":1}}],[\"从文件系统中的某个文件中获得输入字节\",{\"1\":{\"2032\":1}}],[\"从\",{\"1\":{\"1830\":1,\"2569\":1,\"2570\":1,\"3641\":1,\"3642\":1,\"3644\":1}}],[\"从本质上讲\",{\"1\":{\"1502\":1}}],[\"从过程上看\",{\"0\":{\"1392\":1}}],[\"从结果上看\",{\"0\":{\"1391\":1}}],[\"从实体中寻找解决问题相关的属性和功能\",{\"1\":{\"1252\":1}}],[\"从大到小排序\",{\"1\":{\"932\":1}}],[\"从集合中删除指定的元素\",{\"1\":{\"912\":1}}],[\"从off开始\",{\"1\":{\"824\":1}}],[\"从off处开始读\",{\"1\":{\"818\":1}}],[\"从此套接字接收数据报包\",{\"1\":{\"2233\":1}}],[\"从此套接字发送数据报包\",{\"1\":{\"2233\":1}}],[\"从此扫描仪查找并返回下一个完整令牌\",{\"1\":{\"887\":1,\"1008\":1}}],[\"从此输入流中将最多\",{\"1\":{\"814\":1}}],[\"从此计时器的任务队列中移除所有已取消的任务\",{\"1\":{\"492\":1}}],[\"从输入流中读取数据的下一个字节\",{\"1\":{\"813\":1}}],[\"从1开始算\",{\"1\":{\"703\":1}}],[\"从左开始算\",{\"1\":{\"703\":1}}],[\"从0开始步进\",{\"1\":{\"1208\":1}}],[\"从0开始的自增数字\",{\"1\":{\"304\":1}}],[\"从0添加到两万\",{\"1\":{\"695\":1}}],[\"从第一个字符开始比较\",{\"1\":{\"660\":1}}],[\"从第几页开始查询\",{\"1\":{\"628\":1}}],[\"从该索引处反向搜索\",{\"1\":{\"657\":1}}],[\"从lib目录中查找\",{\"1\":{\"247\":1}}],[\"从而使多台机器拥有同一数据的多个副本\",{\"1\":{\"3639\":1}}],[\"从而使众多的计算机可以方便地互相传递信息\",{\"1\":{\"2172\":1}}],[\"从而获取搜索的内容\",{\"1\":{\"3461\":1}}],[\"从而加大数据的吞吐量和性能\",{\"1\":{\"3389\":1}}],[\"从而达到高级的数据分析与可视化的目的\",{\"1\":{\"3350\":1}}],[\"从而形成集群\",{\"1\":{\"3335\":1}}],[\"从而看到报错信息\",{\"1\":{\"3266\":1}}],[\"从而实现将多个普通的请求对象\",{\"1\":{\"3219\":1}}],[\"从而实现断点下载或上传的功能\",{\"1\":{\"2140\":1}}],[\"从而让每个节点托管更多的数据\",{\"1\":{\"3114\":1}}],[\"从而避免了常规数据库连接操作中可能出现的资源泄露\",{\"1\":{\"2667\":1}}],[\"从而减少了系统的响应时间\",{\"1\":{\"2667\":1}}],[\"从而大大简化和加快了开发过程\",{\"1\":{\"2527\":1}}],[\"从而允许把这种二进制流持久地保存在磁盘上\",{\"1\":{\"2144\":1}}],[\"从而可以在声明集合变量\",{\"1\":{\"1948\":1}}],[\"从而可以解决多线程并发访问集合时的线程安全问题\",{\"1\":{\"929\":1}}],[\"从而创造了多个对象\",{\"1\":{\"1769\":1}}],[\"从而简化了方法的调用\",{\"1\":{\"1472\":1}}],[\"从而提高系统的可扩展性\",{\"1\":{\"1301\":1}}],[\"从而程序无法继续\",{\"1\":{\"829\":1,\"2082\":1}}],[\"从而熟悉springboot\",{\"1\":{\"469\":1}}],[\"从而报错\",{\"1\":{\"390\":1}}],[\"从而能持续运行\",{\"1\":{\"163\":1,\"319\":1}}],[\"从而启动tomcat\",{\"1\":{\"163\":1}}],[\"原始的文本会存储在\",{\"1\":{\"3197\":1}}],[\"原始工程依赖的jar包\",{\"1\":{\"247\":1}}],[\"原始工程内容\",{\"1\":{\"247\":1}}],[\"原来用\",{\"1\":{\"2495\":1}}],[\"原来的元素在数组中\",{\"1\":{\"1893\":1}}],[\"原料准备\",{\"1\":{\"2326\":1}}],[\"原理\",{\"1\":{\"2320\":1,\"2325\":1,\"2345\":1,\"3497\":1,\"3498\":1,\"3723\":1}}],[\"原理和使用\",{\"0\":{\"2074\":1}}],[\"原则\",{\"1\":{\"1789\":1}}],[\"原\",{\"1\":{\"1121\":3}}],[\"原码\",{\"0\":{\"1121\":1},\"1\":{\"1121\":1}}],[\"原因是他们都内置了map集合\",{\"1\":{\"2919\":1}}],[\"原因如下\",{\"1\":{\"1745\":1}}],[\"原因未知\",{\"1\":{\"803\":1,\"804\":1,\"805\":1}}],[\"原因\",{\"1\":{\"358\":1,\"390\":1,\"778\":1,\"1163\":1,\"1177\":1,\"1913\":1,\"1982\":1,\"2707\":1,\"2709\":1,\"3110\":1,\"3210\":1,\"3392\":1,\"3757\":1}}],[\"原型图\",{\"0\":{\"51\":1}}],[\"普通用户\",{\"1\":{\"3708\":1}}],[\"普通数组和文档数组\",{\"1\":{\"3546\":1}}],[\"普通的jdbc数据库连接使用\",{\"1\":{\"2662\":1}}],[\"普通for循环\",{\"0\":{\"1854\":1}}],[\"普通类型\",{\"1\":{\"1700\":1}}],[\"普通类是可以创建匿名对象的\",{\"1\":{\"1497\":1}}],[\"普通字符\",{\"1\":{\"1102\":1}}],[\"普通字符串\",{\"1\":{\"299\":1}}],[\"普通工程的manifeast\",{\"1\":{\"246\":1}}],[\"普通模块\",{\"0\":{\"171\":1}}],[\"普通模块就算有启动类\",{\"1\":{\"163\":1}}],[\"两者的功能和效率基本一样\",{\"1\":{\"3092\":1}}],[\"两者都会因为所需资源被占用而阻塞\",{\"1\":{\"1793\":1}}],[\"两次回车就输入完毕\",{\"1\":{\"3298\":1}}],[\"两次获取的session并不是同一个\",{\"1\":{\"3069\":1}}],[\"两次请求\",{\"1\":{\"2912\":1}}],[\"两同\",{\"1\":{\"1285\":1}}],[\"两同一不同\",{\"1\":{\"1285\":1}}],[\"两层循环相当于是一个矩阵\",{\"1\":{\"1200\":1}}],[\"两种类型\",{\"0\":{\"3644\":1}}],[\"两种类型的analyzer参数\",{\"1\":{\"3481\":1}}],[\"两种体系\",{\"1\":{\"1826\":1}}],[\"两种方式都需要重写run\",{\"1\":{\"1747\":1}}],[\"两种方式的比较\",{\"0\":{\"1744\":1}}],[\"两种浮点类型只是表示的数据范围和精度不同\",{\"1\":{\"1094\":1}}],[\"两种浮点类型的对比\",{\"0\":{\"1094\":1}}],[\"两种打包方式的对比\",{\"0\":{\"242\":1}}],[\"两种打包方式\",{\"0\":{\"241\":1}}],[\"两个方法可以单独使用\",{\"1\":{\"3610\":1}}],[\"两个方法声明的位置不同\",{\"1\":{\"1803\":1}}],[\"两个类\",{\"1\":{\"2344\":1}}],[\"两个子类\",{\"1\":{\"2190\":1}}],[\"两个都要关闭\",{\"1\":{\"2065\":1}}],[\"两个都是抽象类无法直接实现\",{\"1\":{\"812\":1}}],[\"两个key通过compareto\",{\"1\":{\"1914\":1,\"1933\":1}}],[\"两个key\",{\"1\":{\"1914\":1,\"1933\":1}}],[\"两个线程无序交替执行\",{\"1\":{\"1737\":1}}],[\"两个变量指向同一内存地址\",{\"1\":{\"1554\":1,\"1556\":1}}],[\"两个变量各种保存了一份值\",{\"1\":{\"1554\":1}}],[\"两个变量互不干扰\",{\"1\":{\"1292\":1,\"1555\":1}}],[\"两个对象中保存的属性也是互不相干的\",{\"1\":{\"1550\":1}}],[\"两个对象通过\",{\"1\":{\"745\":1,\"1885\":1}}],[\"两个表达式类型不一致\",{\"1\":{\"1161\":1}}],[\"两个int类型相除\",{\"1\":{\"1139\":1}}],[\"两个\",{\"1\":{\"985\":1,\"1912\":2}}],[\"两个集合会用equals比对集合中的所有obj\",{\"1\":{\"915\":1}}],[\"两个数组就相等\",{\"1\":{\"896\":1}}],[\"两个内存地址是不一样的\",{\"1\":{\"895\":1}}],[\"两部分\",{\"1\":{\"49\":1}}],[\"计数规则\",{\"1\":{\"3164\":1}}],[\"计算公式所有员工工资的总和\",{\"1\":{\"2489\":1}}],[\"计算两者小号的时间\",{\"1\":{\"2086\":1}}],[\"计算key1哈希值\",{\"1\":{\"1922\":1}}],[\"计算元素a的哈希值\",{\"1\":{\"1891\":1}}],[\"计算某段代码执行所需要花费的时间的方法\",{\"1\":{\"1499\":1}}],[\"计算代码执行时间的类\",{\"1\":{\"1499\":1}}],[\"计算代码执行时间\",{\"0\":{\"1499\":1}}],[\"计算1\",{\"1\":{\"1283\":1}}],[\"计算机\",{\"1\":{\"2697\":1}}],[\"计算机网络通信涉及内容很多\",{\"1\":{\"2200\":1}}],[\"计算机网络中实现通信必须有一些约定\",{\"1\":{\"2199\":1}}],[\"计算机网络\",{\"1\":{\"2172\":1}}],[\"计算机怎么知道两个字节表示一个符号\",{\"1\":{\"2111\":1}}],[\"计算机只能识别二进制数据\",{\"1\":{\"2108\":1}}],[\"计算机辨别\",{\"1\":{\"1121\":1}}],[\"计算机内部都是二进制的\",{\"1\":{\"1103\":1}}],[\"计算机上必须安装jdk\",{\"1\":{\"238\":1}}],[\"计算当前集合和参数集合的交集\",{\"1\":{\"914\":1}}],[\"计算\",{\"1\":{\"777\":1}}],[\"计划任务\",{\"0\":{\"334\":1}}],[\"计量单位\",{\"0\":{\"213\":1}}],[\"与es的关键字比对\",{\"1\":{\"3459\":1}}],[\"与用户搜索的词条不完全一致的结果\",{\"1\":{\"3436\":1}}],[\"与词条的种类有关\",{\"1\":{\"3435\":1}}],[\"与jar类似\",{\"1\":{\"2996\":1}}],[\"与数据表同名\",{\"1\":{\"2599\":1}}],[\"与数据模型层\",{\"1\":{\"1537\":1}}],[\"与动态语言相对应的\",{\"1\":{\"2247\":1}}],[\"与b\",{\"1\":{\"2206\":1}}],[\"与break和continue不同的是\",{\"1\":{\"1196\":1}}],[\"与平台无关\",{\"1\":{\"2008\":1}}],[\"与hashset一样\",{\"1\":{\"1912\":1}}],[\"与某个\",{\"1\":{\"1653\":1}}],[\"与正常的程序代码分开\",{\"1\":{\"1565\":1}}],[\"与继承关系类似\",{\"1\":{\"1509\":1}}],[\"与之相对的是非静态方法\",{\"1\":{\"1480\":1}}],[\"与声明为void不同\",{\"1\":{\"1317\":1}}],[\"与一维数组初始化情况相同\",{\"1\":{\"1241\":1}}],[\"与自增自减一样\",{\"1\":{\"1145\":1}}],[\"与case\",{\"1\":{\"997\":1}}],[\"与pattern\",{\"1\":{\"984\":1}}],[\"与\",{\"0\":{\"2565\":1,\"3102\":1,\"3252\":1,\"3549\":1},\"1\":{\"674\":1,\"885\":2,\"993\":1,\"1006\":2,\"2461\":1,\"2825\":2,\"2981\":1}}],[\"与编码无关\",{\"1\":{\"651\":1}}],[\"与autoconfigurationimportselector的作用类似\",{\"1\":{\"567\":1}}],[\"与初始化环境比对\",{\"1\":{\"562\":1}}],[\"与请求体中的验证码进行比对\",{\"1\":{\"469\":1}}],[\"与redis的指令和参数相同\",{\"1\":{\"379\":1}}],[\"与在idea下执行程序没有区别\",{\"1\":{\"237\":1}}],[\"与src\",{\"1\":{\"225\":1}}],[\"与springboot的版本号一样\",{\"1\":{\"100\":1}}],[\"程序还是像以前一样关闭数据库连接\",{\"1\":{\"2669\":1}}],[\"程序依然可以编译\",{\"1\":{\"2365\":1}}],[\"程序经过javac\",{\"1\":{\"2261\":1}}],[\"程序发送一些数据\",{\"1\":{\"2240\":1}}],[\"程序可以直接跳到文件的任意地方来读\",{\"1\":{\"2129\":1}}],[\"程序可以通过反射获取注释\",{\"1\":{\"1659\":1}}],[\"程序结束\",{\"1\":{\"2118\":1}}],[\"程序中有很多的类\",{\"1\":{\"2986\":1}}],[\"程序中打开的文件\",{\"1\":{\"2037\":1}}],[\"程序中的所有字符串字面值\",{\"1\":{\"1126\":1}}],[\"程序调用thread\",{\"1\":{\"1775\":1}}],[\"程序需要实现一些需要等待的任务时\",{\"1\":{\"1694\":1}}],[\"程序需要同时执行两个或多个任务\",{\"1\":{\"1694\":1}}],[\"程序启动会默认开启一条线程\",{\"1\":{\"1687\":1}}],[\"程序与进程的联系\",{\"0\":{\"1686\":1}}],[\"程序与进程的区别\",{\"0\":{\"1685\":1}}],[\"程序是在某个进程中的某个线程执行的\",{\"1\":{\"1688\":1}}],[\"程序是存储在某种介质上的二进制代码\",{\"1\":{\"1685\":1}}],[\"程序是静态的\",{\"1\":{\"1684\":1,\"1685\":1}}],[\"程序和软件的区别是\",{\"1\":{\"1683\":1}}],[\"程序和软件的区别\",{\"1\":{\"1683\":1}}],[\"程序\",{\"1\":{\"1683\":1,\"1692\":1,\"2185\":1}}],[\"程序块直接通往下一种情况而没有\",{\"1\":{\"1678\":1}}],[\"程序时\",{\"1\":{\"1659\":2}}],[\"程序运行过程中\",{\"1\":{\"1567\":1}}],[\"程序运行的稳定性越来也脆弱\",{\"1\":{\"311\":1}}],[\"程序在正常执行的过程中\",{\"1\":{\"1566\":1}}],[\"程序在正常运行\",{\"1\":{\"350\":1}}],[\"程序设计的追求\",{\"0\":{\"1300\":1}}],[\"程序员可以通过request对象获取请求消息数据\",{\"1\":{\"2831\":1}}],[\"程序员可以在不改变原有逻辑的情况下\",{\"1\":{\"1635\":1}}],[\"程序员面对的是一个统一的网络编程环境\",{\"1\":{\"2171\":1}}],[\"程序员能够很容易开发常见的网络应用程序\",{\"1\":{\"2171\":1}}],[\"程序员从面向过程的执行者转化成了面向对象的指挥者\",{\"1\":{\"1252\":1}}],[\"程序员调试代码使用\",{\"1\":{\"292\":1}}],[\"程序的概念\",{\"0\":{\"1683\":1}}],[\"程序的入口是main\",{\"1\":{\"1045\":1}}],[\"程序的功能是否能够整百分百运行成功\",{\"1\":{\"312\":1}}],[\"程序性能最高\",{\"1\":{\"834\":1,\"2266\":1}}],[\"程序已经掉线\",{\"1\":{\"350\":1}}],[\"程序包中\",{\"1\":{\"2244\":1}}],[\"程序包所在目录中config目录下配置文件\",{\"1\":{\"262\":1}}],[\"程序包所在目录中配置文件\",{\"1\":{\"262\":1}}],[\"程序包打好以后\",{\"1\":{\"255\":1}}],[\"程序正常运行\",{\"1\":{\"237\":1}}],[\"程序打包好以后\",{\"1\":{\"237\":1}}],[\"叫做package\",{\"1\":{\"236\":1}}],[\"上\",{\"1\":{\"3407\":1}}],[\"上图下半部分是三层架构\",{\"1\":{\"3011\":1}}],[\"上章封装的jdbcutils工具中的关闭资源方法\",{\"1\":{\"2598\":1}}],[\"上各种网络资源\",{\"1\":{\"2244\":1}}],[\"上某一\",{\"1\":{\"2236\":1}}],[\"上一层可以调用下一层\",{\"1\":{\"2200\":1}}],[\"上一个node\",{\"1\":{\"1872\":1}}],[\"上的分片和副本标红\",{\"1\":{\"3532\":1}}],[\"上的副本分片\",{\"1\":{\"3413\":1}}],[\"上的各种网络资源\",{\"1\":{\"2236\":1}}],[\"上的计算机\",{\"1\":{\"2179\":1}}],[\"上的语言\",{\"1\":{\"2171\":1}}],[\"上限\",{\"0\":{\"1999\":1}}],[\"上报到后台\",{\"1\":{\"1563\":1}}],[\"上海\",{\"1\":{\"1515\":2}}],[\"上层文件目录不存在\",{\"1\":{\"805\":1}}],[\"上午01时21分07秒\",{\"1\":{\"734\":1}}],[\"上午01时18分16秒\",{\"1\":{\"734\":1}}],[\"上午1\",{\"1\":{\"734\":1}}],[\"上添加上了这个注解\",{\"1\":{\"545\":1}}],[\"上下文容器对象已经初始化完毕后\",{\"1\":{\"520\":1,\"521\":1}}],[\"上述示例的响应信息如下\",{\"1\":{\"3124\":1}}],[\"上述的整个过程就被称之为会话\",{\"1\":{\"3033\":1}}],[\"上述代码中\",{\"1\":{\"2895\":1}}],[\"上述方法的返回值就作为当前类中的invoke\",{\"1\":{\"2343\":1}}],[\"上述方法的别名\",{\"1\":{\"402\":1}}],[\"上述情况2和3\",{\"1\":{\"1892\":1}}],[\"上述情况1\",{\"1\":{\"1892\":1}}],[\"上述三个方法\",{\"1\":{\"734\":1}}],[\"上述controller响应的数据有一个问题\",{\"1\":{\"643\":1}}],[\"上述所有创建bean的方式\",{\"1\":{\"529\":1}}],[\"上述两个操作都有对应的命令可以快速执行\",{\"1\":{\"235\":1}}],[\"上面这种动态代理在aop中被称为aop代理\",{\"1\":{\"2348\":1}}],[\"上面加载bean的方式\",{\"1\":{\"522\":1}}],[\"上面提供的仅仅是bean的声明\",{\"1\":{\"511\":1}}],[\"上面四个注解作用是一样的\",{\"1\":{\"508\":1}}],[\"上面的内容只会在第一次启动时显示\",{\"1\":{\"3305\":1}}],[\"上面的就是文档的概要描述和详细描述\",{\"1\":{\"1059\":1}}],[\"上面的cat类和mouse类创建对象时用的是配置文件提供的属性初始化的\",{\"1\":{\"551\":1}}],[\"上面的工厂bean类通常使用\",{\"1\":{\"514\":1}}],[\"上面的解释并非是真实的加载场景\",{\"1\":{\"504\":1}}],[\"上面的缓存策略配置里\",{\"1\":{\"480\":1}}],[\"上面添加的三个信息\",{\"1\":{\"347\":1}}],[\"上面配置表示\",{\"1\":{\"326\":1}}],[\"上时\",{\"1\":{\"342\":1}}],[\"上百项\",{\"1\":{\"331\":1}}],[\"上传目录\",{\"1\":{\"3288\":1,\"3319\":1}}],[\"上传安装包\",{\"0\":{\"3288\":1,\"3319\":1}}],[\"上传到服务器\",{\"1\":{\"3285\":1}}],[\"上传客户端信息\",{\"0\":{\"324\":1}}],[\"上传jar包\",{\"0\":{\"252\":1}}],[\"上线后使用info\",{\"1\":{\"293\":1}}],[\"上线时一定要设置安全认证\",{\"1\":{\"3570\":1}}],[\"上线时\",{\"1\":{\"36\":1}}],[\"上线运维\",{\"0\":{\"31\":1},\"1\":{\"33\":1}}],[\"暂且认为它是\",{\"1\":{\"3526\":1}}],[\"暂不关注\",{\"1\":{\"2556\":1}}],[\"暂停\",{\"1\":{\"1729\":1}}],[\"暂时省略了\",{\"1\":{\"3742\":1}}],[\"暂时意义不明\",{\"1\":{\"3740\":1}}],[\"暂时无法进行多个字段排序\",{\"1\":{\"3246\":1}}],[\"暂时只考虑service方法\",{\"1\":{\"2779\":1}}],[\"暂时没有找到只去除一边空白的方法\",{\"1\":{\"667\":1}}],[\"暂时不再研究跨区域网集群\",{\"1\":{\"3316\":1}}],[\"暂时不用深究\",{\"1\":{\"2777\":1}}],[\"暂时不用这个技术了\",{\"1\":{\"486\":1}}],[\"暂时不需要掌握\",{\"1\":{\"1897\":1}}],[\"暂时不考虑\",{\"1\":{\"1277\":1}}],[\"暂时不做整理了\",{\"1\":{\"82\":1,\"83\":1}}],[\"暂时自定义信息\",{\"1\":{\"350\":1}}],[\"暂略\",{\"1\":{\"230\":1,\"231\":1,\"232\":1,\"352\":1,\"353\":1,\"457\":1,\"458\":1,\"648\":1,\"1062\":1,\"1927\":1,\"1930\":1,\"2509\":1,\"2950\":2,\"2993\":1,\"3255\":1,\"3256\":1,\"3257\":1,\"3334\":1,\"3356\":1,\"3357\":1,\"3358\":1,\"3408\":1,\"3490\":1,\"3529\":1,\"3565\":1,\"3683\":1}}],[\"执行检查等操作\",{\"1\":{\"3704\":2}}],[\"执行计划\",{\"0\":{\"3632\":1}}],[\"执行数据相关的操作\",{\"1\":{\"3268\":1}}],[\"执行chain\",{\"1\":{\"2953\":4}}],[\"执行流程\",{\"0\":{\"2783\":1}}],[\"执行一个查询操作\",{\"1\":{\"2683\":1}}],[\"执行一次手动刷新\",{\"1\":{\"3452\":1}}],[\"执行一次\",{\"1\":{\"491\":1}}],[\"执行validationquery检测连接是否有效\",{\"1\":{\"2674\":1}}],[\"执行完成后再断开连接\",{\"1\":{\"2662\":1}}],[\"执行完就死了\",{\"1\":{\"1729\":1}}],[\"执行完就失效\",{\"1\":{\"1267\":1}}],[\"执行批量处理语句\",{\"1\":{\"2617\":1}}],[\"执行batch\",{\"0\":{\"2617\":1},\"1\":{\"2625\":1}}],[\"执行插入\",{\"1\":{\"2612\":1}}],[\"执行查询\",{\"1\":{\"2597\":1,\"2600\":1,\"2603\":1,\"2613\":1}}],[\"执行操作\",{\"1\":{\"2573\":1}}],[\"执行preparedstatement对象包含的所有任意sql语句\",{\"1\":{\"2571\":1}}],[\"执行dml操作\",{\"0\":{\"2571\":1}}],[\"执行sql\",{\"1\":{\"2558\":1}}],[\"执行sql语句\",{\"1\":{\"2531\":1,\"2634\":1}}],[\"执行invoke代码体里写的增强逻辑\",{\"1\":{\"2333\":1}}],[\"执行invoke\",{\"0\":{\"2314\":1}}],[\"执行获取的函数\",{\"1\":{\"2311\":1}}],[\"执行类构造器<clinit>\",{\"1\":{\"2276\":1}}],[\"执行删除\",{\"1\":{\"2168\":1}}],[\"执行报错\",{\"1\":{\"2168\":1}}],[\"执行指定的线程的操作\",{\"1\":{\"1817\":1}}],[\"执行指令\",{\"1\":{\"237\":1}}],[\"执行任务\",{\"1\":{\"1814\":2}}],[\"执行效果\",{\"0\":{\"1761\":1}}],[\"执行效率高\",{\"1\":{\"1163\":1}}],[\"执行该方法\",{\"1\":{\"1680\":2,\"1729\":1}}],[\"执行了未检查的转换时的警告\",{\"1\":{\"1678\":1}}],[\"执行的顺序是先\",{\"1\":{\"3611\":1}}],[\"执行的数据库查询\",{\"1\":{\"2436\":1}}],[\"执行的过程控制都有操作系统的cpu\",{\"1\":{\"1724\":1}}],[\"执行的方法a中\",{\"1\":{\"1603\":1}}],[\"执行的先后顺序\",{\"1\":{\"1274\":1}}],[\"执行过程\",{\"1\":{\"1175\":1,\"1179\":1,\"1180\":1,\"1183\":1}}],[\"执行过程解析\",{\"0\":{\"1039\":1}}],[\"执行语句n\",{\"1\":{\"1174\":1}}],[\"执行语句2\",{\"1\":{\"1174\":1}}],[\"执行语句1\",{\"1\":{\"1174\":1}}],[\"执行表达式n\",{\"1\":{\"1170\":1}}],[\"执行表达式3\",{\"1\":{\"1170\":1}}],[\"执行表达式2\",{\"1\":{\"1169\":1,\"1170\":1}}],[\"执行表达式1\",{\"1\":{\"1169\":1,\"1170\":1}}],[\"执行hi\",{\"1\":{\"1050\":1}}],[\"执行hello\",{\"1\":{\"1050\":1}}],[\"执行文件时\",{\"1\":{\"1041\":1}}],[\"执行代码块\",{\"1\":{\"1168\":1}}],[\"执行代码\",{\"1\":{\"887\":1,\"1008\":1}}],[\"执行时间的描述方式是\",{\"1\":{\"499\":1}}],[\"执行\",{\"1\":{\"492\":1,\"1406\":1,\"2577\":1,\"2581\":1,\"2624\":1,\"2653\":1}}],[\"执行多次\",{\"1\":{\"491\":1}}],[\"执行结果为\",{\"1\":{\"1591\":3}}],[\"执行结果如下\",{\"1\":{\"1050\":1}}],[\"执行结果\",{\"0\":{\"1722\":1,\"3667\":1,\"3670\":1},\"1\":{\"403\":1,\"423\":1,\"428\":1,\"431\":1,\"1740\":1,\"2903\":1}}],[\"执行线程\",{\"1\":{\"342\":1}}],[\"执行maven打包指令\",{\"1\":{\"283\":1}}],[\"执行jar命令\",{\"1\":{\"253\":1}}],[\"执行程序打包指令后\",{\"1\":{\"237\":1}}],[\"执行要测试的对象的方法\",{\"1\":{\"227\":1}}],[\"执行要测试的对象对应的方法\",{\"1\":{\"227\":1}}],[\"执行后\",{\"1\":{\"128\":1,\"3587\":1}}],[\"声明一个自定义类型的元素\",{\"1\":{\"3029\":1}}],[\"声明一个students标签\",{\"1\":{\"3025\":1}}],[\"声明student标签的属性\",{\"1\":{\"3025\":1}}],[\"声明sex标签\",{\"1\":{\"3025\":1}}],[\"声明season对象的属性\",{\"1\":{\"1621\":1}}],[\"声明age标签\",{\"1\":{\"3025\":1}}],[\"声明name标签\",{\"1\":{\"3025\":1}}],[\"声明的所有方法都被转移到调用处理器一个集中的方法中处理\",{\"1\":{\"2325\":1}}],[\"声明的同时赋值\",{\"0\":{\"1071\":1}}],[\"声明泛型接口和泛型类\",{\"0\":{\"1963\":1}}],[\"声明阶段不能确定这个容器到底实际存的是什么类型的对象\",{\"1\":{\"1947\":1}}],[\"声明注解\",{\"0\":{\"1643\":1}}],[\"声明枚举对象的属性\",{\"1\":{\"1626\":1}}],[\"声明public\",{\"1\":{\"1489\":1}}],[\"声明当前类对象\",{\"1\":{\"1489\":1,\"1769\":1}}],[\"声明当前应用启动后作为springbootadmin的服务器使用\",{\"1\":{\"320\":1}}],[\"声明位置\",{\"0\":{\"1385\":1}}],[\"声明在java\",{\"1\":{\"2128\":1}}],[\"声明在包的声明和类的声明之间\",{\"1\":{\"1342\":1}}],[\"声明在方法内\",{\"1\":{\"1273\":1}}],[\"声明在类中的变量\",{\"1\":{\"1271\":1}}],[\"声明和初始化分开\",{\"1\":{\"1232\":1}}],[\"声明+初始化\",{\"1\":{\"1218\":1,\"1219\":1}}],[\"声明\",{\"1\":{\"1218\":1,\"1219\":1,\"1769\":1}}],[\"声明语法2\",{\"1\":{\"1216\":1}}],[\"声明语法1\",{\"1\":{\"1216\":1}}],[\"声明数组时要确定数据类型\",{\"1\":{\"1228\":1}}],[\"声明数组\",{\"0\":{\"1216\":1},\"1\":{\"1211\":1,\"1216\":1}}],[\"声明字符\",{\"0\":{\"1101\":1}}],[\"声明long类型时\",{\"1\":{\"1088\":1}}],[\"声明但未初始化\",{\"1\":{\"1069\":1}}],[\"声明变量的同时进行初始化\",{\"1\":{\"1071\":1}}],[\"声明变量\",{\"0\":{\"1068\":1}}],[\"声明为\",{\"1\":{\"1620\":1}}],[\"声明为public的类的类名必须与源文件名相同\",{\"1\":{\"1044\":1}}],[\"声明为bean\",{\"1\":{\"555\":1}}],[\"声明该类为测试类\",{\"1\":{\"226\":1}}],[\"声明测试方法\",{\"1\":{\"226\":1}}],[\"声明测试类\",{\"1\":{\"226\":1}}],[\"使其元素不超过给定数量\",{\"1\":{\"2460\":1}}],[\"使其在保存和传输时可被还原\",{\"1\":{\"2144\":1}}],[\"使其他任务在其被解锁之前\",{\"1\":{\"1772\":1}}],[\"使当前线程进入等待\",{\"1\":{\"1800\":1}}],[\"使别的线程可访问并修改共享资源\",{\"1\":{\"1799\":1}}],[\"使得所有服务的启动方式更优雅和统一\",{\"1\":{\"2998\":1}}],[\"使得进程在运行过程中\",{\"1\":{\"1792\":1}}],[\"使得不再需要在web\",{\"1\":{\"1637\":1}}],[\"使得程序员不必直接对协议进行操作\",{\"1\":{\"2694\":1}}],[\"使得程序在编译时就不再报错\",{\"1\":{\"1595\":1}}],[\"使得程序简洁\",{\"1\":{\"1565\":1}}],[\"使得在控制流转到程序的其它部分以前\",{\"1\":{\"1590\":1}}],[\"使得在调用对象的tostring\",{\"1\":{\"1433\":1}}],[\"使得array1和array2的指针共同指向同一个数组实体\",{\"1\":{\"1213\":1}}],[\"使初始化时更加灵活\",{\"1\":{\"1319\":1}}],[\"使规范等价\",{\"1\":{\"997\":1}}],[\"使最大页码值作为当前页码值\",{\"1\":{\"647\":1}}],[\"使bean的创建更灵活\",{\"1\":{\"547\":1}}],[\"使各种缓存搭配使用\",{\"1\":{\"489\":1}}],[\"使该目录成为springboot的测试目录\",{\"1\":{\"225\":1}}],[\"使用正确的用户名和密码\",{\"1\":{\"3715\":1}}],[\"使用正则全部替换\",{\"1\":{\"989\":1}}],[\"使用查询运算符指定选择筛选器\",{\"1\":{\"3604\":1}}],[\"使用$set修改器\",{\"1\":{\"3596\":1}}],[\"使用update方法更新文档\",{\"1\":{\"3594\":1}}],[\"使用udp提供\",{\"1\":{\"2210\":1}}],[\"使用路由\",{\"0\":{\"3511\":1}}],[\"使用多块硬盘\",{\"1\":{\"3501\":1}}],[\"使用多线程\",{\"0\":{\"1707\":1}}],[\"使用raid\",{\"1\":{\"3501\":1}}],[\"使用response调用多次addcookie方法发送cookie即可\",{\"1\":{\"3052\":1}}],[\"使用request对象的getsession方法来获取session对象\",{\"1\":{\"3062\":1}}],[\"使用request对象\",{\"1\":{\"2838\":1}}],[\"使用readobejct方法进行反序列化\",{\"1\":{\"2152\":1,\"2157\":1}}],[\"使用read\",{\"1\":{\"2053\":1}}],[\"使用redis\",{\"0\":{\"379\":1,\"380\":1}}],[\"使用这个\",{\"1\":{\"3497\":1}}],[\"使用这些类库可以以一种标准的方法\",{\"1\":{\"2527\":1}}],[\"使用新的端口\",{\"1\":{\"3693\":1}}],[\"使用新的数据\",{\"1\":{\"3495\":1}}],[\"使用新值替换list\",{\"1\":{\"938\":1}}],[\"使用别人提供的分析器即可\",{\"1\":{\"3490\":1}}],[\"使用analyze\",{\"0\":{\"3473\":1}}],[\"使用array在存储对象方面具有\",{\"1\":{\"1820\":1}}],[\"使用arraylist重载的\",{\"1\":{\"946\":1}}],[\"使用分析器\",{\"0\":{\"3471\":1}}],[\"使用分页api需要通过拦截器实现\",{\"1\":{\"625\":1}}],[\"使用更多的索引\",{\"1\":{\"3443\":1}}],[\"使用主节点产生的注册token\",{\"1\":{\"3329\":1}}],[\"使用当前节点创建一个新集群\",{\"1\":{\"3307\":1,\"3327\":1}}],[\"使用当前运行时类\",{\"1\":{\"839\":1}}],[\"使用使用\",{\"1\":{\"3298\":1}}],[\"使用聚合函数\",{\"1\":{\"3249\":1}}],[\"使用objectmapper将数据对象转为json格式\",{\"1\":{\"3214\":1}}],[\"使用相差很大\",{\"1\":{\"3201\":1}}],[\"使用常规的搜索方式\",{\"1\":{\"3098\":1}}],[\"使用xsi引入文件\",{\"1\":{\"3030\":1}}],[\"使用xxxoperations对象调用方法\",{\"1\":{\"379\":1}}],[\"使用命名空间区分\",{\"1\":{\"3030\":1}}],[\"使用命令行生成api文档\",{\"0\":{\"1061\":1}}],[\"使用动态虚拟路径拼接完整路径\",{\"1\":{\"2916\":1}}],[\"使用动态条件拼接\",{\"1\":{\"633\":1}}],[\"使用方式\",{\"0\":{\"2788\":1}}],[\"使用方法flush\",{\"1\":{\"2074\":1}}],[\"使用方法\",{\"1\":{\"1995\":1,\"1996\":1}}],[\"使用方法的形参\",{\"1\":{\"1457\":1}}],[\"使用骨架创建web项目\",{\"0\":{\"2736\":1}}],[\"使用工厂方法\",{\"1\":{\"2672\":1}}],[\"使用工具类帮忙生成验证码和校验验证码\",{\"1\":{\"471\":1}}],[\"使用德鲁伊\",{\"0\":{\"2672\":1}}],[\"使用完毕之后再放回去\",{\"1\":{\"2664\":1}}],[\"使用完后都得断开\",{\"1\":{\"2662\":1}}],[\"使用完放回池中\",{\"1\":{\"1812\":1}}],[\"使用事务\",{\"0\":{\"2635\":1}}],[\"使用批处理\",{\"0\":{\"2622\":1}}],[\"使用封装好的jdbcutiles获取连接对象\",{\"1\":{\"2612\":1,\"2613\":1}}],[\"使用封装好的工具\",{\"0\":{\"2577\":1}}],[\"使用<=65kb的blob类型\",{\"1\":{\"2609\":1}}],[\"使用dofilter方法中的chain对象的dofilter方法进行放行\",{\"1\":{\"2946\":1}}],[\"使用drivermanager类替换driver\",{\"1\":{\"2547\":1}}],[\"使用drivermanager\",{\"0\":{\"2547\":1}}],[\"使用dataoutputstream将文件中各类数据读入\",{\"1\":{\"2127\":1}}],[\"使用内部迭代\",{\"1\":{\"2485\":1}}],[\"使用注意\",{\"1\":{\"2467\":1}}],[\"使用注解的方式为servlet类配置一个访问路径\",{\"1\":{\"2777\":1}}],[\"使用注解的方式配置项目\",{\"1\":{\"2734\":1}}],[\"使用注解\",{\"0\":{\"1648\":1},\"1\":{\"498\":1,\"499\":1}}],[\"使用前提\",{\"1\":{\"2467\":1,\"2474\":1}}],[\"使用条件\",{\"0\":{\"2418\":1}}],[\"使用post会报错\",{\"1\":{\"3120\":1}}],[\"使用postman进行接口测试\",{\"1\":{\"642\":1}}],[\"使用postman测试接口功能\",{\"1\":{\"614\":1}}],[\"使用preparedstatement\",{\"0\":{\"2621\":1},\"1\":{\"2621\":1}}],[\"使用preparedstatement操作blob数据\",{\"1\":{\"2607\":1}}],[\"使用properties对象\",{\"1\":{\"2545\":1}}],[\"使用println这个方法\",{\"1\":{\"2404\":1}}],[\"使用要求\",{\"0\":{\"2400\":1}}],[\"使用情景\",{\"0\":{\"2397\":1}}],[\"使用函数\",{\"1\":{\"2381\":1}}],[\"使用它可以写出更简洁\",{\"1\":{\"2359\":1}}],[\"使用场合\",{\"1\":{\"2325\":1}}],[\"使用场景\",{\"0\":{\"263\":1},\"1\":{\"1267\":1,\"1590\":1}}],[\"使用一个代理将对象包装起来\",{\"1\":{\"2320\":1}}],[\"使用一次tab操作\",{\"1\":{\"1063\":1}}],[\"使用反射获取driver实现类的对象\",{\"1\":{\"2547\":1}}],[\"使用反射初始化驱动\",{\"1\":{\"2546\":1}}],[\"使用反射\",{\"0\":{\"2257\":1,\"2258\":1,\"2546\":1}}],[\"使用代码体验反射的动态性\",{\"1\":{\"2252\":1}}],[\"使用获取的流对象read流的数据\",{\"1\":{\"2225\":1}}],[\"使用writerobject方法进行序列化\",{\"1\":{\"2151\":1,\"2156\":1}}],[\"使用byte\",{\"1\":{\"2084\":1}}],[\"使用bean\",{\"1\":{\"556\":1}}],[\"使用bean时读取配置文件\",{\"0\":{\"550\":1}}],[\"使用bean的时候\",{\"1\":{\"544\":1}}],[\"使用有限制的\",{\"1\":{\"2001\":1}}],[\"使用通配符泛型\",{\"0\":{\"1996\":1}}],[\"使用通配符\",{\"0\":{\"1990\":1}}],[\"使用到类的泛型的位置\",{\"1\":{\"1959\":1}}],[\"使用总结\",{\"0\":{\"1959\":1}}],[\"使用泛型的主要优点是能够在编译时而不是在运行时检测错误\",{\"1\":{\"1946\":1}}],[\"使用泛型\",{\"0\":{\"1944\":1}}],[\"使用频率最高的实现类\",{\"0\":{\"1912\":1}}],[\"使用此类效率比arraylist高\",{\"1\":{\"1861\":1}}],[\"使用创建指定线程数量的方法\",{\"1\":{\"1817\":1}}],[\"使用线程池步骤\",{\"0\":{\"1816\":1}}],[\"使用量特别大的资源\",{\"1\":{\"1812\":1}}],[\"使用两个线程打印\",{\"1\":{\"1798\":1,\"1804\":1}}],[\"使用lock锁\",{\"1\":{\"1779\":1}}],[\"使用lombok快速制作实体类\",{\"1\":{\"614\":1}}],[\"使用同步方法解决\",{\"1\":{\"1769\":1}}],[\"使用优先调度的抢占式策略\",{\"1\":{\"1734\":1}}],[\"使用三个线程\",{\"1\":{\"1720\":1}}],[\"使用举例\",{\"0\":{\"1677\":1}}],[\"使用位置\",{\"1\":{\"1648\":1}}],[\"使用枚举类\",{\"0\":{\"1631\":1}}],[\"使用异常类的getmessage方法获取\",{\"1\":{\"1609\":1}}],[\"使用tomcat\",{\"0\":{\"2756\":1}}],[\"使用tcp提供可依赖的字节流服务\",{\"1\":{\"2210\":1}}],[\"使用tcp协议前\",{\"1\":{\"2204\":1}}],[\"使用try\",{\"1\":{\"1595\":1}}],[\"使用try将可能出现异常代码包装起来\",{\"1\":{\"1588\":1}}],[\"使用this访问属性和方法时\",{\"1\":{\"1332\":1}}],[\"使用程序处理异常\",{\"1\":{\"1562\":1}}],[\"使用局部内部类\",{\"0\":{\"1459\":1}}],[\"使用基本数据类型的值\",{\"1\":{\"1440\":1}}],[\"使用强转时\",{\"1\":{\"1415\":1}}],[\"使用强制类型转换符\",{\"1\":{\"1410\":1}}],[\"使用限制\",{\"0\":{\"1399\":1}}],[\"使用子类中重写的父类方法\",{\"1\":{\"1397\":1}}],[\"使用了不赞成使用的类或方法时的警告\",{\"1\":{\"1678\":1}}],[\"使用了不同包下的同名的类\",{\"1\":{\"1344\":1}}],[\"使用了全类名\",{\"1\":{\"1344\":1}}],[\"使用了指定字符集的参数\",{\"1\":{\"674\":1}}],[\"使用与日期日历相关的函数\",{\"1\":{\"1338\":1}}],[\"使用者只能通过事先定制好的方法来访问数据\",{\"1\":{\"1305\":1}}],[\"使用for循环遍历可变个数形参\",{\"1\":{\"1296\":1}}],[\"使用递归函数\",{\"1\":{\"1283\":1}}],[\"使用循环\",{\"1\":{\"1283\":1}}],[\"使用在方法体中\",{\"1\":{\"1278\":1}}],[\"使用value1替换value2\",{\"1\":{\"1922\":1}}],[\"使用valueoperations<string\",{\"1\":{\"380\":1}}],[\"使用valueoperations对象操作redis\",{\"1\":{\"379\":1}}],[\"使用void来表示\",{\"1\":{\"1277\":1}}],[\"使用权限修饰符\",{\"1\":{\"1273\":1}}],[\"使用对象调用范围查询的方法便能进行范围查询\",{\"1\":{\"3236\":1}}],[\"使用对象调用方法\",{\"1\":{\"1259\":1}}],[\"使用对象调用属性\",{\"1\":{\"1259\":1}}],[\"使用数组的步骤\",{\"0\":{\"1211\":1}}],[\"使用数据\",{\"1\":{\"153\":1}}],[\"使用范围\",{\"0\":{\"1193\":1}}],[\"使用该循环\",{\"1\":{\"1190\":1}}],[\"使用该方法\",{\"1\":{\"2682\":1}}],[\"使用该方法可以将数组作为字符串打印\",{\"1\":{\"890\":1}}],[\"使用该方法可以在图形界面编程中实现程序的退出功能等\",{\"1\":{\"882\":1}}],[\"使用该方式创建的子模块\",{\"1\":{\"162\":1}}],[\"使用细节\",{\"0\":{\"1149\":1,\"1171\":1}}],[\"使用new\",{\"1\":{\"1124\":1}}],[\"使用较大的数据类型进行接收\",{\"1\":{\"1112\":1}}],[\"使用较少\",{\"1\":{\"777\":1}}],[\"使用转义字符\",{\"1\":{\"1102\":1}}],[\"使用单行或多行注释\",{\"1\":{\"1063\":1}}],[\"使用文档的\",{\"1\":{\"3413\":1}}],[\"使用文档注释来注释整个类或整个方法\",{\"1\":{\"1063\":1}}],[\"使用文件对象创建文件\",{\"1\":{\"803\":1}}],[\"使用格式\",{\"1\":{\"1058\":2,\"2398\":1}}],[\"使用ik分词器\",{\"0\":{\"3480\":1}}],[\"使用insertone\",{\"1\":{\"3585\":1}}],[\"使用int\",{\"1\":{\"1087\":1}}],[\"使用include属性在激活指定环境的情况下\",{\"1\":{\"278\":1}}],[\"使用idea\",{\"0\":{\"2992\":1}}],[\"使用idea和下载的tomcat软件\",{\"1\":{\"2745\":1}}],[\"使用ide生成帮助文档\",{\"0\":{\"1062\":1}}],[\"使用ide或者智能编辑器\",{\"1\":{\"1042\":1}}],[\"使用jar包\",{\"0\":{\"2988\":1}}],[\"使用java自带jar包\",{\"1\":{\"2989\":1}}],[\"使用java内置的jar包\",{\"0\":{\"2989\":1}}],[\"使用java\",{\"1\":{\"2277\":1}}],[\"使用javabean\",{\"1\":{\"1534\":1}}],[\"使用java命令进行运行\",{\"1\":{\"1041\":1}}],[\"使用javac\",{\"1\":{\"1040\":1}}],[\"使用jmsmessagingtemplate操作activemq\",{\"1\":{\"452\":1}}],[\"使用变量时\",{\"1\":{\"1073\":1}}],[\"使用变量的注意事项\",{\"0\":{\"1073\":1}}],[\"使用变量\",{\"0\":{\"1033\":1}}],[\"使用助记符表示一条机器指令\",{\"1\":{\"1020\":1}}],[\"使用参数replacement替换正则表达式匹配到的第一个字符串部分\",{\"1\":{\"990\":1}}],[\"使用参数replacement替换所有正则表达式匹配到的字符串部分\",{\"1\":{\"989\":1}}],[\"使用参数与集合中的每个元素做equals判断\",{\"1\":{\"912\":1}}],[\"使用比较器进行匹配\",{\"1\":{\"987\":1}}],[\"使用说明\",{\"0\":{\"943\":1,\"1160\":1,\"1175\":1,\"1190\":1,\"1197\":1,\"1200\":1,\"1295\":1,\"1658\":1,\"1800\":1,\"1801\":1,\"2092\":1}}],[\"使用类的加载器\",{\"0\":{\"2269\":1},\"1\":{\"837\":1}}],[\"使用缓冲流bufferedwrite\",{\"1\":{\"830\":1}}],[\"使用缓冲流\",{\"1\":{\"829\":1}}],[\"使用缓存时指定的缓存空间\",{\"1\":{\"478\":1}}],[\"使用缓存\",{\"0\":{\"468\":1}}],[\"使用缓存后\",{\"1\":{\"462\":1}}],[\"使用缓存前\",{\"1\":{\"462\":1}}],[\"使用缓存可以有效的减少低速数据读取过程的次数\",{\"1\":{\"461\":1}}],[\"使用customerdaoimpl\",{\"0\":{\"2657\":1}}],[\"使用class类的forname方法根据全类名参数创建对象\",{\"1\":{\"2551\":1}}],[\"使用classloader和properties类\",{\"1\":{\"2551\":1}}],[\"使用classloader\",{\"1\":{\"2282\":1}}],[\"使用classloader的getresourceasstream方法加载配置文件\",{\"1\":{\"2282\":1}}],[\"使用classloader加载配置文件\",{\"0\":{\"2282\":1}}],[\"使用class的本质\",{\"0\":{\"2262\":1}}],[\"使用compass连接主节点\",{\"1\":{\"3661\":1}}],[\"使用comparator接口比较两个字符串的大小\",{\"1\":{\"2411\":1}}],[\"使用comparator接口比较俩个数值的大小\",{\"1\":{\"2408\":1}}],[\"使用comparator接口\",{\"1\":{\"754\":1,\"756\":1}}],[\"使用cookie来存储\",{\"1\":{\"3078\":2}}],[\"使用consumer接口\",{\"1\":{\"2402\":1}}],[\"使用collection存储所有的value\",{\"1\":{\"1918\":1}}],[\"使用ca证书签发http证书\",{\"1\":{\"3298\":1}}],[\"使用callable新增线程的步骤\",{\"0\":{\"1809\":1}}],[\"使用cartooncatandmouse类\",{\"0\":{\"555\":1}}],[\"使用以下两个接口中的任何一个来实现对象的排序\",{\"1\":{\"741\":1}}],[\"使用给定的replacement\",{\"1\":{\"679\":1,\"680\":1}}],[\"使用指针\",{\"0\":{\"2137\":1}}],[\"使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串\",{\"1\":{\"678\":1}}],[\"使用指南\",{\"0\":{\"440\":1}}],[\"使用结果模型类\",{\"0\":{\"647\":1}}],[\"使用时直接获取\",{\"1\":{\"1812\":1}}],[\"使用时直接掉用api接口就行了\",{\"1\":{\"629\":1}}],[\"使用时间片策略\",{\"1\":{\"1734\":1}}],[\"使用时就必须指明\",{\"1\":{\"1648\":1}}],[\"使用时要加上强制转换符\",{\"1\":{\"1117\":1}}],[\"使用时从spring中直接获取数据使用\",{\"1\":{\"153\":1}}],[\"使用配置文件的好处\",{\"0\":{\"2552\":1}}],[\"使用配置文件的方式保存配置信息\",{\"1\":{\"2549\":1}}],[\"使用配置文件\",{\"1\":{\"546\":1}}],[\"使用配置文件是个比较好的方案\",{\"1\":{\"544\":1}}],[\"使用上下文对象多次创建多一个类的bean\",{\"1\":{\"521\":1}}],[\"使用上次get请求的手机号和返回的验证码为参数\",{\"1\":{\"474\":1}}],[\"使用elasticsearch\",{\"1\":{\"3094\":1,\"3391\":1}}],[\"使用equals\",{\"1\":{\"1881\":1}}],[\"使用execute或submit进行操作\",{\"1\":{\"1816\":1}}],[\"使用encache\",{\"0\":{\"479\":1}}],[\"使用es客户端时会报错\",{\"1\":{\"420\":1}}],[\"使用消息监听器在服务器启动后\",{\"1\":{\"455\":1}}],[\"使用示例\",{\"0\":{\"443\":1,\"518\":1,\"748\":1,\"755\":1,\"1089\":1,\"1096\":1,\"1107\":1,\"1198\":1,\"1201\":1,\"1680\":1,\"1784\":1,\"1957\":1,\"1958\":1,\"2084\":1,\"2085\":1,\"2101\":1,\"2126\":1,\"2127\":1,\"2136\":1,\"2225\":1,\"2344\":1,\"2582\":1,\"2601\":1,\"2604\":1,\"2676\":1,\"2685\":1,\"2973\":1,\"3754\":1},\"1\":{\"1902\":1}}],[\"使用超级管理员用户也可以\",{\"1\":{\"389\":1}}],[\"使用步骤\",{\"0\":{\"3039\":1},\"1\":{\"820\":1}}],[\"使用步骤和redistemplate一样\",{\"1\":{\"380\":1}}],[\"使用步骤如下\",{\"1\":{\"379\":1}}],[\"使用测试类访问mapper接口\",{\"1\":{\"375\":1}}],[\"使用测试\",{\"0\":{\"366\":1,\"375\":1,\"474\":1,\"2846\":1,\"2849\":1,\"2856\":1,\"3281\":1}}],[\"使用mongodb需要先导入驱动\",{\"1\":{\"3743\":1}}],[\"使用mysql驱动的api连接\",{\"0\":{\"2545\":1}}],[\"使用mybatisplus\",{\"0\":{\"373\":1}}],[\"使用mybatis\",{\"0\":{\"363\":1},\"1\":{\"588\":1}}],[\"使用mybatis的时候\",{\"1\":{\"308\":1}}],[\"使用match\",{\"1\":{\"3179\":1}}],[\"使用map\",{\"1\":{\"2472\":1}}],[\"使用mapper接口时\",{\"1\":{\"363\":1}}],[\"使用maven工具在当前真机环境下构建项目\",{\"1\":{\"250\":1}}],[\"使用maven方式创建的项目\",{\"1\":{\"163\":1}}],[\"使用maven方式可以比较放标创建模块\",{\"1\":{\"162\":1}}],[\"使用率低\",{\"1\":{\"292\":1}}],[\"使用日志对象记录日志\",{\"0\":{\"288\":1}}],[\"使用临时属性设置配置文件路径\",{\"1\":{\"267\":1}}],[\"使用临时属性设置配置文件名\",{\"1\":{\"267\":1}}],[\"使用快捷键alt\",{\"1\":{\"258\":1}}],[\"使用git下载项目\",{\"1\":{\"250\":1}}],[\"使用hibernate框架提供的校验器做实现\",{\"1\":{\"218\":1}}],[\"使用服务器去监控其中加载的应用\",{\"1\":{\"179\":1}}],[\"使用的是框架中的数据库操作方法\",{\"1\":{\"2524\":1}}],[\"使用的是idea默认的version\",{\"1\":{\"100\":1}}],[\"使用的方法\",{\"1\":{\"2092\":1}}],[\"使用的方法是子类的\",{\"1\":{\"1397\":1}}],[\"使用的时候注意\",{\"1\":{\"2580\":1}}],[\"使用的时候需要套接在已有流的基础上\",{\"1\":{\"2073\":1}}],[\"使用的时候加载该对象\",{\"1\":{\"153\":1,\"200\":1}}],[\"使用的都是collection中声明过的方法\",{\"1\":{\"1888\":1,\"1901\":1}}],[\"使用\",{\"0\":{\"208\":1,\"278\":1,\"283\":1,\"516\":1,\"554\":1,\"922\":1,\"1152\":1,\"1901\":1,\"1931\":1,\"2330\":1},\"1\":{\"147\":1,\"151\":1,\"209\":1,\"441\":1,\"510\":1,\"885\":1,\"1006\":1,\"1102\":1,\"1278\":1,\"1345\":1,\"1516\":1,\"1637\":1,\"1658\":1,\"2126\":1,\"2217\":2,\"2282\":1,\"2485\":1,\"2825\":1,\"2949\":1,\"3086\":1,\"3087\":1,\"3094\":2,\"3494\":1,\"3498\":1,\"3501\":1,\"3541\":5}}],[\"使用缩进表示层级关系\",{\"1\":{\"146\":1}}],[\"使用skip\",{\"1\":{\"3610\":1}}],[\"使用show\",{\"1\":{\"3578\":1}}],[\"使用session来存储\",{\"1\":{\"3078\":2}}],[\"使用set存储所有的entry\",{\"1\":{\"1918\":1}}],[\"使用set存储所有的key\",{\"1\":{\"1918\":1}}],[\"使用system\",{\"1\":{\"2086\":1,\"2118\":1}}],[\"使用stream\",{\"1\":{\"2436\":1}}],[\"使用string也可以\",{\"1\":{\"2055\":1}}],[\"使用statement\",{\"0\":{\"2620\":1}}],[\"使用static修饰的方法\",{\"1\":{\"1480\":1}}],[\"使用starter可以实现快速配置的效果\",{\"1\":{\"124\":1}}],[\"使用scanner实现\",{\"1\":{\"2118\":1}}],[\"使用scanner\",{\"1\":{\"1541\":1}}],[\"使用switch\",{\"1\":{\"1177\":1}}],[\"使用spring全家桶开发时\",{\"1\":{\"3014\":1}}],[\"使用springmvc提供的异常处理器做统一的异常处理\",{\"1\":{\"645\":1}}],[\"使用spring\",{\"1\":{\"241\":1}}],[\"使用springboot可以不写版本号\",{\"1\":{\"3743\":1}}],[\"使用springboot整合redis的专用客户端接口操作\",{\"1\":{\"379\":1}}],[\"使用springboot2\",{\"1\":{\"368\":1}}],[\"使用springboot创建项目时\",{\"1\":{\"361\":1}}],[\"使用springboot\",{\"0\":{\"108\":1}}],[\"使用浏览器访问\",{\"1\":{\"111\":1}}],[\"使用官网创建springboot项目\",{\"0\":{\"105\":1}}],[\"使用用户端应用\",{\"1\":{\"55\":1}}],[\"常驻\",{\"1\":{\"2703\":1}}],[\"常称为\",{\"1\":{\"1858\":1}}],[\"常看到一个类不是去继承一个已经实现好的类\",{\"1\":{\"1502\":1,\"1506\":1}}],[\"常见bug解决后再进行启动\",{\"1\":{\"3285\":1}}],[\"常见编码集\",{\"0\":{\"2109\":1}}],[\"常见子类threadpoolexecutor\",{\"1\":{\"1814\":1}}],[\"常见异常\",{\"0\":{\"1244\":1,\"1569\":1,\"1574\":1}}],[\"常见的有以下几种\",{\"1\":{\"3197\":1}}],[\"常见的如下\",{\"1\":{\"1103\":1}}],[\"常见的多环境开发主要兼顾3种环境设置\",{\"1\":{\"269\":1}}],[\"常量在链接阶段就存入调用类的常量池中了\",{\"1\":{\"2277\":1}}],[\"常量\",{\"0\":{\"1351\":1},\"1\":{\"1512\":1,\"1546\":1}}],[\"常量2\",{\"1\":{\"1174\":1}}],[\"常量1\",{\"1\":{\"1174\":1}}],[\"常量名\",{\"1\":{\"1083\":1,\"2275\":1}}],[\"常量等\",{\"1\":{\"1058\":1}}],[\"常量模式\",{\"1\":{\"211\":1}}],[\"常配合精度一起使用\",{\"1\":{\"784\":1}}],[\"常规的reids配置用来设置redis的连接信息\",{\"1\":{\"483\":1}}],[\"常会在应用程序与数据库之间建立一种临时的数据存储机制\",{\"1\":{\"462\":1}}],[\"常用中文数量词\",{\"1\":{\"3477\":1}}],[\"常用httpservlet\",{\"1\":{\"2921\":1}}],[\"常用请求方法\",{\"0\":{\"2845\":1}}],[\"常用来储存缩略图\",{\"1\":{\"2609\":1}}],[\"常用来处理配置文件\",{\"1\":{\"1916\":1}}],[\"常用2\",{\"1\":{\"2491\":1}}],[\"常用1\",{\"1\":{\"2491\":1}}],[\"常用构造器\",{\"0\":{\"2014\":1}}],[\"常用string类作为map的\",{\"1\":{\"1909\":1}}],[\"常用于\",{\"1\":{\"2205\":1}}],[\"常用于javaweb\",{\"1\":{\"1637\":1}}],[\"常用于检查系统运行状况\",{\"1\":{\"294\":1}}],[\"常用作接口重用\",{\"1\":{\"1409\":1}}],[\"常用的内置角色\",{\"0\":{\"3703\":1}}],[\"常用的中文分词器为\",{\"1\":{\"3477\":1}}],[\"常用的插件有\",{\"1\":{\"2674\":1}}],[\"常用的权限修饰符\",{\"1\":{\"1273\":1}}],[\"常用的格式为\",{\"1\":{\"735\":1}}],[\"常用实现类为hashmap\",{\"1\":{\"955\":1}}],[\"常用方法\",{\"0\":{\"698\":1,\"2019\":1}}],[\"常用工具类\",{\"0\":{\"587\":1}}],[\"常用解决方案时\",{\"1\":{\"248\":1}}],[\"常用注解解析\",{\"0\":{\"1672\":1}}],[\"常用注解\",{\"1\":{\"59\":1}}],[\"常用类\",{\"0\":{\"57\":1}}],[\"常用\",{\"0\":{\"380\":1,\"2268\":1,\"2502\":1},\"1\":{\"11\":1,\"464\":3,\"649\":1,\"1710\":1,\"2608\":1,\"2668\":1,\"2718\":1,\"2869\":1}}],[\"烤肉串模式\",{\"1\":{\"211\":1}}],[\"下执行\",{\"1\":{\"3353\":1}}],[\"下拉框选择tomcat\",{\"1\":{\"2757\":1}}],[\"下载压缩包\",{\"0\":{\"3560\":1}}],[\"下载的是绿色软件\",{\"1\":{\"3556\":1}}],[\"下载的打包格式选zip\",{\"1\":{\"3555\":1}}],[\"下载安装包\",{\"0\":{\"3554\":1},\"1\":{\"3560\":1}}],[\"下载安装web服务器软件\",{\"1\":{\"2696\":1}}],[\"下载es\",{\"0\":{\"3287\":1,\"3318\":1}}],[\"下载elasticsearch\",{\"1\":{\"3285\":1}}],[\"下载地址\",{\"1\":{\"2700\":1,\"3104\":1,\"3287\":1,\"3318\":1,\"3351\":2,\"3478\":1,\"3554\":1}}],[\"下载\",{\"0\":{\"2700\":1}}],[\"下载包并导入\",{\"1\":{\"2680\":1}}],[\"下载jar包\",{\"1\":{\"2671\":1}}],[\"下载页\",{\"1\":{\"2671\":1}}],[\"下载mysql驱动\",{\"0\":{\"2536\":1}}],[\"下载工具下载前都会建立两个临时文件\",{\"1\":{\"2140\":1}}],[\"下限\",{\"0\":{\"2000\":1}}],[\"下一个node\",{\"1\":{\"1872\":1}}],[\"下一次装载字符时\",{\"1\":{\"817\":1,\"2056\":1}}],[\"下滑显示新的评论\",{\"1\":{\"1694\":1}}],[\"下午03时47分16秒\",{\"1\":{\"734\":1}}],[\"下次更新\",{\"1\":{\"590\":1}}],[\"下面介绍一种更加复杂\",{\"1\":{\"3433\":1}}],[\"下面是自动生成的安全模块配置\",{\"1\":{\"3337\":1}}],[\"下面是三个示例\",{\"1\":{\"344\":1}}],[\"下面的方法测试\",{\"1\":{\"1830\":1}}],[\"下面例子均采用典型实现\",{\"1\":{\"812\":1}}],[\"下面只是其中的一种\",{\"1\":{\"527\":1}}],[\"下面这种方式可以在容器初始化完成后手动加载bean\",{\"1\":{\"520\":1}}],[\"下划线模式\",{\"1\":{\"211\":1}}],[\"下单\",{\"1\":{\"49\":1,\"54\":1}}],[\"驼峰模式\",{\"1\":{\"211\":1}}],[\"示例代码\",{\"0\":{\"3231\":1,\"3234\":1,\"3237\":1,\"3240\":1,\"3242\":1},\"1\":{\"3227\":1}}],[\"示例5\",{\"0\":{\"2414\":1}}],[\"示例4\",{\"0\":{\"2411\":1}}],[\"示例3\",{\"0\":{\"1204\":1,\"2408\":1,\"2426\":1},\"1\":{\"1116\":1}}],[\"示例\",{\"0\":{\"271\":1,\"536\":1,\"631\":1,\"1114\":1,\"1465\":1,\"1499\":1,\"1500\":1,\"1512\":1,\"1609\":1,\"1620\":1,\"1641\":1,\"1740\":1,\"1810\":1,\"1817\":1,\"1851\":1,\"1852\":1,\"1905\":1,\"1906\":1,\"1966\":1,\"1981\":1,\"2001\":1,\"2071\":1,\"2118\":1,\"2121\":1,\"2139\":1,\"2150\":1,\"2154\":1,\"2220\":1,\"2252\":1,\"2323\":1,\"2349\":1,\"2368\":1,\"2369\":1,\"2371\":1,\"2373\":1,\"2375\":1,\"2377\":1,\"2431\":1,\"2612\":1,\"2613\":1,\"2870\":1,\"2888\":1,\"2890\":1,\"2894\":1,\"2896\":1,\"2903\":1,\"2908\":1,\"2942\":1,\"3118\":1,\"3123\":1,\"3130\":1,\"3134\":1,\"3140\":1,\"3146\":1,\"3153\":1,\"3158\":1,\"3166\":1,\"3170\":1,\"3173\":1,\"3177\":1,\"3179\":1,\"3183\":1,\"3186\":1,\"3189\":1,\"3194\":1,\"3198\":1,\"3425\":1,\"3587\":1,\"3590\":1,\"3634\":1},\"1\":{\"1038\":1,\"1181\":1,\"1184\":1,\"1186\":1,\"1189\":1,\"1283\":1,\"1292\":1,\"1293\":1,\"1408\":1,\"1500\":1,\"2082\":1,\"2325\":1,\"2450\":1,\"2451\":1,\"2477\":1,\"2478\":1,\"2479\":1,\"2480\":1,\"2481\":1,\"2482\":1,\"2483\":1,\"2484\":1,\"2485\":1,\"2487\":1,\"2489\":1,\"2491\":2,\"3435\":1,\"3581\":1,\"3609\":1,\"3610\":1,\"3611\":1,\"3613\":1,\"3623\":1,\"3628\":1,\"3630\":1}}],[\"示例2\",{\"0\":{\"212\":1,\"1203\":1,\"1467\":1,\"1592\":1,\"1755\":1,\"2405\":1,\"2423\":1},\"1\":{\"1116\":1,\"2582\":1}}],[\"示例1\",{\"0\":{\"211\":1,\"1202\":1,\"1466\":1,\"1591\":1,\"1754\":1,\"2402\":1,\"2420\":1},\"1\":{\"1116\":1,\"2582\":1}}],[\"示例如下\",{\"1\":{\"153\":1}}],[\"全盘扫描查询\",{\"1\":{\"3635\":1}}],[\"全量查询\",{\"0\":{\"3228\":1}}],[\"全查询\",{\"0\":{\"3165\":1}}],[\"全文检索\",{\"0\":{\"3175\":1},\"1\":{\"3174\":1,\"3175\":1,\"3200\":1}}],[\"全文检索都实现的很鸡肋\",{\"1\":{\"3097\":1}}],[\"全文搜索引擎\",{\"0\":{\"3095\":1}}],[\"全文搜索属于最常见的需求\",{\"1\":{\"3089\":1}}],[\"全文搜索\",{\"0\":{\"435\":1,\"3099\":1}}],[\"全球通用的字符集\",{\"1\":{\"2111\":1}}],[\"全局变量\",{\"1\":{\"2937\":1}}],[\"全局变量和局部变量的值和对象的地址储存在这里\",{\"1\":{\"1701\":1}}],[\"全局常量\",{\"1\":{\"1355\":1,\"1507\":2}}],[\"全等于\",{\"1\":{\"1426\":1}}],[\"全大写下划线分隔\",{\"1\":{\"1083\":1}}],[\"全小写\",{\"1\":{\"1083\":1}}],[\"全小写或用\",{\"1\":{\"210\":1}}],[\"全部保留\",{\"0\":{\"1973\":1}}],[\"全部相等就会返回true\",{\"1\":{\"915\":1}}],[\"全部加载\",{\"1\":{\"532\":1}}],[\"全参构造方法\",{\"1\":{\"620\":1}}],[\"全类名\",{\"0\":{\"1343\":1},\"1\":{\"540\":2}}],[\"全阶段\",{\"1\":{\"33\":1}}],[\"书写前缀\",{\"1\":{\"210\":1}}],[\"问题二+\",{\"1\":{\"1955\":1}}],[\"问题二\",{\"0\":{\"2559\":1},\"1\":{\"1955\":1}}],[\"问题一\",{\"0\":{\"2558\":1},\"1\":{\"1955\":1}}],[\"问题的原因\",{\"1\":{\"1755\":1}}],[\"问题2\",{\"1\":{\"1755\":1}}],[\"问题1\",{\"1\":{\"1755\":1}}],[\"问题\",{\"0\":{\"187\":1,\"2861\":1},\"1\":{\"379\":1,\"632\":1,\"633\":1,\"2602\":1,\"2861\":1,\"3455\":1,\"3494\":1}}],[\"菜单\",{\"1\":{\"2992\":1}}],[\"菜单栏run\",{\"1\":{\"2746\":1}}],[\"菜单栏\",{\"1\":{\"186\":1}}],[\"菜品管理\",{\"1\":{\"54\":1}}],[\"菜品\",{\"1\":{\"49\":1,\"54\":1}}],[\"由目录结构可知\",{\"1\":{\"3106\":1}}],[\"由容器创建servlet对象\",{\"1\":{\"2793\":1}}],[\"由不同子类实现\",{\"1\":{\"2681\":1}}],[\"由接口名\",{\"1\":{\"2383\":1}}],[\"由5部分组成\",{\"1\":{\"2237\":1}}],[\"由objectinputstream\",{\"1\":{\"2142\":1}}],[\"由构造器指定\",{\"1\":{\"2105\":1}}],[\"由这四个类派生出来的子类名称都是以其父类名作为子类名后缀\",{\"1\":{\"2024\":1}}],[\"由开发人员手动创建\",{\"1\":{\"1567\":1}}],[\"由开发者根据自身需要决定是否覆盖默认配置\",{\"1\":{\"562\":1}}],[\"由开发者决定是否使用该技术\",{\"1\":{\"562\":1}}],[\"由虚拟机\",{\"1\":{\"1567\":1}}],[\"由局部内部类和局部变量的声明周期不同所致\",{\"1\":{\"1460\":1}}],[\"由垃圾回收机制自动调用\",{\"1\":{\"1424\":1}}],[\"由规定可知\",{\"1\":{\"1398\":1}}],[\"由26\",{\"1\":{\"1082\":1}}],[\"由参数决定\",{\"1\":{\"821\":1}}],[\"由selectimports方法来返回这些类\",{\"1\":{\"567\":1}}],[\"由spring将这组数据加载到数据对象中\",{\"1\":{\"153\":1}}],[\"由于副本集未初始化\",{\"1\":{\"3661\":1}}],[\"由于\",{\"1\":{\"3515\":1}}],[\"由于理解英语语法的规则\",{\"1\":{\"3469\":1}}],[\"由于其不变性\",{\"1\":{\"3441\":1}}],[\"由于储存的数据是为了以后查询使用\",{\"1\":{\"3399\":1}}],[\"由于es内置了jdk\",{\"1\":{\"3107\":1}}],[\"由于session是保存在内存中的\",{\"1\":{\"3071\":1}}],[\"由于session数据是保存在一个对象里的\",{\"1\":{\"3060\":1}}],[\"由于servlet对象指挥创建一次\",{\"1\":{\"2802\":1}}],[\"由于xml中标签是自由设置的\",{\"1\":{\"3022\":1}}],[\"由于所有用户都可以创建和使用\",{\"1\":{\"2937\":1}}],[\"由于数据库连接得以重用\",{\"1\":{\"2667\":1}}],[\"由于参数也一样\",{\"1\":{\"2404\":1}}],[\"由于后面的方法已经定义过了\",{\"1\":{\"2399\":1}}],[\"由于关闭流是必须要进行的操作\",{\"1\":{\"2051\":1}}],[\"由于属性文件里的\",{\"1\":{\"1916\":1}}],[\"由于使用runnable接口创建多个线程时\",{\"1\":{\"1743\":1}}],[\"由于多态的缘故\",{\"1\":{\"1741\":1}}],[\"由于是单机es\",{\"1\":{\"3302\":1}}],[\"由于是由浏览器发送的两次请求\",{\"1\":{\"2912\":1}}],[\"由于是逻辑上的异常\",{\"1\":{\"1608\":1}}],[\"由于是模拟生成验证码\",{\"1\":{\"469\":1}}],[\"由于运行时异常比较常见\",{\"1\":{\"1595\":1}}],[\"由于java虚拟机需要调用类的main\",{\"1\":{\"1541\":1}}],[\"由于jar中的信息不会变化\",{\"1\":{\"183\":1}}],[\"由于单例模式只生成一个实例\",{\"1\":{\"1487\":1}}],[\"由于单线程的缘故\",{\"1\":{\"494\":1}}],[\"由于静态变量的加载早于对象\",{\"1\":{\"1478\":1}}],[\"由于类只会加载一次\",{\"1\":{\"1477\":1}}],[\"由于不需要创建对象就可以调用类方法\",{\"1\":{\"1472\":1}}],[\"由于该类的构造器是private的\",{\"1\":{\"880\":1}}],[\"由于number是抽象类\",{\"1\":{\"771\":1}}],[\"由于这里直接用person限制了因此\",{\"1\":{\"749\":1}}],[\"由于获取的是配置类的元数据\",{\"1\":{\"525\":1}}],[\"由于没有采用spring\",{\"1\":{\"416\":1}}],[\"由于有身份校验bug的存在\",{\"1\":{\"388\":1}}],[\"由于突发情况的出现\",{\"1\":{\"313\":1}}],[\"由\",{\"1\":{\"227\":1,\"2171\":1}}],[\"自反性\",{\"1\":{\"1428\":1}}],[\"自减不会改变数据类型\",{\"1\":{\"1141\":1}}],[\"自减的细节\",{\"0\":{\"1141\":1}}],[\"自增不会改变变量的数据类型\",{\"1\":{\"1141\":1}}],[\"自增\",{\"0\":{\"1141\":1},\"1\":{\"1141\":1}}],[\"自己不会存储元素\",{\"1\":{\"2441\":1}}],[\"自己写的程序用的\",{\"1\":{\"2186\":1}}],[\"自己命名标识符时要避免使用这些保留字\",{\"1\":{\"1080\":1}}],[\"自己手动添加\",{\"1\":{\"612\":1}}],[\"自然排序和定制排序\",{\"1\":{\"1934\":1}}],[\"自然排序\",{\"0\":{\"1905\":1,\"1935\":1,\"2474\":1},\"1\":{\"741\":1,\"932\":1,\"934\":1,\"935\":1,\"1887\":1,\"2474\":1}}],[\"自带的\",{\"1\":{\"545\":1}}],[\"自身不提供缓存功能\",{\"1\":{\"489\":1}}],[\"自签证书的设置\",{\"1\":{\"418\":1}}],[\"自定义分析器\",{\"0\":{\"3490\":1}}],[\"自定义\",{\"0\":{\"3136\":1}}],[\"自定义一个文件名用来测试\",{\"1\":{\"2934\":1}}],[\"自定义一个类\",{\"1\":{\"2772\":1}}],[\"自定义resultsethandler的实现类\",{\"0\":{\"2690\":1}}],[\"自定义员工类对象\",{\"1\":{\"2420\":1,\"2423\":1,\"2426\":1}}],[\"自定义函数式接口\",{\"0\":{\"2388\":1}}],[\"自定义缓冲区数组大小\",{\"1\":{\"2077\":1}}],[\"自定义泛型方法\",{\"0\":{\"1975\":1}}],[\"自定义泛型类\",{\"0\":{\"1961\":1,\"1966\":1,\"1969\":1}}],[\"自定义泛型\",{\"0\":{\"1960\":1}}],[\"自定义注解自动继承了java\",{\"1\":{\"1643\":1}}],[\"自定义注解\",{\"0\":{\"1639\":1},\"1\":{\"1638\":1}}],[\"自定义枚举类的步骤\",{\"0\":{\"1626\":1}}],[\"自定义枚举类\",{\"0\":{\"1620\":1}}],[\"自定义枚举类说明\",{\"0\":{\"1619\":1}}],[\"自定义异常最重要的是异常类的名字\",{\"1\":{\"1611\":1}}],[\"自定义异常需要提供serialversionuid\",{\"1\":{\"1611\":1}}],[\"自定义异常类的意义在于异常类的名字\",{\"1\":{\"1613\":1}}],[\"自定义异常类的总结\",{\"0\":{\"1613\":1}}],[\"自定义异常类的创建说明\",{\"0\":{\"1611\":1}}],[\"自定义异常类示例\",{\"0\":{\"1612\":1}}],[\"自定义异常类通常需要编写几个重载的构造器\",{\"1\":{\"1611\":1}}],[\"自定义异常类\",{\"0\":{\"1610\":1}}],[\"自定义异常中定义的异常信息\",{\"1\":{\"1609\":1}}],[\"自定义的标签名\",{\"1\":{\"3020\":1}}],[\"自定义的异常通过throw抛出\",{\"1\":{\"1611\":1}}],[\"自定义的异常也是可以throws到调用处的\",{\"1\":{\"1609\":1}}],[\"自定义的端点意义不大\",{\"1\":{\"353\":1}}],[\"自定义view\",{\"1\":{\"1540\":1}}],[\"自定义重写tostring\",{\"0\":{\"1434\":1}}],[\"自定义类型\",{\"1\":{\"3029\":2}}],[\"自定义类型的说明\",{\"1\":{\"3029\":1}}],[\"自定义类employee中\",{\"1\":{\"2405\":1}}],[\"自定义类实线序列化与反序列化\",{\"0\":{\"2154\":1}}],[\"自定义类中一定要重写equal和hashcode方法\",{\"1\":{\"1902\":1}}],[\"自定义类重写equals\",{\"0\":{\"1428\":1}}],[\"自定义类\",{\"0\":{\"2405\":1,\"2414\":1},\"1\":{\"910\":2}}],[\"自定义类的对象排序\",{\"0\":{\"757\":1}}],[\"自定义排序\",{\"1\":{\"932\":1}}],[\"自定义排序算法\",{\"1\":{\"894\":1}}],[\"自定义排序规则\",{\"1\":{\"893\":1}}],[\"自定义写入方式\",{\"1\":{\"822\":2,\"823\":2}}],[\"自定义格式\",{\"0\":{\"735\":1},\"1\":{\"728\":1}}],[\"自定义starter要用到用到自动装配的技术\",{\"1\":{\"569\":1}}],[\"自定义starter\",{\"0\":{\"569\":1}}],[\"自定义前缀\",{\"1\":{\"485\":1}}],[\"自定义端点\",{\"0\":{\"353\":1}}],[\"自定义端点信息\",{\"0\":{\"344\":1}}],[\"自定义组名\",{\"1\":{\"295\":1}}],[\"自定义配置文件\",{\"0\":{\"265\":1}}],[\"自定义临时属性\",{\"1\":{\"259\":1}}],[\"自定义开发代码\",{\"1\":{\"182\":1}}],[\"自动段合并\",{\"0\":{\"3457\":1}}],[\"自动在配置文件中加入安全配置信息\",{\"1\":{\"3325\":1}}],[\"自动在该模块中生效\",{\"1\":{\"307\":1}}],[\"自动修改配置文件\",{\"0\":{\"3327\":1},\"1\":{\"3325\":1}}],[\"自动销毁内存中的session\",{\"1\":{\"3073\":1}}],[\"自动将响应头里的set\",{\"1\":{\"3050\":1}}],[\"自动更新class和资源\",{\"1\":{\"2750\":1}}],[\"自动调用run方法\",{\"1\":{\"1719\":1}}],[\"自动调用tostring\",{\"1\":{\"1435\":1}}],[\"自动抛出\",{\"1\":{\"1567\":1}}],[\"自动生成\",{\"1\":{\"1567\":1}}],[\"自动释放\",{\"1\":{\"1546\":1}}],[\"自动拆箱\",{\"1\":{\"1443\":2}}],[\"自动装箱\",{\"1\":{\"1443\":2}}],[\"自动装箱与自动拆箱\",{\"0\":{\"1443\":1}}],[\"自动装配是非常底层的技术\",{\"1\":{\"557\":1}}],[\"自动装配\",{\"1\":{\"156\":1}}],[\"自动转\",{\"1\":{\"1411\":1}}],[\"自动类型转换的逆过程\",{\"1\":{\"1117\":1}}],[\"自动类型转换\",{\"1\":{\"1111\":1}}],[\"自动类型提升\",{\"0\":{\"1111\":1},\"1\":{\"1426\":1}}],[\"自动编译执行\",{\"1\":{\"1042\":1}}],[\"自动创建certs目录\",{\"1\":{\"3292\":1,\"3326\":1}}],[\"自动创建\",{\"1\":{\"821\":1,\"3321\":1}}],[\"自动创建好了\",{\"1\":{\"113\":1}}],[\"自动添加getter\",{\"1\":{\"620\":1}}],[\"自动刷新的关闭与开启\",{\"0\":{\"3454\":1}}],[\"自动刷新\",{\"1\":{\"487\":1}}],[\"自动映射\",{\"1\":{\"397\":1}}],[\"自动携带了众多basemapper中的方法\",{\"1\":{\"374\":1}}],[\"自动产生mapper接口的对象\",{\"1\":{\"365\":1}}],[\"自动构建项目build\",{\"0\":{\"189\":1}}],[\"自动构建了项目的目录\",{\"1\":{\"98\":1}}],[\"自动启动热部署\",{\"0\":{\"188\":1}}],[\"自动配置排除过滤器\",{\"1\":{\"568\":1}}],[\"自动配置介绍\",{\"0\":{\"558\":1}}],[\"自动配置\",{\"0\":{\"557\":1},\"1\":{\"45\":1,\"558\":1}}],[\"页面介绍\",{\"0\":{\"3571\":1}}],[\"页面设置的编码格式为utf\",{\"1\":{\"2877\":1}}],[\"页面上滑\",{\"1\":{\"1694\":1}}],[\"页面功能调整\",{\"1\":{\"614\":1}}],[\"页面消息处理\",{\"1\":{\"614\":1}}],[\"页面数据处理\",{\"1\":{\"614\":1}}],[\"页面开发\",{\"1\":{\"614\":1}}],[\"页面目录\",{\"1\":{\"245\":1}}],[\"页面\",{\"1\":{\"182\":1,\"244\":1}}],[\"页面等信息\",{\"1\":{\"181\":1}}],[\"页面的布局是什么样子的\",{\"1\":{\"22\":1}}],[\"发到每个参与节点\",{\"1\":{\"3415\":1}}],[\"发给对方一大堆源文件是非常不好的\",{\"1\":{\"2986\":1}}],[\"发生阻塞\",{\"1\":{\"1796\":2}}],[\"发生了重定向\",{\"1\":{\"2911\":1}}],[\"发生了乱码\",{\"1\":{\"1563\":1}}],[\"发生了二进制运算\",{\"1\":{\"1117\":1}}],[\"发生变化\",{\"1\":{\"180\":1}}],[\"发送多个文档的写操作请求\",{\"1\":{\"3417\":1}}],[\"发送多个文档的查询请求\",{\"1\":{\"3416\":1}}],[\"发送多个cookie\",{\"0\":{\"3052\":1}}],[\"发送文档更新请求\",{\"1\":{\"3413\":1}}],[\"发送文档的增删请求\",{\"1\":{\"3407\":1}}],[\"发送获取文档的请求\",{\"1\":{\"3410\":1}}],[\"发送删除所以你的请求\",{\"1\":{\"3212\":1}}],[\"发送请求查看刚创建的索引信息\",{\"1\":{\"3381\":1}}],[\"发送请求\",{\"1\":{\"3068\":1,\"3209\":1,\"3211\":1,\"3214\":1,\"3217\":1,\"3218\":1,\"3220\":1,\"3221\":1,\"3225\":1,\"3226\":1,\"3227\":1,\"3231\":1,\"3234\":1,\"3237\":1,\"3240\":1,\"3242\":1,\"3244\":1,\"3249\":1,\"3253\":1,\"3480\":1}}],[\"发送cookie\",{\"1\":{\"3046\":1}}],[\"发送cookie对象\",{\"0\":{\"3042\":1},\"1\":{\"3039\":1}}],[\"发送到客户端\",{\"1\":{\"3042\":1}}],[\"发送端示例\",{\"0\":{\"2231\":1}}],[\"发送端与接收端是两个独立的运行程序\",{\"1\":{\"2230\":1}}],[\"发送和接收\",{\"1\":{\"2229\":1}}],[\"发送数据结束时无需释放资源\",{\"1\":{\"2205\":1}}],[\"发送不管对方是否准备好\",{\"1\":{\"2205\":1}}],[\"发送核验验证码的请求\",{\"1\":{\"469\":1}}],[\"发送消息给运维等\",{\"1\":{\"645\":1}}],[\"发送消息\",{\"0\":{\"445\":1,\"453\":1},\"1\":{\"448\":1}}],[\"发现模块\",{\"1\":{\"3268\":1,\"3269\":1,\"3270\":1,\"3271\":1}}],[\"发现打印了hello\",{\"1\":{\"2782\":1}}],[\"发现自己需要的锁\",{\"1\":{\"1796\":1}}],[\"发现会出现重复数字\",{\"1\":{\"1757\":1}}],[\"发现\",{\"1\":{\"283\":1,\"2957\":1}}],[\"发现端口被占用了\",{\"1\":{\"255\":1}}],[\"发现产生了变化就重新加载一次\",{\"1\":{\"179\":1}}],[\"发布和使用类库\",{\"0\":{\"2986\":1}}],[\"发布模式\",{\"1\":{\"2351\":1}}],[\"发布\",{\"0\":{\"237\":1},\"1\":{\"235\":1}}],[\"方能进行连接\",{\"1\":{\"3739\":1}}],[\"方可实例化\",{\"1\":{\"1509\":1}}],[\"方法向集合中插入文档\",{\"1\":{\"3585\":1}}],[\"方法不一致\",{\"1\":{\"3121\":1}}],[\"方法进行数据的添加操作\",{\"1\":{\"3006\":1}}],[\"方法判断该用户名是否存在\",{\"1\":{\"3006\":1}}],[\"方法使用的频率会比较高\",{\"1\":{\"2873\":1}}],[\"方法即可\",{\"1\":{\"2807\":1,\"3632\":1}}],[\"方法作为抽象\",{\"1\":{\"2807\":1}}],[\"方法作为程序的入口\",{\"1\":{\"1541\":1}}],[\"方法调用之后\",{\"1\":{\"2798\":1}}],[\"方法调用时所需要的参数\",{\"1\":{\"2340\":1}}],[\"方法调用时实际传给形参的参数值\",{\"1\":{\"1289\":1}}],[\"方法完成资源的释放\",{\"1\":{\"2798\":1}}],[\"方法对数据进行排序\",{\"1\":{\"3611\":1}}],[\"方法对请求进行处理\",{\"1\":{\"2797\":1}}],[\"方法对应的myannotation的value值\",{\"1\":{\"1680\":1}}],[\"方法初始化这个对象\",{\"1\":{\"2796\":1}}],[\"方法检测下一行是否有效\",{\"1\":{\"2588\":1}}],[\"方法移动到下一行\",{\"1\":{\"2588\":1}}],[\"方法有两个参数\",{\"1\":{\"2569\":1,\"2570\":1}}],[\"方法都是空参\",{\"1\":{\"2407\":1}}],[\"方法都得到一个全新的迭代器对象\",{\"1\":{\"1837\":1}}],[\"方法引用写法\",{\"0\":{\"2404\":1}}],[\"方法引用示例\",{\"0\":{\"2401\":1}}],[\"方法引用时\",{\"1\":{\"2400\":1}}],[\"方法引用介绍\",{\"0\":{\"2395\":1}}],[\"方法引用\",{\"0\":{\"2394\":1,\"2407\":1,\"2410\":1,\"2413\":1,\"2416\":1},\"1\":{\"2390\":1,\"2396\":1}}],[\"方法在多线程环境中被正确加锁和同步\",{\"1\":{\"2276\":1}}],[\"方法会返回一个\",{\"1\":{\"2224\":1}}],[\"方法获得输出流\",{\"1\":{\"2217\":1}}],[\"方法获得输入流\",{\"1\":{\"2217\":1}}],[\"方法获取事件涉及的httpsession对象\",{\"1\":{\"2969\":1}}],[\"方法获取\",{\"1\":{\"922\":1,\"2564\":1,\"2567\":1}}],[\"方法获取输入的字符串\",{\"1\":{\"885\":1,\"1006\":1}}],[\"方法获取class对象\",{\"1\":{\"835\":1,\"2267\":1}}],[\"方法获取的类名是\",{\"1\":{\"525\":1}}],[\"方法获取具体的条数\",{\"1\":{\"404\":1}}],[\"方法用来获取\",{\"1\":{\"2167\":1}}],[\"方法二\",{\"1\":{\"2118\":1}}],[\"方法一\",{\"1\":{\"2118\":1}}],[\"方法时\",{\"1\":{\"1926\":1,\"2924\":1}}],[\"方法时不必创建对象\",{\"1\":{\"1541\":1}}],[\"方法或者compare\",{\"1\":{\"1914\":1,\"1933\":1}}],[\"方法或字段声明之前\",{\"1\":{\"1056\":1}}],[\"方法比较的\",{\"1\":{\"1897\":1}}],[\"方法比较相等\",{\"1\":{\"1885\":1}}],[\"方法返回一个集合中的所有索引的数组\",{\"1\":{\"3623\":1}}],[\"方法返回符合条件的全部记录条数\",{\"1\":{\"3609\":1}}],[\"方法返回0\",{\"1\":{\"1914\":1,\"1933\":1}}],[\"方法返回\",{\"1\":{\"1912\":2}}],[\"方法返回值也相等\",{\"1\":{\"1885\":1}}],[\"方法返回所要的数据\",{\"1\":{\"1278\":1}}],[\"方法之前必须要调用it\",{\"1\":{\"1845\":1}}],[\"方法之后已经调用了\",{\"1\":{\"926\":1,\"1848\":1}}],[\"方法唤醒\",{\"1\":{\"1799\":1}}],[\"方法将抛出instantiationexception异常\",{\"1\":{\"2285\":1}}],[\"方法将该线程挂起\",{\"1\":{\"1775\":1}}],[\"方法将相应的参数设置给该\",{\"1\":{\"567\":1}}],[\"方法暂停当前线程的执行\",{\"1\":{\"1775\":1}}],[\"方法定义了线程的操作和功能\",{\"1\":{\"1749\":1}}],[\"方法列表\",{\"0\":{\"1727\":1}}],[\"方法启动\",{\"1\":{\"1725\":1}}],[\"方法由jvm调用\",{\"1\":{\"1724\":1}}],[\"方法前调用thread\",{\"1\":{\"1711\":1}}],[\"方法同时被\",{\"1\":{\"1680\":1}}],[\"方法声明\",{\"1\":{\"1653\":1}}],[\"方法声明时的参数\",{\"1\":{\"1289\":1}}],[\"方法等已过时\",{\"1\":{\"1637\":1,\"1638\":1}}],[\"方法直接用即可\",{\"1\":{\"1627\":1}}],[\"方法直接使用父类的\",{\"1\":{\"1613\":1}}],[\"方法重写时的异常规则\",{\"0\":{\"1602\":1}}],[\"方法区\",{\"1\":{\"1546\":1}}],[\"方法执行完\",{\"1\":{\"1546\":1}}],[\"方法执行时会自动启动springboot\",{\"1\":{\"227\":1}}],[\"方法如果有返回值\",{\"1\":{\"1542\":1}}],[\"方法可以通过参数指定排序的字段\",{\"1\":{\"3611\":1}}],[\"方法可以作为我们与控制台交互的方式\",{\"1\":{\"1541\":1}}],[\"方法可以声明0个\",{\"1\":{\"1277\":1}}],[\"方法也是一个普通的静态方法\",{\"1\":{\"1541\":1}}],[\"方法来跳过指定数量的数据\",{\"1\":{\"3610\":1}}],[\"方法来读取指定数量的数据\",{\"1\":{\"3610\":1}}],[\"方法来设置这些参数\",{\"1\":{\"2569\":1,\"2570\":1}}],[\"方法来比较元素之间的大小关系\",{\"1\":{\"1887\":1}}],[\"方法来启动这个线程\",{\"1\":{\"1718\":1}}],[\"方法来完成操作的\",{\"1\":{\"1717\":1}}],[\"方法来\",{\"1\":{\"1429\":1}}],[\"方法来获得一个\",{\"1\":{\"984\":1}}],[\"方法是由编译期自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的\",{\"1\":{\"2276\":1}}],[\"方法是阻塞的\",{\"1\":{\"2082\":1}}],[\"方法是否包含myannotation注解\",{\"1\":{\"1680\":1}}],[\"方法是可以连续调用的\",{\"1\":{\"1542\":1}}],[\"方法是可以有参数的\",{\"1\":{\"1289\":1}}],[\"方法是静态的\",{\"1\":{\"1541\":1}}],[\"方法是被重写过的\",{\"1\":{\"1429\":1}}],[\"方法必须由其所在类或对象调用才有意义\",{\"1\":{\"1289\":1}}],[\"方法递归包含了一种隐式的循环\",{\"1\":{\"1283\":1}}],[\"方法访问类的成员\",{\"0\":{\"1282\":1}}],[\"方法访问非\",{\"1\":{\"1263\":1}}],[\"方法被调用一次\",{\"1\":{\"1281\":1}}],[\"方法功能的体现\",{\"1\":{\"1277\":1}}],[\"方法体逻辑\",{\"1\":{\"2399\":1}}],[\"方法体都省了\",{\"1\":{\"2390\":1}}],[\"方法体都没有关系\",{\"1\":{\"1285\":1}}],[\"方法体外的\",{\"1\":{\"2364\":1}}],[\"方法体\",{\"1\":{\"1277\":2,\"2404\":1}}],[\"方法形参\",{\"1\":{\"1271\":1,\"1273\":1}}],[\"方法内\",{\"1\":{\"1271\":1}}],[\"方法修改指定字符或字符串时\",{\"1\":{\"1128\":1}}],[\"方法和getproperty\",{\"1\":{\"1916\":1}}],[\"方法和类\",{\"1\":{\"1462\":1}}],[\"方法和构造器\",{\"1\":{\"1326\":1}}],[\"方法和\",{\"1\":{\"1081\":1}}],[\"方法上面\",{\"1\":{\"1648\":1}}],[\"方法上的文档格式如下\",{\"1\":{\"1060\":1}}],[\"方法上常用文档标记\",{\"0\":{\"1060\":1}}],[\"方法签名throws对应的异常\",{\"1\":{\"1060\":1}}],[\"方法名\",{\"1\":{\"1058\":1,\"1083\":1,\"1259\":1,\"1277\":2,\"1295\":2,\"1481\":1,\"1536\":1,\"1628\":1,\"1980\":1,\"2296\":2,\"2398\":1,\"2962\":1,\"2963\":1,\"2964\":1,\"2965\":2,\"2966\":2,\"2967\":2,\"2968\":2,\"2969\":1}}],[\"方法名和参数\",{\"1\":{\"379\":1}}],[\"方法中只要规定了返回值类型\",{\"1\":{\"2364\":1}}],[\"方法中只能调用方法或属性\",{\"1\":{\"1281\":1}}],[\"方法中操作的是形参中的m\",{\"1\":{\"1292\":1}}],[\"方法中也可以定义变量\",{\"1\":{\"1282\":1}}],[\"方法中\",{\"1\":{\"1277\":1,\"1282\":1}}],[\"方法中不要加\",{\"1\":{\"1056\":1}}],[\"方法中指明如何比较大小\",{\"1\":{\"744\":1}}],[\"方法得到该类的实例\",{\"1\":{\"998\":1,\"1004\":1}}],[\"方法的注解\",{\"1\":{\"2296\":1}}],[\"方法的过程\",{\"1\":{\"2276\":1}}],[\"方法的使用\",{\"1\":{\"2074\":1}}],[\"方法的使用示例\",{\"0\":{\"1994\":1}}],[\"方法的主体称为线程体\",{\"1\":{\"1717\":1}}],[\"方法的method实例\",{\"1\":{\"1680\":2}}],[\"方法的类型\",{\"1\":{\"1536\":1}}],[\"方法的写法\",{\"1\":{\"1536\":1}}],[\"方法的形参被赋予了m\",{\"1\":{\"1292\":1}}],[\"方法的参数可以是任意数据类型\",{\"1\":{\"1290\":1}}],[\"方法的参数名\",{\"1\":{\"1060\":1}}],[\"方法的重载\",{\"0\":{\"1284\":1}}],[\"方法的结果应该返回给调用者\",{\"1\":{\"1281\":1}}],[\"方法的调用\",{\"0\":{\"1279\":1}}],[\"方法的调用者\",{\"1\":{\"874\":1,\"2314\":1}}],[\"方法的分类\",{\"0\":{\"1277\":1}}],[\"方法的局部变量\",{\"1\":{\"1076\":1}}],[\"方法的返回值来比较大小\",{\"1\":{\"745\":1}}],[\"方法参数是一个包含文件路径属性的file对象\",{\"1\":{\"807\":1}}],[\"方法\",{\"0\":{\"1275\":1,\"2799\":1,\"2938\":1},\"1\":{\"337\":2,\"709\":1,\"745\":1,\"754\":1,\"926\":1,\"929\":1,\"1045\":1,\"1058\":1,\"1076\":1,\"1257\":1,\"1258\":1,\"1259\":1,\"1274\":1,\"1276\":1,\"1305\":1,\"1306\":1,\"1310\":1,\"1323\":1,\"1328\":1,\"1329\":1,\"1348\":1,\"1380\":1,\"1382\":1,\"1405\":1,\"1406\":2,\"1423\":1,\"1424\":1,\"1427\":1,\"1429\":1,\"1433\":1,\"1454\":1,\"1470\":1,\"1485\":1,\"1541\":1,\"1599\":1,\"1635\":1,\"1661\":1,\"1680\":1,\"1774\":1,\"1836\":2,\"1848\":1,\"1885\":1,\"1891\":1,\"1895\":1,\"1909\":1,\"1916\":1,\"1922\":1,\"1959\":1,\"2074\":1,\"2120\":1,\"2257\":1,\"2317\":2,\"2420\":2,\"2423\":1,\"2426\":1,\"2451\":1,\"2586\":1}}],[\"方便查询\",{\"1\":{\"3316\":1,\"3541\":1}}],[\"方便区分\",{\"1\":{\"2753\":1}}],[\"方便调试\",{\"1\":{\"2750\":1}}],[\"方便地访问数据库资源\",{\"1\":{\"2527\":1}}],[\"方便看框架源码\",{\"1\":{\"2287\":1}}],[\"方便设置线程属性\",{\"1\":{\"1817\":1}}],[\"方便直接用类调用\",{\"1\":{\"1485\":1}}],[\"方便类的管理\",{\"1\":{\"1334\":1}}],[\"方便进行一些测试\",{\"1\":{\"885\":1,\"1006\":1}}],[\"方便理解spring\",{\"1\":{\"504\":1}}],[\"方便缓存技术的开发与管理\",{\"1\":{\"464\":1}}],[\"方便以后调用\",{\"1\":{\"332\":1}}],[\"方便维护\",{\"1\":{\"266\":1}}],[\"方便代码的调试\",{\"1\":{\"177\":1}}],[\"方式5\",{\"0\":{\"2549\":1}}],[\"方式4\",{\"0\":{\"2548\":1}}],[\"方式3\",{\"0\":{\"2547\":1,\"2622\":1}}],[\"方式告诉数据库\",{\"1\":{\"2543\":1}}],[\"方式表明可以调用xxx包下的所有结构\",{\"1\":{\"1345\":1}}],[\"方式\",{\"1\":{\"674\":1,\"1330\":1,\"2204\":1}}],[\"方式二\",{\"1\":{\"633\":1,\"812\":2,\"1458\":1,\"2048\":1,\"2060\":1,\"2069\":1,\"3564\":1}}],[\"方式一\",{\"1\":{\"633\":1,\"3564\":1}}],[\"方式2\",{\"0\":{\"2546\":1,\"2621\":1},\"1\":{\"241\":1,\"1445\":2,\"1769\":1,\"2622\":1}}],[\"方式1获取driver实现类的时候使用了第三方api\",{\"1\":{\"2546\":1}}],[\"方式1\",{\"0\":{\"2545\":1,\"2620\":1},\"1\":{\"241\":1,\"507\":1,\"1445\":2,\"1769\":1}}],[\"方案优化\",{\"0\":{\"2863\":1}}],[\"方案\",{\"0\":{\"3533\":1},\"1\":{\"369\":1,\"1388\":1,\"3443\":1}}],[\"方案2\",{\"0\":{\"2651\":1},\"1\":{\"179\":1}}],[\"方案1\",{\"0\":{\"2650\":1},\"1\":{\"179\":1}}],[\"背景\",{\"0\":{\"1531\":1,\"1692\":1,\"3096\":1},\"1\":{\"179\":1,\"1812\":1}}],[\"想用需要自己手动安装\",{\"1\":{\"3567\":1}}],[\"想快速迭代开发\",{\"1\":{\"3542\":1}}],[\"想被搜索到\",{\"1\":{\"3442\":1}}],[\"想索引中插入数据后\",{\"1\":{\"3200\":1}}],[\"想要在java程序中表示一个真实存在的文件或目录\",{\"1\":{\"2010\":1}}],[\"想再遍历就重新获得迭代器\",{\"1\":{\"1847\":1}}],[\"想不导入直接用也可以\",{\"1\":{\"1343\":1}}],[\"想单独执行某个class\",{\"1\":{\"1051\":1}}],[\"想让spring发现这些注解并加入bean管理\",{\"1\":{\"511\":1}}],[\"想查看效果就要重启服务器\",{\"1\":{\"177\":1}}],[\"想修改版本需要在项目构建完后\",{\"1\":{\"102\":1}}],[\"但开启认证之后\",{\"1\":{\"3711\":1}}],[\"但需要配置\",{\"1\":{\"3645\":1}}],[\"但只支持相等匹配\",{\"1\":{\"3621\":1}}],[\"但已经插入成功的数据不会回滚掉\",{\"1\":{\"3591\":1}}],[\"但这同时意味着需要消耗更多的\",{\"1\":{\"3516\":1}}],[\"但这种方式仅适用于局域网\",{\"1\":{\"3316\":1}}],[\"但这种重复执行无须循环控制\",{\"1\":{\"1283\":1}}],[\"但如果多个分片都需要在同一个节点上竞争使用相同的资源就有些糟糕了\",{\"1\":{\"3507\":1}}],[\"但如果不是\",{\"1\":{\"1770\":1}}],[\"但并不意味着分片和副本越多越好\",{\"1\":{\"3506\":1}}],[\"但某些场景下非常影响体验\",{\"1\":{\"3493\":1}}],[\"但会在一秒之内变为可见\",{\"1\":{\"3450\":1}}],[\"但被删除的那个旧版本文档在结果集返回前就已经被移除\",{\"1\":{\"3447\":1}}],[\"但它的缺点是空间利用率不是很理想\",{\"1\":{\"3547\":1}}],[\"但它会在最终结果被返回前从结果集中移除\",{\"1\":{\"3447\":1}}],[\"但它同时使用双向链表维护元素的次序\",{\"1\":{\"1886\":1,\"1902\":1}}],[\"但索引在\",{\"1\":{\"3446\":1}}],[\"但具有很强的相关性\",{\"1\":{\"3436\":1}}],[\"但平台网关其实开启了防火墙\",{\"1\":{\"3349\":1}}],[\"但实际开发中不要创建\",{\"1\":{\"3292\":1}}],[\"但实际引用的是子类对象\",{\"1\":{\"1399\":1}}],[\"但访问http\",{\"1\":{\"3110\":1}}],[\"但conn\",{\"1\":{\"2669\":1}}],[\"但因自身存在bug\",{\"1\":{\"2668\":1}}],[\"但aop代理中的方法与目标对象的方法存在差异\",{\"1\":{\"2348\":1}}],[\"但里的逻辑代码进行了加强\",{\"1\":{\"2333\":1}}],[\"但一旦某个类被加载到类加载器中\",{\"1\":{\"2278\":1}}],[\"但java可以称之为\",{\"1\":{\"2247\":1}}],[\"但jdk中就有两万个类\",{\"1\":{\"532\":1}}],[\"但file类的功能比较有限\",{\"1\":{\"2163\":1}}],[\"但直接继承于java\",{\"1\":{\"2128\":1}}],[\"但对于频繁的遍历操作\",{\"1\":{\"1902\":1}}],[\"但此时打印机正被进程p2\",{\"1\":{\"1790\":1}}],[\"但此时就不能再使用外层类的非static的成员变量\",{\"1\":{\"1453\":1}}],[\"但多个线程操作共享的系统资源可能就会带来安全的隐患\",{\"1\":{\"1687\":1}}],[\"但有的错误只有在\",{\"1\":{\"1571\":1}}],[\"但在windows下使用\",{\"1\":{\"2012\":1}}],[\"但在静态方法中不能使用类的泛型\",{\"1\":{\"1969\":1}}],[\"但在迭代访问\",{\"1\":{\"1886\":1}}],[\"但在运行期\",{\"1\":{\"1397\":1}}],[\"但在商业计算中\",{\"1\":{\"778\":1}}],[\"但不是所有的副本分片都正常运行\",{\"1\":{\"3278\":1}}],[\"但不等价于object\",{\"1\":{\"1969\":1}}],[\"但不能连接\",{\"1\":{\"2681\":1}}],[\"但不能读取自己放入线路的信息\",{\"1\":{\"2217\":1}}],[\"但不能是与arithmeticexception类无关的异常\",{\"1\":{\"1586\":1}}],[\"但不能进行重新赋值\",{\"1\":{\"1354\":1}}],[\"但不叫重写\",{\"1\":{\"1375\":1}}],[\"但不加l有时会报错\",{\"1\":{\"1116\":1}}],[\"但注意不能定义方法\",{\"1\":{\"1282\":1}}],[\"但必须是同一个类型\",{\"1\":{\"1179\":1}}],[\"但他是个final类\",{\"1\":{\"1127\":1}}],[\"但他是独立的\",{\"1\":{\"162\":1}}],[\"但该值超过了int范围\",{\"1\":{\"1116\":1}}],[\"但能包含关键字和保留字\",{\"1\":{\"1082\":1}}],[\"但以后版本可能会作为关键字使用\",{\"1\":{\"1080\":1}}],[\"但可以读操作\",{\"1\":{\"3645\":1}}],[\"但可以通过它给定的方法来获取这些属性\",{\"1\":{\"2239\":1}}],[\"但可以通过特殊的方法创建匿名类\",{\"1\":{\"1497\":1}}],[\"但可以不指定泛型\",{\"1\":{\"1968\":1}}],[\"但可以使用包装类填充\",{\"1\":{\"1964\":1}}],[\"但可以重写\",{\"1\":{\"1520\":1}}],[\"但可以是有结果的表达式\",{\"1\":{\"1278\":1}}],[\"但可以对key\",{\"1\":{\"958\":1}}],[\"但可能有多个\",{\"1\":{\"2868\":1}}],[\"但可能造成精度降低或溢出\",{\"1\":{\"1117\":1}}],[\"但可能不是自己预想的bean\",{\"1\":{\"529\":1}}],[\"但\",{\"1\":{\"786\":1,\"2009\":1}}],[\"但上面的写法太复杂了\",{\"1\":{\"537\":1}}],[\"但企业级开发中不可能在spring容器中进行bean的饱和式加载的\",{\"1\":{\"532\":1}}],[\"但框架源码中经常被用到\",{\"1\":{\"522\":1}}],[\"但框架中用的到\",{\"1\":{\"520\":1}}],[\"但还可以出现如下特殊字符\",{\"1\":{\"501\":1}}],[\"但没被整合\",{\"1\":{\"464\":1}}],[\"但无法适配高版本的es服务\",{\"1\":{\"414\":1}}],[\"但启动后再访问就很快\",{\"1\":{\"332\":1}}],[\"但是bson有json没有的一些数据类型\",{\"1\":{\"3547\":1}}],[\"但是会在结果中被过滤掉\",{\"1\":{\"3528\":2}}],[\"但是单次批处理的数据大小应从\",{\"1\":{\"3514\":1}}],[\"但是对写入要求较高的场景\",{\"1\":{\"3513\":1}}],[\"但是对于框架来说\",{\"1\":{\"3022\":1}}],[\"但是不要在生产环境下每次索引一个文档都去手动刷新\",{\"1\":{\"3452\":1}}],[\"但是不能直接设置\",{\"1\":{\"2310\":1}}],[\"但是不能直接访问private修饰的成员\",{\"1\":{\"1363\":1}}],[\"但是不能重写父类中的属性\",{\"1\":{\"1377\":1}}],[\"但是表达的意思是一样的\",{\"1\":{\"3436\":1}}],[\"但是主分片可能成功返回文档\",{\"1\":{\"3411\":1}}],[\"但是在硬件故障时有丢失数据的风险\",{\"1\":{\"3384\":1}}],[\"但是在开发场景中\",{\"1\":{\"739\":1}}],[\"但是副本分片没有全部处在正常状态\",{\"1\":{\"3384\":1}}],[\"但是你事后不能改变分片的数量\",{\"1\":{\"3369\":1}}],[\"但是你需要考虑你月的天数\",{\"1\":{\"501\":1}}],[\"但是也支持shell命令\",{\"1\":{\"3568\":1}}],[\"但是也会占用更多的空间\",{\"1\":{\"3197\":1}}],[\"但是也能像方法那样重载\",{\"1\":{\"1319\":1}}],[\"但是没有可用的关系数据库可以满足\",{\"1\":{\"3098\":1}}],[\"但是维护起来也很麻烦\",{\"1\":{\"3097\":1}}],[\"但是浏览器的地址一直是\",{\"1\":{\"2904\":1}}],[\"但是编写起来还是比较麻烦的\",{\"1\":{\"2805\":1}}],[\"但是速度不确定是否有bonecp快\",{\"1\":{\"2668\":1}}],[\"但是未必完全一样\",{\"1\":{\"2602\":1}}],[\"但是由于方法是有参数限制的\",{\"1\":{\"2385\":1}}],[\"但是由于变量声明为父类类型\",{\"1\":{\"1410\":1}}],[\"但是非public修饰的成员\",{\"1\":{\"2317\":1}}],[\"但是使用的方式完全不同\",{\"1\":{\"2161\":1}}],[\"但是java程序中的一个file对象\",{\"1\":{\"2010\":1}}],[\"但是只要他们不是同一个对象\",{\"1\":{\"1895\":1}}],[\"但是只是从概率上讲\",{\"1\":{\"1735\":1}}],[\"但是只是null\",{\"1\":{\"1266\":1}}],[\"但是我们需要线程安全问题时\",{\"1\":{\"1876\":1}}],[\"但是这种方案不适用于get请求\",{\"1\":{\"2879\":1}}],[\"但是这样做\",{\"1\":{\"1946\":1}}],[\"但是这里如果不stop\",{\"1\":{\"1768\":1}}],[\"但是这个char\",{\"1\":{\"693\":1}}],[\"但是因为cpu时间单元特别短\",{\"1\":{\"1689\":1}}],[\"但是一个线程崩溃整个进程都死掉\",{\"1\":{\"1688\":1}}],[\"但是进程之间的资源是独立的\",{\"1\":{\"1688\":1}}],[\"但是返回值更精准\",{\"1\":{\"1607\":1}}],[\"但是并不能确定如何处理这种异常\",{\"1\":{\"1597\":1}}],[\"但是运行时仍可能报错\",{\"1\":{\"1595\":1}}],[\"但是运行还是会出错\",{\"1\":{\"1420\":1}}],[\"但是办理的具体业务是不确定的\",{\"1\":{\"1500\":1}}],[\"但是某些部分易变\",{\"1\":{\"1498\":1}}],[\"但是有抽象方法的类一定要声明成抽象类\",{\"1\":{\"1496\":1}}],[\"但是必须是final的\",{\"1\":{\"1460\":1}}],[\"但是前面冠以外部类的类名和$符号\",{\"1\":{\"1460\":1}}],[\"但是它的对象可以通过外部方法的返回值返回使用\",{\"1\":{\"1459\":1}}],[\"但是它的大多数方法已经在jdk\",{\"1\":{\"708\":1}}],[\"但是自始至终就创建过一个对象\",{\"1\":{\"1392\":1}}],[\"但是内存中还是只创建了子类的一个对象\",{\"1\":{\"1384\":1}}],[\"但是如果使用的是xxx子包下的结构\",{\"1\":{\"1345\":1}}],[\"但是跟文件夹还是不一样的\",{\"1\":{\"1335\":1}}],[\"但是\",{\"1\":{\"1277\":1,\"1380\":1,\"1504\":1,\"2111\":1,\"3121\":1,\"3393\":1,\"3470\":1,\"3528\":1}}],[\"但是开发中\",{\"1\":{\"1258\":1,\"1824\":1}}],[\"但是他们的值是空的\",{\"1\":{\"1237\":1}}],[\"但是for循环也可以通过以下方式实现初始化部分外移\",{\"1\":{\"1185\":1}}],[\"但是为了后续使用eclipse等开发工具不报错\",{\"1\":{\"1027\":1}}],[\"但是顺序不同\",{\"1\":{\"915\":1}}],[\"但是arrays$arraylist中并没有重写这些方法\",{\"1\":{\"897\":1}}],[\"但是该arraylist只是arrays的内部静态类的arraylist\",{\"1\":{\"897\":1}}],[\"但是要注意\",{\"1\":{\"1759\":1}}],[\"但是要明确\",{\"1\":{\"1563\":1}}],[\"但是要使用lang包下的子包\",{\"1\":{\"1345\":1}}],[\"但是要是特定的string\",{\"1\":{\"735\":1}}],[\"但是要测试的属性值与配置文件中的不一样\",{\"1\":{\"230\":1}}],[\"但是更方便\",{\"1\":{\"712\":1}}],[\"但是就无法使用临时属性了\",{\"1\":{\"259\":1}}],[\"但取而代之是可以采用spring\",{\"1\":{\"176\":1}}],[\"影响测试结果\",{\"1\":{\"174\":1}}],[\"影响目录观感\",{\"1\":{\"103\":1}}],[\"而次要人员可能成为选举期间的主要人员\",{\"1\":{\"3646\":1}}],[\"而主要人员可能会退出并成为次要人员\",{\"1\":{\"3646\":1}}],[\"而其他节点被视为次要\",{\"1\":{\"3641\":1}}],[\"而将集合中的词作为词干\",{\"1\":{\"3621\":1}}],[\"而没有在硬盘中\",{\"1\":{\"3578\":1}}],[\"而没有变量和方法的实现\",{\"1\":{\"1502\":1}}],[\"而我们使用\",{\"1\":{\"3524\":1}}],[\"而我们自定义的类\",{\"1\":{\"910\":1}}],[\"而模糊查询会导致查询引擎放弃索引\",{\"1\":{\"3524\":1}}],[\"而段数目太多会带来较大的麻烦\",{\"1\":{\"3456\":1}}],[\"而只能进行替换\",{\"1\":{\"3442\":1}}],[\"而集群是由一个或者多个拥有相同cluster\",{\"1\":{\"3374\":1}}],[\"而任一节点都可能没有这样大的磁盘空间\",{\"1\":{\"3365\":1}}],[\"而无需使用额外的组件或进行编码\",{\"1\":{\"3114\":1}}],[\"而ik中文分词器版本为\",{\"1\":{\"3104\":1}}],[\"而import是导入命名空间的\",{\"1\":{\"1339\":1}}],[\"而业务中往往采用模糊查询进行数据的搜索\",{\"1\":{\"3524\":1}}],[\"而业务逻辑层和数据访问层的代码不需要发生变化\",{\"1\":{\"3012\":1}}],[\"而业务逻辑层方法调用数据访问层方法进行数据的操作\",{\"1\":{\"3007\":1}}],[\"而业务层的方法名就是要做的业务\",{\"1\":{\"634\":1}}],[\"而classes目录下则包含编译好的servlet类和jsp\",{\"1\":{\"2996\":1}}],[\"而calendar并不比date好多少\",{\"1\":{\"708\":1}}],[\"而src不再web目录下\",{\"1\":{\"2941\":1}}],[\"而servletcontext对象是可以直接跟tomcat通信的\",{\"1\":{\"2933\":1}}],[\"而servlet接口中有service方法\",{\"1\":{\"2786\":1}}],[\"而sendcodetosms方法就可以直接使用缓存注解\",{\"1\":{\"471\":1}}],[\"而后缀名可以随便定义\",{\"1\":{\"2935\":1}}],[\"而httpservlet的原理也是如此\",{\"1\":{\"2814\":1}}],[\"而tomcat\",{\"1\":{\"2804\":1}}],[\"而dql操作需要额外关闭一个resultset资源\",{\"1\":{\"2598\":1}}],[\"而持久化的实现过程大多通过各种关系数据库来完成\",{\"1\":{\"2525\":1}}],[\"而nosql的数据就需要java层面去处理了\",{\"1\":{\"2437\":1}}],[\"而lambda表达式可以作为函数式接口的实例\",{\"1\":{\"2396\":1}}],[\"而language\",{\"1\":{\"2356\":1}}],[\"而函数式接口就补气了这个短板\",{\"1\":{\"2381\":1}}],[\"而用反射创建类的对象\",{\"1\":{\"2253\":1}}],[\"而url类则不仅符合语义\",{\"1\":{\"2243\":1}}],[\"而url和urn则是具体的资源标识的方式\",{\"1\":{\"2243\":1}}],[\"而url是uniform\",{\"1\":{\"2243\":1}}],[\"而urn\",{\"1\":{\"2243\":1}}],[\"而utf\",{\"1\":{\"2111\":1}}],[\"而得名\",{\"1\":{\"2203\":1}}],[\"而与再下一层不发生关系\",{\"1\":{\"2200\":1}}],[\"而g是具有泛型声明的类或接口\",{\"1\":{\"1985\":1}}],[\"而输入数据的取值范围是无限的\",{\"1\":{\"1899\":1}}],[\"而如果两个元素通过算法计算的位置是一样的\",{\"1\":{\"1890\":1}}],[\"而jar包则不行\",{\"1\":{\"2997\":1}}],[\"而jar的涵盖范围更广\",{\"1\":{\"2997\":1}}],[\"而java中是驼峰分隔单词的\",{\"1\":{\"2602\":1}}],[\"而java不能直接定义函数\",{\"1\":{\"2381\":1}}],[\"而java\",{\"1\":{\"1820\":1}}],[\"而jdk8中的arraylist的对象的创建类似于单例的懒汉式\",{\"1\":{\"1870\":1}}],[\"而又不需暴露该对象的内部细节\",{\"1\":{\"1835\":1}}],[\"而当前线程排队等候其他线程调用notify\",{\"1\":{\"1799\":1}}],[\"而进程p1申请资源r2\",{\"1\":{\"1793\":1}}],[\"而p2在未释放打印机之前\",{\"1\":{\"1790\":1}}],[\"而多个买票程序通过是否有票的判断时\",{\"1\":{\"1755\":1}}],[\"而应用程序是软件的一个组成部分\",{\"1\":{\"1683\":2}}],[\"而执行的方法a可以考虑使用try\",{\"1\":{\"1603\":1}}],[\"而此时若使用多态\",{\"1\":{\"1602\":1}}],[\"而由该方法的调用者负责处理\",{\"1\":{\"1597\":1}}],[\"而对象实体中保存了对象的属性\",{\"1\":{\"1548\":1}}],[\"而对于多态\",{\"1\":{\"1407\":1}}],[\"而使用javabean设计的类\",{\"1\":{\"1534\":1}}],[\"而使用热部署就能解决这个问题\",{\"1\":{\"177\":1}}],[\"而接口实现则是\",{\"1\":{\"1506\":1}}],[\"而它们之间又没有is\",{\"1\":{\"1505\":1}}],[\"而抽象类不能实例化\",{\"1\":{\"1497\":1}}],[\"而并没有产生实质上的对象\",{\"1\":{\"1471\":1}}],[\"而且还可以利用副本服务器做只读服务器\",{\"1\":{\"3639\":1}}],[\"而且还指明了如何locate这个资源\",{\"1\":{\"2236\":1,\"2243\":1}}],[\"而且在\",{\"1\":{\"3498\":1}}],[\"而且根据设置的规则创建\",{\"1\":{\"3373\":1}}],[\"而且安全\",{\"1\":{\"2986\":1}}],[\"而且除了路由\",{\"1\":{\"2820\":1}}],[\"而且\",{\"1\":{\"2163\":1,\"3261\":1}}],[\"而且只执行一次\",{\"1\":{\"1527\":1}}],[\"而且可以多继承\",{\"1\":{\"1508\":1}}],[\"而且是先声明后使用\",{\"1\":{\"1459\":1,\"1460\":1}}],[\"而且string\",{\"1\":{\"1429\":1}}],[\"而且y\",{\"1\":{\"1428\":1}}],[\"而且位置是灵活的\",{\"1\":{\"1175\":1}}],[\"而方法的调用是在运行时确定的\",{\"1\":{\"1405\":1}}],[\"而实际使用的是子类\",{\"1\":{\"1398\":1}}],[\"而实体类总有该属性\",{\"1\":{\"408\":1}}],[\"而实体类中没有的字段\",{\"1\":{\"408\":1}}],[\"而参数本身不受影响\",{\"1\":{\"1291\":1}}],[\"而数组名中引用的是这块连续空间的首地址\",{\"1\":{\"1209\":1}}],[\"而数组中的元素可以是任何数据类型\",{\"1\":{\"1209\":1}}],[\"而加l的操作也延续到了定义变量的时候\",{\"1\":{\"1098\":1}}],[\"而表示一个普通的反斜杠是\",{\"1\":{\"985\":1}}],[\"而在dopost方法中\",{\"1\":{\"2862\":1}}],[\"而在每次操作前\",{\"1\":{\"2808\":1,\"2815\":1}}],[\"而在用户输入数据中注入非法的\",{\"1\":{\"2559\":1}}],[\"而在终止操作时一次性全部处理\",{\"1\":{\"2453\":1}}],[\"而在其被解锁之时\",{\"1\":{\"1772\":1}}],[\"而在\",{\"1\":{\"985\":1}}],[\"而月份都从0开始\",{\"1\":{\"708\":1}}],[\"而非硬盘\",{\"1\":{\"3449\":1}}],[\"而非从磁盘上删除\",{\"1\":{\"3147\":1}}],[\"而非\",{\"1\":{\"2982\":1}}],[\"而非开始时的项目\",{\"1\":{\"2721\":1}}],[\"而非对象\",{\"1\":{\"2400\":1}}],[\"而非char\",{\"1\":{\"2071\":1}}],[\"而非entry\",{\"1\":{\"1926\":1}}],[\"而非地址\",{\"1\":{\"1896\":1}}],[\"而非都当成obj\",{\"1\":{\"1830\":1}}],[\"而非直接调用run\",{\"1\":{\"1718\":1}}],[\"而非运算符\",{\"1\":{\"1427\":1}}],[\"而非形参\",{\"1\":{\"1328\":1,\"1329\":1}}],[\"而非找到了交集\",{\"1\":{\"914\":1}}],[\"而非引用的复制\",{\"1\":{\"895\":1}}],[\"而非字符串\",{\"1\":{\"682\":1,\"992\":1}}],[\"而非内存地址\",{\"1\":{\"652\":1}}],[\"而启动类是由\",{\"1\":{\"563\":1}}],[\"而这多个接口中定义了同名同参数的默认方法\",{\"1\":{\"1517\":1}}],[\"而这个内部的完整的结构又只为外部事物提供服务\",{\"1\":{\"1450\":1,\"1461\":1}}],[\"而这个bean并不符合期望\",{\"1\":{\"531\":1}}],[\"而这些方法的参数不同\",{\"1\":{\"1407\":1}}],[\"而这种\",{\"1\":{\"1395\":1}}],[\"而这里我们只配置了info\",{\"1\":{\"308\":1}}],[\"而annotationmetadata就是获取的该配置类的元数据\",{\"1\":{\"524\":1}}],[\"而\",{\"1\":{\"516\":1,\"1657\":1,\"1660\":1,\"2439\":1,\"3011\":1,\"3012\":1,\"3102\":1,\"3611\":1}}],[\"而5+20分钟\",{\"1\":{\"501\":1}}],[\"而整合之后\",{\"1\":{\"354\":1}}],[\"而监控平台指的就是服务端\",{\"1\":{\"317\":1}}],[\"而获知软件的运行健康状态显得尤为重要\",{\"1\":{\"311\":1}}],[\"而占用端口的程序又不能关闭\",{\"1\":{\"255\":1}}],[\"而不扫描任何文档或将文档带入内存\",{\"1\":{\"3636\":1}}],[\"而不总是使用standard\",{\"1\":{\"3474\":1}}],[\"而不会命中磁盘\",{\"1\":{\"3441\":1}}],[\"而不会报错\",{\"1\":{\"400\":1}}],[\"而不应该放到数据库连接内部\",{\"1\":{\"2631\":1}}],[\"而不用自己再去定义了\",{\"1\":{\"2399\":1}}],[\"而不用关心任何改变\",{\"1\":{\"1532\":1}}],[\"而不用调用包装类xxx的xxxvalue\",{\"1\":{\"1443\":1}}],[\"而不用使用构造器\",{\"1\":{\"1443\":1}}],[\"而不用将类导入\",{\"1\":{\"1335\":1}}],[\"而不可以直接访问\",{\"1\":{\"1366\":1}}],[\"而不是ip\",{\"1\":{\"3656\":1}}],[\"而不是直接重写整个倒排索引\",{\"1\":{\"3443\":1}}],[\"而不是直接操作数据库\",{\"1\":{\"2530\":1}}],[\"而不是之前的\",{\"1\":{\"3391\":1}}],[\"而不是http\",{\"1\":{\"3314\":1,\"3347\":1}}],[\"而不是默认返回所有字段\",{\"1\":{\"3232\":1}}],[\"而不是提供多个参数\",{\"1\":{\"3230\":1}}],[\"而不是先创建数据对象再转为json\",{\"1\":{\"3220\":1}}],[\"而不是其他内容\",{\"1\":{\"3143\":1}}],[\"而不是工作空间里的路径\",{\"1\":{\"2939\":1}}],[\"而不是实现\",{\"1\":{\"2810\":1}}],[\"而不是重新建立一个\",{\"1\":{\"2664\":1}}],[\"而不是execute\",{\"1\":{\"2584\":1}}],[\"而不是进行序列化传输\",{\"1\":{\"2142\":1}}],[\"而不是进行try\",{\"1\":{\"1604\":1}}],[\"而不是分别表示两个符号呢\",{\"1\":{\"2111\":1}}],[\"而不是用object\",{\"1\":{\"1957\":1}}],[\"而不是让用户看乱码\",{\"1\":{\"1563\":1}}],[\"而不是他们的一个抽象\",{\"1\":{\"1505\":1}}],[\"而不是false\",{\"1\":{\"1441\":1}}],[\"而不是日期\",{\"1\":{\"715\":1}}],[\"而不是修改源数据\",{\"1\":{\"713\":1}}],[\"而不是修改了源字符串\",{\"1\":{\"664\":1}}],[\"而不是stringbuffer本身的长度\",{\"1\":{\"699\":1}}],[\"而不是返回一个新的\",{\"1\":{\"697\":1}}],[\"而不是一个项目一个监控面板\",{\"1\":{\"314\":1}}],[\"而不是在postman中\",{\"1\":{\"231\":1}}],[\"而不带maven插件打包的结果只是一个普通包\",{\"1\":{\"247\":1}}],[\"而是检查当前\",{\"1\":{\"3498\":1}}],[\"而是搜索你指定的精确值\",{\"1\":{\"3470\":1}}],[\"而是转发完整文档的新版本\",{\"1\":{\"3414\":1}}],[\"而是根据规则创建\",{\"1\":{\"3373\":1}}],[\"而是根据数据的哈希值决定的\",{\"1\":{\"1882\":1}}],[\"而是会报错\",{\"1\":{\"3129\":1}}],[\"而是会去读取一个已经存在的文件\",{\"1\":{\"2135\":1}}],[\"而是用自己捆绑的jdk\",{\"1\":{\"3107\":1}}],[\"而是需要遵守一些规则\",{\"1\":{\"2771\":1}}],[\"而是独作为一个额外的工具类\",{\"1\":{\"2652\":1}}],[\"而是将数据库连接对象放到了联机池中\",{\"1\":{\"2632\":1}}],[\"而是提供\",{\"1\":{\"2191\":1}}],[\"而是提供更具体的子接口\",{\"1\":{\"1830\":1}}],[\"而是覆盖写\",{\"1\":{\"2137\":1}}],[\"而是从指定指针位置处写\",{\"1\":{\"2137\":1}}],[\"而是内容覆盖\",{\"1\":{\"2137\":1}}],[\"而是使用\",{\"1\":{\"2759\":1}}],[\"而是使用synchronizedlist对arraylist数据进行处理\",{\"1\":{\"1876\":1}}],[\"而是使用时再通过\",{\"1\":{\"554\":1}}],[\"而是在\",{\"1\":{\"3528\":1}}],[\"而是在第一次add的时候\",{\"1\":{\"1869\":1}}],[\"而是在需要时才导入额外的配置\",{\"1\":{\"567\":1}}],[\"而是比较两个对象的\",{\"1\":{\"1427\":1}}],[\"而是报错\",{\"1\":{\"1073\":1}}],[\"而是直接改变了源数组\",{\"1\":{\"891\":1}}],[\"而是直接在yml中配置缓存策略\",{\"1\":{\"483\":1}}],[\"而是5个字符还在\",{\"1\":{\"817\":1,\"2056\":1}}],[\"而是\",{\"1\":{\"783\":1,\"2023\":1,\"2028\":1}}],[\"而是已有的内容的长度\",{\"1\":{\"697\":1}}],[\"而是redis\",{\"1\":{\"514\":1}}],[\"而是factorybean接口泛型指定类型的对象\",{\"1\":{\"514\":1}}],[\"而是利用其他缓存技术提供服务\",{\"1\":{\"487\":1}}],[\"而是被controller通过\",{\"1\":{\"471\":1}}],[\"而是要利用object进行强转\",{\"1\":{\"1969\":1}}],[\"而是要么继承抽象类\",{\"1\":{\"1502\":1,\"1506\":1}}],[\"而是要先检测redis服务是否正常\",{\"1\":{\"514\":1}}],[\"而是要借助工具类呢\",{\"1\":{\"471\":1}}],[\"而是要做专门的程序后台来查看\",{\"1\":{\"352\":1}}],[\"而是选择存入缓存\",{\"1\":{\"463\":1}}],[\"而是得到空结果\",{\"1\":{\"395\":1}}],[\"而是通过排序方法\",{\"1\":{\"1904\":1}}],[\"而是通过配置中心获取配置\",{\"1\":{\"268\":1}}],[\"而是通过测试类\",{\"1\":{\"224\":1}}],[\"而是新建一个配置文件\",{\"1\":{\"266\":1}}],[\"而是采用多个配置文件\",{\"1\":{\"260\":1}}],[\"而是自动去查找配置类\",{\"1\":{\"229\":1}}],[\"而第三方开发的bean源代码不是你自己书写的\",{\"1\":{\"201\":1}}],[\"而一旦启动了模块\",{\"1\":{\"174\":1}}],[\"而默认的版本是3\",{\"1\":{\"96\":1}}],[\"以副本集的形式连接\",{\"1\":{\"3734\":1}}],[\"以直接连接的方式连接副本集主节点\",{\"1\":{\"3661\":1}}],[\"以端口\",{\"1\":{\"3651\":1}}],[\"以端口号作为区分\",{\"1\":{\"3335\":1}}],[\"以是提供副本集仲裁功能的好方法\",{\"1\":{\"3646\":1}}],[\"以防止丢失单个数据库服务器\",{\"1\":{\"3640\":1}}],[\"以防报bug\",{\"1\":{\"170\":1}}],[\"以选择与查询语句匹配的文档\",{\"1\":{\"3617\":1}}],[\"以段的形式存储数据\",{\"1\":{\"3515\":1}}],[\"以存文本的方式打开custom\",{\"1\":{\"3487\":1}}],[\"以产生正确的搜索词条列表\",{\"1\":{\"3470\":1}}],[\"以区域网的方式创建集群\",{\"1\":{\"3324\":1}}],[\"以请求头的方式\",{\"1\":{\"3309\":1}}],[\"以es软件\",{\"1\":{\"3298\":1}}],[\"以e为底的对数称为自然对数\",{\"1\":{\"769\":1}}],[\"以json字符串的格式打印查询结果\",{\"1\":{\"3225\":1}}],[\"以登录用户的名称展示\",{\"1\":{\"3078\":1}}],[\"以移动平台为主\",{\"1\":{\"3031\":1}}],[\"以内嵌的方式来启动web服务\",{\"1\":{\"2998\":1}}],[\"以zip格式构建\",{\"1\":{\"2979\":1}}],[\"以键值对的形式存储数据到request域\",{\"1\":{\"2902\":1}}],[\"以字节的形式输出字符\",{\"0\":{\"2896\":1}}],[\"以字符为单位\",{\"1\":{\"2593\":1}}],[\"以字符流的形式读取字符\",{\"1\":{\"2098\":1}}],[\"以字符而非字节为单位读取\",{\"1\":{\"2038\":1}}],[\"以后每次请求都携带cookie数据进行访问\",{\"1\":{\"3038\":1}}],[\"以后再写代码的时候\",{\"1\":{\"2873\":1}}],[\"以后再创建javaweb项目就可以直接使用了\",{\"1\":{\"2745\":1}}],[\"以后只需要调用request提供的方法即可\",{\"1\":{\"2863\":1}}],[\"以后我们再编写servlet类的时候\",{\"1\":{\"2814\":1}}],[\"以后就可以直接点击这个tomcat\",{\"1\":{\"2751\":1}}],[\"以便为路由提供合适的分片\",{\"1\":{\"3527\":1}}],[\"以便更快的访问\",{\"1\":{\"3504\":1}}],[\"以便可以使用http\",{\"1\":{\"3298\":1}}],[\"以便在同一次会话的多次请求间共享数据\",{\"1\":{\"3035\":1}}],[\"以便开发java平台应用软件或库\",{\"1\":{\"2979\":1}}],[\"以便别的操作使用该数据库连接对象\",{\"1\":{\"2632\":1}}],[\"以便确保额外的配置在正确的顺序中加载\",{\"1\":{\"567\":1}}],[\"以文件的方式保存在本地\",{\"1\":{\"2613\":1}}],[\"以文本的形式\",{\"1\":{\"2194\":1}}],[\"以mysql为例\",{\"1\":{\"2542\":1}}],[\"以mysql驱动进行操作\",{\"1\":{\"2535\":1}}],[\"以myannotation为例\",{\"1\":{\"1668\":1}}],[\"以函数式接口的形式模拟了面向函数的特点\",{\"1\":{\"2381\":1}}],[\"以函数为单位提供一个简单的独立的功能\",{\"1\":{\"2381\":1}}],[\"以函数为最小单位\",{\"1\":{\"1250\":1}}],[\"以完成代理的具体操作\",{\"1\":{\"2339\":1}}],[\"以cafe开头\",{\"1\":{\"2275\":1}}],[\"以至于成为事实上的标准\",{\"1\":{\"2209\":1}}],[\"以至于我们称他们为\",{\"1\":{\"2162\":1}}],[\"以其两个主要协议\",{\"1\":{\"2203\":1}}],[\"以点分十进制表示\",{\"1\":{\"2181\":1}}],[\"以前\",{\"1\":{\"2496\":1}}],[\"以前io操作都是这样写的\",{\"1\":{\"2164\":1}}],[\"以前的做法是定义为object\",{\"1\":{\"1946\":1}}],[\"以只读方式打开\",{\"1\":{\"2134\":1}}],[\"以该方法为例\",{\"1\":{\"2118\":1}}],[\"以pathname为路径创建file对象\",{\"1\":{\"2015\":1}}],[\"以arraylist集合为例\",{\"1\":{\"1955\":1}}],[\"以链表形式存在\",{\"1\":{\"1922\":1}}],[\"以hashmap为例\",{\"1\":{\"1918\":2}}],[\"以hashset为例\",{\"1\":{\"1882\":1,\"1889\":1}}],[\"以实现对象相等规则\",{\"1\":{\"1885\":1}}],[\"以实现下述目的\",{\"1\":{\"1305\":1}}],[\"以单核cpu为例\",{\"1\":{\"1692\":1}}],[\"以无参数方法的形式来声明\",{\"1\":{\"1645\":1}}],[\"以用其父类作为catch的参数\",{\"1\":{\"1586\":1}}],[\"以分号结束\",{\"1\":{\"1495\":1}}],[\"以运行其他构造器的代码\",{\"1\":{\"1330\":1}}],[\"以类\",{\"1\":{\"1250\":1}}],[\"以0x或0x开头表示\",{\"1\":{\"1119\":1}}],[\"以0b或0b开头\",{\"1\":{\"1119\":1}}],[\"以数字0开头表示\",{\"1\":{\"1119\":1}}],[\"以保证我们搜索的词条格式与索引中的词条格式一致\",{\"1\":{\"3470\":1}}],[\"以保证每个词和每个文档的关联都被准确计算\",{\"1\":{\"3445\":1}}],[\"以保证java程序的可移植性\",{\"1\":{\"1086\":1}}],[\"以保证资源肯定能被关闭\",{\"1\":{\"827\":1}}],[\"以static修饰\",{\"1\":{\"1076\":1}}],[\"以spring\",{\"1\":{\"580\":1}}],[\"以上设置完之后\",{\"1\":{\"2992\":1}}],[\"以上面的例子为例\",{\"1\":{\"2349\":1}}],[\"以上构造器会抛出malformedurlexception异常\",{\"1\":{\"2238\":1}}],[\"以上操作需要进行异常处理\",{\"1\":{\"2040\":1}}],[\"以上是方法上常用的文档标注\",{\"1\":{\"1060\":1}}],[\"以上是类上常用的文档标注\",{\"1\":{\"1059\":1}}],[\"以上四种缓存技术\",{\"1\":{\"488\":1}}],[\"以filereader读取字符为例\",{\"1\":{\"814\":1}}],[\"以filereader为例\",{\"1\":{\"813\":1}}],[\"以匿名内部类的方式\",{\"1\":{\"753\":1}}],[\"以date\",{\"1\":{\"732\":1}}],[\"以localdatetime类为例\",{\"1\":{\"719\":1,\"720\":1}}],[\"以一个新的开始为\",{\"1\":{\"709\":1}}],[\"以免版本冲突\",{\"1\":{\"600\":1}}],[\"以告诉spring\",{\"1\":{\"505\":1}}],[\"以待进行核对\",{\"1\":{\"469\":1}}],[\"以及允许在指定资源上进行的操作\",{\"1\":{\"3698\":1}}],[\"以及设备汇报的日志信息\",{\"1\":{\"3541\":1}}],[\"以及用户发表的朋友圈信息\",{\"1\":{\"3541\":1}}],[\"以及如何删除文档呢\",{\"1\":{\"3447\":1}}],[\"以及\",{\"1\":{\"3058\":1,\"3402\":1,\"3507\":1}}],[\"以及监听这些域对象中的属性发生修改的事件\",{\"1\":{\"2959\":1}}],[\"以及异常出现在程序中的位置\",{\"1\":{\"1589\":1}}],[\"以及错误的处理\",{\"1\":{\"1562\":1}}],[\"以及数据的展示分离开来的设计模式使程序结构变的灵活而且清晰\",{\"1\":{\"1537\":1}}],[\"以及数字编号\",{\"1\":{\"1460\":1}}],[\"以及对正则表达式的多次匹配支持\",{\"1\":{\"998\":1}}],[\"以及参数类型列表\",{\"1\":{\"858\":1}}],[\"以及获取缓存中的验证码\",{\"1\":{\"472\":1}}],[\"以及以何种方式缓存\",{\"1\":{\"468\":1}}],[\"以及文档的\",{\"1\":{\"428\":1}}],[\"以及指定<appender>\",{\"1\":{\"308\":1}}],[\"以备使用\",{\"1\":{\"418\":1}}],[\"以key\",{\"1\":{\"345\":1}}],[\"以可以由\",{\"1\":{\"342\":1}}],[\"以下操作示例将在同一台设备上进行\",{\"1\":{\"3651\":1}}],[\"以下操作和idea的版本相关\",{\"1\":{\"573\":1}}],[\"以下划线\",{\"1\":{\"3593\":1}}],[\"以下创建证书的步骤依然保留\",{\"1\":{\"3292\":1}}],[\"以下it公司采用了elasticsearch\",{\"1\":{\"3094\":1}}],[\"以下目录是使用maven创建的javaweb项目的标准目录\",{\"1\":{\"2725\":1}}],[\"以下两个方法都会抛出sqlexception\",{\"1\":{\"2636\":1}}],[\"以下两个add方法\",{\"1\":{\"1992\":1}}],[\"以下三个方法都会抛出sqlexception异常\",{\"1\":{\"2627\":1}}],[\"以下代码\",{\"1\":{\"2625\":1}}],[\"以下代码省去了try\",{\"1\":{\"2613\":1}}],[\"以下5中方法是循序渐进的\",{\"1\":{\"2544\":1}}],[\"以下四个方法创建的class是同一个class\",{\"1\":{\"2265\":1}}],[\"以下四种文件是平级的\",{\"1\":{\"1543\":1}}],[\"以下示例涉及到多态\",{\"1\":{\"1376\":1}}],[\"以下示例都是直接在测试类中写的\",{\"1\":{\"421\":1,\"426\":1}}],[\"以下使用均会含有泛型\",{\"1\":{\"943\":1}}],[\"以下介绍的方法都是新增或重载后的方法\",{\"1\":{\"941\":1}}],[\"以下舍入策略\",{\"1\":{\"784\":1}}],[\"以下列出了所有端点信息说明\",{\"1\":{\"342\":1}}],[\"以下知识点仅做了解\",{\"1\":{\"254\":1}}],[\"以\",{\"1\":{\"272\":1,\"1040\":1,\"1056\":1,\"2979\":1,\"3541\":1}}],[\"以在启动类中\",{\"1\":{\"202\":1}}],[\"以7\",{\"1\":{\"80\":1,\"81\":1}}],[\"带占位符\",{\"1\":{\"2566\":1}}],[\"带通配符的泛型\",{\"1\":{\"1997\":1}}],[\"带泛型的对象\",{\"1\":{\"1987\":1}}],[\"带参的构造器\",{\"0\":{\"1868\":1}}],[\"带参数的构造方法\",{\"1\":{\"1316\":1}}],[\"带参数的方法\",{\"1\":{\"1258\":1}}],[\"带包名的类名\",{\"1\":{\"1343\":1}}],[\"带响应信息的构造方法\",{\"1\":{\"646\":1}}],[\"带spring\",{\"0\":{\"244\":1},\"1\":{\"246\":1}}],[\"带启动类的模块\",{\"1\":{\"170\":1}}],[\"带层级的k\",{\"1\":{\"139\":1}}],[\"子依赖\",{\"1\":{\"3743\":1}}],[\"子集合是班级\",{\"1\":{\"2469\":1}}],[\"子文件路径\",{\"1\":{\"2017\":1}}],[\"子路径\",{\"1\":{\"2016\":1}}],[\"子线程默认名是\",{\"1\":{\"1721\":1}}],[\"子线程\",{\"1\":{\"1713\":1,\"1728\":1,\"1757\":1}}],[\"子句不能正常完成时的警告\",{\"1\":{\"1678\":1}}],[\"子转父\",{\"0\":{\"1413\":1}}],[\"子类的流上\",{\"1\":{\"2123\":2}}],[\"子类的方法将覆盖父类的方法\",{\"1\":{\"1370\":1}}],[\"子类或者子接口\",{\"1\":{\"1985\":1}}],[\"子类重写thread类的run\",{\"1\":{\"1719\":1}}],[\"子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型\",{\"1\":{\"1374\":1,\"1602\":1}}],[\"子类重写的方法的权限修饰符不小于父类被重写的方法的权限修饰符\",{\"1\":{\"1372\":1}}],[\"子类重写的方法的方法名和形参列表与父类被重写的方法的方法名和形参列表相同\",{\"1\":{\"1370\":1}}],[\"子类则可以继承父类类级别的注解\",{\"1\":{\"1664\":1}}],[\"子类一般不能重写\",{\"1\":{\"1500\":1}}],[\"子类必须重写父类中所有的抽象方法\",{\"1\":{\"1495\":1}}],[\"子类转父类\",{\"1\":{\"1411\":1}}],[\"子类特有的属性和方法不能调用\",{\"1\":{\"1410\":1}}],[\"子类实现可以随意更换\",{\"1\":{\"1409\":1}}],[\"子类实例化过程\",{\"0\":{\"1390\":1}}],[\"子类实例也会同样复制一份\",{\"1\":{\"1367\":1}}],[\"子类实例其实是\",{\"1\":{\"1366\":1}}],[\"子类中定义了与父类同名同参数的方法\",{\"1\":{\"1404\":1}}],[\"子类中的叫重写的方法\",{\"1\":{\"1370\":1}}],[\"子类对象才可以考虑进行调用\",{\"1\":{\"1392\":1}}],[\"子类对象访问继承来的属性和方法时\",{\"1\":{\"1367\":1}}],[\"子类调用父类同名方法\",{\"0\":{\"1382\":1}}],[\"子类调用父类同名属性\",{\"0\":{\"1381\":1}}],[\"子类可以选择保留泛型也可以选择指定泛型类型\",{\"1\":{\"1970\":1}}],[\"子类可以重写父类中的方法\",{\"1\":{\"1377\":1}}],[\"子类可以创建一个跟父类相同的方法\",{\"1\":{\"1370\":1}}],[\"子类无法覆盖父类的方法\",{\"1\":{\"1375\":1}}],[\"子类和父类可以同时使用\",{\"1\":{\"1383\":1}}],[\"子类和父类都声明了num这个属性\",{\"1\":{\"1381\":1}}],[\"子类和父类中的同名同参数的方法要么都声明为非static的\",{\"1\":{\"1375\":1}}],[\"子类和父类的关系\",{\"1\":{\"1361\":1}}],[\"子类不能重写父类中声明为private权限的方法\",{\"1\":{\"1372\":1}}],[\"子类不能直接访问父类中私有的\",{\"1\":{\"1363\":1}}],[\"子类继承父类private成员的测试\",{\"1\":{\"1368\":1}}],[\"子类继承父类以后\",{\"1\":{\"1361\":1,\"1363\":1,\"1391\":1}}],[\"子类继承了这些方法后\",{\"1\":{\"1368\":1}}],[\"子类访问父类中的private成员\",{\"0\":{\"1368\":1}}],[\"子类是一定会调用父类的构造器的\",{\"1\":{\"1388\":1}}],[\"子类是无法直接访问的\",{\"1\":{\"1367\":1}}],[\"子类是否能继承父类的private成员\",{\"0\":{\"1366\":1}}],[\"子类只能通过父类方法来访问父类中的private成员\",{\"1\":{\"1366\":1}}],[\"子类直接继承的父类\",{\"1\":{\"1363\":1}}],[\"子类父类是相对的概念\",{\"1\":{\"1363\":1}}],[\"子类a中就获取了父类b中声明的所有的属性和方法\",{\"1\":{\"1361\":1}}],[\"子类\",{\"1\":{\"1360\":1,\"1395\":1,\"1398\":1}}],[\"子包下的类\",{\"0\":{\"1345\":1}}],[\"子包名\",{\"1\":{\"1336\":1}}],[\"子目录为\",{\"1\":{\"648\":1}}],[\"子模块内就没有该目录\",{\"1\":{\"225\":1}}],[\"子模块\",{\"0\":{\"170\":1,\"171\":1}}],[\"子项目手动引入所需的依赖\",{\"1\":{\"115\":1}}],[\"右移\",{\"1\":{\"1157\":1}}],[\"右边选择tomcat\",{\"1\":{\"2746\":1}}],[\"右边选项中\",{\"1\":{\"2731\":1}}],[\"右边属于创建集合对象\",{\"1\":{\"2005\":1}}],[\"右边补0\",{\"1\":{\"1157\":1}}],[\"右边不参与运算\",{\"1\":{\"1153\":1}}],[\"右边参与运算\",{\"1\":{\"1153\":1}}],[\"右边都进行运算\",{\"1\":{\"1153\":1}}],[\"右边的大\",{\"1\":{\"660\":1}}],[\"右侧会有灰色的内容\",{\"1\":{\"166\":1}}],[\"右键new时直接显示servlet\",{\"1\":{\"2788\":1}}],[\"右键librarys中的servlet\",{\"1\":{\"2778\":1}}],[\"右键jar包文件\",{\"1\":{\"2538\":1}}],[\"右键模块rename修改即可\",{\"1\":{\"166\":1}}],[\"右键\",{\"1\":{\"110\":1,\"588\":1}}],[\"复合索引中列出的字段顺序很重要\",{\"1\":{\"3620\":1}}],[\"复合索引\",{\"0\":{\"3620\":1},\"1\":{\"3627\":1}}],[\"复刻的节点内证书都是一样的\",{\"1\":{\"3338\":1}}],[\"复刻其他节点\",{\"0\":{\"3338\":1}}],[\"复写接口中的方法\",{\"1\":{\"2971\":1}}],[\"复写方法\",{\"1\":{\"2772\":1}}],[\"复制证书\",{\"0\":{\"3727\":1}}],[\"复制可以提供增加的读取性能\",{\"1\":{\"3640\":1}}],[\"复制可提供一定级别的容错功能\",{\"1\":{\"3640\":1}}],[\"复制提供冗余并提高数据可用性\",{\"1\":{\"3640\":1}}],[\"复制\",{\"1\":{\"3518\":1}}],[\"复制操作花费的时间为\",{\"1\":{\"2086\":1}}],[\"复制完一个\",{\"1\":{\"1692\":1}}],[\"复制品\",{\"1\":{\"1291\":1}}],[\"复制一份内存空间\",{\"0\":{\"1214\":1}}],[\"复制指定的数组\",{\"1\":{\"895\":1}}],[\"复制过来的模块代码源路径常常后面存在resource\",{\"1\":{\"166\":1}}],[\"复杂info信息\",{\"0\":{\"347\":1}}],[\"复杂配置等学完spring系列再研究\",{\"1\":{\"11\":1}}],[\"让后台定期进行段合并\",{\"1\":{\"3515\":1}}],[\"让它包含的文档可以被搜索\",{\"1\":{\"3449\":1}}],[\"让它自动调整voting\",{\"1\":{\"3276\":1}}],[\"让它可以识别各个国家的文字\",{\"1\":{\"2108\":1}}],[\"让es服务器返回所有索引的基本信息\",{\"1\":{\"3125\":1}}],[\"让客户和员工能够使用他们自己的文字和语言来搜索并收到高度相关的结果\",{\"1\":{\"3114\":1}}],[\"让矢量搜索功能更容易实现\",{\"1\":{\"3114\":1}}],[\"让web开发更加便捷\",{\"1\":{\"2694\":1}}],[\"让用户通过浏览器来访问这些项目\",{\"1\":{\"2694\":1}}],[\"让用户传输\",{\"1\":{\"2579\":1}}],[\"让mysql开启批处理的支持\",{\"1\":{\"2623\":1}}],[\"让编辑器帮我们重写即可\",{\"1\":{\"1897\":1}}],[\"让编译器对\",{\"1\":{\"1675\":1}}],[\"让出\",{\"1\":{\"1749\":1}}],[\"让当前线程睡眠\",{\"1\":{\"1729\":1}}],[\"让当前线程\",{\"1\":{\"1727\":1}}],[\"让start方法去调用run\",{\"1\":{\"1724\":1}}],[\"让子类去实现\",{\"1\":{\"1498\":1}}],[\"让子类实例化\",{\"1\":{\"1494\":1}}],[\"让代码更简洁\",{\"1\":{\"1176\":1}}],[\"让缓存的验证码5分钟后失效\",{\"1\":{\"479\":1}}],[\"让idea自动进行热部署\",{\"1\":{\"188\":1}}],[\"让程序成为web程序\",{\"1\":{\"163\":1,\"319\":1}}],[\"让测试人员对项目进行测试\",{\"1\":{\"37\":1}}],[\"很可能会导致一个节点上存在多个分片\",{\"1\":{\"3508\":1}}],[\"很大概率输入的是一段话\",{\"1\":{\"3461\":1}}],[\"很有可能会报错\",{\"1\":{\"3222\":1}}],[\"很少使用\",{\"1\":{\"2497\":1}}],[\"很多命令无法使用\",{\"1\":{\"3660\":1}}],[\"很多应用场景\",{\"1\":{\"3539\":1}}],[\"很多专有词汇和新词是没有的\",{\"1\":{\"3484\":1}}],[\"很多分析器都支持扩展词汇\",{\"1\":{\"3484\":1}}],[\"很多教程都是基于这个自动发现搭建的\",{\"1\":{\"3316\":1}}],[\"很多教程都没有提及\",{\"1\":{\"3265\":1}}],[\"很多配置不用开启\",{\"1\":{\"3302\":1}}],[\"很多配置文件都是xml格式\",{\"1\":{\"3014\":1}}],[\"很多框架的配置文件都是用xml写的\",{\"1\":{\"3017\":1}}],[\"很多时候我们使用转换流来处理文件乱码问题\",{\"1\":{\"2091\":1}}],[\"很多时候无法利用完cpu的性能\",{\"1\":{\"1693\":1}}],[\"很多死锁都是很隐蔽\",{\"1\":{\"1787\":1}}],[\"很多设计模式都用到了接口这个特性\",{\"1\":{\"1509\":1}}],[\"很多情况下\",{\"1\":{\"1094\":1}}],[\"很多jdk内置的类\",{\"1\":{\"744\":1}}],[\"很多bean是需要手动提供参数才能正确加载的\",{\"1\":{\"560\":1}}],[\"很多规则和内置的api都跟当前版本不同\",{\"1\":{\"84\":1,\"85\":1}}],[\"很小巧\",{\"1\":{\"491\":1}}],[\"很人性化\",{\"1\":{\"191\":1}}],[\"很麻烦\",{\"1\":{\"162\":1}}],[\"他一共包含了三个功能\",{\"1\":{\"3464\":1}}],[\"他发送查询到每一个属于索引的分片\",{\"1\":{\"3367\":1}}],[\"他比实现runnable接口更强大\",{\"1\":{\"1806\":1}}],[\"他有固定的对象数量\",{\"1\":{\"1617\":1}}],[\"他有自己默认的数据类型\",{\"1\":{\"1115\":1}}],[\"他也会自动隐式调用了一个空参的父类构造器\",{\"1\":{\"1388\":1}}],[\"他们是等同的\",{\"1\":{\"2608\":1}}],[\"他们会返回一个持有结果的新stream\",{\"1\":{\"2441\":1}}],[\"他们会指向同一个内存地址\",{\"1\":{\"1125\":1}}],[\"他们指向各自的对象内存地址\",{\"1\":{\"1550\":1}}],[\"他们的任务是在分词前整理字符串\",{\"1\":{\"3464\":1}}],[\"他们的方法基本是一样的\",{\"1\":{\"821\":1}}],[\"他们的方法基本都是一样的\",{\"1\":{\"812\":1,\"820\":1}}],[\"他们的常用实现类是\",{\"1\":{\"821\":1}}],[\"他们的状态也会显示在这里\",{\"1\":{\"348\":1}}],[\"他们的配置会互相叠加覆盖\",{\"1\":{\"141\":1}}],[\"他们的版本由springboot项目内置的父工程来进行管理\",{\"1\":{\"116\":1}}],[\"他跟真正的arraylist集合是有差异的\",{\"1\":{\"897\":1}}],[\"他生产从指定输入流扫描的值\",{\"1\":{\"886\":1,\"1007\":1}}],[\"他逻辑代码是在process方法中执行的\",{\"1\":{\"567\":1}}],[\"他的值保存在内存中\",{\"1\":{\"1702\":1}}],[\"他的值是全类名\",{\"1\":{\"523\":1}}],[\"他的元素全是一维数组\",{\"1\":{\"1230\":1}}],[\"他的指针在第一个元素之前\",{\"1\":{\"923\":1,\"1839\":1}}],[\"他的功能和方法与java\",{\"1\":{\"723\":1}}],[\"他的嵌套结构如下\",{\"1\":{\"563\":1}}],[\"他会根据pom中导入的包加载\",{\"1\":{\"560\":1}}],[\"他会在所有bean注册完毕后运行\",{\"1\":{\"529\":1}}],[\"他是安装的一个本地shell客户端\",{\"1\":{\"3567\":1}}],[\"他是创建文档的\",{\"1\":{\"3429\":1}}],[\"他是动态生成的\",{\"1\":{\"2771\":1}}],[\"他是system类的一个变量\",{\"1\":{\"2116\":1}}],[\"他是有序的\",{\"1\":{\"915\":1}}],[\"他是专门用来读取配置文件的\",{\"1\":{\"545\":1}}],[\"他是默认导入的\",{\"1\":{\"223\":1}}],[\"他就被加入内存了\",{\"1\":{\"504\":1}}],[\"他只是在目录结构上属于父工程的子目录\",{\"1\":{\"162\":1}}],[\"他和父工程之间的没有建立父子关系\",{\"1\":{\"162\":1}}],[\"除数为0\",{\"1\":{\"1571\":1}}],[\"除此之外的任何地方都不能使用该类\",{\"1\":{\"1460\":1}}],[\"除此之外的任何地方\",{\"1\":{\"1459\":1}}],[\"除java\",{\"1\":{\"1364\":1}}],[\"除号运算的细节\",{\"0\":{\"1139\":1}}],[\"除以2\",{\"1\":{\"1122\":1}}],[\"除法运算\",{\"1\":{\"782\":1}}],[\"除了主节点\",{\"1\":{\"3737\":1}}],[\"除了暴力kill进程\",{\"1\":{\"3721\":1}}],[\"除了system\",{\"1\":{\"3704\":1}}],[\"除了sql语句外\",{\"1\":{\"2578\":1}}],[\"除了数据库config和local之外\",{\"1\":{\"3704\":4}}],[\"除了基本的json类型\",{\"1\":{\"3547\":1}}],[\"除了基础配置\",{\"1\":{\"384\":1}}],[\"除了高可用外\",{\"1\":{\"3368\":1}}],[\"除了第一个节点\",{\"1\":{\"3270\":1,\"3271\":1}}],[\"除了负载能力\",{\"1\":{\"3259\":1}}],[\"除了目录结构外\",{\"1\":{\"2996\":1}}],[\"除了class外\",{\"1\":{\"2982\":1}}],[\"除了在存储的最大信息量上不同外\",{\"1\":{\"2608\":1}}],[\"除了final常量\",{\"1\":{\"2277\":1}}],[\"除了当前person类需要实现serializable接口之外\",{\"1\":{\"2153\":1}}],[\"除了添加null之外\",{\"1\":{\"1992\":1}}],[\"除了将本类所有的成员复制一份到内存外\",{\"1\":{\"1367\":1}}],[\"除了boolean类型外\",{\"1\":{\"1110\":1}}],[\"除了直接使用字符作为值外\",{\"1\":{\"1102\":1}}],[\"除了可以用\",{\"1\":{\"545\":1}}],[\"除了加载bean\",{\"1\":{\"518\":1}}],[\"除了default\",{\"1\":{\"478\":1}}],[\"除了系统默认的指标\",{\"1\":{\"344\":1}}],[\"除了pom\",{\"1\":{\"161\":1}}],[\"除非你要访问这种系统创建的集合\",{\"1\":{\"3581\":1}}],[\"除非重新进行端口配置\",{\"1\":{\"2703\":1}}],[\"除非流水线上触发终止操作\",{\"1\":{\"2453\":1}}],[\"除非要求用数组\",{\"1\":{\"1824\":1}}],[\"除非有默认值\",{\"1\":{\"1648\":1}}],[\"除非自己也声明成抽象类\",{\"1\":{\"1495\":1}}],[\"除非直接new\",{\"1\":{\"1430\":1}}],[\"除非遇到特殊情况\",{\"1\":{\"1380\":1}}],[\"除非不足以表示较大的数\",{\"1\":{\"1090\":1}}],[\"除非springboot未提供对应版本\",{\"1\":{\"121\":1}}],[\"除非手动在pom\",{\"1\":{\"120\":1}}],[\"把安全认证开关从原先的true都改成false\",{\"1\":{\"3110\":1}}],[\"把数据存入其中\",{\"1\":{\"3061\":1}}],[\"把数据保存到可掉电式存储设备中以供之后使用\",{\"1\":{\"2525\":1}}],[\"把编译好的class文件和manifest文件放入指定文件夹\",{\"1\":{\"2991\":1}}],[\"把这个数据量作为最大值\",{\"1\":{\"3514\":1}}],[\"把这个\",{\"1\":{\"2986\":1}}],[\"把多个class文件进行打包\",{\"1\":{\"2980\":1}}],[\"把多个模块融合进一个项目中\",{\"1\":{\"160\":1}}],[\"把tomcat在获取流数据之前的编码设置为utf\",{\"1\":{\"2877\":1}}],[\"把分割后端数据\",{\"0\":{\"2868\":1}}],[\"把分布在不同地理区域的计算机与专门的外部设备用通信线路互连成一个规模大\",{\"1\":{\"2172\":1}}],[\"把获取到的内容进行分割\",{\"0\":{\"2867\":1}}],[\"把内容展示在浏览器给用户浏览\",{\"1\":{\"2833\":1}}],[\"把响应数据封装到response对象中\",{\"1\":{\"2833\":1}}],[\"把war包自动发布到tomcat服务器上\",{\"1\":{\"2765\":1}}],[\"把war包发布到tomcat服务器上\",{\"1\":{\"2748\":1}}],[\"把while循环改成if判断\",{\"1\":{\"2606\":1}}],[\"把结果集中的每一行数据都转成一个数组\",{\"1\":{\"2684\":1}}],[\"把结果集中的第一行数据转成对象数组\",{\"1\":{\"2684\":1}}],[\"把真正的函数式编程风格引入到java中\",{\"1\":{\"2436\":1}}],[\"把复杂成份分解成一些简单的成份\",{\"1\":{\"2200\":1}}],[\"把标准输出流\",{\"1\":{\"2121\":1}}],[\"把基本操作组合到一起\",{\"1\":{\"1500\":1}}],[\"把该隐藏的隐藏起来\",{\"1\":{\"1301\":1}}],[\"把类构造成计算机能够识别和处理的数据结构\",{\"1\":{\"1252\":1}}],[\"把抽象的实体用计算机语言进行描述\",{\"1\":{\"1252\":1}}],[\"把当前的一个项目重新部署到tomcat服务器上\",{\"1\":{\"2750\":1}}],[\"把当前字符序列逆转\",{\"1\":{\"704\":1}}],[\"把当前任务取消\",{\"1\":{\"492\":1}}],[\"把控进度\",{\"1\":{\"33\":1}}],[\"指令已经没用了\",{\"1\":{\"3020\":1}}],[\"指令以二进制代码形式存在\",{\"1\":{\"1020\":1}}],[\"指示是否自动为指定列进行编号\",{\"1\":{\"2593\":1}}],[\"指示指定列中的值是否可以为\",{\"1\":{\"2593\":1}}],[\"指示指定列的最大标准宽度\",{\"1\":{\"2593\":1}}],[\"指向项目的目录\",{\"1\":{\"2716\":1}}],[\"指向元素a\",{\"1\":{\"1893\":1}}],[\"指向原来的元素\",{\"1\":{\"1893\":1}}],[\"指向同一个对象\",{\"1\":{\"1551\":1}}],[\"指向的内层数组\",{\"1\":{\"1241\":1}}],[\"指向的是内层数组\",{\"1\":{\"1238\":1}}],[\"指向了一个一维数组\",{\"1\":{\"1230\":1}}],[\"指向某类的某个方法\",{\"1\":{\"1058\":1}}],[\"指向集合中的某个元素\",{\"1\":{\"923\":1,\"1839\":1}}],[\"指针指向它的类元数据\",{\"1\":{\"3504\":1}}],[\"指针指向数据表的第一条记录的前面\",{\"1\":{\"2588\":1}}],[\"指针指向第一个元素前面\",{\"1\":{\"1847\":1}}],[\"指针不会重置\",{\"1\":{\"1847\":1}}],[\"指针就会呆在集合末尾\",{\"1\":{\"925\":1,\"1840\":1}}],[\"指针就往后移动一次\",{\"1\":{\"923\":1,\"1839\":1}}],[\"指针\",{\"0\":{\"923\":1,\"1839\":1,\"2588\":1},\"1\":{\"1230\":1,\"2571\":1}}],[\"指明字符在原始字符串中的位置\",{\"1\":{\"3473\":1}}],[\"指明词条在原始文本中出现的位置\",{\"1\":{\"3473\":1}}],[\"指明请求对象的关联的索引\",{\"1\":{\"3214\":1}}],[\"指明该词在文章中出现的次数和位置\",{\"1\":{\"3100\":1}}],[\"指明该文件中定义的类所在的包\",{\"1\":{\"1336\":1}}],[\"指明构造器的参数列表\",{\"1\":{\"2316\":1}}],[\"指明读入和写出的文件\",{\"1\":{\"2065\":1}}],[\"指明写出到的文件\",{\"1\":{\"2064\":1}}],[\"指明要操作的文件\",{\"1\":{\"2052\":1}}],[\"指明此方法执行时\",{\"1\":{\"1598\":1}}],[\"指明其权限\",{\"1\":{\"1273\":1}}],[\"指明获取的方法的形参列表\",{\"1\":{\"859\":1,\"2312\":1}}],[\"指明获取的方法的名\",{\"1\":{\"859\":1,\"2312\":1}}],[\"指明当前项目的引导类\",{\"1\":{\"229\":1}}],[\"指的是更新能被搜索到\",{\"1\":{\"3448\":1}}],[\"指的是工作目录下的路径\",{\"1\":{\"2940\":1}}],[\"指的是二维数组的元素\",{\"1\":{\"1230\":1}}],[\"指的是二维数组本身\",{\"1\":{\"1230\":1}}],[\"指的是获取文件的大小\",{\"1\":{\"792\":1}}],[\"指的是单模块项目\",{\"1\":{\"160\":1}}],[\"指定较高的值可使成员更有资格成为主要成员\",{\"1\":{\"3687\":1}}],[\"指定配置文档\",{\"1\":{\"3673\":1}}],[\"指定新成员的主机名和可选的端口号\",{\"1\":{\"3673\":1}}],[\"指定用于保存mongos或mongod进程的进程id的文件位置\",{\"1\":{\"3656\":1}}],[\"指定为true创建唯一索引\",{\"1\":{\"3625\":1}}],[\"指定适合的分析器\",{\"1\":{\"3474\":1}}],[\"指定分析器\",{\"0\":{\"3474\":1}}],[\"指定一个分析器\",{\"1\":{\"3473\":1}}],[\"指定一个字段作为排序依据\",{\"1\":{\"3243\":1}}],[\"指定ca证书的路径\",{\"1\":{\"3298\":1}}],[\"指定模糊查询的偏移值\",{\"1\":{\"3239\":1}}],[\"指定要在与查询筛选器匹配的文档中返回的字段\",{\"1\":{\"3604\":1}}],[\"指定要用于操作的校对规则\",{\"1\":{\"3595\":1}}],[\"指定要操作的字段\",{\"1\":{\"3248\":1}}],[\"指定要查询的索引\",{\"1\":{\"3227\":1,\"3231\":1,\"3234\":1,\"3237\":1,\"3240\":1,\"3242\":1,\"3244\":1,\"3249\":1,\"3253\":1}}],[\"指定要修改的内容\",{\"1\":{\"3217\":1}}],[\"指定要修改的索引和文档的\",{\"1\":{\"3217\":1}}],[\"指定要判断的文档的\",{\"1\":{\"430\":1}}],[\"指定命名空间的标签\",{\"1\":{\"3030\":1}}],[\"指定本地tomcat软件的具体路径\",{\"1\":{\"2750\":1}}],[\"指定打开方式\",{\"1\":{\"2168\":1}}],[\"指定文件的大小\",{\"1\":{\"2168\":1}}],[\"指定字符集\",{\"0\":{\"2096\":1,\"2104\":1}}],[\"指定路径下文件的复制\",{\"1\":{\"2071\":1}}],[\"指定父类泛型具体类型\",{\"0\":{\"1972\":1}}],[\"指定类型参数的值\",{\"1\":{\"1964\":1}}],[\"指定泛型的类型\",{\"1\":{\"1968\":1}}],[\"指定泛型\",{\"1\":{\"1959\":1}}],[\"指定了key和value的泛型\",{\"1\":{\"1958\":1}}],[\"指定了内层数组的长度\",{\"1\":{\"1241\":1}}],[\"指定了内层数组长度\",{\"0\":{\"1236\":1}}],[\"指定线程的操作\",{\"1\":{\"1816\":1}}],[\"指定需谨慎\",{\"1\":{\"1772\":1}}],[\"指定时间\",{\"1\":{\"1729\":1}}],[\"指定创建线程的目标对象\",{\"1\":{\"1716\":1}}],[\"指定所修饰的\",{\"1\":{\"1656\":1,\"1657\":1}}],[\"指定包\",{\"0\":{\"1336\":1}}],[\"指定返回值的类型\",{\"1\":{\"1277\":1}}],[\"指定内层数组长度\",{\"0\":{\"1233\":1}}],[\"指定舍入策略\",{\"1\":{\"783\":1}}],[\"指定当前类在spring容器中的加载顺序\",{\"1\":{\"567\":1}}],[\"指定好配置文件的前缀\",{\"1\":{\"545\":1}}],[\"指定扫描加载bean的位置\",{\"1\":{\"511\":1}}],[\"指定的版本号\",{\"1\":{\"3498\":1}}],[\"指定的目录\",{\"1\":{\"2168\":1}}],[\"指定的millitime毫秒\",{\"1\":{\"1727\":1}}],[\"指定的任务\",{\"1\":{\"492\":1}}],[\"指定的时间\",{\"1\":{\"492\":2,\"1729\":1}}],[\"指定ehcache的配置文件\",{\"1\":{\"477\":1}}],[\"指定缓存方式\",{\"1\":{\"477\":1,\"483\":1}}],[\"指定那些端点对外开放\",{\"1\":{\"343\":1}}],[\"指定环境名\",{\"1\":{\"272\":1}}],[\"指定加载的数据\",{\"1\":{\"155\":1,\"200\":1}}],[\"指不依赖开发环境执行打包产生的文件\",{\"1\":{\"235\":1}}],[\"指将程序转换成一个可执行的文件\",{\"1\":{\"235\":1}}],[\"指南\",{\"0\":{\"0\":1},\"1\":{\"10\":1}}],[\"定为不同\",{\"1\":{\"3550\":1}}],[\"定位\",{\"0\":{\"3550\":1}}],[\"定位主机上的特定的应用\",{\"1\":{\"2172\":1}}],[\"定制排序\",{\"0\":{\"1906\":1,\"1936\":1,\"2475\":1},\"1\":{\"741\":1,\"934\":1,\"935\":1,\"1906\":1}}],[\"定制的一款软件产品\",{\"1\":{\"49\":1}}],[\"定时任务的线程才能一直被调度\",{\"1\":{\"493\":1}}],[\"定时任务是以来tomcat环境的\",{\"1\":{\"493\":1}}],[\"定时任务是开发中必不可少的组成部分\",{\"1\":{\"490\":1}}],[\"定义排序\",{\"1\":{\"3185\":1}}],[\"定义session的有效期\",{\"0\":{\"3070\":1}}],[\"定义student元素\",{\"1\":{\"3029\":1}}],[\"定义string正则表达式\",{\"1\":{\"998\":1}}],[\"定义元素\",{\"1\":{\"3029\":1}}],[\"定义当前类操作的orm类名\",{\"1\":{\"2650\":1}}],[\"定义orm类的属性\",{\"0\":{\"2650\":1}}],[\"定义文件路径时\",{\"1\":{\"2045\":1}}],[\"定义父子类\",{\"1\":{\"2001\":1}}],[\"定义方法\",{\"1\":{\"1995\":1,\"1996\":1}}],[\"定义方法时\",{\"1\":{\"1281\":1}}],[\"定义泛型类\",{\"0\":{\"1967\":1},\"1\":{\"1968\":1}}],[\"定义配置文件\",{\"0\":{\"1938\":1}}],[\"定义时的警告\",{\"1\":{\"1678\":1}}],[\"定义时必须使用双引号\",{\"1\":{\"1123\":1}}],[\"定义数组形式的成员变量\",{\"1\":{\"1668\":1}}],[\"定义数据模型封装yaml文件中对应的数据\",{\"1\":{\"155\":1}}],[\"定义成数组的形式\",{\"1\":{\"1667\":1}}],[\"定义为documented的注解必须设置retention值为runtime\",{\"1\":{\"1663\":1}}],[\"定义为spring配置类\",{\"1\":{\"513\":1}}],[\"定义为spring管控的bean\",{\"1\":{\"155\":1,\"200\":1}}],[\"定义注解后\",{\"1\":{\"1643\":1}}],[\"定义四季\",{\"1\":{\"1630\":1}}],[\"定义枚举类\",{\"0\":{\"1630\":1}}],[\"定义了java类被浏览器访问到\",{\"1\":{\"2772\":1}}],[\"定义了用来访问数据库的标准java类库\",{\"1\":{\"2527\":1}}],[\"定义了存取一组对象的方法的集合\",{\"1\":{\"1826\":1,\"1859\":1}}],[\"定义了所有操作数据库的抽象方法\",{\"1\":{\"1513\":1}}],[\"定义了长\",{\"1\":{\"1512\":1}}],[\"定义了名称为arr的二维数组\",{\"1\":{\"1233\":1}}],[\"定义usb接口\",{\"1\":{\"1512\":1}}],[\"定义java类的语法格式\",{\"1\":{\"1509\":1}}],[\"定义在方法内\",{\"1\":{\"1451\":1}}],[\"定义在类里面和类的成员并列的\",{\"1\":{\"1451\":1}}],[\"定义的是一组规则\",{\"1\":{\"1506\":1}}],[\"定义的equals\",{\"1\":{\"1427\":1}}],[\"定义的时候是绝对路径\",{\"1\":{\"789\":1}}],[\"定义\",{\"0\":{\"1370\":1,\"1449\":1,\"1976\":1,\"2396\":1},\"1\":{\"1401\":1,\"1406\":1,\"1656\":1}}],[\"定义变量的格式\",{\"1\":{\"1272\":1}}],[\"定义变量后\",{\"1\":{\"308\":1}}],[\"定义并初始化\",{\"1\":{\"1258\":1}}],[\"定义并用运算符new为之分配空间后\",{\"1\":{\"1220\":1}}],[\"定义float类型变量时\",{\"1\":{\"1095\":1}}],[\"定义正则表达式\",{\"1\":{\"987\":1}}],[\"定义mybatisplus拦截器\",{\"1\":{\"626\":1}}],[\"定义过滤规则\",{\"1\":{\"568\":2}}],[\"定义一个page2\",{\"1\":{\"2920\":1}}],[\"定义一个衣服工厂接口clothfactory\",{\"1\":{\"2326\":1}}],[\"定义一个方法\",{\"1\":{\"1994\":1}}],[\"定义一个泛型\",{\"1\":{\"1967\":1}}],[\"定义一个接口\",{\"1\":{\"1630\":1}}],[\"定义一个构造函数用来进行初始化\",{\"1\":{\"554\":1}}],[\"定义一个类\",{\"1\":{\"553\":1,\"2779\":1,\"2971\":1}}],[\"定义一个bean\",{\"1\":{\"499\":1}}],[\"定义读取属性的类\",{\"0\":{\"553\":1}}],[\"定义定时任务\",{\"0\":{\"499\":1}}],[\"定义队列名和交换机名\",{\"1\":{\"444\":1}}],[\"定义组件状态为down\",{\"1\":{\"350\":1}}],[\"定义组件状态为up\",{\"1\":{\"350\":1}}],[\"定义多个配置文件\",{\"0\":{\"274\":1}}],[\"索引默认命名规范\",{\"0\":{\"3628\":1}}],[\"索引引擎版本\",{\"1\":{\"3623\":1}}],[\"索引键的排序顺序\",{\"1\":{\"3619\":1}}],[\"索引项的排序支持有效的相等匹配和基于范围的查询操作\",{\"1\":{\"3617\":1}}],[\"索引支持在mongodb中高效地执行查询\",{\"1\":{\"3617\":1}}],[\"索引文档的流程\",{\"0\":{\"3527\":1}}],[\"索引库里\",{\"1\":{\"3524\":1}}],[\"索引库也一样\",{\"1\":{\"3195\":1}}],[\"索引及可能的合并过程\",{\"1\":{\"3518\":1}}],[\"索引大量的日志文件\",{\"1\":{\"3453\":1}}],[\"索引底层是按段更新的\",{\"1\":{\"3449\":1}}],[\"索引分段\",{\"0\":{\"3439\":1}}],[\"索引分片\",{\"0\":{\"3379\":1}}],[\"索引现在拥有\",{\"1\":{\"3394\":1}}],[\"索引被分片储存了\",{\"1\":{\"3373\":1}}],[\"索引是分片的集合\",{\"1\":{\"3367\":1}}],[\"索引的名称\",{\"1\":{\"3625\":1}}],[\"索引的字段\",{\"1\":{\"3623\":1}}],[\"索引的类型\",{\"0\":{\"3618\":1}}],[\"索引的精髓\",{\"1\":{\"3360\":1}}],[\"索引的证书\",{\"1\":{\"3307\":1,\"3327\":1}}],[\"索引setting\",{\"0\":{\"3358\":1}}],[\"索引数据储存的目录\",{\"1\":{\"3355\":1}}],[\"索引统一编号\",{\"1\":{\"3127\":1}}],[\"索引打开\",{\"1\":{\"3127\":1}}],[\"索引名\",{\"1\":{\"3124\":1,\"3127\":1,\"3133\":1,\"3136\":1,\"3139\":1,\"3142\":1,\"3144\":1,\"3145\":1,\"3147\":1,\"3152\":1,\"3157\":1,\"3160\":1,\"3162\":1,\"3188\":1,\"3197\":1,\"3623\":1}}],[\"索引名称\",{\"1\":{\"3119\":1}}],[\"索引相当于关系型数据库里的\",{\"1\":{\"3115\":1}}],[\"索引位置\",{\"1\":{\"1891\":1}}],[\"索引和文档id\",{\"1\":{\"430\":1}}],[\"索引类api的操作结果可以进一步调用内置方法获取更细节的数据\",{\"1\":{\"421\":1}}],[\"索引\",{\"0\":{\"421\":1,\"3115\":1,\"3208\":1,\"3360\":1,\"3617\":1},\"1\":{\"151\":2,\"428\":1,\"1208\":1,\"3124\":8,\"3135\":1,\"3141\":1,\"3159\":1,\"3365\":2,\"3367\":1,\"3507\":1,\"3545\":1}}],[\"一样\",{\"1\":{\"3712\":1}}],[\"一主一副本一仲裁\",{\"1\":{\"3647\":1,\"3649\":1}}],[\"一秒钟会卖出很多\",{\"1\":{\"3494\":1}}],[\"一切设计都是为了提高搜索的性能\",{\"1\":{\"3360\":1}}],[\"一切都配置好后\",{\"1\":{\"3323\":1}}],[\"一切皆数据\",{\"1\":{\"1696\":1}}],[\"一\",{\"1\":{\"3259\":1}}],[\"一条数据在这里就是一个文档\",{\"1\":{\"3101\":1}}],[\"一条线顺序执行叫一个线程\",{\"1\":{\"1709\":1}}],[\"一组节点构成一个集群\",{\"1\":{\"3093\":1}}],[\"一组api\",{\"1\":{\"2527\":1}}],[\"一是在java安装目录的jre\",{\"1\":{\"2989\":1}}],[\"一是遇到错误就终止程序的运行\",{\"1\":{\"1562\":1}}],[\"一共有三个会话\",{\"1\":{\"3034\":1}}],[\"一共有5种\",{\"1\":{\"2950\":1}}],[\"一共有四种方法\",{\"1\":{\"2265\":1}}],[\"一行一个\",{\"1\":{\"3487\":1}}],[\"一行一行的读\",{\"1\":{\"2082\":1}}],[\"一行代码解决所有乱码问题\",{\"1\":{\"2880\":1}}],[\"一台主机可以启动多太tomcat服务器\",{\"1\":{\"2752\":1}}],[\"一元运算符\",{\"1\":{\"2450\":1}}],[\"一段时间\",{\"1\":{\"2278\":1}}],[\"一段时间内使用时间最早的数据\",{\"1\":{\"480\":1}}],[\"一套是针对标准输入输出nio\",{\"1\":{\"2161\":1}}],[\"一致后才能正常反序列化\",{\"1\":{\"2158\":1}}],[\"一致性问题\",{\"0\":{\"3455\":1}}],[\"一致性\",{\"1\":{\"1428\":1}}],[\"一路都不要用\",{\"1\":{\"1969\":1}}],[\"一些特定的服务器端命令也只能从这个数据库运行\",{\"1\":{\"3574\":1}}],[\"一些优化磁盘\",{\"1\":{\"3501\":1}}],[\"一些与磁盘路由晶哥的配置\",{\"1\":{\"3501\":1}}],[\"一些启动时可能会出现的问题\",{\"1\":{\"3311\":1,\"3344\":1}}],[\"一些基本的配置\",{\"1\":{\"3285\":1}}],[\"一些操作\",{\"0\":{\"2145\":1}}],[\"一些弊端\",{\"1\":{\"1820\":1}}],[\"一些接口的实现集合\",{\"1\":{\"1513\":1}}],[\"一种标准化的行为\",{\"1\":{\"3464\":1}}],[\"一种交换数字证书的加密标准\",{\"1\":{\"3293\":1}}],[\"一种维护浏览器状态的方法\",{\"1\":{\"3035\":1}}],[\"一种复杂的约束技术\",{\"1\":{\"3023\":1}}],[\"一种简单的约束技术\",{\"1\":{\"3023\":1}}],[\"一种资源跳转方式\",{\"1\":{\"2905\":1}}],[\"一种是\",{\"1\":{\"1711\":2}}],[\"一种程序运行出现的错误\",{\"1\":{\"1706\":1}}],[\"一款软件具有某些功能\",{\"1\":{\"1688\":1}}],[\"一定不能配置该值\",{\"1\":{\"3270\":1,\"3271\":1}}],[\"一定不要打包servlet包\",{\"1\":{\"2774\":1}}],[\"一定注意英文是按照单词进行拆分的而不是字母\",{\"1\":{\"3175\":1}}],[\"一定省略的内容\",{\"0\":{\"2363\":1}}],[\"一定会发生类的初始化\",{\"1\":{\"2277\":1}}],[\"一定的规则\",{\"1\":{\"2174\":1}}],[\"一定程度上可以说\",{\"1\":{\"1636\":1}}],[\"一定要切到admin数据库\",{\"1\":{\"3715\":1}}],[\"一定要注意是post请求\",{\"1\":{\"3152\":1}}],[\"一定要先处理控制台乱码\",{\"1\":{\"2875\":1}}],[\"一定要重写compareto方法或compare方法\",{\"1\":{\"1903\":1}}],[\"一定要考虑异常的处理\",{\"1\":{\"1595\":1}}],[\"一定要显式赋值\",{\"1\":{\"1273\":1}}],[\"一定要维护好父子pom的\",{\"1\":{\"166\":1}}],[\"一开始直接定义枚举对象\",{\"1\":{\"1626\":1}}],[\"一开始是用于开发桌面级应用的\",{\"1\":{\"1011\":1}}],[\"一部分实现是不确定的\",{\"1\":{\"1498\":1}}],[\"一部分指定操作类型和索引\",{\"1\":{\"434\":1}}],[\"一维数组的名称分别为arr\",{\"1\":{\"1233\":1}}],[\"一维数组的内存解析\",{\"0\":{\"1224\":1}}],[\"一维数组\",{\"0\":{\"1215\":1},\"1\":{\"1210\":1}}],[\"一次查询就能将订单所有的变更读取出来\",{\"1\":{\"3541\":1}}],[\"一次性删除节点不要太多\",{\"1\":{\"3276\":1}}],[\"一次性进行请求\",{\"1\":{\"3219\":1}}],[\"一次手动指定的\",{\"1\":{\"3142\":1,\"3160\":1}}],[\"一次返回系统自定义的\",{\"1\":{\"3142\":1,\"3160\":1}}],[\"一次会话\",{\"1\":{\"3033\":1}}],[\"一次请求\",{\"1\":{\"2904\":1}}],[\"一次请求响应结束后\",{\"1\":{\"2891\":1}}],[\"一次读取多个字符\",{\"0\":{\"2053\":1},\"1\":{\"2053\":1}}],[\"一次读取多个字节\",{\"1\":{\"814\":1}}],[\"一次\",{\"1\":{\"1337\":1}}],[\"一次编译\",{\"1\":{\"986\":1,\"1015\":1}}],[\"一参\",{\"0\":{\"814\":1}}],[\"一并创建\",{\"1\":{\"805\":1}}],[\"一旦该节点故障\",{\"1\":{\"3508\":1}}],[\"一旦索引被读入内核的文件系统缓存\",{\"1\":{\"3441\":1}}],[\"一旦索引请求成功返回给用户\",{\"1\":{\"3411\":1}}],[\"一旦新的索引就绪\",{\"1\":{\"3440\":1}}],[\"一旦收到所有答复\",{\"1\":{\"3416\":1}}],[\"一旦所有的副本分片报告所有操作成功\",{\"1\":{\"3417\":1}}],[\"一旦所有的副本分片都报告成功\",{\"1\":{\"3407\":1}}],[\"一旦所有副本分片都返回成功\",{\"1\":{\"3413\":1}}],[\"一旦复制了\",{\"1\":{\"3369\":1}}],[\"一旦设置不能更改\",{\"1\":{\"3355\":1}}],[\"一旦触发了被监控的事件\",{\"1\":{\"2957\":1}}],[\"一旦发现\",{\"1\":{\"2957\":1}}],[\"一旦指明后\",{\"1\":{\"1959\":1}}],[\"一旦初始化以后\",{\"1\":{\"1821\":1,\"1822\":1}}],[\"一旦执行终止操作\",{\"1\":{\"2440\":1}}],[\"一旦执行方法\",{\"1\":{\"1803\":1}}],[\"一旦执行此方法\",{\"1\":{\"1799\":3}}],[\"一旦执行break\",{\"1\":{\"1186\":1}}],[\"一旦判断instance不是null\",{\"1\":{\"1770\":1}}],[\"一旦进程被创建\",{\"1\":{\"1685\":1}}],[\"一旦当方法体执行时\",{\"1\":{\"1598\":1}}],[\"一旦处理完成\",{\"1\":{\"1588\":1}}],[\"一旦try中的异常对象匹配到某一个catch时\",{\"1\":{\"1588\":1}}],[\"一旦抛出对象以后\",{\"1\":{\"1566\":1}}],[\"一旦出现异常\",{\"1\":{\"1566\":1,\"1588\":1}}],[\"一旦返回true\",{\"1\":{\"1415\":1}}],[\"一旦子类a继承父类b以后\",{\"1\":{\"1361\":1}}],[\"一旦赋值以后\",{\"1\":{\"1354\":1}}],[\"一旦显式定义了构造器\",{\"1\":{\"1321\":1}}],[\"一旦我们显式的定义了类的构造器之后\",{\"1\":{\"1320\":1}}],[\"一旦除尽\",{\"1\":{\"1204\":1}}],[\"一旦匹配成功\",{\"1\":{\"1175\":1}}],[\"一旦某个定时任务在运行时\",{\"1\":{\"494\":1}}],[\"一旦启动了\",{\"1\":{\"224\":1}}],[\"一个且仅一个成员被视为主节点\",{\"1\":{\"3641\":1}}],[\"一个业务索引具体需要分配多少分片可能需要架构师和技术人员对业务的增长有个预先的判断\",{\"1\":{\"3508\":1}}],[\"一个分片的底层即为一个\",{\"1\":{\"3507\":1}}],[\"一个分片怎样分布\",{\"1\":{\"3366\":1}}],[\"一个常见的设置是使用其它数据库作为主要的数据存储\",{\"1\":{\"3498\":1}}],[\"一个典型的例子是读取一行数据之前先将其锁住\",{\"1\":{\"3495\":1}}],[\"一个简单的分词器遇到空格和标点的时候\",{\"1\":{\"3464\":1}}],[\"一个新的包含新段名字的提交点也同时被写入磁盘\",{\"1\":{\"3449\":1}}],[\"一个追加的倒排索引\",{\"1\":{\"3449\":1}}],[\"一个被标记删除的文档仍然可以被查询匹配到\",{\"1\":{\"3447\":1}}],[\"一个列出了所有已知段的文件\",{\"1\":{\"3446\":1}}],[\"一个倒排索引就是一段\",{\"1\":{\"3445\":1}}],[\"一个站点存在的文档可能会非常多\",{\"1\":{\"3423\":1}}],[\"一个自定义的路由参数可以用来确保所有相关的文档\",{\"1\":{\"3402\":1}}],[\"一个可变值\",{\"1\":{\"3400\":1}}],[\"一个可选的level和一个可选的addtivity属性\",{\"1\":{\"308\":1}}],[\"一个运行中的\",{\"1\":{\"3374\":1}}],[\"一个运行java的虚拟机\",{\"1\":{\"1013\":1}}],[\"一个具有\",{\"1\":{\"3365\":1}}],[\"一个文档认为就是一个对象\",{\"1\":{\"3546\":1}}],[\"一个文档是一个可被索引的基础信息单元\",{\"1\":{\"3362\":1}}],[\"一个文件中可以创建多个类\",{\"1\":{\"1258\":1}}],[\"一个文件可以有多个class\",{\"1\":{\"1051\":1}}],[\"一个索引可以存储超出单个节点硬件限制的大量数据\",{\"1\":{\"3365\":1}}],[\"一个索引由一个名字来标识\",{\"1\":{\"3360\":1}}],[\"一个索引就是一个拥有几分相似特征的文档的集合\",{\"1\":{\"3360\":1}}],[\"一个节点分片不要过多\",{\"1\":{\"3507\":1}}],[\"一个节点上既保存原始数据又保存副本是没有意义的\",{\"1\":{\"3384\":1}}],[\"一个节点可以通过配置集群名称的方式来加入一个指定的集群\",{\"1\":{\"3261\":1}}],[\"一个节点也是由一个名字来标识的\",{\"1\":{\"3261\":1}}],[\"一个节点就是其中的一个服务器\",{\"1\":{\"3261\":1}}],[\"一个\",{\"1\":{\"3260\":1}}],[\"一个集群就是由一个或多个服务器节点组织在一起\",{\"1\":{\"3260\":1}}],[\"一个有作用范围的对象\",{\"1\":{\"2901\":1,\"2936\":1}}],[\"一个form表单\",{\"1\":{\"2871\":1}}],[\"一个field对象\",{\"1\":{\"860\":1}}],[\"一个servlet类中一般都要定义doget方法和dopost方法\",{\"1\":{\"2861\":1}}],[\"一个springboot项目在运行时实际上是分两个过程进行的\",{\"1\":{\"181\":1}}],[\"一个druiddatasource只支持一个evictionrun\",{\"1\":{\"2674\":1}}],[\"一个数据表对应一个java类\",{\"1\":{\"2594\":1}}],[\"一个predicate\",{\"1\":{\"2477\":1}}],[\"一个学生类\",{\"1\":{\"2469\":1}}],[\"一个中间操作链\",{\"1\":{\"2440\":1}}],[\"一个中文用3个字符表示\",{\"1\":{\"674\":1}}],[\"一个动态代理类\",{\"1\":{\"2334\":1}}],[\"一个class对象对应的是一个加载到jvm中的一个\",{\"1\":{\"2263\":1}}],[\"一个cpu\",{\"1\":{\"1690\":1}}],[\"一个加载的类在\",{\"1\":{\"2263\":1}}],[\"一个uri实例可以代表绝对的\",{\"1\":{\"2243\":1}}],[\"一个url对象生成后\",{\"1\":{\"2239\":1}}],[\"一个key\",{\"1\":{\"1912\":1}}],[\"一个空的集合\",{\"1\":{\"1831\":1}}],[\"一个线程类中的所有静态方法共用同一把锁\",{\"1\":{\"1772\":1}}],[\"一个线程对多条语句只执行了一部分\",{\"1\":{\"1755\":1}}],[\"一个线程对象只能调用一次start\",{\"1\":{\"1725\":1}}],[\"一个变量对应一小块内存\",{\"1\":{\"1702\":1}}],[\"一个java应用程序java\",{\"1\":{\"1689\":1}}],[\"一个进程至少有一个线程\",{\"1\":{\"1688\":1}}],[\"一个进程崩溃后\",{\"1\":{\"1688\":1}}],[\"一个进程中的多个线程共享相同的内存单元\",{\"1\":{\"1687\":1}}],[\"一个程序可以对应多个进程\",{\"1\":{\"1686\":1}}],[\"一个匿名类一定是在new的后面\",{\"1\":{\"1462\":1}}],[\"一个没有\",{\"1\":{\"1428\":1}}],[\"一个引用类型变量如果声明为父类的类型\",{\"1\":{\"1399\":1}}],[\"一个类只有一个class对象\",{\"1\":{\"2248\":1}}],[\"一个类只能有一个父类\",{\"1\":{\"1363\":1}}],[\"一个类\",{\"1\":{\"1617\":1}}],[\"一个类中代码块若有修饰符\",{\"1\":{\"1526\":1}}],[\"一个类可以实现多个接口\",{\"1\":{\"1509\":1}}],[\"一个类可以被多个子类继承\",{\"1\":{\"1363\":1}}],[\"一个类可以创建多个重载的构造器\",{\"1\":{\"1321\":1}}],[\"一个native方法是指该方法的实现由非java语言实现\",{\"1\":{\"1357\":1}}],[\"一个native方法就是一个java调用非java代码的接口\",{\"1\":{\"1357\":1}}],[\"一个方法体内调用它自身\",{\"1\":{\"1283\":1}}],[\"一个位分解成3个位表示\",{\"1\":{\"1122\":1}}],[\"一个片假名\",{\"1\":{\"1100\":1}}],[\"一个汉字\",{\"1\":{\"1100\":1}}],[\"一个反斜杠\",{\"1\":{\"985\":1}}],[\"一个误区\",{\"0\":{\"817\":1}}],[\"一个字符过滤器可以用来去掉\",{\"1\":{\"3464\":1}}],[\"一个字节的二进制数据\",{\"1\":{\"813\":1}}],[\"一个字母用1个字符表示\",{\"1\":{\"674\":1}}],[\"一个是与被下载文件大小相同的空文件\",{\"1\":{\"2140\":1}}],[\"一个是\",{\"1\":{\"2111\":1}}],[\"一个是往外写字符的\",{\"1\":{\"820\":1}}],[\"一个是往外写字节的\",{\"1\":{\"820\":1}}],[\"一个是读取字节的一个是读取字符的\",{\"1\":{\"812\":1}}],[\"一个是数据层接口\",{\"1\":{\"637\":1}}],[\"一个无实体的file对象即可以是目录也可以是文件\",{\"1\":{\"802\":1,\"2018\":1}}],[\"一个bean被多种方式定义\",{\"1\":{\"529\":1}}],[\"一个手机号可以多次请求验证码\",{\"1\":{\"469\":1}}],[\"一个手机号一个验证码\",{\"1\":{\"469\":1}}],[\"一个根据用户id获取用户地址的方法\",{\"1\":{\"468\":1}}],[\"一个配置类可以创建多个队列\",{\"1\":{\"442\":1}}],[\"一个操作分为两部分\",{\"1\":{\"434\":1}}],[\"一个查询对象\",{\"1\":{\"404\":1}}],[\"一直使用的是这个\",{\"1\":{\"262\":1}}],[\"一级属性名\",{\"1\":{\"151\":2}}],[\"一般只需关注前两个\",{\"1\":{\"3595\":1}}],[\"一般只用在集合上\",{\"1\":{\"2002\":1}}],[\"一般一个节点有时候就是一台物理机\",{\"1\":{\"3508\":1}}],[\"一般设置不超过\",{\"1\":{\"3508\":1}}],[\"一般设置为\",{\"1\":{\"468\":1,\"2750\":1}}],[\"一般都设置分片数不超过节点数的\",{\"1\":{\"3508\":1}}],[\"一般都是运行在指定服务器集群中\",{\"1\":{\"3259\":1}}],[\"一般都使用单例模式实现\",{\"1\":{\"1491\":1}}],[\"一般要创建一个数据对象\",{\"1\":{\"3215\":1}}],[\"一般删除数据都是根据文档的唯一性标识进行删除\",{\"1\":{\"3152\":1}}],[\"一般传统数据库\",{\"1\":{\"3097\":1}}],[\"一般dopost和doget是要被重写的\",{\"1\":{\"2811\":1}}],[\"一般我们返回一个空字符串即可\",{\"1\":{\"2803\":1}}],[\"一般选择使用jdbc来连接数据库\",{\"1\":{\"2530\":1}}],[\"一般仅作用集合的展开\",{\"1\":{\"2467\":1}}],[\"一般主动发起通信的应用程序属客户端\",{\"1\":{\"2209\":1}}],[\"一般地\",{\"1\":{\"1611\":1}}],[\"一般有两种\",{\"1\":{\"1562\":1}}],[\"一般来说\",{\"1\":{\"3508\":1}}],[\"一般来说对应的是数据库中的一张表\",{\"1\":{\"1533\":1}}],[\"一般来说就是使用\",{\"1\":{\"21\":1}}],[\"一般也只有一个对象\",{\"1\":{\"1491\":1}}],[\"一般也是单例模式实现\",{\"1\":{\"1491\":1}}],[\"一般也会设置跳过maven单元测试\",{\"1\":{\"574\":1}}],[\"一般开发中都会提供一个\",{\"1\":{\"1320\":1}}],[\"一般②在前\",{\"1\":{\"1274\":1}}],[\"一般最多写三层\",{\"1\":{\"1199\":1}}],[\"一般最顶层也会加上一些通用的配置\",{\"1\":{\"272\":1}}],[\"一般在javadoc中只要涉及到类名或者方法名\",{\"1\":{\"1058\":1}}],[\"一般用集合\",{\"1\":{\"1824\":1}}],[\"一般用在定义它的类或语句块之内\",{\"1\":{\"1449\":1}}],[\"一般用于请求转发的多个资源中共享数据\",{\"1\":{\"2901\":1}}],[\"一般用于程序流程控制\",{\"1\":{\"1106\":1}}],[\"一般用于测试\",{\"1\":{\"1047\":1}}],[\"一般用getdeclaredmethod\",{\"1\":{\"858\":1}}],[\"一般用来加载资源文件\",{\"1\":{\"2972\":1}}],[\"一般用来获取自定义的注解\",{\"1\":{\"2296\":1}}],[\"一般用来执行callable\",{\"1\":{\"1814\":1}}],[\"一般用来执行runnable\",{\"1\":{\"1814\":1}}],[\"一般用来返回实现了某个接口的类的对象\",{\"1\":{\"1458\":1}}],[\"一般用来动态的监控一个自定义的组件状态\",{\"1\":{\"350\":1}}],[\"一般用来配置端点的开放情况\",{\"1\":{\"343\":1}}],[\"一般的float类和double类可以用来做科学计算或工程计算\",{\"1\":{\"778\":1}}],[\"一般stringbuffer也能使用\",{\"1\":{\"697\":1}}],[\"一般采用账户名密码的形式进行权限认证\",{\"1\":{\"3735\":1}}],[\"一般采用的认证方式是x\",{\"1\":{\"3723\":1}}],[\"一般采用url编码\",{\"1\":{\"3054\":1}}],[\"一般采用idea内置maven的版本进行下载\",{\"1\":{\"574\":1}}],[\"一般采用springboot\",{\"1\":{\"387\":1}}],[\"一般不指定\",{\"1\":{\"3591\":1}}],[\"一般不使用jsp\",{\"1\":{\"2976\":1}}],[\"一般不编写针对性的代码进行处理\",{\"1\":{\"1560\":1,\"1571\":1}}],[\"一般不用给这个值\",{\"1\":{\"3673\":1}}],[\"一般不用设置\",{\"1\":{\"3625\":1}}],[\"一般不用\",{\"0\":{\"2307\":1,\"2313\":1}}],[\"一般不用添加\",{\"1\":{\"592\":1}}],[\"一般不用手动调整\",{\"1\":{\"120\":1}}],[\"一般不直接用\",{\"1\":{\"359\":1}}],[\"一般为json\",{\"1\":{\"337\":1}}],[\"一般为xxxapplication\",{\"1\":{\"127\":1}}],[\"一般情况下用这个\",{\"1\":{\"1860\":1}}],[\"一般情况下\",{\"1\":{\"293\":1}}],[\"一般80端口冲突都是因为开启了多个服务器\",{\"1\":{\"248\":1}}],[\"一般会有测试用的数据库\",{\"1\":{\"232\":1}}],[\"一般使用postman或者swagger\",{\"1\":{\"231\":1}}],[\"一般是指编程时的逻辑错误\",{\"1\":{\"1573\":1}}],[\"一般是以单例的形式\",{\"1\":{\"332\":1}}],[\"一般是浏览器或postman输入url查看访问结果\",{\"1\":{\"175\":1}}],[\"一般是通过网页\",{\"1\":{\"22\":1}}],[\"一般外部用户无法访问\",{\"1\":{\"36\":1,\"37\":1}}],[\"底层都是将用户信息保存在了admin数据库的集合\",{\"1\":{\"3711\":1}}],[\"底层都创建了长度为10的数组\",{\"1\":{\"1877\":1}}],[\"底层改变\",{\"0\":{\"2513\":1}}],[\"底层创建长度为16的数组\",{\"1\":{\"1926\":1}}],[\"底层创建了长度是16的一维数组entry\",{\"1\":{\"1921\":1}}],[\"底层创建了长度是10的object\",{\"1\":{\"1865\":1}}],[\"底层没有创建一个长度为16的数组\",{\"1\":{\"1926\":1}}],[\"底层结构\",{\"1\":{\"1912\":1,\"1913\":1,\"1914\":1}}],[\"底层\",{\"0\":{\"1930\":1,\"2933\":1},\"1\":{\"1902\":1,\"1903\":1}}],[\"底层才创建了长度10的数组\",{\"1\":{\"1869\":1}}],[\"底层object\",{\"1\":{\"1869\":1}}],[\"底层解析\",{\"0\":{\"1367\":1}}],[\"底层表示\",{\"1\":{\"1157\":1}}],[\"底层说明\",{\"0\":{\"1097\":1}}],[\"底层默认创建了16个长度的char数组\",{\"1\":{\"693\":1}}],[\"底层使用双向链表存储\",{\"1\":{\"1861\":1}}],[\"底层使用object\",{\"1\":{\"1860\":1,\"1862\":1}}],[\"底层使用char\",{\"1\":{\"690\":2}}],[\"底层使用final\",{\"1\":{\"690\":1}}],[\"底层是逻辑删除\",{\"1\":{\"3147\":1}}],[\"底层是个空的object\",{\"1\":{\"1869\":1}}],[\"底层是三个注解\",{\"1\":{\"563\":1}}],[\"底层是ioc容器\",{\"1\":{\"150\":1}}],[\"底层兼容的缓存技术\",{\"0\":{\"488\":1}}],[\"底层设计中采用线程安全的statefulredisconnection\",{\"1\":{\"382\":1}}],[\"底层原理\",{\"0\":{\"571\":1,\"1889\":1,\"2865\":1,\"3785\":1},\"1\":{\"45\":1}}],[\"引发\",{\"1\":{\"3532\":1}}],[\"引起来\",{\"1\":{\"3018\":1}}],[\"引擎完成恶意行为的做法\",{\"1\":{\"2559\":1}}],[\"引用常量不会触发此类的初始化\",{\"1\":{\"2277\":1}}],[\"引用类型的变量\",{\"1\":{\"1552\":1}}],[\"引用类型都可以\",{\"1\":{\"1266\":1}}],[\"引用类型\",{\"1\":{\"1243\":1,\"1373\":1,\"1426\":1,\"1700\":1}}],[\"引用\",{\"1\":{\"1127\":1}}],[\"引用数据类型的标识符保存的是值的内存地址\",{\"1\":{\"1556\":1}}],[\"引用数据类型元素的数组\",{\"1\":{\"1210\":1}}],[\"引用数据类型\",{\"0\":{\"1293\":1,\"1556\":1},\"1\":{\"1075\":1,\"1273\":1,\"1290\":1}}],[\"引用数据\",{\"1\":{\"149\":1}}],[\"引入\",{\"0\":{\"3745\":1}}],[\"引入全新的方式以使用更少的存储空间\",{\"1\":{\"3114\":1}}],[\"引入xsi前缀\",{\"1\":{\"3030\":1}}],[\"引入约束写xml\",{\"0\":{\"3030\":1}}],[\"引入dtd\",{\"0\":{\"3027\":1}}],[\"引入dtd文档\",{\"0\":{\"3026\":1}}],[\"引入了path接口\",{\"1\":{\"2164\":1}}],[\"引入依赖\",{\"1\":{\"441\":1}}],[\"引入第三方模块\",{\"0\":{\"166\":1}}],[\"引导类加载器\",{\"1\":{\"2279\":1}}],[\"引导类的意义就是初始化spring容器\",{\"1\":{\"130\":1}}],[\"引导类的类名随意\",{\"1\":{\"127\":1}}],[\"引导类需要放到项目包中\",{\"1\":{\"129\":1}}],[\"引导类\",{\"0\":{\"126\":1,\"127\":1}}],[\"$clustertime\",{\"1\":{\"3670\":1,\"3673\":1,\"3674\":1,\"3700\":1,\"3701\":1}}],[\"$or\",{\"1\":{\"3616\":3}}],[\"$and\",{\"1\":{\"3616\":3}}],[\"$nin\",{\"1\":{\"3615\":1}}],[\"$ne\",{\"1\":{\"3614\":1}}],[\"$in\",{\"1\":{\"3615\":1}}],[\"$inc\",{\"1\":{\"3598\":2}}],[\"$lte\",{\"1\":{\"3614\":1}}],[\"$lt\",{\"1\":{\"3614\":1,\"3616\":2}}],[\"$gte\",{\"1\":{\"3614\":1,\"3616\":1}}],[\"$gt\",{\"1\":{\"3614\":2}}],[\"$set\",{\"1\":{\"3596\":1,\"3597\":1}}],[\"$\",{\"1\":{\"149\":2,\"151\":9,\"308\":1,\"418\":5,\"1082\":1,\"3575\":1}}],[\"缩略格式\",{\"1\":{\"148\":1}}],[\"减法运算\",{\"1\":{\"780\":1}}],[\"减少误判\",{\"1\":{\"3533\":1}}],[\"减少副本的数量\",{\"0\":{\"3518\":1}}],[\"减少\",{\"0\":{\"3516\":1}}],[\"减少磁盘\",{\"1\":{\"3441\":1}}],[\"减少内存堆使用\",{\"1\":{\"3114\":1}}],[\"减少了es分片时带来的开销\",{\"1\":{\"3509\":1}}],[\"减少了创建新线程的时间\",{\"1\":{\"1813\":1}}],[\"减少了系统性能开销\",{\"1\":{\"1487\":1}}],[\"减少了冗余\",{\"1\":{\"1330\":1}}],[\"减少日期时间\",{\"1\":{\"722\":1}}],[\"减少开发者配置工作量\",{\"1\":{\"562\":1}}],[\"减少spring管控的资源数量\",{\"1\":{\"554\":1}}],[\"减少pom\",{\"1\":{\"125\":1}}],[\"减号与数据间空格分隔\",{\"1\":{\"148\":1}}],[\"代理流程分析\",{\"0\":{\"2345\":1}}],[\"代理对象会读取被代理类中的同名方法的方法名和形参列表\",{\"1\":{\"2333\":1}}],[\"代理对象决定是否以及何时将方法调用转到原始对象上\",{\"1\":{\"2320\":1}}],[\"代理工厂做一些后续的收尾工作\",{\"1\":{\"2328\":1}}],[\"代理工厂做一些准备工作\",{\"1\":{\"2328\":1}}],[\"代理nike工厂\",{\"1\":{\"2326\":1}}],[\"代理类调用一个被代理类的同名方法\",{\"1\":{\"2345\":1}}],[\"代理类的对象\",{\"1\":{\"2344\":1}}],[\"代理类代码分析\",{\"0\":{\"2341\":1}}],[\"代理类对象\",{\"1\":{\"2340\":1}}],[\"代理类和被代理类在编译期间\",{\"1\":{\"2324\":1}}],[\"代理类\",{\"0\":{\"2328\":1,\"2342\":1,\"2343\":1},\"1\":{\"2321\":1,\"2326\":1}}],[\"代理设计模式\",{\"0\":{\"2320\":1}}],[\"代表该证书是经过认证的\",{\"1\":{\"3294\":1}}],[\"代表一次请求的范围\",{\"1\":{\"2901\":1}}],[\"代表一个查询对象\",{\"1\":{\"3167\":1}}],[\"代表一个类\",{\"1\":{\"2250\":1}}],[\"代表一个平台无关的平台路径\",{\"1\":{\"2164\":1}}],[\"代表的是零或多个层级访问目录\",{\"1\":{\"2823\":1}}],[\"代表urlpatterns\",{\"1\":{\"2820\":1}}],[\"代表这个值存在\",{\"1\":{\"2495\":1}}],[\"代表类\",{\"1\":{\"2250\":1}}],[\"代表类的\",{\"1\":{\"2250\":1}}],[\"代表类的方法\",{\"1\":{\"2250\":1}}],[\"代表文件已经读完了\",{\"1\":{\"2049\":1}}],[\"代表不可变的字符序列\",{\"1\":{\"1126\":1}}],[\"代表其他语言中的一个\",{\"1\":{\"985\":1}}],[\"代表ios格式\",{\"1\":{\"714\":1}}],[\"代表可变的字符序列吗\",{\"1\":{\"686\":1}}],[\"代表时区\",{\"1\":{\"147\":1}}],[\"代码示例\",{\"0\":{\"2573\":1,\"3249\":1,\"3253\":1}}],[\"代码结构\",{\"1\":{\"2199\":1}}],[\"代码解析\",{\"0\":{\"2054\":1}}],[\"代码更加简洁\",{\"1\":{\"1951\":1}}],[\"代码分析工具\",{\"1\":{\"1635\":1}}],[\"代码没有异常等\",{\"1\":{\"1590\":1}}],[\"代码块可以输出\",{\"1\":{\"1526\":2}}],[\"代码块里面可以像方法体一样\",{\"1\":{\"1524\":1}}],[\"代码块\",{\"0\":{\"1523\":1}}],[\"代码块构造器等结构\",{\"1\":{\"1496\":1}}],[\"代码块和内部类的\",{\"1\":{\"1470\":1}}],[\"代码块中初始化\",{\"1\":{\"1352\":1}}],[\"代码块内\",{\"1\":{\"1271\":1,\"1273\":1,\"1451\":1}}],[\"代码块局部变量\",{\"1\":{\"1076\":1}}],[\"代码执行完毕\",{\"1\":{\"887\":1,\"1008\":1}}],[\"代码生成\",{\"0\":{\"588\":1}}],[\"代码完全不用该\",{\"1\":{\"484\":1}}],[\"代码基本不用变\",{\"1\":{\"479\":1}}],[\"代码如下\",{\"1\":{\"308\":1,\"3209\":1,\"3211\":1,\"3212\":1,\"3214\":1,\"3217\":1,\"3218\":1,\"3220\":1,\"3221\":1,\"3225\":1,\"3226\":1}}],[\"代码是在模块中写的\",{\"1\":{\"161\":1}}],[\"代码\",{\"0\":{\"2551\":1,\"2878\":1},\"1\":{\"128\":1,\"1038\":1,\"3548\":1}}],[\"代码测试\",{\"0\":{\"221\":1},\"1\":{\"45\":1}}],[\"格式如下\",{\"1\":{\"3613\":1}}],[\"格式叫bson\",{\"1\":{\"3546\":1}}],[\"格式拼接结果\",{\"1\":{\"2833\":1}}],[\"格式是\",{\"1\":{\"2674\":1}}],[\"格式是固定的\",{\"1\":{\"1045\":1}}],[\"格式上只有参数和返回值的区别\",{\"1\":{\"2381\":1}}],[\"格式5\",{\"0\":{\"2376\":1}}],[\"格式4\",{\"0\":{\"2374\":1}}],[\"格式3\",{\"0\":{\"2372\":1}}],[\"格式详见\",{\"1\":{\"1637\":1}}],[\"格式2\",{\"0\":{\"2370\":1},\"1\":{\"1295\":1}}],[\"格式1\",{\"1\":{\"1295\":1}}],[\"格式为yml\",{\"1\":{\"3562\":1}}],[\"格式为\",{\"1\":{\"718\":1,\"2932\":1}}],[\"格式化和解析\",{\"1\":{\"728\":1}}],[\"格式化和解析日期\",{\"1\":{\"707\":1}}],[\"格式化解析时间和日期\",{\"1\":{\"710\":1}}],[\"格式化只对date有用\",{\"1\":{\"708\":1}}],[\"格式化\",{\"0\":{\"732\":1,\"736\":1},\"1\":{\"708\":1,\"729\":1,\"734\":1}}],[\"格式\",{\"0\":{\"1159\":1,\"1463\":1,\"1525\":1,\"2362\":1},\"1\":{\"147\":1,\"644\":1,\"1277\":1,\"3028\":1,\"3583\":1}}],[\"日常使用\",{\"1\":{\"3490\":1}}],[\"日\",{\"1\":{\"717\":1}}],[\"日历类\",{\"1\":{\"707\":1}}],[\"日期类型\",{\"1\":{\"3197\":1}}],[\"日期时间\",{\"1\":{\"731\":1,\"734\":1}}],[\"日期与时间api\",{\"0\":{\"706\":1}}],[\"日期\",{\"1\":{\"299\":1,\"304\":1,\"501\":2,\"729\":1,\"731\":1,\"734\":1,\"3477\":1}}],[\"日期必须使用\",{\"1\":{\"147\":1}}],[\"日志存储目录\",{\"1\":{\"3561\":1}}],[\"日志记录\",{\"1\":{\"3551\":1}}],[\"日志记录器的滚动策略\",{\"1\":{\"308\":3}}],[\"日志目录\",{\"1\":{\"3106\":1,\"3289\":1,\"3320\":1,\"3654\":1}}],[\"日志报表\",{\"0\":{\"339\":1}}],[\"日志配置\",{\"0\":{\"335\":1}}],[\"日志监控\",{\"1\":{\"310\":1}}],[\"日志级别从低到高分为trace\",{\"1\":{\"308\":1}}],[\"日志分文件存储\",{\"1\":{\"303\":1}}],[\"日志策略配置\",{\"0\":{\"304\":1}}],[\"日志策略\",{\"0\":{\"303\":1}}],[\"日志文件储存的目录\",{\"1\":{\"3355\":1}}],[\"日志文件保留天数\",{\"1\":{\"308\":3}}],[\"日志文件输出格式\",{\"1\":{\"308\":3}}],[\"日志文件大小限制\",{\"1\":{\"304\":1}}],[\"日志文件名\",{\"1\":{\"302\":1}}],[\"日志文件\",{\"0\":{\"301\":1}}],[\"日志处理\",{\"0\":{\"300\":1}}],[\"日志格式语法\",{\"0\":{\"299\":1}}],[\"日志输出格式\",{\"0\":{\"296\":1}}],[\"日志组\",{\"1\":{\"295\":1}}],[\"日志系统提供了更加细致的日志等级控制\",{\"1\":{\"295\":1}}],[\"日志等级一般在application配置文件中设置\",{\"1\":{\"293\":1}}],[\"日志设置好以后可以根据设置选择哪些参与记录\",{\"1\":{\"292\":1}}],[\"日志的级别分为6种\",{\"1\":{\"292\":1}}],[\"日志的等级选择\",{\"0\":{\"293\":1}}],[\"日志的等级\",{\"0\":{\"291\":1}}],[\"日志的作用\",{\"0\":{\"287\":1}}],[\"日志会在控制台打印\",{\"1\":{\"288\":1}}],[\"日志\",{\"0\":{\"305\":1},\"1\":{\"45\":1,\"308\":3}}],[\"字典排序\",{\"1\":{\"3526\":1}}],[\"字节cp目录\",{\"1\":{\"3323\":1}}],[\"字节输出流的方式往浏览器写\",{\"0\":{\"2885\":1}}],[\"字节码操作获得类似动态语言的特性\",{\"1\":{\"2247\":1}}],[\"字节码文件\",{\"1\":{\"1040\":1}}],[\"字节数据\",{\"1\":{\"2144\":1,\"2893\":1}}],[\"字节数组\",{\"1\":{\"2091\":2}}],[\"字节\",{\"1\":{\"2091\":2}}],[\"字节值\",{\"1\":{\"813\":1}}],[\"字节流中的数据都是字符时\",{\"1\":{\"2091\":1}}],[\"字节流输入\",{\"1\":{\"2090\":1}}],[\"字节流的操作流程和字符流是一样\",{\"1\":{\"2068\":1}}],[\"字节流写出\",{\"1\":{\"2067\":1}}],[\"字节流读入\",{\"1\":{\"2067\":1}}],[\"字节流操作字节\",{\"1\":{\"2045\":1}}],[\"字节流与字符流的选择\",{\"0\":{\"2038\":1}}],[\"字节流\",{\"0\":{\"825\":1,\"2067\":1,\"2076\":1,\"2077\":1,\"2084\":1},\"1\":{\"813\":1,\"2023\":1,\"2025\":1}}],[\"字面量\",{\"1\":{\"1124\":1}}],[\"字面量方式\",{\"1\":{\"649\":1}}],[\"字面量表示方式\",{\"0\":{\"147\":1}}],[\"字符过滤器\",{\"1\":{\"3464\":1}}],[\"字符的编码\",{\"1\":{\"2105\":1}}],[\"字符数组\",{\"1\":{\"2091\":1}}],[\"字符变量的三种表现形式\",{\"0\":{\"1102\":1}}],[\"字符类型不是字符串\",{\"1\":{\"1101\":1}}],[\"字符类型只能是一个字符\",{\"1\":{\"1101\":1}}],[\"字符类型\",{\"0\":{\"1099\":1}}],[\"字符型\",{\"1\":{\"1075\":1,\"1273\":1}}],[\"字符\",{\"0\":{\"824\":1},\"1\":{\"1100\":1}}],[\"字符到数组中\",{\"1\":{\"814\":1}}],[\"字符流输出\",{\"1\":{\"2090\":1}}],[\"字符流的数据写出\",{\"1\":{\"2057\":1}}],[\"字符流的数据读入\",{\"1\":{\"2046\":1}}],[\"字符流操作字符\",{\"1\":{\"2045\":1}}],[\"字符流\",{\"0\":{\"2078\":1,\"2079\":1,\"2085\":1},\"1\":{\"813\":1,\"2023\":1}}],[\"字符集介绍\",{\"0\":{\"1103\":1}}],[\"字符集必须一致\",{\"1\":{\"674\":1}}],[\"字符集\",{\"0\":{\"2107\":1},\"1\":{\"674\":1}}],[\"字符串类型的数据\",{\"1\":{\"3548\":1}}],[\"字符串被\",{\"1\":{\"3464\":1}}],[\"字符串按顺序通过每个字符过滤器\",{\"1\":{\"3464\":1}}],[\"字符串的相互转换\",{\"1\":{\"3084\":1}}],[\"字符串的序列化和反序列化\",{\"0\":{\"2150\":1}}],[\"字符串的不可变性\",{\"0\":{\"1127\":1}}],[\"字符串角标越界\",{\"0\":{\"1578\":1}}],[\"字符串属于引用类型\",{\"1\":{\"1133\":1}}],[\"字符串也属于引用类型\",{\"1\":{\"1127\":1}}],[\"字符串常量池中是不会存储相同内容的字符串的\",{\"1\":{\"1125\":1}}],[\"字符串常量池\",{\"0\":{\"1125\":1}}],[\"字符串参数更加精准\",{\"1\":{\"778\":1}}],[\"字符串排序\",{\"0\":{\"756\":1}}],[\"字符串\",{\"1\":{\"730\":1,\"824\":1,\"1126\":1,\"2091\":2,\"3197\":1,\"3548\":1,\"3673\":1}}],[\"字符串替换\",{\"1\":{\"702\":1}}],[\"字符串拼接\",{\"1\":{\"700\":1}}],[\"字符串截取的end位置\",{\"1\":{\"669\":1}}],[\"字符串截取\",{\"1\":{\"669\":1,\"697\":1}}],[\"字符串本身没有改变\",{\"1\":{\"665\":1}}],[\"字符串可以直接书写\",{\"1\":{\"147\":1}}],[\"字符编码\",{\"0\":{\"575\":1}}],[\"字段上创建一个唯一的索引\",{\"1\":{\"3623\":1}}],[\"字段的索引\",{\"1\":{\"3631\":1}}],[\"字段的数据类型是字符型\",{\"1\":{\"3546\":1}}],[\"字段的值\",{\"1\":{\"3162\":1,\"3169\":1,\"3230\":1}}],[\"字段中的\",{\"1\":{\"3413\":1}}],[\"字段不会被索引\",{\"1\":{\"3197\":1}}],[\"字段会被索引\",{\"1\":{\"3197\":1}}],[\"字段名的值是一个对象\",{\"1\":{\"3197\":1}}],[\"字段名\",{\"1\":{\"3188\":7,\"3197\":2,\"3628\":1}}],[\"字段包含所接收信息的长度\",{\"1\":{\"2233\":1}}],[\"字段声明\",{\"1\":{\"1653\":1,\"1661\":1}}],[\"字段\",{\"0\":{\"3363\":1},\"1\":{\"501\":1,\"3162\":1,\"3169\":1,\"3230\":1,\"3429\":1,\"3435\":1,\"3613\":1,\"3625\":1}}],[\"字段类型也可以不同\",{\"1\":{\"399\":1}}],[\"~\",{\"1\":{\"147\":2,\"1157\":1}}],[\"表连接\",{\"1\":{\"3545\":1}}],[\"表格\",{\"1\":{\"3350\":1}}],[\"表头\",{\"1\":{\"3127\":1}}],[\"表单\",{\"1\":{\"2915\":1}}],[\"表中的记录数为\",{\"1\":{\"2657\":1}}],[\"表中的一个字段对应java类的一个属性\",{\"1\":{\"2594\":1}}],[\"表中的一条记录对应java类的一个对象\",{\"1\":{\"2594\":1}}],[\"表面传递的是父类的数据类型\",{\"1\":{\"1398\":1}}],[\"表明main方法入口\",{\"1\":{\"2981\":1}}],[\"表明该方法将不对这些异常进行处理\",{\"1\":{\"1597\":1}}],[\"表明调用的是父类中被重写的方法\",{\"1\":{\"1382\":1}}],[\"表明调用的是父类中声明的属性\",{\"1\":{\"1381\":1}}],[\"表明此形参是一个常量\",{\"1\":{\"1354\":1}}],[\"表明此方法不可以被重写\",{\"1\":{\"1350\":1}}],[\"表明此变量是属性\",{\"1\":{\"1328\":1,\"1329\":1}}],[\"表达式抛出一个受检异常\",{\"1\":{\"2389\":1}}],[\"表达式来创建该接口的对象\",{\"1\":{\"2389\":1}}],[\"表达式的类型依赖于上下文环境\",{\"1\":{\"2365\":1}}],[\"表达式的限制\",{\"1\":{\"1175\":1}}],[\"表达式中的参数类型都是由编译器推断得出的\",{\"1\":{\"2365\":1}}],[\"表达式中的所有元字符转义字符将不具备特殊含义\",{\"1\":{\"997\":1}}],[\"表达式\",{\"1\":{\"1174\":1}}],[\"表达式1\",{\"0\":{\"1161\":1}}],[\"表达式详解\",{\"1\":{\"501\":1}}],[\"表现层的servlet接收请求并调用业务逻辑层的方法进行业务逻辑处理\",{\"1\":{\"3007\":1}}],[\"表现层消息一致性处理\",{\"1\":{\"643\":1}}],[\"表现层其实就是\",{\"1\":{\"639\":1}}],[\"表现层\",{\"0\":{\"639\":1},\"1\":{\"3006\":2,\"3008\":1,\"3009\":1}}],[\"表\",{\"1\":{\"395\":1}}],[\"表名\",{\"1\":{\"373\":1}}],[\"表示操作成功\",{\"1\":{\"3713\":1,\"3714\":1}}],[\"表示健康\",{\"1\":{\"3674\":1}}],[\"表示添加成功\",{\"1\":{\"3673\":1}}],[\"表示添加映射\",{\"1\":{\"3197\":1}}],[\"表示要添加的主机为仲裁者\",{\"1\":{\"3673\":1}}],[\"表示副本集创建成功\",{\"1\":{\"3664\":1}}],[\"表示写问题的文档\",{\"1\":{\"3595\":1}}],[\"表示每个单独的文档包含了哪些关键字\",{\"1\":{\"3426\":1}}],[\"表示哪些文档包含了该关键字\",{\"1\":{\"3426\":1}}],[\"表示当前集群的全部主分片都正常运行\",{\"1\":{\"3384\":1}}],[\"表示该节点是健康的\",{\"1\":{\"3671\":1}}],[\"表示该结点是数据结点\",{\"1\":{\"3268\":1}}],[\"表示该注解能写在使用类型的任何语句中\",{\"1\":{\"1671\":1}}],[\"表示该注解能写在类型变量的声明语句中\",{\"1\":{\"1670\":1}}],[\"表示可以被选举为主节点\",{\"1\":{\"3268\":1}}],[\"表示可以导入xxx包下的所有结构\",{\"1\":{\"1342\":1}}],[\"表示相差两个\",{\"1\":{\"3239\":1}}],[\"表示相差一个\",{\"1\":{\"3239\":1}}],[\"表示相等\",{\"1\":{\"754\":1}}],[\"表示创建成功\",{\"1\":{\"3198\":1,\"3707\":1}}],[\"表示是否创建索引\",{\"1\":{\"3197\":1}}],[\"表示是否移除成功\",{\"1\":{\"950\":1}}],[\"表示计数不准确\",{\"1\":{\"3164\":1}}],[\"表示待删除的文档未找到\",{\"1\":{\"3151\":1}}],[\"表示数据被标记为删除\",{\"1\":{\"3149\":1}}],[\"表示数据被更新\",{\"1\":{\"3144\":1}}],[\"表示数组\",{\"1\":{\"1238\":1}}],[\"表示更新成功\",{\"1\":{\"3144\":1,\"3146\":1}}],[\"表示未查找到\",{\"1\":{\"3141\":1,\"3159\":1}}],[\"表示查找到\",{\"1\":{\"3141\":1,\"3159\":1}}],[\"表示层\",{\"1\":{\"3013\":1}}],[\"表示对servletcontext对象本身的生命周期进行监控\",{\"1\":{\"2970\":1}}],[\"表示监听器\",{\"1\":{\"2955\":1}}],[\"表示这个值不存在\",{\"1\":{\"2495\":1}}],[\"表示的是web目录\",{\"1\":{\"2941\":1}}],[\"表示的网络资源之间的连接\",{\"1\":{\"2244\":1}}],[\"表示的时间是格林威治时间\",{\"1\":{\"725\":1}}],[\"表示到url所引用的远程对象的连接\",{\"1\":{\"2241\":1}}],[\"表示所有\",{\"1\":{\"3387\":1,\"3391\":1}}],[\"表示所有目录\",{\"1\":{\"3268\":1}}],[\"表示所有泛型的父类\",{\"1\":{\"1989\":1}}],[\"表示所有类\",{\"1\":{\"1341\":1}}],[\"表示整个方法为同步方法\",{\"1\":{\"1765\":1}}],[\"表示protected类型\",{\"1\":{\"1536\":1}}],[\"表示此类不能被继承\",{\"1\":{\"1454\":1}}],[\"表示结束此方法的意思\",{\"1\":{\"1277\":1}}],[\"表示一个持久的属性集\",{\"1\":{\"2545\":1}}],[\"表示一个值不存在\",{\"1\":{\"2495\":1}}],[\"表示一个时间\",{\"1\":{\"715\":1}}],[\"表示一旦执行到此关键字\",{\"1\":{\"1175\":1}}],[\"表示string可以比较大小\",{\"1\":{\"1126\":1}}],[\"表示字符串是支持序列化的\",{\"1\":{\"1126\":1}}],[\"表示方法\",{\"0\":{\"1119\":1}}],[\"表示换行符\",{\"1\":{\"1102\":1}}],[\"表示参考的类和方法\",{\"1\":{\"1060\":1}}],[\"表示指向当前的某一方法\",{\"1\":{\"1058\":1}}],[\"表示o1\",{\"1\":{\"754\":1}}],[\"表示切片最多不超过limit个\",{\"1\":{\"682\":1,\"992\":1,\"1001\":1}}],[\"表示舍去前面n个字符后\",{\"1\":{\"662\":1}}],[\"表示从以下版本开始有这个类\",{\"1\":{\"1059\":1}}],[\"表示从键盘获取输入的内容\",{\"1\":{\"886\":1,\"1007\":1}}],[\"表示从该索引处开始找\",{\"1\":{\"656\":1}}],[\"表示从5分到20分钟每分钟触发一次\",{\"1\":{\"501\":1}}],[\"表示某月的第二个星期三\",{\"1\":{\"501\":1}}],[\"表示不关注该域\",{\"1\":{\"501\":1}}],[\"表示步长\",{\"1\":{\"501\":1}}],[\"表示匹配该域的任意值\",{\"1\":{\"501\":1}}],[\"表示范围\",{\"1\":{\"501\":1}}],[\"表示列出枚举值\",{\"1\":{\"501\":1}}],[\"表示开放所有端点的web端http请求权限\",{\"1\":{\"343\":1}}],[\"表示存储空间\",{\"1\":{\"216\":1}}],[\"表示时间间隔\",{\"1\":{\"215\":1}}],[\"表示\",{\"1\":{\"147\":1,\"985\":1,\"1348\":1,\"1536\":2}}],[\"表示注释\",{\"1\":{\"146\":1}}],[\"表结构中包含哪些字段\",{\"1\":{\"25\":1}}],[\"大家一般称之为redis缓存\",{\"1\":{\"3550\":1}}],[\"大大超过了节点数\",{\"1\":{\"3508\":1}}],[\"大大简化了日期时间和本地化的管理\",{\"1\":{\"709\":1}}],[\"大不了后期数据量多了\",{\"1\":{\"3506\":1}}],[\"大于等于\",{\"1\":{\"3172\":1,\"3236\":1,\"3259\":1}}],[\"大于\",{\"1\":{\"3172\":1,\"3236\":1}}],[\"大于o2\",{\"1\":{\"754\":1}}],[\"大企业的选择\",{\"0\":{\"3094\":1}}],[\"大类型\",{\"1\":{\"2932\":1}}],[\"大概过程如下\",{\"1\":{\"3335\":1}}],[\"大概42亿\",{\"1\":{\"2181\":1}}],[\"大概将只会用到其中的三分之一\",{\"1\":{\"711\":1}}],[\"大多数为\",{\"1\":{\"3686\":1}}],[\"大多数\",{\"1\":{\"3646\":1,\"3686\":2}}],[\"大多数情况下\",{\"1\":{\"2525\":1}}],[\"大多数方法在出错时仅返回失败\",{\"1\":{\"2163\":1}}],[\"大多数时候使用\",{\"1\":{\"1883\":1}}],[\"大多数开发者\",{\"1\":{\"711\":1}}],[\"大多数开发者只会用到基础包和format包\",{\"1\":{\"711\":1}}],[\"大驼峰\",{\"1\":{\"1083\":1}}],[\"大括号不换行\",{\"1\":{\"1063\":1}}],[\"大括号的风格\",{\"1\":{\"1063\":1}}],[\"大部分配置都是一样\",{\"1\":{\"3339\":1}}],[\"大部分配置信息springboot会自动读取\",{\"1\":{\"151\":1}}],[\"大部分应用的主要任务就是处理数据\",{\"1\":{\"462\":1}}],[\"大数据开发\",{\"1\":{\"1012\":1}}],[\"大数据\",{\"1\":{\"310\":1}}],[\"大小写无关\",{\"1\":{\"308\":2}}],[\"大小写敏感\",{\"1\":{\"146\":1}}],[\"大到一个页面布局\",{\"1\":{\"24\":1}}],[\"导致系统查询数据时都是全表扫描\",{\"1\":{\"3524\":1}}],[\"导致写入失败\",{\"1\":{\"3455\":1}}],[\"导致连接一直存在\",{\"1\":{\"2662\":1}}],[\"导致异常结束\",{\"1\":{\"1774\":1}}],[\"导致共享数据的错误\",{\"1\":{\"1755\":1}}],[\"导致a线程更新完数据后\",{\"1\":{\"1753\":1}}],[\"导致程序运行过慢\",{\"1\":{\"1705\":1}}],[\"导致编译时\",{\"1\":{\"1410\":1}}],[\"导致配置文件无效\",{\"1\":{\"143\":1}}],[\"导入servlet包\",{\"0\":{\"2773\":1}}],[\"导入springboot\",{\"1\":{\"319\":1,\"323\":1}}],[\"导入指定类或接口中的静态结构\",{\"1\":{\"1346\":1}}],[\"导入包和类名的可以直接用类名初始化\",{\"1\":{\"1344\":1}}],[\"导入包下全部类\",{\"1\":{\"1342\":1}}],[\"导入多个结构\",{\"1\":{\"1342\":1}}],[\"导入的类底层实现了importbeandefinitionregistrar接口\",{\"1\":{\"566\":1}}],[\"导入类\",{\"1\":{\"555\":1}}],[\"导入\",{\"0\":{\"386\":1}}],[\"导入jedis坐标\",{\"1\":{\"383\":1}}],[\"导入jsr303规范\",{\"1\":{\"218\":1}}],[\"导入测试对应的starter\",{\"1\":{\"227\":1}}],[\"导入依赖\",{\"0\":{\"218\":1}}],[\"导入坐标\",{\"0\":{\"185\":1,\"3085\":1}}],[\"导入一个springboot开发依赖\",{\"1\":{\"184\":1}}],[\"导入项目\",{\"1\":{\"105\":1}}],[\"有6个内置的角色\",{\"1\":{\"3701\":1}}],[\"有副作用\",{\"1\":{\"3656\":1}}],[\"有效时间30分钟\",{\"1\":{\"3329\":1}}],[\"有效时长\",{\"1\":{\"483\":1}}],[\"有主分片没能正常运行\",{\"1\":{\"3278\":1}}],[\"有个user索引\",{\"1\":{\"3198\":1}}],[\"有不同的查询条件写法\",{\"1\":{\"3167\":1}}],[\"有不同的虚拟机\",{\"1\":{\"1015\":1}}],[\"有缺陷\",{\"1\":{\"3023\":1}}],[\"有利于组件重用\",{\"1\":{\"3004\":1}}],[\"有利于分工协作\",{\"1\":{\"3004\":1}}],[\"有监控连接池状态的功能\",{\"1\":{\"2668\":1}}],[\"有就移动指针到下一行\",{\"1\":{\"2590\":1}}],[\"有就返回\",{\"1\":{\"472\":1}}],[\"有5种方法\",{\"1\":{\"2544\":1}}],[\"有无返回值\",{\"1\":{\"2381\":1}}],[\"有限制条件的通配符\",{\"0\":{\"1998\":1}}],[\"有能适配所有的泛型\",{\"1\":{\"1997\":1}}],[\"有泛型时\",{\"0\":{\"1954\":1}}],[\"有其他元素b\",{\"1\":{\"1891\":1}}],[\"有序状态\",{\"1\":{\"1933\":1}}],[\"有序\",{\"1\":{\"1822\":1,\"1887\":1}}],[\"有如下优势\",{\"1\":{\"1807\":1}}],[\"有它自身的产生\",{\"1\":{\"1684\":1}}],[\"有许多于\",{\"1\":{\"1679\":1}}],[\"有许多实现类\",{\"1\":{\"1650\":1}}],[\"有更好的选择\",{\"1\":{\"1637\":1,\"1638\":1}}],[\"有更好的提示\",{\"1\":{\"632\":1}}],[\"有一些可选的请求参数可以改变默认的流程\",{\"1\":{\"3408\":1}}],[\"有一些项目组由于人员配置紧张\",{\"1\":{\"33\":1}}],[\"有一个方法getname\",{\"1\":{\"2405\":1}}],[\"有一个无参的公共的构造器\",{\"1\":{\"1530\":1}}],[\"有4中方式使用flash\",{\"1\":{\"1512\":1}}],[\"有了myservlet这个指定的类后\",{\"1\":{\"2814\":1}}],[\"有了jdbc\",{\"0\":{\"2529\":1}}],[\"有了该对象就可以与客户端进行通信\",{\"1\":{\"2224\":1}}],[\"有了接口\",{\"1\":{\"1504\":1}}],[\"有了类的特点\",{\"1\":{\"1437\":1}}],[\"有了对象的多态性以后\",{\"1\":{\"1397\":1,\"1410\":1}}],[\"有了beandefinition对象\",{\"1\":{\"527\":1}}],[\"有可变参数的子类add方法重写了有可变参数的父类add\",{\"1\":{\"1376\":1}}],[\"有可能发生\",{\"1\":{\"1753\":1}}],[\"有可能无法识别值\",{\"1\":{\"734\":1}}],[\"有可能会扫描到一些用不到的包\",{\"1\":{\"516\":1}}],[\"有参\",{\"1\":{\"1318\":1}}],[\"有参数\",{\"1\":{\"887\":1,\"1008\":1}}],[\"有以下作用\",{\"1\":{\"1278\":1}}],[\"有以下两种操作\",{\"1\":{\"308\":1}}],[\"有返回值\",{\"1\":{\"1277\":1,\"1814\":1}}],[\"有浮点型参与的运算\",{\"1\":{\"1113\":1}}],[\"有多种组合方式\",{\"1\":{\"3169\":1}}],[\"有多种类型的数据混合运算时\",{\"1\":{\"1111\":1}}],[\"有多个成员\",{\"1\":{\"1647\":1}}],[\"有多个java版本\",{\"1\":{\"1035\":1}}],[\"有多个重载方法\",{\"1\":{\"703\":1}}],[\"有多个重构方法\",{\"1\":{\"672\":1,\"700\":1}}],[\"有几个class就形成几个文件\",{\"1\":{\"1051\":1}}],[\"有几个参数就写几个\",{\"1\":{\"859\":1}}],[\"有三个重构方法\",{\"1\":{\"2105\":1}}],[\"有三个重载方法\",{\"1\":{\"2098\":1}}],[\"有三个窗口售票\",{\"1\":{\"1755\":1}}],[\"有三个线程在执行遍历代码\",{\"1\":{\"1722\":1}}],[\"有三个构造器\",{\"1\":{\"689\":1}}],[\"有三种标准格式\",{\"1\":{\"731\":1}}],[\"有线程安全\",{\"1\":{\"696\":1}}],[\"有专门的前端服务器\",{\"1\":{\"648\":1}}],[\"有json数组\",{\"1\":{\"643\":1}}],[\"有两种方法通常被用来确保并发更新时变更不会丢失\",{\"1\":{\"3495\":1}}],[\"有两种创建方式\",{\"1\":{\"1124\":1}}],[\"有两种连接方式\",{\"1\":{\"388\":1}}],[\"有两个地方需要进行权限认证\",{\"1\":{\"3723\":1}}],[\"有两个主分片\",{\"1\":{\"3403\":1}}],[\"有两个含义\",{\"1\":{\"2674\":1}}],[\"有两个作用\",{\"1\":{\"783\":1}}],[\"有两个类注册了bean\",{\"1\":{\"549\":1}}],[\"有十几种注解\",{\"1\":{\"542\":1}}],[\"有很多bug要提前解决\",{\"1\":{\"3285\":1}}],[\"有很多类\",{\"1\":{\"746\":1}}],[\"有很多自定义缓存策略需要在配置文件中配置\",{\"1\":{\"478\":1}}],[\"有很多以\",{\"1\":{\"340\":1}}],[\"有值就不执行方法\",{\"1\":{\"468\":1}}],[\"有些驱动程序的确支持在集合名里面包含\",{\"1\":{\"3581\":1}}],[\"有些场景是不进行分词的\",{\"1\":{\"3474\":1}}],[\"有些云平台的主机看似关闭了防火墙\",{\"1\":{\"3349\":1}}],[\"有些异常是逻辑上的\",{\"1\":{\"1607\":1}}],[\"有些数据是临时的\",{\"1\":{\"463\":1}}],[\"有些是有单位的\",{\"1\":{\"214\":1}}],[\"有密码\",{\"1\":{\"389\":1}}],[\"有时也称作\",{\"1\":{\"2642\":1}}],[\"有时不确定究竟定义为何种类型\",{\"1\":{\"1946\":1}}],[\"有时不会报错\",{\"1\":{\"1116\":1}}],[\"有时根本发现不了\",{\"1\":{\"1787\":1}}],[\"有时必须从几个类中抽取出一些共同的行为特征\",{\"1\":{\"1505\":1}}],[\"有时必须从几个类中派生出一个子类\",{\"1\":{\"1504\":1}}],[\"有时需要写出换行符\",{\"1\":{\"830\":1,\"2083\":1}}],[\"有时\",{\"1\":{\"143\":1}}],[\"多文档\",{\"0\":{\"3416\":1,\"3417\":1}}],[\"多文档操作流程\",{\"0\":{\"3415\":1}}],[\"多文件版\",{\"0\":{\"273\":1}}],[\"多节点安装\",{\"0\":{\"3323\":1}}],[\"多种组合方式可以同时采用\",{\"1\":{\"3169\":1}}],[\"多走这一步\",{\"1\":{\"2850\":1}}],[\"多执行语句\",{\"0\":{\"2376\":1}}],[\"多参构造器\",{\"0\":{\"2426\":1}}],[\"多参\",{\"0\":{\"2376\":1}}],[\"多版本选择\",{\"1\":{\"3351\":1}}],[\"多版本切换\",{\"0\":{\"2355\":1}}],[\"多版本jdk\",{\"0\":{\"1030\":1}}],[\"多次启动\",{\"1\":{\"3651\":1}}],[\"多次执行\",{\"1\":{\"1757\":1}}],[\"多次使用\",{\"1\":{\"986\":1,\"1667\":1}}],[\"多打印\",{\"1\":{\"1755\":1}}],[\"多重继承功能\",{\"1\":{\"1531\":1}}],[\"多重继承\",{\"0\":{\"1504\":1}}],[\"多线程从集合中取出数据\",{\"1\":{\"2445\":1}}],[\"多线程就失去意义了\",{\"1\":{\"1762\":1}}],[\"多线程类\",{\"0\":{\"1715\":1}}],[\"多线程程序的优点\",{\"0\":{\"1693\":1}}],[\"多线程的意义\",{\"0\":{\"1691\":1}}],[\"多线程\",{\"0\":{\"3776\":1},\"1\":{\"1490\":1,\"1694\":1}}],[\"多线程同步\",{\"1\":{\"929\":1}}],[\"多少次\",{\"1\":{\"1428\":1}}],[\"多态主机同步进行安装\",{\"1\":{\"3323\":1}}],[\"多态提高了代码的通用性\",{\"1\":{\"1409\":1}}],[\"多态开发中的应用\",{\"0\":{\"1409\":1}}],[\"多态情况下\",{\"0\":{\"1404\":1}}],[\"多态示例\",{\"0\":{\"1401\":1}}],[\"多态的特性\",{\"1\":{\"1408\":1}}],[\"多态的情况下\",{\"1\":{\"1406\":1}}],[\"多态的意义\",{\"0\":{\"1400\":1}}],[\"多态的使用\",{\"0\":{\"1396\":1}}],[\"多态\",{\"0\":{\"1393\":1,\"1394\":1},\"1\":{\"1251\":1,\"1376\":1}}],[\"多态等\",{\"1\":{\"1250\":1}}],[\"多维数组\",{\"0\":{\"1229\":1},\"1\":{\"1210\":1}}],[\"多条件表达式的顺序\",{\"1\":{\"1172\":1}}],[\"多条件查询\",{\"0\":{\"3168\":1},\"1\":{\"410\":1}}],[\"多选一\",{\"0\":{\"1170\":1}}],[\"多分支\",{\"0\":{\"1170\":1}}],[\"多单词时每个单词用下划线连接\",{\"1\":{\"1083\":1}}],[\"多单词组成时\",{\"1\":{\"1083\":2}}],[\"多单词组成时所有字母都小写\",{\"1\":{\"1083\":1}}],[\"多行注释\",{\"0\":{\"1055\":1}}],[\"多个副本\",{\"0\":{\"3393\":1}}],[\"多个字段排序\",{\"0\":{\"3246\":1}}],[\"多个条件\",{\"1\":{\"3230\":1}}],[\"多个条件必须都不符合\",{\"1\":{\"3230\":1}}],[\"多个条件必须全部符合\",{\"1\":{\"3169\":1,\"3230\":1}}],[\"多个条只要符合一个即可\",{\"1\":{\"3169\":1,\"3230\":1}}],[\"多个添加必须都不符合\",{\"1\":{\"3169\":1}}],[\"多个web项目的cookie的共享\",{\"0\":{\"3056\":1}}],[\"多个jar包放到一起我们就称之为组件\",{\"1\":{\"2980\":1}}],[\"多个过滤器的执行顺序\",{\"0\":{\"2953\":1}}],[\"多个过滤器\",{\"0\":{\"2952\":1}}],[\"多个tomcat目标的使用\",{\"0\":{\"2760\":1}}],[\"多个中间操作可以连接起来形成一个流水线\",{\"1\":{\"2453\":1}}],[\"多个线程安装cpu的调度执行run方法\",{\"1\":{\"1781\":1}}],[\"多个线程安装1\",{\"1\":{\"1781\":1}}],[\"多个线程必须要共用同一把锁\",{\"1\":{\"1759\":1}}],[\"多个线程共同操作的变量\",{\"1\":{\"1759\":1}}],[\"多个人做同一件事\",{\"1\":{\"1690\":1}}],[\"多个人同时做不同的事\",{\"1\":{\"1690\":1}}],[\"多个cpu同时执行多个任务\",{\"1\":{\"1690\":1}}],[\"多个对象共享同一个静态变量\",{\"1\":{\"1475\":1}}],[\"多个类中存在相同属性和行为时\",{\"1\":{\"1359\":1}}],[\"多个环境间使用逗号分隔\",{\"1\":{\"278\":1}}],[\"多个配置文件\",{\"0\":{\"140\":1}}],[\"多层级配置文件的关系\",{\"0\":{\"264\":1}}],[\"多模块项目\",{\"0\":{\"160\":1}}],[\"多级数据\",{\"1\":{\"151\":1}}],[\"多格式配置文件\",{\"0\":{\"141\":1}}],[\"多环境开发控制\",{\"0\":{\"276\":1}}],[\"多环境开发\",{\"0\":{\"269\":1},\"1\":{\"45\":1}}],[\"控制了更新的细节\",{\"1\":{\"3595\":1}}],[\"控制每个分片占用的硬盘容量不超过\",{\"1\":{\"3508\":1}}],[\"控制文档与分片之间的匹配关系\",{\"1\":{\"3398\":1}}],[\"控制访问权限\",{\"1\":{\"1335\":1}}],[\"控制列数\",{\"1\":{\"1202\":1}}],[\"控制行数\",{\"1\":{\"1202\":1}}],[\"控制器获取到数据后再交由视图\",{\"1\":{\"3003\":1}}],[\"控制器调用模型\",{\"1\":{\"3003\":1}}],[\"控制器层\",{\"0\":{\"1539\":1},\"1\":{\"1537\":1}}],[\"控制器\",{\"1\":{\"589\":1,\"3002\":1,\"3003\":1,\"3011\":1}}],[\"控制bean的生成\",{\"0\":{\"525\":1}}],[\"控制台打印\",{\"1\":{\"2903\":1,\"3209\":1}}],[\"控制台乱码\",{\"0\":{\"2707\":1,\"2875\":1}}],[\"控制台输出\",{\"1\":{\"2121\":1}}],[\"控制台输出的日志级别是大于或等于此级别的日志信息\",{\"1\":{\"308\":1}}],[\"控制台会输出\",{\"1\":{\"1631\":1}}],[\"控制台\",{\"1\":{\"1541\":1}}],[\"控制台了\",{\"1\":{\"321\":1}}],[\"控制项目下所有包\",{\"1\":{\"295\":1}}],[\"控制\",{\"1\":{\"135\":1}}],[\"添加好节点\",{\"1\":{\"3739\":1}}],[\"添加开启authorization和keyfile鉴权的配置\",{\"1\":{\"3728\":1}}],[\"添加账号\",{\"0\":{\"3724\":1}}],[\"添加权限验证\",{\"1\":{\"3717\":1}}],[\"添加仲裁从节点\",{\"0\":{\"3674\":1}}],[\"添加仲裁节点可以用别的方法\",{\"1\":{\"3673\":1}}],[\"添加仲裁者以获得主要选举中的\",{\"1\":{\"3646\":1}}],[\"添加副本从节点\",{\"0\":{\"3673\":1}}],[\"添加节点时\",{\"1\":{\"3675\":1}}],[\"添加节点\",{\"0\":{\"3672\":1}}],[\"添加一个管理员账号\",{\"1\":{\"3724\":1}}],[\"添加一个字典文件\",{\"1\":{\"3487\":1}}],[\"添加一组信息\",{\"1\":{\"347\":1}}],[\"添加扩展词汇\",{\"0\":{\"3486\":1}}],[\"添加安全类配置\",{\"1\":{\"3327\":1}}],[\"添加格式化后的账号密码\",{\"1\":{\"3309\":1}}],[\"添加索引\",{\"0\":{\"3282\":1}}],[\"添加文档数据\",{\"1\":{\"3220\":1}}],[\"添加多个普通的请求对象\",{\"1\":{\"3219\":1}}],[\"添加映射信息了\",{\"1\":{\"3196\":1}}],[\"添加jar包依赖\",{\"0\":{\"2993\":1}}],[\"添加项目部署的导出方式\",{\"1\":{\"2766\":1}}],[\"添加导出方式\",{\"0\":{\"2764\":1}}],[\"添加tomcat模板\",{\"0\":{\"2753\":1}}],[\"添加配置好的tomcat模板\",{\"0\":{\"2751\":1}}],[\"添加缺失的web\",{\"1\":{\"2743\":1}}],[\"添加了两个扩展词汇\",{\"1\":{\"3487\":1}}],[\"添加了\",{\"1\":{\"2686\":1}}],[\"添加了双向链表结构\",{\"1\":{\"1913\":1}}],[\"添加事务后\",{\"0\":{\"2634\":1}}],[\"添加需要批量处理的sql语句或是参数\",{\"1\":{\"2616\":1}}],[\"添加顺序和遍历顺序并没有关联\",{\"1\":{\"1912\":1}}],[\"添加元素时\",{\"1\":{\"1892\":1}}],[\"添加过程分析\",{\"0\":{\"1891\":1}}],[\"添加成功\",{\"1\":{\"946\":1,\"1891\":2,\"2657\":1}}],[\"添加成功就返回true\",{\"1\":{\"946\":1}}],[\"添加成功^\",{\"1\":{\"647\":1}}],[\"添加另一个集合的元素\",{\"1\":{\"946\":1}}],[\"添加数据\",{\"0\":{\"1922\":1,\"1992\":1},\"1\":{\"945\":1,\"3133\":1}}],[\"添加时间偏移量\",{\"1\":{\"725\":1}}],[\"添加操作\",{\"1\":{\"693\":1}}],[\"添加失败\",{\"1\":{\"647\":1}}],[\"添加非通用操作api\",{\"1\":{\"637\":1}}],[\"添加非通用操作api接口\",{\"1\":{\"637\":1}}],[\"添加具体的拦截器\",{\"1\":{\"626\":1}}],[\"添加index\",{\"0\":{\"422\":1}}],[\"添加redis客户端类型配置\",{\"1\":{\"383\":1}}],[\"添加mybatis\",{\"0\":{\"371\":1}}],[\"添加mybatis依赖\",{\"0\":{\"361\":1}}],[\"添加依赖\",{\"0\":{\"355\":1,\"582\":1}}],[\"添加单个信息\",{\"1\":{\"347\":1}}],[\"添加\",{\"0\":{\"2573\":1,\"2686\":1},\"1\":{\"135\":1,\"2875\":1,\"2971\":1}}],[\"添加别的服务器的starter就可以替换内嵌的服务器了\",{\"1\":{\"135\":1}}],[\"添加购物车\",{\"1\":{\"49\":1,\"54\":1}}],[\"注\",{\"1\":{\"2874\":1}}],[\"注释类型声明\",{\"1\":{\"1653\":1}}],[\"注释的意义\",{\"0\":{\"1053\":1}}],[\"注释\",{\"0\":{\"1052\":1}}],[\"注释是中文的\",{\"1\":{\"622\":1}}],[\"注册业务功能\",{\"1\":{\"3006\":1}}],[\"注册监听器\",{\"0\":{\"2974\":1}}],[\"注册驱动\",{\"1\":{\"2547\":1}}],[\"注册端口\",{\"1\":{\"2186\":1}}],[\"注册成为bean\",{\"1\":{\"567\":1}}],[\"注册cartoonproperties对象\",{\"1\":{\"554\":1}}],[\"注册beandefinition对象\",{\"1\":{\"527\":1}}],[\"注册\",{\"1\":{\"505\":1}}],[\"注解配置路由\",{\"0\":{\"2817\":1}}],[\"注解定义\",{\"1\":{\"1667\":1}}],[\"注解新特性\",{\"0\":{\"1665\":1}}],[\"注解结构\",{\"0\":{\"1649\":1}}],[\"注解中定义的成员如果含有配置参数\",{\"1\":{\"1648\":1}}],[\"注解类名\",{\"1\":{\"1648\":1}}],[\"注解类的成员\",{\"1\":{\"1645\":1}}],[\"注解使用\",{\"1\":{\"1643\":1,\"1667\":1}}],[\"注解使用示例\",{\"0\":{\"509\":1}}],[\"注解名称\",{\"1\":{\"1640\":1}}],[\"注解并没有继承于任何子类\",{\"1\":{\"1638\":1,\"1656\":1}}],[\"注解是一种趋势\",{\"1\":{\"1636\":1}}],[\"注解的配置参数\",{\"1\":{\"1645\":1}}],[\"注解的分类\",{\"0\":{\"1638\":1}}],[\"注解的使用\",{\"0\":{\"1637\":1}}],[\"注解的使用目的比较简单\",{\"1\":{\"1636\":1}}],[\"注解的用途\",{\"0\":{\"1636\":1}}],[\"注解外\",{\"1\":{\"545\":1}}],[\"注解式控制\",{\"0\":{\"538\":1}}],[\"注解式bean加载控制\",{\"1\":{\"537\":1}}],[\"注解+spring配置类\",{\"0\":{\"512\":1}}],[\"注解+xml扫描\",{\"0\":{\"507\":1}}],[\"注解\",{\"0\":{\"641\":1,\"1632\":1,\"2387\":1},\"1\":{\"309\":1,\"455\":1,\"554\":1,\"1543\":1,\"1634\":1,\"1636\":1,\"2264\":1}}],[\"注解掉spring\",{\"1\":{\"134\":1}}],[\"注入是利用某些系统没有对用户输入的数据进行充分的检查\",{\"1\":{\"2559\":1}}],[\"注入mapper\",{\"1\":{\"623\":1}}],[\"注入配置读取类\",{\"1\":{\"554\":1}}],[\"注入工具类\",{\"1\":{\"471\":1}}],[\"注入es客户端\",{\"1\":{\"422\":1}}],[\"注入stringredistemplate对象\",{\"1\":{\"380\":1}}],[\"注入redistemplate\",{\"1\":{\"379\":2}}],[\"注入日志对象\",{\"1\":{\"290\":1,\"309\":1}}],[\"注入要测试的对象\",{\"1\":{\"227\":2}}],[\"注入该数据对象\",{\"1\":{\"200\":1}}],[\"注入数据对象\",{\"1\":{\"156\":1}}],[\"注入数据并使用\",{\"0\":{\"156\":1}}],[\"注入方式\",{\"1\":{\"152\":1}}],[\"注意证书路径\",{\"1\":{\"3728\":1}}],[\"注意保存里面的内容\",{\"1\":{\"3305\":1}}],[\"注意不能包含空格\",{\"1\":{\"3020\":1}}],[\"注意是\",{\"1\":{\"2945\":1}}],[\"注意是之前\",{\"1\":{\"923\":1}}],[\"注意2\",{\"1\":{\"2810\":1}}],[\"注意1\",{\"1\":{\"2810\":1}}],[\"注意修改环境变量\",{\"1\":{\"2353\":1}}],[\"注意ip和端口\",{\"1\":{\"2226\":1}}],[\"注意点\",{\"0\":{\"2045\":1}}],[\"注意点3\",{\"1\":{\"2005\":1}}],[\"注意点2\",{\"1\":{\"2004\":1}}],[\"注意点1\",{\"1\":{\"2003\":1}}],[\"注意synchronized的位置\",{\"0\":{\"1762\":1}}],[\"注意两个集合的泛型要求\",{\"1\":{\"906\":1}}],[\"注意参数类型要统一\",{\"1\":{\"899\":1}}],[\"注意参数与实体类中的变了名一致\",{\"1\":{\"473\":1}}],[\"注意包装类的数据类型应该与参数数据类型对应\",{\"1\":{\"773\":1}}],[\"注意命名\",{\"1\":{\"637\":1}}],[\"注意区分业务层和数据层\",{\"1\":{\"634\":1}}],[\"注意当前类一定要注册到bean\",{\"1\":{\"545\":1}}],[\"注意lru和lfu是不同的\",{\"1\":{\"480\":1}}],[\"注意query在org\",{\"1\":{\"404\":1}}],[\"注意仅仅是名称\",{\"1\":{\"267\":1}}],[\"注意事项\",{\"0\":{\"99\":1,\"121\":1,\"367\":1,\"638\":1,\"985\":1,\"1042\":1,\"1088\":1,\"1095\":1,\"1104\":1,\"1172\":1,\"1228\":1,\"1243\":1,\"1297\":1,\"1321\":1,\"1447\":1,\"1455\":1,\"1484\":1,\"1552\":1,\"1594\":1,\"1723\":1,\"1736\":1,\"2002\":1,\"2669\":1,\"2761\":1,\"2767\":1,\"2774\":1,\"2790\":1,\"2859\":1},\"1\":{\"3277\":1}}],[\"注意版本适配\",{\"1\":{\"95\":1}}],[\"注意\",{\"0\":{\"1046\":1,\"1108\":1,\"1281\":1,\"1662\":1,\"1977\":1,\"2891\":1,\"3588\":1,\"3591\":1},\"1\":{\"29\":1,\"103\":1,\"163\":1,\"177\":1,\"216\":1,\"230\":1,\"231\":1,\"232\":1,\"258\":1,\"274\":1,\"335\":1,\"352\":1,\"353\":1,\"393\":1,\"415\":1,\"416\":1,\"471\":1,\"477\":1,\"483\":1,\"493\":1,\"495\":1,\"665\":1,\"667\":1,\"671\":1,\"734\":1,\"775\":1,\"794\":2,\"795\":2,\"812\":1,\"827\":1,\"848\":1,\"859\":1,\"888\":1,\"891\":1,\"895\":1,\"897\":1,\"910\":1,\"915\":1,\"925\":1,\"926\":1,\"937\":1,\"960\":1,\"1000\":1,\"1009\":1,\"1027\":1,\"1058\":1,\"1076\":1,\"1117\":1,\"1148\":1,\"1175\":1,\"1208\":1,\"1226\":1,\"1277\":1,\"1278\":1,\"1344\":1,\"1362\":1,\"1392\":1,\"1426\":1,\"1443\":1,\"1643\":1,\"1668\":1,\"1718\":1,\"1765\":1,\"1772\":1,\"1773\":1,\"1775\":1,\"1783\":1,\"1799\":1,\"1840\":1,\"1848\":1,\"1902\":2,\"1912\":1,\"1958\":1,\"1964\":1,\"2045\":1,\"2106\":1,\"2126\":1,\"2127\":1,\"2137\":1,\"2310\":1,\"2481\":1,\"2487\":1,\"2608\":1,\"2703\":1,\"2717\":1,\"2735\":1,\"2743\":1,\"2745\":1,\"2753\":1,\"2758\":1,\"2794\":1,\"2802\":1,\"2868\":1,\"2875\":1,\"2920\":1,\"2937\":1,\"2947\":1,\"2948\":1,\"3071\":1,\"3262\":1,\"3268\":1,\"3298\":2,\"3565\":1,\"3611\":1,\"3623\":1,\"3631\":1,\"3660\":1,\"3661\":1,\"3715\":1,\"3737\":1,\"3740\":1,\"3756\":1,\"3757\":1}}],[\"非localhost的\",{\"1\":{\"3721\":1}}],[\"非守护进程\",{\"1\":{\"3557\":1}}],[\"非区域网\",{\"0\":{\"3334\":1}}],[\"非第一次启动的化\",{\"1\":{\"3275\":1}}],[\"非文本数据操作或安全事务处理的需求相对较少的情况\",{\"1\":{\"3098\":1}}],[\"非文本文件\",{\"1\":{\"2038\":1}}],[\"非java文件的其他文件\",{\"1\":{\"2750\":1}}],[\"非web项目\",{\"0\":{\"2732\":1}}],[\"非必须\",{\"1\":{\"2722\":1}}],[\"非运行时异常\",{\"1\":{\"2389\":1}}],[\"非public属性\",{\"1\":{\"2310\":1}}],[\"非数字字符串转不了\",{\"1\":{\"1587\":1}}],[\"非数字字符串\",{\"1\":{\"1587\":1}}],[\"非静态方法\",{\"0\":{\"2402\":1,\"2405\":1},\"1\":{\"2398\":2}}],[\"非静态方法的返回值类型\",{\"1\":{\"1969\":1}}],[\"非静态方法的参数类型\",{\"1\":{\"1969\":1}}],[\"非静态方法中\",{\"1\":{\"1483\":1}}],[\"非静态的方法\",{\"1\":{\"1528\":1}}],[\"非静态代码块内可以调用静态的属性\",{\"1\":{\"1528\":1}}],[\"非静态代码块\",{\"0\":{\"1528\":1}}],[\"非静态变量\",{\"1\":{\"1475\":1}}],[\"非静态成员内部类\",{\"1\":{\"1451\":1,\"1456\":1}}],[\"非static代码块\",{\"1\":{\"1526\":1}}],[\"非static\",{\"1\":{\"1273\":1,\"1280\":1}}],[\"非static的成员内部类中的成员不能声明为static的\",{\"1\":{\"1455\":1}}],[\"非static的\",{\"1\":{\"1261\":1}}],[\"非springboot项目热部署实现原理\",{\"0\":{\"179\":1}}],[\"非springboot核心功能\",{\"1\":{\"131\":1}}],[\"非精准详细的解析\",{\"1\":{\"1226\":1}}],[\"非零代表异常退出\",{\"1\":{\"882\":1}}],[\"非本地时间\",{\"1\":{\"725\":1}}],[\"非index\",{\"1\":{\"703\":1}}],[\"非常简单\",{\"1\":{\"3736\":1}}],[\"非常繁琐\",{\"1\":{\"2558\":1,\"2808\":1,\"2815\":1}}],[\"非常有用\",{\"1\":{\"2435\":1}}],[\"非常的冗余\",{\"1\":{\"1995\":1}}],[\"非常不便\",{\"1\":{\"1822\":1}}],[\"非常麻烦\",{\"1\":{\"177\":1,\"187\":1,\"507\":1,\"620\":1}}],[\"非常重要\",{\"1\":{\"90\":1}}],[\"ⅴ\",{\"0\":{\"131\":1,\"305\":1,\"605\":1,\"670\":1,\"867\":1,\"982\":1,\"1109\":1,\"1154\":1,\"1187\":1,\"1247\":1,\"1356\":1,\"1665\":1,\"1738\":1,\"1937\":1,\"2305\":1,\"2462\":1,\"2514\":1,\"2596\":1,\"2761\":1,\"2864\":1,\"3672\":1}}],[\"将配置导入变量\",{\"1\":{\"3689\":1}}],[\"将配置作为参数添加即可\",{\"1\":{\"256\":1}}],[\"将仲裁节点添加到副本集\",{\"1\":{\"3674\":1}}],[\"将从节点添加道副本集\",{\"1\":{\"3673\":1}}],[\"将启动的参数写入配置文件\",{\"1\":{\"3558\":1}}],[\"将创建一个新的提交点\",{\"1\":{\"3527\":1}}],[\"将创建的线程要执行的操作声明在此方法中\",{\"1\":{\"1727\":1}}],[\"将经常查询的系统功能的某些字段\",{\"1\":{\"3524\":1}}],[\"将待写入的数据先写到内存中\",{\"1\":{\"3516\":1}}],[\"将待比较元素与集合中的元素做equal\",{\"1\":{\"910\":1}}],[\"将新建的\",{\"1\":{\"3488\":1}}],[\"将词条小写\",{\"1\":{\"3466\":1,\"3467\":1}}],[\"将向协调节点报告成功\",{\"1\":{\"3407\":1}}],[\"将请求转发到主分片所在的\",{\"1\":{\"3413\":1}}],[\"将请求并行转发到\",{\"1\":{\"3407\":1}}],[\"将请求体的值存入实体类中\",{\"1\":{\"469\":1}}],[\"将分片分配给某个节点的过程\",{\"1\":{\"3371\":1}}],[\"将虚拟内存修改层262144\",{\"1\":{\"3313\":1,\"3346\":1}}],[\"将http证书压缩包移动到别的位置\",{\"1\":{\"3301\":1}}],[\"将两个证书移动到certs目录中\",{\"1\":{\"3301\":1}}],[\"将多个节点部署到一台电脑上\",{\"1\":{\"3265\":1}}],[\"将多个被监控的服务对应的监控指标信息汇总在一起\",{\"1\":{\"314\":1}}],[\"将fuzzyquerybuilder加入请求体\",{\"1\":{\"3239\":1}}],[\"将futuretask的对象作为参数传递到thread类的构造器中\",{\"1\":{\"1810\":1}}],[\"将查询当前索引下的所有文档\",{\"1\":{\"3165\":1}}],[\"将下载的压缩包解压后即可使用\",{\"1\":{\"3106\":1}}],[\"将编码后的值存入cookie中\",{\"1\":{\"3054\":1}}],[\"将编译失败\",{\"1\":{\"1088\":1}}],[\"将约束的规则定义在外部的dtd文件中\",{\"1\":{\"3026\":1}}],[\"将约束规则定义在xml文档中\",{\"1\":{\"3026\":1}}],[\"将tomcat和web项目打成jar放在一起\",{\"1\":{\"2998\":1}}],[\"将符合规范的war包放在tomcat的webapps目录下的时候\",{\"1\":{\"2997\":1}}],[\"将代码中的通用部分抽离出来\",{\"1\":{\"2987\":1}}],[\"将该方法的调用时机改为服务器启动时调用\",{\"1\":{\"2800\":1}}],[\"将该类定义为泛型类\",{\"1\":{\"1967\":1}}],[\"将来如果将表现层的技术换掉\",{\"1\":{\"3012\":1}}],[\"将来使用springmvc的时候\",{\"1\":{\"2970\":1}}],[\"将来页面发送的是get请求\",{\"1\":{\"2814\":1}}],[\"将来定义servlet类时\",{\"1\":{\"2807\":1}}],[\"将来我们需要定义servlet类实现servlet接口\",{\"1\":{\"2770\":1}}],[\"将来很长一段时间内它都会为我们服务\",{\"1\":{\"709\":1}}],[\"将服务器上所有的项目都重新部署\",{\"1\":{\"2750\":1}}],[\"将war包放置在tomcat根目录的webapps目录下\",{\"1\":{\"2995\":1}}],[\"将web工程以当前文件夹的位置关系发布到tomcat服务器上\",{\"1\":{\"2748\":1,\"2765\":1}}],[\"将web工程打成war包\",{\"1\":{\"2748\":1,\"2765\":1}}],[\"将writer转为outputstream\",{\"1\":{\"2090\":1}}],[\"将已有的项目\",{\"1\":{\"2732\":1}}],[\"将控制台改为utf8\",{\"1\":{\"2707\":1}}],[\"将不用输入端口号\",{\"1\":{\"2705\":1}}],[\"将不用内存收回\",{\"1\":{\"1016\":1}}],[\"将静态资源部署到web服务器上\",{\"1\":{\"2696\":1}}],[\"将结果集中某一列的数据存放到list中\",{\"1\":{\"2684\":1}}],[\"将结果集中的第一行数据封装到一个map里\",{\"1\":{\"2684\":1}}],[\"将结果集中的第一行数据封装到一个对应的javabean实例中\",{\"1\":{\"2684\":1}}],[\"将结果集中的每一行数据都封装到一个map里\",{\"1\":{\"2684\":2}}],[\"将结果集中的每一行数据都封装到一个对应的javabean实例中\",{\"1\":{\"2684\":1}}],[\"将会终止插入\",{\"1\":{\"3591\":1}}],[\"将会非常多\",{\"1\":{\"3524\":1}}],[\"将会有空闲的节点\",{\"1\":{\"3393\":1}}],[\"将会生成一个名字\",{\"1\":{\"2674\":1}}],[\"将会导致数据库系统中的内存泄漏\",{\"1\":{\"2662\":1}}],[\"将会被重新加载\",{\"1\":{\"308\":1}}],[\"将设置改回去\",{\"1\":{\"2632\":1}}],[\"将blob类型的字段下载下来\",{\"1\":{\"2613\":1}}],[\"将buffer中的内容读入\",{\"1\":{\"2081\":1}}],[\"将类名\",{\"1\":{\"2605\":1}}],[\"将类实例化成计算机世界中的对象\",{\"1\":{\"1252\":1}}],[\"将循环拿到的每行数据对象\",{\"1\":{\"2603\":1}}],[\"将连接对象放回连接池\",{\"1\":{\"2666\":1}}],[\"将连接方式写入配置文件让驱动加载\",{\"0\":{\"2549\":1}}],[\"将连接信息写入日志\",{\"1\":{\"2321\":1,\"2323\":1}}],[\"将1和3连在一起\",{\"1\":{\"2548\":1}}],[\"将123封装到node中\",{\"1\":{\"1873\":1}}],[\"将流转换为其他形式\",{\"1\":{\"2490\":1}}],[\"将以三年为周期发布长期支持版本\",{\"1\":{\"2351\":1}}],[\"将通用方法加入myinvocationhandler\",{\"1\":{\"2349\":1}}],[\"将抛出\",{\"1\":{\"2285\":1}}],[\"将抛出异常\",{\"1\":{\"1720\":1}}],[\"将class文件字节码内容加载到内存中\",{\"1\":{\"2274\":1}}],[\"将cookie数据写到硬盘的文件中\",{\"1\":{\"3053\":1}}],[\"将cookie对象通过响应对象response\",{\"1\":{\"3042\":1}}],[\"将comparator对象作为参数\",{\"1\":{\"1906\":1}}],[\"将coll2集合中的元素添加到集合coll\",{\"1\":{\"906\":1}}],[\"将产生ioexception\",{\"1\":{\"2241\":1}}],[\"将要发送的数据\",{\"1\":{\"2233\":1}}],[\"将要过期的数据淘汰\",{\"1\":{\"480\":1}}],[\"将path转化为file类的对象\",{\"1\":{\"2166\":1}}],[\"将p1保存的内存地址赋给了p3\",{\"1\":{\"1551\":1}}],[\"将指针调到角标为3的位置\",{\"1\":{\"2139\":1}}],[\"将指针位置后面的数据赋值一份\",{\"1\":{\"2138\":1}}],[\"将指针指到文件末尾\",{\"1\":{\"2138\":1}}],[\"将指定key\",{\"1\":{\"959\":1}}],[\"将指定值填充到数组之中\",{\"1\":{\"898\":1}}],[\"将指定\",{\"1\":{\"825\":1,\"933\":1}}],[\"将文档返回给\",{\"1\":{\"3410\":1}}],[\"将文件输入流作为blob类型插入数据表\",{\"1\":{\"2612\":1}}],[\"将文件加载为inputstream\",{\"1\":{\"2281\":1}}],[\"将文件记录指针定位到\",{\"1\":{\"2132\":1}}],[\"将文件中存储的基本数据类型变量和字符串读取到内存中\",{\"1\":{\"2127\":1}}],[\"将文本做最细粒度的拆分\",{\"1\":{\"3481\":1}}],[\"将文本文件转换成别的编码输出\",{\"1\":{\"2091\":1}}],[\"将文本标记为代码样式文本\",{\"1\":{\"1058\":1}}],[\"将内存中的数据写入到磁盘\",{\"1\":{\"3449\":1}}],[\"将内存中的数据写入文件\",{\"1\":{\"2126\":1}}],[\"将内存中的java对象保存到磁盘中或通过网络传输出去\",{\"1\":{\"2143\":1}}],[\"将内存中的字符串\",{\"1\":{\"2126\":1}}],[\"将内容初始化为指定字符串内容\",{\"1\":{\"689\":1}}],[\"将上述的方法的read改为相应的write即可\",{\"1\":{\"2125\":1}}],[\"将json数据作为请求体与请求对象关联\",{\"1\":{\"3214\":1}}],[\"将jar包加载到扩展库\",{\"1\":{\"2538\":1}}],[\"将java类的二进制代码合并到jvm的运行状态之中的过程\",{\"1\":{\"2275\":1}}],[\"将java的基本数据类型和string数据写出到文件中\",{\"1\":{\"2122\":1}}],[\"将jdk\",{\"1\":{\"1029\":1}}],[\"将inputstream转为reader\",{\"1\":{\"2090\":1}}],[\"将程序\",{\"1\":{\"2022\":1}}],[\"将程序执行中发生的不正常情况称为\",{\"1\":{\"1558\":1}}],[\"将被删除并开始一个新的\",{\"1\":{\"3527\":1}}],[\"将被更少的分片所共享\",{\"1\":{\"3391\":1}}],[\"将被代理类对象\",{\"1\":{\"2345\":1}}],[\"将被代理类要执行的方法a的功能就声明在invoke\",{\"1\":{\"2343\":1}}],[\"将被擦除\",{\"1\":{\"1969\":1}}],[\"将被wait的线程重新激活\",{\"1\":{\"1804\":1}}],[\"将线程池接口类型转为接口的子类类型\",{\"1\":{\"1817\":1}}],[\"将线程要执行的逻辑声明在run\",{\"1\":{\"1747\":1}}],[\"将需要同步的数据放入synchronized包裹的方法中\",{\"1\":{\"1771\":1}}],[\"将同步方法设置为静态方法\",{\"1\":{\"1767\":1}}],[\"将同步监视器也设置成static类\",{\"1\":{\"1763\":1}}],[\"将成员变量设置成static\",{\"1\":{\"1763\":1}}],[\"将进入线程队列等待cpu时间片\",{\"1\":{\"1749\":1}}],[\"将runnable接口的实例\",{\"1\":{\"1741\":1}}],[\"将此线程需要执行的操作声明在call\",{\"1\":{\"1809\":1,\"1810\":1}}],[\"将此线程执行的操作声明在run\",{\"1\":{\"1719\":1}}],[\"将此对象作为参数传递到thread类的构造器中\",{\"1\":{\"1739\":1,\"1740\":1}}],[\"将此时父类的方法称为虚拟方法\",{\"1\":{\"1404\":1}}],[\"将既长又复杂的进程分为多个线程\",{\"1\":{\"1693\":1}}],[\"将具有\",{\"1\":{\"1664\":1}}],[\"将异常抛到代码的调用处\",{\"1\":{\"1598\":1}}],[\"将异常信息加入异常日志\",{\"1\":{\"645\":1}}],[\"将可能出现异常的代码放在try语句块中\",{\"1\":{\"1585\":1}}],[\"将可能抛出异常\",{\"1\":{\"674\":1}}],[\"将整个程序分为三个层次\",{\"1\":{\"1537\":1}}],[\"将整个idea全部改为utf\",{\"1\":{\"575\":1}}],[\"将这些词条统一化为标准格式以提高它们的\",{\"1\":{\"3462\":1}}],[\"将这些信息传递作为参数给代理对象的invoke方法\",{\"1\":{\"2333\":1}}],[\"将这些属性设置为类属性\",{\"1\":{\"1472\":1}}],[\"将这些内容抽取到单独一个类中\",{\"1\":{\"1359\":1}}],[\"将obj的object类型向下转型为person以便对比属性\",{\"1\":{\"1428\":1}}],[\"将子类对象赋值给父类数据类型的标识符\",{\"1\":{\"1408\":1}}],[\"将功能相近的类划分到同一个包中\",{\"1\":{\"1335\":1}}],[\"将功能封装进对象\",{\"1\":{\"1250\":1}}],[\"将年龄设置成了负数\",{\"1\":{\"1303\":1}}],[\"将array1保存的数组的地址值赋给了array2\",{\"1\":{\"1213\":1}}],[\"将args参数传递给了里面的run方法\",{\"1\":{\"259\":1}}],[\"将容量大的数据类型转换为容量小的数据类型\",{\"1\":{\"1117\":1}}],[\"将世界所有字符都纳入其中\",{\"1\":{\"1103\":1}}],[\"将集合转为数组\",{\"1\":{\"916\":1}}],[\"将当前集合与参数集合做差集\",{\"1\":{\"913\":1}}],[\"将元素添加到集合中\",{\"1\":{\"905\":1}}],[\"将mc作为参数传入给sort方法\",{\"1\":{\"893\":1}}],[\"将数据储存到es\",{\"1\":{\"3113\":1}}],[\"将数据存储在服务端\",{\"1\":{\"3077\":1}}],[\"将数据保存在服务器端的对象中\",{\"1\":{\"3060\":1}}],[\"将数据保存到客户端\",{\"1\":{\"3038\":1}}],[\"将数据交给视图进行展示\",{\"1\":{\"3002\":1}}],[\"将数据按要求转换为另一种形式\",{\"1\":{\"2684\":1}}],[\"将数据库连接关闭\",{\"1\":{\"2635\":1}}],[\"将数据\",{\"1\":{\"2205\":1}}],[\"将数据读入\",{\"1\":{\"2084\":1}}],[\"将数据响应给前端\",{\"1\":{\"639\":1}}],[\"将数组中的数据copy到list中\",{\"1\":{\"1981\":1}}],[\"将数组转为字符串形式\",{\"1\":{\"890\":1}}],[\"将\",{\"1\":{\"825\":1,\"1038\":1,\"2168\":1,\"3102\":1}}],[\"将写的内容刷入文件\",{\"1\":{\"820\":1}}],[\"将字符流以字节流的方式写出到文件中\",{\"1\":{\"2105\":1}}],[\"将字符写入指定的文件\",{\"1\":{\"824\":1}}],[\"将字符读入数组\",{\"1\":{\"814\":1}}],[\"将字符的unicode值转为字符\",{\"1\":{\"813\":1}}],[\"将无法通过该字段进行查询\",{\"1\":{\"3200\":1}}],[\"将无法反序列化\",{\"1\":{\"2158\":1}}],[\"将无法进行比较\",{\"1\":{\"910\":1}}],[\"将无法创建\",{\"1\":{\"804\":1}}],[\"将无法执行测试类\",{\"1\":{\"229\":1}}],[\"将基本数据类型输出到一个文件\",{\"0\":{\"2121\":1}}],[\"将基本数据类型\",{\"1\":{\"775\":1}}],[\"将number对象的值转换为xxx数据类型并返回\",{\"1\":{\"772\":1}}],[\"将角度转为弧度\",{\"1\":{\"770\":1}}],[\"将参数集合中的所有key\",{\"1\":{\"960\":1}}],[\"将参数src集合的内容复制到参数dest集合中\",{\"1\":{\"937\":1}}],[\"将参数转为角度\",{\"1\":{\"770\":1}}],[\"将参数字符串连接到此字符串的结尾\",{\"1\":{\"668\":1}}],[\"将日期数据转为string\",{\"1\":{\"732\":1}}],[\"将session文件转化为内存中的session对象即可\",{\"1\":{\"3071\":1}}],[\"将session对象系列化到硬盘上\",{\"1\":{\"3071\":1}}],[\"将servlet的创建放到服务器启动的时候来创建\",{\"1\":{\"2794\":1}}],[\"将source\",{\"1\":{\"2790\":1}}],[\"将sql在循环外面创建\",{\"1\":{\"2621\":1}}],[\"将stream代表的集合中的每一个元素作为参数在方法中进行操作\",{\"1\":{\"2477\":1}}],[\"将stream中的每个元素\",{\"1\":{\"2467\":1}}],[\"将string数值字符串转为基本数据类型\",{\"1\":{\"776\":1}}],[\"将string转为byte\",{\"1\":{\"674\":1}}],[\"将string转为char\",{\"1\":{\"673\":1}}],[\"将s2作为锁\",{\"1\":{\"1796\":1}}],[\"将s1作为锁\",{\"1\":{\"1796\":1}}],[\"将syschronized声明在if里面\",{\"1\":{\"1770\":1}}],[\"将synchronize声明在getinstance处\",{\"1\":{\"1769\":1}}],[\"将springboot打包好的jar包上传道\",{\"1\":{\"252\":1}}],[\"将返回\",{\"1\":{\"657\":1}}],[\"将方法的返回值加入ioc容器\",{\"1\":{\"626\":1}}],[\"将所有元素都转为大写\",{\"1\":{\"2463\":1}}],[\"将所有字符都纳入其中\",{\"1\":{\"1103\":1}}],[\"将所有字符转为大写\",{\"1\":{\"666\":1}}],[\"将所有字符转为小写\",{\"1\":{\"665\":1}}],[\"将所有方法的返回值类型都修改为r\",{\"1\":{\"647\":1}}],[\"将所有操作的操作结果数据格式统一起来\",{\"1\":{\"646\":1}}],[\"将所有的数据都删除\",{\"1\":{\"3600\":1}}],[\"将所有的配置根据功能对配置文件中的信息进行拆分\",{\"1\":{\"277\":1}}],[\"将所有的bean纳入ioc管理\",{\"1\":{\"130\":1}}],[\"将所需的所有工具类和插件搭建\",{\"1\":{\"586\":1}}],[\"将一段文本\",{\"1\":{\"3462\":1}}],[\"将一段话进行匹配是不精准也艰难的\",{\"1\":{\"3461\":1}}],[\"将一句话\",{\"1\":{\"3459\":1}}],[\"将一些方法也设置成私有的\",{\"1\":{\"1306\":1}}],[\"将一个变量的值赋值给另一个变量时\",{\"1\":{\"1554\":1}}],[\"将一个循环结构a声明在另一个循环结构b的循环体中\",{\"1\":{\"1199\":1}}],[\"将一个类设置为bean\",{\"1\":{\"504\":1}}],[\"将一种字符集编码的字符转换成其他字符集编码的字符\",{\"1\":{\"1103\":1}}],[\"将一组数据封装到一个对象中\",{\"1\":{\"200\":1}}],[\"将一组数据封装到一个java对象中\",{\"1\":{\"153\":1}}],[\"将永远返回null\",{\"1\":{\"471\":1}}],[\"将验证码返回的同时进行缓存\",{\"1\":{\"469\":1}}],[\"将交换机与队列绑定\",{\"1\":{\"444\":1}}],[\"将elasticsearchclient对象配置后\",{\"1\":{\"418\":1}}],[\"将其打成war包部署到tomcat等容器中\",{\"1\":{\"2995\":1}}],[\"将其绑定到指定的本地地址\",{\"1\":{\"2233\":1}}],[\"将其延后成运行时异常\",{\"1\":{\"1595\":1}}],[\"将其编译成jvm可识别的二进制文件\",{\"1\":{\"1040\":1}}],[\"将其他集合的元素添加到当前集合\",{\"1\":{\"906\":1}}],[\"将其他配置项的值作为自己值的一部分\",{\"1\":{\"149\":1}}],[\"将其放到resource目录下\",{\"1\":{\"417\":1}}],[\"将实体类的数据插入绑定的集合\",{\"1\":{\"403\":1}}],[\"将打印出logback内部日志信息\",{\"1\":{\"308\":1}}],[\"将执行main\",{\"1\":{\"246\":1}}],[\"将默认生成的spring\",{\"1\":{\"241\":1}}],[\"将第三方类加入ioc\",{\"0\":{\"202\":1}}],[\"将项目打成一个war包\",{\"1\":{\"2714\":1}}],[\"将项目部署到线上环境\",{\"1\":{\"38\":1}}],[\"将项目的功能模块开发完毕\",{\"1\":{\"37\":1}}],[\"扫描仪\",{\"1\":{\"1505\":1}}],[\"扫描引导类所在包\",{\"1\":{\"130\":1}}],[\"扫描的包是引导类所在的包\",{\"1\":{\"129\":1}}],[\"扫描的包\",{\"1\":{\"129\":1}}],[\"扫描bean\",{\"0\":{\"511\":1},\"1\":{\"129\":1}}],[\"开源项目\",{\"0\":{\"3520\":1}}],[\"开源的\",{\"1\":{\"3089\":1}}],[\"开源的数据库连接池技术\",{\"0\":{\"2668\":1}}],[\"开放其他节点的访问\",{\"1\":{\"3332\":1}}],[\"开销小\",{\"1\":{\"2205\":1}}],[\"开始网络数据的发送和接收\",{\"1\":{\"2221\":1}}],[\"开始支持\",{\"1\":{\"1638\":3}}],[\"开始\",{\"1\":{\"1634\":1,\"2569\":1,\"2570\":1,\"3182\":1,\"3241\":1}}],[\"开始读取\",{\"1\":{\"1592\":1}}],[\"开始的\",{\"1\":{\"825\":1}}],[\"开始截取的字符串索引位置\",{\"1\":{\"669\":1}}],[\"开始比较\",{\"1\":{\"662\":1}}],[\"开始进行\",{\"1\":{\"492\":1}}],[\"开箱即用\",{\"1\":{\"465\":1}}],[\"开头的键是保留的\",{\"1\":{\"3593\":1}}],[\"开头的就是私有址址\",{\"1\":{\"2182\":1}}],[\"开头的注释也会被忽略\",{\"1\":{\"997\":1}}],[\"开头的文件就是隐藏文件\",{\"1\":{\"801\":1}}],[\"开头\",{\"1\":{\"340\":1,\"3581\":1}}],[\"开关日志\",{\"1\":{\"335\":1}}],[\"开启授权认证\",{\"1\":{\"3717\":1}}],[\"开启认证方式运行\",{\"1\":{\"3728\":1}}],[\"开启认证\",{\"0\":{\"3716\":1}}],[\"开启节点间的ssl通信\",{\"1\":{\"3337\":1}}],[\"开启https\",{\"1\":{\"3337\":1}}],[\"开启安全认证\",{\"1\":{\"3693\":1}}],[\"开启安全配置功能\",{\"1\":{\"3328\":1}}],[\"开启安全模块\",{\"0\":{\"3307\":1},\"1\":{\"3304\":1,\"3337\":1}}],[\"开启集群节点间的加密和相互认证功能\",{\"1\":{\"3307\":1,\"3327\":1}}],[\"开启ssl验证\",{\"1\":{\"3304\":1,\"3307\":1,\"3327\":1}}],[\"开启高亮查询\",{\"1\":{\"3193\":1}}],[\"开启事务\",{\"1\":{\"2635\":1}}],[\"开启批处理\",{\"0\":{\"2623\":1}}],[\"开启流\",{\"0\":{\"2060\":1},\"1\":{\"2051\":1}}],[\"开启输入流\",{\"1\":{\"2048\":1}}],[\"开启一个子线程\",{\"1\":{\"1725\":1}}],[\"开启子线程必须使用start\",{\"1\":{\"1724\":1}}],[\"开启线程还是需要掉用thread类的start方法\",{\"1\":{\"1740\":1}}],[\"开启线程\",{\"0\":{\"1718\":1},\"1\":{\"1739\":1,\"1810\":1}}],[\"开启dotall模式\",{\"1\":{\"997\":1}}],[\"开启多行模式\",{\"1\":{\"997\":1}}],[\"开启热部署\",{\"0\":{\"577\":1},\"1\":{\"612\":1}}],[\"开启定时任务功能\",{\"0\":{\"498\":1},\"1\":{\"498\":1}}],[\"开启缓存功能\",{\"1\":{\"467\":1}}],[\"开启info信息的显示\",{\"1\":{\"345\":1}}],[\"开启ioc容器\",{\"1\":{\"129\":1}}],[\"开启信息接口\",{\"1\":{\"315\":1}}],[\"开启\",{\"1\":{\"294\":1}}],[\"开启对当前bean的属性注入校验\",{\"1\":{\"219\":1,\"220\":1}}],[\"开发资源\",{\"0\":{\"3521\":1}}],[\"开发网络应用程序早已被广泛的采用\",{\"1\":{\"2209\":1}}],[\"开发过程中的语法错误和逻辑错误不是异常\",{\"1\":{\"1558\":1}}],[\"开发过程中会用到mvc前后的分离结构\",{\"1\":{\"50\":1}}],[\"开发工具和部署工具可以通过这些补充信息进行验证或者进行部署\",{\"1\":{\"1635\":1}}],[\"开发工具集\",{\"1\":{\"1026\":1}}],[\"开发工具包\",{\"1\":{\"1025\":1}}],[\"开发者唯一要做的\",{\"1\":{\"3746\":1}}],[\"开发者不用进行手动部署\",{\"1\":{\"3366\":1}}],[\"开发者\",{\"1\":{\"1015\":1}}],[\"开发者可以根据自己的需要选择对应的校验框架\",{\"1\":{\"218\":1}}],[\"开发springboot项目的一些通用操作\",{\"1\":{\"572\":1}}],[\"开发便利\",{\"1\":{\"504\":1}}],[\"开发时\",{\"1\":{\"2801\":1}}],[\"开发时的项目结构\",{\"0\":{\"2720\":1}}],[\"开发时不会用\",{\"1\":{\"1876\":1}}],[\"开发时候使用debug\",{\"1\":{\"293\":1}}],[\"开发时是需要启动springboot的\",{\"1\":{\"174\":1}}],[\"开发人员使用\",{\"1\":{\"269\":1}}],[\"开发中和生产中都不会使用windows环境\",{\"1\":{\"3262\":1}}],[\"开发中选择它\",{\"1\":{\"2560\":1}}],[\"开发中访问数据库的方式选择\",{\"0\":{\"2560\":1}}],[\"开发中try\",{\"0\":{\"1603\":1}}],[\"开发中代码块的作用\",{\"0\":{\"1529\":1}}],[\"开发中的项目\",{\"0\":{\"2726\":1}}],[\"开发中的做法\",{\"0\":{\"1312\":1}}],[\"开发中的选择\",{\"0\":{\"1146\":1,\"1745\":1}}],[\"开发中较少使用\",{\"1\":{\"1190\":1}}],[\"开发中\",{\"1\":{\"959\":1,\"1153\":1,\"1494\":1,\"1595\":1,\"1745\":1,\"1812\":1,\"2524\":1}}],[\"开发中该字段一般采用自动生成的\",{\"1\":{\"396\":1}}],[\"开发中使用java8以上版本\",{\"1\":{\"1017\":1}}],[\"开发中使用的配置文件与项目上线后的配置文件是有一定区别的\",{\"1\":{\"261\":1}}],[\"开发中使用临时属性\",{\"0\":{\"258\":1}}],[\"开发中工具中有一组配置\",{\"1\":{\"192\":1}}],[\"开发部门使用git将项目上传道版本服务器\",{\"1\":{\"250\":1}}],[\"开发阶段\",{\"1\":{\"177\":1}}],[\"开发与测试\",{\"0\":{\"173\":1}}],[\"开发一个控制器类\",{\"1\":{\"109\":1}}],[\"开发环境搭建\",{\"0\":{\"1022\":1}}],[\"开发环境\",{\"0\":{\"36\":1},\"1\":{\"35\":1,\"269\":1,\"308\":1,\"586\":1}}],[\"=pagecontext\",{\"1\":{\"2920\":2}}],[\"=1\",{\"1\":{\"2559\":1,\"2638\":1}}],[\"=容量\",{\"1\":{\"1928\":1}}],[\"=⑤\",{\"1\":{\"1274\":1}}],[\"=参数\",{\"1\":{\"785\":1}}],[\"==>进一步更精简模式\",{\"1\":{\"2371\":1}}],[\"==>\",{\"1\":{\"1999\":1}}],[\"==和equals\",{\"0\":{\"1429\":1}}],[\"=================\",{\"1\":{\"2653\":3,\"3355\":1}}],[\"===================\",{\"1\":{\"612\":1}}],[\"======================\",{\"1\":{\"2653\":1}}],[\"=======================\",{\"1\":{\"612\":2,\"699\":1}}],[\"=========================\",{\"1\":{\"612\":1,\"651\":1,\"655\":1,\"2653\":1}}],[\"===========================\",{\"1\":{\"2653\":1}}],[\"==============================\",{\"1\":{\"909\":1,\"2653\":1}}],[\"================================\",{\"1\":{\"724\":1,\"948\":1}}],[\"====================================\",{\"1\":{\"908\":1,\"917\":1,\"931\":1,\"2500\":1}}],[\"======================================\",{\"1\":{\"964\":1,\"970\":1,\"2570\":1}}],[\"=======================================\",{\"1\":{\"945\":1,\"2804\":1}}],[\"========================================\",{\"1\":{\"703\":1,\"717\":1,\"913\":1,\"930\":1}}],[\"============================================\",{\"1\":{\"1905\":1}}],[\"=============================================\",{\"1\":{\"911\":1,\"2850\":1}}],[\"===================================================\",{\"1\":{\"2095\":1,\"2096\":1}}],[\"========================================================\",{\"1\":{\"2900\":1}}],[\"============================================================\",{\"1\":{\"971\":1}}],[\"====================================================================\",{\"1\":{\"2238\":1}}],[\"======================================================================\",{\"1\":{\"884\":1}}],[\"==================================================================\",{\"1\":{\"2192\":1}}],[\"================================================================\",{\"1\":{\"998\":1,\"1000\":1}}],[\"=============================================================\",{\"1\":{\"951\":1,\"969\":1}}],[\"===========================================================\",{\"1\":{\"946\":1,\"968\":1,\"2193\":1}}],[\"==========================================================\",{\"1\":{\"656\":1,\"657\":1,\"661\":1,\"662\":1,\"663\":1,\"665\":1,\"666\":1,\"667\":1,\"668\":1,\"669\":1,\"671\":1,\"672\":1,\"673\":1,\"674\":1}}],[\"=========================================================\",{\"1\":{\"612\":10,\"905\":1,\"906\":1,\"910\":1,\"912\":1,\"914\":1,\"932\":1,\"934\":1,\"935\":1,\"937\":1,\"938\":1,\"939\":1,\"947\":1,\"950\":1,\"960\":1}}],[\"=======================================================\",{\"1\":{\"990\":1,\"2801\":1}}],[\"======================================================\",{\"1\":{\"989\":1,\"2567\":1}}],[\"=====================================================\",{\"1\":{\"918\":1,\"1001\":1}}],[\"=================================================\",{\"1\":{\"959\":1,\"2194\":1,\"2195\":1,\"2196\":1,\"2371\":1,\"2377\":1}}],[\"================================================\",{\"1\":{\"952\":1,\"2444\":1,\"2445\":1,\"2448\":1,\"2450\":1,\"2451\":1}}],[\"===============================================\",{\"1\":{\"936\":1}}],[\"==============================================\",{\"1\":{\"718\":1}}],[\"===========================================\",{\"1\":{\"996\":1,\"2446\":1}}],[\"==========================================\",{\"1\":{\"727\":1,\"907\":1,\"933\":1,\"961\":1,\"2369\":1,\"2458\":1,\"2459\":1,\"2460\":1,\"2461\":1,\"2463\":1,\"2474\":1,\"2475\":1}}],[\"=========================================\",{\"1\":{\"700\":1,\"704\":1,\"965\":1,\"999\":1}}],[\"=====================================\",{\"1\":{\"725\":1,\"726\":1,\"919\":1,\"924\":1,\"925\":1,\"926\":1,\"2502\":1,\"2504\":1,\"2505\":1,\"2507\":1,\"2508\":1}}],[\"===================================\",{\"1\":{\"659\":1,\"660\":1,\"963\":1,\"1125\":1}}],[\"==================================\",{\"1\":{\"652\":1,\"949\":1,\"991\":1,\"2800\":1}}],[\"=================================\",{\"1\":{\"549\":1,\"653\":1,\"915\":1,\"962\":1,\"967\":1}}],[\"===============================\",{\"1\":{\"702\":1,\"966\":1}}],[\"============================\",{\"1\":{\"701\":1,\"2803\":1}}],[\"==========================\",{\"1\":{\"612\":1}}],[\"========================\",{\"1\":{\"612\":2,\"2802\":1}}],[\"====================\",{\"1\":{\"612\":3,\"3355\":1}}],[\"==============\",{\"1\":{\"2653\":3}}],[\"============通用方法二============\",{\"1\":{\"2349\":1}}],[\"============通用方法一===========\",{\"1\":{\"2349\":1}}],[\"=====\",{\"1\":{\"1935\":2}}],[\"===\",{\"1\":{\"1426\":1}}],[\"==的用法\",{\"0\":{\"1426\":1}}],[\"==反码+1\",{\"1\":{\"1121\":1}}],[\"==\",{\"0\":{\"1143\":1,\"1425\":1},\"1\":{\"739\":1,\"746\":1,\"749\":1,\"785\":1,\"908\":1,\"910\":1,\"911\":2,\"912\":1,\"913\":2,\"914\":2,\"924\":1,\"925\":1,\"926\":1,\"1133\":1,\"1148\":1,\"1157\":1,\"1162\":1,\"1181\":1,\"1184\":1,\"1189\":1,\"1198\":1,\"1204\":2,\"1283\":1,\"1408\":1,\"1426\":7,\"1427\":1,\"1428\":3,\"1429\":1,\"1430\":2,\"1488\":1,\"1489\":1,\"1720\":2,\"1729\":3,\"1769\":4,\"2121\":1,\"2296\":4,\"2624\":1,\"2625\":1}}],[\"=null\",{\"1\":{\"554\":2,\"827\":1}}],[\"=\",{\"0\":{\"1548\":1,\"1549\":1,\"1550\":1,\"1551\":2},\"1\":{\"128\":2,\"155\":1,\"200\":1,\"202\":1,\"204\":2,\"208\":1,\"211\":1,\"212\":2,\"215\":1,\"216\":1,\"219\":1,\"220\":5,\"229\":1,\"259\":2,\"288\":1,\"347\":1,\"350\":1,\"365\":1,\"379\":4,\"380\":2,\"403\":1,\"404\":2,\"406\":3,\"407\":3,\"408\":1,\"409\":1,\"410\":2,\"418\":14,\"419\":1,\"422\":1,\"423\":1,\"424\":1,\"425\":1,\"428\":2,\"429\":2,\"430\":1,\"431\":1,\"432\":1,\"444\":2,\"445\":1,\"447\":2,\"452\":1,\"455\":1,\"471\":2,\"472\":1,\"493\":2,\"499\":1,\"501\":1,\"510\":1,\"514\":1,\"520\":1,\"521\":1,\"525\":1,\"527\":1,\"530\":1,\"536\":2,\"540\":1,\"554\":3,\"555\":2,\"563\":5,\"568\":5,\"623\":2,\"626\":1,\"627\":1,\"628\":1,\"630\":1,\"631\":1,\"632\":2,\"633\":4,\"636\":3,\"646\":7,\"647\":4,\"649\":2,\"651\":1,\"652\":6,\"653\":2,\"655\":1,\"656\":1,\"657\":1,\"659\":1,\"660\":2,\"661\":1,\"662\":1,\"663\":1,\"665\":2,\"666\":2,\"667\":1,\"668\":2,\"669\":3,\"671\":2,\"672\":2,\"673\":4,\"674\":6,\"677\":1,\"678\":1,\"679\":1,\"680\":1,\"681\":1,\"682\":2,\"688\":2,\"689\":3,\"692\":4,\"693\":4,\"699\":3,\"700\":2,\"701\":1,\"702\":1,\"703\":1,\"704\":1,\"717\":3,\"718\":3,\"719\":9,\"720\":9,\"721\":9,\"722\":9,\"724\":1,\"725\":2,\"726\":2,\"727\":2,\"731\":3,\"732\":3,\"733\":3,\"734\":5,\"735\":1,\"736\":3,\"737\":3,\"739\":1,\"746\":9,\"749\":2,\"750\":3,\"751\":6,\"756\":3,\"760\":1,\"761\":2,\"762\":2,\"763\":2,\"764\":4,\"765\":3,\"766\":2,\"767\":2,\"768\":2,\"769\":4,\"772\":2,\"773\":2,\"774\":3,\"775\":4,\"776\":2,\"777\":1,\"778\":7,\"779\":3,\"780\":3,\"781\":3,\"782\":3,\"783\":3,\"784\":9,\"785\":3,\"786\":3,\"788\":2,\"789\":2,\"790\":2,\"791\":2,\"792\":2,\"793\":2,\"794\":2,\"795\":2,\"797\":2,\"798\":2,\"799\":2,\"800\":2,\"801\":2,\"803\":2,\"804\":2,\"805\":2,\"807\":2,\"810\":6,\"812\":6,\"813\":7,\"814\":9,\"817\":1,\"819\":2,\"822\":1,\"823\":1,\"824\":2,\"825\":1,\"826\":1,\"827\":2,\"829\":3,\"834\":1,\"835\":2,\"836\":1,\"837\":2,\"838\":1,\"839\":2,\"840\":2,\"841\":2,\"842\":1,\"843\":2,\"844\":2,\"845\":2,\"846\":1,\"848\":2,\"849\":2,\"850\":4,\"852\":2,\"853\":2,\"854\":2,\"855\":1,\"856\":2,\"857\":2,\"858\":2,\"859\":2,\"861\":1,\"862\":1,\"863\":1,\"864\":4,\"865\":3,\"868\":3,\"869\":1,\"870\":1,\"871\":1,\"872\":2,\"873\":1,\"874\":3,\"877\":3,\"881\":1,\"884\":7,\"886\":1,\"887\":2,\"888\":2,\"889\":1,\"890\":1,\"892\":1,\"893\":2,\"894\":3,\"895\":2,\"896\":3,\"897\":2,\"898\":1,\"899\":1,\"905\":2,\"906\":2,\"907\":1,\"909\":1,\"910\":1,\"911\":1,\"912\":1,\"913\":1,\"914\":1,\"917\":1,\"918\":1,\"919\":1,\"924\":2,\"925\":2,\"926\":2,\"930\":1,\"931\":1,\"932\":1,\"933\":1,\"934\":2,\"935\":2,\"936\":2,\"937\":2,\"938\":1,\"939\":2,\"944\":1,\"945\":1,\"946\":3,\"947\":3,\"948\":2,\"949\":2,\"950\":3,\"951\":2,\"952\":2,\"960\":2,\"961\":2,\"963\":2,\"964\":2,\"965\":2,\"966\":1,\"967\":2,\"968\":1,\"969\":2,\"970\":1,\"971\":4,\"987\":4,\"989\":3,\"990\":3,\"991\":3,\"992\":2,\"996\":2,\"998\":5,\"999\":2,\"1000\":4,\"1001\":4,\"1007\":1,\"1008\":2,\"1009\":2,\"1026\":2,\"1059\":3,\"1070\":2,\"1071\":2,\"1089\":4,\"1096\":2,\"1101\":1,\"1102\":4,\"1107\":2,\"1112\":3,\"1114\":5,\"1115\":4,\"1116\":3,\"1117\":7,\"1121\":6,\"1122\":3,\"1124\":2,\"1125\":4,\"1133\":3,\"1134\":3,\"1135\":2,\"1139\":6,\"1141\":6,\"1143\":4,\"1144\":6,\"1145\":3,\"1148\":1,\"1149\":1,\"1161\":4,\"1162\":3,\"1181\":2,\"1184\":1,\"1185\":1,\"1186\":4,\"1189\":3,\"1198\":2,\"1202\":2,\"1203\":3,\"1204\":9,\"1213\":1,\"1214\":2,\"1218\":3,\"1219\":4,\"1220\":2,\"1222\":1,\"1232\":3,\"1233\":1,\"1234\":1,\"1236\":3,\"1237\":4,\"1238\":4,\"1239\":1,\"1240\":2,\"1245\":1,\"1246\":5,\"1255\":2,\"1258\":1,\"1259\":5,\"1262\":3,\"1266\":3,\"1267\":3,\"1270\":2,\"1272\":1,\"1280\":1,\"1282\":3,\"1283\":2,\"1292\":6,\"1293\":5,\"1296\":1,\"1302\":2,\"1304\":4,\"1315\":1,\"1316\":3,\"1330\":2,\"1343\":1,\"1352\":3,\"1353\":1,\"1354\":1,\"1368\":2,\"1376\":2,\"1381\":1,\"1384\":1,\"1395\":2,\"1401\":1,\"1403\":2,\"1404\":1,\"1408\":10,\"1411\":3,\"1413\":2,\"1414\":2,\"1415\":3,\"1416\":2,\"1418\":2,\"1419\":2,\"1420\":3,\"1426\":9,\"1427\":4,\"1428\":4,\"1430\":4,\"1433\":2,\"1440\":8,\"1442\":4,\"1443\":3,\"1445\":6,\"1446\":4,\"1456\":3,\"1457\":1,\"1466\":1,\"1475\":4,\"1478\":1,\"1481\":1,\"1488\":3,\"1489\":2,\"1499\":2,\"1507\":2,\"1512\":4,\"1526\":4,\"1555\":3,\"1556\":3,\"1560\":1,\"1567\":1,\"1575\":3,\"1577\":1,\"1578\":1,\"1579\":2,\"1580\":3,\"1581\":2,\"1582\":2,\"1583\":5,\"1587\":2,\"1591\":1,\"1592\":7,\"1600\":5,\"1609\":2,\"1612\":1,\"1621\":6,\"1622\":1,\"1630\":1,\"1631\":1,\"1636\":1,\"1671\":2,\"1680\":7,\"1720\":4,\"1728\":1,\"1729\":3,\"1737\":3,\"1740\":5,\"1757\":4,\"1760\":6,\"1763\":2,\"1768\":6,\"1769\":3,\"1780\":1,\"1784\":6,\"1795\":2,\"1804\":4,\"1810\":5,\"1817\":2,\"1831\":1,\"1842\":2,\"1848\":1,\"1851\":1,\"1852\":1,\"1854\":4,\"1855\":3,\"1865\":1,\"1866\":1,\"1868\":1,\"1869\":1,\"1872\":1,\"1874\":3,\"1902\":2,\"1905\":4,\"1906\":4,\"1910\":1,\"1921\":1,\"1931\":1,\"1935\":9,\"1936\":3,\"1940\":4,\"1955\":2,\"1957\":4,\"1958\":6,\"1964\":2,\"1967\":4,\"1968\":2,\"1969\":7,\"1971\":1,\"1972\":1,\"1973\":1,\"1974\":1,\"1981\":1,\"1985\":3,\"1986\":5,\"1991\":6,\"1993\":4,\"1995\":5,\"1996\":5,\"2001\":11,\"2005\":1,\"2015\":2,\"2016\":1,\"2048\":3,\"2049\":1,\"2052\":7,\"2053\":8,\"2055\":1,\"2056\":2,\"2060\":3,\"2064\":3,\"2065\":11,\"2069\":6,\"2071\":11,\"2076\":2,\"2077\":1,\"2078\":5,\"2079\":6,\"2082\":7,\"2084\":14,\"2086\":4,\"2095\":2,\"2096\":2,\"2099\":3,\"2101\":4,\"2106\":7,\"2118\":6,\"2121\":6,\"2126\":2,\"2127\":8,\"2136\":5,\"2139\":1,\"2146\":4,\"2148\":2,\"2151\":2,\"2152\":4,\"2155\":1,\"2156\":2,\"2157\":4,\"2158\":1,\"2164\":2,\"2192\":1,\"2193\":2,\"2194\":2,\"2195\":2,\"2196\":2,\"2220\":2,\"2225\":6,\"2231\":5,\"2232\":6,\"2238\":4,\"2241\":2,\"2252\":7,\"2253\":1,\"2255\":4,\"2256\":2,\"2257\":5,\"2258\":6,\"2264\":3,\"2266\":1,\"2267\":2,\"2268\":1,\"2269\":2,\"2280\":4,\"2282\":9,\"2285\":2,\"2286\":4,\"2289\":2,\"2291\":1,\"2293\":4,\"2295\":3,\"2296\":7,\"2298\":3,\"2299\":2,\"2300\":2,\"2301\":4,\"2302\":3,\"2303\":2,\"2304\":2,\"2306\":3,\"2311\":7,\"2315\":3,\"2328\":1,\"2330\":2,\"2342\":1,\"2343\":2,\"2344\":3,\"2345\":3,\"2349\":2,\"2362\":1,\"2368\":1,\"2369\":2,\"2370\":1,\"2371\":3,\"2373\":1,\"2375\":1,\"2377\":4,\"2403\":1,\"2404\":2,\"2405\":1,\"2406\":1,\"2407\":1,\"2409\":1,\"2410\":1,\"2412\":1,\"2413\":1,\"2414\":1,\"2415\":1,\"2416\":1,\"2421\":1,\"2422\":1,\"2424\":1,\"2425\":1,\"2427\":1,\"2428\":1,\"2432\":1,\"2433\":1,\"2444\":1,\"2445\":1,\"2446\":2,\"2448\":2,\"2458\":2,\"2459\":2,\"2460\":2,\"2461\":2,\"2463\":2,\"2469\":14,\"2470\":1,\"2471\":1,\"2474\":1,\"2475\":1,\"2477\":2,\"2478\":2,\"2479\":1,\"2480\":2,\"2481\":2,\"2482\":1,\"2483\":1,\"2484\":1,\"2487\":2,\"2488\":2,\"2489\":1,\"2491\":2,\"2500\":2,\"2501\":1,\"2502\":4,\"2504\":3,\"2505\":2,\"2507\":2,\"2508\":3,\"2545\":4,\"2546\":2,\"2547\":6,\"2548\":4,\"2551\":7,\"2558\":6,\"2559\":5,\"2567\":4,\"2569\":2,\"2570\":2,\"2573\":15,\"2575\":7,\"2576\":2,\"2577\":7,\"2581\":5,\"2582\":5,\"2597\":13,\"2599\":4,\"2600\":14,\"2601\":6,\"2602\":1,\"2603\":15,\"2604\":2,\"2612\":4,\"2613\":16,\"2620\":4,\"2621\":5,\"2624\":5,\"2625\":4,\"2634\":3,\"2635\":8,\"2638\":3,\"2639\":4,\"2653\":38,\"2656\":15,\"2657\":21,\"2672\":4,\"2675\":4,\"2676\":3,\"2686\":4,\"2687\":4,\"2688\":6,\"2689\":5,\"2690\":10,\"2691\":8,\"2804\":1,\"2811\":7,\"2814\":2,\"2822\":1,\"2823\":1,\"2824\":1,\"2825\":1,\"2846\":10,\"2849\":2,\"2850\":1,\"2858\":2,\"2862\":5,\"2872\":5,\"2887\":1,\"2888\":1,\"2890\":1,\"2893\":1,\"2894\":6,\"2895\":2,\"2896\":1,\"2903\":1,\"2916\":1,\"2923\":1,\"2930\":2,\"2934\":3,\"2938\":2,\"2942\":4,\"2950\":2,\"2951\":1,\"3013\":6,\"3041\":1,\"3043\":1,\"3044\":2,\"3046\":1,\"3047\":4,\"3052\":2,\"3053\":1,\"3054\":3,\"3062\":1,\"3070\":1,\"3086\":1,\"3087\":1,\"3182\":1,\"3183\":1,\"3206\":2,\"3209\":5,\"3211\":4,\"3212\":4,\"3214\":7,\"3217\":4,\"3218\":4,\"3220\":7,\"3221\":7,\"3225\":4,\"3226\":6,\"3227\":5,\"3230\":2,\"3231\":7,\"3233\":3,\"3234\":8,\"3236\":2,\"3237\":7,\"3239\":2,\"3240\":7,\"3241\":1,\"3242\":6,\"3244\":6,\"3248\":1,\"3249\":5,\"3250\":1,\"3252\":3,\"3253\":8,\"3400\":1,\"3444\":1,\"3527\":1,\"3614\":1,\"3679\":1}}],[\"ⅳ\",{\"0\":{\"126\":1,\"232\":1,\"301\":1,\"589\":1,\"603\":1,\"664\":1,\"728\":1,\"778\":1,\"806\":1,\"860\":1,\"981\":1,\"1063\":1,\"1105\":1,\"1150\":1,\"1182\":1,\"1244\":1,\"1288\":1,\"1347\":1,\"1390\":1,\"1462\":1,\"1486\":1,\"1655\":1,\"1730\":1,\"1777\":1,\"1932\":1,\"2067\":1,\"2107\":1,\"2128\":1,\"2297\":1,\"2429\":1,\"2457\":1,\"2513\":1,\"2583\":1,\"2719\":1,\"2756\":1,\"2860\":1,\"2999\":1,\"3076\":1,\"3665\":1,\"3690\":1,\"3741\":1}}],[\"设备\",{\"1\":{\"1790\":1}}],[\"设置角色\",{\"1\":{\"3707\":1}}],[\"设置index\",{\"1\":{\"3518\":1}}],[\"设置es内存\",{\"0\":{\"3503\":1}}],[\"设置ca证书密码\",{\"1\":{\"3296\":1}}],[\"设置cookie的获取范围\",{\"1\":{\"3056\":1}}],[\"设置文件名\",{\"1\":{\"3296\":1}}],[\"设置密码\",{\"1\":{\"3291\":1,\"3296\":1,\"3322\":1,\"3707\":1}}],[\"设置请求体\",{\"1\":{\"3252\":1,\"3253\":1}}],[\"设置高亮字段\",{\"1\":{\"3252\":3,\"3253\":2}}],[\"设置标签后缀\",{\"1\":{\"3252\":2,\"3253\":1}}],[\"设置标签前缀\",{\"1\":{\"3252\":2,\"3253\":1}}],[\"设置排序方式\",{\"1\":{\"3244\":1}}],[\"设置分页数据\",{\"1\":{\"3242\":1}}],[\"设置查询方式\",{\"1\":{\"3252\":1,\"3253\":1}}],[\"设置查询条件\",{\"1\":{\"3236\":1,\"3237\":1}}],[\"设置查询的过滤条件\",{\"1\":{\"3233\":1,\"3234\":1}}],[\"设置查询的条件\",{\"1\":{\"3162\":1}}],[\"设置fetchsource方法的参数\",{\"1\":{\"3233\":1,\"3234\":1}}],[\"设置size为0\",{\"1\":{\"3188\":1}}],[\"设置session自动销毁的时间\",{\"1\":{\"3073\":1}}],[\"设置session的键值\",{\"0\":{\"3064\":1}}],[\"设置sql\",{\"1\":{\"2612\":1,\"2613\":1}}],[\"设置k\",{\"1\":{\"2938\":1}}],[\"设置响应状态码\",{\"1\":{\"2909\":1}}],[\"设置响应的数据类型\",{\"0\":{\"2889\":1}}],[\"设置响应数据\",{\"0\":{\"2833\":1}}],[\"设置编码\",{\"1\":{\"2877\":1,\"2896\":1}}],[\"设置pom\",{\"0\":{\"2742\":1}}],[\"设置数据库的隔离级别\",{\"1\":{\"2639\":1}}],[\"设置数据库隔离级别\",{\"0\":{\"2638\":1}}],[\"设置事务的自动提交\",{\"0\":{\"2628\":1}}],[\"设置指定对象obj上此field的属性内容\",{\"1\":{\"2310\":1}}],[\"设置指定对象的此属性值\",{\"1\":{\"2306\":1}}],[\"设置属性值\",{\"0\":{\"2310\":1}}],[\"设置属性的值\",{\"1\":{\"865\":1}}],[\"设置类变量默认初始值的阶段\",{\"1\":{\"2275\":1}}],[\"设置配置的值\",{\"1\":{\"1939\":1}}],[\"设置配置文件\",{\"0\":{\"548\":1},\"1\":{\"546\":1}}],[\"设置线程池属性\",{\"1\":{\"1816\":1}}],[\"设置线程的优先级\",{\"1\":{\"1737\":1}}],[\"设置成两个副本后\",{\"1\":{\"3394\":1}}],[\"设置成员\",{\"1\":{\"1312\":1}}],[\"设置成按条件加载\",{\"1\":{\"562\":1}}],[\"设置每次读取的长度\",{\"1\":{\"814\":2}}],[\"设置值的精度\",{\"1\":{\"783\":1}}],[\"设置毫秒\",{\"1\":{\"720\":1}}],[\"设置秒\",{\"1\":{\"720\":1}}],[\"设置mongodb的网络环境\",{\"1\":{\"3693\":1}}],[\"设置month\",{\"1\":{\"720\":1}}],[\"设置mins\",{\"1\":{\"720\":1}}],[\"设置hour\",{\"1\":{\"720\":1}}],[\"设置day\",{\"1\":{\"720\":1}}],[\"设置year\",{\"1\":{\"720\":1}}],[\"设置日期时间信息\",{\"1\":{\"720\":1}}],[\"设置日志输出方式为\",{\"1\":{\"624\":1}}],[\"设置日志文件\",{\"0\":{\"302\":1}}],[\"设置日志组\",{\"1\":{\"295\":1}}],[\"设置条件\",{\"1\":{\"631\":1}}],[\"设置为true\",{\"1\":{\"3595\":1}}],[\"设置为true则不会被清除\",{\"1\":{\"478\":1}}],[\"设置为abstract类\",{\"1\":{\"2647\":1}}],[\"设置为当年的第n天\",{\"1\":{\"720\":1}}],[\"设置为配置类\",{\"1\":{\"626\":1}}],[\"设置位置\",{\"1\":{\"574\":1,\"577\":1}}],[\"设置集b\",{\"1\":{\"562\":1}}],[\"设置一个专门的类为需要自定义的bean读取配置文件的属性\",{\"1\":{\"556\":1}}],[\"设置getter和setter\",{\"1\":{\"546\":1}}],[\"设置过短无效果\",{\"1\":{\"478\":1}}],[\"设置过长缓存容易溢出\",{\"1\":{\"478\":1}}],[\"设置监听器使用注解\",{\"1\":{\"456\":1}}],[\"设置监听队列2\",{\"1\":{\"447\":1}}],[\"设置监听队列1\",{\"1\":{\"447\":1}}],[\"设置监测配置文件是否有修改的时间间隔\",{\"1\":{\"308\":1}}],[\"设置预取值\",{\"1\":{\"439\":1}}],[\"设置要更新的内容\",{\"1\":{\"406\":1}}],[\"设置连接池\",{\"1\":{\"384\":1}}],[\"设置当前的虚拟目录\",{\"1\":{\"3056\":1}}],[\"设置当前线程的名字\",{\"1\":{\"1727\":1}}],[\"设置当前客户端将信息上传到哪个服务器上\",{\"1\":{\"324\":1}}],[\"设置当前组中所包含的包\",{\"1\":{\"295\":1}}],[\"设置字符集\",{\"1\":{\"308\":1}}],[\"设置默认启动的环境\",{\"1\":{\"281\":1}}],[\"设置多环境\",{\"1\":{\"281\":1}}],[\"设置三种环境\",{\"1\":{\"270\":1}}],[\"设置的访问端口不一样等等\",{\"1\":{\"269\":1}}],[\"设置具体的规则\",{\"1\":{\"220\":1}}],[\"设置不允许自动提交数据\",{\"1\":{\"2625\":1}}],[\"设置不参与热部署的文件或文件夹\",{\"1\":{\"194\":1}}],[\"设置不让springboot\",{\"1\":{\"171\":1}}],[\"设置\",{\"0\":{\"189\":1,\"190\":1,\"3517\":1},\"1\":{\"3124\":9}}],[\"设置最佳版本组合\",{\"1\":{\"125\":1}}],[\"设计分片的基本原则\",{\"0\":{\"3508\":1}}],[\"设计分片时\",{\"1\":{\"3507\":1}}],[\"设计的端口号为9300\",{\"1\":{\"3264\":1}}],[\"设计的内容包含\",{\"1\":{\"23\":1}}],[\"设计哈希算法时\",{\"1\":{\"1899\":1}}],[\"设计类的成员\",{\"1\":{\"1260\":1}}],[\"设计正则表达式\",{\"1\":{\"989\":1}}],[\"设计多个构造方法\",{\"1\":{\"646\":1}}],[\"设计\",{\"0\":{\"23\":1},\"1\":{\"33\":2}}],[\"设计模式的一种\",{\"1\":{\"1835\":2}}],[\"设计模式>单例模式\",{\"1\":{\"1486\":1}}],[\"设计模式\",{\"0\":{\"66\":1},\"1\":{\"10\":1,\"1636\":1}}],[\"通\",{\"1\":{\"3526\":1}}],[\"通信信息\",{\"1\":{\"3268\":1}}],[\"通信的两端都要有socket\",{\"1\":{\"2209\":1}}],[\"通信协议的分层\",{\"0\":{\"2200\":1}}],[\"通信协议和javaweb\",{\"1\":{\"2170\":1}}],[\"通信实体\",{\"1\":{\"2179\":1}}],[\"通信过程\",{\"0\":{\"2176\":1}}],[\"通信双方的地址\",{\"1\":{\"2174\":1}}],[\"通配符只能表示a类\",{\"1\":{\"1999\":1,\"2000\":1}}],[\"通配符大大扩大了方法的兼容性\",{\"1\":{\"1996\":1}}],[\"通配符的使用\",{\"0\":{\"1988\":1}}],[\"通配符\",{\"0\":{\"1983\":1,\"1989\":1},\"1\":{\"1989\":1}}],[\"通电==\",{\"1\":{\"1699\":1}}],[\"通俗的讲就是用多台机器进行同一数据的异\",{\"1\":{\"3639\":1}}],[\"通俗的说\",{\"1\":{\"1301\":1}}],[\"通俗点说就是\",{\"1\":{\"2247\":1}}],[\"通俗点说\",{\"1\":{\"1654\":1}}],[\"通知开发\",{\"1\":{\"645\":1}}],[\"通知运维\",{\"1\":{\"645\":1}}],[\"通知的方式是采用回调的方式\",{\"1\":{\"567\":1}}],[\"通用目录\",{\"0\":{\"2722\":1}}],[\"通用查询操作封装\",{\"0\":{\"2603\":1}}],[\"通用方法二\",{\"1\":{\"2349\":1}}],[\"通用方法一\",{\"1\":{\"2349\":1}}],[\"通用性\",{\"1\":{\"2251\":1}}],[\"通用\",{\"1\":{\"1498\":1}}],[\"通用文档标记\",{\"0\":{\"1058\":1}}],[\"通用service接口和通用service实现类\",{\"0\":{\"637\":1}}],[\"通用的策略如下\",{\"1\":{\"3514\":1}}],[\"通用的增删改操作\",{\"1\":{\"2648\":1}}],[\"通用的sql数据库存取和操作的公共接口\",{\"1\":{\"2527\":1}}],[\"通用的\",{\"1\":{\"508\":1}}],[\"通常使用执行计划来查看查询的情况\",{\"1\":{\"3632\":1}}],[\"通常使用\",{\"1\":{\"3623\":1}}],[\"通常集群解决脑裂问题都是采用这种方式\",{\"1\":{\"3275\":1}}],[\"通常在web\",{\"1\":{\"2996\":1}}],[\"通常应用于web项目中\",{\"1\":{\"2995\":1}}],[\"通常是用\",{\"1\":{\"2238\":1}}],[\"通常系统中拥有的不可剥夺资源\",{\"1\":{\"1792\":1}}],[\"通常需要重写thread类中的此方法\",{\"1\":{\"1727\":1}}],[\"通常设置为static的\",{\"1\":{\"1485\":1}}],[\"通常设置为false\",{\"1\":{\"478\":1}}],[\"通常\",{\"1\":{\"1277\":1}}],[\"通常一个文件中只有一个类\",{\"1\":{\"1258\":1}}],[\"通常情况下比单独提交处理更有效率\",{\"1\":{\"2614\":1}}],[\"通常情况下\",{\"1\":{\"1172\":1,\"1328\":1,\"1329\":1,\"1380\":1,\"1428\":1,\"1429\":1}}],[\"通常采用此类型\",{\"1\":{\"1094\":1}}],[\"通常定义整形变量时\",{\"1\":{\"1087\":1}}],[\"通常用它来加密打包一个私钥及有关的\",{\"1\":{\"3293\":1}}],[\"通常用于聚合大量的java类文件\",{\"1\":{\"2979\":1}}],[\"通常用于主线程和runnable实现类\",{\"1\":{\"1727\":1}}],[\"通常用几大段话详细描述该方法的功能与相关情况\",{\"1\":{\"1060\":1}}],[\"通常用几大段话详细描述该类的功能与相关情况\",{\"1\":{\"1059\":1}}],[\"通常用一段话简要的描述该方法的基本内容\",{\"1\":{\"1060\":1}}],[\"通常用一段话简要的描述该类的基本内容\",{\"1\":{\"1059\":1}}],[\"通常包含多个依赖坐标\",{\"1\":{\"124\":1}}],[\"通过uri连接\",{\"0\":{\"3751\":1}}],[\"通过url对象可以创建当前应用程序和\",{\"1\":{\"2244\":1}}],[\"通过openssl生成证书\",{\"0\":{\"3726\":1}}],[\"通过orm类\",{\"1\":{\"2655\":1,\"2656\":1}}],[\"通过远程登录的\",{\"1\":{\"3721\":1}}],[\"通过认证登录\",{\"0\":{\"3718\":1}}],[\"通过msi包安装mongodb时可以选择自动安装mongodb\",{\"1\":{\"3569\":1}}],[\"通过management\",{\"1\":{\"343\":1}}],[\"通过命令关闭\",{\"1\":{\"3564\":1}}],[\"通过进程编号关闭节点\",{\"1\":{\"3564\":1}}],[\"通过参数启动服务\",{\"0\":{\"3557\":1}}],[\"通过地理位置索引实现附近的人\",{\"1\":{\"3541\":1}}],[\"通过多个\",{\"1\":{\"3501\":1}}],[\"通过translog日志来解决\",{\"1\":{\"3455\":1}}],[\"通过thread类的对象调用start\",{\"1\":{\"1739\":1,\"1740\":1}}],[\"通过thread类的对象调用该方法\",{\"1\":{\"1718\":1}}],[\"通过增加新的补充索引来反映新近的修改\",{\"1\":{\"3443\":1}}],[\"通过倒排索引\",{\"1\":{\"3429\":1}}],[\"通过浏览器访问\",{\"1\":{\"3353\":1}}],[\"通过浏览器地址栏请求该servlet\",{\"1\":{\"2812\":1}}],[\"通过节点\",{\"0\":{\"3283\":1}}],[\"通过端口号区分\",{\"1\":{\"3262\":1}}],[\"通过host和port连接\",{\"0\":{\"3750\":1}}],[\"通过hash\",{\"1\":{\"3400\":1}}],[\"通过https请求的步骤来说明ca证书的工作机理\",{\"1\":{\"3295\":1}}],[\"通过httpservlet\",{\"1\":{\"2930\":1}}],[\"通过hightlight关键字\",{\"1\":{\"3193\":1}}],[\"通过from和size字段进行分页查询\",{\"1\":{\"3182\":1}}],[\"通过field对象\",{\"1\":{\"864\":1,\"865\":1}}],[\"通过rangequerybuilder对象可以创建范围查询构造器\",{\"1\":{\"3236\":1}}],[\"通过range关键字进行范围查询\",{\"1\":{\"3172\":1}}],[\"通过restful风格访问es服务器的资源\",{\"1\":{\"3111\":1}}],[\"通过response对象获取字节输出流\",{\"1\":{\"2893\":1}}],[\"通过response对象获取字符输出流\",{\"1\":{\"2887\":1}}],[\"通过resultsetmetadata获取结果集中的列数\",{\"1\":{\"2600\":1,\"2653\":2}}],[\"通过request对象获取\",{\"1\":{\"2930\":1}}],[\"通过request\",{\"1\":{\"2877\":1}}],[\"通过boolquerybuilder对象调用组合方法进行组合查询\",{\"1\":{\"3230\":1}}],[\"通过bool关键字进行组合查询\",{\"1\":{\"3169\":1}}],[\"通过bind方法传入被代理对象\",{\"1\":{\"2343\":1}}],[\"通过请求体的查询条件\",{\"1\":{\"3161\":1}}],[\"通过请求方式区分\",{\"1\":{\"473\":1}}],[\"通过主键\",{\"0\":{\"3157\":1},\"1\":{\"3224\":1}}],[\"通过文档的唯一标识\",{\"1\":{\"3138\":1,\"3156\":1}}],[\"通过向es发送delete请求\",{\"1\":{\"3128\":1}}],[\"通过向es服务器发送get请求\",{\"1\":{\"3121\":1}}],[\"通过向es服务器发送put请求来创建索引\",{\"1\":{\"3116\":1}}],[\"通过json格式传递数据\",{\"1\":{\"3111\":1}}],[\"通过键删除键值对\",{\"0\":{\"3066\":1}}],[\"通过键获取session的值\",{\"0\":{\"3065\":1}}],[\"通过这5个文档建立简单的倒排索引\",{\"1\":{\"3432\":1}}],[\"通过这个参数我们可以自定义文档到分片的映射\",{\"1\":{\"3402\":1}}],[\"通过这个事件对象我们可以获取到触发事件的httpservletrequest对象\",{\"1\":{\"2964\":1}}],[\"通过这个事件对象我们可以获取到触发事件的httpsession对象\",{\"1\":{\"2963\":1}}],[\"通过这个事件对象我们可以获取到servletcontext对象\",{\"1\":{\"2962\":1}}],[\"通过这种方式可以实现编程式控制bean的加载\",{\"1\":{\"520\":1}}],[\"通过k移除k\",{\"1\":{\"2938\":1}}],[\"通过k获取v\",{\"1\":{\"2938\":1}}],[\"通过扩展名\",{\"1\":{\"2933\":1}}],[\"通过响应头进行重定向\",{\"1\":{\"2909\":1}}],[\"通过字节输出流写数据\",{\"1\":{\"2893\":1}}],[\"通过字符输出流写数据\",{\"1\":{\"2887\":1}}],[\"通过字面量创建的string\",{\"1\":{\"1131\":1}}],[\"通过字面量的方式\",{\"1\":{\"1125\":1}}],[\"通过表达的post方式请求该servlet\",{\"1\":{\"2812\":1}}],[\"通过控制台观察代码块运行结果可知\",{\"1\":{\"2800\":1,\"2802\":1}}],[\"通过修改\",{\"1\":{\"2794\":1}}],[\"通过在不同数据库服务器上提供多个数据副本\",{\"1\":{\"3640\":1}}],[\"通过在module上右键添加web\",{\"0\":{\"2734\":1}}],[\"通过在start\",{\"1\":{\"1711\":1}}],[\"通过put请求\",{\"1\":{\"3379\":1}}],[\"通过powershell手动执行才能不闪退\",{\"1\":{\"3266\":1}}],[\"通过postman向es服务器发送delete请求\",{\"1\":{\"3130\":1}}],[\"通过postman发送get请求\",{\"1\":{\"3123\":1}}],[\"通过postman发送put请求\",{\"1\":{\"3118\":1}}],[\"通过postman工具进行数据访问的测试\",{\"1\":{\"3111\":1}}],[\"通过project\",{\"0\":{\"2733\":1}}],[\"通过p1和p3对对象的属性进行修改\",{\"1\":{\"1551\":1}}],[\"通过打包命令\",{\"1\":{\"2727\":1}}],[\"通过子配置文件\",{\"0\":{\"2717\":1}}],[\"通过别名的方式配置扩展插件\",{\"1\":{\"2674\":1}}],[\"通过泛型传递orm类名\",{\"0\":{\"2651\":1}}],[\"通过填写用户名\",{\"1\":{\"2559\":1}}],[\"通过流所生成元素的\",{\"1\":{\"2459\":1}}],[\"通过limit限制为10个\",{\"1\":{\"2450\":1,\"2451\":1}}],[\"通过显示值创建一个流\",{\"1\":{\"2448\":1}}],[\"通过显式定义同步锁对象来实现同步\",{\"1\":{\"1778\":1}}],[\"通过数组创建stream\",{\"0\":{\"2446\":1}}],[\"通过数组定义类引用\",{\"1\":{\"2277\":1}}],[\"通过集合的parallelstream方法\",{\"1\":{\"2445\":1}}],[\"通过集合的stream方法\",{\"1\":{\"2444\":1}}],[\"通过集合创建stream\",{\"0\":{\"2443\":1}}],[\"通过一个数据源\",{\"1\":{\"2440\":1}}],[\"通过一个案例了解使用springboot开发项目的过程\",{\"1\":{\"614\":1}}],[\"通过方法的名字来指向一个方法\",{\"1\":{\"2396\":1}}],[\"通过方法获取主线程\",{\"1\":{\"1728\":1}}],[\"通过标识符的数据类型就能推断出接口构造器\",{\"1\":{\"2363\":1}}],[\"通过此类为一个或多个接口动态地生成实现类\",{\"1\":{\"2337\":1}}],[\"通过此对象调用start\",{\"1\":{\"1719\":1}}],[\"通过上述的逻辑链条可知\",{\"1\":{\"2334\":1}}],[\"通过运行时类的对象\",{\"0\":{\"2267\":1}}],[\"通过反射获取被代理类的接口和类\",{\"1\":{\"2345\":1}}],[\"通过反射创建存放数据的对象\",{\"1\":{\"2603\":1}}],[\"通过反射创建对象\",{\"1\":{\"2285\":1}}],[\"通过反射创建对应的运行时类的对象\",{\"0\":{\"2285\":1}}],[\"通过反射创建该类的对象\",{\"1\":{\"839\":1}}],[\"通过反射\",{\"1\":{\"2257\":2,\"2258\":1,\"2600\":1,\"2603\":1,\"2653\":2}}],[\"通过输出流将信息写入线程\",{\"1\":{\"2217\":1}}],[\"通过输入流读取服务器放入线路的信息\",{\"1\":{\"2217\":1}}],[\"通过对用户授予一个或多个角色来控制用户访问数据库资源的权限和数据库操作的权限\",{\"1\":{\"3696\":1}}],[\"通过对数据的处理为程序提供更为强大的读写功能\",{\"1\":{\"2023\":1,\"2028\":1}}],[\"通过对象调用属性和方法\",{\"1\":{\"1260\":1}}],[\"通过对象往redis数据库中存储的数据是对象格式的\",{\"1\":{\"379\":1}}],[\"通过实现callable接口\",{\"1\":{\"1807\":1}}],[\"通过实体类获取字段名\",{\"1\":{\"632\":1}}],[\"通过直接调用run\",{\"1\":{\"1724\":1}}],[\"通过该方法\",{\"1\":{\"2447\":1}}],[\"通过该thread对象的start\",{\"1\":{\"1718\":1}}],[\"通过该对象读取所需配置\",{\"1\":{\"153\":1,\"200\":1}}],[\"通过继承thread类\",{\"1\":{\"1712\":1}}],[\"通过继承的父类的setage方法来设置\",{\"1\":{\"1368\":1}}],[\"通过继承的父类的getage方法获取\",{\"1\":{\"1368\":1}}],[\"通过变量我们可以操作\",{\"1\":{\"1704\":1}}],[\"通过变量赋值的方式\",{\"1\":{\"1551\":1}}],[\"通过包装类的构造器实现\",{\"1\":{\"1440\":1}}],[\"通过分析重载和重写在编译和运行是状态来判断早绑定与晚绑定\",{\"1\":{\"1407\":1}}],[\"通过分析原型图\",{\"1\":{\"26\":1}}],[\"通过使用annotation\",{\"1\":{\"1635\":1}}],[\"通过使用\",{\"1\":{\"1380\":1}}],[\"通过封装保护属性\",{\"0\":{\"1304\":1}}],[\"通过类的实例化\",{\"1\":{\"1253\":1}}],[\"通过类的class属性获取\",{\"1\":{\"834\":1,\"2266\":1}}],[\"通过下标取出数组元素\",{\"1\":{\"1218\":1}}],[\"通过name选择\",{\"1\":{\"2751\":1}}],[\"通过new+构造器的方式创建的string\",{\"1\":{\"1131\":1}}],[\"通过now方法获取的instant对象\",{\"1\":{\"725\":1}}],[\"通过过\",{\"1\":{\"1038\":1}}],[\"通过正则字符串不能表示模式修饰符\",{\"1\":{\"986\":1}}],[\"通过compass查看\",{\"1\":{\"3636\":1}}],[\"通过compass只要输入ip+port就可以直接连接上\",{\"1\":{\"3570\":1}}],[\"通过constructor实例化对象\",{\"1\":{\"2286\":1}}],[\"通过collection接口的iterator\",{\"1\":{\"922\":1}}],[\"通过class可以完整地得到一个类中的所有被加载的结构\",{\"1\":{\"2263\":1}}],[\"通过class进行实例化\",{\"1\":{\"867\":1}}],[\"通过class类进行实例化\",{\"1\":{\"860\":1}}],[\"通过searchsourcebuilder对象构建查询条件时\",{\"1\":{\"3233\":1,\"3241\":1,\"3243\":1}}],[\"通过searchsourcebuilder对象构建查询的请求体\",{\"1\":{\"3227\":1}}],[\"通过searchrequest请求对象进行查询\",{\"1\":{\"3227\":1}}],[\"通过searchrequest对象\",{\"1\":{\"3226\":1}}],[\"通过sort定义排序\",{\"1\":{\"3185\":1}}],[\"通过stream的of\",{\"0\":{\"2448\":1}}],[\"通过string输出char数组\",{\"0\":{\"2055\":1}}],[\"通过string的一个特殊构造器\",{\"1\":{\"673\":1}}],[\"通过system类的setin\",{\"1\":{\"2117\":1}}],[\"通过scanner类来获取用户的输入\",{\"1\":{\"885\":1,\"1006\":1}}],[\"通过当前运行时类\",{\"1\":{\"844\":1}}],[\"通过毫秒时间戳获取instant对象\",{\"1\":{\"727\":1}}],[\"通过id获取文档\",{\"1\":{\"3422\":1}}],[\"通过idea的提示信息使用\",{\"1\":{\"405\":1}}],[\"通过ide导入项目即可\",{\"1\":{\"105\":1}}],[\"通过invocationhandler接口的实现类调用该方法\",{\"1\":{\"2340\":1}}],[\"通过instant类的now静态方法\",{\"1\":{\"724\":1}}],[\"通过你编码中导入的类\",{\"1\":{\"559\":1}}],[\"通过getsession\",{\"1\":{\"2969\":1}}],[\"通过getter和setter为两个类赋值\",{\"1\":{\"550\":1}}],[\"通过getmodifiedcount获取影响的行数\",{\"1\":{\"406\":1}}],[\"通过配置文件启动服务\",{\"0\":{\"3558\":1}}],[\"通过配置文件控制了bean加载的初始化\",{\"1\":{\"556\":1}}],[\"通过配置文件为bean提供属性\",{\"0\":{\"547\":1}}],[\"通过配置强制关闭热部署\",{\"0\":{\"196\":1}}],[\"通过容器中是否存在某个bean来控制加载\",{\"0\":{\"541\":1}}],[\"通过容器中是否存在某个类来控制加载\",{\"0\":{\"540\":1}}],[\"通过判断元数据控制加载\",{\"1\":{\"535\":2}}],[\"通过判断注解来加载不同的bean\",{\"1\":{\"525\":1}}],[\"通过扫描的方式将设置了注解的类加入bean是个粒度比较大的导入方式\",{\"1\":{\"516\":1}}],[\"通过引入依赖\",{\"1\":{\"358\":1}}],[\"通过endpoints进行端点的通用配置\",{\"1\":{\"343\":1}}],[\"通过environment对象的getproperty方法可以读取具体的配置项\",{\"1\":{\"152\":1}}],[\"通过\",{\"0\":{\"409\":1},\"1\":{\"342\":1,\"447\":1,\"556\":1,\"885\":1,\"1006\":1,\"1038\":1,\"1323\":1,\"1643\":1,\"1912\":2,\"2236\":1,\"2439\":1,\"2777\":1}}],[\"通过发送请求路劲\",{\"1\":{\"342\":1}}],[\"通过访问端点就可以获取对应的监控信息\",{\"1\":{\"342\":1}}],[\"通过访问\",{\"1\":{\"341\":1}}],[\"通过yml文件配置\",{\"1\":{\"324\":1}}],[\"通过定义的值会被插入到logger上下文中\",{\"1\":{\"308\":1}}],[\"通过日志组设置日志等级\",{\"0\":{\"295\":1}}],[\"通过启动类强制关闭热部署\",{\"0\":{\"197\":1}}],[\"通过自动装配\",{\"1\":{\"152\":1}}],[\"通过注入的方式读取配置项\",{\"1\":{\"150\":1}}],[\"之别\",{\"1\":{\"3369\":1}}],[\"之一\",{\"1\":{\"2955\":1}}],[\"之所以他们是域对象\",{\"1\":{\"2919\":1}}],[\"之所以有这么多\",{\"1\":{\"333\":1}}],[\"之上\",{\"1\":{\"2023\":1,\"2028\":1}}],[\"之间移动数据的时候\",{\"1\":{\"3504\":1}}],[\"之间的余数\",{\"1\":{\"3400\":1}}],[\"之间的unicode码\",{\"1\":{\"824\":1}}],[\"之间存在单向一对一关系\",{\"1\":{\"1909\":1}}],[\"之间\",{\"1\":{\"813\":1,\"2233\":1}}],[\"之后可以选择守护进程的方式启动\",{\"1\":{\"3310\":1,\"3342\":1}}],[\"之后插入一些通用处理\",{\"1\":{\"2348\":1}}],[\"之后只能声明常量\",{\"1\":{\"1175\":1}}],[\"之后\",{\"1\":{\"744\":1,\"2440\":1,\"3054\":1}}],[\"之后restlowlevelclient客户端被弃用\",{\"1\":{\"414\":1}}],[\"之后无论复习还是使用\",{\"1\":{\"1\":1}}],[\"之前的旧版本文档\",{\"1\":{\"3447\":1}}],[\"之前创建ca证书时未设置\",{\"1\":{\"3298\":1}}],[\"之前创建文档时\",{\"1\":{\"3142\":1,\"3160\":1}}],[\"之前\",{\"1\":{\"1541\":1,\"3054\":1}}],[\"之前与值的指针断裂\",{\"1\":{\"1227\":1}}],[\"之前通过各种方式加载bean的做法\",{\"1\":{\"559\":1}}],[\"之前版本会出现一个小bug\",{\"1\":{\"368\":1}}],[\"之前提到的创建项目\",{\"1\":{\"160\":1}}],[\"之前开发某类项目\",{\"1\":{\"124\":1}}],[\"ⅲ\",{\"0\":{\"122\":1,\"217\":1,\"231\":1,\"265\":1,\"276\":1,\"296\":1,\"585\":1,\"601\":1,\"658\":1,\"723\":1,\"752\":1,\"777\":1,\"802\":1,\"828\":1,\"851\":1,\"927\":1,\"980\":1,\"1002\":1,\"1057\":1,\"1081\":1,\"1099\":1,\"1147\":1,\"1178\":1,\"1229\":1,\"1265\":1,\"1284\":1,\"1339\":1,\"1378\":1,\"1448\":1,\"1479\":1,\"1515\":1,\"1535\":1,\"1610\":1,\"1649\":1,\"1695\":1,\"1726\":1,\"1764\":1,\"1878\":1,\"1929\":1,\"2057\":1,\"2080\":1,\"2102\":1,\"2122\":1,\"2234\":1,\"2294\":1,\"2417\":1,\"2452\":1,\"2512\":1,\"2544\":1,\"2572\":1,\"2654\":1,\"2710\":1,\"2744\":1,\"2787\":1,\"2805\":1,\"2827\":1,\"2839\":1,\"2851\":1,\"2892\":1,\"2914\":1,\"2970\":1,\"2994\":1,\"3010\":1,\"3059\":1,\"3549\":1,\"3565\":1,\"3599\":1,\"3612\":1,\"3660\":1,\"3684\":1,\"3721\":1,\"3737\":1}}],[\"只连接一个节点\",{\"0\":{\"3740\":1}}],[\"只用来作为用户权限的管理\",{\"1\":{\"3710\":1}}],[\"只用springboot整合的技术才可以直接在这里更好服务商\",{\"1\":{\"477\":1}}],[\"只具有投票选举作用\",{\"1\":{\"3645\":1}}],[\"只存储根词\",{\"1\":{\"3621\":1}}],[\"只显示指定的字段\",{\"1\":{\"3607\":1}}],[\"只启动了一个\",{\"1\":{\"3278\":2}}],[\"只让能够识别数字签名的用户使用里面的东西\",{\"1\":{\"2986\":1}}],[\"只拦截具体的某个路径的访问\",{\"1\":{\"2949\":1}}],[\"只将service\",{\"1\":{\"2807\":1}}],[\"只会影响第一个访问的人而已\",{\"1\":{\"2794\":1}}],[\"只支持insert语句\",{\"1\":{\"2683\":2}}],[\"只支持数值类型\",{\"1\":{\"1155\":1}}],[\"只考虑使用配置文件获取druid连接池的方法\",{\"1\":{\"2672\":1}}],[\"只关闭了两个资源\",{\"1\":{\"2598\":1}}],[\"只加载驱动即可\",{\"1\":{\"2548\":1}}],[\"只进行驱动的加载即可\",{\"1\":{\"2548\":1}}],[\"只获取前n个数据\",{\"1\":{\"2460\":1}}],[\"只包含一个抽象方法的接口\",{\"1\":{\"2380\":1}}],[\"只保留方法体\",{\"1\":{\"2363\":1}}],[\"只返回泛型\",{\"1\":{\"2301\":1}}],[\"只读\",{\"1\":{\"2135\":1}}],[\"只使用单个线程先后完成多个任务\",{\"1\":{\"1692\":1}}],[\"只捕获一次\",{\"1\":{\"1588\":1}}],[\"只可能存储两类值\",{\"1\":{\"1552\":1}}],[\"只掌握一套连接数据库的方法\",{\"1\":{\"1513\":1}}],[\"只比较值\",{\"1\":{\"1426\":1}}],[\"只适用于方法\",{\"1\":{\"1399\":1}}],[\"只对集合内元素类型统一有要求\",{\"1\":{\"1997\":1}}],[\"只对外公开简单的接口\",{\"1\":{\"1301\":1}}],[\"只对本身非质数的自然数是有效的\",{\"1\":{\"1204\":1}}],[\"只在局部作用域有效的变量\",{\"1\":{\"1271\":1}}],[\"只规定外层长度\",{\"1\":{\"1234\":1}}],[\"只为数组本身指定长度\",{\"1\":{\"1234\":1}}],[\"只相当于外层循环循环体执行了一次\",{\"1\":{\"1200\":1}}],[\"只声明\",{\"0\":{\"1069\":1}}],[\"只写类名\",{\"1\":{\"1058\":1}}],[\"只输出数据\",{\"1\":{\"1047\":1}}],[\"只执行一次\",{\"1\":{\"492\":1,\"2795\":1,\"2800\":1}}],[\"只需手动解决post乱码问题即可\",{\"1\":{\"2874\":1}}],[\"只需从\",{\"1\":{\"2664\":1}}],[\"只需new\",{\"1\":{\"1742\":1}}],[\"只需引入redis依赖\",{\"1\":{\"481\":1}}],[\"只需引入ehcache依赖\",{\"1\":{\"475\":1}}],[\"只需要在主节点上添加用户\",{\"1\":{\"3724\":1}}],[\"只需要在spring配置类注解的参数中写上加载的类对应的\",{\"1\":{\"516\":1}}],[\"只需要添加扩展词汇\",{\"1\":{\"3490\":1}}],[\"只需要添加一个坐标此提醒就消失了\",{\"1\":{\"209\":1}}],[\"只需要指定analyzer的类型\",{\"1\":{\"3478\":1}}],[\"只需要改下节点名\",{\"1\":{\"3339\":1}}],[\"只需要去掉用doget方法即可\",{\"1\":{\"2862\":1}}],[\"只需要继承myhttpservlet\",{\"1\":{\"2814\":1}}],[\"只需要继承basemapper并传入实体类\",{\"1\":{\"373\":1}}],[\"只需要预编译的时候校验一次sql语句\",{\"1\":{\"2561\":1}}],[\"只需要使用定义好的class的方法\",{\"1\":{\"2287\":1}}],[\"只需要注意前两种\",{\"1\":{\"2134\":1}}],[\"只需要运行java程序可以下载这个\",{\"1\":{\"1024\":1}}],[\"只需要对controller层做异常处理即可\",{\"1\":{\"645\":1}}],[\"只需要用注解在方法上开启\",{\"1\":{\"468\":1}}],[\"只需要配置数据库连接信息即可\",{\"1\":{\"362\":1}}],[\"只需要重新加载正则开发的文件就可以了\",{\"1\":{\"180\":1}}],[\"只要文件系统缓存中还有足够的空间\",{\"1\":{\"3441\":1}}],[\"只要你想\",{\"1\":{\"3261\":1}}],[\"只要设置\",{\"1\":{\"3197\":1}}],[\"只要端口号不同就可以\",{\"1\":{\"2752\":1}}],[\"只要language\",{\"1\":{\"2356\":1}}],[\"只要它符合uri的语法规则\",{\"1\":{\"2243\":1}}],[\"只要它们的参数个数或者参数类型不同即可\",{\"1\":{\"1285\":1}}],[\"只要关闭最外层流即可\",{\"1\":{\"2074\":1}}],[\"只要该位置没有其他数据\",{\"1\":{\"1890\":1}}],[\"只要x和y内容一直不变\",{\"1\":{\"1428\":1}}],[\"只要继承那个类即可\",{\"1\":{\"1359\":1}}],[\"只要用package设置了包名\",{\"1\":{\"1335\":1}}],[\"只要这个表达式的结果是一个值\",{\"1\":{\"1277\":1}}],[\"只要有两个\",{\"1\":{\"1186\":1}}],[\"只要是\",{\"1\":{\"2823\":1}}],[\"只要是springboot的配置文件就行\",{\"1\":{\"545\":1}}],[\"只要是提供web服务的模块\",{\"1\":{\"163\":1}}],[\"只要在\",{\"1\":{\"545\":1}}],[\"只要能编程就能判定\",{\"1\":{\"525\":1}}],[\"只要\",{\"1\":{\"448\":1}}],[\"只能以direct的形式连接副本集的主节点\",{\"1\":{\"3738\":1}}],[\"只能操作article库\",{\"1\":{\"3720\":1}}],[\"只能操作普通文本文件\",{\"1\":{\"2045\":1}}],[\"只能删除非\",{\"1\":{\"3631\":1}}],[\"只能删除空的目录\",{\"1\":{\"810\":1}}],[\"只能查看有权限的数据库\",{\"1\":{\"3574\":1}}],[\"只能简单的将每个字拆开\",{\"1\":{\"3476\":1}}],[\"只能采取定时\",{\"1\":{\"3442\":1}}],[\"只能采用这种方式连接\",{\"1\":{\"388\":1}}],[\"只能进行完全匹配\",{\"1\":{\"3200\":1}}],[\"只能进行比较\",{\"1\":{\"739\":1}}],[\"只能同put请求创建索引\",{\"1\":{\"3120\":1}}],[\"只能同时复制4个文件\",{\"1\":{\"1692\":1}}],[\"只能约束格式\",{\"1\":{\"3023\":1}}],[\"只能做初步的筛选和使用\",{\"1\":{\"2935\":1}}],[\"只能转发到当前服务器的内部资源\",{\"1\":{\"2904\":1}}],[\"只能启动一个tomcat\",{\"1\":{\"2703\":1}}],[\"只能继承和实现\",{\"1\":{\"2647\":1}}],[\"只能添加null\",{\"1\":{\"1992\":1}}],[\"只能有一个线程参与\",{\"1\":{\"1776\":1}}],[\"只能有一个带public的\",{\"1\":{\"1258\":1}}],[\"只能让一个线程都执行完\",{\"1\":{\"1756\":1,\"1773\":1}}],[\"只能手写大量胶水代码\",{\"1\":{\"1531\":1}}],[\"只能通过接口直接调用静态方法\",{\"1\":{\"1516\":1}}],[\"只能通过pattern\",{\"1\":{\"998\":1,\"1004\":1}}],[\"只能创建匿名类的一个实例\",{\"1\":{\"1462\":1}}],[\"只能在声明它的方法或代码块中使用\",{\"1\":{\"1459\":1,\"1460\":1}}],[\"只能调用父类中声明的属性和方法\",{\"1\":{\"1410\":1}}],[\"只能调用父类中声明的方法\",{\"1\":{\"1397\":1}}],[\"只能规范\",{\"1\":{\"1409\":1}}],[\"只能二选一\",{\"1\":{\"1387\":1}}],[\"只能\",{\"1\":{\"1277\":1}}],[\"只能用来标注\",{\"1\":{\"1661\":6}}],[\"只能用来修饰方法\",{\"1\":{\"1653\":1}}],[\"只能用于\",{\"1\":{\"1195\":1,\"1197\":1}}],[\"只能用于switch\",{\"1\":{\"1192\":1}}],[\"只能用在dayofmonth和dayofweek两个域\",{\"1\":{\"501\":1}}],[\"只能是如下的6种数据类型之一\",{\"1\":{\"1175\":1}}],[\"只能表示英文的编码集\",{\"1\":{\"1103\":1}}],[\"只能最多有一个类声明为public的\",{\"1\":{\"1044\":1}}],[\"只能获取public修饰的方法\",{\"1\":{\"858\":1,\"2313\":1}}],[\"只能获取文件\",{\"1\":{\"792\":1}}],[\"只能使用$set修改器进行更新\",{\"1\":{\"3596\":1}}],[\"只能使用\",{\"1\":{\"1310\":1}}],[\"只能使用append方法\",{\"1\":{\"700\":1}}],[\"只能使用2\",{\"1\":{\"319\":1}}],[\"只能存在一个\",{\"1\":{\"599\":1}}],[\"只能出现在dayofweek域\",{\"1\":{\"501\":1}}],[\"只能更新一个\",{\"1\":{\"402\":1}}],[\"只能保证基本一致\",{\"1\":{\"319\":1}}],[\"只有证书相同的实例彼此才可以访问\",{\"1\":{\"3723\":1}}],[\"只有在特定环境下才能使用\",{\"1\":{\"3593\":1}}],[\"只有在外部类或static的成员内部类中才可声明static成员\",{\"1\":{\"1455\":1}}],[\"只有65530\",{\"1\":{\"3313\":1,\"3346\":1}}],[\"只有他自己\",{\"1\":{\"3269\":1}}],[\"只有某些标签才是有意义的\",{\"1\":{\"3022\":1}}],[\"只有某平台提供了对应的java虚拟机\",{\"1\":{\"1015\":1}}],[\"只有servlet内部转发的请求\",{\"1\":{\"2950\":1}}],[\"只有浏览器直接请求的资源\",{\"1\":{\"2950\":1}}],[\"只有访问index\",{\"1\":{\"2949\":1}}],[\"只有服务器正常关闭时\",{\"1\":{\"2802\":1}}],[\"只有普通的build打包\",{\"1\":{\"2762\":1}}],[\"只有一句方法体\",{\"1\":{\"2364\":2}}],[\"只有一个属性可以省略urlpatterns\",{\"1\":{\"2819\":1}}],[\"只有一个项目\",{\"1\":{\"2749\":1}}],[\"只有一个参数\",{\"1\":{\"2416\":1}}],[\"只有一个参数可以省略\",{\"1\":{\"2364\":1}}],[\"只有一个方法的接口\",{\"1\":{\"2361\":1}}],[\"只有一个成员\",{\"1\":{\"1647\":1}}],[\"只有一个level属性\",{\"1\":{\"308\":1}}],[\"只有函数式接口可以这么用\",{\"1\":{\"2361\":1}}],[\"只有真正声明这个域的类才会被初始化\",{\"1\":{\"2277\":1}}],[\"只有遇到换行符\",{\"1\":{\"2082\":1}}],[\"只有释放了\",{\"1\":{\"1797\":1}}],[\"只有通过new关键字才会产生出对象\",{\"1\":{\"1471\":1}}],[\"只有等到方法调用的那一刻\",{\"1\":{\"1407\":1}}],[\"只有循环条件和循环体也能编译\",{\"1\":{\"1186\":1}}],[\"只有\",{\"1\":{\"997\":1}}],[\"只有第一个数字没替换了\",{\"1\":{\"990\":1}}],[\"只有与正则匹配的内容才可以\",{\"1\":{\"887\":1,\"1008\":1}}],[\"只有tomcat启动了\",{\"1\":{\"493\":1}}],[\"只有启动springboot服务\",{\"1\":{\"159\":1}}],[\"只配置最底级别\",{\"1\":{\"308\":1}}],[\"只不过\",{\"1\":{\"205\":1}}],[\"只是测试下创建的账号\",{\"1\":{\"3715\":1}}],[\"只是没有持久化\",{\"1\":{\"3450\":1}}],[\"只是没分配到cpu资源\",{\"1\":{\"1749\":1}}],[\"只是io的效率很低\",{\"1\":{\"3449\":1}}],[\"只是增加了高可用\",{\"1\":{\"3394\":1}}],[\"只是无法获取响应数据了\",{\"1\":{\"3222\":1}}],[\"只是请求方式变成了get\",{\"1\":{\"3199\":1}}],[\"只是request变成了response\",{\"1\":{\"2841\":1}}],[\"只是redis有自己的存储策略和key规则\",{\"1\":{\"484\":1}}],[\"只是一个接口\",{\"1\":{\"2668\":1}}],[\"只是一个壳\",{\"1\":{\"626\":1}}],[\"只是dql执行查询的方法是executequery\",{\"1\":{\"2584\":1}}],[\"只是未必是第一个\",{\"1\":{\"2481\":1}}],[\"只是servlet直接封装了一套api\",{\"1\":{\"3048\":1}}],[\"只是sql语句变成了updata\",{\"1\":{\"2612\":1}}],[\"只是sql里的操作是操作数据库的\",{\"1\":{\"2435\":1}}],[\"只是springboot进行了整合简化\",{\"1\":{\"229\":1}}],[\"只是用来标识类可以进行实例化\",{\"1\":{\"2153\":1}}],[\"只是简单的读\",{\"1\":{\"2137\":1}}],[\"只是参数类型变成了byte\",{\"1\":{\"2070\":2}}],[\"只是所有的线程都处于阻塞状态\",{\"1\":{\"1788\":1}}],[\"只是不需要我们显式的声明\",{\"1\":{\"1765\":1}}],[\"只是普通的在main线程中调用一个方法\",{\"1\":{\"1724\":1}}],[\"只是在main线程调用了一个普通的run方法\",{\"1\":{\"1720\":1}}],[\"只是对数组的结构进行一些解释\",{\"1\":{\"1226\":1}}],[\"只是将int类型的结果2\",{\"1\":{\"1139\":1}}],[\"只是关键字是string\",{\"1\":{\"1124\":1}}],[\"只是char\",{\"1\":{\"816\":1}}],[\"只是此时\",{\"1\":{\"809\":1}}],[\"只是名字\",{\"1\":{\"794\":1}}],[\"只是这样不够灵活\",{\"1\":{\"550\":1}}],[\"只是帮助理解bean的作用\",{\"1\":{\"504\":1}}],[\"只是\",{\"1\":{\"475\":1,\"3397\":1}}],[\"只是updatemulti可以更新所有符合条件的文档\",{\"1\":{\"407\":1}}],[\"只是当前客户端没有开发什么信息\",{\"1\":{\"325\":1}}],[\"只是格式不同\",{\"1\":{\"201\":1}}],[\"只是作为其他模块的依赖\",{\"1\":{\"163\":1}}],[\"只是包含了常用依赖的坐标\",{\"1\":{\"121\":1}}],[\"只允许使用空格\",{\"1\":{\"146\":1}}],[\"只指定了springboot的版本\",{\"1\":{\"120\":1}}],[\"同数据中心维护数据副本可以增加分布式应用程序的数据位置和可用性\",{\"1\":{\"3640\":1}}],[\"同义词\",{\"1\":{\"3436\":1}}],[\"同类型推断能推断出参数类型\",{\"1\":{\"2363\":1}}],[\"同属性的返回值类型\",{\"1\":{\"2296\":1}}],[\"同属性的权限修饰符\",{\"1\":{\"2296\":1}}],[\"同步文件内容和元数据\",{\"1\":{\"2134\":1}}],[\"同步文件内容的更新\",{\"1\":{\"2134\":1}}],[\"同步资源并等待\",{\"1\":{\"1799\":1}}],[\"同步锁使用lock对象充当\",{\"1\":{\"1778\":1}}],[\"同步方式的优缺点\",{\"0\":{\"1776\":1}}],[\"同步方法中执行了线程对象的wait\",{\"1\":{\"1774\":1}}],[\"同步方法中出现了未处理的error或exception\",{\"1\":{\"1774\":1}}],[\"同步方法中遇到break\",{\"1\":{\"1774\":1}}],[\"同步方法仍然涉及到同步监视器\",{\"1\":{\"1765\":1}}],[\"同步方法说明\",{\"0\":{\"1765\":1}}],[\"同步方法\",{\"0\":{\"1764\":1}}],[\"同步的范围\",{\"0\":{\"1773\":1}}],[\"同步机制中的锁\",{\"0\":{\"1772\":1}}],[\"同步机制有多种方式\",{\"1\":{\"1756\":1}}],[\"同步原理和总结\",{\"0\":{\"1771\":1}}],[\"同步监视器表示是各自的对象\",{\"1\":{\"1767\":1}}],[\"同步监视器\",{\"0\":{\"1766\":1,\"1767\":1},\"1\":{\"1759\":2,\"1775\":1}}],[\"同步代码块执行结束\",{\"1\":{\"1774\":1}}],[\"同步代码块说明\",{\"0\":{\"1759\":1}}],[\"同步代码块可以解决线程安全问题\",{\"1\":{\"1758\":1}}],[\"同步代码块\",{\"0\":{\"1758\":1},\"1\":{\"1772\":1}}],[\"同优先级线程组成先进先出队列\",{\"1\":{\"1734\":1}}],[\"同包类\",{\"1\":{\"1342\":1}}],[\"同种类型\",{\"0\":{\"1161\":1}}],[\"同理\",{\"1\":{\"958\":1,\"1767\":1}}],[\"同class对象进行获取constructor对象\",{\"1\":{\"876\":1}}],[\"同field\",{\"1\":{\"875\":1,\"878\":1}}],[\"同一集群总不得重复\",{\"1\":{\"3355\":1}}],[\"同一集群的节点\",{\"1\":{\"3355\":1}}],[\"同一tomcat服务器中\",{\"0\":{\"3056\":1}}],[\"同一台机器上的多个web服务可以通过docker等容器进行隔离\",{\"1\":{\"2998\":1}}],[\"同一进程内的线程共享本进程的资源如内存\",{\"1\":{\"1688\":1}}],[\"同一功能多次开启也算加了一个进程\",{\"1\":{\"1688\":1}}],[\"同一目录下的目录和文件不能同名\",{\"1\":{\"802\":1,\"2018\":1}}],[\"同一个线程对象重复调用start方法会抛出异常\",{\"1\":{\"1725\":1}}],[\"同一个thread类的对象不能重复调用start\",{\"0\":{\"1725\":1}}],[\"同一个注解\",{\"1\":{\"1667\":1}}],[\"同一个注解可以重复用多次\",{\"1\":{\"1666\":1}}],[\"同一个类\",{\"1\":{\"1285\":1}}],[\"同一个作用域内\",{\"1\":{\"1073\":1}}],[\"同一个对象肯定相等\",{\"1\":{\"749\":1}}],[\"同一个集合总储存的文档可以有不同的字段\",{\"1\":{\"399\":1}}],[\"同样有可能会导致数据丢失\",{\"1\":{\"3508\":1}}],[\"同样有三个静态方法来进行实例化\",{\"1\":{\"734\":1}}],[\"同样也是内存\",{\"1\":{\"3449\":1}}],[\"同样\",{\"1\":{\"2705\":1}}],[\"同样实现接口\",{\"1\":{\"2321\":1}}],[\"同样会发生覆盖\",{\"1\":{\"960\":1}}],[\"同样进入该文件\",{\"1\":{\"119\":1}}],[\"同string的方法\",{\"1\":{\"697\":1}}],[\"同上创建对应的目录和文件\",{\"1\":{\"3657\":1,\"3658\":1}}],[\"同上需要进行try\",{\"1\":{\"2063\":1}}],[\"同上\",{\"1\":{\"402\":1,\"554\":1,\"722\":1,\"757\":1,\"816\":1,\"1122\":1,\"1426\":2,\"1913\":1,\"2070\":3,\"2086\":1}}],[\"同层级左侧对齐\",{\"1\":{\"146\":1}}],[\"同时要设置客户端连接到集群的账号\",{\"1\":{\"3693\":1}}],[\"同时要与idea兼容\",{\"1\":{\"574\":1}}],[\"同时操作系统也会把这些段文件缓存起来\",{\"1\":{\"3504\":1}}],[\"同时操作es的api经常需要使用json格式的数据\",{\"1\":{\"413\":1}}],[\"同时是支持个人词条的优化的词典存储\",{\"1\":{\"3477\":1}}],[\"同时仅从主分片复制发生了修改的数据文件\",{\"1\":{\"3397\":1}}],[\"同时高可用也增加了\",{\"1\":{\"3393\":1}}],[\"同时可以在hightlight中设置高亮显示的标签和高亮显示的字段\",{\"1\":{\"3193\":1}}],[\"同时可以大幅度提高数据库访问速度\",{\"1\":{\"2668\":1}}],[\"同时category为iphone的文档\",{\"1\":{\"3170\":1}}],[\"同时cartoonproperties类可以不声明为bean了\",{\"1\":{\"554\":1}}],[\"同时构造方法会设置cookie的key\",{\"1\":{\"3041\":1}}],[\"同时提供给使用者清晰的文档\",{\"1\":{\"2986\":1}}],[\"同时进行debug\",{\"1\":{\"2757\":1}}],[\"同时这个目录也是tomcat真正访问的目录\",{\"1\":{\"2721\":1}}],[\"同时这些接口也会成为代理类的接口\",{\"1\":{\"2338\":1}}],[\"同时加入了日志监控\",{\"1\":{\"2670\":1}}],[\"同时如果每个操作使用的是自己单独的连接\",{\"1\":{\"2631\":1}}],[\"同时需要将原有数组中的数据复制到新的数组中\",{\"1\":{\"1867\":1}}],[\"同时效率不高\",{\"1\":{\"1822\":1}}],[\"同时实现了runnable\",{\"1\":{\"1808\":1}}],[\"同时又提出使用打印机的请求\",{\"1\":{\"1790\":1}}],[\"同时b也使用该账户进行消费2000元\",{\"1\":{\"1754\":1}}],[\"同时执行多个任务\",{\"1\":{\"1690\":1}}],[\"同时栈内存中\",{\"1\":{\"1550\":1}}],[\"同时还可以重写默认的方法\",{\"1\":{\"1521\":1}}],[\"同时父类和子类的标识符执指向同一地址\",{\"1\":{\"1408\":1}}],[\"同时使用时\",{\"1\":{\"1383\":1}}],[\"同时就数组的值成为垃圾\",{\"1\":{\"1227\":1}}],[\"同时数组堆中的值成为垃圾\",{\"1\":{\"1227\":1}}],[\"同时数据库的性能往往是服务器的瓶颈\",{\"1\":{\"462\":1}}],[\"同时有一个包含comparator的重构方法\",{\"1\":{\"894\":1}}],[\"同时将原有数组中的元素复制到新的数组中\",{\"1\":{\"694\":1}}],[\"同时在栈内存中\",{\"1\":{\"1548\":1}}],[\"同时在配置文件中提供了很多配置项\",{\"1\":{\"558\":1}}],[\"同时在web页面可以看到\",{\"1\":{\"448\":1}}],[\"同时\",{\"1\":{\"513\":1,\"674\":1,\"1177\":1,\"1277\":1,\"1951\":1,\"2285\":1,\"2322\":1,\"2387\":1,\"3110\":1}}],[\"同时spring通过\",{\"1\":{\"499\":1}}],[\"同时对多个环境进行加载使其生效\",{\"1\":{\"278\":1}}],[\"同时目录由灰色变为绿色\",{\"1\":{\"225\":1}}],[\"同时也会写入到\",{\"1\":{\"3527\":1}}],[\"同时也是request域对象\",{\"1\":{\"2921\":1}}],[\"同时也是springboot启动类\",{\"1\":{\"207\":1}}],[\"同时也不会影响程序的性能\",{\"1\":{\"2679\":1}}],[\"同时也描述了程序各个对象间的通信方式\",{\"1\":{\"1537\":1}}],[\"同时也提高了代码的健硕性\",{\"1\":{\"1409\":1}}],[\"同时也可以给bean初始化设置默认的配置\",{\"1\":{\"556\":1}}],[\"同时也可进行来单语音播报功能\",{\"1\":{\"49\":1}}],[\"同时tomcat也不用进行配置\",{\"1\":{\"113\":1}}],[\"同时明确接口路径及请求方式\",{\"1\":{\"26\":1}}],[\"90\",{\"1\":{\"3726\":1}}],[\"9ef5\",{\"1\":{\"3712\":1}}],[\"9203\",{\"1\":{\"3335\":3,\"3338\":1,\"3339\":5,\"3340\":1}}],[\"9202和node\",{\"1\":{\"3335\":1,\"3338\":1}}],[\"9202\",{\"1\":{\"3335\":2,\"3339\":5,\"3340\":1}}],[\"9201的es服务\",{\"1\":{\"3337\":1}}],[\"9201\",{\"1\":{\"3335\":7,\"3336\":1,\"3337\":5,\"3340\":1}}],[\"9200\",{\"1\":{\"416\":1,\"3108\":2,\"3110\":2,\"3118\":1,\"3123\":1,\"3130\":1,\"3134\":1,\"3140\":1,\"3148\":1,\"3153\":1,\"3158\":1,\"3183\":1,\"3186\":1,\"3189\":1,\"3206\":1,\"3209\":1,\"3211\":1,\"3212\":1,\"3214\":1,\"3217\":1,\"3218\":1,\"3220\":1,\"3221\":1,\"3225\":1,\"3226\":1,\"3227\":1,\"3231\":1,\"3234\":1,\"3237\":1,\"3240\":1,\"3242\":1,\"3244\":1,\"3249\":1,\"3253\":1,\"3308\":1,\"3330\":1,\"3332\":1,\"3352\":1,\"3355\":1,\"3473\":1,\"3476\":1,\"3480\":1,\"3485\":1,\"3489\":1}}],[\"9501\",{\"1\":{\"3269\":1,\"3270\":1,\"3271\":1}}],[\"9500节点上存在着主分片的完整副本\",{\"1\":{\"3396\":1}}],[\"9500节点\",{\"1\":{\"3391\":1}}],[\"9500\",{\"0\":{\"3271\":1},\"1\":{\"3264\":1,\"3271\":2}}],[\"9401\",{\"1\":{\"3269\":1,\"3270\":1,\"3271\":1}}],[\"9400和node\",{\"1\":{\"3396\":1}}],[\"9400上各有一个分片被迁移到了新的\",{\"1\":{\"3391\":1}}],[\"9400\",{\"0\":{\"3270\":1,\"3279\":1,\"3283\":1},\"1\":{\"3264\":1,\"3270\":2,\"3283\":1,\"3387\":1,\"3396\":1}}],[\"9303\",{\"1\":{\"3337\":1,\"3339\":2}}],[\"9302\",{\"1\":{\"3337\":1,\"3339\":2}}],[\"9301\",{\"1\":{\"3269\":1,\"3270\":1,\"3271\":1,\"3337\":1,\"3339\":2}}],[\"9300的同时也失去了主分片\",{\"1\":{\"3396\":1}}],[\"9300和node\",{\"1\":{\"3391\":1}}],[\"9300服务添加了一个索引\",{\"1\":{\"3282\":1}}],[\"9300\",{\"0\":{\"3269\":1,\"3278\":1,\"3282\":1},\"1\":{\"3108\":1,\"3269\":3,\"3278\":1,\"3282\":1,\"3378\":1,\"3379\":1,\"3384\":1,\"3387\":1,\"3393\":1,\"3396\":1,\"3397\":1}}],[\"985\",{\"1\":{\"3154\":1}}],[\"9876\",{\"1\":{\"2483\":1}}],[\"98\",{\"1\":{\"1935\":1,\"2474\":2}}],[\"98<\",{\"1\":{\"119\":1}}],[\"97\",{\"1\":{\"824\":2,\"1102\":1,\"1114\":1,\"1134\":1,\"2194\":1}}],[\"9入\",{\"1\":{\"784\":1}}],[\"99\",{\"1\":{\"763\":1,\"1641\":1,\"2315\":1}}],[\"9632\",{\"1\":{\"3712\":1}}],[\"96\",{\"1\":{\"674\":2,\"2193\":3}}],[\"9\",{\"0\":{\"337\":1,\"648\":1,\"768\":1,\"845\":1,\"879\":1,\"913\":1,\"938\":1,\"967\":1,\"1205\":1,\"1263\":1,\"1468\":1,\"1595\":1,\"1898\":1,\"1899\":1,\"1900\":1,\"2159\":1,\"2170\":1,\"2177\":1,\"2197\":1,\"2208\":1,\"2215\":1,\"2227\":1,\"2235\":1,\"2485\":1,\"2677\":1,\"2917\":1,\"3058\":1,\"3075\":1,\"3779\":1},\"1\":{\"118\":1,\"119\":2,\"120\":1,\"133\":1,\"332\":1,\"590\":1,\"719\":1,\"720\":2,\"1034\":1,\"1082\":1,\"1203\":1,\"1223\":1,\"1225\":1,\"1227\":1,\"1242\":1,\"1641\":1,\"2175\":1,\"2176\":1,\"2184\":1,\"2185\":1,\"2206\":1,\"2207\":1,\"2216\":1,\"2243\":1,\"2351\":1,\"2487\":1,\"2488\":1,\"3108\":1,\"3194\":1,\"3324\":1,\"3342\":1,\"3394\":2,\"3562\":1,\"3656\":1,\"3664\":1,\"3667\":1,\"3668\":1,\"3670\":1,\"3673\":3,\"3743\":1}}],[\"9<\",{\"1\":{\"117\":1,\"118\":1,\"119\":1,\"123\":3,\"612\":1}}],[\"+1\",{\"1\":{\"3533\":1}}],[\"+response\",{\"1\":{\"3211\":3,\"3220\":1,\"3221\":1}}],[\"+和正则一样\",{\"1\":{\"3025\":1}}],[\"+value\",{\"1\":{\"1958\":1,\"3047\":1,\"3054\":1}}],[\"+ft\",{\"1\":{\"1810\":1}}],[\"+thread\",{\"1\":{\"1757\":1}}],[\"+num\",{\"1\":{\"1740\":1,\"1757\":1}}],[\"+name+\",{\"1\":{\"749\":1,\"1680\":1}}],[\"+ht1\",{\"1\":{\"1737\":2}}],[\"+hours\",{\"1\":{\"721\":1}}],[\"+i+\",{\"1\":{\"2296\":1}}],[\"+i\",{\"1\":{\"1720\":2,\"1737\":2,\"1810\":1,\"1817\":1,\"2296\":1}}],[\"+id\",{\"1\":{\"452\":2,\"455\":2}}],[\"+age\",{\"1\":{\"1680\":1}}],[\"+age+\",{\"1\":{\"749\":1,\"1282\":1}}],[\"+uname+\",{\"1\":{\"1282\":1}}],[\"+language\",{\"1\":{\"1258\":1}}],[\"+=\",{\"1\":{\"1144\":2,\"1145\":1,\"1181\":1,\"1189\":1,\"1283\":1,\"1810\":1}}],[\"++a1\",{\"1\":{\"1141\":1}}],[\"++\",{\"1\":{\"1141\":2}}],[\"+world\",{\"1\":{\"1382\":1}}],[\"+word\",{\"1\":{\"1060\":1}}],[\"+week\",{\"1\":{\"721\":1}}],[\"+ms\",{\"1\":{\"721\":1}}],[\"+mouse\",{\"1\":{\"550\":2,\"554\":2}}],[\"+second\",{\"1\":{\"721\":1}}],[\"+days\",{\"1\":{\"721\":1}}],[\"+年\",{\"1\":{\"721\":1}}],[\"+cat\",{\"1\":{\"550\":1,\"554\":1}}],[\"+\",{\"0\":{\"1355\":1},\"1\":{\"118\":1,\"186\":1,\"447\":2,\"489\":1,\"499\":1,\"550\":3,\"554\":3,\"668\":1,\"672\":1,\"694\":1,\"700\":1,\"721\":2,\"761\":2,\"779\":1,\"1026\":2,\"1059\":1,\"1063\":1,\"1112\":1,\"1114\":1,\"1115\":2,\"1117\":1,\"1121\":4,\"1134\":7,\"1141\":1,\"1144\":1,\"1186\":2,\"1203\":5,\"1204\":2,\"1240\":1,\"1283\":1,\"1432\":2,\"1434\":4,\"1442\":2,\"1445\":1,\"1499\":1,\"1536\":2,\"1598\":1,\"1621\":4,\"1636\":2,\"1720\":2,\"1728\":1,\"1737\":2,\"1740\":1,\"1757\":1,\"1760\":1,\"1768\":2,\"1784\":2,\"1804\":2,\"1810\":1,\"1817\":1,\"1897\":1,\"1935\":2,\"2086\":1,\"2127\":3,\"2232\":2,\"2255\":7,\"2282\":3,\"2293\":1,\"2296\":5,\"2354\":3,\"2450\":1,\"2489\":1,\"2558\":3,\"2581\":1,\"2600\":3,\"2603\":3,\"2620\":3,\"2621\":2,\"2624\":2,\"2625\":1,\"2634\":1,\"2635\":1,\"2653\":8,\"2657\":2,\"2674\":1,\"2686\":2,\"2687\":2,\"2750\":1,\"2872\":1,\"2992\":1,\"3220\":1,\"3221\":1,\"3444\":1,\"3628\":2,\"3686\":1}}],[\"><\",{\"1\":{\"3488\":1}}],[\"><br>\",{\"1\":{\"2871\":2,\"2920\":2}}],[\">custom\",{\"1\":{\"3488\":1}}],[\">compiler\",{\"1\":{\"577\":1}}],[\">磁盘\",{\"1\":{\"3449\":1}}],[\">os\",{\"1\":{\"3449\":1}}],[\">r2\",{\"1\":{\"3373\":1}}],[\">r1\",{\"1\":{\"3373\":1}}],[\">r0\",{\"1\":{\"3373\":1}}],[\">requestfacade\",{\"1\":{\"2838\":1}}],[\">ip\",{\"1\":{\"3298\":1}}],[\">integer\",{\"1\":{\"1959\":1}}],[\">int\",{\"1\":{\"767\":1}}],[\">t<\",{\"1\":{\"3253\":1}}],[\">版本\",{\"1\":{\"3124\":1}}],[\">唯一标识\",{\"1\":{\"3124\":1}}],[\">副分片数量\",{\"1\":{\"3124\":1}}],[\">创建时间\",{\"1\":{\"3124\":1}}],[\">名称\",{\"1\":{\"3124\":1}}],[\">主分片数量\",{\"1\":{\"3124\":1}}],[\">路由\",{\"1\":{\"3124\":1}}],[\">给浏览器\",{\"1\":{\"3039\":1}}],[\">给出bean的类名\",{\"1\":{\"506\":1}}],[\">点击\",{\"1\":{\"2992\":1}}],[\">服务器\",{\"1\":{\"2913\":2}}],[\">服务端\",{\"1\":{\"2207\":2}}],[\">httpservletrequest\",{\"1\":{\"2838\":1}}],[\">导入到指定module\",{\"1\":{\"2773\":1}}],[\">选择tomcat\",{\"1\":{\"2773\":1}}],[\">选这个\",{\"1\":{\"1608\":1}}],[\">+\",{\"1\":{\"2773\":1}}],[\">listener\",{\"0\":{\"2959\":1}}],[\">libraries\",{\"1\":{\"2773\":1}}],[\">local\",{\"1\":{\"2746\":1}}],[\">words\",{\"1\":{\"3488\":2}}],[\">woman\",{\"1\":{\"1419\":1}}],[\">web\",{\"1\":{\"2743\":1}}],[\">web项目\",{\"0\":{\"2732\":1}}],[\">调用\",{\"1\":{\"2567\":1}}],[\">预编译sql字符串\",{\"1\":{\"2567\":1}}],[\">种子\",{\"1\":{\"2450\":1}}],[\">e\",{\"1\":{\"2415\":1}}],[\">emp\",{\"1\":{\"2407\":1}}],[\">str\",{\"1\":{\"2463\":1}}],[\">string类型\",{\"0\":{\"1445\":1}}],[\">s1\",{\"1\":{\"2412\":1}}],[\">system\",{\"1\":{\"2403\":1}}],[\">右边\",{\"1\":{\"2362\":1,\"2366\":1}}],[\">左边\",{\"1\":{\"2362\":1,\"2366\":1}}],[\">客户端\",{\"1\":{\"2207\":2}}],[\">字节流输出\",{\"1\":{\"2090\":1}}],[\">字节流\",{\"1\":{\"2038\":1}}],[\">字符数组\",{\"1\":{\"2091\":1}}],[\">字符流输入\",{\"1\":{\"2090\":1}}],[\">字符流\",{\"1\":{\"2038\":1}}],[\">字符串\",{\"1\":{\"729\":1}}],[\">=\",{\"1\":{\"2001\":2,\"3172\":1,\"3236\":1,\"3614\":1}}],[\">是另外两个的父类\",{\"1\":{\"1991\":1}}],[\">数学中的\",{\"1\":{\"1826\":1,\"1881\":1}}],[\">数学里的\",{\"1\":{\"1826\":1}}],[\">存储无序的\",{\"1\":{\"1826\":1}}],[\">同步方法\",{\"1\":{\"1786\":1}}],[\">不能包含代码多了\",{\"1\":{\"1759\":1}}],[\">1\",{\"1\":{\"1740\":1}}],[\">默认优先级\",{\"1\":{\"1735\":1}}],[\">它们从同一堆中分配对象\",{\"1\":{\"1687\":1}}],[\">文档注释\",{\"1\":{\"1637\":1}}],[\">接口冲突\",{\"1\":{\"1517\":1}}],[\">类优先原则\",{\"1\":{\"1517\":1}}],[\">弥补了java单继承性的局限性\",{\"1\":{\"1510\":1}}],[\">评分\",{\"1\":{\"1500\":1}}],[\">办理业务\",{\"1\":{\"1500\":1}}],[\">person\",{\"1\":{\"1419\":1}}],[\">封装性\",{\"1\":{\"1273\":1}}],[\">n\",{\"1\":{\"1220\":1}}],[\">new\",{\"1\":{\"162\":1,\"2427\":1,\"2432\":1}}],[\">>\",{\"1\":{\"1157\":1}}],[\">操作系统运行\",{\"1\":{\"1015\":1}}],[\">javaweb\",{\"1\":{\"2747\":1}}],[\">java>lang>reflect>field\",{\"1\":{\"860\":1}}],[\">jvm编译\",{\"1\":{\"1015\":1}}],[\">代码\",{\"1\":{\"1015\":1}}],[\">application\",{\"1\":{\"2845\":1}}],[\">a\",{\"1\":{\"824\":1}}],[\">参数\",{\"1\":{\"785\":1}}],[\">byte\",{\"1\":{\"772\":1}}],[\">build\",{\"1\":{\"186\":1}}],[\">日期\",{\"1\":{\"730\":1}}],[\">0\",{\"1\":{\"660\":1}}],[\">后端服务器\",{\"1\":{\"614\":1}}],[\">前端服务器\",{\"1\":{\"614\":1}}],[\">开放设置集b的配置覆盖接口\",{\"1\":{\"562\":1}}],[\">将设置集b作为默认配置加载\",{\"1\":{\"562\":1}}],[\">将技术集a中具有使用条件的技术约定出来\",{\"1\":{\"562\":1}}],[\">将技术集a包含的所有技术都定义出来\",{\"1\":{\"562\":1}}],[\">初始化springboot基础环境\",{\"1\":{\"562\":1}}],[\">收集常用技术\",{\"1\":{\"562\":1}}],[\">收集spring开发者的编程习惯\",{\"1\":{\"562\":1}}],[\">缓存的时候再研究\",{\"1\":{\"488\":1,\"489\":1}}],[\">直接与数据库交互\",{\"1\":{\"462\":1}}],[\">这样就会打印sql\",{\"1\":{\"308\":1}}],[\">改成<root\",{\"1\":{\"308\":1}}],[\">mybatis\",{\"1\":{\"361\":1}}],[\">modules\",{\"1\":{\"166\":1}}],[\">map\",{\"0\":{\"13\":1,\"14\":1,\"15\":1,\"16\":1,\"17\":1,\"18\":1,\"40\":1,\"41\":1,\"42\":1,\"43\":1,\"45\":1,\"46\":1,\"56\":1,\"60\":1,\"61\":1,\"62\":1,\"63\":1,\"65\":1,\"67\":1,\"69\":1,\"71\":1,\"73\":1,\"75\":1,\"77\":1,\"79\":1,\"81\":1,\"83\":1,\"85\":1,\"87\":1,\"89\":1}}],[\">\",{\"0\":{\"421\":1,\"426\":1},\"1\":{\"117\":2,\"119\":3,\"133\":1,\"135\":1,\"166\":1,\"169\":1,\"218\":2,\"225\":1,\"281\":1,\"308\":76,\"319\":1,\"355\":1,\"361\":3,\"371\":2,\"387\":1,\"404\":1,\"406\":1,\"413\":2,\"418\":1,\"419\":1,\"422\":1,\"423\":1,\"424\":1,\"425\":1,\"428\":1,\"429\":1,\"430\":1,\"431\":1,\"432\":1,\"438\":1,\"478\":14,\"506\":9,\"511\":5,\"514\":1,\"536\":1,\"562\":2,\"574\":2,\"589\":8,\"612\":26,\"636\":3,\"647\":1,\"671\":7,\"739\":1,\"757\":1,\"836\":1,\"837\":1,\"838\":2,\"843\":2,\"848\":2,\"849\":2,\"850\":1,\"858\":1,\"859\":1,\"862\":2,\"870\":2,\"872\":2,\"873\":2,\"911\":1,\"913\":1,\"914\":1,\"930\":1,\"931\":1,\"933\":1,\"936\":1,\"1162\":1,\"1186\":1,\"1286\":1,\"1609\":1,\"1719\":1,\"1760\":1,\"1768\":1,\"1784\":1,\"1826\":1,\"1859\":1,\"1926\":2,\"1935\":1,\"1958\":1,\"1989\":1,\"1991\":1,\"1992\":1,\"1993\":1,\"1995\":1,\"1996\":3,\"2003\":2,\"2004\":1,\"2005\":2,\"2091\":1,\"2118\":2,\"2168\":2,\"2268\":1,\"2269\":1,\"2293\":1,\"2296\":1,\"2338\":1,\"2362\":2,\"2368\":1,\"2369\":1,\"2370\":1,\"2371\":2,\"2372\":1,\"2373\":1,\"2374\":1,\"2375\":1,\"2376\":1,\"2377\":1,\"2378\":1,\"2406\":1,\"2409\":1,\"2421\":1,\"2424\":1,\"2432\":1,\"2433\":1,\"2444\":1,\"2445\":1,\"2450\":1,\"2458\":2,\"2475\":1,\"2477\":2,\"2478\":2,\"2479\":1,\"2483\":1,\"2484\":1,\"2489\":1,\"2491\":4,\"2546\":1,\"2716\":1,\"2717\":1,\"2738\":1,\"2825\":1,\"2826\":3,\"2857\":4,\"2869\":1,\"2871\":4,\"2872\":1,\"2992\":5,\"3019\":2,\"3020\":2,\"3025\":11,\"3026\":2,\"3027\":3,\"3029\":41,\"3030\":5,\"3172\":1,\"3193\":1,\"3205\":2,\"3216\":1,\"3236\":1,\"3252\":1,\"3253\":1,\"3488\":8,\"3571\":1,\"3614\":1,\"3702\":3,\"3726\":1}}],[\"版本的选择\",{\"1\":{\"3554\":1}}],[\"版本的javaapi\",{\"1\":{\"3201\":1}}],[\"版本开始\",{\"1\":{\"3292\":1,\"3326\":1}}],[\"版本说明\",{\"0\":{\"2351\":1}}],[\"版本选择\",{\"1\":{\"1027\":1,\"2700\":1}}],[\"版本可以直接复制\",{\"1\":{\"590\":1}}],[\"版本\",{\"1\":{\"429\":1,\"1059\":1,\"3020\":1,\"3105\":1,\"3135\":1,\"3144\":1,\"3149\":1,\"3351\":1,\"3478\":1,\"3497\":1}}],[\"版本号与服务器开启的es服务版本号一致\",{\"1\":{\"414\":1}}],[\"版本不兼容\",{\"0\":{\"358\":1}}],[\"版本与当前使用的springboot版本保持一致\",{\"1\":{\"319\":1,\"323\":1}}],[\"版本与springboot版本一致\",{\"1\":{\"169\":1}}],[\"版本由\",{\"1\":{\"135\":1}}],[\"版本组合是最佳的\",{\"1\":{\"120\":1}}],[\"版本采用父类中的版本\",{\"1\":{\"115\":1}}],[\"版本为辅\",{\"1\":{\"80\":1,\"81\":1}}],[\"要添加到副本集的新成员\",{\"1\":{\"3673\":1}}],[\"要更新的内容\",{\"1\":{\"3594\":1}}],[\"要插入到集合中的文档或文档数组\",{\"1\":{\"3586\":1}}],[\"要插入的数据=实体类\",{\"1\":{\"428\":1}}],[\"要是将一个用户添加到这个数据库\",{\"1\":{\"3574\":1}}],[\"要是long类型\",{\"1\":{\"1611\":1}}],[\"要了解以下内容\",{\"1\":{\"3507\":1}}],[\"要计算好分片数量\",{\"1\":{\"3506\":1}}],[\"要下载\",{\"1\":{\"3479\":1}}],[\"要在创建索引的时候就确定好主分片的数量\",{\"1\":{\"3401\":1}}],[\"要在start前设置name\",{\"1\":{\"1728\":1}}],[\"要有相同的集群名\",{\"1\":{\"3355\":1}}],[\"要修改成4080\",{\"1\":{\"3348\":1}}],[\"要与主机名对应\",{\"1\":{\"3298\":1}}],[\"要删除的索引名\",{\"1\":{\"3129\":1}}],[\"要查看的文档\",{\"1\":{\"3139\":1,\"3157\":1}}],[\"要查看的索引名\",{\"1\":{\"3122\":1}}],[\"要查询的文档的\",{\"1\":{\"409\":1}}],[\"要查询的字段\",{\"1\":{\"405\":1}}],[\"要创建的索引名\",{\"1\":{\"3117\":1}}],[\"要创建一个\",{\"1\":{\"984\":1}}],[\"要先将dtd文档引入xml文档中\",{\"1\":{\"3026\":1}}],[\"要先创建相关的数据表操作类\",{\"1\":{\"2642\":1}}],[\"要实现servlet接口\",{\"1\":{\"2772\":1}}],[\"要关闭之前通过双击打开的tomcat服务\",{\"1\":{\"2758\":1}}],[\"要访问的文件是index\",{\"1\":{\"2715\":1}}],[\"要启用pscache\",{\"1\":{\"2674\":1}}],[\"要填sql中的date对象\",{\"1\":{\"2570\":1}}],[\"要包装stu非null\",{\"1\":{\"2500\":1}}],[\"要使用参数1的类\",{\"1\":{\"2400\":1}}],[\"要调用的方法\",{\"1\":{\"2340\":1}}],[\"要调用mapper接口的selectpage方法\",{\"1\":{\"627\":1}}],[\"要同时new很多对象\",{\"1\":{\"2253\":1}}],[\"要同时引入\",{\"1\":{\"319\":1}}],[\"要指定监听的接口\",{\"1\":{\"2232\":1}}],[\"要注意的是\",{\"1\":{\"2153\":1}}],[\"要操作的文件\",{\"1\":{\"2133\":1}}],[\"要写出字符流\",{\"1\":{\"2036\":1}}],[\"要读取字符流\",{\"1\":{\"2033\":1}}],[\"要不用\",{\"1\":{\"1969\":1}}],[\"要综合考虑效率和\",{\"1\":{\"1899\":1}}],[\"要重新获得监控权\",{\"1\":{\"1800\":1}}],[\"要重新打包吗\",{\"1\":{\"255\":1}}],[\"要避免出现死锁\",{\"1\":{\"1787\":1}}],[\"要将unlock\",{\"1\":{\"1783\":1}}],[\"要加到\",{\"1\":{\"1669\":1}}],[\"要检测分母为0\",{\"1\":{\"1564\":1}}],[\"要\",{\"1\":{\"1506\":1}}],[\"要保证输入的类型是正确的\",{\"1\":{\"1447\":1}}],[\"要保证效果最佳且没有bug\",{\"1\":{\"114\":1}}],[\"要想将字节数据写回到浏览器\",{\"1\":{\"2893\":1}}],[\"要想将字符数据写回到浏览器\",{\"1\":{\"2887\":1}}],[\"要想了解requestfacade中都提供了哪些方法\",{\"1\":{\"2837\":1}}],[\"要想编写一个servlet就必须要实现servlet接口\",{\"1\":{\"2805\":1}}],[\"要想修改tomcat启动的端口号\",{\"1\":{\"2705\":1}}],[\"要想实现多线程\",{\"1\":{\"1749\":1}}],[\"要想访问父类中的同名属性就要使用super关键字了\",{\"1\":{\"1377\":1}}],[\"要想得到更强更便捷的正则匹配操作\",{\"1\":{\"998\":1}}],[\"要拆分的字符序列\",{\"1\":{\"1001\":1}}],[\"要匹配的字符序列\",{\"1\":{\"1000\":1}}],[\"要设置哪个对象的属性\",{\"1\":{\"865\":1}}],[\"要设置的属性的值\",{\"1\":{\"864\":1}}],[\"要获取哪个对象的属性\",{\"1\":{\"864\":1}}],[\"要求是一个查询语句\",{\"1\":{\"2674\":1}}],[\"要求是相同类的对象\",{\"1\":{\"1903\":1}}],[\"要求接口中的抽象方法中\",{\"1\":{\"2400\":1}}],[\"要求接口中的抽象方法的形参列表和返回值类型与方法引用的方法的形参列表和返回值类型相同\",{\"1\":{\"2400\":1}}],[\"要求将读取到的整行字符串转成大写输出\",{\"1\":{\"2118\":1}}],[\"要求key必须是由同一个类创建的对象\",{\"1\":{\"1934\":1}}],[\"要求字符串必须是枚举类对象的\",{\"1\":{\"1627\":1}}],[\"要求此对象也必须声明为静态的\",{\"1\":{\"1488\":1}}],[\"要求此局部变量声明为final的\",{\"1\":{\"1458\":1}}],[\"要求obj所在类要重写equals\",{\"1\":{\"910\":1}}],[\"要求\",{\"1\":{\"748\":1,\"1720\":1,\"1759\":1,\"1894\":1,\"1994\":1,\"2071\":1,\"2118\":1,\"2285\":1,\"2321\":1,\"2402\":1,\"2408\":1,\"2411\":1,\"2414\":1,\"2420\":1,\"2423\":1,\"2426\":1,\"2431\":1}}],[\"要开发的内容\",{\"1\":{\"614\":1}}],[\"要做详细架构和工具类的\",{\"1\":{\"421\":1,\"426\":1}}],[\"要么实现接口\",{\"1\":{\"1502\":1,\"1506\":1}}],[\"要么都声明为static的\",{\"1\":{\"1375\":1}}],[\"要么是false\",{\"1\":{\"1148\":1}}],[\"要么通过\",{\"1\":{\"393\":1}}],[\"要么手动添加\",{\"1\":{\"393\":1}}],[\"要考虑到用户体验\",{\"1\":{\"313\":1}}],[\"要用到一堆依赖\",{\"1\":{\"124\":1}}],[\"要根据项目的其他组件依赖进行选择\",{\"1\":{\"96\":1}}],[\"ⅱ\",{\"0\":{\"114\":1,\"150\":1,\"213\":1,\"230\":1,\"249\":1,\"261\":1,\"273\":1,\"291\":1,\"370\":1,\"579\":1,\"596\":1,\"654\":1,\"698\":1,\"712\":1,\"743\":1,\"771\":1,\"796\":1,\"820\":1,\"847\":1,\"920\":1,\"953\":1,\"979\":1,\"993\":1,\"1034\":1,\"1052\":1,\"1077\":1,\"1091\":1,\"1142\":1,\"1173\":1,\"1215\":1,\"1254\":1,\"1275\":1,\"1308\":1,\"1333\":1,\"1369\":1,\"1410\":1,\"1436\":1,\"1474\":1,\"1501\":1,\"1530\":1,\"1553\":1,\"1564\":1,\"1574\":1,\"1605\":1,\"1623\":1,\"1639\":1,\"1691\":1,\"1712\":1,\"1758\":1,\"1811\":1,\"1825\":1,\"1849\":1,\"1863\":1,\"1901\":1,\"1919\":1,\"1956\":1,\"1975\":1,\"1988\":1,\"2019\":1,\"2046\":1,\"2075\":1,\"2093\":1,\"2119\":1,\"2169\":1,\"2188\":1,\"2201\":1,\"2233\":1,\"2278\":1,\"2288\":1,\"2331\":1,\"2367\":1,\"2391\":1,\"2401\":1,\"2442\":1,\"2498\":1,\"2511\":1,\"2540\":1,\"2563\":1,\"2645\":1,\"2670\":1,\"2685\":1,\"2699\":1,\"2728\":1,\"2783\":1,\"2799\":1,\"2821\":1,\"2834\":1,\"2847\":1,\"2886\":1,\"2905\":1,\"2927\":1,\"2961\":1,\"2988\":1,\"3005\":1,\"3021\":1,\"3038\":1,\"3082\":1,\"3544\":1,\"3559\":1,\"3568\":1,\"3579\":1,\"3594\":1,\"3608\":1,\"3622\":1,\"3648\":1,\"3655\":1,\"3681\":1,\"3716\":1,\"3736\":1}}],[\"所见即所得\",{\"1\":{\"3571\":1}}],[\"所做的更改已经丢失\",{\"1\":{\"3494\":1}}],[\"所存入的对象即为request对象\",{\"1\":{\"2832\":1}}],[\"所生成的元素序列\",{\"1\":{\"2438\":1}}],[\"所提供的方法性能也不高\",{\"1\":{\"2163\":1}}],[\"所占用\",{\"1\":{\"1790\":1}}],[\"所标注\",{\"1\":{\"1680\":2}}],[\"所标注内容\",{\"1\":{\"1673\":1}}],[\"所谓\",{\"1\":{\"2224\":1}}],[\"所谓泛型\",{\"1\":{\"1948\":1}}],[\"所谓javabean\",{\"1\":{\"1530\":1}}],[\"所谓类的单例设计模式\",{\"1\":{\"1487\":1}}],[\"所谓整合其实就是使用springboot技术去管理其他技术\",{\"1\":{\"354\":1}}],[\"所花费的时间为\",{\"1\":{\"1204\":1}}],[\"所在包\",{\"1\":{\"622\":1}}],[\"所以仲裁器可\",{\"1\":{\"3646\":1}}],[\"所以它既可以存储比较复杂的数据类型\",{\"1\":{\"3546\":1}}],[\"所以很利于缓存\",{\"1\":{\"3504\":1}}],[\"所以段越多\",{\"1\":{\"3456\":1}}],[\"所以既不能从把文档从旧的段中移除\",{\"1\":{\"3447\":1}}],[\"所以新的主节点立即将备份的副分片提升为主分片\",{\"1\":{\"3396\":1}}],[\"所以发生的第一件事情就是选举一个新的主节点\",{\"1\":{\"3396\":1}}],[\"所以当你拥有越多的副本分片时\",{\"1\":{\"3393\":1}}],[\"所以当集群只拥有一个主节点的情况下\",{\"1\":{\"3375\":1}}],[\"所以上图只有两个分片\",{\"1\":{\"3373\":1}}],[\"所以可以直接将请求转发到需要的节点上\",{\"1\":{\"3403\":1}}],[\"所以可以互相通信\",{\"1\":{\"3338\":1}}],[\"所以可以合并成一个异常\",{\"1\":{\"1600\":1}}],[\"所以是1\",{\"1\":{\"3278\":2}}],[\"所以是数组\",{\"1\":{\"3185\":1}}],[\"所以生产环境中\",{\"1\":{\"3259\":1}}],[\"所以hits里不会有查询结果\",{\"1\":{\"3249\":1}}],[\"所以默认不会采用电脑里的jdk\",{\"1\":{\"3107\":1}}],[\"所以默认重启后session将失效\",{\"1\":{\"3071\":1}}],[\"所以session本质是在内存中的\",{\"1\":{\"3060\":1}}],[\"所以stringbuffer的方法上都会带\",{\"1\":{\"697\":1}}],[\"所以框架的使用者可以随便配置xml\",{\"1\":{\"3022\":1}}],[\"所以地址会发生变化\",{\"1\":{\"2912\":1}}],[\"所以会出现乱码\",{\"1\":{\"2876\":1}}],[\"所以map的值的类型为string数组\",{\"1\":{\"2868\":1}}],[\"所以此处就不需要手动关闭流了\",{\"1\":{\"2859\":1}}],[\"所以需要把请求方式变更为post\",{\"1\":{\"2852\":1}}],[\"所以需要进行清理\",{\"1\":{\"1705\":1}}],[\"所以tomcat提供了方法参数接口的具体实现类\",{\"1\":{\"2837\":1}}],[\"所以我们需要为操作系统的文件缓存系统留下足够的空间\",{\"1\":{\"3517\":1}}],[\"所以我们可以使用别人提供好的方法来简化代码的开发\",{\"1\":{\"2895\":1}}],[\"所以我们可以从request对象中获取请求的相关参数\",{\"1\":{\"2832\":1}}],[\"所以我们自定义servlet\",{\"1\":{\"2809\":1}}],[\"所以我们通常就不针对运行时异常编写try\",{\"1\":{\"1595\":1}}],[\"所以类中必然会重写service方法供tomcat\",{\"1\":{\"2785\":1}}],[\"所以不会随机存入用一个分片\",{\"1\":{\"3399\":1}}],[\"所以不配置java环境也可以\",{\"1\":{\"3286\":1,\"3317\":1}}],[\"所以不用配置集群信息\",{\"1\":{\"3285\":1}}],[\"所以不用担心没有起别名\",{\"1\":{\"2602\":1}}],[\"所以不必关心涉及具体平台的问题\",{\"1\":{\"2982\":1}}],[\"所以不要手动关闭流\",{\"1\":{\"2891\":1}}],[\"所以不要同时出现\",{\"1\":{\"1297\":1}}],[\"所以调用的是单参构造器\",{\"1\":{\"2425\":1}}],[\"所以调用的是student类的\",{\"1\":{\"1405\":1}}],[\"所以方法引用\",{\"1\":{\"2396\":1}}],[\"所以返回数组\",{\"1\":{\"2298\":1}}],[\"所以无法确定变量的类型\",{\"1\":{\"2253\":1}}],[\"所以无法创建该类的对象\",{\"1\":{\"880\":1}}],[\"所以只关外层流也可以\",{\"1\":{\"2081\":1}}],[\"所以应该件\",{\"1\":{\"2037\":1}}],[\"所以应该使用\",{\"1\":{\"1619\":1}}],[\"所以在jdk1\",{\"1\":{\"1947\":1}}],[\"所以在开发中\",{\"1\":{\"1146\":1}}],[\"所以总会找到两个不同的输入拥有相同的哈希\",{\"1\":{\"1899\":1}}],[\"所以java采用了一种特殊的算法\",{\"1\":{\"1890\":1}}],[\"所以java采用的别的方法\",{\"1\":{\"1889\":1}}],[\"所以jdk对它进行了优化\",{\"1\":{\"1124\":1}}],[\"所以把while\",{\"1\":{\"1768\":1}}],[\"所以要根据实际业务需求来设置\",{\"1\":{\"3197\":1}}],[\"所以要用try\",{\"1\":{\"2051\":1}}],[\"所以要这样写\",{\"1\":{\"1740\":1}}],[\"所以要嵌套一个try\",{\"1\":{\"1592\":1}}],[\"所以多进程要比多线程健壮\",{\"1\":{\"1688\":1}}],[\"所以这些线程的run方法操作的是同一个对象的成员变量\",{\"1\":{\"1743\":1}}],[\"所以这里不用处理异常\",{\"1\":{\"1600\":1}}],[\"所以这个交换值的函数失败了\",{\"1\":{\"1292\":1}}],[\"所以基本数据类型在赋值的时候\",{\"1\":{\"1555\":1}}],[\"所以该方法只会执行一次\",{\"1\":{\"2802\":1}}],[\"所以该方法必须是static的\",{\"1\":{\"1541\":1}}],[\"所以该方法的访问权限必须是public\",{\"1\":{\"1541\":1}}],[\"所以该文件默认是空的\",{\"1\":{\"137\":1}}],[\"所以理论上无法创建匿名对象\",{\"1\":{\"1497\":1}}],[\"所以系统进行了缓存\",{\"1\":{\"1430\":1}}],[\"所以才可以看到内存中有父类中的结构\",{\"1\":{\"1392\":1}}],[\"所以认为不可以继承\",{\"1\":{\"1366\":1}}],[\"所以认为可以继承\",{\"1\":{\"1366\":1}}],[\"所以其实二维元素的值是一个内存地址\",{\"1\":{\"1230\":1}}],[\"所以其后的字符具有特殊的意义\",{\"1\":{\"985\":1}}],[\"所以一定不要忘了迭代条件\",{\"1\":{\"1183\":1}}],[\"所以一个连接可以被多线程复用\",{\"1\":{\"382\":1}}],[\"所以也可以通过\",{\"1\":{\"3202\":1}}],[\"所以也可以很方便的进行调用\",{\"1\":{\"880\":1}}],[\"所以也要求表达式1和表达式2的数据类型要一样\",{\"1\":{\"1161\":1}}],[\"所以6取反的结果是\",{\"1\":{\"1157\":1}}],[\"所以结果是0\",{\"1\":{\"1145\":1}}],[\"所以机器可以只有加法而没有减法\",{\"1\":{\"1121\":1}}],[\"所以安装了jdk\",{\"1\":{\"1025\":1}}],[\"所以集合元素如果都相同\",{\"1\":{\"915\":1}}],[\"所以\",{\"1\":{\"742\":1,\"985\":1,\"1407\":1,\"1531\":1,\"1899\":1,\"1912\":2,\"1916\":1,\"2248\":1,\"2285\":1,\"3515\":1,\"3518\":1}}],[\"所以getclassname\",{\"1\":{\"525\":1}}],[\"所以整合后操作肯定要简化一些\",{\"1\":{\"354\":1}}],[\"所以项目启动时间很长\",{\"1\":{\"332\":1}}],[\"所以内容是空白的\",{\"1\":{\"321\":1}}],[\"所以想要查看sql语句的话\",{\"1\":{\"308\":1}}],[\"所以运行时提示找不到主清单属性\",{\"1\":{\"247\":1}}],[\"所以仅仅运行restart类加载即可\",{\"1\":{\"183\":1}}],[\"所以没有深入探索复杂内容\",{\"1\":{\"84\":1,\"85\":1}}],[\"所有数据库用户角色\",{\"1\":{\"3703\":1}}],[\"所有数据库连接对象的父类都是\",{\"1\":{\"1401\":1}}],[\"所有存储在集合中的数据都是\",{\"1\":{\"3583\":1}}],[\"所有对象都分配在堆上\",{\"1\":{\"3504\":1}}],[\"所有已知的段按顺序被查询\",{\"1\":{\"3445\":1}}],[\"所有单词的倒排列表往往顺序地存储在磁盘的某个文件里\",{\"1\":{\"3431\":1}}],[\"所有单词的首字母大写\",{\"1\":{\"1083\":1}}],[\"所有新近被索引的文档都将会保存在主分片上\",{\"1\":{\"3388\":1}}],[\"所有\",{\"1\":{\"3382\":1}}],[\"所有登录方式都要进行身份验证\",{\"1\":{\"3309\":1}}],[\"所有http\",{\"1\":{\"3307\":1,\"3327\":1}}],[\"所有主分片都正常运行\",{\"1\":{\"3278\":1}}],[\"所有主分片和副本分片都正常运行\",{\"1\":{\"3278\":1}}],[\"所有加入集群的节点信息将会报错到data目录\",{\"1\":{\"3274\":1}}],[\"所有满足条件的文档都会被删除\",{\"1\":{\"3152\":1}}],[\"所有涉及到搜索的场景都可以使用es\",{\"1\":{\"3112\":1}}],[\"所有用户的所有请求数据\",{\"1\":{\"2937\":1}}],[\"所有用户访问后\",{\"1\":{\"2695\":1}}],[\"所有页面都可以获取session中的数据\",{\"1\":{\"2923\":1}}],[\"所有配置项都有默认值\",{\"1\":{\"2820\":1}}],[\"所有配置文件都不需要管\",{\"1\":{\"113\":1}}],[\"所有函数必须以方法的形式属于某个类\",{\"1\":{\"2381\":1}}],[\"所有动态代理类的父类\",{\"0\":{\"2337\":1}}],[\"所有需要访问和使用类数据只能通过这个class对象\",{\"1\":{\"2274\":1}}],[\"所有线程\",{\"1\":{\"1801\":1}}],[\"所有线程开始重新争抢这把锁\",{\"1\":{\"1771\":1}}],[\"所有非静态方法共用同一把锁\",{\"1\":{\"1772\":1}}],[\"所有没有默认值的成员\",{\"1\":{\"1647\":1}}],[\"所有基本类型\",{\"1\":{\"1646\":1}}],[\"所有基本的sql操作方法就自动添加了\",{\"1\":{\"373\":1}}],[\"所有属性\",{\"1\":{\"1530\":1}}],[\"所有类都是引用数据类型\",{\"1\":{\"1256\":1}}],[\"所有代码都要归属为一个对象\",{\"1\":{\"1253\":1}}],[\"所有case子句中的常量值互不相同\",{\"1\":{\"1175\":1}}],[\"所有字母都大写\",{\"1\":{\"1083\":1}}],[\"所有打开的流资源\",{\"1\":{\"819\":1}}],[\"所有number类的子类都实现了comparable接口\",{\"1\":{\"773\":1}}],[\"所有包装类\",{\"1\":{\"771\":1}}],[\"所有find方法也可以进行各种复杂的查询\",{\"1\":{\"410\":1}}],[\"所有的索引和文档数据是存储在本地的磁盘中\",{\"1\":{\"3501\":1}}],[\"所有的字符集都是和具体编码方案绑定在一起的\",{\"1\":{\"2111\":1}}],[\"所有的文档\",{\"1\":{\"3402\":1}}],[\"所有的文档都会自动添加一个\",{\"1\":{\"401\":1}}],[\"所有的文字都用两个字节来表示\",{\"1\":{\"2109\":1}}],[\"所有的entry构成的集合是set\",{\"1\":{\"1912\":1}}],[\"所有的value构成的集合是collection\",{\"1\":{\"1912\":1}}],[\"所有的key构成的集合是set\",{\"1\":{\"1912\":1}}],[\"所有的对象实例以及数组都要在堆上分配内存\",{\"1\":{\"1546\":1}}],[\"所有的java类具有java\",{\"1\":{\"1364\":1}}],[\"所有的java类\",{\"1\":{\"1364\":1}}],[\"所有的方法必须定义在类里\",{\"1\":{\"1276\":1}}],[\"所有的定时任务都会停止\",{\"1\":{\"494\":1}}],[\"所有的服务器将不再设置自己的配置文件\",{\"1\":{\"268\":1}}],[\"所有的依赖都是没有版本的\",{\"1\":{\"116\":1}}],[\"所有springboot项目依赖的jar包都在这里了\",{\"1\":{\"244\":1}}],[\"运转\",{\"1\":{\"3507\":1}}],[\"运算时会\",{\"1\":{\"1426\":1}}],[\"运算符来实现\",{\"1\":{\"3598\":1}}],[\"运算符优先级\",{\"0\":{\"1164\":1}}],[\"运算符\",{\"0\":{\"1137\":1}}],[\"运算符两边习惯性各加一个空格\",{\"1\":{\"1063\":1}}],[\"运算的结构是将这些值连接起来了\",{\"1\":{\"1134\":1}}],[\"运算的规则\",{\"0\":{\"1112\":1}}],[\"运算\",{\"1\":{\"778\":1}}],[\"运维信息记录使用warn即可\",{\"1\":{\"293\":1}}],[\"运维工程师\",{\"1\":{\"33\":1}}],[\"运营期记录信息\",{\"1\":{\"287\":1}}],[\"运行周期\",{\"1\":{\"3456\":1}}],[\"运行所有ip访问\",{\"1\":{\"3307\":1}}],[\"运行其他其他ip访问restful\",{\"1\":{\"3304\":1}}],[\"运行在服务器端\",{\"1\":{\"2770\":1}}],[\"运行在jvm\",{\"1\":{\"1013\":1}}],[\"运行目录\",{\"0\":{\"2721\":1}}],[\"运行异常\",{\"0\":{\"1575\":1,\"1576\":1,\"1579\":1,\"1580\":1,\"1581\":1,\"1582\":1}}],[\"运行到这里\",{\"1\":{\"1428\":1}}],[\"运行时类的属性\",{\"1\":{\"2317\":1}}],[\"运行时类的对象\",{\"0\":{\"2284\":1}}],[\"运行时类\",{\"0\":{\"2283\":1}}],[\"运行时类型由实际赋给该变量的对象决定\",{\"1\":{\"1395\":1}}],[\"运行时结构不可变的语言就是静态语言\",{\"1\":{\"2247\":1}}],[\"运行时就不会产生\",{\"1\":{\"1951\":1}}],[\"运行时动态处理\",{\"1\":{\"1637\":1}}],[\"运行时被读取\",{\"1\":{\"1635\":1}}],[\"运行时出现了异常\",{\"1\":{\"1604\":1}}],[\"运行时异常不会报编译时错误\",{\"1\":{\"1609\":1}}],[\"运行时异常的排查\",{\"0\":{\"1604\":1}}],[\"运行时异常\",{\"0\":{\"1573\":1},\"1\":{\"1571\":1,\"1595\":1,\"1608\":1}}],[\"运行时才会发生\",{\"1\":{\"1571\":1}}],[\"运行时执行的是右边\",{\"1\":{\"1398\":1}}],[\"运行看右边\",{\"1\":{\"1395\":1}}],[\"运行class文件时\",{\"1\":{\"1045\":1}}],[\"运行代码时可能会报错\",{\"1\":{\"3210\":1}}],[\"运行代码\",{\"0\":{\"1041\":1}}],[\"运行环境\",{\"1\":{\"1024\":1}}],[\"运行的类\",{\"1\":{\"2263\":1}}],[\"运行的是编译后的\",{\"1\":{\"1041\":1}}],[\"运行的服务\",{\"1\":{\"314\":1}}],[\"运行的情况则通过各种各样的指标数据反馈给监控人员\",{\"1\":{\"312\":1}}],[\"运行堆栈信息\",{\"1\":{\"292\":1}}],[\"运行报错\",{\"1\":{\"247\":1}}],[\"运行当前工程时会使用依赖的jar包\",{\"1\":{\"247\":1}}],[\"运行\",{\"0\":{\"237\":1},\"1\":{\"1038\":1,\"1616\":1,\"1749\":1}}],[\"运行机制\",{\"0\":{\"158\":1}}],[\"运行main方法就可以启动项目\",{\"1\":{\"127\":1}}],[\"运行启动类时会运行当前工程的内容\",{\"1\":{\"247\":1}}],[\"运行启动类时\",{\"1\":{\"165\":1}}],[\"运行启动类\",{\"1\":{\"110\":1}}],[\"ⅰ\",{\"0\":{\"108\":1,\"145\":1,\"199\":1,\"222\":1,\"234\":1,\"255\":1,\"270\":1,\"286\":1,\"360\":1,\"573\":1,\"591\":1,\"650\":1,\"684\":1,\"706\":1,\"739\":1,\"759\":1,\"787\":1,\"812\":1,\"832\":1,\"880\":1,\"901\":1,\"941\":1,\"978\":1,\"988\":1,\"1022\":1,\"1037\":1,\"1065\":1,\"1085\":1,\"1138\":1,\"1166\":1,\"1206\":1,\"1249\":1,\"1269\":1,\"1299\":1,\"1325\":1,\"1359\":1,\"1394\":1,\"1422\":1,\"1469\":1,\"1493\":1,\"1523\":1,\"1545\":1,\"1558\":1,\"1570\":1,\"1597\":1,\"1615\":1,\"1633\":1,\"1682\":1,\"1708\":1,\"1752\":1,\"1806\":1,\"1819\":1,\"1834\":1,\"1857\":1,\"1880\":1,\"1908\":1,\"1945\":1,\"1961\":1,\"1984\":1,\"2007\":1,\"2043\":1,\"2073\":1,\"2088\":1,\"2115\":1,\"2160\":1,\"2178\":1,\"2198\":1,\"2228\":1,\"2272\":1,\"2284\":1,\"2319\":1,\"2358\":1,\"2380\":1,\"2395\":1,\"2435\":1,\"2494\":1,\"2510\":1,\"2534\":1,\"2554\":1,\"2641\":1,\"2659\":1,\"2678\":1,\"2693\":1,\"2725\":1,\"2776\":1,\"2792\":1,\"2817\":1,\"2829\":1,\"2843\":1,\"2882\":1,\"2898\":1,\"2918\":1,\"2956\":1,\"2978\":1,\"3001\":1,\"3015\":1,\"3032\":1,\"3081\":1,\"3535\":1,\"3553\":1,\"3567\":1,\"3573\":1,\"3584\":1,\"3603\":1,\"3618\":1,\"3638\":1,\"3650\":1,\"3677\":1,\"3706\":1,\"3732\":1}}],[\"文本索引\",{\"1\":{\"3621\":1}}],[\"文本查询\",{\"1\":{\"3542\":1}}],[\"文本分类等\",{\"1\":{\"3114\":1}}],[\"文本\",{\"1\":{\"2932\":1,\"2979\":1}}],[\"文本文件也可以做为字节流进行io\",{\"1\":{\"2092\":1}}],[\"文本文件读取\",{\"0\":{\"2052\":1}}],[\"文本文件\",{\"1\":{\"2038\":1}}],[\"文字==字符集转码==>计算机能够识别的二进制\",{\"1\":{\"1103\":1}}],[\"文件设计\",{\"0\":{\"3654\":1}}],[\"文件路径信息\",{\"1\":{\"3355\":1}}],[\"文件夹\",{\"1\":{\"3264\":1,\"3558\":1}}],[\"文件启动\",{\"1\":{\"3107\":1}}],[\"文件目录\",{\"1\":{\"3107\":1,\"3653\":1}}],[\"文件记录量达到数十万或数百万个甚至更多\",{\"1\":{\"3098\":1}}],[\"文件到一个文件\",{\"1\":{\"2979\":1}}],[\"文件可能存在于以下三个地方\",{\"1\":{\"2941\":1}}],[\"文件的时候自动创建的\",{\"1\":{\"2981\":1}}],[\"文件的内容中\",{\"1\":{\"2981\":1}}],[\"文件的工作路径\",{\"0\":{\"2941\":1}}],[\"文件的复制\",{\"0\":{\"2065\":1},\"1\":{\"2168\":1}}],[\"文件选择\",{\"1\":{\"2700\":1}}],[\"文件大小的限制\",{\"0\":{\"2610\":1}}],[\"文件结束符\",{\"1\":{\"2214\":1}}],[\"文件内容加上数字化签名\",{\"1\":{\"2983\":1}}],[\"文件内容\",{\"1\":{\"2082\":1}}],[\"文件内容和自动创建的一样\",{\"1\":{\"106\":1}}],[\"文件和目录\",{\"1\":{\"2008\":1}}],[\"文件和目录创建的路径和名字就是file对象的路径和名字\",{\"1\":{\"802\":1,\"2018\":1}}],[\"文件和文件目录路径的抽象表示形式\",{\"1\":{\"2008\":1}}],[\"文件复制开启\",{\"1\":{\"1692\":1}}],[\"文件中被标记为删除的文档将不会被写入新段\",{\"1\":{\"3528\":1}}],[\"文件中被标记删除\",{\"1\":{\"3447\":1}}],[\"文件中会列出这些被删除文档的段信息\",{\"1\":{\"3447\":1}}],[\"文件中\",{\"1\":{\"1654\":2}}],[\"文件传输失败\",{\"1\":{\"1592\":1}}],[\"文件打开失败\",{\"1\":{\"1592\":1}}],[\"文件进行\",{\"1\":{\"1038\":1}}],[\"文件进行编译\",{\"1\":{\"1038\":1}}],[\"文件对象\",{\"1\":{\"822\":1}}],[\"文件不存在会返回false\",{\"1\":{\"810\":1}}],[\"文件重命名\",{\"1\":{\"807\":1}}],[\"文件创建失败\",{\"1\":{\"803\":1}}],[\"文件创建成功\",{\"1\":{\"803\":1}}],[\"文件已存在\",{\"1\":{\"803\":1}}],[\"文件是可以没有后缀的\",{\"1\":{\"802\":1,\"2018\":1}}],[\"文件\",{\"1\":{\"342\":1,\"1038\":1,\"2574\":1,\"2716\":1,\"2981\":1,\"3073\":1,\"3352\":1,\"3353\":1,\"3447\":1,\"3528\":1}}],[\"文件格式\",{\"0\":{\"139\":1}}],[\"文件名>\",{\"1\":{\"2237\":1}}],[\"文件名就是类名\",{\"1\":{\"1051\":1}}],[\"文件名区分大小写\",{\"1\":{\"1040\":1}}],[\"文件名不改\",{\"1\":{\"807\":1}}],[\"文件名\",{\"0\":{\"138\":1},\"1\":{\"822\":2,\"2048\":1,\"2060\":1,\"2069\":1,\"2238\":1,\"2550\":1}}],[\"文件坐标\",{\"1\":{\"119\":1}}],[\"文档键命名规范\",{\"0\":{\"3593\":1}}],[\"文档型数据库\",{\"1\":{\"3535\":1}}],[\"文档并没有真的被删除\",{\"1\":{\"3528\":1}}],[\"文档冲突介绍\",{\"0\":{\"3492\":1}}],[\"文档冲突\",{\"0\":{\"3491\":1}}],[\"文档分析包含下面两个过程\",{\"1\":{\"3462\":1}}],[\"文档分析包括什么\",{\"0\":{\"3462\":1}}],[\"文档分析介绍\",{\"0\":{\"3460\":1}}],[\"文档分析就是对句子\",{\"1\":{\"3459\":1}}],[\"文档分析是干嘛的\",{\"1\":{\"3459\":1}}],[\"文档分析\",{\"0\":{\"3459\":1}}],[\"文档的分页查询\",{\"0\":{\"3608\":1}}],[\"文档的插入\",{\"0\":{\"3584\":1}}],[\"文档的12字节的唯一\",{\"1\":{\"3548\":1}}],[\"文档的格式存储在磁盘上\",{\"1\":{\"3546\":1}}],[\"文档的变化并不是立即对搜索可见\",{\"1\":{\"3450\":1}}],[\"文档的新版本被索引到一个新的段中\",{\"1\":{\"3447\":1}}],[\"文档更新也是类似的操作方式\",{\"1\":{\"3447\":1}}],[\"文档7的id\",{\"1\":{\"3430\":1}}],[\"文档4的id\",{\"1\":{\"3430\":1}}],[\"文档3的id\",{\"1\":{\"3430\":1}}],[\"文档2的id\",{\"1\":{\"3430\":1}}],[\"文档→单词\",{\"1\":{\"3430\":1}}],[\"文档矩阵是表达两者之间所具有的一种包含关系的概念模型\",{\"1\":{\"3424\":1}}],[\"文档矩阵\",{\"0\":{\"3424\":1},\"1\":{\"3429\":1}}],[\"文档在主分片和副本分片都是可用的\",{\"1\":{\"3411\":1}}],[\"文档也再也找不到了\",{\"1\":{\"3401\":1}}],[\"文档会被存储到一个主分片中\",{\"1\":{\"3399\":1}}],[\"文档会自动添加一个\",{\"1\":{\"396\":1}}],[\"文档以\",{\"1\":{\"3362\":1}}],[\"文档进行统计分析\",{\"1\":{\"3187\":1,\"3247\":1}}],[\"文档原信息\",{\"1\":{\"3141\":1,\"3159\":1}}],[\"文档查询\",{\"0\":{\"3155\":1,\"3223\":1,\"3602\":1},\"1\":{\"3138\":1}}],[\"文档相当于关系型数据库中的一行数据\",{\"1\":{\"3131\":1}}],[\"文档增删改\",{\"0\":{\"3131\":1,\"3213\":1,\"3583\":1}}],[\"文档删除状态\",{\"1\":{\"3127\":1}}],[\"文档标注\",{\"1\":{\"1059\":1,\"1060\":1}}],[\"文档注释是可以写标签的<\",{\"1\":{\"1059\":1}}],[\"文档注释格式\",{\"0\":{\"1057\":1}}],[\"文档注释可以用来生成api文档\",{\"1\":{\"1056\":1}}],[\"文档注释\",{\"0\":{\"1056\":1}}],[\"文档是否存在\",{\"0\":{\"430\":1}}],[\"文档所在索引\",{\"1\":{\"428\":1,\"429\":1}}],[\"文档id\",{\"1\":{\"428\":2,\"429\":1,\"3433\":2}}],[\"文档\",{\"0\":{\"426\":1,\"428\":1,\"429\":1,\"431\":1,\"3362\":1,\"3407\":1,\"3410\":1,\"3413\":1},\"1\":{\"428\":1,\"3545\":1,\"3546\":2,\"3583\":1,\"3673\":1}}],[\"文档中还可以包含javascript代码\",{\"1\":{\"3548\":1}}],[\"文档中没有\",{\"1\":{\"408\":1}}],[\"文档中有\",{\"1\":{\"408\":1}}],[\"文档来描述当前项目的各个组成部分\",{\"1\":{\"21\":1}}],[\"文档迁移中\",{\"1\":{\"13\":1,\"14\":1,\"15\":1,\"16\":1,\"17\":1,\"18\":1,\"40\":1,\"41\":1,\"42\":1,\"43\":1,\"44\":1,\"46\":1,\"65\":1,\"67\":1,\"69\":1,\"71\":1,\"73\":1,\"75\":1,\"77\":1,\"79\":1,\"86\":1,\"87\":1,\"88\":1,\"89\":1}}],[\"前置条件\",{\"1\":{\"3739\":1}}],[\"前n个不要\",{\"1\":{\"3610\":1}}],[\"前两列不变\",{\"1\":{\"3433\":1}}],[\"前两个构造器是继承thread类创建多线程用的\",{\"1\":{\"1716\":1}}],[\"前的代码\",{\"1\":{\"2953\":2}}],[\"前者是主要面向内存\",{\"1\":{\"2439\":1}}],[\"前者是个集合接口\",{\"1\":{\"927\":1,\"1941\":1}}],[\"前\",{\"1\":{\"1141\":2}}],[\"前面的能匹配到\",{\"1\":{\"2823\":1}}],[\"前面\",{\"1\":{\"1030\":1}}],[\"前面介绍的加载bean的方式都是在容器启动阶段完成bean的加载\",{\"1\":{\"520\":1}}],[\"前后端分离\",{\"1\":{\"2976\":1}}],[\"前后端的结构在java层面交互时\",{\"1\":{\"1253\":1}}],[\"前后端联调\",{\"1\":{\"614\":1}}],[\"前后端开发协议制作\",{\"1\":{\"614\":1}}],[\"前缀为check的配置已经被载入\",{\"1\":{\"546\":1}}],[\"前一个任务的延迟会影响到之后的任务的执行\",{\"1\":{\"494\":1}}],[\"前提先创建好了数据库\",{\"1\":{\"2540\":1}}],[\"前提是有权限\",{\"1\":{\"821\":1}}],[\"前提是设置了bean注入\",{\"1\":{\"332\":1}}],[\"前提必须是已经开放的端点\",{\"1\":{\"343\":1}}],[\"前提\",{\"1\":{\"106\":1,\"586\":1,\"2344\":1,\"2703\":1,\"2790\":1}}],[\"前端>基础>js>8\",{\"1\":{\"3081\":1}}],[\"前端代码\",{\"0\":{\"2871\":1}}],[\"前端表单\",{\"0\":{\"2857\":1}}],[\"前端快照\",{\"1\":{\"2759\":1}}],[\"前端页面放到\",{\"1\":{\"648\":1}}],[\"前端页面设计\",{\"0\":{\"648\":1}}],[\"前端\",{\"0\":{\"1540\":1},\"1\":{\"53\":1,\"614\":1,\"2831\":2,\"3002\":1}}],[\"手工加载bean\",{\"1\":{\"520\":1,\"521\":1}}],[\"手动将副本从节点和仲裁从节点添加到副本集\",{\"1\":{\"3672\":1}}],[\"手动将buffer中内容写入文件\",{\"1\":{\"2074\":1}}],[\"手动刷新很有用\",{\"1\":{\"3452\":1}}],[\"手动刷新\",{\"0\":{\"3452\":1}}],[\"手动销毁\",{\"0\":{\"3074\":1}}],[\"手动打\",{\"0\":{\"2991\":1}}],[\"手动实现httpservlet的逻辑\",{\"0\":{\"2814\":1}}],[\"手动添加方式\",{\"1\":{\"2993\":1}}],[\"手动添加\",{\"1\":{\"2778\":1}}],[\"手动部署\",{\"0\":{\"2710\":1}}],[\"手动提交数据\",{\"1\":{\"2625\":1}}],[\"手动遍历\",{\"0\":{\"1843\":1}}],[\"手动开启和关闭锁\",{\"1\":{\"1785\":1}}],[\"手动生成一个异常对象\",{\"1\":{\"1606\":1}}],[\"手动抛出异常对象\",{\"1\":{\"1609\":1}}],[\"手动抛出异常的意义\",{\"0\":{\"1607\":1}}],[\"手动抛出异常\",{\"0\":{\"1605\":1}}],[\"手动的生成一个异常对象\",{\"1\":{\"1567\":1}}],[\"手动写一个空参空方法体的构造器\",{\"1\":{\"1388\":1}}],[\"手动进行配置和加载了\",{\"1\":{\"561\":1}}],[\"手动操作\",{\"0\":{\"561\":1}}],[\"手动注册一个bean\",{\"1\":{\"520\":1}}],[\"手动指定jvm内存占用为512m\",{\"1\":{\"3267\":1}}],[\"手动指定jvm的内存占用\",{\"1\":{\"3267\":1}}],[\"手动指定jvm的内存\",{\"0\":{\"3267\":1}}],[\"手动指定一个id\",{\"1\":{\"3136\":1}}],[\"手动指定哪些类要成为bean\",{\"1\":{\"506\":1}}],[\"手动指定idear上mysql的版本\",{\"1\":{\"358\":1}}],[\"手动输出日志\",{\"0\":{\"309\":1}}],[\"手动使用idea进行build\",{\"1\":{\"186\":1}}],[\"手动启动热部署\",{\"0\":{\"184\":1}}],[\"手动编辑pom\",{\"1\":{\"106\":1}}],[\"手动创建的证书可能会发生冲突\",{\"1\":{\"3292\":1,\"3326\":1}}],[\"手动创建后需要右键test目录\",{\"1\":{\"225\":1}}],[\"手动创建一个maven工程\",{\"1\":{\"106\":1}}],[\"手动创建项目\",{\"0\":{\"106\":1}}],[\"手机号\",{\"1\":{\"54\":1}}],[\"解压即可\",{\"1\":{\"3561\":1}}],[\"解压即可使用\",{\"1\":{\"2701\":1}}],[\"解压es软件包到该目录下\",{\"1\":{\"3336\":1}}],[\"解压http证书\",{\"0\":{\"3300\":1}}],[\"解压并移动http证书\",{\"0\":{\"3299\":1}}],[\"解压缩\",{\"0\":{\"3289\":1,\"3320\":1}}],[\"解压目录\",{\"1\":{\"3288\":1,\"3319\":1}}],[\"解压到\",{\"1\":{\"3285\":1}}],[\"解压后需要在mongodb目录下新建目录和配置文件\",{\"1\":{\"3561\":1}}],[\"解压后即可使用\",{\"1\":{\"3351\":1}}],[\"解压后会在\",{\"1\":{\"3300\":1}}],[\"解压后的文件放入es根目录下的plugins目录内\",{\"1\":{\"3478\":1}}],[\"解压后的目录结构还缺一个数据文件目录\",{\"1\":{\"3321\":1}}],[\"解压后的目录结构还缺一个数据文件目录和证书目录\",{\"1\":{\"3290\":1}}],[\"解压后的目录结构\",{\"1\":{\"3289\":1,\"3320\":1}}],[\"解压后的驱动文件\",{\"1\":{\"2537\":1}}],[\"解压后\",{\"1\":{\"3107\":1}}],[\"解压项目\",{\"1\":{\"105\":1}}],[\"解答\",{\"1\":{\"1741\":1}}],[\"解释\",{\"1\":{\"1520\":1,\"1521\":1}}],[\"解释运行器才会确定所要调用的具体方法\",{\"1\":{\"1407\":1}}],[\"解密解不出\",{\"1\":{\"1103\":1}}],[\"解析的ip地址\",{\"1\":{\"3298\":1}}],[\"解析\",{\"0\":{\"733\":1,\"2399\":1,\"2771\":1,\"2785\":1},\"1\":{\"730\":1,\"734\":1,\"1388\":1,\"1499\":1,\"1500\":1,\"2275\":1,\"2404\":1,\"2407\":1,\"2410\":1,\"2413\":1,\"2416\":1,\"2425\":1,\"3664\":1}}],[\"解析配置的字符串\",{\"1\":{\"418\":1}}],[\"解码就是将byte\",{\"1\":{\"674\":1}}],[\"解码\",{\"1\":{\"674\":1,\"2091\":1}}],[\"解决的问题\",{\"0\":{\"3540\":1}}],[\"解决冲突\",{\"1\":{\"3495\":1}}],[\"解决了上述问题\",{\"1\":{\"2863\":1}}],[\"解决了sql注入问题\",{\"1\":{\"2561\":1}}],[\"解决了statement的拼串问题\",{\"1\":{\"2561\":1}}],[\"解决如何高效的进行数据传输\",{\"1\":{\"2173\":1}}],[\"解决如何找到和定位主机\",{\"1\":{\"2173\":1}}],[\"解决获取数据元素时\",{\"1\":{\"1951\":1}}],[\"解决获取元素时强制类型转换的问题\",{\"0\":{\"1951\":1}}],[\"解决元素存储的安全性问题\",{\"1\":{\"1950\":1}}],[\"解决元素安全性问题\",{\"0\":{\"1950\":1}}],[\"解决懒汉式单例模式的线程安全问题\",{\"0\":{\"1769\":1}}],[\"解决特定的问题而用计算机语言编写的命令序列集合\",{\"1\":{\"1683\":2}}],[\"解决方法\",{\"0\":{\"1789\":1},\"1\":{\"1562\":1,\"3452\":1}}],[\"解决方案可以通过配置连接池使每个连接专用\",{\"1\":{\"382\":1}}],[\"解决方案\",{\"0\":{\"1756\":1,\"2862\":1,\"2877\":1,\"3495\":1},\"1\":{\"100\":1,\"358\":1,\"1767\":1,\"1769\":1,\"2390\":1,\"2602\":1,\"3110\":1,\"3222\":1,\"3455\":1}}],[\"解决类命名冲突的问题\",{\"1\":{\"1335\":1}}],[\"解决乱码问题\",{\"1\":{\"1103\":1}}],[\"解决\",{\"1\":{\"632\":1,\"633\":1,\"1517\":1,\"2708\":1,\"2709\":1,\"2795\":1,\"3675\":1}}],[\"y为偶数时表示当前版本为稳定版\",{\"1\":{\"3554\":1}}],[\"y为奇数时表示当前版本为开发版\",{\"1\":{\"3554\":1}}],[\"y9rhmsagkrqzj7ka\",{\"1\":{\"3381\":1}}],[\"yuan\",{\"1\":{\"2612\":1}}],[\"yum\",{\"1\":{\"1035\":3}}],[\"yum安装\",{\"0\":{\"1035\":1}}],[\"yield\",{\"1\":{\"1727\":1,\"1729\":2,\"1775\":1}}],[\"y运算时\",{\"1\":{\"1564\":1}}],[\"yyy\",{\"1\":{\"1083\":1}}],[\"yyyy\",{\"1\":{\"147\":1,\"304\":2,\"308\":7,\"714\":1,\"718\":1,\"735\":2,\"736\":1,\"737\":1,\"2570\":1,\"2573\":1}}],[\"you\",{\"1\":{\"665\":3,\"666\":3,\"667\":2,\"703\":1,\"2064\":1,\"3108\":1,\"3298\":1,\"3305\":1,\"3328\":1}}],[\"your\",{\"1\":{\"105\":1,\"3267\":1,\"3298\":1,\"3305\":1,\"3328\":1,\"3503\":1}}],[\"yes\",{\"1\":{\"1526\":1,\"1587\":2,\"1626\":1}}],[\"year\",{\"1\":{\"501\":1,\"718\":2,\"719\":2,\"720\":4,\"721\":2,\"722\":1}}],[\"yellow\",{\"1\":{\"308\":1,\"3127\":1,\"3278\":1,\"3380\":1,\"3384\":1}}],[\"y\",{\"1\":{\"501\":6,\"746\":3,\"1035\":3,\"1428\":4,\"1910\":1,\"3283\":1,\"3298\":9,\"3548\":1,\"3554\":1}}],[\"yaml主要配置项如下\",{\"1\":{\"3355\":1}}],[\"yaml\",{\"0\":{\"3355\":1},\"1\":{\"3355\":1}}],[\"yaml中添加安全相关的配置\",{\"1\":{\"3307\":1}}],[\"yaml配置项的主流配置方式是\",{\"1\":{\"153\":1,\"200\":1}}],[\"yaml配置语法\",{\"1\":{\"45\":1}}],[\"yaml语法规则\",{\"0\":{\"146\":1}}],[\"yaml是一种数据存储格式\",{\"1\":{\"144\":1}}],[\"yaml共存时\",{\"1\":{\"141\":1}}],[\"yml相关配置\",{\"0\":{\"500\":1}}],[\"yml配置\",{\"0\":{\"451\":1,\"477\":1,\"483\":1,\"3749\":1}}],[\"yml配置文件\",{\"1\":{\"142\":1,\"165\":1,\"383\":1,\"560\":1,\"3110\":1}}],[\"yml中开启redis缓存并配置redis的缓存策略\",{\"1\":{\"483\":1}}],[\"yml中有两种redis配置\",{\"1\":{\"483\":1}}],[\"yml中进行的配置仅仅起到了变量的作用\",{\"1\":{\"416\":1}}],[\"yml中的info信息过于简单\",{\"1\":{\"347\":1}}],[\"yml中的\",{\"1\":{\"345\":1}}],[\"yml中的配置默认是不生效的\",{\"1\":{\"159\":1}}],[\"yml中的配置\",{\"1\":{\"159\":1}}],[\"yml文件\",{\"1\":{\"262\":1}}],[\"yml文件进行设定哪些文件不参与热部署操作\",{\"1\":{\"194\":1}}],[\"yml文件中添加mongodb的连接参数\",{\"1\":{\"3750\":1}}],[\"yml文件中\",{\"1\":{\"159\":1}}],[\"yml文件中的变量引用\",{\"0\":{\"149\":1}}],[\"yml语法\",{\"0\":{\"144\":1}}],[\"yml格式\",{\"1\":{\"139\":1}}],[\"yml和yaml是一回事\",{\"1\":{\"139\":1}}],[\"yml\",{\"0\":{\"270\":1,\"273\":1,\"388\":1,\"416\":1,\"439\":1},\"1\":{\"139\":1,\"141\":1,\"194\":1,\"244\":1,\"245\":1,\"262\":1,\"265\":1,\"274\":4,\"277\":3,\"362\":1,\"372\":1,\"546\":1,\"556\":1,\"583\":1,\"586\":1,\"589\":3,\"3268\":1,\"3285\":1,\"3302\":1,\"3328\":1,\"3352\":1,\"3501\":1}}],[\"支持nosql和关系数据存储\",{\"1\":{\"3746\":1}}],[\"支持在集合中搜索字符串内容\",{\"1\":{\"3621\":1}}],[\"支持内嵌的文档对象和数组对象\",{\"1\":{\"3547\":2}}],[\"支持丰富的查询语言\",{\"1\":{\"3538\":1}}],[\"支持批量操作\",{\"1\":{\"3514\":1}}],[\"支持用户词典扩展定义\",{\"1\":{\"3477\":1}}],[\"支持中文\",{\"1\":{\"3352\":1}}],[\"支持全文检索\",{\"1\":{\"3197\":1}}],[\"支持大量基于交互式文本的查询\",{\"1\":{\"3098\":1}}],[\"支持servlet\",{\"1\":{\"2698\":1}}],[\"支持多个接口\",{\"1\":{\"2338\":1}}],[\"支持多种文件格式\",{\"1\":{\"138\":1}}],[\"支持网间互连的数据通信\",{\"1\":{\"2203\":1}}],[\"支持只访问文件的部分内容\",{\"1\":{\"2129\":1}}],[\"支持泛型\",{\"1\":{\"1807\":1}}],[\"支持连续赋值\",{\"1\":{\"1143\":1}}],[\"支持unicode的忽略大小写\",{\"1\":{\"997\":1}}],[\"支持lambda表达式的条件查询api\",{\"1\":{\"632\":1}}],[\"支持使用\",{\"1\":{\"342\":1}}],[\"支持的会话存储中检索和删除用户会话\",{\"1\":{\"342\":1}}],[\"支持二进制\",{\"1\":{\"147\":1}}],[\"支持科学计数法\",{\"1\":{\"147\":1}}],[\"支持\",{\"1\":{\"103\":1,\"3477\":1,\"3518\":1,\"3542\":1}}],[\"支付时\",{\"1\":{\"1754\":2}}],[\"支付宝\",{\"1\":{\"1616\":1}}],[\"支付方式\",{\"1\":{\"1616\":1}}],[\"支付\",{\"1\":{\"49\":1}}],[\"输入账户名密码即可\",{\"1\":{\"3735\":1}}],[\"输入账号密码\",{\"1\":{\"3340\":1}}],[\"输入指令查看所有的用户信息\",{\"1\":{\"3712\":1}}],[\"输入查看数据库的指令\",{\"1\":{\"3662\":1}}],[\"输入查询语句\",{\"1\":{\"3152\":1}}],[\"输入url\",{\"1\":{\"3570\":1}}],[\"输入以下命令\",{\"1\":{\"3557\":1}}],[\"输入地址\",{\"1\":{\"3383\":1}}],[\"输入https\",{\"1\":{\"3308\":1,\"3330\":1}}],[\"输入主机名\",{\"1\":{\"3298\":1}}],[\"输入链接到es的主机名称\",{\"1\":{\"3298\":1}}],[\"输入ca证书的密码\",{\"1\":{\"3298\":1}}],[\"输入相同的\",{\"1\":{\"3144\":1}}],[\"输入字符流\",{\"1\":{\"2025\":1}}],[\"输入流与输出流的方法\",{\"0\":{\"2041\":1}}],[\"输入流\",{\"0\":{\"2031\":1},\"1\":{\"2023\":1}}],[\"输入\",{\"1\":{\"2022\":1,\"2025\":1}}],[\"输入输出流\",{\"1\":{\"1590\":1}}],[\"输入不匹配异常\",{\"0\":{\"1581\":1}}],[\"输入的是关键字\",{\"1\":{\"3422\":1}}],[\"输入的数据类型不匹配\",{\"1\":{\"1906\":1}}],[\"输入的类型不匹配\",{\"1\":{\"1905\":1,\"1936\":1}}],[\"输入的不是数据而是字符等\",{\"1\":{\"1564\":1}}],[\"输入的负数个数为\",{\"1\":{\"1186\":1}}],[\"输入的正数个数为\",{\"1\":{\"1186\":1}}],[\"输入为0时结束程序\",{\"1\":{\"1186\":1}}],[\"输入数据时如果输入的值超过了进制或者超过了数据类型的范围\",{\"1\":{\"888\":1,\"1009\":1}}],[\"输入完毕后\",{\"1\":{\"887\":2,\"1008\":2}}],[\"输入换行符\",{\"0\":{\"2083\":1},\"1\":{\"830\":1}}],[\"输入手机号请求验证码\",{\"1\":{\"469\":1}}],[\"输入启动命令后\",{\"1\":{\"256\":1}}],[\"输入要隐藏的文件名\",{\"1\":{\"103\":1}}],[\"输出内容\",{\"1\":{\"2474\":1}}],[\"输出了所有person类的属性\",{\"1\":{\"2292\":1}}],[\"输出结果\",{\"0\":{\"2290\":1},\"1\":{\"2911\":1}}],[\"输出可序列化对象\",{\"1\":{\"2147\":1,\"2149\":1}}],[\"输出ascii字符\",{\"1\":{\"2121\":1}}],[\"输出add\",{\"1\":{\"1376\":1}}],[\"输出操作\",{\"1\":{\"2058\":1}}],[\"输出操作以\",{\"1\":{\"2021\":1}}],[\"输出字符流\",{\"1\":{\"2025\":1}}],[\"输出流的练习\",{\"0\":{\"2118\":1}}],[\"输出流\",{\"0\":{\"2034\":1},\"1\":{\"2009\":1,\"2023\":1}}],[\"输出\",{\"1\":{\"1631\":1,\"2022\":1,\"2025\":1}}],[\"输出标识符代表的对象名\",{\"1\":{\"1631\":1}}],[\"输出的都是mm\",{\"1\":{\"1855\":1}}],[\"输出的都是\",{\"1\":{\"1854\":1}}],[\"输出的就是类名和类的属性\",{\"1\":{\"1434\":1}}],[\"输出的语法就是slf4j的语法\",{\"1\":{\"309\":1}}],[\"输出功能的类\",{\"1\":{\"1338\":1}}],[\"输出99乘法表\",{\"0\":{\"1203\":1}}],[\"输出5行\",{\"1\":{\"1202\":1}}],[\"输出星星\",{\"0\":{\"1202\":1}}],[\"输出偶数的个数\",{\"1\":{\"1181\":1}}],[\"输出所有偶数的和\",{\"1\":{\"1181\":1}}],[\"输出语句\",{\"0\":{\"1047\":1}}],[\"输出到文件\",{\"1\":{\"308\":2}}],[\"输出到控制台\",{\"1\":{\"308\":1}}],[\"输出调试信息\",{\"1\":{\"294\":1}}],[\"输出测试报告\",{\"1\":{\"33\":1}}],[\"输出需求调研文档\",{\"1\":{\"33\":1}}],[\"→\",{\"1\":{\"103\":2}}],[\"每页查两个\",{\"1\":{\"3610\":1}}],[\"每页显示3条数据\",{\"1\":{\"3183\":1}}],[\"每页显示的条数\",{\"1\":{\"3182\":1}}],[\"每页显示多少条\",{\"1\":{\"3182\":1,\"3241\":1}}],[\"每页显示多少条数据\",{\"1\":{\"627\":1}}],[\"每卖一个商品的时候\",{\"1\":{\"3494\":1}}],[\"每更新就新建了一个倒排索引\",{\"1\":{\"3445\":1}}],[\"每条记录称为一个倒排项\",{\"1\":{\"3431\":1}}],[\"每台服务器可以运行多个\",{\"1\":{\"3093\":1}}],[\"每读一行就是一个请求键值对\",{\"1\":{\"2858\":1}}],[\"每刷新一次就打印一次hello\",{\"1\":{\"2782\":1}}],[\"每提交一次\",{\"1\":{\"2625\":1}}],[\"每执行一次executebatch\",{\"1\":{\"2625\":1}}],[\"每循环一次\",{\"1\":{\"2620\":1,\"2622\":1}}],[\"每操作一次\",{\"1\":{\"2147\":1,\"2149\":1}}],[\"每50个数据一行\",{\"1\":{\"2121\":1}}],[\"每当有线程进去\",{\"1\":{\"1770\":1}}],[\"每1个annotation对象\",{\"1\":{\"1650\":1}}],[\"每创建一个对象\",{\"1\":{\"1528\":1}}],[\"每\",{\"1\":{\"1337\":1,\"1652\":2,\"1653\":1,\"1654\":1}}],[\"每移动一位\",{\"1\":{\"1157\":1}}],[\"每一秒刷新\",{\"1\":{\"3454\":1}}],[\"每一段本身都是一个倒排索引\",{\"1\":{\"3446\":1}}],[\"每一份就称之为分片\",{\"1\":{\"3365\":1}}],[\"每一层里功能职责做到单一\",{\"1\":{\"3012\":1}}],[\"每一行执行语句都以\",{\"1\":{\"1046\":1}}],[\"每一个驱动都以特定语言的方式实现了这些类型\",{\"1\":{\"3547\":1}}],[\"每一个都只有很少的数据会导致很低的相关度\",{\"1\":{\"3507\":1}}],[\"每一个搜索请求都需要命中索引中的每一个分片\",{\"1\":{\"3507\":1}}],[\"每一个段都会消耗文件句柄\",{\"1\":{\"3456\":1}}],[\"每一个倒排索引都会被轮流查询到\",{\"1\":{\"3443\":1}}],[\"每一个代理类只能为一个接口服务\",{\"1\":{\"2322\":1}}],[\"每一个一维数组中有2个元素\",{\"1\":{\"1233\":1}}],[\"每一个域都使用数字\",{\"1\":{\"501\":1}}],[\"每一个数据库里面包含哪些表\",{\"1\":{\"25\":1}}],[\"每调用一次iterator方法\",{\"1\":{\"922\":1}}],[\"每种格式都返回一个datetimeformatter对象\",{\"1\":{\"731\":1}}],[\"每秒一次\",{\"1\":{\"493\":1}}],[\"每请求一次就返回一个验证码\",{\"1\":{\"474\":1}}],[\"每天日志归档路径以及格式\",{\"1\":{\"308\":1}}],[\"每个角色当中的权限可以显式指定\",{\"1\":{\"3697\":1}}],[\"每个角色做它自己的事\",{\"1\":{\"3004\":1}}],[\"每个硬盘的io总速度都是独立的\",{\"1\":{\"3501\":1}}],[\"每个文档都会自动创建一个\",{\"1\":{\"3497\":1}}],[\"每个搜索请求都必须轮流检查每个段\",{\"1\":{\"3456\":1}}],[\"每个提交点会包含一个\",{\"1\":{\"3447\":1}}],[\"每个主分片有两个副本分片\",{\"1\":{\"3403\":1}}],[\"每个主分片对应一个副本分片\",{\"1\":{\"3388\":1}}],[\"每个主分片拥有一个副本分片\",{\"1\":{\"3379\":1}}],[\"每个分片\",{\"1\":{\"3415\":1}}],[\"每个分片有两个副本\",{\"1\":{\"3394\":1}}],[\"每个分片的性能将会得到提升\",{\"1\":{\"3391\":1}}],[\"每个分片都会有副本的\",{\"1\":{\"3379\":1}}],[\"每个分片都有自己的副本\",{\"1\":{\"3373\":1}}],[\"每个分片本身也是一个功能完善并且独立的\",{\"1\":{\"3365\":1}}],[\"每个索引就有了主分片\",{\"1\":{\"3369\":1}}],[\"每个节点目录下都有以下文件\",{\"1\":{\"3654\":1}}],[\"每个节点上一个分片\",{\"1\":{\"3394\":1}}],[\"每个节点上存在一个分片\",{\"1\":{\"3392\":1}}],[\"每个节点都要修改\",{\"1\":{\"3728\":1}}],[\"每个节点都可以投票\",{\"1\":{\"3686\":1}}],[\"每个节点都知\",{\"1\":{\"3403\":1}}],[\"每个节点都知道任意文档所处的位置\",{\"1\":{\"3376\":1}}],[\"每个节点都有能力处理任意请求\",{\"1\":{\"3403\":1}}],[\"每个节点都会被安排加入到一个叫做\",{\"1\":{\"3261\":1}}],[\"每个节点启动都会返回授权信息\",{\"1\":{\"3340\":1}}],[\"每个字段有哪些约束信息\",{\"1\":{\"3195\":1}}],[\"每个浏览器与服务器建立的会话都是不同的会话\",{\"1\":{\"3034\":1}}],[\"每个tomcat实例独立运行一个web服务\",{\"1\":{\"2998\":1}}],[\"每个try语句块可以伴随一个或多个catch语句\",{\"1\":{\"1585\":1}}],[\"每个servlet类都需要进行判断\",{\"1\":{\"2863\":1}}],[\"每个servlet的实现类都需要进行判断\",{\"1\":{\"2808\":1,\"2815\":1}}],[\"每个用户访问相同资源后\",{\"1\":{\"2695\":1}}],[\"每个实现类中都要定义一次\",{\"1\":{\"2650\":1}}],[\"每个输入始终是一个集合\",{\"1\":{\"2467\":1}}],[\"每个要连接数据库的类\",{\"1\":{\"2323\":1}}],[\"每个类的实例都会记得自己是由哪个\",{\"1\":{\"2263\":1}}],[\"每个类都至少有一个构造器\",{\"1\":{\"1321\":1}}],[\"每个类都要创建日志对象\",{\"1\":{\"289\":1}}],[\"每个数据报的大小限制在64k内\",{\"1\":{\"2205\":1}}],[\"每个数组都有一个属性length指明它的长度\",{\"1\":{\"1221\":1}}],[\"每个整数用四个十六进制位表示\",{\"1\":{\"2181\":1}}],[\"每个对象的的同步方法都是独立的\",{\"1\":{\"1767\":1}}],[\"每个对象的成员变量都是独立的\",{\"1\":{\"1763\":1}}],[\"每个对象都独立的拥有一套类中的非静态属性\",{\"1\":{\"1475\":1}}],[\"每个线程对成员变量的修改都会影响到其他线程\",{\"1\":{\"1743\":1}}],[\"每个线程使用的都是同一个\",{\"1\":{\"1743\":1}}],[\"每个线程都会创建一个对象\",{\"1\":{\"1767\":1}}],[\"每个线程都有自己的名字\",{\"1\":{\"1728\":1}}],[\"每个线程都遍历1~100间的偶数\",{\"1\":{\"1720\":1}}],[\"每个线程都是通过某个特定thread对象的run\",{\"1\":{\"1717\":1}}],[\"每个线程拥有独立的运行栈和程序计数器\",{\"1\":{\"1687\":1}}],[\"每个进程需要多个任务协同完成\",{\"1\":{\"1688\":1}}],[\"每个进程均运行在其专用的且受保护的内存\",{\"1\":{\"1684\":1}}],[\"每个进程之间是独立的\",{\"1\":{\"1684\":1}}],[\"每个季节都有自己的名字\",{\"1\":{\"1630\":1}}],[\"每个元素是person类型\",{\"1\":{\"1266\":1}}],[\"每个一维数组都是默认初始化值null\",{\"1\":{\"1234\":1}}],[\"每个缓存策略\",{\"1\":{\"478\":1}}],[\"每个库都有所属的用户\",{\"1\":{\"389\":1}}],[\"每个客户端展示不同的监控信息\",{\"1\":{\"327\":1}}],[\"每个计算机环境不一样\",{\"1\":{\"269\":1}}],[\"每个不同的starter根据功能不同\",{\"1\":{\"124\":1}}],[\"每次端口不同\",{\"1\":{\"3651\":1}}],[\"每次选举每个节点都把自己所知道节点排一次序\",{\"1\":{\"3526\":1}}],[\"每次post请求\",{\"1\":{\"3136\":1}}],[\"每次浏览器向服务器请求时\",{\"1\":{\"3036\":1}}],[\"每次请求都是一个新的request对象\",{\"1\":{\"2922\":1}}],[\"每次请求servlet时\",{\"1\":{\"2797\":1}}],[\"每次访问\",{\"1\":{\"2801\":1}}],[\"每次该servlet的url被访问\",{\"1\":{\"2801\":1}}],[\"每次向数据库建立连接的时候都要将\",{\"1\":{\"2662\":1}}],[\"每次循环只是重新为占位符赋值\",{\"1\":{\"2621\":1}}],[\"每次使用都要写方法体\",{\"1\":{\"2390\":1}}],[\"每次暂停的时候\",{\"1\":{\"2140\":1}}],[\"每次写出len个字符\",{\"1\":{\"2065\":1}}],[\"每次写入的字符都是无空格连在一起的\",{\"1\":{\"824\":1}}],[\"每次只读取一个字节\",{\"1\":{\"2049\":1}}],[\"每次只能有一个线程对lock对象加锁\",{\"1\":{\"1778\":1}}],[\"每次都要强转\",{\"1\":{\"1955\":1}}],[\"每次调用iterator方法\",{\"1\":{\"1847\":1}}],[\"每次执行一次next方法\",{\"1\":{\"923\":1,\"1839\":1}}],[\"每次测试后改回去\",{\"1\":{\"230\":1}}],[\"每次进行热部署都需要开发者手工操作\",{\"1\":{\"187\":1}}],[\"每次手动删太麻烦\",{\"1\":{\"103\":1}}],[\"每行书写一个数据\",{\"1\":{\"148\":1}}],[\"每行结尾使用冒号结束\",{\"1\":{\"146\":1}}],[\"无模式的\",{\"1\":{\"3535\":1}}],[\"无效的文档\",{\"0\":{\"3458\":1}}],[\"无效精度外的数值全部舍去\",{\"1\":{\"784\":1}}],[\"无状态协议\",{\"0\":{\"3036\":1}}],[\"无限流就是数据无限生成\",{\"1\":{\"2449\":1}}],[\"无限循环格式\",{\"0\":{\"1186\":1}}],[\"无return\",{\"0\":{\"2368\":1,\"2370\":1}}],[\"无非是参数有char类型变成了byte类型\",{\"1\":{\"2068\":1}}],[\"无穷大\",{\"1\":{\"2000\":1}}],[\"无穷小\",{\"1\":{\"1999\":1}}],[\"无序的\",{\"1\":{\"1912\":3,\"1918\":3}}],[\"无序性\",{\"1\":{\"1882\":1,\"1890\":1}}],[\"无需import操作\",{\"1\":{\"2989\":1}}],[\"无需使用索引访问元素\",{\"1\":{\"1850\":1}}],[\"无需执行\",{\"1\":{\"448\":1}}],[\"无可厚非\",{\"1\":{\"1770\":1}}],[\"无继承关系的引用类型间的转换是非法的\",{\"1\":{\"1420\":1}}],[\"无所谓\",{\"1\":{\"1172\":1}}],[\"无任何判断和跳转\",{\"1\":{\"1165\":1}}],[\"无null\",{\"1\":{\"1106\":1}}],[\"无成员变量\",{\"1\":{\"902\":1}}],[\"无参数\",{\"1\":{\"887\":1,\"1008\":1,\"2405\":1}}],[\"无参\",{\"0\":{\"813\":1,\"2368\":1},\"1\":{\"717\":1,\"1318\":1}}],[\"无参构造方法\",{\"1\":{\"620\":1}}],[\"无线程安全\",{\"1\":{\"696\":1}}],[\"无表结构\",{\"0\":{\"399\":1}}],[\"无密码\",{\"1\":{\"389\":1}}],[\"无论用户管理的数据库是哪个\",{\"1\":{\"3715\":1}}],[\"无论我们将请求发送到哪个节点\",{\"1\":{\"3376\":1}}],[\"无论是官网提示的操作步骤还是网络上别人分享的教程\",{\"1\":{\"3316\":1}}],[\"无论是直接写多个参数\",{\"1\":{\"3246\":1}}],[\"无论是开发时是何种配置\",{\"1\":{\"2774\":1}}],[\"无论是否发生异常\",{\"1\":{\"1585\":1}}],[\"无论这些数据库连接是否被使用\",{\"1\":{\"2665\":1}}],[\"无论这两个线程是否属于同一对象\",{\"1\":{\"1797\":1}}],[\"无论哪个枚举对象调用\",{\"1\":{\"1628\":1}}],[\"无论通过哪个构造器创建子类对象\",{\"1\":{\"1384\":1}}],[\"无论有没有初始化\",{\"1\":{\"1070\":1}}],[\"无论正负\",{\"1\":{\"784\":1}}],[\"无论操作对象是操作何种类型\",{\"1\":{\"380\":1}}],[\"无论配置文件中ipaddress哪种书写模式\",{\"1\":{\"211\":1}}],[\"无法满足用户需求\",{\"1\":{\"3423\":1}}],[\"无法实现高可用\",{\"1\":{\"3259\":1}}],[\"无法进行分词查询\",{\"1\":{\"3200\":1}}],[\"无法进行复杂的操作\",{\"1\":{\"353\":1}}],[\"无法约束内容\",{\"1\":{\"3023\":1}}],[\"无法获取核心类库的引导类加载器\",{\"1\":{\"2280\":1}}],[\"无法获取引导类加载器\",{\"1\":{\"2280\":1}}],[\"无法获取num\",{\"1\":{\"1587\":1}}],[\"无法new\",{\"1\":{\"2253\":1}}],[\"无法赋值\",{\"1\":{\"1991\":1}}],[\"无法执行\",{\"1\":{\"1830\":1}}],[\"无法继续\",{\"1\":{\"1788\":1}}],[\"无法继承\",{\"0\":{\"1349\":1}}],[\"无法调用该方法\",{\"1\":{\"1995\":1}}],[\"无法调用\",{\"1\":{\"1520\":1}}],[\"无法应对高并发\",{\"1\":{\"1490\":1}}],[\"无法更改\",{\"1\":{\"1228\":1}}],[\"无法接收int类型的1\",{\"1\":{\"1141\":1}}],[\"无法直接操作private属性\",{\"1\":{\"864\":1,\"865\":1}}],[\"无法直接实例化\",{\"1\":{\"821\":1}}],[\"无法创建\",{\"1\":{\"804\":1,\"805\":1}}],[\"无法比较值\",{\"1\":{\"910\":1}}],[\"无法比较\",{\"1\":{\"756\":1}}],[\"无法修改源时间\",{\"1\":{\"712\":1}}],[\"无法在第三方提供的技术源代码中去添加上述4个注解\",{\"1\":{\"510\":1}}],[\"无法像导入mybatis那样直接导入\",{\"1\":{\"371\":1}}],[\"无法启动项目\",{\"1\":{\"101\":1}}],[\"无用的文件\",{\"1\":{\"98\":1}}],[\"即副本成员同时也可以是仲裁者\",{\"1\":{\"3645\":1}}],[\"即备份数据\",{\"1\":{\"3645\":1}}],[\"即oplog\",{\"1\":{\"3641\":1}}],[\"即复合索引\",{\"1\":{\"3620\":1}}],[\"即升序或降序\",{\"1\":{\"3619\":1}}],[\"即有资格成为主节点的节点个数\",{\"1\":{\"3533\":1}}],[\"即把\",{\"1\":{\"3430\":1}}],[\"即跟指定值相差几个字符可以命中\",{\"1\":{\"3239\":1}}],[\"即资源被访问的方式\",{\"1\":{\"2950\":1}}],[\"即项目的访问路径\",{\"1\":{\"2845\":1}}],[\"即接收get\",{\"1\":{\"2808\":1}}],[\"即自动生成的键值\",{\"1\":{\"2683\":1}}],[\"即java企业版\",{\"1\":{\"2731\":1}}],[\"即java端\",{\"1\":{\"2636\":1}}],[\"即java有一定的动态性\",{\"1\":{\"2247\":1}}],[\"即要连接的数据库地址\",{\"1\":{\"2540\":1}}],[\"即多少个参数\",{\"1\":{\"2381\":1}}],[\"即引用地址\",{\"1\":{\"2274\":1}}],[\"即获取class类的实例\",{\"1\":{\"2265\":1}}],[\"即每个类所属的类\",{\"1\":{\"2260\":1}}],[\"即锚点\",{\"1\":{\"2237\":1}}],[\"即url可以用来标识一个资源\",{\"1\":{\"2236\":1,\"2243\":1}}],[\"即不用手动import\",{\"1\":{\"2989\":1}}],[\"即不能通过此套接字的输出流发送任何数据\",{\"1\":{\"2214\":1}}],[\"即不能在从此套接字的输入流中接收任何数据\",{\"1\":{\"2214\":1}}],[\"即不强制那些实现了该接口的类也同时实现这个新加的方法\",{\"1\":{\"1521\":1}}],[\"即无法重新连接或重新绑定\",{\"1\":{\"2214\":1}}],[\"即无论如何资源都会被释放\",{\"1\":{\"1590\":1}}],[\"即本端的端口号\",{\"1\":{\"2214\":1}}],[\"即本端的ip地址\",{\"1\":{\"2214\":1}}],[\"即物理链路层\",{\"1\":{\"2203\":1}}],[\"即同层间可以通信\",{\"1\":{\"2200\":1}}],[\"即同一个事务的多个操作必须在同一个连接下\",{\"1\":{\"2631\":1}}],[\"即同一个\",{\"1\":{\"1909\":1}}],[\"即通信协议\",{\"1\":{\"2199\":1}}],[\"即通过指定的\",{\"1\":{\"1909\":1}}],[\"即通过法名\",{\"1\":{\"1286\":1}}],[\"即从指针位置开始写\",{\"1\":{\"2137\":1}}],[\"即字符集≈\",{\"1\":{\"2111\":1}}],[\"即保证了\",{\"1\":{\"1997\":1}}],[\"即传入实际的类型参数\",{\"1\":{\"1948\":1}}],[\"即两个对象相同\",{\"1\":{\"1904\":2}}],[\"即两个引用是否指向同一个对象实体\",{\"1\":{\"1426\":1,\"1427\":1}}],[\"即hashcode值也是随机\",{\"1\":{\"1895\":1}}],[\"即存放数据之前\",{\"1\":{\"1890\":1}}],[\"即所有操作共享数据的这些语句都要放在同步范围中\",{\"1\":{\"1773\":1}}],[\"即共享成员变量\",{\"1\":{\"1743\":1}}],[\"即创建线程对象\",{\"1\":{\"1719\":1}}],[\"即内存中的数据==变量的值\",{\"1\":{\"1702\":1}}],[\"即进程之间不方便通信\",{\"1\":{\"1684\":1}}],[\"即指一段静态的代码\",{\"1\":{\"1683\":1}}],[\"即运行时保留\",{\"1\":{\"1659\":1}}],[\"即class保留\",{\"1\":{\"1659\":1}}],[\"即源java文件保留\",{\"1\":{\"1659\":1}}],[\"即enum也是用来修饰类的\",{\"1\":{\"1624\":1}}],[\"即程序在运行时由于外界因素造成的一般性异常\",{\"1\":{\"1572\":1}}],[\"即对象的标识符p1保存了对象的内存地址\",{\"1\":{\"1548\":1}}],[\"即对象的类型是父类\",{\"1\":{\"1397\":1}}],[\"即时编译器编译后的代码等数据\",{\"1\":{\"1546\":1}}],[\"即实现接口的类可以直接使用这些方法\",{\"1\":{\"1521\":1}}],[\"即可获知哪些文档包含某个单词\",{\"1\":{\"3431\":1}}],[\"即可添加到左边的jar包目录下\",{\"1\":{\"2992\":1}}],[\"即可\",{\"1\":{\"1442\":1,\"3197\":1}}],[\"即可以定义多个互相重载的构造器\",{\"1\":{\"1319\":1}}],[\"即子类可以重载父类的同名不同参数的方法\",{\"1\":{\"1407\":1}}],[\"即为绿色软件\",{\"1\":{\"3555\":1}}],[\"即为默认命名空间\",{\"1\":{\"3030\":1}}],[\"即为不同数据库的驱动\",{\"1\":{\"2531\":1}}],[\"即为代理类对象调用的方法\",{\"1\":{\"2343\":1}}],[\"即为通配符指定匹配的上限和下限\",{\"1\":{\"1998\":1}}],[\"即为链地址法\",{\"1\":{\"1925\":1}}],[\"即为需要被同步的代码\",{\"1\":{\"1759\":1}}],[\"即为new的子类对象\",{\"1\":{\"1392\":1}}],[\"即为匿名对象\",{\"1\":{\"1267\":1}}],[\"即在生命周期内\",{\"1\":{\"1352\":1}}],[\"即执行同一个对象实体\",{\"1\":{\"1262\":1}}],[\"即借助某种程序语言\",{\"1\":{\"1252\":1}}],[\"即便用double类型接收\",{\"1\":{\"1139\":1}}],[\"即没有迭代器接口\",{\"1\":{\"958\":1}}],[\"即向某个index插入数据\",{\"1\":{\"945\":1}}],[\"即向当前时间对象上进行指定单位的时间增加\",{\"1\":{\"721\":1}}],[\"即移除当前集合中\",{\"1\":{\"913\":1}}],[\"即被包含\",{\"1\":{\"911\":1}}],[\"即合并另一个集合\",{\"1\":{\"906\":1}}],[\"即将字节流转为utf\",{\"1\":{\"2095\":1}}],[\"即将字符读入数组时\",{\"1\":{\"818\":1}}],[\"即将实际参数值的副本\",{\"1\":{\"1291\":1}}],[\"即将原来的数字加上\",{\"1\":{\"764\":1}}],[\"即0时区时间\",{\"1\":{\"725\":1}}],[\"即颠倒字符串\",{\"1\":{\"704\":1}}],[\"即条件可能是null\",{\"1\":{\"633\":1}}],[\"即表示每分钟都会触发事件\",{\"1\":{\"501\":1}}],[\"即使保持了\",{\"1\":{\"3508\":1}}],[\"即使流量的增加它也不会成为瓶颈\",{\"1\":{\"3375\":1}}],[\"即使开启了完全匹配查询\",{\"1\":{\"3180\":1}}],[\"即使请求的内容完全相同\",{\"1\":{\"3136\":1}}],[\"即使定义了成员变量\",{\"1\":{\"2795\":1}}],[\"即使代理做的操作是一样的\",{\"1\":{\"2323\":1}}],[\"即使两个对象完全一样\",{\"1\":{\"1895\":1}}],[\"即使catch中又出现异常了\",{\"1\":{\"1590\":1}}],[\"即使未赋值\",{\"1\":{\"1243\":1}}],[\"即使是集群也只需主节点创建证书\",{\"1\":{\"3298\":1}}],[\"即使是整数\",{\"1\":{\"1113\":1}}],[\"即使是web工程\",{\"1\":{\"95\":1}}],[\"即使引入了mongodb依赖\",{\"1\":{\"159\":1}}],[\"即\",{\"1\":{\"101\":1,\"643\":1,\"809\":1,\"810\":1,\"888\":1,\"1009\":1,\"1121\":1,\"1165\":1,\"1223\":1,\"1346\":1,\"1666\":1,\"1882\":1,\"1885\":1,\"1999\":1,\"2000\":1,\"2010\":1,\"2081\":1,\"2356\":1,\"2389\":1,\"2467\":1,\"3533\":1,\"3546\":1,\"3623\":1}}],[\"确实可以看到数据库创建成功\",{\"1\":{\"3682\":1}}],[\"确切的说是b\",{\"1\":{\"3617\":1}}],[\"确认名字输入是否正确\",{\"1\":{\"3298\":2}}],[\"确认了springboot的依赖\",{\"1\":{\"98\":1}}],[\"确定文档属于分片\",{\"1\":{\"3407\":1}}],[\"确定\",{\"1\":{\"1948\":1}}],[\"确定的\",{\"1\":{\"1909\":1}}],[\"确定数据类型\",{\"1\":{\"1216\":1}}],[\"确给了个string类型的值\",{\"1\":{\"217\":1}}],[\"确保\",{\"1\":{\"3503\":1}}],[\"确保只有放置锁的线程能够对这行数据进行修改\",{\"1\":{\"3495\":1}}],[\"确保加载的类信息符合jvm规范\",{\"1\":{\"2275\":1}}],[\"确保最后一定关闭\",{\"1\":{\"500\":1}}],[\"确保所有的子模块pom文件声明了jar打包方式\",{\"1\":{\"172\":1}}],[\"确保模块名字没有和路径名字是一样的\",{\"1\":{\"166\":1}}],[\"确保启动类与直接在\",{\"1\":{\"101\":1}}],[\"vm\",{\"1\":{\"3313\":5,\"3346\":5}}],[\"v数据\",{\"1\":{\"2938\":1}}],[\"v字母表示\",{\"1\":{\"1962\":1}}],[\"v键值对\",{\"1\":{\"1823\":1}}],[\"votingmemberscount\",{\"1\":{\"3670\":1}}],[\"votes\",{\"1\":{\"3667\":1,\"3687\":1}}],[\"vocation\",{\"1\":{\"1616\":1}}],[\"void\",{\"1\":{\"127\":1,\"128\":1,\"164\":1,\"197\":1,\"226\":1,\"227\":1,\"259\":3,\"320\":1,\"347\":1,\"350\":1,\"366\":1,\"375\":2,\"379\":2,\"380\":1,\"403\":1,\"404\":1,\"406\":1,\"407\":1,\"408\":1,\"409\":1,\"410\":1,\"418\":1,\"419\":1,\"422\":1,\"423\":1,\"424\":1,\"425\":1,\"428\":1,\"429\":1,\"430\":1,\"431\":1,\"432\":1,\"445\":1,\"447\":2,\"452\":1,\"493\":2,\"498\":1,\"499\":1,\"520\":1,\"521\":1,\"527\":1,\"530\":1,\"550\":1,\"554\":1,\"555\":1,\"623\":5,\"628\":1,\"631\":1,\"632\":1,\"633\":1,\"819\":1,\"824\":5,\"825\":3,\"826\":1,\"827\":1,\"859\":1,\"865\":1,\"866\":1,\"870\":1,\"882\":1,\"883\":1,\"892\":1,\"908\":1,\"926\":1,\"930\":1,\"931\":1,\"932\":2,\"933\":1,\"937\":1,\"945\":1,\"960\":1,\"962\":1,\"974\":1,\"1038\":1,\"1184\":1,\"1186\":1,\"1204\":1,\"1258\":2,\"1259\":1,\"1267\":6,\"1280\":1,\"1282\":3,\"1287\":3,\"1292\":2,\"1293\":1,\"1295\":1,\"1296\":1,\"1302\":1,\"1304\":3,\"1350\":1,\"1353\":1,\"1354\":1,\"1368\":2,\"1373\":1,\"1376\":3,\"1380\":1,\"1381\":1,\"1382\":1,\"1401\":2,\"1408\":3,\"1457\":1,\"1466\":3,\"1467\":4,\"1495\":1,\"1497\":3,\"1499\":2,\"1500\":5,\"1507\":2,\"1512\":9,\"1515\":3,\"1518\":1,\"1560\":1,\"1587\":1,\"1592\":1,\"1600\":3,\"1609\":2,\"1630\":4,\"1648\":1,\"1670\":1,\"1680\":4,\"1720\":2,\"1728\":2,\"1729\":2,\"1737\":2,\"1740\":2,\"1757\":2,\"1759\":1,\"1760\":2,\"1765\":1,\"1768\":3,\"1780\":1,\"1784\":2,\"1795\":3,\"1804\":2,\"1810\":1,\"1814\":2,\"1817\":2,\"1967\":1,\"1968\":1,\"1995\":1,\"1996\":1,\"2003\":1,\"2052\":1,\"2053\":1,\"2064\":1,\"2065\":1,\"2071\":1,\"2084\":1,\"2106\":1,\"2117\":2,\"2124\":1,\"2132\":1,\"2168\":2,\"2214\":3,\"2220\":1,\"2225\":1,\"2233\":3,\"2252\":1,\"2255\":2,\"2256\":1,\"2257\":1,\"2258\":1,\"2264\":3,\"2296\":1,\"2310\":1,\"2317\":1,\"2327\":1,\"2328\":1,\"2329\":1,\"2330\":1,\"2343\":1,\"2349\":2,\"2369\":1,\"2371\":1,\"2388\":1,\"2392\":1,\"2404\":2,\"2455\":1,\"2505\":1,\"2545\":1,\"2547\":1,\"2548\":1,\"2551\":1,\"2570\":1,\"2573\":1,\"2576\":1,\"2577\":1,\"2581\":1,\"2597\":1,\"2612\":1,\"2613\":1,\"2624\":1,\"2625\":1,\"2634\":1,\"2635\":1,\"2639\":1,\"2655\":3,\"2656\":3,\"2657\":7,\"2672\":1,\"2676\":1,\"2682\":6,\"2686\":1,\"2687\":1,\"2688\":1,\"2689\":1,\"2690\":1,\"2691\":1,\"2779\":1,\"2799\":3,\"2800\":2,\"2801\":2,\"2802\":2,\"2804\":1,\"2812\":2,\"2814\":3,\"2837\":1,\"2846\":2,\"2849\":1,\"2850\":1,\"2858\":1,\"2862\":2,\"2872\":2,\"2873\":2,\"2883\":1,\"2884\":1,\"2888\":1,\"2902\":2,\"2903\":2,\"2909\":1,\"2910\":1,\"2930\":1,\"2934\":1,\"2938\":1,\"2942\":1,\"2945\":3,\"2972\":2,\"2973\":2,\"3042\":1,\"3046\":1,\"3047\":1,\"3062\":1,\"3064\":1,\"3066\":1,\"3206\":1,\"3209\":1,\"3211\":1,\"3212\":1,\"3214\":1,\"3217\":1,\"3218\":1,\"3220\":1,\"3221\":1,\"3225\":1,\"3226\":1,\"3227\":1,\"3231\":1,\"3234\":1,\"3237\":1,\"3240\":1,\"3242\":1,\"3244\":1,\"3249\":1,\"3253\":1}}],[\"victor\",{\"1\":{\"3217\":1,\"3225\":1,\"3226\":1,\"3227\":1}}],[\"viktor\",{\"1\":{\"2192\":1}}],[\"view\",{\"0\":{\"1540\":1},\"1\":{\"1540\":2,\"2976\":1,\"3002\":1}}],[\"virtal\",{\"1\":{\"1015\":1}}],[\"virtual\",{\"1\":{\"439\":1,\"3313\":1,\"3346\":1}}],[\"v>>\",{\"1\":{\"971\":1}}],[\"v>\",{\"1\":{\"939\":9,\"954\":1,\"960\":1,\"1963\":1}}],[\"vender\",{\"1\":{\"3558\":1}}],[\"verification\",{\"1\":{\"3307\":1,\"3327\":1,\"3337\":1,\"3355\":1}}],[\"very\",{\"1\":{\"1059\":1}}],[\"version与es服务端的version一致\",{\"1\":{\"413\":1}}],[\"version=\",{\"1\":{\"308\":1,\"478\":1,\"506\":1,\"511\":1,\"3019\":1,\"3020\":1,\"3027\":1,\"3029\":1,\"3488\":1}}],[\"version\",{\"0\":{\"3497\":1},\"1\":{\"119\":4,\"246\":5,\"345\":2,\"423\":1,\"428\":1,\"429\":1,\"431\":1,\"432\":1,\"612\":4,\"884\":2,\"1034\":1,\"1035\":1,\"1056\":1,\"1059\":2,\"2991\":1,\"3020\":1,\"3108\":4,\"3124\":1,\"3135\":1,\"3141\":1,\"3144\":1,\"3149\":1,\"3154\":1,\"3159\":1,\"3283\":1,\"3381\":1,\"3479\":2,\"3497\":3,\"3498\":4,\"3667\":1,\"3712\":1}}],[\"version>8\",{\"1\":{\"612\":1}}],[\"version>3\",{\"1\":{\"119\":1,\"612\":2}}],[\"version>17<\",{\"1\":{\"612\":1}}],[\"version>1\",{\"1\":{\"119\":2,\"612\":1}}],[\"version>2\",{\"1\":{\"119\":2}}],[\"version>5\",{\"1\":{\"119\":1}}],[\"version>\",{\"1\":{\"100\":1,\"117\":1,\"118\":1,\"119\":11,\"123\":5,\"319\":1,\"323\":1,\"355\":1,\"358\":1,\"361\":1,\"371\":2,\"413\":2,\"597\":1,\"598\":1,\"599\":1,\"600\":1,\"607\":1,\"609\":1,\"611\":2,\"612\":10,\"3085\":1,\"3205\":2,\"3216\":1,\"3743\":1}}],[\"vector虽然是线程安全的\",{\"1\":{\"1876\":1}}],[\"vector已经被放弃了\",{\"1\":{\"1876\":1}}],[\"vector\",{\"0\":{\"1862\":1,\"1875\":1},\"1\":{\"903\":1,\"1826\":1,\"1859\":1}}],[\"v2\",{\"1\":{\"746\":2}}],[\"v1\",{\"1\":{\"746\":2}}],[\"various\",{\"1\":{\"3355\":1}}],[\"variable\",{\"1\":{\"1294\":1,\"1653\":1,\"1660\":1,\"1661\":1,\"1675\":1}}],[\"var2\",{\"1\":{\"2799\":1,\"2801\":1}}],[\"var1\",{\"1\":{\"2799\":2,\"2801\":1}}],[\"varargs\",{\"1\":{\"1294\":1}}],[\"var\",{\"1\":{\"1069\":1,\"1070\":2,\"1071\":1,\"2562\":1}}],[\"varchar\",{\"1\":{\"618\":3,\"2562\":1,\"2619\":1}}],[\"van\",{\"1\":{\"678\":2,\"682\":1,\"992\":1,\"2369\":1}}],[\"val\",{\"1\":{\"379\":1,\"785\":1,\"898\":1,\"970\":3}}],[\"validationquery\",{\"1\":{\"2674\":1}}],[\"validation<\",{\"1\":{\"218\":1}}],[\"validated开启校验功能\",{\"1\":{\"219\":1}}],[\"validated\",{\"0\":{\"219\":1},\"1\":{\"219\":1,\"220\":1}}],[\"validator<\",{\"1\":{\"218\":2}}],[\"valid\",{\"1\":{\"212\":1,\"3298\":1,\"3305\":2,\"3328\":1}}],[\"valueunbound\",{\"1\":{\"2968\":1}}],[\"valuebound\",{\"1\":{\"2968\":1}}],[\"value和urlpatterns是等效的\",{\"1\":{\"2818\":1}}],[\"value就是对应的值\",{\"1\":{\"2684\":1}}],[\"value2\",{\"1\":{\"1922\":1}}],[\"value1和原来的数据以链表的方式存储\",{\"1\":{\"1923\":1}}],[\"value1添加成功\",{\"1\":{\"1922\":3}}],[\"value1\",{\"1\":{\"1922\":1}}],[\"value构成一个entry\",{\"1\":{\"1912\":1}}],[\"value所在的类要重写equals\",{\"1\":{\"1918\":1}}],[\"value所在的类要重写\",{\"1\":{\"1912\":1}}],[\"value用于存储字符串数据\",{\"1\":{\"1126\":1}}],[\"value对的数据\",{\"1\":{\"1910\":1}}],[\"value对的个数\",{\"1\":{\"966\":1}}],[\"value对\",{\"1\":{\"961\":1,\"1826\":1}}],[\"value对存放到当前map中\",{\"1\":{\"960\":1}}],[\"value添加到\",{\"1\":{\"959\":1}}],[\"value也是由set组成的\",{\"1\":{\"958\":1}}],[\"value进行遍历\",{\"1\":{\"958\":1}}],[\"values\",{\"0\":{\"970\":1},\"1\":{\"483\":1,\"970\":2,\"1627\":1,\"1680\":2,\"2448\":1,\"2567\":1,\"2569\":1,\"2573\":1,\"2612\":1,\"2620\":1,\"2621\":1,\"2624\":1,\"2625\":1,\"2656\":1,\"2686\":1,\"2872\":2}}],[\"value属性可以省略不写\",{\"1\":{\"1647\":1}}],[\"value属性\",{\"1\":{\"468\":1}}],[\"valueof的效果是相反的\",{\"1\":{\"775\":1}}],[\"valueof效果一样\",{\"1\":{\"774\":1}}],[\"valueof根据参数数据类型的不同\",{\"1\":{\"672\":1}}],[\"valueof\",{\"0\":{\"672\":1,\"775\":1},\"1\":{\"419\":1,\"472\":1,\"672\":4,\"774\":1,\"775\":3,\"778\":1,\"1445\":2,\"1627\":1}}],[\"valueoperations<string\",{\"1\":{\"380\":1}}],[\"valueopeartions\",{\"1\":{\"379\":1}}],[\"value的储存特点\",{\"0\":{\"1918\":1}}],[\"value的形式显示\",{\"1\":{\"345\":1}}],[\"value的值时变量定义的值\",{\"1\":{\"308\":1}}],[\"value=hello\",{\"1\":{\"2296\":1}}],[\"value=\",{\"1\":{\"308\":2,\"468\":1,\"471\":2,\"472\":1,\"485\":1,\"1648\":2,\"1666\":2,\"1667\":2,\"1677\":1,\"1680\":4,\"2871\":2,\"2950\":2,\"2951\":1,\"3029\":5}}],[\"value\",{\"0\":{\"1676\":1},\"1\":{\"151\":8,\"172\":1,\"210\":1,\"220\":2,\"418\":6,\"424\":2,\"430\":2,\"545\":1,\"659\":1,\"692\":2,\"693\":3,\"746\":6,\"865\":1,\"958\":2,\"959\":1,\"965\":1,\"1060\":1,\"1641\":1,\"1658\":1,\"1660\":1,\"1667\":1,\"1675\":1,\"1680\":2,\"1909\":4,\"1912\":2,\"1914\":3,\"1916\":2,\"1918\":2,\"1930\":1,\"1933\":3,\"1934\":1,\"1939\":1,\"1958\":1,\"2310\":1,\"2820\":1,\"2846\":1,\"2847\":1,\"2872\":2,\"2884\":1,\"2926\":1,\"2938\":1,\"3041\":2,\"3044\":2,\"3047\":1,\"3049\":1,\"3054\":4,\"3064\":1,\"3142\":1,\"3160\":1,\"3164\":1,\"3191\":1,\"3249\":2,\"3267\":1,\"3503\":1,\"3546\":1,\"3614\":10}}],[\"value读取单个数据\",{\"1\":{\"151\":1}}],[\"value读配置项即可\",{\"1\":{\"150\":1}}],[\"v就是配置要配置的数据\",{\"1\":{\"345\":1}}],[\"v\",{\"1\":{\"139\":1,\"345\":1,\"673\":1,\"772\":2,\"959\":2,\"961\":1,\"963\":1,\"971\":1,\"1227\":1,\"1958\":1,\"2938\":1,\"3002\":1,\"3011\":1,\"3126\":1,\"3220\":1,\"3226\":1,\"3227\":1,\"3234\":1,\"3240\":1,\"3242\":1,\"3245\":1,\"3623\":1,\"3626\":2,\"3627\":3}}],[\"v格式\",{\"1\":{\"139\":1}}],[\"v由springboot提供\",{\"1\":{\"121\":1}}],[\"vue\",{\"1\":{\"53\":1}}],[\"<query>\",{\"1\":{\"3604\":1}}],[\"<单词位置>\",{\"1\":{\"3433\":1}}],[\"<10>\",{\"1\":{\"3433\":1}}],[\"<1>\",{\"1\":{\"3433\":3}}],[\"<7>\",{\"1\":{\"3433\":2}}],[\"<name>tom<\",{\"1\":{\"3030\":1}}],[\"<name>zhangsan<\",{\"1\":{\"3027\":1}}],[\"<xsd\",{\"1\":{\"3029\":22}}],[\"<url>fuck\",{\"1\":{\"3019\":1}}],[\"<uname>shit<\",{\"1\":{\"3019\":1}}],[\"<h1>hello<h1>\",{\"1\":{\"2890\":1}}],[\"<h1>作用<\",{\"1\":{\"1059\":1,\"1060\":1}}],[\"<ideographic>\",{\"1\":{\"3476\":4}}],[\"<id>env\",{\"1\":{\"281\":2}}],[\"<input\",{\"1\":{\"2857\":3,\"2871\":5}}],[\"<font\",{\"1\":{\"3193\":1,\"3252\":1,\"3253\":2}}],[\"<form\",{\"1\":{\"2857\":1,\"2871\":1}}],[\"<filenamepattern>$\",{\"1\":{\"308\":3}}],[\"<file>$\",{\"1\":{\"308\":3}}],[\"<filter\",{\"1\":{\"308\":4}}],[\"<<\",{\"1\":{\"1157\":1}}],[\"<<13\",{\"1\":{\"889\":1}}],[\"<k\",{\"1\":{\"939\":3}}],[\"<token>\",{\"1\":{\"3305\":1,\"3328\":1}}],[\"<t\",{\"1\":{\"932\":1,\"934\":1,\"935\":1}}],[\"<t>\",{\"1\":{\"899\":1,\"918\":1,\"932\":1,\"934\":1,\"935\":1,\"937\":1,\"938\":1,\"939\":5,\"1814\":1,\"1980\":1,\"2446\":1,\"2603\":1,\"2683\":2}}],[\"<timebasedfilenamingandtriggeringpolicy\",{\"1\":{\"308\":3}}],[\"<参数\",{\"1\":{\"785\":1}}],[\"<=\",{\"1\":{\"763\":1,\"1184\":1,\"1189\":1,\"1198\":2,\"1202\":2,\"1203\":2,\"1204\":2,\"1283\":1,\"1804\":1,\"2001\":2,\"2076\":2,\"2077\":2,\"2078\":2,\"2079\":2,\"2121\":1,\"2620\":1,\"2621\":1,\"2624\":1,\"2625\":1,\"3172\":1,\"3236\":1,\"3614\":1}}],[\"<0\",{\"1\":{\"660\":1}}],[\"<mime\",{\"1\":{\"2933\":2}}],[\"<mybatis\",{\"1\":{\"612\":1}}],[\"<mysql\",{\"1\":{\"612\":1}}],[\"<maxhistory>15<\",{\"1\":{\"308\":3}}],[\"<maxfilesize>100mb<\",{\"1\":{\"308\":3}}],[\"<mainclass>com\",{\"1\":{\"170\":1}}],[\"<java\",{\"1\":{\"612\":1}}],[\"<boolean>\",{\"1\":{\"3585\":1,\"3589\":1}}],[\"<br>\",{\"1\":{\"2871\":1}}],[\"<blockquote><pre>\",{\"1\":{\"1059\":1}}],[\"<bean\",{\"1\":{\"506\":5}}],[\"<beans\",{\"1\":{\"506\":1,\"511\":1}}],[\"<build>\",{\"1\":{\"239\":1,\"612\":1}}],[\"<database>\",{\"1\":{\"3702\":2}}],[\"<document>\",{\"1\":{\"3585\":1,\"3589\":1}}],[\"<document\",{\"1\":{\"3585\":1,\"3589\":2}}],[\"<druid\",{\"1\":{\"612\":1}}],[\"<defaultcache\",{\"1\":{\"478\":1}}],[\"<dependency>\",{\"1\":{\"119\":4,\"123\":5,\"134\":1,\"135\":1,\"185\":1,\"209\":1,\"218\":2,\"223\":1,\"319\":2,\"323\":1,\"355\":2,\"358\":1,\"361\":3,\"371\":3,\"377\":2,\"383\":1,\"387\":1,\"413\":3,\"438\":1,\"450\":1,\"466\":1,\"476\":1,\"482\":1,\"592\":1,\"593\":1,\"594\":1,\"595\":1,\"597\":1,\"598\":1,\"599\":1,\"600\":1,\"602\":2,\"604\":1,\"606\":1,\"607\":1,\"608\":1,\"609\":1,\"611\":2,\"612\":12,\"620\":1,\"3085\":1,\"3205\":2,\"3216\":1,\"3743\":1,\"3748\":1}}],[\"<dependencymanagement>\",{\"1\":{\"119\":1}}],[\"<dependencies>\",{\"1\":{\"119\":1,\"123\":1,\"612\":1,\"620\":1}}],[\"<diskstore\",{\"1\":{\"478\":1}}],[\"<logger\",{\"1\":{\"308\":1}}],[\"<logger>仅有一个name属性\",{\"1\":{\"308\":1}}],[\"<logger>用来设置某一个包或者具体的某一个类的日志打印级别\",{\"1\":{\"308\":1}}],[\"<level>error<\",{\"1\":{\"308\":1}}],[\"<level>warn<\",{\"1\":{\"308\":1}}],[\"<level>info<\",{\"1\":{\"308\":2}}],[\"<o2\",{\"1\":{\"757\":1}}],[\"<onmismatch>deny<\",{\"1\":{\"308\":3}}],[\"<onmatch>accept<\",{\"1\":{\"308\":3}}],[\"<optional>true<\",{\"1\":{\"185\":1,\"606\":1,\"608\":1,\"612\":2}}],[\"<r>\",{\"1\":{\"2467\":1}}],[\"<rolename>\",{\"1\":{\"3702\":4}}],[\"<rollingpolicy\",{\"1\":{\"308\":3}}],[\"<root\",{\"1\":{\"308\":2}}],[\"<relativepath\",{\"1\":{\"117\":1}}],[\"<comment>ik\",{\"1\":{\"3488\":1}}],[\"<columncount\",{\"1\":{\"2600\":1}}],[\"<context\",{\"1\":{\"511\":1,\"2716\":1,\"2717\":1}}],[\"<contextname>logback<\",{\"1\":{\"308\":1}}],[\"<configuration\",{\"1\":{\"308\":1}}],[\"<configuration>\",{\"1\":{\"170\":1,\"171\":1}}],[\"<cache\",{\"1\":{\"478\":1}}],[\"<charset>utf\",{\"1\":{\"308\":4}}],[\"<entry\",{\"1\":{\"3488\":4}}],[\"<enrollment\",{\"1\":{\"3333\":1}}],[\"<encoder>\",{\"1\":{\"308\":4}}],[\"<extension>m4a<\",{\"1\":{\"2933\":1}}],[\"<exclusion>\",{\"1\":{\"134\":1}}],[\"<exclusions>\",{\"1\":{\"134\":1}}],[\"<e1\",{\"1\":{\"1963\":1}}],[\"<e>\",{\"1\":{\"1059\":1,\"1967\":1,\"1981\":1,\"1982\":1,\"2653\":1}}],[\"<ehcache\",{\"1\":{\"478\":1}}],[\"<groupid>io\",{\"1\":{\"607\":1,\"612\":1}}],[\"<groupid>net\",{\"1\":{\"476\":1}}],[\"<groupid>co\",{\"1\":{\"413\":1}}],[\"<groupid>com\",{\"1\":{\"355\":1,\"361\":1,\"371\":2,\"413\":1,\"598\":1,\"600\":1,\"609\":1,\"611\":2,\"612\":2,\"3085\":1,\"3216\":1}}],[\"<groupid>redis\",{\"1\":{\"383\":1}}],[\"<groupid>mysql<\",{\"1\":{\"358\":1,\"361\":1,\"371\":1,\"597\":1,\"612\":1}}],[\"<groupid>de\",{\"1\":{\"319\":1,\"323\":1}}],[\"<groupid>javax\",{\"1\":{\"218\":1}}],[\"<groupid>org\",{\"1\":{\"100\":1,\"117\":1,\"118\":1,\"119\":5,\"123\":5,\"134\":2,\"135\":1,\"169\":1,\"170\":1,\"171\":1,\"185\":1,\"209\":1,\"218\":1,\"223\":1,\"239\":1,\"319\":1,\"355\":1,\"361\":1,\"377\":1,\"387\":1,\"438\":1,\"450\":1,\"466\":1,\"482\":1,\"592\":1,\"593\":1,\"594\":1,\"595\":1,\"599\":1,\"602\":1,\"604\":1,\"606\":1,\"608\":1,\"612\":8,\"620\":1,\"3205\":2,\"3743\":1,\"3748\":1}}],[\"<session\",{\"1\":{\"3073\":2}}],[\"<sex>male<\",{\"1\":{\"3030\":1}}],[\"<sex>hehe<\",{\"1\":{\"3027\":1}}],[\"<server\",{\"1\":{\"3019\":1}}],[\"<students\",{\"1\":{\"3030\":1}}],[\"<students>\",{\"1\":{\"3027\":1}}],[\"<student\",{\"1\":{\"3027\":1,\"3030\":1}}],[\"<swagger\",{\"1\":{\"612\":1}}],[\"<springprofile\",{\"1\":{\"308\":2}}],[\"<scope>runtime<\",{\"1\":{\"361\":1,\"371\":1,\"597\":1,\"608\":1,\"612\":1}}],[\"<scope>test<\",{\"1\":{\"223\":1,\"594\":1,\"612\":1}}],[\"<scope>compile<\",{\"1\":{\"123\":5}}],[\"<skip>true<\",{\"1\":{\"171\":1}}],[\"<version>4\",{\"1\":{\"611\":1,\"3743\":1}}],[\"<version>3\",{\"1\":{\"371\":1,\"599\":1,\"600\":1,\"607\":1}}],[\"<version>8\",{\"1\":{\"358\":1,\"413\":1,\"597\":1,\"3205\":2}}],[\"<version>1\",{\"1\":{\"355\":1,\"361\":1,\"371\":1,\"598\":1,\"609\":1,\"3085\":1}}],[\"<version>5\",{\"1\":{\"123\":2}}],[\"<version>$\",{\"1\":{\"119\":4,\"612\":4}}],[\"<version>2\",{\"1\":{\"100\":1,\"117\":1,\"118\":1,\"119\":1,\"123\":3,\"319\":1,\"323\":1,\"413\":1,\"611\":1,\"612\":1,\"3216\":1}}],[\"<alphanum>\",{\"1\":{\"3473\":3}}],[\"<a\",{\"1\":{\"3030\":1}}],[\"<age>18<\",{\"1\":{\"3030\":1}}],[\"<age>abc<\",{\"1\":{\"3027\":1}}],[\"<appender\",{\"1\":{\"308\":13}}],[\"<appengine\",{\"1\":{\"119\":1}}],[\"<activebydefault>true<\",{\"1\":{\"281\":1}}],[\"<activemq\",{\"1\":{\"119\":1}}],[\"<activation>\",{\"1\":{\"281\":1}}],[\"<assertj\",{\"1\":{\"119\":1}}],[\"<aspectj\",{\"1\":{\"119\":1}}],[\"<artifactid>mongodb\",{\"1\":{\"3743\":1}}],[\"<artifactid>mybatis<\",{\"1\":{\"599\":1}}],[\"<artifactid>mybatis\",{\"1\":{\"361\":1,\"371\":1,\"600\":1,\"612\":1}}],[\"<artifactid>mysql\",{\"1\":{\"358\":1,\"361\":1,\"371\":1,\"597\":1,\"612\":1}}],[\"<artifactid>aliyun\",{\"1\":{\"611\":2}}],[\"<artifactid>activemq\",{\"1\":{\"119\":4}}],[\"<artifactid>fastjson<\",{\"1\":{\"609\":1,\"3085\":1}}],[\"<artifactid>lombok<\",{\"1\":{\"606\":1,\"612\":1,\"620\":1}}],[\"<artifactid>ehcache<\",{\"1\":{\"476\":1}}],[\"<artifactid>elasticsearch<\",{\"1\":{\"3205\":1}}],[\"<artifactid>elasticsearch\",{\"1\":{\"413\":1,\"3205\":1}}],[\"<artifactid>jackson\",{\"1\":{\"413\":1,\"3216\":1}}],[\"<artifactid>jedis<\",{\"1\":{\"383\":1}}],[\"<artifactid>druid\",{\"1\":{\"355\":1,\"361\":1,\"371\":1,\"598\":1,\"612\":1}}],[\"<artifactid>hibernate\",{\"1\":{\"218\":1}}],[\"<artifactid>validation\",{\"1\":{\"218\":1}}],[\"<artifactid>springfox\",{\"1\":{\"607\":1,\"612\":1}}],[\"<artifactid>spring\",{\"1\":{\"100\":1,\"117\":1,\"118\":1,\"119\":1,\"123\":5,\"134\":2,\"135\":1,\"169\":1,\"170\":1,\"171\":1,\"185\":1,\"209\":1,\"223\":1,\"239\":1,\"319\":2,\"323\":1,\"355\":1,\"377\":1,\"387\":1,\"438\":1,\"450\":1,\"466\":1,\"482\":1,\"592\":1,\"593\":1,\"594\":1,\"595\":1,\"602\":1,\"604\":1,\"608\":1,\"612\":7,\"3748\":1}}],[\"<artemis\",{\"1\":{\"119\":1}}],[\"<antlr2\",{\"1\":{\"119\":1}}],[\"<pos>\",{\"1\":{\"3433\":1}}],[\"<pwd>123456<\",{\"1\":{\"3019\":1}}],[\"<p>\",{\"1\":{\"1060\":1}}],[\"<p>比如\",{\"1\":{\"1059\":1}}],[\"<project\",{\"1\":{\"2738\":1}}],[\"<property\",{\"1\":{\"308\":2}}],[\"<properties>\",{\"1\":{\"119\":1,\"281\":2,\"612\":1,\"3488\":1}}],[\"<profile\",{\"1\":{\"281\":2}}],[\"<profile>\",{\"1\":{\"281\":2}}],[\"<profiles>\",{\"1\":{\"281\":1}}],[\"<packaging>war<\",{\"1\":{\"2742\":1}}],[\"<packaging>pom<\",{\"1\":{\"119\":1}}],[\"<pattern>\",{\"1\":{\"308\":3}}],[\"<pattern>$\",{\"1\":{\"308\":1}}],[\"<parent>\",{\"1\":{\"117\":1,\"118\":1}}],[\"<plugin>\",{\"1\":{\"100\":1,\"169\":1,\"170\":1,\"171\":1,\"239\":1,\"612\":1}}],[\"<plugins>\",{\"1\":{\"100\":1,\"239\":1,\"612\":1}}],[\"<\",{\"1\":{\"100\":2,\"117\":2,\"118\":1,\"119\":14,\"123\":6,\"134\":3,\"135\":2,\"169\":2,\"170\":2,\"171\":2,\"185\":1,\"209\":1,\"218\":4,\"223\":1,\"239\":3,\"281\":7,\"308\":74,\"319\":2,\"323\":1,\"355\":3,\"358\":1,\"361\":6,\"371\":5,\"383\":1,\"387\":2,\"413\":3,\"438\":2,\"450\":1,\"466\":1,\"476\":1,\"478\":11,\"482\":1,\"506\":4,\"511\":4,\"592\":1,\"593\":1,\"594\":1,\"595\":1,\"597\":1,\"598\":1,\"599\":1,\"600\":1,\"604\":1,\"606\":1,\"607\":1,\"608\":1,\"609\":1,\"611\":2,\"612\":45,\"620\":2,\"739\":1,\"746\":2,\"1059\":2,\"1186\":1,\"1204\":1,\"1240\":2,\"1296\":1,\"1670\":1,\"1729\":1,\"1737\":1,\"1854\":2,\"1855\":1,\"1980\":1,\"2003\":1,\"2056\":1,\"2237\":4,\"2296\":2,\"2581\":1,\"2600\":1,\"2603\":2,\"2604\":1,\"2634\":1,\"2653\":6,\"2687\":1,\"2689\":1,\"2691\":1,\"2738\":1,\"2857\":1,\"2871\":1,\"2920\":2,\"2933\":1,\"3019\":2,\"3020\":2,\"3025\":12,\"3026\":2,\"3027\":4,\"3029\":32,\"3030\":5,\"3073\":1,\"3085\":1,\"3172\":1,\"3193\":1,\"3205\":4,\"3216\":2,\"3236\":1,\"3252\":1,\"3253\":1,\"3488\":9,\"3614\":1,\"3743\":1,\"3748\":1}}],[\"c8710e95\",{\"1\":{\"3712\":1}}],[\"c8ff\",{\"1\":{\"2181\":1}}],[\"cfg=rs\",{\"1\":{\"3689\":1}}],[\"cfg\",{\"1\":{\"3488\":1,\"3689\":2}}],[\"cn\",{\"1\":{\"3029\":2,\"3030\":3,\"3352\":1,\"3480\":2,\"3482\":5,\"3483\":3,\"3485\":5,\"3489\":2}}],[\"cn1\",{\"1\":{\"2253\":2}}],[\"cvfm\",{\"1\":{\"2991\":1}}],[\"csr\",{\"1\":{\"3293\":1,\"3298\":1}}],[\"cs\",{\"1\":{\"3044\":1,\"3047\":3}}],[\"cset\",{\"1\":{\"2491\":1}}],[\"css\",{\"1\":{\"648\":1,\"2695\":1}}],[\"c++\",{\"1\":{\"2247\":1}}],[\"cgi\",{\"1\":{\"2240\":1}}],[\"cb\",{\"1\":{\"2078\":1,\"2079\":1}}],[\"cbuf数组中了\",{\"1\":{\"2054\":1}}],[\"cbuf\",{\"1\":{\"814\":9,\"817\":1,\"818\":1,\"824\":5,\"2053\":5,\"2054\":1,\"2055\":1,\"2056\":4,\"2065\":3,\"2101\":3,\"2106\":3}}],[\"cp\",{\"1\":{\"3727\":3}}],[\"cpp\",{\"1\":{\"2045\":1}}],[\"cpu\",{\"1\":{\"1749\":1,\"2439\":2,\"3391\":1,\"3456\":1,\"3507\":1,\"3513\":1,\"3515\":1}}],[\"cpu的调度策略\",{\"0\":{\"1731\":1}}],[\"cpu的切换效率很高\",{\"1\":{\"1693\":1}}],[\"cpu是来回切换执行线程的\",{\"1\":{\"1729\":1}}],[\"cpu等\",{\"1\":{\"1688\":1}}],[\"c4\",{\"1\":{\"1102\":1,\"2269\":2}}],[\"c3p0\",{\"1\":{\"2668\":2}}],[\"c3\",{\"1\":{\"1102\":1,\"2264\":2,\"2268\":2}}],[\"cdata\",{\"1\":{\"3020\":1}}],[\"cdata区\",{\"1\":{\"3020\":1}}],[\"cde\",{\"1\":{\"1059\":4}}],[\"cd\",{\"1\":{\"1035\":1,\"3289\":1,\"3296\":1,\"3297\":2,\"3300\":1,\"3301\":1,\"3304\":1,\"3310\":1,\"3315\":1,\"3320\":1,\"3324\":1,\"3340\":3}}],[\"c语言等\",{\"1\":{\"1020\":1}}],[\"center\",{\"1\":{\"3554\":1}}],[\"centos\",{\"1\":{\"1034\":1}}],[\"ceiling\",{\"1\":{\"782\":1,\"784\":1}}],[\"ceil\",{\"0\":{\"762\":1},\"1\":{\"761\":1,\"762\":4}}],[\"certutil\",{\"1\":{\"3296\":2,\"3298\":2}}],[\"certutil工具来生成证书\",{\"1\":{\"3292\":1}}],[\"certificates\",{\"1\":{\"3355\":1}}],[\"certificatefactory\",{\"1\":{\"418\":3}}],[\"certificateexception\",{\"1\":{\"418\":2}}],[\"certificate\",{\"1\":{\"418\":2,\"3294\":1,\"3298\":2,\"3305\":1,\"3307\":1,\"3327\":1,\"3328\":1,\"3337\":1,\"3355\":1}}],[\"cert\",{\"1\":{\"418\":3,\"3293\":1}}],[\"certs下的三个证书\",{\"1\":{\"3336\":1}}],[\"certs\",{\"1\":{\"417\":1,\"3110\":1,\"3285\":1,\"3297\":2,\"3298\":1,\"3301\":1,\"3307\":3,\"3321\":1,\"3327\":3,\"3337\":3,\"3355\":3}}],[\"c2\",{\"1\":{\"746\":3,\"1102\":1,\"1426\":2,\"2264\":2,\"2267\":2,\"3052\":2}}],[\"c1\",{\"1\":{\"746\":3,\"1101\":1,\"1102\":1,\"1114\":2,\"1426\":2,\"2264\":2,\"2266\":2,\"3052\":2,\"3053\":3}}],[\"cc\",{\"1\":{\"589\":3,\"756\":3,\"906\":3,\"907\":1,\"908\":1,\"910\":1,\"911\":2,\"912\":2,\"913\":2,\"914\":3,\"1246\":1,\"1451\":1,\"1510\":1,\"1902\":2,\"1931\":1,\"1993\":1,\"2463\":3,\"2639\":1,\"3298\":1}}],[\"curd的api\",{\"0\":{\"2683\":1}}],[\"curd\",{\"0\":{\"2553\":1,\"3753\":1}}],[\"curretnthread\",{\"1\":{\"1727\":1}}],[\"current\",{\"1\":{\"3307\":1,\"3327\":1,\"3355\":1}}],[\"currentpage\",{\"1\":{\"635\":1,\"636\":4,\"640\":3,\"647\":4}}],[\"currenttimemillion\",{\"0\":{\"881\":1}}],[\"currenttimemillis进行计时\",{\"1\":{\"2086\":1}}],[\"currenttimemillis\",{\"1\":{\"347\":1,\"707\":1,\"881\":2,\"1204\":2,\"1357\":1,\"1499\":2,\"2086\":2,\"2621\":1,\"2624\":1}}],[\"currentthread\",{\"1\":{\"499\":2,\"1720\":2,\"1721\":1,\"1728\":2,\"1729\":1,\"1737\":1,\"1740\":1,\"1757\":1,\"1760\":1,\"1768\":2,\"1784\":1,\"1804\":1,\"1810\":1,\"1817\":1}}],[\"cust\",{\"1\":{\"2600\":3,\"2613\":2,\"2655\":2,\"2656\":9,\"2657\":6,\"2676\":2}}],[\"cust2\",{\"1\":{\"1426\":2,\"1427\":2}}],[\"cust1\",{\"1\":{\"1426\":2,\"1427\":2}}],[\"customdata\",{\"1\":{\"3707\":1}}],[\"custom对象\",{\"0\":{\"2599\":1}}],[\"customerdaoimpltest\",{\"1\":{\"2657\":1}}],[\"customerdaoimpl\",{\"0\":{\"2656\":1},\"1\":{\"2656\":1,\"2657\":2}}],[\"customerdao\",{\"0\":{\"2655\":1},\"1\":{\"2655\":1,\"2656\":1}}],[\"customer1\",{\"1\":{\"2601\":2}}],[\"customers\",{\"1\":{\"2567\":1,\"2569\":1,\"2573\":1,\"2577\":1,\"2582\":1,\"2597\":1,\"2601\":2,\"2604\":1,\"2612\":1,\"2613\":1,\"2656\":7,\"2686\":1,\"2687\":1,\"2688\":1,\"2689\":1,\"2690\":1,\"2691\":2}}],[\"customer\",{\"1\":{\"1426\":4,\"1427\":4,\"2597\":4,\"2599\":3,\"2600\":4,\"2601\":4,\"2604\":1,\"2613\":2,\"2655\":4,\"2656\":7,\"2657\":5,\"2676\":1,\"2688\":4,\"2689\":1,\"2690\":5}}],[\"custom\",{\"1\":{\"418\":1,\"563\":2,\"568\":2,\"3355\":1,\"3487\":1,\"3488\":1}}],[\"crud\",{\"1\":{\"3698\":1}}],[\"cron\",{\"1\":{\"499\":1,\"501\":1}}],[\"cron表达式\",{\"0\":{\"501\":1},\"1\":{\"499\":1}}],[\"credentials\",{\"1\":{\"3712\":3}}],[\"credentialsprovider\",{\"1\":{\"418\":5}}],[\"creditcard\",{\"1\":{\"1616\":1}}],[\"creature\",{\"1\":{\"2290\":1}}],[\"creation\",{\"1\":{\"423\":1,\"3124\":1,\"3283\":1,\"3381\":1}}],[\"createuser方法\",{\"1\":{\"3707\":1}}],[\"createuser\",{\"0\":{\"3707\":1},\"1\":{\"3707\":1,\"3709\":1,\"3710\":1,\"3711\":1,\"3724\":1}}],[\"createindex\",{\"1\":{\"3624\":1,\"3626\":1,\"3627\":1}}],[\"createindexrequest\",{\"1\":{\"3209\":2,\"3210\":3}}],[\"createindexresponse对象\",{\"1\":{\"422\":1}}],[\"createindexresponse\",{\"1\":{\"419\":1,\"422\":2,\"3209\":1}}],[\"createcollection\",{\"1\":{\"3581\":2}}],[\"createstatement\",{\"1\":{\"2620\":1}}],[\"createfile\",{\"1\":{\"2168\":1}}],[\"createnewfile\",{\"0\":{\"803\":1},\"1\":{\"803\":2}}],[\"create方法可能会抛出两个异常\",{\"1\":{\"422\":1}}],[\"create\",{\"1\":{\"419\":1,\"422\":2,\"433\":1,\"2619\":1,\"2642\":1,\"2683\":1,\"2734\":1,\"3209\":1,\"3210\":1,\"3267\":1,\"3307\":1,\"3316\":1,\"3327\":1,\"3328\":2,\"3331\":1,\"3355\":1,\"3503\":1,\"3571\":1}}],[\"createdatetime\",{\"1\":{\"3587\":1,\"3590\":2,\"3596\":1,\"3682\":1}}],[\"createdatasource\",{\"1\":{\"2672\":1,\"2675\":1}}],[\"createdirectory\",{\"1\":{\"2168\":1}}],[\"created表示创建成功\",{\"1\":{\"428\":1,\"3135\":1}}],[\"created\",{\"1\":{\"246\":2,\"423\":1,\"428\":1,\"3124\":1,\"3135\":1,\"3283\":1,\"3381\":1}}],[\"crt证书\",{\"1\":{\"417\":1}}],[\"crt\",{\"1\":{\"416\":1,\"3326\":1}}],[\"crtname\",{\"1\":{\"416\":1,\"418\":4}}],[\"criteria\",{\"1\":{\"404\":1,\"405\":1,\"406\":1,\"407\":1,\"410\":1}}],[\"cr\",{\"1\":{\"392\":2}}],[\"cj\",{\"1\":{\"356\":1,\"358\":1,\"362\":1,\"369\":1,\"372\":1,\"617\":1,\"2545\":1,\"2546\":1,\"2550\":1}}],[\"cyan\",{\"1\":{\"299\":1,\"308\":2}}],[\"cybercell\",{\"1\":{\"129\":1,\"366\":1,\"589\":3}}],[\"clustermonitor\",{\"1\":{\"3703\":1}}],[\"clustermanager\",{\"1\":{\"3703\":1}}],[\"clusteradmin\",{\"1\":{\"3703\":1,\"3704\":1}}],[\"clustertime\",{\"1\":{\"3670\":1,\"3673\":1,\"3674\":1,\"3700\":1,\"3701\":1}}],[\"cluster用来存放集群\",{\"1\":{\"3336\":1}}],[\"cluster\",{\"0\":{\"3260\":1},\"1\":{\"3093\":1,\"3108\":2,\"3264\":1,\"3268\":2,\"3269\":2,\"3270\":2,\"3271\":2,\"3273\":1,\"3274\":1,\"3275\":1,\"3278\":2,\"3279\":1,\"3280\":1,\"3305\":3,\"3307\":5,\"3327\":5,\"3328\":3,\"3332\":2,\"3337\":4,\"3339\":6,\"3340\":3,\"3355\":10,\"3378\":2,\"3380\":1,\"3386\":1,\"3675\":1}}],[\"cl4\",{\"1\":{\"2280\":2}}],[\"cl3\",{\"1\":{\"2280\":2}}],[\"cl2\",{\"1\":{\"2280\":3}}],[\"cl1\",{\"1\":{\"2280\":3}}],[\"cloud\",{\"0\":{\"3759\":1}}],[\"closing\",{\"1\":{\"3110\":1}}],[\"closequietly\",{\"1\":{\"2682\":1}}],[\"closeresource\",{\"1\":{\"2576\":1,\"2577\":1,\"2581\":1,\"2597\":1,\"2600\":1,\"2603\":1,\"2612\":1,\"2613\":1,\"2621\":1,\"2624\":1,\"2625\":1,\"2634\":1,\"2635\":1,\"2652\":2,\"2653\":4,\"2657\":7,\"2676\":1,\"2686\":1,\"2687\":1,\"2688\":1,\"2689\":1,\"2690\":1,\"2691\":1}}],[\"close方法一定要放到finally语句里\",{\"1\":{\"827\":1}}],[\"close\",{\"0\":{\"819\":1,\"827\":1,\"2050\":1,\"2062\":1,\"2100\":1},\"1\":{\"819\":3,\"820\":1,\"827\":2,\"1581\":1,\"1583\":1,\"1592\":1,\"1600\":1,\"2040\":1,\"2050\":1,\"2052\":1,\"2053\":1,\"2062\":1,\"2064\":1,\"2065\":2,\"2070\":1,\"2071\":2,\"2081\":2,\"2082\":1,\"2084\":3,\"2105\":1,\"2106\":2,\"2118\":1,\"2121\":1,\"2126\":1,\"2127\":1,\"2136\":2,\"2139\":1,\"2151\":1,\"2152\":1,\"2156\":1,\"2157\":1,\"2214\":1,\"2220\":1,\"2225\":2,\"2231\":1,\"2232\":1,\"2233\":1,\"2566\":2,\"2573\":2,\"2576\":2,\"2613\":1,\"2669\":2,\"2682\":1,\"2894\":1,\"2895\":1,\"3206\":1,\"3209\":1,\"3211\":1,\"3212\":1,\"3214\":1,\"3217\":1,\"3218\":1,\"3220\":1,\"3221\":1,\"3225\":1,\"3226\":1,\"3227\":1,\"3231\":1,\"3234\":1,\"3237\":1,\"3240\":1,\"3242\":1,\"3244\":1,\"3249\":1,\"3253\":1}}],[\"closeable\",{\"1\":{\"812\":2,\"820\":1,\"885\":1,\"1006\":1}}],[\"clothfactory\",{\"1\":{\"2327\":1,\"2328\":3,\"2329\":1,\"2330\":2}}],[\"clone\",{\"1\":{\"1424\":1}}],[\"click\",{\"1\":{\"3305\":1,\"3328\":1}}],[\"clist\",{\"1\":{\"2491\":1}}],[\"cli\",{\"1\":{\"1019\":1}}],[\"clientbypasswd\",{\"1\":{\"418\":1}}],[\"clientsocket\",{\"1\":{\"2220\":3}}],[\"clients\",{\"1\":{\"418\":4}}],[\"clients<\",{\"1\":{\"383\":1,\"413\":1}}],[\"client\",{\"1\":{\"324\":1,\"326\":1,\"383\":1,\"384\":1,\"414\":2,\"418\":7,\"422\":2,\"423\":3,\"424\":3,\"425\":3,\"428\":3,\"429\":3,\"430\":3,\"431\":3,\"432\":3,\"2220\":1,\"2225\":3,\"2226\":1,\"3210\":1,\"3307\":1,\"3327\":1,\"3355\":1}}],[\"client<\",{\"1\":{\"323\":1,\"3205\":2}}],[\"clearbatch\",{\"0\":{\"2618\":1},\"1\":{\"2624\":1,\"2625\":1}}],[\"clear\",{\"0\":{\"908\":1,\"962\":1},\"1\":{\"908\":2,\"909\":1,\"962\":2,\"967\":1}}],[\"cl\",{\"1\":{\"837\":2,\"2269\":2}}],[\"clazz参数\",{\"1\":{\"2651\":1}}],[\"clazz\",{\"1\":{\"536\":2,\"834\":2,\"835\":2,\"836\":2,\"837\":2,\"838\":2,\"839\":2,\"840\":2,\"841\":2,\"842\":1,\"843\":2,\"844\":2,\"845\":2,\"846\":1,\"848\":2,\"849\":2,\"850\":3,\"852\":2,\"853\":2,\"854\":2,\"855\":1,\"856\":2,\"857\":2,\"858\":2,\"859\":2,\"864\":3,\"865\":3,\"868\":2,\"874\":3,\"877\":2,\"2252\":2,\"2286\":3,\"2295\":3,\"2296\":2,\"2298\":3,\"2299\":2,\"2300\":2,\"2301\":2,\"2302\":3,\"2303\":2,\"2304\":2,\"2306\":3,\"2311\":4,\"2315\":2,\"2547\":2,\"2603\":3,\"2653\":6}}],[\"class后面选择按钮\",{\"1\":{\"2992\":1}}],[\"class传递进去\",{\"1\":{\"2605\":1}}],[\"classtest\",{\"1\":{\"2280\":1}}],[\"class对象\",{\"1\":{\"2274\":1}}],[\"class对应的属性了\",{\"1\":{\"247\":1}}],[\"class本身也是一个类\",{\"1\":{\"2263\":1}}],[\"class是直接操纵加载到内存里的类的\",{\"1\":{\"2262\":1}}],[\"class结尾\",{\"1\":{\"2261\":1}}],[\"class结尾的文件\",{\"1\":{\"1041\":1}}],[\"class与类的加载\",{\"0\":{\"2261\":1}}],[\"class与反射工作原理\",{\"0\":{\"2248\":1}}],[\"class属于类的类\",{\"1\":{\"2260\":1}}],[\"class属性\",{\"1\":{\"247\":2,\"2981\":1}}],[\"class属性配置的类\",{\"1\":{\"244\":1,\"246\":1}}],[\"class以及枚举的数组\",{\"1\":{\"1646\":1}}],[\"classcastexception异常\",{\"1\":{\"1951\":1}}],[\"classcastexception\",{\"0\":{\"1579\":1},\"1\":{\"1567\":1,\"1571\":1,\"2296\":1}}],[\"class文件中\",{\"1\":{\"1654\":1}}],[\"class文件\",{\"1\":{\"1460\":1,\"2263\":1}}],[\"class的特点\",{\"0\":{\"2263\":1}}],[\"class的实例就对应着一个运行时类\",{\"1\":{\"2262\":1}}],[\"class的全类名为\",{\"1\":{\"2260\":1}}],[\"class的名字不能与包含它的外部类类名相同\",{\"1\":{\"1449\":1}}],[\"class的字段\",{\"1\":{\"403\":1}}],[\"class关键字\",{\"1\":{\"1258\":1}}],[\"class和hi\",{\"1\":{\"1049\":1}}],[\"class作为后缀\",{\"1\":{\"1040\":1}}],[\"classname\",{\"1\":{\"838\":1,\"1476\":1,\"2253\":3,\"2419\":1}}],[\"classnotfoundexception\",{\"1\":{\"536\":1,\"836\":1,\"838\":1,\"1571\":1,\"2268\":1}}],[\"classloadertest\",{\"1\":{\"2282\":1}}],[\"classloader\",{\"0\":{\"2269\":1,\"2278\":1},\"1\":{\"837\":2,\"844\":4,\"845\":3,\"2269\":1,\"2278\":1,\"2280\":4,\"2282\":3,\"2338\":1,\"2573\":1,\"2575\":1,\"2672\":1,\"2675\":1}}],[\"class类的常用方法\",{\"0\":{\"2270\":1}}],[\"class类是reflection的根源\",{\"1\":{\"2263\":1}}],[\"class类是反射的源头\",{\"1\":{\"2260\":1}}],[\"class类是类的类\",{\"1\":{\"2248\":1}}],[\"class类\",{\"0\":{\"2260\":1},\"1\":{\"567\":1,\"1763\":1}}],[\"class即可\",{\"1\":{\"516\":1}}],[\"class<void>\",{\"1\":{\"2264\":1}}],[\"class<override>\",{\"1\":{\"2264\":1}}],[\"class<object>\",{\"1\":{\"2264\":1}}],[\"class<person>\",{\"1\":{\"834\":1,\"839\":1,\"840\":1,\"841\":1,\"843\":1,\"844\":1,\"845\":1,\"848\":1,\"849\":1,\"850\":1,\"852\":1,\"853\":1,\"854\":1,\"856\":1,\"857\":1,\"858\":1,\"859\":1,\"864\":1,\"865\":1,\"868\":1,\"874\":1,\"877\":1,\"1680\":1,\"2257\":1,\"2258\":1,\"2266\":1,\"2285\":1,\"2286\":1,\"2289\":1}}],[\"class<t>\",{\"0\":{\"2605\":1},\"1\":{\"832\":1,\"2603\":1,\"2653\":2}}],[\"class<\",{\"1\":{\"404\":1,\"406\":1,\"514\":1,\"536\":1,\"835\":1,\"836\":1,\"837\":1,\"838\":2,\"841\":2,\"843\":2,\"850\":1,\"858\":1,\"859\":1,\"862\":2,\"870\":2,\"872\":2,\"873\":2,\"1652\":1,\"2267\":1,\"2268\":1,\"2269\":1,\"2293\":1,\"2338\":1,\"2546\":1}}],[\"class字段\",{\"0\":{\"401\":1},\"1\":{\"401\":2}}],[\"classic\",{\"1\":{\"308\":4}}],[\"class=\",{\"1\":{\"308\":14,\"506\":5}}],[\"classpathresource\",{\"1\":{\"418\":3}}],[\"classpath\",{\"0\":{\"2268\":1},\"1\":{\"246\":2,\"342\":1,\"578\":1,\"2252\":7}}],[\"classes默认是编译后的java文件目录\",{\"1\":{\"2941\":1}}],[\"classes\",{\"1\":{\"244\":1,\"246\":2,\"563\":2,\"568\":2,\"2722\":1,\"2723\":1,\"2759\":1,\"2941\":1,\"2942\":1}}],[\"classes属性\",{\"0\":{\"229\":1}}],[\"class\",{\"0\":{\"567\":1,\"832\":1,\"836\":1,\"847\":1,\"851\":1,\"1044\":1,\"1494\":1,\"2259\":1,\"2266\":1},\"1\":{\"109\":1,\"127\":2,\"128\":4,\"155\":1,\"164\":2,\"197\":2,\"200\":1,\"202\":1,\"207\":2,\"208\":1,\"211\":1,\"215\":1,\"216\":1,\"219\":1,\"220\":1,\"226\":1,\"227\":1,\"229\":2,\"244\":1,\"246\":2,\"259\":3,\"288\":2,\"290\":1,\"309\":1,\"320\":2,\"347\":1,\"350\":1,\"356\":1,\"362\":1,\"364\":1,\"366\":1,\"372\":1,\"375\":1,\"379\":1,\"380\":1,\"394\":1,\"403\":1,\"404\":2,\"406\":2,\"407\":2,\"408\":2,\"409\":3,\"410\":3,\"418\":1,\"419\":1,\"422\":1,\"423\":1,\"424\":1,\"425\":1,\"427\":1,\"428\":1,\"429\":2,\"430\":1,\"431\":1,\"432\":2,\"444\":1,\"445\":1,\"446\":1,\"447\":1,\"452\":2,\"455\":1,\"467\":1,\"470\":1,\"471\":1,\"472\":1,\"473\":1,\"493\":1,\"498\":2,\"499\":1,\"509\":1,\"510\":1,\"513\":1,\"514\":3,\"518\":5,\"520\":4,\"521\":6,\"523\":1,\"524\":2,\"525\":1,\"527\":2,\"528\":2,\"530\":2,\"536\":2,\"540\":1,\"541\":1,\"543\":1,\"546\":1,\"549\":2,\"550\":1,\"553\":1,\"554\":2,\"555\":4,\"563\":4,\"566\":1,\"568\":2,\"578\":2,\"617\":1,\"619\":1,\"623\":1,\"626\":1,\"636\":1,\"637\":1,\"640\":1,\"645\":2,\"646\":1,\"647\":1,\"649\":1,\"688\":2,\"714\":2,\"715\":2,\"716\":2,\"723\":2,\"728\":2,\"749\":1,\"759\":2,\"777\":2,\"778\":2,\"786\":2,\"812\":2,\"820\":2,\"832\":2,\"834\":2,\"835\":1,\"836\":2,\"837\":1,\"838\":3,\"839\":1,\"840\":1,\"841\":2,\"843\":1,\"844\":1,\"845\":1,\"848\":1,\"849\":1,\"850\":3,\"852\":1,\"853\":1,\"854\":1,\"856\":1,\"857\":1,\"858\":2,\"859\":3,\"860\":2,\"864\":1,\"865\":1,\"867\":2,\"868\":2,\"872\":1,\"874\":3,\"876\":1,\"877\":2,\"880\":2,\"885\":2,\"889\":2,\"893\":1,\"927\":1,\"928\":1,\"993\":1,\"994\":1,\"997\":1,\"1002\":1,\"1003\":1,\"1006\":2,\"1038\":2,\"1049\":3,\"1050\":4,\"1059\":2,\"1075\":1,\"1184\":1,\"1186\":1,\"1255\":1,\"1258\":1,\"1259\":1,\"1267\":3,\"1280\":1,\"1282\":2,\"1292\":1,\"1293\":2,\"1302\":2,\"1304\":2,\"1316\":1,\"1319\":1,\"1330\":1,\"1349\":2,\"1350\":1,\"1352\":1,\"1360\":2,\"1368\":2,\"1376\":2,\"1381\":1,\"1382\":1,\"1384\":1,\"1401\":1,\"1408\":3,\"1449\":1,\"1451\":6,\"1457\":1,\"1458\":2,\"1466\":1,\"1467\":1,\"1475\":1,\"1476\":1,\"1481\":1,\"1488\":1,\"1489\":1,\"1494\":1,\"1497\":2,\"1499\":1,\"1500\":2,\"1509\":1,\"1510\":1,\"1512\":2,\"1526\":1,\"1534\":2,\"1541\":1,\"1543\":1,\"1560\":1,\"1587\":1,\"1600\":1,\"1609\":2,\"1612\":1,\"1621\":1,\"1648\":1,\"1654\":4,\"1659\":1,\"1666\":1,\"1667\":1,\"1668\":2,\"1670\":1,\"1679\":1,\"1680\":9,\"1720\":2,\"1728\":2,\"1729\":2,\"1737\":2,\"1740\":2,\"1747\":1,\"1757\":2,\"1760\":2,\"1763\":1,\"1768\":2,\"1769\":2,\"1772\":1,\"1780\":1,\"1784\":2,\"1795\":1,\"1804\":2,\"1810\":2,\"1817\":2,\"1874\":1,\"1963\":1,\"1967\":1,\"1970\":1,\"1971\":1,\"1972\":1,\"1973\":1,\"1974\":1,\"2001\":2,\"2004\":1,\"2076\":1,\"2077\":1,\"2078\":1,\"2079\":1,\"2094\":1,\"2155\":1,\"2190\":1,\"2238\":1,\"2250\":1,\"2252\":2,\"2255\":1,\"2257\":3,\"2258\":3,\"2260\":2,\"2263\":2,\"2264\":5,\"2266\":2,\"2267\":1,\"2268\":2,\"2269\":1,\"2279\":1,\"2280\":2,\"2282\":1,\"2285\":2,\"2286\":4,\"2289\":1,\"2295\":2,\"2296\":4,\"2298\":2,\"2299\":3,\"2300\":2,\"2301\":3,\"2302\":6,\"2303\":2,\"2304\":2,\"2306\":2,\"2311\":4,\"2313\":1,\"2315\":3,\"2328\":1,\"2329\":1,\"2330\":1,\"2342\":1,\"2343\":1,\"2349\":1,\"2469\":1,\"2546\":1,\"2547\":2,\"2548\":1,\"2551\":2,\"2558\":1,\"2573\":1,\"2575\":1,\"2599\":1,\"2600\":1,\"2604\":1,\"2639\":1,\"2653\":1,\"2656\":1,\"2657\":1,\"2688\":1,\"2689\":1,\"2779\":1,\"2780\":1,\"2804\":1,\"2812\":1,\"2814\":1,\"2819\":1,\"2846\":1,\"2862\":1,\"2872\":1,\"2873\":1,\"2888\":1,\"2903\":2,\"2909\":1,\"2910\":1,\"2945\":1,\"2973\":1,\"2974\":1,\"2981\":1,\"2991\":1,\"3087\":1,\"3206\":1,\"3209\":1,\"3211\":1,\"3212\":1,\"3214\":1,\"3215\":1,\"3217\":1,\"3218\":1,\"3220\":1,\"3221\":1,\"3225\":1,\"3226\":1,\"3227\":1,\"3231\":1,\"3234\":1,\"3237\":1,\"3240\":1,\"3242\":1,\"3244\":1,\"3249\":1,\"3253\":1}}],[\"clr\",{\"1\":{\"299\":4}}],[\"ca模式生成新的证书颁发机构\",{\"1\":{\"3293\":1}}],[\"ca模式\",{\"0\":{\"3293\":1}}],[\"ca证书工作机理\",{\"0\":{\"3295\":1}}],[\"ca证书\",{\"0\":{\"3292\":1,\"3294\":1},\"1\":{\"3294\":1,\"3326\":1}}],[\"cardinality\",{\"1\":{\"3187\":1,\"3188\":2,\"3247\":1,\"3248\":1}}],[\"cartoonproperties已经注册到容器里了\",{\"1\":{\"554\":1}}],[\"cartoonproperties\",{\"1\":{\"553\":1,\"554\":12}}],[\"cartooncatandmouse\",{\"1\":{\"550\":1,\"554\":2,\"555\":3}}],[\"cartoon\",{\"1\":{\"550\":1,\"553\":1}}],[\"carton\",{\"1\":{\"548\":1}}],[\"cash\",{\"1\":{\"1616\":1}}],[\"case判断\",{\"1\":{\"2335\":1}}],[\"case中\",{\"1\":{\"1193\":1}}],[\"case执行效率稍高\",{\"1\":{\"1177\":1}}],[\"case的\",{\"1\":{\"1177\":1}}],[\"case的选择\",{\"0\":{\"1177\":1}}],[\"case的限制\",{\"1\":{\"1175\":1}}],[\"case结构中\",{\"1\":{\"1175\":1}}],[\"case结构\",{\"1\":{\"1175\":2}}],[\"case\",{\"1\":{\"987\":1,\"997\":2,\"1165\":1,\"1174\":2,\"1175\":1,\"1176\":5,\"1177\":2,\"2252\":3}}],[\"can\",{\"1\":{\"1059\":1,\"3307\":1,\"3327\":1,\"3355\":1}}],[\"canon\",{\"1\":{\"997\":1}}],[\"canexecute\",{\"1\":{\"800\":1}}],[\"canwrite\",{\"1\":{\"800\":1}}],[\"canread\",{\"1\":{\"800\":2}}],[\"canxxx\",{\"0\":{\"800\":1}}],[\"cancal\",{\"1\":{\"492\":2}}],[\"capacity的值至少是treeify\",{\"1\":{\"1928\":1}}],[\"capacity时\",{\"1\":{\"1928\":1}}],[\"capacity\",{\"1\":{\"696\":2,\"1868\":1,\"1928\":3}}],[\"capable\",{\"1\":{\"398\":1}}],[\"category\",{\"1\":{\"3141\":1,\"3142\":2,\"3159\":1,\"3160\":2,\"3164\":2,\"3176\":5,\"3177\":2,\"3180\":2,\"3190\":1,\"3191\":1}}],[\"catalina\",{\"1\":{\"2717\":1,\"2755\":1}}],[\"cat\",{\"1\":{\"506\":2,\"509\":1,\"520\":1,\"521\":4,\"523\":1,\"525\":1,\"536\":1,\"540\":4,\"541\":2,\"548\":1,\"549\":1,\"550\":3,\"553\":2,\"554\":5,\"1451\":1,\"3126\":1,\"3313\":2,\"3346\":2}}],[\"catchuptakeoverdelaymillis\",{\"1\":{\"3667\":1}}],[\"catchuptimeoutmillis\",{\"1\":{\"3667\":1}}],[\"catch进行异常捕捉处理\",{\"1\":{\"3592\":1}}],[\"catch进行处理\",{\"1\":{\"1595\":1}}],[\"catch插入\",{\"0\":{\"3592\":1}}],[\"catch处理\",{\"1\":{\"1595\":1,\"1604\":1,\"2106\":1}}],[\"catch中的异常类\",{\"1\":{\"1969\":1}}],[\"catch中的异常类型如果满足子父类关系\",{\"1\":{\"1594\":1}}],[\"catch中的异常类型如果没有子父类关系\",{\"1\":{\"1594\":1}}],[\"catch中有return语句\",{\"1\":{\"1590\":1}}],[\"catch捕获的顺序\",{\"1\":{\"1594\":1}}],[\"catch和finally里面也可能会有异常\",{\"1\":{\"1593\":1}}],[\"catch和throws\",{\"1\":{\"1562\":1}}],[\"catch结构\",{\"1\":{\"1588\":1,\"1598\":1}}],[\"catch使用说明\",{\"0\":{\"1588\":1}}],[\"catch示例\",{\"0\":{\"1587\":1}}],[\"catch语句\",{\"1\":{\"827\":1}}],[\"catch\",{\"0\":{\"1584\":1,\"1601\":1,\"1603\":1},\"1\":{\"418\":1,\"536\":1,\"674\":2,\"803\":1,\"827\":2,\"1566\":2,\"1585\":4,\"1586\":1,\"1587\":3,\"1591\":1,\"1592\":4,\"1593\":1,\"1595\":3,\"1600\":1,\"1601\":1,\"1603\":2,\"1609\":1,\"1729\":4,\"1795\":2,\"1804\":1,\"1810\":2,\"2051\":1,\"2052\":2,\"2053\":2,\"2063\":1,\"2064\":2,\"2065\":3,\"2071\":3,\"2082\":2,\"2084\":3,\"2118\":2,\"2121\":1,\"2231\":1,\"2232\":1,\"2238\":1,\"2573\":3,\"2576\":2,\"2577\":1,\"2581\":1,\"2597\":1,\"2600\":1,\"2603\":1,\"2613\":1,\"2634\":1,\"2635\":3,\"2653\":4,\"2657\":7,\"2675\":1,\"2676\":1,\"3592\":1}}],[\"caffeine\",{\"1\":{\"464\":1,\"488\":1}}],[\"calling\",{\"1\":{\"3465\":1,\"3466\":1,\"3467\":1,\"3468\":1,\"3469\":1}}],[\"callablestatement\",{\"1\":{\"2556\":1}}],[\"callable<t>\",{\"1\":{\"1814\":1}}],[\"callabletest\",{\"1\":{\"1810\":1}}],[\"callable\",{\"1\":{\"1810\":1}}],[\"callable任务的执行结果进行取消\",{\"1\":{\"1808\":1}}],[\"callable接口的实例\",{\"1\":{\"1808\":1}}],[\"callable接口更加强大\",{\"1\":{\"1807\":1}}],[\"callable接口介绍\",{\"0\":{\"1807\":1}}],[\"callable接口\",{\"0\":{\"1806\":1}}],[\"call\",{\"1\":{\"1807\":2,\"1810\":1,\"3469\":1}}],[\"callneer\",{\"1\":{\"1467\":1}}],[\"callnener\",{\"1\":{\"1467\":1}}],[\"callback\",{\"1\":{\"418\":2}}],[\"calendar则不行\",{\"1\":{\"708\":1}}],[\"calendar\",{\"1\":{\"707\":1}}],[\"calsses\",{\"1\":{\"2750\":2}}],[\"calssess\",{\"1\":{\"229\":1}}],[\"calss\",{\"1\":{\"404\":1,\"406\":1}}],[\"ca\",{\"1\":{\"416\":1,\"417\":1,\"418\":1,\"3293\":2,\"3296\":7,\"3298\":5,\"3300\":1,\"3301\":1,\"3305\":1,\"3326\":1,\"3328\":1}}],[\"cache里的文件已经可以查询了\",{\"1\":{\"3450\":1}}],[\"cache中的数据被定时\",{\"1\":{\"3449\":1}}],[\"cache时\",{\"1\":{\"3449\":1}}],[\"cache是为了减少磁盘io参数的\",{\"1\":{\"3449\":1}}],[\"cachecode\",{\"1\":{\"471\":2}}],[\"cacheput\",{\"1\":{\"468\":1,\"471\":1}}],[\"cacheable\",{\"1\":{\"468\":2,\"471\":1,\"472\":1,\"485\":1}}],[\"cache<\",{\"1\":{\"466\":1}}],[\"cache\",{\"1\":{\"347\":1,\"470\":1,\"471\":2,\"472\":1,\"473\":1,\"477\":1,\"483\":3,\"2850\":1,\"3449\":5,\"3450\":1,\"3527\":4}}],[\"caches\",{\"1\":{\"342\":1}}],[\"camel<\",{\"1\":{\"119\":1}}],[\"chmod\",{\"1\":{\"3726\":1}}],[\"chown\",{\"1\":{\"3291\":1,\"3322\":1}}],[\"chn\",{\"1\":{\"2311\":2}}],[\"chann\",{\"1\":{\"3314\":1,\"3347\":1}}],[\"channel\",{\"1\":{\"2161\":1,\"3110\":1}}],[\"channels\",{\"1\":{\"2161\":1}}],[\"changeuserpassword\",{\"1\":{\"3714\":1}}],[\"change\",{\"1\":{\"3298\":1,\"3675\":1}}],[\"chainingallowed\",{\"1\":{\"3667\":1}}],[\"chain\",{\"1\":{\"2945\":2,\"2947\":1,\"2948\":1}}],[\"char会转为整形的ascii进行运算\",{\"1\":{\"1113\":1}}],[\"char是通过转为ascii码进行运算的\",{\"1\":{\"1110\":1}}],[\"char类型就是以数值方式储存的\",{\"1\":{\"1426\":1}}],[\"char类型的值不能是空字符串\",{\"1\":{\"1104\":1}}],[\"char类型没有parsexxx方法\",{\"1\":{\"671\":1}}],[\"char数组每次装\",{\"1\":{\"817\":1,\"2056\":1}}],[\"char替换\",{\"0\":{\"677\":1}}],[\"chars\",{\"1\":{\"673\":2}}],[\"charset=utf\",{\"1\":{\"2889\":1,\"2896\":1}}],[\"charset\",{\"1\":{\"1061\":1}}],[\"charsetname\",{\"1\":{\"674\":1,\"2096\":1,\"2104\":1}}],[\"charset>\",{\"1\":{\"308\":4}}],[\"charsequence可以看做字符串\",{\"1\":{\"663\":1}}],[\"charsequence\",{\"1\":{\"663\":1,\"678\":2,\"688\":2,\"730\":1,\"998\":2,\"1000\":1,\"1001\":1,\"1004\":1}}],[\"char\",{\"0\":{\"815\":1,\"1099\":1},\"1\":{\"655\":1,\"672\":3,\"673\":4,\"677\":2,\"688\":1,\"690\":1,\"692\":4,\"693\":2,\"700\":1,\"746\":4,\"813\":3,\"814\":6,\"817\":2,\"818\":1,\"824\":3,\"1075\":1,\"1100\":1,\"1101\":1,\"1102\":4,\"1113\":1,\"1114\":1,\"1126\":1,\"1134\":1,\"1175\":1,\"1273\":1,\"1287\":1,\"1426\":3,\"1546\":1,\"1583\":1,\"1592\":1,\"1600\":1,\"2052\":1,\"2053\":3,\"2056\":2,\"2065\":2,\"2078\":1,\"2079\":1,\"2101\":2,\"2106\":2,\"2121\":1,\"2124\":1,\"2562\":1,\"3482\":2,\"3483\":2,\"3485\":4}}],[\"character\",{\"1\":{\"746\":1,\"997\":1}}],[\"characters\",{\"1\":{\"212\":1}}],[\"charat\",{\"0\":{\"655\":1},\"1\":{\"655\":2,\"697\":1,\"1058\":2,\"1575\":1,\"1578\":1}}],[\"child\",{\"0\":{\"2016\":1,\"2017\":1},\"1\":{\"786\":2,\"2016\":1,\"2017\":1,\"3563\":2,\"3656\":2,\"3757\":1}}],[\"china\",{\"1\":{\"725\":2,\"1475\":2,\"1481\":1,\"2258\":3}}],[\"chronolocaldatetime<localdate>\",{\"1\":{\"716\":1}}],[\"chronolocaldate\",{\"1\":{\"714\":1}}],[\"chrono\",{\"1\":{\"710\":1}}],[\"chronounit\",{\"1\":{\"215\":1}}],[\"checkbox\",{\"1\":{\"2871\":2}}],[\"checked\",{\"1\":{\"1571\":1,\"1616\":1}}],[\"checkuser\",{\"1\":{\"546\":2}}],[\"check\",{\"1\":{\"546\":4}}],[\"checkcode\",{\"1\":{\"471\":2,\"473\":2}}],[\"ch\",{\"1\":{\"308\":14,\"2850\":3}}],[\"c\",{\"0\":{\"893\":1,\"1544\":1},\"1\":{\"149\":2,\"419\":2,\"422\":2,\"423\":2,\"424\":2,\"501\":2,\"672\":2,\"673\":1,\"803\":1,\"804\":1,\"805\":1,\"807\":2,\"824\":3,\"884\":1,\"893\":1,\"897\":1,\"899\":2,\"906\":1,\"911\":1,\"913\":1,\"914\":1,\"932\":1,\"936\":1,\"939\":1,\"944\":2,\"945\":3,\"946\":2,\"947\":1,\"948\":1,\"949\":1,\"950\":3,\"951\":2,\"952\":3,\"965\":1,\"1001\":2,\"1059\":1,\"1134\":4,\"1220\":1,\"1338\":1,\"1376\":1,\"1426\":2,\"1546\":1,\"1547\":1,\"1680\":3,\"1795\":1,\"2045\":1,\"2101\":1,\"2247\":3,\"2298\":4,\"2302\":4,\"2444\":1,\"2445\":1,\"2483\":1,\"2484\":1,\"2485\":1,\"2490\":1,\"2704\":1,\"2755\":1,\"2942\":2,\"2991\":1,\"3002\":1,\"3011\":1,\"3042\":1,\"3044\":3,\"3046\":2,\"3047\":3,\"3070\":3,\"3289\":1,\"3320\":1,\"3547\":1,\"3548\":1,\"3561\":1}}],[\"ctx\",{\"1\":{\"128\":2,\"520\":3,\"521\":5,\"555\":2}}],[\"ctrl+alt+shift+s\",{\"1\":{\"2733\":1,\"2743\":1,\"2763\":1,\"2773\":1}}],[\"ctrl\",{\"1\":{\"118\":1,\"186\":1,\"2354\":1}}],[\"cmd\",{\"1\":{\"98\":1}}],[\"coordinating\",{\"1\":{\"3404\":1}}],[\"cookie是用来保证用户在未登录情况下的身份识别\",{\"1\":{\"3079\":1}}],[\"cookie是存储在浏览器端而session是存储在服务器端\",{\"1\":{\"3037\":1}}],[\"cookie与session的应用场景\",{\"0\":{\"3078\":1}}],[\"cookie与session的区别\",{\"0\":{\"3077\":1}}],[\"cookie可以通过setmaxage\",{\"1\":{\"3077\":1}}],[\"cookie可能有多个\",{\"1\":{\"3043\":1}}],[\"cookie最大3kb\",{\"1\":{\"3077\":1}}],[\"cookie不占服务器资源\",{\"1\":{\"3077\":1}}],[\"cookie不安全\",{\"1\":{\"3077\":1}}],[\"cookie不止是储存了键值对\",{\"1\":{\"3051\":1}}],[\"cookie中有jsessionid\",{\"1\":{\"3068\":1}}],[\"cookie中不能直接存储中文数据\",{\"1\":{\"3054\":1}}],[\"cookie一般用于存出少量的不太敏感的数据\",{\"1\":{\"3058\":1}}],[\"cookie存储数据在客户端浏览器\",{\"1\":{\"3058\":1}}],[\"cookie支持中文数据\",{\"1\":{\"3054\":1}}],[\"cookie文件自动失效\",{\"1\":{\"3053\":1}}],[\"cookie数据被销毁\",{\"1\":{\"3053\":1}}],[\"cookie保存起来\",{\"1\":{\"3050\":1}}],[\"cookie有关的所有操作都是基于请求头和响应头的\",{\"1\":{\"3048\":1}}],[\"cookie的特性\",{\"1\":{\"3058\":1}}],[\"cookie的共享\",{\"0\":{\"3055\":1}}],[\"cookie的保存时间\",{\"0\":{\"3053\":1}}],[\"cookie的适用范围\",{\"1\":{\"3051\":1}}],[\"cookie的识别\",{\"0\":{\"3051\":1}}],[\"cookie的工作原理\",{\"0\":{\"3048\":1}}],[\"cookie的相关方法\",{\"0\":{\"3040\":1}}],[\"cookie使用范例\",{\"0\":{\"3045\":1}}],[\"cookies\",{\"1\":{\"3043\":1}}],[\"cookie和session只有浏览器能用\",{\"1\":{\"3031\":1}}],[\"cookie\",{\"0\":{\"3038\":1},\"1\":{\"2850\":1,\"3037\":1,\"3041\":4,\"3042\":2,\"3043\":2,\"3044\":3,\"3046\":2,\"3047\":2,\"3049\":3,\"3050\":1,\"3052\":4,\"3053\":3,\"3054\":4,\"3068\":1,\"3070\":2,\"3077\":1}}],[\"correct\",{\"1\":{\"3298\":2}}],[\"cors\",{\"1\":{\"3268\":2,\"3269\":2,\"3270\":2,\"3271\":2,\"3337\":2}}],[\"core下的zip包即可\",{\"1\":{\"2700\":1}}],[\"corepoolsize\",{\"1\":{\"1813\":1}}],[\"core<\",{\"1\":{\"413\":1,\"611\":1,\"3216\":1}}],[\"core\",{\"1\":{\"308\":10,\"404\":1,\"406\":2,\"407\":2,\"418\":1,\"501\":1,\"3743\":1}}],[\"color=\",{\"1\":{\"3193\":1,\"3252\":1,\"3253\":2}}],[\"columvalue\",{\"1\":{\"2600\":2,\"2603\":2,\"2653\":4}}],[\"columnlisthandler\",{\"1\":{\"2684\":1}}],[\"columnlabel\",{\"1\":{\"2600\":2,\"2603\":2,\"2653\":4}}],[\"columncount\",{\"1\":{\"2600\":1,\"2603\":2,\"2653\":4}}],[\"column\",{\"1\":{\"2593\":6,\"3545\":1}}],[\"columnname\",{\"1\":{\"2588\":1}}],[\"collscan\",{\"1\":{\"3635\":1}}],[\"collation\",{\"1\":{\"3595\":1}}],[\"collector\",{\"1\":{\"2490\":2}}],[\"collector接口的实现\",{\"1\":{\"2490\":1}}],[\"collectors的方法\",{\"0\":{\"2492\":1}}],[\"collectors\",{\"0\":{\"2491\":1},\"1\":{\"2471\":1,\"2490\":1,\"2491\":2}}],[\"collect\",{\"1\":{\"2471\":1,\"2490\":1,\"2491\":2}}],[\"collection接口\",{\"1\":{\"1881\":1}}],[\"collection接口继承了java\",{\"1\":{\"1836\":1}}],[\"collection接口继承图\",{\"0\":{\"1827\":1}}],[\"collection接口的方法\",{\"0\":{\"1832\":1}}],[\"collection接口实现对象\",{\"1\":{\"922\":1}}],[\"collections\",{\"0\":{\"927\":1,\"1941\":1},\"1\":{\"927\":1,\"928\":2,\"929\":2,\"930\":1,\"931\":2,\"932\":2,\"933\":1,\"934\":1,\"935\":1,\"936\":1,\"937\":1,\"938\":1,\"939\":1,\"1058\":2,\"1485\":1,\"1942\":1,\"1943\":1,\"3580\":1,\"3712\":1}}],[\"collection<v>\",{\"1\":{\"970\":1}}],[\"collection<t>\",{\"1\":{\"939\":2}}],[\"collection<integer>\",{\"1\":{\"924\":1,\"925\":1,\"926\":1}}],[\"collection<\",{\"1\":{\"906\":1,\"911\":1,\"913\":1,\"914\":1,\"934\":2,\"935\":2,\"936\":1}}],[\"collection<string>\",{\"1\":{\"905\":1,\"906\":2,\"970\":1}}],[\"collection<e>\",{\"1\":{\"902\":1,\"942\":1}}],[\"collection\",{\"0\":{\"901\":1,\"1829\":1,\"2439\":1},\"1\":{\"901\":1,\"903\":1,\"946\":1,\"950\":1,\"1826\":2,\"1830\":1,\"1831\":1,\"1835\":1,\"1836\":1,\"1842\":1,\"1851\":1,\"1859\":1,\"2439\":1,\"2471\":1,\"2485\":1,\"3545\":1,\"3589\":1,\"3632\":1}}],[\"collection=\",{\"1\":{\"394\":1}}],[\"collection+\",{\"0\":{\"900\":1},\"1\":{\"58\":1}}],[\"collision\",{\"1\":{\"1899\":1}}],[\"coll2\",{\"1\":{\"906\":5,\"911\":2,\"913\":2,\"914\":2,\"915\":1}}],[\"coll\",{\"1\":{\"905\":4,\"906\":5,\"907\":1,\"908\":3,\"909\":2,\"910\":4,\"911\":2,\"912\":3,\"913\":3,\"914\":3,\"915\":1,\"917\":1,\"918\":2,\"919\":1,\"924\":2,\"925\":2,\"926\":3,\"934\":2,\"935\":2,\"1831\":2,\"1842\":5,\"1851\":5}}],[\"copyoption\",{\"1\":{\"2168\":2}}],[\"copyof\",{\"0\":{\"895\":1,\"2517\":1},\"1\":{\"895\":2}}],[\"copy文件\",{\"0\":{\"2136\":1}}],[\"copyfilewithbuffered\",{\"1\":{\"2086\":1}}],[\"copyfile\",{\"1\":{\"2071\":1}}],[\"copyfromarraytolist\",{\"1\":{\"1981\":1,\"1982\":1}}],[\"copy\",{\"0\":{\"937\":1},\"1\":{\"937\":2,\"2168\":1,\"2895\":1,\"3305\":3,\"3328\":1}}],[\"copy服务中es目录下的\",{\"1\":{\"417\":1}}],[\"cos\",{\"1\":{\"770\":1}}],[\"code进行标记\",{\"1\":{\"1058\":1}}],[\"code=2964\",{\"1\":{\"474\":1}}],[\"codeutils\",{\"1\":{\"471\":4,\"472\":1}}],[\"code\",{\"0\":{\"2624\":1},\"1\":{\"470\":1,\"471\":2,\"472\":2,\"644\":1,\"1058\":8,\"1059\":1,\"1060\":1,\"1499\":2,\"2700\":1}}],[\"codecentric<\",{\"1\":{\"319\":1,\"323\":1}}],[\"countdocument\",{\"1\":{\"3609\":1}}],[\"countdocuments\",{\"1\":{\"3609\":1}}],[\"countdocuments方法\",{\"1\":{\"3609\":1}}],[\"count=262144\",{\"1\":{\"3313\":2,\"3346\":2}}],[\"count++\",{\"1\":{\"1181\":1,\"1189\":1,\"1204\":1}}],[\"count\",{\"0\":{\"2482\":1},\"1\":{\"1181\":1,\"1189\":1,\"1204\":2,\"1408\":1,\"2482\":4,\"2656\":1,\"2657\":2,\"2686\":2,\"2687\":2,\"2691\":3,\"3127\":1,\"3187\":1,\"3188\":1,\"3191\":7,\"3247\":1,\"3248\":1,\"3313\":3,\"3346\":3,\"3494\":2,\"3609\":2}}],[\"country1\",{\"1\":{\"151\":1}}],[\"country\",{\"1\":{\"151\":1,\"1478\":1}}],[\"couchbase\",{\"1\":{\"464\":1}}],[\"co\",{\"1\":{\"418\":4,\"3287\":1,\"3305\":1,\"3318\":1}}],[\"conﬁguration\",{\"1\":{\"3666\":1}}],[\"conﬁg数据库在内部使用\",{\"1\":{\"3574\":1}}],[\"conﬁg\",{\"1\":{\"3574\":1}}],[\"conf配置文件\",{\"1\":{\"3717\":1}}],[\"conflict\",{\"1\":{\"3413\":1}}],[\"conflicts\",{\"1\":{\"3154\":1}}],[\"conf\",{\"1\":{\"2705\":1,\"2716\":1,\"2717\":1,\"2933\":1,\"3558\":2,\"3561\":1,\"3563\":1,\"3654\":1,\"3656\":1,\"3657\":1,\"3658\":1,\"3666\":1,\"3667\":1,\"3678\":1,\"3679\":1,\"3688\":1,\"3689\":1}}],[\"configterm\",{\"1\":{\"3670\":1,\"3673\":1,\"3674\":1}}],[\"configversion\",{\"1\":{\"3670\":1,\"3673\":1,\"3674\":1}}],[\"config目录里\",{\"1\":{\"3487\":1}}],[\"config目录下才会出现certs目录\",{\"1\":{\"3110\":1}}],[\"config为起始路径\",{\"1\":{\"3298\":1}}],[\"configure\",{\"1\":{\"3305\":2,\"3328\":2,\"3355\":1}}],[\"configured\",{\"1\":{\"3267\":2,\"3305\":1,\"3328\":1,\"3503\":2}}],[\"configurableenvironment\",{\"1\":{\"342\":1}}],[\"configurableapplicationcontext就是一个ioc容器\",{\"1\":{\"128\":1}}],[\"configurableapplicationcontext\",{\"1\":{\"128\":2,\"555\":1}}],[\"configurations中的配置\",{\"1\":{\"3276\":1}}],[\"configurations中点击右上角的+号\",{\"1\":{\"2751\":1}}],[\"configuration\",{\"1\":{\"209\":1,\"212\":1,\"418\":2,\"444\":1,\"513\":1,\"514\":1,\"525\":1,\"563\":1,\"564\":1,\"624\":1,\"626\":1,\"2746\":2,\"2753\":1,\"3276\":1,\"3305\":1,\"3328\":1,\"3355\":3,\"3663\":1,\"3664\":2,\"3666\":1}}],[\"configuration>\",{\"1\":{\"170\":1,\"171\":1,\"308\":1}}],[\"configurationproperties读取配置文件的属性\",{\"1\":{\"556\":1}}],[\"configurationproperties的类\",{\"0\":{\"208\":1}}],[\"configurationproperties注解的用法\",{\"1\":{\"545\":1}}],[\"configurationproperties注解时\",{\"1\":{\"209\":1}}],[\"configurationproperties注解绑定属性\",{\"1\":{\"207\":1}}],[\"configurationproperties注解绑定属性的类\",{\"1\":{\"206\":1}}],[\"configurationproperties注解是添加在方法上的\",{\"1\":{\"205\":1}}],[\"configurationproperties注解是写在类定义的上方\",{\"1\":{\"201\":1}}],[\"configurationproperties注解为第三方bean进行属性绑定\",{\"0\":{\"204\":1}}],[\"configurationproperties注解依然可以为第三方bean进行属性绑定\",{\"1\":{\"201\":1}}],[\"configurationproperties注解\",{\"1\":{\"201\":1}}],[\"configurationproperties注解就是用来指定加载的数据\",{\"1\":{\"200\":1}}],[\"configurationproperties绑定第三方bean\",{\"0\":{\"201\":1}}],[\"configurationproperties\",{\"0\":{\"200\":1,\"545\":1},\"1\":{\"155\":1,\"200\":1,\"204\":1,\"208\":1,\"211\":1,\"212\":1,\"215\":1,\"216\":1,\"219\":1,\"220\":1,\"342\":1,\"545\":1,\"546\":1,\"550\":1,\"553\":1}}],[\"config>\",{\"1\":{\"3073\":2}}],[\"configprops\",{\"1\":{\"342\":1}}],[\"config\",{\"1\":{\"11\":1,\"194\":1,\"200\":1,\"262\":1,\"267\":2,\"272\":1,\"347\":1,\"417\":1,\"418\":1,\"444\":1,\"477\":1,\"511\":1,\"513\":1,\"514\":1,\"524\":1,\"525\":1,\"528\":1,\"589\":1,\"617\":2,\"624\":2,\"2800\":2,\"2804\":2,\"3106\":1,\"3267\":1,\"3268\":1,\"3285\":1,\"3289\":1,\"3297\":2,\"3301\":1,\"3302\":1,\"3312\":1,\"3320\":1,\"3321\":1,\"3328\":1,\"3345\":1,\"3352\":1,\"3355\":1,\"3501\":1,\"3503\":1,\"3558\":2,\"3675\":1,\"3679\":6}}],[\"con1\",{\"1\":{\"2403\":2}}],[\"con2\",{\"1\":{\"2371\":2,\"2373\":1,\"2375\":1,\"2404\":2}}],[\"con\",{\"1\":{\"2371\":2}}],[\"concern\",{\"1\":{\"3675\":2}}],[\"concurrent\",{\"1\":{\"1778\":1,\"1784\":1}}],[\"concat\",{\"0\":{\"668\":1},\"1\":{\"668\":2}}],[\"consult\",{\"1\":{\"3355\":2}}],[\"consumer中的方法为\",{\"1\":{\"2404\":1}}],[\"consumer<\",{\"1\":{\"2505\":1}}],[\"consumer<string>\",{\"1\":{\"2371\":4,\"2373\":1,\"2375\":1,\"2403\":1,\"2404\":1}}],[\"consumer<t>\",{\"1\":{\"974\":1,\"2392\":1}}],[\"consumer接口的accept方法\",{\"0\":{\"2371\":1}}],[\"consumer\",{\"0\":{\"974\":1},\"1\":{\"2485\":1,\"2505\":1}}],[\"const\",{\"1\":{\"1080\":1}}],[\"constructor对象都有setaccessible\",{\"1\":{\"2317\":1}}],[\"constructor\",{\"0\":{\"876\":1},\"1\":{\"850\":1,\"1313\":1,\"1653\":1,\"1660\":1,\"1661\":1,\"1675\":1,\"2250\":1,\"2286\":1,\"2298\":4,\"2315\":4}}],[\"constructors\",{\"1\":{\"848\":2,\"2298\":2}}],[\"constructor<person>\",{\"1\":{\"877\":1,\"2257\":1,\"2258\":1}}],[\"constructor<t>\",{\"1\":{\"850\":1,\"876\":1}}],[\"constructor<\",{\"1\":{\"848\":2,\"849\":2}}],[\"cons\",{\"1\":{\"849\":2,\"850\":2,\"877\":3,\"2257\":2,\"2258\":3,\"2286\":2}}],[\"consoleappender\",{\"1\":{\"308\":1}}],[\"console\",{\"1\":{\"298\":1,\"299\":1,\"307\":1,\"308\":6}}],[\"conditionalonbean\",{\"1\":{\"541\":2}}],[\"conditionalonmissingclass\",{\"1\":{\"540\":2,\"541\":1}}],[\"conditionalonclass\",{\"1\":{\"540\":2,\"543\":1}}],[\"conditional的派生注解\",{\"1\":{\"539\":1}}],[\"conditional注解\",{\"1\":{\"539\":1}}],[\"conditional\",{\"0\":{\"539\":1}}],[\"conditions\",{\"1\":{\"342\":1}}],[\"conncetdb方法连接数据库\",{\"1\":{\"2321\":1}}],[\"conncetdb方法用于连接数据库\",{\"1\":{\"2321\":1}}],[\"connect\",{\"1\":{\"2545\":1,\"3571\":1}}],[\"connect方法的第二个参数就是properties类\",{\"1\":{\"2545\":1}}],[\"connectivity\",{\"1\":{\"2527\":1}}],[\"connections\",{\"1\":{\"3305\":1,\"3307\":4,\"3327\":4,\"3328\":1,\"3355\":4,\"3563\":1,\"3656\":1}}],[\"connectioninitsqls\",{\"1\":{\"2674\":1}}],[\"connection对象调用preparedstatement方法执行预编译sql获取preparedstatemet对象\",{\"1\":{\"2567\":1}}],[\"connectiontest\",{\"1\":{\"2551\":1}}],[\"connectiondb1\",{\"1\":{\"2545\":1,\"2551\":1}}],[\"connection\",{\"1\":{\"420\":1,\"1401\":2,\"2545\":2,\"2547\":1,\"2548\":1,\"2551\":1,\"2564\":1,\"2567\":3,\"2573\":1,\"2575\":2,\"2576\":1,\"2577\":1,\"2581\":1,\"2597\":1,\"2600\":1,\"2603\":1,\"2612\":1,\"2613\":1,\"2620\":1,\"2621\":1,\"2624\":1,\"2625\":1,\"2628\":1,\"2629\":1,\"2630\":1,\"2634\":1,\"2635\":1,\"2637\":1,\"2638\":5,\"2639\":2,\"2652\":2,\"2653\":4,\"2655\":7,\"2656\":7,\"2657\":7,\"2662\":1,\"2672\":1,\"2675\":2,\"2676\":1,\"2682\":5,\"2683\":5,\"2686\":1,\"2687\":1,\"2688\":1,\"2689\":1,\"2690\":1,\"2691\":1,\"2850\":1,\"3110\":1,\"3570\":1,\"3738\":1}}],[\"connectdb方法中\",{\"1\":{\"2321\":1}}],[\"connector\",{\"1\":{\"358\":1,\"361\":1,\"371\":1,\"597\":1,\"612\":1,\"2537\":1,\"2539\":1}}],[\"conn\",{\"1\":{\"418\":1,\"1401\":3,\"2545\":2,\"2547\":2,\"2548\":2,\"2551\":2,\"2567\":2,\"2569\":1,\"2573\":5,\"2575\":2,\"2576\":3,\"2577\":4,\"2581\":4,\"2597\":4,\"2600\":4,\"2603\":4,\"2612\":3,\"2613\":3,\"2620\":2,\"2621\":3,\"2624\":3,\"2625\":5,\"2634\":2,\"2635\":9,\"2639\":5,\"2652\":2,\"2653\":8,\"2655\":7,\"2656\":14,\"2657\":28,\"2669\":1,\"2672\":1,\"2675\":2,\"2676\":4,\"2682\":4,\"2683\":5,\"2686\":3,\"2687\":3,\"2688\":3,\"2689\":3,\"2690\":3,\"2691\":4}}],[\"convertandsend\",{\"0\":{\"453\":1},\"1\":{\"445\":1,\"452\":1}}],[\"convertandsend向交换机发送消息\",{\"1\":{\"441\":1}}],[\"converting\",{\"1\":{\"398\":1}}],[\"converter\",{\"1\":{\"398\":1}}],[\"containing\",{\"1\":{\"3267\":1,\"3503\":1}}],[\"container\",{\"1\":{\"1835\":1}}],[\"containsvalue\",{\"0\":{\"965\":1},\"1\":{\"965\":3}}],[\"containskey\",{\"0\":{\"964\":1},\"1\":{\"964\":3}}],[\"containsall\",{\"0\":{\"911\":1},\"1\":{\"911\":2}}],[\"contains\",{\"0\":{\"663\":1,\"910\":1},\"1\":{\"663\":2,\"910\":4}}],[\"continue是终止\",{\"1\":{\"1197\":1}}],[\"continue默认跳过包裹此关键字最近的一层循环\",{\"1\":{\"1195\":1}}],[\"continue用于结束当次循环\",{\"1\":{\"1195\":1}}],[\"continue\",{\"0\":{\"1195\":1},\"1\":{\"1191\":1,\"1197\":1,\"1198\":2}}],[\"content\",{\"1\":{\"423\":1,\"3124\":1,\"3283\":1,\"3381\":1,\"3587\":1,\"3590\":2,\"3613\":1,\"3682\":1}}],[\"contextloaderlistener\",{\"1\":{\"2973\":2,\"2974\":1}}],[\"contextloads\",{\"1\":{\"226\":1,\"227\":1,\"366\":1,\"375\":1,\"419\":1}}],[\"contextdestroyed\",{\"1\":{\"2962\":1,\"2972\":1}}],[\"contextinitialized\",{\"1\":{\"2962\":1,\"2972\":1,\"2973\":2}}],[\"contextpath+\",{\"1\":{\"2916\":1}}],[\"contextpath\",{\"1\":{\"2846\":2,\"2916\":1}}],[\"context配置的\",{\"1\":{\"2845\":1}}],[\"context=\",{\"1\":{\"511\":1}}],[\"context\",{\"0\":{\"2749\":1},\"1\":{\"418\":2,\"511\":4,\"525\":1,\"2238\":2,\"2889\":1,\"2934\":2,\"2938\":3,\"2942\":4}}],[\"contextname>\",{\"1\":{\"308\":1}}],[\"control\",{\"1\":{\"2202\":1,\"2850\":1,\"3696\":1}}],[\"controller+view\",{\"1\":{\"3013\":1}}],[\"controller只需要响应json格式数据即可\",{\"1\":{\"639\":1}}],[\"controller作为表现层\",{\"1\":{\"639\":1}}],[\"controller修正功能\",{\"1\":{\"614\":1}}],[\"controller开发\",{\"1\":{\"614\":2}}],[\"controller\",{\"0\":{\"473\":1,\"639\":1,\"640\":1,\"1539\":1},\"1\":{\"295\":2,\"446\":1,\"473\":1,\"508\":1,\"589\":1,\"645\":1,\"1539\":5,\"3002\":1,\"3008\":1}}],[\"contribute\",{\"1\":{\"347\":1}}],[\"com中cookie可以共享\",{\"1\":{\"3057\":1}}],[\"com和news\",{\"1\":{\"3057\":1}}],[\"com<\",{\"1\":{\"3019\":1}}],[\"comfigurations\",{\"1\":{\"2746\":2}}],[\"com1\",{\"1\":{\"2377\":2,\"2409\":2,\"2412\":2}}],[\"com2\",{\"1\":{\"2362\":1,\"2377\":1,\"2410\":2,\"2413\":1}}],[\"community\",{\"1\":{\"3554\":1}}],[\"comment集合如果不存在\",{\"1\":{\"3588\":1}}],[\"comment\",{\"1\":{\"3587\":1,\"3590\":1,\"3592\":1,\"3596\":1,\"3597\":1,\"3598\":1,\"3600\":1,\"3601\":1,\"3605\":2,\"3606\":2,\"3607\":1,\"3609\":2,\"3610\":2,\"3611\":1,\"3613\":2,\"3614\":1,\"3615\":2,\"3616\":2,\"3623\":1,\"3626\":2,\"3627\":2,\"3630\":2,\"3634\":1,\"3636\":1,\"3682\":1,\"3736\":1,\"3738\":1,\"3739\":1}}],[\"comment>\",{\"1\":{\"3488\":1}}],[\"comments\",{\"1\":{\"997\":1}}],[\"commitandclosequietly\",{\"1\":{\"2682\":1}}],[\"commitandclose\",{\"1\":{\"2682\":1}}],[\"committed\",{\"1\":{\"2638\":1,\"2639\":1}}],[\"commit\",{\"0\":{\"2629\":1},\"1\":{\"2625\":1,\"2629\":1,\"2635\":1}}],[\"command\",{\"1\":{\"1019\":1,\"1814\":1,\"3675\":1,\"3718\":1}}],[\"commons\",{\"1\":{\"2679\":1,\"2681\":3,\"2895\":1}}],[\"common\",{\"1\":{\"589\":1,\"2240\":1}}],[\"common模块\",{\"1\":{\"163\":1}}],[\"compound\",{\"1\":{\"3620\":1}}],[\"component修饰\",{\"1\":{\"517\":1}}],[\"componentscans\",{\"1\":{\"567\":1}}],[\"componentscan\",{\"0\":{\"568\":1},\"1\":{\"513\":1,\"514\":1,\"563\":1}}],[\"componentscan用来指定指定要扫描的包\",{\"1\":{\"513\":1}}],[\"component注解\",{\"1\":{\"499\":1}}],[\"component\",{\"1\":{\"155\":1,\"200\":1,\"211\":1,\"219\":1,\"220\":1,\"347\":1,\"350\":1,\"447\":1,\"455\":1,\"472\":1,\"499\":1,\"508\":1,\"509\":1,\"510\":1,\"511\":1,\"546\":1,\"549\":2,\"550\":1,\"553\":1,\"554\":1,\"563\":1,\"564\":1}}],[\"complextye\",{\"1\":{\"3029\":1}}],[\"complextype>\",{\"1\":{\"3029\":2}}],[\"complextype\",{\"1\":{\"3029\":3}}],[\"computer\",{\"1\":{\"1512\":3}}],[\"compile\",{\"0\":{\"996\":1},\"1\":{\"987\":1,\"996\":3,\"998\":1,\"999\":1,\"1000\":1,\"1001\":1}}],[\"comp\",{\"1\":{\"934\":1,\"935\":1}}],[\"compass可视化查看\",{\"0\":{\"3633\":1}}],[\"compass中查看\",{\"1\":{\"3626\":1,\"3627\":1}}],[\"compass是mongodb官方提供的可视化数据管理工具\",{\"1\":{\"3569\":1}}],[\"compass\",{\"0\":{\"3568\":1,\"3570\":1,\"3731\":1},\"1\":{\"3568\":1,\"3569\":2,\"3680\":1}}],[\"compass连接信息里的uri基本是一样的\",{\"1\":{\"388\":1}}],[\"compatibility\",{\"1\":{\"3108\":2}}],[\"compare方法\",{\"0\":{\"2377\":1}}],[\"compareb\",{\"1\":{\"1518\":1}}],[\"comparea\",{\"1\":{\"1515\":4,\"1516\":1,\"1518\":1}}],[\"compare\",{\"0\":{\"754\":1},\"1\":{\"746\":2,\"752\":1,\"756\":1,\"757\":1,\"893\":1,\"932\":1,\"1904\":1,\"1905\":4,\"1906\":2,\"1936\":2,\"2362\":1,\"2377\":3,\"2409\":2,\"2410\":4,\"2412\":1,\"2475\":1,\"2483\":1,\"2484\":1}}],[\"compareto的重写\",{\"1\":{\"1905\":1}}],[\"compareto\",{\"0\":{\"660\":1,\"745\":1,\"773\":1,\"785\":1},\"1\":{\"660\":2,\"743\":1,\"745\":2,\"746\":2,\"749\":2,\"750\":1,\"756\":1,\"773\":2,\"785\":2,\"1458\":2,\"1887\":1,\"1904\":1,\"1905\":2,\"2296\":1,\"2377\":2,\"2412\":1,\"2413\":1}}],[\"comparator中的int\",{\"1\":{\"2410\":1}}],[\"comparator接口\",{\"0\":{\"2377\":1}}],[\"comparator接口的实例\",{\"1\":{\"1906\":1}}],[\"comparator接口是用来实现定制排序的\",{\"1\":{\"752\":1}}],[\"comparator<string>\",{\"1\":{\"2412\":1,\"2413\":1}}],[\"comparator<integer>com2\",{\"1\":{\"2377\":1}}],[\"comparator<integer>\",{\"1\":{\"893\":1,\"2362\":1,\"2377\":2,\"2409\":1,\"2410\":1}}],[\"comparator<\",{\"0\":{\"893\":1},\"1\":{\"893\":1,\"932\":1,\"934\":1,\"935\":1}}],[\"comparator<person>\",{\"1\":{\"757\":1}}],[\"comparator<t>\",{\"1\":{\"752\":1}}],[\"comparator常作为collections\",{\"1\":{\"753\":1}}],[\"comparator\",{\"0\":{\"752\":1,\"2475\":1},\"1\":{\"741\":1,\"742\":1,\"752\":1,\"756\":1,\"932\":1,\"1906\":2,\"1936\":1,\"2377\":1,\"2475\":1,\"2483\":1,\"2484\":1}}],[\"comparable排序示例\",{\"1\":{\"757\":1}}],[\"comparable接口的排序规则不适合当前的操作\",{\"1\":{\"752\":1}}],[\"comparable接口的方法\",{\"1\":{\"742\":1}}],[\"comparable接口而又不方便修改代码\",{\"1\":{\"752\":1}}],[\"comparable接口强行对实现它的每个类的对象进行整体排序\",{\"1\":{\"743\":1}}],[\"comparable接口\",{\"1\":{\"743\":1,\"1887\":1}}],[\"comparable与comparator的区别\",{\"0\":{\"742\":1}}],[\"comparable\",{\"0\":{\"743\":1},\"1\":{\"741\":1,\"742\":1,\"745\":1,\"843\":1,\"1458\":3}}],[\"comparable<\",{\"1\":{\"932\":1,\"934\":1,\"935\":1}}],[\"comparable<file>\",{\"1\":{\"786\":1}}],[\"comparable<bigdecimal>\",{\"1\":{\"778\":1}}],[\"comparable<biginteger>\",{\"1\":{\"777\":1}}],[\"comparable<person>\",{\"1\":{\"749\":1}}],[\"comparable<t>\",{\"1\":{\"743\":1}}],[\"comparable<instant>\",{\"1\":{\"723\":1}}],[\"comparable<localtime>\",{\"1\":{\"715\":1}}],[\"com\",{\"0\":{\"2475\":1},\"1\":{\"97\":1,\"129\":1,\"154\":1,\"203\":1,\"226\":1,\"244\":1,\"245\":1,\"246\":1,\"295\":2,\"308\":1,\"347\":1,\"356\":1,\"358\":1,\"362\":1,\"366\":1,\"372\":1,\"401\":1,\"418\":1,\"444\":1,\"446\":1,\"470\":1,\"471\":2,\"472\":1,\"473\":1,\"506\":3,\"511\":2,\"513\":2,\"514\":2,\"523\":2,\"524\":1,\"525\":3,\"528\":1,\"536\":2,\"540\":2,\"541\":1,\"543\":1,\"617\":1,\"1512\":5,\"1906\":2,\"2189\":1,\"2193\":2,\"2194\":1,\"2195\":2,\"2196\":1,\"2231\":1,\"2238\":3,\"2241\":1,\"2243\":1,\"2252\":1,\"2475\":1,\"2545\":2,\"2546\":1,\"2547\":1,\"2548\":1,\"2573\":1,\"2612\":1,\"2657\":2,\"2672\":1,\"2686\":1,\"3057\":1,\"3141\":1,\"3142\":2,\"3159\":1,\"3160\":2,\"3206\":1,\"3332\":1,\"3337\":1,\"3488\":1,\"3536\":1,\"3554\":1,\"3567\":1,\"3569\":1}}],[\"核心数越多越好\",{\"1\":{\"3505\":1}}],[\"核心概念\",{\"0\":{\"3359\":1}}],[\"核心api\",{\"0\":{\"2163\":1}}],[\"核心原理\",{\"0\":{\"1890\":1}}],[\"核心池的大小\",{\"1\":{\"1813\":1}}],[\"核心functional\",{\"0\":{\"973\":1}}],[\"核心版本\",{\"1\":{\"590\":1}}],[\"核心还是spring\",{\"1\":{\"570\":1}}],[\"核心思想\",{\"1\":{\"179\":1}}],[\"核心\",{\"1\":{\"106\":1,\"1889\":1,\"1946\":1}}],[\"核心文件\",{\"1\":{\"98\":1}}],[\"核心配置文件\",{\"1\":{\"98\":1}}],[\"核心类\",{\"1\":{\"98\":1}}],[\"目标文件\",{\"1\":{\"2715\":1}}],[\"目标类\",{\"0\":{\"2155\":1}}],[\"目标字符串赋于变量text\",{\"1\":{\"1004\":1}}],[\"目录设计\",{\"0\":{\"3653\":1}}],[\"目录配置把数据条带化分配到它们上面\",{\"1\":{\"3501\":1}}],[\"目录可以提高查询速度\",{\"1\":{\"3360\":1}}],[\"目录规划\",{\"1\":{\"3337\":1}}],[\"目录规范\",{\"0\":{\"589\":1}}],[\"目录的\",{\"1\":{\"3312\":1,\"3345\":1,\"3503\":1}}],[\"目录的层级\",{\"1\":{\"1337\":1}}],[\"目录内有elasticsearch\",{\"1\":{\"3300\":1}}],[\"目录内有http\",{\"1\":{\"3300\":1}}],[\"目录下产生两个信息目录\",{\"1\":{\"3300\":1}}],[\"目录下面的elasticsearch\",{\"1\":{\"3110\":1}}],[\"目录下创建\",{\"1\":{\"2758\":1}}],[\"目录拦截\",{\"1\":{\"2949\":1}}],[\"目录匹配>\",{\"1\":{\"2826\":1}}],[\"目录匹配\",{\"0\":{\"2823\":1}}],[\"目录结构如下\",{\"1\":{\"3106\":1}}],[\"目录结构\",{\"0\":{\"2702\":1}}],[\"目录如果存在\",{\"1\":{\"2168\":1}}],[\"目录本质也是文件\",{\"1\":{\"2008\":1}}],[\"目录本身也是文件\",{\"1\":{\"794\":1,\"802\":1,\"2018\":1}}],[\"目录创建失败\",{\"1\":{\"804\":1,\"805\":1}}],[\"目录创建成功\",{\"1\":{\"804\":1,\"805\":1}}],[\"目录已存在\",{\"1\":{\"804\":1,\"805\":1}}],[\"目录\",{\"1\":{\"799\":1,\"2008\":1,\"2168\":1,\"2821\":1,\"3560\":1}}],[\"目录优化\",{\"1\":{\"616\":1}}],[\"目录解读\",{\"1\":{\"98\":1}}],[\"目前市面上主流的es版本还是es7\",{\"1\":{\"3114\":1}}],[\"目前广泛使用\",{\"1\":{\"3094\":1}}],[\"目前\",{\"1\":{\"2535\":1,\"2997\":1}}],[\"目前有两种说法\",{\"1\":{\"1366\":1}}],[\"目前常用的jave8\",{\"1\":{\"1017\":1}}],[\"目前只兼容四种缓存技术\",{\"1\":{\"488\":1}}],[\"目前仅支持无密码的库\",{\"1\":{\"388\":1}}],[\"目前能找到的中文资料版本都在4\",{\"1\":{\"84\":1,\"85\":1}}],[\"目的封装成数据包\",{\"1\":{\"2205\":1}}],[\"目的是减少\",{\"1\":{\"3513\":1}}],[\"目的是降低\",{\"1\":{\"3513\":2}}],[\"目的是为了水平扩容和分布式效率提升\",{\"1\":{\"3365\":1}}],[\"目的是为了提高代码的复用和解耦\",{\"1\":{\"1533\":1}}],[\"目的是为了集中管理\",{\"1\":{\"268\":1}}],[\"目的是当子类继承父类后\",{\"1\":{\"1384\":1}}],[\"目的\",{\"1\":{\"125\":2,\"442\":1}}],[\"或移除所有索引\",{\"1\":{\"3629\":1}}],[\"或不写该字段\",{\"1\":{\"3588\":1}}],[\"或一个能作为版本号的字段值比如\",{\"1\":{\"3498\":1}}],[\"或一个字符\",{\"1\":{\"813\":1}}],[\"或被更新文档的旧版本\",{\"1\":{\"3458\":1}}],[\"或删除\",{\"1\":{\"3417\":1}}],[\"或hosts映射\",{\"1\":{\"3298\":1}}],[\"或任何\",{\"1\":{\"3298\":1}}],[\"或设置如下请求体\",{\"1\":{\"3165\":1}}],[\"或stringbuffer类型\",{\"1\":{\"2845\":1}}],[\"或配置修改\",{\"1\":{\"2707\":1}}],[\"或对象\",{\"1\":{\"2398\":1}}],[\"或tcp\",{\"1\":{\"2174\":1}}],[\"或this自己\",{\"1\":{\"1330\":1}}],[\"或通过网络将这种二进制流传输到另一个网络节点\",{\"1\":{\"2144\":1}}],[\"或a类的父类==>\",{\"1\":{\"2000\":1}}],[\"或a类的子类\",{\"1\":{\"1999\":1}}],[\"或arrays\",{\"1\":{\"753\":1}}],[\"或notifyall\",{\"1\":{\"1799\":1,\"1800\":1}}],[\"或是正在运行的一个程序\",{\"1\":{\"1684\":1}}],[\"或是bootstrap\",{\"1\":{\"142\":1}}],[\"或枚举声明\",{\"1\":{\"1653\":1}}],[\"或称之为\",{\"1\":{\"1645\":1}}],[\"或前端调用\",{\"1\":{\"1607\":1}}],[\"或非静态的属性\",{\"1\":{\"1528\":1}}],[\"或实现类\",{\"1\":{\"1517\":1}}],[\"或要实现的接口\",{\"1\":{\"1463\":1}}],[\"或子类的对象赋给父类的引用\",{\"1\":{\"1395\":1}}],[\"或多个形参\",{\"1\":{\"1277\":1}}],[\"或索引\",{\"1\":{\"1209\":1}}],[\"或没有交集的关系\",{\"1\":{\"1172\":1}}],[\"或能自动转换类型\",{\"1\":{\"1228\":1}}],[\"或能自动转换\",{\"1\":{\"1161\":1}}],[\"或修改tomcat的端口\",{\"1\":{\"2708\":1}}],[\"或修改\",{\"1\":{\"959\":1}}],[\"或字节\",{\"1\":{\"818\":1}}],[\"或在指定启动\",{\"1\":{\"3694\":1}}],[\"或在上一次调用\",{\"1\":{\"926\":1,\"1848\":1}}],[\"或在某些情况下懒惰加载配置以提高启动速度\",{\"1\":{\"567\":1}}],[\"或在test\",{\"1\":{\"493\":1}}],[\"或\",{\"1\":{\"342\":1,\"739\":2,\"1082\":2,\"1088\":1,\"1095\":1,\"1270\":1,\"1273\":1,\"1274\":1,\"1323\":1,\"1328\":1,\"1329\":1,\"1380\":1,\"1386\":1,\"1387\":1,\"1407\":2,\"1455\":1,\"1552\":1,\"2571\":1,\"2588\":1,\"2634\":1,\"3169\":1,\"3230\":1,\"3393\":1,\"3580\":1,\"3585\":1}}],[\"或者两都都存在的权限\",{\"1\":{\"3697\":1}}],[\"或者点赞数小于1000的文档记录\",{\"1\":{\"3616\":1}}],[\"或者一个标签\",{\"1\":{\"3474\":1}}],[\"或者将相关情况报告给用户\",{\"1\":{\"3495\":1}}],[\"或者将\",{\"1\":{\"3464\":1}}],[\"或者增加词条\",{\"1\":{\"3464\":1}}],[\"或者增加\",{\"1\":{\"3375\":1}}],[\"或者单个节点处理搜索请求\",{\"1\":{\"3365\":1}}],[\"或者servlet所依赖的其他类\",{\"1\":{\"2996\":1}}],[\"或者包含有这两种文件的目录\",{\"1\":{\"2996\":1}}],[\"或者插件程序的部署单位\",{\"1\":{\"2984\":1}}],[\"或者第一次getconnection时\",{\"1\":{\"2674\":1}}],[\"或者仅仅保存null\",{\"1\":{\"2495\":1}}],[\"或者把自己的数据传送到网络上去\",{\"1\":{\"2244\":1}}],[\"或者标准输入流\",{\"1\":{\"2082\":1}}],[\"或者\",{\"1\":{\"2045\":1,\"2118\":1,\"2746\":1,\"3008\":2,\"3462\":1,\"3469\":1,\"3517\":1,\"3527\":1}}],[\"或者说它的\",{\"1\":{\"1899\":1}}],[\"或者以链表形式存在多个元素\",{\"1\":{\"1891\":1}}],[\"或者是在运行时可以通过反射访问\",{\"1\":{\"1638\":1,\"1657\":1}}],[\"或者是相等\",{\"1\":{\"1162\":1}}],[\"或者用所有异常的父类exception类作为参数\",{\"1\":{\"1586\":1}}],[\"或者可以理解为一种特殊的类\",{\"1\":{\"1502\":1}}],[\"或者不存在\",{\"1\":{\"1246\":1}}],[\"或者与数据类型不符都会报错\",{\"1\":{\"888\":1,\"1009\":1}}],[\"或者结束符时\",{\"1\":{\"829\":1,\"2082\":1}}],[\"或者实现了java\",{\"1\":{\"752\":1}}],[\"或者使用\",{\"1\":{\"1763\":1}}],[\"或者使用其他人提供的core表达式生成工具\",{\"1\":{\"501\":1}}],[\"或者使用国内镜像\",{\"1\":{\"97\":1}}],[\"或者定期\",{\"1\":{\"491\":1}}],[\"或者等系统性的整理中间件\",{\"1\":{\"488\":1,\"489\":1}}],[\"或者直接用ip\",{\"1\":{\"3298\":1}}],[\"或者直接查询索引下所有的文档\",{\"1\":{\"3224\":1}}],[\"或者直接手动导入\",{\"1\":{\"371\":1}}],[\"或者直接输入\",{\"1\":{\"105\":1}}],[\"或者手动引入坐标\",{\"1\":{\"361\":1}}],[\"或者修改端口号\",{\"1\":{\"248\":1}}],[\"或者在pom\",{\"1\":{\"134\":1}}],[\"或者遇到了特殊的版本bug\",{\"1\":{\"121\":1}}],[\"或模块\",{\"1\":{\"96\":1}}],[\"默认在所有的数据库上都有效\",{\"1\":{\"3707\":1}}],[\"默认在servlet被第一次访问时调用\",{\"1\":{\"2800\":1}}],[\"默认心跳信息为10秒\",{\"1\":{\"3685\":1}}],[\"默认名字为\",{\"1\":{\"3623\":1}}],[\"默认名字其实是类名\",{\"1\":{\"509\":1}}],[\"默认会返回所有符合条件的数据\",{\"1\":{\"3606\":1}}],[\"默认只会更新第一条\",{\"1\":{\"3597\":1}}],[\"默认采用的就direct连接方式\",{\"1\":{\"3736\":1}}],[\"默认采用较保守的策略\",{\"1\":{\"3515\":1}}],[\"默认采用自然排序\",{\"1\":{\"934\":1,\"935\":1}}],[\"默认设置批量提交的数据量不能超过\",{\"1\":{\"3514\":1}}],[\"默认安装后设置的内存是\",{\"1\":{\"3502\":1}}],[\"默认使用的分析器\",{\"1\":{\"3466\":1}}],[\"默认处理\",{\"0\":{\"3370\":1}}],[\"默认线程数太少\",{\"1\":{\"3348\":1}}],[\"默认jvm内存过大\",{\"0\":{\"3312\":1,\"3345\":1}}],[\"默认文件在es软件根目录中\",{\"1\":{\"3296\":1}}],[\"默认查询的方式是\",{\"1\":{\"3174\":1}}],[\"默认生成的证书位置\",{\"1\":{\"3296\":1}}],[\"默认生成的\",{\"1\":{\"3136\":1}}],[\"默认关掉浏览器会话就会失效\",{\"1\":{\"3051\":1}}],[\"默认前缀是空\",{\"1\":{\"3030\":1}}],[\"默认返回的还是第一个\",{\"1\":{\"2481\":1}}],[\"默认从\",{\"1\":{\"3182\":1,\"3241\":1}}],[\"默认从控制台输出\",{\"1\":{\"2115\":1}}],[\"默认从键盘输入\",{\"1\":{\"2115\":1}}],[\"默认编码是utf\",{\"1\":{\"2095\":1}}],[\"默认内部缓冲区数组大小\",{\"1\":{\"2077\":1}}],[\"默认泛型\",{\"1\":{\"1959\":1}}],[\"默认情况\",{\"1\":{\"1887\":1,\"3692\":1}}],[\"默认情况下是double类型\",{\"1\":{\"3588\":1}}],[\"默认情况下索引的\",{\"1\":{\"3516\":1}}],[\"默认情况下其他提取出来的字段都不是独立存储的\",{\"1\":{\"3197\":1}}],[\"默认情况下额外插入一个名为\",{\"1\":{\"403\":1}}],[\"默认情况下\",{\"1\":{\"342\":1,\"694\":1,\"1663\":1,\"1867\":1,\"2153\":1,\"2793\":1,\"3053\":1,\"3056\":1,\"3136\":1,\"3261\":2,\"3293\":1,\"3370\":1,\"3687\":1,\"3692\":1}}],[\"默认扩容为原来的数组长度的2倍\",{\"1\":{\"1877\":1}}],[\"默认游标都在集合的第一个元素之前\",{\"1\":{\"1837\":1}}],[\"默认this是同步监视器\",{\"1\":{\"1766\":1}}],[\"默认true\",{\"1\":{\"343\":1}}],[\"默认行为\",{\"1\":{\"1654\":1}}],[\"默认调用super\",{\"1\":{\"2285\":1}}],[\"默认调用的是父类中的同名同参数的方法\",{\"1\":{\"1517\":1}}],[\"默认调用空参构造器\",{\"1\":{\"839\":1}}],[\"默认方法使得开发者可以在不破坏二进制兼容性的前提下\",{\"1\":{\"1521\":1}}],[\"默认方法使用\",{\"1\":{\"1517\":1}}],[\"默认方法\",{\"0\":{\"1517\":1,\"1521\":1},\"1\":{\"1515\":2}}],[\"默认访问的是子类的同名属性\",{\"1\":{\"1377\":1}}],[\"默认初始化\",{\"1\":{\"1323\":1}}],[\"默认初始化值的情况\",{\"1\":{\"1273\":1}}],[\"默认构造器的修饰符与所属类的修饰符一致\",{\"1\":{\"1321\":1}}],[\"默认构造器\",{\"0\":{\"1320\":1}}],[\"默认跳出包裹此关键字最近的一层循环\",{\"1\":{\"1194\":1,\"1198\":1}}],[\"默认数值是int类型的\",{\"1\":{\"1116\":1}}],[\"默认整形\",{\"0\":{\"1090\":1}}],[\"默认为jvm分配了4g的内存\",{\"1\":{\"3265\":1}}],[\"默认为\",{\"1\":{\"3197\":1,\"3527\":1,\"3533\":1}}],[\"默认为true\",{\"1\":{\"3197\":1}}],[\"默认为30分钟\",{\"1\":{\"2924\":1}}],[\"默认为项目路径\",{\"1\":{\"2015\":1}}],[\"默认为int\",{\"1\":{\"1116\":1}}],[\"默认为double\",{\"1\":{\"1115\":1}}],[\"默认为1\",{\"1\":{\"1059\":1}}],[\"默认为点对点模式\",{\"1\":{\"451\":1}}],[\"默认类型为\",{\"1\":{\"3361\":1}}],[\"默认类型为java\",{\"1\":{\"1959\":1}}],[\"默认类型为int\",{\"1\":{\"1115\":1}}],[\"默认类型\",{\"1\":{\"861\":1,\"869\":1,\"2293\":1}}],[\"默认根路径为项目路径\",{\"1\":{\"786\":1}}],[\"默认就是副本集的名字\",{\"1\":{\"3668\":1}}],[\"默认就是abstract\",{\"1\":{\"1507\":1}}],[\"默认就是public\",{\"1\":{\"1507\":1}}],[\"默认就是resource下的ehcache\",{\"1\":{\"477\":1}}],[\"默认就开启了\",{\"1\":{\"515\":1}}],[\"默认缓存策略\",{\"1\":{\"478\":1}}],[\"默认缓存simple\",{\"0\":{\"465\":1}}],[\"默认\",{\"1\":{\"464\":1,\"500\":2,\"822\":1,\"892\":1,\"1638\":1,\"1656\":1,\"2060\":1,\"2317\":1,\"2628\":1,\"2711\":1,\"3352\":3,\"3516\":1,\"3527\":1,\"3586\":1}}],[\"默认端口61616\",{\"1\":{\"456\":1}}],[\"默认端点的开放状态\",{\"1\":{\"343\":1}}],[\"默认提供的是lettucs客户端技术\",{\"1\":{\"381\":1}}],[\"默认启用\",{\"1\":{\"342\":1}}],[\"默认值20\",{\"1\":{\"3610\":1}}],[\"默认值是0\",{\"1\":{\"3610\":1}}],[\"默认值是\",{\"1\":{\"3352\":1}}],[\"默认值是health\",{\"1\":{\"326\":1}}],[\"默认值与数组的数据类型有关\",{\"1\":{\"1223\":1}}],[\"默认值\",{\"1\":{\"556\":1,\"1227\":1,\"1640\":1,\"1659\":1,\"2950\":1,\"3053\":1,\"3364\":1}}],[\"默认值为null\",{\"1\":{\"1872\":1}}],[\"默认值为false\",{\"1\":{\"308\":1,\"3595\":2,\"3625\":1}}],[\"默认值为true\",{\"1\":{\"308\":1}}],[\"默认单位是毫秒\",{\"1\":{\"308\":1}}],[\"默认的27017端口如果一旦知道了ip就能连接上\",{\"1\":{\"3693\":1}}],[\"默认的服务端口是27017\",{\"1\":{\"3557\":1}}],[\"默认的配置未必能连上\",{\"1\":{\"3352\":1}}],[\"默认的高亮标签是<em>结果中的关键字<\",{\"1\":{\"3193\":1}}],[\"默认的目录是没有java和resources的\",{\"1\":{\"2739\":1}}],[\"默认的构造器\",{\"1\":{\"2683\":1}}],[\"默认的扩容方式\",{\"1\":{\"1924\":1}}],[\"默认的线程名为\",{\"1\":{\"1728\":1}}],[\"默认的super\",{\"0\":{\"1386\":1}}],[\"默认的时间间隔为1分钟\",{\"1\":{\"308\":1}}],[\"默认的格式如下\",{\"1\":{\"297\":1}}],[\"默认的文件后缀就是properties\",{\"1\":{\"139\":1}}],[\"默认格式\",{\"0\":{\"297\":1}}],[\"默认日志组root\",{\"1\":{\"295\":1}}],[\"默认不参与热部署的目录\",{\"0\":{\"193\":1}}],[\"默认当idea工具失去焦点5秒后进行热部署\",{\"1\":{\"191\":1}}],[\"默认配置文件\",{\"0\":{\"137\":1}}],[\"默认网址是\",{\"1\":{\"97\":1}}],[\"默认是索引字段+\",{\"1\":{\"3623\":1}}],[\"默认是没有自定义角色的\",{\"1\":{\"3700\":1}}],[\"默认是没有用户认证的\",{\"1\":{\"3570\":1}}],[\"默认是没有开启的\",{\"1\":{\"3307\":1,\"3327\":1}}],[\"默认是27017\",{\"1\":{\"3562\":1}}],[\"默认是localhost\",{\"1\":{\"3562\":1}}],[\"默认是每隔\",{\"1\":{\"3527\":1}}],[\"默认是文档的\",{\"1\":{\"3400\":1}}],[\"默认是1个副本\",{\"1\":{\"3373\":1}}],[\"默认是1m\",{\"1\":{\"2610\":1}}],[\"默认是5y\",{\"1\":{\"3298\":1}}],[\"默认是直接拦截的\",{\"1\":{\"2945\":1}}],[\"默认是按照text解析的\",{\"1\":{\"2889\":1}}],[\"默认是导入的\",{\"1\":{\"2773\":1}}],[\"默认是8080\",{\"1\":{\"2750\":1}}],[\"默认是false\",{\"1\":{\"1781\":1,\"3673\":1}}],[\"默认是double类型的\",{\"1\":{\"1115\":1}}],[\"默认是debug\",{\"1\":{\"308\":1}}],[\"默认是int类型\",{\"1\":{\"1115\":1}}],[\"默认是utf8\",{\"1\":{\"674\":2}}],[\"默认是截取到末尾\",{\"1\":{\"669\":1}}],[\"默认是simple\",{\"1\":{\"477\":1,\"483\":1}}],[\"默认是0\",{\"1\":{\"439\":1}}],[\"默认是\",{\"1\":{\"439\":1}}],[\"默认是never\",{\"1\":{\"326\":1}}],[\"默认是application\",{\"1\":{\"138\":1}}],[\"默认是最新的稳定版\",{\"1\":{\"96\":1}}],[\"默认是官网\",{\"1\":{\"95\":1}}],[\"已有的函数可以被删除或是其他结构上的变化\",{\"1\":{\"2247\":1}}],[\"已配货\",{\"1\":{\"1616\":1}}],[\"已确认\",{\"1\":{\"1616\":1}}],[\"已发货\",{\"1\":{\"1616\":1}}],[\"已付款\",{\"1\":{\"1616\":1}}],[\"已重写equals\",{\"1\":{\"910\":1}}],[\"已知一个类的全类名\",{\"1\":{\"836\":1,\"2268\":1}}],[\"已知某个类的实例\",{\"1\":{\"835\":1,\"2267\":1}}],[\"已完成短信发送业务\",{\"1\":{\"452\":1,\"455\":1}}],[\"已经不支持覆盖更新了\",{\"1\":{\"3596\":1}}],[\"已经不再使用\",{\"1\":{\"2674\":1}}],[\"已经变为词根格式\",{\"1\":{\"3469\":1}}],[\"已经导入了servlet\",{\"1\":{\"2790\":1}}],[\"已经有方法实现过了\",{\"1\":{\"2404\":1}}],[\"已经有实现的方法了\",{\"1\":{\"2397\":1}}],[\"已经进行了绑定\",{\"1\":{\"2345\":1}}],[\"已经进入了方法体\",{\"1\":{\"1786\":1}}],[\"已经被索引的文档可能已经存在于主分片上但是还没有复制到副本分片\",{\"1\":{\"3411\":1}}],[\"已经被废弃了\",{\"1\":{\"1768\":1}}],[\"已经被android取代\",{\"1\":{\"1011\":1}}],[\"已经存在\",{\"1\":{\"959\":1}}],[\"已经实现了自然排序接口comparable\",{\"1\":{\"746\":1}}],[\"已经纠正了过去的缺陷\",{\"1\":{\"709\":1}}],[\"已经搭建好了\",{\"1\":{\"586\":1}}],[\"已经将其自动声明为bean了\",{\"1\":{\"208\":1}}],[\"已经勾选的依赖\",{\"1\":{\"96\":1}}],[\"已过时\",{\"1\":{\"11\":1,\"1727\":1}}],[\"接下来我们会列出最重要的分析器\",{\"1\":{\"3465\":1}}],[\"接着flatmap会将这些stream合并成一个stream\",{\"1\":{\"2472\":1}}],[\"接着我们使用java\",{\"1\":{\"2261\":1}}],[\"接着通过某种算法计算在hashset底层数组中存放的位置\",{\"1\":{\"1891\":1}}],[\"接字\",{\"1\":{\"2187\":1}}],[\"接收请求\",{\"1\":{\"3006\":1}}],[\"接收get\",{\"1\":{\"2815\":1}}],[\"接收用户的请求\",{\"1\":{\"2694\":1}}],[\"接收一个\",{\"1\":{\"2490\":1}}],[\"接收一个函数作为参数\",{\"1\":{\"2463\":1,\"2464\":1,\"2465\":1,\"2466\":1}}],[\"接收一个boolean参数\",{\"1\":{\"1781\":1}}],[\"接收到的或将要发送的数据从缓冲区中的偏移量\",{\"1\":{\"2234\":1}}],[\"接收方法\",{\"1\":{\"2230\":1}}],[\"接收方收到也不确认\",{\"1\":{\"2205\":1}}],[\"接收端示例\",{\"0\":{\"2232\":1}}],[\"接收端\",{\"1\":{\"2230\":1}}],[\"接收\",{\"1\":{\"2224\":1,\"2458\":1}}],[\"接收的变量类型要与表达式结果的变量类型一致\",{\"1\":{\"1161\":1}}],[\"接收的值数据类型不能小于数值常量的数据类型\",{\"1\":{\"1115\":1}}],[\"接收结果的变量也要定义成相应的数据类型\",{\"1\":{\"1111\":1}}],[\"接收消息会先将消息接收到\",{\"1\":{\"454\":1}}],[\"接收消息\",{\"0\":{\"454\":1}}],[\"接受一个端口号作为参数\",{\"1\":{\"2223\":1}}],[\"接受一个实体类作为泛型\",{\"1\":{\"630\":1}}],[\"接受参数\",{\"1\":{\"978\":1}}],[\"接口提供了一个单独的方法\",{\"1\":{\"2684\":1}}],[\"接口需要用户去做迭代\",{\"1\":{\"2485\":1}}],[\"接口构造器\",{\"1\":{\"2363\":1}}],[\"接口上声明的泛型\",{\"1\":{\"1969\":1}}],[\"接口时通过一个标识表示类中某个属性的类型或者是某个方法的返回值及参数类型\",{\"1\":{\"1948\":1}}],[\"接口使用频率最高的实现类\",{\"1\":{\"1909\":1}}],[\"接口冲突\",{\"1\":{\"1517\":1}}],[\"接口新特性\",{\"0\":{\"1515\":1}}],[\"接口示例\",{\"0\":{\"1511\":1}}],[\"接口通过让类去实现\",{\"1\":{\"1510\":1}}],[\"接口与抽象类的对比\",{\"0\":{\"1514\":1}}],[\"接口与实现类之间存在多态性\",{\"1\":{\"1509\":1}}],[\"接口与接口之间可以继承\",{\"1\":{\"1508\":1}}],[\"接口也可以继承其它接口\",{\"1\":{\"1509\":1}}],[\"接口中声明私有方法\",{\"0\":{\"2522\":1}}],[\"接口中方法的实现决定了如何对流执行收集的操作\",{\"1\":{\"2490\":1}}],[\"接口中方法的方法名\",{\"1\":{\"2399\":1}}],[\"接口中重写类的排序方法compare\",{\"1\":{\"1936\":1}}],[\"接口中被重写的方法\",{\"0\":{\"1518\":1}}],[\"接口中的所有抽象方法都默认是由public\",{\"1\":{\"1508\":1}}],[\"接口中的所有成员变量都默认是由public\",{\"1\":{\"1508\":1}}],[\"接口中不能定义构造器的\",{\"1\":{\"1508\":1}}],[\"接口内部只能定义全局常量和抽象方法\",{\"1\":{\"1507\":1}}],[\"接口采用interface关键字来定义\",{\"1\":{\"1507\":1}}],[\"接口定义\",{\"0\":{\"1507\":1}}],[\"接口就是规范\",{\"1\":{\"1506\":1}}],[\"接口就没有意义了\",{\"1\":{\"1409\":1}}],[\"接口和类是并列关系\",{\"1\":{\"1502\":1}}],[\"接口的主要实现类\",{\"1\":{\"2684\":1}}],[\"接口的主要用途就是被实现类实现\",{\"1\":{\"1509\":1}}],[\"接口的成员\",{\"1\":{\"1969\":1}}],[\"接口的典型实现\",{\"1\":{\"1883\":1}}],[\"接口的具体使用\",{\"1\":{\"1511\":1}}],[\"接口的实现类\",{\"1\":{\"1887\":1}}],[\"接口的实现类可以直接使用这些默认的方法\",{\"1\":{\"1521\":1}}],[\"接口的实现细节都由编译器完成\",{\"1\":{\"1643\":1}}],[\"接口的实现\",{\"0\":{\"1510\":1}}],[\"接口的使用细节\",{\"0\":{\"1509\":1}}],[\"接口的特点\",{\"0\":{\"1508\":1}}],[\"接口的本质是契约\",{\"1\":{\"1506\":1}}],[\"接口的意义\",{\"0\":{\"1506\":1}}],[\"接口的由来\",{\"0\":{\"1503\":1}}],[\"接口的集合框架类\",{\"1\":{\"1338\":1}}],[\"接口的父接口\",{\"1\":{\"903\":1,\"1830\":1}}],[\"接口名\",{\"1\":{\"1083\":1}}],[\"接口是无法创建对象\",{\"1\":{\"2836\":1}}],[\"接口是一种特殊的抽象类\",{\"1\":{\"1502\":1}}],[\"接口是\",{\"1\":{\"903\":1,\"1830\":1,\"2565\":1}}],[\"接口响应的时间戳\",{\"1\":{\"644\":1}}],[\"接口优化\",{\"0\":{\"643\":1}}],[\"接口命名一般以i开头\",{\"1\":{\"638\":1}}],[\"接口\",{\"0\":{\"374\":1,\"622\":1,\"1834\":1,\"1857\":1,\"1880\":1,\"1908\":1,\"1969\":1,\"2327\":1},\"1\":{\"567\":1,\"840\":1,\"1056\":1,\"1058\":1,\"1075\":1,\"1273\":1,\"1338\":1,\"1341\":1,\"1507\":1,\"1513\":1,\"1543\":1,\"1643\":1,\"1653\":1,\"1661\":1,\"1826\":2,\"1859\":1,\"2264\":1,\"2321\":1,\"2325\":1,\"2326\":1,\"2344\":1,\"2771\":2}}],[\"接口设计\",{\"0\":{\"26\":1},\"1\":{\"23\":1}}],[\"接上一步\",{\"1\":{\"96\":1}}],[\"选举规则是根据票数来决定谁获胜\",{\"1\":{\"3686\":1}}],[\"选举节点目录\",{\"1\":{\"3653\":1}}],[\"选举节点\",{\"1\":{\"3652\":1}}],[\"选举触发条件\",{\"0\":{\"3685\":1}}],[\"选举触发\",{\"1\":{\"3533\":1}}],[\"选举流程\",{\"0\":{\"3526\":1}}],[\"选举机制简介\",{\"0\":{\"3272\":1}}],[\"选用64gb内存的服务器作为es专用服务器\",{\"1\":{\"3504\":1}}],[\"选中导出方式和要设置的项目进行设置\",{\"1\":{\"2764\":1}}],[\"选中之前创建的web项目\",{\"1\":{\"2743\":1}}],[\"选中org\",{\"1\":{\"2737\":1}}],[\"选他\",{\"1\":{\"1608\":1}}],[\"选或跳过\",{\"0\":{\"1168\":1}}],[\"选项是一些与副本集设置有关的信息\",{\"1\":{\"3663\":1}}],[\"选项一般为空即可\",{\"1\":{\"3663\":1}}],[\"选项\",{\"1\":{\"2766\":1}}],[\"选项连接的方式\",{\"1\":{\"388\":1}}],[\"选项链接\",{\"1\":{\"388\":1}}],[\"选项解释\",{\"1\":{\"95\":1}}],[\"选择或创建数据库\",{\"0\":{\"3575\":1}}],[\"选择的依据\",{\"0\":{\"3542\":1}}],[\"选择放置manifest\",{\"1\":{\"2992\":1}}],[\"选择具体的module\",{\"1\":{\"2778\":1}}],[\"选择war或war\",{\"1\":{\"2766\":1}}],[\"选择web\",{\"1\":{\"2733\":1}}],[\"选择artifact\",{\"1\":{\"2766\":1}}],[\"选择一个tomcat模板就可以在右边进行配置\",{\"1\":{\"2754\":1}}],[\"选择tomcat\",{\"1\":{\"2753\":1}}],[\"选择tomcat的主目录即可\",{\"1\":{\"2750\":1}}],[\"选择maven\",{\"1\":{\"2737\":1,\"2741\":1}}],[\"选择右边的\",{\"1\":{\"2733\":1}}],[\"选择src目录作为源码来源\",{\"1\":{\"2539\":1}}],[\"选择sdk版本\",{\"1\":{\"2354\":1}}],[\"选择之前解压的mysql驱动目录\",{\"1\":{\"2539\":1}}],[\"选择jar包的等级和要加载到哪个模块就ok了\",{\"1\":{\"2538\":1}}],[\"选择\",{\"1\":{\"2536\":1,\"2731\":1,\"2734\":1,\"2747\":1}}],[\"选择符合参数列表的构造器\",{\"1\":{\"1319\":1}}],[\"选择问题所针对的现实世界中的实体\",{\"1\":{\"1252\":1}}],[\"选择性的执行某段代码\",{\"1\":{\"1165\":1}}],[\"选择第一个选项mybatis\",{\"1\":{\"588\":1}}],[\"选择合适的spring\",{\"1\":{\"581\":1}}],[\"选择quickstart\",{\"1\":{\"105\":1}}],[\"选择版本\",{\"1\":{\"96\":1}}],[\"选maven就行\",{\"1\":{\"95\":1}}],[\"选java就行\",{\"1\":{\"95\":1}}],[\"工资和薪水看似不是同一个词\",{\"1\":{\"3436\":1}}],[\"工作流程\",{\"0\":{\"3525\":1}}],[\"工作过程\",{\"0\":{\"3113\":1}}],[\"工作原理\",{\"0\":{\"3100\":1}}],[\"工作目录\",{\"0\":{\"2720\":1},\"1\":{\"3288\":1,\"3319\":1}}],[\"工作方式\",{\"0\":{\"2665\":1}}],[\"工厂类\",{\"0\":{\"1815\":1}}],[\"工厂模式\",{\"1\":{\"514\":1}}],[\"工程路径config目录中配置文件\",{\"1\":{\"263\":1}}],[\"工程路径配置文件\",{\"1\":{\"263\":1}}],[\"工程名\",{\"1\":{\"253\":1}}],[\"工程包名\",{\"1\":{\"237\":1}}],[\"工程的pom竟然也有parent\",{\"1\":{\"117\":1}}],[\"工程或模块\",{\"1\":{\"95\":1}}],[\"工具自己生成的ca\",{\"1\":{\"3298\":1}}],[\"工具提取成文档\",{\"1\":{\"1663\":1}}],[\"工具类可以辅助我们进行开发\",{\"1\":{\"2980\":1}}],[\"工具类api\",{\"0\":{\"2682\":1}}],[\"工具类中的方法\",{\"1\":{\"1485\":1}}],[\"工具类\",{\"0\":{\"472\":1},\"1\":{\"2681\":1,\"2987\":1}}],[\"工具\",{\"0\":{\"605\":1},\"1\":{\"53\":1,\"413\":1,\"589\":1,\"612\":1,\"3216\":1}}],[\"时就会触发一次\",{\"1\":{\"3516\":1}}],[\"时效与效率的选择\",{\"0\":{\"3453\":1}}],[\"时会验证此证书\",{\"1\":{\"3298\":1}}],[\"时会执行myrunnable类的run方法\",{\"1\":{\"1741\":1}}],[\"时的警告\",{\"1\":{\"1678\":1}}],[\"时必须为该\",{\"1\":{\"1658\":1}}],[\"时要在其前面增加\",{\"1\":{\"1637\":1}}],[\"时区\",{\"1\":{\"709\":1}}],[\"时区错误\",{\"0\":{\"368\":1}}],[\"时\",{\"1\":{\"674\":1,\"717\":1,\"1027\":1,\"1153\":2,\"1376\":1,\"1433\":1,\"1887\":1,\"1924\":1,\"2118\":1,\"2285\":1,\"2915\":1,\"3447\":1,\"3527\":1}}],[\"时选择\",{\"1\":{\"95\":1}}],[\"时间的推移\",{\"1\":{\"3524\":1}}],[\"时间到后\",{\"1\":{\"3053\":1}}],[\"时间片\",{\"0\":{\"1732\":1}}],[\"时间线上的一个瞬时点\",{\"1\":{\"723\":1}}],[\"时间相关的属性\",{\"1\":{\"713\":1}}],[\"时间滚动输出\",{\"1\":{\"308\":3}}],[\"时间单位\",{\"0\":{\"215\":1}}],[\"时间属性\",{\"1\":{\"214\":1}}],[\"时间和日期之间使用\",{\"1\":{\"147\":1}}],[\"时间\",{\"0\":{\"705\":1},\"1\":{\"57\":1,\"731\":1,\"734\":1,\"1059\":1}}],[\"实用技术集成\",{\"0\":{\"3771\":1}}],[\"实用类提供了很多静态方法\",{\"1\":{\"2490\":1}}],[\"实用功能>代码测试\",{\"1\":{\"176\":1}}],[\"实用功能\",{\"0\":{\"3768\":1},\"1\":{\"45\":1}}],[\"实参列表\",{\"1\":{\"1463\":1}}],[\"实参\",{\"1\":{\"1289\":1}}],[\"实实在在的某个人\",{\"1\":{\"1255\":1}}],[\"实在需要转换类型\",{\"1\":{\"1135\":1}}],[\"实例称为一个节点\",{\"1\":{\"3093\":1,\"3374\":1}}],[\"实例方法\",{\"0\":{\"2411\":1,\"2414\":1}}],[\"实例所生成\",{\"1\":{\"2263\":1}}],[\"实例变量\",{\"1\":{\"1076\":1,\"1475\":1}}],[\"实例\",{\"1\":{\"899\":1,\"2500\":1,\"2501\":1,\"3093\":1}}],[\"实例化数据对象\",{\"1\":{\"3214\":1}}],[\"实例化被代理类\",{\"1\":{\"2345\":1}}],[\"实例化file类的对象\",{\"1\":{\"2052\":1}}],[\"实例化filereader对象\",{\"1\":{\"2048\":1}}],[\"实例化时\",{\"1\":{\"1968\":1}}],[\"实例化泛型类\",{\"0\":{\"1968\":1}}],[\"实例化hashmap类时\",{\"1\":{\"1958\":1}}],[\"实例化arraylist类时\",{\"1\":{\"1957\":1}}],[\"实例化子类\",{\"1\":{\"1512\":2}}],[\"实例化成员内部类\",{\"0\":{\"1456\":1}}],[\"实例化的文件已经存在\",{\"1\":{\"821\":1}}],[\"实例化的文件不存在\",{\"1\":{\"821\":1}}],[\"实例化后\",{\"1\":{\"728\":1,\"1969\":1}}],[\"实例化\",{\"0\":{\"821\":1,\"822\":1,\"823\":1,\"833\":1,\"1004\":1,\"1831\":1,\"1872\":1,\"2442\":1},\"1\":{\"724\":1,\"734\":1,\"820\":1,\"860\":1,\"867\":1,\"876\":1}}],[\"实例化类\",{\"1\":{\"717\":1,\"1259\":1}}],[\"实体内容\",{\"1\":{\"1427\":1,\"1428\":1,\"1433\":1}}],[\"实体数据\",{\"1\":{\"641\":1}}],[\"实体类泛型\",{\"1\":{\"622\":1}}],[\"实体类需要手动生成get\",{\"1\":{\"620\":1}}],[\"实体类包名\",{\"1\":{\"619\":1}}],[\"实体类开发\",{\"1\":{\"614\":1}}],[\"实体类\",{\"0\":{\"364\":1,\"394\":1,\"427\":1,\"470\":1,\"619\":1},\"1\":{\"404\":1,\"406\":1,\"409\":2,\"410\":1,\"589\":1}}],[\"实现读写分离\",{\"1\":{\"3639\":1}}],[\"实现免密登录访问即可\",{\"1\":{\"3110\":1}}],[\"实现架构的思想\",{\"1\":{\"3012\":1}}],[\"实现某个监听器接口\",{\"1\":{\"2971\":1}}],[\"实现某一应用最大可用数据库连接数的限制\",{\"1\":{\"2667\":1}}],[\"实现filter接口\",{\"0\":{\"2945\":1}}],[\"实现步骤\",{\"0\":{\"2893\":1}}],[\"实现servlet接口\",{\"1\":{\"2777\":1,\"2779\":1}}],[\"实现计算\",{\"1\":{\"2439\":1}}],[\"实现他的方法\",{\"1\":{\"2381\":1}}],[\"实现接口\",{\"1\":{\"2326\":1}}],[\"实现接口的方法不同\",{\"1\":{\"1643\":1}}],[\"实现接口的枚举类\",{\"0\":{\"1628\":1}}],[\"实现接口的类中必须提供接口中所有方法的具体实现内容\",{\"1\":{\"1509\":1}}],[\"实现追加和插入效果\",{\"0\":{\"2138\":1}}],[\"实现将基本数据类型的数据格式转化为字符串输出\",{\"1\":{\"2119\":1}}],[\"实现将字符的输出流按指定字符集转换为字节的输出流\",{\"1\":{\"2102\":1}}],[\"实现编码和解码的功能\",{\"1\":{\"2091\":1}}],[\"实现原理和结构与hashmap相同\",{\"1\":{\"1915\":1}}],[\"实现重复利用\",{\"1\":{\"1812\":1}}],[\"实现comparable\",{\"1\":{\"1935\":1}}],[\"实现comparable接口\",{\"0\":{\"749\":1}}],[\"实现call方法\",{\"1\":{\"1810\":1}}],[\"实现callable接口是jdk5\",{\"1\":{\"1806\":1}}],[\"实现runnable\",{\"1\":{\"1746\":1}}],[\"实现runnable接口的方式\",{\"1\":{\"1745\":1}}],[\"实现的方式更适合来处理多个线程有共享数据的情况\",{\"1\":{\"1745\":1}}],[\"实现的方式没有类的单继承性的局限性\",{\"1\":{\"1745\":1}}],[\"实现的效果\",{\"1\":{\"556\":1}}],[\"实现一些自定义的逻辑\",{\"1\":{\"1638\":1}}],[\"实现一次编译多次使用\",{\"1\":{\"993\":1}}],[\"实现替代配置文件功能\",{\"1\":{\"1637\":1}}],[\"实现代替配置文件的功能\",{\"1\":{\"1637\":1}}],[\"实现usb接口\",{\"1\":{\"1512\":1}}],[\"实现具体业务的代码即可\",{\"1\":{\"1500\":1}}],[\"实现方式2\",{\"0\":{\"1489\":1}}],[\"实现方式1\",{\"0\":{\"1488\":1}}],[\"实现功能的拓展\",{\"1\":{\"1361\":1}}],[\"实现对该属性的操作\",{\"1\":{\"1305\":1,\"1306\":1}}],[\"实现对应的业务逻辑时有可能需要开发者提供一些设置值\",{\"1\":{\"544\":1}}],[\"实现缩进\",{\"1\":{\"1063\":1}}],[\"实现类简介\",{\"0\":{\"1911\":1}}],[\"实现类去实现runnable中的抽象方法\",{\"1\":{\"1739\":1,\"1740\":1}}],[\"实现类\",{\"0\":{\"955\":1}}],[\"实现类为\",{\"1\":{\"903\":1}}],[\"实现类为page\",{\"1\":{\"627\":1}}],[\"实现了代码和数据的分离\",{\"1\":{\"2552\":1}}],[\"实现了接口\",{\"1\":{\"2344\":1}}],[\"实现了基于tcp协议的客户端\",{\"1\":{\"2244\":1}}],[\"实现了基于\",{\"1\":{\"2229\":1}}],[\"实现了一个跨平台的网络库\",{\"1\":{\"2171\":1}}],[\"实现了comparable接口\",{\"1\":{\"1126\":1}}],[\"实现了\",{\"1\":{\"1015\":1}}],[\"实现了iterator接口的对象\",{\"1\":{\"922\":1}}],[\"实现了该接口的\",{\"1\":{\"567\":1}}],[\"实现了factorybean接口的类造出来的对象不是当前类的对象\",{\"1\":{\"514\":1}}],[\"实现仅通过注解就能控制bean的加载\",{\"1\":{\"539\":1}}],[\"实现beandefinitionregistrypostprocessor接口\",{\"0\":{\"530\":1}}],[\"实现importbeandefinitionregistrar接口\",{\"0\":{\"527\":1}}],[\"实现importselector接口\",{\"0\":{\"523\":1}}],[\"实现\",{\"1\":{\"475\":1,\"745\":1,\"1500\":1,\"1830\":1}}],[\"实现自主研发基于springboot整合任意技术的开发方式\",{\"1\":{\"93\":1}}],[\"实际大小取决于你的数据\",{\"1\":{\"3393\":1}}],[\"实际操作时\",{\"1\":{\"3152\":1}}],[\"实际使用时可根据业务场景进行偏向性的优化\",{\"1\":{\"3512\":1}}],[\"实际使用时\",{\"1\":{\"3014\":1}}],[\"实际使用中根据需要存入的数据大小定义不同的blob类型\",{\"1\":{\"2608\":1}}],[\"实际使用的时候\",{\"1\":{\"771\":1}}],[\"实际引用的资源也可以不存在\",{\"1\":{\"2164\":1}}],[\"实际应该使用try\",{\"1\":{\"2106\":1}}],[\"实际上就是改一下\",{\"1\":{\"3679\":1}}],[\"实际上就是调用当前对象的tostring\",{\"1\":{\"1431\":1}}],[\"实际上\",{\"1\":{\"3393\":1}}],[\"实际上是一组协议\",{\"1\":{\"2203\":1}}],[\"实际上非常规则\",{\"1\":{\"2024\":1}}],[\"实际调用的是子类的方法\",{\"1\":{\"1602\":1}}],[\"实际执行的是子类重写的方法\",{\"1\":{\"1406\":1}}],[\"实际运行的是子类重写父类的方法\",{\"1\":{\"1395\":1}}],[\"实际比较的是对象的属性的大小\",{\"1\":{\"740\":1}}],[\"实际是返回的四位数字的随机数\",{\"1\":{\"469\":1}}],[\"实际开发应该在多台服务器上进行\",{\"1\":{\"3651\":1}}],[\"实际开发中不会出现单节点集群\",{\"1\":{\"3377\":1}}],[\"实际开发中都是使用maven添加的\",{\"1\":{\"2993\":1}}],[\"实际开发中\",{\"1\":{\"300\":1,\"352\":1,\"421\":1,\"426\":1,\"441\":1,\"556\":1,\"1831\":1,\"1934\":1,\"2039\":1,\"2043\":1,\"2142\":1,\"2315\":1,\"2811\":1,\"2999\":1}}],[\"实际开发时都是部署到linux服务器上的\",{\"1\":{\"234\":1}}],[\"实际开发时\",{\"1\":{\"142\":1,\"254\":1,\"285\":1,\"638\":1,\"648\":1,\"3591\":1}}],[\"实际开发时仅书写gav中的g和a\",{\"1\":{\"121\":1}}],[\"实测该字段必须出现在查询条件中\",{\"1\":{\"3193\":1}}],[\"实测\",{\"1\":{\"319\":1,\"2467\":1,\"3246\":1,\"3683\":1}}],[\"实时查看logback运行状态\",{\"1\":{\"308\":1}}],[\"理解成是一个大的概念\",{\"1\":{\"3012\":1}}],[\"理解springboot底层\",{\"1\":{\"93\":1}}],[\"理解为主\",{\"1\":{\"11\":2}}],[\"掌握各式各样的第三方技术与springboot整合的方案\",{\"1\":{\"93\":1}}],[\"简言之\",{\"1\":{\"2436\":1}}],[\"简洁\",{\"1\":{\"1163\":1}}],[\"简洁一些\",{\"1\":{\"616\":1}}],[\"简称binary\",{\"1\":{\"3547\":1}}],[\"简称为\",{\"1\":{\"3091\":1}}],[\"简称java容器\",{\"1\":{\"1820\":1}}],[\"简称\",{\"1\":{\"1126\":1,\"1395\":1}}],[\"简单分析器在任何不是字母的地方分隔文本\",{\"1\":{\"3467\":1}}],[\"简单分析器\",{\"0\":{\"3467\":1}}],[\"简单类型\",{\"1\":{\"3029\":1}}],[\"简单来说\",{\"1\":{\"1683\":1,\"3636\":1}}],[\"简单设置就可以随意切换java版本\",{\"1\":{\"1030\":1}}],[\"简单int\",{\"1\":{\"778\":1}}],[\"简单说就是springboot根据我们开发者的行为猜测你要做什么事情\",{\"1\":{\"558\":1}}],[\"简单示例\",{\"0\":{\"493\":1,\"3019\":1}}],[\"简单读取\",{\"1\":{\"151\":1}}],[\"简化操作\",{\"1\":{\"2808\":1,\"2815\":1}}],[\"简化代码\",{\"1\":{\"1276\":1}}],[\"简化写法\",{\"1\":{\"1219\":1,\"1232\":1}}],[\"简化常用工程相关配置\",{\"1\":{\"92\":1}}],[\"简化依赖管理\",{\"1\":{\"92\":1}}],[\"简介控制importselector的实现类了\",{\"1\":{\"524\":1}}],[\"简介\",{\"0\":{\"91\":1,\"685\":1,\"2171\":1,\"2359\":1,\"2564\":1,\"3535\":1}}],[\"是不能以副本集的形式连接的\",{\"1\":{\"3738\":1}}],[\"是不是\",{\"1\":{\"1506\":1}}],[\"是安装一次mongodb\",{\"1\":{\"3651\":1}}],[\"是默认的一种从节点类型\",{\"1\":{\"3645\":1}}],[\"是默认值\",{\"1\":{\"1680\":1}}],[\"是所有生产部署的基础\",{\"1\":{\"3639\":1}}],[\"是所有输入流的基类\",{\"1\":{\"2031\":1}}],[\"是可视化的mongodb管理工具\",{\"1\":{\"3568\":1}}],[\"是可靠的\",{\"1\":{\"2204\":1}}],[\"是nosql数据库产品中的一种\",{\"1\":{\"3535\":1}}],[\"是综合了数据可靠性\",{\"1\":{\"3512\":1}}],[\"是分布式的\",{\"1\":{\"3496\":1}}],[\"是实际存储到索引中的词条\",{\"1\":{\"3473\":1}}],[\"是近实时搜索\",{\"1\":{\"3450\":1}}],[\"是为了高并发和高可用\",{\"1\":{\"3368\":1}}],[\"是为完成特定任务\",{\"1\":{\"1683\":1}}],[\"是完全由\",{\"1\":{\"3366\":1}}],[\"是处理数据的方式和规则方面做一些限制\",{\"1\":{\"3364\":1}}],[\"是公认可靠的ca\",{\"1\":{\"3294\":1}}],[\"是大数据框架\",{\"1\":{\"3257\":1}}],[\"是面向文档型数据库\",{\"1\":{\"3101\":1}}],[\"是面向对象的核心概念\",{\"1\":{\"1255\":1}}],[\"是整个\",{\"1\":{\"3091\":1}}],[\"是目前java语言中最快的\",{\"1\":{\"3084\":1}}],[\"是目录或文件不存在都返回false\",{\"1\":{\"798\":1}}],[\"是阿里巴巴提供的一个java语言编写的高性能功能完善的\",{\"1\":{\"3084\":1}}],[\"是阿里提供的数据库连接池\",{\"1\":{\"2668\":1}}],[\"是对\",{\"1\":{\"3012\":1}}],[\"是对象在堆内存的首地址\",{\"1\":{\"1546\":1}}],[\"是很多文件的压缩包\",{\"1\":{\"2996\":1}}],[\"是没有配置环境变量的\",{\"1\":{\"3556\":1}}],[\"是没有page域对象的\",{\"1\":{\"2920\":1}}],[\"是没有启动类和配置文件的\",{\"1\":{\"163\":1}}],[\"是从\",{\"1\":{\"3197\":1}}],[\"是从服务器内部跳转\",{\"1\":{\"2915\":1}}],[\"是从java\",{\"1\":{\"2161\":1}}],[\"是由浏览器进行跳转\",{\"1\":{\"2915\":1}}],[\"是由编译器推断出来的\",{\"1\":{\"2365\":1}}],[\"是两个不同的request对象\",{\"1\":{\"2912\":1}}],[\"是两台机器间通信的端点\",{\"1\":{\"2209\":1}}],[\"是需要tomcat来解析\",{\"1\":{\"2771\":1}}],[\"是组合关系\",{\"1\":{\"2674\":1}}],[\"是sourceforge下的一个开源项目数据库连接池\",{\"1\":{\"2668\":1}}],[\"是spring\",{\"1\":{\"3747\":1}}],[\"是spring框架的核心和基础\",{\"1\":{\"504\":1}}],[\"是spring自主开发的框架\",{\"1\":{\"497\":1}}],[\"是apache提供的数据库连接池\",{\"1\":{\"2668\":1}}],[\"是ascii编码组成的数组\",{\"1\":{\"674\":1}}],[\"是有关计算的\",{\"1\":{\"2439\":1}}],[\"是有生命周期的\",{\"1\":{\"1698\":1}}],[\"是数据渠道\",{\"1\":{\"2438\":1}}],[\"是被视为动态语言的关键\",{\"1\":{\"2246\":1}}],[\"是通过\",{\"1\":{\"3527\":1}}],[\"是通过字符\",{\"0\":{\"2885\":1}}],[\"是通过名字来标识资源\",{\"1\":{\"2243\":1}}],[\"是通过方法名和参数列表来确定调用哪一个方法的\",{\"1\":{\"1286\":1}}],[\"是uniform\",{\"1\":{\"2243\":1}}],[\"是用于降序排列\",{\"1\":{\"3611\":1}}],[\"是用户浏览器和服务器端的应用程序进行连接的接口\",{\"1\":{\"2240\":1}}],[\"是用来加快spring程序开发的\",{\"1\":{\"570\":1}}],[\"是用来批量发送请求\",{\"1\":{\"433\":1}}],[\"是因为close操作要用到fr\",{\"1\":{\"2052\":1}}],[\"是因为大部分配置项是springboot的默认值\",{\"1\":{\"333\":1}}],[\"是其他所有泛型的父类\",{\"1\":{\"1997\":1}}],[\"是把该目录部署到服务器\",{\"1\":{\"2721\":1}}],[\"是把值赋给了局部变量\",{\"1\":{\"1853\":1}}],[\"是把保存对象的内存地址赋给了对方\",{\"1\":{\"1262\":1}}],[\"是进程内的一个独立执行单元\",{\"1\":{\"1688\":1}}],[\"是程序的一次执行过程\",{\"1\":{\"1684\":1}}],[\"是程序员应该积极避免其出现的异常\",{\"1\":{\"1573\":1}}],[\"是只在代码中\",{\"1\":{\"1638\":1,\"1657\":1}}],[\"是将数据存储在客户端\",{\"1\":{\"3077\":1}}],[\"是将异常处理的程序代码集中在一起\",{\"1\":{\"1565\":1}}],[\"是将内存地址传过去了\",{\"1\":{\"1556\":1}}],[\"是将内存地址传给了对方\",{\"1\":{\"1554\":1}}],[\"是直接将值赋给了对方\",{\"1\":{\"1555\":1}}],[\"是直接跟变量对应的\",{\"1\":{\"1555\":1}}],[\"是k=v的形式\",{\"1\":{\"1548\":1}}],[\"是指编译器不要求强制处置的异常\",{\"1\":{\"1573\":1}}],[\"是指编译器要求必须处置的异常\",{\"1\":{\"1572\":1}}],[\"是指虚拟机栈\",{\"1\":{\"1546\":1}}],[\"是指符合如下标准的java类\",{\"1\":{\"1530\":1}}],[\"是指允许存在多个同名方法\",{\"1\":{\"1407\":1}}],[\"是抽象方法和常量值定义的集合\",{\"1\":{\"1507\":1}}],[\"是抽象的\",{\"1\":{\"1255\":1}}],[\"是修改过了的\",{\"1\":{\"1475\":1}}],[\"是比较值的错误观点\",{\"1\":{\"1429\":1}}],[\"是==\",{\"1\":{\"1429\":1}}],[\"是以父类的类型\",{\"1\":{\"1397\":1}}],[\"是以补码的形式\",{\"1\":{\"1157\":1}}],[\"是java语言中类的一个成员\",{\"1\":{\"1313\":1}}],[\"是多个相同类型数据按一定顺序排列的集合\",{\"1\":{\"1207\":1}}],[\"是boolean类型\",{\"1\":{\"1179\":1}}],[\"是0就补0\",{\"1\":{\"1157\":1}}],[\"是在互联网上使用最广的一种\",{\"1\":{\"1103\":1}}],[\"是在集合外部实现的排序\",{\"1\":{\"742\":1}}],[\"是在集合内部定义的方法实现的排序\",{\"1\":{\"742\":1}}],[\"是一组维护相同数据集的mongod服务\",{\"1\":{\"3639\":1}}],[\"是一种类json的一种二进制形式的存储格式\",{\"1\":{\"3547\":1}}],[\"是一种类似于\",{\"1\":{\"3546\":1}}],[\"是一种分层开发的模式\",{\"1\":{\"3002\":1}}],[\"是一种软件包文件格式\",{\"1\":{\"2979\":1}}],[\"是一种静态的内存数据结构\",{\"1\":{\"2439\":1}}],[\"是一种更紧凑的代码风格\",{\"1\":{\"2359\":1}}],[\"是一类在运行时可以改变其结构的语言\",{\"1\":{\"2247\":1}}],[\"是一起参与比对的\",{\"1\":{\"968\":1}}],[\"是一个基于javascript的解释器\",{\"1\":{\"3567\":1}}],[\"是一个压缩包\",{\"1\":{\"3298\":1}}],[\"是一个开源的高扩展的分布式全文搜索引擎\",{\"1\":{\"3091\":1}}],[\"是一个开源组织提供的数据库连接池\",{\"1\":{\"2668\":1}}],[\"是一个开源组织提供的一个数据库连接池\",{\"1\":{\"2668\":1}}],[\"是一个可以存储大量数据的容器\",{\"1\":{\"2608\":1}}],[\"是一个独立于特定数据库管理系统\",{\"1\":{\"2527\":1}}],[\"是一个容器类\",{\"1\":{\"2495\":1}}],[\"是一个\",{\"1\":{\"2359\":1}}],[\"是一个程序内部的一条执行路径\",{\"1\":{\"1687\":1}}],[\"是一个动态的过程\",{\"1\":{\"1684\":1}}],[\"是一个虚拟的计算机\",{\"1\":{\"1015\":1}}],[\"是一个非强制异常类\",{\"1\":{\"984\":1}}],[\"是一个操作\",{\"1\":{\"929\":1,\"1942\":1}}],[\"是一个具有标识作用的超级接口\",{\"1\":{\"567\":1}}],[\"是一个完全独立的spring项目\",{\"1\":{\"162\":1}}],[\"是文件或file不存在都返回false\",{\"1\":{\"797\":1}}],[\"是就返回true\",{\"1\":{\"797\":1,\"798\":1}}],[\"是file类不是文件名\",{\"1\":{\"795\":1}}],[\"是相对路径就获取相对路径\",{\"1\":{\"789\":1}}],[\"是具有被\",{\"1\":{\"567\":1}}],[\"是importselector接口的扩展\",{\"1\":{\"567\":1}}],[\"是基于java的缓存系统\",{\"1\":{\"487\":1}}],[\"是配置原始的redis的\",{\"1\":{\"483\":1}}],[\"是否健康\",{\"1\":{\"3673\":1}}],[\"是否基于索引查询\",{\"1\":{\"3632\":1}}],[\"是否\",{\"1\":{\"3498\":1}}],[\"是否被索引等等\",{\"1\":{\"3364\":1}}],[\"是否给证书加密\",{\"1\":{\"3298\":1}}],[\"是否对集群中的每个节点重复上述操作\",{\"1\":{\"3298\":1}}],[\"是否为每个节点创建一个单独的证书\",{\"1\":{\"3298\":1}}],[\"是否要使用现有\",{\"1\":{\"3298\":1}}],[\"是否要加虚拟路径\",{\"0\":{\"2915\":1}}],[\"是否生成证书签名请求\",{\"1\":{\"3298\":1}}],[\"是否允许跨域\",{\"1\":{\"3268\":1}}],[\"是否允许存储空值\",{\"1\":{\"483\":1}}],[\"是否将数据进行独立存储\",{\"1\":{\"3197\":1}}],[\"是否索引\",{\"1\":{\"3197\":1}}],[\"是否超时\",{\"1\":{\"3142\":1,\"3160\":1,\"3278\":1}}],[\"是否缓存preparedstatement\",{\"1\":{\"2674\":1}}],[\"是否存在员工姓进\",{\"1\":{\"2479\":1}}],[\"是否存在员工的工资大于\",{\"1\":{\"2478\":1}}],[\"是否所有的员工的年龄都大于18\",{\"1\":{\"2477\":1}}],[\"是否相同\",{\"1\":{\"1427\":1,\"1428\":1}}],[\"是否包含指定的key\",{\"1\":{\"964\":1}}],[\"是否在硬盘上存在\",{\"1\":{\"799\":1}}],[\"是否是同一个对象\",{\"1\":{\"749\":1}}],[\"是否实现了\",{\"1\":{\"567\":1}}],[\"是否必填\",{\"1\":{\"501\":1}}],[\"是否使用前缀名\",{\"1\":{\"483\":1}}],[\"是否启用磁盘持久化\",{\"1\":{\"478\":1}}],[\"是否永久存在\",{\"1\":{\"478\":1}}],[\"是否开放\",{\"1\":{\"343\":1}}],[\"是全自动的\",{\"1\":{\"468\":1}}],[\"是最重要的端点\",{\"1\":{\"348\":1}}],[\"是\",{\"1\":{\"342\":22,\"1653\":1,\"1654\":1,\"1657\":1,\"1660\":1,\"1680\":1,\"1883\":1,\"1887\":1,\"1913\":1,\"1986\":1,\"2436\":1,\"2679\":1,\"2955\":1,\"3092\":1,\"3482\":1,\"3483\":1,\"3535\":1}}],[\"是要在应用后台对日志进行可视化处理的\",{\"1\":{\"285\":1}}],[\"是重要性第一位的框架\",{\"1\":{\"90\":1}}],[\"是专门为餐饮企业\",{\"1\":{\"49\":1}}],[\"重建es服务\",{\"1\":{\"3506\":1}}],[\"重度使用磁盘\",{\"1\":{\"3501\":1}}],[\"重置密码\",{\"1\":{\"3343\":1}}],[\"重置isflag\",{\"1\":{\"1204\":1}}],[\"重获授权信息\",{\"0\":{\"3343\":1}}],[\"重定向是两次请求\",{\"1\":{\"2913\":1}}],[\"重定向可以访问其他站点\",{\"1\":{\"2913\":1}}],[\"重定向的特点\",{\"0\":{\"2912\":1},\"1\":{\"2913\":1}}],[\"重定向的实现方式\",{\"0\":{\"2907\":1}}],[\"重定向的过程\",{\"0\":{\"2906\":1}}],[\"重定向\",{\"0\":{\"2117\":1,\"2905\":1,\"2908\":1},\"1\":{\"2915\":1}}],[\"重点看stage\",{\"1\":{\"3635\":1}}],[\"重点关注这个\",{\"1\":{\"2945\":1}}],[\"重点\",{\"1\":{\"1853\":1}}],[\"重点实践\",{\"1\":{\"11\":1}}],[\"重名是要采用以下方法调用\",{\"1\":{\"1457\":1}}],[\"重新加载配置\",{\"1\":{\"3689\":1}}],[\"重新加入的节点会保持其现有的分片数据\",{\"1\":{\"3509\":1}}],[\"重新建立索引\",{\"1\":{\"3413\":1}}],[\"重新部署\",{\"1\":{\"2750\":1}}],[\"重新指向新的数组的值\",{\"1\":{\"1227\":1}}],[\"重新分配空间\",{\"1\":{\"1227\":1}}],[\"重新初始化时\",{\"1\":{\"1227\":1}}],[\"重载形式\",{\"0\":{\"2447\":1}}],[\"重载时\",{\"1\":{\"1319\":1}}],[\"重载示例\",{\"0\":{\"1287\":1}}],[\"重载的调用\",{\"0\":{\"1286\":1}}],[\"重载的判断方式\",{\"1\":{\"1285\":1}}],[\"重载\",{\"0\":{\"1285\":1},\"1\":{\"950\":1,\"1407\":1}}],[\"重载方法\",{\"1\":{\"945\":1,\"946\":1,\"950\":1}}],[\"重载reload\",{\"0\":{\"183\":1}}],[\"重命名\",{\"0\":{\"808\":1},\"1\":{\"3704\":1}}],[\"重命名文件和目录\",{\"1\":{\"786\":1,\"2009\":1}}],[\"重写分配分片\",{\"1\":{\"3509\":1}}],[\"重写父类中的doget和dopost方法\",{\"1\":{\"2814\":1}}],[\"重写对应请求方式的doxxx方法\",{\"1\":{\"2811\":1}}],[\"重写接口中的5个方法\",{\"1\":{\"2805\":1}}],[\"重写接口中定义的方法\",{\"1\":{\"1630\":1}}],[\"重写dao里面的方法\",{\"1\":{\"2642\":1}}],[\"重写producecloth方法\",{\"1\":{\"2326\":1}}],[\"重写producecloth方法用于生产服装\",{\"1\":{\"2326\":1}}],[\"重写connectbd方法进行数据库连接\",{\"1\":{\"2321\":1}}],[\"重写compareto方法\",{\"0\":{\"749\":1},\"1\":{\"1935\":1}}],[\"重写compareto\",{\"1\":{\"745\":1}}],[\"重写原则\",{\"0\":{\"1897\":1}}],[\"重写thread类的run方法\",{\"1\":{\"1720\":1}}],[\"重写抽象方法\",{\"1\":{\"1628\":1}}],[\"重写equals\",{\"1\":{\"1429\":1}}],[\"重写object\",{\"1\":{\"1429\":1}}],[\"重写的接口的方法\",{\"1\":{\"2363\":1}}],[\"重写的hashcode\",{\"1\":{\"1897\":1}}],[\"重写的原则\",{\"1\":{\"1428\":1}}],[\"重写的要求\",{\"0\":{\"1371\":1}}],[\"重写后\",{\"1\":{\"1427\":1}}],[\"重写\",{\"0\":{\"1369\":1},\"1\":{\"1517\":1}}],[\"重写比较大小的核心方法\",{\"1\":{\"893\":1}}],[\"重写时要满足重写规则\",{\"1\":{\"744\":1}}],[\"重写selectimports方法\",{\"1\":{\"523\":1}}],[\"重要配置\",{\"0\":{\"3354\":1}}],[\"重要的是上面的注解\",{\"1\":{\"513\":1}}],[\"重要性\",{\"1\":{\"90\":1}}],[\"重复启动命令就会重启\",{\"1\":{\"3342\":1}}],[\"重复打包会产生冲突\",{\"1\":{\"2774\":1}}],[\"重复的数据被排除\",{\"1\":{\"1905\":1}}],[\"重复利用线程池中线程\",{\"1\":{\"1813\":1}}],[\"重复性的执行某段代码\",{\"1\":{\"1165\":1}}],[\"重复\",{\"1\":{\"492\":1,\"2244\":1}}],[\"重启所有节点\",{\"1\":{\"3729\":1}}],[\"重启es即可生效\",{\"1\":{\"3488\":1}}],[\"重启es后\",{\"1\":{\"3478\":1}}],[\"重启node\",{\"1\":{\"3397\":1}}],[\"重启失效\",{\"1\":{\"3348\":1}}],[\"重启服务\",{\"1\":{\"3342\":1}}],[\"重启当前es节点\",{\"1\":{\"3329\":1}}],[\"重启tomcat\",{\"1\":{\"2750\":1}}],[\"重启\",{\"0\":{\"182\":1},\"1\":{\"2781\":1}}],[\"重启与重载\",{\"0\":{\"181\":1}}],[\"集群间的网络延迟导致一些节点访问不到\",{\"1\":{\"3532\":1}}],[\"集群间组件的通信端口\",{\"1\":{\"3108\":1}}],[\"集群脑裂问题\",{\"0\":{\"3531\":1}}],[\"集群等待1分支后\",{\"1\":{\"3509\":1}}],[\"集群等复杂操作只能保证尽量正确\",{\"1\":{\"84\":1,\"85\":1}}],[\"集群无法恢复\",{\"1\":{\"3508\":1}}],[\"集群可以将缺失的副本分片再次进行分配\",{\"1\":{\"3397\":1}}],[\"集群必须拥有一个主节点来保证正常工作\",{\"1\":{\"3396\":1}}],[\"集群故障处理\",{\"0\":{\"3395\":1}}],[\"集群搜索性能可以提升\",{\"1\":{\"3394\":1}}],[\"集群为了分散负载会对分片进行重新分配\",{\"1\":{\"3390\":1}}],[\"集群将会拥有三个节点\",{\"1\":{\"3390\":1}}],[\"集群将会重新平均分布所有的数据\",{\"1\":{\"3374\":1}}],[\"集群健康值\",{\"1\":{\"3384\":1,\"3387\":1,\"3391\":1}}],[\"集群现在是拥有一个索引的单节点集群\",{\"1\":{\"3382\":1}}],[\"集群有多个分片\",{\"1\":{\"3399\":1}}],[\"集群有三个节点\",{\"1\":{\"3373\":1}}],[\"集群有一个唯一的名字标识\",{\"1\":{\"3260\":1}}],[\"集群信息\",{\"1\":{\"3355\":1}}],[\"集群管理角色\",{\"1\":{\"3703\":1}}],[\"集群管理\",{\"0\":{\"3341\":1}}],[\"集群内唯一\",{\"1\":{\"3337\":1}}],[\"集群内要唯一\",{\"1\":{\"3268\":1,\"3269\":1,\"3270\":1,\"3271\":1}}],[\"集群名\",{\"1\":{\"3337\":1,\"3355\":1,\"3374\":1}}],[\"集群名称\",{\"1\":{\"3268\":1,\"3269\":1,\"3270\":1,\"3271\":1,\"3278\":1}}],[\"集群能正常工作\",{\"1\":{\"3283\":1}}],[\"集群状态red\",{\"1\":{\"3396\":1}}],[\"集群状态\",{\"1\":{\"3278\":2}}],[\"集群降级\",{\"0\":{\"3276\":1}}],[\"集群才提供服务\",{\"1\":{\"3275\":1}}],[\"集群第一次启动时\",{\"1\":{\"3273\":1}}],[\"集群要配置在多台电脑才有意义\",{\"1\":{\"3262\":1}}],[\"集群中每一个实例彼此连接的时候都检验彼此使用的证书的内容是否相同\",{\"1\":{\"3723\":1}}],[\"集群中的哪些节点\",{\"1\":{\"3261\":1}}],[\"集群中包含很多服务器\",{\"1\":{\"3261\":1}}],[\"集群中节点数量没有限制\",{\"1\":{\"3259\":1}}],[\"集群\",{\"0\":{\"3260\":1,\"3324\":1,\"3334\":1,\"3335\":1,\"3788\":1}}],[\"集群不完整\",{\"1\":{\"3127\":1}}],[\"集群完整\",{\"1\":{\"3127\":1}}],[\"集合名称\",{\"1\":{\"3600\":1,\"3601\":1,\"3614\":5}}],[\"集合名\",{\"1\":{\"3582\":1,\"3585\":1,\"3594\":1,\"3604\":1,\"3609\":2,\"3610\":1,\"3611\":1,\"3630\":1,\"3631\":1}}],[\"集合名不能以\",{\"1\":{\"3581\":1}}],[\"集合名不能含有\",{\"1\":{\"3581\":1}}],[\"集合名不能是空字符串\",{\"1\":{\"3581\":1}}],[\"集合操作\",{\"0\":{\"3579\":1}}],[\"集合将存放在\",{\"1\":{\"3576\":1}}],[\"集合讲的是数据\",{\"1\":{\"2439\":1}}],[\"集合接口或集合类在jdk5\",{\"1\":{\"1959\":1}}],[\"集合类的泛型\",{\"1\":{\"1959\":1}}],[\"集合类可以用于存储数量不等的多个对象\",{\"1\":{\"1823\":1}}],[\"集合也是泛型使用最多的场景\",{\"1\":{\"1948\":1}}],[\"集合容器类在设计阶段\",{\"1\":{\"1947\":1}}],[\"集合判断两个元素相等的标准\",{\"0\":{\"1885\":1}}],[\"集合元素可以是\",{\"1\":{\"1884\":1}}],[\"集合元素的类型\",{\"1\":{\"1851\":2}}],[\"集合时都使用这个实现类\",{\"1\":{\"1883\":1}}],[\"集合用来储存无序的的不相同的元素\",{\"1\":{\"1881\":1}}],[\"集合对象\",{\"1\":{\"1851\":2}}],[\"集合对象每次调用iterator\",{\"1\":{\"1837\":1}}],[\"集合可以记住容器中对象的数据类型\",{\"1\":{\"1830\":1}}],[\"集合可分为\",{\"1\":{\"1826\":1}}],[\"集合框架的体系\",{\"0\":{\"1826\":1}}],[\"集合框架\",{\"0\":{\"1825\":1}}],[\"集合出现的目的\",{\"1\":{\"1824\":1}}],[\"集合都解决了\",{\"1\":{\"1823\":1}}],[\"集合都是可以指定泛型的\",{\"1\":{\"943\":1}}],[\"集合就像一种容器\",{\"1\":{\"1820\":1}}],[\"集合的隐式创建\",{\"1\":{\"3585\":1}}],[\"集合的命名规范\",{\"1\":{\"3581\":1}}],[\"集合的元素需要实现comparable接口\",{\"1\":{\"2474\":1}}],[\"集合的区别\",{\"0\":{\"2439\":1}}],[\"集合的使用场景\",{\"0\":{\"1824\":1}}],[\"集合的特点\",{\"0\":{\"1823\":1}}],[\"集合的由来\",{\"0\":{\"1820\":1}}],[\"集合的索引\",{\"1\":{\"945\":1,\"946\":1}}],[\"集合概述\",{\"0\":{\"1818\":1,\"1819\":1}}],[\"集合里添加了一些根据索引来操作集合元素的方法\",{\"1\":{\"941\":1,\"1878\":1}}],[\"集合复制\",{\"1\":{\"937\":1}}],[\"集合中使用泛型\",{\"0\":{\"1956\":1}}],[\"集合中元素的顺序不影响比对结果\",{\"1\":{\"968\":1}}],[\"集合中的每个元素\",{\"1\":{\"2467\":1}}],[\"集合中的每个元素都有其对应的顺序索引\",{\"1\":{\"1858\":1}}],[\"集合中的泛型\",{\"0\":{\"1952\":1}}],[\"集合中的元素都是同一类型\",{\"1\":{\"1997\":1}}],[\"集合中的元素\",{\"1\":{\"1835\":1,\"1836\":1}}],[\"集合中的\",{\"1\":{\"933\":1}}],[\"集合中是否包含某个元素\",{\"1\":{\"910\":1}}],[\"集合变为空集合\",{\"1\":{\"908\":1}}],[\"集合coll2依然还在\",{\"1\":{\"906\":1}}],[\"集合\",{\"0\":{\"3777\":1},\"1\":{\"746\":1,\"1820\":1,\"1826\":1,\"1830\":2,\"1881\":1,\"2438\":1,\"2440\":1,\"2467\":1,\"3545\":1,\"3579\":1,\"3613\":1,\"3623\":1,\"3624\":1,\"3698\":1}}],[\"集合内字段统一\",{\"1\":{\"399\":1}}],[\"集成数据层\",{\"0\":{\"3770\":1}}],[\"集成mysql\",{\"1\":{\"614\":1}}],[\"集成mybatisplus\",{\"1\":{\"614\":1}}],[\"集成mybatis\",{\"0\":{\"360\":1,\"370\":1}}],[\"集成的es客户端\",{\"1\":{\"416\":1}}],[\"集成\",{\"0\":{\"222\":1,\"3255\":1,\"3256\":1,\"3257\":1}}],[\"集成其他技术\",{\"1\":{\"45\":1}}],[\"集成data\",{\"1\":{\"45\":1}}],[\"因\",{\"1\":{\"2489\":1}}],[\"因而也称为实例\",{\"1\":{\"1255\":1}}],[\"因为它们不存储数据集\",{\"1\":{\"3646\":1}}],[\"因为客户端可以将读取操作发送到不同的服务上\",{\"1\":{\"3640\":1}}],[\"因为mongodb可以在任何方向上遍历索引\",{\"1\":{\"3619\":1}}],[\"因为manifest文件常需放在首位\",{\"1\":{\"2979\":1}}],[\"因为批量插入由于数据较多容易出现失败\",{\"1\":{\"3592\":1}}],[\"因为你的指针本身大了\",{\"1\":{\"3504\":1}}],[\"因为卖给顾客的库存商品并不存在\",{\"1\":{\"3494\":1}}],[\"因为是按增量更新的\",{\"1\":{\"3445\":1}}],[\"因为分片副本已经提供了高可用保障\",{\"1\":{\"3501\":1}}],[\"因为分片\",{\"1\":{\"3407\":1}}],[\"因为分配内存的时候\",{\"1\":{\"1243\":1}}],[\"因为如果数量变化了\",{\"1\":{\"3401\":1}}],[\"因为节点互相访问时采用的是内网ip\",{\"1\":{\"3316\":1}}],[\"因为假冒服务器也可以有证书\",{\"1\":{\"3294\":1}}],[\"因为不是集群\",{\"1\":{\"3285\":1}}],[\"因为启动时加选项毫无意义\",{\"1\":{\"3694\":1}}],[\"因为启动时\",{\"1\":{\"3269\":1}}],[\"因为一旦失去了那个节点\",{\"1\":{\"3384\":1}}],[\"因为一个节点只能通过指定某个集群的名字\",{\"1\":{\"3260\":1}}],[\"因为一般也没人用数据库存文本字段\",{\"1\":{\"3097\":1}}],[\"因为可以多个字段排序\",{\"1\":{\"3185\":1}}],[\"因为put是幂等性的\",{\"1\":{\"3137\":1}}],[\"因为es不会再返回一个随机的\",{\"1\":{\"3136\":1}}],[\"因为es需要用到中文分词器插件\",{\"1\":{\"3104\":1}}],[\"因为保存jsessioid的cookie默认只在会话期是有效的\",{\"1\":{\"3069\":1}}],[\"因为早起xml是用来取代html的\",{\"1\":{\"3020\":1}}],[\"因为war仅服务于web应用\",{\"1\":{\"2997\":1}}],[\"因为while一直在执行\",{\"1\":{\"1768\":1}}],[\"因为while\",{\"1\":{\"1768\":1}}],[\"因为浏览器发送了两次请求\",{\"1\":{\"2912\":1}}],[\"因为请求头的名字都是固定的\",{\"1\":{\"2850\":1}}],[\"因为requestfacade实现了其接口就需要重写接口中的方法\",{\"1\":{\"2837\":1}}],[\"因为有了前一个模板的默认值\",{\"1\":{\"2754\":1}}],[\"因为有端口占用\",{\"1\":{\"2703\":1}}],[\"因为都已经配置好了\",{\"1\":{\"2735\":1}}],[\"因为方法内部做了判断\",{\"1\":{\"2682\":1}}],[\"因为设计到事务操作\",{\"1\":{\"2652\":1}}],[\"因为blob类型的数据无法使用字符串拼接写的\",{\"1\":{\"2608\":1}}],[\"因为驱动不用注册\",{\"1\":{\"2548\":1}}],[\"因为获取的元素是固定的\",{\"1\":{\"2481\":1}}],[\"因为私有元素也加载到内存中了\",{\"1\":{\"2262\":1}}],[\"因为\",{\"1\":{\"2162\":1,\"3494\":1}}],[\"因为图片属于二进制资源\",{\"1\":{\"2066\":1}}],[\"因为他读写效率比较低\",{\"1\":{\"2039\":1,\"2043\":1}}],[\"因为他的类型是确定的\",{\"1\":{\"1978\":1}}],[\"因为类可以直接调用静态方法\",{\"1\":{\"1969\":1}}],[\"因为这个时候除了元素的类型不确定\",{\"1\":{\"1947\":1}}],[\"因为这类异常很普遍\",{\"1\":{\"1573\":1}}],[\"因为要按照key进行排序\",{\"1\":{\"1934\":1}}],[\"因为要进行查询\",{\"1\":{\"1918\":1}}],[\"因为我们将来开发b\",{\"1\":{\"2809\":1}}],[\"因为我们更关注的其实只有service方法\",{\"1\":{\"2805\":1}}],[\"因为我们自定义的servlet\",{\"1\":{\"2786\":1}}],[\"因为我们想通过对象的值是否相同来判断对象的异同\",{\"1\":{\"1896\":1}}],[\"因为我们调用父类方法时要进行异常处理\",{\"1\":{\"1602\":1}}],[\"因为object类底层默认是通过对象储存的地址来计算hashcode的\",{\"1\":{\"1895\":1}}],[\"因为thread类会通过创建多个thread类的子类来作为线程对象\",{\"1\":{\"1763\":1}}],[\"因为循环条件是成员变量\",{\"1\":{\"1740\":1}}],[\"因为在这个管理过程中\",{\"1\":{\"3261\":1}}],[\"因为在一个时间单元内\",{\"1\":{\"1689\":1}}],[\"因为在service层内部调用方法\",{\"1\":{\"471\":1}}],[\"因为ioexception包含了filenotfountexception\",{\"1\":{\"1600\":1}}],[\"因为缺少某个资源\",{\"1\":{\"1563\":1}}],[\"因为抽象类的子类还是要实例化的\",{\"1\":{\"1494\":1}}],[\"因为数据不会变化\",{\"1\":{\"3441\":1}}],[\"因为数据库连接是一种数据库资源\",{\"1\":{\"1491\":1}}],[\"因为数组是引用类型\",{\"1\":{\"1230\":1}}],[\"因为只能有一个实例去操作\",{\"1\":{\"1491\":1}}],[\"因为加载类时已经有静态方法了\",{\"1\":{\"1482\":1}}],[\"因为会触发自动装箱\",{\"1\":{\"1443\":1}}],[\"因为static方法是属于类的\",{\"1\":{\"1375\":1}}],[\"因为string经常用到\",{\"1\":{\"1124\":1}}],[\"因为stringbuffer是线程安全的\",{\"1\":{\"697\":1}}],[\"因为子类实例中包含父类中的private成员\",{\"1\":{\"1366\":1}}],[\"因为其实现体是由非java语言在外面实现的\",{\"1\":{\"1357\":1}}],[\"因为程序永远不会执行其后的语句\",{\"1\":{\"1197\":1}}],[\"因为扩展赋值运算符不会改变变量的类型\",{\"1\":{\"1146\":1}}],[\"因为使用了泛型\",{\"1\":{\"893\":1}}],[\"因为大部分类根本就用不到\",{\"1\":{\"532\":1}}],[\"因为该方法并没有在类中被掉用\",{\"1\":{\"471\":1}}],[\"因为缓存是通过注解生效的\",{\"1\":{\"471\":1}}],[\"因为配置类本身就可以放很多\",{\"1\":{\"442\":1}}],[\"因为配置es客户端时\",{\"1\":{\"420\":1}}],[\"因为配置未生效\",{\"1\":{\"159\":1}}],[\"因为query对象可以进行各种复杂的查询\",{\"1\":{\"410\":1}}],[\"因为组件不健康会直接影响整个程序的运行\",{\"1\":{\"350\":1}}],[\"因为运行方法的时候会让tomcat暂停\",{\"1\":{\"174\":1}}],[\"因为找不到好的资料\",{\"1\":{\"84\":1,\"85\":1}}],[\"因此拷贝到各自的目录即可\",{\"1\":{\"3727\":1}}],[\"因此登录后就只能看到article库\",{\"1\":{\"3720\":1}}],[\"因此值不能重复\",{\"1\":{\"3623\":1}}],[\"因此磁盘性能是es最大瓶颈\",{\"1\":{\"3501\":1}}],[\"因此阻塞访问资源以防止冲突\",{\"1\":{\"3495\":1}}],[\"因此搜索的时候需要每个倒排索引都进行搜索\",{\"1\":{\"3445\":1}}],[\"因此才有了对文档搜索效率更高的倒排索引\",{\"1\":{\"3423\":1}}],[\"因此才需要建立映射\",{\"1\":{\"3364\":1}}],[\"因此查询到了两条数据\",{\"1\":{\"3142\":1,\"3160\":1}}],[\"因此返回的是数组\",{\"1\":{\"3043\":1}}],[\"因此优先采用的是token技术\",{\"1\":{\"3031\":1}}],[\"因此框架要对xml配置文件中的内容进行一些约束\",{\"1\":{\"3022\":1}}],[\"因此对于java\",{\"1\":{\"2998\":1}}],[\"因此对于springboot项目\",{\"1\":{\"224\":1}}],[\"因此提倡的是一个tomcat实例管理多个java\",{\"1\":{\"2998\":1}}],[\"因此通常需要把这些类以及相关的资源文件打包成一个\",{\"1\":{\"2986\":1}}],[\"因此直接使用\",{\"1\":{\"2941\":1}}],[\"因此获取的mime类型并不是很准确\",{\"1\":{\"2935\":1}}],[\"因此有了httpservlet\",{\"1\":{\"2808\":1,\"2815\":1}}],[\"因此有了通配符\",{\"1\":{\"1989\":1}}],[\"因此也只能销毁一次\",{\"1\":{\"2802\":1}}],[\"因此也不能包含静态成员\",{\"1\":{\"1460\":1}}],[\"因此整个应用只需要一个数据源即可\",{\"1\":{\"2669\":1}}],[\"因此数据库的连接和关闭必须放到数据库的操作方法调用处\",{\"1\":{\"2631\":1}}],[\"因此数组一经分配空间\",{\"1\":{\"1223\":1}}],[\"因此应该将数据库连接\",{\"1\":{\"2631\":1}}],[\"因此必须以该类储存账号和密码信息\",{\"1\":{\"2545\":1}}],[\"因此函数式接口就是一个载体\",{\"1\":{\"2381\":1}}],[\"因此它不能是相对的\",{\"1\":{\"2243\":1}}],[\"因此无须建立发送方和接收方的连接\",{\"1\":{\"2229\":1}}],[\"因此统一使用\",{\"1\":{\"2012\":1}}],[\"因此该方法只能被泛型为string的list调用\",{\"1\":{\"1995\":1}}],[\"因此该类的方法都是\",{\"1\":{\"889\":1}}],[\"因此规定了两个泛型\",{\"1\":{\"1958\":1}}],[\"因此此时把元素的类型设计成一个参数\",{\"1\":{\"1947\":1}}],[\"因此具有很好的存取\",{\"1\":{\"1883\":1}}],[\"因此尽量不要扩容\",{\"1\":{\"1868\":1}}],[\"因此要创建一个名为es的用户操作elasticsearch\",{\"1\":{\"3291\":1,\"3322\":1}}],[\"因此要谨慎使用\",{\"1\":{\"2937\":1}}],[\"因此要重写equals方法\",{\"1\":{\"1896\":1}}],[\"因此要注意以下两点\",{\"1\":{\"1763\":1}}],[\"因此要监控的信息量也就比较大了\",{\"1\":{\"313\":1}}],[\"因此调用的是runnable的run方法\",{\"1\":{\"1741\":1}}],[\"因此感觉不出来\",{\"1\":{\"1689\":1}}],[\"因此不能被删除或者改动以展示其变更\",{\"1\":{\"3528\":1}}],[\"因此不能再继承其他类\",{\"1\":{\"1625\":1}}],[\"因此不用进行处理\",{\"1\":{\"1600\":1}}],[\"因此不管加载多少次\",{\"1\":{\"181\":1}}],[\"因此采用异常处理机制\",{\"1\":{\"1564\":1}}],[\"因此现在p1和p3保存的是相同的内存地址\",{\"1\":{\"1551\":1}}],[\"因此一个servlet可以配置多个urlpattern\",{\"1\":{\"2818\":1}}],[\"因此一个类的不同实例拥有的静态变量是同一个\",{\"1\":{\"1477\":1}}],[\"因此一旦赋值成功\",{\"1\":{\"1127\":1}}],[\"因此类的属性就分为\",{\"1\":{\"1475\":1}}],[\"因此可以使用servletcontext获取指定文件的mime类型\",{\"1\":{\"2933\":1}}],[\"因此可以设计成object类型的\",{\"1\":{\"2580\":1}}],[\"因此可以用getname替代get\",{\"1\":{\"2407\":1}}],[\"因此可以直接使用方法引用\",{\"1\":{\"2404\":1}}],[\"因此可以直接通过类名调用静态方法\",{\"1\":{\"1482\":1}}],[\"因此可以将要计算的代码作为抽象方法来定义和使用\",{\"1\":{\"1499\":1}}],[\"因此可以通过\",{\"1\":{\"1478\":1}}],[\"因此可以被其它的内部类继承\",{\"1\":{\"1454\":1}}],[\"因此可以选择从配置文件中读取两个类的配置\",{\"1\":{\"550\":1}}],[\"因此只需要使用文字的一部分\",{\"1\":{\"3175\":1}}],[\"因此只需要配置一下路由\",{\"1\":{\"2820\":1}}],[\"因此只需要按需重写方法即可\",{\"1\":{\"2810\":1}}],[\"因此只需要写方法名即可\",{\"1\":{\"2399\":1}}],[\"因此只需要在yml设置证书的名字即可\",{\"1\":{\"417\":1}}],[\"因此只能适用于引用数据类型\",{\"1\":{\"1427\":1}}],[\"因此我们需要手动下载一个中文分词器\",{\"1\":{\"3477\":1}}],[\"因此我们需要定义多个函数式接口\",{\"1\":{\"2385\":1}}],[\"因此我们可以让每个容器都单独运行一个tomcat实例\",{\"1\":{\"2998\":1}}],[\"因此我们可以将sql预编译语句和占位符作为形参\",{\"1\":{\"2579\":1}}],[\"因此我们可以将办理的业务作为抽象方法\",{\"1\":{\"1500\":1}}],[\"因此我们在使用的时候可以指定泛型\",{\"1\":{\"1959\":1}}],[\"因此我们这里就要用到多态性\",{\"1\":{\"1401\":1}}],[\"因此我们就需要多态了\",{\"1\":{\"1400\":1}}],[\"因此使用多态\",{\"1\":{\"1397\":1}}],[\"因此使用时应该尽量采用带有三个参数的重载方法\",{\"1\":{\"782\":1}}],[\"因此子类必须知道父类如何为对象进行初始化\",{\"1\":{\"1384\":1}}],[\"因此想使用父类的元素\",{\"1\":{\"1383\":1}}],[\"因此s2调用add时会调用子类中重写的add方法\",{\"1\":{\"1376\":1}}],[\"因此s1调用时\",{\"1\":{\"1376\":1}}],[\"因此两个对象指向同一份内存地址\",{\"1\":{\"1262\":1}}],[\"因此默认是double类型\",{\"1\":{\"1116\":1}}],[\"因此main方法并非是类的必备方法\",{\"1\":{\"1051\":1}}],[\"因此map支持两个集合\",{\"1\":{\"956\":1}}],[\"因此java代码就可以在各个平台运行\",{\"1\":{\"1013\":1}}],[\"因此许多匹配器可以共享相同的模式\",{\"1\":{\"987\":1}}],[\"因此向collection接口的实现类的对象中添加数据obj时\",{\"1\":{\"910\":1}}],[\"因此collection接口中定义的方法\",{\"1\":{\"903\":1}}],[\"因此在向其他变量赋值的时候\",{\"1\":{\"1556\":1}}],[\"因此在使用时会报异常\",{\"1\":{\"897\":1}}],[\"因此在application\",{\"1\":{\"416\":1}}],[\"因此重命名也可以做移动文件\",{\"1\":{\"807\":1}}],[\"因此就需要用到接口了\",{\"1\":{\"1505\":1}}],[\"因此就具有了可变性\",{\"1\":{\"693\":1}}],[\"因此就可以内嵌tomcat了\",{\"1\":{\"132\":1}}],[\"因此推荐采用elasticsearch\",{\"1\":{\"414\":1}}],[\"因此当值的范围在\",{\"1\":{\"1430\":1}}],[\"因此当我们需要long类型的常量数值时\",{\"1\":{\"1098\":1}}],[\"因此当时需要手动添加es的依赖\",{\"1\":{\"414\":1}}],[\"因此当操作的数据以对象的形式存在时\",{\"1\":{\"379\":1}}],[\"因此同时添加一个json工具依赖\",{\"1\":{\"413\":1}}],[\"因此操作那个库\",{\"1\":{\"389\":1}}],[\"因此初始化启动时\",{\"1\":{\"332\":1}}],[\"因此被监控的服务要能够与监控程序通信\",{\"1\":{\"315\":1}}],[\"因此第一个要监控的指标就是服务是否正常运行\",{\"1\":{\"312\":1,\"313\":1}}],[\"因此需要在admin数据库下使用auth方法进行验证\",{\"1\":{\"3715\":1}}],[\"因此需要在测试环境中临时创建一组属性\",{\"1\":{\"230\":1}}],[\"因此需要修复这些host\",{\"1\":{\"3678\":1}}],[\"因此需要先导入依赖\",{\"1\":{\"3216\":1}}],[\"因此需要将java对象转成json字符串\",{\"1\":{\"3216\":1}}],[\"因此需要对xml了解一下\",{\"1\":{\"3014\":1}}],[\"因此需要对配置文件分类\",{\"1\":{\"261\":1}}],[\"因此需要了解\",{\"1\":{\"2497\":1}}],[\"因此需要指明\",{\"1\":{\"391\":1,\"392\":1}}],[\"因此base类加载器无需再次执行\",{\"1\":{\"183\":1}}],[\"因此开发时\",{\"1\":{\"159\":1}}],[\"因此\",{\"1\":{\"129\":1,\"711\":1,\"1157\":1,\"1895\":1,\"2807\":1,\"3592\":1}}],[\"因临时有事\",{\"1\":{\"80\":1,\"81\":1}}],[\"翻译很烂\",{\"1\":{\"84\":1,\"85\":1}}],[\"中默认的数据库为\",{\"1\":{\"3576\":1}}],[\"中断节点未回复\",{\"1\":{\"3509\":1}}],[\"中断节点恢复\",{\"1\":{\"3509\":1}}],[\"中通过增加\",{\"1\":{\"3498\":1}}],[\"中将库存数量减少\",{\"1\":{\"3494\":1}}],[\"中国\",{\"1\":{\"3482\":1}}],[\"中国人\",{\"1\":{\"3482\":1,\"3483\":1}}],[\"中国的中文编码表升级\",{\"1\":{\"2109\":1}}],[\"中国的中文编码表\",{\"1\":{\"2109\":1}}],[\"中除表示所有段的集合外\",{\"1\":{\"3446\":1}}],[\"中解析快得多\",{\"1\":{\"3197\":1}}],[\"中支持的数据类型非常丰富\",{\"1\":{\"3197\":1}}],[\"中文词汇\",{\"1\":{\"3477\":1}}],[\"中文的默认处理\",{\"0\":{\"3476\":1}}],[\"中文处理\",{\"0\":{\"3475\":1}}],[\"中文是按照汉字进行拆分的\",{\"1\":{\"3175\":1}}],[\"中文文档\",{\"1\":{\"84\":1,\"85\":1}}],[\"中数据的主键查询\",{\"1\":{\"3138\":1}}],[\"中执行命名实体识别\",{\"1\":{\"3114\":1}}],[\"中取出一个\",{\"1\":{\"2664\":1}}],[\"中建立数据库连接\",{\"1\":{\"2661\":1}}],[\"中处理集合的关键抽象概念\",{\"1\":{\"2436\":1}}],[\"中选择目标模块\",{\"1\":{\"2355\":1}}],[\"中只会有一个class实例\",{\"1\":{\"2263\":1}}],[\"中有关网络方面的功能都定义在\",{\"1\":{\"2244\":1}}],[\"中实现了类\",{\"1\":{\"2238\":1}}],[\"中添加的数据\",{\"1\":{\"1894\":1}}],[\"中严格区分大小写\",{\"1\":{\"1082\":1}}],[\"中使用的这种方法假定冲突是不可能发生的\",{\"1\":{\"3495\":1}}],[\"中使用\",{\"1\":{\"1072\":1}}],[\"中正则表达式中则需要有两个反斜杠才能被解析为其他语言中的转义作用\",{\"1\":{\"985\":1}}],[\"中元素的顺序\",{\"1\":{\"930\":1}}],[\"中提供了一系列静态的方法对集合元素进行排序\",{\"1\":{\"927\":1,\"1943\":1}}],[\"中包含了所有关于本地日期\",{\"1\":{\"709\":1}}],[\"中\",{\"1\":{\"545\":2,\"985\":1,\"1719\":1,\"1747\":1,\"1809\":1,\"1810\":1,\"2022\":1,\"2164\":1,\"2343\":1,\"2792\":1,\"2902\":1,\"2933\":1,\"3134\":1,\"3140\":1,\"3148\":1,\"3158\":1,\"3183\":1,\"3186\":1,\"3189\":1,\"3504\":1,\"3527\":1}}],[\"中进行测试\",{\"1\":{\"493\":1}}],[\"中间操作不会执行任何的处理\",{\"1\":{\"2453\":1}}],[\"中间操作不会再被使用\",{\"1\":{\"2440\":1}}],[\"中间操作说明\",{\"0\":{\"2453\":1}}],[\"中间操作\",{\"1\":{\"2440\":1}}],[\"中间创建接口实体类的过程\",{\"1\":{\"363\":1}}],[\"中间件\",{\"1\":{\"11\":1}}],[\"中创建文档并添加数据了\",{\"1\":{\"3132\":1}}],[\"中创建\",{\"1\":{\"307\":1}}],[\"中括号可选\",{\"1\":{\"304\":1}}],[\"中的文档是不可变的\",{\"1\":{\"3528\":1}}],[\"中的数据写入到磁盘中时\",{\"1\":{\"3527\":1}}],[\"中的每个索引被分片\",{\"1\":{\"3370\":1}}],[\"中的表结构\",{\"1\":{\"3195\":1}}],[\"中的表现层\",{\"1\":{\"3011\":1}}],[\"中的元素\",{\"1\":{\"2467\":1}}],[\"中的方法将各类数据写入文件\",{\"1\":{\"2126\":1}}],[\"中的语句执行时\",{\"1\":{\"1597\":1}}],[\"中的语句将不会执行\",{\"1\":{\"1586\":1}}],[\"中的属性\",{\"1\":{\"342\":1}}],[\"中的\",{\"0\":{\"116\":1},\"1\":{\"1909\":2,\"3011\":3}}],[\"该依赖会自动添加子依赖\",{\"1\":{\"3743\":1}}],[\"该账号仅能读写article库\",{\"1\":{\"3720\":1}}],[\"该用户的信息都是存储在admin数据库的\",{\"1\":{\"3715\":1}}],[\"该成员不是仲裁节点\",{\"1\":{\"3668\":1}}],[\"该索引是唯一索引\",{\"1\":{\"3623\":1}}],[\"该文档依然能匹配查询\",{\"1\":{\"3528\":1}}],[\"该文档同样存在与源码包里\",{\"1\":{\"3480\":1}}],[\"该文件夹中新建配置文件\",{\"1\":{\"3558\":1}}],[\"该文件将用来添加扩展词汇\",{\"1\":{\"3487\":1}}],[\"该文件是在生成\",{\"1\":{\"2981\":1}}],[\"该文件是否已经隐藏\",{\"1\":{\"801\":1}}],[\"该文件只能用datainputstream来读入\",{\"1\":{\"2126\":1}}],[\"该文件还有一个父工程\",{\"1\":{\"118\":1}}],[\"该api只是为了方便理解分词的过程和实际被存储到索引中的词条是什么\",{\"1\":{\"3472\":1}}],[\"该api的请求方式\",{\"1\":{\"337\":1}}],[\"该节点将向协调节点报告成功\",{\"1\":{\"3417\":1}}],[\"该节点就是协调节点\",{\"1\":{\"3404\":1}}],[\"该节点内可以包含有多个分片和副本\",{\"1\":{\"3377\":1}}],[\"该节点即为初始主节点\",{\"1\":{\"3336\":1}}],[\"该节点必须包含cluster\",{\"1\":{\"3278\":1}}],[\"该配置允许其他任何ip的节点加入该集群\",{\"1\":{\"3327\":1}}],[\"该配置运行其他任何ip的节点加入该集群\",{\"1\":{\"3307\":1}}],[\"该配置就是来指定哪些文件的修改会触发热部署\",{\"1\":{\"192\":1}}],[\"该证书浏览器是不不会信任的\",{\"1\":{\"3298\":1}}],[\"该软件为绿色软件\",{\"1\":{\"3106\":1}}],[\"该软件是绿色软件\",{\"1\":{\"2701\":1,\"3351\":1,\"3561\":1}}],[\"该插件的版本要和es的版本完全对应\",{\"1\":{\"3104\":1}}],[\"该session对象有一个id属性\",{\"1\":{\"3068\":1}}],[\"该监听器接口一共有两个方法\",{\"1\":{\"2972\":1}}],[\"该域对象仅在jsp中有用\",{\"1\":{\"2920\":1}}],[\"该域对象是jsp中的\",{\"1\":{\"2920\":1}}],[\"该路径是通过tomcat的deployment\",{\"1\":{\"2845\":1}}],[\"该匹配规则和其他三个是不同的\",{\"1\":{\"2824\":1}}],[\"该实例随后会被java的垃圾收集器所回收\",{\"1\":{\"2798\":1}}],[\"该怎么做\",{\"1\":{\"2750\":1}}],[\"该模板只需配置一次\",{\"1\":{\"2745\":1}}],[\"该模块就可以作为独立的springboot启动了\",{\"1\":{\"164\":1}}],[\"该操作执行后并不会提交\",{\"1\":{\"2634\":1}}],[\"该操作仅支持custom表\",{\"1\":{\"2600\":1}}],[\"该操作会抛出\",{\"1\":{\"2571\":1}}],[\"该操作会返回一个新的stream\",{\"1\":{\"2463\":1}}],[\"该函数会被应用到每个元素上\",{\"1\":{\"2463\":1,\"2464\":1,\"2465\":1,\"2466\":1}}],[\"该函数也是四舍五入\",{\"1\":{\"766\":1}}],[\"该加载器无法获取\",{\"1\":{\"2279\":1}}],[\"该信息将被截短\",{\"1\":{\"2233\":1}}],[\"该步骤已经将数据读入到创建的char\",{\"1\":{\"2054\":1}}],[\"该集合的类必须实现comparable接口\",{\"1\":{\"1902\":1}}],[\"该线程不会释放锁\",{\"1\":{\"1775\":1}}],[\"该线程将拿到锁\",{\"1\":{\"1771\":1}}],[\"该构造函数可以自定义内部缓冲区数组的大小\",{\"1\":{\"2076\":1,\"2077\":1,\"2078\":1,\"2079\":1}}],[\"该构造方法将runnble接口实现类的实例赋值给了target变量\",{\"1\":{\"1741\":1}}],[\"该构造器接受一个string类谢谢的参数\",{\"1\":{\"850\":1,\"2286\":1}}],[\"该构造器可以接受第二个参数\",{\"1\":{\"674\":1}}],[\"该进程执行完\",{\"1\":{\"1729\":1}}],[\"该\",{\"1\":{\"1654\":1}}],[\"该异常对象会被抛给调用者方法中处理\",{\"1\":{\"1599\":1}}],[\"该数组中保存执行java命令时传递给所运行的类的参数\",{\"1\":{\"1541\":1}}],[\"该暴露的暴露出来\",{\"1\":{\"1301\":1}}],[\"该属性是引用类型\",{\"1\":{\"1131\":1}}],[\"该属性为缓存策略的命名空间\",{\"1\":{\"478\":1}}],[\"该内存地址\",{\"1\":{\"1127\":1}}],[\"该变量必须已经被初始化过了\",{\"1\":{\"1073\":1}}],[\"该区域的数据可以在同一类型范围内不断变化\",{\"1\":{\"1066\":1}}],[\"该区域中的数据在内存中保存\",{\"1\":{\"462\":1}}],[\"该标识符是可变的\",{\"1\":{\"1702\":1}}],[\"该标注可以用在类或方法上\",{\"1\":{\"1059\":1}}],[\"该标记外外面必须加\",{\"1\":{\"1058\":1}}],[\"该对象通过add方法\",{\"1\":{\"3219\":1}}],[\"该对象转为json格式后\",{\"1\":{\"3214\":1}}],[\"该对象会在tomcat启动时创建\",{\"1\":{\"2928\":1}}],[\"该对象代表了整个web应用\",{\"1\":{\"2925\":1}}],[\"该对象只会创建一次\",{\"1\":{\"2793\":1}}],[\"该对象是由参数3的实现类创建的\",{\"1\":{\"2338\":1}}],[\"该对象有被代理对象的同名方法\",{\"1\":{\"2333\":1}}],[\"该对象就是代理对象\",{\"1\":{\"2333\":1}}],[\"该对象里有两个字段\",{\"1\":{\"2244\":1}}],[\"该对象可以将任意character\",{\"1\":{\"987\":1}}],[\"该对象提供了注册bean的方法\",{\"1\":{\"520\":1}}],[\"该方式无法实现热部署\",{\"1\":{\"2748\":1,\"2765\":1}}],[\"该方式返回的是\",{\"1\":{\"899\":1}}],[\"该方法用来返回servlet的相关信息\",{\"1\":{\"2803\":1}}],[\"该方法用来调用被代理类的方法\",{\"1\":{\"2338\":1}}],[\"该方法仅运行了一次\",{\"1\":{\"2802\":1}}],[\"该方法仅启动了一次\",{\"1\":{\"2800\":1}}],[\"该方法中的代码块都会执行一次\",{\"1\":{\"2801\":1}}],[\"该方法都会执行一次\",{\"1\":{\"2801\":1}}],[\"该方法只调用一次\",{\"1\":{\"2796\":1}}],[\"该方法只会删除找到的第一个元素\",{\"1\":{\"912\":1}}],[\"该方法返回\",{\"1\":{\"2588\":1}}],[\"该方法返回一个string\",{\"1\":{\"523\":1}}],[\"该方法不会递归\",{\"1\":{\"2467\":1}}],[\"该方法需要处理异常\",{\"1\":{\"2049\":1,\"2050\":1}}],[\"该方法就是泛型方法\",{\"1\":{\"1976\":1}}],[\"该方法就可以写出换行符\",{\"1\":{\"830\":1,\"2083\":1}}],[\"该方法继续执行\",{\"1\":{\"1774\":1}}],[\"该方法已不推荐使用\",{\"1\":{\"1729\":1}}],[\"该方法接收一个string类型的数组参数\",{\"1\":{\"1541\":1}}],[\"该方法接受一个正则表达式作为它的第一个参数\",{\"1\":{\"984\":1}}],[\"该方法叫做抽象方法\",{\"1\":{\"1495\":1}}],[\"该方法必须是重写了父类方法\",{\"1\":{\"1397\":1}}],[\"该方法可以很方便地遍历所有的枚举值\",{\"1\":{\"1627\":1}}],[\"该方法可使将指定集合包装成线程同步的集合\",{\"1\":{\"929\":1}}],[\"该方法可用于快速生成一个list集合\",{\"1\":{\"899\":1}}],[\"该方法最初是定义在iterator中的\",{\"1\":{\"912\":1}}],[\"该方法最为安全可靠\",{\"1\":{\"834\":1,\"2266\":1}}],[\"该方法有一个对象参数\",{\"1\":{\"3707\":1}}],[\"该方法有两个参数\",{\"1\":{\"3233\":1}}],[\"该方法有很多重构方法\",{\"1\":{\"894\":1}}],[\"该方法有好几个重构方法\",{\"1\":{\"891\":1}}],[\"该方法对各种类型的参数进行了重构\",{\"1\":{\"890\":1}}],[\"该方法是通过后缀名获取文件类型的\",{\"1\":{\"2935\":1}}],[\"该方法是一直等待输入的\",{\"1\":{\"829\":1}}],[\"该方法是阻塞的\",{\"1\":{\"829\":1}}],[\"该方法是读取一行数据\",{\"1\":{\"829\":1,\"2082\":1}}],[\"该方法本身也会抛出异常\",{\"1\":{\"827\":1}}],[\"该方法若不调用\",{\"1\":{\"826\":1}}],[\"该方法也需要处理异常\",{\"1\":{\"819\":1}}],[\"该方法额外多了两个参数\",{\"1\":{\"818\":1}}],[\"该方法会获取访问时的请求信息\",{\"1\":{\"2801\":1}}],[\"该方法会自行处理\",{\"1\":{\"2683\":1}}],[\"该方法会抛出\",{\"1\":{\"2570\":1}}],[\"该方法会抛出java\",{\"1\":{\"813\":1,\"814\":1}}],[\"该方法会抛interruptedexception异常\",{\"1\":{\"1729\":1}}],[\"该方法会抛异常\",{\"1\":{\"1729\":1}}],[\"该方法会启动对象对应的线程\",{\"1\":{\"1718\":1}}],[\"该方法会改变源集合\",{\"1\":{\"946\":1}}],[\"该方法会将参数集合中的所有元素都添加到自己的集合中\",{\"1\":{\"946\":1}}],[\"该方法会返回集合中所有的文档\",{\"1\":{\"408\":1}}],[\"该方法的作用就是通过工作目录下的路径\",{\"1\":{\"2940\":1}}],[\"该方法的作用是获得系统中属性名对应的值\",{\"1\":{\"884\":1}}],[\"该方法的作用是请求系统进行垃圾回收\",{\"1\":{\"883\":1}}],[\"该方法的作用是退出程序\",{\"1\":{\"882\":1}}],[\"该方法的参数是\",{\"1\":{\"998\":1}}],[\"该方法的参数应该是个目录\",{\"1\":{\"794\":1,\"795\":1}}],[\"该方法的返回值就会加入ioc管理\",{\"1\":{\"202\":1}}],[\"该方法与string\",{\"1\":{\"775\":1}}],[\"该方法针对不通数据类型的参数\",{\"1\":{\"700\":1}}],[\"该方法如果未找到\",{\"1\":{\"657\":1}}],[\"该方法发送消息时会先将消息的类型转换成字符串\",{\"1\":{\"453\":1}}],[\"该方法一般接受两个参数\",{\"1\":{\"404\":1}}],[\"该仿佛根据参数中的数组数据类型不通有多个重构方法\",{\"1\":{\"896\":1}}],[\"该复制是真的值复制\",{\"1\":{\"895\":1}}],[\"该java类库提供了一些注解可以简化实体类的开发\",{\"1\":{\"620\":1}}],[\"该接口用于处理\",{\"1\":{\"2684\":1}}],[\"该接口通常由服务器\",{\"1\":{\"2668\":1}}],[\"该接口有三个实现类\",{\"1\":{\"1859\":1}}],[\"该接口有一个iterator\",{\"1\":{\"1836\":1}}],[\"该接口里定义的方法既可用于操作\",{\"1\":{\"1830\":1}}],[\"该接口是个标识接口\",{\"1\":{\"2153\":1}}],[\"该接口是个函数式接口\",{\"1\":{\"752\":1}}],[\"该接口是个保障型的接口\",{\"1\":{\"531\":1}}],[\"该接口的结构如下\",{\"1\":{\"1881\":1}}],[\"该接口的的主要作用\",{\"1\":{\"567\":1}}],[\"该接口的registerbeandefinitions比importselector接口的selectimports方法多了一个参数beandefinitionregistry\",{\"1\":{\"527\":1}}],[\"该参数是一个对象\",{\"1\":{\"3625\":1}}],[\"该参数是用于控制选举行为发生的最小集群主节点数量\",{\"1\":{\"3533\":1}}],[\"该参数用来指定数据库存放的位置\",{\"1\":{\"3557\":1}}],[\"该参数必须是comparator的对象\",{\"1\":{\"1902\":1}}],[\"该参数将限制接下来要输入的数据格式\",{\"1\":{\"887\":1,\"1008\":1}}],[\"该参数就是用来控制bean的属性的\",{\"1\":{\"527\":1}}],[\"该参数有一系列方法可以获取和判断类的各种元数据\",{\"1\":{\"523\":1}}],[\"该程序需要持续提供服务\",{\"1\":{\"504\":1}}],[\"该策略仅在smscode缓存空间生效\",{\"1\":{\"479\":1}}],[\"该案例是模拟验证码的流程\",{\"1\":{\"469\":1}}],[\"该客户端需要手动导入\",{\"1\":{\"414\":1}}],[\"该客户端可以操作es8\",{\"1\":{\"414\":1}}],[\"该客户端也被低版本的springboot内置\",{\"1\":{\"414\":1}}],[\"该字段用来储存添加数据的实体类\",{\"1\":{\"401\":1}}],[\"该目录存放所有es相关的内容\",{\"1\":{\"3288\":1,\"3319\":1}}],[\"该目录用来存放安装包\",{\"1\":{\"3288\":1,\"3319\":1}}],[\"该目录就是一个独立的项目\",{\"1\":{\"2713\":1}}],[\"该目录就是用来写测试代码的\",{\"1\":{\"225\":1}}],[\"该目录下文件可以直接访问到\",{\"1\":{\"417\":1}}],[\"该目录如果不存在\",{\"1\":{\"225\":1}}],[\"该注解表示下面要定义的接口为\",{\"1\":{\"2387\":1}}],[\"该注解不需要任何参数\",{\"1\":{\"2974\":1}}],[\"该注解不能继承其他的注解或接口\",{\"1\":{\"1643\":1}}],[\"该注解不支持宽松绑定\",{\"1\":{\"210\":1}}],[\"该注解会被启动类扫描\",{\"1\":{\"626\":1}}],[\"该注解引入了autoconfigurationimportselector\",{\"1\":{\"567\":1}}],[\"该注解内部还嵌套了一个\",{\"1\":{\"566\":1}}],[\"该注解也是由两部分组成\",{\"1\":{\"565\":1}}],[\"该注解是用来扫描bean的\",{\"1\":{\"568\":1}}],[\"该注解是用来加速启动的\",{\"1\":{\"564\":1}}],[\"该注解是作用在配置类上的\",{\"1\":{\"206\":1}}],[\"该注解又包含两个注解\",{\"1\":{\"564\":1}}],[\"该注解的意义就是对绑定属性的类进行统一的管理\",{\"1\":{\"206\":1}}],[\"该注解的功能\",{\"1\":{\"129\":1}}],[\"该类实例和session一起活化到内存时调用\",{\"1\":{\"2969\":1}}],[\"该类实例和session一起钝化到硬盘时调用\",{\"1\":{\"2969\":1}}],[\"该类实现了httpservletrequest接口\",{\"1\":{\"2837\":1}}],[\"该类实现了6个接口\",{\"1\":{\"567\":1}}],[\"该类实现的基本功能为\",{\"1\":{\"2652\":1}}],[\"该类也有一个实现类\",{\"1\":{\"2806\":1}}],[\"该类简单化了sql查询\",{\"1\":{\"2683\":1}}],[\"该类同时也表名\",{\"1\":{\"2649\":1}}],[\"该类的实例从session中移除时调用\",{\"1\":{\"2968\":1}}],[\"该类的实例被放到session域中时调用\",{\"1\":{\"2968\":1}}],[\"该类的构造器\",{\"1\":{\"2223\":1}}],[\"该类的核心就是可以操作指针\",{\"1\":{\"2137\":1}}],[\"该类为工具类\",{\"1\":{\"889\":1}}],[\"该类有三种实例化的方式\",{\"1\":{\"728\":1}}],[\"该类包含了很多条件查询相关的方法\",{\"1\":{\"630\":1}}],[\"该类承担了自动装配的任务\",{\"1\":{\"567\":1}}],[\"该类获取了当前启动类所在包路径\",{\"1\":{\"566\":1}}],[\"该类没有注册我bean\",{\"1\":{\"554\":1}}],[\"该类必须注册为bean\",{\"1\":{\"553\":1}}],[\"该类就完全不可用了\",{\"1\":{\"551\":1}}],[\"该类被加入了bean\",{\"1\":{\"509\":1}}],[\"该类是没有抽象方法的抽象类\",{\"1\":{\"2808\":1,\"2815\":1}}],[\"该类是\",{\"1\":{\"2116\":1}}],[\"该类是专门用来处理项目中的配置文件的\",{\"1\":{\"1937\":1}}],[\"该类是可以被加载进容器的\",{\"1\":{\"505\":1}}],[\"该类是个抽象类\",{\"1\":{\"493\":1}}],[\"该类会被加入bean管理\",{\"1\":{\"499\":1}}],[\"该类加上了\",{\"1\":{\"499\":1}}],[\"该类用于使用算法生成验证码\",{\"1\":{\"472\":1}}],[\"该类用来创建数据对象\",{\"1\":{\"200\":1}}],[\"该类需要jakarta\",{\"1\":{\"420\":1}}],[\"该类内部要查找manifest\",{\"1\":{\"244\":1}}],[\"该类不能再声明为bean\",{\"1\":{\"208\":1}}],[\"该类型依赖出现的目的是减少依赖配置的数量\",{\"1\":{\"123\":1}}],[\"该该配置文件可以配置所有可以自定义的配置项\",{\"1\":{\"137\":1}}],[\"该引导类是靠\",{\"1\":{\"129\":1}}],[\"该parent就是springboot内置的专门用来管理依赖的父pom\",{\"1\":{\"117\":1}}],[\"该url就是要连接的网址\",{\"1\":{\"95\":1}}],[\"该笔记仅记录了入门级内容\",{\"1\":{\"80\":1,\"81\":1}}],[\"该项目用来练习\",{\"1\":{\"50\":1}}],[\"该项目是瑞吉外卖的进阶版\",{\"1\":{\"48\":1}}],[\"该项目来自于黑马程序员的\",{\"1\":{\"48\":1}}],[\"700\",{\"1\":{\"3614\":1,\"3616\":1}}],[\"7000\",{\"1\":{\"2458\":1,\"3191\":1}}],[\"7034897193246939l\",{\"1\":{\"1612\":1}}],[\"77556fd\",{\"1\":{\"2280\":1}}],[\"7之后的语法\",{\"1\":{\"1964\":1}}],[\"78进行tomcat的配置和项目部署了\",{\"1\":{\"2751\":1}}],[\"78\",{\"1\":{\"1955\":1}}],[\"76\",{\"1\":{\"1935\":1,\"1955\":1}}],[\"76<\",{\"1\":{\"609\":1}}],[\"7900\",{\"1\":{\"1507\":1}}],[\"7版本\",{\"1\":{\"415\":1}}],[\"75\",{\"1\":{\"362\":1,\"372\":1,\"378\":1,\"388\":2,\"416\":1,\"439\":1,\"3298\":2,\"3308\":1,\"3330\":1,\"3674\":2,\"3679\":3,\"3736\":1,\"3738\":1,\"3739\":3,\"3750\":1,\"3751\":3}}],[\"7<\",{\"1\":{\"119\":2,\"599\":1}}],[\"7\",{\"0\":{\"104\":1,\"105\":1,\"106\":1,\"229\":1,\"335\":1,\"410\":1,\"639\":1,\"640\":1,\"641\":1,\"642\":1,\"696\":1,\"722\":1,\"766\":1,\"785\":1,\"794\":1,\"811\":1,\"843\":1,\"858\":1,\"874\":1,\"898\":1,\"911\":1,\"936\":1,\"951\":1,\"965\":1,\"1098\":1,\"1135\":1,\"1137\":1,\"1224\":1,\"1225\":1,\"1226\":1,\"1227\":1,\"1242\":1,\"1261\":1,\"1322\":1,\"1346\":1,\"1393\":1,\"1408\":1,\"1444\":1,\"1445\":1,\"1446\":1,\"1511\":1,\"1512\":1,\"1513\":1,\"1583\":1,\"1593\":1,\"1604\":1,\"1706\":1,\"1805\":1,\"1847\":1,\"1889\":1,\"1890\":1,\"1891\":1,\"1892\":1,\"1893\":1,\"1941\":1,\"1944\":1,\"1960\":1,\"1983\":1,\"2041\":1,\"2114\":1,\"2158\":1,\"2187\":1,\"2235\":1,\"2244\":1,\"2270\":1,\"2483\":1,\"2509\":1,\"2523\":1,\"2595\":1,\"2640\":1,\"2706\":1,\"2707\":1,\"2708\":1,\"2709\":1,\"2881\":1,\"2968\":1,\"2985\":1,\"2986\":1,\"2987\":1,\"3054\":1,\"3071\":1,\"3204\":1,\"3299\":1,\"3300\":1,\"3301\":1,\"3368\":1,\"3369\":1,\"3370\":1,\"3491\":1,\"3499\":1,\"3617\":1,\"3778\":1,\"3786\":1},\"1\":{\"80\":1,\"81\":1,\"96\":1,\"100\":1,\"117\":1,\"118\":2,\"119\":2,\"120\":3,\"123\":3,\"133\":1,\"319\":3,\"323\":1,\"330\":1,\"413\":1,\"562\":1,\"588\":1,\"590\":1,\"612\":1,\"717\":1,\"783\":1,\"784\":1,\"898\":6,\"1138\":1,\"1150\":1,\"1155\":1,\"1156\":1,\"1157\":1,\"1159\":1,\"1406\":1,\"1638\":1,\"1893\":1,\"1953\":1,\"1954\":1,\"2162\":1,\"2243\":1,\"2474\":2,\"2487\":1,\"2488\":1,\"2573\":1,\"2603\":1,\"2635\":1,\"2655\":1,\"2656\":1,\"2657\":1,\"2883\":1,\"2884\":1,\"3104\":1,\"3108\":2,\"3148\":1,\"3149\":1,\"3177\":1,\"3201\":1,\"3285\":4,\"3287\":1,\"3288\":1,\"3289\":1,\"3291\":1,\"3296\":3,\"3297\":1,\"3298\":1,\"3300\":2,\"3301\":1,\"3304\":1,\"3305\":1,\"3310\":1,\"3315\":1,\"3318\":1,\"3319\":1,\"3320\":1,\"3322\":1,\"3324\":2,\"3332\":2,\"3361\":1,\"3397\":1,\"3473\":1,\"3479\":1,\"3494\":1,\"3626\":1,\"3627\":1,\"3635\":1,\"3636\":1,\"3674\":1}}],[\"不认证通过compass直接登录\",{\"1\":{\"3718\":1}}],[\"不太安全\",{\"1\":{\"3693\":1}}],[\"不显示所有字段\",{\"1\":{\"3607\":1}}],[\"不得含有\",{\"1\":{\"3575\":1}}],[\"不负责文档级别的管理\",{\"1\":{\"3526\":1}}],[\"不知道它的\",{\"1\":{\"3494\":1}}],[\"不变性的缺点\",{\"0\":{\"3442\":1}}],[\"不变性的优点\",{\"0\":{\"3441\":1}}],[\"不建议这么做\",{\"1\":{\"3408\":1}}],[\"不建议省略\",{\"1\":{\"1171\":1}}],[\"不扩容节点\",{\"1\":{\"3394\":1}}],[\"不加密\",{\"1\":{\"3298\":1}}],[\"不加l和f发生的自动类型转换\",{\"0\":{\"1116\":1}}],[\"不返回全量查询的结果\",{\"1\":{\"3250\":1}}],[\"不配置可能要遭遇严重bug\",{\"1\":{\"3265\":1}}],[\"不配置就采用默认的\",{\"1\":{\"3193\":1}}],[\"不配置的话有缺省值\",{\"1\":{\"2950\":1}}],[\"不设置请求体\",{\"1\":{\"3165\":1}}],[\"不适用常规搜索的场景\",{\"0\":{\"3098\":1}}],[\"不适用于属性\",{\"1\":{\"1399\":1}}],[\"不适用于\",{\"1\":{\"342\":1}}],[\"不方便维护\",{\"1\":{\"2916\":1}}],[\"不写属性就相当于是value\",{\"1\":{\"2819\":1}}],[\"不勾选great\",{\"1\":{\"2741\":1}}],[\"不安全协议\",{\"1\":{\"2697\":1}}],[\"不影响性能\",{\"1\":{\"2674\":1}}],[\"不体现第三方api\",{\"0\":{\"2546\":1}}],[\"不按顺序\",{\"1\":{\"2445\":1}}],[\"不灵活\",{\"1\":{\"2324\":1}}],[\"不利于程序的扩展\",{\"1\":{\"2322\":1}}],[\"不够表示所有字符\",{\"1\":{\"2111\":1}}],[\"不但会关闭流\",{\"1\":{\"2074\":1}}],[\"不直接连接到数据源或目的地\",{\"1\":{\"2023\":1,\"2028\":1}}],[\"不直接连接文件\",{\"1\":{\"2023\":1}}],[\"不具有继承关系\",{\"1\":{\"1989\":1}}],[\"不具备父子关系\",{\"0\":{\"1985\":1}}],[\"不保留任何数据的副本\",{\"1\":{\"3645\":1}}],[\"不保留泛型\",{\"0\":{\"1971\":1,\"1972\":1}}],[\"不保存也可以\",{\"1\":{\"3340\":1}}],[\"不保证映射的顺序\",{\"1\":{\"1912\":1}}],[\"不等于随机性\",{\"1\":{\"1882\":1}}],[\"不推荐\",{\"0\":{\"1844\":1},\"1\":{\"1968\":1,\"2620\":1,\"2704\":1,\"3334\":1,\"3581\":1}}],[\"不推荐使用\",{\"1\":{\"1102\":1}}],[\"不涉及到持久化的存储\",{\"1\":{\"1820\":1}}],[\"不常用\",{\"0\":{\"1663\":1,\"1664\":1},\"1\":{\"2850\":1,\"3026\":1}}],[\"不确定变量的类型时\",{\"1\":{\"1976\":1}}],[\"不确定\",{\"1\":{\"1500\":1}}],[\"不确定部分设计成抽象方法\",{\"1\":{\"1499\":1}}],[\"不确定的部分\",{\"1\":{\"1499\":1}}],[\"不确定的地方加\",{\"1\":{\"1164\":1}}],[\"不实例化子类\",{\"1\":{\"1497\":1}}],[\"不重名的情况下\",{\"1\":{\"1457\":1}}],[\"不比较数据类型\",{\"1\":{\"1426\":1}}],[\"不一定非得用个内循环打印char数组\",{\"1\":{\"2055\":1}}],[\"不一定类型要相同\",{\"1\":{\"1426\":1}}],[\"不一定是\",{\"1\":{\"894\":1}}],[\"不进行访问检测\",{\"1\":{\"2317\":1}}],[\"不进行向下转型\",{\"1\":{\"1415\":1}}],[\"不进行舍入\",{\"1\":{\"784\":1}}],[\"不报错\",{\"1\":{\"1375\":1}}],[\"不报错的情况\",{\"1\":{\"1116\":1}}],[\"不导入包直接用\",{\"0\":{\"1343\":1}}],[\"不对外暴露的私有的方法\",{\"1\":{\"1306\":1}}],[\"不允许重复\",{\"1\":{\"1909\":1}}],[\"不允许多重继承\",{\"1\":{\"1363\":1}}],[\"不允许外部干涉\",{\"1\":{\"1300\":1}}],[\"不允许使用tab键\",{\"1\":{\"146\":1}}],[\"不继续执行了\",{\"1\":{\"1277\":1}}],[\"不赋值\",{\"1\":{\"1267\":1}}],[\"不再使用\",{\"1\":{\"2674\":1}}],[\"不再建议使用警告\",{\"1\":{\"1677\":1}}],[\"不再被建议使用\",{\"1\":{\"1673\":1,\"1680\":1}}],[\"不再强制相等\",{\"1\":{\"1234\":1}}],[\"不再这里提及\",{\"1\":{\"11\":1}}],[\"不初始化\",{\"1\":{\"1234\":1}}],[\"不为数组内部的内层数组指定长度\",{\"1\":{\"1234\":1}}],[\"不支持基于范围的查询\",{\"1\":{\"3621\":1}}],[\"不支持整数\",{\"1\":{\"3548\":1}}],[\"不支持重复注解\",{\"1\":{\"1667\":1}}],[\"不支持直接string类型转其他类型\",{\"1\":{\"1135\":1}}],[\"不支持持久化\",{\"1\":{\"502\":1}}],[\"不属于基本数据类型\",{\"1\":{\"1123\":1}}],[\"不受具体操作系统的影响\",{\"1\":{\"1092\":1}}],[\"不受具体os的影响\",{\"1\":{\"1086\":1}}],[\"不可写操作\",{\"1\":{\"3645\":1}}],[\"不可分词\",{\"1\":{\"3197\":1}}],[\"不可重复性\",{\"1\":{\"1882\":1}}],[\"不可重复的\",{\"1\":{\"1912\":2,\"1918\":2}}],[\"不可重复的数据\",{\"1\":{\"1826\":2,\"1881\":1,\"1882\":1}}],[\"不可重复的需求\",{\"1\":{\"1822\":1}}],[\"不可以继承的观点是\",{\"1\":{\"1366\":1}}],[\"不可以在方法内部定义方法\",{\"1\":{\"1281\":1}}],[\"不可以使用权限修饰符\",{\"1\":{\"1273\":1}}],[\"不可以使用0或非\",{\"1\":{\"1108\":1}}],[\"不可以使用关键字和保留字\",{\"1\":{\"1082\":1}}],[\"不可变性\",{\"1\":{\"1126\":1}}],[\"不可变的字符序列\",{\"1\":{\"690\":1}}],[\"不易static修饰\",{\"1\":{\"1076\":1}}],[\"不开多行模式的话整个字符串会被视作一行\",{\"1\":{\"997\":1}}],[\"不提供参数\",{\"1\":{\"975\":1,\"2392\":1}}],[\"不如怎么验证都是失败\",{\"1\":{\"3715\":1}}],[\"不如直接return\",{\"1\":{\"1770\":1}}],[\"不如无法删除成功\",{\"1\":{\"912\":1}}],[\"不如自己开发\",{\"1\":{\"339\":1}}],[\"不指定的话就会根据字段名自动生成一个\",{\"1\":{\"3625\":1}}],[\"不指定字符集\",{\"0\":{\"2095\":1,\"2103\":1}}],[\"不指定内层长度\",{\"1\":{\"1234\":1}}],[\"不指定就是排序整个数组\",{\"1\":{\"892\":1}}],[\"不指定舍入策略\",{\"1\":{\"783\":1}}],[\"不管是web服务还是后台服务\",{\"1\":{\"2998\":1}}],[\"不管是get还是post请求\",{\"1\":{\"2874\":1}}],[\"不管是基本数据类型还是他们的包装类都无能为力\",{\"1\":{\"777\":1}}],[\"不管你重复x\",{\"1\":{\"1428\":1}}],[\"不管你整合哪种缓存技术\",{\"1\":{\"475\":1}}],[\"不管这个return处于多少层循环之内\",{\"1\":{\"1196\":1}}],[\"不是严格要求的\",{\"1\":{\"3593\":1}}],[\"不是检查当前\",{\"1\":{\"3498\":1}}],[\"不是delete请求\",{\"1\":{\"3152\":1}}],[\"不是接口\",{\"1\":{\"2810\":1}}],[\"不是构造该类对象的构造器\",{\"1\":{\"2276\":1}}],[\"不是插入写\",{\"1\":{\"2137\":1}}],[\"不是追加写\",{\"1\":{\"2137\":1}}],[\"不是文件覆盖\",{\"1\":{\"2137\":1}}],[\"不是文本资源\",{\"1\":{\"2066\":1}}],[\"不是同一个\",{\"1\":{\"1985\":1}}],[\"不是也可以存储数据吗\",{\"1\":{\"1949\":1}}],[\"不是通过比较两个对象的equals和hashcode来判断是否相同的\",{\"1\":{\"1904\":1}}],[\"不是很常用\",{\"1\":{\"818\":1}}],[\"不是线程安全的\",{\"1\":{\"1884\":1}}],[\"不是线程安全\",{\"1\":{\"708\":1}}],[\"不是final\",{\"1\":{\"693\":1}}],[\"不包括这个\",{\"1\":{\"1560\":1}}],[\"不包括私有属性\",{\"1\":{\"854\":1}}],[\"不包括end\",{\"1\":{\"702\":1}}],[\"不包含使用$nin操作符\",{\"1\":{\"3615\":1}}],[\"不包含\",{\"1\":{\"2166\":1}}],[\"不包含static和transient修饰的成员变量\",{\"1\":{\"2153\":1}}],[\"不包含toindex\",{\"1\":{\"894\":1}}],[\"不包含父类中声明的方法\",{\"1\":{\"857\":1,\"2295\":1}}],[\"不包含父类中声明的属性\",{\"1\":{\"853\":1,\"2291\":1}}],[\"不包含private构造器\",{\"1\":{\"848\":1}}],[\"不包含路径\",{\"1\":{\"794\":1}}],[\"不包含1\",{\"1\":{\"761\":1}}],[\"不包含end\",{\"1\":{\"701\":1}}],[\"不只是显示sql\",{\"1\":{\"624\":1}}],[\"不需要锁\",{\"1\":{\"3441\":1}}],[\"不需要\",{\"1\":{\"3298\":1}}],[\"不需要加\",{\"1\":{\"2915\":1}}],[\"不需要加虚拟目录\",{\"1\":{\"2915\":1}}],[\"不需要深入代码\",{\"1\":{\"2552\":1}}],[\"不需要建立连接\",{\"1\":{\"2205\":1}}],[\"不需要每次都创建\",{\"1\":{\"1813\":1}}],[\"不需要额外加static\",{\"1\":{\"1743\":1}}],[\"不需要重复new\",{\"1\":{\"1742\":1}}],[\"不需要再写sql\",{\"1\":{\"624\":1}}],[\"不需要依赖其他额外的包\",{\"1\":{\"497\":1}}],[\"不考虑前端服务器\",{\"1\":{\"614\":1}}],[\"不采用idea内置的maven\",{\"1\":{\"574\":1}}],[\"不经过\",{\"1\":{\"471\":1}}],[\"不会显示只存在于内存中的数据库\",{\"1\":{\"3578\":1}}],[\"不会触发新的分片分配\",{\"1\":{\"3509\":1}}],[\"不会触发此类的初始化\",{\"1\":{\"2277\":1}}],[\"不会分析查询字符串\",{\"1\":{\"3470\":1}}],[\"不会被拷贝到新的大段中\",{\"1\":{\"3458\":1}}],[\"不会删除所有索引\",{\"1\":{\"3129\":1}}],[\"不会执行放行后的逻辑\",{\"1\":{\"2947\":1}}],[\"不会存在oracle下pscache占用内存过多的问题\",{\"1\":{\"2674\":1}}],[\"不会导致子类初始化\",{\"1\":{\"2277\":1}}],[\"不会导致其他对象中同样的属性值的修改\",{\"1\":{\"1475\":1}}],[\"不会发生类的初始化\",{\"1\":{\"2277\":1}}],[\"不会创建文件\",{\"1\":{\"2135\":1}}],[\"不会直接写到文件\",{\"1\":{\"2074\":1}}],[\"不会弄错\",{\"1\":{\"1950\":1}}],[\"不会释放锁\",{\"1\":{\"1803\":1}}],[\"不会释放锁的操作\",{\"0\":{\"1775\":1}}],[\"不会出现提示\",{\"1\":{\"1788\":1}}],[\"不会出现异常\",{\"1\":{\"1788\":1}}],[\"不会再执行其他catch了\",{\"1\":{\"1588\":1}}],[\"不会随着对象的不同而不同的\",{\"1\":{\"1485\":1}}],[\"不会报错\",{\"1\":{\"1145\":1,\"1354\":1,\"1608\":1}}],[\"不会改变源对象\",{\"1\":{\"2441\":1}}],[\"不会改变变量类型\",{\"1\":{\"1145\":1}}],[\"不会改变变量本身的数据类型\",{\"1\":{\"1145\":1}}],[\"不会改变值的大小\",{\"1\":{\"783\":1}}],[\"不会自动重置\",{\"1\":{\"925\":1,\"1840\":1}}],[\"不会进回收站\",{\"1\":{\"810\":1}}],[\"不会正常执行定时任务\",{\"1\":{\"493\":1}}],[\"不会覆盖\",{\"1\":{\"468\":1}}],[\"不会返回\",{\"1\":{\"408\":1}}],[\"不区分大小写\",{\"1\":{\"395\":1,\"671\":1}}],[\"不含\",{\"1\":{\"368\":1}}],[\"不用管\",{\"1\":{\"3623\":1}}],[\"不用做额外的配置\",{\"1\":{\"3478\":1}}],[\"不用做任何额外的触发配置\",{\"1\":{\"499\":1}}],[\"不用担心无效文档越积越多\",{\"1\":{\"3447\":1}}],[\"不用修改任何配置\",{\"1\":{\"3325\":1}}],[\"不用修改这个配置文件\",{\"1\":{\"2755\":1}}],[\"不用\",{\"1\":{\"3298\":1}}],[\"不用签发\",{\"1\":{\"3296\":1,\"3298\":1,\"3299\":1}}],[\"不用补齐\",{\"1\":{\"3290\":1}}],[\"不用写测设类\",{\"1\":{\"2777\":1}}],[\"不用安装\",{\"1\":{\"2701\":1}}],[\"不用进行强转了\",{\"1\":{\"1957\":1}}],[\"不用进行强转\",{\"1\":{\"1957\":1}}],[\"不用点\",{\"1\":{\"1785\":1}}],[\"不用try\",{\"1\":{\"1595\":1}}],[\"不用关注\",{\"1\":{\"1546\":1,\"2945\":2}}],[\"不用实现接口也能调用这些方法\",{\"1\":{\"1520\":1}}],[\"不用实现类也可以\",{\"1\":{\"1520\":1}}],[\"不用记\",{\"1\":{\"1164\":1}}],[\"不用记忆\",{\"1\":{\"405\":1}}],[\"不用更改\",{\"1\":{\"590\":1}}],[\"不用再进行判断\",{\"1\":{\"2863\":1}}],[\"不用再手动的加载bean\",{\"1\":{\"559\":1}}],[\"不用再这里自定义端点进行监控\",{\"1\":{\"353\":1}}],[\"不用加\",{\"1\":{\"554\":1}}],[\"不用麻烦的先引入再new\",{\"1\":{\"504\":1}}],[\"不用现场new\",{\"1\":{\"504\":1}}],[\"不用学\",{\"1\":{\"495\":1}}],[\"不用我们配置\",{\"1\":{\"333\":1}}],[\"不用指定版本\",{\"1\":{\"115\":1}}],[\"不容易维护\",{\"1\":{\"273\":1}}],[\"不同tomcat服务器间cookie的共享\",{\"0\":{\"3057\":1}}],[\"不同页面无法共享域中的数据\",{\"1\":{\"2920\":1}}],[\"不同数据库不一样\",{\"1\":{\"2674\":1}}],[\"不同数据类型的数组\",{\"1\":{\"2447\":1}}],[\"不同数据的hash值是不同的\",{\"1\":{\"1890\":1}}],[\"不同泛型的父子类\",{\"1\":{\"1989\":1}}],[\"不同泛型的类\",{\"0\":{\"1985\":1}}],[\"不同就添加成功\",{\"1\":{\"1890\":1}}],[\"不同于子集和集合的关系\",{\"1\":{\"1361\":1}}],[\"不同包下的同名类\",{\"0\":{\"1344\":1}}],[\"不同\",{\"1\":{\"1285\":1,\"1898\":1}}],[\"不同点\",{\"0\":{\"1273\":1},\"1\":{\"1803\":1}}],[\"不同类型之间的运算\",{\"0\":{\"1110\":1}}],[\"不同字符集编码的字符进行传输时\",{\"1\":{\"1103\":1}}],[\"不同的分片里数据是不同的\",{\"1\":{\"3399\":1}}],[\"不同的会话\",{\"0\":{\"3034\":1}}],[\"不同的框架对应不同的层\",{\"1\":{\"3009\":1}}],[\"不同的访问条件\",{\"1\":{\"2771\":1}}],[\"不同的tomcat模板可以起不同的名字\",{\"1\":{\"2753\":1}}],[\"不同的实现的集合\",{\"1\":{\"2531\":1}}],[\"不同的数据库厂商\",{\"1\":{\"2531\":1}}],[\"不同的函数\",{\"1\":{\"2381\":1}}],[\"不同的进程有不同的端口号\",{\"1\":{\"2185\":1}}],[\"不同的哈希算法\",{\"1\":{\"1899\":1}}],[\"不同的类对hashcode的重写方式\",{\"1\":{\"1898\":1}}],[\"不同的线程分别占用对方需要的同步资源不放弃\",{\"1\":{\"1788\":1}}],[\"不同的子类对顺序要求不同\",{\"1\":{\"915\":1}}],[\"不同的collection子类都重写了equal方法\",{\"1\":{\"915\":1}}],[\"不同的名字只是用来标注该类逻辑上的作用\",{\"1\":{\"508\":1}}],[\"不同的缓存策写在不同的cache标签里\",{\"1\":{\"478\":1}}],[\"不同的用户使用不同的键缓存\",{\"1\":{\"468\":1}}],[\"不同的用户掉用key就不同\",{\"1\":{\"468\":1}}],[\"不同的位置优先级不同\",{\"1\":{\"262\":1}}],[\"不同配置相互叠加\",{\"1\":{\"264\":1}}],[\"不携带args参数\",{\"1\":{\"259\":1}}],[\"不带spring\",{\"0\":{\"245\":1}}],[\"不使用分析器\",{\"1\":{\"3474\":1}}],[\"不使用证书可能会报错\",{\"1\":{\"3292\":1}}],[\"不使用骨架创建web项目\",{\"0\":{\"2740\":1}}],[\"不使用反射\",{\"0\":{\"2256\":1}}],[\"不使用通配符泛型\",{\"0\":{\"1995\":1}}],[\"不使用泛型的缺点\",{\"0\":{\"1955\":1}}],[\"不使用\",{\"0\":{\"1843\":1}}],[\"不使用iterator遍历\",{\"1\":{\"1836\":1}}],[\"不使用javabean就只能隐藏age属性\",{\"1\":{\"1534\":1}}],[\"不使用javabean\",{\"1\":{\"1534\":1}}],[\"不使用final\",{\"1\":{\"1454\":1}}],[\"不使用时不加载\",{\"1\":{\"554\":1}}],[\"不使用spring\",{\"1\":{\"241\":1}}],[\"不使用内嵌服务器\",{\"0\":{\"134\":1}}],[\"不能选举出主节点\",{\"1\":{\"3275\":1}}],[\"不能以xml开头\",{\"1\":{\"3020\":1}}],[\"不能在多个资源使用request共享数据\",{\"1\":{\"2912\":1}}],[\"不能在main中直接调用\",{\"1\":{\"1280\":1}}],[\"不能从一个服务器通过转发访问另一台服务器\",{\"1\":{\"2904\":1}}],[\"不能打war包\",{\"1\":{\"2762\":1}}],[\"不能被浏览器直接访问的目录\",{\"1\":{\"2722\":1,\"2723\":1}}],[\"不能被static\",{\"1\":{\"1317\":1}}],[\"不能实例化\",{\"1\":{\"2647\":1}}],[\"不能实例化没用\",{\"1\":{\"1409\":1}}],[\"不能再次使用\",{\"1\":{\"2455\":1}}],[\"不能再抛了\",{\"1\":{\"1600\":1}}],[\"不能用来搜索\",{\"1\":{\"3197\":1}}],[\"不能用这个方法来获取随机元素\",{\"1\":{\"2481\":1}}],[\"不能用在创建对象上\",{\"0\":{\"2005\":1},\"1\":{\"2005\":1}}],[\"不能用在泛型类的声明上\",{\"0\":{\"2004\":1},\"1\":{\"2004\":1}}],[\"不能用在泛型方法声明上\",{\"0\":{\"2003\":1},\"1\":{\"2003\":1}}],[\"不能用基本数据类型填充\",{\"1\":{\"1964\":1}}],[\"不能向其内部添加数据\",{\"1\":{\"1992\":1}}],[\"不能互相赋值\",{\"0\":{\"1985\":1}}],[\"不能存储null的key和value\",{\"1\":{\"1915\":1}}],[\"不能保证元素的排列顺序\",{\"1\":{\"1884\":1}}],[\"不能返回true\",{\"1\":{\"1882\":1}}],[\"不能满足\",{\"1\":{\"1822\":1}}],[\"不能包裹\",{\"1\":{\"1768\":1}}],[\"不能开启子线程\",{\"1\":{\"1724\":1}}],[\"不能通过post\",{\"1\":{\"3120\":1}}],[\"不能通过调用run开始子线程\",{\"0\":{\"1724\":1}}],[\"不能通过new创建示例\",{\"1\":{\"995\":1}}],[\"不能获取用户的年龄了\",{\"1\":{\"1534\":1}}],[\"不能获取目录\",{\"1\":{\"792\":1}}],[\"不能定义一个usb父类让他们都去继承\",{\"1\":{\"1505\":1}}],[\"不能定义重名的变量\",{\"1\":{\"1073\":1}}],[\"不能把123ab或\",{\"1\":{\"1447\":1}}],[\"不能转\",{\"1\":{\"1418\":1}}],[\"不能强转\",{\"1\":{\"1415\":1,\"1446\":1}}],[\"不能同时出现\",{\"1\":{\"1387\":1}}],[\"不能继承\",{\"1\":{\"1366\":1}}],[\"不能多重继承\",{\"1\":{\"1363\":1}}],[\"不能重写\",{\"0\":{\"1350\":1}}],[\"不能有return语句返回值\",{\"1\":{\"1317\":1}}],[\"不能调用非静态的结构\",{\"1\":{\"1527\":1}}],[\"不能调用\",{\"1\":{\"1241\":1}}],[\"不能访问内层数据\",{\"1\":{\"1238\":1}}],[\"不能访问文件内容本身\",{\"1\":{\"786\":1,\"2009\":1}}],[\"不能声明范围\",{\"1\":{\"1175\":1}}],[\"不能是空字符串\",{\"1\":{\"3575\":1}}],[\"不能是基本数据类型\",{\"1\":{\"1959\":1}}],[\"不能是boolean\",{\"1\":{\"1175\":1}}],[\"不能是普通的类\",{\"1\":{\"546\":1}}],[\"不能误写成\",{\"1\":{\"1148\":1}}],[\"不能随意创建\",{\"1\":{\"998\":1,\"1004\":1}}],[\"不能递归删除\",{\"1\":{\"810\":2}}],[\"不能使用request对象来共享数据\",{\"1\":{\"2913\":1}}],[\"不能使用this关键字\",{\"1\":{\"1484\":1}}],[\"不能使用public\",{\"1\":{\"1460\":1}}],[\"不能使用原有的value进行赋值\",{\"1\":{\"1128\":3}}],[\"不能使用单引号\",{\"1\":{\"1123\":1}}],[\"不能使用双引号\",{\"1\":{\"1101\":1,\"1104\":1}}],[\"不能使用\",{\"1\":{\"739\":1,\"3291\":1,\"3322\":1}}],[\"不能处理闰秒等\",{\"1\":{\"708\":1}}],[\"不能直接demo\",{\"1\":{\"2819\":1}}],[\"不能直接\",{\"1\":{\"1969\":1}}],[\"不能直接调用空参构造将对象返回\",{\"1\":{\"514\":1}}],[\"不能直接运行mian方法\",{\"1\":{\"176\":1}}],[\"不能查看具体的日志\",{\"1\":{\"335\":1}}],[\"不能浪费了\",{\"1\":{\"289\":1}}],[\"不能持续运行\",{\"1\":{\"163\":1}}],[\"不然创建的用户毫无意义\",{\"1\":{\"3716\":1}}],[\"不然可能会报错\",{\"1\":{\"3479\":1}}],[\"不然可能出意外的bug\",{\"1\":{\"427\":1}}],[\"不然命令窗口会一闪而过\",{\"1\":{\"2703\":1}}],[\"不然还有可能会出问题\",{\"1\":{\"1344\":1}}],[\"不然无法转\",{\"1\":{\"1414\":1}}],[\"不然无法执行\",{\"1\":{\"1051\":1}}],[\"不然无法自动加载\",{\"1\":{\"138\":1}}],[\"不然只能编译不能执行\",{\"1\":{\"1045\":1}}],[\"不然会干扰测试结果\",{\"1\":{\"2875\":1}}],[\"不然会报端口占用的错误\",{\"1\":{\"2758\":1}}],[\"不然会报错\",{\"1\":{\"783\":2,\"1237\":1,\"1352\":1,\"1602\":1}}],[\"不然会多算一个1\",{\"1\":{\"2487\":1}}],[\"不然会抛出异常\",{\"1\":{\"1903\":1,\"2500\":1}}],[\"不然会编译失败\",{\"1\":{\"1046\":1}}],[\"不然会乱码\",{\"1\":{\"674\":1}}],[\"不然就报异常\",{\"1\":{\"1903\":1}}],[\"不然就报错\",{\"1\":{\"343\":1,\"2467\":1}}],[\"不然就无法编译\",{\"1\":{\"1112\":1}}],[\"不然就是采用内置父工程的版本\",{\"1\":{\"120\":1}}],[\"不要超过物理内存的\",{\"1\":{\"3504\":1}}],[\"不要使用远程挂载的存储\",{\"1\":{\"3501\":1}}],[\"不要使用\",{\"1\":{\"3501\":1}}],[\"不要再手动创建证书了\",{\"1\":{\"3326\":1}}],[\"不要再创建证书了\",{\"1\":{\"3292\":1}}],[\"不要再引入mybatis了\",{\"1\":{\"600\":1}}],[\"不要选最新的版本\",{\"1\":{\"3104\":1}}],[\"不要将这个类中的方法都放到basedao中\",{\"1\":{\"2652\":1}}],[\"不要关闭数据库连接\",{\"1\":{\"2634\":1}}],[\"不要跟类的泛型标识一样\",{\"1\":{\"1979\":1}}],[\"不要跟collection搞混了\",{\"1\":{\"927\":1,\"1941\":1}}],[\"不要用this\",{\"1\":{\"1763\":1}}],[\"不要手动调用\",{\"1\":{\"1424\":1}}],[\"不要仅为了获取其他类中某个功能而去继承\",{\"1\":{\"1362\":1}}],[\"不要给数组长度\",{\"1\":{\"1219\":1}}],[\"不要加文件后缀\",{\"1\":{\"1041\":1}}],[\"不要漏掉了异常的信息\",{\"1\":{\"646\":1}}],[\"不要覆盖掉原始操作\",{\"1\":{\"637\":1}}],[\"不要忘记将配置类和队列绑定\",{\"1\":{\"442\":1}}],[\"不要轻易添加健康指标\",{\"1\":{\"350\":1}}],[\"不要带扩展名\",{\"1\":{\"267\":1}}],[\"不要盲目创建\",{\"1\":{\"163\":1}}],[\"不要误删\",{\"1\":{\"161\":1}}],[\"不要修改这个名字\",{\"1\":{\"138\":1}}],[\"不要放入组件包\",{\"1\":{\"129\":1}}],[\"不要隐藏\",{\"1\":{\"103\":1}}],[\"不过使用db命令可以看到当前使用的仅存在于内存中的数据库\",{\"1\":{\"3578\":1}}],[\"不过mongodb\",{\"1\":{\"3566\":1}}],[\"不过es的修改并非是单线程的\",{\"1\":{\"3493\":1}}],[\"不过es8会默认会捆绑jdk\",{\"1\":{\"3286\":1,\"3317\":1}}],[\"不过es8\",{\"1\":{\"80\":1,\"81\":1,\"3114\":1}}],[\"不过完成复制的时间不一定相同\",{\"1\":{\"3444\":1}}],[\"不过node\",{\"1\":{\"3396\":1}}],[\"不过即使报错\",{\"1\":{\"3222\":1}}],[\"不过tomcat服务器或自动对session对象进行钝化和活化\",{\"1\":{\"3071\":1}}],[\"不过压缩时zip文件头里的条目顺序很重要\",{\"1\":{\"2979\":1}}],[\"不过内容不多\",{\"1\":{\"2943\":1,\"2955\":1}}],[\"不过get请求的乱码tomcat已解决了\",{\"1\":{\"2879\":1}}],[\"不过一般不这么用\",{\"1\":{\"2816\":1}}],[\"不过实际开发中\",{\"1\":{\"2636\":1}}],[\"不过jvm垃圾回收机制可以回收这些class对象\",{\"1\":{\"2278\":1}}],[\"不过这样会丢失数据\",{\"1\":{\"3276\":1}}],[\"不过这样日志那边会出现很多其他消息\",{\"1\":{\"308\":1}}],[\"不过这个继承来的private成员\",{\"1\":{\"1367\":1}}],[\"不过尽量别超过3层\",{\"1\":{\"1171\":1}}],[\"不过返回值类型是double类型的\",{\"1\":{\"766\":1}}],[\"不过该注解依然需要手写实现接口定义规则\",{\"1\":{\"539\":1}}],[\"不过是在容器初始化后实现的\",{\"1\":{\"522\":1}}],[\"不过后来springboot集成了该api\",{\"1\":{\"414\":1}}],[\"不过后续使用时会采用yaml格式的配置文件\",{\"1\":{\"98\":1}}],[\"不过开发者还是会保持\",{\"1\":{\"399\":1}}],[\"不过只给出用户名和密码可能无法连接\",{\"1\":{\"390\":1}}],[\"不过本质是列举了很多统计信息\",{\"1\":{\"352\":1}}],[\"不过可视化做的一般\",{\"1\":{\"339\":1}}],[\"不过\",{\"1\":{\"201\":1,\"987\":1,\"1987\":1}}],[\"xbqtucmjmmlu6b\",{\"1\":{\"3329\":1}}],[\"x86\",{\"1\":{\"3287\":2,\"3289\":1,\"3318\":2,\"3320\":1}}],[\"xcontenttype\",{\"1\":{\"3214\":1,\"3217\":1,\"3220\":3}}],[\"x版本以后\",{\"1\":{\"3567\":1}}],[\"x版本和elasticsearch\",{\"1\":{\"3201\":1}}],[\"x版本为主\",{\"1\":{\"80\":1,\"81\":1}}],[\"xmx\",{\"1\":{\"3503\":1}}],[\"xmx31g\",{\"1\":{\"3503\":1,\"3504\":1}}],[\"xmx1g\",{\"1\":{\"3312\":1,\"3345\":1}}],[\"xmx512m\",{\"1\":{\"3267\":1}}],[\"xmx4g\",{\"1\":{\"3267\":1,\"3312\":1,\"3345\":1,\"3503\":1}}],[\"xms\",{\"1\":{\"3503\":1}}],[\"xms31g\",{\"1\":{\"3503\":1,\"3504\":1}}],[\"xms1g\",{\"1\":{\"3312\":1,\"3345\":1}}],[\"xms512m\",{\"1\":{\"3267\":1}}],[\"xms4g\",{\"1\":{\"3267\":1,\"3312\":1,\"3345\":1,\"3503\":1}}],[\"xm\",{\"1\":{\"3141\":1,\"3142\":2,\"3159\":1,\"3160\":2}}],[\"xml现在的主要作用是作为配置文件\",{\"1\":{\"3022\":1}}],[\"xml标签名称区分大小写\",{\"1\":{\"3018\":1}}],[\"xml标签都是自定义的\",{\"1\":{\"3016\":1}}],[\"xml第一行必须定义为文档声明\",{\"1\":{\"3018\":1}}],[\"xml文档中必须有且仅有一个根标签\",{\"1\":{\"3018\":1}}],[\"xml文档的后缀名\",{\"1\":{\"3018\":1}}],[\"xml文件\",{\"1\":{\"3488\":1}}],[\"xml文件和一个classes目录\",{\"1\":{\"2996\":1}}],[\"xml文件中进行servlet的部署\",{\"1\":{\"1637\":1}}],[\"xml文件中会有如下配置\",{\"1\":{\"239\":1}}],[\"xml文件外全部删掉\",{\"1\":{\"161\":1}}],[\"xml是存储数据的\",{\"1\":{\"3016\":1}}],[\"xml是这个应用的配置文件\",{\"1\":{\"2996\":1}}],[\"xml与html的区别\",{\"0\":{\"3016\":1}}],[\"xml配置路由\",{\"0\":{\"2827\":1}}],[\"xml数据文件中\",{\"1\":{\"2525\":1}}],[\"xml示例\",{\"0\":{\"612\":1}}],[\"xml的组成部分\",{\"0\":{\"3020\":1}}],[\"xml的用途\",{\"0\":{\"3017\":1}}],[\"xml的语法严格\",{\"1\":{\"3016\":1}}],[\"xml的打包方式\",{\"0\":{\"2742\":1}}],[\"xml的功能很简单\",{\"1\":{\"513\":1}}],[\"xml的parent\",{\"0\":{\"117\":1}}],[\"xml方式声明第三方开发的bean\",{\"1\":{\"506\":1}}],[\"xml方式声明自己开发的bean\",{\"1\":{\"506\":1}}],[\"xmlschema\",{\"1\":{\"478\":1,\"506\":1,\"511\":1,\"3029\":1,\"3030\":1}}],[\"xmlns=\",{\"1\":{\"506\":1,\"511\":1,\"3029\":1,\"3030\":1}}],[\"xmlns\",{\"1\":{\"478\":1,\"506\":1,\"511\":2,\"3029\":1,\"3030\":2}}],[\"xml每次更新需要手动compile方可生效\",{\"1\":{\"284\":1}}],[\"xml对所有项目的依赖进行统一管理\",{\"1\":{\"115\":1}}],[\"xml和本地库\",{\"1\":{\"574\":1}}],[\"xml和创建启动类\",{\"1\":{\"106\":1}}],[\"xml和启动类需要手动进行创建\",{\"1\":{\"106\":1}}],[\"xml中多余的内容\",{\"0\":{\"2738\":1}}],[\"xml中依赖坐标对应的jar包\",{\"1\":{\"2727\":1}}],[\"xml中导入\",{\"1\":{\"355\":1}}],[\"xml中对spring\",{\"1\":{\"134\":1}}],[\"xml中的配置项\",{\"1\":{\"125\":1}}],[\"xml中的spring\",{\"1\":{\"100\":1}}],[\"xml中指定某个依赖的版本\",{\"1\":{\"120\":1}}],[\"xml中\",{\"1\":{\"116\":1}}],[\"xml中进行设置\",{\"1\":{\"102\":1}}],[\"xml\",{\"0\":{\"100\":1,\"223\":1,\"478\":1,\"506\":1,\"3014\":1,\"3015\":1},\"1\":{\"11\":1,\"133\":1,\"307\":1,\"308\":1,\"477\":2,\"478\":2,\"506\":1,\"511\":1,\"2705\":1,\"2716\":1,\"2722\":1,\"2734\":1,\"2743\":1,\"2933\":2,\"3015\":1,\"3018\":1,\"3019\":1,\"3020\":1,\"3027\":1,\"3029\":3,\"3030\":3,\"3073\":1,\"3488\":1}}],[\"x更强大\",{\"1\":{\"3114\":1}}],[\"xpack\",{\"1\":{\"3110\":3,\"3307\":4,\"3327\":4,\"3337\":4,\"3355\":4}}],[\"xhtml+xml\",{\"1\":{\"2849\":1}}],[\"xiaofei\",{\"1\":{\"2657\":1}}],[\"xyz\",{\"1\":{\"2139\":1}}],[\"x以后也是基于注解的\",{\"1\":{\"1636\":1}}],[\"x<6\",{\"1\":{\"1152\":1}}],[\"x64\",{\"1\":{\"1027\":1}}],[\"x+0\",{\"1\":{\"764\":1}}],[\"x插件\",{\"1\":{\"588\":1}}],[\"xsd是文件名\",{\"1\":{\"3030\":1}}],[\"xsd=\",{\"1\":{\"3029\":1}}],[\"xsd\",{\"1\":{\"478\":1,\"506\":1,\"511\":2,\"3029\":17,\"3030\":1}}],[\"xsi\",{\"1\":{\"478\":1,\"506\":1,\"511\":1,\"3030\":1}}],[\"xsi=\",{\"1\":{\"478\":1,\"506\":1,\"511\":1,\"3030\":1}}],[\"xnit99mzkgkjstx\",{\"1\":{\"416\":1}}],[\"x的新特性\",{\"1\":{\"3114\":1}}],[\"x的最新版客户端依赖\",{\"1\":{\"413\":1}}],[\"x的api\",{\"1\":{\"80\":1,\"81\":1}}],[\"xxobject\",{\"1\":{\"2147\":1}}],[\"xxx代表数据类型\",{\"1\":{\"2591\":1}}],[\"xxxevent等\",{\"1\":{\"1531\":1}}],[\"xxxyyyzzz\",{\"1\":{\"1083\":3,\"1337\":1}}],[\"xxxoperator\",{\"0\":{\"982\":1}}],[\"xxxpredicate\",{\"0\":{\"981\":1}}],[\"xxxfucntion\",{\"0\":{\"980\":1}}],[\"xxxsupplier\",{\"0\":{\"979\":1}}],[\"xxxconsumer\",{\"0\":{\"978\":1}}],[\"xxx为基本数据类型\",{\"1\":{\"888\":1,\"1009\":1}}],[\"xxx是数据类型\",{\"1\":{\"2569\":1,\"2570\":1}}],[\"xxx是基本数据类型\",{\"1\":{\"776\":1}}],[\"xxx是某种包装类\",{\"1\":{\"775\":1}}],[\"xxx是任意包装类\",{\"1\":{\"773\":1}}],[\"xxxvalue\",{\"0\":{\"772\":1}}],[\"xxx\",{\"0\":{\"671\":1},\"1\":{\"703\":1,\"773\":2,\"775\":1,\"776\":1,\"1083\":1,\"1149\":1,\"1342\":1,\"1345\":1,\"1445\":4,\"2570\":1,\"2591\":1,\"2610\":1}}],[\"xxx指的是redis的数据类型\",{\"1\":{\"379\":1}}],[\"xxxapplicationtests\",{\"1\":{\"226\":1}}],[\"xxxapplication\",{\"0\":{\"127\":1}}],[\"xx\",{\"1\":{\"274\":1}}],[\"x已经更新了一年多了\",{\"1\":{\"80\":1,\"81\":1}}],[\"x\",{\"0\":{\"572\":1,\"590\":1,\"613\":1,\"614\":1,\"3204\":1,\"3207\":1,\"3519\":1,\"3520\":1,\"3521\":1,\"3522\":2,\"3772\":1},\"1\":{\"80\":2,\"81\":2,\"414\":1,\"418\":1,\"574\":2,\"575\":1,\"576\":1,\"577\":1,\"588\":2,\"746\":3,\"1428\":6,\"1910\":1,\"2081\":1,\"2570\":1,\"3114\":1,\"3201\":1,\"3293\":1,\"3361\":1,\"3548\":9,\"3554\":1}}],[\"8也可以写成小写\",{\"1\":{\"2877\":1}}],[\"855ed8bca863\",{\"1\":{\"3712\":1}}],[\"85\",{\"1\":{\"2674\":1}}],[\"8523015e+5\",{\"1\":{\"147\":1}}],[\"8类库的一部分\",{\"1\":{\"2496\":1}}],[\"87\",{\"1\":{\"2474\":2}}],[\"878\",{\"1\":{\"721\":3}}],[\"8的原理\",{\"0\":{\"2112\":1}}],[\"8的由来\",{\"0\":{\"2111\":1}}],[\"8和utf\",{\"1\":{\"2111\":1}}],[\"8就是每次8个位传输数据\",{\"1\":{\"2111\":1}}],[\"8kb\",{\"1\":{\"2074\":1}}],[\"8bit\",{\"1\":{\"2023\":1}}],[\"8中user\",{\"1\":{\"2015\":1}}],[\"8中引入的java\",{\"1\":{\"709\":1}}],[\"89\",{\"1\":{\"1935\":1,\"1955\":1}}],[\"8且当前数组的长度\",{\"1\":{\"1926\":1}}],[\"8底层的数组是\",{\"1\":{\"1926\":1}}],[\"8之后\",{\"1\":{\"1669\":1}}],[\"8之后的重复注解\",{\"0\":{\"1668\":1}}],[\"8之前\",{\"1\":{\"1667\":1}}],[\"8之前的重复注解\",{\"0\":{\"1667\":1}}],[\"8对注解处理提供了两点改进\",{\"1\":{\"1665\":1}}],[\"888\",{\"1\":{\"3590\":1}}],[\"8888\",{\"1\":{\"220\":1}}],[\"8859\",{\"1\":{\"2876\":2}}],[\"88\",{\"1\":{\"1368\":1,\"1955\":1}}],[\"8u321\",{\"1\":{\"1027\":1}}],[\"8种基本数据类型\",{\"1\":{\"672\":1}}],[\"8编码的字符流\",{\"1\":{\"2095\":1}}],[\"8编码\",{\"1\":{\"575\":1}}],[\"8<\",{\"1\":{\"308\":4}}],[\"82340\",{\"1\":{\"2621\":1}}],[\"82\",{\"1\":{\"272\":1}}],[\"805z\",{\"1\":{\"3673\":1}}],[\"8021\",{\"1\":{\"439\":1}}],[\"8070099\",{\"1\":{\"423\":1}}],[\"8000\",{\"1\":{\"324\":1,\"326\":1,\"3191\":2}}],[\"80\",{\"1\":{\"272\":1,\"617\":1,\"2238\":1,\"2750\":1}}],[\"8080199\",{\"1\":{\"3124\":1,\"3283\":1,\"3381\":1}}],[\"8080可以找到要访问的tomcat\",{\"1\":{\"2785\":1}}],[\"8080`\",{\"1\":{\"2785\":1}}],[\"8080\",{\"1\":{\"111\":1,\"474\":2,\"2237\":1,\"2711\":2,\"2715\":2,\"2716\":1,\"2758\":1,\"2781\":1,\"2785\":1,\"2822\":1,\"2823\":1,\"2824\":1,\"2825\":1,\"2846\":2,\"2849\":1,\"2888\":1,\"2890\":1,\"2903\":1,\"2911\":1}}],[\"8192\",{\"1\":{\"2076\":1,\"2077\":1,\"2078\":1,\"2079\":1}}],[\"81\",{\"1\":{\"139\":1,\"272\":1}}],[\"8\",{\"0\":{\"336\":1,\"643\":1,\"644\":1,\"645\":1,\"646\":1,\"647\":1,\"697\":1,\"767\":1,\"795\":1,\"831\":1,\"844\":1,\"859\":1,\"875\":1,\"899\":1,\"912\":1,\"937\":1,\"952\":1,\"966\":1,\"1136\":1,\"1165\":1,\"1228\":1,\"1243\":1,\"1262\":1,\"1323\":1,\"1409\":1,\"1421\":1,\"1447\":1,\"1514\":1,\"1594\":1,\"1848\":1,\"1894\":1,\"1895\":1,\"1896\":1,\"1897\":1,\"2006\":1,\"2020\":1,\"2029\":1,\"2042\":1,\"2072\":1,\"2087\":1,\"2114\":1,\"2141\":2,\"2159\":1,\"2484\":1,\"2658\":1,\"2897\":1,\"2969\":1,\"3055\":1,\"3056\":1,\"3057\":1,\"3072\":1,\"3073\":1,\"3074\":1,\"3114\":1,\"3207\":1,\"3371\":1},\"1\":{\"80\":2,\"81\":2,\"246\":2,\"308\":1,\"331\":1,\"478\":1,\"506\":1,\"511\":1,\"709\":1,\"725\":1,\"751\":2,\"757\":2,\"769\":1,\"884\":2,\"892\":2,\"893\":2,\"894\":3,\"895\":6,\"896\":4,\"1017\":1,\"1029\":1,\"1056\":1,\"1061\":2,\"1103\":2,\"1179\":1,\"1180\":1,\"1423\":1,\"1438\":1,\"1439\":1,\"1638\":2,\"1893\":1,\"1903\":1,\"1912\":1,\"2010\":1,\"2023\":1,\"2024\":1,\"2025\":1,\"2027\":1,\"2028\":1,\"2030\":1,\"2074\":1,\"2089\":1,\"2095\":1,\"2096\":1,\"2099\":1,\"2101\":1,\"2106\":1,\"2109\":1,\"2110\":1,\"2111\":2,\"2112\":1,\"2113\":1,\"2386\":1,\"2482\":1,\"2487\":1,\"2488\":1,\"2537\":1,\"2539\":1,\"2665\":1,\"2666\":1,\"2674\":2,\"2700\":2,\"2731\":1,\"2751\":1,\"2875\":1,\"2877\":3,\"2878\":1,\"2880\":1,\"2889\":1,\"2896\":2,\"2899\":1,\"2905\":1,\"3019\":1,\"3020\":2,\"3027\":1,\"3054\":3,\"3094\":1,\"3104\":2,\"3108\":2,\"3114\":1,\"3149\":1,\"3153\":1,\"3179\":1,\"3191\":2,\"3201\":1,\"3205\":2,\"3262\":2,\"3285\":4,\"3287\":1,\"3288\":1,\"3289\":1,\"3291\":1,\"3296\":3,\"3297\":1,\"3298\":1,\"3300\":2,\"3301\":1,\"3304\":1,\"3305\":1,\"3310\":1,\"3315\":1,\"3318\":1,\"3319\":1,\"3320\":1,\"3322\":1,\"3324\":2,\"3332\":2,\"3473\":1,\"3479\":3,\"3488\":1}}],[\"本机地址\",{\"1\":{\"3269\":1,\"3270\":1,\"3271\":1}}],[\"本机ip\",{\"0\":{\"2183\":1}}],[\"本章内容\",{\"1\":{\"2524\":1}}],[\"本身扩展性很好\",{\"1\":{\"3091\":1}}],[\"本身也是个xml文档\",{\"1\":{\"3029\":1}}],[\"本身毫无意义\",{\"1\":{\"2385\":1}}],[\"本身并不提供承装对象的能力\",{\"1\":{\"1837\":1}}],[\"本层循环\",{\"1\":{\"1197\":1}}],[\"本次启动是为了获取certs证书和elasticsearch\",{\"1\":{\"3335\":1}}],[\"本次循环\",{\"1\":{\"1197\":1}}],[\"本次案例仅考虑浏览器向服务器发送请求接受响应\",{\"1\":{\"614\":1}}],[\"本质上是一个分布式数据库\",{\"1\":{\"3093\":1}}],[\"本质上web服务器是一个应用程序\",{\"1\":{\"2694\":1}}],[\"本质上就是lambda表达式\",{\"1\":{\"2396\":1}}],[\"本质\",{\"1\":{\"2642\":1,\"3022\":1}}],[\"本质还是上面的语法总结\",{\"1\":{\"2367\":1}}],[\"本质还是比较的基本数据类型\",{\"1\":{\"740\":1}}],[\"本质是查询的是\",{\"1\":{\"3666\":1}}],[\"本质是安装了服务器软件的计算机\",{\"1\":{\"2694\":1}}],[\"本质是个常量\",{\"0\":{\"1645\":1}}],[\"本质是一套java书写规范\",{\"1\":{\"1530\":1}}],[\"本质是依靠maven相互之间的依赖\",{\"1\":{\"160\":1}}],[\"本质就是一个文件夹\",{\"1\":{\"1334\":1}}],[\"本地ip肯定是不行的\",{\"1\":{\"3678\":1}}],[\"本地端口必须在\",{\"1\":{\"2233\":1}}],[\"本地回环地址\",{\"1\":{\"2183\":1}}],[\"本地格式\",{\"0\":{\"734\":1}}],[\"本地日期和时间\",{\"1\":{\"716\":1}}],[\"本地日期\",{\"1\":{\"714\":1}}],[\"本地日期时间\",{\"1\":{\"709\":1}}],[\"本地时间\",{\"0\":{\"712\":1},\"1\":{\"709\":1,\"715\":1}}],[\"本地缓存\",{\"1\":{\"488\":1}}],[\"本地\",{\"1\":{\"250\":1,\"3026\":1}}],[\"本操作可以在idea环境下执行\",{\"1\":{\"236\":1}}],[\"本人都经过验证了\",{\"1\":{\"84\":1,\"85\":1}}],[\"本笔记是以6\",{\"1\":{\"84\":1,\"85\":1}}],[\"本笔记所有场景所使用的版本均为\",{\"1\":{\"80\":1,\"81\":1}}],[\"本笔记以\",{\"1\":{\"80\":1,\"81\":1}}],[\"本项目\",{\"1\":{\"49\":1}}],[\"内嵌数组的形式来存储\",{\"1\":{\"3541\":1}}],[\"内嵌tomcat\",{\"0\":{\"132\":1}}],[\"内网ip\",{\"1\":{\"3335\":1}}],[\"内循环改为如下代码\",{\"1\":{\"2055\":1}}],[\"内循环是用来读取cbuf数组中的字符\",{\"1\":{\"2054\":1}}],[\"内部角色\",{\"1\":{\"3703\":1}}],[\"内部dtd\",{\"1\":{\"3026\":1}}],[\"内部迭代\",{\"0\":{\"2485\":1}}],[\"内部缓冲区数组默认大小\",{\"1\":{\"2076\":1,\"2078\":1,\"2079\":1}}],[\"内部结构\",{\"1\":{\"1959\":1}}],[\"内部声明了node类型的first\",{\"1\":{\"1872\":1}}],[\"内部可以有输出语句\",{\"1\":{\"1527\":1,\"1528\":1}}],[\"内部创建类的对象\",{\"1\":{\"1488\":2}}],[\"内部列的作用\",{\"0\":{\"1461\":1}}],[\"内部类仍然是一个独立的类\",{\"1\":{\"1460\":1}}],[\"内部类对象\",{\"1\":{\"1455\":1}}],[\"内部类的作用\",{\"0\":{\"1450\":1}}],[\"内部类\",{\"0\":{\"1448\":1},\"1\":{\"1310\":1,\"1449\":1,\"1455\":1}}],[\"内\",{\"1\":{\"1273\":1}}],[\"内层元素的初始化值为\",{\"1\":{\"1241\":2}}],[\"内层元素的个数\",{\"1\":{\"1239\":1}}],[\"内层3个元素\",{\"1\":{\"1233\":1}}],[\"内层数组的长度\",{\"1\":{\"1239\":1}}],[\"内层数组的长度不限\",{\"1\":{\"1237\":1}}],[\"内层数组未初始化\",{\"1\":{\"1238\":1}}],[\"内层数组只声明\",{\"1\":{\"1234\":1}}],[\"内层数组元素\",{\"1\":{\"1230\":1}}],[\"内层数组\",{\"1\":{\"1230\":1}}],[\"内层循环控制列数\",{\"1\":{\"1200\":1}}],[\"内层循环需要执行n次\",{\"1\":{\"1200\":1}}],[\"内层循环结构遍历一遍\",{\"1\":{\"1200\":1}}],[\"内定义\",{\"1\":{\"1072\":1}}],[\"内存回收\",{\"1\":{\"3532\":1}}],[\"内存分片策略\",{\"0\":{\"3504\":1}}],[\"内存和\",{\"1\":{\"3456\":1}}],[\"内存索引缓存\",{\"1\":{\"3450\":1}}],[\"内存缓存被清空\",{\"1\":{\"3449\":1}}],[\"内存释放或者服务器关闭的时候\",{\"1\":{\"2802\":1}}],[\"内存泄露积累多了就容易导致内存溢出\",{\"1\":{\"1706\":1}}],[\"内存溢出和泄露\",{\"0\":{\"1706\":1}}],[\"内存空间的基本分类\",{\"0\":{\"1701\":1}}],[\"内存空间和数据都消失\",{\"1\":{\"1699\":1}}],[\"内存储存的数据类型\",{\"0\":{\"1700\":1}}],[\"内存的生命周期\",{\"0\":{\"1699\":1}}],[\"内存是容器\",{\"1\":{\"1704\":1}}],[\"内存是临时性的储存\",{\"1\":{\"1698\":1}}],[\"内存是否够用等\",{\"1\":{\"312\":1}}],[\"内存条==\",{\"1\":{\"1699\":1}}],[\"内存条通电后产生的存储空间\",{\"1\":{\"1698\":1}}],[\"内存条的空间\",{\"0\":{\"1698\":1}}],[\"内存存在的意义\",{\"1\":{\"1696\":1}}],[\"内存地址\",{\"1\":{\"1700\":1}}],[\"内存地址空间\",{\"1\":{\"1687\":1}}],[\"内存地址就已经确定了\",{\"1\":{\"1243\":1}}],[\"内存区域\",{\"0\":{\"1546\":1}}],[\"内存解析\",{\"0\":{\"1544\":1}}],[\"内存中的缓冲将被清除\",{\"1\":{\"3527\":1}}],[\"内存中的这个类就是class的一个实例\",{\"1\":{\"2262\":1}}],[\"内存中的数据向内存中刷写时可能会遇到突发状况\",{\"1\":{\"3455\":1}}],[\"内存中的数据\",{\"1\":{\"1704\":1}}],[\"内存中的类\",{\"1\":{\"332\":1}}],[\"内存中储存的是变量的值\",{\"1\":{\"1703\":1}}],[\"内存中实际上是加载了子类特有的属性和方法的\",{\"1\":{\"1410\":1}}],[\"内存结构\",{\"0\":{\"1225\":1}}],[\"内存图示\",{\"0\":{\"1129\":1,\"1132\":1}}],[\"内存\",{\"0\":{\"1695\":1,\"1697\":1,\"1704\":1,\"3502\":1},\"1\":{\"313\":1,\"329\":1,\"1015\":1,\"2022\":2,\"3449\":3,\"3507\":1,\"3516\":1}}],[\"内置分析器\",{\"0\":{\"3465\":1}}],[\"内置超级用户​​elastic​​\",{\"1\":{\"3325\":1}}],[\"内置类库\",{\"1\":{\"3289\":1,\"3320\":1}}],[\"内置jdk\",{\"1\":{\"3289\":1,\"3320\":1}}],[\"内置jdk目录\",{\"1\":{\"3106\":1}}],[\"内置functional\",{\"0\":{\"2391\":1}}],[\"内置函数式接口\",{\"0\":{\"2386\":1}}],[\"内置函数>反射类\",{\"1\":{\"2270\":1}}],[\"内置函数>io类\",{\"1\":{\"2019\":1,\"2041\":1,\"2044\":1}}],[\"内置函数>list\",{\"1\":{\"1878\":1,\"1917\":1}}],[\"内置函数>collection+\",{\"1\":{\"1832\":1,\"1838\":1,\"1888\":1,\"1941\":1}}],[\"内置的\",{\"1\":{\"3623\":1}}],[\"内置的分词器对中文的处理有些问题\",{\"1\":{\"3475\":1}}],[\"内置的maven不方便修改配置\",{\"1\":{\"574\":1}}],[\"内置的一个定时器工具类\",{\"1\":{\"491\":1}}],[\"内置cache接口的用法以及缓存的工作机制\",{\"1\":{\"469\":1}}],[\"内置tomcat\",{\"1\":{\"159\":1}}],[\"内置服务器\",{\"1\":{\"92\":1}}],[\"内置资源\",{\"1\":{\"10\":1}}],[\"内容参考如下\",{\"1\":{\"3558\":1}}],[\"内容管理或者博客平台\",{\"1\":{\"3551\":1}}],[\"内容被写入一个新段\",{\"1\":{\"3527\":1}}],[\"内容\",{\"1\":{\"3028\":1}}],[\"内容如下\",{\"1\":{\"2867\":1,\"2991\":1,\"3674\":1}}],[\"内容和长度都不可变\",{\"1\":{\"692\":1}}],[\"内容既多又复杂\",{\"1\":{\"557\":1}}],[\"内容说明\",{\"1\":{\"84\":1,\"85\":1,\"572\":1}}],[\"内容正在迁移中\",{\"1\":{\"60\":1,\"61\":1,\"62\":1,\"63\":1}}],[\"occurred\",{\"1\":{\"3718\":1}}],[\"ocnauto\",{\"1\":{\"2674\":1}}],[\"owner\",{\"1\":{\"3355\":1}}],[\"oxhsg\",{\"1\":{\"3329\":1}}],[\"o7k19ygbbr3lft2kiqat\",{\"1\":{\"3135\":1,\"3142\":1,\"3160\":1}}],[\"oa\",{\"1\":{\"3108\":1}}],[\"ois\",{\"1\":{\"2146\":1,\"2148\":1,\"2152\":3,\"2157\":4}}],[\"oos\",{\"1\":{\"2146\":1,\"2147\":1,\"2149\":1,\"2151\":4,\"2156\":6}}],[\"oop\",{\"1\":{\"1250\":1}}],[\"o技术是非常实用的技术\",{\"1\":{\"2021\":1}}],[\"o是input\",{\"1\":{\"2021\":1}}],[\"osi参考模型\",{\"1\":{\"2174\":1}}],[\"osw\",{\"1\":{\"2106\":3}}],[\"osversion\",{\"1\":{\"884\":2}}],[\"os\",{\"1\":{\"884\":2,\"1034\":1,\"2894\":2,\"2895\":2,\"3449\":5,\"3450\":2,\"3504\":1}}],[\"osname\",{\"1\":{\"884\":2}}],[\"o2\",{\"1\":{\"752\":1,\"754\":1,\"756\":3,\"757\":3,\"893\":1,\"932\":2,\"1906\":3,\"1936\":3,\"2362\":2,\"2377\":6}}],[\"o1>o2\",{\"1\":{\"893\":1}}],[\"o1<o2\",{\"1\":{\"893\":1}}],[\"o1\",{\"1\":{\"752\":1,\"754\":1,\"756\":3,\"757\":4,\"893\":1,\"932\":2,\"1466\":2,\"1906\":3,\"1936\":3,\"2362\":2,\"2377\":6}}],[\"oldval\",{\"1\":{\"938\":1}}],[\"oldchar\",{\"1\":{\"677\":2}}],[\"olleh\",{\"1\":{\"704\":1}}],[\"o\",{\"1\":{\"673\":3,\"743\":1,\"749\":4,\"864\":2,\"910\":1,\"915\":1,\"936\":1,\"948\":1,\"949\":1,\"968\":1,\"1420\":2,\"1458\":2,\"1688\":1,\"1905\":3,\"1993\":2,\"2902\":1,\"3391\":1,\"3441\":1,\"3501\":1,\"3515\":1}}],[\"ove\",{\"1\":{\"669\":1}}],[\"overflow\",{\"1\":{\"3094\":1}}],[\"overflowtodisk=\",{\"1\":{\"478\":2}}],[\"overflowtodisk\",{\"1\":{\"478\":1}}],[\"overload\",{\"0\":{\"1285\":1}}],[\"override\",{\"0\":{\"1369\":1},\"1\":{\"347\":1,\"350\":1,\"452\":2,\"471\":2,\"493\":1,\"514\":3,\"523\":1,\"525\":1,\"527\":1,\"530\":1,\"536\":1,\"636\":5,\"749\":2,\"757\":1,\"893\":1,\"1621\":1,\"1630\":1,\"1637\":1,\"1638\":1,\"1650\":1,\"1654\":2,\"1728\":1,\"1729\":1,\"1737\":1,\"1740\":1,\"1760\":1,\"1768\":1,\"1784\":1,\"1795\":2,\"1804\":1,\"1810\":1,\"1817\":1,\"1936\":1,\"2264\":2,\"2328\":1,\"2329\":1,\"2343\":1,\"2369\":1,\"2371\":1,\"2377\":1,\"2779\":1,\"2812\":2,\"2814\":1,\"2846\":2,\"2862\":2,\"2872\":2,\"2873\":2,\"2888\":1,\"2903\":2,\"2909\":1,\"2910\":1,\"2945\":3}}],[\"objname2\",{\"1\":{\"1626\":1}}],[\"objname1\",{\"1\":{\"1626\":2}}],[\"obj和person是同属一个类的对象\",{\"1\":{\"1428\":1}}],[\"obj是null\",{\"1\":{\"1428\":1}}],[\"obj\",{\"1\":{\"652\":1,\"672\":1,\"744\":1,\"745\":3,\"864\":1,\"865\":1,\"874\":1,\"912\":1,\"917\":2,\"971\":2,\"1419\":2,\"1428\":5,\"1579\":2,\"1626\":1,\"1652\":1,\"1760\":1,\"1763\":1,\"1768\":1,\"1848\":2,\"1851\":2,\"1885\":1,\"1887\":1,\"1935\":2,\"1995\":2,\"1996\":2,\"2148\":2,\"2152\":2,\"2252\":2,\"2309\":1,\"2310\":1,\"2314\":1,\"2342\":5,\"2343\":6,\"2349\":1,\"3086\":1}}],[\"objectid\",{\"1\":{\"3548\":1,\"3587\":1,\"3667\":1,\"3682\":1}}],[\"objectinputstream\",{\"1\":{\"2146\":2,\"2152\":2,\"2157\":2}}],[\"objectmapper是jackson依赖里的类\",{\"1\":{\"3216\":1}}],[\"objectmapper\",{\"0\":{\"3216\":1},\"1\":{\"3214\":2}}],[\"objectoutputstream\",{\"1\":{\"2146\":2,\"2151\":2,\"2156\":2}}],[\"object>\",{\"1\":{\"1971\":1}}],[\"object的主要结构如下\",{\"1\":{\"1423\":1}}],[\"object可以强转成woman\",{\"1\":{\"1419\":1}}],[\"object引用的woman子类\",{\"1\":{\"1419\":1}}],[\"object类无属性且构造器是空参构造器\",{\"1\":{\"1424\":1}}],[\"object类的功能\",{\"0\":{\"1424\":1}}],[\"object类是所有java类的根父类\",{\"1\":{\"1423\":1}}],[\"object类中声明wait\",{\"1\":{\"1803\":1}}],[\"object类中\",{\"1\":{\"1427\":1,\"1802\":1}}],[\"object类中的功能\",{\"1\":{\"1423\":1}}],[\"object类中的getclass\",{\"1\":{\"1350\":1}}],[\"object类中空参的构造器为止\",{\"1\":{\"1392\":1}}],[\"object类声明的功能\",{\"1\":{\"1364\":1}}],[\"object类之外\",{\"1\":{\"1364\":1}}],[\"object类\",{\"0\":{\"1364\":1,\"1422\":1},\"1\":{\"1364\":2,\"1423\":1,\"2128\":1}}],[\"object类型\",{\"1\":{\"864\":1,\"1959\":1}}],[\"object是所有类的父类\",{\"1\":{\"841\":1}}],[\"object\",{\"0\":{\"2594\":1},\"1\":{\"379\":2,\"646\":2,\"652\":1,\"672\":1,\"745\":2,\"754\":2,\"756\":2,\"841\":1,\"864\":2,\"865\":2,\"874\":3,\"877\":1,\"890\":1,\"910\":1,\"912\":1,\"915\":1,\"917\":2,\"932\":2,\"934\":1,\"935\":1,\"936\":1,\"948\":1,\"949\":1,\"961\":1,\"963\":1,\"964\":1,\"965\":1,\"968\":1,\"971\":1,\"1250\":1,\"1255\":1,\"1419\":2,\"1420\":1,\"1428\":1,\"1429\":1,\"1458\":2,\"1579\":1,\"1652\":1,\"1680\":2,\"1747\":1,\"1760\":2,\"1763\":2,\"1768\":2,\"1810\":1,\"1821\":1,\"1848\":1,\"1851\":1,\"1885\":1,\"1887\":1,\"1905\":1,\"1906\":2,\"1935\":1,\"1936\":2,\"1955\":1,\"1969\":1,\"1993\":1,\"1995\":1,\"1996\":1,\"2146\":2,\"2148\":1,\"2151\":1,\"2152\":2,\"2156\":1,\"2157\":1,\"2242\":1,\"2247\":1,\"2252\":3,\"2253\":1,\"2258\":1,\"2260\":1,\"2264\":2,\"2309\":2,\"2310\":2,\"2311\":2,\"2314\":3,\"2338\":1,\"2340\":3,\"2342\":2,\"2343\":6,\"2349\":4,\"2370\":1,\"2526\":1,\"2546\":1,\"2581\":1,\"2600\":2,\"2603\":2,\"2634\":1,\"2642\":1,\"2653\":6,\"2683\":8,\"2684\":1,\"2902\":2,\"2903\":1,\"2938\":2,\"3064\":1,\"3065\":1,\"3197\":1,\"3547\":1,\"3670\":1,\"3673\":2}}],[\"orm对象\",{\"1\":{\"2655\":1,\"2656\":1}}],[\"orm编程思想\",{\"0\":{\"2594\":1}}],[\"orelse\",{\"0\":{\"2508\":1},\"1\":{\"2508\":2}}],[\"orelse来防止空指针\",{\"1\":{\"2497\":1}}],[\"oracle\",{\"1\":{\"2351\":1,\"2674\":2}}],[\"oracle占用端口1521等\",{\"1\":{\"2186\":1}}],[\"oracle等\",{\"1\":{\"1401\":1}}],[\"origin\",{\"1\":{\"3268\":1,\"3269\":1,\"3270\":1,\"3271\":1,\"3337\":1}}],[\"original\",{\"1\":{\"895\":1}}],[\"orient\",{\"0\":{\"2347\":1}}],[\"oriented\",{\"1\":{\"1250\":2}}],[\"or\",{\"1\":{\"619\":1,\"1294\":1,\"2559\":4,\"2683\":1,\"3585\":1,\"3605\":1,\"3621\":1,\"3630\":1}}],[\"order<>\",{\"1\":{\"1968\":1}}],[\"order<string>\",{\"1\":{\"1968\":1}}],[\"order1\",{\"1\":{\"1968\":2}}],[\"ordere\",{\"1\":{\"1967\":7}}],[\"ordered\",{\"1\":{\"567\":1,\"3585\":1,\"3586\":1,\"3589\":1}}],[\"orderid\",{\"1\":{\"1967\":4}}],[\"ordername\",{\"1\":{\"1967\":4}}],[\"order\",{\"1\":{\"452\":2,\"455\":2,\"1489\":5,\"1769\":8,\"1967\":2,\"1968\":3,\"2582\":2,\"3185\":1}}],[\"org\",{\"1\":{\"244\":1,\"246\":1,\"406\":2,\"407\":2,\"418\":14,\"478\":2,\"506\":4,\"511\":7,\"525\":1,\"624\":1,\"868\":2,\"2681\":3,\"3029\":1,\"3030\":1,\"3210\":2}}],[\"ok值为1\",{\"1\":{\"3664\":1}}],[\"ok\",{\"1\":{\"446\":1,\"667\":2,\"1117\":1,\"1556\":3,\"2064\":1,\"2206\":1,\"3664\":1,\"3670\":1,\"3673\":1,\"3674\":1,\"3700\":1,\"3701\":1,\"3707\":1,\"3713\":1,\"3714\":1,\"3715\":1}}],[\"ofnullable\",{\"0\":{\"2502\":1},\"1\":{\"2502\":3,\"2504\":1,\"2505\":1,\"2507\":1,\"2508\":1}}],[\"ofpattern\",{\"1\":{\"735\":1,\"736\":1,\"737\":1}}],[\"oflocalizedtime\",{\"1\":{\"734\":1}}],[\"oflocalizeddate\",{\"1\":{\"734\":1}}],[\"oflocalizeddatetime\",{\"1\":{\"734\":2}}],[\"ofepochmilli\",{\"0\":{\"727\":1},\"1\":{\"727\":2}}],[\"ofhours\",{\"1\":{\"725\":1}}],[\"of\",{\"0\":{\"718\":1,\"2500\":1},\"1\":{\"349\":1,\"398\":1,\"423\":2,\"718\":6,\"1059\":2,\"2448\":4,\"2500\":2,\"2683\":1,\"3124\":2,\"3278\":4,\"3279\":4,\"3280\":4,\"3283\":2,\"3298\":1,\"3328\":1,\"3348\":1,\"3355\":5,\"3378\":4,\"3379\":2,\"3380\":4,\"3381\":2,\"3384\":1,\"3387\":1,\"3391\":1,\"3393\":1,\"3400\":2,\"3518\":1,\"3527\":1,\"3585\":1}}],[\"off和len\",{\"1\":{\"818\":1}}],[\"offsetdatetime\",{\"1\":{\"725\":2}}],[\"offset\",{\"1\":{\"700\":1,\"703\":2,\"725\":1,\"2234\":1,\"3473\":8,\"3476\":8,\"3480\":4,\"3482\":10,\"3483\":6,\"3485\":10,\"3489\":4}}],[\"off\",{\"1\":{\"308\":2,\"818\":2,\"824\":3,\"825\":3}}],[\"only\",{\"1\":{\"3307\":1,\"3327\":1,\"3355\":2}}],[\"onetest\",{\"1\":{\"1757\":1}}],[\"one\",{\"1\":{\"778\":2,\"1728\":1,\"3239\":3,\"3240\":1}}],[\"ongodb的认证机制有2种\",{\"1\":{\"392\":1}}],[\"onmismatch>\",{\"1\":{\"308\":3}}],[\"onmatch>\",{\"1\":{\"308\":3}}],[\"on\",{\"1\":{\"272\":2,\"2750\":2,\"2820\":1,\"3110\":1,\"3267\":1,\"3314\":1,\"3328\":2,\"3347\":1,\"3355\":5,\"3413\":1,\"3503\":1}}],[\"operationtime\",{\"1\":{\"3670\":1,\"3673\":1,\"3674\":1,\"3700\":1,\"3701\":1}}],[\"opeitons\",{\"1\":{\"3632\":1}}],[\"openssl\",{\"1\":{\"3726\":1}}],[\"openstream\",{\"1\":{\"2240\":1}}],[\"open\",{\"1\":{\"2750\":1}}],[\"openconnection\",{\"1\":{\"2241\":2}}],[\"openoption\",{\"1\":{\"2168\":3}}],[\"openjdk\",{\"1\":{\"1035\":2}}],[\"openfeign\",{\"1\":{\"10\":1,\"11\":1}}],[\"optimedurabledate\",{\"1\":{\"3673\":1}}],[\"optimedurable\",{\"1\":{\"3673\":1}}],[\"optimedate\",{\"1\":{\"3670\":1,\"3673\":1}}],[\"optime\",{\"1\":{\"3670\":1,\"3673\":1}}],[\"optimes\",{\"1\":{\"3670\":1}}],[\"options里有很多选项\",{\"1\":{\"3595\":1}}],[\"options选项\",{\"0\":{\"3595\":1}}],[\"options文件是用来配置内存的\",{\"1\":{\"3312\":1,\"3345\":1,\"3503\":1}}],[\"options\",{\"0\":{\"3356\":1},\"1\":{\"2811\":2,\"3267\":4,\"3298\":1,\"3503\":3,\"3594\":2,\"3609\":2,\"3624\":1,\"3625\":1,\"3632\":1}}],[\"optional加强\",{\"0\":{\"2518\":1}}],[\"optional常用方法\",{\"0\":{\"2498\":1}}],[\"optional类已经成为java\",{\"1\":{\"2496\":1}}],[\"optional\",{\"0\":{\"2493\":1,\"2494\":1,\"2500\":1,\"2501\":1,\"2502\":1},\"1\":{\"2480\":1,\"2481\":1,\"2483\":1,\"2484\":1,\"2488\":1,\"2489\":1,\"2495\":2,\"2500\":3,\"2501\":2,\"2502\":5,\"2504\":1,\"2505\":1,\"2507\":2,\"2508\":1}}],[\"optional<object>\",{\"1\":{\"2501\":1}}],[\"optional<student>\",{\"1\":{\"2500\":1,\"2502\":2,\"2504\":1,\"2505\":1,\"2507\":1,\"2508\":1}}],[\"optional<integer>\",{\"1\":{\"2488\":1}}],[\"optional<t>类\",{\"1\":{\"2495\":1}}],[\"optional<t>\",{\"1\":{\"2488\":1,\"2500\":1,\"2502\":1}}],[\"optional<double>\",{\"1\":{\"2483\":1,\"2489\":1}}],[\"optional<employee>\",{\"1\":{\"2480\":1,\"2481\":1,\"2484\":1}}],[\"optional<>\",{\"1\":{\"2480\":1,\"2481\":1,\"2483\":1,\"2484\":1}}],[\"optional>\",{\"1\":{\"185\":1,\"606\":1,\"608\":1,\"612\":2}}],[\"opt\",{\"1\":{\"3285\":3,\"3288\":3,\"3289\":2,\"3291\":1,\"3296\":2,\"3297\":1,\"3298\":1,\"3300\":2,\"3301\":1,\"3304\":1,\"3310\":1,\"3315\":1,\"3319\":3,\"3320\":2,\"3322\":1,\"3324\":1,\"3332\":2,\"3336\":1,\"3337\":2,\"3339\":4,\"3340\":3,\"3560\":1,\"3561\":1,\"3562\":2,\"3563\":2,\"3653\":2,\"3656\":4,\"3657\":4,\"3658\":4,\"3727\":3,\"3728\":1}}],[\"optstu\",{\"1\":{\"2508\":2}}],[\"optstu2\",{\"1\":{\"2504\":2}}],[\"opts\",{\"1\":{\"2168\":4}}],[\"opsforhash\",{\"1\":{\"379\":1}}],[\"opsforvalue\",{\"1\":{\"379\":1,\"380\":1}}],[\"ops\",{\"1\":{\"319\":1,\"379\":5,\"380\":2}}],[\"out类的println方法\",{\"1\":{\"2404\":1}}],[\"out返回的是printstream的实例\",{\"1\":{\"2120\":1}}],[\"outputsteram\",{\"1\":{\"2242\":1}}],[\"outputstream和filewriter的处理流\",{\"1\":{\"2119\":1}}],[\"outputstream和write都是抽象类\",{\"1\":{\"821\":1}}],[\"outputstream和write都是输出流\",{\"1\":{\"820\":1}}],[\"outputstream的子类filteroutputstream的子类\",{\"1\":{\"2116\":1}}],[\"outputstreamwriter\",{\"0\":{\"2102\":1},\"1\":{\"820\":1,\"2090\":1,\"2103\":1,\"2106\":2}}],[\"outputstream\",{\"0\":{\"820\":1,\"2034\":1,\"2035\":1},\"1\":{\"820\":1,\"2077\":2,\"2103\":1,\"2104\":1,\"2168\":2,\"2214\":1,\"2220\":1,\"2893\":2}}],[\"outputsreamwriter\",{\"1\":{\"2104\":1}}],[\"output\",{\"1\":{\"2022\":1,\"2025\":1,\"2992\":1,\"3296\":1}}],[\"output的缩写\",{\"1\":{\"2021\":1}}],[\"outofmemoryerror\",{\"1\":{\"1560\":1}}],[\"outer\",{\"1\":{\"1467\":2}}],[\"out\",{\"0\":{\"2116\":1},\"1\":{\"109\":1,\"128\":1,\"152\":3,\"156\":1,\"288\":1,\"290\":1,\"309\":1,\"349\":1,\"366\":1,\"375\":2,\"380\":1,\"404\":1,\"406\":1,\"407\":1,\"408\":1,\"409\":1,\"410\":1,\"422\":2,\"423\":1,\"424\":1,\"425\":2,\"428\":1,\"429\":1,\"430\":1,\"431\":1,\"432\":3,\"447\":2,\"452\":2,\"455\":1,\"493\":1,\"499\":1,\"521\":1,\"525\":1,\"550\":1,\"554\":1,\"578\":1,\"623\":1,\"628\":5,\"651\":1,\"652\":2,\"653\":2,\"655\":1,\"656\":2,\"657\":2,\"659\":1,\"660\":1,\"661\":1,\"662\":2,\"663\":1,\"665\":2,\"666\":2,\"667\":1,\"668\":1,\"669\":2,\"671\":1,\"672\":1,\"673\":2,\"674\":4,\"677\":1,\"678\":1,\"679\":1,\"680\":1,\"681\":1,\"682\":1,\"699\":3,\"700\":2,\"701\":1,\"702\":1,\"703\":1,\"704\":1,\"717\":3,\"719\":8,\"720\":8,\"721\":8,\"724\":1,\"725\":2,\"726\":1,\"727\":1,\"732\":1,\"733\":1,\"734\":2,\"736\":1,\"750\":1,\"751\":1,\"756\":2,\"757\":1,\"760\":1,\"761\":2,\"762\":1,\"763\":1,\"764\":2,\"765\":1,\"766\":2,\"767\":2,\"768\":2,\"769\":4,\"772\":1,\"773\":1,\"774\":2,\"776\":2,\"778\":2,\"779\":1,\"780\":1,\"781\":1,\"782\":1,\"783\":1,\"785\":1,\"788\":1,\"789\":1,\"790\":1,\"791\":1,\"792\":1,\"793\":1,\"794\":1,\"795\":1,\"797\":1,\"798\":1,\"799\":1,\"800\":1,\"801\":1,\"803\":3,\"804\":3,\"805\":3,\"807\":3,\"810\":3,\"813\":3,\"814\":3,\"829\":1,\"834\":1,\"835\":1,\"836\":1,\"837\":1,\"838\":1,\"840\":1,\"841\":1,\"842\":1,\"843\":1,\"844\":1,\"845\":1,\"846\":1,\"848\":1,\"849\":1,\"852\":1,\"853\":1,\"854\":1,\"855\":1,\"856\":1,\"857\":1,\"858\":1,\"859\":1,\"861\":1,\"862\":1,\"863\":1,\"864\":1,\"865\":1,\"868\":1,\"869\":1,\"870\":1,\"871\":1,\"872\":2,\"873\":1,\"874\":1,\"881\":1,\"884\":7,\"887\":2,\"888\":2,\"890\":2,\"892\":1,\"893\":1,\"894\":2,\"895\":4,\"896\":1,\"897\":1,\"898\":1,\"899\":1,\"905\":1,\"906\":2,\"907\":1,\"908\":1,\"909\":1,\"910\":3,\"911\":1,\"912\":2,\"913\":1,\"914\":2,\"917\":1,\"919\":1,\"924\":1,\"925\":1,\"926\":1,\"930\":2,\"931\":3,\"932\":3,\"933\":2,\"934\":1,\"935\":1,\"936\":1,\"937\":2,\"938\":1,\"944\":1,\"945\":2,\"946\":3,\"947\":2,\"948\":1,\"949\":1,\"950\":3,\"951\":2,\"952\":2,\"959\":2,\"960\":1,\"961\":3,\"962\":1,\"963\":2,\"964\":2,\"965\":2,\"966\":1,\"967\":2,\"968\":1,\"969\":1,\"970\":2,\"971\":3,\"989\":2,\"990\":2,\"991\":1,\"992\":1,\"998\":1,\"999\":1,\"1000\":1,\"1001\":1,\"1008\":2,\"1009\":2,\"1038\":1,\"1047\":2,\"1059\":2,\"1125\":2,\"1133\":3,\"1134\":3,\"1141\":2,\"1176\":2,\"1184\":2,\"1186\":2,\"1189\":1,\"1198\":1,\"1202\":2,\"1203\":2,\"1204\":3,\"1221\":1,\"1222\":1,\"1240\":2,\"1245\":2,\"1246\":2,\"1258\":2,\"1259\":1,\"1262\":1,\"1267\":2,\"1280\":1,\"1282\":1,\"1292\":1,\"1296\":1,\"1368\":3,\"1376\":3,\"1380\":1,\"1381\":2,\"1382\":1,\"1408\":4,\"1413\":2,\"1426\":5,\"1427\":2,\"1433\":2,\"1440\":1,\"1442\":2,\"1457\":3,\"1466\":1,\"1467\":1,\"1475\":2,\"1488\":1,\"1497\":1,\"1499\":1,\"1500\":3,\"1512\":7,\"1515\":3,\"1526\":2,\"1555\":2,\"1556\":2,\"1575\":2,\"1577\":1,\"1578\":1,\"1581\":1,\"1582\":1,\"1583\":1,\"1587\":7,\"1591\":2,\"1592\":1,\"1600\":2,\"1609\":2,\"1622\":3,\"1630\":4,\"1680\":5,\"1720\":2,\"1728\":1,\"1729\":3,\"1737\":4,\"1740\":1,\"1757\":1,\"1760\":1,\"1768\":1,\"1784\":1,\"1795\":4,\"1804\":1,\"1810\":2,\"1817\":1,\"1831\":1,\"1843\":4,\"1844\":1,\"1845\":1,\"1851\":1,\"1852\":1,\"1854\":1,\"1855\":1,\"1902\":2,\"1905\":1,\"1931\":1,\"1935\":1,\"1940\":2,\"1955\":1,\"1957\":2,\"1958\":1,\"1993\":1,\"1995\":1,\"1996\":1,\"2015\":3,\"2016\":1,\"2052\":1,\"2053\":1,\"2055\":1,\"2056\":1,\"2077\":4,\"2079\":4,\"2082\":1,\"2086\":1,\"2099\":1,\"2101\":1,\"2103\":1,\"2104\":1,\"2115\":1,\"2116\":1,\"2117\":1,\"2118\":3,\"2121\":2,\"2127\":3,\"2152\":1,\"2157\":2,\"2192\":1,\"2193\":2,\"2194\":1,\"2195\":1,\"2196\":1,\"2220\":2,\"2225\":1,\"2232\":1,\"2252\":1,\"2255\":2,\"2256\":1,\"2257\":2,\"2258\":2,\"2264\":3,\"2266\":1,\"2267\":1,\"2268\":1,\"2269\":1,\"2280\":4,\"2282\":1,\"2285\":2,\"2289\":1,\"2291\":1,\"2293\":4,\"2295\":2,\"2296\":12,\"2298\":3,\"2299\":1,\"2300\":1,\"2301\":1,\"2302\":3,\"2303\":1,\"2304\":1,\"2306\":1,\"2311\":2,\"2315\":1,\"2328\":2,\"2329\":1,\"2344\":1,\"2349\":2,\"2369\":2,\"2371\":3,\"2373\":1,\"2375\":1,\"2377\":6,\"2403\":1,\"2404\":1,\"2450\":1,\"2451\":1,\"2458\":1,\"2459\":1,\"2460\":1,\"2461\":1,\"2463\":2,\"2470\":1,\"2474\":1,\"2475\":1,\"2477\":1,\"2478\":1,\"2479\":1,\"2480\":1,\"2481\":1,\"2482\":1,\"2483\":1,\"2484\":1,\"2485\":1,\"2487\":1,\"2488\":1,\"2489\":1,\"2500\":1,\"2502\":2,\"2504\":1,\"2505\":1,\"2507\":2,\"2508\":1,\"2545\":1,\"2547\":1,\"2548\":1,\"2551\":1,\"2597\":1,\"2601\":2,\"2604\":1,\"2613\":1,\"2621\":1,\"2624\":1,\"2635\":1,\"2639\":2,\"2657\":8,\"2676\":1,\"2686\":1,\"2687\":1,\"2688\":1,\"2689\":1,\"2690\":2,\"2691\":2,\"2723\":1,\"2779\":1,\"2800\":1,\"2801\":1,\"2802\":1,\"2804\":1,\"2812\":2,\"2846\":8,\"2849\":2,\"2850\":1,\"2858\":1,\"2872\":6,\"2903\":3,\"2909\":1,\"2910\":1,\"2973\":2,\"3047\":1,\"3054\":1,\"3142\":1,\"3154\":1,\"3160\":1,\"3164\":1,\"3191\":1,\"3209\":1,\"3211\":3,\"3212\":1,\"3214\":1,\"3217\":1,\"3218\":1,\"3220\":2,\"3221\":2,\"3225\":1,\"3226\":1,\"3227\":1,\"3231\":1,\"3234\":1,\"3237\":1,\"3240\":1,\"3242\":1,\"3244\":1,\"3249\":2,\"3253\":1,\"3278\":1,\"3279\":1,\"3280\":1,\"3378\":1,\"3380\":1}}],[\"other\",{\"0\":{\"59\":1,\"3763\":1},\"1\":{\"455\":1,\"1428\":4,\"2508\":1,\"3191\":1,\"3305\":1,\"3307\":1,\"3327\":1,\"3328\":2,\"3355\":1}}],[\"fhgd7\",{\"1\":{\"3381\":1}}],[\"f8edfccba429b6477927a7c1ce1bc6729521305e\",{\"1\":{\"3108\":1}}],[\"features\",{\"1\":{\"3110\":1,\"3305\":1,\"3307\":1,\"3327\":1,\"3328\":1,\"3355\":2}}],[\"female\",{\"1\":{\"3029\":1,\"3217\":1,\"3225\":1,\"3226\":1,\"3227\":1,\"3231\":1}}],[\"fetchsource\",{\"0\":{\"3233\":1},\"1\":{\"3233\":1,\"3234\":1}}],[\"fetch\",{\"1\":{\"2850\":4,\"3278\":1,\"3279\":1,\"3280\":1,\"3378\":1,\"3380\":1,\"3635\":1}}],[\"fe4d\",{\"1\":{\"2181\":1}}],[\"fname\",{\"1\":{\"2293\":2}}],[\"ftp站点\",{\"1\":{\"2236\":1}}],[\"ftp占用端口21\",{\"1\":{\"2186\":1}}],[\"ft\",{\"1\":{\"1810\":2}}],[\"f不区分大小写\",{\"1\":{\"1119\":1}}],[\"ff\",{\"1\":{\"897\":1}}],[\"fw\",{\"1\":{\"827\":6,\"2060\":2,\"2061\":1,\"2062\":1,\"2064\":5,\"2065\":5}}],[\"fdw\",{\"1\":{\"3724\":1}}],[\"fdobj\",{\"1\":{\"823\":1}}],[\"fd\",{\"1\":{\"822\":1}}],[\"fsync\",{\"1\":{\"3527\":1}}],[\"fs\",{\"1\":{\"812\":2}}],[\"f3\",{\"1\":{\"786\":1,\"810\":2,\"2016\":2}}],[\"f2\",{\"1\":{\"786\":1,\"807\":3,\"810\":2,\"812\":2,\"1413\":2,\"1442\":2,\"2015\":2}}],[\"f1是由son生产的而不是daughter\",{\"1\":{\"1415\":1}}],[\"f1是父类型对象\",{\"1\":{\"1411\":1}}],[\"f1变成了一个硬盘上不存在的文件\",{\"1\":{\"809\":1}}],[\"f1在硬盘上不存在了\",{\"1\":{\"809\":1}}],[\"f1和f2的对象都还在\",{\"1\":{\"809\":1}}],[\"f1移动到f2后\",{\"1\":{\"809\":1}}],[\"f1的硬盘文件跑这里了\",{\"1\":{\"807\":1}}],[\"f1的硬盘文件已经不存在了\",{\"1\":{\"807\":1}}],[\"f1=\",{\"1\":{\"807\":1}}],[\"f1\",{\"1\":{\"786\":1,\"807\":2,\"810\":2,\"812\":2,\"1096\":1,\"1115\":1,\"1116\":1,\"1395\":1,\"1411\":2,\"1414\":2,\"1415\":3,\"1416\":4,\"1442\":2,\"1445\":2,\"2015\":2,\"2048\":2,\"2052\":2,\"2053\":2,\"2060\":2,\"2064\":2}}],[\"fuzziness\",{\"1\":{\"3239\":5,\"3240\":2}}],[\"fuzzyquery\",{\"1\":{\"3239\":2,\"3240\":1}}],[\"fuzzyquerybuilder\",{\"0\":{\"3239\":1},\"1\":{\"3239\":3,\"3240\":3}}],[\"fucn2\",{\"1\":{\"2425\":1}}],[\"fucntion<integer\",{\"1\":{\"2425\":1}}],[\"fuck\",{\"1\":{\"665\":3,\"666\":3,\"667\":2,\"703\":1,\"1038\":1}}],[\"future<t>\",{\"1\":{\"1814\":1}}],[\"future接口\",{\"1\":{\"1808\":1}}],[\"future接口介绍\",{\"0\":{\"1808\":1}}],[\"futuretask\",{\"1\":{\"1808\":1,\"1810\":2}}],[\"futruetask是futrue接口的唯一的实现类\",{\"1\":{\"1808\":1}}],[\"fulfill\",{\"1\":{\"3267\":1,\"3503\":1}}],[\"fulfilled\",{\"1\":{\"1616\":1}}],[\"full\",{\"1\":{\"734\":1}}],[\"func2\",{\"1\":{\"2425\":1,\"2428\":1,\"2433\":2}}],[\"func1\",{\"1\":{\"2424\":2,\"2427\":1,\"2432\":2}}],[\"function接口的第一个参数刚好是方法的调用者\",{\"1\":{\"2416\":1}}],[\"function<\",{\"1\":{\"2467\":1}}],[\"function<integer\",{\"1\":{\"2424\":1,\"2432\":1,\"2433\":1}}],[\"function<employee\",{\"1\":{\"2415\":1,\"2416\":1}}],[\"function<t\",{\"1\":{\"976\":1,\"2392\":1}}],[\"function包下定义了java\",{\"1\":{\"2386\":1}}],[\"function\",{\"0\":{\"976\":1},\"1\":{\"1060\":2,\"2463\":1,\"2467\":1,\"3548\":1}}],[\"functionalinterface\",{\"1\":{\"752\":1,\"1638\":1,\"2387\":1,\"2388\":1}}],[\"functional\",{\"0\":{\"972\":1,\"2379\":1,\"2381\":1,\"2382\":1},\"1\":{\"58\":1,\"2477\":1,\"2487\":1}}],[\"fun2\",{\"1\":{\"2416\":1,\"2428\":1}}],[\"fun1\",{\"1\":{\"1467\":4,\"2415\":1,\"2427\":1}}],[\"fun\",{\"1\":{\"1466\":3}}],[\"foobar\",{\"1\":{\"3548\":2}}],[\"following\",{\"1\":{\"3305\":2,\"3328\":1,\"3355\":1}}],[\"folders\",{\"1\":{\"103\":1}}],[\"font>\",{\"1\":{\"3193\":1,\"3252\":1,\"3253\":2}}],[\"fos=\",{\"1\":{\"825\":1,\"826\":1}}],[\"fos\",{\"1\":{\"823\":1,\"825\":2,\"826\":1,\"2069\":2,\"2071\":5,\"2084\":2,\"2106\":2,\"2121\":2,\"2126\":2,\"2146\":2,\"2151\":2,\"2156\":2,\"2613\":2}}],[\"force\",{\"1\":{\"3679\":1}}],[\"forked\",{\"1\":{\"3563\":1,\"3656\":1}}],[\"fork\",{\"1\":{\"3562\":1,\"3563\":1,\"3656\":2}}],[\"forward\",{\"1\":{\"2900\":2,\"2903\":1,\"2913\":1,\"2950\":2,\"2951\":1}}],[\"forwhiletest\",{\"1\":{\"1186\":1}}],[\"foreach\",{\"0\":{\"2485\":1},\"1\":{\"2450\":1,\"2451\":1,\"2458\":1,\"2459\":1,\"2460\":1,\"2461\":1,\"2463\":2,\"2470\":1,\"2474\":1,\"2475\":1,\"2485\":2,\"2604\":1,\"2657\":1,\"2689\":1}}],[\"for循环与增强for循环的对比\",{\"0\":{\"1853\":1}}],[\"for循环遍历\",{\"0\":{\"1844\":1}}],[\"for循环\",{\"1\":{\"1186\":1}}],[\"for循环内只要有两个\",{\"1\":{\"1185\":1}}],[\"for循环和while循环的初始化条件部分的作用范围不同\",{\"1\":{\"1185\":1}}],[\"for循环和while循环是可以相互转换的\",{\"1\":{\"1185\":1}}],[\"for循环和while循环\",{\"0\":{\"1185\":1}}],[\"for循环的使用\",{\"0\":{\"1181\":1}}],[\"for循环的结构\",{\"0\":{\"1180\":1}}],[\"for\",{\"0\":{\"1178\":1,\"1849\":1},\"1\":{\"814\":1,\"970\":1,\"1165\":1,\"1180\":1,\"1181\":1,\"1185\":1,\"1186\":2,\"1198\":2,\"1202\":2,\"1203\":2,\"1204\":3,\"1214\":1,\"1222\":1,\"1240\":2,\"1266\":1,\"1283\":1,\"1296\":1,\"1467\":1,\"1680\":2,\"1720\":2,\"1729\":2,\"1737\":2,\"1810\":1,\"1817\":1,\"1844\":1,\"1851\":3,\"1852\":3,\"1854\":2,\"1855\":2,\"1955\":1,\"1957\":1,\"1981\":1,\"2053\":1,\"2056\":1,\"2121\":1,\"2289\":1,\"2291\":1,\"2293\":1,\"2295\":2,\"2296\":4,\"2298\":2,\"2302\":2,\"2304\":1,\"2581\":1,\"2600\":2,\"2603\":2,\"2620\":1,\"2621\":1,\"2624\":1,\"2625\":1,\"2634\":1,\"2653\":6,\"2872\":3,\"3044\":1,\"3047\":1,\"3108\":1,\"3226\":1,\"3227\":1,\"3231\":1,\"3234\":1,\"3237\":1,\"3240\":1,\"3242\":1,\"3244\":1,\"3253\":1,\"3267\":1,\"3296\":1,\"3298\":3,\"3305\":3,\"3307\":1,\"3327\":1,\"3328\":2,\"3348\":1,\"3355\":3,\"3479\":1,\"3503\":1,\"3563\":1,\"3656\":1,\"3664\":1}}],[\"form>\",{\"1\":{\"2857\":1,\"2871\":1}}],[\"formation\",{\"1\":{\"3355\":1}}],[\"formatter\",{\"1\":{\"735\":1,\"736\":2,\"737\":2}}],[\"formatter2\",{\"1\":{\"734\":3}}],[\"formatstyle\",{\"1\":{\"734\":5}}],[\"format方法\",{\"1\":{\"729\":1}}],[\"format\",{\"0\":{\"729\":1},\"1\":{\"710\":1,\"729\":1,\"732\":1,\"734\":1,\"736\":1,\"2111\":1,\"3547\":1}}],[\"formindex参数指定开始排序的下标\",{\"1\":{\"894\":1}}],[\"formindex为开始排序的下标\",{\"1\":{\"892\":1}}],[\"formindex\",{\"1\":{\"657\":1}}],[\"forname\",{\"0\":{\"836\":1,\"838\":1,\"2268\":1},\"1\":{\"536\":1,\"836\":1,\"838\":2,\"2252\":1,\"2268\":1,\"2546\":1,\"2547\":1,\"2548\":1,\"2551\":1,\"2573\":1,\"2575\":1}}],[\"found\",{\"1\":{\"398\":1,\"432\":1,\"3141\":2,\"3150\":2,\"3151\":1,\"3159\":2}}],[\"fream\",{\"1\":{\"2750\":1}}],[\"free\",{\"1\":{\"1616\":1}}],[\"frequency\",{\"0\":{\"936\":1},\"1\":{\"936\":4}}],[\"frame\",{\"0\":{\"3761\":1}}],[\"frameworks\",{\"1\":{\"2734\":1}}],[\"framework\",{\"1\":{\"361\":1}}],[\"fragment\",{\"1\":{\"1539\":1}}],[\"fr\",{\"1\":{\"812\":2,\"829\":2,\"2048\":2,\"2049\":1,\"2050\":1,\"2052\":6,\"2053\":6,\"2065\":5,\"2082\":2}}],[\"from设置查询的起始index\",{\"1\":{\"3242\":1}}],[\"fromindex\",{\"1\":{\"656\":1,\"657\":1,\"892\":1,\"894\":1,\"952\":1}}],[\"from\",{\"1\":{\"117\":1,\"365\":1,\"1003\":1,\"2558\":1,\"2559\":1,\"2582\":1,\"2597\":1,\"2601\":2,\"2604\":1,\"2613\":1,\"2639\":1,\"2656\":5,\"2683\":1,\"2687\":1,\"2688\":1,\"2689\":1,\"2690\":1,\"2691\":2,\"2737\":1,\"2741\":1,\"3182\":3,\"3183\":1,\"3241\":2,\"3242\":1,\"3307\":2,\"3327\":2,\"3355\":2,\"3670\":1,\"3673\":1,\"3674\":1,\"3700\":1,\"3701\":1}}],[\"flight\",{\"1\":{\"3278\":1,\"3279\":1,\"3280\":1,\"3378\":1,\"3380\":1}}],[\"flink\",{\"0\":{\"3257\":1},\"1\":{\"3257\":1}}],[\"fly\",{\"1\":{\"1507\":1}}],[\"flyable\",{\"1\":{\"1507\":1}}],[\"flyway\",{\"1\":{\"342\":2}}],[\"flush\",{\"0\":{\"826\":1,\"2149\":1,\"3517\":1},\"1\":{\"820\":1,\"826\":3,\"827\":1,\"2074\":1,\"2081\":1,\"2105\":1,\"2126\":3,\"2149\":1,\"2151\":1,\"2156\":2,\"3449\":1,\"3513\":1,\"3517\":3,\"3527\":4}}],[\"flushable\",{\"1\":{\"820\":1}}],[\"flavor\",{\"1\":{\"3108\":1}}],[\"flatmap中\",{\"1\":{\"2467\":1}}],[\"flatmap\",{\"0\":{\"2467\":1,\"2471\":1},\"1\":{\"2454\":1,\"2467\":2,\"2471\":1}}],[\"flash\",{\"1\":{\"1512\":9}}],[\"flank\",{\"1\":{\"751\":2,\"757\":2}}],[\"flags方法\",{\"1\":{\"997\":1}}],[\"flags\",{\"0\":{\"997\":1},\"1\":{\"996\":1,\"997\":2}}],[\"flag\",{\"1\":{\"646\":11,\"647\":6,\"866\":1,\"1287\":1}}],[\"fload表示数据的数据范围比long还大\",{\"1\":{\"1097\":1}}],[\"float就比long要大\",{\"1\":{\"1112\":1}}],[\"float同理\",{\"1\":{\"1098\":1,\"1116\":1}}],[\"floatvalue\",{\"1\":{\"772\":1,\"1442\":1}}],[\"float\",{\"1\":{\"147\":1,\"671\":3,\"760\":1,\"771\":1,\"772\":2,\"888\":1,\"1009\":1,\"1075\":1,\"1094\":1,\"1096\":1,\"1115\":1,\"1116\":1,\"1273\":1,\"1442\":3,\"1445\":1,\"1546\":1,\"2124\":1}}],[\"flot\",{\"1\":{\"767\":1}}],[\"floor\",{\"0\":{\"763\":1},\"1\":{\"472\":1,\"763\":4,\"764\":1,\"784\":1}}],[\"failures\",{\"1\":{\"3154\":1}}],[\"failed\",{\"1\":{\"428\":1,\"429\":1,\"431\":1,\"3135\":1,\"3142\":1,\"3144\":1,\"3149\":1,\"3160\":1,\"3164\":1,\"3191\":1,\"3249\":1,\"3715\":1,\"3757\":1}}],[\"facets\",{\"1\":{\"2733\":1,\"2743\":1}}],[\"factor\",{\"1\":{\"1928\":1}}],[\"factories\",{\"1\":{\"567\":1}}],[\"factorybean<redis>\",{\"1\":{\"514\":1}}],[\"factorybean\",{\"0\":{\"514\":1}}],[\"factory\",{\"1\":{\"418\":3,\"2328\":5}}],[\"fa\",{\"1\":{\"1384\":2}}],[\"fathe\",{\"1\":{\"1384\":1}}],[\"father<integer\",{\"1\":{\"1972\":1,\"1974\":1}}],[\"father<object\",{\"1\":{\"1971\":1}}],[\"father<t1\",{\"1\":{\"1970\":1,\"1973\":1}}],[\"father的age\",{\"1\":{\"1413\":1}}],[\"father\",{\"1\":{\"1368\":2,\"1376\":3,\"1381\":1,\"1382\":1,\"1384\":1,\"1395\":1,\"1408\":6,\"1411\":1,\"1413\":2,\"1414\":1,\"1415\":1,\"1509\":1,\"1971\":1}}],[\"fatehr\",{\"1\":{\"1376\":1}}],[\"fatal\",{\"1\":{\"292\":1,\"308\":1}}],[\"fallthrough\",{\"1\":{\"1678\":1}}],[\"falgs表示模式pattern对象的模式修饰符\",{\"1\":{\"997\":1}}],[\"false=不创建\",{\"1\":{\"3197\":1}}],[\"false=覆盖写\",{\"1\":{\"822\":1}}],[\"false表示文档数据已被删除\",{\"1\":{\"3150\":1}}],[\"false用0表示\",{\"1\":{\"1108\":1}}],[\"false\",{\"1\":{\"147\":3,\"196\":1,\"197\":1,\"350\":1,\"478\":7,\"483\":2,\"485\":1,\"500\":1,\"646\":1,\"653\":1,\"659\":1,\"662\":1,\"746\":1,\"810\":2,\"824\":1,\"826\":1,\"827\":1,\"910\":1,\"964\":1,\"965\":1,\"967\":1,\"1107\":1,\"1125\":1,\"1204\":1,\"1273\":1,\"1426\":2,\"1427\":1,\"1428\":7,\"1430\":1,\"1440\":1,\"1446\":1,\"1781\":2,\"2060\":3,\"2477\":1,\"2478\":1,\"2504\":1,\"2571\":1,\"2625\":1,\"2635\":1,\"2639\":1,\"2674\":3,\"3108\":1,\"3110\":2,\"3141\":2,\"3142\":1,\"3150\":1,\"3154\":1,\"3159\":2,\"3160\":1,\"3164\":1,\"3191\":1,\"3197\":2,\"3198\":1,\"3199\":1,\"3249\":1,\"3278\":1,\"3279\":1,\"3280\":1,\"3352\":1,\"3355\":3,\"3378\":1,\"3380\":1,\"3667\":2,\"3668\":1}}],[\"fastjson\",{\"0\":{\"609\":1,\"3084\":1},\"1\":{\"3084\":1,\"3086\":1,\"3087\":1}}],[\"fasterxml\",{\"1\":{\"413\":1,\"3216\":1}}],[\"f\",{\"1\":{\"248\":1,\"946\":3,\"952\":2,\"1095\":2,\"1408\":11,\"1910\":1,\"2289\":2,\"2291\":2,\"2293\":4,\"2450\":1,\"2463\":1,\"2464\":1,\"2465\":1,\"2466\":1,\"2467\":1,\"3558\":1,\"3563\":1,\"3656\":1,\"3657\":1,\"3658\":1}}],[\"f9即可\",{\"1\":{\"2750\":1}}],[\"f9\",{\"1\":{\"186\":1}}],[\"first\",{\"1\":{\"2167\":1,\"2480\":2}}],[\"firsttime\",{\"1\":{\"492\":2}}],[\"fis\",{\"1\":{\"1583\":4,\"1592\":6,\"1600\":4,\"1940\":2,\"2069\":2,\"2071\":5,\"2084\":2,\"2095\":2,\"2096\":2,\"2099\":2,\"2101\":2,\"2106\":2,\"2127\":2,\"2146\":2,\"2152\":2,\"2157\":2,\"2282\":3,\"2894\":3,\"2895\":3}}],[\"fianl\",{\"1\":{\"1354\":1}}],[\"fieldname\",{\"1\":{\"2306\":1}}],[\"fields\",{\"1\":{\"852\":2,\"853\":2,\"2289\":2,\"3193\":1}}],[\"field\",{\"0\":{\"860\":1,\"3363\":1},\"1\":{\"852\":2,\"853\":2,\"854\":2,\"855\":2,\"860\":1,\"861\":1,\"862\":1,\"863\":1,\"864\":1,\"865\":1,\"1257\":1,\"1345\":1,\"1653\":1,\"1660\":1,\"1661\":1,\"1675\":1,\"1679\":1,\"1897\":1,\"2250\":1,\"2257\":1,\"2258\":1,\"2289\":2,\"2291\":2,\"2293\":2,\"2306\":1,\"2307\":1,\"2308\":1,\"2600\":4,\"2603\":4,\"2653\":8,\"3188\":7,\"3190\":2,\"3248\":1,\"3249\":1,\"3250\":1,\"3252\":2,\"3253\":1,\"3614\":10,\"3619\":1}}],[\"field类数组\",{\"1\":{\"852\":1,\"853\":1}}],[\"fill\",{\"0\":{\"898\":1},\"1\":{\"898\":2}}],[\"filterchain\",{\"1\":{\"2945\":1}}],[\"filterconfig\",{\"1\":{\"2945\":2}}],[\"filterdemo\",{\"1\":{\"2945\":1}}],[\"filter接口\",{\"1\":{\"2945\":1}}],[\"filter是独立的web模块\",{\"1\":{\"2944\":1}}],[\"filter的位置\",{\"0\":{\"2944\":1}}],[\"filters\",{\"1\":{\"2674\":1}}],[\"filters=wall\",{\"1\":{\"2673\":1}}],[\"filteroutputstream\",{\"1\":{\"2077\":1}}],[\"filterinputstream\",{\"1\":{\"2076\":1}}],[\"filtertype\",{\"1\":{\"563\":2,\"568\":2}}],[\"filter>\",{\"1\":{\"308\":4}}],[\"filter\",{\"0\":{\"2458\":1,\"2943\":1,\"3781\":1},\"1\":{\"308\":4,\"563\":2,\"568\":2,\"589\":1,\"2454\":1,\"2458\":2,\"2491\":2,\"2769\":1,\"2945\":1,\"2955\":1,\"3114\":1,\"3441\":1}}],[\"fileattribute<\",{\"1\":{\"2168\":2}}],[\"file包下还提供了files\",{\"1\":{\"2165\":1}}],[\"filechannel\",{\"1\":{\"2161\":1}}],[\"file对应的硬盘中的文件如果存在\",{\"1\":{\"2060\":1}}],[\"file对象可以作为参数传递给流的构造器\",{\"1\":{\"2009\":1}}],[\"file的作用\",{\"0\":{\"2009\":1}}],[\"file类提供了一个常量\",{\"1\":{\"2013\":1}}],[\"file类与文件\",{\"0\":{\"2010\":1}}],[\"file类即能表示文件\",{\"1\":{\"2008\":1}}],[\"file类\",{\"1\":{\"2008\":1}}],[\"fileoutputstream用于写出非文本数据之类的原始字节流\",{\"1\":{\"2035\":1}}],[\"fileoutputstream\",{\"1\":{\"823\":7,\"825\":2,\"826\":2,\"2035\":2,\"2067\":1,\"2069\":5,\"2071\":2,\"2084\":2,\"2106\":2,\"2121\":2,\"2126\":2,\"2146\":2,\"2151\":2,\"2156\":2,\"2613\":2}}],[\"fileoutstream\",{\"0\":{\"823\":1}}],[\"filedescriptor\",{\"1\":{\"822\":1,\"823\":1}}],[\"filewritertest\",{\"1\":{\"2064\":1}}],[\"filewriter写出示例\",{\"0\":{\"2064\":1}}],[\"filewriter和fileoutputstream\",{\"1\":{\"821\":1}}],[\"filewriter\",{\"0\":{\"822\":1,\"2057\":1},\"1\":{\"820\":1,\"822\":9,\"823\":1,\"824\":6,\"826\":4,\"827\":2,\"2036\":2,\"2057\":1,\"2060\":4,\"2064\":1,\"2065\":2}}],[\"filereader和filewriter都无法处理图片资源\",{\"1\":{\"2066\":1}}],[\"filereader与filewriter结合示例\",{\"0\":{\"2065\":1}}],[\"filereadertest\",{\"1\":{\"2052\":1,\"2053\":1}}],[\"filereader示例\",{\"0\":{\"2052\":1}}],[\"filereader的异常处理\",{\"0\":{\"2051\":1}}],[\"filereader的操作\",{\"0\":{\"2047\":1}}],[\"filereader\",{\"0\":{\"2046\":1},\"1\":{\"812\":4,\"813\":2,\"814\":2,\"819\":2,\"829\":2,\"2033\":2,\"2046\":1,\"2048\":4,\"2052\":2,\"2053\":2,\"2065\":2,\"2082\":2}}],[\"fileinputstream用于读取非文本数据之类的原始字节流\",{\"1\":{\"2032\":1}}],[\"fileinputstream\",{\"1\":{\"812\":4,\"813\":2,\"814\":2,\"819\":2,\"1583\":2,\"1587\":1,\"1592\":2,\"1600\":2,\"1940\":2,\"2032\":2,\"2067\":1,\"2069\":5,\"2071\":2,\"2084\":2,\"2095\":2,\"2096\":2,\"2099\":2,\"2101\":2,\"2106\":2,\"2127\":2,\"2146\":2,\"2152\":2,\"2157\":2,\"2282\":4,\"2612\":2,\"2894\":2,\"2895\":2}}],[\"fileinputstream和filereader\",{\"1\":{\"812\":1}}],[\"filenotfoundexception异常\",{\"1\":{\"2060\":1}}],[\"filenotfoundexception\",{\"1\":{\"812\":1,\"1571\":1,\"1587\":1,\"1592\":1,\"1600\":1,\"2048\":1,\"2121\":1}}],[\"filename\",{\"1\":{\"790\":2,\"822\":3,\"2934\":2}}],[\"filenamepattern>\",{\"1\":{\"308\":3}}],[\"file>\",{\"1\":{\"308\":3}}],[\"filesystem\",{\"1\":{\"3527\":4}}],[\"files类常用方法\",{\"0\":{\"2168\":1}}],[\"files包含了大量静态的工具方法来操作文件\",{\"1\":{\"2165\":1}}],[\"files\",{\"1\":{\"103\":1,\"578\":4,\"795\":2,\"810\":3,\"829\":1,\"2048\":2,\"2052\":1,\"2053\":1,\"2060\":2,\"2064\":1,\"2082\":1,\"2084\":2,\"2168\":1}}],[\"file\",{\"0\":{\"786\":1,\"2006\":1,\"2007\":1,\"2014\":1,\"2015\":1,\"2016\":1,\"2017\":2,\"2019\":1,\"2934\":1},\"1\":{\"103\":1,\"200\":1,\"302\":1,\"304\":2,\"308\":11,\"342\":1,\"362\":1,\"364\":1,\"365\":1,\"366\":1,\"372\":1,\"478\":1,\"786\":13,\"788\":6,\"789\":6,\"790\":5,\"791\":6,\"792\":5,\"793\":5,\"794\":5,\"795\":10,\"797\":5,\"798\":5,\"799\":5,\"800\":5,\"801\":5,\"803\":6,\"804\":6,\"805\":6,\"807\":9,\"810\":6,\"812\":8,\"813\":2,\"814\":2,\"819\":2,\"822\":7,\"823\":5,\"824\":1,\"825\":1,\"826\":2,\"827\":1,\"1427\":1,\"1433\":1,\"1583\":4,\"1587\":1,\"1592\":4,\"1600\":4,\"2009\":2,\"2015\":4,\"2016\":2,\"2045\":2,\"2048\":3,\"2052\":2,\"2053\":2,\"2060\":3,\"2064\":2,\"2065\":4,\"2069\":5,\"2071\":4,\"2084\":4,\"2095\":1,\"2096\":1,\"2099\":1,\"2101\":1,\"2121\":1,\"2133\":2,\"2164\":6,\"2166\":1,\"2168\":1,\"2238\":3,\"2612\":1,\"2857\":1,\"2973\":1,\"2992\":1,\"3267\":2,\"3296\":1,\"3298\":1,\"3431\":1,\"3503\":2,\"3562\":1,\"3656\":1}}],[\"fileter是javaweb核心三模块之一\",{\"1\":{\"2943\":1}}],[\"fileter\",{\"1\":{\"11\":1}}],[\"fingerprint\",{\"1\":{\"3305\":1,\"3328\":1}}],[\"findone\",{\"1\":{\"3606\":1}}],[\"findany\",{\"0\":{\"2481\":1},\"1\":{\"2481\":2}}],[\"findalltest\",{\"1\":{\"408\":1}}],[\"findall\",{\"0\":{\"408\":1},\"1\":{\"402\":1,\"408\":1}}],[\"findfirst\",{\"0\":{\"2480\":1},\"1\":{\"2480\":2}}],[\"findtest\",{\"1\":{\"410\":1}}],[\"find方法可以进行各种复杂的查询\",{\"1\":{\"410\":1}}],[\"findbyittest\",{\"1\":{\"409\":1}}],[\"findbyid\",{\"0\":{\"409\":1},\"1\":{\"402\":1,\"409\":1}}],[\"find\",{\"0\":{\"410\":1},\"1\":{\"402\":1,\"410\":1,\"3604\":1,\"3605\":2,\"3606\":1,\"3607\":1,\"3610\":3,\"3611\":2,\"3613\":3,\"3614\":6,\"3615\":2,\"3616\":2,\"3632\":1,\"3634\":1,\"3636\":1,\"3712\":1}}],[\"final的\",{\"1\":{\"1621\":1}}],[\"final的类\",{\"1\":{\"1496\":1}}],[\"final的方法\",{\"1\":{\"1496\":1}}],[\"finalize\",{\"1\":{\"1424\":1}}],[\"final修饰\",{\"1\":{\"1621\":1}}],[\"final修饰的\",{\"1\":{\"1508\":1}}],[\"final修饰形参时\",{\"1\":{\"1354\":1}}],[\"final修饰形参\",{\"0\":{\"1354\":1}}],[\"final修饰局部变量\",{\"0\":{\"1353\":1}}],[\"final修饰属性\",{\"0\":{\"1352\":1}}],[\"final变量\",{\"0\":{\"1351\":1}}],[\"final方法\",{\"0\":{\"1350\":1}}],[\"final在public前后都可以\",{\"1\":{\"1349\":1}}],[\"final用来修饰一个类\",{\"1\":{\"1349\":1}}],[\"final类\",{\"0\":{\"1349\":1}}],[\"final可以用来修饰的结构\",{\"1\":{\"1348\":1}}],[\"finally处理\",{\"1\":{\"2063\":1}}],[\"finally处理异常\",{\"1\":{\"2051\":1}}],[\"finally处理编译时异常\",{\"1\":{\"1595\":1}}],[\"finally方式进行处理\",{\"1\":{\"1603\":1}}],[\"finally方式处理\",{\"1\":{\"1603\":1}}],[\"finally和throws的选择\",{\"0\":{\"1603\":1}}],[\"finally与throws的对比\",{\"0\":{\"1601\":1}}],[\"finally了\",{\"1\":{\"1595\":1}}],[\"finally将一个编译时可能出现的异常\",{\"1\":{\"1595\":1}}],[\"finally结构可以嵌套\",{\"1\":{\"1593\":1}}],[\"finally里吗也可能有异常\",{\"1\":{\"1592\":1}}],[\"finally中的代码总会执行\",{\"1\":{\"1591\":1}}],[\"finally中声明的是一定会被执行的代码\",{\"1\":{\"1590\":1}}],[\"finally一定会被执行\",{\"0\":{\"1591\":1}}],[\"finally语句为异常处理提供一个统一的出口\",{\"1\":{\"1590\":1}}],[\"finally的使用\",{\"0\":{\"1590\":1}}],[\"finally是可选的\",{\"1\":{\"1588\":1,\"1590\":1}}],[\"finally\",{\"1\":{\"827\":1,\"1566\":1,\"1585\":1,\"1591\":5,\"1592\":1,\"1601\":1,\"1678\":2,\"1780\":1,\"1784\":1,\"2052\":1,\"2053\":1,\"2064\":1,\"2065\":1,\"2071\":1,\"2082\":1,\"2084\":1,\"2118\":1,\"2121\":1,\"2231\":1,\"2232\":1,\"2573\":1,\"2577\":1,\"2581\":1,\"2597\":1,\"2600\":1,\"2603\":1,\"2634\":1,\"2635\":1,\"2653\":4,\"2657\":7,\"2676\":1}}],[\"final\",{\"0\":{\"1347\":1,\"1355\":1},\"1\":{\"288\":1,\"418\":1,\"688\":4,\"714\":1,\"715\":1,\"716\":1,\"723\":1,\"728\":1,\"759\":1,\"765\":1,\"778\":1,\"786\":1,\"832\":1,\"867\":1,\"876\":1,\"880\":1,\"885\":1,\"889\":1,\"994\":1,\"1003\":1,\"1006\":1,\"1270\":1,\"1277\":1,\"1317\":1,\"1349\":2,\"1350\":2,\"1351\":1,\"1352\":3,\"1353\":1,\"1355\":1,\"1500\":1,\"1507\":5,\"1612\":1,\"1617\":1,\"1619\":2,\"1620\":2,\"1621\":6,\"1625\":1,\"1630\":2,\"1768\":1,\"1780\":1,\"2013\":1,\"2155\":1,\"2158\":2,\"2238\":1,\"2450\":2,\"2811\":7}}],[\"finish\",{\"1\":{\"96\":1,\"2737\":1,\"2741\":1}}],[\"ulimit\",{\"1\":{\"3348\":1}}],[\"ua\",{\"1\":{\"2850\":3}}],[\"uanme\",{\"1\":{\"1330\":3,\"1940\":1}}],[\"udp通信流程\",{\"0\":{\"2230\":1}}],[\"udp数据报通过数据报套接字\",{\"1\":{\"2229\":1}}],[\"udp\",{\"1\":{\"2229\":1,\"2697\":1}}],[\"udp网络通信\",{\"0\":{\"2229\":1}}],[\"udp网络编程\",{\"0\":{\"2228\":1}}],[\"udp网络编程中发送端和接收端的channe\",{\"1\":{\"2161\":1}}],[\"udp编程\",{\"0\":{\"2227\":1}}],[\"udp协议中每个数据报都给出了完整的地址信息\",{\"1\":{\"2229\":1}}],[\"udp协议\",{\"0\":{\"2205\":1}}],[\"ucs\",{\"1\":{\"2111\":1}}],[\"u4\",{\"1\":{\"1935\":2}}],[\"u3\",{\"1\":{\"1935\":2}}],[\"u2\",{\"1\":{\"1906\":2,\"1935\":2,\"1936\":2}}],[\"u>\",{\"1\":{\"1670\":1}}],[\"uml类图\",{\"0\":{\"1536\":1}}],[\"u盘结束工作\",{\"1\":{\"1512\":1}}],[\"u盘开启工作\",{\"1\":{\"1512\":1}}],[\"u1\",{\"1\":{\"1343\":1,\"1906\":2,\"1935\":2,\"1936\":2}}],[\"u0000\",{\"1\":{\"1273\":1}}],[\"u0043\",{\"1\":{\"1102\":1}}],[\"undeﬁned\",{\"1\":{\"3548\":2}}],[\"unzip\",{\"1\":{\"3300\":1}}],[\"until\",{\"1\":{\"3154\":1,\"3563\":1,\"3656\":1}}],[\"untreeify\",{\"1\":{\"1928\":1}}],[\"unbounded\",{\"1\":{\"3029\":1}}],[\"uncomment\",{\"1\":{\"3328\":1}}],[\"uncommitted\",{\"1\":{\"2638\":1}}],[\"unchecked\",{\"1\":{\"1571\":1,\"1677\":1,\"1678\":1}}],[\"unassigned\",{\"1\":{\"3278\":2,\"3279\":2,\"3280\":2,\"3378\":2,\"3380\":2,\"3384\":2,\"3509\":1}}],[\"unaryoperator<t>\",{\"1\":{\"2450\":1}}],[\"unaryoperator\",{\"1\":{\"2450\":1}}],[\"uname>\",{\"1\":{\"3019\":1}}],[\"uname=aaron\",{\"1\":{\"2858\":1}}],[\"uname=sgugo\",{\"1\":{\"2846\":2}}],[\"uname=shk\",{\"1\":{\"2237\":1}}],[\"uname=jinno\",{\"1\":{\"1938\":1}}],[\"uname\",{\"1\":{\"644\":2,\"1282\":1,\"1302\":1,\"1304\":1,\"1319\":4,\"1330\":1,\"1940\":1,\"2857\":1,\"2878\":1,\"3198\":1,\"3199\":1}}],[\"unlock\",{\"1\":{\"1780\":1,\"1783\":1,\"1784\":2}}],[\"unique\",{\"1\":{\"3625\":1}}],[\"unicast\",{\"1\":{\"3526\":1}}],[\"unicode只是定义了一个庞大的\",{\"1\":{\"2111\":1}}],[\"unicode在很长一段时间内无法推广\",{\"1\":{\"2111\":1}}],[\"unicode不完美\",{\"1\":{\"2111\":1}}],[\"unicode是一种将全世界所有文字都包含的编码集\",{\"1\":{\"2111\":1}}],[\"unicode与utf\",{\"0\":{\"2111\":1},\"1\":{\"2111\":1}}],[\"unicode\",{\"1\":{\"997\":2,\"1102\":2,\"1103\":2,\"2109\":1,\"2111\":1,\"3466\":1}}],[\"uniform\",{\"1\":{\"2236\":1,\"2243\":1}}],[\"unix和url使用\",{\"1\":{\"2012\":1}}],[\"unix行模式\",{\"1\":{\"997\":1}}],[\"unix\",{\"1\":{\"997\":1}}],[\"unsupportedoperationexception\",{\"1\":{\"897\":1}}],[\"unsupportedencodingexception\",{\"1\":{\"674\":2}}],[\"unnecessary\",{\"1\":{\"783\":1,\"784\":1}}],[\"unused\",{\"1\":{\"578\":1}}],[\"unknownhostexception\",{\"1\":{\"2192\":1,\"2213\":1,\"2219\":1}}],[\"unknown\",{\"1\":{\"349\":1,\"1680\":2}}],[\"ui\",{\"1\":{\"1540\":1,\"1687\":1}}],[\"uid\",{\"1\":{\"468\":2,\"485\":1}}],[\"ui设计师\",{\"1\":{\"33\":1}}],[\"ui设计\",{\"0\":{\"24\":1},\"1\":{\"23\":1}}],[\"u\",{\"1\":{\"429\":2,\"2241\":1,\"2426\":1,\"3305\":1,\"3315\":1,\"3328\":1,\"3343\":1,\"3348\":1}}],[\"uuid\",{\"1\":{\"423\":1,\"3108\":1,\"3124\":1,\"3127\":1,\"3283\":1,\"3381\":1,\"3712\":3}}],[\"uhsh\",{\"1\":{\"416\":1}}],[\"uptime\",{\"1\":{\"3670\":1,\"3673\":1,\"3674\":1}}],[\"upper\",{\"1\":{\"3191\":1}}],[\"uppercase\",{\"1\":{\"2118\":2}}],[\"upgrade\",{\"1\":{\"2850\":1}}],[\"updata\",{\"1\":{\"2634\":1}}],[\"updatemany\",{\"1\":{\"3597\":1}}],[\"updatemulti的用法和updatefirst完全一样\",{\"1\":{\"407\":1}}],[\"updatemulti\",{\"0\":{\"407\":1},\"1\":{\"402\":1,\"407\":1}}],[\"updateone\",{\"1\":{\"3596\":1}}],[\"updaterequest\",{\"1\":{\"3217\":3}}],[\"updateresponse\",{\"1\":{\"3217\":1}}],[\"updateresponse<user>\",{\"1\":{\"429\":1}}],[\"updateresult\",{\"1\":{\"406\":3,\"407\":3}}],[\"updateresult对象\",{\"1\":{\"406\":1}}],[\"updatebyid\",{\"1\":{\"623\":1,\"636\":1}}],[\"updatecheck=\",{\"1\":{\"478\":1}}],[\"updated表示更新\",{\"1\":{\"429\":1}}],[\"updated\",{\"1\":{\"429\":1,\"3144\":3,\"3146\":1}}],[\"updatedocumenttest\",{\"1\":{\"429\":1}}],[\"updatetest\",{\"1\":{\"406\":1,\"407\":1}}],[\"update\",{\"1\":{\"406\":6,\"407\":5,\"429\":2,\"433\":1,\"623\":1,\"635\":1,\"640\":1,\"647\":1,\"2577\":1,\"2581\":1,\"2582\":3,\"2614\":1,\"2635\":4,\"2642\":1,\"2648\":1,\"2653\":2,\"2655\":1,\"2656\":5,\"2657\":1,\"2683\":2,\"2686\":1,\"2687\":1,\"2750\":3,\"3097\":1,\"3145\":1,\"3217\":2,\"3402\":1,\"3594\":3,\"3598\":1}}],[\"updatefirst只能更新符合条件的第一个文档\",{\"1\":{\"407\":1}}],[\"updatefirst\",{\"0\":{\"406\":1},\"1\":{\"402\":1,\"406\":1}}],[\"upsert是updatefirst方法的别名\",{\"1\":{\"406\":1}}],[\"upsert\",{\"0\":{\"406\":1},\"1\":{\"402\":1,\"3595\":1}}],[\"up\",{\"1\":{\"349\":1,\"350\":1,\"783\":1,\"784\":2}}],[\"uri是以一种抽象的\",{\"1\":{\"2243\":1}}],[\"uri的格式\",{\"0\":{\"389\":1}}],[\"uri链接\",{\"1\":{\"388\":1}}],[\"uri\",{\"0\":{\"2243\":1},\"1\":{\"321\":1,\"388\":2,\"2167\":2,\"2243\":1,\"3751\":1}}],[\"url地址\",{\"1\":{\"3278\":1}}],[\"url地址的字符串\",{\"1\":{\"2238\":1}}],[\"urlencoder\",{\"1\":{\"3054\":1}}],[\"url解码解析\",{\"1\":{\"3054\":1}}],[\"url>\",{\"1\":{\"3019\":1}}],[\"urlpattern一共有四种匹配模式\",{\"1\":{\"2821\":1}}],[\"urlpatterns\",{\"1\":{\"2820\":1,\"2822\":1,\"2823\":1,\"2824\":1,\"2825\":1}}],[\"urlpatterns=\",{\"1\":{\"2800\":1,\"2819\":1}}],[\"urlpattern\",{\"0\":{\"2818\":1}}],[\"url=jdbc\",{\"1\":{\"2550\":1,\"2673\":1}}],[\"url和urn都是一种uri\",{\"1\":{\"2243\":1}}],[\"url和urn的区别\",{\"0\":{\"2243\":1}}],[\"urlconnectonn\",{\"1\":{\"2241\":1}}],[\"urlconnection对象\",{\"1\":{\"2241\":1}}],[\"urlconnection的创建\",{\"0\":{\"2241\":1}}],[\"urlconnection类是专门针对http协议的\",{\"1\":{\"2240\":1}}],[\"urlconnection\",{\"0\":{\"2240\":1},\"1\":{\"2244\":1}}],[\"url的格式为\",{\"1\":{\"2542\":1}}],[\"url的方法\",{\"1\":{\"2240\":1}}],[\"url的基本结构\",{\"0\":{\"2237\":1}}],[\"url类常用方法\",{\"0\":{\"2239\":1}}],[\"url类的构造器都声明抛出非运行时异常\",{\"1\":{\"2238\":1}}],[\"url类\",{\"0\":{\"2238\":1}}],[\"url介绍\",{\"0\":{\"2236\":1}}],[\"url编程\",{\"0\":{\"2235\":1}}],[\"url\",{\"0\":{\"2542\":1},\"1\":{\"95\":1,\"154\":1,\"155\":1,\"156\":1,\"200\":1,\"324\":1,\"326\":1,\"337\":1,\"356\":1,\"362\":1,\"368\":1,\"372\":1,\"451\":1,\"617\":1,\"2236\":3,\"2238\":20,\"2241\":3,\"2244\":3,\"2539\":1,\"2540\":1,\"2545\":2,\"2547\":2,\"2548\":2,\"2551\":3,\"2567\":1,\"2573\":3,\"2575\":3,\"2674\":1,\"2750\":1,\"2845\":1,\"3144\":1,\"3477\":1}}],[\"util类库\",{\"0\":{\"2987\":1}}],[\"util\",{\"1\":{\"707\":1,\"708\":1,\"723\":2,\"741\":1,\"889\":2,\"919\":1,\"984\":2,\"986\":1,\"1058\":2,\"1059\":1,\"1186\":1,\"1338\":1,\"1778\":1,\"1784\":1,\"2252\":1,\"2349\":3,\"2386\":1,\"2436\":1,\"2495\":1,\"2570\":1,\"2573\":1,\"2574\":1}}],[\"utils包\",{\"1\":{\"646\":1}}],[\"utils\",{\"1\":{\"472\":1,\"589\":1,\"645\":1,\"1540\":1}}],[\"util包\",{\"0\":{\"58\":1,\"1006\":1}}],[\"utf8\",{\"1\":{\"2099\":1}}],[\"utf\",{\"0\":{\"2112\":1},\"1\":{\"308\":1,\"478\":1,\"506\":1,\"511\":1,\"1061\":2,\"1103\":1,\"2096\":1,\"2099\":1,\"2101\":1,\"2106\":1,\"2109\":1,\"2111\":3,\"2877\":2,\"2878\":1,\"2880\":1,\"2896\":1,\"3019\":1,\"3020\":2,\"3027\":1,\"3054\":1,\"3488\":1}}],[\"using\",{\"1\":{\"2755\":1,\"3328\":1,\"3355\":1,\"3664\":1}}],[\"usb结束工作\",{\"1\":{\"1512\":2}}],[\"usb开始工作\",{\"1\":{\"1512\":2}}],[\"usb\",{\"1\":{\"1512\":11}}],[\"usb是他们的一个功能\",{\"1\":{\"1505\":1}}],[\"usa\",{\"1\":{\"1478\":1}}],[\"use=\",{\"1\":{\"3029\":1}}],[\"used\",{\"1\":{\"1059\":1,\"2683\":1}}],[\"use\",{\"0\":{\"1671\":1},\"1\":{\"483\":1,\"1660\":1,\"1669\":2,\"2708\":1,\"3298\":1,\"3305\":1,\"3328\":1,\"3355\":1,\"3564\":1,\"3575\":1,\"3675\":1,\"3682\":1,\"3708\":1,\"3709\":1,\"3710\":1,\"3715\":1,\"3721\":1,\"3724\":1}}],[\"useradminanydatabase\",{\"1\":{\"3703\":1,\"3704\":1,\"3710\":1}}],[\"useradmin\",{\"1\":{\"3701\":1,\"3703\":1,\"3704\":1}}],[\"useradd\",{\"1\":{\"3291\":1,\"3322\":1}}],[\"user创建索引\",{\"1\":{\"3379\":1}}],[\"user3\",{\"1\":{\"3220\":2,\"3221\":2}}],[\"user2\",{\"1\":{\"3220\":2,\"3221\":2}}],[\"user1\",{\"1\":{\"3220\":2,\"3221\":2}}],[\"userjson\",{\"1\":{\"3214\":2}}],[\"user下的所有资源\",{\"1\":{\"2949\":1}}],[\"user=root\",{\"1\":{\"2550\":1}}],[\"user类\",{\"1\":{\"2321\":1}}],[\"user类中已经重写了compareto\",{\"1\":{\"1935\":1}}],[\"userdir\",{\"1\":{\"884\":2}}],[\"userhome\",{\"1\":{\"884\":2}}],[\"user自动赋值给user对象\",{\"1\":{\"546\":1}}],[\"userid字段的单字段正序索引\",{\"1\":{\"3628\":1}}],[\"userid=10\",{\"1\":{\"408\":1}}],[\"userid=2\",{\"1\":{\"408\":1,\"409\":1}}],[\"userid\",{\"1\":{\"394\":1,\"3587\":1,\"3590\":2,\"3597\":1,\"3606\":2,\"3607\":1,\"3609\":1,\"3611\":1,\"3613\":1,\"3615\":2,\"3616\":1,\"3620\":1,\"3626\":3,\"3627\":5,\"3628\":2,\"3630\":2,\"3634\":1,\"3636\":2,\"3682\":1,\"3712\":3}}],[\"usernamepasswordcredentials\",{\"1\":{\"418\":2}}],[\"username=root\",{\"1\":{\"2673\":1}}],[\"username=\",{\"1\":{\"2502\":1,\"2505\":1,\"2507\":2,\"2508\":1}}],[\"username=aaron\",{\"1\":{\"408\":1,\"432\":2}}],[\"username=jinno\",{\"1\":{\"408\":1,\"409\":1}}],[\"username\",{\"1\":{\"154\":1,\"155\":1,\"200\":1,\"356\":1,\"362\":1,\"372\":1,\"389\":1,\"394\":1,\"404\":1,\"410\":1,\"416\":1,\"418\":5,\"427\":1,\"439\":1,\"546\":1,\"617\":1,\"884\":2,\"2469\":4,\"2558\":2,\"2674\":1,\"2871\":1,\"2872\":4,\"3054\":1,\"3750\":1,\"3751\":1}}],[\"user\",{\"1\":{\"151\":1,\"152\":1,\"423\":3,\"424\":1,\"425\":1,\"427\":1,\"428\":6,\"429\":7,\"430\":1,\"431\":2,\"432\":5,\"546\":3,\"578\":1,\"884\":3,\"1019\":1,\"1336\":1,\"1343\":2,\"1401\":5,\"1902\":3,\"1905\":13,\"1906\":6,\"1935\":8,\"1936\":6,\"2015\":1,\"2202\":1,\"2237\":1,\"2282\":4,\"2543\":1,\"2545\":1,\"2547\":2,\"2548\":2,\"2551\":3,\"2558\":6,\"2559\":3,\"2567\":1,\"2573\":3,\"2575\":3,\"2635\":4,\"2639\":7,\"2822\":2,\"2823\":2,\"2850\":2,\"2949\":2,\"3087\":3,\"3199\":1,\"3209\":1,\"3211\":1,\"3212\":1,\"3214\":8,\"3215\":2,\"3217\":1,\"3218\":1,\"3220\":3,\"3221\":3,\"3225\":1,\"3226\":1,\"3227\":3,\"3231\":2,\"3234\":1,\"3237\":1,\"3240\":1,\"3242\":1,\"3244\":1,\"3249\":1,\"3253\":2,\"3282\":3,\"3283\":3,\"3305\":1,\"3307\":1,\"3327\":1,\"3328\":1,\"3348\":2,\"3355\":1,\"3381\":2,\"3393\":1,\"3581\":1,\"3707\":2,\"3709\":1,\"3710\":1,\"3711\":1,\"3712\":3,\"3724\":1}}],[\"users中\",{\"1\":{\"3711\":1,\"3712\":1}}],[\"users3\",{\"1\":{\"148\":1}}],[\"users2\",{\"1\":{\"148\":1}}],[\"users\",{\"1\":{\"148\":1,\"151\":1,\"884\":1,\"1218\":4,\"2755\":1,\"3379\":1,\"3394\":1,\"3452\":1,\"3454\":1,\"3712\":2}}],[\"usr\",{\"1\":{\"252\":1,\"1035\":1}}],[\"ixcan\",{\"1\":{\"3635\":1}}],[\"ixlamg6eb1v57\",{\"1\":{\"3328\":1}}],[\"ik分词器支持词汇扩展\",{\"1\":{\"3484\":1}}],[\"ik分词器有两种模式\",{\"1\":{\"3481\":1}}],[\"ik分词器的\",{\"0\":{\"3481\":1}}],[\"ik分词器的版本必须严格和es版本一致\",{\"1\":{\"3479\":1}}],[\"ik分词器的版本要与elasticsearch的版本完全对应\",{\"1\":{\"3478\":1}}],[\"ik分词器文档\",{\"1\":{\"3480\":1}}],[\"ik分词器\",{\"1\":{\"3478\":1}}],[\"ikanalyzer是一个开源的\",{\"1\":{\"3477\":1}}],[\"ik中文分词器\",{\"1\":{\"3477\":1}}],[\"ik\",{\"0\":{\"3477\":1,\"3478\":1,\"3482\":1,\"3483\":1},\"1\":{\"3475\":1,\"3479\":1,\"3480\":1,\"3481\":4,\"3482\":1,\"3484\":1,\"3485\":1,\"3487\":1,\"3489\":1}}],[\"illegalmonitorstateexception异常\",{\"1\":{\"1799\":1}}],[\"illegalthreadstateexception异常\",{\"1\":{\"1725\":1}}],[\"illegalargumentexception\",{\"1\":{\"865\":1,\"874\":1,\"877\":1,\"1627\":1,\"2076\":1,\"2077\":1,\"2078\":1,\"2079\":1}}],[\"illegalaccessexception异常\",{\"1\":{\"2285\":1}}],[\"illegalaccessexception\",{\"1\":{\"839\":1,\"865\":1,\"874\":1,\"877\":1}}],[\"iq+10\",{\"1\":{\"1354\":1}}],[\"iq++\",{\"1\":{\"1354\":1}}],[\"iq\",{\"1\":{\"1354\":2}}],[\"i表示int类型\",{\"1\":{\"1238\":1}}],[\"i被j除尽\",{\"1\":{\"1204\":1}}],[\"i变量的声明别忘了加数据类型\",{\"1\":{\"1181\":1}}],[\"i<coll\",{\"1\":{\"1844\":1}}],[\"i<=num\",{\"1\":{\"1810\":1}}],[\"i<50\",{\"1\":{\"1737\":1}}],[\"i<p1\",{\"1\":{\"1266\":1}}],[\"i<nums\",{\"1\":{\"1222\":1}}],[\"i<array2\",{\"1\":{\"1214\":1}}],[\"i<10\",{\"1\":{\"1185\":1,\"1729\":1}}],[\"i<100\",{\"1\":{\"1181\":1,\"1720\":2,\"1817\":1}}],[\"i<len\",{\"1\":{\"814\":1,\"2053\":1}}],[\"i=0\",{\"1\":{\"1181\":1,\"1214\":1,\"1222\":1,\"1266\":1,\"1810\":1,\"1817\":1,\"1844\":1,\"2053\":1}}],[\"i4\",{\"1\":{\"1143\":1}}],[\"i3\",{\"1\":{\"1143\":1}}],[\"i2\",{\"1\":{\"1112\":1,\"1114\":2,\"1117\":2,\"1143\":2}}],[\"i2bat8\",{\"1\":{\"677\":2,\"678\":2,\"679\":1,\"680\":1}}],[\"i18n\",{\"1\":{\"3352\":1}}],[\"i1\",{\"1\":{\"1112\":2,\"1114\":1,\"1117\":1,\"1143\":2,\"1144\":4,\"1442\":2}}],[\"itcast\",{\"1\":{\"3029\":2,\"3030\":2}}],[\"item\",{\"1\":{\"1874\":2}}],[\"iterate\",{\"1\":{\"2449\":1,\"2450\":2}}],[\"iterator方法也得到了了嵌套的泛型\",{\"1\":{\"1958\":1}}],[\"iterator方法和iterator对象\",{\"0\":{\"1836\":1}}],[\"iterator1\",{\"1\":{\"1935\":3}}],[\"iterator对象\",{\"0\":{\"1837\":1}}],[\"iterator对象称为迭代器\",{\"1\":{\"1835\":1,\"1836\":1}}],[\"iterator对象有一个指针\",{\"1\":{\"923\":1,\"1839\":1}}],[\"iterator是个迭代器接口\",{\"1\":{\"1834\":1}}],[\"iteratorannotations\",{\"1\":{\"1680\":3}}],[\"iterator<\",{\"1\":{\"1995\":1,\"1996\":1}}],[\"iterator<map\",{\"1\":{\"1958\":1}}],[\"iterator<integer>\",{\"1\":{\"924\":1,\"925\":1,\"926\":1,\"1957\":1}}],[\"iterator<e>\",{\"1\":{\"919\":1,\"921\":1}}],[\"iterator<string>\",{\"1\":{\"885\":1,\"1006\":1}}],[\"iterator\",{\"0\":{\"919\":1,\"920\":1,\"1833\":1,\"1834\":1},\"1\":{\"919\":3,\"920\":1,\"924\":1,\"925\":2,\"926\":1,\"969\":2,\"971\":2,\"1837\":2,\"1840\":1,\"1842\":2,\"1902\":2,\"1935\":2,\"1957\":1,\"1958\":4,\"1995\":4,\"1996\":4}}],[\"iterable接口\",{\"1\":{\"1836\":1}}],[\"iterable<e>\",{\"1\":{\"902\":1}}],[\"it\",{\"1\":{\"919\":2,\"924\":2,\"925\":2,\"926\":3,\"969\":3,\"971\":3,\"1842\":1,\"1843\":4,\"1844\":1,\"1845\":2,\"1848\":3,\"1902\":3,\"1957\":3,\"3267\":1,\"3305\":1,\"3328\":1,\"3503\":1}}],[\"itheima\",{\"1\":{\"246\":1,\"295\":1}}],[\"i++\",{\"1\":{\"814\":1,\"1181\":1,\"1184\":1,\"1185\":1,\"1198\":1,\"1202\":1,\"1203\":1,\"1204\":1,\"1214\":1,\"1222\":1,\"1240\":1,\"1266\":1,\"1283\":1,\"1296\":1,\"1720\":2,\"1729\":2,\"1737\":2,\"1810\":1,\"1817\":1,\"1844\":1,\"1854\":2,\"1855\":1,\"2053\":1,\"2056\":1,\"2121\":1,\"2296\":2,\"2581\":1,\"2600\":2,\"2603\":2,\"2620\":1,\"2621\":1,\"2624\":1,\"2625\":1,\"2634\":1,\"2653\":6}}],[\"ibookservice\",{\"1\":{\"636\":1,\"637\":2,\"640\":1,\"647\":1}}],[\"ibatis\",{\"1\":{\"624\":1}}],[\"iws\",{\"1\":{\"578\":1}}],[\"images\",{\"1\":{\"3141\":1,\"3142\":2,\"3159\":1,\"3160\":2}}],[\"image\",{\"1\":{\"2932\":1,\"2934\":1}}],[\"img\",{\"1\":{\"786\":1,\"810\":2,\"2016\":2}}],[\"iml\",{\"1\":{\"578\":1}}],[\"iml等\",{\"1\":{\"576\":1}}],[\"implicit\",{\"1\":{\"3675\":1}}],[\"impl作为业务层实现类\",{\"1\":{\"634\":1}}],[\"impl\",{\"1\":{\"418\":1,\"471\":2,\"589\":1,\"624\":1}}],[\"implemented\",{\"1\":{\"1643\":1}}],[\"implement\",{\"1\":{\"1467\":1,\"2973\":1,\"2974\":1}}],[\"implements\",{\"1\":{\"347\":1,\"452\":1,\"471\":1,\"514\":1,\"523\":1,\"525\":1,\"527\":1,\"530\":1,\"536\":1,\"636\":1,\"637\":1,\"688\":2,\"714\":1,\"715\":1,\"723\":1,\"749\":1,\"777\":1,\"778\":1,\"786\":1,\"812\":2,\"820\":1,\"832\":1,\"860\":1,\"885\":1,\"893\":1,\"994\":1,\"1003\":1,\"1006\":1,\"1458\":1,\"1509\":1,\"1510\":2,\"1512\":1,\"1630\":1,\"1740\":1,\"1747\":1,\"1757\":1,\"1760\":1,\"1768\":1,\"1784\":1,\"1804\":1,\"1810\":1,\"1817\":1,\"2155\":1,\"2238\":1,\"2328\":1,\"2329\":1,\"2343\":1,\"2656\":1,\"2779\":1,\"2780\":1,\"2804\":1,\"2819\":1,\"2945\":1}}],[\"implementation\",{\"1\":{\"246\":4}}],[\"important\",{\"1\":{\"3267\":1,\"3312\":1,\"3345\":1,\"3503\":1}}],[\"import的使用细节\",{\"0\":{\"1342\":1}}],[\"import的加载方式是一种精准的bean加载方式\",{\"1\":{\"516\":1}}],[\"import语句告诉编译器到哪里去寻找类\",{\"1\":{\"1340\":1}}],[\"import动态声明为bean\",{\"1\":{\"554\":1}}],[\"importingclassmetadata\",{\"1\":{\"536\":1}}],[\"import导入beandefinitionregistrypostprocessor\",{\"1\":{\"535\":1}}],[\"import导入importbeandefinitionregistrar\",{\"1\":{\"535\":1}}],[\"import导入importselector\",{\"1\":{\"535\":1}}],[\"importbeandefinitionregistrar的实现类提供元数据\",{\"1\":{\"528\":1}}],[\"importbeandefinitionregistrar接口是\",{\"1\":{\"526\":1}}],[\"importbeandefinitionregistrar\",{\"0\":{\"526\":1},\"1\":{\"527\":1}}],[\"importselector是将selectimports方法返回的字符串数组\",{\"1\":{\"567\":1}}],[\"importselector接口的加强版\",{\"1\":{\"526\":1}}],[\"importselector\",{\"0\":{\"522\":1},\"1\":{\"523\":1,\"525\":1,\"536\":1}}],[\"import注解\",{\"1\":{\"566\":1}}],[\"import注解加载该实现类\",{\"1\":{\"524\":1}}],[\"import注解加载配置类\",{\"1\":{\"518\":1}}],[\"import注解在特殊场景很有用\",{\"1\":{\"517\":1}}],[\"import\",{\"0\":{\"516\":1,\"567\":1,\"1339\":1,\"1346\":1},\"1\":{\"406\":2,\"407\":2,\"418\":30,\"518\":2,\"524\":1,\"528\":2,\"555\":1,\"563\":2,\"565\":1,\"566\":1,\"1186\":1,\"1341\":2,\"1345\":1,\"1346\":1,\"1587\":4,\"1680\":7,\"1784\":1,\"2164\":3,\"2545\":1,\"2672\":2,\"2945\":2,\"3210\":2}}],[\"ifpresent\",{\"0\":{\"2505\":1},\"1\":{\"2505\":2}}],[\"if\",{\"0\":{\"1166\":1,\"1177\":1},\"1\":{\"350\":1,\"525\":1,\"536\":1,\"633\":1,\"647\":3,\"746\":1,\"749\":4,\"756\":1,\"757\":2,\"803\":2,\"804\":2,\"805\":2,\"827\":1,\"893\":2,\"1149\":2,\"1165\":1,\"1168\":1,\"1169\":1,\"1170\":3,\"1171\":1,\"1181\":1,\"1184\":1,\"1186\":2,\"1189\":1,\"1198\":1,\"1204\":2,\"1283\":1,\"1304\":1,\"1416\":2,\"1428\":7,\"1489\":1,\"1592\":1,\"1609\":1,\"1680\":1,\"1720\":2,\"1729\":3,\"1740\":1,\"1757\":1,\"1760\":1,\"1768\":1,\"1769\":3,\"1784\":1,\"1804\":1,\"1848\":1,\"1905\":2,\"1906\":1,\"1936\":1,\"2052\":1,\"2053\":1,\"2064\":1,\"2065\":2,\"2071\":2,\"2076\":1,\"2077\":1,\"2078\":1,\"2079\":1,\"2082\":1,\"2084\":2,\"2118\":2,\"2121\":3,\"2231\":1,\"2232\":1,\"2296\":4,\"2573\":2,\"2576\":2,\"2597\":1,\"2600\":1,\"2613\":1,\"2624\":1,\"2625\":1,\"2653\":2,\"2690\":1,\"2814\":2,\"2862\":2,\"3047\":2,\"3267\":1,\"3305\":1,\"3503\":1}}],[\"i\",{\"1\":{\"304\":2,\"308\":3,\"428\":2,\"672\":1,\"679\":1,\"680\":1,\"682\":1,\"776\":2,\"814\":2,\"827\":1,\"890\":1,\"895\":2,\"933\":2,\"989\":3,\"990\":3,\"992\":1,\"997\":1,\"1135\":1,\"1145\":2,\"1181\":3,\"1184\":5,\"1185\":1,\"1198\":2,\"1202\":3,\"1203\":5,\"1204\":6,\"1214\":2,\"1220\":2,\"1222\":1,\"1238\":1,\"1240\":4,\"1266\":2,\"1283\":3,\"1295\":1,\"1296\":3,\"1426\":2,\"1466\":3,\"1526\":2,\"1688\":1,\"1720\":4,\"1722\":3,\"1729\":8,\"1737\":3,\"1810\":1,\"1852\":2,\"1854\":6,\"1855\":3,\"2021\":2,\"2053\":1,\"2056\":3,\"2121\":4,\"2296\":10,\"2369\":2,\"2581\":4,\"2600\":8,\"2603\":8,\"2620\":3,\"2621\":3,\"2624\":4,\"2625\":4,\"2634\":4,\"2653\":24,\"3391\":1,\"3441\":1,\"3501\":1,\"3515\":1,\"3548\":1,\"3670\":10,\"3673\":2,\"3674\":2,\"3700\":2,\"3701\":2}}],[\"id索引\",{\"1\":{\"3623\":1}}],[\"id计算要放入的主分片\",{\"1\":{\"3444\":1}}],[\"id查询文档\",{\"1\":{\"3225\":1}}],[\"id查询数据\",{\"0\":{\"409\":1},\"1\":{\"402\":1}}],[\"id删除文档\",{\"1\":{\"3218\":1}}],[\"id进行删除的\",{\"1\":{\"3147\":1}}],[\"id进行查看\",{\"1\":{\"3138\":1,\"3156\":1}}],[\"id不同\",{\"1\":{\"3137\":1,\"3142\":1,\"3160\":1}}],[\"id不变\",{\"1\":{\"428\":1}}],[\"id时\",{\"1\":{\"3137\":2}}],[\"id是固定的\",{\"1\":{\"3137\":1}}],[\"id是不容易记得\",{\"1\":{\"3136\":1}}],[\"id是唯一标识\",{\"1\":{\"3136\":1}}],[\"id属性值是唯一的\",{\"1\":{\"3020\":1}}],[\"identityhashcode\",{\"1\":{\"2674\":1}}],[\"identifier\",{\"1\":{\"2243\":1}}],[\"iden\",{\"1\":{\"2487\":2}}],[\"ide有一键重写功能\",{\"1\":{\"1434\":1}}],[\"ide\",{\"1\":{\"1428\":1}}],[\"idea没有使用tomcat的webapps作为项目目录\",{\"1\":{\"2759\":1}}],[\"idea会为每一个tomcat部署的项目单独建立一份配置文件\",{\"1\":{\"2755\":1}}],[\"idea会有提示\",{\"1\":{\"477\":1}}],[\"idea使用\",{\"0\":{\"2724\":1}}],[\"idea中是无法实现活化的\",{\"1\":{\"3071\":1}}],[\"idea中快速使用\",{\"0\":{\"2787\":1}}],[\"idea中\",{\"1\":{\"2707\":1}}],[\"idea连接数据库\",{\"1\":{\"586\":1}}],[\"idea也会有提示\",{\"1\":{\"560\":1}}],[\"idea文件\",{\"1\":{\"103\":1}}],[\"idea\",{\"0\":{\"2355\":1,\"2729\":1,\"2732\":1},\"1\":{\"10\":1,\"161\":1,\"576\":1,\"578\":4,\"2720\":1}}],[\"id=1008\",{\"1\":{\"2484\":1}}],[\"id=1001\",{\"1\":{\"2480\":1,\"2481\":1}}],[\"id=\",{\"1\":{\"506\":2,\"3019\":1}}],[\"id=64a4df85481a3664d13fb90e\",{\"1\":{\"408\":1}}],[\"id=64a4d9aaad5837556a80e329\",{\"1\":{\"408\":1,\"409\":1}}],[\"id的数据类型是有限制的\",{\"1\":{\"398\":1}}],[\"id注解手动将一个字段与\",{\"1\":{\"397\":1}}],[\"id注解\",{\"1\":{\"397\":1}}],[\"id字段默认总是显示的\",{\"1\":{\"3607\":1}}],[\"id字段设置为主键\",{\"1\":{\"3545\":1}}],[\"id字段后\",{\"1\":{\"398\":1}}],[\"id字段建立映射\",{\"1\":{\"397\":1}}],[\"id字段的数据类型是objectid\",{\"1\":{\"396\":1}}],[\"id字段\",{\"1\":{\"396\":1,\"397\":1}}],[\"id与\",{\"0\":{\"396\":1}}],[\"id\",{\"0\":{\"396\":1,\"431\":1,\"432\":1,\"3136\":1,\"3157\":1,\"3225\":1},\"1\":{\"342\":1,\"364\":1,\"365\":3,\"394\":2,\"403\":1,\"409\":1,\"428\":4,\"429\":2,\"430\":1,\"431\":2,\"432\":2,\"452\":8,\"455\":4,\"507\":1,\"618\":1,\"619\":1,\"624\":1,\"635\":2,\"636\":2,\"640\":6,\"644\":2,\"647\":6,\"1287\":3,\"1380\":1,\"1609\":5,\"1980\":1,\"2290\":1,\"2292\":1,\"2424\":2,\"2427\":2,\"2457\":1,\"2462\":1,\"2577\":1,\"2582\":2,\"2597\":4,\"2599\":4,\"2601\":2,\"2604\":2,\"2613\":5,\"2619\":1,\"2655\":2,\"2656\":9,\"2687\":1,\"2688\":2,\"2689\":2,\"2690\":5,\"2691\":1,\"3025\":1,\"3135\":1,\"3136\":2,\"3139\":1,\"3141\":2,\"3142\":4,\"3143\":1,\"3144\":2,\"3145\":1,\"3147\":1,\"3149\":1,\"3150\":1,\"3157\":1,\"3159\":2,\"3160\":4,\"3164\":2,\"3214\":2,\"3217\":2,\"3218\":3,\"3220\":3,\"3221\":3,\"3224\":1,\"3225\":2,\"3227\":2,\"3231\":1,\"3253\":1,\"3400\":1,\"3410\":1,\"3413\":1,\"3524\":1,\"3527\":2,\"3547\":1,\"3548\":1,\"3588\":1,\"3590\":2,\"3591\":1,\"3594\":1,\"3596\":1,\"3598\":1,\"3601\":1,\"3607\":1,\"3623\":6,\"3626\":2,\"3627\":2,\"3631\":2,\"3636\":1,\"3667\":2,\"3668\":1,\"3670\":1,\"3673\":1,\"3674\":1,\"3712\":3}}],[\"id>\",{\"1\":{\"281\":2}}],[\"idx\",{\"1\":{\"246\":2,\"2166\":2}}],[\"ip+port\",{\"1\":{\"3570\":1}}],[\"ip相同\",{\"1\":{\"3335\":1}}],[\"ip或hostname\",{\"1\":{\"3308\":1,\"3330\":1}}],[\"iphone\",{\"1\":{\"3164\":1,\"3176\":2}}],[\"ipxx\",{\"1\":{\"2711\":1}}],[\"ip层\",{\"1\":{\"2203\":1}}],[\"ipv6\",{\"1\":{\"2181\":1}}],[\"ipv4\",{\"1\":{\"2181\":1}}],[\"ipv4和ipv6\",{\"0\":{\"2181\":1}}],[\"ip地址\",{\"1\":{\"3268\":1,\"3477\":1}}],[\"ip地址分类\",{\"0\":{\"2180\":1}}],[\"ip地址介绍\",{\"0\":{\"2179\":1}}],[\"ip与端口号\",{\"0\":{\"2177\":1,\"2178\":1}}],[\"ip协议模型从更实用的角度出发\",{\"1\":{\"2203\":1}}],[\"ip协议\",{\"1\":{\"2174\":1,\"2203\":1}}],[\"ip参考模型\",{\"1\":{\"2174\":1}}],[\"ip和端口号\",{\"1\":{\"2173\":1}}],[\"ipage<book>\",{\"1\":{\"635\":1,\"636\":2,\"640\":1,\"647\":1}}],[\"ipage\",{\"0\":{\"627\":1},\"1\":{\"627\":1,\"628\":1,\"636\":2}}],[\"ipaddress属性各种书写模式\",{\"1\":{\"211\":1}}],[\"ipaddress\",{\"1\":{\"208\":1,\"211\":2}}],[\"ipr\",{\"1\":{\"578\":1}}],[\"ip\",{\"0\":{\"2203\":1},\"1\":{\"211\":3,\"214\":1,\"321\":1,\"389\":2,\"2174\":1,\"2189\":1,\"2192\":2,\"2203\":3,\"2214\":1,\"2217\":1,\"2233\":4,\"2234\":1,\"2244\":2,\"2697\":1,\"2846\":2,\"3268\":1,\"3269\":1,\"3270\":1,\"3271\":1,\"3337\":1,\"3674\":1}}],[\"isbuiltin\",{\"1\":{\"3701\":6}}],[\"isnullable\",{\"1\":{\"2593\":1}}],[\"isnotempty\",{\"1\":{\"636\":3}}],[\"ispresent\",{\"0\":{\"2504\":1},\"1\":{\"2504\":2}}],[\"iswritable\",{\"1\":{\"2168\":1}}],[\"ismale\",{\"1\":{\"2127\":3}}],[\"ismale=true\",{\"0\":{\"1549\":1}}],[\"isreachable\",{\"0\":{\"2196\":1},\"1\":{\"2196\":2}}],[\"isreadable\",{\"1\":{\"2168\":1}}],[\"isregularfile\",{\"1\":{\"2168\":1}}],[\"isr\",{\"1\":{\"2095\":1,\"2096\":1,\"2099\":2,\"2101\":2,\"2106\":3,\"2118\":2}}],[\"isacknowledged\",{\"1\":{\"3209\":1,\"3212\":1}}],[\"isautoincrement\",{\"1\":{\"2593\":1}}],[\"isabsolute\",{\"1\":{\"2166\":1}}],[\"isalive\",{\"1\":{\"1727\":1,\"1729\":2}}],[\"isannotationpresent\",{\"1\":{\"1680\":1}}],[\"isxxx\",{\"1\":{\"1531\":1}}],[\"isflag\",{\"1\":{\"1204\":4}}],[\"isfile\",{\"0\":{\"798\":1},\"1\":{\"798\":2}}],[\"ishidden\",{\"0\":{\"801\":1},\"1\":{\"801\":2,\"2168\":1}}],[\"isdirectory\",{\"0\":{\"797\":1},\"1\":{\"797\":2,\"2168\":1}}],[\"iso8859\",{\"1\":{\"2109\":1}}],[\"isotime\",{\"1\":{\"731\":1}}],[\"isodate\",{\"1\":{\"731\":1}}],[\"isodatetime\",{\"1\":{\"731\":1,\"732\":2,\"733\":2}}],[\"iso\",{\"1\":{\"731\":6,\"732\":1,\"733\":2,\"734\":1,\"2876\":1}}],[\"isempty\",{\"0\":{\"659\":1,\"909\":1,\"967\":1},\"1\":{\"659\":2,\"909\":2,\"967\":3,\"1058\":2}}],[\"iservice<book>\",{\"1\":{\"637\":1}}],[\"issingleton\",{\"1\":{\"514\":1}}],[\"is\",{\"1\":{\"172\":1,\"212\":1,\"288\":2,\"290\":2,\"309\":2,\"404\":1,\"406\":1,\"407\":1,\"410\":1,\"418\":2,\"1059\":1,\"1060\":1,\"2282\":2,\"2551\":2,\"2573\":2,\"2575\":2,\"2612\":2,\"2613\":3,\"2672\":2,\"2675\":2,\"3267\":3,\"3298\":2,\"3305\":1,\"3313\":1,\"3328\":1,\"3346\":1,\"3348\":1,\"3355\":6,\"3479\":1,\"3503\":3,\"3563\":1,\"3656\":1,\"3707\":1}}],[\"increase\",{\"1\":{\"3313\":1,\"3346\":1,\"3348\":1}}],[\"increment\",{\"1\":{\"2619\":1}}],[\"includes\",{\"1\":{\"3233\":3,\"3234\":2}}],[\"include也要修改\",{\"1\":{\"280\":1}}],[\"include有一个问题\",{\"1\":{\"280\":1}}],[\"include\",{\"0\":{\"277\":1},\"1\":{\"278\":1,\"326\":1,\"343\":1,\"345\":1,\"423\":1,\"2950\":1,\"3124\":1,\"3210\":1,\"3283\":1,\"3381\":1}}],[\"inethostaddress\",{\"1\":{\"2194\":2}}],[\"inet4\",{\"1\":{\"2194\":2,\"2195\":2,\"2196\":2}}],[\"inet4address\",{\"1\":{\"2190\":1}}],[\"inet3\",{\"1\":{\"2193\":2}}],[\"inet2\",{\"1\":{\"2193\":2}}],[\"inetaddress\",{\"1\":{\"2190\":1,\"2191\":1,\"2192\":3,\"2193\":5,\"2194\":2,\"2195\":2,\"2196\":2,\"2212\":1,\"2214\":2,\"2219\":1,\"2231\":1,\"2233\":3,\"2234\":2,\"2244\":1}}],[\"inetaddress类主要表示ip地址\",{\"1\":{\"2190\":1}}],[\"inetaddress类\",{\"0\":{\"2188\":1}}],[\"inet6address\",{\"1\":{\"2190\":1}}],[\"in实现\",{\"1\":{\"2118\":1}}],[\"in与system\",{\"0\":{\"2116\":1}}],[\"inheritedroles\",{\"1\":{\"3701\":6}}],[\"inherited注解的自定义的注解标注在类级别上\",{\"1\":{\"1664\":1}}],[\"inherited\",{\"0\":{\"1664\":1,\"1674\":1},\"1\":{\"1638\":1,\"1650\":1,\"1656\":1,\"1664\":2,\"1674\":2,\"1680\":1}}],[\"inheritance\",{\"1\":{\"1251\":1}}],[\"inb\",{\"1\":{\"1555\":1}}],[\"inner\",{\"1\":{\"1449\":2}}],[\"in2\",{\"1\":{\"1440\":1}}],[\"in1\",{\"1\":{\"1440\":3,\"1442\":2,\"1443\":2}}],[\"inputsreamreader\",{\"1\":{\"2096\":1}}],[\"inputsteam\",{\"1\":{\"814\":1}}],[\"inputstreamreader实现将字节的输入流按指定字符集转换为字符的输入流\",{\"1\":{\"2094\":1}}],[\"inputstreamreader的字符集参数要和文件本身的编码统一\",{\"1\":{\"2092\":1}}],[\"inputstreamreader\",{\"0\":{\"2093\":1},\"1\":{\"2090\":1,\"2094\":1,\"2095\":3,\"2096\":2,\"2099\":2,\"2101\":2,\"2106\":2,\"2118\":2}}],[\"inputstream和reader都是输入流\",{\"1\":{\"812\":1}}],[\"inputstream\",{\"0\":{\"812\":1,\"2031\":1,\"2032\":1},\"1\":{\"418\":2,\"812\":2,\"813\":1,\"886\":1,\"1007\":1,\"2031\":1,\"2076\":1,\"2095\":1,\"2096\":1,\"2117\":1,\"2123\":1,\"2168\":2,\"2214\":2,\"2225\":3,\"2242\":1,\"2282\":1,\"2551\":1,\"2573\":1,\"2575\":1,\"2613\":1,\"2672\":1,\"2675\":1}}],[\"inputmismatchexception\",{\"0\":{\"1581\":1},\"1\":{\"1571\":1}}],[\"input\",{\"1\":{\"998\":2,\"1000\":2,\"1001\":2,\"1004\":1,\"2022\":1,\"2025\":1}}],[\"in\",{\"1\":{\"886\":2,\"887\":1,\"888\":1,\"1007\":2,\"1008\":1,\"1009\":1,\"1059\":1,\"1186\":1,\"1581\":1,\"2076\":2,\"2078\":4,\"2095\":1,\"2096\":1,\"2115\":1,\"2116\":1,\"2117\":1,\"2118\":2,\"2708\":1,\"3210\":1,\"3267\":3,\"3278\":2,\"3279\":2,\"3280\":2,\"3305\":3,\"3328\":2,\"3378\":2,\"3380\":2,\"3503\":3}}],[\"inverted\",{\"1\":{\"3429\":1,\"3431\":1}}],[\"invocationhandler\",{\"0\":{\"2339\":1,\"2340\":1},\"1\":{\"2338\":1,\"2343\":1}}],[\"invocationhandler接口\",{\"1\":{\"2338\":1}}],[\"invocationtargetexception\",{\"1\":{\"874\":1,\"877\":1}}],[\"invoke方法里\",{\"1\":{\"2349\":1}}],[\"invoke方法里主要做两件事\",{\"1\":{\"2333\":1}}],[\"invoke\",{\"0\":{\"874\":1,\"2314\":1,\"2340\":1},\"1\":{\"874\":2,\"1680\":2,\"2257\":1,\"2258\":1,\"2311\":2,\"2314\":1,\"2340\":1,\"2343\":3,\"2349\":3}}],[\"invalid\",{\"1\":{\"172\":1,\"212\":1}}],[\"independent\",{\"1\":{\"2536\":1}}],[\"indexes\",{\"1\":{\"3621\":2}}],[\"indexed\",{\"1\":{\"563\":1,\"564\":1}}],[\"indexrequest\",{\"1\":{\"3214\":2,\"3220\":6}}],[\"indexresponse\",{\"1\":{\"419\":2,\"428\":2,\"429\":1,\"3214\":1}}],[\"indexoutofboundsexception\",{\"0\":{\"1576\":1},\"1\":{\"937\":1,\"947\":2}}],[\"indexof\",{\"0\":{\"656\":1,\"948\":1},\"1\":{\"656\":3,\"697\":1,\"948\":2}}],[\"index方法的参数就是要创建的索引名\",{\"1\":{\"422\":1}}],[\"index\",{\"0\":{\"3360\":1},\"1\":{\"246\":2,\"419\":2,\"422\":2,\"423\":2,\"424\":1,\"425\":1,\"428\":5,\"429\":2,\"430\":1,\"431\":2,\"432\":2,\"433\":1,\"655\":1,\"945\":3,\"946\":3,\"947\":1,\"948\":1,\"950\":1,\"951\":1,\"2164\":2,\"2241\":1,\"2588\":1,\"2591\":1,\"2758\":2,\"2857\":1,\"2949\":2,\"3102\":1,\"3108\":1,\"3119\":1,\"3124\":1,\"3127\":1,\"3135\":1,\"3141\":2,\"3142\":2,\"3144\":1,\"3149\":1,\"3150\":1,\"3159\":2,\"3160\":2,\"3164\":2,\"3197\":3,\"3198\":3,\"3199\":1,\"3200\":1,\"3214\":2,\"3217\":1,\"3218\":1,\"3220\":3,\"3221\":3,\"3225\":1,\"3227\":2,\"3231\":1,\"3253\":1,\"3282\":1,\"3283\":1,\"3381\":1,\"3402\":1,\"3429\":1,\"3509\":1,\"3513\":1,\"3517\":1,\"3545\":2,\"3619\":1,\"3620\":1,\"3621\":1,\"3630\":1}}],[\"indicesexiststest\",{\"1\":{\"424\":1}}],[\"indicesquerytest\",{\"1\":{\"423\":1}}],[\"indicescreatetest\",{\"1\":{\"422\":1}}],[\"indices\",{\"1\":{\"419\":1,\"422\":2,\"423\":2,\"424\":2,\"425\":2,\"3126\":1,\"3209\":1,\"3210\":2,\"3211\":1,\"3212\":1,\"3226\":1,\"3227\":1,\"3231\":1,\"3234\":1,\"3237\":1,\"3240\":1,\"3242\":1,\"3244\":1,\"3249\":1,\"3253\":1,\"3355\":1}}],[\"install\",{\"1\":{\"1035\":1,\"3675\":1}}],[\"instancof的\",{\"0\":{\"1416\":1}}],[\"instanceof\",{\"1\":{\"749\":1,\"756\":2,\"1416\":5,\"1905\":1,\"1906\":2,\"1936\":2}}],[\"instance\",{\"1\":{\"418\":1,\"478\":1,\"506\":1,\"511\":1,\"1255\":1,\"1488\":2,\"1489\":4,\"1769\":8,\"1770\":1,\"3030\":1,\"3718\":1}}],[\"instantiationexception\",{\"1\":{\"839\":1,\"877\":1}}],[\"instant\",{\"0\":{\"723\":1},\"1\":{\"723\":2,\"724\":3,\"725\":2,\"726\":2,\"727\":3}}],[\"insecure\",{\"1\":{\"2850\":1}}],[\"insensitive的不同\",{\"1\":{\"997\":1}}],[\"insensitive\",{\"1\":{\"987\":1,\"997\":1}}],[\"insertmany\",{\"1\":{\"3589\":1,\"3590\":1,\"3592\":1}}],[\"insertedid\",{\"1\":{\"3587\":1,\"3682\":1}}],[\"insertone\",{\"1\":{\"3587\":1,\"3682\":1}}],[\"insertbatch\",{\"1\":{\"2683\":1}}],[\"inserttest\",{\"1\":{\"403\":1}}],[\"insert方法常用参数为实体类\",{\"1\":{\"403\":1}}],[\"insertall\",{\"1\":{\"402\":1}}],[\"insert\",{\"0\":{\"403\":1,\"703\":1},\"1\":{\"402\":1,\"403\":1,\"623\":1,\"636\":1,\"703\":2,\"1897\":1,\"2567\":1,\"2569\":1,\"2573\":1,\"2612\":1,\"2620\":1,\"2621\":1,\"2624\":1,\"2625\":1,\"2655\":1,\"2656\":2,\"2657\":1,\"2683\":2,\"2686\":1,\"3006\":1,\"3097\":1,\"3585\":1}}],[\"ini\",{\"1\":{\"368\":1}}],[\"initiate\",{\"1\":{\"3663\":1,\"3664\":1}}],[\"initialsize\",{\"1\":{\"2674\":1}}],[\"initialsize=10\",{\"1\":{\"2673\":1}}],[\"initializing\",{\"1\":{\"3278\":1,\"3279\":1,\"3280\":1,\"3378\":1,\"3380\":1}}],[\"initialize\",{\"0\":{\"2276\":1}}],[\"initializr的方式创建工程\",{\"1\":{\"580\":1}}],[\"initializr的方式创建监控项目\",{\"1\":{\"319\":1}}],[\"initializr方式创建的子模块\",{\"1\":{\"162\":1}}],[\"initializr项目\",{\"1\":{\"161\":1}}],[\"initializr\",{\"0\":{\"95\":1},\"1\":{\"94\":1,\"95\":1,\"162\":2}}],[\"initial\",{\"1\":{\"1928\":1,\"3268\":1,\"3269\":1,\"3270\":1,\"3271\":1,\"3273\":1,\"3274\":1,\"3275\":1,\"3277\":1,\"3278\":1,\"3307\":1,\"3327\":1,\"3332\":1,\"3337\":1,\"3339\":2,\"3355\":4}}],[\"initargs\",{\"1\":{\"877\":1}}],[\"init\",{\"0\":{\"2800\":1},\"1\":{\"358\":1,\"418\":1,\"2799\":1,\"2800\":3,\"2804\":2,\"2945\":1}}],[\"inf表示\",{\"1\":{\"2941\":1}}],[\"inf目录下含有一个web\",{\"1\":{\"2996\":1}}],[\"inf目录下的资源访问\",{\"1\":{\"2942\":1}}],[\"inf目录也在web目录下\",{\"1\":{\"2941\":1}}],[\"inf目录\",{\"1\":{\"2941\":1,\"2996\":1}}],[\"inf所在的目录为webapp\",{\"1\":{\"2743\":1}}],[\"inf下的lib目录下\",{\"1\":{\"2727\":1,\"2996\":1}}],[\"inf下的classes目录下\",{\"1\":{\"2727\":1}}],[\"infinispan\",{\"1\":{\"464\":1}}],[\"infor\",{\"1\":{\"3757\":1}}],[\"information\",{\"1\":{\"3355\":2}}],[\"info为\",{\"1\":{\"3736\":1,\"3738\":1,\"3739\":1}}],[\"infomessage\",{\"1\":{\"3670\":1,\"3673\":1,\"3674\":1}}],[\"infomap\",{\"1\":{\"347\":4}}],[\"info2\",{\"1\":{\"3664\":1}}],[\"infocontributor\",{\"1\":{\"347\":1}}],[\"info下有多个k\",{\"1\":{\"345\":1}}],[\"info信息是写在application\",{\"1\":{\"345\":1}}],[\"info端点比较特殊\",{\"1\":{\"345\":1}}],[\"info端点就是应用的描述信息\",{\"1\":{\"345\":1}}],[\"info端点\",{\"0\":{\"345\":1}}],[\"info\",{\"1\":{\"288\":2,\"290\":2,\"292\":1,\"308\":14,\"309\":2,\"342\":1,\"343\":1,\"345\":2,\"347\":1,\"379\":2,\"419\":2,\"1368\":1,\"1526\":2,\"1630\":1,\"1631\":1,\"2296\":1,\"2545\":4,\"3718\":1}}],[\"inf\",{\"1\":{\"193\":2,\"244\":2,\"245\":1,\"246\":4,\"2713\":1,\"2722\":1,\"2723\":1,\"2743\":1,\"2941\":1,\"2942\":2,\"2981\":1}}],[\"into\",{\"1\":{\"2567\":1,\"2569\":1,\"2573\":1,\"2612\":1,\"2620\":1,\"2621\":1,\"2624\":1,\"2625\":1,\"2656\":1,\"2686\":1,\"3305\":1,\"3328\":1}}],[\"intlist\",{\"1\":{\"2487\":2,\"2488\":2}}],[\"intstream\",{\"1\":{\"2446\":1,\"2447\":1,\"2465\":1}}],[\"ints1\",{\"1\":{\"671\":2}}],[\"int示例\",{\"1\":{\"1440\":1}}],[\"int类型倒序\",{\"1\":{\"893\":1}}],[\"int类型直接用也是很精准的\",{\"1\":{\"778\":1}}],[\"intval\",{\"1\":{\"778\":1}}],[\"intvalue\",{\"1\":{\"772\":1,\"1442\":1}}],[\"intro=我很酷\",{\"1\":{\"432\":2}}],[\"intro\",{\"1\":{\"427\":1}}],[\"introduction\",{\"1\":{\"109\":2}}],[\"interval\",{\"1\":{\"3453\":2,\"3454\":2,\"3516\":1}}],[\"internet上的主机有两种方式表示地址\",{\"1\":{\"2189\":1}}],[\"internet\",{\"1\":{\"2171\":1,\"2179\":1,\"2190\":1,\"2203\":1,\"2236\":2}}],[\"interger\",{\"1\":{\"1866\":1}}],[\"interruptedexception\",{\"1\":{\"1729\":2,\"1795\":2,\"1804\":1,\"1810\":1}}],[\"interceptor\",{\"1\":{\"626\":3}}],[\"interface关键字声明\",{\"1\":{\"1643\":1}}],[\"interface是注解的关键字与class平级\",{\"1\":{\"1643\":1}}],[\"interfaces1\",{\"1\":{\"2302\":2}}],[\"interfaces\",{\"1\":{\"843\":2,\"2302\":2,\"2338\":1}}],[\"interface\",{\"0\":{\"1501\":1,\"1643\":1},\"1\":{\"365\":1,\"374\":1,\"471\":2,\"622\":1,\"635\":1,\"637\":1,\"743\":2,\"752\":2,\"843\":2,\"901\":1,\"902\":1,\"920\":1,\"921\":1,\"941\":1,\"942\":1,\"953\":1,\"954\":1,\"1019\":2,\"1075\":1,\"1357\":1,\"1466\":1,\"1467\":1,\"1507\":2,\"1512\":1,\"1515\":1,\"1543\":1,\"1630\":1,\"1640\":1,\"1641\":1,\"1643\":1,\"1652\":1,\"1657\":1,\"1660\":1,\"1663\":1,\"1664\":1,\"1667\":1,\"1673\":1,\"1674\":1,\"1675\":1,\"1680\":1,\"1963\":1,\"2240\":1,\"2264\":3,\"2327\":1,\"2388\":1,\"2655\":1,\"2799\":1,\"2820\":1}}],[\"intellijidea2021\",{\"1\":{\"2755\":1}}],[\"intellij\",{\"1\":{\"578\":1}}],[\"integer中的int\",{\"1\":{\"2410\":1}}],[\"integer>>\",{\"1\":{\"1958\":2}}],[\"integer>\",{\"1\":{\"1958\":2}}],[\"integer类作为int的包装类\",{\"1\":{\"777\":1}}],[\"integer的compareto内置实现源码\",{\"1\":{\"746\":1}}],[\"integer\",{\"1\":{\"364\":1,\"365\":1,\"546\":1,\"549\":2,\"619\":1,\"635\":2,\"636\":1,\"640\":2,\"647\":2,\"671\":2,\"746\":1,\"771\":1,\"772\":1,\"773\":1,\"775\":5,\"776\":1,\"893\":3,\"925\":1,\"926\":1,\"934\":1,\"935\":1,\"1135\":1,\"1338\":1,\"1430\":5,\"1432\":1,\"1440\":6,\"1442\":2,\"1443\":1,\"1446\":1,\"1560\":2,\"1580\":1,\"1587\":1,\"1905\":1,\"1906\":1,\"1936\":1,\"1955\":1,\"1957\":3,\"1958\":1,\"2362\":1,\"2377\":2,\"2409\":1,\"2410\":1,\"2455\":1,\"2475\":1,\"2487\":2,\"2488\":1,\"2562\":1,\"3029\":1,\"3215\":1,\"3547\":1}}],[\"integration\",{\"1\":{\"342\":1}}],[\"integrationgraph\",{\"1\":{\"342\":1}}],[\"int\",{\"0\":{\"892\":1},\"1\":{\"147\":1,\"208\":1,\"220\":1,\"394\":1,\"418\":1,\"427\":1,\"618\":1,\"635\":2,\"636\":4,\"640\":2,\"643\":1,\"647\":3,\"651\":1,\"655\":1,\"656\":2,\"657\":2,\"660\":1,\"662\":1,\"669\":2,\"671\":3,\"672\":1,\"682\":1,\"689\":1,\"696\":2,\"699\":1,\"700\":2,\"701\":2,\"702\":2,\"703\":1,\"718\":14,\"719\":8,\"743\":1,\"746\":9,\"749\":3,\"750\":1,\"752\":1,\"756\":1,\"757\":1,\"760\":4,\"761\":3,\"762\":2,\"763\":2,\"767\":1,\"772\":2,\"773\":1,\"775\":1,\"776\":1,\"782\":3,\"783\":3,\"785\":2,\"813\":4,\"814\":7,\"818\":6,\"824\":8,\"825\":6,\"859\":2,\"861\":2,\"862\":1,\"864\":2,\"869\":2,\"874\":1,\"877\":1,\"882\":1,\"888\":9,\"889\":1,\"890\":1,\"892\":4,\"893\":1,\"894\":8,\"895\":3,\"896\":4,\"898\":4,\"907\":2,\"932\":3,\"933\":2,\"936\":2,\"945\":1,\"946\":1,\"947\":1,\"948\":2,\"949\":2,\"950\":1,\"951\":1,\"952\":2,\"966\":2,\"992\":1,\"996\":1,\"997\":1,\"1003\":2,\"1009\":9,\"1058\":2,\"1069\":1,\"1070\":1,\"1071\":1,\"1075\":1,\"1089\":1,\"1090\":1,\"1098\":1,\"1112\":2,\"1114\":2,\"1117\":3,\"1134\":1,\"1135\":1,\"1139\":3,\"1141\":4,\"1143\":2,\"1144\":1,\"1145\":1,\"1149\":1,\"1161\":4,\"1162\":2,\"1175\":1,\"1181\":3,\"1184\":1,\"1185\":1,\"1186\":3,\"1189\":3,\"1198\":2,\"1202\":2,\"1203\":2,\"1204\":4,\"1214\":2,\"1216\":2,\"1219\":6,\"1220\":1,\"1222\":2,\"1232\":5,\"1233\":2,\"1234\":2,\"1236\":3,\"1237\":4,\"1238\":6,\"1240\":2,\"1245\":2,\"1246\":4,\"1258\":1,\"1266\":2,\"1267\":1,\"1273\":1,\"1282\":1,\"1283\":4,\"1287\":1,\"1292\":5,\"1293\":3,\"1295\":1,\"1296\":1,\"1302\":1,\"1304\":1,\"1316\":2,\"1319\":2,\"1330\":3,\"1352\":2,\"1353\":1,\"1354\":1,\"1368\":3,\"1376\":7,\"1381\":1,\"1408\":2,\"1426\":1,\"1440\":1,\"1442\":2,\"1443\":2,\"1445\":1,\"1446\":2,\"1458\":2,\"1507\":2,\"1526\":1,\"1534\":3,\"1546\":1,\"1555\":2,\"1575\":1,\"1577\":2,\"1580\":1,\"1581\":1,\"1582\":2,\"1583\":1,\"1587\":1,\"1591\":3,\"1592\":1,\"1600\":1,\"1609\":2,\"1652\":1,\"1671\":2,\"1680\":2,\"1720\":2,\"1729\":2,\"1735\":1,\"1737\":3,\"1740\":1,\"1757\":1,\"1760\":1,\"1763\":1,\"1768\":1,\"1784\":1,\"1804\":1,\"1810\":3,\"1817\":1,\"1821\":1,\"1844\":1,\"1852\":3,\"1854\":2,\"1855\":1,\"1868\":1,\"1905\":2,\"1906\":1,\"1936\":1,\"1955\":2,\"1959\":1,\"1967\":2,\"2049\":1,\"2052\":1,\"2053\":2,\"2056\":1,\"2065\":1,\"2071\":1,\"2076\":2,\"2077\":1,\"2078\":2,\"2079\":2,\"2084\":1,\"2101\":1,\"2106\":1,\"2121\":1,\"2124\":1,\"2127\":1,\"2136\":1,\"2166\":2,\"2196\":1,\"2212\":1,\"2213\":1,\"2214\":2,\"2219\":2,\"2221\":1,\"2223\":1,\"2225\":1,\"2233\":4,\"2234\":5,\"2238\":1,\"2242\":1,\"2244\":1,\"2252\":1,\"2255\":2,\"2257\":1,\"2290\":1,\"2292\":2,\"2293\":4,\"2296\":5,\"2377\":3,\"2446\":1,\"2447\":1,\"2457\":2,\"2462\":2,\"2469\":3,\"2562\":1,\"2570\":1,\"2581\":1,\"2588\":2,\"2591\":1,\"2593\":6,\"2597\":1,\"2599\":2,\"2600\":3,\"2603\":3,\"2613\":2,\"2619\":1,\"2620\":1,\"2621\":1,\"2624\":1,\"2625\":1,\"2634\":1,\"2638\":1,\"2653\":9,\"2655\":2,\"2656\":2,\"2683\":2,\"2686\":1,\"2687\":1,\"2690\":1,\"2820\":1,\"2883\":1,\"2894\":1,\"3053\":1}}],[\"ignored\",{\"1\":{\"103\":1}}],[\"iops\",{\"1\":{\"3513\":1}}],[\"io效率是机械盘的10倍以上\",{\"1\":{\"3501\":1}}],[\"ioutils\",{\"1\":{\"2895\":1}}],[\"io是面向流的\",{\"1\":{\"2161\":1}}],[\"io包下\",{\"1\":{\"2128\":1}}],[\"io包下提供了各种\",{\"1\":{\"2021\":1}}],[\"io流体系\",{\"0\":{\"2025\":1}}],[\"io流介绍\",{\"0\":{\"2020\":1}}],[\"io原理\",{\"0\":{\"2022\":1}}],[\"io简介\",{\"0\":{\"2021\":1}}],[\"ioc\",{\"1\":{\"637\":1}}],[\"ioc自动装载\",{\"1\":{\"227\":1}}],[\"ioexception异常\",{\"1\":{\"813\":1,\"814\":1,\"824\":1,\"2061\":1,\"2062\":1}}],[\"ioexception和elasticsearchexception\",{\"1\":{\"422\":1}}],[\"ioexception\",{\"0\":{\"1583\":1},\"1\":{\"418\":2,\"419\":1,\"420\":1,\"423\":1,\"424\":1,\"425\":1,\"428\":1,\"429\":1,\"430\":1,\"431\":1,\"432\":1,\"647\":4,\"803\":2,\"819\":2,\"827\":3,\"829\":1,\"1571\":1,\"1587\":1,\"1592\":2,\"1600\":3,\"2049\":1,\"2050\":1,\"2052\":2,\"2053\":2,\"2064\":1,\"2065\":3,\"2071\":3,\"2082\":2,\"2084\":3,\"2118\":2,\"2212\":1,\"2213\":1,\"2214\":1,\"2219\":2,\"2220\":1,\"2223\":1,\"2225\":1,\"2242\":3,\"2779\":1,\"2799\":1,\"2801\":1,\"2812\":2,\"2814\":1,\"2846\":2,\"2849\":1,\"2850\":1,\"2858\":1,\"2862\":2,\"2872\":2,\"2873\":2,\"2888\":1,\"2903\":2,\"2909\":1,\"2910\":1,\"2945\":2}}],[\"io\",{\"0\":{\"811\":1},\"1\":{\"105\":1,\"418\":3,\"420\":1,\"813\":1,\"814\":1,\"819\":1,\"832\":1,\"843\":1,\"994\":1,\"1338\":1,\"1587\":4,\"2008\":1,\"2037\":2,\"2048\":1,\"2049\":1,\"2050\":1,\"2060\":1,\"2061\":1,\"2062\":1,\"2161\":3,\"2164\":1,\"2238\":1,\"2895\":1,\"2945\":1,\"3513\":1}}],[\"io如果网络不通畅\",{\"1\":{\"97\":1}}],[\"io类\",{\"1\":{\"57\":1}}],[\"数\",{\"1\":{\"3687\":1}}],[\"数量和类型\",{\"1\":{\"2385\":1}}],[\"数之间用冒号\",{\"1\":{\"2181\":1}}],[\"数字越大越好\",{\"1\":{\"3554\":1}}],[\"数字越小优先级越高\",{\"1\":{\"2794\":1}}],[\"数字就这一种类型\",{\"1\":{\"3548\":1}}],[\"数字就代表该部分日志占多少位\",{\"1\":{\"299\":1}}],[\"数字\",{\"1\":{\"3477\":1}}],[\"数字类型\",{\"1\":{\"3197\":1}}],[\"数字不可以开头\",{\"1\":{\"1082\":1}}],[\"数值格式异常\",{\"0\":{\"1580\":1}}],[\"数值常量的默认数据类型\",{\"0\":{\"1115\":1}}],[\"数值型\",{\"1\":{\"1075\":1}}],[\"数值类型对应的包装类以及biginteger\",{\"1\":{\"746\":1}}],[\"数学公式\",{\"0\":{\"769\":1}}],[\"数学与数值\",{\"0\":{\"758\":1},\"1\":{\"57\":1}}],[\"数组等\",{\"1\":{\"2438\":1}}],[\"数组引用\",{\"0\":{\"2429\":1}}],[\"数组+链表+红黑树\",{\"1\":{\"1912\":1,\"1926\":1}}],[\"数组+链表\",{\"1\":{\"1883\":1,\"1886\":1,\"1912\":1,\"1926\":1}}],[\"数组elementdata\",{\"1\":{\"1865\":1}}],[\"数组对象\",{\"1\":{\"1852\":2}}],[\"数组和集合都是容器\",{\"1\":{\"1824\":1}}],[\"数组存储数据的特点\",{\"1\":{\"1822\":1}}],[\"数组没有现成的属性或方法可用\",{\"1\":{\"1822\":1}}],[\"数组在储存数据方面的弊端\",{\"0\":{\"1822\":1}}],[\"数组在java内存储存方面的特点\",{\"0\":{\"1821\":1}}],[\"数组一旦定义好\",{\"1\":{\"1821\":1}}],[\"数组一旦初始化完成\",{\"1\":{\"1217\":1}}],[\"数组都是对多个数据进行存储操作的结构\",{\"1\":{\"1820\":1}}],[\"数组下标越界等\",{\"1\":{\"1571\":1}}],[\"数组角标越界\",{\"0\":{\"1577\":1},\"1\":{\"1561\":1}}],[\"数组可以是任何类型\",{\"1\":{\"1266\":1}}],[\"数组被赋值为null\",{\"1\":{\"1246\":1}}],[\"数组标识符指向的内存没了\",{\"1\":{\"1246\":1}}],[\"数组索引越界\",{\"0\":{\"1245\":1}}],[\"数组赋值\",{\"0\":{\"1235\":1}}],[\"数组长度\",{\"1\":{\"1228\":1}}],[\"数组删除和修改的过程\",{\"1\":{\"1227\":1}}],[\"数组储存的过程\",{\"1\":{\"1227\":1}}],[\"数组初始化完成后\",{\"1\":{\"1221\":1}}],[\"数组间的赋值与复制\",{\"0\":{\"1212\":1}}],[\"数组分配的内存空间是连续的\",{\"1\":{\"1211\":1}}],[\"数组本身是引用数据类型\",{\"1\":{\"1209\":1}}],[\"数组元素的类型\",{\"1\":{\"1852\":2}}],[\"数组元素的默认初始化值\",{\"0\":{\"1223\":1,\"1241\":1}}],[\"数组元素的个数\",{\"1\":{\"1208\":1}}],[\"数组元素下标从0开始\",{\"1\":{\"1220\":1}}],[\"数组元素下标可以是整型常量或整型表达式\",{\"1\":{\"1220\":1}}],[\"数组元素下标\",{\"1\":{\"1220\":1}}],[\"数组元素\",{\"1\":{\"1208\":1}}],[\"数组内部元素的变量类型\",{\"1\":{\"1208\":1}}],[\"数组的弊端\",{\"1\":{\"1823\":1}}],[\"数组的中的元素具有相同的数据类型\",{\"1\":{\"1228\":1}}],[\"数组的值\",{\"1\":{\"1226\":1,\"1227\":1}}],[\"数组的内存结构\",{\"0\":{\"1226\":1}}],[\"数组的初始化和数组元素的赋值操作同时进行\",{\"1\":{\"1219\":1}}],[\"数组的分类\",{\"0\":{\"1210\":1}}],[\"数组的特点\",{\"0\":{\"1209\":1}}],[\"数组的长度和内层数组的长度都确定了\",{\"1\":{\"1233\":1}}],[\"数组的长度是固定的\",{\"1\":{\"1228\":1}}],[\"数组的长度一旦确定\",{\"1\":{\"1209\":1}}],[\"数组的长度\",{\"0\":{\"1239\":1},\"1\":{\"1208\":1}}],[\"数组的下标\",{\"1\":{\"1208\":1}}],[\"数组的变量类型\",{\"1\":{\"1208\":1}}],[\"数组的元素会有一个默认值\",{\"1\":{\"1223\":1}}],[\"数组的元素\",{\"0\":{\"1208\":1}}],[\"数组的每个元素就是源字符串切后的小字符串\",{\"1\":{\"992\":1}}],[\"数组groups是组使用的存储\",{\"1\":{\"1004\":1}}],[\"数组转换为list集合\",{\"1\":{\"897\":1}}],[\"数组转为string\",{\"1\":{\"674\":1}}],[\"数组是引用类型\",{\"1\":{\"890\":1,\"1223\":1}}],[\"数组类型\",{\"1\":{\"3197\":1}}],[\"数组类\",{\"1\":{\"840\":1}}],[\"数组写入此输出流\",{\"1\":{\"825\":1}}],[\"数组中提供的方法非常有限\",{\"1\":{\"1822\":1}}],[\"数组中包含了20个元素\",{\"1\":{\"1266\":1}}],[\"数组中从偏移量\",{\"1\":{\"825\":1}}],[\"数组中\",{\"1\":{\"814\":1}}],[\"数组中的每个元素\",{\"1\":{\"1208\":1}}],[\"数组中的\",{\"1\":{\"692\":1}}],[\"数组中数据\",{\"1\":{\"151\":1}}],[\"数组\",{\"0\":{\"1205\":1},\"1\":{\"674\":1,\"746\":1,\"824\":1,\"1075\":1,\"1207\":1,\"1273\":1,\"1826\":1,\"1850\":1,\"1859\":1,\"2264\":1,\"2440\":1,\"2869\":1,\"2872\":1,\"3044\":1,\"3548\":1}}],[\"数组名\",{\"1\":{\"151\":2,\"1216\":2,\"1226\":1}}],[\"数组表示方式\",{\"0\":{\"148\":1}}],[\"数据损坏的修复\",{\"0\":{\"3756\":1}}],[\"数据新的节点获胜\",{\"1\":{\"3686\":1}}],[\"数据也插入成功\",{\"1\":{\"3682\":1}}],[\"数据也还是插入成功了\",{\"1\":{\"3222\":1}}],[\"数据读写\",{\"0\":{\"3681\":1}}],[\"数据读入\",{\"0\":{\"2049\":1}}],[\"数据目录\",{\"1\":{\"3654\":1}}],[\"数据冗余备份节点\",{\"1\":{\"3644\":1}}],[\"数据操作的主要连接点\",{\"1\":{\"3644\":1}}],[\"数据存储目录\",{\"1\":{\"3561\":1}}],[\"数据存储\",{\"1\":{\"3550\":1}}],[\"数据在mongodb中以bson\",{\"1\":{\"3546\":1}}],[\"数据在两个socket间通过io传输\",{\"1\":{\"2209\":1}}],[\"数据字段\",{\"1\":{\"3545\":1}}],[\"数据记录行\",{\"1\":{\"3545\":1}}],[\"数据模型无法确定\",{\"1\":{\"3542\":1}}],[\"数据条数一般是根据文档的大小和服务器性能而定的\",{\"1\":{\"3514\":1}}],[\"数据节点数量\",{\"1\":{\"3278\":1}}],[\"数据对象\",{\"0\":{\"3215\":1}}],[\"数据对象封装\",{\"1\":{\"1538\":1}}],[\"数据必须进行完全匹配\",{\"1\":{\"3197\":1}}],[\"数据通过json格式的请求体发送\",{\"1\":{\"3133\":1}}],[\"数据大小\",{\"1\":{\"3077\":1}}],[\"数据访问层\",{\"1\":{\"3006\":4,\"3008\":1,\"3009\":1,\"3011\":1,\"3013\":1}}],[\"数据是存储在request对象\",{\"1\":{\"2902\":1}}],[\"数据源无需创建多个\",{\"1\":{\"2669\":1}}],[\"数据源和数据库连接不同\",{\"1\":{\"2669\":1}}],[\"数据源中选择目标数据表\",{\"1\":{\"588\":1}}],[\"数据一旦提交\",{\"1\":{\"2631\":1}}],[\"数据表结构如下\",{\"1\":{\"2619\":1}}],[\"数据表中\",{\"1\":{\"2602\":1}}],[\"数据类的属性名\",{\"1\":{\"2602\":1}}],[\"数据类型是根据接口的规范进行推断的\",{\"1\":{\"2372\":1}}],[\"数据类型是类\",{\"1\":{\"1290\":1}}],[\"数据类型必须兼容\",{\"1\":{\"1426\":1}}],[\"数据类型2\",{\"1\":{\"1277\":1}}],[\"数据类型1\",{\"1\":{\"1277\":1}}],[\"数据类型不改变\",{\"0\":{\"1145\":1}}],[\"数据类型不一致\",{\"1\":{\"749\":1}}],[\"数据类型\",{\"0\":{\"398\":1},\"1\":{\"749\":1,\"1069\":1,\"1071\":1,\"1216\":2,\"1228\":1,\"1243\":1,\"1270\":2,\"1272\":1,\"1946\":1,\"2293\":2,\"2591\":1,\"3548\":1}}],[\"数据持久化意味着将内存中的数据保存到硬盘上加以\",{\"1\":{\"2525\":1}}],[\"数据持久化\",{\"0\":{\"2525\":1}}],[\"数据报包对象的\",{\"1\":{\"2233\":1}}],[\"数据报包也包含发送方的\",{\"1\":{\"2233\":1}}],[\"数据报套接字\",{\"1\":{\"2210\":1}}],[\"数据报表等功能\",{\"1\":{\"487\":1}}],[\"数据信息等资源\",{\"1\":{\"2172\":1}}],[\"数据流大\",{\"1\":{\"3541\":1}}],[\"数据流的类\",{\"0\":{\"2123\":1}}],[\"数据流\",{\"0\":{\"2122\":1}}],[\"数据按块读入缓冲区\",{\"1\":{\"2074\":1}}],[\"数据写出\",{\"0\":{\"2061\":1}}],[\"数据单位不同\",{\"1\":{\"2023\":1}}],[\"数据输出到磁盘\",{\"1\":{\"2022\":1}}],[\"数据添加时要保证\",{\"1\":{\"1889\":1}}],[\"数据结构\",{\"0\":{\"3546\":1},\"1\":{\"1883\":1,\"1886\":1,\"1887\":1,\"1958\":1}}],[\"数据结构与算法>递归\",{\"1\":{\"1283\":1}}],[\"数据的读入和写出操作\",{\"1\":{\"2065\":1}}],[\"数据的不可重复性\",{\"1\":{\"1889\":1}}],[\"数据的添加过程与底层结构\",{\"0\":{\"1889\":1}}],[\"数据的添加\",{\"1\":{\"1871\":1}}],[\"数据的版本\",{\"1\":{\"428\":1}}],[\"数据更新不及时\",{\"1\":{\"1753\":1}}],[\"数据为空\",{\"1\":{\"1564\":1}}],[\"数据处理\",{\"1\":{\"1537\":1}}],[\"数据\",{\"0\":{\"1696\":1,\"1704\":1},\"1\":{\"1277\":1,\"1278\":1,\"1700\":1,\"3020\":1}}],[\"数据直接写入指定的文件名创建的文件中\",{\"1\":{\"822\":1}}],[\"数据会写到这个文件对象里\",{\"1\":{\"822\":1}}],[\"数据库管理角色\",{\"1\":{\"3703\":1}}],[\"数据库用户角色\",{\"1\":{\"3703\":1}}],[\"数据库默认只存在与内存中\",{\"1\":{\"3578\":1}}],[\"数据库删除\",{\"0\":{\"3577\":1}}],[\"数据库中创建的角色可以继承在其它任意数据库中角色的权限\",{\"1\":{\"3698\":1}}],[\"数据库中\",{\"1\":{\"3576\":1}}],[\"数据库中是用下划线分隔单词的\",{\"1\":{\"2602\":1}}],[\"数据库不存在就是创建\",{\"1\":{\"3575\":1}}],[\"数据库存在就是选择\",{\"1\":{\"3575\":1}}],[\"数据库存取技术可分为如下几类\",{\"1\":{\"2526\":1}}],[\"数据库操作\",{\"0\":{\"3573\":1}}],[\"数据库操作类\",{\"1\":{\"1538\":1}}],[\"数据库监控\",{\"1\":{\"3571\":1}}],[\"数据库列表\",{\"1\":{\"3571\":1}}],[\"数据库表\",{\"1\":{\"3545\":1}}],[\"数据库的集合system\",{\"1\":{\"3712\":1}}],[\"数据库的状态\",{\"0\":{\"3578\":1}}],[\"数据库的连接资源并没有得到很好的重复利用\",{\"1\":{\"2662\":1}}],[\"数据库的性能会下降\",{\"1\":{\"2608\":1}}],[\"数据库就会自动提交\",{\"1\":{\"2625\":1}}],[\"数据库驱动来获取\",{\"1\":{\"2662\":1}}],[\"数据库驱动\",{\"1\":{\"2540\":1}}],[\"数据库已经对数据进行处理\",{\"1\":{\"2437\":1}}],[\"数据库访问和其他任何可以用java代码创造的对象进行打包\",{\"1\":{\"1532\":1}}],[\"数据库对象不止一种\",{\"1\":{\"1401\":1}}],[\"数据库连接池在初始化过程中\",{\"1\":{\"2667\":1}}],[\"数据库连接池在初始化时将创建一定数量的数据库连接放到连接池中\",{\"1\":{\"2665\":1}}],[\"数据库连接池工作原理\",{\"0\":{\"2666\":1}}],[\"数据库连接池负责分配\",{\"1\":{\"2664\":1}}],[\"数据库连接池的优点\",{\"0\":{\"2667\":1}}],[\"数据库连接池的基本思想\",{\"0\":{\"2664\":1}}],[\"数据库连接池的设计一般也是采用单例模式\",{\"1\":{\"1491\":1}}],[\"数据库连接池技术介绍\",{\"0\":{\"2663\":1}}],[\"数据库连接池\",{\"0\":{\"2658\":1}}],[\"数据库连接资源和文件流资源\",{\"1\":{\"2612\":1}}],[\"数据库连接对象\",{\"1\":{\"2567\":1}}],[\"数据库连接被用于向数据库服务器发送命令和\",{\"1\":{\"2555\":1}}],[\"数据库连接的三个要素\",{\"1\":{\"2549\":1}}],[\"数据库连接的配置\",{\"1\":{\"1938\":1}}],[\"数据库连接要素\",{\"0\":{\"2540\":1}}],[\"数据库连接\",{\"1\":{\"1401\":1}}],[\"数据库也创建好了\",{\"1\":{\"586\":1}}],[\"数据库名规范\",{\"1\":{\"3575\":1}}],[\"数据库名称\",{\"1\":{\"2542\":1,\"3575\":1}}],[\"数据库名\",{\"1\":{\"389\":2}}],[\"数据库迁移\",{\"1\":{\"342\":2}}],[\"数据库\",{\"1\":{\"329\":1,\"1538\":1,\"3545\":1,\"3574\":1,\"3698\":1}}],[\"数据库设计\",{\"0\":{\"25\":1},\"1\":{\"23\":1}}],[\"数据校验\",{\"0\":{\"217\":1}}],[\"数据层测试\",{\"0\":{\"232\":1}}],[\"数据层\",{\"1\":{\"53\":1}}],[\"比dtd更复杂\",{\"1\":{\"3028\":1}}],[\"比hahsmap多了个双向链表\",{\"1\":{\"1930\":1}}],[\"比对是否有所要查询的关键字\",{\"1\":{\"3427\":1}}],[\"比对速度更快\",{\"1\":{\"1926\":1}}],[\"比对时\",{\"1\":{\"915\":1}}],[\"比\",{\"1\":{\"1586\":1}}],[\"比int小的数值类型\",{\"1\":{\"760\":1}}],[\"比较查询\",{\"0\":{\"3614\":1}}],[\"比较常用的是设置响应状态码\",{\"1\":{\"2883\":1}}],[\"比较花时间\",{\"1\":{\"2625\":1}}],[\"比较繁琐\",{\"1\":{\"1955\":1}}],[\"比较危险\",{\"1\":{\"1946\":1}}],[\"比较对象是否相同的方法\",{\"0\":{\"1904\":1}}],[\"比较像定义一个java\",{\"1\":{\"1357\":1}}],[\"比较运算符不能连续使用\",{\"1\":{\"1149\":1}}],[\"比较运算符的结果都是boolean型\",{\"1\":{\"1148\":1}}],[\"比较运算符\",{\"0\":{\"1147\":1},\"1\":{\"1148\":1}}],[\"比较是否包含某个集合\",{\"1\":{\"911\":1}}],[\"比较的不是两个引用的地址是否相同\",{\"1\":{\"1427\":1}}],[\"比较的方式是\",{\"1\":{\"910\":1}}],[\"比较的是内容是否相同\",{\"1\":{\"652\":1}}],[\"比较规则为\",{\"1\":{\"754\":1}}],[\"比较o1和o2的大小\",{\"1\":{\"754\":1}}],[\"比较两个对象实体是否相同\",{\"1\":{\"1428\":1}}],[\"比较两个对象的实体内容是否相同\",{\"1\":{\"1428\":1}}],[\"比较两个对象的地址值是否相同\",{\"1\":{\"1426\":1,\"1427\":1}}],[\"比较两个对象的大小\",{\"0\":{\"750\":1}}],[\"比较两个变量保存的数据是否相等\",{\"1\":{\"1426\":1}}],[\"比较两个数组是否相等\",{\"1\":{\"896\":1}}],[\"比较两个字符串的大小\",{\"1\":{\"660\":1}}],[\"比较\",{\"0\":{\"750\":1},\"1\":{\"1922\":1}}],[\"比较name属性\",{\"1\":{\"749\":1}}],[\"比较字符的ascii\",{\"1\":{\"660\":1}}],[\"比较节省资源\",{\"1\":{\"433\":1}}],[\"比较器\",{\"0\":{\"738\":1},\"1\":{\"57\":1,\"987\":1}}],[\"比如show\",{\"1\":{\"3660\":1}}],[\"比如springcloud\",{\"1\":{\"96\":1}}],[\"比如列出所有的数据库或者关闭服务器\",{\"1\":{\"3574\":1}}],[\"比如评论系统\",{\"1\":{\"3551\":1}}],[\"比如分布式架构\",{\"1\":{\"3551\":1}}],[\"比如上述测试的预期结果应该是\",{\"1\":{\"3476\":1}}],[\"比如匹配用户的id\",{\"1\":{\"3474\":1}}],[\"比如视频的描述信息\",{\"1\":{\"3459\":1}}],[\"比如中文和英文\",{\"1\":{\"3437\":1}}],[\"比如其他品牌的手机和真正的苹果\",{\"1\":{\"3435\":1}}],[\"比如词条苹果手机\",{\"1\":{\"3435\":1}}],[\"比如将副本数量变成2\",{\"1\":{\"3393\":1}}],[\"比如将需要启动的包存入一个文件\",{\"1\":{\"564\":1}}],[\"比如阿里云\",{\"1\":{\"3349\":1}}],[\"比如设置为512m\",{\"1\":{\"3267\":1}}],[\"比如设置了链接mongodb的配置\",{\"1\":{\"159\":1}}],[\"比如价格和年龄的范围\",{\"1\":{\"3171\":1}}],[\"比如当前es最新版为8\",{\"1\":{\"3104\":1}}],[\"比如当创建的索引已经存在时\",{\"1\":{\"422\":1}}],[\"比如从数据库查询数据\",{\"1\":{\"3003\":1}}],[\"比如从用户流中getage获取年轻\",{\"1\":{\"2463\":1}}],[\"比如可以储存access\",{\"1\":{\"2937\":1}}],[\"比如传递的是文件数据\",{\"1\":{\"2854\":1}}],[\"比如获取用户名和密码就可以实现登录操作的相关业务\",{\"1\":{\"2832\":1}}],[\"比如说电商系统的商品表中商品名\",{\"1\":{\"3524\":1}}],[\"比如说\",{\"1\":{\"3360\":1}}],[\"比如说100\",{\"1\":{\"2674\":1}}],[\"比如说oracle\",{\"1\":{\"2674\":1}}],[\"比如在框架中\",{\"1\":{\"2636\":1}}],[\"比如在条件判断中\",{\"1\":{\"1277\":1}}],[\"比如参数1是个字符串\",{\"1\":{\"2400\":1}}],[\"比如php语言可以直接定义函数\",{\"1\":{\"2381\":1}}],[\"比如mailto\",{\"1\":{\"2243\":1}}],[\"比如最常见的\",{\"1\":{\"2236\":1}}],[\"比如指定源地址和目标地址\",{\"1\":{\"2200\":1}}],[\"比如各种集合工具类\",{\"1\":{\"1997\":1}}],[\"比如取模16\",{\"1\":{\"1890\":1}}],[\"比如并发情况下的线程\",{\"1\":{\"1812\":1}}],[\"比如我们定义了一个全局的int\",{\"1\":{\"1703\":1}}],[\"比如我要切换dev环境为pro时\",{\"1\":{\"280\":1}}],[\"比如java需要后台一直运行gc垃圾回收\",{\"1\":{\"1694\":1}}],[\"比如junit框架中有个\",{\"1\":{\"1638\":1}}],[\"比如拼写检查\",{\"1\":{\"1637\":1,\"1638\":1}}],[\"比如抛出的是个编译时异常\",{\"1\":{\"1609\":1}}],[\"比如空指针\",{\"1\":{\"1604\":1}}],[\"比如返回的错误码不一样\",{\"1\":{\"1600\":1}}],[\"比如返回一个连接redis的类\",{\"1\":{\"514\":1}}],[\"比如无法获取属性\",{\"1\":{\"1534\":1}}],[\"比如用c或c++实现\",{\"1\":{\"1357\":1}}],[\"比如计算两个值谁大\",{\"1\":{\"1162\":1}}],[\"比如一个商品促销场景\",{\"1\":{\"3494\":1}}],[\"比如一个字母\",{\"1\":{\"1100\":1}}],[\"比如一周更新一次\",{\"1\":{\"3442\":1}}],[\"比如一张图片\",{\"1\":{\"2607\":1}}],[\"比如一组数据中\",{\"1\":{\"480\":2}}],[\"比如没有变量指向的对象\",{\"1\":{\"1016\":1}}],[\"比如排序和搜索\",{\"1\":{\"889\":1}}],[\"比如四舍五入只是舍入策略的一种\",{\"1\":{\"784\":1}}],[\"比如1表示成功\",{\"1\":{\"644\":1}}],[\"比如第三方框架提供了默认配置的bean\",{\"1\":{\"531\":1}}],[\"比如单例\",{\"1\":{\"527\":1}}],[\"比如是否是单例\",{\"1\":{\"526\":1}}],[\"比如要加载bean的类没有使用\",{\"1\":{\"517\":1}}],[\"比如要配置int类型的数据\",{\"1\":{\"217\":1}}],[\"比如写个日志\",{\"1\":{\"514\":1,\"2326\":1}}],[\"比如规定缓存到期时间\",{\"1\":{\"479\":1}}],[\"比如形参是username\",{\"1\":{\"468\":1}}],[\"比如验证码\",{\"1\":{\"463\":1}}],[\"比如重复插入或操作不存在的数据\",{\"1\":{\"420\":1}}],[\"比如数据库连接\",{\"1\":{\"556\":1,\"560\":1}}],[\"比如数据库\",{\"1\":{\"348\":1}}],[\"比如2\",{\"1\":{\"319\":1}}],[\"比如内存占用严重\",{\"1\":{\"313\":1}}],[\"比如连接的数据库不一样\",{\"1\":{\"269\":1}}],[\"比如元旦做活动\",{\"1\":{\"266\":1}}],[\"比如配置了服务器的端口是8080\",{\"1\":{\"255\":1}}],[\"比如前端服务器的端口号改为8080\",{\"1\":{\"248\":1}}],[\"比如测试兼容性\",{\"1\":{\"230\":1}}],[\"比如lombok\",{\"1\":{\"96\":1}}],[\"比如\",{\"1\":{\"36\":1,\"197\":1,\"273\":1,\"485\":1,\"645\":1,\"1063\":1,\"1335\":1,\"1345\":1,\"1349\":1,\"1350\":1,\"1373\":1,\"1447\":1,\"1485\":1,\"1560\":1,\"1571\":1,\"1664\":1,\"1690\":2,\"1694\":1,\"1798\":1,\"1808\":1,\"1821\":1,\"1959\":2,\"1963\":1,\"2045\":1,\"2326\":1,\"2347\":1,\"2602\":1,\"2746\":1,\"3180\":1,\"3360\":1,\"3362\":1,\"3365\":1,\"3453\":1,\"3484\":1}}],[\"仅能操作article数据库\",{\"1\":{\"3708\":1}}],[\"仅能管理菜品和订单\",{\"1\":{\"55\":1}}],[\"仅考虑容灾复制\",{\"1\":{\"3334\":1}}],[\"仅考虑重写doget和dopost方法\",{\"1\":{\"2812\":1}}],[\"仅在主节点\",{\"1\":{\"3326\":1}}],[\"仅在第一次启动集群时生效\",{\"1\":{\"3268\":1}}],[\"仅修改文档中的某条数据\",{\"1\":{\"3143\":1}}],[\"仅\",{\"1\":{\"3142\":1,\"3160\":1}}],[\"仅获取参数的代码不同\",{\"1\":{\"2861\":1}}],[\"仅实现service\",{\"1\":{\"2807\":1}}],[\"仅支持展开一层嵌套\",{\"1\":{\"2467\":1}}],[\"仅体验\",{\"0\":{\"2254\":1}}],[\"仅需数据的读入\",{\"1\":{\"2052\":1}}],[\"仅值目录\",{\"1\":{\"2008\":1}}],[\"仅指文件\",{\"1\":{\"2008\":1}}],[\"仅演示\",{\"0\":{\"1843\":1,\"1844\":1}}],[\"仅用户自定义角色\",{\"0\":{\"3700\":1}}],[\"仅用于遍历集合\",{\"1\":{\"1837\":1}}],[\"仅用来结束方法\",{\"1\":{\"1281\":1}}],[\"仅存在于编译器处理期间\",{\"1\":{\"1654\":1}}],[\"仅简单介绍\",{\"1\":{\"1544\":1}}],[\"仅仅是具有相同的行为特征而已\",{\"1\":{\"1505\":1}}],[\"仅仅是在子类中新增了一个同类的属性\",{\"1\":{\"1377\":1}}],[\"仅对外暴露少量的方法用于使用\",{\"1\":{\"1300\":1}}],[\"仅一个参数\",{\"1\":{\"932\":1}}],[\"仅list可用\",{\"1\":{\"930\":1,\"931\":1,\"932\":1,\"933\":1}}],[\"仅了解\",{\"1\":{\"777\":1,\"1154\":1,\"2287\":1,\"2315\":1,\"2950\":1,\"3014\":1}}],[\"仅开发时才能开启\",{\"1\":{\"624\":1}}],[\"仅包含了常用的依赖\",{\"1\":{\"612\":1}}],[\"仅包含java相关的\",{\"1\":{\"11\":1}}],[\"仅做了解\",{\"1\":{\"217\":1,\"3262\":1}}],[\"管理用户\",{\"0\":{\"3706\":1}}],[\"管理索引\",{\"0\":{\"3622\":1}}],[\"管理的\",{\"1\":{\"3366\":1}}],[\"管理和释放数据库连接\",{\"1\":{\"2664\":1}}],[\"管理数据\",{\"1\":{\"1015\":1}}],[\"管理\",{\"1\":{\"637\":1}}],[\"管理第三方bean\",{\"1\":{\"626\":1}}],[\"管理服务\",{\"1\":{\"313\":1}}],[\"管理员\",{\"1\":{\"55\":1}}],[\"管理端\",{\"1\":{\"51\":1}}],[\"购物车\",{\"1\":{\"54\":1,\"3078\":1}}],[\"浏览器得到加密数据\",{\"1\":{\"3295\":1}}],[\"浏览器生成一个临时秘钥并用服务器的公钥对它加密\",{\"1\":{\"3295\":1}}],[\"浏览器通过ca的公钥对证书签名进行校验\",{\"1\":{\"3295\":1}}],[\"浏览器通过解析给定的\",{\"1\":{\"2236\":1}}],[\"浏览器是通过http协议向elasticsearch服务器发送请求的\",{\"1\":{\"3111\":1}}],[\"浏览器再次请求时\",{\"1\":{\"3068\":1}}],[\"浏览器对于单个cookie\",{\"1\":{\"3058\":1}}],[\"浏览器会根据http协议\",{\"1\":{\"3050\":1}}],[\"浏览器会发送http请求到后台服务器\",{\"1\":{\"2832\":1}}],[\"浏览器和服务器之间使用的是http请求来进行数据传输\",{\"1\":{\"3036\":1}}],[\"浏览器和服务器就可以继续使用该会话进行请求发送和响应\",{\"1\":{\"3033\":1}}],[\"浏览器关闭\",{\"1\":{\"2924\":1}}],[\"浏览器使用\",{\"1\":{\"2915\":1}}],[\"浏览器地址栏发生变化\",{\"1\":{\"2912\":1}}],[\"浏览器地址栏路径不发生变化\",{\"1\":{\"2904\":1}}],[\"浏览器输入\",{\"1\":{\"2911\":1}}],[\"浏览器接收到响应状态码为302就会重新发送请求到location对应的访问地址去访问资源b\",{\"1\":{\"2906\":1}}],[\"浏览器接收响应\",{\"1\":{\"2831\":1}}],[\"浏览器发起https请求\",{\"1\":{\"3295\":1}}],[\"浏览器发送请求\",{\"1\":{\"3007\":1}}],[\"浏览器发送请求给服务器\",{\"1\":{\"2899\":1,\"2906\":1}}],[\"浏览器发http\",{\"1\":{\"2785\":1}}],[\"浏览器页面上显示\",{\"1\":{\"2888\":1,\"2890\":1}}],[\"浏览器访问\",{\"1\":{\"2888\":1,\"2890\":1}}],[\"浏览器访问服务器时\",{\"1\":{\"2771\":1}}],[\"浏览器在发送get请求的时候是没有请求体的\",{\"1\":{\"2852\":1}}],[\"浏览器最终解析结果\",{\"1\":{\"2833\":1}}],[\"浏览器中输入url地址\",{\"1\":{\"2781\":1}}],[\"浏览器可能没有传递条件\",{\"1\":{\"633\":1}}],[\"浏览器\",{\"0\":{\"3050\":1},\"1\":{\"614\":1,\"2913\":1,\"3039\":1,\"3068\":2}}],[\"浏览器也返回了指定的文本\",{\"1\":{\"111\":1}}],[\"浏览\",{\"1\":{\"54\":1}}],[\"微信\",{\"1\":{\"54\":1,\"1616\":1}}],[\"微服务的项目个数太多了\",{\"1\":{\"314\":1}}],[\"微服务架构\",{\"1\":{\"10\":1}}],[\"微服务\",{\"0\":{\"5\":1,\"2998\":1},\"1\":{\"10\":1,\"11\":1}}],[\"状态为yellow\",{\"1\":{\"3380\":1}}],[\"状态为green\",{\"1\":{\"3378\":1}}],[\"状态\",{\"1\":{\"54\":1,\"1748\":1,\"1800\":1}}],[\"员工\",{\"1\":{\"55\":1}}],[\"员工管理\",{\"1\":{\"54\":1}}],[\"员工等进行管理维护\",{\"1\":{\"49\":1}}],[\"登录后的权限\",{\"0\":{\"3720\":1}}],[\"登录后的页面\",{\"1\":{\"3308\":1}}],[\"登录时进行验证\",{\"0\":{\"3719\":1}}],[\"登录主节点进行读写操作\",{\"1\":{\"3682\":1}}],[\"登录主节点\",{\"1\":{\"3330\":1,\"3724\":1}}],[\"登录es\",{\"0\":{\"3308\":1}}],[\"登录\",{\"1\":{\"54\":2,\"3335\":1}}],[\"后的代码\",{\"1\":{\"2953\":2}}],[\"后出\",{\"1\":{\"2953\":1}}],[\"后缀树等\",{\"1\":{\"3427\":1}}],[\"后缀名拦截\",{\"1\":{\"2949\":2}}],[\"后缀是可以改的\",{\"1\":{\"138\":1}}],[\"后台启动服务\",{\"1\":{\"3310\":1,\"3342\":1}}],[\"后台就需要给前端返回业务处理的结果即响应数据\",{\"1\":{\"2833\":1}}],[\"后台服务器\",{\"1\":{\"2832\":1,\"2833\":1}}],[\"后台系统普通员工\",{\"1\":{\"55\":1}}],[\"后台系统超管\",{\"1\":{\"55\":1}}],[\"后台系统\",{\"1\":{\"54\":1}}],[\"后期我们可以通过这两个参数实现前后端的数据交互\",{\"1\":{\"2785\":1}}],[\"后者主要是面向\",{\"1\":{\"2439\":1}}],[\"后者是操作接口的工具类\",{\"1\":{\"927\":1,\"1941\":1}}],[\"后写入套接字输出流\",{\"1\":{\"2214\":1}}],[\"后写implements\",{\"1\":{\"1509\":1}}],[\"后从套接字输入流读取内容\",{\"1\":{\"2214\":1}}],[\"后两个构造器是利用runable接口创建多线程用的\",{\"1\":{\"1716\":1}}],[\"后两个参数可选\",{\"1\":{\"718\":1}}],[\"后续会用\",{\"1\":{\"3296\":1}}],[\"后续可能需要根据文档里保存的数据id查询mysql\",{\"1\":{\"3113\":1}}],[\"后续逻辑处理\",{\"1\":{\"2862\":1}}],[\"后续的操作同方式1\",{\"1\":{\"2546\":1}}],[\"后续的添加和扩容操作与jdk8之前一样\",{\"1\":{\"1869\":1}}],[\"后续代码继续执行\",{\"1\":{\"1587\":1}}],[\"后续要针对当前的包进行扫描\",{\"1\":{\"566\":1}}],[\"后自减1\",{\"1\":{\"1141\":1}}],[\"后自增1\",{\"1\":{\"1141\":1}}],[\"后\",{\"1\":{\"1141\":2,\"1749\":1,\"3196\":1}}],[\"后运算\",{\"1\":{\"1141\":2}}],[\"后使用\",{\"1\":{\"1073\":1,\"1272\":1}}],[\"后面是什么都无所谓\",{\"1\":{\"2823\":1}}],[\"后面可以跟版本号或是时间\",{\"1\":{\"1059\":1}}],[\"后面跟作者名或邮箱\",{\"1\":{\"1059\":1}}],[\"后面的日期时间比前面的日期时间大\",{\"1\":{\"746\":1}}],[\"后面的的部分\",{\"1\":{\"337\":1}}],[\"后面的名字\",{\"1\":{\"275\":1}}],[\"后再向下取整\",{\"1\":{\"764\":1}}],[\"后置注册处理器\",{\"1\":{\"529\":1}}],[\"后进行操作\",{\"1\":{\"379\":1}}],[\"后接中括号可以指定日志的颜色\",{\"1\":{\"299\":1}}],[\"后端的数据库交互时\",{\"1\":{\"1253\":1}}],[\"后端\",{\"1\":{\"53\":1}}],[\"服务启动失败\",{\"0\":{\"3757\":1}}],[\"服务实例绑定所有ip\",{\"1\":{\"3656\":1}}],[\"服务实例绑定的ip\",{\"1\":{\"3562\":1,\"3656\":1}}],[\"服务进行访问\",{\"1\":{\"3202\":1}}],[\"服务代码\",{\"0\":{\"2801\":1}}],[\"服务终止\",{\"0\":{\"2798\":1}}],[\"服务相关的\",{\"1\":{\"1539\":1}}],[\"服务层接口实现类\",{\"1\":{\"589\":1}}],[\"服务层接口\",{\"1\":{\"589\":1}}],[\"服务的\",{\"1\":{\"314\":1}}],[\"服务下线\",{\"1\":{\"313\":1}}],[\"服务于运维经理整体调控\",{\"1\":{\"263\":1}}],[\"服务于运维人员配置涉密线上环境\",{\"1\":{\"263\":1}}],[\"服务于项目经理整体调控\",{\"1\":{\"263\":1}}],[\"服务于开发人员本机开发与测试\",{\"1\":{\"263\":1}}],[\"服务器的地址\",{\"1\":{\"3352\":1}}],[\"服务器用私钥解密\",{\"1\":{\"3295\":1}}],[\"服务器用来识别浏览器的过程\",{\"1\":{\"3035\":1}}],[\"服务器返回它的证书\",{\"1\":{\"3295\":1}}],[\"服务器提供服务\",{\"1\":{\"3259\":1}}],[\"服务器响应结果解析\",{\"0\":{\"3164\":1}}],[\"服务器发\",{\"1\":{\"3134\":1,\"3140\":1,\"3148\":1,\"3158\":1,\"3183\":1,\"3186\":1,\"3189\":1}}],[\"服务器发送的请求路径和创建索引是一致的\",{\"1\":{\"3121\":1}}],[\"服务器性能\",{\"1\":{\"3077\":1}}],[\"服务器关闭\",{\"1\":{\"3073\":1}}],[\"服务器不关闭\",{\"1\":{\"3069\":1}}],[\"服务器都会将该请求视为新的请求\",{\"1\":{\"3036\":1}}],[\"服务器识别浏览器后就可以在同一个会话中多次请求之间来共享数据\",{\"1\":{\"3035\":1}}],[\"服务器需要用来识别请求是否来自同一个浏览器\",{\"1\":{\"3035\":1}}],[\"服务器需要识别多次请求是否来自于同一浏览器\",{\"1\":{\"3035\":1}}],[\"服务器会随机生成一个\",{\"1\":{\"3136\":1}}],[\"服务器会自动获取jsessionid\",{\"1\":{\"3068\":1}}],[\"服务器会自己悄悄的把更新后的程序给重新加载一遍\",{\"1\":{\"177\":1}}],[\"服务器会收到多个请求\",{\"1\":{\"3035\":1}}],[\"服务器会检查是否已经有对应的session\",{\"1\":{\"2924\":1}}],[\"服务器中对应的资源a接收到请求\",{\"1\":{\"2899\":1,\"2906\":1}}],[\"服务器中的java代码\",{\"1\":{\"2771\":1}}],[\"服务器启动时创建servlet对象\",{\"1\":{\"2794\":1}}],[\"服务器tomcat中已经有servlet\",{\"1\":{\"2774\":1}}],[\"服务器配置\",{\"1\":{\"2768\":1}}],[\"服务器软件\",{\"1\":{\"2694\":1}}],[\"服务器自带dbcp数据库连接池\",{\"1\":{\"2668\":1}}],[\"服务器崩溃\",{\"1\":{\"2662\":1}}],[\"服务器程序\",{\"1\":{\"2244\":1}}],[\"服务器程序的工作过程包含以下四个基本的步骤\",{\"1\":{\"2221\":1}}],[\"服务器是一个为其客户端提供某种特定服务的硬件或软件\",{\"1\":{\"2244\":1}}],[\"服务器是一种最常见的网络应用程序模型\",{\"1\":{\"2244\":1}}],[\"服务器是否在运行\",{\"1\":{\"312\":1}}],[\"服务器必须事先建立一个等待客户请求建立套接字的\",{\"1\":{\"2223\":1}}],[\"服务器端会话技术\",{\"1\":{\"3060\":1}}],[\"服务器端建立serversocket\",{\"0\":{\"2222\":1}}],[\"服务器端socket\",{\"0\":{\"2221\":1}}],[\"服务器就要单独下载这个\",{\"1\":{\"1024\":1}}],[\"服务器故障\",{\"1\":{\"645\":1}}],[\"服务器mysql版本高于idea致使版本不兼容\",{\"1\":{\"358\":1}}],[\"服务器抓取的格式暴露指标\",{\"1\":{\"342\":1}}],[\"服务器内存溢出等情况造成了服务器宕机\",{\"1\":{\"313\":1}}],[\"服务器部署使用\",{\"1\":{\"269\":1}}],[\"服务器\",{\"1\":{\"250\":2,\"2913\":2,\"2929\":1,\"3259\":1}}],[\"服务\",{\"1\":{\"53\":1,\"3107\":1}}],[\"服务端会话跟踪技术\",{\"1\":{\"3037\":1}}],[\"服务端使用\",{\"1\":{\"2915\":1}}],[\"服务端接受到数据\",{\"1\":{\"2226\":1}}],[\"服务端就可以通过http请求的方式从客户端获取对应的信息\",{\"1\":{\"317\":1}}],[\"服务端\",{\"0\":{\"7\":1,\"318\":1},\"1\":{\"10\":1,\"314\":1,\"2204\":1,\"2206\":1,\"2207\":2,\"3205\":1}}],[\"功能很直观\",{\"1\":{\"3571\":1}}],[\"功能设计\",{\"0\":{\"2579\":1}}],[\"功能也一样\",{\"1\":{\"2404\":1}}],[\"功能也相同\",{\"1\":{\"1915\":1}}],[\"功能强的网络系统\",{\"1\":{\"2172\":1}}],[\"功能\",{\"0\":{\"1505\":1},\"1\":{\"1801\":1}}],[\"功能封装为方法的目的是\",{\"1\":{\"1276\":1}}],[\"功能越来越复杂\",{\"1\":{\"313\":1}}],[\"功能清单\",{\"0\":{\"54\":1}}],[\"功能模块\",{\"0\":{\"52\":1}}],[\"功能规格\",{\"1\":{\"21\":1}}],[\"的开发量\",{\"1\":{\"3746\":1}}],[\"的权限\",{\"1\":{\"3704\":1}}],[\"的表中的数据\",{\"1\":{\"3666\":1}}],[\"的字段的索引是无法删除的\",{\"1\":{\"3631\":1}}],[\"的系统\",{\"1\":{\"3550\":1}}],[\"的性质\",{\"1\":{\"3550\":1}}],[\"的性质远大于其\",{\"1\":{\"3550\":1}}],[\"的非关系型数据库\",{\"1\":{\"3535\":1}}],[\"的大规模内存回收\",{\"1\":{\"3532\":1}}],[\"的大小是相同的\",{\"1\":{\"3503\":1}}],[\"的大小有限制\",{\"1\":{\"3058\":1}}],[\"的节点\",{\"1\":{\"3526\":1}}],[\"的选主是\",{\"1\":{\"3526\":1}}],[\"的数量会严重影响写索引的效率\",{\"1\":{\"3518\":1}}],[\"的数据结构和\",{\"1\":{\"3583\":1}}],[\"的数据可能会丢失\",{\"1\":{\"3527\":1}}],[\"的数据量达到512mb\",{\"1\":{\"3517\":1}}],[\"的数据\",{\"1\":{\"3094\":1}}],[\"的数据库连接池使用\",{\"1\":{\"2668\":1}}],[\"的数据库系统\",{\"1\":{\"2527\":1}}],[\"的数据包\",{\"1\":{\"2234\":1}}],[\"的数据报服务\",{\"1\":{\"2210\":1}}],[\"的数据类型\",{\"1\":{\"1398\":1}}],[\"的主要目的是把文件缓存系统中的段持久化到硬盘\",{\"1\":{\"3517\":1}}],[\"的主分片目前被分配在\",{\"1\":{\"3407\":1}}],[\"的次数\",{\"0\":{\"3516\":1},\"1\":{\"3513\":1}}],[\"的堆空间设置\",{\"1\":{\"3508\":1}}],[\"的最大\",{\"1\":{\"3508\":1}}],[\"的最大数据量\",{\"1\":{\"3393\":1}}],[\"的全文本查询性能\",{\"1\":{\"3504\":1}}],[\"的段是分别存储到单个文件中的\",{\"1\":{\"3504\":1}}],[\"的设计目的是把底层\",{\"1\":{\"3504\":1}}],[\"的技巧\",{\"1\":{\"3501\":1}}],[\"的拷贝已经过期\",{\"1\":{\"3494\":1}}],[\"的默认配置\",{\"1\":{\"3512\":1}}],[\"的默认分词器无法识别中文的词语\",{\"1\":{\"3476\":1}}],[\"的默认行为\",{\"1\":{\"1654\":1}}],[\"的独立的\",{\"1\":{\"3462\":1}}],[\"的近实时的性质\",{\"1\":{\"3452\":1}}],[\"的更新\",{\"1\":{\"3447\":1}}],[\"的指针\",{\"1\":{\"3431\":1}}],[\"的形式\",{\"1\":{\"3430\":1}}],[\"的形式变为\",{\"1\":{\"3430\":1}}],[\"的形式展示当前的页面展示什么样的数据\",{\"1\":{\"22\":1}}],[\"的一种具体存储形式\",{\"1\":{\"3429\":1}}],[\"的一部分\",{\"1\":{\"824\":1,\"825\":1}}],[\"的具体步骤\",{\"0\":{\"3416\":1,\"3417\":1}}],[\"的具体流程\",{\"0\":{\"3407\":1}}],[\"的多文档请求\",{\"1\":{\"3415\":1}}],[\"的多个类\",{\"1\":{\"1338\":1}}],[\"的副本分片存在于所有的三个节点上\",{\"1\":{\"3410\":1}}],[\"的副本分片上\",{\"1\":{\"3407\":1}}],[\"的路由参数\",{\"1\":{\"3402\":1}}],[\"的路径名称\",{\"1\":{\"2166\":1}}],[\"的索引可以最大扩容到\",{\"1\":{\"3392\":1}}],[\"的索引\",{\"1\":{\"3379\":1,\"3403\":1}}],[\"的磁盘空间\",{\"1\":{\"3365\":1}}],[\"的集群\",{\"1\":{\"3261\":1}}],[\"的集群中\",{\"1\":{\"3261\":2}}],[\"的集合\",{\"1\":{\"1826\":1}}],[\"的结果\",{\"1\":{\"3176\":2,\"3177\":1,\"3180\":1}}],[\"的结果是boolean\",{\"1\":{\"430\":1}}],[\"的语法优化\",{\"1\":{\"3097\":1}}],[\"的本质是创建了一个响应头\",{\"1\":{\"3049\":1}}],[\"的本机安装系统里\",{\"1\":{\"2171\":1}}],[\"的书写规则\",{\"1\":{\"3022\":1}}],[\"的行为\",{\"1\":{\"2957\":1}}],[\"的资源\",{\"1\":{\"2913\":1}}],[\"的getxxx方法\",{\"1\":{\"2845\":1}}],[\"的getinfo\",{\"1\":{\"1405\":1}}],[\"的优先级\",{\"1\":{\"2825\":1}}],[\"的小程序\",{\"1\":{\"2770\":1}}],[\"的创建和关闭\",{\"1\":{\"2683\":1}}],[\"的子接口\",{\"1\":{\"2565\":1}}],[\"的子类\",{\"1\":{\"1913\":1}}],[\"的连接通常称为\",{\"1\":{\"2489\":1}}],[\"的操作\",{\"0\":{\"2452\":1}}],[\"的静态方法\",{\"1\":{\"2446\":1}}],[\"的丰富的函数式接口\",{\"1\":{\"2386\":1}}],[\"的接口\",{\"1\":{\"2381\":1}}],[\"的灵活性\",{\"1\":{\"2381\":1}}],[\"的意义\",{\"0\":{\"2381\":1}}],[\"的计划发布周期是\",{\"1\":{\"2351\":1}}],[\"的过程就叫做\",{\"1\":{\"3527\":1}}],[\"的过程\",{\"1\":{\"2275\":1}}],[\"的网络资源的位置来同一表示internet\",{\"1\":{\"2244\":1}}],[\"的简称\",{\"1\":{\"2240\":1}}],[\"的包发送到指定主机上的指定端口号\",{\"1\":{\"2234\":1}}],[\"的工作过程包含以下四个基本的步骤\",{\"1\":{\"2217\":1}}],[\"的正常连接终止序列\",{\"1\":{\"2214\":1}}],[\"的正则表达式中\",{\"1\":{\"985\":1}}],[\"的发布\",{\"1\":{\"2162\":1}}],[\"的重载方法read\",{\"1\":{\"2053\":1}}],[\"的父类\",{\"1\":{\"1986\":1}}],[\"的父类或父接口类型\",{\"1\":{\"1459\":1}}],[\"的注意事项\",{\"0\":{\"1969\":1}}],[\"的概念\",{\"1\":{\"1948\":1,\"3102\":1}}],[\"的哈希值相同\",{\"1\":{\"1922\":1}}],[\"的定义为\",{\"1\":{\"1835\":1}}],[\"的返回值\",{\"1\":{\"1809\":1,\"2343\":1}}],[\"的异同\",{\"0\":{\"1803\":1}}],[\"的某些警告保持静默\",{\"1\":{\"1675\":1}}],[\"的某些方法来确定要导入哪些自动装配的配置类\",{\"1\":{\"567\":1}}],[\"的含义是\",{\"1\":{\"1674\":1}}],[\"的成员变量\",{\"1\":{\"1660\":1}}],[\"的成员变量和方法\",{\"1\":{\"1363\":1}}],[\"的作用是\",{\"1\":{\"1675\":1}}],[\"的作用\",{\"1\":{\"1657\":1,\"1660\":1}}],[\"的作用域不同\",{\"1\":{\"1654\":1}}],[\"的生命周期\",{\"1\":{\"1656\":1,\"1657\":1}}],[\"的元注解用于修饰其他\",{\"1\":{\"1656\":1}}],[\"的策略属性\",{\"1\":{\"1657\":2}}],[\"的策略\",{\"1\":{\"1654\":1}}],[\"的每一个实现类\",{\"1\":{\"1650\":1}}],[\"的支持\",{\"1\":{\"1634\":1}}],[\"的关系\",{\"1\":{\"1506\":2}}],[\"的思想\",{\"1\":{\"1506\":1}}],[\"的equals\",{\"1\":{\"1429\":2}}],[\"的话\",{\"1\":{\"1428\":1,\"1429\":1}}],[\"的使用\",{\"1\":{\"1385\":1}}],[\"的使用参数\",{\"1\":{\"562\":1}}],[\"的方法\",{\"1\":{\"1376\":1,\"1398\":1}}],[\"的方式对\",{\"1\":{\"3202\":1}}],[\"的方式进行\",{\"1\":{\"2021\":1}}],[\"的方式进行调用\",{\"1\":{\"1478\":1}}],[\"的方式来使用\",{\"1\":{\"1510\":1}}],[\"的方式\",{\"1\":{\"1274\":1,\"1323\":1,\"1328\":2,\"1329\":2,\"1342\":1,\"1380\":1,\"1382\":1,\"1384\":1,\"1455\":1,\"2129\":1}}],[\"的方式访问对象成员\",{\"1\":{\"1259\":1}}],[\"的方式调用指定位置的元素\",{\"1\":{\"1209\":1,\"1220\":1}}],[\"的方式添加参数\",{\"1\":{\"256\":1}}],[\"的基础是\",{\"1\":{\"3501\":1}}],[\"的基础上\",{\"1\":{\"1366\":1}}],[\"的基本整数操作符的对应物\",{\"1\":{\"777\":1}}],[\"的值\",{\"1\":{\"1292\":1}}],[\"的毫秒数\",{\"1\":{\"1204\":2}}],[\"的区别同理\",{\"1\":{\"1153\":1}}],[\"的区别\",{\"0\":{\"1429\":1},\"1\":{\"1153\":1}}],[\"的整数替代false和true\",{\"1\":{\"1108\":1}}],[\"的实现方式\",{\"1\":{\"1103\":1}}],[\"的文件中\",{\"1\":{\"1038\":1}}],[\"的是最为相似的\",{\"1\":{\"984\":1}}],[\"的各种方法\",{\"1\":{\"889\":1}}],[\"的invoke方法来执行获得的方法\",{\"1\":{\"874\":1,\"2314\":1}}],[\"的效果完全相同\",{\"1\":{\"825\":1}}],[\"的常规协定是\",{\"1\":{\"825\":1}}],[\"的条件\",{\"0\":{\"808\":1}}],[\"的所有相关方法\",{\"1\":{\"777\":1}}],[\"的第二个参数\",{\"1\":{\"753\":1}}],[\"的对象来排序\",{\"1\":{\"752\":1}}],[\"的规则\",{\"1\":{\"745\":1,\"2772\":1}}],[\"的日期\",{\"1\":{\"714\":1}}],[\"的类型如果是keyword就不能分词\",{\"1\":{\"3435\":1}}],[\"的类型属性\",{\"1\":{\"1660\":2}}],[\"的类型\",{\"1\":{\"1653\":1}}],[\"的类必须实现\",{\"1\":{\"745\":1}}],[\"的类\",{\"1\":{\"709\":1}}],[\"的精华\",{\"1\":{\"709\":1}}],[\"的长度\",{\"1\":{\"697\":1}}],[\"的固定延迟执行\",{\"1\":{\"492\":1}}],[\"的泛型\",{\"1\":{\"373\":1}}],[\"的响应式\",{\"1\":{\"342\":1}}],[\"的校对清单\",{\"1\":{\"342\":1}}],[\"的完整列表\",{\"1\":{\"342\":1}}],[\"的错误\",{\"1\":{\"172\":1}}],[\"的\",{\"0\":{\"3526\":1},\"1\":{\"135\":1,\"739\":1,\"838\":1,\"1435\":1,\"1748\":1,\"2134\":1,\"2250\":1,\"2586\":1,\"2715\":1,\"3006\":2,\"3546\":1}}],[\"的目录下\",{\"1\":{\"101\":1}}],[\"的配置信息\",{\"1\":{\"3269\":1,\"3270\":1,\"3271\":1}}],[\"的配置\",{\"1\":{\"96\":1}}],[\"的名字\",{\"1\":{\"95\":1}}],[\"的标准项目开发\",{\"1\":{\"50\":1}}],[\"催单等\",{\"1\":{\"49\":1}}],[\"0+\",{\"1\":{\"3596\":1}}],[\"0字符\",{\"1\":{\"3581\":1}}],[\"0表示全网所有主机上的节点都允许\",{\"1\":{\"3337\":1}}],[\"0表示运行所有主机访问\",{\"1\":{\"3337\":1}}],[\"0表示为未失败\",{\"1\":{\"3135\":1}}],[\"0表示整数\",{\"1\":{\"1120\":1}}],[\"05t23\",{\"1\":{\"3590\":1,\"3596\":1}}],[\"05t22\",{\"1\":{\"3590\":1}}],[\"05t21\",{\"1\":{\"3108\":1}}],[\"050f72bcd20a7a53ac68cb37663c37d318f1e71af2c8c98b16e58dcdfa83909c\",{\"1\":{\"3328\":1}}],[\"05s～1s的时间\",{\"1\":{\"2662\":1}}],[\"0p\",{\"1\":{\"3108\":1}}],[\"0或正整数\",{\"1\":{\"2794\":1}}],[\"03\",{\"1\":{\"2086\":1,\"3355\":1}}],[\"0时都修改为带泛型的结构\",{\"1\":{\"1959\":1}}],[\"0开始\",{\"1\":{\"1778\":1}}],[\"0后新增了一种\",{\"1\":{\"1710\":1}}],[\"0提供了4个标准的meta\",{\"1\":{\"1656\":1}}],[\"0提供了注解\",{\"1\":{\"1637\":1}}],[\"0作为了被除数\",{\"1\":{\"1582\":1}}],[\"0及之前\",{\"1\":{\"1502\":1}}],[\"0个\",{\"1\":{\"1295\":1}}],[\"0以前的写法\",{\"1\":{\"1295\":1}}],[\"0以上时\",{\"1\":{\"369\":1}}],[\"0新增\",{\"1\":{\"1175\":2}}],[\"0新增的一种方式\",{\"1\":{\"1806\":1}}],[\"0新增的\",{\"1\":{\"690\":1}}],[\"0类型转换成了double\",{\"1\":{\"1139\":1}}],[\"0互换\",{\"1\":{\"1121\":1}}],[\"0f\",{\"1\":{\"1093\":1}}],[\"0xffff\",{\"1\":{\"813\":1}}],[\"0x00\",{\"1\":{\"813\":1}}],[\"07\",{\"1\":{\"721\":1}}],[\"04\",{\"1\":{\"720\":1,\"736\":1,\"737\":1,\"3670\":11,\"3673\":6,\"3674\":2}}],[\"09t02\",{\"1\":{\"727\":1}}],[\"09t03\",{\"1\":{\"720\":1}}],[\"09t10\",{\"1\":{\"724\":1,\"725\":1}}],[\"09t18\",{\"1\":{\"720\":6,\"721\":2,\"725\":1}}],[\"09t17\",{\"1\":{\"717\":1}}],[\"09\",{\"1\":{\"717\":1,\"720\":1,\"736\":1,\"737\":1,\"2612\":1,\"2686\":1,\"3673\":6}}],[\"06\",{\"1\":{\"717\":2,\"720\":6,\"721\":2,\"724\":1,\"725\":2,\"727\":1,\"732\":1,\"733\":2,\"736\":1,\"737\":1,\"3108\":1,\"3355\":1,\"3670\":4}}],[\"0中包含了一个java\",{\"1\":{\"708\":1}}],[\"0~65536\",{\"1\":{\"2697\":1}}],[\"0~65535\",{\"1\":{\"2185\":1}}],[\"0~3\",{\"1\":{\"2293\":1}}],[\"0~1023\",{\"1\":{\"2186\":1}}],[\"0~n\",{\"1\":{\"1721\":1,\"1728\":1}}],[\"0~255\",{\"1\":{\"825\":1}}],[\"0~23的整数\",{\"1\":{\"501\":1}}],[\"0~59的整数\",{\"1\":{\"501\":2}}],[\"0~9\",{\"1\":{\"10\":1}}],[\"0版本之前mongodb的认证机制\",{\"1\":{\"392\":1}}],[\"0版本之后mongodb默认的认证机制\",{\"1\":{\"392\":1}}],[\"08\",{\"1\":{\"246\":2,\"1433\":1,\"2489\":1,\"2612\":1,\"2686\":1,\"3590\":3,\"3596\":1}}],[\"02\",{\"1\":{\"147\":3,\"734\":1,\"1680\":1,\"3355\":1}}],[\"0110\",{\"1\":{\"1157\":2}}],[\"0111\",{\"1\":{\"147\":1}}],[\"01\",{\"1\":{\"724\":1,\"727\":1,\"779\":1,\"1204\":4,\"1680\":1,\"2086\":1,\"2570\":2,\"2573\":2}}],[\"0100\",{\"1\":{\"147\":1}}],[\"0b1010\",{\"1\":{\"147\":1}}],[\"0<\",{\"1\":{\"119\":1,\"413\":1,\"607\":1,\"611\":1,\"612\":1}}],[\"0左右\",{\"1\":{\"84\":1,\"85\":1}}],[\"0\",{\"0\":{\"3250\":1},\"1\":{\"80\":1,\"81\":1,\"84\":2,\"85\":2,\"96\":2,\"152\":1,\"211\":4,\"214\":1,\"246\":8,\"259\":1,\"308\":1,\"358\":1,\"428\":4,\"429\":4,\"431\":4,\"478\":1,\"493\":1,\"499\":1,\"506\":1,\"511\":1,\"521\":1,\"536\":1,\"546\":1,\"597\":1,\"607\":1,\"612\":2,\"636\":3,\"660\":1,\"692\":1,\"693\":1,\"699\":2,\"701\":1,\"746\":2,\"749\":1,\"751\":1,\"761\":6,\"764\":1,\"766\":1,\"767\":3,\"768\":1,\"769\":1,\"772\":1,\"776\":1,\"784\":2,\"785\":3,\"813\":2,\"814\":1,\"825\":1,\"861\":1,\"869\":1,\"872\":1,\"884\":3,\"893\":1,\"938\":2,\"939\":1,\"947\":1,\"950\":1,\"951\":1,\"952\":1,\"1029\":1,\"1056\":1,\"1059\":5,\"1082\":1,\"1108\":1,\"1114\":1,\"1121\":1,\"1139\":2,\"1145\":2,\"1181\":3,\"1184\":1,\"1185\":1,\"1186\":4,\"1189\":3,\"1198\":1,\"1204\":2,\"1218\":1,\"1220\":1,\"1230\":3,\"1233\":1,\"1236\":2,\"1237\":4,\"1238\":3,\"1239\":1,\"1240\":2,\"1246\":4,\"1273\":4,\"1283\":1,\"1296\":1,\"1426\":1,\"1458\":2,\"1575\":1,\"1582\":1,\"1609\":1,\"1634\":1,\"1648\":2,\"1720\":4,\"1721\":1,\"1728\":1,\"1729\":2,\"1737\":2,\"1760\":1,\"1768\":1,\"1784\":1,\"1810\":1,\"1830\":1,\"1850\":1,\"1854\":2,\"1855\":1,\"1866\":1,\"1869\":1,\"1905\":1,\"1993\":1,\"2055\":1,\"2056\":1,\"2065\":1,\"2071\":1,\"2076\":2,\"2077\":2,\"2078\":3,\"2079\":3,\"2084\":2,\"2106\":1,\"2121\":2,\"2136\":1,\"2181\":1,\"2182\":2,\"2183\":2,\"2220\":2,\"2225\":1,\"2231\":3,\"2232\":1,\"2233\":5,\"2252\":2,\"2293\":2,\"2296\":6,\"2301\":1,\"2450\":1,\"2474\":2,\"2487\":1,\"2537\":1,\"2539\":1,\"2581\":1,\"2600\":2,\"2603\":2,\"2613\":1,\"2624\":1,\"2625\":1,\"2634\":1,\"2635\":1,\"2653\":8,\"2674\":1,\"2759\":1,\"2846\":7,\"2894\":2,\"2991\":1,\"3019\":1,\"3020\":2,\"3027\":1,\"3029\":3,\"3053\":1,\"3104\":1,\"3108\":4,\"3134\":2,\"3135\":2,\"3140\":2,\"3142\":5,\"3144\":1,\"3148\":2,\"3149\":1,\"3154\":7,\"3158\":2,\"3160\":5,\"3164\":5,\"3182\":2,\"3183\":2,\"3186\":2,\"3188\":1,\"3189\":2,\"3190\":1,\"3191\":8,\"3227\":2,\"3231\":1,\"3241\":1,\"3242\":1,\"3249\":5,\"3250\":2,\"3278\":10,\"3279\":10,\"3280\":10,\"3285\":4,\"3287\":1,\"3288\":1,\"3289\":1,\"3291\":1,\"3296\":3,\"3297\":1,\"3298\":1,\"3300\":2,\"3301\":1,\"3304\":1,\"3305\":1,\"3307\":8,\"3310\":1,\"3315\":1,\"3318\":1,\"3319\":1,\"3320\":1,\"3322\":1,\"3324\":4,\"3327\":8,\"3332\":10,\"3337\":18,\"3355\":11,\"3378\":10,\"3380\":7,\"3400\":1,\"3407\":2,\"3410\":2,\"3413\":1,\"3473\":2,\"3476\":2,\"3479\":1,\"3480\":2,\"3482\":2,\"3483\":2,\"3485\":2,\"3488\":1,\"3489\":2,\"3501\":1,\"3518\":1,\"3526\":1,\"3552\":1,\"3558\":1,\"3561\":1,\"3562\":3,\"3575\":1,\"3593\":1,\"3596\":1,\"3610\":1,\"3636\":1,\"3653\":1,\"3656\":1,\"3664\":1,\"3667\":4,\"3668\":1,\"3670\":4,\"3673\":7,\"3674\":3,\"3679\":1,\"3689\":1,\"3700\":2,\"3701\":2}}],[\"000z\",{\"1\":{\"3670\":2,\"3673\":2}}],[\"0001\",{\"1\":{\"1121\":3,\"3030\":1}}],[\"00000000000000000000000000\",{\"1\":{\"3701\":1}}],[\"0000000000000000000000000000\",{\"1\":{\"3700\":1}}],[\"000000000000000000000000000000\",{\"1\":{\"3674\":1}}],[\"0000000000000000000000000000000000000000\",{\"1\":{\"3670\":1,\"3673\":1}}],[\"000000333\",{\"1\":{\"720\":1}}],[\"0000\",{\"1\":{\"1121\":6,\"1157\":13}}],[\"00也可以解决这个问题\",{\"1\":{\"368\":1}}],[\"00\",{\"1\":{\"147\":1,\"725\":1,\"1204\":6,\"1433\":1,\"3141\":1,\"3142\":2,\"3159\":1,\"3160\":2}}],[\"002\",{\"1\":{\"49\":1}}],[\"001\",{\"1\":{\"49\":1}}],[\"订单的一个文档\",{\"1\":{\"3362\":1}}],[\"订单状态在运送过程中会不断更新\",{\"1\":{\"3541\":1}}],[\"订单状态\",{\"1\":{\"1616\":1}}],[\"订单管理\",{\"1\":{\"54\":1}}],[\"订单\",{\"1\":{\"49\":1}}],[\"其主要目标是使用数据库的访问变得方便快捷\",{\"1\":{\"3746\":1}}],[\"其资源成本比具有数据集的全功能副本集成员更便宜\",{\"1\":{\"3646\":1}}],[\"其\",{\"1\":{\"3550\":1}}],[\"其目的是为了能够在\",{\"1\":{\"3503\":1}}],[\"其生命周期由容器来管理\",{\"1\":{\"2792\":1}}],[\"其key为指定的key\",{\"1\":{\"2684\":1}}],[\"其结果可以是任何不是流的值\",{\"1\":{\"2455\":1}}],[\"其一对\",{\"1\":{\"2366\":1}}],[\"其次\",{\"1\":{\"2333\":1,\"2623\":1}}],[\"其属性是不能被改变的\",{\"1\":{\"2239\":1}}],[\"其长度\",{\"1\":{\"2233\":1}}],[\"其长度就不可修改\",{\"1\":{\"1822\":1}}],[\"其长度就不可变了\",{\"1\":{\"1221\":1}}],[\"其长度就确定了\",{\"1\":{\"1217\":1,\"1821\":1}}],[\"其通信模型如图所示\",{\"1\":{\"2216\":1}}],[\"其后的读操作则直接访问缓冲区\",{\"1\":{\"2074\":1}}],[\"其后的代码就不再执行\",{\"1\":{\"1566\":1}}],[\"其它缓存\",{\"1\":{\"3441\":1}}],[\"其它就是处理\",{\"1\":{\"3364\":1}}],[\"其它四个重写的接口方法暂不考虑\",{\"1\":{\"2814\":1}}],[\"其它计算机实现数据交换\",{\"1\":{\"2172\":1}}],[\"其它的同上\",{\"1\":{\"1906\":1}}],[\"其它因编程错误或偶然的外在因素导致的一般性问题\",{\"1\":{\"1561\":1}}],[\"其hashcode也是不同的\",{\"1\":{\"1895\":1}}],[\"其所在的类一定要重写hashcode\",{\"1\":{\"1894\":1}}],[\"其元素的类型也就确定了\",{\"1\":{\"1821\":1}}],[\"其数量不足以满足多个进程运行的需要\",{\"1\":{\"1792\":1}}],[\"其方法也一样\",{\"1\":{\"2936\":1}}],[\"其方法才可以供外部调用\",{\"1\":{\"1471\":1}}],[\"其方法的参数和返回为值类型一般为double型\",{\"1\":{\"759\":1}}],[\"其余各个位取反\",{\"1\":{\"1121\":1}}],[\"其余表示值\",{\"1\":{\"1121\":1}}],[\"其会被解析为\",{\"1\":{\"1058\":1}}],[\"其子接口和子接口的实现类也同样可以使用\",{\"1\":{\"903\":1}}],[\"其内部的成员变量和成员方法都是static的\",{\"1\":{\"880\":1}}],[\"其对象必须使用构造器生成\",{\"1\":{\"689\":1}}],[\"其名称由模块名+版本号+\",{\"1\":{\"236\":1}}],[\"其实mogodb很多时候是关系型数据库的一个替代\",{\"1\":{\"3539\":1}}],[\"其实现机制是接收到请求后\",{\"1\":{\"3527\":1}}],[\"其实倒也不必计划的太长远\",{\"1\":{\"3506\":1}}],[\"其实问题也不是很大\",{\"1\":{\"2794\":1}}],[\"其实一个数据库连接就是一个socket连接\",{\"1\":{\"2555\":1}}],[\"其实至少有三个线程\",{\"1\":{\"1689\":1}}],[\"其实是会钝化处理的\",{\"1\":{\"3073\":1}}],[\"其实是一种假的多线程\",{\"1\":{\"1689\":1}}],[\"其实是被设置为bean的类的对象\",{\"1\":{\"504\":1}}],[\"其实没有多维数组\",{\"1\":{\"1230\":1}}],[\"其实\",{\"1\":{\"1230\":1}}],[\"其实就是一个接口\",{\"1\":{\"2770\":1}}],[\"其实就是重写的抽象方法的方法体\",{\"1\":{\"2362\":1}}],[\"其实就是接口中的抽象方法的形参列表\",{\"1\":{\"2362\":1}}],[\"其实就是共享资源竞争\",{\"1\":{\"1772\":1}}],[\"其实就是在描述其对象的属性和行为\",{\"1\":{\"1471\":1}}],[\"其实就是类的成员的设计\",{\"1\":{\"1255\":1}}],[\"其实就是\",{\"1\":{\"564\":1}}],[\"其实就是四个配置文件书写的位置\",{\"1\":{\"262\":1}}],[\"其实可以被解析为字符串\",{\"1\":{\"396\":1}}],[\"其实服务端可以理解为是一个web程序\",{\"1\":{\"317\":1}}],[\"其实测试版基本也是在linux上\",{\"1\":{\"234\":1}}],[\"其实springboot项目内是可以创建多个模块的\",{\"1\":{\"160\":1}}],[\"其中mongos或mongod将写入其pid\",{\"1\":{\"3656\":1}}],[\"其中配置文件如下\",{\"1\":{\"3656\":1}}],[\"其中底部>\",{\"1\":{\"3571\":1}}],[\"其中数据的增删改查也只是像变量操作一样简单\",{\"1\":{\"3550\":1}}],[\"其中node1是主节点\",{\"1\":{\"3373\":1}}],[\"其中保存ca证书和ca的私钥\",{\"1\":{\"3293\":1}}],[\"其中aggregation方法的参数就是聚合函数构造器\",{\"1\":{\"3248\":1}}],[\"其中的method可以选择get和post分别进行测试\",{\"1\":{\"2871\":1}}],[\"其中的每个元素也被按照成员变量同样的方式被隐式初始化\",{\"1\":{\"1223\":1}}],[\"其中init\",{\"1\":{\"2799\":1}}],[\"其中server方法中打印一句话进行测设\",{\"1\":{\"2777\":1}}],[\"其中status的值为0代表正常退出\",{\"1\":{\"882\":1}}],[\"其中有三个文件夹\",{\"1\":{\"2759\":1}}],[\"其中有个invoke方法\",{\"1\":{\"2338\":1}}],[\"其中元素按比较器顺序排序\",{\"1\":{\"2475\":1}}],[\"其中元素按自然顺序排序\",{\"1\":{\"2474\":1}}],[\"其中\",{\"1\":{\"1909\":1,\"2537\":1,\"2683\":1,\"2746\":1,\"3002\":1,\"3611\":1}}],[\"其中类b是类a的父类\",{\"1\":{\"1416\":1}}],[\"其中包含pem格式的证书和私钥\",{\"1\":{\"3293\":1}}],[\"其中包含了java的开发工具\",{\"1\":{\"1025\":1}}],[\"其中包含热部署工具\",{\"1\":{\"184\":1}}],[\"其中健康信息要显示所有内容\",{\"1\":{\"326\":1}}],[\"其中最基础的策略就是\",{\"1\":{\"303\":1}}],[\"其中键为主环境\",{\"1\":{\"280\":1}}],[\"其中系统管理后台主要提供给餐饮企业内部员工使用\",{\"1\":{\"49\":1}}],[\"其设计目的是用来简化spring应用的初始搭建以及开发过程\",{\"1\":{\"91\":1}}],[\"其他都交给\",{\"1\":{\"3746\":1}}],[\"其他索引\",{\"0\":{\"3621\":1}}],[\"其他硬件优化\",{\"0\":{\"3505\":1}}],[\"其他raid策略\",{\"1\":{\"3501\":1}}],[\"其他登录方式\",{\"0\":{\"3309\":1}}],[\"其他组件\",{\"1\":{\"3298\":1}}],[\"其他es文件也都放在该目录下\",{\"1\":{\"3288\":1,\"3319\":1}}],[\"其他节点加入该集群的步骤\",{\"1\":{\"3329\":1}}],[\"其他节点随后可以加入该节点\",{\"1\":{\"3307\":1,\"3327\":1}}],[\"其他节点\",{\"1\":{\"3270\":1,\"3271\":1}}],[\"其他排序的字段\",{\"1\":{\"3185\":1}}],[\"其他>json\",{\"1\":{\"3081\":1}}],[\"其他静态资源\",{\"1\":{\"2723\":1}}],[\"其他各种可以被浏览器访问的静态资源\",{\"1\":{\"2722\":1}}],[\"其他k=v是字符集\",{\"1\":{\"2542\":1}}],[\"其他k=v\",{\"1\":{\"2542\":1}}],[\"其他完全一样的方法\",{\"1\":{\"2399\":1}}],[\"其他流\",{\"0\":{\"2114\":1}}],[\"其他流的方法\",{\"0\":{\"828\":1}}],[\"其他实现跟节点流类似\",{\"1\":{\"2039\":1}}],[\"其他泛型的list就无法调用了\",{\"1\":{\"1995\":1}}],[\"其他代码的同上\",{\"1\":{\"1936\":1}}],[\"其他线程等待\",{\"1\":{\"1776\":1}}],[\"其他线程调用了该线程的suspend\",{\"1\":{\"1775\":1}}],[\"其他线程需要等待\",{\"1\":{\"1771\":1}}],[\"其他线程都需要在后面排队\",{\"1\":{\"1770\":1}}],[\"其他线程都要进行等待\",{\"1\":{\"1770\":1}}],[\"其他线程不可以参与执行\",{\"1\":{\"1756\":1,\"1773\":1}}],[\"其他元注解要相同\",{\"1\":{\"1668\":1}}],[\"其他方式\",{\"1\":{\"3427\":1}}],[\"其他方式创建springboot项目\",{\"0\":{\"104\":1}}],[\"其他方法不用管\",{\"1\":{\"2779\":1}}],[\"其他方法无法解析\",{\"1\":{\"2126\":1}}],[\"其他方法\",{\"1\":{\"1626\":1}}],[\"其他诉求\",{\"1\":{\"1621\":1}}],[\"其他区域跟类和对象无关\",{\"1\":{\"1546\":1}}],[\"其他区域\",{\"1\":{\"1546\":1}}],[\"其他javabean\",{\"1\":{\"1532\":1}}],[\"其他数据库驱动实现接口\",{\"1\":{\"1513\":1}}],[\"其他数据index顺延\",{\"1\":{\"945\":1}}],[\"其他操作\",{\"1\":{\"1401\":1}}],[\"其他关键字\",{\"1\":{\"1277\":1}}],[\"其他修饰符\",{\"1\":{\"1270\":1}}],[\"其他7种基本数据类型是可以互相运算的\",{\"1\":{\"1110\":1}}],[\"其他类型\",{\"1\":{\"3197\":1}}],[\"其他类型functional\",{\"0\":{\"2393\":1}}],[\"其他类型配置文件\",{\"0\":{\"142\":1}}],[\"其他类\",{\"0\":{\"879\":1}}],[\"其他层的异常最终会抛到controller\",{\"1\":{\"645\":1}}],[\"其他条件\",{\"0\":{\"542\":1}}],[\"其他的主机不要启动\",{\"1\":{\"3324\":1}}],[\"其他的数据不变\",{\"1\":{\"3143\":1}}],[\"其他的步骤都是相通的\",{\"1\":{\"2578\":1}}],[\"其他的部分是确定的\",{\"1\":{\"1947\":1}}],[\"其他的都是false\",{\"1\":{\"671\":1}}],[\"其他的配置采用默认值\",{\"1\":{\"362\":1}}],[\"其他的根据加载顺序确定\",{\"1\":{\"280\":1}}],[\"其他还是正常debug级别\",{\"1\":{\"308\":1}}],[\"其他环境中有相同属性时\",{\"1\":{\"279\":1}}],[\"其他目录也可以\",{\"1\":{\"252\":1}}],[\"其他服务器关闭\",{\"1\":{\"248\":1}}],[\"其他内置类\",{\"1\":{\"57\":1}}],[\"其他spring组件\",{\"1\":{\"11\":1}}],[\"其他知识\",{\"1\":{\"11\":1}}],[\"其他\",{\"0\":{\"1356\":1,\"2516\":1},\"1\":{\"10\":1,\"45\":1,\"3538\":1}}],[\"小写化quick\",{\"1\":{\"3464\":1}}],[\"小的段被合并到大的段\",{\"1\":{\"3457\":1}}],[\"小\",{\"1\":{\"3176\":1}}],[\"小米\",{\"1\":{\"3141\":1,\"3142\":2,\"3159\":1,\"3160\":2,\"3164\":1,\"3176\":2,\"3177\":1,\"3180\":1}}],[\"小米手机\",{\"1\":{\"3141\":1,\"3142\":2,\"3159\":1,\"3160\":2,\"3164\":1}}],[\"小类型\",{\"1\":{\"2932\":1}}],[\"小心参数声明错误\",{\"1\":{\"2581\":1,\"2653\":1}}],[\"小结\",{\"0\":{\"2244\":1}}],[\"小技巧\",{\"1\":{\"1897\":1}}],[\"小于等于\",{\"1\":{\"3172\":1,\"3236\":1}}],[\"小于\",{\"1\":{\"3172\":1,\"3236\":1,\"3498\":1}}],[\"小于0的数字\",{\"1\":{\"1757\":1}}],[\"小于o2\",{\"1\":{\"754\":1}}],[\"小数位的值\",{\"1\":{\"1139\":1}}],[\"小数点后16位\",{\"1\":{\"761\":1}}],[\"小驼峰\",{\"1\":{\"1083\":1}}],[\"小时\",{\"1\":{\"501\":2}}],[\"小程序端主要提供给消费者使用\",{\"1\":{\"49\":1}}],[\"小程序端应用\",{\"1\":{\"49\":1}}],[\"小到一个按钮\",{\"1\":{\"24\":1}}],[\"和数据库信息\",{\"1\":{\"3712\":1}}],[\"和数组元素的默认值一样\",{\"1\":{\"1273\":1}}],[\"和数组第一个元素的内存地址\",{\"1\":{\"1227\":1}}],[\"和其它数据库\",{\"1\":{\"3712\":1}}],[\"和单实例的用户登录认证类似\",{\"1\":{\"3723\":1}}],[\"和单机mongodb差不多\",{\"1\":{\"3656\":1}}],[\"和单文档操作的流程原理是一样的\",{\"1\":{\"3415\":1}}],[\"和排序方式\",{\"1\":{\"3623\":1}}],[\"和命令编写顺序无关\",{\"1\":{\"3611\":1}}],[\"和$有特别的意义\",{\"1\":{\"3593\":1}}],[\"和code\",{\"1\":{\"3547\":1}}],[\"和请求中指定的版本号是否相同\",{\"1\":{\"3498\":1}}],[\"和之前的集群相比\",{\"1\":{\"3397\":1}}],[\"和之前创建项目的过程一样\",{\"1\":{\"161\":1}}],[\"和复制分片\",{\"1\":{\"3369\":1}}],[\"和证书目录\",{\"1\":{\"3321\":1}}],[\"和目录同上\",{\"1\":{\"3298\":1}}],[\"和新增文档一样\",{\"1\":{\"3144\":1}}],[\"和value\",{\"1\":{\"3041\":1}}],[\"和html一样\",{\"1\":{\"3020\":1}}],[\"和httpservletrequest等域对象的创建与销毁事件\",{\"1\":{\"2959\":1}}],[\"和hashcode\",{\"1\":{\"1885\":1,\"1912\":1,\"1918\":1}}],[\"和request对象一样\",{\"1\":{\"2936\":1}}],[\"和requestfacade一样\",{\"1\":{\"2841\":1}}],[\"和resume\",{\"1\":{\"1775\":1}}],[\"和mysql对比\",{\"0\":{\"3545\":1}}],[\"和mysql的解决方案一样\",{\"1\":{\"3455\":1}}],[\"和mysql的组合查询类似\",{\"1\":{\"3168\":1,\"3229\":1}}],[\"和mysql不同\",{\"1\":{\"3366\":1}}],[\"和mysql里的排序差不多\",{\"1\":{\"3184\":1}}],[\"和mysql里的分页差不多\",{\"1\":{\"3181\":1}}],[\"和mybatis\",{\"1\":{\"599\":1}}],[\"和mybatis的连接配置一样\",{\"1\":{\"372\":1}}],[\"和maven的坐标\",{\"1\":{\"2737\":1,\"2741\":1}}],[\"和输出type\",{\"1\":{\"2735\":1}}],[\"和直接创建web\",{\"1\":{\"2732\":1}}],[\"和一个或多个备份节点\",{\"1\":{\"3642\":1}}],[\"和一个用来连接和关闭资源的jdbc工具类\",{\"1\":{\"2644\":1}}],[\"和一些不常用的\",{\"1\":{\"2386\":1}}],[\"和业务耦合\",{\"1\":{\"2642\":1}}],[\"和删除普通字段的操作一样\",{\"1\":{\"2612\":1}}],[\"和添加的步骤一样\",{\"1\":{\"2612\":1}}],[\"和给占位符赋的值\",{\"1\":{\"2579\":1}}],[\"和初始值类型相同的值\",{\"1\":{\"2487\":1}}],[\"和elasticsearch\",{\"1\":{\"3110\":1}}],[\"和eat\",{\"1\":{\"2344\":1}}],[\"和equals\",{\"1\":{\"1894\":1,\"1897\":1,\"1909\":1}}],[\"和静态方法\",{\"1\":{\"2277\":1}}],[\"和outputstream\",{\"1\":{\"2214\":1}}],[\"和ojbectoutputsteam两个类组成\",{\"1\":{\"2142\":1}}],[\"和println\",{\"1\":{\"2120\":1}}],[\"和流基类的字节流方法基本一样\",{\"1\":{\"2105\":1}}],[\"和流基类的read方法类似\",{\"1\":{\"2098\":1}}],[\"和流基类的方法一样\",{\"1\":{\"2044\":1}}],[\"和流的基类基本一致\",{\"1\":{\"2092\":1}}],[\"和节点流的操作一样\",{\"1\":{\"2081\":2}}],[\"和类初始化给的类型一致或是object\",{\"1\":{\"1978\":1}}],[\"和last\",{\"1\":{\"1872\":1}}],[\"和wait\",{\"0\":{\"1803\":1}}],[\"和正常类一样\",{\"1\":{\"1630\":1}}],[\"和普通类一样\",{\"1\":{\"1628\":1,\"1630\":1}}],[\"和普通的maven创建的项目一样\",{\"1\":{\"167\":1}}],[\"和创建一个普通对象一样\",{\"1\":{\"1567\":1}}],[\"和饿汉式差不多\",{\"1\":{\"1489\":1}}],[\"和x不同类型的对象\",{\"1\":{\"1428\":1}}],[\"和==的作用是相同的\",{\"1\":{\"1427\":1}}],[\"和方法重载一样\",{\"1\":{\"1319\":1}}],[\"和对象\",{\"1\":{\"1255\":1}}],[\"和表达式2为\",{\"0\":{\"1161\":1}}],[\"和|\",{\"1\":{\"1153\":1}}],[\"和基本数据类型一样\",{\"1\":{\"1124\":1}}],[\"和整形类似\",{\"1\":{\"1092\":1}}],[\"和3种引用类型\",{\"1\":{\"1075\":1}}],[\"和持续时间\",{\"1\":{\"709\":1}}],[\"和servlet类似\",{\"1\":{\"2835\":1}}],[\"和setxxx\",{\"1\":{\"1305\":1,\"1306\":1}}],[\"和sql的distinct类似\",{\"1\":{\"2459\":1}}],[\"和sql中的效果类似\",{\"1\":{\"2452\":1}}],[\"和string\",{\"1\":{\"774\":1}}],[\"和string的length方法类似\",{\"1\":{\"699\":1}}],[\"和spring整合junit一样\",{\"1\":{\"229\":1}}],[\"和默认的simple缓存用法完全一样\",{\"1\":{\"484\":1}}],[\"和默认的simple和encache用法基本一样\",{\"1\":{\"481\":1}}],[\"和默认的simple用法基本一样\",{\"1\":{\"475\":1}}],[\"和认证机制\",{\"1\":{\"390\":1}}],[\"和网络互联协议\",{\"1\":{\"2203\":1}}],[\"和网络\",{\"1\":{\"348\":1}}],[\"和要被监控的生产项目\",{\"1\":{\"314\":1}}],[\"和自定义bean的属性绑定操作类似\",{\"1\":{\"205\":1}}],[\"和我们的程序是平级的\",{\"1\":{\"180\":1}}],[\"和需要添加的依赖\",{\"1\":{\"96\":1}}],[\"和众多常用开发技术\",{\"1\":{\"50\":1}}],[\"和\",{\"0\":{\"713\":1,\"2439\":1},\"1\":{\"49\":1,\"308\":2,\"550\":1,\"554\":1,\"718\":1,\"903\":1,\"929\":1,\"1153\":2,\"1650\":4,\"1677\":1,\"1680\":1,\"1826\":1,\"1830\":2,\"1909\":2,\"1942\":1,\"2031\":1,\"2221\":1,\"2229\":1,\"2244\":3,\"2449\":1,\"2459\":1,\"2489\":1,\"2683\":1,\"2954\":1,\"3011\":2,\"3090\":1,\"3092\":1,\"3097\":1,\"3105\":1,\"3176\":1,\"3187\":1,\"3188\":1,\"3247\":1,\"3248\":1,\"3407\":1,\"3413\":1,\"3431\":1,\"3441\":1,\"3464\":1,\"3469\":1,\"3473\":1,\"3503\":1,\"3526\":1,\"3527\":1,\"3575\":1,\"3611\":1}}],[\"系统超级用户\",{\"1\":{\"3708\":1}}],[\"系统架构\",{\"0\":{\"3373\":1}}],[\"系统内置的用户名\",{\"1\":{\"3329\":1}}],[\"系统\",{\"0\":{\"3105\":1}}],[\"系统资源会被毫无顾及的分配出去\",{\"1\":{\"2662\":1}}],[\"系统资源的竞争\",{\"0\":{\"1792\":1}}],[\"系统类加载器\",{\"1\":{\"2279\":1,\"2280\":1}}],[\"系统不保证udp数据报一定能够安全送到目的地\",{\"1\":{\"2229\":1}}],[\"系统不需要为一个不执行的程序创建进程\",{\"1\":{\"1685\":1}}],[\"系统也进行了判断\",{\"1\":{\"1754\":1}}],[\"系统进行if判断\",{\"1\":{\"1754\":1}}],[\"系统在运行时会为每个进程分配不同的内存区域\",{\"1\":{\"1684\":1}}],[\"系统自动生成的异常对象\",{\"1\":{\"1567\":1,\"1606\":1}}],[\"系统就不再提供默认的空参构造器\",{\"1\":{\"1320\":1}}],[\"系统默认导入\",{\"1\":{\"2989\":1}}],[\"系统默认提供\",{\"1\":{\"1318\":1}}],[\"系统默认的舍入策略不是四舍五入\",{\"1\":{\"783\":1}}],[\"系统首先自动将所有数据转换成容量最大的那种数据类型\",{\"1\":{\"1111\":1}}],[\"系统中的数据\",{\"1\":{\"3524\":1}}],[\"系统中常见的属性名以及属性的作用如下表所示\",{\"1\":{\"884\":1}}],[\"系统中开启的定时任务\",{\"1\":{\"334\":1}}],[\"系统级的很多属性和控制方法都放置在该类的内部\",{\"1\":{\"880\":1}}],[\"系统时间变化会导致执行计划的变更\",{\"1\":{\"494\":1}}],[\"系统管理后台\",{\"1\":{\"49\":1}}],[\"系统定义前缀名\",{\"1\":{\"483\":1}}],[\"系统定义\",{\"1\":{\"21\":1}}],[\"饭店\",{\"1\":{\"49\":1}}],[\"餐厅\",{\"1\":{\"49\":1}}],[\"苍穹外卖后台\",{\"1\":{\"51\":1}}],[\"苍穹外卖前台\",{\"1\":{\"51\":1}}],[\"苍穹外卖介绍\",{\"0\":{\"48\":1}}],[\"苍穹外卖\",{\"0\":{\"47\":1},\"1\":{\"48\":1,\"49\":1}}],[\"bson和mongodb\",{\"1\":{\"3743\":1}}],[\"bson和json一样\",{\"1\":{\"3547\":1}}],[\"bson数据类型参考\",{\"0\":{\"3548\":1}}],[\"bson中\",{\"1\":{\"3547\":1}}],[\"bson采用了类似于\",{\"1\":{\"3547\":1}}],[\"bson\",{\"0\":{\"3547\":1},\"1\":{\"3547\":1,\"3583\":1}}],[\"bn72gx\",{\"1\":{\"3328\":1}}],[\"bfilter\",{\"1\":{\"2954\":1}}],[\"b<g>\",{\"1\":{\"1986\":1}}],[\"b是a的一个子类型\",{\"1\":{\"1985\":1}}],[\"b却不会重新进行if判断\",{\"1\":{\"1754\":1}}],[\"b线程拿到的是老数据\",{\"1\":{\"1753\":1}}],[\"b也返回true\",{\"1\":{\"1416\":1}}],[\"b+4\",{\"1\":{\"1117\":1}}],[\"bb\",{\"1\":{\"905\":2,\"906\":2,\"907\":1,\"908\":1,\"910\":1,\"911\":1,\"912\":2,\"913\":2,\"914\":1,\"1246\":1,\"1510\":1,\"1931\":1,\"1993\":1,\"1995\":2,\"1996\":2,\"2463\":3,\"2635\":1}}],[\"browser\",{\"1\":{\"2750\":1,\"3305\":1,\"3328\":1}}],[\"broker\",{\"1\":{\"451\":1}}],[\"broker<\",{\"1\":{\"119\":1}}],[\"break是终止\",{\"1\":{\"1197\":1}}],[\"break语句用于终止某个语句块的执行\",{\"1\":{\"1192\":1}}],[\"break关键字是可选的\",{\"1\":{\"1175\":1}}],[\"break\",{\"0\":{\"1192\":1},\"1\":{\"1174\":3,\"1175\":1,\"1176\":1,\"1186\":1,\"1191\":1,\"1194\":1,\"1198\":2,\"1204\":2,\"1678\":1,\"1740\":1,\"1757\":1,\"1760\":1,\"1784\":1,\"1804\":1,\"2118\":1,\"2252\":3,\"2296\":2,\"3047\":1}}],[\"br\",{\"1\":{\"829\":2,\"2082\":6,\"2118\":5,\"2858\":2}}],[\"bd\",{\"1\":{\"778\":1}}],[\"bd3\",{\"1\":{\"778\":1,\"779\":2,\"780\":2,\"781\":2}}],[\"bd2\",{\"1\":{\"778\":2,\"779\":2,\"780\":2,\"781\":2,\"782\":2,\"785\":2}}],[\"bd1\",{\"1\":{\"778\":2,\"779\":2,\"780\":2,\"781\":2,\"782\":2,\"783\":2,\"785\":2}}],[\"b3\",{\"1\":{\"775\":1,\"1440\":1}}],[\"b2\",{\"1\":{\"775\":1,\"1107\":1,\"1141\":2,\"1440\":1}}],[\"b1先取10\",{\"1\":{\"1141\":1}}],[\"b1++\",{\"1\":{\"1141\":1}}],[\"b1\",{\"1\":{\"775\":1,\"1107\":1,\"1112\":2,\"1114\":2,\"1115\":1,\"1117\":1,\"1141\":2,\"1440\":1,\"1446\":1,\"2478\":2}}],[\"begin\",{\"1\":{\"3355\":1}}],[\"beginindex\",{\"1\":{\"669\":2}}],[\"between\",{\"1\":{\"3307\":1,\"3327\":1,\"3355\":1}}],[\"been\",{\"1\":{\"3305\":1,\"3328\":1,\"3355\":1}}],[\"beats\",{\"1\":{\"3090\":1}}],[\"beanlisthandler<>\",{\"1\":{\"2689\":1}}],[\"beanlisthandler<customer>\",{\"1\":{\"2689\":1}}],[\"beanlisthandler\",{\"1\":{\"2684\":1}}],[\"beanhandler<>\",{\"1\":{\"2688\":1}}],[\"beanhandler<customer>\",{\"1\":{\"2688\":1}}],[\"beanhandler\",{\"1\":{\"2684\":1}}],[\"bean正是编写这套胶水代码的惯用模式或约定\",{\"1\":{\"1531\":1}}],[\"beanfactoryaware\",{\"1\":{\"567\":1}}],[\"beanclassloaderaware\",{\"1\":{\"567\":1}}],[\"bean等注解解析完了\",{\"1\":{\"567\":1}}],[\"bean属性读取类\",{\"1\":{\"556\":1}}],[\"bean在运行的时候\",{\"1\":{\"544\":1}}],[\"bean加载控制\",{\"0\":{\"532\":1}}],[\"bean加载方式\",{\"1\":{\"45\":1}}],[\"beandefinitionbuilder\",{\"1\":{\"527\":1,\"530\":1}}],[\"beandefinition\",{\"1\":{\"527\":4,\"530\":3}}],[\"beandefinitionregistrypostprocessor接口\",{\"1\":{\"529\":1}}],[\"beandefinitionregistrypostprocessor\",{\"0\":{\"529\":1},\"1\":{\"530\":1}}],[\"beandefinitionregistry用来进行bean属性的控制\",{\"1\":{\"527\":1}}],[\"beandefinitionregistry\",{\"1\":{\"527\":1,\"530\":1}}],[\"beandefinition接口中给出了若干种方法\",{\"1\":{\"526\":1}}],[\"bean配置文件示例\",{\"1\":{\"506\":1}}],[\"bean配置文件\",{\"0\":{\"506\":1}}],[\"bean的\",{\"1\":{\"565\":1}}],[\"bean的加载是有顺序的\",{\"1\":{\"529\":1}}],[\"bean的加载不是一个简简单单的对象\",{\"1\":{\"526\":1}}],[\"bean的加载方式\",{\"0\":{\"504\":1}}],[\"bean的覆盖\",{\"0\":{\"521\":1}}],[\"bean的方式进行加载\",{\"1\":{\"514\":1}}],[\"bean的注册和加载\",{\"0\":{\"505\":1}}],[\"bean对于性能和开发便利帮助都非常大\",{\"1\":{\"504\":1}}],[\"bean就是被加载到内存中的类\",{\"1\":{\"504\":1}}],[\"bean是干嘛的\",{\"1\":{\"504\":1}}],[\"bean是spring框架的基础部分\",{\"1\":{\"504\":1}}],[\"bean管理的service对象调用\",{\"1\":{\"471\":1}}],[\"bean管理\",{\"1\":{\"471\":1}}],[\"bean失败\",{\"1\":{\"420\":1}}],[\"beansexception\",{\"1\":{\"530\":1}}],[\"beans>\",{\"1\":{\"506\":1,\"511\":1}}],[\"beans\",{\"1\":{\"342\":1,\"418\":1,\"506\":4,\"511\":4,\"2661\":1}}],[\"bean注解式该方法的返回值加入bean\",{\"1\":{\"510\":1}}],[\"bean注解\",{\"1\":{\"202\":1}}],[\"bean\",{\"1\":{\"128\":2,\"202\":1,\"204\":1,\"212\":1,\"342\":2,\"393\":1,\"418\":3,\"442\":1,\"444\":3,\"510\":1,\"511\":1,\"513\":2,\"514\":2,\"536\":2,\"540\":4,\"541\":2,\"543\":1,\"545\":2,\"555\":2,\"567\":4,\"626\":1,\"1538\":1}}],[\"beiduofen\",{\"1\":{\"2657\":1}}],[\"belief\",{\"1\":{\"2344\":2,\"2345\":1}}],[\"be\",{\"1\":{\"1059\":1,\"3267\":3,\"3298\":1,\"3503\":3}}],[\"birth\",{\"1\":{\"2567\":1,\"2569\":1,\"2573\":1,\"2597\":3,\"2599\":4,\"2601\":1,\"2612\":1,\"2613\":4,\"2656\":5,\"2686\":1,\"2688\":1,\"2689\":1,\"2690\":4,\"2691\":3}}],[\"bird\",{\"1\":{\"1456\":3,\"1457\":2}}],[\"bifunction<integer\",{\"1\":{\"2427\":1,\"2428\":1}}],[\"bis\",{\"1\":{\"2084\":6}}],[\"bit\",{\"1\":{\"2562\":1}}],[\"bit位向右移动\",{\"1\":{\"1157\":1}}],[\"bit位向左移动\",{\"1\":{\"1157\":1}}],[\"bitman\",{\"1\":{\"701\":2}}],[\"bi\",{\"1\":{\"777\":1}}],[\"bigint\",{\"1\":{\"2562\":1}}],[\"biginteger\",{\"0\":{\"777\":1},\"1\":{\"777\":5,\"778\":1,\"888\":1,\"1009\":1}}],[\"biginteger或objectid中的一种\",{\"1\":{\"398\":1}}],[\"bigdecimal继承了comparable接口\",{\"1\":{\"785\":1}}],[\"bigdecimal所创建的是对象\",{\"1\":{\"778\":1}}],[\"bigdecimal的特殊创建方法\",{\"1\":{\"778\":1}}],[\"bigdecimal类支持不可变的\",{\"1\":{\"778\":1}}],[\"bigdecimal类\",{\"1\":{\"778\":1}}],[\"bigdecimal\",{\"0\":{\"778\":1},\"1\":{\"746\":1,\"778\":15,\"779\":7,\"780\":7,\"781\":7,\"782\":11,\"783\":5,\"785\":5,\"888\":1,\"1009\":1}}],[\"bin目录中\",{\"1\":{\"3296\":1}}],[\"bin目录添加到path\",{\"1\":{\"1029\":1}}],[\"binary\",{\"1\":{\"2562\":2,\"3546\":1,\"3547\":2,\"3670\":1,\"3673\":1,\"3674\":1,\"3700\":1,\"3701\":1}}],[\"binaryoperator\",{\"0\":{\"2488\":1},\"1\":{\"2487\":1,\"2488\":1}}],[\"binaryopearator\",{\"1\":{\"2487\":1}}],[\"binarysearch\",{\"0\":{\"894\":1},\"1\":{\"894\":3}}],[\"bin\",{\"1\":{\"578\":1,\"1029\":1,\"1491\":1,\"3106\":1,\"3107\":1,\"3289\":1,\"3296\":1,\"3304\":1,\"3305\":2,\"3310\":1,\"3315\":1,\"3320\":1,\"3324\":1,\"3328\":3,\"3331\":1,\"3333\":1,\"3340\":3,\"3342\":1,\"3343\":1,\"3353\":1,\"3563\":1,\"3656\":1,\"3657\":1,\"3658\":1}}],[\"bindipall\",{\"1\":{\"3656\":1}}],[\"bindip绑定的端口\",{\"1\":{\"3562\":1,\"3656\":1}}],[\"bindip\",{\"1\":{\"3562\":1,\"3656\":1}}],[\"bindingbuilder\",{\"1\":{\"444\":1}}],[\"bindingdirect\",{\"1\":{\"444\":1}}],[\"binding\",{\"1\":{\"444\":1}}],[\"bind\",{\"1\":{\"444\":1,\"2342\":1,\"2343\":1,\"2708\":1}}],[\"b\",{\"0\":{\"1522\":1,\"2350\":1,\"2357\":1,\"2379\":1,\"2394\":1,\"2434\":1,\"2488\":1,\"2493\":1,\"2509\":1},\"1\":{\"379\":2,\"672\":1,\"673\":2,\"692\":1,\"693\":2,\"761\":2,\"767\":1,\"768\":1,\"769\":1,\"794\":1,\"795\":1,\"805\":2,\"807\":2,\"814\":3,\"818\":1,\"824\":1,\"825\":12,\"826\":1,\"897\":1,\"899\":2,\"944\":2,\"945\":1,\"946\":2,\"947\":1,\"948\":3,\"949\":3,\"950\":3,\"951\":2,\"952\":3,\"959\":2,\"970\":2,\"987\":2,\"991\":1,\"1001\":2,\"1115\":4,\"1117\":4,\"1220\":1,\"1338\":1,\"1360\":2,\"1376\":1,\"1430\":5,\"1536\":1,\"1555\":2,\"1556\":2,\"1582\":2,\"1680\":1,\"1795\":1,\"2101\":1,\"2124\":1,\"2206\":3,\"2356\":1,\"2392\":1,\"2393\":1,\"2440\":1,\"2444\":1,\"2445\":1,\"2457\":1,\"2462\":1,\"2477\":2,\"2487\":1,\"2488\":1,\"2492\":2,\"2504\":2,\"2942\":2,\"3548\":1,\"3616\":1}}],[\"bar\",{\"1\":{\"3285\":1,\"3288\":1,\"3289\":1,\"3319\":1,\"3320\":1}}],[\"baidu\",{\"1\":{\"3057\":3}}],[\"balance\",{\"1\":{\"2635\":4,\"2639\":1}}],[\"bankcard\",{\"1\":{\"1616\":1}}],[\"banktemplatemethod\",{\"1\":{\"1500\":2}}],[\"bank2\",{\"1\":{\"1488\":2}}],[\"bank1\",{\"1\":{\"1488\":2}}],[\"bank\",{\"1\":{\"1488\":9}}],[\"backup\",{\"1\":{\"3703\":1,\"3704\":1}}],[\"back\",{\"1\":{\"1336\":1,\"1343\":2}}],[\"baby\",{\"1\":{\"700\":3}}],[\"bat即可启动\",{\"1\":{\"2703\":1}}],[\"batches\",{\"1\":{\"3154\":1}}],[\"batch\",{\"1\":{\"2683\":1}}],[\"batman\",{\"1\":{\"702\":1,\"703\":1,\"704\":1,\"822\":1,\"824\":1,\"827\":1,\"989\":3,\"990\":3,\"2369\":1}}],[\"bat8\",{\"1\":{\"680\":1}}],[\"bat\",{\"1\":{\"578\":1,\"679\":1,\"682\":1,\"992\":1,\"2369\":1,\"2704\":1,\"3107\":1,\"3353\":1}}],[\"basic\",{\"1\":{\"834\":1,\"835\":1,\"836\":2,\"837\":2,\"838\":2,\"840\":1,\"846\":1,\"848\":2,\"859\":1,\"1630\":1}}],[\"basiccredentialsprovider\",{\"1\":{\"418\":2}}],[\"base64\",{\"1\":{\"3726\":1}}],[\"base=\",{\"1\":{\"3029\":3}}],[\"based\",{\"1\":{\"3267\":1,\"3503\":1,\"3696\":1}}],[\"basedao<customer>\",{\"1\":{\"2656\":1}}],[\"basedao<t>\",{\"1\":{\"2653\":1}}],[\"basedao的使用\",{\"0\":{\"2654\":1}}],[\"basedao设计\",{\"0\":{\"2646\":1}}],[\"basedao\",{\"0\":{\"2653\":1},\"1\":{\"2642\":1,\"2644\":1,\"2681\":1}}],[\"basedir\",{\"1\":{\"149\":2}}],[\"base\",{\"1\":{\"511\":1,\"1539\":1,\"2755\":1}}],[\"basemapper<book>\",{\"1\":{\"374\":1,\"622\":1}}],[\"base类加载器执行\",{\"1\":{\"182\":1}}],[\"base类加载器\",{\"1\":{\"181\":1}}],[\"baomidou<\",{\"1\":{\"371\":1,\"600\":1,\"612\":1}}],[\"by和一系列聚合函数\",{\"1\":{\"3187\":1,\"3247\":1}}],[\"byte类型的二进制数据\",{\"1\":{\"888\":1,\"1009\":1}}],[\"bytevalue\",{\"1\":{\"772\":1}}],[\"bytes\",{\"1\":{\"674\":5}}],[\"byte\",{\"0\":{\"816\":1},\"1\":{\"671\":3,\"674\":6,\"760\":2,\"767\":1,\"771\":1,\"772\":1,\"814\":3,\"816\":1,\"818\":1,\"825\":6,\"888\":1,\"1009\":1,\"1075\":1,\"1089\":1,\"1112\":1,\"1114\":1,\"1115\":3,\"1117\":4,\"1175\":1,\"1273\":1,\"1546\":1,\"2071\":2,\"2076\":1,\"2077\":1,\"2084\":2,\"2124\":2,\"2136\":2,\"2225\":2,\"2231\":1,\"2232\":2,\"2234\":3,\"2562\":2,\"2613\":2,\"2894\":2}}],[\"by\",{\"1\":{\"246\":2,\"343\":1,\"2231\":3,\"2232\":3,\"2683\":1,\"3152\":1,\"3153\":1,\"3267\":1,\"3355\":1,\"3465\":1,\"3466\":1,\"3467\":1,\"3468\":1,\"3503\":1}}],[\"but\",{\"1\":{\"3479\":1}}],[\"buckets\",{\"1\":{\"3191\":1}}],[\"bucket中红黑树存储的node小于该默认值\",{\"1\":{\"1928\":1}}],[\"bucket中链表长度大于该默认值\",{\"1\":{\"1928\":1}}],[\"buff\",{\"1\":{\"2894\":3}}],[\"bufferedwriter\",{\"0\":{\"2083\":1},\"1\":{\"2079\":2}}],[\"bufferedoutputstream\",{\"1\":{\"2077\":3,\"2084\":2}}],[\"bufferedoutputstream才会把缓冲区中的数据一次性写到文件里\",{\"1\":{\"2074\":1}}],[\"bufferedinputstream\",{\"1\":{\"2076\":2,\"2084\":2}}],[\"bufferedinputstream会一次性从文件中读取8192个\",{\"1\":{\"2074\":1}}],[\"bufferedreader流就会自动关闭\",{\"1\":{\"2859\":1}}],[\"bufferedreader流是通过request对象来获取的\",{\"1\":{\"2859\":1}}],[\"bufferedreader的readline\",{\"1\":{\"2118\":1}}],[\"bufferedreader\",{\"0\":{\"2082\":1},\"1\":{\"829\":3,\"2078\":2,\"2082\":2,\"2118\":2,\"2855\":1,\"2858\":1,\"2862\":1}}],[\"buffer\",{\"1\":{\"2071\":3,\"2076\":2,\"2077\":1,\"2078\":1,\"2079\":1,\"2136\":3,\"2613\":3,\"3527\":3,\"3670\":1,\"3673\":1,\"3674\":1,\"3700\":1,\"3701\":1}}],[\"buf\",{\"1\":{\"2076\":1,\"2077\":1,\"2084\":4,\"2225\":3,\"2234\":4}}],[\"bulkresponse\",{\"1\":{\"3220\":1,\"3221\":1}}],[\"bulkrequest\",{\"1\":{\"3220\":3,\"3221\":3}}],[\"bulk请求\",{\"1\":{\"433\":1}}],[\"bulk操作发送了\",{\"1\":{\"433\":1}}],[\"bulk\",{\"0\":{\"433\":1},\"1\":{\"433\":1,\"3154\":1,\"3220\":1,\"3221\":1,\"3402\":1,\"3417\":1,\"3513\":1,\"3514\":3}}],[\"built\",{\"1\":{\"3479\":1}}],[\"buildindexes\",{\"1\":{\"3667\":1}}],[\"buildsslcontext\",{\"1\":{\"418\":2}}],[\"buildtime\",{\"1\":{\"347\":1}}],[\"builder\",{\"1\":{\"347\":4,\"350\":6,\"418\":1,\"3206\":3,\"3209\":3,\"3211\":3,\"3212\":3,\"3214\":3,\"3217\":3,\"3218\":3,\"3220\":3,\"3221\":3,\"3225\":3,\"3226\":3,\"3227\":3,\"3231\":3,\"3234\":3,\"3237\":3,\"3240\":3,\"3242\":3,\"3244\":3,\"3249\":3,\"3253\":3}}],[\"build\",{\"1\":{\"246\":2,\"418\":2,\"574\":2,\"577\":1,\"2992\":2,\"3108\":5}}],[\"build>\",{\"1\":{\"239\":1,\"612\":1}}],[\"buidl\",{\"1\":{\"186\":1}}],[\"busy\",{\"1\":{\"1616\":1}}],[\"bus\",{\"1\":{\"11\":1}}],[\"blob\",{\"1\":{\"2608\":1,\"2613\":1}}],[\"blob是一个二进制大型对象\",{\"1\":{\"2608\":1}}],[\"blob类型\",{\"0\":{\"2608\":1}}],[\"blob数据\",{\"1\":{\"2607\":1}}],[\"blocks\",{\"0\":{\"3758\":1}}],[\"blocking\",{\"1\":{\"2161\":1}}],[\"block\",{\"1\":{\"1526\":1}}],[\"blockquote>\",{\"1\":{\"1059\":1}}],[\"blockquote><p>\",{\"1\":{\"1059\":1}}],[\"blogapplication\",{\"1\":{\"229\":1,\"589\":1}}],[\"blogapplicationtests\",{\"1\":{\"227\":1,\"229\":1,\"366\":2,\"375\":1}}],[\"blog\",{\"1\":{\"129\":1,\"256\":1,\"295\":1,\"366\":1,\"589\":3,\"3708\":1,\"3711\":1,\"3712\":3,\"3715\":1,\"3736\":1,\"3750\":1,\"3751\":1}}],[\"blue\",{\"1\":{\"308\":2}}],[\"blueprint<\",{\"1\":{\"119\":1}}],[\"bound\",{\"1\":{\"3191\":1}}],[\"bonecp\",{\"1\":{\"2668\":1}}],[\"bos\",{\"1\":{\"2084\":5}}],[\"boy\",{\"1\":{\"1680\":4}}],[\"bob=bb\",{\"1\":{\"960\":2}}],[\"bob=b\",{\"1\":{\"959\":2,\"960\":1,\"961\":2,\"962\":1,\"963\":1,\"964\":1,\"965\":1,\"966\":1,\"967\":1,\"968\":2,\"969\":1,\"970\":1,\"971\":2}}],[\"bob\",{\"1\":{\"750\":3,\"751\":2,\"757\":2,\"959\":2,\"964\":1,\"969\":2}}],[\"boldmagenta\",{\"1\":{\"308\":1}}],[\"bolgapplication\",{\"1\":{\"98\":1}}],[\"boolquery\",{\"1\":{\"3230\":1,\"3231\":1}}],[\"boolquerybuilder对象\",{\"1\":{\"3230\":1,\"3231\":1}}],[\"boolquerybuilder\",{\"0\":{\"3230\":1},\"1\":{\"3230\":4,\"3231\":5}}],[\"bool\",{\"1\":{\"2317\":1,\"3169\":1}}],[\"boolean类的默认值是null\",{\"1\":{\"1441\":1}}],[\"boolean类型不与其他类型参与比较\",{\"1\":{\"1426\":1}}],[\"boolean类型不可以转换为其它的数据类型\",{\"1\":{\"1117\":1}}],[\"boolean类型数据只允许取值true和false\",{\"1\":{\"1106\":1}}],[\"boolean类型的字符串只有true\",{\"1\":{\"671\":1}}],[\"boolean构造器的值\",{\"1\":{\"1441\":1}}],[\"boolean转换的特殊性说明\",{\"0\":{\"1441\":1}}],[\"boolean示例\",{\"1\":{\"1440\":1}}],[\"boolean只能取true和false没法参加运算\",{\"1\":{\"1110\":1}}],[\"boolean只能用true和false表示\",{\"1\":{\"1108\":1}}],[\"booleanresponse\",{\"1\":{\"424\":1,\"430\":1}}],[\"boolean\",{\"0\":{\"1105\":1},\"1\":{\"147\":1,\"350\":1,\"471\":2,\"473\":1,\"514\":1,\"525\":1,\"635\":3,\"636\":3,\"640\":3,\"643\":1,\"646\":4,\"647\":2,\"652\":3,\"653\":1,\"659\":1,\"661\":1,\"662\":1,\"663\":1,\"671\":3,\"681\":1,\"746\":1,\"797\":2,\"798\":2,\"799\":2,\"800\":4,\"801\":2,\"803\":2,\"804\":2,\"805\":2,\"807\":2,\"810\":4,\"822\":2,\"823\":2,\"866\":1,\"888\":1,\"896\":2,\"905\":1,\"906\":1,\"909\":2,\"910\":2,\"911\":2,\"912\":2,\"913\":2,\"914\":2,\"915\":2,\"924\":2,\"938\":1,\"946\":3,\"950\":1,\"964\":3,\"965\":3,\"967\":3,\"968\":2,\"977\":1,\"987\":1,\"991\":2,\"998\":1,\"1000\":3,\"1009\":1,\"1075\":1,\"1106\":1,\"1107\":2,\"1204\":1,\"1270\":1,\"1273\":1,\"1428\":1,\"1440\":6,\"1446\":3,\"1546\":1,\"1652\":1,\"1781\":1,\"2124\":1,\"2127\":1,\"2166\":3,\"2168\":7,\"2196\":2,\"2317\":1,\"2392\":1,\"2477\":2,\"2478\":2,\"2479\":2,\"2504\":2,\"2562\":1,\"2571\":1,\"2590\":1,\"2628\":1,\"2682\":1,\"3209\":1,\"3547\":1,\"3595\":2}}],[\"book>\",{\"1\":{\"636\":1,\"637\":1}}],[\"book2\",{\"1\":{\"422\":2}}],[\"book\",{\"1\":{\"364\":2,\"365\":2,\"619\":1,\"623\":15,\"632\":1,\"633\":2,\"635\":5,\"636\":17,\"640\":7,\"647\":12}}],[\"bookcontroller2\",{\"1\":{\"640\":1}}],[\"bookcontroller\",{\"1\":{\"288\":2,\"290\":1,\"309\":1,\"647\":1}}],[\"bookserviceimpl\",{\"0\":{\"636\":1},\"1\":{\"636\":1,\"637\":1}}],[\"bookserviceimpl4\",{\"1\":{\"530\":1}}],[\"bookserviceimpl2\",{\"1\":{\"527\":1}}],[\"bookservice\",{\"0\":{\"635\":1},\"1\":{\"527\":1,\"530\":1,\"635\":1,\"640\":7,\"647\":8}}],[\"books\",{\"1\":{\"288\":1,\"290\":1,\"309\":1,\"640\":1,\"647\":1}}],[\"bookdaotestcase\",{\"1\":{\"623\":1}}],[\"bookdao\",{\"1\":{\"227\":3,\"365\":2,\"366\":3,\"374\":1,\"375\":4,\"622\":1,\"623\":7,\"627\":1,\"628\":1,\"631\":1,\"632\":1,\"633\":1,\"636\":7,\"637\":2}}],[\"bootstrap\",{\"1\":{\"3355\":2}}],[\"boot版本和需要直接安装的组件\",{\"1\":{\"581\":1}}],[\"boot会自动加载他们\",{\"1\":{\"560\":1}}],[\"boot提供了大量\",{\"1\":{\"539\":1}}],[\"boot提供了更好的解决方案\",{\"1\":{\"537\":1}}],[\"boot提供不了\",{\"1\":{\"345\":1}}],[\"boot的自动装配\",{\"1\":{\"504\":1}}],[\"boot后\",{\"1\":{\"499\":1}}],[\"boot项目\",{\"1\":{\"314\":1}}],[\"boot内部使用logback作为日志实现的框架\",{\"1\":{\"306\":1}}],[\"bootwebapplication<\",{\"1\":{\"170\":1}}],[\"bootintroduction1application\",{\"1\":{\"128\":3}}],[\"boot<\",{\"1\":{\"100\":1,\"117\":1,\"118\":1,\"119\":1,\"123\":3,\"134\":2,\"135\":1,\"169\":1,\"170\":1,\"171\":1,\"185\":1,\"209\":1,\"223\":1,\"239\":1,\"319\":1,\"355\":1,\"361\":1,\"377\":1,\"387\":1,\"438\":1,\"450\":1,\"466\":1,\"482\":1,\"592\":1,\"593\":1,\"594\":1,\"595\":1,\"602\":1,\"604\":1,\"608\":1,\"612\":7,\"3748\":1}}],[\"boot\",{\"0\":{\"118\":1,\"119\":1,\"244\":1,\"245\":1,\"316\":1,\"318\":1,\"322\":1,\"608\":1},\"1\":{\"50\":1,\"53\":1,\"96\":1,\"100\":2,\"109\":2,\"117\":1,\"118\":2,\"119\":1,\"120\":3,\"123\":4,\"133\":3,\"134\":4,\"135\":1,\"163\":1,\"169\":2,\"170\":1,\"171\":1,\"176\":1,\"185\":1,\"209\":1,\"223\":2,\"239\":1,\"240\":1,\"241\":3,\"244\":2,\"246\":11,\"316\":1,\"317\":1,\"319\":4,\"321\":1,\"323\":1,\"324\":1,\"326\":1,\"352\":1,\"355\":2,\"361\":2,\"371\":2,\"377\":1,\"387\":1,\"414\":2,\"416\":1,\"438\":1,\"450\":1,\"466\":1,\"482\":1,\"592\":3,\"593\":2,\"594\":2,\"595\":2,\"598\":1,\"600\":1,\"602\":1,\"604\":1,\"607\":1,\"608\":1,\"612\":10,\"3748\":1}}],[\"p0\",{\"1\":{\"3373\":2}}],[\"pkcs\",{\"1\":{\"3293\":1}}],[\"pkcs12\",{\"1\":{\"418\":1}}],[\"pbtqhy8etvs2b7eo\",{\"1\":{\"3108\":1}}],[\"pb\",{\"1\":{\"3091\":1,\"3542\":1}}],[\"pwd>\",{\"1\":{\"3019\":1}}],[\"pwd=12354\",{\"1\":{\"2858\":1}}],[\"pwd\",{\"1\":{\"2857\":1,\"3707\":1,\"3709\":1,\"3710\":1,\"3711\":1,\"3724\":1}}],[\"ppt这些不是文本文件\",{\"1\":{\"2045\":1}}],[\"ppt\",{\"1\":{\"2045\":1}}],[\"pcdata\",{\"1\":{\"3025\":3}}],[\"pclass\",{\"1\":{\"2257\":4,\"2258\":4,\"2285\":2}}],[\"pc\",{\"1\":{\"1687\":1,\"3108\":1,\"3355\":1}}],[\"p3\",{\"0\":{\"1551\":2}}],[\"p4里面没有加载子类的元素\",{\"1\":{\"1418\":1}}],[\"p4\",{\"1\":{\"1418\":2}}],[\"phrase时\",{\"1\":{\"3179\":1}}],[\"phrase关键字取代match关键字\",{\"1\":{\"3178\":1}}],[\"photo\",{\"1\":{\"2612\":1,\"2613\":4}}],[\"phone\",{\"1\":{\"1267\":5}}],[\"php\",{\"1\":{\"1020\":1,\"2247\":1,\"2695\":1}}],[\"p2分别保持了资源r1\",{\"1\":{\"1793\":1}}],[\"p2改的值\",{\"1\":{\"1475\":1}}],[\"p2也能取到\",{\"1\":{\"1475\":1}}],[\"p2\",{\"0\":{\"1550\":1},\"1\":{\"1133\":4,\"1262\":2,\"1475\":3,\"3373\":2}}],[\"p>\",{\"1\":{\"1059\":1,\"1060\":1}}],[\"python\",{\"1\":{\"1020\":1,\"2247\":1}}],[\"p1v7xkwwo8lgv62\",{\"1\":{\"3305\":2}}],[\"p12证书\",{\"1\":{\"3300\":1}}],[\"p12\",{\"1\":{\"3110\":1,\"3296\":3,\"3298\":3,\"3301\":1,\"3307\":3,\"3326\":2,\"3327\":3,\"3337\":3,\"3355\":3}}],[\"p1和p2是完全独立的\",{\"1\":{\"1550\":1}}],[\"p1指向了对象实体\",{\"1\":{\"1548\":1}}],[\"p1也受影响\",{\"1\":{\"1475\":1}}],[\"p1赋的值\",{\"1\":{\"1475\":1}}],[\"p1\",{\"0\":{\"1548\":1,\"1549\":2,\"1551\":1},\"1\":{\"850\":1,\"1133\":4,\"1259\":5,\"1262\":3,\"1266\":3,\"1280\":2,\"1302\":2,\"1304\":4,\"1315\":1,\"1316\":1,\"1475\":3,\"1793\":1,\"2157\":2,\"2256\":4,\"2258\":4,\"2267\":2,\"2286\":1,\"3373\":2}}],[\"please\",{\"1\":{\"3296\":1}}],[\"plaintext\",{\"1\":{\"3110\":1,\"3314\":1,\"3347\":1}}],[\"platform\",{\"1\":{\"2536\":1,\"2850\":1}}],[\"play\",{\"1\":{\"550\":1,\"554\":1,\"555\":1}}],[\"plugins\",{\"1\":{\"648\":1,\"3106\":1,\"3289\":1,\"3320\":1}}],[\"plugins>\",{\"1\":{\"100\":1,\"239\":1,\"612\":1}}],[\"plugin的jar包的manifeast\",{\"1\":{\"246\":1}}],[\"plugin插件的jar包\",{\"0\":{\"244\":1,\"245\":1}}],[\"plugin插件注释掉\",{\"1\":{\"241\":1}}],[\"plugin插件打包\",{\"1\":{\"241\":2}}],[\"plugin插件用于将当前程序打包成一个可以独立运行的程序包\",{\"1\":{\"240\":1}}],[\"plugin\",{\"0\":{\"3764\":1},\"1\":{\"169\":1,\"246\":2,\"3479\":2,\"3487\":1}}],[\"plugin>\",{\"1\":{\"100\":1,\"169\":1,\"170\":1,\"171\":1,\"239\":1,\"612\":1}}],[\"plugin<\",{\"1\":{\"100\":1,\"169\":1,\"170\":1,\"171\":1,\"239\":1,\"612\":1}}],[\"plugin是没有指定version的\",{\"1\":{\"100\":1}}],[\"plus变成了minus\",{\"1\":{\"722\":1}}],[\"plusweeks\",{\"1\":{\"721\":1}}],[\"plusnanos\",{\"1\":{\"721\":1}}],[\"plusseconds\",{\"1\":{\"721\":1}}],[\"plusminutes\",{\"1\":{\"721\":1}}],[\"plusmonths\",{\"1\":{\"721\":1}}],[\"plushours\",{\"1\":{\"721\":1}}],[\"plusdays\",{\"1\":{\"721\":1}}],[\"plusyears\",{\"1\":{\"721\":1}}],[\"plusxxx\",{\"0\":{\"721\":1}}],[\"plus的常用设置\",{\"1\":{\"617\":1}}],[\"plus的mapper\",{\"1\":{\"589\":1}}],[\"plus包含了mybatis\",{\"1\":{\"600\":1}}],[\"plus逆向生成代码\",{\"1\":{\"586\":1}}],[\"plus依赖\",{\"0\":{\"371\":1}}],[\"plus\",{\"0\":{\"370\":1,\"600\":1},\"1\":{\"45\":1,\"53\":1,\"371\":1,\"599\":1,\"600\":1,\"612\":5,\"616\":1,\"617\":1,\"624\":1}}],[\"pem\",{\"1\":{\"3301\":1}}],[\"pem证书\",{\"1\":{\"3300\":1}}],[\"pem参数\",{\"1\":{\"3293\":1}}],[\"pending\",{\"1\":{\"3278\":1,\"3279\":1,\"3280\":1,\"3378\":1,\"3380\":1}}],[\"pet\",{\"1\":{\"1089\":1}}],[\"performance\",{\"1\":{\"3540\":1,\"3571\":1,\"3632\":1}}],[\"perform\",{\"1\":{\"3355\":1}}],[\"performs\",{\"1\":{\"3355\":1}}],[\"percent\",{\"1\":{\"3278\":1,\"3279\":1,\"3280\":1,\"3378\":1,\"3380\":1}}],[\"persistence\",{\"1\":{\"2525\":1}}],[\"person父类的public属性\",{\"1\":{\"2290\":1}}],[\"personclass\",{\"1\":{\"2289\":2,\"2291\":1,\"2293\":1}}],[\"person>\",{\"1\":{\"835\":1,\"841\":1,\"2001\":2,\"2267\":1}}],[\"person\",{\"0\":{\"1548\":2,\"1550\":2,\"1551\":1,\"2255\":1},\"1\":{\"749\":4,\"750\":4,\"751\":15,\"757\":4,\"834\":2,\"835\":5,\"836\":2,\"837\":2,\"838\":2,\"839\":3,\"840\":2,\"841\":1,\"843\":1,\"844\":1,\"845\":1,\"848\":3,\"849\":1,\"850\":4,\"852\":1,\"853\":1,\"854\":1,\"856\":1,\"857\":1,\"858\":1,\"859\":2,\"864\":4,\"865\":5,\"868\":1,\"874\":4,\"877\":3,\"910\":2,\"1133\":4,\"1258\":1,\"1259\":3,\"1262\":3,\"1266\":2,\"1280\":3,\"1282\":3,\"1302\":3,\"1304\":3,\"1315\":2,\"1316\":4,\"1319\":5,\"1330\":3,\"1403\":2,\"1404\":1,\"1418\":2,\"1419\":2,\"1428\":2,\"1434\":1,\"1451\":3,\"1456\":5,\"1457\":1,\"1458\":1,\"1475\":5,\"1478\":1,\"1481\":2,\"1482\":1,\"1494\":1,\"1497\":3,\"1526\":1,\"1534\":2,\"1648\":1,\"1666\":1,\"1667\":1,\"1680\":7,\"1842\":1,\"1843\":1,\"1851\":1,\"2001\":2,\"2155\":1,\"2156\":2,\"2157\":4,\"2252\":1,\"2255\":4,\"2256\":2,\"2257\":2,\"2258\":3,\"2266\":2,\"2267\":3,\"2268\":2,\"2269\":2,\"2285\":4,\"2286\":4,\"2289\":1,\"2290\":1,\"2292\":3,\"2295\":1,\"2296\":1,\"2298\":1,\"2299\":1,\"2300\":1,\"2301\":1,\"2302\":1,\"2303\":1,\"2304\":1,\"2306\":3,\"2311\":4,\"2315\":3,\"3715\":1}}],[\"person类中的public属性\",{\"1\":{\"2290\":1}}],[\"person类中定义了welcome\",{\"1\":{\"1406\":1}}],[\"person类\",{\"1\":{\"748\":1,\"1680\":1,\"2001\":4}}],[\"per\",{\"1\":{\"2315\":2,\"3154\":1,\"3298\":1}}],[\"perl\",{\"1\":{\"984\":1,\"985\":1}}],[\"period\",{\"1\":{\"492\":4,\"500\":1}}],[\"peace\",{\"1\":{\"445\":1}}],[\"pintln\",{\"1\":{\"1587\":1}}],[\"pingms\",{\"1\":{\"3673\":1,\"3674\":1}}],[\"ping\",{\"1\":{\"348\":1,\"3526\":2,\"3533\":2}}],[\"pi\",{\"1\":{\"765\":4}}],[\"pi圆周率\",{\"0\":{\"765\":1}}],[\"pidfilepath\",{\"1\":{\"3656\":1,\"3657\":1,\"3658\":1}}],[\"pid\",{\"1\":{\"248\":1,\"3342\":1,\"3656\":1,\"3657\":1,\"3658\":1}}],[\"purge\",{\"1\":{\"492\":1}}],[\"pub\",{\"1\":{\"451\":1}}],[\"public类可以在任意地方被访问\",{\"1\":{\"1310\":1}}],[\"public\",{\"0\":{\"2015\":1,\"2016\":1,\"2017\":1},\"1\":{\"109\":2,\"127\":2,\"128\":2,\"155\":1,\"164\":2,\"193\":1,\"194\":1,\"197\":2,\"200\":1,\"202\":2,\"204\":1,\"207\":1,\"208\":1,\"211\":1,\"212\":1,\"215\":1,\"216\":1,\"219\":1,\"220\":1,\"259\":3,\"288\":2,\"290\":2,\"309\":2,\"320\":2,\"347\":2,\"350\":1,\"364\":1,\"365\":2,\"374\":1,\"379\":3,\"380\":1,\"394\":1,\"403\":1,\"404\":1,\"406\":1,\"407\":1,\"408\":1,\"409\":1,\"410\":1,\"418\":2,\"419\":1,\"422\":1,\"423\":2,\"424\":2,\"425\":2,\"427\":1,\"428\":2,\"429\":2,\"430\":2,\"431\":2,\"432\":2,\"444\":6,\"445\":2,\"446\":2,\"447\":3,\"452\":3,\"455\":2,\"467\":1,\"468\":1,\"470\":1,\"471\":7,\"472\":3,\"473\":3,\"493\":3,\"498\":2,\"499\":2,\"509\":1,\"510\":2,\"513\":2,\"514\":6,\"518\":2,\"520\":2,\"521\":2,\"523\":2,\"524\":1,\"525\":2,\"527\":2,\"528\":1,\"530\":2,\"536\":2,\"540\":3,\"541\":2,\"543\":2,\"546\":1,\"549\":2,\"550\":2,\"553\":1,\"554\":3,\"555\":2,\"619\":1,\"622\":1,\"623\":1,\"626\":2,\"635\":1,\"636\":6,\"637\":2,\"640\":7,\"645\":2,\"646\":6,\"647\":7,\"688\":2,\"714\":1,\"715\":1,\"716\":1,\"723\":1,\"728\":1,\"743\":2,\"746\":3,\"749\":3,\"752\":1,\"756\":1,\"757\":1,\"759\":1,\"765\":1,\"777\":1,\"778\":1,\"786\":4,\"812\":2,\"819\":1,\"820\":2,\"832\":1,\"848\":2,\"859\":1,\"861\":1,\"867\":1,\"869\":1,\"876\":1,\"880\":1,\"885\":1,\"889\":2,\"893\":1,\"899\":1,\"902\":1,\"921\":1,\"928\":1,\"932\":1,\"942\":1,\"954\":1,\"994\":1,\"1003\":1,\"1006\":1,\"1038\":1,\"1049\":1,\"1050\":1,\"1059\":1,\"1060\":1,\"1184\":1,\"1186\":1,\"1204\":1,\"1258\":2,\"1259\":2,\"1267\":7,\"1270\":2,\"1273\":1,\"1277\":1,\"1280\":3,\"1282\":3,\"1283\":1,\"1287\":2,\"1292\":3,\"1293\":1,\"1295\":1,\"1296\":1,\"1302\":2,\"1304\":4,\"1305\":1,\"1306\":1,\"1309\":1,\"1310\":1,\"1316\":2,\"1319\":4,\"1330\":3,\"1349\":1,\"1350\":1,\"1352\":1,\"1353\":1,\"1354\":1,\"1357\":1,\"1368\":3,\"1376\":3,\"1380\":1,\"1381\":1,\"1382\":1,\"1384\":1,\"1401\":3,\"1408\":4,\"1428\":1,\"1432\":1,\"1434\":1,\"1451\":2,\"1457\":1,\"1458\":3,\"1466\":3,\"1467\":5,\"1481\":2,\"1488\":1,\"1489\":1,\"1495\":1,\"1497\":5,\"1499\":2,\"1500\":5,\"1507\":4,\"1512\":7,\"1515\":3,\"1518\":1,\"1534\":4,\"1536\":1,\"1560\":2,\"1587\":2,\"1591\":1,\"1592\":1,\"1600\":4,\"1609\":3,\"1612\":3,\"1620\":1,\"1621\":8,\"1625\":1,\"1630\":4,\"1640\":2,\"1641\":1,\"1648\":2,\"1652\":1,\"1653\":1,\"1654\":1,\"1657\":1,\"1660\":1,\"1663\":1,\"1664\":1,\"1667\":1,\"1670\":2,\"1673\":1,\"1674\":1,\"1675\":1,\"1680\":5,\"1720\":3,\"1728\":4,\"1729\":3,\"1737\":3,\"1740\":3,\"1747\":1,\"1757\":3,\"1759\":1,\"1760\":3,\"1765\":1,\"1768\":4,\"1769\":3,\"1780\":1,\"1781\":1,\"1784\":3,\"1795\":4,\"1804\":3,\"1810\":3,\"1817\":3,\"1905\":1,\"1906\":1,\"1936\":1,\"1965\":2,\"1967\":3,\"1968\":1,\"1980\":1,\"1981\":1,\"1982\":1,\"1995\":1,\"1996\":1,\"2003\":1,\"2013\":1,\"2052\":1,\"2053\":1,\"2064\":1,\"2065\":1,\"2071\":1,\"2076\":1,\"2077\":2,\"2078\":2,\"2079\":2,\"2084\":1,\"2094\":1,\"2095\":1,\"2096\":1,\"2103\":1,\"2104\":1,\"2106\":1,\"2117\":2,\"2133\":2,\"2155\":2,\"2158\":1,\"2192\":1,\"2193\":1,\"2194\":1,\"2212\":1,\"2213\":1,\"2214\":9,\"2219\":2,\"2220\":1,\"2223\":1,\"2225\":1,\"2233\":9,\"2234\":6,\"2238\":5,\"2239\":6,\"2242\":7,\"2252\":2,\"2253\":1,\"2255\":6,\"2256\":1,\"2257\":1,\"2258\":1,\"2290\":2,\"2292\":1,\"2293\":1,\"2307\":1,\"2308\":1,\"2309\":1,\"2310\":1,\"2328\":2,\"2329\":1,\"2330\":2,\"2340\":1,\"2342\":1,\"2343\":2,\"2349\":3,\"2369\":1,\"2371\":1,\"2377\":1,\"2388\":1,\"2447\":3,\"2448\":1,\"2450\":1,\"2451\":1,\"2469\":4,\"2545\":1,\"2547\":1,\"2548\":1,\"2551\":1,\"2573\":1,\"2575\":1,\"2576\":1,\"2577\":1,\"2581\":1,\"2597\":1,\"2599\":3,\"2600\":1,\"2603\":1,\"2612\":1,\"2613\":1,\"2624\":1,\"2625\":1,\"2634\":1,\"2635\":1,\"2639\":1,\"2653\":5,\"2655\":1,\"2656\":8,\"2657\":8,\"2672\":1,\"2675\":1,\"2676\":1,\"2682\":7,\"2683\":5,\"2686\":1,\"2687\":1,\"2688\":1,\"2689\":1,\"2690\":2,\"2691\":1,\"2779\":2,\"2780\":1,\"2799\":1,\"2800\":1,\"2801\":1,\"2802\":1,\"2803\":1,\"2804\":3,\"2812\":1,\"2814\":2,\"2819\":1,\"2820\":1,\"2846\":1,\"2862\":1,\"2872\":1,\"2873\":1,\"2888\":1,\"2903\":2,\"2909\":1,\"2910\":1,\"2945\":4,\"2973\":3,\"2974\":1,\"3026\":1,\"3206\":2,\"3209\":2,\"3211\":2,\"3212\":2,\"3214\":2,\"3215\":1,\"3217\":2,\"3218\":2,\"3220\":2,\"3221\":2,\"3225\":2,\"3226\":2,\"3227\":2,\"3231\":2,\"3234\":2,\"3237\":2,\"3240\":2,\"3242\":2,\"3244\":2,\"3249\":2,\"3253\":2}}],[\"put是幂等性的\",{\"1\":{\"3137\":1}}],[\"put操作是幂等性的\",{\"1\":{\"3120\":1}}],[\"put与post\",{\"0\":{\"3120\":1}}],[\"put方法是有泛型限制的\",{\"1\":{\"1958\":1}}],[\"putall\",{\"0\":{\"960\":1},\"1\":{\"960\":2}}],[\"putmapping\",{\"1\":{\"640\":1,\"647\":1}}],[\"put\",{\"0\":{\"959\":1},\"1\":{\"347\":2,\"379\":1,\"959\":5,\"1922\":1,\"1931\":3,\"1935\":4,\"1958\":4,\"2811\":2,\"3117\":1,\"3197\":1,\"3282\":1,\"3393\":1,\"3454\":1,\"3509\":1}}],[\"p\",{\"1\":{\"299\":1,\"987\":2,\"999\":2,\"1000\":2,\"1001\":2,\"1282\":3,\"1419\":1,\"1456\":2,\"1497\":2,\"2157\":2,\"2166\":1,\"2233\":2,\"2257\":3,\"2285\":3,\"2306\":3,\"2311\":3,\"2458\":1,\"2477\":1,\"2478\":1,\"2479\":1,\"3561\":2}}],[\"pass\",{\"1\":{\"3355\":1}}],[\"passwd\",{\"1\":{\"418\":2,\"3291\":1,\"3322\":1}}],[\"password=root\",{\"1\":{\"2550\":1}}],[\"password=123456\",{\"1\":{\"2673\":1}}],[\"password=123\",{\"1\":{\"2237\":1}}],[\"password=123abc\",{\"1\":{\"1938\":1}}],[\"password可以用\",{\"1\":{\"2543\":1}}],[\"password\",{\"1\":{\"154\":1,\"155\":1,\"200\":1,\"356\":1,\"362\":1,\"372\":1,\"378\":1,\"383\":1,\"389\":1,\"416\":1,\"418\":3,\"439\":1,\"546\":1,\"617\":1,\"1940\":3,\"2282\":4,\"2545\":1,\"2547\":2,\"2548\":2,\"2551\":3,\"2558\":4,\"2559\":2,\"2567\":1,\"2573\":3,\"2575\":3,\"2639\":1,\"2674\":1,\"2857\":1,\"2871\":2,\"2872\":3,\"3296\":1,\"3298\":2,\"3305\":2,\"3315\":1,\"3328\":2,\"3343\":1,\"3750\":1,\"3751\":1}}],[\"paste\",{\"1\":{\"3305\":1,\"3328\":1}}],[\"paid\",{\"1\":{\"1616\":1}}],[\"packet=16m\",{\"1\":{\"2610\":1}}],[\"pack\",{\"1\":{\"846\":2,\"2303\":2}}],[\"packaging>\",{\"1\":{\"119\":1,\"2742\":1}}],[\"packaging\",{\"1\":{\"95\":1,\"172\":2}}],[\"package用来定义命名空间\",{\"1\":{\"1339\":1}}],[\"package语句作为java源文件的第一条语句\",{\"1\":{\"1336\":1}}],[\"package就是包的意思\",{\"1\":{\"1333\":1}}],[\"package=\",{\"1\":{\"511\":1}}],[\"package是一样的\",{\"1\":{\"228\":1}}],[\"package\",{\"0\":{\"1333\":1},\"1\":{\"95\":1,\"236\":1,\"347\":1,\"418\":1,\"444\":1,\"446\":1,\"470\":1,\"471\":2,\"472\":1,\"473\":1,\"524\":1,\"528\":1,\"846\":3,\"1336\":3,\"1630\":1,\"1652\":1,\"1653\":2,\"1654\":1,\"1784\":1,\"2303\":1,\"2779\":1,\"3206\":1}}],[\"parallelstream\",{\"1\":{\"2445\":3}}],[\"paramenterindex\",{\"1\":{\"2570\":1}}],[\"parameterizedtype\",{\"1\":{\"2301\":2,\"2653\":2}}],[\"parameterized\",{\"1\":{\"1948\":1}}],[\"parameter\",{\"0\":{\"1670\":1},\"1\":{\"1653\":1,\"1660\":2,\"1661\":1,\"1669\":2,\"1675\":1}}],[\"parametertypes\",{\"1\":{\"850\":1,\"858\":1,\"859\":1,\"2286\":1,\"2296\":7,\"2312\":1,\"2313\":1}}],[\"paramtype\",{\"1\":{\"2301\":2,\"2653\":2}}],[\"param来解释泛型的类型\",{\"1\":{\"1059\":1}}],[\"param\",{\"1\":{\"1059\":2,\"1060\":3}}],[\"params\",{\"1\":{\"872\":3,\"2340\":1,\"2683\":5,\"2862\":3}}],[\"parseobject\",{\"1\":{\"3087\":2}}],[\"parse方法\",{\"1\":{\"730\":1}}],[\"parse\",{\"0\":{\"730\":1},\"1\":{\"730\":1,\"733\":1,\"734\":1,\"737\":1,\"2570\":1,\"2573\":1}}],[\"parseboolean\",{\"1\":{\"671\":1,\"1446\":1}}],[\"parsebyte\",{\"1\":{\"671\":2}}],[\"parsedouble\",{\"1\":{\"671\":1,\"776\":1}}],[\"parsefloat\",{\"1\":{\"671\":1}}],[\"parselong\",{\"1\":{\"671\":1}}],[\"parseint\",{\"1\":{\"671\":2,\"776\":1,\"1135\":1,\"1446\":1,\"1580\":1,\"1587\":1}}],[\"parsexxx\",{\"0\":{\"671\":1,\"776\":1},\"1\":{\"671\":1,\"776\":1}}],[\"parentpattern\",{\"1\":{\"1003\":1}}],[\"parentpath\",{\"1\":{\"791\":2}}],[\"parent>\",{\"1\":{\"117\":1,\"118\":1}}],[\"parent\",{\"0\":{\"118\":1,\"2016\":1,\"2017\":1},\"1\":{\"117\":1,\"118\":1,\"120\":1,\"125\":1,\"786\":2,\"845\":2,\"2016\":1,\"2017\":1,\"3563\":1,\"3656\":1}}],[\"parent<\",{\"1\":{\"117\":1}}],[\"pagenum\",{\"1\":{\"3182\":1,\"3241\":1}}],[\"pagecontext域\",{\"1\":{\"2920\":2}}],[\"pagecontext\",{\"1\":{\"2920\":1}}],[\"page域对象\",{\"0\":{\"2920\":1}}],[\"pages\",{\"1\":{\"648\":1}}],[\"pagesize\",{\"1\":{\"635\":1,\"636\":4,\"640\":3,\"647\":4}}],[\"page\",{\"1\":{\"627\":3,\"628\":8,\"636\":8,\"647\":5}}],[\"paginationinnerinterceptor\",{\"1\":{\"626\":2}}],[\"path和main\",{\"1\":{\"2981\":1}}],[\"path等信息\",{\"1\":{\"2981\":1}}],[\"path不用定义\",{\"1\":{\"2717\":1}}],[\"path对应的文件\",{\"1\":{\"2168\":1}}],[\"paths类的方法\",{\"0\":{\"2167\":1}}],[\"paths则包含了两个返回path的静态工厂方法\",{\"1\":{\"2165\":1}}],[\"paths工具类\",{\"1\":{\"2165\":1}}],[\"paths和files工具类\",{\"0\":{\"2165\":1}}],[\"paths\",{\"1\":{\"2164\":2,\"2167\":1,\"3355\":1}}],[\"path可以看成是file类的升级版本\",{\"1\":{\"2164\":1}}],[\"path接口常用方法\",{\"0\":{\"2166\":1}}],[\"path接口\",{\"0\":{\"2164\":1}}],[\"pathname\",{\"0\":{\"2015\":1},\"1\":{\"786\":1}}],[\"pathvariable\",{\"1\":{\"640\":4,\"641\":1,\"647\":4}}],[\"path=\",{\"1\":{\"478\":1,\"2716\":1}}],[\"path\",{\"1\":{\"308\":7,\"342\":1,\"786\":1,\"788\":2,\"789\":2,\"1678\":1,\"2164\":3,\"2166\":16,\"2167\":3,\"2168\":42,\"2716\":2,\"2900\":1,\"3056\":1,\"3057\":1,\"3110\":1,\"3298\":1,\"3307\":3,\"3327\":3,\"3332\":2,\"3337\":5,\"3339\":4,\"3355\":6,\"3501\":3,\"3562\":1,\"3656\":1,\"3657\":1,\"3658\":1}}],[\"pattern都匹配不上时都会走这个servlet\",{\"1\":{\"2825\":1}}],[\"pattern类只能做一些简单的匹配操作\",{\"1\":{\"998\":1}}],[\"pattern类的构造器是private\",{\"1\":{\"995\":1}}],[\"pattern类的注释包含了所有java的正则语法\",{\"1\":{\"984\":1,\"986\":1}}],[\"pattern本身也可以调用很多正则方法\",{\"1\":{\"987\":1}}],[\"pattern与matcher的使用\",{\"0\":{\"987\":1}}],[\"patternsyntaxexception\",{\"1\":{\"984\":1}}],[\"patternsyntaxexception类\",{\"1\":{\"984\":1}}],[\"pattern>\",{\"1\":{\"308\":4,\"2820\":1}}],[\"pattern\",{\"0\":{\"993\":1,\"999\":1},\"1\":{\"298\":1,\"299\":1,\"304\":1,\"308\":3,\"887\":3,\"984\":6,\"986\":2,\"987\":2,\"993\":1,\"994\":2,\"996\":5,\"998\":4,\"999\":4,\"1000\":2,\"1001\":2,\"1003\":1,\"1008\":3,\"3029\":1}}],[\"pointer\",{\"1\":{\"3504\":1}}],[\"po\",{\"1\":{\"3444\":1}}],[\"poorly\",{\"1\":{\"3355\":1}}],[\"poolpreparedstatements自动触发修改为true\",{\"1\":{\"2674\":1}}],[\"poolpreparedstatements\",{\"1\":{\"2674\":1}}],[\"pool\",{\"1\":{\"384\":2,\"500\":1,\"506\":3,\"2672\":1}}],[\"polymorphism\",{\"1\":{\"1251\":1}}],[\"position\",{\"1\":{\"3473\":4,\"3476\":4,\"3480\":2,\"3482\":5,\"3483\":3,\"3485\":5,\"3489\":2}}],[\"positivenumber++\",{\"1\":{\"1186\":1}}],[\"positivenumber\",{\"1\":{\"1186\":2}}],[\"pos\",{\"1\":{\"2132\":2,\"3433\":1}}],[\"posting\",{\"1\":{\"3431\":1}}],[\"postinglist\",{\"1\":{\"3431\":1}}],[\"posttags\",{\"1\":{\"3252\":2,\"3253\":1}}],[\"post与put\",{\"0\":{\"3137\":1}}],[\"post不是\",{\"1\":{\"3120\":1,\"3137\":1}}],[\"postman\",{\"1\":{\"3111\":1,\"3134\":1,\"3140\":1,\"3148\":1,\"3158\":1,\"3183\":1,\"3186\":1,\"3189\":1,\"3309\":1}}],[\"postmapping\",{\"1\":{\"473\":1,\"640\":1,\"647\":1}}],[\"post请求获取请求参数的方式是request\",{\"1\":{\"2879\":1}}],[\"post请求中文乱码的问题就已经解决\",{\"1\":{\"2879\":1}}],[\"post的请求参数是通过request的getreader\",{\"1\":{\"2876\":1}}],[\"post方式\",{\"1\":{\"2860\":1}}],[\"post方式的处理逻辑\",{\"1\":{\"2814\":1}}],[\"post等一些列类型的请求\",{\"1\":{\"2808\":1,\"2815\":1}}],[\"postprocessbeandefinitionregistry\",{\"1\":{\"530\":1}}],[\"post\",{\"1\":{\"474\":1,\"2811\":2,\"2812\":1,\"2814\":1,\"2857\":1,\"2862\":1,\"3133\":1,\"3134\":1,\"3144\":1,\"3145\":1,\"3152\":1,\"3193\":1}}],[\"postconstruct\",{\"1\":{\"418\":2}}],[\"pow\",{\"1\":{\"769\":5}}],[\"port来手动指定端口\",{\"1\":{\"3557\":1}}],[\"port=9303\",{\"1\":{\"3335\":1}}],[\"port=9302\",{\"1\":{\"3335\":1}}],[\"port=9301\",{\"1\":{\"3335\":1}}],[\"port=9203\",{\"1\":{\"3335\":1}}],[\"port=9202\",{\"1\":{\"3335\":1}}],[\"port=9201\",{\"1\":{\"3335\":1}}],[\"port=81\",{\"1\":{\"256\":1}}],[\"port=8082\",{\"1\":{\"259\":1}}],[\"port=80\",{\"1\":{\"139\":1}}],[\"port\",{\"1\":{\"139\":1,\"152\":1,\"208\":1,\"214\":1,\"220\":1,\"272\":3,\"321\":1,\"378\":1,\"383\":1,\"384\":1,\"388\":1,\"389\":2,\"416\":1,\"418\":3,\"439\":2,\"483\":1,\"617\":1,\"2212\":1,\"2213\":1,\"2219\":2,\"2221\":1,\"2223\":1,\"2233\":2,\"2234\":1,\"2238\":2,\"2750\":1,\"3268\":3,\"3269\":3,\"3270\":3,\"3271\":3,\"3332\":1,\"3337\":3,\"3339\":4,\"3352\":1,\"3355\":1,\"3562\":1,\"3564\":1,\"3656\":1,\"3657\":1,\"3658\":1,\"3673\":1,\"3674\":1,\"3750\":1}}],[\"pox\",{\"0\":{\"117\":1}}],[\"pom并间接继承spring\",{\"1\":{\"120\":1}}],[\"pom文件会自动将继承spring\",{\"1\":{\"120\":1}}],[\"pom中\",{\"1\":{\"120\":1}}],[\"pom\",{\"0\":{\"100\":1,\"115\":1,\"116\":1,\"223\":1,\"612\":1},\"1\":{\"98\":1,\"100\":1,\"106\":1,\"118\":1,\"120\":1,\"133\":2,\"172\":1,\"239\":1,\"2727\":1}}],[\"pretags\",{\"1\":{\"3252\":2,\"3253\":1}}],[\"pre\",{\"1\":{\"3114\":1,\"3193\":1}}],[\"preparestatement\",{\"1\":{\"2567\":3,\"2569\":1,\"2573\":1,\"2577\":1,\"2581\":1,\"2597\":1,\"2600\":1,\"2603\":1,\"2612\":1,\"2613\":1,\"2621\":1,\"2624\":1,\"2625\":1,\"2634\":1,\"2653\":4}}],[\"preparedstatement对象\",{\"1\":{\"2567\":1}}],[\"preparedstatement的dql查询示例\",{\"1\":{\"2596\":1}}],[\"preparedstatement的dql操作\",{\"1\":{\"2583\":1}}],[\"preparedstatement的dml操作\",{\"1\":{\"2572\":1}}],[\"preparedstatement的操作步骤\",{\"0\":{\"2566\":1}}],[\"preparedstatement的优点\",{\"0\":{\"2561\":1}}],[\"preparedstatement\",{\"0\":{\"2563\":1,\"2565\":1},\"1\":{\"2564\":2,\"2565\":1,\"2567\":4,\"2569\":3,\"2570\":2,\"2571\":1,\"2573\":1,\"2577\":1,\"2581\":1,\"2586\":1,\"2597\":1,\"2600\":1,\"2603\":1,\"2612\":1,\"2613\":1,\"2616\":1,\"2617\":1,\"2618\":1,\"2621\":1,\"2624\":1,\"2625\":1,\"2634\":1,\"2653\":4,\"2683\":1}}],[\"prepatedstatement\",{\"1\":{\"2556\":1}}],[\"preptredstatement是statemet你的子接口\",{\"1\":{\"2560\":1}}],[\"prev\",{\"1\":{\"1874\":4}}],[\"pre><\",{\"1\":{\"1059\":2}}],[\"predicate<t>\",{\"1\":{\"977\":1,\"2392\":1}}],[\"predicate\",{\"0\":{\"977\":1},\"1\":{\"2458\":1,\"2478\":1,\"2479\":1}}],[\"prefetch\",{\"1\":{\"439\":1}}],[\"preference\",{\"1\":{\"423\":1,\"3124\":1,\"3283\":1,\"3381\":1}}],[\"prefix=\",{\"1\":{\"546\":1,\"550\":1,\"553\":1}}],[\"prefix的值只支持烤肉串书写模式\",{\"1\":{\"210\":1}}],[\"prefix\",{\"0\":{\"212\":1},\"1\":{\"155\":1,\"200\":1,\"204\":1,\"208\":1,\"211\":1,\"212\":1,\"215\":1,\"216\":1,\"219\":1,\"220\":1,\"483\":2,\"485\":1,\"500\":1,\"617\":1,\"624\":1,\"662\":1}}],[\"price\",{\"1\":{\"3141\":1,\"3142\":2,\"3153\":1,\"3159\":1,\"3160\":2,\"3164\":2,\"3190\":3,\"3191\":1}}],[\"pri\",{\"1\":{\"3127\":2}}],[\"priority=2\",{\"1\":{\"3689\":1}}],[\"priority就是优先级的值\",{\"1\":{\"3688\":1}}],[\"priorityatelection\",{\"1\":{\"3670\":1}}],[\"priority\",{\"1\":{\"1735\":3,\"3667\":1,\"3668\":1,\"3687\":2}}],[\"primitive\",{\"1\":{\"1075\":1,\"2264\":1}}],[\"primary\",{\"1\":{\"428\":1,\"429\":1,\"431\":1,\"432\":1,\"2619\":1,\"3135\":1,\"3141\":1,\"3144\":1,\"3149\":1,\"3159\":1,\"3278\":1,\"3279\":1,\"3280\":1,\"3378\":1,\"3380\":1,\"3400\":4,\"3527\":1,\"3545\":2,\"3642\":1,\"3644\":1,\"3645\":1,\"3652\":1,\"3670\":1,\"3671\":1,\"3673\":1,\"3682\":1,\"3724\":2}}],[\"private修饰的成员也继承了\",{\"1\":{\"1363\":1}}],[\"private属性和方法也继承了\",{\"1\":{\"1361\":1}}],[\"private\",{\"1\":{\"151\":4,\"152\":1,\"155\":4,\"156\":1,\"200\":4,\"208\":3,\"211\":1,\"215\":1,\"216\":1,\"220\":1,\"227\":1,\"288\":1,\"364\":4,\"366\":1,\"375\":1,\"379\":1,\"380\":1,\"394\":5,\"418\":10,\"419\":1,\"422\":1,\"423\":1,\"424\":1,\"425\":1,\"427\":3,\"428\":1,\"429\":1,\"430\":1,\"431\":1,\"432\":1,\"446\":1,\"452\":1,\"470\":2,\"471\":1,\"473\":1,\"546\":2,\"549\":4,\"550\":2,\"553\":2,\"554\":1,\"619\":4,\"623\":1,\"636\":1,\"637\":1,\"640\":1,\"646\":3,\"647\":1,\"688\":1,\"749\":2,\"759\":1,\"778\":1,\"786\":1,\"861\":1,\"864\":1,\"865\":1,\"869\":1,\"880\":1,\"889\":1,\"928\":1,\"994\":1,\"1270\":1,\"1273\":1,\"1277\":1,\"1287\":1,\"1304\":1,\"1305\":1,\"1306\":1,\"1309\":1,\"1316\":2,\"1330\":2,\"1363\":1,\"1368\":1,\"1460\":1,\"1488\":2,\"1489\":2,\"1534\":1,\"1536\":1,\"1609\":1,\"1619\":2,\"1621\":4,\"1625\":1,\"1630\":2,\"1740\":1,\"1757\":1,\"1760\":2,\"1763\":2,\"1768\":1,\"1769\":2,\"1780\":1,\"1784\":2,\"1804\":1,\"1810\":1,\"1874\":1,\"2076\":1,\"2078\":1,\"2079\":1,\"2158\":1,\"2255\":3,\"2285\":1,\"2292\":1,\"2293\":1,\"2328\":1,\"2343\":1,\"2469\":2,\"2599\":4,\"2653\":1,\"2657\":1,\"2675\":1,\"2804\":1,\"2811\":7,\"3215\":3}}],[\"printwriter\",{\"1\":{\"2120\":1,\"2885\":1,\"2887\":1,\"2888\":1,\"2890\":1}}],[\"printwriter写出字符流\",{\"1\":{\"2120\":1}}],[\"printsum\",{\"1\":{\"1817\":2}}],[\"printstream中的方法为\",{\"1\":{\"2404\":1}}],[\"printstream写出字节流\",{\"1\":{\"2120\":1}}],[\"printstream和printwriter有自动flush功能\",{\"1\":{\"2120\":1}}],[\"printstream和printwriter的输出不会抛出ioexception异常\",{\"1\":{\"2120\":1}}],[\"printstream和printwriter\",{\"0\":{\"2120\":1}}],[\"printstream\",{\"1\":{\"2117\":1,\"2120\":1,\"2121\":2,\"2404\":1}}],[\"printstracktrace\",{\"1\":{\"1591\":1}}],[\"printstacktrace\",{\"1\":{\"645\":1,\"674\":2,\"803\":1,\"827\":2,\"1587\":1,\"1589\":1,\"1592\":3,\"1600\":1,\"1729\":2,\"1795\":2,\"1804\":1,\"1810\":2,\"2052\":2,\"2053\":2,\"2064\":2,\"2065\":3,\"2071\":3,\"2082\":2,\"2084\":3,\"2118\":2,\"2121\":1,\"2231\":1,\"2232\":1,\"2573\":3,\"2576\":2,\"2577\":1,\"2581\":1,\"2597\":1,\"2600\":1,\"2603\":1,\"2634\":1,\"2635\":3,\"2653\":4,\"2657\":7,\"2675\":1,\"2676\":1}}],[\"printf\",{\"1\":{\"1680\":1}}],[\"print\",{\"1\":{\"499\":1,\"525\":1,\"1047\":1,\"1198\":1,\"1202\":1,\"1203\":1,\"1240\":1,\"1583\":1,\"1592\":1,\"1600\":1,\"1995\":3,\"1996\":3,\"2052\":1,\"2055\":1,\"2056\":1,\"2121\":1,\"2296\":10,\"2872\":2,\"2973\":2,\"3592\":1}}],[\"println\",{\"1\":{\"109\":1,\"152\":3,\"156\":1,\"288\":1,\"290\":1,\"309\":1,\"366\":1,\"375\":2,\"380\":1,\"404\":1,\"406\":1,\"407\":1,\"408\":1,\"409\":1,\"410\":1,\"422\":2,\"423\":1,\"424\":1,\"425\":2,\"428\":1,\"429\":1,\"430\":1,\"431\":1,\"432\":3,\"447\":2,\"452\":2,\"455\":1,\"493\":1,\"499\":1,\"521\":1,\"550\":1,\"554\":1,\"623\":1,\"628\":5,\"651\":1,\"652\":2,\"653\":2,\"655\":1,\"656\":2,\"657\":2,\"659\":1,\"660\":1,\"661\":1,\"662\":2,\"663\":1,\"665\":2,\"666\":2,\"667\":1,\"668\":1,\"669\":2,\"671\":1,\"672\":1,\"673\":2,\"674\":4,\"677\":1,\"678\":1,\"679\":1,\"680\":1,\"681\":1,\"682\":1,\"699\":3,\"700\":2,\"701\":1,\"702\":1,\"703\":1,\"704\":1,\"717\":3,\"719\":8,\"720\":8,\"721\":8,\"724\":1,\"725\":2,\"726\":1,\"727\":1,\"732\":1,\"733\":1,\"734\":2,\"736\":1,\"750\":1,\"751\":1,\"756\":2,\"757\":1,\"760\":1,\"761\":2,\"762\":1,\"763\":1,\"764\":2,\"765\":1,\"766\":2,\"767\":2,\"768\":2,\"769\":4,\"772\":1,\"773\":1,\"774\":2,\"776\":2,\"778\":2,\"779\":1,\"780\":1,\"781\":1,\"782\":1,\"783\":1,\"785\":1,\"788\":1,\"789\":1,\"790\":1,\"791\":1,\"792\":1,\"793\":1,\"794\":1,\"795\":1,\"797\":1,\"798\":1,\"799\":1,\"800\":1,\"801\":1,\"803\":3,\"804\":3,\"805\":3,\"807\":3,\"810\":3,\"813\":3,\"814\":3,\"829\":1,\"834\":1,\"835\":1,\"836\":1,\"837\":1,\"838\":1,\"840\":1,\"841\":1,\"842\":1,\"843\":1,\"844\":1,\"845\":1,\"846\":1,\"848\":1,\"849\":1,\"852\":1,\"853\":1,\"854\":1,\"855\":1,\"856\":1,\"857\":1,\"858\":1,\"859\":1,\"861\":1,\"862\":1,\"863\":1,\"864\":1,\"865\":1,\"868\":1,\"869\":1,\"870\":1,\"871\":1,\"872\":2,\"873\":1,\"874\":1,\"881\":1,\"884\":7,\"887\":2,\"888\":2,\"890\":2,\"892\":1,\"893\":1,\"894\":2,\"895\":4,\"896\":1,\"897\":1,\"898\":1,\"899\":1,\"905\":1,\"906\":2,\"907\":1,\"908\":1,\"909\":1,\"910\":3,\"911\":1,\"912\":2,\"913\":1,\"914\":2,\"917\":1,\"919\":1,\"924\":1,\"925\":1,\"926\":1,\"930\":2,\"931\":3,\"932\":3,\"933\":2,\"934\":1,\"935\":1,\"936\":1,\"937\":2,\"938\":1,\"944\":1,\"945\":2,\"946\":3,\"947\":2,\"948\":1,\"949\":1,\"950\":3,\"951\":2,\"952\":2,\"959\":2,\"960\":1,\"961\":3,\"962\":1,\"963\":2,\"964\":2,\"965\":2,\"966\":1,\"967\":2,\"968\":1,\"969\":1,\"970\":2,\"971\":3,\"989\":2,\"990\":2,\"991\":1,\"992\":1,\"998\":1,\"999\":1,\"1000\":1,\"1001\":1,\"1008\":2,\"1009\":2,\"1038\":1,\"1047\":1,\"1059\":2,\"1125\":2,\"1133\":3,\"1134\":3,\"1141\":2,\"1176\":2,\"1184\":2,\"1186\":2,\"1189\":1,\"1202\":1,\"1203\":1,\"1204\":3,\"1221\":1,\"1222\":1,\"1240\":1,\"1245\":2,\"1246\":2,\"1258\":1,\"1259\":1,\"1262\":1,\"1267\":2,\"1280\":1,\"1282\":1,\"1292\":1,\"1296\":1,\"1368\":3,\"1376\":3,\"1380\":1,\"1381\":2,\"1382\":1,\"1408\":4,\"1413\":2,\"1426\":5,\"1427\":2,\"1433\":2,\"1440\":1,\"1442\":2,\"1457\":3,\"1466\":1,\"1467\":1,\"1475\":2,\"1488\":1,\"1497\":1,\"1499\":1,\"1500\":3,\"1512\":7,\"1515\":3,\"1526\":2,\"1555\":2,\"1556\":2,\"1575\":2,\"1577\":1,\"1578\":1,\"1581\":1,\"1582\":1,\"1587\":6,\"1591\":2,\"1600\":1,\"1609\":2,\"1622\":3,\"1630\":4,\"1680\":4,\"1720\":2,\"1728\":1,\"1729\":3,\"1737\":4,\"1740\":1,\"1757\":1,\"1760\":1,\"1768\":1,\"1784\":1,\"1795\":4,\"1804\":1,\"1810\":2,\"1817\":1,\"1831\":1,\"1843\":4,\"1844\":1,\"1845\":1,\"1851\":1,\"1852\":1,\"1854\":1,\"1855\":1,\"1902\":2,\"1905\":1,\"1931\":1,\"1935\":1,\"1940\":2,\"1955\":1,\"1957\":2,\"1958\":1,\"1993\":1,\"1995\":1,\"1996\":1,\"2015\":3,\"2016\":1,\"2038\":1,\"2053\":1,\"2082\":1,\"2086\":1,\"2099\":1,\"2101\":1,\"2118\":3,\"2121\":1,\"2127\":3,\"2152\":1,\"2157\":2,\"2192\":1,\"2193\":2,\"2194\":1,\"2195\":1,\"2196\":1,\"2225\":1,\"2232\":1,\"2252\":1,\"2255\":2,\"2256\":1,\"2257\":2,\"2258\":2,\"2264\":3,\"2266\":1,\"2267\":1,\"2268\":1,\"2269\":1,\"2280\":4,\"2282\":1,\"2285\":2,\"2289\":1,\"2291\":1,\"2293\":4,\"2295\":2,\"2296\":2,\"2298\":3,\"2299\":1,\"2300\":1,\"2301\":1,\"2302\":3,\"2303\":1,\"2304\":1,\"2306\":1,\"2311\":2,\"2315\":1,\"2328\":2,\"2329\":1,\"2344\":1,\"2349\":2,\"2369\":2,\"2371\":3,\"2373\":1,\"2375\":1,\"2377\":6,\"2403\":1,\"2404\":2,\"2450\":1,\"2451\":1,\"2458\":1,\"2459\":1,\"2460\":1,\"2461\":1,\"2463\":2,\"2470\":1,\"2474\":1,\"2475\":1,\"2477\":1,\"2478\":1,\"2479\":1,\"2480\":1,\"2481\":1,\"2482\":1,\"2483\":1,\"2484\":1,\"2485\":1,\"2487\":1,\"2488\":1,\"2489\":1,\"2500\":1,\"2502\":2,\"2504\":1,\"2505\":1,\"2507\":2,\"2508\":1,\"2545\":1,\"2547\":1,\"2548\":1,\"2551\":1,\"2597\":1,\"2601\":2,\"2604\":1,\"2613\":1,\"2621\":1,\"2624\":1,\"2635\":1,\"2639\":2,\"2657\":8,\"2676\":1,\"2686\":1,\"2687\":1,\"2688\":1,\"2689\":1,\"2690\":2,\"2691\":2,\"2779\":1,\"2800\":1,\"2801\":1,\"2802\":1,\"2804\":1,\"2812\":2,\"2846\":8,\"2849\":2,\"2850\":1,\"2858\":1,\"2872\":4,\"2903\":3,\"2909\":1,\"2910\":1,\"3047\":1,\"3054\":1,\"3209\":1,\"3211\":3,\"3212\":1,\"3214\":1,\"3217\":1,\"3218\":1,\"3220\":2,\"3221\":2,\"3225\":1,\"3226\":1,\"3227\":1,\"3231\":1,\"3234\":1,\"3237\":1,\"3240\":1,\"3242\":1,\"3244\":1,\"3249\":1,\"3253\":1}}],[\"prinln\",{\"1\":{\"128\":1}}],[\"pringln\",{\"1\":{\"1258\":1}}],[\"pring\",{\"0\":{\"118\":1},\"1\":{\"278\":1}}],[\"proc\",{\"1\":{\"3313\":2,\"3346\":2}}],[\"processmanagement\",{\"1\":{\"3562\":1,\"3656\":1}}],[\"process\",{\"0\":{\"1684\":1},\"1\":{\"1500\":1,\"1684\":1,\"3355\":1,\"3563\":3,\"3656\":3,\"3757\":1}}],[\"processor<\",{\"1\":{\"209\":1}}],[\"procedure\",{\"1\":{\"1250\":1}}],[\"proxool等db池的优点\",{\"1\":{\"2670\":1}}],[\"proxool\",{\"1\":{\"2668\":2}}],[\"proxyfilters\",{\"1\":{\"2674\":1}}],[\"proxyfactory中调用了newproxyinstance方法\",{\"1\":{\"2345\":1}}],[\"proxyfactory\",{\"1\":{\"2342\":1,\"2344\":1,\"2345\":1}}],[\"proxyinstance自动调用了myinvocationhandler类的invoke方法\",{\"1\":{\"2345\":1}}],[\"proxyinstance\",{\"1\":{\"2344\":4,\"2345\":2}}],[\"proxy类提供的用于创建动态代理类和动态代理对象的静态方法\",{\"1\":{\"2338\":1}}],[\"proxy\",{\"0\":{\"2337\":1,\"2338\":1,\"2343\":1},\"1\":{\"2342\":1,\"2343\":1,\"2349\":1}}],[\"proxyclothfactory\",{\"1\":{\"2328\":2,\"2330\":3}}],[\"proxyuser\",{\"1\":{\"2321\":1}}],[\"proxybeanmethods\",{\"0\":{\"515\":1}}],[\"protocolversion\",{\"1\":{\"3667\":1}}],[\"protocol\",{\"1\":{\"2202\":2,\"2203\":1,\"2238\":3,\"2846\":2}}],[\"protected\",{\"1\":{\"350\":1,\"861\":1,\"869\":1,\"1270\":1,\"1273\":1,\"1277\":1,\"1309\":1,\"1460\":1,\"2293\":1,\"2812\":2,\"2814\":2,\"2837\":1,\"2846\":2,\"2849\":1,\"2850\":1,\"2858\":1,\"2862\":2,\"2872\":2,\"2873\":2,\"2888\":1,\"2903\":2,\"2909\":1,\"2910\":1,\"2930\":1,\"2934\":1,\"2938\":1,\"2942\":1,\"3046\":1,\"3047\":1,\"3062\":1}}],[\"pros\",{\"1\":{\"1940\":4,\"2282\":5,\"2551\":6,\"2573\":6,\"2575\":6,\"2672\":3,\"2675\":3}}],[\"pro多个配置文件\",{\"1\":{\"583\":1}}],[\"provide\",{\"1\":{\"3298\":1}}],[\"provider\",{\"1\":{\"439\":1}}],[\"provided\",{\"1\":{\"423\":1,\"3124\":1,\"3283\":1,\"3381\":1}}],[\"prometheus\",{\"1\":{\"342\":2}}],[\"promvc\",{\"1\":{\"280\":1}}],[\"pro<\",{\"1\":{\"281\":1}}],[\"proredis\",{\"1\":{\"280\":1}}],[\"prodecate\",{\"1\":{\"2477\":1}}],[\"producecloth\",{\"1\":{\"2327\":1,\"2328\":2,\"2329\":1,\"2330\":1}}],[\"production\",{\"0\":{\"38\":1}}],[\"prod\",{\"1\":{\"589\":1}}],[\"prodb\",{\"1\":{\"280\":1}}],[\"profile集合\",{\"1\":{\"3704\":1}}],[\"profile>\",{\"1\":{\"281\":2}}],[\"profile\",{\"1\":{\"272\":1,\"281\":2,\"282\":1,\"283\":1}}],[\"profile代替\",{\"1\":{\"272\":1}}],[\"profiles>\",{\"1\":{\"281\":1}}],[\"profiles\",{\"1\":{\"272\":5,\"275\":1,\"278\":1,\"280\":1,\"282\":1}}],[\"pro\",{\"1\":{\"272\":2,\"274\":1,\"280\":1,\"308\":1}}],[\"programming\",{\"0\":{\"2347\":1},\"1\":{\"1250\":2}}],[\"program\",{\"0\":{\"1683\":1},\"1\":{\"258\":1,\"1683\":1}}],[\"propertystatement是statement的子类\",{\"1\":{\"2576\":1}}],[\"propertysource\",{\"1\":{\"567\":1}}],[\"property\",{\"1\":{\"212\":1}}],[\"properties类\",{\"1\":{\"2545\":1}}],[\"properties类的方法\",{\"0\":{\"1939\":1}}],[\"properties与yml文件格式均支持\",{\"1\":{\"267\":1}}],[\"properties>yml>yaml\",{\"1\":{\"141\":1}}],[\"properties>\",{\"1\":{\"119\":1,\"281\":2,\"612\":1,\"3488\":1}}],[\"properties\",{\"0\":{\"1916\":1,\"1937\":1,\"3357\":1},\"1\":{\"98\":1,\"137\":1,\"139\":1,\"141\":1,\"267\":1,\"583\":1,\"955\":1,\"1826\":1,\"1910\":1,\"1916\":1,\"1938\":1,\"1940\":3,\"2282\":5,\"2545\":3,\"2550\":1,\"2551\":3,\"2573\":3,\"2575\":3,\"2672\":3,\"2673\":1,\"2675\":3,\"3197\":1,\"3198\":1,\"3199\":1,\"3479\":1,\"3488\":2}}],[\"propeties格式\",{\"1\":{\"139\":1}}],[\"projection\",{\"1\":{\"3604\":2,\"3635\":1}}],[\"project>外的其他标签内容都删除\",{\"1\":{\"2738\":1}}],[\"projectexceptionadvice\",{\"1\":{\"645\":1}}],[\"projectlombok<\",{\"1\":{\"606\":1,\"612\":1,\"620\":1}}],[\"projects\",{\"1\":{\"172\":1}}],[\"project\",{\"0\":{\"189\":1,\"580\":1},\"1\":{\"95\":3,\"105\":1,\"166\":1,\"186\":2,\"345\":2,\"578\":2,\"2355\":1,\"2731\":2,\"2992\":1}}],[\"pscache对支持游标的数据库性能提升巨大\",{\"1\":{\"2674\":1}}],[\"ps\",{\"1\":{\"91\":1,\"403\":2,\"441\":1,\"590\":1,\"1376\":1,\"2121\":6,\"2404\":2,\"2567\":1,\"2569\":1,\"2570\":3,\"2573\":8,\"2576\":3,\"2577\":6,\"2581\":5,\"2597\":5,\"2600\":5,\"2603\":5,\"2612\":7,\"2613\":4,\"2621\":4,\"2624\":6,\"2625\":6,\"2634\":5,\"2652\":2,\"2653\":20,\"3175\":1,\"3315\":1,\"3342\":1,\"3346\":1,\"3355\":1,\"3447\":1,\"3563\":1,\"3585\":1,\"3607\":1,\"3651\":1,\"3659\":1,\"3712\":1}}],[\"包提供给别人使用\",{\"1\":{\"2986\":1}}],[\"包中有\",{\"1\":{\"2556\":1}}],[\"包裹\",{\"1\":{\"2366\":1}}],[\"包声明\",{\"1\":{\"1653\":1}}],[\"包属于标识符\",{\"1\":{\"1337\":1}}],[\"包的多了可能会产生意外的错误\",{\"1\":{\"1762\":1}}],[\"包的少了\",{\"1\":{\"1762\":1}}],[\"包的命名规则\",{\"0\":{\"1337\":1}}],[\"包的作用\",{\"0\":{\"1335\":1}}],[\"包虽然就是个文件夹\",{\"1\":{\"1335\":1}}],[\"包可以包含类和子包\",{\"1\":{\"1335\":1}}],[\"包帮助管理大型软件系统\",{\"1\":{\"1335\":1}}],[\"包名\",{\"1\":{\"1058\":1,\"1083\":1,\"1341\":2}}],[\"包主要包括以下三个类\",{\"1\":{\"984\":1}}],[\"包+类名\",{\"1\":{\"836\":1,\"2268\":1}}],[\"包装类自动转为基本数据类型\",{\"1\":{\"1443\":1}}],[\"包装类对象中包装的基本类型变量\",{\"1\":{\"1442\":1}}],[\"包装类转换为基本数据类型\",{\"0\":{\"1442\":1}}],[\"包装类的构造器\",{\"1\":{\"1440\":1}}],[\"包装类的转换概述\",{\"0\":{\"1439\":1}}],[\"包装类与string类的互相转换示意图\",{\"1\":{\"1439\":1}}],[\"包装类就是将基本数据类型的值包装成引用数据类型\",{\"1\":{\"1437\":1}}],[\"包装类等都重写了object类中的tostring\",{\"1\":{\"1433\":1}}],[\"包装类等都重写了object类中的equals\",{\"1\":{\"1427\":1}}],[\"包装类包括\",{\"1\":{\"772\":1}}],[\"包装类\",{\"0\":{\"1436\":1,\"1445\":1,\"1446\":1},\"1\":{\"671\":1,\"771\":1,\"1437\":1,\"1440\":1,\"1969\":1}}],[\"包\",{\"1\":{\"645\":1,\"646\":1,\"2986\":1}}],[\"包里按需创建队列配置类\",{\"1\":{\"441\":1}}],[\"包不匹配\",{\"1\":{\"228\":1}}],[\"包含内置角色\",{\"0\":{\"3701\":1}}],[\"包含一组控制索引创建的选项的文档\",{\"1\":{\"3625\":1}}],[\"包含一些实用工具类\",{\"1\":{\"1338\":1}}],[\"包含一些java语言的核心类\",{\"1\":{\"1338\":1}}],[\"包含使用$in操作符\",{\"1\":{\"3615\":1}}],[\"包含查询\",{\"0\":{\"3615\":1}}],[\"包含信息更多的倒排索引\",{\"1\":{\"3433\":1}}],[\"包含的字段\",{\"1\":{\"3233\":1}}],[\"包含的信息指示\",{\"1\":{\"2233\":1}}],[\"包含三个字段\",{\"1\":{\"3198\":1}}],[\"包含多种子类型\",{\"1\":{\"3197\":1}}],[\"包含元素名和类型\",{\"1\":{\"3029\":1}}],[\"包含子集合\",{\"1\":{\"2469\":1}}],[\"包含所有学生数据\",{\"1\":{\"2469\":1}}],[\"包含姓名和年龄两个属性\",{\"1\":{\"2469\":1}}],[\"包含4中常用的函数式接口\",{\"1\":{\"2386\":1}}],[\"包含private方法\",{\"1\":{\"2295\":1}}],[\"包含四季\",{\"1\":{\"1621\":1}}],[\"包含能提供多种输入\",{\"1\":{\"1338\":1}}],[\"包含执行与网络相关的操作的类和接口\",{\"1\":{\"1338\":1}}],[\"包含变量类型\",{\"1\":{\"1066\":1}}],[\"包含两个类的java文件\",{\"0\":{\"1049\":1}}],[\"包含目录\",{\"1\":{\"795\":1,\"810\":1}}],[\"包含后缀\",{\"1\":{\"790\":1}}],[\"包含0\",{\"1\":{\"761\":1}}],[\"包含\",{\"1\":{\"760\":1,\"2950\":1}}],[\"包含时区支持的类\",{\"1\":{\"710\":1}}],[\"包含值对象的基础包\",{\"1\":{\"710\":1}}],[\"包含start\",{\"1\":{\"701\":1}}],[\"包含spring框架部分功能\",{\"1\":{\"247\":1}}],[\"包含了很多正则\",{\"1\":{\"3028\":1}}],[\"包含了很多用来操作数据的方法\",{\"1\":{\"1247\":1}}],[\"包含了该jar包的版本\",{\"1\":{\"2981\":1}}],[\"包含了一个\",{\"1\":{\"2981\":1}}],[\"包含了一些java格式化相关的类\",{\"1\":{\"1338\":1}}],[\"包含了构成抽象窗口工具集\",{\"1\":{\"1338\":1}}],[\"包含了java进行jdbc数据库编程的相关类\",{\"1\":{\"1338\":1}}],[\"包含了所有可能的情况\",{\"1\":{\"972\":1}}],[\"包含了用来操作数组\",{\"1\":{\"889\":1}}],[\"包含了properties部分dependencies部分和build部分\",{\"1\":{\"612\":1}}],[\"包含了多种缓存技术\",{\"1\":{\"464\":1}}],[\"包含了几乎所有开发中可能用到的依赖\",{\"1\":{\"119\":1}}],[\"包含有客户端和服务端两部分\",{\"1\":{\"317\":1}}],[\"包含类\",{\"1\":{\"182\":1}}],[\"包含mybatis\",{\"1\":{\"45\":1}}],[\"包括创建\",{\"1\":{\"3704\":1}}],[\"包括主节点\",{\"1\":{\"3376\":1}}],[\"包括分配主分片或者副本\",{\"1\":{\"3371\":1}}],[\"包括kibana\",{\"1\":{\"3288\":1,\"3319\":1}}],[\"包括以下具体的操作\",{\"1\":{\"3187\":1,\"3247\":1}}],[\"包括已经删除了的\",{\"1\":{\"3130\":1}}],[\"包括标签\",{\"1\":{\"3028\":1}}],[\"包括任意其他服务器上的\",{\"1\":{\"2912\":1}}],[\"包括了对数据表的crud\",{\"1\":{\"2642\":1}}],[\"包括两个层次\",{\"1\":{\"2531\":1}}],[\"包括两者\",{\"1\":{\"2233\":1}}],[\"包括object这个父类的方法\",{\"1\":{\"2295\":1}}],[\"包括多个具有不同功能且互为关联的协议\",{\"1\":{\"2203\":1}}],[\"包括自定义的异常类和try\",{\"1\":{\"1969\":1}}],[\"包括自定义的api和一些插件提供的api\",{\"1\":{\"337\":1}}],[\"包括枚举常量\",{\"1\":{\"1653\":1}}],[\"包括注释类型\",{\"1\":{\"1653\":1}}],[\"包括私有元素\",{\"1\":{\"2262\":1}}],[\"包括私有的\",{\"1\":{\"1460\":1}}],[\"包括私有的数据\",{\"1\":{\"1455\":1}}],[\"包括私有属性\",{\"1\":{\"855\":1}}],[\"包括本包下的子包\",{\"1\":{\"1345\":1}}],[\"包括对象作为参数\",{\"1\":{\"1290\":1}}],[\"包括调用自己\",{\"1\":{\"1282\":1}}],[\"包括属性和\",{\"1\":{\"1259\":1}}],[\"包括涉及到java语言与前端html\",{\"1\":{\"1253\":1}}],[\"包括基本数据类型和引用数据类型\",{\"1\":{\"1209\":1}}],[\"包括强制类型转换\",{\"1\":{\"1135\":1}}],[\"包括java虚拟机和java程序所需的核心类库等\",{\"1\":{\"1024\":1}}],[\"包括换行符\",{\"1\":{\"997\":1}}],[\"包括private类型的\",{\"1\":{\"866\":1,\"875\":1,\"878\":1}}],[\"包括子目录\",{\"1\":{\"794\":1}}],[\"包括底层框架和扩展特性\",{\"1\":{\"710\":1}}],[\"包括引用类型\",{\"1\":{\"703\":1}}],[\"包括start\",{\"1\":{\"702\":1}}],[\"包括包装类\",{\"1\":{\"672\":1}}],[\"包括那些端点允许通过http请求访问\",{\"1\":{\"343\":1}}],[\"包括参数描述\",{\"1\":{\"1060\":1}}],[\"包括参数\",{\"1\":{\"337\":1}}],[\"包括线程和内存\",{\"1\":{\"336\":1}}],[\"包括内置类和自定义的类\",{\"1\":{\"332\":1}}],[\"包括yml中配置的运行环境\",{\"1\":{\"331\":1}}],[\"包括http请求的性能\",{\"1\":{\"330\":1}}],[\"包括non\",{\"1\":{\"329\":1}}],[\"包括守护线程\",{\"1\":{\"329\":1}}],[\"包括mybatis的sql日志\",{\"1\":{\"308\":1}}],[\"包括mybatis的\",{\"1\":{\"307\":1}}],[\"包括mybatisplus\",{\"1\":{\"11\":1}}],[\"包括使用部分es7\",{\"1\":{\"80\":1,\"81\":1}}],[\"包括\",{\"1\":{\"49\":1,\"337\":1,\"410\":1,\"670\":1,\"1270\":1,\"1650\":1,\"2293\":1,\"2296\":1,\"3090\":1,\"3325\":1,\"3387\":1,\"3391\":1,\"3698\":2}}],[\"打jar包\",{\"0\":{\"2990\":1}}],[\"打印操作的结果\",{\"1\":{\"3218\":1}}],[\"打印参数\",{\"1\":{\"2402\":1}}],[\"打印的结果\",{\"1\":{\"3227\":1,\"3240\":1,\"3242\":1,\"3249\":1}}],[\"打印的所有字符都使用平台的默认字符编码转换为字节\",{\"1\":{\"2120\":1}}],[\"打印的是内存地址\",{\"1\":{\"890\":1}}],[\"打印流\",{\"0\":{\"2119\":1}}],[\"打印详细异常\",{\"1\":{\"1587\":1,\"1589\":1}}],[\"打印机\",{\"1\":{\"1505\":1}}],[\"打印对象\",{\"1\":{\"1424\":1}}],[\"打印读取的字符数组\",{\"1\":{\"814\":1}}],[\"打印结果如下\",{\"1\":{\"3226\":1}}],[\"打印结果\",{\"0\":{\"3245\":1},\"1\":{\"408\":1,\"409\":1,\"419\":1,\"422\":1,\"1902\":1,\"3225\":1,\"3231\":1,\"3234\":1,\"3237\":1,\"3253\":1}}],[\"打印控制台\",{\"1\":{\"308\":1}}],[\"打开同级目录下的\",{\"1\":{\"3488\":1}}],[\"打开浏览器输入地址\",{\"1\":{\"3108\":1}}],[\"打开浏览器后要访问的项目目录\",{\"1\":{\"2750\":1}}],[\"打开模块设置\",{\"1\":{\"2773\":1}}],[\"打开窗口\",{\"1\":{\"2753\":1}}],[\"打开tomcat\",{\"0\":{\"2746\":1}}],[\"打开project\",{\"1\":{\"2733\":1,\"2743\":1,\"2763\":1}}],[\"打开连接到socket的输入\",{\"1\":{\"2217\":1}}],[\"打开\",{\"1\":{\"2168\":1}}],[\"打开以便读取和\",{\"1\":{\"2134\":2}}],[\"打开以便读取和写入\",{\"1\":{\"2134\":1}}],[\"打开springboot\",{\"1\":{\"105\":1}}],[\"打开什么页面\",{\"1\":{\"22\":1}}],[\"打包格式选tgz\",{\"1\":{\"3560\":1}}],[\"打包web项目时\",{\"1\":{\"2774\":1}}],[\"打包程序中个别文件内容不同\",{\"1\":{\"242\":1}}],[\"打包后可以部署的项目\",{\"0\":{\"2727\":1}}],[\"打包后所包含的内容不同\",{\"1\":{\"242\":1}}],[\"打包后文件的大小不同\",{\"1\":{\"242\":1}}],[\"打包后会产生一个与工程名类似的jar文件\",{\"1\":{\"236\":1}}],[\"打包方式\",{\"0\":{\"172\":1}}],[\"打包方式选择jar\",{\"1\":{\"95\":1}}],[\"打包\",{\"0\":{\"168\":1,\"236\":1},\"1\":{\"235\":1}}],[\"打包与发布\",{\"0\":{\"233\":1},\"1\":{\"45\":1}}],[\"热部署的具体配置\",{\"1\":{\"2767\":1}}],[\"热部署的时机\",{\"0\":{\"191\":1}}],[\"热部署模式\",{\"1\":{\"2748\":1,\"2765\":1}}],[\"热部署是纯开发阶段的功能\",{\"1\":{\"195\":1}}],[\"热部署是在开发阶段配置的\",{\"1\":{\"177\":1}}],[\"热部署监控的文件范围\",{\"0\":{\"192\":1}}],[\"热部署需要手动生效\",{\"1\":{\"186\":1}}],[\"热部署实现原理\",{\"0\":{\"178\":1}}],[\"热部署就是代码修改后\",{\"1\":{\"177\":1}}],[\"热部署\",{\"0\":{\"177\":1},\"1\":{\"45\":1,\"2750\":1}}],[\"介绍\",{\"0\":{\"90\":1,\"306\":1,\"317\":1,\"684\":1,\"739\":1,\"1078\":1,\"1299\":1,\"1634\":1,\"1850\":1,\"1858\":1,\"1881\":1,\"1942\":1,\"2073\":1,\"2142\":1,\"2190\":1,\"2382\":1,\"2494\":1,\"2495\":1,\"2830\":1,\"2835\":1,\"2899\":1,\"3015\":1,\"3534\":1,\"3569\":1,\"3637\":1},\"1\":{\"45\":1,\"48\":1}}],[\"基\",{\"1\":{\"2238\":1}}],[\"基类\",{\"1\":{\"1360\":1}}],[\"基于缓存查询\",{\"1\":{\"3635\":1}}],[\"基于索引查询\",{\"1\":{\"3635\":1}}],[\"基于倒排索引的全文搜索很适合做为搜索引擎\",{\"1\":{\"3524\":1}}],[\"基于java语言开发的轻量级的中文分词工具包\",{\"1\":{\"3477\":1}}],[\"基于以上原因可以分析得出\",{\"1\":{\"3098\":1}}],[\"基于上述理论\",{\"1\":{\"2869\":1}}],[\"基于socket的tcp编程\",{\"0\":{\"2216\":1}}],[\"基于springboot读取maven配置属性的前提下\",{\"1\":{\"284\":1}}],[\"基于通道的io操作\",{\"1\":{\"2161\":1}}],[\"基于vue+elementui制作\",{\"1\":{\"614\":1}}],[\"基于restful开发\",{\"1\":{\"614\":1}}],[\"基于mybatisplus进行增量开发\",{\"1\":{\"614\":1}}],[\"基于原理理解基础上\",{\"1\":{\"93\":1}}],[\"基于\",{\"1\":{\"50\":1,\"489\":1,\"621\":1,\"3446\":1}}],[\"基本一样\",{\"1\":{\"3583\":1}}],[\"基本优化\",{\"0\":{\"3499\":1}}],[\"基本用法如下\",{\"1\":{\"3473\":1}}],[\"基本上所有配置都采用默认即可\",{\"1\":{\"3302\":1}}],[\"基本查询\",{\"0\":{\"3156\":1,\"3224\":1,\"3603\":1}}],[\"基本查询示例\",{\"0\":{\"2597\":1}}],[\"基本url+路由\",{\"1\":{\"2781\":1}}],[\"基本url+路由的方式访问\",{\"1\":{\"2777\":1}}],[\"基本开发使用\",{\"0\":{\"2699\":1}}],[\"基本步骤与dml一致\",{\"1\":{\"2584\":1}}],[\"基本操作方法\",{\"0\":{\"2081\":1}}],[\"基本操作\",{\"0\":{\"2070\":1,\"2080\":1,\"3787\":1}}],[\"基本被抛弃\",{\"1\":{\"1915\":1}}],[\"基本的数据访问操作\",{\"1\":{\"3013\":1}}],[\"基本的使用\",{\"1\":{\"1901\":1}}],[\"基本的curdbasemapper中都定义了\",{\"1\":{\"622\":1}}],[\"基本概念\",{\"0\":{\"1682\":1}}],[\"基本架构\",{\"0\":{\"1650\":1}}],[\"基本数据格式是integer\",{\"1\":{\"3029\":1}}],[\"基本数据格式\",{\"1\":{\"3029\":2}}],[\"基本数据和对应的包装类\",{\"0\":{\"1438\":1}}],[\"基本数据类型可序列化\",{\"1\":{\"2153\":1}}],[\"基本数据类型可以自动转为对应的包装类类型\",{\"1\":{\"1443\":1}}],[\"基本数据类型和string都已经实现该接口了\",{\"1\":{\"2153\":1}}],[\"基本数据类型和包装类与string类型的转换\",{\"0\":{\"1444\":1}}],[\"基本数据类型的变量写出到文件中\",{\"1\":{\"2126\":1}}],[\"基本数据类型的值\",{\"1\":{\"1555\":1}}],[\"基本数据类型的值当然也可以\",{\"1\":{\"1440\":1}}],[\"基本数据类型的值或标识符\",{\"1\":{\"1440\":1}}],[\"基本数据类型不用转换\",{\"1\":{\"1443\":1}}],[\"基本数据类型转换为包装类\",{\"0\":{\"1440\":1}}],[\"基本数据类型转string类型\",{\"1\":{\"672\":1}}],[\"基本数据类型元素的数组\",{\"1\":{\"1210\":1}}],[\"基本数据类型\",{\"0\":{\"1084\":1,\"1292\":1,\"1445\":1,\"1555\":1},\"1\":{\"1075\":1,\"1266\":1,\"1373\":1,\"1426\":1,\"1439\":1,\"2264\":1}}],[\"基本数据类型会自动装箱\",{\"1\":{\"905\":1}}],[\"基本类型\",{\"1\":{\"1646\":1}}],[\"基本类型数据转换为string\",{\"1\":{\"1435\":1}}],[\"基本类型或void\",{\"1\":{\"840\":1}}],[\"基本变量\",{\"1\":{\"1292\":1}}],[\"基本代码规范\",{\"0\":{\"1063\":1}}],[\"基本使用\",{\"0\":{\"2692\":1,\"2775\":1}}],[\"基本使用测试\",{\"0\":{\"1048\":1}}],[\"基本使用过程\",{\"0\":{\"441\":1}}],[\"基本语法规则\",{\"0\":{\"1043\":1}}],[\"基本语法\",{\"0\":{\"1036\":1,\"3018\":1},\"1\":{\"1637\":1}}],[\"基本curd\",{\"0\":{\"621\":1}}],[\"基本可以见名知意\",{\"1\":{\"405\":1}}],[\"基本命令和windows上的相同\",{\"1\":{\"253\":1}}],[\"基本运维\",{\"0\":{\"3769\":1},\"1\":{\"45\":1}}],[\"基本配置文件\",{\"1\":{\"45\":1}}],[\"基本角色分工\",{\"0\":{\"33\":1}}],[\"基础知识点\",{\"0\":{\"3523\":1}}],[\"基础类库下的类不用导包\",{\"1\":{\"2989\":1}}],[\"基础网址后面的部分\",{\"1\":{\"2845\":1}}],[\"基础数据类型\",{\"1\":{\"1290\":1}}],[\"基础的crud操作均由mybatisplus给我们提供\",{\"1\":{\"624\":1}}],[\"基础操作可以保证正确性\",{\"1\":{\"84\":1,\"85\":1}}],[\"基础\",{\"0\":{\"3773\":1},\"1\":{\"45\":1}}],[\"最像关系型数据库\",{\"1\":{\"3535\":1}}],[\"最新版\",{\"1\":{\"3351\":1}}],[\"最好将mongodb部署到公司服务器内网\",{\"1\":{\"3693\":1}}],[\"最好服务器是专门用来搞es的\",{\"1\":{\"3505\":1}}],[\"最好是先看下debug部分的内容\",{\"1\":{\"3303\":1}}],[\"最好可以通过一个代理类完成全部的代理功能\",{\"1\":{\"2322\":1}}],[\"最简单的做法是删除data目录\",{\"1\":{\"3276\":1}}],[\"最基本的查询是\",{\"1\":{\"3224\":1}}],[\"最基础版本\",{\"1\":{\"1027\":1}}],[\"最少出现0次\",{\"1\":{\"3029\":1}}],[\"最常见的文本文件\",{\"1\":{\"2045\":1}}],[\"最常用的复合方式是层次方式\",{\"1\":{\"2200\":1}}],[\"最常用的判定条件就是根据类是否加载来进行控制\",{\"1\":{\"542\":1}}],[\"最常用\",{\"1\":{\"11\":1,\"2694\":1}}],[\"最终策略\",{\"1\":{\"3504\":1}}],[\"最终导致静态资源不能被访问\",{\"1\":{\"2825\":1}}],[\"最终将导致重启数据库\",{\"1\":{\"2662\":1}}],[\"最终方案\",{\"0\":{\"2549\":1}}],[\"最终被调用的就是myrunnable类的run方法了\",{\"1\":{\"1741\":1}}],[\"最终的\",{\"1\":{\"1348\":1}}],[\"最终把项目部署到生产环境\",{\"1\":{\"39\":1}}],[\"最多一个节点一个分片\",{\"1\":{\"3392\":1}}],[\"最多无限制\",{\"1\":{\"3029\":1}}],[\"最多两个字节编\",{\"1\":{\"2109\":1}}],[\"最多两个字节编码所有字符\",{\"1\":{\"2109\":1}}],[\"最多只能声明一个\",{\"1\":{\"1330\":1}}],[\"最多只能声明一个可变形参\",{\"1\":{\"1295\":1}}],[\"最多读len个字符\",{\"1\":{\"818\":1}}],[\"最小副本集架构\",{\"1\":{\"3649\":1}}],[\"最小值\",{\"1\":{\"3029\":1}}],[\"最小值不能低于202\",{\"1\":{\"220\":1}}],[\"最小的副本集架构\",{\"1\":{\"3647\":1}}],[\"最小的工作单元\",{\"1\":{\"3438\":1}}],[\"最小的\",{\"0\":{\"2691\":1}}],[\"最小连接池数量\",{\"1\":{\"2674\":1}}],[\"最小是2进制\",{\"1\":{\"888\":1,\"1009\":1}}],[\"最近20秒内\",{\"1\":{\"480\":1}}],[\"最近20秒内访问时间离当前时间间隔最长的数据被淘汰\",{\"1\":{\"480\":1}}],[\"最大值\",{\"1\":{\"3029\":1}}],[\"最大值不能超过8888\",{\"1\":{\"220\":1}}],[\"最大范围\",{\"1\":{\"2937\":1}}],[\"最大连接池数量\",{\"1\":{\"2673\":1,\"2674\":1}}],[\"最大的生日为\",{\"1\":{\"2657\":1}}],[\"最大线程数\",{\"1\":{\"1813\":1}}],[\"最大最小的传输速度等\",{\"1\":{\"1512\":1}}],[\"最大是36进制\",{\"1\":{\"888\":1,\"1009\":1}}],[\"最大为2\",{\"1\":{\"777\":1}}],[\"最大存活时间\",{\"1\":{\"478\":1}}],[\"最大不活动间隔\",{\"1\":{\"478\":1}}],[\"最大缓存数量\",{\"1\":{\"478\":1}}],[\"最初的es客户端\",{\"1\":{\"414\":1}}],[\"最先加载\",{\"1\":{\"280\":1}}],[\"最后是显示的\",{\"1\":{\"3611\":1}}],[\"最后返回所有的文档id\",{\"1\":{\"3427\":1}}],[\"最后打成jar包在项目或模块中使用\",{\"1\":{\"2987\":1}}],[\"最后一次可能会出错\",{\"1\":{\"2056\":1}}],[\"最后一个枚举对象以分号结束\",{\"1\":{\"1630\":1}}],[\"最后一趟是装不满的\",{\"1\":{\"817\":1,\"2056\":1}}],[\"最后+1\",{\"1\":{\"1121\":1}}],[\"最后\",{\"1\":{\"342\":1,\"3466\":1}}],[\"最后加载的环境属性生效\",{\"1\":{\"279\":1}}],[\"最后使用+\",{\"1\":{\"147\":1}}],[\"最顶层是来配置当前启动的环境的\",{\"1\":{\"272\":1}}],[\"最高位是符号位\",{\"1\":{\"1121\":1}}],[\"最高\",{\"1\":{\"262\":1}}],[\"最高等级的启动文类中进行关闭\",{\"1\":{\"197\":1}}],[\"最低\",{\"1\":{\"262\":1}}],[\"也要提前配置好权限认证\",{\"1\":{\"3739\":1}}],[\"也要先有对象\",{\"1\":{\"1484\":1}}],[\"也支持通过\",{\"1\":{\"3527\":1}}],[\"也计划是所有类型服务器的瓶颈\",{\"1\":{\"3501\":1}}],[\"也许更早\",{\"1\":{\"3292\":1,\"3326\":1}}],[\"也收效甚微\",{\"1\":{\"3097\":1}}],[\"也称基础类库\",{\"1\":{\"2989\":1}}],[\"也称为\",{\"1\":{\"3090\":1}}],[\"也称为类型实参\",{\"1\":{\"1948\":1}}],[\"也称为方法的重置\",{\"1\":{\"1370\":1}}],[\"也称为全类名\",{\"1\":{\"1343\":1}}],[\"也称为前后端数据协议\",{\"1\":{\"646\":1}}],[\"也间接实现了servletrequest接口\",{\"1\":{\"2837\":1}}],[\"也有一些开源组织提供实现\",{\"1\":{\"2668\":1}}],[\"也有可能使用次数是最多的\",{\"1\":{\"480\":1}}],[\"也写成泛型的样式\",{\"1\":{\"2605\":1}}],[\"也将拥有越高的吞吐量\",{\"1\":{\"3393\":1}}],[\"也将被代理类传递给了myinvocationhandler类的invoke方法\",{\"1\":{\"2345\":1}}],[\"也将异常处理类放入utile包中\",{\"1\":{\"645\":1}}],[\"也实现接口\",{\"1\":{\"2326\":1}}],[\"也便于子类继承此运行时类时\",{\"1\":{\"2285\":1}}],[\"也知道对方知道自己是谁了\",{\"1\":{\"2206\":1}}],[\"也能查询出数据\",{\"1\":{\"3175\":1}}],[\"也能控制隔离级别\",{\"1\":{\"2636\":1}}],[\"也能把对象从数据源中还原回来\",{\"1\":{\"2142\":1}}],[\"也能识别\",{\"1\":{\"2012\":1}}],[\"也能表示目录\",{\"1\":{\"2008\":1}}],[\"也能取\",{\"1\":{\"1243\":1}}],[\"也就越可能丢失变更\",{\"1\":{\"3494\":1}}],[\"也就意味着这个类既可以读也可以写\",{\"1\":{\"2128\":1}}],[\"也就基本意味着安全级别越高\",{\"1\":{\"1899\":1}}],[\"也就是字符顺序\",{\"1\":{\"3433\":1}}],[\"也就是最多扩容到6个节点\",{\"1\":{\"3392\":1}}],[\"也就是高并发\",{\"1\":{\"3368\":1}}],[\"也就是一条数据\",{\"1\":{\"3362\":1}}],[\"也就是要将多节点集群降级\",{\"1\":{\"3276\":1}}],[\"也就是要么是true\",{\"1\":{\"1148\":1}}],[\"也就是过半原则\",{\"1\":{\"3275\":1}}],[\"也就是请求体\",{\"1\":{\"3227\":1,\"3228\":1,\"3230\":1,\"3231\":1,\"3233\":1,\"3234\":1,\"3242\":1,\"3244\":1}}],[\"也就是默认所有字段都会被索引\",{\"1\":{\"3197\":1}}],[\"也就是30分钟后\",{\"1\":{\"3073\":1}}],[\"也就是pscache\",{\"1\":{\"2674\":1}}],[\"也就是用于获取结果集的源数据\",{\"1\":{\"2592\":1}}],[\"也就是接口的实现类\",{\"1\":{\"2527\":1}}],[\"也就是java替我们穷举好了\",{\"1\":{\"2386\":1}}],[\"也就是取值范围是有限的\",{\"1\":{\"1899\":1}}],[\"也就是锁l1想要包含了锁l2\",{\"1\":{\"1794\":1}}],[\"也就是annotation\",{\"1\":{\"1634\":1}}],[\"也就是\",{\"1\":{\"1563\":1}}],[\"也就是内层数组的元素类型也是确定的\",{\"1\":{\"1243\":1}}],[\"也就是凡是自己可以起名字的地方都叫标识符\",{\"1\":{\"1081\":1}}],[\"也就是无法实例化该类\",{\"1\":{\"880\":1}}],[\"也就是会有字符没有被替换\",{\"1\":{\"817\":1,\"2056\":1}}],[\"也就是属性了\",{\"1\":{\"544\":1}}],[\"也就是web项目提供服务时\",{\"1\":{\"533\":1}}],[\"也就是把一个类设置为bean\",{\"1\":{\"505\":1}}],[\"也就是该类的对象已经创建了\",{\"1\":{\"504\":1}}],[\"也就是说集群启动的节点不满足过半原则\",{\"1\":{\"3275\":1}}],[\"也就是说再次启动集群\",{\"1\":{\"3274\":1}}],[\"也就是说多个用户同时访问时\",{\"1\":{\"2795\":1}}],[\"也就是说在获得了锁l1\",{\"1\":{\"1794\":1}}],[\"也就是说\",{\"1\":{\"341\":1,\"1370\":1,\"1495\":1,\"2223\":1,\"2243\":1,\"2771\":1,\"3692\":1}}],[\"也就是响应的格式\",{\"1\":{\"337\":1}}],[\"也就是监控服务状态是否处理宕机状态\",{\"1\":{\"312\":1,\"313\":1}}],[\"也就是启动类类名\",{\"1\":{\"247\":1}}],[\"也就是将开发者自己制作的内容重新加载就行了\",{\"1\":{\"183\":1}}],[\"也就是通过controller上定义的路由进行访问\",{\"1\":{\"175\":1}}],[\"也就是测试环境\",{\"1\":{\"37\":1}}],[\"也同时配置好了主节点\",{\"1\":{\"3665\":1}}],[\"也同时匹配了缓存策略\",{\"1\":{\"478\":1}}],[\"也同样会导致死锁\",{\"1\":{\"1793\":1}}],[\"也只能执行一个线程的任务\",{\"1\":{\"1689\":1}}],[\"也只能运行一次就暂停\",{\"1\":{\"163\":1}}],[\"也包含在内\",{\"1\":{\"1762\":1}}],[\"也包含一个名为\",{\"1\":{\"1660\":1}}],[\"也包括了jre\",{\"1\":{\"1025\":1}}],[\"也属于某个包\",{\"1\":{\"1630\":1}}],[\"也属于父类的引用指向子类的对象\",{\"1\":{\"1408\":1}}],[\"也应该返回是\",{\"1\":{\"1428\":2}}],[\"也应该遵守相同的限制\",{\"1\":{\"398\":1}}],[\"也通常是比较两个对象的\",{\"1\":{\"1428\":1}}],[\"也一定不要导入\",{\"1\":{\"1344\":1}}],[\"也叫构造方法\",{\"1\":{\"1313\":1}}],[\"也是将用户和权限信息保存到数据库对\",{\"1\":{\"3712\":1}}],[\"也是一种从节点类型\",{\"1\":{\"3645\":1}}],[\"也是异步和并发的\",{\"1\":{\"3496\":1}}],[\"也是会被对应的拦截器拦截的吗\",{\"1\":{\"2948\":1}}],[\"也是函数式接口的实例\",{\"1\":{\"2396\":1}}],[\"也是system类的一个变量\",{\"1\":{\"2116\":1}}],[\"也是用write方法\",{\"1\":{\"2081\":1}}],[\"也是用read方法\",{\"1\":{\"2081\":1}}],[\"也是双向链表的基本操作\",{\"1\":{\"1871\":1}}],[\"也是典型的单例应用\",{\"1\":{\"1491\":1}}],[\"也是单例的典型应用\",{\"1\":{\"1491\":1}}],[\"也是int类型的结果转为了double\",{\"1\":{\"1139\":1}}],[\"也是有set组成的\",{\"1\":{\"958\":1}}],[\"也需要使用getxxx和\",{\"1\":{\"1361\":1}}],[\"也需要先建立对象\",{\"1\":{\"1280\":1}}],[\"也需要重新指定内存区域赋值\",{\"1\":{\"1128\":2}}],[\"也需要进行处理\",{\"1\":{\"827\":1}}],[\"也没有调用对象中的service方法\",{\"1\":{\"2783\":1}}],[\"也没有重写thread类的run方法\",{\"1\":{\"1741\":1}}],[\"也没有公共构造方法\",{\"1\":{\"984\":1}}],[\"也没有推出官方的分布式集群模式\",{\"1\":{\"502\":1}}],[\"也会报错\",{\"1\":{\"3120\":1}}],[\"也会包含一条声明\",{\"1\":{\"2387\":1}}],[\"也会使用泛型\",{\"1\":{\"1957\":1}}],[\"也会出现小数点\",{\"1\":{\"1113\":1}}],[\"也会返回false\",{\"1\":{\"915\":1}}],[\"也会存入缓存\",{\"1\":{\"463\":1}}],[\"也返回false\",{\"1\":{\"800\":1}}],[\"也不要修改值\",{\"1\":{\"2795\":1}}],[\"也不能修改旧的段来进行反映文档\",{\"1\":{\"3447\":1}}],[\"也不能确定什么时候可以抵达\",{\"1\":{\"2229\":1}}],[\"也不能包的代码少了\",{\"1\":{\"1762\":1}}],[\"也不能包含代码少了\",{\"1\":{\"1759\":1}}],[\"也不允许出现重复的元素\",{\"1\":{\"1902\":1}}],[\"也不用用它\",{\"1\":{\"1876\":1}}],[\"也不处理\",{\"1\":{\"1599\":1}}],[\"也不创建\",{\"1\":{\"804\":1}}],[\"也不包含与时区相关的信息\",{\"1\":{\"712\":1}}],[\"也不会被输出\",{\"1\":{\"308\":1}}],[\"也可能导致内存泄漏\",{\"1\":{\"2662\":1}}],[\"也可能会用到temporal包\",{\"1\":{\"711\":1}}],[\"也可用于操作\",{\"1\":{\"1830\":1}}],[\"也可\",{\"1\":{\"1586\":1}}],[\"也可命名为domain或pojo\",{\"1\":{\"589\":1}}],[\"也可以以replicaset的方式只连接一个节点\",{\"1\":{\"3740\":1}}],[\"也可以在开启认证之后添加\",{\"1\":{\"3711\":1}}],[\"也可以在具体module的\",{\"1\":{\"2778\":1}}],[\"也可以一起使用\",{\"1\":{\"3610\":1}}],[\"也可以手动创建集合\",{\"1\":{\"3581\":1}}],[\"也可以手动调用flush方法\",{\"1\":{\"2081\":1}}],[\"也可以称之为关键字\",{\"1\":{\"3429\":1,\"3435\":1}}],[\"也可以设置成一个自定义的值\",{\"1\":{\"3400\":1}}],[\"也可以拥有某个\",{\"1\":{\"3362\":1}}],[\"也可以指定\",{\"1\":{\"3293\":1}}],[\"也可以指定会话时间\",{\"1\":{\"3051\":1}}],[\"也可以返回查询结果\",{\"1\":{\"3180\":1}}],[\"也可以匹配到\",{\"1\":{\"3176\":1}}],[\"也可以根据条件对多条数\",{\"1\":{\"3152\":1}}],[\"也可以根据需要切换成指定客户端技术\",{\"1\":{\"381\":1}}],[\"也可以根据需要自定义端点信息\",{\"1\":{\"342\":1}}],[\"也可以只修改某一给条数据的局部信息\",{\"1\":{\"3145\":1}}],[\"也可以只用一种\",{\"1\":{\"488\":1}}],[\"也可以查看所有的文档\",{\"1\":{\"3138\":1,\"3156\":1}}],[\"也可以采用xml\",{\"1\":{\"2816\":1}}],[\"也可以取消勾选\",{\"1\":{\"2734\":1}}],[\"也可以自己指定\",{\"1\":{\"2542\":1}}],[\"也可以写成\",{\"1\":{\"2489\":1}}],[\"也可以省略\",{\"1\":{\"2366\":1}}],[\"也可以用于自定义类\",{\"1\":{\"1952\":1}}],[\"也可以调用静态的方法或属性\",{\"1\":{\"1483\":1}}],[\"也可以调用nextxxx方法\",{\"1\":{\"888\":1,\"1009\":1}}],[\"也可以初始化\",{\"1\":{\"1476\":1}}],[\"也可以都用全类名\",{\"1\":{\"1344\":1}}],[\"也可以通过继承其他角色的权限\",{\"1\":{\"3697\":1}}],[\"也可以通过修改响应头\",{\"1\":{\"2889\":1}}],[\"也可以通过response对象设置相应消息数据\",{\"1\":{\"2831\":1}}],[\"也可以通过添加this增加可读性\",{\"1\":{\"1332\":1}}],[\"也可以通过表达式添加\",{\"1\":{\"997\":1}}],[\"也可以显式的创建一个空参构造器\",{\"1\":{\"1320\":1}}],[\"也可以动态初始化\",{\"1\":{\"1237\":1}}],[\"也可以表示具体的文件名\",{\"1\":{\"1061\":1}}],[\"也可以简单的理解在\",{\"1\":{\"985\":1}}],[\"也可以大于\",{\"1\":{\"937\":1}}],[\"也可以直接在compass上查看\",{\"1\":{\"3634\":1}}],[\"也可以直接在服务器进行wget下载\",{\"1\":{\"3287\":1,\"3318\":1}}],[\"也可以直接在spring配置文件中定义方法配置第三方类\",{\"1\":{\"513\":1}}],[\"也可以直接写到里面\",{\"1\":{\"2349\":1}}],[\"也可以直接写在myinvocationhandler\",{\"1\":{\"2349\":1}}],[\"也可以直接写成匿名实现类\",{\"1\":{\"2338\":1}}],[\"也可以直接使用int类型的常量值\",{\"1\":{\"784\":1}}],[\"也可以进行指定\",{\"1\":{\"783\":1}}],[\"也可以使用查询语句\",{\"1\":{\"3594\":1}}],[\"也可以使用put请求\",{\"1\":{\"3137\":1}}],[\"也可以使用其他zip压缩工具\",{\"1\":{\"2979\":1}}],[\"也可以使用构造函数初始化\",{\"1\":{\"1728\":1}}],[\"也可以使用collection\",{\"1\":{\"744\":1}}],[\"也可以使用\",{\"1\":{\"672\":1,\"2436\":1}}],[\"也可以是索引规范文档\",{\"1\":{\"3630\":1}}],[\"也可以是隔离级别常量\",{\"1\":{\"2638\":1}}],[\"也可以是相对的\",{\"1\":{\"2243\":1}}],[\"也可以是文件名\",{\"1\":{\"2133\":1}}],[\"也可以是它的父类\",{\"1\":{\"1597\":1}}],[\"也可以是接口\",{\"1\":{\"1401\":1}}],[\"也可以是字符串\",{\"1\":{\"778\":1}}],[\"也可以是其他数据格式\",{\"1\":{\"644\":1}}],[\"也可以是具体的bean名称\",{\"1\":{\"541\":1}}],[\"也可以将他们组合起来形成组合条件\",{\"1\":{\"542\":1}}],[\"也可以同时为多个包设置日志等级\",{\"1\":{\"295\":1}}],[\"也可以输入临时属性\",{\"1\":{\"258\":1}}],[\"也可以说热部署的过程实际上是重新加载restart类加载器中的信息\",{\"1\":{\"183\":1}}],[\"也可以携带一些测试代码\",{\"1\":{\"175\":1}}],[\"也可以安装在一台专门的服务器中\",{\"1\":{\"36\":1}}],[\"也无法执行\",{\"1\":{\"3662\":1}}],[\"也无法进行可视化渲染\",{\"1\":{\"353\":1}}],[\"也无法创建相关的类\",{\"1\":{\"159\":1}}],[\"ts\",{\"1\":{\"3670\":6}}],[\"tgz\",{\"1\":{\"3561\":1}}],[\"tf\",{\"1\":{\"3433\":2}}],[\"tls\",{\"1\":{\"3355\":1}}],[\"tx\",{\"1\":{\"3307\":1,\"3327\":1}}],[\"txt中出现了batman\",{\"1\":{\"824\":1}}],[\"txt中出现了abcd\",{\"1\":{\"824\":1}}],[\"txt中出现a\",{\"1\":{\"824\":1}}],[\"txt\",{\"1\":{\"578\":1,\"786\":2,\"788\":2,\"789\":2,\"790\":2,\"791\":1,\"792\":1,\"793\":1,\"794\":2,\"795\":2,\"799\":1,\"800\":1,\"803\":1,\"807\":4,\"812\":2,\"813\":1,\"814\":1,\"819\":1,\"822\":1,\"824\":1,\"829\":1,\"1583\":1,\"1592\":1,\"1600\":1,\"2015\":4,\"2045\":1,\"2048\":2,\"2052\":1,\"2053\":1,\"2060\":2,\"2064\":1,\"2065\":2,\"2082\":1,\"2095\":1,\"2096\":1,\"2099\":1,\"2101\":1,\"2106\":2,\"2121\":1,\"2126\":1,\"2127\":1,\"2139\":1,\"2942\":3}}],[\"t可以为null\",{\"1\":{\"2502\":1}}],[\"t必须非空\",{\"1\":{\"2500\":1}}],[\"t3\",{\"1\":{\"1740\":2,\"1760\":2,\"1768\":2,\"1784\":2}}],[\"t2>\",{\"1\":{\"1970\":1,\"1973\":2,\"1974\":1}}],[\"t2\",{\"1\":{\"1740\":2,\"1757\":2,\"1760\":2,\"1768\":2,\"1784\":2,\"1804\":2,\"2409\":2,\"2410\":2}}],[\"t1\",{\"1\":{\"1740\":2,\"1757\":2,\"1760\":2,\"1768\":2,\"1784\":2,\"1804\":2,\"1810\":2,\"2409\":2,\"2410\":2}}],[\"t>>\",{\"1\":{\"932\":1,\"934\":1,\"935\":1}}],[\"t>\",{\"0\":{\"893\":1},\"1\":{\"841\":1,\"893\":1,\"932\":1,\"934\":3,\"935\":3,\"937\":2,\"1670\":1,\"2505\":1}}],[\"thin\",{\"1\":{\"2674\":1}}],[\"this表示的是对象\",{\"1\":{\"1767\":1}}],[\"this指向的是对象\",{\"1\":{\"1484\":1}}],[\"this随意\",{\"1\":{\"1383\":1}}],[\"this可以省略\",{\"1\":{\"1381\":1}}],[\"this就表明是哪个对象\",{\"1\":{\"1332\":1}}],[\"this使用时机\",{\"0\":{\"1331\":1}}],[\"this调用属性\",{\"1\":{\"1330\":1}}],[\"this调用构造器\",{\"0\":{\"1330\":1},\"1\":{\"1330\":1}}],[\"this的调用不要写成死循环\",{\"1\":{\"1330\":1}}],[\"this的使用\",{\"0\":{\"1327\":1}}],[\"this的作用\",{\"0\":{\"1326\":1}}],[\"this\",{\"0\":{\"1325\":1},\"1\":{\"554\":1,\"646\":7,\"746\":1,\"749\":6,\"837\":1,\"1059\":2,\"1060\":1,\"1316\":2,\"1326\":1,\"1328\":4,\"1329\":3,\"1330\":7,\"1368\":1,\"1381\":1,\"1384\":1,\"1386\":1,\"1387\":3,\"1428\":4,\"1457\":2,\"1499\":1,\"1500\":3,\"1609\":1,\"1621\":2,\"1630\":1,\"1760\":1,\"1772\":1,\"1804\":1,\"1874\":3,\"1905\":2,\"1967\":4,\"2077\":1,\"2078\":1,\"2079\":1,\"2255\":4,\"2269\":1,\"2328\":1,\"2343\":1,\"2469\":2,\"2599\":4,\"2653\":1,\"2674\":1,\"2804\":1,\"2862\":1,\"2872\":1,\"2873\":1,\"2930\":1,\"2934\":1,\"2938\":1,\"2942\":1,\"3298\":2,\"3305\":2,\"3328\":3,\"3355\":3,\"3707\":1}}],[\"that\",{\"1\":{\"2061\":1,\"2064\":1,\"3328\":1,\"3355\":2,\"3587\":1,\"3675\":1,\"3682\":1}}],[\"these\",{\"1\":{\"3267\":1,\"3298\":1,\"3503\":1}}],[\"theproxy\",{\"1\":{\"2340\":1}}],[\"the\",{\"1\":{\"1059\":1,\"1060\":2,\"2683\":4,\"3090\":1,\"3267\":7,\"3296\":1,\"3298\":1,\"3305\":8,\"3307\":3,\"3327\":3,\"3328\":8,\"3355\":18,\"3464\":1,\"3465\":1,\"3466\":1,\"3467\":1,\"3468\":1,\"3469\":1,\"3503\":7,\"3621\":1,\"3664\":1,\"3675\":3}}],[\"through\",{\"1\":{\"3267\":1,\"3503\":1}}],[\"throttled\",{\"1\":{\"3154\":2}}],[\"throwable\",{\"1\":{\"1571\":1,\"2343\":1}}],[\"throw\",{\"1\":{\"647\":2,\"749\":1,\"756\":1,\"1566\":1,\"1567\":1,\"1606\":1,\"1608\":2,\"1609\":2,\"1905\":1,\"1906\":1,\"1936\":1,\"2076\":1,\"2077\":1,\"2078\":1,\"2079\":1}}],[\"throws的方式只是将异常抛给了方法的调用者\",{\"1\":{\"1601\":1}}],[\"throws使用示例\",{\"0\":{\"1600\":1}}],[\"throws只是用来抛出异常的\",{\"1\":{\"1598\":1}}],[\"throws介绍\",{\"0\":{\"1598\":1}}],[\"throws后面的异常类型可以是方法中产生的异常类型\",{\"1\":{\"1597\":1}}],[\"throws\",{\"0\":{\"1597\":1},\"1\":{\"350\":1,\"418\":1,\"419\":1,\"422\":1,\"423\":1,\"424\":1,\"425\":1,\"428\":1,\"429\":1,\"430\":1,\"431\":1,\"432\":1,\"514\":1,\"530\":1,\"647\":2,\"803\":1,\"819\":1,\"827\":1,\"829\":1,\"838\":1,\"839\":1,\"848\":1,\"849\":1,\"850\":1,\"852\":1,\"853\":1,\"854\":1,\"855\":1,\"856\":1,\"857\":1,\"858\":1,\"859\":1,\"865\":1,\"866\":1,\"874\":1,\"877\":1,\"1060\":3,\"1566\":1,\"1598\":1,\"1600\":2,\"1609\":1,\"1680\":1,\"1810\":1,\"2106\":1,\"2192\":1,\"2212\":1,\"2213\":1,\"2219\":2,\"2220\":1,\"2223\":1,\"2225\":1,\"2242\":3,\"2252\":1,\"2253\":1,\"2257\":1,\"2258\":1,\"2296\":2,\"2343\":1,\"2545\":1,\"2547\":1,\"2548\":1,\"2551\":1,\"2575\":1,\"2612\":1,\"2624\":1,\"2639\":1,\"2672\":1,\"2675\":1,\"2682\":4,\"2683\":5,\"2686\":1,\"2687\":1,\"2688\":1,\"2689\":1,\"2690\":2,\"2691\":1,\"2779\":1,\"2799\":2,\"2800\":1,\"2801\":1,\"2804\":1,\"2812\":2,\"2814\":1,\"2846\":2,\"2849\":1,\"2850\":1,\"2858\":1,\"2862\":2,\"2872\":2,\"2873\":2,\"2888\":1,\"2903\":2,\"2909\":1,\"2910\":1,\"2945\":2}}],[\"threshold的4倍\",{\"1\":{\"1928\":1}}],[\"threshold\",{\"1\":{\"1928\":3,\"3517\":1}}],[\"thresholdfilter\",{\"1\":{\"308\":1}}],[\"threads\",{\"1\":{\"3348\":1}}],[\"threadsafety\",{\"1\":{\"1784\":1}}],[\"threadpoolexecutor\",{\"1\":{\"1817\":2}}],[\"threadpool\",{\"1\":{\"1817\":1}}],[\"thread和runnable\",{\"0\":{\"1744\":1}}],[\"threadmethodtest\",{\"1\":{\"1728\":1,\"1729\":1,\"1737\":1}}],[\"thread常用方法\",{\"0\":{\"1726\":1}}],[\"threadtest\",{\"1\":{\"1720\":1,\"1795\":1}}],[\"threadname\",{\"1\":{\"1716\":1}}],[\"thread类中声明sleep\",{\"1\":{\"1803\":1}}],[\"thread类就能创建一个新的线程\",{\"1\":{\"1742\":1}}],[\"thread类有一个构造方法是接收\",{\"1\":{\"1741\":1}}],[\"thread类时\",{\"1\":{\"1741\":1}}],[\"thread类来创建线程的\",{\"1\":{\"1740\":1}}],[\"thread类来实现多线程\",{\"1\":{\"1713\":1}}],[\"thread类\",{\"0\":{\"1715\":1},\"1\":{\"1715\":1}}],[\"thread类介绍\",{\"0\":{\"1714\":1}}],[\"threaddump\",{\"1\":{\"342\":1}}],[\"thread\",{\"0\":{\"1687\":1},\"1\":{\"308\":4,\"499\":2,\"500\":1,\"1716\":4,\"1720\":3,\"1721\":2,\"1722\":2,\"1727\":1,\"1728\":4,\"1729\":4,\"1737\":2,\"1740\":7,\"1747\":1,\"1757\":4,\"1760\":7,\"1768\":8,\"1775\":1,\"1784\":7,\"1795\":4,\"1804\":5,\"1810\":3,\"1817\":1,\"3210\":1}}],[\"tar包\",{\"1\":{\"3569\":1}}],[\"tar\",{\"1\":{\"3287\":1,\"3289\":2,\"3318\":1,\"3320\":2,\"3561\":1}}],[\"targetnamespace=\",{\"1\":{\"3029\":1}}],[\"target作为项目目录\",{\"1\":{\"2759\":1}}],[\"target中\",{\"1\":{\"1669\":1}}],[\"target的参数类型elementtype枚举值多了两个\",{\"1\":{\"1669\":1}}],[\"target元注解\",{\"1\":{\"1662\":1}}],[\"target\",{\"0\":{\"1660\":1},\"1\":{\"578\":2,\"678\":1,\"1638\":1,\"1656\":1,\"1660\":3,\"1669\":1,\"1674\":1,\"1675\":1,\"1680\":1,\"1716\":2,\"2820\":1}}],[\"tags\",{\"1\":{\"3193\":2,\"3667\":1}}],[\"tagline\",{\"1\":{\"3108\":1}}],[\"takenumber\",{\"1\":{\"1500\":2}}],[\"tan\",{\"1\":{\"770\":1}}],[\"ta\",{\"1\":{\"737\":1}}],[\"talk\",{\"1\":{\"1258\":1,\"1259\":1,\"1282\":2}}],[\"tal\",{\"1\":{\"733\":2}}],[\"tables\",{\"1\":{\"3580\":1}}],[\"table\",{\"1\":{\"617\":1,\"624\":1,\"1921\":1,\"1928\":1,\"2558\":1,\"2559\":1,\"2619\":1,\"2635\":2,\"2639\":1,\"3195\":1,\"3545\":2}}],[\"tair\",{\"1\":{\"488\":1}}],[\"tasks\",{\"1\":{\"3278\":1,\"3279\":1,\"3280\":1,\"3378\":1,\"3380\":1}}],[\"task缺陷\",{\"0\":{\"502\":1}}],[\"task是一个轻量级的定时任务框架\",{\"1\":{\"496\":1}}],[\"tasktest\",{\"1\":{\"493\":1}}],[\"task\",{\"0\":{\"496\":1},\"1\":{\"492\":6,\"493\":2,\"497\":1,\"500\":1,\"1814\":1,\"3278\":1,\"3279\":1,\"3280\":1,\"3378\":1,\"3380\":1}}],[\"taskkill\",{\"1\":{\"248\":1}}],[\"tasklist\",{\"1\":{\"248\":1}}],[\"ttl\",{\"1\":{\"480\":1}}],[\"ttps\",{\"1\":{\"105\":1}}],[\"tcp网络编程示例\",{\"0\":{\"2226\":1}}],[\"tcp网络编程的服务器端的channel\",{\"1\":{\"2161\":1}}],[\"tcp网络编程的客户端的channel\",{\"1\":{\"2161\":1}}],[\"tcp编程\",{\"0\":{\"2215\":1}}],[\"tcp的四次挥手\",{\"0\":{\"2207\":1}}],[\"tcp的三次握手\",{\"0\":{\"2206\":1}}],[\"tcp协议用于实现面向连接的会话\",{\"1\":{\"2244\":1}}],[\"tcp协议进行通信的两个应用进程\",{\"1\":{\"2204\":1}}],[\"tcp协议\",{\"0\":{\"2204\":1}}],[\"tcp与udp\",{\"0\":{\"2201\":1}}],[\"tcp\",{\"0\":{\"2203\":1},\"1\":{\"451\":1,\"2174\":1,\"2203\":3,\"2214\":2,\"2244\":1,\"2697\":1,\"3268\":1,\"3269\":1,\"3270\":1,\"3271\":1}}],[\"touch\",{\"1\":{\"3561\":1}}],[\"touppercase\",{\"0\":{\"666\":1},\"1\":{\"666\":2,\"2118\":1,\"2463\":2}}],[\"tojsonstring\",{\"1\":{\"3086\":2}}],[\"topn\",{\"1\":{\"3610\":1}}],[\"top\",{\"1\":{\"2938\":2}}],[\"tokens\",{\"1\":{\"3473\":1,\"3476\":1,\"3480\":1,\"3482\":1,\"3483\":1,\"3485\":1,\"3489\":1}}],[\"token>\",{\"1\":{\"3333\":1}}],[\"token=<token>\",{\"1\":{\"3305\":1}}],[\"token等\",{\"1\":{\"3304\":1}}],[\"token\",{\"1\":{\"2937\":1,\"3305\":4,\"3316\":1,\"3328\":5,\"3329\":1,\"3331\":1,\"3333\":1,\"3464\":2,\"3473\":4,\"3476\":4,\"3480\":2,\"3482\":5,\"3483\":3,\"3485\":5,\"3489\":2}}],[\"took\",{\"1\":{\"3142\":1,\"3154\":1,\"3160\":1,\"3164\":1,\"3191\":1,\"3249\":1}}],[\"too\",{\"1\":{\"2610\":1,\"3313\":1,\"3346\":1,\"3348\":1}}],[\"toolkits\",{\"1\":{\"1338\":1}}],[\"tools\",{\"1\":{\"574\":1}}],[\"toset\",{\"1\":{\"2491\":2}}],[\"tostring在object中输出的是带对象类型的地址\",{\"1\":{\"1432\":1}}],[\"tostring的源码\",{\"0\":{\"1432\":1}}],[\"tostringcache\",{\"1\":{\"688\":1}}],[\"tostring\",{\"0\":{\"774\":1,\"890\":1,\"1431\":1,\"1435\":1},\"1\":{\"620\":1,\"673\":1,\"674\":2,\"749\":1,\"751\":1,\"756\":2,\"757\":1,\"774\":2,\"794\":1,\"795\":1,\"814\":1,\"843\":1,\"848\":1,\"849\":1,\"852\":1,\"853\":1,\"856\":1,\"857\":1,\"868\":1,\"872\":1,\"873\":1,\"890\":2,\"892\":1,\"893\":1,\"895\":2,\"898\":1,\"917\":1,\"1001\":1,\"1058\":1,\"1246\":1,\"1424\":1,\"1432\":1,\"1433\":1,\"1434\":1,\"1440\":1,\"1621\":2,\"1622\":1,\"1627\":1,\"1631\":1,\"1652\":1,\"2101\":1,\"2166\":1,\"2255\":1,\"2293\":1,\"2296\":1,\"3220\":1,\"3221\":1}}],[\"tolist\",{\"1\":{\"2471\":1,\"2491\":2}}],[\"tolongfunction\",{\"1\":{\"2466\":1}}],[\"tolowercase\",{\"0\":{\"665\":1},\"1\":{\"665\":2}}],[\"ton\",{\"1\":{\"2469\":6}}],[\"todoublefunction\",{\"1\":{\"2464\":1}}],[\"todegrees\",{\"1\":{\"770\":1}}],[\"tofile\",{\"1\":{\"2166\":1}}],[\"toffset\",{\"1\":{\"662\":1}}],[\"toabsolutepath\",{\"1\":{\"2166\":1}}],[\"toarray\",{\"0\":{\"916\":1},\"1\":{\"917\":2,\"918\":2}}],[\"tohexstring\",{\"1\":{\"1432\":1}}],[\"tohttphost\",{\"1\":{\"418\":2}}],[\"tointfunction\",{\"1\":{\"2465\":1}}],[\"toindex指定结束排序的下标\",{\"1\":{\"894\":1}}],[\"toindex\",{\"1\":{\"892\":2,\"894\":1,\"952\":1}}],[\"toinstant\",{\"1\":{\"709\":1}}],[\"toradians\",{\"1\":{\"770\":1}}],[\"toepochmilli\",{\"1\":{\"726\":2}}],[\"toepochmillion\",{\"0\":{\"726\":1}}],[\"tochararray\",{\"0\":{\"673\":1},\"1\":{\"673\":2}}],[\"to\",{\"1\":{\"444\":1,\"483\":1,\"733\":1,\"734\":1,\"1003\":1,\"2538\":1,\"2683\":1,\"2778\":1,\"3267\":4,\"3298\":1,\"3305\":2,\"3307\":1,\"3313\":1,\"3327\":1,\"3328\":2,\"3346\":1,\"3348\":1,\"3355\":8,\"3465\":1,\"3466\":1,\"3467\":1,\"3468\":1,\"3473\":2,\"3503\":4,\"3563\":1,\"3656\":1,\"3675\":2,\"3682\":1,\"3757\":1}}],[\"total\",{\"1\":{\"428\":1,\"429\":1,\"431\":1,\"3135\":1,\"3142\":2,\"3144\":1,\"3149\":1,\"3154\":1,\"3160\":2,\"3164\":2,\"3191\":2,\"3249\":2}}],[\"tom不是int类型的\",{\"1\":{\"1955\":1}}],[\"tome\",{\"0\":{\"1549\":1}}],[\"tom\",{\"1\":{\"428\":1,\"509\":1,\"520\":1,\"521\":4,\"540\":2,\"541\":1,\"548\":1,\"554\":1,\"1133\":3,\"1259\":1,\"1426\":2,\"1427\":2,\"1902\":3,\"1905\":2,\"1935\":1,\"1955\":1,\"1957\":1,\"1958\":1,\"2306\":1,\"2315\":1,\"2427\":1,\"3226\":1}}],[\"tomcat会自动将war包解压并对外提供web服务\",{\"1\":{\"2997\":1}}],[\"tomcat会将其常驻内存\",{\"1\":{\"2793\":1}}],[\"tomcat会将非常多的类直接加载到内存中\",{\"1\":{\"332\":1}}],[\"tomcat上的资源和编译后的java类路径\",{\"1\":{\"2939\":1}}],[\"tomcat在获取流的时候采用的编码是iso\",{\"1\":{\"2876\":1}}],[\"tomcat需要解析请求数据\",{\"1\":{\"2838\":1}}],[\"tomcat向之前发起请求的浏览器返回响应\",{\"1\":{\"2831\":1}}],[\"tomcat从response对象中拿到程序中设置的响应消息数据\",{\"1\":{\"2831\":1}}],[\"tomcat接收到请求\",{\"1\":{\"2831\":1}}],[\"tomcat中有一个defaultservlet\",{\"1\":{\"2825\":1}}],[\"tomcat识别\",{\"1\":{\"2772\":1}}],[\"tomcat都能解析\",{\"1\":{\"2771\":1}}],[\"tomcat安全\",{\"1\":{\"2768\":1}}],[\"tomcat集群\",{\"1\":{\"2768\":1}}],[\"tomcat架构\",{\"1\":{\"2768\":1}}],[\"tomcat添加导出方式\",{\"0\":{\"2766\":1}}],[\"tomcat导出方式介绍\",{\"0\":{\"2765\":1}}],[\"tomcat可能会运行多个项目\",{\"1\":{\"2716\":1}}],[\"tomcat默认访问index\",{\"1\":{\"2715\":1}}],[\"tomcat默认的端口是8080\",{\"1\":{\"2705\":1}}],[\"tomcat的模板的设置界面将不会出现下面两个选项\",{\"1\":{\"2767\":1}}],[\"tomcat的\",{\"1\":{\"2712\":1}}],[\"tomcat模式是utf8\",{\"1\":{\"2707\":1}}],[\"tomcat也被称为web容器\",{\"1\":{\"2698\":1}}],[\"tomcat是一个开源免费的轻量级web服务器\",{\"1\":{\"2698\":1}}],[\"tomcat介绍\",{\"0\":{\"2693\":1}}],[\"tomcat占用端口8080\",{\"1\":{\"2186\":1}}],[\"tomcat服务器配置\",{\"0\":{\"2750\":1}}],[\"tomcat服务器启动时\",{\"1\":{\"1031\":1}}],[\"tomcat服务器代码也是java写的\",{\"1\":{\"132\":1}}],[\"tomcat将基本所有用到的类\",{\"1\":{\"504\":1}}],[\"tomcat本身也是对象\",{\"1\":{\"180\":1}}],[\"tomcat暂停就读不到很多配置\",{\"1\":{\"174\":1}}],[\"tomcat这个starter就可以\",{\"1\":{\"134\":1}}],[\"tomcat依赖的位置\",{\"0\":{\"133\":1}}],[\"tomcat<\",{\"1\":{\"123\":1,\"134\":1,\"2758\":1}}],[\"tomcat\",{\"0\":{\"2698\":1},\"1\":{\"11\":1,\"133\":1,\"2668\":2,\"2694\":1,\"2720\":1,\"2723\":1,\"2755\":1,\"2770\":1,\"2781\":1,\"2785\":1,\"2832\":2,\"2833\":1,\"2837\":1,\"2928\":1,\"2933\":1}}],[\"tbl\",{\"1\":{\"365\":1,\"617\":1,\"624\":1}}],[\"tbd\",{\"1\":{\"80\":1,\"81\":1,\"434\":1,\"435\":1,\"486\":1,\"488\":1,\"489\":1,\"503\":1,\"569\":1,\"570\":1,\"571\":1,\"613\":1,\"978\":1,\"979\":1,\"980\":1,\"981\":1,\"982\":1,\"3519\":1,\"3520\":1,\"3521\":1,\"3648\":1,\"3690\":1,\"3691\":1,\"3730\":1,\"3741\":1,\"3752\":1,\"3753\":1,\"3754\":1}}],[\"trows\",{\"0\":{\"1596\":1}}],[\"treeify\",{\"1\":{\"1928\":4}}],[\"tree\",{\"1\":{\"1887\":1,\"3617\":1}}],[\"treemap的构造器接收一个参数\",{\"1\":{\"1936\":1}}],[\"treemap判断\",{\"1\":{\"1914\":1,\"1933\":1}}],[\"treemap存储\",{\"1\":{\"1914\":1,\"1933\":1}}],[\"treemap\",{\"0\":{\"1914\":1,\"1932\":1},\"1\":{\"955\":1,\"1826\":1,\"1909\":1,\"1910\":1,\"1914\":1,\"1933\":1,\"1935\":2,\"1936\":2}}],[\"treeset底层使用\",{\"1\":{\"1933\":1}}],[\"treeset底层是红黑树\",{\"1\":{\"1903\":1}}],[\"treeset中\",{\"1\":{\"1904\":1}}],[\"treeset中不允许添加相同的对象\",{\"1\":{\"1903\":1}}],[\"treeset遍历数据\",{\"1\":{\"1903\":1}}],[\"treeset类新增了很多方法\",{\"1\":{\"1887\":1}}],[\"treeset\",{\"0\":{\"1887\":1,\"1903\":1},\"1\":{\"903\":1,\"1826\":1,\"1881\":1,\"1887\":4,\"1905\":2,\"1906\":2}}],[\"trim\",{\"0\":{\"667\":1},\"1\":{\"667\":2}}],[\"truststore\",{\"1\":{\"418\":4,\"3307\":1,\"3327\":1,\"3337\":1,\"3355\":1}}],[\"trustedca\",{\"1\":{\"418\":3}}],[\"true或者false\",{\"1\":{\"3548\":1}}],[\"true=创建\",{\"1\":{\"3197\":1}}],[\"true=追加写\",{\"1\":{\"822\":1}}],[\"true111\",{\"1\":{\"1446\":1}}],[\"true123\",{\"1\":{\"1440\":1}}],[\"true用1表示\",{\"1\":{\"1108\":1}}],[\"true表示没有与查询条件匹配的文档时创建新文档\",{\"1\":{\"3595\":1}}],[\"true表示成功\",{\"1\":{\"3119\":2}}],[\"true表示开启\",{\"1\":{\"2628\":1}}],[\"true表示公平的多线程\",{\"1\":{\"1781\":1}}],[\"true表示执行成功\",{\"1\":{\"914\":1}}],[\"true表示订阅模式\",{\"1\":{\"451\":1}}],[\"true表示文档存在\",{\"1\":{\"430\":1}}],[\"true表示删除成功\",{\"1\":{\"425\":1}}],[\"true表示存在\",{\"1\":{\"424\":1}}],[\"true\",{\"0\":{\"1186\":1},\"1\":{\"147\":4,\"294\":1,\"308\":1,\"343\":2,\"345\":1,\"419\":2,\"422\":3,\"432\":1,\"451\":1,\"514\":1,\"647\":3,\"652\":2,\"653\":1,\"661\":1,\"662\":1,\"663\":1,\"681\":1,\"746\":1,\"797\":1,\"798\":1,\"799\":1,\"800\":1,\"801\":1,\"807\":1,\"810\":1,\"822\":1,\"864\":1,\"865\":1,\"877\":1,\"896\":1,\"909\":1,\"910\":2,\"911\":1,\"912\":1,\"914\":1,\"924\":1,\"946\":1,\"964\":1,\"965\":1,\"967\":1,\"968\":1,\"991\":1,\"998\":1,\"1000\":1,\"1107\":1,\"1125\":1,\"1133\":2,\"1186\":2,\"1204\":3,\"1408\":1,\"1426\":3,\"1427\":1,\"1428\":10,\"1430\":2,\"1440\":3,\"1488\":1,\"1711\":1,\"1729\":1,\"1740\":1,\"1757\":1,\"1760\":1,\"1762\":1,\"1768\":3,\"1781\":1,\"1784\":2,\"1804\":1,\"1912\":2,\"2045\":1,\"2060\":1,\"2064\":1,\"2118\":1,\"2121\":1,\"2126\":1,\"2196\":1,\"2258\":3,\"2306\":1,\"2310\":1,\"2311\":2,\"2315\":1,\"2479\":1,\"2571\":1,\"2588\":1,\"2600\":1,\"2603\":1,\"2635\":1,\"2653\":2,\"2674\":1,\"3110\":1,\"3119\":2,\"3130\":1,\"3141\":2,\"3159\":2,\"3197\":3,\"3198\":3,\"3209\":1,\"3269\":1,\"3270\":1,\"3271\":1,\"3282\":2,\"3307\":4,\"3327\":4,\"3337\":5,\"3355\":3,\"3526\":1,\"3548\":1,\"3562\":3,\"3587\":1,\"3597\":1,\"3656\":4,\"3667\":3,\"3670\":1,\"3679\":1,\"3682\":1,\"3701\":7}}],[\"try语句\",{\"0\":{\"2512\":1}}],[\"try中有return语句\",{\"1\":{\"1590\":1}}],[\"try\",{\"0\":{\"1584\":1,\"1587\":1,\"1588\":1,\"1601\":1,\"3592\":1},\"1\":{\"418\":2,\"536\":1,\"674\":2,\"803\":1,\"827\":2,\"1562\":1,\"1566\":1,\"1585\":2,\"1587\":1,\"1591\":1,\"1592\":2,\"1593\":1,\"1600\":1,\"1601\":1,\"1609\":1,\"1729\":2,\"1780\":1,\"1784\":1,\"1795\":2,\"1804\":1,\"1810\":1,\"2052\":2,\"2053\":2,\"2064\":2,\"2065\":3,\"2071\":3,\"2082\":2,\"2084\":3,\"2118\":2,\"2121\":1,\"2231\":1,\"2232\":1,\"2238\":1,\"2573\":3,\"2576\":2,\"2577\":1,\"2581\":1,\"2597\":1,\"2600\":1,\"2603\":1,\"2634\":1,\"2635\":3,\"2653\":4,\"2657\":7,\"2675\":1,\"2676\":1,\"3567\":1,\"3569\":1,\"3592\":1,\"3675\":1}}],[\"tran\",{\"1\":{\"3469\":1}}],[\"translog的机制来保证数据的可靠性的\",{\"1\":{\"3527\":1}}],[\"translog\",{\"1\":{\"3513\":1,\"3517\":2,\"3527\":5}}],[\"trans\",{\"1\":{\"3465\":1,\"3466\":1,\"3467\":1,\"3468\":1,\"3469\":1}}],[\"transpar\",{\"1\":{\"3469\":1}}],[\"transparent\",{\"1\":{\"3465\":1,\"3466\":1,\"3467\":1,\"3468\":1,\"3469\":1}}],[\"transports\",{\"1\":{\"3326\":1}}],[\"transport\",{\"1\":{\"418\":4,\"3268\":2,\"3269\":1,\"3270\":1,\"3271\":1,\"3307\":4,\"3327\":4,\"3328\":1,\"3329\":1,\"3332\":1,\"3335\":3,\"3337\":6,\"3339\":2,\"3355\":4}}],[\"transmission\",{\"1\":{\"2202\":1}}],[\"transfer\",{\"1\":{\"2111\":1}}],[\"transferdata\",{\"1\":{\"1512\":5}}],[\"transaction\",{\"1\":{\"2638\":4,\"2639\":1}}],[\"transact\",{\"1\":{\"1500\":3}}],[\"transient\",{\"1\":{\"688\":1}}],[\"traffic\",{\"1\":{\"3110\":1,\"3314\":1,\"3347\":1}}],[\"trace\",{\"1\":{\"292\":1,\"308\":2,\"2811\":2}}],[\"tinyblob\",{\"1\":{\"2608\":1}}],[\"tinyint\",{\"1\":{\"2562\":1}}],[\"tier\",{\"1\":{\"423\":1,\"3124\":1,\"3283\":1,\"3381\":1}}],[\"timed\",{\"1\":{\"3142\":1,\"3154\":1,\"3160\":1,\"3164\":1,\"3191\":1,\"3249\":1,\"3278\":1,\"3279\":1,\"3280\":1,\"3378\":1,\"3380\":1}}],[\"timebetweenevictionrunsmillis\",{\"1\":{\"2674\":1}}],[\"timebasedfilenamingandtriggeringpolicy>\",{\"1\":{\"308\":3}}],[\"timebasedrollingpolicy\",{\"1\":{\"308\":3}}],[\"timestamp\",{\"1\":{\"2562\":2,\"3498\":1,\"3670\":10,\"3673\":2,\"3674\":2,\"3700\":2,\"3701\":2}}],[\"time等\",{\"1\":{\"746\":1}}],[\"time为例\",{\"1\":{\"732\":1}}],[\"timer任务执行是依赖于系统绝对时间\",{\"1\":{\"494\":1}}],[\"timer底层是使用单线程来处理多个timer任务\",{\"1\":{\"494\":1}}],[\"timer的缺陷\",{\"0\":{\"494\":1}}],[\"timer的schedule方法用来执行定时任务\",{\"1\":{\"493\":1}}],[\"timer类用来创建定时器\",{\"1\":{\"493\":1}}],[\"timertask是要执行的定时任\",{\"1\":{\"493\":1}}],[\"timertask\",{\"1\":{\"492\":7,\"493\":2}}],[\"timer是java\",{\"1\":{\"491\":1}}],[\"timer\",{\"0\":{\"491\":1},\"1\":{\"491\":1,\"492\":2,\"493\":4}}],[\"timetoliveseconds=\",{\"1\":{\"478\":2}}],[\"timetoliveseconds\",{\"1\":{\"478\":1}}],[\"timetoidleseconds=\",{\"1\":{\"478\":2}}],[\"timetoidleseconds\",{\"1\":{\"478\":1}}],[\"time\",{\"1\":{\"368\":1,\"483\":1,\"492\":1,\"644\":1,\"709\":3,\"710\":5,\"725\":2,\"727\":2,\"731\":4,\"732\":1,\"733\":1,\"734\":2,\"2562\":2}}],[\"timeout>\",{\"1\":{\"3073\":1}}],[\"timeout>30<\",{\"1\":{\"3073\":1}}],[\"timeout=0\",{\"1\":{\"868\":1}}],[\"timeout\",{\"1\":{\"208\":1,\"214\":1,\"2196\":1,\"3509\":2,\"3533\":2}}],[\"title\",{\"1\":{\"246\":2,\"3141\":1,\"3142\":2,\"3159\":1,\"3160\":2,\"3164\":2}}],[\"tel\",{\"1\":{\"3198\":1,\"3199\":1}}],[\"telnet占用端口23\",{\"1\":{\"2186\":1}}],[\"tele=18888888888\",{\"1\":{\"474\":2}}],[\"tele\",{\"1\":{\"470\":1,\"471\":6,\"472\":3,\"473\":2}}],[\"teacher\",{\"1\":{\"1411\":1}}],[\"ten\",{\"1\":{\"778\":2}}],[\"text=可以全文检索\",{\"1\":{\"3197\":1}}],[\"text\",{\"1\":{\"707\":1,\"730\":1,\"1058\":2,\"1338\":1,\"2121\":1,\"2849\":1,\"2857\":1,\"2871\":1,\"2889\":2,\"2890\":1,\"2896\":1,\"2932\":1,\"3197\":2,\"3198\":1,\"3199\":1,\"3473\":3,\"3476\":1,\"3480\":1,\"3482\":1,\"3485\":1,\"3489\":1,\"3621\":1}}],[\"terminal\",{\"1\":{\"3305\":1,\"3328\":1}}],[\"terminating\",{\"1\":{\"782\":1}}],[\"termination\",{\"1\":{\"500\":2}}],[\"terms\",{\"1\":{\"3190\":1,\"3248\":1}}],[\"termsupport\",{\"1\":{\"2351\":1}}],[\"term\",{\"1\":{\"428\":1,\"429\":1,\"431\":1,\"432\":1,\"3135\":1,\"3141\":1,\"3144\":1,\"3149\":1,\"3159\":1,\"3667\":1,\"3670\":1}}],[\"template\",{\"1\":{\"1499\":1,\"2731\":1}}],[\"templates中\",{\"1\":{\"2746\":1}}],[\"templates\",{\"1\":{\"193\":1,\"648\":1,\"2746\":1}}],[\"temporalaccessor\",{\"1\":{\"729\":1,\"730\":1,\"733\":1,\"734\":1,\"737\":1}}],[\"temporaladjuster\",{\"1\":{\"714\":1,\"715\":1,\"716\":1,\"723\":1}}],[\"temporal\",{\"1\":{\"710\":1,\"714\":1,\"715\":1,\"716\":1,\"723\":1,\"729\":1}}],[\"tempcrtname\",{\"1\":{\"418\":2}}],[\"temp\",{\"1\":{\"149\":2,\"1292\":2,\"1293\":2}}],[\"tempdir\",{\"1\":{\"149\":1}}],[\"test>\",{\"1\":{\"3664\":1,\"3673\":1,\"3709\":1,\"3724\":1}}],[\"testwhileidle的判断依据\",{\"1\":{\"2674\":1}}],[\"testwhileidle\",{\"1\":{\"2674\":1}}],[\"testwhileidle都不会其作用\",{\"1\":{\"2674\":1}}],[\"testonreturn\",{\"1\":{\"2674\":2}}],[\"testonborrow\",{\"1\":{\"2674\":2}}],[\"testtransactionselect\",{\"1\":{\"2639\":1}}],[\"testtypedefine<\",{\"1\":{\"1670\":1}}],[\"testjdbctransaction\",{\"1\":{\"2635\":1}}],[\"testqueryvalue\",{\"1\":{\"2691\":1}}],[\"testquerylist\",{\"1\":{\"2689\":1}}],[\"testqueryinstance1\",{\"1\":{\"2690\":1}}],[\"testqueryinstance\",{\"1\":{\"2688\":1}}],[\"testquery\",{\"1\":{\"2613\":1}}],[\"testquery1\",{\"1\":{\"2597\":1}}],[\"testinsert3\",{\"1\":{\"2625\":1}}],[\"testinsert1\",{\"1\":{\"2624\":1}}],[\"testinsert\",{\"1\":{\"2573\":1,\"2612\":1,\"2657\":1,\"2686\":1}}],[\"testing\",{\"0\":{\"37\":1}}],[\"testconnection3\",{\"1\":{\"2547\":1,\"2548\":1}}],[\"testcontroller类的getit方法被成功执行\",{\"1\":{\"111\":1}}],[\"testcontroller\",{\"1\":{\"109\":1,\"128\":2}}],[\"testfilereaderfilewriter\",{\"1\":{\"2065\":1}}],[\"test注解\",{\"1\":{\"1638\":1}}],[\"test注解修饰的方法\",{\"1\":{\"224\":1}}],[\"test2\",{\"1\":{\"1592\":1,\"2106\":1,\"2252\":1,\"2258\":1}}],[\"test1\",{\"1\":{\"1587\":1,\"2257\":1,\"2715\":1}}],[\"test$none\",{\"1\":{\"868\":1}}],[\"testdeletebyid\",{\"1\":{\"2657\":1}}],[\"testdelete\",{\"1\":{\"623\":1,\"2687\":1}}],[\"testdb\",{\"1\":{\"280\":1}}],[\"testupdateconnectioncustomer\",{\"1\":{\"2657\":1}}],[\"testupdate\",{\"1\":{\"623\":1,\"2577\":1}}],[\"testsave\",{\"1\":{\"623\":1}}],[\"testgetmaxbirth\",{\"1\":{\"2657\":1}}],[\"testgetcount\",{\"1\":{\"2657\":1}}],[\"testgetcustomerbyid\",{\"1\":{\"2657\":1,\"2676\":1}}],[\"testgetby2\",{\"1\":{\"632\":1,\"633\":1}}],[\"testgetby\",{\"1\":{\"631\":1}}],[\"testgetbyid\",{\"1\":{\"623\":1}}],[\"testgetpage\",{\"1\":{\"628\":1}}],[\"testgetall\",{\"1\":{\"375\":1,\"623\":1,\"2657\":1}}],[\"test依赖\",{\"1\":{\"594\":1}}],[\"testmvc\",{\"1\":{\"280\":1}}],[\"testredis\",{\"1\":{\"280\":1}}],[\"test环境配置文件\",{\"1\":{\"274\":1}}],[\"test目录\",{\"0\":{\"225\":1}}],[\"test<\",{\"1\":{\"223\":1,\"594\":1,\"612\":1}}],[\"test就是junit测试有关的模块\",{\"1\":{\"223\":1}}],[\"test进行测试\",{\"1\":{\"176\":1}}],[\"test标签\",{\"1\":{\"176\":1}}],[\"test标签运行方法\",{\"1\":{\"174\":1}}],[\"test\",{\"0\":{\"628\":1},\"1\":{\"98\":1,\"109\":1,\"111\":1,\"225\":1,\"226\":2,\"227\":1,\"272\":1,\"274\":1,\"280\":1,\"362\":1,\"366\":2,\"372\":1,\"375\":2,\"403\":1,\"404\":1,\"406\":1,\"407\":1,\"408\":1,\"409\":1,\"410\":1,\"419\":1,\"422\":1,\"423\":1,\"424\":1,\"425\":1,\"428\":1,\"429\":1,\"430\":1,\"431\":1,\"432\":1,\"583\":1,\"612\":1,\"623\":5,\"628\":1,\"631\":1,\"632\":1,\"633\":1,\"868\":1,\"977\":1,\"1038\":2,\"1040\":1,\"1267\":1,\"1292\":5,\"1293\":1,\"1302\":1,\"1304\":1,\"1408\":1,\"1432\":2,\"1466\":1,\"1497\":1,\"1784\":7,\"1995\":3,\"1996\":3,\"2003\":1,\"2256\":1,\"2392\":1,\"2542\":1,\"2545\":1,\"2547\":1,\"2548\":1,\"2550\":1,\"2673\":1,\"2991\":1,\"3576\":2,\"3701\":6}}],[\"t\",{\"0\":{\"893\":1,\"2500\":2,\"2502\":2,\"2508\":1},\"1\":{\"147\":1,\"673\":1,\"743\":1,\"752\":2,\"839\":1,\"877\":1,\"893\":1,\"895\":2,\"897\":1,\"899\":1,\"918\":2,\"934\":2,\"935\":2,\"938\":2,\"974\":2,\"975\":1,\"976\":2,\"977\":2,\"1670\":2,\"1671\":1,\"1980\":1,\"2293\":1,\"2296\":2,\"2392\":7,\"2404\":4,\"2407\":1,\"2410\":4,\"2446\":1,\"2448\":1,\"2450\":3,\"2467\":1,\"2487\":2,\"2500\":2,\"2502\":2,\"2507\":1,\"2508\":2,\"2603\":4,\"2653\":9,\"2683\":2,\"3220\":1,\"3234\":1,\"3237\":1,\"3239\":1,\"3240\":2,\"3245\":1,\"3252\":1,\"3253\":2,\"3670\":16,\"3673\":2,\"3674\":2,\"3700\":2,\"3701\":2}}],[\"t变成空格\",{\"1\":{\"147\":1}}],[\"type表示逻辑上的分类\",{\"1\":{\"3361\":1}}],[\"type是string类型\",{\"1\":{\"3029\":1}}],[\"type>\",{\"1\":{\"2933\":1}}],[\"type>audio\",{\"1\":{\"2933\":1}}],[\"type=external\",{\"1\":{\"3498\":1}}],[\"type=\",{\"1\":{\"2857\":3,\"2871\":5,\"3029\":6}}],[\"typearguments\",{\"1\":{\"2653\":2}}],[\"typedefine\",{\"1\":{\"1670\":1}}],[\"typeexcludefilter\",{\"1\":{\"563\":1,\"568\":1}}],[\"type的值都是固定的\",{\"1\":{\"477\":1}}],[\"types\",{\"1\":{\"103\":1,\"3102\":2}}],[\"type\",{\"0\":{\"1670\":1,\"1671\":1,\"3361\":1},\"1\":{\"95\":1,\"364\":1,\"383\":1,\"384\":1,\"477\":1,\"483\":1,\"563\":2,\"568\":2,\"618\":1,\"619\":1,\"624\":1,\"832\":1,\"842\":2,\"862\":2,\"1059\":1,\"1075\":2,\"1653\":2,\"1660\":3,\"1661\":1,\"1669\":4,\"1674\":1,\"1675\":1,\"1948\":1,\"2264\":1,\"2293\":2,\"2300\":1,\"2301\":2,\"2430\":1,\"2653\":2,\"2820\":1,\"2889\":1,\"3108\":1,\"3197\":3,\"3198\":3,\"3199\":3,\"3200\":1,\"3210\":1,\"3473\":3,\"3476\":4,\"3480\":2,\"3482\":5,\"3483\":3,\"3485\":5,\"3489\":2}}],[\"就有什么账号的权限\",{\"1\":{\"3720\":1}}],[\"就开启了登录认证\",{\"1\":{\"3717\":1}}],[\"就像sql数据库一样灵活\",{\"1\":{\"3550\":1}}],[\"就像我们的法律一样\",{\"1\":{\"1506\":1}}],[\"就越可能获得多数成员的投票\",{\"1\":{\"3687\":1}}],[\"就越多\",{\"1\":{\"3515\":1}}],[\"就越好\",{\"1\":{\"1899\":1}}],[\"就生效了\",{\"1\":{\"3478\":1}}],[\"就已经可以被查询到了\",{\"1\":{\"3449\":1}}],[\"就直接从索引返回结果\",{\"1\":{\"3636\":1}}],[\"就直接用ip访问了\",{\"1\":{\"3308\":1,\"3330\":1}}],[\"就直接报错\",{\"1\":{\"1116\":1}}],[\"就启动一个\",{\"1\":{\"3277\":1}}],[\"就被建立了\",{\"1\":{\"3033\":1}}],[\"就相当于发布了\",{\"1\":{\"2995\":1}}],[\"就成了一个jar包\",{\"1\":{\"2980\":1}}],[\"就只是声明持久层的接口\",{\"1\":{\"3746\":1}}],[\"就只需要按照如下格式来编写\",{\"1\":{\"2873\":1}}],[\"就只能在方法体内使用此形参\",{\"1\":{\"1354\":1}}],[\"就向数据库要求一个\",{\"1\":{\"2662\":1}}],[\"就修改配置文件\",{\"1\":{\"2610\":1}}],[\"就默认把列名当成别名\",{\"1\":{\"2602\":1}}],[\"就默认方法体种一定有返回值了\",{\"1\":{\"2364\":1}}],[\"就抛异常\",{\"1\":{\"2507\":1}}],[\"就类似于使用\",{\"1\":{\"2436\":1}}],[\"就ok了\",{\"1\":{\"2381\":1}}],[\"就算jdk支持新语法\",{\"1\":{\"2356\":1}}],[\"就算执行完了case匹配的表达式\",{\"1\":{\"1175\":1}}],[\"就实例化并代理哪个类\",{\"1\":{\"2325\":1}}],[\"就确定下来了\",{\"1\":{\"2324\":1}}],[\"就作为class的一个实例\",{\"1\":{\"2261\":1}}],[\"就少了很多值无法用于表示字符\",{\"1\":{\"2111\":1}}],[\"就叫碰撞\",{\"1\":{\"1899\":1}}],[\"就添加失败\",{\"1\":{\"1890\":1}}],[\"就一定不会存在重复的数据\",{\"1\":{\"1890\":1}}],[\"就一定不会放到同一个位置\",{\"1\":{\"1890\":1}}],[\"就唤醒优先级高的那个\",{\"1\":{\"1799\":1}}],[\"就形成了线程的死锁\",{\"1\":{\"1788\":1}}],[\"就值就调用target的run方法\",{\"1\":{\"1741\":1}}],[\"就出抛出内存溢出的错误\",{\"1\":{\"1706\":1}}],[\"就称为\",{\"1\":{\"1900\":1}}],[\"就称为变量\",{\"1\":{\"1702\":1}}],[\"就称为是一个常量\",{\"1\":{\"1351\":1}}],[\"就处于不断变化的动态过程中\",{\"1\":{\"1685\":1}}],[\"就没有任何作用了\",{\"1\":{\"1654\":1}}],[\"就没用了\",{\"1\":{\"1654\":1}}],[\"就意味着该方法覆盖父类的方法\",{\"1\":{\"1654\":1}}],[\"就意味着\",{\"1\":{\"1653\":1}}],[\"就绪\",{\"1\":{\"1616\":1,\"1749\":1}}],[\"就职状态\",{\"1\":{\"1616\":1}}],[\"就跳出当前的try\",{\"1\":{\"1588\":1}}],[\"就跳出switch\",{\"1\":{\"1175\":1}}],[\"就进入catch中进行异常的处理\",{\"1\":{\"1588\":1}}],[\"就进行向下转型\",{\"1\":{\"1415\":1}}],[\"就考虑到错误的检测\",{\"1\":{\"1562\":1}}],[\"就采用数据类型的默认值\",{\"1\":{\"1549\":1}}],[\"就采用默认值\",{\"1\":{\"556\":1}}],[\"就能在查询时找到正确的分片了\",{\"1\":{\"3400\":1}}],[\"就能方便地进行调用\",{\"1\":{\"2986\":1}}],[\"就能操作所有数据库\",{\"1\":{\"1513\":1}}],[\"就能编译\",{\"1\":{\"1186\":1}}],[\"就执行consumer接口的实现代码\",{\"1\":{\"2505\":1}}],[\"就执行中间操作链\",{\"1\":{\"2440\":1}}],[\"就执行一次非静态代码块\",{\"1\":{\"1528\":1}}],[\"就执行哪个子类\",{\"1\":{\"1500\":1}}],[\"就执行下方代码\",{\"1\":{\"540\":2,\"541\":1}}],[\"就自动去父类中寻找\",{\"1\":{\"1383\":1}}],[\"就代表了web目录下\",{\"1\":{\"2941\":1}}],[\"就代表了一个运行时类的属性\",{\"1\":{\"860\":1}}],[\"就代表一层文件目录\",{\"1\":{\"1337\":1}}],[\"就用this\",{\"1\":{\"1331\":1}}],[\"就优先调用\",{\"1\":{\"1295\":1}}],[\"就将每个节点的响应收集整理成单个响应\",{\"1\":{\"3415\":1}}],[\"就将各个国家的文字用数字来表示\",{\"1\":{\"2108\":1}}],[\"就将栈中储存的数组第一个元素的地址替换掉\",{\"1\":{\"1227\":1}}],[\"就将数组在栈中储存的k=v出栈\",{\"1\":{\"1227\":1}}],[\"就将赋的值替换掉元素的默认值\",{\"1\":{\"1227\":1}}],[\"就将我们做的程序添加客户端依赖\",{\"1\":{\"317\":1}}],[\"就获取了父类中声明的属性和方法\",{\"1\":{\"1391\":1}}],[\"就获取了直接父类以及所有间接父类中声明的属性和方法\",{\"1\":{\"1363\":1}}],[\"就获取默认值\",{\"1\":{\"1220\":1}}],[\"就获取绝对路径\",{\"1\":{\"789\":1}}],[\"就构成了嵌套循环\",{\"1\":{\"1199\":1}}],[\"就行\",{\"1\":{\"1185\":1}}],[\"就行了\",{\"1\":{\"1164\":1}}],[\"就补1\",{\"1\":{\"1157\":1}}],[\"就在es服务器中创建了名为shopping的索引\",{\"1\":{\"3118\":1}}],[\"就在控制台输出一行\",{\"1\":{\"2082\":1}}],[\"就在括号内加属性\",{\"1\":{\"1626\":1}}],[\"就在哪个\",{\"1\":{\"1072\":1}}],[\"就在那个类上加\",{\"1\":{\"507\":1}}],[\"就无法修改倒排索引本身\",{\"1\":{\"3442\":1}}],[\"就无法获取jseesionid了\",{\"1\":{\"3069\":1}}],[\"就无法实现多次请求之间的数据共享\",{\"1\":{\"3036\":1}}],[\"就无法通过request对象进行共享数据\",{\"1\":{\"2912\":1}}],[\"就无法回滚了\",{\"1\":{\"2631\":1}}],[\"就无法直接使用map了\",{\"1\":{\"2472\":1}}],[\"就无法直接跳转到目标代码了\",{\"1\":{\"1058\":1}}],[\"就无法访问它了\",{\"1\":{\"1772\":1}}],[\"就无法进行创建\",{\"1\":{\"802\":1,\"2018\":1}}],[\"就看谁在上面\",{\"1\":{\"1030\":1}}],[\"就看用什么方法创建\",{\"1\":{\"802\":1,\"2018\":1}}],[\"就足以具有转义的作用\",{\"1\":{\"985\":1}}],[\"就使用value表示\",{\"1\":{\"1647\":1}}],[\"就使用arraylist中重载的\",{\"1\":{\"945\":1}}],[\"就使用哪个库的用户名\",{\"1\":{\"389\":1}}],[\"就接受object类\",{\"1\":{\"943\":1}}],[\"就他有顺序\",{\"1\":{\"930\":1,\"931\":1,\"932\":1,\"933\":1}}],[\"就他用顺序\",{\"1\":{\"929\":1}}],[\"就返回null\",{\"1\":{\"963\":1}}],[\"就返回false\",{\"1\":{\"950\":1}}],[\"就返回true\",{\"1\":{\"911\":1}}],[\"就返回空数组\",{\"1\":{\"794\":1,\"795\":1}}],[\"就返回错误\",{\"1\":{\"433\":1}}],[\"就必须在关闭连接前\",{\"1\":{\"2632\":1}}],[\"就必须指定舍入策略\",{\"1\":{\"783\":1}}],[\"就必须指定参数3\",{\"1\":{\"782\":1}}],[\"就必须显示的指定舍入策略\",{\"1\":{\"783\":1}}],[\"就次方\",{\"1\":{\"769\":1}}],[\"就按名字字母进行排序\",{\"1\":{\"748\":1}}],[\"就从\",{\"1\":{\"567\":1}}],[\"就知道你有可能需要的bean\",{\"1\":{\"559\":1}}],[\"就设置一个默认值\",{\"1\":{\"556\":1}}],[\"就去内存中拿\",{\"1\":{\"504\":1}}],[\"就赋值null\",{\"1\":{\"408\":1}}],[\"就是以replicaset的方式连接mongodb\",{\"1\":{\"3739\":1}}],[\"就是刚新加入的仲裁节点\",{\"1\":{\"3674\":1}}],[\"就是多了个replsetname\",{\"1\":{\"3656\":1}}],[\"就是主节点\",{\"1\":{\"3645\":1,\"3671\":1}}],[\"就是compass内置的\",{\"1\":{\"3571\":1}}],[\"就是collection接口中方法的使用\",{\"1\":{\"1901\":1}}],[\"就是我们所寻求的文档所在分片的位置\",{\"1\":{\"3400\":1}}],[\"就是索引的意思\",{\"1\":{\"3360\":1}}],[\"就是第一次启动es时返回的账号密码\",{\"1\":{\"3308\":1,\"3330\":1}}],[\"就是要添加的文档数据\",{\"1\":{\"3214\":1}}],[\"就是要注意缓存空间要跟缓存策略里的name匹配\",{\"1\":{\"479\":1}}],[\"就是数据全变了\",{\"1\":{\"3143\":1}}],[\"就是\",{\"1\":{\"3011\":2}}],[\"就是文件的名称\",{\"1\":{\"2717\":1}}],[\"就是为数据库连接建立一个\",{\"1\":{\"2664\":1}}],[\"就是为容器而生\",{\"1\":{\"1835\":1}}],[\"就是二进制数据\",{\"1\":{\"2607\":1}}],[\"就是servlet\",{\"1\":{\"2771\":1}}],[\"就是system\",{\"1\":{\"2404\":1}}],[\"就是springboot3了\",{\"1\":{\"590\":1}}],[\"就是spring将bean加载到容器的过程\",{\"1\":{\"505\":1}}],[\"就是上章写的在动态代理里写一些通用的代码\",{\"1\":{\"2347\":1}}],[\"就是代理的意义\",{\"1\":{\"2333\":1}}],[\"就是被代理类user\",{\"1\":{\"2321\":1}}],[\"就是动态性\",{\"1\":{\"2251\":1}}],[\"就是把上面两个方法结合起来\",{\"1\":{\"2226\":1}}],[\"就是accept\",{\"1\":{\"2224\":1}}],[\"就是追加写\",{\"1\":{\"2138\":1}}],[\"就是允许在定义类\",{\"1\":{\"1948\":1}}],[\"就是使用comparetor接口进行排序\",{\"1\":{\"1906\":1}}],[\"就是使用的collection中的addall\",{\"1\":{\"946\":1}}],[\"就是使用的collection的add\",{\"1\":{\"945\":1}}],[\"就是取代数组\",{\"1\":{\"1824\":1}}],[\"就是内存\",{\"1\":{\"1698\":1}}],[\"就是对jdbc中一些列基本常见的操作的封装\",{\"1\":{\"2642\":1}}],[\"就是对数据进行操作\",{\"1\":{\"1696\":1}}],[\"就是对象的多态性\",{\"1\":{\"1395\":1}}],[\"就是支持多线程的\",{\"1\":{\"1687\":1}}],[\"就是来指定\",{\"1\":{\"1660\":1}}],[\"就是指定\",{\"1\":{\"1657\":1}}],[\"就是方法的默认实现\",{\"1\":{\"1521\":1}}],[\"就是接口可以直接掉用的方法\",{\"1\":{\"1520\":1}}],[\"就是很典型的单例模式\",{\"1\":{\"1491\":1}}],[\"就是采取一定的方法保证在整个的软件系统中\",{\"1\":{\"1487\":1}}],[\"就是静态方法\",{\"1\":{\"1480\":1}}],[\"就是在内存上进行的二进制bit位的运算\",{\"1\":{\"1155\":1}}],[\"就是从main方法开始运行的\",{\"1\":{\"1045\":1}}],[\"就是集合的元素\",{\"1\":{\"899\":1}}],[\"就是构造器参数所属的class\",{\"1\":{\"850\":1,\"2286\":1}}],[\"就是比较器里的自然排序接口\",{\"1\":{\"743\":1}}],[\"就是不同\",{\"1\":{\"1654\":1}}],[\"就是不管用不用\",{\"1\":{\"532\":1}}],[\"就是不够安全\",{\"1\":{\"389\":1}}],[\"就是用来做最终的裁决的\",{\"1\":{\"529\":1}}],[\"就是mysql驱动升级到8以后要求强制配置时区\",{\"1\":{\"368\":1}}],[\"就是因为添加了这个包\",{\"1\":{\"341\":1}}],[\"就是通过软件的方式展示另一个软件的运行情况\",{\"1\":{\"312\":1}}],[\"就是开发环境\",{\"1\":{\"36\":1}}],[\"就要重新修改虚拟内存\",{\"1\":{\"3346\":1}}],[\"就要指定端口号\",{\"1\":{\"3298\":1}}],[\"就要配置voting\",{\"1\":{\"3276\":1}}],[\"就要executeupdate一次\",{\"1\":{\"2622\":1}}],[\"就要创建一次sql\",{\"1\":{\"2620\":1}}],[\"就要用https访问\",{\"1\":{\"3314\":1,\"3347\":1}}],[\"就要用string类\",{\"1\":{\"2400\":1}}],[\"就要用到属性校验了\",{\"1\":{\"217\":1}}],[\"就要通过invoke方法的参数\",{\"1\":{\"2335\":1}}],[\"就要跟之前添加的每一个数据进行equals比对\",{\"1\":{\"1889\":1}}],[\"就要对对象进行存储\",{\"1\":{\"1820\":1}}],[\"就要吧注解的成员变量写成数组的形式\",{\"1\":{\"1667\":1}}],[\"就要手动的加上super\",{\"1\":{\"1383\":1}}],[\"就要将输入写入数据库一次\",{\"1\":{\"2625\":1}}],[\"就要将其重启甚至关闭\",{\"1\":{\"313\":1}}],[\"就要将日志写入文件\",{\"1\":{\"301\":1}}],[\"就要针对性的结束进程了\",{\"1\":{\"248\":1}}],[\"就会开始重新选举\",{\"1\":{\"3689\":1}}],[\"就会重写规划新的分片\",{\"1\":{\"3509\":1}}],[\"就会严重影响降低\",{\"1\":{\"3504\":1}}],[\"就会修改失败\",{\"1\":{\"3497\":1}}],[\"就会直接卡死\",{\"1\":{\"3312\":1,\"3345\":1}}],[\"就会直接抛出异elasticsearchexception常\",{\"1\":{\"420\":1}}],[\"就会根据data中的节点信息进行选取\",{\"1\":{\"3275\":1}}],[\"就会占用4g内存\",{\"1\":{\"3265\":1}}],[\"就会携带cookie\",{\"1\":{\"3068\":1}}],[\"就会被\",{\"1\":{\"2957\":1}}],[\"就会被抛出\",{\"1\":{\"1598\":1}}],[\"就会调用事先准备好的方法执行操作\",{\"1\":{\"2957\":1}}],[\"就会执行放行前的逻辑\",{\"1\":{\"2947\":1}}],[\"就会执行一次\",{\"1\":{\"1281\":1}}],[\"就会给浏览器响应一个302的状态码+location的一个访问资源b的路径\",{\"1\":{\"2906\":1}}],[\"就会引发请求静态资源的时候没有走默认的而是走了自定义的servlet类\",{\"1\":{\"2825\":1}}],[\"就会自动创建一个新的段\",{\"1\":{\"3515\":1}}],[\"就会自动的调用如下的方法\",{\"1\":{\"2343\":1}}],[\"就会自动执行下面的方法去处理消息\",{\"1\":{\"448\":1}}],[\"就会唤醒所有等待的线程\",{\"1\":{\"1799\":1}}],[\"就会唤醒被wait的一个线程\",{\"1\":{\"1799\":1}}],[\"就会走完所有循环\",{\"1\":{\"1762\":1}}],[\"就会出现多打印票的状况\",{\"1\":{\"1755\":1}}],[\"就会出现打印的是同一张票的情况\",{\"1\":{\"1755\":1}}],[\"就会出现乱码\",{\"1\":{\"1103\":1}}],[\"就会按顺序加载这些内容\",{\"1\":{\"1694\":1}}],[\"就会生成一个对应异常类的对象\",{\"1\":{\"1588\":1}}],[\"就会在后台自动创建一个对应异常类的实例对象并抛出\",{\"1\":{\"1567\":1}}],[\"就会在异常代码处生成一个对应异常类的对象\",{\"1\":{\"1566\":1}}],[\"就会转换为true\",{\"1\":{\"1441\":1}}],[\"就会加载所有父类中声明的属性\",{\"1\":{\"1391\":1}}],[\"就会变成负数\",{\"1\":{\"1157\":1}}],[\"就会报indexoutofboundsexception\",{\"1\":{\"950\":1}}],[\"就会报异常\",{\"1\":{\"947\":1}}],[\"就会报错\",{\"1\":{\"229\":1,\"1388\":1,\"3210\":1,\"3265\":1}}],[\"就会产生一个iterator迭代器对象\",{\"1\":{\"922\":1}}],[\"就会产生异常\",{\"1\":{\"420\":1}}],[\"就会取到错误的字符\",{\"1\":{\"817\":1,\"2056\":1}}],[\"就会抛出es异常\",{\"1\":{\"422\":1}}],[\"就会导入对应的starter\",{\"1\":{\"123\":1}}],[\"就手动创建\",{\"1\":{\"225\":1}}],[\"就命令tomcat重新加载开发的文件就ok了\",{\"1\":{\"180\":1}}],[\"就不用配置artifacts\",{\"1\":{\"2735\":1}}],[\"就不用在单独安装jre了\",{\"1\":{\"1025\":1}}],[\"就不再执行\",{\"1\":{\"1598\":1}}],[\"就不能再被调用\",{\"1\":{\"1594\":1}}],[\"就不能再调用next方法了\",{\"1\":{\"925\":1,\"1840\":1}}],[\"就不能修改\",{\"1\":{\"1209\":1}}],[\"就不能在手动运行代码里的main方法和被\",{\"1\":{\"224\":1}}],[\"就不能在通过\",{\"1\":{\"174\":1}}],[\"就不需要导入了\",{\"1\":{\"1344\":1}}],[\"就不需要使用return\",{\"1\":{\"1277\":1}}],[\"就不需要该注解绑定\",{\"1\":{\"395\":1}}],[\"就不需要补齐启动类和配置文件\",{\"1\":{\"163\":1}}],[\"就不存在整合的概念了\",{\"1\":{\"354\":1}}],[\"就不会开启tomcat了\",{\"1\":{\"134\":1}}],[\"就需要对所有的分片进行查询\",{\"1\":{\"3511\":1}}],[\"就需要对方配合\",{\"1\":{\"315\":1}}],[\"就需要重构整个索引\",{\"1\":{\"3442\":1}}],[\"就需要重新编译\",{\"1\":{\"1040\":1}}],[\"就需要进行分词和标准化处理\",{\"1\":{\"3437\":1}}],[\"就需要进行异常处理\",{\"1\":{\"674\":1}}],[\"就需要将文档进行动态更新\",{\"1\":{\"3444\":1}}],[\"就需要将词条规范为标准模式\",{\"1\":{\"3436\":1}}],[\"就需要将项目部署到测试服务器上\",{\"1\":{\"37\":1}}],[\"就需要使用本地进行hosts映射\",{\"1\":{\"3298\":1}}],[\"就需要flush一次\",{\"1\":{\"2147\":1,\"2149\":1}}],[\"就需要定义多个不同泛型类型的遍历方法\",{\"1\":{\"1995\":1}}],[\"就需要声明在finally中\",{\"1\":{\"1590\":1}}],[\"就需要创建很多个除了数据类型\",{\"1\":{\"1400\":1}}],[\"就需要加个l告诉java分配8个byte的内存\",{\"1\":{\"1098\":1}}],[\"就需要先定义变量类型\",{\"1\":{\"1098\":1}}],[\"就需要手动输入空格或换行符\",{\"1\":{\"824\":1}}],[\"就需要实现comparable接口\",{\"1\":{\"744\":1}}],[\"就需要在类中对tostring进行自定义重写\",{\"1\":{\"1434\":1}}],[\"就需要在集合外定义comparator接口的方法或在集合内实现\",{\"1\":{\"742\":1}}],[\"就需要在xml配置文件中配置spring扫描包含bean注解的包\",{\"1\":{\"511\":1}}],[\"就需要比较对象的大小\",{\"1\":{\"739\":1}}],[\"就需要处理异常\",{\"1\":{\"674\":1}}],[\"就需要额外的配置\",{\"1\":{\"624\":1}}],[\"就需要通过手动创建配置类\",{\"1\":{\"561\":1}}],[\"就需要初始化两个对象\",{\"1\":{\"550\":1}}],[\"就需要该注解进行绑定\",{\"1\":{\"395\":1}}],[\"就需要考虑优先级了\",{\"1\":{\"141\":1}}],[\"就可以为索引\",{\"1\":{\"3196\":1}}],[\"就可以为数组元素赋值了\",{\"1\":{\"1235\":1}}],[\"就可以向索引\",{\"1\":{\"3132\":1}}],[\"就可以实现一次会话中多次请求之间的数据共享了\",{\"1\":{\"3061\":1}}],[\"就可以实现session域了\",{\"1\":{\"2923\":1}}],[\"就可以启动了\",{\"1\":{\"2760\":1}}],[\"就可以看到页面了\",{\"1\":{\"2758\":1}}],[\"就可以再创建一个tomcat模板了\",{\"1\":{\"2753\":1}}],[\"就可以采用构造器引用\",{\"1\":{\"2417\":1}}],[\"就可以认为告诉了表达式要用后面的方法替代接口中的方法\",{\"1\":{\"2399\":1}}],[\"就可以恢复成原来的java对象\",{\"1\":{\"2144\":1}}],[\"就可以确定他的数据类型了\",{\"1\":{\"1946\":1}}],[\"就可以解决该问题\",{\"1\":{\"1694\":1}}],[\"就可以抛出到调用处进行处理\",{\"1\":{\"1609\":1}}],[\"就可以用来处理get和post请求的业务逻辑\",{\"1\":{\"2814\":1}}],[\"就可以用\",{\"1\":{\"1586\":1}}],[\"就可以只修改getxxx内的代码逻辑即可\",{\"1\":{\"1534\":1}}],[\"就可以得到多重继承的效果\",{\"1\":{\"1504\":1}}],[\"就可以被继承\",{\"1\":{\"1454\":1}}],[\"就可以调用类中的方法\",{\"1\":{\"1437\":1}}],[\"就可以调用实例的compareto方法进行比较了\",{\"1\":{\"744\":1}}],[\"就可以通过调用这些方法来实现\",{\"1\":{\"1368\":1}}],[\"就可以直接连接上\",{\"1\":{\"3570\":1}}],[\"就可以直接实例化包中其他类\",{\"1\":{\"1335\":1}}],[\"就可以直接执行了\",{\"1\":{\"237\":1}}],[\"就可以使用代理对象取代源对象了\",{\"1\":{\"2333\":1}}],[\"就可以使用\",{\"1\":{\"1259\":1}}],[\"就可以使用springboot进行开发了\",{\"1\":{\"108\":1}}],[\"就可以配置bean的各种属性了\",{\"1\":{\"527\":1}}],[\"就可以决定方法return的数据是否缓存\",{\"1\":{\"468\":1}}],[\"就可以动态获取配置的数据了\",{\"1\":{\"200\":1}}],[\"就可以查看该文件\",{\"1\":{\"118\":1}}],[\"就可以上线项目\",{\"1\":{\"38\":1}}],[\"就创建他有关的快捷笔记\",{\"1\":{\"1\":1}}],[\"分成适合于\",{\"1\":{\"3462\":1}}],[\"分词结果\",{\"1\":{\"3476\":1,\"3485\":1,\"3489\":1}}],[\"分词和标准化的过程称为分析\",{\"1\":{\"3437\":1}}],[\"分词时覆盖度和准确度都是需要考虑的\",{\"1\":{\"3435\":1}}],[\"分词器里仅支持日常基本词汇\",{\"1\":{\"3484\":1}}],[\"分词器\",{\"0\":{\"3437\":1,\"3477\":1,\"3478\":1},\"1\":{\"3197\":1,\"3464\":2}}],[\"分组\",{\"1\":{\"3248\":1}}],[\"分片集群环境\",{\"0\":{\"3730\":1}}],[\"分片集群\",{\"0\":{\"3648\":1,\"3691\":1}}],[\"分片容量\",{\"1\":{\"3508\":1}}],[\"分片的代价\",{\"0\":{\"3507\":1}}],[\"分片的部署\",{\"0\":{\"3366\":1}}],[\"分片设计为es提供了高可用和高并发的特性\",{\"1\":{\"3506\":1}}],[\"分片策略\",{\"0\":{\"3506\":1}}],[\"分片控制简介\",{\"0\":{\"3403\":1}}],[\"分片控制\",{\"0\":{\"3398\":1}}],[\"分片是有硬件损耗的\",{\"1\":{\"3507\":1}}],[\"分片是\",{\"1\":{\"3438\":1}}],[\"分片是一个功能完整的搜索引擎\",{\"1\":{\"3392\":1}}],[\"分片是否失败\",{\"1\":{\"3135\":1}}],[\"分片是否成功\",{\"1\":{\"3135\":1}}],[\"分片数量3\",{\"1\":{\"3381\":1}}],[\"分片数\",{\"1\":{\"3373\":1}}],[\"分片和复制的数量可以在索引创建的时候指定\",{\"1\":{\"3369\":1}}],[\"分片与索引\",{\"0\":{\"3367\":1}}],[\"分片很重要\",{\"1\":{\"3365\":1}}],[\"分片总数\",{\"1\":{\"3135\":1}}],[\"分片\",{\"0\":{\"3365\":1},\"1\":{\"3135\":1,\"3373\":1,\"3391\":1,\"3410\":1}}],[\"分片操作结果\",{\"1\":{\"3119\":1}}],[\"分片信息都是0\",{\"1\":{\"3378\":1}}],[\"分片信息\",{\"1\":{\"428\":1,\"429\":1}}],[\"分析查询性能\",{\"1\":{\"3632\":1}}],[\"分析的结果\",{\"1\":{\"3473\":1}}],[\"分析结果\",{\"1\":{\"3466\":1,\"3467\":1,\"3468\":1,\"3469\":1}}],[\"分析是由es中的分词器完成的\",{\"1\":{\"3437\":1}}],[\"分析集群的情况\",{\"1\":{\"3384\":1}}],[\"分析集群情况\",{\"0\":{\"3382\":1}}],[\"分析器使用场景\",{\"0\":{\"3470\":1}}],[\"分析器就是用来做文档分析的\",{\"1\":{\"3464\":1}}],[\"分析器介绍\",{\"0\":{\"3464\":1}}],[\"分析器\",{\"0\":{\"3463\":1},\"1\":{\"3364\":1}}],[\"分析处理\",{\"1\":{\"3094\":1}}],[\"分析和可视化\",{\"1\":{\"3090\":1}}],[\"分析\",{\"0\":{\"3384\":1},\"1\":{\"2911\":1}}],[\"分析哪些属性不因对象的不同而改变\",{\"1\":{\"1472\":1}}],[\"分开\",{\"1\":{\"2181\":1}}],[\"分配新的主分片\",{\"1\":{\"3532\":1}}],[\"分配\",{\"0\":{\"3371\":1}}],[\"分配内存并\",{\"1\":{\"2275\":1}}],[\"分配给用户进程或应用程序\",{\"1\":{\"2186\":1}}],[\"分配了相应资源\",{\"1\":{\"1786\":1}}],[\"分配空间\",{\"1\":{\"1211\":1,\"1218\":1,\"1227\":1}}],[\"分别表示四个范围\",{\"1\":{\"2919\":1}}],[\"分别测试使用节点流和缓冲流进行文件的测试\",{\"1\":{\"2086\":1}}],[\"分别实现抽象方法\",{\"1\":{\"1628\":1}}],[\"分别是请求方式\",{\"1\":{\"2844\":1}}],[\"分别是\",{\"1\":{\"35\":1,\"292\":1,\"1656\":1,\"3006\":1}}],[\"分为单个的词条\",{\"1\":{\"3464\":1}}],[\"分为两种修改方式\",{\"1\":{\"3143\":1}}],[\"分为4个阶段\",{\"1\":{\"2792\":1}}],[\"分为6中情况\",{\"1\":{\"2367\":1}}],[\"分为\",{\"1\":{\"1571\":1,\"3105\":1}}],[\"分为有返回值的和没返回值的\",{\"1\":{\"1277\":1}}],[\"分支\",{\"1\":{\"1167\":1}}],[\"分支结构\",{\"1\":{\"1165\":1}}],[\"分布式集群\",{\"0\":{\"3372\":1}}],[\"分布式\",{\"0\":{\"3093\":1},\"1\":{\"614\":1}}],[\"分页列表查询\",{\"0\":{\"3610\":1}}],[\"分页公式\",{\"1\":{\"3182\":1,\"3241\":1}}],[\"分页等\",{\"1\":{\"2435\":1}}],[\"分页相关的拦截器\",{\"1\":{\"626\":1}}],[\"分页功能\",{\"0\":{\"625\":1}}],[\"分页\",{\"0\":{\"3181\":1,\"3241\":1},\"1\":{\"614\":1}}],[\"分页查询\",{\"1\":{\"410\":1,\"3231\":1,\"3242\":1,\"3610\":1}}],[\"分\",{\"1\":{\"501\":1,\"717\":1}}],[\"分钟时\",{\"1\":{\"3517\":1}}],[\"分钟\",{\"1\":{\"501\":1,\"3527\":1}}],[\"分文件存储就要为每个文件设置动态有序的文件名\",{\"1\":{\"303\":1}}],[\"分类方式2\",{\"0\":{\"2182\":1}}],[\"分类方式1\",{\"0\":{\"2181\":1}}],[\"分类\",{\"0\":{\"1451\":1,\"1526\":1},\"1\":{\"1250\":1}}],[\"分类记录\",{\"1\":{\"303\":1}}],[\"分类管理\",{\"1\":{\"54\":1}}],[\"分隔符常量\",{\"0\":{\"2013\":1}}],[\"分隔\",{\"1\":{\"256\":1,\"1625\":1}}],[\"分割各个环境\",{\"1\":{\"272\":1}}],[\"分割\",{\"1\":{\"210\":1}}],[\"分工\",{\"1\":{\"33\":1}}],[\"这返回true\",{\"1\":{\"3582\":1}}],[\"这非常危险\",{\"1\":{\"3570\":1}}],[\"这不符合我们的预期\",{\"1\":{\"3485\":1}}],[\"这不是强制性的重写\",{\"1\":{\"1521\":1}}],[\"这基本毫无意义\",{\"1\":{\"3476\":1}}],[\"这会给用户产生困惑\",{\"1\":{\"3452\":1}}],[\"这会简化标注在方法参数上的注解\",{\"1\":{\"1665\":1}}],[\"这提供了很大的性能提升\",{\"1\":{\"3441\":1}}],[\"这表示每个节点的硬件资源\",{\"1\":{\"3391\":1}}],[\"这表明该list只能保存字符串类型的对象\",{\"1\":{\"1948\":1}}],[\"这只能在云平台的安全组中进行设置\",{\"1\":{\"3349\":1}}],[\"这只是基本的处理过程\",{\"1\":{\"2831\":1}}],[\"这只是构造方法之一\",{\"1\":{\"886\":1,\"1007\":1}}],[\"这俩目录会在首次启动es时\",{\"1\":{\"3321\":1}}],[\"这俩目录都会自动创建\",{\"1\":{\"3290\":1}}],[\"这步骤用来确定哪些节点参与第一次的主节点选举\",{\"1\":{\"3268\":1}}],[\"这多个请求可能来自多个浏览器\",{\"1\":{\"3035\":1}}],[\"这行是固定格式\",{\"1\":{\"3030\":1}}],[\"这两部分\",{\"1\":{\"3526\":1}}],[\"这两种模式的分词结果是不一样的\",{\"1\":{\"3481\":1}}],[\"这两种方式获取的是同一个对象\",{\"1\":{\"2930\":1}}],[\"这两款都是基于\",{\"1\":{\"3092\":1}}],[\"这两个复制是同时进行的\",{\"1\":{\"3444\":1}}],[\"这两个技术都可以实现会话跟踪\",{\"1\":{\"3037\":1}}],[\"这两个对象都是servlet接口中\",{\"1\":{\"2830\":1}}],[\"这两个流都是用来操作文本文件的\",{\"1\":{\"2092\":1}}],[\"这整个过程就叫重定向\",{\"1\":{\"2906\":1}}],[\"这意味着主数据库的所有更改发生时都需要被复制到\",{\"1\":{\"3498\":1}}],[\"这意味着这些复制请求被并行发送\",{\"1\":{\"3496\":1}}],[\"这意味着当集群内任何一个节点出现问题时\",{\"1\":{\"3388\":1}}],[\"这意味着\",{\"1\":{\"3261\":1,\"3370\":1}}],[\"这意味着他们会等到需要结果的时候才执行\",{\"1\":{\"2441\":1}}],[\"这意味着所有任务实际上都是串行执行\",{\"1\":{\"494\":1}}],[\"这套api的操作跟sql里的操作类似\",{\"1\":{\"2435\":1}}],[\"这造成了很大的麻烦\",{\"1\":{\"1989\":1}}],[\"这比较a与元素b的hash值\",{\"1\":{\"1891\":1}}],[\"这使得元素看起来是以插入顺序保存的记录了一个双向链表\",{\"1\":{\"1902\":1}}],[\"这使得元素看起来是以插入顺序保存的\",{\"1\":{\"1886\":1}}],[\"这三个方法的参数都是包含查询条件的querybuilders对象\",{\"1\":{\"3230\":1}}],[\"这三个方法只有在synchronized方法或synchronized代码块中才能使用\",{\"1\":{\"1799\":1}}],[\"这三个遍历是并列的\",{\"1\":{\"1722\":1}}],[\"这三个类无法直接new实例化\",{\"1\":{\"717\":1}}],[\"这三个类类似于calendar\",{\"1\":{\"712\":1}}],[\"这说明\",{\"1\":{\"1722\":1}}],[\"这条线程被称为主线程或\",{\"1\":{\"1687\":1}}],[\"这几个方法是递进关系执行的\",{\"1\":{\"1603\":1}}],[\"这称为\",{\"1\":{\"1407\":2}}],[\"这点和c语言不同\",{\"1\":{\"1108\":1}}],[\"这跟fload表示数据的方式有关\",{\"1\":{\"1097\":1}}],[\"这也就意味着\",{\"1\":{\"2996\":1}}],[\"这也就是为什么表示一位数字的正则表达式是\",{\"1\":{\"985\":1}}],[\"这也是为什么框架中会大量的使用反射\",{\"1\":{\"2251\":1}}],[\"这也是为什么set集合是无序的原因\",{\"1\":{\"1890\":1}}],[\"这也是为什么有观点认为private成员是无法继承的\",{\"1\":{\"1367\":1}}],[\"这也是为什么有观点认为private成员能继承\",{\"1\":{\"1367\":1}}],[\"这也意味着\",{\"1\":{\"1679\":1}}],[\"这也体现出springboot技术的优点\",{\"1\":{\"475\":1}}],[\"这时启动一个节点\",{\"1\":{\"3261\":1}}],[\"这时使用列名作为类的属性名就会报错\",{\"1\":{\"2602\":1}}],[\"这时将会有多个线程进来\",{\"1\":{\"1769\":1}}],[\"这时就产生了线程安全问题\",{\"1\":{\"1754\":1}}],[\"这时可以把不确定的部分暴露出去\",{\"1\":{\"1498\":1}}],[\"这时系统才会分配内存空间给对象\",{\"1\":{\"1471\":1}}],[\"这时需要将数据库对象传入getusers方法然后用数据库对象连接数据库进行操作\",{\"1\":{\"1401\":1}}],[\"这时候如果子类没有使用super显式的调用父类中的非空参构造器\",{\"1\":{\"1388\":1}}],[\"这时候更新下配置文件即可\",{\"1\":{\"266\":1}}],[\"这时上面的需求被实现了\",{\"1\":{\"1293\":1}}],[\"这时如果将数组中的字符全部取下来\",{\"1\":{\"817\":1,\"2056\":1}}],[\"这时\",{\"1\":{\"783\":1}}],[\"这时因为bigdecimal默认的舍入策略是精准模式\",{\"1\":{\"782\":1}}],[\"这次要反向进行排序\",{\"1\":{\"757\":1}}],[\"这其实也是实例化instant类的一种方式\",{\"1\":{\"727\":1}}],[\"这可能被用来记录应用程序中的事件时间戳\",{\"1\":{\"723\":1}}],[\"这很酷\",{\"1\":{\"559\":1}}],[\"这没有影响\",{\"1\":{\"545\":1}}],[\"这类数据没必要储存到数据库\",{\"1\":{\"463\":1}}],[\"这类的配置文件\",{\"1\":{\"142\":1}}],[\"这是非常危险的\",{\"1\":{\"3692\":1}}],[\"这是无法正常连接的\",{\"1\":{\"3678\":1}}],[\"这是为系统集合保留的前缀\",{\"1\":{\"3581\":1}}],[\"这是为传输而设计的编码\",{\"1\":{\"2111\":1}}],[\"这是\",{\"1\":{\"3574\":1}}],[\"这是可能会导致数据丢失\",{\"1\":{\"3455\":1}}],[\"这是官方推荐的方式\",{\"1\":{\"3324\":1}}],[\"这是启动的第一个节点\",{\"1\":{\"3278\":1}}],[\"这是我们要的值\",{\"1\":{\"3249\":1}}],[\"这是主要用途\",{\"1\":{\"3017\":1}}],[\"这是其他文件做不到的\",{\"1\":{\"2983\":1}}],[\"这是servlet的最核心方法\",{\"1\":{\"2801\":1}}],[\"这是因为某些系统生成的集合中包含该字符\",{\"1\":{\"3581\":1}}],[\"这是因为es版本与springboot版本不兼容\",{\"1\":{\"3222\":1}}],[\"这是因为\",{\"1\":{\"2244\":1,\"2365\":1}}],[\"这是写编译器需要做的\",{\"1\":{\"1703\":1}}],[\"这是不符合常理且危险的\",{\"1\":{\"1303\":1}}],[\"这是jdk5\",{\"1\":{\"1295\":1}}],[\"这是一个最常用的类之一\",{\"1\":{\"716\":1}}],[\"这是该怎么办呢\",{\"1\":{\"255\":1}}],[\"这是maven部分的内容\",{\"1\":{\"167\":1}}],[\"这一步不要再做了\",{\"1\":{\"3296\":1,\"3297\":1,\"3298\":1,\"3299\":1}}],[\"这一步非常重要\",{\"1\":{\"3265\":1}}],[\"这一方装载并注册jdbc驱动程序\",{\"1\":{\"2682\":1}}],[\"这一类方法不仅能在connection\",{\"1\":{\"2682\":1}}],[\"这一类文件受开发者影响\",{\"1\":{\"181\":1}}],[\"这一项可配可不配\",{\"1\":{\"2674\":1}}],[\"这一机制允许多条语句一次性提交给数据库批量处理\",{\"1\":{\"2614\":1}}],[\"这一般是由于共享的日志文件一直处于打开状态\",{\"1\":{\"1491\":1}}],[\"这一块临时存储数据的区域就是缓存\",{\"1\":{\"462\":1}}],[\"这一段配置千万不能删除\",{\"1\":{\"239\":1}}],[\"这太麻烦了\",{\"1\":{\"230\":1}}],[\"这就保证了我们既可以从主分片又可以从副本分片上获得文档\",{\"1\":{\"3388\":1}}],[\"这就叫做映射\",{\"1\":{\"3195\":1}}],[\"这就意味着jar包是跨平台的\",{\"1\":{\"2982\":1}}],[\"这就不够灵活了\",{\"1\":{\"2381\":1}}],[\"这就形成了死锁\",{\"1\":{\"1796\":1}}],[\"这就使得线程间通信更简便\",{\"1\":{\"1687\":1}}],[\"这就需要用到日志\",{\"1\":{\"313\":1}}],[\"这就需要额外设置一个程序\",{\"1\":{\"180\":1}}],[\"这就是为什么我们说\",{\"1\":{\"3450\":1}}],[\"这就是为什么这个jar包能独立运行的原因\",{\"1\":{\"247\":1}}],[\"这就是所谓的\",{\"1\":{\"2365\":1}}],[\"这就是编码表\",{\"1\":{\"2108\":1}}],[\"这就是异常的意义\",{\"1\":{\"1563\":1}}],[\"这就是一种模板模式\",{\"1\":{\"1498\":1}}],[\"这就是封装性的设计思想\",{\"1\":{\"1301\":1}}],[\"这就是yml配置文件的工作原理\",{\"1\":{\"556\":1}}],[\"这就是管理服务\",{\"1\":{\"313\":1}}],[\"这就是第二个要监控的重要指标\",{\"1\":{\"313\":1}}],[\"这就是多环境\",{\"1\":{\"269\":1}}],[\"这就完成了一次热部署的过程\",{\"1\":{\"183\":1}}],[\"这样外网是访问不到的\",{\"1\":{\"3693\":1}}],[\"这样还可以有效地减少段刷新次数\",{\"1\":{\"3516\":1}}],[\"这样会导致短时间内的段数量暴增\",{\"1\":{\"3456\":1}}],[\"这样最近的变化便可以被检索到\",{\"1\":{\"3440\":1}}],[\"这样遍历的索引结构效率低下\",{\"1\":{\"3423\":1}}],[\"这样依次从文档中去查找是否含有关键词的方法叫做正向索引\",{\"1\":{\"3420\":1}}],[\"这样的话就非常麻烦\",{\"1\":{\"3442\":1}}],[\"这样的话每个索引总共就有\",{\"1\":{\"3370\":1}}],[\"这样的好处是可以提高查询速度\",{\"1\":{\"3360\":1}}],[\"这样的方式将会消耗大量的资源和时间\",{\"1\":{\"2662\":1}}],[\"这样的方法调用在编译期是无法确定的\",{\"1\":{\"1404\":1}}],[\"这样方便配置忽略安全检测\",{\"1\":{\"3277\":1}}],[\"这样配置文件中跟安全有关的配置就会显示出来\",{\"1\":{\"3277\":1}}],[\"这样配置sql语句会打印\",{\"1\":{\"308\":1}}],[\"这样只需要将过半的节点启动就可以了\",{\"1\":{\"3275\":1}}],[\"这样他人在拿到我们提供的jar之后\",{\"1\":{\"2986\":1}}],[\"这样代码在编写的时候就相对来说更加简单快捷\",{\"1\":{\"2814\":1}}],[\"这样以后就不用输入项目目录\",{\"1\":{\"2749\":1}}],[\"这样这些列仍然是只读的\",{\"1\":{\"2593\":1}}],[\"这样这两个注解就被关联起来了\",{\"1\":{\"1668\":1}}],[\"这样java程序的移植性更高\",{\"1\":{\"2530\":1}}],[\"这样就能查询到\",{\"1\":{\"3436\":1}}],[\"这样就让文档转换为由单词序列构成的数据流\",{\"1\":{\"3432\":1}}],[\"这样就可以查询索引内所有的文档了\",{\"1\":{\"3228\":1}}],[\"这样就可以显示全世界上所有文化的字符了\",{\"1\":{\"2111\":1}}],[\"这样就使得程序员无需对特定的数据库系统的特点有过多的了解\",{\"1\":{\"2527\":1}}],[\"这样做可以检查它是否是一个函数式接口\",{\"1\":{\"2387\":1}}],[\"这样做spring容器中东西不用全部重新加载一遍\",{\"1\":{\"180\":1}}],[\"这样一来程序开发中必然产生过多的代理\",{\"1\":{\"2322\":1}}],[\"这样当前程序就可以读取网络资源数据\",{\"1\":{\"2244\":1}}],[\"这样当前服务器就可以监控多个客户端程序了\",{\"1\":{\"327\":1}}],[\"这样不同的主机可以互相区分\",{\"1\":{\"2244\":1}}],[\"这样在实际使用时\",{\"1\":{\"1946\":1}}],[\"这样在后台就可以看见非常\",{\"1\":{\"300\":1}}],[\"这样什么类型的数据都支持\",{\"1\":{\"1946\":1}}],[\"这样\",{\"1\":{\"1890\":1,\"2325\":1,\"2983\":1}}],[\"这样两个进程相互无休止地等待下去\",{\"1\":{\"1790\":1}}],[\"这样很多其他代码都会受到牵连\",{\"1\":{\"1534\":1}}],[\"这样才能和主机建立连接\",{\"1\":{\"2184\":1}}],[\"这样才能转\",{\"1\":{\"1414\":1}}],[\"这样才能开启sprigmvc\",{\"1\":{\"163\":1,\"319\":1}}],[\"这样编译时才能加载子类\",{\"1\":{\"1414\":1}}],[\"这样造成了很大的冗余\",{\"1\":{\"1400\":1}}],[\"这样我们就可以向一个函数传递参数时\",{\"1\":{\"1398\":1}}],[\"这样是可以的\",{\"1\":{\"1354\":1}}],[\"这样计算机运算的设计就更简单了\",{\"1\":{\"1121\":1}}],[\"这样key就是动态的了\",{\"1\":{\"468\":1}}],[\"这样即可构造连续执行的顺序消息队列\",{\"1\":{\"455\":1}}],[\"这样整体性能就大受影响\",{\"1\":{\"382\":1}}],[\"这样测试类就再次有效了\",{\"1\":{\"229\":1}}],[\"这种扫描全集合的查询效率是非常低的\",{\"1\":{\"3617\":1}}],[\"这种格式的优点是灵活性高\",{\"1\":{\"3547\":1}}],[\"这种方法被关系型数据库广泛使用\",{\"1\":{\"3495\":1}}],[\"这种方式可以用相对较低的成本将新文档添加到索引\",{\"1\":{\"3445\":1}}],[\"这种方式可以省去定义太多成员变量\",{\"1\":{\"152\":1}}],[\"这种方式是最佳的方案\",{\"1\":{\"3427\":1}}],[\"这种方式非常的低效\",{\"1\":{\"3427\":1}}],[\"这种方式非常麻烦\",{\"1\":{\"517\":1}}],[\"这种方式注册bean开发时基本不用\",{\"1\":{\"522\":1}}],[\"这种方式注册bean开发时不用用到\",{\"1\":{\"520\":1}}],[\"这种同义词\",{\"1\":{\"3464\":1}}],[\"这种检索方式就是\",{\"1\":{\"3175\":1}}],[\"这种情况很常见\",{\"1\":{\"2861\":1}}],[\"这种情况选择file\",{\"1\":{\"166\":1}}],[\"这种开发不能控制被创建的连接对象数\",{\"1\":{\"2662\":1}}],[\"这种模式开发\",{\"0\":{\"2662\":1}}],[\"这种上锁的方式保证了线程的安全性\",{\"1\":{\"1771\":1}}],[\"这种对象过多\",{\"1\":{\"1705\":1}}],[\"这种将程序输入输出\",{\"1\":{\"1537\":1}}],[\"这种javabean用于实现业务逻辑\",{\"1\":{\"1533\":1}}],[\"这种javabean也被叫做实体类\",{\"1\":{\"1533\":1}}],[\"这种抽象类中只包含常量和方法的定义\",{\"1\":{\"1502\":1}}],[\"这种步骤中不确定\",{\"1\":{\"1500\":1}}],[\"这种观点认为\",{\"1\":{\"1366\":1}}],[\"这种写法是错误的\",{\"1\":{\"1149\":1}}],[\"这种排序被称为类的自然排序\",{\"1\":{\"743\":1}}],[\"这种声明方式会在所修饰的类被使用时加载bean\",{\"1\":{\"554\":1}}],[\"这种控制方式就是编程式bean加载控制\",{\"1\":{\"534\":1}}],[\"这种配置方式和我们现在学习的完全不一样\",{\"1\":{\"268\":1}}],[\"这里以ik\",{\"1\":{\"3484\":1}}],[\"这里选择standard\",{\"1\":{\"3473\":1}}],[\"这里选择官方推出的可以操作es8\",{\"1\":{\"413\":1}}],[\"这里假设是node\",{\"1\":{\"3407\":1}}],[\"这里进行了重复的列出\",{\"1\":{\"3316\":1}}],[\"这里进行全量查询\",{\"1\":{\"3233\":1,\"3234\":1,\"3242\":1,\"3244\":1}}],[\"这里暂密码暂定为es\",{\"1\":{\"3291\":1,\"3322\":1}}],[\"这里暂时不做深入的研究了\",{\"1\":{\"557\":1}}],[\"这里仅包含\",{\"1\":{\"3316\":1}}],[\"这里仅做测试\",{\"1\":{\"3262\":1}}],[\"这里仅作了解\",{\"1\":{\"491\":1}}],[\"这里指的是局部修改\",{\"1\":{\"3217\":1,\"3225\":1}}],[\"这里指的是手动读取配置项\",{\"1\":{\"151\":1}}],[\"这里创建了一个javabean\",{\"1\":{\"3215\":1}}],[\"这里都列出来\",{\"1\":{\"3201\":1}}],[\"这里都生效\",{\"1\":{\"211\":1}}],[\"这里由true改为false\",{\"1\":{\"3110\":2}}],[\"这里\",{\"1\":{\"3102\":1}}],[\"这里说到的全文搜索引擎指的是目前广泛应用的主流搜索引擎\",{\"1\":{\"3099\":1}}],[\"这里说的任务系统指的是定时任务\",{\"1\":{\"490\":1}}],[\"这里来通过继承原始的servlet类\",{\"1\":{\"2814\":1}}],[\"这里使用的是本地之前下载的tomcat\",{\"1\":{\"2745\":1}}],[\"这里主要指的批量操作是\",{\"1\":{\"2614\":1}}],[\"这里用到了上章定义的jdbcutils\",{\"1\":{\"2597\":1}}],[\"这里就有三个问题\",{\"1\":{\"2111\":1}}],[\"这里就不一一列举了\",{\"1\":{\"542\":1}}],[\"这里就不创建controller了\",{\"1\":{\"366\":1}}],[\"这里省去了类型强转\",{\"1\":{\"1958\":1}}],[\"这里通过将runnable接口的实例作为参数传入thread类中\",{\"1\":{\"1740\":1}}],[\"这里通过三目运算\",{\"1\":{\"554\":1}}],[\"这里将异常抛出到调用处\",{\"1\":{\"1600\":1}}],[\"这里开始处理异常\",{\"1\":{\"1600\":1}}],[\"这里再抛就到虚拟机了\",{\"1\":{\"1600\":1}}],[\"这里出现了异常\",{\"1\":{\"1587\":1}}],[\"这里出问题了\",{\"1\":{\"1587\":1}}],[\"这里写代码\",{\"1\":{\"1525\":2}}],[\"这里变成了在方法中调用构造器\",{\"1\":{\"1489\":1}}],[\"这里执行①就停止了\",{\"1\":{\"1383\":1}}],[\"这里不赋值\",{\"1\":{\"1354\":1}}],[\"这里不用纠结\",{\"1\":{\"96\":1}}],[\"这里常使用很多html标签\",{\"1\":{\"1059\":1}}],[\"这里还是需要指定正则表达式\",{\"1\":{\"1000\":1}}],[\"这里介绍的是正则相关的java内置api\",{\"1\":{\"983\":1}}],[\"这里所有的例子均以hashmap为例\",{\"1\":{\"955\":1}}],[\"这里所有案例均以arraylist为例\",{\"1\":{\"943\":1}}],[\"这里会报异常\",{\"1\":{\"897\":1}}],[\"这里要重写抽象方法\",{\"1\":{\"1463\":1}}],[\"这里要用integer而非int\",{\"1\":{\"893\":1}}],[\"这里要获取cat和mouse对象的属性\",{\"1\":{\"550\":1}}],[\"这里获取的不是底层char\",{\"1\":{\"697\":1}}],[\"这里什么都不用写\",{\"1\":{\"622\":1}}],[\"这里采用openssl生成密码文件\",{\"1\":{\"3726\":1}}],[\"这里采用的是二分法\",{\"1\":{\"894\":1}}],[\"这里采用的是idea里的spring\",{\"1\":{\"94\":1}}],[\"这里采用自己下载的maven\",{\"1\":{\"574\":1}}],[\"这里采用importselector接口的方式控制\",{\"1\":{\"536\":1}}],[\"这里可以直接指定泛型类型\",{\"1\":{\"1957\":1}}],[\"这里可以将异常信息再次throws到调用处\",{\"1\":{\"1609\":1}}],[\"这里可以定义n个方法用来加载第三方bean\",{\"1\":{\"513\":1}}],[\"这里可以选择项目所需的一些依赖\",{\"1\":{\"96\":1}}],[\"这里直接回车\",{\"1\":{\"3298\":1}}],[\"这里直接手写json字符串\",{\"1\":{\"3220\":1}}],[\"这里直接把异常抛出了\",{\"1\":{\"2106\":1}}],[\"这里直接用泛型限制了\",{\"1\":{\"749\":1}}],[\"这里直接在springboot启动类中调用cartooncatandmouse类\",{\"1\":{\"555\":1}}],[\"这里直接注入他\",{\"1\":{\"554\":1}}],[\"这里直接定义成空类就ok\",{\"1\":{\"513\":1}}],[\"这里直接返回4位随机数\",{\"1\":{\"472\":1}}],[\"这里做一个总结\",{\"1\":{\"504\":1}}],[\"这里是多条插入语句\",{\"1\":{\"3592\":1}}],[\"这里是多行注释\",{\"1\":{\"1055\":1}}],[\"这里是过滤器主要操作的内容\",{\"1\":{\"2945\":1}}],[\"这里是继承httpservlet\",{\"1\":{\"2810\":1}}],[\"这里是byte\",{\"1\":{\"2071\":1}}],[\"这里是mysql\",{\"1\":{\"1401\":1}}],[\"这里是单行注释\",{\"1\":{\"1054\":1}}],[\"这里是字符长度\",{\"1\":{\"651\":1}}],[\"这里是用实体类接收参数的\",{\"1\":{\"473\":1}}],[\"这里是根据日志的级别来设置的\",{\"1\":{\"292\":1}}],[\"这里的端口是transport\",{\"1\":{\"3269\":1,\"3270\":1,\"3271\":1}}],[\"这里的路径指的是部署到\",{\"1\":{\"2939\":1}}],[\"这里的写是覆盖写\",{\"1\":{\"2137\":1}}],[\"这里的大指的是表示的数据范围大小\",{\"1\":{\"1112\":1}}],[\"这里的字符是任意语言的一个字\",{\"1\":{\"1100\":1}}],[\"这里的文件名是完整的文件名\",{\"1\":{\"807\":1}}],[\"这里的长度值得是存入stringbuffer的字符数量count\",{\"1\":{\"699\":1}}],[\"这里的修改是新创建了个一个字符串并返回\",{\"1\":{\"664\":1}}],[\"这里的redis是常规的redis配置\",{\"1\":{\"483\":1}}],[\"这里的连接es的代码仅针对elasticsearch8\",{\"1\":{\"415\":1}}],[\"这里的监控是基本的\",{\"1\":{\"310\":1}}],[\"这里列出了所有客户端暴漏的api\",{\"1\":{\"337\":1}}],[\"这里只介绍一下配置\",{\"1\":{\"2752\":1}}],[\"这里只介绍简单的命令行\",{\"1\":{\"885\":1,\"1006\":1}}],[\"这里只是为了演示集群的原理\",{\"1\":{\"3377\":1}}],[\"这里只是springboot利用redis替代simple作为缓存实现\",{\"1\":{\"481\":1}}],[\"这里只是日志配置\",{\"1\":{\"335\":1}}],[\"这里只需要几个starter就搞定了\",{\"1\":{\"124\":1}}],[\"这里展示的是spring配置属性\",{\"1\":{\"333\":1}}],[\"这个集合是隐藏的\",{\"1\":{\"3712\":1}}],[\"这个字符用来表示键的结尾\",{\"1\":{\"3593\":1}}],[\"这个字符表示集合名的结尾\",{\"1\":{\"3581\":1}}],[\"这个用户自动继承所有数据库的权限\",{\"1\":{\"3574\":1}}],[\"这个用户是超级用户\",{\"1\":{\"3329\":1}}],[\"这个从\",{\"1\":{\"3527\":1}}],[\"这个指针在\",{\"1\":{\"3504\":1}}],[\"这个指令是用来结合css控制标签的样式的\",{\"1\":{\"3020\":1}}],[\"这个返回结果是符合预期的\",{\"1\":{\"3480\":1}}],[\"这个分词器可以提取英语单词的\",{\"1\":{\"3469\":1}}],[\"这个分布在\",{\"1\":{\"3400\":1}}],[\"这个搜索过程就称为\",{\"1\":{\"3445\":1}}],[\"这个表格展示了更加复杂的倒排索引\",{\"1\":{\"3433\":1}}],[\"这个文件即被称之为倒排文件\",{\"1\":{\"3431\":1}}],[\"这个文件存放在spring\",{\"1\":{\"120\":1}}],[\"这个关键字\",{\"1\":{\"3426\":1}}],[\"这个提升主分片的过程是瞬间发生的\",{\"1\":{\"3396\":1}}],[\"这个\",{\"1\":{\"3365\":1,\"3446\":1}}],[\"这个名字对于管理工作来说挺重要的\",{\"1\":{\"3261\":1}}],[\"这个名字会在启动的时候赋予节点\",{\"1\":{\"3261\":1}}],[\"这个名字是一个随机的漫威漫画角色的名字\",{\"1\":{\"3261\":1}}],[\"这个名字是重要的\",{\"1\":{\"3260\":1}}],[\"这个名字是可以修改的\",{\"1\":{\"265\":1}}],[\"这个名字默认就是\",{\"1\":{\"3260\":1}}],[\"这个技术栈能够安全可靠地获取任何来源\",{\"1\":{\"3090\":1}}],[\"这个过程叫做\",{\"1\":{\"3527\":1}}],[\"这个过程可能会改变词条\",{\"1\":{\"3464\":1}}],[\"这个过程是由\",{\"1\":{\"3371\":1}}],[\"这个过程类似于通过字典中的检索字表查字的过程\",{\"1\":{\"3100\":1}}],[\"这个过程就是会话跟踪\",{\"1\":{\"3035\":1}}],[\"这个过程将一直继续下去\",{\"1\":{\"1599\":1}}],[\"这个已经基本被json取代了\",{\"1\":{\"3017\":1}}],[\"这个包就会自动解压\",{\"1\":{\"2995\":1}}],[\"这个包里面其实就是开发者手写的类\",{\"1\":{\"566\":1}}],[\"这个监听器就实现了servletcontextlistener接口\",{\"1\":{\"2970\":1}}],[\"这个规则\",{\"1\":{\"2771\":1}}],[\"这个逻辑性就是由java代码控制的\",{\"1\":{\"2771\":1}}],[\"这个版本开始\",{\"1\":{\"2351\":1}}],[\"这个增强逻辑\",{\"1\":{\"2333\":1}}],[\"这个加载的过程需要类加载器参与\",{\"1\":{\"2274\":1}}],[\"这个对象就是httpsession\",{\"1\":{\"3060\":1}}],[\"这个对象就像一面镜子\",{\"1\":{\"2248\":1}}],[\"这个对象就包含了完整的类的结构信息\",{\"1\":{\"2248\":1}}],[\"这个连接提供了一个安全的数据传输通道\",{\"1\":{\"2244\":1}}],[\"这个socket对象就是客户端的socket对象\",{\"1\":{\"2224\":1}}],[\"这个方法过于繁琐\",{\"1\":{\"2650\":1}}],[\"这个方法立面再加一层if判断\",{\"1\":{\"1770\":1}}],[\"这个方法将被结束\",{\"1\":{\"1196\":1}}],[\"这个内存地址一般是直接存在于代码段中\",{\"1\":{\"1703\":1}}],[\"这个类也需要能序列化\",{\"1\":{\"2153\":1}}],[\"这个类型参数将在使用时\",{\"1\":{\"1948\":1}}],[\"这个类型参数叫做泛型\",{\"1\":{\"1947\":1}}],[\"这个类就是枚举类\",{\"1\":{\"1616\":1}}],[\"这个类叫做抽象类\",{\"1\":{\"1494\":1}}],[\"这个写法不推荐\",{\"1\":{\"1295\":1}}],[\"这个默认值跟数组中元素的默认值一样\",{\"1\":{\"1264\":1}}],[\"这个数据永远不会被复制\",{\"1\":{\"3574\":1}}],[\"这个数据类型限制的是内层数组的元素\",{\"1\":{\"1243\":1}}],[\"这个数目定义了这个索引能够\",{\"1\":{\"3393\":1}}],[\"这个数值我们没有定义容量\",{\"1\":{\"1098\":1}}],[\"这个也是声明变量\",{\"1\":{\"1181\":1}}],[\"这个配置文件\",{\"1\":{\"511\":1}}],[\"这个uri和mongodb\",{\"1\":{\"388\":1}}],[\"这个信息spring\",{\"1\":{\"345\":1}}],[\"这个是apache提供的\",{\"1\":{\"2679\":1}}],[\"这个是产生死锁的最根本原因\",{\"1\":{\"1794\":1}}],[\"这个是main线程的遍历代码\",{\"1\":{\"1720\":1}}],[\"这个是我们处理不了的\",{\"1\":{\"1560\":1}}],[\"这个是用来测试一个对象的类名的\",{\"1\":{\"1416\":1}}],[\"这个是父类中的num\",{\"1\":{\"1381\":1}}],[\"这个是子类中的num\",{\"1\":{\"1381\":1}}],[\"这个是之前的\",{\"1\":{\"757\":1}}],[\"这个是全路径名\",{\"1\":{\"267\":1}}],[\"这个是idea中的设置\",{\"1\":{\"188\":1}}],[\"这个时候该\",{\"1\":{\"567\":1}}],[\"这个时候idea就自动进行热部署操作\",{\"1\":{\"191\":1}}],[\"这个时候可能需要有项目经理或者程序员兼任\",{\"1\":{\"33\":1}}],[\"这个目前不太流行了\",{\"1\":{\"82\":1,\"83\":1}}],[\"这个线上环境也称之为生产环境\",{\"1\":{\"38\":1}}],[\"这个环境就是开发环境\",{\"1\":{\"36\":1}}],[\"这些索引在其范围内的值分布更加随机\",{\"1\":{\"3621\":1}}],[\"这些文本索引不存储特定于语言的停止词\",{\"1\":{\"3621\":1}}],[\"这些文件都是不会变化的\",{\"1\":{\"3504\":1}}],[\"这些类型包括date\",{\"1\":{\"3547\":1}}],[\"这些类被用来构建和管理应用程序的图形用户界面\",{\"1\":{\"1338\":1}}],[\"这些字段我们放入\",{\"1\":{\"3524\":1}}],[\"这些方式的效率也都不如倒排索引\",{\"1\":{\"3427\":1}}],[\"这些方法都是返回string类型\",{\"1\":{\"2845\":1}}],[\"这些方法检查所提供的参数是不是null\",{\"1\":{\"2682\":1}}],[\"这些方法操作的也是日期\",{\"1\":{\"713\":1}}],[\"这些拷贝叫做复制分片\",{\"1\":{\"3368\":1}}],[\"这些不是太常用\",{\"1\":{\"3197\":1}}],[\"这些代码才会出现\",{\"1\":{\"3110\":1}}],[\"这些web项目中cookie默认情况是不能共享的\",{\"1\":{\"3056\":1}}],[\"这些所依赖的类也可以打包成jar包放在web\",{\"1\":{\"2996\":1}}],[\"这些请求将被加入到等待队列中\",{\"1\":{\"2665\":1}}],[\"这些请求是springboot\",{\"1\":{\"341\":1}}],[\"这些数据库连接的数量是由最小数据库连接数来设定的\",{\"1\":{\"2665\":1}}],[\"这些接口的区别就是参数不一样\",{\"1\":{\"2385\":1}}],[\"这些接口可以分为三类\",{\"1\":{\"567\":1}}],[\"这些内存都将在方法区中进行分配\",{\"1\":{\"2275\":1}}],[\"这些内部结构也都受到泛型的约束\",{\"1\":{\"1959\":1}}],[\"这些封装后的io操作更加简单\",{\"1\":{\"2169\":1}}],[\"这些第三方包底层用的也是基本的io流操作\",{\"1\":{\"2169\":1}}],[\"这些子类的方法都是一样的\",{\"1\":{\"1831\":1}}],[\"这些对象可以属于同一个thread类的子类\",{\"1\":{\"1725\":1}}],[\"这些对象是作为类的属性的\",{\"1\":{\"1617\":1}}],[\"这些标记可以在编译\",{\"1\":{\"1635\":1}}],[\"这些约定包括getxxx\",{\"1\":{\"1531\":1}}],[\"这些步骤已经在父类中写好了\",{\"1\":{\"1498\":1}}],[\"这些同名方法就成了不同的方法\",{\"1\":{\"1407\":1}}],[\"这些属性和功能就形成了概念世界中的类\",{\"1\":{\"1252\":1}}],[\"这些信息被保存在\",{\"1\":{\"1635\":1}}],[\"这些信息是很有用的\",{\"1\":{\"1005\":1}}],[\"这些信息都是私有的\",{\"1\":{\"1005\":1}}],[\"这些信息如何写\",{\"1\":{\"354\":1}}],[\"这些新增的本地化时间日期\",{\"1\":{\"709\":1}}],[\"这些bean可以直接用了\",{\"1\":{\"559\":1}}],[\"这些都是映射里面可以设置的\",{\"1\":{\"3364\":1}}],[\"这些都是可以在yml中配置的\",{\"1\":{\"333\":1}}],[\"这些都与query对象的方法有关\",{\"1\":{\"410\":1}}],[\"这些坐标都有了一些变化\",{\"1\":{\"354\":1}}],[\"这些配置是如何生效的\",{\"1\":{\"159\":1}}],[\"这些包的版本配置非常麻烦\",{\"1\":{\"114\":1}}],[\"这些应用软件仅仅在软件开发过程中使用\",{\"1\":{\"36\":1}}],[\"这些表结构之间的关系是什么样的\",{\"1\":{\"25\":1}}],[\"这些技术你不会就没法整合\",{\"1\":{\"11\":1}}],[\"软件安装目录\",{\"1\":{\"3653\":1}}],[\"软件基金会\",{\"1\":{\"3092\":1}}],[\"软件\",{\"1\":{\"2172\":1}}],[\"软件就会显得很卡\",{\"1\":{\"1694\":1}}],[\"软件=程序+文档=数据结构+算法+文档\",{\"1\":{\"1683\":1}}],[\"软件是由\",{\"1\":{\"3202\":1}}],[\"软件是为了完成特定的功能\",{\"1\":{\"1683\":2}}],[\"软件是一直在线运行的\",{\"1\":{\"311\":1}}],[\"软件运行方式\",{\"0\":{\"1019\":1}}],[\"软件环境\",{\"0\":{\"34\":1,\"35\":1}}],[\"软件环境搭建\",{\"1\":{\"33\":1}}],[\"软件开发流程\",{\"0\":{\"19\":1}}],[\"技术\",{\"1\":{\"2526\":1}}],[\"技术栈的核心\",{\"1\":{\"3091\":1}}],[\"技术栈\",{\"1\":{\"648\":1}}],[\"技术栈导航\",{\"0\":{\"9\":1}}],[\"技术集a\",{\"1\":{\"562\":2}}],[\"技术选型\",{\"0\":{\"53\":1}}],[\"技术选型等\",{\"1\":{\"33\":1}}],[\"职责单一\",{\"1\":{\"3004\":1}}],[\"职责\",{\"1\":{\"33\":1}}],[\"对资源进行的增\",{\"1\":{\"3698\":1}}],[\"对userid降序排列\",{\"1\":{\"3611\":1}}],[\"对表示方法\",{\"1\":{\"3547\":1}}],[\"对海量数据的高效率存储和访问的需求\",{\"1\":{\"3540\":1}}],[\"对\",{\"1\":{\"3494\":1}}],[\"对中英联合支持不是很好\",{\"1\":{\"3477\":1}}],[\"对中文进行url编码\",{\"1\":{\"3054\":1}}],[\"对用户搜索的句子进行插件\",{\"1\":{\"3459\":1}}],[\"对用户请求的地址进行缓存\",{\"1\":{\"468\":1}}],[\"对储存的文本进行拆解\",{\"1\":{\"3459\":1}}],[\"对分词进行搜索可能会包含很多无关内容\",{\"1\":{\"3435\":1}}],[\"对这一切的管理都是透明的\",{\"1\":{\"3376\":1}}],[\"对查询结果分组\",{\"1\":{\"3188\":1}}],[\"对查询结果进行分页\",{\"1\":{\"3181\":1}}],[\"对查询的结果进行排序\",{\"1\":{\"3184\":1}}],[\"对相同的请求体和请求链接发送了两次请求\",{\"1\":{\"3142\":1,\"3160\":1}}],[\"对比关系型数据库\",{\"1\":{\"3116\":1}}],[\"对比string\",{\"0\":{\"695\":1}}],[\"对每一个词建立一个索引\",{\"1\":{\"3100\":1}}],[\"对不同记录类型\",{\"1\":{\"3098\":1}}],[\"对不满足条件的参数\",{\"1\":{\"1277\":1}}],[\"对高度相关的搜索结果的有特殊需求\",{\"1\":{\"3098\":1}}],[\"对高优先级\",{\"1\":{\"1734\":1}}],[\"对同一个域名下的总cookie数量也有限制\",{\"1\":{\"3058\":1}}],[\"对同名方法的名称做修饰\",{\"1\":{\"1407\":1}}],[\"对numbertype类型的约束\",{\"1\":{\"3029\":1}}],[\"对agetype类型的约束\",{\"1\":{\"3029\":1}}],[\"对sextype类型的约束\",{\"1\":{\"3029\":1}}],[\"对业务逻辑进行封装\",{\"1\":{\"3006\":1}}],[\"对某个字段一次性返回\",{\"1\":{\"3187\":1,\"3188\":1,\"3247\":1,\"3248\":1}}],[\"对某个字段的值进行去重之后再取总数\",{\"1\":{\"3187\":1,\"3188\":1,\"3247\":1,\"3248\":1}}],[\"对某个字段取平均值\",{\"1\":{\"3187\":1,\"3188\":1,\"3247\":1,\"3248\":1}}],[\"对某个字段取最小值\",{\"1\":{\"3187\":1,\"3247\":1,\"3248\":1}}],[\"对某个字段取最大值\",{\"1\":{\"3187\":1,\"3247\":1,\"3248\":1}}],[\"对某个字段求和\",{\"1\":{\"3187\":1,\"3188\":1,\"3247\":1,\"3248\":1}}],[\"对某个类只能存在一个对象实例\",{\"1\":{\"1487\":1}}],[\"对某类格式的资源请求进行拦截\",{\"1\":{\"2949\":1}}],[\"对http协议的操作进行封装\",{\"1\":{\"2694\":1}}],[\"对照如下\",{\"1\":{\"2638\":1}}],[\"对照matcher构造器源码\",{\"1\":{\"1004\":1}}],[\"对两个类型相同的参数进行二元运算\",{\"1\":{\"2487\":1}}],[\"对种子进行的操作\",{\"1\":{\"2450\":1}}],[\"对数据的操作\",{\"1\":{\"3149\":1}}],[\"对数据进行分析\",{\"1\":{\"3113\":1}}],[\"对数据库高并发读写的需求\",{\"1\":{\"3540\":1}}],[\"对数据库的高可扩展性和高可用性的需求\",{\"1\":{\"3540\":1}}],[\"对数据库的crud基本操作\",{\"1\":{\"3006\":1}}],[\"对数据库的调用方式\",{\"0\":{\"2556\":1}}],[\"对数据库连接进行安全检测\",{\"1\":{\"2321\":1}}],[\"对数据源的数据进行处理\",{\"1\":{\"2440\":1}}],[\"对数组进行排序\",{\"1\":{\"891\":1}}],[\"对原有方法进行增强\",{\"1\":{\"2320\":1}}],[\"对原有文件的覆盖\",{\"1\":{\"2060\":1}}],[\"对person的操作\",{\"0\":{\"2256\":1}}],[\"对速率\",{\"1\":{\"2199\":1}}],[\"对文档的增删请求都是写操作\",{\"1\":{\"3406\":1}}],[\"对文档的操作就是对数据的操作\",{\"1\":{\"427\":1}}],[\"对文档数据根据不同属性进行的分类标识\",{\"1\":{\"3363\":1}}],[\"对文本文件进行转码\",{\"0\":{\"2106\":1}}],[\"对子类要求也要具备相应的泛型\",{\"1\":{\"1987\":1}}],[\"对处于\",{\"1\":{\"1933\":1}}],[\"对处于有序状态\",{\"1\":{\"1914\":1}}],[\"对的插入顺序一致\",{\"1\":{\"1930\":1}}],[\"对进行排序\",{\"1\":{\"1933\":1}}],[\"对进行\",{\"1\":{\"1914\":1}}],[\"对时\",{\"1\":{\"1914\":1,\"1933\":1}}],[\"对性能影响很大\",{\"1\":{\"1812\":1}}],[\"对多个字段联合创建一个索引\",{\"1\":{\"3627\":1}}],[\"对多个对象进行排序\",{\"0\":{\"751\":1}}],[\"对多条操作共享数据的语句\",{\"1\":{\"1756\":1,\"1773\":1}}],[\"对图形化界面更有意义\",{\"1\":{\"1693\":1}}],[\"对对象的属性等进行初始化\",{\"1\":{\"1528\":1}}],[\"对称性\",{\"1\":{\"1428\":1}}],[\"对构造器的调用\",{\"0\":{\"1387\":1}}],[\"对属性可以赋值的位置\",{\"0\":{\"1274\":1}}],[\"对本身是质数的自然数是有效的\",{\"1\":{\"1204\":1}}],[\"对各种\",{\"1\":{\"1081\":1}}],[\"对集合数据进行操作\",{\"1\":{\"2436\":1}}],[\"对集合对象实现同步控制等方法\",{\"1\":{\"927\":1,\"1943\":1}}],[\"对集合进行curd操作\",{\"1\":{\"400\":1}}],[\"对int类型数组的值按数字大小的升序\",{\"1\":{\"892\":1}}],[\"对即将获取的内容无限制\",{\"1\":{\"887\":1,\"1008\":1}}],[\"对应资源文件\",{\"1\":{\"2759\":1}}],[\"对应编译后java文件\",{\"1\":{\"2759\":1}}],[\"对应了一个不断变化的上下文环境\",{\"1\":{\"1685\":1}}],[\"对应的file可以不存在的\",{\"1\":{\"2058\":1}}],[\"对应的类一定要重写equals\",{\"1\":{\"1885\":1}}],[\"对应的一对\",{\"1\":{\"1171\":1}}],[\"对应的包装类实例\",{\"1\":{\"746\":1}}],[\"对应的包装类实例大于\",{\"1\":{\"746\":1}}],[\"对应类中调用的方法的返回值\",{\"1\":{\"874\":1,\"2314\":1}}],[\"对应阶段\",{\"1\":{\"33\":1}}],[\"对日期时间进行的修改将返回同样的一个类的对象\",{\"1\":{\"713\":1}}],[\"对所有可以成为\",{\"1\":{\"3526\":1}}],[\"对所有的返回值都使用r对象进行包装\",{\"1\":{\"647\":1}}],[\"对所有端点进行配置\",{\"1\":{\"343\":1}}],[\"对几乎所有常用的基数都提供了预定义属性名以及设置了通用的属性值\",{\"1\":{\"560\":1}}],[\"对bean的加载进行最终裁决\",{\"1\":{\"535\":1}}],[\"对加载bean进行控制\",{\"0\":{\"533\":1}}],[\"对redis缓存进行配置\",{\"1\":{\"483\":1}}],[\"对方法的return结果进行缓存\",{\"1\":{\"468\":1}}],[\"对方法的返回值进行缓存\",{\"1\":{\"468\":1}}],[\"对该字段的操作就是对objectid的操作\",{\"1\":{\"397\":1}}],[\"对具体的字段设置校验规则\",{\"0\":{\"220\":1}}],[\"对于副本集只能通过uri进行连接\",{\"1\":{\"3751\":1}}],[\"对于副本集\",{\"1\":{\"3723\":1}}],[\"对于单个字段索引和排序操作\",{\"1\":{\"3619\":1}}],[\"对于cpu来说\",{\"1\":{\"3505\":1}}],[\"对于企业级开发\",{\"1\":{\"3502\":1}}],[\"对于汉语来说就是汉字和词语\",{\"1\":{\"3435\":1}}],[\"对于英文来说就是一个单词或词组\",{\"1\":{\"3435\":1}}],[\"对于文档的查询来说\",{\"1\":{\"3423\":1}}],[\"对于高亮查询可以通过highlightbuilder对象对高亮显示进行配置\",{\"1\":{\"3252\":1}}],[\"对于现今的应用来讲\",{\"1\":{\"2997\":1}}],[\"对于现代的互联网程序来说\",{\"1\":{\"313\":1}}],[\"对于前后端分离项目\",{\"1\":{\"2920\":1}}],[\"对于流的copy的代码还是比较复杂的\",{\"1\":{\"2895\":1}}],[\"对于响应体\",{\"0\":{\"2885\":1}}],[\"对于响应行\",{\"1\":{\"2883\":1}}],[\"对于请求体中的数据\",{\"1\":{\"2853\":1}}],[\"对于动态资源来说\",{\"1\":{\"2771\":1}}],[\"对于多应用共享同一数据库的系统而言\",{\"1\":{\"2667\":1}}],[\"对于多模块springboot项目\",{\"1\":{\"225\":1}}],[\"对于业务请求处理而言\",{\"1\":{\"2667\":1}}],[\"对于具体的数据表\",{\"1\":{\"2642\":1}}],[\"对于dml来说\",{\"1\":{\"2578\":1}}],[\"对于mysql等数据库层面的数据源\",{\"1\":{\"2437\":1}}],[\"对于mongodb总\",{\"1\":{\"389\":1}}],[\"对于从nosql获取的数据\",{\"1\":{\"2435\":1}}],[\"对于\",{\"1\":{\"2214\":1,\"3097\":1}}],[\"对于数据的输入\",{\"1\":{\"2021\":1}}],[\"对于list<\",{\"1\":{\"1992\":1}}],[\"对于频繁的遍历操作\",{\"1\":{\"1913\":1}}],[\"对于频繁的插入\",{\"1\":{\"1861\":1}}],[\"对于object元素\",{\"1\":{\"1895\":1}}],[\"对于存放在set容器中的对象\",{\"1\":{\"1885\":1}}],[\"对于无序\",{\"1\":{\"1822\":1}}],[\"对于无侵入编程\",{\"1\":{\"517\":1}}],[\"对于添加\",{\"1\":{\"1822\":1}}],[\"对于每一次数据库连接\",{\"1\":{\"2662\":1}}],[\"对于每个类而言\",{\"1\":{\"2260\":1}}],[\"对于每\",{\"1\":{\"1650\":1}}],[\"对于异常对象e\",{\"1\":{\"1589\":1}}],[\"对于这些非结构化的数据文本\",{\"1\":{\"3096\":1}}],[\"对于这些错误\",{\"1\":{\"1562\":1}}],[\"对于这三部分内容\",{\"1\":{\"2844\":1}}],[\"对于这类异常\",{\"1\":{\"1572\":1,\"1573\":1}}],[\"对于integer类来说\",{\"1\":{\"1430\":1}}],[\"对于ide开发工具来时\",{\"1\":{\"1030\":1}}],[\"对于引用类型就是比较内存地址\",{\"1\":{\"1429\":1}}],[\"对于基本类型就是比较值\",{\"1\":{\"1429\":1}}],[\"对于基本数据类型的包装类和string\",{\"1\":{\"910\":1}}],[\"对于重载而言\",{\"1\":{\"1407\":1}}],[\"对于编译器而言\",{\"1\":{\"1407\":1}}],[\"对于父类中的private成员\",{\"1\":{\"1367\":1}}],[\"对于二维数组的理解\",{\"1\":{\"1230\":1}}],[\"对于一个未启动过的es软件\",{\"1\":{\"3110\":1}}],[\"对于一个数值常量\",{\"1\":{\"1115\":1}}],[\"对于一个全新的迭代器\",{\"1\":{\"923\":1,\"1839\":1}}],[\"对于不同的平台\",{\"1\":{\"1015\":1}}],[\"对于不常用的依赖\",{\"1\":{\"612\":1}}],[\"对于非完全匹配\",{\"1\":{\"1005\":1}}],[\"对于复杂的表达式需要使用jdk中的matcher类来处理\",{\"1\":{\"986\":1}}],[\"对于复杂的项目可以使用多模块进行开发\",{\"1\":{\"160\":1}}],[\"对于arraylist\",{\"1\":{\"915\":1}}],[\"对于自定义类\",{\"1\":{\"912\":1,\"1895\":1}}],[\"对于自定义的类\",{\"1\":{\"744\":1}}],[\"对于输入的非十进制数据\",{\"1\":{\"888\":1,\"1009\":1}}],[\"对于number类型的xxx有一个可选参数\",{\"1\":{\"888\":1,\"1009\":1}}],[\"对于实现了comparable接口的类\",{\"1\":{\"747\":1}}],[\"对于特殊操作和冷门技术\",{\"1\":{\"561\":1}}],[\"对于必须给值的属性\",{\"1\":{\"556\":1}}],[\"对于web开发\",{\"1\":{\"311\":1}}],[\"对于web模块\",{\"1\":{\"174\":1}}],[\"对于日志文件的使用存在各种各样的策略\",{\"1\":{\"303\":1}}],[\"对象id\",{\"1\":{\"3548\":1}}],[\"对象对应于关系型数据库的\",{\"1\":{\"3546\":1}}],[\"对象有两个\",{\"1\":{\"3210\":1}}],[\"对象类型\",{\"1\":{\"3197\":1}}],[\"对象和\",{\"1\":{\"3084\":1}}],[\"对象维护了一个指向当前数据行的指针\",{\"1\":{\"2588\":1}}],[\"对象以逻辑表格的形式封装了执行数据库操作的结果集\",{\"1\":{\"2587\":1}}],[\"对象所代表的\",{\"1\":{\"2569\":1}}],[\"对象所对应的类\",{\"1\":{\"1909\":1}}],[\"对象只能由系统建立对象\",{\"1\":{\"2263\":1}}],[\"对象表示\",{\"1\":{\"2244\":1}}],[\"对象上通过方法\",{\"1\":{\"2241\":1}}],[\"对象封装了udp数据报\",{\"1\":{\"2229\":1}}],[\"对象负责等待客户端请求建立套接字连接\",{\"1\":{\"2223\":1}}],[\"对象关联的文件名\",{\"1\":{\"2166\":1}}],[\"对象指定的文件路径\",{\"1\":{\"2166\":1}}],[\"对象序列化机制允许把内存中的java对象转换成平台无关的二进制流\",{\"1\":{\"2144\":1}}],[\"对象流\",{\"0\":{\"2141\":1}}],[\"对象包含一个记录指针\",{\"1\":{\"2130\":1}}],[\"对象中的列数\",{\"1\":{\"2593\":1}}],[\"对象中的字符串\",{\"0\":{\"1133\":1}}],[\"对象中列的类型和属性信息的对象\",{\"1\":{\"2592\":1}}],[\"对象中用作\",{\"1\":{\"1897\":1}}],[\"对象中各个元素\",{\"1\":{\"1835\":1}}],[\"对象储存在这里\",{\"1\":{\"1701\":1}}],[\"对象如果有实例变量\",{\"1\":{\"1620\":1}}],[\"对象实体内属性的值就被修改了\",{\"1\":{\"1549\":1}}],[\"对象引用\",{\"1\":{\"1546\":1}}],[\"对象加载时间过长\",{\"1\":{\"1490\":1}}],[\"对象在编译期间\",{\"1\":{\"1398\":1}}],[\"对象也是引用数据类型\",{\"1\":{\"1270\":1}}],[\"对象作为方法的参数\",{\"1\":{\"1267\":1}}],[\"对象作为函数的参数\",{\"1\":{\"1267\":1}}],[\"对象就是引用类型的\",{\"1\":{\"1266\":1}}],[\"对象间进行赋值时\",{\"1\":{\"1262\":1}}],[\"对象间的赋值\",{\"0\":{\"1262\":1}}],[\"对象成员\",{\"1\":{\"1259\":1}}],[\"对象名\",{\"1\":{\"1259\":2,\"1800\":1,\"1801\":1}}],[\"对象名就是log\",{\"1\":{\"309\":1}}],[\"对象名就是\",{\"1\":{\"290\":1}}],[\"对象为最小单位\",{\"1\":{\"1250\":1}}],[\"对象是\",{\"1\":{\"1653\":1}}],[\"对象是实际存在的该类事物的每个个体\",{\"1\":{\"1255\":1}}],[\"对象是计算机世界中解决问题的最终工具\",{\"1\":{\"1252\":1}}],[\"对象是对输入字符串进行解释和匹配操作的引擎\",{\"1\":{\"984\":1}}],[\"对象是一个正则表达式的编译表示\",{\"1\":{\"984\":1}}],[\"对象的生命周期指一个对象从被创建到被销毁的整个过程\",{\"1\":{\"2792\":1}}],[\"对象的根路径\",{\"1\":{\"2166\":1}}],[\"对象的字符串表示形式\",{\"1\":{\"2166\":1}}],[\"对象的序列化机制\",{\"0\":{\"2144\":1}}],[\"对象的存放地址是随机的\",{\"1\":{\"1895\":1}}],[\"对象的属性是复制类的\",{\"1\":{\"1549\":1}}],[\"对象的内存解析\",{\"0\":{\"1547\":1}}],[\"对象的多态性\",{\"0\":{\"1395\":1},\"1\":{\"1399\":1}}],[\"对象的\",{\"1\":{\"984\":1,\"2564\":1,\"2567\":1,\"2569\":1,\"2570\":1,\"2588\":1}}],[\"对象的所有旧值\",{\"1\":{\"938\":1}}],[\"对象的getclass方法\",{\"0\":{\"835\":1}}],[\"对象排序的实质\",{\"0\":{\"740\":1}}],[\"对象\",{\"0\":{\"2402\":1,\"2405\":1},\"1\":{\"504\":1,\"838\":1,\"984\":3,\"1253\":1,\"1255\":1,\"1259\":2,\"1274\":2,\"1323\":2,\"1416\":1,\"1424\":1,\"1437\":1,\"1524\":1,\"1650\":1,\"1652\":1,\"1797\":1,\"1837\":1,\"2166\":1,\"2167\":1,\"2168\":2,\"2223\":1,\"2224\":1,\"2238\":1,\"2247\":1,\"2398\":1,\"2420\":1,\"2423\":1,\"2426\":1,\"2564\":1,\"2567\":1,\"2571\":1,\"2586\":1,\"3546\":1}}],[\"对象属性\",{\"1\":{\"151\":1}}],[\"对象数组中的每个元素值被用来作为查询语句的置换参数\",{\"1\":{\"2683\":1}}],[\"对象数组中数据\",{\"1\":{\"151\":1}}],[\"对象数组\",{\"0\":{\"1266\":1},\"1\":{\"148\":1}}],[\"对餐厅的各类数据进行统计\",{\"1\":{\"49\":1}}],[\"对整个项目负责\",{\"1\":{\"33\":1}}],[\"对部署在测试环境的项目进行功能测试\",{\"1\":{\"30\":1}}],[\"岗位\",{\"1\":{\"33\":1}}],[\"再在按score倒序排序\",{\"1\":{\"3620\":1}}],[\"再把它们调回来\",{\"1\":{\"3454\":1}}],[\"再把这些map再存到一个map里\",{\"1\":{\"2684\":1}}],[\"再按照下一个定义的排序字段进行排序\",{\"1\":{\"3185\":1}}],[\"再从流对象中拿数据\",{\"1\":{\"2853\":1}}],[\"再设置server选项卡\",{\"1\":{\"2747\":1}}],[\"再存放到list中\",{\"1\":{\"2684\":1}}],[\"再验证用户名和密码\",{\"1\":{\"2662\":1}}],[\"再统一提交\",{\"1\":{\"2625\":1}}],[\"再启动客户端\",{\"1\":{\"2226\":1}}],[\"再启动springboot\",{\"1\":{\"134\":1}}],[\"再将war包放置到webapps目录下\",{\"1\":{\"2714\":1}}],[\"再将它们复合起来\",{\"1\":{\"2200\":1}}],[\"再将复制的文件\",{\"1\":{\"2138\":1}}],[\"再将我们开发好的项目\",{\"1\":{\"31\":1}}],[\"再进行节点流的时间计算\",{\"1\":{\"2086\":1}}],[\"再进行调用\",{\"1\":{\"1280\":1}}],[\"再写出\",{\"1\":{\"2084\":1}}],[\"再关节点流\",{\"1\":{\"2081\":1}}],[\"再调用next\",{\"1\":{\"1847\":1}}],[\"再调用\",{\"1\":{\"1768\":1}}],[\"再调用remove都会报illegalstateexception\",{\"1\":{\"926\":1,\"1848\":1}}],[\"再通过new\",{\"1\":{\"1740\":1}}],[\"再接着执行main进程\",{\"1\":{\"1729\":1}}],[\"再次通过\",{\"1\":{\"3394\":1}}],[\"再次使用elasticsearch\",{\"1\":{\"3387\":1}}],[\"再次发送请求\",{\"1\":{\"3380\":1}}],[\"再次查看集群状态\",{\"1\":{\"3396\":1,\"3397\":1}}],[\"再次查看集群情况\",{\"0\":{\"3394\":1}}],[\"再次查看集群信息\",{\"1\":{\"3279\":1,\"3280\":1}}],[\"再次查看当前内存\",{\"1\":{\"3313\":1,\"3346\":1}}],[\"再次查看服务的控制台\",{\"0\":{\"325\":1}}],[\"再次启动\",{\"0\":{\"3274\":1}}],[\"再次创建一个子线程对象\",{\"1\":{\"1720\":1}}],[\"再次创建一个thread类的子类对象\",{\"1\":{\"1720\":1}}],[\"再复制下一个是要比同时复制两个文件要快的\",{\"1\":{\"1692\":1}}],[\"再新建一个对象时\",{\"1\":{\"1550\":1}}],[\"再增加子类独有的属性\",{\"1\":{\"1366\":1}}],[\"再提供公共的\",{\"1\":{\"1305\":1,\"1306\":1}}],[\"再用对象访问类中定义的成员\",{\"1\":{\"1263\":1}}],[\"再初始化赋值\",{\"1\":{\"1098\":1}}],[\"再使用bean的类中加载bean属性读取类\",{\"1\":{\"556\":1}}],[\"再使用各种字符串处理方法和前端的美化\",{\"1\":{\"300\":1}}],[\"再配置文件中为bean配置一些属性\",{\"1\":{\"556\":1}}],[\"再加上要使用ssl\",{\"1\":{\"415\":1}}],[\"再加上分布式集群部署\",{\"1\":{\"311\":1}}],[\"再细粒度地分析每个接口的传入参数\",{\"1\":{\"26\":1}}],[\"会连接失败\",{\"1\":{\"3678\":1}}],[\"会连接这些ip\",{\"1\":{\"3678\":1}}],[\"会重新选取主节点\",{\"1\":{\"3532\":1}}],[\"会重新索引新文档\",{\"1\":{\"3493\":1}}],[\"会为该文档指定一个版本号\",{\"1\":{\"3528\":1}}],[\"会触发一次\",{\"1\":{\"3517\":1}}],[\"会把内存中的的数据刷新到操作系统的文件缓存系统中\",{\"1\":{\"3516\":1}}],[\"会把默认的覆盖掉\",{\"1\":{\"2825\":1}}],[\"会消耗大量的\",{\"1\":{\"3515\":1}}],[\"会消耗一定文件句柄\",{\"1\":{\"3507\":1}}],[\"会占用更多的带宽\",{\"1\":{\"3504\":1}}],[\"会占用大量的内存空间\",{\"1\":{\"1705\":1}}],[\"会增加额外的网络损耗成本\",{\"1\":{\"3501\":1}}],[\"会读取原文档\",{\"1\":{\"3493\":1}}],[\"会发现根本搜不到\",{\"1\":{\"3452\":1}}],[\"会以每秒一次的频次从\",{\"1\":{\"3450\":1}}],[\"会删除他们的\",{\"1\":{\"3447\":1}}],[\"会进行轮询\",{\"1\":{\"3410\":1}}],[\"会进行转码\",{\"1\":{\"379\":1}}],[\"会额外做三件事\",{\"1\":{\"3304\":1}}],[\"会有不同的分词器\",{\"1\":{\"3437\":1}}],[\"会有一个集群的引导步骤\",{\"1\":{\"3268\":1}}],[\"会有运行时异常\",{\"1\":{\"1627\":1}}],[\"会默认创建并加入一个叫做\",{\"1\":{\"3261\":1}}],[\"会同时进行全量查询\",{\"1\":{\"3250\":1}}],[\"会按定义的顺序进行排序\",{\"1\":{\"3185\":1}}],[\"会返回很长的token字符串\",{\"1\":{\"3331\":1}}],[\"会返回\",{\"1\":{\"3176\":2,\"3180\":1}}],[\"会返回完整的类名\",{\"1\":{\"862\":1,\"870\":1,\"2293\":1}}],[\"会携带上cookie\",{\"1\":{\"3050\":1}}],[\"会包含main\",{\"1\":{\"2981\":1}}],[\"会用到一个contextloaderlistener\",{\"1\":{\"2970\":1}}],[\"会话数据储存在内存中\",{\"1\":{\"3053\":1}}],[\"会话追踪技术\",{\"0\":{\"3037\":1}}],[\"会话跟踪\",{\"0\":{\"3035\":1}}],[\"会话被建立后\",{\"1\":{\"3033\":1}}],[\"会话建立\",{\"1\":{\"3033\":1}}],[\"会话\",{\"0\":{\"3033\":1}}],[\"会话结束\",{\"1\":{\"2924\":1,\"3033\":1}}],[\"会话技术介绍\",{\"0\":{\"3032\":1}}],[\"会话技术\",{\"0\":{\"3031\":1},\"1\":{\"11\":1}}],[\"会解析response对象\",{\"1\":{\"2833\":1}}],[\"会对查询字符串应用相同的分析器\",{\"1\":{\"3470\":1}}],[\"会对http请求中的数据进行解析并把解析结果存入到一个对象中\",{\"1\":{\"2832\":1}}],[\"会对数据的大小进行限制\",{\"1\":{\"2610\":1}}],[\"会创建request和response对象\",{\"1\":{\"2831\":1}}],[\"会创建一个内部缓冲区数组\",{\"1\":{\"2074\":1}}],[\"会覆盖掉tomcat中的defaultservlet\",{\"1\":{\"2825\":1}}],[\"会覆盖掉defaultservlet\",{\"1\":{\"2825\":1}}],[\"会通过继承httpservlet\",{\"1\":{\"2809\":1}}],[\"会访问两种资源\",{\"1\":{\"2771\":1}}],[\"会导致tomcat选项中\",{\"1\":{\"2762\":1}}],[\"会导致其他对象调用此静态变量时\",{\"1\":{\"1475\":1}}],[\"会被放入web\",{\"1\":{\"2727\":1}}],[\"会被放到web\",{\"1\":{\"2727\":1}}],[\"会被自动被映射为\",{\"1\":{\"397\":1}}],[\"会影响的路由计算\",{\"1\":{\"3506\":1}}],[\"会影响到其他项目\",{\"1\":{\"2716\":1}}],[\"会影响主线程\",{\"1\":{\"1689\":1}}],[\"会显示端口号和pid\",{\"1\":{\"2708\":1}}],[\"会显示所有跟sql相关的操作\",{\"1\":{\"624\":1}}],[\"会提示\",{\"1\":{\"2539\":1}}],[\"会生成不同类型的stream\",{\"1\":{\"2447\":1}}],[\"会生成一个或多个字节码文件\",{\"1\":{\"2261\":1}}],[\"会缓存一定的时间\",{\"1\":{\"2265\":1}}],[\"会将新条目附加到现有日志文件的末尾\",{\"1\":{\"3562\":1}}],[\"会将请求写入到\",{\"1\":{\"3527\":1}}],[\"会将原有的数据内容覆盖\",{\"1\":{\"3144\":1}}],[\"会将sessionid储存到cookie中\",{\"1\":{\"3068\":1}}],[\"会将类加载到内存中\",{\"1\":{\"2262\":1}}],[\"会将获取的索引内容都当做字符串处理\",{\"1\":{\"888\":1,\"1009\":1}}],[\"会出现异常\",{\"1\":{\"2217\":1}}],[\"会出现illegalmonitorstateexception异常\",{\"1\":{\"1802\":1}}],[\"会继续从上一次的地方下载\",{\"1\":{\"2140\":1}}],[\"会相应关闭内层节点流\",{\"1\":{\"2074\":1}}],[\"会无法解析\",{\"1\":{\"2038\":1}}],[\"会涉及到扩容问题\",{\"1\":{\"1924\":1}}],[\"会根据自己定义的排序方式进行排序\",{\"1\":{\"1903\":1}}],[\"会根据添加数据的顺序进行遍历\",{\"1\":{\"1902\":1}}],[\"会根据参数\",{\"1\":{\"1319\":1}}],[\"会调用集合元素的\",{\"1\":{\"1887\":1}}],[\"会抛异常\",{\"1\":{\"1847\":1}}],[\"会抛出nosuchelementexception异常\",{\"1\":{\"1845\":1}}],[\"会抛出异常\",{\"1\":{\"925\":1,\"1840\":1}}],[\"会抛出ioexception异常\",{\"1\":{\"821\":1}}],[\"会释放锁\",{\"1\":{\"1803\":1}}],[\"会释放本次获得的执行权\",{\"1\":{\"1729\":1}}],[\"会因争夺资源而陷入僵局\",{\"1\":{\"1792\":1}}],[\"会判断target变量是否有值\",{\"1\":{\"1741\":1}}],[\"会获取异常对象\",{\"1\":{\"1589\":1}}],[\"会互相影响到对方\",{\"1\":{\"1551\":1}}],[\"会比对这个id\",{\"1\":{\"2158\":1}}],[\"会比对集合中的所有元素\",{\"1\":{\"968\":1}}],[\"会比较类中的相应属性是否都相等\",{\"1\":{\"1429\":1}}],[\"会从父类中查找\",{\"1\":{\"1332\":1}}],[\"会采用数据类型的默认值\",{\"1\":{\"1270\":1}}],[\"会每次循环都重复生命\",{\"1\":{\"1181\":1}}],[\"会在内存中创建一个session对象\",{\"1\":{\"3068\":1}}],[\"会在当前目录下生成一个编译后的文件\",{\"1\":{\"1040\":1}}],[\"会在开发环境中进行项目开发\",{\"1\":{\"39\":1}}],[\"会产生报错\",{\"1\":{\"3110\":1}}],[\"会产生java\",{\"1\":{\"2061\":1,\"2062\":1}}],[\"会产生\",{\"1\":{\"824\":1}}],[\"会产生ioexception异常\",{\"1\":{\"823\":1}}],[\"会产生filenotfoundexception异常\",{\"1\":{\"822\":1}}],[\"会产生覆盖\",{\"1\":{\"521\":1}}],[\"会报错\",{\"1\":{\"784\":1,\"1073\":1,\"1368\":1,\"1667\":1,\"3130\":1,\"3718\":1}}],[\"会改变值的大小\",{\"1\":{\"783\":1}}],[\"会直接报错\",{\"1\":{\"1181\":1,\"1278\":1}}],[\"会直接抛出异常\",{\"1\":{\"782\":1}}],[\"会直接改变源stringbuffer\",{\"1\":{\"697\":1}}],[\"会自动进行主节点的选举\",{\"1\":{\"3685\":1}}],[\"会自动进行扩容\",{\"1\":{\"694\":1}}],[\"会自动生成主键值\",{\"1\":{\"3588\":1}}],[\"会自动生成证书\",{\"1\":{\"3297\":1}}],[\"会自动创建证书\",{\"1\":{\"3326\":1}}],[\"会自动创建此文件\",{\"1\":{\"2058\":1}}],[\"会自动开启安全配置功能\",{\"1\":{\"3325\":1,\"3327\":1}}],[\"会自动签发\",{\"1\":{\"3296\":1,\"3298\":1,\"3299\":1}}],[\"会自动注册\",{\"1\":{\"2548\":1}}],[\"会自动的调用被代理类中同名的方法\",{\"1\":{\"2344\":1}}],[\"会自动将数据读入\",{\"1\":{\"2081\":1}}],[\"会自动识别java\",{\"1\":{\"1031\":1}}],[\"会自动转为int\",{\"1\":{\"760\":1}}],[\"会自动下载一个项目压缩包\",{\"1\":{\"105\":1}}],[\"会存入字符串常量池\",{\"1\":{\"649\":1}}],[\"会爆出java\",{\"1\":{\"420\":1}}],[\"会开发专门的监控和大数据模块\",{\"1\":{\"353\":1}}],[\"会和yml中的信息一起显示在info中\",{\"1\":{\"347\":1}}],[\"会监控所有加载到内存中的类\",{\"1\":{\"332\":1}}],[\"会展示如下图十几类监控信息\",{\"1\":{\"328\":1}}],[\"会由运维人员准备服务器上的软件环境安装\",{\"1\":{\"31\":1}}],[\"在副本集初始化之前\",{\"1\":{\"3738\":1}}],[\"在角色定义时可以包含一个或多个已存在的角色\",{\"1\":{\"3698\":1}}],[\"在获得票数的时候\",{\"1\":{\"3687\":1}}],[\"在获取配置时设置默认值\",{\"1\":{\"554\":1}}],[\"在承载数据的节点中\",{\"1\":{\"3641\":1}}],[\"在集合上通过createindex方法创建索引\",{\"1\":{\"3624\":1}}],[\"在集合类或接口中凡是定义类或接口时\",{\"1\":{\"1959\":1}}],[\"在分片集群中\",{\"1\":{\"3623\":1}}],[\"在linux上也不用安装\",{\"1\":{\"3561\":1}}],[\"在linux中\",{\"1\":{\"801\":1}}],[\"在解压目录中新建\",{\"1\":{\"3558\":1}}],[\"在解压的目录中\",{\"1\":{\"3555\":1}}],[\"在软件的bin目录\",{\"1\":{\"3557\":1}}],[\"在软件开发中实现一个算法时\",{\"1\":{\"1498\":1}}],[\"在百万级别的数据中\",{\"1\":{\"3524\":1}}],[\"在新的文档被创建时\",{\"1\":{\"3528\":1}}],[\"在新的节点上\",{\"1\":{\"3329\":1}}],[\"在新增数据时\",{\"1\":{\"3516\":1}}],[\"在生产环境中\",{\"1\":{\"3454\":1}}],[\"在文档的单个字段上创建用户定义的升序\",{\"1\":{\"3619\":1}}],[\"在文档被检索时\",{\"1\":{\"3411\":1}}],[\"在文件中编写配置项\",{\"1\":{\"2717\":1}}],[\"在文件内容末尾追加内容\",{\"1\":{\"2045\":1}}],[\"在处理读取请求时\",{\"1\":{\"3411\":1}}],[\"在缺失主分片的时候理论上索引也不能正常工作\",{\"1\":{\"3396\":1}}],[\"在同\",{\"1\":{\"3384\":1}}],[\"在同一\",{\"1\":{\"3698\":1}}],[\"在同一服务器上不同的request请求是会得到唯一的session\",{\"1\":{\"2923\":1}}],[\"在同一个类中\",{\"1\":{\"1285\":1,\"1335\":1}}],[\"在同一行\",{\"1\":{\"824\":1}}],[\"在运行中的集群上是可以动态调整副本分片数目的\",{\"1\":{\"3393\":1}}],[\"在运行中可以选举产生\",{\"1\":{\"3373\":1}}],[\"在运行时处理注解\",{\"1\":{\"2249\":1}}],[\"在运行时调用任意一个对象的成员变量和方法\",{\"1\":{\"2249\":1}}],[\"在运行时获取泛型信息\",{\"1\":{\"2249\":1}}],[\"在运行时判断任意一个类所具有的成员变量和方法\",{\"1\":{\"2249\":1}}],[\"在运行时判断任意一个对象所属的类\",{\"1\":{\"2249\":1}}],[\"在运行时构造任意一个类的对象\",{\"1\":{\"2249\":1}}],[\"在运行时代码可以根据某些条件改变自身结构\",{\"1\":{\"2247\":1}}],[\"在运行时有效\",{\"1\":{\"1659\":1}}],[\"在索引的生命周期内始终有效\",{\"1\":{\"3441\":1}}],[\"在索引创建之后\",{\"1\":{\"3369\":1}}],[\"在索引中搜索的时候\",{\"1\":{\"3367\":1}}],[\"在结构层次方面\",{\"1\":{\"3360\":1,\"3362\":1,\"3363\":1}}],[\"在网络拥塞的情况下会导致各种问题\",{\"1\":{\"3316\":1}}],[\"在网络中传输数据\",{\"1\":{\"3017\":1}}],[\"在网络中的唯一标识\",{\"1\":{\"2697\":1}}],[\"在连接的时候\",{\"1\":{\"3735\":1}}],[\"在连接到\",{\"1\":{\"3298\":1}}],[\"在连接中可进行大数据量的传输\",{\"1\":{\"2204\":1}}],[\"在修改配置文件之前\",{\"1\":{\"3277\":1}}],[\"在内部复制三个es软件包\",{\"1\":{\"3264\":1}}],[\"在内存层面读\",{\"1\":{\"2038\":1}}],[\"在内存中加载的位置\",{\"1\":{\"1273\":1}}],[\"在内存中分配了不同大小的内存空间\",{\"1\":{\"1074\":1}}],[\"在请求条件中\",{\"1\":{\"3182\":1,\"3185\":1}}],[\"在请求体中设置查询条件\",{\"1\":{\"3227\":1}}],[\"在请求体中\",{\"1\":{\"3152\":1}}],[\"在大规模部署中成效尤为明显\",{\"1\":{\"3114\":1}}],[\"在服务器启动后\",{\"1\":{\"3071\":1}}],[\"在服务器正常关闭之前\",{\"1\":{\"3071\":1}}],[\"在服务器端通过request\",{\"1\":{\"2923\":1}}],[\"在服务端的bservlet获取到相同的session对象\",{\"1\":{\"3061\":1}}],[\"在服务端的aservlet获取一个session对象\",{\"1\":{\"3061\":1}}],[\"在浏览器输入地址\",{\"1\":{\"3110\":1}}],[\"在浏览器和服务器之间\",{\"1\":{\"3033\":1}}],[\"在浏览器中输入\",{\"1\":{\"2758\":1,\"2903\":1}}],[\"在一台主机上模拟集群\",{\"1\":{\"3335\":1}}],[\"在一台电脑上模拟集群\",{\"1\":{\"3262\":1}}],[\"在一些生产环境中\",{\"1\":{\"3098\":1}}],[\"在一次会话的多次请求间共享数据\",{\"1\":{\"3060\":1}}],[\"在一次会话中可以包含多次请求和响应\",{\"1\":{\"3033\":1}}],[\"在一个索引里面\",{\"1\":{\"3362\":1}}],[\"在一个集群中\",{\"1\":{\"3360\":1}}],[\"在一个集群里\",{\"1\":{\"3261\":1}}],[\"在一个类中的访问机制\",{\"1\":{\"1263\":1}}],[\"在一个java源文件中可以声明多个class\",{\"1\":{\"1044\":1}}],[\"在一个yaml文件中\",{\"1\":{\"270\":1}}],[\"在自己新建的项目工程中\",{\"1\":{\"2989\":1}}],[\"在互联网通信过程中定义的一种文件数据类型\",{\"1\":{\"2932\":1}}],[\"在第一次调用request\",{\"1\":{\"2924\":1}}],[\"在第几行就输出几个\",{\"1\":{\"1202\":1}}],[\"在范围内数据可以共享\",{\"1\":{\"2919\":1}}],[\"在转发请求的同时\",{\"1\":{\"2901\":1}}],[\"在测试乱码问题的代码时\",{\"1\":{\"2875\":1}}],[\"在后台可以进行自动段合并\",{\"1\":{\"3457\":1}}],[\"在后台接收的时候\",{\"1\":{\"2874\":1}}],[\"在后台推断出了参数的类型\",{\"1\":{\"2365\":1}}],[\"在发送的请求参数中如果有中文\",{\"1\":{\"2874\":1}}],[\"在destroy\",{\"1\":{\"2798\":1}}],[\"在druid中\",{\"1\":{\"2674\":1}}],[\"在配置tomcat的目标时\",{\"1\":{\"2766\":1}}],[\"在配置文件里开启日志\",{\"1\":{\"624\":1}}],[\"在配置文件中\",{\"1\":{\"304\":1}}],[\"在配置文件中开启日志文件\",{\"1\":{\"302\":1}}],[\"在右上角的下拉框中选择指定的tomcat模板\",{\"1\":{\"2760\":1}}],[\"在右边进行设置\",{\"1\":{\"2743\":1}}],[\"在弹出的页面中\",{\"1\":{\"2734\":1}}],[\"在<host>标签体中配置\",{\"1\":{\"2716\":1}}],[\"在<bean\",{\"1\":{\"506\":1}}],[\"在返回给浏览器\",{\"1\":{\"2695\":1}}],[\"在返回bean前做一些初始化操作\",{\"1\":{\"514\":1}}],[\"在webapps下创建项目\",{\"0\":{\"2713\":1}}],[\"在webapps下部署\",{\"0\":{\"2712\":1}}],[\"在web服务器软件中\",{\"1\":{\"2694\":1}}],[\"在windows中需要手动设置隐藏\",{\"1\":{\"801\":1}}],[\"在这方面的处理比较麻烦\",{\"1\":{\"3477\":1}}],[\"在这种情况下\",{\"1\":{\"3410\":1,\"3411\":1}}],[\"在这个查询中\",{\"1\":{\"2683\":1}}],[\"在这里配置springboot版本\",{\"1\":{\"96\":1}}],[\"在较为完善的数据库连接池实现中\",{\"1\":{\"2667\":1}}],[\"在减少系统消耗的基础上\",{\"1\":{\"2667\":1}}],[\"在主分片上面执行请求\",{\"1\":{\"3407\":1}}],[\"在主机上查看防火墙是关闭状态\",{\"1\":{\"3349\":1}}],[\"在主节点上修改集群配置信息\",{\"1\":{\"3332\":1}}],[\"在主节点上创建一个节点注册token\",{\"1\":{\"3331\":1}}],[\"在主程序\",{\"1\":{\"2661\":1}}],[\"在主配置文件中指定要引入哪个环境的配置文件\",{\"1\":{\"275\":1}}],[\"在getforlist和getvalue方法中\",{\"1\":{\"2649\":1}}],[\"在代码中加载配置文件\",{\"1\":{\"2549\":1}}],[\"在代码块内定义\",{\"1\":{\"1076\":1}}],[\"在查看mysql\",{\"1\":{\"2539\":1}}],[\"在支持函数式编程的语言了\",{\"1\":{\"2390\":1}}],[\"在servlet中有一个servletcontext对象\",{\"1\":{\"2925\":1}}],[\"在servlet实现类的\",{\"1\":{\"2819\":1}}],[\"在servlet实例化之后\",{\"1\":{\"2796\":1}}],[\"在service方法中\",{\"1\":{\"2831\":1}}],[\"在sdk选项中切换指定的sdk版本\",{\"1\":{\"2355\":1}}],[\"在spring\",{\"1\":{\"562\":1}}],[\"在springboot中整合mongodb就需要添加spring\",{\"1\":{\"3747\":1}}],[\"在springboot中读取maven设置的环境即可\",{\"1\":{\"281\":1}}],[\"在springboot项目的bom\",{\"1\":{\"116\":1}}],[\"在此之前先了解下正排索引\",{\"1\":{\"3419\":1}}],[\"在此方法中\",{\"1\":{\"2345\":1}}],[\"在此时间之内\",{\"1\":{\"2265\":1}}],[\"在此模式中\",{\"1\":{\"997\":1}}],[\"在接收端\",{\"1\":{\"2232\":1}}],[\"在数据库领域中\",{\"1\":{\"3495\":1}}],[\"在数据表实现类继承basedao时\",{\"1\":{\"2651\":1}}],[\"在数据表的实现类中\",{\"1\":{\"2650\":1}}],[\"在数据报中包含了发送端的ip地址和端口号以及接收端的ip地址和端口号\",{\"1\":{\"2229\":1}}],[\"在数组中查询指定元素\",{\"1\":{\"894\":1}}],[\"在制定协议时\",{\"1\":{\"2200\":1}}],[\"在对用户分配\",{\"1\":{\"3696\":1}}],[\"在对象序列化后\",{\"1\":{\"2158\":1}}],[\"在对应要定时执行的操作上方\",{\"1\":{\"499\":1}}],[\"在指针位置进行写入\",{\"0\":{\"2139\":1}}],[\"在指定的millitime毫秒时间内\",{\"1\":{\"1727\":1}}],[\"在指定位置插入内容\",{\"1\":{\"703\":1}}],[\"在任意位置进行读写\",{\"1\":{\"2137\":1}}],[\"在outputstream\",{\"1\":{\"2123\":1}}],[\"在unicode\",{\"1\":{\"2111\":1}}],[\"在utf8字符集中\",{\"1\":{\"674\":1}}],[\"在节点流上创造缓冲流\",{\"1\":{\"2084\":1}}],[\"在相应的节点流之上\",{\"1\":{\"2075\":1}}],[\"在输出的过程中\",{\"1\":{\"2058\":1}}],[\"在读取文件时\",{\"1\":{\"2045\":1}}],[\"在读取前我们一般需要使用hasnext\",{\"1\":{\"885\":1,\"1006\":1}}],[\"在已存在的流\",{\"1\":{\"2023\":1,\"2028\":1}}],[\"在泛型方法中可以定义泛型参数\",{\"1\":{\"1976\":1}}],[\"在本类或本接口中即代表某种类型\",{\"1\":{\"1969\":1}}],[\"在原有的hashmap底层结构基础上\",{\"1\":{\"1913\":1}}],[\"在原有功能基础上实现了多级缓存\",{\"1\":{\"487\":1}}],[\"在扩容方面\",{\"1\":{\"1877\":1}}],[\"在调用it\",{\"1\":{\"1845\":1}}],[\"在调用时可以对属性进行修改\",{\"1\":{\"1282\":1}}],[\"在当前目录生成证书\",{\"1\":{\"3726\":1}}],[\"在当前目录下生成了两个class文件\",{\"1\":{\"1049\":1}}],[\"在当前线程被notify后\",{\"1\":{\"1800\":1}}],[\"在当前线程中调用方法\",{\"1\":{\"1800\":1,\"1801\":1}}],[\"在其他目录下创建项目\",{\"0\":{\"2714\":1}}],[\"在其他语言中是有关联数组的\",{\"1\":{\"1823\":1}}],[\"在其他的语言中\",{\"1\":{\"985\":1}}],[\"在其上加锁\",{\"1\":{\"1772\":1}}],[\"在方式一\",{\"1\":{\"1770\":1}}],[\"在方法内通过newinstance\",{\"1\":{\"2605\":1}}],[\"在方法内定义\",{\"1\":{\"1076\":1}}],[\"在方法声明中用throws语句可以声明抛出异常的列表\",{\"1\":{\"1597\":1}}],[\"在方法调用之前\",{\"1\":{\"1407\":1}}],[\"在方法体之外\",{\"1\":{\"1786\":1}}],[\"在方法体内部声明的变量\",{\"1\":{\"1076\":1}}],[\"在方法体外\",{\"1\":{\"1076\":1}}],[\"在方法上加\",{\"1\":{\"202\":1}}],[\"在继承thread类创建多线程的方式中\",{\"1\":{\"1759\":1}}],[\"在实现了监听器接口的类上添加\",{\"1\":{\"2974\":1}}],[\"在实现runnable接口创建多线程的方式中\",{\"1\":{\"1759\":1}}],[\"在实例化集合类时\",{\"1\":{\"1959\":1}}],[\"在实例化以后\",{\"1\":{\"1921\":1}}],[\"在实际开发中\",{\"1\":{\"1312\":1,\"1400\":1}}],[\"在实际的项目中\",{\"1\":{\"33\":1}}],[\"在某些情况下\",{\"1\":{\"3640\":1}}],[\"在某些场景进行数据\",{\"1\":{\"3113\":1}}],[\"在某种特殊情况下\",{\"1\":{\"1749\":1}}],[\"在某个controller添加日志记录\",{\"1\":{\"288\":1}}],[\"在它的一个完整的生命周期中通常要经历如下的五种状态\",{\"1\":{\"1749\":1}}],[\"在线程a中调用线程b的join\",{\"1\":{\"1727\":1,\"1729\":1}}],[\"在里面放入我们要执行的代码\",{\"1\":{\"1720\":1}}],[\"在保护模式下不会对其他进程产生影响\",{\"1\":{\"1688\":1}}],[\"在反射的\",{\"1\":{\"1679\":1}}],[\"在1\",{\"1\":{\"1667\":1}}],[\"在源文件中有效\",{\"1\":{\"1659\":1}}],[\"在源文件中嵌入一些补充信息\",{\"1\":{\"1635\":1}}],[\"在源文件中显式的使用import结构导入指定包下的类\",{\"1\":{\"1341\":1}}],[\"在枚举对象中可以单独重写接口中的方法\",{\"1\":{\"1630\":1}}],[\"在枚举值后面加\",{\"1\":{\"1628\":1}}],[\"在出了try结构以后\",{\"1\":{\"1594\":1}}],[\"在finally里面关闭资源\",{\"1\":{\"1592\":1}}],[\"在for循环外定义\",{\"1\":{\"1181\":1}}],[\"在没有写finally的情况\",{\"1\":{\"1588\":1}}],[\"在执行过程中\",{\"1\":{\"1588\":1,\"1756\":1,\"1773\":1}}],[\"在cluster目录下复刻两个节点\",{\"1\":{\"3338\":1}}],[\"在class文件中有效\",{\"1\":{\"1659\":1}}],[\"在cmd中运行命令\",{\"1\":{\"2991\":1}}],[\"在catch语句块中是对异常对象进行处理的代码\",{\"1\":{\"1585\":1}}],[\"在compass中\",{\"1\":{\"3682\":1}}],[\"在compareto\",{\"1\":{\"744\":1}}],[\"在controller类中\",{\"1\":{\"647\":1}}],[\"在子类中调用父类\",{\"0\":{\"1518\":1}}],[\"在子类中可以根据需要对从父类中继承来的方法进行改造\",{\"1\":{\"1370\":1}}],[\"在电脑上使用usb\",{\"1\":{\"1512\":1}}],[\"在整个系统运行过程中\",{\"1\":{\"1491\":1}}],[\"在静态的方法内\",{\"1\":{\"1484\":1}}],[\"在设计类时\",{\"1\":{\"1472\":1}}],[\"在局部内部类的方法中\",{\"1\":{\"1458\":1}}],[\"在外部引用它时必须给出完整的名称\",{\"1\":{\"1449\":1}}],[\"在行进行string与其它类型数据的连接操作时\",{\"1\":{\"1435\":1}}],[\"在多态情况下\",{\"1\":{\"1404\":1}}],[\"在堆内存的方法区中就产生了一个class类型的对象\",{\"1\":{\"2248\":1}}],[\"在堆内存中\",{\"1\":{\"1366\":1,\"1548\":1}}],[\"在堆空间中\",{\"1\":{\"1391\":1}}],[\"在构造器的首行\",{\"1\":{\"1386\":1}}],[\"在父类中需要同时访问这两个属性\",{\"1\":{\"1381\":1}}],[\"在定义一个native方法时\",{\"1\":{\"1357\":1}}],[\"在类上使用\",{\"1\":{\"2780\":1}}],[\"在类上面使用注解\",{\"1\":{\"507\":1}}],[\"在类\",{\"1\":{\"1969\":1}}],[\"在类路径\",{\"1\":{\"1678\":1}}],[\"在类中写非空参构造器时\",{\"1\":{\"1388\":1}}],[\"在类中声明的位置的不同\",{\"1\":{\"1273\":1}}],[\"在类前面加上包名就行\",{\"1\":{\"1343\":1}}],[\"在类的定义时\",{\"1\":{\"1959\":1}}],[\"在类的内部创建枚举类的实例\",{\"1\":{\"1620\":1}}],[\"在类的多个构造器中\",{\"1\":{\"1387\":1}}],[\"在类的构造器中\",{\"0\":{\"1329\":1},\"1\":{\"1329\":1}}],[\"在类的方法中\",{\"0\":{\"1328\":1}}],[\"在类外部访问需要通过方法\",{\"1\":{\"1303\":1}}],[\"在不\",{\"1\":{\"3640\":1}}],[\"在不登录的情况下\",{\"1\":{\"3058\":1}}],[\"在不改变原有方法的情况下\",{\"1\":{\"2320\":1}}],[\"在不断的添加过程中\",{\"1\":{\"1924\":1}}],[\"在不同类中的访问机制\",{\"1\":{\"1263\":1}}],[\"在不停机的情况下\",{\"1\":{\"313\":1}}],[\"在程序的dos端口按ctrl\",{\"1\":{\"2704\":1}}],[\"在程序执行时\",{\"1\":{\"1370\":1}}],[\"在程序入口中调用类\",{\"1\":{\"1259\":1}}],[\"在程序包所在路径下\",{\"1\":{\"237\":1}}],[\"在初始化时就确定了\",{\"1\":{\"1228\":1}}],[\"在初始值后累加一次步长触发一次\",{\"1\":{\"501\":1}}],[\"在栈内存以栈的结构储存数组的标识符\",{\"1\":{\"1227\":1}}],[\"在循环体必须执行一次的时候\",{\"1\":{\"1190\":1}}],[\"在计算机底层\",{\"1\":{\"1121\":1}}],[\"在编译时就会进行\",{\"1\":{\"1957\":1}}],[\"在编译之后内部类会被编译成独立的\",{\"1\":{\"1460\":1}}],[\"在编译之后都使用java虚拟机中的int数据类型来代替\",{\"1\":{\"1108\":1}}],[\"在编写程序时\",{\"1\":{\"1564\":1}}],[\"在编码的过程中就不可避免地会接触多种软件环境\",{\"1\":{\"35\":1}}],[\"在哪个\",{\"1\":{\"1072\":1}}],[\"在创建索引时\",{\"1\":{\"3506\":1}}],[\"在创建的对象中\",{\"1\":{\"1133\":1}}],[\"在创建matcher对象后\",{\"1\":{\"1005\":1}}],[\"在创建pattern对象的时候\",{\"1\":{\"997\":1}}],[\"在创建springboot工程时\",{\"1\":{\"223\":1}}],[\"在创建springboot项目时\",{\"1\":{\"120\":1}}],[\"在postman中向es服务器发post请求\",{\"1\":{\"3153\":1}}],[\"在pom\",{\"1\":{\"102\":1}}],[\"在project\",{\"1\":{\"2790\":1}}],[\"在person类中重写equals后\",{\"1\":{\"910\":1}}],[\"在写入完成后\",{\"1\":{\"3518\":1}}],[\"在写入一个文件时\",{\"1\":{\"2045\":1}}],[\"在写出文件时\",{\"1\":{\"830\":1,\"2083\":1}}],[\"在写代码时\",{\"1\":{\"159\":2}}],[\"在init方法的参数中有\",{\"1\":{\"2804\":1}}],[\"在io模式下\",{\"1\":{\"829\":1,\"2082\":1}}],[\"在ideal中\",{\"1\":{\"1897\":1}}],[\"在idea右边选择database\",{\"1\":{\"588\":1}}],[\"在idea中可以快速创建servlet实现类\",{\"1\":{\"2787\":1}}],[\"在idea中的输出目录\",{\"0\":{\"2723\":1}}],[\"在idea中配置的临时参数就是通过这个位置传递到我们的程序中的\",{\"1\":{\"259\":1}}],[\"在idea中\",{\"1\":{\"258\":1,\"574\":1}}],[\"在idea中进行配置\",{\"1\":{\"179\":1}}],[\"在绝对值的角度\",{\"1\":{\"784\":3}}],[\"在jdbc中\",{\"1\":{\"2636\":1}}],[\"在jdk1\",{\"1\":{\"2015\":1}}],[\"在jdk8时\",{\"1\":{\"1869\":1}}],[\"在jdk5\",{\"1\":{\"1710\":1}}],[\"在jdk中java\",{\"1\":{\"984\":1,\"986\":1}}],[\"在jdk中\",{\"1\":{\"746\":1}}],[\"在javaweb开发中\",{\"1\":{\"2808\":1,\"2815\":1}}],[\"在javaweb\",{\"1\":{\"2758\":1}}],[\"在java\",{\"1\":{\"2386\":1}}],[\"在javabean中要求提供一个public的空参构造器\",{\"1\":{\"2285\":1}}],[\"在java的uri中\",{\"1\":{\"2243\":1}}],[\"在java7\",{\"1\":{\"2164\":1}}],[\"在java里\",{\"1\":{\"1709\":1}}],[\"在java8中能够得到方法参数的名称\",{\"1\":{\"1665\":1}}],[\"在javaee\",{\"1\":{\"1636\":1}}],[\"在javase中\",{\"1\":{\"1636\":1}}],[\"在java语言中\",{\"1\":{\"1558\":1}}],[\"在java语言范畴中\",{\"1\":{\"1253\":1}}],[\"在java类中使用super来调用父类中的指定成员\",{\"1\":{\"1379\":1}}],[\"在java中储存数据\",{\"1\":{\"3215\":1}}],[\"在java中声明类\",{\"1\":{\"1348\":1}}],[\"在java中不可以写成3<x<6\",{\"1\":{\"1152\":1}}],[\"在java中\",{\"1\":{\"986\":1,\"1108\":1,\"1181\":1,\"1253\":1,\"1756\":1,\"2526\":1}}],[\"在java中使用mongodb需要指明操作的库\",{\"1\":{\"389\":1}}],[\"在开发中\",{\"1\":{\"705\":1,\"1502\":1,\"1506\":1}}],[\"在开发阶段使用的环境\",{\"1\":{\"36\":1}}],[\"在功能上\",{\"1\":{\"687\":1}}],[\"在表现层做统一的异常处理\",{\"1\":{\"645\":1}}],[\"在导入额外的配置时按照特定的顺序进行排序\",{\"1\":{\"567\":1}}],[\"在应用程序初始化阶段不导入所有配置\",{\"1\":{\"567\":1}}],[\"在他之前的代码中已经将\",{\"1\":{\"567\":1}}],[\"在专门配置bean的配置文件中\",{\"1\":{\"506\":1}}],[\"在引导类上开启定时任务功能\",{\"1\":{\"498\":1}}],[\"在application\",{\"1\":{\"483\":1,\"3750\":1}}],[\"在es7\",{\"1\":{\"414\":1}}],[\"在操作redis时\",{\"1\":{\"379\":1}}],[\"在mongodb中通过角色对用户授予相应数据库资源的操作权限\",{\"1\":{\"3697\":1}}],[\"在mysql下建议关闭\",{\"1\":{\"2674\":1}}],[\"在mysqld项中添加default\",{\"1\":{\"368\":1}}],[\"在myannotation注解上使用元注解\",{\"1\":{\"1668\":1}}],[\"在minutes域使用5\",{\"1\":{\"501\":1}}],[\"在main所在类中声明的普通方法\",{\"1\":{\"1280\":1}}],[\"在manifest\",{\"1\":{\"247\":1}}],[\"在maven中提供有打包的指令\",{\"1\":{\"236\":1}}],[\"在\",{\"1\":{\"342\":1,\"545\":1,\"985\":1,\"1366\":1,\"2123\":1,\"2556\":1,\"2717\":1,\"2751\":1,\"3134\":1,\"3140\":1,\"3148\":1,\"3158\":1,\"3183\":1,\"3186\":1,\"3189\":1,\"3296\":1,\"3487\":1,\"3504\":2,\"3527\":1,\"3528\":1,\"3623\":1,\"3698\":1}}],[\"在启动节点时\",{\"1\":{\"3329\":1}}],[\"在启动类上添加注解\",{\"1\":{\"320\":1}}],[\"在启动类上开启监控\",{\"0\":{\"320\":1}}],[\"在启动服务的时候\",{\"1\":{\"256\":1}}],[\"在字母前使用数字\",{\"1\":{\"299\":1}}],[\"在控制台打印日志时\",{\"1\":{\"297\":1}}],[\"在该响应时间的范围内没有做出响应应答\",{\"1\":{\"3533\":1}}],[\"在该节点上\",{\"1\":{\"3329\":1}}],[\"在该区域中的数据会被原样展示\",{\"1\":{\"3020\":1}}],[\"在该注解中\",{\"1\":{\"2818\":1}}],[\"在该范围内\",{\"1\":{\"761\":1}}],[\"在该控制器中创建日志对象\",{\"1\":{\"289\":1}}],[\"在该阶段中主要由测试人员\",{\"1\":{\"30\":1}}],[\"在resource目录下设置如下配置文件\",{\"1\":{\"274\":1}}],[\"在resources目录下创建application\",{\"1\":{\"165\":1}}],[\"在使用compass连接副本集时\",{\"1\":{\"3678\":1}}],[\"在使用\",{\"1\":{\"3453\":1}}],[\"在使用springboot时\",{\"1\":{\"3222\":1}}],[\"在使用开发基于数据库的web程序时\",{\"0\":{\"2661\":1}}],[\"在使用这些流类时\",{\"1\":{\"2074\":1}}],[\"在使用注解时\",{\"1\":{\"1647\":1}}],[\"在使用向导创建springboot工程时\",{\"1\":{\"239\":1}}],[\"在使用maven开发时\",{\"1\":{\"115\":1}}],[\"在tomcat\",{\"1\":{\"3054\":2}}],[\"在tomcat服务器的一个配置文件\",{\"1\":{\"2933\":1}}],[\"在tomcat服务器的配置文件中进行配置\",{\"1\":{\"179\":1}}],[\"在tomcat目录下的webapps目录下创建一个目录\",{\"1\":{\"2713\":1}}],[\"在thread子类中就是this\",{\"1\":{\"1727\":1}}],[\"在try结构中声明的变量\",{\"1\":{\"1594\":1}}],[\"在test中测试api\",{\"1\":{\"231\":1}}],[\"在和引导类相同的包中\",{\"1\":{\"229\":1}}],[\"在需要写入字符而不是写入字节的情况下\",{\"1\":{\"2120\":1}}],[\"在需要使用orm类的地方\",{\"1\":{\"2651\":1}}],[\"在需要使用配置的地方\",{\"1\":{\"554\":1}}],[\"在需要使用这组配置的类中\",{\"1\":{\"200\":1}}],[\"在需要手动输出日志的类上同样加上\",{\"1\":{\"309\":1}}],[\"在需要开启校验功能的类上使用注解\",{\"1\":{\"219\":1}}],[\"在进行synchronized\",{\"1\":{\"1770\":1}}],[\"在进行divide运算时\",{\"1\":{\"783\":1}}],[\"在进行整合之前先梳理一下整合的思想\",{\"1\":{\"354\":1}}],[\"在进行属性绑定时\",{\"1\":{\"210\":1}}],[\"在进行项目开发时\",{\"1\":{\"123\":1}}],[\"在yml配置文件中定义要绑定的属性\",{\"0\":{\"203\":1}}],[\"在yml中可以使用\",{\"1\":{\"149\":1}}],[\"在更高层级中配置关闭热部署\",{\"1\":{\"197\":1}}],[\"在属性名书写位置的下方使用减号作为数据开始符号\",{\"1\":{\"148\":1}}],[\"在项目代码里写死虚拟路径\",{\"1\":{\"2916\":1}}],[\"在项目配置菜单\",{\"1\":{\"2355\":1}}],[\"在项目的根目录添加\",{\"1\":{\"578\":1}}],[\"在项目包下创建controller包\",{\"1\":{\"109\":1}}],[\"在项目上线之前\",{\"1\":{\"31\":1}}],[\"并启动所有节点\",{\"1\":{\"3739\":1}}],[\"并上传到服务器的\",{\"1\":{\"3560\":1}}],[\"并为es分片31g的内存\",{\"1\":{\"3504\":1}}],[\"并为每个字符规定了唯一确定的编号\",{\"1\":{\"2111\":1}}],[\"并删除绝大部分标点\",{\"1\":{\"3466\":1}}],[\"并查看集群信息\",{\"1\":{\"3378\":1}}],[\"并修改配置文件\",{\"1\":{\"3327\":1}}],[\"并生成默认密码\",{\"1\":{\"3325\":1}}],[\"并自动生成用于配置tls的密钥和证书\",{\"1\":{\"3325\":1}}],[\"并自动索引证书\",{\"1\":{\"3304\":1}}],[\"并自动调用server方法\",{\"1\":{\"2777\":1}}],[\"并假定它们能够相互发现彼此\",{\"1\":{\"3261\":1}}],[\"并一起提供索引和搜索功能\",{\"1\":{\"3260\":1}}],[\"并一一对应\",{\"1\":{\"2108\":1}}],[\"并指明排序方式\",{\"1\":{\"3243\":1}}],[\"并指定cookie存在的时间\",{\"1\":{\"3070\":1}}],[\"并指定cookie存活时间\",{\"1\":{\"3053\":1}}],[\"并指定跳转的页面\",{\"1\":{\"639\":1}}],[\"并指定版本\",{\"1\":{\"414\":1}}],[\"并手动设置一个\",{\"1\":{\"3214\":1}}],[\"并针对price进行分组\",{\"1\":{\"3189\":1}}],[\"并建立索引\",{\"1\":{\"3113\":1}}],[\"并调取seesion对象的值\",{\"1\":{\"3068\":1}}],[\"并调用service方法\",{\"1\":{\"2831\":1}}],[\"并调用start\",{\"1\":{\"1720\":1,\"1809\":1}}],[\"并调用重写的run方法\",{\"1\":{\"1739\":1}}],[\"并调用对象中的run方法\",{\"1\":{\"1718\":1}}],[\"并逐渐将其模块模块化\",{\"1\":{\"2987\":1}}],[\"并传入参数\",{\"1\":{\"2862\":1}}],[\"并完成了对象的创建\",{\"1\":{\"2837\":1}}],[\"并完成单元测试\",{\"1\":{\"27\":1}}],[\"并会将服务的响应返回给请求处\",{\"1\":{\"2801\":1}}],[\"并配置tomcat和servlet\",{\"1\":{\"2778\":1}}],[\"并重写接口中所有方法\",{\"1\":{\"2779\":1}}],[\"并重写所有方法\",{\"1\":{\"2777\":1}}],[\"并重写connectdb方法\",{\"1\":{\"2321\":1}}],[\"并重写compareto方法\",{\"1\":{\"1902\":1}}],[\"并重写call\",{\"1\":{\"1807\":1}}],[\"并由web服务器运行servlet\",{\"1\":{\"2770\":1}}],[\"并进行初始化\",{\"1\":{\"3738\":1}}],[\"并进行一些操作\",{\"1\":{\"2808\":1,\"2815\":1}}],[\"并进行启动\",{\"1\":{\"2760\":1}}],[\"并进行基本的application配置\",{\"1\":{\"583\":1}}],[\"并输入<h1>hi\",{\"1\":{\"2758\":1}}],[\"并点击右边的\",{\"1\":{\"2757\":1}}],[\"并实现customerdao接口\",{\"1\":{\"2644\":1}}],[\"并实现一个接口\",{\"0\":{\"1630\":1}}],[\"并给占位符赋值\",{\"1\":{\"2600\":1,\"2603\":1}}],[\"并给对象属性赋值\",{\"1\":{\"1621\":1,\"1626\":1}}],[\"并接受它的不足\",{\"1\":{\"3452\":1}}],[\"并接受数据库服务器返回的结果\",{\"1\":{\"2555\":1}}],[\"并接收数据\",{\"1\":{\"409\":1}}],[\"并统一放回到一个集合中返回\",{\"1\":{\"2467\":1}}],[\"并产生结果\",{\"1\":{\"2440\":1}}],[\"并做一些增强\",{\"1\":{\"2338\":1}}],[\"并声明producecloth方法用于生产服装\",{\"1\":{\"2326\":1}}],[\"并掉用user\",{\"1\":{\"2321\":1}}],[\"并能直接操作任意对象的内部属性及方法\",{\"1\":{\"2246\":1}}],[\"并能够将文件中的java基本数据类型和string数据读取还愿\",{\"1\":{\"2122\":1}}],[\"并获取返回值\",{\"1\":{\"2345\":1}}],[\"并获取请求的套接字对象\",{\"1\":{\"2225\":1}}],[\"并获取线程名\",{\"1\":{\"1728\":1}}],[\"并绑定到指定端口上\",{\"1\":{\"2221\":1}}],[\"并使编码无国界\",{\"1\":{\"2111\":1}}],[\"并使用1\",{\"1\":{\"3611\":1}}],[\"并使用了orm对象来处理查询的数据\",{\"1\":{\"2597\":1}}],[\"并使用一个名字命名\",{\"1\":{\"1207\":1}}],[\"并使用缓存技术进行数据的快速操作\",{\"1\":{\"464\":1}}],[\"并添加元素\",{\"1\":{\"1842\":1}}],[\"并释放同步监视器\",{\"1\":{\"1799\":1}}],[\"并释放自己占有的锁\",{\"1\":{\"1789\":1}}],[\"并释放锁\",{\"1\":{\"1774\":1,\"1804\":1}}],[\"并临时中止自己的执行\",{\"1\":{\"1749\":1}}],[\"并列执行的才是多线程\",{\"1\":{\"1709\":1}}],[\"并用发给服务端的秘钥进行解密\",{\"1\":{\"3295\":1}}],[\"并用这个符号表的索引对应实际的空间\",{\"1\":{\"1703\":1}}],[\"并用break根据条件退出循环\",{\"1\":{\"1186\":1}}],[\"并把实现类的示例对象作为实参传入\",{\"1\":{\"2338\":1}}],[\"并把我们的变量名\",{\"1\":{\"1703\":1}}],[\"并把该\",{\"1\":{\"1637\":1}}],[\"并发效率会有所下降\",{\"1\":{\"2674\":1}}],[\"并发进程\",{\"1\":{\"1793\":1}}],[\"并发\",{\"1\":{\"1690\":1}}],[\"并发所有的文件修改都会触发热部署\",{\"1\":{\"192\":1}}],[\"并行写入副本的最大延时\",{\"1\":{\"3444\":1}}],[\"并行的操作\",{\"1\":{\"3365\":1}}],[\"并行流\",{\"0\":{\"2445\":1}}],[\"并行\",{\"1\":{\"1690\":1}}],[\"并行与并发\",{\"0\":{\"1690\":1}}],[\"并行执行多个线程\",{\"1\":{\"1687\":1}}],[\"并打印出来\",{\"1\":{\"1680\":2}}],[\"并测试枚举类的方法\",{\"0\":{\"1631\":1}}],[\"并需要重写接口中的方法\",{\"1\":{\"1630\":1}}],[\"并在下次请求时携带cookie\",{\"0\":{\"3050\":1}}],[\"并在下一次请求时携带cookie\",{\"1\":{\"3039\":1}}],[\"并在方法中判断请求方式是get还是post\",{\"1\":{\"2862\":1}}],[\"并在service方法中打印hello\",{\"1\":{\"2779\":1}}],[\"并在该方法中\",{\"1\":{\"2326\":1}}],[\"并在构造器中初始化\",{\"1\":{\"1620\":1}}],[\"并在生成的boot打包文件\",{\"1\":{\"283\":1}}],[\"并抛出\",{\"1\":{\"1567\":1,\"1606\":1}}],[\"并易于维护\",{\"1\":{\"1565\":1}}],[\"并保存为静态属性\",{\"1\":{\"1488\":1}}],[\"并保存项目\",{\"1\":{\"105\":1}}],[\"并根据子类的需求创建不同的方法体\",{\"1\":{\"1370\":1}}],[\"并计算所有偶数的和及偶数的个数\",{\"1\":{\"1189\":1}}],[\"并判断读入的正数和负数的个数\",{\"1\":{\"1186\":1}}],[\"并创建以下三个账户\",{\"1\":{\"3708\":1}}],[\"并创建了3个证书\",{\"1\":{\"3292\":1,\"3326\":1}}],[\"并创建了一个新的\",{\"1\":{\"3114\":1}}],[\"并创建了数组groups和locals\",{\"1\":{\"1004\":1}}],[\"并创建一个实现同样接口的类\",{\"1\":{\"2345\":1}}],[\"并创建一个rest风格的controller\",{\"1\":{\"109\":1}}],[\"并对访问量进行升序排列\",{\"1\":{\"3611\":1}}],[\"并对这些信息进行多维度的分析\",{\"1\":{\"3541\":1}}],[\"并对\",{\"1\":{\"3532\":1}}],[\"并对每个不同的单词赋予唯一的单词编号\",{\"1\":{\"3432\":1}}],[\"并对节点进行如下配置\",{\"1\":{\"3337\":1}}],[\"并对category字段里的米字进行高亮显示\",{\"1\":{\"3194\":1}}],[\"并对collection的很多方法进行了重载\",{\"1\":{\"941\":1,\"1878\":1}}],[\"并对bean进行初始化\",{\"1\":{\"566\":1}}],[\"并取出指针指向的集合元素\",{\"1\":{\"925\":1,\"1840\":1}}],[\"并取名为tom\",{\"1\":{\"520\":1}}],[\"并将内容刷新到磁盘\",{\"1\":{\"3527\":1}}],[\"并将这些请求并行转发到每个包含主分片的节点主机\",{\"1\":{\"3417\":1}}],[\"并将这些静态数据转换成方法区的运行时数据结构\",{\"1\":{\"2274\":1}}],[\"并将索引分成3个主分片和一份副本\",{\"1\":{\"3379\":1}}],[\"并将最终结果返回給客户端\",{\"1\":{\"3376\":1}}],[\"并将授权信息返回\",{\"1\":{\"3325\":1,\"3328\":1}}],[\"并将报错信息忽略\",{\"1\":{\"3222\":1}}],[\"并将拆解后的数据报错到倒排索引当中\",{\"1\":{\"3175\":1}}],[\"并将查找的结果反馈给用户的检索方式\",{\"1\":{\"3100\":1}}],[\"并将jar包导入项目\",{\"1\":{\"2671\":1}}],[\"并将子集合全部转化为stream\",{\"1\":{\"2472\":1}}],[\"并将自己调用的方法名\",{\"1\":{\"2345\":1}}],[\"并将原有的数据复制过来\",{\"1\":{\"1924\":1}}],[\"并将数据加到elementdata\",{\"1\":{\"1869\":1}}],[\"并将此对象抛出\",{\"1\":{\"1566\":1}}],[\"并将交集返回到当前的集合中\",{\"1\":{\"914\":1}}],[\"并将差集从当前集合中移除\",{\"1\":{\"913\":1}}],[\"并将方法的return结果缓存\",{\"1\":{\"468\":1}}],[\"并继续向下执行代码\",{\"1\":{\"887\":1,\"1008\":1}}],[\"并非真正的开启用户验证\",{\"1\":{\"3715\":1}}],[\"并非真正解决了异常\",{\"1\":{\"1563\":1}}],[\"并非每个节点都有一个分片\",{\"1\":{\"3373\":1}}],[\"并非替换关系\",{\"1\":{\"2674\":1}}],[\"并非在实例化类时确定\",{\"1\":{\"1982\":1}}],[\"并非一定是在高优先级线程之后才被调用\",{\"1\":{\"1736\":1}}],[\"并非专门用于结束循环的\",{\"1\":{\"1196\":1}}],[\"并非是空数组过去的\",{\"1\":{\"817\":1,\"2056\":1}}],[\"并非项目测试\",{\"1\":{\"29\":1}}],[\"并返回结果集\",{\"1\":{\"2597\":1,\"2600\":1,\"2603\":1,\"2613\":1}}],[\"并返回该行的数据\",{\"1\":{\"2588\":1}}],[\"并返回preparestatemet对象\",{\"1\":{\"2566\":1}}],[\"并返回一个新集合是\",{\"1\":{\"2472\":1}}],[\"并返回value\",{\"1\":{\"961\":1}}],[\"并返回读到的数据\",{\"1\":{\"829\":1}}],[\"并返回false\",{\"1\":{\"804\":1}}],[\"并返回初始化后的bean\",{\"1\":{\"550\":1}}],[\"并提供了真的不同请求方式的请求方法\",{\"1\":{\"2808\":1,\"2815\":1}}],[\"并提供\",{\"1\":{\"777\":1}}],[\"并填写增强的实体类作为泛型\",{\"1\":{\"637\":1}}],[\"并设置好编码\",{\"1\":{\"2896\":1}}],[\"并设置线程名\",{\"1\":{\"1728\":1}}],[\"并设置\",{\"1\":{\"1304\":1}}],[\"并设置要读取的配置的前缀\",{\"1\":{\"553\":1}}],[\"并设置新增文件的时机\",{\"1\":{\"303\":1}}],[\"并通过用户认证连接副本集\",{\"1\":{\"3729\":1}}],[\"并通过以下请求体进行分片\",{\"1\":{\"3379\":1}}],[\"并通过order指定排序方式\",{\"1\":{\"3185\":1}}],[\"并通过war包部署\",{\"0\":{\"2714\":1}}],[\"并通过集合获取stream\",{\"1\":{\"2458\":1}}],[\"并通过\",{\"1\":{\"2021\":1}}],[\"并通过编号的方式对这些数据进行统一管理\",{\"1\":{\"1207\":1}}],[\"并通过配置文件为bean提供属性\",{\"1\":{\"550\":1}}],[\"并通过ui界面展示对应信息\",{\"1\":{\"317\":1}}],[\"并加载配置信息\",{\"0\":{\"1940\":1}}],[\"并加载该bean\",{\"1\":{\"528\":1}}],[\"并加入ioc容器\",{\"1\":{\"365\":1}}],[\"并没有关闭数据库的物理连接\",{\"1\":{\"2669\":1}}],[\"并没有预装驱动\",{\"1\":{\"2535\":1}}],[\"并没有创建长度为10的数组\",{\"1\":{\"1869\":1}}],[\"并没有真正将异常处理掉\",{\"1\":{\"1601\":1}}],[\"并没有重新\",{\"1\":{\"1377\":1}}],[\"并没有使用springboot集成的es\",{\"1\":{\"415\":1}}],[\"并没有主动引用application\",{\"1\":{\"159\":1}}],[\"并有一个返回值\",{\"1\":{\"404\":1}}],[\"并勾选\",{\"1\":{\"319\":1}}],[\"并不重要\",{\"1\":{\"3619\":1}}],[\"并不是所有的情况都需要每秒刷新\",{\"1\":{\"3453\":1}}],[\"并不是所有的java代码\",{\"1\":{\"2771\":1}}],[\"并不是强制使用数据对象\",{\"1\":{\"3215\":1}}],[\"并不是真正的关闭了链接\",{\"1\":{\"2632\":1}}],[\"并不是泛型方法\",{\"1\":{\"1978\":1}}],[\"并不是对象\",{\"1\":{\"1266\":1}}],[\"并不意味着只有当高优先级的线程执行完以后\",{\"1\":{\"1735\":1}}],[\"并不会提供异常信息\",{\"1\":{\"2163\":1}}],[\"并不会报异常\",{\"1\":{\"2058\":1}}],[\"并不会处理异常\",{\"1\":{\"1598\":1}}],[\"并不会去父类中查找\",{\"1\":{\"1383\":1}}],[\"并不提供实现体\",{\"1\":{\"1357\":1}}],[\"并不返回任何结果\",{\"1\":{\"978\":1}}],[\"并不包含当前的时间信息\",{\"1\":{\"712\":1}}],[\"并不能使用完整的redis功能\",{\"1\":{\"481\":1}}],[\"并不能完全与springboot版本保持一致\",{\"1\":{\"319\":1}}],[\"并不常用\",{\"1\":{\"230\":1}}],[\"并显示对应的信息\",{\"1\":{\"314\":1}}],[\"并制作成独立的配置文件\",{\"1\":{\"277\":1}}],[\"并执行mongodb命令\",{\"1\":{\"3567\":1}}],[\"并执行相应的处理\",{\"1\":{\"1635\":1}}],[\"并执行其方法体\",{\"1\":{\"1516\":1}}],[\"并执行\",{\"1\":{\"244\":1}}],[\"并交给了spring的ioc容器\",{\"1\":{\"132\":1}}],[\"并安装\",{\"1\":{\"115\":1}}],[\"并正式对外提供服务\",{\"1\":{\"38\":1}}],[\"并且进行启动\",{\"1\":{\"3737\":1}}],[\"并且当主库当掉时在不需要用户干预的情况下自动\",{\"1\":{\"3639\":1}}],[\"并且当我们要对这个索引中的文档进行索引\",{\"1\":{\"3360\":1}}],[\"并且小于2000的文档\",{\"1\":{\"3616\":1}}],[\"并且该节点自己也选举自己\",{\"1\":{\"3526\":1}}],[\"并且该值会作为参数传给它\",{\"1\":{\"2505\":1}}],[\"并且到达目的地时也许\",{\"1\":{\"3496\":1}}],[\"并且不会阻塞正在尝试的操作\",{\"1\":{\"3495\":1}}],[\"并且不再判断是否满足case了\",{\"1\":{\"1175\":1}}],[\"并且每个单词都有对应的含有该单词的文档列表即倒排列表\",{\"1\":{\"3432\":1}}],[\"并且每个分片拥有所在节点的全部资源\",{\"1\":{\"3392\":1}}],[\"并且将这些请求并行转\",{\"1\":{\"3415\":1}}],[\"并且尝试重新索引主分片的文档\",{\"1\":{\"3413\":1}}],[\"并且永远不会改变这个数量\",{\"1\":{\"3401\":1}}],[\"并且能够将我们的请求直接转发到存储我们所需文档的节点\",{\"1\":{\"3376\":1}}],[\"并且需要思考如何建立映射才能对性能更好\",{\"1\":{\"3364\":1}}],[\"并且创建request对象传递到service方法\",{\"1\":{\"2838\":1}}],[\"并且两个都是接口\",{\"1\":{\"2836\":1}}],[\"并且两个对象的\",{\"1\":{\"1885\":1}}],[\"并且在关闭连接时不抛出sql异常\",{\"1\":{\"2682\":1}}],[\"并且在编译期间会进行语法检查\",{\"1\":{\"1654\":1}}],[\"并且使用dbutils能极大简化jdbc编码的工作量\",{\"1\":{\"2679\":1}}],[\"并且保证安全性\",{\"1\":{\"2674\":1}}],[\"并且可以避免空指针异常\",{\"1\":{\"2495\":1}}],[\"并且可由jvm读入\",{\"1\":{\"1654\":2}}],[\"并且是在程序运行时根据需要动态创建目标类的代理对象\",{\"1\":{\"2325\":1}}],[\"并且后跟\",{\"1\":{\"2214\":1}}],[\"并且它实现了datainput\",{\"1\":{\"2128\":1}}],[\"并且没有释放锁l1的情况下\",{\"1\":{\"1794\":1}}],[\"并且具有更好的扩展性\",{\"1\":{\"1779\":1}}],[\"并且与\",{\"1\":{\"1652\":1}}],[\"并且\",{\"1\":{\"1650\":1,\"2171\":1}}],[\"并且main\",{\"1\":{\"1599\":1}}],[\"并且其他的开发者可以通过内部的jsp页面\",{\"1\":{\"1532\":1}}],[\"并且提供set\",{\"1\":{\"1530\":1}}],[\"并且以\",{\"1\":{\"997\":1}}],[\"并且java\",{\"1\":{\"709\":1}}],[\"并且还可以让你对bean的初始化进行更加细粒度的控制\",{\"1\":{\"526\":1}}],[\"并且还包含了账号密码\",{\"1\":{\"418\":1}}],[\"并且由测试人员测试通过之后\",{\"1\":{\"38\":1}}],[\"并且单元测试通过后\",{\"1\":{\"37\":1}}],[\"并出具测试报告\",{\"1\":{\"30\":1}}],[\"699z\",{\"1\":{\"3673\":2}}],[\"6s\",{\"1\":{\"3533\":1}}],[\"62<\",{\"1\":{\"3085\":1}}],[\"61\",{\"1\":{\"2193\":3}}],[\"61616\",{\"1\":{\"451\":1}}],[\"6的源码\",{\"1\":{\"1157\":1}}],[\"6的补码\",{\"1\":{\"1157\":1}}],[\"6的反码\",{\"1\":{\"1157\":2}}],[\"65530\",{\"1\":{\"3313\":2,\"3346\":2}}],[\"65535\",{\"1\":{\"813\":1,\"824\":1,\"2233\":1}}],[\"6500\",{\"1\":{\"3191\":1}}],[\"65kb\",{\"1\":{\"2608\":1}}],[\"65\",{\"1\":{\"1134\":1,\"1426\":1,\"2474\":2,\"3674\":1}}],[\"677327b6\",{\"1\":{\"845\":1,\"890\":1,\"895\":1}}],[\"63\",{\"1\":{\"777\":1}}],[\"6379\",{\"1\":{\"378\":1,\"383\":1,\"384\":1,\"483\":1}}],[\"64487fe22c64c9d9921960f8\",{\"1\":{\"3682\":1}}],[\"6447e68241b3272f43080f4d\",{\"1\":{\"3667\":1}}],[\"6432843354a1d1820aa07159\",{\"1\":{\"3587\":1}}],[\"64时\",{\"1\":{\"1926\":1}}],[\"64\",{\"1\":{\"674\":1,\"3287\":2,\"3289\":1,\"3318\":2,\"3320\":1,\"3504\":4}}],[\"64a4d9aaad5837556a80e329\",{\"1\":{\"409\":1}}],[\"66\",{\"1\":{\"674\":2}}],[\"683z\",{\"1\":{\"3670\":1}}],[\"680z\",{\"1\":{\"3670\":5}}],[\"68\",{\"1\":{\"674\":3}}],[\"600\",{\"1\":{\"3685\":1}}],[\"6000\",{\"1\":{\"2491\":2,\"3164\":1,\"3191\":1}}],[\"60\",{\"1\":{\"478\":2,\"3070\":3}}],[\"6kq0xegctciae3nyvbekla\",{\"1\":{\"423\":1}}],[\"6<\",{\"1\":{\"119\":1,\"355\":1}}],[\"6\",{\"0\":{\"103\":1,\"157\":1,\"168\":1,\"169\":1,\"170\":1,\"171\":1,\"172\":1,\"195\":1,\"196\":1,\"197\":1,\"228\":1,\"248\":1,\"334\":1,\"384\":1,\"409\":1,\"456\":1,\"502\":1,\"504\":1,\"532\":1,\"557\":1,\"569\":1,\"570\":1,\"571\":1,\"634\":1,\"635\":1,\"636\":1,\"637\":1,\"638\":1,\"695\":1,\"704\":1,\"721\":1,\"765\":1,\"784\":1,\"786\":1,\"793\":1,\"842\":1,\"857\":1,\"866\":1,\"873\":1,\"897\":1,\"910\":1,\"935\":1,\"950\":1,\"964\":1,\"983\":1,\"1001\":1,\"1018\":1,\"1019\":1,\"1020\":1,\"1074\":1,\"1075\":1,\"1076\":1,\"1097\":1,\"1123\":1,\"1134\":1,\"1212\":1,\"1213\":1,\"1214\":1,\"1223\":1,\"1241\":1,\"1260\":1,\"1283\":1,\"1321\":1,\"1345\":1,\"1358\":1,\"1365\":1,\"1366\":1,\"1367\":1,\"1368\":1,\"1407\":1,\"1443\":1,\"1461\":1,\"1485\":1,\"1510\":1,\"1582\":1,\"1590\":1,\"1591\":1,\"1592\":1,\"1603\":1,\"1629\":1,\"1630\":1,\"1631\":1,\"1690\":1,\"1705\":1,\"1786\":1,\"1798\":1,\"1804\":1,\"1817\":1,\"1818\":1,\"1829\":1,\"1833\":1,\"1846\":1,\"1856\":1,\"1870\":1,\"1879\":1,\"1888\":1,\"1907\":2,\"1941\":1,\"1982\":1,\"2018\":1,\"2026\":1,\"2027\":1,\"2028\":1,\"2040\":1,\"2086\":1,\"2087\":1,\"2113\":1,\"2140\":1,\"2154\":1,\"2155\":1,\"2156\":1,\"2157\":1,\"2168\":1,\"2186\":1,\"2207\":1,\"2226\":1,\"2227\":1,\"2243\":1,\"2254\":1,\"2255\":1,\"2256\":1,\"2257\":1,\"2258\":1,\"2265\":1,\"2266\":1,\"2267\":1,\"2268\":1,\"2269\":1,\"2304\":1,\"2356\":1,\"2366\":1,\"2378\":1,\"2482\":1,\"2493\":1,\"2522\":1,\"2562\":1,\"2571\":1,\"2594\":1,\"2613\":1,\"2625\":1,\"2626\":1,\"2676\":1,\"2684\":1,\"2691\":1,\"2705\":1,\"2813\":1,\"2814\":1,\"2815\":1,\"2842\":1,\"2926\":1,\"2939\":1,\"2940\":1,\"2941\":1,\"2942\":1,\"2967\":1,\"2977\":1,\"2984\":1,\"3000\":1,\"3014\":1,\"3031\":1,\"3053\":1,\"3069\":1,\"3080\":1,\"3298\":1,\"3323\":1,\"3354\":1,\"3365\":1,\"3366\":1,\"3367\":1,\"3447\":1,\"3459\":1,\"3518\":1,\"3602\":1,\"3647\":1,\"3704\":1,\"3715\":1,\"3777\":1,\"3783\":1},\"1\":{\"29\":1,\"84\":1,\"85\":1,\"147\":1,\"162\":2,\"329\":1,\"562\":1,\"588\":1,\"701\":1,\"702\":1,\"719\":1,\"784\":2,\"894\":1,\"932\":4,\"933\":3,\"934\":2,\"935\":1,\"1129\":1,\"1132\":1,\"1157\":2,\"1220\":1,\"1389\":1,\"1810\":1,\"1827\":1,\"1828\":1,\"1846\":1,\"1852\":1,\"1893\":1,\"1925\":4,\"1958\":1,\"2089\":1,\"2110\":1,\"2112\":1,\"2113\":1,\"2296\":1,\"2351\":2,\"2487\":1,\"2488\":1,\"2573\":1,\"2600\":1,\"2603\":6,\"2635\":1,\"2655\":1,\"2656\":1,\"2657\":1,\"2739\":1,\"2844\":1,\"2852\":1,\"2866\":1,\"2867\":1,\"2868\":1,\"2875\":2,\"2992\":1,\"3003\":1,\"3006\":1,\"3009\":1,\"3011\":1,\"3034\":1,\"3083\":1,\"3108\":1,\"3146\":1,\"3173\":1,\"3292\":1,\"3306\":1,\"3326\":1,\"3327\":1,\"3384\":1,\"3387\":3,\"3391\":3,\"3392\":2,\"3394\":1,\"3396\":1,\"3485\":1,\"3487\":1,\"3489\":1,\"3533\":1,\"3552\":1,\"3558\":1,\"3561\":1,\"3562\":2,\"3596\":1,\"3653\":1}}],[\"编辑器也会报错\",{\"1\":{\"2356\":1}}],[\"编译错误\",{\"1\":{\"2001\":1,\"2003\":1,\"2004\":1,\"2005\":1}}],[\"编译异常\",{\"1\":{\"1608\":1}}],[\"编译期间\",{\"1\":{\"1571\":1}}],[\"编译器会给相应的提示信息\",{\"1\":{\"1673\":1}}],[\"编译器直接丢弃这种策略的注释\",{\"1\":{\"1659\":1}}],[\"编译器将annotation存储于class文件中\",{\"1\":{\"1654\":1}}],[\"编译器将annotation存储于类对应的\",{\"1\":{\"1654\":1}}],[\"编译器将\",{\"1\":{\"1654\":2}}],[\"编译器处理完后\",{\"1\":{\"1654\":1}}],[\"编译器处理完之后就没有该annotation信息了\",{\"1\":{\"1654\":1}}],[\"编译器处理完之后\",{\"1\":{\"1654\":1}}],[\"编译器要求java程序必须捕获或声明所有编译时异常\",{\"1\":{\"1572\":1}}],[\"编译器就已经确定了所要调用的方法\",{\"1\":{\"1407\":1}}],[\"编译器根据方法不同的参数表\",{\"1\":{\"1407\":1}}],[\"编译时会报错\",{\"1\":{\"1608\":1}}],[\"编译时异常\",{\"0\":{\"1572\":1,\"1583\":1},\"1\":{\"1571\":1,\"1595\":1}}],[\"编译时异常和运行时异常的不同处理\",{\"0\":{\"1595\":1}}],[\"编译时异常和运行时异常\",{\"1\":{\"1571\":1}}],[\"编译时是不报错的\",{\"1\":{\"1420\":1}}],[\"编译时e为person\",{\"1\":{\"1405\":1}}],[\"编译时类型与运行时类型\",{\"0\":{\"1405\":1}}],[\"编译时类型由声明该变量时使用的类型决定\",{\"1\":{\"1395\":1}}],[\"编译时类型和运行时类型不一致\",{\"1\":{\"1395\":1}}],[\"编译时类型和运行时类型\",{\"1\":{\"1395\":1}}],[\"编译看左边\",{\"1\":{\"1395\":1}}],[\"编译不通过\",{\"1\":{\"1263\":1,\"1667\":1,\"1969\":1,\"1985\":1}}],[\"编译报错\",{\"1\":{\"1116\":2,\"2001\":1}}],[\"编译正常\",{\"1\":{\"1116\":1}}],[\"编译失败\",{\"1\":{\"1115\":1,\"1141\":1}}],[\"编译后java类\",{\"1\":{\"2723\":1}}],[\"编译后的项目目录\",{\"0\":{\"2759\":1}}],[\"编译后的java字节码文件和resources的资源文件\",{\"1\":{\"2727\":1}}],[\"编译后的java字节码文件目录\",{\"1\":{\"2722\":1}}],[\"编译后的文件以代码中的类名作为文件名\",{\"1\":{\"1040\":1}}],[\"编译后\",{\"1\":{\"1051\":1}}],[\"编译后生成了两个class文件\",{\"0\":{\"1049\":1}}],[\"编译成功后当前路径下会多出很多文件\",{\"1\":{\"1061\":1}}],[\"编译成功后\",{\"1\":{\"1040\":1}}],[\"编译代码\",{\"0\":{\"1040\":1}}],[\"编译为class文件\",{\"1\":{\"1038\":1}}],[\"编译\",{\"1\":{\"1038\":1}}],[\"编译执行\",{\"0\":{\"1037\":1}}],[\"编程语言介绍\",{\"0\":{\"1020\":1}}],[\"编程式控制\",{\"0\":{\"534\":1}}],[\"编程式注册bean里四种注册bean的方式\",{\"1\":{\"534\":1}}],[\"编程式注册bean\",{\"0\":{\"519\":1}}],[\"编程形式注册bean\",{\"0\":{\"520\":1}}],[\"编程期调试代码\",{\"1\":{\"287\":1}}],[\"编写xml\",{\"0\":{\"3027\":1}}],[\"编写其他的业务代码\",{\"1\":{\"2873\":1}}],[\"编写格式\",{\"0\":{\"2812\":1}}],[\"编写预编译sql字符串\",{\"1\":{\"2567\":1}}],[\"编写sql语句\",{\"1\":{\"2566\":1}}],[\"编写难度更低\",{\"1\":{\"2530\":1}}],[\"编写到扩展名为\",{\"1\":{\"1038\":1}}],[\"编写\",{\"1\":{\"1038\":1}}],[\"编写测试用例\",{\"1\":{\"33\":1}}],[\"编写项目代码\",{\"1\":{\"27\":1}}],[\"编码方式\",{\"1\":{\"2111\":1}}],[\"编码原理\",{\"0\":{\"2110\":1}}],[\"编码表的由来\",{\"0\":{\"2108\":1}}],[\"编码和解码\",{\"1\":{\"674\":1}}],[\"编码实现完毕后\",{\"1\":{\"29\":1}}],[\"编码\",{\"0\":{\"27\":1},\"1\":{\"674\":1,\"2091\":1,\"3020\":1}}],[\"编号9\",{\"1\":{\"10\":1}}],[\"编号8\",{\"1\":{\"10\":1}}],[\"编号7\",{\"1\":{\"10\":1}}],[\"编号6\",{\"1\":{\"10\":1}}],[\"编号5\",{\"1\":{\"10\":1}}],[\"编号4\",{\"1\":{\"10\":1}}],[\"编号3\",{\"1\":{\"10\":1}}],[\"编号2\",{\"1\":{\"10\":1}}],[\"编号13\",{\"1\":{\"10\":1}}],[\"编号12\",{\"1\":{\"10\":1}}],[\"编号11\",{\"1\":{\"10\":1}}],[\"编号1\",{\"1\":{\"10\":1}}],[\"编号0\",{\"1\":{\"10\":1}}],[\"编号顺序\",{\"1\":{\"10\":1}}],[\"58\",{\"1\":{\"3590\":1,\"3596\":1}}],[\"54\",{\"1\":{\"3670\":7}}],[\"54410\",{\"1\":{\"3564\":1}}],[\"546\",{\"1\":{\"3164\":1}}],[\"5mb～15mb\",{\"1\":{\"3514\":1}}],[\"5m\",{\"1\":{\"3509\":1}}],[\"5ms\",{\"1\":{\"695\":1}}],[\"5y\",{\"1\":{\"3298\":1}}],[\"5年\",{\"1\":{\"3298\":1}}],[\"5下载地址直达\",{\"1\":{\"2700\":1}}],[\"593z\",{\"1\":{\"3670\":1}}],[\"59\",{\"1\":{\"2193\":3}}],[\"5改写了集合框架中的全部接口和类\",{\"1\":{\"1948\":1}}],[\"5以上\",{\"1\":{\"2700\":1}}],[\"5以上都是基于注解的\",{\"1\":{\"1636\":1}}],[\"5以后\",{\"1\":{\"1948\":1}}],[\"5之后使用泛型来解决\",{\"1\":{\"1947\":1}}],[\"5之前只能把元素类型设计为object\",{\"1\":{\"1947\":1}}],[\"5之前创建新执行线程有两种方法\",{\"1\":{\"1710\":1}}],[\"5之前\",{\"1\":{\"1618\":1}}],[\"5倍\",{\"1\":{\"1867\":1}}],[\"5新增\",{\"1\":{\"1618\":1}}],[\"5<a\",{\"1\":{\"1149\":1}}],[\"5<a<=20\",{\"1\":{\"1149\":1}}],[\"5个字符\",{\"1\":{\"817\":1,\"2056\":1}}],[\"5舍6入\",{\"1\":{\"784\":1}}],[\"55\",{\"1\":{\"1433\":1,\"2488\":1}}],[\"5555\",{\"1\":{\"783\":1}}],[\"556\",{\"1\":{\"720\":7}}],[\"532\",{\"1\":{\"732\":1,\"733\":2}}],[\"53\",{\"1\":{\"732\":1,\"733\":2}}],[\"512m\",{\"1\":{\"3527\":1}}],[\"512mb\",{\"1\":{\"3517\":1}}],[\"512e2\",{\"1\":{\"1093\":1}}],[\"512\",{\"1\":{\"1093\":2}}],[\"5111\",{\"1\":{\"764\":1}}],[\"51\",{\"1\":{\"724\":1,\"3590\":1,\"3596\":1}}],[\"522z\",{\"1\":{\"3590\":1}}],[\"52000\",{\"1\":{\"3191\":1}}],[\"52\",{\"1\":{\"721\":3}}],[\"5601\",{\"1\":{\"3352\":1,\"3353\":1}}],[\"562z\",{\"1\":{\"724\":1}}],[\"56\",{\"1\":{\"720\":7,\"725\":2,\"779\":1,\"780\":1,\"781\":1,\"783\":1}}],[\"5672\",{\"1\":{\"439\":1}}],[\"5+20+20分钟等分别触发一次\",{\"1\":{\"501\":1}}],[\"500g\",{\"1\":{\"3508\":1}}],[\"500\",{\"1\":{\"2624\":1,\"2625\":1}}],[\"5000\",{\"1\":{\"2156\":1,\"3153\":1,\"3164\":2,\"3191\":2}}],[\"502z\",{\"1\":{\"727\":1}}],[\"509证书\",{\"0\":{\"3725\":1},\"1\":{\"3723\":1}}],[\"509\",{\"1\":{\"418\":1,\"3293\":1}}],[\"50\",{\"1\":{\"308\":3,\"1368\":1,\"1408\":2,\"1737\":1,\"1958\":1,\"2121\":1,\"3380\":1,\"3504\":1}}],[\"5level\",{\"1\":{\"308\":4}}],[\"5版本为基础的\",{\"1\":{\"84\":1,\"85\":1}}],[\"5\",{\"0\":{\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"113\":1,\"121\":1,\"143\":1,\"144\":1,\"167\":1,\"192\":1,\"193\":1,\"194\":1,\"210\":1,\"211\":1,\"212\":1,\"227\":1,\"243\":1,\"244\":1,\"245\":1,\"246\":1,\"247\":1,\"260\":1,\"310\":1,\"333\":1,\"381\":1,\"382\":1,\"383\":1,\"401\":1,\"408\":1,\"411\":1,\"420\":1,\"432\":1,\"436\":1,\"448\":1,\"459\":1,\"474\":1,\"480\":1,\"490\":1,\"501\":1,\"503\":1,\"570\":1,\"578\":1,\"584\":1,\"629\":1,\"630\":1,\"631\":1,\"632\":1,\"633\":1,\"663\":1,\"669\":1,\"691\":1,\"692\":1,\"693\":1,\"694\":1,\"703\":1,\"711\":1,\"720\":1,\"735\":1,\"736\":1,\"737\":1,\"748\":1,\"749\":1,\"750\":1,\"751\":1,\"758\":1,\"764\":1,\"776\":1,\"783\":1,\"792\":1,\"801\":1,\"827\":1,\"841\":1,\"856\":1,\"865\":1,\"872\":1,\"896\":1,\"909\":1,\"934\":1,\"949\":1,\"963\":1,\"972\":1,\"1000\":1,\"1017\":1,\"1048\":1,\"1049\":1,\"1050\":1,\"1051\":1,\"1062\":1,\"1073\":1,\"1084\":1,\"1090\":1,\"1096\":1,\"1104\":1,\"1117\":1,\"1130\":1,\"1131\":1,\"1132\":1,\"1133\":1,\"1198\":1,\"1211\":1,\"1222\":1,\"1240\":1,\"1259\":1,\"1282\":1,\"1320\":1,\"1324\":1,\"1332\":1,\"1338\":1,\"1344\":1,\"1355\":1,\"1364\":1,\"1402\":1,\"1403\":1,\"1404\":1,\"1405\":1,\"1406\":1,\"1417\":1,\"1418\":1,\"1419\":1,\"1420\":1,\"1430\":1,\"1442\":1,\"1457\":1,\"1458\":1,\"1459\":1,\"1460\":1,\"1484\":1,\"1491\":1,\"1498\":1,\"1499\":1,\"1500\":1,\"1509\":1,\"1543\":1,\"1563\":1,\"1581\":1,\"1589\":1,\"1602\":1,\"1620\":1,\"1621\":1,\"1622\":1,\"1628\":1,\"1648\":1,\"1664\":1,\"1681\":1,\"1689\":1,\"1704\":1,\"1707\":1,\"1737\":1,\"1748\":1,\"1751\":1,\"1757\":1,\"1776\":1,\"1785\":1,\"1787\":2,\"1795\":1,\"1796\":1,\"1797\":1,\"1798\":1,\"1803\":1,\"1805\":1,\"1816\":1,\"1824\":1,\"1842\":1,\"1843\":1,\"1844\":1,\"1845\":1,\"1869\":1,\"1879\":1,\"1887\":1,\"1916\":1,\"1918\":1,\"1925\":1,\"1955\":1,\"1981\":1,\"2002\":1,\"2003\":1,\"2004\":1,\"2005\":1,\"2014\":1,\"2015\":1,\"2016\":1,\"2017\":1,\"2025\":1,\"2039\":1,\"2066\":1,\"2072\":1,\"2085\":1,\"2112\":1,\"2127\":1,\"2137\":1,\"2138\":1,\"2139\":1,\"2153\":1,\"2167\":1,\"2176\":1,\"2185\":1,\"2196\":1,\"2206\":1,\"2215\":1,\"2222\":1,\"2223\":1,\"2224\":1,\"2225\":1,\"2240\":1,\"2241\":1,\"2242\":1,\"2251\":1,\"2252\":1,\"2253\":1,\"2264\":1,\"2303\":1,\"2318\":1,\"2346\":1,\"2347\":1,\"2348\":1,\"2349\":1,\"2355\":1,\"2365\":1,\"2376\":1,\"2390\":1,\"2414\":1,\"2415\":1,\"2416\":1,\"2426\":1,\"2427\":1,\"2428\":1,\"2434\":1,\"2441\":1,\"2481\":1,\"2521\":1,\"2532\":1,\"2539\":1,\"2549\":1,\"2550\":1,\"2551\":1,\"2552\":1,\"2561\":1,\"2568\":1,\"2569\":1,\"2570\":1,\"2593\":1,\"2612\":1,\"2614\":1,\"2622\":1,\"2623\":1,\"2624\":1,\"2668\":1,\"2675\":1,\"2683\":1,\"2690\":1,\"2698\":1,\"2704\":1,\"2752\":1,\"2753\":1,\"2754\":1,\"2755\":1,\"2774\":1,\"2782\":1,\"2804\":1,\"2810\":1,\"2811\":1,\"2812\":1,\"2826\":1,\"2828\":1,\"2880\":1,\"2891\":1,\"2904\":1,\"2913\":1,\"2925\":1,\"2936\":1,\"2937\":1,\"2938\":1,\"2954\":1,\"2966\":1,\"2983\":1,\"3020\":1,\"3037\":1,\"3052\":1,\"3068\":1,\"3080\":1,\"3094\":1,\"3109\":1,\"3114\":1,\"3137\":1,\"3254\":1,\"3291\":1,\"3297\":1,\"3309\":1,\"3322\":1,\"3333\":1,\"3340\":1,\"3349\":1,\"3350\":1,\"3359\":1,\"3364\":1,\"3372\":1,\"3394\":1,\"3398\":1,\"3418\":1,\"3438\":2,\"3446\":1,\"3459\":1,\"3481\":1,\"3491\":1,\"3517\":1,\"3564\":1,\"3578\":1,\"3583\":1,\"3636\":1,\"3643\":1,\"3644\":1,\"3645\":1,\"3646\":1,\"3703\":1,\"3714\":1,\"3729\":1,\"3755\":1,\"3771\":1,\"3776\":1,\"3782\":1,\"3785\":1},\"1\":{\"26\":1,\"84\":1,\"85\":1,\"100\":1,\"246\":1,\"314\":1,\"321\":1,\"325\":2,\"328\":2,\"329\":1,\"330\":1,\"331\":1,\"332\":1,\"333\":1,\"335\":1,\"336\":1,\"337\":1,\"339\":1,\"340\":1,\"346\":1,\"351\":1,\"371\":1,\"388\":1,\"410\":1,\"431\":1,\"462\":1,\"480\":1,\"562\":1,\"577\":1,\"599\":1,\"600\":1,\"611\":1,\"612\":1,\"627\":1,\"628\":1,\"669\":1,\"699\":1,\"751\":1,\"764\":2,\"784\":1,\"814\":1,\"817\":1,\"825\":1,\"892\":2,\"893\":2,\"894\":1,\"895\":3,\"896\":2,\"898\":1,\"932\":4,\"933\":3,\"934\":1,\"935\":1,\"936\":3,\"1063\":1,\"1087\":1,\"1093\":2,\"1094\":1,\"1097\":1,\"1111\":1,\"1139\":1,\"1144\":2,\"1159\":1,\"1161\":1,\"1162\":1,\"1176\":1,\"1202\":1,\"1222\":1,\"1245\":2,\"1621\":1,\"1688\":1,\"1719\":1,\"1722\":1,\"1729\":1,\"1732\":1,\"1735\":1,\"1737\":1,\"1740\":1,\"1750\":1,\"1755\":1,\"1771\":1,\"1778\":1,\"1810\":1,\"1830\":1,\"1850\":1,\"1852\":1,\"1893\":1,\"1958\":1,\"2028\":1,\"2053\":1,\"2056\":1,\"2065\":1,\"2074\":1,\"2216\":1,\"2225\":1,\"2296\":1,\"2348\":1,\"2432\":1,\"2440\":1,\"2446\":1,\"2457\":1,\"2462\":1,\"2487\":1,\"2488\":1,\"2492\":3,\"2573\":1,\"2577\":1,\"2581\":1,\"2597\":1,\"2600\":1,\"2603\":1,\"2613\":1,\"2635\":1,\"2639\":1,\"2653\":1,\"2655\":1,\"2656\":1,\"2657\":1,\"2735\":1,\"2751\":1,\"2784\":1,\"2831\":1,\"2836\":1,\"2840\":1,\"2868\":1,\"3083\":1,\"3144\":1,\"3170\":1,\"3308\":1,\"3327\":1,\"3353\":1,\"3373\":1,\"3383\":1,\"3387\":1,\"3391\":1,\"3394\":2,\"3396\":1,\"3397\":1,\"3403\":1,\"3407\":1,\"3410\":1,\"3413\":1,\"3444\":2,\"3449\":2,\"3465\":1,\"3466\":1,\"3468\":1,\"3469\":1,\"3473\":1,\"3482\":2,\"3483\":1,\"3487\":1,\"3494\":1,\"3552\":1,\"3558\":1,\"3561\":1,\"3562\":2,\"3636\":1,\"3653\":1,\"3709\":1}}],[\"4cc1\",{\"1\":{\"3712\":1}}],[\"485z\",{\"1\":{\"3590\":1,\"3596\":1}}],[\"48424\",{\"1\":{\"2489\":1}}],[\"4kb\",{\"1\":{\"3058\":1}}],[\"4dc041da\",{\"1\":{\"2755\":1}}],[\"42s\",{\"1\":{\"2621\":1}}],[\"4gb很小\",{\"1\":{\"3502\":1}}],[\"4gb\",{\"1\":{\"3502\":1,\"3504\":1}}],[\"4g\",{\"1\":{\"2608\":1}}],[\"4set\",{\"0\":{\"2310\":1}}],[\"4个0\",{\"1\":{\"2181\":1}}],[\"4个字节组成\",{\"1\":{\"2181\":1}}],[\"4个字节来表示一个字符\",{\"1\":{\"2109\":1}}],[\"4的转换\",{\"1\":{\"1122\":1}}],[\"4种\",{\"0\":{\"1085\":1}}],[\"4舍\",{\"1\":{\"784\":1}}],[\"438z\",{\"1\":{\"3670\":1}}],[\"4383685877147921099l\",{\"1\":{\"688\":1}}],[\"43534646435l\",{\"1\":{\"2657\":1}}],[\"43\",{\"1\":{\"1135\":1,\"2474\":2}}],[\"43中函数式接口都是这四种接口的变形\",{\"1\":{\"973\":1}}],[\"4320\",{\"1\":{\"781\":1}}],[\"4506\",{\"1\":{\"3712\":1}}],[\"453465656l\",{\"1\":{\"2657\":1}}],[\"4534534534543l\",{\"1\":{\"1433\":1}}],[\"456\",{\"1\":{\"1902\":2}}],[\"4554617c\",{\"1\":{\"919\":1}}],[\"45\",{\"1\":{\"779\":1,\"780\":1,\"781\":1}}],[\"465794806718\",{\"1\":{\"769\":1}}],[\"475463534532l\",{\"1\":{\"2155\":1,\"2158\":1}}],[\"47\",{\"1\":{\"734\":1,\"3355\":1}}],[\"4142135623730951\",{\"1\":{\"769\":1}}],[\"41\",{\"1\":{\"719\":1,\"3670\":4}}],[\"49152~65535\",{\"1\":{\"2186\":1}}],[\"4999\",{\"1\":{\"764\":1}}],[\"49\",{\"1\":{\"674\":1}}],[\"4版本开始引入的一套新的io\",{\"1\":{\"2161\":1}}],[\"4版本\",{\"1\":{\"319\":1}}],[\"4版开始使用group属性替代include属性\",{\"1\":{\"280\":1}}],[\"4<\",{\"1\":{\"319\":1,\"323\":1}}],[\"40fdw\",{\"1\":{\"3739\":1,\"3751\":1}}],[\"400\",{\"1\":{\"3726\":1}}],[\"4000\",{\"1\":{\"2405\":1}}],[\"4032\",{\"1\":{\"3712\":1}}],[\"4096\",{\"1\":{\"3348\":2}}],[\"40c\",{\"1\":{\"299\":1}}],[\"40\",{\"1\":{\"299\":1,\"1958\":1}}],[\"4级\",{\"1\":{\"262\":1,\"263\":1}}],[\"4\",{\"0\":{\"98\":1,\"112\":1,\"120\":1,\"130\":1,\"136\":1,\"140\":1,\"141\":1,\"142\":1,\"149\":1,\"166\":1,\"172\":1,\"188\":1,\"189\":1,\"190\":1,\"191\":1,\"205\":1,\"209\":1,\"226\":1,\"240\":1,\"241\":1,\"242\":1,\"247\":1,\"253\":1,\"259\":1,\"285\":1,\"290\":1,\"295\":1,\"300\":1,\"309\":1,\"315\":1,\"327\":1,\"332\":1,\"353\":1,\"354\":1,\"359\":1,\"367\":1,\"368\":1,\"369\":1,\"376\":1,\"379\":1,\"380\":1,\"385\":2,\"393\":1,\"400\":1,\"407\":1,\"411\":1,\"419\":1,\"425\":1,\"431\":1,\"443\":1,\"444\":1,\"445\":1,\"446\":1,\"447\":2,\"448\":1,\"455\":1,\"464\":1,\"473\":1,\"479\":1,\"485\":1,\"500\":1,\"503\":1,\"529\":1,\"530\":1,\"531\":1,\"543\":1,\"551\":1,\"556\":1,\"569\":1,\"577\":1,\"583\":1,\"595\":1,\"600\":1,\"609\":1,\"614\":1,\"625\":1,\"626\":1,\"627\":1,\"628\":1,\"633\":1,\"638\":1,\"647\":1,\"662\":1,\"668\":1,\"674\":1,\"680\":1,\"690\":1,\"702\":1,\"710\":1,\"719\":1,\"727\":1,\"734\":1,\"738\":1,\"747\":1,\"763\":1,\"775\":1,\"782\":1,\"791\":1,\"800\":1,\"819\":1,\"826\":1,\"837\":1,\"840\":1,\"855\":1,\"864\":1,\"871\":1,\"884\":1,\"895\":1,\"908\":1,\"933\":1,\"940\":1,\"948\":1,\"962\":1,\"977\":1,\"992\":1,\"999\":1,\"1014\":1,\"1015\":1,\"1016\":1,\"1031\":1,\"1032\":1,\"1033\":1,\"1047\":1,\"1056\":1,\"1061\":1,\"1064\":1,\"1072\":1,\"1089\":1,\"1095\":1,\"1103\":1,\"1116\":1,\"1122\":1,\"1127\":1,\"1128\":1,\"1129\":1,\"1146\":1,\"1177\":1,\"1186\":1,\"1197\":1,\"1210\":1,\"1221\":1,\"1239\":1,\"1253\":1,\"1258\":1,\"1279\":1,\"1280\":1,\"1281\":1,\"1294\":1,\"1295\":1,\"1296\":1,\"1297\":1,\"1307\":1,\"1312\":1,\"1313\":1,\"1319\":1,\"1331\":1,\"1337\":1,\"1343\":1,\"1351\":1,\"1352\":1,\"1353\":1,\"1354\":1,\"1363\":1,\"1375\":1,\"1377\":1,\"1388\":1,\"1389\":1,\"1401\":1,\"1406\":1,\"1416\":1,\"1429\":1,\"1431\":1,\"1432\":1,\"1433\":1,\"1434\":1,\"1435\":2,\"1440\":1,\"1441\":1,\"1452\":1,\"1453\":1,\"1454\":1,\"1455\":1,\"1456\":2,\"1457\":1,\"1473\":1,\"1478\":1,\"1483\":1,\"1490\":1,\"1497\":1,\"1508\":1,\"1519\":1,\"1520\":1,\"1521\":1,\"1529\":1,\"1534\":1,\"1542\":1,\"1551\":1,\"1562\":1,\"1568\":1,\"1580\":1,\"1588\":1,\"1596\":1,\"1601\":1,\"1609\":1,\"1614\":1,\"1619\":1,\"1627\":1,\"1632\":1,\"1646\":1,\"1647\":1,\"1663\":1,\"1688\":1,\"1701\":1,\"1703\":1,\"1718\":1,\"1723\":1,\"1724\":1,\"1725\":1,\"1736\":1,\"1751\":1,\"1756\":1,\"1771\":1,\"1772\":1,\"1773\":1,\"1774\":1,\"1775\":2,\"1784\":1,\"1791\":1,\"1792\":1,\"1793\":1,\"1794\":1,\"1802\":1,\"1810\":1,\"1815\":1,\"1823\":1,\"1838\":1,\"1839\":1,\"1840\":1,\"1841\":1,\"1853\":1,\"1854\":1,\"1855\":1,\"1856\":1,\"1868\":1,\"1886\":1,\"1893\":1,\"1915\":1,\"1917\":1,\"1924\":1,\"1928\":1,\"1952\":1,\"1953\":1,\"1954\":1,\"1970\":1,\"1971\":1,\"1972\":1,\"1973\":1,\"1974\":2,\"1980\":1,\"1998\":1,\"1999\":1,\"2000\":1,\"2001\":1,\"2011\":1,\"2012\":1,\"2013\":1,\"2024\":1,\"2038\":1,\"2042\":1,\"2053\":1,\"2054\":1,\"2055\":1,\"2056\":1,\"2065\":1,\"2079\":1,\"2084\":1,\"2092\":1,\"2101\":1,\"2106\":1,\"2111\":1,\"2126\":1,\"2136\":1,\"2149\":1,\"2150\":1,\"2151\":1,\"2152\":1,\"2166\":1,\"2175\":1,\"2184\":1,\"2195\":1,\"2205\":1,\"2208\":1,\"2214\":1,\"2221\":1,\"2232\":1,\"2239\":1,\"2250\":1,\"2258\":1,\"2263\":1,\"2269\":1,\"2282\":1,\"2283\":1,\"2302\":1,\"2317\":1,\"2326\":1,\"2327\":1,\"2328\":1,\"2329\":1,\"2330\":2,\"2340\":1,\"2341\":1,\"2342\":1,\"2343\":1,\"2344\":1,\"2345\":2,\"2354\":1,\"2362\":1,\"2363\":1,\"2364\":1,\"2374\":1,\"2389\":1,\"2394\":1,\"2400\":1,\"2411\":1,\"2412\":1,\"2413\":1,\"2423\":1,\"2424\":1,\"2425\":1,\"2440\":1,\"2449\":1,\"2450\":1,\"2451\":1,\"2456\":1,\"2461\":1,\"2472\":1,\"2480\":1,\"2520\":1,\"2531\":1,\"2538\":1,\"2548\":1,\"2560\":1,\"2567\":1,\"2578\":1,\"2579\":1,\"2580\":1,\"2581\":1,\"2582\":2,\"2592\":1,\"2607\":1,\"2611\":1,\"2621\":1,\"2639\":1,\"2653\":1,\"2667\":1,\"2674\":1,\"2682\":1,\"2689\":1,\"2697\":1,\"2703\":1,\"2718\":1,\"2740\":1,\"2741\":1,\"2742\":1,\"2743\":1,\"2751\":1,\"2760\":1,\"2773\":1,\"2781\":1,\"2798\":1,\"2803\":1,\"2809\":1,\"2816\":1,\"2825\":1,\"2859\":1,\"2873\":1,\"2879\":1,\"2890\":1,\"2903\":1,\"2912\":1,\"2923\":1,\"2931\":1,\"2932\":1,\"2933\":1,\"2934\":1,\"2935\":2,\"2943\":1,\"2952\":1,\"2955\":1,\"2960\":1,\"2965\":1,\"2975\":1,\"2982\":1,\"2998\":1,\"3009\":1,\"3019\":1,\"3028\":1,\"3029\":1,\"3030\":1,\"3031\":1,\"3036\":1,\"3044\":1,\"3048\":1,\"3049\":1,\"3050\":1,\"3051\":1,\"3063\":1,\"3064\":1,\"3065\":1,\"3066\":1,\"3067\":2,\"3087\":1,\"3093\":1,\"3099\":1,\"3108\":1,\"3113\":1,\"3120\":1,\"3136\":1,\"3142\":1,\"3167\":1,\"3195\":1,\"3223\":1,\"3258\":1,\"3262\":1,\"3272\":1,\"3273\":1,\"3274\":1,\"3275\":1,\"3276\":2,\"3284\":1,\"3290\":1,\"3296\":1,\"3310\":1,\"3315\":1,\"3316\":2,\"3321\":1,\"3332\":1,\"3339\":1,\"3348\":1,\"3350\":1,\"3354\":1,\"3363\":1,\"3393\":1,\"3418\":1,\"3423\":1,\"3432\":1,\"3445\":1,\"3455\":1,\"3469\":1,\"3480\":1,\"3516\":1,\"3529\":1,\"3539\":1,\"3543\":1,\"3548\":1,\"3563\":1,\"3572\":1,\"3577\":1,\"3593\":1,\"3598\":1,\"3607\":1,\"3616\":1,\"3628\":1,\"3632\":1,\"3633\":1,\"3634\":1,\"3635\":1,\"3642\":1,\"3654\":1,\"3659\":1,\"3664\":1,\"3691\":1,\"3699\":1,\"3700\":1,\"3701\":1,\"3702\":1,\"3713\":1,\"3728\":1,\"3730\":1,\"3731\":1,\"3742\":1,\"3744\":1,\"3754\":2,\"3755\":1,\"3770\":1,\"3775\":1,\"3781\":1,\"3784\":1,\"3790\":1},\"1\":{\"25\":1,\"98\":1,\"120\":2,\"143\":1,\"246\":1,\"297\":1,\"325\":1,\"368\":1,\"379\":1,\"403\":2,\"432\":1,\"548\":1,\"562\":1,\"576\":1,\"590\":1,\"656\":1,\"749\":1,\"751\":1,\"784\":3,\"825\":1,\"907\":1,\"924\":1,\"925\":1,\"926\":2,\"932\":4,\"933\":3,\"934\":1,\"935\":1,\"987\":1,\"998\":1,\"999\":2,\"1000\":1,\"1063\":1,\"1117\":1,\"1139\":2,\"1156\":1,\"1176\":1,\"1198\":2,\"1222\":1,\"1242\":1,\"1245\":1,\"1246\":1,\"1445\":2,\"1488\":1,\"1489\":1,\"1599\":1,\"1621\":1,\"1650\":1,\"1720\":1,\"1740\":1,\"1755\":1,\"1769\":1,\"1771\":1,\"1795\":1,\"1817\":1,\"1852\":1,\"1940\":1,\"1958\":1,\"2001\":2,\"2027\":1,\"2052\":1,\"2064\":1,\"2065\":1,\"2071\":1,\"2084\":1,\"2113\":1,\"2194\":1,\"2225\":1,\"2280\":1,\"2296\":1,\"2446\":1,\"2487\":1,\"2488\":1,\"2492\":1,\"2532\":1,\"2539\":1,\"2545\":1,\"2547\":1,\"2548\":1,\"2551\":1,\"2573\":1,\"2577\":1,\"2581\":1,\"2595\":1,\"2597\":4,\"2600\":6,\"2603\":2,\"2612\":2,\"2613\":2,\"2634\":1,\"2635\":1,\"2638\":1,\"2639\":1,\"2653\":2,\"2655\":1,\"2656\":1,\"2657\":1,\"2734\":1,\"2790\":1,\"2822\":1,\"2823\":1,\"2824\":1,\"2825\":1,\"2867\":1,\"2952\":1,\"2960\":1,\"3011\":1,\"3029\":1,\"3034\":1,\"3047\":1,\"3142\":1,\"3160\":1,\"3163\":1,\"3166\":1,\"3170\":1,\"3173\":1,\"3177\":1,\"3179\":1,\"3183\":1,\"3186\":2,\"3194\":1,\"3249\":1,\"3264\":1,\"3266\":1,\"3267\":1,\"3289\":1,\"3292\":2,\"3294\":1,\"3295\":1,\"3306\":1,\"3308\":3,\"3320\":1,\"3326\":2,\"3327\":1,\"3330\":2,\"3340\":2,\"3353\":1,\"3391\":1,\"3413\":1,\"3473\":1,\"3476\":1,\"3480\":1,\"3482\":2,\"3485\":3,\"3489\":2,\"3503\":1,\"3567\":1,\"3635\":1,\"3674\":1,\"3735\":1,\"3736\":1,\"3738\":1}}],[\"3b994547\",{\"1\":{\"3712\":1}}],[\"3s\",{\"1\":{\"3533\":1}}],[\"3个副本分片也正常\",{\"1\":{\"3387\":1}}],[\"3个主分片都正常\",{\"1\":{\"3384\":1}}],[\"3个\",{\"1\":{\"3380\":1}}],[\"3999\",{\"1\":{\"3141\":1,\"3142\":2,\"3159\":1,\"3160\":2}}],[\"38\",{\"1\":{\"2480\":1,\"2481\":1}}],[\"3get\",{\"0\":{\"2309\":1}}],[\"3565\",{\"1\":{\"3348\":1}}],[\"35\",{\"1\":{\"2189\":1}}],[\"358\",{\"1\":{\"779\":1}}],[\"3ffe\",{\"1\":{\"2181\":1}}],[\"3f\",{\"1\":{\"1445\":1}}],[\"32g\",{\"1\":{\"3508\":1}}],[\"32gb\",{\"1\":{\"3504\":1}}],[\"3201\",{\"1\":{\"2181\":1}}],[\"32\",{\"1\":{\"1905\":1,\"1935\":1,\"2484\":1,\"3094\":1,\"3108\":1,\"3504\":3}}],[\"321\",{\"1\":{\"884\":2,\"1029\":1}}],[\"328000000\",{\"1\":{\"719\":1}}],[\"3=3\",{\"1\":{\"784\":10}}],[\"3=\",{\"1\":{\"784\":11}}],[\"3=4\",{\"1\":{\"784\":2}}],[\"30cee1936861\",{\"1\":{\"3712\":1}}],[\"306z\",{\"1\":{\"3673\":1}}],[\"3062446\",{\"1\":{\"3656\":1}}],[\"30000\",{\"1\":{\"3667\":1}}],[\"3019275\",{\"1\":{\"3563\":1}}],[\"30s\",{\"1\":{\"3453\":1}}],[\"30min\",{\"1\":{\"3449\":1}}],[\"30b920bb03429973b605b035c144f7c51c7df327ec396f85e9db3ad82923157d\",{\"1\":{\"3305\":1}}],[\"30分钟就会自动掉线\",{\"1\":{\"3073\":1}}],[\"30分钟\",{\"1\":{\"3073\":1}}],[\"302\",{\"1\":{\"2907\":1,\"2909\":1}}],[\"302585092994046\",{\"1\":{\"769\":1}}],[\"30亿都在北美\",{\"1\":{\"2181\":1}}],[\"30\",{\"1\":{\"761\":1,\"865\":2,\"1957\":1,\"3305\":2,\"3328\":1,\"3355\":1,\"3516\":1,\"3517\":1,\"3527\":1,\"3674\":2}}],[\"345=bb\",{\"1\":{\"1931\":1}}],[\"345\",{\"1\":{\"1931\":1}}],[\"34\",{\"1\":{\"727\":1,\"782\":1,\"784\":4,\"1433\":1,\"2414\":1,\"2474\":2}}],[\"3784\",{\"1\":{\"3670\":1}}],[\"37才支持批处理\",{\"1\":{\"2623\":1}}],[\"37\",{\"1\":{\"721\":3}}],[\"3799\",{\"1\":{\"474\":1}}],[\"33\",{\"1\":{\"784\":8,\"1905\":2}}],[\"333\",{\"1\":{\"720\":1}}],[\"3388685877147921107l\",{\"1\":{\"688\":1}}],[\"3306\",{\"1\":{\"356\":1,\"362\":1,\"368\":1,\"372\":1,\"617\":1,\"2542\":1,\"2545\":1,\"2547\":1,\"2548\":1,\"2550\":1,\"2673\":1,\"2674\":1}}],[\"3190675085212945\",{\"1\":{\"761\":1}}],[\"31\",{\"1\":{\"379\":1,\"777\":1,\"888\":1,\"1009\":1,\"2192\":1}}],[\"31+08\",{\"1\":{\"147\":1}}],[\"3mb\",{\"1\":{\"304\":1}}],[\"3级常用于项目经理进行整体项目属性调控\",{\"1\":{\"263\":1}}],[\"3级与4级用于系统开发阶段设置通用属性\",{\"1\":{\"263\":1}}],[\"3级\",{\"1\":{\"262\":1,\"263\":1}}],[\"3\",{\"0\":{\"34\":1,\"93\":1,\"97\":1,\"102\":1,\"107\":1,\"111\":1,\"119\":1,\"125\":1,\"129\":1,\"135\":1,\"139\":1,\"148\":1,\"153\":1,\"154\":1,\"155\":1,\"156\":2,\"163\":1,\"164\":1,\"165\":1,\"171\":1,\"176\":1,\"184\":1,\"185\":1,\"186\":1,\"187\":2,\"191\":1,\"204\":1,\"206\":1,\"207\":1,\"208\":1,\"216\":1,\"220\":1,\"221\":1,\"225\":1,\"233\":1,\"237\":1,\"238\":1,\"239\":1,\"246\":1,\"252\":1,\"254\":1,\"258\":1,\"264\":1,\"268\":1,\"269\":2,\"281\":1,\"282\":1,\"283\":1,\"284\":2,\"285\":1,\"289\":1,\"294\":1,\"299\":1,\"304\":1,\"308\":1,\"310\":1,\"314\":1,\"321\":1,\"322\":1,\"323\":1,\"324\":1,\"325\":2,\"326\":1,\"331\":1,\"343\":1,\"351\":1,\"352\":1,\"357\":1,\"363\":1,\"364\":1,\"365\":1,\"366\":2,\"373\":1,\"374\":1,\"375\":1,\"376\":1,\"389\":1,\"390\":1,\"391\":1,\"392\":2,\"399\":1,\"406\":1,\"418\":1,\"424\":1,\"430\":1,\"440\":1,\"446\":1,\"452\":1,\"453\":1,\"454\":1,\"463\":1,\"468\":1,\"472\":1,\"478\":1,\"484\":1,\"490\":1,\"494\":1,\"499\":1,\"525\":1,\"526\":1,\"527\":1,\"528\":1,\"537\":1,\"542\":1,\"550\":1,\"552\":1,\"553\":1,\"554\":1,\"555\":2,\"557\":1,\"568\":1,\"576\":1,\"582\":1,\"588\":1,\"594\":1,\"599\":1,\"608\":1,\"613\":1,\"618\":1,\"621\":1,\"622\":1,\"623\":1,\"624\":2,\"628\":1,\"632\":1,\"637\":1,\"642\":1,\"646\":1,\"653\":1,\"657\":1,\"661\":1,\"667\":1,\"673\":1,\"679\":1,\"682\":1,\"689\":1,\"694\":1,\"701\":1,\"705\":1,\"709\":1,\"716\":1,\"718\":1,\"726\":1,\"731\":1,\"732\":1,\"733\":1,\"742\":1,\"746\":1,\"751\":1,\"755\":1,\"756\":1,\"757\":1,\"762\":1,\"774\":1,\"781\":1,\"790\":1,\"799\":1,\"805\":1,\"817\":1,\"818\":1,\"825\":1,\"836\":1,\"839\":1,\"850\":1,\"854\":1,\"863\":1,\"870\":1,\"883\":1,\"888\":1,\"894\":1,\"900\":1,\"907\":1,\"926\":1,\"932\":1,\"947\":1,\"961\":1,\"976\":1,\"991\":1,\"998\":1,\"1009\":1,\"1013\":1,\"1026\":1,\"1028\":1,\"1029\":1,\"1030\":1,\"1036\":1,\"1042\":1,\"1043\":1,\"1044\":1,\"1045\":1,\"1046\":2,\"1051\":1,\"1055\":1,\"1060\":1,\"1068\":1,\"1069\":1,\"1070\":1,\"1071\":2,\"1080\":1,\"1088\":1,\"1094\":1,\"1102\":1,\"1108\":1,\"1114\":1,\"1115\":1,\"1121\":1,\"1126\":1,\"1133\":1,\"1141\":1,\"1145\":1,\"1153\":1,\"1157\":1,\"1163\":1,\"1170\":1,\"1172\":1,\"1176\":1,\"1185\":1,\"1190\":1,\"1196\":1,\"1204\":1,\"1209\":1,\"1220\":1,\"1227\":1,\"1234\":1,\"1238\":1,\"1252\":1,\"1257\":1,\"1274\":1,\"1278\":1,\"1287\":1,\"1291\":1,\"1292\":1,\"1293\":1,\"1297\":1,\"1298\":1,\"1305\":1,\"1306\":1,\"1311\":1,\"1318\":1,\"1330\":1,\"1336\":1,\"1342\":1,\"1350\":1,\"1354\":1,\"1362\":1,\"1368\":1,\"1374\":1,\"1376\":1,\"1383\":1,\"1384\":1,\"1385\":1,\"1386\":1,\"1387\":2,\"1388\":1,\"1399\":1,\"1400\":1,\"1405\":1,\"1415\":1,\"1420\":1,\"1425\":1,\"1426\":1,\"1427\":1,\"1428\":2,\"1429\":1,\"1430\":1,\"1434\":1,\"1439\":1,\"1451\":1,\"1455\":1,\"1465\":1,\"1466\":1,\"1467\":1,\"1472\":1,\"1477\":1,\"1482\":1,\"1489\":1,\"1496\":1,\"1507\":1,\"1518\":1,\"1526\":1,\"1527\":1,\"1528\":1,\"1533\":1,\"1540\":1,\"1541\":1,\"1550\":1,\"1552\":1,\"1556\":1,\"1557\":1,\"1561\":1,\"1567\":1,\"1569\":1,\"1573\":1,\"1577\":1,\"1578\":1,\"1579\":1,\"1584\":2,\"1587\":1,\"1596\":1,\"1600\":1,\"1608\":1,\"1613\":1,\"1618\":1,\"1626\":1,\"1638\":1,\"1642\":1,\"1643\":1,\"1644\":1,\"1645\":2,\"1646\":1,\"1654\":1,\"1660\":1,\"1661\":1,\"1662\":1,\"1675\":1,\"1676\":1,\"1677\":1,\"1678\":2,\"1687\":1,\"1700\":1,\"1702\":1,\"1711\":1,\"1717\":1,\"1720\":1,\"1721\":1,\"1722\":1,\"1735\":1,\"1743\":1,\"1744\":1,\"1745\":1,\"1746\":1,\"1747\":2,\"1748\":1,\"1755\":1,\"1763\":1,\"1769\":1,\"1770\":1,\"1774\":1,\"1780\":1,\"1781\":1,\"1782\":1,\"1783\":2,\"1790\":1,\"1794\":1,\"1801\":1,\"1809\":1,\"1814\":1,\"1822\":1,\"1828\":1,\"1833\":1,\"1837\":1,\"1841\":1,\"1845\":1,\"1852\":1,\"1862\":1,\"1867\":1,\"1874\":1,\"1875\":1,\"1876\":1,\"1877\":1,\"1883\":1,\"1884\":1,\"1885\":1,\"1892\":1,\"1897\":1,\"1906\":1,\"1911\":1,\"1912\":1,\"1913\":1,\"1914\":2,\"1915\":1,\"1916\":1,\"1923\":1,\"1927\":1,\"1940\":1,\"1949\":1,\"1950\":1,\"1951\":1,\"1959\":1,\"1965\":1,\"1969\":1,\"1973\":1,\"1979\":1,\"1983\":1,\"1987\":1,\"1993\":1,\"1994\":1,\"1995\":1,\"1996\":1,\"1997\":2,\"2001\":1,\"2005\":1,\"2010\":1,\"2017\":1,\"2023\":1,\"2029\":1,\"2037\":1,\"2050\":1,\"2052\":1,\"2056\":1,\"2062\":1,\"2064\":1,\"2071\":1,\"2078\":1,\"2083\":1,\"2091\":1,\"2097\":1,\"2098\":1,\"2099\":1,\"2100\":2,\"2105\":1,\"2110\":1,\"2118\":1,\"2125\":1,\"2133\":1,\"2134\":1,\"2135\":1,\"2145\":1,\"2146\":1,\"2147\":1,\"2148\":2,\"2149\":1,\"2157\":1,\"2163\":1,\"2164\":1,\"2165\":1,\"2174\":1,\"2183\":1,\"2194\":1,\"2197\":1,\"2204\":1,\"2211\":1,\"2212\":1,\"2213\":1,\"2218\":1,\"2219\":1,\"2220\":1,\"2225\":1,\"2231\":1,\"2238\":1,\"2249\":1,\"2257\":1,\"2262\":1,\"2268\":1,\"2271\":1,\"2276\":1,\"2281\":1,\"2287\":1,\"2293\":1,\"2300\":1,\"2314\":1,\"2315\":1,\"2325\":1,\"2329\":1,\"2336\":1,\"2337\":1,\"2338\":1,\"2339\":2,\"2340\":1,\"2344\":1,\"2349\":1,\"2353\":1,\"2361\":1,\"2372\":1,\"2379\":1,\"2388\":1,\"2398\":1,\"2408\":1,\"2409\":1,\"2410\":1,\"2420\":1,\"2421\":1,\"2422\":1,\"2438\":1,\"2448\":1,\"2455\":1,\"2460\":1,\"2466\":1,\"2468\":1,\"2469\":1,\"2470\":1,\"2471\":2,\"2472\":1,\"2479\":1,\"2497\":1,\"2502\":1,\"2506\":1,\"2507\":1,\"2508\":1,\"2519\":1,\"2527\":1,\"2528\":1,\"2529\":1,\"2530\":2,\"2537\":1,\"2543\":1,\"2547\":1,\"2552\":1,\"2553\":1,\"2557\":1,\"2558\":1,\"2559\":1,\"2566\":1,\"2577\":1,\"2581\":1,\"2588\":1,\"2589\":1,\"2590\":1,\"2591\":1,\"2603\":1,\"2604\":1,\"2605\":1,\"2606\":2,\"2610\":1,\"2618\":1,\"2620\":1,\"2630\":1,\"2633\":1,\"2634\":1,\"2635\":1,\"2636\":1,\"2637\":1,\"2638\":1,\"2644\":1,\"2652\":1,\"2657\":1,\"2666\":1,\"2673\":1,\"2681\":1,\"2688\":1,\"2696\":1,\"2702\":1,\"2709\":1,\"2715\":1,\"2716\":1,\"2735\":1,\"2736\":1,\"2737\":1,\"2738\":1,\"2739\":2,\"2743\":1,\"2750\":1,\"2755\":1,\"2759\":1,\"2769\":1,\"2772\":1,\"2775\":1,\"2780\":1,\"2786\":1,\"2790\":1,\"2791\":2,\"2797\":1,\"2802\":1,\"2808\":1,\"2816\":1,\"2820\":1,\"2824\":1,\"2828\":1,\"2833\":1,\"2838\":1,\"2842\":1,\"2850\":1,\"2856\":1,\"2857\":1,\"2858\":1,\"2863\":1,\"2868\":1,\"2870\":1,\"2871\":1,\"2872\":1,\"2878\":1,\"2881\":1,\"2885\":1,\"2889\":1,\"2896\":1,\"2897\":1,\"2901\":1,\"2908\":1,\"2909\":1,\"2910\":1,\"2911\":2,\"2917\":1,\"2921\":1,\"2930\":1,\"2934\":1,\"2942\":1,\"2950\":1,\"2959\":1,\"2964\":1,\"2974\":1,\"2981\":1,\"2993\":1,\"2997\":1,\"3004\":1,\"3008\":1,\"3013\":1,\"3014\":1,\"3018\":1,\"3024\":1,\"3025\":1,\"3026\":1,\"3027\":2,\"3035\":1,\"3043\":1,\"3045\":1,\"3046\":1,\"3047\":1,\"3051\":1,\"3062\":1,\"3066\":1,\"3079\":1,\"3086\":1,\"3092\":1,\"3098\":1,\"3107\":1,\"3112\":1,\"3119\":1,\"3124\":1,\"3135\":1,\"3141\":1,\"3151\":1,\"3155\":1,\"3159\":1,\"3165\":1,\"3166\":1,\"3201\":1,\"3208\":1,\"3212\":1,\"3213\":2,\"3223\":1,\"3250\":1,\"3254\":1,\"3261\":1,\"3271\":1,\"3275\":1,\"3280\":1,\"3284\":1,\"3289\":1,\"3295\":1,\"3307\":1,\"3314\":1,\"3320\":1,\"3328\":1,\"3331\":1,\"3338\":1,\"3347\":1,\"3362\":1,\"3376\":1,\"3382\":1,\"3383\":1,\"3384\":1,\"3388\":1,\"3392\":1,\"3398\":1,\"3422\":1,\"3431\":1,\"3437\":1,\"3444\":1,\"3451\":1,\"3452\":1,\"3453\":1,\"3454\":2,\"3468\":1,\"3470\":1,\"3474\":1,\"3478\":1,\"3489\":1,\"3495\":1,\"3505\":1,\"3509\":1,\"3515\":1,\"3521\":1,\"3528\":1,\"3538\":1,\"3540\":1,\"3541\":1,\"3542\":2,\"3547\":1,\"3556\":1,\"3557\":1,\"3558\":1,\"3562\":1,\"3566\":1,\"3571\":1,\"3576\":1,\"3582\":1,\"3588\":1,\"3592\":1,\"3597\":1,\"3606\":1,\"3611\":1,\"3615\":1,\"3621\":1,\"3627\":1,\"3629\":1,\"3630\":1,\"3631\":1,\"3635\":1,\"3641\":1,\"3646\":1,\"3653\":1,\"3658\":1,\"3663\":1,\"3675\":1,\"3676\":1,\"3687\":1,\"3688\":1,\"3689\":1,\"3692\":1,\"3695\":1,\"3696\":1,\"3697\":1,\"3698\":2,\"3702\":1,\"3705\":1,\"3711\":1,\"3712\":1,\"3722\":2,\"3725\":1,\"3726\":1,\"3727\":1,\"3730\":1,\"3735\":1,\"3740\":1,\"3744\":1,\"3748\":1,\"3769\":1,\"3774\":1,\"3780\":1,\"3789\":1},\"1\":{\"24\":1,\"35\":1,\"97\":1,\"110\":1,\"123\":2,\"147\":1,\"242\":1,\"246\":2,\"258\":1,\"271\":2,\"297\":1,\"314\":1,\"321\":1,\"325\":3,\"328\":1,\"329\":1,\"330\":1,\"331\":1,\"332\":1,\"333\":1,\"335\":1,\"336\":1,\"337\":1,\"339\":1,\"340\":1,\"346\":1,\"351\":1,\"368\":1,\"379\":1,\"392\":2,\"429\":1,\"431\":1,\"432\":1,\"548\":1,\"554\":1,\"562\":1,\"573\":1,\"575\":1,\"651\":1,\"656\":1,\"657\":1,\"720\":1,\"734\":5,\"749\":1,\"751\":5,\"757\":4,\"765\":2,\"767\":1,\"768\":1,\"769\":1,\"782\":2,\"784\":12,\"786\":1,\"814\":2,\"825\":1,\"861\":1,\"869\":1,\"890\":2,\"892\":2,\"893\":3,\"894\":2,\"895\":3,\"896\":2,\"924\":1,\"925\":1,\"926\":2,\"930\":3,\"931\":5,\"932\":4,\"933\":3,\"934\":1,\"935\":1,\"936\":1,\"937\":3,\"947\":1,\"952\":1,\"966\":1,\"987\":1,\"989\":2,\"990\":3,\"1035\":1,\"1050\":1,\"1059\":1,\"1061\":1,\"1097\":1,\"1111\":1,\"1116\":1,\"1117\":1,\"1155\":1,\"1176\":1,\"1219\":4,\"1220\":1,\"1222\":1,\"1227\":1,\"1232\":4,\"1233\":1,\"1234\":1,\"1236\":2,\"1237\":3,\"1238\":4,\"1239\":2,\"1245\":1,\"1246\":1,\"1283\":1,\"1311\":1,\"1376\":3,\"1439\":1,\"1442\":1,\"1445\":1,\"1488\":1,\"1489\":1,\"1514\":1,\"1568\":1,\"1571\":1,\"1575\":1,\"1578\":1,\"1589\":2,\"1591\":3,\"1599\":1,\"1621\":1,\"1720\":1,\"1732\":1,\"1740\":1,\"1750\":1,\"1769\":1,\"1795\":1,\"1810\":1,\"1817\":1,\"1846\":1,\"1852\":1,\"1925\":1,\"1940\":1,\"1957\":5,\"1958\":1,\"2001\":1,\"2025\":1,\"2030\":1,\"2052\":1,\"2064\":1,\"2065\":1,\"2071\":2,\"2084\":1,\"2101\":1,\"2106\":1,\"2112\":1,\"2126\":1,\"2127\":1,\"2136\":1,\"2139\":1,\"2151\":1,\"2152\":1,\"2156\":1,\"2157\":1,\"2206\":1,\"2207\":1,\"2220\":1,\"2225\":1,\"2252\":1,\"2258\":1,\"2273\":1,\"2279\":1,\"2280\":1,\"2293\":1,\"2296\":1,\"2306\":1,\"2311\":1,\"2315\":1,\"2392\":1,\"2393\":1,\"2446\":1,\"2448\":2,\"2460\":1,\"2461\":1,\"2462\":1,\"2469\":1,\"2487\":1,\"2488\":1,\"2529\":1,\"2538\":1,\"2545\":1,\"2547\":1,\"2548\":2,\"2551\":1,\"2556\":2,\"2560\":1,\"2567\":1,\"2570\":1,\"2573\":2,\"2575\":1,\"2577\":1,\"2581\":1,\"2582\":1,\"2595\":3,\"2597\":2,\"2600\":4,\"2603\":4,\"2612\":2,\"2613\":1,\"2624\":1,\"2625\":1,\"2634\":1,\"2635\":1,\"2638\":1,\"2639\":1,\"2653\":2,\"2655\":1,\"2656\":1,\"2657\":1,\"2672\":1,\"2687\":1,\"2705\":1,\"2733\":1,\"2755\":1,\"2770\":1,\"2778\":1,\"2784\":1,\"2788\":1,\"2789\":2,\"2790\":1,\"2806\":2,\"2822\":1,\"2823\":1,\"2824\":2,\"2825\":2,\"2831\":1,\"2836\":1,\"2840\":2,\"2844\":1,\"2852\":1,\"2866\":2,\"2867\":1,\"2868\":1,\"2872\":1,\"2875\":1,\"2883\":1,\"2884\":1,\"2894\":1,\"2896\":1,\"2899\":1,\"2905\":1,\"3009\":1,\"3047\":1,\"3102\":1,\"3140\":1,\"3144\":1,\"3158\":1,\"3182\":1,\"3183\":2,\"3259\":1,\"3280\":2,\"3289\":1,\"3292\":1,\"3294\":1,\"3295\":2,\"3306\":1,\"3308\":2,\"3320\":1,\"3326\":1,\"3327\":1,\"3330\":1,\"3373\":1,\"3379\":1,\"3380\":3,\"3381\":1,\"3382\":1,\"3384\":2,\"3387\":4,\"3388\":1,\"3391\":3,\"3392\":2,\"3394\":3,\"3403\":1,\"3407\":5,\"3410\":2,\"3413\":6,\"3421\":1,\"3431\":2,\"3432\":3,\"3433\":3,\"3476\":3,\"3482\":2,\"3485\":3,\"3508\":1,\"3548\":2,\"3570\":1,\"3571\":1,\"3647\":1,\"3662\":1,\"3673\":1,\"3719\":1,\"3720\":1,\"3738\":1}}],[\"用什么账号登录\",{\"1\":{\"3720\":1}}],[\"用有操作admin库的用户登录认证后才能操作\",{\"1\":{\"3711\":1}}],[\"用与http的ssl通信\",{\"1\":{\"3326\":1}}],[\"用与divide运算\",{\"1\":{\"783\":1}}],[\"用引号括起来\",{\"1\":{\"3020\":1}}],[\"用直接流输出字符\",{\"1\":{\"2896\":1}}],[\"用注解就可以了\",{\"1\":{\"2827\":1}}],[\"用匿名实现类表示的都可以用lambda表达式来写\",{\"1\":{\"2360\":1,\"2389\":1}}],[\"用被代理类对象进行实例化\",{\"1\":{\"2328\":1}}],[\"用newinstance调用空参构造器\",{\"1\":{\"2315\":1}}],[\"用objectinputstream类将磁盘文件中的对象还原为内存中的一个java对象\",{\"1\":{\"2143\":1}}],[\"用objectoutputstream类\",{\"1\":{\"2143\":1}}],[\"用最高位是1或0表示两个字节和一个字节\",{\"1\":{\"2109\":1,\"2111\":1}}],[\"用最高位表示正负\",{\"1\":{\"1121\":1}}],[\"用这个类型声明变量\",{\"1\":{\"1948\":1}}],[\"用一个字节的8位表示\",{\"1\":{\"2109\":1}}],[\"用一个字节的7位可以表示\",{\"1\":{\"2109\":1}}],[\"用一个符占位表示\",{\"1\":{\"1946\":1}}],[\"用一种算法\",{\"1\":{\"472\":1}}],[\"用set来存放\",{\"1\":{\"1909\":1}}],[\"用以标示当前读写处的位置\",{\"1\":{\"2130\":1}}],[\"用以获取不同种类的数据\",{\"1\":{\"2021\":1}}],[\"用以返回一个实现了iterator接口的对象\",{\"1\":{\"1836\":1}}],[\"用以测试\",{\"1\":{\"555\":1}}],[\"用实现类进行实例化\",{\"1\":{\"1831\":1}}],[\"用某种语言编写的一组指令的集合\",{\"1\":{\"1683\":1}}],[\"用p2保存了新对象的内存地址\",{\"1\":{\"1550\":1}}],[\"用v保存了对象实体所在内存空间的首地址\",{\"1\":{\"1548\":1}}],[\"用k保存了对象的标识符p1\",{\"1\":{\"1548\":1}}],[\"用abstract来修饰一个方法\",{\"1\":{\"1495\":1}}],[\"用abstract关键字来修饰一个类\",{\"1\":{\"1494\":1}}],[\"用其隐含实现一个接口或实现一个类\",{\"1\":{\"1462\":1}}],[\"用的方法也是一样的\",{\"1\":{\"2068\":1}}],[\"用的时候直接用第五种即可\",{\"1\":{\"2544\":1}}],[\"用的时候直接取即可\",{\"1\":{\"1617\":1}}],[\"用的时候就不能指定\",{\"1\":{\"1959\":1}}],[\"用的时候再定义\",{\"1\":{\"1946\":1}}],[\"用的要求不同\",{\"1\":{\"1803\":1}}],[\"用的比较多\",{\"1\":{\"1429\":1}}],[\"用的都是他的子类\",{\"1\":{\"771\":1}}],[\"用了不存在的索引\",{\"1\":{\"1245\":1}}],[\"用逗号分隔\",{\"1\":{\"1179\":2}}],[\"用单引号\",{\"1\":{\"1102\":1}}],[\"用做专门用途的字符串\",{\"1\":{\"1078\":1}}],[\"用wiodow打开cmd终端\",{\"1\":{\"1061\":1}}],[\"用法未知\",{\"1\":{\"997\":1}}],[\"用法\",{\"0\":{\"744\":1,\"753\":1},\"1\":{\"997\":1,\"1512\":1,\"1541\":1}}],[\"用法和作用都一样\",{\"1\":{\"406\":1}}],[\"用配置信息重新注册了一个bean\",{\"1\":{\"531\":1}}],[\"用途\",{\"0\":{\"517\":1,\"531\":1,\"929\":1},\"1\":{\"2467\":1}}],[\"用java配置类取代xml配置类\",{\"0\":{\"513\":1}}],[\"用起来非常简洁\",{\"1\":{\"496\":1}}],[\"用到时再说\",{\"1\":{\"3565\":1}}],[\"用到时再整理\",{\"1\":{\"434\":1,\"435\":1}}],[\"用到这个类直接注入即可\",{\"1\":{\"504\":1}}],[\"用到哪个类\",{\"1\":{\"504\":1}}],[\"用到的时候再整理\",{\"1\":{\"503\":1}}],[\"用到了new\",{\"1\":{\"420\":1}}],[\"用到了再学\",{\"1\":{\"11\":1}}],[\"用builder创建restclient对象\",{\"1\":{\"418\":1}}],[\"用用于管理和监控springboot应用程序\",{\"1\":{\"316\":1}}],[\"用\",{\"0\":{\"204\":1},\"1\":{\"1426\":1,\"2244\":1,\"3452\":1,\"3628\":1}}],[\"用来设置索引的字段和索引的排序方式\",{\"1\":{\"3625\":1}}],[\"用来设置打印级别\",{\"1\":{\"308\":2}}],[\"用来让新节点加入集群\",{\"1\":{\"3331\":1}}],[\"用来证明受访问的服务身份信息\",{\"1\":{\"3294\":1}}],[\"用来自定很多属性\",{\"1\":{\"3197\":1}}],[\"用来判断是同一个用户发的请求\",{\"1\":{\"3068\":1}}],[\"用来判断指针后面还有没有集合元素\",{\"1\":{\"924\":1,\"1841\":1}}],[\"用来接收浏览器发送过来的请求\",{\"1\":{\"3003\":1}}],[\"用来接收长度为\",{\"1\":{\"2234\":1}}],[\"用来提交连接\",{\"1\":{\"2682\":1}}],[\"用来提交连接的事务\",{\"1\":{\"2682\":1}}],[\"用来检测连接是否有效的sql\",{\"1\":{\"2674\":1}}],[\"用来返回文档中的记录总数\",{\"1\":{\"3609\":1}}],[\"用来返回数据表中多条记录构成的集合\",{\"1\":{\"2648\":1}}],[\"用来返回一条记录的通用查询操作\",{\"1\":{\"2648\":1}}],[\"用来返回当前线程的实例名\",{\"1\":{\"1721\":1}}],[\"用来继承basedao接口\",{\"1\":{\"2644\":1}}],[\"用来规范数据表的操作\",{\"1\":{\"2644\":1}}],[\"用来专门操作某张表\",{\"1\":{\"2642\":1}}],[\"用来放结果集\",{\"1\":{\"2603\":1}}],[\"用来了解底层\",{\"1\":{\"2524\":1}}],[\"用来防止空指针异常\",{\"1\":{\"2497\":1}}],[\"用来操作集合类数据的\",{\"1\":{\"2435\":1}}],[\"用来执行一个更新\",{\"1\":{\"2683\":1}}],[\"用来执行一个函数\",{\"1\":{\"2381\":1}}],[\"用来执行函数体的载体\",{\"1\":{\"2385\":1}}],[\"用来唯一的标识一个资源\",{\"1\":{\"2243\":1}}],[\"用来将长度为\",{\"1\":{\"2234\":1}}],[\"用来对应ip地址\",{\"1\":{\"2184\":1}}],[\"用来对方法进行测试\",{\"1\":{\"1638\":1}}],[\"用来遍历list类型的集合\",{\"1\":{\"1994\":1}}],[\"用来启动es服务\",{\"1\":{\"3285\":1}}],[\"用来启动线程\",{\"1\":{\"1718\":1}}],[\"用来启动springboot项目\",{\"1\":{\"98\":1}}],[\"用来创建和执行多线程\",{\"1\":{\"1715\":1}}],[\"用来声明默认值\",{\"1\":{\"1645\":1}}],[\"用来定义枚举类的\",{\"1\":{\"1624\":1}}],[\"用来初始化类\",{\"1\":{\"1524\":1}}],[\"用来修饰注解的注解为\",{\"1\":{\"1644\":1}}],[\"用来修饰属性\",{\"1\":{\"1355\":1,\"1470\":1}}],[\"用来修饰变量\",{\"1\":{\"1351\":1}}],[\"用来修饰方法\",{\"1\":{\"1350\":1}}],[\"用来调用其他的构造器\",{\"1\":{\"1330\":1}}],[\"用来限定对象对该类成员的访问权限\",{\"1\":{\"1309\":1}}],[\"用来存储一个一个的对象\",{\"1\":{\"1881\":1}}],[\"用来存储不同数据\",{\"1\":{\"1704\":1}}],[\"用来存储手机号和验证码\",{\"1\":{\"470\":1}}],[\"用来存放new出来的数组\",{\"1\":{\"1226\":1}}],[\"用来存放标识符\",{\"1\":{\"1226\":1}}],[\"用来输出一段话<\",{\"1\":{\"1060\":1}}],[\"用来运行java的环境\",{\"1\":{\"1024\":1}}],[\"用来替换正则表达式第一个匹配到的内容\",{\"1\":{\"990\":1}}],[\"用来替换匹配到的内容\",{\"1\":{\"989\":1}}],[\"用来替换的字符串\",{\"1\":{\"702\":1}}],[\"用来向后移动一次指针\",{\"1\":{\"925\":1,\"1840\":1}}],[\"用来扫描输入文本的类\",{\"1\":{\"885\":1,\"1006\":1}}],[\"用来格式化和解析日期时间\",{\"1\":{\"728\":1}}],[\"用来编程式加载bean\",{\"1\":{\"566\":1}}],[\"用来进行bean的加载控制\",{\"1\":{\"539\":1}}],[\"用来注册一个beandefinition接口的实现类\",{\"1\":{\"527\":1}}],[\"用来控制bean单例的\",{\"1\":{\"515\":1}}],[\"用来获取不同类型的值\",{\"1\":{\"2591\":1}}],[\"用来获取员工姓名的\",{\"1\":{\"2405\":1}}],[\"用来获取线程名\",{\"1\":{\"499\":1}}],[\"用来获取绑定的文档\",{\"1\":{\"409\":1}}],[\"用来在一个后台线程计划执行指定任务\",{\"1\":{\"491\":1}}],[\"用来指定更新哪个集合中的文档\",{\"1\":{\"406\":1}}],[\"用来指定删除哪个集合中的文档\",{\"1\":{\"404\":1}}],[\"用来指定最基础的日志输出级别\",{\"1\":{\"308\":1}}],[\"用来指定受此logger约束的某一个包或者具体的某一个类\",{\"1\":{\"308\":1}}],[\"用来配置日期格式\",{\"1\":{\"304\":1}}],[\"用来标记执行java\",{\"1\":{\"247\":1}}],[\"用来标注要使用\",{\"1\":{\"206\":1}}],[\"用来加载开发者自己开发的类\",{\"1\":{\"181\":1}}],[\"用来加载jar包中的类\",{\"1\":{\"181\":1}}],[\"用于简化数据库访问\",{\"1\":{\"3746\":1}}],[\"用于修改计数的额外选项\",{\"1\":{\"3609\":1}}],[\"用于修饰它支持的程序元素\",{\"1\":{\"1637\":1}}],[\"用于计算相关度的词项统计信息是基于分片的\",{\"1\":{\"3507\":1}}],[\"用于广播发现其他主机\",{\"1\":{\"3337\":1}}],[\"用于生成\",{\"1\":{\"3336\":1}}],[\"用于配置kibana\",{\"1\":{\"3329\":1}}],[\"用于集群节点见通信\",{\"1\":{\"3326\":1}}],[\"用于集合元素的遍历\",{\"1\":{\"1834\":1}}],[\"用于集合遍历\",{\"1\":{\"919\":1}}],[\"用于发现其他节点\",{\"1\":{\"3268\":1,\"3269\":1,\"3270\":1,\"3271\":1}}],[\"用于发布和使用类库\",{\"1\":{\"2984\":1}}],[\"用于节点内部通信\",{\"1\":{\"3268\":1}}],[\"用于保存分片的相关信息\",{\"1\":{\"3574\":1}}],[\"用于保存数据\",{\"1\":{\"3268\":1}}],[\"用于保存具有\",{\"1\":{\"1909\":1}}],[\"用于范围比较的值\",{\"1\":{\"3172\":1}}],[\"用于开发时调试软件调用\",{\"1\":{\"2989\":1}}],[\"用于开启热部署\",{\"1\":{\"608\":1}}],[\"用于已发布的软件运行时调用\",{\"1\":{\"2989\":1}}],[\"用于打包与组件相关联的辅助资源\",{\"1\":{\"2984\":1}}],[\"用于ajax的访问\",{\"1\":{\"2950\":1}}],[\"用于特殊查询的通用方法\",{\"1\":{\"2648\":1}}],[\"用于连接池\",{\"1\":{\"2635\":1}}],[\"用于获取关于\",{\"1\":{\"2592\":1}}],[\"用于获取服务信息\",{\"1\":{\"314\":1}}],[\"用于执行\",{\"1\":{\"2556\":1}}],[\"用于执行静态\",{\"1\":{\"2556\":1}}],[\"用于给stream中元素做汇总的方法\",{\"1\":{\"2490\":1}}],[\"用于操作数据库的工具类\",{\"1\":{\"2652\":1}}],[\"用于操作数据源\",{\"1\":{\"2438\":1}}],[\"用于操作文件或目录的工具类\",{\"1\":{\"2168\":1}}],[\"用于访问某台服务器提供的服务\",{\"1\":{\"2244\":1}}],[\"用于监听客户端的请求\",{\"1\":{\"2221\":1}}],[\"用于将多个字符串串连成路径\",{\"1\":{\"2167\":1}}],[\"用于存储和读取基本数据类型数据或对象的处理流\",{\"1\":{\"2142\":1}}],[\"用于存放对象实例\",{\"1\":{\"1546\":1}}],[\"用于多种数据类型的输出\",{\"1\":{\"2120\":1}}],[\"用于数据的写出\",{\"1\":{\"2064\":1}}],[\"用于数组的初始化和填充\",{\"1\":{\"898\":1}}],[\"用于处理设备之间的数据传输\",{\"1\":{\"2021\":1}}],[\"用于处理可能产生的不同类型的异常对象\",{\"1\":{\"1585\":1}}],[\"用于遍历集合\",{\"1\":{\"1850\":1}}],[\"用于创建并返回不同类型的线程池\",{\"1\":{\"1815\":1}}],[\"用于指定被该元\",{\"1\":{\"1663\":1}}],[\"用于指定被修饰的\",{\"1\":{\"1660\":1}}],[\"用于传参\",{\"1\":{\"1398\":1}}],[\"用于对属性初始化\",{\"1\":{\"1316\":1}}],[\"用于对齐\",{\"1\":{\"299\":1}}],[\"用于跳过其所在循环语句块的一次执行\",{\"1\":{\"1195\":1}}],[\"用于在内存中保存数据\",{\"1\":{\"1067\":1}}],[\"用于方法需要抛出异常的情况\",{\"1\":{\"1060\":1}}],[\"用于标注该方法的参数\",{\"1\":{\"1060\":1}}],[\"用于标注该类的作者\",{\"1\":{\"1059\":1}}],[\"用于标记与本类相关联的类\",{\"1\":{\"1059\":1}}],[\"用于标记当前类版本\",{\"1\":{\"1059\":1}}],[\"用于快速链接到相关代码\",{\"1\":{\"1058\":1}}],[\"用于把\",{\"1\":{\"709\":1}}],[\"用于后端与前端进行数据格式统一\",{\"1\":{\"646\":1}}],[\"用于安全\",{\"1\":{\"644\":1}}],[\"用于测试基javase语法\",{\"1\":{\"1059\":1}}],[\"用于测试\",{\"1\":{\"549\":1,\"1938\":1}}],[\"用于确定每个月第几个星期几\",{\"1\":{\"501\":1}}],[\"用于调试时区分线程名\",{\"1\":{\"500\":1}}],[\"用于封装一组数据\",{\"1\":{\"153\":1}}],[\"用于项目测试\",{\"1\":{\"37\":1}}],[\"用户认证\",{\"1\":{\"3723\":1}}],[\"用户管理的数据库\",{\"1\":{\"3712\":1}}],[\"用户所在的数据库\",{\"1\":{\"3712\":1}}],[\"用户id\",{\"1\":{\"3712\":1}}],[\"用户无法访问实例\",{\"1\":{\"3696\":1}}],[\"用户验证\",{\"1\":{\"3694\":1}}],[\"用户创建的集合名字不能含有保留字符\",{\"1\":{\"3581\":1}}],[\"用户的装备\",{\"1\":{\"3541\":1}}],[\"用户的体验就比较差\",{\"1\":{\"2794\":1}}],[\"用户搜索的时候\",{\"1\":{\"3461\":1}}],[\"用户将以马斯克\",{\"1\":{\"3425\":1}}],[\"用户打开浏览器\",{\"1\":{\"3033\":1}}],[\"用户名默认是elastic\",{\"1\":{\"3315\":1}}],[\"用户名\",{\"0\":{\"2543\":1},\"1\":{\"2540\":1,\"3329\":1,\"3707\":1,\"3712\":2,\"3713\":1,\"3714\":1}}],[\"用户数据报协议udp\",{\"1\":{\"2202\":1}}],[\"用户线程\",{\"1\":{\"1711\":1}}],[\"用户同时在电脑手机上干多件事\",{\"1\":{\"1693\":1}}],[\"用户自定义异常类都是runtimeexception的子类\",{\"1\":{\"1611\":1}}],[\"用户可以在这里配置远程扩展停止词字典\",{\"1\":{\"3488\":1}}],[\"用户可以在这里配置远程扩展字典\",{\"1\":{\"3488\":1}}],[\"用户可以在这里配置自己的扩展停止词字典\",{\"1\":{\"3488\":1}}],[\"用户可以在这里配置自己的扩展字典\",{\"1\":{\"3488\":1}}],[\"用户可以使用jdk自带的jar命令创建或提取jar文件\",{\"1\":{\"2979\":1}}],[\"用户可以使用javabean将功能\",{\"1\":{\"1532\":1}}],[\"用户可以认为javabean提供了一种随时随地的复制和粘贴的功能\",{\"1\":{\"1532\":1}}],[\"用户从键盘输入内容\",{\"1\":{\"887\":1,\"1008\":1}}],[\"用户\",{\"1\":{\"55\":1,\"3298\":1}}],[\"用户端应用\",{\"1\":{\"54\":1}}],[\"用户端\",{\"1\":{\"51\":1}}],[\"用户界面的设计\",{\"1\":{\"24\":1}}],[\"第\",{\"1\":{\"3526\":1}}],[\"第9次\",{\"1\":{\"3298\":1}}],[\"第8次\",{\"1\":{\"3298\":1}}],[\"第7次\",{\"1\":{\"3298\":1}}],[\"第7和8是用来配置dns与证书绑定的\",{\"1\":{\"3298\":1}}],[\"第6次\",{\"1\":{\"3298\":1}}],[\"第4次\",{\"1\":{\"3298\":1}}],[\"第4阶段\",{\"0\":{\"30\":1}}],[\"第3次\",{\"1\":{\"3298\":1}}],[\"第3阶段\",{\"0\":{\"27\":1}}],[\"第五个实现类\",{\"1\":{\"1910\":1}}],[\"第四个实现类\",{\"1\":{\"1910\":1}}],[\"第10次\",{\"1\":{\"3298\":1}}],[\"第1次\",{\"1\":{\"3298\":1}}],[\"第11次添加数据\",{\"1\":{\"1867\":1}}],[\"第1阶段\",{\"0\":{\"20\":1}}],[\"第5次\",{\"1\":{\"3298\":1}}],[\"第5个文件就需要排队了\",{\"1\":{\"1692\":1}}],[\"第5阶段\",{\"0\":{\"31\":1}}],[\"第2次\",{\"1\":{\"3298\":1}}],[\"第2~8个bit表示e指数\",{\"1\":{\"1097\":1}}],[\"第2阶段\",{\"0\":{\"23\":1}}],[\"第三列倒排索引包含的信息为\",{\"1\":{\"3433\":1}}],[\"第三个添加的用户\",{\"1\":{\"3712\":1}}],[\"第三个\",{\"1\":{\"2111\":1}}],[\"第三个实现类\",{\"1\":{\"1910\":1}}],[\"第三代\",{\"1\":{\"1020\":1}}],[\"第三次引入的api是成功的\",{\"1\":{\"709\":1}}],[\"第三方工具对拷\",{\"0\":{\"2895\":1}}],[\"第三方o\",{\"1\":{\"2526\":1}}],[\"第三方jar包\",{\"0\":{\"2169\":1}}],[\"第三方api\",{\"0\":{\"610\":1},\"1\":{\"612\":1}}],[\"第三方bean属性\",{\"0\":{\"199\":1}}],[\"第二次交互\",{\"1\":{\"3296\":1}}],[\"第二种\",{\"1\":{\"1533\":1}}],[\"第二种就是单独给mapper下目录配置debug模式\",{\"1\":{\"308\":1}}],[\"第二代\",{\"1\":{\"1020\":1}}],[\"第二个添加的用户\",{\"1\":{\"3712\":1}}],[\"第二个查询条件\",{\"1\":{\"3169\":1}}],[\"第二个是设置的\",{\"1\":{\"2569\":1,\"2570\":1}}],[\"第二个问题是如何才能区别unicode和ascii\",{\"1\":{\"2111\":1}}],[\"第二个实现类\",{\"1\":{\"1910\":1}}],[\"第二个单词开始每个单词首字母大写\",{\"1\":{\"1083\":1}}],[\"第二个表示值的类型\",{\"1\":{\"956\":1}}],[\"第二个参数默认是\",{\"1\":{\"782\":1}}],[\"第二个参数toffset\",{\"1\":{\"662\":1}}],[\"第二个参数可选\",{\"1\":{\"656\":1}}],[\"第一次前台启动为了获取密码信息\",{\"1\":{\"3310\":1,\"3342\":1}}],[\"第一次访问要输入账号和密码\",{\"1\":{\"3308\":1,\"3330\":1}}],[\"第一次访问时创建servlet对象\",{\"1\":{\"2794\":1}}],[\"第一次启动es后\",{\"1\":{\"3327\":1}}],[\"第一次启动es会返回密码信息\",{\"1\":{\"3315\":1}}],[\"第一次启动节点时\",{\"1\":{\"3326\":1}}],[\"第一次启动控制台打印的验证信息\",{\"1\":{\"3305\":1}}],[\"第一次启动比较特殊\",{\"1\":{\"3304\":1}}],[\"第一次启动启\",{\"0\":{\"3304\":1}}],[\"第一次交互\",{\"1\":{\"3296\":1}}],[\"第一次创建session时\",{\"1\":{\"3068\":1}}],[\"第一次调用add\",{\"1\":{\"1869\":1}}],[\"第一种\",{\"1\":{\"1533\":1}}],[\"第一种把<root\",{\"1\":{\"308\":1}}],[\"第一代\",{\"1\":{\"1020\":1}}],[\"第一个添加的用户\",{\"1\":{\"3712\":1}}],[\"第一个启动的节点必须包含cluster\",{\"1\":{\"3277\":1}}],[\"第一个节点\",{\"1\":{\"3269\":1}}],[\"第一个查询条件\",{\"1\":{\"3169\":1}}],[\"第一个参数设置为null\",{\"1\":{\"2634\":1}}],[\"第一个参数是要设置的\",{\"1\":{\"2569\":1,\"2570\":1}}],[\"第一个参数是timertask\",{\"1\":{\"493\":1}}],[\"第一个形参是方法引用中的方法的调用者\",{\"1\":{\"2400\":1}}],[\"第一个实现类\",{\"1\":{\"1910\":1}}],[\"第一个访问某项资源的任务必须锁定这项资源\",{\"1\":{\"1772\":1}}],[\"第一个内层数组的长度\",{\"1\":{\"1239\":1}}],[\"第一个bit表示正负\",{\"1\":{\"1097\":1}}],[\"第一个单词首字母小写\",{\"1\":{\"1083\":1}}],[\"第一个表示键的类型\",{\"1\":{\"956\":1}}],[\"240z\",{\"1\":{\"3674\":1}}],[\"24\",{\"1\":{\"3673\":1}}],[\"247\",{\"1\":{\"2192\":1}}],[\"2>\",{\"1\":{\"3589\":1}}],[\"2+1\",{\"1\":{\"3526\":1}}],[\"2^32\",{\"1\":{\"3504\":1}}],[\"2^30\",{\"1\":{\"1928\":1}}],[\"2^64\",{\"1\":{\"3504\":1}}],[\"2通过resultsetmetadata获取结果集中的列数\",{\"1\":{\"2603\":1}}],[\"2将数据封装为一个对象\",{\"1\":{\"2597\":1}}],[\"2getdeclaredfield\",{\"0\":{\"2308\":1}}],[\"2在java\",{\"1\":{\"2165\":1}}],[\"2为了弥补这种不足\",{\"1\":{\"2164\":1}}],[\"2l\",{\"1\":{\"1671\":1}}],[\"2字节\",{\"1\":{\"1100\":1}}],[\"2种\",{\"0\":{\"1091\":1}}],[\"2个\",{\"1\":{\"1295\":1}}],[\"2个参数\",{\"1\":{\"945\":1,\"946\":1}}],[\"2个字节的unicode码\",{\"1\":{\"813\":1}}],[\"2~36\",{\"1\":{\"888\":1,\"1009\":1}}],[\"262144\",{\"1\":{\"3313\":2,\"3346\":2}}],[\"26\",{\"1\":{\"736\":1,\"737\":1,\"3670\":6}}],[\"23cx\",{\"1\":{\"3724\":1,\"3739\":1,\"3751\":1}}],[\"23d23\",{\"1\":{\"3715\":1}}],[\"2333\",{\"1\":{\"2220\":1,\"2225\":1}}],[\"2302323\",{\"1\":{\"1117\":2}}],[\"2321e12\",{\"1\":{\"1096\":1}}],[\"23f\",{\"1\":{\"1096\":1}}],[\"234\",{\"1\":{\"779\":1,\"780\":1,\"781\":1}}],[\"2345\",{\"1\":{\"214\":1}}],[\"23\",{\"1\":{\"720\":2,\"751\":2,\"757\":2,\"1096\":2,\"1440\":1,\"1935\":1,\"2126\":1,\"2156\":2,\"2405\":1,\"2414\":1,\"2688\":1,\"2689\":1,\"2690\":1,\"3673\":1}}],[\"29\",{\"1\":{\"719\":1}}],[\"25t15\",{\"1\":{\"3673\":6,\"3674\":2}}],[\"25t14\",{\"1\":{\"3670\":11}}],[\"256\",{\"1\":{\"3029\":1,\"3305\":1,\"3328\":1}}],[\"255byte\",{\"1\":{\"2608\":1}}],[\"255\",{\"1\":{\"813\":2,\"2121\":1,\"2181\":1,\"2182\":2}}],[\"25\",{\"1\":{\"717\":2,\"3108\":1}}],[\"25<\",{\"1\":{\"123\":2}}],[\"2ms\",{\"1\":{\"695\":1}}],[\"28956\",{\"1\":{\"781\":1}}],[\"28\",{\"1\":{\"674\":2}}],[\"28<\",{\"1\":{\"358\":1}}],[\"276z\",{\"1\":{\"3674\":1}}],[\"27019\",{\"1\":{\"3652\":1,\"3658\":1,\"3674\":2,\"3679\":1,\"3739\":1,\"3751\":1}}],[\"27018\",{\"1\":{\"3652\":1,\"3657\":1,\"3673\":2,\"3679\":1,\"3739\":1,\"3751\":1}}],[\"27017\",{\"1\":{\"388\":2,\"3562\":1,\"3564\":1,\"3652\":1,\"3656\":1,\"3664\":1,\"3667\":1,\"3668\":1,\"3670\":1,\"3673\":1,\"3679\":1,\"3736\":1,\"3738\":1,\"3739\":1,\"3750\":1,\"3751\":1}}],[\"27\",{\"1\":{\"590\":1,\"2537\":1,\"2539\":1,\"3670\":1,\"3674\":2}}],[\"210\",{\"1\":{\"2189\":1}}],[\"2113\",{\"1\":{\"1433\":1}}],[\"21323232323232332323\",{\"1\":{\"1116\":1}}],[\"21\",{\"1\":{\"406\":1,\"720\":7,\"734\":1,\"778\":1,\"1426\":2,\"1427\":2,\"2508\":1,\"2613\":1,\"3220\":1,\"3226\":1,\"3231\":2,\"3234\":1,\"3236\":1,\"3237\":2,\"3240\":1,\"3245\":1}}],[\"2ck23\",{\"1\":{\"388\":1,\"3709\":1}}],[\"2<\",{\"1\":{\"371\":1,\"413\":1,\"600\":1,\"612\":1,\"3216\":1}}],[\"2级\",{\"1\":{\"262\":1,\"263\":1}}],[\"20y\",{\"1\":{\"3298\":1}}],[\"2039728\",{\"1\":{\"3253\":1}}],[\"20tb\",{\"1\":{\"3094\":1}}],[\"20个\",{\"1\":{\"3058\":1}}],[\"2014\",{\"1\":{\"2352\":1}}],[\"2011年初已经用尽\",{\"1\":{\"2181\":1}}],[\"2019\",{\"1\":{\"734\":1,\"2352\":1,\"3590\":2,\"3596\":1}}],[\"2019年2月18日\",{\"1\":{\"734\":1}}],[\"2018\",{\"1\":{\"147\":2}}],[\"20\",{\"1\":{\"403\":1,\"407\":1,\"501\":3,\"699\":1,\"725\":2,\"773\":1,\"776\":1,\"910\":2,\"1089\":1,\"1143\":1,\"1220\":1,\"1237\":1,\"1262\":2,\"1266\":1,\"1267\":1,\"1292\":2,\"1293\":1,\"1381\":2,\"1408\":2,\"1526\":1,\"1555\":2,\"1729\":1,\"1842\":1,\"1851\":1,\"1935\":1,\"1957\":1,\"1958\":2,\"2106\":1,\"2256\":2,\"2257\":2,\"2377\":2,\"2409\":1,\"2410\":1,\"2469\":4,\"2570\":1,\"2619\":1,\"2674\":2,\"2691\":1,\"3214\":1,\"3220\":1,\"3225\":1,\"3226\":2,\"3227\":3,\"3234\":2,\"3240\":1,\"3242\":2,\"3245\":2}}],[\"2020\",{\"1\":{\"718\":2}}],[\"2022年3月3日\",{\"1\":{\"734\":3}}],[\"2022\",{\"1\":{\"717\":2,\"719\":1,\"720\":7,\"721\":2,\"724\":1,\"725\":2,\"727\":1,\"732\":1,\"733\":2,\"734\":1,\"736\":1,\"737\":1}}],[\"2023\",{\"1\":{\"590\":1,\"721\":1,\"3108\":1,\"3355\":1,\"3670\":11,\"3673\":6,\"3674\":2}}],[\"20210318bcmf\",{\"1\":{\"3108\":1,\"3355\":1}}],[\"2021\",{\"1\":{\"573\":1,\"2352\":1}}],[\"202\",{\"1\":{\"220\":1,\"2189\":1}}],[\"20mb\",{\"1\":{\"214\":1}}],[\"20000\",{\"1\":{\"2620\":1,\"2621\":1}}],[\"2000\",{\"1\":{\"493\":1,\"1729\":1,\"3053\":1,\"3616\":1,\"3667\":1,\"3670\":1}}],[\"2001\",{\"1\":{\"478\":1,\"506\":1,\"511\":1,\"3029\":1,\"3030\":1}}],[\"2006\",{\"1\":{\"347\":1}}],[\"200\",{\"1\":{\"214\":1,\"1112\":1,\"1430\":2,\"2196\":1}}],[\"2218\",{\"1\":{\"3712\":1}}],[\"22026\",{\"1\":{\"769\":1}}],[\"222\",{\"1\":{\"718\":2}}],[\"225\",{\"1\":{\"362\":1,\"372\":1,\"378\":1,\"388\":2,\"416\":1,\"439\":1,\"3298\":2,\"3308\":1,\"3330\":1,\"3674\":2,\"3679\":3,\"3736\":1,\"3738\":1,\"3739\":3,\"3750\":1,\"3751\":3}}],[\"22\",{\"1\":{\"119\":1,\"718\":8,\"732\":1,\"733\":2,\"734\":1,\"1995\":1,\"1996\":2,\"2469\":2,\"3220\":1,\"3226\":1,\"3234\":1,\"3236\":1,\"3237\":2,\"3240\":1,\"3245\":1,\"3249\":1,\"3253\":1}}],[\"2\",{\"0\":{\"32\":1,\"92\":1,\"94\":1,\"96\":1,\"101\":1,\"106\":1,\"110\":1,\"116\":1,\"117\":1,\"118\":2,\"119\":1,\"124\":1,\"128\":1,\"134\":1,\"138\":1,\"142\":1,\"147\":1,\"152\":1,\"155\":1,\"162\":1,\"165\":1,\"170\":1,\"175\":1,\"177\":1,\"180\":1,\"181\":1,\"182\":1,\"183\":2,\"186\":1,\"190\":1,\"194\":1,\"197\":1,\"198\":2,\"201\":1,\"202\":1,\"203\":2,\"204\":1,\"205\":1,\"208\":1,\"212\":1,\"215\":1,\"219\":1,\"221\":1,\"224\":1,\"236\":1,\"239\":1,\"242\":1,\"245\":1,\"251\":1,\"254\":1,\"257\":1,\"263\":1,\"267\":1,\"272\":1,\"275\":1,\"279\":1,\"280\":1,\"283\":1,\"288\":1,\"293\":1,\"298\":1,\"303\":1,\"307\":1,\"313\":1,\"318\":1,\"319\":1,\"320\":2,\"321\":1,\"324\":1,\"330\":1,\"342\":1,\"348\":1,\"349\":1,\"350\":2,\"351\":1,\"356\":1,\"359\":1,\"362\":1,\"365\":1,\"369\":1,\"372\":1,\"375\":1,\"378\":1,\"383\":1,\"388\":1,\"391\":1,\"396\":1,\"397\":1,\"398\":2,\"404\":1,\"414\":1,\"417\":1,\"423\":1,\"429\":1,\"439\":1,\"445\":1,\"451\":1,\"454\":1,\"459\":1,\"462\":1,\"467\":1,\"471\":1,\"477\":1,\"483\":1,\"493\":1,\"498\":1,\"522\":1,\"523\":1,\"524\":2,\"525\":1,\"528\":1,\"531\":1,\"532\":1,\"536\":1,\"541\":1,\"547\":1,\"548\":1,\"549\":2,\"550\":1,\"551\":1,\"554\":1,\"565\":1,\"566\":1,\"567\":2,\"575\":1,\"581\":1,\"587\":1,\"590\":1,\"593\":1,\"598\":1,\"607\":1,\"617\":1,\"619\":1,\"620\":1,\"623\":1,\"627\":1,\"631\":1,\"636\":1,\"641\":1,\"645\":1,\"652\":1,\"656\":1,\"660\":1,\"666\":1,\"672\":1,\"678\":1,\"681\":1,\"683\":1,\"687\":1,\"688\":1,\"693\":1,\"700\":1,\"708\":1,\"715\":1,\"717\":1,\"725\":1,\"730\":1,\"733\":1,\"737\":1,\"741\":1,\"745\":1,\"750\":1,\"754\":1,\"757\":1,\"761\":1,\"773\":1,\"780\":1,\"789\":1,\"798\":1,\"809\":1,\"810\":1,\"814\":1,\"815\":1,\"816\":2,\"817\":1,\"823\":1,\"824\":1,\"830\":1,\"835\":1,\"838\":1,\"849\":1,\"853\":1,\"862\":1,\"869\":1,\"878\":1,\"882\":1,\"885\":1,\"887\":1,\"889\":2,\"891\":1,\"892\":1,\"893\":2,\"900\":1,\"906\":1,\"918\":1,\"925\":1,\"931\":1,\"940\":1,\"946\":1,\"960\":1,\"972\":1,\"975\":1,\"983\":1,\"990\":1,\"997\":1,\"1006\":1,\"1008\":1,\"1012\":1,\"1016\":1,\"1020\":1,\"1021\":1,\"1025\":1,\"1027\":1,\"1030\":1,\"1033\":1,\"1039\":1,\"1040\":1,\"1041\":2,\"1042\":1,\"1045\":1,\"1050\":1,\"1054\":1,\"1059\":1,\"1067\":1,\"1070\":1,\"1076\":1,\"1079\":1,\"1083\":1,\"1087\":1,\"1093\":1,\"1101\":1,\"1107\":1,\"1111\":1,\"1112\":1,\"1113\":2,\"1114\":1,\"1120\":1,\"1125\":1,\"1129\":1,\"1132\":1,\"1140\":1,\"1144\":1,\"1149\":1,\"1152\":1,\"1156\":1,\"1160\":1,\"1161\":1,\"1162\":2,\"1163\":1,\"1169\":1,\"1171\":1,\"1175\":1,\"1181\":1,\"1184\":1,\"1189\":1,\"1194\":1,\"1195\":1,\"1201\":1,\"1202\":1,\"1203\":2,\"1204\":1,\"1208\":1,\"1214\":1,\"1217\":1,\"1218\":1,\"1219\":2,\"1226\":1,\"1233\":1,\"1235\":1,\"1236\":1,\"1237\":2,\"1246\":1,\"1248\":1,\"1251\":1,\"1256\":1,\"1267\":1,\"1268\":2,\"1271\":1,\"1272\":1,\"1273\":2,\"1277\":1,\"1281\":1,\"1286\":1,\"1290\":1,\"1293\":1,\"1296\":1,\"1298\":1,\"1302\":1,\"1303\":1,\"1304\":2,\"1305\":1,\"1310\":1,\"1313\":1,\"1316\":1,\"1317\":1,\"1324\":1,\"1327\":1,\"1328\":1,\"1329\":2,\"1335\":1,\"1341\":1,\"1349\":1,\"1353\":1,\"1358\":1,\"1361\":1,\"1367\":1,\"1371\":1,\"1372\":1,\"1373\":2,\"1374\":1,\"1375\":1,\"1380\":1,\"1381\":1,\"1382\":2,\"1383\":1,\"1386\":1,\"1392\":1,\"1393\":1,\"1396\":1,\"1397\":1,\"1398\":2,\"1399\":1,\"1404\":1,\"1412\":1,\"1413\":1,\"1414\":2,\"1419\":1,\"1421\":1,\"1424\":1,\"1427\":1,\"1433\":1,\"1438\":1,\"1446\":1,\"1450\":1,\"1454\":1,\"1460\":1,\"1464\":1,\"1467\":1,\"1468\":1,\"1471\":1,\"1476\":1,\"1481\":1,\"1488\":1,\"1492\":1,\"1495\":1,\"1500\":1,\"1505\":1,\"1506\":1,\"1513\":1,\"1517\":1,\"1521\":1,\"1522\":1,\"1525\":1,\"1528\":1,\"1532\":1,\"1537\":1,\"1538\":1,\"1539\":2,\"1540\":1,\"1544\":1,\"1547\":1,\"1548\":1,\"1549\":2,\"1550\":1,\"1551\":1,\"1555\":1,\"1560\":1,\"1566\":1,\"1569\":1,\"1572\":1,\"1576\":1,\"1578\":1,\"1586\":1,\"1592\":1,\"1599\":1,\"1607\":1,\"1612\":1,\"1617\":1,\"1622\":1,\"1625\":1,\"1631\":1,\"1632\":1,\"1636\":1,\"1637\":1,\"1641\":1,\"1644\":1,\"1651\":1,\"1652\":1,\"1653\":2,\"1654\":1,\"1657\":1,\"1658\":1,\"1659\":2,\"1662\":1,\"1668\":1,\"1669\":1,\"1670\":1,\"1671\":2,\"1674\":1,\"1677\":1,\"1684\":1,\"1685\":1,\"1686\":2,\"1694\":1,\"1697\":1,\"1698\":1,\"1699\":2,\"1700\":1,\"1701\":1,\"1707\":1,\"1710\":1,\"1716\":1,\"1719\":1,\"1722\":1,\"1725\":1,\"1729\":1,\"1733\":1,\"1734\":1,\"1740\":1,\"1741\":1,\"1742\":2,\"1743\":1,\"1746\":1,\"1750\":1,\"1754\":1,\"1760\":1,\"1761\":1,\"1762\":2,\"1767\":1,\"1768\":1,\"1773\":1,\"1779\":1,\"1782\":1,\"1789\":1,\"1793\":1,\"1797\":1,\"1800\":1,\"1808\":1,\"1813\":1,\"1821\":1,\"1827\":1,\"1829\":1,\"1836\":1,\"1840\":1,\"1844\":1,\"1851\":1,\"1855\":1,\"1859\":1,\"1860\":1,\"1861\":2,\"1862\":1,\"1866\":1,\"1871\":1,\"1872\":1,\"1873\":2,\"1874\":1,\"1877\":1,\"1882\":1,\"1885\":1,\"1891\":1,\"1896\":1,\"1900\":1,\"1903\":1,\"1904\":1,\"1905\":2,\"1906\":1,\"1910\":1,\"1913\":1,\"1922\":1,\"1926\":1,\"1931\":1,\"1934\":1,\"1935\":1,\"1936\":2,\"1939\":1,\"1948\":1,\"1951\":1,\"1954\":1,\"1958\":1,\"1960\":1,\"1964\":1,\"1966\":1,\"1967\":1,\"1968\":2,\"1972\":1,\"1978\":1,\"1986\":1,\"1990\":1,\"1991\":1,\"1992\":2,\"1993\":1,\"1996\":1,\"2000\":1,\"2004\":1,\"2009\":1,\"2013\":1,\"2016\":1,\"2020\":1,\"2022\":1,\"2028\":1,\"2033\":1,\"2034\":1,\"2035\":1,\"2036\":2,\"2045\":1,\"2049\":1,\"2051\":1,\"2055\":1,\"2061\":1,\"2063\":1,\"2070\":1,\"2077\":1,\"2082\":1,\"2090\":1,\"2096\":1,\"2099\":1,\"2104\":1,\"2109\":1,\"2117\":1,\"2121\":1,\"2124\":1,\"2130\":1,\"2131\":1,\"2132\":2,\"2135\":1,\"2139\":1,\"2144\":1,\"2147\":1,\"2152\":1,\"2156\":1,\"2162\":2,\"2165\":1,\"2173\":1,\"2177\":1,\"2180\":1,\"2181\":1,\"2182\":2,\"2191\":1,\"2192\":1,\"2193\":2,\"2200\":1,\"2203\":1,\"2210\":1,\"2213\":1,\"2217\":1,\"2220\":1,\"2224\":1,\"2230\":1,\"2237\":1,\"2242\":1,\"2248\":1,\"2253\":1,\"2256\":1,\"2259\":1,\"2261\":1,\"2267\":1,\"2275\":1,\"2277\":1,\"2280\":1,\"2286\":1,\"2291\":1,\"2296\":1,\"2299\":1,\"2311\":1,\"2312\":1,\"2313\":2,\"2314\":1,\"2322\":1,\"2323\":1,\"2324\":2,\"2328\":1,\"2333\":1,\"2334\":1,\"2335\":2,\"2338\":1,\"2343\":1,\"2348\":1,\"2352\":1,\"2357\":1,\"2360\":1,\"2364\":1,\"2370\":1,\"2387\":1,\"2393\":1,\"2397\":1,\"2404\":1,\"2405\":1,\"2406\":1,\"2407\":2,\"2410\":1,\"2413\":1,\"2416\":1,\"2419\":1,\"2422\":1,\"2425\":1,\"2428\":1,\"2431\":1,\"2432\":1,\"2433\":2,\"2437\":1,\"2445\":1,\"2446\":1,\"2451\":1,\"2454\":1,\"2459\":1,\"2465\":1,\"2467\":1,\"2470\":1,\"2475\":1,\"2478\":1,\"2489\":1,\"2490\":1,\"2496\":1,\"2501\":1,\"2503\":1,\"2504\":1,\"2505\":2,\"2508\":1,\"2518\":1,\"2526\":1,\"2529\":1,\"2533\":1,\"2536\":1,\"2542\":1,\"2546\":1,\"2551\":1,\"2556\":1,\"2559\":1,\"2565\":1,\"2570\":1,\"2574\":1,\"2575\":1,\"2576\":2,\"2580\":1,\"2585\":1,\"2586\":1,\"2587\":2,\"2588\":1,\"2591\":1,\"2599\":1,\"2600\":1,\"2601\":1,\"2602\":2,\"2605\":1,\"2609\":1,\"2617\":1,\"2619\":1,\"2624\":1,\"2629\":1,\"2631\":1,\"2635\":1,\"2638\":1,\"2643\":1,\"2648\":1,\"2649\":1,\"2650\":1,\"2651\":2,\"2656\":1,\"2662\":1,\"2663\":1,\"2664\":1,\"2665\":2,\"2672\":1,\"2680\":1,\"2687\":1,\"2692\":1,\"2695\":1,\"2701\":1,\"2708\":1,\"2712\":1,\"2713\":1,\"2714\":2,\"2715\":1,\"2721\":1,\"2722\":1,\"2723\":2,\"2724\":2,\"2727\":1,\"2731\":1,\"2732\":1,\"2733\":1,\"2734\":2,\"2735\":1,\"2738\":1,\"2742\":1,\"2747\":1,\"2748\":1,\"2749\":2,\"2754\":1,\"2758\":1,\"2764\":1,\"2765\":1,\"2766\":1,\"2767\":2,\"2771\":1,\"2775\":1,\"2779\":1,\"2785\":1,\"2789\":1,\"2795\":1,\"2796\":1,\"2801\":1,\"2807\":1,\"2812\":1,\"2815\":1,\"2819\":1,\"2823\":1,\"2832\":1,\"2837\":1,\"2841\":1,\"2846\":1,\"2849\":1,\"2853\":1,\"2854\":1,\"2855\":2,\"2858\":1,\"2862\":1,\"2867\":1,\"2869\":1,\"2872\":1,\"2877\":1,\"2884\":1,\"2888\":1,\"2894\":1,\"2900\":1,\"2907\":1,\"2910\":1,\"2916\":1,\"2920\":1,\"2929\":1,\"2933\":1,\"2938\":1,\"2941\":1,\"2945\":1,\"2949\":1,\"2955\":1,\"2958\":1,\"2963\":1,\"2972\":1,\"2980\":1,\"2987\":1,\"2990\":1,\"2991\":1,\"2992\":2,\"2996\":1,\"3000\":1,\"3003\":1,\"3007\":1,\"3012\":1,\"3017\":1,\"3023\":1,\"3026\":1,\"3030\":1,\"3034\":1,\"3040\":1,\"3041\":1,\"3042\":2,\"3043\":1,\"3044\":1,\"3047\":1,\"3050\":1,\"3057\":1,\"3061\":1,\"3065\":1,\"3074\":1,\"3078\":1,\"3084\":1,\"3091\":1,\"3097\":1,\"3103\":1,\"3106\":1,\"3115\":1,\"3118\":1,\"3123\":1,\"3127\":1,\"3130\":1,\"3131\":2,\"3134\":1,\"3140\":1,\"3145\":1,\"3146\":1,\"3150\":1,\"3152\":1,\"3153\":1,\"3154\":2,\"3155\":1,\"3158\":1,\"3160\":1,\"3163\":1,\"3164\":1,\"3170\":1,\"3173\":1,\"3177\":1,\"3178\":1,\"3179\":1,\"3180\":2,\"3183\":1,\"3186\":1,\"3189\":1,\"3190\":1,\"3191\":2,\"3194\":1,\"3195\":1,\"3198\":1,\"3206\":1,\"3208\":1,\"3211\":1,\"3216\":1,\"3221\":1,\"3226\":1,\"3231\":1,\"3237\":1,\"3240\":1,\"3249\":1,\"3253\":1,\"3260\":1,\"3262\":1,\"3265\":1,\"3270\":1,\"3274\":1,\"3279\":1,\"3283\":1,\"3288\":1,\"3294\":1,\"3301\":1,\"3306\":1,\"3308\":1,\"3313\":1,\"3319\":1,\"3327\":1,\"3330\":1,\"3337\":1,\"3343\":1,\"3346\":1,\"3361\":1,\"3367\":1,\"3370\":1,\"3372\":1,\"3375\":1,\"3379\":1,\"3380\":1,\"3381\":2,\"3384\":1,\"3387\":1,\"3391\":1,\"3397\":1,\"3421\":1,\"3430\":1,\"3436\":1,\"3442\":1,\"3443\":1,\"3450\":1,\"3453\":1,\"3458\":1,\"3462\":1,\"3465\":1,\"3466\":1,\"3467\":2,\"3468\":1,\"3469\":1,\"3473\":1,\"3477\":1,\"3486\":1,\"3487\":1,\"3488\":2,\"3494\":1,\"3498\":1,\"3502\":1,\"3508\":1,\"3514\":1,\"3520\":1,\"3527\":1,\"3533\":1,\"3537\":1,\"3541\":1,\"3546\":1,\"3551\":1,\"3552\":1,\"3555\":1,\"3558\":1,\"3561\":1,\"3570\":1,\"3575\":1,\"3581\":1,\"3587\":1,\"3589\":1,\"3590\":1,\"3591\":2,\"3596\":1,\"3601\":1,\"3605\":1,\"3610\":1,\"3614\":1,\"3620\":1,\"3624\":1,\"3625\":1,\"3626\":2,\"3627\":1,\"3628\":1,\"3631\":1,\"3634\":1,\"3637\":1,\"3640\":1,\"3645\":1,\"3649\":2,\"3652\":1,\"3657\":1,\"3662\":1,\"3668\":1,\"3669\":1,\"3670\":1,\"3671\":2,\"3674\":1,\"3676\":1,\"3680\":1,\"3683\":1,\"3686\":1,\"3689\":1,\"3691\":1,\"3694\":1,\"3697\":1,\"3701\":1,\"3705\":1,\"3708\":1,\"3709\":1,\"3710\":2,\"3711\":1,\"3718\":1,\"3719\":1,\"3720\":2,\"3724\":1,\"3727\":1,\"3734\":1,\"3739\":1,\"3742\":1,\"3747\":1,\"3751\":1,\"3757\":1,\"3768\":1,\"3788\":1},\"1\":{\"22\":1,\"33\":1,\"95\":1,\"96\":3,\"97\":1,\"98\":1,\"100\":1,\"118\":1,\"120\":3,\"133\":1,\"139\":1,\"162\":1,\"189\":1,\"190\":2,\"211\":4,\"246\":4,\"258\":1,\"288\":3,\"290\":2,\"309\":2,\"321\":1,\"347\":1,\"355\":1,\"361\":1,\"371\":1,\"375\":1,\"428\":4,\"429\":2,\"431\":3,\"462\":1,\"480\":2,\"501\":1,\"521\":2,\"527\":6,\"562\":1,\"574\":1,\"580\":1,\"581\":2,\"590\":1,\"598\":1,\"609\":1,\"612\":1,\"628\":1,\"662\":1,\"669\":2,\"694\":1,\"718\":2,\"734\":1,\"749\":1,\"751\":1,\"762\":1,\"764\":1,\"766\":4,\"767\":2,\"768\":1,\"769\":3,\"782\":1,\"783\":1,\"784\":1,\"786\":1,\"812\":1,\"825\":1,\"861\":2,\"869\":1,\"888\":1,\"890\":2,\"892\":2,\"893\":3,\"894\":2,\"895\":3,\"896\":2,\"924\":1,\"925\":1,\"926\":2,\"930\":3,\"931\":3,\"933\":1,\"936\":2,\"937\":3,\"938\":3,\"949\":1,\"987\":1,\"989\":2,\"990\":3,\"1009\":1,\"1032\":1,\"1033\":2,\"1035\":1,\"1050\":1,\"1059\":2,\"1061\":1,\"1063\":1,\"1089\":1,\"1093\":1,\"1094\":1,\"1132\":1,\"1139\":4,\"1145\":1,\"1150\":1,\"1176\":1,\"1180\":1,\"1181\":1,\"1184\":1,\"1189\":1,\"1204\":3,\"1218\":2,\"1219\":4,\"1222\":1,\"1225\":1,\"1230\":1,\"1232\":5,\"1233\":2,\"1236\":2,\"1237\":1,\"1238\":4,\"1239\":2,\"1245\":1,\"1246\":1,\"1273\":2,\"1276\":2,\"1311\":1,\"1376\":3,\"1389\":1,\"1406\":1,\"1423\":1,\"1438\":2,\"1439\":1,\"1488\":1,\"1489\":1,\"1505\":1,\"1513\":2,\"1514\":1,\"1536\":1,\"1546\":1,\"1547\":2,\"1560\":1,\"1571\":1,\"1591\":2,\"1621\":1,\"1650\":1,\"1719\":1,\"1720\":3,\"1722\":2,\"1732\":1,\"1740\":1,\"1769\":1,\"1771\":1,\"1795\":1,\"1810\":1,\"1817\":1,\"1828\":1,\"1842\":1,\"1852\":1,\"1922\":1,\"1925\":1,\"1940\":1,\"1954\":1,\"1957\":5,\"1958\":1,\"1985\":1,\"1995\":1,\"1996\":1,\"2001\":2,\"2023\":1,\"2024\":2,\"2025\":1,\"2027\":1,\"2028\":1,\"2052\":1,\"2064\":1,\"2065\":1,\"2071\":2,\"2084\":3,\"2106\":1,\"2110\":1,\"2126\":1,\"2127\":1,\"2136\":1,\"2146\":1,\"2151\":1,\"2152\":1,\"2156\":1,\"2157\":1,\"2162\":1,\"2176\":1,\"2184\":1,\"2185\":2,\"2207\":1,\"2220\":1,\"2225\":1,\"2252\":3,\"2257\":1,\"2258\":1,\"2279\":1,\"2280\":1,\"2285\":1,\"2293\":3,\"2296\":3,\"2306\":1,\"2311\":1,\"2315\":1,\"2369\":1,\"2371\":1,\"2393\":1,\"2446\":1,\"2448\":2,\"2450\":1,\"2457\":1,\"2458\":1,\"2469\":1,\"2487\":1,\"2488\":1,\"2491\":1,\"2528\":1,\"2536\":1,\"2537\":2,\"2538\":1,\"2539\":1,\"2545\":1,\"2547\":1,\"2548\":1,\"2551\":1,\"2560\":1,\"2567\":1,\"2569\":1,\"2570\":1,\"2573\":2,\"2575\":1,\"2577\":2,\"2581\":1,\"2582\":2,\"2597\":2,\"2600\":3,\"2603\":2,\"2612\":5,\"2613\":1,\"2624\":1,\"2625\":1,\"2634\":1,\"2635\":1,\"2638\":1,\"2639\":1,\"2653\":2,\"2655\":1,\"2656\":1,\"2657\":1,\"2666\":1,\"2672\":1,\"2698\":1,\"2702\":2,\"2705\":1,\"2726\":2,\"2727\":3,\"2733\":2,\"2734\":2,\"2735\":2,\"2739\":2,\"2778\":1,\"2784\":1,\"2788\":2,\"2789\":1,\"2790\":1,\"2814\":1,\"2823\":1,\"2836\":1,\"2852\":1,\"2858\":1,\"2871\":1,\"2872\":1,\"2894\":1,\"2895\":1,\"2896\":1,\"2905\":1,\"2960\":1,\"3003\":1,\"3006\":2,\"3009\":1,\"3011\":1,\"3039\":1,\"3046\":1,\"3085\":1,\"3104\":1,\"3106\":1,\"3118\":1,\"3126\":2,\"3134\":2,\"3135\":1,\"3136\":3,\"3140\":2,\"3141\":1,\"3142\":3,\"3144\":4,\"3146\":2,\"3148\":2,\"3149\":1,\"3153\":2,\"3154\":2,\"3158\":2,\"3159\":1,\"3160\":3,\"3163\":1,\"3164\":1,\"3166\":2,\"3170\":1,\"3173\":1,\"3177\":1,\"3179\":1,\"3183\":1,\"3186\":1,\"3191\":5,\"3194\":1,\"3242\":1,\"3259\":1,\"3264\":1,\"3266\":2,\"3270\":1,\"3271\":1,\"3279\":2,\"3294\":1,\"3327\":1,\"3355\":1,\"3370\":1,\"3373\":2,\"3383\":2,\"3387\":1,\"3391\":2,\"3393\":1,\"3394\":1,\"3396\":1,\"3397\":1,\"3407\":2,\"3410\":2,\"3413\":1,\"3421\":1,\"3432\":3,\"3433\":3,\"3449\":1,\"3473\":1,\"3476\":3,\"3480\":2,\"3482\":4,\"3483\":3,\"3485\":3,\"3494\":1,\"3533\":1,\"3554\":1,\"3564\":1,\"3571\":1,\"3590\":1,\"3596\":1,\"3610\":3,\"3623\":1,\"3626\":2,\"3627\":4,\"3641\":1,\"3645\":2,\"3647\":1,\"3659\":2,\"3661\":3,\"3662\":2,\"3670\":1,\"3673\":1,\"3674\":1,\"3675\":1,\"3679\":1,\"3686\":1,\"3719\":1,\"3720\":2,\"3736\":1}}],[\"都被存储到同一个分片中\",{\"1\":{\"3402\":1}}],[\"都接受一个叫做\",{\"1\":{\"3402\":1}}],[\"都在正常运行\",{\"1\":{\"3387\":1,\"3391\":1}}],[\"都在等待对方放弃自己需要的同步资源\",{\"1\":{\"1788\":1}}],[\"都要使用到这个名字\",{\"1\":{\"3360\":1}}],[\"都要设计成web模块\",{\"1\":{\"163\":1}}],[\"都没有找到与非区域有关的教程\",{\"1\":{\"3334\":1}}],[\"都提倡将其打成war包然后放置于同一个tomcat的webapps下进行管理\",{\"1\":{\"2998\":1}}],[\"都属于java\",{\"1\":{\"2989\":1}}],[\"都表示任意匹配\",{\"1\":{\"2825\":1}}],[\"都声明一个静态代理\",{\"1\":{\"2323\":1}}],[\"都为其保留一个不变的\",{\"1\":{\"2260\":1}}],[\"都指定为实例化的泛型类型\",{\"1\":{\"1959\":1}}],[\"都应该用来计算\",{\"1\":{\"1897\":1}}],[\"都进行票据的打印\",{\"1\":{\"1755\":1}}],[\"都还没有更新数据\",{\"1\":{\"1754\":1}}],[\"都与\",{\"1\":{\"1652\":1,\"1653\":1,\"1654\":1}}],[\"都\",{\"1\":{\"1650\":1}}],[\"都必须显式的赋值\",{\"1\":{\"1647\":1}}],[\"都必须手动调用close方法进行关闭\",{\"1\":{\"819\":1}}],[\"都能解决问题\",{\"1\":{\"1607\":1}}],[\"都无条件执行的语句\",{\"1\":{\"1585\":1}}],[\"都生成一个对象去读取\",{\"1\":{\"1491\":1}}],[\"都不能使用该类\",{\"1\":{\"1459\":1}}],[\"都不用做了\",{\"1\":{\"559\":1}}],[\"都直接或间接的继承于java\",{\"1\":{\"1364\":1}}],[\"都选择省略\",{\"1\":{\"1328\":1}}],[\"都体现为类\",{\"1\":{\"1253\":1}}],[\"都作为此类的实例实现\",{\"1\":{\"1126\":1}}],[\"都已补码的方式来存储数据\",{\"1\":{\"1121\":1}}],[\"都需要使用\",{\"1\":{\"1058\":1}}],[\"都存在\",{\"1\":{\"911\":1}}],[\"都重写了equals方法\",{\"1\":{\"910\":1}}],[\"都返回0\",{\"1\":{\"792\":1}}],[\"都实现了comparable接口\",{\"1\":{\"744\":1}}],[\"都有固定的模板\",{\"1\":{\"3014\":1}}],[\"都有setattribute和getattribute方法\",{\"1\":{\"2919\":1}}],[\"都有默认初始化值\",{\"1\":{\"1273\":1}}],[\"都有多个参数\",{\"1\":{\"734\":1}}],[\"都有自己的name属性\",{\"1\":{\"478\":1}}],[\"都可以用来指定url\",{\"1\":{\"2818\":1}}],[\"都可以保存到配置文件中\",{\"1\":{\"2549\":1}}],[\"都可以在调用源方法的前后执行一些指定的增强逻辑\",{\"1\":{\"2334\":1}}],[\"都可以是任何引用类型的数据\",{\"1\":{\"1909\":1}}],[\"都可以使得当前的线程进入阻塞状态\",{\"1\":{\"1803\":1}}],[\"都可以使用collection\",{\"1\":{\"747\":1}}],[\"都可以解决线程安全问题\",{\"1\":{\"1785\":1}}],[\"都可以充当锁\",{\"1\":{\"1759\":1}}],[\"都可以改写为if\",{\"1\":{\"1163\":1,\"1177\":1}}],[\"都可以实现对bean加载的控制\",{\"1\":{\"534\":1}}],[\"都可以通过产品原型看到\",{\"1\":{\"22\":1}}],[\"都加载到了内存中\",{\"1\":{\"504\":1}}],[\"都离不开任务系统\",{\"1\":{\"490\":1}}],[\"都会报错\",{\"1\":{\"3246\":1}}],[\"都会更新版本\",{\"1\":{\"3149\":1}}],[\"都会随机生成一个\",{\"1\":{\"3136\":1}}],[\"都会被拦截\",{\"1\":{\"2949\":3}}],[\"都会出现中文乱码的问题\",{\"1\":{\"2874\":1}}],[\"都会保存上一次的指针\",{\"1\":{\"2140\":1}}],[\"都会返回一个全新的迭代器\",{\"1\":{\"1847\":1}}],[\"都会有唯一的\",{\"1\":{\"1652\":1}}],[\"都会有唯一的retentionpolicy属性\",{\"1\":{\"1650\":1}}],[\"都会提供抽象类的子类\",{\"1\":{\"1494\":1}}],[\"都会导致服务无法正常运行\",{\"1\":{\"348\":1}}],[\"都会在文档中描述\",{\"1\":{\"21\":1}}],[\"都是在同一个区域网下的集群\",{\"1\":{\"3316\":1}}],[\"都是在容器初始化过程中进行bean的加载或者声明的\",{\"1\":{\"529\":1}}],[\"都是使用mybaits\",{\"1\":{\"3255\":1}}],[\"都是使用maven来管理包的\",{\"1\":{\"2999\":1}}],[\"都是先获取流对象\",{\"1\":{\"2853\":1}}],[\"都是针对http协议\",{\"1\":{\"2809\":1}}],[\"都是一些高级的tomcat使用\",{\"1\":{\"2768\":1}}],[\"都是一个集合\",{\"1\":{\"2467\":1}}],[\"都是通过配置文件进行控制的\",{\"1\":{\"2636\":1}}],[\"都是提前定义好方法\",{\"1\":{\"2390\":1}}],[\"都是\",{\"1\":{\"2323\":1}}],[\"都是直接将字符和最终字节流绑定死了\",{\"1\":{\"2111\":1}}],[\"都是从如下4个抽象基类派生的\",{\"1\":{\"2024\":1}}],[\"都是字符串类型\",{\"1\":{\"1916\":1}}],[\"都是以实现类做测试的\",{\"1\":{\"1830\":1}}],[\"都是private\",{\"1\":{\"1530\":1}}],[\"都是抽象类number的子类\",{\"1\":{\"771\":1}}],[\"都是前后端分离的\",{\"1\":{\"648\":1}}],[\"都是bean生命周期里的接口\",{\"1\":{\"567\":1}}],[\"都是用来\",{\"1\":{\"565\":1}}],[\"都是将日志写入文件\",{\"1\":{\"300\":1}}],[\"都是spring容器中的组件\",{\"1\":{\"180\":1}}],[\"都是新建一个spring\",{\"1\":{\"161\":1}}],[\"huge\",{\"1\":{\"3540\":1}}],[\"humanutil\",{\"1\":{\"2349\":3}}],[\"human\",{\"1\":{\"2344\":3,\"2345\":1}}],[\"h6j6hlyfqde8m4cczpcnia\",{\"1\":{\"3124\":1}}],[\"hse\",{\"1\":{\"2963\":2}}],[\"hg\",{\"1\":{\"1267\":2}}],[\"h\",{\"1\":{\"1101\":1,\"2338\":1}}],[\"h1>\",{\"1\":{\"1059\":1,\"1060\":1,\"2758\":1}}],[\"hm=\",{\"1\":{\"960\":1,\"961\":1,\"962\":1,\"963\":1,\"964\":1,\"965\":1,\"966\":1,\"967\":1,\"968\":1,\"969\":1,\"970\":1,\"971\":1}}],[\"hm2=\",{\"1\":{\"960\":1,\"968\":1}}],[\"hm2\",{\"1\":{\"960\":2,\"968\":1}}],[\"hm\",{\"1\":{\"959\":6,\"960\":3,\"961\":3,\"962\":2,\"963\":2,\"964\":2,\"965\":2,\"966\":1,\"967\":3,\"968\":1,\"969\":1,\"970\":1,\"971\":1}}],[\"have\",{\"1\":{\"3305\":1,\"3328\":1,\"3355\":1}}],[\"handle\",{\"1\":{\"2684\":1,\"2690\":2}}],[\"handler\",{\"1\":{\"2342\":3,\"2683\":2,\"2688\":2,\"2689\":2,\"2690\":2,\"2691\":4}}],[\"hanannotation判断配置类是否有某个注解\",{\"1\":{\"525\":1}}],[\"hahstable的子类\",{\"1\":{\"1916\":1}}],[\"hahscode\",{\"0\":{\"1895\":1}}],[\"hahaha\",{\"1\":{\"1600\":1}}],[\"half\",{\"1\":{\"784\":3,\"3355\":1}}],[\"hasmoreelements\",{\"1\":{\"2850\":1}}],[\"hasnext\",{\"0\":{\"924\":1},\"1\":{\"924\":2,\"969\":1,\"971\":1,\"1845\":2,\"1848\":1,\"1902\":1,\"1935\":1,\"1957\":1,\"1958\":1,\"1995\":1,\"1996\":1}}],[\"hasnextline\",{\"1\":{\"885\":1,\"1006\":1}}],[\"hastext\",{\"1\":{\"554\":2}}],[\"hasannotation\",{\"1\":{\"525\":1}}],[\"hashed\",{\"1\":{\"3621\":1}}],[\"hash值相同\",{\"1\":{\"1891\":1}}],[\"hash值不同\",{\"1\":{\"1891\":1}}],[\"hash\",{\"1\":{\"1883\":1,\"3108\":1,\"3400\":1,\"3527\":1,\"3670\":1,\"3673\":1,\"3674\":1,\"3700\":1,\"3701\":1}}],[\"hashnext\",{\"0\":{\"1841\":1}}],[\"hashtable\",{\"0\":{\"1915\":1},\"1\":{\"955\":1,\"1826\":1,\"1910\":1,\"2545\":1}}],[\"hashset底层是以数组+链表的形式储存的\",{\"1\":{\"1892\":1}}],[\"hashset的子类\",{\"0\":{\"1886\":1}}],[\"hashset\",{\"0\":{\"1883\":1,\"1885\":1},\"1\":{\"903\":1,\"1826\":1,\"1881\":1,\"1883\":2,\"1884\":1,\"1886\":1,\"1894\":1,\"1902\":1}}],[\"hashcode相同\",{\"1\":{\"1898\":1}}],[\"hashcode与值\",{\"0\":{\"1898\":1}}],[\"hashcode与equals的重写\",{\"0\":{\"1894\":1}}],[\"hashcode\",{\"1\":{\"620\":1,\"1424\":1,\"1432\":1,\"1652\":1,\"1885\":1,\"1886\":1,\"1897\":1,\"1902\":1,\"1912\":1,\"2459\":1}}],[\"hashoperations\",{\"1\":{\"379\":1}}],[\"hashredis\",{\"1\":{\"379\":1}}],[\"hashmap扩容和结构改变的次数\",{\"1\":{\"1928\":1}}],[\"hashmap中存储的键值对的数量\",{\"1\":{\"1928\":1}}],[\"hashmap的默认加载因子\",{\"1\":{\"1928\":1}}],[\"hashmap的默认容量\",{\"1\":{\"1928\":1}}],[\"hashmap的最大支持容量\",{\"1\":{\"1928\":1}}],[\"hashmap底层\",{\"0\":{\"1919\":1}}],[\"hashmap是数组+链表+红黑树实现\",{\"1\":{\"1925\":1}}],[\"hashmap是数组+链表结构\",{\"1\":{\"1925\":1}}],[\"hashmap是无序的\",{\"1\":{\"1912\":1}}],[\"hashmap是\",{\"1\":{\"1909\":1}}],[\"hashmap<integer\",{\"1\":{\"1921\":1}}],[\"hashmap<string\",{\"1\":{\"960\":1,\"1958\":1}}],[\"hashmap<>\",{\"1\":{\"960\":2,\"1921\":1,\"1958\":1}}],[\"hashmap\",{\"0\":{\"1912\":1},\"1\":{\"347\":1,\"955\":1,\"1826\":1,\"1909\":1,\"1910\":1,\"1912\":2,\"1913\":1,\"1926\":1}}],[\"hazelcast\",{\"1\":{\"464\":1}}],[\"hprof\",{\"1\":{\"342\":1}}],[\"hobbies\",{\"1\":{\"2872\":2}}],[\"hobby\",{\"1\":{\"2871\":2,\"2872\":3}}],[\"hobbyl\",{\"1\":{\"1295\":1}}],[\"housenum\",{\"1\":{\"1089\":1}}],[\"hour\",{\"1\":{\"718\":2,\"719\":2,\"720\":2,\"721\":2,\"722\":1}}],[\"hours\",{\"1\":{\"215\":1,\"501\":1}}],[\"how\",{\"1\":{\"1059\":1,\"2168\":6,\"3298\":1}}],[\"home这个变量\",{\"1\":{\"1031\":1}}],[\"home环境变量是否正确配置\",{\"1\":{\"2709\":1}}],[\"home环境变量\",{\"1\":{\"1031\":1}}],[\"home\",{\"0\":{\"1031\":1},\"1\":{\"884\":2,\"2703\":1}}],[\"hostinfo\",{\"1\":{\"3718\":1}}],[\"hostmanager\",{\"1\":{\"3703\":1}}],[\"host=\",{\"1\":{\"3679\":3}}],[\"host2\",{\"1\":{\"3355\":1}}],[\"host1\",{\"1\":{\"3355\":1}}],[\"hostname\",{\"0\":{\"2184\":1},\"1\":{\"2183\":1,\"2189\":1,\"2195\":2,\"3355\":1}}],[\"hostaddress\",{\"0\":{\"2179\":1},\"1\":{\"2183\":1,\"2189\":1}}],[\"hosts\",{\"1\":{\"418\":2,\"3268\":1,\"3269\":2,\"3270\":1,\"3271\":1,\"3337\":1,\"3339\":2,\"3352\":1,\"3355\":3}}],[\"host\",{\"1\":{\"337\":1,\"378\":1,\"383\":1,\"384\":1,\"388\":1,\"416\":1,\"418\":3,\"439\":2,\"483\":1,\"2193\":1,\"2213\":1,\"2219\":1,\"2238\":3,\"2849\":3,\"2850\":1,\"3268\":1,\"3269\":1,\"3270\":1,\"3271\":1,\"3307\":2,\"3327\":2,\"3328\":1,\"3329\":1,\"3332\":2,\"3337\":3,\"3352\":2,\"3355\":3,\"3667\":1,\"3668\":1,\"3673\":2,\"3674\":1,\"3750\":1}}],[\"hex\",{\"1\":{\"3670\":1,\"3673\":1,\"3674\":1,\"3700\":1,\"3701\":1}}],[\"heima\",{\"1\":{\"3029\":1,\"3030\":1}}],[\"hehe\",{\"1\":{\"2716\":1}}],[\"here\",{\"1\":{\"1059\":1,\"3355\":1}}],[\"he\",{\"1\":{\"963\":3,\"2686\":1}}],[\"heartbeattimeoutsecs\",{\"1\":{\"3667\":1}}],[\"heartbeatintervalmillis\",{\"1\":{\"3667\":1,\"3670\":1}}],[\"head插件\",{\"0\":{\"3383\":1},\"1\":{\"3387\":1,\"3391\":1}}],[\"headers\",{\"1\":{\"2850\":3}}],[\"head\",{\"1\":{\"2811\":2,\"3335\":1,\"3383\":1,\"3394\":1}}],[\"heapdump\",{\"1\":{\"342\":1}}],[\"heap\",{\"1\":{\"329\":1,\"1546\":1,\"3267\":4,\"3312\":1,\"3345\":1,\"3355\":1,\"3503\":4,\"3516\":1}}],[\"health查看集群的节点信息\",{\"1\":{\"3378\":1}}],[\"health默认会监控最基本的程序状态\",{\"1\":{\"348\":1}}],[\"health端点描述当前应用的运行健康指标\",{\"1\":{\"350\":1}}],[\"health端点用来监控重要组件的运行状态\",{\"1\":{\"348\":1}}],[\"health端点\",{\"0\":{\"348\":1}}],[\"health端点强制开放\",{\"1\":{\"343\":1}}],[\"health\",{\"1\":{\"326\":1,\"342\":1,\"343\":1,\"345\":1,\"350\":1,\"3127\":1,\"3278\":1,\"3670\":1,\"3671\":1,\"3673\":1,\"3674\":1}}],[\"hel\",{\"1\":{\"656\":1,\"657\":1}}],[\"hello2\",{\"1\":{\"2065\":1}}],[\"hellothread\",{\"1\":{\"1728\":5,\"1729\":3,\"1737\":3}}],[\"hellogay\",{\"1\":{\"1267\":3}}],[\"hellogoogle\",{\"1\":{\"655\":1}}],[\"hello1\",{\"1\":{\"1592\":1,\"1600\":1}}],[\"hello10a\",{\"1\":{\"1134\":1}}],[\"hello1235\",{\"1\":{\"383\":1}}],[\"hello1234\",{\"1\":{\"378\":1}}],[\"hello<e>\",{\"1\":{\"1059\":1}}],[\"helloworld\",{\"1\":{\"147\":1,\"2237\":1}}],[\"hello\",{\"1\":{\"109\":2,\"147\":1,\"499\":1,\"661\":1,\"662\":1,\"663\":1,\"668\":2,\"699\":1,\"700\":3,\"701\":1,\"702\":2,\"703\":1,\"704\":1,\"786\":1,\"887\":2,\"914\":1,\"1008\":2,\"1038\":2,\"1040\":1,\"1041\":1,\"1049\":3,\"1050\":3,\"1059\":1,\"1060\":1,\"1134\":1,\"1267\":1,\"1280\":1,\"1282\":1,\"1466\":2,\"1556\":3,\"1583\":1,\"1641\":1,\"1648\":1,\"2015\":2,\"2065\":1,\"2139\":1,\"2220\":1,\"2231\":1,\"2371\":1,\"2403\":1,\"2448\":1,\"2716\":1,\"2717\":1,\"2779\":1,\"2801\":1,\"2888\":2,\"2903\":2,\"3046\":1,\"3052\":1,\"3613\":1}}],[\"help\",{\"1\":{\"98\":1}}],[\"high\",{\"1\":{\"3540\":3}}],[\"hightlightbuilder\",{\"0\":{\"3252\":1}}],[\"highlighter\",{\"1\":{\"3252\":1,\"3253\":1}}],[\"highlightbuilder\",{\"1\":{\"3252\":7,\"3253\":7}}],[\"highlight\",{\"1\":{\"308\":1,\"3193\":1,\"3253\":1}}],[\"hit\",{\"1\":{\"3226\":2,\"3227\":2,\"3231\":2,\"3234\":2,\"3237\":2,\"3240\":2,\"3242\":2,\"3244\":2,\"3253\":2}}],[\"hits\",{\"1\":{\"3142\":2,\"3160\":2,\"3164\":2,\"3191\":2,\"3226\":2,\"3227\":2,\"3231\":2,\"3234\":2,\"3237\":2,\"3240\":2,\"3242\":2,\"3244\":2,\"3249\":2,\"3253\":2}}],[\"hidden\",{\"1\":{\"801\":1,\"3667\":1}}],[\"hi\",{\"1\":{\"786\":1,\"1049\":1,\"1050\":2,\"1666\":1,\"1667\":2,\"2015\":2,\"2404\":1,\"3052\":1}}],[\"hibernate官方推荐使用\",{\"1\":{\"2668\":1}}],[\"hibernate3已不再提供支持\",{\"1\":{\"2668\":1}}],[\"hibernate3\",{\"1\":{\"1636\":1}}],[\"hibernate\",{\"1\":{\"218\":1,\"2526\":1}}],[\"hh\",{\"1\":{\"308\":4,\"718\":1,\"735\":2,\"736\":1,\"737\":1}}],[\"ht1\",{\"1\":{\"1728\":3,\"1729\":3,\"1737\":3}}],[\"http功能\",{\"1\":{\"3526\":1}}],[\"http和节点通信三个证书\",{\"1\":{\"3306\":1}}],[\"http请求头的数据是键值对的形式key\",{\"1\":{\"2847\":1}}],[\"http协议\",{\"1\":{\"3108\":1}}],[\"http协议设计成无状态的目的是让每次请求之间相互独立\",{\"1\":{\"3036\":1}}],[\"http协议是无状态的\",{\"1\":{\"3036\":1}}],[\"http协议及版本\",{\"1\":{\"2844\":1}}],[\"http协议默认端口号为80\",{\"1\":{\"2705\":1}}],[\"http的请求中会包含很多请求数据\",{\"1\":{\"2832\":1}}],[\"httpclient\",{\"0\":{\"2520\":1}}],[\"httpclientconfigcallback\",{\"1\":{\"418\":1}}],[\"http占用端口80\",{\"1\":{\"2186\":1}}],[\"httpasyncclientbuilder\",{\"1\":{\"418\":2}}],[\"httphost\",{\"1\":{\"418\":7,\"3206\":1,\"3209\":1,\"3211\":1,\"3212\":1,\"3214\":1,\"3217\":1,\"3218\":1,\"3220\":1,\"3221\":1,\"3225\":1,\"3226\":1,\"3227\":1,\"3231\":1,\"3234\":1,\"3237\":1,\"3240\":1,\"3242\":1,\"3244\":1,\"3249\":1,\"3253\":1}}],[\"httptrace\",{\"1\":{\"342\":1}}],[\"http\",{\"0\":{\"3111\":1},\"1\":{\"321\":1,\"324\":1,\"326\":1,\"342\":4,\"416\":1,\"417\":1,\"418\":8,\"474\":2,\"478\":2,\"506\":4,\"511\":7,\"2237\":1,\"2238\":3,\"2241\":1,\"2711\":2,\"2715\":2,\"2716\":1,\"2750\":2,\"2781\":1,\"2822\":1,\"2845\":1,\"2846\":3,\"2888\":1,\"2890\":1,\"2903\":1,\"2911\":1,\"3029\":3,\"3030\":4,\"3108\":1,\"3110\":4,\"3117\":1,\"3118\":1,\"3121\":1,\"3122\":1,\"3123\":1,\"3126\":1,\"3129\":1,\"3130\":1,\"3133\":1,\"3134\":1,\"3136\":1,\"3139\":1,\"3140\":1,\"3141\":1,\"3142\":3,\"3144\":1,\"3145\":1,\"3147\":1,\"3148\":1,\"3152\":1,\"3153\":1,\"3157\":1,\"3158\":1,\"3159\":1,\"3160\":3,\"3162\":1,\"3183\":1,\"3186\":1,\"3188\":1,\"3189\":1,\"3197\":1,\"3206\":1,\"3209\":1,\"3211\":1,\"3212\":1,\"3214\":1,\"3217\":1,\"3218\":1,\"3220\":1,\"3221\":1,\"3225\":1,\"3226\":1,\"3227\":1,\"3231\":1,\"3234\":1,\"3237\":1,\"3240\":1,\"3242\":1,\"3244\":1,\"3249\":1,\"3253\":1,\"3268\":3,\"3269\":4,\"3270\":4,\"3271\":4,\"3278\":1,\"3282\":1,\"3283\":1,\"3293\":1,\"3298\":3,\"3300\":1,\"3301\":2,\"3305\":1,\"3307\":6,\"3314\":1,\"3326\":2,\"3327\":6,\"3328\":1,\"3332\":1,\"3335\":3,\"3337\":6,\"3339\":2,\"3347\":1,\"3352\":1,\"3353\":1,\"3355\":6,\"3379\":1,\"3393\":1,\"3473\":1,\"3476\":1,\"3480\":1,\"3485\":1,\"3488\":1,\"3489\":1}}],[\"httpsessionactivationlistener\",{\"0\":{\"2969\":1}}],[\"httpsessionattributelistener\",{\"0\":{\"2966\":1}}],[\"httpsessionbindinglistener\",{\"0\":{\"2968\":1}}],[\"httpsessionbindingevent对象代表属性变化事件\",{\"1\":{\"2966\":1,\"2968\":1}}],[\"httpsessionbindingevent\",{\"1\":{\"2966\":3,\"2968\":2}}],[\"httpsession对象的方法\",{\"0\":{\"3063\":1}}],[\"httpsession对象销毁时调用\",{\"1\":{\"2963\":1}}],[\"httpsession对象创建时调用\",{\"1\":{\"2963\":1}}],[\"httpsessionevent对象代表事件对象\",{\"1\":{\"2969\":1}}],[\"httpsessionevent对象代表从httpsession对象身上捕获到的事件\",{\"1\":{\"2963\":1}}],[\"httpsessionevent\",{\"1\":{\"2963\":2,\"2969\":2}}],[\"httpsessionlistener\",{\"0\":{\"2963\":1}}],[\"httpsession\",{\"1\":{\"2923\":1,\"2959\":1,\"3062\":2,\"3067\":1}}],[\"httpservlet中为什么要根据请求方式的不同\",{\"1\":{\"2813\":1}}],[\"httpservlet中也对每种请求方式做了定义\",{\"1\":{\"2811\":1}}],[\"httpservlet的原理\",{\"0\":{\"2813\":1}}],[\"httpservlet的使用\",{\"0\":{\"2810\":1}}],[\"httpservletresponse\",{\"1\":{\"2812\":2,\"2837\":1,\"2846\":2,\"2849\":1,\"2850\":1,\"2858\":1,\"2862\":2,\"2872\":2,\"2873\":2,\"2888\":1,\"2903\":2,\"2909\":1,\"2910\":1,\"2930\":1,\"2934\":1,\"2938\":1,\"2942\":1,\"3046\":1,\"3047\":1,\"3062\":1}}],[\"httpservletrequest\",{\"1\":{\"2812\":2,\"2814\":2,\"2837\":1,\"2846\":2,\"2849\":1,\"2850\":1,\"2858\":1,\"2862\":2,\"2872\":2,\"2873\":2,\"2888\":1,\"2903\":2,\"2909\":1,\"2910\":1,\"2930\":1,\"2934\":1,\"2938\":1,\"2942\":1,\"3046\":1,\"3047\":1,\"3062\":1}}],[\"httpservlet\",{\"1\":{\"2812\":1,\"2814\":1,\"2846\":1,\"2862\":1,\"2872\":1,\"2873\":1,\"2888\":1,\"2903\":2,\"2909\":1,\"2910\":1,\"2930\":1}}],[\"httpservlet类中没有抽象方法\",{\"1\":{\"2810\":1}}],[\"httpservlet是抽象类\",{\"1\":{\"2810\":1}}],[\"httpservlet是对http协议的一种封装\",{\"1\":{\"2808\":1,\"2815\":1}}],[\"httpservlet抽象类\",{\"0\":{\"2808\":1},\"1\":{\"2806\":1}}],[\"https协议的默认端口号是443\",{\"1\":{\"2705\":1}}],[\"https\",{\"1\":{\"97\":1,\"418\":1,\"3110\":1,\"3287\":1,\"3308\":1,\"3314\":1,\"3318\":1,\"3330\":1,\"3347\":1,\"3536\":1,\"3554\":1,\"3567\":1,\"3569\":1}}],[\"html是展示数据\",{\"1\":{\"3016\":1}}],[\"html语法松散\",{\"1\":{\"3016\":1}}],[\"html标签是预定义\",{\"1\":{\"3016\":1}}],[\"html就可以查看文档了\",{\"1\":{\"1061\":1}}],[\"html\",{\"1\":{\"22\":1,\"1056\":1,\"2164\":2,\"2238\":3,\"2695\":1,\"2715\":1,\"2758\":2,\"2849\":1,\"2857\":1,\"2889\":2,\"2890\":1,\"2896\":1,\"2932\":2,\"3464\":1}}],[\"h5\",{\"1\":{\"53\":1}}],[\"hystrix\",{\"1\":{\"11\":1}}],[\"wmajoritywriteavailabilitydate\",{\"1\":{\"3670\":1}}],[\"writablevotingmemberscount\",{\"1\":{\"3670\":1}}],[\"writemajoritycount\",{\"1\":{\"3670\":1}}],[\"writeconcernmajorityjournaldefault\",{\"1\":{\"3667\":1}}],[\"writeconcern和ordered两个参数一般不用管\",{\"1\":{\"3588\":1}}],[\"writeconcern\",{\"1\":{\"3585\":1,\"3586\":1,\"3589\":1,\"3595\":1}}],[\"writeblock\",{\"1\":{\"3513\":1}}],[\"writeboolean\",{\"1\":{\"2126\":1}}],[\"writevalueasstring\",{\"1\":{\"3214\":1}}],[\"writeobject\",{\"0\":{\"2147\":1},\"1\":{\"2147\":1,\"2151\":1,\"2156\":2}}],[\"writeint\",{\"1\":{\"2126\":1}}],[\"writeutf\",{\"1\":{\"2126\":1}}],[\"write方法\",{\"1\":{\"2070\":1}}],[\"write有多种重载\",{\"1\":{\"2061\":1}}],[\"writer\",{\"0\":{\"2034\":1,\"2036\":1},\"1\":{\"2025\":1,\"2079\":2,\"2887\":2,\"2888\":2,\"2890\":2}}],[\"write\",{\"0\":{\"820\":1,\"824\":1,\"825\":1,\"2061\":1},\"1\":{\"800\":1,\"822\":1,\"823\":1,\"824\":8,\"825\":7,\"827\":1,\"2061\":1,\"2064\":2,\"2065\":1,\"2071\":1,\"2084\":1,\"2105\":1,\"2106\":1,\"2136\":1,\"2139\":1,\"2220\":1,\"2613\":1,\"2887\":1,\"2888\":1,\"2890\":1,\"2893\":1,\"2894\":1,\"2896\":1,\"3675\":2}}],[\"wtimeout\",{\"1\":{\"3667\":1}}],[\"wget\",{\"1\":{\"3287\":1,\"3318\":1}}],[\"was\",{\"1\":{\"3479\":1}}],[\"war相较于jar的唯一优势在于\",{\"1\":{\"2997\":1}}],[\"war能打包的内容\",{\"1\":{\"2996\":1}}],[\"war是一个可以直接运行的web模块\",{\"1\":{\"2995\":1}}],[\"war\",{\"1\":{\"2723\":1,\"2747\":1,\"2748\":2,\"2765\":2}}],[\"war包中的文件按照一定目录结构来组织\",{\"1\":{\"2996\":1}}],[\"war包是sun提出的一种web应用程序格式\",{\"1\":{\"2996\":1}}],[\"war包介绍\",{\"0\":{\"2995\":1}}],[\"war包和zip包差不多\",{\"1\":{\"2714\":1}}],[\"war包会自动解压缩\",{\"1\":{\"2714\":1}}],[\"warn\",{\"1\":{\"288\":2,\"290\":2,\"292\":1,\"308\":10,\"309\":2}}],[\"wall\",{\"1\":{\"2674\":1}}],[\"waiting\",{\"1\":{\"3278\":1,\"3279\":1,\"3280\":1,\"3378\":1,\"3380\":1,\"3563\":1,\"3656\":1}}],[\"waittest\",{\"1\":{\"1804\":1}}],[\"wait\",{\"0\":{\"1800\":1},\"1\":{\"1424\":1,\"1799\":1,\"1800\":1,\"1802\":3,\"1803\":2,\"1804\":1}}],[\"weight\",{\"1\":{\"2290\":1}}],[\"wechatpay\",{\"1\":{\"1616\":1}}],[\"week\",{\"1\":{\"721\":2,\"722\":1}}],[\"weblistener\",{\"1\":{\"2974\":1}}],[\"weblister注解\",{\"1\":{\"2971\":1,\"2974\":1}}],[\"weblogic\",{\"1\":{\"2668\":1}}],[\"webfilter\",{\"1\":{\"2950\":2,\"2951\":1}}],[\"webfilter注解的dispatchertypes属性来配置\",{\"1\":{\"2950\":1}}],[\"webfilter注解进行配置\",{\"1\":{\"2949\":1}}],[\"webflux\",{\"1\":{\"342\":1}}],[\"web目录下资源访问\",{\"1\":{\"2942\":1}}],[\"web目录下\",{\"1\":{\"2941\":1}}],[\"webserver有很多配置项\",{\"1\":{\"2820\":1}}],[\"webservlet后面的值进行匹配\",{\"1\":{\"2785\":1}}],[\"webservlet\",{\"1\":{\"2780\":1,\"2800\":1,\"2812\":1,\"2814\":1,\"2819\":3,\"2820\":1,\"2822\":1,\"2823\":1,\"2824\":1,\"2825\":1,\"2846\":1,\"2862\":1,\"2872\":1,\"2888\":1,\"2903\":2,\"2909\":1,\"2910\":1,\"2949\":4}}],[\"webservlet注解内\",{\"1\":{\"2819\":1}}],[\"webservlet注解中的loadonstartup修改为0或整数\",{\"1\":{\"2800\":1}}],[\"webservlet注解中loadonstartup的值来改变servlet对象的创建时机\",{\"1\":{\"2794\":1}}],[\"webservlet注解\",{\"1\":{\"2780\":1,\"2818\":1}}],[\"websocket\",{\"1\":{\"2768\":1}}],[\"websphere\",{\"1\":{\"2668\":1}}],[\"web应用配置\",{\"1\":{\"2768\":1}}],[\"web缺失的webapp目录结构\",{\"0\":{\"2743\":1}}],[\"webapp\",{\"1\":{\"2737\":1,\"2758\":1}}],[\"webapps目录是用来部署项目的\",{\"1\":{\"2712\":1}}],[\"web项目\",{\"1\":{\"2998\":2}}],[\"web项目确实的目录结构\",{\"0\":{\"2739\":1}}],[\"web项目目录\",{\"0\":{\"2725\":1}}],[\"web项目的核心配置文件\",{\"1\":{\"2722\":1}}],[\"web项目是持续提供服务的\",{\"1\":{\"332\":1}}],[\"web服务器在创建servlet对象的时候会调用init方法\",{\"1\":{\"2804\":1}}],[\"web服务器进行调用\",{\"1\":{\"2785\":1}}],[\"web服务器就会为servletdemo1这个类创建一个对象\",{\"1\":{\"2785\":1}}],[\"web服务器软件使用步骤\",{\"0\":{\"2696\":1}}],[\"web服务器是安装在服务器端的一款软件\",{\"1\":{\"2694\":1}}],[\"web服务器\",{\"0\":{\"2694\":1},\"1\":{\"2785\":1,\"2792\":1}}],[\"web服务的客户量巨大\",{\"1\":{\"313\":1}}],[\"web依赖\",{\"1\":{\"593\":1}}],[\"web依赖包含了该依赖\",{\"1\":{\"592\":1}}],[\"web层代码\",{\"0\":{\"473\":1}}],[\"web模块不能直接使用\",{\"1\":{\"176\":1}}],[\"web模块只能通过http协议进行访问\",{\"1\":{\"175\":1}}],[\"web模块的测试\",{\"0\":{\"176\":1}}],[\"web模块的访问\",{\"0\":{\"175\":1}}],[\"web模块的开发\",{\"0\":{\"174\":1}}],[\"web模块\",{\"0\":{\"170\":1}}],[\"web模块同时引入\",{\"1\":{\"163\":1}}],[\"web模块就是提供web服务的模块\",{\"1\":{\"163\":1}}],[\"web支持\",{\"0\":{\"163\":1}}],[\"web进行排除依赖\",{\"1\":{\"134\":1}}],[\"web\",{\"1\":{\"133\":2,\"163\":1,\"170\":1,\"319\":1,\"326\":1,\"342\":1,\"343\":1,\"345\":1,\"616\":1,\"2713\":1,\"2720\":1,\"2722\":2,\"2723\":1,\"2731\":1,\"2734\":2,\"2743\":3,\"2785\":1,\"2822\":1,\"2823\":1,\"2824\":1,\"2825\":1,\"2933\":2,\"2941\":4,\"2942\":3,\"2973\":1,\"2996\":1,\"3008\":1,\"3013\":1,\"3073\":1,\"3494\":2}}],[\"webmvc<\",{\"1\":{\"123\":1}}],[\"web<\",{\"1\":{\"123\":1,\"134\":1,\"319\":1,\"593\":1,\"612\":1}}],[\"web就会打开一个包含所有依赖信息的文件\",{\"1\":{\"123\":1}}],[\"web架构\",{\"0\":{\"3000\":1},\"1\":{\"11\":1}}],[\"would\",{\"1\":{\"3675\":1}}],[\"woman\",{\"1\":{\"1419\":1,\"1616\":1}}],[\"wolf\",{\"1\":{\"540\":1}}],[\"work\",{\"1\":{\"1728\":1}}],[\"workpace\",{\"1\":{\"1038\":1}}],[\"workplace>java\",{\"1\":{\"1038\":1}}],[\"workplace>javac\",{\"1\":{\"1038\":1}}],[\"workplace\",{\"1\":{\"786\":2,\"788\":1,\"884\":1,\"2015\":3,\"2016\":2}}],[\"world~\",{\"1\":{\"2801\":1}}],[\"world\",{\"1\":{\"147\":1,\"668\":2,\"1038\":1,\"1382\":2}}],[\"word广度优先\",{\"1\":{\"3481\":1}}],[\"wordid\",{\"1\":{\"3432\":1}}],[\"word\",{\"0\":{\"3482\":1},\"1\":{\"21\":1,\"1058\":1,\"1060\":2,\"3480\":3,\"3481\":1,\"3482\":4,\"3483\":1,\"3485\":2,\"3489\":3}}],[\"w\",{\"1\":{\"501\":1,\"3313\":1,\"3346\":1,\"3641\":1,\"3667\":1,\"3675\":1}}],[\"w3c推出的可扩展标记语言\",{\"1\":{\"3015\":1}}],[\"w3\",{\"1\":{\"478\":1,\"506\":1,\"511\":1,\"3029\":1,\"3030\":1}}],[\"www\",{\"1\":{\"478\":1,\"506\":4,\"511\":7,\"2189\":1,\"2193\":2,\"2194\":1,\"2195\":2,\"2196\":1,\"2236\":1,\"2238\":3,\"2241\":1,\"3029\":3,\"3030\":4,\"3141\":1,\"3142\":2,\"3159\":1,\"3160\":2,\"3536\":1,\"3554\":1,\"3567\":1,\"3569\":1}}],[\"when\",{\"1\":{\"3305\":1,\"3328\":1,\"3355\":2}}],[\"where\",{\"1\":{\"365\":1,\"404\":1,\"405\":1,\"406\":1,\"407\":1,\"410\":1,\"2558\":1,\"2559\":1,\"2577\":1,\"2582\":2,\"2597\":1,\"2601\":2,\"2604\":1,\"2613\":1,\"2635\":2,\"2639\":1,\"2656\":3,\"2687\":1,\"2688\":1,\"2689\":1,\"2690\":1,\"2691\":1}}],[\"which\",{\"1\":{\"3267\":1,\"3503\":1}}],[\"while+hasnext遍历\",{\"0\":{\"1845\":1}}],[\"whiletest\",{\"1\":{\"1184\":1}}],[\"while循环\",{\"1\":{\"1186\":1}}],[\"while循环的使用\",{\"0\":{\"1184\":1,\"1189\":1}}],[\"while循环没有迭代条件也能编译成功\",{\"1\":{\"1183\":1}}],[\"while\",{\"0\":{\"1182\":1,\"1186\":1,\"1187\":1},\"1\":{\"746\":1,\"813\":1,\"814\":1,\"969\":1,\"971\":1,\"1165\":2,\"1183\":1,\"1184\":1,\"1186\":2,\"1188\":1,\"1189\":1,\"1583\":1,\"1592\":1,\"1600\":1,\"1740\":1,\"1757\":1,\"1760\":1,\"1768\":1,\"1784\":1,\"1804\":1,\"1845\":1,\"1848\":1,\"1902\":1,\"1935\":1,\"1957\":1,\"1958\":1,\"1995\":1,\"1996\":1,\"2052\":1,\"2053\":1,\"2065\":1,\"2071\":1,\"2082\":1,\"2084\":1,\"2106\":1,\"2118\":1,\"2136\":1,\"2603\":1,\"2613\":1,\"2653\":1,\"2850\":1,\"2894\":1,\"3718\":1}}],[\"white\",{\"1\":{\"308\":1}}],[\"wide\",{\"1\":{\"3675\":1}}],[\"wildcard\",{\"1\":{\"3355\":1}}],[\"will\",{\"1\":{\"1060\":1}}],[\"wish\",{\"1\":{\"3298\":1}}],[\"wire\",{\"1\":{\"3108\":1}}],[\"winter\",{\"1\":{\"1616\":1,\"1621\":1,\"1630\":1}}],[\"window\",{\"1\":{\"1338\":1}}],[\"windows下使用\",{\"0\":{\"3353\":1}}],[\"windows集群\",{\"0\":{\"3262\":1}}],[\"windows系统上的开发环境\",{\"1\":{\"2699\":1}}],[\"windows和dos系统默认使用\",{\"1\":{\"2012\":1}}],[\"windows的recycle\",{\"1\":{\"1491\":1}}],[\"windows服务器仅作为测试\",{\"1\":{\"234\":1}}],[\"windows\",{\"0\":{\"234\":1,\"1027\":1,\"1028\":1,\"3553\":1},\"1\":{\"884\":1,\"1027\":1,\"3105\":1}}],[\"win10\",{\"1\":{\"149\":2}}],[\"withnano\",{\"1\":{\"720\":1}}],[\"withsecond\",{\"1\":{\"720\":1}}],[\"withminute\",{\"1\":{\"720\":1}}],[\"withmonth\",{\"1\":{\"720\":1}}],[\"withhour\",{\"1\":{\"720\":1}}],[\"withdayofyear\",{\"1\":{\"720\":1}}],[\"withdayofmonth\",{\"1\":{\"720\":1}}],[\"withdetails\",{\"1\":{\"347\":1}}],[\"withdetail\",{\"1\":{\"347\":1,\"350\":2}}],[\"withyear\",{\"1\":{\"720\":1}}],[\"withxxx\",{\"0\":{\"720\":1}}],[\"with\",{\"1\":{\"172\":1,\"444\":1,\"3267\":1,\"3305\":2,\"3307\":1,\"3327\":1,\"3328\":3,\"3355\":1,\"3503\":1,\"3757\":1}}],[\"需再做一次查询\",{\"1\":{\"3477\":1}}],[\"需释放已建立的连接\",{\"1\":{\"2204\":1}}],[\"需用import语句来引入指定包层次下所需要的类或全部类\",{\"1\":{\"1340\":1}}],[\"需显式初始化\",{\"1\":{\"1076\":1}}],[\"需重写compare\",{\"1\":{\"754\":1}}],[\"需要添加多个host\",{\"1\":{\"3739\":1}}],[\"需要添加版本\",{\"1\":{\"169\":1}}],[\"需要输入查看命令\",{\"1\":{\"3712\":1}}],[\"需要勾选如下设置\",{\"1\":{\"3661\":1}}],[\"需要能快速水平扩展\",{\"1\":{\"3542\":1}}],[\"需要把写入的数据都同步到副本节点\",{\"1\":{\"3518\":1}}],[\"需要优化的方向\",{\"0\":{\"3513\":1}}],[\"需要优化哈希算法\",{\"1\":{\"1900\":1}}],[\"需要被缓存到内存的索引的使用量\",{\"1\":{\"3441\":1}}],[\"需要被同步的代码块\",{\"1\":{\"1759\":1}}],[\"需要报错下\",{\"1\":{\"3340\":1}}],[\"需要验证token\",{\"1\":{\"3309\":1}}],[\"需要解压获取证书\",{\"1\":{\"3298\":1}}],[\"需要提前进行dns解析\",{\"1\":{\"3298\":1}}],[\"需要提供实现runnable接口或callable接口实现类的对象做参数\",{\"1\":{\"1816\":1}}],[\"需要配置的内容\",{\"1\":{\"3268\":1}}],[\"需要配置的是数据库的连接信息和mybatis的sql映射\",{\"1\":{\"360\":1}}],[\"需要多次调用组合方法\",{\"1\":{\"3230\":1}}],[\"需要getrequest请求对象\",{\"1\":{\"3225\":1}}],[\"需要结合bulkrequest请求对象和deleterequest请求对象\",{\"1\":{\"3221\":1}}],[\"需要结合bulkrequest请求对象和indexrequest请求对象\",{\"1\":{\"3220\":1}}],[\"需要deleterequest请求对象\",{\"1\":{\"3218\":1}}],[\"需要updaterequest请求对象\",{\"1\":{\"3217\":1}}],[\"需要知道这个类型下有哪些字段\",{\"1\":{\"3195\":1}}],[\"需要高亮显示的字段\",{\"1\":{\"3193\":1}}],[\"需要晚上的服务框架搭建起来进行应用\",{\"1\":{\"3092\":1}}],[\"需要放行\",{\"1\":{\"2945\":1}}],[\"需要加\",{\"1\":{\"2915\":3}}],[\"需要加虚拟目录\",{\"1\":{\"2915\":1}}],[\"需要加终止条件和限制条件辅助生成\",{\"1\":{\"2449\":1}}],[\"需要响应对象\",{\"1\":{\"2907\":1}}],[\"需要再创建一个必备的目录\",{\"1\":{\"2713\":1}}],[\"需要再次创建一个线程对象\",{\"1\":{\"1725\":1}}],[\"需要修改\",{\"1\":{\"2705\":1}}],[\"需要修改服务器配置\",{\"1\":{\"266\":1}}],[\"需要一种方法确保文档的旧版本不会覆盖新的版本\",{\"1\":{\"3496\":1}}],[\"需要一个\",{\"1\":{\"2683\":1}}],[\"需要一些后台运行的程序时\",{\"1\":{\"1694\":1}}],[\"需要数据库连接的时候\",{\"1\":{\"2662\":1}}],[\"需要对副本集进行初始化\",{\"1\":{\"3739\":1}}],[\"需要对查询的结果进行处理\",{\"1\":{\"2584\":1}}],[\"需要对异常进行处理\",{\"1\":{\"674\":1}}],[\"需要安装具体的实现类\",{\"1\":{\"2540\":1}}],[\"需要针对这套接口\",{\"1\":{\"2531\":1}}],[\"需要打开项目配置菜单\",{\"1\":{\"2354\":1}}],[\"需要连接数据库的类都要继承他\",{\"1\":{\"2321\":1}}],[\"需要通过setaccessible进行设置\",{\"1\":{\"2317\":1}}],[\"需要通过getdeletedcount\",{\"1\":{\"404\":1}}],[\"需要编译时按ctrl\",{\"1\":{\"2750\":1}}],[\"需要编译\",{\"1\":{\"2247\":1}}],[\"需要实现的特殊操作\",{\"0\":{\"2649\":1}}],[\"需要实现的基本数据表操作\",{\"0\":{\"2648\":1}}],[\"需要实现接口\",{\"1\":{\"2153\":1}}],[\"需要实现run方法\",{\"1\":{\"493\":1}}],[\"需要满足的要求\",{\"0\":{\"2153\":1}}],[\"需要套接在fileinputstream上\",{\"1\":{\"2146\":1}}],[\"需要套接在fileoutputstream上\",{\"1\":{\"2146\":2}}],[\"需要和outputstream\",{\"1\":{\"2102\":1}}],[\"需要和inputstream\",{\"1\":{\"2094\":1}}],[\"需要处理同样的异常\",{\"1\":{\"2070\":1}}],[\"需要处理java\",{\"1\":{\"2060\":1}}],[\"需要用到内置的elasticsearch\",{\"1\":{\"3296\":1}}],[\"需要用到基本数据类型的位置\",{\"1\":{\"1959\":1}}],[\"需要用到executors工厂类\",{\"1\":{\"1816\":1}}],[\"需要类型强制转换的问题\",{\"1\":{\"1951\":1}}],[\"需要key所在的类\",{\"1\":{\"1935\":1}}],[\"需要根据\",{\"1\":{\"1914\":1,\"1933\":1}}],[\"需要根据实际情况\",{\"1\":{\"1172\":1}}],[\"需要某种方式来防止两个任务访问相同的资源\",{\"1\":{\"1772\":1}}],[\"需要try\",{\"1\":{\"1729\":2}}],[\"需要三个功能\",{\"1\":{\"1694\":1}}],[\"需要我们自己下载\",{\"1\":{\"2535\":1}}],[\"需要我们自己new异常类\",{\"1\":{\"1608\":1}}],[\"需要我们自己手动抛出\",{\"1\":{\"1607\":1}}],[\"需要我们必须在实现类中重写此方法\",{\"1\":{\"1517\":1}}],[\"需要具体子类确定的步骤\",{\"1\":{\"1500\":1}}],[\"需要\",{\"1\":{\"1455\":1,\"3273\":1}}],[\"需要为每个子类创建一个方法\",{\"1\":{\"1400\":1}}],[\"需要保证先初始化父类\",{\"1\":{\"1384\":1}}],[\"需要保证被移动的文件在硬盘中是存在的\",{\"1\":{\"808\":1}}],[\"需要父类实现了private成员的getxxx和setxxx方法\",{\"1\":{\"1368\":1}}],[\"需要重新设置\",{\"1\":{\"3502\":1}}],[\"需要重新指定内存区域赋值\",{\"1\":{\"1128\":1}}],[\"需要重写抽象类里的抽象方法\",{\"1\":{\"1497\":1}}],[\"需要重写equals方法\",{\"1\":{\"912\":1}}],[\"需要在登录时就选择进行权限验证\",{\"1\":{\"3719\":1}}],[\"需要在文件所在目录执行命令\",{\"1\":{\"1042\":1}}],[\"需要在文件所在位置执行命令\",{\"1\":{\"1038\":1}}],[\"需要在配置文件中更改缓存方式\",{\"1\":{\"477\":1}}],[\"需要调用方法\",{\"1\":{\"2571\":1}}],[\"需要调用包装类的parsexxx\",{\"1\":{\"1446\":1}}],[\"需要调用静态方法compile返回pattern实例\",{\"1\":{\"995\":1}}],[\"需要调用对应包装类的静态方法\",{\"1\":{\"671\":1}}],[\"需要借助futuretask类\",{\"1\":{\"1808\":1}}],[\"需要借助pattern中的flags\",{\"1\":{\"986\":1}}],[\"需要借助方法\",{\"1\":{\"717\":1}}],[\"需要使用slaveok方法赋予权限\",{\"1\":{\"3683\":1}}],[\"需要使用spring配置类的\",{\"1\":{\"524\":1}}],[\"需要使用options中的multi选项\",{\"1\":{\"3597\":1}}],[\"需要使用deleterequest请求对象\",{\"1\":{\"3221\":1}}],[\"需要使用indexrequest请求对象\",{\"1\":{\"3220\":1}}],[\"需要使用bulkrequest请求对象\",{\"1\":{\"3219\":1}}],[\"需要使用request对象提供的三个方法\",{\"1\":{\"2902\":1}}],[\"需要使用被代理类的对象进行赋值\",{\"1\":{\"2343\":1}}],[\"需要使用executorservice接口的子类\",{\"1\":{\"1816\":1}}],[\"需要使用\",{\"1\":{\"1277\":1,\"2033\":1,\"2036\":1,\"2950\":1,\"3616\":1}}],[\"需要使用包装函数进行\",{\"1\":{\"1135\":1}}],[\"需要使用单引号表示值\",{\"1\":{\"1101\":1}}],[\"需要使用特点的方法\",{\"1\":{\"778\":1}}],[\"需要将中文数据转码\",{\"1\":{\"3054\":1}}],[\"需要将数据库的链接和关闭操作再数据表实现类的调用处执行\",{\"1\":{\"2652\":1}}],[\"需要将真正的源码导入\",{\"1\":{\"2539\":1}}],[\"需要将此线程的操作声明在run方法中\",{\"1\":{\"1717\":1}}],[\"需要将范围小的声明在范围大的上面\",{\"1\":{\"1172\":1}}],[\"需要将random结果乘一个倍数\",{\"1\":{\"761\":1}}],[\"需要将spring管控的bean全部写在xml文件中\",{\"1\":{\"507\":1}}],[\"需要进行配置\",{\"1\":{\"2766\":1,\"3352\":1}}],[\"需要进行多线程的修改\",{\"1\":{\"1490\":1}}],[\"需要进行数组的初始化\",{\"1\":{\"1237\":1}}],[\"需要进行时间偏移\",{\"1\":{\"725\":1}}],[\"需要进行以下多个设置\",{\"1\":{\"168\":1}}],[\"需要end=length+1\",{\"1\":{\"702\":1}}],[\"需要设计表现层返回结果的模型类\",{\"1\":{\"646\":1}}],[\"需要设计当前项目中涉及到哪些数据库\",{\"1\":{\"25\":1}}],[\"需要maven设置支持\",{\"1\":{\"608\":1}}],[\"需要创建一个customer类\",{\"1\":{\"2599\":1}}],[\"需要创建一个实体类作为载体\",{\"1\":{\"427\":1}}],[\"需要创建新的套接字对象\",{\"1\":{\"2214\":1}}],[\"需要创建dev\",{\"1\":{\"583\":1}}],[\"需要花大量时间整理和理解\",{\"1\":{\"557\":1}}],[\"需要的功能是\",{\"1\":{\"556\":1}}],[\"需要先搭建好副本集\",{\"1\":{\"3737\":1}}],[\"需要先连接mongodb\",{\"1\":{\"3564\":1}}],[\"需要先启动一次\",{\"1\":{\"3110\":1}}],[\"需要先转换为静态资源\",{\"1\":{\"2695\":1}}],[\"需要先setaccessible\",{\"1\":{\"2310\":1}}],[\"需要先获取执行当前代码的线程\",{\"1\":{\"1727\":2}}],[\"需要先创建一个同等长度的集合\",{\"1\":{\"937\":1}}],[\"需要先创建对象\",{\"1\":{\"864\":1,\"865\":1}}],[\"需要先调用setaccessible\",{\"1\":{\"864\":1,\"865\":1}}],[\"需要先确认操作何种数据\",{\"1\":{\"379\":1}}],[\"需要先导入对应技术的坐标\",{\"1\":{\"354\":1}}],[\"需要自定义枚举类\",{\"1\":{\"1618\":1}}],[\"需要自定义配置类进行设置\",{\"1\":{\"350\":1}}],[\"需要自己进行循环拼接形参名\",{\"1\":{\"2296\":1}}],[\"需要自己提前写\",{\"1\":{\"345\":1}}],[\"需要自己在客户端配置文件中手动开放信息\",{\"1\":{\"326\":1}}],[\"需要自己手动创建\",{\"1\":{\"163\":1}}],[\"需要单独配置开启web端显示\",{\"1\":{\"345\":1}}],[\"需要项目开启缓存\",{\"1\":{\"338\":1}}],[\"需要继承\",{\"1\":{\"289\":1}}],[\"需要记录日志的控制器就继承该控制器\",{\"1\":{\"289\":1}}],[\"需要手动设置映射\",{\"1\":{\"3474\":1}}],[\"需要手动让浏览器信任\",{\"1\":{\"3298\":1}}],[\"需要手动的实现该接口\",{\"1\":{\"2338\":1}}],[\"需要手动指定版本\",{\"1\":{\"597\":1,\"598\":1,\"599\":1,\"600\":1,\"607\":1}}],[\"需要手动指定启动类\",{\"1\":{\"170\":1}}],[\"需要手动编码实现\",{\"1\":{\"502\":1}}],[\"需要手动创建补齐\",{\"1\":{\"2739\":1}}],[\"需要手动创建\",{\"1\":{\"162\":1}}],[\"需要什么技术\",{\"1\":{\"123\":1}}],[\"需要学习的内容\",{\"0\":{\"93\":1}}],[\"需要前置知识\",{\"1\":{\"11\":1,\"94\":1,\"614\":1}}],[\"需求会变\",{\"1\":{\"3542\":1}}],[\"需求非常灵活的全文搜索查询\",{\"1\":{\"3098\":1}}],[\"需求是输入int\",{\"1\":{\"1581\":1}}],[\"需求\",{\"0\":{\"2332\":1,\"2861\":1},\"1\":{\"1401\":1,\"1621\":1,\"1630\":1,\"1955\":1,\"3443\":1,\"3540\":1}}],[\"需求规格说明书\",{\"1\":{\"21\":1}}],[\"需求分析\",{\"0\":{\"20\":1},\"1\":{\"33\":1}}],[\"1或\",{\"1\":{\"3628\":1}}],[\"1>\",{\"1\":{\"3589\":1}}],[\"1s\",{\"1\":{\"3454\":1}}],[\"1tb\",{\"1\":{\"3365\":1}}],[\"1表示倒叙\",{\"1\":{\"3628\":1}}],[\"1表示正序\",{\"1\":{\"3628\":1}}],[\"1表示正序创建索引\",{\"1\":{\"3625\":1}}],[\"1表示降序创建索引\",{\"1\":{\"3625\":1}}],[\"1表示成功\",{\"1\":{\"3135\":1}}],[\"1表示负数\",{\"1\":{\"1120\":1}}],[\"1编码是不支持中文的\",{\"1\":{\"2876\":1}}],[\"1获取结果集的元数据\",{\"1\":{\"2603\":1}}],[\"1参\",{\"0\":{\"2370\":1}}],[\"1b6d3586\",{\"1\":{\"1843\":1}}],[\"1的几率执行run方法\",{\"1\":{\"1781\":1}}],[\"1～n\",{\"1\":{\"1652\":1,\"1653\":1}}],[\"1是浮点数常量\",{\"1\":{\"1115\":1}}],[\"1个构造器中使用了\",{\"1\":{\"1330\":1}}],[\"1个\",{\"1\":{\"1277\":1,\"1295\":1}}],[\"1个参数\",{\"1\":{\"945\":1,\"946\":1}}],[\"1个starter往往包含了若干个相关联的依赖包\",{\"1\":{\"123\":1}}],[\"1为终点下标\",{\"1\":{\"892\":1}}],[\"1为根据性能不公平分发\",{\"1\":{\"439\":1}}],[\"1引入calendar类之后被弃用了\",{\"1\":{\"708\":1}}],[\"1=sun\",{\"1\":{\"501\":1}}],[\"1~n\",{\"1\":{\"1650\":2,\"1652\":1}}],[\"1~7的整数或者\",{\"1\":{\"501\":1}}],[\"1~12的整数或者\",{\"1\":{\"501\":1}}],[\"1~31的整数\",{\"1\":{\"501\":1}}],[\"1和mongodb\",{\"1\":{\"392\":1}}],[\"15ef\",{\"1\":{\"3712\":1}}],[\"155\",{\"1\":{\"3142\":1,\"3160\":1}}],[\"1521\",{\"1\":{\"2674\":1}}],[\"153\",{\"1\":{\"2674\":1}}],[\"15db9742表示16进制内存地址\",{\"1\":{\"1238\":1}}],[\"15db9742\",{\"1\":{\"1238\":1,\"1432\":1}}],[\"1546\",{\"1\":{\"1204\":1}}],[\"15版本之后rresthighlevelclient客户端也被弃用了\",{\"1\":{\"414\":1}}],[\"159\",{\"1\":{\"378\":1,\"388\":2,\"416\":1,\"439\":1,\"3298\":2,\"3308\":1,\"3330\":1,\"3674\":2,\"3679\":3,\"3736\":1,\"3738\":1,\"3739\":3,\"3750\":1,\"3751\":3}}],[\"15\",{\"1\":{\"340\":1,\"413\":1,\"1817\":1,\"3216\":1,\"3590\":1}}],[\"13\",{\"0\":{\"919\":1,\"971\":1},\"1\":{\"337\":1,\"792\":1,\"1204\":1,\"1442\":1,\"2601\":1,\"2657\":1}}],[\"13版本就匹配不到\",{\"1\":{\"319\":1}}],[\"12文件\",{\"1\":{\"3293\":2}}],[\"12输出文件\",{\"1\":{\"3293\":1}}],[\"126\",{\"1\":{\"2657\":2}}],[\"127\",{\"1\":{\"2183\":1,\"2220\":1,\"2231\":1,\"3134\":1,\"3140\":1,\"3148\":1,\"3158\":1,\"3183\":1,\"3186\":1,\"3189\":1,\"3355\":1}}],[\"12=cc\",{\"1\":{\"1931\":1}}],[\"129\",{\"1\":{\"1902\":2}}],[\"1280\",{\"1\":{\"2181\":1}}],[\"128位\",{\"1\":{\"2181\":1}}],[\"128127时\",{\"1\":{\"1430\":1}}],[\"128127经常使用\",{\"1\":{\"1430\":1}}],[\"128\",{\"1\":{\"1117\":2}}],[\"12是个整数常量\",{\"1\":{\"1115\":1}}],[\"12e2\",{\"1\":{\"1093\":1}}],[\"1223\",{\"1\":{\"998\":1,\"1000\":1,\"1001\":1}}],[\"121212000000014086253941059112548828125\",{\"1\":{\"778\":1}}],[\"12121200000001408625394105911254882812555\",{\"1\":{\"778\":3}}],[\"12433241123\",{\"1\":{\"777\":1}}],[\"12\",{\"0\":{\"916\":1,\"917\":1,\"918\":1,\"970\":1},\"1\":{\"336\":1,\"406\":1,\"429\":1,\"644\":1,\"1093\":1,\"1115\":1,\"1116\":1,\"1133\":2,\"1139\":1,\"1145\":1,\"1442\":3,\"1445\":4,\"1902\":2,\"1905\":1,\"1931\":1,\"2474\":2,\"2483\":1,\"2604\":1}}],[\"123=aa\",{\"1\":{\"1931\":1}}],[\"123abc\",{\"1\":{\"1940\":1}}],[\"123ab\",{\"1\":{\"1447\":1}}],[\"12321654351\",{\"1\":{\"644\":1}}],[\"123345\",{\"1\":{\"546\":1,\"778\":1}}],[\"12345\",{\"1\":{\"778\":5}}],[\"123456\",{\"1\":{\"439\":1,\"3707\":1}}],[\"1234\",{\"1\":{\"681\":1,\"3711\":1,\"3715\":1,\"3736\":1,\"3750\":1,\"3751\":1}}],[\"123423\",{\"1\":{\"485\":1}}],[\"123\",{\"1\":{\"147\":1,\"647\":2,\"671\":2,\"779\":1,\"780\":1,\"781\":1,\"1117\":1,\"1440\":1,\"1446\":2,\"1580\":1,\"1842\":1,\"1843\":1,\"1851\":1,\"1866\":2,\"1869\":1,\"1873\":1,\"1902\":3,\"1931\":1,\"2920\":1}}],[\"116z\",{\"1\":{\"3670\":1}}],[\"113\",{\"1\":{\"2194\":1}}],[\"1139ms\",{\"1\":{\"695\":1}}],[\"1111\",{\"1\":{\"1121\":2,\"1157\":6}}],[\"11111自动转为了十进制\",{\"1\":{\"888\":1,\"1009\":1}}],[\"11111\",{\"1\":{\"888\":1,\"1009\":1}}],[\"111\",{\"1\":{\"674\":3,\"780\":1}}],[\"1110\",{\"1\":{\"147\":1}}],[\"11\",{\"0\":{\"339\":1,\"770\":1,\"915\":1,\"969\":1},\"1\":{\"335\":1,\"366\":1,\"428\":1,\"703\":1,\"780\":1,\"823\":1,\"1141\":3,\"1433\":1,\"1867\":1,\"1995\":1,\"1996\":2}}],[\"1周后活动取消\",{\"1\":{\"266\":1}}],[\"1级常用于运维经理进行线上整体项目部署方案调控\",{\"1\":{\"263\":1}}],[\"1级与2级留做系统打包后设置通用属性\",{\"1\":{\"263\":1}}],[\"1级\",{\"1\":{\"262\":1,\"263\":1}}],[\"188464208z\",{\"1\":{\"3108\":1}}],[\"18b4aac2\",{\"1\":{\"844\":1,\"2280\":1}}],[\"18t15\",{\"1\":{\"734\":1}}],[\"18\",{\"1\":{\"148\":3,\"719\":1,\"1352\":1,\"1680\":1,\"1935\":1,\"2477\":1,\"2577\":1,\"2657\":1}}],[\"172\",{\"1\":{\"3324\":3,\"3562\":1,\"3656\":1,\"3664\":1,\"3667\":1,\"3668\":1,\"3670\":1,\"3673\":3}}],[\"17110\",{\"1\":{\"1204\":1}}],[\"17t15\",{\"1\":{\"147\":1}}],[\"17\",{\"1\":{\"147\":1,\"148\":3,\"351\":1,\"590\":1,\"623\":1,\"717\":2,\"1035\":2,\"3108\":1}}],[\"104\",{\"1\":{\"2674\":1}}],[\"106\",{\"1\":{\"2194\":1}}],[\"108\",{\"1\":{\"2189\":1}}],[\"1024~49151\",{\"1\":{\"2186\":1}}],[\"1024\",{\"1\":{\"1560\":3,\"2071\":1,\"2084\":1,\"2136\":1,\"2225\":1,\"2232\":1,\"2613\":1,\"2894\":1}}],[\"10+11\",{\"1\":{\"1266\":1}}],[\"101\",{\"1\":{\"1184\":1,\"2428\":1}}],[\"1010\",{\"1\":{\"147\":1,\"308\":1}}],[\"107hello\",{\"1\":{\"1134\":1}}],[\"107\",{\"1\":{\"1114\":1}}],[\"10可以这么创建\",{\"1\":{\"778\":1}}],[\"10t15\",{\"1\":{\"732\":1,\"733\":2}}],[\"10t18\",{\"1\":{\"720\":1}}],[\"105\",{\"1\":{\"674\":3}}],[\"10s\",{\"1\":{\"483\":1,\"500\":1}}],[\"1005\",{\"1\":{\"3590\":1}}],[\"100m\",{\"1\":{\"3514\":1}}],[\"1004\",{\"1\":{\"3220\":1,\"3253\":1,\"3615\":2}}],[\"1003\",{\"1\":{\"3220\":1,\"3231\":1,\"3615\":2,\"3616\":1}}],[\"1002\",{\"1\":{\"3220\":1,\"3221\":3,\"3227\":1,\"3590\":1,\"3634\":1,\"3636\":1}}],[\"100之间所有自然数的和\",{\"1\":{\"1283\":1}}],[\"100以内的所有质数的输出\",{\"0\":{\"1204\":1}}],[\"1001\",{\"1\":{\"1157\":1,\"1609\":1,\"2156\":1,\"3214\":1,\"3217\":1,\"3218\":1,\"3225\":1,\"3227\":1,\"3596\":1}}],[\"100e\",{\"1\":{\"1093\":1}}],[\"1000的票数\",{\"1\":{\"3687\":1}}],[\"1000\",{\"1\":{\"478\":2,\"1116\":1,\"1121\":1,\"1157\":1,\"2570\":1,\"2573\":1,\"3140\":1,\"3141\":1,\"3142\":1,\"3144\":1,\"3148\":1,\"3149\":1,\"3150\":1,\"3158\":1,\"3159\":1,\"3160\":1,\"3164\":1,\"3587\":1,\"3590\":1,\"3597\":1,\"3616\":1,\"3682\":1,\"3687\":1}}],[\"100001\",{\"1\":{\"3590\":2}}],[\"1000000\",{\"1\":{\"2624\":1,\"2625\":1}}],[\"10000000000000000\",{\"1\":{\"1089\":1}}],[\"100000\",{\"1\":{\"1204\":1,\"3597\":1}}],[\"10000\",{\"1\":{\"472\":1,\"2231\":1,\"2232\":1,\"2478\":2,\"3141\":1,\"3159\":1,\"3587\":1,\"3667\":1,\"3670\":1,\"3682\":1}}],[\"100\",{\"1\":{\"342\":1,\"689\":1,\"720\":1,\"761\":2,\"1114\":2,\"1184\":1,\"1189\":1,\"1283\":1,\"1430\":2,\"1729\":1,\"1740\":1,\"1757\":1,\"1760\":1,\"1763\":1,\"1768\":1,\"1784\":1,\"1795\":2,\"1798\":1,\"1804\":2,\"1810\":1,\"1935\":1,\"2237\":1,\"2405\":1,\"2414\":1,\"2427\":1,\"2635\":2,\"3278\":1,\"3279\":1,\"3280\":1,\"3378\":1}}],[\"10\",{\"0\":{\"338\":1,\"769\":1,\"846\":1,\"914\":1,\"939\":1,\"968\":1,\"1264\":1,\"1551\":1},\"1\":{\"308\":1,\"333\":1,\"403\":1,\"407\":1,\"478\":2,\"644\":1,\"669\":1,\"720\":2,\"736\":1,\"737\":1,\"750\":2,\"751\":2,\"757\":2,\"769\":2,\"772\":2,\"773\":1,\"774\":3,\"775\":2,\"776\":1,\"782\":1,\"784\":24,\"785\":4,\"884\":2,\"1070\":1,\"1071\":1,\"1112\":1,\"1114\":1,\"1115\":4,\"1134\":1,\"1141\":4,\"1143\":2,\"1144\":1,\"1145\":1,\"1149\":1,\"1161\":1,\"1162\":1,\"1198\":1,\"1236\":1,\"1270\":1,\"1282\":1,\"1292\":2,\"1293\":1,\"1304\":2,\"1353\":1,\"1381\":1,\"1426\":3,\"1440\":1,\"1443\":1,\"1445\":1,\"1555\":4,\"1577\":2,\"1582\":1,\"1591\":2,\"1729\":1,\"1735\":1,\"1737\":2,\"1817\":1,\"1957\":1,\"1968\":1,\"1969\":1,\"2377\":2,\"2409\":1,\"2410\":1,\"2424\":1,\"2425\":1,\"2433\":1,\"2450\":1,\"2451\":1,\"2487\":1,\"2488\":1,\"2635\":1,\"2674\":2,\"3365\":1,\"3587\":1,\"3596\":1,\"3667\":1,\"3682\":1}}],[\"10<\",{\"1\":{\"100\":1}}],[\"14159\",{\"1\":{\"3548\":1}}],[\"14159265358979323846\",{\"1\":{\"765\":1}}],[\"141592653589793\",{\"1\":{\"765\":1}}],[\"149\",{\"1\":{\"2674\":1}}],[\"1401\",{\"1\":{\"2181\":1}}],[\"143\",{\"1\":{\"1354\":1}}],[\"14ae5a5\",{\"1\":{\"895\":1}}],[\"146841646541651654681l\",{\"1\":{\"1089\":1}}],[\"146+08\",{\"1\":{\"725\":1}}],[\"146z\",{\"1\":{\"725\":1}}],[\"14\",{\"1\":{\"147\":1,\"339\":1,\"1316\":1,\"3473\":1}}],[\"1<\",{\"1\":{\"119\":1,\"3205\":2,\"3743\":1}}],[\"195\",{\"1\":{\"3673\":1}}],[\"1992\",{\"1\":{\"2612\":1,\"2686\":1}}],[\"199\",{\"1\":{\"2193\":3}}],[\"1999\",{\"1\":{\"720\":2}}],[\"1984\",{\"1\":{\"2181\":1}}],[\"1970~2099\",{\"1\":{\"501\":1}}],[\"192\",{\"1\":{\"211\":4,\"214\":1,\"362\":1,\"372\":1,\"2182\":2,\"2192\":1,\"2237\":1,\"3355\":1}}],[\"19\",{\"1\":{\"119\":1,\"734\":2,\"2469\":2,\"2657\":1,\"2676\":1}}],[\"16s\",{\"1\":{\"2622\":1}}],[\"16m\",{\"1\":{\"2608\":1}}],[\"16个字节\",{\"1\":{\"2181\":1}}],[\"16就是每次16个位\",{\"1\":{\"2111\":1}}],[\"16bit\",{\"1\":{\"2023\":1}}],[\"1655442970466\",{\"1\":{\"793\":1}}],[\"1654740094502\",{\"1\":{\"881\":1}}],[\"1654740094502l\",{\"1\":{\"727\":1}}],[\"1654789042842\",{\"1\":{\"726\":1}}],[\"160\",{\"1\":{\"719\":1}}],[\"169\",{\"1\":{\"717\":2}}],[\"162\",{\"1\":{\"362\":1,\"372\":1,\"378\":1,\"388\":2,\"416\":1,\"439\":1,\"3298\":2,\"3308\":1,\"3330\":1,\"3674\":2,\"3679\":3,\"3736\":1,\"3738\":1,\"3739\":3,\"3750\":1,\"3751\":3}}],[\"16<\",{\"1\":{\"361\":1,\"371\":1,\"597\":1,\"598\":1,\"611\":1,\"612\":2}}],[\"16t18\",{\"1\":{\"721\":1}}],[\"16t\",{\"1\":{\"299\":1}}],[\"1682481447\",{\"1\":{\"3701\":2}}],[\"1682481367\",{\"1\":{\"3700\":2}}],[\"1682436386\",{\"1\":{\"3674\":2}}],[\"1682435169\",{\"1\":{\"3673\":2}}],[\"1682433666\",{\"1\":{\"3670\":3}}],[\"1682434446\",{\"1\":{\"3670\":1}}],[\"1682434466\",{\"1\":{\"3670\":6}}],[\"1688003784177\",{\"1\":{\"3381\":1}}],[\"1688553677137\",{\"1\":{\"423\":1}}],[\"1687940386790\",{\"1\":{\"3283\":1}}],[\"1687746960161\",{\"1\":{\"3124\":1}}],[\"168\",{\"1\":{\"211\":4,\"214\":1,\"2181\":1,\"2182\":3,\"2192\":1,\"2237\":1,\"3355\":1}}],[\"16\",{\"1\":{\"119\":1,\"346\":1,\"384\":2,\"623\":1,\"693\":1,\"734\":1,\"1928\":1,\"2111\":1,\"3324\":3,\"3508\":1,\"3562\":1,\"3656\":1,\"3664\":1,\"3667\":1,\"3668\":1,\"3670\":1,\"3673\":7}}],[\"1\",{\"0\":{\"19\":1,\"90\":2,\"91\":1,\"94\":1,\"95\":1,\"100\":1,\"105\":1,\"107\":1,\"109\":1,\"115\":1,\"117\":1,\"123\":1,\"132\":1,\"133\":2,\"134\":1,\"135\":1,\"136\":1,\"137\":1,\"141\":1,\"144\":1,\"146\":1,\"151\":1,\"154\":1,\"157\":1,\"159\":1,\"161\":1,\"164\":1,\"169\":1,\"174\":1,\"177\":1,\"178\":1,\"179\":2,\"180\":1,\"182\":1,\"185\":1,\"189\":1,\"193\":1,\"196\":1,\"200\":1,\"202\":1,\"207\":1,\"211\":1,\"214\":1,\"218\":1,\"223\":1,\"233\":1,\"235\":1,\"238\":1,\"241\":1,\"244\":1,\"250\":1,\"256\":1,\"262\":1,\"266\":1,\"271\":1,\"274\":1,\"277\":1,\"278\":2,\"279\":1,\"282\":1,\"287\":1,\"292\":1,\"297\":1,\"302\":1,\"306\":1,\"312\":1,\"317\":1,\"319\":1,\"323\":1,\"329\":1,\"341\":1,\"345\":1,\"349\":1,\"354\":1,\"355\":1,\"361\":1,\"364\":1,\"368\":1,\"371\":1,\"374\":1,\"377\":1,\"382\":1,\"387\":1,\"390\":1,\"395\":1,\"397\":1,\"403\":1,\"413\":1,\"416\":1,\"422\":1,\"428\":1,\"436\":1,\"438\":1,\"444\":1,\"450\":1,\"453\":1,\"461\":1,\"466\":1,\"470\":1,\"476\":1,\"482\":1,\"492\":1,\"497\":1,\"504\":1,\"520\":1,\"523\":1,\"527\":1,\"530\":1,\"535\":1,\"540\":1,\"545\":1,\"548\":1,\"553\":1,\"564\":1,\"566\":1,\"572\":1,\"574\":1,\"580\":1,\"586\":1,\"592\":1,\"597\":1,\"602\":1,\"604\":1,\"606\":1,\"611\":1,\"615\":1,\"616\":2,\"617\":1,\"618\":1,\"620\":1,\"622\":1,\"626\":1,\"630\":1,\"635\":1,\"640\":1,\"644\":1,\"649\":2,\"651\":1,\"655\":1,\"659\":1,\"665\":1,\"671\":1,\"676\":1,\"677\":2,\"678\":1,\"679\":1,\"680\":1,\"683\":1,\"685\":1,\"686\":2,\"687\":1,\"692\":1,\"699\":1,\"705\":1,\"707\":1,\"713\":1,\"714\":2,\"715\":1,\"716\":1,\"724\":1,\"729\":1,\"732\":1,\"736\":1,\"738\":1,\"740\":1,\"744\":1,\"749\":1,\"753\":1,\"756\":1,\"758\":1,\"760\":1,\"772\":1,\"779\":1,\"786\":1,\"788\":1,\"797\":1,\"807\":1,\"808\":2,\"809\":1,\"811\":1,\"813\":1,\"815\":1,\"821\":1,\"822\":2,\"823\":1,\"829\":1,\"831\":1,\"833\":1,\"834\":2,\"835\":1,\"836\":1,\"837\":1,\"848\":1,\"852\":1,\"861\":1,\"868\":1,\"877\":1,\"879\":1,\"881\":1,\"885\":1,\"886\":1,\"890\":1,\"892\":1,\"905\":1,\"917\":1,\"924\":1,\"930\":1,\"945\":1,\"959\":1,\"974\":1,\"989\":1,\"996\":1,\"1007\":1,\"1010\":2,\"1011\":1,\"1015\":1,\"1019\":1,\"1021\":1,\"1023\":1,\"1024\":2,\"1025\":1,\"1026\":1,\"1029\":1,\"1032\":1,\"1035\":1,\"1036\":1,\"1038\":1,\"1040\":1,\"1044\":1,\"1049\":1,\"1053\":1,\"1058\":1,\"1064\":1,\"1066\":1,\"1069\":1,\"1075\":1,\"1078\":1,\"1082\":1,\"1084\":1,\"1086\":1,\"1092\":1,\"1100\":1,\"1106\":1,\"1110\":1,\"1112\":1,\"1119\":1,\"1123\":1,\"1124\":1,\"1128\":1,\"1131\":1,\"1137\":1,\"1139\":1,\"1143\":1,\"1148\":1,\"1151\":1,\"1155\":1,\"1159\":1,\"1161\":1,\"1165\":1,\"1167\":1,\"1168\":2,\"1169\":1,\"1170\":1,\"1174\":1,\"1180\":1,\"1183\":1,\"1188\":1,\"1192\":1,\"1193\":2,\"1194\":1,\"1200\":1,\"1202\":1,\"1205\":1,\"1207\":1,\"1213\":1,\"1216\":1,\"1218\":1,\"1225\":1,\"1231\":1,\"1232\":2,\"1233\":1,\"1234\":1,\"1236\":1,\"1245\":1,\"1248\":1,\"1250\":1,\"1255\":1,\"1266\":1,\"1270\":1,\"1272\":1,\"1276\":1,\"1280\":1,\"1285\":1,\"1289\":1,\"1292\":1,\"1295\":1,\"1301\":1,\"1303\":1,\"1309\":1,\"1314\":1,\"1315\":2,\"1316\":1,\"1326\":1,\"1328\":1,\"1334\":1,\"1340\":1,\"1348\":1,\"1352\":1,\"1357\":1,\"1360\":1,\"1366\":1,\"1370\":1,\"1372\":1,\"1379\":1,\"1381\":1,\"1385\":1,\"1391\":1,\"1395\":1,\"1397\":1,\"1403\":1,\"1411\":1,\"1413\":1,\"1418\":1,\"1423\":1,\"1426\":1,\"1432\":1,\"1437\":1,\"1441\":1,\"1445\":1,\"1449\":1,\"1453\":1,\"1459\":1,\"1463\":1,\"1466\":1,\"1470\":1,\"1475\":1,\"1480\":1,\"1487\":1,\"1494\":1,\"1499\":1,\"1503\":1,\"1504\":2,\"1505\":1,\"1512\":1,\"1516\":1,\"1520\":1,\"1524\":1,\"1527\":1,\"1531\":1,\"1536\":1,\"1538\":1,\"1546\":1,\"1548\":1,\"1554\":1,\"1557\":1,\"1559\":1,\"1565\":1,\"1571\":1,\"1575\":1,\"1577\":1,\"1585\":1,\"1591\":1,\"1598\":1,\"1606\":1,\"1611\":1,\"1614\":1,\"1616\":1,\"1621\":1,\"1624\":1,\"1630\":1,\"1634\":1,\"1635\":2,\"1636\":1,\"1640\":1,\"1643\":1,\"1650\":1,\"1652\":1,\"1656\":1,\"1658\":1,\"1661\":1,\"1666\":1,\"1667\":3,\"1668\":2,\"1670\":1,\"1673\":1,\"1676\":1,\"1680\":1,\"1681\":1,\"1683\":1,\"1685\":1,\"1693\":1,\"1696\":1,\"1698\":1,\"1709\":1,\"1714\":1,\"1715\":2,\"1716\":1,\"1717\":1,\"1718\":1,\"1721\":1,\"1724\":1,\"1728\":1,\"1731\":1,\"1732\":2,\"1733\":1,\"1739\":1,\"1741\":1,\"1745\":1,\"1749\":1,\"1753\":1,\"1759\":1,\"1761\":1,\"1765\":1,\"1766\":2,\"1767\":1,\"1770\":1,\"1772\":1,\"1778\":1,\"1781\":1,\"1788\":1,\"1792\":1,\"1796\":1,\"1799\":1,\"1807\":1,\"1812\":1,\"1818\":1,\"1820\":1,\"1826\":1,\"1835\":1,\"1839\":1,\"1843\":1,\"1850\":1,\"1854\":1,\"1858\":1,\"1860\":1,\"1864\":1,\"1865\":2,\"1866\":1,\"1867\":1,\"1868\":1,\"1869\":1,\"1870\":1,\"1872\":1,\"1876\":1,\"1881\":1,\"1884\":1,\"1890\":1,\"1895\":1,\"1899\":1,\"1902\":1,\"1904\":1,\"1909\":1,\"1912\":1,\"1920\":1,\"1921\":2,\"1922\":1,\"1923\":1,\"1924\":1,\"1925\":1,\"1930\":1,\"1933\":1,\"1935\":1,\"1938\":1,\"1944\":1,\"1947\":1,\"1950\":1,\"1953\":1,\"1957\":1,\"1962\":1,\"1963\":2,\"1964\":1,\"1965\":1,\"1967\":1,\"1971\":1,\"1976\":1,\"1985\":1,\"1989\":1,\"1991\":1,\"1995\":1,\"1999\":1,\"2003\":1,\"2006\":1,\"2008\":1,\"2012\":1,\"2015\":1,\"2021\":1,\"2027\":1,\"2031\":1,\"2032\":2,\"2033\":1,\"2035\":1,\"2044\":1,\"2047\":1,\"2048\":2,\"2049\":1,\"2050\":1,\"2054\":1,\"2059\":1,\"2060\":2,\"2061\":1,\"2062\":1,\"2069\":1,\"2076\":1,\"2081\":1,\"2089\":1,\"2095\":1,\"2098\":1,\"2103\":1,\"2108\":1,\"2116\":1,\"2120\":1,\"2123\":1,\"2129\":1,\"2131\":1,\"2134\":1,\"2138\":1,\"2143\":1,\"2146\":1,\"2151\":1,\"2155\":1,\"2161\":1,\"2164\":1,\"2170\":1,\"2172\":1,\"2179\":1,\"2181\":1,\"2190\":1,\"2192\":1,\"2199\":1,\"2202\":1,\"2209\":1,\"2212\":1,\"2216\":1,\"2219\":1,\"2223\":1,\"2229\":1,\"2236\":1,\"2241\":1,\"2245\":1,\"2247\":1,\"2252\":1,\"2255\":1,\"2260\":1,\"2266\":1,\"2273\":1,\"2274\":2,\"2275\":1,\"2276\":1,\"2279\":1,\"2285\":1,\"2289\":1,\"2295\":1,\"2298\":1,\"2306\":1,\"2307\":2,\"2308\":1,\"2309\":1,\"2310\":1,\"2312\":1,\"2320\":1,\"2323\":1,\"2327\":1,\"2332\":1,\"2334\":1,\"2337\":1,\"2342\":1,\"2347\":1,\"2350\":1,\"2351\":1,\"2359\":1,\"2363\":1,\"2368\":1,\"2382\":1,\"2392\":1,\"2396\":1,\"2402\":1,\"2403\":2,\"2404\":1,\"2406\":1,\"2409\":1,\"2412\":1,\"2415\":1,\"2418\":1,\"2421\":1,\"2424\":1,\"2427\":1,\"2430\":1,\"2432\":1,\"2436\":1,\"2443\":1,\"2444\":2,\"2445\":1,\"2450\":1,\"2453\":1,\"2458\":1,\"2463\":1,\"2464\":2,\"2465\":1,\"2466\":1,\"2469\":1,\"2474\":1,\"2477\":1,\"2487\":1,\"2488\":2,\"2489\":1,\"2495\":1,\"2499\":1,\"2500\":2,\"2501\":1,\"2502\":1,\"2504\":1,\"2507\":1,\"2517\":1,\"2524\":2,\"2525\":1,\"2528\":1,\"2533\":1,\"2535\":1,\"2541\":1,\"2545\":1,\"2550\":1,\"2553\":1,\"2555\":1,\"2558\":1,\"2564\":1,\"2569\":1,\"2573\":1,\"2575\":1,\"2579\":1,\"2584\":1,\"2586\":1,\"2590\":1,\"2597\":1,\"2598\":2,\"2599\":1,\"2601\":1,\"2604\":1,\"2607\":1,\"2608\":1,\"2614\":1,\"2615\":1,\"2616\":2,\"2617\":1,\"2618\":1,\"2623\":1,\"2626\":1,\"2627\":1,\"2628\":2,\"2629\":1,\"2630\":1,\"2634\":1,\"2637\":1,\"2640\":1,\"2642\":1,\"2646\":1,\"2647\":2,\"2648\":1,\"2650\":1,\"2655\":1,\"2658\":1,\"2660\":1,\"2661\":2,\"2662\":1,\"2664\":1,\"2671\":1,\"2677\":1,\"2679\":1,\"2686\":1,\"2692\":1,\"2694\":1,\"2700\":1,\"2707\":1,\"2711\":1,\"2713\":1,\"2720\":1,\"2722\":1,\"2726\":1,\"2729\":1,\"2730\":2,\"2731\":1,\"2733\":1,\"2737\":1,\"2741\":1,\"2746\":1,\"2748\":1,\"2753\":1,\"2757\":1,\"2762\":1,\"2763\":2,\"2764\":1,\"2766\":1,\"2769\":1,\"2770\":1,\"2778\":1,\"2784\":1,\"2788\":1,\"2793\":1,\"2794\":2,\"2795\":1,\"2800\":1,\"2806\":1,\"2811\":1,\"2814\":1,\"2818\":1,\"2822\":1,\"2831\":1,\"2836\":1,\"2840\":1,\"2845\":1,\"2848\":1,\"2852\":1,\"2854\":1,\"2857\":1,\"2861\":1,\"2865\":1,\"2866\":2,\"2867\":1,\"2868\":1,\"2871\":1,\"2876\":1,\"2883\":1,\"2887\":1,\"2893\":1,\"2899\":1,\"2906\":1,\"2909\":1,\"2915\":1,\"2919\":1,\"2928\":1,\"2932\":1,\"2937\":1,\"2940\":1,\"2943\":1,\"2944\":1,\"2957\":1,\"2962\":1,\"2971\":1,\"2977\":1,\"2979\":1,\"2986\":1,\"2989\":1,\"2991\":1,\"2995\":1,\"3002\":1,\"3006\":1,\"3011\":1,\"3016\":1,\"3022\":1,\"3025\":1,\"3029\":1,\"3033\":1,\"3039\":1,\"3041\":1,\"3046\":1,\"3049\":1,\"3056\":1,\"3060\":1,\"3064\":1,\"3073\":1,\"3077\":1,\"3083\":1,\"3088\":2,\"3090\":1,\"3096\":1,\"3103\":1,\"3105\":1,\"3112\":1,\"3113\":1,\"3114\":1,\"3115\":1,\"3117\":1,\"3122\":1,\"3126\":1,\"3129\":1,\"3133\":1,\"3139\":1,\"3144\":1,\"3146\":1,\"3148\":1,\"3149\":2,\"3150\":1,\"3151\":1,\"3153\":1,\"3157\":1,\"3158\":1,\"3159\":1,\"3162\":1,\"3164\":1,\"3166\":1,\"3169\":1,\"3172\":1,\"3175\":1,\"3176\":2,\"3177\":1,\"3179\":1,\"3182\":1,\"3185\":1,\"3188\":1,\"3190\":1,\"3193\":1,\"3197\":1,\"3201\":1,\"3205\":1,\"3209\":1,\"3210\":2,\"3215\":1,\"3220\":1,\"3225\":1,\"3230\":1,\"3236\":1,\"3239\":1,\"3248\":1,\"3252\":1,\"3258\":1,\"3259\":1,\"3264\":1,\"3269\":1,\"3273\":1,\"3278\":1,\"3282\":1,\"3287\":1,\"3293\":1,\"3300\":1,\"3304\":1,\"3305\":2,\"3306\":1,\"3307\":1,\"3312\":1,\"3318\":1,\"3325\":1,\"3326\":2,\"3327\":1,\"3328\":1,\"3336\":1,\"3342\":1,\"3345\":1,\"3359\":1,\"3360\":1,\"3366\":1,\"3369\":1,\"3374\":1,\"3378\":1,\"3380\":1,\"3383\":1,\"3386\":1,\"3390\":1,\"3396\":1,\"3420\":1,\"3429\":1,\"3435\":1,\"3440\":1,\"3441\":2,\"3442\":1,\"3449\":1,\"3452\":1,\"3457\":1,\"3461\":1,\"3464\":1,\"3466\":1,\"3472\":1,\"3476\":1,\"3485\":1,\"3487\":1,\"3493\":1,\"3497\":1,\"3499\":1,\"3501\":1,\"3507\":1,\"3511\":1,\"3513\":1,\"3519\":1,\"3524\":1,\"3526\":1,\"3531\":1,\"3532\":2,\"3533\":1,\"3534\":2,\"3536\":1,\"3540\":1,\"3545\":1,\"3550\":1,\"3552\":1,\"3554\":1,\"3557\":1,\"3560\":1,\"3566\":1,\"3569\":1,\"3572\":1,\"3574\":1,\"3580\":1,\"3583\":1,\"3585\":1,\"3586\":2,\"3587\":1,\"3588\":1,\"3590\":1,\"3595\":1,\"3600\":1,\"3602\":1,\"3604\":1,\"3609\":1,\"3613\":1,\"3617\":1,\"3619\":1,\"3623\":1,\"3625\":1,\"3630\":1,\"3633\":1,\"3637\":1,\"3639\":1,\"3644\":1,\"3651\":1,\"3656\":1,\"3661\":1,\"3666\":1,\"3667\":2,\"3668\":1,\"3670\":1,\"3673\":1,\"3678\":1,\"3679\":2,\"3682\":1,\"3685\":1,\"3688\":1,\"3692\":1,\"3693\":1,\"3696\":1,\"3700\":1,\"3707\":1,\"3709\":1,\"3717\":1,\"3719\":1,\"3723\":1,\"3726\":1,\"3731\":1,\"3733\":1,\"3738\":1,\"3743\":1,\"3746\":1,\"3750\":1,\"3756\":1,\"3767\":1,\"3773\":1,\"3787\":1},\"1\":{\"19\":2,\"21\":2,\"22\":1,\"24\":1,\"25\":1,\"26\":1,\"29\":1,\"33\":1,\"35\":1,\"95\":2,\"96\":1,\"97\":1,\"98\":1,\"100\":1,\"109\":2,\"110\":2,\"139\":1,\"143\":2,\"151\":2,\"162\":3,\"189\":2,\"190\":1,\"214\":1,\"218\":1,\"242\":2,\"246\":7,\"258\":1,\"259\":1,\"271\":1,\"288\":1,\"297\":1,\"308\":1,\"314\":1,\"358\":1,\"379\":1,\"388\":1,\"389\":1,\"392\":1,\"403\":1,\"404\":1,\"423\":2,\"428\":3,\"429\":4,\"430\":1,\"431\":2,\"432\":3,\"439\":1,\"462\":1,\"478\":1,\"499\":1,\"500\":2,\"506\":1,\"511\":1,\"521\":1,\"527\":2,\"562\":1,\"574\":3,\"575\":1,\"576\":1,\"577\":1,\"580\":2,\"581\":1,\"588\":2,\"611\":1,\"623\":1,\"627\":1,\"632\":1,\"633\":1,\"644\":1,\"655\":1,\"656\":2,\"657\":1,\"660\":1,\"669\":1,\"682\":1,\"693\":1,\"708\":2,\"721\":8,\"722\":8,\"734\":2,\"746\":2,\"749\":3,\"750\":1,\"751\":1,\"757\":2,\"760\":2,\"761\":3,\"762\":2,\"763\":2,\"764\":3,\"766\":2,\"767\":3,\"768\":2,\"769\":1,\"773\":1,\"774\":3,\"777\":2,\"778\":1,\"783\":2,\"784\":1,\"785\":1,\"786\":1,\"812\":1,\"813\":3,\"814\":3,\"818\":1,\"825\":2,\"861\":1,\"869\":2,\"874\":1,\"877\":1,\"884\":1,\"889\":1,\"890\":2,\"892\":2,\"893\":5,\"894\":2,\"895\":3,\"896\":2,\"924\":1,\"925\":2,\"926\":2,\"930\":3,\"931\":4,\"932\":4,\"933\":4,\"934\":1,\"935\":2,\"936\":1,\"937\":3,\"938\":3,\"939\":2,\"945\":1,\"948\":2,\"949\":1,\"987\":1,\"989\":2,\"990\":2,\"992\":1,\"1017\":1,\"1032\":2,\"1033\":1,\"1035\":1,\"1050\":1,\"1056\":1,\"1059\":3,\"1061\":1,\"1087\":2,\"1094\":1,\"1097\":1,\"1111\":1,\"1115\":1,\"1121\":9,\"1129\":2,\"1132\":1,\"1138\":2,\"1141\":1,\"1145\":2,\"1150\":1,\"1155\":1,\"1156\":1,\"1157\":1,\"1159\":1,\"1176\":1,\"1179\":2,\"1180\":1,\"1184\":1,\"1189\":1,\"1198\":2,\"1202\":2,\"1203\":2,\"1219\":4,\"1220\":3,\"1222\":1,\"1223\":2,\"1225\":1,\"1227\":1,\"1230\":2,\"1232\":3,\"1233\":1,\"1236\":2,\"1237\":1,\"1238\":7,\"1242\":1,\"1245\":2,\"1246\":1,\"1258\":1,\"1267\":2,\"1273\":1,\"1276\":1,\"1283\":4,\"1302\":1,\"1304\":1,\"1311\":1,\"1352\":1,\"1376\":3,\"1389\":1,\"1406\":1,\"1423\":1,\"1442\":2,\"1488\":1,\"1489\":1,\"1505\":1,\"1507\":1,\"1536\":1,\"1546\":1,\"1560\":1,\"1568\":2,\"1571\":1,\"1583\":1,\"1589\":1,\"1591\":2,\"1592\":1,\"1599\":1,\"1600\":1,\"1621\":1,\"1650\":6,\"1652\":3,\"1653\":1,\"1654\":2,\"1688\":2,\"1719\":1,\"1720\":1,\"1735\":1,\"1740\":1,\"1750\":1,\"1755\":1,\"1769\":1,\"1795\":1,\"1798\":1,\"1804\":2,\"1810\":1,\"1817\":1,\"1827\":2,\"1828\":1,\"1842\":1,\"1846\":1,\"1852\":1,\"1893\":1,\"1922\":1,\"1923\":1,\"1940\":1,\"1953\":2,\"1954\":1,\"1957\":5,\"1958\":1,\"1995\":1,\"1996\":1,\"2001\":2,\"2010\":2,\"2023\":1,\"2030\":1,\"2049\":1,\"2052\":2,\"2053\":1,\"2064\":1,\"2065\":2,\"2071\":3,\"2074\":1,\"2084\":4,\"2089\":1,\"2106\":2,\"2109\":1,\"2126\":1,\"2127\":1,\"2136\":3,\"2139\":1,\"2146\":1,\"2151\":1,\"2152\":1,\"2156\":1,\"2157\":1,\"2161\":1,\"2175\":2,\"2176\":1,\"2181\":1,\"2183\":1,\"2184\":1,\"2206\":1,\"2214\":1,\"2216\":1,\"2220\":2,\"2225\":1,\"2231\":1,\"2233\":1,\"2237\":1,\"2243\":1,\"2252\":3,\"2257\":1,\"2258\":1,\"2273\":1,\"2280\":1,\"2293\":3,\"2296\":7,\"2306\":1,\"2311\":1,\"2315\":1,\"2348\":1,\"2356\":2,\"2369\":1,\"2371\":1,\"2377\":1,\"2392\":1,\"2440\":1,\"2446\":1,\"2448\":2,\"2458\":1,\"2469\":2,\"2487\":1,\"2488\":1,\"2491\":1,\"2525\":3,\"2528\":2,\"2529\":2,\"2532\":2,\"2536\":2,\"2537\":1,\"2538\":1,\"2539\":1,\"2545\":1,\"2546\":1,\"2547\":1,\"2548\":2,\"2551\":1,\"2556\":2,\"2559\":7,\"2560\":1,\"2567\":1,\"2569\":2,\"2570\":2,\"2573\":2,\"2575\":1,\"2577\":2,\"2581\":2,\"2582\":1,\"2595\":2,\"2597\":5,\"2600\":6,\"2603\":5,\"2612\":3,\"2613\":4,\"2620\":1,\"2621\":2,\"2623\":1,\"2624\":3,\"2625\":3,\"2634\":2,\"2635\":1,\"2639\":1,\"2653\":11,\"2655\":1,\"2656\":1,\"2657\":2,\"2665\":2,\"2666\":1,\"2672\":1,\"2674\":2,\"2698\":2,\"2702\":1,\"2705\":1,\"2726\":1,\"2731\":1,\"2759\":1,\"2770\":2,\"2778\":1,\"2806\":1,\"2814\":1,\"2820\":1,\"2822\":1,\"2831\":1,\"2844\":1,\"2845\":2,\"2846\":3,\"2858\":1,\"2871\":1,\"2872\":1,\"2876\":1,\"2883\":1,\"2884\":1,\"2894\":2,\"2895\":1,\"2896\":1,\"2899\":1,\"2952\":2,\"2960\":1,\"2991\":1,\"2992\":2,\"3003\":1,\"3019\":2,\"3020\":1,\"3027\":1,\"3029\":1,\"3034\":1,\"3039\":2,\"3046\":1,\"3083\":1,\"3090\":3,\"3094\":1,\"3102\":2,\"3106\":2,\"3108\":1,\"3118\":2,\"3119\":1,\"3124\":2,\"3126\":1,\"3134\":2,\"3135\":3,\"3140\":1,\"3141\":2,\"3142\":5,\"3144\":2,\"3148\":1,\"3149\":2,\"3154\":2,\"3158\":1,\"3159\":2,\"3160\":5,\"3163\":1,\"3164\":5,\"3182\":1,\"3183\":1,\"3186\":1,\"3189\":1,\"3191\":2,\"3227\":2,\"3231\":1,\"3241\":1,\"3249\":3,\"3253\":1,\"3262\":1,\"3264\":1,\"3269\":1,\"3278\":2,\"3283\":2,\"3289\":1,\"3307\":1,\"3320\":1,\"3324\":1,\"3325\":1,\"3327\":2,\"3332\":2,\"3340\":1,\"3353\":1,\"3355\":4,\"3370\":5,\"3373\":2,\"3378\":2,\"3379\":1,\"3380\":2,\"3381\":1,\"3382\":1,\"3400\":1,\"3403\":1,\"3407\":3,\"3410\":2,\"3413\":3,\"3416\":2,\"3417\":1,\"3421\":1,\"3431\":1,\"3432\":3,\"3433\":9,\"3444\":1,\"3454\":1,\"3473\":1,\"3476\":3,\"3479\":1,\"3480\":1,\"3482\":3,\"3483\":3,\"3485\":3,\"3487\":1,\"3488\":1,\"3489\":1,\"3494\":2,\"3508\":1,\"3516\":1,\"3527\":1,\"3533\":1,\"3545\":3,\"3554\":2,\"3570\":2,\"3571\":1,\"3590\":3,\"3596\":1,\"3598\":2,\"3601\":1,\"3606\":2,\"3607\":3,\"3609\":1,\"3611\":5,\"3620\":2,\"3623\":1,\"3625\":1,\"3626\":6,\"3627\":10,\"3628\":4,\"3630\":2,\"3635\":1,\"3636\":2,\"3641\":2,\"3645\":1,\"3647\":1,\"3659\":1,\"3664\":1,\"3667\":7,\"3668\":1,\"3670\":31,\"3671\":2,\"3673\":7,\"3674\":6,\"3675\":1,\"3679\":1,\"3686\":1,\"3700\":4,\"3701\":4,\"3707\":1,\"3713\":1,\"3714\":1,\"3715\":1,\"3719\":1,\"3735\":2,\"3736\":1,\"3738\":1,\"3757\":1}}],[\"lucene只是一个提供全文搜索功能类库的核心工具包\",{\"1\":{\"3092\":1}}],[\"lucene\",{\"0\":{\"3092\":1},\"1\":{\"3092\":2,\"3108\":1,\"3367\":1,\"3446\":2,\"3501\":1,\"3504\":4,\"3507\":1,\"3513\":1,\"3515\":3,\"3516\":2}}],[\"l2\",{\"1\":{\"1116\":1}}],[\"l1\",{\"1\":{\"1116\":1,\"3504\":1}}],[\"lte\",{\"1\":{\"3172\":1,\"3236\":2,\"3237\":1}}],[\"lts版本\",{\"1\":{\"2352\":3}}],[\"lts\",{\"0\":{\"2352\":1,\"2509\":1}}],[\"lt\",{\"1\":{\"718\":1,\"3172\":1,\"3236\":1}}],[\"ltnow\",{\"1\":{\"717\":2}}],[\"ldtstr\",{\"1\":{\"732\":2}}],[\"ldt8\",{\"1\":{\"720\":2,\"721\":2,\"722\":1}}],[\"ldt7\",{\"1\":{\"720\":2,\"721\":2,\"722\":1}}],[\"ldt6\",{\"1\":{\"720\":2,\"721\":2,\"722\":1}}],[\"ldt5\",{\"1\":{\"720\":2,\"721\":2,\"722\":1}}],[\"ldt4\",{\"1\":{\"720\":2,\"721\":2,\"722\":1}}],[\"ldt3\",{\"1\":{\"720\":2,\"721\":2,\"722\":1,\"734\":2}}],[\"ldt2\",{\"1\":{\"720\":2,\"721\":2,\"722\":1,\"734\":2}}],[\"ldt1\",{\"1\":{\"720\":2,\"721\":2,\"722\":1}}],[\"ldt\",{\"1\":{\"718\":1,\"719\":4,\"720\":9,\"721\":9,\"722\":9,\"732\":2,\"736\":2}}],[\"ldtnow\",{\"1\":{\"717\":2,\"719\":5}}],[\"ld\",{\"1\":{\"718\":1}}],[\"ldnow\",{\"1\":{\"717\":2}}],[\"llc\",{\"1\":{\"3504\":1}}],[\"ll\",{\"1\":{\"662\":2,\"663\":1}}],[\"lqw\",{\"1\":{\"632\":3,\"633\":4,\"636\":5}}],[\"l\",{\"1\":{\"501\":2,\"673\":1,\"1088\":2}}],[\"lfu\",{\"1\":{\"480\":1}}],[\"lru\",{\"1\":{\"478\":2,\"480\":1}}],[\"left\",{\"1\":{\"3509\":1}}],[\"lexicon\",{\"1\":{\"3431\":1}}],[\"leap\",{\"1\":{\"3464\":1}}],[\"least\",{\"1\":{\"3313\":1,\"3346\":1,\"3348\":1}}],[\"learn\",{\"1\":{\"788\":1,\"884\":1,\"2538\":1}}],[\"le\",{\"1\":{\"2106\":1}}],[\"legnth\",{\"1\":{\"1266\":1}}],[\"len2\",{\"1\":{\"746\":3}}],[\"len1\",{\"1\":{\"746\":3}}],[\"len\",{\"1\":{\"700\":1,\"814\":5,\"818\":2,\"824\":3,\"825\":3,\"2053\":3,\"2055\":1,\"2065\":3,\"2071\":3,\"2084\":5,\"2101\":1,\"2106\":2,\"2136\":3,\"2613\":3,\"2894\":3}}],[\"length参数必须小于等于\",{\"1\":{\"2234\":1}}],[\"length并不能代表真实的字符数\",{\"1\":{\"2056\":1}}],[\"length==0\",{\"1\":{\"659\":1}}],[\"length\",{\"0\":{\"651\":1,\"699\":1,\"792\":1},\"1\":{\"651\":2,\"697\":1,\"699\":4,\"702\":1,\"746\":2,\"792\":4,\"814\":1,\"825\":2,\"895\":1,\"1214\":2,\"1221\":1,\"1222\":1,\"1239\":2,\"1240\":2,\"1296\":1,\"1854\":2,\"1855\":1,\"2056\":1,\"2231\":1,\"2232\":1,\"2233\":1,\"2234\":8,\"2296\":6,\"2432\":2,\"2581\":1,\"2600\":1,\"2603\":1,\"2634\":1,\"2653\":4}}],[\"lettuce\",{\"1\":{\"384\":1}}],[\"lettcus基于netty框架进行与redis服务器连接\",{\"1\":{\"382\":1}}],[\"lettcus与jedis区别\",{\"0\":{\"382\":1}}],[\"level指定的版本不支持新语法\",{\"1\":{\"2356\":1}}],[\"level是编辑器用来对代码进行语言检查的版本\",{\"1\":{\"2356\":1}}],[\"level=\",{\"1\":{\"308\":5}}],[\"levelfilter\",{\"1\":{\"308\":3}}],[\"level为\",{\"1\":{\"308\":3}}],[\"level>\",{\"1\":{\"308\":4}}],[\"level\",{\"0\":{\"2356\":1},\"1\":{\"295\":1,\"308\":2,\"2638\":1}}],[\"later\",{\"1\":{\"3307\":1,\"3327\":1,\"3355\":1}}],[\"large\",{\"1\":{\"2610\":1}}],[\"lambda要实现的操作\",{\"1\":{\"2404\":1}}],[\"lambda与创建functional对象\",{\"0\":{\"2389\":1}}],[\"lambda的使用\",{\"0\":{\"2367\":1}}],[\"lambda体应该使用一对\",{\"1\":{\"2366\":1}}],[\"lambda体\",{\"1\":{\"2362\":1}}],[\"lambda形参列表的参数类型可以省略\",{\"1\":{\"2366\":1}}],[\"lambda形参列表\",{\"1\":{\"2362\":1}}],[\"lambda操作符或箭头操作符\",{\"1\":{\"2362\":1}}],[\"lambda本质\",{\"0\":{\"2360\":1}}],[\"lambda表达式写法\",{\"0\":{\"2403\":1}}],[\"lambda表达式的使用\",{\"1\":{\"2367\":1}}],[\"lambda表达式的本质\",{\"1\":{\"2360\":1}}],[\"lambda表达式中无需指定类型\",{\"1\":{\"2365\":1}}],[\"lambda表达式\",{\"0\":{\"2358\":1,\"2406\":1}}],[\"lambda\",{\"0\":{\"2357\":1,\"2409\":1,\"2412\":1,\"2415\":1,\"2421\":1,\"2424\":1,\"2427\":1,\"2432\":1},\"1\":{\"2359\":1,\"2365\":2,\"2369\":1,\"2371\":1,\"2389\":2,\"2458\":1}}],[\"lambdaquerywrapper<book>\",{\"1\":{\"632\":2,\"633\":2,\"636\":2}}],[\"lambdaquerywrapper\",{\"0\":{\"632\":1}}],[\"laddr\",{\"1\":{\"2233\":1}}],[\"lass\",{\"1\":{\"1971\":1}}],[\"lastheartbeatrecv\",{\"1\":{\"3673\":1,\"3674\":1}}],[\"lastheartbeat\",{\"1\":{\"3673\":1,\"3674\":1}}],[\"lastheartbeatmessage\",{\"1\":{\"3670\":1,\"3673\":1,\"3674\":1}}],[\"lastseenoptimeatelection\",{\"1\":{\"3670\":1}}],[\"laststablerecoverytimestamp\",{\"1\":{\"3670\":1}}],[\"lastelectiondate\",{\"1\":{\"3670\":1}}],[\"lastelectionreason\",{\"1\":{\"3670\":1}}],[\"lastdurablewalltime\",{\"1\":{\"3670\":2,\"3673\":1}}],[\"lastappliedwalltime\",{\"1\":{\"3670\":2,\"3673\":1}}],[\"lastcommittedwalltime\",{\"1\":{\"3670\":1}}],[\"lastcommittedoptimeatelection\",{\"1\":{\"3670\":1}}],[\"lastcommittedoptime\",{\"1\":{\"3670\":1}}],[\"lastmodified\",{\"0\":{\"793\":1},\"1\":{\"793\":2}}],[\"lastindexof\",{\"0\":{\"657\":1,\"949\":1},\"1\":{\"657\":3,\"949\":2}}],[\"label\",{\"1\":{\"1198\":3}}],[\"launcher$extclassloader\",{\"1\":{\"845\":1,\"2280\":1}}],[\"launcher$appclassloader\",{\"1\":{\"844\":1,\"2280\":1}}],[\"lang包下\",{\"1\":{\"2989\":1}}],[\"lang包下定义的\",{\"1\":{\"1342\":1}}],[\"lang包无需导入\",{\"1\":{\"1345\":1}}],[\"lang包\",{\"1\":{\"1342\":1}}],[\"lang\",{\"1\":{\"741\":1,\"752\":2,\"759\":1,\"777\":1,\"841\":1,\"843\":1,\"848\":1,\"859\":1,\"872\":1,\"1058\":2,\"1338\":1,\"1345\":1,\"1364\":4,\"1392\":1,\"1423\":1,\"1429\":1,\"1560\":2,\"1571\":3,\"1573\":1,\"1625\":1,\"1643\":1,\"1652\":1,\"1653\":1,\"1654\":1,\"1680\":7,\"1713\":1,\"1799\":1,\"1802\":1,\"1836\":1,\"1959\":1,\"2128\":1,\"2250\":4,\"2252\":1,\"2260\":1,\"2264\":2,\"2274\":1,\"2277\":1,\"2292\":1,\"2293\":1,\"2296\":5,\"2682\":1}}],[\"lang=>\",{\"1\":{\"649\":1}}],[\"language\",{\"1\":{\"95\":1,\"1258\":1,\"2850\":1,\"3015\":1}}],[\"layers\",{\"1\":{\"246\":2}}],[\"low\",{\"1\":{\"3313\":1,\"3346\":1,\"3348\":1}}],[\"lock>同步代码块\",{\"1\":{\"1786\":1}}],[\"lock只有代码块锁\",{\"1\":{\"1785\":1}}],[\"lock是显式锁\",{\"1\":{\"1785\":1}}],[\"lock\",{\"1\":{\"1780\":5,\"1782\":2,\"1783\":1,\"1784\":5,\"3355\":2,\"3756\":1}}],[\"lock的优点\",{\"0\":{\"1779\":1}}],[\"lock接口是控制多个线程对共享资源进行访问的工具\",{\"1\":{\"1778\":1}}],[\"locks\",{\"1\":{\"1778\":1,\"1784\":1}}],[\"lock锁方式也可以解决线程安全问题\",{\"1\":{\"1777\":1}}],[\"lock锁\",{\"0\":{\"1777\":1}}],[\"locator\",{\"1\":{\"2236\":1,\"2243\":1}}],[\"location<\",{\"1\":{\"3488\":2}}],[\"location\",{\"1\":{\"95\":1,\"2907\":1,\"2909\":1}}],[\"locale\",{\"1\":{\"3352\":1}}],[\"localtime\",{\"0\":{\"713\":1,\"715\":1},\"1\":{\"709\":1,\"712\":1,\"715\":1,\"717\":2,\"718\":3}}],[\"localdatetime实现了该接口\",{\"1\":{\"729\":1}}],[\"localdatetimeimplements\",{\"1\":{\"716\":1}}],[\"localdatetime\",{\"0\":{\"713\":1,\"716\":1},\"1\":{\"709\":1,\"712\":1,\"717\":2,\"718\":3,\"719\":2,\"720\":10,\"721\":10,\"722\":10,\"732\":2,\"734\":2,\"736\":2}}],[\"localdate\",{\"0\":{\"713\":1,\"714\":1},\"1\":{\"709\":1,\"712\":1,\"714\":1,\"717\":2,\"718\":3}}],[\"local\",{\"1\":{\"488\":1,\"578\":1,\"731\":6,\"732\":1,\"733\":1,\"1653\":1,\"1660\":1,\"1661\":1,\"1675\":1,\"2755\":1,\"3574\":1}}],[\"local目录中\",{\"1\":{\"252\":1}}],[\"localhost表示本机地址\",{\"1\":{\"3268\":1}}],[\"localhost中创建任意xml文件\",{\"1\":{\"2717\":1}}],[\"localhost\",{\"1\":{\"111\":1,\"154\":1,\"324\":1,\"326\":1,\"356\":1,\"368\":1,\"383\":1,\"384\":1,\"451\":1,\"474\":2,\"483\":1,\"617\":1,\"2183\":1,\"2542\":1,\"2545\":1,\"2547\":1,\"2548\":1,\"2550\":1,\"2673\":1,\"2711\":1,\"2715\":2,\"2716\":1,\"2750\":1,\"2758\":1,\"2781\":1,\"2785\":1,\"2822\":1,\"2823\":1,\"2824\":1,\"2825\":1,\"2846\":2,\"2849\":1,\"2888\":1,\"2890\":1,\"2903\":1,\"2911\":1,\"3108\":1,\"3110\":2,\"3118\":1,\"3123\":1,\"3130\":1,\"3153\":1,\"3206\":1,\"3209\":1,\"3211\":1,\"3212\":1,\"3214\":1,\"3217\":1,\"3218\":1,\"3220\":1,\"3221\":1,\"3225\":1,\"3226\":1,\"3227\":1,\"3231\":1,\"3234\":1,\"3237\":1,\"3240\":1,\"3242\":1,\"3244\":1,\"3249\":1,\"3253\":1,\"3269\":3,\"3270\":3,\"3271\":3,\"3278\":1,\"3282\":1,\"3283\":1,\"3337\":2,\"3339\":4,\"3352\":2,\"3353\":1,\"3355\":1,\"3378\":1,\"3379\":1,\"3393\":1,\"3473\":1,\"3476\":1,\"3480\":1,\"3485\":1,\"3489\":1,\"3562\":1,\"3656\":1}}],[\"lo\",{\"1\":{\"661\":1}}],[\"love\",{\"1\":{\"445\":1,\"669\":1,\"673\":1}}],[\"lombok\",{\"0\":{\"606\":1,\"620\":1},\"1\":{\"418\":1,\"612\":1,\"620\":1}}],[\"lombok包提供的类注解\",{\"1\":{\"290\":1}}],[\"loaction=classpath\",{\"1\":{\"267\":1}}],[\"loading\",{\"1\":{\"3718\":1}}],[\"loadonstartup\",{\"1\":{\"2820\":1}}],[\"loadonstartup=1\",{\"1\":{\"2800\":1}}],[\"loaddriver\",{\"1\":{\"2682\":1}}],[\"loadfactor\",{\"1\":{\"1928\":1}}],[\"loadclass\",{\"1\":{\"837\":1,\"2269\":1}}],[\"loadtrustmaterial\",{\"1\":{\"418\":1}}],[\"load\",{\"0\":{\"2274\":1},\"1\":{\"418\":1,\"1928\":1,\"1940\":1,\"2282\":2,\"2551\":1,\"2573\":1,\"2575\":1,\"2672\":1,\"2675\":1}}],[\"loader\",{\"1\":{\"244\":1,\"246\":1,\"2338\":1}}],[\"loadbalancer\",{\"1\":{\"11\":1}}],[\"longblob\",{\"1\":{\"2608\":1}}],[\"longvarchar\",{\"1\":{\"2562\":1}}],[\"longvalue\",{\"1\":{\"772\":1}}],[\"long型没有加l\",{\"1\":{\"1116\":1}}],[\"long类型为什么加l\",{\"0\":{\"1098\":1}}],[\"long类也是有限的\",{\"1\":{\"777\":1}}],[\"longstream\",{\"1\":{\"1059\":1,\"2447\":1,\"2466\":1}}],[\"long\",{\"1\":{\"208\":1,\"394\":1,\"492\":7,\"671\":3,\"688\":2,\"726\":2,\"727\":2,\"734\":2,\"760\":1,\"764\":3,\"766\":1,\"767\":1,\"771\":1,\"772\":2,\"778\":1,\"792\":2,\"793\":2,\"881\":2,\"888\":1,\"1009\":1,\"1075\":1,\"1089\":1,\"1116\":2,\"1204\":2,\"1273\":1,\"1357\":1,\"1499\":2,\"1546\":1,\"1612\":1,\"1727\":1,\"2086\":2,\"2124\":1,\"2131\":1,\"2132\":1,\"2155\":1,\"2158\":2,\"2168\":1,\"2242\":2,\"2351\":1,\"2447\":1,\"2482\":2,\"2562\":1,\"2621\":1,\"2624\":1,\"2655\":1,\"2656\":1,\"2657\":1,\"2691\":2,\"3298\":1,\"3667\":2,\"3670\":11,\"3673\":2,\"3674\":2,\"3700\":1,\"3701\":1}}],[\"lookup\",{\"1\":{\"117\":1}}],[\"logappend\",{\"1\":{\"3562\":1,\"3656\":1}}],[\"log4j2\",{\"0\":{\"3357\":1}}],[\"log4j防御sql注入的filter\",{\"1\":{\"2674\":1}}],[\"logs文件储存的路径\",{\"1\":{\"3501\":1}}],[\"logstash和kibana这三个技术就是我们常说的elk技术栈\",{\"1\":{\"3350\":1}}],[\"logstash\",{\"1\":{\"3090\":1,\"3355\":1}}],[\"logs\",{\"1\":{\"578\":1,\"3106\":1,\"3289\":1,\"3320\":1,\"3332\":2,\"3337\":2,\"3339\":4,\"3355\":2,\"3501\":2}}],[\"logfile\",{\"1\":{\"342\":1}}],[\"log<\",{\"1\":{\"308\":6}}],[\"logback相对于log4j的一些优点\",{\"1\":{\"306\":1}}],[\"logback和log4j非常相似\",{\"1\":{\"306\":1}}],[\"logback\",{\"0\":{\"305\":1},\"1\":{\"304\":1,\"307\":1,\"308\":14}}],[\"logging\",{\"1\":{\"295\":1,\"298\":1,\"299\":1,\"302\":1,\"304\":1,\"342\":2,\"624\":1}}],[\"loggers\",{\"1\":{\"342\":1}}],[\"loggerfactory\",{\"1\":{\"288\":1}}],[\"logger\",{\"1\":{\"288\":1,\"308\":4}}],[\"log日志\",{\"0\":{\"285\":1}}],[\"log\",{\"1\":{\"45\":1,\"288\":5,\"290\":5,\"302\":1,\"304\":1,\"308\":16,\"309\":4,\"418\":1,\"419\":2,\"578\":1,\"624\":1,\"769\":5,\"3561\":1,\"3562\":2,\"3654\":1,\"3656\":3,\"3657\":3,\"3658\":3}}],[\"lily\",{\"1\":{\"1680\":1}}],[\"literal\",{\"1\":{\"997\":1}}],[\"limilt\",{\"1\":{\"3611\":1}}],[\"limit\",{\"0\":{\"2460\":1},\"1\":{\"682\":2,\"992\":2,\"1001\":1,\"2450\":1,\"2451\":1,\"2454\":1,\"2460\":2,\"2461\":1,\"3355\":1,\"3610\":3,\"3611\":1}}],[\"lim\",{\"1\":{\"746\":2}}],[\"likenum\",{\"1\":{\"3587\":1,\"3590\":2,\"3596\":1,\"3598\":1,\"3611\":1,\"3614\":1,\"3616\":3,\"3682\":1}}],[\"like\",{\"1\":{\"631\":1,\"632\":1,\"633\":2,\"636\":3}}],[\"likes1\",{\"1\":{\"151\":1}}],[\"likes2\",{\"1\":{\"148\":1}}],[\"likes\",{\"1\":{\"148\":1,\"151\":1}}],[\"live\",{\"1\":{\"483\":1}}],[\"liquibase\",{\"1\":{\"342\":2}}],[\"lib下\",{\"1\":{\"2989\":2}}],[\"lib中的一个包\",{\"1\":{\"2773\":1}}],[\"library\",{\"1\":{\"2538\":1}}],[\"library>java>lang>system\",{\"1\":{\"880\":1}}],[\"libraries>java\",{\"1\":{\"889\":1}}],[\"libraries>java>util\",{\"1\":{\"901\":1,\"920\":1}}],[\"libraries>java>util>comparator\",{\"1\":{\"752\":1}}],[\"libraries>java>time>format>datetimeformatter\",{\"1\":{\"728\":1}}],[\"libraries>java>time>instant\",{\"1\":{\"723\":1}}],[\"libraries>java>time>localtime\",{\"1\":{\"715\":1}}],[\"libraries>java>time>localdatetime\",{\"1\":{\"716\":1}}],[\"libraries>java>time>localdate\",{\"1\":{\"714\":1}}],[\"libraries>java>lang>comparable\",{\"1\":{\"743\":1}}],[\"libraries>java>lang\",{\"1\":{\"683\":2}}],[\"libraries=>\",{\"1\":{\"649\":1}}],[\"lib\",{\"1\":{\"244\":1,\"246\":2,\"1035\":1,\"2538\":1,\"2722\":1,\"2773\":1,\"3106\":1,\"3289\":1,\"3320\":1}}],[\"lisi\",{\"1\":{\"148\":3,\"2872\":1}}],[\"listner是javaweb的核心三件套\",{\"1\":{\"2769\":1}}],[\"list5\",{\"1\":{\"2001\":3}}],[\"list4\",{\"1\":{\"2001\":3}}],[\"list3\",{\"1\":{\"1969\":2,\"1986\":3,\"1993\":5,\"2001\":3}}],[\"list集合\",{\"0\":{\"1957\":1}}],[\"list集合类中元素有序\",{\"1\":{\"1858\":1}}],[\"list方法\",{\"0\":{\"1878\":1}}],[\"list接口是collection的子接口\",{\"1\":{\"1859\":1}}],[\"list接口的实现类\",{\"0\":{\"1859\":1}}],[\"list接口为collection接口的子接口\",{\"1\":{\"1858\":1}}],[\"list容器中的元素都对应一个整数型的序号记载其在容器中的位置\",{\"1\":{\"1858\":1}}],[\"list1\",{\"1\":{\"946\":3,\"947\":3,\"948\":2,\"949\":2,\"950\":5,\"951\":3,\"952\":3,\"1969\":3,\"1985\":2,\"1986\":2,\"1991\":3,\"1995\":4,\"1996\":4,\"2001\":6}}],[\"list是接口不能直接实例化\",{\"1\":{\"943\":1}}],[\"list除了从collection集合继承的方法外\",{\"1\":{\"941\":1,\"1878\":1}}],[\"list2\",{\"1\":{\"937\":7,\"946\":3,\"952\":2,\"1969\":4,\"1985\":2,\"1986\":2,\"1991\":3,\"1995\":4,\"1996\":4,\"2001\":6,\"2005\":1}}],[\"listfiles\",{\"0\":{\"795\":1},\"1\":{\"795\":2}}],[\"list<customer>\",{\"1\":{\"2604\":1,\"2655\":1,\"2656\":2,\"2657\":1,\"2689\":1}}],[\"list<class<t>>无论查询结果是几条\",{\"1\":{\"410\":1}}],[\"list<list<student>>\",{\"1\":{\"2469\":1,\"2471\":1}}],[\"list<employee>\",{\"1\":{\"2458\":1,\"2459\":1,\"2460\":1,\"2461\":1,\"2477\":1,\"2478\":1,\"2480\":1,\"2481\":1,\"2491\":1}}],[\"list<e>\",{\"1\":{\"942\":1,\"952\":1,\"1981\":1,\"1982\":1}}],[\"list<person>\",{\"1\":{\"2001\":1}}],[\"list<man>\",{\"1\":{\"2001\":1}}],[\"list<object>\",{\"1\":{\"1985\":1,\"1991\":1,\"2001\":1}}],[\"list<integer>\",{\"1\":{\"930\":1,\"937\":1,\"939\":2,\"2474\":1,\"2487\":1,\"2488\":1}}],[\"list<\",{\"1\":{\"930\":1,\"931\":1,\"933\":1,\"937\":2,\"1991\":2,\"1993\":1,\"1996\":1,\"2001\":2}}],[\"list<string>\",{\"1\":{\"897\":1,\"899\":1,\"944\":1,\"945\":1,\"952\":1,\"1948\":1,\"1964\":2,\"1985\":1,\"1986\":1,\"1991\":1,\"1993\":1,\"1995\":2,\"2463\":1}}],[\"list<student>\",{\"1\":{\"408\":1,\"410\":1,\"2469\":4,\"2470\":1,\"2475\":1}}],[\"list<t>\",{\"0\":{\"2605\":1},\"1\":{\"897\":1,\"899\":1,\"932\":2,\"938\":1,\"939\":2,\"1963\":1,\"2603\":1,\"2653\":1}}],[\"list<book>\",{\"1\":{\"635\":1,\"640\":1}}],[\"list\",{\"0\":{\"794\":1,\"940\":1,\"941\":1,\"1856\":1,\"1857\":1},\"1\":{\"58\":1,\"640\":1,\"647\":1,\"794\":4,\"899\":2,\"903\":1,\"929\":1,\"930\":9,\"931\":7,\"932\":8,\"933\":6,\"934\":2,\"935\":2,\"936\":2,\"937\":6,\"938\":4,\"939\":6,\"941\":1,\"944\":2,\"945\":6,\"1035\":1,\"1059\":1,\"1826\":1,\"1830\":2,\"1859\":1,\"1865\":1,\"1866\":1,\"1867\":1,\"1868\":1,\"1869\":2,\"1872\":1,\"1873\":1,\"1878\":1,\"1942\":1,\"1955\":7,\"1957\":7,\"1981\":3,\"1991\":3,\"1992\":3,\"1993\":3,\"1995\":2,\"1996\":2,\"2003\":1,\"2444\":2,\"2445\":2,\"2455\":1,\"2458\":2,\"2459\":2,\"2460\":3,\"2461\":2,\"2463\":2,\"2474\":2,\"2477\":2,\"2478\":2,\"2479\":1,\"2480\":2,\"2481\":2,\"2482\":1,\"2483\":1,\"2484\":1,\"2489\":1,\"2490\":1,\"2491\":2,\"2603\":3,\"2604\":2,\"2653\":3,\"2656\":2,\"2657\":2,\"2689\":2,\"3355\":2}}],[\"listenerdirect2\",{\"1\":{\"447\":1}}],[\"listenerdirect1\",{\"1\":{\"447\":1}}],[\"listener\",{\"0\":{\"2955\":1,\"3781\":1},\"1\":{\"11\":1,\"439\":1,\"2955\":2,\"2973\":1}}],[\"linkoption\",{\"1\":{\"2168\":4}}],[\"link\",{\"0\":{\"2275\":1},\"1\":{\"1058\":10,\"3305\":1,\"3328\":1}}],[\"linkedhashset效率高于hashset\",{\"1\":{\"1902\":1}}],[\"linkedhashset作为hashset的子类\",{\"1\":{\"1902\":1}}],[\"linkedhashset插入性能略低于\",{\"1\":{\"1886\":1,\"1902\":1}}],[\"linkedhashset\",{\"0\":{\"1886\":1,\"1902\":1},\"1\":{\"903\":1,\"1826\":1,\"1881\":1,\"1886\":1,\"1894\":1,\"1902\":3}}],[\"linkedhashmap和properties\",{\"1\":{\"1909\":1}}],[\"linkedhashmap\",{\"0\":{\"1913\":1,\"1929\":1},\"1\":{\"488\":1,\"955\":1,\"1826\":1,\"1910\":1,\"1913\":1,\"1931\":2}}],[\"linkedlist是典型的双向链表结构\",{\"1\":{\"1871\":1}}],[\"linkedlist\",{\"0\":{\"1861\":1,\"1871\":1},\"1\":{\"903\":1,\"1826\":1,\"1859\":1,\"1872\":2}}],[\"lineseparator\",{\"1\":{\"2079\":1}}],[\"lines\",{\"1\":{\"997\":1,\"3267\":1,\"3503\":1}}],[\"line\",{\"0\":{\"3536\":1},\"1\":{\"84\":1,\"85\":1,\"308\":1,\"1019\":1,\"2079\":1,\"2858\":2}}],[\"linux上的elasticsearch集群和单机有很多重复的步骤\",{\"1\":{\"3316\":1}}],[\"linux集群\",{\"0\":{\"3316\":1}}],[\"linux环境的部署\",{\"1\":{\"3105\":1}}],[\"linux选tar\",{\"1\":{\"2700\":1}}],[\"linux\",{\"0\":{\"74\":1,\"249\":1,\"3284\":1,\"3559\":1},\"1\":{\"10\":1,\"3105\":1,\"3287\":2,\"3289\":1,\"3318\":2,\"3320\":1}}],[\"rbac\",{\"1\":{\"3696\":1}}],[\"rpc\",{\"1\":{\"3526\":1}}],[\"rf\",{\"1\":{\"3301\":1}}],[\"rm\",{\"1\":{\"3301\":1}}],[\"rmvb\",{\"1\":{\"2045\":1}}],[\"rsh\",{\"1\":{\"2683\":4}}],[\"rsmd\",{\"1\":{\"2600\":3,\"2603\":3,\"2653\":6}}],[\"rs\",{\"1\":{\"2600\":6,\"2603\":6,\"2613\":8,\"2652\":1,\"2653\":17,\"2684\":1,\"2690\":6,\"3663\":1,\"3664\":1,\"3666\":1,\"3667\":1,\"3669\":1,\"3673\":3,\"3674\":2,\"3678\":1,\"3679\":2,\"3685\":1,\"3688\":1,\"3689\":1}}],[\"r工具\",{\"1\":{\"2526\":1}}],[\"r模式与rw模式\",{\"0\":{\"2135\":1}}],[\"rws\",{\"1\":{\"2134\":1}}],[\"rwd\",{\"1\":{\"2134\":1}}],[\"rw\",{\"1\":{\"2134\":1,\"2135\":1,\"2136\":1,\"2139\":1}}],[\"r>>\",{\"1\":{\"2467\":1}}],[\"r>\",{\"1\":{\"976\":1,\"2392\":1,\"2426\":1}}],[\"rint\",{\"0\":{\"766\":1},\"1\":{\"766\":4}}],[\"ribbon\",{\"1\":{\"11\":1}}],[\"r2\",{\"1\":{\"764\":2,\"1793\":1,\"2369\":2}}],[\"r1\",{\"1\":{\"764\":2,\"2369\":2,\"3355\":1}}],[\"rt\",{\"1\":{\"759\":1,\"771\":1,\"777\":1,\"778\":1,\"786\":1,\"812\":2,\"820\":2,\"832\":1,\"860\":1,\"867\":1,\"885\":1,\"927\":1,\"941\":1,\"953\":1,\"972\":1,\"993\":1,\"1002\":1,\"1006\":1,\"2076\":1,\"2077\":1,\"2078\":1,\"2079\":1,\"2190\":1}}],[\"r\",{\"1\":{\"645\":2,\"646\":6,\"647\":12,\"673\":1,\"829\":1,\"976\":1,\"2082\":1,\"2134\":1,\"2135\":1,\"2136\":1,\"2392\":1,\"3291\":1,\"3322\":1}}],[\"ram\",{\"1\":{\"3391\":1}}],[\"rack\",{\"1\":{\"3355\":1}}],[\"raf1\",{\"1\":{\"2139\":4}}],[\"rafwrite\",{\"1\":{\"2136\":3}}],[\"rafread\",{\"1\":{\"2136\":3}}],[\"radix取值为\",{\"1\":{\"888\":1,\"1009\":1}}],[\"radix指的是进制\",{\"1\":{\"888\":1,\"1009\":1}}],[\"radix\",{\"1\":{\"888\":8,\"1009\":8}}],[\"rand\",{\"1\":{\"3726\":1}}],[\"randomaccessfile对象\",{\"1\":{\"2136\":1,\"2139\":1}}],[\"randomaccessfile\",{\"1\":{\"2128\":1,\"2129\":1,\"2130\":2,\"2133\":2,\"2136\":4,\"2139\":2}}],[\"random\",{\"0\":{\"761\":1},\"1\":{\"472\":1,\"480\":1,\"761\":6,\"1266\":1,\"2252\":1,\"2451\":1}}],[\"rangequerybuilder对象的参数是要进行范围查询的字段\",{\"1\":{\"3236\":1}}],[\"rangequerybuilder\",{\"0\":{\"3236\":1},\"1\":{\"3236\":5,\"3237\":5}}],[\"range查询运行以下字符\",{\"1\":{\"3172\":1}}],[\"range\",{\"1\":{\"342\":1,\"3172\":1}}],[\"rabbitlistener监听的队列有消息推送过来\",{\"1\":{\"448\":1}}],[\"rabbitlistener监听目标队列\",{\"1\":{\"441\":1}}],[\"rabbitlistener\",{\"1\":{\"447\":2}}],[\"rabbitlistener注解的queues监听指定的队列\",{\"1\":{\"447\":1}}],[\"rabbittemplate\",{\"1\":{\"445\":3}}],[\"rabbitconfig\",{\"1\":{\"444\":1}}],[\"rabbitmqcontroller\",{\"1\":{\"446\":1}}],[\"rabbitmq\",{\"0\":{\"437\":1,\"604\":1},\"1\":{\"11\":1,\"437\":1,\"438\":1,\"439\":2,\"444\":1,\"446\":1,\"612\":1}}],[\"row\",{\"1\":{\"3545\":1}}],[\"role\",{\"1\":{\"3696\":1,\"3701\":6,\"3702\":2,\"3707\":1,\"3709\":1,\"3710\":1,\"3711\":1,\"3712\":2}}],[\"rolesinfo\",{\"1\":{\"3700\":1,\"3701\":1,\"3702\":3}}],[\"roles\",{\"1\":{\"3267\":1,\"3268\":1,\"3332\":1,\"3337\":1,\"3503\":1,\"3700\":1,\"3701\":7,\"3707\":1,\"3709\":1,\"3710\":1,\"3711\":1,\"3712\":3,\"3724\":1}}],[\"rollbackandclosequietly\",{\"1\":{\"2682\":1}}],[\"rollbackandclose\",{\"1\":{\"2682\":1}}],[\"rollback\",{\"0\":{\"2630\":1},\"1\":{\"2630\":1,\"2635\":1,\"2682\":1}}],[\"rollingfileappender\",{\"1\":{\"308\":3}}],[\"rolling\",{\"1\":{\"308\":9}}],[\"rollingpolicy>\",{\"1\":{\"308\":3}}],[\"rollingpolicy\",{\"1\":{\"304\":1}}],[\"rose\",{\"1\":{\"1935\":1}}],[\"rounding\",{\"1\":{\"783\":1}}],[\"roundingmode\",{\"0\":{\"784\":1},\"1\":{\"782\":4,\"783\":2}}],[\"round\",{\"0\":{\"764\":1},\"1\":{\"764\":3,\"766\":3,\"783\":1,\"784\":8}}],[\"route1\",{\"1\":{\"444\":1,\"445\":1}}],[\"routing参数\",{\"0\":{\"3402\":1}}],[\"routing\",{\"1\":{\"423\":1,\"3124\":1,\"3283\":1,\"3381\":1,\"3400\":3,\"3402\":1,\"3527\":1}}],[\"robots\",{\"1\":{\"673\":1}}],[\"robot\",{\"1\":{\"669\":2}}],[\"rocketmq\",{\"0\":{\"457\":1}}],[\"root用户启动\",{\"1\":{\"3291\":1,\"3322\":1}}],[\"roots中对应的src目录勾选上\",{\"1\":{\"2790\":1}}],[\"rootbeandefinition\",{\"1\":{\"527\":1,\"530\":1}}],[\"root>\",{\"1\":{\"308\":2}}],[\"root节点是必选节点\",{\"1\":{\"308\":1}}],[\"root的字样\",{\"1\":{\"166\":1}}],[\"root666123\",{\"1\":{\"154\":1}}],[\"root\",{\"1\":{\"154\":1,\"162\":1,\"225\":1,\"295\":1,\"356\":2,\"617\":2,\"2545\":2,\"2547\":1,\"2548\":1,\"3574\":1,\"3703\":1,\"3704\":1,\"3707\":1,\"3709\":1,\"3712\":1,\"3724\":2,\"3739\":1,\"3751\":1}}],[\"runcommand\",{\"1\":{\"3700\":1,\"3701\":1,\"3702\":3}}],[\"run方法是该线程操作的入口\",{\"1\":{\"1717\":1}}],[\"run方法\",{\"0\":{\"1717\":1}}],[\"run方法内的代码就是要定时执行的任务\",{\"1\":{\"493\":1}}],[\"runner\",{\"1\":{\"2686\":2,\"2687\":2,\"2688\":2,\"2689\":2,\"2690\":2,\"2691\":3}}],[\"runnable实现的方式中\",{\"1\":{\"1766\":1}}],[\"runnable实现的\",{\"0\":{\"1766\":1}}],[\"runnable实现类的实例\",{\"1\":{\"1742\":1}}],[\"runnable的实现类实例\",{\"1\":{\"1743\":1}}],[\"runnable类型的变量的\",{\"1\":{\"1741\":1}}],[\"runnabletest\",{\"1\":{\"1740\":1,\"1760\":1,\"1768\":1}}],[\"runnable接口的run函数\",{\"0\":{\"2369\":1}}],[\"runnable接口创建多线程的步骤\",{\"0\":{\"1739\":1}}],[\"runnable接口是创建多线程的方式之一\",{\"1\":{\"1738\":1}}],[\"runnable接口\",{\"0\":{\"1738\":1}}],[\"runnable\",{\"1\":{\"1716\":2,\"1740\":1,\"1747\":1,\"1757\":1,\"1760\":1,\"1768\":1,\"1784\":1,\"1795\":1,\"1804\":1,\"1814\":1,\"1817\":1,\"2369\":3}}],[\"running\",{\"1\":{\"288\":2,\"290\":2,\"309\":2,\"3305\":1,\"3479\":1}}],[\"runtimeexception类作为参数\",{\"1\":{\"1586\":1}}],[\"runtimeexception类及它的子类都是运行时异常\",{\"1\":{\"1573\":1}}],[\"runtimeexception\",{\"1\":{\"749\":1,\"756\":1,\"1571\":1,\"1608\":2,\"1609\":1,\"1905\":1,\"1906\":1,\"1936\":1}}],[\"runtime\",{\"1\":{\"347\":1,\"1024\":1,\"1654\":2,\"1657\":1,\"1659\":1,\"1663\":1,\"1673\":1,\"1674\":1,\"1680\":1,\"2820\":1}}],[\"run\",{\"1\":{\"127\":1,\"128\":2,\"164\":1,\"197\":1,\"259\":3,\"320\":1,\"493\":1,\"498\":1,\"555\":1,\"1720\":2,\"1724\":1,\"1727\":1,\"1728\":1,\"1729\":1,\"1737\":1,\"1739\":1,\"1740\":2,\"1749\":1,\"1757\":1,\"1759\":1,\"1760\":1,\"1765\":1,\"1768\":1,\"1784\":1,\"1795\":2,\"1804\":1,\"1817\":1,\"2369\":3,\"2746\":1,\"2751\":1,\"2753\":1,\"3305\":3,\"3328\":1}}],[\"reconfig\",{\"1\":{\"3675\":2,\"3679\":1,\"3689\":1}}],[\"recall\",{\"1\":{\"3462\":1}}],[\"received\",{\"1\":{\"3110\":1,\"3314\":1,\"3347\":1}}],[\"receive\",{\"1\":{\"455\":1,\"2232\":1,\"2233\":1}}],[\"receiveandconvert\",{\"0\":{\"454\":1},\"1\":{\"452\":1}}],[\"re\",{\"1\":{\"3305\":1}}],[\"releases\",{\"1\":{\"3478\":1}}],[\"relocating\",{\"1\":{\"3278\":1,\"3279\":1,\"3280\":1,\"3378\":1,\"3380\":1}}],[\"relation\",{\"1\":{\"3142\":1,\"3160\":1,\"3164\":1,\"3191\":1,\"3249\":1}}],[\"relational\",{\"0\":{\"2594\":1}}],[\"req2\",{\"1\":{\"2871\":1,\"2872\":1}}],[\"req1\",{\"1\":{\"2862\":1}}],[\"req\",{\"1\":{\"2801\":1,\"2812\":4,\"2814\":5,\"2837\":1,\"2862\":6,\"2872\":7,\"2873\":3,\"2900\":1,\"2934\":1,\"2938\":1,\"3046\":1,\"3047\":2,\"3062\":1}}],[\"requset\",{\"1\":{\"2900\":1}}],[\"requestoptions\",{\"1\":{\"3209\":1,\"3211\":1,\"3212\":1,\"3214\":1,\"3217\":1,\"3218\":1,\"3220\":1,\"3221\":1,\"3225\":1,\"3226\":1,\"3227\":1,\"3231\":1,\"3234\":1,\"3237\":1,\"3240\":1,\"3242\":1,\"3244\":1,\"3249\":1,\"3253\":1}}],[\"requestinitialized\",{\"1\":{\"2964\":1}}],[\"request就销毁\",{\"1\":{\"2922\":1}}],[\"request域对象\",{\"0\":{\"2921\":1}}],[\"request域\",{\"1\":{\"2901\":1}}],[\"requestdestroyed\",{\"1\":{\"2964\":1}}],[\"requestdemo2\",{\"1\":{\"2872\":1}}],[\"requestdemo1\",{\"1\":{\"2862\":1,\"2873\":1}}],[\"requestdispatcher\",{\"1\":{\"2900\":1}}],[\"request参数处理\",{\"0\":{\"2864\":1}}],[\"requests\",{\"1\":{\"2850\":1,\"3154\":1}}],[\"requesturi\",{\"1\":{\"2846\":2}}],[\"requesturl\",{\"1\":{\"2846\":2}}],[\"requestfacade\",{\"0\":{\"2837\":1},\"1\":{\"2837\":1}}],[\"request的继承体系为servletrequest\",{\"1\":{\"2838\":1}}],[\"request的继承体系\",{\"0\":{\"2836\":1}}],[\"request的作用\",{\"0\":{\"2832\":1}}],[\"request和response也存在自己的继承体系\",{\"1\":{\"2835\":1}}],[\"request和response对象是由服务器创建的\",{\"1\":{\"2830\":1}}],[\"request继承体系\",{\"0\":{\"2834\":1}}],[\"request对象在获取请求参数前先修改编码\",{\"1\":{\"2878\":1}}],[\"request对象为我们提供了如下方法\",{\"1\":{\"2869\":1}}],[\"request对象内部提供了更加强大的方法\",{\"1\":{\"2863\":1}}],[\"request对象被销毁后\",{\"1\":{\"2859\":1}}],[\"request对象提供了如下两种方式来获取其中的数据\",{\"1\":{\"2853\":1}}],[\"request对象都提供了对应的api方法来获取\",{\"1\":{\"2844\":1}}],[\"request对象是用来封装请求数据的对象\",{\"1\":{\"2832\":1}}],[\"request对象是来获取请求消息\",{\"1\":{\"2830\":1}}],[\"request对象中封装请求消息数据\",{\"1\":{\"2831\":1}}],[\"request是请求对象\",{\"1\":{\"2830\":1}}],[\"request\",{\"0\":{\"2842\":1,\"2898\":1},\"1\":{\"2779\":1,\"2814\":3,\"2846\":10,\"2849\":3,\"2850\":2,\"2858\":2,\"2871\":1,\"2873\":1,\"2878\":2,\"2880\":1,\"2888\":1,\"2900\":1,\"2903\":6,\"2909\":1,\"2910\":1,\"2916\":1,\"2923\":1,\"2930\":2,\"2942\":1,\"2945\":2,\"2950\":2,\"2951\":1,\"3043\":1,\"3062\":1,\"3068\":1,\"3209\":2,\"3211\":2,\"3212\":2,\"3214\":4,\"3217\":4,\"3218\":3,\"3220\":3,\"3221\":3,\"3225\":3,\"3226\":4,\"3227\":4,\"3228\":1,\"3231\":4,\"3234\":4,\"3236\":1,\"3237\":4,\"3239\":1,\"3240\":4,\"3242\":4,\"3244\":4,\"3248\":1,\"3249\":4,\"3252\":1,\"3253\":4}}],[\"requestbody\",{\"1\":{\"640\":2,\"641\":1,\"647\":2}}],[\"requestmapping\",{\"1\":{\"109\":1,\"288\":1,\"290\":1,\"309\":1,\"342\":1,\"446\":1,\"473\":1,\"640\":1,\"647\":1}}],[\"requires\",{\"1\":{\"3355\":1,\"3718\":1}}],[\"required\",{\"1\":{\"3029\":2,\"3267\":1,\"3503\":1}}],[\"required>\",{\"1\":{\"3025\":1}}],[\"require\",{\"1\":{\"172\":1,\"3307\":1,\"3327\":1,\"3355\":1}}],[\"rewritebatchedstatements=true\",{\"1\":{\"2623\":1,\"2673\":1}}],[\"reachable\",{\"1\":{\"2196\":2}}],[\"real\",{\"1\":{\"1817\":4}}],[\"readanydatabase\",{\"1\":{\"3703\":1,\"3704\":1}}],[\"readable\",{\"1\":{\"812\":1}}],[\"readwriteanydatabase\",{\"1\":{\"3703\":1,\"3704\":1}}],[\"readwrite\",{\"1\":{\"3701\":1,\"3703\":1,\"3704\":1,\"3711\":1,\"3712\":1}}],[\"readconcernmajorityoptime\",{\"1\":{\"3670\":1}}],[\"readchar\",{\"1\":{\"2124\":1}}],[\"ready\",{\"1\":{\"3563\":1,\"3656\":1}}],[\"readme\",{\"0\":{\"2189\":1,\"2745\":1}}],[\"readobject\",{\"0\":{\"2148\":1},\"1\":{\"2148\":1,\"2152\":1,\"2157\":2}}],[\"readfully\",{\"1\":{\"2124\":1}}],[\"readfloat\",{\"1\":{\"2124\":1}}],[\"readutf\",{\"1\":{\"2124\":1,\"2127\":1}}],[\"readint\",{\"1\":{\"2124\":1,\"2127\":1}}],[\"readlong\",{\"1\":{\"2124\":1}}],[\"readline是一直等待输入的\",{\"1\":{\"2082\":1}}],[\"readline\",{\"0\":{\"829\":1,\"2082\":1},\"1\":{\"829\":2,\"2082\":3,\"2118\":1,\"2858\":1,\"2862\":1}}],[\"readshort\",{\"1\":{\"2124\":1}}],[\"readdouble\",{\"1\":{\"2124\":1}}],[\"readdata\",{\"1\":{\"813\":4}}],[\"readbyte\",{\"1\":{\"2124\":1}}],[\"readboolean\",{\"1\":{\"2124\":1,\"2127\":1}}],[\"read方法\",{\"1\":{\"2070\":1}}],[\"readerres\",{\"1\":{\"813\":2}}],[\"reader\",{\"0\":{\"812\":1,\"2031\":1,\"2033\":1},\"1\":{\"812\":2,\"813\":5,\"814\":5,\"819\":2,\"2025\":1,\"2031\":1,\"2078\":2,\"2094\":1,\"2862\":2}}],[\"read\",{\"0\":{\"813\":1,\"814\":1,\"818\":1,\"2049\":1,\"2098\":1},\"1\":{\"800\":1,\"813\":5,\"814\":7,\"818\":2,\"1583\":2,\"1592\":2,\"1600\":2,\"2049\":1,\"2052\":2,\"2053\":2,\"2065\":1,\"2071\":1,\"2084\":2,\"2101\":1,\"2106\":1,\"2136\":1,\"2225\":1,\"2613\":1,\"2638\":3,\"2639\":1,\"2894\":1,\"3701\":1,\"3703\":1,\"3704\":1}}],[\"reintyranttest\",{\"1\":{\"1784\":1}}],[\"reentrantlock\",{\"1\":{\"1780\":3,\"1781\":1,\"1784\":3}}],[\"reentrantlock类\",{\"0\":{\"1780\":1}}],[\"rentention\",{\"1\":{\"1658\":1}}],[\"renameto\",{\"0\":{\"807\":1},\"1\":{\"807\":2}}],[\"retry\",{\"1\":{\"3413\":1}}],[\"retries\",{\"1\":{\"3154\":1}}],[\"retrival\",{\"1\":{\"2642\":1}}],[\"retentionpolicy\",{\"0\":{\"1654\":1},\"1\":{\"1650\":2,\"1652\":2,\"1654\":4,\"1657\":2,\"1659\":3,\"1663\":1,\"1673\":1,\"1674\":1,\"1675\":1,\"1680\":2,\"2820\":1}}],[\"retention\",{\"0\":{\"1657\":1},\"1\":{\"1638\":1,\"1656\":1,\"1657\":2,\"1663\":1,\"1673\":1,\"1674\":1,\"1675\":1,\"1680\":2,\"2820\":1}}],[\"retainall\",{\"0\":{\"914\":1},\"1\":{\"914\":2}}],[\"return必须省略\",{\"1\":{\"2366\":1}}],[\"return也可以省略\",{\"1\":{\"2366\":1}}],[\"returnval\",{\"1\":{\"2311\":2}}],[\"returnvalue\",{\"1\":{\"2311\":2,\"2343\":2,\"2349\":2}}],[\"return终止了该代码块\",{\"1\":{\"1774\":1}}],[\"return关键字后面不可以声明执行语句\",{\"1\":{\"1278\":1}}],[\"return关键字\",{\"0\":{\"1278\":1},\"1\":{\"2364\":1}}],[\"return关键字来返回指定类型的变量或常量\",{\"1\":{\"1277\":1}}],[\"return直接结束整个方法\",{\"1\":{\"1196\":1}}],[\"returntype\",{\"1\":{\"870\":2}}],[\"return\",{\"0\":{\"1196\":1},\"1\":{\"109\":1,\"202\":1,\"204\":1,\"212\":1,\"288\":1,\"290\":1,\"309\":1,\"418\":4,\"444\":3,\"446\":1,\"452\":1,\"455\":1,\"471\":3,\"472\":2,\"473\":2,\"510\":1,\"513\":1,\"514\":4,\"523\":1,\"525\":2,\"536\":3,\"540\":2,\"541\":1,\"543\":1,\"626\":1,\"636\":5,\"640\":6,\"645\":1,\"647\":6,\"746\":4,\"749\":5,\"756\":1,\"757\":3,\"803\":1,\"804\":1,\"805\":1,\"893\":3,\"899\":1,\"932\":1,\"1060\":4,\"1191\":1,\"1277\":3,\"1278\":1,\"1280\":1,\"1283\":2,\"1304\":1,\"1354\":1,\"1368\":1,\"1428\":7,\"1432\":1,\"1434\":1,\"1458\":3,\"1481\":2,\"1488\":1,\"1489\":1,\"1534\":1,\"1591\":3,\"1616\":1,\"1621\":3,\"1769\":2,\"1810\":1,\"1905\":2,\"1906\":1,\"1936\":1,\"1981\":1,\"2252\":1,\"2253\":1,\"2255\":3,\"2342\":1,\"2343\":1,\"2349\":1,\"2376\":1,\"2377\":2,\"2469\":3,\"2475\":1,\"2575\":1,\"2600\":2,\"2603\":2,\"2653\":8,\"2656\":4,\"2675\":1,\"2690\":2,\"2803\":1,\"2804\":1}}],[\"reverse\",{\"0\":{\"704\":1,\"930\":1},\"1\":{\"704\":2,\"930\":2}}],[\"regular\",{\"1\":{\"3547\":1}}],[\"regex\",{\"1\":{\"679\":1,\"680\":1,\"681\":1,\"682\":2,\"984\":2,\"986\":1,\"987\":2,\"989\":3,\"990\":3,\"991\":3,\"992\":2,\"996\":4,\"998\":2,\"999\":2,\"1000\":5,\"1001\":2}}],[\"regist\",{\"1\":{\"1609\":2}}],[\"registrar\",{\"1\":{\"563\":1,\"566\":1}}],[\"registry\",{\"1\":{\"527\":2,\"530\":2}}],[\"registerdriver\",{\"1\":{\"2547\":1}}],[\"registerbeandefinition\",{\"1\":{\"527\":1,\"530\":1}}],[\"registerbeandefinitions\",{\"1\":{\"527\":1}}],[\"registerbean\",{\"1\":{\"520\":1,\"521\":3}}],[\"register\",{\"1\":{\"520\":1,\"535\":1}}],[\"repair\",{\"1\":{\"3756\":1}}],[\"rep\",{\"1\":{\"3127\":1}}],[\"reponse的继承体系和request的继承体系也非常相似\",{\"1\":{\"2839\":1}}],[\"repository\",{\"1\":{\"117\":1,\"508\":1}}],[\"repeatable\",{\"1\":{\"1638\":1,\"1668\":2,\"2638\":1}}],[\"representable\",{\"1\":{\"782\":1}}],[\"replset\",{\"1\":{\"3666\":1}}],[\"replsetname\",{\"1\":{\"3656\":1}}],[\"replication\",{\"1\":{\"3656\":1}}],[\"replicate\",{\"1\":{\"3645\":1}}],[\"replica\",{\"1\":{\"3518\":2,\"3538\":1,\"3639\":1}}],[\"replicaset\",{\"0\":{\"3734\":1}}],[\"replicasetid\",{\"1\":{\"3667\":1}}],[\"replicas\",{\"0\":{\"3368\":1},\"1\":{\"423\":1,\"3124\":1,\"3283\":1,\"3379\":1,\"3381\":1,\"3393\":1,\"3518\":3}}],[\"repl工具\",{\"0\":{\"2511\":1}}],[\"replacefirst\",{\"0\":{\"680\":1,\"990\":1},\"1\":{\"680\":2,\"990\":2}}],[\"replaceall\",{\"0\":{\"679\":1,\"938\":1,\"989\":1},\"1\":{\"679\":2,\"938\":2,\"989\":2}}],[\"replacement\",{\"1\":{\"678\":1,\"679\":1,\"680\":1,\"989\":1,\"990\":1}}],[\"replace\",{\"0\":{\"676\":1,\"677\":1,\"678\":1,\"702\":1},\"1\":{\"677\":2,\"678\":2,\"702\":2}}],[\"remotetest\",{\"1\":{\"404\":1}}],[\"remote\",{\"0\":{\"404\":1},\"1\":{\"488\":1,\"3488\":2}}],[\"removeattribute\",{\"1\":{\"2902\":1,\"2926\":1,\"2938\":1,\"3066\":1}}],[\"removeall\",{\"0\":{\"913\":1},\"1\":{\"913\":2}}],[\"remove方法用来在遍历的时候\",{\"1\":{\"926\":1,\"1848\":1}}],[\"remove等操作都是默认抛出异常的\",{\"1\":{\"897\":1}}],[\"remove\",{\"0\":{\"912\":1,\"926\":1,\"950\":1,\"961\":1,\"1848\":1},\"1\":{\"402\":1,\"404\":1,\"912\":2,\"926\":3,\"950\":5,\"961\":3,\"1035\":1,\"1848\":2,\"3600\":2,\"3601\":2}}],[\"refresh\",{\"0\":{\"3516\":1},\"1\":{\"3449\":1,\"3452\":2,\"3453\":2,\"3454\":2,\"3513\":1,\"3516\":4,\"3527\":2,\"3571\":1}}],[\"reflect包的方法对类进行反射调用\",{\"1\":{\"2277\":1}}],[\"reflectionstudy\",{\"1\":{\"2266\":1,\"2267\":1,\"2268\":2,\"2269\":2,\"2285\":1,\"2290\":2,\"2292\":3,\"2296\":1}}],[\"reflection\",{\"0\":{\"2246\":1},\"1\":{\"2246\":1}}],[\"reflect\",{\"1\":{\"1345\":1,\"1680\":1,\"2250\":3}}],[\"references\",{\"1\":{\"2396\":1}}],[\"reference类型\",{\"1\":{\"1546\":1}}],[\"reference\",{\"1\":{\"1075\":1}}],[\"ref=\",{\"1\":{\"308\":9}}],[\"ref\",{\"1\":{\"308\":9}}],[\"redeploy\",{\"1\":{\"2750\":1}}],[\"reduce模式\",{\"0\":{\"2489\":1}}],[\"reduce\",{\"0\":{\"2487\":1,\"2488\":1},\"1\":{\"2487\":4,\"2488\":4,\"2489\":5}}],[\"redirect与forward的区别\",{\"0\":{\"2913\":1}}],[\"redirect\",{\"1\":{\"2905\":1,\"2913\":1}}],[\"redie缓存没有专门的配置文件\",{\"1\":{\"483\":1}}],[\"redis主要把数据存储在内存中\",{\"1\":{\"3550\":1}}],[\"redisfactorybean\",{\"1\":{\"514\":1}}],[\"redis的键名默认由两部分组成\",{\"1\":{\"485\":1}}],[\"redis的\",{\"0\":{\"485\":1}}],[\"redis缓存用法\",{\"0\":{\"484\":1}}],[\"redis也是springboot整合的缓存技术\",{\"1\":{\"481\":1}}],[\"redis客户端选择\",{\"0\":{\"381\":1}}],[\"redis内部不支持java对象的储存格式\",{\"1\":{\"379\":1}}],[\"redistest\",{\"1\":{\"379\":1}}],[\"redistemplate\",{\"0\":{\"379\":1},\"1\":{\"379\":4}}],[\"redis基础配置\",{\"0\":{\"378\":1}}],[\"redis<\",{\"1\":{\"377\":1,\"482\":1,\"602\":1,\"612\":1}}],[\"redis或mongodb\",{\"1\":{\"348\":1}}],[\"redis\",{\"0\":{\"88\":1,\"376\":1,\"481\":1,\"602\":1,\"3549\":1},\"1\":{\"10\":1,\"45\":1,\"53\":1,\"378\":1,\"383\":1,\"384\":1,\"464\":1,\"483\":5,\"488\":1,\"489\":1,\"514\":4,\"612\":1,\"3551\":1}}],[\"red\",{\"1\":{\"299\":1,\"3127\":1,\"3193\":1,\"3252\":1,\"3253\":2,\"3278\":1}}],[\"reset\",{\"1\":{\"3305\":2,\"3315\":1,\"3328\":2,\"3343\":1}}],[\"reset异常\",{\"1\":{\"420\":1}}],[\"resp\",{\"1\":{\"2812\":4,\"2837\":1,\"2862\":3,\"2872\":3,\"2873\":3,\"2900\":1,\"2930\":1,\"2934\":1,\"2938\":1,\"3046\":1,\"3047\":1,\"3062\":1}}],[\"responsedemo2两个类都被访问到了\",{\"1\":{\"2911\":1}}],[\"responsedemo2\",{\"0\":{\"2910\":1},\"1\":{\"2910\":2,\"2911\":1}}],[\"responsedemo1类将请求转发给responsedemo2\",{\"1\":{\"2908\":1}}],[\"responsedemo1\",{\"0\":{\"2909\":1},\"1\":{\"2888\":1,\"2909\":2,\"2911\":2}}],[\"response重定向\",{\"1\":{\"2905\":1}}],[\"response响应字符数据\",{\"1\":{\"2886\":1}}],[\"response对象就会被销毁掉\",{\"1\":{\"2891\":1}}],[\"response对象提供了不同的方法还出了这三种响应内容\",{\"1\":{\"2882\":1}}],[\"response对象是用来做http响应的\",{\"1\":{\"2882\":1}}],[\"response对象是用来封装响应数据的对象\",{\"1\":{\"2833\":1}}],[\"response对象是来设置响应消息\",{\"1\":{\"2830\":1}}],[\"responsefacade\",{\"0\":{\"2841\":1}}],[\"response继承体系\",{\"0\":{\"2839\":1}}],[\"response是响应对象\",{\"1\":{\"2830\":1}}],[\"response的作用\",{\"0\":{\"2833\":1}}],[\"response的返回结果\",{\"1\":{\"432\":1}}],[\"response的打印结果\",{\"1\":{\"428\":1,\"429\":1}}],[\"response打印结果\",{\"1\":{\"431\":1}}],[\"response\",{\"0\":{\"2881\":1,\"2882\":1,\"2905\":1},\"1\":{\"422\":3,\"423\":2,\"424\":2,\"425\":4,\"428\":2,\"429\":2,\"430\":3,\"431\":2,\"432\":6,\"2779\":1,\"2814\":1,\"2846\":2,\"2849\":1,\"2850\":1,\"2858\":1,\"2887\":1,\"2888\":2,\"2889\":2,\"2890\":2,\"2893\":1,\"2894\":1,\"2895\":1,\"2896\":2,\"2900\":1,\"2903\":3,\"2907\":3,\"2909\":3,\"2910\":1,\"2916\":1,\"2942\":1,\"2945\":2,\"3042\":1,\"3046\":1,\"3052\":2,\"3053\":1,\"3054\":1,\"3070\":1,\"3209\":2,\"3211\":1,\"3212\":2,\"3214\":2,\"3217\":2,\"3218\":2,\"3220\":2,\"3221\":2,\"3225\":2,\"3226\":2,\"3227\":2,\"3231\":2,\"3234\":2,\"3237\":2,\"3240\":2,\"3242\":2,\"3244\":2,\"3249\":2,\"3253\":2}}],[\"res4\",{\"1\":{\"912\":2}}],[\"res3\",{\"1\":{\"911\":2}}],[\"res\",{\"1\":{\"750\":2,\"761\":2,\"773\":2,\"782\":2,\"785\":2,\"797\":2,\"798\":2,\"799\":2,\"800\":2,\"801\":2,\"803\":2,\"804\":2,\"805\":2,\"807\":2,\"896\":2,\"914\":2,\"924\":2,\"946\":2,\"948\":2,\"949\":2,\"968\":2,\"989\":2,\"990\":2,\"991\":2,\"998\":2,\"1000\":2,\"1001\":2,\"2225\":2,\"2801\":1,\"2814\":4}}],[\"resolve\",{\"1\":{\"2166\":1}}],[\"resolved\",{\"1\":{\"733\":1,\"734\":1}}],[\"resourceloaderaware\",{\"1\":{\"567\":1}}],[\"resource进行注入\",{\"1\":{\"393\":1}}],[\"resource\",{\"1\":{\"262\":1,\"393\":1,\"403\":1,\"404\":1,\"406\":1,\"407\":1,\"408\":1,\"409\":1,\"410\":1,\"418\":2,\"419\":1,\"422\":1,\"423\":1,\"424\":1,\"425\":1,\"428\":1,\"429\":1,\"430\":1,\"431\":1,\"432\":1,\"445\":1,\"471\":1,\"473\":1,\"478\":1,\"2236\":1,\"2243\":3,\"2743\":1,\"2750\":4,\"3698\":2}}],[\"resources目录下的static目录中\",{\"1\":{\"648\":1}}],[\"resources\",{\"1\":{\"193\":2,\"262\":1,\"307\":1,\"586\":1,\"589\":1}}],[\"res2\",{\"1\":{\"652\":2,\"964\":2,\"965\":2,\"967\":2}}],[\"res1\",{\"1\":{\"652\":2,\"783\":2,\"910\":2,\"964\":2,\"965\":2,\"967\":2}}],[\"resultsethandler<customer>\",{\"1\":{\"2690\":2}}],[\"resultsethandler<t>\",{\"1\":{\"2683\":2}}],[\"resultsethandler接口及实现类\",{\"0\":{\"2684\":1}}],[\"resultsethandler\",{\"1\":{\"2681\":1,\"2683\":1,\"2684\":1}}],[\"resultsetmetadata\",{\"1\":{\"2600\":2,\"2603\":2,\"2653\":4}}],[\"resultsetmetadate\",{\"1\":{\"2592\":1}}],[\"resultsetmetadate对象的常用方法\",{\"0\":{\"2593\":1}}],[\"resultsetmetadate对象\",{\"0\":{\"2592\":1}}],[\"resultset接口的方法\",{\"0\":{\"2589\":1}}],[\"resultset介绍\",{\"0\":{\"2587\":1}}],[\"resultset对象\",{\"0\":{\"2585\":1}}],[\"resultset\",{\"1\":{\"2571\":1,\"2586\":1,\"2587\":2,\"2588\":2,\"2590\":1,\"2591\":1,\"2592\":2,\"2593\":1,\"2597\":9,\"2600\":1,\"2603\":1,\"2613\":1,\"2652\":1,\"2653\":3,\"2683\":2,\"2684\":2,\"2690\":1}}],[\"result5\",{\"1\":{\"913\":1}}],[\"result3\",{\"1\":{\"810\":2}}],[\"result2\",{\"1\":{\"810\":2,\"2377\":2}}],[\"result字段也变成了updated\",{\"1\":{\"428\":1}}],[\"result\",{\"1\":{\"404\":2,\"409\":2,\"428\":1,\"429\":1,\"431\":1,\"782\":1,\"810\":2,\"909\":2,\"1139\":4,\"2377\":2,\"2683\":1,\"3135\":1,\"3144\":1,\"3146\":1,\"3149\":1}}],[\"restore\",{\"1\":{\"3703\":1,\"3704\":1}}],[\"restful\",{\"1\":{\"3108\":1,\"3111\":1}}],[\"restriction>\",{\"1\":{\"3029\":3}}],[\"restriction\",{\"1\":{\"3029\":3}}],[\"restclientbuilder\",{\"1\":{\"418\":2,\"3206\":1,\"3209\":1,\"3211\":1,\"3212\":1,\"3214\":1,\"3217\":1,\"3218\":1,\"3220\":1,\"3221\":1,\"3225\":1,\"3226\":1,\"3227\":1,\"3231\":1,\"3234\":1,\"3237\":1,\"3240\":1,\"3242\":1,\"3244\":1,\"3249\":1,\"3253\":1}}],[\"restclient\",{\"1\":{\"418\":3,\"3206\":1,\"3209\":1,\"3211\":1,\"3212\":1,\"3214\":1,\"3217\":1,\"3218\":1,\"3220\":1,\"3221\":1,\"3225\":1,\"3226\":1,\"3227\":1,\"3231\":1,\"3234\":1,\"3237\":1,\"3240\":1,\"3242\":1,\"3244\":1,\"3249\":1,\"3253\":1}}],[\"restclienttransport\",{\"1\":{\"418\":2}}],[\"restcontrolleradvice\",{\"1\":{\"645\":1}}],[\"restcontroller\",{\"1\":{\"109\":1,\"288\":1,\"290\":1,\"309\":1,\"446\":1,\"473\":1,\"647\":1}}],[\"rest\",{\"1\":{\"418\":1,\"3205\":1,\"3298\":1}}],[\"resthighlevelclient\",{\"1\":{\"414\":1,\"3206\":2,\"3209\":2,\"3211\":2,\"3212\":2,\"3214\":2,\"3217\":2,\"3218\":2,\"3220\":2,\"3221\":2,\"3225\":2,\"3226\":2,\"3227\":2,\"3231\":2,\"3234\":2,\"3237\":2,\"3240\":2,\"3242\":2,\"3244\":2,\"3249\":2,\"3253\":2}}],[\"restlowlevelclient\",{\"1\":{\"414\":1}}],[\"restart\",{\"0\":{\"182\":1},\"1\":{\"194\":1,\"196\":1,\"197\":1,\"2750\":1,\"3328\":1}}],[\"restart类加载器执行\",{\"1\":{\"182\":1}}],[\"restart类加载器\",{\"1\":{\"181\":1}}],[\"e676dd308382\",{\"1\":{\"3712\":1}}],[\"ec2\",{\"1\":{\"3348\":1}}],[\"eclipse\",{\"1\":{\"578\":1}}],[\"ef\",{\"1\":{\"3342\":1,\"3563\":1,\"3659\":1}}],[\"eyj2zxiioii4ljcumcisimfkcii6wyixnziumtyumc45ojkymdaixswizmdyijoimduwzjcyymnkmjbhn2e1m2fjnjhjyjm3njyzyzm3zdmxogyxztcxywyyyzhjothimtzlnthky2rmytgzota5yyisimtlesi6ilndtmnhb2tctwlmrhlaavvyutngonzibmjuduflujhtrjz1axvhu0xztleifq==\",{\"1\":{\"3328\":1}}],[\"eyj2zxiioii4ljcumcisimfkcii6wyixnziumtyumc45ojkymdaixswizmdyijoimzbiotiwymiwmzqyotk3m2i2mdvimdm1yze0ngy3yzuxyzdkzjmyn2vjmzk2zjg1ztlkyjnhzdgyotizmtu3zcisimtlesi6imdydtzfswtcb24xmuuyvjlftmjlom5xqvr4nwwxuuptdwn1endfewg1aleifq==\",{\"1\":{\"3305\":1}}],[\"eyj2zxiioii4ljcumcisimfkcii6wyixnziumtyumc45ojkymdaixswizmdyijoimzbiotiwymiwmzqyotk3m2i2mdvimdm1yze0ngy3yzuxyzdkzjmyn2vjmzk2zjg1ztlkyjnhzdgyotizmtu3zcisimtlesi6imczdtzfswtcb24xmuuyvjlftmjoojfjemlfr2fdvfjtawswq1y5tzjjx1eifq==\",{\"1\":{\"3305\":1}}],[\"ea87\",{\"1\":{\"3712\":1}}],[\"each\",{\"1\":{\"3267\":1,\"3503\":1}}],[\"eat\",{\"1\":{\"1258\":1,\"1259\":1,\"1497\":4,\"1526\":1,\"2344\":1}}],[\"e3\",{\"1\":{\"3054\":1}}],[\"e3>\",{\"1\":{\"1963\":1}}],[\"edit\",{\"1\":{\"2746\":2}}],[\"edu\",{\"1\":{\"308\":1}}],[\"em>\",{\"1\":{\"3193\":1}}],[\"email\",{\"1\":{\"2567\":1,\"2573\":1,\"2597\":3,\"2599\":4,\"2601\":2,\"2604\":1,\"2612\":1,\"2613\":4,\"2656\":4,\"2686\":1,\"2688\":1,\"2689\":1,\"2690\":4,\"3477\":1}}],[\"emps\",{\"1\":{\"3403\":1}}],[\"emp2\",{\"1\":{\"2422\":2}}],[\"emp1\",{\"1\":{\"2421\":2}}],[\"emp\",{\"1\":{\"2405\":1,\"2406\":1}}],[\"employees\",{\"1\":{\"2485\":1}}],[\"employeedata\",{\"1\":{\"2458\":1,\"2459\":1,\"2460\":1,\"2461\":1,\"2477\":1,\"2478\":1,\"2480\":1,\"2481\":1}}],[\"employee类的对象\",{\"1\":{\"2457\":1,\"2462\":1}}],[\"employee类中的方法\",{\"1\":{\"2407\":1}}],[\"employee>\",{\"1\":{\"2424\":1,\"2425\":1,\"2427\":1,\"2428\":1}}],[\"employee\",{\"1\":{\"2405\":2,\"2414\":3,\"2416\":1,\"2421\":1,\"2422\":1,\"2424\":1,\"2425\":1,\"2427\":1,\"2428\":1,\"2480\":1,\"2481\":1,\"2484\":1,\"2489\":1}}],[\"empty\",{\"0\":{\"2501\":1},\"1\":{\"1680\":3,\"2501\":2,\"2502\":1,\"2992\":1}}],[\"e1\",{\"1\":{\"2484\":2,\"2635\":2}}],[\"eof\",{\"1\":{\"2214\":1}}],[\"e2\",{\"1\":{\"1963\":1,\"2484\":2}}],[\"evaluate\",{\"1\":{\"1500\":2}}],[\"event\",{\"1\":{\"2968\":2}}],[\"even\",{\"1\":{\"784\":1}}],[\"ee\",{\"1\":{\"1011\":1,\"1510\":1}}],[\"eq表示计数准确\",{\"1\":{\"3164\":1}}],[\"eq\",{\"1\":{\"997\":1,\"3142\":1,\"3160\":1,\"3164\":1,\"3191\":1,\"3249\":1}}],[\"equals为true\",{\"1\":{\"1895\":1}}],[\"equals返回false\",{\"1\":{\"1889\":1}}],[\"equals是一个方法\",{\"1\":{\"1427\":1}}],[\"equals的具体使用要看自定义类里有没有\",{\"1\":{\"1429\":1}}],[\"equals的用法\",{\"0\":{\"1427\":1}}],[\"equals的不区分大小写版本\",{\"1\":{\"653\":1}}],[\"equals与\",{\"0\":{\"1425\":1}}],[\"equalsignorecase\",{\"0\":{\"653\":1},\"1\":{\"653\":2,\"2118\":2}}],[\"equals\",{\"0\":{\"652\":1,\"896\":1,\"915\":1,\"968\":1,\"1896\":1},\"1\":{\"471\":1,\"620\":1,\"647\":2,\"652\":3,\"653\":1,\"896\":2,\"915\":2,\"968\":2,\"1133\":1,\"1424\":1,\"1427\":1,\"1428\":12,\"1429\":1,\"1430\":1,\"1652\":1,\"1848\":1,\"1885\":1,\"1897\":1,\"1912\":4,\"2459\":1,\"2814\":2,\"2862\":2,\"3047\":1}}],[\"e>\",{\"1\":{\"906\":1}}],[\"epochmilli\",{\"1\":{\"727\":1}}],[\"erlang\",{\"1\":{\"2247\":1}}],[\"erver\",{\"1\":{\"617\":1}}],[\"errortest\",{\"1\":{\"1560\":1}}],[\"error和exception\",{\"1\":{\"1559\":1}}],[\"error\",{\"0\":{\"1560\":1},\"1\":{\"288\":2,\"290\":2,\"292\":1,\"308\":10,\"309\":2,\"358\":2,\"418\":1,\"1060\":1,\"1571\":1,\"2950\":1,\"3191\":1,\"3718\":1,\"3757\":2}}],[\"eternal=\",{\"1\":{\"478\":2}}],[\"ehcaceh提供了更强大的缓存技术\",{\"1\":{\"478\":1}}],[\"ehcache>\",{\"1\":{\"478\":1}}],[\"ehcache<\",{\"1\":{\"476\":1}}],[\"ehcache也是springboot整合的缓存技术\",{\"1\":{\"475\":1}}],[\"ehcache\",{\"0\":{\"475\":1,\"478\":1},\"1\":{\"464\":1,\"477\":3,\"478\":4,\"489\":1}}],[\"e\",{\"1\":{\"418\":2,\"430\":2,\"536\":1,\"655\":1,\"673\":2,\"674\":4,\"803\":2,\"827\":4,\"905\":2,\"925\":1,\"945\":1,\"946\":3,\"947\":1,\"950\":1,\"951\":2,\"952\":2,\"1403\":4,\"1404\":2,\"1587\":5,\"1591\":2,\"1592\":6,\"1600\":2,\"1609\":2,\"1729\":4,\"1795\":4,\"1804\":2,\"1810\":4,\"1874\":2,\"1958\":3,\"1962\":1,\"1967\":3,\"1968\":3,\"1969\":3,\"1981\":4,\"1982\":1,\"2052\":4,\"2053\":4,\"2064\":4,\"2065\":6,\"2071\":6,\"2082\":4,\"2084\":6,\"2118\":6,\"2121\":2,\"2231\":2,\"2232\":2,\"2415\":1,\"2444\":1,\"2445\":1,\"2458\":2,\"2477\":2,\"2478\":2,\"2479\":2,\"2483\":2,\"2491\":4,\"2573\":6,\"2576\":4,\"2577\":2,\"2581\":2,\"2597\":2,\"2600\":2,\"2603\":2,\"2634\":2,\"2635\":4,\"2653\":10,\"2657\":14,\"2675\":2,\"2676\":2,\"3305\":1,\"3324\":1,\"3592\":2}}],[\"ext\",{\"1\":{\"3488\":4}}],[\"extensible\",{\"1\":{\"3015\":1}}],[\"extension>\",{\"1\":{\"2933\":1}}],[\"extends\",{\"0\":{\"1359\":1,\"1999\":1},\"1\":{\"350\":1,\"374\":1,\"622\":1,\"636\":1,\"637\":2,\"688\":2,\"777\":1,\"778\":1,\"820\":1,\"835\":1,\"860\":1,\"867\":1,\"876\":1,\"902\":1,\"906\":1,\"932\":1,\"934\":3,\"935\":3,\"937\":1,\"942\":1,\"960\":2,\"1360\":2,\"1361\":1,\"1368\":1,\"1376\":1,\"1381\":1,\"1382\":1,\"1384\":1,\"1408\":1,\"1500\":1,\"1509\":1,\"1510\":1,\"1612\":1,\"1652\":1,\"1720\":1,\"1728\":1,\"1729\":1,\"1737\":1,\"1747\":1,\"1971\":2,\"1972\":1,\"1973\":1,\"1974\":1,\"1999\":1,\"2001\":2,\"2076\":1,\"2077\":1,\"2078\":1,\"2079\":1,\"2094\":1,\"2267\":1,\"2448\":1,\"2467\":2,\"2656\":1,\"2812\":1,\"2814\":1,\"2846\":1,\"2862\":1,\"2872\":1,\"2873\":1,\"2888\":1,\"2903\":2,\"2909\":1,\"2910\":1}}],[\"external\",{\"1\":{\"478\":1}}],[\"extern\",{\"1\":{\"418\":1}}],[\"exe命令对某个字节码文件进行解释运行\",{\"1\":{\"2261\":1}}],[\"exe命令以后\",{\"1\":{\"2261\":1}}],[\"exe\",{\"1\":{\"1689\":1}}],[\"executorservice\",{\"1\":{\"1817\":1}}],[\"executors\",{\"0\":{\"1815\":1},\"1\":{\"1815\":4,\"1817\":1}}],[\"executeupdate\",{\"1\":{\"2620\":1,\"2621\":1,\"2653\":1}}],[\"executebatch\",{\"0\":{\"2617\":1},\"1\":{\"2624\":1,\"2625\":1}}],[\"execute是可以执行多条预编译sql语句的\",{\"1\":{\"2571\":1}}],[\"executequery\",{\"1\":{\"2566\":1,\"2586\":2,\"2597\":1,\"2600\":1,\"2603\":1,\"2613\":1,\"2653\":3}}],[\"execute\",{\"0\":{\"2571\":1},\"1\":{\"1814\":1,\"1817\":1,\"2566\":1,\"2571\":1,\"2573\":1,\"2577\":1,\"2581\":1,\"2612\":1,\"2634\":1}}],[\"execute权限\",{\"1\":{\"800\":1}}],[\"executable\",{\"1\":{\"867\":1,\"876\":1}}],[\"executionexception\",{\"1\":{\"1810\":1}}],[\"execution\",{\"1\":{\"574\":1,\"577\":1}}],[\"example\",{\"1\":{\"3267\":1,\"3503\":1}}],[\"examples\",{\"1\":{\"1059\":1}}],[\"exact\",{\"1\":{\"782\":1}}],[\"exited\",{\"1\":{\"3757\":1}}],[\"exiting\",{\"1\":{\"3563\":1,\"3656\":1}}],[\"exit\",{\"0\":{\"882\":1},\"1\":{\"882\":1,\"2118\":2}}],[\"existing\",{\"1\":{\"3298\":1}}],[\"existdocumenttest\",{\"1\":{\"430\":1}}],[\"exists\",{\"0\":{\"799\":1},\"1\":{\"424\":3,\"430\":2,\"799\":2,\"803\":1,\"804\":1,\"805\":1,\"2168\":1}}],[\"explain\",{\"1\":{\"3632\":1,\"3634\":1}}],[\"exploded中的一个\",{\"1\":{\"2766\":1}}],[\"exploded\",{\"1\":{\"2723\":1,\"2747\":1,\"2748\":1,\"2765\":1}}],[\"expression\",{\"1\":{\"3547\":1}}],[\"expose\",{\"1\":{\"3355\":1}}],[\"exposure\",{\"1\":{\"326\":1,\"343\":1,\"345\":1}}],[\"expected=class\",{\"1\":{\"868\":1}}],[\"expansion\",{\"1\":{\"782\":1}}],[\"exp\",{\"1\":{\"769\":5}}],[\"ex\",{\"1\":{\"645\":2}}],[\"excel\",{\"1\":{\"2045\":1}}],[\"exceptionsorter\",{\"1\":{\"2674\":1}}],[\"exceptiontypes\",{\"1\":{\"2296\":6}}],[\"exceptiontest2\",{\"1\":{\"1600\":1}}],[\"exceptiontest\",{\"1\":{\"1587\":1}}],[\"exception会报编译时错误\",{\"1\":{\"1609\":1}}],[\"exceptionhandler\",{\"1\":{\"645\":1}}],[\"exception\",{\"0\":{\"1561\":1},\"1\":{\"350\":1,\"390\":1,\"418\":1,\"422\":1,\"514\":1,\"645\":2,\"873\":2,\"1060\":3,\"1567\":2,\"1571\":2,\"1587\":1,\"1608\":2,\"1609\":3,\"1612\":1,\"1680\":1,\"1810\":1,\"2064\":1,\"2106\":1,\"2231\":1,\"2232\":1,\"2252\":1,\"2253\":1,\"2257\":1,\"2258\":1,\"2547\":1,\"2548\":1,\"2551\":1,\"2573\":1,\"2575\":1,\"2577\":1,\"2581\":1,\"2597\":1,\"2600\":1,\"2603\":1,\"2612\":1,\"2624\":1,\"2634\":1,\"2635\":1,\"2639\":1,\"2653\":3,\"2657\":7,\"2672\":1,\"2675\":1,\"2676\":1,\"2686\":1,\"2687\":1,\"2688\":1,\"2689\":1,\"2690\":1,\"2691\":1,\"2989\":1,\"3210\":2}}],[\"excutorservice\",{\"0\":{\"1814\":1}}],[\"exchange\",{\"1\":{\"444\":2}}],[\"excludes\",{\"1\":{\"3233\":3,\"3234\":2}}],[\"excludefilters\",{\"1\":{\"563\":1,\"568\":1}}],[\"exclude\",{\"1\":{\"194\":1}}],[\"exclusions来实现\",{\"1\":{\"3276\":1}}],[\"exclusions>\",{\"1\":{\"134\":1}}],[\"exclusion>\",{\"1\":{\"134\":1}}],[\"ebank\",{\"1\":{\"267\":1,\"295\":2}}],[\"en\",{\"1\":{\"3352\":1}}],[\"enrollment\",{\"1\":{\"3110\":1,\"3305\":5,\"3307\":1,\"3316\":1,\"3327\":1,\"3328\":5,\"3331\":1,\"3333\":1,\"3337\":1,\"3355\":1}}],[\"enumeration\",{\"1\":{\"3029\":3}}],[\"enumeration<string>\",{\"1\":{\"2850\":2,\"2869\":1}}],[\"enum和class一样可以实现接口\",{\"1\":{\"1630\":1}}],[\"enum使用示例\",{\"0\":{\"1629\":1}}],[\"enum使用说明\",{\"0\":{\"1625\":1}}],[\"enum是所有枚举类的父类\",{\"1\":{\"1627\":1}}],[\"enum的主要方法\",{\"0\":{\"1627\":1}}],[\"enum类\",{\"1\":{\"1625\":1}}],[\"enum关键字是替代class使用的\",{\"1\":{\"1624\":1}}],[\"enum关键字\",{\"0\":{\"1624\":1}}],[\"enum\",{\"0\":{\"1623\":1},\"1\":{\"1543\":1,\"1618\":1,\"1630\":1,\"1653\":2,\"1654\":2,\"2264\":1}}],[\"english\",{\"1\":{\"1259\":1}}],[\"end\",{\"1\":{\"701\":2,\"702\":2,\"1204\":2,\"1499\":2,\"2086\":2,\"2621\":2,\"2624\":2,\"3328\":1,\"3355\":1,\"3473\":4,\"3476\":4,\"3480\":2,\"3482\":5,\"3483\":3,\"3485\":5,\"3489\":2}}],[\"endindex\",{\"1\":{\"669\":2}}],[\"endswith\",{\"0\":{\"661\":1},\"1\":{\"661\":2,\"2166\":1}}],[\"endpoint控制那些端点禁止开放\",{\"1\":{\"343\":1}}],[\"endpoints\",{\"1\":{\"326\":1,\"343\":1,\"345\":1}}],[\"endpoint\",{\"1\":{\"326\":1,\"343\":1,\"345\":1}}],[\"encryption\",{\"1\":{\"3307\":2,\"3327\":2,\"3355\":2}}],[\"encrypted\",{\"1\":{\"3305\":1,\"3307\":2,\"3327\":2,\"3328\":1,\"3355\":2}}],[\"encapsulation\",{\"1\":{\"1251\":1}}],[\"encache在功能上更强大\",{\"1\":{\"479\":1}}],[\"encode\",{\"1\":{\"3054\":1}}],[\"encoder>\",{\"1\":{\"308\":4}}],[\"encoding\",{\"1\":{\"1061\":1,\"2099\":2,\"2850\":1,\"3020\":1}}],[\"encoding=utf\",{\"1\":{\"2875\":1}}],[\"encoding=\",{\"1\":{\"308\":1,\"478\":1,\"506\":1,\"511\":1,\"3019\":1,\"3020\":1,\"3027\":1,\"3488\":1}}],[\"enter\",{\"1\":{\"3296\":2}}],[\"enterprise\",{\"1\":{\"152\":1,\"2731\":1}}],[\"entries\",{\"1\":{\"971\":3}}],[\"entry>\",{\"1\":{\"3488\":4}}],[\"entry<string\",{\"1\":{\"971\":1,\"1958\":3}}],[\"entry<k\",{\"1\":{\"971\":1}}],[\"entry是map接口的内部接口\",{\"1\":{\"971\":1}}],[\"entryset方法得到的是一个嵌套的泛型\",{\"1\":{\"1958\":1}}],[\"entryset集合中的元素都是entry\",{\"1\":{\"971\":1}}],[\"entryset\",{\"0\":{\"971\":1},\"1\":{\"971\":2,\"1928\":1,\"1935\":3,\"1958\":1}}],[\"entry==\",{\"1\":{\"958\":1}}],[\"entry\",{\"1\":{\"958\":1,\"971\":6,\"1918\":1,\"1935\":5,\"1958\":2}}],[\"entity\",{\"1\":{\"589\":1,\"619\":1}}],[\"entityclass\",{\"1\":{\"404\":1,\"406\":1}}],[\"enablesharding\",{\"1\":{\"3701\":1}}],[\"enablescheduling\",{\"1\":{\"498\":2}}],[\"enable\",{\"1\":{\"3110\":1,\"3307\":3,\"3327\":3,\"3355\":3}}],[\"enableautoconfiguration\",{\"0\":{\"565\":1},\"1\":{\"563\":1}}],[\"enableadminserver\",{\"1\":{\"320\":2}}],[\"enablecaching\",{\"1\":{\"467\":1}}],[\"enableconfigurationproperties注解也是用来加载bean的\",{\"1\":{\"554\":1}}],[\"enableconfigurationproperties\",{\"0\":{\"206\":1},\"1\":{\"207\":1,\"554\":1}}],[\"enabled\",{\"1\":{\"196\":1,\"197\":1,\"343\":2,\"345\":1,\"3110\":3,\"3268\":1,\"3269\":1,\"3270\":1,\"3271\":1,\"3305\":1,\"3307\":4,\"3327\":4,\"3328\":1,\"3337\":5,\"3352\":1,\"3355\":4,\"3562\":1,\"3656\":1,\"3717\":1,\"3728\":1}}],[\"environment\",{\"1\":{\"1024\":1}}],[\"environmentaware\",{\"1\":{\"567\":1}}],[\"enviroment\",{\"1\":{\"152\":1}}],[\"env\",{\"1\":{\"152\":4,\"342\":1,\"345\":1}}],[\"eligible\",{\"1\":{\"3355\":1}}],[\"elaticsearch\",{\"1\":{\"3091\":1}}],[\"elasticserch\",{\"1\":{\"3501\":1}}],[\"elasticsearch采用的是倒排索引\",{\"1\":{\"3419\":1}}],[\"elasticsearch<\",{\"1\":{\"3205\":1}}],[\"elasticsearch在windows下开启了安全认证\",{\"1\":{\"3110\":1}}],[\"elasticsearch是基于java开发的\",{\"1\":{\"3106\":1}}],[\"elasticsearch是目前全文搜索引擎的首选\",{\"1\":{\"3089\":1}}],[\"elasticsearch官网\",{\"1\":{\"3104\":1}}],[\"elasticsearchconfig\",{\"1\":{\"418\":1}}],[\"elasticsearchclient\",{\"1\":{\"414\":1,\"418\":3,\"419\":3,\"422\":1,\"423\":1,\"424\":1,\"425\":1,\"428\":1,\"429\":1,\"430\":1,\"431\":1,\"432\":1}}],[\"elasticsearchtransport\",{\"1\":{\"418\":3}}],[\"elasticsearch开启了安全认证\",{\"1\":{\"417\":1}}],[\"elasticsearch的更新速度很慢\",{\"1\":{\"414\":1}}],[\"elasticsearch集成\",{\"1\":{\"414\":1}}],[\"elasticsearch\",{\"0\":{\"80\":1,\"411\":1,\"3102\":1,\"3355\":1,\"3383\":1,\"3524\":1,\"3526\":1,\"3527\":1,\"3528\":1,\"3529\":1},\"1\":{\"80\":1,\"81\":1,\"416\":2,\"418\":8,\"3090\":1,\"3092\":1,\"3094\":4,\"3101\":1,\"3102\":1,\"3105\":1,\"3107\":1,\"3108\":2,\"3114\":2,\"3197\":1,\"3201\":1,\"3202\":2,\"3205\":1,\"3210\":3,\"3259\":1,\"3260\":2,\"3261\":5,\"3267\":1,\"3268\":1,\"3285\":1,\"3287\":2,\"3289\":1,\"3291\":2,\"3296\":4,\"3297\":1,\"3298\":4,\"3300\":4,\"3301\":5,\"3302\":1,\"3304\":2,\"3305\":6,\"3310\":2,\"3315\":2,\"3318\":2,\"3320\":1,\"3322\":2,\"3324\":1,\"3328\":7,\"3331\":1,\"3332\":2,\"3333\":1,\"3335\":1,\"3336\":1,\"3340\":3,\"3342\":1,\"3343\":1,\"3350\":1,\"3352\":1,\"3355\":6,\"3360\":1,\"3365\":1,\"3366\":1,\"3367\":1,\"3368\":1,\"3370\":1,\"3374\":1,\"3376\":1,\"3394\":1,\"3438\":1,\"3446\":1,\"3450\":1,\"3452\":1,\"3453\":1,\"3457\":1,\"3465\":1,\"3466\":1,\"3479\":1,\"3494\":2,\"3495\":1,\"3496\":3,\"3497\":1,\"3498\":4,\"3501\":3,\"3503\":1,\"3526\":1,\"3528\":2}}],[\"elastic\",{\"0\":{\"3090\":1,\"3091\":1},\"1\":{\"413\":1,\"416\":1,\"418\":4,\"3090\":1,\"3091\":1,\"3093\":3,\"3287\":1,\"3296\":3,\"3297\":1,\"3298\":3,\"3305\":4,\"3315\":1,\"3318\":1,\"3328\":2,\"3329\":1,\"3342\":1,\"3343\":1}}],[\"elk\",{\"1\":{\"3090\":1}}],[\"electiondate\",{\"1\":{\"3670\":1}}],[\"electiontime\",{\"1\":{\"3670\":1}}],[\"electiontimeout\",{\"1\":{\"3670\":1}}],[\"electiontimeoutmillis\",{\"1\":{\"3667\":1,\"3670\":1}}],[\"electionterm\",{\"1\":{\"3670\":1}}],[\"electioncandidatemetrics\",{\"1\":{\"3670\":1}}],[\"eles\",{\"1\":{\"946\":3}}],[\"elementformdefault=\",{\"1\":{\"3029\":1}}],[\"elementdata初始化为\",{\"1\":{\"1869\":1}}],[\"elementdata\",{\"1\":{\"1866\":1}}],[\"elementdata存储\",{\"1\":{\"1860\":1,\"1862\":1}}],[\"elementtype\",{\"0\":{\"1653\":1},\"1\":{\"1650\":3,\"1652\":2,\"1653\":4,\"1660\":1,\"1661\":6,\"1674\":1,\"1680\":1,\"2820\":1}}],[\"element对象\",{\"1\":{\"1253\":1}}],[\"elements里双击需要添加到jar包的文件\",{\"1\":{\"2992\":1}}],[\"elements\",{\"1\":{\"1059\":1}}],[\"element\",{\"1\":{\"945\":1,\"951\":1,\"1874\":2,\"3025\":5,\"3029\":6}}],[\"elementui\",{\"1\":{\"53\":1}}],[\"ele\",{\"1\":{\"945\":3}}],[\"el\",{\"1\":{\"656\":2,\"657\":2}}],[\"elo\",{\"1\":{\"656\":1,\"657\":1}}],[\"else分支会导致程序的代码加长\",{\"1\":{\"1564\":1}}],[\"else时\",{\"1\":{\"1177\":1}}],[\"else和switch\",{\"0\":{\"1177\":1}}],[\"else是可以进行嵌套的\",{\"1\":{\"1171\":1}}],[\"else结构中的else\",{\"1\":{\"1175\":1}}],[\"else结构中的执行语句只有一行时\",{\"1\":{\"1171\":1}}],[\"else结构\",{\"1\":{\"1163\":1}}],[\"else\",{\"0\":{\"1163\":1,\"1166\":1},\"1\":{\"350\":1,\"749\":2,\"757\":2,\"803\":1,\"804\":2,\"805\":2,\"893\":2,\"946\":1,\"1163\":1,\"1165\":1,\"1169\":1,\"1170\":3,\"1177\":1,\"1186\":2,\"1283\":1,\"1304\":1,\"1428\":1,\"1607\":1,\"1609\":1,\"1740\":1,\"1757\":1,\"1760\":1,\"1768\":1,\"1784\":1,\"1804\":1,\"1905\":2,\"1906\":1,\"2814\":1,\"2862\":1}}],[\"eureka\",{\"1\":{\"11\":1}}],[\"es根目录下的\",{\"1\":{\"3487\":1}}],[\"es没有内置的支持中文的分词器\",{\"1\":{\"3477\":1}}],[\"es搜索的基本单位是单词\",{\"1\":{\"3435\":1}}],[\"es就采用了这种方案\",{\"1\":{\"3427\":1}}],[\"es有自己的算法来决定文档存储的分片位置\",{\"1\":{\"3400\":1}}],[\"es有关的依赖如下\",{\"1\":{\"3205\":1}}],[\"es是如何决定放入哪个分片呢\",{\"1\":{\"3399\":1}}],[\"es是基于java的\",{\"1\":{\"3265\":1}}],[\"es是基于索引\",{\"1\":{\"3115\":1}}],[\"es不推荐跨低于节点组成一个集群\",{\"1\":{\"3316\":1}}],[\"es内置jvm的默认内存是4g\",{\"1\":{\"3312\":1,\"3345\":1}}],[\"es默认启动的方式是前台启动\",{\"1\":{\"3310\":1,\"3342\":1}}],[\"es会发现同一区域网下的其他节点\",{\"1\":{\"3316\":1}}],[\"es会自动在配置文件elasticsearch\",{\"1\":{\"3307\":1}}],[\"es会自动创建ca\",{\"1\":{\"3306\":1}}],[\"es会将数据文字进行分词拆解操作\",{\"1\":{\"3175\":1}}],[\"es通过内置的elasticsearch\",{\"1\":{\"3292\":1}}],[\"es集成\",{\"0\":{\"3254\":1}}],[\"estest11\",{\"1\":{\"3253\":1}}],[\"estest10\",{\"1\":{\"3249\":1}}],[\"estest5\",{\"1\":{\"3242\":1,\"3244\":1}}],[\"estest9\",{\"1\":{\"3240\":1}}],[\"estest8\",{\"1\":{\"3237\":1}}],[\"estest6\",{\"1\":{\"3234\":1}}],[\"estest7\",{\"1\":{\"3231\":1}}],[\"estest4\",{\"1\":{\"3227\":1}}],[\"estest3\",{\"1\":{\"3214\":1,\"3217\":1,\"3218\":1,\"3220\":1,\"3221\":1,\"3225\":1,\"3226\":1}}],[\"estesttwo\",{\"1\":{\"3211\":1,\"3212\":1}}],[\"estestone\",{\"1\":{\"3206\":1,\"3209\":1}}],[\"esclient\",{\"1\":{\"3206\":2,\"3209\":3,\"3211\":3,\"3212\":3,\"3214\":3,\"3217\":3,\"3218\":3,\"3220\":3,\"3221\":3,\"3225\":3,\"3226\":3,\"3227\":3,\"3231\":3,\"3234\":3,\"3237\":3,\"3240\":3,\"3242\":3,\"3244\":3,\"3249\":3,\"3253\":3}}],[\"es数据库地址\",{\"1\":{\"3133\":1,\"3136\":1,\"3139\":1,\"3142\":1,\"3144\":1,\"3145\":1,\"3147\":1,\"3152\":1,\"3157\":1,\"3160\":1,\"3162\":1,\"3188\":1,\"3197\":1}}],[\"es中没有表的概念\",{\"1\":{\"3131\":1}}],[\"es服务端口\",{\"1\":{\"3355\":1}}],[\"es服务\",{\"1\":{\"3298\":1}}],[\"es服务器地址\",{\"1\":{\"3117\":1,\"3122\":1,\"3126\":1,\"3129\":1}}],[\"es服务未开启\",{\"1\":{\"420\":1}}],[\"es8需要java17\",{\"1\":{\"3286\":1,\"3317\":1}}],[\"es8\",{\"1\":{\"3114\":1}}],[\"es的算法\",{\"0\":{\"3400\":1}}],[\"es的配置中\",{\"1\":{\"3265\":1}}],[\"es的工作过程分为两部分\",{\"1\":{\"3113\":1}}],[\"es的数据格式\",{\"0\":{\"3101\":1}}],[\"es安装\",{\"0\":{\"3104\":1}}],[\"es介绍\",{\"0\":{\"3088\":1}}],[\"es6中的\",{\"1\":{\"2357\":1}}],[\"esbasetest\",{\"1\":{\"419\":1,\"422\":1,\"423\":1,\"424\":1,\"425\":1,\"428\":1,\"429\":1,\"430\":1,\"431\":1,\"432\":1}}],[\"es连接认证失败\",{\"1\":{\"418\":1}}],[\"es客户端的版本变迁\",{\"0\":{\"414\":1}}],[\"es\",{\"0\":{\"3089\":1,\"3114\":1,\"3204\":1,\"3207\":1,\"3269\":1,\"3270\":1,\"3271\":1,\"3278\":1,\"3279\":1,\"3282\":1,\"3283\":1},\"1\":{\"10\":1,\"45\":1,\"401\":1,\"414\":1,\"418\":1,\"3091\":2,\"3102\":1,\"3107\":1,\"3121\":1,\"3134\":1,\"3136\":1,\"3140\":1,\"3148\":1,\"3158\":1,\"3183\":1,\"3186\":1,\"3187\":1,\"3189\":1,\"3205\":2,\"3206\":1,\"3209\":1,\"3211\":1,\"3212\":1,\"3214\":1,\"3217\":1,\"3218\":1,\"3220\":1,\"3221\":1,\"3225\":1,\"3226\":1,\"3227\":1,\"3231\":1,\"3234\":1,\"3237\":1,\"3240\":1,\"3242\":1,\"3244\":1,\"3247\":1,\"3249\":1,\"3253\":1,\"3264\":1,\"3269\":1,\"3270\":1,\"3271\":1,\"3278\":1,\"3279\":1,\"3280\":1,\"3285\":4,\"3288\":3,\"3289\":1,\"3291\":5,\"3296\":3,\"3297\":1,\"3298\":1,\"3300\":2,\"3301\":1,\"3304\":1,\"3310\":2,\"3312\":1,\"3315\":1,\"3319\":3,\"3320\":1,\"3322\":5,\"3324\":1,\"3332\":3,\"3336\":1,\"3337\":3,\"3339\":4,\"3340\":3,\"3345\":1,\"3361\":1,\"3364\":1,\"3378\":1,\"3380\":1,\"3476\":1,\"3502\":1,\"3503\":1,\"3504\":1,\"3508\":1,\"3512\":1,\"3514\":1,\"3515\":1,\"3518\":1,\"3524\":3,\"3527\":1,\"3532\":3}}],[\"如查询耗费的时间\",{\"1\":{\"3632\":1}}],[\"如date和bindata类型\",{\"1\":{\"3547\":1}}],[\"如无模式\",{\"1\":{\"3538\":1}}],[\"如test\",{\"1\":{\"2991\":1}}],[\"如复选框\",{\"1\":{\"2869\":1}}],[\"如版本\",{\"1\":{\"2803\":1}}],[\"如图\",{\"1\":{\"2735\":1,\"2757\":1,\"3034\":1,\"3373\":1,\"3394\":1,\"3396\":2,\"3397\":1}}],[\"如learn\",{\"1\":{\"2730\":1}}],[\"如连接过多\",{\"1\":{\"2662\":1}}],[\"如servlet\",{\"1\":{\"2661\":1}}],[\"如string\",{\"1\":{\"1338\":1}}],[\"如string类型的数组\",{\"1\":{\"1210\":1}}],[\"如customerdao\",{\"1\":{\"2644\":1}}],[\"如hibernate\",{\"1\":{\"2526\":1}}],[\"如收集到\",{\"1\":{\"2490\":1}}],[\"如同发快递包裹一样\",{\"1\":{\"2229\":1}}],[\"如192\",{\"1\":{\"2181\":1}}],[\"如读\",{\"1\":{\"2021\":1}}],[\"如读取配置\",{\"1\":{\"1487\":1}}],[\"如不是\",{\"1\":{\"1627\":1}}],[\"如nullpointerexception\",{\"1\":{\"1586\":1}}],[\"如进行x\",{\"1\":{\"1564\":1}}],[\"如何减少集群中的节点数\",{\"1\":{\"3276\":1}}],[\"如何调用的\",{\"1\":{\"2813\":1}}],[\"如何使用函数式接口\",{\"0\":{\"2384\":1}}],[\"如何实现如此复杂的网络协议呢\",{\"1\":{\"2200\":1}}],[\"如何实现网络通信\",{\"0\":{\"2174\":1}}],[\"如何\",{\"1\":{\"2172\":1}}],[\"如何管理等是确定的\",{\"1\":{\"1947\":1}}],[\"如何判断是否要声明static\",{\"0\":{\"1485\":1}}],[\"如何才能调用子类特有的属性和方法\",{\"1\":{\"1410\":1}}],[\"如包含哪些属性\",{\"1\":{\"1434\":1}}],[\"如定义系统特性\",{\"1\":{\"1338\":1}}],[\"如int\",{\"1\":{\"1270\":1}}],[\"如抽象\",{\"1\":{\"1250\":1}}],[\"如a\",{\"1\":{\"1220\":1}}],[\"如gbk转utf\",{\"1\":{\"1103\":1}}],[\"如想实现排序\",{\"1\":{\"742\":1}}],[\"如异常信息\",{\"1\":{\"646\":1}}],[\"如长周期业务数据的计算\",{\"1\":{\"490\":1}}],[\"如坐标\",{\"1\":{\"463\":1}}],[\"如验证码\",{\"1\":{\"460\":1}}],[\"如上采用的blog账号\",{\"1\":{\"3720\":1}}],[\"如上创建了三个节点\",{\"1\":{\"3264\":1}}],[\"如上方的代码\",{\"1\":{\"2812\":1}}],[\"如上图中的6个请求来自3个浏览器\",{\"1\":{\"3035\":1}}],[\"如上图上半部分是\",{\"1\":{\"3011\":1}}],[\"如上图\",{\"1\":{\"2764\":1,\"3384\":1}}],[\"如上所述\",{\"1\":{\"525\":1}}],[\"如上面代码中的get方法\",{\"1\":{\"471\":1}}],[\"如上\",{\"1\":{\"280\":1,\"808\":1,\"1266\":1,\"1303\":1,\"1306\":1,\"1668\":1,\"1742\":1,\"1762\":2,\"2447\":1,\"2472\":1,\"2605\":1,\"3136\":1,\"3267\":1,\"3473\":1,\"3701\":1,\"3739\":1}}],[\"如时间和空间的属性\",{\"1\":{\"214\":1}}],[\"如果采用了kill而非标准方式关闭了mongodb服务\",{\"1\":{\"3756\":1}}],[\"如果采用了上述的方式2\",{\"1\":{\"2735\":1}}],[\"如果连接的对方是副本集\",{\"1\":{\"3733\":1}}],[\"如果连接过程失败\",{\"1\":{\"2241\":1}}],[\"如果副本集具有偶数个成员\",{\"1\":{\"3646\":1}}],[\"如果复合索引由\",{\"1\":{\"3620\":1}}],[\"如果找不到匹配项\",{\"1\":{\"3595\":1}}],[\"如果某条数据插入失败\",{\"1\":{\"3591\":1}}],[\"如果某字段没值\",{\"1\":{\"3588\":1}}],[\"如果某个类使用了被\",{\"1\":{\"1664\":1}}],[\"如果成功删除选定集合\",{\"1\":{\"3582\":1}}],[\"如果成功就返回true\",{\"1\":{\"2682\":1}}],[\"如果集合不存在\",{\"1\":{\"3581\":1}}],[\"如果分片数过多\",{\"1\":{\"3508\":1}}],[\"如果索引的总容量在\",{\"1\":{\"3508\":1}}],[\"如果每一个分片都处于不同的节点还好\",{\"1\":{\"3507\":1}}],[\"如果每次测试前改过来\",{\"1\":{\"230\":1}}],[\"如果请求成功\",{\"1\":{\"3498\":1}}],[\"如果请求体变化\",{\"1\":{\"3144\":1}}],[\"如果多个进程负责这一数据同步\",{\"1\":{\"3498\":1}}],[\"如果多个条件表达式之间有包含的关系\",{\"1\":{\"1172\":1}}],[\"如果多个条件表达式之间有交集的关系\",{\"1\":{\"1172\":1}}],[\"如果多个条件表达式之间是\",{\"1\":{\"1172\":1}}],[\"如果发现版本好变了\",{\"1\":{\"3497\":1}}],[\"如果发现其父类还没有进行初始化\",{\"1\":{\"2276\":1}}],[\"如果旧版本的文档在新版本之后到达\",{\"1\":{\"3497\":1}}],[\"如果源数据在读写当中被修改\",{\"1\":{\"3495\":1}}],[\"如果新增了一个文档\",{\"1\":{\"3442\":1}}],[\"如果从来不更新索引\",{\"1\":{\"3441\":1}}],[\"如果禁止分词\",{\"1\":{\"3435\":1}}],[\"如果d1包含了马斯克和spacex\",{\"1\":{\"3426\":1}}],[\"如果丢失的节点依然拥有着之前的分片\",{\"1\":{\"3397\":1}}],[\"如果扩容的节点数量超过了分片数量\",{\"1\":{\"3393\":1}}],[\"如果linux服务器剩余内存过小\",{\"1\":{\"3312\":1,\"3345\":1}}],[\"如果lambda体只有一条执行语句\",{\"1\":{\"2366\":1}}],[\"如果lambda形参列表只有一个参数\",{\"1\":{\"2366\":1}}],[\"如果导错包\",{\"1\":{\"3210\":1}}],[\"如果为假\",{\"1\":{\"3586\":1}}],[\"如果为true\",{\"1\":{\"3586\":1}}],[\"如果为false\",{\"1\":{\"3200\":1}}],[\"如果为了防止不出异常\",{\"1\":{\"782\":1}}],[\"如果查询不到结果\",{\"1\":{\"3141\":1,\"3159\":1}}],[\"如果查询的索引越界了就会报越界异常\",{\"1\":{\"655\":1}}],[\"如果重复创建相同的索引\",{\"1\":{\"3120\":1}}],[\"如果重复插入数据\",{\"1\":{\"428\":1}}],[\"如果浏览器或服务端都没有被关闭\",{\"1\":{\"3033\":1}}],[\"如果tomcat成功启动\",{\"1\":{\"2995\":1}}],[\"如果this对象不是null\",{\"1\":{\"1428\":1}}],[\"如果调用session提供的invalidate\",{\"1\":{\"2924\":1}}],[\"如果调用声明局部内部类的外部方法的局部变量的话\",{\"1\":{\"1458\":1}}],[\"如果服务器非正常关闭\",{\"1\":{\"2924\":1}}],[\"如果会话不中断\",{\"1\":{\"2923\":1}}],[\"如果都写两份代码\",{\"1\":{\"2861\":1}}],[\"如果都配置了\",{\"1\":{\"1030\":1}}],[\"如果前端发送的是纯文本数据\",{\"1\":{\"2855\":1}}],[\"如果前端发送的是字节数据\",{\"1\":{\"2854\":1}}],[\"如果配置的是\",{\"1\":{\"2845\":1}}],[\"如果配置了\",{\"1\":{\"2825\":1}}],[\"如果项目中的servlet配置了\",{\"1\":{\"2825\":1}}],[\"如果路径配置的是\",{\"1\":{\"2824\":1}}],[\"如果路径配置的不是扩展名\",{\"1\":{\"2824\":1}}],[\"如果创建servlet比较耗时的话\",{\"1\":{\"2794\":1}}],[\"如果创建了一个类的多个对象\",{\"1\":{\"1261\":1}}],[\"如果未配置artifacts\",{\"1\":{\"2762\":1,\"2767\":1}}],[\"如果未设置此属性\",{\"1\":{\"308\":1}}],[\"如果同时配置了filters和proxyfilters\",{\"1\":{\"2674\":1}}],[\"如果同步代码有异常\",{\"1\":{\"1783\":1}}],[\"如果空闲时间大于timebetweenevictionrunsmillis\",{\"1\":{\"2674\":1}}],[\"如果空参构造器访问权限是不够\",{\"1\":{\"2285\":1}}],[\"如果validationquery为null\",{\"1\":{\"2674\":1}}],[\"如果对安全要求很高\",{\"1\":{\"3708\":1}}],[\"如果对某个节点的投票数达到一定的值\",{\"1\":{\"3526\":1}}],[\"如果对该数据库连接对象设置了关闭自动提交\",{\"1\":{\"2632\":1}}],[\"如果对类进行了修改\",{\"1\":{\"2158\":1}}],[\"如果上传报错\",{\"1\":{\"2610\":1}}],[\"如果存在多个数据源\",{\"1\":{\"2674\":1}}],[\"如果存在则不会创建\",{\"1\":{\"2135\":1}}],[\"如果存储的文件过大\",{\"1\":{\"2608\":1}}],[\"如果第一个结果是更新计数或没有结果\",{\"1\":{\"2571\":1}}],[\"如果第一个结果是\",{\"1\":{\"2571\":1}}],[\"如果修改了配置信息\",{\"1\":{\"2552\":1}}],[\"如果全都返回true\",{\"1\":{\"2477\":1}}],[\"如果类中没有无参构造器就不能使用newinstance了\",{\"1\":{\"2286\":1}}],[\"如果类没有空参构造器\",{\"1\":{\"2285\":1}}],[\"如果类没有显示定义这个静态常量\",{\"1\":{\"2158\":1}}],[\"如果其中一个文档出现错误\",{\"1\":{\"3586\":2}}],[\"如果其父类没有被初始化\",{\"1\":{\"2277\":1}}],[\"如果其他泛型的list想使用功能这个遍历方法\",{\"1\":{\"1995\":1}}],[\"如果套接字未连接\",{\"1\":{\"2233\":2}}],[\"如果套接字是未连接的\",{\"1\":{\"2214\":1}}],[\"如果信息比包的长度长\",{\"1\":{\"2233\":1}}],[\"如果客户端请求连接\",{\"1\":{\"2221\":1}}],[\"如果尚未绑定套接字\",{\"1\":{\"2214\":1}}],[\"如果尚未连接套接字\",{\"1\":{\"2214\":1}}],[\"如果读取的文件不存在则会出现异常\",{\"1\":{\"2135\":1}}],[\"如果读到文件的末尾就返回null\",{\"1\":{\"829\":1}}],[\"如果和gbk等双字节编码方式一样\",{\"1\":{\"2111\":1}}],[\"如果返回\",{\"1\":{\"2049\":1}}],[\"如果返回false\",{\"1\":{\"1415\":1}}],[\"如果字节流操作文本文件\",{\"1\":{\"2038\":1}}],[\"如果字符流操作非文本文件\",{\"1\":{\"2038\":1}}],[\"如果pathname是相对路径\",{\"1\":{\"2015\":1}}],[\"如果实例化时\",{\"1\":{\"1959\":1}}],[\"如果实现类实现了多个接口\",{\"1\":{\"1517\":1}}],[\"如果实现类实现了接口中的所有抽象方法\",{\"1\":{\"1510\":1}}],[\"如果实现类重写了接口中的默认方法\",{\"1\":{\"1517\":1}}],[\"如果实现了则回调其\",{\"1\":{\"567\":1}}],[\"如果equals\",{\"1\":{\"1922\":2}}],[\"如果es服务没有开启\",{\"1\":{\"420\":1}}],[\"如果自己手动重写\",{\"1\":{\"1897\":1}}],[\"如果数组的索引处已经有值了\",{\"1\":{\"1892\":1}}],[\"如果数据量大的话即使对\",{\"1\":{\"3097\":1}}],[\"如果数据出错\",{\"1\":{\"420\":1}}],[\"如果数据类型不符合限制就会报异常\",{\"1\":{\"398\":1}}],[\"如果试图把一个对象添加到\",{\"1\":{\"1887\":1}}],[\"如果需要大批量进行写入操作\",{\"1\":{\"3518\":1}}],[\"如果需要提供给别人使用\",{\"1\":{\"2986\":1}}],[\"如果需要可以通过配置useunfairlock属性为true使用非公平锁\",{\"1\":{\"2674\":1}}],[\"如果需要修改配置信息\",{\"1\":{\"2552\":1}}],[\"如果需要访问文件内容本身\",{\"1\":{\"2009\":1}}],[\"如果需要创建iterator\",{\"1\":{\"1837\":1}}],[\"如果需要导入多个结构\",{\"1\":{\"1342\":1}}],[\"如果操作共享数据的代码完整的声明在一个方法中\",{\"1\":{\"1765\":1}}],[\"如果操作的实体类没有对应的集合\",{\"1\":{\"395\":1}}],[\"如果图片没加载出来就无法继续向上滑动\",{\"1\":{\"1694\":1}}],[\"如果用单线程做\",{\"1\":{\"1694\":1}}],[\"如果把标有\",{\"1\":{\"1664\":1}}],[\"如果只需要返回符合条件的第一条数据\",{\"1\":{\"3606\":1}}],[\"如果只剩下最后两个节点了\",{\"1\":{\"3276\":1}}],[\"如果只有一条return语句\",{\"1\":{\"2366\":1}}],[\"如果只有一个参数成员\",{\"1\":{\"1648\":1}}],[\"如果只指定了两个参数\",{\"1\":{\"782\":1}}],[\"如果注解只有一个成员\",{\"1\":{\"1647\":1}}],[\"如果注释方法中的某一个步骤\",{\"1\":{\"1063\":1}}],[\"如果枚举类中只有一个对象\",{\"1\":{\"1619\":1}}],[\"如果代码存在逻辑上的问题\",{\"1\":{\"1607\":1}}],[\"如果代码编译时没有异常\",{\"1\":{\"1604\":1}}],[\"如果代码进行过修改\",{\"1\":{\"1040\":1}}],[\"如果父类中被重写的方法没有throws方式处理异常\",{\"1\":{\"1603\":1}}],[\"如果这两个异常的处理方式不一样\",{\"1\":{\"1600\":1}}],[\"如果异常没有在调用者方法中处理\",{\"1\":{\"1599\":1}}],[\"如果明确知道产生的是何种异常\",{\"1\":{\"1586\":1}}],[\"如果输入字符串就会报异常\",{\"1\":{\"1581\":1}}],[\"如果程序出现异常而未能关闭\",{\"1\":{\"2662\":1}}],[\"如果程序不处理\",{\"1\":{\"1572\":1}}],[\"如果程序既可以使用三元运算符\",{\"1\":{\"1163\":1}}],[\"如果变量的值是引用数据类型\",{\"1\":{\"1554\":1}}],[\"如果变量的值是基本数据类型\",{\"1\":{\"1554\":1}}],[\"如果boolean\",{\"1\":{\"1530\":1}}],[\"如果继承了抽象类或实现了接口\",{\"1\":{\"1463\":1}}],[\"如果该类还未被加载到内存中\",{\"1\":{\"2273\":1}}],[\"如果该方法没有被重写过默认也是\",{\"1\":{\"1429\":1}}],[\"如果该模块不需要启动\",{\"1\":{\"163\":1}}],[\"如果两个以上条件之间是或者的关系\",{\"1\":{\"3616\":1}}],[\"如果两个数据的哈希值不同\",{\"1\":{\"1890\":1}}],[\"如果两个方法都使用在同步代码块或同步方法中\",{\"1\":{\"1803\":1}}],[\"如果两个对象一个name属性有初始值\",{\"1\":{\"1428\":1}}],[\"如果两个技术没有交集\",{\"1\":{\"354\":1}}],[\"如果x\",{\"1\":{\"1428\":3}}],[\"如果比较的是引用数据类型变量\",{\"1\":{\"1426\":1}}],[\"如果比较的是基本数据类型变量\",{\"1\":{\"1426\":1}}],[\"如果\",{\"1\":{\"1416\":1,\"2233\":1,\"3413\":1,\"3533\":1}}],[\"如果它不是晚绑定\",{\"1\":{\"1407\":1}}],[\"如果子类\",{\"1\":{\"1517\":1}}],[\"如果子类构造器中既未显式调用父类或本类的构造器\",{\"1\":{\"1388\":1}}],[\"如果子模块是直接从外部复制进去的\",{\"1\":{\"166\":1}}],[\"如果构造器的形参和类的属性同名时\",{\"1\":{\"1329\":1}}],[\"如果方法与调用者无关\",{\"1\":{\"1472\":1}}],[\"如果方法的形参和类的属性同名时\",{\"1\":{\"1328\":1}}],[\"如果方法没有返回值\",{\"1\":{\"1277\":1}}],[\"如果直接对类内部的属性进行访问和操作\",{\"1\":{\"1302\":1}}],[\"如果还有其他参数\",{\"1\":{\"1295\":1}}],[\"如果还未调用next\",{\"1\":{\"926\":1,\"1848\":1}}],[\"如果参数是引用数据类型\",{\"1\":{\"1293\":1}}],[\"如果我们想实现对某列值在原有值的基础上进行增加或减少\",{\"1\":{\"3598\":1}}],[\"如果我们对搜索的实效性要求不高\",{\"1\":{\"3516\":1}}],[\"如果我们设置的堆内存过大\",{\"1\":{\"3504\":1}}],[\"如果我们只是简单的用新数据比对旧数据\",{\"1\":{\"1889\":1}}],[\"如果我们也想输出对象的实体内容\",{\"1\":{\"1434\":1}}],[\"如果我们没有显式的声明一个类的父类的话\",{\"1\":{\"1364\":1}}],[\"如果我们修改一个对象的属性a\",{\"1\":{\"1261\":1}}],[\"如果我们需要代表本地时间的对象\",{\"1\":{\"725\":1}}],[\"如果instance真的==null\",{\"1\":{\"1770\":1}}],[\"如果index超出了范围\",{\"1\":{\"950\":1}}],[\"如果if\",{\"1\":{\"1171\":1}}],[\"如果符号位是1\",{\"1\":{\"1157\":1}}],[\"如果最高位移动到了符号位\",{\"1\":{\"1157\":1}}],[\"如果左边为假\",{\"1\":{\"1153\":1}}],[\"如果左边为真\",{\"1\":{\"1153\":1}}],[\"如果想根据人的思维模式\",{\"1\":{\"3436\":1}}],[\"如果想再次开启一个线程\",{\"1\":{\"1725\":1}}],[\"如果想使用重复注解\",{\"1\":{\"1667\":1}}],[\"如果想保留小数位\",{\"1\":{\"1139\":1}}],[\"如果想看sql需要进行配置\",{\"1\":{\"624\":1}}],[\"如果值超过了int的范围\",{\"1\":{\"1116\":1}}],[\"如果值超过了变量类型规定的范围\",{\"1\":{\"1088\":1}}],[\"如果一个线程阻塞了\",{\"1\":{\"1770\":1}}],[\"如果一个异常回到main\",{\"1\":{\"1599\":1}}],[\"如果一个方法内抛出异常\",{\"1\":{\"1599\":1}}],[\"如果一个方法\",{\"1\":{\"1597\":1}}],[\"如果一个类中定义了多个非静态代码块\",{\"1\":{\"1528\":1}}],[\"如果一个类中定义了多个静态代码块\",{\"1\":{\"1527\":1}}],[\"如果一个类中声明了n个构造器\",{\"1\":{\"1330\":1}}],[\"如果一个类支持泛型时\",{\"1\":{\"1059\":1}}],[\"如果一段程序是由多个作者来维护\",{\"1\":{\"1059\":1}}],[\"如果指定的集合不存在就会自动创建集合\",{\"1\":{\"3585\":1}}],[\"如果指定的key不存在\",{\"1\":{\"961\":1}}],[\"如果指定了字符集\",{\"1\":{\"674\":1}}],[\"如果key1的哈希值和已经存在的某一个数据\",{\"1\":{\"1922\":1}}],[\"如果key1的哈希值与已经存在的数据的哈希值都不相同\",{\"1\":{\"1922\":1}}],[\"如果key不存在\",{\"1\":{\"963\":1}}],[\"如果key\",{\"1\":{\"959\":1}}],[\"如果取的index不存在\",{\"1\":{\"947\":1}}],[\"如果没找到就返回负数\",{\"1\":{\"894\":1}}],[\"如果没有开启认证\",{\"1\":{\"3721\":1}}],[\"如果没有索引\",{\"1\":{\"3617\":1}}],[\"如果没有保存\",{\"1\":{\"3315\":1}}],[\"如果没有dns解析的主机名\",{\"1\":{\"3298\":1}}],[\"如果没有就在内存中创建一个session并返回\",{\"1\":{\"2924\":1}}],[\"如果没有导入可以手动导入\",{\"1\":{\"2773\":1}}],[\"如果没有配置\",{\"1\":{\"2674\":1,\"3666\":1}}],[\"如果没有值\",{\"1\":{\"2507\":1}}],[\"如果没有成员\",{\"1\":{\"1647\":1}}],[\"如果没有默认值\",{\"1\":{\"1549\":1}}],[\"如果没有显式的定义类的构造器的话\",{\"1\":{\"1320\":1}}],[\"如果没有初始化值\",{\"1\":{\"1270\":1}}],[\"如果没有超过int的范围\",{\"1\":{\"1116\":1}}],[\"如果没有启动springboot\",{\"1\":{\"493\":1}}],[\"如果没有jakarta\",{\"1\":{\"420\":1}}],[\"如果没有给出时间单位\",{\"1\":{\"308\":1}}],[\"如果在套接字上调用\",{\"1\":{\"2214\":2}}],[\"如果在当前代码中没有找到相应的处理程序\",{\"1\":{\"1567\":1}}],[\"如果在类的声明中未使用extends关键字指明其父类\",{\"1\":{\"1423\":1}}],[\"如果在源文件中\",{\"1\":{\"1344\":1}}],[\"如果在本类中未找到\",{\"1\":{\"1332\":1}}],[\"如果在方法内或构造器内需要使用成员变量\",{\"1\":{\"1332\":1}}],[\"如果在接收的数据中不含有\",{\"1\":{\"829\":1,\"2082\":1}}],[\"如果在idea下测试工程时pom\",{\"1\":{\"284\":1}}],[\"如果已到达流的末尾\",{\"1\":{\"813\":1,\"814\":1,\"818\":1}}],[\"如果已设置\",{\"1\":{\"342\":1}}],[\"如果因为已经到达流末尾而没有可用的字节\",{\"1\":{\"814\":1}}],[\"如果因\",{\"1\":{\"813\":1}}],[\"如果目录已存在\",{\"1\":{\"804\":1}}],[\"如果文档已经被另一个进程修改\",{\"1\":{\"3413\":1}}],[\"如果文档不存在就返回错误\",{\"1\":{\"433\":1}}],[\"如果文件里有public修饰的类\",{\"1\":{\"1046\":1}}],[\"如果文件或目录已经存在了\",{\"1\":{\"802\":1,\"2018\":1}}],[\"如果文件不存在则会去创建文件\",{\"1\":{\"2135\":1}}],[\"如果文件不存在\",{\"1\":{\"800\":1}}],[\"如果除不尽\",{\"1\":{\"784\":1}}],[\"如果年龄相同\",{\"1\":{\"748\":1}}],[\"如果当前你的网络中没有运行任何\",{\"1\":{\"3261\":1}}],[\"如果当前对象this等于形参对象obj\",{\"1\":{\"745\":1}}],[\"如果当前对象this小于形参对象obj\",{\"1\":{\"745\":1}}],[\"如果当前对象this大于形参对象obj\",{\"1\":{\"745\":1}}],[\"如果当前页码值大于了总页码值\",{\"1\":{\"647\":1}}],[\"如果要查询结果返回部分字段\",{\"1\":{\"3607\":1}}],[\"如果要存整型\",{\"1\":{\"3588\":1}}],[\"如果要共享\",{\"1\":{\"3056\":1}}],[\"如果要创建只需要一行数据的方法\",{\"1\":{\"2606\":1}}],[\"如果要对集合中的所有元素进一步操作\",{\"1\":{\"2467\":1}}],[\"如果要针对不同的方法进行增强\",{\"1\":{\"2335\":1}}],[\"如果要在java程序中实现一些面向对象编程的常见需求\",{\"1\":{\"1531\":1}}],[\"如果要比较的两个对象是引用关系\",{\"1\":{\"1428\":1}}],[\"如果要比较该类的两个实例大小\",{\"1\":{\"744\":1}}],[\"如果要使用\",{\"1\":{\"1361\":1}}],[\"如果要进行换行和输入空格\",{\"1\":{\"824\":1}}],[\"如果要删除\",{\"1\":{\"3276\":1}}],[\"如果要删除目录\",{\"1\":{\"810\":1}}],[\"如果要删除的文档id不存在\",{\"1\":{\"433\":1}}],[\"如果要表示再大的整数\",{\"1\":{\"777\":1}}],[\"如果要获取其他范围的值\",{\"1\":{\"761\":1}}],[\"如果要该类的多个对象排序\",{\"1\":{\"744\":1}}],[\"如果要替换最后一个字符\",{\"1\":{\"702\":1}}],[\"如果超过了\",{\"1\":{\"682\":1,\"992\":1,\"1001\":1}}],[\"如果做前后端分离的api开发\",{\"1\":{\"639\":1}}],[\"如果写错了会发生异常\",{\"1\":{\"632\":1}}],[\"如果写在业务类中\",{\"1\":{\"471\":1}}],[\"如果测试的时候想用int作为id\",{\"1\":{\"624\":1}}],[\"如果有许多分片\",{\"1\":{\"3507\":1}}],[\"如果有就记录文档的id\",{\"1\":{\"3427\":1}}],[\"如果有值则将其返回\",{\"1\":{\"2508\":1}}],[\"如果有值\",{\"1\":{\"2505\":1}}],[\"如果有开发人员试图使用或重写被\",{\"1\":{\"1673\":1}}],[\"如果有多个线程被wait\",{\"1\":{\"1799\":1}}],[\"如果有多个成员\",{\"1\":{\"1647\":1}}],[\"如果有多个属性要添加\",{\"1\":{\"256\":1}}],[\"如果有属性\",{\"1\":{\"1626\":1}}],[\"如果有的话\",{\"1\":{\"1626\":1}}],[\"如果有\",{\"1\":{\"1530\":1}}],[\"如果有try\",{\"1\":{\"827\":1}}],[\"如果有很个性化的需求\",{\"1\":{\"622\":1}}],[\"如果是手动安装的绿色版\",{\"1\":{\"3569\":1}}],[\"如果是手动通过maven创建的项目\",{\"1\":{\"223\":1}}],[\"如果是text就可以分词\",{\"1\":{\"3435\":1}}],[\"如果是副本\",{\"1\":{\"3371\":1}}],[\"如果是集群就连接master节点\",{\"1\":{\"3352\":1}}],[\"如果是集群需要所如所有集群的主机名称\",{\"1\":{\"3298\":1}}],[\"如果是单节点集群\",{\"1\":{\"3298\":1}}],[\"如果是第一次启动集群\",{\"1\":{\"3275\":1}}],[\"如果是复制之前的单节点es目录\",{\"1\":{\"3264\":1}}],[\"如果是post请求\",{\"1\":{\"2814\":1}}],[\"如果是带缓冲区的流对象的close\",{\"1\":{\"2074\":1}}],[\"如果是在单元测试里运行代码\",{\"1\":{\"2015\":1}}],[\"如果是null\",{\"1\":{\"1770\":1}}],[\"如果是多核的话\",{\"1\":{\"1689\":1}}],[\"如果是多环境\",{\"1\":{\"583\":1}}],[\"如果是字符串\",{\"1\":{\"1441\":1}}],[\"如果是静态方法调用invoke\",{\"1\":{\"874\":1,\"2314\":1}}],[\"如果是引用类型\",{\"1\":{\"862\":1,\"870\":1,\"2293\":1}}],[\"如果是追加写\",{\"1\":{\"824\":1}}],[\"如果是空目录\",{\"1\":{\"794\":1,\"795\":1}}],[\"如果是文件则返回null\",{\"1\":{\"794\":1,\"795\":1}}],[\"如果是目录或空文件\",{\"1\":{\"792\":1}}],[\"如果是5\",{\"1\":{\"784\":2}}],[\"如果是char\",{\"1\":{\"700\":1}}],[\"如果此处未出现artifact\",{\"1\":{\"2766\":1}}],[\"如果此处配置了info级别\",{\"1\":{\"308\":1}}],[\"如果此位置上的数据不为空\",{\"1\":{\"1922\":1}}],[\"如果此位置上的数据为空\",{\"1\":{\"1922\":1}}],[\"如果此次的添加导致底层elementdata数组容量不够\",{\"1\":{\"1867\":1}}],[\"如果此文件目录的上层目录不存在\",{\"1\":{\"804\":1}}],[\"如果此时配置文件不提供属性\",{\"1\":{\"551\":1}}],[\"如果使用mybatis\",{\"1\":{\"3008\":1}}],[\"如果使用构造器fileoutputstream\",{\"1\":{\"2045\":2}}],[\"如果使用构造方法就不太灵活了\",{\"1\":{\"544\":1}}],[\"如果使用定制排序\",{\"1\":{\"1906\":1}}],[\"如果使用treeset\",{\"1\":{\"1903\":1}}],[\"如果使用的类或接口是本包下定义的\",{\"1\":{\"1342\":1}}],[\"如果使用的类或接口是java\",{\"1\":{\"1342\":1}}],[\"如果使用的话\",{\"1\":{\"1277\":1}}],[\"如果使用\",{\"1\":{\"1281\":1}}],[\"如果使用第二个参数来指定字符集\",{\"1\":{\"674\":1}}],[\"如果使用java\",{\"1\":{\"246\":1}}],[\"如果加载了\",{\"1\":{\"543\":1}}],[\"如果工作需要再学习\",{\"1\":{\"486\":1}}],[\"如果设置为false\",{\"1\":{\"3595\":1}}],[\"如果设置为warn\",{\"1\":{\"308\":1}}],[\"如果设置一级域名相同\",{\"1\":{\"3057\":1}}],[\"如果设置的精度\",{\"1\":{\"783\":1}}],[\"如果设置了要保存后\",{\"1\":{\"3296\":1}}],[\"如果设置了自定义前缀\",{\"1\":{\"485\":1}}],[\"如果设置了不使用前缀名use\",{\"1\":{\"485\":1}}],[\"如果相同\",{\"1\":{\"471\":1,\"1890\":1}}],[\"如果yaml文件中的连接信息填错\",{\"1\":{\"420\":1}}],[\"如果不使用路由\",{\"1\":{\"3511\":1}}],[\"如果不愿意启动多个节点\",{\"1\":{\"3276\":1}}],[\"如果不是第一次启动\",{\"1\":{\"3275\":1}}],[\"如果不是的话\",{\"1\":{\"2682\":1}}],[\"如果不指定索引名\",{\"1\":{\"3129\":1}}],[\"如果不指定泛型\",{\"1\":{\"904\":1,\"943\":1}}],[\"如果不配置druid会根据url自动识别dbtype\",{\"1\":{\"2674\":1}}],[\"如果不同就以链表的形式添加到该元素后面\",{\"1\":{\"1890\":1}}],[\"如果不存在再调用\",{\"1\":{\"3006\":1}}],[\"如果不存在\",{\"1\":{\"948\":1,\"949\":1,\"2168\":1}}],[\"如果不重写equals方法\",{\"1\":{\"910\":1}}],[\"如果不需要加载第三方bean\",{\"1\":{\"513\":1}}],[\"如果不设置会出问题\",{\"1\":{\"368\":1}}],[\"如果不这样就无法找到启动类\",{\"1\":{\"101\":1}}],[\"如果开启了其他服务\",{\"1\":{\"348\":1}}],[\"如果端点中还有明细信息可以发送请求\",{\"1\":{\"342\":1}}],[\"如果被动获取被监控程序上报的信息\",{\"1\":{\"315\":1}}],[\"如果你想返回指定条数的记录\",{\"1\":{\"3610\":1}}],[\"如果你没有选择数据库\",{\"1\":{\"3576\":1}}],[\"如果你的副本+主节点的个数是奇数\",{\"1\":{\"3646\":1}}],[\"如果你的主数据库已经有了版本号\",{\"1\":{\"3498\":1}}],[\"如果你的集群中至少有两个节点\",{\"1\":{\"3370\":1}}],[\"如果你在你的网络中启动了若干个节点\",{\"1\":{\"3261\":1}}],[\"如果你不希望密码直接写在配置文件中\",{\"1\":{\"2674\":1}}],[\"如果你不申明很可能会报\",{\"1\":{\"172\":1}}],[\"如果你是\",{\"1\":{\"1506\":1}}],[\"如果你对log4j很熟悉\",{\"1\":{\"306\":1}}],[\"如果将所有的请求发送到固定的节点上\",{\"1\":{\"3404\":1}}],[\"如果将tomcat端口号改为80\",{\"1\":{\"2705\":1}}],[\"如果将run方法的args删掉\",{\"1\":{\"259\":1}}],[\"如果将测试类的位置改变了\",{\"1\":{\"228\":1}}],[\"如果执行jar包时\",{\"1\":{\"255\":1}}],[\"如果关闭其他服务器和改端口号都解决不了问题\",{\"1\":{\"248\":1}}],[\"如果包里找不到\",{\"1\":{\"229\":1}}],[\"如果出现了两个不同输入有相同输出的情况\",{\"1\":{\"1899\":1}}],[\"如果出现了\",{\"1\":{\"166\":1}}],[\"如javabean\",{\"1\":{\"2996\":1}}],[\"如javaweb\",{\"1\":{\"2730\":1}}],[\"如java\",{\"1\":{\"2247\":1}}],[\"如jdbc数据库连接信息\",{\"1\":{\"153\":1}}],[\"如jetty\",{\"1\":{\"135\":1}}],[\"如常用的内嵌tomcat\",{\"1\":{\"131\":1}}],[\"如下在查询语句后面跟explain\",{\"1\":{\"3632\":1}}],[\"如下示例\",{\"1\":{\"3481\":1}}],[\"如下是需要修改的地方\",{\"1\":{\"3339\":1}}],[\"如下几个文档\",{\"1\":{\"3425\":1,\"3432\":1}}],[\"如下几个\",{\"1\":{\"2191\":1}}],[\"如下图位置\",{\"1\":{\"2875\":1}}],[\"如下图\",{\"1\":{\"1097\":1,\"3292\":1,\"3326\":1,\"3494\":1}}],[\"如下图是通过spring\",{\"1\":{\"162\":1}}],[\"如下所示\",{\"0\":{\"546\":1}}],[\"如下列\",{\"1\":{\"514\":1}}],[\"如下\",{\"1\":{\"98\":1,\"117\":1,\"118\":1,\"123\":1,\"189\":1,\"379\":1,\"394\":1,\"427\":1,\"464\":1,\"778\":1,\"892\":1,\"1157\":1,\"1233\":1,\"1234\":1,\"1304\":1,\"1415\":1,\"1424\":1,\"1476\":1,\"1534\":1,\"1677\":1,\"1995\":1,\"1996\":1,\"2559\":1,\"2672\":1,\"2731\":1,\"2734\":1,\"2831\":1,\"2862\":1,\"3136\":1,\"3298\":1,\"3306\":1,\"3400\":1,\"3476\":1,\"3487\":1,\"3570\":1,\"3614\":1,\"3662\":1,\"3711\":1,\"3738\":1}}],[\"如\",{\"1\":{\"21\":1,\"129\":1,\"147\":1,\"401\":1,\"474\":1,\"477\":1,\"576\":1,\"734\":1,\"771\":1,\"985\":1,\"986\":1,\"1093\":2,\"1126\":1,\"1560\":1,\"1561\":1,\"1586\":1,\"1670\":1,\"1830\":1,\"1948\":1,\"2181\":1,\"2186\":2,\"2440\":1,\"2538\":1,\"2695\":2,\"2711\":1,\"2715\":1,\"2753\":1,\"2831\":1,\"2845\":1,\"2895\":1,\"2932\":1,\"2954\":1,\"3002\":1,\"3143\":1,\"3176\":2,\"3364\":1,\"3533\":1,\"3555\":1}}],[\"如redis\",{\"1\":{\"11\":1}}],[\"如mysql\",{\"1\":{\"11\":1}}],[\"可读写\",{\"1\":{\"3644\":1}}],[\"可读性差\",{\"1\":{\"1564\":1}}],[\"可遍历性\",{\"1\":{\"3547\":1}}],[\"可适当减少误判\",{\"1\":{\"3533\":1}}],[\"可搜索性\",{\"1\":{\"3462\":1}}],[\"可分配的最大内置值\",{\"1\":{\"3267\":1,\"3312\":1,\"3345\":1,\"3503\":1}}],[\"可分词\",{\"1\":{\"3197\":1}}],[\"可执行脚本目录\",{\"1\":{\"3106\":1,\"3289\":1,\"3320\":1}}],[\"可称为开发环境\",{\"1\":{\"2989\":1}}],[\"可称为jvm环境\",{\"1\":{\"2989\":1}}],[\"可根据预先的占用超时设定\",{\"1\":{\"2667\":1}}],[\"可在应用层通过数据库连接池的配置\",{\"1\":{\"2667\":1}}],[\"可在web页面查看\",{\"1\":{\"448\":1}}],[\"可使用事务\",{\"1\":{\"2648\":4}}],[\"可使用关键字final来修饰\",{\"1\":{\"1348\":1}}],[\"可返回表中的多条记录\",{\"1\":{\"2603\":1}}],[\"可用性\",{\"1\":{\"3639\":1}}],[\"可用的内存将会减少\",{\"1\":{\"3504\":1}}],[\"可用文档数量\",{\"1\":{\"3127\":1}}],[\"可用1\",{\"1\":{\"2109\":1}}],[\"可用于类型的注解\",{\"0\":{\"1669\":1}}],[\"可用于修饰包\",{\"1\":{\"1635\":1}}],[\"可用于记录时效性数据\",{\"1\":{\"478\":1}}],[\"可多次调用write\",{\"1\":{\"2064\":1}}],[\"可省略\",{\"1\":{\"2060\":1,\"2644\":1}}],[\"可操纵的东西\",{\"1\":{\"1696\":1}}],[\"可增强用户体验\",{\"1\":{\"1693\":1}}],[\"可重复的\",{\"1\":{\"1918\":1}}],[\"可重复的数据\",{\"1\":{\"1826\":1,\"1859\":1}}],[\"可重复的注解及可用于类型的注解\",{\"1\":{\"1665\":1}}],[\"可重复\",{\"1\":{\"1822\":1}}],[\"可重复注解\",{\"0\":{\"1666\":1}}],[\"可自己拿来用\",{\"1\":{\"2644\":1}}],[\"可自行选择\",{\"1\":{\"1607\":1}}],[\"可自动转换的基本数据类型除外\",{\"1\":{\"1426\":1}}],[\"可不创建对象\",{\"1\":{\"1473\":1}}],[\"可维护性\",{\"1\":{\"1301\":1}}],[\"可知构造器将pattern对象的引用赋于matcher中变量parentpattern\",{\"1\":{\"1004\":1}}],[\"可通过class类的静态方法forname\",{\"1\":{\"836\":1,\"2268\":1}}],[\"可变形参\",{\"1\":{\"2580\":1}}],[\"可变形参的两种写法\",{\"1\":{\"1297\":1}}],[\"可变参数的重写\",{\"0\":{\"1376\":1}}],[\"可变个数形参在方法的形参中\",{\"1\":{\"1295\":2}}],[\"可变个数形参的第二种写法\",{\"1\":{\"1295\":1}}],[\"可变个数形参的方法与本类中方法名相同\",{\"1\":{\"1295\":2}}],[\"可变个数形参的方法\",{\"0\":{\"1294\":1}}],[\"可变个数形参\",{\"1\":{\"1294\":1}}],[\"可变的字符序列\",{\"1\":{\"690\":2}}],[\"可变性\",{\"1\":{\"686\":1,\"697\":1,\"708\":1}}],[\"可配置项非常多\",{\"1\":{\"588\":1}}],[\"可为空\",{\"1\":{\"501\":1}}],[\"可发送多次消息\",{\"1\":{\"448\":1}}],[\"可能存在多个人同时修改文档\",{\"1\":{\"3493\":1}}],[\"可能存在线程安全问题\",{\"1\":{\"2795\":1}}],[\"可能两个版本的文档都会被一个查询匹配到\",{\"1\":{\"3447\":1}}],[\"可能有多个构造器\",{\"1\":{\"2298\":1}}],[\"可能发生变化\",{\"1\":{\"2158\":1}}],[\"可能生成某种异常\",{\"1\":{\"1597\":1}}],[\"可能读取失败\",{\"1\":{\"1592\":1}}],[\"可能出现classcastexception\",{\"1\":{\"1955\":1}}],[\"可能出现classcastexception的异常\",{\"1\":{\"1415\":1}}],[\"可能出现异常的代码\",{\"1\":{\"1585\":1}}],[\"可能是多个异常\",{\"1\":{\"873\":1,\"2296\":1}}],[\"可能抛出\",{\"1\":{\"836\":1,\"2268\":1}}],[\"可能没有一个真实存在的文件或目录\",{\"1\":{\"786\":1,\"2010\":1}}],[\"可能跟预想的不一样\",{\"1\":{\"217\":1}}],[\"可能会产生数据损坏\",{\"1\":{\"3756\":1}}],[\"可能会产生冲突bug\",{\"1\":{\"529\":1}}],[\"可能会遇到报错\",{\"1\":{\"3675\":1}}],[\"可能会遇到bug\",{\"1\":{\"143\":1}}],[\"可能会损害数据\",{\"1\":{\"3564\":1}}],[\"可能会将文本拆分成词条\",{\"1\":{\"3464\":1}}],[\"可能会造成不必要的错误\",{\"1\":{\"2992\":1}}],[\"可能会造成不同对象拥有相同的hashcode\",{\"1\":{\"1898\":1}}],[\"可能会乱码\",{\"1\":{\"2038\":1}}],[\"可能会发生阻塞\",{\"1\":{\"1769\":1}}],[\"可能会发生除不尽的情况\",{\"1\":{\"783\":1}}],[\"可能会抛出的异常类型\",{\"1\":{\"1598\":1}}],[\"可能会带来意想不到的结果\",{\"1\":{\"1572\":1}}],[\"可能会导致数据的错误\",{\"1\":{\"1302\":1}}],[\"可能会导致写入失败\",{\"1\":{\"826\":1}}],[\"可能会出现集合的字段和实体类的字段不匹配\",{\"1\":{\"400\":1}}],[\"可能会出现驱动类过时的问题\",{\"1\":{\"369\":1}}],[\"可能会出现无法判断是信息一直没更新\",{\"1\":{\"315\":1}}],[\"可能会出现一个提示信息\",{\"1\":{\"209\":1}}],[\"可能会有bug\",{\"1\":{\"169\":1}}],[\"可能会根据开发环境添加诸如application\",{\"1\":{\"142\":1}}],[\"可能与springboot的版本号对不上导致无法引入报错\",{\"1\":{\"100\":1}}],[\"可能并没有专门的架构师或测试人员\",{\"1\":{\"33\":1}}],[\"可以读写所有数据库中任何数据\",{\"1\":{\"3704\":1}}],[\"可以读写指定数据库中任何数据\",{\"1\":{\"3704\":1}}],[\"可以读取指定数据库以及对数据库进行清理\",{\"1\":{\"3704\":1}}],[\"可以读取指定数据库中任何数据\",{\"1\":{\"3704\":1}}],[\"可以读取任何数据库以及对数据库进行清理\",{\"1\":{\"3704\":1}}],[\"可以读取所有数据库中任何数据\",{\"1\":{\"3704\":1}}],[\"可以读或选举\",{\"1\":{\"3644\":1}}],[\"可以随意连接到实例进行各种操作\",{\"1\":{\"3692\":1}}],[\"可以随意定义\",{\"1\":{\"2716\":1}}],[\"可以发现members里存在了两个节点\",{\"1\":{\"3673\":1}}],[\"可以说\",{\"1\":{\"3639\":1}}],[\"可以说是目前最好的连接池之一\",{\"1\":{\"2670\":1}}],[\"可以说是针对监控而生的db连接池\",{\"1\":{\"2670\":1}}],[\"可以移除指定的索引\",{\"1\":{\"3629\":1}}],[\"可以登录\",{\"1\":{\"3567\":1}}],[\"可以适当调大\",{\"1\":{\"3533\":1}}],[\"可以成为\",{\"1\":{\"3526\":1}}],[\"可以成功获取\",{\"1\":{\"156\":1}}],[\"可以全局设置也可以在索引级别进行修改\",{\"1\":{\"3509\":1}}],[\"可以减轻伸缩堆大小带来的压力\",{\"1\":{\"3503\":1}}],[\"可以利用\",{\"1\":{\"3497\":1}}],[\"可以利用省略break的特性\",{\"1\":{\"1176\":1}}],[\"可以先禁止\",{\"1\":{\"3518\":1}}],[\"可以先关闭自动刷新\",{\"1\":{\"3454\":1}}],[\"可以先使用flatmap\",{\"1\":{\"2472\":1}}],[\"可以分词为\",{\"1\":{\"3435\":1}}],[\"可以按需伸缩集群\",{\"1\":{\"3393\":1}}],[\"可以按照优化章节的内容重新配置内存\",{\"1\":{\"3312\":1,\"3345\":1}}],[\"可以按照添加的顺序实现遍历\",{\"1\":{\"1913\":1}}],[\"可以按照添加的顺序遍历\",{\"1\":{\"1886\":1}}],[\"可以按照添加对象的指定属性\",{\"1\":{\"1887\":1}}],[\"可以安装浏览器插件elasticsearch\",{\"1\":{\"3383\":1}}],[\"可以定义任意多的索引\",{\"1\":{\"3360\":1}}],[\"可以定义成内部类\",{\"1\":{\"893\":1}}],[\"可以逐渐删除\",{\"1\":{\"3276\":1}}],[\"可以拥有任意多个节点\",{\"1\":{\"3261\":1}}],[\"可以依次指定多个要修改的字段\",{\"1\":{\"3217\":1}}],[\"可以扩展到上百台服务器\",{\"1\":{\"3091\":1}}],[\"可以和程序的容器\",{\"1\":{\"2928\":1}}],[\"可以立即销毁session\",{\"1\":{\"2924\":1}}],[\"可以重试更新\",{\"1\":{\"3495\":1}}],[\"可以重置\",{\"1\":{\"3340\":1}}],[\"可以重定向到任何位置的资源\",{\"1\":{\"2912\":1}}],[\"可以重复的\",{\"1\":{\"1912\":1}}],[\"可以查阅javaee\",{\"1\":{\"2838\":1}}],[\"可以查看到主节点的信息\",{\"1\":{\"3665\":1}}],[\"可以查看指定索引下的所有文档\",{\"1\":{\"3226\":1}}],[\"可以查看日志相亲\",{\"1\":{\"339\":1}}],[\"可以查看项目运行的所有环境设置\",{\"1\":{\"331\":1}}],[\"可以同时被主分片\",{\"1\":{\"3393\":1}}],[\"可以同时引入多个约束文档\",{\"1\":{\"3030\":1}}],[\"可以同时创建多层目录\",{\"1\":{\"805\":1}}],[\"可以同设置\",{\"1\":{\"2794\":1}}],[\"可以部署web项目\",{\"1\":{\"2694\":1}}],[\"可以很好的监控db池连接和sql的执行情况\",{\"1\":{\"2670\":1}}],[\"可以很简单的穷举出需要多少个函数式接口\",{\"1\":{\"2385\":1}}],[\"可以开启事务\",{\"1\":{\"2625\":1}}],[\"可以组合ispresent一起用\",{\"1\":{\"2507\":1}}],[\"可以组合多个条件\",{\"1\":{\"541\":1}}],[\"可以更好的表达这个概念\",{\"1\":{\"2495\":1}}],[\"可以方便地创建常见收集器实例\",{\"1\":{\"2490\":1}}],[\"可以方便地加入控制逻辑\",{\"1\":{\"1305\":1}}],[\"可以接个map\",{\"1\":{\"2467\":1}}],[\"可以只返回聚合结果\",{\"1\":{\"3188\":1}}],[\"可以只有终止操作\",{\"1\":{\"2455\":1}}],[\"可以只选版本\",{\"1\":{\"581\":1}}],[\"可以执行非常复杂的查找\",{\"1\":{\"2436\":1}}],[\"可以认为是lambda表达式的一个语法糖\",{\"1\":{\"2396\":1}}],[\"可以代理所有的被代理类\",{\"1\":{\"2334\":1}}],[\"可以操作blob数据\",{\"1\":{\"2561\":1}}],[\"可以操作非public修饰的类内部成员\",{\"1\":{\"2317\":1}}],[\"可以操作前先判断下\",{\"1\":{\"420\":1}}],[\"可以广播发送\",{\"1\":{\"2205\":1}}],[\"可以替代标准的java\",{\"1\":{\"2161\":1}}],[\"可以替换成is\",{\"1\":{\"1530\":1}}],[\"可以向已存在的文件后追加内容\",{\"1\":{\"2129\":1}}],[\"可以强制将缓冲区的内容全部写入输出流\",{\"1\":{\"2074\":1}}],[\"可以强转\",{\"1\":{\"1415\":1}}],[\"可以强转为int\",{\"1\":{\"762\":1}}],[\"可以循环读取所有的数据\",{\"1\":{\"2049\":1}}],[\"可以获取数组的stream\",{\"1\":{\"2446\":1}}],[\"可以获取数据\",{\"1\":{\"1993\":1}}],[\"可以获取任何修饰符修饰的方法\",{\"1\":{\"859\":1,\"2312\":1}}],[\"可以赋值为null\",{\"1\":{\"3588\":1}}],[\"可以赋值\",{\"1\":{\"1991\":1}}],[\"可以声明为静态的\",{\"1\":{\"1982\":1}}],[\"可以声明多个变量\",{\"1\":{\"1179\":1}}],[\"可以作为非静态属性的类型\",{\"1\":{\"1969\":1}}],[\"可以作为参数\",{\"1\":{\"729\":1}}],[\"可以指明具体的泛型类型\",{\"1\":{\"1959\":1}}],[\"可以指定构造器的第二个参数\",{\"1\":{\"2060\":1}}],[\"可以指定\",{\"1\":{\"997\":1}}],[\"可以指定泛型\",{\"1\":{\"904\":1,\"1957\":1}}],[\"可以指定复制的长度\",{\"1\":{\"895\":1}}],[\"可以指定字符串长度\",{\"1\":{\"696\":1}}],[\"可以指定第二个参数\",{\"1\":{\"682\":1,\"934\":1,\"935\":1,\"992\":1}}],[\"可以保证所有的\",{\"1\":{\"1914\":1,\"1933\":1}}],[\"可以保障并发访问安全问题\",{\"1\":{\"382\":1}}],[\"可以确保集合元素处于排序状态\",{\"1\":{\"1887\":1}}],[\"可以存储任意多的文档\",{\"1\":{\"3362\":1}}],[\"可以存储null值\",{\"1\":{\"1883\":1}}],[\"可以存储生日\",{\"1\":{\"714\":1}}],[\"可以动态地把多个对象的引用放入容器中\",{\"1\":{\"1820\":1}}],[\"可以动态读取项目信息\",{\"1\":{\"345\":1}}],[\"可以避免频繁创建销毁\",{\"1\":{\"1812\":1}}],[\"可以抛出异常\",{\"1\":{\"1807\":1}}],[\"可以显式加锁\",{\"1\":{\"1780\":1}}],[\"可以显式的使用\",{\"1\":{\"1330\":1}}],[\"可以访问相同的变量和对象\",{\"1\":{\"1687\":1}}],[\"可以取多个枚举值\",{\"1\":{\"1660\":1}}],[\"可以通俗的理解为\",{\"1\":{\"1652\":1}}],[\"可以通过compass直接可视化的查看执行计划\",{\"1\":{\"3633\":1}}],[\"可以通过class类的getdeclaredconstructor\",{\"1\":{\"2286\":1}}],[\"可以通过官网下载独立安装包\",{\"1\":{\"3569\":1}}],[\"可以通过修改参数\",{\"1\":{\"3509\":1}}],[\"可以通过修改配置文件\",{\"1\":{\"3073\":1}}],[\"可以通过设置优先级\",{\"1\":{\"3687\":1}}],[\"可以通过设置\",{\"1\":{\"3453\":1}}],[\"可以通过match\",{\"1\":{\"3178\":1}}],[\"可以通过手动创建cookie\",{\"1\":{\"3070\":1}}],[\"可以通过请求对象request获取cookie\",{\"1\":{\"3043\":1}}],[\"可以通过以下两种方式获取\",{\"1\":{\"2930\":1}}],[\"可以通过将\",{\"1\":{\"2800\":1}}],[\"可以通过调用\",{\"1\":{\"2564\":1,\"2567\":1,\"2588\":1}}],[\"可以通过下面的几个构造器来初始化一个\",{\"1\":{\"2238\":1}}],[\"可以通过构造方法设置name\",{\"1\":{\"1728\":1}}],[\"可以通过实现类对象来调用\",{\"1\":{\"1517\":1}}],[\"可以通过for循环遍历数组\",{\"1\":{\"1222\":1}}],[\"可以通过标签指明要跳过的是哪一层循环\",{\"1\":{\"1195\":1}}],[\"可以通过配置文件设置他的属性\",{\"1\":{\"556\":1}}],[\"可以通过配置客户端的方式在其他的springboot程序中添加客户端坐标\",{\"1\":{\"327\":1}}],[\"可以通过这些元数据来决定bean的加载\",{\"1\":{\"523\":1}}],[\"可以通过\",{\"1\":{\"215\":1,\"216\":1,\"1059\":1,\"1274\":1,\"2389\":1,\"2588\":1,\"3557\":1}}],[\"可以通过application\",{\"1\":{\"194\":1}}],[\"可以像修饰符一样被使用\",{\"1\":{\"1635\":1}}],[\"可以根据语言类型和使用场景指定适合的分析器\",{\"1\":{\"3474\":1}}],[\"可以根据单词快速获取包含这个单词的文档列表\",{\"1\":{\"3429\":1}}],[\"可以根据请求头\",{\"1\":{\"2847\":1}}],[\"可以根据需求修改servlet模板\",{\"1\":{\"2789\":1}}],[\"可以根据需要转型\",{\"1\":{\"864\":1}}],[\"可以根据序号存取容器中的元素\",{\"1\":{\"1858\":1}}],[\"可以根据名字判断异常类型\",{\"1\":{\"1611\":1,\"1613\":1}}],[\"可以用上比较运算符\",{\"1\":{\"3614\":1}}],[\"可以用kibana搜索\",{\"1\":{\"3350\":1}}],[\"可以用于发送网络消息\",{\"1\":{\"2214\":1,\"2220\":1}}],[\"可以用于接收网络消息\",{\"1\":{\"2214\":1}}],[\"可以用randomaccessfile这个类\",{\"1\":{\"2140\":1}}],[\"可以用\",{\"1\":{\"2045\":1}}],[\"可以用集合取代\",{\"1\":{\"1823\":1}}],[\"可以用arithmeticexception\",{\"1\":{\"1586\":1}}],[\"可以用该异常类作为catch的参数\",{\"1\":{\"1586\":1}}],[\"可以用来存储限于本地单台服务器的任意集合\",{\"1\":{\"3574\":1}}],[\"可以用来查看文本是如何被分析器分析的\",{\"1\":{\"3472\":1}}],[\"可以用来进行搜索\",{\"1\":{\"3197\":1}}],[\"可以用来计算时间差\",{\"1\":{\"881\":1}}],[\"可以用来替换默认配置\",{\"1\":{\"531\":1}}],[\"可以不加仲裁者\",{\"1\":{\"3646\":1}}],[\"可以不作处理\",{\"1\":{\"1573\":1}}],[\"可以不配置discovery\",{\"1\":{\"3269\":1}}],[\"可以不配置\",{\"1\":{\"477\":1}}],[\"可以进行样式配置\",{\"1\":{\"3193\":1}}],[\"可以进行数据的共享\",{\"1\":{\"2902\":1}}],[\"可以进行关闭切换其他tomcat模板\",{\"1\":{\"2760\":1}}],[\"可以进行add和其他操作了\",{\"1\":{\"1906\":1}}],[\"可以进行异常的处理\",{\"1\":{\"1571\":1}}],[\"可以进行遍历了\",{\"1\":{\"970\":1}}],[\"可以给静态属性赋值\",{\"1\":{\"1526\":1}}],[\"可以从主分片或者从其它任意副本分片检索文档\",{\"1\":{\"3409\":1}}],[\"可以从生命周期的角度去理解\",{\"1\":{\"1484\":1}}],[\"可以从指定的index开始插入另一个集合的数据\",{\"1\":{\"946\":1}}],[\"可以考虑以下几个方面来提升写索引的性能\",{\"1\":{\"3513\":1}}],[\"可以考虑内部类声明为静态的\",{\"1\":{\"1455\":1}}],[\"可以考虑赋值的位置有\",{\"1\":{\"1352\":1}}],[\"可以被放置到集群中的任何节点上\",{\"1\":{\"3365\":1}}],[\"可以被abstract修饰\",{\"1\":{\"1454\":1}}],[\"可以被final修饰\",{\"1\":{\"1454\":1}}],[\"可以被4种不同的权限修饰\",{\"1\":{\"1453\":1}}],[\"可以被static修饰\",{\"1\":{\"1453\":1}}],[\"可以转\",{\"1\":{\"1419\":1}}],[\"可以转为true\",{\"1\":{\"671\":1}}],[\"可以继承genericservlet\",{\"1\":{\"2807\":1}}],[\"可以继承的观点是\",{\"1\":{\"1366\":1}}],[\"可以继续添加非通用的api\",{\"1\":{\"637\":1}}],[\"可以链式继承\",{\"1\":{\"1363\":1}}],[\"可以理解为js\",{\"1\":{\"2357\":1}}],[\"可以理解为应用程序的集合\",{\"1\":{\"1683\":2}}],[\"可以理解为异常的处理方式\",{\"1\":{\"1566\":1}}],[\"可以理解为\",{\"1\":{\"1339\":1,\"1650\":2,\"2937\":1}}],[\"可以调用form和size方法设置分页\",{\"1\":{\"3241\":1}}],[\"可以调用fetchsource方法指定过滤的字段\",{\"1\":{\"3233\":1}}],[\"可以调用size\",{\"1\":{\"3250\":1}}],[\"可以调用sort方法\",{\"1\":{\"3243\":1}}],[\"可以调用son类中的属性了\",{\"1\":{\"1411\":1}}],[\"可以调用son类中独有的方法了\",{\"1\":{\"1411\":1}}],[\"可以调用stream类静态方法\",{\"1\":{\"2448\":1}}],[\"可以调用下面两个方法\",{\"1\":{\"1589\":1}}],[\"可以调用静态方法\",{\"1\":{\"1526\":1}}],[\"可以调用多个接口的\",{\"1\":{\"1518\":1}}],[\"可以调用外部类的结构\",{\"1\":{\"1453\":1}}],[\"可以调用类的属性\",{\"1\":{\"1326\":1}}],[\"可以调用当前类的属性或方法\",{\"1\":{\"1282\":1}}],[\"可以调用compareto方法比较两个digdecimal的数值大小\",{\"1\":{\"785\":1}}],[\"可以return一个表达式\",{\"1\":{\"1277\":1}}],[\"可以实现\",{\"1\":{\"3084\":1}}],[\"可以实现高效的批量操作\",{\"1\":{\"2561\":1}}],[\"可以实现无痛的网络连接\",{\"1\":{\"2171\":1}}],[\"可以实现代码重用\",{\"1\":{\"1276\":1}}],[\"可以实现在容器初始化过程中进行bean的加载控制\",{\"1\":{\"522\":1}}],[\"可以静态初始化\",{\"1\":{\"1237\":1}}],[\"可以为循环添加label标识符\",{\"1\":{\"1194\":1}}],[\"可以为类注入日志对象\",{\"1\":{\"290\":1}}],[\"可以把这个数值配置大一些\",{\"1\":{\"2674\":1}}],[\"可以把数组看做是一个特殊的类\",{\"1\":{\"2429\":1}}],[\"可以把一个用户线程变成一个守护线程\",{\"1\":{\"1711\":1}}],[\"可以把一个字符串转为对应的枚举类对象\",{\"1\":{\"1627\":1}}],[\"可以把接口当做工具类使用\",{\"1\":{\"1520\":1}}],[\"可以把语句组合成能完成一定功能的小逻辑模块\",{\"1\":{\"1165\":1}}],[\"可以把正则表达式字符串编译成pattern对象\",{\"1\":{\"993\":1}}],[\"可以1个是空格\",{\"1\":{\"1104\":1}}],[\"可以写多行\",{\"1\":{\"1055\":1}}],[\"可以匹配一切字符\",{\"1\":{\"997\":1}}],[\"可以遍历了\",{\"1\":{\"969\":1}}],[\"可以迭代value\",{\"1\":{\"958\":1}}],[\"可以迭代key\",{\"1\":{\"958\":1}}],[\"可以比较值\",{\"1\":{\"910\":1}}],[\"可以正常比较值\",{\"1\":{\"910\":1}}],[\"可以正常查询\",{\"1\":{\"366\":1}}],[\"可以当做读取数据的载体\",{\"1\":{\"815\":1}}],[\"可以自动生成equals重写\",{\"1\":{\"1428\":1}}],[\"可以自动进行\",{\"1\":{\"1413\":1}}],[\"可以自己写递归\",{\"1\":{\"810\":1}}],[\"可以自定义很多策略\",{\"1\":{\"479\":1}}],[\"可以表示不可变的任意精度的整数\",{\"1\":{\"777\":1}}],[\"可以省略驱动的注册\",{\"1\":{\"2548\":1}}],[\"可以省略初始值\",{\"1\":{\"2488\":1}}],[\"可以省略return\",{\"1\":{\"2364\":1}}],[\"可以省略abstract\",{\"1\":{\"1507\":1}}],[\"可以省略public\",{\"1\":{\"1507\":1}}],[\"可以省略循环体种的一些元素\",{\"1\":{\"1186\":1}}],[\"可以省略的\",{\"1\":{\"1171\":1}}],[\"可以省略\",{\"1\":{\"749\":1,\"1648\":1,\"2363\":1,\"2364\":1}}],[\"可以省略第二个参数\",{\"1\":{\"669\":1}}],[\"可以额外指定两个范围参数\",{\"1\":{\"700\":1}}],[\"可以是索引名\",{\"1\":{\"3630\":1}}],[\"可以是任意节点作为协调节点\",{\"1\":{\"3407\":1}}],[\"可以是任意能转为string的数据类型\",{\"1\":{\"703\":1}}],[\"可以是1个或多个查询条件\",{\"1\":{\"3169\":1}}],[\"可以是文件对象\",{\"1\":{\"2133\":1}}],[\"可以是\",{\"1\":{\"786\":1,\"2015\":1}}],[\"可以是各种能自动转为string的数据类型\",{\"1\":{\"700\":1}}],[\"可以是全类名\",{\"1\":{\"541\":1}}],[\"可以将额外的mongod实例添加到副本集作为仲裁者\",{\"1\":{\"3646\":1}}],[\"可以将请求发送到集群中的任何节点\",{\"1\":{\"3376\":1}}],[\"可以将\",{\"1\":{\"3012\":1,\"3516\":1}}],[\"可以将流中元素反复结合起来\",{\"1\":{\"2487\":1}}],[\"可以将方法名看做是lambda表达式中\",{\"1\":{\"2399\":1}}],[\"可以将该异常throws到调用处\",{\"1\":{\"1609\":1}}],[\"可以将char\",{\"1\":{\"673\":1}}],[\"可以将jetcache看作是一个小型框架\",{\"1\":{\"487\":1}}],[\"可以有效描述非结构化数据和结构化数据\",{\"1\":{\"3547\":1}}],[\"可以有效解决数据库访问效率低下的问题\",{\"1\":{\"462\":1}}],[\"可以有不同的方式来实现上述概念模型\",{\"1\":{\"3427\":1}}],[\"可以有class对象的元素\",{\"0\":{\"2264\":1}}],[\"可以有返回值\",{\"1\":{\"1807\":1}}],[\"可以有若干个\",{\"1\":{\"1650\":1}}],[\"可以有多个排序字段\",{\"1\":{\"3185\":1}}],[\"可以有多个属性\",{\"1\":{\"1640\":1}}],[\"可以有多个变量更新\",{\"1\":{\"1179\":1}}],[\"可以有第二个参数\",{\"1\":{\"657\":1}}],[\"可以点击basemapper查看具体有哪些api可以掉用\",{\"1\":{\"622\":1}}],[\"可以点x取消\",{\"1\":{\"96\":1}}],[\"可以直接指定\",{\"1\":{\"3594\":1}}],[\"可以直接输入命令\",{\"1\":{\"3571\":1}}],[\"可以直接连接\",{\"1\":{\"3570\":1}}],[\"可以直接进行iterate遍历getheadernames方法的结果\",{\"1\":{\"2850\":1}}],[\"可以直接获取打包后可以部署的项目目录\",{\"1\":{\"2727\":1}}],[\"可以直接替换\",{\"1\":{\"2410\":1}}],[\"可以直接使用第三方封装好的io流操作包\",{\"1\":{\"2169\":1}}],[\"可以直接使用collection\",{\"1\":{\"744\":1}}],[\"可以直接通过uri进行连接\",{\"1\":{\"3751\":1}}],[\"可以直接通过数组名\",{\"1\":{\"1220\":1}}],[\"可以直接通过下标\",{\"1\":{\"1209\":1}}],[\"可以直接在编辑器里运行\",{\"1\":{\"1042\":1}}],[\"可以直接查看该类的注释来使用正则语法\",{\"1\":{\"984\":1,\"986\":1}}],[\"可以直接调用compareto比较大小\",{\"1\":{\"773\":1}}],[\"可以直接复制使用\",{\"1\":{\"612\":1}}],[\"可以直接去yml文件里读取配置\",{\"1\":{\"544\":1}}],[\"可以再加载配置文件的属性前先进行判断\",{\"1\":{\"556\":1}}],[\"可以控制循环的执行\",{\"1\":{\"1191\":1}}],[\"可以控制各种条件\",{\"1\":{\"542\":1}}],[\"可以控制bean的相关属性\",{\"1\":{\"526\":1}}],[\"可以看到有两个隐藏的集合\",{\"1\":{\"3712\":1}}],[\"可以看到当前系统中可以运行的请求路径\",{\"1\":{\"340\":1}}],[\"可以看做一个库\",{\"1\":{\"3102\":1}}],[\"可以看作是创建bean的\",{\"1\":{\"514\":1}}],[\"可以做简单的定时任务\",{\"1\":{\"491\":1}}],[\"可以做详细配置\",{\"1\":{\"315\":1}}],[\"可以提高查询速度\",{\"1\":{\"3524\":1}}],[\"可以提高配置的层级\",{\"1\":{\"197\":1}}],[\"可以提升并发吞吐量\",{\"1\":{\"3501\":1}}],[\"可以提供缓存的整合方案\",{\"1\":{\"489\":1}}],[\"可以任意取\",{\"1\":{\"2746\":1,\"3248\":1}}],[\"可以任意指定长度\",{\"1\":{\"1237\":1}}],[\"可以任意组合\",{\"1\":{\"488\":1}}],[\"可以任意配置\",{\"1\":{\"345\":1}}],[\"可以帮助开发者快速开启缓存技术\",{\"1\":{\"464\":1}}],[\"可以反复使用\",{\"1\":{\"462\":1}}],[\"可以创建多个cookie对象\",{\"1\":{\"3052\":1}}],[\"可以创建多个tomcat模板给不同的项目用\",{\"1\":{\"2752\":1}}],[\"可以创建多个线程来执行这些不同的任务\",{\"1\":{\"1688\":1}}],[\"可以创建专门的配置类加载第三方bean\",{\"1\":{\"510\":1}}],[\"可以创建各种类型的交换机\",{\"1\":{\"442\":1}}],[\"可以创建一个customerdaoimpltest用来测试customerdaoimpl\",{\"1\":{\"2657\":1}}],[\"可以创建一个配置类\",{\"1\":{\"347\":1,\"401\":1}}],[\"可以创建一个基础控制器basecontroller\",{\"1\":{\"289\":1}}],[\"可以去修改mysql中的配置文件mysql\",{\"1\":{\"368\":1}}],[\"可以选择手动配置\",{\"1\":{\"3556\":1}}],[\"可以选择使用第三方签发的受信任的证书\",{\"1\":{\"3298\":1}}],[\"可以选择使用druid连接池进行连接\",{\"1\":{\"361\":1}}],[\"可以选择给变量一个初始化值\",{\"1\":{\"1270\":1}}],[\"可以选择其他方式创建\",{\"1\":{\"97\":1}}],[\"可以举一反三进行端点信息的二次开发\",{\"1\":{\"344\":1}}],[\"可以称为端点\",{\"1\":{\"342\":1}}],[\"可以以类为单位设置日志的等级\",{\"1\":{\"335\":1}}],[\"可以添加多个映射\",{\"1\":{\"3197\":1}}],[\"可以添加任何性能指标进行监控\",{\"1\":{\"330\":1}}],[\"可以添加隐藏的选项框\",{\"1\":{\"258\":1}}],[\"可以采用指令重置密码\",{\"1\":{\"3315\":1}}],[\"可以采用数据库连接池技术\",{\"1\":{\"2663\":1}}],[\"可以采用java的批量更新机制\",{\"1\":{\"2614\":1}}],[\"可以采用spring\",{\"1\":{\"319\":1}}],[\"可以采用config\",{\"1\":{\"272\":1}}],[\"可以包含零个或多个appender元素\",{\"1\":{\"308\":1}}],[\"可以输出项目中的debug日志\",{\"1\":{\"308\":1}}],[\"可以使\",{\"1\":{\"308\":1}}],[\"可以使用任何方法生成密钥文件\",{\"1\":{\"3726\":1}}],[\"可以使用limit\",{\"1\":{\"3610\":1}}],[\"可以使用try\",{\"1\":{\"3592\":1}}],[\"可以使用路由快速计算文档所在分片\",{\"1\":{\"3511\":1}}],[\"可以使用方法动态获取虚拟路径\",{\"1\":{\"2916\":1}}],[\"可以使用方法引用\",{\"1\":{\"2397\":1}}],[\"可以使用request对象来共享数据\",{\"1\":{\"2913\":1}}],[\"可以使用return将修改后的数据返回\",{\"1\":{\"1292\":1}}],[\"可以使用configfilter\",{\"1\":{\"2674\":1}}],[\"可以使用批处理的方式\",{\"1\":{\"2622\":1}}],[\"可以使用此对象多次高效地执行该语句\",{\"1\":{\"2556\":1}}],[\"可以使用反射\",{\"1\":{\"2546\":1}}],[\"可以使用静态方法\",{\"1\":{\"2449\":1}}],[\"可以使用数据流\",{\"1\":{\"2122\":1}}],[\"可以使用泛型\",{\"1\":{\"1976\":1}}],[\"可以使用包装类替换\",{\"1\":{\"1969\":1}}],[\"可以使用get\",{\"1\":{\"1728\":1}}],[\"可以使用针对性的代码进行处理\",{\"1\":{\"1561\":1}}],[\"可以使用代码块进行\",{\"1\":{\"1529\":1}}],[\"可以使用在基本数据类型变量和引用数据类型变量中\",{\"1\":{\"1426\":1}}],[\"可以使用在switch\",{\"1\":{\"1175\":1}}],[\"可以使用for循环创建\",{\"1\":{\"1266\":1}}],[\"可以使用第二个参数flags指明模式修饰符\",{\"1\":{\"996\":1}}],[\"可以使用生成的模式创建matcher对象\",{\"1\":{\"987\":1}}],[\"可以使用iterator接口或增强for循环遍历了\",{\"1\":{\"969\":1}}],[\"可以使用idea的设置进行自动隐藏\",{\"1\":{\"103\":1}}],[\"可以使用arrays\",{\"1\":{\"944\":1}}],[\"可以使用withxxx单独设置某个时间维度的时间\",{\"1\":{\"720\":1}}],[\"可以使用一个工具\",{\"1\":{\"620\":1}}],[\"可以使用\",{\"1\":{\"397\":1,\"1328\":1,\"1342\":1,\"3514\":1,\"3598\":1}}],[\"可以使用双引号包裹\",{\"1\":{\"147\":1}}],[\"可以使用父工程的pom\",{\"1\":{\"115\":1}}],[\"可以对整个集群或数据库系统进行管理操作\",{\"1\":{\"3704\":1}}],[\"可以对\",{\"1\":{\"2983\":1}}],[\"可以对具体runnable\",{\"1\":{\"1808\":1}}],[\"可以对字符串内容进行增删\",{\"1\":{\"686\":1}}],[\"可以对将要生成的代码的模板进行配置\",{\"1\":{\"588\":1}}],[\"可以对bean的加载进行编程化的控制\",{\"1\":{\"522\":1}}],[\"可以对ehcache进一步配置\",{\"1\":{\"477\":1}}],[\"可以对基本的日志策略进行配置\",{\"1\":{\"304\":1}}],[\"可以对餐厅的分类\",{\"1\":{\"49\":1}}],[\"可以拼接任意普通字符串\",{\"1\":{\"299\":1}}],[\"可以在指定数据库创建和修改用户\",{\"1\":{\"3704\":2}}],[\"可以在ﬁnd方法后调用limit来返回结果\",{\"1\":{\"3610\":1}}],[\"可以在config目录下创建certs目录用来存放证书\",{\"1\":{\"3297\":1}}],[\"可以在本地下载上传到服务器\",{\"1\":{\"3287\":1,\"3318\":1}}],[\"可以在添加数据时\",{\"1\":{\"3136\":1}}],[\"可以在转发资源间使用request共享数据\",{\"1\":{\"2904\":1}}],[\"可以在范围内共享数据\",{\"1\":{\"2901\":1,\"2919\":1,\"2936\":1}}],[\"可以在中间接filter\",{\"1\":{\"2482\":1}}],[\"可以在java层面对nosql数据进行类似sql的操作\",{\"1\":{\"2435\":1}}],[\"可以在网络上查找相应的文件或其他资源\",{\"1\":{\"2236\":1}}],[\"可以在实例化时传递一个数据类型\",{\"1\":{\"1946\":1}}],[\"可以在任何需要的场景下调用\",{\"1\":{\"1803\":1}}],[\"可以在调用处\",{\"1\":{\"1609\":1}}],[\"可以在创建对象时\",{\"1\":{\"1528\":1}}],[\"可以在创建项目时\",{\"1\":{\"371\":1}}],[\"可以在方法中\",{\"1\":{\"1296\":1}}],[\"可以在声明属性时\",{\"1\":{\"1273\":1}}],[\"可以在注释里写html标签\",{\"1\":{\"1056\":1}}],[\"可以在有main方法的类中\",{\"1\":{\"1051\":1}}],[\"可以在各个平台运行\",{\"1\":{\"1013\":1}}],[\"可以在键盘输入字符\",{\"1\":{\"887\":1,\"1008\":1}}],[\"可以在springboot\",{\"1\":{\"343\":1}}],[\"可以在配置文件中\",{\"1\":{\"298\":1}}],[\"可以在线浏览菜品\",{\"1\":{\"49\":1}}],[\"可以精确到某个包的日志等级\",{\"1\":{\"295\":1}}],[\"可以手动设置为\",{\"1\":{\"3174\":1}}],[\"可以手动设置cookie的存活时间\",{\"1\":{\"3053\":1}}],[\"可以手动销毁session\",{\"1\":{\"3074\":1}}],[\"可以手动加\",{\"1\":{\"622\":1}}],[\"可以手动进行创建对象并初始化\",{\"1\":{\"550\":1}}],[\"可以手动导入该starter\",{\"1\":{\"223\":1}}],[\"可以手动指定版本号\",{\"1\":{\"100\":1}}],[\"可选参数\",{\"1\":{\"1259\":1}}],[\"可选\",{\"0\":{\"623\":1},\"1\":{\"11\":1,\"501\":1,\"662\":1,\"1001\":1,\"1277\":1,\"1816\":1,\"3586\":2,\"3595\":4,\"3604\":2,\"3609\":1,\"3625\":1,\"3666\":1,\"3673\":1,\"3707\":1}}],[\"可略过\",{\"1\":{\"11\":1}}],[\"gz\",{\"1\":{\"2700\":1,\"3287\":1,\"3289\":1,\"3318\":1,\"3320\":1}}],[\"gmail\",{\"1\":{\"2573\":1}}],[\"gmt+08\",{\"1\":{\"1433\":1}}],[\"gb\",{\"1\":{\"3267\":1,\"3503\":1}}],[\"gb2312\",{\"1\":{\"2109\":1}}],[\"gbk等双字节编码方式\",{\"1\":{\"2109\":1}}],[\"gbk\",{\"1\":{\"674\":4,\"2106\":2,\"2109\":1}}],[\"g<\",{\"1\":{\"1989\":1}}],[\"g<a>和g<b>是没有关系的\",{\"1\":{\"1989\":1}}],[\"g<b>并不是g<a>的子类型\",{\"1\":{\"1985\":1}}],[\"girl\",{\"1\":{\"1680\":4,\"2084\":2,\"2612\":1}}],[\"github\",{\"1\":{\"3094\":2,\"3478\":1,\"3480\":1}}],[\"github页\",{\"1\":{\"2671\":1}}],[\"gitignore文件\",{\"1\":{\"578\":1}}],[\"gitignore\",{\"0\":{\"578\":1}}],[\"git\",{\"0\":{\"64\":1},\"1\":{\"10\":1}}],[\"google公司著名的guava项目引入了optional类\",{\"1\":{\"2496\":1}}],[\"google用它来进行网络搜索而出名\",{\"1\":{\"2489\":1}}],[\"google\",{\"1\":{\"2189\":1,\"2193\":2,\"3096\":1}}],[\"goods\",{\"1\":{\"2619\":1,\"2620\":1,\"2621\":1,\"2624\":1,\"2625\":1}}],[\"good\",{\"1\":{\"1059\":1,\"2061\":1,\"2064\":1,\"3587\":1,\"3682\":1}}],[\"gof给迭代器模式\",{\"1\":{\"1835\":1}}],[\"goto\",{\"1\":{\"1080\":1}}],[\"guava的启发\",{\"1\":{\"2496\":1}}],[\"guava通过使用检查空值的方式来防止代码污染\",{\"1\":{\"2496\":1}}],[\"gui\",{\"1\":{\"1019\":1,\"1338\":1}}],[\"gulixueyuan\",{\"1\":{\"3141\":1,\"3142\":2,\"3159\":1,\"3160\":2}}],[\"guli\",{\"1\":{\"308\":2}}],[\"gc\",{\"0\":{\"883\":1},\"1\":{\"883\":1,\"1689\":1}}],[\"gcd\",{\"1\":{\"777\":1}}],[\"gg\",{\"1\":{\"756\":3,\"1854\":2,\"1855\":1}}],[\"global\",{\"1\":{\"617\":1,\"624\":1}}],[\"g\",{\"1\":{\"432\":2,\"677\":1}}],[\"gte\",{\"1\":{\"3164\":1,\"3172\":1,\"3236\":2,\"3237\":1}}],[\"gt\",{\"1\":{\"410\":1,\"3172\":1,\"3236\":1}}],[\"geospatial\",{\"1\":{\"3621\":1}}],[\"gentest<k\",{\"1\":{\"1963\":1}}],[\"gen\",{\"1\":{\"578\":1}}],[\"generate\",{\"1\":{\"2449\":1,\"2451\":2,\"3298\":2}}],[\"generated\",{\"1\":{\"578\":1,\"2683\":2,\"2759\":1,\"3328\":1,\"3355\":1}}],[\"generatecertificate\",{\"1\":{\"418\":1}}],[\"generator\",{\"1\":{\"471\":1,\"472\":1,\"588\":1}}],[\"generictypeclass<\",{\"1\":{\"2004\":1}}],[\"generictest\",{\"1\":{\"1995\":2,\"1996\":2}}],[\"genericclass<e>\",{\"1\":{\"1965\":1}}],[\"genericclass\",{\"1\":{\"1965\":1}}],[\"genericservlet将servlet接口中其他的方法做了默认空实现\",{\"1\":{\"2807\":1}}],[\"genericservlet抽象类\",{\"0\":{\"2807\":1},\"1\":{\"2806\":1}}],[\"generics\",{\"1\":{\"1678\":1}}],[\"genericsuperclass\",{\"1\":{\"842\":2,\"2300\":2,\"2301\":2,\"2653\":2}}],[\"genericdeclaration\",{\"1\":{\"832\":1}}],[\"generic\",{\"0\":{\"1945\":1},\"1\":{\"464\":1}}],[\"gender和tel\",{\"1\":{\"3198\":1}}],[\"gender=male\",{\"1\":{\"408\":1}}],[\"gender=famale\",{\"1\":{\"408\":1,\"409\":1}}],[\"gender\",{\"1\":{\"394\":1,\"3198\":1,\"3199\":1,\"3215\":1,\"3217\":1,\"3220\":3,\"3225\":1,\"3226\":4,\"3227\":2,\"3231\":2,\"3237\":2,\"3240\":3,\"3242\":2,\"3245\":4,\"3253\":1}}],[\"getwriter\",{\"1\":{\"2885\":1,\"2887\":1,\"2888\":1,\"2890\":1}}],[\"get请求http\",{\"1\":{\"3378\":1}}],[\"get请求获取请求参数的方式是request\",{\"1\":{\"2879\":1}}],[\"get请求就返回\",{\"1\":{\"2845\":1}}],[\"get方式\",{\"1\":{\"2860\":1}}],[\"get方式的处理逻辑\",{\"1\":{\"2814\":1}}],[\"gethits\",{\"1\":{\"3226\":1,\"3227\":1,\"3231\":1,\"3234\":1,\"3237\":1,\"3240\":1,\"3242\":1,\"3244\":1,\"3253\":1}}],[\"getheadernames\",{\"1\":{\"2850\":2}}],[\"getheader\",{\"0\":{\"2848\":1},\"1\":{\"2848\":1,\"2849\":2}}],[\"gethost\",{\"1\":{\"2239\":1}}],[\"gethostname\",{\"0\":{\"2195\":1},\"1\":{\"2195\":2}}],[\"gethostaddress\",{\"0\":{\"2194\":1},\"1\":{\"2194\":2}}],[\"gethour\",{\"1\":{\"719\":1}}],[\"getforlist\",{\"1\":{\"2604\":1,\"2648\":1,\"2653\":2,\"2656\":1}}],[\"getfile\",{\"1\":{\"2239\":1}}],[\"getfilename\",{\"1\":{\"2166\":1}}],[\"getfilepointer\",{\"1\":{\"2131\":1}}],[\"getfilepointer方法\",{\"0\":{\"2131\":1}}],[\"getfield\",{\"0\":{\"854\":1,\"2307\":1},\"1\":{\"854\":2,\"2307\":1}}],[\"getfields\",{\"0\":{\"852\":1,\"2289\":1},\"1\":{\"852\":2,\"2289\":1}}],[\"getgradelist\",{\"1\":{\"2469\":1,\"2471\":1}}],[\"getgenericsuperclass\",{\"0\":{\"842\":1,\"2300\":1},\"1\":{\"842\":2,\"2300\":1,\"2301\":1,\"2653\":1}}],[\"getquerystring\",{\"1\":{\"2845\":1,\"2846\":1,\"2860\":1,\"2862\":1,\"2879\":1}}],[\"getquery\",{\"1\":{\"2239\":1}}],[\"getlasterrordefaults\",{\"1\":{\"3667\":1}}],[\"getlasterrormodes\",{\"1\":{\"3667\":1}}],[\"getlastmodified\",{\"1\":{\"2242\":1}}],[\"getlength\",{\"1\":{\"2232\":1,\"2234\":1}}],[\"getlocalport\",{\"1\":{\"2214\":1,\"2233\":1}}],[\"getlocaladdress\",{\"1\":{\"2214\":1,\"2233\":1}}],[\"getlocalhost\",{\"0\":{\"2192\":1},\"1\":{\"2192\":2}}],[\"getlogger\",{\"1\":{\"288\":1}}],[\"getobj\",{\"1\":{\"2253\":1}}],[\"getobjecttype\",{\"1\":{\"514\":1}}],[\"getobject\",{\"1\":{\"514\":1,\"2600\":1,\"2603\":1,\"2653\":3}}],[\"getoutputstream\",{\"1\":{\"2214\":1,\"2217\":1,\"2220\":1,\"2221\":1,\"2242\":1,\"2885\":1,\"2893\":1,\"2894\":1,\"2895\":1,\"2896\":1}}],[\"getroot\",{\"1\":{\"2166\":1}}],[\"getrealpath\",{\"0\":{\"2940\":1},\"1\":{\"2940\":1,\"2942\":3}}],[\"getreader\",{\"1\":{\"2855\":1,\"2858\":1,\"2860\":1,\"2862\":1,\"2879\":1}}],[\"getrequest\",{\"1\":{\"3225\":3}}],[\"getrequestdispatcher\",{\"1\":{\"2900\":2,\"2903\":1}}],[\"getrequesturi\",{\"1\":{\"2845\":1,\"2846\":1}}],[\"getrequesturl\",{\"1\":{\"2845\":1,\"2846\":1}}],[\"getremoteaddr\",{\"1\":{\"2845\":1,\"2846\":1}}],[\"getresult\",{\"1\":{\"3214\":1,\"3217\":1,\"3218\":1}}],[\"getresultset\",{\"1\":{\"2571\":1}}],[\"getresourceasstream\",{\"0\":{\"2281\":1},\"1\":{\"2281\":1,\"2282\":1,\"2551\":1,\"2573\":1,\"2575\":1,\"2672\":1,\"2675\":1}}],[\"getresponse\",{\"1\":{\"432\":1,\"3225\":1}}],[\"getresponse<user>\",{\"1\":{\"432\":1}}],[\"getreturntype\",{\"0\":{\"870\":1},\"1\":{\"870\":2,\"2296\":2}}],[\"getrecords\",{\"1\":{\"628\":1}}],[\"getupdatecount\",{\"1\":{\"2571\":1}}],[\"getuname\",{\"1\":{\"1980\":1}}],[\"getuser\",{\"1\":{\"1401\":2}}],[\"getnum\",{\"1\":{\"1381\":1,\"1768\":2}}],[\"getnation\",{\"1\":{\"1481\":1,\"1482\":1}}],[\"getnano\",{\"1\":{\"719\":1}}],[\"getnamecount\",{\"1\":{\"2166\":1}}],[\"getname\",{\"0\":{\"790\":1,\"840\":1,\"863\":1,\"871\":1},\"1\":{\"499\":2,\"550\":2,\"554\":4,\"632\":1,\"633\":2,\"636\":3,\"647\":2,\"790\":2,\"840\":2,\"863\":2,\"871\":2,\"872\":1,\"1432\":1,\"1720\":2,\"1721\":1,\"1727\":1,\"1728\":1,\"1737\":2,\"1740\":1,\"1757\":1,\"1760\":1,\"1768\":1,\"1784\":1,\"1804\":1,\"1810\":1,\"1817\":1,\"2166\":1,\"2255\":1,\"2293\":3,\"2296\":7,\"2301\":1,\"2406\":1,\"2407\":2,\"2415\":1,\"2416\":1,\"2479\":1,\"2656\":2,\"2965\":1,\"2966\":1,\"2967\":1,\"2968\":1,\"3044\":2,\"3047\":1}}],[\"getvalue\",{\"1\":{\"971\":1,\"1935\":1,\"1958\":1,\"2648\":1,\"2653\":2,\"2656\":2,\"2965\":1,\"2966\":1,\"2967\":1,\"2968\":1,\"3044\":2,\"3047\":1}}],[\"getkey\",{\"1\":{\"971\":1,\"1935\":1,\"1958\":1}}],[\"getemail\",{\"1\":{\"2656\":2}}],[\"getemployees\",{\"1\":{\"2458\":1,\"2459\":1,\"2460\":1,\"2461\":1,\"2477\":1,\"2478\":1,\"2480\":1,\"2481\":1}}],[\"getencoding\",{\"0\":{\"2099\":1},\"1\":{\"2099\":2}}],[\"getexceptiontypes\",{\"0\":{\"873\":1},\"1\":{\"873\":2,\"2296\":2}}],[\"getelasticsearchtransport\",{\"1\":{\"418\":2}}],[\"getsourceasstring\",{\"1\":{\"3225\":1,\"3226\":1,\"3234\":1,\"3237\":1,\"3240\":1,\"3242\":1,\"3244\":1}}],[\"getstring\",{\"1\":{\"2597\":2,\"2613\":2,\"2690\":2}}],[\"getstulist\",{\"1\":{\"2469\":1,\"2470\":1,\"2475\":1}}],[\"getsystemclassloader\",{\"1\":{\"2573\":1,\"2575\":1,\"2672\":1,\"2675\":1}}],[\"getsalary\",{\"1\":{\"2458\":1,\"2478\":1,\"2483\":1,\"2484\":2,\"2489\":1,\"2491\":2}}],[\"getsettings\",{\"1\":{\"3211\":1}}],[\"getsession\",{\"1\":{\"2923\":2,\"2924\":1,\"2966\":1,\"2968\":1,\"3062\":2,\"3068\":1}}],[\"getservletrequest\",{\"1\":{\"2967\":1}}],[\"getservletcontext\",{\"1\":{\"2930\":4,\"2934\":1,\"2938\":1,\"2942\":1,\"2965\":1}}],[\"getservletconfig\",{\"0\":{\"2804\":1},\"1\":{\"2799\":1,\"2804\":2}}],[\"getservletpath\",{\"1\":{\"2845\":1,\"2846\":1}}],[\"getservletinfo\",{\"0\":{\"2803\":1},\"1\":{\"2799\":1,\"2803\":2}}],[\"getseasondesc\",{\"1\":{\"1621\":1,\"1622\":1}}],[\"getseasonname\",{\"1\":{\"1621\":1,\"1622\":1}}],[\"getsecond\",{\"1\":{\"719\":1}}],[\"getsum\",{\"1\":{\"1283\":2}}],[\"getsuperclass\",{\"0\":{\"841\":1,\"2299\":1},\"1\":{\"841\":2,\"2299\":1,\"2302\":1}}],[\"getsize\",{\"1\":{\"628\":1}}],[\"getyear\",{\"1\":{\"719\":1}}],[\"getport\",{\"1\":{\"2214\":1,\"2233\":1,\"2234\":1,\"2239\":1}}],[\"getproxyinstance\",{\"1\":{\"2342\":1,\"2344\":1,\"2345\":1}}],[\"getprotocol\",{\"1\":{\"2239\":1,\"2845\":1,\"2846\":1}}],[\"getpropertyaction\",{\"1\":{\"2079\":1}}],[\"getproperty\",{\"0\":{\"884\":1},\"1\":{\"152\":3,\"884\":8,\"1939\":1,\"1940\":2,\"2015\":1,\"2282\":2,\"2551\":4,\"2573\":4,\"2575\":4}}],[\"getpriority\",{\"1\":{\"1735\":1,\"1737\":2}}],[\"getparameternames\",{\"1\":{\"2869\":2}}],[\"getparameter\",{\"1\":{\"2869\":2,\"2872\":2,\"2873\":1,\"2878\":1}}],[\"getparametervalues\",{\"1\":{\"2869\":2,\"2872\":1}}],[\"getparametermap\",{\"1\":{\"2869\":2,\"2872\":1}}],[\"getparametertypes\",{\"0\":{\"872\":1},\"1\":{\"872\":2,\"2296\":2}}],[\"getparent\",{\"0\":{\"791\":1,\"845\":1},\"1\":{\"791\":2,\"845\":3,\"2166\":1,\"2280\":2}}],[\"getpackage\",{\"0\":{\"846\":1,\"2303\":1},\"1\":{\"846\":2,\"2303\":1}}],[\"getpath\",{\"0\":{\"789\":1},\"1\":{\"789\":2,\"2239\":1}}],[\"getpage\",{\"1\":{\"635\":1,\"636\":2,\"640\":2,\"647\":3}}],[\"getpages\",{\"1\":{\"628\":1,\"647\":2}}],[\"gettook\",{\"1\":{\"3220\":1,\"3221\":1}}],[\"gettotal\",{\"1\":{\"628\":1}}],[\"gettransactionisolation\",{\"0\":{\"2637\":1},\"1\":{\"2637\":1,\"2639\":1}}],[\"gettime\",{\"1\":{\"2570\":1,\"2573\":1}}],[\"gettype\",{\"0\":{\"862\":1},\"1\":{\"636\":3,\"862\":2,\"2293\":2}}],[\"gettele\",{\"1\":{\"471\":1}}],[\"getter\",{\"1\":{\"155\":1,\"200\":1,\"3215\":1}}],[\"getcustomerbyid\",{\"1\":{\"2655\":1,\"2656\":1,\"2657\":1,\"2676\":1}}],[\"getcurrent\",{\"1\":{\"628\":1}}],[\"getcookies\",{\"1\":{\"3043\":2,\"3047\":1}}],[\"getcount\",{\"1\":{\"2655\":1,\"2656\":1,\"2657\":1}}],[\"getcolumndisplaysize\",{\"1\":{\"2593\":1}}],[\"getcolumntypename\",{\"1\":{\"2593\":1}}],[\"getcolumncount\",{\"1\":{\"2593\":1,\"2600\":1,\"2603\":1,\"2653\":2}}],[\"getcolumnlabel代替\",{\"1\":{\"2602\":1}}],[\"getcolumnlabel\",{\"1\":{\"2593\":1,\"2600\":1,\"2603\":1,\"2653\":2}}],[\"getcolumnname\",{\"1\":{\"2593\":1,\"2602\":1}}],[\"getcomparable\",{\"1\":{\"1458\":1}}],[\"getcontextpath\",{\"1\":{\"2845\":1,\"2846\":1,\"2916\":1}}],[\"getcontenttype\",{\"1\":{\"2242\":1}}],[\"getcontentlength\",{\"1\":{\"2242\":1}}],[\"getcontent\",{\"1\":{\"2242\":1}}],[\"getconstructor\",{\"1\":{\"2257\":1}}],[\"getconstructors\",{\"0\":{\"848\":1},\"1\":{\"848\":2,\"2298\":2}}],[\"getconnection3\",{\"1\":{\"2675\":1,\"2676\":1,\"2686\":1,\"2687\":1,\"2688\":1,\"2689\":1,\"2690\":1,\"2691\":1}}],[\"getconnection\",{\"1\":{\"2547\":1,\"2548\":1,\"2551\":1,\"2567\":1,\"2573\":1,\"2575\":2,\"2577\":1,\"2581\":1,\"2597\":1,\"2600\":1,\"2603\":1,\"2612\":1,\"2613\":1,\"2620\":1,\"2621\":1,\"2624\":1,\"2625\":1,\"2635\":1,\"2639\":1,\"2652\":1,\"2657\":7,\"2672\":2,\"2675\":1}}],[\"getconnect\",{\"1\":{\"1401\":1}}],[\"getcode\",{\"1\":{\"471\":1,\"473\":1}}],[\"getclassloader\",{\"0\":{\"844\":1},\"1\":{\"837\":1,\"844\":2,\"845\":1,\"2269\":1,\"2280\":2,\"2282\":1,\"2342\":1,\"2551\":1}}],[\"getclass\",{\"1\":{\"835\":1,\"837\":1,\"1424\":1,\"1428\":2,\"1432\":1,\"2267\":1,\"2269\":1,\"2285\":1,\"2342\":2,\"2653\":1}}],[\"getclassname\",{\"1\":{\"525\":1}}],[\"getcat\",{\"1\":{\"554\":6}}],[\"getaliases\",{\"1\":{\"3211\":1}}],[\"getall\",{\"1\":{\"623\":1,\"635\":1,\"640\":1,\"647\":1,\"2655\":1,\"2656\":1,\"2657\":1}}],[\"getattribute\",{\"1\":{\"2902\":1,\"2903\":1,\"2920\":2,\"2926\":1,\"2938\":2,\"3065\":1}}],[\"getactualtypearguments\",{\"0\":{\"2301\":1},\"1\":{\"2301\":1,\"2653\":1}}],[\"getannotation\",{\"1\":{\"1680\":1}}],[\"getannotations\",{\"0\":{\"868\":1,\"2304\":1},\"1\":{\"868\":2,\"1680\":1,\"2296\":2,\"2304\":1}}],[\"getabsolutepath\",{\"0\":{\"788\":1},\"1\":{\"788\":2}}],[\"getaddress\",{\"1\":{\"468\":1,\"2232\":1,\"2234\":1}}],[\"getage\",{\"1\":{\"432\":1,\"550\":2,\"551\":1,\"554\":4,\"757\":6,\"1304\":2,\"1368\":3,\"1534\":1,\"1906\":2,\"1936\":2,\"2469\":1,\"2470\":1,\"2471\":1,\"2475\":2,\"2477\":1}}],[\"getxxx\",{\"0\":{\"719\":1,\"2591\":1},\"1\":{\"432\":1,\"1305\":1,\"1306\":1,\"1312\":1,\"2588\":2,\"2591\":1}}],[\"getdate\",{\"1\":{\"2242\":1,\"2597\":1,\"2613\":1,\"2690\":1}}],[\"getdata\",{\"1\":{\"2232\":1,\"2234\":1}}],[\"getdayofyear\",{\"1\":{\"719\":1}}],[\"getdayofmonth\",{\"1\":{\"719\":1}}],[\"getdeclaredmethod\",{\"0\":{\"859\":1,\"2312\":1},\"1\":{\"859\":2,\"874\":1,\"2257\":1,\"2258\":1,\"2311\":2,\"2312\":1}}],[\"getdeclaredmethods\",{\"0\":{\"857\":1},\"1\":{\"857\":2,\"2295\":2,\"2296\":1}}],[\"getdeclaredfield\",{\"0\":{\"855\":1},\"1\":{\"855\":2,\"864\":1,\"865\":1,\"2257\":1,\"2258\":1,\"2306\":2,\"2308\":1,\"2600\":1,\"2603\":1,\"2653\":2}}],[\"getdeclaredfields\",{\"1\":{\"853\":2,\"2291\":1,\"2293\":1}}],[\"getdeclaredconstructor\",{\"0\":{\"850\":1,\"2286\":1,\"2316\":1},\"1\":{\"850\":2,\"877\":1,\"2258\":1,\"2286\":1,\"2315\":1}}],[\"getdeclaredconstructors\",{\"0\":{\"849\":1},\"1\":{\"849\":2,\"2298\":2}}],[\"getdeclarefields\",{\"0\":{\"853\":1,\"2291\":1}}],[\"getdescription\",{\"1\":{\"636\":3}}],[\"getdeletedcount\",{\"1\":{\"404\":1}}],[\"getdocumenttest\",{\"1\":{\"432\":1}}],[\"getid\",{\"1\":{\"2656\":1,\"3067\":1,\"3070\":1}}],[\"getiq\",{\"1\":{\"1354\":1}}],[\"getindexes\",{\"1\":{\"3623\":3,\"3626\":1,\"3627\":1}}],[\"getindexrequest\",{\"1\":{\"3211\":2}}],[\"getindexresponse\",{\"1\":{\"423\":2,\"3211\":1}}],[\"getint\",{\"1\":{\"2597\":1,\"2613\":1,\"2690\":1}}],[\"getinterfaces\",{\"0\":{\"843\":1,\"2302\":1},\"1\":{\"843\":2,\"2302\":2,\"2342\":1}}],[\"getinetaddress\",{\"1\":{\"2214\":1,\"2233\":1}}],[\"getinfo\",{\"1\":{\"1287\":3,\"1403\":2,\"1404\":1}}],[\"getinputstream\",{\"1\":{\"418\":1,\"2214\":1,\"2217\":1,\"2221\":1,\"2225\":1,\"2242\":1,\"2854\":1}}],[\"getinstance\",{\"1\":{\"418\":2,\"1488\":3,\"1489\":1,\"1769\":2,\"2252\":2,\"2603\":1,\"2639\":1,\"2648\":1,\"2653\":2,\"2656\":1}}],[\"getitems\",{\"1\":{\"3220\":1,\"3221\":1}}],[\"getit\",{\"1\":{\"109\":1}}],[\"getmimetype\",{\"0\":{\"2934\":1},\"1\":{\"2934\":1}}],[\"getminute\",{\"1\":{\"719\":1}}],[\"getmaxbirth\",{\"1\":{\"2655\":1,\"2656\":1,\"2657\":1}}],[\"getmappings\",{\"1\":{\"3211\":1}}],[\"getmapping\",{\"1\":{\"109\":1,\"288\":1,\"290\":1,\"309\":1,\"473\":1,\"640\":3,\"647\":3}}],[\"getmetadata\",{\"1\":{\"2592\":1,\"2600\":1,\"2603\":1,\"2653\":2}}],[\"getmethod\",{\"0\":{\"858\":1,\"2313\":1},\"1\":{\"858\":2,\"868\":1,\"1680\":2,\"2313\":1,\"2814\":1,\"2845\":1,\"2846\":1,\"2862\":1}}],[\"getmethods\",{\"0\":{\"856\":1},\"1\":{\"856\":2,\"2295\":2}}],[\"getmessage\",{\"1\":{\"1587\":1,\"1589\":1,\"1609\":1}}],[\"getmoreresults\",{\"1\":{\"2571\":1}}],[\"getmodifiers\",{\"0\":{\"869\":1},\"1\":{\"861\":2,\"869\":2,\"2293\":1,\"2296\":2}}],[\"getmodifier\",{\"0\":{\"861\":1},\"1\":{\"2293\":1}}],[\"getmodifiedcount\",{\"1\":{\"406\":1,\"407\":1}}],[\"getmonthvalue\",{\"1\":{\"719\":1}}],[\"get\",{\"0\":{\"864\":1,\"947\":1,\"963\":1,\"2507\":1},\"1\":{\"379\":2,\"380\":2,\"423\":2,\"432\":2,\"471\":2,\"472\":1,\"474\":1,\"864\":2,\"865\":1,\"947\":3,\"963\":3,\"975\":1,\"1530\":1,\"1809\":1,\"1810\":1,\"1993\":1,\"2164\":1,\"2167\":3,\"2306\":1,\"2309\":1,\"2392\":1,\"2406\":1,\"2407\":1,\"2421\":1,\"2422\":1,\"2507\":2,\"2558\":1,\"2811\":2,\"2812\":1,\"2814\":1,\"2845\":1,\"2846\":1,\"2862\":1,\"2871\":1,\"2872\":1,\"3122\":1,\"3126\":1,\"3139\":1,\"3140\":1,\"3142\":1,\"3157\":1,\"3158\":1,\"3160\":1,\"3162\":1,\"3183\":1,\"3186\":1,\"3188\":1,\"3189\":1,\"3211\":1,\"3225\":1,\"3278\":1,\"3283\":1,\"3402\":1,\"3473\":1,\"3476\":1,\"3480\":1,\"3485\":1,\"3489\":1}}],[\"getbirth\",{\"1\":{\"2656\":2}}],[\"getbinarystream\",{\"1\":{\"2613\":1}}],[\"getblob\",{\"1\":{\"2611\":1,\"2613\":1}}],[\"getbelief\",{\"1\":{\"2344\":1,\"2345\":1}}],[\"getbelif\",{\"1\":{\"2344\":1}}],[\"getbeandefinition\",{\"1\":{\"527\":1,\"530\":1}}],[\"getbean\",{\"1\":{\"128\":1,\"521\":1,\"555\":1}}],[\"getbyname\",{\"0\":{\"2193\":1},\"1\":{\"2193\":3,\"2194\":1,\"2195\":1,\"2196\":1,\"2231\":1}}],[\"getbytes\",{\"0\":{\"674\":1},\"1\":{\"674\":3,\"2139\":1,\"2220\":1,\"2231\":1,\"2896\":1}}],[\"getbyid\",{\"1\":{\"288\":1,\"290\":1,\"309\":1,\"365\":1,\"366\":1,\"635\":1,\"640\":2,\"647\":2}}],[\"grow\",{\"1\":{\"1282\":3}}],[\"groups\",{\"1\":{\"1003\":1}}],[\"group中配置各个组环境组\",{\"1\":{\"280\":1}}],[\"groupid>\",{\"1\":{\"100\":1,\"117\":1,\"118\":1,\"119\":5,\"123\":5,\"134\":2,\"135\":1,\"169\":1,\"170\":1,\"171\":1,\"185\":1,\"209\":1,\"218\":2,\"223\":1,\"239\":1,\"319\":2,\"323\":1,\"355\":2,\"358\":1,\"361\":3,\"371\":3,\"377\":1,\"383\":1,\"387\":1,\"413\":2,\"438\":1,\"450\":1,\"466\":1,\"476\":1,\"482\":1,\"592\":1,\"593\":1,\"594\":1,\"595\":1,\"597\":1,\"598\":1,\"599\":1,\"600\":1,\"602\":1,\"604\":1,\"606\":1,\"607\":1,\"608\":1,\"609\":1,\"611\":2,\"612\":12,\"620\":1,\"3085\":1,\"3205\":2,\"3216\":1,\"3743\":1,\"3748\":1}}],[\"group\",{\"0\":{\"280\":1},\"1\":{\"95\":1,\"280\":1,\"295\":1,\"986\":1,\"3187\":2,\"3188\":2,\"3190\":1,\"3191\":1,\"3247\":2}}],[\"gradelist\",{\"1\":{\"2471\":2}}],[\"grade2\",{\"1\":{\"2469\":4}}],[\"grade1\",{\"1\":{\"2469\":4}}],[\"gradlew\",{\"1\":{\"578\":2}}],[\"graphical\",{\"1\":{\"1019\":1}}],[\"gran\",{\"1\":{\"889\":1}}],[\"green表示健康\",{\"1\":{\"3278\":1}}],[\"green\",{\"1\":{\"308\":1,\"3127\":1,\"3278\":2,\"3279\":1,\"3280\":1,\"3378\":1,\"3387\":1,\"3391\":1}}],[\"grep\",{\"1\":{\"307\":1,\"3342\":1,\"3659\":1}}],[\"gay\",{\"1\":{\"1267\":1,\"1526\":2}}],[\"gan\",{\"1\":{\"677\":1}}],[\"gamelan\",{\"1\":{\"2238\":1}}],[\"game\",{\"1\":{\"148\":2}}],[\"gateway\",{\"1\":{\"10\":1,\"11\":1,\"2240\":1}}],[\"瑞吉外卖\",{\"1\":{\"10\":1}}],[\"项目组的一个子项目\",{\"1\":{\"3092\":1}}],[\"项目访问路径\",{\"1\":{\"2915\":1}}],[\"项目名\",{\"1\":{\"2759\":1}}],[\"项目名称叫sgugo\",{\"1\":{\"2723\":1}}],[\"项目路径\",{\"0\":{\"2749\":1}}],[\"项目部署\",{\"0\":{\"2747\":1}}],[\"项目部署步骤\",{\"0\":{\"250\":1}}],[\"项目的根目录\",{\"1\":{\"2722\":1}}],[\"项目存放的路径\",{\"1\":{\"2716\":1}}],[\"项目中\",{\"1\":{\"1491\":1}}],[\"项目中包含的jar包\",{\"1\":{\"183\":1}}],[\"项目异常处理\",{\"1\":{\"614\":1}}],[\"项目开放的所有api的详细信息\",{\"1\":{\"337\":1}}],[\"项目开发规范\",{\"0\":{\"613\":1}}],[\"项目开发需要非常多的包\",{\"1\":{\"114\":1}}],[\"项目开发手册\",{\"1\":{\"10\":1}}],[\"项目启动时间\",{\"1\":{\"329\":1}}],[\"项目类路径config目录中配置文件\",{\"1\":{\"263\":1}}],[\"项目类路径配置文件\",{\"1\":{\"263\":1}}],[\"项目目录是test1\",{\"1\":{\"2715\":1}}],[\"项目目录下\",{\"1\":{\"2713\":1}}],[\"项目目录\",{\"1\":{\"244\":1,\"245\":1,\"2715\":1}}],[\"项目目标\",{\"0\":{\"50\":1}}],[\"项目默认有一个测试类\",{\"1\":{\"227\":1}}],[\"项目创建完后要把父工程内目录删除\",{\"1\":{\"161\":1}}],[\"项目创建后是可以手动添加依赖的\",{\"1\":{\"96\":1}}],[\"项目搭建完后\",{\"1\":{\"113\":1}}],[\"项目包\",{\"1\":{\"101\":1,\"244\":1}}],[\"项目就创建成功了\",{\"1\":{\"96\":1}}],[\"项目在硬盘上的位置\",{\"1\":{\"95\":1}}],[\"项目介绍\",{\"0\":{\"49\":1}}],[\"项目解析\",{\"0\":{\"107\":1},\"1\":{\"45\":1}}],[\"项目测试通过后\",{\"1\":{\"39\":1}}],[\"项目测试\",{\"1\":{\"36\":1}}],[\"项目上线后\",{\"1\":{\"301\":1}}],[\"项目上线\",{\"1\":{\"33\":1}}],[\"项目整体架构设计\",{\"1\":{\"33\":1}}],[\"项目经理\",{\"1\":{\"33\":1}}],[\"项目代码编写\",{\"0\":{\"28\":1}}],[\"项目\",{\"0\":{\"12\":1},\"1\":{\"10\":1,\"95\":1,\"162\":1}}],[\"项目初始化\",{\"0\":{\"2\":1,\"572\":1}}],[\"d3\",{\"1\":{\"3425\":2,\"3432\":1}}],[\"d2\",{\"1\":{\"3425\":2,\"3432\":1}}],[\"dtd文件名字\",{\"1\":{\"3026\":1}}],[\"dtd文件的位置url\",{\"1\":{\"3026\":1}}],[\"dtd文件的位置\",{\"1\":{\"3026\":1}}],[\"dtd文档示例\",{\"0\":{\"3025\":1}}],[\"dtd\",{\"0\":{\"3024\":1},\"1\":{\"3023\":1,\"3027\":1,\"3488\":2}}],[\"dto\",{\"0\":{\"470\":1},\"1\":{\"470\":1}}],[\"dfile\",{\"1\":{\"2875\":1}}],[\"dql的操作步骤\",{\"0\":{\"2584\":1}}],[\"dql\",{\"0\":{\"2583\":1}}],[\"dql操作\",{\"1\":{\"2566\":1}}],[\"dql构造方法\",{\"1\":{\"646\":1}}],[\"dml方法\",{\"1\":{\"2653\":1}}],[\"dml\",{\"0\":{\"2572\":1},\"1\":{\"2648\":1}}],[\"dml操作示例\",{\"0\":{\"2635\":1}}],[\"dml操作的变量是sql预编译语句\",{\"1\":{\"2579\":1}}],[\"dml操作\",{\"1\":{\"2566\":1}}],[\"dml构造方法\",{\"1\":{\"646\":1}}],[\"dp\",{\"1\":{\"2231\":2,\"2232\":5}}],[\"dns\",{\"1\":{\"2184\":1}}],[\"d1和d3包含了\",{\"1\":{\"3426\":1}}],[\"d1\",{\"1\":{\"1096\":1,\"1114\":1,\"1117\":2,\"1416\":2,\"1445\":2,\"3425\":2,\"3432\":1}}],[\"d+\",{\"1\":{\"679\":1,\"680\":1,\"681\":1,\"989\":1,\"990\":1}}],[\"dysmsapi<\",{\"1\":{\"611\":1}}],[\"daughterdo\",{\"1\":{\"1416\":1}}],[\"daughter\",{\"1\":{\"1415\":2,\"1416\":3}}],[\"day04\",{\"1\":{\"1843\":1}}],[\"days\",{\"1\":{\"721\":2,\"722\":1}}],[\"day\",{\"1\":{\"719\":2,\"720\":4,\"1176\":1}}],[\"dayofyear\",{\"1\":{\"719\":2}}],[\"dayofweek\",{\"1\":{\"501\":1}}],[\"dayofmonthint\",{\"1\":{\"718\":1}}],[\"dayofmonth\",{\"1\":{\"501\":1,\"718\":1}}],[\"dao的实现类\",{\"0\":{\"2645\":1}}],[\"dao的使用流程\",{\"0\":{\"2644\":1}}],[\"dao介绍\",{\"0\":{\"2641\":1}}],[\"dao层的方法名是比较直接的\",{\"1\":{\"634\":1}}],[\"dao开发\",{\"1\":{\"614\":1}}],[\"dao\",{\"0\":{\"365\":1,\"621\":1,\"625\":1,\"629\":1,\"2640\":1},\"1\":{\"365\":1,\"622\":1,\"1538\":1,\"2642\":1,\"2657\":8,\"2676\":1,\"3008\":1,\"3013\":2,\"3746\":1}}],[\"dat\",{\"1\":{\"2146\":2,\"2151\":1,\"2152\":1,\"2156\":1,\"2157\":1}}],[\"data的下的一个模块\",{\"1\":{\"3747\":1}}],[\"data存储的路径\",{\"1\":{\"3501\":1}}],[\"data和logs目录\",{\"1\":{\"3337\":1}}],[\"data和es\",{\"1\":{\"3285\":1}}],[\"datagrampacket的缓冲区填充了接收的数据\",{\"1\":{\"2233\":1}}],[\"datagrampacket\",{\"0\":{\"2234\":1},\"1\":{\"2229\":2,\"2231\":2,\"2232\":2,\"2233\":3,\"2234\":4}}],[\"datagramsocket与datagrampacket\",{\"1\":{\"2230\":1}}],[\"datagramsocket\",{\"0\":{\"2233\":1},\"1\":{\"2229\":2,\"2231\":2,\"2232\":2,\"2233\":3}}],[\"datagram\",{\"1\":{\"2202\":1,\"2210\":1}}],[\"datagramchannel\",{\"1\":{\"2161\":1}}],[\"dataoutput这两个接口\",{\"1\":{\"2128\":1}}],[\"dataoutputstream中的方法\",{\"0\":{\"2125\":1}}],[\"dataoutputstream\",{\"0\":{\"2126\":1},\"1\":{\"2123\":1,\"2126\":2}}],[\"datainputstream中的方法\",{\"0\":{\"2124\":1}}],[\"datainputstream\",{\"0\":{\"2127\":1},\"1\":{\"2123\":1,\"2126\":1,\"2127\":2}}],[\"data注解\",{\"1\":{\"620\":1}}],[\"databind<\",{\"1\":{\"413\":1,\"3216\":1}}],[\"databases\",{\"1\":{\"3571\":1,\"3574\":1}}],[\"database\",{\"1\":{\"388\":1,\"2527\":1,\"3195\":1,\"3545\":2,\"3571\":1,\"3750\":2,\"3751\":2}}],[\"dataunit\",{\"1\":{\"216\":1}}],[\"datasizeunit\",{\"1\":{\"216\":1}}],[\"datasizeunit注解描述存储空间单位\",{\"1\":{\"216\":1}}],[\"datasize\",{\"1\":{\"214\":1,\"216\":2}}],[\"datasource用来取代drivermanager来获取connection\",{\"1\":{\"2668\":1}}],[\"datasource\",{\"1\":{\"153\":1,\"154\":1,\"155\":2,\"156\":2,\"200\":2,\"202\":1,\"203\":1,\"204\":2,\"212\":3,\"356\":1,\"358\":1,\"362\":1,\"372\":1,\"506\":1,\"510\":1,\"543\":1,\"617\":1,\"2668\":2,\"2672\":2,\"2674\":1,\"2675\":1,\"2683\":1}}],[\"data\",{\"0\":{\"3746\":1,\"3747\":1},\"1\":{\"208\":1,\"211\":1,\"219\":1,\"220\":1,\"377\":1,\"387\":2,\"388\":2,\"394\":1,\"404\":1,\"406\":2,\"407\":2,\"414\":2,\"416\":1,\"423\":1,\"427\":1,\"470\":1,\"482\":1,\"546\":1,\"549\":2,\"550\":1,\"553\":1,\"554\":1,\"602\":1,\"612\":1,\"619\":1,\"644\":1,\"646\":5,\"829\":2,\"1293\":7,\"1583\":4,\"1592\":4,\"1600\":4,\"2049\":1,\"2052\":4,\"2082\":4,\"2118\":4,\"2126\":1,\"2127\":1,\"2526\":1,\"2642\":1,\"3124\":1,\"3268\":2,\"3278\":1,\"3279\":1,\"3280\":1,\"3283\":1,\"3321\":1,\"3332\":3,\"3337\":3,\"3339\":4,\"3355\":2,\"3378\":1,\"3380\":1,\"3381\":1,\"3501\":3,\"3526\":1,\"3532\":2,\"3533\":1,\"3547\":1,\"3555\":1,\"3557\":1,\"3558\":1,\"3561\":1,\"3562\":1,\"3654\":1,\"3656\":1,\"3657\":1,\"3658\":1,\"3746\":2,\"3747\":2,\"3748\":1,\"3750\":1,\"3751\":1,\"3756\":2}}],[\"date中的年份是从1900开始的\",{\"1\":{\"708\":1}}],[\"date类都很像\",{\"1\":{\"723\":1}}],[\"date类\",{\"1\":{\"708\":1,\"723\":1}}],[\"datesize类\",{\"1\":{\"216\":1}}],[\"datesize\",{\"0\":{\"216\":1}}],[\"datetimestr\",{\"1\":{\"733\":2,\"736\":2}}],[\"datetimeformatter类用来取代之前的simpledateformatter类\",{\"1\":{\"728\":1}}],[\"datetimeformatter\",{\"0\":{\"728\":1},\"1\":{\"728\":1,\"731\":6,\"732\":2,\"733\":2,\"734\":2,\"735\":2,\"736\":2,\"737\":2}}],[\"datetime\",{\"1\":{\"147\":1}}],[\"date\",{\"1\":{\"147\":1,\"308\":1,\"423\":1,\"492\":3,\"707\":2,\"709\":2,\"731\":4,\"732\":1,\"733\":1,\"746\":1,\"1420\":2,\"1427\":1,\"1433\":5,\"1579\":1,\"2252\":1,\"2562\":2,\"2570\":3,\"2573\":4,\"2597\":1,\"2599\":2,\"2613\":1,\"2655\":1,\"2656\":1,\"2657\":3,\"2690\":1,\"2691\":2,\"3108\":1,\"3124\":1,\"3197\":1,\"3283\":1,\"3381\":1,\"3587\":1,\"3588\":1,\"3590\":2,\"3596\":1,\"3670\":1,\"3682\":1}}],[\"done\",{\"1\":{\"3267\":1,\"3503\":1}}],[\"dofiter方法以及该方法之前的代码都不会执行\",{\"1\":{\"2948\":1}}],[\"dofilter后面的代码不会执行\",{\"1\":{\"2947\":1}}],[\"dofilter\",{\"0\":{\"2946\":1},\"1\":{\"2945\":2,\"2953\":4}}],[\"do的前面不能加\",{\"1\":{\"2824\":1}}],[\"dopost方法被调用了\",{\"1\":{\"2812\":1}}],[\"dopost\",{\"1\":{\"2812\":2,\"2814\":2,\"2846\":1,\"2858\":1,\"2862\":1,\"2872\":1,\"2873\":1,\"2938\":1,\"2942\":1,\"3046\":1,\"3047\":1}}],[\"doprivileged\",{\"1\":{\"2079\":1}}],[\"dos\",{\"1\":{\"2126\":8}}],[\"doit\",{\"1\":{\"1267\":2}}],[\"do\",{\"0\":{\"1187\":1,\"1189\":1},\"1\":{\"1165\":1,\"1188\":1,\"1189\":1,\"1267\":1,\"2824\":3,\"3298\":1}}],[\"dotall\",{\"1\":{\"997\":1}}],[\"doexception\",{\"1\":{\"645\":1}}],[\"dog和dogs是相似的\",{\"1\":{\"3436\":1}}],[\"dog和cat\",{\"1\":{\"549\":1}}],[\"doget是httpservlet中的service自动调用的方法\",{\"1\":{\"2837\":1}}],[\"doget方法或者是dopost方法最终都是由web服务器\",{\"1\":{\"2837\":1}}],[\"doget方法被调用了\",{\"1\":{\"2812\":1}}],[\"doget和dopost方法中的参数就变成httpservletrequest和httpservletreponse\",{\"1\":{\"2835\":1}}],[\"doget\",{\"1\":{\"2812\":2,\"2814\":2,\"2837\":1,\"2846\":1,\"2849\":1,\"2850\":1,\"2862\":2,\"2872\":2,\"2873\":2,\"2888\":1,\"2903\":2,\"2909\":1,\"2910\":1,\"2930\":1,\"2934\":1,\"3062\":1}}],[\"dogfactorybean\",{\"1\":{\"513\":2,\"514\":2,\"518\":1}}],[\"dog\",{\"1\":{\"506\":1,\"513\":1,\"514\":1,\"518\":1,\"523\":1,\"525\":1,\"540\":1,\"541\":1,\"1451\":1,\"1456\":3}}],[\"doublestream\",{\"1\":{\"2447\":1,\"2464\":1}}],[\"double数据的创建\",{\"1\":{\"778\":1}}],[\"doublevalue\",{\"1\":{\"772\":2}}],[\"double类型赋值给float会报错\",{\"1\":{\"1116\":1}}],[\"double类型\",{\"1\":{\"770\":6}}],[\"double\",{\"1\":{\"472\":1,\"671\":3,\"760\":1,\"761\":2,\"762\":3,\"763\":3,\"764\":3,\"765\":2,\"766\":3,\"767\":6,\"768\":5,\"769\":13,\"771\":1,\"772\":3,\"774\":1,\"776\":2,\"888\":1,\"1009\":1,\"1075\":1,\"1094\":1,\"1096\":1,\"1114\":1,\"1117\":1,\"1139\":4,\"1273\":1,\"1319\":2,\"1373\":1,\"1426\":1,\"1445\":2,\"1546\":1,\"1641\":1,\"2124\":1,\"2290\":1,\"2447\":1,\"2457\":1,\"2462\":1,\"2483\":1,\"2484\":1,\"2489\":1,\"3547\":1}}],[\"domessage\",{\"1\":{\"452\":1}}],[\"domain\",{\"1\":{\"364\":1,\"451\":1,\"619\":1,\"1538\":1}}],[\"docs\",{\"1\":{\"3127\":2}}],[\"doctype\",{\"1\":{\"3026\":2,\"3027\":1,\"3488\":1}}],[\"docbase=\",{\"1\":{\"2716\":1,\"2717\":1}}],[\"docbase\",{\"1\":{\"2716\":1}}],[\"doc\",{\"1\":{\"429\":1,\"2045\":2,\"3133\":1,\"3134\":1,\"3136\":1,\"3139\":1,\"3140\":1,\"3144\":1,\"3145\":1,\"3147\":1,\"3148\":1,\"3157\":1,\"3158\":1,\"3191\":6,\"3217\":1,\"3361\":1}}],[\"documentation\",{\"1\":{\"3355\":2}}],[\"documents>\",{\"1\":{\"3585\":1}}],[\"documents\",{\"1\":{\"3102\":1}}],[\"documented\",{\"0\":{\"1663\":1},\"1\":{\"1638\":1,\"1650\":1,\"1656\":1,\"1663\":1,\"1673\":1,\"1674\":1,\"2820\":1}}],[\"document注解的collection属性用来绑定当前实体类对应的集合\",{\"1\":{\"395\":1}}],[\"document\",{\"0\":{\"395\":1,\"3362\":1},\"1\":{\"394\":1,\"428\":2,\"3527\":1,\"3545\":1,\"3546\":2,\"3547\":1,\"3583\":1,\"3586\":1}}],[\"docker\",{\"0\":{\"72\":1},\"1\":{\"10\":1,\"3305\":3}}],[\"dohealthcheck\",{\"1\":{\"350\":1}}],[\"downloads\",{\"1\":{\"3287\":1,\"3318\":1}}],[\"download\",{\"1\":{\"2238\":3,\"3554\":1,\"3567\":1,\"3569\":1}}],[\"downloadurl\",{\"1\":{\"2238\":1}}],[\"down\",{\"1\":{\"349\":1,\"350\":1,\"784\":2}}],[\"dic<\",{\"1\":{\"3488\":1}}],[\"dict\",{\"1\":{\"3488\":2}}],[\"dic\",{\"1\":{\"3487\":2,\"3488\":1}}],[\"dickman\",{\"1\":{\"689\":1}}],[\"different\",{\"1\":{\"3355\":1}}],[\"ditectory选择jar包目标目录\",{\"1\":{\"2992\":1}}],[\"discovery\",{\"1\":{\"3268\":1,\"3269\":1,\"3270\":1,\"3271\":1,\"3337\":1,\"3339\":2,\"3355\":4,\"3533\":3}}],[\"dispatchertype\",{\"1\":{\"2950\":2,\"2951\":2}}],[\"dispatchertypes的值可以是个数组\",{\"1\":{\"2951\":1}}],[\"dispatchertypes\",{\"1\":{\"2950\":2,\"2951\":1}}],[\"display\",{\"1\":{\"2296\":1}}],[\"distributions下的即为java源码\",{\"1\":{\"2700\":1}}],[\"distinct\",{\"0\":{\"2459\":1},\"1\":{\"2454\":1,\"2459\":2}}],[\"dis\",{\"1\":{\"2127\":5}}],[\"disk\",{\"1\":{\"3449\":2}}],[\"diskpersistent=\",{\"1\":{\"478\":2}}],[\"diskpersistent\",{\"1\":{\"478\":1}}],[\"diskspace\",{\"1\":{\"348\":1}}],[\"dimission\",{\"1\":{\"1616\":1}}],[\"dir默认是在当前module中的\",{\"1\":{\"2015\":1}}],[\"dir默认为项目路径\",{\"1\":{\"2015\":1}}],[\"dir中存储\",{\"1\":{\"2015\":1}}],[\"dir\",{\"1\":{\"884\":1,\"972\":1,\"2015\":1}}],[\"directconnection=true\",{\"1\":{\"3738\":1}}],[\"directconsumer\",{\"1\":{\"447\":1}}],[\"direct和replicaset\",{\"1\":{\"3732\":1}}],[\"directories\",{\"1\":{\"2743\":1}}],[\"directorystream<path>\",{\"1\":{\"2168\":1}}],[\"directory\",{\"1\":{\"225\":1,\"3267\":1,\"3503\":1}}],[\"direct接受消息2\",{\"1\":{\"447\":1}}],[\"direct接受消息1\",{\"1\":{\"447\":1}}],[\"directqueue\",{\"1\":{\"444\":2}}],[\"directexchange\",{\"1\":{\"444\":5,\"445\":1}}],[\"direct\",{\"0\":{\"443\":1,\"3733\":1},\"1\":{\"444\":5,\"447\":2,\"3664\":1,\"3673\":1,\"3682\":1,\"3724\":2}}],[\"divisor\",{\"1\":{\"782\":3}}],[\"divide\",{\"0\":{\"782\":1},\"1\":{\"782\":4}}],[\"digdecimal间不能直接使用\",{\"1\":{\"779\":1}}],[\"dio渚�\",{\"1\":{\"674\":1}}],[\"dio侠\",{\"1\":{\"674\":2}}],[\"durableoptime\",{\"1\":{\"3670\":1}}],[\"durationunit\",{\"1\":{\"215\":1}}],[\"durationunit注解描述时间单位\",{\"1\":{\"215\":1}}],[\"duration类\",{\"1\":{\"215\":1}}],[\"duration\",{\"0\":{\"215\":1},\"1\":{\"215\":1,\"709\":1}}],[\"dump\",{\"1\":{\"342\":2}}],[\"d\",{\"1\":{\"299\":3,\"304\":2,\"308\":7,\"425\":2,\"431\":2,\"478\":1,\"514\":1,\"673\":2,\"718\":1,\"776\":2,\"786\":2,\"788\":1,\"824\":1,\"884\":2,\"897\":1,\"946\":3,\"952\":2,\"985\":1,\"996\":1,\"998\":1,\"999\":2,\"1000\":1,\"1001\":2,\"1029\":1,\"1059\":1,\"1426\":2,\"1795\":1,\"2015\":2,\"2016\":2,\"2444\":1,\"2445\":1,\"2716\":1,\"2717\":1,\"2894\":1,\"2895\":1,\"3029\":1,\"3267\":2,\"3310\":1,\"3342\":1,\"3503\":2,\"3558\":1}}],[\"dsaft\",{\"1\":{\"3030\":1}}],[\"ds\",{\"1\":{\"202\":2,\"204\":2,\"212\":2,\"510\":2,\"578\":2,\"2231\":5,\"2232\":5}}],[\"db可选\",{\"1\":{\"3707\":1}}],[\"dbadminanydatabase\",{\"1\":{\"3703\":1,\"3704\":1}}],[\"dbadmin\",{\"1\":{\"3701\":1,\"3703\":1,\"3704\":1}}],[\"dbowner\",{\"1\":{\"3701\":1,\"3703\":1}}],[\"db指的是当前use的数据库\",{\"1\":{\"3577\":1}}],[\"db对象调用dropdatabase方法删除当前数据库\",{\"1\":{\"3577\":1}}],[\"dbs等\",{\"1\":{\"3660\":1}}],[\"dbs查看数据库时\",{\"1\":{\"3578\":1}}],[\"dbs\",{\"1\":{\"3574\":1}}],[\"dbpath设置仅适用于mongod\",{\"1\":{\"3562\":1,\"3656\":1}}],[\"dbpath\",{\"1\":{\"3557\":1,\"3558\":1,\"3562\":1,\"3656\":1,\"3657\":1,\"3658\":1}}],[\"dbpath=\",{\"1\":{\"3557\":1}}],[\"dbutils类提供了三个重载的关闭方法\",{\"1\":{\"2682\":1}}],[\"dbutils类\",{\"0\":{\"2682\":1}}],[\"dbutils就跟之前封装的dao一样\",{\"1\":{\"2679\":1}}],[\"dbutils介绍\",{\"0\":{\"2679\":1}}],[\"dbutils\",{\"0\":{\"2677\":1,\"2678\":1},\"1\":{\"2679\":1,\"2681\":4}}],[\"db39\",{\"1\":{\"2181\":1}}],[\"dbcp\",{\"1\":{\"2106\":2,\"2668\":1,\"2670\":1}}],[\"dbconfig\",{\"1\":{\"510\":1,\"518\":1}}],[\"db\",{\"1\":{\"154\":1,\"356\":1,\"368\":1,\"617\":2,\"624\":1,\"1538\":1,\"3555\":1,\"3557\":1,\"3558\":1,\"3561\":1,\"3562\":1,\"3564\":1,\"3576\":1,\"3577\":1,\"3581\":2,\"3582\":1,\"3585\":1,\"3587\":1,\"3589\":1,\"3590\":1,\"3592\":1,\"3594\":1,\"3596\":1,\"3597\":1,\"3598\":1,\"3600\":2,\"3601\":2,\"3604\":1,\"3605\":2,\"3606\":2,\"3607\":1,\"3609\":4,\"3610\":3,\"3611\":2,\"3613\":3,\"3614\":6,\"3615\":2,\"3616\":1,\"3623\":2,\"3624\":1,\"3626\":2,\"3627\":2,\"3630\":3,\"3631\":1,\"3632\":1,\"3634\":1,\"3636\":1,\"3654\":1,\"3656\":1,\"3657\":1,\"3658\":1,\"3675\":1,\"3682\":3,\"3700\":1,\"3701\":7,\"3702\":5,\"3707\":2,\"3709\":2,\"3710\":2,\"3711\":2,\"3712\":6,\"3713\":1,\"3714\":1,\"3715\":2,\"3721\":1,\"3724\":1,\"3756\":2}}],[\"dropuser\",{\"1\":{\"3713\":1}}],[\"dropindexes\",{\"1\":{\"3631\":1}}],[\"dropindex\",{\"1\":{\"3630\":3}}],[\"drop\",{\"1\":{\"3582\":1}}],[\"dropdatabase\",{\"1\":{\"3577\":1}}],[\"drawmoney\",{\"1\":{\"1500\":1}}],[\"driver的实现类不用获取了\",{\"1\":{\"2548\":1}}],[\"driver的对象\",{\"1\":{\"2545\":1}}],[\"drivermanager\",{\"1\":{\"2547\":2,\"2548\":1,\"2551\":1,\"2567\":1,\"2573\":1,\"2575\":1}}],[\"driverclass=com\",{\"1\":{\"2550\":1}}],[\"driverclass\",{\"1\":{\"2546\":2,\"2551\":3,\"2573\":3,\"2575\":3}}],[\"driverclassname=com\",{\"1\":{\"2673\":1}}],[\"driverclassname\",{\"1\":{\"203\":1,\"2674\":1,\"2682\":1}}],[\"driver接口实现类com\",{\"1\":{\"2545\":1}}],[\"driver\",{\"0\":{\"2535\":1,\"2541\":1},\"1\":{\"154\":2,\"155\":1,\"200\":1,\"203\":1,\"356\":2,\"358\":1,\"361\":2,\"362\":2,\"369\":2,\"371\":1,\"372\":2,\"543\":1,\"616\":1,\"617\":2,\"2531\":1,\"2540\":1,\"2545\":5,\"2546\":2,\"2547\":5,\"2548\":1,\"2550\":1,\"2673\":1,\"3743\":2}}],[\"druid2\",{\"1\":{\"2674\":1}}],[\"druid是阿里巴巴开源平台上一个数据库连接池实现\",{\"1\":{\"2670\":1}}],[\"druid是依赖jdbc的\",{\"1\":{\"355\":1}}],[\"druid的连接信息\",{\"1\":{\"617\":1}}],[\"druid连接池依赖\",{\"1\":{\"598\":1}}],[\"druid依赖的坐标需要手动在pom\",{\"1\":{\"355\":1}}],[\"druiddatasourcefactory\",{\"1\":{\"2672\":2,\"2675\":1}}],[\"druiddatasource\",{\"1\":{\"202\":3,\"204\":3,\"212\":3,\"506\":3,\"510\":3,\"543\":2}}],[\"druid\",{\"0\":{\"598\":1,\"2670\":1},\"1\":{\"45\":1,\"356\":1,\"361\":1,\"362\":1,\"371\":1,\"372\":1,\"506\":3,\"612\":3,\"616\":1,\"617\":1,\"621\":1,\"2668\":1,\"2672\":2,\"2673\":1,\"2675\":1}}],[\"dd\",{\"1\":{\"147\":1,\"304\":2,\"308\":7,\"714\":1,\"735\":2,\"736\":1,\"737\":1,\"906\":3,\"907\":1,\"908\":1,\"910\":1,\"911\":2,\"912\":2,\"913\":2,\"914\":1,\"1510\":1,\"1992\":1,\"2463\":3,\"2570\":1,\"2573\":1,\"2582\":1}}],[\"deactivation\",{\"1\":{\"2750\":1}}],[\"dead\",{\"1\":{\"669\":3,\"673\":1}}],[\"demo6的doget方法都被执行了\",{\"1\":{\"2903\":1}}],[\"demo6\",{\"1\":{\"2903\":4,\"2904\":1}}],[\"demo5转发到\",{\"1\":{\"2904\":1}}],[\"demo5和\",{\"1\":{\"2903\":1}}],[\"demo5\",{\"1\":{\"2903\":4,\"2904\":1}}],[\"demo3\",{\"1\":{\"2846\":5,\"2857\":1}}],[\"demo2\",{\"1\":{\"2812\":1,\"2909\":1,\"2910\":1,\"2911\":1,\"2916\":1}}],[\"demo项目\",{\"0\":{\"3519\":1},\"1\":{\"2785\":1}}],[\"demo可以找到部署在tomcat服务器上的web\",{\"1\":{\"2785\":1}}],[\"demo`\",{\"1\":{\"2785\":1}}],[\"demo1请求\",{\"1\":{\"2785\":1}}],[\"demo1\",{\"1\":{\"2780\":1,\"2781\":1,\"2800\":1,\"2888\":2,\"2890\":1,\"2909\":1}}],[\"demo是我创建的项目名\",{\"1\":{\"2015\":1}}],[\"demo\",{\"1\":{\"786\":2,\"2015\":3,\"2016\":2,\"2779\":1,\"2785\":1,\"2814\":1,\"2819\":1,\"2822\":1,\"2823\":1,\"2824\":1,\"2825\":1,\"2871\":1}}],[\"depath=\",{\"1\":{\"3756\":1}}],[\"depedencies选项卡中\",{\"1\":{\"2778\":1}}],[\"dependencymanagement>\",{\"1\":{\"119\":1}}],[\"dependency>\",{\"1\":{\"119\":4,\"123\":5,\"134\":1,\"135\":1,\"185\":1,\"209\":1,\"218\":2,\"223\":1,\"319\":2,\"323\":1,\"355\":2,\"358\":1,\"361\":3,\"371\":3,\"383\":1,\"387\":1,\"413\":1,\"438\":1,\"450\":1,\"466\":1,\"476\":1,\"482\":1,\"592\":1,\"593\":1,\"594\":1,\"595\":1,\"597\":1,\"598\":1,\"599\":1,\"600\":1,\"604\":1,\"606\":1,\"607\":1,\"608\":1,\"609\":1,\"611\":2,\"612\":10,\"620\":1,\"3085\":1,\"3205\":2,\"3216\":1,\"3743\":1,\"3748\":1}}],[\"dependencies>\",{\"1\":{\"119\":1,\"123\":1,\"612\":1,\"620\":1}}],[\"dependencies<\",{\"1\":{\"118\":1,\"119\":1}}],[\"dependencies\",{\"0\":{\"119\":1},\"1\":{\"96\":2,\"120\":2}}],[\"deprecation\",{\"1\":{\"1677\":1,\"1678\":1}}],[\"deprecated\",{\"0\":{\"1673\":1},\"1\":{\"1637\":1,\"1638\":1,\"1650\":1,\"1673\":4,\"1680\":3}}],[\"deployment\",{\"0\":{\"2747\":1},\"1\":{\"574\":1,\"577\":1,\"2743\":1}}],[\"deferredimportselector\",{\"1\":{\"567\":1}}],[\"defaultwriteconcern\",{\"1\":{\"3675\":1}}],[\"defaultservlet是用来处理静态资源\",{\"1\":{\"2825\":1}}],[\"defaultservlet的覆盖\",{\"1\":{\"2825\":1}}],[\"defaultservlet\",{\"1\":{\"2825\":1}}],[\"defaultcharbuffersize\",{\"1\":{\"2078\":1,\"2079\":1}}],[\"default结构是可选的\",{\"1\":{\"1175\":1}}],[\"default\",{\"1\":{\"343\":1,\"1174\":1,\"1175\":1,\"1176\":1,\"1310\":1,\"1515\":2,\"1517\":1,\"1640\":1,\"1641\":2,\"1645\":1,\"1680\":1,\"1928\":2,\"2076\":1,\"2444\":1,\"2445\":1,\"2820\":4,\"3108\":1,\"3209\":1,\"3211\":1,\"3212\":1,\"3214\":1,\"3217\":1,\"3218\":1,\"3220\":1,\"3221\":1,\"3225\":1,\"3226\":1,\"3227\":1,\"3231\":1,\"3234\":1,\"3237\":1,\"3240\":1,\"3242\":1,\"3244\":1,\"3249\":1,\"3253\":1,\"3355\":2,\"3664\":1,\"3675\":1}}],[\"declaredconstructors\",{\"1\":{\"2298\":2}}],[\"declaredmethods\",{\"1\":{\"2295\":2,\"2296\":2}}],[\"declaredfields\",{\"1\":{\"2291\":2,\"2293\":2}}],[\"decimal\",{\"1\":{\"782\":2}}],[\"dec\",{\"1\":{\"501\":1}}],[\"del文件中被标记为删除\",{\"1\":{\"3528\":2}}],[\"del\",{\"1\":{\"3447\":2,\"3528\":2}}],[\"deletion\",{\"1\":{\"3355\":1}}],[\"deleterequest\",{\"1\":{\"3218\":3,\"3221\":6}}],[\"deleteresponse\",{\"1\":{\"431\":2,\"3218\":1}}],[\"deleteresult\",{\"1\":{\"404\":1}}],[\"delete语句\",{\"1\":{\"2683\":1}}],[\"deleteindexrequest\",{\"1\":{\"3212\":2}}],[\"deleteindexresponse\",{\"1\":{\"425\":1}}],[\"deleteifexists\",{\"1\":{\"2168\":1}}],[\"deletemapping\",{\"1\":{\"640\":1,\"647\":1}}],[\"deletebyid\",{\"1\":{\"623\":1,\"636\":1,\"2655\":1,\"2656\":1,\"2657\":1}}],[\"deleted表示删除成功\",{\"1\":{\"431\":1}}],[\"deleted\",{\"1\":{\"431\":1,\"3127\":1,\"3149\":2,\"3154\":1}}],[\"deletedocumenttest\",{\"1\":{\"431\":1}}],[\"deletetest\",{\"1\":{\"425\":1}}],[\"delete\",{\"0\":{\"701\":1,\"810\":1},\"1\":{\"425\":2,\"431\":2,\"433\":1,\"623\":1,\"635\":1,\"636\":1,\"640\":2,\"647\":2,\"701\":2,\"810\":4,\"2168\":1,\"2582\":1,\"2614\":1,\"2642\":1,\"2656\":1,\"2687\":1,\"2811\":2,\"3129\":1,\"3147\":1,\"3148\":1,\"3152\":1,\"3153\":1,\"3212\":1,\"3218\":2,\"3402\":1}}],[\"delivered\",{\"1\":{\"1616\":1}}],[\"delayed\",{\"1\":{\"3278\":1,\"3279\":1,\"3280\":1,\"3378\":1,\"3380\":1,\"3509\":2}}],[\"delay\",{\"1\":{\"492\":3}}],[\"desired\",{\"1\":{\"3296\":1}}],[\"des\",{\"1\":{\"2069\":2}}],[\"desfile\",{\"1\":{\"2069\":2,\"2084\":2}}],[\"desc|asc\",{\"1\":{\"3185\":1}}],[\"descriptor\",{\"1\":{\"3479\":1}}],[\"descriptors\",{\"1\":{\"2743\":1}}],[\"description\",{\"1\":{\"364\":1,\"619\":1}}],[\"desc\",{\"1\":{\"1526\":3,\"3185\":1,\"3243\":1,\"3707\":1}}],[\"destructive\",{\"1\":{\"3355\":1}}],[\"destroy\",{\"0\":{\"2802\":1},\"1\":{\"2799\":1,\"2802\":3,\"2945\":1}}],[\"destroy会在生命周期中被调用\",{\"1\":{\"2799\":1}}],[\"destroy线程会检测连接的间隔时间2\",{\"1\":{\"2674\":1}}],[\"destpath\",{\"1\":{\"2071\":2,\"2086\":2}}],[\"destfile\",{\"1\":{\"2065\":2,\"2071\":2}}],[\"dest\",{\"1\":{\"807\":1,\"937\":1,\"2168\":3,\"2850\":1}}],[\"destination属性就是要监听的队列名\",{\"1\":{\"455\":1}}],[\"destination\",{\"1\":{\"455\":1,\"3562\":1,\"3656\":1}}],[\"desription\",{\"1\":{\"618\":1}}],[\"details\",{\"1\":{\"326\":1,\"343\":1,\"345\":1}}],[\"debug也可以启动\",{\"1\":{\"2757\":1}}],[\"debug\",{\"0\":{\"143\":1,\"209\":1,\"284\":1,\"357\":1,\"420\":1,\"2610\":1,\"2706\":1,\"3109\":1,\"3210\":1,\"3222\":1,\"3311\":1,\"3344\":1,\"3479\":1,\"3675\":1,\"3755\":1},\"1\":{\"288\":2,\"290\":2,\"292\":1,\"294\":2,\"295\":3,\"308\":6,\"309\":2,\"2746\":1,\"2751\":1,\"2753\":1,\"2757\":1,\"3285\":1}}],[\"dev<\",{\"1\":{\"281\":1}}],[\"devmvc\",{\"1\":{\"277\":1,\"278\":1,\"280\":1}}],[\"devredis\",{\"1\":{\"277\":1,\"278\":1,\"280\":1}}],[\"devdb\",{\"1\":{\"277\":1,\"278\":1,\"280\":1}}],[\"dev环境额外新增的配置\",{\"1\":{\"278\":1}}],[\"dev环境配置文件\",{\"1\":{\"274\":1}}],[\"dev环境\",{\"1\":{\"142\":1}}],[\"development\",{\"0\":{\"36\":1},\"1\":{\"1025\":1}}],[\"dev\",{\"0\":{\"3760\":1,\"3772\":1,\"3790\":1},\"1\":{\"10\":1,\"142\":1,\"272\":1,\"274\":1,\"275\":1,\"278\":1,\"280\":2,\"308\":1,\"589\":1}}],[\"devtools\",{\"1\":{\"194\":1,\"196\":1,\"197\":1}}],[\"devtools<\",{\"1\":{\"185\":1,\"608\":1,\"612\":1}}],[\"devtool\",{\"0\":{\"8\":1,\"608\":1}}],[\"nlp\",{\"1\":{\"3114\":1}}],[\"nickname\",{\"1\":{\"3627\":3,\"3628\":1}}],[\"nike\",{\"1\":{\"2330\":2}}],[\"nikeclothfactory\",{\"1\":{\"2329\":1,\"2330\":1}}],[\"nike工厂生产一批运动服\",{\"1\":{\"2329\":1}}],[\"nike工厂\",{\"1\":{\"2326\":1}}],[\"nio已经成为文件处理中越来越重要的部分\",{\"1\":{\"2162\":1}}],[\"nio将以更加高效的方式进行文件的读写操作\",{\"1\":{\"2161\":1}}],[\"nio支持面向缓冲区的\",{\"1\":{\"2161\":1}}],[\"nio与原来的io有同样的作用和目的\",{\"1\":{\"2161\":1}}],[\"nio\",{\"0\":{\"2162\":1},\"1\":{\"2161\":2,\"2162\":2,\"2164\":3,\"2165\":2,\"2168\":1}}],[\"nio概述\",{\"0\":{\"2161\":1}}],[\"nio2\",{\"0\":{\"2160\":1}}],[\"nio2与jar包\",{\"0\":{\"2159\":1}}],[\"nchars\",{\"1\":{\"2078\":1,\"2079\":1}}],[\"ns\",{\"1\":{\"1810\":2}}],[\"nsomebody\",{\"1\":{\"1680\":1}}],[\"nt1\",{\"1\":{\"1804\":3}}],[\"n个子类适用于同一个方法\",{\"1\":{\"1400\":1}}],[\"n是没有关联的\",{\"1\":{\"1292\":1}}],[\"n和原始数据m\",{\"1\":{\"1292\":1}}],[\"n的值\",{\"1\":{\"1292\":1}}],[\"n传递给方法后\",{\"1\":{\"1292\":1}}],[\"n次\",{\"1\":{\"1200\":1}}],[\"n大\",{\"1\":{\"1161\":1,\"1162\":1}}],[\"n也没用\",{\"1\":{\"997\":1}}],[\"n2的结果是int类型的\",{\"1\":{\"1139\":1}}],[\"n2\",{\"1\":{\"764\":2,\"1139\":3}}],[\"n1\",{\"1\":{\"764\":2,\"1139\":4}}],[\"n3里的\",{\"1\":{\"513\":1}}],[\"numvotesneeded\",{\"1\":{\"3670\":1}}],[\"numerical\",{\"1\":{\"3197\":1}}],[\"num+1\",{\"1\":{\"2938\":1}}],[\"num++\",{\"1\":{\"1189\":1,\"1804\":1}}],[\"numtestsperevictionrun\",{\"1\":{\"2674\":1}}],[\"numtest\",{\"1\":{\"1804\":3}}],[\"num的值从100~1有序递减\",{\"1\":{\"1761\":1}}],[\"num>0\",{\"1\":{\"1740\":1,\"1757\":1}}],[\"num是try里面的局部变量\",{\"1\":{\"1587\":1}}],[\"num3\",{\"1\":{\"1443\":1}}],[\"numsum\",{\"1\":{\"1810\":3}}],[\"nums=11\",{\"1\":{\"1648\":1}}],[\"nums=12\",{\"1\":{\"1648\":1}}],[\"nums\",{\"1\":{\"1219\":5,\"1220\":2,\"1222\":2,\"1641\":1}}],[\"num使用前必须先定义\",{\"1\":{\"1181\":1}}],[\"num2\",{\"1\":{\"1139\":2,\"1443\":2,\"1446\":1}}],[\"num1+0\",{\"1\":{\"1139\":1}}],[\"num1\",{\"1\":{\"1139\":1,\"1440\":2,\"1445\":2}}],[\"num\",{\"1\":{\"1134\":4,\"1181\":2,\"1189\":5,\"1381\":3,\"1580\":1,\"1587\":2,\"1740\":2,\"1757\":2,\"1760\":4,\"1763\":1,\"1768\":4,\"1784\":4,\"1804\":3,\"1810\":1,\"1957\":2,\"2225\":2,\"2252\":2,\"2938\":1,\"3400\":2,\"3527\":1,\"3610\":2}}],[\"numberint\",{\"1\":{\"3587\":1,\"3590\":2,\"3596\":1,\"3598\":1,\"3614\":1,\"3616\":2,\"3682\":1}}],[\"numbertype\",{\"1\":{\"3029\":2}}],[\"number=\",{\"1\":{\"3027\":1,\"3030\":1}}],[\"numberformatexception\",{\"0\":{\"1580\":1},\"1\":{\"1571\":1,\"1587\":1}}],[\"number类型转string类型\",{\"1\":{\"774\":1}}],[\"number\",{\"0\":{\"771\":1},\"1\":{\"423\":2,\"777\":1,\"778\":1,\"1186\":3,\"1294\":1,\"3025\":1,\"3029\":2,\"3108\":1,\"3124\":2,\"3278\":5,\"3279\":5,\"3280\":5,\"3283\":2,\"3348\":1,\"3378\":5,\"3379\":2,\"3380\":5,\"3381\":2,\"3393\":1,\"3400\":1,\"3518\":1,\"3757\":1}}],[\"null的判断后\",{\"1\":{\"1769\":1}}],[\"null调用方法\",{\"1\":{\"1246\":1}}],[\"nullpointerexception\",{\"0\":{\"1575\":1},\"1\":{\"1246\":1,\"1571\":1,\"1587\":1,\"2296\":1}}],[\"null会被直接当做null字符串\",{\"1\":{\"633\":1}}],[\"null\",{\"1\":{\"147\":2,\"375\":1,\"404\":1,\"418\":4,\"471\":1,\"472\":1,\"483\":1,\"536\":2,\"623\":1,\"627\":1,\"628\":1,\"633\":2,\"636\":1,\"640\":1,\"827\":1,\"937\":5,\"961\":1,\"963\":1,\"1058\":2,\"1238\":1,\"1241\":1,\"1246\":2,\"1273\":1,\"1428\":4,\"1489\":2,\"1552\":1,\"1575\":2,\"1592\":2,\"1671\":1,\"1769\":4,\"1884\":1,\"1985\":1,\"1986\":3,\"1991\":3,\"1992\":1,\"1993\":1,\"2001\":2,\"2052\":2,\"2053\":2,\"2064\":1,\"2065\":4,\"2071\":4,\"2082\":3,\"2084\":4,\"2118\":2,\"2121\":3,\"2214\":1,\"2231\":2,\"2232\":2,\"2280\":2,\"2285\":1,\"2296\":1,\"2311\":1,\"2495\":1,\"2502\":2,\"2504\":1,\"2505\":1,\"2507\":2,\"2508\":1,\"2573\":4,\"2576\":2,\"2577\":2,\"2581\":2,\"2593\":1,\"2597\":3,\"2600\":4,\"2603\":4,\"2634\":2,\"2635\":3,\"2653\":15,\"2657\":14,\"2676\":2,\"2686\":1,\"2687\":1,\"2688\":1,\"2689\":1,\"2690\":2,\"2691\":1,\"3047\":1,\"3191\":1,\"3249\":1,\"3547\":1,\"3548\":2,\"3587\":1,\"3682\":1}}],[\"noops\",{\"1\":{\"3154\":1}}],[\"noophostnameverifier\",{\"1\":{\"418\":2}}],[\"nodeid\",{\"1\":{\"3526\":1}}],[\"node2\",{\"1\":{\"3324\":1}}],[\"node1\",{\"1\":{\"3324\":2}}],[\"node参数注册token的方式添加新集群\",{\"1\":{\"3316\":1}}],[\"nodes配置\",{\"1\":{\"3277\":1,\"3278\":1}}],[\"nodes就不在起作用了\",{\"1\":{\"3274\":1}}],[\"nodes\",{\"1\":{\"3268\":1,\"3269\":1,\"3270\":1,\"3271\":1,\"3273\":1,\"3275\":1,\"3278\":2,\"3279\":2,\"3280\":2,\"3305\":2,\"3307\":4,\"3327\":4,\"3328\":2,\"3332\":1,\"3337\":1,\"3339\":2,\"3355\":6,\"3378\":2,\"3380\":2,\"3533\":1}}],[\"node\",{\"0\":{\"3261\":1},\"1\":{\"1874\":1,\"1926\":1,\"3093\":1,\"3267\":1,\"3268\":2,\"3269\":3,\"3270\":2,\"3271\":2,\"3298\":1,\"3307\":1,\"3325\":1,\"3327\":1,\"3328\":2,\"3331\":1,\"3332\":4,\"3335\":5,\"3337\":6,\"3338\":1,\"3339\":10,\"3340\":3,\"3355\":9,\"3382\":1,\"3384\":1,\"3387\":2,\"3391\":2,\"3396\":2,\"3404\":1,\"3407\":7,\"3410\":4,\"3413\":8,\"3416\":2,\"3417\":1,\"3503\":1,\"3509\":1,\"3526\":1}}],[\"node<e>\",{\"1\":{\"1874\":5}}],[\"node的定义\",{\"0\":{\"1874\":1}}],[\"norm\",{\"1\":{\"1735\":1}}],[\"nonematch\",{\"0\":{\"2479\":1},\"1\":{\"2479\":2}}],[\"non\",{\"1\":{\"2161\":1}}],[\"nonpayment\",{\"1\":{\"1616\":1}}],[\"nonamespaceschemalocation=\",{\"1\":{\"478\":1}}],[\"now\",{\"0\":{\"717\":1,\"724\":1},\"1\":{\"717\":3,\"719\":1,\"720\":1,\"721\":1,\"722\":1,\"724\":4,\"725\":4,\"726\":3,\"732\":1,\"734\":1,\"736\":1}}],[\"noargscontructor\",{\"1\":{\"620\":1}}],[\"noargsconstructor\",{\"1\":{\"427\":1,\"470\":1}}],[\"nosuchfileexception\",{\"1\":{\"3479\":1}}],[\"nosuchfieldexception\",{\"1\":{\"854\":1,\"855\":1}}],[\"nosuchmethodexception\",{\"1\":{\"850\":1,\"858\":1,\"859\":1}}],[\"nosuchalgorithmexception\",{\"1\":{\"418\":2}}],[\"nosql\",{\"0\":{\"601\":1},\"1\":{\"612\":1}}],[\"no\",{\"1\":{\"398\":1,\"428\":1,\"429\":1,\"431\":1,\"432\":1,\"782\":1,\"3135\":1,\"3141\":1,\"3144\":1,\"3149\":1,\"3159\":1,\"3664\":1}}],[\"notexists\",{\"1\":{\"2168\":1}}],[\"notifyall\",{\"0\":{\"1801\":1},\"1\":{\"1424\":1,\"1799\":1,\"1802\":3}}],[\"notify\",{\"0\":{\"1801\":1},\"1\":{\"1424\":1,\"1799\":1,\"1800\":1,\"1801\":1,\"1802\":3,\"1804\":1}}],[\"not\",{\"1\":{\"212\":1,\"1526\":1,\"3151\":1,\"3169\":1}}],[\"n<\",{\"1\":{\"308\":3}}],[\"n\",{\"1\":{\"299\":2,\"308\":1,\"501\":1,\"762\":2,\"763\":2,\"824\":1,\"829\":1,\"830\":1,\"997\":1,\"1102\":2,\"1161\":2,\"1162\":3,\"1283\":4,\"1292\":6,\"1293\":3,\"1330\":1,\"1815\":2,\"1957\":4,\"2064\":1,\"2082\":1,\"2083\":1,\"2460\":1,\"2461\":4,\"3298\":9,\"3526\":1,\"3533\":2,\"3686\":1}}],[\"nezha\",{\"1\":{\"2573\":1}}],[\"nempty\",{\"1\":{\"1680\":1}}],[\"negativenumber++\",{\"1\":{\"1186\":1}}],[\"negativenumber\",{\"1\":{\"1186\":2}}],[\"necessary\",{\"1\":{\"783\":1}}],[\"network\",{\"1\":{\"3268\":1,\"3269\":1,\"3270\":1,\"3271\":1,\"3332\":1,\"3337\":1,\"3355\":4}}],[\"netchinaren\",{\"1\":{\"2241\":2}}],[\"net\",{\"1\":{\"418\":1,\"1338\":1,\"2238\":1,\"2243\":1,\"2244\":1,\"3562\":1,\"3656\":1}}],[\"netstat\",{\"1\":{\"248\":2,\"2708\":1}}],[\"nextelement\",{\"1\":{\"2850\":1}}],[\"next和finish就ok了\",{\"1\":{\"2731\":1}}],[\"nextchar\",{\"1\":{\"2078\":1,\"2079\":1}}],[\"nextval\",{\"1\":{\"925\":2,\"926\":1}}],[\"nextdouble\",{\"1\":{\"888\":1,\"1009\":1}}],[\"nextfloat\",{\"1\":{\"888\":1,\"1009\":1}}],[\"nextlong\",{\"1\":{\"888\":1,\"1009\":1}}],[\"nextline\",{\"1\":{\"885\":1,\"1006\":1}}],[\"nextint\",{\"1\":{\"888\":1,\"1009\":1,\"1186\":1,\"1581\":1,\"2252\":1}}],[\"nextshrot\",{\"1\":{\"888\":1,\"1009\":1}}],[\"nextbigdecimal\",{\"1\":{\"888\":1,\"1009\":1}}],[\"nextbiginter\",{\"1\":{\"888\":1,\"1009\":1}}],[\"nextboolean\",{\"1\":{\"888\":1,\"1009\":1}}],[\"nextbyte\",{\"1\":{\"888\":2,\"1009\":2}}],[\"nextxxx\",{\"0\":{\"888\":1,\"1009\":1}}],[\"next方法\",{\"1\":{\"888\":1,\"1009\":1}}],[\"next方法获取输入的字符串\",{\"1\":{\"887\":1,\"1008\":1}}],[\"next方法就获取输入的内容\",{\"1\":{\"887\":1,\"1008\":1}}],[\"next\",{\"0\":{\"887\":1,\"925\":1,\"1008\":1,\"1840\":1,\"2590\":1},\"1\":{\"96\":1,\"885\":1,\"887\":6,\"888\":2,\"925\":3,\"926\":2,\"969\":1,\"971\":1,\"1006\":1,\"1008\":6,\"1009\":2,\"1840\":1,\"1843\":4,\"1844\":1,\"1845\":3,\"1848\":2,\"1874\":4,\"1902\":1,\"1935\":1,\"1957\":1,\"1958\":1,\"1995\":1,\"1996\":1,\"2588\":2,\"2590\":1,\"2597\":1,\"2600\":1,\"2603\":1,\"2613\":1,\"2653\":3,\"2690\":1,\"3305\":2,\"3328\":1}}],[\"newtermstartdate\",{\"1\":{\"3670\":1}}],[\"newproxyinstance的参数3\",{\"0\":{\"2343\":1}}],[\"newproxyinstance\",{\"0\":{\"2338\":1},\"1\":{\"2338\":1,\"2342\":1}}],[\"newpriority\",{\"1\":{\"1735\":1}}],[\"new一个类的对象\",{\"1\":{\"2277\":1}}],[\"newoutputstream\",{\"1\":{\"2168\":1}}],[\"newinputstream\",{\"1\":{\"2168\":1}}],[\"newinstance已经被jdk舍弃了\",{\"1\":{\"2546\":1}}],[\"newinstance方法只能调用无参构造器创建对象\",{\"1\":{\"2286\":1}}],[\"newinstance方法默认会调用类的空参构造器\",{\"1\":{\"2285\":1}}],[\"newinstance\",{\"0\":{\"839\":1,\"877\":1,\"2285\":1},\"1\":{\"839\":2,\"850\":2,\"864\":1,\"865\":1,\"874\":1,\"877\":2,\"2252\":1,\"2257\":1,\"2258\":1,\"2285\":2,\"2286\":2,\"2306\":1,\"2311\":1,\"2315\":1,\"2546\":1,\"2547\":1,\"2603\":1,\"2653\":2}}],[\"newdirectorystream\",{\"1\":{\"2168\":1}}],[\"newfixedthreadpool\",{\"1\":{\"1815\":1,\"1817\":1}}],[\"newcachedthreadpool\",{\"1\":{\"1815\":1}}],[\"newchar\",{\"1\":{\"677\":2}}],[\"new类创建对象时\",{\"1\":{\"1548\":1}}],[\"new+构造器\",{\"1\":{\"1315\":1}}],[\"newval\",{\"1\":{\"938\":1}}],[\"newlength\",{\"1\":{\"895\":1}}],[\"newline\",{\"0\":{\"830\":1,\"2083\":1}}],[\"new构造器\",{\"1\":{\"820\":1}}],[\"newbytechannel\",{\"1\":{\"2168\":1}}],[\"newb\",{\"1\":{\"807\":2}}],[\"newscheduledthreadpool\",{\"1\":{\"1815\":1}}],[\"newscale\",{\"1\":{\"783\":2}}],[\"newsinglethreadexecutor\",{\"1\":{\"1815\":1}}],[\"news1\",{\"1\":{\"665\":2,\"666\":2,\"669\":4}}],[\"newredis\",{\"1\":{\"514\":1}}],[\"new\",{\"0\":{\"580\":1,\"886\":1,\"1007\":1,\"1548\":1,\"1550\":1},\"1\":{\"95\":1,\"202\":1,\"204\":1,\"212\":1,\"259\":1,\"347\":1,\"403\":1,\"404\":1,\"406\":2,\"407\":2,\"410\":1,\"418\":7,\"428\":1,\"429\":1,\"444\":2,\"455\":1,\"493\":2,\"510\":1,\"513\":1,\"514\":1,\"520\":1,\"521\":1,\"523\":1,\"525\":2,\"536\":2,\"540\":2,\"541\":1,\"543\":1,\"554\":2,\"623\":2,\"626\":2,\"627\":1,\"628\":1,\"630\":1,\"631\":1,\"632\":1,\"633\":1,\"636\":3,\"645\":1,\"647\":8,\"649\":1,\"652\":2,\"673\":1,\"674\":2,\"689\":3,\"692\":4,\"693\":2,\"699\":3,\"700\":1,\"701\":1,\"702\":1,\"703\":1,\"704\":1,\"749\":1,\"750\":2,\"751\":6,\"756\":3,\"757\":1,\"777\":1,\"778\":3,\"779\":2,\"780\":2,\"781\":2,\"782\":2,\"783\":1,\"785\":2,\"786\":3,\"788\":1,\"789\":1,\"790\":1,\"791\":1,\"792\":1,\"793\":1,\"794\":1,\"795\":1,\"797\":1,\"798\":1,\"799\":1,\"800\":1,\"801\":1,\"803\":1,\"804\":1,\"805\":1,\"807\":2,\"810\":3,\"812\":6,\"813\":2,\"814\":4,\"817\":1,\"819\":2,\"822\":1,\"823\":1,\"824\":1,\"825\":1,\"826\":2,\"827\":1,\"829\":2,\"835\":1,\"886\":1,\"887\":1,\"888\":1,\"893\":1,\"898\":1,\"899\":1,\"905\":1,\"906\":2,\"910\":2,\"918\":1,\"930\":1,\"932\":1,\"937\":2,\"939\":1,\"945\":1,\"960\":2,\"1007\":1,\"1008\":1,\"1009\":1,\"1124\":1,\"1125\":2,\"1133\":2,\"1186\":1,\"1214\":1,\"1218\":2,\"1219\":2,\"1222\":1,\"1232\":2,\"1233\":1,\"1234\":1,\"1236\":2,\"1237\":3,\"1238\":3,\"1239\":1,\"1245\":1,\"1246\":3,\"1259\":2,\"1262\":1,\"1266\":2,\"1267\":4,\"1280\":1,\"1282\":1,\"1292\":1,\"1302\":1,\"1304\":1,\"1315\":1,\"1316\":1,\"1343\":1,\"1376\":2,\"1395\":2,\"1401\":2,\"1403\":2,\"1404\":1,\"1408\":4,\"1411\":1,\"1413\":1,\"1414\":1,\"1415\":1,\"1418\":1,\"1419\":1,\"1420\":2,\"1426\":4,\"1427\":4,\"1433\":2,\"1440\":7,\"1442\":2,\"1445\":1,\"1456\":3,\"1458\":1,\"1463\":1,\"1466\":1,\"1467\":2,\"1475\":2,\"1488\":1,\"1489\":1,\"1497\":1,\"1512\":6,\"1560\":1,\"1567\":1,\"1577\":1,\"1579\":1,\"1581\":1,\"1583\":2,\"1591\":1,\"1592\":2,\"1600\":2,\"1608\":2,\"1609\":3,\"1621\":4,\"1680\":5,\"1720\":2,\"1728\":1,\"1729\":1,\"1737\":1,\"1740\":4,\"1741\":1,\"1757\":3,\"1760\":5,\"1763\":1,\"1768\":5,\"1769\":2,\"1780\":1,\"1784\":5,\"1795\":5,\"1804\":3,\"1810\":3,\"1817\":1,\"1831\":1,\"1842\":2,\"1851\":2,\"1852\":1,\"1854\":1,\"1855\":1,\"1865\":1,\"1866\":1,\"1868\":1,\"1869\":1,\"1872\":1,\"1902\":3,\"1905\":6,\"1906\":3,\"1921\":1,\"1926\":1,\"1931\":1,\"1935\":5,\"1936\":3,\"1940\":2,\"1955\":1,\"1957\":1,\"1958\":1,\"1964\":2,\"1968\":2,\"1969\":5,\"1971\":1,\"1972\":1,\"1973\":1,\"1974\":1,\"1981\":1,\"1985\":1,\"1993\":1,\"1995\":3,\"1996\":3,\"2001\":3,\"2005\":1,\"2015\":2,\"2016\":1,\"2048\":3,\"2052\":2,\"2053\":3,\"2055\":1,\"2056\":1,\"2060\":3,\"2064\":2,\"2065\":5,\"2069\":6,\"2071\":5,\"2076\":2,\"2077\":2,\"2078\":2,\"2079\":3,\"2082\":2,\"2084\":7,\"2095\":2,\"2096\":2,\"2099\":2,\"2101\":3,\"2106\":5,\"2118\":2,\"2121\":3,\"2126\":2,\"2127\":2,\"2136\":3,\"2139\":1,\"2146\":4,\"2147\":1,\"2151\":3,\"2152\":2,\"2156\":5,\"2157\":2,\"2161\":1,\"2164\":1,\"2220\":1,\"2225\":3,\"2231\":2,\"2232\":4,\"2238\":4,\"2241\":1,\"2252\":1,\"2253\":1,\"2256\":1,\"2267\":1,\"2282\":3,\"2330\":2,\"2342\":1,\"2344\":1,\"2345\":1,\"2349\":1,\"2352\":1,\"2369\":1,\"2371\":1,\"2377\":1,\"2405\":1,\"2414\":1,\"2419\":1,\"2421\":1,\"2422\":1,\"2424\":1,\"2425\":1,\"2428\":1,\"2430\":1,\"2433\":1,\"2469\":11,\"2500\":1,\"2502\":1,\"2505\":1,\"2508\":1,\"2545\":2,\"2551\":1,\"2570\":2,\"2573\":3,\"2575\":1,\"2597\":1,\"2600\":1,\"2603\":1,\"2612\":2,\"2613\":3,\"2653\":1,\"2657\":5,\"2672\":1,\"2675\":1,\"2686\":1,\"2687\":1,\"2688\":2,\"2689\":2,\"2690\":3,\"2691\":3,\"2731\":1,\"2737\":1,\"2741\":1,\"2894\":2,\"2895\":1,\"3041\":2,\"3046\":1,\"3052\":2,\"3053\":1,\"3054\":1,\"3070\":1,\"3206\":2,\"3209\":3,\"3211\":3,\"3212\":3,\"3214\":5,\"3217\":3,\"3218\":3,\"3220\":6,\"3221\":6,\"3225\":3,\"3226\":4,\"3227\":4,\"3228\":1,\"3230\":1,\"3231\":4,\"3233\":1,\"3234\":4,\"3236\":2,\"3237\":5,\"3239\":1,\"3240\":4,\"3242\":4,\"3244\":4,\"3248\":1,\"3249\":4,\"3250\":1,\"3252\":2,\"3253\":5,\"3267\":1,\"3305\":1,\"3307\":1,\"3327\":1,\"3355\":1,\"3503\":1,\"3587\":1,\"3588\":1,\"3590\":2,\"3596\":1,\"3682\":1}}],[\"nation\",{\"1\":{\"1475\":5,\"1481\":3,\"2255\":3,\"2258\":2,\"2311\":1}}],[\"native\",{\"0\":{\"1357\":1},\"1\":{\"1357\":1}}],[\"native修饰\",{\"1\":{\"1317\":1}}],[\"navigableset<t>\",{\"1\":{\"939\":2}}],[\"navigablemap<k\",{\"1\":{\"939\":2}}],[\"nano\",{\"1\":{\"719\":2}}],[\"namtab\",{\"1\":{\"704\":1}}],[\"named\",{\"1\":{\"3267\":1,\"3503\":1}}],[\"name+\",{\"1\":{\"3047\":1}}],[\"name栏填入自定义的名字\",{\"1\":{\"2992\":1}}],[\"name>helo<\",{\"1\":{\"3030\":1}}],[\"name>\",{\"1\":{\"2820\":1,\"3027\":1,\"3030\":2}}],[\"name是该tomcat模板的名字\",{\"1\":{\"2746\":1}}],[\"name=自定义的类型名\",{\"1\":{\"3029\":1}}],[\"name=\",{\"1\":{\"308\":9,\"478\":1,\"540\":1,\"541\":1,\"543\":1,\"1434\":1,\"1902\":1,\"1905\":3,\"2255\":1,\"2258\":1,\"2285\":1,\"2480\":1,\"2481\":1,\"2484\":1,\"2857\":2,\"2871\":4,\"3029\":11}}],[\"name=ebank\",{\"1\":{\"267\":1}}],[\"name的值是变量的名称\",{\"1\":{\"308\":1}}],[\"name1\",{\"1\":{\"151\":1}}],[\"name\",{\"0\":{\"1549\":1},\"1\":{\"95\":2,\"148\":6,\"151\":1,\"212\":1,\"302\":1,\"304\":1,\"308\":1,\"356\":1,\"362\":1,\"364\":1,\"372\":1,\"380\":3,\"423\":1,\"439\":1,\"500\":1,\"540\":1,\"548\":2,\"549\":2,\"617\":1,\"618\":1,\"619\":1,\"631\":1,\"632\":2,\"633\":5,\"749\":6,\"823\":2,\"838\":1,\"840\":2,\"854\":2,\"855\":1,\"858\":1,\"859\":2,\"863\":2,\"871\":2,\"872\":2,\"884\":2,\"1133\":6,\"1258\":1,\"1259\":1,\"1316\":4,\"1352\":1,\"1384\":4,\"1428\":4,\"1434\":1,\"1457\":4,\"1526\":1,\"1680\":1,\"1716\":1,\"1905\":2,\"1940\":1,\"2127\":3,\"2133\":1,\"2243\":1,\"2255\":12,\"2258\":4,\"2292\":1,\"2293\":1,\"2306\":5,\"2307\":1,\"2308\":1,\"2312\":2,\"2313\":1,\"2427\":2,\"2479\":2,\"2567\":1,\"2569\":1,\"2573\":1,\"2577\":1,\"2582\":1,\"2597\":3,\"2599\":4,\"2601\":3,\"2604\":1,\"2612\":1,\"2613\":4,\"2619\":1,\"2620\":2,\"2621\":2,\"2624\":2,\"2625\":2,\"2656\":4,\"2674\":1,\"2684\":1,\"2686\":1,\"2688\":1,\"2689\":1,\"2690\":4,\"2731\":1,\"2820\":1,\"2846\":1,\"2848\":1,\"2869\":2,\"2884\":1,\"2902\":3,\"2920\":3,\"2926\":3,\"2938\":3,\"3025\":2,\"3029\":1,\"3041\":1,\"3044\":1,\"3047\":2,\"3049\":1,\"3064\":1,\"3065\":1,\"3066\":1,\"3108\":2,\"3124\":1,\"3198\":1,\"3210\":1,\"3215\":1,\"3217\":1,\"3220\":3,\"3225\":1,\"3226\":4,\"3227\":2,\"3231\":1,\"3233\":1,\"3234\":5,\"3237\":2,\"3239\":1,\"3240\":4,\"3242\":2,\"3245\":4,\"3252\":2,\"3253\":4,\"3268\":3,\"3269\":2,\"3270\":2,\"3271\":2,\"3278\":1,\"3279\":1,\"3280\":1,\"3283\":1,\"3332\":2,\"3337\":2,\"3339\":2,\"3355\":3,\"3374\":1,\"3378\":1,\"3380\":1,\"3381\":1,\"3386\":1,\"3581\":1,\"3623\":1,\"3625\":1,\"3626\":2,\"3627\":3,\"3670\":1,\"3673\":1,\"3674\":1}}],[\"nacos\",{\"1\":{\"10\":1,\"11\":1}}],[\"nginx\",{\"0\":{\"76\":1},\"1\":{\"10\":1,\"53\":1,\"648\":1}}],[\"a9898c75\",{\"1\":{\"3712\":1}}],[\"aicell\",{\"1\":{\"3298\":1}}],[\"aifaceapplicationtests\",{\"1\":{\"226\":1}}],[\"aifaceapplication\",{\"1\":{\"127\":2,\"164\":2}}],[\"a=\",{\"1\":{\"3030\":1}}],[\"a就前缀\",{\"1\":{\"3030\":1}}],[\"afilter就先执行了\",{\"1\":{\"2954\":1}}],[\"afilter\",{\"1\":{\"2954\":1}}],[\"aftifacts\",{\"1\":{\"2747\":1}}],[\"aop代理里的方法可以在执行目标方法之前\",{\"1\":{\"2348\":1}}],[\"aop代理包含了目标对象的全部方法\",{\"1\":{\"2348\":1}}],[\"aop代理可代替目标对象\",{\"1\":{\"2348\":1}}],[\"aop代理\",{\"0\":{\"2348\":1}}],[\"aop\",{\"0\":{\"2347\":1}}],[\"aop与动态代理\",{\"0\":{\"2346\":1}}],[\"avg\",{\"1\":{\"3187\":2,\"3188\":3,\"3191\":1,\"3247\":2,\"3248\":2}}],[\"avi\",{\"1\":{\"2045\":1,\"2086\":2}}],[\"availability\",{\"1\":{\"3540\":1}}],[\"available\",{\"1\":{\"2992\":1,\"3267\":1,\"3355\":1,\"3503\":1}}],[\"avatars\",{\"1\":{\"810\":1}}],[\"avatar\",{\"1\":{\"810\":1}}],[\"avadar\",{\"1\":{\"794\":1,\"795\":1}}],[\"a支付成功了\",{\"1\":{\"1754\":1}}],[\"a和b同时通过了if判断\",{\"1\":{\"1754\":1}}],[\"a使用该账户消费2000元\",{\"1\":{\"1754\":1}}],[\"a+b\",{\"1\":{\"1555\":2,\"1556\":2}}],[\"a++\",{\"1\":{\"1353\":1}}],[\"a的关系\",{\"1\":{\"1505\":1}}],[\"a返回true\",{\"1\":{\"1416\":1}}],[\"awt\",{\"1\":{\"1338\":1}}],[\"aware\",{\"1\":{\"567\":1}}],[\"aware类接口为\",{\"1\":{\"567\":1}}],[\"await\",{\"1\":{\"500\":2}}],[\"a<g>\",{\"1\":{\"1986\":1}}],[\"a<=0\",{\"1\":{\"1304\":1}}],[\"a<=20\",{\"1\":{\"1149\":1}}],[\"a<20\",{\"1\":{\"773\":1}}],[\"a123\",{\"1\":{\"3710\":1}}],[\"a1\",{\"1\":{\"1141\":2,\"2060\":2,\"2064\":1}}],[\"ahello10\",{\"1\":{\"1134\":1}}],[\"a2cf\",{\"1\":{\"3712\":1}}],[\"a2\",{\"1\":{\"896\":1,\"1141\":2}}],[\"at\",{\"1\":{\"3313\":1,\"3328\":1,\"3346\":1,\"3348\":1}}],[\"attempted\",{\"1\":{\"3675\":1}}],[\"attlist\",{\"1\":{\"3025\":1}}],[\"attributes\",{\"1\":{\"3355\":1}}],[\"attribute\",{\"1\":{\"3029\":1}}],[\"attributereplaced\",{\"1\":{\"2965\":1,\"2966\":1,\"2967\":1}}],[\"attributeremoved\",{\"1\":{\"2965\":1,\"2966\":1,\"2967\":1}}],[\"attributeadded\",{\"1\":{\"2965\":1,\"2966\":1,\"2967\":1}}],[\"attr\",{\"1\":{\"2168\":1,\"3355\":1}}],[\"atguigu\",{\"1\":{\"1426\":2,\"1427\":2,\"2231\":1,\"2238\":3,\"2241\":1,\"2252\":1}}],[\"atan\",{\"1\":{\"770\":1}}],[\"atoffset\",{\"0\":{\"725\":1},\"1\":{\"725\":2}}],[\"am\",{\"1\":{\"682\":2,\"989\":3,\"990\":3,\"992\":2}}],[\"amqp<\",{\"1\":{\"119\":1,\"438\":1,\"604\":1,\"612\":1}}],[\"about\",{\"1\":{\"3355\":1,\"3563\":1,\"3656\":1}}],[\"abd\",{\"1\":{\"2412\":1}}],[\"abb\",{\"1\":{\"991\":1}}],[\"abs\",{\"0\":{\"760\":1},\"1\":{\"760\":4}}],[\"abstractlist<string>\",{\"1\":{\"1986\":1}}],[\"abstractlist中的add\",{\"1\":{\"897\":1}}],[\"abstract修饰的\",{\"1\":{\"1508\":1}}],[\"abstract不能用来修饰私有方法\",{\"1\":{\"1496\":1}}],[\"abstract不能用来修饰属性\",{\"1\":{\"1496\":1}}],[\"abstract的使用注意\",{\"0\":{\"1496\":1}}],[\"abstract方法\",{\"0\":{\"1495\":1}}],[\"abstract关键字\",{\"1\":{\"1277\":1}}],[\"abstract\",{\"0\":{\"1493\":1,\"1494\":1},\"1\":{\"771\":1,\"812\":4,\"820\":3,\"1317\":1,\"1338\":1,\"1467\":1,\"1494\":1,\"1495\":1,\"1497\":2,\"1499\":2,\"1500\":2,\"1507\":3,\"2653\":1}}],[\"abstractstringbuilder\",{\"1\":{\"688\":2}}],[\"abstracthealthindicator\",{\"1\":{\"350\":1}}],[\"abc123\",{\"1\":{\"2547\":1,\"2548\":1}}],[\"abc\",{\"1\":{\"672\":1,\"1059\":3,\"1125\":2,\"1126\":1,\"1575\":1,\"1578\":1,\"1580\":1,\"1587\":1,\"1666\":1,\"2412\":1}}],[\"ab\",{\"1\":{\"660\":1,\"692\":1}}],[\"aaa\",{\"1\":{\"2887\":1,\"3053\":1}}],[\"aaabbb\",{\"1\":{\"987\":1}}],[\"aa\",{\"1\":{\"652\":4,\"653\":2,\"756\":3,\"905\":2,\"906\":2,\"907\":1,\"908\":1,\"910\":2,\"911\":1,\"912\":2,\"913\":2,\"914\":1,\"1125\":2,\"1246\":1,\"1451\":1,\"1510\":1,\"1842\":1,\"1843\":1,\"1848\":1,\"1851\":1,\"1902\":2,\"1931\":1,\"1968\":1,\"1993\":2,\"1995\":2,\"1996\":2,\"2463\":3,\"2635\":1}}],[\"aaron=a\",{\"1\":{\"959\":2,\"960\":2,\"961\":2,\"962\":1,\"963\":1,\"964\":1,\"965\":1,\"966\":1,\"967\":1,\"968\":2,\"969\":1,\"970\":1,\"971\":2}}],[\"aaron\",{\"1\":{\"403\":1,\"429\":1,\"644\":1,\"750\":3,\"751\":2,\"757\":2,\"959\":1,\"969\":2,\"1059\":1,\"2256\":1,\"2257\":1,\"2428\":1,\"2469\":6,\"3214\":1,\"3234\":1,\"3242\":1,\"3245\":1}}],[\"account\",{\"1\":{\"2156\":1}}],[\"accidental\",{\"1\":{\"1060\":1}}],[\"accessible\",{\"1\":{\"3355\":1}}],[\"accessibleobject\",{\"1\":{\"860\":1}}],[\"access\",{\"1\":{\"2642\":1,\"3696\":1}}],[\"accesscontroller\",{\"1\":{\"2079\":1}}],[\"accept方法\",{\"0\":{\"2224\":1}}],[\"accept\",{\"1\":{\"974\":1,\"2221\":1,\"2225\":1,\"2371\":2,\"2392\":1,\"2403\":1,\"2404\":2,\"2849\":3,\"2850\":3}}],[\"acos\",{\"1\":{\"770\":1}}],[\"ac\",{\"1\":{\"660\":1}}],[\"acknowledgedresponse\",{\"1\":{\"3212\":1}}],[\"acknowledged\",{\"1\":{\"419\":2,\"422\":3,\"425\":2,\"3119\":2,\"3130\":1,\"3198\":1,\"3209\":2,\"3282\":2,\"3587\":1,\"3682\":1}}],[\"actualtypearguments\",{\"1\":{\"2301\":2}}],[\"actuator<\",{\"1\":{\"595\":1,\"612\":1}}],[\"actuator依赖\",{\"1\":{\"595\":1}}],[\"actuator监控\",{\"0\":{\"595\":1}}],[\"actuatorinfo\",{\"1\":{\"347\":1}}],[\"actuator可以访问应用所有端点信息\",{\"1\":{\"342\":1}}],[\"actuator可知\",{\"1\":{\"341\":1}}],[\"actuator开头的请求后得到json数据\",{\"1\":{\"341\":1}}],[\"actuator\",{\"0\":{\"341\":1},\"1\":{\"340\":1,\"342\":2}}],[\"action=\",{\"1\":{\"2857\":1,\"2871\":1}}],[\"action\",{\"1\":{\"2079\":1,\"2750\":1,\"3210\":1,\"3355\":1,\"3698\":2}}],[\"activity\",{\"1\":{\"1539\":1}}],[\"activation>\",{\"1\":{\"281\":1}}],[\"activate\",{\"1\":{\"272\":2}}],[\"activebydefault>\",{\"1\":{\"281\":1}}],[\"active>pro<\",{\"1\":{\"281\":1}}],[\"active>\",{\"1\":{\"281\":2}}],[\"active>dev<\",{\"1\":{\"281\":1}}],[\"active指定哪个环境组生效\",{\"1\":{\"280\":1}}],[\"active\",{\"1\":{\"272\":1,\"275\":1,\"278\":1,\"280\":1,\"282\":2,\"283\":1,\"384\":2,\"3278\":3,\"3279\":3,\"3280\":3,\"3378\":3,\"3380\":3}}],[\"activemq<\",{\"1\":{\"119\":4,\"450\":1}}],[\"activemq\",{\"0\":{\"449\":1},\"1\":{\"119\":5,\"451\":1}}],[\"a\",{\"0\":{\"892\":1,\"893\":1,\"1492\":1,\"2245\":1,\"2259\":1,\"2271\":1,\"2283\":1,\"2318\":1},\"1\":{\"379\":1,\"672\":1,\"673\":2,\"692\":1,\"693\":2,\"760\":1,\"761\":3,\"762\":1,\"763\":1,\"764\":1,\"766\":1,\"767\":1,\"768\":1,\"769\":4,\"772\":2,\"773\":2,\"774\":3,\"775\":3,\"788\":2,\"789\":2,\"790\":2,\"791\":1,\"792\":1,\"793\":1,\"794\":1,\"795\":1,\"799\":1,\"800\":1,\"812\":2,\"813\":2,\"814\":2,\"819\":1,\"822\":1,\"824\":5,\"826\":1,\"827\":1,\"829\":1,\"874\":1,\"884\":2,\"890\":1,\"892\":1,\"893\":1,\"894\":1,\"896\":1,\"897\":2,\"898\":1,\"899\":4,\"918\":1,\"944\":2,\"945\":3,\"946\":2,\"947\":2,\"948\":1,\"949\":1,\"950\":3,\"951\":4,\"952\":3,\"959\":2,\"961\":1,\"963\":1,\"965\":1,\"970\":4,\"987\":1,\"989\":3,\"990\":3,\"991\":1,\"1001\":2,\"1102\":1,\"1114\":1,\"1119\":1,\"1134\":2,\"1135\":2,\"1149\":1,\"1304\":2,\"1349\":2,\"1350\":1,\"1352\":2,\"1353\":1,\"1360\":2,\"1376\":3,\"1416\":2,\"1426\":1,\"1430\":5,\"1467\":5,\"1505\":1,\"1513\":1,\"1514\":1,\"1541\":1,\"1555\":2,\"1556\":2,\"1582\":2,\"1671\":1,\"1680\":1,\"1703\":2,\"1780\":1,\"1795\":1,\"1999\":2,\"2000\":2,\"2048\":2,\"2052\":1,\"2053\":1,\"2082\":1,\"2095\":1,\"2096\":1,\"2099\":1,\"2101\":2,\"2136\":2,\"2206\":4,\"2237\":1,\"2273\":1,\"2279\":1,\"2296\":2,\"2348\":1,\"2444\":1,\"2445\":1,\"2755\":1,\"2894\":1,\"2895\":1,\"2934\":1,\"2941\":1,\"2942\":2,\"3267\":2,\"3298\":3,\"3307\":1,\"3327\":1,\"3355\":2,\"3464\":1,\"3503\":2,\"3548\":1,\"3621\":1,\"3664\":1,\"3675\":2}}],[\"aufd\",{\"1\":{\"3305\":2}}],[\"augend\",{\"1\":{\"779\":1}}],[\"autumn\",{\"1\":{\"1621\":1,\"1630\":1}}],[\"automatically\",{\"1\":{\"3267\":1,\"3305\":1,\"3328\":1,\"3355\":1,\"3503\":1}}],[\"autocommit\",{\"1\":{\"2628\":1}}],[\"autoconfigurationexcludefilter\",{\"1\":{\"563\":1,\"568\":1}}],[\"autoconfigurationimportselector\",{\"0\":{\"567\":1},\"1\":{\"563\":1}}],[\"autoconfigurationpackages\",{\"1\":{\"563\":1,\"566\":1}}],[\"autoconfigurationpackage\",{\"0\":{\"566\":1},\"1\":{\"563\":1}}],[\"auto\",{\"1\":{\"624\":1,\"2619\":1,\"2683\":1,\"3355\":2}}],[\"autowired进行注入\",{\"1\":{\"393\":1}}],[\"autowired\",{\"1\":{\"152\":1,\"156\":1,\"227\":1,\"366\":1,\"375\":1,\"379\":1,\"380\":1,\"446\":1,\"452\":1,\"554\":1,\"623\":1,\"636\":1,\"637\":1,\"640\":1,\"647\":1}}],[\"auth=true\",{\"1\":{\"3694\":1}}],[\"authenticated\",{\"1\":{\"3307\":1,\"3327\":1,\"3355\":1}}],[\"authentication\",{\"1\":{\"3305\":1,\"3307\":2,\"3327\":2,\"3328\":1,\"3355\":2,\"3715\":1,\"3718\":1,\"3750\":1,\"3751\":1}}],[\"authenticating\",{\"1\":{\"390\":1}}],[\"authscope\",{\"1\":{\"418\":2}}],[\"authsource\",{\"0\":{\"391\":1},\"1\":{\"390\":1}}],[\"authsource=admin\",{\"1\":{\"388\":1,\"389\":1}}],[\"auth\",{\"1\":{\"418\":2,\"3694\":1,\"3715\":2}}],[\"authmechanism=default\",{\"1\":{\"3736\":1,\"3739\":1}}],[\"authmechanism=scram\",{\"1\":{\"388\":1,\"389\":1}}],[\"authmechanism\",{\"0\":{\"392\":1},\"1\":{\"390\":1}}],[\"authorization\",{\"1\":{\"3717\":1,\"3723\":1,\"3728\":1}}],[\"authority\",{\"1\":{\"3294\":1}}],[\"author\",{\"1\":{\"345\":1,\"1056\":1,\"1059\":3}}],[\"auditevents\",{\"1\":{\"342\":1}}],[\"adapter\",{\"1\":{\"1539\":1}}],[\"admin库的管理用户\",{\"1\":{\"3708\":1}}],[\"admin数据库\",{\"1\":{\"3708\":1}}],[\"admin>\",{\"1\":{\"3707\":1,\"3709\":1,\"3712\":2,\"3715\":1,\"3724\":1}}],[\"admincommand\",{\"1\":{\"3675\":1}}],[\"admin上查看统计信息\",{\"1\":{\"352\":1}}],[\"admin设置了13个较为常用的端点作为默认开放的端点\",{\"1\":{\"343\":1}}],[\"admin对应的client包中的一个actuator依赖包定义的\",{\"1\":{\"341\":1}}],[\"admin对应的starter\",{\"1\":{\"319\":1,\"323\":1}}],[\"admin就能自动获取版本信息了\",{\"1\":{\"319\":1}}],[\"admin是一个开源的可视化监控平台\",{\"1\":{\"316\":1}}],[\"admin\",{\"0\":{\"316\":1,\"318\":1,\"322\":1},\"1\":{\"317\":1,\"319\":2,\"321\":1,\"323\":1,\"324\":1,\"326\":1,\"343\":1,\"362\":2,\"372\":2,\"439\":1,\"3210\":1,\"3564\":1,\"3574\":1,\"3698\":1,\"3707\":2,\"3708\":1,\"3709\":2,\"3710\":3,\"3712\":11,\"3715\":1,\"3721\":1,\"3724\":1,\"3750\":1,\"3751\":1}}],[\"addarb\",{\"1\":{\"3674\":2}}],[\"addall\",{\"0\":{\"906\":1,\"946\":1},\"1\":{\"906\":2,\"946\":2}}],[\"additional\",{\"1\":{\"3307\":1,\"3327\":1,\"3355\":1,\"3757\":1}}],[\"addinnerinterceptor\",{\"1\":{\"626\":1}}],[\"addcookie\",{\"1\":{\"3042\":2,\"3046\":1,\"3052\":2,\"3053\":1,\"3054\":1,\"3070\":1}}],[\"addjarpkg\",{\"1\":{\"2991\":1}}],[\"addbath\",{\"1\":{\"2616\":1,\"2617\":1,\"2618\":1}}],[\"addbatch\",{\"0\":{\"2616\":1},\"1\":{\"2624\":1,\"2625\":1}}],[\"add方法是有泛型限制的\",{\"1\":{\"1957\":1}}],[\"add添加数据\",{\"0\":{\"1873\":1}}],[\"add操作\",{\"0\":{\"1866\":1}}],[\"addxxxlistener\",{\"1\":{\"1531\":1}}],[\"add\",{\"0\":{\"779\":1,\"905\":1,\"945\":1},\"1\":{\"779\":2,\"897\":1,\"905\":3,\"906\":4,\"930\":3,\"937\":7,\"939\":3,\"945\":4,\"1376\":11,\"1842\":3,\"1851\":3,\"1866\":1,\"1867\":1,\"1869\":1,\"1873\":1,\"1902\":8,\"1905\":4,\"1955\":5,\"1957\":4,\"1981\":1,\"1992\":3,\"1993\":3,\"1995\":4,\"1996\":4,\"2469\":8,\"2538\":1,\"2603\":1,\"2653\":1,\"2734\":1,\"2778\":1,\"3220\":3,\"3221\":3,\"3355\":1,\"3673\":2}}],[\"adddocumenttest\",{\"1\":{\"428\":1}}],[\"address\",{\"1\":{\"211\":3,\"214\":1,\"468\":1,\"485\":2,\"2212\":1,\"2219\":1,\"2234\":1,\"2708\":1,\"3355\":1}}],[\"addeed\",{\"1\":{\"96\":1}}],[\"already\",{\"1\":{\"2708\":1}}],[\"alt\",{\"1\":{\"2354\":1}}],[\"alen\",{\"1\":{\"2258\":2}}],[\"always\",{\"1\":{\"326\":1,\"343\":1,\"345\":1}}],[\"allow\",{\"1\":{\"3268\":1,\"3269\":1,\"3270\":1,\"3271\":1,\"3307\":2,\"3327\":2,\"3337\":1,\"3355\":3}}],[\"allowed\",{\"1\":{\"2610\":1,\"3355\":1}}],[\"allocation\",{\"0\":{\"3371\":1},\"1\":{\"423\":1,\"3124\":1,\"3283\":1,\"3381\":1}}],[\"allmatch\",{\"0\":{\"2477\":1},\"1\":{\"2477\":2}}],[\"allen=a\",{\"1\":{\"959\":2,\"960\":2,\"961\":1,\"962\":1,\"963\":1,\"964\":1,\"965\":1,\"966\":1,\"967\":1,\"968\":2,\"969\":1,\"970\":1,\"971\":2}}],[\"allen\",{\"1\":{\"959\":1,\"961\":3,\"963\":3,\"969\":2}}],[\"allargscontructor\",{\"1\":{\"620\":1}}],[\"allargsconstructor\",{\"1\":{\"427\":1}}],[\"all\",{\"1\":{\"308\":2,\"408\":2,\"1678\":1,\"3165\":1,\"3509\":1}}],[\"alipay\",{\"1\":{\"1616\":1}}],[\"aliases查询结果\",{\"1\":{\"3211\":1}}],[\"aliases\",{\"1\":{\"423\":1,\"3124\":1,\"3283\":1,\"3381\":1}}],[\"aliyun<\",{\"1\":{\"611\":2}}],[\"aliyun\",{\"1\":{\"97\":1}}],[\"alibaba<\",{\"1\":{\"355\":1,\"361\":1,\"371\":1,\"598\":1,\"609\":1,\"612\":1,\"3085\":1}}],[\"alibaba最新的稳定版需要的是springboot\",{\"1\":{\"96\":1}}],[\"alibaba\",{\"1\":{\"10\":1,\"506\":3,\"2672\":1}}],[\"again\",{\"1\":{\"3675\":1}}],[\"aggregationbuilders可继续调用field函数\",{\"1\":{\"3248\":1}}],[\"aggregationbuilders可以调用聚合函数\",{\"1\":{\"3248\":1}}],[\"aggregationbuilders\",{\"1\":{\"3248\":2,\"3249\":1,\"3250\":1}}],[\"aggregation\",{\"0\":{\"3248\":1},\"1\":{\"3248\":1,\"3249\":1,\"3250\":1}}],[\"aggregations\",{\"1\":{\"3191\":1,\"3249\":1}}],[\"aggregator\",{\"1\":{\"172\":1}}],[\"aggs\",{\"1\":{\"3188\":1,\"3190\":1}}],[\"agetype\",{\"1\":{\"3029\":3}}],[\"age>\",{\"1\":{\"3027\":1,\"3030\":1}}],[\"age>o\",{\"1\":{\"749\":1}}],[\"agents\",{\"1\":{\"3355\":1}}],[\"agent\",{\"1\":{\"2850\":1}}],[\"age=21\",{\"1\":{\"2508\":1}}],[\"age=0\",{\"1\":{\"2258\":1,\"2285\":1}}],[\"age=35\",{\"1\":{\"2484\":1}}],[\"age=34\",{\"1\":{\"2480\":1,\"2481\":1}}],[\"age=33\",{\"1\":{\"1905\":1}}],[\"age=32\",{\"1\":{\"1905\":1}}],[\"age=\",{\"1\":{\"1434\":1,\"2255\":1}}],[\"age=1\",{\"1\":{\"2502\":1,\"2505\":1,\"2507\":2}}],[\"age=12\",{\"1\":{\"432\":2,\"1902\":1,\"1905\":1}}],[\"age=10\",{\"1\":{\"408\":2,\"409\":1}}],[\"age++\",{\"1\":{\"1282\":1}}],[\"age<o\",{\"1\":{\"749\":1}}],[\"age1\",{\"1\":{\"151\":1}}],[\"age\",{\"0\":{\"1551\":1},\"1\":{\"148\":6,\"151\":1,\"379\":3,\"394\":1,\"406\":2,\"407\":2,\"410\":1,\"427\":1,\"548\":2,\"549\":2,\"749\":6,\"854\":2,\"855\":3,\"863\":1,\"864\":4,\"865\":5,\"1089\":1,\"1220\":1,\"1258\":1,\"1259\":1,\"1262\":2,\"1266\":1,\"1267\":3,\"1270\":1,\"1282\":1,\"1302\":2,\"1304\":5,\"1316\":4,\"1319\":2,\"1330\":6,\"1352\":1,\"1368\":6,\"1408\":5,\"1413\":2,\"1428\":2,\"1434\":1,\"1526\":2,\"1534\":3,\"1680\":1,\"1905\":2,\"2127\":3,\"2255\":5,\"2256\":1,\"2257\":3,\"2292\":1,\"2293\":1,\"2469\":5,\"2569\":1,\"3025\":2,\"3029\":1,\"3215\":1,\"3220\":3,\"3225\":1,\"3226\":4,\"3227\":3,\"3231\":2,\"3233\":1,\"3234\":5,\"3236\":1,\"3237\":3,\"3240\":3,\"3242\":2,\"3244\":1,\"3245\":4,\"3249\":1,\"3253\":1}}],[\"api都要进行ssl验证\",{\"1\":{\"3307\":1,\"3327\":1}}],[\"api方式访问es服务\",{\"1\":{\"3298\":1}}],[\"api文档的httpservletrequest接口中方法说明\",{\"1\":{\"2838\":1}}],[\"api介绍\",{\"0\":{\"2681\":1}}],[\"api使用背景\",{\"0\":{\"2437\":1}}],[\"api是操作集合和数组的\",{\"1\":{\"2435\":1}}],[\"api其实就是一套api\",{\"1\":{\"2435\":1}}],[\"api取得任何类的内部信息\",{\"1\":{\"2246\":1}}],[\"api中提供了两套nio\",{\"1\":{\"2161\":1}}],[\"api中创建线程的方式\",{\"0\":{\"1710\":1}}],[\"api提供了两个转换流的类\",{\"1\":{\"2090\":1}}],[\"api提供了带缓冲功能的流类\",{\"1\":{\"2073\":1}}],[\"api明确\",{\"1\":{\"1729\":1}}],[\"api开发\",{\"1\":{\"639\":1}}],[\"api接口提供控制开关\",{\"1\":{\"633\":1}}],[\"api错误\",{\"1\":{\"420\":1}}],[\"api\",{\"0\":{\"402\":1,\"421\":1,\"426\":1,\"2435\":1,\"2436\":1,\"3202\":1,\"3472\":1},\"1\":{\"414\":2,\"422\":1,\"423\":1,\"424\":1,\"425\":1,\"428\":1,\"429\":1,\"430\":1,\"431\":1,\"432\":1,\"589\":1,\"709\":3,\"1063\":1,\"1336\":1,\"1343\":2,\"2161\":2,\"2436\":4,\"2485\":1,\"2531\":3,\"2773\":1,\"2774\":1,\"2778\":1,\"2790\":1,\"3202\":1,\"3304\":1,\"3307\":3,\"3327\":3,\"3337\":1,\"3355\":2,\"3402\":1,\"3452\":1,\"3472\":1,\"3514\":1}}],[\"api也不会报错\",{\"1\":{\"395\":1}}],[\"api<\",{\"1\":{\"218\":1}}],[\"apache\",{\"0\":{\"2678\":1},\"1\":{\"119\":4,\"418\":8,\"624\":1,\"2679\":1,\"2681\":3,\"2737\":1,\"3092\":1}}],[\"appdata\",{\"1\":{\"2755\":1}}],[\"appliedoptime\",{\"1\":{\"3670\":1}}],[\"application域对象\",{\"0\":{\"2925\":1}}],[\"application项目的目录结构稍有不同\",{\"1\":{\"2732\":1}}],[\"application\",{\"0\":{\"388\":1,\"416\":1,\"2749\":1},\"1\":{\"98\":1,\"137\":1,\"141\":3,\"159\":1,\"194\":1,\"244\":1,\"245\":1,\"262\":2,\"265\":1,\"274\":4,\"277\":3,\"362\":1,\"372\":1,\"439\":1,\"467\":1,\"546\":1,\"556\":1,\"560\":1,\"586\":1,\"589\":3,\"616\":1,\"1491\":1,\"2731\":1,\"2734\":1,\"2750\":1,\"2849\":1,\"2925\":1,\"3355\":1}}],[\"applet\",{\"1\":{\"2770\":1,\"2984\":1}}],[\"applet程序或者应用来使用这些对象\",{\"1\":{\"1532\":1}}],[\"apply\",{\"1\":{\"976\":1,\"2392\":1,\"2424\":1,\"2425\":1,\"2427\":1,\"2428\":1,\"2432\":1,\"2433\":1}}],[\"app\",{\"1\":{\"555\":2}}],[\"app5\",{\"1\":{\"520\":1,\"521\":1}}],[\"appname\",{\"1\":{\"345\":1}}],[\"append参数\",{\"1\":{\"822\":1}}],[\"append\",{\"0\":{\"700\":1},\"1\":{\"693\":2,\"700\":3,\"822\":2,\"823\":2,\"1795\":8}}],[\"appender>\",{\"1\":{\"308\":4}}],[\"appengine\",{\"1\":{\"119\":1}}],[\"asc\",{\"1\":{\"3185\":1,\"3243\":1,\"3244\":1}}],[\"ascii\",{\"1\":{\"1102\":1,\"1103\":1,\"2109\":1}}],[\"async\",{\"1\":{\"2950\":1}}],[\"asp\",{\"1\":{\"2695\":1}}],[\"aspect\",{\"0\":{\"2347\":1}}],[\"aspectj\",{\"1\":{\"119\":1}}],[\"asshole\",{\"1\":{\"1060\":1}}],[\"assertj\",{\"1\":{\"119\":1}}],[\"aslist方法快速生成一个list集合\",{\"1\":{\"944\":1}}],[\"aslist\",{\"0\":{\"897\":1,\"899\":1,\"944\":1},\"1\":{\"897\":2,\"899\":2,\"944\":1,\"2463\":1,\"2469\":1,\"2474\":1,\"2487\":1,\"2488\":1}}],[\"asin\",{\"1\":{\"770\":1}}],[\"as\",{\"1\":{\"172\":1,\"225\":1,\"3278\":1,\"3279\":1,\"3280\":1,\"3307\":1,\"3327\":1,\"3355\":1,\"3378\":1,\"3380\":1}}],[\"analysis\",{\"1\":{\"3479\":1}}],[\"analyze\",{\"0\":{\"3472\":1},\"1\":{\"3472\":1,\"3473\":1,\"3476\":1,\"3480\":1,\"3485\":1,\"3489\":1,\"3632\":1}}],[\"analyzer\",{\"1\":{\"3197\":1,\"3473\":1,\"3480\":1,\"3482\":1,\"3485\":1,\"3488\":1,\"3489\":1}}],[\"anlyze\",{\"1\":{\"3473\":2}}],[\"an\",{\"1\":{\"2683\":1,\"3110\":1,\"3298\":1,\"3314\":1,\"3328\":1,\"3347\":1,\"3355\":2,\"3718\":1}}],[\"annos\",{\"1\":{\"2296\":2,\"2304\":2}}],[\"anno\",{\"1\":{\"868\":2}}],[\"annotatedelement\",{\"1\":{\"832\":1}}],[\"annotations\",{\"1\":{\"1680\":2,\"2304\":2}}],[\"annotation在反射函数中的使用示例\",{\"1\":{\"1680\":1}}],[\"annotationtest\",{\"1\":{\"1680\":1}}],[\"annotationtest<\",{\"1\":{\"1671\":1}}],[\"annotationtype\",{\"1\":{\"1652\":1}}],[\"annotation类将被javadoc\",{\"1\":{\"1663\":1}}],[\"annotation类型\",{\"1\":{\"1656\":1}}],[\"annotation的生命周期\",{\"0\":{\"1659\":1}}],[\"annotation信息仅存在于编译器处理期间\",{\"1\":{\"1654\":1}}],[\"annotation有了某种用途\",{\"1\":{\"1653\":1}}],[\"annotation>\",{\"1\":{\"1652\":1}}],[\"annotation接口\",{\"1\":{\"1652\":1}}],[\"annotation组成部分\",{\"0\":{\"1651\":1}}],[\"annotation其实就是代码里的特殊标记\",{\"1\":{\"1635\":1}}],[\"annotationmetadata用来进行元数据的判断\",{\"1\":{\"527\":1}}],[\"annotationmetadata获取的是哪个类的元数据了呢\",{\"1\":{\"524\":1}}],[\"annotationmetadata\",{\"1\":{\"523\":1,\"525\":1,\"527\":1,\"536\":1}}],[\"annotationconfigapplicationcontext\",{\"1\":{\"520\":2,\"521\":2,\"535\":1}}],[\"annotation\",{\"0\":{\"1633\":1,\"1652\":1},\"1\":{\"418\":4,\"525\":1,\"868\":2,\"1543\":1,\"1635\":2,\"1637\":3,\"1643\":3,\"1650\":5,\"1652\":4,\"1653\":7,\"1654\":9,\"1656\":2,\"1657\":3,\"1660\":3,\"1663\":1,\"1664\":2,\"1674\":1,\"1679\":2,\"1680\":11,\"2264\":1,\"2296\":2,\"2304\":2}}],[\"anywhere\",{\"1\":{\"3307\":2,\"3327\":2,\"3355\":2}}],[\"anymatch\",{\"0\":{\"2478\":1},\"1\":{\"2478\":2}}],[\"any\",{\"1\":{\"418\":1,\"2481\":2,\"3298\":1}}],[\"anonymous\",{\"1\":{\"2508\":2}}],[\"anotherxxx\",{\"1\":{\"773\":1}}],[\"anotherinteger\",{\"1\":{\"746\":2}}],[\"anotherstring\",{\"1\":{\"660\":1,\"746\":3}}],[\"anothrerstring\",{\"1\":{\"653\":1}}],[\"ano\",{\"1\":{\"248\":2,\"2708\":1}}],[\"antlr2\",{\"1\":{\"119\":1}}],[\"and等\",{\"1\":{\"3464\":1}}],[\"android中注解占据了更重要的角色\",{\"1\":{\"1636\":1}}],[\"android\",{\"1\":{\"1012\":1}}],[\"and\",{\"1\":{\"103\":1,\"410\":1,\"669\":2,\"2558\":1,\"2559\":1,\"2750\":2,\"3267\":3,\"3305\":5,\"3307\":3,\"3327\":3,\"3328\":3,\"3355\":7,\"3464\":1,\"3469\":1,\"3503\":3,\"3675\":1}}],[\"arbiter表示仲裁节点\",{\"1\":{\"3674\":1}}],[\"arbiteronly\",{\"1\":{\"3667\":1,\"3668\":1,\"3673\":2}}],[\"arbiter\",{\"1\":{\"3645\":1,\"3652\":1,\"3674\":1}}],[\"arm\",{\"1\":{\"3114\":1}}],[\"archive\",{\"1\":{\"2979\":1}}],[\"archetypes\",{\"1\":{\"2737\":1}}],[\"archetype\",{\"1\":{\"2737\":2,\"2741\":1}}],[\"arithmeticexception\",{\"0\":{\"1582\":1},\"1\":{\"1571\":1}}],[\"areas\",{\"1\":{\"3313\":1,\"3346\":1}}],[\"area\",{\"1\":{\"1546\":1}}],[\"are\",{\"1\":{\"1059\":1,\"2064\":1,\"3305\":1,\"3307\":2,\"3327\":2,\"3328\":1,\"3355\":2}}],[\"arrstream\",{\"1\":{\"2446\":1}}],[\"arrs\",{\"1\":{\"1969\":1}}],[\"arr3\",{\"1\":{\"1238\":3,\"1246\":3}}],[\"arr2\",{\"1\":{\"895\":3,\"896\":2,\"1216\":1,\"1238\":2,\"1246\":2,\"1821\":1}}],[\"arr1\",{\"1\":{\"890\":3,\"892\":3,\"893\":3,\"894\":3,\"895\":5,\"896\":2,\"898\":3,\"1216\":1,\"1238\":3,\"1246\":2,\"1821\":1}}],[\"array和object\",{\"1\":{\"3547\":1}}],[\"arrayhandler\",{\"1\":{\"2684\":1}}],[\"arrayindexoutofboundsexception\",{\"0\":{\"1577\":1},\"1\":{\"1245\":1,\"1571\":1,\"1591\":1}}],[\"array1\",{\"1\":{\"1213\":1,\"1214\":2}}],[\"array2\",{\"1\":{\"1213\":1,\"1214\":2}}],[\"arraylisthandler\",{\"1\":{\"2684\":1}}],[\"arraylist的底层做了一些改变\",{\"1\":{\"1869\":1}}],[\"arraylist的变化\",{\"0\":{\"1869\":1}}],[\"arraylist源码分析\",{\"0\":{\"1864\":1}}],[\"arraylist<t>\",{\"1\":{\"2603\":2,\"2653\":2}}],[\"arraylist<\",{\"1\":{\"2003\":1,\"2005\":2}}],[\"arraylist<object>\",{\"1\":{\"2001\":1}}],[\"arraylist<person>\",{\"1\":{\"2001\":1}}],[\"arraylist<man>\",{\"1\":{\"2001\":1}}],[\"arraylist<e>\",{\"1\":{\"1981\":1}}],[\"arraylist<string>\",{\"1\":{\"1964\":1,\"1969\":2,\"1985\":1,\"1986\":1,\"1995\":1,\"1996\":1}}],[\"arraylist<integer>\",{\"1\":{\"937\":1,\"1957\":1,\"1969\":1,\"1995\":1,\"1996\":1}}],[\"arraylist<>\",{\"1\":{\"899\":1,\"905\":1,\"906\":2,\"930\":1,\"937\":2,\"939\":1,\"945\":1,\"1957\":1,\"1964\":1,\"1969\":3,\"1981\":1,\"1993\":1,\"1995\":2,\"1996\":2,\"2469\":3}}],[\"arraylist$itr\",{\"1\":{\"919\":1}}],[\"arraylist\",{\"0\":{\"1860\":1},\"1\":{\"899\":1,\"903\":1,\"950\":1,\"1058\":2,\"1826\":1,\"1831\":1,\"1842\":1,\"1851\":1,\"1859\":1,\"1865\":2,\"1868\":2,\"1869\":2,\"1955\":2}}],[\"arraylist中重写了这些方法\",{\"1\":{\"897\":1}}],[\"array\",{\"1\":{\"889\":1,\"1075\":1,\"1207\":1,\"2446\":1,\"2447\":3,\"2562\":1,\"3197\":1,\"3585\":1}}],[\"arrays工具类\",{\"0\":{\"1247\":1},\"1\":{\"1247\":1}}],[\"arrays$arraylist和arraylist都是继承abstractlist\",{\"1\":{\"897\":1}}],[\"arrays类重写了object类中的equals\",{\"1\":{\"896\":1}}],[\"arrays类即为操作数组的工具类\",{\"1\":{\"889\":1}}],[\"arrays\",{\"0\":{\"889\":1,\"944\":1},\"1\":{\"58\":1,\"673\":1,\"674\":2,\"751\":2,\"756\":4,\"757\":2,\"794\":1,\"795\":1,\"814\":1,\"843\":1,\"848\":1,\"849\":1,\"852\":1,\"853\":1,\"856\":1,\"857\":1,\"868\":1,\"872\":1,\"873\":1,\"889\":2,\"890\":1,\"892\":2,\"893\":2,\"894\":2,\"895\":3,\"896\":1,\"897\":1,\"898\":2,\"899\":1,\"917\":1,\"944\":1,\"1001\":1,\"1485\":1,\"2101\":1,\"2446\":2,\"2447\":1,\"2463\":1,\"2469\":1,\"2474\":1,\"2487\":1,\"2488\":1,\"3220\":1,\"3221\":1}}],[\"arr\",{\"1\":{\"672\":2,\"673\":2,\"756\":5,\"897\":2,\"918\":1,\"1221\":1,\"1230\":4,\"1232\":4,\"1233\":3,\"1234\":1,\"1236\":3,\"1237\":4,\"1239\":3,\"1240\":3,\"1245\":3,\"1376\":2,\"1560\":1,\"1575\":2,\"1577\":2,\"1591\":2,\"1821\":1,\"1852\":2,\"1854\":5,\"1855\":4,\"1981\":2,\"1982\":1,\"2168\":1,\"2446\":2}}],[\"arg2\",{\"1\":{\"2376\":1,\"2378\":1}}],[\"arg1\",{\"1\":{\"2370\":1,\"2372\":1,\"2374\":1,\"2376\":1,\"2378\":1}}],[\"argumengts\",{\"1\":{\"1294\":1}}],[\"arguments选项框的\",{\"1\":{\"258\":1}}],[\"arguments就是输入临时属性的\",{\"1\":{\"258\":1}}],[\"arg\",{\"1\":{\"259\":3}}],[\"args数组\",{\"1\":{\"1541\":1}}],[\"args\",{\"1\":{\"127\":2,\"128\":3,\"164\":2,\"197\":1,\"259\":4,\"320\":2,\"493\":1,\"498\":2,\"520\":1,\"521\":1,\"555\":1,\"874\":1,\"1038\":1,\"1184\":1,\"1186\":1,\"1204\":1,\"1259\":1,\"1267\":1,\"1280\":1,\"1282\":1,\"1292\":1,\"1302\":1,\"1304\":1,\"1353\":1,\"1401\":1,\"1408\":1,\"1466\":1,\"1467\":1,\"1497\":1,\"1560\":2,\"1600\":1,\"1609\":1,\"1680\":1,\"1720\":1,\"1728\":1,\"1729\":1,\"1737\":1,\"1740\":1,\"1757\":1,\"1760\":1,\"1768\":1,\"1784\":1,\"1795\":1,\"1804\":1,\"1810\":1,\"1817\":1,\"1968\":1,\"2296\":5,\"2314\":1,\"2330\":1,\"2343\":2,\"2349\":2,\"2581\":3,\"2600\":3,\"2603\":3,\"2634\":3,\"2653\":12,\"3206\":1,\"3209\":1,\"3211\":1,\"3212\":1,\"3214\":1,\"3217\":1,\"3218\":1,\"3220\":1,\"3221\":1,\"3225\":1,\"3226\":1,\"3227\":1,\"3231\":1,\"3234\":1,\"3237\":1,\"3240\":1,\"3242\":1,\"3244\":1,\"3249\":1,\"3253\":1}}],[\"articel\",{\"1\":{\"3682\":1}}],[\"article>\",{\"1\":{\"3682\":1}}],[\"articleid\",{\"1\":{\"3587\":1,\"3590\":2,\"3596\":1,\"3597\":1,\"3682\":1}}],[\"article\",{\"1\":{\"388\":2,\"3682\":2,\"3707\":1,\"3711\":1,\"3712\":1,\"3750\":1,\"3751\":1}}],[\"artifacts配置\",{\"0\":{\"2762\":1}}],[\"artifacts\",{\"1\":{\"2723\":1,\"2735\":1,\"2762\":1,\"2992\":2,\"3287\":1,\"3318\":1}}],[\"artifactid\",{\"1\":{\"345\":1}}],[\"artifactid>\",{\"1\":{\"100\":1,\"117\":1,\"118\":1,\"119\":5,\"123\":5,\"134\":2,\"135\":1,\"169\":1,\"170\":1,\"171\":1,\"185\":1,\"209\":1,\"218\":2,\"223\":1,\"239\":1,\"319\":2,\"323\":1,\"355\":2,\"358\":1,\"361\":3,\"371\":3,\"377\":1,\"383\":1,\"413\":2,\"438\":1,\"450\":1,\"466\":1,\"476\":1,\"482\":1,\"592\":1,\"593\":1,\"594\":1,\"595\":1,\"597\":1,\"598\":1,\"599\":1,\"600\":1,\"602\":1,\"604\":1,\"606\":1,\"607\":1,\"608\":1,\"609\":1,\"611\":2,\"612\":12,\"620\":1,\"3085\":1,\"3205\":2,\"3216\":1,\"3743\":1,\"3748\":1}}],[\"artifact\",{\"1\":{\"95\":1,\"2731\":1}}],[\"artemis\",{\"1\":{\"119\":1}}],[\"a~z\",{\"1\":{\"10\":1}}],[\"mget\",{\"1\":{\"3402\":1,\"3416\":1}}],[\"mp\",{\"1\":{\"3252\":2,\"3253\":2}}],[\"mp4<\",{\"1\":{\"2933\":1}}],[\"mp4\",{\"1\":{\"2045\":1}}],[\"mp3\",{\"1\":{\"2045\":1}}],[\"mpconfig\",{\"1\":{\"626\":1}}],[\"mr1\",{\"1\":{\"1757\":3}}],[\"m27019\",{\"1\":{\"3653\":1,\"3658\":4,\"3727\":1}}],[\"m27018\",{\"1\":{\"3653\":1,\"3657\":4,\"3727\":1}}],[\"m27017\",{\"1\":{\"3653\":1,\"3656\":4,\"3727\":1,\"3728\":1}}],[\"m2\",{\"1\":{\"1720\":2}}],[\"m1对象不能重复调用start\",{\"1\":{\"1720\":1}}],[\"m1\",{\"1\":{\"1720\":4,\"1740\":4,\"1760\":4,\"1768\":4}}],[\"m4\",{\"1\":{\"1418\":1}}],[\"mv\",{\"1\":{\"3297\":1,\"3301\":2}}],[\"mvc与三层架构\",{\"0\":{\"3010\":1}}],[\"mvc的优点\",{\"0\":{\"3004\":1}}],[\"mvc的设计模式\",{\"1\":{\"1335\":1}}],[\"mvc\",{\"0\":{\"3001\":1},\"1\":{\"3002\":1,\"3011\":3,\"3012\":2}}],[\"mvc是常用的设计模式之一\",{\"1\":{\"1537\":1}}],[\"mvc设计模式\",{\"0\":{\"1537\":1}}],[\"mvn\",{\"1\":{\"236\":1}}],[\"mvn设置隐藏\",{\"1\":{\"161\":1}}],[\"mvnw\",{\"1\":{\"98\":2}}],[\"m+n\",{\"1\":{\"1292\":1}}],[\"m和n相等\",{\"1\":{\"1162\":1}}],[\"m大\",{\"1\":{\"1162\":1}}],[\"m>n\",{\"1\":{\"1161\":2}}],[\"mc\",{\"1\":{\"893\":2}}],[\"millis\",{\"1\":{\"3154\":2,\"3278\":1,\"3279\":1,\"3280\":1,\"3378\":1,\"3380\":1}}],[\"millitime\",{\"1\":{\"1727\":1}}],[\"mimetype\",{\"1\":{\"2934\":1}}],[\"mime\",{\"1\":{\"2933\":2}}],[\"mime类型\",{\"0\":{\"2932\":1}}],[\"mi\",{\"1\":{\"2194\":1,\"2195\":2,\"2196\":1}}],[\"misc\",{\"1\":{\"844\":1,\"845\":1,\"2280\":2}}],[\"minimum\",{\"1\":{\"3108\":2,\"3533\":1}}],[\"mininclusive\",{\"1\":{\"3029\":1}}],[\"minidle\",{\"1\":{\"2674\":1}}],[\"minoccurs=\",{\"1\":{\"3029\":1}}],[\"minevictableidletimemillis\",{\"1\":{\"2674\":1}}],[\"min2\",{\"1\":{\"767\":2}}],[\"min1\",{\"1\":{\"767\":2}}],[\"minusweeks\",{\"1\":{\"722\":1}}],[\"minusnanos\",{\"1\":{\"722\":1}}],[\"minusseconds\",{\"1\":{\"722\":1}}],[\"minusminutes\",{\"1\":{\"722\":1}}],[\"minusmonths\",{\"1\":{\"722\":1}}],[\"minushours\",{\"1\":{\"722\":1}}],[\"minusdays\",{\"1\":{\"722\":1}}],[\"minusyears\",{\"1\":{\"722\":1}}],[\"minusxxx\",{\"0\":{\"722\":1}}],[\"minute\",{\"1\":{\"718\":2,\"719\":2}}],[\"minutes\",{\"1\":{\"501\":1,\"3305\":2,\"3328\":1}}],[\"min\",{\"0\":{\"767\":1,\"935\":1,\"2484\":1},\"1\":{\"220\":1,\"720\":2,\"721\":3,\"722\":1,\"746\":1,\"767\":3,\"889\":1,\"935\":5,\"1507\":1,\"1735\":1,\"1928\":2,\"2484\":4,\"3187\":2,\"3188\":3,\"3191\":1,\"3247\":2,\"3248\":2,\"3267\":1,\"3503\":1}}],[\"mkdirs\",{\"0\":{\"805\":1},\"1\":{\"805\":2}}],[\"mkdir不会抛出异常\",{\"1\":{\"804\":1,\"805\":1}}],[\"mkdir\",{\"0\":{\"804\":1},\"1\":{\"804\":2,\"3297\":1,\"3561\":2}}],[\"mutually\",{\"1\":{\"3307\":1,\"3327\":1,\"3355\":1}}],[\"mutual\",{\"1\":{\"3307\":1,\"3327\":1,\"3355\":1}}],[\"musk其实是一个意思\",{\"1\":{\"3436\":1}}],[\"musk\",{\"1\":{\"3436\":1}}],[\"mustnot\",{\"1\":{\"3230\":1,\"3231\":1}}],[\"must\",{\"1\":{\"3169\":2,\"3230\":2,\"3231\":1}}],[\"music\",{\"1\":{\"148\":2}}],[\"multi\",{\"1\":{\"3335\":1,\"3595\":1,\"3597\":1}}],[\"multiline\",{\"1\":{\"997\":1}}],[\"multiplicand\",{\"1\":{\"781\":1}}],[\"multiply\",{\"0\":{\"781\":1},\"1\":{\"781\":2}}],[\"msomebody\",{\"1\":{\"1680\":3}}],[\"ms可选\",{\"1\":{\"718\":1}}],[\"ms\",{\"1\":{\"718\":2,\"720\":2,\"721\":2,\"722\":1,\"726\":2,\"727\":2,\"793\":2,\"881\":3}}],[\"msg2\",{\"1\":{\"3052\":1}}],[\"msg1\",{\"1\":{\"3052\":1}}],[\"msg=hello\",{\"1\":{\"3049\":1,\"3050\":1}}],[\"msg\",{\"1\":{\"308\":4,\"447\":4,\"646\":7,\"1612\":2,\"2903\":4,\"3046\":1,\"3047\":1,\"3053\":1}}],[\"m\",{\"1\":{\"258\":1,\"299\":2,\"677\":1,\"827\":1,\"939\":3,\"960\":1,\"987\":2,\"997\":1,\"1161\":4,\"1162\":3,\"1292\":5,\"1293\":3,\"1526\":2,\"1780\":1,\"2295\":4,\"2296\":7,\"2369\":2,\"3002\":1,\"3011\":1}}],[\"mf的文件路径\",{\"1\":{\"2992\":1}}],[\"mf文件中也就没有了main\",{\"1\":{\"247\":1}}],[\"mf文件中的main\",{\"1\":{\"247\":1}}],[\"mf中start\",{\"1\":{\"244\":1}}],[\"mf\",{\"0\":{\"246\":1},\"1\":{\"244\":1,\"245\":1,\"246\":2,\"2981\":1}}],[\"merge\",{\"1\":{\"3513\":1}}],[\"me\",{\"1\":{\"1011\":1,\"3664\":1}}],[\"mediumblob\",{\"1\":{\"2608\":1}}],[\"medium\",{\"1\":{\"734\":1}}],[\"memory\",{\"1\":{\"3267\":1,\"3313\":1,\"3346\":1,\"3355\":5,\"3449\":2,\"3503\":1,\"3527\":2}}],[\"memorystoreevictionpolicy=\",{\"1\":{\"478\":2}}],[\"memorystoreevictionpolicy\",{\"1\":{\"478\":1}}],[\"mempty\",{\"1\":{\"1680\":3}}],[\"members里多了一个对象\",{\"1\":{\"3674\":1}}],[\"members\",{\"1\":{\"3667\":1,\"3668\":1,\"3670\":1,\"3671\":1,\"3679\":3,\"3689\":1}}],[\"member\",{\"1\":{\"860\":1}}],[\"memcached就没被整合\",{\"1\":{\"477\":1}}],[\"memcached\",{\"0\":{\"486\":1},\"1\":{\"464\":1}}],[\"memcache\",{\"0\":{\"82\":1},\"1\":{\"10\":1,\"45\":1}}],[\"messagingtemplate\",{\"1\":{\"452\":3}}],[\"messagelistener\",{\"1\":{\"455\":1}}],[\"messageservice\",{\"1\":{\"452\":1}}],[\"messageserviceactivemqimpl\",{\"1\":{\"452\":1}}],[\"message\",{\"1\":{\"220\":2,\"445\":2,\"644\":1}}],[\"method=\",{\"1\":{\"2857\":1,\"2871\":1}}],[\"method和field\",{\"1\":{\"2317\":1}}],[\"method3\",{\"1\":{\"1515\":1,\"1517\":1,\"1518\":4}}],[\"method2\",{\"1\":{\"1515\":1,\"1517\":1,\"1600\":2,\"2349\":2}}],[\"method1\",{\"1\":{\"1515\":1,\"1516\":1,\"1600\":2,\"2349\":2,\"2388\":1}}],[\"methods\",{\"1\":{\"856\":2,\"857\":2,\"2295\":2}}],[\"method\",{\"0\":{\"867\":1},\"1\":{\"856\":2,\"857\":2,\"858\":4,\"859\":2,\"867\":1,\"868\":3,\"869\":1,\"870\":1,\"871\":1,\"872\":1,\"873\":1,\"874\":2,\"1257\":1,\"1497\":2,\"1546\":1,\"1591\":1,\"1653\":2,\"1660\":1,\"1661\":1,\"1670\":1,\"1675\":1,\"1679\":1,\"1680\":8,\"2250\":1,\"2257\":1,\"2258\":1,\"2295\":4,\"2296\":2,\"2311\":2,\"2312\":1,\"2314\":1,\"2340\":2,\"2343\":4,\"2349\":3,\"2396\":1,\"2811\":7,\"2814\":3,\"2846\":2,\"2862\":3}}],[\"method类数组\",{\"1\":{\"856\":1,\"857\":1}}],[\"metrics属于性能监控端点\",{\"1\":{\"352\":1}}],[\"metrics端点\",{\"0\":{\"352\":1}}],[\"metrics\",{\"1\":{\"342\":1}}],[\"metadata和获取和判断配置类的各项元数据\",{\"1\":{\"525\":1}}],[\"metadata\",{\"1\":{\"523\":1,\"525\":3,\"527\":1,\"1634\":1}}],[\"meta\",{\"1\":{\"193\":2,\"244\":1,\"245\":1,\"2981\":1}}],[\"megabytes\",{\"1\":{\"216\":1}}],[\"most\",{\"1\":{\"3641\":1}}],[\"mogondb\",{\"1\":{\"3596\":1}}],[\"momery\",{\"1\":{\"3527\":1}}],[\"mobile\",{\"1\":{\"2850\":1}}],[\"move\",{\"1\":{\"2168\":1}}],[\"more\",{\"1\":{\"1059\":1,\"2167\":1,\"3355\":2}}],[\"modle\",{\"1\":{\"3013\":1}}],[\"modularity\",{\"0\":{\"2510\":1}}],[\"modules\",{\"1\":{\"2778\":1,\"3106\":1,\"3289\":1,\"3320\":1}}],[\"module上右键\",{\"1\":{\"2734\":1}}],[\"module\",{\"1\":{\"162\":1,\"2731\":1,\"2737\":1,\"2741\":1,\"3355\":2}}],[\"mode\",{\"0\":{\"2134\":1},\"1\":{\"2133\":3,\"2850\":1,\"3307\":1,\"3327\":1,\"3337\":1,\"3355\":1}}],[\"model\",{\"0\":{\"1538\":1},\"1\":{\"1538\":3,\"3002\":1}}],[\"modcount\",{\"1\":{\"1928\":1}}],[\"modifier\",{\"1\":{\"869\":2,\"2293\":4,\"2296\":1}}],[\"modifiers\",{\"1\":{\"861\":2}}],[\"modify\",{\"1\":{\"636\":1,\"640\":1,\"647\":1}}],[\"mouse\",{\"1\":{\"520\":1,\"536\":1,\"548\":1,\"549\":1,\"550\":2,\"553\":2,\"554\":2}}],[\"mongdb的依赖\",{\"1\":{\"3747\":1}}],[\"mongdb\",{\"1\":{\"3747\":1}}],[\"mongo\",{\"1\":{\"3726\":2,\"3727\":3,\"3728\":1}}],[\"mongoservererror\",{\"1\":{\"3675\":1,\"3715\":1}}],[\"mongos或mongod会将新条目附加到现有日志文件的末尾\",{\"1\":{\"3656\":1}}],[\"mongosh\",{\"1\":{\"3571\":2}}],[\"mongo中的数字\",{\"1\":{\"3588\":1}}],[\"mongod实例存储其数据的目录\",{\"1\":{\"3562\":1,\"3656\":1}}],[\"mongod或mongos应向其发送所有诊断日志记录信息的日志文件的路径\",{\"1\":{\"3562\":1,\"3656\":1}}],[\"mongod\",{\"1\":{\"3557\":1,\"3558\":3,\"3561\":1,\"3562\":1,\"3563\":3,\"3564\":1,\"3654\":1,\"3656\":4,\"3657\":4,\"3658\":4,\"3659\":1,\"3756\":1}}],[\"mongodb<\",{\"1\":{\"3743\":1,\"3748\":1}}],[\"mongodb<artifactid>\",{\"1\":{\"387\":1}}],[\"mongodb存储所有的用户信息在admin\",{\"1\":{\"3712\":1}}],[\"mongodb使用的是基于角色的访问控制\",{\"1\":{\"3696\":1}}],[\"mongodb实例启动运行时是没有启用用户访问权限控制的\",{\"1\":{\"3692\":1}}],[\"mongodb在副本集中\",{\"1\":{\"3685\":1}}],[\"mongodb在创建集合的过程中\",{\"1\":{\"3623\":1}}],[\"mongodb中的复制\",{\"0\":{\"3641\":1}}],[\"mongodb中的副本集\",{\"1\":{\"3639\":1}}],[\"mongodb中的记录是一个\",{\"1\":{\"3546\":1}}],[\"mongodb直接从索引返回结果\",{\"1\":{\"3636\":1}}],[\"mongodb提供了散列索引类型\",{\"1\":{\"3621\":1}}],[\"mongodb提供了两种特殊的索引\",{\"1\":{\"3621\":1}}],[\"mongodb提供高性能的数据持久性\",{\"1\":{\"3538\":1}}],[\"mongodb还支持多个字段的用户定义索引\",{\"1\":{\"3620\":1}}],[\"mongodb还可以使用索引中的排序返回排序结果\",{\"1\":{\"3617\":1}}],[\"mongodb索引使用b树数据结构\",{\"1\":{\"3617\":1}}],[\"mongodb必须执行全集合扫描\",{\"1\":{\"3617\":1}}],[\"mongodb将返回而不处理数组中的其余文档\",{\"1\":{\"3586\":1}}],[\"mongodb会默认创建以下三个数据库\",{\"1\":{\"3574\":1}}],[\"mongodb默认是被springboot管理的\",{\"1\":{\"3743\":1}}],[\"mongodb默认是没有用户认证的\",{\"1\":{\"3570\":1}}],[\"mongodb默认把所有的用户信息都储存在了内置的admin数据库\",{\"1\":{\"391\":1}}],[\"mongodb发送所有日志输出的目标指定为文件\",{\"1\":{\"3562\":1,\"3656\":1}}],[\"mongodb却是一个\",{\"1\":{\"3550\":1}}],[\"mongodb数据库\",{\"1\":{\"3550\":1}}],[\"mongodb和redis都是nosql\",{\"1\":{\"3549\":1}}],[\"mongodb的模糊查询是通过正则表达式的方式实现的\",{\"1\":{\"3613\":1}}],[\"mongodb的版本命名规范如\",{\"1\":{\"3554\":1}}],[\"mongodb的最小存储单位就是文档\",{\"1\":{\"3546\":1}}],[\"mongodb的复制工具称为副本集\",{\"1\":{\"3538\":1}}],[\"mongodb文档类似于json对象\",{\"1\":{\"3546\":1}}],[\"mongodb支持的数据结构非常松散\",{\"1\":{\"3546\":1}}],[\"mongodb自动将\",{\"1\":{\"3545\":1}}],[\"mongodb自动创建\",{\"1\":{\"403\":1}}],[\"mongodb通过嵌入式文档来替代多表连接\",{\"1\":{\"3545\":1}}],[\"mongodb不会对连接客户端进行用户验证\",{\"1\":{\"3692\":1}}],[\"mongodb不再提供mongodb\",{\"1\":{\"3567\":1}}],[\"mongodb不支持\",{\"1\":{\"3545\":1}}],[\"mongodb不是关系型数据库\",{\"1\":{\"399\":1}}],[\"mongodb术语\",{\"1\":{\"3545\":1}}],[\"mongodb可应对\",{\"1\":{\"3540\":1}}],[\"mongodb是一个开源\",{\"1\":{\"3535\":1}}],[\"mongodbbasetest\",{\"1\":{\"403\":1,\"404\":1,\"406\":1,\"407\":1,\"408\":1,\"409\":1,\"410\":1}}],[\"mongodb并不知道采用哪种认证机制\",{\"1\":{\"392\":1}}],[\"mongodb并不知道这个信息\",{\"1\":{\"391\":1}}],[\"mongodb并非很流行的技术\",{\"1\":{\"84\":1,\"85\":1}}],[\"mongodb服务器未连接\",{\"1\":{\"159\":1}}],[\"mongodb\",{\"0\":{\"84\":1,\"385\":1,\"3535\":1,\"3549\":1,\"3567\":1,\"3570\":1,\"3747\":1},\"1\":{\"10\":1,\"45\":1,\"387\":1,\"388\":3,\"389\":2,\"404\":1,\"406\":2,\"407\":2,\"3536\":1,\"3541\":6,\"3551\":1,\"3554\":1,\"3558\":1,\"3561\":2,\"3562\":4,\"3563\":2,\"3566\":1,\"3567\":2,\"3569\":2,\"3571\":1,\"3576\":1,\"3653\":3,\"3656\":4,\"3657\":4,\"3658\":4,\"3727\":3,\"3728\":1,\"3736\":1,\"3738\":1,\"3739\":1,\"3750\":1,\"3751\":2}}],[\"mongo还使用了特殊的数据类型\",{\"1\":{\"3547\":1}}],[\"mongotemplatel类的方法包含了所需的所有对mongodb数据库的操作\",{\"1\":{\"402\":1}}],[\"mongotemplate\",{\"0\":{\"393\":1},\"1\":{\"393\":2,\"403\":3,\"404\":3,\"406\":3,\"407\":3,\"408\":3,\"409\":3,\"410\":3}}],[\"mongood\",{\"1\":{\"392\":1}}],[\"mongocredential\",{\"1\":{\"390\":1}}],[\"monday\",{\"1\":{\"1616\":1}}],[\"mon\",{\"1\":{\"1433\":1}}],[\"money\",{\"1\":{\"1089\":1,\"1319\":2}}],[\"month\",{\"1\":{\"501\":1,\"718\":2,\"719\":2,\"720\":2,\"721\":3,\"722\":1}}],[\"monitorapplication\",{\"1\":{\"320\":2}}],[\"mm\",{\"1\":{\"147\":1,\"304\":2,\"308\":11,\"714\":1,\"718\":2,\"735\":4,\"736\":2,\"737\":2,\"756\":3,\"1433\":2,\"1854\":3,\"1855\":3,\"2570\":1,\"2573\":1}}],[\"md\",{\"1\":{\"98\":1}}],[\"majorityvotecount\",{\"1\":{\"3670\":1}}],[\"make\",{\"1\":{\"3355\":1}}],[\"master\",{\"0\":{\"3526\":1},\"1\":{\"3268\":3,\"3269\":1,\"3270\":1,\"3271\":1,\"3273\":1,\"3274\":1,\"3275\":1,\"3277\":1,\"3278\":1,\"3307\":1,\"3327\":1,\"3332\":2,\"3337\":2,\"3339\":2,\"3355\":3,\"3371\":1,\"3397\":1,\"3526\":6,\"3532\":4,\"3533\":3}}],[\"macos\",{\"0\":{\"3565\":1},\"1\":{\"3105\":1}}],[\"machine\",{\"1\":{\"1015\":1}}],[\"mame\",{\"1\":{\"1352\":1}}],[\"matchphrasequerybuilder\",{\"1\":{\"3252\":1,\"3253\":1}}],[\"matchphrasequery\",{\"0\":{\"3252\":1},\"1\":{\"3252\":1,\"3253\":1}}],[\"matchquery\",{\"1\":{\"3227\":1,\"3230\":1,\"3231\":2}}],[\"matchallquery\",{\"1\":{\"3226\":1,\"3228\":2,\"3233\":1,\"3234\":1,\"3242\":1,\"3244\":1}}],[\"match\",{\"1\":{\"3153\":1,\"3162\":1,\"3165\":1,\"3167\":1,\"3169\":1,\"3193\":1}}],[\"matchresult\",{\"1\":{\"1003\":1}}],[\"matcher会初始化很多匹配的状态信息\",{\"1\":{\"1005\":1}}],[\"matcher对象是一个状态机器\",{\"1\":{\"1005\":1}}],[\"matcher的状态\",{\"0\":{\"1005\":1}}],[\"matcher\",{\"0\":{\"998\":1,\"1002\":1},\"1\":{\"984\":4,\"986\":2,\"987\":2,\"993\":1,\"998\":7,\"1003\":1,\"1004\":1}}],[\"matcher类提供了对正则表达式的分组支持\",{\"1\":{\"998\":1}}],[\"matcher类的构造方法是私有的\",{\"1\":{\"1004\":1}}],[\"matcher类的构造方法也是私有的\",{\"1\":{\"998\":1}}],[\"matcher类的功能更加丰富\",{\"1\":{\"987\":1}}],[\"matcher类\",{\"1\":{\"984\":1}}],[\"matches​\",{\"1\":{\"1000\":1}}],[\"matches\",{\"0\":{\"681\":1,\"991\":1,\"1000\":1},\"1\":{\"681\":2,\"987\":1,\"991\":2,\"998\":1,\"1000\":1}}],[\"math包的biginteger\",{\"1\":{\"777\":1}}],[\"math\",{\"0\":{\"759\":1},\"1\":{\"472\":1,\"746\":1,\"759\":3,\"760\":1,\"761\":4,\"762\":1,\"763\":1,\"764\":3,\"765\":1,\"766\":2,\"767\":2,\"768\":2,\"769\":4,\"777\":1,\"778\":1,\"1204\":1,\"1266\":1,\"1336\":1,\"1338\":1,\"1485\":1,\"2451\":1,\"2989\":1}}],[\"male\",{\"1\":{\"403\":1,\"3029\":1,\"3214\":1,\"3220\":3,\"3226\":3,\"3227\":1,\"3231\":1,\"3237\":2,\"3240\":3,\"3242\":2,\"3245\":4,\"3253\":1}}],[\"manager\",{\"1\":{\"1491\":1}}],[\"management\",{\"1\":{\"326\":1,\"343\":1,\"345\":1}}],[\"man\",{\"1\":{\"677\":1,\"678\":2,\"679\":2,\"680\":2,\"1418\":2,\"1616\":1,\"2001\":1}}],[\"manifeast\",{\"0\":{\"246\":1}}],[\"manifest\",{\"1\":{\"244\":1,\"245\":1,\"246\":2,\"2981\":1,\"2991\":1,\"2992\":1}}],[\"magenta\",{\"1\":{\"308\":2}}],[\"markup\",{\"1\":{\"3015\":1}}],[\"mark\",{\"1\":{\"225\":1}}],[\"maxage\",{\"1\":{\"3249\":2}}],[\"maxactive\",{\"1\":{\"2674\":1}}],[\"maxactive=20\",{\"1\":{\"2673\":1}}],[\"maxoccurs=\",{\"1\":{\"3029\":1}}],[\"maxopenpreparedstatements\",{\"1\":{\"2674\":1}}],[\"maxwait\",{\"1\":{\"2674\":1}}],[\"maxwait=1000\",{\"1\":{\"2673\":1}}],[\"maxinclusive\",{\"1\":{\"3029\":1}}],[\"maxidle\",{\"1\":{\"2674\":1}}],[\"maximum\",{\"1\":{\"1928\":1}}],[\"maximumpoolsize\",{\"1\":{\"1813\":1}}],[\"maxbirth\",{\"1\":{\"2657\":2}}],[\"maxstr\",{\"1\":{\"1162\":1}}],[\"max2\",{\"1\":{\"768\":2}}],[\"max1\",{\"1\":{\"768\":2}}],[\"maxelementsinmemory=\",{\"1\":{\"478\":2}}],[\"maxelementsinmemory\",{\"1\":{\"478\":1}}],[\"maxhistory>\",{\"1\":{\"308\":3}}],[\"maxfilesize>\",{\"1\":{\"308\":3}}],[\"max\",{\"0\":{\"768\":1,\"934\":1,\"2483\":1,\"3482\":1},\"1\":{\"220\":1,\"304\":1,\"384\":2,\"768\":3,\"934\":5,\"1161\":2,\"1507\":1,\"1735\":1,\"2483\":4,\"2610\":1,\"2656\":1,\"2691\":1,\"3142\":1,\"3160\":1,\"3164\":1,\"3187\":2,\"3188\":3,\"3191\":2,\"3247\":2,\"3248\":2,\"3249\":3,\"3267\":1,\"3278\":1,\"3279\":1,\"3280\":1,\"3313\":6,\"3346\":6,\"3348\":1,\"3378\":1,\"3380\":1,\"3480\":1,\"3481\":2,\"3482\":1,\"3485\":1,\"3489\":1,\"3503\":1}}],[\"mainfest\",{\"1\":{\"2991\":1}}],[\"main方法就是java程序的主线程\",{\"1\":{\"1713\":1}}],[\"main方法再执行时\",{\"1\":{\"259\":1}}],[\"main线程\",{\"1\":{\"1713\":1}}],[\"main的特点\",{\"1\":{\"1541\":1}}],[\"main的args参数\",{\"0\":{\"259\":1}}],[\"maina\",{\"1\":{\"1267\":1}}],[\"main同级\",{\"1\":{\"225\":1}}],[\"mainclass>\",{\"1\":{\"170\":1}}],[\"main\",{\"0\":{\"1045\":1,\"1541\":1},\"1\":{\"127\":1,\"128\":1,\"164\":1,\"197\":1,\"246\":1,\"259\":3,\"320\":1,\"493\":1,\"498\":1,\"520\":1,\"521\":1,\"555\":1,\"589\":2,\"1038\":1,\"1184\":1,\"1186\":1,\"1204\":1,\"1259\":1,\"1280\":1,\"1282\":1,\"1292\":1,\"1302\":1,\"1304\":1,\"1353\":1,\"1401\":1,\"1408\":1,\"1466\":1,\"1467\":1,\"1497\":1,\"1541\":3,\"1560\":2,\"1600\":1,\"1609\":1,\"1680\":1,\"1689\":1,\"1720\":1,\"1721\":1,\"1722\":1,\"1728\":2,\"1729\":1,\"1737\":1,\"1740\":1,\"1757\":1,\"1760\":1,\"1768\":1,\"1784\":1,\"1795\":1,\"1804\":1,\"1810\":1,\"1817\":1,\"1968\":1,\"2330\":1,\"2758\":1,\"2991\":2,\"3206\":1,\"3209\":1,\"3210\":1,\"3211\":1,\"3212\":1,\"3214\":1,\"3217\":1,\"3218\":1,\"3220\":1,\"3221\":1,\"3225\":1,\"3226\":1,\"3227\":1,\"3231\":1,\"3234\":1,\"3237\":1,\"3240\":1,\"3242\":1,\"3244\":1,\"3249\":1,\"3253\":1}}],[\"maplisthandler\",{\"1\":{\"2684\":1}}],[\"maphandler\",{\"1\":{\"2684\":1}}],[\"map的使用\",{\"0\":{\"2470\":1}}],[\"map和flatmap的对比示例\",{\"0\":{\"2468\":1}}],[\"maptolong\",{\"0\":{\"2466\":1},\"1\":{\"2454\":1,\"2466\":1}}],[\"maptoint\",{\"0\":{\"2465\":1},\"1\":{\"2454\":1,\"2465\":1}}],[\"maptodouble\",{\"0\":{\"2464\":1},\"1\":{\"2454\":1,\"2464\":1}}],[\"map相关的方法比较少\",{\"1\":{\"1942\":1}}],[\"map中的entry\",{\"1\":{\"1918\":1}}],[\"map常用方法\",{\"0\":{\"1917\":1}}],[\"map与collection并列存在\",{\"1\":{\"1909\":1}}],[\"map集合是k\",{\"1\":{\"1958\":1}}],[\"map集合\",{\"0\":{\"1958\":1}}],[\"map集合的元素\",{\"1\":{\"1836\":1}}],[\"map集合内的数据是键值对\",{\"1\":{\"956\":1}}],[\"map接口的继承结构\",{\"0\":{\"1910\":1}}],[\"map接口的常用实现类\",{\"1\":{\"1909\":1}}],[\"map接口继承图\",{\"0\":{\"1828\":1}}],[\"map接口是没有iterator的\",{\"1\":{\"958\":1}}],[\"map<string\",{\"1\":{\"960\":1,\"2869\":1,\"2872\":1}}],[\"map<\",{\"1\":{\"960\":1}}],[\"map<k\",{\"1\":{\"939\":2,\"954\":1}}],[\"map有五个实现类\",{\"1\":{\"955\":1}}],[\"mapping>\",{\"1\":{\"2933\":2}}],[\"mapping\",{\"0\":{\"2594\":1,\"3364\":1},\"1\":{\"3195\":1,\"3197\":1,\"3364\":1}}],[\"mappings查询结果\",{\"1\":{\"3211\":2}}],[\"mappings\",{\"1\":{\"342\":1,\"423\":1,\"3124\":1,\"3199\":1,\"3283\":1,\"3381\":1}}],[\"mapper\",{\"0\":{\"374\":1,\"622\":1},\"1\":{\"365\":1,\"374\":1,\"589\":1,\"622\":1,\"2467\":1,\"3008\":1,\"3214\":2}}],[\"mapper注解是为了被ioc容器识别\",{\"1\":{\"365\":1}}],[\"mapper接口\",{\"0\":{\"365\":1}}],[\"map\",{\"0\":{\"940\":1,\"953\":1,\"1907\":1,\"1908\":1,\"2463\":1,\"2489\":1},\"1\":{\"58\":1,\"347\":1,\"929\":1,\"971\":2,\"1826\":2,\"1878\":1,\"1909\":4,\"1910\":1,\"1917\":1,\"1921\":1,\"1922\":1,\"1931\":5,\"1935\":8,\"1936\":1,\"1942\":1,\"1958\":7,\"2454\":1,\"2463\":3,\"2470\":1,\"2471\":1,\"2483\":1,\"2489\":3,\"2490\":1,\"2872\":3,\"3313\":5,\"3346\":5}}],[\"maven导入fastjson包\",{\"1\":{\"3085\":1}}],[\"maven是包管理器\",{\"1\":{\"2999\":1}}],[\"maven的版本要与springcloud与springboot兼容\",{\"1\":{\"574\":1}}],[\"maven的包信息\",{\"1\":{\"95\":1}}],[\"maven配置\",{\"0\":{\"574\":1}}],[\"maven设置多环境\",{\"0\":{\"281\":1}}],[\"maven插件\",{\"0\":{\"239\":1}}],[\"maven编译插件将当前模块作为启动模块编译\",{\"1\":{\"171\":1}}],[\"maven已经下载好了所需的依赖\",{\"1\":{\"106\":1}}],[\"maven\",{\"0\":{\"115\":1,\"244\":1,\"245\":1,\"2736\":1,\"2740\":1,\"2999\":1,\"3743\":1,\"3748\":1},\"1\":{\"10\":1,\"11\":1,\"53\":1,\"94\":1,\"100\":2,\"162\":1,\"169\":2,\"170\":1,\"171\":1,\"193\":1,\"239\":1,\"240\":1,\"241\":3,\"246\":3,\"574\":1,\"612\":1,\"2737\":2,\"2740\":1}}],[\"my\",{\"1\":{\"3269\":1,\"3270\":1,\"3271\":1,\"3278\":1,\"3279\":1,\"3280\":1,\"3355\":1,\"3378\":1,\"3380\":1}}],[\"mystate\",{\"1\":{\"3670\":1,\"3671\":1}}],[\"myservlet\",{\"1\":{\"2814\":1}}],[\"mysql是b+tree\",{\"1\":{\"3617\":1}}],[\"mysql对比\",{\"0\":{\"3102\":1}}],[\"mysql事务\",{\"1\":{\"2626\":1}}],[\"mysql服务器默认是关闭批处理的\",{\"1\":{\"2623\":1}}],[\"mysql服务端端口号\",{\"1\":{\"2542\":1}}],[\"mysqld\",{\"1\":{\"2610\":1}}],[\"mysql配置文件中\",{\"1\":{\"2610\":1}}],[\"mysql的驱动要>=5\",{\"1\":{\"2623\":1}}],[\"mysql的四种blob类型\",{\"1\":{\"2608\":1}}],[\"mysql的jdbc驱动包\",{\"1\":{\"2537\":1}}],[\"mysql的jdbc驱动源码\",{\"1\":{\"2537\":1}}],[\"mysql中\",{\"1\":{\"2608\":1}}],[\"mysql默认端口是3306\",{\"1\":{\"2542\":1}}],[\"mysql占用端口3306\",{\"1\":{\"2186\":1}}],[\"mysqlconnect\",{\"1\":{\"1401\":1}}],[\"mysql版本在8\",{\"1\":{\"369\":1}}],[\"mysql驱动问题\",{\"0\":{\"369\":1}}],[\"mysql\",{\"0\":{\"86\":1,\"354\":1,\"597\":1,\"2608\":1},\"1\":{\"10\":1,\"11\":1,\"45\":1,\"154\":2,\"203\":1,\"356\":2,\"358\":1,\"361\":1,\"362\":2,\"368\":1,\"369\":2,\"372\":2,\"543\":1,\"612\":3,\"616\":1,\"617\":2,\"1401\":1,\"2537\":1,\"2542\":2,\"2545\":4,\"2546\":1,\"2547\":2,\"2548\":2,\"2550\":2,\"2673\":2,\"2674\":2,\"3102\":1,\"3138\":1,\"3535\":1,\"3712\":1}}],[\"myinterface\",{\"1\":{\"2388\":1}}],[\"myinvocationhandle已经在创建代理类是获取了被代理类的对象名\",{\"1\":{\"2345\":1}}],[\"myinvocationhandler是他的参数之一\",{\"1\":{\"2345\":1}}],[\"myinvocationhandler\",{\"1\":{\"2342\":2,\"2343\":1}}],[\"myimportselector\",{\"1\":{\"523\":1,\"524\":1,\"525\":1,\"536\":1}}],[\"mythread\",{\"1\":{\"1720\":5,\"1763\":1}}],[\"myannotation的值\",{\"1\":{\"1680\":1}}],[\"myannotation的target和retention等元注解与myannotations相同\",{\"1\":{\"1668\":1}}],[\"myannotations\",{\"1\":{\"1667\":2,\"1668\":1}}],[\"myannotation\",{\"1\":{\"1641\":1,\"1648\":2,\"1657\":1,\"1660\":1,\"1663\":1,\"1664\":1,\"1666\":2,\"1667\":3,\"1670\":1,\"1671\":2,\"1680\":12,\"2296\":1}}],[\"myexception\",{\"1\":{\"1612\":3}}],[\"mymethod\",{\"1\":{\"1518\":1}}],[\"mycomparable\",{\"1\":{\"1458\":1}}],[\"mycomparator\",{\"1\":{\"893\":3}}],[\"mypostprocessor\",{\"1\":{\"530\":1}}],[\"myrs\",{\"1\":{\"3656\":1,\"3664\":1,\"3667\":1,\"3668\":1,\"3670\":1,\"3671\":1,\"3673\":1,\"3682\":1,\"3724\":2}}],[\"myrunnable类的实例\",{\"1\":{\"1741\":1}}],[\"myrunnable类没有继承\",{\"1\":{\"1741\":1}}],[\"myrunnable\",{\"1\":{\"1740\":4,\"1757\":3,\"1760\":3,\"1768\":3}}],[\"myregistrar\",{\"1\":{\"527\":1,\"528\":2}}],[\"myroot\",{\"1\":{\"388\":1,\"3708\":1,\"3709\":1,\"3712\":3}}],[\"mybean\",{\"1\":{\"499\":1}}],[\"mybatista\",{\"1\":{\"3013\":1}}],[\"mybatis等只是更好的封装了jdbc\",{\"1\":{\"2526\":1}}],[\"mybatis<\",{\"1\":{\"599\":1}}],[\"mybatis依赖\",{\"1\":{\"599\":1}}],[\"mybatis或mybatisplus\",{\"1\":{\"359\":1}}],[\"mybatisplus也对这些方法进行了封装\",{\"1\":{\"637\":1}}],[\"mybatisplus将复杂的条件查询sql都封装好了\",{\"1\":{\"629\":1}}],[\"mybatisplus的ipage接口封装了所有与分页相关的信息和操作\",{\"1\":{\"627\":1}}],[\"mybatisplusinterceptor\",{\"1\":{\"626\":5}}],[\"mybatisplus内部有分页操作相关的api\",{\"1\":{\"625\":1}}],[\"mybatisplus是采用雪花算法生成uuid作为id的\",{\"1\":{\"624\":1}}],[\"mybatisplus依赖\",{\"1\":{\"600\":1}}],[\"mybatisplus\",{\"0\":{\"637\":1},\"1\":{\"10\":1,\"621\":1,\"622\":1}}],[\"mybatis\",{\"0\":{\"359\":1,\"599\":1,\"600\":1},\"1\":{\"10\":1,\"11\":1,\"45\":1,\"53\":1,\"361\":2,\"589\":1,\"600\":1,\"612\":3,\"616\":1,\"617\":2,\"624\":1,\"2526\":1,\"3009\":1}}],[\"sneakythrows\",{\"1\":{\"3206\":1,\"3209\":1,\"3211\":1,\"3212\":1,\"3214\":1,\"3217\":1,\"3218\":1,\"3220\":1,\"3221\":1,\"3225\":1,\"3226\":1,\"3227\":1,\"3231\":1,\"3234\":1,\"3237\":1,\"3240\":1,\"3242\":1,\"3244\":1,\"3249\":1,\"3253\":1}}],[\"snapshot\",{\"1\":{\"246\":2,\"2759\":1,\"3108\":1}}],[\"s001\",{\"1\":{\"3027\":1}}],[\"srae\",{\"1\":{\"2967\":3}}],[\"sre\",{\"1\":{\"2964\":2}}],[\"src目录下的资源访问\",{\"1\":{\"2942\":1}}],[\"src目录\",{\"1\":{\"2941\":1}}],[\"srcpath\",{\"1\":{\"2071\":2,\"2086\":2}}],[\"srcfile\",{\"1\":{\"2065\":2,\"2069\":2,\"2071\":2,\"2084\":2}}],[\"src\",{\"1\":{\"578\":1,\"589\":2,\"937\":1,\"2069\":2,\"2168\":3,\"2282\":1,\"2537\":1,\"2574\":1,\"2673\":1,\"2720\":1,\"2758\":1}}],[\"src=>main=>resources内的\",{\"1\":{\"136\":1}}],[\"s架构的web项目\",{\"1\":{\"2809\":1}}],[\"sdf\",{\"1\":{\"2570\":2,\"2573\":2}}],[\"sdktest\",{\"1\":{\"578\":1}}],[\"sdk\",{\"1\":{\"119\":2,\"611\":2,\"2731\":1}}],[\"sdk的版本要与java处的sdk版本一致\",{\"1\":{\"95\":1}}],[\"smart\",{\"0\":{\"3483\":1},\"1\":{\"3481\":1}}],[\"smallint\",{\"1\":{\"2562\":1}}],[\"sms\",{\"1\":{\"473\":1,\"474\":2,\"483\":1}}],[\"smscodecontroller\",{\"1\":{\"473\":1}}],[\"smscodeserviceimpl\",{\"1\":{\"471\":1}}],[\"smscodeservice\",{\"1\":{\"471\":2,\"473\":4}}],[\"smscode\",{\"1\":{\"470\":1,\"471\":8,\"472\":1,\"473\":3,\"478\":1}}],[\"skip方法同样接受一个数字参数作为跳过的记录条数\",{\"1\":{\"3610\":1}}],[\"skipped\",{\"1\":{\"3142\":1,\"3160\":1,\"3164\":1,\"3191\":1,\"3249\":1}}],[\"skip\",{\"0\":{\"2461\":1},\"1\":{\"2454\":1,\"2461\":2,\"3610\":3,\"3611\":2}}],[\"skip>\",{\"1\":{\"171\":1}}],[\"sz\",{\"1\":{\"2078\":3,\"2079\":4}}],[\"s+\",{\"1\":{\"1630\":1}}],[\"s的方式\",{\"1\":{\"1381\":1}}],[\"switched\",{\"1\":{\"3682\":1}}],[\"switch中表达式的取值情况不太多\",{\"1\":{\"1177\":1}}],[\"switch结构中的表达式\",{\"1\":{\"1175\":1}}],[\"switch\",{\"0\":{\"1173\":1},\"1\":{\"1165\":1,\"1174\":1,\"1176\":1,\"1177\":1,\"1193\":1,\"1678\":1,\"2252\":1}}],[\"swapping\",{\"1\":{\"3355\":1}}],[\"swap\",{\"0\":{\"933\":1},\"1\":{\"933\":2,\"1292\":2,\"1293\":1}}],[\"swagger3\",{\"1\":{\"612\":1}}],[\"swagger\",{\"0\":{\"70\":1,\"607\":1},\"1\":{\"10\":1,\"53\":1,\"612\":2}}],[\"sqrt\",{\"1\":{\"769\":5,\"1204\":1}}],[\"sql术语\",{\"1\":{\"3545\":1}}],[\"sql2\",{\"1\":{\"2635\":2}}],[\"sql1\",{\"1\":{\"2635\":2}}],[\"sql语句中给列起别名\",{\"1\":{\"2602\":1}}],[\"sql语句是debug下才会打印\",{\"1\":{\"308\":1}}],[\"sql中占位符的个数与可变形参的长度应该相同\",{\"1\":{\"2580\":1}}],[\"sql中也是\",{\"1\":{\"2453\":1}}],[\"sql的占位符数量和类型都是不确定的\",{\"1\":{\"2580\":1}}],[\"sql的预编译语句\",{\"1\":{\"2580\":1}}],[\"sql类型\",{\"1\":{\"2562\":1}}],[\"sql也是\",{\"1\":{\"2453\":1}}],[\"sql相关\",{\"1\":{\"612\":1}}],[\"sqlexception异常\",{\"1\":{\"2570\":1,\"2571\":1}}],[\"sqlexception\",{\"1\":{\"358\":1,\"2545\":1,\"2573\":2,\"2576\":2,\"2635\":2,\"2653\":1,\"2675\":1,\"2682\":4,\"2683\":5,\"2690\":1}}],[\"sql\",{\"0\":{\"6\":1,\"596\":1,\"3766\":1},\"1\":{\"10\":1,\"358\":1,\"707\":1,\"1338\":1,\"1401\":1,\"2436\":1,\"2527\":2,\"2545\":1,\"2555\":1,\"2556\":4,\"2558\":2,\"2559\":3,\"2562\":3,\"2564\":1,\"2565\":1,\"2567\":5,\"2569\":5,\"2570\":3,\"2573\":2,\"2577\":2,\"2581\":2,\"2582\":4,\"2597\":2,\"2600\":2,\"2601\":4,\"2603\":2,\"2604\":2,\"2612\":2,\"2613\":2,\"2620\":2,\"2621\":2,\"2624\":3,\"2625\":3,\"2634\":2,\"2639\":2,\"2653\":8,\"2656\":14,\"2668\":1,\"2672\":1,\"2682\":1,\"2683\":6,\"2684\":2,\"2686\":2,\"2687\":2,\"2688\":2,\"2689\":2,\"2690\":2,\"2691\":4,\"3097\":1}}],[\"sysctl\",{\"1\":{\"3313\":1,\"3346\":1}}],[\"sys\",{\"1\":{\"3313\":2,\"3346\":2}}],[\"systemlog\",{\"1\":{\"3562\":1,\"3656\":1}}],[\"system类\",{\"1\":{\"1349\":1}}],[\"system类代表系统\",{\"1\":{\"880\":1}}],[\"system和thread\",{\"1\":{\"1338\":1}}],[\"system\",{\"0\":{\"880\":1,\"2116\":1},\"1\":{\"109\":1,\"128\":1,\"152\":3,\"156\":1,\"197\":1,\"288\":1,\"290\":1,\"309\":1,\"347\":1,\"366\":1,\"375\":2,\"380\":1,\"404\":1,\"406\":1,\"407\":1,\"408\":1,\"409\":1,\"410\":1,\"422\":2,\"423\":1,\"424\":1,\"425\":2,\"428\":1,\"429\":1,\"430\":1,\"431\":1,\"432\":3,\"447\":2,\"452\":2,\"455\":1,\"493\":1,\"499\":1,\"521\":1,\"525\":1,\"550\":1,\"554\":1,\"623\":1,\"628\":5,\"651\":1,\"652\":2,\"653\":2,\"655\":1,\"656\":2,\"657\":2,\"659\":1,\"660\":1,\"661\":1,\"662\":2,\"663\":1,\"665\":2,\"666\":2,\"667\":1,\"668\":1,\"669\":2,\"671\":1,\"672\":1,\"673\":2,\"674\":4,\"677\":1,\"678\":1,\"679\":1,\"680\":1,\"681\":1,\"682\":1,\"699\":3,\"700\":2,\"701\":1,\"702\":1,\"703\":1,\"704\":1,\"707\":1,\"717\":3,\"719\":8,\"720\":8,\"721\":8,\"724\":1,\"725\":2,\"726\":1,\"727\":1,\"732\":1,\"733\":1,\"734\":2,\"736\":1,\"750\":1,\"751\":1,\"756\":2,\"757\":1,\"760\":1,\"761\":2,\"762\":1,\"763\":1,\"764\":2,\"765\":1,\"766\":2,\"767\":2,\"768\":2,\"769\":4,\"772\":1,\"773\":1,\"774\":2,\"776\":2,\"778\":2,\"779\":1,\"780\":1,\"781\":1,\"782\":1,\"783\":1,\"785\":1,\"788\":1,\"789\":1,\"790\":1,\"791\":1,\"792\":1,\"793\":1,\"794\":1,\"795\":1,\"797\":1,\"798\":1,\"799\":1,\"800\":1,\"801\":1,\"803\":3,\"804\":3,\"805\":3,\"807\":3,\"810\":3,\"813\":3,\"814\":3,\"829\":1,\"834\":1,\"835\":1,\"836\":1,\"837\":1,\"838\":1,\"840\":1,\"841\":1,\"842\":1,\"843\":1,\"844\":1,\"845\":1,\"846\":1,\"848\":1,\"849\":1,\"852\":1,\"853\":1,\"854\":1,\"855\":1,\"856\":1,\"857\":1,\"858\":1,\"859\":1,\"861\":1,\"862\":1,\"863\":1,\"864\":1,\"865\":1,\"868\":1,\"869\":1,\"870\":1,\"871\":1,\"872\":2,\"873\":1,\"874\":1,\"880\":2,\"881\":2,\"884\":14,\"886\":1,\"887\":3,\"888\":3,\"890\":2,\"892\":1,\"893\":1,\"894\":2,\"895\":4,\"896\":1,\"897\":1,\"898\":1,\"899\":1,\"905\":1,\"906\":2,\"907\":1,\"908\":1,\"909\":1,\"910\":3,\"911\":1,\"912\":2,\"913\":1,\"914\":2,\"917\":1,\"919\":1,\"924\":1,\"925\":1,\"926\":1,\"930\":2,\"931\":3,\"932\":3,\"933\":2,\"934\":1,\"935\":1,\"936\":1,\"937\":2,\"938\":1,\"944\":1,\"945\":2,\"946\":3,\"947\":2,\"948\":1,\"949\":1,\"950\":3,\"951\":2,\"952\":2,\"959\":2,\"960\":1,\"961\":3,\"962\":1,\"963\":2,\"964\":2,\"965\":2,\"966\":1,\"967\":2,\"968\":1,\"969\":1,\"970\":2,\"971\":3,\"989\":2,\"990\":2,\"991\":1,\"992\":1,\"998\":1,\"999\":1,\"1000\":1,\"1001\":1,\"1007\":1,\"1008\":3,\"1009\":3,\"1038\":1,\"1047\":2,\"1059\":2,\"1125\":2,\"1133\":3,\"1134\":3,\"1141\":2,\"1176\":2,\"1184\":2,\"1186\":3,\"1189\":1,\"1198\":1,\"1202\":2,\"1203\":2,\"1204\":5,\"1221\":1,\"1222\":1,\"1240\":2,\"1245\":2,\"1246\":2,\"1258\":2,\"1259\":1,\"1262\":1,\"1267\":2,\"1280\":1,\"1282\":1,\"1292\":1,\"1296\":1,\"1368\":3,\"1376\":3,\"1380\":1,\"1381\":2,\"1382\":1,\"1408\":4,\"1413\":2,\"1426\":5,\"1427\":2,\"1433\":2,\"1440\":1,\"1442\":2,\"1457\":3,\"1466\":1,\"1467\":1,\"1475\":2,\"1488\":1,\"1497\":1,\"1499\":3,\"1500\":3,\"1512\":7,\"1515\":3,\"1526\":2,\"1555\":2,\"1556\":2,\"1575\":2,\"1577\":1,\"1578\":1,\"1581\":2,\"1582\":1,\"1583\":1,\"1587\":7,\"1591\":2,\"1592\":1,\"1600\":2,\"1609\":2,\"1622\":3,\"1630\":4,\"1680\":5,\"1720\":2,\"1728\":1,\"1729\":3,\"1737\":4,\"1740\":1,\"1757\":1,\"1760\":1,\"1768\":1,\"1784\":1,\"1795\":4,\"1804\":1,\"1810\":2,\"1817\":1,\"1831\":1,\"1843\":4,\"1844\":1,\"1845\":1,\"1851\":1,\"1852\":1,\"1854\":1,\"1855\":1,\"1902\":2,\"1905\":1,\"1931\":1,\"1935\":1,\"1940\":2,\"1955\":1,\"1957\":2,\"1958\":1,\"1993\":1,\"1995\":1,\"1996\":1,\"2015\":4,\"2016\":1,\"2052\":1,\"2053\":1,\"2055\":1,\"2056\":1,\"2082\":1,\"2086\":3,\"2099\":1,\"2101\":1,\"2115\":2,\"2116\":2,\"2118\":5,\"2120\":1,\"2121\":3,\"2127\":3,\"2152\":1,\"2157\":2,\"2192\":1,\"2193\":2,\"2194\":1,\"2195\":1,\"2196\":1,\"2225\":1,\"2232\":1,\"2252\":1,\"2255\":2,\"2256\":1,\"2257\":2,\"2258\":2,\"2264\":3,\"2266\":1,\"2267\":1,\"2268\":1,\"2269\":1,\"2280\":4,\"2282\":1,\"2285\":2,\"2289\":1,\"2291\":1,\"2293\":4,\"2295\":2,\"2296\":12,\"2298\":3,\"2299\":1,\"2300\":1,\"2301\":1,\"2302\":3,\"2303\":1,\"2304\":1,\"2306\":1,\"2311\":2,\"2315\":1,\"2328\":2,\"2329\":1,\"2344\":1,\"2349\":2,\"2369\":2,\"2371\":3,\"2373\":1,\"2375\":1,\"2377\":6,\"2404\":1,\"2450\":1,\"2451\":1,\"2458\":1,\"2459\":1,\"2460\":1,\"2461\":1,\"2463\":2,\"2470\":1,\"2474\":1,\"2475\":1,\"2477\":1,\"2478\":1,\"2479\":1,\"2480\":1,\"2481\":1,\"2482\":1,\"2483\":1,\"2484\":1,\"2485\":1,\"2487\":1,\"2488\":1,\"2489\":1,\"2500\":1,\"2502\":2,\"2504\":1,\"2505\":1,\"2507\":2,\"2508\":1,\"2545\":1,\"2547\":1,\"2548\":1,\"2551\":1,\"2597\":1,\"2601\":2,\"2604\":1,\"2613\":1,\"2621\":2,\"2624\":2,\"2635\":1,\"2639\":2,\"2657\":8,\"2674\":1,\"2676\":1,\"2686\":1,\"2687\":1,\"2688\":1,\"2689\":1,\"2690\":2,\"2691\":2,\"2779\":1,\"2800\":1,\"2801\":1,\"2802\":1,\"2804\":1,\"2812\":2,\"2846\":8,\"2849\":2,\"2850\":1,\"2858\":1,\"2872\":6,\"2903\":3,\"2909\":1,\"2910\":1,\"2973\":2,\"2989\":1,\"3026\":1,\"3027\":1,\"3047\":1,\"3054\":1,\"3209\":1,\"3211\":3,\"3212\":1,\"3214\":1,\"3217\":1,\"3218\":1,\"3220\":2,\"3221\":2,\"3225\":1,\"3226\":1,\"3227\":1,\"3231\":1,\"3234\":1,\"3237\":1,\"3240\":1,\"3242\":1,\"3244\":1,\"3249\":1,\"3253\":1,\"3267\":1,\"3355\":2,\"3488\":1,\"3503\":1,\"3581\":1,\"3666\":1,\"3703\":1,\"3711\":1,\"3712\":3}}],[\"sync<\",{\"1\":{\"3743\":1}}],[\"syncsourceid\",{\"1\":{\"3670\":2,\"3673\":1,\"3674\":1}}],[\"syncsourcehost\",{\"1\":{\"3670\":2,\"3673\":1,\"3674\":1}}],[\"synchronize即不能包的代码多了\",{\"1\":{\"1762\":1}}],[\"synchronized有代码块锁和方法锁\",{\"1\":{\"1785\":1}}],[\"synchronized是隐式锁\",{\"1\":{\"1785\":1}}],[\"synchronized与lock的对比\",{\"0\":{\"1785\":1}}],[\"synchronizedsortedset\",{\"1\":{\"939\":1}}],[\"synchronizedsortedmap\",{\"1\":{\"939\":1}}],[\"synchronizedset\",{\"1\":{\"939\":1}}],[\"synchronizednavigableset\",{\"1\":{\"939\":1}}],[\"synchronizednavigablemap\",{\"1\":{\"939\":1}}],[\"synchronizedmap\",{\"1\":{\"939\":1}}],[\"synchronizedcollection\",{\"1\":{\"939\":1}}],[\"synchronizedlist\",{\"1\":{\"939\":2}}],[\"synchronizedxxx\",{\"0\":{\"939\":1},\"1\":{\"929\":1}}],[\"synchronized\",{\"1\":{\"697\":2,\"1317\":1,\"1759\":1,\"1760\":1,\"1765\":2,\"1768\":1,\"1769\":2,\"1780\":1,\"1795\":4,\"1804\":1}}],[\"synclist\",{\"1\":{\"939\":1}}],[\"sb\",{\"1\":{\"702\":4,\"703\":3,\"704\":3}}],[\"sb3\",{\"1\":{\"689\":1,\"699\":2}}],[\"sb2\",{\"1\":{\"689\":1,\"699\":2,\"700\":2}}],[\"sb1\",{\"1\":{\"689\":1,\"693\":3,\"699\":2,\"700\":3,\"701\":3}}],[\"s7\",{\"1\":{\"667\":2}}],[\"s4\",{\"1\":{\"652\":2,\"660\":2,\"682\":2,\"992\":2,\"1125\":1}}],[\"s3==s4\",{\"1\":{\"1125\":1}}],[\"s3\",{\"1\":{\"652\":2,\"659\":2,\"660\":2,\"682\":2,\"992\":2,\"1124\":1,\"1125\":1}}],[\"s2是产生了多态\",{\"1\":{\"1376\":1}}],[\"s2\",{\"1\":{\"652\":2,\"653\":3,\"655\":2,\"668\":2,\"674\":2,\"681\":2,\"756\":2,\"947\":2,\"1125\":1,\"1376\":2,\"1795\":9,\"2412\":2,\"2489\":2}}],[\"s1++\",{\"1\":{\"1141\":1}}],[\"s1是sort类型的\",{\"1\":{\"1141\":1}}],[\"s1==s2\",{\"1\":{\"1125\":1}}],[\"s1\",{\"1\":{\"649\":2,\"651\":2,\"652\":2,\"653\":3,\"656\":3,\"657\":3,\"661\":2,\"662\":3,\"663\":2,\"665\":3,\"666\":3,\"668\":2,\"669\":3,\"671\":2,\"672\":2,\"674\":5,\"677\":2,\"678\":2,\"679\":2,\"680\":2,\"756\":2,\"947\":2,\"950\":2,\"951\":2,\"989\":3,\"990\":3,\"991\":2,\"998\":2,\"1000\":2,\"1001\":1,\"1124\":1,\"1125\":1,\"1141\":3,\"1145\":2,\"1376\":2,\"1411\":3,\"1413\":3,\"1414\":1,\"1415\":1,\"1416\":2,\"1795\":9,\"2412\":1,\"2489\":2}}],[\"soundcloud\",{\"1\":{\"3094\":1}}],[\"sourcebuilder\",{\"1\":{\"3226\":3}}],[\"source\",{\"1\":{\"432\":5,\"886\":1,\"1007\":1,\"1654\":2,\"1659\":1,\"1675\":1,\"2539\":1,\"2672\":2,\"2675\":3,\"2700\":1,\"2759\":1,\"3141\":1,\"3142\":2,\"3159\":1,\"3160\":2,\"3164\":2,\"3197\":3,\"3214\":1,\"3220\":3,\"3226\":1,\"3227\":3,\"3228\":1,\"3231\":2,\"3234\":1,\"3236\":1,\"3237\":1,\"3239\":1,\"3240\":1,\"3242\":1,\"3244\":1,\"3248\":1,\"3249\":1,\"3252\":1,\"3253\":2,\"3413\":1}}],[\"sources\",{\"1\":{\"225\":1}}],[\"solr\",{\"1\":{\"3092\":1}}],[\"sos\",{\"1\":{\"2896\":2}}],[\"socket是客户端和服务器之间的一个连接\",{\"1\":{\"2244\":1}}],[\"socket的构造器\",{\"0\":{\"2219\":1}}],[\"socket类常用方法\",{\"0\":{\"2214\":1}}],[\"socket类常用构造器\",{\"0\":{\"2211\":1}}],[\"socket分类\",{\"0\":{\"2210\":1}}],[\"socket允许程序把网络连接当成一个流\",{\"1\":{\"2209\":1}}],[\"socket\",{\"0\":{\"2187\":1,\"2208\":1},\"1\":{\"2187\":1,\"2209\":2,\"2210\":2,\"2212\":1,\"2213\":1,\"2217\":1,\"2219\":2,\"2220\":2,\"2224\":1,\"2225\":1,\"2244\":1}}],[\"socketchannel\",{\"1\":{\"2161\":1}}],[\"socrt\",{\"1\":{\"889\":1}}],[\"sombody\",{\"1\":{\"1680\":1}}],[\"somebody\",{\"1\":{\"1680\":5}}],[\"some\",{\"1\":{\"578\":1,\"1059\":1,\"1060\":1}}],[\"son4\",{\"1\":{\"1974\":1}}],[\"son4<>\",{\"1\":{\"1974\":1}}],[\"son4<string>\",{\"1\":{\"1974\":1}}],[\"son4<t2>\",{\"1\":{\"1974\":1}}],[\"son4仍是泛型类\",{\"1\":{\"1974\":1}}],[\"son3\",{\"1\":{\"1973\":1}}],[\"son3<>\",{\"1\":{\"1973\":1}}],[\"son3<string\",{\"1\":{\"1973\":1}}],[\"son3<t1\",{\"1\":{\"1973\":1}}],[\"son3仍是泛型类\",{\"1\":{\"1973\":1}}],[\"son的age\",{\"1\":{\"1413\":1}}],[\"sondo\",{\"1\":{\"1411\":1,\"1416\":1}}],[\"son1不是泛型类\",{\"1\":{\"1971\":1}}],[\"son1\",{\"1\":{\"1376\":1,\"1971\":4}}],[\"son2不是泛型类\",{\"1\":{\"1972\":1}}],[\"son2\",{\"1\":{\"1376\":3,\"1972\":4}}],[\"son\",{\"1\":{\"1368\":1,\"1376\":5,\"1380\":1,\"1381\":1,\"1382\":2,\"1384\":2,\"1395\":1,\"1408\":7,\"1411\":3,\"1413\":2,\"1414\":3,\"1415\":3,\"1416\":3,\"1509\":1,\"1971\":1}}],[\"soft\",{\"1\":{\"884\":1,\"1029\":1,\"3285\":1,\"3288\":1,\"3289\":1,\"3319\":1,\"3320\":1}}],[\"sortorder\",{\"1\":{\"3243\":2,\"3244\":1}}],[\"sorted\",{\"0\":{\"2474\":1,\"2475\":1},\"1\":{\"2454\":1,\"2474\":2,\"2475\":2}}],[\"sortedset\",{\"1\":{\"1887\":1}}],[\"sortedset<t>\",{\"1\":{\"939\":2}}],[\"sortedmap<k\",{\"1\":{\"939\":2}}],[\"sort\",{\"0\":{\"747\":1,\"891\":1,\"892\":1,\"893\":1,\"932\":1},\"1\":{\"751\":1,\"753\":2,\"756\":2,\"757\":1,\"767\":1,\"772\":1,\"892\":2,\"893\":2,\"932\":4,\"3185\":2,\"3244\":1,\"3611\":6}}],[\"sort进行排序了\",{\"1\":{\"744\":1}}],[\"sort进行排序\",{\"1\":{\"744\":1,\"747\":1}}],[\"sort或arrays\",{\"1\":{\"744\":2,\"747\":1}}],[\"sart准确的优先\",{\"1\":{\"3481\":1}}],[\"same\",{\"1\":{\"3267\":1,\"3503\":1}}],[\"salary=2500\",{\"1\":{\"2484\":1}}],[\"salary=6000\",{\"1\":{\"2480\":1,\"2481\":1}}],[\"safevarargs\",{\"1\":{\"1638\":1}}],[\"sayhello\",{\"1\":{\"1267\":2}}],[\"say\",{\"1\":{\"858\":1,\"859\":4,\"868\":1,\"871\":1,\"874\":4,\"1058\":1,\"1060\":2,\"1280\":2,\"1350\":1,\"1380\":3,\"1382\":2,\"1408\":4,\"1495\":1,\"1648\":1}}],[\"satic\",{\"1\":{\"1353\":1}}],[\"sat\",{\"1\":{\"501\":1}}],[\"savebook\",{\"1\":{\"636\":1}}],[\"save\",{\"1\":{\"227\":1,\"635\":1,\"640\":2,\"647\":2,\"3585\":1}}],[\"sf\",{\"1\":{\"476\":1}}],[\"signature\",{\"1\":{\"3670\":1,\"3673\":1,\"3674\":1,\"3700\":1,\"3701\":1}}],[\"site\",{\"1\":{\"2850\":1}}],[\"single\",{\"1\":{\"3561\":3,\"3562\":2,\"3563\":1,\"3619\":1}}],[\"sing\",{\"1\":{\"1457\":1}}],[\"since\",{\"1\":{\"1059\":2}}],[\"sin\",{\"1\":{\"770\":1}}],[\"simpletype>\",{\"1\":{\"3029\":3}}],[\"simpletype\",{\"1\":{\"3029\":3}}],[\"simpledateformat\",{\"1\":{\"707\":1,\"2570\":2,\"2573\":2}}],[\"simple是springboot内置的缓存解决方案\",{\"1\":{\"465\":1}}],[\"simple\",{\"1\":{\"439\":1,\"464\":1,\"3029\":1}}],[\"size设置每页查询几条\",{\"1\":{\"3242\":1}}],[\"sizeandtimebasedfnatp\",{\"1\":{\"308\":3}}],[\"size\",{\"0\":{\"907\":1,\"966\":1,\"3250\":1},\"1\":{\"304\":1,\"500\":1,\"689\":1,\"907\":4,\"918\":1,\"966\":4,\"1844\":1,\"1928\":1,\"2076\":5,\"2077\":4,\"2078\":1,\"2079\":1,\"2168\":1,\"3127\":2,\"3182\":3,\"3188\":1,\"3190\":1,\"3241\":2,\"3242\":1,\"3249\":1,\"3250\":1,\"3267\":2,\"3312\":1,\"3345\":1,\"3355\":1,\"3503\":2,\"3517\":1}}],[\"sure\",{\"1\":{\"3355\":1}}],[\"sudo\",{\"1\":{\"3313\":1,\"3346\":1}}],[\"such\",{\"1\":{\"3307\":1,\"3327\":1,\"3355\":1}}],[\"successfully\",{\"1\":{\"3563\":1,\"3656\":1}}],[\"successful\",{\"1\":{\"428\":1,\"429\":1,\"431\":1,\"3135\":1,\"3142\":1,\"3144\":1,\"3149\":1,\"3160\":1,\"3164\":1,\"3191\":1,\"3249\":1}}],[\"su\",{\"1\":{\"3296\":1,\"3310\":1}}],[\"summer\",{\"1\":{\"1621\":1,\"1630\":1}}],[\"sum\",{\"1\":{\"1189\":2,\"1283\":2,\"1810\":3,\"2487\":1,\"2488\":1,\"2489\":1,\"3187\":2,\"3188\":3,\"3191\":2,\"3247\":2,\"3248\":2}}],[\"sup2\",{\"1\":{\"2407\":1}}],[\"sup1\",{\"1\":{\"2406\":2}}],[\"support\",{\"1\":{\"2734\":1}}],[\"suppresswarnings\",{\"0\":{\"1675\":1},\"1\":{\"1637\":1,\"1638\":1,\"1675\":2,\"1676\":1,\"1677\":2}}],[\"supplier的get\",{\"1\":{\"2420\":1}}],[\"supplier中的\",{\"1\":{\"2407\":1}}],[\"supplier<employee>\",{\"1\":{\"2421\":1,\"2422\":1}}],[\"supplier<string>\",{\"1\":{\"2406\":1,\"2407\":1}}],[\"supplier<t>\",{\"1\":{\"975\":1,\"2392\":1,\"2451\":1}}],[\"supplier\",{\"0\":{\"975\":1},\"1\":{\"2451\":1}}],[\"super指的是当前对象的父类\",{\"1\":{\"1484\":1}}],[\"super关键字\",{\"1\":{\"1484\":1}}],[\"super与this的区别\",{\"0\":{\"1389\":1}}],[\"super是调用父类的构造器\",{\"1\":{\"1387\":1}}],[\"super和this\",{\"0\":{\"1387\":1}}],[\"super调用构造器\",{\"0\":{\"1384\":1}}],[\"super必加\",{\"1\":{\"1383\":1}}],[\"super必须不能省略\",{\"1\":{\"1381\":1}}],[\"super可用于在子类构造器中调用父类的构造器\",{\"1\":{\"1379\":1}}],[\"super可用于调用父类中定义的成员方法\",{\"1\":{\"1379\":1}}],[\"super可用于访问父类中定义的属性\",{\"1\":{\"1379\":1}}],[\"super的作用\",{\"0\":{\"1379\":1}}],[\"superclass\",{\"1\":{\"841\":2,\"1360\":2,\"2299\":2}}],[\"super\",{\"0\":{\"893\":1,\"1378\":1,\"1380\":1,\"2000\":1},\"1\":{\"841\":2,\"893\":1,\"932\":2,\"934\":2,\"935\":2,\"937\":1,\"1380\":5,\"1381\":1,\"1382\":2,\"1384\":2,\"1385\":1,\"1386\":2,\"1387\":2,\"1518\":3,\"1612\":1,\"1630\":1,\"1728\":1,\"2000\":1,\"2001\":1,\"2076\":1,\"2077\":1,\"2078\":1,\"2079\":1,\"2467\":1,\"2505\":1,\"2599\":2,\"2812\":2}}],[\"superman\",{\"1\":{\"702\":2,\"2344\":5,\"2345\":4}}],[\"suffix\",{\"1\":{\"661\":1,\"3267\":1,\"3503\":1}}],[\"sunday\",{\"1\":{\"1616\":1}}],[\"sun\",{\"1\":{\"501\":1,\"844\":1,\"845\":1,\"2079\":1,\"2243\":1,\"2280\":2,\"3488\":1}}],[\"submit\",{\"1\":{\"1814\":1,\"2857\":1,\"2871\":1}}],[\"subclass\",{\"1\":{\"1360\":2}}],[\"sublist\",{\"0\":{\"952\":1},\"1\":{\"952\":2}}],[\"subtrahend\",{\"1\":{\"780\":1}}],[\"subtract\",{\"0\":{\"780\":1},\"1\":{\"780\":2}}],[\"substring\",{\"0\":{\"669\":1},\"1\":{\"669\":3,\"697\":1,\"1059\":2}}],[\"sub\",{\"1\":{\"451\":1}}],[\"subject\",{\"1\":{\"152\":1}}],[\"shtml\",{\"1\":{\"2241\":1}}],[\"shit\",{\"1\":{\"1451\":1,\"1497\":1,\"1587\":1,\"2354\":1,\"2448\":1}}],[\"shuffle\",{\"0\":{\"931\":1},\"1\":{\"931\":3}}],[\"shutdownserver执行的条件\",{\"1\":{\"3721\":1}}],[\"shutdownserver\",{\"1\":{\"3564\":1,\"3721\":1}}],[\"shutdownoutput\",{\"1\":{\"2214\":2}}],[\"shutdowninput\",{\"1\":{\"2214\":2}}],[\"shutdown\",{\"1\":{\"342\":1,\"500\":1,\"1814\":1,\"1817\":1,\"2704\":1}}],[\"should\",{\"1\":{\"3169\":1,\"3230\":1,\"3267\":3,\"3298\":1,\"3503\":3}}],[\"shopping\",{\"1\":{\"3118\":1,\"3119\":1,\"3123\":1,\"3124\":2,\"3130\":1,\"3134\":1,\"3135\":1,\"3140\":1,\"3141\":2,\"3142\":2,\"3144\":1,\"3148\":1,\"3149\":1,\"3150\":1,\"3153\":1,\"3158\":1,\"3159\":2,\"3160\":2,\"3164\":2,\"3183\":1,\"3186\":1}}],[\"shot\",{\"1\":{\"1075\":1}}],[\"short三种类型的变量做运算时\",{\"1\":{\"1113\":1}}],[\"shortvalue\",{\"1\":{\"772\":1}}],[\"short\",{\"1\":{\"671\":3,\"734\":1,\"760\":2,\"771\":1,\"772\":1,\"888\":1,\"1009\":1,\"1089\":1,\"1141\":1,\"1145\":1,\"1175\":1,\"1273\":1,\"1546\":1,\"2124\":1,\"2562\":1}}],[\"showbuiltinroles\",{\"1\":{\"3701\":1}}],[\"showdesc\",{\"1\":{\"2296\":1,\"2311\":4}}],[\"shownation\",{\"1\":{\"2255\":1,\"2258\":4}}],[\"showinfo\",{\"1\":{\"1630\":1}}],[\"showseason\",{\"1\":{\"1630\":3,\"1631\":1}}],[\"show\",{\"1\":{\"326\":1,\"343\":1,\"345\":1,\"1267\":2,\"1295\":1,\"1296\":1,\"1630\":2,\"2255\":1,\"2256\":1,\"2257\":3,\"2296\":1,\"2311\":5,\"3574\":2,\"3580\":2,\"3712\":1}}],[\"shape\",{\"1\":{\"3465\":1,\"3466\":1,\"3467\":1,\"3468\":1,\"3469\":1}}],[\"shard\",{\"1\":{\"3400\":1,\"3527\":1}}],[\"shards后得到余数\",{\"1\":{\"3400\":1}}],[\"shards\",{\"0\":{\"3365\":1},\"1\":{\"419\":1,\"422\":1,\"423\":1,\"428\":1,\"429\":1,\"431\":1,\"3119\":1,\"3124\":1,\"3135\":1,\"3142\":1,\"3144\":1,\"3149\":1,\"3160\":1,\"3164\":1,\"3191\":1,\"3249\":1,\"3278\":7,\"3279\":7,\"3280\":7,\"3282\":1,\"3283\":1,\"3378\":7,\"3379\":1,\"3380\":7,\"3381\":1,\"3400\":3,\"3527\":1}}],[\"sha\",{\"1\":{\"388\":1,\"389\":1,\"392\":2,\"3305\":1,\"3328\":1}}],[\"shell工具\",{\"1\":{\"3571\":1}}],[\"shell了\",{\"1\":{\"3567\":1}}],[\"shell已经过时了\",{\"1\":{\"3566\":1}}],[\"shell和compass都可以连接mongodb\",{\"1\":{\"3566\":1}}],[\"shell\",{\"0\":{\"78\":1,\"3567\":1},\"1\":{\"10\":1,\"3567\":2,\"3568\":1,\"3571\":1}}],[\"ssd\",{\"1\":{\"3501\":1}}],[\"ssb\",{\"1\":{\"3230\":2,\"3231\":3,\"3233\":2,\"3234\":3,\"3236\":2,\"3237\":2,\"3239\":2,\"3240\":2,\"3242\":3,\"3244\":3,\"3248\":3,\"3249\":3,\"3250\":2,\"3252\":4,\"3253\":4}}],[\"ssl安全配置\",{\"1\":{\"3355\":1}}],[\"sslcontext\",{\"1\":{\"418\":6}}],[\"sslcontexts\",{\"1\":{\"418\":2}}],[\"sslcontextbuilder\",{\"1\":{\"418\":4}}],[\"ssl\",{\"1\":{\"418\":4,\"3110\":1,\"3298\":1,\"3300\":1,\"3301\":1,\"3307\":2,\"3327\":2,\"3337\":2,\"3352\":1,\"3355\":2}}],[\"ssl证书\",{\"0\":{\"417\":1},\"1\":{\"3326\":1}}],[\"sss\",{\"1\":{\"308\":3}}],[\"ss\",{\"1\":{\"308\":4,\"718\":1,\"735\":2,\"736\":1,\"737\":1}}],[\"ssm框架就是对三层架构的封装\",{\"1\":{\"3009\":1}}],[\"ssm\",{\"1\":{\"356\":1,\"368\":1,\"500\":1,\"617\":1}}],[\"ssmp\",{\"1\":{\"246\":2}}],[\"ssmpapplication\",{\"1\":{\"197\":2,\"246\":1,\"259\":3}}],[\"ssm开发案例\",{\"0\":{\"614\":1},\"1\":{\"45\":1}}],[\"slist方法会返回一个arraylist\",{\"1\":{\"897\":1}}],[\"slf4j\",{\"0\":{\"290\":1},\"1\":{\"290\":2,\"309\":2,\"418\":3,\"419\":1}}],[\"sleep\",{\"0\":{\"1803\":1},\"1\":{\"148\":2,\"1727\":1,\"1729\":2,\"1775\":1,\"1795\":2,\"1803\":2}}],[\"spacex和星舰进行查询\",{\"1\":{\"3425\":1}}],[\"spacex\",{\"1\":{\"3425\":2,\"3432\":2,\"3433\":1}}],[\"spark是大数据框架\",{\"1\":{\"3256\":1}}],[\"spark\",{\"0\":{\"3256\":1}}],[\"speed\",{\"1\":{\"1507\":2}}],[\"spendtime\",{\"1\":{\"1499\":1}}],[\"specified\",{\"1\":{\"3664\":1}}],[\"specifying\",{\"1\":{\"3267\":1,\"3503\":1}}],[\"spec\",{\"1\":{\"246\":2,\"2238\":3}}],[\"split​\",{\"1\":{\"1001\":1}}],[\"split\",{\"0\":{\"682\":1,\"992\":1,\"1001\":1},\"1\":{\"682\":3,\"992\":3,\"1001\":1}}],[\"sprint\",{\"0\":{\"608\":1}}],[\"spring的一个子项目\",{\"1\":{\"3746\":1}}],[\"springdata\",{\"0\":{\"3255\":1}}],[\"spring2\",{\"1\":{\"1636\":1}}],[\"springfox<\",{\"1\":{\"607\":1,\"612\":1}}],[\"springframework<\",{\"1\":{\"123\":2}}],[\"springframework\",{\"1\":{\"100\":1,\"117\":1,\"118\":1,\"119\":1,\"123\":3,\"134\":2,\"135\":1,\"169\":1,\"170\":1,\"171\":1,\"185\":1,\"209\":1,\"223\":1,\"239\":1,\"244\":1,\"246\":1,\"319\":1,\"355\":1,\"377\":1,\"387\":1,\"404\":1,\"406\":2,\"407\":2,\"418\":4,\"438\":1,\"450\":1,\"466\":1,\"482\":1,\"506\":3,\"511\":6,\"525\":1,\"592\":1,\"593\":1,\"594\":1,\"595\":1,\"602\":1,\"604\":1,\"608\":1,\"612\":7,\"3748\":1}}],[\"spring源码还不是了解\",{\"1\":{\"570\":1}}],[\"spring源码还不是很连接\",{\"1\":{\"569\":1}}],[\"spring配置文件\",{\"1\":{\"559\":1}}],[\"spring中定义了一个叫做beandefinition的东西\",{\"1\":{\"526\":1}}],[\"spring提供了\",{\"1\":{\"539\":1}}],[\"spring提供了一个接口factorybean接口\",{\"1\":{\"514\":1}}],[\"spring提供的默认持久化技术是jdbctempalte\",{\"1\":{\"359\":1}}],[\"springconfig2\",{\"1\":{\"528\":1}}],[\"springconfig1\",{\"1\":{\"524\":1,\"525\":1}}],[\"springconfig\",{\"1\":{\"520\":1,\"521\":1,\"540\":1,\"541\":1,\"543\":1}}],[\"springconfig4\",{\"1\":{\"518\":2}}],[\"springconfig3\",{\"1\":{\"513\":1,\"514\":1}}],[\"springcloud\",{\"1\":{\"10\":1}}],[\"spring还提供了使用java格式的spring配置来取代xml格式的bean配置\",{\"1\":{\"513\":1}}],[\"spring并不会主动感知他们\",{\"1\":{\"511\":1}}],[\"spring内部会根据反射机制加载class\",{\"1\":{\"506\":1}}],[\"springprofile>\",{\"1\":{\"308\":2}}],[\"spring知识回顾\",{\"1\":{\"202\":1}}],[\"springapplication\",{\"1\":{\"127\":1,\"128\":2,\"164\":1,\"197\":1,\"259\":3,\"320\":1,\"498\":1,\"555\":1}}],[\"spring系列框架的配置和依赖太复杂了\",{\"1\":{\"91\":1}}],[\"spring全家桶\",{\"1\":{\"11\":1}}],[\"springboot集成\",{\"0\":{\"3744\":1}}],[\"springboot测试类\",{\"1\":{\"623\":1}}],[\"springboot内置的组件\",{\"1\":{\"591\":1}}],[\"springbootconfiguration\",{\"0\":{\"564\":1},\"1\":{\"563\":1}}],[\"springboot注解修饰的\",{\"1\":{\"563\":1}}],[\"springboot运行是从启动类的main方法开始的\",{\"1\":{\"563\":1}}],[\"springboot启动时默认全部加载\",{\"1\":{\"562\":1}}],[\"springboot工作原理\",{\"0\":{\"562\":1}}],[\"springboot没有整合方案\",{\"1\":{\"561\":1}}],[\"springboot没有及时更新\",{\"1\":{\"414\":1}}],[\"springboot如何处理这些类呢\",{\"1\":{\"560\":1}}],[\"springboot22taskapplication\",{\"1\":{\"498\":2}}],[\"springboot提供的缓存技术除了提供默认的缓存方案\",{\"1\":{\"464\":1}}],[\"springboot提供了四个级别的配置文件\",{\"1\":{\"262\":1}}],[\"springboot提供了临时属性的方式快速修改某些配置\",{\"1\":{\"256\":1}}],[\"springboot技术提供有内置的缓存解决方案\",{\"1\":{\"464\":1}}],[\"springboot缓存方案\",{\"0\":{\"464\":1}}],[\"springboot对rabbitmq只是整合了依赖和配置\",{\"1\":{\"437\":1}}],[\"springboot对它们进行了非常大的简化\",{\"1\":{\"91\":1}}],[\"springboot整合缓存技术做的是通用格式\",{\"1\":{\"475\":1}}],[\"springboot整合activemq提供了jmsmessagingtemplate对象作为客户端操作消息队列\",{\"1\":{\"456\":1}}],[\"springboot整合redis技术提供了多种客户端兼容模式\",{\"1\":{\"381\":1}}],[\"springboot整合redis时提供了专用的api接口stringredistemplate\",{\"1\":{\"379\":1}}],[\"springboot整合任何技术其实就是在springboot中使用对应技术的api\",{\"1\":{\"354\":1}}],[\"springboot官网没有收录mybatisplus\",{\"1\":{\"371\":1}}],[\"springboot都完成了\",{\"1\":{\"363\":1}}],[\"springboot都处于启动状态\",{\"1\":{\"159\":1}}],[\"springbootadmin提供了多个内置端点\",{\"1\":{\"342\":1}}],[\"springbootapplication配置生效的\",{\"1\":{\"129\":1}}],[\"springbootapplication\",{\"0\":{\"129\":1,\"563\":1},\"1\":{\"127\":1,\"128\":1,\"164\":1,\"197\":1,\"202\":2,\"207\":1,\"320\":1,\"467\":1,\"498\":1,\"555\":1}}],[\"springboot使用\",{\"1\":{\"282\":1}}],[\"springboot从2\",{\"1\":{\"280\":1}}],[\"springboot就可以单独运行了\",{\"1\":{\"244\":1}}],[\"springboot程序添加配置后会打出一个特殊的包\",{\"1\":{\"247\":1}}],[\"springboot程序是基于maven创建的\",{\"1\":{\"236\":1}}],[\"springboot程序包含的基础文件\",{\"1\":{\"98\":1}}],[\"springboot不用指定配置类\",{\"1\":{\"229\":1}}],[\"springboottest注解的类\",{\"1\":{\"229\":1}}],[\"springboottest注解添加一个classes属性\",{\"1\":{\"229\":1}}],[\"springboottest注解定义在类的上方\",{\"1\":{\"226\":1}}],[\"springboottest修饰\",{\"1\":{\"227\":1}}],[\"springboottest\",{\"1\":{\"226\":1,\"227\":1,\"229\":1,\"366\":1,\"375\":1,\"403\":1,\"404\":1,\"406\":1,\"407\":1,\"408\":1,\"409\":1,\"410\":1,\"419\":1,\"422\":1,\"423\":1,\"424\":1,\"425\":1,\"428\":1,\"429\":1,\"430\":1,\"431\":1,\"432\":1,\"493\":1,\"623\":1}}],[\"springboot已经默认创建了一个测试类\",{\"1\":{\"226\":1}}],[\"springboot已经将所有的项目依赖的最佳版本组合给提前设置好了\",{\"1\":{\"120\":1}}],[\"springboot13configurationapplication\",{\"1\":{\"207\":1}}],[\"springboot将大部分配置都整合到了application\",{\"1\":{\"159\":1}}],[\"springboot将tomcat功能抽取出来封装到了一个对象\",{\"1\":{\"132\":1}}],[\"springboot可以将配置文件中所有的配置项信息封装到environment对象中\",{\"1\":{\"152\":1}}],[\"springboot会自动执行引导类的main方法\",{\"1\":{\"259\":1}}],[\"springboot会自动导入配置文件的\",{\"1\":{\"150\":1}}],[\"springboot会整合很多技术\",{\"1\":{\"11\":1}}],[\"springboot为所有的重要的配置项基本都设置了默认值\",{\"1\":{\"137\":1}}],[\"springboot默认采取的是simple缓存\",{\"1\":{\"477\":1}}],[\"springboot默认有个test目录\",{\"1\":{\"225\":1}}],[\"springboot默认配置文件\",{\"1\":{\"137\":1}}],[\"springboot默认集成了unit\",{\"1\":{\"98\":1}}],[\"springboot中读取maven设置值\",{\"0\":{\"282\":1}}],[\"springboot中内嵌了一个tomcat服务器\",{\"1\":{\"132\":1}}],[\"springboot中常见的依赖类型\",{\"1\":{\"123\":1}}],[\"springboot依赖的版本就已经确认了\",{\"1\":{\"120\":1}}],[\"springboot依赖管理总结\",{\"0\":{\"120\":1}}],[\"springboot做了什么\",{\"0\":{\"112\":1,\"559\":1}}],[\"springboot的maven打包插件\",{\"0\":{\"240\":1}}],[\"springboot的tomcat服务器是内置的\",{\"1\":{\"180\":1}}],[\"springboot的引导类是boot工程的执行入口\",{\"1\":{\"127\":1}}],[\"springboot的parent并非包含了所有依赖的坐标\",{\"1\":{\"121\":1}}],[\"springboot的启动类在项目中的位置是固定的\",{\"1\":{\"101\":1}}],[\"springboot的特点\",{\"0\":{\"92\":1}}],[\"springboot项目依然能启动\",{\"1\":{\"259\":1}}],[\"springboot项目热部署实现原理\",{\"0\":{\"180\":1}}],[\"springboot项目的配置文件都是放在\",{\"1\":{\"136\":1}}],[\"springboot项目是需要联网创建的\",{\"1\":{\"97\":1}}],[\"springboot项目构建是需要联网的\",{\"1\":{\"95\":1}}],[\"springboot是个组合注解\",{\"1\":{\"563\":1}}],[\"springboot是如何知道那些具体的bean要加载\",{\"1\":{\"562\":1}}],[\"springboot是无法帮忙直接连接es服务的\",{\"1\":{\"416\":1}}],[\"springboot是需要启动的\",{\"1\":{\"224\":1}}],[\"springboot是由pivotal团队提供的全新框架\",{\"1\":{\"91\":1}}],[\"springboot是java开发必备的\",{\"1\":{\"90\":1}}],[\"springboot\",{\"0\":{\"44\":1,\"116\":1,\"591\":1,\"592\":1},\"1\":{\"10\":1,\"11\":1,\"135\":1,\"154\":1,\"246\":2,\"288\":2,\"290\":2,\"309\":2,\"343\":1,\"545\":2,\"560\":1,\"570\":1,\"590\":1,\"612\":1}}],[\"springmvc\",{\"0\":{\"593\":1},\"1\":{\"10\":1,\"11\":1,\"612\":1,\"3009\":1,\"3013\":1}}],[\"spring\",{\"0\":{\"95\":1,\"119\":1,\"316\":1,\"318\":1,\"322\":1,\"502\":1,\"3746\":1,\"3747\":1},\"1\":{\"10\":1,\"11\":1,\"50\":1,\"53\":1,\"95\":1,\"96\":1,\"97\":1,\"105\":1,\"118\":1,\"133\":3,\"162\":1,\"163\":1,\"169\":1,\"194\":1,\"196\":1,\"197\":1,\"223\":1,\"240\":1,\"246\":5,\"267\":2,\"272\":5,\"275\":1,\"280\":1,\"282\":1,\"306\":1,\"307\":1,\"316\":1,\"317\":1,\"319\":2,\"324\":1,\"326\":1,\"342\":5,\"355\":1,\"356\":1,\"361\":3,\"362\":1,\"371\":1,\"372\":1,\"378\":1,\"383\":1,\"384\":1,\"388\":2,\"391\":1,\"392\":1,\"414\":1,\"416\":1,\"418\":5,\"439\":1,\"451\":1,\"477\":1,\"483\":3,\"496\":1,\"497\":1,\"500\":1,\"506\":1,\"511\":2,\"539\":1,\"545\":1,\"560\":1,\"567\":5,\"592\":2,\"593\":1,\"594\":1,\"595\":1,\"598\":1,\"612\":4,\"616\":1,\"617\":1,\"631\":1,\"1616\":1,\"1621\":1,\"1622\":5,\"1630\":1,\"1631\":7,\"3009\":1,\"3013\":1,\"3746\":2,\"3747\":1,\"3750\":1,\"3751\":1}}],[\"sprigboot都帮我们做好了\",{\"1\":{\"559\":1}}],[\"s\",{\"1\":{\"212\":1,\"663\":1,\"671\":7,\"673\":3,\"700\":1,\"720\":2,\"721\":2,\"722\":1,\"775\":1,\"776\":1,\"814\":1,\"939\":3,\"997\":1,\"1060\":1,\"1338\":2,\"1382\":1,\"1408\":7,\"1446\":1,\"1517\":2,\"1609\":3,\"1630\":1,\"1728\":2,\"1855\":2,\"2061\":1,\"2064\":1,\"2354\":1,\"2371\":6,\"2373\":2,\"2375\":2,\"2451\":1,\"3316\":1,\"3328\":1,\"3331\":1,\"3587\":1,\"3682\":1}}],[\"sgugo项目\",{\"1\":{\"2746\":1}}],[\"sgugo项目名的输出目录\",{\"1\":{\"2723\":1}}],[\"sgugo\",{\"1\":{\"170\":1,\"226\":1,\"347\":1,\"401\":1,\"418\":1,\"444\":1,\"446\":1,\"470\":1,\"471\":2,\"472\":1,\"473\":1,\"511\":2,\"513\":2,\"514\":2,\"523\":2,\"524\":1,\"525\":3,\"528\":1,\"536\":2,\"540\":2,\"541\":1,\"2723\":1,\"3206\":1}}],[\"sce\",{\"1\":{\"2962\":2,\"2972\":2,\"2973\":2}}],[\"sc\",{\"1\":{\"2883\":1}}],[\"score\",{\"1\":{\"1581\":2,\"1955\":2,\"3142\":3,\"3160\":3,\"3164\":3,\"3191\":1,\"3227\":2,\"3231\":1,\"3249\":1,\"3253\":1,\"3620\":1}}],[\"scope>\",{\"1\":{\"123\":5,\"223\":1,\"361\":1,\"371\":1,\"594\":1,\"597\":1,\"608\":1,\"612\":2}}],[\"scab\",{\"1\":{\"2965\":3}}],[\"scalability\",{\"1\":{\"3540\":1}}],[\"scalarhandler\",{\"1\":{\"2684\":1,\"2691\":4}}],[\"scale\",{\"1\":{\"782\":1}}],[\"scanperiod\",{\"1\":{\"308\":1}}],[\"scanperiod=\",{\"1\":{\"308\":1}}],[\"scan\",{\"1\":{\"308\":1,\"511\":1,\"886\":1,\"887\":3,\"888\":2,\"1007\":1,\"1008\":3,\"1009\":2,\"1186\":2}}],[\"scan=\",{\"1\":{\"308\":1}}],[\"scanner没有提供char类型next方法\",{\"1\":{\"888\":1,\"1009\":1}}],[\"scanner类的用法很多\",{\"1\":{\"885\":1,\"1006\":1}}],[\"scanner\",{\"0\":{\"885\":1,\"886\":1,\"1007\":1},\"1\":{\"58\":1,\"885\":2,\"886\":3,\"887\":3,\"888\":2,\"1006\":2,\"1007\":3,\"1008\":3,\"1009\":2,\"1186\":3,\"1581\":5}}],[\"schemalocation\",{\"1\":{\"3030\":1}}],[\"schemalocation=\",{\"1\":{\"506\":1,\"511\":1,\"3030\":1}}],[\"schema>\",{\"1\":{\"3029\":1}}],[\"schema示例\",{\"0\":{\"3029\":1}}],[\"schema\",{\"0\":{\"3028\":1},\"1\":{\"506\":3,\"511\":6,\"3023\":1,\"3029\":1}}],[\"scheduling\",{\"1\":{\"500\":2}}],[\"scheduled注解自动创建了定时任务\",{\"1\":{\"499\":1}}],[\"scheduled\",{\"1\":{\"499\":1,\"501\":1}}],[\"scheduled定义执行的时间\",{\"1\":{\"499\":1}}],[\"scheduledtasks\",{\"1\":{\"342\":1}}],[\"scheduleatfixedrate\",{\"1\":{\"492\":2}}],[\"schedule\",{\"1\":{\"492\":4,\"493\":1}}],[\"scram\",{\"1\":{\"392\":2}}],[\"still\",{\"1\":{\"3307\":1,\"3327\":1,\"3355\":1}}],[\"st\",{\"1\":{\"2620\":2}}],[\"stu4\",{\"1\":{\"2502\":2}}],[\"stu3\",{\"1\":{\"2502\":2,\"2508\":2}}],[\"stu\",{\"1\":{\"2500\":2,\"2502\":2,\"2505\":2,\"2507\":1}}],[\"stu2\",{\"1\":{\"2475\":2,\"2502\":2,\"2504\":2,\"2508\":2}}],[\"stu1\",{\"1\":{\"2475\":2,\"2500\":2,\"2505\":2,\"2507\":3}}],[\"stulist\",{\"1\":{\"2470\":2,\"2475\":2}}],[\"stuscore\",{\"1\":{\"1955\":2}}],[\"study\",{\"1\":{\"786\":2,\"2015\":2,\"2016\":2}}],[\"studenttype里的属性\",{\"1\":{\"3029\":1}}],[\"studenttype\",{\"1\":{\"3029\":2}}],[\"studenttest\",{\"1\":{\"1609\":1}}],[\"student元素\",{\"1\":{\"3029\":1}}],[\"student>\",{\"1\":{\"3027\":1,\"3030\":1}}],[\"student+\",{\"1\":{\"3025\":1}}],[\"studentstype\",{\"1\":{\"3029\":2}}],[\"students>\",{\"1\":{\"3027\":1,\"3030\":1}}],[\"students\",{\"1\":{\"410\":2,\"1509\":1,\"2469\":6,\"3025\":1,\"3027\":1,\"3029\":1,\"3030\":1}}],[\"student\",{\"1\":{\"394\":2,\"401\":1,\"403\":8,\"404\":1,\"406\":1,\"407\":1,\"408\":3,\"409\":3,\"410\":1,\"419\":2,\"1266\":1,\"1403\":2,\"1404\":1,\"1609\":3,\"2469\":18,\"2470\":2,\"2471\":2,\"2475\":1,\"2500\":2,\"2502\":4,\"2504\":1,\"2505\":3,\"2507\":5,\"2508\":4,\"3025\":2,\"3027\":1,\"3029\":1,\"3030\":2,\"3189\":1}}],[\"storage\",{\"1\":{\"3540\":1,\"3558\":1,\"3562\":2,\"3656\":2}}],[\"store\",{\"1\":{\"578\":2,\"3127\":2,\"3197\":2}}],[\"stock\",{\"1\":{\"3494\":2}}],[\"stopwords\",{\"1\":{\"3488\":2}}],[\"stop\",{\"1\":{\"1507\":1,\"1512\":5,\"1727\":1,\"1729\":1,\"1768\":2}}],[\"steamres\",{\"1\":{\"813\":2}}],[\"steam\",{\"1\":{\"813\":2,\"814\":1,\"819\":1}}],[\"stepdown\",{\"1\":{\"3685\":1}}],[\"step\",{\"1\":{\"562\":7}}],[\"stdoutimpl\",{\"1\":{\"624\":1}}],[\"stdout\",{\"1\":{\"624\":1}}],[\"standard\",{\"1\":{\"3473\":1}}],[\"stackoverflowerror\",{\"1\":{\"1560\":1}}],[\"stackoverflowerror和oom\",{\"1\":{\"1560\":1}}],[\"stack\",{\"0\":{\"3090\":1},\"1\":{\"1546\":1,\"3090\":2,\"3091\":1,\"3094\":1,\"3296\":3,\"3298\":2}}],[\"stats\",{\"1\":{\"3188\":2,\"3190\":2,\"3191\":1}}],[\"statestr\",{\"1\":{\"3670\":1,\"3671\":1,\"3673\":1,\"3674\":1}}],[\"state\",{\"1\":{\"3187\":1,\"3247\":1,\"3248\":1,\"3587\":1,\"3590\":2,\"3596\":1,\"3607\":1,\"3670\":1,\"3673\":1,\"3674\":1,\"3682\":1}}],[\"statement和resultset为null情况下避免关闭\",{\"1\":{\"2682\":1}}],[\"statement和resultset\",{\"1\":{\"2682\":1}}],[\"statement的弊端\",{\"0\":{\"2557\":1}}],[\"statement\",{\"0\":{\"2565\":1},\"1\":{\"2556\":1,\"2565\":1,\"2576\":1,\"2620\":1,\"2652\":2}}],[\"stat日志用的filter\",{\"1\":{\"2674\":1}}],[\"status自动赋值给user对象\",{\"1\":{\"546\":1}}],[\"statusconfig\",{\"1\":{\"350\":1}}],[\"status\",{\"1\":{\"347\":1,\"350\":6,\"525\":2,\"546\":2,\"882\":1,\"3127\":1,\"3278\":2,\"3279\":1,\"3280\":1,\"3378\":1,\"3380\":1,\"3669\":1,\"3673\":1}}],[\"static<t>\",{\"1\":{\"2448\":1,\"2450\":1,\"2451\":1}}],[\"staticproxytest\",{\"1\":{\"2330\":1}}],[\"static代码块\",{\"1\":{\"1526\":1}}],[\"static的返回当前类对象的方法\",{\"1\":{\"1489\":1,\"1769\":1}}],[\"static的背景\",{\"0\":{\"1471\":1}}],[\"static是静态修饰符\",{\"1\":{\"1470\":1}}],[\"static关键字的使用\",{\"0\":{\"1470\":1}}],[\"static介绍\",{\"0\":{\"1469\":1}}],[\"static方法\",{\"1\":{\"889\":1}}],[\"static\",{\"0\":{\"1346\":1,\"1355\":1,\"1468\":1},\"1\":{\"127\":1,\"128\":1,\"164\":1,\"193\":1,\"194\":1,\"197\":1,\"244\":1,\"245\":1,\"259\":3,\"288\":1,\"320\":1,\"418\":3,\"444\":2,\"493\":1,\"498\":1,\"520\":1,\"521\":1,\"555\":1,\"688\":2,\"724\":1,\"727\":1,\"746\":1,\"765\":1,\"838\":1,\"889\":1,\"893\":1,\"899\":1,\"1038\":1,\"1060\":1,\"1184\":1,\"1186\":1,\"1204\":1,\"1259\":1,\"1263\":2,\"1267\":1,\"1270\":1,\"1277\":1,\"1280\":1,\"1282\":1,\"1292\":1,\"1302\":1,\"1304\":1,\"1346\":1,\"1355\":1,\"1357\":1,\"1401\":1,\"1408\":1,\"1451\":1,\"1466\":1,\"1467\":1,\"1475\":1,\"1476\":1,\"1481\":3,\"1488\":2,\"1489\":2,\"1497\":2,\"1507\":5,\"1508\":1,\"1515\":1,\"1516\":1,\"1525\":1,\"1526\":3,\"1560\":1,\"1600\":3,\"1609\":1,\"1612\":1,\"1620\":1,\"1621\":5,\"1625\":1,\"1670\":1,\"1680\":2,\"1720\":1,\"1727\":3,\"1728\":1,\"1729\":1,\"1737\":1,\"1740\":1,\"1757\":1,\"1760\":2,\"1763\":2,\"1768\":1,\"1769\":3,\"1784\":1,\"1795\":1,\"1804\":1,\"1810\":1,\"1817\":1,\"1874\":1,\"1968\":1,\"1982\":1,\"2003\":1,\"2013\":1,\"2076\":1,\"2078\":1,\"2079\":1,\"2117\":2,\"2155\":1,\"2158\":2,\"2167\":2,\"2192\":1,\"2193\":1,\"2275\":1,\"2330\":1,\"2338\":1,\"2342\":1,\"2446\":1,\"2447\":3,\"2469\":2,\"2575\":1,\"2576\":1,\"2675\":3,\"2682\":7,\"2811\":7,\"3206\":1,\"3209\":1,\"3211\":1,\"3212\":1,\"3214\":1,\"3217\":1,\"3218\":1,\"3220\":1,\"3221\":1,\"3225\":1,\"3226\":1,\"3227\":1,\"3231\":1,\"3234\":1,\"3237\":1,\"3240\":1,\"3242\":1,\"3244\":1,\"3249\":1,\"3253\":1}}],[\"started\",{\"1\":{\"3355\":1,\"3563\":1,\"3656\":1}}],[\"starter依赖\",{\"1\":{\"592\":1}}],[\"starter与parent\",{\"0\":{\"125\":1}}],[\"starter<\",{\"1\":{\"123\":1,\"355\":1,\"361\":2,\"371\":2,\"592\":1,\"598\":1,\"600\":1,\"607\":1,\"612\":3}}],[\"starter内部会包含很多依赖包的依赖信息\",{\"1\":{\"123\":1}}],[\"starter\",{\"0\":{\"118\":1,\"122\":1},\"1\":{\"117\":1,\"118\":1,\"120\":1,\"123\":3,\"125\":1,\"133\":3,\"134\":4,\"135\":2,\"163\":1,\"176\":1,\"223\":2,\"319\":3,\"323\":1,\"355\":1,\"377\":1,\"387\":1,\"414\":2,\"416\":1,\"438\":1,\"450\":1,\"466\":1,\"482\":1,\"592\":1,\"593\":2,\"594\":2,\"595\":2,\"602\":1,\"604\":1,\"612\":5,\"3748\":1}}],[\"starts\",{\"1\":{\"3305\":1,\"3328\":1}}],[\"startswith\",{\"0\":{\"662\":1},\"1\":{\"662\":2,\"2166\":1,\"2479\":1}}],[\"startup>\",{\"1\":{\"2820\":1}}],[\"startup\",{\"1\":{\"2703\":1,\"3355\":1}}],[\"start方法\",{\"0\":{\"1718\":1}}],[\"startwith\",{\"1\":{\"662\":1}}],[\"start是可以嵌套的\",{\"1\":{\"123\":1}}],[\"start\",{\"1\":{\"97\":2,\"105\":1,\"246\":1,\"701\":2,\"702\":2,\"1204\":2,\"1499\":2,\"1512\":5,\"1720\":3,\"1727\":1,\"1728\":1,\"1729\":1,\"1737\":1,\"1740\":3,\"1757\":2,\"1760\":3,\"1768\":3,\"1784\":3,\"1795\":2,\"1804\":2,\"1810\":1,\"2086\":2,\"2621\":1,\"2624\":1,\"3305\":1,\"3328\":1,\"3473\":4,\"3476\":4,\"3480\":2,\"3482\":5,\"3483\":3,\"3485\":5,\"3489\":2}}],[\"strlist\",{\"1\":{\"1964\":2,\"2463\":1}}],[\"str+\",{\"1\":{\"1680\":1}}],[\"str3\",{\"1\":{\"1445\":1}}],[\"strs\",{\"1\":{\"1296\":3}}],[\"str2\",{\"1\":{\"734\":2,\"774\":2,\"1426\":2,\"1427\":2,\"1445\":1,\"1446\":2}}],[\"str1\",{\"1\":{\"692\":1,\"734\":2,\"774\":2,\"1420\":1,\"1426\":2,\"1427\":2,\"1445\":1,\"1446\":2}}],[\"str替换\",{\"0\":{\"678\":1}}],[\"str\",{\"1\":{\"656\":1,\"657\":1,\"668\":1,\"671\":1,\"673\":2,\"689\":1,\"692\":1,\"700\":1,\"702\":2,\"703\":1,\"732\":1,\"737\":2,\"824\":3,\"897\":3,\"905\":2,\"970\":2,\"1134\":4,\"1297\":1,\"1420\":1,\"1433\":2,\"1575\":3,\"1578\":2,\"1579\":1,\"1580\":3,\"1587\":2,\"1627\":1,\"1680\":1,\"2055\":2,\"2148\":1,\"2152\":2,\"2232\":2,\"2281\":1,\"2403\":2,\"2463\":1}}],[\"strops\",{\"1\":{\"379\":1}}],[\"strredis\",{\"1\":{\"379\":1}}],[\"structure界面\",{\"1\":{\"2790\":1}}],[\"structure添加web\",{\"0\":{\"2733\":1}}],[\"structure\",{\"1\":{\"166\":1,\"2355\":1,\"2733\":1,\"2743\":1,\"2763\":1,\"2992\":1}}],[\"string新增方法\",{\"0\":{\"2515\":1}}],[\"string内部已经重新了排序了\",{\"1\":{\"1934\":1}}],[\"string内部底层定义了final\",{\"1\":{\"1126\":1}}],[\"stringindexoutofboundsexception\",{\"0\":{\"1578\":1}}],[\"string是java的一个内置类\",{\"1\":{\"1266\":1}}],[\"string是一个final类\",{\"1\":{\"1126\":1}}],[\"string数据类型就是引用类型\",{\"1\":{\"1266\":1}}],[\"string数据类型本质就是java内部定义的string类\",{\"1\":{\"1256\":1}}],[\"string可以和8种基本数据类型变量做运算\",{\"1\":{\"1134\":1}}],[\"string可以作为参数\",{\"1\":{\"730\":1}}],[\"string对象中有一个属性values\",{\"1\":{\"1131\":1}}],[\"string对象是储存在堆中的\",{\"1\":{\"1131\":1}}],[\"string对象的储存\",{\"0\":{\"1131\":1}}],[\"string对象的内存分析\",{\"0\":{\"1130\":1}}],[\"string对象的创建\",{\"0\":{\"1124\":1}}],[\"string实现了两个接口\",{\"1\":{\"1126\":1}}],[\"string创建\",{\"1\":{\"1124\":1}}],[\"string的操作\",{\"0\":{\"1136\":1}}],[\"string的运算\",{\"0\":{\"1134\":1}}],[\"string的compareto内置实现源码\",{\"1\":{\"746\":1}}],[\"string的方法\",{\"1\":{\"697\":1}}],[\"string的底层是将字符保存在char\",{\"1\":{\"692\":1}}],[\"string源码分析\",{\"0\":{\"692\":1}}],[\"stringbuilder的效率\",{\"0\":{\"695\":1}}],[\"stringbuilder对比\",{\"0\":{\"690\":1}}],[\"stringbuilder结构\",{\"1\":{\"688\":1}}],[\"stringbuilder是线程不安全的\",{\"1\":{\"687\":1}}],[\"stringbuilder和stringbuffer是一样的\",{\"1\":{\"687\":1}}],[\"stringbuilder\",{\"0\":{\"687\":1},\"1\":{\"683\":1,\"688\":1,\"690\":1,\"695\":1,\"696\":1}}],[\"stringbuffer不能使用\",{\"1\":{\"700\":1}}],[\"stringbuffer方法的特性\",{\"0\":{\"697\":1}}],[\"stringbuffer默认长度是16\",{\"1\":{\"694\":1}}],[\"stringbuffer扩容\",{\"0\":{\"694\":1}}],[\"stringbuffer底层也是保存到char数组中的\",{\"1\":{\"693\":1}}],[\"stringbuffer分析\",{\"0\":{\"693\":1}}],[\"stringbuffer结构\",{\"1\":{\"688\":1}}],[\"stringbuffer是线程安全的\",{\"1\":{\"687\":1}}],[\"stringbuffer很多方法与string是相同的\",{\"1\":{\"686\":1}}],[\"stringbuffer也是个字符串类\",{\"1\":{\"686\":1}}],[\"stringbuffer\",{\"0\":{\"683\":1,\"686\":1,\"690\":1,\"695\":1},\"1\":{\"57\":1,\"683\":1,\"688\":1,\"689\":10,\"690\":1,\"693\":1,\"695\":1,\"696\":1,\"699\":6,\"700\":5,\"701\":3,\"702\":3,\"703\":3,\"704\":3,\"1795\":4,\"2846\":1}}],[\"string有一个构造器是可以接受byte\",{\"1\":{\"674\":1}}],[\"string转基本数据类型\",{\"1\":{\"671\":1}}],[\"string转基本数据类型和基本数据类型转string\",{\"1\":{\"670\":1}}],[\"string类\",{\"1\":{\"1349\":1}}],[\"string类的方法\",{\"1\":{\"1136\":1}}],[\"string类的特性\",{\"0\":{\"1126\":1}}],[\"string类代表\",{\"1\":{\"1126\":1}}],[\"string类型添加失败\",{\"1\":{\"1957\":1}}],[\"string类型的数组\",{\"1\":{\"1676\":1}}],[\"string类型的参数转为包装类对象\",{\"1\":{\"775\":1}}],[\"string类型转基本数据类型\",{\"0\":{\"1446\":1}}],[\"string类型\",{\"1\":{\"1175\":1,\"2414\":1}}],[\"string类型是引用类型\",{\"1\":{\"1123\":1}}],[\"string类里也有很多涉及正则的方法\",{\"1\":{\"675\":1,\"988\":1}}],[\"string类有不可变性\",{\"1\":{\"664\":1}}],[\"string类对equals进行重写\",{\"1\":{\"652\":1}}],[\"stringstream\",{\"1\":{\"2463\":2}}],[\"strings\",{\"1\":{\"636\":3,\"1059\":1}}],[\"stringutils\",{\"1\":{\"554\":2}}],[\"string>>\",{\"1\":{\"971\":1}}],[\"string>对象操作redis\",{\"1\":{\"380\":1}}],[\"string>\",{\"1\":{\"380\":1,\"960\":2,\"1671\":1,\"1921\":1,\"1972\":1,\"1973\":1,\"2415\":1,\"2416\":1}}],[\"stringredistemplatetest\",{\"1\":{\"380\":1}}],[\"stringredistemplate\",{\"0\":{\"380\":1},\"1\":{\"380\":3}}],[\"string2\",{\"1\":{\"147\":1}}],[\"string\",{\"0\":{\"649\":1,\"690\":1,\"988\":1,\"1123\":1,\"1435\":1,\"1676\":1,\"2015\":1,\"2016\":2,\"2017\":1,\"2268\":1,\"2616\":1,\"2934\":1},\"1\":{\"57\":1,\"109\":1,\"127\":1,\"128\":1,\"147\":1,\"151\":4,\"155\":4,\"164\":1,\"197\":1,\"200\":4,\"208\":1,\"211\":1,\"259\":5,\"288\":1,\"290\":1,\"309\":1,\"320\":1,\"364\":3,\"380\":1,\"394\":3,\"398\":1,\"418\":7,\"419\":1,\"427\":2,\"444\":2,\"445\":1,\"446\":1,\"447\":2,\"452\":4,\"455\":2,\"468\":2,\"470\":2,\"471\":8,\"472\":5,\"473\":2,\"493\":1,\"498\":1,\"520\":1,\"521\":1,\"523\":2,\"525\":3,\"536\":3,\"549\":2,\"555\":1,\"619\":3,\"632\":1,\"633\":1,\"646\":3,\"649\":4,\"651\":1,\"652\":6,\"653\":3,\"655\":1,\"656\":2,\"657\":2,\"659\":1,\"660\":3,\"661\":2,\"662\":2,\"663\":1,\"665\":3,\"666\":3,\"667\":2,\"668\":4,\"669\":4,\"671\":15,\"672\":5,\"673\":3,\"674\":7,\"677\":2,\"678\":2,\"679\":4,\"680\":4,\"681\":2,\"682\":6,\"689\":1,\"690\":1,\"692\":4,\"693\":1,\"695\":1,\"700\":1,\"702\":1,\"703\":1,\"729\":1,\"732\":1,\"733\":1,\"734\":2,\"736\":1,\"737\":1,\"746\":2,\"749\":3,\"756\":8,\"774\":6,\"775\":1,\"776\":1,\"786\":5,\"788\":2,\"789\":2,\"790\":2,\"791\":2,\"794\":2,\"822\":2,\"823\":2,\"824\":2,\"829\":1,\"838\":1,\"840\":2,\"848\":1,\"850\":2,\"854\":1,\"855\":1,\"858\":2,\"859\":3,\"863\":2,\"868\":1,\"871\":2,\"872\":3,\"874\":1,\"884\":9,\"887\":5,\"890\":1,\"897\":1,\"905\":1,\"918\":2,\"947\":2,\"950\":1,\"951\":1,\"961\":2,\"963\":2,\"970\":1,\"987\":1,\"989\":6,\"990\":6,\"991\":3,\"992\":6,\"994\":1,\"996\":3,\"998\":3,\"999\":2,\"1000\":3,\"1001\":4,\"1008\":5,\"1038\":1,\"1058\":5,\"1059\":3,\"1060\":4,\"1124\":3,\"1125\":6,\"1134\":1,\"1135\":1,\"1162\":1,\"1184\":1,\"1186\":1,\"1204\":1,\"1218\":4,\"1239\":2,\"1246\":2,\"1258\":2,\"1259\":1,\"1267\":1,\"1270\":1,\"1280\":2,\"1282\":2,\"1287\":2,\"1292\":1,\"1295\":1,\"1296\":1,\"1302\":2,\"1304\":2,\"1316\":2,\"1319\":4,\"1330\":2,\"1352\":1,\"1353\":1,\"1382\":1,\"1384\":3,\"1401\":1,\"1408\":1,\"1420\":3,\"1426\":4,\"1427\":4,\"1432\":1,\"1433\":2,\"1434\":1,\"1445\":5,\"1446\":3,\"1457\":1,\"1466\":1,\"1467\":1,\"1475\":1,\"1481\":2,\"1497\":1,\"1526\":2,\"1556\":2,\"1560\":1,\"1575\":1,\"1578\":1,\"1579\":2,\"1580\":1,\"1587\":1,\"1600\":1,\"1609\":1,\"1612\":1,\"1621\":7,\"1627\":1,\"1630\":3,\"1641\":1,\"1646\":2,\"1652\":1,\"1675\":1,\"1680\":6,\"1716\":2,\"1720\":1,\"1728\":2,\"1729\":1,\"1737\":1,\"1740\":1,\"1757\":1,\"1760\":1,\"1768\":1,\"1784\":1,\"1795\":1,\"1804\":1,\"1810\":1,\"1817\":1,\"1821\":1,\"1854\":2,\"1855\":3,\"1916\":3,\"1939\":3,\"1940\":2,\"1958\":1,\"1967\":2,\"1968\":1,\"1980\":1,\"2013\":1,\"2055\":2,\"2071\":2,\"2082\":1,\"2086\":2,\"2096\":1,\"2099\":2,\"2104\":1,\"2118\":2,\"2124\":1,\"2127\":1,\"2133\":3,\"2148\":2,\"2151\":1,\"2152\":2,\"2166\":3,\"2167\":2,\"2193\":1,\"2194\":2,\"2195\":2,\"2213\":1,\"2219\":1,\"2225\":2,\"2232\":2,\"2238\":8,\"2239\":6,\"2242\":1,\"2244\":1,\"2252\":2,\"2253\":1,\"2255\":8,\"2257\":1,\"2258\":2,\"2280\":1,\"2281\":1,\"2282\":2,\"2286\":2,\"2292\":1,\"2293\":2,\"2296\":3,\"2306\":1,\"2307\":1,\"2308\":1,\"2311\":2,\"2312\":1,\"2313\":1,\"2315\":1,\"2330\":1,\"2344\":1,\"2371\":2,\"2407\":1,\"2413\":1,\"2427\":1,\"2428\":1,\"2432\":2,\"2433\":2,\"2457\":1,\"2462\":1,\"2463\":1,\"2469\":2,\"2545\":1,\"2547\":3,\"2548\":3,\"2551\":4,\"2558\":3,\"2562\":1,\"2564\":1,\"2567\":4,\"2569\":1,\"2573\":5,\"2575\":4,\"2577\":1,\"2581\":1,\"2582\":2,\"2597\":3,\"2599\":4,\"2600\":2,\"2601\":1,\"2603\":2,\"2604\":1,\"2612\":1,\"2613\":3,\"2620\":1,\"2621\":1,\"2624\":1,\"2625\":1,\"2634\":1,\"2635\":2,\"2639\":1,\"2653\":6,\"2656\":7,\"2682\":1,\"2683\":5,\"2686\":1,\"2687\":1,\"2688\":1,\"2689\":1,\"2690\":3,\"2691\":2,\"2799\":1,\"2803\":2,\"2811\":7,\"2814\":1,\"2820\":3,\"2846\":7,\"2848\":2,\"2849\":2,\"2858\":1,\"2862\":2,\"2869\":5,\"2872\":8,\"2884\":2,\"2900\":1,\"2902\":3,\"2916\":1,\"2934\":2,\"2938\":3,\"2940\":1,\"2942\":3,\"2989\":1,\"3029\":5,\"3041\":2,\"3044\":4,\"3047\":2,\"3049\":2,\"3054\":1,\"3056\":1,\"3057\":1,\"3064\":1,\"3065\":1,\"3066\":1,\"3067\":1,\"3086\":1,\"3206\":1,\"3209\":1,\"3211\":1,\"3212\":1,\"3214\":2,\"3215\":2,\"3217\":1,\"3218\":1,\"3220\":1,\"3221\":1,\"3225\":1,\"3226\":1,\"3227\":1,\"3231\":1,\"3233\":4,\"3234\":3,\"3237\":1,\"3240\":1,\"3242\":1,\"3244\":1,\"3249\":1,\"3253\":1,\"3547\":1}}],[\"streaming\",{\"0\":{\"3256\":1}}],[\"stream中的每个元素都会作为参数传递给方法中\",{\"1\":{\"2463\":1}}],[\"stream操作的方法\",{\"1\":{\"2452\":1}}],[\"stream2\",{\"1\":{\"2448\":1}}],[\"stream1\",{\"1\":{\"2448\":1}}],[\"stream有多个重载\",{\"1\":{\"2447\":1}}],[\"stream<r>\",{\"1\":{\"2467\":1}}],[\"stream<employee>\",{\"1\":{\"2458\":1,\"2459\":1,\"2460\":1,\"2461\":1}}],[\"stream<e>\",{\"1\":{\"2444\":1,\"2445\":1}}],[\"stream<integer>\",{\"1\":{\"2448\":1}}],[\"stream<\",{\"1\":{\"2448\":1,\"2467\":1}}],[\"stream<t>\",{\"1\":{\"2446\":1,\"2448\":1,\"2450\":1,\"2451\":1}}],[\"stream<string>\",{\"1\":{\"2444\":1,\"2445\":1,\"2463\":1}}],[\"stream的操作分为中间操作和终止操作\",{\"1\":{\"2452\":1}}],[\"stream的操作步骤\",{\"0\":{\"2440\":1}}],[\"stream的特点\",{\"0\":{\"2441\":1}}],[\"stream的实例化\",{\"1\":{\"2440\":1}}],[\"stream的本质\",{\"0\":{\"2438\":1}}],[\"streamtest\",{\"1\":{\"2084\":1}}],[\"stream\",{\"0\":{\"2434\":1,\"2435\":1,\"2436\":1,\"2437\":1,\"2439\":1,\"2442\":1,\"2452\":1},\"1\":{\"11\":1,\"819\":1,\"1034\":1,\"1059\":1,\"2021\":2,\"2025\":1,\"2210\":1,\"2435\":2,\"2436\":5,\"2439\":2,\"2444\":3,\"2446\":3,\"2447\":3,\"2448\":2,\"2449\":2,\"2450\":1,\"2451\":1,\"2458\":3,\"2459\":3,\"2460\":3,\"2461\":3,\"2463\":2,\"2470\":1,\"2471\":2,\"2474\":1,\"2475\":1,\"2477\":1,\"2478\":1,\"2479\":1,\"2480\":1,\"2481\":1,\"2482\":1,\"2483\":1,\"2484\":1,\"2485\":1,\"2487\":1,\"2488\":1,\"2489\":1,\"2491\":2}}],[\"self\",{\"1\":{\"3670\":1}}],[\"selectbyname\",{\"1\":{\"3006\":1}}],[\"selectbyid\",{\"1\":{\"375\":1,\"623\":1}}],[\"select天然就可以批量操作\",{\"1\":{\"2614\":1}}],[\"selectpage\",{\"1\":{\"627\":1,\"628\":1,\"636\":2}}],[\"selectimports\",{\"1\":{\"523\":1,\"525\":1,\"536\":1}}],[\"selectimports方法有个annotationmetadata类型的参数\",{\"1\":{\"523\":1}}],[\"selectlist\",{\"1\":{\"375\":1,\"623\":1,\"631\":1,\"632\":1,\"633\":1}}],[\"select\",{\"1\":{\"365\":2,\"2558\":1,\"2559\":1,\"2597\":1,\"2601\":2,\"2604\":1,\"2613\":1,\"2639\":1,\"2656\":4,\"2688\":1,\"2689\":1,\"2690\":1,\"2691\":2,\"2822\":2}}],[\"segment\",{\"1\":{\"3513\":1}}],[\"semi\",{\"1\":{\"3465\":1,\"3466\":1,\"3467\":1,\"3468\":1,\"3469\":1}}],[\"searchhit\",{\"1\":{\"3226\":1,\"3227\":1,\"3231\":1,\"3234\":1,\"3237\":1,\"3240\":1,\"3242\":1,\"3244\":1,\"3253\":1}}],[\"searchhits\",{\"1\":{\"3226\":1,\"3227\":1,\"3231\":1,\"3234\":1,\"3237\":1,\"3240\":1,\"3242\":1,\"3244\":1,\"3253\":1}}],[\"searchresponse\",{\"1\":{\"3226\":1,\"3227\":1,\"3231\":1,\"3234\":1,\"3237\":1,\"3240\":1,\"3242\":1,\"3244\":1,\"3249\":1,\"3253\":1}}],[\"searchrequest\",{\"1\":{\"3226\":3,\"3227\":3,\"3231\":3,\"3234\":3,\"3237\":3,\"3240\":3,\"3242\":3,\"3244\":3,\"3249\":3,\"3253\":3}}],[\"searchsourcebuilder对象调用aggregation方法可以进行聚合操作\",{\"1\":{\"3248\":1}}],[\"searchsourcebuilder\",{\"1\":{\"3226\":2,\"3227\":1,\"3228\":1,\"3230\":2,\"3231\":2,\"3233\":2,\"3234\":2,\"3236\":2,\"3237\":2,\"3239\":2,\"3240\":2,\"3242\":2,\"3244\":2,\"3248\":2,\"3249\":2,\"3250\":2,\"3252\":2,\"3253\":2}}],[\"search\",{\"0\":{\"3091\":1},\"1\":{\"3108\":1,\"3142\":1,\"3154\":1,\"3160\":1,\"3162\":1,\"3183\":1,\"3186\":1,\"3188\":1,\"3189\":1,\"3226\":1,\"3227\":1,\"3231\":1,\"3234\":1,\"3237\":1,\"3240\":1,\"3242\":1,\"3244\":1,\"3249\":1,\"3253\":1}}],[\"seasons\",{\"1\":{\"1630\":2,\"1631\":2}}],[\"seasondesc\",{\"1\":{\"1621\":6}}],[\"seasonname+\",{\"1\":{\"1630\":1}}],[\"seasonname\",{\"1\":{\"1621\":6,\"1630\":4}}],[\"season\",{\"1\":{\"1621\":10,\"1622\":2}}],[\"seata\",{\"1\":{\"10\":1,\"11\":1}}],[\"separator\",{\"1\":{\"2013\":1,\"2079\":1}}],[\"sep\",{\"1\":{\"1433\":1}}],[\"sextype\",{\"1\":{\"3029\":3}}],[\"sex>\",{\"1\":{\"3027\":1,\"3030\":1}}],[\"sex\",{\"1\":{\"1352\":2,\"3025\":2,\"3029\":1}}],[\"seesion就自动删除了\",{\"1\":{\"3073\":1}}],[\"seed\",{\"1\":{\"2450\":2,\"3268\":1,\"3269\":2,\"3270\":1,\"3271\":1,\"3337\":1,\"3339\":2,\"3355\":1}}],[\"seekablebytechannel\",{\"1\":{\"2168\":1}}],[\"seek\",{\"1\":{\"2132\":1,\"2139\":1}}],[\"seek方法\",{\"0\":{\"2132\":1}}],[\"see\",{\"1\":{\"1059\":2,\"1060\":1,\"3757\":1}}],[\"se标准类库\",{\"1\":{\"1026\":1}}],[\"sendredirect\",{\"1\":{\"2907\":1,\"2916\":1}}],[\"send\",{\"1\":{\"2231\":1,\"2233\":1}}],[\"sendcodetosms\",{\"1\":{\"471\":2,\"473\":1}}],[\"sendto\",{\"1\":{\"455\":2}}],[\"sendmessage\",{\"1\":{\"452\":1}}],[\"sendmessageserver\",{\"1\":{\"445\":1,\"446\":1}}],[\"sendmsg\",{\"1\":{\"446\":2}}],[\"senddirectmsg\",{\"1\":{\"445\":1,\"446\":1}}],[\"sentinel\",{\"1\":{\"10\":1,\"11\":1}}],[\"serlvlet\",{\"1\":{\"3003\":1}}],[\"serialized\",{\"1\":{\"3547\":1}}],[\"serializable>\",{\"1\":{\"2448\":1}}],[\"serializable接口\",{\"1\":{\"1126\":1}}],[\"serializable\",{\"1\":{\"688\":2,\"714\":1,\"715\":1,\"716\":1,\"723\":1,\"786\":1,\"832\":1,\"843\":1,\"994\":1,\"2153\":1,\"2155\":1,\"2238\":1,\"2638\":1}}],[\"serial\",{\"1\":{\"1678\":1}}],[\"serialversionuid\",{\"0\":{\"2158\":1},\"1\":{\"688\":2,\"1612\":1,\"1678\":1,\"2153\":1,\"2155\":1,\"2158\":3}}],[\"serserver\",{\"1\":{\"439\":1}}],[\"service方法中的参数是servletrequest和servletresponse\",{\"1\":{\"2835\":1}}],[\"service方法中有servletrequest和servletresponse两个参数\",{\"1\":{\"2785\":1}}],[\"service方法被调用执行\",{\"1\":{\"2831\":1}}],[\"service方法的参数\",{\"1\":{\"2830\":1}}],[\"serviceimpl层\",{\"1\":{\"637\":1}}],[\"serviceimpl<bookdao\",{\"1\":{\"636\":1,\"637\":1}}],[\"service层\",{\"1\":{\"637\":1}}],[\"service层也有很多通用的curd方法\",{\"1\":{\"637\":1}}],[\"service作为业务层接口\",{\"1\":{\"634\":1}}],[\"service修正功能\",{\"1\":{\"614\":1}}],[\"service开发\",{\"1\":{\"614\":1}}],[\"service\",{\"0\":{\"471\":1,\"634\":1,\"2801\":1,\"3765\":1},\"1\":{\"349\":1,\"445\":1,\"452\":1,\"471\":3,\"508\":1,\"589\":1,\"634\":1,\"636\":1,\"637\":1,\"1539\":1,\"1817\":6,\"2779\":1,\"2799\":2,\"2801\":2,\"2814\":1,\"3008\":1,\"3013\":1}}],[\"serverless\",{\"0\":{\"3543\":1}}],[\"server>\",{\"1\":{\"3019\":1}}],[\"server模板\",{\"0\":{\"2746\":1}}],[\"servertimezone=utc\",{\"1\":{\"356\":1,\"362\":1,\"368\":1,\"372\":1,\"617\":1}}],[\"servertimeout\",{\"1\":{\"215\":1}}],[\"server<\",{\"1\":{\"319\":1}}],[\"serversocket\",{\"1\":{\"2221\":1,\"2223\":2,\"2225\":6,\"2244\":1}}],[\"serversocketchannel\",{\"1\":{\"2161\":1}}],[\"servers\",{\"1\":{\"208\":1,\"211\":2,\"214\":1,\"215\":1,\"216\":1,\"219\":1,\"220\":1}}],[\"serverconfig\",{\"1\":{\"207\":1,\"208\":1,\"211\":1,\"215\":1,\"216\":1,\"219\":1,\"220\":1}}],[\"server\",{\"0\":{\"2750\":1},\"1\":{\"95\":1,\"139\":2,\"152\":1,\"256\":1,\"259\":1,\"272\":3,\"302\":1,\"304\":2,\"319\":1,\"446\":2,\"2225\":1,\"2226\":1,\"2705\":1,\"2716\":1,\"2746\":1,\"2750\":1,\"2770\":1,\"3352\":3,\"3563\":1,\"3656\":1}}],[\"servlet会创建一个响应头来返回创建的sessionid\",{\"1\":{\"3068\":1}}],[\"servlet用来删除还未到期的cook信息\",{\"1\":{\"3053\":1}}],[\"servlet2\",{\"0\":{\"3047\":1}}],[\"servlet1创建并发送cookie\",{\"0\":{\"3049\":1}}],[\"servlet1\",{\"0\":{\"3046\":1}}],[\"servlet规范中定义的一种特殊类\",{\"1\":{\"2959\":1}}],[\"servlet监听器\",{\"0\":{\"2959\":1}}],[\"servletcontext对象被销毁了\",{\"1\":{\"2973\":1}}],[\"servletcontext对象被销毁之前会调用该方法\",{\"1\":{\"2972\":1}}],[\"servletcontext对象被创建了\",{\"1\":{\"2973\":1}}],[\"servletcontext对象创建后会调用该方法\",{\"1\":{\"2972\":1}}],[\"servletcontext对象代表了整个web应用\",{\"1\":{\"2928\":1}}],[\"servletcontextattributeevent对象代表属性变化事件\",{\"1\":{\"2965\":1}}],[\"servletcontextattributeevent\",{\"1\":{\"2965\":3}}],[\"servletcontextattributelistener\",{\"0\":{\"2965\":1}}],[\"servletcontext销毁时调用\",{\"1\":{\"2962\":1}}],[\"servletcontext创建时调用\",{\"1\":{\"2962\":1}}],[\"servletcontextevent对象代表从servletcontext对象身上捕获到的事件\",{\"1\":{\"2962\":1}}],[\"servletcontextevent\",{\"1\":{\"2962\":2,\"2972\":2,\"2973\":2}}],[\"servletcontextlistener接口的方法\",{\"0\":{\"2972\":1}}],[\"servletcontextlistener\",{\"0\":{\"2962\":1,\"2970\":1},\"1\":{\"2973\":1,\"2974\":1}}],[\"servletcontext1\",{\"1\":{\"2930\":1}}],[\"servletcontext\",{\"0\":{\"2927\":1},\"1\":{\"2925\":1,\"2930\":5,\"2934\":1,\"2938\":1,\"2940\":1,\"2942\":1}}],[\"servletconfig对象\",{\"1\":{\"2804\":1}}],[\"servletconfig\",{\"1\":{\"2799\":2,\"2800\":2,\"2804\":7}}],[\"servlet中的request请求对象\",{\"1\":{\"2921\":1}}],[\"servletoutputstream\",{\"1\":{\"2885\":1,\"2893\":1,\"2894\":1,\"2895\":1,\"2896\":1}}],[\"servletinputstream\",{\"1\":{\"2854\":1}}],[\"servletpath\",{\"1\":{\"2846\":2}}],[\"servlet类中定义的路由\",{\"1\":{\"2845\":1}}],[\"servlet类中的service方法\",{\"1\":{\"2837\":1}}],[\"servlet类的选择\",{\"0\":{\"2809\":1}}],[\"servletdemo6\",{\"1\":{\"2903\":2}}],[\"servletdemo5\",{\"1\":{\"2903\":1}}],[\"servletdemo3\",{\"1\":{\"2846\":2}}],[\"servletdemo\",{\"1\":{\"2819\":1}}],[\"servletdemo2\",{\"1\":{\"2812\":1}}],[\"servletdemo1实现了servlet接口\",{\"1\":{\"2785\":1}}],[\"servletdemo1\",{\"1\":{\"2779\":1,\"2780\":1,\"2804\":1}}],[\"servlet接口有一个实现类\",{\"1\":{\"2806\":1}}],[\"servlet接口一共有五个方法\",{\"1\":{\"2799\":1}}],[\"servlet对象会被销毁\",{\"1\":{\"2802\":1}}],[\"servlet是单例的\",{\"1\":{\"2795\":1}}],[\"servlet是javaee规范之一\",{\"1\":{\"2770\":1}}],[\"servlet是javaweb最为核心的内容\",{\"1\":{\"2770\":1}}],[\"servlet运行在servlet容器\",{\"1\":{\"2792\":1}}],[\"servlet的体系结构\",{\"0\":{\"2806\":1}}],[\"servlet的init方法\",{\"1\":{\"2795\":1}}],[\"servlet的对象\",{\"0\":{\"2791\":1}}],[\"servlet的本质\",{\"0\":{\"2772\":1}}],[\"servlet方法由web服务器调用\",{\"1\":{\"2786\":1}}],[\"servlet由web服务器创建\",{\"1\":{\"2786\":1}}],[\"servlet执行流程概述\",{\"0\":{\"2784\":1}}],[\"servletexception\",{\"1\":{\"2779\":1,\"2799\":2,\"2800\":1,\"2801\":1,\"2804\":1,\"2812\":2,\"2814\":1,\"2846\":2,\"2849\":1,\"2850\":1,\"2858\":1,\"2862\":2,\"2872\":2,\"2873\":2,\"2888\":1,\"2903\":2,\"2909\":1,\"2910\":1,\"2945\":2}}],[\"servletresponse封装的是响应数据\",{\"1\":{\"2785\":1}}],[\"servletresponse\",{\"1\":{\"2779\":1,\"2799\":1,\"2801\":2,\"2814\":3,\"2900\":1,\"2945\":1,\"3042\":1}}],[\"servletrequestattributeevent对象代表属性变化事件\",{\"1\":{\"2967\":1}}],[\"servletrequestattributeevent\",{\"1\":{\"2967\":3}}],[\"servletrequestattributelistener\",{\"0\":{\"2967\":1}}],[\"servletrequest对象销毁时调用\",{\"1\":{\"2964\":1}}],[\"servletrequest对象创建时调用\",{\"1\":{\"2964\":1}}],[\"servletrequestevent对象代表从httpservletrequest对象身上捕获到的事件\",{\"1\":{\"2964\":1}}],[\"servletrequestevent\",{\"1\":{\"2964\":2}}],[\"servletrequestlistener\",{\"0\":{\"2964\":1}}],[\"servletrequest和httpservletrequest是继承关系\",{\"1\":{\"2836\":1}}],[\"servletrequest和httpservletrequest都是java提供的\",{\"1\":{\"2836\":1}}],[\"servletrequest封装的是请求数据\",{\"1\":{\"2785\":1}}],[\"servletrequest\",{\"1\":{\"2779\":1,\"2799\":1,\"2801\":2,\"2814\":3,\"2900\":1,\"2930\":1,\"2945\":1,\"3043\":1,\"3062\":1}}],[\"servlet实现类会被自动访问\",{\"1\":{\"2777\":1}}],[\"servlet包是tomcat\",{\"1\":{\"2773\":1}}],[\"servlet就是一个接口\",{\"1\":{\"2772\":1}}],[\"servlet介绍\",{\"0\":{\"2769\":1}}],[\"servlet需要依赖tomcat才能运行\",{\"1\":{\"2698\":1}}],[\"servlet容器都会调用servlet的service\",{\"1\":{\"2797\":1}}],[\"servlet容器\",{\"1\":{\"2698\":1}}],[\"servlet3\",{\"1\":{\"1637\":1}}],[\"servlet层\",{\"1\":{\"639\":1}}],[\"servlet\",{\"0\":{\"2783\":1,\"2792\":1,\"2799\":1,\"2805\":1,\"2858\":1,\"2872\":1,\"3780\":1},\"1\":{\"11\":1,\"1532\":1,\"2695\":1,\"2769\":1,\"2770\":1,\"2773\":1,\"2779\":2,\"2780\":1,\"2799\":1,\"2801\":1,\"2804\":1,\"2819\":1,\"2945\":2,\"2955\":1,\"3002\":1,\"3039\":3}}],[\"sequence>\",{\"1\":{\"3029\":4}}],[\"sequence\",{\"1\":{\"3029\":2}}],[\"sequences与正则表达式进行匹配\",{\"1\":{\"987\":1}}],[\"seq\",{\"1\":{\"428\":1,\"429\":1,\"431\":1,\"432\":1,\"3135\":1,\"3141\":1,\"3144\":1,\"3149\":1,\"3159\":1}}],[\"sec\",{\"1\":{\"2850\":7}}],[\"secondaries\",{\"1\":{\"3644\":1}}],[\"secondary表示副节点\",{\"1\":{\"3673\":1}}],[\"secondarydelaysecs\",{\"1\":{\"3667\":1}}],[\"secondary\",{\"1\":{\"3642\":1,\"3652\":1,\"3664\":1,\"3673\":1}}],[\"second\",{\"1\":{\"718\":3,\"719\":2,\"3154\":1}}],[\"seconds\",{\"1\":{\"308\":1,\"501\":1,\"3053\":1}}],[\"securityexception\",{\"1\":{\"848\":1,\"849\":1,\"850\":1,\"852\":1,\"853\":1,\"854\":1,\"855\":1,\"856\":1,\"857\":1,\"858\":1,\"859\":1,\"866\":1}}],[\"security\",{\"1\":{\"418\":7,\"2079\":2,\"3110\":4,\"3305\":1,\"3307\":5,\"3327\":5,\"3328\":1,\"3337\":4,\"3355\":8,\"3717\":1,\"3728\":1}}],[\"session是用来保存用户登录后的数据\",{\"1\":{\"3079\":1}}],[\"session占用服务器资源\",{\"1\":{\"3077\":1}}],[\"session默认30分钟\",{\"1\":{\"3077\":1}}],[\"session默认失效时间\",{\"1\":{\"3073\":1}}],[\"session无大小限制\",{\"1\":{\"3077\":1}}],[\"session安全\",{\"1\":{\"3077\":1}}],[\"session可以存储任意类型\",{\"1\":{\"3075\":1}}],[\"session用于存储一次会话的多次请求的数据\",{\"1\":{\"3075\":1}}],[\"session对象调用invalidate\",{\"1\":{\"3074\":1}}],[\"session活化\",{\"1\":{\"3071\":1}}],[\"session的特点\",{\"0\":{\"3075\":1}}],[\"session的销毁\",{\"0\":{\"3072\":1}}],[\"session的钝化\",{\"1\":{\"3071\":1}}],[\"session的钝化和活化\",{\"0\":{\"3071\":1}}],[\"session的有效期\",{\"0\":{\"3069\":1}}],[\"session的存在是依赖与cookie的\",{\"1\":{\"3068\":1}}],[\"session的原理\",{\"0\":{\"3068\":1}}],[\"session的工作流程\",{\"0\":{\"3061\":1}}],[\"sessionid是session的唯一标识id\",{\"1\":{\"3067\":1}}],[\"sessiondidactivate\",{\"1\":{\"2969\":1}}],[\"sessiondestroyed\",{\"1\":{\"2963\":1}}],[\"sessionwillpassivate\",{\"1\":{\"2969\":1}}],[\"sessioncreated\",{\"1\":{\"2963\":1}}],[\"session域中数据的监听器\",{\"1\":{\"2960\":1}}],[\"session域对象\",{\"0\":{\"2923\":1}}],[\"session也会消失\",{\"1\":{\"2924\":1}}],[\"session\",{\"0\":{\"3059\":1},\"1\":{\"342\":2,\"2923\":1,\"3037\":1,\"3062\":1,\"3070\":1,\"3073\":2,\"3077\":1}}],[\"sessions\",{\"1\":{\"342\":1}}],[\"setpath\",{\"1\":{\"3056\":1}}],[\"setpriority\",{\"1\":{\"1735\":1,\"1737\":1}}],[\"setproperty\",{\"1\":{\"197\":1,\"1939\":1,\"2545\":2}}],[\"setmaxage\",{\"1\":{\"3053\":2,\"3070\":1}}],[\"setheader\",{\"1\":{\"2884\":1,\"2889\":1,\"2907\":1,\"2909\":1}}],[\"sethttpclientconfigcallback\",{\"1\":{\"418\":1}}],[\"setblob\",{\"1\":{\"2611\":1,\"2612\":1}}],[\"setint\",{\"1\":{\"2570\":1,\"2613\":1}}],[\"setin\",{\"1\":{\"2117\":1}}],[\"setid\",{\"1\":{\"623\":1}}],[\"setobject\",{\"1\":{\"2577\":2,\"2581\":1,\"2597\":1,\"2600\":1,\"2603\":1,\"2612\":3,\"2625\":1,\"2634\":1,\"2653\":4}}],[\"setout\",{\"1\":{\"2117\":1,\"2121\":1}}],[\"setout方法对默认设备进行改变\",{\"1\":{\"2117\":1}}],[\"setordere\",{\"1\":{\"1967\":1,\"1968\":1}}],[\"set数据存储的特点\",{\"0\":{\"1882\":1}}],[\"set接口中没有额外定义新的方法\",{\"1\":{\"1888\":1,\"1901\":1}}],[\"set接口的方法\",{\"0\":{\"1888\":1}}],[\"set接口的主要实现类\",{\"1\":{\"1883\":1}}],[\"set接口\",{\"1\":{\"1881\":1}}],[\"set接口是collection的子接口\",{\"1\":{\"1881\":1}}],[\"set和list\",{\"1\":{\"1830\":1}}],[\"setdomain\",{\"1\":{\"3057\":1}}],[\"setdate\",{\"1\":{\"2570\":1,\"2573\":1}}],[\"setdaemon\",{\"1\":{\"1711\":1}}],[\"setdefaultrwconcern\",{\"1\":{\"3675\":2}}],[\"setdefaultcredentialsprovider\",{\"1\":{\"418\":1}}],[\"setdescription\",{\"1\":{\"623\":2}}],[\"setxxx方法填充上述占位符\",{\"1\":{\"2570\":1}}],[\"setxxx方法才能访问\",{\"1\":{\"1367\":1}}],[\"setxxx来获取和操作\",{\"1\":{\"1361\":1}}],[\"setxxx\",{\"1\":{\"1312\":1,\"1531\":1,\"2569\":3,\"2570\":4}}],[\"setxxx和get方法来访问和操作属性\",{\"1\":{\"1304\":1}}],[\"set<employee>\",{\"1\":{\"2491\":1}}],[\"set<map\",{\"1\":{\"971\":2,\"1958\":1}}],[\"set<string>\",{\"1\":{\"969\":1}}],[\"set<k>\",{\"1\":{\"969\":1}}],[\"set<t>\",{\"1\":{\"939\":2}}],[\"setattribute\",{\"1\":{\"2902\":1,\"2903\":1,\"2920\":1,\"2926\":1,\"2938\":2,\"3064\":1}}],[\"setautocommit\",{\"0\":{\"2628\":1},\"1\":{\"2625\":1,\"2628\":1,\"2635\":2,\"2639\":1}}],[\"setaccessible启动和禁用访问安全检查的开关\",{\"1\":{\"2317\":1}}],[\"setaccessible\",{\"0\":{\"866\":1,\"875\":1,\"878\":1,\"2317\":1},\"1\":{\"864\":1,\"865\":1,\"866\":1,\"875\":1,\"877\":1,\"878\":1,\"2258\":3,\"2306\":1,\"2311\":2,\"2315\":1,\"2317\":1,\"2600\":1,\"2603\":1,\"2653\":2}}],[\"setage\",{\"1\":{\"403\":1,\"554\":1,\"1304\":2,\"1368\":2,\"3214\":1}}],[\"set方法访问\",{\"1\":{\"1728\":1}}],[\"set方法\",{\"1\":{\"620\":1}}],[\"setname\",{\"1\":{\"554\":1,\"623\":2,\"1727\":1,\"1728\":2,\"2255\":1,\"3214\":1}}],[\"sets\",{\"1\":{\"3653\":1,\"3656\":4,\"3657\":4,\"3658\":4,\"3727\":3,\"3728\":1}}],[\"setstatus\",{\"1\":{\"2883\":1,\"2907\":1,\"2909\":1}}],[\"setstring\",{\"1\":{\"2570\":1,\"2573\":2,\"2621\":1,\"2624\":1}}],[\"setscale\",{\"0\":{\"783\":1},\"1\":{\"783\":3}}],[\"setscope\",{\"1\":{\"527\":1}}],[\"setsslhostnameverifier\",{\"1\":{\"418\":1}}],[\"setsslcontext\",{\"1\":{\"418\":1}}],[\"setcontenttype\",{\"1\":{\"2889\":1,\"2890\":1,\"2896\":1}}],[\"setcorepoolsize\",{\"1\":{\"1817\":1}}],[\"setcharacterencoding\",{\"1\":{\"2877\":1,\"2878\":1,\"2880\":1}}],[\"setcredentials\",{\"1\":{\"418\":1}}],[\"setcertificateentry\",{\"1\":{\"418\":1}}],[\"setgender\",{\"1\":{\"403\":1,\"3214\":1}}],[\"setusername\",{\"1\":{\"403\":1}}],[\"setuserid\",{\"1\":{\"403\":1}}],[\"set\",{\"0\":{\"865\":1,\"951\":1,\"1879\":1,\"1880\":1,\"1901\":1},\"1\":{\"379\":1,\"406\":1,\"407\":1,\"567\":1,\"865\":2,\"903\":1,\"929\":1,\"951\":2,\"969\":2,\"1826\":1,\"1830\":2,\"1881\":1,\"1883\":2,\"1886\":1,\"1902\":11,\"1905\":6,\"1906\":1,\"1935\":1,\"1942\":1,\"2258\":1,\"2306\":1,\"2310\":1,\"2490\":1,\"2577\":1,\"2582\":1,\"2600\":1,\"2603\":1,\"2635\":2,\"2653\":2,\"2656\":1,\"3049\":1,\"3068\":1,\"3267\":2,\"3355\":3,\"3465\":2,\"3466\":2,\"3467\":2,\"3468\":2,\"3469\":3,\"3503\":2,\"3538\":1,\"3639\":1,\"3664\":1,\"3670\":1,\"3671\":1,\"3675\":1}}],[\"settransactionisolation\",{\"0\":{\"2638\":1},\"1\":{\"2638\":1,\"2639\":1}}],[\"settype\",{\"1\":{\"623\":2}}],[\"setter\",{\"1\":{\"155\":1,\"200\":1,\"620\":1,\"3215\":1}}],[\"settings\",{\"1\":{\"423\":1,\"578\":2,\"3124\":1,\"3283\":1,\"3355\":1,\"3379\":1,\"3381\":1,\"3393\":2,\"3453\":1,\"3454\":1,\"3509\":2,\"3667\":1,\"3668\":1}}],[\"setting中勾选\",{\"1\":{\"189\":1}}],[\"setting\",{\"1\":{\"103\":1,\"574\":1,\"3328\":1}}],[\"se\",{\"1\":{\"11\":1,\"1011\":1,\"2966\":3,\"2969\":2}}],[\"jump\",{\"1\":{\"3464\":1}}],[\"junit不是简单的通过注解来使用的\",{\"1\":{\"224\":1}}],[\"junit的使用方式\",{\"0\":{\"224\":1}}],[\"junit默认已经被springboot集成了\",{\"1\":{\"222\":1}}],[\"junit\",{\"0\":{\"222\":1,\"594\":1},\"1\":{\"868\":2}}],[\"jpa\",{\"1\":{\"3746\":1}}],[\"jpa是基于注解的\",{\"1\":{\"1636\":1}}],[\"jpeg格式\",{\"1\":{\"2932\":1}}],[\"jpeg\",{\"1\":{\"2932\":1,\"2934\":1}}],[\"jpg\",{\"1\":{\"812\":2,\"813\":1,\"814\":1,\"819\":1,\"823\":1,\"2045\":1,\"2069\":4,\"2084\":2,\"2136\":2,\"2612\":1,\"2613\":1,\"2894\":1,\"2895\":1,\"2934\":1,\"2941\":1,\"3141\":1,\"3142\":2,\"3159\":1,\"3160\":2}}],[\"j++\",{\"1\":{\"1198\":1,\"1202\":1,\"1203\":1,\"1204\":2,\"1240\":1}}],[\"j\",{\"1\":{\"933\":2,\"1198\":4,\"1202\":2,\"1203\":4,\"1204\":6,\"1240\":3,\"1426\":1,\"3220\":1,\"3231\":1,\"3234\":1,\"3237\":1,\"3240\":1,\"3245\":1}}],[\"jre\",{\"0\":{\"1024\":1,\"1026\":1},\"1\":{\"884\":1,\"1026\":2,\"1027\":1,\"2260\":1,\"2989\":1}}],[\"jin\",{\"1\":{\"850\":2,\"2286\":2}}],[\"jinno\",{\"1\":{\"410\":1,\"546\":1,\"644\":1,\"751\":2,\"757\":2,\"910\":2,\"1056\":1,\"1218\":1,\"1282\":1,\"1316\":1,\"1352\":1,\"1411\":1,\"1842\":1,\"1851\":1,\"1940\":1,\"1958\":2,\"2405\":1,\"2414\":1,\"2469\":6,\"2570\":1,\"3226\":1}}],[\"journal\",{\"1\":{\"3562\":1,\"3656\":1}}],[\"joins\",{\"1\":{\"3545\":1}}],[\"join\",{\"1\":{\"1727\":1,\"1729\":2,\"3305\":1,\"3307\":2,\"3327\":2,\"3328\":1,\"3355\":2,\"3542\":1}}],[\"jobs=j\",{\"1\":{\"960\":2}}],[\"jobs\",{\"1\":{\"751\":2,\"757\":2,\"961\":3,\"964\":1}}],[\"joda\",{\"1\":{\"709\":1}}],[\"jolokia\",{\"1\":{\"342\":2}}],[\"j2cache是一个缓存整合框架\",{\"1\":{\"489\":1}}],[\"j2cache\",{\"0\":{\"489\":1}}],[\"jcache\",{\"1\":{\"464\":1}}],[\"jmslistener定义当前方法监听activemq中指定名称的消息队列\",{\"1\":{\"455\":1}}],[\"jmslistener\",{\"1\":{\"455\":2,\"456\":1}}],[\"jmsmessagingtemplate\",{\"1\":{\"452\":1}}],[\"jms\",{\"1\":{\"451\":1}}],[\"jmx\",{\"1\":{\"342\":1}}],[\"jerry\",{\"1\":{\"548\":1,\"1133\":1,\"1905\":2,\"1935\":1,\"1958\":1,\"2258\":1,\"2469\":6}}],[\"jery\",{\"1\":{\"541\":1}}],[\"jetbrains\",{\"1\":{\"2755\":1}}],[\"jetcache设定了本地缓存与远程缓存的多级缓存解决方案\",{\"1\":{\"488\":1}}],[\"jetcache对springcache进行了封装\",{\"1\":{\"487\":1}}],[\"jetcache可以替代springcache自成体系\",{\"1\":{\"487\":1}}],[\"jetcache是阿里巴巴开发的产品\",{\"1\":{\"487\":1}}],[\"jetcache\",{\"0\":{\"487\":1}}],[\"jetty<\",{\"1\":{\"135\":1}}],[\"jetty\",{\"1\":{\"135\":1}}],[\"jedis\",{\"1\":{\"383\":1,\"384\":2}}],[\"jedis连接redis服务器是直连模式\",{\"1\":{\"382\":1}}],[\"jakarta\",{\"1\":{\"3092\":1}}],[\"jack\",{\"1\":{\"1905\":3,\"1935\":1}}],[\"jacksonjsonpmapper\",{\"1\":{\"418\":2,\"420\":1}}],[\"jackson\",{\"1\":{\"413\":1,\"418\":1,\"3216\":1}}],[\"japan\",{\"1\":{\"1475\":2}}],[\"jan\",{\"1\":{\"501\":1}}],[\"jar指令来启动\",{\"1\":{\"2998\":1}}],[\"jar也都可以\",{\"1\":{\"2996\":1}}],[\"jar里有的war里也都有\",{\"1\":{\"2996\":1}}],[\"jar为文件扩展名\",{\"1\":{\"2979\":1}}],[\"jar文件内的文件名是unicode文本\",{\"1\":{\"2979\":1}}],[\"jar文件是一种归档文件\",{\"1\":{\"2979\":1}}],[\"jar文件\",{\"1\":{\"2979\":1}}],[\"jar文件中查看对应信息\",{\"1\":{\"283\":1}}],[\"jar了\",{\"1\":{\"2774\":1}}],[\"jar中的class文件时\",{\"1\":{\"2539\":1}}],[\"jar>java>net>inetaddress\",{\"1\":{\"2190\":1}}],[\"jar>java>util>regex>matcher\",{\"1\":{\"1002\":1}}],[\"jar>java>util>regex>pattern\",{\"1\":{\"993\":1}}],[\"jar>java>util>function\",{\"1\":{\"972\":1}}],[\"jar>java>util>map\",{\"1\":{\"953\":1}}],[\"jar>java>util>list\",{\"1\":{\"941\":1}}],[\"jar>java>util>collections\",{\"1\":{\"927\":1}}],[\"jar>java>util>scanner\",{\"1\":{\"885\":1,\"1006\":1}}],[\"jar>java>io>bufferedwriter\",{\"1\":{\"2079\":1}}],[\"jar>java>io>bufferedreader\",{\"1\":{\"2078\":1}}],[\"jar>java>io>bufferedoutputstream\",{\"1\":{\"2077\":1}}],[\"jar>java>io>bufferedinputstream\",{\"1\":{\"2076\":1}}],[\"jar>java>io>outputstreamr\",{\"1\":{\"820\":1}}],[\"jar>java>io>writer\",{\"1\":{\"820\":1}}],[\"jar>java>io>reader\",{\"1\":{\"812\":1}}],[\"jar>java>io>inputstream\",{\"1\":{\"812\":1}}],[\"jar>java>io>file>file\",{\"1\":{\"786\":1}}],[\"jar>java>math>bigdecimal\",{\"1\":{\"778\":1}}],[\"jar>java>math>biginteger\",{\"1\":{\"777\":1}}],[\"jar>java>lang>reflect>method\",{\"1\":{\"867\":1}}],[\"jar>java>lang>class\",{\"1\":{\"832\":1}}],[\"jar>java>lang>number\",{\"1\":{\"771\":1}}],[\"jar>java>lang>math\",{\"1\":{\"759\":1}}],[\"jar命令后运行的类\",{\"1\":{\"247\":1}}],[\"jar执行此程序包\",{\"1\":{\"246\":1}}],[\"jarlauncher类执行时会找到start\",{\"1\":{\"247\":1}}],[\"jarlauncher执行该类\",{\"1\":{\"246\":1}}],[\"jarlauncher\",{\"1\":{\"244\":1,\"246\":1}}],[\"jar包与war包的对比\",{\"0\":{\"2996\":1}}],[\"jar包与zip包\",{\"0\":{\"2981\":1}}],[\"jar包和war包使用\",{\"0\":{\"2997\":1}}],[\"jar包和war包\",{\"0\":{\"2994\":1}}],[\"jar包签名\",{\"0\":{\"2983\":1}}],[\"jar包主要是对class文件进行打包\",{\"1\":{\"2982\":1}}],[\"jar包的作用\",{\"0\":{\"2984\":1}}],[\"jar包的内容\",{\"0\":{\"2982\":1}}],[\"jar包的目录结构\",{\"0\":{\"243\":1}}],[\"jar包其实就是class文件的集合\",{\"1\":{\"2980\":1}}],[\"jar包介绍\",{\"0\":{\"2978\":1}}],[\"jar包\",{\"0\":{\"2671\":1,\"2977\":1},\"1\":{\"2537\":1}}],[\"jar包中的类和配置文件由于不会发生变化\",{\"1\":{\"181\":1}}],[\"jar组成\",{\"1\":{\"236\":1}}],[\"jar\",{\"1\":{\"172\":1,\"237\":2,\"246\":2,\"253\":2,\"256\":2,\"860\":1,\"2537\":1,\"2981\":3,\"2983\":1,\"2986\":2,\"2991\":2,\"2992\":1}}],[\"java前端\",{\"0\":{\"3782\":1}}],[\"java单独操作mongodb\",{\"1\":{\"3742\":1}}],[\"java操作\",{\"0\":{\"3742\":1}}],[\"java编译生成的class文件是平台无关的\",{\"1\":{\"2982\":1}}],[\"java文件\",{\"1\":{\"2982\":1}}],[\"java包解析\",{\"0\":{\"2980\":1}}],[\"java归档\",{\"1\":{\"2979\":1}}],[\"java和静态资源变更都会重新部署\",{\"1\":{\"2750\":1}}],[\"java源码目录\",{\"1\":{\"2720\":1}}],[\"java源码中会用到\",{\"1\":{\"1154\":1}}],[\"java代码参考\",{\"0\":{\"2653\":1}}],[\"java代码控制\",{\"1\":{\"633\":1}}],[\"java与数据库交互涉及到的相关api中的索引都从1开始\",{\"1\":{\"2591\":1}}],[\"java与sql对应数据类型转换表\",{\"0\":{\"2562\":1}}],[\"java类型\",{\"1\":{\"2562\":1}}],[\"java类可以实现多个接口\",{\"1\":{\"1510\":1}}],[\"java底层语法很多地方用到了optional\",{\"1\":{\"2497\":1}}],[\"java为不同格式的函数提供了不同类型的内置接口\",{\"1\":{\"2381\":1}}],[\"java安装\",{\"0\":{\"2353\":1}}],[\"java8\",{\"1\":{\"2352\":1,\"2436\":1}}],[\"java11\",{\"1\":{\"2352\":1}}],[\"java17\",{\"1\":{\"2352\":1}}],[\"java下载地址\",{\"1\":{\"2350\":1}}],[\"java版本\",{\"0\":{\"2350\":1}}],[\"java版本选择\",{\"0\":{\"1017\":1}}],[\"java不是动态语言\",{\"1\":{\"2247\":1}}],[\"java不支持多重继承\",{\"1\":{\"1504\":1}}],[\"javascript\",{\"1\":{\"2247\":1,\"2695\":1}}],[\"javase\",{\"1\":{\"10\":1}}],[\"java提供的网络类库\",{\"1\":{\"2171\":1}}],[\"java提供了更强大的线程同步机制\",{\"1\":{\"1778\":1}}],[\"java提供了4种权限修饰符来修饰类及类的内部结构\",{\"1\":{\"1307\":1}}],[\"java提供了默认长度\",{\"1\":{\"1098\":1}}],[\"java泛型可以保证如果程序在编译时没有发出警告\",{\"1\":{\"1951\":1}}],[\"java引入了\",{\"1\":{\"1948\":1}}],[\"java引用变量有两个类型\",{\"1\":{\"1395\":1}}],[\"java垃圾回收就是一个典型的守护线程\",{\"1\":{\"1711\":1}}],[\"java采用的异常处理机制\",{\"1\":{\"1565\":1}}],[\"java语言的基于套接字编程分为服务端编程和客户端编程\",{\"1\":{\"2216\":1}}],[\"java语言的jvm可以通过java\",{\"1\":{\"1713\":1}}],[\"java语言使用thread类及其子类的对象来表示线程\",{\"1\":{\"1749\":1}}],[\"java语言欠缺属性\",{\"1\":{\"1531\":1}}],[\"java语言表达所操作的boolean值\",{\"1\":{\"1108\":1}}],[\"javabean举例\",{\"0\":{\"1534\":1}}],[\"javabean的种类\",{\"0\":{\"1533\":1}}],[\"javabean是一种java语言写成的可重用组件\",{\"1\":{\"1530\":1}}],[\"javabean\",{\"0\":{\"1530\":1},\"1\":{\"3002\":1,\"3003\":1}}],[\"java开发中\",{\"1\":{\"1510\":1}}],[\"java开发人员使用的\",{\"1\":{\"1025\":1}}],[\"java才是真正的面向对象\",{\"1\":{\"1437\":1}}],[\"java只支持单继承和多层继承\",{\"1\":{\"1363\":1}}],[\"java权限修饰符置于类的成员定义前\",{\"1\":{\"1309\":1}}],[\"java都会认的\",{\"1\":{\"1297\":1}}],[\"java里方法的参数传递方式只有一种\",{\"1\":{\"1291\":1}}],[\"java里的方法不能独立存在\",{\"1\":{\"1276\":1}}],[\"java规定的4种权限修饰符\",{\"1\":{\"1277\":1}}],[\"java内部已经将参数的类型穷举好了\",{\"1\":{\"2391\":1}}],[\"java内部就有很多这样的类\",{\"1\":{\"1349\":1}}],[\"java内置四大核心functional\",{\"0\":{\"2392\":1}}],[\"java内置了丰富的类\",{\"1\":{\"1264\":1}}],[\"java内置类\",{\"1\":{\"1264\":1}}],[\"java内容分类\",{\"0\":{\"1011\":1}}],[\"java是纯面向对象的语言\",{\"1\":{\"2381\":1}}],[\"java是向前兼容的\",{\"1\":{\"2353\":1}}],[\"java是\",{\"1\":{\"2171\":1}}],[\"java是强类型语言\",{\"1\":{\"1208\":1,\"1400\":1}}],[\"java是需要手动分配内存空间\",{\"1\":{\"1098\":1}}],[\"java要怎么分配内存呢\",{\"1\":{\"1098\":1}}],[\"java各整数类型有固定的表数范围和字段长度\",{\"1\":{\"1086\":1}}],[\"java中允许将一个类a声明在另一个类b中\",{\"1\":{\"1449\":1}}],[\"java中没有关联数组\",{\"1\":{\"1823\":1}}],[\"java中没有\",{\"1\":{\"1426\":1}}],[\"java中通过将数据声明为私有的\",{\"1\":{\"1305\":1,\"1306\":1}}],[\"java中的数据存储技术\",{\"0\":{\"2526\":1}}],[\"java中的线程分为两类\",{\"1\":{\"1711\":1}}],[\"java中的万物皆对象\",{\"0\":{\"1253\":1}}],[\"java中的对象\",{\"1\":{\"739\":1}}],[\"java中必须先为数组分配内存空间\",{\"1\":{\"1211\":1}}],[\"java中不会发生变量覆盖\",{\"1\":{\"1073\":1}}],[\"java中每个变量必须先声明\",{\"1\":{\"1073\":1}}],[\"javadoc是不包括注解的\",{\"1\":{\"1663\":1}}],[\"javadoc\",{\"1\":{\"1061\":1,\"2387\":1}}],[\"javac\",{\"1\":{\"1038\":1,\"1040\":1,\"1049\":1,\"1050\":1,\"2365\":1}}],[\"java执行过程\",{\"0\":{\"1038\":1}}],[\"java可以自动进行垃圾回收\",{\"1\":{\"1016\":1}}],[\"java程序员只需要面向这套接口编程即可\",{\"1\":{\"2531\":1}}],[\"java程序访问数据库时是这样的\",{\"0\":{\"2528\":1,\"2529\":1}}],[\"java程序在执行过程中所发生的异常事件可分为两类\",{\"1\":{\"1559\":1}}],[\"java程序中\",{\"1\":{\"2021\":1}}],[\"java程序中变量通常声明为int型\",{\"1\":{\"1090\":1}}],[\"java程序中的一个file对象\",{\"1\":{\"786\":1}}],[\"java程序才可在此平台运行\",{\"1\":{\"1015\":1}}],[\"java虚拟机无法解决的严重问题\",{\"1\":{\"1560\":1}}],[\"java虚拟机中没有任何供boolean值专用的字节码指令\",{\"1\":{\"1108\":1}}],[\"java虚拟机机制屏蔽了底层运行平台的差别\",{\"1\":{\"1015\":1}}],[\"java虚拟机\",{\"0\":{\"1015\":1}}],[\"java的动态性让编程的时候更加灵活\",{\"1\":{\"2247\":1}}],[\"java的io流共涉及40多个类\",{\"1\":{\"2024\":1}}],[\"java的调度方法\",{\"0\":{\"1734\":1}}],[\"java的入口是main方法\",{\"1\":{\"1713\":1}}],[\"java的多线程\",{\"0\":{\"1708\":1}}],[\"java的异常处理机制\",{\"0\":{\"1565\":1}}],[\"java的重载是可以包括父类和子类的\",{\"1\":{\"1407\":1}}],[\"java的整型常量默认为\",{\"1\":{\"1090\":1}}],[\"java的核心机制\",{\"0\":{\"1014\":1}}],[\"java的特点\",{\"0\":{\"1013\":1}}],[\"java的string正则表达式是无法表示模式修饰符的\",{\"1\":{\"996\":1}}],[\"java主要应用方向\",{\"0\":{\"1012\":1}}],[\"java移动版\",{\"1\":{\"1011\":1}}],[\"java企业版\",{\"1\":{\"1011\":1}}],[\"java标准版\",{\"1\":{\"1011\":1}}],[\"java介绍\",{\"0\":{\"1010\":1}}],[\"java正则语法指南\",{\"0\":{\"986\":1}}],[\"javahome\",{\"1\":{\"884\":2}}],[\"javaversion\",{\"1\":{\"884\":2}}],[\"javaee\",{\"1\":{\"649\":2,\"1124\":2}}],[\"javaee的jsr303规范中给出了具体的数据校验标准\",{\"1\":{\"218\":1}}],[\"java=>\",{\"1\":{\"649\":1}}],[\"javax\",{\"1\":{\"418\":2,\"2527\":1,\"2668\":1,\"2672\":1,\"2683\":1,\"2945\":2}}],[\"java对象转为json字符串\",{\"1\":{\"3083\":1}}],[\"java对象转json\",{\"0\":{\"3086\":1},\"1\":{\"413\":1,\"3216\":1}}],[\"java对nio进行了极大的扩展\",{\"1\":{\"2162\":1}}],[\"java对于每一种数据都定义了明确的具体数据类型\",{\"1\":{\"1074\":1}}],[\"java对mongodb所有的操作都是通过mongotemplate类实现的\",{\"1\":{\"393\":1}}],[\"java<\",{\"1\":{\"358\":1,\"361\":1,\"371\":1,\"413\":1,\"597\":1,\"612\":1}}],[\"java学习顺序\",{\"0\":{\"11\":1}}],[\"javaweb中有四大域对象\",{\"1\":{\"2919\":1}}],[\"javaweb核心三件套都可以直接new\",{\"1\":{\"2787\":1}}],[\"javaweb开发中\",{\"1\":{\"2772\":1}}],[\"javaweb就是用java技术来解决相关web互联网领域的技术栈\",{\"1\":{\"2719\":1}}],[\"javaweb项目结构\",{\"0\":{\"2719\":1}}],[\"javaweb项目部署到本地的tomcat服务器上\",{\"1\":{\"179\":1}}],[\"javaweb\",{\"1\":{\"10\":1,\"11\":1,\"2955\":1,\"2961\":1}}],[\"java\",{\"0\":{\"3\":1,\"1652\":1,\"1653\":1,\"1654\":1,\"2022\":1,\"2161\":1,\"3202\":1,\"3762\":1},\"1\":{\"10\":1,\"11\":1,\"95\":1,\"226\":1,\"237\":1,\"253\":1,\"256\":1,\"358\":1,\"366\":1,\"414\":2,\"418\":9,\"546\":1,\"578\":1,\"589\":3,\"590\":1,\"611\":2,\"612\":1,\"616\":1,\"649\":1,\"683\":1,\"707\":3,\"709\":3,\"710\":5,\"714\":1,\"715\":1,\"716\":1,\"723\":2,\"728\":1,\"741\":2,\"743\":1,\"752\":1,\"759\":2,\"771\":1,\"777\":3,\"778\":1,\"786\":3,\"788\":1,\"812\":2,\"819\":1,\"820\":2,\"832\":2,\"841\":1,\"843\":2,\"848\":1,\"859\":1,\"860\":1,\"867\":1,\"872\":1,\"880\":1,\"884\":4,\"885\":1,\"889\":2,\"901\":1,\"919\":1,\"920\":1,\"927\":1,\"941\":1,\"953\":1,\"984\":2,\"985\":3,\"993\":1,\"994\":1,\"1002\":1,\"1006\":1,\"1011\":3,\"1015\":1,\"1020\":1,\"1024\":2,\"1025\":2,\"1026\":1,\"1029\":1,\"1034\":1,\"1035\":4,\"1038\":6,\"1040\":1,\"1041\":1,\"1049\":1,\"1050\":3,\"1058\":4,\"1059\":1,\"1061\":1,\"1063\":1,\"1081\":1,\"1082\":1,\"1092\":1,\"1126\":1,\"1186\":1,\"1321\":1,\"1338\":7,\"1345\":1,\"1401\":1,\"1531\":1,\"1541\":1,\"1543\":1,\"1560\":2,\"1571\":3,\"1573\":1,\"1587\":4,\"1625\":1,\"1634\":1,\"1638\":4,\"1652\":1,\"1653\":1,\"1654\":1,\"1656\":1,\"1659\":2,\"1665\":1,\"1680\":7,\"1778\":1,\"1784\":1,\"1799\":1,\"1823\":1,\"1826\":1,\"1830\":1,\"2008\":1,\"2015\":3,\"2016\":2,\"2021\":1,\"2045\":1,\"2048\":1,\"2049\":1,\"2050\":1,\"2073\":1,\"2079\":1,\"2090\":1,\"2161\":3,\"2164\":3,\"2168\":1,\"2171\":2,\"2238\":2,\"2243\":2,\"2244\":3,\"2247\":1,\"2250\":4,\"2252\":3,\"2264\":2,\"2292\":1,\"2293\":1,\"2296\":5,\"2351\":1,\"2436\":1,\"2495\":1,\"2526\":1,\"2527\":2,\"2531\":2,\"2537\":2,\"2539\":1,\"2545\":1,\"2556\":1,\"2562\":3,\"2570\":2,\"2573\":1,\"2574\":1,\"2682\":2,\"2684\":2,\"2731\":1,\"2945\":1,\"2979\":1,\"3084\":1,\"3202\":2,\"3446\":1,\"3488\":1,\"3503\":1,\"3504\":1}}],[\"jdo\",{\"1\":{\"2526\":2}}],[\"jdk只有接口\",{\"1\":{\"2540\":1}}],[\"jdk与language\",{\"0\":{\"2356\":1}}],[\"jdk不提供此接口的任何直接实现\",{\"1\":{\"1830\":1}}],[\"jdk中只有jdbc定义的一系列操作数据库的接口\",{\"1\":{\"2535\":1}}],[\"jdk中内置了很多注解\",{\"1\":{\"1638\":1}}],[\"jdk中主要包介绍\",{\"0\":{\"1338\":1}}],[\"jdk7底层结构只有\",{\"1\":{\"1926\":1}}],[\"jdk7中底层实现原理\",{\"0\":{\"1920\":1}}],[\"jdk7中的arraylist的对象的创建类似于单例的饿汉式\",{\"1\":{\"1870\":1}}],[\"jdk7及之前\",{\"1\":{\"1912\":1}}],[\"jdk7和jdk8中通过vector\",{\"1\":{\"1877\":1}}],[\"jdk7\",{\"1\":{\"1175\":1,\"1502\":1,\"1926\":1}}],[\"jdk一共内置了43个函数式接口\",{\"1\":{\"972\":1}}],[\"jdk11的内容指的是jdk9~jdk11\",{\"1\":{\"2509\":1}}],[\"jdk11\",{\"0\":{\"2509\":1}}],[\"jdk17\",{\"1\":{\"1034\":1}}],[\"jdk1\",{\"1\":{\"884\":1,\"1029\":1,\"1618\":2,\"1669\":1,\"1710\":1,\"1903\":1,\"1947\":1,\"1948\":1,\"1964\":1}}],[\"jdk内置实现\",{\"0\":{\"746\":1}}],[\"jdk8\",{\"1\":{\"1926\":1}}],[\"jdk8中底层结构\",{\"1\":{\"1926\":1}}],[\"jdk8中的底层实现原理\",{\"0\":{\"1926\":1}}],[\"jdk8中\",{\"0\":{\"1869\":1}}],[\"jdk8中除了定义全局常量和抽象方法之外\",{\"1\":{\"1515\":1}}],[\"jdk8下载地址\",{\"1\":{\"1027\":1}}],[\"jdk8之后新时间api出现的背景\",{\"0\":{\"708\":1}}],[\"jdk8新增\",{\"1\":{\"215\":1,\"216\":1}}],[\"jdk5\",{\"1\":{\"690\":1,\"1175\":1,\"1656\":1}}],[\"jdk版本是用来控制模块jdk的版本的\",{\"1\":{\"2356\":1}}],[\"jdk版本\",{\"1\":{\"95\":1}}],[\"jdk\",{\"0\":{\"57\":1,\"58\":1,\"238\":1,\"1006\":1,\"1025\":1,\"1026\":1},\"1\":{\"95\":1,\"246\":2,\"708\":1,\"884\":1,\"1025\":1,\"1026\":1,\"1027\":1,\"1029\":1,\"1656\":1,\"1830\":1,\"1850\":1,\"1893\":2,\"1912\":1,\"1926\":1,\"2162\":1,\"3106\":1,\"3289\":1,\"3320\":1}}],[\"jdbc数据连接池的必要性\",{\"0\":{\"2660\":1}}],[\"jdbc工具类库\",{\"1\":{\"2679\":1}}],[\"jdbc工具类\",{\"0\":{\"2652\":1}}],[\"jdbc控制隔离级别示例\",{\"0\":{\"2639\":1}}],[\"jdbc控制隔离级别\",{\"0\":{\"2636\":1}}],[\"jdbc事务示例\",{\"0\":{\"2633\":1}}],[\"jdbc事务的处理流程\",{\"0\":{\"2631\":1}}],[\"jdbc事务处理方法\",{\"0\":{\"2627\":1}}],[\"jdbc的批量处理相关的方法\",{\"0\":{\"2615\":1}}],[\"jdbc的目标是使java程序员使用jdbc可以连接任何提供了jdbc驱动程序\",{\"1\":{\"2527\":1}}],[\"jdbcutils中\",{\"1\":{\"2675\":1}}],[\"jdbcutils更新\",{\"0\":{\"2598\":1}}],[\"jdbcutils\",{\"0\":{\"2652\":1,\"2675\":1},\"1\":{\"2574\":2,\"2577\":2,\"2581\":2,\"2597\":2,\"2600\":2,\"2603\":2,\"2612\":2,\"2613\":2,\"2620\":1,\"2621\":2,\"2624\":2,\"2625\":2,\"2634\":1,\"2635\":2,\"2639\":1,\"2652\":1,\"2653\":4,\"2657\":14,\"2676\":2,\"2681\":1,\"2686\":2,\"2687\":2,\"2688\":2,\"2689\":2,\"2690\":2,\"2691\":2}}],[\"jdbc模块的lib目录\",{\"1\":{\"2538\":1}}],[\"jdbc程序编写步骤\",{\"0\":{\"2532\":1}}],[\"jdbc接口\",{\"1\":{\"2531\":1}}],[\"jdbc体系结构\",{\"0\":{\"2531\":1}}],[\"jdbc为访问不同的数据库提供了一种统一的途径\",{\"1\":{\"2527\":1}}],[\"jdbc介绍\",{\"0\":{\"2527\":1}}],[\"jdbc是java访问数据库的基石\",{\"1\":{\"2526\":1}}],[\"jdbc直接访问数据库\",{\"1\":{\"2526\":1}}],[\"jdbc只用来了解底层\",{\"1\":{\"2524\":1}}],[\"jdbc1\",{\"1\":{\"2282\":2}}],[\"jdbc依赖\",{\"1\":{\"597\":1}}],[\"jdbc<\",{\"1\":{\"355\":1}}],[\"jdbcdatesource\",{\"1\":{\"155\":1,\"156\":1,\"200\":2}}],[\"jdbcdatesource类\",{\"1\":{\"155\":1}}],[\"jdbc驱动配置\",{\"1\":{\"154\":1}}],[\"jdbc\",{\"0\":{\"1513\":1},\"1\":{\"11\":1,\"45\":1,\"154\":2,\"203\":1,\"356\":2,\"358\":1,\"361\":1,\"362\":2,\"368\":1,\"369\":2,\"371\":1,\"372\":2,\"543\":1,\"617\":2,\"1513\":1,\"1938\":1,\"1940\":1,\"2282\":1,\"2527\":1,\"2538\":1,\"2542\":2,\"2545\":4,\"2546\":1,\"2547\":2,\"2548\":2,\"2550\":2,\"2551\":1,\"2573\":1,\"2575\":1,\"2668\":1,\"2673\":1,\"2674\":2}}],[\"js+mysql的缝合\",{\"1\":{\"3537\":1}}],[\"jsession\",{\"1\":{\"3070\":1}}],[\"jsessionid=23a23234\",{\"1\":{\"3068\":1}}],[\"js\",{\"1\":{\"648\":1}}],[\"jstl\",{\"1\":{\"11\":1}}],[\"jsp一般充当mvc模式中的v\",{\"1\":{\"2976\":1}}],[\"jsp仅作了解\",{\"1\":{\"2976\":1}}],[\"jsp时才会被拦截\",{\"1\":{\"2949\":1}}],[\"jsp中取值\",{\"1\":{\"2920\":1}}],[\"jsp中存值\",{\"1\":{\"2920\":1}}],[\"jsp少量javaee规范\",{\"1\":{\"2698\":1}}],[\"jsp\",{\"1\":{\"11\":1,\"2695\":1,\"2920\":1,\"2949\":4,\"3003\":1,\"3007\":1}}],[\"json格式来表示\",{\"1\":{\"3362\":1}}],[\"json格式\",{\"1\":{\"3133\":1,\"3586\":1}}],[\"json转java对象\",{\"0\":{\"3087\":1}}],[\"json转换\",{\"0\":{\"3082\":1}}],[\"jsonstr\",{\"1\":{\"3086\":1,\"3087\":1}}],[\"json字符串转为java对象\",{\"1\":{\"3083\":1}}],[\"json与java对象的转换\",{\"0\":{\"3084\":1}}],[\"json与java对象\",{\"0\":{\"3083\":1}}],[\"json语法\",{\"0\":{\"3081\":1}}],[\"json数组格式\",{\"1\":{\"644\":1}}],[\"json对象\",{\"1\":{\"643\":1}}],[\"json依赖\",{\"1\":{\"420\":2}}],[\"json<\",{\"1\":{\"123\":1}}],[\"json\",{\"0\":{\"3080\":1},\"1\":{\"11\":1,\"418\":1,\"3084\":3,\"3086\":2,\"3087\":2,\"3111\":1,\"3214\":1,\"3217\":1,\"3220\":3,\"3413\":1,\"3546\":2,\"3547\":1,\"3583\":1}}],[\"jvm配置文件\",{\"1\":{\"3267\":1}}],[\"jvm配置\",{\"1\":{\"2768\":1}}],[\"jvm将花费较少的时间来调度线程\",{\"1\":{\"1779\":1}}],[\"jvm会保留注释\",{\"1\":{\"1659\":1}}],[\"jvm不会保留注解\",{\"1\":{\"1659\":1}}],[\"jvm是不能自动的回收的\",{\"1\":{\"1590\":1}}],[\"jvm系统内部错误\",{\"1\":{\"1560\":1}}],[\"jvm的关系\",{\"0\":{\"1026\":1}}],[\"jvm在各个平台都有\",{\"1\":{\"1013\":1}}],[\"jvm\",{\"0\":{\"336\":1,\"3356\":1},\"1\":{\"10\":1,\"11\":1,\"1013\":1,\"1015\":2,\"1026\":1,\"1035\":1,\"1544\":1,\"2171\":1,\"2263\":1,\"2279\":1,\"3267\":4,\"3312\":2,\"3345\":2,\"3503\":4,\"3508\":1,\"3532\":1}}],[\"站点内容地图\",{\"0\":{\"10\":1}}],[\"框架>maven\",{\"1\":{\"2999\":1}}],[\"框架中用的\",{\"1\":{\"2556\":1}}],[\"框架中底层用的也是jdbc\",{\"1\":{\"2524\":1}}],[\"框架用的就是线程池\",{\"1\":{\"1812\":1}}],[\"框架运行\",{\"0\":{\"570\":1}}],[\"框架读取配置后\",{\"1\":{\"531\":1}}],[\"框架\",{\"0\":{\"4\":1,\"3009\":1},\"1\":{\"10\":1,\"586\":1,\"1636\":1}}],[\"当时初始化副本集的时候\",{\"1\":{\"3678\":1}}],[\"当mongos或mongod实例重新启动时\",{\"1\":{\"3656\":1}}],[\"当mongo用于分片设置时\",{\"1\":{\"3574\":1}}],[\"当查询条件和查询的投影仅包含索引字段时\",{\"1\":{\"3636\":1}}],[\"当于sql的and\",{\"1\":{\"3616\":1}}],[\"当query中有多条符合需要的文档记录时\",{\"1\":{\"3597\":1}}],[\"当向一个集合中插入一个文档的时候\",{\"1\":{\"3581\":1}}],[\"当实例重新启动时\",{\"1\":{\"3562\":1}}],[\"当实体类中出现id字段时\",{\"1\":{\"397\":1}}],[\"当实体类的类名和集合名不同时\",{\"1\":{\"395\":1}}],[\"当实体类的类名和集合名相同时\",{\"1\":{\"395\":1}}],[\"当初的设计就是用于简化开发和方便扩展\",{\"1\":{\"3535\":1}}],[\"当初始化一个类\",{\"1\":{\"2277\":1}}],[\"当初始化一个类的时候\",{\"1\":{\"2276\":1}}],[\"当备选主节点的个数大于等于该参数的值\",{\"1\":{\"3533\":1}}],[\"当段合并时\",{\"1\":{\"3528\":1}}],[\"当删除请求发送后\",{\"1\":{\"3528\":1}}],[\"当分片所在的节点接收到来自协调节点的请求后\",{\"1\":{\"3527\":1}}],[\"当写索引时\",{\"1\":{\"3518\":1}}],[\"当写测试的时候\",{\"1\":{\"3452\":1}}],[\"当性能没有提升时\",{\"1\":{\"3514\":1}}],[\"当节点产生故障时\",{\"1\":{\"3509\":1}}],[\"当文档被修改时版本号递增\",{\"1\":{\"3497\":1}}],[\"当文档创建\",{\"1\":{\"3496\":1}}],[\"当你查询一个\",{\"1\":{\"3470\":1}}],[\"当你查询一个全文域时\",{\"1\":{\"3470\":1}}],[\"当你正在建立一个大的新索引时\",{\"1\":{\"3454\":1}}],[\"当你创建一个索引的时候\",{\"1\":{\"3365\":1}}],[\"当产生了新的文档时\",{\"1\":{\"3444\":1}}],[\"当产生异常类型3时的处理措施\",{\"1\":{\"1585\":1}}],[\"当产生异常类型2时的处理措施\",{\"1\":{\"1585\":1}}],[\"当产生异常类型1时的处理措施\",{\"1\":{\"1585\":1}}],[\"当每个操作成功时\",{\"1\":{\"3417\":1}}],[\"当主分片把更改转发到副本分片时\",{\"1\":{\"3414\":1}}],[\"当主环境dev与其他环境有相同属性时\",{\"1\":{\"279\":1}}],[\"当发送请求的时候\",{\"1\":{\"3405\":1}}],[\"当发现既可以使用switch\",{\"1\":{\"1177\":1}}],[\"当索引一个文档的时候\",{\"1\":{\"3399\":1}}],[\"当第二个节点加入到集群后\",{\"1\":{\"3388\":1}}],[\"当集群中只有一个节点在运行时\",{\"1\":{\"3385\":1}}],[\"当有新的数据写入索引时\",{\"1\":{\"3515\":1}}],[\"当有节点加入集群中或者从集群中移除节点时\",{\"1\":{\"3374\":1}}],[\"当有多个排序字段时\",{\"1\":{\"3185\":1}}],[\"当有多个tomcat模板时\",{\"1\":{\"2760\":1}}],[\"当选举配置集合中超过一半的节点存活时\",{\"1\":{\"3275\":1}}],[\"当开启一个全新的集群时\",{\"1\":{\"3268\":1}}],[\"当开发完毕后\",{\"1\":{\"39\":1}}],[\"当电脑内存不足时\",{\"1\":{\"3265\":1}}],[\"当上一个字段相同时\",{\"1\":{\"3185\":1}}],[\"当保存文档数据时\",{\"1\":{\"3175\":1}}],[\"当手动自定了\",{\"1\":{\"3137\":1}}],[\"当没有手动指定\",{\"1\":{\"3137\":1}}],[\"当启动了第三个节点\",{\"1\":{\"3390\":1}}],[\"当启动elasticsearch后\",{\"1\":{\"3110\":1}}],[\"当启用了连接池后\",{\"1\":{\"2632\":1}}],[\"当用户索引了一个文件并立即搜索它时\",{\"1\":{\"3452\":1}}],[\"当用户发起查询时\",{\"1\":{\"3420\":1}}],[\"当用户查询时\",{\"1\":{\"3100\":1}}],[\"当用对象调用未赋值的属性时\",{\"1\":{\"1264\":1}}],[\"当服务器重启后\",{\"1\":{\"3071\":1}}],[\"当服务器开启密码验证时\",{\"1\":{\"390\":1}}],[\"当客户端关闭后\",{\"1\":{\"3069\":1}}],[\"当浏览器关闭后\",{\"1\":{\"3053\":1}}],[\"当浏览器再次发送强求时\",{\"1\":{\"3050\":1}}],[\"当tomcat的进程启动之后\",{\"1\":{\"2997\":1}}],[\"当treeset有参数时\",{\"1\":{\"1902\":1}}],[\"当treeset的构造函数有没有参数时\",{\"1\":{\"1902\":1}}],[\"当httpsession中的属性被修改时调用\",{\"1\":{\"2966\":1}}],[\"当被监视的对象发生情况时\",{\"1\":{\"2958\":1}}],[\"当一段时间内session没有被使用\",{\"1\":{\"2924\":1}}],[\"当一个文档被更新时\",{\"1\":{\"3447\":1}}],[\"当一个文档被\",{\"1\":{\"3447\":1}}],[\"当一个查询被触发\",{\"1\":{\"3445\":1}}],[\"当一个节点被选举成为主节点时\",{\"1\":{\"3375\":1}}],[\"当一个thread类或其子类的对象被声明并创建时\",{\"1\":{\"1749\":1}}],[\"当一个对象\",{\"1\":{\"1705\":1}}],[\"当一个对象的产生需要比较多的资源时\",{\"1\":{\"1487\":1}}],[\"当一个事物的内部\",{\"1\":{\"1450\":1,\"1461\":1}}],[\"当一个方法\",{\"1\":{\"1976\":1}}],[\"当一个方法的参数是object数据类型时\",{\"1\":{\"1443\":1}}],[\"当一个方法需要传递的参数类型是一个类时\",{\"1\":{\"1400\":1}}],[\"当一个方法执行到一个return语句时\",{\"1\":{\"1196\":1}}],[\"当一个字段被映射为\",{\"1\":{\"398\":1}}],[\"当请求结束时\",{\"1\":{\"2922\":1}}],[\"当请求来时创建request对象\",{\"1\":{\"2922\":1}}],[\"当请求完成后request对象就会被销毁\",{\"1\":{\"2859\":1}}],[\"当虚拟目录设置为\",{\"1\":{\"2915\":1}}],[\"当虚拟机启动\",{\"1\":{\"2277\":1}}],[\"当进行重定向访问的时候\",{\"1\":{\"2912\":1}}],[\"当idea失去焦点时\",{\"1\":{\"2750\":1}}],[\"当i==20时\",{\"1\":{\"1729\":1}}],[\"当i==10时\",{\"1\":{\"1729\":1}}],[\"当i==5时\",{\"1\":{\"1729\":1}}],[\"当项目有更新的时候\",{\"1\":{\"2750\":1}}],[\"当项目开发完毕\",{\"1\":{\"38\":1}}],[\"当大于0时\",{\"1\":{\"2674\":1}}],[\"当应用程序向连接池请求的连接数超过最大连接数量时\",{\"1\":{\"2665\":1}}],[\"当列没有别名时\",{\"1\":{\"2602\":1}}],[\"当指针指向一行时\",{\"1\":{\"2588\":1}}],[\"当指针已经指向最后时\",{\"1\":{\"925\":1,\"1840\":1}}],[\"当要传递给lambda体的操作\",{\"1\":{\"2397\":1}}],[\"当通过代理类对象调用方法时\",{\"1\":{\"2344\":1}}],[\"当通过子类引用父类的静态变量\",{\"1\":{\"2277\":1}}],[\"当通过某一个对象修改静态变量时\",{\"1\":{\"1475\":1}}],[\"当访问一个静态域时\",{\"1\":{\"2277\":1}}],[\"当程序主动使用某个类时\",{\"1\":{\"2273\":1}}],[\"当程序运行需要的内存超过了剩余的内存时\",{\"1\":{\"1706\":1}}],[\"当与一个url建立连接时\",{\"1\":{\"2241\":1}}],[\"当此方法返回时\",{\"1\":{\"2233\":1}}],[\"当此属性设置为true时\",{\"1\":{\"308\":2}}],[\"当其挂\",{\"1\":{\"3642\":1}}],[\"当其他的url\",{\"1\":{\"2825\":1}}],[\"当其它程序获取了这种二进制流\",{\"1\":{\"2144\":1}}],[\"当其中一个变量的值改变时不会影响另一个\",{\"1\":{\"1554\":1}}],[\"当缓冲区的数据存满时\",{\"1\":{\"2081\":1}}],[\"当读取数据时\",{\"1\":{\"2074\":1}}],[\"当泛型方法所在类也是泛型类时\",{\"1\":{\"1979\":1}}],[\"当类是泛型类时\",{\"1\":{\"1978\":1}}],[\"当类的对象是有限个\",{\"1\":{\"1616\":1}}],[\"当桶中node的数量大到需要变红黑树时\",{\"1\":{\"1928\":1}}],[\"当数据被刷到os\",{\"1\":{\"3449\":1}}],[\"当数据库中没有数据时\",{\"1\":{\"3578\":1}}],[\"当数据库抛出一些不可恢复的异常时\",{\"1\":{\"2674\":1}}],[\"当数据库访问结束后\",{\"1\":{\"2669\":1}}],[\"当数组的某一个索引位置上的元素以链表形式存在的数据个数\",{\"1\":{\"1926\":1}}],[\"当数值常量参与运算的时候\",{\"1\":{\"1115\":1}}],[\"当超出临界值\",{\"1\":{\"1924\":1}}],[\"当线程进入synchronized中时\",{\"1\":{\"1771\":1}}],[\"当线程通过instance\",{\"1\":{\"1769\":1}}],[\"当把synchronize声明在方法最外层时\",{\"1\":{\"1770\":1}}],[\"当只剩下一张票\",{\"1\":{\"1755\":1}}],[\"当多条语句在操作同一个线程共享数据时\",{\"1\":{\"1755\":1}}],[\"当多个买票程序同时通过是否有票的验证\",{\"1\":{\"1755\":1}}],[\"当多个线程操作同一个数据时\",{\"1\":{\"1753\":1}}],[\"当多线程模式下使用jedis会存在线程安全问题\",{\"1\":{\"382\":1}}],[\"当就绪的线程被调度并获得cpu资源时\",{\"1\":{\"1749\":1}}],[\"当执行更新时\",{\"1\":{\"3528\":1}}],[\"当执行此方法时\",{\"1\":{\"1727\":1}}],[\"当执行构建项目后\",{\"1\":{\"183\":1}}],[\"当运行\",{\"1\":{\"1659\":2}}],[\"当它修饰一个方法的时候\",{\"1\":{\"1654\":1}}],[\"当成一个修饰符使用\",{\"1\":{\"1637\":1}}],[\"当异常出现时\",{\"1\":{\"1611\":1,\"1613\":1}}],[\"当在连接网络时输入一个主机的域名后\",{\"1\":{\"2184\":1}}],[\"当在可序列化的类上缺少\",{\"1\":{\"1678\":1}}],[\"当在初始化之前要进行一些操作时\",{\"1\":{\"1529\":1}}],[\"当在方法内需要用到调用该方法的对象时\",{\"1\":{\"1331\":1}}],[\"当功能内部一部分实现是确定的\",{\"1\":{\"1498\":1}}],[\"当修改其中一个对象中的非静态属性时\",{\"1\":{\"1475\":1}}],[\"当修改了文件\",{\"1\":{\"186\":1}}],[\"当想要在外部类的静态成员部分使用内部类时\",{\"1\":{\"1455\":1}}],[\"当想需要获取到配置文件数据时\",{\"1\":{\"545\":1}}],[\"当做数值类型\",{\"1\":{\"1447\":1}}],[\"当子类重写了父类中的方法以后\",{\"1\":{\"1382\":1}}],[\"当子类和父类中定义了同名的属性时\",{\"1\":{\"1381\":1}}],[\"当子类创建了和父类中相同的属性时\",{\"1\":{\"1377\":1}}],[\"当形参与成员变量同名时\",{\"1\":{\"1332\":1}}],[\"当我们有大量的写任务时\",{\"1\":{\"3514\":1}}],[\"当我们索引一个文档\",{\"1\":{\"3470\":1}}],[\"当我们开发了一个程序以后\",{\"1\":{\"2986\":1}}],[\"当我们的servlet类继承的是httpservlet类的时候\",{\"1\":{\"2835\":1}}],[\"当我们的servlet类实现的是servlet接口的时候\",{\"1\":{\"2835\":1}}],[\"当我们要操作的集合是个嵌套集合时\",{\"1\":{\"2472\":1}}],[\"当我们要对集合中的每个元素进行操作\",{\"1\":{\"2472\":1}}],[\"当我们找到了一个除了方法名不一样\",{\"1\":{\"2399\":1}}],[\"当我们通过代理类的对象\",{\"1\":{\"2343\":1}}],[\"当我们通过子类的构造器创建子类对象时\",{\"1\":{\"1392\":1}}],[\"当我们编写一个类时\",{\"1\":{\"1471\":1}}],[\"当我们输出一个对象的引用时\",{\"1\":{\"1431\":1}}],[\"当我们在全文域搜索的时候\",{\"1\":{\"3470\":1}}],[\"当我们在父类中定义了非空参构造器时\",{\"1\":{\"1388\":1}}],[\"当我们在一个类中调用属性或方法时\",{\"1\":{\"1383\":1}}],[\"当我们调用此方法时\",{\"1\":{\"1354\":1}}],[\"当我们使用一个类时\",{\"1\":{\"1302\":1}}],[\"当我们与常量数值进行运算时\",{\"1\":{\"1098\":1}}],[\"当值为false时\",{\"1\":{\"1179\":1}}],[\"当调用thread类的run方法时\",{\"1\":{\"1741\":1}}],[\"当调用方法时\",{\"1\":{\"1295\":1}}],[\"当调用可变个数形参的方法时\",{\"1\":{\"1295\":1}}],[\"当调用完执行语句以后\",{\"1\":{\"1175\":1}}],[\"当调用string的replace\",{\"1\":{\"1128\":1}}],[\"当左边为真\",{\"1\":{\"1153\":1}}],[\"当对文档进行修改时\",{\"1\":{\"3493\":1}}],[\"当对属性进行修改时\",{\"1\":{\"1549\":1}}],[\"当对数组本身进行修改\",{\"1\":{\"1227\":1}}],[\"当对数组进行初始化\",{\"1\":{\"1223\":1}}],[\"当对现有的字符串进行连接操作时\",{\"1\":{\"1128\":1}}],[\"当对字符串重新赋值时\",{\"1\":{\"1128\":1}}],[\"当byte\",{\"1\":{\"1113\":1}}],[\"当两个不同对象的哈希值相同时\",{\"1\":{\"1900\":1}}],[\"当两个不同的数据类型之间进行运算时\",{\"1\":{\"1112\":1}}],[\"当两个数组中所有元素都相等时\",{\"1\":{\"896\":1}}],[\"当安装了多个版本的jdk时\",{\"1\":{\"1030\":1}}],[\"当提示安装\",{\"1\":{\"1027\":1}}],[\"当参数为system\",{\"1\":{\"886\":1,\"1007\":1}}],[\"当字符取模5有余数时\",{\"1\":{\"817\":1,\"2056\":1}}],[\"当除不尽的时候\",{\"1\":{\"782\":1}}],[\"当元素的类型没有实现java\",{\"1\":{\"752\":1}}],[\"当年龄相同时\",{\"1\":{\"749\":1}}],[\"当添加的字符串超过16时\",{\"1\":{\"694\":1}}],[\"当需要释放内存或者容器关闭时\",{\"1\":{\"2798\":1}}],[\"当需要建立数据库连接时\",{\"1\":{\"2664\":1}}],[\"当需要成批插入或者更新记录时\",{\"1\":{\"2614\":1}}],[\"当需要定义一组常量时\",{\"1\":{\"1616\":1}}],[\"当需要根据不同的环境或配置选项加载额外的配置时\",{\"1\":{\"567\":1}}],[\"当需要加载第三方开发的bean的时候\",{\"1\":{\"510\":1}}],[\"当创建了importselector接口的实现类后\",{\"1\":{\"524\":1}}],[\"当消息出现后\",{\"1\":{\"455\":1}}],[\"当交换机想队列中推送消息时\",{\"1\":{\"447\":1}}],[\"当任意一个组件状态不为up时\",{\"1\":{\"349\":1}}],[\"当\",{\"1\":{\"342\":1,\"1653\":1,\"1678\":1,\"3367\":1,\"3517\":1,\"3527\":1}}],[\"当使用bufferedinputstream读取字节文件时\",{\"1\":{\"2074\":1}}],[\"当使用\",{\"1\":{\"342\":1}}],[\"当配置展示所有信息后\",{\"1\":{\"328\":1}}],[\"当servletrequest中的属性被修改时调用\",{\"1\":{\"2967\":1}}],[\"当servletcontext中的属性被修改时调用\",{\"1\":{\"2965\":1}}],[\"当servlet进行响应时\",{\"1\":{\"2948\":1}}],[\"当servlet第一次被访问时\",{\"1\":{\"2793\":1}}],[\"当s1和s2同时结束阻塞准备拿下一个锁的时候\",{\"1\":{\"1796\":1}}],[\"当scan为true时\",{\"1\":{\"308\":1}}],[\"当springboot项目启动时\",{\"1\":{\"182\":1}}],[\"当测试类与引导类的包不匹配时\",{\"1\":{\"229\":1}}],[\"当代码修改后\",{\"1\":{\"177\":1}}],[\"当覆盖时\",{\"1\":{\"141\":1}}],[\"当然也可以将仲裁服务器维护为副本集的一部分\",{\"1\":{\"3645\":1}}],[\"当然也可以存储在磁盘文件\",{\"1\":{\"2525\":1}}],[\"当然你也可以独立的存储某个字段\",{\"1\":{\"3197\":1}}],[\"当然如果是可执行jar包\",{\"1\":{\"2981\":1}}],[\"当然如果发生异常\",{\"1\":{\"1689\":1}}],[\"当然类需要加入bean\",{\"1\":{\"448\":1}}],[\"当然lettcus也支持多连接实例一起工作\",{\"1\":{\"382\":1}}],[\"当然\",{\"1\":{\"138\":1,\"1383\":1,\"3362\":1}}],[\"当前是在一台设备上模拟的副本集\",{\"1\":{\"3727\":1}}],[\"当前是第几页\",{\"1\":{\"627\":1}}],[\"当前\",{\"1\":{\"3543\":1}}],[\"当前我们的集群是正常运行的\",{\"1\":{\"3384\":1}}],[\"当前已经不支持自定义\",{\"1\":{\"3361\":1}}],[\"当前配置的url\",{\"1\":{\"3308\":1,\"3330\":1}}],[\"当前页的起始索引\",{\"1\":{\"3182\":1,\"3241\":1}}],[\"当前服务器健康状态\",{\"1\":{\"3127\":1}}],[\"当前开发\",{\"1\":{\"3031\":1}}],[\"当前版本\",{\"1\":{\"3552\":1}}],[\"当前版本的tomcat已经解决了get方式的乱码问题\",{\"1\":{\"2874\":1}}],[\"当前版本为\",{\"1\":{\"573\":1}}],[\"当前类提供一个全局常量\",{\"1\":{\"2153\":1}}],[\"当前线程被阻塞\",{\"1\":{\"1804\":1}}],[\"当前线程将释放对象监控权\",{\"1\":{\"1800\":1}}],[\"当前线程必须具有对该对象的监控权\",{\"1\":{\"1800\":1,\"1801\":1}}],[\"当前线程就进入阻塞状态\",{\"1\":{\"1799\":1}}],[\"当前线程暂停\",{\"1\":{\"1774\":1}}],[\"当前线程在同步代码块\",{\"1\":{\"1774\":3}}],[\"当前线程的同步方法\",{\"1\":{\"1774\":1}}],[\"当前线程是阻塞状态\",{\"1\":{\"1727\":1}}],[\"当前jvm将退出\",{\"1\":{\"1711\":1}}],[\"当前module的src下\",{\"1\":{\"2282\":1}}],[\"当前mongotemplate类无法直接通过\",{\"1\":{\"393\":1}}],[\"当前mongodb版本为\",{\"1\":{\"84\":1,\"85\":1}}],[\"当前map对象中\",{\"1\":{\"959\":1}}],[\"当前还没有被监控的项目\",{\"1\":{\"321\":1}}],[\"当前项目具体引入的依赖合集\",{\"1\":{\"125\":1}}],[\"当前找不到太多相关中文资料\",{\"1\":{\"84\":1,\"85\":1}}],[\"当前市面上依然流行的es7\",{\"1\":{\"80\":1,\"81\":1}}],[\"当前处于建设阶段\",{\"1\":{\"0\":1,\"12\":1,\"47\":1,\"64\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1}}],[\"当软件开发工程师\",{\"1\":{\"37\":1}}],[\"当掌握某个知识点后\",{\"1\":{\"1\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
