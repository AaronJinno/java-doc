const rt="ENTRIES",W="KEYS",$="VALUES",F="";class M{constructor(t,s){const n=t._tree,u=Array.from(n.keys());this.set=t,this._type=s,this._path=u.length>0?[{node:n,keys:u}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=C(this._path);if(C(s)===F)return{done:!1,value:this.result()};const n=t.get(C(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=C(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>C(t)).filter(t=>t!==F).join("")}value(){return C(this._path).node.get(F)}result(){switch(this._type){case $:return this.value();case W:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const C=e=>e[e.length-1],ct=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const u=t.length+1,o=u+s,i=new Uint8Array(o*u).fill(s+1);for(let r=0;r<u;++r)i[r]=r;for(let r=1;r<o;++r)i[r*u]=r;return R(e,t,s,n,i,1,u,""),n},R=(e,t,s,n,u,o,i,r)=>{const h=o*i;t:for(const c of e.keys())if(c===F){const a=u[h-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=o;for(let l=0;l<c.length;++l,++a){const m=c[l],g=i*a,f=g-i;let d=u[g];const p=Math.max(0,a-s-1),_=Math.min(i-1,a+s);for(let A=p;A<_;++A){const O=m!==t[A],x=u[f+A]+ +O,y=u[f+A+1]+1,k=u[g+A]+1,T=u[g+A+1]=Math.min(x,y,k);T<d&&(d=T)}if(d>s)continue t}R(e.get(c),t,s,n,u,a,i,r+c)}};let q=class w{constructor(t=new Map,s=""){this._size=void 0,this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=v(this._tree,t.slice(this._prefix.length));if(s===void 0){const[u,o]=j(n);for(const i of u.keys())if(i!==F&&i.startsWith(o)){const r=new Map;return r.set(i.slice(o.length),u.get(i)),new w(r,t)}}return new w(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,lt(this._tree,t)}entries(){return new M(this,rt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ct(this._tree,t,s)}get(t){const s=B(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=B(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new M(this,W)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,S(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=S(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=S(this._tree,t);let u=n.get(F);return u===void 0&&n.set(F,u=s()),u}values(){return new M(this,$)}[Symbol.iterator](){return this.entries()}static from(t){const s=new w;for(const[n,u]of t)s.set(n,u);return s}static fromObject(t){return w.from(Object.entries(t))}};const v=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),v(e.get(n),t.slice(n.length),s);return s.push([e,t]),v(void 0,"",s)},B=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return B(e.get(s),t.slice(s.length))},S=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const o of e.keys())if(o!==F&&t[n]===o[0]){const i=Math.min(s-n,o.length);let r=1;for(;r<i&&t[n+r]===o[r];)++r;const h=e.get(o);if(r===o.length)e=h;else{const c=new Map;c.set(o.slice(r),h),e.set(t.slice(n,n+r),c),e.delete(o),e=c}n+=r;continue t}const u=new Map;return e.set(t.slice(n),u),u}return e},lt=(e,t)=>{const[s,n]=v(e,t);if(s!==void 0){if(s.delete(F),s.size===0)P(n);else if(s.size===1){const[u,o]=s.entries().next().value;N(n,u,o)}}},P=e=>{if(e.length===0)return;const[t,s]=j(e);if(t.delete(s),t.size===0)P(e.slice(0,-1));else if(t.size===1){const[n,u]=t.entries().next().value;n!==F&&N(e.slice(0,-1),n,u)}},N=(e,t,s)=>{if(e.length===0)return;const[n,u]=j(e);n.set(u+t,s),n.delete(u)},j=e=>e[e.length-1],ht=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,L="or",G="and",dt="and_not",at=(e,t)=>{e.includes(t)||e.push(t)},J=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},U=({score:e},{score:t})=>t-e,ft=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},H=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,gt={[L]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:u,terms:o,match:i}=t.get(s);n.score=n.score+u,n.match=Object.assign(n.match,i),J(n.terms,o)}}return e},[G]:(e,t)=>{const s=new Map;for(const n of t.keys()){const u=e.get(n);if(u==null)continue;const{score:o,terms:i,match:r}=t.get(n);J(u.terms,i),s.set(n,{score:u.score+o,terms:u.terms,match:Object.assign(u.match,r)})}return s},[dt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},pt=(e,t,s,n,u,o)=>{const{k:i,b:r,d:h}=o;return Math.log(1+(s-t+.5)/(t+.5))*(h+e*(i+1)/(e+i*(1-r+r*n/u)))},mt=e=>(t,s,n)=>{const u=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,o=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:u,prefix:o}},Ft={k:1.2,b:.7,d:.5},_t={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(ht),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof(console==null?void 0:console[e])=="function"&&console[e](t)},autoVacuum:!0},K={combineWith:L,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:Ft},At={combineWith:G,prefix:(e,t,s)=>t===s.length-1},yt={batchSize:1e3,batchWait:10},X={minDirtFactor:.1,minDirtCount:20},Ct={...yt,...X};class zt{constructor(t){if((t==null?void 0:t.fields)==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?Ct:t.autoVacuum;this._options={..._t,...t,autoVacuum:s,searchOptions:{...K,...t.searchOptions||{}},autoSuggestOptions:{...At,...t.autoSuggestOptions||{}}},this._index=new q,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=X,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const u={};for(const[o,i]of n)u[o]=Object.fromEntries(i);t.push([s,u])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const Y=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},Q=(e,t,s,n)=>{for(const u of Object.keys(e._fieldIds))if(e._fieldIds[u]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${u}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},Et=(e,t,s,n)=>{if(!e._index.has(n)){Q(e,s,t,n);return}const u=e._index.fetch(n,ft),o=u.get(t);o==null||o.get(s)==null?Q(e,s,t,n):o.get(s)<=1?o.size<=1?u.delete(t):o.delete(s):o.set(s,o.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},Z=(e,t=L)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(gt[s])||new Map},V=(e,t,s,n,u,o,i,r,h=new Map)=>{if(u==null)return h;for(const c of Object.keys(o)){const a=o[c],l=e._fieldIds[c],m=u.get(l);if(m==null)continue;let g=m.size;const f=e._avgFieldLength[l];for(const d of m.keys()){if(!e._documentIds.has(d)){Et(e,l,d,s),g-=1;continue}const p=i?i(e._documentIds.get(d),s,e._storedFields.get(d)):1;if(!p)continue;const _=m.get(d),A=e._fieldLength.get(d)[l],O=pt(_,g,e._documentCount,A,f,r),x=n*a*p*O,y=h.get(d);if(y){y.score+=x,at(y.terms,t);const k=H(y.match,s);k?k.push(c):y.match[s]=[c]}else h.set(d,{score:x,terms:[t],match:{[s]:[c]}})}}return h},wt=(e,t,s)=>{const n={...e._options.searchOptions,...s},u=(n.fields||e._options.fields).reduce((d,p)=>({...d,[p]:H(n.boost,p)||1}),{}),{boostDocument:o,weights:i,maxFuzzy:r,bm25:h}=n,{fuzzy:c,prefix:a}={...K.weights,...i},l=e._index.get(t.term),m=V(e,t.term,t.term,1,l,u,o,h);let g,f;if(t.prefix&&(g=e._index.atPrefix(t.term)),t.fuzzy){const d=t.fuzzy===!0?.2:t.fuzzy,p=d<1?Math.min(r,Math.round(t.term.length*d)):d;p&&(f=e._index.fuzzyGet(t.term,p))}if(g)for(const[d,p]of g){const _=d.length-t.term.length;if(!_)continue;f==null||f.delete(d);const A=a*d.length/(d.length+.3*_);V(e,t.term,d,A,p,u,o,h,m)}if(f)for(const d of f.keys()){const[p,_]=f.get(d);if(!_)continue;const A=c*d.length/(d.length+_);V(e,t.term,d,A,p,u,o,h,m)}return m},tt=(e,t,s={})=>{if(typeof t!="string"){const a={...s,...t,queries:void 0},l=t.queries.map(m=>tt(e,m,a));return Z(l,a.combineWith)}const{tokenize:n,processTerm:u,searchOptions:o}=e._options,i={tokenize:n,processTerm:u,...o,...s},{tokenize:r,processTerm:h}=i,c=r(t).flatMap(a=>h(a)).filter(a=>!!a).map(mt(i)).map(a=>wt(e,a,i));return Z(c,i.combineWith)},et=(e,t,s={})=>{const n=tt(e,t,s),u=[];for(const[o,{score:i,terms:r,match:h}]of n){const c=r.length,a={id:e._documentIds.get(o),score:i*c,terms:Object.keys(h),match:h};Object.assign(a,e._storedFields.get(o)),(s.filter==null||s.filter(a))&&u.push(a)}return u.sort(U),u},xt=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:o,terms:i}of et(e,t,s)){const r=i.join(" "),h=n.get(r);h!=null?(h.score+=o,h.count+=1):n.set(r,{score:o,terms:i,count:1})}const u=[];for(const[o,{score:i,terms:r,count:h}]of n)u.push({suggestion:o,terms:r,score:i/h});return u.sort(U),u},kt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:u,fieldLength:o,averageFieldLength:i,storedFields:r,dirtCount:h,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const l=new zt(a);l._documentCount=t,l._nextId=s,l._documentIds=b(n),l._idToShortId=new Map,l._fieldIds=u,l._fieldLength=b(o),l._avgFieldLength=i,l._storedFields=b(r),l._dirtCount=h||0,l._index=new q;for(const[m,g]of l._documentIds)l._idToShortId.set(g,m);for(const[m,g]of e){const f=new Map;for(const d of Object.keys(g)){let p=g[d];c===1&&(p=p.ds),f.set(parseInt(d,10),b(p))}l._index.set(m,f)}return l},st=Object.entries,vt=Object.fromEntries,z=100,E=20,D=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),u=[];let o=0,i=0;const r=(c,a=!1)=>{let l="";i===0?l=c.length>E?`… ${c.slice(-E)}`:c:a?l=c.length+i>z?`${c.slice(0,z-i)}… `:c:l=c.length>E?`${c.slice(0,E)} … ${c.slice(-E)}`:c,l&&u.push(l),i+=l.length,a||(u.push(["mark",t]),i+=t.length,i>=z&&u.push(" …"))};let h=s.indexOf(n,o);if(h===-1)return null;for(;h>=0;){const c=h+n.length;if(r(e.slice(o,h)),o=c,i>z)break;h=s.indexOf(n,o)}return i<z&&r(e.slice(o),!0),u},nt=/[\u4e00-\u9fa5]/g,ut=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(nt)||[],n=t.replace(nt,"").toLowerCase();return n?[n,...s]:[...s]},...e}),ot=(e,t,s={})=>{const n={};return et(t,e,ut({boost:{h:2,t:1,c:4},...s})).forEach(u=>{const{id:o,terms:i,score:r}=u,h=o.includes("/"),c=!h&&o.includes("#"),a=o.includes("@"),[l,m]=o.split(/[#@]/),{contents:g}=n[l]??={title:"",contents:[]};if(c)g.push([{type:"heading",key:l,anchor:u.a,display:i.map(f=>D(u.h,f)).filter(f=>f!==null)},r]);else if(h){const[f]=m.split("/"),{h:d="",a:p=""}=Y(t,`${l}#${f}`)||{};g.push([{type:"text",key:l,header:d,anchor:p,display:i.map(_=>D(u.t,_)).filter(_=>_!==null)},r])}else a?g.push([{type:"customField",key:l,index:m,display:i.map(f=>u.c.map(d=>D(d,f))).flat().filter(f=>f!==null)},r]):g.push([{type:"title",key:l,display:i.map(f=>D(u.h,f)).filter(f=>f!==null)},r])}),st(n).sort(([,u],[,o])=>o.contents.reduce((i,[,r])=>i+r,0)-u.contents.reduce((i,[,r])=>i+r,0)).map(([u,{title:o,contents:i}])=>{if(!o){const r=Y(t,u);r&&(o=r.h)}return{title:o,contents:i.map(([r])=>r)}})},it=(e,t,s={})=>xt(t,e,ut(s)).map(({suggestion:n})=>n),I=vt(st(JSON.parse("{\"/\":{\"documentCount\":10896,\"nextId\":10896,\"documentIds\":{\"0\":\"v-fffb8e28\",\"1\":\"v-fffb8e28#0/0\",\"2\":\"v-fffb8e28#0/1\",\"3\":\"v-96ccce3a\",\"4\":\"v-96ccce3a#1\",\"5\":\"v-96ccce3a#1/0\",\"6\":\"v-96ccce3a#1/1\",\"7\":\"v-96ccce3a#1/2\",\"8\":\"v-96ccce3a#1/3\",\"9\":\"v-96ccce3a#1/4\",\"10\":\"v-96ccce3a#1/5\",\"11\":\"v-96ccce3a#1/6\",\"12\":\"v-96ccce3a#1/7\",\"13\":\"v-96ccce3a#1/8\",\"14\":\"v-96ccce3a#1/9\",\"15\":\"v-96ccce3a#1/10\",\"16\":\"v-96ccce3a#1/11\",\"17\":\"v-96ccce3a#1/12\",\"18\":\"v-96ccce3a#1/13\",\"19\":\"v-96ccce3a#1/14\",\"20\":\"v-96ccce3a#1/15\",\"21\":\"v-96ccce3a#1/16\",\"22\":\"v-96ccce3a#1/17\",\"23\":\"v-96ccce3a#1/18\",\"24\":\"v-96ccce3a#1/19\",\"25\":\"v-96ccce3a#1/20\",\"26\":\"v-14c0e823\",\"27\":\"v-14c0e823#0/0\",\"28\":\"v-14c0e823#0/1\",\"29\":\"v-b2aeabc0\",\"30\":\"v-b2aeabc0#0/0\",\"31\":\"v-b2aeabc0#0/1\",\"32\":\"v-5f3d460d\",\"33\":\"v-5f3d460d#0/0\",\"34\":\"v-5f3d460d#0/1\",\"35\":\"v-7cb8733b\",\"36\":\"v-7cb8733b#0/0\",\"37\":\"v-7cb8733b#0/1\",\"38\":\"v-58f3e54b\",\"39\":\"v-58f3e54b#0/0\",\"40\":\"v-58f3e54b#0/1\",\"41\":\"v-61ce9c38\",\"42\":\"v-61ce9c38#0/0\",\"43\":\"v-61ce9c38#0/1\",\"44\":\"v-2c452238\",\"45\":\"v-2c452238#0/0\",\"46\":\"v-2c452238#0/1\",\"47\":\"v-283f2e43\",\"48\":\"v-283f2e43#0/0\",\"49\":\"v-283f2e43#0/1\",\"50\":\"v-805bcbd6\",\"51\":\"v-805bcbd6#0/0\",\"52\":\"v-805bcbd6#0/1\",\"53\":\"v-cfd8e348\",\"54\":\"v-cfd8e348#0/0\",\"55\":\"v-cfd8e348#0/1\",\"56\":\"v-0e153f58\",\"57\":\"v-0e153f58#0/0\",\"58\":\"v-0e153f58#0/1\",\"59\":\"v-7aac2bfa\",\"60\":\"v-7aac2bfa#0/0\",\"61\":\"v-7aac2bfa#0/1\",\"62\":\"v-3f989e78\",\"63\":\"v-3f989e78#0/0\",\"64\":\"v-3f989e78#0/1\",\"65\":\"v-7f862bd6\",\"66\":\"v-7f862bd6#0/0\",\"67\":\"v-7f862bd6#0/1\",\"68\":\"v-f976cbdc\",\"69\":\"v-f976cbdc#0/0\",\"70\":\"v-f976cbdc#0/1\",\"71\":\"v-f976cbdc#0/2\",\"72\":\"v-f976cbdc#0/3\",\"73\":\"v-f976cbdc#0/4\",\"74\":\"v-f976cbdc#0/5\",\"75\":\"v-f976cbdc#0/6\",\"76\":\"v-f976cbdc#0/7\",\"77\":\"v-f976cbdc#0/8\",\"78\":\"v-f976cbdc#0/9\",\"79\":\"v-f976cbdc#0/10\",\"80\":\"v-f976cbdc#0/11\",\"81\":\"v-f976cbdc#0/12\",\"82\":\"v-f976cbdc#0/13\",\"83\":\"v-f976cbdc#0/14\",\"84\":\"v-f976cbdc#0/15\",\"85\":\"v-f976cbdc#0/16\",\"86\":\"v-f976cbdc#0/17\",\"87\":\"v-f976cbdc#0/18\",\"88\":\"v-f976cbdc#0/19\",\"89\":\"v-f976cbdc#0/20\",\"90\":\"v-f976cbdc#0/21\",\"91\":\"v-f976cbdc#0/22\",\"92\":\"v-f976cbdc#0/23\",\"93\":\"v-f976cbdc#0/24\",\"94\":\"v-f976cbdc#0/25\",\"95\":\"v-f976cbdc#0/26\",\"96\":\"v-f976cbdc#0/27\",\"97\":\"v-f976cbdc#0/28\",\"98\":\"v-f976cbdc#0/29\",\"99\":\"v-f976cbdc#0/30\",\"100\":\"v-f976cbdc#0/31\",\"101\":\"v-f976cbdc#0/32\",\"102\":\"v-0f5da1fa\",\"103\":\"v-0f5da1fa#0/0\",\"104\":\"v-0f5da1fa#0/1\",\"105\":\"v-19f66ce2\",\"106\":\"v-19f66ce2#1\",\"107\":\"v-19f66ce2#1/0\",\"108\":\"v-19f66ce2#2\",\"109\":\"v-19f66ce2#2/0\",\"110\":\"v-19f66ce2#2/1\",\"111\":\"v-19f66ce2#2/2\",\"112\":\"v-19f66ce2#2/3\",\"113\":\"v-19f66ce2#2/4\",\"114\":\"v-19f66ce2#2/5\",\"115\":\"v-19f66ce2#2/6\",\"116\":\"v-19f66ce2#3\",\"117\":\"v-19f66ce2#3/0\",\"118\":\"v-19f66ce2#3/1\",\"119\":\"v-19f66ce2#3/2\",\"120\":\"v-23f57c4e\",\"121\":\"v-23f57c4e#0/0\",\"122\":\"v-23f57c4e#0/1\",\"123\":\"v-4f3d8174\",\"124\":\"v-4f3d8174#1\",\"125\":\"v-4f3d8174#1/0\",\"126\":\"v-4f3d8174#1/1\",\"127\":\"v-4f3d8174#1/2\",\"128\":\"v-4f3d8174#1/3\",\"129\":\"v-4f3d8174#1/4\",\"130\":\"v-4f3d8174#1/5\",\"131\":\"v-4f3d8174#1/6\",\"132\":\"v-4f3d8174#1/7\",\"133\":\"v-4f3d8174#2\",\"134\":\"v-4f3d8174#2/0\",\"135\":\"v-4f3d8174#2/1\",\"136\":\"v-4f3d8174#2/2\",\"137\":\"v-4f3d8174#2/3\",\"138\":\"v-4f3d8174#2/4\",\"139\":\"v-4f3d8174#2/5\",\"140\":\"v-4f3d8174#3\",\"141\":\"v-4f3d8174#3/0\",\"142\":\"v-735d6ea1\",\"143\":\"v-735d6ea1#0/0\",\"144\":\"v-735d6ea1#0/1\",\"145\":\"v-2466e178\",\"146\":\"v-2466e178#0/0\",\"147\":\"v-2466e178#0/1\",\"148\":\"v-41d73924\",\"149\":\"v-41d73924#0/0\",\"150\":\"v-41d73924#0/1\",\"151\":\"v-5754cb9f\",\"152\":\"v-5754cb9f#0/0\",\"153\":\"v-5754cb9f#0/1\",\"154\":\"v-7ae11416\",\"155\":\"v-7ae11416#0/0\",\"156\":\"v-7ae11416#0/1\",\"157\":\"v-1085741c\",\"158\":\"v-1085741c#0/0\",\"159\":\"v-1085741c#0/1\",\"160\":\"v-e0934ad8\",\"161\":\"v-e0934ad8#0/0\",\"162\":\"v-e0934ad8#0/1\",\"163\":\"v-48411b91\",\"164\":\"v-48411b91#0/0\",\"165\":\"v-48411b91#0/1\",\"166\":\"v-6f11ae20\",\"167\":\"v-6f11ae20#0/0\",\"168\":\"v-6f11ae20#0/1\",\"169\":\"v-3bf3b9c6\",\"170\":\"v-3bf3b9c6#0/0\",\"171\":\"v-3bf3b9c6#0/1\",\"172\":\"v-8acce1b0\",\"173\":\"v-8acce1b0#0/0\",\"174\":\"v-8acce1b0#0/1\",\"175\":\"v-7e407c25\",\"176\":\"v-7e407c25#0/0\",\"177\":\"v-7e407c25#0/1\",\"178\":\"v-c5ed1ec8\",\"179\":\"v-c5ed1ec8#0/0\",\"180\":\"v-c5ed1ec8#0/1\",\"181\":\"v-537cacce\",\"182\":\"v-537cacce#0/0\",\"183\":\"v-537cacce#0/1\",\"184\":\"v-5f50a4e4\",\"185\":\"v-5f50a4e4#0/0\",\"186\":\"v-5f50a4e4#0/1\",\"187\":\"v-0e44d48b\",\"188\":\"v-0e44d48b#0/0\",\"189\":\"v-0e44d48b#0/1\",\"190\":\"v-58ba60b0\",\"191\":\"v-58ba60b0#0/0\",\"192\":\"v-58ba60b0#0/1\",\"193\":\"v-877d86b6\",\"194\":\"v-877d86b6#0/0\",\"195\":\"v-877d86b6#0/1\",\"196\":\"v-4791705c\",\"197\":\"v-4791705c#0/0\",\"198\":\"v-4791705c#0/1\",\"199\":\"v-5817eacf\",\"200\":\"v-5817eacf#0/0\",\"201\":\"v-5817eacf#0/1\",\"202\":\"v-1762ff32\",\"203\":\"v-1762ff32#0/0\",\"204\":\"v-1762ff32#0/1\",\"205\":\"v-a5688338\",\"206\":\"v-a5688338#0/0\",\"207\":\"v-a5688338#0/1\",\"208\":\"v-a5688338#0/2\",\"209\":\"v-a5688338#0/3\",\"210\":\"v-a5688338#0/4\",\"211\":\"v-a5688338#0/5\",\"212\":\"v-a5688338#0/6\",\"213\":\"v-a5688338#0/7\",\"214\":\"v-a5688338#0/8\",\"215\":\"v-a5688338#0/9\",\"216\":\"v-a5688338#0/10\",\"217\":\"v-a5688338#0/11\",\"218\":\"v-a5688338#0/12\",\"219\":\"v-a5688338#0/13\",\"220\":\"v-a5688338#0/14\",\"221\":\"v-a5688338#0/15\",\"222\":\"v-a5688338#0/16\",\"223\":\"v-a5688338#0/17\",\"224\":\"v-a5688338#0/18\",\"225\":\"v-a5688338#0/19\",\"226\":\"v-a5688338#0/20\",\"227\":\"v-a5688338#0/21\",\"228\":\"v-a5688338#0/22\",\"229\":\"v-a5688338#0/23\",\"230\":\"v-a5688338#0/24\",\"231\":\"v-a5688338#0/25\",\"232\":\"v-a5688338#0/26\",\"233\":\"v-a5688338#0/27\",\"234\":\"v-a5688338#0/28\",\"235\":\"v-a5688338#0/29\",\"236\":\"v-a5688338#0/30\",\"237\":\"v-a5688338#0/31\",\"238\":\"v-a5688338#0/32\",\"239\":\"v-a5688338#0/33\",\"240\":\"v-a5688338#0/34\",\"241\":\"v-a5688338#0/35\",\"242\":\"v-a5688338#0/36\",\"243\":\"v-a5688338#0/37\",\"244\":\"v-a5688338#0/38\",\"245\":\"v-a5688338#0/39\",\"246\":\"v-a5688338#0/40\",\"247\":\"v-a5688338#0/41\",\"248\":\"v-4bca14b0\",\"249\":\"v-4bca14b0#0/0\",\"250\":\"v-4bca14b0#0/1\",\"251\":\"v-19993ab6\",\"252\":\"v-19993ab6#0/0\",\"253\":\"v-19993ab6#0/1\",\"254\":\"v-f55442d2\",\"255\":\"v-f55442d2#0/0\",\"256\":\"v-f55442d2#0/1\",\"257\":\"v-f55442d2#0/2\",\"258\":\"v-f55442d2#0/3\",\"259\":\"v-f55442d2#0/4\",\"260\":\"v-f55442d2#0/5\",\"261\":\"v-f55442d2#0/6\",\"262\":\"v-f55442d2#0/7\",\"263\":\"v-34e9ec94\",\"264\":\"v-34e9ec94#0/0\",\"265\":\"v-34e9ec94#0/1\",\"266\":\"v-34e9ec94#0/2\",\"267\":\"v-34e9ec94#0/3\",\"268\":\"v-34e9ec94#0/4\",\"269\":\"v-34e9ec94#0/5\",\"270\":\"v-34e9ec94#0/6\",\"271\":\"v-34e9ec94#0/7\",\"272\":\"v-496c42e7\",\"273\":\"v-496c42e7#0/0\",\"274\":\"v-496c42e7#0/1\",\"275\":\"v-d881fe38\",\"276\":\"v-d881fe38#0/0\",\"277\":\"v-d881fe38#0/1\",\"278\":\"v-50d3b92e\",\"279\":\"v-50d3b92e#0/0\",\"280\":\"v-50d3b92e#0/1\",\"281\":\"v-23697faa\",\"282\":\"v-23697faa#0/0\",\"283\":\"v-23697faa#0/1\",\"284\":\"v-05918a78\",\"285\":\"v-05918a78#0/0\",\"286\":\"v-05918a78#0/1\",\"287\":\"v-05918a78#1\",\"288\":\"v-05918a78#1/0\",\"289\":\"v-05918a78#2\",\"290\":\"v-05918a78#2/0\",\"291\":\"v-05918a78#2/1\",\"292\":\"v-05918a78#2/2\",\"293\":\"v-05918a78#2/3\",\"294\":\"v-05918a78#3\",\"295\":\"v-05918a78#3/0\",\"296\":\"v-05918a78#3/1\",\"297\":\"v-05918a78#3/2\",\"298\":\"v-05918a78#3/3\",\"299\":\"v-1b838722\",\"300\":\"v-1b838722#0/0\",\"301\":\"v-1b838722#0/1\",\"302\":\"v-1b838722#0/2\",\"303\":\"v-1b838722#1\",\"304\":\"v-1b838722#1/0\",\"305\":\"v-1b838722#1/1\",\"306\":\"v-1b838722#1/2\",\"307\":\"v-1b838722#1/3\",\"308\":\"v-1b838722#1/4\",\"309\":\"v-1b838722#1/5\",\"310\":\"v-1b838722#1/6\",\"311\":\"v-1b838722#1/7\",\"312\":\"v-1b838722#1/8\",\"313\":\"v-1b838722#1/9\",\"314\":\"v-1b838722#1/10\",\"315\":\"v-1b838722#1/11\",\"316\":\"v-1b838722#2\",\"317\":\"v-1b838722#2/0\",\"318\":\"v-1b838722#2/1\",\"319\":\"v-1b838722#2/2\",\"320\":\"v-1b838722#2/3\",\"321\":\"v-1b838722#2/4\",\"322\":\"v-1b838722#2/5\",\"323\":\"v-1b838722#2/6\",\"324\":\"v-1b838722#2/7\",\"325\":\"v-1b838722#2/8\",\"326\":\"v-1b838722#3\",\"327\":\"v-1b838722#3/0\",\"328\":\"v-1b838722#3/1\",\"329\":\"v-1b838722#3/2\",\"330\":\"v-1b838722#3/3\",\"331\":\"v-1b838722#4\",\"332\":\"v-1b838722#4/0\",\"333\":\"v-1b838722#4/1\",\"334\":\"v-1b838722#4/2\",\"335\":\"v-1b838722#4/3\",\"336\":\"v-1b838722#4/4\",\"337\":\"v-1b838722#4/5\",\"338\":\"v-1b838722#4/6\",\"339\":\"v-1b838722#4/7\",\"340\":\"v-1b838722#4/8\",\"341\":\"v-1b838722#5\",\"342\":\"v-1b838722#6\",\"343\":\"v-1b838722#6/0\",\"344\":\"v-1b838722#6/1\",\"345\":\"v-1b838722#6/2\",\"346\":\"v-1b838722#6/3\",\"347\":\"v-1b838722#6/4\",\"348\":\"v-1b838722#7\",\"349\":\"v-1b838722#7/5\",\"350\":\"v-1b838722#7/6\",\"351\":\"v-1b838722#8\",\"352\":\"v-1b838722#8/0\",\"353\":\"v-1b838722#9\",\"354\":\"v-1b838722#9/0\",\"355\":\"v-1b838722#9/1\",\"356\":\"v-1b838722#9/2\",\"357\":\"v-1b838722#9/3\",\"358\":\"v-1b838722#10\",\"359\":\"v-1b838722#11\",\"360\":\"v-1b838722#11/0\",\"361\":\"v-1b838722#11/1\",\"362\":\"v-1b838722#11/2\",\"363\":\"v-1b838722#12\",\"364\":\"v-1b838722#12/0\",\"365\":\"v-1b838722#12/1\",\"366\":\"v-58f9eea8\",\"367\":\"v-58f9eea8#1\",\"368\":\"v-58f9eea8#1/0\",\"369\":\"v-58f9eea8#1/1\",\"370\":\"v-58f9eea8#2\",\"371\":\"v-58f9eea8#2/0\",\"372\":\"v-58f9eea8#2/1\",\"373\":\"v-58f9eea8#3\",\"374\":\"v-58f9eea8#3/2\",\"375\":\"v-58f9eea8#3/3\",\"376\":\"v-58f9eea8#4\",\"377\":\"v-58f9eea8#4/0\",\"378\":\"v-58f9eea8#4/1\",\"379\":\"v-58f9eea8#5\",\"380\":\"v-58f9eea8#6\",\"381\":\"v-58f9eea8#6/0\",\"382\":\"v-58f9eea8#7\",\"383\":\"v-58f9eea8#7/0\",\"384\":\"v-58f9eea8#8\",\"385\":\"v-58f9eea8#8/0\",\"386\":\"v-58f9eea8#8/1\",\"387\":\"v-58f9eea8#9\",\"388\":\"v-58f9eea8#9/0\",\"389\":\"v-58f9eea8#10\",\"390\":\"v-58f9eea8#10/0\",\"391\":\"v-58f9eea8#10/1\",\"392\":\"v-58f9eea8#11\",\"393\":\"v-58f9eea8#11/2\",\"394\":\"v-58f9eea8#11/3\",\"395\":\"v-58f9eea8#12\",\"396\":\"v-58f9eea8#12/4\",\"397\":\"v-58f9eea8#12/5\",\"398\":\"v-58f9eea8#13\",\"399\":\"v-58f9eea8#13/6\",\"400\":\"v-58f9eea8#13/7\",\"401\":\"v-58f9eea8#13/8\",\"402\":\"v-58f9eea8#13/9\",\"403\":\"v-58f9eea8#14\",\"404\":\"v-58f9eea8#14/0\",\"405\":\"v-58f9eea8#14/1\",\"406\":\"v-58f9eea8#14/2\",\"407\":\"v-58f9eea8#15\",\"408\":\"v-58f9eea8#16\",\"409\":\"v-58f9eea8#16/0\",\"410\":\"v-58f9eea8#16/1\",\"411\":\"v-58f9eea8#16/2\",\"412\":\"v-58f9eea8#16/3\",\"413\":\"v-58f9eea8#16/4\",\"414\":\"v-58f9eea8#17\",\"415\":\"v-58f9eea8#17/0\",\"416\":\"v-58f9eea8#17/1\",\"417\":\"v-58f9eea8#18\",\"418\":\"v-58f9eea8#18/0\",\"419\":\"v-58f9eea8#18/1\",\"420\":\"v-58f9eea8#18/2\",\"421\":\"v-58f9eea8#18/3\",\"422\":\"v-58f9eea8#19\",\"423\":\"v-58f9eea8#20\",\"424\":\"v-58f9eea8#20/0\",\"425\":\"v-58f9eea8#20/1\",\"426\":\"v-58f9eea8#21\",\"427\":\"v-58f9eea8#21/2\",\"428\":\"v-58f9eea8#21/3\",\"429\":\"v-58f9eea8#21/4\",\"430\":\"v-58f9eea8#21/5\",\"431\":\"v-58f9eea8#22\",\"432\":\"v-58f9eea8#22/6\",\"433\":\"v-58f9eea8#22/7\",\"434\":\"v-58f9eea8#22/8\",\"435\":\"v-58f9eea8#22/9\",\"436\":\"v-58f9eea8#23\",\"437\":\"v-58f9eea8#23/0\",\"438\":\"v-58f9eea8#24\",\"439\":\"v-58f9eea8#24/0\",\"440\":\"v-58f9eea8#25\",\"441\":\"v-58f9eea8#25/0\",\"442\":\"v-58f9eea8#26\",\"443\":\"v-58f9eea8#26/0\",\"444\":\"v-58f9eea8#27\",\"445\":\"v-58f9eea8#27/0\",\"446\":\"v-58f9eea8#27/1\",\"447\":\"v-58f9eea8#27/2\",\"448\":\"v-58f9eea8#28\",\"449\":\"v-58f9eea8#28/0\",\"450\":\"v-58f9eea8#28/1\",\"451\":\"v-5f0fc8f4\",\"452\":\"v-5f0fc8f4#0/0\",\"453\":\"v-5f0fc8f4#0/1\",\"454\":\"v-5f0fc8f4#1\",\"455\":\"v-5f0fc8f4#1/0\",\"456\":\"v-5f0fc8f4#1/1\",\"457\":\"v-5f0fc8f4#1/2\",\"458\":\"v-5f0fc8f4#2\",\"459\":\"v-5f0fc8f4#2/0\",\"460\":\"v-5f0fc8f4#3\",\"461\":\"v-5f0fc8f4#3/0\",\"462\":\"v-5f0fc8f4#3/1\",\"463\":\"v-5f0fc8f4#3/2\",\"464\":\"v-5f0fc8f4#3/3\",\"465\":\"v-5f0fc8f4#3/4\",\"466\":\"v-5f0fc8f4#4\",\"467\":\"v-5f0fc8f4#5\",\"468\":\"v-5f0fc8f4#5/5\",\"469\":\"v-5f0fc8f4#5/6\",\"470\":\"v-5f0fc8f4#6\",\"471\":\"v-5f0fc8f4#6/0\",\"472\":\"v-5f0fc8f4#6/1\",\"473\":\"v-5f0fc8f4#7\",\"474\":\"v-5f0fc8f4#7/0\",\"475\":\"v-5f0fc8f4#7/1\",\"476\":\"v-997e0fde\",\"477\":\"v-997e0fde#0/0\",\"478\":\"v-997e0fde#1\",\"479\":\"v-997e0fde#2\",\"480\":\"v-997e0fde#2/0\",\"481\":\"v-997e0fde#2/1\",\"482\":\"v-997e0fde#2/2\",\"483\":\"v-997e0fde#2/3\",\"484\":\"v-997e0fde#2/4\",\"485\":\"v-997e0fde#3\",\"486\":\"v-997e0fde#3/0\",\"487\":\"v-997e0fde#4\",\"488\":\"v-997e0fde#4/1\",\"489\":\"v-997e0fde#4/2\",\"490\":\"v-997e0fde#5\",\"491\":\"v-997e0fde#5/3\",\"492\":\"v-997e0fde#5/4\",\"493\":\"v-997e0fde#6\",\"494\":\"v-997e0fde#6/5\",\"495\":\"v-997e0fde#7\",\"496\":\"v-997e0fde#7/0\",\"497\":\"v-997e0fde#7/1\",\"498\":\"v-997e0fde#7/2\",\"499\":\"v-997e0fde#7/3\",\"500\":\"v-997e0fde#7/4\",\"501\":\"v-997e0fde#7/5\",\"502\":\"v-997e0fde#7/6\",\"503\":\"v-997e0fde#7/7\",\"504\":\"v-997e0fde#8\",\"505\":\"v-997e0fde#8/8\",\"506\":\"v-997e0fde#8/9\",\"507\":\"v-997e0fde#8/10\",\"508\":\"v-997e0fde#8/11\",\"509\":\"v-997e0fde#9\",\"510\":\"v-997e0fde#9/12\",\"511\":\"v-997e0fde#9/13\",\"512\":\"v-997e0fde#9/14\",\"513\":\"v-997e0fde#9/15\",\"514\":\"v-997e0fde#9/16\",\"515\":\"v-997e0fde#10\",\"516\":\"v-997e0fde#10/0\",\"517\":\"v-997e0fde#11\",\"518\":\"v-997e0fde#11/1\",\"519\":\"v-997e0fde#11/2\",\"520\":\"v-997e0fde#12\",\"521\":\"v-997e0fde#12/3\",\"522\":\"v-997e0fde#12/4\",\"523\":\"v-726603e4\",\"524\":\"v-726603e4#0/0\",\"525\":\"v-726603e4#0/1\",\"526\":\"v-726603e4#0/2\",\"527\":\"v-726603e4#0/3\",\"528\":\"v-726603e4#1\",\"529\":\"v-726603e4#2\",\"530\":\"v-726603e4#2/0\",\"531\":\"v-726603e4#2/1\",\"532\":\"v-726603e4#2/2\",\"533\":\"v-726603e4#2/3\",\"534\":\"v-726603e4#3\",\"535\":\"v-726603e4#3/0\",\"536\":\"v-726603e4#3/1\",\"537\":\"v-726603e4#4\",\"538\":\"v-726603e4#4/0\",\"539\":\"v-726603e4#4/1\",\"540\":\"v-726603e4#4/2\",\"541\":\"v-726603e4#5\",\"542\":\"v-726603e4#5/0\",\"543\":\"v-726603e4#5/1\",\"544\":\"v-726603e4#6\",\"545\":\"v-726603e4#6/0\",\"546\":\"v-726603e4#6/1\",\"547\":\"v-726603e4#7\",\"548\":\"v-726603e4#7/0\",\"549\":\"v-726603e4#8\",\"550\":\"v-726603e4#8/0\",\"551\":\"v-726603e4#9\",\"552\":\"v-726603e4#9/1\",\"553\":\"v-726603e4#9/2\",\"554\":\"v-726603e4#10\",\"555\":\"v-726603e4#10/0\",\"556\":\"v-726603e4#11\",\"557\":\"v-726603e4#11/0\",\"558\":\"v-726603e4#12\",\"559\":\"v-726603e4#12/0\",\"560\":\"v-726603e4#12/1\",\"561\":\"v-726603e4#13\",\"562\":\"v-726603e4#13/0\",\"563\":\"v-726603e4#13/1\",\"564\":\"v-726603e4#14\",\"565\":\"v-726603e4#14/0\",\"566\":\"v-726603e4#15\",\"567\":\"v-726603e4#15/0\",\"568\":\"v-726603e4#16\",\"569\":\"v-726603e4#16/0\",\"570\":\"v-726603e4#16/1\",\"571\":\"v-726603e4#16/2\",\"572\":\"v-726603e4#16/3\",\"573\":\"v-726603e4#16/4\",\"574\":\"v-726603e4#16/5\",\"575\":\"v-726603e4#17\",\"576\":\"v-726603e4#17/0\",\"577\":\"v-726603e4#17/1\",\"578\":\"v-726603e4#18\",\"579\":\"v-726603e4#18/2\",\"580\":\"v-726603e4#19\",\"581\":\"v-726603e4#19/0\",\"582\":\"v-726603e4#20\",\"583\":\"v-726603e4#20/1\",\"584\":\"v-726603e4#20/2\",\"585\":\"v-080cac18\",\"586\":\"v-080cac18#1\",\"587\":\"v-080cac18#2\",\"588\":\"v-080cac18#2/0\",\"589\":\"v-080cac18#2/1\",\"590\":\"v-080cac18#2/2\",\"591\":\"v-080cac18#2/3\",\"592\":\"v-080cac18#3\",\"593\":\"v-080cac18#3/0\",\"594\":\"v-080cac18#4\",\"595\":\"v-080cac18#4/0\",\"596\":\"v-080cac18#4/1\",\"597\":\"v-080cac18#4/2\",\"598\":\"v-080cac18#4/3\",\"599\":\"v-080cac18#5\",\"600\":\"v-080cac18#5/4\",\"601\":\"v-080cac18#6\",\"602\":\"v-080cac18#6/5\",\"603\":\"v-080cac18#7\",\"604\":\"v-080cac18#7/6\",\"605\":\"v-080cac18#8\",\"606\":\"v-080cac18#8/0\",\"607\":\"v-080cac18#8/1\",\"608\":\"v-080cac18#9\",\"609\":\"v-080cac18#9/0\",\"610\":\"v-080cac18#10\",\"611\":\"v-080cac18#10/1\",\"612\":\"v-080cac18#11\",\"613\":\"v-080cac18#11/2\",\"614\":\"v-080cac18#11/3\",\"615\":\"v-080cac18#12\",\"616\":\"v-080cac18#12/4\",\"617\":\"v-080cac18#12/5\",\"618\":\"v-080cac18#12/6\",\"619\":\"v-080cac18#13\",\"620\":\"v-080cac18#13/0\",\"621\":\"v-080cac18#13/1\",\"622\":\"v-080cac18#14\",\"623\":\"v-080cac18#14/2\",\"624\":\"v-080cac18#14/3\",\"625\":\"v-080cac18#15\",\"626\":\"v-080cac18#16\",\"627\":\"v-080cac18#16/0\",\"628\":\"v-080cac18#16/1\",\"629\":\"v-080cac18#17\",\"630\":\"v-080cac18#17/2\",\"631\":\"v-080cac18#17/3\",\"632\":\"v-080cac18#18\",\"633\":\"v-080cac18#18/4\",\"634\":\"v-080cac18#18/5\",\"635\":\"v-080cac18#18/6\",\"636\":\"v-080cac18#19\",\"637\":\"v-080cac18#19/7\",\"638\":\"v-080cac18#19/8\",\"639\":\"v-080cac18#19/9\",\"640\":\"v-080cac18#20\",\"641\":\"v-080cac18#20/0\",\"642\":\"v-080cac18#20/1\",\"643\":\"v-080cac18#21\",\"644\":\"v-080cac18#21/2\",\"645\":\"v-080cac18#21/3\",\"646\":\"v-080cac18#22\",\"647\":\"v-080cac18#22/4\",\"648\":\"v-393db138\",\"649\":\"v-393db138#1\",\"650\":\"v-393db138#1/0\",\"651\":\"v-393db138#2\",\"652\":\"v-393db138#2/0\",\"653\":\"v-393db138#2/1\",\"654\":\"v-393db138#3\",\"655\":\"v-393db138#3/2\",\"656\":\"v-393db138#3/3\",\"657\":\"v-393db138#3/4\",\"658\":\"v-393db138#4\",\"659\":\"v-393db138#4/0\",\"660\":\"v-393db138#4/1\",\"661\":\"v-393db138#4/2\",\"662\":\"v-393db138#4/3\",\"663\":\"v-393db138#4/4\",\"664\":\"v-393db138#5\",\"665\":\"v-393db138#5/5\",\"666\":\"v-393db138#6\",\"667\":\"v-393db138#6/0\",\"668\":\"v-393db138#6/1\",\"669\":\"v-393db138#6/2\",\"670\":\"v-393db138#6/3\",\"671\":\"v-393db138#7\",\"672\":\"v-393db138#7/0\",\"673\":\"v-393db138#7/1\",\"674\":\"v-393db138#7/2\",\"675\":\"v-393db138#7/3\",\"676\":\"v-393db138#8\",\"677\":\"v-393db138#8/0\",\"678\":\"v-393db138#8/1\",\"679\":\"v-393db138#8/2\",\"680\":\"v-393db138#9\",\"681\":\"v-393db138#9/0\",\"682\":\"v-393db138#9/1\",\"683\":\"v-6c5eeffc\",\"684\":\"v-6c5eeffc#1\",\"685\":\"v-6c5eeffc#1/0\",\"686\":\"v-6c5eeffc#1/1\",\"687\":\"v-6c5eeffc#2\",\"688\":\"v-6c5eeffc#2/0\",\"689\":\"v-6c5eeffc#2/1\",\"690\":\"v-6c5eeffc#2/2\",\"691\":\"v-6c5eeffc#3\",\"692\":\"v-6c5eeffc#3/0\",\"693\":\"v-6c5eeffc#3/1\",\"694\":\"v-6c5eeffc#3/2\",\"695\":\"v-6c5eeffc#4\",\"696\":\"v-6c5eeffc#4/0\",\"697\":\"v-6c5eeffc#4/1\",\"698\":\"v-6c5eeffc#4/2\",\"699\":\"v-6c5eeffc#5\",\"700\":\"v-6c5eeffc#5/0\",\"701\":\"v-6c5eeffc#6\",\"702\":\"v-6c5eeffc#6/0\",\"703\":\"v-6c5eeffc#6/1\",\"704\":\"v-6c5eeffc#7\",\"705\":\"v-6c5eeffc#7/2\",\"706\":\"v-6c5eeffc#8\",\"707\":\"v-6c5eeffc#8/0\",\"708\":\"v-6c5eeffc#8/1\",\"709\":\"v-6c5eeffc#8/2\",\"710\":\"v-6c5eeffc#9\",\"711\":\"v-6c5eeffc#9/0\",\"712\":\"v-6c5eeffc#9/1\",\"713\":\"v-6c5eeffc#9/2\",\"714\":\"v-6c5eeffc#9/3\",\"715\":\"v-6c5eeffc#10\",\"716\":\"v-6c5eeffc#11\",\"717\":\"v-6c5eeffc#11/0\",\"718\":\"v-6c5eeffc#11/1\",\"719\":\"v-6c5eeffc#11/2\",\"720\":\"v-6c5eeffc#11/3\",\"721\":\"v-6c5eeffc#11/4\",\"722\":\"v-6c5eeffc#11/5\",\"723\":\"v-6c5eeffc#11/6\",\"724\":\"v-6c5eeffc#11/7\",\"725\":\"v-6c5eeffc#11/8\",\"726\":\"v-6c5eeffc#11/9\",\"727\":\"v-6c5eeffc#12\",\"728\":\"v-6c5eeffc#12/0\",\"729\":\"v-6c5eeffc#12/1\",\"730\":\"v-6c5eeffc#12/2\",\"731\":\"v-6c5eeffc#12/3\",\"732\":\"v-6c5eeffc#12/4\",\"733\":\"v-6c5eeffc#13\",\"734\":\"v-6c5eeffc#13/0\",\"735\":\"v-6c5eeffc#14\",\"736\":\"v-6c5eeffc#14/1\",\"737\":\"v-6c5eeffc#14/2\",\"738\":\"v-6c5eeffc#14/3\",\"739\":\"v-6c5eeffc#14/4\",\"740\":\"v-6c5eeffc#14/5\",\"741\":\"v-6c5eeffc#14/6\",\"742\":\"v-6c5eeffc#14/7\",\"743\":\"v-6c5eeffc#15\",\"744\":\"v-6c5eeffc#15/0\",\"745\":\"v-6c5eeffc#15/1\",\"746\":\"v-6c5eeffc#15/2\",\"747\":\"v-6c5eeffc#16\",\"748\":\"v-6c5eeffc#17\",\"749\":\"v-6c5eeffc#17/3\",\"750\":\"v-6c5eeffc#17/4\",\"751\":\"v-6c5eeffc#17/5\",\"752\":\"v-6c5eeffc#17/6\",\"753\":\"v-6c5eeffc#18\",\"754\":\"v-6c5eeffc#18/0\",\"755\":\"v-6c5eeffc#19\",\"756\":\"v-6c5eeffc#19/0\",\"757\":\"v-6c5eeffc#20\",\"758\":\"v-6c5eeffc#20/0\",\"759\":\"v-6c5eeffc#20/1\",\"760\":\"v-b5add28a\",\"761\":\"v-b5add28a#0/0\",\"762\":\"v-b5add28a#0/1\",\"763\":\"v-b5add28a#0/2\",\"764\":\"v-b5add28a#0/3\",\"765\":\"v-b5add28a#1\",\"766\":\"v-b5add28a#1/0\",\"767\":\"v-b5add28a#1/1\",\"768\":\"v-b5add28a#2\",\"769\":\"v-b5add28a#2/0\",\"770\":\"v-b5add28a#2/1\",\"771\":\"v-b5add28a#2/2\",\"772\":\"v-b5add28a#3\",\"773\":\"v-b5add28a#3/0\",\"774\":\"v-b5add28a#4\",\"775\":\"v-b5add28a#4/0\",\"776\":\"v-b5add28a#4/1\",\"777\":\"v-b5add28a#4/2\",\"778\":\"v-b5add28a#5\",\"779\":\"v-b5add28a#5/0\",\"780\":\"v-b5add28a#5/1\",\"781\":\"v-b5add28a#5/2\",\"782\":\"v-b5add28a#6\",\"783\":\"v-b5add28a#6/3\",\"784\":\"v-b5add28a#6/4\",\"785\":\"v-b5add28a#7\",\"786\":\"v-b5add28a#7/0\",\"787\":\"v-b5add28a#8\",\"788\":\"v-b5add28a#8/0\",\"789\":\"v-b5add28a#8/1\",\"790\":\"v-b5add28a#8/2\",\"791\":\"v-b5add28a#8/3\",\"792\":\"v-b5add28a#8/4\",\"793\":\"v-b5add28a#9\",\"794\":\"v-b5add28a#9/0\",\"795\":\"v-b5add28a#9/1\",\"796\":\"v-b5add28a#9/2\",\"797\":\"v-b5add28a#9/3\",\"798\":\"v-b5add28a#9/4\",\"799\":\"v-b5add28a#9/5\",\"800\":\"v-b5add28a#10\",\"801\":\"v-b5add28a#10/0\",\"802\":\"v-b5add28a#11\",\"803\":\"v-b5add28a#11/0\",\"804\":\"v-b5add28a#12\",\"805\":\"v-b5add28a#12/0\",\"806\":\"v-b5add28a#12/1\",\"807\":\"v-b5add28a#13\",\"808\":\"v-b5add28a#13/0\",\"809\":\"v-b5add28a#13/1\",\"810\":\"v-b5add28a#13/2\",\"811\":\"v-b5add28a#13/3\",\"812\":\"v-b5add28a#14\",\"813\":\"v-b5add28a#14/0\",\"814\":\"v-b5add28a#14/1\",\"815\":\"v-98eabe0a\",\"816\":\"v-98eabe0a#0/0\",\"817\":\"v-98eabe0a#0/1\",\"818\":\"v-98eabe0a#0/2\",\"819\":\"v-98eabe0a#0/3\",\"820\":\"v-98eabe0a#0/4\",\"821\":\"v-98eabe0a#0/5\",\"822\":\"v-98eabe0a#0/6\",\"823\":\"v-98eabe0a#1\",\"824\":\"v-98eabe0a#1/0\",\"825\":\"v-98eabe0a#2\",\"826\":\"v-98eabe0a#2/0\",\"827\":\"v-98eabe0a#3\",\"828\":\"v-98eabe0a#3/0\",\"829\":\"v-98eabe0a#3/1\",\"830\":\"v-98eabe0a#3/2\",\"831\":\"v-98eabe0a#4\",\"832\":\"v-98eabe0a#4/3\",\"833\":\"v-98eabe0a#4/4\",\"834\":\"v-98eabe0a#5\",\"835\":\"v-98eabe0a#5/0\",\"836\":\"v-98eabe0a#5/1\",\"837\":\"v-98eabe0a#5/2\",\"838\":\"v-98eabe0a#5/3\",\"839\":\"v-98eabe0a#5/4\",\"840\":\"v-98eabe0a#6\",\"841\":\"v-98eabe0a#6/0\",\"842\":\"v-98eabe0a#6/1\",\"843\":\"v-98eabe0a#6/2\",\"844\":\"v-98eabe0a#7\",\"845\":\"v-98eabe0a#8\",\"846\":\"v-98eabe0a#8/3\",\"847\":\"v-98eabe0a#8/4\",\"848\":\"v-98eabe0a#8/5\",\"849\":\"v-98eabe0a#8/6\",\"850\":\"v-98eabe0a#8/7\",\"851\":\"v-98eabe0a#9\",\"852\":\"v-98eabe0a#9/0\",\"853\":\"v-98eabe0a#9/1\",\"854\":\"v-98eabe0a#10\",\"855\":\"v-98eabe0a#10/2\",\"856\":\"v-98eabe0a#11\",\"857\":\"v-98eabe0a#11/0\",\"858\":\"v-98eabe0a#11/1\",\"859\":\"v-98eabe0a#11/2\",\"860\":\"v-98eabe0a#12\",\"861\":\"v-98eabe0a#12/0\",\"862\":\"v-98eabe0a#12/1\",\"863\":\"v-98eabe0a#13\",\"864\":\"v-98eabe0a#13/2\",\"865\":\"v-98eabe0a#13/3\",\"866\":\"v-98eabe0a#14\",\"867\":\"v-98eabe0a#14/4\",\"868\":\"v-98eabe0a#15\",\"869\":\"v-98eabe0a#15/0\",\"870\":\"v-3d2ed920\",\"871\":\"v-3d2ed920#0/0\",\"872\":\"v-3d2ed920#0/1\",\"873\":\"v-3d2ed920#1\",\"874\":\"v-3d2ed920#2\",\"875\":\"v-3d2ed920#2/0\",\"876\":\"v-3d2ed920#2/1\",\"877\":\"v-3d2ed920#2/2\",\"878\":\"v-3d2ed920#2/3\",\"879\":\"v-3d2ed920#2/4\",\"880\":\"v-3d2ed920#3\",\"881\":\"v-3d2ed920#3/0\",\"882\":\"v-3d2ed920#3/1\",\"883\":\"v-3d2ed920#4\",\"884\":\"v-3d2ed920#4/2\",\"885\":\"v-3d2ed920#4/3\",\"886\":\"v-3d2ed920#5\",\"887\":\"v-3d2ed920#5/0\",\"888\":\"v-3d2ed920#5/1\",\"889\":\"v-3d2ed920#6\",\"890\":\"v-3d2ed920#7\",\"891\":\"v-3d2ed920#7/2\",\"892\":\"v-3d2ed920#7/3\",\"893\":\"v-3d2ed920#7/4\",\"894\":\"v-3d2ed920#7/5\",\"895\":\"v-3d2ed920#7/6\",\"896\":\"v-3d2ed920#7/7\",\"897\":\"v-3d2ed920#7/8\",\"898\":\"v-3d2ed920#7/9\",\"899\":\"v-3d2ed920#8\",\"900\":\"v-3d2ed920#8/0\",\"901\":\"v-3d2ed920#8/1\",\"902\":\"v-3d2ed920#9\",\"903\":\"v-3d2ed920#9/0\",\"904\":\"v-3d2ed920#10\",\"905\":\"v-3d2ed920#10/1\",\"906\":\"v-3d2ed920#10/2\",\"907\":\"v-3d2ed920#10/3\",\"908\":\"v-3d2ed920#11\",\"909\":\"v-3d2ed920#12\",\"910\":\"v-3d2ed920#12/4\",\"911\":\"v-3d2ed920#12/5\",\"912\":\"v-3d2ed920#13\",\"913\":\"v-3d2ed920#13/0\",\"914\":\"v-3d2ed920#13/1\",\"915\":\"v-3d2ed920#14\",\"916\":\"v-3d2ed920#14/2\",\"917\":\"v-3d2ed920#14/3\",\"918\":\"v-3d2ed920#14/4\",\"919\":\"v-3d2ed920#14/5\",\"920\":\"v-3d2ed920#14/6\",\"921\":\"v-3d2ed920#14/7\",\"922\":\"v-3d2ed920#14/8\",\"923\":\"v-3d2ed920#14/9\",\"924\":\"v-3d2ed920#15\",\"925\":\"v-3d2ed920#15/10\",\"926\":\"v-3d2ed920#16\",\"927\":\"v-3d2ed920#16/0\",\"928\":\"v-3d2ed920#17\",\"929\":\"v-3d2ed920#17/0\",\"930\":\"v-3d2ed920#17/1\",\"931\":\"v-3d2ed920#18\",\"932\":\"v-3d2ed920#18/2\",\"933\":\"v-3d2ed920#18/3\",\"934\":\"v-3d2ed920#19\",\"935\":\"v-3d2ed920#19/0\",\"936\":\"v-3d2ed920#19/1\",\"937\":\"v-3d2ed920#19/2\",\"938\":\"v-3d2ed920#19/3\",\"939\":\"v-3d2ed920#19/4\",\"940\":\"v-3d2ed920#19/5\",\"941\":\"v-3d2ed920#20\",\"942\":\"v-3d2ed920#21\",\"943\":\"v-3d2ed920#21/0\",\"944\":\"v-3d2ed920#21/1\",\"945\":\"v-3d2ed920#21/2\",\"946\":\"v-3d2ed920#22\",\"947\":\"v-3d2ed920#22/0\",\"948\":\"v-3d2ed920#22/1\",\"949\":\"v-3d2ed920#22/2\",\"950\":\"v-3d2ed920#22/3\",\"951\":\"v-3d2ed920#23\",\"952\":\"v-3d2ed920#23/0\",\"953\":\"v-3d2ed920#24\",\"954\":\"v-3d2ed920#24/1\",\"955\":\"v-3d2ed920#24/2\",\"956\":\"v-89c50cda\",\"957\":\"v-89c50cda#0/0\",\"958\":\"v-89c50cda#0/1\",\"959\":\"v-24176c70\",\"960\":\"v-24176c70#0/0\",\"961\":\"v-24176c70#0/1\",\"962\":\"v-24176c70#0/2\",\"963\":\"v-24176c70#0/3\",\"964\":\"v-24176c70#0/4\",\"965\":\"v-24176c70#1\",\"966\":\"v-24176c70#1/0\",\"967\":\"v-24176c70#1/1\",\"968\":\"v-24176c70#2\",\"969\":\"v-24176c70#2/2\",\"970\":\"v-374c8d84\",\"971\":\"v-374c8d84#0/0\",\"972\":\"v-374c8d84#0/1\",\"973\":\"v-374c8d84#1\",\"974\":\"v-374c8d84#1/0\",\"975\":\"v-374c8d84#2\",\"976\":\"v-374c8d84#2/0\",\"977\":\"v-374c8d84#2/1\",\"978\":\"v-374c8d84#2/2\",\"979\":\"v-374c8d84#3\",\"980\":\"v-374c8d84#3/3\",\"981\":\"v-374c8d84#3/4\",\"982\":\"v-374c8d84#4\",\"983\":\"v-374c8d84#4/5\",\"984\":\"v-374c8d84#5\",\"985\":\"v-374c8d84#5/0\",\"986\":\"v-374c8d84#6\",\"987\":\"v-374c8d84#6/1\",\"988\":\"v-374c8d84#6/2\",\"989\":\"v-374c8d84#7\",\"990\":\"v-374c8d84#7/3\",\"991\":\"v-374c8d84#7/4\",\"992\":\"v-374c8d84#8\",\"993\":\"v-374c8d84#9\",\"994\":\"v-374c8d84#9/5\",\"995\":\"v-374c8d84#9/6\",\"996\":\"v-374c8d84#9/7\",\"997\":\"v-374c8d84#10\",\"998\":\"v-374c8d84#10/0\",\"999\":\"v-374c8d84#10/1\",\"1000\":\"v-374c8d84#11\",\"1001\":\"v-374c8d84#12\",\"1002\":\"v-374c8d84#12/0\",\"1003\":\"v-374c8d84#12/1\",\"1004\":\"v-374c8d84#12/2\",\"1005\":\"v-374c8d84#12/3\",\"1006\":\"v-374c8d84#13\",\"1007\":\"v-374c8d84#13/4\",\"1008\":\"v-374c8d84#13/5\",\"1009\":\"v-374c8d84#14\",\"1010\":\"v-374c8d84#14/6\",\"1011\":\"v-374c8d84#15\",\"1012\":\"v-374c8d84#15/0\",\"1013\":\"v-374c8d84#15/1\",\"1014\":\"v-374c8d84#16\",\"1015\":\"v-374c8d84#16/2\",\"1016\":\"v-374c8d84#16/3\",\"1017\":\"v-fcb06c56\",\"1018\":\"v-fcb06c56#1\",\"1019\":\"v-fcb06c56#1/0\",\"1020\":\"v-fcb06c56#2\",\"1021\":\"v-fcb06c56#2/1\",\"1022\":\"v-fcb06c56#3\",\"1023\":\"v-fcb06c56#3/2\",\"1024\":\"v-fcb06c56#3/3\",\"1025\":\"v-fcb06c56#3/4\",\"1026\":\"v-fcb06c56#3/5\",\"1027\":\"v-fcb06c56#3/6\",\"1028\":\"v-fcb06c56#3/7\",\"1029\":\"v-fcb06c56#3/8\",\"1030\":\"v-fcb06c56#3/9\",\"1031\":\"v-fcb06c56#3/10\",\"1032\":\"v-fcb06c56#3/11\",\"1033\":\"v-fcb06c56#3/12\",\"1034\":\"v-fcb06c56#3/13\",\"1035\":\"v-fcb06c56#3/14\",\"1036\":\"v-fcb06c56#4\",\"1037\":\"v-fcb06c56#4/0\",\"1038\":\"v-fcb06c56#4/1\",\"1039\":\"v-fcb06c56#5\",\"1040\":\"v-fcb06c56#5/2\",\"1041\":\"v-fcb06c56#6\",\"1042\":\"v-fcb06c56#6/0\",\"1043\":\"v-fcb06c56#6/1\",\"1044\":\"v-fcb06c56#7\",\"1045\":\"v-fcb06c56#7/0\",\"1046\":\"v-fcb06c56#7/1\",\"1047\":\"v-fcb06c56#7/2\",\"1048\":\"v-fcb06c56#7/3\",\"1049\":\"v-fcb06c56#8\",\"1050\":\"v-fcb06c56#8/4\",\"1051\":\"v-fcb06c56#8/5\",\"1052\":\"v-24c0925e\",\"1053\":\"v-24c0925e#0/0\",\"1054\":\"v-24c0925e#0/1\",\"1055\":\"v-db90d16a\",\"1056\":\"v-db90d16a#0/0\",\"1057\":\"v-db90d16a#0/1\",\"1058\":\"v-63b2e484\",\"1059\":\"v-63b2e484#0/0\",\"1060\":\"v-63b2e484#0/1\",\"1061\":\"v-63b2e484#1\",\"1062\":\"v-63b2e484#1/0\",\"1063\":\"v-63b2e484#1/1\",\"1064\":\"v-63b2e484#2\",\"1065\":\"v-63b2e484#2/0\",\"1066\":\"v-63b2e484#2/1\",\"1067\":\"v-63b2e484#2/2\",\"1068\":\"v-63b2e484#2/3\",\"1069\":\"v-63b2e484#2/4\",\"1070\":\"v-63b2e484#2/5\",\"1071\":\"v-63b2e484#2/6\",\"1072\":\"v-63b2e484#3\",\"1073\":\"v-63b2e484#3/0\",\"1074\":\"v-63b2e484#3/1\",\"1075\":\"v-63b2e484#4\",\"1076\":\"v-63b2e484#4/0\",\"1077\":\"v-63b2e484#4/1\",\"1078\":\"v-63b2e484#5\",\"1079\":\"v-63b2e484#5/0\",\"1080\":\"v-63b2e484#5/1\",\"1081\":\"v-63b2e484#6\",\"1082\":\"v-63b2e484#6/0\",\"1083\":\"v-63b2e484#6/1\",\"1084\":\"v-63b2e484#7\",\"1085\":\"v-63b2e484#8\",\"1086\":\"v-63b2e484#8/2\",\"1087\":\"v-63b2e484#8/3\",\"1088\":\"v-63b2e484#9\",\"1089\":\"v-63b2e484#9/0\",\"1090\":\"v-63b2e484#9/1\",\"1091\":\"v-63b2e484#10\",\"1092\":\"v-63b2e484#10/0\",\"1093\":\"v-63b2e484#11\",\"1094\":\"v-63b2e484#11/0\",\"1095\":\"v-63b2e484#11/1\",\"1096\":\"v-63b2e484#12\",\"1097\":\"v-63b2e484#13\",\"1098\":\"v-63b2e484#14\",\"1099\":\"v-63b2e484#14/0\",\"1100\":\"v-63b2e484#14/1\",\"1101\":\"v-63b2e484#14/2\",\"1102\":\"v-63b2e484#14/3\",\"1103\":\"v-63b2e484#14/4\",\"1104\":\"v-63b2e484#14/5\",\"1105\":\"v-63b2e484#14/6\",\"1106\":\"v-63b2e484#14/7\",\"1107\":\"v-63b2e484#15\",\"1108\":\"v-63b2e484#15/0\",\"1109\":\"v-63b2e484#15/1\",\"1110\":\"v-63b2e484#16\",\"1111\":\"v-63b2e484#16/0\",\"1112\":\"v-63b2e484#16/1\",\"1113\":\"v-63b2e484#16/2\",\"1114\":\"v-63b2e484#16/3\",\"1115\":\"v-63b2e484#16/4\",\"1116\":\"v-63b2e484#16/5\",\"1117\":\"v-63b2e484#17\",\"1118\":\"v-63b2e484#17/0\",\"1119\":\"v-63b2e484#17/1\",\"1120\":\"v-67aa765e\",\"1121\":\"v-67aa765e#0/0\",\"1122\":\"v-67aa765e#0/1\",\"1123\":\"v-67aa765e#0/2\",\"1124\":\"v-67aa765e#0/3\",\"1125\":\"v-67aa765e#1\",\"1126\":\"v-67aa765e#1/0\",\"1127\":\"v-67aa765e#2\",\"1128\":\"v-67aa765e#2/0\",\"1129\":\"v-67aa765e#2/1\",\"1130\":\"v-67aa765e#3\",\"1131\":\"v-67aa765e#3/2\",\"1132\":\"v-67aa765e#3/3\",\"1133\":\"v-67aa765e#4\",\"1134\":\"v-67aa765e#4/4\",\"1135\":\"v-67aa765e#4/5\",\"1136\":\"v-67aa765e#5\",\"1137\":\"v-67aa765e#5/6\",\"1138\":\"v-67aa765e#5/7\",\"1139\":\"v-67aa765e#6\",\"1140\":\"v-67aa765e#7\",\"1141\":\"v-67aa765e#7/8\",\"1142\":\"v-67aa765e#7/9\",\"1143\":\"v-67aa765e#8\",\"1144\":\"v-67aa765e#8/10\",\"1145\":\"v-67aa765e#8/11\",\"1146\":\"v-67aa765e#9\",\"1147\":\"v-67aa765e#9/12\",\"1148\":\"v-67aa765e#9/13\",\"1149\":\"v-67aa765e#10\",\"1150\":\"v-67aa765e#10/14\",\"1151\":\"v-67aa765e#10/15\",\"1152\":\"v-67aa765e#11\",\"1153\":\"v-67aa765e#12\",\"1154\":\"v-67aa765e#12/16\",\"1155\":\"v-67aa765e#13\",\"1156\":\"v-67aa765e#14\",\"1157\":\"v-67aa765e#14/17\",\"1158\":\"v-67aa765e#14/18\",\"1159\":\"v-67aa765e#15\",\"1160\":\"v-67aa765e#16\",\"1161\":\"v-67aa765e#16/19\",\"1162\":\"v-67aa765e#17\",\"1163\":\"v-67aa765e#17/20\",\"1164\":\"v-67aa765e#17/21\",\"1165\":\"v-67aa765e#18\",\"1166\":\"v-67aa765e#18/22\",\"1167\":\"v-67aa765e#18/23\",\"1168\":\"v-67aa765e#19\",\"1169\":\"v-67aa765e#19/24\",\"1170\":\"v-67aa765e#20\",\"1171\":\"v-67aa765e#21\",\"1172\":\"v-67aa765e#21/25\",\"1173\":\"v-67aa765e#22\",\"1174\":\"v-67aa765e#22/26\",\"1175\":\"v-67aa765e#22/27\",\"1176\":\"v-67aa765e#22/28\",\"1177\":\"v-67aa765e#22/29\",\"1178\":\"v-4e83e4b5\",\"1179\":\"v-4e83e4b5#0/0\",\"1180\":\"v-4e83e4b5#0/1\",\"1181\":\"v-755cc2d0\",\"1182\":\"v-755cc2d0#0/0\",\"1183\":\"v-755cc2d0#0/1\",\"1184\":\"v-755cc2d0#0/2\",\"1185\":\"v-755cc2d0#0/3\",\"1186\":\"v-755cc2d0#0/4\",\"1187\":\"v-755cc2d0#0/5\",\"1188\":\"v-755cc2d0#0/6\",\"1189\":\"v-755cc2d0#0/7\",\"1190\":\"v-755cc2d0#0/8\",\"1191\":\"v-755cc2d0#0/9\",\"1192\":\"v-755cc2d0#0/10\",\"1193\":\"v-755cc2d0#0/11\",\"1194\":\"v-755cc2d0#0/12\",\"1195\":\"v-755cc2d0#0/13\",\"1196\":\"v-755cc2d0#0/14\",\"1197\":\"v-755cc2d0#0/15\",\"1198\":\"v-755cc2d0#1\",\"1199\":\"v-755cc2d0#2\",\"1200\":\"v-755cc2d0#2/0\",\"1201\":\"v-755cc2d0#2/1\",\"1202\":\"v-755cc2d0#2/2\",\"1203\":\"v-755cc2d0#2/3\",\"1204\":\"v-755cc2d0#3\",\"1205\":\"v-755cc2d0#3/0\",\"1206\":\"v-755cc2d0#3/1\",\"1207\":\"v-755cc2d0#4\",\"1208\":\"v-755cc2d0#4/2\",\"1209\":\"v-755cc2d0#5\",\"1210\":\"v-755cc2d0#5/0\",\"1211\":\"v-755cc2d0#5/1\",\"1212\":\"v-755cc2d0#6\",\"1213\":\"v-755cc2d0#6/2\",\"1214\":\"v-755cc2d0#6/3\",\"1215\":\"v-755cc2d0#6/4\",\"1216\":\"v-755cc2d0#6/5\",\"1217\":\"v-755cc2d0#6/6\",\"1218\":\"v-755cc2d0#7\",\"1219\":\"v-755cc2d0#7/7\",\"1220\":\"v-755cc2d0#8\",\"1221\":\"v-755cc2d0#8/0\",\"1222\":\"v-755cc2d0#8/1\",\"1223\":\"v-755cc2d0#9\",\"1224\":\"v-755cc2d0#9/2\",\"1225\":\"v-755cc2d0#10\",\"1226\":\"v-755cc2d0#10/3\",\"1227\":\"v-755cc2d0#10/4\",\"1228\":\"v-755cc2d0#10/5\",\"1229\":\"v-755cc2d0#10/6\",\"1230\":\"v-755cc2d0#11\",\"1231\":\"v-755cc2d0#11/7\",\"1232\":\"v-755cc2d0#12\",\"1233\":\"v-755cc2d0#12/0\",\"1234\":\"v-755cc2d0#12/1\",\"1235\":\"v-755cc2d0#13\",\"1236\":\"v-755cc2d0#13/2\",\"1237\":\"v-755cc2d0#13/3\",\"1238\":\"v-755cc2d0#13/4\",\"1239\":\"v-755cc2d0#13/5\",\"1240\":\"v-755cc2d0#14\",\"1241\":\"v-755cc2d0#14/6\",\"1242\":\"v-755cc2d0#15\",\"1243\":\"v-755cc2d0#15/7\",\"1244\":\"v-755cc2d0#16\",\"1245\":\"v-755cc2d0#16/0\",\"1246\":\"v-755cc2d0#16/1\",\"1247\":\"v-755cc2d0#17\",\"1248\":\"v-755cc2d0#17/2\",\"1249\":\"v-755cc2d0#18\",\"1250\":\"v-755cc2d0#18/3\",\"1251\":\"v-755cc2d0#18/4\",\"1252\":\"v-755cc2d0#18/5\",\"1253\":\"v-755cc2d0#19\",\"1254\":\"v-755cc2d0#19/6\",\"1255\":\"v-755cc2d0#19/7\",\"1256\":\"v-755cc2d0#19/8\",\"1257\":\"v-755cc2d0#20\",\"1258\":\"v-755cc2d0#20/9\",\"1259\":\"v-755cc2d0#20/10\",\"1260\":\"v-755cc2d0#20/11\",\"1261\":\"v-755cc2d0#20/12\",\"1262\":\"v-755cc2d0#21\",\"1263\":\"v-755cc2d0#21/0\",\"1264\":\"v-755cc2d0#22\",\"1265\":\"v-755cc2d0#22/1\",\"1266\":\"v-755cc2d0#23\",\"1267\":\"v-755cc2d0#23/2\",\"1268\":\"v-755cc2d0#23/3\",\"1269\":\"v-755cc2d0#24\",\"1270\":\"v-755cc2d0#24/4\",\"1271\":\"v-755cc2d0#25\",\"1272\":\"v-755cc2d0#25/0\",\"1273\":\"v-755cc2d0#25/1\",\"1274\":\"v-755cc2d0#25/2\",\"1275\":\"v-755cc2d0#26\",\"1276\":\"v-755cc2d0#26/0\",\"1277\":\"v-755cc2d0#27\",\"1278\":\"v-755cc2d0#27/1\",\"1279\":\"v-755cc2d0#27/2\",\"1280\":\"v-755cc2d0#28\",\"1281\":\"v-755cc2d0#28/0\",\"1282\":\"v-755cc2d0#29\",\"1283\":\"v-755cc2d0#29/0\",\"1284\":\"v-755cc2d0#30\",\"1285\":\"v-755cc2d0#30/0\",\"1286\":\"v-755cc2d0#30/1\",\"1287\":\"v-755cc2d0#31\",\"1288\":\"v-755cc2d0#31/2\",\"1289\":\"v-755cc2d0#31/3\",\"1290\":\"v-755cc2d0#31/4\",\"1291\":\"v-755cc2d0#32\",\"1292\":\"v-755cc2d0#32/5\",\"1293\":\"v-755cc2d0#32/6\",\"1294\":\"v-755cc2d0#32/7\",\"1295\":\"v-755cc2d0#32/8\",\"1296\":\"v-755cc2d0#32/9\",\"1297\":\"v-755cc2d0#33\",\"1298\":\"v-755cc2d0#33/10\",\"1299\":\"v-755cc2d0#33/11\",\"1300\":\"v-755cc2d0#34\",\"1301\":\"v-755cc2d0#34/12\",\"1302\":\"v-755cc2d0#34/13\",\"1303\":\"v-755cc2d0#34/14\",\"1304\":\"v-755cc2d0#34/15\",\"1305\":\"v-755cc2d0#34/16\",\"1306\":\"v-4f244a50\",\"1307\":\"v-4f244a50#1\",\"1308\":\"v-4f244a50#1/0\",\"1309\":\"v-4f244a50#1/1\",\"1310\":\"v-4f244a50#1/2\",\"1311\":\"v-4f244a50#1/3\",\"1312\":\"v-4f244a50#1/4\",\"1313\":\"v-4f244a50#1/5\",\"1314\":\"v-4f244a50#1/6\",\"1315\":\"v-4f244a50#1/7\",\"1316\":\"v-4f244a50#1/8\",\"1317\":\"v-4f244a50#1/9\",\"1318\":\"v-4f244a50#1/10\",\"1319\":\"v-4f244a50#1/11\",\"1320\":\"v-4f244a50#1/12\",\"1321\":\"v-4f244a50#1/13\",\"1322\":\"v-4f244a50#1/14\",\"1323\":\"v-4f244a50#1/15\",\"1324\":\"v-4f244a50#1/16\",\"1325\":\"v-4f244a50#1/17\",\"1326\":\"v-4f244a50#1/18\",\"1327\":\"v-4f244a50#1/19\",\"1328\":\"v-4f244a50#1/20\",\"1329\":\"v-4f244a50#1/21\",\"1330\":\"v-4f244a50#1/22\",\"1331\":\"v-4f244a50#1/23\",\"1332\":\"v-4f244a50#1/24\",\"1333\":\"v-4f244a50#2\",\"1334\":\"v-4f244a50#2/0\",\"1335\":\"v-4f244a50#3\",\"1336\":\"v-4f244a50#3/1\",\"1337\":\"v-4f244a50#4\",\"1338\":\"v-4f244a50#4/2\",\"1339\":\"v-4f244a50#5\",\"1340\":\"v-4f244a50#5/3\",\"1341\":\"v-4f244a50#6\",\"1342\":\"v-4f244a50#6/4\",\"1343\":\"v-4f244a50#7\",\"1344\":\"v-4f244a50#7/5\",\"1345\":\"v-4f244a50#8\",\"1346\":\"v-4f244a50#8/6\",\"1347\":\"v-4f244a50#9\",\"1348\":\"v-4f244a50#9/7\",\"1349\":\"v-4f244a50#10\",\"1350\":\"v-4f244a50#10/8\",\"1351\":\"v-4f244a50#11\",\"1352\":\"v-4f244a50#11/9\",\"1353\":\"v-4f244a50#12\",\"1354\":\"v-4f244a50#12/10\",\"1355\":\"v-4f244a50#13\",\"1356\":\"v-4f244a50#13/11\",\"1357\":\"v-4f244a50#14\",\"1358\":\"v-4f244a50#15\",\"1359\":\"v-4f244a50#16\",\"1360\":\"v-4f244a50#16/0\",\"1361\":\"v-4f244a50#16/1\",\"1362\":\"v-4f244a50#17\",\"1363\":\"v-4f244a50#17/2\",\"1364\":\"v-4f244a50#17/3\",\"1365\":\"v-4f244a50#18\",\"1366\":\"v-4f244a50#18/4\",\"1367\":\"v-4f244a50#18/5\",\"1368\":\"v-4f244a50#18/6\",\"1369\":\"v-4f244a50#18/7\",\"1370\":\"v-4f244a50#19\",\"1371\":\"v-4f244a50#19/0\",\"1372\":\"v-4f244a50#19/1\",\"1373\":\"v-4f244a50#19/2\",\"1374\":\"v-4f244a50#20\",\"1375\":\"v-4f244a50#20/0\",\"1376\":\"v-4f244a50#20/1\",\"1377\":\"v-4f244a50#21\",\"1378\":\"v-4f244a50#21/2\",\"1379\":\"v-940f2434\",\"1380\":\"v-940f2434#0/0\",\"1381\":\"v-940f2434#0/1\",\"1382\":\"v-940f2434#1\",\"1383\":\"v-940f2434#1/0\",\"1384\":\"v-940f2434#1/1\",\"1385\":\"v-940f2434#1/2\",\"1386\":\"v-940f2434#2\",\"1387\":\"v-940f2434#2/0\",\"1388\":\"v-940f2434#2/1\",\"1389\":\"v-940f2434#3\",\"1390\":\"v-940f2434#3/0\",\"1391\":\"v-940f2434#3/1\",\"1392\":\"v-940f2434#3/2\",\"1393\":\"v-940f2434#3/3\",\"1394\":\"v-940f2434#3/4\",\"1395\":\"v-940f2434#4\",\"1396\":\"v-940f2434#4/0\",\"1397\":\"v-940f2434#4/1\",\"1398\":\"v-940f2434#4/2\",\"1399\":\"v-940f2434#4/3\",\"1400\":\"v-940f2434#4/4\",\"1401\":\"v-940f2434#4/5\",\"1402\":\"v-940f2434#4/6\",\"1403\":\"v-940f2434#4/7\",\"1404\":\"v-940f2434#4/8\",\"1405\":\"v-940f2434#4/9\",\"1406\":\"v-940f2434#4/10\",\"1407\":\"v-940f2434#4/11\",\"1408\":\"v-940f2434#4/12\",\"1409\":\"v-940f2434#5\",\"1410\":\"v-940f2434#5/0\",\"1411\":\"v-940f2434#5/1\",\"1412\":\"v-940f2434#5/2\",\"1413\":\"v-f5abde66\",\"1414\":\"v-f5abde66#0/0\",\"1415\":\"v-f5abde66#0/1\",\"1416\":\"v-f5abde66#0/2\",\"1417\":\"v-f5abde66#0/3\",\"1418\":\"v-f5abde66#1\",\"1419\":\"v-f5abde66#2\",\"1420\":\"v-f5abde66#2/4\",\"1421\":\"v-f5abde66#2/5\",\"1422\":\"v-f5abde66#3\",\"1423\":\"v-f5abde66#3/6\",\"1424\":\"v-f5abde66#3/7\",\"1425\":\"v-f5abde66#4\",\"1426\":\"v-f5abde66#4/8\",\"1427\":\"v-f5abde66#4/9\",\"1428\":\"v-f5abde66#5\",\"1429\":\"v-f5abde66#6\",\"1430\":\"v-f5abde66#6/10\",\"1431\":\"v-f5abde66#6/11\",\"1432\":\"v-f5abde66#7\",\"1433\":\"v-f5abde66#7/12\",\"1434\":\"v-f5abde66#7/13\",\"1435\":\"v-f5abde66#7/14\",\"1436\":\"v-f5abde66#8\",\"1437\":\"v-f5abde66#8/15\",\"1438\":\"v-f5abde66#8/16\",\"1439\":\"v-f5abde66#9\",\"1440\":\"v-f5abde66#10\",\"1441\":\"v-f5abde66#10/17\",\"1442\":\"v-f5abde66#10/18\",\"1443\":\"v-f5abde66#11\",\"1444\":\"v-f5abde66#11/19\",\"1445\":\"v-f5abde66#11/20\",\"1446\":\"v-f5abde66#11/21\",\"1447\":\"v-f5abde66#11/22\",\"1448\":\"v-f5abde66#11/23\",\"1449\":\"v-f5abde66#11/24\",\"1450\":\"v-f5abde66#12\",\"1451\":\"v-f5abde66#12/25\",\"1452\":\"v-f5abde66#12/26\",\"1453\":\"v-f5abde66#13\",\"1454\":\"v-f5abde66#13/27\",\"1455\":\"v-f5abde66#13/28\",\"1456\":\"v-f5abde66#14\",\"1457\":\"v-f5abde66#14/29\",\"1458\":\"v-f5abde66#14/30\",\"1459\":\"v-f5abde66#15\",\"1460\":\"v-f5abde66#15/31\",\"1461\":\"v-f5abde66#16\",\"1462\":\"v-f5abde66#16/0\",\"1463\":\"v-f5abde66#16/1\",\"1464\":\"v-f5abde66#16/2\",\"1465\":\"v-f5abde66#17\",\"1466\":\"v-f5abde66#17/3\",\"1467\":\"v-f5abde66#17/4\",\"1468\":\"v-f5abde66#18\",\"1469\":\"v-f5abde66#18/5\",\"1470\":\"v-f5abde66#18/6\",\"1471\":\"v-f5abde66#18/7\",\"1472\":\"v-f5abde66#18/8\",\"1473\":\"v-f5abde66#19\",\"1474\":\"v-f5abde66#19/9\",\"1475\":\"v-f5abde66#19/10\",\"1476\":\"v-f5abde66#20\",\"1477\":\"v-f5abde66#20/11\",\"1478\":\"v-f5abde66#20/12\",\"1479\":\"v-f5abde66#20/13\",\"1480\":\"v-f5abde66#20/14\",\"1481\":\"v-f5abde66#21\",\"1482\":\"v-f5abde66#21/15\",\"1483\":\"v-f5abde66#22\",\"1484\":\"v-f5abde66#22/0\",\"1485\":\"v-f5abde66#22/1\",\"1486\":\"v-f5abde66#22/2\",\"1487\":\"v-f5abde66#23\",\"1488\":\"v-f5abde66#23/3\",\"1489\":\"v-f5abde66#23/4\",\"1490\":\"v-f5abde66#23/5\",\"1491\":\"v-f5abde66#23/6\",\"1492\":\"v-f5abde66#24\",\"1493\":\"v-f5abde66#24/7\",\"1494\":\"v-f5abde66#24/8\",\"1495\":\"v-f5abde66#24/9\",\"1496\":\"v-f5abde66#24/10\",\"1497\":\"v-f5abde66#25\",\"1498\":\"v-f5abde66#25/11\",\"1499\":\"v-f5abde66#25/12\",\"1500\":\"v-f5abde66#25/13\",\"1501\":\"v-f5abde66#25/14\",\"1502\":\"v-f5abde66#25/15\",\"1503\":\"v-f5abde66#25/16\",\"1504\":\"v-f5abde66#25/17\",\"1505\":\"v-f5abde66#25/18\",\"1506\":\"v-f5abde66#25/19\",\"1507\":\"v-f5abde66#26\",\"1508\":\"v-f5abde66#26/20\",\"1509\":\"v-f5abde66#27\",\"1510\":\"v-f5abde66#28\",\"1511\":\"v-f5abde66#28/0\",\"1512\":\"v-f5abde66#28/1\",\"1513\":\"v-f5abde66#29\",\"1514\":\"v-f5abde66#29/2\",\"1515\":\"v-f5abde66#29/3\",\"1516\":\"v-f5abde66#30\",\"1517\":\"v-f5abde66#30/4\",\"1518\":\"v-f5abde66#30/5\",\"1519\":\"v-f5abde66#31\",\"1520\":\"v-f5abde66#31/6\",\"1521\":\"v-f5abde66#31/7\",\"1522\":\"v-f5abde66#32\",\"1523\":\"v-f5abde66#32/8\",\"1524\":\"v-f5abde66#32/9\",\"1525\":\"v-f5abde66#33\",\"1526\":\"v-f5abde66#33/10\",\"1527\":\"v-f5abde66#33/11\",\"1528\":\"v-f5abde66#33/12\",\"1529\":\"v-f5abde66#33/13\",\"1530\":\"v-750e672e\",\"1531\":\"v-750e672e#0/0\",\"1532\":\"v-750e672e#0/1\",\"1533\":\"v-750e672e#1\",\"1534\":\"v-750e672e#2\",\"1535\":\"v-750e672e#3\",\"1536\":\"v-750e672e#3/0\",\"1537\":\"v-750e672e#3/1\",\"1538\":\"v-750e672e#4\",\"1539\":\"v-750e672e#4/0\",\"1540\":\"v-750e672e#4/1\",\"1541\":\"v-750e672e#5\",\"1542\":\"v-750e672e#5/0\",\"1543\":\"v-750e672e#6\",\"1544\":\"v-750e672e#6/1\",\"1545\":\"v-750e672e#6/2\",\"1546\":\"v-750e672e#6/3\",\"1547\":\"v-750e672e#6/4\",\"1548\":\"v-750e672e#6/5\",\"1549\":\"v-750e672e#7\",\"1550\":\"v-750e672e#7/6\",\"1551\":\"v-750e672e#7/7\",\"1552\":\"v-750e672e#7/8\",\"1553\":\"v-750e672e#8\",\"1554\":\"v-750e672e#9\",\"1555\":\"v-750e672e#9/0\",\"1556\":\"v-750e672e#9/1\",\"1557\":\"v-750e672e#10\",\"1558\":\"v-750e672e#10/2\",\"1559\":\"v-750e672e#10/3\",\"1560\":\"v-750e672e#11\",\"1561\":\"v-750e672e#11/4\",\"1562\":\"v-750e672e#12\",\"1563\":\"v-750e672e#12/0\",\"1564\":\"v-750e672e#12/1\",\"1565\":\"v-750e672e#12/2\",\"1566\":\"v-750e672e#12/3\",\"1567\":\"v-750e672e#13\",\"1568\":\"v-750e672e#13/0\",\"1569\":\"v-750e672e#13/1\",\"1570\":\"v-750e672e#14\",\"1571\":\"v-750e672e#14/0\",\"1572\":\"v-750e672e#14/1\",\"1573\":\"v-750e672e#14/2\",\"1574\":\"v-750e672e#14/3\",\"1575\":\"v-750e672e#14/4\",\"1576\":\"v-750e672e#14/5\",\"1577\":\"v-750e672e#14/6\",\"1578\":\"v-750e672e#15\",\"1579\":\"v-750e672e#16\",\"1580\":\"v-750e672e#16/0\",\"1581\":\"v-750e672e#16/1\",\"1582\":\"v-750e672e#17\",\"1583\":\"v-750e672e#17/2\",\"1584\":\"v-750e672e#17/3\",\"1585\":\"v-750e672e#18\",\"1586\":\"v-750e672e#18/4\",\"1587\":\"v-750e672e#18/5\",\"1588\":\"v-750e672e#18/6\",\"1589\":\"v-750e672e#18/7\",\"1590\":\"v-750e672e#19\",\"1591\":\"v-750e672e#19/8\",\"1592\":\"v-750e672e#19/9\",\"1593\":\"v-750e672e#19/10\",\"1594\":\"v-750e672e#19/11\",\"1595\":\"v-750e672e#19/12\",\"1596\":\"v-750e672e#20\",\"1597\":\"v-750e672e#20/13\",\"1598\":\"v-750e672e#20/14\",\"1599\":\"v-750e672e#20/15\",\"1600\":\"v-750e672e#20/16\",\"1601\":\"v-750e672e#20/17\",\"1602\":\"v-750e672e#21\",\"1603\":\"v-750e672e#21/18\",\"1604\":\"v-750e672e#21/19\",\"1605\":\"v-30470382\",\"1606\":\"v-30470382#0/0\",\"1607\":\"v-30470382#0/1\",\"1608\":\"v-30470382#1\",\"1609\":\"v-30470382#2\",\"1610\":\"v-30470382#2/0\",\"1611\":\"v-30470382#2/1\",\"1612\":\"v-30470382#2/2\",\"1613\":\"v-30470382#2/3\",\"1614\":\"v-30470382#2/4\",\"1615\":\"v-30470382#3\",\"1616\":\"v-30470382#3/0\",\"1617\":\"v-30470382#3/1\",\"1618\":\"v-30470382#3/2\",\"1619\":\"v-30470382#3/3\",\"1620\":\"v-30470382#3/4\",\"1621\":\"v-30470382#4\",\"1622\":\"v-30470382#4/0\",\"1623\":\"v-30470382#4/1\",\"1624\":\"v-30470382#5\",\"1625\":\"v-30470382#5/0\",\"1626\":\"v-30470382#5/1\",\"1627\":\"v-30470382#5/2\",\"1628\":\"v-30470382#5/3\",\"1629\":\"v-30470382#5/4\",\"1630\":\"v-30470382#6\",\"1631\":\"v-30470382#6/0\",\"1632\":\"v-30470382#7\",\"1633\":\"v-30470382#7/0\",\"1634\":\"v-30470382#7/1\",\"1635\":\"v-30470382#8\",\"1636\":\"v-30470382#8/0\",\"1637\":\"v-30470382#9\",\"1638\":\"v-30470382#9/0\",\"1639\":\"v-30470382#9/1\",\"1640\":\"v-30470382#10\",\"1641\":\"v-30470382#10/2\",\"1642\":\"v-30470382#10/3\",\"1643\":\"v-30470382#11\",\"1644\":\"v-30470382#11/4\",\"1645\":\"v-30470382#11/5\",\"1646\":\"v-30470382#12\",\"1647\":\"v-30470382#12/6\",\"1648\":\"v-30470382#12/7\",\"1649\":\"v-30470382#13\",\"1650\":\"v-30470382#13/8\",\"1651\":\"v-30470382#13/9\",\"1652\":\"v-30470382#14\",\"1653\":\"v-30470382#14/10\",\"1654\":\"v-30470382#14/11\",\"1655\":\"v-30470382#15\",\"1656\":\"v-30470382#15/12\",\"1657\":\"v-30470382#15/13\",\"1658\":\"v-30470382#16\",\"1659\":\"v-30470382#16/14\",\"1660\":\"v-30470382#16/15\",\"1661\":\"v-30470382#17\",\"1662\":\"v-30470382#17/16\",\"1663\":\"v-30470382#17/17\",\"1664\":\"v-30470382#18\",\"1665\":\"v-30470382#18/18\",\"1666\":\"v-30470382#18/19\",\"1667\":\"v-30470382#18/20\",\"1668\":\"v-30470382#18/21\",\"1669\":\"v-30470382#18/22\",\"1670\":\"v-30470382#18/23\",\"1671\":\"v-30470382#19\",\"1672\":\"v-30470382#19/24\",\"1673\":\"v-30470382#19/25\",\"1674\":\"v-30470382#20\",\"1675\":\"v-30470382#20/26\",\"1676\":\"v-30470382#20/27\",\"1677\":\"v-30470382#21\",\"1678\":\"v-30470382#21/28\",\"1679\":\"v-30470382#21/29\",\"1680\":\"v-30470382#22\",\"1681\":\"v-30470382#22/30\",\"1682\":\"v-30470382#22/31\",\"1683\":\"v-30470382#23\",\"1684\":\"v-30470382#23/32\",\"1685\":\"v-30470382#23/33\",\"1686\":\"v-30470382#23/34\",\"1687\":\"v-30470382#23/35\",\"1688\":\"v-30470382#23/36\",\"1689\":\"v-30470382#24\",\"1690\":\"v-30470382#24/37\",\"1691\":\"v-30470382#24/38\",\"1692\":\"v-30470382#24/39\",\"1693\":\"v-30470382#25\",\"1694\":\"v-30470382#25/40\",\"1695\":\"v-30470382#25/41\",\"1696\":\"v-30470382#25/42\",\"1697\":\"v-30470382#26\",\"1698\":\"v-30470382#26/43\",\"1699\":\"v-30470382#26/44\",\"1700\":\"v-30470382#26/45\",\"1701\":\"v-30470382#26/46\",\"1702\":\"v-30470382#26/47\",\"1703\":\"v-30470382#27\",\"1704\":\"v-30470382#27/48\",\"1705\":\"v-30470382#27/49\",\"1706\":\"v-30470382#28\",\"1707\":\"v-30470382#28/50\",\"1708\":\"v-30470382#29\",\"1709\":\"v-30470382#29/51\",\"1710\":\"v-30470382#29/52\",\"1711\":\"v-30470382#29/53\",\"1712\":\"v-30470382#29/54\",\"1713\":\"v-30470382#29/55\",\"1714\":\"v-30470382#29/56\",\"1715\":\"v-30470382#29/57\",\"1716\":\"v-30470382#29/58\",\"1717\":\"v-30470382#29/59\",\"1718\":\"v-30470382#29/60\",\"1719\":\"v-30470382#29/61\",\"1720\":\"v-30470382#30\",\"1721\":\"v-30470382#30/62\",\"1722\":\"v-30470382#30/63\",\"1723\":\"v-30470382#30/64\",\"1724\":\"v-30470382#31\",\"1725\":\"v-30470382#31/65\",\"1726\":\"v-30470382#32\",\"1727\":\"v-30470382#32/66\",\"1728\":\"v-d5e92c6e\",\"1729\":\"v-d5e92c6e#1\",\"1730\":\"v-d5e92c6e#1/0\",\"1731\":\"v-d5e92c6e#2\",\"1732\":\"v-d5e92c6e#2/0\",\"1733\":\"v-d5e92c6e#3\",\"1734\":\"v-d5e92c6e#3/0\",\"1735\":\"v-d5e92c6e#3/1\",\"1736\":\"v-d5e92c6e#3/2\",\"1737\":\"v-d5e92c6e#4\",\"1738\":\"v-d5e92c6e#4/0\",\"1739\":\"v-d5e92c6e#5\",\"1740\":\"v-d5e92c6e#5/0\",\"1741\":\"v-d5e92c6e#5/1\",\"1742\":\"v-d5e92c6e#5/2\",\"1743\":\"v-d5e92c6e#5/3\",\"1744\":\"v-d5e92c6e#6\",\"1745\":\"v-d5e92c6e#6/4\",\"1746\":\"v-d5e92c6e#6/5\",\"1747\":\"v-d5e92c6e#6/6\",\"1748\":\"v-d5e92c6e#6/7\",\"1749\":\"v-d5e92c6e#7\",\"1750\":\"v-d5e92c6e#7/0\",\"1751\":\"v-d5e92c6e#7/1\",\"1752\":\"v-d5e92c6e#7/2\",\"1753\":\"v-d5e92c6e#7/3\",\"1754\":\"v-d5e92c6e#7/4\",\"1755\":\"v-d5e92c6e#8\",\"1756\":\"v-d5e92c6e#8/0\",\"1757\":\"v-d5e92c6e#8/1\",\"1758\":\"v-d5e92c6e#8/2\",\"1759\":\"v-d5e92c6e#8/3\",\"1760\":\"v-d5e92c6e#8/4\",\"1761\":\"v-d5e92c6e#8/5\",\"1762\":\"v-d5e92c6e#8/6\",\"1763\":\"v-d5e92c6e#8/7\",\"1764\":\"v-d5e92c6e#9\",\"1765\":\"v-d5e92c6e#9/8\",\"1766\":\"v-d5e92c6e#10\",\"1767\":\"v-d5e92c6e#10/0\",\"1768\":\"v-d5e92c6e#11\",\"1769\":\"v-d5e92c6e#11/0\",\"1770\":\"v-d5e92c6e#12\",\"1771\":\"v-d5e92c6e#12/1\",\"1772\":\"v-d5e92c6e#13\",\"1773\":\"v-d5e92c6e#13/2\",\"1774\":\"v-d5e92c6e#14\",\"1775\":\"v-d5e92c6e#14/3\",\"1776\":\"v-d5e92c6e#14/4\",\"1777\":\"v-d5e92c6e#14/5\",\"1778\":\"v-d5e92c6e#14/6\",\"1779\":\"v-d5e92c6e#15\",\"1780\":\"v-d5e92c6e#15/7\",\"1781\":\"v-d5e92c6e#16\",\"1782\":\"v-d5e92c6e#16/0\",\"1783\":\"v-d5e92c6e#16/1\",\"1784\":\"v-d5e92c6e#16/2\",\"1785\":\"v-d5e92c6e#16/3\",\"1786\":\"v-d5e92c6e#17\",\"1787\":\"v-d5e92c6e#18\",\"1788\":\"v-d5e92c6e#18/0\",\"1789\":\"v-d5e92c6e#19\",\"1790\":\"v-d5e92c6e#19/1\",\"1791\":\"v-d5e92c6e#19/2\",\"1792\":\"v-ae60d024\",\"1793\":\"v-ae60d024#1\",\"1794\":\"v-ae60d024#1/0\",\"1795\":\"v-ae60d024#1/1\",\"1796\":\"v-ae60d024#1/2\",\"1797\":\"v-ae60d024#1/3\",\"1798\":\"v-ae60d024#2\",\"1799\":\"v-ae60d024#2/4\",\"1800\":\"v-ae60d024#2/5\",\"1801\":\"v-ae60d024#3\",\"1802\":\"v-ae60d024#3/6\",\"1803\":\"v-ae60d024#3/7\",\"1804\":\"v-ae60d024#3/8\",\"1805\":\"v-ae60d024#3/9\",\"1806\":\"v-ae60d024#4\",\"1807\":\"v-ae60d024#4/10\",\"1808\":\"v-ae60d024#4/11\",\"1809\":\"v-ae60d024#5\",\"1810\":\"v-ae60d024#5/12\",\"1811\":\"v-ae60d024#5/13\",\"1812\":\"v-ae60d024#6\",\"1813\":\"v-ae60d024#6/14\",\"1814\":\"v-ae60d024#6/15\",\"1815\":\"v-ae60d024#7\",\"1816\":\"v-ae60d024#7/16\",\"1817\":\"v-ae60d024#7/17\",\"1818\":\"v-ae60d024#8\",\"1819\":\"v-ae60d024#8/18\",\"1820\":\"v-ae60d024#8/19\",\"1821\":\"v-ae60d024#9\",\"1822\":\"v-ae60d024#9/20\",\"1823\":\"v-ae60d024#9/21\",\"1824\":\"v-ae60d024#10\",\"1825\":\"v-ae60d024#10/22\",\"1826\":\"v-ae60d024#11\",\"1827\":\"v-ae60d024#11/23\",\"1828\":\"v-ae60d024#11/24\",\"1829\":\"v-ae60d024#11/25\",\"1830\":\"v-ae60d024#11/26\",\"1831\":\"v-ae60d024#11/27\",\"1832\":\"v-ae60d024#11/28\",\"1833\":\"v-ae60d024#12\",\"1834\":\"v-ae60d024#12/29\",\"1835\":\"v-ae60d024#12/30\",\"1836\":\"v-ae60d024#12/31\",\"1837\":\"v-ae60d024#12/32\",\"1838\":\"v-ae60d024#12/33\",\"1839\":\"v-ae60d024#12/34\",\"1840\":\"v-ae60d024#12/35\",\"1841\":\"v-ae60d024#12/36\",\"1842\":\"v-ae60d024#13\",\"1843\":\"v-ae60d024#13/0\",\"1844\":\"v-ae60d024#13/1\",\"1845\":\"v-ae60d024#13/2\",\"1846\":\"v-ae60d024#14\",\"1847\":\"v-ae60d024#14/0\",\"1848\":\"v-ae60d024#14/1\",\"1849\":\"v-ae60d024#14/2\",\"1850\":\"v-ae60d024#14/3\",\"1851\":\"v-ae60d024#15\",\"1852\":\"v-ae60d024#15/4\",\"1853\":\"v-ae60d024#15/5\",\"1854\":\"v-ae60d024#16\",\"1855\":\"v-ae60d024#16/6\",\"1856\":\"v-ae60d024#16/7\",\"1857\":\"v-ae60d024#17\",\"1858\":\"v-ae60d024#17/8\",\"1859\":\"v-ae60d024#17/9\",\"1860\":\"v-ae60d024#18\",\"1861\":\"v-ae60d024#18/10\",\"1862\":\"v-ae60d024#18/11\",\"1863\":\"v-ae60d024#19\",\"1864\":\"v-ae60d024#19/12\",\"1865\":\"v-ae60d024#19/13\",\"1866\":\"v-ae60d024#19/14\",\"1867\":\"v-ae60d024#19/15\",\"1868\":\"v-ae60d024#19/16\",\"1869\":\"v-ae60d024#20\",\"1870\":\"v-ae60d024#20/17\",\"1871\":\"v-ae60d024#20/18\",\"1872\":\"v-ae60d024#20/19\",\"1873\":\"v-ae60d024#20/20\",\"1874\":\"v-ae60d024#20/21\",\"1875\":\"v-ae60d024#20/22\",\"1876\":\"v-ae60d024#20/23\",\"1877\":\"v-ae60d024#20/24\",\"1878\":\"v-ae60d024#20/25\",\"1879\":\"v-ae60d024#20/26\",\"1880\":\"v-ae60d024#20/27\",\"1881\":\"v-ae60d024#20/28\",\"1882\":\"v-ae60d024#20/29\",\"1883\":\"v-ae60d024#20/30\",\"1884\":\"v-ae60d024#21\",\"1885\":\"v-ae60d024#21/0\",\"1886\":\"v-ae60d024#21/1\",\"1887\":\"v-ae60d024#22\",\"1888\":\"v-ae60d024#22/2\",\"1889\":\"v-ae60d024#22/3\",\"1890\":\"v-ae60d024#23\",\"1891\":\"v-ae60d024#23/4\",\"1892\":\"v-ae60d024#23/5\",\"1893\":\"v-ae60d024#24\",\"1894\":\"v-ae60d024#24/6\",\"1895\":\"v-ae60d024#24/7\",\"1896\":\"v-ae60d024#24/8\",\"1897\":\"v-ae60d024#24/9\",\"1898\":\"v-ae60d024#24/10\",\"1899\":\"v-ae60d024#24/11\",\"1900\":\"v-ae60d024#25\",\"1901\":\"v-ae60d024#25/12\",\"1902\":\"v-ae60d024#25/13\",\"1903\":\"v-ae60d024#25/14\",\"1904\":\"v-ae60d024#25/15\",\"1905\":\"v-ae60d024#25/16\",\"1906\":\"v-ae60d024#25/17\",\"1907\":\"v-ae60d024#25/18\",\"1908\":\"v-ae60d024#26\",\"1909\":\"v-ae60d024#26/19\",\"1910\":\"v-ae60d024#26/20\",\"1911\":\"v-ae60d024#26/21\",\"1912\":\"v-ae60d024#26/22\",\"1913\":\"v-ae60d024#26/23\",\"1914\":\"v-ae60d024#26/24\",\"1915\":\"v-ae60d024#26/25\",\"1916\":\"v-ae60d024#26/26\",\"1917\":\"v-ae60d024#26/27\",\"1918\":\"v-ae60d024#26/28\",\"1919\":\"v-ae60d024#26/29\",\"1920\":\"v-ae60d024#26/30\",\"1921\":\"v-ae60d024#26/31\",\"1922\":\"v-ae60d024#26/32\",\"1923\":\"v-ae60d024#26/33\",\"1924\":\"v-ae60d024#26/34\",\"1925\":\"v-ae60d024#26/35\",\"1926\":\"v-ae60d024#26/36\",\"1927\":\"v-ae60d024#26/37\",\"1928\":\"v-ae60d024#26/38\",\"1929\":\"v-ae60d024#26/39\",\"1930\":\"v-ae60d024#26/40\",\"1931\":\"v-ae60d024#26/41\",\"1932\":\"v-ae60d024#27\",\"1933\":\"v-ae60d024#27/0\",\"1934\":\"v-ae60d024#27/1\",\"1935\":\"v-ae60d024#27/2\",\"1936\":\"v-ae60d024#27/3\",\"1937\":\"v-ae60d024#27/4\",\"1938\":\"v-1720b947\",\"1939\":\"v-1720b947#0/0\",\"1940\":\"v-1720b947#0/1\",\"1941\":\"v-1720b947#0/2\",\"1942\":\"v-1720b947#0/3\",\"1943\":\"v-1720b947#0/4\",\"1944\":\"v-1720b947#0/5\",\"1945\":\"v-1720b947#0/6\",\"1946\":\"v-1720b947#0/7\",\"1947\":\"v-1720b947#1\",\"1948\":\"v-1720b947#2\",\"1949\":\"v-1720b947#2/8\",\"1950\":\"v-1720b947#2/9\",\"1951\":\"v-1720b947#3\",\"1952\":\"v-1720b947#3/10\",\"1953\":\"v-1720b947#3/11\",\"1954\":\"v-1720b947#4\",\"1955\":\"v-1720b947#4/12\",\"1956\":\"v-1720b947#4/13\",\"1957\":\"v-1720b947#5\",\"1958\":\"v-1720b947#5/14\",\"1959\":\"v-1720b947#5/15\",\"1960\":\"v-1720b947#6\",\"1961\":\"v-1720b947#6/16\",\"1962\":\"v-1720b947#6/17\",\"1963\":\"v-1720b947#6/18\",\"1964\":\"v-1720b947#7\",\"1965\":\"v-1720b947#7/19\",\"1966\":\"v-1720b947#7/20\",\"1967\":\"v-1720b947#8\",\"1968\":\"v-1720b947#8/21\",\"1969\":\"v-1720b947#8/22\",\"1970\":\"v-1720b947#8/23\",\"1971\":\"v-1720b947#8/24\",\"1972\":\"v-1720b947#9\",\"1973\":\"v-1720b947#9/25\",\"1974\":\"v-1720b947#9/26\",\"1975\":\"v-1720b947#9/27\",\"1976\":\"v-1720b947#10\",\"1977\":\"v-1720b947#11\",\"1978\":\"v-1720b947#11/28\",\"1979\":\"v-1720b947#11/29\",\"1980\":\"v-1720b947#12\",\"1981\":\"v-1720b947#12/30\",\"1982\":\"v-1720b947#12/31\",\"1983\":\"v-1720b947#13\",\"1984\":\"v-1720b947#13/32\",\"1985\":\"v-1720b947#13/33\",\"1986\":\"v-1720b947#14\",\"1987\":\"v-1720b947#14/34\",\"1988\":\"v-1720b947#14/35\",\"1989\":\"v-1720b947#14/36\",\"1990\":\"v-1720b947#15\",\"1991\":\"v-1720b947#15/37\",\"1992\":\"v-1720b947#15/38\",\"1993\":\"v-1720b947#15/39\",\"1994\":\"v-1720b947#16\",\"1995\":\"v-1720b947#16/40\",\"1996\":\"v-1720b947#16/41\",\"1997\":\"v-1720b947#16/42\",\"1998\":\"v-1720b947#16/43\",\"1999\":\"v-1720b947#16/44\",\"2000\":\"v-1720b947#16/45\",\"2001\":\"v-1720b947#17\",\"2002\":\"v-1720b947#17/0\",\"2003\":\"v-1720b947#17/1\",\"2004\":\"v-1720b947#18\",\"2005\":\"v-1720b947#18/2\",\"2006\":\"v-1720b947#18/3\",\"2007\":\"v-1720b947#19\",\"2008\":\"v-1720b947#19/4\",\"2009\":\"v-1720b947#19/5\",\"2010\":\"v-1720b947#20\",\"2011\":\"v-1720b947#21\",\"2012\":\"v-1720b947#21/6\",\"2013\":\"v-1720b947#21/7\",\"2014\":\"v-1720b947#21/8\",\"2015\":\"v-1720b947#21/9\",\"2016\":\"v-1720b947#22\",\"2017\":\"v-1720b947#22/10\",\"2018\":\"v-1720b947#23\",\"2019\":\"v-1720b947#23/0\",\"2020\":\"v-1720b947#24\",\"2021\":\"v-1720b947#24/0\",\"2022\":\"v-1720b947#24/1\",\"2023\":\"v-201e690c\",\"2024\":\"v-201e690c#1\",\"2025\":\"v-201e690c#1/0\",\"2026\":\"v-201e690c#1/1\",\"2027\":\"v-201e690c#1/2\",\"2028\":\"v-201e690c#1/3\",\"2029\":\"v-201e690c#1/4\",\"2030\":\"v-201e690c#1/5\",\"2031\":\"v-201e690c#1/6\",\"2032\":\"v-201e690c#1/7\",\"2033\":\"v-201e690c#1/8\",\"2034\":\"v-201e690c#1/9\",\"2035\":\"v-201e690c#1/10\",\"2036\":\"v-201e690c#1/11\",\"2037\":\"v-201e690c#2\",\"2038\":\"v-201e690c#2/12\",\"2039\":\"v-201e690c#2/13\",\"2040\":\"v-201e690c#2/14\",\"2041\":\"v-201e690c#2/15\",\"2042\":\"v-201e690c#2/16\",\"2043\":\"v-201e690c#3\",\"2044\":\"v-201e690c#3/17\",\"2045\":\"v-201e690c#3/18\",\"2046\":\"v-201e690c#3/19\",\"2047\":\"v-201e690c#3/20\",\"2048\":\"v-201e690c#3/21\",\"2049\":\"v-201e690c#4\",\"2050\":\"v-201e690c#4/22\",\"2051\":\"v-201e690c#5\",\"2052\":\"v-201e690c#5/0\",\"2053\":\"v-201e690c#6\",\"2054\":\"v-201e690c#6/0\",\"2055\":\"v-201e690c#6/1\",\"2056\":\"v-201e690c#7\",\"2057\":\"v-201e690c#7/0\",\"2058\":\"v-201e690c#7/1\",\"2059\":\"v-201e690c#7/2\",\"2060\":\"v-201e690c#8\",\"2061\":\"v-201e690c#8/3\",\"2062\":\"v-201e690c#8/4\",\"2063\":\"v-201e690c#9\",\"2064\":\"v-201e690c#9/5\",\"2065\":\"v-201e690c#9/6\",\"2066\":\"v-201e690c#9/7\",\"2067\":\"v-201e690c#9/8\",\"2068\":\"v-201e690c#9/9\",\"2069\":\"v-201e690c#9/10\",\"2070\":\"v-201e690c#9/11\",\"2071\":\"v-201e690c#9/12\",\"2072\":\"v-201e690c#9/13\",\"2073\":\"v-201e690c#9/14\",\"2074\":\"v-201e690c#9/15\",\"2075\":\"v-201e690c#9/16\",\"2076\":\"v-201e690c#10\",\"2077\":\"v-201e690c#10/0\",\"2078\":\"v-201e690c#10/1\",\"2079\":\"v-201e690c#10/2\",\"2080\":\"v-201e690c#10/3\",\"2081\":\"v-201e690c#11\",\"2082\":\"v-201e690c#11/0\",\"2083\":\"v-201e690c#11/1\",\"2084\":\"v-201e690c#11/2\",\"2085\":\"v-201e690c#11/3\",\"2086\":\"v-201e690c#11/4\",\"2087\":\"v-201e690c#11/5\",\"2088\":\"v-201e690c#12\",\"2089\":\"v-201e690c#12/6\",\"2090\":\"v-201e690c#12/7\",\"2091\":\"v-201e690c#13\",\"2092\":\"v-201e690c#13/8\",\"2093\":\"v-201e690c#13/9\",\"2094\":\"v-201e690c#13/10\",\"2095\":\"v-201e690c#13/11\",\"2096\":\"v-201e690c#13/12\",\"2097\":\"v-201e690c#13/13\",\"2098\":\"v-201e690c#13/14\",\"2099\":\"v-201e690c#13/15\",\"2100\":\"v-201e690c#14\",\"2101\":\"v-201e690c#14/0\",\"2102\":\"v-201e690c#14/1\",\"2103\":\"v-201e690c#14/2\",\"2104\":\"v-201e690c#14/3\",\"2105\":\"v-201e690c#14/4\",\"2106\":\"v-201e690c#14/5\",\"2107\":\"v-201e690c#15\",\"2108\":\"v-201e690c#15/0\",\"2109\":\"v-201e690c#15/1\",\"2110\":\"v-201e690c#16\",\"2111\":\"v-201e690c#16/2\",\"2112\":\"v-201e690c#16/3\",\"2113\":\"v-201e690c#16/4\",\"2114\":\"v-201e690c#16/5\",\"2115\":\"v-201e690c#17\",\"2116\":\"v-201e690c#18\",\"2117\":\"v-201e690c#18/6\",\"2118\":\"v-201e690c#18/7\",\"2119\":\"v-201e690c#18/8\",\"2120\":\"v-201e690c#18/9\",\"2121\":\"v-201e690c#18/10\",\"2122\":\"v-201e690c#19\",\"2123\":\"v-201e690c#19/11\",\"2124\":\"v-201e690c#19/12\",\"2125\":\"v-a95cae96\",\"2126\":\"v-a95cae96#1\",\"2127\":\"v-a95cae96#1/0\",\"2128\":\"v-a95cae96#1/1\",\"2129\":\"v-a95cae96#1/2\",\"2130\":\"v-a95cae96#2\",\"2131\":\"v-a95cae96#2/3\",\"2132\":\"v-a95cae96#3\",\"2133\":\"v-a95cae96#3/0\",\"2134\":\"v-a95cae96#3/1\",\"2135\":\"v-a95cae96#4\",\"2136\":\"v-a95cae96#4/2\",\"2137\":\"v-a95cae96#4/3\",\"2138\":\"v-a95cae96#5\",\"2139\":\"v-a95cae96#5/4\",\"2140\":\"v-a95cae96#5/5\",\"2141\":\"v-a95cae96#5/6\",\"2142\":\"v-a95cae96#6\",\"2143\":\"v-a95cae96#6/7\",\"2144\":\"v-a95cae96#6/8\",\"2145\":\"v-a95cae96#7\",\"2146\":\"v-a95cae96#7/9\",\"2147\":\"v-a95cae96#7/10\",\"2148\":\"v-a95cae96#8\",\"2149\":\"v-a95cae96#8/11\",\"2150\":\"v-a95cae96#8/12\",\"2151\":\"v-a95cae96#9\",\"2152\":\"v-a95cae96#9/13\",\"2153\":\"v-a95cae96#9/14\",\"2154\":\"v-a95cae96#10\",\"2155\":\"v-a95cae96#10/15\",\"2156\":\"v-a95cae96#10/16\",\"2157\":\"v-a95cae96#11\",\"2158\":\"v-a95cae96#11/17\",\"2159\":\"v-a95cae96#11/18\",\"2160\":\"v-a95cae96#12\",\"2161\":\"v-a95cae96#12/19\",\"2162\":\"v-a95cae96#12/20\",\"2163\":\"v-a95cae96#13\",\"2164\":\"v-a95cae96#13/21\",\"2165\":\"v-a95cae96#13/22\",\"2166\":\"v-a95cae96#14\",\"2167\":\"v-a95cae96#14/23\",\"2168\":\"v-a95cae96#14/24\",\"2169\":\"v-a95cae96#15\",\"2170\":\"v-a95cae96#15/25\",\"2171\":\"v-a95cae96#15/26\",\"2172\":\"v-a95cae96#16\",\"2173\":\"v-a95cae96#17\",\"2174\":\"v-a95cae96#17/27\",\"2175\":\"v-a95cae96#17/28\",\"2176\":\"v-a95cae96#18\",\"2177\":\"v-a95cae96#18/29\",\"2178\":\"v-a95cae96#18/30\",\"2179\":\"v-a95cae96#19\",\"2180\":\"v-a95cae96#19/31\",\"2181\":\"v-a95cae96#19/32\",\"2182\":\"v-a95cae96#20\",\"2183\":\"v-a95cae96#21\",\"2184\":\"v-a95cae96#21/33\",\"2185\":\"v-a95cae96#21/34\",\"2186\":\"v-a95cae96#22\",\"2187\":\"v-a95cae96#22/35\",\"2188\":\"v-a95cae96#22/36\",\"2189\":\"v-a95cae96#23\",\"2190\":\"v-a95cae96#23/37\",\"2191\":\"v-a95cae96#23/38\",\"2192\":\"v-a95cae96#24\",\"2193\":\"v-a95cae96#24/39\",\"2194\":\"v-a95cae96#24/40\",\"2195\":\"v-a95cae96#25\",\"2196\":\"v-a95cae96#25/41\",\"2197\":\"v-a95cae96#25/42\",\"2198\":\"v-a95cae96#26\",\"2199\":\"v-a95cae96#26/43\",\"2200\":\"v-a95cae96#26/44\",\"2201\":\"v-a95cae96#27\",\"2202\":\"v-a95cae96#27/45\",\"2203\":\"v-a95cae96#27/46\",\"2204\":\"v-a95cae96#27/47\",\"2205\":\"v-a95cae96#28\",\"2206\":\"v-a95cae96#28/48\",\"2207\":\"v-a95cae96#28/49\",\"2208\":\"v-a95cae96#28/50\",\"2209\":\"v-a95cae96#28/51\",\"2210\":\"v-a95cae96#28/52\",\"2211\":\"v-a95cae96#28/53\",\"2212\":\"v-a95cae96#29\",\"2213\":\"v-a95cae96#29/54\",\"2214\":\"v-a95cae96#29/55\",\"2215\":\"v-a95cae96#29/56\",\"2216\":\"v-a95cae96#29/57\",\"2217\":\"v-a95cae96#29/58\",\"2218\":\"v-a95cae96#29/59\",\"2219\":\"v-a95cae96#30\",\"2220\":\"v-a95cae96#30/0\",\"2221\":\"v-a95cae96#30/1\",\"2222\":\"v-a95cae96#30/2\",\"2223\":\"v-a95cae96#30/3\",\"2224\":\"v-a95cae96#30/4\",\"2225\":\"v-a95cae96#30/5\",\"2226\":\"v-a95cae96#31\",\"2227\":\"v-a95cae96#31/6\",\"2228\":\"v-a95cae96#31/7\",\"2229\":\"v-a95cae96#32\",\"2230\":\"v-a95cae96#32/8\",\"2231\":\"v-a95cae96#32/9\",\"2232\":\"v-a95cae96#33\",\"2233\":\"v-a95cae96#33/10\",\"2234\":\"v-a95cae96#33/11\",\"2235\":\"v-a95cae96#33/12\",\"2236\":\"v-a95cae96#33/13\",\"2237\":\"v-a95cae96#33/14\",\"2238\":\"v-a95cae96#33/15\",\"2239\":\"v-a95cae96#33/16\",\"2240\":\"v-a95cae96#34\",\"2241\":\"v-a95cae96#34/17\",\"2242\":\"v-a95cae96#34/18\",\"2243\":\"v-a95cae96#34/19\",\"2244\":\"v-a95cae96#34/20\",\"2245\":\"v-a95cae96#35\",\"2246\":\"v-a95cae96#35/21\",\"2247\":\"v-a95cae96#35/22\",\"2248\":\"v-a95cae96#36\",\"2249\":\"v-a95cae96#36/23\",\"2250\":\"v-a95cae96#36/24\",\"2251\":\"v-a95cae96#36/25\",\"2252\":\"v-a95cae96#36/26\",\"2253\":\"v-a95cae96#36/27\",\"2254\":\"v-a95cae96#37\",\"2255\":\"v-a95cae96#37/0\",\"2256\":\"v-a95cae96#37/1\",\"2257\":\"v-a95cae96#38\",\"2258\":\"v-a95cae96#38/2\",\"2259\":\"v-a95cae96#38/3\",\"2260\":\"v-a95cae96#38/4\",\"2261\":\"v-a95cae96#38/5\",\"2262\":\"v-a95cae96#38/6\",\"2263\":\"v-a95cae96#38/7\",\"2264\":\"v-a95cae96#39\",\"2265\":\"v-a95cae96#39/8\",\"2266\":\"v-a95cae96#39/9\",\"2267\":\"v-a95cae96#40\",\"2268\":\"v-a95cae96#40/10\",\"2269\":\"v-a95cae96#40/11\",\"2270\":\"v-a95cae96#41\",\"2271\":\"v-a95cae96#41/12\",\"2272\":\"v-a95cae96#41/13\",\"2273\":\"v-a95cae96#42\",\"2274\":\"v-a95cae96#42/14\",\"2275\":\"v-a95cae96#42/15\",\"2276\":\"v-a95cae96#43\",\"2277\":\"v-a95cae96#43/16\",\"2278\":\"v-a95cae96#43/17\",\"2279\":\"v-a95cae96#43/18\",\"2280\":\"v-a95cae96#43/19\",\"2281\":\"v-a95cae96#43/20\",\"2282\":\"v-a95cae96#43/21\",\"2283\":\"v-a95cae96#44\",\"2284\":\"v-a95cae96#44/22\",\"2285\":\"v-a95cae96#45\",\"2286\":\"v-a95cae96#45/0\",\"2287\":\"v-a95cae96#45/1\",\"2288\":\"v-a95cae96#45/2\",\"2289\":\"v-a95cae96#46\",\"2290\":\"v-a95cae96#46/0\",\"2291\":\"v-a95cae96#46/1\",\"2292\":\"v-a95cae96#47\",\"2293\":\"v-a95cae96#47/2\",\"2294\":\"v-5263b62e\",\"2295\":\"v-5263b62e#1\",\"2296\":\"v-5263b62e#1/0\",\"2297\":\"v-5263b62e#1/1\",\"2298\":\"v-5263b62e#1/2\",\"2299\":\"v-5263b62e#1/3\",\"2300\":\"v-5263b62e#1/4\",\"2301\":\"v-5263b62e#1/5\",\"2302\":\"v-5263b62e#2\",\"2303\":\"v-5263b62e#2/6\",\"2304\":\"v-5263b62e#2/7\",\"2305\":\"v-5263b62e#3\",\"2306\":\"v-5263b62e#3/8\",\"2307\":\"v-5263b62e#3/9\",\"2308\":\"v-5263b62e#4\",\"2309\":\"v-5263b62e#4/10\",\"2310\":\"v-5263b62e#4/11\",\"2311\":\"v-5263b62e#5\",\"2312\":\"v-5263b62e#5/12\",\"2313\":\"v-5263b62e#5/13\",\"2314\":\"v-5263b62e#5/14\",\"2315\":\"v-436a12a6\",\"2316\":\"v-436a12a6#0/0\",\"2317\":\"v-436a12a6#0/1\",\"2318\":\"v-436a12a6#0/2\",\"2319\":\"v-436a12a6#0/3\",\"2320\":\"v-436a12a6#0/4\",\"2321\":\"v-436a12a6#0/5\",\"2322\":\"v-436a12a6#0/6\",\"2323\":\"v-436a12a6#1\",\"2324\":\"v-436a12a6#1/0\",\"2325\":\"v-436a12a6#1/1\",\"2326\":\"v-436a12a6#2\",\"2327\":\"v-436a12a6#2/2\",\"2328\":\"v-436a12a6#2/3\",\"2329\":\"v-436a12a6#2/4\",\"2330\":\"v-436a12a6#2/5\",\"2331\":\"v-436a12a6#2/6\",\"2332\":\"v-436a12a6#2/7\",\"2333\":\"v-436a12a6#2/8\",\"2334\":\"v-436a12a6#2/9\",\"2335\":\"v-436a12a6#2/10\",\"2336\":\"v-436a12a6#2/11\",\"2337\":\"v-436a12a6#3\",\"2338\":\"v-436a12a6#3/0\",\"2339\":\"v-436a12a6#3/1\",\"2340\":\"v-436a12a6#3/2\",\"2341\":\"v-436a12a6#3/3\",\"2342\":\"v-436a12a6#3/4\",\"2343\":\"v-436a12a6#3/5\",\"2344\":\"v-436a12a6#3/6\",\"2345\":\"v-436a12a6#3/7\",\"2346\":\"v-3e499b0e\",\"2347\":\"v-3e499b0e#0/0\",\"2348\":\"v-3e499b0e#0/1\",\"2349\":\"v-3e499b0e#0/2\",\"2350\":\"v-3e499b0e#0/3\",\"2351\":\"v-3e499b0e#0/4\",\"2352\":\"v-3e499b0e#1\",\"2353\":\"v-3e499b0e#1/5\",\"2354\":\"v-3e499b0e#1/6\",\"2355\":\"v-3e499b0e#2\",\"2356\":\"v-3e499b0e#2/7\",\"2357\":\"v-3e499b0e#2/8\",\"2358\":\"v-3e499b0e#2/9\",\"2359\":\"v-3e499b0e#3\",\"2360\":\"v-3e499b0e#3/0\",\"2361\":\"v-3e499b0e#3/1\",\"2362\":\"v-3e499b0e#3/2\",\"2363\":\"v-3e499b0e#4\",\"2364\":\"v-3e499b0e#4/3\",\"2365\":\"v-3e499b0e#4/4\",\"2366\":\"v-3e499b0e#5\",\"2367\":\"v-3e499b0e#5/5\",\"2368\":\"v-3e499b0e#5/6\",\"2369\":\"v-3e499b0e#5/7\",\"2370\":\"v-3e499b0e#5/8\",\"2371\":\"v-3e499b0e#6\",\"2372\":\"v-3e499b0e#6/9\",\"2373\":\"v-3e499b0e#6/10\",\"2374\":\"v-3e499b0e#6/11\",\"2375\":\"v-3e499b0e#6/12\",\"2376\":\"v-3e499b0e#7\",\"2377\":\"v-3e499b0e#7/13\",\"2378\":\"v-3e499b0e#7/14\",\"2379\":\"v-3e499b0e#7/15\",\"2380\":\"v-3e499b0e#8\",\"2381\":\"v-3e499b0e#8/16\",\"2382\":\"v-3e499b0e#8/17\",\"2383\":\"v-3e499b0e#8/18\",\"2384\":\"v-3e499b0e#8/19\",\"2385\":\"v-3e499b0e#9\",\"2386\":\"v-3e499b0e#9/0\",\"2387\":\"v-3e499b0e#9/1\",\"2388\":\"v-3e499b0e#10\",\"2389\":\"v-3e499b0e#10/2\",\"2390\":\"v-3e499b0e#10/3\",\"2391\":\"v-3e499b0e#10/4\",\"2392\":\"v-cd7f9aaa\",\"2393\":\"v-cd7f9aaa#1\",\"2394\":\"v-cd7f9aaa#1/0\",\"2395\":\"v-cd7f9aaa#1/1\",\"2396\":\"v-cd7f9aaa#2\",\"2397\":\"v-cd7f9aaa#2/0\",\"2398\":\"v-cd7f9aaa#3\",\"2399\":\"v-cd7f9aaa#3/1\",\"2400\":\"v-cd7f9aaa#4\",\"2401\":\"v-cd7f9aaa#4/0\",\"2402\":\"v-cd7f9aaa#5\",\"2403\":\"v-cd7f9aaa#5/0\",\"2404\":\"v-cd7f9aaa#5/1\",\"2405\":\"v-cd7f9aaa#6\",\"2406\":\"v-cd7f9aaa#6/2\",\"2407\":\"v-cd7f9aaa#6/3\",\"2408\":\"v-cd7f9aaa#7\",\"2409\":\"v-cd7f9aaa#7/4\",\"2410\":\"v-cd7f9aaa#7/5\",\"2411\":\"v-cd7f9aaa#8\",\"2412\":\"v-cd7f9aaa#8/6\",\"2413\":\"v-cd7f9aaa#8/7\",\"2414\":\"v-cd7f9aaa#9\",\"2415\":\"v-cd7f9aaa#9/8\",\"2416\":\"v-cd7f9aaa#9/9\",\"2417\":\"v-cd7f9aaa#10\",\"2418\":\"v-cd7f9aaa#10/10\",\"2419\":\"v-cd7f9aaa#10/11\",\"2420\":\"v-cd7f9aaa#10/12\",\"2421\":\"v-cd7f9aaa#10/13\",\"2422\":\"v-cd7f9aaa#10/14\",\"2423\":\"v-cd7f9aaa#11\",\"2424\":\"v-cd7f9aaa#11/15\",\"2425\":\"v-cd7f9aaa#11/16\",\"2426\":\"v-cd7f9aaa#11/17\",\"2427\":\"v-cd7f9aaa#12\",\"2428\":\"v-cd7f9aaa#12/18\",\"2429\":\"v-cd7f9aaa#12/19\",\"2430\":\"v-cd7f9aaa#13\",\"2431\":\"v-cd7f9aaa#13/20\",\"2432\":\"v-cd7f9aaa#13/21\",\"2433\":\"v-cd7f9aaa#13/22\",\"2434\":\"v-cd7f9aaa#14\",\"2435\":\"v-cd7f9aaa#14/23\",\"2436\":\"v-cd7f9aaa#14/24\",\"2437\":\"v-cd7f9aaa#15\",\"2438\":\"v-cd7f9aaa#15/25\",\"2439\":\"v-cd7f9aaa#15/26\",\"2440\":\"v-cd7f9aaa#15/27\",\"2441\":\"v-cd7f9aaa#16\",\"2442\":\"v-cd7f9aaa#16/28\",\"2443\":\"v-cd7f9aaa#17\",\"2444\":\"v-cd7f9aaa#17/0\",\"2445\":\"v-cd7f9aaa#18\",\"2446\":\"v-cd7f9aaa#18/1\",\"2447\":\"v-cd7f9aaa#19\",\"2448\":\"v-cd7f9aaa#19/2\",\"2449\":\"v-cd7f9aaa#19/3\",\"2450\":\"v-cd7f9aaa#20\",\"2451\":\"v-cd7f9aaa#20/4\",\"2452\":\"v-cd7f9aaa#20/5\",\"2453\":\"v-cd7f9aaa#21\",\"2454\":\"v-cd7f9aaa#21/0\",\"2455\":\"v-cd7f9aaa#22\",\"2456\":\"v-cd7f9aaa#22/1\",\"2457\":\"v-cd7f9aaa#23\",\"2458\":\"v-cd7f9aaa#23/0\",\"2459\":\"v-cd7f9aaa#24\",\"2460\":\"v-cd7f9aaa#24/0\",\"2461\":\"v-cd7f9aaa#24/1\",\"2462\":\"v-cd7f9aaa#25\",\"2463\":\"v-cd7f9aaa#25/2\",\"2464\":\"v-cd7f9aaa#25/3\",\"2465\":\"v-cd7f9aaa#25/4\",\"2466\":\"v-cd7f9aaa#26\",\"2467\":\"v-cd7f9aaa#26/5\",\"2468\":\"v-cd7f9aaa#26/6\",\"2469\":\"v-cd7f9aaa#26/7\",\"2470\":\"v-cd7f9aaa#27\",\"2471\":\"v-cd7f9aaa#27/8\",\"2472\":\"v-cd7f9aaa#27/9\",\"2473\":\"v-cd7f9aaa#27/10\",\"2474\":\"v-cd7f9aaa#27/11\",\"2475\":\"v-cd7f9aaa#28\",\"2476\":\"v-cd7f9aaa#28/0\",\"2477\":\"v-cd7f9aaa#29\",\"2478\":\"v-cd7f9aaa#29/1\",\"2479\":\"v-cd7f9aaa#29/2\",\"2480\":\"v-cd7f9aaa#29/3\",\"2481\":\"v-cd7f9aaa#29/4\",\"2482\":\"v-cd7f9aaa#30\",\"2483\":\"v-cd7f9aaa#30/0\",\"2484\":\"v-cd7f9aaa#30/1\",\"2485\":\"v-cd7f9aaa#31\",\"2486\":\"v-cd7f9aaa#31/2\",\"2487\":\"v-cd7f9aaa#31/3\",\"2488\":\"v-cd7f9aaa#32\",\"2489\":\"v-cd7f9aaa#32/4\",\"2490\":\"v-cd7f9aaa#32/5\",\"2491\":\"v-cd7f9aaa#32/6\",\"2492\":\"v-cd7f9aaa#32/7\",\"2493\":\"v-cd7f9aaa#33\",\"2494\":\"v-cd7f9aaa#33/8\",\"2495\":\"v-cd7f9aaa#33/9\",\"2496\":\"v-cd7f9aaa#34\",\"2497\":\"v-cd7f9aaa#34/10\",\"2498\":\"v-cd7f9aaa#34/11\",\"2499\":\"v-cd7f9aaa#34/12\",\"2500\":\"v-cd7f9aaa#34/13\",\"2501\":\"v-cd7f9aaa#35\",\"2502\":\"v-cd7f9aaa#35/14\",\"2503\":\"v-cd7f9aaa#35/15\",\"2504\":\"v-cd7f9aaa#35/16\",\"2505\":\"v-cd7f9aaa#35/17\",\"2506\":\"v-cd7f9aaa#36\",\"2507\":\"v-cd7f9aaa#36/18\",\"2508\":\"v-cd7f9aaa#36/19\",\"2509\":\"v-cd7f9aaa#37\",\"2510\":\"v-cd7f9aaa#37/20\",\"2511\":\"v-cd7f9aaa#37/21\",\"2512\":\"v-cd7f9aaa#37/22\",\"2513\":\"v-cd7f9aaa#38\",\"2514\":\"v-cd7f9aaa#38/23\",\"2515\":\"v-cd7f9aaa#38/24\",\"2516\":\"v-cd7f9aaa#39\",\"2517\":\"v-cd7f9aaa#39/25\",\"2518\":\"v-cd7f9aaa#39/26\",\"2519\":\"v-5aaae15d\",\"2520\":\"v-5aaae15d#1\",\"2521\":\"v-5aaae15d#1/0\",\"2522\":\"v-5aaae15d#1/1\",\"2523\":\"v-5aaae15d#1/2\",\"2524\":\"v-5aaae15d#2\",\"2525\":\"v-5aaae15d#2/0\",\"2526\":\"v-5aaae15d#3\",\"2527\":\"v-5aaae15d#3/1\",\"2528\":\"v-5aaae15d#4\",\"2529\":\"v-5aaae15d#4/0\",\"2530\":\"v-5aaae15d#4/1\",\"2531\":\"v-5aaae15d#5\",\"2532\":\"v-5aaae15d#5/2\",\"2533\":\"v-5aaae15d#5/3\",\"2534\":\"v-5aaae15d#5/4\",\"2535\":\"v-5aaae15d#5/5\",\"2536\":\"v-5aaae15d#5/6\",\"2537\":\"v-5aaae15d#5/7\",\"2538\":\"v-5aaae15d#6\",\"2539\":\"v-5aaae15d#6/8\",\"2540\":\"v-5aaae15d#6/9\",\"2541\":\"v-5aaae15d#6/10\",\"2542\":\"v-5aaae15d#6/11\",\"2543\":\"v-5aaae15d#6/12\",\"2544\":\"v-5aaae15d#6/13\",\"2545\":\"v-5aaae15d#6/14\",\"2546\":\"v-5aaae15d#6/15\",\"2547\":\"v-5aaae15d#7\",\"2548\":\"v-5aaae15d#7/16\",\"2549\":\"v-5aaae15d#7/17\",\"2550\":\"v-5aaae15d#8\",\"2551\":\"v-5aaae15d#8/18\",\"2552\":\"v-5aaae15d#8/19\",\"2553\":\"v-5aaae15d#9\",\"2554\":\"v-5aaae15d#9/20\",\"2555\":\"v-5aaae15d#9/21\",\"2556\":\"v-5aaae15d#10\",\"2557\":\"v-5aaae15d#10/22\",\"2558\":\"v-5aaae15d#10/23\",\"2559\":\"v-5aaae15d#10/24\",\"2560\":\"v-5aaae15d#10/25\",\"2561\":\"v-5aaae15d#10/26\",\"2562\":\"v-5aaae15d#10/27\",\"2563\":\"v-5aaae15d#10/28\",\"2564\":\"v-5aaae15d#11\",\"2565\":\"v-5aaae15d#11/29\",\"2566\":\"v-5aaae15d#11/30\",\"2567\":\"v-5aaae15d#12\",\"2568\":\"v-5aaae15d#12/31\",\"2569\":\"v-5aaae15d#12/32\",\"2570\":\"v-5aaae15d#13\",\"2571\":\"v-5aaae15d#13/33\",\"2572\":\"v-5aaae15d#13/34\",\"2573\":\"v-5aaae15d#14\",\"2574\":\"v-5aaae15d#14/0\",\"2575\":\"v-5aaae15d#15\",\"2576\":\"v-5aaae15d#15/1\",\"2577\":\"v-5aaae15d#16\",\"2578\":\"v-5aaae15d#16/0\",\"2579\":\"v-5aaae15d#17\",\"2580\":\"v-5aaae15d#17/0\",\"2581\":\"v-5aaae15d#18\",\"2582\":\"v-5aaae15d#18/0\",\"2583\":\"v-5aaae15d#18/1\",\"2584\":\"v-5aaae15d#18/2\",\"2585\":\"v-5aaae15d#18/3\",\"2586\":\"v-5aaae15d#19\",\"2587\":\"v-5aaae15d#19/0\",\"2588\":\"v-5aaae15d#19/1\",\"2589\":\"v-5aaae15d#19/2\",\"2590\":\"v-5aaae15d#20\",\"2591\":\"v-5aaae15d#20/3\",\"2592\":\"v-5aaae15d#20/4\",\"2593\":\"v-5aaae15d#21\",\"2594\":\"v-5aaae15d#21/5\",\"2595\":\"v-5aaae15d#21/6\",\"2596\":\"v-5aaae15d#22\",\"2597\":\"v-5aaae15d#22/7\",\"2598\":\"v-5aaae15d#22/8\",\"2599\":\"v-5aaae15d#23\",\"2600\":\"v-5aaae15d#23/9\",\"2601\":\"v-5aaae15d#23/10\",\"2602\":\"v-5aaae15d#24\",\"2603\":\"v-5aaae15d#24/11\",\"2604\":\"v-5aaae15d#24/12\",\"2605\":\"v-5aaae15d#25\",\"2606\":\"v-5aaae15d#25/13\",\"2607\":\"v-5aaae15d#26\",\"2608\":\"v-5aaae15d#26/14\",\"2609\":\"v-5aaae15d#26/15\",\"2610\":\"v-5aaae15d#27\",\"2611\":\"v-5aaae15d#27/16\",\"2612\":\"v-5aaae15d#27/17\",\"2613\":\"v-5aaae15d#28\",\"2614\":\"v-5aaae15d#28/18\",\"2615\":\"v-5aaae15d#28/19\",\"2616\":\"v-5aaae15d#29\",\"2617\":\"v-5aaae15d#29/20\",\"2618\":\"v-5aaae15d#29/21\",\"2619\":\"v-5aaae15d#30\",\"2620\":\"v-5aaae15d#30/22\",\"2621\":\"v-5aaae15d#30/23\",\"2622\":\"v-5aaae15d#31\",\"2623\":\"v-5aaae15d#31/24\",\"2624\":\"v-5aaae15d#31/25\",\"2625\":\"v-4f63eb30\",\"2626\":\"v-4f63eb30#0/0\",\"2627\":\"v-4f63eb30#0/1\",\"2628\":\"v-4f63eb30#0/2\",\"2629\":\"v-4f63eb30#1\",\"2630\":\"v-4f63eb30#1/0\",\"2631\":\"v-4f63eb30#2\",\"2632\":\"v-4f63eb30#2/0\",\"2633\":\"v-4f63eb30#2/1\",\"2634\":\"v-4f63eb30#3\",\"2635\":\"v-4f63eb30#3/2\",\"2636\":\"v-4f63eb30#3/3\",\"2637\":\"v-4f63eb30#4\",\"2638\":\"v-4f63eb30#4/4\",\"2639\":\"v-4f63eb30#4/5\",\"2640\":\"v-4f63eb30#5\",\"2641\":\"v-4f63eb30#5/6\",\"2642\":\"v-4f63eb30#5/7\",\"2643\":\"v-4f63eb30#6\",\"2644\":\"v-4f63eb30#6/8\",\"2645\":\"v-4f63eb30#6/9\",\"2646\":\"v-4f63eb30#6/10\",\"2647\":\"v-4f63eb30#7\",\"2648\":\"v-4f63eb30#7/0\",\"2649\":\"v-4f63eb30#7/1\",\"2650\":\"v-4f63eb30#8\",\"2651\":\"v-4f63eb30#8/0\",\"2652\":\"v-4f63eb30#8/1\",\"2653\":\"v-4f63eb30#9\",\"2654\":\"v-4f63eb30#9/0\",\"2655\":\"v-4f63eb30#9/1\",\"2656\":\"v-4f63eb30#10\",\"2657\":\"v-4f63eb30#10/0\",\"2658\":\"v-4f63eb30#10/1\",\"2659\":\"v-5f6cc20e\",\"2660\":\"v-5f6cc20e#0/0\",\"2661\":\"v-5f6cc20e#0/1\",\"2662\":\"v-5f6cc20e#1\",\"2663\":\"v-5f6cc20e#1/0\",\"2664\":\"v-5f6cc20e#1/1\",\"2665\":\"v-5f6cc20e#1/2\",\"2666\":\"v-5f6cc20e#1/3\",\"2667\":\"v-5f6cc20e#1/4\",\"2668\":\"v-5f6cc20e#1/5\",\"2669\":\"v-5f6cc20e#2\",\"2670\":\"v-5f6cc20e#2/0\",\"2671\":\"v-5f6cc20e#2/1\",\"2672\":\"v-5f6cc20e#3\",\"2673\":\"v-5f6cc20e#3/0\",\"2674\":\"v-5f6cc20e#3/1\",\"2675\":\"v-5f6cc20e#3/2\",\"2676\":\"v-5f6cc20e#3/3\",\"2677\":\"v-5f6cc20e#3/4\",\"2678\":\"v-5f6cc20e#4\",\"2679\":\"v-5f6cc20e#4/0\",\"2680\":\"v-5f6cc20e#4/1\",\"2681\":\"v-5f6cc20e#4/2\",\"2682\":\"v-5f6cc20e#4/3\",\"2683\":\"v-5f6cc20e#4/4\",\"2684\":\"v-5f6cc20e#4/5\",\"2685\":\"v-5f6cc20e#4/6\",\"2686\":\"v-5f6cc20e#5\",\"2687\":\"v-5f6cc20e#5/0\",\"2688\":\"v-5f6cc20e#6\",\"2689\":\"v-5f6cc20e#6/0\",\"2690\":\"v-5f6cc20e#6/1\",\"2691\":\"v-5f6cc20e#6/2\",\"2692\":\"v-5f6cc20e#6/3\",\"2693\":\"v-5f6cc20e#7\",\"2694\":\"v-5f6cc20e#7/4\",\"2695\":\"v-5f6cc20e#7/5\",\"2696\":\"v-5f6cc20e#7/6\",\"2697\":\"v-5f6cc20e#7/7\",\"2698\":\"v-5f6cc20e#8\",\"2699\":\"v-5f6cc20e#8/8\",\"2700\":\"v-5f6cc20e#8/9\",\"2701\":\"v-5f6cc20e#9\",\"2702\":\"v-5f6cc20e#9/10\",\"2703\":\"v-5f6cc20e#9/11\",\"2704\":\"v-5f6cc20e#9/12\",\"2705\":\"v-5f6cc20e#9/13\",\"2706\":\"v-5f6cc20e#10\",\"2707\":\"v-5f6cc20e#10/14\",\"2708\":\"v-5f6cc20e#10/15\",\"2709\":\"v-5f6cc20e#10/16\",\"2710\":\"v-5f6cc20e#10/17\",\"2711\":\"v-5f6cc20e#11\",\"2712\":\"v-5f6cc20e#11/0\",\"2713\":\"v-5f6cc20e#12\",\"2714\":\"v-5f6cc20e#12/1\",\"2715\":\"v-5f6cc20e#13\",\"2716\":\"v-5f6cc20e#13/0\",\"2717\":\"v-5f6cc20e#13/1\",\"2718\":\"v-5f6cc20e#14\",\"2719\":\"v-5f6cc20e#14/2\",\"2720\":\"v-5f6cc20e#14/3\",\"2721\":\"v-5f6cc20e#14/4\",\"2722\":\"v-5f6cc20e#14/5\",\"2723\":\"v-5f6cc20e#14/6\",\"2724\":\"v-5f6cc20e#14/7\",\"2725\":\"v-5f6cc20e#14/8\",\"2726\":\"v-5f6cc20e#14/9\",\"2727\":\"v-5f6cc20e#14/10\",\"2728\":\"v-5f6cc20e#14/11\",\"2729\":\"v-5f6cc20e#14/12\",\"2730\":\"v-5f6cc20e#14/13\",\"2731\":\"v-5f6cc20e#14/14\",\"2732\":\"v-5f6cc20e#14/15\",\"2733\":\"v-5f6cc20e#14/16\",\"2734\":\"v-5f6cc20e#14/17\",\"2735\":\"v-5f6cc20e#14/18\",\"2736\":\"v-5f6cc20e#14/19\",\"2737\":\"v-5f6cc20e#14/20\",\"2738\":\"v-5f6cc20e#14/21\",\"2739\":\"v-5f6cc20e#14/22\",\"2740\":\"v-5f6cc20e#14/23\",\"2741\":\"v-5f6cc20e#14/24\",\"2742\":\"v-5f6cc20e#15\",\"2743\":\"v-5f6cc20e#15/25\",\"2744\":\"v-5f6cc20e#15/26\",\"2745\":\"v-5f6cc20e#15/27\",\"2746\":\"v-5f6cc20e#15/28\",\"2747\":\"v-5f6cc20e#15/29\",\"2748\":\"v-5f6cc20e#16\",\"2749\":\"v-5f6cc20e#16/30\",\"2750\":\"v-5f6cc20e#16/31\",\"2751\":\"v-5f6cc20e#17\",\"2752\":\"v-5f6cc20e#17/32\",\"2753\":\"v-5f6cc20e#17/33\",\"2754\":\"v-5f6cc20e#17/34\",\"2755\":\"v-5f6cc20e#17/35\",\"2756\":\"v-5f6cc20e#17/36\",\"2757\":\"v-5f6cc20e#18\",\"2758\":\"v-5f6cc20e#18/37\",\"2759\":\"v-5f6cc20e#18/38\",\"2760\":\"v-5f6cc20e#18/39\",\"2761\":\"v-5f6cc20e#19\",\"2762\":\"v-5f6cc20e#19/40\",\"2763\":\"v-5f6cc20e#19/41\",\"2764\":\"v-5f6cc20e#20\",\"2765\":\"v-5f6cc20e#20/0\",\"2766\":\"v-5f6cc20e#21\",\"2767\":\"v-5f6cc20e#21/1\",\"2768\":\"v-5f6cc20e#21/2\",\"2769\":\"v-5f6cc20e#21/3\",\"2770\":\"v-5f6cc20e#22\",\"2771\":\"v-5f6cc20e#22/0\",\"2772\":\"v-0635775a\",\"2773\":\"v-0635775a#0/0\",\"2774\":\"v-0635775a#0/1\",\"2775\":\"v-0635775a#0/2\",\"2776\":\"v-0635775a#0/3\",\"2777\":\"v-0635775a#0/4\",\"2778\":\"v-0635775a#0/5\",\"2779\":\"v-0635775a#0/6\",\"2780\":\"v-0635775a#1\",\"2781\":\"v-0635775a#1/0\",\"2782\":\"v-0635775a#1/1\",\"2783\":\"v-0635775a#2\",\"2784\":\"v-0635775a#2/2\",\"2785\":\"v-0635775a#2/3\",\"2786\":\"v-0635775a#2/4\",\"2787\":\"v-0635775a#2/5\",\"2788\":\"v-0635775a#2/6\",\"2789\":\"v-0635775a#2/7\",\"2790\":\"v-0635775a#2/8\",\"2791\":\"v-0635775a#2/9\",\"2792\":\"v-0635775a#2/10\",\"2793\":\"v-0635775a#2/11\",\"2794\":\"v-0635775a#3\",\"2795\":\"v-0635775a#3/0\",\"2796\":\"v-0635775a#3/1\",\"2797\":\"v-0635775a#3/2\",\"2798\":\"v-0635775a#3/3\",\"2799\":\"v-0635775a#3/4\",\"2800\":\"v-0635775a#3/5\",\"2801\":\"v-0635775a#3/6\",\"2802\":\"v-0635775a#3/7\",\"2803\":\"v-60fbf706\",\"2804\":\"v-60fbf706#1\",\"2805\":\"v-60fbf706#1/0\",\"2806\":\"v-60fbf706#1/1\",\"2807\":\"v-60fbf706#1/2\",\"2808\":\"v-60fbf706#2\",\"2809\":\"v-60fbf706#2/0\",\"2810\":\"v-60fbf706#2/1\",\"2811\":\"v-60fbf706#2/2\",\"2812\":\"v-60fbf706#3\",\"2813\":\"v-60fbf706#3/0\",\"2814\":\"v-60fbf706#3/1\",\"2815\":\"v-60fbf706#3/2\",\"2816\":\"v-60fbf706#3/3\",\"2817\":\"v-60fbf706#4\",\"2818\":\"v-60fbf706#5\",\"2819\":\"v-60fbf706#5/0\",\"2820\":\"v-60fbf706#5/1\",\"2821\":\"v-60fbf706#5/2\",\"2822\":\"v-60fbf706#5/3\",\"2823\":\"v-60fbf706#5/4\",\"2824\":\"v-60fbf706#6\",\"2825\":\"v-60fbf706#6/0\",\"2826\":\"v-60fbf706#7\",\"2827\":\"v-60fbf706#7/0\",\"2828\":\"v-60fbf706#8\",\"2829\":\"v-60fbf706#9\",\"2830\":\"v-60fbf706#9/0\",\"2831\":\"v-60fbf706#9/1\",\"2832\":\"v-60fbf706#10\",\"2833\":\"v-60fbf706#10/0\",\"2834\":\"v-60fbf706#10/1\",\"2835\":\"v-60fbf706#10/2\",\"2836\":\"v-60fbf706#10/3\",\"2837\":\"v-60fbf706#10/4\",\"2838\":\"v-741aadec\",\"2839\":\"v-741aadec#1\",\"2840\":\"v-741aadec#1/0\",\"2841\":\"v-741aadec#2\",\"2842\":\"v-741aadec#3\",\"2843\":\"v-741aadec#3/0\",\"2844\":\"v-741aadec#3/1\",\"2845\":\"v-741aadec#4\",\"2846\":\"v-741aadec#4/0\",\"2847\":\"v-741aadec#4/1\",\"2848\":\"v-741aadec#5\",\"2849\":\"v-741aadec#5/0\",\"2850\":\"v-741aadec#5/1\",\"2851\":\"v-741aadec#6\",\"2852\":\"v-741aadec#6/0\",\"2853\":\"v-741aadec#6/1\",\"2854\":\"v-741aadec#6/2\",\"2855\":\"v-741aadec#7\",\"2856\":\"v-741aadec#8\",\"2857\":\"v-741aadec#8/0\",\"2858\":\"v-741aadec#8/1\",\"2859\":\"v-741aadec#9\",\"2860\":\"v-741aadec#9/0\",\"2861\":\"v-741aadec#9/1\",\"2862\":\"v-741aadec#10\",\"2863\":\"v-741aadec#10/0\",\"2864\":\"v-741aadec#10/1\",\"2865\":\"v-741aadec#11\",\"2866\":\"v-741aadec#11/0\",\"2867\":\"v-741aadec#12\",\"2868\":\"v-741aadec#12/0\",\"2869\":\"v-741aadec#13\",\"2870\":\"v-741aadec#13/0\",\"2871\":\"v-741aadec#13/1\",\"2872\":\"v-741aadec#14\",\"2873\":\"v-741aadec#14/0\",\"2874\":\"v-741aadec#14/1\",\"2875\":\"v-741aadec#14/2\",\"2876\":\"v-741aadec#14/3\",\"2877\":\"v-741aadec#14/4\",\"2878\":\"v-d0b05c46\",\"2879\":\"v-d0b05c46#1\",\"2880\":\"v-d0b05c46#2\",\"2881\":\"v-d0b05c46#2/0\",\"2882\":\"v-d0b05c46#2/1\",\"2883\":\"v-d0b05c46#2/2\",\"2884\":\"v-d0b05c46#2/3\",\"2885\":\"v-d0b05c46#2/4\",\"2886\":\"v-d0b05c46#3\",\"2887\":\"v-d0b05c46#4\",\"2888\":\"v-d0b05c46#4/0\",\"2889\":\"v-d0b05c46#4/1\",\"2890\":\"v-d0b05c46#4/2\",\"2891\":\"v-d0b05c46#4/3\",\"2892\":\"v-d0b05c46#4/4\",\"2893\":\"v-d0b05c46#5\",\"2894\":\"v-d0b05c46#5/0\",\"2895\":\"v-d0b05c46#5/1\",\"2896\":\"v-d0b05c46#5/2\",\"2897\":\"v-d0b05c46#6\",\"2898\":\"v-d0b05c46#6/0\",\"2899\":\"v-d0b05c46#6/1\",\"2900\":\"v-d0b05c46#7\",\"2901\":\"v-d0b05c46#8\",\"2902\":\"v-d0b05c46#8/0\",\"2903\":\"v-d0b05c46#8/1\",\"2904\":\"v-d0b05c46#8/2\",\"2905\":\"v-d0b05c46#9\",\"2906\":\"v-d0b05c46#9/0\",\"2907\":\"v-d0b05c46#10\",\"2908\":\"v-d0b05c46#10/0\",\"2909\":\"v-d0b05c46#10/1\",\"2910\":\"v-d0b05c46#11\",\"2911\":\"v-d0b05c46#11/0\",\"2912\":\"v-d0b05c46#11/1\",\"2913\":\"v-d0b05c46#11/2\",\"2914\":\"v-d0b05c46#12\",\"2915\":\"v-d0b05c46#13\",\"2916\":\"v-d0b05c46#13/0\",\"2917\":\"v-d0b05c46#14\",\"2918\":\"v-d0b05c46#14/1\",\"2919\":\"v-d0b05c46#14/2\",\"2920\":\"v-d0b05c46#14/3\",\"2921\":\"v-d0b05c46#15\",\"2922\":\"v-d0b05c46#15/0\",\"2923\":\"v-d0b05c46#15/1\",\"2924\":\"v-d0b05c46#15/2\",\"2925\":\"v-d0b05c46#16\",\"2926\":\"v-d0b05c46#17\",\"2927\":\"v-d0b05c46#17/0\",\"2928\":\"v-d0b05c46#17/1\",\"2929\":\"v-d0b05c46#17/2\",\"2930\":\"v-d0b05c46#17/3\",\"2931\":\"v-d0b05c46#18\",\"2932\":\"v-d0b05c46#18/0\",\"2933\":\"v-d0b05c46#19\",\"2934\":\"v-d0b05c46#19/1\",\"2935\":\"v-d0b05c46#20\",\"2936\":\"v-d0b05c46#20/2\",\"2937\":\"v-d0b05c46#20/3\",\"2938\":\"v-d0b05c46#20/4\",\"2939\":\"v-d0b05c46#20/5\",\"2940\":\"v-d0b05c46#20/6\",\"2941\":\"v-d0b05c46#21\",\"2942\":\"v-d0b05c46#22\",\"2943\":\"v-d0b05c46#22/0\",\"2944\":\"v-d0b05c46#22/1\",\"2945\":\"v-d0b05c46#22/2\",\"2946\":\"v-d0b05c46#22/3\",\"2947\":\"v-d0b05c46#22/4\",\"2948\":\"v-d0b05c46#22/5\",\"2949\":\"v-d0b05c46#22/6\",\"2950\":\"v-d0b05c46#22/7\",\"2951\":\"v-d0b05c46#22/8\",\"2952\":\"v-d0b05c46#22/9\",\"2953\":\"v-d0b05c46#22/10\",\"2954\":\"v-d0b05c46#22/11\",\"2955\":\"v-d0b05c46#23\",\"2956\":\"v-d0b05c46#23/12\",\"2957\":\"v-d0b05c46#23/13\",\"2958\":\"v-d0b05c46#23/14\",\"2959\":\"v-d0b05c46#23/15\",\"2960\":\"v-d0b05c46#23/16\",\"2961\":\"v-d0b05c46#23/17\",\"2962\":\"v-d0b05c46#23/18\",\"2963\":\"v-d0b05c46#23/19\",\"2964\":\"v-d0b05c46#23/20\",\"2965\":\"v-d0b05c46#23/21\",\"2966\":\"v-d0b05c46#23/22\",\"2967\":\"v-d0b05c46#23/23\",\"2968\":\"v-d0b05c46#24\",\"2969\":\"v-d0b05c46#24/0\",\"2970\":\"v-d0b05c46#24/1\",\"2971\":\"v-d0b05c46#24/2\",\"2972\":\"v-d0b05c46#24/3\",\"2973\":\"v-d0b05c46#24/4\",\"2974\":\"v-d0b05c46#24/5\",\"2975\":\"v-d0b05c46#24/6\",\"2976\":\"v-d0b05c46#24/7\",\"2977\":\"v-d0b05c46#24/8\",\"2978\":\"v-d0b05c46#24/9\",\"2979\":\"v-d0b05c46#25\",\"2980\":\"v-d0b05c46#25/0\",\"2981\":\"v-d0b05c46#25/1\",\"2982\":\"v-d0b05c46#25/2\",\"2983\":\"v-d0b05c46#25/3\",\"2984\":\"v-d0b05c46#26\",\"2985\":\"v-d0b05c46#26/0\",\"2986\":\"v-d0b05c46#26/1\",\"2987\":\"v-d0b05c46#27\",\"2988\":\"v-d0b05c46#27/0\",\"2989\":\"v-d0b05c46#27/1\",\"2990\":\"v-d0b05c46#27/2\",\"2991\":\"v-d0b05c46#27/3\",\"2992\":\"v-d0b05c46#27/4\",\"2993\":\"v-d0b05c46#27/5\",\"2994\":\"v-d0b05c46#27/6\",\"2995\":\"v-5637c00e\",\"2996\":\"v-5637c00e#1\",\"2997\":\"v-5637c00e#2\",\"2998\":\"v-5637c00e#2/0\",\"2999\":\"v-5637c00e#2/1\",\"3000\":\"v-5637c00e#3\",\"3001\":\"v-5637c00e#3/0\",\"3002\":\"v-5637c00e#4\",\"3003\":\"v-5637c00e#5\",\"3004\":\"v-5637c00e#5/0\",\"3005\":\"v-5637c00e#5/1\",\"3006\":\"v-5637c00e#6\",\"3007\":\"v-5637c00e#6/2\",\"3008\":\"v-5637c00e#6/3\",\"3009\":\"v-5637c00e#7\",\"3010\":\"v-5637c00e#7/4\",\"3011\":\"v-5637c00e#7/5\",\"3012\":\"v-5637c00e#8\",\"3013\":\"v-5637c00e#8/6\",\"3014\":\"v-5637c00e#9\",\"3015\":\"v-5637c00e#9/0\",\"3016\":\"v-5637c00e#9/1\",\"3017\":\"v-5637c00e#9/2\",\"3018\":\"v-5637c00e#10\",\"3019\":\"v-5637c00e#10/0\",\"3020\":\"v-5637c00e#11\",\"3021\":\"v-5637c00e#11/0\",\"3022\":\"v-5637c00e#11/1\",\"3023\":\"v-5637c00e#11/2\",\"3024\":\"v-5637c00e#11/3\",\"3025\":\"v-5637c00e#11/4\",\"3026\":\"v-5637c00e#11/5\",\"3027\":\"v-5637c00e#11/6\",\"3028\":\"v-5637c00e#11/7\",\"3029\":\"v-5637c00e#11/8\",\"3030\":\"v-5637c00e#11/9\",\"3031\":\"v-5637c00e#11/10\",\"3032\":\"v-5637c00e#11/11\",\"3033\":\"v-5637c00e#11/12\",\"3034\":\"v-5637c00e#11/13\",\"3035\":\"v-5637c00e#11/14\",\"3036\":\"v-5637c00e#11/15\",\"3037\":\"v-5637c00e#11/16\",\"3038\":\"v-5637c00e#12\",\"3039\":\"v-5637c00e#12/0\",\"3040\":\"v-5637c00e#12/1\",\"3041\":\"v-5637c00e#12/2\",\"3042\":\"v-5637c00e#12/3\",\"3043\":\"v-5637c00e#12/4\",\"3044\":\"v-5637c00e#12/5\",\"3045\":\"v-5637c00e#12/6\",\"3046\":\"v-5637c00e#12/7\",\"3047\":\"v-5637c00e#13\",\"3048\":\"v-5637c00e#14\",\"3049\":\"v-5637c00e#14/0\",\"3050\":\"v-5637c00e#14/1\",\"3051\":\"v-5637c00e#15\",\"3052\":\"v-5637c00e#15/0\",\"3053\":\"v-5637c00e#16\",\"3054\":\"v-5637c00e#16/1\",\"3055\":\"v-5637c00e#17\",\"3056\":\"v-5637c00e#17/0\",\"3057\":\"v-5637c00e#17/1\",\"3058\":\"v-5637c00e#18\",\"3059\":\"v-5637c00e#18/0\",\"3060\":\"v-5637c00e#18/1\",\"3061\":\"v-5637c00e#18/2\",\"3062\":\"v-5637c00e#18/3\",\"3063\":\"v-5637c00e#18/4\",\"3064\":\"v-5637c00e#18/5\",\"3065\":\"v-5637c00e#19\",\"3066\":\"v-5637c00e#19/0\",\"3067\":\"v-5637c00e#19/1\",\"3068\":\"v-5637c00e#19/2\",\"3069\":\"v-5637c00e#19/3\",\"3070\":\"v-5637c00e#19/4\",\"3071\":\"v-b55bf84e\",\"3072\":\"v-b55bf84e#1\",\"3073\":\"v-b55bf84e#2\",\"3074\":\"v-b55bf84e#2/0\",\"3075\":\"v-b55bf84e#3\",\"3076\":\"v-b55bf84e#3/0\",\"3077\":\"v-b55bf84e#3/1\",\"3078\":\"v-b55bf84e#4\",\"3079\":\"v-b55bf84e#4/0\",\"3080\":\"v-b55bf84e#4/1\",\"3081\":\"v-b55bf84e#5\",\"3082\":\"v-b55bf84e#5/0\",\"3083\":\"v-b55bf84e#6\",\"3084\":\"v-b55bf84e#6/1\",\"3085\":\"v-b55bf84e#7\",\"3086\":\"v-b55bf84e#8\",\"3087\":\"v-b55bf84e#8/0\",\"3088\":\"v-b55bf84e#8/1\",\"3089\":\"v-b55bf84e#9\",\"3090\":\"v-b55bf84e#9/0\",\"3091\":\"v-b55bf84e#9/1\",\"3092\":\"v-b55bf84e#10\",\"3093\":\"v-b55bf84e#10/0\",\"3094\":\"v-b55bf84e#10/1\",\"3095\":\"v-b55bf84e#10/2\",\"3096\":\"v-b55bf84e#10/3\",\"3097\":\"v-b55bf84e#11\",\"3098\":\"v-b55bf84e#11/0\",\"3099\":\"v-b55bf84e#12\",\"3100\":\"v-b55bf84e#12/0\",\"3101\":\"v-b55bf84e#13\",\"3102\":\"v-b55bf84e#13/1\",\"3103\":\"v-b55bf84e#13/2\",\"3104\":\"v-b55bf84e#13/3\",\"3105\":\"v-b55bf84e#13/4\",\"3106\":\"v-b55bf84e#14\",\"3107\":\"v-b55bf84e#14/0\",\"3108\":\"v-b55bf84e#14/1\",\"3109\":\"v-b55bf84e#14/2\",\"3110\":\"v-b55bf84e#14/3\",\"3111\":\"v-b55bf84e#15\",\"3112\":\"v-b55bf84e#16\",\"3113\":\"v-b55bf84e#16/0\",\"3114\":\"v-b55bf84e#16/1\",\"3115\":\"v-b55bf84e#17\",\"3116\":\"v-b55bf84e#17/0\",\"3117\":\"v-b55bf84e#17/1\",\"3118\":\"v-b55bf84e#17/2\",\"3119\":\"v-b55bf84e#18\",\"3120\":\"v-b55bf84e#18/3\",\"3121\":\"v-b55bf84e#18/4\",\"3122\":\"v-b55bf84e#18/5\",\"3123\":\"v-b55bf84e#18/6\",\"3124\":\"v-b55bf84e#18/7\",\"3125\":\"v-b55bf84e#18/8\",\"3126\":\"v-b55bf84e#19\",\"3127\":\"v-b55bf84e#19/9\",\"3128\":\"v-b55bf84e#19/10\",\"3129\":\"v-b55bf84e#19/11\",\"3130\":\"v-b55bf84e#19/12\",\"3131\":\"v-b55bf84e#19/13\",\"3132\":\"v-b55bf84e#19/14\",\"3133\":\"v-b55bf84e#19/15\",\"3134\":\"v-b55bf84e#20\",\"3135\":\"v-b55bf84e#20/0\",\"3136\":\"v-b55bf84e#20/1\",\"3137\":\"v-b55bf84e#21\",\"3138\":\"v-b55bf84e#22\",\"3139\":\"v-b55bf84e#22/0\",\"3140\":\"v-b55bf84e#22/1\",\"3141\":\"v-b55bf84e#23\",\"3142\":\"v-b55bf84e#23/0\",\"3143\":\"v-b55bf84e#24\",\"3144\":\"v-b55bf84e#24/1\",\"3145\":\"v-b55bf84e#24/2\",\"3146\":\"v-b55bf84e#25\",\"3147\":\"v-b55bf84e#26\",\"3148\":\"v-b55bf84e#26/0\",\"3149\":\"v-b55bf84e#26/1\",\"3150\":\"v-b55bf84e#27\",\"3151\":\"v-b55bf84e#27/0\",\"3152\":\"v-b55bf84e#27/1\",\"3153\":\"v-b55bf84e#27/2\",\"3154\":\"v-b55bf84e#28\",\"3155\":\"v-b55bf84e#28/0\",\"3156\":\"v-b55bf84e#28/1\",\"3157\":\"v-b55bf84e#29\",\"3158\":\"v-b55bf84e#29/2\",\"3159\":\"v-b55bf84e#29/3\",\"3160\":\"v-b55bf84e#29/4\",\"3161\":\"v-b55bf84e#30\",\"3162\":\"v-b55bf84e#30/0\",\"3163\":\"v-b55bf84e#31\",\"3164\":\"v-b55bf84e#31/1\",\"3165\":\"v-b55bf84e#31/2\",\"3166\":\"v-b55bf84e#31/3\",\"3167\":\"v-b55bf84e#31/4\",\"3168\":\"v-b55bf84e#32\",\"3169\":\"v-b55bf84e#32/5\",\"3170\":\"v-b55bf84e#32/6\",\"3171\":\"v-b55bf84e#32/7\",\"3172\":\"v-b55bf84e#32/8\",\"3173\":\"v-b55bf84e#32/9\",\"3174\":\"v-b55bf84e#33\",\"3175\":\"v-b55bf84e#33/10\",\"3176\":\"v-b55bf84e#33/11\",\"3177\":\"v-b55bf84e#33/12\",\"3178\":\"v-b55bf84e#34\",\"3179\":\"v-b55bf84e#35\",\"3180\":\"v-b55bf84e#35/0\",\"3181\":\"v-b55bf84e#35/1\",\"3182\":\"v-b55bf84e#35/2\",\"3183\":\"v-b55bf84e#36\",\"3184\":\"v-b55bf84e#36/0\",\"3185\":\"v-b55bf84e#36/1\",\"3186\":\"v-b55bf84e#37\",\"3187\":\"v-b55bf84e#37/0\",\"3188\":\"v-b55bf84e#37/1\",\"3189\":\"v-b55bf84e#37/2\",\"3190\":\"v-b55bf84e#37/3\",\"3191\":\"v-b55bf84e#37/4\",\"3192\":\"v-b55bf84e#37/5\",\"3193\":\"v-b55bf84e#38\",\"3194\":\"v-b55bf84e#38/0\",\"3195\":\"v-b55bf84e#38/1\",\"3196\":\"v-b55bf84e#38/2\",\"3197\":\"v-b55bf84e#38/3\",\"3198\":\"v-b55bf84e#38/4\",\"3199\":\"v-b55bf84e#38/5\",\"3200\":\"v-b55bf84e#38/6\",\"3201\":\"v-b55bf84e#38/7\",\"3202\":\"v-618aca3e\",\"3203\":\"v-618aca3e#0/0\",\"3204\":\"v-618aca3e#1\",\"3205\":\"v-618aca3e#1/0\",\"3206\":\"v-618aca3e#1/1\",\"3207\":\"v-618aca3e#1/2\",\"3208\":\"v-618aca3e#1/3\",\"3209\":\"v-618aca3e#2\",\"3210\":\"v-618aca3e#2/4\",\"3211\":\"v-618aca3e#2/5\",\"3212\":\"v-618aca3e#2/6\",\"3213\":\"v-618aca3e#3\",\"3214\":\"v-618aca3e#3/7\",\"3215\":\"v-618aca3e#3/8\",\"3216\":\"v-618aca3e#3/9\",\"3217\":\"v-618aca3e#3/10\",\"3218\":\"v-618aca3e#3/11\",\"3219\":\"v-618aca3e#3/12\",\"3220\":\"v-618aca3e#4\",\"3221\":\"v-618aca3e#4/0\",\"3222\":\"v-618aca3e#5\",\"3223\":\"v-618aca3e#5/0\",\"3224\":\"v-618aca3e#5/1\",\"3225\":\"v-618aca3e#5/2\",\"3226\":\"v-618aca3e#6\",\"3227\":\"v-618aca3e#6/0\",\"3228\":\"v-618aca3e#7\",\"3229\":\"v-618aca3e#8\",\"3230\":\"v-618aca3e#8/0\",\"3231\":\"v-618aca3e#8/1\",\"3232\":\"v-618aca3e#8/2\",\"3233\":\"v-618aca3e#9\",\"3234\":\"v-618aca3e#9/0\",\"3235\":\"v-618aca3e#10\",\"3236\":\"v-618aca3e#10/0\",\"3237\":\"v-618aca3e#10/1\",\"3238\":\"v-618aca3e#11\",\"3239\":\"v-618aca3e#11/2\",\"3240\":\"v-618aca3e#11/3\",\"3241\":\"v-618aca3e#11/4\",\"3242\":\"v-618aca3e#12\",\"3243\":\"v-618aca3e#12/5\",\"3244\":\"v-618aca3e#12/6\",\"3245\":\"v-618aca3e#12/7\",\"3246\":\"v-618aca3e#13\",\"3247\":\"v-618aca3e#13/8\",\"3248\":\"v-3d99f73b\",\"3249\":\"v-3d99f73b#1\",\"3250\":\"v-3d99f73b#1/0\",\"3251\":\"v-3d99f73b#2\",\"3252\":\"v-3d99f73b#2/0\",\"3253\":\"v-3d99f73b#2/1\",\"3254\":\"v-3d99f73b#3\",\"3255\":\"v-3d99f73b#3/2\",\"3256\":\"v-3d99f73b#4\",\"3257\":\"v-3d99f73b#4/0\",\"3258\":\"v-3d99f73b#4/1\",\"3259\":\"v-3d99f73b#4/2\",\"3260\":\"v-3d99f73b#4/3\",\"3261\":\"v-3d99f73b#4/4\",\"3262\":\"v-3d99f73b#4/5\",\"3263\":\"v-3d99f73b#4/6\",\"3264\":\"v-3d99f73b#5\",\"3265\":\"v-3d99f73b#6\",\"3266\":\"v-3d99f73b#6/7\",\"3267\":\"v-3d99f73b#6/8\",\"3268\":\"v-3d99f73b#7\",\"3269\":\"v-3d99f73b#7/9\",\"3270\":\"v-3d99f73b#7/10\",\"3271\":\"v-3d99f73b#8\",\"3272\":\"v-3d99f73b#8/11\",\"3273\":\"v-3d99f73b#8/12\",\"3274\":\"v-3d99f73b#9\",\"3275\":\"v-3d99f73b#9/13\",\"3276\":\"v-3d99f73b#10\",\"3277\":\"v-3d99f73b#11\",\"3278\":\"v-3d99f73b#11/0\",\"3279\":\"v-3d99f73b#11/1\",\"3280\":\"v-3d99f73b#12\",\"3281\":\"v-3d99f73b#12/0\",\"3282\":\"v-3d99f73b#12/1\",\"3283\":\"v-3d99f73b#13\",\"3284\":\"v-3d99f73b#13/2\",\"3285\":\"v-3d99f73b#14\",\"3286\":\"v-3d99f73b#14/0\",\"3287\":\"v-3d99f73b#14/1\",\"3288\":\"v-3d99f73b#14/2\",\"3289\":\"v-3d99f73b#14/3\",\"3290\":\"v-3d99f73b#14/4\",\"3291\":\"v-3d99f73b#14/5\",\"3292\":\"v-3d99f73b#15\",\"3293\":\"v-3d99f73b#15/0\",\"3294\":\"v-3d99f73b#16\",\"3295\":\"v-3d99f73b#16/0\",\"3296\":\"v-3d99f73b#16/1\",\"3297\":\"v-3d99f73b#16/2\",\"3298\":\"v-3d99f73b#17\",\"3299\":\"v-3d99f73b#17/0\",\"3300\":\"v-3d99f73b#18\",\"3301\":\"v-3d99f73b#18/0\",\"3302\":\"v-3d99f73b#18/1\",\"3303\":\"v-3d99f73b#19\",\"3304\":\"v-3d99f73b#19/0\",\"3305\":\"v-3d99f73b#20\",\"3306\":\"v-3d99f73b#20/0\",\"3307\":\"v-3d99f73b#20/1\",\"3308\":\"v-3d99f73b#20/2\",\"3309\":\"v-3d99f73b#20/3\",\"3310\":\"v-3d99f73b#20/4\",\"3311\":\"v-3d99f73b#20/5\",\"3312\":\"v-3d99f73b#21\",\"3313\":\"v-3d99f73b#22\",\"3314\":\"v-3d99f73b#22/6\",\"3315\":\"v-3d99f73b#22/7\",\"3316\":\"v-3d99f73b#23\",\"3317\":\"v-3d99f73b#24\",\"3318\":\"v-3d99f73b#24/0\",\"3319\":\"v-3d99f73b#24/1\",\"3320\":\"v-3d99f73b#25\",\"3321\":\"v-3d99f73b#25/2\",\"3322\":\"v-3d99f73b#25/3\",\"3323\":\"v-3d99f73b#26\",\"3324\":\"v-3d99f73b#26/4\",\"3325\":\"v-3d99f73b#26/5\",\"3326\":\"v-3d99f73b#27\",\"3327\":\"v-3d99f73b#27/0\",\"3328\":\"v-3d99f73b#27/1\",\"3329\":\"v-ecc6e948\",\"3330\":\"v-ecc6e948#0/0\",\"3331\":\"v-ecc6e948#0/1\",\"3332\":\"v-ecc6e948#0/2\",\"3333\":\"v-ecc6e948#0/3\",\"3334\":\"v-ecc6e948#0/4\",\"3335\":\"v-ecc6e948#0/5\",\"3336\":\"v-ecc6e948#0/6\",\"3337\":\"v-ecc6e948#0/7\",\"3338\":\"v-ecc6e948#0/8\",\"3339\":\"v-ecc6e948#0/9\",\"3340\":\"v-ecc6e948#1\",\"3341\":\"v-ecc6e948#2\",\"3342\":\"v-ecc6e948#2/0\",\"3343\":\"v-ecc6e948#3\",\"3344\":\"v-ecc6e948#3/0\",\"3345\":\"v-ecc6e948#4\",\"3346\":\"v-ecc6e948#4/1\",\"3347\":\"v-ecc6e948#5\",\"3348\":\"v-ecc6e948#5/2\",\"3349\":\"v-ecc6e948#6\",\"3350\":\"v-ecc6e948#6/3\",\"3351\":\"v-ecc6e948#6/4\",\"3352\":\"v-ecc6e948#7\",\"3353\":\"v-ecc6e948#7/0\",\"3354\":\"v-ecc6e948#7/1\",\"3355\":\"v-ecc6e948#7/2\",\"3356\":\"v-ecc6e948#7/3\",\"3357\":\"v-ecc6e948#7/4\",\"3358\":\"v-ecc6e948#8\",\"3359\":\"v-ecc6e948#9\",\"3360\":\"v-ecc6e948#9/0\",\"3361\":\"v-ecc6e948#10\",\"3362\":\"v-ecc6e948#10/1\",\"3363\":\"v-ecc6e948#10/2\",\"3364\":\"v-ecc6e948#10/3\",\"3365\":\"v-ecc6e948#10/4\",\"3366\":\"v-ecc6e948#10/5\",\"3367\":\"v-ecc6e948#10/6\",\"3368\":\"v-ecc6e948#10/7\",\"3369\":\"v-ecc6e948#10/8\",\"3370\":\"v-ecc6e948#10/9\",\"3371\":\"v-ecc6e948#11\",\"3372\":\"v-ecc6e948#11/0\",\"3373\":\"v-ecc6e948#11/1\",\"3374\":\"v-ecc6e948#11/2\",\"3375\":\"v-ecc6e948#12\",\"3376\":\"v-ecc6e948#12/3\",\"3377\":\"v-ecc6e948#12/4\",\"3378\":\"v-ecc6e948#13\",\"3379\":\"v-ecc6e948#14\",\"3380\":\"v-ecc6e948#14/0\",\"3381\":\"v-ecc6e948#14/1\",\"3382\":\"v-ecc6e948#14/2\",\"3383\":\"v-ecc6e948#14/3\",\"3384\":\"v-ecc6e948#14/4\",\"3385\":\"v-ecc6e948#14/5\",\"3386\":\"v-ecc6e948#14/6\",\"3387\":\"v-ecc6e948#15\",\"3388\":\"v-ecc6e948#15/0\",\"3389\":\"v-ecc6e948#15/1\",\"3390\":\"v-ecc6e948#15/2\",\"3391\":\"v-ecc6e948#16\",\"3392\":\"v-ecc6e948#16/3\",\"3393\":\"v-ecc6e948#16/4\",\"3394\":\"v-ecc6e948#16/5\",\"3395\":\"v-ecc6e948#16/6\",\"3396\":\"v-ecc6e948#16/7\",\"3397\":\"v-ecc6e948#16/8\",\"3398\":\"v-ecc6e948#17\",\"3399\":\"v-ecc6e948#18\",\"3400\":\"v-ecc6e948#18/0\",\"3401\":\"v-ecc6e948#18/1\",\"3402\":\"v-ecc6e948#18/2\",\"3403\":\"v-ecc6e948#19\",\"3404\":\"v-ecc6e948#19/3\",\"3405\":\"v-ecc6e948#19/4\",\"3406\":\"v-ecc6e948#20\",\"3407\":\"v-ecc6e948#20/5\",\"3408\":\"v-ecc6e948#20/6\",\"3409\":\"v-ecc6e948#20/7\",\"3410\":\"v-ecc6e948#21\",\"3411\":\"v-ecc6e948#21/8\",\"3412\":\"v-ecc6e948#21/9\",\"3413\":\"v-ecc6e948#21/10\",\"3414\":\"v-ecc6e948#21/11\",\"3415\":\"v-ecc6e948#22\",\"3416\":\"v-ecc6e948#23\",\"3417\":\"v-ecc6e948#23/12\",\"3418\":\"v-ecc6e948#24\",\"3419\":\"v-ecc6e948#24/13\",\"3420\":\"v-ecc6e948#24/14\",\"3421\":\"v-ecc6e948#25\",\"3422\":\"v-ecc6e948#25/15\",\"3423\":\"v-ecc6e948#26\",\"3424\":\"v-ecc6e948#26/0\",\"3425\":\"v-ecc6e948#27\",\"3426\":\"v-ecc6e948#27/0\",\"3427\":\"v-ecc6e948#28\",\"3428\":\"v-ecc6e948#28/0\",\"3429\":\"v-ecc6e948#28/1\",\"3430\":\"v-ecc6e948#29\",\"3431\":\"v-ecc6e948#29/0\",\"3432\":\"v-ecc6e948#29/1\",\"3433\":\"v-ecc6e948#30\",\"3434\":\"v-ecc6e948#30/0\",\"3435\":\"v-ecc6e948#30/1\",\"3436\":\"v-ecc6e948#30/2\",\"3437\":\"v-ecc6e948#31\",\"3438\":\"v-ecc6e948#31/0\",\"3439\":\"v-ecc6e948#31/1\",\"3440\":\"v-ecc6e948#32\",\"3441\":\"v-ecc6e948#32/0\",\"3442\":\"v-ecc6e948#32/1\",\"3443\":\"v-ecc6e948#33\",\"3444\":\"v-ecc6e948#33/0\",\"3445\":\"v-ecc6e948#34\",\"3446\":\"v-ecc6e948#34/1\",\"3447\":\"v-ecc6e948#35\",\"3448\":\"v-ecc6e948#35/0\",\"3449\":\"v-ecc6e948#35/1\",\"3450\":\"v-ecc6e948#36\",\"3451\":\"v-ecc6e948#37\",\"3452\":\"v-ecc6e948#37/0\",\"3453\":\"v-ecc6e948#37/1\",\"3454\":\"v-ecc6e948#38\",\"3455\":\"v-ecc6e948#38/2\",\"3456\":\"v-ecc6e948#39\",\"3457\":\"v-ecc6e948#39/3\",\"3458\":\"v-da928d2c\",\"3459\":\"v-da928d2c#1\",\"3460\":\"v-da928d2c#2\",\"3461\":\"v-da928d2c#2/0\",\"3462\":\"v-da928d2c#3\",\"3463\":\"v-da928d2c#3/0\",\"3464\":\"v-da928d2c#3/1\",\"3465\":\"v-da928d2c#3/2\",\"3466\":\"v-da928d2c#3/3\",\"3467\":\"v-da928d2c#4\",\"3468\":\"v-da928d2c#4/0\",\"3469\":\"v-da928d2c#4/1\",\"3470\":\"v-da928d2c#4/2\",\"3471\":\"v-da928d2c#4/3\",\"3472\":\"v-da928d2c#5\",\"3473\":\"v-da928d2c#5/0\",\"3474\":\"v-da928d2c#5/1\",\"3475\":\"v-da928d2c#6\",\"3476\":\"v-da928d2c#6/0\",\"3477\":\"v-da928d2c#6/1\",\"3478\":\"v-da928d2c#6/2\",\"3479\":\"v-da928d2c#6/3\",\"3480\":\"v-da928d2c#6/4\",\"3481\":\"v-da928d2c#7\",\"3482\":\"v-da928d2c#8\",\"3483\":\"v-da928d2c#8/0\",\"3484\":\"v-da928d2c#8/1\",\"3485\":\"v-da928d2c#9\",\"3486\":\"v-da928d2c#9/2\",\"3487\":\"v-da928d2c#10\",\"3488\":\"v-da928d2c#11\",\"3489\":\"v-da928d2c#11/3\",\"3490\":\"v-da928d2c#11/4\",\"3491\":\"v-da928d2c#11/5\",\"3492\":\"v-da928d2c#12\",\"3493\":\"v-da928d2c#12/6\",\"3494\":\"v-da928d2c#13\",\"3495\":\"v-da928d2c#13/0\",\"3496\":\"v-da928d2c#13/1\",\"3497\":\"v-da928d2c#14\",\"3498\":\"v-da928d2c#14/2\",\"3499\":\"v-da928d2c#14/3\",\"3500\":\"v-da928d2c#14/4\",\"3501\":\"v-da928d2c#15\",\"3502\":\"v-da928d2c#15/5\",\"3503\":\"v-da928d2c#15/6\",\"3504\":\"v-da928d2c#15/7\",\"3505\":\"v-da928d2c#15/8\",\"3506\":\"v-da928d2c#15/9\",\"3507\":\"v-da928d2c#16\",\"3508\":\"v-da928d2c#16/10\",\"3509\":\"v-da928d2c#16/11\",\"3510\":\"v-da928d2c#17\",\"3511\":\"v-da928d2c#17/12\",\"3512\":\"v-da928d2c#17/13\",\"3513\":\"v-da928d2c#18\",\"3514\":\"v-da928d2c#18/14\",\"3515\":\"v-da928d2c#18/15\",\"3516\":\"v-da928d2c#18/16\",\"3517\":\"v-da928d2c#19\",\"3518\":\"v-da928d2c#20\",\"3519\":\"v-da928d2c#20/0\",\"3520\":\"v-da928d2c#21\",\"3521\":\"v-da928d2c#21/0\",\"3522\":\"v-da928d2c#21/1\",\"3523\":\"v-da928d2c#21/2\",\"3524\":\"v-da928d2c#22\",\"3525\":\"v-da928d2c#22/0\",\"3526\":\"v-da928d2c#22/1\",\"3527\":\"v-da928d2c#22/2\",\"3528\":\"v-da928d2c#23\",\"3529\":\"v-da928d2c#23/0\",\"3530\":\"v-da928d2c#23/1\",\"3531\":\"v-da928d2c#24\",\"3532\":\"v-da928d2c#25\",\"3533\":\"v-da928d2c#25/0\",\"3534\":\"v-da928d2c#25/1\",\"3535\":\"v-da928d2c#25/2\",\"3536\":\"v-da928d2c#25/3\",\"3537\":\"v-da928d2c#25/4\",\"3538\":\"v-da928d2c#25/5\",\"3539\":\"v-da928d2c#26\",\"3540\":\"v-da928d2c#27\",\"3541\":\"v-da928d2c#27/0\",\"3542\":\"v-da928d2c#28\",\"3543\":\"v-da928d2c#28/1\",\"3544\":\"v-da928d2c#28/2\",\"3545\":\"v-da928d2c#28/3\",\"3546\":\"v-da928d2c#29\",\"3547\":\"v-da928d2c#29/4\",\"3548\":\"v-da928d2c#29/5\",\"3549\":\"v-da928d2c#29/6\",\"3550\":\"v-da928d2c#29/7\",\"3551\":\"v-da928d2c#30\",\"3552\":\"v-da928d2c#30/8\",\"3553\":\"v-da928d2c#31\",\"3554\":\"v-da928d2c#31/0\",\"3555\":\"v-da928d2c#31/1\",\"3556\":\"v-da928d2c#31/2\",\"3557\":\"v-da928d2c#32\",\"3558\":\"v-da928d2c#32/3\",\"3559\":\"v-da928d2c#32/4\",\"3560\":\"v-da928d2c#32/5\",\"3561\":\"v-da928d2c#33\",\"3562\":\"v-da928d2c#33/6\",\"3563\":\"v-da928d2c#33/7\",\"3564\":\"v-da928d2c#34\",\"3565\":\"v-da928d2c#34/8\",\"3566\":\"v-da928d2c#34/9\",\"3567\":\"v-da928d2c#34/10\",\"3568\":\"v-da928d2c#35\",\"3569\":\"v-da928d2c#35/11\",\"3570\":\"v-da928d2c#35/12\",\"3571\":\"v-da928d2c#36\",\"3572\":\"v-da928d2c#36/13\",\"3573\":\"v-da928d2c#36/14\",\"3574\":\"v-da928d2c#36/15\",\"3575\":\"v-da928d2c#36/16\",\"3576\":\"v-da928d2c#36/17\",\"3577\":\"v-da928d2c#36/18\",\"3578\":\"v-da928d2c#37\",\"3579\":\"v-da928d2c#37/0\",\"3580\":\"v-da928d2c#38\",\"3581\":\"v-da928d2c#38/0\",\"3582\":\"v-da928d2c#38/1\",\"3583\":\"v-da928d2c#38/2\",\"3584\":\"v-da928d2c#38/3\",\"3585\":\"v-da928d2c#39\",\"3586\":\"v-da928d2c#40\",\"3587\":\"v-da928d2c#40/0\",\"3588\":\"v-da928d2c#40/1\",\"3589\":\"v-da928d2c#41\",\"3590\":\"v-da928d2c#41/2\",\"3591\":\"v-da928d2c#41/3\",\"3592\":\"v-da928d2c#42\",\"3593\":\"v-da928d2c#42/4\",\"3594\":\"v-da928d2c#42/5\",\"3595\":\"v-3bfc80ec\",\"3596\":\"v-3bfc80ec#1\",\"3597\":\"v-3bfc80ec#2\",\"3598\":\"v-3bfc80ec#2/0\",\"3599\":\"v-3bfc80ec#2/1\",\"3600\":\"v-3bfc80ec#2/2\",\"3601\":\"v-3bfc80ec#3\",\"3602\":\"v-3bfc80ec#3/0\",\"3603\":\"v-3bfc80ec#3/1\",\"3604\":\"v-3bfc80ec#3/2\",\"3605\":\"v-3bfc80ec#4\",\"3606\":\"v-3bfc80ec#4/0\",\"3607\":\"v-3bfc80ec#4/1\",\"3608\":\"v-3bfc80ec#4/2\",\"3609\":\"v-3bfc80ec#4/3\",\"3610\":\"v-3bfc80ec#4/4\",\"3611\":\"v-3bfc80ec#4/5\",\"3612\":\"v-3bfc80ec#5\",\"3613\":\"v-3bfc80ec#5/0\",\"3614\":\"v-3bfc80ec#5/1\",\"3615\":\"v-3bfc80ec#6\",\"3616\":\"v-3bfc80ec#7\",\"3617\":\"v-3bfc80ec#7/0\",\"3618\":\"v-3bfc80ec#7/1\",\"3619\":\"v-3bfc80ec#7/2\",\"3620\":\"v-3bfc80ec#7/3\",\"3621\":\"v-3bfc80ec#7/4\",\"3622\":\"v-3bfc80ec#8\",\"3623\":\"v-3bfc80ec#8/0\",\"3624\":\"v-3bfc80ec#8/1\",\"3625\":\"v-3bfc80ec#9\",\"3626\":\"v-3bfc80ec#9/0\",\"3627\":\"v-3bfc80ec#9/1\",\"3628\":\"v-3bfc80ec#10\",\"3629\":\"v-3bfc80ec#10/0\",\"3630\":\"v-3bfc80ec#10/1\",\"3631\":\"v-3bfc80ec#11\",\"3632\":\"v-3bfc80ec#11/2\",\"3633\":\"v-3bfc80ec#11/3\",\"3634\":\"v-3bfc80ec#11/4\",\"3635\":\"v-3bfc80ec#11/5\",\"3636\":\"v-3bfc80ec#11/6\",\"3637\":\"v-3bfc80ec#12\",\"3638\":\"v-3bfc80ec#12/7\",\"3639\":\"v-3bfc80ec#12/8\",\"3640\":\"v-3bfc80ec#12/9\",\"3641\":\"v-3bfc80ec#13\",\"3642\":\"v-3bfc80ec#13/0\",\"3643\":\"v-3bfc80ec#13/1\",\"3644\":\"v-3bfc80ec#14\",\"3645\":\"v-3bfc80ec#14/0\",\"3646\":\"v-3bfc80ec#14/1\",\"3647\":\"v-3bfc80ec#15\",\"3648\":\"v-3bfc80ec#15/2\",\"3649\":\"v-3bfc80ec#15/3\",\"3650\":\"v-3bfc80ec#15/4\",\"3651\":\"v-3bfc80ec#16\",\"3652\":\"v-3bfc80ec#16/0\",\"3653\":\"v-3bfc80ec#16/1\",\"3654\":\"v-3bfc80ec#17\",\"3655\":\"v-3bfc80ec#18\",\"3656\":\"v-3bfc80ec#18/0\",\"3657\":\"v-3bfc80ec#18/1\",\"3658\":\"v-3bfc80ec#18/2\",\"3659\":\"v-3bfc80ec#18/3\",\"3660\":\"v-3bfc80ec#19\",\"3661\":\"v-3bfc80ec#19/0\",\"3662\":\"v-3bfc80ec#19/1\",\"3663\":\"v-3bfc80ec#19/2\",\"3664\":\"v-3bfc80ec#19/3\",\"3665\":\"v-758a1bd8\",\"3666\":\"v-758a1bd8#1\",\"3667\":\"v-758a1bd8#2\",\"3668\":\"v-758a1bd8#2/0\",\"3669\":\"v-758a1bd8#2/1\",\"3670\":\"v-758a1bd8#2/2\",\"3671\":\"v-758a1bd8#2/3\",\"3672\":\"v-758a1bd8#2/4\",\"3673\":\"v-758a1bd8#2/5\",\"3674\":\"v-758a1bd8#2/6\",\"3675\":\"v-758a1bd8#2/7\",\"3676\":\"v-758a1bd8#3\",\"3677\":\"v-758a1bd8#3/0\",\"3678\":\"v-758a1bd8#3/1\",\"3679\":\"v-758a1bd8#3/2\",\"3680\":\"v-758a1bd8#4\",\"3681\":\"v-758a1bd8#4/0\",\"3682\":\"v-758a1bd8#4/1\",\"3683\":\"v-758a1bd8#4/2\",\"3684\":\"v-758a1bd8#4/3\",\"3685\":\"v-758a1bd8#5\",\"3686\":\"v-758a1bd8#5/0\",\"3687\":\"v-758a1bd8#5/1\",\"3688\":\"v-758a1bd8#5/2\",\"3689\":\"v-758a1bd8#5/3\",\"3690\":\"v-758a1bd8#5/4\",\"3691\":\"v-758a1bd8#5/5\",\"3692\":\"v-758a1bd8#5/6\",\"3693\":\"v-758a1bd8#5/7\",\"3694\":\"v-758a1bd8#5/8\",\"3695\":\"v-758a1bd8#5/9\",\"3696\":\"v-758a1bd8#5/10\",\"3697\":\"v-758a1bd8#5/11\",\"3698\":\"v-758a1bd8#5/12\",\"3699\":\"v-758a1bd8#5/13\",\"3700\":\"v-758a1bd8#5/14\",\"3701\":\"v-758a1bd8#5/15\",\"3702\":\"v-758a1bd8#5/16\",\"3703\":\"v-758a1bd8#5/17\",\"3704\":\"v-758a1bd8#5/18\",\"3705\":\"v-758a1bd8#6\",\"3706\":\"v-758a1bd8#6/0\",\"3707\":\"v-758a1bd8#6/1\",\"3708\":\"v-758a1bd8#6/2\",\"3709\":\"v-758a1bd8#6/3\",\"3710\":\"v-758a1bd8#6/4\",\"3711\":\"v-758a1bd8#6/5\",\"3712\":\"v-758a1bd8#7\",\"3713\":\"v-758a1bd8#8\",\"3714\":\"v-758a1bd8#8/0\",\"3715\":\"v-758a1bd8#8/1\",\"3716\":\"v-758a1bd8#8/2\",\"3717\":\"v-758a1bd8#9\",\"3718\":\"v-758a1bd8#9/0\",\"3719\":\"v-758a1bd8#9/1\",\"3720\":\"v-758a1bd8#9/2\",\"3721\":\"v-758a1bd8#9/3\",\"3722\":\"v-758a1bd8#9/4\",\"3723\":\"v-758a1bd8#9/5\",\"3724\":\"v-758a1bd8#9/6\",\"3725\":\"v-758a1bd8#9/7\",\"3726\":\"v-758a1bd8#9/8\",\"3727\":\"v-758a1bd8#9/9\",\"3728\":\"v-758a1bd8#9/10\",\"3729\":\"v-758a1bd8#9/11\",\"3730\":\"v-758a1bd8#10\",\"3731\":\"v-758a1bd8#10/0\",\"3732\":\"v-758a1bd8#10/1\",\"3733\":\"v-758a1bd8#10/2\",\"3734\":\"v-758a1bd8#10/3\",\"3735\":\"v-758a1bd8#11\",\"3736\":\"v-758a1bd8#12\",\"3737\":\"v-758a1bd8#12/0\",\"3738\":\"v-758a1bd8#12/1\",\"3739\":\"v-758a1bd8#13\",\"3740\":\"v-758a1bd8#13/2\",\"3741\":\"v-758a1bd8#13/3\",\"3742\":\"v-758a1bd8#13/4\",\"3743\":\"v-758a1bd8#13/5\",\"3744\":\"v-758a1bd8#14\",\"3745\":\"v-758a1bd8#14/0\",\"3746\":\"v-758a1bd8#14/1\",\"3747\":\"v-758a1bd8#14/2\",\"3748\":\"v-758a1bd8#15\",\"3749\":\"v-758a1bd8#15/3\",\"3750\":\"v-758a1bd8#15/4\",\"3751\":\"v-758a1bd8#15/5\",\"3752\":\"v-758a1bd8#15/6\",\"3753\":\"v-758a1bd8#15/7\",\"3754\":\"v-758a1bd8#15/8\",\"3755\":\"v-758a1bd8#16\",\"3756\":\"v-758a1bd8#17\",\"3757\":\"v-758a1bd8#17/9\",\"3758\":\"v-758a1bd8#17/10\",\"3759\":\"v-758a1bd8#17/11\",\"3760\":\"v-758a1bd8#17/12\",\"3761\":\"v-758a1bd8#17/13\",\"3762\":\"v-758a1bd8#17/14\",\"3763\":\"v-758a1bd8#18\",\"3764\":\"v-758a1bd8#18/0\",\"3765\":\"v-758a1bd8#18/1\",\"3766\":\"v-758a1bd8#19\",\"3767\":\"v-758a1bd8#19/0\",\"3768\":\"v-758a1bd8#20\",\"3769\":\"v-758a1bd8#21\",\"3770\":\"v-758a1bd8#21/1\",\"3771\":\"v-758a1bd8#21/2\",\"3772\":\"v-758a1bd8#21/3\",\"3773\":\"v-758a1bd8#22\",\"3774\":\"v-758a1bd8#22/0\",\"3775\":\"v-758a1bd8#22/1\",\"3776\":\"v-758a1bd8#22/2\",\"3777\":\"v-758a1bd8#23\",\"3778\":\"v-758a1bd8#23/0\",\"3779\":\"v-758a1bd8#24\",\"3780\":\"v-758a1bd8#24/0\",\"3781\":\"v-758a1bd8#24/1\",\"3782\":\"v-758a1bd8#24/2\",\"3783\":\"v-758a1bd8#24/3\",\"3784\":\"v-758a1bd8#25\",\"3785\":\"v-758a1bd8#25/0\",\"3786\":\"v-758a1bd8#25/1\",\"3787\":\"v-758a1bd8#25/2\",\"3788\":\"v-758a1bd8#25/3\",\"3789\":\"v-758a1bd8#26\",\"3790\":\"v-758a1bd8#26/0\",\"3791\":\"v-758a1bd8#27\",\"3792\":\"v-758a1bd8#27/0\",\"3793\":\"v-758a1bd8#27/1\",\"3794\":\"v-758a1bd8#27/2\",\"3795\":\"v-758a1bd8#27/3\",\"3796\":\"v-758a1bd8#27/4\",\"3797\":\"v-758a1bd8#27/5\",\"3798\":\"v-758a1bd8#27/6\",\"3799\":\"v-758a1bd8#27/7\",\"3800\":\"v-758a1bd8#27/8\",\"3801\":\"v-758a1bd8#28\",\"3802\":\"v-758a1bd8#28/0\",\"3803\":\"v-758a1bd8#28/1\",\"3804\":\"v-758a1bd8#29\",\"3805\":\"v-758a1bd8#29/2\",\"3806\":\"v-758a1bd8#29/3\",\"3807\":\"v-0c550b7e\",\"3808\":\"v-0c550b7e#1\",\"3809\":\"v-0c550b7e#2\",\"3810\":\"v-0c550b7e#2/0\",\"3811\":\"v-0c550b7e#2/1\",\"3812\":\"v-0c550b7e#3\",\"3813\":\"v-0c550b7e#3/0\",\"3814\":\"v-0c550b7e#4\",\"3815\":\"v-0c550b7e#4/0\",\"3816\":\"v-0c550b7e#4/1\",\"3817\":\"v-0c550b7e#5\",\"3818\":\"v-0c550b7e#5/2\",\"3819\":\"v-0c550b7e#6\",\"3820\":\"v-0c550b7e#6/0\",\"3821\":\"v-0c550b7e#6/1\",\"3822\":\"v-0c550b7e#7\",\"3823\":\"v-0c550b7e#7/2\",\"3824\":\"v-0c550b7e#7/3\",\"3825\":\"v-0c550b7e#7/4\",\"3826\":\"v-0c550b7e#7/5\",\"3827\":\"v-0c550b7e#8\",\"3828\":\"v-0c550b7e#8/0\",\"3829\":\"v-0c550b7e#8/1\",\"3830\":\"v-0c550b7e#8/2\",\"3831\":\"v-0c550b7e#9\",\"3832\":\"v-0c550b7e#9/0\",\"3833\":\"v-0c550b7e#10\",\"3834\":\"v-0c550b7e#11\",\"3835\":\"v-0c550b7e#11/0\",\"3836\":\"v-0c550b7e#11/1\",\"3837\":\"v-0c550b7e#12\",\"3838\":\"v-0c550b7e#12/0\",\"3839\":\"v-0c550b7e#12/1\",\"3840\":\"v-0c550b7e#12/2\",\"3841\":\"v-0c550b7e#12/3\",\"3842\":\"v-0c550b7e#13\",\"3843\":\"v-0c550b7e#13/0\",\"3844\":\"v-0c550b7e#14\",\"3845\":\"v-0c550b7e#14/0\",\"3846\":\"v-0c550b7e#14/1\",\"3847\":\"v-0c550b7e#14/2\",\"3848\":\"v-614d3b8e\",\"3849\":\"v-614d3b8e#0/0\",\"3850\":\"v-614d3b8e#1\",\"3851\":\"v-614d3b8e#2\",\"3852\":\"v-614d3b8e#2/0\",\"3853\":\"v-614d3b8e#2/1\",\"3854\":\"v-614d3b8e#3\",\"3855\":\"v-614d3b8e#3/2\",\"3856\":\"v-614d3b8e#3/3\",\"3857\":\"v-614d3b8e#3/4\",\"3858\":\"v-614d3b8e#4\",\"3859\":\"v-614d3b8e#4/5\",\"3860\":\"v-614d3b8e#4/6\",\"3861\":\"v-614d3b8e#4/7\",\"3862\":\"v-614d3b8e#4/8\",\"3863\":\"v-614d3b8e#4/9\",\"3864\":\"v-614d3b8e#5\",\"3865\":\"v-614d3b8e#5/0\",\"3866\":\"v-614d3b8e#5/1\",\"3867\":\"v-614d3b8e#6\",\"3868\":\"v-614d3b8e#6/0\",\"3869\":\"v-614d3b8e#6/1\",\"3870\":\"v-614d3b8e#6/2\",\"3871\":\"v-614d3b8e#6/3\",\"3872\":\"v-614d3b8e#7\",\"3873\":\"v-614d3b8e#7/0\",\"3874\":\"v-614d3b8e#7/1\",\"3875\":\"v-614d3b8e#8\",\"3876\":\"v-614d3b8e#8/0\",\"3877\":\"v-614d3b8e#8/1\",\"3878\":\"v-614d3b8e#8/2\",\"3879\":\"v-614d3b8e#8/3\",\"3880\":\"v-614d3b8e#8/4\",\"3881\":\"v-614d3b8e#9\",\"3882\":\"v-614d3b8e#9/0\",\"3883\":\"v-614d3b8e#10\",\"3884\":\"v-614d3b8e#10/0\",\"3885\":\"v-614d3b8e#10/1\",\"3886\":\"v-614d3b8e#10/2\",\"3887\":\"v-614d3b8e#10/3\",\"3888\":\"v-45f21e90\",\"3889\":\"v-45f21e90#1\",\"3890\":\"v-45f21e90#2\",\"3891\":\"v-45f21e90#2/0\",\"3892\":\"v-45f21e90#3\",\"3893\":\"v-45f21e90#4\",\"3894\":\"v-45f21e90#4/0\",\"3895\":\"v-45f21e90#4/1\",\"3896\":\"v-45f21e90#5\",\"3897\":\"v-45f21e90#5/0\",\"3898\":\"v-45f21e90#5/1\",\"3899\":\"v-45f21e90#6\",\"3900\":\"v-45f21e90#6/0\",\"3901\":\"v-45f21e90#6/1\",\"3902\":\"v-45f21e90#6/2\",\"3903\":\"v-45f21e90#6/3\",\"3904\":\"v-45f21e90#6/4\",\"3905\":\"v-45f21e90#6/5\",\"3906\":\"v-45f21e90#7\",\"3907\":\"v-45f21e90#7/0\",\"3908\":\"v-45f21e90#7/1\",\"3909\":\"v-45f21e90#8\",\"3910\":\"v-45f21e90#8/0\",\"3911\":\"v-45f21e90#8/1\",\"3912\":\"v-45f21e90#8/2\",\"3913\":\"v-45f21e90#8/3\",\"3914\":\"v-45f21e90#9\",\"3915\":\"v-45f21e90#9/0\",\"3916\":\"v-45f21e90#10\",\"3917\":\"v-45f21e90#10/0\",\"3918\":\"v-45f21e90#10/1\",\"3919\":\"v-45f21e90#11\",\"3920\":\"v-45f21e90#11/0\",\"3921\":\"v-45f21e90#11/1\",\"3922\":\"v-45f21e90#11/2\",\"3923\":\"v-45f21e90#11/3\",\"3924\":\"v-45f21e90#11/4\",\"3925\":\"v-45f21e90#12\",\"3926\":\"v-45f21e90#12/0\",\"3927\":\"v-45f21e90#12/1\",\"3928\":\"v-45f21e90#12/2\",\"3929\":\"v-45f21e90#13\",\"3930\":\"v-45f21e90#13/3\",\"3931\":\"v-45f21e90#13/4\",\"3932\":\"v-45f21e90#14\",\"3933\":\"v-45f21e90#14/0\",\"3934\":\"v-45f21e90#14/1\",\"3935\":\"v-45f21e90#14/2\",\"3936\":\"v-45f21e90#14/3\",\"3937\":\"v-45f21e90#14/4\",\"3938\":\"v-45f21e90#14/5\",\"3939\":\"v-45f21e90#14/6\",\"3940\":\"v-45f21e90#15\",\"3941\":\"v-45f21e90#15/0\",\"3942\":\"v-45f21e90#16\",\"3943\":\"v-45f21e90#16/0\",\"3944\":\"v-45f21e90#16/1\",\"3945\":\"v-45f21e90#17\",\"3946\":\"v-45f21e90#17/0\",\"3947\":\"v-45f21e90#17/1\",\"3948\":\"v-45f21e90#18\",\"3949\":\"v-45f21e90#18/2\",\"3950\":\"v-45f21e90#18/3\",\"3951\":\"v-45f21e90#18/4\",\"3952\":\"v-45f21e90#18/5\",\"3953\":\"v-45f21e90#18/6\",\"3954\":\"v-45f21e90#19\",\"3955\":\"v-45f21e90#19/0\",\"3956\":\"v-45f21e90#19/1\",\"3957\":\"v-45f21e90#19/2\",\"3958\":\"v-45f21e90#20\",\"3959\":\"v-45f21e90#20/3\",\"3960\":\"v-45f21e90#20/4\",\"3961\":\"v-45f21e90#20/5\",\"3962\":\"v-45f21e90#21\",\"3963\":\"v-45f21e90#21/0\",\"3964\":\"v-45f21e90#21/1\",\"3965\":\"v-45f21e90#21/2\",\"3966\":\"v-45f21e90#22\",\"3967\":\"v-45f21e90#22/3\",\"3968\":\"v-45f21e90#22/4\",\"3969\":\"v-45f21e90#23\",\"3970\":\"v-45f21e90#24\",\"3971\":\"v-45f21e90#24/0\",\"3972\":\"v-45f21e90#24/1\",\"3973\":\"v-45f21e90#25\",\"3974\":\"v-45f21e90#25/0\",\"3975\":\"v-45f21e90#25/1\",\"3976\":\"v-45f21e90#25/2\",\"3977\":\"v-45f21e90#26\",\"3978\":\"v-45f21e90#26/3\",\"3979\":\"v-45f21e90#26/4\",\"3980\":\"v-45f21e90#26/5\",\"3981\":\"v-45f21e90#27\",\"3982\":\"v-45f21e90#27/6\",\"3983\":\"v-45f21e90#28\",\"3984\":\"v-45f21e90#28/0\",\"3985\":\"v-45f21e90#28/1\",\"3986\":\"v-45f21e90#29\",\"3987\":\"v-45f21e90#29/2\",\"3988\":\"v-45f21e90#30\",\"3989\":\"v-45f21e90#30/3\",\"3990\":\"v-45f21e90#30/4\",\"3991\":\"v-45f21e90#31\",\"3992\":\"v-45f21e90#31/5\",\"3993\":\"v-45f21e90#32\",\"3994\":\"v-45f21e90#33\",\"3995\":\"v-45f21e90#33/0\",\"3996\":\"v-45f21e90#33/1\",\"3997\":\"v-e17bd350\",\"3998\":\"v-e17bd350#1\",\"3999\":\"v-e17bd350#1/0\",\"4000\":\"v-e17bd350#2\",\"4001\":\"v-e17bd350#2/0\",\"4002\":\"v-e17bd350#2/1\",\"4003\":\"v-e17bd350#2/2\",\"4004\":\"v-e17bd350#3\",\"4005\":\"v-e17bd350#3/0\",\"4006\":\"v-e17bd350#3/1\",\"4007\":\"v-e17bd350#3/2\",\"4008\":\"v-e17bd350#4\",\"4009\":\"v-e17bd350#4/0\",\"4010\":\"v-e17bd350#4/1\",\"4011\":\"v-e17bd350#4/2\",\"4012\":\"v-e17bd350#4/3\",\"4013\":\"v-e17bd350#5\",\"4014\":\"v-e17bd350#5/0\",\"4015\":\"v-e17bd350#5/1\",\"4016\":\"v-e17bd350#5/2\",\"4017\":\"v-e17bd350#5/3\",\"4018\":\"v-e17bd350#5/4\",\"4019\":\"v-e17bd350#5/5\",\"4020\":\"v-e17bd350#5/6\",\"4021\":\"v-e17bd350#5/7\",\"4022\":\"v-e17bd350#6\",\"4023\":\"v-e17bd350#6/0\",\"4024\":\"v-e17bd350#6/1\",\"4025\":\"v-e17bd350#6/2\",\"4026\":\"v-e17bd350#7\",\"4027\":\"v-e17bd350#8\",\"4028\":\"v-e17bd350#8/0\",\"4029\":\"v-e17bd350#8/1\",\"4030\":\"v-e17bd350#8/2\",\"4031\":\"v-e17bd350#8/3\",\"4032\":\"v-e17bd350#8/4\",\"4033\":\"v-e17bd350#8/5\",\"4034\":\"v-e17bd350#9\",\"4035\":\"v-e17bd350#9/0\",\"4036\":\"v-e17bd350#9/1\",\"4037\":\"v-e17bd350#10\",\"4038\":\"v-e17bd350#10/0\",\"4039\":\"v-e17bd350#10/1\",\"4040\":\"v-e17bd350#11\",\"4041\":\"v-e17bd350#12\",\"4042\":\"v-e17bd350#12/2\",\"4043\":\"v-e17bd350#12/3\",\"4044\":\"v-e17bd350#12/4\",\"4045\":\"v-e17bd350#13\",\"4046\":\"v-e17bd350#14\",\"4047\":\"v-e17bd350#14/0\",\"4048\":\"v-e17bd350#14/1\",\"4049\":\"v-e17bd350#15\",\"4050\":\"v-e17bd350#15/0\",\"4051\":\"v-e17bd350#15/1\",\"4052\":\"v-e17bd350#15/2\",\"4053\":\"v-e17bd350#16\",\"4054\":\"v-e17bd350#16/0\",\"4055\":\"v-e17bd350#17\",\"4056\":\"v-e17bd350#17/0\",\"4057\":\"v-e17bd350#17/1\",\"4058\":\"v-e17bd350#18\",\"4059\":\"v-e17bd350#18/0\",\"4060\":\"v-e17bd350#18/1\",\"4061\":\"v-e17bd350#18/2\",\"4062\":\"v-e17bd350#18/3\",\"4063\":\"v-e17bd350#18/4\",\"4064\":\"v-e17bd350#18/5\",\"4065\":\"v-e17bd350#18/6\",\"4066\":\"v-e17bd350#19\",\"4067\":\"v-e17bd350#19/0\",\"4068\":\"v-e17bd350#19/1\",\"4069\":\"v-e17bd350#20\",\"4070\":\"v-e17bd350#21\",\"4071\":\"v-e17bd350#21/0\",\"4072\":\"v-e17bd350#21/1\",\"4073\":\"v-e17bd350#21/2\",\"4074\":\"v-e17bd350#21/3\",\"4075\":\"v-e17bd350#22\",\"4076\":\"v-e17bd350#22/0\",\"4077\":\"v-e17bd350#22/1\",\"4078\":\"v-e17bd350#23\",\"4079\":\"v-e17bd350#23/2\",\"4080\":\"v-e17bd350#23/3\",\"4081\":\"v-e17bd350#24\",\"4082\":\"v-e17bd350#24/4\",\"4083\":\"v-e17bd350#24/5\",\"4084\":\"v-e17bd350#25\",\"4085\":\"v-e17bd350#25/6\",\"4086\":\"v-e17bd350#25/7\",\"4087\":\"v-e17bd350#25/8\",\"4088\":\"v-e17bd350#25/9\",\"4089\":\"v-e17bd350#26\",\"4090\":\"v-e17bd350#26/0\",\"4091\":\"v-e17bd350#26/1\",\"4092\":\"v-e17bd350#26/2\",\"4093\":\"v-e17bd350#27\",\"4094\":\"v-e17bd350#27/3\",\"4095\":\"v-e17bd350#28\",\"4096\":\"v-e17bd350#28/0\",\"4097\":\"v-e17bd350#29\",\"4098\":\"v-e17bd350#29/0\",\"4099\":\"v-e17bd350#29/1\",\"4100\":\"v-e17bd350#29/2\",\"4101\":\"v-e17bd350#30\",\"4102\":\"v-e17bd350#30/0\",\"4103\":\"v-e17bd350#30/1\",\"4104\":\"v-e17bd350#30/2\",\"4105\":\"v-e17bd350#31\",\"4106\":\"v-e17bd350#31/0\",\"4107\":\"v-e17bd350#32\",\"4108\":\"v-e17bd350#33\",\"4109\":\"v-e17bd350#33/0\",\"4110\":\"v-e17bd350#33/1\",\"4111\":\"v-e17bd350#34\",\"4112\":\"v-e17bd350#34/0\",\"4113\":\"v-e17bd350#34/1\",\"4114\":\"v-7762f3d8\",\"4115\":\"v-7762f3d8#1\",\"4116\":\"v-7762f3d8#2\",\"4117\":\"v-7762f3d8#2/0\",\"4118\":\"v-7762f3d8#2/1\",\"4119\":\"v-7762f3d8#2/2\",\"4120\":\"v-7762f3d8#2/3\",\"4121\":\"v-7762f3d8#2/4\",\"4122\":\"v-7762f3d8#2/5\",\"4123\":\"v-7762f3d8#2/6\",\"4124\":\"v-7762f3d8#3\",\"4125\":\"v-7762f3d8#4\",\"4126\":\"v-7762f3d8#4/0\",\"4127\":\"v-7762f3d8#4/1\",\"4128\":\"v-7762f3d8#5\",\"4129\":\"v-7762f3d8#5/0\",\"4130\":\"v-7762f3d8#5/1\",\"4131\":\"v-7762f3d8#6\",\"4132\":\"v-7762f3d8#6/0\",\"4133\":\"v-7762f3d8#6/1\",\"4134\":\"v-7762f3d8#7\",\"4135\":\"v-7762f3d8#7/0\",\"4136\":\"v-7762f3d8#7/1\",\"4137\":\"v-7762f3d8#8\",\"4138\":\"v-7762f3d8#8/0\",\"4139\":\"v-7762f3d8#8/1\",\"4140\":\"v-7762f3d8#8/2\",\"4141\":\"v-7762f3d8#8/3\",\"4142\":\"v-7762f3d8#8/4\",\"4143\":\"v-7762f3d8#9\",\"4144\":\"v-7762f3d8#10\",\"4145\":\"v-7762f3d8#10/5\",\"4146\":\"v-7762f3d8#11\",\"4147\":\"v-7762f3d8#11/6\",\"4148\":\"v-7762f3d8#11/7\",\"4149\":\"v-7762f3d8#12\",\"4150\":\"v-7762f3d8#12/8\",\"4151\":\"v-7762f3d8#13\",\"4152\":\"v-7762f3d8#13/0\",\"4153\":\"v-7762f3d8#13/1\",\"4154\":\"v-7762f3d8#13/2\",\"4155\":\"v-7762f3d8#14\",\"4156\":\"v-7762f3d8#14/0\",\"4157\":\"v-7762f3d8#14/1\",\"4158\":\"v-7762f3d8#14/2\",\"4159\":\"v-7762f3d8#15\",\"4160\":\"v-7762f3d8#15/0\",\"4161\":\"v-7762f3d8#15/1\",\"4162\":\"v-7762f3d8#15/2\",\"4163\":\"v-7762f3d8#15/3\",\"4164\":\"v-7762f3d8#15/4\",\"4165\":\"v-7762f3d8#16\",\"4166\":\"v-7762f3d8#16/5\",\"4167\":\"v-7762f3d8#16/6\",\"4168\":\"v-7762f3d8#17\",\"4169\":\"v-7762f3d8#17/0\",\"4170\":\"v-7762f3d8#17/1\",\"4171\":\"v-7762f3d8#18\",\"4172\":\"v-7762f3d8#18/0\",\"4173\":\"v-7762f3d8#18/1\",\"4174\":\"v-7762f3d8#18/2\",\"4175\":\"v-7762f3d8#19\",\"4176\":\"v-7762f3d8#20\",\"4177\":\"v-7762f3d8#20/3\",\"4178\":\"v-7762f3d8#20/4\",\"4179\":\"v-7762f3d8#21\",\"4180\":\"v-7762f3d8#21/5\",\"4181\":\"v-7762f3d8#21/6\",\"4182\":\"v-7762f3d8#22\",\"4183\":\"v-7762f3d8#22/7\",\"4184\":\"v-7762f3d8#22/8\",\"4185\":\"v-7762f3d8#22/9\",\"4186\":\"v-7762f3d8#23\",\"4187\":\"v-7762f3d8#23/0\",\"4188\":\"v-7762f3d8#23/1\",\"4189\":\"v-7762f3d8#23/2\",\"4190\":\"v-7762f3d8#24\",\"4191\":\"v-7762f3d8#25\",\"4192\":\"v-7762f3d8#25/0\",\"4193\":\"v-7762f3d8#26\",\"4194\":\"v-7762f3d8#26/1\",\"4195\":\"v-7762f3d8#26/2\",\"4196\":\"v-7762f3d8#26/3\",\"4197\":\"v-7762f3d8#27\",\"4198\":\"v-7762f3d8#27/4\",\"4199\":\"v-7762f3d8#27/5\",\"4200\":\"v-542ccf32\",\"4201\":\"v-542ccf32#1\",\"4202\":\"v-542ccf32#2\",\"4203\":\"v-542ccf32#2/0\",\"4204\":\"v-542ccf32#2/1\",\"4205\":\"v-542ccf32#2/2\",\"4206\":\"v-542ccf32#3\",\"4207\":\"v-542ccf32#3/0\",\"4208\":\"v-542ccf32#3/1\",\"4209\":\"v-542ccf32#3/2\",\"4210\":\"v-542ccf32#3/3\",\"4211\":\"v-542ccf32#3/4\",\"4212\":\"v-542ccf32#3/5\",\"4213\":\"v-542ccf32#3/6\",\"4214\":\"v-542ccf32#3/7\",\"4215\":\"v-542ccf32#3/8\",\"4216\":\"v-542ccf32#3/9\",\"4217\":\"v-542ccf32#3/10\",\"4218\":\"v-542ccf32#4\",\"4219\":\"v-542ccf32#5\",\"4220\":\"v-542ccf32#5/0\",\"4221\":\"v-542ccf32#5/1\",\"4222\":\"v-542ccf32#5/2\",\"4223\":\"v-542ccf32#5/3\",\"4224\":\"v-542ccf32#5/4\",\"4225\":\"v-542ccf32#5/5\",\"4226\":\"v-542ccf32#5/6\",\"4227\":\"v-542ccf32#5/7\",\"4228\":\"v-542ccf32#6\",\"4229\":\"v-542ccf32#6/8\",\"4230\":\"v-542ccf32#6/9\",\"4231\":\"v-542ccf32#6/10\",\"4232\":\"v-542ccf32#6/11\",\"4233\":\"v-542ccf32#7\",\"4234\":\"v-542ccf32#7/0\",\"4235\":\"v-542ccf32#7/1\",\"4236\":\"v-542ccf32#7/2\",\"4237\":\"v-542ccf32#7/3\",\"4238\":\"v-542ccf32#7/4\",\"4239\":\"v-542ccf32#7/5\",\"4240\":\"v-542ccf32#7/6\",\"4241\":\"v-542ccf32#7/7\",\"4242\":\"v-542ccf32#8\",\"4243\":\"v-542ccf32#8/8\",\"4244\":\"v-542ccf32#8/9\",\"4245\":\"v-542ccf32#8/10\",\"4246\":\"v-542ccf32#9\",\"4247\":\"v-542ccf32#9/0\",\"4248\":\"v-542ccf32#9/1\",\"4249\":\"v-542ccf32#10\",\"4250\":\"v-542ccf32#10/2\",\"4251\":\"v-542ccf32#11\",\"4252\":\"v-542ccf32#11/0\",\"4253\":\"v-542ccf32#11/1\",\"4254\":\"v-542ccf32#12\",\"4255\":\"v-542ccf32#12/2\",\"4256\":\"v-542ccf32#12/3\",\"4257\":\"v-542ccf32#13\",\"4258\":\"v-542ccf32#13/4\",\"4259\":\"v-542ccf32#13/5\",\"4260\":\"v-542ccf32#14\",\"4261\":\"v-542ccf32#14/6\",\"4262\":\"v-542ccf32#15\",\"4263\":\"v-542ccf32#16\",\"4264\":\"v-542ccf32#16/0\",\"4265\":\"v-542ccf32#16/1\",\"4266\":\"v-542ccf32#17\",\"4267\":\"v-542ccf32#17/0\",\"4268\":\"v-542ccf32#18\",\"4269\":\"v-542ccf32#18/0\",\"4270\":\"v-542ccf32#18/1\",\"4271\":\"v-542ccf32#19\",\"4272\":\"v-542ccf32#19/0\",\"4273\":\"v-542ccf32#19/1\",\"4274\":\"v-542ccf32#19/2\",\"4275\":\"v-542ccf32#20\",\"4276\":\"v-542ccf32#20/3\",\"4277\":\"v-542ccf32#20/4\",\"4278\":\"v-542ccf32#21\",\"4279\":\"v-542ccf32#21/0\",\"4280\":\"v-542ccf32#21/1\",\"4281\":\"v-542ccf32#21/2\",\"4282\":\"v-542ccf32#22\",\"4283\":\"v-542ccf32#22/3\",\"4284\":\"v-542ccf32#22/4\",\"4285\":\"v-542ccf32#22/5\",\"4286\":\"v-542ccf32#22/6\",\"4287\":\"v-542ccf32#22/7\",\"4288\":\"v-542ccf32#23\",\"4289\":\"v-542ccf32#24\",\"4290\":\"v-542ccf32#24/0\",\"4291\":\"v-542ccf32#24/1\",\"4292\":\"v-542ccf32#24/2\",\"4293\":\"v-542ccf32#25\",\"4294\":\"v-542ccf32#25/3\",\"4295\":\"v-542ccf32#25/4\",\"4296\":\"v-542ccf32#26\",\"4297\":\"v-542ccf32#26/5\",\"4298\":\"v-542ccf32#26/6\",\"4299\":\"v-542ccf32#27\",\"4300\":\"v-542ccf32#28\",\"4301\":\"v-542ccf32#28/0\",\"4302\":\"v-542ccf32#28/1\",\"4303\":\"v-542ccf32#29\",\"4304\":\"v-542ccf32#29/0\",\"4305\":\"v-542ccf32#30\",\"4306\":\"v-542ccf32#30/0\",\"4307\":\"v-542ccf32#30/1\",\"4308\":\"v-542ccf32#30/2\",\"4309\":\"v-542ccf32#30/3\",\"4310\":\"v-542ccf32#30/4\",\"4311\":\"v-542ccf32#31\",\"4312\":\"v-542ccf32#32\",\"4313\":\"v-542ccf32#32/0\",\"4314\":\"v-542ccf32#32/1\",\"4315\":\"v-542ccf32#32/2\",\"4316\":\"v-542ccf32#33\",\"4317\":\"v-542ccf32#33/0\",\"4318\":\"v-542ccf32#33/1\",\"4319\":\"v-542ccf32#33/2\",\"4320\":\"v-542ccf32#34\",\"4321\":\"v-542ccf32#34/0\",\"4322\":\"v-542ccf32#34/1\",\"4323\":\"v-542ccf32#34/2\",\"4324\":\"v-542ccf32#34/3\",\"4325\":\"v-542ccf32#35\",\"4326\":\"v-542ccf32#35/0\",\"4327\":\"v-542ccf32#36\",\"4328\":\"v-542ccf32#36/1\",\"4329\":\"v-542ccf32#36/2\",\"4330\":\"v-542ccf32#37\",\"4331\":\"v-542ccf32#37/3\",\"4332\":\"v-542ccf32#37/4\",\"4333\":\"v-542ccf32#37/5\",\"4334\":\"v-542ccf32#38\",\"4335\":\"v-542ccf32#38/0\",\"4336\":\"v-542ccf32#38/1\",\"4337\":\"v-542ccf32#39\",\"4338\":\"v-542ccf32#39/0\",\"4339\":\"v-542ccf32#39/1\",\"4340\":\"v-542ccf32#39/2\",\"4341\":\"v-542ccf32#39/3\",\"4342\":\"v-542ccf32#39/4\",\"4343\":\"v-542ccf32#39/5\",\"4344\":\"v-542ccf32#40\",\"4345\":\"v-542ccf32#40/0\",\"4346\":\"v-542ccf32#41\",\"4347\":\"v-542ccf32#41/0\",\"4348\":\"v-542ccf32#42\",\"4349\":\"v-542ccf32#42/0\",\"4350\":\"v-542ccf32#43\",\"4351\":\"v-542ccf32#43/1\",\"4352\":\"v-542ccf32#43/2\",\"4353\":\"v-542ccf32#43/3\",\"4354\":\"v-542ccf32#44\",\"4355\":\"v-542ccf32#45\",\"4356\":\"v-542ccf32#45/0\",\"4357\":\"v-542ccf32#46\",\"4358\":\"v-542ccf32#46/1\",\"4359\":\"v-e1474b4e\",\"4360\":\"v-e1474b4e#1\",\"4361\":\"v-e1474b4e#2\",\"4362\":\"v-e1474b4e#2/0\",\"4363\":\"v-e1474b4e#3\",\"4364\":\"v-e1474b4e#3/0\",\"4365\":\"v-e1474b4e#4\",\"4366\":\"v-e1474b4e#4/0\",\"4367\":\"v-e1474b4e#4/1\",\"4368\":\"v-e1474b4e#4/2\",\"4369\":\"v-e1474b4e#5\",\"4370\":\"v-e1474b4e#5/0\",\"4371\":\"v-e1474b4e#5/1\",\"4372\":\"v-e1474b4e#5/2\",\"4373\":\"v-e1474b4e#5/3\",\"4374\":\"v-e1474b4e#6\",\"4375\":\"v-e1474b4e#7\",\"4376\":\"v-e1474b4e#7/0\",\"4377\":\"v-e1474b4e#7/1\",\"4378\":\"v-e1474b4e#7/2\",\"4379\":\"v-e1474b4e#7/3\",\"4380\":\"v-e1474b4e#7/4\",\"4381\":\"v-e1474b4e#8\",\"4382\":\"v-e1474b4e#8/0\",\"4383\":\"v-e1474b4e#8/1\",\"4384\":\"v-e1474b4e#9\",\"4385\":\"v-e1474b4e#9/2\",\"4386\":\"v-e1474b4e#10\",\"4387\":\"v-e1474b4e#10/0\",\"4388\":\"v-e1474b4e#10/1\",\"4389\":\"v-e1474b4e#11\",\"4390\":\"v-e1474b4e#12\",\"4391\":\"v-e1474b4e#12/2\",\"4392\":\"v-e1474b4e#12/3\",\"4393\":\"v-e1474b4e#13\",\"4394\":\"v-e1474b4e#13/0\",\"4395\":\"v-e1474b4e#14\",\"4396\":\"v-e1474b4e#14/1\",\"4397\":\"v-e1474b4e#14/2\",\"4398\":\"v-e1474b4e#15\",\"4399\":\"v-e1474b4e#15/3\",\"4400\":\"v-e1474b4e#15/4\",\"4401\":\"v-e1474b4e#16\",\"4402\":\"v-e1474b4e#16/0\",\"4403\":\"v-e1474b4e#16/1\",\"4404\":\"v-e1474b4e#17\",\"4405\":\"v-e1474b4e#17/0\",\"4406\":\"v-e1474b4e#17/1\",\"4407\":\"v-e1474b4e#17/2\",\"4408\":\"v-e1474b4e#17/3\",\"4409\":\"v-e1474b4e#17/4\",\"4410\":\"v-e1474b4e#17/5\",\"4411\":\"v-e1474b4e#17/6\",\"4412\":\"v-e1474b4e#18\",\"4413\":\"v-e1474b4e#18/0\",\"4414\":\"v-e1474b4e#18/1\",\"4415\":\"v-e1474b4e#19\",\"4416\":\"v-e1474b4e#19/0\",\"4417\":\"v-e1474b4e#19/1\",\"4418\":\"v-e1474b4e#20\",\"4419\":\"v-e1474b4e#20/0\",\"4420\":\"v-e1474b4e#20/1\",\"4421\":\"v-e1474b4e#20/2\",\"4422\":\"v-e1474b4e#20/3\",\"4423\":\"v-e1474b4e#21\",\"4424\":\"v-e1474b4e#21/4\",\"4425\":\"v-e1474b4e#21/5\",\"4426\":\"v-e1474b4e#22\",\"4427\":\"v-e1474b4e#22/6\",\"4428\":\"v-e1474b4e#22/7\",\"4429\":\"v-e1474b4e#22/8\",\"4430\":\"v-e1474b4e#22/9\",\"4431\":\"v-e1474b4e#22/10\",\"4432\":\"v-e1474b4e#22/11\",\"4433\":\"v-e1474b4e#23\",\"4434\":\"v-e1474b4e#23/0\",\"4435\":\"v-e1474b4e#23/1\",\"4436\":\"v-e1474b4e#23/2\",\"4437\":\"v-e1474b4e#23/3\",\"4438\":\"v-e1474b4e#23/4\",\"4439\":\"v-e1474b4e#23/5\",\"4440\":\"v-e1474b4e#23/6\",\"4441\":\"v-78e14a34\",\"4442\":\"v-78e14a34#1\",\"4443\":\"v-78e14a34#2\",\"4444\":\"v-78e14a34#2/0\",\"4445\":\"v-78e14a34#2/1\",\"4446\":\"v-78e14a34#2/2\",\"4447\":\"v-78e14a34#3\",\"4448\":\"v-78e14a34#3/3\",\"4449\":\"v-78e14a34#3/4\",\"4450\":\"v-78e14a34#3/5\",\"4451\":\"v-78e14a34#3/6\",\"4452\":\"v-78e14a34#4\",\"4453\":\"v-78e14a34#4/7\",\"4454\":\"v-78e14a34#4/8\",\"4455\":\"v-78e14a34#4/9\",\"4456\":\"v-78e14a34#5\",\"4457\":\"v-78e14a34#5/0\",\"4458\":\"v-78e14a34#5/1\",\"4459\":\"v-78e14a34#5/2\",\"4460\":\"v-78e14a34#6\",\"4461\":\"v-78e14a34#6/3\",\"4462\":\"v-78e14a34#6/4\",\"4463\":\"v-78e14a34#6/5\",\"4464\":\"v-78e14a34#7\",\"4465\":\"v-78e14a34#7/0\",\"4466\":\"v-78e14a34#7/1\",\"4467\":\"v-78e14a34#8\",\"4468\":\"v-78e14a34#8/2\",\"4469\":\"v-78e14a34#8/3\",\"4470\":\"v-78e14a34#9\",\"4471\":\"v-78e14a34#10\",\"4472\":\"v-78e14a34#10/4\",\"4473\":\"v-78e14a34#10/5\",\"4474\":\"v-78e14a34#11\",\"4475\":\"v-78e14a34#12\",\"4476\":\"v-78e14a34#12/0\",\"4477\":\"v-78e14a34#13\",\"4478\":\"v-78e14a34#13/0\",\"4479\":\"v-78e14a34#13/1\",\"4480\":\"v-78e14a34#14\",\"4481\":\"v-78e14a34#14/0\",\"4482\":\"v-78e14a34#14/1\",\"4483\":\"v-78e14a34#14/2\",\"4484\":\"v-78e14a34#14/3\",\"4485\":\"v-78e14a34#15\",\"4486\":\"v-78e14a34#15/0\",\"4487\":\"v-78e14a34#15/1\",\"4488\":\"v-78e14a34#15/2\",\"4489\":\"v-78e14a34#15/3\",\"4490\":\"v-78e14a34#15/4\",\"4491\":\"v-78e14a34#15/5\",\"4492\":\"v-78e14a34#16\",\"4493\":\"v-78e14a34#16/6\",\"4494\":\"v-78e14a34#16/7\",\"4495\":\"v-78e14a34#16/8\",\"4496\":\"v-78e14a34#16/9\",\"4497\":\"v-78e14a34#17\",\"4498\":\"v-78e14a34#17/0\",\"4499\":\"v-78e14a34#17/1\",\"4500\":\"v-78e14a34#17/2\",\"4501\":\"v-78e14a34#17/3\",\"4502\":\"v-78e14a34#17/4\",\"4503\":\"v-78e14a34#17/5\",\"4504\":\"v-78e14a34#17/6\",\"4505\":\"v-78e14a34#17/7\",\"4506\":\"v-78e14a34#18\",\"4507\":\"v-78e14a34#18/0\",\"4508\":\"v-78e14a34#18/1\",\"4509\":\"v-78e14a34#18/2\",\"4510\":\"v-78e14a34#19\",\"4511\":\"v-78e14a34#19/3\",\"4512\":\"v-78e14a34#20\",\"4513\":\"v-78e14a34#20/0\",\"4514\":\"v-78e14a34#21\",\"4515\":\"v-78e14a34#21/1\",\"4516\":\"v-78e14a34#21/2\",\"4517\":\"v-78e14a34#21/3\",\"4518\":\"v-78e14a34#21/4\",\"4519\":\"v-78e14a34#22\",\"4520\":\"v-78e14a34#22/0\",\"4521\":\"v-78e14a34#23\",\"4522\":\"v-78e14a34#23/0\",\"4523\":\"v-78e14a34#23/1\",\"4524\":\"v-78e14a34#24\",\"4525\":\"v-78e14a34#24/2\",\"4526\":\"v-78e14a34#24/3\",\"4527\":\"v-78e14a34#25\",\"4528\":\"v-78e14a34#25/4\",\"4529\":\"v-78e14a34#25/5\",\"4530\":\"v-78e14a34#25/6\",\"4531\":\"v-78e14a34#25/7\",\"4532\":\"v-78e14a34#25/8\",\"4533\":\"v-78e14a34#26\",\"4534\":\"v-78e14a34#26/0\",\"4535\":\"v-78e14a34#27\",\"4536\":\"v-78e14a34#28\",\"4537\":\"v-78e14a34#28/1\",\"4538\":\"v-78e14a34#28/2\",\"4539\":\"v-78e14a34#28/3\",\"4540\":\"v-78e14a34#29\",\"4541\":\"v-78e14a34#29/0\",\"4542\":\"v-78e14a34#29/1\",\"4543\":\"v-78e14a34#29/2\",\"4544\":\"v-21b41a4d\",\"4545\":\"v-21b41a4d#1\",\"4546\":\"v-21b41a4d#2\",\"4547\":\"v-21b41a4d#2/0\",\"4548\":\"v-21b41a4d#2/1\",\"4549\":\"v-21b41a4d#3\",\"4550\":\"v-21b41a4d#3/0\",\"4551\":\"v-21b41a4d#4\",\"4552\":\"v-21b41a4d#4/1\",\"4553\":\"v-21b41a4d#4/2\",\"4554\":\"v-21b41a4d#5\",\"4555\":\"v-21b41a4d#5/3\",\"4556\":\"v-21b41a4d#5/4\",\"4557\":\"v-21b41a4d#5/5\",\"4558\":\"v-21b41a4d#5/6\",\"4559\":\"v-21b41a4d#5/7\",\"4560\":\"v-21b41a4d#5/8\",\"4561\":\"v-21b41a4d#6\",\"4562\":\"v-21b41a4d#6/0\",\"4563\":\"v-21b41a4d#6/1\",\"4564\":\"v-21b41a4d#6/2\",\"4565\":\"v-21b41a4d#6/3\",\"4566\":\"v-21b41a4d#6/4\",\"4567\":\"v-21b41a4d#6/5\",\"4568\":\"v-21b41a4d#7\",\"4569\":\"v-21b41a4d#7/0\",\"4570\":\"v-21b41a4d#8\",\"4571\":\"v-21b41a4d#8/0\",\"4572\":\"v-21b41a4d#8/1\",\"4573\":\"v-21b41a4d#8/2\",\"4574\":\"v-21b41a4d#8/3\",\"4575\":\"v-21b41a4d#8/4\",\"4576\":\"v-21b41a4d#9\",\"4577\":\"v-21b41a4d#9/0\",\"4578\":\"v-21b41a4d#10\",\"4579\":\"v-21b41a4d#10/0\",\"4580\":\"v-21b41a4d#11\",\"4581\":\"v-21b41a4d#11/0\",\"4582\":\"v-21b41a4d#11/1\",\"4583\":\"v-21b41a4d#12\",\"4584\":\"v-21b41a4d#12/0\",\"4585\":\"v-21b41a4d#12/1\",\"4586\":\"v-21b41a4d#12/2\",\"4587\":\"v-21b41a4d#12/3\",\"4588\":\"v-21b41a4d#12/4\",\"4589\":\"v-21b41a4d#13\",\"4590\":\"v-21b41a4d#14\",\"4591\":\"v-21b41a4d#14/0\",\"4592\":\"v-21b41a4d#14/1\",\"4593\":\"v-21b41a4d#14/2\",\"4594\":\"v-21b41a4d#15\",\"4595\":\"v-21b41a4d#15/0\",\"4596\":\"v-21b41a4d#16\",\"4597\":\"v-21b41a4d#16/0\",\"4598\":\"v-21b41a4d#16/1\",\"4599\":\"v-21b41a4d#16/2\",\"4600\":\"v-21b41a4d#17\",\"4601\":\"v-21b41a4d#17/0\",\"4602\":\"v-21b41a4d#17/1\",\"4603\":\"v-21b41a4d#17/2\",\"4604\":\"v-21b41a4d#17/3\",\"4605\":\"v-21b41a4d#17/4\",\"4606\":\"v-21b41a4d#18\",\"4607\":\"v-21b41a4d#18/0\",\"4608\":\"v-21b41a4d#18/1\",\"4609\":\"v-21b41a4d#19\",\"4610\":\"v-21b41a4d#19/0\",\"4611\":\"v-21b41a4d#19/1\",\"4612\":\"v-21b41a4d#19/2\",\"4613\":\"v-21b41a4d#19/3\",\"4614\":\"v-21b41a4d#19/4\",\"4615\":\"v-21b41a4d#19/5\",\"4616\":\"v-21b41a4d#19/6\",\"4617\":\"v-21b41a4d#19/7\",\"4618\":\"v-21b41a4d#20\",\"4619\":\"v-21b41a4d#20/0\",\"4620\":\"v-21b41a4d#21\",\"4621\":\"v-21b41a4d#21/0\",\"4622\":\"v-21b41a4d#21/1\",\"4623\":\"v-21b41a4d#21/2\",\"4624\":\"v-21b41a4d#21/3\",\"4625\":\"v-21b41a4d#21/4\",\"4626\":\"v-33098727\",\"4627\":\"v-33098727#0/0\",\"4628\":\"v-33098727#0/1\",\"4629\":\"v-33098727#1\",\"4630\":\"v-33098727#2\",\"4631\":\"v-33098727#2/0\",\"4632\":\"v-33098727#2/1\",\"4633\":\"v-33098727#2/2\",\"4634\":\"v-33098727#2/3\",\"4635\":\"v-33098727#2/4\",\"4636\":\"v-33098727#2/5\",\"4637\":\"v-33098727#3\",\"4638\":\"v-33098727#3/0\",\"4639\":\"v-33098727#4\",\"4640\":\"v-33098727#4/0\",\"4641\":\"v-33098727#5\",\"4642\":\"v-33098727#5/0\",\"4643\":\"v-33098727#6\",\"4644\":\"v-33098727#6/0\",\"4645\":\"v-33098727#6/1\",\"4646\":\"v-33098727#7\",\"4647\":\"v-33098727#7/0\",\"4648\":\"v-33098727#8\",\"4649\":\"v-33098727#8/0\",\"4650\":\"v-33098727#9\",\"4651\":\"v-33098727#10\",\"4652\":\"v-33098727#10/0\",\"4653\":\"v-33098727#10/1\",\"4654\":\"v-33098727#10/2\",\"4655\":\"v-33098727#11\",\"4656\":\"v-33098727#11/0\",\"4657\":\"v-33098727#11/1\",\"4658\":\"v-33098727#11/2\",\"4659\":\"v-33098727#12\",\"4660\":\"v-33098727#12/3\",\"4661\":\"v-33098727#12/4\",\"4662\":\"v-382c2a0e\",\"4663\":\"v-382c2a0e#1\",\"4664\":\"v-382c2a0e#1/0\",\"4665\":\"v-382c2a0e#2\",\"4666\":\"v-382c2a0e#2/0\",\"4667\":\"v-382c2a0e#3\",\"4668\":\"v-382c2a0e#3/0\",\"4669\":\"v-382c2a0e#3/1\",\"4670\":\"v-382c2a0e#3/2\",\"4671\":\"v-382c2a0e#4\",\"4672\":\"v-382c2a0e#4/3\",\"4673\":\"v-382c2a0e#4/4\",\"4674\":\"v-382c2a0e#4/5\",\"4675\":\"v-382c2a0e#5\",\"4676\":\"v-382c2a0e#5/0\",\"4677\":\"v-382c2a0e#5/1\",\"4678\":\"v-382c2a0e#6\",\"4679\":\"v-382c2a0e#6/0\",\"4680\":\"v-382c2a0e#6/1\",\"4681\":\"v-382c2a0e#6/2\",\"4682\":\"v-382c2a0e#7\",\"4683\":\"v-382c2a0e#7/0\",\"4684\":\"v-382c2a0e#8\",\"4685\":\"v-382c2a0e#8/0\",\"4686\":\"v-382c2a0e#9\",\"4687\":\"v-382c2a0e#9/0\",\"4688\":\"v-382c2a0e#9/1\",\"4689\":\"v-382c2a0e#10\",\"4690\":\"v-382c2a0e#10/0\",\"4691\":\"v-382c2a0e#10/1\",\"4692\":\"v-382c2a0e#11\",\"4693\":\"v-382c2a0e#11/0\",\"4694\":\"v-53742da0\",\"4695\":\"v-53742da0#1\",\"4696\":\"v-53742da0#2\",\"4697\":\"v-53742da0#2/0\",\"4698\":\"v-53742da0#2/1\",\"4699\":\"v-53742da0#2/2\",\"4700\":\"v-53742da0#2/3\",\"4701\":\"v-53742da0#3\",\"4702\":\"v-53742da0#3/0\",\"4703\":\"v-53742da0#3/1\",\"4704\":\"v-53742da0#4\",\"4705\":\"v-53742da0#4/0\",\"4706\":\"v-53742da0#4/1\",\"4707\":\"v-53742da0#5\",\"4708\":\"v-53742da0#6\",\"4709\":\"v-53742da0#6/0\",\"4710\":\"v-53742da0#7\",\"4711\":\"v-53742da0#8\",\"4712\":\"v-53742da0#8/1\",\"4713\":\"v-53742da0#9\",\"4714\":\"v-53742da0#9/2\",\"4715\":\"v-53742da0#10\",\"4716\":\"v-53742da0#10/3\",\"4717\":\"v-53742da0#11\",\"4718\":\"v-53742da0#11/4\",\"4719\":\"v-53742da0#12\",\"4720\":\"v-53742da0#12/5\",\"4721\":\"v-53742da0#13\",\"4722\":\"v-53742da0#13/6\",\"4723\":\"v-53742da0#14\",\"4724\":\"v-53742da0#14/7\",\"4725\":\"v-6b594a6a\",\"4726\":\"v-6b594a6a#1\",\"4727\":\"v-6b594a6a#1/0\",\"4728\":\"v-6b594a6a#1/1\",\"4729\":\"v-6b594a6a#1/2\",\"4730\":\"v-6b594a6a#2\",\"4731\":\"v-6b594a6a#2/0\",\"4732\":\"v-6b594a6a#2/1\",\"4733\":\"v-6b594a6a#3\",\"4734\":\"v-6b594a6a#3/0\",\"4735\":\"v-6b594a6a#4\",\"4736\":\"v-6b594a6a#4/1\",\"4737\":\"v-6b594a6a#4/2\",\"4738\":\"v-6b594a6a#4/3\",\"4739\":\"v-6b594a6a#5\",\"4740\":\"v-6b594a6a#5/0\",\"4741\":\"v-6b594a6a#5/1\",\"4742\":\"v-6b594a6a#5/2\",\"4743\":\"v-6b594a6a#5/3\",\"4744\":\"v-6b594a6a#6\",\"4745\":\"v-6b594a6a#6/0\",\"4746\":\"v-6b594a6a#6/1\",\"4747\":\"v-6b594a6a#7\",\"4748\":\"v-6b594a6a#7/0\",\"4749\":\"v-6b594a6a#7/1\",\"4750\":\"v-6b594a6a#7/2\",\"4751\":\"v-6b594a6a#7/3\",\"4752\":\"v-6b594a6a#8\",\"4753\":\"v-6b594a6a#8/4\",\"4754\":\"v-6b594a6a#9\",\"4755\":\"v-6b594a6a#9/5\",\"4756\":\"v-6b594a6a#9/6\",\"4757\":\"v-6b594a6a#10\",\"4758\":\"v-6b594a6a#10/0\",\"4759\":\"v-6b594a6a#10/1\",\"4760\":\"v-6b594a6a#11\",\"4761\":\"v-6b594a6a#11/0\",\"4762\":\"v-6b594a6a#11/1\",\"4763\":\"v-6b594a6a#11/2\",\"4764\":\"v-6b594a6a#11/3\",\"4765\":\"v-837ae2dc\",\"4766\":\"v-837ae2dc#1\",\"4767\":\"v-837ae2dc#1/0\",\"4768\":\"v-837ae2dc#1/1\",\"4769\":\"v-837ae2dc#2\",\"4770\":\"v-837ae2dc#2/0\",\"4771\":\"v-837ae2dc#2/1\",\"4772\":\"v-837ae2dc#3\",\"4773\":\"v-837ae2dc#3/0\",\"4774\":\"v-837ae2dc#3/1\",\"4775\":\"v-837ae2dc#3/2\",\"4776\":\"v-837ae2dc#4\",\"4777\":\"v-837ae2dc#4/0\",\"4778\":\"v-837ae2dc#5\",\"4779\":\"v-837ae2dc#5/1\",\"4780\":\"v-837ae2dc#5/2\",\"4781\":\"v-837ae2dc#6\",\"4782\":\"v-837ae2dc#6/0\",\"4783\":\"v-837ae2dc#6/1\",\"4784\":\"v-837ae2dc#7\",\"4785\":\"v-837ae2dc#7/0\",\"4786\":\"v-837ae2dc#7/1\",\"4787\":\"v-837ae2dc#8\",\"4788\":\"v-837ae2dc#8/0\",\"4789\":\"v-837ae2dc#9\",\"4790\":\"v-837ae2dc#10\",\"4791\":\"v-837ae2dc#10/0\",\"4792\":\"v-837ae2dc#10/1\",\"4793\":\"v-837ae2dc#11\",\"4794\":\"v-837ae2dc#11/0\",\"4795\":\"v-837ae2dc#11/1\",\"4796\":\"v-837ae2dc#12\",\"4797\":\"v-837ae2dc#12/0\",\"4798\":\"v-837ae2dc#12/1\",\"4799\":\"v-837ae2dc#12/2\",\"4800\":\"v-837ae2dc#12/3\",\"4801\":\"v-837ae2dc#13\",\"4802\":\"v-837ae2dc#13/4\",\"4803\":\"v-837ae2dc#13/5\",\"4804\":\"v-837ae2dc#14\",\"4805\":\"v-837ae2dc#15\",\"4806\":\"v-837ae2dc#15/6\",\"4807\":\"v-837ae2dc#15/7\",\"4808\":\"v-837ae2dc#15/8\",\"4809\":\"v-837ae2dc#15/9\",\"4810\":\"v-837ae2dc#15/10\",\"4811\":\"v-837ae2dc#15/11\",\"4812\":\"v-837ae2dc#16\",\"4813\":\"v-837ae2dc#16/0\",\"4814\":\"v-837ae2dc#17\",\"4815\":\"v-837ae2dc#17/1\",\"4816\":\"v-0eaf02d8\",\"4817\":\"v-0eaf02d8#1\",\"4818\":\"v-0eaf02d8#2\",\"4819\":\"v-0eaf02d8#2/0\",\"4820\":\"v-0eaf02d8#2/1\",\"4821\":\"v-0eaf02d8#2/2\",\"4822\":\"v-0eaf02d8#2/3\",\"4823\":\"v-0eaf02d8#2/4\",\"4824\":\"v-0eaf02d8#2/5\",\"4825\":\"v-0eaf02d8#2/6\",\"4826\":\"v-0eaf02d8#3\",\"4827\":\"v-0eaf02d8#3/0\",\"4828\":\"v-0eaf02d8#4\",\"4829\":\"v-0eaf02d8#4/0\",\"4830\":\"v-0eaf02d8#4/1\",\"4831\":\"v-0eaf02d8#5\",\"4832\":\"v-0eaf02d8#5/0\",\"4833\":\"v-0eaf02d8#5/1\",\"4834\":\"v-0eaf02d8#5/2\",\"4835\":\"v-0eaf02d8#5/3\",\"4836\":\"v-0eaf02d8#6\",\"4837\":\"v-0eaf02d8#6/0\",\"4838\":\"v-0eaf02d8#6/1\",\"4839\":\"v-0eaf02d8#6/2\",\"4840\":\"v-0eaf02d8#6/3\",\"4841\":\"v-0eaf02d8#7\",\"4842\":\"v-0eaf02d8#7/0\",\"4843\":\"v-0eaf02d8#7/1\",\"4844\":\"v-0eaf02d8#8\",\"4845\":\"v-0eaf02d8#8/2\",\"4846\":\"v-0eaf02d8#9\",\"4847\":\"v-0eaf02d8#10\",\"4848\":\"v-0eaf02d8#10/3\",\"4849\":\"v-0eaf02d8#10/4\",\"4850\":\"v-0eaf02d8#11\",\"4851\":\"v-0eaf02d8#11/0\",\"4852\":\"v-0eaf02d8#11/1\",\"4853\":\"v-0eaf02d8#11/2\",\"4854\":\"v-0eaf02d8#11/3\",\"4855\":\"v-0eaf02d8#12\",\"4856\":\"v-0eaf02d8#12/0\",\"4857\":\"v-0eaf02d8#12/1\",\"4858\":\"v-0eaf02d8#12/2\",\"4859\":\"v-0eaf02d8#12/3\",\"4860\":\"v-0eaf02d8#12/4\",\"4861\":\"v-0eaf02d8#13\",\"4862\":\"v-0eaf02d8#13/0\",\"4863\":\"v-0eaf02d8#13/1\",\"4864\":\"v-0eaf02d8#13/2\",\"4865\":\"v-0eaf02d8#13/3\",\"4866\":\"v-0eaf02d8#14\",\"4867\":\"v-0eaf02d8#14/0\",\"4868\":\"v-0eaf02d8#14/1\",\"4869\":\"v-0eaf02d8#15\",\"4870\":\"v-0eaf02d8#16\",\"4871\":\"v-0eaf02d8#16/0\",\"4872\":\"v-0eaf02d8#16/1\",\"4873\":\"v-0eaf02d8#17\",\"4874\":\"v-0eaf02d8#17/2\",\"4875\":\"v-220e4b10\",\"4876\":\"v-220e4b10#1\",\"4877\":\"v-220e4b10#2\",\"4878\":\"v-220e4b10#2/0\",\"4879\":\"v-220e4b10#3\",\"4880\":\"v-220e4b10#3/0\",\"4881\":\"v-220e4b10#3/1\",\"4882\":\"v-220e4b10#3/2\",\"4883\":\"v-220e4b10#3/3\",\"4884\":\"v-220e4b10#4\",\"4885\":\"v-220e4b10#4/0\",\"4886\":\"v-220e4b10#4/1\",\"4887\":\"v-220e4b10#4/2\",\"4888\":\"v-220e4b10#5\",\"4889\":\"v-220e4b10#5/0\",\"4890\":\"v-220e4b10#5/1\",\"4891\":\"v-220e4b10#5/2\",\"4892\":\"v-220e4b10#5/3\",\"4893\":\"v-220e4b10#5/4\",\"4894\":\"v-220e4b10#5/5\",\"4895\":\"v-220e4b10#5/6\",\"4896\":\"v-220e4b10#5/7\",\"4897\":\"v-220e4b10#5/8\",\"4898\":\"v-220e4b10#6\",\"4899\":\"v-220e4b10#6/0\",\"4900\":\"v-220e4b10#6/1\",\"4901\":\"v-220e4b10#6/2\",\"4902\":\"v-220e4b10#6/3\",\"4903\":\"v-220e4b10#6/4\",\"4904\":\"v-220e4b10#6/5\",\"4905\":\"v-220e4b10#6/6\",\"4906\":\"v-220e4b10#6/7\",\"4907\":\"v-220e4b10#6/8\",\"4908\":\"v-220e4b10#6/9\",\"4909\":\"v-220e4b10#6/10\",\"4910\":\"v-220e4b10#6/11\",\"4911\":\"v-220e4b10#6/12\",\"4912\":\"v-220e4b10#6/13\",\"4913\":\"v-220e4b10#6/14\",\"4914\":\"v-220e4b10#7\",\"4915\":\"v-220e4b10#8\",\"4916\":\"v-220e4b10#8/0\",\"4917\":\"v-220e4b10#9\",\"4918\":\"v-220e4b10#9/1\",\"4919\":\"v-220e4b10#10\",\"4920\":\"v-220e4b10#11\",\"4921\":\"v-220e4b10#11/2\",\"4922\":\"v-220e4b10#11/3\",\"4923\":\"v-220e4b10#11/4\",\"4924\":\"v-220e4b10#12\",\"4925\":\"v-220e4b10#12/0\",\"4926\":\"v-220e4b10#13\",\"4927\":\"v-220e4b10#13/0\",\"4928\":\"v-220e4b10#13/1\",\"4929\":\"v-220e4b10#14\",\"4930\":\"v-220e4b10#14/0\",\"4931\":\"v-220e4b10#14/1\",\"4932\":\"v-220e4b10#14/2\",\"4933\":\"v-220e4b10#14/3\",\"4934\":\"v-220e4b10#15\",\"4935\":\"v-220e4b10#15/0\",\"4936\":\"v-220e4b10#15/1\",\"4937\":\"v-220e4b10#15/2\",\"4938\":\"v-220e4b10#15/3\",\"4939\":\"v-220e4b10#16\",\"4940\":\"v-220e4b10#16/0\",\"4941\":\"v-220e4b10#16/1\",\"4942\":\"v-220e4b10#16/2\",\"4943\":\"v-220e4b10#16/3\",\"4944\":\"v-220e4b10#17\",\"4945\":\"v-220e4b10#18\",\"4946\":\"v-220e4b10#18/4\",\"4947\":\"v-220e4b10#18/5\",\"4948\":\"v-220e4b10#18/6\",\"4949\":\"v-220e4b10#18/7\",\"4950\":\"v-220e4b10#18/8\",\"4951\":\"v-220e4b10#18/9\",\"4952\":\"v-220e4b10#18/10\",\"4953\":\"v-220e4b10#19\",\"4954\":\"v-220e4b10#20\",\"4955\":\"v-220e4b10#20/0\",\"4956\":\"v-220e4b10#20/1\",\"4957\":\"v-220e4b10#20/2\",\"4958\":\"v-220e4b10#21\",\"4959\":\"v-220e4b10#21/3\",\"4960\":\"v-220e4b10#21/4\",\"4961\":\"v-220e4b10#21/5\",\"4962\":\"v-220e4b10#22\",\"4963\":\"v-220e4b10#22/6\",\"4964\":\"v-220e4b10#22/7\",\"4965\":\"v-220e4b10#22/8\",\"4966\":\"v-220e4b10#22/9\",\"4967\":\"v-220e4b10#22/10\",\"4968\":\"v-220e4b10#22/11\",\"4969\":\"v-220e4b10#23\",\"4970\":\"v-220e4b10#24\",\"4971\":\"v-220e4b10#24/12\",\"4972\":\"v-220e4b10#24/13\",\"4973\":\"v-220e4b10#24/14\",\"4974\":\"v-220e4b10#24/15\",\"4975\":\"v-220e4b10#24/16\",\"4976\":\"v-220e4b10#25\",\"4977\":\"v-220e4b10#25/0\",\"4978\":\"v-220e4b10#25/1\",\"4979\":\"v-220e4b10#25/2\",\"4980\":\"v-220e4b10#26\",\"4981\":\"v-220e4b10#26/3\",\"4982\":\"v-220e4b10#27\",\"4983\":\"v-220e4b10#27/0\",\"4984\":\"v-220e4b10#27/1\",\"4985\":\"v-220e4b10#27/2\",\"4986\":\"v-220e4b10#28\",\"4987\":\"v-220e4b10#28/0\",\"4988\":\"v-220e4b10#28/1\",\"4989\":\"v-220e4b10#28/2\",\"4990\":\"v-220e4b10#29\",\"4991\":\"v-220e4b10#29/3\",\"4992\":\"v-220e4b10#29/4\",\"4993\":\"v-220e4b10#29/5\",\"4994\":\"v-220e4b10#29/6\",\"4995\":\"v-220e4b10#29/7\",\"4996\":\"v-220e4b10#29/8\",\"4997\":\"v-220e4b10#30\",\"4998\":\"v-220e4b10#30/0\",\"4999\":\"v-220e4b10#31\",\"5000\":\"v-220e4b10#31/0\",\"5001\":\"v-220e4b10#31/1\",\"5002\":\"v-220e4b10#31/2\",\"5003\":\"v-220e4b10#32\",\"5004\":\"v-220e4b10#32/0\",\"5005\":\"v-220e4b10#32/1\",\"5006\":\"v-220e4b10#32/2\",\"5007\":\"v-220e4b10#33\",\"5008\":\"v-220e4b10#33/0\",\"5009\":\"v-220e4b10#34\",\"5010\":\"v-220e4b10#34/0\",\"5011\":\"v-220e4b10#34/1\",\"5012\":\"v-220e4b10#35\",\"5013\":\"v-220e4b10#35/2\",\"5014\":\"v-220e4b10#35/3\",\"5015\":\"v-220e4b10#35/4\",\"5016\":\"v-220e4b10#36\",\"5017\":\"v-220e4b10#36/5\",\"5018\":\"v-220e4b10#36/6\",\"5019\":\"v-220e4b10#36/7\",\"5020\":\"v-220e4b10#36/8\",\"5021\":\"v-220e4b10#36/9\",\"5022\":\"v-220e4b10#36/10\",\"5023\":\"v-220e4b10#37\",\"5024\":\"v-220e4b10#37/11\",\"5025\":\"v-220e4b10#37/12\",\"5026\":\"v-220e4b10#37/13\",\"5027\":\"v-220e4b10#37/14\",\"5028\":\"v-220e4b10#38\",\"5029\":\"v-220e4b10#38/15\",\"5030\":\"v-220e4b10#38/16\",\"5031\":\"v-220e4b10#39\",\"5032\":\"v-220e4b10#39/17\",\"5033\":\"v-220e4b10#39/18\",\"5034\":\"v-220e4b10#40\",\"5035\":\"v-220e4b10#41\",\"5036\":\"v-220e4b10#41/19\",\"5037\":\"v-220e4b10#41/20\",\"5038\":\"v-220e4b10#42\",\"5039\":\"v-220e4b10#42/21\",\"5040\":\"v-220e4b10#42/22\",\"5041\":\"v-220e4b10#43\",\"5042\":\"v-220e4b10#43/23\",\"5043\":\"v-220e4b10#43/24\",\"5044\":\"v-220e4b10#44\",\"5045\":\"v-220e4b10#44/25\",\"5046\":\"v-220e4b10#45\",\"5047\":\"v-220e4b10#45/0\",\"5048\":\"v-220e4b10#45/1\",\"5049\":\"v-220e4b10#46\",\"5050\":\"v-220e4b10#46/2\",\"5051\":\"v-220e4b10#46/3\",\"5052\":\"v-220e4b10#46/4\",\"5053\":\"v-220e4b10#46/5\",\"5054\":\"v-220e4b10#46/6\",\"5055\":\"v-220e4b10#46/7\",\"5056\":\"v-220e4b10#46/8\",\"5057\":\"v-220e4b10#47\",\"5058\":\"v-220e4b10#47/0\",\"5059\":\"v-220e4b10#48\",\"5060\":\"v-220e4b10#48/0\",\"5061\":\"v-672e2b64\",\"5062\":\"v-672e2b64#1\",\"5063\":\"v-672e2b64#2\",\"5064\":\"v-672e2b64#2/0\",\"5065\":\"v-672e2b64#2/1\",\"5066\":\"v-672e2b64#2/2\",\"5067\":\"v-672e2b64#2/3\",\"5068\":\"v-672e2b64#3\",\"5069\":\"v-672e2b64#3/0\",\"5070\":\"v-672e2b64#3/1\",\"5071\":\"v-672e2b64#3/2\",\"5072\":\"v-672e2b64#3/3\",\"5073\":\"v-672e2b64#4\",\"5074\":\"v-672e2b64#4/0\",\"5075\":\"v-672e2b64#5\",\"5076\":\"v-672e2b64#5/0\",\"5077\":\"v-672e2b64#6\",\"5078\":\"v-672e2b64#6/0\",\"5079\":\"v-672e2b64#6/1\",\"5080\":\"v-672e2b64#6/2\",\"5081\":\"v-672e2b64#6/3\",\"5082\":\"v-672e2b64#7\",\"5083\":\"v-672e2b64#7/0\",\"5084\":\"v-672e2b64#7/1\",\"5085\":\"v-672e2b64#7/2\",\"5086\":\"v-672e2b64#7/3\",\"5087\":\"v-672e2b64#7/4\",\"5088\":\"v-672e2b64#7/5\",\"5089\":\"v-672e2b64#8\",\"5090\":\"v-672e2b64#8/0\",\"5091\":\"v-672e2b64#8/1\",\"5092\":\"v-672e2b64#8/2\",\"5093\":\"v-672e2b64#9\",\"5094\":\"v-672e2b64#9/0\",\"5095\":\"v-672e2b64#9/1\",\"5096\":\"v-672e2b64#10\",\"5097\":\"v-672e2b64#11\",\"5098\":\"v-672e2b64#11/0\",\"5099\":\"v-672e2b64#11/1\",\"5100\":\"v-672e2b64#12\",\"5101\":\"v-672e2b64#12/0\",\"5102\":\"v-672e2b64#12/1\",\"5103\":\"v-672e2b64#12/2\",\"5104\":\"v-672e2b64#12/3\",\"5105\":\"v-672e2b64#13\",\"5106\":\"v-672e2b64#13/0\",\"5107\":\"v-672e2b64#13/1\",\"5108\":\"v-672e2b64#13/2\",\"5109\":\"v-672e2b64#13/3\",\"5110\":\"v-672e2b64#14\",\"5111\":\"v-672e2b64#15\",\"5112\":\"v-672e2b64#15/0\",\"5113\":\"v-672e2b64#15/1\",\"5114\":\"v-672e2b64#16\",\"5115\":\"v-672e2b64#17\",\"5116\":\"v-672e2b64#17/0\",\"5117\":\"v-672e2b64#18\",\"5118\":\"v-672e2b64#18/0\",\"5119\":\"v-672e2b64#19\",\"5120\":\"v-672e2b64#19/0\",\"5121\":\"v-672e2b64#19/1\",\"5122\":\"v-672e2b64#20\",\"5123\":\"v-672e2b64#20/0\",\"5124\":\"v-672e2b64#20/1\",\"5125\":\"v-672e2b64#21\",\"5126\":\"v-672e2b64#21/0\",\"5127\":\"v-672e2b64#22\",\"5128\":\"v-672e2b64#22/0\",\"5129\":\"v-672e2b64#22/1\",\"5130\":\"v-672e2b64#23\",\"5131\":\"v-672e2b64#23/0\",\"5132\":\"v-672e2b64#23/1\",\"5133\":\"v-672e2b64#24\",\"5134\":\"v-672e2b64#24/0\",\"5135\":\"v-672e2b64#25\",\"5136\":\"v-672e2b64#25/0\",\"5137\":\"v-672e2b64#25/1\",\"5138\":\"v-b90389ae\",\"5139\":\"v-b90389ae#1\",\"5140\":\"v-b90389ae#2\",\"5141\":\"v-b90389ae#2/0\",\"5142\":\"v-b90389ae#3\",\"5143\":\"v-b90389ae#3/0\",\"5144\":\"v-b90389ae#3/1\",\"5145\":\"v-b90389ae#3/2\",\"5146\":\"v-b90389ae#3/3\",\"5147\":\"v-b90389ae#3/4\",\"5148\":\"v-b90389ae#3/5\",\"5149\":\"v-b90389ae#4\",\"5150\":\"v-b90389ae#4/0\",\"5151\":\"v-b90389ae#4/1\",\"5152\":\"v-b90389ae#4/2\",\"5153\":\"v-b90389ae#4/3\",\"5154\":\"v-b90389ae#4/4\",\"5155\":\"v-b90389ae#5\",\"5156\":\"v-b90389ae#5/0\",\"5157\":\"v-b90389ae#6\",\"5158\":\"v-b90389ae#6/0\",\"5159\":\"v-b90389ae#6/1\",\"5160\":\"v-b90389ae#6/2\",\"5161\":\"v-b90389ae#7\",\"5162\":\"v-b90389ae#8\",\"5163\":\"v-b90389ae#8/0\",\"5164\":\"v-b90389ae#8/1\",\"5165\":\"v-b90389ae#9\",\"5166\":\"v-b90389ae#9/0\",\"5167\":\"v-b90389ae#9/1\",\"5168\":\"v-b90389ae#9/2\",\"5169\":\"v-b90389ae#9/3\",\"5170\":\"v-b90389ae#9/4\",\"5171\":\"v-b90389ae#10\",\"5172\":\"v-b90389ae#10/0\",\"5173\":\"v-b90389ae#10/1\",\"5174\":\"v-b90389ae#11\",\"5175\":\"v-b90389ae#11/0\",\"5176\":\"v-b90389ae#11/1\",\"5177\":\"v-b90389ae#12\",\"5178\":\"v-b90389ae#12/0\",\"5179\":\"v-b90389ae#12/1\",\"5180\":\"v-b90389ae#12/2\",\"5181\":\"v-b90389ae#12/3\",\"5182\":\"v-b90389ae#12/4\",\"5183\":\"v-b90389ae#13\",\"5184\":\"v-b90389ae#13/0\",\"5185\":\"v-b90389ae#13/1\",\"5186\":\"v-b90389ae#14\",\"5187\":\"v-b90389ae#14/2\",\"5188\":\"v-b90389ae#14/3\",\"5189\":\"v-b90389ae#14/4\",\"5190\":\"v-b90389ae#15\",\"5191\":\"v-b90389ae#15/0\",\"5192\":\"v-b90389ae#15/1\",\"5193\":\"v-b90389ae#15/2\",\"5194\":\"v-b90389ae#16\",\"5195\":\"v-b90389ae#17\",\"5196\":\"v-b90389ae#17/0\",\"5197\":\"v-b90389ae#17/1\",\"5198\":\"v-b90389ae#18\",\"5199\":\"v-b90389ae#18/0\",\"5200\":\"v-b90389ae#18/1\",\"5201\":\"v-b90389ae#18/2\",\"5202\":\"v-b90389ae#19\",\"5203\":\"v-b90389ae#20\",\"5204\":\"v-b90389ae#20/0\",\"5205\":\"v-b90389ae#20/1\",\"5206\":\"v-b90389ae#20/2\",\"5207\":\"v-b90389ae#20/3\",\"5208\":\"v-b90389ae#20/4\",\"5209\":\"v-b90389ae#20/5\",\"5210\":\"v-b90389ae#20/6\",\"5211\":\"v-b90389ae#20/7\",\"5212\":\"v-b90389ae#20/8\",\"5213\":\"v-b90389ae#20/9\",\"5214\":\"v-b90389ae#20/10\",\"5215\":\"v-b90389ae#20/11\",\"5216\":\"v-b90389ae#21\",\"5217\":\"v-b90389ae#21/0\",\"5218\":\"v-b90389ae#21/1\",\"5219\":\"v-b90389ae#21/2\",\"5220\":\"v-b90389ae#22\",\"5221\":\"v-b90389ae#22/3\",\"5222\":\"v-b90389ae#22/4\",\"5223\":\"v-b90389ae#22/5\",\"5224\":\"v-b90389ae#22/6\",\"5225\":\"v-b90389ae#22/7\",\"5226\":\"v-b90389ae#22/8\",\"5227\":\"v-b90389ae#22/9\",\"5228\":\"v-b90389ae#22/10\",\"5229\":\"v-b90389ae#22/11\",\"5230\":\"v-b90389ae#22/12\",\"5231\":\"v-b90389ae#22/13\",\"5232\":\"v-b90389ae#23\",\"5233\":\"v-b90389ae#24\",\"5234\":\"v-b90389ae#25\",\"5235\":\"v-b90389ae#25/0\",\"5236\":\"v-b90389ae#26\",\"5237\":\"v-b90389ae#26/0\",\"5238\":\"v-b90389ae#27\",\"5239\":\"v-b90389ae#27/0\",\"5240\":\"v-b90389ae#28\",\"5241\":\"v-b90389ae#28/0\",\"5242\":\"v-b90389ae#28/1\",\"5243\":\"v-b90389ae#28/2\",\"5244\":\"v-b90389ae#28/3\",\"5245\":\"v-b90389ae#28/4\",\"5246\":\"v-b90389ae#28/5\",\"5247\":\"v-b90389ae#28/6\",\"5248\":\"v-b90389ae#29\",\"5249\":\"v-b90389ae#29/0\",\"5250\":\"v-b90389ae#29/1\",\"5251\":\"v-b90389ae#30\",\"5252\":\"v-b90389ae#30/0\",\"5253\":\"v-b90389ae#30/1\",\"5254\":\"v-b90389ae#31\",\"5255\":\"v-b90389ae#31/2\",\"5256\":\"v-b90389ae#32\",\"5257\":\"v-b90389ae#32/0\",\"5258\":\"v-b90389ae#32/1\",\"5259\":\"v-b90389ae#32/2\",\"5260\":\"v-b90389ae#32/3\",\"5261\":\"v-b90389ae#32/4\",\"5262\":\"v-b90389ae#33\",\"5263\":\"v-b90389ae#33/0\",\"5264\":\"v-b90389ae#33/1\",\"5265\":\"v-b90389ae#33/2\",\"5266\":\"v-b90389ae#34\",\"5267\":\"v-b90389ae#34/0\",\"5268\":\"v-b90389ae#34/1\",\"5269\":\"v-b90389ae#35\",\"5270\":\"v-b90389ae#35/0\",\"5271\":\"v-b90389ae#36\",\"5272\":\"v-b90389ae#36/0\",\"5273\":\"v-b90389ae#37\",\"5274\":\"v-b90389ae#38\",\"5275\":\"v-b90389ae#38/0\",\"5276\":\"v-b90389ae#38/1\",\"5277\":\"v-b90389ae#38/2\",\"5278\":\"v-b90389ae#39\",\"5279\":\"v-b90389ae#39/0\",\"5280\":\"v-b90389ae#39/1\",\"5281\":\"v-b90389ae#40\",\"5282\":\"v-b90389ae#40/0\",\"5283\":\"v-b90389ae#40/1\",\"5284\":\"v-6e057354\",\"5285\":\"v-6e057354#0/0\",\"5286\":\"v-6e057354#1\",\"5287\":\"v-6e057354#1/0\",\"5288\":\"v-6e057354#1/1\",\"5289\":\"v-6e057354#1/2\",\"5290\":\"v-6e057354#1/3\",\"5291\":\"v-6e057354#1/4\",\"5292\":\"v-6e057354#1/5\",\"5293\":\"v-6e057354#2\",\"5294\":\"v-6e057354#2/0\",\"5295\":\"v-478d9fb6\",\"5296\":\"v-478d9fb6#1\",\"5297\":\"v-478d9fb6#2\",\"5298\":\"v-478d9fb6#2/0\",\"5299\":\"v-478d9fb6#3\",\"5300\":\"v-478d9fb6#3/0\",\"5301\":\"v-478d9fb6#4\",\"5302\":\"v-478d9fb6#4/0\",\"5303\":\"v-478d9fb6#4/1\",\"5304\":\"v-478d9fb6#4/2\",\"5305\":\"v-478d9fb6#4/3\",\"5306\":\"v-478d9fb6#4/4\",\"5307\":\"v-478d9fb6#5\",\"5308\":\"v-478d9fb6#5/0\",\"5309\":\"v-478d9fb6#6\",\"5310\":\"v-478d9fb6#6/0\",\"5311\":\"v-478d9fb6#7\",\"5312\":\"v-478d9fb6#7/1\",\"5313\":\"v-478d9fb6#8\",\"5314\":\"v-478d9fb6#8/0\",\"5315\":\"v-478d9fb6#8/1\",\"5316\":\"v-478d9fb6#8/2\",\"5317\":\"v-478d9fb6#8/3\",\"5318\":\"v-478d9fb6#8/4\",\"5319\":\"v-478d9fb6#8/5\",\"5320\":\"v-478d9fb6#8/6\",\"5321\":\"v-478d9fb6#9\",\"5322\":\"v-478d9fb6#9/0\",\"5323\":\"v-478d9fb6#10\",\"5324\":\"v-478d9fb6#10/1\",\"5325\":\"v-478d9fb6#11\",\"5326\":\"v-478d9fb6#11/0\",\"5327\":\"v-478d9fb6#11/1\",\"5328\":\"v-478d9fb6#12\",\"5329\":\"v-478d9fb6#12/0\",\"5330\":\"v-478d9fb6#12/1\",\"5331\":\"v-478d9fb6#12/2\",\"5332\":\"v-478d9fb6#12/3\",\"5333\":\"v-478d9fb6#13\",\"5334\":\"v-478d9fb6#14\",\"5335\":\"v-478d9fb6#14/4\",\"5336\":\"v-478d9fb6#14/5\",\"5337\":\"v-478d9fb6#14/6\",\"5338\":\"v-478d9fb6#14/7\",\"5339\":\"v-478d9fb6#15\",\"5340\":\"v-478d9fb6#15/8\",\"5341\":\"v-478d9fb6#16\",\"5342\":\"v-478d9fb6#16/0\",\"5343\":\"v-478d9fb6#16/1\",\"5344\":\"v-478d9fb6#17\",\"5345\":\"v-478d9fb6#17/0\",\"5346\":\"v-478d9fb6#18\",\"5347\":\"v-478d9fb6#18/1\",\"5348\":\"v-478d9fb6#18/2\",\"5349\":\"v-478d9fb6#18/3\",\"5350\":\"v-478d9fb6#18/4\",\"5351\":\"v-478d9fb6#19\",\"5352\":\"v-478d9fb6#19/5\",\"5353\":\"v-478d9fb6#19/6\",\"5354\":\"v-478d9fb6#20\",\"5355\":\"v-478d9fb6#20/0\",\"5356\":\"v-478d9fb6#20/1\",\"5357\":\"v-478d9fb6#21\",\"5358\":\"v-478d9fb6#21/0\",\"5359\":\"v-478d9fb6#21/1\",\"5360\":\"v-478d9fb6#22\",\"5361\":\"v-478d9fb6#22/0\",\"5362\":\"v-478d9fb6#22/1\",\"5363\":\"v-478d9fb6#22/2\",\"5364\":\"v-478d9fb6#23\",\"5365\":\"v-478d9fb6#23/0\",\"5366\":\"v-478d9fb6#23/1\",\"5367\":\"v-478d9fb6#23/2\",\"5368\":\"v-478d9fb6#23/3\",\"5369\":\"v-478d9fb6#24\",\"5370\":\"v-478d9fb6#24/0\",\"5371\":\"v-478d9fb6#24/1\",\"5372\":\"v-478d9fb6#24/2\",\"5373\":\"v-478d9fb6#25\",\"5374\":\"v-478d9fb6#25/0\",\"5375\":\"v-478d9fb6#26\",\"5376\":\"v-478d9fb6#26/0\",\"5377\":\"v-478d9fb6#27\",\"5378\":\"v-478d9fb6#27/0\",\"5379\":\"v-478d9fb6#27/1\",\"5380\":\"v-478d9fb6#28\",\"5381\":\"v-478d9fb6#28/0\",\"5382\":\"v-478d9fb6#29\",\"5383\":\"v-478d9fb6#29/0\",\"5384\":\"v-478d9fb6#29/1\",\"5385\":\"v-478d9fb6#30\",\"5386\":\"v-478d9fb6#30/2\",\"5387\":\"v-478d9fb6#30/3\",\"5388\":\"v-478d9fb6#30/4\",\"5389\":\"v-478d9fb6#30/5\",\"5390\":\"v-478d9fb6#31\",\"5391\":\"v-478d9fb6#31/6\",\"5392\":\"v-478d9fb6#32\",\"5393\":\"v-478d9fb6#32/7\",\"5394\":\"v-478d9fb6#32/8\",\"5395\":\"v-478d9fb6#33\",\"5396\":\"v-478d9fb6#33/9\",\"5397\":\"v-478d9fb6#34\",\"5398\":\"v-478d9fb6#34/10\",\"5399\":\"v-478d9fb6#34/11\",\"5400\":\"v-478d9fb6#34/12\",\"5401\":\"v-478d9fb6#34/13\",\"5402\":\"v-478d9fb6#35\",\"5403\":\"v-478d9fb6#35/0\",\"5404\":\"v-5bc349e0\",\"5405\":\"v-5bc349e0#0/0\",\"5406\":\"v-5bc349e0#1\",\"5407\":\"v-5bc349e0#1/0\",\"5408\":\"v-5bc349e0#1/1\",\"5409\":\"v-5bc349e0#2\",\"5410\":\"v-5bc349e0#2/0\",\"5411\":\"v-5bc349e0#2/1\",\"5412\":\"v-5bc349e0#2/2\",\"5413\":\"v-5bc349e0#2/3\",\"5414\":\"v-5bc349e0#2/4\",\"5415\":\"v-5bc349e0#3\",\"5416\":\"v-5bc349e0#3/0\",\"5417\":\"v-5bc349e0#4\",\"5418\":\"v-5bc349e0#5\",\"5419\":\"v-5bc349e0#5/0\",\"5420\":\"v-5bc349e0#6\",\"5421\":\"v-5bc349e0#6/0\",\"5422\":\"v-5bc349e0#6/1\",\"5423\":\"v-5bc349e0#7\",\"5424\":\"v-5bc349e0#7/0\",\"5425\":\"v-5bc349e0#8\",\"5426\":\"v-5bc349e0#8/0\",\"5427\":\"v-5bc349e0#9\",\"5428\":\"v-5bc349e0#9/1\",\"5429\":\"v-5bc349e0#9/2\",\"5430\":\"v-5bc349e0#9/3\",\"5431\":\"v-5bc349e0#10\",\"5432\":\"v-5bc349e0#10/0\",\"5433\":\"v-ebe7d3e8\",\"5434\":\"v-ebe7d3e8#0/0\",\"5435\":\"v-ebe7d3e8#0/1\",\"5436\":\"v-ebe7d3e8#1\",\"5437\":\"v-ebe7d3e8#1/0\",\"5438\":\"v-ebe7d3e8#1/1\",\"5439\":\"v-ebe7d3e8#1/2\",\"5440\":\"v-ebe7d3e8#1/3\",\"5441\":\"v-ebe7d3e8#1/4\",\"5442\":\"v-ebe7d3e8#2\",\"5443\":\"v-ebe7d3e8#2/0\",\"5444\":\"v-ebe7d3e8#2/1\",\"5445\":\"v-ebe7d3e8#2/2\",\"5446\":\"v-ebe7d3e8#2/3\",\"5447\":\"v-ebe7d3e8#2/4\",\"5448\":\"v-ebe7d3e8#3\",\"5449\":\"v-ebe7d3e8#3/0\",\"5450\":\"v-ebe7d3e8#3/1\",\"5451\":\"v-ebe7d3e8#3/2\",\"5452\":\"v-ebe7d3e8#4\",\"5453\":\"v-ebe7d3e8#4/0\",\"5454\":\"v-ebe7d3e8#4/1\",\"5455\":\"v-ebe7d3e8#4/2\",\"5456\":\"v-ebe7d3e8#5\",\"5457\":\"v-ebe7d3e8#5/0\",\"5458\":\"v-ebe7d3e8#5/1\",\"5459\":\"v-ebe7d3e8#5/2\",\"5460\":\"v-ebe7d3e8#5/3\",\"5461\":\"v-ebe7d3e8#5/4\",\"5462\":\"v-ebe7d3e8#6\",\"5463\":\"v-ebe7d3e8#6/0\",\"5464\":\"v-ebe7d3e8#6/1\",\"5465\":\"v-559c43b7\",\"5466\":\"v-559c43b7#1\",\"5467\":\"v-559c43b7#1/0\",\"5468\":\"v-559c43b7#2\",\"5469\":\"v-559c43b7#2/0\",\"5470\":\"v-559c43b7#2/1\",\"5471\":\"v-559c43b7#2/2\",\"5472\":\"v-559c43b7#2/3\",\"5473\":\"v-559c43b7#3\",\"5474\":\"v-559c43b7#3/0\",\"5475\":\"v-559c43b7#3/1\",\"5476\":\"v-559c43b7#3/2\",\"5477\":\"v-559c43b7#3/3\",\"5478\":\"v-559c43b7#4\",\"5479\":\"v-559c43b7#4/0\",\"5480\":\"v-559c43b7#4/1\",\"5481\":\"v-559c43b7#4/2\",\"5482\":\"v-559c43b7#4/3\",\"5483\":\"v-559c43b7#4/4\",\"5484\":\"v-559c43b7#4/5\",\"5485\":\"v-559c43b7#5\",\"5486\":\"v-559c43b7#5/0\",\"5487\":\"v-559c43b7#6\",\"5488\":\"v-559c43b7#7\",\"5489\":\"v-559c43b7#7/1\",\"5490\":\"v-559c43b7#7/2\",\"5491\":\"v-559c43b7#7/3\",\"5492\":\"v-559c43b7#8\",\"5493\":\"v-559c43b7#8/0\",\"5494\":\"v-559c43b7#8/1\",\"5495\":\"v-559c43b7#8/2\",\"5496\":\"v-559c43b7#8/3\",\"5497\":\"v-559c43b7#8/4\",\"5498\":\"v-559c43b7#8/5\",\"5499\":\"v-559c43b7#8/6\",\"5500\":\"v-559c43b7#9\",\"5501\":\"v-559c43b7#9/0\",\"5502\":\"v-559c43b7#9/1\",\"5503\":\"v-559c43b7#9/2\",\"5504\":\"v-559c43b7#9/3\",\"5505\":\"v-559c43b7#10\",\"5506\":\"v-559c43b7#10/0\",\"5507\":\"v-559c43b7#10/1\",\"5508\":\"v-559c43b7#10/2\",\"5509\":\"v-559c43b7#10/3\",\"5510\":\"v-559c43b7#10/4\",\"5511\":\"v-559c43b7#11\",\"5512\":\"v-559c43b7#11/0\",\"5513\":\"v-559c43b7#11/1\",\"5514\":\"v-559c43b7#11/2\",\"5515\":\"v-559c43b7#11/3\",\"5516\":\"v-559c43b7#12\",\"5517\":\"v-559c43b7#12/0\",\"5518\":\"v-0010529e\",\"5519\":\"v-0010529e#1\",\"5520\":\"v-0010529e#2\",\"5521\":\"v-0010529e#2/0\",\"5522\":\"v-0010529e#2/1\",\"5523\":\"v-0010529e#3\",\"5524\":\"v-0010529e#3/0\",\"5525\":\"v-0010529e#3/1\",\"5526\":\"v-0010529e#3/2\",\"5527\":\"v-0010529e#4\",\"5528\":\"v-0010529e#4/0\",\"5529\":\"v-0010529e#4/1\",\"5530\":\"v-0010529e#4/2\",\"5531\":\"v-0010529e#4/3\",\"5532\":\"v-0010529e#5\",\"5533\":\"v-0010529e#5/0\",\"5534\":\"v-0010529e#5/1\",\"5535\":\"v-0010529e#5/2\",\"5536\":\"v-0010529e#5/3\",\"5537\":\"v-0010529e#6\",\"5538\":\"v-0010529e#6/0\",\"5539\":\"v-0010529e#6/1\",\"5540\":\"v-0010529e#7\",\"5541\":\"v-0010529e#8\",\"5542\":\"v-0010529e#8/0\",\"5543\":\"v-0010529e#8/1\",\"5544\":\"v-0010529e#8/2\",\"5545\":\"v-0010529e#8/3\",\"5546\":\"v-0010529e#8/4\",\"5547\":\"v-0010529e#8/5\",\"5548\":\"v-0010529e#8/6\",\"5549\":\"v-0010529e#8/7\",\"5550\":\"v-0010529e#9\",\"5551\":\"v-0010529e#9/0\",\"5552\":\"v-0010529e#10\",\"5553\":\"v-0010529e#10/0\",\"5554\":\"v-6fcb2070\",\"5555\":\"v-6fcb2070#1\",\"5556\":\"v-6fcb2070#1/0\",\"5557\":\"v-6fcb2070#1/1\",\"5558\":\"v-6fcb2070#1/2\",\"5559\":\"v-6fcb2070#1/3\",\"5560\":\"v-6fcb2070#2\",\"5561\":\"v-6fcb2070#2/0\",\"5562\":\"v-6fcb2070#2/1\",\"5563\":\"v-6fcb2070#3\",\"5564\":\"v-6fcb2070#3/2\",\"5565\":\"v-7f757179\",\"5566\":\"v-7f757179#1\",\"5567\":\"v-7f757179#1/0\",\"5568\":\"v-7f757179#2\",\"5569\":\"v-7f757179#2/0\",\"5570\":\"v-7f757179#2/1\",\"5571\":\"v-7f757179#3\",\"5572\":\"v-7f757179#3/0\",\"5573\":\"v-7f757179#3/1\",\"5574\":\"v-7f757179#3/2\",\"5575\":\"v-7f757179#4\",\"5576\":\"v-7f757179#4/0\",\"5577\":\"v-7f757179#4/1\",\"5578\":\"v-7f757179#5\",\"5579\":\"v-7f757179#5/0\",\"5580\":\"v-7f757179#6\",\"5581\":\"v-7f757179#6/0\",\"5582\":\"v-7f757179#7\",\"5583\":\"v-7f757179#7/0\",\"5584\":\"v-7f757179#7/1\",\"5585\":\"v-7f757179#8\",\"5586\":\"v-7f757179#8/0\",\"5587\":\"v-7f757179#9\",\"5588\":\"v-7f757179#9/0\",\"5589\":\"v-7f757179#10\",\"5590\":\"v-7f757179#10/1\",\"5591\":\"v-7f757179#11\",\"5592\":\"v-7f757179#11/2\",\"5593\":\"v-7f757179#12\",\"5594\":\"v-7f757179#12/3\",\"5595\":\"v-7f757179#12/4\",\"5596\":\"v-7f757179#13\",\"5597\":\"v-7f757179#13/5\",\"5598\":\"v-7f757179#14\",\"5599\":\"v-7f757179#14/0\",\"5600\":\"v-7f757179#14/1\",\"5601\":\"v-7f757179#15\",\"5602\":\"v-7f757179#15/0\",\"5603\":\"v-7f757179#15/1\",\"5604\":\"v-7f757179#15/2\",\"5605\":\"v-7f757179#16\",\"5606\":\"v-7f757179#17\",\"5607\":\"v-7f757179#17/3\",\"5608\":\"v-7f757179#17/4\",\"5609\":\"v-7f757179#18\",\"5610\":\"v-7f757179#18/0\",\"5611\":\"v-7f757179#18/1\",\"5612\":\"v-7f757179#19\",\"5613\":\"v-7f757179#19/2\",\"5614\":\"v-7f757179#19/3\",\"5615\":\"v-7f757179#20\",\"5616\":\"v-7f757179#20/4\",\"5617\":\"v-7f757179#21\",\"5618\":\"v-7f757179#21/0\",\"5619\":\"v-7f757179#22\",\"5620\":\"v-7f757179#22/1\",\"5621\":\"v-46df710a\",\"5622\":\"v-46df710a#1\",\"5623\":\"v-46df710a#2\",\"5624\":\"v-46df710a#2/0\",\"5625\":\"v-46df710a#2/1\",\"5626\":\"v-46df710a#2/2\",\"5627\":\"v-46df710a#2/3\",\"5628\":\"v-46df710a#3\",\"5629\":\"v-46df710a#3/0\",\"5630\":\"v-46df710a#3/1\",\"5631\":\"v-46df710a#3/2\",\"5632\":\"v-46df710a#3/3\",\"5633\":\"v-46df710a#4\",\"5634\":\"v-46df710a#4/0\",\"5635\":\"v-46df710a#4/1\",\"5636\":\"v-46df710a#4/2\",\"5637\":\"v-46df710a#5\",\"5638\":\"v-46df710a#5/0\",\"5639\":\"v-46df710a#5/1\",\"5640\":\"v-46df710a#6\",\"5641\":\"v-46df710a#6/0\",\"5642\":\"v-46df710a#6/1\",\"5643\":\"v-46df710a#6/2\",\"5644\":\"v-46df710a#7\",\"5645\":\"v-46df710a#8\",\"5646\":\"v-46df710a#9\",\"5647\":\"v-46df710a#9/0\",\"5648\":\"v-46df710a#9/1\",\"5649\":\"v-46df710a#10\",\"5650\":\"v-46df710a#10/2\",\"5651\":\"v-46df710a#11\",\"5652\":\"v-46df710a#11/3\",\"5653\":\"v-46df710a#11/4\",\"5654\":\"v-46df710a#12\",\"5655\":\"v-46df710a#12/5\",\"5656\":\"v-46df710a#12/6\",\"5657\":\"v-46df710a#13\",\"5658\":\"v-46df710a#13/7\",\"5659\":\"v-46df710a#13/8\",\"5660\":\"v-46df710a#13/9\",\"5661\":\"v-46df710a#14\",\"5662\":\"v-46df710a#14/10\",\"5663\":\"v-46df710a#15\",\"5664\":\"v-46df710a#15/0\",\"5665\":\"v-46df710a#16\",\"5666\":\"v-46df710a#16/0\",\"5667\":\"v-46df710a#16/1\",\"5668\":\"v-46df710a#17\",\"5669\":\"v-46df710a#17/2\",\"5670\":\"v-46df710a#18\",\"5671\":\"v-46df710a#18/3\",\"5672\":\"v-46df710a#18/4\",\"5673\":\"v-46df710a#19\",\"5674\":\"v-46df710a#20\",\"5675\":\"v-46df710a#20/5\",\"5676\":\"v-46df710a#20/6\",\"5677\":\"v-46df710a#21\",\"5678\":\"v-46df710a#21/0\",\"5679\":\"v-46df710a#22\",\"5680\":\"v-46df710a#22/0\",\"5681\":\"v-46df710a#22/1\",\"5682\":\"v-51e29232\",\"5683\":\"v-51e29232#1\",\"5684\":\"v-51e29232#2\",\"5685\":\"v-51e29232#2/0\",\"5686\":\"v-51e29232#2/1\",\"5687\":\"v-51e29232#2/2\",\"5688\":\"v-51e29232#2/3\",\"5689\":\"v-51e29232#2/4\",\"5690\":\"v-51e29232#2/5\",\"5691\":\"v-51e29232#3\",\"5692\":\"v-51e29232#3/0\",\"5693\":\"v-51e29232#3/1\",\"5694\":\"v-51e29232#3/2\",\"5695\":\"v-51e29232#4\",\"5696\":\"v-51e29232#4/0\",\"5697\":\"v-51e29232#4/1\",\"5698\":\"v-51e29232#4/2\",\"5699\":\"v-51e29232#4/3\",\"5700\":\"v-51e29232#5\",\"5701\":\"v-51e29232#5/0\",\"5702\":\"v-51e29232#5/1\",\"5703\":\"v-51e29232#5/2\",\"5704\":\"v-51e29232#6\",\"5705\":\"v-51e29232#6/0\",\"5706\":\"v-51e29232#6/1\",\"5707\":\"v-51e29232#7\",\"5708\":\"v-51e29232#7/0\",\"5709\":\"v-51e29232#7/1\",\"5710\":\"v-51e29232#7/2\",\"5711\":\"v-51e29232#7/3\",\"5712\":\"v-51e29232#8\",\"5713\":\"v-51e29232#8/0\",\"5714\":\"v-51e29232#8/1\",\"5715\":\"v-51e29232#8/2\",\"5716\":\"v-51e29232#8/3\",\"5717\":\"v-51e29232#8/4\",\"5718\":\"v-51e29232#8/5\",\"5719\":\"v-51e29232#8/6\",\"5720\":\"v-51e29232#9\",\"5721\":\"v-51e29232#9/0\",\"5722\":\"v-51e29232#9/1\",\"5723\":\"v-51e29232#10\",\"5724\":\"v-51e29232#10/0\",\"5725\":\"v-51e29232#10/1\",\"5726\":\"v-51e29232#11\",\"5727\":\"v-51e29232#11/0\",\"5728\":\"v-51e29232#11/1\",\"5729\":\"v-51e29232#11/2\",\"5730\":\"v-51e29232#11/3\",\"5731\":\"v-51e29232#12\",\"5732\":\"v-51e29232#12/0\",\"5733\":\"v-51e29232#12/1\",\"5734\":\"v-51e29232#12/2\",\"5735\":\"v-51e29232#12/3\",\"5736\":\"v-51e29232#12/4\",\"5737\":\"v-51e29232#12/5\",\"5738\":\"v-51e29232#12/6\",\"5739\":\"v-51e29232#12/7\",\"5740\":\"v-51e29232#13\",\"5741\":\"v-51e29232#13/0\",\"5742\":\"v-51e29232#13/1\",\"5743\":\"v-51e29232#14\",\"5744\":\"v-51e29232#14/0\",\"5745\":\"v-51e29232#14/1\",\"5746\":\"v-51e29232#14/2\",\"5747\":\"v-51e29232#15\",\"5748\":\"v-51e29232#15/0\",\"5749\":\"v-51e29232#16\",\"5750\":\"v-51e29232#16/0\",\"5751\":\"v-51e29232#16/1\",\"5752\":\"v-51e29232#17\",\"5753\":\"v-51e29232#17/0\",\"5754\":\"v-51e29232#18\",\"5755\":\"v-51e29232#18/0\",\"5756\":\"v-51e29232#18/1\",\"5757\":\"v-51e29232#18/2\",\"5758\":\"v-51e29232#18/3\",\"5759\":\"v-51e29232#19\",\"5760\":\"v-51e29232#19/0\",\"5761\":\"v-51e29232#19/1\",\"5762\":\"v-51e29232#20\",\"5763\":\"v-51e29232#20/0\",\"5764\":\"v-51e29232#20/1\",\"5765\":\"v-51e29232#20/2\",\"5766\":\"v-51e29232#21\",\"5767\":\"v-51e29232#21/0\",\"5768\":\"v-51e29232#21/1\",\"5769\":\"v-51e29232#22\",\"5770\":\"v-51e29232#22/0\",\"5771\":\"v-51e29232#22/1\",\"5772\":\"v-51e29232#23\",\"5773\":\"v-51e29232#23/0\",\"5774\":\"v-51e29232#23/1\",\"5775\":\"v-51e29232#23/2\",\"5776\":\"v-51e29232#23/3\",\"5777\":\"v-51e29232#23/4\",\"5778\":\"v-51e29232#23/5\",\"5779\":\"v-51e29232#23/6\",\"5780\":\"v-51e29232#23/7\",\"5781\":\"v-51e29232#24\",\"5782\":\"v-51e29232#24/0\",\"5783\":\"v-51e29232#24/1\",\"5784\":\"v-51e29232#24/2\",\"5785\":\"v-51e29232#25\",\"5786\":\"v-51e29232#25/0\",\"5787\":\"v-51e29232#25/1\",\"5788\":\"v-51e29232#25/2\",\"5789\":\"v-51e29232#26\",\"5790\":\"v-51e29232#26/0\",\"5791\":\"v-51e29232#27\",\"5792\":\"v-51e29232#27/1\",\"5793\":\"v-51e29232#27/2\",\"5794\":\"v-51e29232#27/3\",\"5795\":\"v-fcb66968\",\"5796\":\"v-fcb66968#1\",\"5797\":\"v-fcb66968#2\",\"5798\":\"v-fcb66968#2/0\",\"5799\":\"v-fcb66968#2/1\",\"5800\":\"v-fcb66968#2/2\",\"5801\":\"v-fcb66968#2/3\",\"5802\":\"v-fcb66968#2/4\",\"5803\":\"v-fcb66968#2/5\",\"5804\":\"v-fcb66968#2/6\",\"5805\":\"v-fcb66968#3\",\"5806\":\"v-fcb66968#3/0\",\"5807\":\"v-fcb66968#3/1\",\"5808\":\"v-fcb66968#3/2\",\"5809\":\"v-fcb66968#3/3\",\"5810\":\"v-fcb66968#3/4\",\"5811\":\"v-fcb66968#3/5\",\"5812\":\"v-fcb66968#4\",\"5813\":\"v-fcb66968#5\",\"5814\":\"v-fcb66968#5/0\",\"5815\":\"v-fcb66968#5/1\",\"5816\":\"v-fcb66968#5/2\",\"5817\":\"v-fcb66968#5/3\",\"5818\":\"v-fcb66968#5/4\",\"5819\":\"v-fcb66968#5/5\",\"5820\":\"v-fcb66968#5/6\",\"5821\":\"v-fcb66968#5/7\",\"5822\":\"v-fcb66968#5/8\",\"5823\":\"v-fcb66968#6\",\"5824\":\"v-fcb66968#6/0\",\"5825\":\"v-fcb66968#6/1\",\"5826\":\"v-fcb66968#6/2\",\"5827\":\"v-fcb66968#6/3\",\"5828\":\"v-fcb66968#6/4\",\"5829\":\"v-fcb66968#7\",\"5830\":\"v-fcb66968#7/0\",\"5831\":\"v-fcb66968#7/1\",\"5832\":\"v-fcb66968#7/2\",\"5833\":\"v-fcb66968#7/3\",\"5834\":\"v-fcb66968#7/4\",\"5835\":\"v-fcb66968#8\",\"5836\":\"v-fcb66968#8/0\",\"5837\":\"v-fcb66968#8/1\",\"5838\":\"v-fcb66968#9\",\"5839\":\"v-fcb66968#9/0\",\"5840\":\"v-fcb66968#9/1\",\"5841\":\"v-fcb66968#9/2\",\"5842\":\"v-fcb66968#10\",\"5843\":\"v-fcb66968#10/0\",\"5844\":\"v-fcb66968#11\",\"5845\":\"v-fcb66968#11/0\",\"5846\":\"v-fcb66968#11/1\",\"5847\":\"v-fcb66968#11/2\",\"5848\":\"v-fcb66968#11/3\",\"5849\":\"v-fcb66968#11/4\",\"5850\":\"v-fcb66968#11/5\",\"5851\":\"v-fcb66968#11/6\",\"5852\":\"v-fcb66968#12\",\"5853\":\"v-fcb66968#13\",\"5854\":\"v-fcb66968#14\",\"5855\":\"v-fcb66968#14/0\",\"5856\":\"v-fcb66968#14/1\",\"5857\":\"v-fcb66968#15\",\"5858\":\"v-fcb66968#15/2\",\"5859\":\"v-fcb66968#15/3\",\"5860\":\"v-fcb66968#15/4\",\"5861\":\"v-fcb66968#15/5\",\"5862\":\"v-fcb66968#15/6\",\"5863\":\"v-fcb66968#15/7\",\"5864\":\"v-fcb66968#15/8\",\"5865\":\"v-fcb66968#16\",\"5866\":\"v-fcb66968#16/0\",\"5867\":\"v-fcb66968#17\",\"5868\":\"v-fcb66968#17/0\",\"5869\":\"v-fcb66968#18\",\"5870\":\"v-fcb66968#18/0\",\"5871\":\"v-fcb66968#18/1\",\"5872\":\"v-fcb66968#18/2\",\"5873\":\"v-fcb66968#18/3\",\"5874\":\"v-fcb66968#19\",\"5875\":\"v-fcb66968#19/0\",\"5876\":\"v-fcb66968#19/1\",\"5877\":\"v-fcb66968#19/2\",\"5878\":\"v-fcb66968#19/3\",\"5879\":\"v-fcb66968#19/4\",\"5880\":\"v-fcb66968#19/5\",\"5881\":\"v-fcb66968#19/6\",\"5882\":\"v-fcb66968#20\",\"5883\":\"v-fcb66968#20/0\",\"5884\":\"v-fcb66968#21\",\"5885\":\"v-fcb66968#21/0\",\"5886\":\"v-fcb66968#21/1\",\"5887\":\"v-fcb66968#21/2\",\"5888\":\"v-fcb66968#21/3\",\"5889\":\"v-fcb66968#21/4\",\"5890\":\"v-fcb66968#21/5\",\"5891\":\"v-fcb66968#21/6\",\"5892\":\"v-fcb66968#21/7\",\"5893\":\"v-fcb66968#21/8\",\"5894\":\"v-fcb66968#21/9\",\"5895\":\"v-fcb66968#21/10\",\"5896\":\"v-fcb66968#22\",\"5897\":\"v-fcb66968#23\",\"5898\":\"v-fcb66968#23/0\",\"5899\":\"v-fcb66968#23/1\",\"5900\":\"v-fcb66968#24\",\"5901\":\"v-fcb66968#24/0\",\"5902\":\"v-fcb66968#25\",\"5903\":\"v-fcb66968#26\",\"5904\":\"v-fcb66968#26/1\",\"5905\":\"v-fcb66968#26/2\",\"5906\":\"v-fcb66968#26/3\",\"5907\":\"v-fcb66968#26/4\",\"5908\":\"v-fcb66968#27\",\"5909\":\"v-fcb66968#27/0\",\"5910\":\"v-fcb66968#27/1\",\"5911\":\"v-fcb66968#28\",\"5912\":\"v-fcb66968#28/0\",\"5913\":\"v-fcb66968#28/1\",\"5914\":\"v-fcb66968#29\",\"5915\":\"v-fcb66968#29/2\",\"5916\":\"v-fcb66968#29/3\",\"5917\":\"v-fcb66968#30\",\"5918\":\"v-fcb66968#30/4\",\"5919\":\"v-fcb66968#31\",\"5920\":\"v-fcb66968#31/0\",\"5921\":\"v-fcb66968#31/1\",\"5922\":\"v-fcb66968#32\",\"5923\":\"v-fcb66968#32/2\",\"5924\":\"v-fcb66968#32/3\",\"5925\":\"v-fcb66968#33\",\"5926\":\"v-fcb66968#33/0\",\"5927\":\"v-fcb66968#33/1\",\"5928\":\"v-f6d6ac5c\",\"5929\":\"v-f6d6ac5c#0/0\",\"5930\":\"v-f6d6ac5c#0/1\",\"5931\":\"v-f6d6ac5c#0/2\",\"5932\":\"v-f6d6ac5c#1\",\"5933\":\"v-f6d6ac5c#1/0\",\"5934\":\"v-f6d6ac5c#1/1\",\"5935\":\"v-f6d6ac5c#2\",\"5936\":\"v-f6d6ac5c#2/0\",\"5937\":\"v-659e9238\",\"5938\":\"v-659e9238#1\",\"5939\":\"v-659e9238#2\",\"5940\":\"v-659e9238#2/0\",\"5941\":\"v-659e9238#2/1\",\"5942\":\"v-659e9238#2/2\",\"5943\":\"v-659e9238#3\",\"5944\":\"v-659e9238#3/0\",\"5945\":\"v-659e9238#4\",\"5946\":\"v-659e9238#4/0\",\"5947\":\"v-659e9238#4/1\",\"5948\":\"v-659e9238#4/2\",\"5949\":\"v-659e9238#5\",\"5950\":\"v-659e9238#5/0\",\"5951\":\"v-659e9238#6\",\"5952\":\"v-659e9238#6/0\",\"5953\":\"v-659e9238#7\",\"5954\":\"v-659e9238#7/0\",\"5955\":\"v-659e9238#7/1\",\"5956\":\"v-659e9238#8\",\"5957\":\"v-659e9238#8/0\",\"5958\":\"v-659e9238#9\",\"5959\":\"v-659e9238#9/0\",\"5960\":\"v-659e9238#10\",\"5961\":\"v-659e9238#10/0\",\"5962\":\"v-659e9238#11\",\"5963\":\"v-659e9238#11/0\",\"5964\":\"v-659e9238#11/1\",\"5965\":\"v-659e9238#12\",\"5966\":\"v-659e9238#13\",\"5967\":\"v-659e9238#13/2\",\"5968\":\"v-659e9238#14\",\"5969\":\"v-659e9238#14/3\",\"5970\":\"v-659e9238#14/4\",\"5971\":\"v-659e9238#15\",\"5972\":\"v-659e9238#15/5\",\"5973\":\"v-659e9238#15/6\",\"5974\":\"v-659e9238#15/7\",\"5975\":\"v-659e9238#15/8\",\"5976\":\"v-659e9238#15/9\",\"5977\":\"v-659e9238#15/10\",\"5978\":\"v-659e9238#15/11\",\"5979\":\"v-659e9238#15/12\",\"5980\":\"v-659e9238#15/13\",\"5981\":\"v-659e9238#15/14\",\"5982\":\"v-659e9238#15/15\",\"5983\":\"v-659e9238#15/16\",\"5984\":\"v-2f92b158\",\"5985\":\"v-2f92b158#1\",\"5986\":\"v-2f92b158#2\",\"5987\":\"v-2f92b158#2/0\",\"5988\":\"v-2f92b158#3\",\"5989\":\"v-2f92b158#3/0\",\"5990\":\"v-2f92b158#3/1\",\"5991\":\"v-2f92b158#4\",\"5992\":\"v-2f92b158#4/2\",\"5993\":\"v-2f92b158#4/3\",\"5994\":\"v-2f92b158#4/4\",\"5995\":\"v-2f92b158#5\",\"5996\":\"v-2f92b158#5/5\",\"5997\":\"v-2f92b158#6\",\"5998\":\"v-2f92b158#7\",\"5999\":\"v-2f92b158#7/6\",\"6000\":\"v-2f92b158#8\",\"6001\":\"v-2f92b158#8/7\",\"6002\":\"v-2f92b158#9\",\"6003\":\"v-2f92b158#9/8\",\"6004\":\"v-2f92b158#9/9\",\"6005\":\"v-2f92b158#9/10\",\"6006\":\"v-2f92b158#9/11\",\"6007\":\"v-2f92b158#9/12\",\"6008\":\"v-2f92b158#9/13\",\"6009\":\"v-2f92b158#9/14\",\"6010\":\"v-2f92b158#9/15\",\"6011\":\"v-2f92b158#9/16\",\"6012\":\"v-2f92b158#9/17\",\"6013\":\"v-2f92b158#9/18\",\"6014\":\"v-2f92b158#10\",\"6015\":\"v-2f92b158#10/19\",\"6016\":\"v-2f92b158#10/20\",\"6017\":\"v-2f92b158#11\",\"6018\":\"v-2f92b158#11/21\",\"6019\":\"v-2f92b158#11/22\",\"6020\":\"v-2f92b158#12\",\"6021\":\"v-2f92b158#12/23\",\"6022\":\"v-2f92b158#12/24\",\"6023\":\"v-2f92b158#13\",\"6024\":\"v-2f92b158#13/25\",\"6025\":\"v-2f92b158#13/26\",\"6026\":\"v-2f92b158#14\",\"6027\":\"v-2f92b158#14/27\",\"6028\":\"v-2f92b158#14/28\",\"6029\":\"v-2f92b158#15\",\"6030\":\"v-2f92b158#16\",\"6031\":\"v-2f92b158#16/29\",\"6032\":\"v-2f92b158#16/30\",\"6033\":\"v-2f92b158#17\",\"6034\":\"v-2f92b158#17/0\",\"6035\":\"v-2f92b158#17/1\",\"6036\":\"v-2f92b158#18\",\"6037\":\"v-2f92b158#18/0\",\"6038\":\"v-2f92b158#19\",\"6039\":\"v-2f92b158#19/0\",\"6040\":\"v-2f92b158#20\",\"6041\":\"v-2f92b158#20/0\",\"6042\":\"v-2f92b158#20/1\",\"6043\":\"v-2f92b158#21\",\"6044\":\"v-2f92b158#21/2\",\"6045\":\"v-2f92b158#21/3\",\"6046\":\"v-2f92b158#22\",\"6047\":\"v-2f92b158#22/4\",\"6048\":\"v-2f92b158#22/5\",\"6049\":\"v-2f92b158#22/6\",\"6050\":\"v-0d8e7fcb\",\"6051\":\"v-0d8e7fcb#1\",\"6052\":\"v-0d8e7fcb#2\",\"6053\":\"v-0d8e7fcb#2/0\",\"6054\":\"v-0d8e7fcb#2/1\",\"6055\":\"v-0d8e7fcb#3\",\"6056\":\"v-0d8e7fcb#3/2\",\"6057\":\"v-0d8e7fcb#3/3\",\"6058\":\"v-0d8e7fcb#4\",\"6059\":\"v-0d8e7fcb#4/4\",\"6060\":\"v-0d8e7fcb#5\",\"6061\":\"v-0d8e7fcb#6\",\"6062\":\"v-0d8e7fcb#6/0\",\"6063\":\"v-0d8e7fcb#6/1\",\"6064\":\"v-0d8e7fcb#6/2\",\"6065\":\"v-0d8e7fcb#7\",\"6066\":\"v-0d8e7fcb#8\",\"6067\":\"v-0d8e7fcb#8/0\",\"6068\":\"v-0d8e7fcb#9\",\"6069\":\"v-0d8e7fcb#9/1\",\"6070\":\"v-0d8e7fcb#9/2\",\"6071\":\"v-0d8e7fcb#10\",\"6072\":\"v-0d8e7fcb#10/3\",\"6073\":\"v-0d8e7fcb#10/4\",\"6074\":\"v-0d8e7fcb#11\",\"6075\":\"v-0d8e7fcb#11/5\",\"6076\":\"v-0d8e7fcb#12\",\"6077\":\"v-0d8e7fcb#12/0\",\"6078\":\"v-0d8e7fcb#12/1\",\"6079\":\"v-0d8e7fcb#13\",\"6080\":\"v-0d8e7fcb#13/2\",\"6081\":\"v-0d8e7fcb#13/3\",\"6082\":\"v-0d8e7fcb#14\",\"6083\":\"v-0d8e7fcb#14/4\",\"6084\":\"v-0d8e7fcb#14/5\",\"6085\":\"v-0d8e7fcb#15\",\"6086\":\"v-0d8e7fcb#15/0\",\"6087\":\"v-0d8e7fcb#16\",\"6088\":\"v-0d8e7fcb#16/0\",\"6089\":\"v-0d8e7fcb#16/1\",\"6090\":\"v-0d8e7fcb#17\",\"6091\":\"v-0d8e7fcb#17/0\",\"6092\":\"v-0d8e7fcb#17/1\",\"6093\":\"v-0d8e7fcb#18\",\"6094\":\"v-0d8e7fcb#18/0\",\"6095\":\"v-0d8e7fcb#19\",\"6096\":\"v-0d8e7fcb#19/1\",\"6097\":\"v-0d8e7fcb#20\",\"6098\":\"v-0d8e7fcb#20/0\",\"6099\":\"v-0d8e7fcb#21\",\"6100\":\"v-0d8e7fcb#21/1\",\"6101\":\"v-0d8e7fcb#22\",\"6102\":\"v-0d8e7fcb#22/2\",\"6103\":\"v-365b9755\",\"6104\":\"v-365b9755#1\",\"6105\":\"v-365b9755#2\",\"6106\":\"v-365b9755#2/0\",\"6107\":\"v-365b9755#2/1\",\"6108\":\"v-365b9755#2/2\",\"6109\":\"v-365b9755#2/3\",\"6110\":\"v-365b9755#2/4\",\"6111\":\"v-365b9755#3\",\"6112\":\"v-365b9755#3/0\",\"6113\":\"v-365b9755#3/1\",\"6114\":\"v-365b9755#4\",\"6115\":\"v-365b9755#4/0\",\"6116\":\"v-365b9755#4/1\",\"6117\":\"v-365b9755#4/2\",\"6118\":\"v-365b9755#5\",\"6119\":\"v-365b9755#5/0\",\"6120\":\"v-365b9755#6\",\"6121\":\"v-365b9755#6/0\",\"6122\":\"v-365b9755#6/1\",\"6123\":\"v-365b9755#7\",\"6124\":\"v-365b9755#7/0\",\"6125\":\"v-365b9755#7/1\",\"6126\":\"v-365b9755#8\",\"6127\":\"v-365b9755#9\",\"6128\":\"v-365b9755#9/0\",\"6129\":\"v-365b9755#9/1\",\"6130\":\"v-365b9755#9/2\",\"6131\":\"v-365b9755#9/3\",\"6132\":\"v-365b9755#9/4\",\"6133\":\"v-365b9755#10\",\"6134\":\"v-365b9755#10/5\",\"6135\":\"v-365b9755#10/6\",\"6136\":\"v-365b9755#10/7\",\"6137\":\"v-365b9755#11\",\"6138\":\"v-365b9755#11/8\",\"6139\":\"v-365b9755#11/9\",\"6140\":\"v-365b9755#12\",\"6141\":\"v-365b9755#12/0\",\"6142\":\"v-365b9755#12/1\",\"6143\":\"v-365b9755#12/2\",\"6144\":\"v-365b9755#12/3\",\"6145\":\"v-365b9755#12/4\",\"6146\":\"v-365b9755#13\",\"6147\":\"v-365b9755#13/0\",\"6148\":\"v-6a074025\",\"6149\":\"v-6a074025#1\",\"6150\":\"v-6a074025#1/0\",\"6151\":\"v-6a074025#1/1\",\"6152\":\"v-6a074025#1/2\",\"6153\":\"v-6a074025#2\",\"6154\":\"v-6a074025#2/0\",\"6155\":\"v-6a074025#2/1\",\"6156\":\"v-6a074025#3\",\"6157\":\"v-6a074025#3/0\",\"6158\":\"v-6a074025#3/1\",\"6159\":\"v-6a074025#3/2\",\"6160\":\"v-6a074025#3/3\",\"6161\":\"v-6a074025#3/4\",\"6162\":\"v-6a074025#3/5\",\"6163\":\"v-6a074025#3/6\",\"6164\":\"v-6a074025#3/7\",\"6165\":\"v-6a074025#3/8\",\"6166\":\"v-6a074025#3/9\",\"6167\":\"v-6a074025#4\",\"6168\":\"v-6a074025#4/0\",\"6169\":\"v-6a074025#4/1\",\"6170\":\"v-6a074025#4/2\",\"6171\":\"v-6a074025#5\",\"6172\":\"v-6a074025#5/0\",\"6173\":\"v-6a074025#5/1\",\"6174\":\"v-6a074025#5/2\",\"6175\":\"v-6a074025#5/3\",\"6176\":\"v-6a074025#5/4\",\"6177\":\"v-6a074025#5/5\",\"6178\":\"v-6a074025#5/6\",\"6179\":\"v-6a074025#6\",\"6180\":\"v-6a074025#7\",\"6181\":\"v-6a074025#7/0\",\"6182\":\"v-6a074025#7/1\",\"6183\":\"v-6a074025#8\",\"6184\":\"v-6a074025#8/0\",\"6185\":\"v-6a074025#8/1\",\"6186\":\"v-f4c0423a\",\"6187\":\"v-f4c0423a#1\",\"6188\":\"v-f4c0423a#1/0\",\"6189\":\"v-f4c0423a#1/1\",\"6190\":\"v-f4c0423a#2\",\"6191\":\"v-f4c0423a#2/0\",\"6192\":\"v-f4c0423a#3\",\"6193\":\"v-f4c0423a#3/0\",\"6194\":\"v-f4c0423a#3/1\",\"6195\":\"v-f4c0423a#4\",\"6196\":\"v-f4c0423a#4/0\",\"6197\":\"v-f4c0423a#4/1\",\"6198\":\"v-f4c0423a#5\",\"6199\":\"v-f4c0423a#6\",\"6200\":\"v-f4c0423a#6/0\",\"6201\":\"v-f4c0423a#6/1\",\"6202\":\"v-f4c0423a#7\",\"6203\":\"v-f4c0423a#7/0\",\"6204\":\"v-f4c0423a#7/1\",\"6205\":\"v-f4c0423a#8\",\"6206\":\"v-f4c0423a#8/0\",\"6207\":\"v-f4c0423a#9\",\"6208\":\"v-f4c0423a#9/0\",\"6209\":\"v-f4c0423a#9/1\",\"6210\":\"v-f4c0423a#9/2\",\"6211\":\"v-f4c0423a#10\",\"6212\":\"v-f4c0423a#10/0\",\"6213\":\"v-f4c0423a#10/1\",\"6214\":\"v-f4c0423a#11\",\"6215\":\"v-f4c0423a#11/0\",\"6216\":\"v-f4c0423a#11/1\",\"6217\":\"v-f4c0423a#11/2\",\"6218\":\"v-f4c0423a#11/3\",\"6219\":\"v-f4c0423a#12\",\"6220\":\"v-f4c0423a#12/0\",\"6221\":\"v-495f7ca6\",\"6222\":\"v-495f7ca6#1\",\"6223\":\"v-495f7ca6#1/0\",\"6224\":\"v-495f7ca6#2\",\"6225\":\"v-495f7ca6#2/0\",\"6226\":\"v-495f7ca6#2/1\",\"6227\":\"v-495f7ca6#3\",\"6228\":\"v-495f7ca6#3/0\",\"6229\":\"v-495f7ca6#3/1\",\"6230\":\"v-495f7ca6#3/2\",\"6231\":\"v-495f7ca6#3/3\",\"6232\":\"v-495f7ca6#3/4\",\"6233\":\"v-495f7ca6#3/5\",\"6234\":\"v-495f7ca6#4\",\"6235\":\"v-495f7ca6#4/0\",\"6236\":\"v-495f7ca6#5\",\"6237\":\"v-495f7ca6#6\",\"6238\":\"v-495f7ca6#6/0\",\"6239\":\"v-495f7ca6#6/1\",\"6240\":\"v-495f7ca6#7\",\"6241\":\"v-495f7ca6#7/2\",\"6242\":\"v-495f7ca6#7/3\",\"6243\":\"v-495f7ca6#7/4\",\"6244\":\"v-495f7ca6#8\",\"6245\":\"v-495f7ca6#8/5\",\"6246\":\"v-495f7ca6#8/6\",\"6247\":\"v-495f7ca6#9\",\"6248\":\"v-495f7ca6#9/7\",\"6249\":\"v-495f7ca6#9/8\",\"6250\":\"v-495f7ca6#10\",\"6251\":\"v-495f7ca6#10/0\",\"6252\":\"v-495f7ca6#11\",\"6253\":\"v-495f7ca6#11/1\",\"6254\":\"v-495f7ca6#11/2\",\"6255\":\"v-495f7ca6#12\",\"6256\":\"v-495f7ca6#12/3\",\"6257\":\"v-495f7ca6#12/4\",\"6258\":\"v-495f7ca6#13\",\"6259\":\"v-495f7ca6#13/0\",\"6260\":\"v-495f7ca6#13/1\",\"6261\":\"v-495f7ca6#14\",\"6262\":\"v-495f7ca6#14/2\",\"6263\":\"v-495f7ca6#14/3\",\"6264\":\"v-495f7ca6#14/4\",\"6265\":\"v-495f7ca6#15\",\"6266\":\"v-495f7ca6#15/5\",\"6267\":\"v-495f7ca6#16\",\"6268\":\"v-495f7ca6#16/0\",\"6269\":\"v-495f7ca6#17\",\"6270\":\"v-495f7ca6#18\",\"6271\":\"v-495f7ca6#18/0\",\"6272\":\"v-495f7ca6#18/1\",\"6273\":\"v-495f7ca6#18/2\",\"6274\":\"v-495f7ca6#18/3\",\"6275\":\"v-495f7ca6#18/4\",\"6276\":\"v-495f7ca6#19\",\"6277\":\"v-495f7ca6#19/5\",\"6278\":\"v-495f7ca6#19/6\",\"6279\":\"v-495f7ca6#20\",\"6280\":\"v-495f7ca6#20/7\",\"6281\":\"v-495f7ca6#20/8\",\"6282\":\"v-495f7ca6#21\",\"6283\":\"v-495f7ca6#21/9\",\"6284\":\"v-495f7ca6#22\",\"6285\":\"v-495f7ca6#22/0\",\"6286\":\"v-495f7ca6#23\",\"6287\":\"v-495f7ca6#23/1\",\"6288\":\"v-495f7ca6#24\",\"6289\":\"v-495f7ca6#24/2\",\"6290\":\"v-495f7ca6#25\",\"6291\":\"v-495f7ca6#25/0\",\"6292\":\"v-495f7ca6#25/1\",\"6293\":\"v-495f7ca6#26\",\"6294\":\"v-495f7ca6#26/0\",\"6295\":\"v-495f7ca6#26/1\",\"6296\":\"v-495f7ca6#27\",\"6297\":\"v-495f7ca6#27/0\",\"6298\":\"v-495f7ca6#28\",\"6299\":\"v-495f7ca6#28/1\",\"6300\":\"v-495f7ca6#28/2\",\"6301\":\"v-495f7ca6#28/3\",\"6302\":\"v-495f7ca6#28/4\",\"6303\":\"v-495f7ca6#28/5\",\"6304\":\"v-495f7ca6#29\",\"6305\":\"v-495f7ca6#29/0\",\"6306\":\"v-495f7ca6#29/1\",\"6307\":\"v-12515210\",\"6308\":\"v-12515210#1\",\"6309\":\"v-12515210#1/0\",\"6310\":\"v-12515210#1/1\",\"6311\":\"v-12515210#2\",\"6312\":\"v-12515210#2/0\",\"6313\":\"v-12515210#2/1\",\"6314\":\"v-12515210#2/2\",\"6315\":\"v-12515210#2/3\",\"6316\":\"v-12515210#2/4\",\"6317\":\"v-12515210#2/5\",\"6318\":\"v-12515210#2/6\",\"6319\":\"v-12515210#2/7\",\"6320\":\"v-12515210#2/8\",\"6321\":\"v-12515210#3\",\"6322\":\"v-12515210#3/0\",\"6323\":\"v-12515210#4\",\"6324\":\"v-12515210#4/0\",\"6325\":\"v-12515210#4/1\",\"6326\":\"v-12515210#5\",\"6327\":\"v-12515210#5/2\",\"6328\":\"v-12515210#5/3\",\"6329\":\"v-12515210#6\",\"6330\":\"v-12515210#6/4\",\"6331\":\"v-12515210#6/5\",\"6332\":\"v-12515210#7\",\"6333\":\"v-12515210#7/6\",\"6334\":\"v-12515210#7/7\",\"6335\":\"v-12515210#8\",\"6336\":\"v-12515210#9\",\"6337\":\"v-12515210#9/8\",\"6338\":\"v-12515210#9/9\",\"6339\":\"v-12515210#9/10\",\"6340\":\"v-12515210#9/11\",\"6341\":\"v-12515210#9/12\",\"6342\":\"v-12515210#10\",\"6343\":\"v-12515210#10/0\",\"6344\":\"v-12515210#10/1\",\"6345\":\"v-12515210#10/2\",\"6346\":\"v-12515210#10/3\",\"6347\":\"v-12515210#10/4\",\"6348\":\"v-12515210#10/5\",\"6349\":\"v-12515210#11\",\"6350\":\"v-12515210#11/6\",\"6351\":\"v-12515210#12\",\"6352\":\"v-12515210#12/0\",\"6353\":\"v-12515210#12/1\",\"6354\":\"v-12515210#13\",\"6355\":\"v-12515210#13/2\",\"6356\":\"v-12515210#14\",\"6357\":\"v-12515210#14/0\",\"6358\":\"v-12515210#14/1\",\"6359\":\"v-12515210#14/2\",\"6360\":\"v-12515210#14/3\",\"6361\":\"v-3a91a2c3\",\"6362\":\"v-3a91a2c3#1\",\"6363\":\"v-3a91a2c3#2\",\"6364\":\"v-3a91a2c3#2/0\",\"6365\":\"v-3a91a2c3#2/1\",\"6366\":\"v-3a91a2c3#3\",\"6367\":\"v-3a91a2c3#3/0\",\"6368\":\"v-3a91a2c3#3/1\",\"6369\":\"v-3a91a2c3#3/2\",\"6370\":\"v-3a91a2c3#4\",\"6371\":\"v-3a91a2c3#4/0\",\"6372\":\"v-3a91a2c3#4/1\",\"6373\":\"v-3a91a2c3#4/2\",\"6374\":\"v-3a91a2c3#4/3\",\"6375\":\"v-3a91a2c3#5\",\"6376\":\"v-3a91a2c3#5/0\",\"6377\":\"v-3a91a2c3#5/1\",\"6378\":\"v-3a91a2c3#5/2\",\"6379\":\"v-3a91a2c3#6\",\"6380\":\"v-3a91a2c3#7\",\"6381\":\"v-3a91a2c3#7/0\",\"6382\":\"v-3a91a2c3#7/1\",\"6383\":\"v-3a91a2c3#8\",\"6384\":\"v-3a91a2c3#8/2\",\"6385\":\"v-3a91a2c3#8/3\",\"6386\":\"v-3a91a2c3#9\",\"6387\":\"v-3a91a2c3#9/4\",\"6388\":\"v-3a91a2c3#9/5\",\"6389\":\"v-3a91a2c3#10\",\"6390\":\"v-3a91a2c3#11\",\"6391\":\"v-3a91a2c3#11/6\",\"6392\":\"v-3a91a2c3#12\",\"6393\":\"v-3a91a2c3#12/0\",\"6394\":\"v-3a91a2c3#12/1\",\"6395\":\"v-3a91a2c3#13\",\"6396\":\"v-3a91a2c3#13/2\",\"6397\":\"v-3a91a2c3#14\",\"6398\":\"v-3a91a2c3#14/0\",\"6399\":\"v-3a91a2c3#15\",\"6400\":\"v-3a91a2c3#15/1\",\"6401\":\"v-3a91a2c3#16\",\"6402\":\"v-3a91a2c3#16/0\",\"6403\":\"v-3a91a2c3#17\",\"6404\":\"v-3a91a2c3#17/1\",\"6405\":\"v-3a91a2c3#18\",\"6406\":\"v-3a91a2c3#18/2\",\"6407\":\"v-3a91a2c3#18/3\",\"6408\":\"v-3a91a2c3#18/4\",\"6409\":\"v-3a91a2c3#18/5\",\"6410\":\"v-3a91a2c3#19\",\"6411\":\"v-3a91a2c3#19/0\",\"6412\":\"v-3a91a2c3#20\",\"6413\":\"v-3a91a2c3#21\",\"6414\":\"v-3a91a2c3#21/1\",\"6415\":\"v-3a91a2c3#22\",\"6416\":\"v-3a91a2c3#22/0\",\"6417\":\"v-3a91a2c3#22/1\",\"6418\":\"v-3a91a2c3#22/2\",\"6419\":\"v-3a91a2c3#22/3\",\"6420\":\"v-3a91a2c3#22/4\",\"6421\":\"v-3a91a2c3#22/5\",\"6422\":\"v-3a91a2c3#22/6\",\"6423\":\"v-3a91a2c3#23\",\"6424\":\"v-3a91a2c3#23/0\",\"6425\":\"v-3a91a2c3#24\",\"6426\":\"v-3a91a2c3#24/0\",\"6427\":\"v-3a91a2c3#24/1\",\"6428\":\"v-3a91a2c3#24/2\",\"6429\":\"v-3a91a2c3#25\",\"6430\":\"v-3a91a2c3#25/0\",\"6431\":\"v-3a91a2c3#26\",\"6432\":\"v-3a91a2c3#26/0\",\"6433\":\"v-2b0e0704\",\"6434\":\"v-2b0e0704#1\",\"6435\":\"v-2b0e0704#1/0\",\"6436\":\"v-2b0e0704#1/1\",\"6437\":\"v-2b0e0704#2\",\"6438\":\"v-2b0e0704#2/0\",\"6439\":\"v-2b0e0704#2/1\",\"6440\":\"v-2b0e0704#2/2\",\"6441\":\"v-2b0e0704#3\",\"6442\":\"v-2b0e0704#3/0\",\"6443\":\"v-2b0e0704#3/1\",\"6444\":\"v-2b0e0704#4\",\"6445\":\"v-2b0e0704#4/2\",\"6446\":\"v-2b0e0704#4/3\",\"6447\":\"v-2b0e0704#4/4\",\"6448\":\"v-2b0e0704#4/5\",\"6449\":\"v-2b0e0704#4/6\",\"6450\":\"v-2b0e0704#5\",\"6451\":\"v-2b0e0704#5/7\",\"6452\":\"v-2b0e0704#6\",\"6453\":\"v-2b0e0704#6/0\",\"6454\":\"v-2b0e0704#6/1\",\"6455\":\"v-2b0e0704#6/2\",\"6456\":\"v-2b0e0704#6/3\",\"6457\":\"v-2b0e0704#6/4\",\"6458\":\"v-2b0e0704#6/5\",\"6459\":\"v-2b0e0704#7\",\"6460\":\"v-2b0e0704#7/0\",\"6461\":\"v-2b0e0704#8\",\"6462\":\"v-2b0e0704#8/1\",\"6463\":\"v-2b0e0704#8/2\",\"6464\":\"v-2b0e0704#9\",\"6465\":\"v-2b0e0704#9/0\",\"6466\":\"v-2b0e0704#9/1\",\"6467\":\"v-2b0e0704#10\",\"6468\":\"v-2b0e0704#10/0\",\"6469\":\"v-2b0e0704#10/1\",\"6470\":\"v-2b0e0704#10/2\",\"6471\":\"v-2b0e0704#10/3\",\"6472\":\"v-2b0e0704#10/4\",\"6473\":\"v-2b0e0704#10/5\",\"6474\":\"v-2b0e0704#10/6\",\"6475\":\"v-2b0e0704#10/7\",\"6476\":\"v-2b0e0704#10/8\",\"6477\":\"v-2b0e0704#10/9\",\"6478\":\"v-2b0e0704#11\",\"6479\":\"v-2b0e0704#11/0\",\"6480\":\"v-2b0e0704#12\",\"6481\":\"v-2b0e0704#12/0\",\"6482\":\"v-2b0e0704#12/1\",\"6483\":\"v-2b0e0704#12/2\",\"6484\":\"v-2b0e0704#13\",\"6485\":\"v-2b0e0704#13/3\",\"6486\":\"v-2b0e0704#13/4\",\"6487\":\"v-2b0e0704#13/5\",\"6488\":\"v-2b0e0704#14\",\"6489\":\"v-2b0e0704#14/6\",\"6490\":\"v-2b0e0704#15\",\"6491\":\"v-2b0e0704#15/0\",\"6492\":\"v-2b0e0704#15/1\",\"6493\":\"v-2b0e0704#15/2\",\"6494\":\"v-2b0e0704#16\",\"6495\":\"v-2b0e0704#16/0\",\"6496\":\"v-2b0e0704#17\",\"6497\":\"v-2b0e0704#17/0\",\"6498\":\"v-2b0e0704#17/1\",\"6499\":\"v-2b0e0704#18\",\"6500\":\"v-2b0e0704#18/2\",\"6501\":\"v-2b0e0704#18/3\",\"6502\":\"v-2b0e0704#19\",\"6503\":\"v-2b0e0704#19/4\",\"6504\":\"v-2b0e0704#19/5\",\"6505\":\"v-2b0e0704#19/6\",\"6506\":\"v-2b0e0704#20\",\"6507\":\"v-2b0e0704#20/7\",\"6508\":\"v-2b0e0704#20/8\",\"6509\":\"v-2b0e0704#20/9\",\"6510\":\"v-2b0e0704#20/10\",\"6511\":\"v-2b0e0704#20/11\",\"6512\":\"v-2b0e0704#21\",\"6513\":\"v-2b0e0704#21/0\",\"6514\":\"v-2b0e0704#21/1\",\"6515\":\"v-2b0e0704#22\",\"6516\":\"v-2b0e0704#22/0\",\"6517\":\"v-2b0e0704#23\",\"6518\":\"v-2b0e0704#23/1\",\"6519\":\"v-2b0e0704#23/2\",\"6520\":\"v-2b0e0704#23/3\",\"6521\":\"v-2b0e0704#23/4\",\"6522\":\"v-2b0e0704#24\",\"6523\":\"v-2b0e0704#24/0\",\"6524\":\"v-2b0e0704#24/1\",\"6525\":\"v-2b0e0704#25\",\"6526\":\"v-2b0e0704#25/0\",\"6527\":\"v-2b0e0704#26\",\"6528\":\"v-2b0e0704#26/1\",\"6529\":\"v-11e78490\",\"6530\":\"v-11e78490#1\",\"6531\":\"v-11e78490#1/0\",\"6532\":\"v-11e78490#1/1\",\"6533\":\"v-11e78490#1/2\",\"6534\":\"v-11e78490#2\",\"6535\":\"v-11e78490#2/0\",\"6536\":\"v-11e78490#2/1\",\"6537\":\"v-11e78490#3\",\"6538\":\"v-11e78490#3/0\",\"6539\":\"v-11e78490#3/1\",\"6540\":\"v-11e78490#4\",\"6541\":\"v-11e78490#5\",\"6542\":\"v-11e78490#5/0\",\"6543\":\"v-11e78490#5/1\",\"6544\":\"v-11e78490#6\",\"6545\":\"v-11e78490#6/2\",\"6546\":\"v-11e78490#6/3\",\"6547\":\"v-11e78490#7\",\"6548\":\"v-11e78490#7/4\",\"6549\":\"v-11e78490#7/5\",\"6550\":\"v-11e78490#8\",\"6551\":\"v-11e78490#8/6\",\"6552\":\"v-11e78490#8/7\",\"6553\":\"v-11e78490#9\",\"6554\":\"v-11e78490#10\",\"6555\":\"v-11e78490#10/8\",\"6556\":\"v-11e78490#11\",\"6557\":\"v-11e78490#11/9\",\"6558\":\"v-11e78490#12\",\"6559\":\"v-11e78490#12/10\",\"6560\":\"v-11e78490#12/11\",\"6561\":\"v-11e78490#12/12\",\"6562\":\"v-11e78490#12/13\",\"6563\":\"v-11e78490#12/14\",\"6564\":\"v-11e78490#12/15\",\"6565\":\"v-11e78490#12/16\",\"6566\":\"v-11e78490#12/17\",\"6567\":\"v-11e78490#13\",\"6568\":\"v-11e78490#14\",\"6569\":\"v-11e78490#14/0\",\"6570\":\"v-11e78490#15\",\"6571\":\"v-11e78490#15/1\",\"6572\":\"v-11e78490#16\",\"6573\":\"v-11e78490#16/2\",\"6574\":\"v-11e78490#17\",\"6575\":\"v-11e78490#17/3\",\"6576\":\"v-11e78490#17/4\",\"6577\":\"v-11e78490#17/5\",\"6578\":\"v-00565ee0\",\"6579\":\"v-00565ee0#1\",\"6580\":\"v-00565ee0#2\",\"6581\":\"v-00565ee0#2/0\",\"6582\":\"v-00565ee0#2/1\",\"6583\":\"v-00565ee0#2/2\",\"6584\":\"v-00565ee0#2/3\",\"6585\":\"v-00565ee0#2/4\",\"6586\":\"v-00565ee0#2/5\",\"6587\":\"v-00565ee0#2/6\",\"6588\":\"v-00565ee0#3\",\"6589\":\"v-00565ee0#3/0\",\"6590\":\"v-00565ee0#4\",\"6591\":\"v-00565ee0#4/0\",\"6592\":\"v-00565ee0#5\",\"6593\":\"v-00565ee0#5/0\",\"6594\":\"v-00565ee0#5/1\",\"6595\":\"v-00565ee0#6\",\"6596\":\"v-00565ee0#6/2\",\"6597\":\"v-00565ee0#7\",\"6598\":\"v-00565ee0#7/0\",\"6599\":\"v-00565ee0#7/1\",\"6600\":\"v-00565ee0#7/2\",\"6601\":\"v-00565ee0#7/3\",\"6602\":\"v-00565ee0#7/4\",\"6603\":\"v-00565ee0#7/5\",\"6604\":\"v-00565ee0#7/6\",\"6605\":\"v-00565ee0#7/7\",\"6606\":\"v-00565ee0#7/8\",\"6607\":\"v-00565ee0#7/9\",\"6608\":\"v-00565ee0#7/10\",\"6609\":\"v-00565ee0#7/11\",\"6610\":\"v-00565ee0#8\",\"6611\":\"v-00565ee0#8/0\",\"6612\":\"v-00565ee0#8/1\",\"6613\":\"v-00565ee0#8/2\",\"6614\":\"v-00565ee0#9\",\"6615\":\"v-00565ee0#9/0\",\"6616\":\"v-00565ee0#9/1\",\"6617\":\"v-00565ee0#9/2\",\"6618\":\"v-00565ee0#9/3\",\"6619\":\"v-00565ee0#9/4\",\"6620\":\"v-00565ee0#9/5\",\"6621\":\"v-00565ee0#9/6\",\"6622\":\"v-00565ee0#9/7\",\"6623\":\"v-00565ee0#9/8\",\"6624\":\"v-00565ee0#9/9\",\"6625\":\"v-00565ee0#9/10\",\"6626\":\"v-00565ee0#9/11\",\"6627\":\"v-00565ee0#9/12\",\"6628\":\"v-00565ee0#9/13\",\"6629\":\"v-00565ee0#9/14\",\"6630\":\"v-00565ee0#9/15\",\"6631\":\"v-00565ee0#9/16\",\"6632\":\"v-00565ee0#9/17\",\"6633\":\"v-00565ee0#9/18\",\"6634\":\"v-00565ee0#10\",\"6635\":\"v-00565ee0#10/0\",\"6636\":\"v-25f158ce\",\"6637\":\"v-25f158ce#0/0\",\"6638\":\"v-25f158ce#0/1\",\"6639\":\"v-25f158ce#1\",\"6640\":\"v-25f158ce#1/0\",\"6641\":\"v-25f158ce#1/1\",\"6642\":\"v-25f158ce#2\",\"6643\":\"v-25f158ce#2/0\",\"6644\":\"v-25f158ce#2/1\",\"6645\":\"v-25f158ce#2/2\",\"6646\":\"v-25f158ce#2/3\",\"6647\":\"v-25f158ce#2/4\",\"6648\":\"v-25f158ce#3\",\"6649\":\"v-25f158ce#3/0\",\"6650\":\"v-25f158ce#3/1\",\"6651\":\"v-25f158ce#4\",\"6652\":\"v-25f158ce#4/0\",\"6653\":\"v-25f158ce#4/1\",\"6654\":\"v-25f158ce#4/2\",\"6655\":\"v-25f158ce#4/3\",\"6656\":\"v-25f158ce#5\",\"6657\":\"v-25f158ce#5/0\",\"6658\":\"v-25f158ce#6\",\"6659\":\"v-25f158ce#6/0\",\"6660\":\"v-1399e2a7\",\"6661\":\"v-1399e2a7#1\",\"6662\":\"v-1399e2a7#2\",\"6663\":\"v-1399e2a7#2/0\",\"6664\":\"v-1399e2a7#3\",\"6665\":\"v-1399e2a7#4\",\"6666\":\"v-1399e2a7#4/0\",\"6667\":\"v-1399e2a7#4/1\",\"6668\":\"v-1399e2a7#4/2\",\"6669\":\"v-1399e2a7#5\",\"6670\":\"v-1399e2a7#5/0\",\"6671\":\"v-1399e2a7#5/1\",\"6672\":\"v-1399e2a7#5/2\",\"6673\":\"v-1399e2a7#6\",\"6674\":\"v-1399e2a7#6/0\",\"6675\":\"v-1399e2a7#7\",\"6676\":\"v-1399e2a7#7/0\",\"6677\":\"v-1399e2a7#7/1\",\"6678\":\"v-1399e2a7#7/2\",\"6679\":\"v-1399e2a7#8\",\"6680\":\"v-1399e2a7#8/0\",\"6681\":\"v-1399e2a7#8/1\",\"6682\":\"v-1399e2a7#9\",\"6683\":\"v-1399e2a7#9/0\",\"6684\":\"v-1399e2a7#9/1\",\"6685\":\"v-1399e2a7#9/2\",\"6686\":\"v-1399e2a7#10\",\"6687\":\"v-1399e2a7#10/0\",\"6688\":\"v-1399e2a7#11\",\"6689\":\"v-1399e2a7#12\",\"6690\":\"v-1399e2a7#12/0\",\"6691\":\"v-1399e2a7#12/1\",\"6692\":\"v-1399e2a7#12/2\",\"6693\":\"v-1399e2a7#13\",\"6694\":\"v-1399e2a7#13/0\",\"6695\":\"v-1399e2a7#13/1\",\"6696\":\"v-1399e2a7#13/2\",\"6697\":\"v-1399e2a7#14\",\"6698\":\"v-1399e2a7#14/0\",\"6699\":\"v-1399e2a7#15\",\"6700\":\"v-1399e2a7#15/0\",\"6701\":\"v-1399e2a7#16\",\"6702\":\"v-1399e2a7#16/1\",\"6703\":\"v-1399e2a7#16/2\",\"6704\":\"v-1399e2a7#17\",\"6705\":\"v-1399e2a7#17/3\",\"6706\":\"v-1399e2a7#17/4\",\"6707\":\"v-1399e2a7#18\",\"6708\":\"v-1399e2a7#18/5\",\"6709\":\"v-1399e2a7#19\",\"6710\":\"v-1399e2a7#19/6\",\"6711\":\"v-1399e2a7#19/7\",\"6712\":\"v-3971b80d\",\"6713\":\"v-3971b80d#1\",\"6714\":\"v-3971b80d#2\",\"6715\":\"v-3971b80d#2/0\",\"6716\":\"v-3971b80d#2/1\",\"6717\":\"v-3971b80d#3\",\"6718\":\"v-3971b80d#3/0\",\"6719\":\"v-3971b80d#3/1\",\"6720\":\"v-3971b80d#3/2\",\"6721\":\"v-3971b80d#4\",\"6722\":\"v-3971b80d#5\",\"6723\":\"v-3971b80d#5/0\",\"6724\":\"v-3971b80d#5/1\",\"6725\":\"v-3971b80d#5/2\",\"6726\":\"v-3971b80d#6\",\"6727\":\"v-3971b80d#6/0\",\"6728\":\"v-3971b80d#6/1\",\"6729\":\"v-3971b80d#6/2\",\"6730\":\"v-3971b80d#7\",\"6731\":\"v-3971b80d#7/0\",\"6732\":\"v-3971b80d#7/1\",\"6733\":\"v-3971b80d#7/2\",\"6734\":\"v-3971b80d#7/3\",\"6735\":\"v-3971b80d#7/4\",\"6736\":\"v-3971b80d#8\",\"6737\":\"v-3971b80d#8/0\",\"6738\":\"v-3971b80d#8/1\",\"6739\":\"v-3971b80d#8/2\",\"6740\":\"v-3971b80d#8/3\",\"6741\":\"v-3971b80d#8/4\",\"6742\":\"v-3971b80d#8/5\",\"6743\":\"v-3971b80d#9\",\"6744\":\"v-3971b80d#9/0\",\"6745\":\"v-3971b80d#9/1\",\"6746\":\"v-3971b80d#9/2\",\"6747\":\"v-3971b80d#9/3\",\"6748\":\"v-3971b80d#9/4\",\"6749\":\"v-3971b80d#10\",\"6750\":\"v-3971b80d#10/0\",\"6751\":\"v-3971b80d#10/1\",\"6752\":\"v-3971b80d#10/2\",\"6753\":\"v-3971b80d#10/3\",\"6754\":\"v-3971b80d#10/4\",\"6755\":\"v-7c301910\",\"6756\":\"v-7c301910#1\",\"6757\":\"v-7c301910#1/0\",\"6758\":\"v-7c301910#1/1\",\"6759\":\"v-7c301910#1/2\",\"6760\":\"v-7c301910#1/3\",\"6761\":\"v-7c301910#1/4\",\"6762\":\"v-7c301910#1/5\",\"6763\":\"v-7c301910#2\",\"6764\":\"v-7c301910#2/0\",\"6765\":\"v-7c301910#2/1\",\"6766\":\"v-7c301910#3\",\"6767\":\"v-7c301910#4\",\"6768\":\"v-7c301910#4/0\",\"6769\":\"v-7c301910#4/1\",\"6770\":\"v-7c301910#5\",\"6771\":\"v-7c301910#5/2\",\"6772\":\"v-7c301910#5/3\",\"6773\":\"v-7c301910#6\",\"6774\":\"v-7c301910#6/4\",\"6775\":\"v-7c301910#6/5\",\"6776\":\"v-7c301910#6/6\",\"6777\":\"v-7c301910#6/7\",\"6778\":\"v-7c301910#6/8\",\"6779\":\"v-7c301910#6/9\",\"6780\":\"v-7c301910#6/10\",\"6781\":\"v-7c301910#6/11\",\"6782\":\"v-7c301910#6/12\",\"6783\":\"v-7c301910#6/13\",\"6784\":\"v-0320aed6\",\"6785\":\"v-0320aed6#1\",\"6786\":\"v-0320aed6#1/0\",\"6787\":\"v-0320aed6#1/1\",\"6788\":\"v-0320aed6#2\",\"6789\":\"v-0320aed6#2/0\",\"6790\":\"v-0320aed6#2/1\",\"6791\":\"v-0320aed6#2/2\",\"6792\":\"v-0320aed6#2/3\",\"6793\":\"v-0320aed6#2/4\",\"6794\":\"v-0320aed6#2/5\",\"6795\":\"v-0320aed6#2/6\",\"6796\":\"v-0320aed6#2/7\",\"6797\":\"v-0320aed6#2/8\",\"6798\":\"v-0320aed6#3\",\"6799\":\"v-0320aed6#3/0\",\"6800\":\"v-0320aed6#4\",\"6801\":\"v-0320aed6#4/0\",\"6802\":\"v-0320aed6#5\",\"6803\":\"v-0320aed6#5/1\",\"6804\":\"v-0320aed6#6\",\"6805\":\"v-0320aed6#6/2\",\"6806\":\"v-0320aed6#6/3\",\"6807\":\"v-0320aed6#6/4\",\"6808\":\"v-0320aed6#6/5\",\"6809\":\"v-0320aed6#6/6\",\"6810\":\"v-0320aed6#7\",\"6811\":\"v-0320aed6#8\",\"6812\":\"v-0320aed6#8/0\",\"6813\":\"v-0320aed6#8/1\",\"6814\":\"v-0320aed6#8/2\",\"6815\":\"v-0320aed6#9\",\"6816\":\"v-0320aed6#9/3\",\"6817\":\"v-0320aed6#9/4\",\"6818\":\"v-0320aed6#10\",\"6819\":\"v-0320aed6#10/0\",\"6820\":\"v-0320aed6#11\",\"6821\":\"v-0320aed6#11/1\",\"6822\":\"v-0320aed6#11/2\",\"6823\":\"v-0320aed6#11/3\",\"6824\":\"v-0320aed6#11/4\",\"6825\":\"v-79fb5655\",\"6826\":\"v-79fb5655#1\",\"6827\":\"v-79fb5655#2\",\"6828\":\"v-79fb5655#2/0\",\"6829\":\"v-79fb5655#2/1\",\"6830\":\"v-79fb5655#2/2\",\"6831\":\"v-79fb5655#2/3\",\"6832\":\"v-79fb5655#3\",\"6833\":\"v-79fb5655#3/0\",\"6834\":\"v-79fb5655#3/1\",\"6835\":\"v-79fb5655#3/2\",\"6836\":\"v-79fb5655#3/3\",\"6837\":\"v-79fb5655#3/4\",\"6838\":\"v-79fb5655#3/5\",\"6839\":\"v-79fb5655#4\",\"6840\":\"v-79fb5655#4/0\",\"6841\":\"v-79fb5655#5\",\"6842\":\"v-79fb5655#5/1\",\"6843\":\"v-79fb5655#5/2\",\"6844\":\"v-79fb5655#6\",\"6845\":\"v-79fb5655#6/3\",\"6846\":\"v-79fb5655#6/4\",\"6847\":\"v-79fb5655#6/5\",\"6848\":\"v-79fb5655#6/6\",\"6849\":\"v-79fb5655#6/7\",\"6850\":\"v-79fb5655#6/8\",\"6851\":\"v-79fb5655#6/9\",\"6852\":\"v-79fb5655#6/10\",\"6853\":\"v-79fb5655#6/11\",\"6854\":\"v-79fb5655#6/12\",\"6855\":\"v-79fb5655#7\",\"6856\":\"v-79fb5655#7/0\",\"6857\":\"v-79fb5655#7/1\",\"6858\":\"v-79fb5655#7/2\",\"6859\":\"v-79fb5655#7/3\",\"6860\":\"v-79fb5655#7/4\",\"6861\":\"v-79fb5655#7/5\",\"6862\":\"v-79fb5655#7/6\",\"6863\":\"v-952b4f74\",\"6864\":\"v-952b4f74#1\",\"6865\":\"v-952b4f74#1/0\",\"6866\":\"v-952b4f74#1/1\",\"6867\":\"v-952b4f74#1/2\",\"6868\":\"v-952b4f74#2\",\"6869\":\"v-952b4f74#2/0\",\"6870\":\"v-952b4f74#2/1\",\"6871\":\"v-952b4f74#2/2\",\"6872\":\"v-952b4f74#2/3\",\"6873\":\"v-952b4f74#3\",\"6874\":\"v-952b4f74#3/4\",\"6875\":\"v-952b4f74#3/5\",\"6876\":\"v-952b4f74#3/6\",\"6877\":\"v-952b4f74#3/7\",\"6878\":\"v-952b4f74#3/8\",\"6879\":\"v-952b4f74#3/9\",\"6880\":\"v-952b4f74#3/10\",\"6881\":\"v-952b4f74#3/11\",\"6882\":\"v-952b4f74#3/12\",\"6883\":\"v-952b4f74#3/13\",\"6884\":\"v-952b4f74#3/14\",\"6885\":\"v-952b4f74#4\",\"6886\":\"v-952b4f74#4/0\",\"6887\":\"v-952b4f74#4/1\",\"6888\":\"v-952b4f74#4/2\",\"6889\":\"v-952b4f74#4/3\",\"6890\":\"v-952b4f74#4/4\",\"6891\":\"v-952b4f74#4/5\",\"6892\":\"v-952b4f74#4/6\",\"6893\":\"v-952b4f74#5\",\"6894\":\"v-952b4f74#5/0\",\"6895\":\"v-952b4f74#5/1\",\"6896\":\"v-952b4f74#5/2\",\"6897\":\"v-952b4f74#6\",\"6898\":\"v-952b4f74#6/0\",\"6899\":\"v-952b4f74#6/1\",\"6900\":\"v-952b4f74#7\",\"6901\":\"v-952b4f74#7/2\",\"6902\":\"v-952b4f74#7/3\",\"6903\":\"v-952b4f74#7/4\",\"6904\":\"v-952b4f74#7/5\",\"6905\":\"v-952b4f74#7/6\",\"6906\":\"v-952b4f74#7/7\",\"6907\":\"v-952b4f74#7/8\",\"6908\":\"v-952b4f74#8\",\"6909\":\"v-952b4f74#8/0\",\"6910\":\"v-952b4f74#8/1\",\"6911\":\"v-952b4f74#8/2\",\"6912\":\"v-952b4f74#8/3\",\"6913\":\"v-952b4f74#8/4\",\"6914\":\"v-952b4f74#9\",\"6915\":\"v-952b4f74#9/0\",\"6916\":\"v-952b4f74#9/1\",\"6917\":\"v-952b4f74#9/2\",\"6918\":\"v-952b4f74#9/3\",\"6919\":\"v-952b4f74#9/4\",\"6920\":\"v-679946d5\",\"6921\":\"v-679946d5#1\",\"6922\":\"v-679946d5#1/0\",\"6923\":\"v-679946d5#2\",\"6924\":\"v-679946d5#2/0\",\"6925\":\"v-679946d5#2/1\",\"6926\":\"v-679946d5#2/2\",\"6927\":\"v-679946d5#2/3\",\"6928\":\"v-679946d5#2/4\",\"6929\":\"v-679946d5#3\",\"6930\":\"v-679946d5#3/0\",\"6931\":\"v-679946d5#4\",\"6932\":\"v-679946d5#4/0\",\"6933\":\"v-679946d5#4/1\",\"6934\":\"v-679946d5#4/2\",\"6935\":\"v-679946d5#4/3\",\"6936\":\"v-679946d5#4/4\",\"6937\":\"v-679946d5#4/5\",\"6938\":\"v-679946d5#4/6\",\"6939\":\"v-679946d5#5\",\"6940\":\"v-679946d5#5/0\",\"6941\":\"v-679946d5#5/1\",\"6942\":\"v-679946d5#5/2\",\"6943\":\"v-679946d5#5/3\",\"6944\":\"v-679946d5#5/4\",\"6945\":\"v-679946d5#6\",\"6946\":\"v-679946d5#6/0\",\"6947\":\"v-679946d5#7\",\"6948\":\"v-679946d5#7/0\",\"6949\":\"v-679946d5#7/1\",\"6950\":\"v-679946d5#8\",\"6951\":\"v-679946d5#8/2\",\"6952\":\"v-679946d5#8/3\",\"6953\":\"v-679946d5#8/4\",\"6954\":\"v-679946d5#9\",\"6955\":\"v-679946d5#10\",\"6956\":\"v-679946d5#10/0\",\"6957\":\"v-679946d5#11\",\"6958\":\"v-679946d5#11/1\",\"6959\":\"v-679946d5#12\",\"6960\":\"v-679946d5#12/2\",\"6961\":\"v-679946d5#13\",\"6962\":\"v-679946d5#13/3\",\"6963\":\"v-3fce3636\",\"6964\":\"v-3fce3636#1\",\"6965\":\"v-3fce3636#1/0\",\"6966\":\"v-3fce3636#1/1\",\"6967\":\"v-3fce3636#1/2\",\"6968\":\"v-3fce3636#2\",\"6969\":\"v-3fce3636#2/0\",\"6970\":\"v-3fce3636#3\",\"6971\":\"v-3fce3636#3/0\",\"6972\":\"v-3fce3636#3/1\",\"6973\":\"v-3fce3636#4\",\"6974\":\"v-3fce3636#4/0\",\"6975\":\"v-3fce3636#4/1\",\"6976\":\"v-3fce3636#4/2\",\"6977\":\"v-3fce3636#4/3\",\"6978\":\"v-3fce3636#4/4\",\"6979\":\"v-3fce3636#4/5\",\"6980\":\"v-3fce3636#4/6\",\"6981\":\"v-3fce3636#5\",\"6982\":\"v-3fce3636#5/0\",\"6983\":\"v-3fce3636#5/1\",\"6984\":\"v-3fce3636#5/2\",\"6985\":\"v-3fce3636#5/3\",\"6986\":\"v-3fce3636#5/4\",\"6987\":\"v-3fce3636#5/5\",\"6988\":\"v-3fce3636#5/6\",\"6989\":\"v-3fce3636#5/7\",\"6990\":\"v-3fce3636#6\",\"6991\":\"v-3fce3636#6/8\",\"6992\":\"v-3fce3636#7\",\"6993\":\"v-3fce3636#7/0\",\"6994\":\"v-3fce3636#7/1\",\"6995\":\"v-3fce3636#8\",\"6996\":\"v-3fce3636#8/2\",\"6997\":\"v-3fce3636#8/3\",\"6998\":\"v-3fce3636#9\",\"6999\":\"v-3fce3636#9/4\",\"7000\":\"v-3fce3636#9/5\",\"7001\":\"v-3fce3636#10\",\"7002\":\"v-3fce3636#10/6\",\"7003\":\"v-3fce3636#11\",\"7004\":\"v-3fce3636#11/7\",\"7005\":\"v-2fee7965\",\"7006\":\"v-2fee7965#1\",\"7007\":\"v-2fee7965#2\",\"7008\":\"v-2fee7965#2/0\",\"7009\":\"v-2fee7965#2/1\",\"7010\":\"v-2fee7965#3\",\"7011\":\"v-2fee7965#3/0\",\"7012\":\"v-2fee7965#4\",\"7013\":\"v-2fee7965#4/0\",\"7014\":\"v-2fee7965#4/1\",\"7015\":\"v-2fee7965#4/2\",\"7016\":\"v-2fee7965#4/3\",\"7017\":\"v-2fee7965#5\",\"7018\":\"v-2fee7965#5/0\",\"7019\":\"v-2fee7965#5/1\",\"7020\":\"v-2fee7965#5/2\",\"7021\":\"v-2fee7965#6\",\"7022\":\"v-2fee7965#6/0\",\"7023\":\"v-2fee7965#6/1\",\"7024\":\"v-2fee7965#6/2\",\"7025\":\"v-2fee7965#6/3\",\"7026\":\"v-2fee7965#6/4\",\"7027\":\"v-2fee7965#6/5\",\"7028\":\"v-2fee7965#6/6\",\"7029\":\"v-2fee7965#6/7\",\"7030\":\"v-2fee7965#6/8\",\"7031\":\"v-2fee7965#6/9\",\"7032\":\"v-2fee7965#6/10\",\"7033\":\"v-2fee7965#7\",\"7034\":\"v-2fee7965#7/0\",\"7035\":\"v-2fee7965#7/1\",\"7036\":\"v-2fee7965#8\",\"7037\":\"v-2fee7965#8/0\",\"7038\":\"v-2fee7965#8/1\",\"7039\":\"v-2fee7965#8/2\",\"7040\":\"v-2fee7965#8/3\",\"7041\":\"v-2fee7965#8/4\",\"7042\":\"v-2fee7965#9\",\"7043\":\"v-2fee7965#9/0\",\"7044\":\"v-2fee7965#10\",\"7045\":\"v-2fee7965#10/1\",\"7046\":\"v-2fee7965#10/2\",\"7047\":\"v-2fee7965#11\",\"7048\":\"v-2fee7965#11/3\",\"7049\":\"v-2fee7965#11/4\",\"7050\":\"v-3b69e562\",\"7051\":\"v-3b69e562#1\",\"7052\":\"v-3b69e562#2\",\"7053\":\"v-3b69e562#2/0\",\"7054\":\"v-3b69e562#2/1\",\"7055\":\"v-3b69e562#2/2\",\"7056\":\"v-3b69e562#2/3\",\"7057\":\"v-3b69e562#2/4\",\"7058\":\"v-3b69e562#2/5\",\"7059\":\"v-3b69e562#2/6\",\"7060\":\"v-3b69e562#2/7\",\"7061\":\"v-3b69e562#3\",\"7062\":\"v-3b69e562#3/0\",\"7063\":\"v-3b69e562#3/1\",\"7064\":\"v-3b69e562#3/2\",\"7065\":\"v-3b69e562#3/3\",\"7066\":\"v-3b69e562#4\",\"7067\":\"v-3b69e562#4/4\",\"7068\":\"v-3b69e562#4/5\",\"7069\":\"v-3b69e562#5\",\"7070\":\"v-3b69e562#6\",\"7071\":\"v-3b69e562#6/0\",\"7072\":\"v-3b69e562#6/1\",\"7073\":\"v-3b69e562#7\",\"7074\":\"v-3b69e562#7/2\",\"7075\":\"v-3b69e562#7/3\",\"7076\":\"v-3b69e562#8\",\"7077\":\"v-3b69e562#8/0\",\"7078\":\"v-3b69e562#8/1\",\"7079\":\"v-3b69e562#9\",\"7080\":\"v-3b69e562#9/2\",\"7081\":\"v-3b69e562#9/3\",\"7082\":\"v-3b69e562#9/4\",\"7083\":\"v-3b69e562#9/5\",\"7084\":\"v-3b69e562#10\",\"7085\":\"v-3b69e562#10/0\",\"7086\":\"v-3b69e562#10/1\",\"7087\":\"v-3b69e562#10/2\",\"7088\":\"v-3b69e562#10/3\",\"7089\":\"v-3b69e562#10/4\",\"7090\":\"v-3b69e562#10/5\",\"7091\":\"v-3b69e562#10/6\",\"7092\":\"v-3b69e562#10/7\",\"7093\":\"v-3b69e562#10/8\",\"7094\":\"v-3b69e562#10/9\",\"7095\":\"v-3b69e562#11\",\"7096\":\"v-3b69e562#12\",\"7097\":\"v-3b69e562#12/0\",\"7098\":\"v-3b69e562#12/1\",\"7099\":\"v-3b69e562#12/2\",\"7100\":\"v-3b69e562#12/3\",\"7101\":\"v-3b69e562#12/4\",\"7102\":\"v-3b69e562#12/5\",\"7103\":\"v-3b69e562#12/6\",\"7104\":\"v-3b69e562#13\",\"7105\":\"v-3b69e562#13/0\",\"7106\":\"v-3b69e562#13/1\",\"7107\":\"v-3b69e562#13/2\",\"7108\":\"v-3b69e562#13/3\",\"7109\":\"v-3b69e562#13/4\",\"7110\":\"v-3b69e562#13/5\",\"7111\":\"v-3b69e562#13/6\",\"7112\":\"v-3b69e562#13/7\",\"7113\":\"v-3b69e562#13/8\",\"7114\":\"v-3b69e562#13/9\",\"7115\":\"v-3b69e562#13/10\",\"7116\":\"v-3b69e562#13/11\",\"7117\":\"v-3b69e562#13/12\",\"7118\":\"v-3b69e562#13/13\",\"7119\":\"v-3b69e562#13/14\",\"7120\":\"v-3b69e562#13/15\",\"7121\":\"v-3b69e562#13/16\",\"7122\":\"v-3b69e562#13/17\",\"7123\":\"v-3b69e562#13/18\",\"7124\":\"v-3b69e562#13/19\",\"7125\":\"v-3b69e562#14\",\"7126\":\"v-3b69e562#15\",\"7127\":\"v-3b69e562#15/0\",\"7128\":\"v-3b69e562#15/1\",\"7129\":\"v-3b69e562#15/2\",\"7130\":\"v-3b69e562#15/3\",\"7131\":\"v-3b69e562#16\",\"7132\":\"v-3b69e562#16/0\",\"7133\":\"v-3b69e562#17\",\"7134\":\"v-3b69e562#17/1\",\"7135\":\"v-3b69e562#18\",\"7136\":\"v-3b69e562#18/2\",\"7137\":\"v-3b69e562#18/3\",\"7138\":\"v-3b69e562#19\",\"7139\":\"v-3b69e562#19/4\",\"7140\":\"v-3b69e562#20\",\"7141\":\"v-3b69e562#20/5\",\"7142\":\"v-3b69e562#21\",\"7143\":\"v-3b69e562#21/6\",\"7144\":\"v-3b69e562#22\",\"7145\":\"v-3b69e562#23\",\"7146\":\"v-3b69e562#23/7\",\"7147\":\"v-3b69e562#24\",\"7148\":\"v-3b69e562#24/8\",\"7149\":\"v-3b69e562#24/9\",\"7150\":\"v-3b69e562#25\",\"7151\":\"v-3b69e562#25/10\",\"7152\":\"v-3b69e562#25/11\",\"7153\":\"v-3b69e562#26\",\"7154\":\"v-3b69e562#26/12\",\"7155\":\"v-3b69e562#26/13\",\"7156\":\"v-3b69e562#27\",\"7157\":\"v-3b69e562#27/14\",\"7158\":\"v-3b69e562#27/15\",\"7159\":\"v-3b69e562#27/16\",\"7160\":\"v-3b69e562#28\",\"7161\":\"v-3b69e562#28/17\",\"7162\":\"v-3b69e562#29\",\"7163\":\"v-3b69e562#29/18\",\"7164\":\"v-3b69e562#29/19\",\"7165\":\"v-3b69e562#29/20\",\"7166\":\"v-3b69e562#29/21\",\"7167\":\"v-3b69e562#30\",\"7168\":\"v-3b69e562#30/22\",\"7169\":\"v-3b69e562#30/23\",\"7170\":\"v-3b69e562#31\",\"7171\":\"v-3b69e562#31/24\",\"7172\":\"v-3b69e562#31/25\",\"7173\":\"v-3b69e562#31/26\",\"7174\":\"v-3b69e562#31/27\",\"7175\":\"v-3b69e562#31/28\",\"7176\":\"v-3b69e562#31/29\",\"7177\":\"v-3b69e562#32\",\"7178\":\"v-3b69e562#32/30\",\"7179\":\"v-3b69e562#32/31\",\"7180\":\"v-3b69e562#33\",\"7181\":\"v-3b69e562#33/32\",\"7182\":\"v-3b69e562#34\",\"7183\":\"v-3b69e562#34/0\",\"7184\":\"v-3b69e562#34/1\",\"7185\":\"v-3b69e562#34/2\",\"7186\":\"v-3b69e562#34/3\",\"7187\":\"v-3b69e562#34/4\",\"7188\":\"v-3b69e562#34/5\",\"7189\":\"v-3b69e562#34/6\",\"7190\":\"v-7e149adb\",\"7191\":\"v-7e149adb#1\",\"7192\":\"v-7e149adb#2\",\"7193\":\"v-7e149adb#2/0\",\"7194\":\"v-7e149adb#2/1\",\"7195\":\"v-7e149adb#3\",\"7196\":\"v-7e149adb#3/0\",\"7197\":\"v-7e149adb#3/1\",\"7198\":\"v-7e149adb#3/2\",\"7199\":\"v-7e149adb#3/3\",\"7200\":\"v-7e149adb#3/4\",\"7201\":\"v-7e149adb#3/5\",\"7202\":\"v-7e149adb#3/6\",\"7203\":\"v-7e149adb#3/7\",\"7204\":\"v-7e149adb#4\",\"7205\":\"v-7e149adb#4/0\",\"7206\":\"v-7e149adb#5\",\"7207\":\"v-7e149adb#5/0\",\"7208\":\"v-7e149adb#6\",\"7209\":\"v-7e149adb#6/0\",\"7210\":\"v-7e149adb#7\",\"7211\":\"v-7e149adb#7/0\",\"7212\":\"v-7e149adb#7/1\",\"7213\":\"v-7e149adb#7/2\",\"7214\":\"v-7e149adb#7/3\",\"7215\":\"v-7e149adb#7/4\",\"7216\":\"v-7e149adb#7/5\",\"7217\":\"v-7e149adb#8\",\"7218\":\"v-7e149adb#8/0\",\"7219\":\"v-7e149adb#8/1\",\"7220\":\"v-7e149adb#8/2\",\"7221\":\"v-7e149adb#8/3\",\"7222\":\"v-7e149adb#8/4\",\"7223\":\"v-7e149adb#8/5\",\"7224\":\"v-7e149adb#9\",\"7225\":\"v-7e149adb#9/0\",\"7226\":\"v-7e149adb#10\",\"7227\":\"v-7e149adb#10/1\",\"7228\":\"v-7e149adb#11\",\"7229\":\"v-7e149adb#11/2\",\"7230\":\"v-7e149adb#12\",\"7231\":\"v-7e149adb#12/3\",\"7232\":\"v-7e149adb#13\",\"7233\":\"v-7e149adb#14\",\"7234\":\"v-7e149adb#14/4\",\"7235\":\"v-7e149adb#14/5\",\"7236\":\"v-7e149adb#15\",\"7237\":\"v-7e149adb#15/0\",\"7238\":\"v-7e149adb#15/1\",\"7239\":\"v-7e149adb#15/2\",\"7240\":\"v-7e149adb#15/3\",\"7241\":\"v-7e149adb#15/4\",\"7242\":\"v-7e149adb#15/5\",\"7243\":\"v-7e149adb#15/6\",\"7244\":\"v-7e149adb#15/7\",\"7245\":\"v-7e149adb#15/8\",\"7246\":\"v-7e149adb#15/9\",\"7247\":\"v-7e149adb#15/10\",\"7248\":\"v-7e149adb#16\",\"7249\":\"v-7e149adb#16/0\",\"7250\":\"v-7e149adb#16/1\",\"7251\":\"v-7e149adb#16/2\",\"7252\":\"v-7e149adb#17\",\"7253\":\"v-7e149adb#17/0\",\"7254\":\"v-7e149adb#18\",\"7255\":\"v-7e149adb#19\",\"7256\":\"v-7e149adb#19/0\",\"7257\":\"v-7e149adb#20\",\"7258\":\"v-7e149adb#20/0\",\"7259\":\"v-7e149adb#20/1\",\"7260\":\"v-7e149adb#20/2\",\"7261\":\"v-7e149adb#20/3\",\"7262\":\"v-7e149adb#20/4\",\"7263\":\"v-7e149adb#20/5\",\"7264\":\"v-7e149adb#20/6\",\"7265\":\"v-7e149adb#20/7\",\"7266\":\"v-7e149adb#20/8\",\"7267\":\"v-7e149adb#21\",\"7268\":\"v-7e149adb#21/9\",\"7269\":\"v-7e149adb#22\",\"7270\":\"v-7e149adb#22/0\",\"7271\":\"v-7e149adb#22/1\",\"7272\":\"v-7e149adb#22/2\",\"7273\":\"v-7e149adb#22/3\",\"7274\":\"v-7e149adb#22/4\",\"7275\":\"v-7e149adb#23\",\"7276\":\"v-7e149adb#24\",\"7277\":\"v-7e149adb#24/5\",\"7278\":\"v-7e149adb#25\",\"7279\":\"v-7e149adb#25/6\",\"7280\":\"v-7e149adb#26\",\"7281\":\"v-7e149adb#26/7\",\"7282\":\"v-7e149adb#26/8\",\"7283\":\"v-7e149adb#26/9\",\"7284\":\"v-7e149adb#26/10\",\"7285\":\"v-7e149adb#27\",\"7286\":\"v-7e149adb#27/11\",\"7287\":\"v-7e149adb#27/12\",\"7288\":\"v-7e149adb#27/13\",\"7289\":\"v-7e149adb#27/14\",\"7290\":\"v-7e149adb#27/15\",\"7291\":\"v-7e149adb#27/16\",\"7292\":\"v-7e149adb#27/17\",\"7293\":\"v-7e149adb#27/18\",\"7294\":\"v-7e149adb#27/19\",\"7295\":\"v-7e149adb#27/20\",\"7296\":\"v-7e149adb#27/21\",\"7297\":\"v-7e149adb#27/22\",\"7298\":\"v-7e149adb#28\",\"7299\":\"v-7e149adb#29\",\"7300\":\"v-7e149adb#29/0\",\"7301\":\"v-7e149adb#29/1\",\"7302\":\"v-7e149adb#30\",\"7303\":\"v-7e149adb#30/0\",\"7304\":\"v-7e149adb#30/1\",\"7305\":\"v-7e149adb#31\",\"7306\":\"v-7e149adb#31/0\",\"7307\":\"v-7e149adb#31/1\",\"7308\":\"v-66593afe\",\"7309\":\"v-66593afe#0/0\",\"7310\":\"v-66593afe#0/1\",\"7311\":\"v-66593afe#1\",\"7312\":\"v-66593afe#1/0\",\"7313\":\"v-66593afe#1/1\",\"7314\":\"v-66593afe#2\",\"7315\":\"v-66593afe#2/0\",\"7316\":\"v-66593afe#2/1\",\"7317\":\"v-66593afe#2/2\",\"7318\":\"v-66593afe#3\",\"7319\":\"v-66593afe#3/0\",\"7320\":\"v-66593afe#3/1\",\"7321\":\"v-66593afe#4\",\"7322\":\"v-66593afe#4/0\",\"7323\":\"v-66593afe#4/1\",\"7324\":\"v-66593afe#4/2\",\"7325\":\"v-66593afe#5\",\"7326\":\"v-66593afe#5/0\",\"7327\":\"v-66593afe#6\",\"7328\":\"v-66593afe#6/0\",\"7329\":\"v-66593afe#6/1\",\"7330\":\"v-66593afe#6/2\",\"7331\":\"v-a6f71656\",\"7332\":\"v-a6f71656#0/0\",\"7333\":\"v-a6f71656#0/1\",\"7334\":\"v-a6f71656#1\",\"7335\":\"v-a6f71656#2\",\"7336\":\"v-a6f71656#2/0\",\"7337\":\"v-a6f71656#2/1\",\"7338\":\"v-a6f71656#3\",\"7339\":\"v-a6f71656#3/0\",\"7340\":\"v-a6f71656#3/1\",\"7341\":\"v-a6f71656#4\",\"7342\":\"v-a6f71656#4/0\",\"7343\":\"v-a6f71656#4/1\",\"7344\":\"v-a6f71656#5\",\"7345\":\"v-a6f71656#5/0\",\"7346\":\"v-a6f71656#5/1\",\"7347\":\"v-a6f71656#5/2\",\"7348\":\"v-a6f71656#5/3\",\"7349\":\"v-a6f71656#6\",\"7350\":\"v-a6f71656#6/0\",\"7351\":\"v-a6f71656#6/1\",\"7352\":\"v-a6f71656#6/2\",\"7353\":\"v-a6f71656#7\",\"7354\":\"v-a6f71656#7/0\",\"7355\":\"v-a6f71656#7/1\",\"7356\":\"v-a6f71656#7/2\",\"7357\":\"v-a6f71656#8\",\"7358\":\"v-a6f71656#8/0\",\"7359\":\"v-a6f71656#9\",\"7360\":\"v-a6f71656#9/0\",\"7361\":\"v-a6f71656#9/1\",\"7362\":\"v-a6f71656#9/2\",\"7363\":\"v-a6f71656#9/3\",\"7364\":\"v-a6f71656#9/4\",\"7365\":\"v-a6f71656#9/5\",\"7366\":\"v-a6f71656#9/6\",\"7367\":\"v-a6f71656#9/7\",\"7368\":\"v-a6f71656#10\",\"7369\":\"v-a6f71656#10/0\",\"7370\":\"v-a6f71656#11\",\"7371\":\"v-a6f71656#11/0\",\"7372\":\"v-a6f71656#12\",\"7373\":\"v-a6f71656#12/1\",\"7374\":\"v-a6f71656#13\",\"7375\":\"v-a6f71656#13/2\",\"7376\":\"v-a6f71656#14\",\"7377\":\"v-a6f71656#14/3\",\"7378\":\"v-a6f71656#15\",\"7379\":\"v-a6f71656#15/4\",\"7380\":\"v-a6f71656#15/5\",\"7381\":\"v-a6f71656#16\",\"7382\":\"v-a6f71656#16/6\",\"7383\":\"v-a6f71656#17\",\"7384\":\"v-a6f71656#17/7\",\"7385\":\"v-a6f71656#18\",\"7386\":\"v-a6f71656#18/8\",\"7387\":\"v-a6f71656#19\",\"7388\":\"v-a6f71656#19/9\",\"7389\":\"v-a6f71656#20\",\"7390\":\"v-a6f71656#20/10\",\"7391\":\"v-a6f71656#21\",\"7392\":\"v-a6f71656#21/11\",\"7393\":\"v-a6f71656#21/12\",\"7394\":\"v-1d2bd89a\",\"7395\":\"v-1d2bd89a#1\",\"7396\":\"v-1d2bd89a#1/0\",\"7397\":\"v-1d2bd89a#2\",\"7398\":\"v-1d2bd89a#2/0\",\"7399\":\"v-1d2bd89a#2/1\",\"7400\":\"v-1d2bd89a#2/2\",\"7401\":\"v-1d2bd89a#2/3\",\"7402\":\"v-1d2bd89a#3\",\"7403\":\"v-1d2bd89a#4\",\"7404\":\"v-1d2bd89a#4/0\",\"7405\":\"v-1d2bd89a#5\",\"7406\":\"v-1d2bd89a#5/0\",\"7407\":\"v-1d2bd89a#5/1\",\"7408\":\"v-1d2bd89a#6\",\"7409\":\"v-1d2bd89a#6/0\",\"7410\":\"v-1d2bd89a#6/1\",\"7411\":\"v-1d2bd89a#7\",\"7412\":\"v-1d2bd89a#7/0\",\"7413\":\"v-1d2bd89a#7/1\",\"7414\":\"v-1d2bd89a#8\",\"7415\":\"v-1d2bd89a#8/0\",\"7416\":\"v-1d2bd89a#8/1\",\"7417\":\"v-1d2bd89a#9\",\"7418\":\"v-1d2bd89a#9/0\",\"7419\":\"v-1d2bd89a#10\",\"7420\":\"v-1d2bd89a#10/1\",\"7421\":\"v-1d2bd89a#10/2\",\"7422\":\"v-1d2bd89a#11\",\"7423\":\"v-1d2bd89a#11/0\",\"7424\":\"v-1d2bd89a#11/1\",\"7425\":\"v-1d2bd89a#12\",\"7426\":\"v-1d2bd89a#12/0\",\"7427\":\"v-1d2bd89a#13\",\"7428\":\"v-1d2bd89a#13/0\",\"7429\":\"v-1d2bd89a#13/1\",\"7430\":\"v-1d2bd89a#13/2\",\"7431\":\"v-1d2bd89a#13/3\",\"7432\":\"v-1d2bd89a#13/4\",\"7433\":\"v-1d2bd89a#13/5\",\"7434\":\"v-1d2bd89a#13/6\",\"7435\":\"v-1d2bd89a#13/7\",\"7436\":\"v-1d2bd89a#13/8\",\"7437\":\"v-1d2bd89a#14\",\"7438\":\"v-1d2bd89a#14/0\",\"7439\":\"v-377171aa\",\"7440\":\"v-377171aa#1\",\"7441\":\"v-377171aa#2\",\"7442\":\"v-377171aa#2/0\",\"7443\":\"v-377171aa#3\",\"7444\":\"v-377171aa#3/0\",\"7445\":\"v-377171aa#4\",\"7446\":\"v-377171aa#4/0\",\"7447\":\"v-377171aa#4/1\",\"7448\":\"v-377171aa#4/2\",\"7449\":\"v-377171aa#4/3\",\"7450\":\"v-377171aa#5\",\"7451\":\"v-377171aa#5/0\",\"7452\":\"v-377171aa#5/1\",\"7453\":\"v-377171aa#5/2\",\"7454\":\"v-377171aa#6\",\"7455\":\"v-377171aa#6/0\",\"7456\":\"v-377171aa#6/1\",\"7457\":\"v-377171aa#6/2\",\"7458\":\"v-377171aa#7\",\"7459\":\"v-377171aa#8\",\"7460\":\"v-377171aa#8/0\",\"7461\":\"v-377171aa#9\",\"7462\":\"v-377171aa#9/0\",\"7463\":\"v-377171aa#10\",\"7464\":\"v-377171aa#10/1\",\"7465\":\"v-377171aa#10/2\",\"7466\":\"v-377171aa#10/3\",\"7467\":\"v-377171aa#10/4\",\"7468\":\"v-377171aa#10/5\",\"7469\":\"v-377171aa#11\",\"7470\":\"v-377171aa#11/6\",\"7471\":\"v-377171aa#11/7\",\"7472\":\"v-377171aa#12\",\"7473\":\"v-377171aa#12/8\",\"7474\":\"v-377171aa#13\",\"7475\":\"v-377171aa#13/9\",\"7476\":\"v-377171aa#13/10\",\"7477\":\"v-377171aa#14\",\"7478\":\"v-377171aa#14/11\",\"7479\":\"v-377171aa#15\",\"7480\":\"v-377171aa#15/0\",\"7481\":\"v-377171aa#16\",\"7482\":\"v-377171aa#16/1\",\"7483\":\"v-377171aa#16/2\",\"7484\":\"v-377171aa#17\",\"7485\":\"v-377171aa#17/3\",\"7486\":\"v-377171aa#18\",\"7487\":\"v-377171aa#18/0\",\"7488\":\"v-377171aa#19\",\"7489\":\"v-377171aa#19/1\",\"7490\":\"v-377171aa#19/2\",\"7491\":\"v-377171aa#20\",\"7492\":\"v-377171aa#20/3\",\"7493\":\"v-377171aa#20/4\",\"7494\":\"v-377171aa#21\",\"7495\":\"v-377171aa#21/5\",\"7496\":\"v-377171aa#22\",\"7497\":\"v-377171aa#22/6\",\"7498\":\"v-377171aa#22/7\",\"7499\":\"v-377171aa#23\",\"7500\":\"v-377171aa#23/8\",\"7501\":\"v-377171aa#24\",\"7502\":\"v-377171aa#24/0\",\"7503\":\"v-377171aa#24/1\",\"7504\":\"v-377171aa#25\",\"7505\":\"v-377171aa#25/0\",\"7506\":\"v-377171aa#26\",\"7507\":\"v-377171aa#26/0\",\"7508\":\"v-377171aa#26/1\",\"7509\":\"v-377171aa#27\",\"7510\":\"v-377171aa#27/0\",\"7511\":\"v-377171aa#28\",\"7512\":\"v-377171aa#28/1\",\"7513\":\"v-377171aa#29\",\"7514\":\"v-377171aa#29/2\",\"7515\":\"v-377171aa#29/3\",\"7516\":\"v-377171aa#30\",\"7517\":\"v-377171aa#30/0\",\"7518\":\"v-377171aa#31\",\"7519\":\"v-377171aa#31/1\",\"7520\":\"v-377171aa#31/2\",\"7521\":\"v-377171aa#32\",\"7522\":\"v-377171aa#32/3\",\"7523\":\"v-377171aa#32/4\",\"7524\":\"v-377171aa#33\",\"7525\":\"v-377171aa#33/0\",\"7526\":\"v-377171aa#34\",\"7527\":\"v-377171aa#34/1\",\"7528\":\"v-377171aa#35\",\"7529\":\"v-377171aa#35/2\",\"7530\":\"v-377171aa#36\",\"7531\":\"v-377171aa#36/0\",\"7532\":\"v-377171aa#37\",\"7533\":\"v-377171aa#37/0\",\"7534\":\"v-377171aa#38\",\"7535\":\"v-377171aa#38/0\",\"7536\":\"v-377171aa#39\",\"7537\":\"v-377171aa#39/1\",\"7538\":\"v-3e82f83f\",\"7539\":\"v-3e82f83f#1\",\"7540\":\"v-3e82f83f#1/0\",\"7541\":\"v-3e82f83f#1/1\",\"7542\":\"v-3e82f83f#2\",\"7543\":\"v-3e82f83f#2/0\",\"7544\":\"v-3e82f83f#2/1\",\"7545\":\"v-3e82f83f#2/2\",\"7546\":\"v-3e82f83f#3\",\"7547\":\"v-3e82f83f#3/0\",\"7548\":\"v-3e82f83f#3/1\",\"7549\":\"v-3e82f83f#4\",\"7550\":\"v-3e82f83f#4/0\",\"7551\":\"v-3e82f83f#5\",\"7552\":\"v-3e82f83f#5/0\",\"7553\":\"v-3e82f83f#5/1\",\"7554\":\"v-3e82f83f#6\",\"7555\":\"v-3e82f83f#6/0\",\"7556\":\"v-3e82f83f#6/1\",\"7557\":\"v-3e82f83f#6/2\",\"7558\":\"v-3e82f83f#6/3\",\"7559\":\"v-3e82f83f#7\",\"7560\":\"v-3e82f83f#7/0\",\"7561\":\"v-3e82f83f#7/1\",\"7562\":\"v-3e82f83f#7/2\",\"7563\":\"v-3e82f83f#8\",\"7564\":\"v-3e82f83f#9\",\"7565\":\"v-3e82f83f#10\",\"7566\":\"v-3e82f83f#10/0\",\"7567\":\"v-3e82f83f#10/1\",\"7568\":\"v-3e82f83f#10/2\",\"7569\":\"v-3e82f83f#11\",\"7570\":\"v-3e82f83f#11/3\",\"7571\":\"v-3e82f83f#11/4\",\"7572\":\"v-3e82f83f#11/5\",\"7573\":\"v-3e82f83f#12\",\"7574\":\"v-3e82f83f#12/6\",\"7575\":\"v-3e82f83f#12/7\",\"7576\":\"v-3e82f83f#13\",\"7577\":\"v-3e82f83f#13/8\",\"7578\":\"v-3e82f83f#13/9\",\"7579\":\"v-3e82f83f#13/10\",\"7580\":\"v-3e82f83f#13/11\",\"7581\":\"v-3e82f83f#14\",\"7582\":\"v-3e82f83f#14/0\",\"7583\":\"v-3e82f83f#14/1\",\"7584\":\"v-3e82f83f#15\",\"7585\":\"v-3e82f83f#15/2\",\"7586\":\"v-3e82f83f#15/3\",\"7587\":\"v-3e82f83f#16\",\"7588\":\"v-3e82f83f#16/0\",\"7589\":\"v-3e82f83f#16/1\",\"7590\":\"v-3e82f83f#16/2\",\"7591\":\"v-3e82f83f#17\",\"7592\":\"v-3e82f83f#17/3\",\"7593\":\"v-3e82f83f#17/4\",\"7594\":\"v-3e82f83f#18\",\"7595\":\"v-3e82f83f#18/5\",\"7596\":\"v-3e82f83f#18/6\",\"7597\":\"v-3e82f83f#19\",\"7598\":\"v-3e82f83f#19/0\",\"7599\":\"v-3e82f83f#20\",\"7600\":\"v-3e82f83f#20/0\",\"7601\":\"v-3e82f83f#20/1\",\"7602\":\"v-3e82f83f#20/2\",\"7603\":\"v-3e82f83f#21\",\"7604\":\"v-3e82f83f#21/0\",\"7605\":\"v-3e82f83f#21/1\",\"7606\":\"v-3e82f83f#21/2\",\"7607\":\"v-3e82f83f#22\",\"7608\":\"v-3e82f83f#22/0\",\"7609\":\"v-3e82f83f#22/1\",\"7610\":\"v-3e82f83f#22/2\",\"7611\":\"v-3e82f83f#23\",\"7612\":\"v-3e82f83f#23/0\",\"7613\":\"v-3e82f83f#23/1\",\"7614\":\"v-3e82f83f#24\",\"7615\":\"v-3e82f83f#24/0\",\"7616\":\"v-3e82f83f#24/1\",\"7617\":\"v-3e82f83f#25\",\"7618\":\"v-3e82f83f#25/2\",\"7619\":\"v-3e82f83f#25/3\",\"7620\":\"v-3e82f83f#26\",\"7621\":\"v-3e82f83f#26/4\",\"7622\":\"v-3e82f83f#26/5\",\"7623\":\"v-3e82f83f#26/6\",\"7624\":\"v-3e82f83f#27\",\"7625\":\"v-3e82f83f#27/7\",\"7626\":\"v-3e82f83f#27/8\",\"7627\":\"v-3e82f83f#28\",\"7628\":\"v-3e82f83f#28/9\",\"7629\":\"v-3e82f83f#28/10\",\"7630\":\"v-3e82f83f#29\",\"7631\":\"v-3e82f83f#29/0\",\"7632\":\"v-3e82f83f#29/1\",\"7633\":\"v-3e82f83f#29/2\",\"7634\":\"v-3e82f83f#29/3\",\"7635\":\"v-3e82f83f#30\",\"7636\":\"v-3e82f83f#30/4\",\"7637\":\"v-3e82f83f#30/5\",\"7638\":\"v-3e82f83f#31\",\"7639\":\"v-3e82f83f#31/6\",\"7640\":\"v-3e82f83f#31/7\",\"7641\":\"v-3e82f83f#32\",\"7642\":\"v-3e82f83f#32/8\",\"7643\":\"v-3e82f83f#32/9\",\"7644\":\"v-3e82f83f#33\",\"7645\":\"v-3e82f83f#33/10\",\"7646\":\"v-3e82f83f#33/11\",\"7647\":\"v-3e82f83f#33/12\",\"7648\":\"v-3e82f83f#33/13\",\"7649\":\"v-3e82f83f#33/14\",\"7650\":\"v-3e82f83f#33/15\",\"7651\":\"v-3e82f83f#34\",\"7652\":\"v-3e82f83f#35\",\"7653\":\"v-3e82f83f#35/0\",\"7654\":\"v-3e82f83f#35/1\",\"7655\":\"v-3e82f83f#35/2\",\"7656\":\"v-3e82f83f#36\",\"7657\":\"v-3e82f83f#36/3\",\"7658\":\"v-3e82f83f#36/4\",\"7659\":\"v-3e82f83f#37\",\"7660\":\"v-3e82f83f#37/5\",\"7661\":\"v-3e82f83f#37/6\",\"7662\":\"v-3e82f83f#37/7\",\"7663\":\"v-3e82f83f#38\",\"7664\":\"v-3e82f83f#38/8\",\"7665\":\"v-3e82f83f#38/9\",\"7666\":\"v-3e82f83f#39\",\"7667\":\"v-3e82f83f#40\",\"7668\":\"v-3e82f83f#40/0\",\"7669\":\"v-3e82f83f#40/1\",\"7670\":\"v-3e82f83f#40/2\",\"7671\":\"v-3e82f83f#41\",\"7672\":\"v-3e82f83f#41/3\",\"7673\":\"v-3e82f83f#41/4\",\"7674\":\"v-3e82f83f#42\",\"7675\":\"v-3e82f83f#43\",\"7676\":\"v-3e82f83f#43/5\",\"7677\":\"v-3e82f83f#43/6\",\"7678\":\"v-3e82f83f#43/7\",\"7679\":\"v-3e82f83f#44\",\"7680\":\"v-3e82f83f#44/8\",\"7681\":\"v-3e82f83f#45\",\"7682\":\"v-3e82f83f#45/9\",\"7683\":\"v-3e82f83f#46\",\"7684\":\"v-3e82f83f#46/10\",\"7685\":\"v-3e82f83f#46/11\",\"7686\":\"v-3e82f83f#47\",\"7687\":\"v-3e82f83f#47/12\",\"7688\":\"v-3e82f83f#47/13\",\"7689\":\"v-3e82f83f#48\",\"7690\":\"v-3e82f83f#48/14\",\"7691\":\"v-3e82f83f#48/15\",\"7692\":\"v-3e82f83f#49\",\"7693\":\"v-3e82f83f#49/16\",\"7694\":\"v-3e82f83f#49/17\",\"7695\":\"v-3e82f83f#50\",\"7696\":\"v-3e82f83f#50/18\",\"7697\":\"v-3e82f83f#50/19\",\"7698\":\"v-3e82f83f#51\",\"7699\":\"v-3e82f83f#51/20\",\"7700\":\"v-3e82f83f#51/21\",\"7701\":\"v-3e82f83f#51/22\",\"7702\":\"v-3e82f83f#52\",\"7703\":\"v-3e82f83f#53\",\"7704\":\"v-3e82f83f#53/23\",\"7705\":\"v-3e82f83f#53/24\",\"7706\":\"v-3e82f83f#53/25\",\"7707\":\"v-3e82f83f#53/26\",\"7708\":\"v-3e82f83f#53/27\",\"7709\":\"v-3e82f83f#54\",\"7710\":\"v-3e82f83f#54/28\",\"7711\":\"v-3e82f83f#54/29\",\"7712\":\"v-3e82f83f#54/30\",\"7713\":\"v-3e82f83f#55\",\"7714\":\"v-3e82f83f#55/31\",\"7715\":\"v-3e82f83f#55/32\",\"7716\":\"v-3e82f83f#55/33\",\"7717\":\"v-3e82f83f#56\",\"7718\":\"v-3e82f83f#56/34\",\"7719\":\"v-3e82f83f#56/35\",\"7720\":\"v-3e82f83f#56/36\",\"7721\":\"v-3e82f83f#56/37\",\"7722\":\"v-3e82f83f#57\",\"7723\":\"v-3e82f83f#57/38\",\"7724\":\"v-3e82f83f#57/39\",\"7725\":\"v-3e82f83f#57/40\",\"7726\":\"v-3e82f83f#58\",\"7727\":\"v-3e82f83f#58/0\",\"7728\":\"v-3e82f83f#58/1\",\"7729\":\"v-3611b120\",\"7730\":\"v-3611b120#1\",\"7731\":\"v-3611b120#2\",\"7732\":\"v-3611b120#2/0\",\"7733\":\"v-3611b120#3\",\"7734\":\"v-3611b120#3/0\",\"7735\":\"v-3611b120#4\",\"7736\":\"v-3611b120#4/0\",\"7737\":\"v-3611b120#4/1\",\"7738\":\"v-3611b120#4/2\",\"7739\":\"v-3611b120#5\",\"7740\":\"v-3611b120#6\",\"7741\":\"v-3611b120#7\",\"7742\":\"v-3611b120#7/0\",\"7743\":\"v-3611b120#7/1\",\"7744\":\"v-3611b120#8\",\"7745\":\"v-3611b120#8/2\",\"7746\":\"v-3611b120#8/3\",\"7747\":\"v-3611b120#9\",\"7748\":\"v-3611b120#9/4\",\"7749\":\"v-3611b120#9/5\",\"7750\":\"v-3611b120#10\",\"7751\":\"v-3611b120#11\",\"7752\":\"v-3611b120#11/6\",\"7753\":\"v-3611b120#11/7\",\"7754\":\"v-3611b120#12\",\"7755\":\"v-3611b120#12/8\",\"7756\":\"v-3611b120#12/9\",\"7757\":\"v-3611b120#13\",\"7758\":\"v-3611b120#14\",\"7759\":\"v-3611b120#14/10\",\"7760\":\"v-3611b120#14/11\",\"7761\":\"v-3611b120#15\",\"7762\":\"v-3611b120#15/12\",\"7763\":\"v-3611b120#15/13\",\"7764\":\"v-5d5ace0a\",\"7765\":\"v-5d5ace0a#0/0\",\"7766\":\"v-5d5ace0a#0/1\",\"7767\":\"v-5d5ace0a#0/2\",\"7768\":\"v-5d5ace0a#1\",\"7769\":\"v-5d5ace0a#2\",\"7770\":\"v-5d5ace0a#3\",\"7771\":\"v-5d5ace0a#4\",\"7772\":\"v-5d5ace0a#5\",\"7773\":\"v-5d5ace0a#6\",\"7774\":\"v-5d5ace0a#7\",\"7775\":\"v-5d5ace0a#8\",\"7776\":\"v-5d5ace0a#9\",\"7777\":\"v-5d5ace0a#10\",\"7778\":\"v-5d5ace0a#11\",\"7779\":\"v-5d5ace0a#12\",\"7780\":\"v-5d5ace0a#13\",\"7781\":\"v-5d5ace0a#14\",\"7782\":\"v-18070eda\",\"7783\":\"v-18070eda#0/0\",\"7784\":\"v-18070eda#0/1\",\"7785\":\"v-18070eda#0/2\",\"7786\":\"v-18070eda#0/3\",\"7787\":\"v-18070eda#1\",\"7788\":\"v-18070eda#1/0\",\"7789\":\"v-18070eda#1/1\",\"7790\":\"v-18070eda#1/2\",\"7791\":\"v-18070eda#2\",\"7792\":\"v-18070eda#2/0\",\"7793\":\"v-18070eda#2/1\",\"7794\":\"v-18070eda#2/2\",\"7795\":\"v-18070eda#2/3\",\"7796\":\"v-18070eda#2/4\",\"7797\":\"v-18070eda#3\",\"7798\":\"v-18070eda#3/0\",\"7799\":\"v-18070eda#3/1\",\"7800\":\"v-18070eda#3/2\",\"7801\":\"v-18070eda#4\",\"7802\":\"v-18070eda#4/0\",\"7803\":\"v-18070eda#5\",\"7804\":\"v-18070eda#5/0\",\"7805\":\"v-18070eda#6\",\"7806\":\"v-18070eda#6/0\",\"7807\":\"v-18070eda#7\",\"7808\":\"v-18070eda#7/0\",\"7809\":\"v-18070eda#7/1\",\"7810\":\"v-18070eda#7/2\",\"7811\":\"v-18070eda#8\",\"7812\":\"v-18070eda#8/0\",\"7813\":\"v-23acedac\",\"7814\":\"v-23acedac#1\",\"7815\":\"v-23acedac#2\",\"7816\":\"v-23acedac#2/0\",\"7817\":\"v-23acedac#2/1\",\"7818\":\"v-23acedac#3\",\"7819\":\"v-23acedac#3/0\",\"7820\":\"v-23acedac#3/1\",\"7821\":\"v-23acedac#4\",\"7822\":\"v-23acedac#4/0\",\"7823\":\"v-23acedac#4/1\",\"7824\":\"v-23acedac#4/2\",\"7825\":\"v-23acedac#4/3\",\"7826\":\"v-23acedac#5\",\"7827\":\"v-23acedac#5/0\",\"7828\":\"v-23acedac#5/1\",\"7829\":\"v-23acedac#5/2\",\"7830\":\"v-23acedac#5/3\",\"7831\":\"v-23acedac#6\",\"7832\":\"v-23acedac#6/0\",\"7833\":\"v-23acedac#6/1\",\"7834\":\"v-23acedac#6/2\",\"7835\":\"v-23acedac#6/3\",\"7836\":\"v-23acedac#7\",\"7837\":\"v-23acedac#7/0\",\"7838\":\"v-23acedac#7/1\",\"7839\":\"v-23acedac#7/2\",\"7840\":\"v-23acedac#7/3\",\"7841\":\"v-23acedac#8\",\"7842\":\"v-23acedac#8/0\",\"7843\":\"v-23acedac#9\",\"7844\":\"v-23acedac#9/0\",\"7845\":\"v-23acedac#9/1\",\"7846\":\"v-23acedac#9/2\",\"7847\":\"v-23acedac#10\",\"7848\":\"v-23acedac#10/3\",\"7849\":\"v-23acedac#11\",\"7850\":\"v-23acedac#11/0\",\"7851\":\"v-23acedac#12\",\"7852\":\"v-23acedac#12/0\",\"7853\":\"v-23acedac#12/1\",\"7854\":\"v-23acedac#12/2\",\"7855\":\"v-23acedac#13\",\"7856\":\"v-23acedac#13/0\",\"7857\":\"v-23acedac#13/1\",\"7858\":\"v-23acedac#13/2\",\"7859\":\"v-23acedac#13/3\",\"7860\":\"v-23acedac#14\",\"7861\":\"v-23acedac#14/0\",\"7862\":\"v-23acedac#14/1\",\"7863\":\"v-23acedac#15\",\"7864\":\"v-23acedac#15/2\",\"7865\":\"v-23acedac#15/3\",\"7866\":\"v-23acedac#16\",\"7867\":\"v-23acedac#16/4\",\"7868\":\"v-23acedac#17\",\"7869\":\"v-23acedac#17/0\",\"7870\":\"v-23acedac#17/1\",\"7871\":\"v-23acedac#17/2\",\"7872\":\"v-23acedac#18\",\"7873\":\"v-23acedac#18/3\",\"7874\":\"v-23acedac#19\",\"7875\":\"v-23acedac#19/4\",\"7876\":\"v-23acedac#19/5\",\"7877\":\"v-6cdcc950\",\"7878\":\"v-6cdcc950#1\",\"7879\":\"v-6cdcc950#2\",\"7880\":\"v-6cdcc950#2/0\",\"7881\":\"v-6cdcc950#3\",\"7882\":\"v-6cdcc950#3/0\",\"7883\":\"v-6cdcc950#3/1\",\"7884\":\"v-6cdcc950#3/2\",\"7885\":\"v-6cdcc950#3/3\",\"7886\":\"v-6cdcc950#3/4\",\"7887\":\"v-6cdcc950#4\",\"7888\":\"v-6cdcc950#5\",\"7889\":\"v-6cdcc950#5/0\",\"7890\":\"v-6cdcc950#6\",\"7891\":\"v-6cdcc950#6/1\",\"7892\":\"v-6cdcc950#6/2\",\"7893\":\"v-6cdcc950#6/3\",\"7894\":\"v-6cdcc950#7\",\"7895\":\"v-6cdcc950#7/4\",\"7896\":\"v-6cdcc950#7/5\",\"7897\":\"v-6cdcc950#8\",\"7898\":\"v-6cdcc950#8/0\",\"7899\":\"v-6cdcc950#8/1\",\"7900\":\"v-6cdcc950#8/2\",\"7901\":\"v-6cdcc950#8/3\",\"7902\":\"v-6cdcc950#9\",\"7903\":\"v-6cdcc950#9/0\",\"7904\":\"v-6cdcc950#9/1\",\"7905\":\"v-6cdcc950#9/2\",\"7906\":\"v-6cdcc950#9/3\",\"7907\":\"v-6cdcc950#9/4\",\"7908\":\"v-6cdcc950#9/5\",\"7909\":\"v-6cdcc950#9/6\",\"7910\":\"v-6cdcc950#9/7\",\"7911\":\"v-6cdcc950#9/8\",\"7912\":\"v-6cdcc950#9/9\",\"7913\":\"v-6cdcc950#9/10\",\"7914\":\"v-6cdcc950#9/11\",\"7915\":\"v-6cdcc950#9/12\",\"7916\":\"v-6cdcc950#9/13\",\"7917\":\"v-6cdcc950#9/14\",\"7918\":\"v-6cdcc950#9/15\",\"7919\":\"v-6cdcc950#9/16\",\"7920\":\"v-6cdcc950#9/17\",\"7921\":\"v-6cdcc950#9/18\",\"7922\":\"v-6cdcc950#9/19\",\"7923\":\"v-6cdcc950#9/20\",\"7924\":\"v-6cdcc950#9/21\",\"7925\":\"v-6cdcc950#10\",\"7926\":\"v-6cdcc950#11\",\"7927\":\"v-6cdcc950#11/0\",\"7928\":\"v-6cdcc950#12\",\"7929\":\"v-6cdcc950#12/0\",\"7930\":\"v-6cdcc950#13\",\"7931\":\"v-6cdcc950#13/0\",\"7932\":\"v-6cdcc950#13/1\",\"7933\":\"v-6cdcc950#13/2\",\"7934\":\"v-6cdcc950#13/3\",\"7935\":\"v-6cdcc950#13/4\",\"7936\":\"v-6cdcc950#13/5\",\"7937\":\"v-6cdcc950#13/6\",\"7938\":\"v-6cdcc950#13/7\",\"7939\":\"v-6cdcc950#13/8\",\"7940\":\"v-6cdcc950#13/9\",\"7941\":\"v-6cdcc950#13/10\",\"7942\":\"v-6cdcc950#13/11\",\"7943\":\"v-6cdcc950#13/12\",\"7944\":\"v-6cdcc950#14\",\"7945\":\"v-6cdcc950#14/0\",\"7946\":\"v-6cdcc950#14/1\",\"7947\":\"v-6cdcc950#14/2\",\"7948\":\"v-6cdcc950#15\",\"7949\":\"v-6cdcc950#16\",\"7950\":\"v-6cdcc950#16/3\",\"7951\":\"v-6cdcc950#16/4\",\"7952\":\"v-6cdcc950#16/5\",\"7953\":\"v-6cdcc950#17\",\"7954\":\"v-6cdcc950#17/6\",\"7955\":\"v-6cdcc950#17/7\",\"7956\":\"v-6cdcc950#17/8\",\"7957\":\"v-6cdcc950#18\",\"7958\":\"v-6cdcc950#18/9\",\"7959\":\"v-6cdcc950#18/10\",\"7960\":\"v-6cdcc950#18/11\",\"7961\":\"v-6cdcc950#18/12\",\"7962\":\"v-6cdcc950#18/13\",\"7963\":\"v-6cdcc950#18/14\",\"7964\":\"v-6cdcc950#18/15\",\"7965\":\"v-6cdcc950#18/16\",\"7966\":\"v-6cdcc950#18/17\",\"7967\":\"v-6cdcc950#19\",\"7968\":\"v-6cdcc950#19/0\",\"7969\":\"v-6cdcc950#20\",\"7970\":\"v-6cdcc950#20/0\",\"7971\":\"v-6cdcc950#21\",\"7972\":\"v-6cdcc950#21/1\",\"7973\":\"v-6cdcc950#21/2\",\"7974\":\"v-6cdcc950#22\",\"7975\":\"v-6cdcc950#22/0\",\"7976\":\"v-6cdcc950#23\",\"7977\":\"v-6cdcc950#23/1\",\"7978\":\"v-6cdcc950#23/2\",\"7979\":\"v-6cdcc950#24\",\"7980\":\"v-6cdcc950#24/3\",\"7981\":\"v-6cdcc950#25\",\"7982\":\"v-6cdcc950#25/4\",\"7983\":\"v-6cdcc950#26\",\"7984\":\"v-6cdcc950#26/0\",\"7985\":\"v-6cdcc950#27\",\"7986\":\"v-6cdcc950#27/0\",\"7987\":\"v-6cdcc950#27/1\",\"7988\":\"v-6cdcc950#28\",\"7989\":\"v-6cdcc950#28/0\",\"7990\":\"v-6cdcc950#29\",\"7991\":\"v-6cdcc950#29/1\",\"7992\":\"v-6cdcc950#30\",\"7993\":\"v-6cdcc950#30/2\",\"7994\":\"v-6cdcc950#31\",\"7995\":\"v-6cdcc950#31/0\",\"7996\":\"v-6cdcc950#31/1\",\"7997\":\"v-6cdcc950#32\",\"7998\":\"v-6cdcc950#33\",\"7999\":\"v-6cdcc950#33/0\",\"8000\":\"v-6cdcc950#33/1\",\"8001\":\"v-6cdcc950#34\",\"8002\":\"v-6cdcc950#34/2\",\"8003\":\"v-6cdcc950#35\",\"8004\":\"v-6cdcc950#35/0\",\"8005\":\"v-6cdcc950#35/1\",\"8006\":\"v-6cdcc950#36\",\"8007\":\"v-6cdcc950#37\",\"8008\":\"v-6cdcc950#37/0\",\"8009\":\"v-6cdcc950#37/1\",\"8010\":\"v-6cdcc950#38\",\"8011\":\"v-6cdcc950#38/2\",\"8012\":\"v-6cdcc950#38/3\",\"8013\":\"v-6cdcc950#38/4\",\"8014\":\"v-6cdcc950#38/5\",\"8015\":\"v-6cdcc950#38/6\",\"8016\":\"v-6cdcc950#38/7\",\"8017\":\"v-6cdcc950#39\",\"8018\":\"v-6cdcc950#39/8\",\"8019\":\"v-6cdcc950#39/9\",\"8020\":\"v-6cdcc950#40\",\"8021\":\"v-6cdcc950#40/10\",\"8022\":\"v-6cdcc950#40/11\",\"8023\":\"v-6cdcc950#40/12\",\"8024\":\"v-6cdcc950#40/13\",\"8025\":\"v-6cdcc950#40/14\",\"8026\":\"v-6cdcc950#40/15\",\"8027\":\"v-6cdcc950#40/16\",\"8028\":\"v-6cdcc950#41\",\"8029\":\"v-6cdcc950#41/0\",\"8030\":\"v-6cdcc950#42\",\"8031\":\"v-6cdcc950#42/0\",\"8032\":\"v-6cdcc950#42/1\",\"8033\":\"v-6cdcc950#43\",\"8034\":\"v-6cdcc950#43/0\",\"8035\":\"v-6cdcc950#44\",\"8036\":\"v-6cdcc950#44/0\",\"8037\":\"v-6cdcc950#44/1\",\"8038\":\"v-6cdcc950#45\",\"8039\":\"v-6cdcc950#45/2\",\"8040\":\"v-6cdcc950#46\",\"8041\":\"v-6cdcc950#46/0\",\"8042\":\"v-6cdcc950#46/1\",\"8043\":\"v-6cdcc950#47\",\"8044\":\"v-6cdcc950#47/2\",\"8045\":\"v-6cdcc950#47/3\",\"8046\":\"v-6cdcc950#48\",\"8047\":\"v-6cdcc950#48/4\",\"8048\":\"v-6cdcc950#49\",\"8049\":\"v-6cdcc950#49/5\",\"8050\":\"v-6cdcc950#49/6\",\"8051\":\"v-6cdcc950#49/7\",\"8052\":\"v-6cdcc950#50\",\"8053\":\"v-6cdcc950#50/0\",\"8054\":\"v-6cdcc950#50/1\",\"8055\":\"v-6cdcc950#51\",\"8056\":\"v-6cdcc950#51/2\",\"8057\":\"v-6cdcc950#52\",\"8058\":\"v-6cdcc950#52/3\",\"8059\":\"v-6cdcc950#52/4\",\"8060\":\"v-6cdcc950#53\",\"8061\":\"v-6cdcc950#53/0\",\"8062\":\"v-6cdcc950#53/1\",\"8063\":\"v-433f3da8\",\"8064\":\"v-433f3da8#0/0\",\"8065\":\"v-433f3da8#1\",\"8066\":\"v-433f3da8#1/0\",\"8067\":\"v-433f3da8#1/1\",\"8068\":\"v-433f3da8#1/2\",\"8069\":\"v-433f3da8#1/3\",\"8070\":\"v-433f3da8#1/4\",\"8071\":\"v-433f3da8#1/5\",\"8072\":\"v-433f3da8#1/6\",\"8073\":\"v-433f3da8#1/7\",\"8074\":\"v-433f3da8#2\",\"8075\":\"v-433f3da8#2/0\",\"8076\":\"v-433f3da8#3\",\"8077\":\"v-433f3da8#3/0\",\"8078\":\"v-433f3da8#3/1\",\"8079\":\"v-433f3da8#3/2\",\"8080\":\"v-433f3da8#4\",\"8081\":\"v-433f3da8#4/3\",\"8082\":\"v-433f3da8#4/4\",\"8083\":\"v-433f3da8#5\",\"8084\":\"v-433f3da8#5/0\",\"8085\":\"v-433f3da8#5/1\",\"8086\":\"v-433f3da8#5/2\",\"8087\":\"v-433f3da8#6\",\"8088\":\"v-433f3da8#6/0\",\"8089\":\"v-433f3da8#6/1\",\"8090\":\"v-9f2f38a4\",\"8091\":\"v-9f2f38a4#0/0\",\"8092\":\"v-9f2f38a4#0/1\",\"8093\":\"v-9f2f38a4#1\",\"8094\":\"v-9f2f38a4#2\",\"8095\":\"v-9f2f38a4#2/0\",\"8096\":\"v-9f2f38a4#2/1\",\"8097\":\"v-9f2f38a4#3\",\"8098\":\"v-9f2f38a4#3/2\",\"8099\":\"v-9f2f38a4#3/3\",\"8100\":\"v-9f2f38a4#4\",\"8101\":\"v-9f2f38a4#4/4\",\"8102\":\"v-9f2f38a4#4/5\",\"8103\":\"v-9f2f38a4#5\",\"8104\":\"v-9f2f38a4#5/6\",\"8105\":\"v-9f2f38a4#5/7\",\"8106\":\"v-9f2f38a4#6\",\"8107\":\"v-9f2f38a4#6/8\",\"8108\":\"v-9f2f38a4#6/9\",\"8109\":\"v-9f2f38a4#6/10\",\"8110\":\"v-9f2f38a4#7\",\"8111\":\"v-9f2f38a4#7/11\",\"8112\":\"v-9f2f38a4#7/12\",\"8113\":\"v-9f2f38a4#7/13\",\"8114\":\"v-9f2f38a4#8\",\"8115\":\"v-9f2f38a4#8/14\",\"8116\":\"v-9f2f38a4#8/15\",\"8117\":\"v-9f2f38a4#9\",\"8118\":\"v-9f2f38a4#9/0\",\"8119\":\"v-9f2f38a4#9/1\",\"8120\":\"v-9f2f38a4#10\",\"8121\":\"v-9f2f38a4#10/0\",\"8122\":\"v-9f2f38a4#11\",\"8123\":\"v-9f2f38a4#11/1\",\"8124\":\"v-9f2f38a4#11/2\",\"8125\":\"v-9f2f38a4#11/3\",\"8126\":\"v-9f2f38a4#11/4\",\"8127\":\"v-da323a7c\",\"8128\":\"v-da323a7c#0/0\",\"8129\":\"v-da323a7c#0/1\",\"8130\":\"v-da323a7c#1\",\"8131\":\"v-da323a7c#1/0\",\"8132\":\"v-da323a7c#2\",\"8133\":\"v-da323a7c#2/0\",\"8134\":\"v-da323a7c#2/1\",\"8135\":\"v-da323a7c#3\",\"8136\":\"v-da323a7c#3/2\",\"8137\":\"v-da323a7c#4\",\"8138\":\"v-da323a7c#4/3\",\"8139\":\"v-da323a7c#5\",\"8140\":\"v-da323a7c#5/4\",\"8141\":\"v-da323a7c#5/5\",\"8142\":\"v-da323a7c#6\",\"8143\":\"v-da323a7c#6/0\",\"8144\":\"v-da323a7c#7\",\"8145\":\"v-da323a7c#8\",\"8146\":\"v-da323a7c#8/0\",\"8147\":\"v-da323a7c#9\",\"8148\":\"v-da323a7c#9/1\",\"8149\":\"v-da323a7c#10\",\"8150\":\"v-da323a7c#10/2\",\"8151\":\"v-da323a7c#10/3\",\"8152\":\"v-da323a7c#11\",\"8153\":\"v-da323a7c#11/0\",\"8154\":\"v-da323a7c#12\",\"8155\":\"v-da323a7c#12/1\",\"8156\":\"v-da323a7c#12/2\",\"8157\":\"v-da323a7c#12/3\",\"8158\":\"v-da323a7c#12/4\",\"8159\":\"v-da323a7c#12/5\",\"8160\":\"v-da323a7c#12/6\",\"8161\":\"v-da323a7c#13\",\"8162\":\"v-da323a7c#13/7\",\"8163\":\"v-7a69a2a0\",\"8164\":\"v-7a69a2a0#1\",\"8165\":\"v-7a69a2a0#2\",\"8166\":\"v-7a69a2a0#2/0\",\"8167\":\"v-7a69a2a0#2/1\",\"8168\":\"v-7a69a2a0#2/2\",\"8169\":\"v-7a69a2a0#3\",\"8170\":\"v-7a69a2a0#3/0\",\"8171\":\"v-7a69a2a0#4\",\"8172\":\"v-7a69a2a0#4/0\",\"8173\":\"v-7a69a2a0#4/1\",\"8174\":\"v-7a69a2a0#4/2\",\"8175\":\"v-7a69a2a0#5\",\"8176\":\"v-7a69a2a0#6\",\"8177\":\"v-7a69a2a0#7\",\"8178\":\"v-7a69a2a0#7/0\",\"8179\":\"v-7a69a2a0#8\",\"8180\":\"v-7a69a2a0#8/0\",\"8181\":\"v-7a69a2a0#8/1\",\"8182\":\"v-7a69a2a0#8/2\",\"8183\":\"v-7a69a2a0#8/3\",\"8184\":\"v-7a69a2a0#9\",\"8185\":\"v-7a69a2a0#9/0\",\"8186\":\"v-7a69a2a0#10\",\"8187\":\"v-7a69a2a0#10/0\",\"8188\":\"v-7a69a2a0#10/1\",\"8189\":\"v-7a69a2a0#11\",\"8190\":\"v-7a69a2a0#11/0\",\"8191\":\"v-7a69a2a0#11/1\",\"8192\":\"v-7a69a2a0#11/2\",\"8193\":\"v-7a69a2a0#12\",\"8194\":\"v-7a69a2a0#12/0\",\"8195\":\"v-7a69a2a0#12/1\",\"8196\":\"v-7a69a2a0#12/2\",\"8197\":\"v-7a69a2a0#12/3\",\"8198\":\"v-7a69a2a0#12/4\",\"8199\":\"v-7a69a2a0#12/5\",\"8200\":\"v-7a69a2a0#13\",\"8201\":\"v-7a69a2a0#13/0\",\"8202\":\"v-7a69a2a0#14\",\"8203\":\"v-7a69a2a0#15\",\"8204\":\"v-7a69a2a0#15/1\",\"8205\":\"v-7a69a2a0#15/2\",\"8206\":\"v-7a69a2a0#16\",\"8207\":\"v-7a69a2a0#16/3\",\"8208\":\"v-7a69a2a0#17\",\"8209\":\"v-7a69a2a0#17/4\",\"8210\":\"v-7a69a2a0#17/5\",\"8211\":\"v-2c4afa32\",\"8212\":\"v-2c4afa32#1\",\"8213\":\"v-2c4afa32#2\",\"8214\":\"v-2c4afa32#3\",\"8215\":\"v-2c4afa32#3/0\",\"8216\":\"v-2c4afa32#3/1\",\"8217\":\"v-2c4afa32#3/2\",\"8218\":\"v-2c4afa32#4\",\"8219\":\"v-2c4afa32#4/0\",\"8220\":\"v-2c4afa32#4/1\",\"8221\":\"v-2c4afa32#4/2\",\"8222\":\"v-2c4afa32#4/3\",\"8223\":\"v-2c4afa32#4/4\",\"8224\":\"v-2c4afa32#5\",\"8225\":\"v-2c4afa32#5/0\",\"8226\":\"v-2c4afa32#6\",\"8227\":\"v-2c4afa32#6/0\",\"8228\":\"v-2c4afa32#6/1\",\"8229\":\"v-2c4afa32#7\",\"8230\":\"v-2c4afa32#7/0\",\"8231\":\"v-2c4afa32#7/1\",\"8232\":\"v-2c4afa32#8\",\"8233\":\"v-2c4afa32#8/0\",\"8234\":\"v-2c4afa32#8/1\",\"8235\":\"v-2c4afa32#8/2\",\"8236\":\"v-2c4afa32#9\",\"8237\":\"v-2c4afa32#9/0\",\"8238\":\"v-2c4afa32#9/1\",\"8239\":\"v-2c4afa32#9/2\",\"8240\":\"v-2c4afa32#9/3\",\"8241\":\"v-2c4afa32#10\",\"8242\":\"v-2c4afa32#10/0\",\"8243\":\"v-2c4afa32#10/1\",\"8244\":\"v-2c4afa32#10/2\",\"8245\":\"v-2c4afa32#10/3\",\"8246\":\"v-2c4afa32#10/4\",\"8247\":\"v-2c4afa32#10/5\",\"8248\":\"v-2c4afa32#10/6\",\"8249\":\"v-2c4afa32#11\",\"8250\":\"v-2c4afa32#11/0\",\"8251\":\"v-2c4afa32#11/1\",\"8252\":\"v-2c4afa32#12\",\"8253\":\"v-2c4afa32#12/0\",\"8254\":\"v-2c4afa32#13\",\"8255\":\"v-2c4afa32#13/0\",\"8256\":\"v-2c4afa32#13/1\",\"8257\":\"v-2c4afa32#13/2\",\"8258\":\"v-2c4afa32#14\",\"8259\":\"v-2c4afa32#14/0\",\"8260\":\"v-2c4afa32#14/1\",\"8261\":\"v-2c4afa32#15\",\"8262\":\"v-2c4afa32#15/2\",\"8263\":\"v-2c4afa32#15/3\",\"8264\":\"v-2c4afa32#16\",\"8265\":\"v-2c4afa32#16/4\",\"8266\":\"v-2c4afa32#16/5\",\"8267\":\"v-2c4afa32#16/6\",\"8268\":\"v-2c4afa32#16/7\",\"8269\":\"v-2c4afa32#16/8\",\"8270\":\"v-2c4afa32#16/9\",\"8271\":\"v-2c4afa32#16/10\",\"8272\":\"v-2c4afa32#16/11\",\"8273\":\"v-2c4afa32#16/12\",\"8274\":\"v-2c4afa32#16/13\",\"8275\":\"v-2c4afa32#16/14\",\"8276\":\"v-2c4afa32#16/15\",\"8277\":\"v-2c4afa32#16/16\",\"8278\":\"v-2c4afa32#16/17\",\"8279\":\"v-2c4afa32#16/18\",\"8280\":\"v-2c4afa32#16/19\",\"8281\":\"v-2c4afa32#16/20\",\"8282\":\"v-2c4afa32#16/21\",\"8283\":\"v-2c4afa32#16/22\",\"8284\":\"v-2c4afa32#16/23\",\"8285\":\"v-2c4afa32#16/24\",\"8286\":\"v-2c4afa32#16/25\",\"8287\":\"v-2c4afa32#16/26\",\"8288\":\"v-2c4afa32#16/27\",\"8289\":\"v-2c4afa32#16/28\",\"8290\":\"v-2c4afa32#16/29\",\"8291\":\"v-2c4afa32#16/30\",\"8292\":\"v-2c4afa32#16/31\",\"8293\":\"v-2c4afa32#16/32\",\"8294\":\"v-2c4afa32#16/33\",\"8295\":\"v-2c4afa32#16/34\",\"8296\":\"v-2c4afa32#16/35\",\"8297\":\"v-2c4afa32#16/36\",\"8298\":\"v-2c4afa32#16/37\",\"8299\":\"v-2c4afa32#16/38\",\"8300\":\"v-2c4afa32#16/39\",\"8301\":\"v-2c4afa32#16/40\",\"8302\":\"v-2c4afa32#16/41\",\"8303\":\"v-2c4afa32#16/42\",\"8304\":\"v-2c4afa32#16/43\",\"8305\":\"v-2c4afa32#16/44\",\"8306\":\"v-2c4afa32#16/45\",\"8307\":\"v-2c4afa32#16/46\",\"8308\":\"v-2c4afa32#16/47\",\"8309\":\"v-2c4afa32#16/48\",\"8310\":\"v-2c4afa32#16/49\",\"8311\":\"v-2c4afa32#16/50\",\"8312\":\"v-2c4afa32#16/51\",\"8313\":\"v-2c4afa32#16/52\",\"8314\":\"v-2c4afa32#16/53\",\"8315\":\"v-2c4afa32#16/54\",\"8316\":\"v-2c4afa32#16/55\",\"8317\":\"v-2c4afa32#16/56\",\"8318\":\"v-2c4afa32#16/57\",\"8319\":\"v-2c4afa32#16/58\",\"8320\":\"v-2c4afa32#16/59\",\"8321\":\"v-2c4afa32#16/60\",\"8322\":\"v-2c4afa32#17\",\"8323\":\"v-2c4afa32#17/0\",\"8324\":\"v-2c4afa32#17/1\",\"8325\":\"v-2c4afa32#18\",\"8326\":\"v-2c4afa32#18/2\",\"8327\":\"v-765a569d\",\"8328\":\"v-765a569d#1\",\"8329\":\"v-765a569d#2\",\"8330\":\"v-765a569d#2/0\",\"8331\":\"v-765a569d#2/1\",\"8332\":\"v-765a569d#3\",\"8333\":\"v-765a569d#3/0\",\"8334\":\"v-765a569d#4\",\"8335\":\"v-765a569d#4/0\",\"8336\":\"v-765a569d#4/1\",\"8337\":\"v-765a569d#4/2\",\"8338\":\"v-765a569d#5\",\"8339\":\"v-765a569d#5/0\",\"8340\":\"v-765a569d#5/1\",\"8341\":\"v-765a569d#5/2\",\"8342\":\"v-765a569d#5/3\",\"8343\":\"v-765a569d#5/4\",\"8344\":\"v-765a569d#5/5\",\"8345\":\"v-765a569d#5/6\",\"8346\":\"v-765a569d#5/7\",\"8347\":\"v-765a569d#5/8\",\"8348\":\"v-765a569d#6\",\"8349\":\"v-765a569d#6/0\",\"8350\":\"v-765a569d#6/1\",\"8351\":\"v-765a569d#6/2\",\"8352\":\"v-765a569d#6/3\",\"8353\":\"v-765a569d#6/4\",\"8354\":\"v-765a569d#6/5\",\"8355\":\"v-765a569d#6/6\",\"8356\":\"v-765a569d#6/7\",\"8357\":\"v-765a569d#6/8\",\"8358\":\"v-765a569d#6/9\",\"8359\":\"v-765a569d#6/10\",\"8360\":\"v-765a569d#6/11\",\"8361\":\"v-765a569d#6/12\",\"8362\":\"v-765a569d#6/13\",\"8363\":\"v-765a569d#6/14\",\"8364\":\"v-765a569d#6/15\",\"8365\":\"v-765a569d#6/16\",\"8366\":\"v-765a569d#6/17\",\"8367\":\"v-765a569d#7\",\"8368\":\"v-765a569d#7/0\",\"8369\":\"v-765a569d#7/1\",\"8370\":\"v-765a569d#7/2\",\"8371\":\"v-765a569d#7/3\",\"8372\":\"v-765a569d#7/4\",\"8373\":\"v-765a569d#7/5\",\"8374\":\"v-765a569d#7/6\",\"8375\":\"v-765a569d#7/7\",\"8376\":\"v-765a569d#7/8\",\"8377\":\"v-765a569d#7/9\",\"8378\":\"v-765a569d#7/10\",\"8379\":\"v-765a569d#8\",\"8380\":\"v-765a569d#9\",\"8381\":\"v-765a569d#9/0\",\"8382\":\"v-765a569d#10\",\"8383\":\"v-765a569d#10/1\",\"8384\":\"v-765a569d#11\",\"8385\":\"v-765a569d#11/2\",\"8386\":\"v-765a569d#12\",\"8387\":\"v-765a569d#12/3\",\"8388\":\"v-765a569d#13\",\"8389\":\"v-765a569d#13/4\",\"8390\":\"v-765a569d#14\",\"8391\":\"v-765a569d#14/5\",\"8392\":\"v-38eee582\",\"8393\":\"v-38eee582#1\",\"8394\":\"v-38eee582#2\",\"8395\":\"v-38eee582#2/0\",\"8396\":\"v-38eee582#2/1\",\"8397\":\"v-38eee582#2/2\",\"8398\":\"v-38eee582#2/3\",\"8399\":\"v-38eee582#3\",\"8400\":\"v-38eee582#3/0\",\"8401\":\"v-38eee582#3/1\",\"8402\":\"v-38eee582#3/2\",\"8403\":\"v-38eee582#3/3\",\"8404\":\"v-38eee582#4\",\"8405\":\"v-38eee582#4/0\",\"8406\":\"v-38eee582#4/1\",\"8407\":\"v-38eee582#4/2\",\"8408\":\"v-38eee582#4/3\",\"8409\":\"v-38eee582#5\",\"8410\":\"v-38eee582#5/0\",\"8411\":\"v-38eee582#5/1\",\"8412\":\"v-38eee582#5/2\",\"8413\":\"v-38eee582#5/3\",\"8414\":\"v-38eee582#5/4\",\"8415\":\"v-38eee582#6\",\"8416\":\"v-38eee582#6/0\",\"8417\":\"v-38eee582#6/1\",\"8418\":\"v-38eee582#6/2\",\"8419\":\"v-38eee582#7\",\"8420\":\"v-38eee582#7/0\",\"8421\":\"v-38eee582#8\",\"8422\":\"v-38eee582#8/0\",\"8423\":\"v-38eee582#8/1\",\"8424\":\"v-38eee582#8/2\",\"8425\":\"v-38eee582#8/3\",\"8426\":\"v-38eee582#8/4\",\"8427\":\"v-38eee582#9\",\"8428\":\"v-38eee582#9/0\",\"8429\":\"v-38eee582#9/1\",\"8430\":\"v-38eee582#10\",\"8431\":\"v-38eee582#10/0\",\"8432\":\"v-38eee582#11\",\"8433\":\"v-38eee582#11/0\",\"8434\":\"v-38eee582#11/1\",\"8435\":\"v-38eee582#11/2\",\"8436\":\"v-38eee582#12\",\"8437\":\"v-38eee582#12/0\",\"8438\":\"v-38eee582#12/1\",\"8439\":\"v-38eee582#12/2\",\"8440\":\"v-38eee582#13\",\"8441\":\"v-38eee582#13/0\",\"8442\":\"v-38eee582#13/1\",\"8443\":\"v-38eee582#13/2\",\"8444\":\"v-38eee582#14\",\"8445\":\"v-38eee582#15\",\"8446\":\"v-38eee582#15/0\",\"8447\":\"v-38eee582#15/1\",\"8448\":\"v-38eee582#15/2\",\"8449\":\"v-38eee582#16\",\"8450\":\"v-38eee582#16/0\",\"8451\":\"v-38eee582#16/1\",\"8452\":\"v-38eee582#16/2\",\"8453\":\"v-38eee582#17\",\"8454\":\"v-38eee582#17/3\",\"8455\":\"v-38eee582#17/4\",\"8456\":\"v-38eee582#18\",\"8457\":\"v-38eee582#19\",\"8458\":\"v-38eee582#19/0\",\"8459\":\"v-38eee582#20\",\"8460\":\"v-38eee582#20/0\",\"8461\":\"v-38eee582#21\",\"8462\":\"v-38eee582#21/0\",\"8463\":\"v-38eee582#21/1\",\"8464\":\"v-38eee582#22\",\"8465\":\"v-38eee582#22/0\",\"8466\":\"v-38eee582#22/1\",\"8467\":\"v-38eee582#23\",\"8468\":\"v-38eee582#23/0\",\"8469\":\"v-38eee582#23/1\",\"8470\":\"v-38eee582#23/2\",\"8471\":\"v-38eee582#23/3\",\"8472\":\"v-38eee582#24\",\"8473\":\"v-38eee582#24/4\",\"8474\":\"v-38eee582#24/5\",\"8475\":\"v-38eee582#24/6\",\"8476\":\"v-38eee582#24/7\",\"8477\":\"v-38eee582#24/8\",\"8478\":\"v-38eee582#24/9\",\"8479\":\"v-38eee582#24/10\",\"8480\":\"v-38eee582#25\",\"8481\":\"v-38eee582#25/0\",\"8482\":\"v-38eee582#25/1\",\"8483\":\"v-38eee582#25/2\",\"8484\":\"v-38eee582#26\",\"8485\":\"v-38eee582#26/3\",\"8486\":\"v-38eee582#27\",\"8487\":\"v-38eee582#27/0\",\"8488\":\"v-38eee582#28\",\"8489\":\"v-38eee582#28/0\",\"8490\":\"v-38eee582#28/1\",\"8491\":\"v-38eee582#28/2\",\"8492\":\"v-38eee582#29\",\"8493\":\"v-38eee582#29/0\",\"8494\":\"v-38eee582#29/1\",\"8495\":\"v-38eee582#30\",\"8496\":\"v-38eee582#30/0\",\"8497\":\"v-38eee582#30/1\",\"8498\":\"v-38eee582#30/2\",\"8499\":\"v-38eee582#30/3\",\"8500\":\"v-38eee582#30/4\",\"8501\":\"v-38eee582#30/5\",\"8502\":\"v-38eee582#31\",\"8503\":\"v-38eee582#31/0\",\"8504\":\"v-38eee582#31/1\",\"8505\":\"v-38eee582#31/2\",\"8506\":\"v-38eee582#31/3\",\"8507\":\"v-38eee582#31/4\",\"8508\":\"v-38eee582#31/5\",\"8509\":\"v-38eee582#31/6\",\"8510\":\"v-426c1fa0\",\"8511\":\"v-426c1fa0#1\",\"8512\":\"v-426c1fa0#1/0\",\"8513\":\"v-426c1fa0#2\",\"8514\":\"v-426c1fa0#2/0\",\"8515\":\"v-426c1fa0#3\",\"8516\":\"v-426c1fa0#3/0\",\"8517\":\"v-426c1fa0#3/1\",\"8518\":\"v-426c1fa0#3/2\",\"8519\":\"v-426c1fa0#3/3\",\"8520\":\"v-426c1fa0#4\",\"8521\":\"v-426c1fa0#5\",\"8522\":\"v-426c1fa0#6\",\"8523\":\"v-426c1fa0#6/0\",\"8524\":\"v-426c1fa0#6/1\",\"8525\":\"v-426c1fa0#7\",\"8526\":\"v-426c1fa0#7/0\",\"8527\":\"v-426c1fa0#7/1\",\"8528\":\"v-426c1fa0#7/2\",\"8529\":\"v-426c1fa0#7/3\",\"8530\":\"v-426c1fa0#7/4\",\"8531\":\"v-426c1fa0#8\",\"8532\":\"v-426c1fa0#8/0\",\"8533\":\"v-426c1fa0#9\",\"8534\":\"v-426c1fa0#9/0\",\"8535\":\"v-426c1fa0#9/1\",\"8536\":\"v-426c1fa0#10\",\"8537\":\"v-426c1fa0#10/0\",\"8538\":\"v-426c1fa0#10/1\",\"8539\":\"v-426c1fa0#10/2\",\"8540\":\"v-426c1fa0#10/3\",\"8541\":\"v-426c1fa0#11\",\"8542\":\"v-426c1fa0#11/0\",\"8543\":\"v-426c1fa0#11/1\",\"8544\":\"v-426c1fa0#11/2\",\"8545\":\"v-426c1fa0#12\",\"8546\":\"v-426c1fa0#13\",\"8547\":\"v-426c1fa0#13/0\",\"8548\":\"v-426c1fa0#13/1\",\"8549\":\"v-426c1fa0#13/2\",\"8550\":\"v-426c1fa0#13/3\",\"8551\":\"v-426c1fa0#14\",\"8552\":\"v-426c1fa0#14/0\",\"8553\":\"v-426c1fa0#15\",\"8554\":\"v-426c1fa0#15/0\",\"8555\":\"v-426c1fa0#15/1\",\"8556\":\"v-426c1fa0#16\",\"8557\":\"v-426c1fa0#16/0\",\"8558\":\"v-426c1fa0#17\",\"8559\":\"v-426c1fa0#17/0\",\"8560\":\"v-426c1fa0#17/1\",\"8561\":\"v-426c1fa0#17/2\",\"8562\":\"v-426c1fa0#17/3\",\"8563\":\"v-426c1fa0#18\",\"8564\":\"v-426c1fa0#18/0\",\"8565\":\"v-426c1fa0#19\",\"8566\":\"v-426c1fa0#19/0\",\"8567\":\"v-426c1fa0#19/1\",\"8568\":\"v-426c1fa0#19/2\",\"8569\":\"v-426c1fa0#19/3\",\"8570\":\"v-426c1fa0#19/4\",\"8571\":\"v-426c1fa0#20\",\"8572\":\"v-426c1fa0#21\",\"8573\":\"v-426c1fa0#21/0\",\"8574\":\"v-426c1fa0#21/1\",\"8575\":\"v-426c1fa0#22\",\"8576\":\"v-426c1fa0#22/0\",\"8577\":\"v-426c1fa0#22/1\",\"8578\":\"v-426c1fa0#22/2\",\"8579\":\"v-426c1fa0#22/3\",\"8580\":\"v-426c1fa0#23\",\"8581\":\"v-426c1fa0#23/4\",\"8582\":\"v-426c1fa0#23/5\",\"8583\":\"v-426c1fa0#24\",\"8584\":\"v-426c1fa0#24/0\",\"8585\":\"v-426c1fa0#24/1\",\"8586\":\"v-426c1fa0#24/2\",\"8587\":\"v-426c1fa0#24/3\",\"8588\":\"v-426c1fa0#25\",\"8589\":\"v-426c1fa0#25/0\",\"8590\":\"v-426c1fa0#26\",\"8591\":\"v-426c1fa0#26/0\",\"8592\":\"v-426c1fa0#26/1\",\"8593\":\"v-426c1fa0#26/2\",\"8594\":\"v-426c1fa0#26/3\",\"8595\":\"v-426c1fa0#26/4\",\"8596\":\"v-426c1fa0#26/5\",\"8597\":\"v-426c1fa0#26/6\",\"8598\":\"v-426c1fa0#26/7\",\"8599\":\"v-426c1fa0#26/8\",\"8600\":\"v-426c1fa0#26/9\",\"8601\":\"v-426c1fa0#26/10\",\"8602\":\"v-426c1fa0#26/11\",\"8603\":\"v-426c1fa0#27\",\"8604\":\"v-426c1fa0#27/0\",\"8605\":\"v-426c1fa0#27/1\",\"8606\":\"v-426c1fa0#28\",\"8607\":\"v-426c1fa0#28/2\",\"8608\":\"v-426c1fa0#28/3\",\"8609\":\"v-426c1fa0#29\",\"8610\":\"v-426c1fa0#29/0\",\"8611\":\"v-426c1fa0#29/1\",\"8612\":\"v-426c1fa0#30\",\"8613\":\"v-426c1fa0#30/0\",\"8614\":\"v-426c1fa0#30/1\",\"8615\":\"v-426c1fa0#31\",\"8616\":\"v-426c1fa0#31/2\",\"8617\":\"v-426c1fa0#31/3\",\"8618\":\"v-426c1fa0#32\",\"8619\":\"v-426c1fa0#33\",\"8620\":\"v-426c1fa0#33/0\",\"8621\":\"v-426c1fa0#33/1\",\"8622\":\"v-426c1fa0#34\",\"8623\":\"v-426c1fa0#34/2\",\"8624\":\"v-426c1fa0#34/3\",\"8625\":\"v-426c1fa0#35\",\"8626\":\"v-426c1fa0#35/0\",\"8627\":\"v-426c1fa0#35/1\",\"8628\":\"v-426c1fa0#35/2\",\"8629\":\"v-426c1fa0#35/3\",\"8630\":\"v-426c1fa0#36\",\"8631\":\"v-426c1fa0#36/0\",\"8632\":\"v-426c1fa0#36/1\",\"8633\":\"v-426c1fa0#37\",\"8634\":\"v-426c1fa0#38\",\"8635\":\"v-426c1fa0#38/2\",\"8636\":\"v-426c1fa0#38/3\",\"8637\":\"v-426c1fa0#39\",\"8638\":\"v-426c1fa0#39/0\",\"8639\":\"v-426c1fa0#40\",\"8640\":\"v-426c1fa0#40/1\",\"8641\":\"v-426c1fa0#40/2\",\"8642\":\"v-426c1fa0#41\",\"8643\":\"v-426c1fa0#41/0\",\"8644\":\"v-426c1fa0#41/1\",\"8645\":\"v-426c1fa0#41/2\",\"8646\":\"v-426c1fa0#41/3\",\"8647\":\"v-426c1fa0#42\",\"8648\":\"v-426c1fa0#42/0\",\"8649\":\"v-426c1fa0#42/1\",\"8650\":\"v-426c1fa0#42/2\",\"8651\":\"v-426c1fa0#42/3\",\"8652\":\"v-426c1fa0#43\",\"8653\":\"v-426c1fa0#43/4\",\"8654\":\"v-426c1fa0#43/5\",\"8655\":\"v-5cf0ae60\",\"8656\":\"v-5cf0ae60#0/0\",\"8657\":\"v-5cf0ae60#0/1\",\"8658\":\"v-5cf0ae60#0/2\",\"8659\":\"v-5cf0ae60#0/3\",\"8660\":\"v-5cf0ae60#0/4\",\"8661\":\"v-5cf0ae60#0/5\",\"8662\":\"v-5cf0ae60#0/6\",\"8663\":\"v-5cf0ae60#0/7\",\"8664\":\"v-5cf0ae60#0/8\",\"8665\":\"v-0fd3271c\",\"8666\":\"v-0fd3271c#0/0\",\"8667\":\"v-0fd3271c#0/1\",\"8668\":\"v-0fd3271c#1\",\"8669\":\"v-0fd3271c#1/0\",\"8670\":\"v-0fd3271c#1/1\",\"8671\":\"v-0fd3271c#1/2\",\"8672\":\"v-0fd3271c#1/3\",\"8673\":\"v-0fd3271c#2\",\"8674\":\"v-0fd3271c#2/0\",\"8675\":\"v-0fd3271c#2/1\",\"8676\":\"v-0fd3271c#2/2\",\"8677\":\"v-0fd3271c#2/3\",\"8678\":\"v-0fd3271c#3\",\"8679\":\"v-0fd3271c#3/0\",\"8680\":\"v-0fd3271c#3/1\",\"8681\":\"v-0fd3271c#4\",\"8682\":\"v-0fd3271c#4/0\",\"8683\":\"v-0fd3271c#5\",\"8684\":\"v-0fd3271c#5/0\",\"8685\":\"v-0fd3271c#5/1\",\"8686\":\"v-fc983098\",\"8687\":\"v-fc983098#1\",\"8688\":\"v-fc983098#2\",\"8689\":\"v-fc983098#2/0\",\"8690\":\"v-fc983098#2/1\",\"8691\":\"v-fc983098#2/2\",\"8692\":\"v-fc983098#2/3\",\"8693\":\"v-fc983098#2/4\",\"8694\":\"v-fc983098#2/5\",\"8695\":\"v-fc983098#2/6\",\"8696\":\"v-fc983098#2/7\",\"8697\":\"v-fc983098#3\",\"8698\":\"v-fc983098#3/0\",\"8699\":\"v-fc983098#3/1\",\"8700\":\"v-fc983098#3/2\",\"8701\":\"v-fc983098#3/3\",\"8702\":\"v-fc983098#4\",\"8703\":\"v-fc983098#4/0\",\"8704\":\"v-fc983098#4/1\",\"8705\":\"v-fc983098#5\",\"8706\":\"v-fc983098#5/2\",\"8707\":\"v-fc983098#5/3\",\"8708\":\"v-fc983098#6\",\"8709\":\"v-fc983098#6/4\",\"8710\":\"v-fc983098#6/5\",\"8711\":\"v-fc983098#7\",\"8712\":\"v-fc983098#7/6\",\"8713\":\"v-fc983098#7/7\",\"8714\":\"v-fc983098#8\",\"8715\":\"v-fc983098#8/0\",\"8716\":\"v-fc983098#9\",\"8717\":\"v-fc983098#9/0\",\"8718\":\"v-fc983098#10\",\"8719\":\"v-fc983098#10/0\",\"8720\":\"v-fc983098#10/1\",\"8721\":\"v-fc983098#10/2\",\"8722\":\"v-fc983098#10/3\",\"8723\":\"v-fc983098#10/4\",\"8724\":\"v-fc983098#10/5\",\"8725\":\"v-fc983098#10/6\",\"8726\":\"v-fc983098#11\",\"8727\":\"v-fc983098#11/0\",\"8728\":\"v-fc983098#11/1\",\"8729\":\"v-fc983098#12\",\"8730\":\"v-fc983098#12/0\",\"8731\":\"v-fc983098#12/1\",\"8732\":\"v-fc983098#13\",\"8733\":\"v-fc983098#13/0\",\"8734\":\"v-fc983098#13/1\",\"8735\":\"v-fc983098#13/2\",\"8736\":\"v-fc983098#14\",\"8737\":\"v-fc983098#14/0\",\"8738\":\"v-fc983098#14/1\",\"8739\":\"v-fc983098#15\",\"8740\":\"v-fc983098#15/0\",\"8741\":\"v-fc983098#15/1\",\"8742\":\"v-fc983098#15/2\",\"8743\":\"v-0337f94d\",\"8744\":\"v-0337f94d#1\",\"8745\":\"v-0337f94d#1/0\",\"8746\":\"v-0337f94d#2\",\"8747\":\"v-0337f94d#2/0\",\"8748\":\"v-0337f94d#3\",\"8749\":\"v-0337f94d#3/0\",\"8750\":\"v-0337f94d#3/1\",\"8751\":\"v-0337f94d#3/2\",\"8752\":\"v-0337f94d#3/3\",\"8753\":\"v-0337f94d#4\",\"8754\":\"v-0337f94d#4/0\",\"8755\":\"v-0337f94d#4/1\",\"8756\":\"v-0337f94d#5\",\"8757\":\"v-0337f94d#5/0\",\"8758\":\"v-0337f94d#6\",\"8759\":\"v-0337f94d#6/0\",\"8760\":\"v-0337f94d#7\",\"8761\":\"v-0337f94d#7/0\",\"8762\":\"v-0337f94d#8\",\"8763\":\"v-0337f94d#8/0\",\"8764\":\"v-0337f94d#8/1\",\"8765\":\"v-0337f94d#9\",\"8766\":\"v-0337f94d#9/2\",\"8767\":\"v-0337f94d#9/3\",\"8768\":\"v-0337f94d#9/4\",\"8769\":\"v-0337f94d#10\",\"8770\":\"v-0337f94d#10/5\",\"8771\":\"v-0337f94d#10/6\",\"8772\":\"v-0337f94d#10/7\",\"8773\":\"v-0337f94d#11\",\"8774\":\"v-0337f94d#11/8\",\"8775\":\"v-0337f94d#11/9\",\"8776\":\"v-0337f94d#11/10\",\"8777\":\"v-0337f94d#11/11\",\"8778\":\"v-0337f94d#12\",\"8779\":\"v-0337f94d#12/12\",\"8780\":\"v-0337f94d#12/13\",\"8781\":\"v-0337f94d#12/14\",\"8782\":\"v-0337f94d#13\",\"8783\":\"v-0337f94d#13/15\",\"8784\":\"v-0337f94d#13/16\",\"8785\":\"v-0337f94d#14\",\"8786\":\"v-0337f94d#14/17\",\"8787\":\"v-0337f94d#15\",\"8788\":\"v-0337f94d#15/0\",\"8789\":\"v-0337f94d#15/1\",\"8790\":\"v-0337f94d#15/2\",\"8791\":\"v-0337f94d#15/3\",\"8792\":\"v-0337f94d#16\",\"8793\":\"v-0337f94d#16/0\",\"8794\":\"v-0337f94d#16/1\",\"8795\":\"v-0337f94d#17\",\"8796\":\"v-0337f94d#17/0\",\"8797\":\"v-0337f94d#17/1\",\"8798\":\"v-0337f94d#18\",\"8799\":\"v-0337f94d#18/0\",\"8800\":\"v-0337f94d#19\",\"8801\":\"v-0337f94d#19/0\",\"8802\":\"v-0337f94d#19/1\",\"8803\":\"v-0337f94d#20\",\"8804\":\"v-0337f94d#20/0\",\"8805\":\"v-0337f94d#20/1\",\"8806\":\"v-0337f94d#20/2\",\"8807\":\"v-0337f94d#21\",\"8808\":\"v-0337f94d#21/3\",\"8809\":\"v-0337f94d#21/4\",\"8810\":\"v-0337f94d#21/5\",\"8811\":\"v-0337f94d#21/6\",\"8812\":\"v-0337f94d#21/7\",\"8813\":\"v-0337f94d#22\",\"8814\":\"v-0337f94d#22/0\",\"8815\":\"v-0337f94d#23\",\"8816\":\"v-0337f94d#23/0\",\"8817\":\"v-0337f94d#23/1\",\"8818\":\"v-0337f94d#23/2\",\"8819\":\"v-0337f94d#23/3\",\"8820\":\"v-0337f94d#23/4\",\"8821\":\"v-0337f94d#24\",\"8822\":\"v-0337f94d#24/0\",\"8823\":\"v-0337f94d#24/1\",\"8824\":\"v-0337f94d#24/2\",\"8825\":\"v-1bd4e2cc\",\"8826\":\"v-1bd4e2cc#0/0\",\"8827\":\"v-1bd4e2cc#0/1\",\"8828\":\"v-1bd4e2cc#0/2\",\"8829\":\"v-1bd4e2cc#1\",\"8830\":\"v-1bd4e2cc#2\",\"8831\":\"v-1bd4e2cc#2/0\",\"8832\":\"v-1bd4e2cc#3\",\"8833\":\"v-1bd4e2cc#3/0\",\"8834\":\"v-1bd4e2cc#3/1\",\"8835\":\"v-1bd4e2cc#4\",\"8836\":\"v-1bd4e2cc#4/2\",\"8837\":\"v-1bd4e2cc#4/3\",\"8838\":\"v-1bd4e2cc#5\",\"8839\":\"v-1bd4e2cc#5/4\",\"8840\":\"v-1bd4e2cc#6\",\"8841\":\"v-1bd4e2cc#6/0\",\"8842\":\"v-1bd4e2cc#6/1\",\"8843\":\"v-1bd4e2cc#6/2\",\"8844\":\"v-1bd4e2cc#7\",\"8845\":\"v-1bd4e2cc#7/3\",\"8846\":\"v-1bd4e2cc#7/4\",\"8847\":\"v-1bd4e2cc#7/5\",\"8848\":\"v-1bd4e2cc#7/6\",\"8849\":\"v-1bd4e2cc#8\",\"8850\":\"v-1bd4e2cc#8/7\",\"8851\":\"v-1bd4e2cc#8/8\",\"8852\":\"v-1bd4e2cc#8/9\",\"8853\":\"v-1bd4e2cc#8/10\",\"8854\":\"v-1bd4e2cc#8/11\",\"8855\":\"v-1bd4e2cc#9\",\"8856\":\"v-1bd4e2cc#9/12\",\"8857\":\"v-1bd4e2cc#9/13\",\"8858\":\"v-1bd4e2cc#9/14\",\"8859\":\"v-1bd4e2cc#9/15\",\"8860\":\"v-1bd4e2cc#9/16\",\"8861\":\"v-1bd4e2cc#9/17\",\"8862\":\"v-1bd4e2cc#9/18\",\"8863\":\"v-1bd4e2cc#10\",\"8864\":\"v-1bd4e2cc#10/0\",\"8865\":\"v-1bd4e2cc#11\",\"8866\":\"v-1bd4e2cc#11/0\",\"8867\":\"v-1bd4e2cc#11/1\",\"8868\":\"v-2c8ec93e\",\"8869\":\"v-2c8ec93e#1\",\"8870\":\"v-2c8ec93e#2\",\"8871\":\"v-2c8ec93e#2/0\",\"8872\":\"v-2c8ec93e#2/1\",\"8873\":\"v-2c8ec93e#3\",\"8874\":\"v-2c8ec93e#3/0\",\"8875\":\"v-2c8ec93e#3/1\",\"8876\":\"v-2c8ec93e#3/2\",\"8877\":\"v-2c8ec93e#3/3\",\"8878\":\"v-2c8ec93e#3/4\",\"8879\":\"v-2c8ec93e#3/5\",\"8880\":\"v-2c8ec93e#3/6\",\"8881\":\"v-2c8ec93e#3/7\",\"8882\":\"v-2c8ec93e#3/8\",\"8883\":\"v-2c8ec93e#3/9\",\"8884\":\"v-2c8ec93e#3/10\",\"8885\":\"v-2c8ec93e#3/11\",\"8886\":\"v-2c8ec93e#3/12\",\"8887\":\"v-2c8ec93e#4\",\"8888\":\"v-2c8ec93e#4/0\",\"8889\":\"v-2c8ec93e#4/1\",\"8890\":\"v-2c8ec93e#4/2\",\"8891\":\"v-2c8ec93e#4/3\",\"8892\":\"v-2c8ec93e#4/4\",\"8893\":\"v-2c8ec93e#5\",\"8894\":\"v-2c8ec93e#5/0\",\"8895\":\"v-2c8ec93e#5/1\",\"8896\":\"v-2c8ec93e#5/2\",\"8897\":\"v-2c8ec93e#5/3\",\"8898\":\"v-2c8ec93e#5/4\",\"8899\":\"v-2c8ec93e#6\",\"8900\":\"v-2c8ec93e#7\",\"8901\":\"v-2c8ec93e#7/0\",\"8902\":\"v-2c8ec93e#7/1\",\"8903\":\"v-2c8ec93e#7/2\",\"8904\":\"v-2c8ec93e#8\",\"8905\":\"v-2c8ec93e#8/0\",\"8906\":\"v-2c8ec93e#8/1\",\"8907\":\"v-2c8ec93e#9\",\"8908\":\"v-2c8ec93e#9/0\",\"8909\":\"v-2c8ec93e#9/1\",\"8910\":\"v-2c8ec93e#9/2\",\"8911\":\"v-2c8ec93e#9/3\",\"8912\":\"v-2c8ec93e#9/4\",\"8913\":\"v-2c8ec93e#10\",\"8914\":\"v-2c8ec93e#10/5\",\"8915\":\"v-2c8ec93e#10/6\",\"8916\":\"v-2c8ec93e#10/7\",\"8917\":\"v-2c8ec93e#11\",\"8918\":\"v-2c8ec93e#11/0\",\"8919\":\"v-2c8ec93e#12\",\"8920\":\"v-2c8ec93e#12/0\",\"8921\":\"v-2c8ec93e#13\",\"8922\":\"v-2c8ec93e#13/0\",\"8923\":\"v-2450d0dc\",\"8924\":\"v-2450d0dc#1\",\"8925\":\"v-2450d0dc#2\",\"8926\":\"v-2450d0dc#2/0\",\"8927\":\"v-2450d0dc#2/1\",\"8928\":\"v-2450d0dc#2/2\",\"8929\":\"v-2450d0dc#3\",\"8930\":\"v-2450d0dc#3/0\",\"8931\":\"v-2450d0dc#3/1\",\"8932\":\"v-2450d0dc#3/2\",\"8933\":\"v-2450d0dc#3/3\",\"8934\":\"v-2450d0dc#3/4\",\"8935\":\"v-2450d0dc#3/5\",\"8936\":\"v-2450d0dc#3/6\",\"8937\":\"v-2450d0dc#3/7\",\"8938\":\"v-2450d0dc#3/8\",\"8939\":\"v-2450d0dc#3/9\",\"8940\":\"v-2450d0dc#3/10\",\"8941\":\"v-2450d0dc#3/11\",\"8942\":\"v-2450d0dc#4\",\"8943\":\"v-2450d0dc#4/0\",\"8944\":\"v-2450d0dc#4/1\",\"8945\":\"v-2450d0dc#5\",\"8946\":\"v-2450d0dc#5/2\",\"8947\":\"v-2450d0dc#5/3\",\"8948\":\"v-2450d0dc#6\",\"8949\":\"v-2450d0dc#6/0\",\"8950\":\"v-2450d0dc#7\",\"8951\":\"v-2450d0dc#7/1\",\"8952\":\"v-2450d0dc#8\",\"8953\":\"v-2450d0dc#8/2\",\"8954\":\"v-2450d0dc#8/3\",\"8955\":\"v-2450d0dc#8/4\",\"8956\":\"v-2450d0dc#8/5\",\"8957\":\"v-2450d0dc#8/6\",\"8958\":\"v-2450d0dc#8/7\",\"8959\":\"v-2450d0dc#8/8\",\"8960\":\"v-2450d0dc#8/9\",\"8961\":\"v-2450d0dc#8/10\",\"8962\":\"v-2450d0dc#8/11\",\"8963\":\"v-2450d0dc#8/12\",\"8964\":\"v-2450d0dc#8/13\",\"8965\":\"v-2450d0dc#8/14\",\"8966\":\"v-2450d0dc#8/15\",\"8967\":\"v-2450d0dc#8/16\",\"8968\":\"v-2450d0dc#8/17\",\"8969\":\"v-2450d0dc#8/18\",\"8970\":\"v-2450d0dc#8/19\",\"8971\":\"v-2450d0dc#8/20\",\"8972\":\"v-2450d0dc#8/21\",\"8973\":\"v-2450d0dc#9\",\"8974\":\"v-2450d0dc#10\",\"8975\":\"v-2450d0dc#10/0\",\"8976\":\"v-2450d0dc#10/1\",\"8977\":\"v-2450d0dc#11\",\"8978\":\"v-2450d0dc#11/0\",\"8979\":\"v-2450d0dc#11/1\",\"8980\":\"v-2450d0dc#12\",\"8981\":\"v-2450d0dc#12/0\",\"8982\":\"v-2450d0dc#12/1\",\"8983\":\"v-2450d0dc#13\",\"8984\":\"v-2450d0dc#13/2\",\"8985\":\"v-2450d0dc#13/3\",\"8986\":\"v-2450d0dc#14\",\"8987\":\"v-2450d0dc#15\",\"8988\":\"v-2450d0dc#15/4\",\"8989\":\"v-2450d0dc#16\",\"8990\":\"v-2450d0dc#16/5\",\"8991\":\"v-2450d0dc#17\",\"8992\":\"v-2450d0dc#17/6\",\"8993\":\"v-2450d0dc#18\",\"8994\":\"v-2450d0dc#18/0\",\"8995\":\"v-2450d0dc#18/1\",\"8996\":\"v-2450d0dc#18/2\",\"8997\":\"v-2450d0dc#19\",\"8998\":\"v-2450d0dc#19/0\",\"8999\":\"v-2450d0dc#19/1\",\"9000\":\"v-2450d0dc#19/2\",\"9001\":\"v-2450d0dc#20\",\"9002\":\"v-2450d0dc#20/0\",\"9003\":\"v-2450d0dc#20/1\",\"9004\":\"v-2450d0dc#20/2\",\"9005\":\"v-2450d0dc#21\",\"9006\":\"v-2450d0dc#21/3\",\"9007\":\"v-2450d0dc#21/4\",\"9008\":\"v-2450d0dc#22\",\"9009\":\"v-2450d0dc#23\",\"9010\":\"v-2450d0dc#24\",\"9011\":\"v-2450d0dc#24/0\",\"9012\":\"v-2450d0dc#24/1\",\"9013\":\"v-2450d0dc#25\",\"9014\":\"v-2450d0dc#25/0\",\"9015\":\"v-2450d0dc#25/1\",\"9016\":\"v-2450d0dc#26\",\"9017\":\"v-2450d0dc#26/0\",\"9018\":\"v-2450d0dc#26/1\",\"9019\":\"v-2450d0dc#27\",\"9020\":\"v-2450d0dc#27/0\",\"9021\":\"v-2450d0dc#27/1\",\"9022\":\"v-2450d0dc#28\",\"9023\":\"v-2450d0dc#29\",\"9024\":\"v-2450d0dc#29/2\",\"9025\":\"v-2450d0dc#29/3\",\"9026\":\"v-2450d0dc#30\",\"9027\":\"v-2450d0dc#30/4\",\"9028\":\"v-2450d0dc#31\",\"9029\":\"v-2450d0dc#31/5\",\"9030\":\"v-2450d0dc#31/6\",\"9031\":\"v-2450d0dc#31/7\",\"9032\":\"v-2450d0dc#32\",\"9033\":\"v-2450d0dc#32/8\",\"9034\":\"v-2450d0dc#32/9\",\"9035\":\"v-2450d0dc#32/10\",\"9036\":\"v-2450d0dc#33\",\"9037\":\"v-2450d0dc#33/0\",\"9038\":\"v-2450d0dc#33/1\",\"9039\":\"v-2450d0dc#34\",\"9040\":\"v-2450d0dc#34/0\",\"9041\":\"v-2450d0dc#34/1\",\"9042\":\"v-2450d0dc#34/2\",\"9043\":\"v-2450d0dc#35\",\"9044\":\"v-2450d0dc#35/0\",\"9045\":\"v-2450d0dc#35/1\",\"9046\":\"v-2450d0dc#35/2\",\"9047\":\"v-2450d0dc#36\",\"9048\":\"v-2450d0dc#36/0\",\"9049\":\"v-2450d0dc#37\",\"9050\":\"v-2450d0dc#37/1\",\"9051\":\"v-2450d0dc#37/2\",\"9052\":\"v-2450d0dc#38\",\"9053\":\"v-2450d0dc#38/0\",\"9054\":\"v-2450d0dc#38/1\",\"9055\":\"v-74550c91\",\"9056\":\"v-74550c91#1\",\"9057\":\"v-74550c91#1/0\",\"9058\":\"v-74550c91#1/1\",\"9059\":\"v-74550c91#2\",\"9060\":\"v-74550c91#2/0\",\"9061\":\"v-74550c91#2/1\",\"9062\":\"v-74550c91#2/2\",\"9063\":\"v-74550c91#3\",\"9064\":\"v-74550c91#3/3\",\"9065\":\"v-74550c91#3/4\",\"9066\":\"v-74550c91#4\",\"9067\":\"v-74550c91#4/5\",\"9068\":\"v-74550c91#4/6\",\"9069\":\"v-74550c91#4/7\",\"9070\":\"v-74550c91#4/8\",\"9071\":\"v-74550c91#5\",\"9072\":\"v-74550c91#5/9\",\"9073\":\"v-74550c91#6\",\"9074\":\"v-74550c91#6/0\",\"9075\":\"v-74550c91#6/1\",\"9076\":\"v-74550c91#6/2\",\"9077\":\"v-74550c91#7\",\"9078\":\"v-74550c91#7/0\",\"9079\":\"v-74550c91#7/1\",\"9080\":\"v-74550c91#8\",\"9081\":\"v-74550c91#8/2\",\"9082\":\"v-74550c91#8/3\",\"9083\":\"v-74550c91#9\",\"9084\":\"v-74550c91#9/4\",\"9085\":\"v-74550c91#9/5\",\"9086\":\"v-74550c91#10\",\"9087\":\"v-74550c91#10/6\",\"9088\":\"v-74550c91#11\",\"9089\":\"v-74550c91#12\",\"9090\":\"v-74550c91#12/0\",\"9091\":\"v-74550c91#12/1\",\"9092\":\"v-74550c91#12/2\",\"9093\":\"v-74550c91#13\",\"9094\":\"v-74550c91#13/0\",\"9095\":\"v-74550c91#13/1\",\"9096\":\"v-74550c91#14\",\"9097\":\"v-74550c91#14/2\",\"9098\":\"v-74550c91#14/3\",\"9099\":\"v-74550c91#14/4\",\"9100\":\"v-74550c91#15\",\"9101\":\"v-74550c91#15/5\",\"9102\":\"v-6eb8e954\",\"9103\":\"v-6eb8e954#1\",\"9104\":\"v-6eb8e954#2\",\"9105\":\"v-6eb8e954#2/0\",\"9106\":\"v-6eb8e954#2/1\",\"9107\":\"v-6eb8e954#2/2\",\"9108\":\"v-6eb8e954#2/3\",\"9109\":\"v-6eb8e954#2/4\",\"9110\":\"v-6eb8e954#3\",\"9111\":\"v-6eb8e954#3/0\",\"9112\":\"v-6eb8e954#3/1\",\"9113\":\"v-6eb8e954#4\",\"9114\":\"v-6eb8e954#4/2\",\"9115\":\"v-6eb8e954#4/3\",\"9116\":\"v-6eb8e954#4/4\",\"9117\":\"v-6eb8e954#5\",\"9118\":\"v-6eb8e954#5/0\",\"9119\":\"v-6eb8e954#5/1\",\"9120\":\"v-6eb8e954#6\",\"9121\":\"v-6eb8e954#6/2\",\"9122\":\"v-6eb8e954#6/3\",\"9123\":\"v-6eb8e954#6/4\",\"9124\":\"v-6eb8e954#6/5\",\"9125\":\"v-6eb8e954#7\",\"9126\":\"v-6eb8e954#7/6\",\"9127\":\"v-6eb8e954#7/7\",\"9128\":\"v-6eb8e954#7/8\",\"9129\":\"v-6eb8e954#8\",\"9130\":\"v-6eb8e954#8/0\",\"9131\":\"v-6eb8e954#8/1\",\"9132\":\"v-6eb8e954#9\",\"9133\":\"v-6eb8e954#9/0\",\"9134\":\"v-6eb8e954#9/1\",\"9135\":\"v-6eb8e954#9/2\",\"9136\":\"v-6eb8e954#9/3\",\"9137\":\"v-6eb8e954#10\",\"9138\":\"v-6eb8e954#10/0\",\"9139\":\"v-6eb8e954#10/1\",\"9140\":\"v-6eb8e954#11\",\"9141\":\"v-6eb8e954#11/2\",\"9142\":\"v-6eb8e954#12\",\"9143\":\"v-6eb8e954#12/0\",\"9144\":\"v-6eb8e954#13\",\"9145\":\"v-6eb8e954#13/1\",\"9146\":\"v-6eb8e954#14\",\"9147\":\"v-6eb8e954#14/2\",\"9148\":\"v-6eb8e954#14/3\",\"9149\":\"v-6eb8e954#14/4\",\"9150\":\"v-6eb8e954#15\",\"9151\":\"v-6eb8e954#15/0\",\"9152\":\"v-6eb8e954#15/1\",\"9153\":\"v-6eb8e954#15/2\",\"9154\":\"v-6eb8e954#16\",\"9155\":\"v-6eb8e954#16/0\",\"9156\":\"v-6eb8e954#16/1\",\"9157\":\"v-6eb8e954#16/2\",\"9158\":\"v-6eb8e954#16/3\",\"9159\":\"v-6eb8e954#16/4\",\"9160\":\"v-6eb8e954#16/5\",\"9161\":\"v-6eb8e954#16/6\",\"9162\":\"v-6eb8e954#16/7\",\"9163\":\"v-6eb8e954#17\",\"9164\":\"v-6eb8e954#18\",\"9165\":\"v-6eb8e954#18/0\",\"9166\":\"v-6eb8e954#18/1\",\"9167\":\"v-6eb8e954#18/2\",\"9168\":\"v-6eb8e954#18/3\",\"9169\":\"v-6eb8e954#18/4\",\"9170\":\"v-6eb8e954#18/5\",\"9171\":\"v-6eb8e954#18/6\",\"9172\":\"v-6eb8e954#19\",\"9173\":\"v-6eb8e954#19/0\",\"9174\":\"v-6eb8e954#19/1\",\"9175\":\"v-3583ecf7\",\"9176\":\"v-3583ecf7#1\",\"9177\":\"v-3583ecf7#2\",\"9178\":\"v-3583ecf7#2/0\",\"9179\":\"v-3583ecf7#2/1\",\"9180\":\"v-3583ecf7#2/2\",\"9181\":\"v-3583ecf7#3\",\"9182\":\"v-3583ecf7#3/0\",\"9183\":\"v-3583ecf7#3/1\",\"9184\":\"v-3583ecf7#3/2\",\"9185\":\"v-3583ecf7#3/3\",\"9186\":\"v-3583ecf7#4\",\"9187\":\"v-3583ecf7#4/0\",\"9188\":\"v-3583ecf7#4/1\",\"9189\":\"v-3583ecf7#5\",\"9190\":\"v-3583ecf7#5/0\",\"9191\":\"v-3583ecf7#5/1\",\"9192\":\"v-3583ecf7#5/2\",\"9193\":\"v-3583ecf7#6\",\"9194\":\"v-3583ecf7#6/0\",\"9195\":\"v-3583ecf7#6/1\",\"9196\":\"v-3583ecf7#6/2\",\"9197\":\"v-3583ecf7#6/3\",\"9198\":\"v-3583ecf7#7\",\"9199\":\"v-3583ecf7#7/0\",\"9200\":\"v-3583ecf7#7/1\",\"9201\":\"v-3583ecf7#7/2\",\"9202\":\"v-3583ecf7#7/3\",\"9203\":\"v-3583ecf7#7/4\",\"9204\":\"v-3583ecf7#8\",\"9205\":\"v-3583ecf7#8/0\",\"9206\":\"v-3583ecf7#9\",\"9207\":\"v-3583ecf7#9/0\",\"9208\":\"v-3583ecf7#9/1\",\"9209\":\"v-3583ecf7#9/2\",\"9210\":\"v-3583ecf7#10\",\"9211\":\"v-3583ecf7#11\",\"9212\":\"v-3583ecf7#11/0\",\"9213\":\"v-3583ecf7#11/1\",\"9214\":\"v-3583ecf7#12\",\"9215\":\"v-3583ecf7#12/0\",\"9216\":\"v-3583ecf7#12/1\",\"9217\":\"v-3583ecf7#12/2\",\"9218\":\"v-3583ecf7#13\",\"9219\":\"v-3583ecf7#13/0\",\"9220\":\"v-3583ecf7#13/1\",\"9221\":\"v-3583ecf7#13/2\",\"9222\":\"v-3583ecf7#13/3\",\"9223\":\"v-3583ecf7#13/4\",\"9224\":\"v-3583ecf7#13/5\",\"9225\":\"v-3583ecf7#14\",\"9226\":\"v-3583ecf7#15\",\"9227\":\"v-3583ecf7#15/6\",\"9228\":\"v-3583ecf7#15/7\",\"9229\":\"v-3583ecf7#15/8\",\"9230\":\"v-3583ecf7#16\",\"9231\":\"v-3583ecf7#16/0\",\"9232\":\"v-3583ecf7#16/1\",\"9233\":\"v-3583ecf7#17\",\"9234\":\"v-3583ecf7#17/2\",\"9235\":\"v-3583ecf7#18\",\"9236\":\"v-3583ecf7#18/3\",\"9237\":\"v-3583ecf7#18/4\",\"9238\":\"v-3583ecf7#19\",\"9239\":\"v-3583ecf7#19/0\",\"9240\":\"v-3583ecf7#19/1\",\"9241\":\"v-3583ecf7#20\",\"9242\":\"v-3583ecf7#20/0\",\"9243\":\"v-3583ecf7#20/1\",\"9244\":\"v-3583ecf7#20/2\",\"9245\":\"v-3583ecf7#21\",\"9246\":\"v-3583ecf7#21/0\",\"9247\":\"v-3583ecf7#21/1\",\"9248\":\"v-3583ecf7#21/2\",\"9249\":\"v-3583ecf7#21/3\",\"9250\":\"v-3583ecf7#22\",\"9251\":\"v-3583ecf7#22/4\",\"9252\":\"v-3583ecf7#23\",\"9253\":\"v-3583ecf7#23/0\",\"9254\":\"v-3583ecf7#23/1\",\"9255\":\"v-3583ecf7#23/2\",\"9256\":\"v-3583ecf7#24\",\"9257\":\"v-3583ecf7#24/3\",\"9258\":\"v-3583ecf7#24/4\",\"9259\":\"v-3583ecf7#24/5\",\"9260\":\"v-3583ecf7#24/6\",\"9261\":\"v-3583ecf7#25\",\"9262\":\"v-3583ecf7#25/0\",\"9263\":\"v-0d12a4ac\",\"9264\":\"v-0d12a4ac#0/0\",\"9265\":\"v-0d12a4ac#0/1\",\"9266\":\"v-0d12a4ac#1\",\"9267\":\"v-0d12a4ac#1/0\",\"9268\":\"v-0d12a4ac#2\",\"9269\":\"v-0d12a4ac#2/0\",\"9270\":\"v-0d12a4ac#2/1\",\"9271\":\"v-0d12a4ac#3\",\"9272\":\"v-0d12a4ac#3/2\",\"9273\":\"v-0d12a4ac#3/3\",\"9274\":\"v-0d12a4ac#4\",\"9275\":\"v-0d12a4ac#4/0\",\"9276\":\"v-0d12a4ac#4/1\",\"9277\":\"v-0d12a4ac#5\",\"9278\":\"v-0d12a4ac#5/0\",\"9279\":\"v-0d12a4ac#5/1\",\"9280\":\"v-0d12a4ac#6\",\"9281\":\"v-0d12a4ac#6/0\",\"9282\":\"v-0d12a4ac#6/1\",\"9283\":\"v-0d12a4ac#6/2\",\"9284\":\"v-0d12a4ac#6/3\",\"9285\":\"v-0d12a4ac#6/4\",\"9286\":\"v-0d12a4ac#6/5\",\"9287\":\"v-0d12a4ac#7\",\"9288\":\"v-0d12a4ac#7/6\",\"9289\":\"v-0d12a4ac#7/7\",\"9290\":\"v-0d12a4ac#7/8\",\"9291\":\"v-0d12a4ac#7/9\",\"9292\":\"v-0d12a4ac#7/10\",\"9293\":\"v-0d12a4ac#7/11\",\"9294\":\"v-0d12a4ac#7/12\",\"9295\":\"v-0d12a4ac#7/13\",\"9296\":\"v-0d12a4ac#8\",\"9297\":\"v-0d12a4ac#8/14\",\"9298\":\"v-0d12a4ac#8/15\",\"9299\":\"v-0d12a4ac#9\",\"9300\":\"v-0d12a4ac#9/16\",\"9301\":\"v-0d12a4ac#9/17\",\"9302\":\"v-0d12a4ac#10\",\"9303\":\"v-0d12a4ac#10/0\",\"9304\":\"v-0d12a4ac#10/1\",\"9305\":\"v-0d12a4ac#10/2\",\"9306\":\"v-0d12a4ac#10/3\",\"9307\":\"v-0d12a4ac#10/4\",\"9308\":\"v-0d12a4ac#10/5\",\"9309\":\"v-0d12a4ac#11\",\"9310\":\"v-0d12a4ac#11/0\",\"9311\":\"v-0d12a4ac#11/1\",\"9312\":\"v-3d5ed71e\",\"9313\":\"v-3d5ed71e#0/0\",\"9314\":\"v-3d5ed71e#0/1\",\"9315\":\"v-3d5ed71e#1\",\"9316\":\"v-3d5ed71e#2\",\"9317\":\"v-3d5ed71e#2/0\",\"9318\":\"v-3d5ed71e#2/1\",\"9319\":\"v-3d5ed71e#2/2\",\"9320\":\"v-3d5ed71e#3\",\"9321\":\"v-3d5ed71e#3/0\",\"9322\":\"v-3d5ed71e#4\",\"9323\":\"v-3d5ed71e#4/0\",\"9324\":\"v-3d5ed71e#5\",\"9325\":\"v-3d5ed71e#5/0\",\"9326\":\"v-3d5ed71e#5/1\",\"9327\":\"v-3d5ed71e#5/2\",\"9328\":\"v-3d5ed71e#5/3\",\"9329\":\"v-3d5ed71e#6\",\"9330\":\"v-3d5ed71e#6/0\",\"9331\":\"v-3d5ed71e#7\",\"9332\":\"v-3d5ed71e#7/0\",\"9333\":\"v-3d5ed71e#7/1\",\"9334\":\"v-3d5ed71e#7/2\",\"9335\":\"v-3d5ed71e#7/3\",\"9336\":\"v-3d5ed71e#7/4\",\"9337\":\"v-3d5ed71e#7/5\",\"9338\":\"v-3d5ed71e#7/6\",\"9339\":\"v-3d5ed71e#7/7\",\"9340\":\"v-3d5ed71e#8\",\"9341\":\"v-3d5ed71e#8/0\",\"9342\":\"v-3d5ed71e#8/1\",\"9343\":\"v-3d5ed71e#8/2\",\"9344\":\"v-3d5ed71e#8/3\",\"9345\":\"v-3d5ed71e#8/4\",\"9346\":\"v-3d5ed71e#8/5\",\"9347\":\"v-3d5ed71e#8/6\",\"9348\":\"v-3d5ed71e#8/7\",\"9349\":\"v-3d5ed71e#9\",\"9350\":\"v-3d5ed71e#9/0\",\"9351\":\"v-3d5ed71e#9/1\",\"9352\":\"v-3d5ed71e#9/2\",\"9353\":\"v-3d5ed71e#9/3\",\"9354\":\"v-3d5ed71e#9/4\",\"9355\":\"v-3d5ed71e#9/5\",\"9356\":\"v-3d5ed71e#9/6\",\"9357\":\"v-3d5ed71e#9/7\",\"9358\":\"v-3d5ed71e#10\",\"9359\":\"v-3d5ed71e#10/0\",\"9360\":\"v-3d5ed71e#10/1\",\"9361\":\"v-3d5ed71e#10/2\",\"9362\":\"v-3d5ed71e#10/3\",\"9363\":\"v-3d5ed71e#10/4\",\"9364\":\"v-3d5ed71e#10/5\",\"9365\":\"v-3d5ed71e#10/6\",\"9366\":\"v-3d5ed71e#10/7\",\"9367\":\"v-3d5ed71e#10/8\",\"9368\":\"v-3d5ed71e#10/9\",\"9369\":\"v-3d5ed71e#10/10\",\"9370\":\"v-3d5ed71e#10/11\",\"9371\":\"v-3d5ed71e#10/12\",\"9372\":\"v-3d5ed71e#10/13\",\"9373\":\"v-3d5ed71e#10/14\",\"9374\":\"v-3d5ed71e#10/15\",\"9375\":\"v-3d5ed71e#10/16\",\"9376\":\"v-3d5ed71e#10/17\",\"9377\":\"v-3d5ed71e#11\",\"9378\":\"v-3d5ed71e#11/0\",\"9379\":\"v-3d5ed71e#11/1\",\"9380\":\"v-3d5ed71e#11/2\",\"9381\":\"v-3d5ed71e#11/3\",\"9382\":\"v-3d5ed71e#11/4\",\"9383\":\"v-3d5ed71e#11/5\",\"9384\":\"v-3d5ed71e#11/6\",\"9385\":\"v-3d5ed71e#11/7\",\"9386\":\"v-3d5ed71e#11/8\",\"9387\":\"v-3d5ed71e#11/9\",\"9388\":\"v-3d5ed71e#11/10\",\"9389\":\"v-3d5ed71e#11/11\",\"9390\":\"v-3d5ed71e#11/12\",\"9391\":\"v-3d5ed71e#11/13\",\"9392\":\"v-3d5ed71e#11/14\",\"9393\":\"v-3d5ed71e#11/15\",\"9394\":\"v-3d5ed71e#11/16\",\"9395\":\"v-3d5ed71e#11/17\",\"9396\":\"v-3d5ed71e#12\",\"9397\":\"v-3d5ed71e#12/0\",\"9398\":\"v-3d5ed71e#12/1\",\"9399\":\"v-3d5ed71e#12/2\",\"9400\":\"v-3d5ed71e#12/3\",\"9401\":\"v-3d5ed71e#12/4\",\"9402\":\"v-3d5ed71e#12/5\",\"9403\":\"v-3d5ed71e#12/6\",\"9404\":\"v-3d5ed71e#12/7\",\"9405\":\"v-3d5ed71e#12/8\",\"9406\":\"v-3d5ed71e#12/9\",\"9407\":\"v-3d5ed71e#12/10\",\"9408\":\"v-3d5ed71e#12/11\",\"9409\":\"v-3d5ed71e#12/12\",\"9410\":\"v-3d5ed71e#12/13\",\"9411\":\"v-3d5ed71e#12/14\",\"9412\":\"v-3d5ed71e#12/15\",\"9413\":\"v-3d5ed71e#12/16\",\"9414\":\"v-3d5ed71e#12/17\",\"9415\":\"v-3d5ed71e#13\",\"9416\":\"v-3d5ed71e#13/0\",\"9417\":\"v-3d5ed71e#13/1\",\"9418\":\"v-3d5ed71e#13/2\",\"9419\":\"v-3d5ed71e#13/3\",\"9420\":\"v-3d5ed71e#13/4\",\"9421\":\"v-3d5ed71e#13/5\",\"9422\":\"v-3d5ed71e#13/6\",\"9423\":\"v-3d5ed71e#13/7\",\"9424\":\"v-3d5ed71e#13/8\",\"9425\":\"v-3d5ed71e#13/9\",\"9426\":\"v-3d5ed71e#13/10\",\"9427\":\"v-3d5ed71e#13/11\",\"9428\":\"v-3d5ed71e#13/12\",\"9429\":\"v-3d5ed71e#13/13\",\"9430\":\"v-3d5ed71e#13/14\",\"9431\":\"v-3d5ed71e#13/15\",\"9432\":\"v-3d5ed71e#14\",\"9433\":\"v-3d5ed71e#14/0\",\"9434\":\"v-3d5ed71e#14/1\",\"9435\":\"v-3d5ed71e#14/2\",\"9436\":\"v-3d5ed71e#14/3\",\"9437\":\"v-3d5ed71e#14/4\",\"9438\":\"v-3d5ed71e#14/5\",\"9439\":\"v-3d5ed71e#14/6\",\"9440\":\"v-3d5ed71e#14/7\",\"9441\":\"v-3d5ed71e#15\",\"9442\":\"v-3d5ed71e#15/8\",\"9443\":\"v-3d5ed71e#16\",\"9444\":\"v-3d5ed71e#16/0\",\"9445\":\"v-3d5ed71e#16/1\",\"9446\":\"v-3d5ed71e#16/2\",\"9447\":\"v-3d5ed71e#17\",\"9448\":\"v-3d5ed71e#17/0\",\"9449\":\"v-3d5ed71e#17/1\",\"9450\":\"v-3d5ed71e#17/2\",\"9451\":\"v-3d5ed71e#18\",\"9452\":\"v-3d5ed71e#18/0\",\"9453\":\"v-3d5ed71e#19\",\"9454\":\"v-3d5ed71e#19/1\",\"9455\":\"v-3d5ed71e#19/2\",\"9456\":\"v-3d5ed71e#19/3\",\"9457\":\"v-3d5ed71e#20\",\"9458\":\"v-3d5ed71e#20/4\",\"9459\":\"v-30e97f85\",\"9460\":\"v-30e97f85#0/0\",\"9461\":\"v-30e97f85#0/1\",\"9462\":\"v-30e97f85#0/2\",\"9463\":\"v-30e97f85#0/3\",\"9464\":\"v-30e97f85#0/4\",\"9465\":\"v-4a4300dc\",\"9466\":\"v-4a4300dc#1\",\"9467\":\"v-4a4300dc#2\",\"9468\":\"v-4a4300dc#2/0\",\"9469\":\"v-4a4300dc#2/1\",\"9470\":\"v-4a4300dc#3\",\"9471\":\"v-4a4300dc#3/0\",\"9472\":\"v-4a4300dc#4\",\"9473\":\"v-4a4300dc#4/0\",\"9474\":\"v-4a4300dc#5\",\"9475\":\"v-4a4300dc#5/0\",\"9476\":\"v-4a4300dc#5/1\",\"9477\":\"v-4a4300dc#5/2\",\"9478\":\"v-4a4300dc#6\",\"9479\":\"v-4a4300dc#6/0\",\"9480\":\"v-4a4300dc#7\",\"9481\":\"v-4a4300dc#7/0\",\"9482\":\"v-4a4300dc#7/1\",\"9483\":\"v-4a4300dc#7/2\",\"9484\":\"v-4a4300dc#7/3\",\"9485\":\"v-4a4300dc#8\",\"9486\":\"v-4a4300dc#9\",\"9487\":\"v-4a4300dc#9/0\",\"9488\":\"v-4a4300dc#10\",\"9489\":\"v-4a4300dc#10/0\",\"9490\":\"v-4a4300dc#11\",\"9491\":\"v-4a4300dc#12\",\"9492\":\"v-4a4300dc#12/0\",\"9493\":\"v-4a4300dc#12/1\",\"9494\":\"v-4a4300dc#12/2\",\"9495\":\"v-4a4300dc#12/3\",\"9496\":\"v-4a4300dc#13\",\"9497\":\"v-4a4300dc#14\",\"9498\":\"v-4a4300dc#14/0\",\"9499\":\"v-4a4300dc#14/1\",\"9500\":\"v-4a4300dc#14/2\",\"9501\":\"v-4a4300dc#14/3\",\"9502\":\"v-4a4300dc#14/4\",\"9503\":\"v-4a4300dc#14/5\",\"9504\":\"v-4a4300dc#15\",\"9505\":\"v-4a4300dc#15/6\",\"9506\":\"v-4a4300dc#15/7\",\"9507\":\"v-4a4300dc#15/8\",\"9508\":\"v-4a4300dc#15/9\",\"9509\":\"v-4a4300dc#15/10\",\"9510\":\"v-4a4300dc#15/11\",\"9511\":\"v-4a4300dc#15/12\",\"9512\":\"v-4a4300dc#15/13\",\"9513\":\"v-4a4300dc#15/14\",\"9514\":\"v-4a4300dc#16\",\"9515\":\"v-4a4300dc#16/0\",\"9516\":\"v-4a4300dc#16/1\",\"9517\":\"v-4a4300dc#16/2\",\"9518\":\"v-4a4300dc#17\",\"9519\":\"v-4a4300dc#18\",\"9520\":\"v-4a4300dc#18/0\",\"9521\":\"v-4a4300dc#19\",\"9522\":\"v-4a4300dc#19/0\",\"9523\":\"v-4a4300dc#19/1\",\"9524\":\"v-4a4300dc#19/2\",\"9525\":\"v-4a4300dc#19/3\",\"9526\":\"v-4a4300dc#20\",\"9527\":\"v-4a4300dc#20/0\",\"9528\":\"v-4a4300dc#21\",\"9529\":\"v-4a4300dc#21/0\",\"9530\":\"v-4a4300dc#21/1\",\"9531\":\"v-4a4300dc#22\",\"9532\":\"v-4a4300dc#22/0\",\"9533\":\"v-4a4300dc#22/1\",\"9534\":\"v-4a4300dc#22/2\",\"9535\":\"v-59d1b54d\",\"9536\":\"v-59d1b54d#1\",\"9537\":\"v-59d1b54d#2\",\"9538\":\"v-59d1b54d#2/0\",\"9539\":\"v-59d1b54d#2/1\",\"9540\":\"v-59d1b54d#2/2\",\"9541\":\"v-59d1b54d#2/3\",\"9542\":\"v-59d1b54d#2/4\",\"9543\":\"v-59d1b54d#2/5\",\"9544\":\"v-59d1b54d#2/6\",\"9545\":\"v-59d1b54d#2/7\",\"9546\":\"v-59d1b54d#2/8\",\"9547\":\"v-59d1b54d#3\",\"9548\":\"v-59d1b54d#3/0\",\"9549\":\"v-59d1b54d#3/1\",\"9550\":\"v-59d1b54d#4\",\"9551\":\"v-59d1b54d#4/0\",\"9552\":\"v-59d1b54d#4/1\",\"9553\":\"v-59d1b54d#4/2\",\"9554\":\"v-59d1b54d#5\",\"9555\":\"v-59d1b54d#5/0\",\"9556\":\"v-59d1b54d#6\",\"9557\":\"v-59d1b54d#6/0\",\"9558\":\"v-59d1b54d#6/1\",\"9559\":\"v-59d1b54d#6/2\",\"9560\":\"v-59d1b54d#6/3\",\"9561\":\"v-59d1b54d#6/4\",\"9562\":\"v-59d1b54d#6/5\",\"9563\":\"v-59d1b54d#7\",\"9564\":\"v-59d1b54d#7/0\",\"9565\":\"v-59d1b54d#8\",\"9566\":\"v-59d1b54d#8/0\",\"9567\":\"v-59d1b54d#8/1\",\"9568\":\"v-59d1b54d#8/2\",\"9569\":\"v-59d1b54d#8/3\",\"9570\":\"v-59d1b54d#9\",\"9571\":\"v-59d1b54d#9/0\",\"9572\":\"v-59d1b54d#9/1\",\"9573\":\"v-59d1b54d#9/2\",\"9574\":\"v-59d1b54d#9/3\",\"9575\":\"v-59d1b54d#9/4\",\"9576\":\"v-59d1b54d#10\",\"9577\":\"v-59d1b54d#11\",\"9578\":\"v-59d1b54d#11/0\",\"9579\":\"v-59d1b54d#11/1\",\"9580\":\"v-59d1b54d#12\",\"9581\":\"v-59d1b54d#12/0\",\"9582\":\"v-59d1b54d#13\",\"9583\":\"v-59d1b54d#13/0\",\"9584\":\"v-59d1b54d#13/1\",\"9585\":\"v-59d1b54d#13/2\",\"9586\":\"v-1d46bbde\",\"9587\":\"v-1d46bbde#0/0\",\"9588\":\"v-1d46bbde#0/1\",\"9589\":\"v-1d46bbde#0/2\",\"9590\":\"v-1d46bbde#1\",\"9591\":\"v-1d46bbde#1/0\",\"9592\":\"v-1d46bbde#1/1\",\"9593\":\"v-1d46bbde#2\",\"9594\":\"v-1d46bbde#2/0\",\"9595\":\"v-1d46bbde#2/1\",\"9596\":\"v-1d46bbde#2/2\",\"9597\":\"v-1d46bbde#3\",\"9598\":\"v-1d46bbde#3/0\",\"9599\":\"v-1d46bbde#3/1\",\"9600\":\"v-1d46bbde#4\",\"9601\":\"v-1d46bbde#4/0\",\"9602\":\"v-1d46bbde#4/1\",\"9603\":\"v-1d46bbde#4/2\",\"9604\":\"v-1d46bbde#4/3\",\"9605\":\"v-1d46bbde#4/4\",\"9606\":\"v-1d46bbde#4/5\",\"9607\":\"v-1d46bbde#5\",\"9608\":\"v-1d46bbde#5/0\",\"9609\":\"v-1d46bbde#6\",\"9610\":\"v-1d46bbde#6/1\",\"9611\":\"v-1d46bbde#6/2\",\"9612\":\"v-1d46bbde#6/3\",\"9613\":\"v-1d46bbde#6/4\",\"9614\":\"v-1d46bbde#6/5\",\"9615\":\"v-1d46bbde#6/6\",\"9616\":\"v-1d46bbde#6/7\",\"9617\":\"v-1d46bbde#6/8\",\"9618\":\"v-1d46bbde#6/9\",\"9619\":\"v-1d46bbde#6/10\",\"9620\":\"v-1d46bbde#6/11\",\"9621\":\"v-1d46bbde#7\",\"9622\":\"v-1d46bbde#8\",\"9623\":\"v-1d46bbde#8/0\",\"9624\":\"v-1d46bbde#8/1\",\"9625\":\"v-1d46bbde#9\",\"9626\":\"v-1d46bbde#9/0\",\"9627\":\"v-1d46bbde#9/1\",\"9628\":\"v-1d46bbde#9/2\",\"9629\":\"v-1d46bbde#10\",\"9630\":\"v-1d46bbde#11\",\"9631\":\"v-1d46bbde#11/0\",\"9632\":\"v-1d46bbde#12\",\"9633\":\"v-1d46bbde#12/1\",\"9634\":\"v-1d46bbde#13\",\"9635\":\"v-1d46bbde#13/0\",\"9636\":\"v-1d46bbde#14\",\"9637\":\"v-1d46bbde#14/1\",\"9638\":\"v-1d46bbde#15\",\"9639\":\"v-1d46bbde#15/0\",\"9640\":\"v-1d46bbde#15/1\",\"9641\":\"v-1d46bbde#15/2\",\"9642\":\"v-1d46bbde#15/3\",\"9643\":\"v-1d46bbde#16\",\"9644\":\"v-1d46bbde#16/4\",\"9645\":\"v-1d46bbde#16/5\",\"9646\":\"v-5a379abc\",\"9647\":\"v-5a379abc#0/0\",\"9648\":\"v-5a379abc#0/1\",\"9649\":\"v-5a379abc#0/2\",\"9650\":\"v-5a379abc#1\",\"9651\":\"v-5a379abc#2\",\"9652\":\"v-5a379abc#2/0\",\"9653\":\"v-5a379abc#2/1\",\"9654\":\"v-5a379abc#2/2\",\"9655\":\"v-5a379abc#2/3\",\"9656\":\"v-5a379abc#2/4\",\"9657\":\"v-5a379abc#3\",\"9658\":\"v-5a379abc#3/0\",\"9659\":\"v-5a379abc#3/1\",\"9660\":\"v-5a379abc#4\",\"9661\":\"v-5a379abc#4/0\",\"9662\":\"v-5a379abc#4/1\",\"9663\":\"v-5a379abc#4/2\",\"9664\":\"v-5a379abc#4/3\",\"9665\":\"v-5a379abc#4/4\",\"9666\":\"v-5a379abc#5\",\"9667\":\"v-5a379abc#5/0\",\"9668\":\"v-5a379abc#6\",\"9669\":\"v-5a379abc#6/0\",\"9670\":\"v-5a379abc#6/1\",\"9671\":\"v-5a379abc#7\",\"9672\":\"v-5a379abc#7/0\",\"9673\":\"v-5a379abc#8\",\"9674\":\"v-5a379abc#8/0\",\"9675\":\"v-5a379abc#8/1\",\"9676\":\"v-5a379abc#8/2\",\"9677\":\"v-5a379abc#8/3\",\"9678\":\"v-5a379abc#9\",\"9679\":\"v-5a379abc#10\",\"9680\":\"v-5a379abc#10/0\",\"9681\":\"v-5a379abc#10/1\",\"9682\":\"v-5a379abc#11\",\"9683\":\"v-5a379abc#11/2\",\"9684\":\"v-5a379abc#11/3\",\"9685\":\"v-5a379abc#12\",\"9686\":\"v-5a379abc#12/4\",\"9687\":\"v-5a379abc#12/5\",\"9688\":\"v-5a379abc#13\",\"9689\":\"v-5a379abc#13/6\",\"9690\":\"v-5a379abc#13/7\",\"9691\":\"v-5a379abc#14\",\"9692\":\"v-5a379abc#15\",\"9693\":\"v-5a379abc#15/8\",\"9694\":\"v-5a379abc#16\",\"9695\":\"v-5a379abc#16/9\",\"9696\":\"v-5a379abc#17\",\"9697\":\"v-5a379abc#17/10\",\"9698\":\"v-5a379abc#18\",\"9699\":\"v-5a379abc#18/0\",\"9700\":\"v-5a379abc#18/1\",\"9701\":\"v-5a379abc#18/2\",\"9702\":\"v-5a379abc#19\",\"9703\":\"v-5a379abc#19/0\",\"9704\":\"v-5a379abc#19/1\",\"9705\":\"v-5a379abc#19/2\",\"9706\":\"v-5a379abc#20\",\"9707\":\"v-5a379abc#20/3\",\"9708\":\"v-5a379abc#20/4\",\"9709\":\"v-5a379abc#20/5\",\"9710\":\"v-5a379abc#20/6\",\"9711\":\"v-5a379abc#21\",\"9712\":\"v-5a379abc#21/0\",\"9713\":\"v-5a379abc#21/1\",\"9714\":\"v-5a379abc#21/2\",\"9715\":\"v-5a379abc#22\",\"9716\":\"v-5a379abc#22/3\",\"9717\":\"v-5a379abc#22/4\",\"9718\":\"v-5a379abc#22/5\",\"9719\":\"v-5a379abc#22/6\",\"9720\":\"v-5a379abc#22/7\",\"9721\":\"v-5a379abc#22/8\",\"9722\":\"v-5a379abc#22/9\",\"9723\":\"v-5a379abc#23\",\"9724\":\"v-5a379abc#23/0\",\"9725\":\"v-5a379abc#23/1\",\"9726\":\"v-5a379abc#23/2\",\"9727\":\"v-5a379abc#24\",\"9728\":\"v-5a379abc#25\",\"9729\":\"v-5a379abc#25/3\",\"9730\":\"v-5a379abc#25/4\",\"9731\":\"v-5a379abc#26\",\"9732\":\"v-5a379abc#26/0\",\"9733\":\"v-5a379abc#27\",\"9734\":\"v-5a379abc#27/0\",\"9735\":\"v-5a379abc#27/1\",\"9736\":\"v-5a379abc#27/2\",\"9737\":\"v-5a379abc#27/3\",\"9738\":\"v-5a379abc#27/4\",\"9739\":\"v-5a379abc#27/5\",\"9740\":\"v-5a379abc#28\",\"9741\":\"v-5a379abc#29\",\"9742\":\"v-5a379abc#29/0\",\"9743\":\"v-5a379abc#29/1\",\"9744\":\"v-5a379abc#30\",\"9745\":\"v-5a379abc#30/0\",\"9746\":\"v-5a379abc#30/1\",\"9747\":\"v-5a379abc#30/2\",\"9748\":\"v-5a379abc#31\",\"9749\":\"v-5a379abc#31/0\",\"9750\":\"v-5a379abc#31/1\",\"9751\":\"v-5a379abc#32\",\"9752\":\"v-5a379abc#33\",\"9753\":\"v-5a379abc#33/2\",\"9754\":\"v-5a379abc#34\",\"9755\":\"v-5a379abc#34/3\",\"9756\":\"v-5a379abc#35\",\"9757\":\"v-5a379abc#35/4\",\"9758\":\"v-5a379abc#36\",\"9759\":\"v-5a379abc#36/5\",\"9760\":\"v-5a379abc#36/6\",\"9761\":\"v-5a379abc#37\",\"9762\":\"v-5a379abc#37/7\",\"9763\":\"v-5a379abc#37/8\",\"9764\":\"v-5a379abc#37/9\",\"9765\":\"v-5a379abc#37/10\",\"9766\":\"v-5a379abc#37/11\",\"9767\":\"v-5a379abc#37/12\",\"9768\":\"v-5a379abc#37/13\",\"9769\":\"v-5a379abc#38\",\"9770\":\"v-5a379abc#38/0\",\"9771\":\"v-5a379abc#38/1\",\"9772\":\"v-5a379abc#39\",\"9773\":\"v-5a379abc#39/0\",\"9774\":\"v-5a379abc#39/1\",\"9775\":\"v-5a379abc#40\",\"9776\":\"v-5a379abc#40/2\",\"9777\":\"v-5a379abc#40/3\",\"9778\":\"v-5a379abc#40/4\",\"9779\":\"v-5a379abc#40/5\",\"9780\":\"v-5a379abc#41\",\"9781\":\"v-5a379abc#42\",\"9782\":\"v-5a379abc#42/0\",\"9783\":\"v-5a379abc#42/1\",\"9784\":\"v-5a379abc#42/2\",\"9785\":\"v-5a379abc#42/3\",\"9786\":\"v-5a379abc#43\",\"9787\":\"v-5a379abc#43/4\",\"9788\":\"v-5a379abc#44\",\"9789\":\"v-5a379abc#44/0\",\"9790\":\"v-5a379abc#44/1\",\"9791\":\"v-5a379abc#45\",\"9792\":\"v-5a379abc#46\",\"9793\":\"v-5a379abc#46/0\",\"9794\":\"v-5a379abc#46/1\",\"9795\":\"v-5a379abc#46/2\",\"9796\":\"v-5a379abc#46/3\",\"9797\":\"v-5a379abc#46/4\",\"9798\":\"v-5a379abc#47\",\"9799\":\"v-5a379abc#47/0\",\"9800\":\"v-5a379abc#47/1\",\"9801\":\"v-5a379abc#47/2\",\"9802\":\"v-5a379abc#47/3\",\"9803\":\"v-5a379abc#48\",\"9804\":\"v-5a379abc#48/0\",\"9805\":\"v-5a379abc#48/1\",\"9806\":\"v-ecbdccf8\",\"9807\":\"v-ecbdccf8#1\",\"9808\":\"v-ecbdccf8#1/0\",\"9809\":\"v-ecbdccf8#2\",\"9810\":\"v-ecbdccf8#3\",\"9811\":\"v-ecbdccf8#3/0\",\"9812\":\"v-ecbdccf8#3/1\",\"9813\":\"v-ecbdccf8#3/2\",\"9814\":\"v-ecbdccf8#4\",\"9815\":\"v-ecbdccf8#4/0\",\"9816\":\"v-ecbdccf8#5\",\"9817\":\"v-ecbdccf8#5/0\",\"9818\":\"v-ecbdccf8#5/1\",\"9819\":\"v-ecbdccf8#6\",\"9820\":\"v-ecbdccf8#6/2\",\"9821\":\"v-ecbdccf8#6/3\",\"9822\":\"v-ecbdccf8#7\",\"9823\":\"v-ecbdccf8#7/4\",\"9824\":\"v-ecbdccf8#7/5\",\"9825\":\"v-48a9a854\",\"9826\":\"v-48a9a854#1\",\"9827\":\"v-48a9a854#1/0\",\"9828\":\"v-48a9a854#1/1\",\"9829\":\"v-48a9a854#2\",\"9830\":\"v-48a9a854#2/0\",\"9831\":\"v-48a9a854#2/1\",\"9832\":\"v-48a9a854#2/2\",\"9833\":\"v-48a9a854#3\",\"9834\":\"v-48a9a854#3/0\",\"9835\":\"v-48a9a854#3/1\",\"9836\":\"v-48a9a854#4\",\"9837\":\"v-48a9a854#4/0\",\"9838\":\"v-48a9a854#4/1\",\"9839\":\"v-48a9a854#5\",\"9840\":\"v-48a9a854#5/0\",\"9841\":\"v-48a9a854#6\",\"9842\":\"v-48a9a854#6/0\",\"9843\":\"v-48a9a854#6/1\",\"9844\":\"v-48a9a854#6/2\",\"9845\":\"v-48a9a854#6/3\",\"9846\":\"v-48a9a854#6/4\",\"9847\":\"v-48a9a854#6/5\",\"9848\":\"v-48a9a854#6/6\",\"9849\":\"v-48a9a854#6/7\",\"9850\":\"v-48a9a854#7\",\"9851\":\"v-48a9a854#8\",\"9852\":\"v-48a9a854#8/0\",\"9853\":\"v-48a9a854#9\",\"9854\":\"v-48a9a854#9/0\",\"9855\":\"v-48a9a854#10\",\"9856\":\"v-48a9a854#10/0\",\"9857\":\"v-48a9a854#10/1\",\"9858\":\"v-48a9a854#10/2\",\"9859\":\"v-48a9a854#10/3\",\"9860\":\"v-48a9a854#10/4\",\"9861\":\"v-48a9a854#10/5\",\"9862\":\"v-48a9a854#10/6\",\"9863\":\"v-48a9a854#11\",\"9864\":\"v-48a9a854#11/0\",\"9865\":\"v-48a9a854#12\",\"9866\":\"v-48a9a854#12/0\",\"9867\":\"v-9de9ea26\",\"9868\":\"v-9de9ea26#1\",\"9869\":\"v-9de9ea26#1/0\",\"9870\":\"v-9de9ea26#1/1\",\"9871\":\"v-9de9ea26#1/2\",\"9872\":\"v-9de9ea26#2\",\"9873\":\"v-9de9ea26#2/0\",\"9874\":\"v-9de9ea26#2/1\",\"9875\":\"v-9de9ea26#3\",\"9876\":\"v-9de9ea26#3/0\",\"9877\":\"v-9de9ea26#3/1\",\"9878\":\"v-9de9ea26#3/2\",\"9879\":\"v-9de9ea26#3/3\",\"9880\":\"v-9de9ea26#3/4\",\"9881\":\"v-9de9ea26#3/5\",\"9882\":\"v-9de9ea26#3/6\",\"9883\":\"v-9de9ea26#3/7\",\"9884\":\"v-9de9ea26#3/8\",\"9885\":\"v-9de9ea26#3/9\",\"9886\":\"v-9de9ea26#3/10\",\"9887\":\"v-9de9ea26#4\",\"9888\":\"v-9de9ea26#4/0\",\"9889\":\"v-9de9ea26#4/1\",\"9890\":\"v-9de9ea26#5\",\"9891\":\"v-9de9ea26#5/0\",\"9892\":\"v-9de9ea26#5/1\",\"9893\":\"v-9de9ea26#5/2\",\"9894\":\"v-9de9ea26#5/3\",\"9895\":\"v-9de9ea26#5/4\",\"9896\":\"v-9de9ea26#6\",\"9897\":\"v-9de9ea26#7\",\"9898\":\"v-9de9ea26#7/5\",\"9899\":\"v-9de9ea26#7/6\",\"9900\":\"v-9de9ea26#7/7\",\"9901\":\"v-9de9ea26#7/8\",\"9902\":\"v-9de9ea26#7/9\",\"9903\":\"v-9de9ea26#8\",\"9904\":\"v-9de9ea26#8/10\",\"9905\":\"v-9de9ea26#8/11\",\"9906\":\"v-9de9ea26#8/12\",\"9907\":\"v-9de9ea26#8/13\",\"9908\":\"v-0480a4ea\",\"9909\":\"v-0480a4ea#1\",\"9910\":\"v-0480a4ea#1/0\",\"9911\":\"v-0480a4ea#2\",\"9912\":\"v-0480a4ea#2/0\",\"9913\":\"v-0480a4ea#2/1\",\"9914\":\"v-0480a4ea#3\",\"9915\":\"v-0480a4ea#3/0\",\"9916\":\"v-0480a4ea#3/1\",\"9917\":\"v-0480a4ea#4\",\"9918\":\"v-0480a4ea#4/0\",\"9919\":\"v-0480a4ea#4/1\",\"9920\":\"v-0480a4ea#5\",\"9921\":\"v-0480a4ea#5/0\",\"9922\":\"v-0480a4ea#6\",\"9923\":\"v-0480a4ea#6/0\",\"9924\":\"v-0480a4ea#7\",\"9925\":\"v-0480a4ea#7/0\",\"9926\":\"v-0480a4ea#8\",\"9927\":\"v-0480a4ea#8/0\",\"9928\":\"v-0480a4ea#8/1\",\"9929\":\"v-0480a4ea#9\",\"9930\":\"v-0480a4ea#9/0\",\"9931\":\"v-0480a4ea#9/1\",\"9932\":\"v-0480a4ea#9/2\",\"9933\":\"v-0480a4ea#10\",\"9934\":\"v-0480a4ea#10/0\",\"9935\":\"v-0480a4ea#10/1\",\"9936\":\"v-0480a4ea#10/2\",\"9937\":\"v-0480a4ea#10/3\",\"9938\":\"v-0480a4ea#10/4\",\"9939\":\"v-0480a4ea#10/5\",\"9940\":\"v-0480a4ea#10/6\",\"9941\":\"v-0480a4ea#10/7\",\"9942\":\"v-0480a4ea#10/8\",\"9943\":\"v-0480a4ea#10/9\",\"9944\":\"v-0480a4ea#10/10\",\"9945\":\"v-0480a4ea#10/11\",\"9946\":\"v-0480a4ea#10/12\",\"9947\":\"v-0480a4ea#10/13\",\"9948\":\"v-0480a4ea#10/14\",\"9949\":\"v-0480a4ea#10/15\",\"9950\":\"v-0480a4ea#10/16\",\"9951\":\"v-0480a4ea#11\",\"9952\":\"v-0480a4ea#11/0\",\"9953\":\"v-0480a4ea#11/1\",\"9954\":\"v-0480a4ea#12\",\"9955\":\"v-0480a4ea#12/0\",\"9956\":\"v-0480a4ea#12/1\",\"9957\":\"v-0480a4ea#12/2\",\"9958\":\"v-0480a4ea#12/3\",\"9959\":\"v-0480a4ea#12/4\",\"9960\":\"v-0480a4ea#12/5\",\"9961\":\"v-0480a4ea#12/6\",\"9962\":\"v-0480a4ea#12/7\",\"9963\":\"v-0480a4ea#13\",\"9964\":\"v-0480a4ea#14\",\"9965\":\"v-0480a4ea#14/0\",\"9966\":\"v-0480a4ea#15\",\"9967\":\"v-0480a4ea#15/0\",\"9968\":\"v-0480a4ea#15/1\",\"9969\":\"v-0480a4ea#15/2\",\"9970\":\"v-0480a4ea#16\",\"9971\":\"v-0480a4ea#16/0\",\"9972\":\"v-0480a4ea#16/1\",\"9973\":\"v-0480a4ea#16/2\",\"9974\":\"v-0480a4ea#16/3\",\"9975\":\"v-0480a4ea#16/4\",\"9976\":\"v-0480a4ea#17\",\"9977\":\"v-0480a4ea#17/0\",\"9978\":\"v-0480a4ea#17/1\",\"9979\":\"v-0480a4ea#17/2\",\"9980\":\"v-0480a4ea#17/3\",\"9981\":\"v-0480a4ea#17/4\",\"9982\":\"v-0480a4ea#17/5\",\"9983\":\"v-0480a4ea#17/6\",\"9984\":\"v-0480a4ea#17/7\",\"9985\":\"v-0480a4ea#17/8\",\"9986\":\"v-0480a4ea#17/9\",\"9987\":\"v-0480a4ea#17/10\",\"9988\":\"v-0480a4ea#17/11\",\"9989\":\"v-0480a4ea#17/12\",\"9990\":\"v-0480a4ea#17/13\",\"9991\":\"v-0480a4ea#17/14\",\"9992\":\"v-0480a4ea#17/15\",\"9993\":\"v-0480a4ea#17/16\",\"9994\":\"v-0480a4ea#17/17\",\"9995\":\"v-0480a4ea#18\",\"9996\":\"v-0480a4ea#18/0\",\"9997\":\"v-0480a4ea#18/1\",\"9998\":\"v-0480a4ea#18/2\",\"9999\":\"v-0480a4ea#18/3\",\"10000\":\"v-0480a4ea#18/4\",\"10001\":\"v-0480a4ea#18/5\",\"10002\":\"v-0480a4ea#18/6\",\"10003\":\"v-0480a4ea#18/7\",\"10004\":\"v-0480a4ea#18/8\",\"10005\":\"v-0480a4ea#18/9\",\"10006\":\"v-0480a4ea#18/10\",\"10007\":\"v-0480a4ea#18/11\",\"10008\":\"v-0480a4ea#18/12\",\"10009\":\"v-0480a4ea#18/13\",\"10010\":\"v-0480a4ea#18/14\",\"10011\":\"v-0480a4ea#18/15\",\"10012\":\"v-cb6166ca\",\"10013\":\"v-cb6166ca#1\",\"10014\":\"v-cb6166ca#1/0\",\"10015\":\"v-cb6166ca#2\",\"10016\":\"v-cb6166ca#2/0\",\"10017\":\"v-cb6166ca#3\",\"10018\":\"v-cb6166ca#3/0\",\"10019\":\"v-cb6166ca#4\",\"10020\":\"v-cb6166ca#4/0\",\"10021\":\"v-cb6166ca#4/1\",\"10022\":\"v-cb6166ca#4/2\",\"10023\":\"v-cb6166ca#4/3\",\"10024\":\"v-cb6166ca#4/4\",\"10025\":\"v-cb6166ca#5\",\"10026\":\"v-cb6166ca#5/0\",\"10027\":\"v-cb6166ca#6\",\"10028\":\"v-cb6166ca#6/0\",\"10029\":\"v-cb6166ca#6/1\",\"10030\":\"v-cb6166ca#6/2\",\"10031\":\"v-cb6166ca#6/3\",\"10032\":\"v-cb6166ca#7\",\"10033\":\"v-cb6166ca#7/0\",\"10034\":\"v-cb6166ca#7/1\",\"10035\":\"v-cb6166ca#7/2\",\"10036\":\"v-cb6166ca#7/3\",\"10037\":\"v-cb6166ca#7/4\",\"10038\":\"v-cb6166ca#7/5\",\"10039\":\"v-cb6166ca#8\",\"10040\":\"v-cb6166ca#8/0\",\"10041\":\"v-cb6166ca#8/1\",\"10042\":\"v-cb6166ca#8/2\",\"10043\":\"v-cb6166ca#8/3\",\"10044\":\"v-cb6166ca#8/4\",\"10045\":\"v-cb6166ca#9\",\"10046\":\"v-cb6166ca#9/0\",\"10047\":\"v-cb6166ca#10\",\"10048\":\"v-cb6166ca#11\",\"10049\":\"v-cb6166ca#11/0\",\"10050\":\"v-cb6166ca#11/1\",\"10051\":\"v-cb6166ca#11/2\",\"10052\":\"v-cb6166ca#11/3\",\"10053\":\"v-cb6166ca#11/4\",\"10054\":\"v-cb6166ca#11/5\",\"10055\":\"v-cb6166ca#11/6\",\"10056\":\"v-cb6166ca#11/7\",\"10057\":\"v-cb6166ca#11/8\",\"10058\":\"v-cb6166ca#11/9\",\"10059\":\"v-cb6166ca#11/10\",\"10060\":\"v-cb6166ca#11/11\",\"10061\":\"v-cb6166ca#11/12\",\"10062\":\"v-cb6166ca#11/13\",\"10063\":\"v-cb6166ca#11/14\",\"10064\":\"v-cb6166ca#11/15\",\"10065\":\"v-cb6166ca#11/16\",\"10066\":\"v-cb6166ca#11/17\",\"10067\":\"v-cb6166ca#11/18\",\"10068\":\"v-cb6166ca#11/19\",\"10069\":\"v-cb6166ca#11/20\",\"10070\":\"v-cb6166ca#11/21\",\"10071\":\"v-cb6166ca#11/22\",\"10072\":\"v-cb6166ca#11/23\",\"10073\":\"v-cb6166ca#11/24\",\"10074\":\"v-cb6166ca#11/25\",\"10075\":\"v-cb6166ca#11/26\",\"10076\":\"v-cb6166ca#12\",\"10077\":\"v-cb6166ca#12/0\",\"10078\":\"v-cb6166ca#12/1\",\"10079\":\"v-cb6166ca#12/2\",\"10080\":\"v-cb6166ca#13\",\"10081\":\"v-cb6166ca#13/0\",\"10082\":\"v-cb6166ca#13/1\",\"10083\":\"v-cb6166ca#13/2\",\"10084\":\"v-cb6166ca#14\",\"10085\":\"v-cb6166ca#14/0\",\"10086\":\"v-cb6166ca#14/1\",\"10087\":\"v-cb6166ca#14/2\",\"10088\":\"v-cb6166ca#14/3\",\"10089\":\"v-cb6166ca#14/4\",\"10090\":\"v-cb6166ca#14/5\",\"10091\":\"v-cb6166ca#14/6\",\"10092\":\"v-cb6166ca#14/7\",\"10093\":\"v-cb6166ca#14/8\",\"10094\":\"v-cb6166ca#14/9\",\"10095\":\"v-cb6166ca#14/10\",\"10096\":\"v-cb6166ca#14/11\",\"10097\":\"v-cb6166ca#14/12\",\"10098\":\"v-cb6166ca#14/13\",\"10099\":\"v-cb6166ca#14/14\",\"10100\":\"v-cb6166ca#14/15\",\"10101\":\"v-cb6166ca#14/16\",\"10102\":\"v-cb6166ca#14/17\",\"10103\":\"v-cb6166ca#14/18\",\"10104\":\"v-cb6166ca#14/19\",\"10105\":\"v-cb6166ca#14/20\",\"10106\":\"v-cb6166ca#14/21\",\"10107\":\"v-cb6166ca#14/22\",\"10108\":\"v-cb6166ca#14/23\",\"10109\":\"v-cb6166ca#14/24\",\"10110\":\"v-cb6166ca#14/25\",\"10111\":\"v-cb6166ca#14/26\",\"10112\":\"v-cb6166ca#14/27\",\"10113\":\"v-cb6166ca#14/28\",\"10114\":\"v-cb6166ca#14/29\",\"10115\":\"v-cb6166ca#15\",\"10116\":\"v-cb6166ca#15/0\",\"10117\":\"v-cb6166ca#16\",\"10118\":\"v-cb6166ca#16/0\",\"10119\":\"v-cb6166ca#16/1\",\"10120\":\"v-cb6166ca#16/2\",\"10121\":\"v-cb6166ca#17\",\"10122\":\"v-cb6166ca#17/0\",\"10123\":\"v-cb6166ca#17/1\",\"10124\":\"v-678bcd60\",\"10125\":\"v-678bcd60#0/0\",\"10126\":\"v-678bcd60#1\",\"10127\":\"v-678bcd60#2\",\"10128\":\"v-678bcd60#2/0\",\"10129\":\"v-678bcd60#2/1\",\"10130\":\"v-678bcd60#2/2\",\"10131\":\"v-678bcd60#2/3\",\"10132\":\"v-678bcd60#2/4\",\"10133\":\"v-678bcd60#2/5\",\"10134\":\"v-678bcd60#2/6\",\"10135\":\"v-678bcd60#3\",\"10136\":\"v-678bcd60#3/0\",\"10137\":\"v-678bcd60#4\",\"10138\":\"v-678bcd60#4/0\",\"10139\":\"v-678bcd60#4/1\",\"10140\":\"v-678bcd60#5\",\"10141\":\"v-678bcd60#5/0\",\"10142\":\"v-678bcd60#5/1\",\"10143\":\"v-678bcd60#5/2\",\"10144\":\"v-678bcd60#5/3\",\"10145\":\"v-678bcd60#5/4\",\"10146\":\"v-678bcd60#6\",\"10147\":\"v-678bcd60#6/0\",\"10148\":\"v-678bcd60#6/1\",\"10149\":\"v-678bcd60#6/2\",\"10150\":\"v-678bcd60#6/3\",\"10151\":\"v-678bcd60#6/4\",\"10152\":\"v-678bcd60#7\",\"10153\":\"v-678bcd60#8\",\"10154\":\"v-678bcd60#8/5\",\"10155\":\"v-678bcd60#9\",\"10156\":\"v-678bcd60#9/0\",\"10157\":\"v-678bcd60#9/1\",\"10158\":\"v-678bcd60#9/2\",\"10159\":\"v-678bcd60#9/3\",\"10160\":\"v-678bcd60#10\",\"10161\":\"v-678bcd60#10/4\",\"10162\":\"v-678bcd60#10/5\",\"10163\":\"v-678bcd60#11\",\"10164\":\"v-678bcd60#11/6\",\"10165\":\"v-678bcd60#12\",\"10166\":\"v-678bcd60#12/7\",\"10167\":\"v-678bcd60#12/8\",\"10168\":\"v-678bcd60#13\",\"10169\":\"v-678bcd60#13/9\",\"10170\":\"v-678bcd60#13/10\",\"10171\":\"v-a6837e0a\",\"10172\":\"v-a6837e0a#0/0\",\"10173\":\"v-a6837e0a#0/1\",\"10174\":\"v-a6837e0a#1\",\"10175\":\"v-a6837e0a#1/0\",\"10176\":\"v-a6837e0a#1/1\",\"10177\":\"v-a6837e0a#1/2\",\"10178\":\"v-a6837e0a#1/3\",\"10179\":\"v-a6837e0a#2\",\"10180\":\"v-a6837e0a#2/0\",\"10181\":\"v-a6837e0a#2/1\",\"10182\":\"v-a6837e0a#3\",\"10183\":\"v-a6837e0a#3/0\",\"10184\":\"v-a6837e0a#3/1\",\"10185\":\"v-a6837e0a#4\",\"10186\":\"v-a6837e0a#4/0\",\"10187\":\"v-a6837e0a#4/1\",\"10188\":\"v-a6837e0a#4/2\",\"10189\":\"v-a6837e0a#4/3\",\"10190\":\"v-a6837e0a#4/4\",\"10191\":\"v-a6837e0a#5\",\"10192\":\"v-a6837e0a#5/0\",\"10193\":\"v-a6837e0a#5/1\",\"10194\":\"v-a6837e0a#5/2\",\"10195\":\"v-a6837e0a#5/3\",\"10196\":\"v-a6837e0a#5/4\",\"10197\":\"v-a6837e0a#5/5\",\"10198\":\"v-a6837e0a#5/6\",\"10199\":\"v-a6837e0a#5/7\",\"10200\":\"v-607d6490\",\"10201\":\"v-607d6490#1\",\"10202\":\"v-607d6490#2\",\"10203\":\"v-607d6490#2/0\",\"10204\":\"v-607d6490#2/1\",\"10205\":\"v-607d6490#2/2\",\"10206\":\"v-607d6490#2/3\",\"10207\":\"v-607d6490#2/4\",\"10208\":\"v-607d6490#2/5\",\"10209\":\"v-607d6490#2/6\",\"10210\":\"v-607d6490#3\",\"10211\":\"v-607d6490#3/7\",\"10212\":\"v-607d6490#3/8\",\"10213\":\"v-607d6490#3/9\",\"10214\":\"v-607d6490#3/10\",\"10215\":\"v-607d6490#3/11\",\"10216\":\"v-607d6490#3/12\",\"10217\":\"v-607d6490#4\",\"10218\":\"v-607d6490#4/0\",\"10219\":\"v-607d6490#4/1\",\"10220\":\"v-607d6490#5\",\"10221\":\"v-607d6490#5/2\",\"10222\":\"v-607d6490#5/3\",\"10223\":\"v-607d6490#6\",\"10224\":\"v-607d6490#6/4\",\"10225\":\"v-607d6490#7\",\"10226\":\"v-607d6490#7/0\",\"10227\":\"v-607d6490#8\",\"10228\":\"v-607d6490#8/0\",\"10229\":\"v-607d6490#9\",\"10230\":\"v-607d6490#9/1\",\"10231\":\"v-607d6490#9/2\",\"10232\":\"v-607d6490#9/3\",\"10233\":\"v-607d6490#9/4\",\"10234\":\"v-607d6490#9/5\",\"10235\":\"v-607d6490#9/6\",\"10236\":\"v-607d6490#9/7\",\"10237\":\"v-607d6490#10\",\"10238\":\"v-607d6490#10/0\",\"10239\":\"v-607d6490#10/1\",\"10240\":\"v-0c271460\",\"10241\":\"v-0c271460#0/0\",\"10242\":\"v-0c271460#0/1\",\"10243\":\"v-0c271460#1\",\"10244\":\"v-0c271460#2\",\"10245\":\"v-0c271460#2/0\",\"10246\":\"v-0c271460#2/1\",\"10247\":\"v-0c271460#3\",\"10248\":\"v-0c271460#3/2\",\"10249\":\"v-0c271460#3/3\",\"10250\":\"v-0c271460#3/4\",\"10251\":\"v-0c271460#4\",\"10252\":\"v-0c271460#4/0\",\"10253\":\"v-0c271460#5\",\"10254\":\"v-0c271460#5/1\",\"10255\":\"v-0c271460#5/2\",\"10256\":\"v-0c271460#5/3\",\"10257\":\"v-0c271460#5/4\",\"10258\":\"v-0c271460#5/5\",\"10259\":\"v-0c271460#5/6\",\"10260\":\"v-0c271460#6\",\"10261\":\"v-0c271460#6/0\",\"10262\":\"v-0c271460#7\",\"10263\":\"v-0c271460#7/1\",\"10264\":\"v-0c271460#7/2\",\"10265\":\"v-0c271460#8\",\"10266\":\"v-0c271460#8/3\",\"10267\":\"v-0c271460#9\",\"10268\":\"v-0c271460#9/0\",\"10269\":\"v-0c271460#9/1\",\"10270\":\"v-0c271460#10\",\"10271\":\"v-0c271460#10/2\",\"10272\":\"v-0c271460#10/3\",\"10273\":\"v-0c271460#10/4\",\"10274\":\"v-0c271460#11\",\"10275\":\"v-0c271460#11/0\",\"10276\":\"v-0c271460#11/1\",\"10277\":\"v-0c271460#11/2\",\"10278\":\"v-0c271460#11/3\",\"10279\":\"v-0c271460#11/4\",\"10280\":\"v-0c271460#12\",\"10281\":\"v-0c271460#12/0\",\"10282\":\"v-0c271460#12/1\",\"10283\":\"v-0c271460#12/2\",\"10284\":\"v-0c271460#12/3\",\"10285\":\"v-0c271460#12/4\",\"10286\":\"v-0c271460#13\",\"10287\":\"v-0c271460#13/0\",\"10288\":\"v-0c271460#13/1\",\"10289\":\"v-0c271460#13/2\",\"10290\":\"v-0c271460#13/3\",\"10291\":\"v-0c271460#14\",\"10292\":\"v-0c271460#14/4\",\"10293\":\"v-0c271460#14/5\",\"10294\":\"v-0c271460#15\",\"10295\":\"v-0c271460#15/6\",\"10296\":\"v-0c271460#15/7\",\"10297\":\"v-0c271460#16\",\"10298\":\"v-0c271460#17\",\"10299\":\"v-0c271460#17/8\",\"10300\":\"v-0c271460#17/9\",\"10301\":\"v-0c271460#18\",\"10302\":\"v-0c271460#18/10\",\"10303\":\"v-b6a5f404\",\"10304\":\"v-b6a5f404#1\",\"10305\":\"v-b6a5f404#2\",\"10306\":\"v-b6a5f404#2/0\",\"10307\":\"v-b6a5f404#2/1\",\"10308\":\"v-b6a5f404#2/2\",\"10309\":\"v-b6a5f404#2/3\",\"10310\":\"v-b6a5f404#3\",\"10311\":\"v-b6a5f404#3/0\",\"10312\":\"v-b6a5f404#4\",\"10313\":\"v-b6a5f404#4/1\",\"10314\":\"v-b6a5f404#4/2\",\"10315\":\"v-b6a5f404#5\",\"10316\":\"v-b6a5f404#5/3\",\"10317\":\"v-b6a5f404#5/4\",\"10318\":\"v-b6a5f404#6\",\"10319\":\"v-b6a5f404#7\",\"10320\":\"v-b6a5f404#7/5\",\"10321\":\"v-b6a5f404#7/6\",\"10322\":\"v-b6a5f404#7/7\",\"10323\":\"v-b6a5f404#7/8\",\"10324\":\"v-b6a5f404#7/9\",\"10325\":\"v-b6a5f404#7/10\",\"10326\":\"v-b6a5f404#7/11\",\"10327\":\"v-b6a5f404#8\",\"10328\":\"v-b6a5f404#8/12\",\"10329\":\"v-b6a5f404#8/13\",\"10330\":\"v-b6a5f404#8/14\",\"10331\":\"v-b6a5f404#8/15\",\"10332\":\"v-b6a5f404#8/16\",\"10333\":\"v-b6a5f404#8/17\",\"10334\":\"v-b6a5f404#9\",\"10335\":\"v-b6a5f404#9/18\",\"10336\":\"v-b6a5f404#9/19\",\"10337\":\"v-b6a5f404#9/20\",\"10338\":\"v-b6a5f404#9/21\",\"10339\":\"v-b6a5f404#9/22\",\"10340\":\"v-b6a5f404#9/23\",\"10341\":\"v-b6a5f404#10\",\"10342\":\"v-b6a5f404#11\",\"10343\":\"v-b6a5f404#11/0\",\"10344\":\"v-b6a5f404#11/1\",\"10345\":\"v-b6a5f404#11/2\",\"10346\":\"v-b6a5f404#11/3\",\"10347\":\"v-b6a5f404#11/4\",\"10348\":\"v-b6a5f404#11/5\",\"10349\":\"v-b6a5f404#12\",\"10350\":\"v-b6a5f404#12/6\",\"10351\":\"v-b6a5f404#12/7\",\"10352\":\"v-b6a5f404#13\",\"10353\":\"v-b6a5f404#13/8\",\"10354\":\"v-b6a5f404#13/9\",\"10355\":\"v-b6a5f404#14\",\"10356\":\"v-b6a5f404#14/10\",\"10357\":\"v-b6a5f404#14/11\",\"10358\":\"v-09da746c\",\"10359\":\"v-09da746c#0/0\",\"10360\":\"v-09da746c#0/1\",\"10361\":\"v-09da746c#0/2\",\"10362\":\"v-09da746c#0/3\",\"10363\":\"v-09da746c#1\",\"10364\":\"v-09da746c#2\",\"10365\":\"v-09da746c#2/0\",\"10366\":\"v-09da746c#2/1\",\"10367\":\"v-09da746c#3\",\"10368\":\"v-09da746c#3/0\",\"10369\":\"v-09da746c#3/1\",\"10370\":\"v-09da746c#4\",\"10371\":\"v-09da746c#4/0\",\"10372\":\"v-09da746c#4/1\",\"10373\":\"v-09da746c#4/2\",\"10374\":\"v-09da746c#5\",\"10375\":\"v-09da746c#6\",\"10376\":\"v-09da746c#6/0\",\"10377\":\"v-09da746c#6/1\",\"10378\":\"v-09da746c#6/2\",\"10379\":\"v-09da746c#6/3\",\"10380\":\"v-09da746c#6/4\",\"10381\":\"v-09da746c#6/5\",\"10382\":\"v-09da746c#6/6\",\"10383\":\"v-09da746c#7\",\"10384\":\"v-09da746c#7/0\",\"10385\":\"v-09da746c#7/1\",\"10386\":\"v-09da746c#8\",\"10387\":\"v-09da746c#8/2\",\"10388\":\"v-09da746c#8/3\",\"10389\":\"v-09da746c#8/4\",\"10390\":\"v-09da746c#8/5\",\"10391\":\"v-09da746c#8/6\",\"10392\":\"v-09da746c#8/7\",\"10393\":\"v-09da746c#9\",\"10394\":\"v-09da746c#9/0\",\"10395\":\"v-09da746c#9/1\",\"10396\":\"v-09da746c#9/2\",\"10397\":\"v-09da746c#10\",\"10398\":\"v-09da746c#10/0\",\"10399\":\"v-09da746c#10/1\",\"10400\":\"v-09da746c#10/2\",\"10401\":\"v-09da746c#10/3\",\"10402\":\"v-09da746c#11\",\"10403\":\"v-09da746c#11/0\",\"10404\":\"v-09da746c#11/1\",\"10405\":\"v-09da746c#11/2\",\"10406\":\"v-09da746c#11/3\",\"10407\":\"v-09da746c#12\",\"10408\":\"v-09da746c#12/4\",\"10409\":\"v-09da746c#13\",\"10410\":\"v-09da746c#13/0\",\"10411\":\"v-09da746c#13/1\",\"10412\":\"v-09da746c#14\",\"10413\":\"v-09da746c#14/2\",\"10414\":\"v-09da746c#14/3\",\"10415\":\"v-09da746c#15\",\"10416\":\"v-09da746c#15/4\",\"10417\":\"v-09da746c#15/5\",\"10418\":\"v-09da746c#16\",\"10419\":\"v-09da746c#16/6\",\"10420\":\"v-09da746c#17\",\"10421\":\"v-09da746c#17/0\",\"10422\":\"v-09da746c#17/1\",\"10423\":\"v-09da746c#18\",\"10424\":\"v-09da746c#18/2\",\"10425\":\"v-09da746c#18/3\",\"10426\":\"v-09da746c#18/4\",\"10427\":\"v-09da746c#18/5\",\"10428\":\"v-09da746c#18/6\",\"10429\":\"v-09da746c#18/7\",\"10430\":\"v-09da746c#19\",\"10431\":\"v-09da746c#19/0\",\"10432\":\"v-09da746c#19/1\",\"10433\":\"v-09da746c#19/2\",\"10434\":\"v-09da746c#19/3\",\"10435\":\"v-f841d8ce\",\"10436\":\"v-f841d8ce#1\",\"10437\":\"v-f841d8ce#2\",\"10438\":\"v-f841d8ce#2/0\",\"10439\":\"v-f841d8ce#2/1\",\"10440\":\"v-f841d8ce#3\",\"10441\":\"v-f841d8ce#3/0\",\"10442\":\"v-f841d8ce#3/1\",\"10443\":\"v-f841d8ce#4\",\"10444\":\"v-f841d8ce#4/0\",\"10445\":\"v-f841d8ce#4/1\",\"10446\":\"v-f841d8ce#4/2\",\"10447\":\"v-f841d8ce#5\",\"10448\":\"v-f841d8ce#5/0\",\"10449\":\"v-f841d8ce#6\",\"10450\":\"v-f841d8ce#6/0\",\"10451\":\"v-f841d8ce#7\",\"10452\":\"v-f841d8ce#7/0\",\"10453\":\"v-f841d8ce#7/1\",\"10454\":\"v-f841d8ce#8\",\"10455\":\"v-f841d8ce#8/0\",\"10456\":\"v-f841d8ce#8/1\",\"10457\":\"v-f841d8ce#8/2\",\"10458\":\"v-f841d8ce#8/3\",\"10459\":\"v-f841d8ce#9\",\"10460\":\"v-f841d8ce#9/0\",\"10461\":\"v-f841d8ce#9/1\",\"10462\":\"v-f841d8ce#9/2\",\"10463\":\"v-f841d8ce#9/3\",\"10464\":\"v-f841d8ce#9/4\",\"10465\":\"v-f841d8ce#10\",\"10466\":\"v-f841d8ce#10/0\",\"10467\":\"v-f841d8ce#10/1\",\"10468\":\"v-f841d8ce#11\",\"10469\":\"v-f841d8ce#11/0\",\"10470\":\"v-f841d8ce#11/1\",\"10471\":\"v-f2553160\",\"10472\":\"v-f2553160#0/0\",\"10473\":\"v-f2553160#0/1\",\"10474\":\"v-f2553160#1\",\"10475\":\"v-f2553160#2\",\"10476\":\"v-f2553160#2/0\",\"10477\":\"v-f2553160#2/1\",\"10478\":\"v-f2553160#3\",\"10479\":\"v-f2553160#3/0\",\"10480\":\"v-f2553160#3/1\",\"10481\":\"v-f2553160#3/2\",\"10482\":\"v-f2553160#4\",\"10483\":\"v-f2553160#4/0\",\"10484\":\"v-f2553160#4/1\",\"10485\":\"v-f2553160#4/2\",\"10486\":\"v-f2553160#4/3\",\"10487\":\"v-f2553160#4/4\",\"10488\":\"v-f2553160#5\",\"10489\":\"v-f2553160#5/0\",\"10490\":\"v-f2553160#5/1\",\"10491\":\"v-f2553160#5/2\",\"10492\":\"v-f2553160#5/3\",\"10493\":\"v-f2553160#6\",\"10494\":\"v-f2553160#7\",\"10495\":\"v-f2553160#7/0\",\"10496\":\"v-f2553160#7/1\",\"10497\":\"v-f2553160#7/2\",\"10498\":\"v-f2553160#7/3\",\"10499\":\"v-f2553160#8\",\"10500\":\"v-f2553160#8/4\",\"10501\":\"v-f2553160#8/5\",\"10502\":\"v-f2553160#8/6\",\"10503\":\"v-f2553160#8/7\",\"10504\":\"v-f2553160#9\",\"10505\":\"v-f2553160#9/8\",\"10506\":\"v-f2553160#9/9\",\"10507\":\"v-f2553160#9/10\",\"10508\":\"v-f2553160#9/11\",\"10509\":\"v-f2553160#10\",\"10510\":\"v-f2553160#10/12\",\"10511\":\"v-f2553160#10/13\",\"10512\":\"v-f2553160#10/14\",\"10513\":\"v-f2553160#11\",\"10514\":\"v-f2553160#11/0\",\"10515\":\"v-f2553160#11/1\",\"10516\":\"v-f2553160#12\",\"10517\":\"v-f2553160#12/0\",\"10518\":\"v-f2553160#12/1\",\"10519\":\"v-f2553160#13\",\"10520\":\"v-f2553160#13/0\",\"10521\":\"v-f2553160#13/1\",\"10522\":\"v-f2553160#14\",\"10523\":\"v-f2553160#14/0\",\"10524\":\"v-f2553160#14/1\",\"10525\":\"v-f2553160#15\",\"10526\":\"v-f2553160#15/0\",\"10527\":\"v-f2553160#15/1\",\"10528\":\"v-f2553160#15/2\",\"10529\":\"v-f2553160#15/3\",\"10530\":\"v-f2553160#15/4\",\"10531\":\"v-f2553160#15/5\",\"10532\":\"v-f2553160#16\",\"10533\":\"v-f2553160#16/0\",\"10534\":\"v-f2553160#16/1\",\"10535\":\"v-f2553160#17\",\"10536\":\"v-f2553160#17/0\",\"10537\":\"v-f2553160#17/1\",\"10538\":\"v-f2553160#17/2\",\"10539\":\"v-f2553160#17/3\",\"10540\":\"v-f2553160#18\",\"10541\":\"v-f2553160#18/0\",\"10542\":\"v-f2553160#19\",\"10543\":\"v-f2553160#19/1\",\"10544\":\"v-f2553160#19/2\",\"10545\":\"v-f2553160#19/3\",\"10546\":\"v-f2553160#19/4\",\"10547\":\"v-f2553160#19/5\",\"10548\":\"v-f2553160#19/6\",\"10549\":\"v-f2553160#20\",\"10550\":\"v-f2553160#20/0\",\"10551\":\"v-f2553160#20/1\",\"10552\":\"v-f2553160#20/2\",\"10553\":\"v-f2553160#21\",\"10554\":\"v-f2553160#21/0\",\"10555\":\"v-f2553160#22\",\"10556\":\"v-f2553160#22/1\",\"10557\":\"v-f2553160#22/2\",\"10558\":\"v-f2553160#22/3\",\"10559\":\"v-f2553160#22/4\",\"10560\":\"v-f2553160#22/5\",\"10561\":\"v-f2553160#23\",\"10562\":\"v-f2553160#23/0\",\"10563\":\"v-f2553160#23/1\",\"10564\":\"v-f2553160#24\",\"10565\":\"v-f2553160#24/0\",\"10566\":\"v-f2553160#24/1\",\"10567\":\"v-f2553160#24/2\",\"10568\":\"v-f2553160#24/3\",\"10569\":\"v-f2553160#24/4\",\"10570\":\"v-f2553160#24/5\",\"10571\":\"v-f2553160#24/6\",\"10572\":\"v-f2553160#24/7\",\"10573\":\"v-f2553160#24/8\",\"10574\":\"v-f2553160#24/9\",\"10575\":\"v-f2553160#24/10\",\"10576\":\"v-f2553160#24/11\",\"10577\":\"v-f2553160#25\",\"10578\":\"v-f2553160#25/12\",\"10579\":\"v-f2553160#25/13\",\"10580\":\"v-f2553160#25/14\",\"10581\":\"v-f2553160#25/15\",\"10582\":\"v-f2553160#25/16\",\"10583\":\"v-f2553160#25/17\",\"10584\":\"v-f2553160#26\",\"10585\":\"v-f2553160#26/18\",\"10586\":\"v-f2553160#26/19\",\"10587\":\"v-f2553160#26/20\",\"10588\":\"v-f2553160#26/21\",\"10589\":\"v-7d3726e6\",\"10590\":\"v-7d3726e6#1\",\"10591\":\"v-7d3726e6#2\",\"10592\":\"v-7d3726e6#2/0\",\"10593\":\"v-7d3726e6#2/1\",\"10594\":\"v-7d3726e6#2/2\",\"10595\":\"v-7d3726e6#3\",\"10596\":\"v-7d3726e6#3/0\",\"10597\":\"v-7d3726e6#3/1\",\"10598\":\"v-7d3726e6#4\",\"10599\":\"v-7d3726e6#4/2\",\"10600\":\"v-7d3726e6#5\",\"10601\":\"v-7d3726e6#6\",\"10602\":\"v-7d3726e6#6/0\",\"10603\":\"v-7d3726e6#6/1\",\"10604\":\"v-7d3726e6#6/2\",\"10605\":\"v-7d3726e6#7\",\"10606\":\"v-7d3726e6#7/0\",\"10607\":\"v-7d3726e6#7/1\",\"10608\":\"v-7d3726e6#7/2\",\"10609\":\"v-7d3726e6#7/3\",\"10610\":\"v-7d3726e6#8\",\"10611\":\"v-7d3726e6#9\",\"10612\":\"v-7d3726e6#9/0\",\"10613\":\"v-7d3726e6#9/1\",\"10614\":\"v-7d3726e6#9/2\",\"10615\":\"v-7d3726e6#9/3\",\"10616\":\"v-7d3726e6#10\",\"10617\":\"v-7d3726e6#10/0\",\"10618\":\"v-7d3726e6#10/1\",\"10619\":\"v-7d3726e6#10/2\",\"10620\":\"v-7d3726e6#11\",\"10621\":\"v-7d3726e6#11/0\",\"10622\":\"v-7d3726e6#11/1\",\"10623\":\"v-7d3726e6#12\",\"10624\":\"v-7d3726e6#12/0\",\"10625\":\"v-7d3726e6#13\",\"10626\":\"v-7d3726e6#13/1\",\"10627\":\"v-7d3726e6#13/2\",\"10628\":\"v-7d3726e6#14\",\"10629\":\"v-7d3726e6#14/0\",\"10630\":\"v-7d3726e6#14/1\",\"10631\":\"v-086c61b4\",\"10632\":\"v-086c61b4#0/0\",\"10633\":\"v-086c61b4#0/1\",\"10634\":\"v-f9ff9fbc\",\"10635\":\"v-f9ff9fbc#0/0\",\"10636\":\"v-f9ff9fbc#0/1\",\"10637\":\"v-f9ff9fbc#1\",\"10638\":\"v-f9ff9fbc#1/0\",\"10639\":\"v-f9ff9fbc#1/1\",\"10640\":\"v-f9ff9fbc#1/2\",\"10641\":\"v-f9ff9fbc#2\",\"10642\":\"v-f9ff9fbc#2/0\",\"10643\":\"v-f9ff9fbc#2/1\",\"10644\":\"v-f9ff9fbc#3\",\"10645\":\"v-f9ff9fbc#4\",\"10646\":\"v-f9ff9fbc#4/0\",\"10647\":\"v-f9ff9fbc#4/1\",\"10648\":\"v-f9ff9fbc#5\",\"10649\":\"v-f9ff9fbc#5/0\",\"10650\":\"v-f9ff9fbc#6\",\"10651\":\"v-f9ff9fbc#6/0\",\"10652\":\"v-f9ff9fbc#6/1\",\"10653\":\"v-f9ff9fbc#6/2\",\"10654\":\"v-f9ff9fbc#6/3\",\"10655\":\"v-f9ff9fbc#7\",\"10656\":\"v-f9ff9fbc#8\",\"10657\":\"v-f9ff9fbc#8/0\",\"10658\":\"v-f9ff9fbc#8/1\",\"10659\":\"v-f9ff9fbc#9\",\"10660\":\"v-f9ff9fbc#9/0\",\"10661\":\"v-f9ff9fbc#9/1\",\"10662\":\"v-f9ff9fbc#10\",\"10663\":\"v-f9ff9fbc#10/0\",\"10664\":\"v-f9ff9fbc#11\",\"10665\":\"v-f9ff9fbc#11/1\",\"10666\":\"v-f9ff9fbc#11/2\",\"10667\":\"v-f9ff9fbc#11/3\",\"10668\":\"v-f9ff9fbc#11/4\",\"10669\":\"v-f9ff9fbc#11/5\",\"10670\":\"v-f9ff9fbc#11/6\",\"10671\":\"v-f9ff9fbc#11/7\",\"10672\":\"v-f9ff9fbc#12\",\"10673\":\"v-f9ff9fbc#12/0\",\"10674\":\"v-f9ff9fbc#12/1\",\"10675\":\"v-f9ff9fbc#12/2\",\"10676\":\"v-f9ff9fbc#12/3\",\"10677\":\"v-f9ff9fbc#12/4\",\"10678\":\"v-f9ff9fbc#12/5\",\"10679\":\"v-f9ff9fbc#12/6\",\"10680\":\"v-f9ff9fbc#12/7\",\"10681\":\"v-f9ff9fbc#12/8\",\"10682\":\"v-f9ff9fbc#12/9\",\"10683\":\"v-f9ff9fbc#12/10\",\"10684\":\"v-f9ff9fbc#12/11\",\"10685\":\"v-f9ff9fbc#12/12\",\"10686\":\"v-f9ff9fbc#12/13\",\"10687\":\"v-f9ff9fbc#12/14\",\"10688\":\"v-f9ff9fbc#12/15\",\"10689\":\"v-f9ff9fbc#12/16\",\"10690\":\"v-f9ff9fbc#12/17\",\"10691\":\"v-f9ff9fbc#12/18\",\"10692\":\"v-f9ff9fbc#12/19\",\"10693\":\"v-f9ff9fbc#12/20\",\"10694\":\"v-f9ff9fbc#12/21\",\"10695\":\"v-f9ff9fbc#12/22\",\"10696\":\"v-f9ff9fbc#12/23\",\"10697\":\"v-f9ff9fbc#12/24\",\"10698\":\"v-f9ff9fbc#12/25\",\"10699\":\"v-403f3337\",\"10700\":\"v-403f3337#1\",\"10701\":\"v-403f3337#2\",\"10702\":\"v-403f3337#2/0\",\"10703\":\"v-403f3337#2/1\",\"10704\":\"v-403f3337#3\",\"10705\":\"v-403f3337#3/2\",\"10706\":\"v-403f3337#3/3\",\"10707\":\"v-403f3337#3/4\",\"10708\":\"v-403f3337#3/5\",\"10709\":\"v-403f3337#3/6\",\"10710\":\"v-403f3337#4\",\"10711\":\"v-403f3337#4/0\",\"10712\":\"v-403f3337#5\",\"10713\":\"v-403f3337#5/1\",\"10714\":\"v-403f3337#5/2\",\"10715\":\"v-403f3337#6\",\"10716\":\"v-403f3337#6/3\",\"10717\":\"v-403f3337#6/4\",\"10718\":\"v-403f3337#6/5\",\"10719\":\"v-403f3337#7\",\"10720\":\"v-403f3337#7/6\",\"10721\":\"v-403f3337#7/7\",\"10722\":\"v-403f3337#7/8\",\"10723\":\"v-403f3337#7/9\",\"10724\":\"v-403f3337#7/10\",\"10725\":\"v-403f3337#7/11\",\"10726\":\"v-403f3337#7/12\",\"10727\":\"v-403f3337#8\",\"10728\":\"v-403f3337#8/13\",\"10729\":\"v-403f3337#9\",\"10730\":\"v-403f3337#9/14\",\"10731\":\"v-403f3337#10\",\"10732\":\"v-403f3337#10/15\",\"10733\":\"v-403f3337#10/16\",\"10734\":\"v-403f3337#10/17\",\"10735\":\"v-403f3337#11\",\"10736\":\"v-403f3337#11/18\",\"10737\":\"v-403f3337#11/19\",\"10738\":\"v-403f3337#12\",\"10739\":\"v-403f3337#12/0\",\"10740\":\"v-403f3337#12/1\",\"10741\":\"v-403f3337#12/2\",\"10742\":\"v-403f3337#13\",\"10743\":\"v-403f3337#13/0\",\"10744\":\"v-403f3337#13/1\",\"10745\":\"v-403f3337#14\",\"10746\":\"v-403f3337#14/0\",\"10747\":\"v-403f3337#14/1\",\"10748\":\"v-403f3337#15\",\"10749\":\"v-403f3337#15/0\",\"10750\":\"v-403f3337#15/1\",\"10751\":\"v-403f3337#16\",\"10752\":\"v-403f3337#16/0\",\"10753\":\"v-403f3337#16/1\",\"10754\":\"v-403f3337#16/2\",\"10755\":\"v-403f3337#16/3\",\"10756\":\"v-403f3337#16/4\",\"10757\":\"v-403f3337#16/5\",\"10758\":\"v-9cf394c0\",\"10759\":\"v-9cf394c0#1\",\"10760\":\"v-9cf394c0#1/0\",\"10761\":\"v-9cf394c0#1/1\",\"10762\":\"v-9cf394c0#1/2\",\"10763\":\"v-9cf394c0#1/3\",\"10764\":\"v-9cf394c0#2\",\"10765\":\"v-9cf394c0#2/0\",\"10766\":\"v-9cf394c0#2/1\",\"10767\":\"v-9cf394c0#3\",\"10768\":\"v-9cf394c0#4\",\"10769\":\"v-9cf394c0#4/2\",\"10770\":\"v-9cf394c0#4/3\",\"10771\":\"v-9cf394c0#5\",\"10772\":\"v-9cf394c0#5/4\",\"10773\":\"v-9cf394c0#5/5\",\"10774\":\"v-9cf394c0#5/6\",\"10775\":\"v-9cf394c0#6\",\"10776\":\"v-9cf394c0#6/7\",\"10777\":\"v-9cf394c0#6/8\",\"10778\":\"v-9cf394c0#6/9\",\"10779\":\"v-9cf394c0#7\",\"10780\":\"v-9cf394c0#7/0\",\"10781\":\"v-abf051c2\",\"10782\":\"v-abf051c2#0/0\",\"10783\":\"v-abf051c2#0/1\",\"10784\":\"v-1d054808\",\"10785\":\"v-1d054808#0/0\",\"10786\":\"v-1d054808#0/1\",\"10787\":\"v-1d054808#1\",\"10788\":\"v-1d054808#1/0\",\"10789\":\"v-1d054808#2\",\"10790\":\"v-1d054808#2/0\",\"10791\":\"v-1d054808#3\",\"10792\":\"v-1d054808#3/0\",\"10793\":\"v-1d054808#4\",\"10794\":\"v-1d054808#4/0\",\"10795\":\"v-1d054808#4/1\",\"10796\":\"v-1d054808#5\",\"10797\":\"v-1d054808#5/0\",\"10798\":\"v-1d054808#5/1\",\"10799\":\"v-1d054808#5/2\",\"10800\":\"v-1d054808#5/3\",\"10801\":\"v-1d054808#6\",\"10802\":\"v-1d054808#6/0\",\"10803\":\"v-1d054808#6/1\",\"10804\":\"v-1d054808#7\",\"10805\":\"v-1d054808#7/0\",\"10806\":\"v-1d054808#7/1\",\"10807\":\"v-1d054808#7/2\",\"10808\":\"v-1d054808#7/3\",\"10809\":\"v-1d054808#7/4\",\"10810\":\"v-1d054808#8\",\"10811\":\"v-1d054808#8/0\",\"10812\":\"v-1d054808#8/1\",\"10813\":\"v-1d054808#8/2\",\"10814\":\"v-1d054808#8/3\",\"10815\":\"v-1d054808#8/4\",\"10816\":\"v-1d054808#8/5\",\"10817\":\"v-1d054808#9\",\"10818\":\"v-1d054808#9/6\",\"10819\":\"v-1d054808#9/7\",\"10820\":\"v-1d054808#9/8\",\"10821\":\"v-1d054808#10\",\"10822\":\"v-1d054808#10/0\",\"10823\":\"v-1d054808#10/1\",\"10824\":\"v-39d46f7d\",\"10825\":\"v-39d46f7d#0/0\",\"10826\":\"v-39d46f7d#0/1\",\"10827\":\"v-39d46f7d#1\",\"10828\":\"v-39d46f7d#1/0\",\"10829\":\"v-39d46f7d#1/1\",\"10830\":\"v-39d46f7d#1/2\",\"10831\":\"v-66fdecfc\",\"10832\":\"v-66fdecfc#1\",\"10833\":\"v-66fdecfc#2\",\"10834\":\"v-66fdecfc#2/0\",\"10835\":\"v-66fdecfc#2/1\",\"10836\":\"v-66fdecfc#3\",\"10837\":\"v-66fdecfc#3/0\",\"10838\":\"v-66fdecfc#4\",\"10839\":\"v-66fdecfc#4/0\",\"10840\":\"v-66fdecfc#5\",\"10841\":\"v-66fdecfc#6\",\"10842\":\"v-66fdecfc#6/1\",\"10843\":\"v-66fdecfc#6/2\",\"10844\":\"v-66fdecfc#7\",\"10845\":\"v-66fdecfc#7/3\",\"10846\":\"v-66fdecfc#7/4\",\"10847\":\"v-66fdecfc#8\",\"10848\":\"v-66fdecfc#8/5\",\"10849\":\"v-66fdecfc#8/6\",\"10850\":\"v-66fdecfc#9\",\"10851\":\"v-66fdecfc#9/0\",\"10852\":\"v-66fdecfc#9/1\",\"10853\":\"v-4a3a5b26\",\"10854\":\"v-4a3a5b26#0/0\",\"10855\":\"v-4a3a5b26#0/1\",\"10856\":\"v-68839503\",\"10857\":\"v-68839503#1\",\"10858\":\"v-68839503#1/0\",\"10859\":\"v-68839503#1/1\",\"10860\":\"v-68839503#1/2\",\"10861\":\"v-68839503#1/3\",\"10862\":\"v-68839503#2\",\"10863\":\"v-68839503#2/0\",\"10864\":\"v-68839503#2/1\",\"10865\":\"v-68839503#2/2\",\"10866\":\"v-68be5650\",\"10867\":\"v-78b2fcd3\",\"10868\":\"v-7e1f989b\",\"10869\":\"v-0f22d43e\",\"10870\":\"v-14c69af4\",\"10871\":\"v-e4cb1150\",\"10872\":\"v-4dabea43\",\"10873\":\"v-28ddfa13\",\"10874\":\"v-744cca9a\",\"10875\":\"v-688315f7\",\"10876\":\"v-6a5ff542\",\"10877\":\"v-34e89cba\",\"10878\":\"v-20b96d23\",\"10879\":\"v-3bc508c5\",\"10880\":\"v-281bd1e9\",\"10881\":\"v-eb9b9c9a\",\"10882\":\"v-3274ac86\",\"10883\":\"v-3670953c\",\"10884\":\"v-4a8d2097\",\"10885\":\"v-17b81500\",\"10886\":\"v-01ed9ba8\",\"10887\":\"v-0ea08c70\",\"10888\":\"v-33644c36\",\"10889\":\"v-07c1e4c2\",\"10890\":\"v-e2a81af0\",\"10891\":\"v-113e9cfd\",\"10892\":\"v-6ebbf680\",\"10893\":\"v-8cd22b3a\",\"10894\":\"v-07a1d28a\",\"10895\":\"v-af90ecea\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[null,1],\"2\":[null,1],\"3\":[1],\"4\":[1],\"5\":[null,1],\"6\":[null,4],\"7\":[null,2],\"8\":[null,4],\"9\":[null,3],\"10\":[null,9],\"11\":[null,5],\"12\":[null,3],\"13\":[null,2],\"14\":[null,2],\"15\":[null,1],\"16\":[null,3],\"17\":[null,2],\"18\":[null,3],\"19\":[null,3],\"20\":[null,2],\"21\":[null,3],\"22\":[null,6],\"23\":[null,8],\"24\":[null,2],\"25\":[null,4],\"26\":[1],\"27\":[null,1],\"28\":[null,1],\"29\":[2],\"30\":[null,1],\"31\":[null,2],\"32\":[2],\"33\":[null,1],\"34\":[null,2],\"35\":[2],\"36\":[null,1],\"37\":[null,2],\"38\":[2],\"39\":[null,1],\"40\":[null,2],\"41\":[2],\"42\":[null,1],\"43\":[null,2],\"44\":[2],\"45\":[null,1],\"46\":[null,2],\"47\":[2],\"48\":[null,1],\"49\":[null,2],\"50\":[2],\"51\":[null,1],\"52\":[null,2],\"53\":[2],\"54\":[null,1],\"55\":[null,1],\"56\":[2],\"57\":[null,1],\"58\":[null,1],\"59\":[2],\"60\":[null,1],\"61\":[null,2],\"62\":[2],\"63\":[null,1],\"64\":[null,1],\"65\":[2],\"66\":[null,1],\"67\":[null,2],\"68\":[2],\"69\":[null,2],\"70\":[null,1],\"71\":[null,1],\"72\":[null,1],\"73\":[null,1],\"74\":[null,1],\"75\":[null,2],\"76\":[null,1],\"77\":[null,1],\"78\":[null,1],\"79\":[null,1],\"80\":[null,2],\"81\":[null,1],\"82\":[null,1],\"83\":[null,1],\"84\":[null,2],\"85\":[null,1],\"86\":[null,2],\"87\":[null,1],\"88\":[null,3],\"89\":[null,3],\"90\":[null,1],\"91\":[null,1],\"92\":[null,1],\"93\":[null,1],\"94\":[null,2],\"95\":[null,1],\"96\":[null,1],\"97\":[null,2],\"98\":[null,1],\"99\":[null,1],\"100\":[null,1],\"101\":[null,1],\"102\":[2],\"103\":[null,1],\"104\":[null,1],\"105\":[2],\"106\":[2],\"107\":[null,1],\"108\":[2],\"109\":[null,4],\"110\":[null,4],\"111\":[null,2],\"112\":[null,3],\"113\":[null,2],\"114\":[null,3],\"115\":[null,3],\"116\":[2],\"117\":[null,4],\"118\":[null,5],\"119\":[null,4],\"120\":[1],\"121\":[null,1],\"122\":[null,1],\"123\":[2],\"124\":[2],\"125\":[null,1],\"126\":[null,1],\"127\":[null,1],\"128\":[null,1],\"129\":[null,1],\"130\":[null,1],\"131\":[null,1],\"132\":[null,1],\"133\":[2],\"134\":[null,1],\"135\":[null,1],\"136\":[null,1],\"137\":[null,2],\"138\":[null,1],\"139\":[null,1],\"140\":[1],\"141\":[null,1],\"142\":[2],\"143\":[null,1],\"144\":[null,1],\"145\":[2],\"146\":[null,1],\"147\":[null,1],\"148\":[2],\"149\":[null,1],\"150\":[null,1],\"151\":[2],\"152\":[null,1],\"153\":[null,1],\"154\":[1],\"155\":[null,1],\"156\":[null,1],\"157\":[2],\"158\":[null,1],\"159\":[null,2],\"160\":[1],\"161\":[null,1],\"162\":[null,1],\"163\":[2],\"164\":[null,1],\"165\":[null,2],\"166\":[1],\"167\":[null,1],\"168\":[null,1],\"169\":[2],\"170\":[null,1],\"171\":[null,2],\"172\":[1],\"173\":[null,1],\"174\":[null,1],\"175\":[2],\"176\":[null,1],\"177\":[null,2],\"178\":[2],\"179\":[null,1],\"180\":[null,1],\"181\":[2],\"182\":[null,1],\"183\":[null,2],\"184\":[2],\"185\":[null,1],\"186\":[null,1],\"187\":[2],\"188\":[null,1],\"189\":[null,2],\"190\":[2],\"191\":[null,1],\"192\":[null,1],\"193\":[2],\"194\":[null,1],\"195\":[null,2],\"196\":[2],\"197\":[null,1],\"198\":[null,1],\"199\":[2],\"200\":[null,1],\"201\":[null,2],\"202\":[1],\"203\":[null,1],\"204\":[null,2],\"205\":[2],\"206\":[null,1],\"207\":[null,2],\"208\":[null,2],\"209\":[null,1],\"210\":[null,1],\"211\":[null,2],\"212\":[null,1],\"213\":[null,2],\"214\":[null,1],\"215\":[null,1],\"216\":[null,1],\"217\":[null,1],\"218\":[null,3],\"219\":[null,1],\"220\":[null,1],\"221\":[null,1],\"222\":[null,1],\"223\":[null,2],\"224\":[null,1],\"225\":[null,1],\"226\":[null,1],\"227\":[null,1],\"228\":[null,2],\"229\":[null,2],\"230\":[null,1],\"231\":[null,1],\"232\":[null,2],\"233\":[null,1],\"234\":[null,1],\"235\":[null,2],\"236\":[null,1],\"237\":[null,2],\"238\":[null,1],\"239\":[null,2],\"240\":[null,1],\"241\":[null,1],\"242\":[null,1],\"243\":[null,1],\"244\":[null,1],\"245\":[null,1],\"246\":[null,1],\"247\":[null,1],\"248\":[2],\"249\":[null,1],\"250\":[null,4],\"251\":[2],\"252\":[null,1],\"253\":[null,4],\"254\":[2],\"255\":[null,1],\"256\":[null,4],\"257\":[null,3],\"258\":[null,3],\"259\":[null,1],\"260\":[null,7],\"261\":[null,6],\"262\":[null,4],\"263\":[2],\"264\":[null,1],\"265\":[null,4],\"266\":[null,3],\"267\":[null,3],\"268\":[null,1],\"269\":[null,7],\"270\":[null,6],\"271\":[null,4],\"272\":[2],\"273\":[null,1],\"274\":[null,2],\"275\":[2],\"276\":[null,1],\"277\":[null,2],\"278\":[2],\"279\":[null,1],\"280\":[null,2],\"281\":[2],\"282\":[null,1],\"283\":[null,2],\"284\":[2],\"285\":[null,1],\"286\":[null,4],\"287\":[2],\"288\":[null,6],\"289\":[2],\"290\":[null,1],\"291\":[null,1],\"292\":[null,1],\"293\":[null,1],\"294\":[2],\"295\":[null,2],\"296\":[null,1],\"297\":[null,1],\"298\":[null,2],\"299\":[3],\"300\":[null,1],\"301\":[null,4],\"302\":[null,3],\"303\":[3],\"304\":[null,7],\"305\":[null,2],\"306\":[null,1],\"307\":[null,6],\"308\":[null,4],\"309\":[null,2],\"310\":[null,3],\"311\":[null,2],\"312\":[null,5],\"313\":[null,4],\"314\":[null,4],\"315\":[null,4],\"316\":[2],\"317\":[null,7],\"318\":[null,2],\"319\":[null,4],\"320\":[null,6],\"321\":[null,6],\"322\":[null,4],\"323\":[null,2],\"324\":[null,5],\"325\":[null,5],\"326\":[2],\"327\":[null,8],\"328\":[null,1],\"329\":[null,5],\"330\":[null,3],\"331\":[2],\"332\":[null,3],\"333\":[null,3],\"334\":[null,1],\"335\":[null,3],\"336\":[null,4],\"337\":[null,1],\"338\":[null,5],\"339\":[null,3],\"340\":[null,5],\"341\":[2],\"342\":[4],\"343\":[null,8],\"344\":[null,3],\"345\":[null,1],\"346\":[null,3],\"347\":[null,19],\"348\":[3],\"349\":[null,4],\"350\":[null,5],\"351\":[3],\"352\":[null,6],\"353\":[2],\"354\":[null,5],\"355\":[null,8],\"356\":[null,3],\"357\":[null,3],\"358\":[2],\"359\":[3],\"360\":[null,11],\"361\":[null,4],\"362\":[null,6],\"363\":[3],\"364\":[null,3],\"365\":[null,8],\"366\":[3],\"367\":[2],\"368\":[null,1],\"369\":[null,3],\"370\":[2],\"371\":[null,4],\"372\":[null,18],\"373\":[2],\"374\":[null,5],\"375\":[null,2],\"376\":[2],\"377\":[null,4],\"378\":[null,4],\"379\":[2],\"380\":[2],\"381\":[null,7],\"382\":[2],\"383\":[null,4],\"384\":[3],\"385\":[null,4],\"386\":[null,6],\"387\":[4],\"388\":[null,5],\"389\":[4],\"390\":[null,4],\"391\":[null,23],\"392\":[5],\"393\":[null,16],\"394\":[null,16],\"395\":[5],\"396\":[null,4],\"397\":[null,65],\"398\":[2],\"399\":[null,9],\"400\":[null,11],\"401\":[null,6],\"402\":[null,6],\"403\":[2],\"404\":[null,2],\"405\":[null,4],\"406\":[null,1],\"407\":[2],\"408\":[2],\"409\":[null,3],\"410\":[null,6],\"411\":[null,6],\"412\":[null,29],\"413\":[null,2],\"414\":[2],\"415\":[null,4],\"416\":[null,5],\"417\":[2],\"418\":[null,4],\"419\":[null,4],\"420\":[null,3],\"421\":[null,3],\"422\":[2],\"423\":[2],\"424\":[null,5],\"425\":[null,12],\"426\":[2],\"427\":[null,10],\"428\":[null,2],\"429\":[null,1],\"430\":[null,22],\"431\":[2],\"432\":[null,7],\"433\":[null,1],\"434\":[null,6],\"435\":[null,4],\"436\":[2],\"437\":[null,4],\"438\":[2],\"439\":[null,4],\"440\":[2],\"441\":[null,6],\"442\":[2],\"443\":[null,11],\"444\":[3],\"445\":[null,7],\"446\":[null,18],\"447\":[null,4],\"448\":[3],\"449\":[null,2],\"450\":[null,21],\"451\":[3],\"452\":[null,1],\"453\":[null,3],\"454\":[2],\"455\":[null,4],\"456\":[null,2],\"457\":[null,3],\"458\":[2],\"459\":[null,7],\"460\":[2],\"461\":[null,3],\"462\":[null,3],\"463\":[null,5],\"464\":[null,1],\"465\":[null,9],\"466\":[2],\"467\":[3],\"468\":[null,8],\"469\":[null,2],\"470\":[3],\"471\":[null,8],\"472\":[null,2],\"473\":[2],\"474\":[null,6],\"475\":[null,2],\"476\":[3],\"477\":[null,3],\"478\":[2],\"479\":[2],\"480\":[null,1],\"481\":[null,2],\"482\":[null,5],\"483\":[null,3],\"484\":[null,2],\"485\":[2],\"486\":[null,57],\"487\":[2],\"488\":[null,4],\"489\":[null,17],\"490\":[2],\"491\":[null,6],\"492\":[null,7],\"493\":[2],\"494\":[null,6],\"495\":[2],\"496\":[null,1],\"497\":[null,3],\"498\":[null,7],\"499\":[null,5],\"500\":[null,6],\"501\":[null,6],\"502\":[null,7],\"503\":[null,16],\"504\":[2],\"505\":[null,3],\"506\":[null,2],\"507\":[null,3],\"508\":[null,17],\"509\":[2],\"510\":[null,5],\"511\":[null,5],\"512\":[null,2],\"513\":[null,2],\"514\":[null,2],\"515\":[3],\"516\":[null,16],\"517\":[3],\"518\":[null,3],\"519\":[null,22],\"520\":[2],\"521\":[null,4],\"522\":[null,10],\"523\":[3],\"524\":[null,1],\"525\":[null,6],\"526\":[null,5],\"527\":[null,3],\"528\":[2],\"529\":[2],\"530\":[null,3],\"531\":[null,2],\"532\":[null,3],\"533\":[null,4],\"534\":[3],\"535\":[null,5],\"536\":[null,8],\"537\":[2],\"538\":[null,4],\"539\":[null,6],\"540\":[null,5],\"541\":[4],\"542\":[null,7],\"543\":[null,6],\"544\":[2],\"545\":[null,4],\"546\":[null,8],\"547\":[2],\"548\":[null,3],\"549\":[3],\"550\":[null,14],\"551\":[3],\"552\":[null,5],\"553\":[null,9],\"554\":[2],\"555\":[null,3],\"556\":[2],\"557\":[null,3],\"558\":[5],\"559\":[null,3],\"560\":[null,2],\"561\":[4],\"562\":[null,2],\"563\":[null,2],\"564\":[3],\"565\":[null,5],\"566\":[2],\"567\":[null,4],\"568\":[3],\"569\":[null,4],\"570\":[null,4],\"571\":[null,2],\"572\":[null,2],\"573\":[null,2],\"574\":[null,2],\"575\":[3],\"576\":[null,3],\"577\":[null,11],\"578\":[2],\"579\":[null,3],\"580\":[3],\"581\":[null,6],\"582\":[3],\"583\":[null,6],\"584\":[null,19],\"585\":[2],\"586\":[2],\"587\":[2],\"588\":[null,5],\"589\":[null,3],\"590\":[null,24],\"591\":[null,4],\"592\":[2],\"593\":[null,8],\"594\":[3],\"595\":[null,1],\"596\":[null,4],\"597\":[null,3],\"598\":[null,11],\"599\":[2],\"600\":[null,7],\"601\":[4],\"602\":[null,11],\"603\":[3],\"604\":[null,4],\"605\":[2],\"606\":[null,5],\"607\":[null,2],\"608\":[3],\"609\":[null,11],\"610\":[4],\"611\":[null,19],\"612\":[2],\"613\":[null,5],\"614\":[null,13],\"615\":[2],\"616\":[null,4],\"617\":[null,5],\"618\":[null,3],\"619\":[4],\"620\":[null,17],\"621\":[null,15],\"622\":[4],\"623\":[null,12],\"624\":[null,12],\"625\":[2],\"626\":[2],\"627\":[null,4],\"628\":[null,16],\"629\":[3],\"630\":[null,5],\"631\":[null,14],\"632\":[3],\"633\":[null,6],\"634\":[null,3],\"635\":[null,14],\"636\":[2],\"637\":[null,7],\"638\":[null,1],\"639\":[null,4],\"640\":[2],\"641\":[null,3],\"642\":[null,18],\"643\":[2],\"644\":[null,3],\"645\":[null,12],\"646\":[2],\"647\":[null,24],\"648\":[3],\"649\":[3],\"650\":[null,2],\"651\":[3],\"652\":[null,9],\"653\":[null,15],\"654\":[2],\"655\":[null,6],\"656\":[null,9],\"657\":[null,3],\"658\":[2],\"659\":[null,3],\"660\":[null,5],\"661\":[null,3],\"662\":[null,2],\"663\":[null,14],\"664\":[2],\"665\":[null,6],\"666\":[2],\"667\":[null,3],\"668\":[null,5],\"669\":[null,7],\"670\":[null,10],\"671\":[2],\"672\":[null,1],\"673\":[null,9],\"674\":[null,1],\"675\":[null,3],\"676\":[2],\"677\":[null,1],\"678\":[null,3],\"679\":[null,3],\"680\":[2],\"681\":[null,1],\"682\":[null,3],\"683\":[3],\"684\":[2],\"685\":[null,3],\"686\":[null,2],\"687\":[2],\"688\":[null,3],\"689\":[null,3],\"690\":[null,2],\"691\":[2],\"692\":[null,5],\"693\":[null,3],\"694\":[null,4],\"695\":[4],\"696\":[null,5],\"697\":[null,4],\"698\":[null,4],\"699\":[3],\"700\":[null,3],\"701\":[3],\"702\":[null,6],\"703\":[null,17],\"704\":[2],\"705\":[null,5],\"706\":[3],\"707\":[null,6],\"708\":[null,5],\"709\":[null,5],\"710\":[3],\"711\":[null,2],\"712\":[null,1],\"713\":[null,1],\"714\":[null,2],\"715\":[2],\"716\":[6],\"717\":[null,3],\"718\":[null,2],\"719\":[null,3],\"720\":[null,3],\"721\":[null,2],\"722\":[null,2],\"723\":[null,3],\"724\":[null,4],\"725\":[null,5],\"726\":[null,6],\"727\":[6],\"728\":[null,2],\"729\":[null,3],\"730\":[null,3],\"731\":[null,2],\"732\":[null,3],\"733\":[4],\"734\":[null,60],\"735\":[3],\"736\":[null,4],\"737\":[null,5],\"738\":[null,3],\"739\":[null,1],\"740\":[null,2],\"741\":[null,2],\"742\":[null,7],\"743\":[2],\"744\":[null,6],\"745\":[null,3],\"746\":[null,14],\"747\":[2],\"748\":[2],\"749\":[null,2],\"750\":[null,2],\"751\":[null,2],\"752\":[null,1],\"753\":[2],\"754\":[null,3],\"755\":[2],\"756\":[null,5],\"757\":[2],\"758\":[null,2],\"759\":[null,4],\"760\":[3],\"761\":[null,1],\"762\":[null,3],\"763\":[null,2],\"764\":[null,2],\"765\":[2],\"766\":[null,4],\"767\":[null,6],\"768\":[2],\"769\":[null,4],\"770\":[null,6],\"771\":[null,13],\"772\":[2],\"773\":[null,2],\"774\":[2],\"775\":[null,5],\"776\":[null,7],\"777\":[null,3],\"778\":[2],\"779\":[null,5],\"780\":[null,5],\"781\":[null,22],\"782\":[2],\"783\":[null,1],\"784\":[null,3],\"785\":[2],\"786\":[null,4],\"787\":[2],\"788\":[null,5],\"789\":[null,8],\"790\":[null,6],\"791\":[null,2],\"792\":[null,4],\"793\":[2],\"794\":[null,2],\"795\":[null,2],\"796\":[null,3],\"797\":[null,3],\"798\":[null,3],\"799\":[null,3],\"800\":[2],\"801\":[null,4],\"802\":[2],\"803\":[null,5],\"804\":[2],\"805\":[null,5],\"806\":[null,4],\"807\":[2],\"808\":[null,4],\"809\":[null,4],\"810\":[null,3],\"811\":[null,6],\"812\":[2],\"813\":[null,4],\"814\":[null,6],\"815\":[2],\"816\":[null,1],\"817\":[null,4],\"818\":[null,3],\"819\":[null,2],\"820\":[null,2],\"821\":[null,2],\"822\":[null,2],\"823\":[3],\"824\":[null,3],\"825\":[2],\"826\":[null,2],\"827\":[2],\"828\":[null,7],\"829\":[null,3],\"830\":[null,20],\"831\":[3],\"832\":[null,4],\"833\":[null,3],\"834\":[2],\"835\":[null,5],\"836\":[null,5],\"837\":[null,5],\"838\":[null,5],\"839\":[null,5],\"840\":[2],\"841\":[null,2],\"842\":[null,6],\"843\":[null,6],\"844\":[2],\"845\":[2],\"846\":[null,3],\"847\":[null,2],\"848\":[null,3],\"849\":[null,3],\"850\":[null,3],\"851\":[2],\"852\":[null,4],\"853\":[null,11],\"854\":[3],\"855\":[null,5],\"856\":[2],\"857\":[null,7],\"858\":[null,17],\"859\":[null,9],\"860\":[2],\"861\":[null,3],\"862\":[null,24],\"863\":[3],\"864\":[null,3],\"865\":[null,6],\"866\":[3],\"867\":[null,8],\"868\":[2],\"869\":[null,4],\"870\":[3],\"871\":[null,1],\"872\":[null,3],\"873\":[2],\"874\":[2],\"875\":[null,1],\"876\":[null,1],\"877\":[null,4],\"878\":[null,3],\"879\":[null,5],\"880\":[2],\"881\":[null,3],\"882\":[null,35],\"883\":[2],\"884\":[null,3],\"885\":[null,9],\"886\":[2],\"887\":[null,4],\"888\":[null,27],\"889\":[2],\"890\":[2],\"891\":[null,3],\"892\":[null,3],\"893\":[null,3],\"894\":[null,2],\"895\":[null,2],\"896\":[null,2],\"897\":[null,2],\"898\":[null,3],\"899\":[2],\"900\":[null,5],\"901\":[null,2],\"902\":[2],\"903\":[null,7],\"904\":[2],\"905\":[null,3],\"906\":[null,3],\"907\":[null,18],\"908\":[2],\"909\":[2],\"910\":[null,3],\"911\":[null,3],\"912\":[2],\"913\":[null,3],\"914\":[null,5],\"915\":[2],\"916\":[null,3],\"917\":[null,3],\"918\":[null,3],\"919\":[null,3],\"920\":[null,5],\"921\":[null,4],\"922\":[null,3],\"923\":[null,13],\"924\":[2],\"925\":[null,12],\"926\":[2],\"927\":[null,4],\"928\":[2],\"929\":[null,2],\"930\":[null,7],\"931\":[2],\"932\":[null,5],\"933\":[null,8],\"934\":[2],\"935\":[null,3],\"936\":[null,20],\"937\":[null,1],\"938\":[null,2],\"939\":[null,8],\"940\":[null,3],\"941\":[3],\"942\":[2],\"943\":[null,3],\"944\":[null,4],\"945\":[null,1],\"946\":[2],\"947\":[null,3],\"948\":[null,4],\"949\":[null,7],\"950\":[null,2],\"951\":[2],\"952\":[null,222],\"953\":[2],\"954\":[null,5],\"955\":[null,27],\"956\":[3],\"957\":[null,1],\"958\":[null,1],\"959\":[3],\"960\":[null,1],\"961\":[null,6],\"962\":[null,3],\"963\":[null,4],\"964\":[null,5],\"965\":[2],\"966\":[null,3],\"967\":[null,16],\"968\":[2],\"969\":[null,21],\"970\":[3],\"971\":[null,1],\"972\":[null,5],\"973\":[2],\"974\":[null,2],\"975\":[2],\"976\":[null,9],\"977\":[null,2],\"978\":[null,31],\"979\":[2],\"980\":[null,3],\"981\":[null,26],\"982\":[2],\"983\":[null,6],\"984\":[3],\"985\":[null,13],\"986\":[4],\"987\":[null,4],\"988\":[null,18],\"989\":[2],\"990\":[null,2],\"991\":[null,24],\"992\":[2],\"993\":[3],\"994\":[null,8],\"995\":[null,9],\"996\":[null,7],\"997\":[3],\"998\":[null,4],\"999\":[null,7],\"1000\":[3],\"1001\":[3],\"1002\":[null,3],\"1003\":[null,4],\"1004\":[null,2],\"1005\":[null,32],\"1006\":[2],\"1007\":[null,2],\"1008\":[null,26],\"1009\":[2],\"1010\":[null,5],\"1011\":[4],\"1012\":[null,3],\"1013\":[null,8],\"1014\":[3],\"1015\":[null,2],\"1016\":[null,19],\"1017\":[3],\"1018\":[2],\"1019\":[null,12],\"1020\":[2],\"1021\":[null,12],\"1022\":[3],\"1023\":[null,3],\"1024\":[null,1],\"1025\":[null,5],\"1026\":[null,4],\"1027\":[null,1],\"1028\":[null,5],\"1029\":[null,31],\"1030\":[null,1],\"1031\":[null,2],\"1032\":[null,3],\"1033\":[null,1],\"1034\":[null,8],\"1035\":[null,4],\"1036\":[5],\"1037\":[null,2],\"1038\":[null,26],\"1039\":[2],\"1040\":[null,5],\"1041\":[3],\"1042\":[null,4],\"1043\":[null,6],\"1044\":[3],\"1045\":[null,1],\"1046\":[null,9],\"1047\":[null,2],\"1048\":[null,12],\"1049\":[2],\"1050\":[null,2],\"1051\":[null,16],\"1052\":[2],\"1053\":[null,1],\"1054\":[null,1],\"1055\":[2],\"1056\":[null,1],\"1057\":[null,1],\"1058\":[3],\"1059\":[null,1],\"1060\":[null,2],\"1061\":[2],\"1062\":[null,1],\"1063\":[null,4],\"1064\":[2],\"1065\":[null,4],\"1066\":[null,3],\"1067\":[null,1],\"1068\":[null,11],\"1069\":[null,2],\"1070\":[null,1],\"1071\":[null,3],\"1072\":[2],\"1073\":[null,4],\"1074\":[null,3],\"1075\":[2],\"1076\":[null,4],\"1077\":[null,3],\"1078\":[2],\"1079\":[null,7],\"1080\":[null,3],\"1081\":[3],\"1082\":[null,3],\"1083\":[null,34],\"1084\":[2],\"1085\":[3],\"1086\":[null,3],\"1087\":[null,2],\"1088\":[2],\"1089\":[null,5],\"1090\":[null,2],\"1091\":[2],\"1092\":[null,2],\"1093\":[2],\"1094\":[null,5],\"1095\":[null,4],\"1096\":[2],\"1097\":[2],\"1098\":[2],\"1099\":[null,7],\"1100\":[null,2],\"1101\":[null,1],\"1102\":[null,4],\"1103\":[null,2],\"1104\":[null,1],\"1105\":[null,1],\"1106\":[null,1],\"1107\":[2],\"1108\":[null,1],\"1109\":[null,1],\"1110\":[2],\"1111\":[null,3],\"1112\":[null,3],\"1113\":[null,5],\"1114\":[null,3],\"1115\":[null,3],\"1116\":[null,3],\"1117\":[2],\"1118\":[null,2],\"1119\":[null,37],\"1120\":[3],\"1121\":[null,1],\"1122\":[null,7],\"1123\":[null,4],\"1124\":[null,6],\"1125\":[3],\"1126\":[null,2],\"1127\":[2],\"1128\":[null,7],\"1129\":[null,12],\"1130\":[2],\"1131\":[null,5],\"1132\":[null,13],\"1133\":[3],\"1134\":[null,5],\"1135\":[null,15],\"1136\":[2],\"1137\":[null,5],\"1138\":[null,13],\"1139\":[2],\"1140\":[2],\"1141\":[null,3],\"1142\":[null,16],\"1143\":[2],\"1144\":[null,3],\"1145\":[null,16],\"1146\":[2],\"1147\":[null,6],\"1148\":[null,13],\"1149\":[3],\"1150\":[null,7],\"1151\":[null,16],\"1152\":[2],\"1153\":[2],\"1154\":[null,12],\"1155\":[2],\"1156\":[2],\"1157\":[null,2],\"1158\":[null,13],\"1159\":[2],\"1160\":[2],\"1161\":[null,11],\"1162\":[2],\"1163\":[null,2],\"1164\":[null,15],\"1165\":[4],\"1166\":[null,3],\"1167\":[null,16],\"1168\":[2],\"1169\":[null,13],\"1170\":[2],\"1171\":[2],\"1172\":[null,20],\"1173\":[3],\"1174\":[null,1],\"1175\":[null,5],\"1176\":[null,2],\"1177\":[null,104],\"1178\":[3],\"1179\":[null,1],\"1180\":[null,1],\"1181\":[3],\"1182\":[null,1],\"1183\":[null,2],\"1184\":[null,1],\"1185\":[null,1],\"1186\":[null,2],\"1187\":[null,1],\"1188\":[null,2],\"1189\":[null,3],\"1190\":[null,3],\"1191\":[null,3],\"1192\":[null,2],\"1193\":[null,6],\"1194\":[null,6],\"1195\":[null,1],\"1196\":[null,4],\"1197\":[null,9],\"1198\":[2],\"1199\":[2],\"1200\":[null,9],\"1201\":[null,2],\"1202\":[null,5],\"1203\":[null,1],\"1204\":[3],\"1205\":[null,5],\"1206\":[null,31],\"1207\":[3],\"1208\":[null,8],\"1209\":[2],\"1210\":[null,6],\"1211\":[null,12],\"1212\":[3],\"1213\":[null,8],\"1214\":[null,7],\"1215\":[null,3],\"1216\":[null,3],\"1217\":[null,11],\"1218\":[3],\"1219\":[null,3],\"1220\":[4],\"1221\":[null,2],\"1222\":[null,16],\"1223\":[5],\"1224\":[null,45],\"1225\":[2],\"1226\":[null,4],\"1227\":[null,4],\"1228\":[null,4],\"1229\":[null,25],\"1230\":[3],\"1231\":[null,3],\"1232\":[3],\"1233\":[null,5],\"1234\":[null,23],\"1235\":[3],\"1236\":[null,3],\"1237\":[null,2],\"1238\":[null,2],\"1239\":[null,16],\"1240\":[3],\"1241\":[null,28],\"1242\":[3],\"1243\":[null,3],\"1244\":[3],\"1245\":[null,5],\"1246\":[null,6],\"1247\":[3],\"1248\":[null,20],\"1249\":[3],\"1250\":[null,4],\"1251\":[null,5],\"1252\":[null,18],\"1253\":[3],\"1254\":[null,6],\"1255\":[null,4],\"1256\":[null,22],\"1257\":[3],\"1258\":[null,1],\"1259\":[null,5],\"1260\":[null,3],\"1261\":[null,4],\"1262\":[4],\"1263\":[null,20],\"1264\":[4],\"1265\":[null,49],\"1266\":[4],\"1267\":[null,3],\"1268\":[null,30],\"1269\":[3],\"1270\":[null,4],\"1271\":[3],\"1272\":[null,4],\"1273\":[null,6],\"1274\":[null,4],\"1275\":[3],\"1276\":[null,36],\"1277\":[3],\"1278\":[null,2],\"1279\":[null,2],\"1280\":[3],\"1281\":[null,1],\"1282\":[2],\"1283\":[null,10],\"1284\":[4],\"1285\":[null,2],\"1286\":[null,23],\"1287\":[3],\"1288\":[null,6],\"1289\":[null,7],\"1290\":[null,20],\"1291\":[3],\"1292\":[null,4],\"1293\":[null,6],\"1294\":[null,3],\"1295\":[null,3],\"1296\":[null,24],\"1297\":[3],\"1298\":[null,5],\"1299\":[null,58],\"1300\":[2],\"1301\":[null,5],\"1302\":[null,4],\"1303\":[null,7],\"1304\":[null,3],\"1305\":[null,2],\"1306\":[2],\"1307\":[1],\"1308\":[null,3],\"1309\":[null,1],\"1310\":[null,1],\"1311\":[null,1],\"1312\":[null,1],\"1313\":[null,1],\"1314\":[null,3],\"1315\":[null,1],\"1316\":[null,1],\"1317\":[null,1],\"1318\":[null,1],\"1319\":[null,2],\"1320\":[null,1],\"1321\":[null,2],\"1322\":[null,1],\"1323\":[null,1],\"1324\":[null,1],\"1325\":[null,2],\"1326\":[null,1],\"1327\":[null,2],\"1328\":[null,1],\"1329\":[null,1],\"1330\":[null,1],\"1331\":[null,2],\"1332\":[null,1],\"1333\":[3],\"1334\":[null,62],\"1335\":[3],\"1336\":[null,52],\"1337\":[3],\"1338\":[null,69],\"1339\":[3],\"1340\":[null,69],\"1341\":[4],\"1342\":[null,58],\"1343\":[4],\"1344\":[null,49],\"1345\":[3],\"1346\":[null,49],\"1347\":[4],\"1348\":[null,82],\"1349\":[4],\"1350\":[null,54],\"1351\":[3],\"1352\":[null,68],\"1353\":[4],\"1354\":[null,50],\"1355\":[1],\"1356\":[null,2],\"1357\":[3],\"1358\":[2],\"1359\":[2],\"1360\":[null,4],\"1361\":[null,51],\"1362\":[2],\"1363\":[null,3],\"1364\":[null,50],\"1365\":[1],\"1366\":[null,1],\"1367\":[null,7],\"1368\":[null,2],\"1369\":[null,2],\"1370\":[2],\"1371\":[null,4],\"1372\":[null,2],\"1373\":[null,2],\"1374\":[2],\"1375\":[null,3],\"1376\":[null,22],\"1377\":[2],\"1378\":[null,8],\"1379\":[3],\"1380\":[null,1],\"1381\":[null,2],\"1382\":[1],\"1383\":[null,8],\"1384\":[null,6],\"1385\":[null,6],\"1386\":[1],\"1387\":[null,3],\"1388\":[null,3],\"1389\":[1],\"1390\":[null,4],\"1391\":[null,3],\"1392\":[null,4],\"1393\":[null,2],\"1394\":[null,3],\"1395\":[1],\"1396\":[null,1],\"1397\":[null,3],\"1398\":[null,5],\"1399\":[null,5],\"1400\":[null,5],\"1401\":[null,6],\"1402\":[null,3],\"1403\":[null,1],\"1404\":[null,3],\"1405\":[null,3],\"1406\":[null,3],\"1407\":[null,3],\"1408\":[null,1],\"1409\":[1],\"1410\":[null,3],\"1411\":[null,3],\"1412\":[null,2],\"1413\":[2],\"1414\":[null,1],\"1415\":[null,7],\"1416\":[null,1],\"1417\":[null,10],\"1418\":[2],\"1419\":[2],\"1420\":[null,4],\"1421\":[null,12],\"1422\":[2],\"1423\":[null,4],\"1424\":[null,20],\"1425\":[2],\"1426\":[null,2],\"1427\":[null,17],\"1428\":[2],\"1429\":[2],\"1430\":[null,3],\"1431\":[null,15],\"1432\":[2],\"1433\":[null,2],\"1434\":[null,6],\"1435\":[null,18],\"1436\":[2],\"1437\":[null,8],\"1438\":[null,16],\"1439\":[2],\"1440\":[2],\"1441\":[null,4],\"1442\":[null,12],\"1443\":[2],\"1444\":[null,6],\"1445\":[null,2],\"1446\":[null,3],\"1447\":[null,3],\"1448\":[null,3],\"1449\":[null,15],\"1450\":[2],\"1451\":[null,2],\"1452\":[null,14],\"1453\":[2],\"1454\":[null,6],\"1455\":[null,19],\"1456\":[2],\"1457\":[null,1],\"1458\":[null,16],\"1459\":[2],\"1460\":[null,4],\"1461\":[2],\"1462\":[null,2],\"1463\":[null,4],\"1464\":[null,15],\"1465\":[2],\"1466\":[null,2],\"1467\":[null,14],\"1468\":[2],\"1469\":[null,1],\"1470\":[null,2],\"1471\":[null,2],\"1472\":[null,12],\"1473\":[2],\"1474\":[null,5],\"1475\":[null,14],\"1476\":[2],\"1477\":[null,2],\"1478\":[null,3],\"1479\":[null,6],\"1480\":[null,22],\"1481\":[2],\"1482\":[null,2],\"1483\":[3],\"1484\":[null,7],\"1485\":[null,6],\"1486\":[null,32],\"1487\":[2],\"1488\":[null,5],\"1489\":[null,3],\"1490\":[null,5],\"1491\":[null,24],\"1492\":[2],\"1493\":[null,2],\"1494\":[null,26],\"1495\":[null,6],\"1496\":[null,15],\"1497\":[2],\"1498\":[null,5],\"1499\":[null,9],\"1500\":[null,3],\"1501\":[null,3],\"1502\":[null,33],\"1503\":[null,4],\"1504\":[null,5],\"1505\":[null,6],\"1506\":[null,28],\"1507\":[2],\"1508\":[null,2],\"1509\":[2],\"1510\":[3],\"1511\":[null,7],\"1512\":[null,16],\"1513\":[4],\"1514\":[null,2],\"1515\":[null,14],\"1516\":[4],\"1517\":[null,3],\"1518\":[null,15],\"1519\":[4],\"1520\":[null,3],\"1521\":[null,15],\"1522\":[2],\"1523\":[null,2],\"1524\":[null,13],\"1525\":[2],\"1526\":[null,2],\"1527\":[null,5],\"1528\":[null,3],\"1529\":[null,18],\"1530\":[3],\"1531\":[null,1],\"1532\":[null,4],\"1533\":[2],\"1534\":[2],\"1535\":[2],\"1536\":[null,6],\"1537\":[null,2],\"1538\":[3],\"1539\":[null,3],\"1540\":[null,4],\"1541\":[2],\"1542\":[null,23],\"1543\":[2],\"1544\":[null,5],\"1545\":[null,2],\"1546\":[null,4],\"1547\":[null,4],\"1548\":[null,9],\"1549\":[4],\"1550\":[null,5],\"1551\":[null,6],\"1552\":[null,8],\"1553\":[2],\"1554\":[3],\"1555\":[null,5],\"1556\":[null,12],\"1557\":[3],\"1558\":[null,6],\"1559\":[null,16],\"1560\":[3],\"1561\":[null,9],\"1562\":[4],\"1563\":[null,4],\"1564\":[null,2],\"1565\":[null,2],\"1566\":[null,2],\"1567\":[2],\"1568\":[null,5],\"1569\":[null,10],\"1570\":[2],\"1571\":[null,4],\"1572\":[null,3],\"1573\":[null,4],\"1574\":[null,5],\"1575\":[null,2],\"1576\":[null,2],\"1577\":[null,2],\"1578\":[2],\"1579\":[2],\"1580\":[null,5],\"1581\":[null,17],\"1582\":[2],\"1583\":[null,9],\"1584\":[null,24],\"1585\":[2],\"1586\":[null,1],\"1587\":[null,4],\"1588\":[null,4],\"1589\":[null,17],\"1590\":[2],\"1591\":[null,2],\"1592\":[null,5],\"1593\":[null,6],\"1594\":[null,3],\"1595\":[null,20],\"1596\":[2],\"1597\":[null,2],\"1598\":[null,7],\"1599\":[null,6],\"1600\":[null,2],\"1601\":[null,20],\"1602\":[2],\"1603\":[null,2],\"1604\":[null,14],\"1605\":[3],\"1606\":[null,1],\"1607\":[null,4],\"1608\":[2],\"1609\":[2],\"1610\":[null,3],\"1611\":[null,4],\"1612\":[null,4],\"1613\":[null,4],\"1614\":[null,2],\"1615\":[2],\"1616\":[null,10],\"1617\":[null,2],\"1618\":[null,3],\"1619\":[null,3],\"1620\":[null,2],\"1621\":[2],\"1622\":[null,8],\"1623\":[null,33],\"1624\":[2],\"1625\":[null,3],\"1626\":[null,4],\"1627\":[null,4],\"1628\":[null,4],\"1629\":[null,4],\"1630\":[2],\"1631\":[null,7],\"1632\":[2],\"1633\":[null,5],\"1634\":[null,9],\"1635\":[5],\"1636\":[null,7],\"1637\":[2],\"1638\":[null,9],\"1639\":[null,13],\"1640\":[3],\"1641\":[null,4],\"1642\":[null,13],\"1643\":[3],\"1644\":[null,3],\"1645\":[null,12],\"1646\":[2],\"1647\":[null,5],\"1648\":[null,28],\"1649\":[2],\"1650\":[null,9],\"1651\":[null,26],\"1652\":[2],\"1653\":[null,3],\"1654\":[null,42],\"1655\":[2],\"1656\":[null,4],\"1657\":[null,57],\"1658\":[2],\"1659\":[null,3],\"1660\":[null,49],\"1661\":[2],\"1662\":[null,4],\"1663\":[null,30],\"1664\":[2],\"1665\":[null,1],\"1666\":[null,5],\"1667\":[null,5],\"1668\":[null,4],\"1669\":[null,4],\"1670\":[null,10],\"1671\":[2],\"1672\":[null,4],\"1673\":[null,15],\"1674\":[2],\"1675\":[null,9],\"1676\":[null,25],\"1677\":[2],\"1678\":[null,2],\"1679\":[null,12],\"1680\":[2],\"1681\":[null,3],\"1682\":[null,21],\"1683\":[2],\"1684\":[null,1],\"1685\":[null,5],\"1686\":[null,3],\"1687\":[null,7],\"1688\":[null,5],\"1689\":[2],\"1690\":[null,4],\"1691\":[null,4],\"1692\":[null,5],\"1693\":[2],\"1694\":[null,4],\"1695\":[null,3],\"1696\":[null,5],\"1697\":[2],\"1698\":[null,2],\"1699\":[null,5],\"1700\":[null,4],\"1701\":[null,4],\"1702\":[null,10],\"1703\":[3],\"1704\":[null,5],\"1705\":[null,25],\"1706\":[3],\"1707\":[null,24],\"1708\":[2],\"1709\":[null,2],\"1710\":[null,2],\"1711\":[null,2],\"1712\":[null,2],\"1713\":[null,5],\"1714\":[null,4],\"1715\":[null,4],\"1716\":[null,7],\"1717\":[null,8],\"1718\":[null,4],\"1719\":[null,39],\"1720\":[2],\"1721\":[null,3],\"1722\":[null,7],\"1723\":[null,13],\"1724\":[3],\"1725\":[null,26],\"1726\":[2],\"1727\":[null,22],\"1728\":[3],\"1729\":[2],\"1730\":[null,15],\"1731\":[2],\"1732\":[null,3],\"1733\":[2],\"1734\":[null,1],\"1735\":[null,4],\"1736\":[null,4],\"1737\":[2],\"1738\":[null,9],\"1739\":[2],\"1740\":[null,1],\"1741\":[null,5],\"1742\":[null,5],\"1743\":[null,8],\"1744\":[2],\"1745\":[null,6],\"1746\":[null,8],\"1747\":[null,3],\"1748\":[null,5],\"1749\":[2],\"1750\":[null,10],\"1751\":[null,4],\"1752\":[null,2],\"1753\":[null,2],\"1754\":[null,2],\"1755\":[2],\"1756\":[null,4],\"1757\":[null,2],\"1758\":[null,2],\"1759\":[null,3],\"1760\":[null,5],\"1761\":[null,3],\"1762\":[null,2],\"1763\":[null,37],\"1764\":[2],\"1765\":[null,5],\"1766\":[2],\"1767\":[null,5],\"1768\":[4],\"1769\":[null,48],\"1770\":[4],\"1771\":[null,16],\"1772\":[4],\"1773\":[null,25],\"1774\":[2],\"1775\":[null,1],\"1776\":[null,5],\"1777\":[null,11],\"1778\":[null,11],\"1779\":[2],\"1780\":[null,7],\"1781\":[2],\"1782\":[null,9],\"1783\":[null,4],\"1784\":[null,3],\"1785\":[null,4],\"1786\":[2],\"1787\":[3],\"1788\":[null,36],\"1789\":[3],\"1790\":[null,3],\"1791\":[null,34],\"1792\":[3],\"1793\":[2],\"1794\":[null,1],\"1795\":[null,6],\"1796\":[null,6],\"1797\":[null,6],\"1798\":[3],\"1799\":[null,13],\"1800\":[null,10],\"1801\":[3],\"1802\":[null,10],\"1803\":[null,5],\"1804\":[null,8],\"1805\":[null,18],\"1806\":[3],\"1807\":[null,6],\"1808\":[null,13],\"1809\":[3],\"1810\":[null,6],\"1811\":[null,13],\"1812\":[3],\"1813\":[null,9],\"1814\":[null,18],\"1815\":[2],\"1816\":[null,4],\"1817\":[null,14],\"1818\":[3],\"1819\":[null,4],\"1820\":[null,14],\"1821\":[3],\"1822\":[null,9],\"1823\":[null,16],\"1824\":[3],\"1825\":[null,16],\"1826\":[2],\"1827\":[null,3],\"1828\":[null,2],\"1829\":[null,3],\"1830\":[null,3],\"1831\":[null,2],\"1832\":[null,23],\"1833\":[2],\"1834\":[null,3],\"1835\":[null,3],\"1836\":[null,3],\"1837\":[null,3],\"1838\":[null,3],\"1839\":[null,3],\"1840\":[null,2],\"1841\":[null,2],\"1842\":[2],\"1843\":[null,1],\"1844\":[null,6],\"1845\":[null,14],\"1846\":[2],\"1847\":[null,2],\"1848\":[null,7],\"1849\":[null,2],\"1850\":[null,22],\"1851\":[2],\"1852\":[null,4],\"1853\":[null,17],\"1854\":[2],\"1855\":[null,4],\"1856\":[null,14],\"1857\":[2],\"1858\":[null,6],\"1859\":[null,14],\"1860\":[2],\"1861\":[null,2],\"1862\":[null,21],\"1863\":[2],\"1864\":[null,1],\"1865\":[null,7],\"1866\":[null,11],\"1867\":[null,20],\"1868\":[null,14],\"1869\":[2],\"1870\":[null,1],\"1871\":[null,6],\"1872\":[null,7],\"1873\":[null,4],\"1874\":[null,3],\"1875\":[null,1],\"1876\":[null,12],\"1877\":[null,1],\"1878\":[null,4],\"1879\":[null,14],\"1880\":[null,1],\"1881\":[null,19],\"1882\":[null,1],\"1883\":[null,5],\"1884\":[2],\"1885\":[null,4],\"1886\":[null,18],\"1887\":[2],\"1888\":[null,2],\"1889\":[null,18],\"1890\":[2],\"1891\":[null,2],\"1892\":[null,18],\"1893\":[2],\"1894\":[null,13],\"1895\":[null,2],\"1896\":[null,2],\"1897\":[null,3],\"1898\":[null,3],\"1899\":[null,21],\"1900\":[2],\"1901\":[null,3],\"1902\":[null,2],\"1903\":[null,3],\"1904\":[null,12],\"1905\":[null,7],\"1906\":[null,8],\"1907\":[null,21],\"1908\":[2],\"1909\":[null,7],\"1910\":[null,8],\"1911\":[null,8],\"1912\":[null,8],\"1913\":[null,8],\"1914\":[null,6],\"1915\":[null,7],\"1916\":[null,9],\"1917\":[null,7],\"1918\":[null,8],\"1919\":[null,9],\"1920\":[null,6],\"1921\":[null,8],\"1922\":[null,8],\"1923\":[null,6],\"1924\":[null,7],\"1925\":[null,8],\"1926\":[null,6],\"1927\":[null,7],\"1928\":[null,12],\"1929\":[null,4],\"1930\":[null,7],\"1931\":[null,2],\"1932\":[2],\"1933\":[null,3],\"1934\":[null,3],\"1935\":[null,4],\"1936\":[null,2],\"1937\":[null,16],\"1938\":[3],\"1939\":[null,1],\"1940\":[null,5],\"1941\":[null,9],\"1942\":[null,1],\"1943\":[null,11],\"1944\":[null,1],\"1945\":[null,4],\"1946\":[null,27],\"1947\":[2],\"1948\":[2],\"1949\":[null,2],\"1950\":[null,17],\"1951\":[2],\"1952\":[null,5],\"1953\":[null,13],\"1954\":[2],\"1955\":[null,3],\"1956\":[null,13],\"1957\":[2],\"1958\":[null,4],\"1959\":[null,13],\"1960\":[2],\"1961\":[null,6],\"1962\":[null,3],\"1963\":[null,13],\"1964\":[2],\"1965\":[null,4],\"1966\":[null,14],\"1967\":[2],\"1968\":[null,3],\"1969\":[null,4],\"1970\":[null,6],\"1971\":[null,16],\"1972\":[2],\"1973\":[null,5],\"1974\":[null,6],\"1975\":[null,16],\"1976\":[2],\"1977\":[2],\"1978\":[null,4],\"1979\":[null,12],\"1980\":[2],\"1981\":[null,4],\"1982\":[null,12],\"1983\":[2],\"1984\":[null,4],\"1985\":[null,14],\"1986\":[2],\"1987\":[null,4],\"1988\":[null,2],\"1989\":[null,16],\"1990\":[2],\"1991\":[null,2],\"1992\":[null,4],\"1993\":[null,13],\"1994\":[2],\"1995\":[null,1],\"1996\":[null,3],\"1997\":[null,2],\"1998\":[null,3],\"1999\":[null,3],\"2000\":[null,2],\"2001\":[1],\"2002\":[null,2],\"2003\":[null,28],\"2004\":[1],\"2005\":[null,7],\"2006\":[null,22],\"2007\":[2],\"2008\":[null,5],\"2009\":[null,23],\"2010\":[2],\"2011\":[2],\"2012\":[null,3],\"2013\":[null,6],\"2014\":[null,2],\"2015\":[null,21],\"2016\":[4],\"2017\":[null,4],\"2018\":[3],\"2019\":[null,10],\"2020\":[2],\"2021\":[null,11],\"2022\":[null,23],\"2023\":[4],\"2024\":[3],\"2025\":[null,1],\"2026\":[null,5],\"2027\":[null,5],\"2028\":[null,3],\"2029\":[null,2],\"2030\":[null,1],\"2031\":[null,11],\"2032\":[null,1],\"2033\":[null,2],\"2034\":[null,3],\"2035\":[null,3],\"2036\":[null,15],\"2037\":[3],\"2038\":[null,5],\"2039\":[null,13],\"2040\":[null,14],\"2041\":[null,3],\"2042\":[null,32],\"2043\":[3],\"2044\":[null,3],\"2045\":[null,13],\"2046\":[null,10],\"2047\":[null,3],\"2048\":[null,41],\"2049\":[4],\"2050\":[null,6],\"2051\":[3],\"2052\":[null,6],\"2053\":[3],\"2054\":[null,6],\"2055\":[null,12],\"2056\":[3],\"2057\":[null,11],\"2058\":[null,2],\"2059\":[null,9],\"2060\":[2],\"2061\":[null,9],\"2062\":[null,18],\"2063\":[3],\"2064\":[null,1],\"2065\":[null,5],\"2066\":[null,5],\"2067\":[null,4],\"2068\":[null,2],\"2069\":[null,1],\"2070\":[null,12],\"2071\":[null,1],\"2072\":[null,2],\"2073\":[null,3],\"2074\":[null,3],\"2075\":[null,3],\"2076\":[2],\"2077\":[null,6],\"2078\":[null,3],\"2079\":[null,3],\"2080\":[null,2],\"2081\":[3],\"2082\":[null,4],\"2083\":[null,6],\"2084\":[null,2],\"2085\":[null,5],\"2086\":[null,2],\"2087\":[null,23],\"2088\":[4],\"2089\":[null,3],\"2090\":[null,23],\"2091\":[3],\"2092\":[null,2],\"2093\":[null,7],\"2094\":[null,3],\"2095\":[null,4],\"2096\":[null,7],\"2097\":[null,3],\"2098\":[null,35],\"2099\":[null,8],\"2100\":[3],\"2101\":[null,3],\"2102\":[null,4],\"2103\":[null,11],\"2104\":[null,8],\"2105\":[null,22],\"2106\":[null,3],\"2107\":[2],\"2108\":[null,5],\"2109\":[null,14],\"2110\":[2],\"2111\":[null,2],\"2112\":[null,5],\"2113\":[null,4],\"2114\":[null,25],\"2115\":[2],\"2116\":[2],\"2117\":[null,4],\"2118\":[null,11],\"2119\":[null,2],\"2120\":[null,5],\"2121\":[null,18],\"2122\":[2],\"2123\":[null,3],\"2124\":[null,6],\"2125\":[3],\"2126\":[3],\"2127\":[null,1],\"2128\":[null,6],\"2129\":[null,12],\"2130\":[2],\"2131\":[null,2],\"2132\":[2],\"2133\":[null,5],\"2134\":[null,10],\"2135\":[3],\"2136\":[null,4],\"2137\":[null,15],\"2138\":[4],\"2139\":[null,6],\"2140\":[null,3],\"2141\":[null,13],\"2142\":[3],\"2143\":[null,3],\"2144\":[null,20],\"2145\":[2],\"2146\":[null,7],\"2147\":[null,18],\"2148\":[2],\"2149\":[null,4],\"2150\":[null,13],\"2151\":[2],\"2152\":[null,7],\"2153\":[null,13],\"2154\":[2],\"2155\":[null,3],\"2156\":[null,18],\"2157\":[2],\"2158\":[null,2],\"2159\":[null,9],\"2160\":[2],\"2161\":[null,2],\"2162\":[null,21],\"2163\":[2],\"2164\":[null,3],\"2165\":[null,16],\"2166\":[2],\"2167\":[null,4],\"2168\":[null,17],\"2169\":[2],\"2170\":[null,2],\"2171\":[null,11],\"2172\":[3],\"2173\":[2],\"2174\":[null,4],\"2175\":[null,22],\"2176\":[2],\"2177\":[null,2],\"2178\":[null,17],\"2179\":[2],\"2180\":[null,4],\"2181\":[null,24],\"2182\":[3],\"2183\":[2],\"2184\":[null,4],\"2185\":[null,16],\"2186\":[2],\"2187\":[null,5],\"2188\":[null,16],\"2189\":[2],\"2190\":[null,5],\"2191\":[null,17],\"2192\":[2],\"2193\":[null,5],\"2194\":[null,14],\"2195\":[2],\"2196\":[null,3],\"2197\":[null,16],\"2198\":[2],\"2199\":[null,4],\"2200\":[null,16],\"2201\":[2],\"2202\":[null,2],\"2203\":[null,5],\"2204\":[null,21],\"2205\":[2],\"2206\":[null,3],\"2207\":[null,3],\"2208\":[null,4],\"2209\":[null,2],\"2210\":[null,1],\"2211\":[null,26],\"2212\":[2],\"2213\":[null,1],\"2214\":[null,6],\"2215\":[null,3],\"2216\":[null,1],\"2217\":[null,7],\"2218\":[null,4],\"2219\":[2],\"2220\":[null,3],\"2221\":[null,2],\"2222\":[null,2],\"2223\":[null,2],\"2224\":[null,2],\"2225\":[null,10],\"2226\":[2],\"2227\":[null,4],\"2228\":[null,11],\"2229\":[2],\"2230\":[null,2],\"2231\":[null,10],\"2232\":[2],\"2233\":[null,3],\"2234\":[null,2],\"2235\":[null,4],\"2236\":[null,2],\"2237\":[null,3],\"2238\":[null,3],\"2239\":[null,21],\"2240\":[2],\"2241\":[null,3],\"2242\":[null,4],\"2243\":[null,3],\"2244\":[null,26],\"2245\":[2],\"2246\":[null,3],\"2247\":[null,8],\"2248\":[2],\"2249\":[null,1],\"2250\":[null,5],\"2251\":[null,1],\"2252\":[null,7],\"2253\":[null,4],\"2254\":[2],\"2255\":[null,1],\"2256\":[null,25],\"2257\":[2],\"2258\":[null,2],\"2259\":[null,2],\"2260\":[null,2],\"2261\":[null,2],\"2262\":[null,2],\"2263\":[null,10],\"2264\":[2],\"2265\":[null,4],\"2266\":[null,11],\"2267\":[2],\"2268\":[null,2],\"2269\":[null,10],\"2270\":[2],\"2271\":[null,3],\"2272\":[null,20],\"2273\":[2],\"2274\":[null,4],\"2275\":[null,12],\"2276\":[2],\"2277\":[null,3],\"2278\":[null,2],\"2279\":[null,2],\"2280\":[null,4],\"2281\":[null,4],\"2282\":[null,26],\"2283\":[2],\"2284\":[null,5],\"2285\":[2],\"2286\":[null,1],\"2287\":[null,7],\"2288\":[null,3],\"2289\":[2],\"2290\":[null,1],\"2291\":[null,23],\"2292\":[2],\"2293\":[null,4],\"2294\":[3],\"2295\":[2],\"2296\":[null,1],\"2297\":[null,4],\"2298\":[null,3],\"2299\":[null,6],\"2300\":[null,1],\"2301\":[null,6],\"2302\":[2],\"2303\":[null,5],\"2304\":[null,9],\"2305\":[2],\"2306\":[null,5],\"2307\":[null,5],\"2308\":[2],\"2309\":[null,5],\"2310\":[null,3],\"2311\":[2],\"2312\":[null,3],\"2313\":[null,2],\"2314\":[null,40],\"2315\":[3],\"2316\":[null,1],\"2317\":[null,5],\"2318\":[null,5],\"2319\":[null,1],\"2320\":[null,8],\"2321\":[null,3],\"2322\":[null,11],\"2323\":[3],\"2324\":[null,6],\"2325\":[null,10],\"2326\":[2],\"2327\":[null,2],\"2328\":[null,6],\"2329\":[null,3],\"2330\":[null,5],\"2331\":[null,16],\"2332\":[null,1],\"2333\":[null,4],\"2334\":[null,2],\"2335\":[null,4],\"2336\":[null,2],\"2337\":[2],\"2338\":[null,3],\"2339\":[null,4],\"2340\":[null,4],\"2341\":[null,6],\"2342\":[null,3],\"2343\":[null,3],\"2344\":[null,2],\"2345\":[null,36],\"2346\":[2],\"2347\":[null,1],\"2348\":[null,7],\"2349\":[null,11],\"2350\":[null,1],\"2351\":[null,15],\"2352\":[2],\"2353\":[null,6],\"2354\":[null,18],\"2355\":[2],\"2356\":[null,1],\"2357\":[null,2],\"2358\":[null,4],\"2359\":[6],\"2360\":[null,4],\"2361\":[null,6],\"2362\":[null,19],\"2363\":[9],\"2364\":[null,3],\"2365\":[null,48],\"2366\":[2],\"2367\":[null,8],\"2368\":[null,5],\"2369\":[null,6],\"2370\":[null,21],\"2371\":[2],\"2372\":[null,1],\"2373\":[null,3],\"2374\":[null,3],\"2375\":[null,25],\"2376\":[2],\"2377\":[null,6],\"2378\":[null,2],\"2379\":[null,20],\"2380\":[2],\"2381\":[null,2],\"2382\":[null,20],\"2383\":[null,1],\"2384\":[null,10],\"2385\":[2],\"2386\":[null,3],\"2387\":[null,15],\"2388\":[2],\"2389\":[null,6],\"2390\":[null,4],\"2391\":[null,21],\"2392\":[3],\"2393\":[2],\"2394\":[null,1],\"2395\":[null,5],\"2396\":[1],\"2397\":[null,7],\"2398\":[1],\"2399\":[null,17],\"2400\":[1],\"2401\":[null,7],\"2402\":[2],\"2403\":[null,4],\"2404\":[null,18],\"2405\":[2],\"2406\":[null,3],\"2407\":[null,26],\"2408\":[2],\"2409\":[null,2],\"2410\":[null,14],\"2411\":[2],\"2412\":[null,3],\"2413\":[null,13],\"2414\":[2],\"2415\":[null,2],\"2416\":[null,12],\"2417\":[2],\"2418\":[null,5],\"2419\":[null,4],\"2420\":[null,5],\"2421\":[null,3],\"2422\":[null,32],\"2423\":[2],\"2424\":[null,1],\"2425\":[null,7],\"2426\":[null,20],\"2427\":[2],\"2428\":[null,9],\"2429\":[null,19],\"2430\":[2],\"2431\":[null,3],\"2432\":[null,5],\"2433\":[null,19],\"2434\":[2],\"2435\":[null,3],\"2436\":[null,23],\"2437\":[2],\"2438\":[null,4],\"2439\":[null,10],\"2440\":[null,8],\"2441\":[2],\"2442\":[null,2],\"2443\":[3],\"2444\":[null,12],\"2445\":[3],\"2446\":[null,12],\"2447\":[2],\"2448\":[null,2],\"2449\":[null,15],\"2450\":[2],\"2451\":[null,1],\"2452\":[null,5],\"2453\":[1],\"2454\":[null,4],\"2455\":[1],\"2456\":[null,6],\"2457\":[1],\"2458\":[null,8],\"2459\":[2],\"2460\":[null,2],\"2461\":[null,20],\"2462\":[2],\"2463\":[null,6],\"2464\":[null,8],\"2465\":[null,20],\"2466\":[2],\"2467\":[null,4],\"2468\":[null,9],\"2469\":[null,24],\"2470\":[2],\"2471\":[null,1],\"2472\":[null,5],\"2473\":[null,4],\"2474\":[null,6],\"2475\":[1],\"2476\":[null,5],\"2477\":[1],\"2478\":[null,8],\"2479\":[null,4],\"2480\":[null,2],\"2481\":[null,8],\"2482\":[2],\"2483\":[null,7],\"2484\":[null,19],\"2485\":[2],\"2486\":[null,4],\"2487\":[null,15],\"2488\":[2],\"2489\":[null,4],\"2490\":[null,3],\"2491\":[null,2],\"2492\":[null,37],\"2493\":[2],\"2494\":[null,10],\"2495\":[null,21],\"2496\":[2],\"2497\":[null,1],\"2498\":[null,3],\"2499\":[null,4],\"2500\":[null,28],\"2501\":[2],\"2502\":[null,1],\"2503\":[null,3],\"2504\":[null,4],\"2505\":[null,28],\"2506\":[2],\"2507\":[null,1],\"2508\":[null,19],\"2509\":[2],\"2510\":[null,3],\"2511\":[null,6],\"2512\":[null,27],\"2513\":[2],\"2514\":[null,3],\"2515\":[null,18],\"2516\":[2],\"2517\":[null,4],\"2518\":[null,34],\"2519\":[4],\"2520\":[2],\"2521\":[null,1],\"2522\":[null,5],\"2523\":[null,6],\"2524\":[1],\"2525\":[null,6],\"2526\":[1],\"2527\":[null,7],\"2528\":[2],\"2529\":[null,3],\"2530\":[null,12],\"2531\":[2],\"2532\":[null,3],\"2533\":[null,4],\"2534\":[null,7],\"2535\":[null,2],\"2536\":[null,3],\"2537\":[null,20],\"2538\":[2],\"2539\":[null,3],\"2540\":[null,4],\"2541\":[null,6],\"2542\":[null,2],\"2543\":[null,2],\"2544\":[null,4],\"2545\":[null,4],\"2546\":[null,25],\"2547\":[2],\"2548\":[null,6],\"2549\":[null,21],\"2550\":[2],\"2551\":[null,6],\"2552\":[null,16],\"2553\":[2],\"2554\":[null,5],\"2555\":[null,16],\"2556\":[2],\"2557\":[null,2],\"2558\":[null,5],\"2559\":[null,1],\"2560\":[null,3],\"2561\":[null,4],\"2562\":[null,4],\"2563\":[null,21],\"2564\":[2],\"2565\":[null,4],\"2566\":[null,19],\"2567\":[2],\"2568\":[null,5],\"2569\":[null,22],\"2570\":[2],\"2571\":[null,1],\"2572\":[null,5],\"2573\":[1],\"2574\":[null,5],\"2575\":[1],\"2576\":[null,9],\"2577\":[1],\"2578\":[null,5],\"2579\":[1],\"2580\":[null,3],\"2581\":[1],\"2582\":[null,5],\"2583\":[null,3],\"2584\":[null,3],\"2585\":[null,7],\"2586\":[2],\"2587\":[null,9],\"2588\":[null,3],\"2589\":[null,23],\"2590\":[2],\"2591\":[null,9],\"2592\":[null,27],\"2593\":[2],\"2594\":[null,7],\"2595\":[null,22],\"2596\":[2],\"2597\":[null,3],\"2598\":[null,12],\"2599\":[2],\"2600\":[null,5],\"2601\":[null,22],\"2602\":[2],\"2603\":[null,2],\"2604\":[null,21],\"2605\":[2],\"2606\":[null,21],\"2607\":[2],\"2608\":[null,3],\"2609\":[null,14],\"2610\":[2],\"2611\":[null,3],\"2612\":[null,18],\"2613\":[2],\"2614\":[null,5],\"2615\":[null,19],\"2616\":[2],\"2617\":[null,3],\"2618\":[null,26],\"2619\":[2],\"2620\":[null,3],\"2621\":[null,20],\"2622\":[2],\"2623\":[null,7],\"2624\":[null,32],\"2625\":[3],\"2626\":[null,1],\"2627\":[null,4],\"2628\":[null,5],\"2629\":[2],\"2630\":[null,2],\"2631\":[2],\"2632\":[null,5],\"2633\":[null,6],\"2634\":[2],\"2635\":[null,5],\"2636\":[null,4],\"2637\":[2],\"2638\":[null,5],\"2639\":[null,7],\"2640\":[2],\"2641\":[null,5],\"2642\":[null,6],\"2643\":[2],\"2644\":[null,4],\"2645\":[null,1],\"2646\":[null,1],\"2647\":[2],\"2648\":[null,1],\"2649\":[null,1],\"2650\":[2],\"2651\":[null,1],\"2652\":[null,1],\"2653\":[2],\"2654\":[null,1],\"2655\":[null,1],\"2656\":[2],\"2657\":[null,1],\"2658\":[null,1],\"2659\":[3],\"2660\":[null,1],\"2661\":[null,2],\"2662\":[1],\"2663\":[null,5],\"2664\":[null,5],\"2665\":[null,11],\"2666\":[null,13],\"2667\":[null,5],\"2668\":[null,6],\"2669\":[1],\"2670\":[null,7],\"2671\":[null,17],\"2672\":[1],\"2673\":[null,6],\"2674\":[null,5],\"2675\":[null,3],\"2676\":[null,4],\"2677\":[null,5],\"2678\":[1],\"2679\":[null,2],\"2680\":[null,3],\"2681\":[null,3],\"2682\":[null,3],\"2683\":[null,29],\"2684\":[null,1],\"2685\":[null,5],\"2686\":[2],\"2687\":[null,2],\"2688\":[2],\"2689\":[null,3],\"2690\":[null,2],\"2691\":[null,3],\"2692\":[null,22],\"2693\":[2],\"2694\":[null,2],\"2695\":[null,2],\"2696\":[null,2],\"2697\":[null,21],\"2698\":[2],\"2699\":[null,2],\"2700\":[null,16],\"2701\":[2],\"2702\":[null,2],\"2703\":[null,6],\"2704\":[null,5],\"2705\":[null,18],\"2706\":[2],\"2707\":[null,1],\"2708\":[null,5],\"2709\":[null,5],\"2710\":[null,7],\"2711\":[1],\"2712\":[null,12],\"2713\":[1],\"2714\":[null,4],\"2715\":[2],\"2716\":[null,5],\"2717\":[null,11],\"2718\":[2],\"2719\":[null,4],\"2720\":[null,4],\"2721\":[null,4],\"2722\":[null,4],\"2723\":[null,2],\"2724\":[null,4],\"2725\":[null,4],\"2726\":[null,4],\"2727\":[null,4],\"2728\":[null,4],\"2729\":[null,4],\"2730\":[null,2],\"2731\":[null,4],\"2732\":[null,5],\"2733\":[null,3],\"2734\":[null,2],\"2735\":[null,5],\"2736\":[null,1],\"2737\":[null,3],\"2738\":[null,4],\"2739\":[null,2],\"2740\":[null,2],\"2741\":[null,3],\"2742\":[2],\"2743\":[null,2],\"2744\":[null,11],\"2745\":[null,3],\"2746\":[null,4],\"2747\":[null,29],\"2748\":[2],\"2749\":[null,2],\"2750\":[null,14],\"2751\":[2],\"2752\":[null,3],\"2753\":[null,4],\"2754\":[null,3],\"2755\":[null,3],\"2756\":[null,25],\"2757\":[2],\"2758\":[null,4],\"2759\":[null,8],\"2760\":[null,24],\"2761\":[2],\"2762\":[null,1],\"2763\":[null,5],\"2764\":[1],\"2765\":[null,13],\"2766\":[1],\"2767\":[null,8],\"2768\":[null,5],\"2769\":[null,3],\"2770\":[1],\"2771\":[null,9],\"2772\":[3],\"2773\":[null,1],\"2774\":[null,5],\"2775\":[null,5],\"2776\":[null,1],\"2777\":[null,8],\"2778\":[null,3],\"2779\":[null,11],\"2780\":[3],\"2781\":[null,6],\"2782\":[null,10],\"2783\":[2],\"2784\":[null,2],\"2785\":[null,6],\"2786\":[null,3],\"2787\":[null,5],\"2788\":[null,16],\"2789\":[null,1],\"2790\":[null,4],\"2791\":[null,2],\"2792\":[null,4],\"2793\":[null,2],\"2794\":[2],\"2795\":[null,3],\"2796\":[null,4],\"2797\":[null,4],\"2798\":[null,6],\"2799\":[null,3],\"2800\":[null,3],\"2801\":[null,2],\"2802\":[null,36],\"2803\":[2],\"2804\":[2],\"2805\":[null,7],\"2806\":[null,5],\"2807\":[null,5],\"2808\":[2],\"2809\":[null,2],\"2810\":[null,1],\"2811\":[null,1],\"2812\":[2],\"2813\":[null,1],\"2814\":[null,4],\"2815\":[null,4],\"2816\":[null,5],\"2817\":[2],\"2818\":[3],\"2819\":[null,4],\"2820\":[null,8],\"2821\":[null,5],\"2822\":[null,6],\"2823\":[null,4],\"2824\":[3],\"2825\":[null,4],\"2826\":[2],\"2827\":[null,5],\"2828\":[2],\"2829\":[3],\"2830\":[null,6],\"2831\":[null,6],\"2832\":[3],\"2833\":[null,4],\"2834\":[null,4],\"2835\":[null,3],\"2836\":[null,2],\"2837\":[null,4],\"2838\":[3],\"2839\":[2],\"2840\":[null,1],\"2841\":[2],\"2842\":[2],\"2843\":[null,4],\"2844\":[null,5],\"2845\":[3],\"2846\":[null,5],\"2847\":[null,6],\"2848\":[5],\"2849\":[null,7],\"2850\":[null,6],\"2851\":[3],\"2852\":[null,1],\"2853\":[null,8],\"2854\":[null,8],\"2855\":[3],\"2856\":[3],\"2857\":[null,3],\"2858\":[null,10],\"2859\":[3],\"2860\":[null,6],\"2861\":[null,3],\"2862\":[3],\"2863\":[null,3],\"2864\":[null,6],\"2865\":[3],\"2866\":[null,2],\"2867\":[3],\"2868\":[null,2],\"2869\":[2],\"2870\":[null,4],\"2871\":[null,3],\"2872\":[2],\"2873\":[null,6],\"2874\":[null,4],\"2875\":[null,3],\"2876\":[null,2],\"2877\":[null,18],\"2878\":[3],\"2879\":[2],\"2880\":[2],\"2881\":[null,2],\"2882\":[null,23],\"2883\":[null,7],\"2884\":[null,7],\"2885\":[null,6],\"2886\":[2],\"2887\":[3],\"2888\":[null,4],\"2889\":[null,6],\"2890\":[null,4],\"2891\":[null,5],\"2892\":[null,4],\"2893\":[2],\"2894\":[null,3],\"2895\":[null,3],\"2896\":[null,3],\"2897\":[3],\"2898\":[null,2],\"2899\":[null,4],\"2900\":[2],\"2901\":[4],\"2902\":[null,2],\"2903\":[null,2],\"2904\":[null,2],\"2905\":[4],\"2906\":[null,8],\"2907\":[2],\"2908\":[null,3],\"2909\":[null,4],\"2910\":[2],\"2911\":[null,2],\"2912\":[null,5],\"2913\":[null,4],\"2914\":[2],\"2915\":[4],\"2916\":[null,9],\"2917\":[4],\"2918\":[null,10],\"2919\":[null,2],\"2920\":[null,3],\"2921\":[3],\"2922\":[null,5],\"2923\":[null,4],\"2924\":[null,5],\"2925\":[2],\"2926\":[2],\"2927\":[null,1],\"2928\":[null,1],\"2929\":[null,2],\"2930\":[null,2],\"2931\":[2],\"2932\":[null,2],\"2933\":[2],\"2934\":[null,3],\"2935\":[2],\"2936\":[null,3],\"2937\":[null,7],\"2938\":[null,7],\"2939\":[null,3],\"2940\":[null,4],\"2941\":[2],\"2942\":[2],\"2943\":[null,6],\"2944\":[null,8],\"2945\":[null,4],\"2946\":[null,6],\"2947\":[null,5],\"2948\":[null,5],\"2949\":[null,9],\"2950\":[null,9],\"2951\":[null,4],\"2952\":[null,4],\"2953\":[null,4],\"2954\":[null,15],\"2955\":[2],\"2956\":[null,5],\"2957\":[null,3],\"2958\":[null,5],\"2959\":[null,5],\"2960\":[null,5],\"2961\":[null,5],\"2962\":[null,64],\"2963\":[null,3],\"2964\":[null,3],\"2965\":[null,3],\"2966\":[null,1],\"2967\":[null,6],\"2968\":[2],\"2969\":[null,4],\"2970\":[null,3],\"2971\":[null,4],\"2972\":[null,3],\"2973\":[null,4],\"2974\":[null,29],\"2975\":[null,3],\"2976\":[null,3],\"2977\":[null,3],\"2978\":[null,5],\"2979\":[2],\"2980\":[null,3],\"2981\":[null,8],\"2982\":[null,4],\"2983\":[null,3],\"2984\":[2],\"2985\":[null,1],\"2986\":[null,1],\"2987\":[2],\"2988\":[null,2],\"2989\":[null,1],\"2990\":[null,3],\"2991\":[null,2],\"2992\":[null,2],\"2993\":[null,7],\"2994\":[null,6],\"2995\":[3],\"2996\":[2],\"2997\":[2],\"2998\":[null,3],\"2999\":[null,4],\"3000\":[2],\"3001\":[null,2],\"3002\":[2],\"3003\":[3],\"3004\":[null,3],\"3005\":[null,4],\"3006\":[3],\"3007\":[null,4],\"3008\":[null,7],\"3009\":[2],\"3010\":[null,5],\"3011\":[null,6],\"3012\":[2],\"3013\":[null,9],\"3014\":[2],\"3015\":[null,2],\"3016\":[null,4],\"3017\":[null,6],\"3018\":[2],\"3019\":[null,4],\"3020\":[3],\"3021\":[null,3],\"3022\":[null,4],\"3023\":[null,2],\"3024\":[null,2],\"3025\":[null,1],\"3026\":[null,1],\"3027\":[null,1],\"3028\":[null,1],\"3029\":[null,2],\"3030\":[null,1],\"3031\":[null,1],\"3032\":[null,2],\"3033\":[null,2],\"3034\":[null,4],\"3035\":[null,2],\"3036\":[null,2],\"3037\":[null,3],\"3038\":[3],\"3039\":[null,4],\"3040\":[null,2],\"3041\":[null,2],\"3042\":[null,3],\"3043\":[null,3],\"3044\":[null,2],\"3045\":[null,2],\"3046\":[null,3],\"3047\":[2],\"3048\":[2],\"3049\":[null,5],\"3050\":[null,2],\"3051\":[2],\"3052\":[null,1],\"3053\":[2],\"3054\":[null,5],\"3055\":[2],\"3056\":[null,6],\"3057\":[null,2],\"3058\":[2],\"3059\":[null,1],\"3060\":[null,7],\"3061\":[null,2],\"3062\":[null,3],\"3063\":[null,4],\"3064\":[null,2],\"3065\":[2],\"3066\":[null,1],\"3067\":[null,4],\"3068\":[null,6],\"3069\":[null,7],\"3070\":[null,7],\"3071\":[3],\"3072\":[3],\"3073\":[2],\"3074\":[null,5],\"3075\":[2],\"3076\":[null,3],\"3077\":[null,2],\"3078\":[2],\"3079\":[null,3],\"3080\":[null,7],\"3081\":[2],\"3082\":[null,14],\"3083\":[2],\"3084\":[null,6],\"3085\":[3],\"3086\":[2],\"3087\":[null,5],\"3088\":[null,2],\"3089\":[2],\"3090\":[null,8],\"3091\":[null,7],\"3092\":[2],\"3093\":[null,3],\"3094\":[null,3],\"3095\":[null,5],\"3096\":[null,4],\"3097\":[2],\"3098\":[null,6],\"3099\":[2],\"3100\":[null,9],\"3101\":[2],\"3102\":[null,4],\"3103\":[null,3],\"3104\":[null,3],\"3105\":[null,4],\"3106\":[3],\"3107\":[null,6],\"3108\":[null,8],\"3109\":[null,4],\"3110\":[null,2],\"3111\":[3],\"3112\":[2],\"3113\":[null,5],\"3114\":[null,5],\"3115\":[2],\"3116\":[null,4],\"3117\":[null,4],\"3118\":[null,5],\"3119\":[2],\"3120\":[null,3],\"3121\":[null,3],\"3122\":[null,3],\"3123\":[null,3],\"3124\":[null,2],\"3125\":[null,14],\"3126\":[2],\"3127\":[null,3],\"3128\":[null,5],\"3129\":[null,2],\"3130\":[null,4],\"3131\":[null,8],\"3132\":[null,6],\"3133\":[null,5],\"3134\":[2],\"3135\":[null,3],\"3136\":[null,3],\"3137\":[3],\"3138\":[2],\"3139\":[null,4],\"3140\":[null,3],\"3141\":[2],\"3142\":[null,7],\"3143\":[2],\"3144\":[null,7],\"3145\":[null,6],\"3146\":[2],\"3147\":[2],\"3148\":[null,3],\"3149\":[null,3],\"3150\":[2],\"3151\":[null,2],\"3152\":[null,3],\"3153\":[null,5],\"3154\":[3],\"3155\":[null,6],\"3156\":[null,11],\"3157\":[2],\"3158\":[null,5],\"3159\":[null,2],\"3160\":[null,3],\"3161\":[3],\"3162\":[null,20],\"3163\":[2],\"3164\":[null,3],\"3165\":[null,2],\"3166\":[null,5],\"3167\":[null,21],\"3168\":[2],\"3169\":[null,6],\"3170\":[null,6],\"3171\":[null,4],\"3172\":[null,1],\"3173\":[null,26],\"3174\":[2],\"3175\":[null,5],\"3176\":[null,23],\"3177\":[null,3],\"3178\":[2],\"3179\":[2],\"3180\":[null,2],\"3181\":[null,2],\"3182\":[null,4],\"3183\":[2],\"3184\":[null,3],\"3185\":[null,4],\"3186\":[4],\"3187\":[null,4],\"3188\":[null,6],\"3189\":[null,8],\"3190\":[null,8],\"3191\":[null,15],\"3192\":[null,10],\"3193\":[2],\"3194\":[null,4],\"3195\":[null,2],\"3196\":[null,3],\"3197\":[null,4],\"3198\":[null,2],\"3199\":[null,2],\"3200\":[null,4],\"3201\":[null,3],\"3202\":[3],\"3203\":[null,5],\"3204\":[2],\"3205\":[null,2],\"3206\":[null,6],\"3207\":[null,3],\"3208\":[null,7],\"3209\":[2],\"3210\":[null,6],\"3211\":[null,5],\"3212\":[null,21],\"3213\":[2],\"3214\":[null,8],\"3215\":[null,5],\"3216\":[null,2],\"3217\":[null,3],\"3218\":[null,2],\"3219\":[null,3],\"3220\":[2],\"3221\":[null,8],\"3222\":[3],\"3223\":[null,4],\"3224\":[null,4],\"3225\":[null,5],\"3226\":[3],\"3227\":[null,2],\"3228\":[2],\"3229\":[3],\"3230\":[null,4],\"3231\":[null,4],\"3232\":[null,5],\"3233\":[3],\"3234\":[null,3],\"3235\":[3],\"3236\":[null,5],\"3237\":[null,16],\"3238\":[3],\"3239\":[null,4],\"3240\":[null,2],\"3241\":[null,21],\"3242\":[2],\"3243\":[null,3],\"3244\":[null,4],\"3245\":[null,9],\"3246\":[2],\"3247\":[null,2],\"3248\":[3],\"3249\":[2],\"3250\":[null,2],\"3251\":[2],\"3252\":[null,10],\"3253\":[null,19],\"3254\":[2],\"3255\":[null,3],\"3256\":[3],\"3257\":[null,5],\"3258\":[null,5],\"3259\":[null,4],\"3260\":[null,4],\"3261\":[null,17],\"3262\":[null,2],\"3263\":[null,13],\"3264\":[2],\"3265\":[3],\"3266\":[null,1],\"3267\":[null,9],\"3268\":[2],\"3269\":[null,4],\"3270\":[null,8],\"3271\":[2],\"3272\":[null,4],\"3273\":[null,16],\"3274\":[2],\"3275\":[null,4],\"3276\":[2],\"3277\":[2],\"3278\":[null,4],\"3279\":[null,6],\"3280\":[2],\"3281\":[null,2],\"3282\":[null,13],\"3283\":[2],\"3284\":[null,3],\"3285\":[2],\"3286\":[null,2],\"3287\":[null,2],\"3288\":[null,2],\"3289\":[null,2],\"3290\":[null,2],\"3291\":[null,2],\"3292\":[2],\"3293\":[null,5],\"3294\":[2],\"3295\":[null,3],\"3296\":[null,12],\"3297\":[null,8],\"3298\":[2],\"3299\":[null,3],\"3300\":[2],\"3301\":[null,4],\"3302\":[null,3],\"3303\":[2],\"3304\":[null,3],\"3305\":[2],\"3306\":[null,8],\"3307\":[null,5],\"3308\":[null,8],\"3309\":[null,3],\"3310\":[null,13],\"3311\":[null,9],\"3312\":[2],\"3313\":[2],\"3314\":[null,4],\"3315\":[null,3],\"3316\":[2],\"3317\":[5],\"3318\":[null,5],\"3319\":[null,12],\"3320\":[2],\"3321\":[null,3],\"3322\":[null,14],\"3323\":[4],\"3324\":[null,8],\"3325\":[null,4],\"3326\":[2],\"3327\":[null,1],\"3328\":[null,4],\"3329\":[3],\"3330\":[null,3],\"3331\":[null,3],\"3332\":[null,4],\"3333\":[null,4],\"3334\":[null,2],\"3335\":[null,2],\"3336\":[null,4],\"3337\":[null,1],\"3338\":[null,1],\"3339\":[null,2],\"3340\":[3],\"3341\":[2],\"3342\":[null,4],\"3343\":[3],\"3344\":[null,4],\"3345\":[4],\"3346\":[null,6],\"3347\":[4],\"3348\":[null,8],\"3349\":[2],\"3350\":[null,5],\"3351\":[null,7],\"3352\":[2],\"3353\":[null,2],\"3354\":[null,7],\"3355\":[null,4],\"3356\":[null,5],\"3357\":[null,3],\"3358\":[2],\"3359\":[2],\"3360\":[null,11],\"3361\":[2],\"3362\":[null,2],\"3363\":[null,6],\"3364\":[null,6],\"3365\":[null,12],\"3366\":[null,4],\"3367\":[null,10],\"3368\":[null,2],\"3369\":[null,7],\"3370\":[null,6],\"3371\":[2],\"3372\":[null,3],\"3373\":[null,6],\"3374\":[null,16],\"3375\":[4],\"3376\":[null,12],\"3377\":[null,6],\"3378\":[2],\"3379\":[1],\"3380\":[null,1],\"3381\":[null,4],\"3382\":[null,4],\"3383\":[null,1],\"3384\":[null,3],\"3385\":[null,6],\"3386\":[null,2],\"3387\":[2],\"3388\":[null,5],\"3389\":[null,3],\"3390\":[null,6],\"3391\":[2],\"3392\":[null,4],\"3393\":[null,16],\"3394\":[null,4],\"3395\":[null,3],\"3396\":[null,5],\"3397\":[null,3],\"3398\":[2],\"3399\":[2],\"3400\":[null,3],\"3401\":[null,5],\"3402\":[null,6],\"3403\":[2],\"3404\":[null,2],\"3405\":[null,28],\"3406\":[2],\"3407\":[null,3],\"3408\":[null,3],\"3409\":[null,11],\"3410\":[4],\"3411\":[null,4],\"3412\":[null,10],\"3413\":[null,5],\"3414\":[null,44],\"3415\":[3],\"3416\":[2],\"3417\":[null,7],\"3418\":[3],\"3419\":[null,3],\"3420\":[null,23],\"3421\":[2],\"3422\":[null,4],\"3423\":[2],\"3424\":[null,6],\"3425\":[2],\"3426\":[null,5],\"3427\":[3],\"3428\":[null,2],\"3429\":[null,2],\"3430\":[3],\"3431\":[null,3],\"3432\":[null,2],\"3433\":[2],\"3434\":[null,4],\"3435\":[null,3],\"3436\":[null,3],\"3437\":[2],\"3438\":[null,5],\"3439\":[null,3],\"3440\":[2],\"3441\":[null,5],\"3442\":[null,5],\"3443\":[2],\"3444\":[null,24],\"3445\":[2],\"3446\":[null,5],\"3447\":[2],\"3448\":[null,3],\"3449\":[null,7],\"3450\":[2],\"3451\":[4],\"3452\":[null,3],\"3453\":[null,17],\"3454\":[3],\"3455\":[null,16],\"3456\":[4],\"3457\":[null,59],\"3458\":[3],\"3459\":[2],\"3460\":[2],\"3461\":[null,6],\"3462\":[2],\"3463\":[null,2],\"3464\":[null,7],\"3465\":[null,2],\"3466\":[null,2],\"3467\":[2],\"3468\":[null,4],\"3469\":[null,3],\"3470\":[null,4],\"3471\":[null,3],\"3472\":[2],\"3473\":[null,4],\"3474\":[null,5],\"3475\":[2],\"3476\":[null,1],\"3477\":[null,3],\"3478\":[null,2],\"3479\":[null,1],\"3480\":[null,1],\"3481\":[2],\"3482\":[3],\"3483\":[null,3],\"3484\":[null,4],\"3485\":[3],\"3486\":[null,14],\"3487\":[2],\"3488\":[2],\"3489\":[null,4],\"3490\":[null,4],\"3491\":[null,6],\"3492\":[2],\"3493\":[null,3],\"3494\":[3],\"3495\":[null,3],\"3496\":[null,15],\"3497\":[2],\"3498\":[null,4],\"3499\":[null,8],\"3500\":[null,12],\"3501\":[2],\"3502\":[null,3],\"3503\":[null,4],\"3504\":[null,8],\"3505\":[null,6],\"3506\":[null,13],\"3507\":[2],\"3508\":[null,4],\"3509\":[null,6],\"3510\":[2],\"3511\":[null,1],\"3512\":[null,19],\"3513\":[2],\"3514\":[null,9],\"3515\":[null,3],\"3516\":[null,2],\"3517\":[2],\"3518\":[3],\"3519\":[null,3],\"3520\":[3],\"3521\":[null,5],\"3522\":[null,4],\"3523\":[null,4],\"3524\":[3],\"3525\":[null,13],\"3526\":[null,13],\"3527\":[null,3],\"3528\":[2],\"3529\":[null,4],\"3530\":[null,4],\"3531\":[2],\"3532\":[1],\"3533\":[null,6],\"3534\":[null,5],\"3535\":[null,3],\"3536\":[null,3],\"3537\":[null,6],\"3538\":[null,7],\"3539\":[2],\"3540\":[2],\"3541\":[null,11],\"3542\":[4],\"3543\":[null,4],\"3544\":[null,10],\"3545\":[null,9],\"3546\":[4],\"3547\":[null,5],\"3548\":[null,4],\"3549\":[null,4],\"3550\":[null,8],\"3551\":[2],\"3552\":[null,4],\"3553\":[3],\"3554\":[null,4],\"3555\":[null,3],\"3556\":[null,12],\"3557\":[2],\"3558\":[null,8],\"3559\":[null,5],\"3560\":[null,13],\"3561\":[2],\"3562\":[null,6],\"3563\":[null,22],\"3564\":[2],\"3565\":[null,2],\"3566\":[null,2],\"3567\":[null,11],\"3568\":[2],\"3569\":[null,1],\"3570\":[null,17],\"3571\":[2],\"3572\":[null,2],\"3573\":[null,3],\"3574\":[null,2],\"3575\":[null,2],\"3576\":[null,4],\"3577\":[null,4],\"3578\":[2],\"3579\":[null,3],\"3580\":[2],\"3581\":[null,7],\"3582\":[null,3],\"3583\":[null,4],\"3584\":[null,5],\"3585\":[2],\"3586\":[2],\"3587\":[null,4],\"3588\":[null,13],\"3589\":[2],\"3590\":[null,4],\"3591\":[null,27],\"3592\":[2],\"3593\":[null,2],\"3594\":[null,2],\"3595\":[3],\"3596\":[2],\"3597\":[2],\"3598\":[null,5],\"3599\":[null,16],\"3600\":[null,7],\"3601\":[2],\"3602\":[null,3],\"3603\":[null,3],\"3604\":[null,3],\"3605\":[2],\"3606\":[null,1],\"3607\":[null,2],\"3608\":[null,3],\"3609\":[null,3],\"3610\":[null,5],\"3611\":[null,3],\"3612\":[2],\"3613\":[null,5],\"3614\":[null,10],\"3615\":[2],\"3616\":[2],\"3617\":[null,6],\"3618\":[null,3],\"3619\":[null,5],\"3620\":[null,5],\"3621\":[null,3],\"3622\":[2],\"3623\":[null,3],\"3624\":[null,2],\"3625\":[2],\"3626\":[null,3],\"3627\":[null,5],\"3628\":[2],\"3629\":[null,5],\"3630\":[null,27],\"3631\":[2],\"3632\":[null,3],\"3633\":[null,4],\"3634\":[null,7],\"3635\":[null,8],\"3636\":[null,29],\"3637\":[2],\"3638\":[null,2],\"3639\":[null,1],\"3640\":[null,1],\"3641\":[2],\"3642\":[null,4],\"3643\":[null,4],\"3644\":[2],\"3645\":[null,5],\"3646\":[null,11],\"3647\":[2],\"3648\":[null,3],\"3649\":[null,5],\"3650\":[null,3],\"3651\":[2],\"3652\":[null,5],\"3653\":[null,5],\"3654\":[2],\"3655\":[2],\"3656\":[null,9],\"3657\":[null,4],\"3658\":[null,21],\"3659\":[null,10],\"3660\":[2],\"3661\":[null,4],\"3662\":[null,2],\"3663\":[null,2],\"3664\":[null,34],\"3665\":[2],\"3666\":[2],\"3667\":[2],\"3668\":[null,10],\"3669\":[null,2],\"3670\":[null,7],\"3671\":[null,5],\"3672\":[null,7],\"3673\":[null,5],\"3674\":[null,4],\"3675\":[null,5],\"3676\":[2],\"3677\":[null,3],\"3678\":[null,3],\"3679\":[null,5],\"3680\":[3],\"3681\":[null,6],\"3682\":[null,1],\"3683\":[null,2],\"3684\":[null,1],\"3685\":[2],\"3686\":[null,2],\"3687\":[null,2],\"3688\":[null,3],\"3689\":[null,6],\"3690\":[null,2],\"3691\":[null,10],\"3692\":[null,3],\"3693\":[null,2],\"3694\":[null,6],\"3695\":[null,6],\"3696\":[null,4],\"3697\":[null,6],\"3698\":[null,3],\"3699\":[null,5],\"3700\":[null,6],\"3701\":[null,4],\"3702\":[null,2],\"3703\":[null,4],\"3704\":[null,2],\"3705\":[2],\"3706\":[null,1],\"3707\":[null,1],\"3708\":[null,1],\"3709\":[null,8],\"3710\":[null,1],\"3711\":[null,8],\"3712\":[2],\"3713\":[2],\"3714\":[null,3],\"3715\":[null,6],\"3716\":[null,2],\"3717\":[2],\"3718\":[null,14],\"3719\":[null,8],\"3720\":[null,3],\"3721\":[null,10],\"3722\":[null,3],\"3723\":[null,13],\"3724\":[null,6],\"3725\":[null,5],\"3726\":[null,5],\"3727\":[null,6],\"3728\":[null,2],\"3729\":[null,3],\"3730\":[2],\"3731\":[null,2],\"3732\":[null,1],\"3733\":[null,6],\"3734\":[null,5],\"3735\":[2],\"3736\":[3],\"3737\":[null,5],\"3738\":[null,19],\"3739\":[3],\"3740\":[null,2],\"3741\":[null,6],\"3742\":[null,3],\"3743\":[null,3],\"3744\":[2],\"3745\":[null,7],\"3746\":[null,4],\"3747\":[null,32],\"3748\":[2],\"3749\":[null,1],\"3750\":[null,2],\"3751\":[null,2],\"3752\":[null,7],\"3753\":[null,3],\"3754\":[null,23],\"3755\":[2],\"3756\":[3],\"3757\":[null,8],\"3758\":[null,2],\"3759\":[null,3],\"3760\":[null,3],\"3761\":[null,1],\"3762\":[null,3],\"3763\":[2],\"3764\":[null,3],\"3765\":[null,4],\"3766\":[2],\"3767\":[null,10],\"3768\":[2],\"3769\":[2],\"3770\":[null,3],\"3771\":[null,2],\"3772\":[null,2],\"3773\":[2],\"3774\":[null,2],\"3775\":[null,1],\"3776\":[null,4],\"3777\":[2],\"3778\":[null,7],\"3779\":[3],\"3780\":[null,4],\"3781\":[null,5],\"3782\":[null,23],\"3783\":[null,13],\"3784\":[3],\"3785\":[null,4],\"3786\":[null,3],\"3787\":[null,15],\"3788\":[null,2],\"3789\":[2],\"3790\":[null,9],\"3791\":[3],\"3792\":[null,5],\"3793\":[null,7],\"3794\":[null,8],\"3795\":[null,6],\"3796\":[null,2],\"3797\":[null,6],\"3798\":[null,3],\"3799\":[null,3],\"3800\":[null,4],\"3801\":[3],\"3802\":[null,3],\"3803\":[null,17],\"3804\":[3],\"3805\":[null,4],\"3806\":[null,4],\"3807\":[3],\"3808\":[2],\"3809\":[1],\"3810\":[null,4],\"3811\":[null,3],\"3812\":[2],\"3813\":[null,10],\"3814\":[2],\"3815\":[null,5],\"3816\":[null,18],\"3817\":[3],\"3818\":[null,9],\"3819\":[2],\"3820\":[null,7],\"3821\":[null,28],\"3822\":[3],\"3823\":[null,10],\"3824\":[null,2],\"3825\":[null,4],\"3826\":[null,3],\"3827\":[2],\"3828\":[null,9],\"3829\":[null,3],\"3830\":[null,1],\"3831\":[2],\"3832\":[null,3],\"3833\":[2],\"3834\":[2],\"3835\":[null,3],\"3836\":[null,5],\"3837\":[2],\"3838\":[null,5],\"3839\":[null,6],\"3840\":[null,1],\"3841\":[null,3],\"3842\":[2],\"3843\":[null,3],\"3844\":[2],\"3845\":[null,3],\"3846\":[null,2],\"3847\":[null,2],\"3848\":[3],\"3849\":[null,5],\"3850\":[2],\"3851\":[2],\"3852\":[null,4],\"3853\":[null,5],\"3854\":[3],\"3855\":[null,3],\"3856\":[null,4],\"3857\":[null,17],\"3858\":[2],\"3859\":[null,5],\"3860\":[null,3],\"3861\":[null,3],\"3862\":[null,5],\"3863\":[null,1],\"3864\":[2],\"3865\":[null,3],\"3866\":[null,4],\"3867\":[2],\"3868\":[null,3],\"3869\":[null,4],\"3870\":[null,11],\"3871\":[null,5],\"3872\":[2],\"3873\":[null,5],\"3874\":[null,3],\"3875\":[2],\"3876\":[null,3],\"3877\":[null,1],\"3878\":[null,2],\"3879\":[null,1],\"3880\":[null,1],\"3881\":[2],\"3882\":[null,3],\"3883\":[3],\"3884\":[null,2],\"3885\":[null,2],\"3886\":[null,2],\"3887\":[null,8],\"3888\":[3],\"3889\":[2],\"3890\":[2],\"3891\":[null,4],\"3892\":[2],\"3893\":[3],\"3894\":[null,8],\"3895\":[null,11],\"3896\":[2],\"3897\":[null,9],\"3898\":[null,11],\"3899\":[2],\"3900\":[null,10],\"3901\":[null,14],\"3902\":[null,4],\"3903\":[null,4],\"3904\":[null,7],\"3905\":[null,5],\"3906\":[2],\"3907\":[null,3],\"3908\":[null,3],\"3909\":[2],\"3910\":[null,3],\"3911\":[null,3],\"3912\":[null,3],\"3913\":[null,1],\"3914\":[2],\"3915\":[null,2],\"3916\":[2],\"3917\":[null,3],\"3918\":[null,4],\"3919\":[2],\"3920\":[null,4],\"3921\":[null,3],\"3922\":[null,1],\"3923\":[null,1],\"3924\":[null,7],\"3925\":[2],\"3926\":[null,3],\"3927\":[null,2],\"3928\":[null,8],\"3929\":[2],\"3930\":[null,7],\"3931\":[null,7],\"3932\":[2],\"3933\":[null,8],\"3934\":[null,4],\"3935\":[null,5],\"3936\":[null,7],\"3937\":[null,3],\"3938\":[null,4],\"3939\":[null,12],\"3940\":[2],\"3941\":[null,4],\"3942\":[2],\"3943\":[null,3],\"3944\":[null,2],\"3945\":[2],\"3946\":[null,2],\"3947\":[null,5],\"3948\":[2],\"3949\":[null,2],\"3950\":[null,3],\"3951\":[null,5],\"3952\":[null,4],\"3953\":[null,4],\"3954\":[3],\"3955\":[null,3],\"3956\":[null,3],\"3957\":[null,7],\"3958\":[2],\"3959\":[null,5],\"3960\":[null,6],\"3961\":[null,5],\"3962\":[2],\"3963\":[null,7],\"3964\":[null,5],\"3965\":[null,6],\"3966\":[3],\"3967\":[null,5],\"3968\":[null,3],\"3969\":[2],\"3970\":[2],\"3971\":[null,6],\"3972\":[null,4],\"3973\":[3],\"3974\":[null,3],\"3975\":[null,4],\"3976\":[null,6],\"3977\":[3],\"3978\":[null,4],\"3979\":[null,3],\"3980\":[null,7],\"3981\":[3],\"3982\":[null,6],\"3983\":[3],\"3984\":[null,10],\"3985\":[null,16],\"3986\":[3],\"3987\":[null,14],\"3988\":[3],\"3989\":[null,9],\"3990\":[null,17],\"3991\":[4],\"3992\":[null,4],\"3993\":[2],\"3994\":[2],\"3995\":[null,10],\"3996\":[null,6],\"3997\":[3],\"3998\":[3],\"3999\":[null,5],\"4000\":[2],\"4001\":[null,7],\"4002\":[null,4],\"4003\":[null,5],\"4004\":[2],\"4005\":[null,3],\"4006\":[null,7],\"4007\":[null,8],\"4008\":[2],\"4009\":[null,3],\"4010\":[null,1],\"4011\":[null,3],\"4012\":[null,2],\"4013\":[2],\"4014\":[null,2],\"4015\":[null,3],\"4016\":[null,3],\"4017\":[null,4],\"4018\":[null,3],\"4019\":[null,5],\"4020\":[null,3],\"4021\":[null,2],\"4022\":[2],\"4023\":[null,4],\"4024\":[null,6],\"4025\":[null,5],\"4026\":[2],\"4027\":[4],\"4028\":[null,3],\"4029\":[null,3],\"4030\":[null,9],\"4031\":[null,3],\"4032\":[null,3],\"4033\":[null,5],\"4034\":[3],\"4035\":[null,6],\"4036\":[null,9],\"4037\":[3],\"4038\":[null,4],\"4039\":[null,26],\"4040\":[3],\"4041\":[2],\"4042\":[null,4],\"4043\":[null,9],\"4044\":[null,3],\"4045\":[2],\"4046\":[3],\"4047\":[null,2],\"4048\":[null,2],\"4049\":[2],\"4050\":[null,4],\"4051\":[null,3],\"4052\":[null,7],\"4053\":[3],\"4054\":[null,3],\"4055\":[3],\"4056\":[null,6],\"4057\":[null,3],\"4058\":[2],\"4059\":[null,3],\"4060\":[null,3],\"4061\":[null,29],\"4062\":[null,2],\"4063\":[null,10],\"4064\":[null,4],\"4065\":[null,4],\"4066\":[2],\"4067\":[null,3],\"4068\":[null,7],\"4069\":[2],\"4070\":[2],\"4071\":[null,2],\"4072\":[null,1],\"4073\":[null,1],\"4074\":[null,1],\"4075\":[3],\"4076\":[null,14],\"4077\":[null,10],\"4078\":[3],\"4079\":[null,7],\"4080\":[null,27],\"4081\":[2],\"4082\":[null,8],\"4083\":[null,18],\"4084\":[3],\"4085\":[null,2],\"4086\":[null,3],\"4087\":[null,4],\"4088\":[null,10],\"4089\":[2],\"4090\":[null,8],\"4091\":[null,6],\"4092\":[null,13],\"4093\":[3],\"4094\":[null,5],\"4095\":[3],\"4096\":[null,8],\"4097\":[3],\"4098\":[null,3],\"4099\":[null,7],\"4100\":[null,5],\"4101\":[3],\"4102\":[null,3],\"4103\":[null,9],\"4104\":[null,5],\"4105\":[2],\"4106\":[null,3],\"4107\":[2],\"4108\":[2],\"4109\":[null,3],\"4110\":[null,4],\"4111\":[2],\"4112\":[null,10],\"4113\":[null,6],\"4114\":[3],\"4115\":[2],\"4116\":[2],\"4117\":[null,3],\"4118\":[null,9],\"4119\":[null,5],\"4120\":[null,4],\"4121\":[null,4],\"4122\":[null,4],\"4123\":[null,3],\"4124\":[2],\"4125\":[3],\"4126\":[null,6],\"4127\":[null,7],\"4128\":[2],\"4129\":[null,10],\"4130\":[null,4],\"4131\":[3],\"4132\":[null,4],\"4133\":[null,6],\"4134\":[2],\"4135\":[null,9],\"4136\":[null,7],\"4137\":[2],\"4138\":[null,2],\"4139\":[null,4],\"4140\":[null,6],\"4141\":[null,7],\"4142\":[null,21],\"4143\":[2],\"4144\":[3],\"4145\":[null,7],\"4146\":[5],\"4147\":[null,7],\"4148\":[null,9],\"4149\":[3],\"4150\":[null,7],\"4151\":[3],\"4152\":[null,5],\"4153\":[null,6],\"4154\":[null,3],\"4155\":[2],\"4156\":[null,1],\"4157\":[null,19],\"4158\":[null,10],\"4159\":[2],\"4160\":[null,3],\"4161\":[null,1],\"4162\":[null,12],\"4163\":[null,2],\"4164\":[null,30],\"4165\":[2],\"4166\":[null,3],\"4167\":[null,8],\"4168\":[2],\"4169\":[null,8],\"4170\":[null,3],\"4171\":[2],\"4172\":[null,4],\"4173\":[null,4],\"4174\":[null,14],\"4175\":[2],\"4176\":[4],\"4177\":[null,3],\"4178\":[null,13],\"4179\":[3],\"4180\":[null,3],\"4181\":[null,8],\"4182\":[2],\"4183\":[null,4],\"4184\":[null,12],\"4185\":[null,8],\"4186\":[2],\"4187\":[null,4],\"4188\":[null,11],\"4189\":[null,9],\"4190\":[2],\"4191\":[3],\"4192\":[null,9],\"4193\":[3],\"4194\":[null,4],\"4195\":[null,4],\"4196\":[null,9],\"4197\":[3],\"4198\":[null,1],\"4199\":[null,11],\"4200\":[3],\"4201\":[2],\"4202\":[2],\"4203\":[null,10],\"4204\":[null,2],\"4205\":[null,3],\"4206\":[2],\"4207\":[null,1],\"4208\":[null,4],\"4209\":[null,3],\"4210\":[null,2],\"4211\":[null,5],\"4212\":[null,2],\"4213\":[null,4],\"4214\":[null,2],\"4215\":[null,2],\"4216\":[null,2],\"4217\":[null,2],\"4218\":[3],\"4219\":[3],\"4220\":[null,4],\"4221\":[null,2],\"4222\":[null,6],\"4223\":[null,4],\"4224\":[null,1],\"4225\":[null,7],\"4226\":[null,6],\"4227\":[null,38],\"4228\":[3],\"4229\":[null,19],\"4230\":[null,3],\"4231\":[null,7],\"4232\":[null,11],\"4233\":[2],\"4234\":[null,10],\"4235\":[null,6],\"4236\":[null,10],\"4237\":[null,6],\"4238\":[null,12],\"4239\":[null,11],\"4240\":[null,8],\"4241\":[null,34],\"4242\":[4],\"4243\":[null,4],\"4244\":[null,20],\"4245\":[null,10],\"4246\":[3],\"4247\":[null,9],\"4248\":[null,11],\"4249\":[2],\"4250\":[null,3],\"4251\":[3],\"4252\":[null,2],\"4253\":[null,14],\"4254\":[3],\"4255\":[null,10],\"4256\":[null,22],\"4257\":[3],\"4258\":[null,6],\"4259\":[null,11],\"4260\":[3],\"4261\":[null,7],\"4262\":[2],\"4263\":[2],\"4264\":[null,3],\"4265\":[null,6],\"4266\":[2],\"4267\":[null,2],\"4268\":[2],\"4269\":[null,3],\"4270\":[null,3],\"4271\":[2],\"4272\":[null,3],\"4273\":[null,8],\"4274\":[null,29],\"4275\":[3],\"4276\":[null,5],\"4277\":[null,4],\"4278\":[2],\"4279\":[null,3],\"4280\":[null,3],\"4281\":[null,23],\"4282\":[2],\"4283\":[null,3],\"4284\":[null,4],\"4285\":[null,2],\"4286\":[null,10],\"4287\":[null,6],\"4288\":[2],\"4289\":[5],\"4290\":[null,3],\"4291\":[null,5],\"4292\":[null,26],\"4293\":[4],\"4294\":[null,5],\"4295\":[null,16],\"4296\":[2],\"4297\":[null,3],\"4298\":[null,5],\"4299\":[2],\"4300\":[2],\"4301\":[null,4],\"4302\":[null,8],\"4303\":[2],\"4304\":[null,5],\"4305\":[2],\"4306\":[null,13],\"4307\":[null,3],\"4308\":[null,1],\"4309\":[null,1],\"4310\":[null,4],\"4311\":[2],\"4312\":[3],\"4313\":[null,1],\"4314\":[null,3],\"4315\":[null,3],\"4316\":[3],\"4317\":[null,3],\"4318\":[null,5],\"4319\":[null,2],\"4320\":[3],\"4321\":[null,3],\"4322\":[null,7],\"4323\":[null,2],\"4324\":[null,2],\"4325\":[2],\"4326\":[null,11],\"4327\":[3],\"4328\":[null,4],\"4329\":[null,18],\"4330\":[2],\"4331\":[null,2],\"4332\":[null,16],\"4333\":[null,4],\"4334\":[3],\"4335\":[null,4],\"4336\":[null,3],\"4337\":[3],\"4338\":[null,6],\"4339\":[null,4],\"4340\":[null,3],\"4341\":[null,4],\"4342\":[null,5],\"4343\":[null,2],\"4344\":[2],\"4345\":[null,5],\"4346\":[2],\"4347\":[null,6],\"4348\":[2],\"4349\":[null,8],\"4350\":[2],\"4351\":[null,1],\"4352\":[null,1],\"4353\":[null,1],\"4354\":[2],\"4355\":[3],\"4356\":[null,19],\"4357\":[3],\"4358\":[null,22],\"4359\":[3],\"4360\":[2],\"4361\":[2],\"4362\":[null,5],\"4363\":[2],\"4364\":[null,9],\"4365\":[2],\"4366\":[null,3],\"4367\":[null,5],\"4368\":[null,6],\"4369\":[2],\"4370\":[null,1],\"4371\":[null,1],\"4372\":[null,2],\"4373\":[null,3],\"4374\":[2],\"4375\":[2],\"4376\":[null,4],\"4377\":[null,4],\"4378\":[null,19],\"4379\":[null,8],\"4380\":[null,7],\"4381\":[2],\"4382\":[null,3],\"4383\":[null,7],\"4384\":[2],\"4385\":[null,7],\"4386\":[2],\"4387\":[null,6],\"4388\":[null,6],\"4389\":[2],\"4390\":[2],\"4391\":[null,4],\"4392\":[null,2],\"4393\":[2],\"4394\":[null,14],\"4395\":[2],\"4396\":[null,3],\"4397\":[null,4],\"4398\":[2],\"4399\":[null,2],\"4400\":[null,3],\"4401\":[2],\"4402\":[null,7],\"4403\":[null,3],\"4404\":[2],\"4405\":[null,2],\"4406\":[null,2],\"4407\":[null,1],\"4408\":[null,2],\"4409\":[null,4],\"4410\":[null,7],\"4411\":[null,1],\"4412\":[2],\"4413\":[null,1],\"4414\":[null,2],\"4415\":[2],\"4416\":[null,4],\"4417\":[null,8],\"4418\":[3],\"4419\":[null,2],\"4420\":[null,2],\"4421\":[null,3],\"4422\":[null,27],\"4423\":[3],\"4424\":[null,2],\"4425\":[null,24],\"4426\":[2],\"4427\":[null,2],\"4428\":[null,3],\"4429\":[null,2],\"4430\":[null,2],\"4431\":[null,3],\"4432\":[null,7],\"4433\":[2],\"4434\":[null,4],\"4435\":[null,6],\"4436\":[null,3],\"4437\":[null,6],\"4438\":[null,2],\"4439\":[null,3],\"4440\":[null,7],\"4441\":[3],\"4442\":[2],\"4443\":[4],\"4444\":[null,2],\"4445\":[null,8],\"4446\":[null,4],\"4447\":[3],\"4448\":[null,3],\"4449\":[null,5],\"4450\":[null,7],\"4451\":[null,5],\"4452\":[2],\"4453\":[null,3],\"4454\":[null,2],\"4455\":[null,4],\"4456\":[2],\"4457\":[null,4],\"4458\":[null,2],\"4459\":[null,27],\"4460\":[2],\"4461\":[null,2],\"4462\":[null,6],\"4463\":[null,10],\"4464\":[4],\"4465\":[null,5],\"4466\":[null,24],\"4467\":[4],\"4468\":[null,11],\"4469\":[null,38],\"4470\":[2],\"4471\":[1],\"4472\":[null,9],\"4473\":[null,5],\"4474\":[3],\"4475\":[2],\"4476\":[null,7],\"4477\":[3],\"4478\":[null,15],\"4479\":[null,3],\"4480\":[3],\"4481\":[null,6],\"4482\":[null,8],\"4483\":[null,6],\"4484\":[null,4],\"4485\":[2],\"4486\":[null,5],\"4487\":[null,5],\"4488\":[null,4],\"4489\":[null,4],\"4490\":[null,2],\"4491\":[null,20],\"4492\":[2],\"4493\":[null,2],\"4494\":[null,2],\"4495\":[null,4],\"4496\":[null,3],\"4497\":[2],\"4498\":[null,4],\"4499\":[null,7],\"4500\":[null,3],\"4501\":[null,5],\"4502\":[null,3],\"4503\":[null,2],\"4504\":[null,3],\"4505\":[null,2],\"4506\":[2],\"4507\":[null,8],\"4508\":[null,2],\"4509\":[null,9],\"4510\":[2],\"4511\":[null,3],\"4512\":[4],\"4513\":[null,41],\"4514\":[3],\"4515\":[null,4],\"4516\":[null,4],\"4517\":[null,2],\"4518\":[null,4],\"4519\":[2],\"4520\":[null,3],\"4521\":[2],\"4522\":[null,3],\"4523\":[null,17],\"4524\":[2],\"4525\":[null,6],\"4526\":[null,3],\"4527\":[2],\"4528\":[null,5],\"4529\":[null,4],\"4530\":[null,4],\"4531\":[null,8],\"4532\":[null,9],\"4533\":[3],\"4534\":[null,12],\"4535\":[2],\"4536\":[4],\"4537\":[null,4],\"4538\":[null,3],\"4539\":[null,6],\"4540\":[3],\"4541\":[null,4],\"4542\":[null,3],\"4543\":[null,8],\"4544\":[3],\"4545\":[2],\"4546\":[2],\"4547\":[null,3],\"4548\":[null,3],\"4549\":[2],\"4550\":[null,4],\"4551\":[2],\"4552\":[null,9],\"4553\":[null,30],\"4554\":[3],\"4555\":[null,1],\"4556\":[null,2],\"4557\":[null,2],\"4558\":[null,2],\"4559\":[null,1],\"4560\":[null,3],\"4561\":[3],\"4562\":[null,1],\"4563\":[null,1],\"4564\":[null,2],\"4565\":[null,3],\"4566\":[null,2],\"4567\":[null,4],\"4568\":[2],\"4569\":[null,4],\"4570\":[2],\"4571\":[null,3],\"4572\":[null,3],\"4573\":[null,1],\"4574\":[null,1],\"4575\":[null,9],\"4576\":[2],\"4577\":[null,15],\"4578\":[2],\"4579\":[null,11],\"4580\":[2],\"4581\":[null,4],\"4582\":[null,4],\"4583\":[2],\"4584\":[null,2],\"4585\":[null,11],\"4586\":[null,5],\"4587\":[null,5],\"4588\":[null,3],\"4589\":[2],\"4590\":[2],\"4591\":[null,3],\"4592\":[null,7],\"4593\":[null,7],\"4594\":[2],\"4595\":[null,11],\"4596\":[6],\"4597\":[null,4],\"4598\":[null,3],\"4599\":[null,3],\"4600\":[5],\"4601\":[null,3],\"4602\":[null,3],\"4603\":[null,3],\"4604\":[null,3],\"4605\":[null,3],\"4606\":[6],\"4607\":[null,3],\"4608\":[null,3],\"4609\":[2],\"4610\":[null,2],\"4611\":[null,2],\"4612\":[null,5],\"4613\":[null,7],\"4614\":[null,3],\"4615\":[null,2],\"4616\":[null,9],\"4617\":[null,6],\"4618\":[2],\"4619\":[null,4],\"4620\":[2],\"4621\":[null,3],\"4622\":[null,2],\"4623\":[null,2],\"4624\":[null,2],\"4625\":[null,2],\"4626\":[3],\"4627\":[null,1],\"4628\":[null,3],\"4629\":[2],\"4630\":[2],\"4631\":[null,3],\"4632\":[null,5],\"4633\":[null,5],\"4634\":[null,16],\"4635\":[null,8],\"4636\":[null,3],\"4637\":[2],\"4638\":[null,2],\"4639\":[6],\"4640\":[null,11],\"4641\":[6],\"4642\":[null,7],\"4643\":[7],\"4644\":[null,5],\"4645\":[null,5],\"4646\":[8],\"4647\":[null,7],\"4648\":[2],\"4649\":[null,7],\"4650\":[2],\"4651\":[2],\"4652\":[null,2],\"4653\":[null,6],\"4654\":[null,8],\"4655\":[2],\"4656\":[null,4],\"4657\":[null,4],\"4658\":[null,12],\"4659\":[2],\"4660\":[null,7],\"4661\":[null,11],\"4662\":[3],\"4663\":[2],\"4664\":[null,5],\"4665\":[2],\"4666\":[null,2],\"4667\":[3],\"4668\":[null,8],\"4669\":[null,4],\"4670\":[null,22],\"4671\":[3],\"4672\":[null,3],\"4673\":[null,5],\"4674\":[null,2],\"4675\":[2],\"4676\":[null,9],\"4677\":[null,5],\"4678\":[2],\"4679\":[null,3],\"4680\":[null,13],\"4681\":[null,5],\"4682\":[2],\"4683\":[null,13],\"4684\":[2],\"4685\":[null,7],\"4686\":[2],\"4687\":[null,9],\"4688\":[null,8],\"4689\":[2],\"4690\":[null,8],\"4691\":[null,12],\"4692\":[2],\"4693\":[null,2],\"4694\":[3],\"4695\":[2],\"4696\":[2],\"4697\":[null,7],\"4698\":[null,4],\"4699\":[null,23],\"4700\":[null,3],\"4701\":[2],\"4702\":[null,4],\"4703\":[null,4],\"4704\":[2],\"4705\":[null,7],\"4706\":[null,5],\"4707\":[2],\"4708\":[5],\"4709\":[null,14],\"4710\":[5],\"4711\":[4],\"4712\":[null,9],\"4713\":[4],\"4714\":[null,10],\"4715\":[5],\"4716\":[null,8],\"4717\":[5],\"4718\":[null,10],\"4719\":[5],\"4720\":[null,15],\"4721\":[5],\"4722\":[null,11],\"4723\":[4],\"4724\":[null,19],\"4725\":[3],\"4726\":[2],\"4727\":[null,16],\"4728\":[null,5],\"4729\":[null,5],\"4730\":[2],\"4731\":[null,12],\"4732\":[null,5],\"4733\":[3],\"4734\":[null,51],\"4735\":[3],\"4736\":[null,2],\"4737\":[null,6],\"4738\":[null,10],\"4739\":[2],\"4740\":[null,8],\"4741\":[null,2],\"4742\":[null,3],\"4743\":[null,7],\"4744\":[2],\"4745\":[null,10],\"4746\":[null,10],\"4747\":[4],\"4748\":[null,4],\"4749\":[null,4],\"4750\":[null,8],\"4751\":[null,22],\"4752\":[4],\"4753\":[null,42],\"4754\":[2],\"4755\":[null,4],\"4756\":[null,2],\"4757\":[2],\"4758\":[null,8],\"4759\":[null,4],\"4760\":[2],\"4761\":[null,5],\"4762\":[null,11],\"4763\":[null,5],\"4764\":[null,6],\"4765\":[3],\"4766\":[2],\"4767\":[null,8],\"4768\":[null,4],\"4769\":[2],\"4770\":[null,6],\"4771\":[null,14],\"4772\":[2],\"4773\":[null,7],\"4774\":[null,6],\"4775\":[null,3],\"4776\":[2],\"4777\":[null,50],\"4778\":[4],\"4779\":[null,5],\"4780\":[null,3],\"4781\":[2],\"4782\":[null,2],\"4783\":[null,6],\"4784\":[4],\"4785\":[null,7],\"4786\":[null,8],\"4787\":[2],\"4788\":[null,8],\"4789\":[2],\"4790\":[2],\"4791\":[null,1],\"4792\":[null,4],\"4793\":[2],\"4794\":[null,12],\"4795\":[null,4],\"4796\":[2],\"4797\":[null,4],\"4798\":[null,4],\"4799\":[null,5],\"4800\":[null,6],\"4801\":[2],\"4802\":[null,7],\"4803\":[null,41],\"4804\":[2],\"4805\":[2],\"4806\":[null,3],\"4807\":[null,2],\"4808\":[null,2],\"4809\":[null,4],\"4810\":[null,2],\"4811\":[null,4],\"4812\":[2],\"4813\":[null,15],\"4814\":[2],\"4815\":[null,6],\"4816\":[3],\"4817\":[2],\"4818\":[2],\"4819\":[null,7],\"4820\":[null,6],\"4821\":[null,6],\"4822\":[null,6],\"4823\":[null,17],\"4824\":[null,14],\"4825\":[null,6],\"4826\":[2],\"4827\":[null,8],\"4828\":[2],\"4829\":[null,3],\"4830\":[null,4],\"4831\":[2],\"4832\":[null,6],\"4833\":[null,4],\"4834\":[null,2],\"4835\":[null,3],\"4836\":[3],\"4837\":[null,2],\"4838\":[null,2],\"4839\":[null,5],\"4840\":[null,4],\"4841\":[3],\"4842\":[null,4],\"4843\":[null,45],\"4844\":[3],\"4845\":[null,13],\"4846\":[2],\"4847\":[2],\"4848\":[null,3],\"4849\":[null,3],\"4850\":[2],\"4851\":[null,5],\"4852\":[null,3],\"4853\":[null,8],\"4854\":[null,1],\"4855\":[2],\"4856\":[null,5],\"4857\":[null,5],\"4858\":[null,4],\"4859\":[null,4],\"4860\":[null,2],\"4861\":[2],\"4862\":[null,3],\"4863\":[null,4],\"4864\":[null,10],\"4865\":[null,2],\"4866\":[2],\"4867\":[null,6],\"4868\":[null,6],\"4869\":[2],\"4870\":[4],\"4871\":[null,3],\"4872\":[null,55],\"4873\":[4],\"4874\":[null,20],\"4875\":[3],\"4876\":[2],\"4877\":[2],\"4878\":[null,10],\"4879\":[2],\"4880\":[null,6],\"4881\":[null,4],\"4882\":[null,3],\"4883\":[null,10],\"4884\":[3],\"4885\":[null,5],\"4886\":[null,3],\"4887\":[null,16],\"4888\":[2],\"4889\":[null,8],\"4890\":[null,4],\"4891\":[null,2],\"4892\":[null,3],\"4893\":[null,5],\"4894\":[null,4],\"4895\":[null,5],\"4896\":[null,2],\"4897\":[null,6],\"4898\":[2],\"4899\":[null,2],\"4900\":[null,2],\"4901\":[null,3],\"4902\":[null,5],\"4903\":[null,4],\"4904\":[null,6],\"4905\":[null,6],\"4906\":[null,2],\"4907\":[null,6],\"4908\":[null,3],\"4909\":[null,5],\"4910\":[null,5],\"4911\":[null,6],\"4912\":[null,2],\"4913\":[null,4],\"4914\":[2],\"4915\":[2],\"4916\":[null,10],\"4917\":[2],\"4918\":[null,13],\"4919\":[2],\"4920\":[4],\"4921\":[null,2],\"4922\":[null,8],\"4923\":[null,11],\"4924\":[3],\"4925\":[null,3],\"4926\":[3],\"4927\":[null,6],\"4928\":[null,4],\"4929\":[3],\"4930\":[null,2],\"4931\":[null,2],\"4932\":[null,2],\"4933\":[null,3],\"4934\":[2],\"4935\":[null,3],\"4936\":[null,6],\"4937\":[null,5],\"4938\":[null,4],\"4939\":[2],\"4940\":[null,5],\"4941\":[null,8],\"4942\":[null,3],\"4943\":[null,12],\"4944\":[2],\"4945\":[2],\"4946\":[null,3],\"4947\":[null,7],\"4948\":[null,4],\"4949\":[null,8],\"4950\":[null,9],\"4951\":[null,9],\"4952\":[null,12],\"4953\":[2],\"4954\":[4],\"4955\":[null,11],\"4956\":[null,14],\"4957\":[null,21],\"4958\":[3],\"4959\":[null,8],\"4960\":[null,21],\"4961\":[null,29],\"4962\":[4],\"4963\":[null,17],\"4964\":[null,7],\"4965\":[null,9],\"4966\":[null,9],\"4967\":[null,8],\"4968\":[null,18],\"4969\":[2],\"4970\":[2],\"4971\":[null,9],\"4972\":[null,5],\"4973\":[null,5],\"4974\":[null,3],\"4975\":[null,5],\"4976\":[2],\"4977\":[null,8],\"4978\":[null,9],\"4979\":[null,7],\"4980\":[3],\"4981\":[null,7],\"4982\":[4],\"4983\":[null,5],\"4984\":[null,10],\"4985\":[null,10],\"4986\":[2],\"4987\":[null,9],\"4988\":[null,9],\"4989\":[null,13],\"4990\":[3],\"4991\":[null,6],\"4992\":[null,4],\"4993\":[null,4],\"4994\":[null,4],\"4995\":[null,4],\"4996\":[null,5],\"4997\":[3],\"4998\":[null,4],\"4999\":[4],\"5000\":[null,8],\"5001\":[null,8],\"5002\":[null,1],\"5003\":[4],\"5004\":[null,5],\"5005\":[null,9],\"5006\":[null,4],\"5007\":[2],\"5008\":[null,8],\"5009\":[2],\"5010\":[null,3],\"5011\":[null,7],\"5012\":[2],\"5013\":[null,8],\"5014\":[null,2],\"5015\":[null,13],\"5016\":[3],\"5017\":[null,3],\"5018\":[null,3],\"5019\":[null,5],\"5020\":[null,2],\"5021\":[null,3],\"5022\":[null,5],\"5023\":[2],\"5024\":[null,5],\"5025\":[null,2],\"5026\":[null,2],\"5027\":[null,7],\"5028\":[4],\"5029\":[null,4],\"5030\":[null,14],\"5031\":[3],\"5032\":[null,2],\"5033\":[null,10],\"5034\":[2],\"5035\":[2],\"5036\":[null,10],\"5037\":[null,8],\"5038\":[4],\"5039\":[null,4],\"5040\":[null,12],\"5041\":[2],\"5042\":[null,6],\"5043\":[null,17],\"5044\":[5],\"5045\":[null,3],\"5046\":[3],\"5047\":[null,7],\"5048\":[null,5],\"5049\":[2],\"5050\":[null,2],\"5051\":[null,6],\"5052\":[null,7],\"5053\":[null,4],\"5054\":[null,5],\"5055\":[null,4],\"5056\":[null,3],\"5057\":[2],\"5058\":[null,11],\"5059\":[2],\"5060\":[null,102],\"5061\":[3],\"5062\":[2],\"5063\":[3],\"5064\":[null,7],\"5065\":[null,1],\"5066\":[null,8],\"5067\":[null,7],\"5068\":[3],\"5069\":[null,9],\"5070\":[null,3],\"5071\":[null,2],\"5072\":[null,4],\"5073\":[3],\"5074\":[null,9],\"5075\":[2],\"5076\":[null,1],\"5077\":[3],\"5078\":[null,6],\"5079\":[null,5],\"5080\":[null,8],\"5081\":[null,4],\"5082\":[2],\"5083\":[null,6],\"5084\":[null,2],\"5085\":[null,7],\"5086\":[null,5],\"5087\":[null,3],\"5088\":[null,2],\"5089\":[2],\"5090\":[null,8],\"5091\":[null,4],\"5092\":[null,11],\"5093\":[2],\"5094\":[null,5],\"5095\":[null,8],\"5096\":[2],\"5097\":[1],\"5098\":[null,7],\"5099\":[null,12],\"5100\":[2],\"5101\":[null,4],\"5102\":[null,1],\"5103\":[null,3],\"5104\":[null,4],\"5105\":[2],\"5106\":[null,2],\"5107\":[null,2],\"5108\":[null,14],\"5109\":[null,3],\"5110\":[3],\"5111\":[2],\"5112\":[null,5],\"5113\":[null,4],\"5114\":[2],\"5115\":[3],\"5116\":[null,6],\"5117\":[2],\"5118\":[null,6],\"5119\":[3],\"5120\":[null,4],\"5121\":[null,4],\"5122\":[3],\"5123\":[null,3],\"5124\":[null,3],\"5125\":[2],\"5126\":[null,6],\"5127\":[4],\"5128\":[null,4],\"5129\":[null,14],\"5130\":[4],\"5131\":[null,3],\"5132\":[null,6],\"5133\":[2],\"5134\":[null,9],\"5135\":[2],\"5136\":[null,5],\"5137\":[null,4],\"5138\":[3],\"5139\":[2],\"5140\":[2],\"5141\":[null,4],\"5142\":[2],\"5143\":[null,3],\"5144\":[null,1],\"5145\":[null,1],\"5146\":[null,3],\"5147\":[null,1],\"5148\":[null,3],\"5149\":[2],\"5150\":[null,5],\"5151\":[null,3],\"5152\":[null,7],\"5153\":[null,2],\"5154\":[null,3],\"5155\":[2],\"5156\":[null,3],\"5157\":[1],\"5158\":[null,4],\"5159\":[null,4],\"5160\":[null,4],\"5161\":[2],\"5162\":[3],\"5163\":[null,3],\"5164\":[null,2],\"5165\":[3],\"5166\":[null,3],\"5167\":[null,2],\"5168\":[null,4],\"5169\":[null,5],\"5170\":[null,6],\"5171\":[4],\"5172\":[null,3],\"5173\":[null,4],\"5174\":[4],\"5175\":[null,5],\"5176\":[null,5],\"5177\":[2],\"5178\":[null,3],\"5179\":[null,1],\"5180\":[null,4],\"5181\":[null,2],\"5182\":[null,3],\"5183\":[2],\"5184\":[null,4],\"5185\":[null,53],\"5186\":[3],\"5187\":[null,5],\"5188\":[null,3],\"5189\":[null,5],\"5190\":[3],\"5191\":[null,6],\"5192\":[null,4],\"5193\":[null,2],\"5194\":[2],\"5195\":[3],\"5196\":[null,6],\"5197\":[null,6],\"5198\":[3],\"5199\":[null,4],\"5200\":[null,3],\"5201\":[null,4],\"5202\":[2],\"5203\":[1],\"5204\":[null,1],\"5205\":[null,4],\"5206\":[null,4],\"5207\":[null,5],\"5208\":[null,2],\"5209\":[null,4],\"5210\":[null,4],\"5211\":[null,3],\"5212\":[null,6],\"5213\":[null,10],\"5214\":[null,2],\"5215\":[null,5],\"5216\":[2],\"5217\":[null,6],\"5218\":[null,8],\"5219\":[null,37],\"5220\":[2],\"5221\":[null,55],\"5222\":[null,3],\"5223\":[null,6],\"5224\":[null,3],\"5225\":[null,7],\"5226\":[null,3],\"5227\":[null,5],\"5228\":[null,6],\"5229\":[null,3],\"5230\":[null,5],\"5231\":[null,4],\"5232\":[2],\"5233\":[2],\"5234\":[2],\"5235\":[null,3],\"5236\":[3],\"5237\":[null,1],\"5238\":[2],\"5239\":[null,5],\"5240\":[2],\"5241\":[null,2],\"5242\":[null,3],\"5243\":[null,3],\"5244\":[null,4],\"5245\":[null,6],\"5246\":[null,4],\"5247\":[null,6],\"5248\":[2],\"5249\":[null,1],\"5250\":[null,2],\"5251\":[2],\"5252\":[null,4],\"5253\":[null,42],\"5254\":[2],\"5255\":[null,2],\"5256\":[2],\"5257\":[null,1],\"5258\":[null,3],\"5259\":[null,1],\"5260\":[null,2],\"5261\":[null,3],\"5262\":[2],\"5263\":[null,52],\"5264\":[null,4],\"5265\":[null,4],\"5266\":[2],\"5267\":[null,6],\"5268\":[null,16],\"5269\":[2],\"5270\":[null,7],\"5271\":[3],\"5272\":[null,8],\"5273\":[3],\"5274\":[3],\"5275\":[null,5],\"5276\":[null,1],\"5277\":[null,2],\"5278\":[3],\"5279\":[null,3],\"5280\":[null,3],\"5281\":[2],\"5282\":[null,5],\"5283\":[null,8],\"5284\":[3],\"5285\":[null,3],\"5286\":[2],\"5287\":[null,4],\"5288\":[null,3],\"5289\":[null,6],\"5290\":[null,5],\"5291\":[null,7],\"5292\":[null,2],\"5293\":[2],\"5294\":[null,3],\"5295\":[3],\"5296\":[2],\"5297\":[2],\"5298\":[null,7],\"5299\":[3],\"5300\":[null,15],\"5301\":[3],\"5302\":[null,4],\"5303\":[null,8],\"5304\":[null,6],\"5305\":[null,3],\"5306\":[null,7],\"5307\":[2],\"5308\":[null,8],\"5309\":[2],\"5310\":[null,44],\"5311\":[2],\"5312\":[null,2],\"5313\":[2],\"5314\":[null,8],\"5315\":[null,5],\"5316\":[null,3],\"5317\":[null,2],\"5318\":[null,5],\"5319\":[null,3],\"5320\":[null,8],\"5321\":[2],\"5322\":[null,44],\"5323\":[3],\"5324\":[null,3],\"5325\":[2],\"5326\":[null,4],\"5327\":[null,11],\"5328\":[2],\"5329\":[null,5],\"5330\":[null,2],\"5331\":[null,7],\"5332\":[null,13],\"5333\":[2],\"5334\":[2],\"5335\":[null,3],\"5336\":[null,3],\"5337\":[null,4],\"5338\":[null,5],\"5339\":[3],\"5340\":[null,2],\"5341\":[4],\"5342\":[null,7],\"5343\":[null,5],\"5344\":[2],\"5345\":[null,53],\"5346\":[2],\"5347\":[null,2],\"5348\":[null,8],\"5349\":[null,3],\"5350\":[null,30],\"5351\":[3],\"5352\":[null,13],\"5353\":[null,9],\"5354\":[2],\"5355\":[null,10],\"5356\":[null,3],\"5357\":[3],\"5358\":[null,10],\"5359\":[null,9],\"5360\":[3],\"5361\":[null,3],\"5362\":[null,5],\"5363\":[null,6],\"5364\":[3],\"5365\":[null,3],\"5366\":[null,5],\"5367\":[null,4],\"5368\":[null,5],\"5369\":[2],\"5370\":[null,6],\"5371\":[null,6],\"5372\":[null,4],\"5373\":[2],\"5374\":[null,9],\"5375\":[2],\"5376\":[null,1],\"5377\":[2],\"5378\":[null,7],\"5379\":[null,9],\"5380\":[2],\"5381\":[null,6],\"5382\":[2],\"5383\":[null,9],\"5384\":[null,17],\"5385\":[3],\"5386\":[null,3],\"5387\":[null,3],\"5388\":[null,2],\"5389\":[null,5],\"5390\":[3],\"5391\":[null,2],\"5392\":[2],\"5393\":[null,4],\"5394\":[null,3],\"5395\":[2],\"5396\":[null,51],\"5397\":[2],\"5398\":[null,2],\"5399\":[null,2],\"5400\":[null,5],\"5401\":[null,2],\"5402\":[2],\"5403\":[null,6],\"5404\":[2],\"5405\":[null,5],\"5406\":[2],\"5407\":[null,4],\"5408\":[null,6],\"5409\":[2],\"5410\":[null,3],\"5411\":[null,2],\"5412\":[null,1],\"5413\":[null,5],\"5414\":[null,1],\"5415\":[2],\"5416\":[null,13],\"5417\":[2],\"5418\":[3],\"5419\":[null,5],\"5420\":[3],\"5421\":[null,4],\"5422\":[null,9],\"5423\":[3],\"5424\":[null,9],\"5425\":[3],\"5426\":[null,39],\"5427\":[3],\"5428\":[null,5],\"5429\":[null,5],\"5430\":[null,6],\"5431\":[3],\"5432\":[null,6],\"5433\":[3],\"5434\":[null,2],\"5435\":[null,7],\"5436\":[2],\"5437\":[null,7],\"5438\":[null,5],\"5439\":[null,8],\"5440\":[null,6],\"5441\":[null,4],\"5442\":[3],\"5443\":[null,4],\"5444\":[null,8],\"5445\":[null,4],\"5446\":[null,2],\"5447\":[null,4],\"5448\":[4],\"5449\":[null,4],\"5450\":[null,4],\"5451\":[null,4],\"5452\":[2],\"5453\":[null,5],\"5454\":[null,6],\"5455\":[null,7],\"5456\":[4],\"5457\":[null,4],\"5458\":[null,2],\"5459\":[null,4],\"5460\":[null,5],\"5461\":[null,7],\"5462\":[2],\"5463\":[null,6],\"5464\":[null,51],\"5465\":[3],\"5466\":[2],\"5467\":[null,4],\"5468\":[2],\"5469\":[null,7],\"5470\":[null,3],\"5471\":[null,2],\"5472\":[null,1],\"5473\":[2],\"5474\":[null,5],\"5475\":[null,1],\"5476\":[null,5],\"5477\":[null,5],\"5478\":[2],\"5479\":[null,1],\"5480\":[null,3],\"5481\":[null,1],\"5482\":[null,2],\"5483\":[null,4],\"5484\":[null,5],\"5485\":[2],\"5486\":[null,69],\"5487\":[2],\"5488\":[2],\"5489\":[null,3],\"5490\":[null,6],\"5491\":[null,9],\"5492\":[2],\"5493\":[null,3],\"5494\":[null,4],\"5495\":[null,2],\"5496\":[null,2],\"5497\":[null,2],\"5498\":[null,2],\"5499\":[null,1],\"5500\":[3],\"5501\":[null,1],\"5502\":[null,8],\"5503\":[null,8],\"5504\":[null,3],\"5505\":[4],\"5506\":[null,1],\"5507\":[null,3],\"5508\":[null,4],\"5509\":[null,3],\"5510\":[null,6],\"5511\":[2],\"5512\":[null,2],\"5513\":[null,3],\"5514\":[null,3],\"5515\":[null,1],\"5516\":[2],\"5517\":[null,51],\"5518\":[3],\"5519\":[2],\"5520\":[2],\"5521\":[null,9],\"5522\":[null,8],\"5523\":[2],\"5524\":[null,3],\"5525\":[null,4],\"5526\":[null,8],\"5527\":[2],\"5528\":[null,3],\"5529\":[null,7],\"5530\":[null,2],\"5531\":[null,7],\"5532\":[2],\"5533\":[null,1],\"5534\":[null,7],\"5535\":[null,3],\"5536\":[null,4],\"5537\":[2],\"5538\":[null,5],\"5539\":[null,5],\"5540\":[2],\"5541\":[2],\"5542\":[null,6],\"5543\":[null,5],\"5544\":[null,7],\"5545\":[null,3],\"5546\":[null,6],\"5547\":[null,3],\"5548\":[null,12],\"5549\":[null,5],\"5550\":[2],\"5551\":[null,2],\"5552\":[2],\"5553\":[null,3],\"5554\":[3],\"5555\":[1],\"5556\":[null,11],\"5557\":[null,6],\"5558\":[null,10],\"5559\":[null,5],\"5560\":[1],\"5561\":[null,4],\"5562\":[null,11],\"5563\":[1],\"5564\":[null,2],\"5565\":[3],\"5566\":[3],\"5567\":[null,3],\"5568\":[2],\"5569\":[null,10],\"5570\":[null,6],\"5571\":[2],\"5572\":[null,8],\"5573\":[null,5],\"5574\":[null,3],\"5575\":[2],\"5576\":[null,6],\"5577\":[null,4],\"5578\":[2],\"5579\":[null,2],\"5580\":[5],\"5581\":[null,7],\"5582\":[4],\"5583\":[null,6],\"5584\":[null,8],\"5585\":[4],\"5586\":[null,2],\"5587\":[2],\"5588\":[null,21],\"5589\":[6],\"5590\":[null,14],\"5591\":[6],\"5592\":[null,12],\"5593\":[5],\"5594\":[null,9],\"5595\":[null,8],\"5596\":[2],\"5597\":[null,3],\"5598\":[2],\"5599\":[null,3],\"5600\":[null,5],\"5601\":[3],\"5602\":[null,4],\"5603\":[null,9],\"5604\":[null,12],\"5605\":[4],\"5606\":[2],\"5607\":[null,8],\"5608\":[null,4],\"5609\":[3],\"5610\":[null,5],\"5611\":[null,21],\"5612\":[3],\"5613\":[null,5],\"5614\":[null,19],\"5615\":[3],\"5616\":[null,4],\"5617\":[3],\"5618\":[null,18],\"5619\":[3],\"5620\":[null,19],\"5621\":[3],\"5622\":[3],\"5623\":[2],\"5624\":[null,3],\"5625\":[null,3],\"5626\":[null,4],\"5627\":[null,3],\"5628\":[2],\"5629\":[null,2],\"5630\":[null,5],\"5631\":[null,7],\"5632\":[null,3],\"5633\":[5],\"5634\":[null,2],\"5635\":[null,3],\"5636\":[null,2],\"5637\":[2],\"5638\":[null,4],\"5639\":[null,2],\"5640\":[3],\"5641\":[null,2],\"5642\":[null,3],\"5643\":[null,2],\"5644\":[2],\"5645\":[2],\"5646\":[2],\"5647\":[null,2],\"5648\":[null,5],\"5649\":[3],\"5650\":[null,10],\"5651\":[3],\"5652\":[null,7],\"5653\":[null,6],\"5654\":[3],\"5655\":[null,4],\"5656\":[null,8],\"5657\":[4],\"5658\":[null,3],\"5659\":[null,10],\"5660\":[null,10],\"5661\":[3],\"5662\":[null,5],\"5663\":[2],\"5664\":[null,5],\"5665\":[3],\"5666\":[null,6],\"5667\":[null,5],\"5668\":[2],\"5669\":[null,6],\"5670\":[3],\"5671\":[null,1],\"5672\":[null,13],\"5673\":[2],\"5674\":[3],\"5675\":[null,3],\"5676\":[null,6],\"5677\":[3],\"5678\":[null,6],\"5679\":[2],\"5680\":[null,5],\"5681\":[null,3],\"5682\":[3],\"5683\":[3],\"5684\":[2],\"5685\":[null,7],\"5686\":[null,4],\"5687\":[null,6],\"5688\":[null,3],\"5689\":[null,1],\"5690\":[null,1],\"5691\":[2],\"5692\":[null,4],\"5693\":[null,5],\"5694\":[null,7],\"5695\":[4],\"5696\":[null,7],\"5697\":[null,2],\"5698\":[null,8],\"5699\":[null,3],\"5700\":[3],\"5701\":[null,1],\"5702\":[null,2],\"5703\":[null,2],\"5704\":[4],\"5705\":[null,7],\"5706\":[null,10],\"5707\":[4],\"5708\":[null,2],\"5709\":[null,2],\"5710\":[null,6],\"5711\":[null,7],\"5712\":[2],\"5713\":[null,4],\"5714\":[null,6],\"5715\":[null,2],\"5716\":[null,3],\"5717\":[null,3],\"5718\":[null,11],\"5719\":[null,6],\"5720\":[2],\"5721\":[null,3],\"5722\":[null,2],\"5723\":[3],\"5724\":[null,5],\"5725\":[null,7],\"5726\":[3],\"5727\":[null,6],\"5728\":[null,6],\"5729\":[null,9],\"5730\":[null,4],\"5731\":[3],\"5732\":[null,8],\"5733\":[null,2],\"5734\":[null,3],\"5735\":[null,4],\"5736\":[null,3],\"5737\":[null,3],\"5738\":[null,2],\"5739\":[null,3],\"5740\":[3],\"5741\":[null,2],\"5742\":[null,8],\"5743\":[4],\"5744\":[null,5],\"5745\":[null,4],\"5746\":[null,3],\"5747\":[2],\"5748\":[null,10],\"5749\":[3],\"5750\":[null,10],\"5751\":[null,5],\"5752\":[3],\"5753\":[null,3],\"5754\":[3],\"5755\":[null,8],\"5756\":[null,3],\"5757\":[null,4],\"5758\":[null,9],\"5759\":[3],\"5760\":[null,6],\"5761\":[null,5],\"5762\":[3],\"5763\":[null,5],\"5764\":[null,16],\"5765\":[null,5],\"5766\":[3],\"5767\":[null,4],\"5768\":[null,3],\"5769\":[3],\"5770\":[null,3],\"5771\":[null,3],\"5772\":[2],\"5773\":[null,3],\"5774\":[null,3],\"5775\":[null,8],\"5776\":[null,6],\"5777\":[null,7],\"5778\":[null,2],\"5779\":[null,26],\"5780\":[null,2],\"5781\":[2],\"5782\":[null,8],\"5783\":[null,5],\"5784\":[null,2],\"5785\":[3],\"5786\":[null,4],\"5787\":[null,4],\"5788\":[null,4],\"5789\":[3],\"5790\":[null,42],\"5791\":[4],\"5792\":[null,3],\"5793\":[null,4],\"5794\":[null,29],\"5795\":[2],\"5796\":[3],\"5797\":[2],\"5798\":[null,5],\"5799\":[null,6],\"5800\":[null,11],\"5801\":[null,3],\"5802\":[null,7],\"5803\":[null,5],\"5804\":[null,5],\"5805\":[2],\"5806\":[null,10],\"5807\":[null,3],\"5808\":[null,3],\"5809\":[null,3],\"5810\":[null,3],\"5811\":[null,3],\"5812\":[2],\"5813\":[5],\"5814\":[null,7],\"5815\":[null,3],\"5816\":[null,4],\"5817\":[null,8],\"5818\":[null,12],\"5819\":[null,7],\"5820\":[null,10],\"5821\":[null,5],\"5822\":[null,4],\"5823\":[3],\"5824\":[null,2],\"5825\":[null,4],\"5826\":[null,3],\"5827\":[null,4],\"5828\":[null,4],\"5829\":[2],\"5830\":[null,2],\"5831\":[null,9],\"5832\":[null,1],\"5833\":[null,6],\"5834\":[null,7],\"5835\":[3],\"5836\":[null,4],\"5837\":[null,4],\"5838\":[3],\"5839\":[null,3],\"5840\":[null,7],\"5841\":[null,7],\"5842\":[2],\"5843\":[null,3],\"5844\":[3],\"5845\":[null,1],\"5846\":[null,5],\"5847\":[null,4],\"5848\":[null,5],\"5849\":[null,3],\"5850\":[null,5],\"5851\":[null,4],\"5852\":[2],\"5853\":[2],\"5854\":[2],\"5855\":[null,4],\"5856\":[null,7],\"5857\":[3],\"5858\":[null,10],\"5859\":[null,5],\"5860\":[null,5],\"5861\":[null,5],\"5862\":[null,9],\"5863\":[null,7],\"5864\":[null,6],\"5865\":[3],\"5866\":[null,5],\"5867\":[3],\"5868\":[null,10],\"5869\":[3],\"5870\":[null,4],\"5871\":[null,2],\"5872\":[null,3],\"5873\":[null,2],\"5874\":[2],\"5875\":[null,2],\"5876\":[null,3],\"5877\":[null,3],\"5878\":[null,5],\"5879\":[null,5],\"5880\":[null,7],\"5881\":[null,8],\"5882\":[2],\"5883\":[null,2],\"5884\":[2],\"5885\":[null,5],\"5886\":[null,4],\"5887\":[null,4],\"5888\":[null,7],\"5889\":[null,11],\"5890\":[null,3],\"5891\":[null,2],\"5892\":[null,2],\"5893\":[null,3],\"5894\":[null,4],\"5895\":[null,2],\"5896\":[2],\"5897\":[2],\"5898\":[null,3],\"5899\":[null,5],\"5900\":[2],\"5901\":[null,19],\"5902\":[2],\"5903\":[2],\"5904\":[null,9],\"5905\":[null,7],\"5906\":[null,2],\"5907\":[null,7],\"5908\":[2],\"5909\":[null,6],\"5910\":[null,4],\"5911\":[3],\"5912\":[null,3],\"5913\":[null,46],\"5914\":[2],\"5915\":[null,4],\"5916\":[null,25],\"5917\":[2],\"5918\":[null,2],\"5919\":[2],\"5920\":[null,7],\"5921\":[null,3],\"5922\":[2],\"5923\":[null,4],\"5924\":[null,5],\"5925\":[3],\"5926\":[null,2],\"5927\":[null,29],\"5928\":[3],\"5929\":[null,1],\"5930\":[null,3],\"5931\":[null,2],\"5932\":[1],\"5933\":[null,7],\"5934\":[null,2],\"5935\":[1],\"5936\":[null,6],\"5937\":[3],\"5938\":[3],\"5939\":[1],\"5940\":[null,15],\"5941\":[null,5],\"5942\":[null,2],\"5943\":[2],\"5944\":[null,13],\"5945\":[2],\"5946\":[null,12],\"5947\":[null,12],\"5948\":[null,9],\"5949\":[2],\"5950\":[null,4],\"5951\":[3],\"5952\":[null,5],\"5953\":[3],\"5954\":[null,5],\"5955\":[null,7],\"5956\":[2],\"5957\":[null,3],\"5958\":[3],\"5959\":[null,2],\"5960\":[3],\"5961\":[null,3],\"5962\":[2],\"5963\":[null,4],\"5964\":[null,32],\"5965\":[2],\"5966\":[3],\"5967\":[null,41],\"5968\":[3],\"5969\":[null,5],\"5970\":[null,54],\"5971\":[2],\"5972\":[null,2],\"5973\":[null,4],\"5974\":[null,4],\"5975\":[null,2],\"5976\":[null,3],\"5977\":[null,10],\"5978\":[null,2],\"5979\":[null,2],\"5980\":[null,4],\"5981\":[null,3],\"5982\":[null,2],\"5983\":[null,6],\"5984\":[3],\"5985\":[2],\"5986\":[2],\"5987\":[null,5],\"5988\":[2],\"5989\":[null,6],\"5990\":[null,6],\"5991\":[3],\"5992\":[null,3],\"5993\":[null,5],\"5994\":[null,9],\"5995\":[3],\"5996\":[null,6],\"5997\":[3],\"5998\":[3],\"5999\":[null,22],\"6000\":[2],\"6001\":[null,27],\"6002\":[4],\"6003\":[null,3],\"6004\":[null,2],\"6005\":[null,12],\"6006\":[null,6],\"6007\":[null,5],\"6008\":[null,3],\"6009\":[null,9],\"6010\":[null,3],\"6011\":[null,4],\"6012\":[null,7],\"6013\":[null,7],\"6014\":[2],\"6015\":[null,2],\"6016\":[null,4],\"6017\":[4],\"6018\":[null,1],\"6019\":[null,13],\"6020\":[4],\"6021\":[null,1],\"6022\":[null,9],\"6023\":[4],\"6024\":[null,1],\"6025\":[null,12],\"6026\":[3],\"6027\":[null,1],\"6028\":[null,11],\"6029\":[2],\"6030\":[2],\"6031\":[null,6],\"6032\":[null,3],\"6033\":[1],\"6034\":[null,3],\"6035\":[null,1],\"6036\":[2],\"6037\":[null,7],\"6038\":[2],\"6039\":[null,4],\"6040\":[2],\"6041\":[null,8],\"6042\":[null,7],\"6043\":[2],\"6044\":[null,1],\"6045\":[null,16],\"6046\":[2],\"6047\":[null,8],\"6048\":[null,3],\"6049\":[null,4],\"6050\":[3],\"6051\":[2],\"6052\":[4],\"6053\":[null,6],\"6054\":[null,12],\"6055\":[3],\"6056\":[null,6],\"6057\":[null,9],\"6058\":[2],\"6059\":[null,6],\"6060\":[2],\"6061\":[2],\"6062\":[null,5],\"6063\":[null,3],\"6064\":[null,5],\"6065\":[2],\"6066\":[3],\"6067\":[null,15],\"6068\":[2],\"6069\":[null,4],\"6070\":[null,8],\"6071\":[3],\"6072\":[null,4],\"6073\":[null,23],\"6074\":[2],\"6075\":[null,4],\"6076\":[3],\"6077\":[null,10],\"6078\":[null,38],\"6079\":[3],\"6080\":[null,9],\"6081\":[null,35],\"6082\":[2],\"6083\":[null,8],\"6084\":[null,4],\"6085\":[2],\"6086\":[null,1],\"6087\":[4],\"6088\":[null,3],\"6089\":[null,7],\"6090\":[4],\"6091\":[null,3],\"6092\":[null,6],\"6093\":[3],\"6094\":[null,35],\"6095\":[2],\"6096\":[null,2],\"6097\":[3],\"6098\":[null,13],\"6099\":[3],\"6100\":[null,7],\"6101\":[3],\"6102\":[null,10],\"6103\":[3],\"6104\":[3],\"6105\":[2],\"6106\":[null,9],\"6107\":[null,2],\"6108\":[null,2],\"6109\":[null,2],\"6110\":[null,2],\"6111\":[2],\"6112\":[null,7],\"6113\":[null,5],\"6114\":[2],\"6115\":[null,5],\"6116\":[null,4],\"6117\":[null,2],\"6118\":[2],\"6119\":[null,2],\"6120\":[3],\"6121\":[null,2],\"6122\":[null,6],\"6123\":[3],\"6124\":[null,7],\"6125\":[null,2],\"6126\":[3],\"6127\":[7],\"6128\":[null,4],\"6129\":[null,4],\"6130\":[null,4],\"6131\":[null,4],\"6132\":[null,22],\"6133\":[8],\"6134\":[null,2],\"6135\":[null,2],\"6136\":[null,16],\"6137\":[8],\"6138\":[null,2],\"6139\":[null,2],\"6140\":[2],\"6141\":[null,3],\"6142\":[null,2],\"6143\":[null,3],\"6144\":[null,3],\"6145\":[null,2],\"6146\":[3],\"6147\":[null,2],\"6148\":[3],\"6149\":[2],\"6150\":[null,10],\"6151\":[null,7],\"6152\":[null,9],\"6153\":[3],\"6154\":[null,9],\"6155\":[null,7],\"6156\":[2],\"6157\":[null,3],\"6158\":[null,3],\"6159\":[null,3],\"6160\":[null,4],\"6161\":[null,2],\"6162\":[null,1],\"6163\":[null,1],\"6164\":[null,2],\"6165\":[null,3],\"6166\":[null,10],\"6167\":[2],\"6168\":[null,4],\"6169\":[null,2],\"6170\":[null,2],\"6171\":[2],\"6172\":[null,2],\"6173\":[null,3],\"6174\":[null,2],\"6175\":[null,2],\"6176\":[null,2],\"6177\":[null,2],\"6178\":[null,3],\"6179\":[2],\"6180\":[3],\"6181\":[null,1],\"6182\":[null,3],\"6183\":[3],\"6184\":[null,8],\"6185\":[null,3],\"6186\":[3],\"6187\":[1],\"6188\":[null,1],\"6189\":[null,3],\"6190\":[4],\"6191\":[null,5],\"6192\":[2],\"6193\":[null,2],\"6194\":[null,4],\"6195\":[3],\"6196\":[null,2],\"6197\":[null,3],\"6198\":[4],\"6199\":[3],\"6200\":[null,2],\"6201\":[null,4],\"6202\":[2],\"6203\":[null,2],\"6204\":[null,3],\"6205\":[2],\"6206\":[null,8],\"6207\":[2],\"6208\":[null,3],\"6209\":[null,3],\"6210\":[null,6],\"6211\":[2],\"6212\":[null,4],\"6213\":[null,4],\"6214\":[2],\"6215\":[null,1],\"6216\":[null,4],\"6217\":[null,4],\"6218\":[null,3],\"6219\":[2],\"6220\":[null,2],\"6221\":[3],\"6222\":[2],\"6223\":[null,6],\"6224\":[2],\"6225\":[null,2],\"6226\":[null,2],\"6227\":[2],\"6228\":[null,5],\"6229\":[null,5],\"6230\":[null,6],\"6231\":[null,4],\"6232\":[null,9],\"6233\":[null,12],\"6234\":[2],\"6235\":[null,2],\"6236\":[2],\"6237\":[3],\"6238\":[null,4],\"6239\":[null,17],\"6240\":[4],\"6241\":[null,7],\"6242\":[null,4],\"6243\":[null,6],\"6244\":[4],\"6245\":[null,4],\"6246\":[null,3],\"6247\":[2],\"6248\":[null,4],\"6249\":[null,4],\"6250\":[3],\"6251\":[null,44],\"6252\":[2],\"6253\":[null,5],\"6254\":[null,38],\"6255\":[3],\"6256\":[null,5],\"6257\":[null,3],\"6258\":[3],\"6259\":[null,2],\"6260\":[null,12],\"6261\":[3],\"6262\":[null,12],\"6263\":[null,6],\"6264\":[null,16],\"6265\":[2],\"6266\":[null,2],\"6267\":[1],\"6268\":[null,6],\"6269\":[3],\"6270\":[3],\"6271\":[null,3],\"6272\":[null,3],\"6273\":[null,5],\"6274\":[null,2],\"6275\":[null,15],\"6276\":[4],\"6277\":[null,5],\"6278\":[null,6],\"6279\":[4],\"6280\":[null,3],\"6281\":[null,3],\"6282\":[2],\"6283\":[null,3],\"6284\":[2],\"6285\":[null,43],\"6286\":[3],\"6287\":[null,46],\"6288\":[2],\"6289\":[null,4],\"6290\":[2],\"6291\":[null,2],\"6292\":[null,2],\"6293\":[1],\"6294\":[null,4],\"6295\":[null,2],\"6296\":[2],\"6297\":[null,19],\"6298\":[2],\"6299\":[null,1],\"6300\":[null,4],\"6301\":[null,4],\"6302\":[null,4],\"6303\":[null,2],\"6304\":[4],\"6305\":[null,2],\"6306\":[null,45],\"6307\":[3],\"6308\":[2],\"6309\":[null,6],\"6310\":[null,4],\"6311\":[1],\"6312\":[null,4],\"6313\":[null,3],\"6314\":[null,3],\"6315\":[null,7],\"6316\":[null,5],\"6317\":[null,2],\"6318\":[null,4],\"6319\":[null,3],\"6320\":[null,5],\"6321\":[2],\"6322\":[null,5],\"6323\":[3],\"6324\":[null,2],\"6325\":[null,29],\"6326\":[3],\"6327\":[null,2],\"6328\":[null,26],\"6329\":[3],\"6330\":[null,2],\"6331\":[null,30],\"6332\":[3],\"6333\":[null,2],\"6334\":[null,40],\"6335\":[2],\"6336\":[2],\"6337\":[null,3],\"6338\":[null,3],\"6339\":[null,7],\"6340\":[null,8],\"6341\":[null,3],\"6342\":[5],\"6343\":[null,3],\"6344\":[null,10],\"6345\":[null,4],\"6346\":[null,8],\"6347\":[null,6],\"6348\":[null,26],\"6349\":[5],\"6350\":[null,6],\"6351\":[4],\"6352\":[null,3],\"6353\":[null,55],\"6354\":[4],\"6355\":[null,3],\"6356\":[2],\"6357\":[null,2],\"6358\":[null,4],\"6359\":[null,21],\"6360\":[null,3],\"6361\":[3],\"6362\":[2],\"6363\":[2],\"6364\":[null,2],\"6365\":[null,3],\"6366\":[2],\"6367\":[null,3],\"6368\":[null,5],\"6369\":[null,5],\"6370\":[2],\"6371\":[null,4],\"6372\":[null,6],\"6373\":[null,5],\"6374\":[null,7],\"6375\":[2],\"6376\":[null,2],\"6377\":[null,1],\"6378\":[null,5],\"6379\":[2],\"6380\":[1],\"6381\":[null,4],\"6382\":[null,6],\"6383\":[3],\"6384\":[null,5],\"6385\":[null,14],\"6386\":[3],\"6387\":[null,1],\"6388\":[null,19],\"6389\":[2],\"6390\":[3],\"6391\":[null,4],\"6392\":[3],\"6393\":[null,2],\"6394\":[null,19],\"6395\":[2],\"6396\":[null,3],\"6397\":[2],\"6398\":[null,25],\"6399\":[2],\"6400\":[null,4],\"6401\":[3],\"6402\":[null,5],\"6403\":[3],\"6404\":[null,7],\"6405\":[2],\"6406\":[null,5],\"6407\":[null,2],\"6408\":[null,2],\"6409\":[null,2],\"6410\":[3],\"6411\":[null,44],\"6412\":[3],\"6413\":[2],\"6414\":[null,9],\"6415\":[2],\"6416\":[null,4],\"6417\":[null,6],\"6418\":[null,3],\"6419\":[null,5],\"6420\":[null,3],\"6421\":[null,6],\"6422\":[null,6],\"6423\":[2],\"6424\":[null,3],\"6425\":[3],\"6426\":[null,25],\"6427\":[null,15],\"6428\":[null,11],\"6429\":[3],\"6430\":[null,3],\"6431\":[2],\"6432\":[null,3],\"6433\":[3],\"6434\":[2],\"6435\":[null,4],\"6436\":[null,4],\"6437\":[4],\"6438\":[null,5],\"6439\":[null,5],\"6440\":[null,3],\"6441\":[2],\"6442\":[null,3],\"6443\":[null,10],\"6444\":[4],\"6445\":[null,11],\"6446\":[null,4],\"6447\":[null,5],\"6448\":[null,6],\"6449\":[null,33],\"6450\":[2],\"6451\":[null,2],\"6452\":[2],\"6453\":[null,3],\"6454\":[null,4],\"6455\":[null,1],\"6456\":[null,1],\"6457\":[null,7],\"6458\":[null,2],\"6459\":[3],\"6460\":[null,42],\"6461\":[2],\"6462\":[null,3],\"6463\":[null,4],\"6464\":[2],\"6465\":[null,6],\"6466\":[null,5],\"6467\":[2],\"6468\":[null,3],\"6469\":[null,3],\"6470\":[null,3],\"6471\":[null,3],\"6472\":[null,3],\"6473\":[null,3],\"6474\":[null,3],\"6475\":[null,3],\"6476\":[null,3],\"6477\":[null,5],\"6478\":[2],\"6479\":[null,2],\"6480\":[3],\"6481\":[null,2],\"6482\":[null,4],\"6483\":[null,29],\"6484\":[3],\"6485\":[null,3],\"6486\":[null,4],\"6487\":[null,31],\"6488\":[2],\"6489\":[null,14],\"6490\":[2],\"6491\":[null,7],\"6492\":[null,2],\"6493\":[null,2],\"6494\":[2],\"6495\":[null,5],\"6496\":[3],\"6497\":[null,1],\"6498\":[null,3],\"6499\":[2],\"6500\":[null,3],\"6501\":[null,5],\"6502\":[2],\"6503\":[null,4],\"6504\":[null,3],\"6505\":[null,8],\"6506\":[3],\"6507\":[null,3],\"6508\":[null,2],\"6509\":[null,2],\"6510\":[null,4],\"6511\":[null,5],\"6512\":[3],\"6513\":[null,6],\"6514\":[null,5],\"6515\":[3],\"6516\":[null,28],\"6517\":[2],\"6518\":[null,3],\"6519\":[null,3],\"6520\":[null,5],\"6521\":[null,8],\"6522\":[3],\"6523\":[null,5],\"6524\":[null,6],\"6525\":[4],\"6526\":[null,19],\"6527\":[2],\"6528\":[null,11],\"6529\":[2],\"6530\":[1],\"6531\":[null,2],\"6532\":[null,7],\"6533\":[null,4],\"6534\":[2],\"6535\":[null,4],\"6536\":[null,3],\"6537\":[2],\"6538\":[null,5],\"6539\":[null,4],\"6540\":[2],\"6541\":[3],\"6542\":[null,3],\"6543\":[null,19],\"6544\":[3],\"6545\":[null,3],\"6546\":[null,5],\"6547\":[2],\"6548\":[null,3],\"6549\":[null,8],\"6550\":[3],\"6551\":[null,4],\"6552\":[null,3],\"6553\":[3],\"6554\":[3],\"6555\":[null,24],\"6556\":[3],\"6557\":[null,27],\"6558\":[3],\"6559\":[null,3],\"6560\":[null,1],\"6561\":[null,3],\"6562\":[null,2],\"6563\":[null,3],\"6564\":[null,2],\"6565\":[null,3],\"6566\":[null,2],\"6567\":[3],\"6568\":[3],\"6569\":[null,12],\"6570\":[3],\"6571\":[null,28],\"6572\":[3],\"6573\":[null,27],\"6574\":[2],\"6575\":[null,14],\"6576\":[null,4],\"6577\":[null,9],\"6578\":[3],\"6579\":[2],\"6580\":[3],\"6581\":[null,18],\"6582\":[null,5],\"6583\":[null,5],\"6584\":[null,2],\"6585\":[null,2],\"6586\":[null,2],\"6587\":[null,2],\"6588\":[3],\"6589\":[null,13],\"6590\":[2],\"6591\":[null,7],\"6592\":[3],\"6593\":[null,8],\"6594\":[null,19],\"6595\":[3],\"6596\":[null,8],\"6597\":[2],\"6598\":[null,5],\"6599\":[null,6],\"6600\":[null,6],\"6601\":[null,3],\"6602\":[null,5],\"6603\":[null,4],\"6604\":[null,4],\"6605\":[null,4],\"6606\":[null,6],\"6607\":[null,4],\"6608\":[null,5],\"6609\":[null,3],\"6610\":[2],\"6611\":[null,7],\"6612\":[null,7],\"6613\":[null,6],\"6614\":[2],\"6615\":[null,6],\"6616\":[null,7],\"6617\":[null,7],\"6618\":[null,7],\"6619\":[null,8],\"6620\":[null,7],\"6621\":[null,9],\"6622\":[null,6],\"6623\":[null,7],\"6624\":[null,7],\"6625\":[null,7],\"6626\":[null,5],\"6627\":[null,5],\"6628\":[null,5],\"6629\":[null,7],\"6630\":[null,8],\"6631\":[null,6],\"6632\":[null,8],\"6633\":[null,8],\"6634\":[2],\"6635\":[null,6],\"6636\":[3],\"6637\":[null,1],\"6638\":[null,2],\"6639\":[1],\"6640\":[null,6],\"6641\":[null,12],\"6642\":[2],\"6643\":[null,8],\"6644\":[null,5],\"6645\":[null,2],\"6646\":[null,3],\"6647\":[null,1],\"6648\":[2],\"6649\":[null,2],\"6650\":[null,2],\"6651\":[2],\"6652\":[null,3],\"6653\":[null,3],\"6654\":[null,3],\"6655\":[null,6],\"6656\":[2],\"6657\":[null,2],\"6658\":[2],\"6659\":[null,3],\"6660\":[3],\"6661\":[2],\"6662\":[3],\"6663\":[null,5],\"6664\":[2],\"6665\":[4],\"6666\":[null,13],\"6667\":[null,8],\"6668\":[null,9],\"6669\":[3],\"6670\":[null,2],\"6671\":[null,3],\"6672\":[null,6],\"6673\":[2],\"6674\":[null,8],\"6675\":[3],\"6676\":[null,3],\"6677\":[null,6],\"6678\":[null,3],\"6679\":[2],\"6680\":[null,7],\"6681\":[null,2],\"6682\":[3],\"6683\":[null,8],\"6684\":[null,8],\"6685\":[null,5],\"6686\":[2],\"6687\":[null,5],\"6688\":[2],\"6689\":[1],\"6690\":[null,2],\"6691\":[null,5],\"6692\":[null,7],\"6693\":[2],\"6694\":[null,3],\"6695\":[null,5],\"6696\":[null,4],\"6697\":[2],\"6698\":[null,6],\"6699\":[4],\"6700\":[null,18],\"6701\":[2],\"6702\":[null,3],\"6703\":[null,21],\"6704\":[2],\"6705\":[null,2],\"6706\":[null,20],\"6707\":[3],\"6708\":[null,15],\"6709\":[3],\"6710\":[null,2],\"6711\":[null,19],\"6712\":[3],\"6713\":[2],\"6714\":[2],\"6715\":[null,3],\"6716\":[null,6],\"6717\":[2],\"6718\":[null,9],\"6719\":[null,4],\"6720\":[null,7],\"6721\":[2],\"6722\":[2],\"6723\":[null,2],\"6724\":[null,5],\"6725\":[null,5],\"6726\":[4],\"6727\":[null,9],\"6728\":[null,7],\"6729\":[null,7],\"6730\":[2],\"6731\":[null,3],\"6732\":[null,6],\"6733\":[null,4],\"6734\":[null,1],\"6735\":[null,3],\"6736\":[2],\"6737\":[null,3],\"6738\":[null,4],\"6739\":[null,1],\"6740\":[null,3],\"6741\":[null,1],\"6742\":[null,3],\"6743\":[2],\"6744\":[null,6],\"6745\":[null,5],\"6746\":[null,5],\"6747\":[null,10],\"6748\":[null,3],\"6749\":[2],\"6750\":[null,3],\"6751\":[null,3],\"6752\":[null,3],\"6753\":[null,3],\"6754\":[null,3],\"6755\":[3],\"6756\":[2],\"6757\":[null,2],\"6758\":[null,5],\"6759\":[null,2],\"6760\":[null,3],\"6761\":[null,3],\"6762\":[null,3],\"6763\":[2],\"6764\":[null,4],\"6765\":[null,6],\"6766\":[2],\"6767\":[3],\"6768\":[null,3],\"6769\":[null,9],\"6770\":[3],\"6771\":[null,2],\"6772\":[null,10],\"6773\":[2],\"6774\":[null,5],\"6775\":[null,5],\"6776\":[null,10],\"6777\":[null,5],\"6778\":[null,7],\"6779\":[null,9],\"6780\":[null,12],\"6781\":[null,10],\"6782\":[null,13],\"6783\":[null,4],\"6784\":[3],\"6785\":[2],\"6786\":[null,3],\"6787\":[null,3],\"6788\":[2],\"6789\":[null,2],\"6790\":[null,12],\"6791\":[null,3],\"6792\":[null,3],\"6793\":[null,4],\"6794\":[null,3],\"6795\":[null,3],\"6796\":[null,1],\"6797\":[null,3],\"6798\":[2],\"6799\":[null,3],\"6800\":[3],\"6801\":[null,12],\"6802\":[3],\"6803\":[null,29],\"6804\":[2],\"6805\":[null,1],\"6806\":[null,9],\"6807\":[null,6],\"6808\":[null,9],\"6809\":[null,4],\"6810\":[2],\"6811\":[3],\"6812\":[null,8],\"6813\":[null,6],\"6814\":[null,7],\"6815\":[3],\"6816\":[null,8],\"6817\":[null,4],\"6818\":[3],\"6819\":[null,42],\"6820\":[2],\"6821\":[null,2],\"6822\":[null,6],\"6823\":[null,4],\"6824\":[null,4],\"6825\":[3],\"6826\":[2],\"6827\":[2],\"6828\":[null,8],\"6829\":[null,6],\"6830\":[null,4],\"6831\":[null,4],\"6832\":[2],\"6833\":[null,1],\"6834\":[null,1],\"6835\":[null,2],\"6836\":[null,1],\"6837\":[null,2],\"6838\":[null,1],\"6839\":[2],\"6840\":[null,30],\"6841\":[2],\"6842\":[null,2],\"6843\":[null,32],\"6844\":[2],\"6845\":[null,3],\"6846\":[null,9],\"6847\":[null,20],\"6848\":[null,5],\"6849\":[null,12],\"6850\":[null,18],\"6851\":[null,5],\"6852\":[null,5],\"6853\":[null,7],\"6854\":[null,8],\"6855\":[2],\"6856\":[null,2],\"6857\":[null,11],\"6858\":[null,14],\"6859\":[null,8],\"6860\":[null,6],\"6861\":[null,11],\"6862\":[null,5],\"6863\":[3],\"6864\":[2],\"6865\":[null,10],\"6866\":[null,12],\"6867\":[null,4],\"6868\":[2],\"6869\":[null,8],\"6870\":[null,3],\"6871\":[null,3],\"6872\":[null,12],\"6873\":[2],\"6874\":[null,6],\"6875\":[null,9],\"6876\":[null,4],\"6877\":[null,2],\"6878\":[null,3],\"6879\":[null,2],\"6880\":[null,2],\"6881\":[null,2],\"6882\":[null,2],\"6883\":[null,25],\"6884\":[null,9],\"6885\":[2],\"6886\":[null,4],\"6887\":[null,4],\"6888\":[null,4],\"6889\":[null,4],\"6890\":[null,4],\"6891\":[null,4],\"6892\":[null,4],\"6893\":[2],\"6894\":[null,2],\"6895\":[null,3],\"6896\":[null,14],\"6897\":[3],\"6898\":[null,11],\"6899\":[null,14],\"6900\":[3],\"6901\":[null,5],\"6902\":[null,4],\"6903\":[null,4],\"6904\":[null,4],\"6905\":[null,4],\"6906\":[null,5],\"6907\":[null,5],\"6908\":[3],\"6909\":[null,7],\"6910\":[null,8],\"6911\":[null,16],\"6912\":[null,3],\"6913\":[null,9],\"6914\":[2],\"6915\":[null,3],\"6916\":[null,11],\"6917\":[null,16],\"6918\":[null,17],\"6919\":[null,11],\"6920\":[3],\"6921\":[2],\"6922\":[null,7],\"6923\":[2],\"6924\":[null,9],\"6925\":[null,8],\"6926\":[null,5],\"6927\":[null,4],\"6928\":[null,9],\"6929\":[2],\"6930\":[null,11],\"6931\":[2],\"6932\":[null,1],\"6933\":[null,1],\"6934\":[null,1],\"6935\":[null,1],\"6936\":[null,1],\"6937\":[null,1],\"6938\":[null,1],\"6939\":[2],\"6940\":[null,4],\"6941\":[null,5],\"6942\":[null,7],\"6943\":[null,8],\"6944\":[null,1],\"6945\":[2],\"6946\":[null,5],\"6947\":[3],\"6948\":[null,1],\"6949\":[null,42],\"6950\":[3],\"6951\":[null,5],\"6952\":[null,13],\"6953\":[null,4],\"6954\":[3],\"6955\":[4],\"6956\":[null,28],\"6957\":[4],\"6958\":[null,18],\"6959\":[4],\"6960\":[null,41],\"6961\":[4],\"6962\":[null,46],\"6963\":[3],\"6964\":[2],\"6965\":[null,4],\"6966\":[null,11],\"6967\":[null,3],\"6968\":[2],\"6969\":[null,13],\"6970\":[2],\"6971\":[null,3],\"6972\":[null,9],\"6973\":[2],\"6974\":[null,1],\"6975\":[null,2],\"6976\":[null,3],\"6977\":[null,2],\"6978\":[null,3],\"6979\":[null,1],\"6980\":[null,4],\"6981\":[2],\"6982\":[null,7],\"6983\":[null,2],\"6984\":[null,2],\"6985\":[null,2],\"6986\":[null,3],\"6987\":[null,3],\"6988\":[null,1],\"6989\":[null,18],\"6990\":[2],\"6991\":[null,8],\"6992\":[4],\"6993\":[null,4],\"6994\":[null,10],\"6995\":[5],\"6996\":[null,3],\"6997\":[null,15],\"6998\":[8],\"6999\":[null,7],\"7000\":[null,13],\"7001\":[6],\"7002\":[null,17],\"7003\":[2],\"7004\":[null,2],\"7005\":[3],\"7006\":[2],\"7007\":[2],\"7008\":[null,4],\"7009\":[null,3],\"7010\":[3],\"7011\":[null,10],\"7012\":[4],\"7013\":[null,2],\"7014\":[null,5],\"7015\":[null,7],\"7016\":[null,6],\"7017\":[4],\"7018\":[null,7],\"7019\":[null,4],\"7020\":[null,3],\"7021\":[2],\"7022\":[null,3],\"7023\":[null,2],\"7024\":[null,1],\"7025\":[null,3],\"7026\":[null,3],\"7027\":[null,3],\"7028\":[null,3],\"7029\":[null,3],\"7030\":[null,2],\"7031\":[null,2],\"7032\":[null,3],\"7033\":[2],\"7034\":[null,2],\"7035\":[null,7],\"7036\":[2],\"7037\":[null,6],\"7038\":[null,3],\"7039\":[null,2],\"7040\":[null,2],\"7041\":[null,3],\"7042\":[2],\"7043\":[null,34],\"7044\":[3],\"7045\":[null,1],\"7046\":[null,4],\"7047\":[2],\"7048\":[null,5],\"7049\":[null,34],\"7050\":[3],\"7051\":[2],\"7052\":[3],\"7053\":[null,4],\"7054\":[null,20],\"7055\":[null,2],\"7056\":[null,4],\"7057\":[null,5],\"7058\":[null,2],\"7059\":[null,5],\"7060\":[null,5],\"7061\":[2],\"7062\":[null,4],\"7063\":[null,8],\"7064\":[null,3],\"7065\":[null,17],\"7066\":[2],\"7067\":[null,5],\"7068\":[null,3],\"7069\":[2],\"7070\":[3],\"7071\":[null,1],\"7072\":[null,15],\"7073\":[1],\"7074\":[null,6],\"7075\":[null,6],\"7076\":[3],\"7077\":[null,3],\"7078\":[null,11],\"7079\":[1],\"7080\":[null,1],\"7081\":[null,7],\"7082\":[null,4],\"7083\":[null,5],\"7084\":[2],\"7085\":[null,4],\"7086\":[null,29],\"7087\":[null,9],\"7088\":[null,2],\"7089\":[null,2],\"7090\":[null,2],\"7091\":[null,2],\"7092\":[null,8],\"7093\":[null,3],\"7094\":[null,7],\"7095\":[2],\"7096\":[2],\"7097\":[null,16],\"7098\":[null,3],\"7099\":[null,4],\"7100\":[null,1],\"7101\":[null,3],\"7102\":[null,4],\"7103\":[null,3],\"7104\":[2],\"7105\":[null,7],\"7106\":[null,57],\"7107\":[null,3],\"7108\":[null,5],\"7109\":[null,1],\"7110\":[null,3],\"7111\":[null,3],\"7112\":[null,1],\"7113\":[null,3],\"7114\":[null,7],\"7115\":[null,1],\"7116\":[null,3],\"7117\":[null,7],\"7118\":[null,1],\"7119\":[null,3],\"7120\":[null,9],\"7121\":[null,2],\"7122\":[null,3],\"7123\":[null,6],\"7124\":[null,3],\"7125\":[2],\"7126\":[2],\"7127\":[null,2],\"7128\":[null,18],\"7129\":[null,2],\"7130\":[null,2],\"7131\":[3],\"7132\":[null,11],\"7133\":[3],\"7134\":[null,12],\"7135\":[2],\"7136\":[null,1],\"7137\":[null,19],\"7138\":[3],\"7139\":[null,16],\"7140\":[3],\"7141\":[null,12],\"7142\":[3],\"7143\":[null,14],\"7144\":[2],\"7145\":[2],\"7146\":[null,29],\"7147\":[5],\"7148\":[null,3],\"7149\":[null,6],\"7150\":[3],\"7151\":[null,2],\"7152\":[null,6],\"7153\":[3],\"7154\":[null,1],\"7155\":[null,5],\"7156\":[3],\"7157\":[null,1],\"7158\":[null,7],\"7159\":[null,7],\"7160\":[2],\"7161\":[null,34],\"7162\":[4],\"7163\":[null,2],\"7164\":[null,3],\"7165\":[null,4],\"7166\":[null,6],\"7167\":[5],\"7168\":[null,1],\"7169\":[null,6],\"7170\":[4],\"7171\":[null,3],\"7172\":[null,2],\"7173\":[null,2],\"7174\":[null,4],\"7175\":[null,4],\"7176\":[null,5],\"7177\":[2],\"7178\":[null,4],\"7179\":[null,24],\"7180\":[2],\"7181\":[null,2],\"7182\":[3],\"7183\":[null,4],\"7184\":[null,4],\"7185\":[null,5],\"7186\":[null,4],\"7187\":[null,2],\"7188\":[null,3],\"7189\":[null,5],\"7190\":[3],\"7191\":[2],\"7192\":[2],\"7193\":[null,6],\"7194\":[null,5],\"7195\":[1],\"7196\":[null,3],\"7197\":[null,5],\"7198\":[null,1],\"7199\":[null,4],\"7200\":[null,5],\"7201\":[null,2],\"7202\":[null,4],\"7203\":[null,3],\"7204\":[2],\"7205\":[null,7],\"7206\":[3],\"7207\":[null,10],\"7208\":[2],\"7209\":[null,6],\"7210\":[2],\"7211\":[null,4],\"7212\":[null,2],\"7213\":[null,1],\"7214\":[null,1],\"7215\":[null,7],\"7216\":[null,6],\"7217\":[2],\"7218\":[null,3],\"7219\":[null,5],\"7220\":[null,5],\"7221\":[null,4],\"7222\":[null,1],\"7223\":[null,3],\"7224\":[3],\"7225\":[null,5],\"7226\":[3],\"7227\":[null,19],\"7228\":[3],\"7229\":[null,13],\"7230\":[2],\"7231\":[null,19],\"7232\":[2],\"7233\":[2],\"7234\":[null,3],\"7235\":[null,3],\"7236\":[2],\"7237\":[null,3],\"7238\":[null,1],\"7239\":[null,4],\"7240\":[null,3],\"7241\":[null,3],\"7242\":[null,2],\"7243\":[null,3],\"7244\":[null,2],\"7245\":[null,2],\"7246\":[null,2],\"7247\":[null,4],\"7248\":[3],\"7249\":[null,2],\"7250\":[null,3],\"7251\":[null,4],\"7252\":[2],\"7253\":[null,7],\"7254\":[2],\"7255\":[4],\"7256\":[null,3],\"7257\":[4],\"7258\":[null,1],\"7259\":[null,2],\"7260\":[null,5],\"7261\":[null,3],\"7262\":[null,4],\"7263\":[null,6],\"7264\":[null,3],\"7265\":[null,2],\"7266\":[null,11],\"7267\":[3],\"7268\":[null,4],\"7269\":[5],\"7270\":[null,2],\"7271\":[null,2],\"7272\":[null,2],\"7273\":[null,2],\"7274\":[null,8],\"7275\":[2],\"7276\":[3],\"7277\":[null,22],\"7278\":[5],\"7279\":[null,37],\"7280\":[3],\"7281\":[null,2],\"7282\":[null,5],\"7283\":[null,3],\"7284\":[null,20],\"7285\":[2],\"7286\":[null,7],\"7287\":[null,12],\"7288\":[null,1],\"7289\":[null,2],\"7290\":[null,3],\"7291\":[null,2],\"7292\":[null,8],\"7293\":[null,2],\"7294\":[null,3],\"7295\":[null,2],\"7296\":[null,2],\"7297\":[null,3],\"7298\":[2],\"7299\":[6],\"7300\":[null,2],\"7301\":[null,4],\"7302\":[3],\"7303\":[null,3],\"7304\":[null,6],\"7305\":[3],\"7306\":[null,5],\"7307\":[null,32],\"7308\":[3],\"7309\":[null,1],\"7310\":[null,1],\"7311\":[2],\"7312\":[null,12],\"7313\":[null,6],\"7314\":[2],\"7315\":[null,5],\"7316\":[null,3],\"7317\":[null,4],\"7318\":[2],\"7319\":[null,4],\"7320\":[null,3],\"7321\":[2],\"7322\":[null,3],\"7323\":[null,3],\"7324\":[null,6],\"7325\":[3],\"7326\":[null,6],\"7327\":[3],\"7328\":[null,4],\"7329\":[null,6],\"7330\":[null,2],\"7331\":[3],\"7332\":[null,1],\"7333\":[null,3],\"7334\":[2],\"7335\":[2],\"7336\":[null,6],\"7337\":[null,2],\"7338\":[2],\"7339\":[null,3],\"7340\":[null,2],\"7341\":[2],\"7342\":[null,1],\"7343\":[null,3],\"7344\":[2],\"7345\":[null,9],\"7346\":[null,3],\"7347\":[null,4],\"7348\":[null,4],\"7349\":[3],\"7350\":[null,2],\"7351\":[null,2],\"7352\":[null,4],\"7353\":[3],\"7354\":[null,2],\"7355\":[null,3],\"7356\":[null,7],\"7357\":[2],\"7358\":[null,13],\"7359\":[2],\"7360\":[null,2],\"7361\":[null,3],\"7362\":[null,3],\"7363\":[null,1],\"7364\":[null,2],\"7365\":[null,3],\"7366\":[null,3],\"7367\":[null,6],\"7368\":[2],\"7369\":[null,4],\"7370\":[4],\"7371\":[null,3],\"7372\":[2],\"7373\":[null,24],\"7374\":[4],\"7375\":[null,5],\"7376\":[2],\"7377\":[null,23],\"7378\":[3],\"7379\":[null,4],\"7380\":[null,3],\"7381\":[2],\"7382\":[null,9],\"7383\":[3],\"7384\":[null,3],\"7385\":[2],\"7386\":[null,9],\"7387\":[4],\"7388\":[null,5],\"7389\":[3],\"7390\":[null,28],\"7391\":[3],\"7392\":[null,1],\"7393\":[null,4],\"7394\":[3],\"7395\":[2],\"7396\":[null,3],\"7397\":[2],\"7398\":[null,8],\"7399\":[null,6],\"7400\":[null,7],\"7401\":[null,10],\"7402\":[3],\"7403\":[1],\"7404\":[null,4],\"7405\":[1],\"7406\":[null,3],\"7407\":[null,5],\"7408\":[1],\"7409\":[null,4],\"7410\":[null,6],\"7411\":[1],\"7412\":[null,6],\"7413\":[null,5],\"7414\":[2],\"7415\":[null,2],\"7416\":[null,8],\"7417\":[2],\"7418\":[null,7],\"7419\":[2],\"7420\":[null,9],\"7421\":[null,2],\"7422\":[2],\"7423\":[null,7],\"7424\":[null,3],\"7425\":[2],\"7426\":[null,4],\"7427\":[2],\"7428\":[null,3],\"7429\":[null,5],\"7430\":[null,6],\"7431\":[null,5],\"7432\":[null,4],\"7433\":[null,5],\"7434\":[null,7],\"7435\":[null,6],\"7436\":[null,6],\"7437\":[2],\"7438\":[null,3],\"7439\":[3],\"7440\":[2],\"7441\":[2],\"7442\":[null,10],\"7443\":[2],\"7444\":[null,4],\"7445\":[2],\"7446\":[null,4],\"7447\":[null,3],\"7448\":[null,3],\"7449\":[null,3],\"7450\":[1],\"7451\":[null,3],\"7452\":[null,9],\"7453\":[null,5],\"7454\":[2],\"7455\":[null,3],\"7456\":[null,5],\"7457\":[null,6],\"7458\":[2],\"7459\":[5],\"7460\":[null,3],\"7461\":[2],\"7462\":[null,10],\"7463\":[3],\"7464\":[null,9],\"7465\":[null,6],\"7466\":[null,6],\"7467\":[null,6],\"7468\":[null,11],\"7469\":[7],\"7470\":[null,6],\"7471\":[null,10],\"7472\":[3],\"7473\":[null,8],\"7474\":[2],\"7475\":[null,11],\"7476\":[null,6],\"7477\":[5],\"7478\":[null,2],\"7479\":[3],\"7480\":[null,11],\"7481\":[3],\"7482\":[null,12],\"7483\":[null,8],\"7484\":[5],\"7485\":[null,2],\"7486\":[3],\"7487\":[null,11],\"7488\":[3],\"7489\":[null,6],\"7490\":[null,6],\"7491\":[7],\"7492\":[null,5],\"7493\":[null,9],\"7494\":[3],\"7495\":[null,8],\"7496\":[3],\"7497\":[null,5],\"7498\":[null,7],\"7499\":[2],\"7500\":[null,2],\"7501\":[2],\"7502\":[null,2],\"7503\":[null,1],\"7504\":[2],\"7505\":[null,2],\"7506\":[3],\"7507\":[null,6],\"7508\":[null,3],\"7509\":[3],\"7510\":[null,8],\"7511\":[3],\"7512\":[null,7],\"7513\":[3],\"7514\":[null,6],\"7515\":[null,4],\"7516\":[3],\"7517\":[null,11],\"7518\":[3],\"7519\":[null,4],\"7520\":[null,10],\"7521\":[3],\"7522\":[null,6],\"7523\":[null,7],\"7524\":[3],\"7525\":[null,14],\"7526\":[3],\"7527\":[null,12],\"7528\":[2],\"7529\":[null,3],\"7530\":[2],\"7531\":[null,2],\"7532\":[2],\"7533\":[null,3],\"7534\":[3],\"7535\":[null,10],\"7536\":[2],\"7537\":[null,9],\"7538\":[3],\"7539\":[3],\"7540\":[null,7],\"7541\":[null,9],\"7542\":[4],\"7543\":[null,7],\"7544\":[null,8],\"7545\":[null,12],\"7546\":[3],\"7547\":[null,3],\"7548\":[null,2],\"7549\":[2],\"7550\":[null,6],\"7551\":[4],\"7552\":[null,4],\"7553\":[null,12],\"7554\":[2],\"7555\":[null,3],\"7556\":[null,7],\"7557\":[null,3],\"7558\":[null,8],\"7559\":[2],\"7560\":[null,2],\"7561\":[null,4],\"7562\":[null,2],\"7563\":[3],\"7564\":[2],\"7565\":[2],\"7566\":[null,2],\"7567\":[null,2],\"7568\":[null,14],\"7569\":[3],\"7570\":[null,2],\"7571\":[null,2],\"7572\":[null,14],\"7573\":[2],\"7574\":[null,5],\"7575\":[null,19],\"7576\":[1],\"7577\":[null,7],\"7578\":[null,7],\"7579\":[null,7],\"7580\":[null,7],\"7581\":[3],\"7582\":[null,5],\"7583\":[null,21],\"7584\":[4],\"7585\":[null,7],\"7586\":[null,3],\"7587\":[3],\"7588\":[null,4],\"7589\":[null,4],\"7590\":[null,26],\"7591\":[3],\"7592\":[null,5],\"7593\":[null,20],\"7594\":[3],\"7595\":[null,2],\"7596\":[null,4],\"7597\":[2],\"7598\":[null,9],\"7599\":[2],\"7600\":[null,5],\"7601\":[null,6],\"7602\":[null,2],\"7603\":[2],\"7604\":[null,8],\"7605\":[null,3],\"7606\":[null,3],\"7607\":[2],\"7608\":[null,1],\"7609\":[null,1],\"7610\":[null,1],\"7611\":[2],\"7612\":[null,3],\"7613\":[null,11],\"7614\":[3],\"7615\":[null,5],\"7616\":[null,25],\"7617\":[3],\"7618\":[null,7],\"7619\":[null,14],\"7620\":[3],\"7621\":[null,3],\"7622\":[null,2],\"7623\":[null,16],\"7624\":[3],\"7625\":[null,10],\"7626\":[null,16],\"7627\":[2],\"7628\":[null,3],\"7629\":[null,11],\"7630\":[2],\"7631\":[null,3],\"7632\":[null,5],\"7633\":[null,5],\"7634\":[null,33],\"7635\":[2],\"7636\":[null,5],\"7637\":[null,4],\"7638\":[3],\"7639\":[null,5],\"7640\":[null,4],\"7641\":[3],\"7642\":[null,5],\"7643\":[null,4],\"7644\":[2],\"7645\":[null,6],\"7646\":[null,8],\"7647\":[null,13],\"7648\":[null,5],\"7649\":[null,4],\"7650\":[null,5],\"7651\":[3],\"7652\":[3],\"7653\":[null,1],\"7654\":[null,2],\"7655\":[null,48],\"7656\":[3],\"7657\":[null,3],\"7658\":[null,13],\"7659\":[2],\"7660\":[null,3],\"7661\":[null,4],\"7662\":[null,14],\"7663\":[3],\"7664\":[null,4],\"7665\":[null,9],\"7666\":[2],\"7667\":[3],\"7668\":[null,3],\"7669\":[null,4],\"7670\":[null,22],\"7671\":[5],\"7672\":[null,2],\"7673\":[null,23],\"7674\":[2],\"7675\":[3],\"7676\":[null,6],\"7677\":[null,3],\"7678\":[null,22],\"7679\":[3],\"7680\":[null,22],\"7681\":[3],\"7682\":[null,21],\"7683\":[3],\"7684\":[null,1],\"7685\":[null,24],\"7686\":[3],\"7687\":[null,5],\"7688\":[null,24],\"7689\":[3],\"7690\":[null,2],\"7691\":[null,12],\"7692\":[3],\"7693\":[null,1],\"7694\":[null,23],\"7695\":[3],\"7696\":[null,1],\"7697\":[null,28],\"7698\":[3],\"7699\":[null,5],\"7700\":[null,5],\"7701\":[null,10],\"7702\":[2],\"7703\":[3],\"7704\":[null,3],\"7705\":[null,3],\"7706\":[null,5],\"7707\":[null,3],\"7708\":[null,33],\"7709\":[5],\"7710\":[null,4],\"7711\":[null,2],\"7712\":[null,28],\"7713\":[4],\"7714\":[null,8],\"7715\":[null,2],\"7716\":[null,22],\"7717\":[2],\"7718\":[null,5],\"7719\":[null,7],\"7720\":[null,4],\"7721\":[null,4],\"7722\":[1],\"7723\":[null,22],\"7724\":[null,3],\"7725\":[null,3],\"7726\":[1],\"7727\":[null,3],\"7728\":[null,2],\"7729\":[3],\"7730\":[3],\"7731\":[2],\"7732\":[null,16],\"7733\":[2],\"7734\":[null,10],\"7735\":[2],\"7736\":[null,3],\"7737\":[null,3],\"7738\":[null,3],\"7739\":[2],\"7740\":[2],\"7741\":[6],\"7742\":[null,5],\"7743\":[null,18],\"7744\":[5],\"7745\":[null,4],\"7746\":[null,5],\"7747\":[8],\"7748\":[null,2],\"7749\":[null,22],\"7750\":[2],\"7751\":[3],\"7752\":[null,1],\"7753\":[null,17],\"7754\":[2],\"7755\":[null,4],\"7756\":[null,22],\"7757\":[2],\"7758\":[4],\"7759\":[null,4],\"7760\":[null,18],\"7761\":[5],\"7762\":[null,5],\"7763\":[null,22],\"7764\":[4],\"7765\":[null,1],\"7766\":[null,1],\"7767\":[null,1],\"7768\":[2],\"7769\":[2],\"7770\":[2],\"7771\":[2],\"7772\":[2],\"7773\":[2],\"7774\":[2],\"7775\":[3],\"7776\":[2],\"7777\":[2],\"7778\":[2],\"7779\":[2],\"7780\":[2],\"7781\":[2],\"7782\":[2],\"7783\":[null,1],\"7784\":[null,4],\"7785\":[null,2],\"7786\":[null,3],\"7787\":[2],\"7788\":[null,9],\"7789\":[null,1],\"7790\":[null,4],\"7791\":[2],\"7792\":[null,3],\"7793\":[null,1],\"7794\":[null,5],\"7795\":[null,5],\"7796\":[null,5],\"7797\":[2],\"7798\":[null,14],\"7799\":[null,3],\"7800\":[null,6],\"7801\":[5],\"7802\":[null,2],\"7803\":[5],\"7804\":[null,2],\"7805\":[2],\"7806\":[null,5],\"7807\":[2],\"7808\":[null,4],\"7809\":[null,10],\"7810\":[null,11],\"7811\":[2],\"7812\":[null,2],\"7813\":[3],\"7814\":[2],\"7815\":[3],\"7816\":[null,3],\"7817\":[null,3],\"7818\":[2],\"7819\":[null,3],\"7820\":[null,2],\"7821\":[2],\"7822\":[null,3],\"7823\":[null,4],\"7824\":[null,9],\"7825\":[null,2],\"7826\":[2],\"7827\":[null,7],\"7828\":[null,6],\"7829\":[null,3],\"7830\":[null,3],\"7831\":[2],\"7832\":[null,12],\"7833\":[null,3],\"7834\":[null,5],\"7835\":[null,2],\"7836\":[2],\"7837\":[null,4],\"7838\":[null,4],\"7839\":[null,2],\"7840\":[null,3],\"7841\":[2],\"7842\":[null,3],\"7843\":[2],\"7844\":[null,8],\"7845\":[null,4],\"7846\":[null,6],\"7847\":[3],\"7848\":[null,4],\"7849\":[2],\"7850\":[null,4],\"7851\":[3],\"7852\":[null,48],\"7853\":[null,7],\"7854\":[null,8],\"7855\":[4],\"7856\":[null,3],\"7857\":[null,2],\"7858\":[null,18],\"7859\":[null,3],\"7860\":[3],\"7861\":[null,1],\"7862\":[null,41],\"7863\":[3],\"7864\":[null,4],\"7865\":[null,41],\"7866\":[5],\"7867\":[null,4],\"7868\":[3],\"7869\":[null,2],\"7870\":[null,3],\"7871\":[null,12],\"7872\":[3],\"7873\":[null,44],\"7874\":[3],\"7875\":[null,4],\"7876\":[null,2],\"7877\":[3],\"7878\":[2],\"7879\":[2],\"7880\":[null,6],\"7881\":[2],\"7882\":[null,7],\"7883\":[null,5],\"7884\":[null,5],\"7885\":[null,7],\"7886\":[null,2],\"7887\":[2],\"7888\":[5],\"7889\":[null,24],\"7890\":[4],\"7891\":[null,6],\"7892\":[null,8],\"7893\":[null,13],\"7894\":[2],\"7895\":[null,4],\"7896\":[null,3],\"7897\":[2],\"7898\":[null,1],\"7899\":[null,1],\"7900\":[null,1],\"7901\":[null,3],\"7902\":[2],\"7903\":[null,1],\"7904\":[null,1],\"7905\":[null,1],\"7906\":[null,1],\"7907\":[null,1],\"7908\":[null,1],\"7909\":[null,1],\"7910\":[null,1],\"7911\":[null,1],\"7912\":[null,1],\"7913\":[null,1],\"7914\":[null,1],\"7915\":[null,1],\"7916\":[null,3],\"7917\":[null,2],\"7918\":[null,2],\"7919\":[null,3],\"7920\":[null,1],\"7921\":[null,3],\"7922\":[null,1],\"7923\":[null,3],\"7924\":[null,1],\"7925\":[2],\"7926\":[2],\"7927\":[null,9],\"7928\":[4],\"7929\":[null,7],\"7930\":[2],\"7931\":[null,2],\"7932\":[null,1],\"7933\":[null,1],\"7934\":[null,1],\"7935\":[null,2],\"7936\":[null,3],\"7937\":[null,1],\"7938\":[null,2],\"7939\":[null,2],\"7940\":[null,2],\"7941\":[null,2],\"7942\":[null,2],\"7943\":[null,2],\"7944\":[2],\"7945\":[null,9],\"7946\":[null,8],\"7947\":[null,32],\"7948\":[2],\"7949\":[3],\"7950\":[null,5],\"7951\":[null,15],\"7952\":[null,19],\"7953\":[3],\"7954\":[null,15],\"7955\":[null,4],\"7956\":[null,36],\"7957\":[3],\"7958\":[null,2],\"7959\":[null,2],\"7960\":[null,4],\"7961\":[null,2],\"7962\":[null,3],\"7963\":[null,8],\"7964\":[null,2],\"7965\":[null,6],\"7966\":[null,3],\"7967\":[2],\"7968\":[null,1],\"7969\":[3],\"7970\":[null,84],\"7971\":[2],\"7972\":[null,5],\"7973\":[null,2],\"7974\":[3],\"7975\":[null,36],\"7976\":[2],\"7977\":[null,2],\"7978\":[null,18],\"7979\":[3],\"7980\":[null,43],\"7981\":[2],\"7982\":[null,4],\"7983\":[3],\"7984\":[null,6],\"7985\":[3],\"7986\":[null,6],\"7987\":[null,3],\"7988\":[3],\"7989\":[null,46],\"7990\":[2],\"7991\":[null,22],\"7992\":[2],\"7993\":[null,2],\"7994\":[2],\"7995\":[null,4],\"7996\":[null,3],\"7997\":[2],\"7998\":[3],\"7999\":[null,6],\"8000\":[null,4],\"8001\":[2],\"8002\":[null,4],\"8003\":[3],\"8004\":[null,15],\"8005\":[null,9],\"8006\":[2],\"8007\":[4],\"8008\":[null,4],\"8009\":[null,4],\"8010\":[4],\"8011\":[null,3],\"8012\":[null,6],\"8013\":[null,3],\"8014\":[null,2],\"8015\":[null,3],\"8016\":[null,6],\"8017\":[2],\"8018\":[null,5],\"8019\":[null,4],\"8020\":[2],\"8021\":[null,4],\"8022\":[null,4],\"8023\":[null,5],\"8024\":[null,5],\"8025\":[null,6],\"8026\":[null,6],\"8027\":[null,6],\"8028\":[5],\"8029\":[null,4],\"8030\":[2],\"8031\":[null,2],\"8032\":[null,3],\"8033\":[2],\"8034\":[null,2],\"8035\":[3],\"8036\":[null,2],\"8037\":[null,61],\"8038\":[2],\"8039\":[null,3],\"8040\":[3],\"8041\":[null,5],\"8042\":[null,15],\"8043\":[3],\"8044\":[null,2],\"8045\":[null,80],\"8046\":[3],\"8047\":[null,21],\"8048\":[2],\"8049\":[null,10],\"8050\":[null,9],\"8051\":[null,5],\"8052\":[3],\"8053\":[null,2],\"8054\":[null,93],\"8055\":[3],\"8056\":[null,22],\"8057\":[6],\"8058\":[null,6],\"8059\":[null,5],\"8060\":[2],\"8061\":[null,2],\"8062\":[null,4],\"8063\":[3],\"8064\":[null,5],\"8065\":[3],\"8066\":[null,5],\"8067\":[null,3],\"8068\":[null,4],\"8069\":[null,2],\"8070\":[null,4],\"8071\":[null,2],\"8072\":[null,2],\"8073\":[null,5],\"8074\":[2],\"8075\":[null,3],\"8076\":[3],\"8077\":[null,4],\"8078\":[null,6],\"8079\":[null,5],\"8080\":[2],\"8081\":[null,2],\"8082\":[null,2],\"8083\":[3],\"8084\":[null,54],\"8085\":[null,3],\"8086\":[null,3],\"8087\":[3],\"8088\":[null,2],\"8089\":[null,74],\"8090\":[3],\"8091\":[null,7],\"8092\":[null,5],\"8093\":[2],\"8094\":[4],\"8095\":[null,2],\"8096\":[null,3],\"8097\":[4],\"8098\":[null,2],\"8099\":[null,3],\"8100\":[4],\"8101\":[null,1],\"8102\":[null,3],\"8103\":[2],\"8104\":[null,3],\"8105\":[null,13],\"8106\":[3],\"8107\":[null,2],\"8108\":[null,3],\"8109\":[null,25],\"8110\":[3],\"8111\":[null,3],\"8112\":[null,4],\"8113\":[null,36],\"8114\":[3],\"8115\":[null,3],\"8116\":[null,7],\"8117\":[3],\"8118\":[null,4],\"8119\":[null,6],\"8120\":[3],\"8121\":[null,51],\"8122\":[3],\"8123\":[null,2],\"8124\":[null,10],\"8125\":[null,3],\"8126\":[null,46],\"8127\":[3],\"8128\":[null,1],\"8129\":[null,2],\"8130\":[2],\"8131\":[null,1],\"8132\":[3],\"8133\":[null,4],\"8134\":[null,5],\"8135\":[4],\"8136\":[null,3],\"8137\":[4],\"8138\":[null,3],\"8139\":[2],\"8140\":[null,7],\"8141\":[null,5],\"8142\":[1],\"8143\":[null,9],\"8144\":[2],\"8145\":[4],\"8146\":[null,46],\"8147\":[4],\"8148\":[null,61],\"8149\":[2],\"8150\":[null,7],\"8151\":[null,1],\"8152\":[4],\"8153\":[null,3],\"8154\":[4],\"8155\":[null,4],\"8156\":[null,5],\"8157\":[null,7],\"8158\":[null,7],\"8159\":[null,6],\"8160\":[null,5],\"8161\":[2],\"8162\":[null,44],\"8163\":[3],\"8164\":[2],\"8165\":[2],\"8166\":[null,6],\"8167\":[null,11],\"8168\":[null,8],\"8169\":[2],\"8170\":[null,3],\"8171\":[2],\"8172\":[null,4],\"8173\":[null,5],\"8174\":[null,6],\"8175\":[2],\"8176\":[2],\"8177\":[2],\"8178\":[null,3],\"8179\":[3],\"8180\":[null,5],\"8181\":[null,4],\"8182\":[null,4],\"8183\":[null,4],\"8184\":[2],\"8185\":[null,5],\"8186\":[4],\"8187\":[null,5],\"8188\":[null,3],\"8189\":[3],\"8190\":[null,3],\"8191\":[null,3],\"8192\":[null,5],\"8193\":[3],\"8194\":[null,2],\"8195\":[null,5],\"8196\":[null,2],\"8197\":[null,2],\"8198\":[null,6],\"8199\":[null,8],\"8200\":[3],\"8201\":[null,118],\"8202\":[2],\"8203\":[3],\"8204\":[null,1],\"8205\":[null,39],\"8206\":[3],\"8207\":[null,69],\"8208\":[2],\"8209\":[null,1],\"8210\":[null,80],\"8211\":[3],\"8212\":[2],\"8213\":[2],\"8214\":[4],\"8215\":[null,4],\"8216\":[null,1],\"8217\":[null,1],\"8218\":[5],\"8219\":[null,12],\"8220\":[null,2],\"8221\":[null,5],\"8222\":[null,9],\"8223\":[null,6],\"8224\":[2],\"8225\":[null,3],\"8226\":[3],\"8227\":[null,8],\"8228\":[null,5],\"8229\":[2],\"8230\":[null,8],\"8231\":[null,2],\"8232\":[2],\"8233\":[null,2],\"8234\":[null,2],\"8235\":[null,3],\"8236\":[2],\"8237\":[null,7],\"8238\":[null,8],\"8239\":[null,5],\"8240\":[null,6],\"8241\":[2],\"8242\":[null,14],\"8243\":[null,8],\"8244\":[null,5],\"8245\":[null,4],\"8246\":[null,3],\"8247\":[null,9],\"8248\":[null,4],\"8249\":[1],\"8250\":[null,5],\"8251\":[null,9],\"8252\":[3],\"8253\":[null,9],\"8254\":[4],\"8255\":[null,1],\"8256\":[null,1],\"8257\":[null,2],\"8258\":[2],\"8259\":[null,3],\"8260\":[null,38],\"8261\":[2],\"8262\":[null,3],\"8263\":[null,21],\"8264\":[2],\"8265\":[null,2],\"8266\":[null,1],\"8267\":[null,1],\"8268\":[null,1],\"8269\":[null,1],\"8270\":[null,12],\"8271\":[null,1],\"8272\":[null,17],\"8273\":[null,1],\"8274\":[null,1],\"8275\":[null,1],\"8276\":[null,4],\"8277\":[null,1],\"8278\":[null,6],\"8279\":[null,1],\"8280\":[null,1],\"8281\":[null,3],\"8282\":[null,1],\"8283\":[null,1],\"8284\":[null,1],\"8285\":[null,1],\"8286\":[null,1],\"8287\":[null,2],\"8288\":[null,1],\"8289\":[null,1],\"8290\":[null,1],\"8291\":[null,7],\"8292\":[null,1],\"8293\":[null,1],\"8294\":[null,6],\"8295\":[null,1],\"8296\":[null,2],\"8297\":[null,8],\"8298\":[null,1],\"8299\":[null,7],\"8300\":[null,1],\"8301\":[null,1],\"8302\":[null,3],\"8303\":[null,1],\"8304\":[null,1],\"8305\":[null,2],\"8306\":[null,1],\"8307\":[null,1],\"8308\":[null,7],\"8309\":[null,1],\"8310\":[null,5],\"8311\":[null,1],\"8312\":[null,2],\"8313\":[null,1],\"8314\":[null,1],\"8315\":[null,1],\"8316\":[null,1],\"8317\":[null,3],\"8318\":[null,1],\"8319\":[null,7],\"8320\":[null,1],\"8321\":[null,4],\"8322\":[2],\"8323\":[null,3],\"8324\":[null,34],\"8325\":[2],\"8326\":[null,25],\"8327\":[3],\"8328\":[3],\"8329\":[2],\"8330\":[null,3],\"8331\":[null,11],\"8332\":[2],\"8333\":[null,2],\"8334\":[2],\"8335\":[null,7],\"8336\":[null,8],\"8337\":[null,9],\"8338\":[5],\"8339\":[null,5],\"8340\":[null,14],\"8341\":[null,8],\"8342\":[null,10],\"8343\":[null,10],\"8344\":[null,10],\"8345\":[null,8],\"8346\":[null,3],\"8347\":[null,13],\"8348\":[5],\"8349\":[null,4],\"8350\":[null,2],\"8351\":[null,1],\"8352\":[null,5],\"8353\":[null,2],\"8354\":[null,2],\"8355\":[null,16],\"8356\":[null,1],\"8357\":[null,2],\"8358\":[null,34],\"8359\":[null,1],\"8360\":[null,2],\"8361\":[null,15],\"8362\":[null,15],\"8363\":[null,1],\"8364\":[null,2],\"8365\":[null,21],\"8366\":[null,1],\"8367\":[2],\"8368\":[null,11],\"8369\":[null,2],\"8370\":[null,3],\"8371\":[null,4],\"8372\":[null,3],\"8373\":[null,4],\"8374\":[null,3],\"8375\":[null,6],\"8376\":[null,5],\"8377\":[null,3],\"8378\":[null,2],\"8379\":[2],\"8380\":[2],\"8381\":[null,41],\"8382\":[2],\"8383\":[null,34],\"8384\":[2],\"8385\":[null,37],\"8386\":[2],\"8387\":[null,40],\"8388\":[2],\"8389\":[null,47],\"8390\":[6],\"8391\":[null,38],\"8392\":[3],\"8393\":[2],\"8394\":[2],\"8395\":[null,2],\"8396\":[null,9],\"8397\":[null,6],\"8398\":[null,4],\"8399\":[2],\"8400\":[null,6],\"8401\":[null,4],\"8402\":[null,8],\"8403\":[null,6],\"8404\":[2],\"8405\":[null,1],\"8406\":[null,1],\"8407\":[null,1],\"8408\":[null,1],\"8409\":[2],\"8410\":[null,5],\"8411\":[null,3],\"8412\":[null,2],\"8413\":[null,4],\"8414\":[null,3],\"8415\":[2],\"8416\":[null,7],\"8417\":[null,1],\"8418\":[null,2],\"8419\":[2],\"8420\":[null,2],\"8421\":[2],\"8422\":[null,1],\"8423\":[null,3],\"8424\":[null,2],\"8425\":[null,5],\"8426\":[null,5],\"8427\":[2],\"8428\":[null,5],\"8429\":[null,3],\"8430\":[2],\"8431\":[null,2],\"8432\":[2],\"8433\":[null,7],\"8434\":[null,5],\"8435\":[null,5],\"8436\":[2],\"8437\":[null,5],\"8438\":[null,4],\"8439\":[null,5],\"8440\":[2],\"8441\":[null,6],\"8442\":[null,7],\"8443\":[null,3],\"8444\":[2],\"8445\":[3],\"8446\":[null,4],\"8447\":[null,3],\"8448\":[null,2],\"8449\":[3],\"8450\":[null,7],\"8451\":[null,4],\"8452\":[null,6],\"8453\":[4],\"8454\":[null,3],\"8455\":[null,3],\"8456\":[2],\"8457\":[2],\"8458\":[null,10],\"8459\":[2],\"8460\":[null,3],\"8461\":[3],\"8462\":[null,3],\"8463\":[null,6],\"8464\":[3],\"8465\":[null,3],\"8466\":[null,3],\"8467\":[3],\"8468\":[null,5],\"8469\":[null,4],\"8470\":[null,2],\"8471\":[null,5],\"8472\":[3],\"8473\":[null,3],\"8474\":[null,5],\"8475\":[null,2],\"8476\":[null,3],\"8477\":[null,8],\"8478\":[null,5],\"8479\":[null,4],\"8480\":[1],\"8481\":[null,6],\"8482\":[null,4],\"8483\":[null,6],\"8484\":[2],\"8485\":[null,2],\"8486\":[2],\"8487\":[null,2],\"8488\":[4],\"8489\":[null,3],\"8490\":[null,2],\"8491\":[null,2],\"8492\":[4],\"8493\":[null,4],\"8494\":[null,2],\"8495\":[3],\"8496\":[null,2],\"8497\":[null,4],\"8498\":[null,5],\"8499\":[null,2],\"8500\":[null,2],\"8501\":[null,2],\"8502\":[2],\"8503\":[null,5],\"8504\":[null,2],\"8505\":[null,2],\"8506\":[null,5],\"8507\":[null,4],\"8508\":[null,2],\"8509\":[null,1],\"8510\":[2],\"8511\":[2],\"8512\":[null,2],\"8513\":[2],\"8514\":[null,2],\"8515\":[2],\"8516\":[null,3],\"8517\":[null,3],\"8518\":[null,4],\"8519\":[null,1],\"8520\":[2],\"8521\":[3],\"8522\":[2],\"8523\":[null,2],\"8524\":[null,2],\"8525\":[3],\"8526\":[null,8],\"8527\":[null,4],\"8528\":[null,3],\"8529\":[null,4],\"8530\":[null,6],\"8531\":[4],\"8532\":[null,6],\"8533\":[4],\"8534\":[null,8],\"8535\":[null,2],\"8536\":[2],\"8537\":[null,4],\"8538\":[null,4],\"8539\":[null,6],\"8540\":[null,2],\"8541\":[3],\"8542\":[null,5],\"8543\":[null,6],\"8544\":[null,2],\"8545\":[3],\"8546\":[3],\"8547\":[null,3],\"8548\":[null,8],\"8549\":[null,4],\"8550\":[null,2],\"8551\":[4],\"8552\":[null,5],\"8553\":[3],\"8554\":[null,3],\"8555\":[null,2],\"8556\":[5],\"8557\":[null,2],\"8558\":[3],\"8559\":[null,3],\"8560\":[null,3],\"8561\":[null,4],\"8562\":[null,2],\"8563\":[4],\"8564\":[null,2],\"8565\":[4],\"8566\":[null,4],\"8567\":[null,4],\"8568\":[null,4],\"8569\":[null,9],\"8570\":[null,4],\"8571\":[2],\"8572\":[1],\"8573\":[null,5],\"8574\":[null,3],\"8575\":[3],\"8576\":[null,6],\"8577\":[null,4],\"8578\":[null,6],\"8579\":[null,10],\"8580\":[3],\"8581\":[null,4],\"8582\":[null,6],\"8583\":[3],\"8584\":[null,4],\"8585\":[null,1],\"8586\":[null,4],\"8587\":[null,1],\"8588\":[4],\"8589\":[null,4],\"8590\":[3],\"8591\":[null,4],\"8592\":[null,4],\"8593\":[null,3],\"8594\":[null,7],\"8595\":[null,11],\"8596\":[null,5],\"8597\":[null,7],\"8598\":[null,2],\"8599\":[null,3],\"8600\":[null,6],\"8601\":[null,7],\"8602\":[null,6],\"8603\":[2],\"8604\":[null,7],\"8605\":[null,7],\"8606\":[2],\"8607\":[null,3],\"8608\":[null,3],\"8609\":[3],\"8610\":[null,9],\"8611\":[null,6],\"8612\":[3],\"8613\":[null,2],\"8614\":[null,5],\"8615\":[3],\"8616\":[null,4],\"8617\":[null,16],\"8618\":[2],\"8619\":[2],\"8620\":[null,5],\"8621\":[null,4],\"8622\":[2],\"8623\":[null,15],\"8624\":[null,4],\"8625\":[2],\"8626\":[null,6],\"8627\":[null,2],\"8628\":[null,3],\"8629\":[null,5],\"8630\":[2],\"8631\":[null,3],\"8632\":[null,4],\"8633\":[2],\"8634\":[2],\"8635\":[null,3],\"8636\":[null,7],\"8637\":[2],\"8638\":[null,3],\"8639\":[3],\"8640\":[null,3],\"8641\":[null,2],\"8642\":[2],\"8643\":[null,4],\"8644\":[null,1],\"8645\":[null,4],\"8646\":[null,1],\"8647\":[3],\"8648\":[null,3],\"8649\":[null,3],\"8650\":[null,4],\"8651\":[null,5],\"8652\":[2],\"8653\":[null,3],\"8654\":[null,2],\"8655\":[2],\"8656\":[null,2],\"8657\":[null,1],\"8658\":[null,1],\"8659\":[null,1],\"8660\":[null,1],\"8661\":[null,4],\"8662\":[null,1],\"8663\":[null,1],\"8664\":[null,1],\"8665\":[3],\"8666\":[null,1],\"8667\":[null,3],\"8668\":[2],\"8669\":[null,2],\"8670\":[null,7],\"8671\":[null,3],\"8672\":[null,4],\"8673\":[2],\"8674\":[null,4],\"8675\":[null,8],\"8676\":[null,4],\"8677\":[null,7],\"8678\":[2],\"8679\":[null,5],\"8680\":[null,6],\"8681\":[2],\"8682\":[null,14],\"8683\":[2],\"8684\":[null,4],\"8685\":[null,5],\"8686\":[3],\"8687\":[2],\"8688\":[1],\"8689\":[null,2],\"8690\":[null,3],\"8691\":[null,2],\"8692\":[null,4],\"8693\":[null,4],\"8694\":[null,1],\"8695\":[null,3],\"8696\":[null,3],\"8697\":[2],\"8698\":[null,3],\"8699\":[null,6],\"8700\":[null,3],\"8701\":[null,3],\"8702\":[2],\"8703\":[null,4],\"8704\":[null,25],\"8705\":[2],\"8706\":[null,3],\"8707\":[null,8],\"8708\":[2],\"8709\":[null,6],\"8710\":[null,5],\"8711\":[2],\"8712\":[null,3],\"8713\":[null,3],\"8714\":[3],\"8715\":[null,4],\"8716\":[2],\"8717\":[null,3],\"8718\":[2],\"8719\":[null,11],\"8720\":[null,3],\"8721\":[null,3],\"8722\":[null,3],\"8723\":[null,5],\"8724\":[null,3],\"8725\":[null,4],\"8726\":[2],\"8727\":[null,2],\"8728\":[null,3],\"8729\":[2],\"8730\":[null,2],\"8731\":[null,2],\"8732\":[2],\"8733\":[null,2],\"8734\":[null,5],\"8735\":[null,2],\"8736\":[2],\"8737\":[null,1],\"8738\":[null,2],\"8739\":[2],\"8740\":[null,3],\"8741\":[null,6],\"8742\":[null,3],\"8743\":[2],\"8744\":[3],\"8745\":[null,6],\"8746\":[3],\"8747\":[null,6],\"8748\":[2],\"8749\":[null,9],\"8750\":[null,3],\"8751\":[null,2],\"8752\":[null,3],\"8753\":[3],\"8754\":[null,7],\"8755\":[null,4],\"8756\":[3],\"8757\":[null,7],\"8758\":[3],\"8759\":[null,3],\"8760\":[3],\"8761\":[null,8],\"8762\":[3],\"8763\":[null,5],\"8764\":[null,19],\"8765\":[3],\"8766\":[null,4],\"8767\":[null,4],\"8768\":[null,19],\"8769\":[3],\"8770\":[null,3],\"8771\":[null,9],\"8772\":[null,25],\"8773\":[3],\"8774\":[null,4],\"8775\":[null,4],\"8776\":[null,4],\"8777\":[null,10],\"8778\":[3],\"8779\":[null,4],\"8780\":[null,2],\"8781\":[null,6],\"8782\":[3],\"8783\":[null,7],\"8784\":[null,22],\"8785\":[3],\"8786\":[null,6],\"8787\":[4],\"8788\":[null,2],\"8789\":[null,3],\"8790\":[null,1],\"8791\":[null,2],\"8792\":[2],\"8793\":[null,4],\"8794\":[null,5],\"8795\":[2],\"8796\":[null,11],\"8797\":[null,5],\"8798\":[2],\"8799\":[null,5],\"8800\":[2],\"8801\":[null,7],\"8802\":[null,4],\"8803\":[3],\"8804\":[null,3],\"8805\":[null,5],\"8806\":[null,14],\"8807\":[3],\"8808\":[null,2],\"8809\":[null,27],\"8810\":[null,2],\"8811\":[null,3],\"8812\":[null,3],\"8813\":[2],\"8814\":[null,4],\"8815\":[3],\"8816\":[null,3],\"8817\":[null,40],\"8818\":[null,6],\"8819\":[null,6],\"8820\":[null,2],\"8821\":[3],\"8822\":[null,3],\"8823\":[null,9],\"8824\":[null,5],\"8825\":[3],\"8826\":[null,1],\"8827\":[null,2],\"8828\":[null,3],\"8829\":[2],\"8830\":[2],\"8831\":[null,8],\"8832\":[2],\"8833\":[null,3],\"8834\":[null,14],\"8835\":[2],\"8836\":[null,6],\"8837\":[null,28],\"8838\":[2],\"8839\":[null,6],\"8840\":[2],\"8841\":[null,2],\"8842\":[null,3],\"8843\":[null,12],\"8844\":[2],\"8845\":[null,3],\"8846\":[null,2],\"8847\":[null,4],\"8848\":[null,11],\"8849\":[2],\"8850\":[null,3],\"8851\":[null,2],\"8852\":[null,3],\"8853\":[null,5],\"8854\":[null,11],\"8855\":[2],\"8856\":[null,2],\"8857\":[null,10],\"8858\":[null,4],\"8859\":[null,5],\"8860\":[null,3],\"8861\":[null,4],\"8862\":[null,5],\"8863\":[2],\"8864\":[null,5],\"8865\":[2],\"8866\":[null,1],\"8867\":[null,3],\"8868\":[3],\"8869\":[2],\"8870\":[1],\"8871\":[null,3],\"8872\":[null,6],\"8873\":[2],\"8874\":[null,3],\"8875\":[null,5],\"8876\":[null,2],\"8877\":[null,2],\"8878\":[null,3],\"8879\":[null,4],\"8880\":[null,3],\"8881\":[null,2],\"8882\":[null,2],\"8883\":[null,1],\"8884\":[null,2],\"8885\":[null,1],\"8886\":[null,2],\"8887\":[3],\"8888\":[null,1],\"8889\":[null,5],\"8890\":[null,3],\"8891\":[null,2],\"8892\":[null,2],\"8893\":[3],\"8894\":[null,1],\"8895\":[null,2],\"8896\":[null,1],\"8897\":[null,6],\"8898\":[null,2],\"8899\":[2],\"8900\":[1],\"8901\":[null,2],\"8902\":[null,2],\"8903\":[null,3],\"8904\":[2],\"8905\":[null,3],\"8906\":[null,6],\"8907\":[2],\"8908\":[null,4],\"8909\":[null,3],\"8910\":[null,6],\"8911\":[null,3],\"8912\":[null,10],\"8913\":[2],\"8914\":[null,3],\"8915\":[null,3],\"8916\":[null,3],\"8917\":[2],\"8918\":[null,1],\"8919\":[2],\"8920\":[null,2],\"8921\":[2],\"8922\":[null,2],\"8923\":[3],\"8924\":[2],\"8925\":[1],\"8926\":[null,4],\"8927\":[null,2],\"8928\":[null,3],\"8929\":[2],\"8930\":[null,4],\"8931\":[null,3],\"8932\":[null,3],\"8933\":[null,3],\"8934\":[null,5],\"8935\":[null,3],\"8936\":[null,4],\"8937\":[null,5],\"8938\":[null,3],\"8939\":[null,5],\"8940\":[null,4],\"8941\":[null,2],\"8942\":[2],\"8943\":[null,7],\"8944\":[null,54],\"8945\":[2],\"8946\":[null,2],\"8947\":[null,3],\"8948\":[3],\"8949\":[null,4],\"8950\":[2],\"8951\":[null,25],\"8952\":[2],\"8953\":[null,3],\"8954\":[null,5],\"8955\":[null,23],\"8956\":[null,2],\"8957\":[null,1],\"8958\":[null,1],\"8959\":[null,2],\"8960\":[null,3],\"8961\":[null,4],\"8962\":[null,4],\"8963\":[null,3],\"8964\":[null,2],\"8965\":[null,1],\"8966\":[null,3],\"8967\":[null,3],\"8968\":[null,3],\"8969\":[null,3],\"8970\":[null,2],\"8971\":[null,2],\"8972\":[null,1],\"8973\":[2],\"8974\":[2],\"8975\":[null,4],\"8976\":[null,3],\"8977\":[2],\"8978\":[null,3],\"8979\":[null,4],\"8980\":[3],\"8981\":[null,3],\"8982\":[null,3],\"8983\":[2],\"8984\":[null,2],\"8985\":[null,3],\"8986\":[2],\"8987\":[3],\"8988\":[null,20],\"8989\":[3],\"8990\":[null,28],\"8991\":[2],\"8992\":[null,6],\"8993\":[2],\"8994\":[null,1],\"8995\":[null,3],\"8996\":[null,3],\"8997\":[3],\"8998\":[null,2],\"8999\":[null,9],\"9000\":[null,5],\"9001\":[2],\"9002\":[null,5],\"9003\":[null,4],\"9004\":[null,41],\"9005\":[2],\"9006\":[null,2],\"9007\":[null,6],\"9008\":[2],\"9009\":[2],\"9010\":[2],\"9011\":[null,2],\"9012\":[null,2],\"9013\":[3],\"9014\":[null,2],\"9015\":[null,3],\"9016\":[4],\"9017\":[null,6],\"9018\":[null,3],\"9019\":[2],\"9020\":[null,2],\"9021\":[null,17],\"9022\":[2],\"9023\":[3],\"9024\":[null,2],\"9025\":[null,27],\"9026\":[3],\"9027\":[null,57],\"9028\":[2],\"9029\":[null,3],\"9030\":[null,3],\"9031\":[null,21],\"9032\":[2],\"9033\":[null,4],\"9034\":[null,1],\"9035\":[null,4],\"9036\":[1],\"9037\":[null,9],\"9038\":[null,2],\"9039\":[2],\"9040\":[null,2],\"9041\":[null,3],\"9042\":[null,4],\"9043\":[2],\"9044\":[null,2],\"9045\":[null,2],\"9046\":[null,6],\"9047\":[2],\"9048\":[null,9],\"9049\":[2],\"9050\":[null,7],\"9051\":[null,2],\"9052\":[2],\"9053\":[null,1],\"9054\":[null,5],\"9055\":[3],\"9056\":[2],\"9057\":[null,6],\"9058\":[null,2],\"9059\":[2],\"9060\":[null,3],\"9061\":[null,2],\"9062\":[null,5],\"9063\":[2],\"9064\":[null,3],\"9065\":[null,6],\"9066\":[5],\"9067\":[null,1],\"9068\":[null,3],\"9069\":[null,1],\"9070\":[null,3],\"9071\":[2],\"9072\":[null,1],\"9073\":[2],\"9074\":[null,3],\"9075\":[null,7],\"9076\":[null,5],\"9077\":[3],\"9078\":[null,7],\"9079\":[null,25],\"9080\":[2],\"9081\":[null,5],\"9082\":[null,12],\"9083\":[3],\"9084\":[null,7],\"9085\":[null,11],\"9086\":[2],\"9087\":[null,4],\"9088\":[2],\"9089\":[2],\"9090\":[null,3],\"9091\":[null,7],\"9092\":[null,5],\"9093\":[3],\"9094\":[null,4],\"9095\":[null,28],\"9096\":[1],\"9097\":[null,4],\"9098\":[null,3],\"9099\":[null,19],\"9100\":[3],\"9101\":[null,22],\"9102\":[3],\"9103\":[3],\"9104\":[2],\"9105\":[null,2],\"9106\":[null,1],\"9107\":[null,1],\"9108\":[null,1],\"9109\":[null,3],\"9110\":[2],\"9111\":[null,3],\"9112\":[null,15],\"9113\":[2],\"9114\":[null,3],\"9115\":[null,4],\"9116\":[null,3],\"9117\":[2],\"9118\":[null,3],\"9119\":[null,15],\"9120\":[3],\"9121\":[null,5],\"9122\":[null,6],\"9123\":[null,5],\"9124\":[null,36],\"9125\":[2],\"9126\":[null,7],\"9127\":[null,2],\"9128\":[null,2],\"9129\":[3],\"9130\":[null,4],\"9131\":[null,3],\"9132\":[2],\"9133\":[null,2],\"9134\":[null,2],\"9135\":[null,1],\"9136\":[null,2],\"9137\":[2],\"9138\":[null,5],\"9139\":[null,11],\"9140\":[3],\"9141\":[null,3],\"9142\":[3],\"9143\":[null,29],\"9144\":[3],\"9145\":[null,22],\"9146\":[2],\"9147\":[null,5],\"9148\":[null,3],\"9149\":[null,5],\"9150\":[2],\"9151\":[null,4],\"9152\":[null,3],\"9153\":[null,5],\"9154\":[2],\"9155\":[null,5],\"9156\":[null,1],\"9157\":[null,3],\"9158\":[null,2],\"9159\":[null,5],\"9160\":[null,1],\"9161\":[null,1],\"9162\":[null,2],\"9163\":[2],\"9164\":[2],\"9165\":[null,4],\"9166\":[null,3],\"9167\":[null,3],\"9168\":[null,4],\"9169\":[null,3],\"9170\":[null,3],\"9171\":[null,4],\"9172\":[2],\"9173\":[null,3],\"9174\":[null,11],\"9175\":[3],\"9176\":[2],\"9177\":[2],\"9178\":[null,3],\"9179\":[null,4],\"9180\":[null,4],\"9181\":[2],\"9182\":[null,2],\"9183\":[null,3],\"9184\":[null,18],\"9185\":[null,5],\"9186\":[2],\"9187\":[null,4],\"9188\":[null,3],\"9189\":[1],\"9190\":[null,1],\"9191\":[null,3],\"9192\":[null,2],\"9193\":[2],\"9194\":[null,5],\"9195\":[null,5],\"9196\":[null,6],\"9197\":[null,2],\"9198\":[1],\"9199\":[null,6],\"9200\":[null,4],\"9201\":[null,3],\"9202\":[null,3],\"9203\":[null,4],\"9204\":[2],\"9205\":[null,6],\"9206\":[2],\"9207\":[null,4],\"9208\":[null,3],\"9209\":[null,3],\"9210\":[2],\"9211\":[2],\"9212\":[null,5],\"9213\":[null,2],\"9214\":[2],\"9215\":[null,1],\"9216\":[null,2],\"9217\":[null,3],\"9218\":[2],\"9219\":[null,3],\"9220\":[null,14],\"9221\":[null,1],\"9222\":[null,4],\"9223\":[null,1],\"9224\":[null,4],\"9225\":[2],\"9226\":[3],\"9227\":[null,1],\"9228\":[null,3],\"9229\":[null,9],\"9230\":[3],\"9231\":[null,11],\"9232\":[null,13],\"9233\":[6],\"9234\":[null,22],\"9235\":[2],\"9236\":[null,3],\"9237\":[null,3],\"9238\":[2],\"9239\":[null,3],\"9240\":[null,4],\"9241\":[3],\"9242\":[null,5],\"9243\":[null,3],\"9244\":[null,8],\"9245\":[4],\"9246\":[null,7],\"9247\":[null,4],\"9248\":[null,5],\"9249\":[null,19],\"9250\":[2],\"9251\":[null,4],\"9252\":[4],\"9253\":[null,4],\"9254\":[null,3],\"9255\":[null,4],\"9256\":[3],\"9257\":[null,1],\"9258\":[null,3],\"9259\":[null,5],\"9260\":[null,12],\"9261\":[3],\"9262\":[null,26],\"9263\":[3],\"9264\":[null,1],\"9265\":[null,3],\"9266\":[2],\"9267\":[null,4],\"9268\":[2],\"9269\":[null,4],\"9270\":[null,36],\"9271\":[2],\"9272\":[null,4],\"9273\":[null,2],\"9274\":[1],\"9275\":[null,6],\"9276\":[null,6],\"9277\":[1],\"9278\":[null,4],\"9279\":[null,5],\"9280\":[2],\"9281\":[null,3],\"9282\":[null,5],\"9283\":[null,5],\"9284\":[null,4],\"9285\":[null,3],\"9286\":[null,14],\"9287\":[2],\"9288\":[null,4],\"9289\":[null,4],\"9290\":[null,4],\"9291\":[null,4],\"9292\":[null,5],\"9293\":[null,4],\"9294\":[null,6],\"9295\":[null,8],\"9296\":[1],\"9297\":[null,2],\"9298\":[null,8],\"9299\":[3],\"9300\":[null,2],\"9301\":[null,2],\"9302\":[1],\"9303\":[null,2],\"9304\":[null,5],\"9305\":[null,5],\"9306\":[null,1],\"9307\":[null,5],\"9308\":[null,5],\"9309\":[2],\"9310\":[null,2],\"9311\":[null,6],\"9312\":[3],\"9313\":[null,1],\"9314\":[null,10],\"9315\":[2],\"9316\":[2],\"9317\":[null,2],\"9318\":[null,8],\"9319\":[null,6],\"9320\":[2],\"9321\":[null,4],\"9322\":[3],\"9323\":[null,6],\"9324\":[2],\"9325\":[null,3],\"9326\":[null,1],\"9327\":[null,1],\"9328\":[null,1],\"9329\":[2],\"9330\":[null,3],\"9331\":[2],\"9332\":[null,2],\"9333\":[null,1],\"9334\":[null,1],\"9335\":[null,4],\"9336\":[null,1],\"9337\":[null,4],\"9338\":[null,1],\"9339\":[null,3],\"9340\":[2],\"9341\":[null,2],\"9342\":[null,1],\"9343\":[null,1],\"9344\":[null,4],\"9345\":[null,1],\"9346\":[null,4],\"9347\":[null,1],\"9348\":[null,3],\"9349\":[2],\"9350\":[null,2],\"9351\":[null,1],\"9352\":[null,1],\"9353\":[null,4],\"9354\":[null,1],\"9355\":[null,4],\"9356\":[null,1],\"9357\":[null,4],\"9358\":[2],\"9359\":[null,3],\"9360\":[null,1],\"9361\":[null,1],\"9362\":[null,4],\"9363\":[null,1],\"9364\":[null,4],\"9365\":[null,1],\"9366\":[null,4],\"9367\":[null,1],\"9368\":[null,3],\"9369\":[null,1],\"9370\":[null,1],\"9371\":[null,2],\"9372\":[null,1],\"9373\":[null,2],\"9374\":[null,1],\"9375\":[null,2],\"9376\":[null,1],\"9377\":[2],\"9378\":[null,3],\"9379\":[null,1],\"9380\":[null,1],\"9381\":[null,4],\"9382\":[null,1],\"9383\":[null,4],\"9384\":[null,1],\"9385\":[null,4],\"9386\":[null,1],\"9387\":[null,3],\"9388\":[null,1],\"9389\":[null,1],\"9390\":[null,2],\"9391\":[null,1],\"9392\":[null,2],\"9393\":[null,1],\"9394\":[null,2],\"9395\":[null,1],\"9396\":[2],\"9397\":[null,3],\"9398\":[null,1],\"9399\":[null,1],\"9400\":[null,4],\"9401\":[null,1],\"9402\":[null,4],\"9403\":[null,1],\"9404\":[null,4],\"9405\":[null,1],\"9406\":[null,3],\"9407\":[null,1],\"9408\":[null,1],\"9409\":[null,2],\"9410\":[null,1],\"9411\":[null,2],\"9412\":[null,1],\"9413\":[null,2],\"9414\":[null,1],\"9415\":[2],\"9416\":[null,2],\"9417\":[null,1],\"9418\":[null,1],\"9419\":[null,4],\"9420\":[null,1],\"9421\":[null,4],\"9422\":[null,1],\"9423\":[null,3],\"9424\":[null,1],\"9425\":[null,1],\"9426\":[null,2],\"9427\":[null,1],\"9428\":[null,2],\"9429\":[null,1],\"9430\":[null,2],\"9431\":[null,1],\"9432\":[2],\"9433\":[null,3],\"9434\":[null,1],\"9435\":[null,1],\"9436\":[null,4],\"9437\":[null,1],\"9438\":[null,4],\"9439\":[null,1],\"9440\":[null,4],\"9441\":[2],\"9442\":[null,5],\"9443\":[2],\"9444\":[null,2],\"9445\":[null,1],\"9446\":[null,3],\"9447\":[2],\"9448\":[null,2],\"9449\":[null,6],\"9450\":[null,5],\"9451\":[1],\"9452\":[null,18],\"9453\":[2],\"9454\":[null,2],\"9455\":[null,1],\"9456\":[null,7],\"9457\":[2],\"9458\":[null,2],\"9459\":[1],\"9460\":[null,3],\"9461\":[null,3],\"9462\":[null,3],\"9463\":[null,1],\"9464\":[null,3],\"9465\":[3],\"9466\":[2],\"9467\":[2],\"9468\":[null,13],\"9469\":[null,10],\"9470\":[2],\"9471\":[null,8],\"9472\":[2],\"9473\":[null,26],\"9474\":[2],\"9475\":[null,4],\"9476\":[null,4],\"9477\":[null,4],\"9478\":[2],\"9479\":[null,8],\"9480\":[2],\"9481\":[null,1],\"9482\":[null,1],\"9483\":[null,3],\"9484\":[null,1],\"9485\":[2],\"9486\":[3],\"9487\":[null,16],\"9488\":[3],\"9489\":[null,8],\"9490\":[2],\"9491\":[2],\"9492\":[null,3],\"9493\":[null,4],\"9494\":[null,5],\"9495\":[null,12],\"9496\":[2],\"9497\":[3],\"9498\":[null,3],\"9499\":[null,2],\"9500\":[null,8],\"9501\":[null,2],\"9502\":[null,1],\"9503\":[null,7],\"9504\":[2],\"9505\":[null,7],\"9506\":[null,7],\"9507\":[null,7],\"9508\":[null,2],\"9509\":[null,9],\"9510\":[null,2],\"9511\":[null,2],\"9512\":[null,2],\"9513\":[null,5],\"9514\":[2],\"9515\":[null,1],\"9516\":[null,2],\"9517\":[null,3],\"9518\":[2],\"9519\":[2],\"9520\":[null,8],\"9521\":[2],\"9522\":[null,3],\"9523\":[null,9],\"9524\":[null,9],\"9525\":[null,6],\"9526\":[2],\"9527\":[null,11],\"9528\":[2],\"9529\":[null,7],\"9530\":[null,13],\"9531\":[2],\"9532\":[null,1],\"9533\":[null,4],\"9534\":[null,2],\"9535\":[3],\"9536\":[2],\"9537\":[2],\"9538\":[null,3],\"9539\":[null,6],\"9540\":[null,4],\"9541\":[null,6],\"9542\":[null,1],\"9543\":[null,5],\"9544\":[null,1],\"9545\":[null,1],\"9546\":[null,1],\"9547\":[2],\"9548\":[null,10],\"9549\":[null,3],\"9550\":[2],\"9551\":[null,5],\"9552\":[null,2],\"9553\":[null,1],\"9554\":[2],\"9555\":[null,1],\"9556\":[2],\"9557\":[null,6],\"9558\":[null,2],\"9559\":[null,5],\"9560\":[null,10],\"9561\":[null,5],\"9562\":[null,2],\"9563\":[2],\"9564\":[null,8],\"9565\":[2],\"9566\":[null,2],\"9567\":[null,4],\"9568\":[null,2],\"9569\":[null,6],\"9570\":[2],\"9571\":[null,3],\"9572\":[null,2],\"9573\":[null,2],\"9574\":[null,2],\"9575\":[null,3],\"9576\":[2],\"9577\":[2],\"9578\":[null,3],\"9579\":[null,19],\"9580\":[2],\"9581\":[null,13],\"9582\":[2],\"9583\":[null,5],\"9584\":[null,6],\"9585\":[null,5],\"9586\":[3],\"9587\":[null,1],\"9588\":[null,4],\"9589\":[null,4],\"9590\":[3],\"9591\":[null,6],\"9592\":[null,3],\"9593\":[2],\"9594\":[null,3],\"9595\":[null,2],\"9596\":[null,2],\"9597\":[2],\"9598\":[null,3],\"9599\":[null,2],\"9600\":[2],\"9601\":[null,2],\"9602\":[null,1],\"9603\":[null,1],\"9604\":[null,3],\"9605\":[null,1],\"9606\":[null,1],\"9607\":[2],\"9608\":[null,20],\"9609\":[2],\"9610\":[null,2],\"9611\":[null,6],\"9612\":[null,5],\"9613\":[null,10],\"9614\":[null,7],\"9615\":[null,3],\"9616\":[null,4],\"9617\":[null,4],\"9618\":[null,4],\"9619\":[null,4],\"9620\":[null,3],\"9621\":[2],\"9622\":[2],\"9623\":[null,7],\"9624\":[null,4],\"9625\":[2],\"9626\":[null,6],\"9627\":[null,2],\"9628\":[null,3],\"9629\":[2],\"9630\":[3],\"9631\":[null,27],\"9632\":[3],\"9633\":[null,18],\"9634\":[3],\"9635\":[null,27],\"9636\":[2],\"9637\":[null,7],\"9638\":[3],\"9639\":[null,1],\"9640\":[null,4],\"9641\":[null,4],\"9642\":[null,99],\"9643\":[3],\"9644\":[null,3],\"9645\":[null,52],\"9646\":[3],\"9647\":[null,1],\"9648\":[null,4],\"9649\":[null,1],\"9650\":[2],\"9651\":[2],\"9652\":[null,6],\"9653\":[null,2],\"9654\":[null,4],\"9655\":[null,3],\"9656\":[null,3],\"9657\":[2],\"9658\":[null,4],\"9659\":[null,3],\"9660\":[2],\"9661\":[null,4],\"9662\":[null,3],\"9663\":[null,1],\"9664\":[null,2],\"9665\":[null,1],\"9666\":[2],\"9667\":[null,9],\"9668\":[2],\"9669\":[null,2],\"9670\":[null,5],\"9671\":[2],\"9672\":[null,4],\"9673\":[2],\"9674\":[null,4],\"9675\":[null,4],\"9676\":[null,3],\"9677\":[null,3],\"9678\":[2],\"9679\":[3],\"9680\":[null,2],\"9681\":[null,9],\"9682\":[2],\"9683\":[null,3],\"9684\":[null,8],\"9685\":[3],\"9686\":[null,3],\"9687\":[null,7],\"9688\":[3],\"9689\":[null,4],\"9690\":[null,15],\"9691\":[2],\"9692\":[4],\"9693\":[null,20],\"9694\":[4],\"9695\":[null,34],\"9696\":[2],\"9697\":[null,5],\"9698\":[3],\"9699\":[null,6],\"9700\":[null,4],\"9701\":[null,3],\"9702\":[5],\"9703\":[null,3],\"9704\":[null,3],\"9705\":[null,3],\"9706\":[3],\"9707\":[null,3],\"9708\":[null,3],\"9709\":[null,3],\"9710\":[null,3],\"9711\":[2],\"9712\":[null,3],\"9713\":[null,2],\"9714\":[null,12],\"9715\":[2],\"9716\":[null,4],\"9717\":[null,13],\"9718\":[null,2],\"9719\":[null,4],\"9720\":[null,4],\"9721\":[null,5],\"9722\":[null,4],\"9723\":[2],\"9724\":[null,8],\"9725\":[null,7],\"9726\":[null,22],\"9727\":[2],\"9728\":[4],\"9729\":[null,4],\"9730\":[null,9],\"9731\":[3],\"9732\":[null,10],\"9733\":[2],\"9734\":[null,2],\"9735\":[null,1],\"9736\":[null,7],\"9737\":[null,2],\"9738\":[null,1],\"9739\":[null,2],\"9740\":[2],\"9741\":[2],\"9742\":[null,5],\"9743\":[null,4],\"9744\":[2],\"9745\":[null,2],\"9746\":[null,2],\"9747\":[null,2],\"9748\":[2],\"9749\":[null,2],\"9750\":[null,14],\"9751\":[2],\"9752\":[3],\"9753\":[null,7],\"9754\":[3],\"9755\":[null,5],\"9756\":[3],\"9757\":[null,5],\"9758\":[2],\"9759\":[null,2],\"9760\":[null,4],\"9761\":[2],\"9762\":[null,4],\"9763\":[null,4],\"9764\":[null,5],\"9765\":[null,1],\"9766\":[null,3],\"9767\":[null,3],\"9768\":[null,7],\"9769\":[2],\"9770\":[null,4],\"9771\":[null,3],\"9772\":[1],\"9773\":[null,4],\"9774\":[null,12],\"9775\":[2],\"9776\":[null,5],\"9777\":[null,3],\"9778\":[null,4],\"9779\":[null,5],\"9780\":[2],\"9781\":[2],\"9782\":[null,4],\"9783\":[null,9],\"9784\":[null,3],\"9785\":[null,8],\"9786\":[3],\"9787\":[null,3],\"9788\":[2],\"9789\":[null,2],\"9790\":[null,2],\"9791\":[2],\"9792\":[2],\"9793\":[null,5],\"9794\":[null,3],\"9795\":[null,3],\"9796\":[null,4],\"9797\":[null,3],\"9798\":[2],\"9799\":[null,2],\"9800\":[null,2],\"9801\":[null,2],\"9802\":[null,2],\"9803\":[2],\"9804\":[null,1],\"9805\":[null,1],\"9806\":[3],\"9807\":[2],\"9808\":[null,3],\"9809\":[2],\"9810\":[2],\"9811\":[null,3],\"9812\":[null,2],\"9813\":[null,2],\"9814\":[3],\"9815\":[null,10],\"9816\":[1],\"9817\":[null,1],\"9818\":[null,13],\"9819\":[2],\"9820\":[null,8],\"9821\":[null,7],\"9822\":[2],\"9823\":[null,8],\"9824\":[null,8],\"9825\":[2],\"9826\":[2],\"9827\":[null,4],\"9828\":[null,3],\"9829\":[3],\"9830\":[null,1],\"9831\":[null,12],\"9832\":[null,5],\"9833\":[3],\"9834\":[null,9],\"9835\":[null,8],\"9836\":[2],\"9837\":[null,10],\"9838\":[null,10],\"9839\":[2],\"9840\":[null,11],\"9841\":[2],\"9842\":[null,1],\"9843\":[null,5],\"9844\":[null,4],\"9845\":[null,5],\"9846\":[null,4],\"9847\":[null,6],\"9848\":[null,4],\"9849\":[null,2],\"9850\":[1],\"9851\":[2],\"9852\":[null,9],\"9853\":[2],\"9854\":[null,16],\"9855\":[2],\"9856\":[null,5],\"9857\":[null,2],\"9858\":[null,2],\"9859\":[null,2],\"9860\":[null,2],\"9861\":[null,2],\"9862\":[null,3],\"9863\":[2],\"9864\":[null,6],\"9865\":[1],\"9866\":[null,8],\"9867\":[3],\"9868\":[1],\"9869\":[null,1],\"9870\":[null,1],\"9871\":[null,3],\"9872\":[2],\"9873\":[null,10],\"9874\":[null,3],\"9875\":[2],\"9876\":[null,3],\"9877\":[null,2],\"9878\":[null,2],\"9879\":[null,2],\"9880\":[null,2],\"9881\":[null,2],\"9882\":[null,2],\"9883\":[null,2],\"9884\":[null,2],\"9885\":[null,2],\"9886\":[null,3],\"9887\":[2],\"9888\":[null,10],\"9889\":[null,4],\"9890\":[2],\"9891\":[null,4],\"9892\":[null,6],\"9893\":[null,5],\"9894\":[null,2],\"9895\":[null,45],\"9896\":[2],\"9897\":[1],\"9898\":[null,7],\"9899\":[null,11],\"9900\":[null,7],\"9901\":[null,8],\"9902\":[null,16],\"9903\":[1],\"9904\":[null,2],\"9905\":[null,2],\"9906\":[null,2],\"9907\":[null,2],\"9908\":[3],\"9909\":[1],\"9910\":[null,4],\"9911\":[4],\"9912\":[null,6],\"9913\":[null,2],\"9914\":[2],\"9915\":[null,10],\"9916\":[null,5],\"9917\":[1],\"9918\":[null,1],\"9919\":[null,3],\"9920\":[2],\"9921\":[null,7],\"9922\":[2],\"9923\":[null,3],\"9924\":[2],\"9925\":[null,7],\"9926\":[2],\"9927\":[null,5],\"9928\":[null,2],\"9929\":[2],\"9930\":[null,1],\"9931\":[null,2],\"9932\":[null,3],\"9933\":[1],\"9934\":[null,2],\"9935\":[null,2],\"9936\":[null,3],\"9937\":[null,2],\"9938\":[null,5],\"9939\":[null,1],\"9940\":[null,1],\"9941\":[null,1],\"9942\":[null,1],\"9943\":[null,1],\"9944\":[null,1],\"9945\":[null,1],\"9946\":[null,1],\"9947\":[null,1],\"9948\":[null,1],\"9949\":[null,1],\"9950\":[null,1],\"9951\":[1],\"9952\":[null,5],\"9953\":[null,3],\"9954\":[1],\"9955\":[null,4],\"9956\":[null,7],\"9957\":[null,2],\"9958\":[null,1],\"9959\":[null,5],\"9960\":[null,2],\"9961\":[null,3],\"9962\":[null,5],\"9963\":[1],\"9964\":[2],\"9965\":[null,10],\"9966\":[2],\"9967\":[null,10],\"9968\":[null,4],\"9969\":[null,4],\"9970\":[2],\"9971\":[null,5],\"9972\":[null,8],\"9973\":[null,8],\"9974\":[null,7],\"9975\":[null,2],\"9976\":[2],\"9977\":[null,2],\"9978\":[null,2],\"9979\":[null,3],\"9980\":[null,2],\"9981\":[null,2],\"9982\":[null,1],\"9983\":[null,3],\"9984\":[null,1],\"9985\":[null,1],\"9986\":[null,1],\"9987\":[null,3],\"9988\":[null,1],\"9989\":[null,1],\"9990\":[null,3],\"9991\":[null,1],\"9992\":[null,1],\"9993\":[null,3],\"9994\":[null,6],\"9995\":[1],\"9996\":[null,3],\"9997\":[null,1],\"9998\":[null,3],\"9999\":[null,5],\"10000\":[null,1],\"10001\":[null,1],\"10002\":[null,4],\"10003\":[null,1],\"10004\":[null,1],\"10005\":[null,5],\"10006\":[null,1],\"10007\":[null,1],\"10008\":[null,6],\"10009\":[null,2],\"10010\":[null,3],\"10011\":[null,7],\"10012\":[2],\"10013\":[3],\"10014\":[null,11],\"10015\":[2],\"10016\":[null,6],\"10017\":[2],\"10018\":[null,2],\"10019\":[2],\"10020\":[null,3],\"10021\":[null,6],\"10022\":[null,3],\"10023\":[null,2],\"10024\":[null,4],\"10025\":[2],\"10026\":[null,4],\"10027\":[3],\"10028\":[null,4],\"10029\":[null,4],\"10030\":[null,4],\"10031\":[null,5],\"10032\":[3],\"10033\":[null,4],\"10034\":[null,8],\"10035\":[null,9],\"10036\":[null,9],\"10037\":[null,7],\"10038\":[null,6],\"10039\":[2],\"10040\":[null,4],\"10041\":[null,3],\"10042\":[null,3],\"10043\":[null,2],\"10044\":[null,2],\"10045\":[2],\"10046\":[null,4],\"10047\":[2],\"10048\":[2],\"10049\":[null,1],\"10050\":[null,1],\"10051\":[null,1],\"10052\":[null,1],\"10053\":[null,1],\"10054\":[null,1],\"10055\":[null,1],\"10056\":[null,1],\"10057\":[null,1],\"10058\":[null,1],\"10059\":[null,2],\"10060\":[null,1],\"10061\":[null,1],\"10062\":[null,2],\"10063\":[null,1],\"10064\":[null,1],\"10065\":[null,2],\"10066\":[null,1],\"10067\":[null,1],\"10068\":[null,1],\"10069\":[null,2],\"10070\":[null,2],\"10071\":[null,1],\"10072\":[null,1],\"10073\":[null,2],\"10074\":[null,2],\"10075\":[null,3],\"10076\":[2],\"10077\":[null,8],\"10078\":[null,14],\"10079\":[null,11],\"10080\":[2],\"10081\":[null,13],\"10082\":[null,12],\"10083\":[null,19],\"10084\":[2],\"10085\":[null,1],\"10086\":[null,1],\"10087\":[null,1],\"10088\":[null,1],\"10089\":[null,1],\"10090\":[null,3],\"10091\":[null,1],\"10092\":[null,2],\"10093\":[null,3],\"10094\":[null,1],\"10095\":[null,1],\"10096\":[null,3],\"10097\":[null,1],\"10098\":[null,1],\"10099\":[null,5],\"10100\":[null,1],\"10101\":[null,2],\"10102\":[null,5],\"10103\":[null,1],\"10104\":[null,1],\"10105\":[null,3],\"10106\":[null,1],\"10107\":[null,1],\"10108\":[null,3],\"10109\":[null,1],\"10110\":[null,1],\"10111\":[null,4],\"10112\":[null,1],\"10113\":[null,1],\"10114\":[null,3],\"10115\":[4],\"10116\":[null,6],\"10117\":[2],\"10118\":[null,4],\"10119\":[null,8],\"10120\":[null,6],\"10121\":[2],\"10122\":[null,6],\"10123\":[null,5],\"10124\":[3],\"10125\":[null,4],\"10126\":[2],\"10127\":[2],\"10128\":[null,8],\"10129\":[null,2],\"10130\":[null,1],\"10131\":[null,5],\"10132\":[null,1],\"10133\":[null,1],\"10134\":[null,2],\"10135\":[2],\"10136\":[null,8],\"10137\":[2],\"10138\":[null,1],\"10139\":[null,6],\"10140\":[3],\"10141\":[null,3],\"10142\":[null,5],\"10143\":[null,3],\"10144\":[null,3],\"10145\":[null,3],\"10146\":[3],\"10147\":[null,3],\"10148\":[null,8],\"10149\":[null,11],\"10150\":[null,1],\"10151\":[null,5],\"10152\":[2],\"10153\":[2],\"10154\":[null,6],\"10155\":[2],\"10156\":[null,4],\"10157\":[null,10],\"10158\":[null,1],\"10159\":[null,13],\"10160\":[2],\"10161\":[null,4],\"10162\":[null,44],\"10163\":[2],\"10164\":[null,32],\"10165\":[2],\"10166\":[null,3],\"10167\":[null,19],\"10168\":[2],\"10169\":[null,1],\"10170\":[null,2],\"10171\":[3],\"10172\":[null,1],\"10173\":[null,6],\"10174\":[3],\"10175\":[null,7],\"10176\":[null,1],\"10177\":[null,12],\"10178\":[null,2],\"10179\":[2],\"10180\":[null,1],\"10181\":[null,6],\"10182\":[2],\"10183\":[null,5],\"10184\":[null,11],\"10185\":[4],\"10186\":[null,1],\"10187\":[null,6],\"10188\":[null,3],\"10189\":[null,6],\"10190\":[null,2],\"10191\":[2],\"10192\":[null,7],\"10193\":[null,3],\"10194\":[null,2],\"10195\":[null,3],\"10196\":[null,3],\"10197\":[null,2],\"10198\":[null,2],\"10199\":[null,4],\"10200\":[3],\"10201\":[2],\"10202\":[2],\"10203\":[null,1],\"10204\":[null,3],\"10205\":[null,10],\"10206\":[null,4],\"10207\":[null,5],\"10208\":[null,1],\"10209\":[null,4],\"10210\":[2],\"10211\":[null,3],\"10212\":[null,3],\"10213\":[null,1],\"10214\":[null,2],\"10215\":[null,7],\"10216\":[null,1],\"10217\":[2],\"10218\":[null,7],\"10219\":[null,2],\"10220\":[2],\"10221\":[null,5],\"10222\":[null,3],\"10223\":[2],\"10224\":[null,8],\"10225\":[2],\"10226\":[null,3],\"10227\":[2],\"10228\":[null,5],\"10229\":[2],\"10230\":[null,6],\"10231\":[null,6],\"10232\":[null,1],\"10233\":[null,2],\"10234\":[null,5],\"10235\":[null,5],\"10236\":[null,5],\"10237\":[2],\"10238\":[null,3],\"10239\":[null,4],\"10240\":[3],\"10241\":[null,1],\"10242\":[null,9],\"10243\":[2],\"10244\":[2],\"10245\":[null,8],\"10246\":[null,13],\"10247\":[2],\"10248\":[null,4],\"10249\":[null,4],\"10250\":[null,11],\"10251\":[3],\"10252\":[null,27],\"10253\":[3],\"10254\":[null,2],\"10255\":[null,7],\"10256\":[null,4],\"10257\":[null,3],\"10258\":[null,4],\"10259\":[null,1],\"10260\":[2],\"10261\":[null,11],\"10262\":[3],\"10263\":[null,1],\"10264\":[null,33],\"10265\":[2],\"10266\":[null,9],\"10267\":[3],\"10268\":[null,5],\"10269\":[null,9],\"10270\":[2],\"10271\":[null,5],\"10272\":[null,3],\"10273\":[null,4],\"10274\":[2],\"10275\":[null,2],\"10276\":[null,6],\"10277\":[null,5],\"10278\":[null,2],\"10279\":[null,2],\"10280\":[2],\"10281\":[null,4],\"10282\":[null,8],\"10283\":[null,9],\"10284\":[null,5],\"10285\":[null,6],\"10286\":[2],\"10287\":[null,1],\"10288\":[null,7],\"10289\":[null,4],\"10290\":[null,23],\"10291\":[2],\"10292\":[null,4],\"10293\":[null,11],\"10294\":[2],\"10295\":[null,5],\"10296\":[null,9],\"10297\":[2],\"10298\":[2],\"10299\":[null,3],\"10300\":[null,5],\"10301\":[2],\"10302\":[null,8],\"10303\":[3],\"10304\":[2],\"10305\":[2],\"10306\":[null,6],\"10307\":[null,1],\"10308\":[null,6],\"10309\":[null,7],\"10310\":[2],\"10311\":[null,5],\"10312\":[2],\"10313\":[null,5],\"10314\":[null,7],\"10315\":[2],\"10316\":[null,7],\"10317\":[null,8],\"10318\":[2],\"10319\":[2],\"10320\":[null,6],\"10321\":[null,7],\"10322\":[null,1],\"10323\":[null,2],\"10324\":[null,3],\"10325\":[null,1],\"10326\":[null,9],\"10327\":[2],\"10328\":[null,7],\"10329\":[null,4],\"10330\":[null,3],\"10331\":[null,7],\"10332\":[null,1],\"10333\":[null,10],\"10334\":[2],\"10335\":[null,12],\"10336\":[null,2],\"10337\":[null,6],\"10338\":[null,3],\"10339\":[null,8],\"10340\":[null,11],\"10341\":[2],\"10342\":[2],\"10343\":[null,1],\"10344\":[null,1],\"10345\":[null,3],\"10346\":[null,6],\"10347\":[null,1],\"10348\":[null,10],\"10349\":[2],\"10350\":[null,4],\"10351\":[null,21],\"10352\":[2],\"10353\":[null,3],\"10354\":[null,11],\"10355\":[2],\"10356\":[null,10],\"10357\":[null,21],\"10358\":[3],\"10359\":[null,2],\"10360\":[null,5],\"10361\":[null,4],\"10362\":[null,5],\"10363\":[2],\"10364\":[2],\"10365\":[null,7],\"10366\":[null,6],\"10367\":[2],\"10368\":[null,5],\"10369\":[null,11],\"10370\":[2],\"10371\":[null,7],\"10372\":[null,12],\"10373\":[null,9],\"10374\":[2],\"10375\":[2],\"10376\":[null,3],\"10377\":[null,4],\"10378\":[null,1],\"10379\":[null,19],\"10380\":[null,2],\"10381\":[null,6],\"10382\":[null,10],\"10383\":[2],\"10384\":[null,2],\"10385\":[null,6],\"10386\":[3],\"10387\":[null,4],\"10388\":[null,3],\"10389\":[null,5],\"10390\":[null,5],\"10391\":[null,5],\"10392\":[null,4],\"10393\":[2],\"10394\":[null,13],\"10395\":[null,1],\"10396\":[null,2],\"10397\":[3],\"10398\":[null,2],\"10399\":[null,15],\"10400\":[null,1],\"10401\":[null,3],\"10402\":[3],\"10403\":[null,4],\"10404\":[null,3],\"10405\":[null,3],\"10406\":[null,6],\"10407\":[2],\"10408\":[null,3],\"10409\":[3],\"10410\":[null,4],\"10411\":[null,10],\"10412\":[3],\"10413\":[null,7],\"10414\":[null,4],\"10415\":[2],\"10416\":[null,13],\"10417\":[null,8],\"10418\":[3],\"10419\":[null,3],\"10420\":[3],\"10421\":[null,2],\"10422\":[null,8],\"10423\":[3],\"10424\":[null,3],\"10425\":[null,2],\"10426\":[null,2],\"10427\":[null,2],\"10428\":[null,2],\"10429\":[null,3],\"10430\":[2],\"10431\":[null,7],\"10432\":[null,9],\"10433\":[null,1],\"10434\":[null,3],\"10435\":[3],\"10436\":[2],\"10437\":[2],\"10438\":[null,8],\"10439\":[null,11],\"10440\":[2],\"10441\":[null,5],\"10442\":[null,10],\"10443\":[2],\"10444\":[null,8],\"10445\":[null,12],\"10446\":[null,2],\"10447\":[2],\"10448\":[null,13],\"10449\":[2],\"10450\":[null,1],\"10451\":[3],\"10452\":[null,6],\"10453\":[null,9],\"10454\":[3],\"10455\":[null,5],\"10456\":[null,9],\"10457\":[null,8],\"10458\":[null,2],\"10459\":[3],\"10460\":[null,9],\"10461\":[null,5],\"10462\":[null,3],\"10463\":[null,2],\"10464\":[null,4],\"10465\":[2],\"10466\":[null,2],\"10467\":[null,3],\"10468\":[2],\"10469\":[null,1],\"10470\":[null,1],\"10471\":[2],\"10472\":[null,1],\"10473\":[null,1],\"10474\":[2],\"10475\":[2],\"10476\":[null,7],\"10477\":[null,5],\"10478\":[2],\"10479\":[null,4],\"10480\":[null,4],\"10481\":[null,4],\"10482\":[2],\"10483\":[null,7],\"10484\":[null,5],\"10485\":[null,2],\"10486\":[null,2],\"10487\":[null,2],\"10488\":[2],\"10489\":[null,2],\"10490\":[null,2],\"10491\":[null,3],\"10492\":[null,4],\"10493\":[2],\"10494\":[2],\"10495\":[null,4],\"10496\":[null,57],\"10497\":[null,1],\"10498\":[null,27],\"10499\":[2],\"10500\":[null,4],\"10501\":[null,15],\"10502\":[null,1],\"10503\":[null,9],\"10504\":[2],\"10505\":[null,4],\"10506\":[null,15],\"10507\":[null,1],\"10508\":[null,9],\"10509\":[2],\"10510\":[null,1],\"10511\":[null,6],\"10512\":[null,2],\"10513\":[2],\"10514\":[null,1],\"10515\":[null,6],\"10516\":[2],\"10517\":[null,7],\"10518\":[null,1],\"10519\":[2],\"10520\":[null,5],\"10521\":[null,2],\"10522\":[2],\"10523\":[null,4],\"10524\":[null,3],\"10525\":[2],\"10526\":[null,25],\"10527\":[null,1],\"10528\":[null,2],\"10529\":[null,3],\"10530\":[null,5],\"10531\":[null,2],\"10532\":[2],\"10533\":[null,1],\"10534\":[null,5],\"10535\":[2],\"10536\":[null,1],\"10537\":[null,5],\"10538\":[null,4],\"10539\":[null,5],\"10540\":[2],\"10541\":[null,45],\"10542\":[3],\"10543\":[null,5],\"10544\":[null,3],\"10545\":[null,8],\"10546\":[null,3],\"10547\":[null,4],\"10548\":[null,2],\"10549\":[2],\"10550\":[null,3],\"10551\":[null,2],\"10552\":[null,2],\"10553\":[3],\"10554\":[null,97],\"10555\":[2],\"10556\":[null,3],\"10557\":[null,4],\"10558\":[null,5],\"10559\":[null,3],\"10560\":[null,5],\"10561\":[2],\"10562\":[null,1],\"10563\":[null,3],\"10564\":[2],\"10565\":[null,5],\"10566\":[null,3],\"10567\":[null,2],\"10568\":[null,2],\"10569\":[null,6],\"10570\":[null,1],\"10571\":[null,2],\"10572\":[null,1],\"10573\":[null,30],\"10574\":[null,5],\"10575\":[null,7],\"10576\":[null,51],\"10577\":[2],\"10578\":[null,4],\"10579\":[null,1],\"10580\":[null,27],\"10581\":[null,1],\"10582\":[null,5],\"10583\":[null,41],\"10584\":[2],\"10585\":[null,28],\"10586\":[null,1],\"10587\":[null,3],\"10588\":[null,8],\"10589\":[3],\"10590\":[2],\"10591\":[2],\"10592\":[null,4],\"10593\":[null,5],\"10594\":[null,6],\"10595\":[2],\"10596\":[null,4],\"10597\":[null,22],\"10598\":[2],\"10599\":[null,2],\"10600\":[2],\"10601\":[2],\"10602\":[null,2],\"10603\":[null,38],\"10604\":[null,5],\"10605\":[2],\"10606\":[null,1],\"10607\":[null,4],\"10608\":[null,5],\"10609\":[null,2],\"10610\":[2],\"10611\":[2],\"10612\":[null,4],\"10613\":[null,1],\"10614\":[null,3],\"10615\":[null,5],\"10616\":[2],\"10617\":[null,3],\"10618\":[null,10],\"10619\":[null,5],\"10620\":[2],\"10621\":[null,5],\"10622\":[null,16],\"10623\":[3],\"10624\":[null,5],\"10625\":[3],\"10626\":[null,12],\"10627\":[null,3],\"10628\":[2],\"10629\":[null,1],\"10630\":[null,1],\"10631\":[3],\"10632\":[null,1],\"10633\":[null,1],\"10634\":[3],\"10635\":[null,1],\"10636\":[null,7],\"10637\":[2],\"10638\":[null,3],\"10639\":[null,6],\"10640\":[null,5],\"10641\":[2],\"10642\":[null,8],\"10643\":[null,4],\"10644\":[2],\"10645\":[3],\"10646\":[null,8],\"10647\":[null,4],\"10648\":[3],\"10649\":[null,5],\"10650\":[3],\"10651\":[null,6],\"10652\":[null,7],\"10653\":[null,9],\"10654\":[null,9],\"10655\":[2],\"10656\":[5],\"10657\":[null,24],\"10658\":[null,2],\"10659\":[5],\"10660\":[null,36],\"10661\":[null,3],\"10662\":[3],\"10663\":[null,11],\"10664\":[3],\"10665\":[null,4],\"10666\":[null,5],\"10667\":[null,5],\"10668\":[null,6],\"10669\":[null,4],\"10670\":[null,2],\"10671\":[null,2],\"10672\":[2],\"10673\":[null,1],\"10674\":[null,1],\"10675\":[null,1],\"10676\":[null,2],\"10677\":[null,1],\"10678\":[null,5],\"10679\":[null,1],\"10680\":[null,3],\"10681\":[null,1],\"10682\":[null,3],\"10683\":[null,1],\"10684\":[null,3],\"10685\":[null,1],\"10686\":[null,7],\"10687\":[null,1],\"10688\":[null,6],\"10689\":[null,1],\"10690\":[null,2],\"10691\":[null,1],\"10692\":[null,2],\"10693\":[null,1],\"10694\":[null,2],\"10695\":[null,1],\"10696\":[null,5],\"10697\":[null,1],\"10698\":[null,2],\"10699\":[3],\"10700\":[2],\"10701\":[2],\"10702\":[null,4],\"10703\":[null,29],\"10704\":[2],\"10705\":[null,4],\"10706\":[null,4],\"10707\":[null,4],\"10708\":[null,3],\"10709\":[null,3],\"10710\":[3],\"10711\":[null,15],\"10712\":[2],\"10713\":[null,3],\"10714\":[null,11],\"10715\":[3],\"10716\":[null,9],\"10717\":[null,3],\"10718\":[null,11],\"10719\":[2],\"10720\":[null,1],\"10721\":[null,17],\"10722\":[null,8],\"10723\":[null,2],\"10724\":[null,6],\"10725\":[null,2],\"10726\":[null,40],\"10727\":[2],\"10728\":[null,7],\"10729\":[2],\"10730\":[null,8],\"10731\":[2],\"10732\":[null,3],\"10733\":[null,5],\"10734\":[null,21],\"10735\":[2],\"10736\":[null,1],\"10737\":[null,4],\"10738\":[2],\"10739\":[null,4],\"10740\":[null,5],\"10741\":[null,3],\"10742\":[2],\"10743\":[null,3],\"10744\":[null,11],\"10745\":[3],\"10746\":[null,2],\"10747\":[null,3],\"10748\":[2],\"10749\":[null,7],\"10750\":[null,2],\"10751\":[2],\"10752\":[null,3],\"10753\":[null,5],\"10754\":[null,1],\"10755\":[null,1],\"10756\":[null,3],\"10757\":[null,3],\"10758\":[2],\"10759\":[2],\"10760\":[null,3],\"10761\":[null,3],\"10762\":[null,6],\"10763\":[null,3],\"10764\":[2],\"10765\":[null,5],\"10766\":[null,16],\"10767\":[3],\"10768\":[3],\"10769\":[null,3],\"10770\":[null,12],\"10771\":[3],\"10772\":[null,3],\"10773\":[null,3],\"10774\":[null,10],\"10775\":[2],\"10776\":[null,3],\"10777\":[null,13],\"10778\":[null,3],\"10779\":[2],\"10780\":[null,3],\"10781\":[3],\"10782\":[null,1],\"10783\":[null,1],\"10784\":[3],\"10785\":[null,1],\"10786\":[null,2],\"10787\":[2],\"10788\":[null,3],\"10789\":[2],\"10790\":[null,5],\"10791\":[2],\"10792\":[null,3],\"10793\":[2],\"10794\":[null,5],\"10795\":[null,2],\"10796\":[2],\"10797\":[null,4],\"10798\":[null,3],\"10799\":[null,10],\"10800\":[null,3],\"10801\":[2],\"10802\":[null,1],\"10803\":[null,5],\"10804\":[2],\"10805\":[null,5],\"10806\":[null,3],\"10807\":[null,8],\"10808\":[null,3],\"10809\":[null,3],\"10810\":[2],\"10811\":[null,1],\"10812\":[null,8],\"10813\":[null,3],\"10814\":[null,3],\"10815\":[null,3],\"10816\":[null,13],\"10817\":[2],\"10818\":[null,2],\"10819\":[null,1],\"10820\":[null,1],\"10821\":[2],\"10822\":[null,1],\"10823\":[null,1],\"10824\":[3],\"10825\":[null,1],\"10826\":[null,4],\"10827\":[2],\"10828\":[null,4],\"10829\":[null,15],\"10830\":[null,5],\"10831\":[3],\"10832\":[1],\"10833\":[3],\"10834\":[null,5],\"10835\":[null,11],\"10836\":[4],\"10837\":[null,8],\"10838\":[2],\"10839\":[null,14],\"10840\":[1],\"10841\":[2],\"10842\":[null,3],\"10843\":[null,19],\"10844\":[2],\"10845\":[null,3],\"10846\":[null,23],\"10847\":[1],\"10848\":[null,1],\"10849\":[null,1],\"10850\":[1],\"10851\":[null,1],\"10852\":[null,1],\"10853\":[2],\"10854\":[null,1],\"10855\":[null,1],\"10856\":[3],\"10857\":[2],\"10858\":[null,1],\"10859\":[null,3],\"10860\":[null,4],\"10861\":[null,6],\"10862\":[2],\"10863\":[null,1],\"10864\":[null,13],\"10865\":[null,2],\"10866\":[1],\"10867\":[1],\"10868\":[1],\"10869\":[1],\"10870\":[1],\"10871\":[1],\"10872\":[1],\"10873\":[1],\"10874\":[1],\"10875\":[2],\"10876\":[2],\"10877\":[2],\"10878\":[2],\"10879\":[2],\"10880\":[2],\"10881\":[2],\"10882\":[2],\"10883\":[2],\"10884\":[2],\"10885\":[2],\"10886\":[2],\"10887\":[2],\"10888\":[2],\"10889\":[3],\"10890\":[2],\"10891\":[2],\"10892\":[2],\"10893\":[2],\"10894\":[2],\"10895\":[2]},\"averageFieldLength\":[2.064403327751486,6.206524949261751],\"storedFields\":{\"0\":{\"h\":\"指南\"},\"1\":{\"t\":\"提示\"},\"2\":{\"t\":\"当前处于建设阶段\"},\"3\":{\"h\":\"技术栈导航\"},\"4\":{\"h\":\"学习顺序\",\"a\":\"学习顺序\"},\"5\":{\"t\":\"提示\"},\"6\":{\"t\":\"仅包含Java相关的，其他知识，如MySQL，不再这里提及\"},\"7\":{\"t\":\"Java SE\"},\"8\":{\"t\":\"JVM： 可略过，回头再学，纯理论知识\"},\"9\":{\"t\":\"JavaWeb：理解为主 \"},\"10\":{\"t\":\"必学：jdbc、Tomcat、Servlet（Fileter & Listener）、环境搭建、WEB架构、JSON\"},\"11\":{\"t\":\"可选：JSP、JSTL、XML、会话技术\"},\"12\":{\"t\":\"Maven：先学基本用法，复杂配置等学完Spring系列再研究\"},\"13\":{\"t\":\"Spring全家桶 \"},\"14\":{\"t\":\"Spring： 理解为主\"},\"15\":{\"t\":\"SpringMVC\"},\"16\":{\"t\":\"MyBatis：包括MyBatisPlus \"},\"17\":{\"t\":\"需要前置知识：MySQL\"},\"18\":{\"t\":\"SpringBoot：重点实践 \"},\"19\":{\"t\":\"SpringBoot会整合很多技术，这些技术你不会就没法整合，如Redis\"},\"20\":{\"t\":\"其他Spring组件：用到了再学\"},\"21\":{\"t\":\"微服务：（学这个之前了解下项目架构） \"},\"22\":{\"t\":\"常用：Gateway、Nacos、OpenFeign、Seata、Sentinel\"},\"23\":{\"t\":\"已过时：Eureka、Ribbon、LoadBalancer、Bus、Config、Stream、Hystrix\"},\"24\":{\"t\":\"中间件 \"},\"25\":{\"t\":\"消息队列：RabbitMQ（最常用）\"},\"26\":{\"h\":\"项目\"},\"27\":{\"t\":\"提示\"},\"28\":{\"t\":\"当前处于建设阶段\"},\"29\":{\"h\":\"     ->Map\"},\"30\":{\"t\":\"提示\"},\"31\":{\"t\":\"文档迁移中...\"},\"32\":{\"h\":\"     ->Map\"},\"33\":{\"t\":\"提示\"},\"34\":{\"t\":\"文档迁移中...\"},\"35\":{\"h\":\"     ->Map\"},\"36\":{\"t\":\"提示\"},\"37\":{\"t\":\"文档迁移中...\"},\"38\":{\"h\":\"     ->Map\"},\"39\":{\"t\":\"提示\"},\"40\":{\"t\":\"文档迁移中...\"},\"41\":{\"h\":\"     ->Map\"},\"42\":{\"t\":\"提示\"},\"43\":{\"t\":\"文档迁移中...\"},\"44\":{\"h\":\"     ->Map\"},\"45\":{\"t\":\"提示\"},\"46\":{\"t\":\"文档迁移中...\"},\"47\":{\"h\":\"     ->Map\"},\"48\":{\"t\":\"提示\"},\"49\":{\"t\":\"文档迁移中...\"},\"50\":{\"h\":\"     ->Map\"},\"51\":{\"t\":\"提示\"},\"52\":{\"t\":\"文档迁移中...\"},\"53\":{\"h\":\"     ->Map\"},\"54\":{\"t\":\"提示\"},\"55\":{\"t\":\"文档迁移中\"},\"56\":{\"h\":\"   ->Map\"},\"57\":{\"t\":\"提示\"},\"58\":{\"t\":\"文档迁移中\"},\"59\":{\"h\":\"   ->Map\"},\"60\":{\"t\":\"提示\"},\"61\":{\"t\":\"文档迁移中...\"},\"62\":{\"h\":\"     ->Map\"},\"63\":{\"t\":\"提示\"},\"64\":{\"t\":\"文档迁移中\"},\"65\":{\"h\":\"               SpringBoot\"},\"66\":{\"t\":\"提示\"},\"67\":{\"t\":\"文档迁移中...\"},\"68\":{\"h\":\"     ->Map\"},\"69\":{\"t\":\"基础 \"},\"70\":{\"t\":\"介绍\"},\"71\":{\"t\":\"创建项目\"},\"72\":{\"t\":\"项目解析\"},\"73\":{\"t\":\"基本配置文件\"},\"74\":{\"t\":\"yaml配置语法\"},\"75\":{\"t\":\"实用功能 \"},\"76\":{\"t\":\"SSM开发案例\"},\"77\":{\"t\":\"热部署\"},\"78\":{\"t\":\"高级配置\"},\"79\":{\"t\":\"代码测试\"},\"80\":{\"t\":\"基本运维 \"},\"81\":{\"t\":\"打包与发布\"},\"82\":{\"t\":\"配置文件设计\"},\"83\":{\"t\":\"多环境开发\"},\"84\":{\"t\":\"log 日志\"},\"85\":{\"t\":\"监控\"},\"86\":{\"t\":\"集成Data \"},\"87\":{\"t\":\"数据层技术\"},\"88\":{\"t\":\"MySQL：JDBC、Druid\"},\"89\":{\"t\":\"MyBatis：包含MyBatis Plus\"},\"90\":{\"t\":\"Redis\"},\"91\":{\"t\":\"MongoDB\"},\"92\":{\"t\":\"Memcache\"},\"93\":{\"t\":\"ES\"},\"94\":{\"t\":\"集成其他技术 \"},\"95\":{\"t\":\"缓存技术\"},\"96\":{\"t\":\"消息队列\"},\"97\":{\"t\":\"底层原理 \"},\"98\":{\"t\":\"bean加载方式\"},\"99\":{\"t\":\"自动配置\"},\"100\":{\"t\":\"启动流程\"},\"101\":{\"t\":\"其他\"},\"102\":{\"h\":\"    ->Map\"},\"103\":{\"t\":\"提示\"},\"104\":{\"t\":\"文档迁移中\"},\"105\":{\"h\":\"1. 软件开发介绍\"},\"106\":{\"h\":\"1. 软件开发流程\",\"a\":\"_1-软件开发流程\"},\"107\":{\"t\":\"1-1\"},\"108\":{\"h\":\"2. 角色分工\",\"a\":\"_2-角色分工\"},\"109\":{\"t\":\"项目经理: 对整个项目负责，任务分配、把控进度\"},\"110\":{\"t\":\"产品经理: 进行需求调研，输出需求调研文档、产品原型等\"},\"111\":{\"t\":\"UI设计师: 根据产品原型输出界面效果图\"},\"112\":{\"t\":\"架构师: 项目整体架构设计、技术选型等\"},\"113\":{\"t\":\"开发工程师: 代码实现\"},\"114\":{\"t\":\"测试工程师: 编写测试用例，输出测试报告\"},\"115\":{\"t\":\"运维工程师: 软件环境搭建、项目上线\"},\"116\":{\"h\":\"3. 软件环境\",\"a\":\"_3-软件环境\"},\"117\":{\"t\":\"开发环境(development): 开发人员在开发阶段使用的环境，一般外部用户无法访问\"},\"118\":{\"t\":\"测试环境(testing): 专门给测试人员使用的环境，用于测试项目，一般外部用户无法访问\"},\"119\":{\"t\":\"生产环境(production): 即线上环境，正式提供对外服务的环境\"},\"120\":{\"h\":\"学习项目\"},\"121\":{\"t\":\"提示\"},\"122\":{\"t\":\"当前处于建设阶段\"},\"123\":{\"h\":\"->Map\"},\"124\":{\"h\":\"JDK 常用类\",\"a\":\"jdk-常用类\"},\"125\":{\"t\":\"String\"},\"126\":{\"t\":\"StringBuffer\"},\"127\":{\"t\":\"时间\"},\"128\":{\"t\":\"比较器\"},\"129\":{\"t\":\"数学与数值\"},\"130\":{\"t\":\"IO类\"},\"131\":{\"t\":\"反射类\"},\"132\":{\"t\":\"其他内置类\"},\"133\":{\"h\":\"JDK.util包\",\"a\":\"jdk-util包\"},\"134\":{\"t\":\"Scanner\"},\"135\":{\"t\":\"Arrays\"},\"136\":{\"t\":\"Collection+\"},\"137\":{\"t\":\"List&Map\"},\"138\":{\"t\":\"Functional\"},\"139\":{\"t\":\"正则\"},\"140\":{\"h\":\"Other\",\"a\":\"other\"},\"141\":{\"t\":\"常用注解\"},\"142\":{\"h\":\"->Map\"},\"143\":{\"t\":\"提示\"},\"144\":{\"t\":\"内容正在迁移中\"},\"145\":{\"h\":\"   ->Map\"},\"146\":{\"t\":\"提示\"},\"147\":{\"t\":\"内容正在迁移中\"},\"148\":{\"h\":\"  ->Map\"},\"149\":{\"t\":\"提示\"},\"150\":{\"t\":\"内容正在迁移中\"},\"151\":{\"h\":\"->Map\"},\"152\":{\"t\":\"提示\"},\"153\":{\"t\":\"内容正在迁移中\"},\"154\":{\"h\":\"git\"},\"155\":{\"t\":\"提示\"},\"156\":{\"t\":\"当前处于建设阶段\"},\"157\":{\"h\":\"     ->Map\"},\"158\":{\"t\":\"提示\"},\"159\":{\"t\":\"文档迁移中...\"},\"160\":{\"h\":\"设计模式\"},\"161\":{\"t\":\"提示\"},\"162\":{\"t\":\"当前处于建设阶段\"},\"163\":{\"h\":\"     ->Map\"},\"164\":{\"t\":\"提示\"},\"165\":{\"t\":\"文档迁移中...\"},\"166\":{\"h\":\"正则\"},\"167\":{\"t\":\"提示\"},\"168\":{\"t\":\"当前处于建设阶段\"},\"169\":{\"h\":\"     ->Map\"},\"170\":{\"t\":\"提示\"},\"171\":{\"t\":\"文档迁移中...\"},\"172\":{\"h\":\"Swagger\"},\"173\":{\"t\":\"提示\"},\"174\":{\"t\":\"当前处于建设阶段\"},\"175\":{\"h\":\"     ->Map\"},\"176\":{\"t\":\"提示\"},\"177\":{\"t\":\"文档迁移中...\"},\"178\":{\"h\":\"          Docker\"},\"179\":{\"t\":\"提示\"},\"180\":{\"t\":\"当前处于建设阶段\"},\"181\":{\"h\":\"     ->Map\"},\"182\":{\"t\":\"提示\"},\"183\":{\"t\":\"文档迁移中...\"},\"184\":{\"h\":\"                    Linux\"},\"185\":{\"t\":\"提示\"},\"186\":{\"t\":\"当前处于建设阶段\"},\"187\":{\"h\":\"     ->Map\"},\"188\":{\"t\":\"提示\"},\"189\":{\"t\":\"文档迁移中...\"},\"190\":{\"h\":\"                nginx\"},\"191\":{\"t\":\"提示\"},\"192\":{\"t\":\"当前处于建设阶段\"},\"193\":{\"h\":\"     ->Map\"},\"194\":{\"t\":\"提示\"},\"195\":{\"t\":\"文档迁移中...\"},\"196\":{\"h\":\"             shell\"},\"197\":{\"t\":\"提示\"},\"198\":{\"t\":\"当前处于建设阶段\"},\"199\":{\"h\":\"     ->Map\"},\"200\":{\"t\":\"提示\"},\"201\":{\"t\":\"文档迁移中...\"},\"202\":{\"h\":\"ElasticSearch\"},\"203\":{\"t\":\"提示\"},\"204\":{\"t\":\"文档迁移中...\"},\"205\":{\"h\":\"     ->Map\"},\"206\":{\"t\":\"提示\"},\"207\":{\"t\":\"文档迁移中...\"},\"208\":{\"t\":\"ES入门 \"},\"209\":{\"t\":\"ES介绍\"},\"210\":{\"t\":\"安装\"},\"211\":{\"t\":\"ES基本操作 \"},\"212\":{\"t\":\"RESTFul+Postman+数据格式\"},\"213\":{\"t\":\"HTTP操作 \"},\"214\":{\"t\":\"索引操作\"},\"215\":{\"t\":\"文档操作\"},\"216\":{\"t\":\"映射操作\"},\"217\":{\"t\":\"高级查询\"},\"218\":{\"t\":\"Java API \"},\"219\":{\"t\":\"创建项目\"},\"220\":{\"t\":\"索引操作\"},\"221\":{\"t\":\"文档操作\"},\"222\":{\"t\":\"高级查询\"},\"223\":{\"t\":\"ES环境 \"},\"224\":{\"t\":\"概念\"},\"225\":{\"t\":\"Windows集群\"},\"226\":{\"t\":\"Linux单机\"},\"227\":{\"t\":\"Linux集群\"},\"228\":{\"t\":\"ES进阶 \"},\"229\":{\"t\":\"核心概念、系统架构\"},\"230\":{\"t\":\"分布式集群\"},\"231\":{\"t\":\"路由计算\"},\"232\":{\"t\":\"分片控制、分片原理\"},\"233\":{\"t\":\"文档分析\"},\"234\":{\"t\":\"文档处理\"},\"235\":{\"t\":\"ES集成 \"},\"236\":{\"t\":\"SpringData集成\"},\"237\":{\"t\":\"Spark Streaming集成\"},\"238\":{\"t\":\"Flink集成\"},\"239\":{\"t\":\"ES优化 \"},\"240\":{\"t\":\"硬件\"},\"241\":{\"t\":\"分片策略\"},\"242\":{\"t\":\"路由选择\"},\"243\":{\"t\":\"写入速度优化\"},\"244\":{\"t\":\"内存设置\"},\"245\":{\"t\":\"重要配置\"},\"246\":{\"t\":\"ES面试题\"},\"247\":{\"t\":\"ES8\"},\"248\":{\"h\":\"    Memcache\"},\"249\":{\"t\":\"相关信息\"},\"250\":{\"t\":\"这个目前不太流行了，暂时不做整理了。 等用到了再说。\"},\"251\":{\"h\":\"     ->Map\"},\"252\":{\"t\":\"相关信息\"},\"253\":{\"t\":\"这个目前不太流行了，暂时不做整理了。 等用到了再说。\"},\"254\":{\"h\":\"    MongoDB\"},\"255\":{\"t\":\"Line\"},\"256\":{\"t\":\"当前MongoDB版本为 6.0.5\"},\"257\":{\"t\":\"官网文档[没有中文]\"},\"258\":{\"t\":\"中文文档[翻译很烂]\"},\"259\":{\"t\":\"内容说明\"},\"260\":{\"t\":\"MongoDB并非很流行的技术，当前找不到太多相关中文资料，目前能找到的中文资料版本都在4.0左右，严重落后现有版本，很多规则和内置的API都跟当前版本不同。\"},\"261\":{\"t\":\"本笔记是以6.0.5版本为基础的，因为找不到好的资料，所以没有深入探索复杂内容。\"},\"262\":{\"t\":\"基础操作可以保证正确性，本人都经过验证了，集群等复杂操作只能保证尽量正确。\"},\"263\":{\"h\":\"     ->Map\"},\"264\":{\"t\":\"Line\"},\"265\":{\"t\":\"当前MongoDB版本为 6.0.5\"},\"266\":{\"t\":\"官网文档[没有中文]\"},\"267\":{\"t\":\"中文文档[翻译很烂]\"},\"268\":{\"t\":\"内容说明\"},\"269\":{\"t\":\"MongoDB并非很流行的技术，当前找不到太多相关中文资料，目前能找到的中文资料版本都在4.0左右，严重落后现有版本，很多规则和内置的API都跟当前版本不同。\"},\"270\":{\"t\":\"本笔记是以6.0.5版本为基础的，因为找不到好的资料，所以没有深入探索复杂内容。\"},\"271\":{\"t\":\"基础操作可以保证正确性，本人都经过验证了，集群等复杂操作只能保证尽量正确。\"},\"272\":{\"h\":\"         MySQL\"},\"273\":{\"t\":\"提示\"},\"274\":{\"t\":\"文档迁移中...\"},\"275\":{\"h\":\"     ->Map\"},\"276\":{\"t\":\"提示\"},\"277\":{\"t\":\"文档迁移中...\"},\"278\":{\"h\":\"        Redis\"},\"279\":{\"t\":\"提示\"},\"280\":{\"t\":\"文档迁移中...\"},\"281\":{\"h\":\"     ->Map\"},\"282\":{\"t\":\"提示\"},\"283\":{\"t\":\"文档迁移中...\"},\"284\":{\"h\":\"1-1. 介绍\"},\"285\":{\"t\":\"重要性\"},\"286\":{\"t\":\"SpringBoot是Java开发必备的，是重要性第一位的框架，非常重要。\"},\"287\":{\"h\":\"1. 简介\",\"a\":\"_1-简介\"},\"288\":{\"t\":\"SpringBoot是由Pivotal团队提供的全新框架，其设计目的是用来简化Spring应用的初始搭建以及开发过程。 PS：Spring系列框架的配置和依赖太复杂了，SpringBoot对它们进行了非常大的简化。\"},\"289\":{\"h\":\"2. SpringBoot的特点\",\"a\":\"_2-springboot的特点\"},\"290\":{\"t\":\"简化依赖管理\"},\"291\":{\"t\":\"简化常用工程相关配置\"},\"292\":{\"t\":\"内置服务器\"},\"293\":{\"t\":\"...\"},\"294\":{\"h\":\"3. 需要学习的内容\",\"a\":\"_3-需要学习的内容\"},\"295\":{\"t\":\"了解SpringBoot开发流程，能够基于SpringBoot实现基础SSM框架整合\"},\"296\":{\"t\":\"掌握各式各样的第三方技术与SpringBoot整合的方案\"},\"297\":{\"t\":\"理解SpringBoot底层\"},\"298\":{\"t\":\"基于原理理解基础上，实现自主研发基于SpringBoot整合任意技术的开发方式\"},\"299\":{\"h\":\"1-2. 创建项目\"},\"300\":{\"t\":\"提示\"},\"301\":{\"t\":\"这里采用的是IDEA里的Spring Initializr 创建的工程。\"},\"302\":{\"t\":\"需要前置知识：Maven。\"},\"303\":{\"h\":\"1. Spring Initializr\",\"a\":\"_1-spring-initializr\"},\"304\":{\"t\":\"创建工程（new Project）时选择 Spring Initializr。\"},\"305\":{\"t\":\"1-2-1\"},\"306\":{\"t\":\"选项解释\"},\"307\":{\"t\":\"Server URL：SpringBoot项目构建是需要联网的，该URL就是要连接的网址，默认是官网。\"},\"308\":{\"t\":\"Name：项目（工程或模块）的名字\"},\"309\":{\"t\":\"Location：项目在硬盘上的位置\"},\"310\":{\"t\":\"Language：语言，选Java就行\"},\"311\":{\"t\":\"Type：选Maven就行\"},\"312\":{\"t\":\"Group / Artifact / Package name：Maven的包信息\"},\"313\":{\"t\":\"Project JDK：JDK版本，注意版本适配\"},\"314\":{\"t\":\"Java：Project SDK的版本要与Java处的SDK版本一致。\"},\"315\":{\"t\":\"Packaging：打包方式选择Jar，即使是Web工程。\"},\"316\":{\"h\":\"2. 配置工程\",\"a\":\"_2-配置工程\"},\"317\":{\"t\":\"接上一步，点击 NEXT ，进行工程（或模块）的配置。\"},\"318\":{\"t\":\"1-2-2\"},\"319\":{\"t\":\"在这里配置SpringBoot版本，和需要添加的依赖，具体如下：\"},\"320\":{\"t\":\"Spring Boot：选择版本，默认是最新的稳定版，要根据项目的其他组件依赖进行选择 \"},\"321\":{\"t\":\"比如SpringCloud alibaba最新的稳定版需要的是SpringBoot 2.7，而默认的版本是3.0.0\"},\"322\":{\"t\":\"Dependencies：这里可以选择项目所需的一些依赖，比如Lombok \"},\"323\":{\"t\":\"项目创建后是可以手动添加依赖的，这里不用纠结\"},\"324\":{\"t\":\"Addeed dependencies：已经勾选的依赖，可以点X取消。\"},\"325\":{\"t\":\"配置完后，点击 Finish 项目就创建成功了。\"},\"326\":{\"h\":\"3. 网络问题\",\"a\":\"_3-网络问题\"},\"327\":{\"t\":\"SpringBoot项目是需要联网创建的，默认网址是：start.spring.io如果网络不通畅，可以选择其他方式创建，或者使用国内镜像。\"},\"328\":{\"t\":\"切换阿里云镜像\"},\"329\":{\"t\":\"地址：https://start.aliyun.com\"},\"330\":{\"t\":\"1-2-3\"},\"331\":{\"h\":\"4. 构建结果\",\"a\":\"_4-构建结果\"},\"332\":{\"t\":\"自动构建了项目的目录，如下：\"},\"333\":{\"t\":\"1-2-4\"},\"334\":{\"t\":\"目录解读\"},\"335\":{\"t\":\"BolgApplication：核心类，用来启动SpringBoot项目\"},\"336\":{\"t\":\"application.properties：核心配置文件 \"},\"337\":{\"t\":\"不过后续使用时会采用yaml格式的配置文件\"},\"338\":{\"t\":\"pom：核心文件，确认了SpringBoot的依赖（SpringBoot程序包含的基础文件）\"},\"339\":{\"t\":\"test：测试目录，SpringBoot默认集成了Unit\"},\"340\":{\"t\":\"无用的文件：HELP.md 、mvnw、mvnw.cmd\"},\"341\":{\"h\":\"5. 注意事项\",\"a\":\"_5-注意事项\"},\"342\":{\"h\":\"5.1 pom.xml\",\"a\":\"_5-1-pom-xml\"},\"343\":{\"t\":\"pom.xml中的spring-boot-maven-plugin是没有指定version的，使用的是IDEA默认的version，可能与SpringBoot的版本号对不上导致无法引入报错。\"},\"344\":{\"t\":\"1-2-5\"},\"345\":{\"t\":\"解决方案\"},\"346\":{\"t\":\"可以手动指定版本号（与SpringBoot的版本号一样）。\"},\"347\":{\"t\":\"<plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <version>2.7.10</version> </plugin> </plugins> \"},\"348\":{\"h\":\"5.2 启动类\",\"a\":\"_5-2-启动类\"},\"349\":{\"t\":\"SpringBoot的启动类在项目中的位置是固定的，确保启动类与直接在“项目包”的目录下\"},\"350\":{\"t\":\"即：启动类与三层架构放在同一级，如果不这样就无法找到启动类，无法启动项目。\"},\"351\":{\"h\":\"5.3 依赖版本\",\"a\":\"_5-3-依赖版本\"},\"352\":{\"t\":\"创建项目的过程中，勾选依赖时无法指定版本，想修改版本需要在项目构建完后，在pom.xml中进行设置。\"},\"353\":{\"h\":\"6. 隐藏无用的文件\",\"a\":\"_6-隐藏无用的文件\"},\"354\":{\"t\":\"创建SpringBoot会产生很多无意义的文件，影响目录观感。 每次手动删太麻烦，可以使用IDEA的设置进行自动隐藏。\"},\"355\":{\"t\":\"Setting → File Types → Ignored Files and Folders\"},\"356\":{\"t\":\"输入要隐藏的文件名，支持*号通配符回车确认添加\"},\"357\":{\"t\":\"注意：不要隐藏.idea文件\"},\"358\":{\"h\":\"7. 其他方式创建SpringBoot项目\",\"a\":\"_7-其他方式创建springboot项目\"},\"359\":{\"h\":\"7.1 使用官网创建SpringBoot项目\",\"a\":\"_7-1-使用官网创建springboot项目\"},\"360\":{\"t\":\"打开SpringBoot 官网，选择Quickstart Your Project，或者直接输入：ttps://start.spring.io/\"},\"361\":{\"t\":\"创建工程，并保存项目（步骤同IDEA）\"},\"362\":{\"t\":\"导入项目：创建完成后，会自动下载一个项目压缩包，解压项目，通过IDE导入项目即可。\"},\"363\":{\"h\":\"7.2 手动创建项目\",\"a\":\"_7-2-手动创建项目\"},\"364\":{\"t\":\"前提：Maven已经下载好了所需的依赖。\"},\"365\":{\"t\":\"核心：pom.xml和启动类需要手动进行创建。 手动创建一个Maven工程，手动编辑pom.xml和创建启动类 文件内容和自动创建的一样。\"},\"366\":{\"h\":\"1-3. 项目解析\"},\"367\":{\"h\":\"Ⅰ. 使用SpringBoot\",\"a\":\"i-使用springboot\"},\"368\":{\"t\":\"提示\"},\"369\":{\"t\":\"创建好SpringBoot项目后，就可以使用SpringBoot进行开发了。\"},\"370\":{\"h\":\"1. 创建Controller\",\"a\":\"_1-创建controller\"},\"371\":{\"t\":\"开发一个控制器类，在项目包下创建controller包，并创建一个Rest风格的Controller。\"},\"372\":{\"t\":\"@RestController @RequestMapping(\\\"/test\\\") public class TestController { @GetMapping public String getIt(){ System.out.println(\\\"hello:boot_introduction_1\\\"); return \\\"hello:boot_introduction_1\\\"; } } \"},\"373\":{\"h\":\"2. 启动项目\",\"a\":\"_2-启动项目\"},\"374\":{\"t\":\"右键，运行启动类，启动SpringBoot项目，启动结果如下：\"},\"375\":{\"t\":\"1-3-1\"},\"376\":{\"h\":\"3. 访问Servlet\",\"a\":\"_3-访问servlet\"},\"377\":{\"t\":\"使用浏览器访问：localhost:8080/test\"},\"378\":{\"t\":\"TestController类的getIt方法被成功执行，命令行打印出了指定的文本，浏览器也返回了指定的文本。\"},\"379\":{\"h\":\"4. SpringBoot做了什么\",\"a\":\"_4-springboot做了什么\"},\"380\":{\"h\":\"5. 总结\",\"a\":\"_5-总结\"},\"381\":{\"t\":\"项目搭建完后，所有配置文件都不需要管，自动创建好了（采用的默认配置）。 同时Tomcat也不用进行配置，直接可以使用内置的Tomcat。\"},\"382\":{\"h\":\"Ⅱ. 统一依赖管理\",\"a\":\"ii-统一依赖管理\"},\"383\":{\"t\":\"项目开发需要非常多的包，这些包的版本配置非常麻烦，要保证效果最佳且没有bug。\"},\"384\":{\"h\":\"1. Maven pom\",\"a\":\"_1-maven-pom\"},\"385\":{\"t\":\"在使用Maven开发时，可以使用父工程的pom.xml对所有项目的依赖进行统一管理。\"},\"386\":{\"t\":\"父工程规定项目所需依赖的版本，子项目手动引入所需的依赖（不用指定版本）并安装，版本采用父类中的版本。\"},\"387\":{\"h\":\"2. SpringBoot 中的 pom\",\"a\":\"_2-springboot-中的-pom\"},\"388\":{\"t\":\"在SpringBoot项目的bom.xml中，所有的依赖都是没有版本的。他们的版本由SpringBoot项目内置的父工程来进行管理。\"},\"389\":{\"h\":\"2.1 pox.xml的parent\",\"a\":\"_2-1-pox-xml的parent\"},\"390\":{\"t\":\"如下：工程的pom竟然也有parent，该parent就是SpringBoot内置的专门用来管理依赖的父pom。\"},\"391\":{\"t\":\"<parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.7.9</version> <relativePath/> <!-- lookup parent from repository --> </parent> \"},\"392\":{\"h\":\"2.2 pring-boot-starter-parent\",\"a\":\"_2-2-pring-boot-starter-parent\"},\"393\":{\"t\":\"ctrl + 左键 点击parent的artifactId，就可以查看该文件（spring-boot-starter-parent-2.7.9.pom），如下，该文件还有一个父工程。\"},\"394\":{\"t\":\"<parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-dependencies</artifactId> <version>2.7.9</version> </parent> \"},\"395\":{\"h\":\"2.3 spring-boot-dependencies\",\"a\":\"_2-3-spring-boot-dependencies\"},\"396\":{\"t\":\"同样进入该文件，观察该文件，截取如下：\"},\"397\":{\"t\":\"... <!--文件坐标--> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-dependencies</artifactId> <version>2.7.9</version> <packaging>pom</packaging> ... <!--变量：依赖的版本号--> <properties> <activemq.version>5.16.6</activemq.version> <antlr2.version>2.7.7</antlr2.version> <appengine-sdk.version>1.9.98</appengine-sdk.version> <artemis.version>2.19.1</artemis.version> <aspectj.version>1.9.7</aspectj.version> <assertj.version>3.22.0</assertj.version> ... </properties> <!--依赖管理：包含了几乎所有开发中可能用到的依赖--> <dependencyManagement> <dependencies> <dependency> <groupId>org.apache.activemq</groupId> <artifactId>activemq-amqp</artifactId> <version>${activemq.version}</version> </dependency> <dependency> <groupId>org.apache.activemq</groupId> <artifactId>activemq-blueprint</artifactId> <version>${activemq.version}</version> </dependency> <dependency> <groupId>org.apache.activemq</groupId> <artifactId>activemq-broker</artifactId> <version>${activemq.version}</version> </dependency> <dependency> <groupId>org.apache.activemq</groupId> <artifactId>activemq-camel</artifactId> <version>${activemq.version}</version> </dependency> ... </dependencies> </dependencyManagement> \"},\"398\":{\"h\":\"4. SpringBoot依赖管理总结\",\"a\":\"_4-springboot依赖管理总结\"},\"399\":{\"t\":\"SpringBoot已经将所有的项目依赖的最佳版本组合给提前设置好了，这个文件存放在spring-boot-dependencies-2.7.9.pom中。\"},\"400\":{\"t\":\"我们自己创建的SpringBoot项目，pom文件会自动将继承spring-boot-starter-parent-2.7.4.pom并间接继承spring-boot-dependencies-2.7.4.pom\"},\"401\":{\"t\":\"此时，SpringBoot依赖的版本就已经确认了，除非手动在pom.xml中指定某个依赖的版本，不然就是采用内置父工程的版本。\"},\"402\":{\"t\":\"在创建SpringBoot项目时，只指定了SpringBoot的版本，依赖的版本完全取决于SpringBoot的版本，版本组合是最佳的，一般不用手动调整。\"},\"403\":{\"h\":\"5. 注意事项\",\"a\":\"_5-注意事项\"},\"404\":{\"t\":\"SpringBoot的Parent并非包含了所有依赖的坐标，只是包含了常用依赖的坐标\"},\"405\":{\"t\":\"实际开发时仅书写GAV中的G和A，V由SpringBoot提供，除非SpringBoot未提供对应版本 \"},\"406\":{\"t\":\"或者遇到了特殊的版本bug\"},\"407\":{\"h\":\"Ⅲ. starter\",\"a\":\"iii-starter\"},\"408\":{\"h\":\"1. 什么是starter\",\"a\":\"_1-什么是starter\"},\"409\":{\"t\":\"SpringBoot中常见的依赖类型，该类型依赖出现的目的是减少依赖配置的数量。\"},\"410\":{\"t\":\"1个starter往往包含了若干个相关联的依赖包。在进行项目开发时，需要什么技术，就会导入对应的starter，starter内部会包含很多依赖包的依赖信息。\"},\"411\":{\"t\":\"如下：点击spring-boot-starter-web就会打开一个包含所有依赖信息的文件：\"},\"412\":{\"t\":\"<dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter</artifactId> <version>2.7.9</version> <scope>compile</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-json</artifactId> <version>2.7.9</version> <scope>compile</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <version>2.7.9</version> <scope>compile</scope> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-web</artifactId> <version>5.3.25</version> <scope>compile</scope> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-webmvc</artifactId> <version>5.3.25</version> <scope>compile</scope> </dependency> </dependencies> \"},\"413\":{\"t\":\"start是可以嵌套的。\"},\"414\":{\"h\":\"2. 意义\",\"a\":\"_2-意义\"},\"415\":{\"t\":\"之前开发某类项目，要用到一堆依赖，这里只需要几个Starter就搞定了。\"},\"416\":{\"t\":\"每个不同的starter根据功能不同，通常包含多个依赖坐标，使用starter可以实现快速配置的效果，达到简化配置的目的。\"},\"417\":{\"h\":\"3. starter与parent\",\"a\":\"_3-starter与parent\"},\"418\":{\"t\":\"parent：进行依赖管理，预设好了几乎所有依赖的版本 \"},\"419\":{\"t\":\"目的：统一版本管理，设置最佳版本组合。\"},\"420\":{\"t\":\"starter：当前项目具体引入的依赖合集。 \"},\"421\":{\"t\":\"目的：减少pom.xml中的配置项\"},\"422\":{\"h\":\"Ⅳ. 引导类\",\"a\":\"iv-引导类\"},\"423\":{\"h\":\"引导类：XxxApplication\",\"a\":\"引导类-xxxapplication\"},\"424\":{\"t\":\"SpringBoot的引导类是Boot工程的执行入口，运行main方法就可以启动项目，引导类的类名随意（一般为XxxApplication）。\"},\"425\":{\"t\":\"@SpringBootApplication public class AifaceApplication { public static void main(String[] args) { SpringApplication.run(AifaceApplication.class, args); } } \"},\"426\":{\"h\":\"2. 容器\",\"a\":\"_2-容器\"},\"427\":{\"t\":\"代码 SpringApplication.run(BootIntroduction1Application.class, args); 执行后，返回值为：ConfigurableApplicationContext。\"},\"428\":{\"t\":\"ConfigurableApplicationContext就是一个IOC容器。\"},\"429\":{\"t\":\"测试使用容器\"},\"430\":{\"t\":\"@SpringBootApplication public class BootIntroduction1Application { public static void main(String[] args) { ConfigurableApplicationContext ctx = SpringApplication.run(BootIntroduction1Application.class, args); TestController bean = ctx.getBean(TestController.class); System.out.prinln(bean);//成功的获取了bean } } \"},\"431\":{\"h\":\"3. @SpringBootApplication\",\"a\":\"_3-springbootapplication\"},\"432\":{\"t\":\"该引导类是靠@SpringBootApplication配置生效的。 该注解的功能：扫描bean，读取配置，开启IOC容器。\"},\"433\":{\"t\":\"扫描的包\"},\"434\":{\"t\":\"扫描的包是引导类所在的包（如:com.cybercell.blog）。\"},\"435\":{\"t\":\"因此：引导类需要放到项目包中，不要放入组件包。\"},\"436\":{\"h\":\"4. 总结\",\"a\":\"_4-总结\"},\"437\":{\"t\":\"引导类的意义就是初始化Spring容器，扫描引导类所在包，将所有的bean纳入IOC管理。\"},\"438\":{\"h\":\"Ⅴ. 辅助功能\",\"a\":\"v-辅助功能\"},\"439\":{\"t\":\"非SpringBoot核心功能，按需加载，如常用的内嵌Tomcat。\"},\"440\":{\"h\":\"1. 内嵌Tomcat\",\"a\":\"_1-内嵌tomcat\"},\"441\":{\"t\":\"SpringBoot中内嵌了一个Tomcat服务器。Tomcat服务器代码也是java写的，SpringBoot将Tomcat功能抽取出来封装到了一个对象，并交给了Spring的IOC容器。因此就可以内嵌Tomcat了。\"},\"442\":{\"h\":\"1.1 Tomcat依赖的位置\",\"a\":\"_1-1-tomcat依赖的位置\"},\"443\":{\"t\":\"pom.xml:spring-boot-starter-web -> spring-boot-starter-web-2.7.9.pom：spring-boot-starter-tomcat\"},\"444\":{\"h\":\"1.2 不使用内嵌服务器\",\"a\":\"_1-2-不使用内嵌服务器\"},\"445\":{\"t\":\"注解掉spring-boot-starter-tomcat这个starter就可以。 或者在pom.xml中对spring-boot-starter-web进行排除依赖\"},\"446\":{\"t\":\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> <exclusions> <exclusion> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> </exclusion> </exclusions> </dependency> \"},\"447\":{\"t\":\"排除掉Tomcat的starter后，再启动SpringBoot，就不会开启Tomcat了。\"},\"448\":{\"h\":\"1.3 替换别的服务器\",\"a\":\"_1-3-替换别的服务器\"},\"449\":{\"t\":\"添加别的服务器的starter就可以替换内嵌的服务器了，如jetty\"},\"450\":{\"t\":\"<!-- 添加 Jetty 起步依赖，版本由 SpringBoot 的 starter 控制 --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-jetty</artifactId> </dependency> \"},\"451\":{\"h\":\"1-4. 配置文件介绍\"},\"452\":{\"t\":\"提示\"},\"453\":{\"t\":\"springBoot项目的配置文件都是放在 src=>main=>resources内的。\"},\"454\":{\"h\":\"1. 默认配置文件\",\"a\":\"_1-默认配置文件\"},\"455\":{\"t\":\"SpringBoot默认配置文件：application.properties。\"},\"456\":{\"t\":\"该该配置文件可以配置所有可以自定义的配置项。\"},\"457\":{\"t\":\"SpringBoot为所有的重要的配置项基本都设置了默认值，所以该文件默认是空的。\"},\"458\":{\"h\":\"2. 文件名\",\"a\":\"_2-文件名\"},\"459\":{\"t\":\"默认是application，不要修改这个名字，不然无法自动加载。 当然，后缀是可以改的，支持多种文件格式。\"},\"460\":{\"h\":\"3. 文件格式\",\"a\":\"_3-文件格式\"},\"461\":{\"t\":\"properties：默认的文件后缀就是properties。 \"},\"462\":{\"t\":\"配置项是K-V格式。\"},\"463\":{\"t\":\"yml：带层级的k-v，（推荐） \"},\"464\":{\"t\":\"yml和yaml是一回事\"},\"465\":{\"t\":\"//1.propeties格式 server.port=80 //2.yml格式 server: port: 81 \"},\"466\":{\"h\":\"4. 多个配置文件\",\"a\":\"_4-多个配置文件\"},\"467\":{\"h\":\"4.1 多格式配置文件\",\"a\":\"_4-1-多格式配置文件\"},\"468\":{\"t\":\"application.properties、application.yml、application.yaml共存时，他们的配置会互相叠加覆盖，当覆盖时，就需要考虑优先级了。\"},\"469\":{\"t\":\"优先级为：properties>yml>yaml\"},\"470\":{\"h\":\"4.2 其他类型配置文件\",\"a\":\"_4-2-其他类型配置文件\"},\"471\":{\"t\":\"实际开发时，可能会根据开发环境添加诸如application-dev(dev环境)这类的配置文件，或是bootstrap.yml配置文件。\"},\"472\":{\"t\":\"具体见后续章节和微服务。\"},\"473\":{\"h\":\"5. debug\",\"a\":\"_5-debug\"},\"474\":{\"t\":\"有时，可能会遇到bug，导致配置文件无效（配置文件没有小叶子的图标），此时需要手动将该配置文件激活。\"},\"475\":{\"t\":\"1-4-1\"},\"476\":{\"h\":\"1-5. yml语法\"},\"477\":{\"t\":\" yaml是一种数据存储格式，类似XML和Properties. \"},\"478\":{\"h\":\"Ⅰ. 配置yml\",\"a\":\"i-配置yml\"},\"479\":{\"h\":\"1. yaml语法规则\",\"a\":\"_1-yaml语法规则\"},\"480\":{\"t\":\"大小写敏感\"},\"481\":{\"t\":\"属性层级关系使用多行描述，每行结尾使用冒号结束\"},\"482\":{\"t\":\"使用缩进表示层级关系，同层级左侧对齐，只允许使用空格（不允许使用Tab键）\"},\"483\":{\"t\":\"属性值前面添加空格（属性名与属性值之间使用冒号+空格作为分隔）\"},\"484\":{\"t\":\"# 表示注释\"},\"485\":{\"h\":\"2. 字面量表示方式\",\"a\":\"_2-字面量表示方式\"},\"486\":{\"t\":\"boolean: TRUE #TRUE,true,True,FALSE,false ， False 均可 float: 3.14 #6.8523015e+5 # 支持科学计数法 int: 123 #0b1010_0111_0100_1010_1110 # 支持二进制、八进制、十六进制 null: ~ # 使用 ~ 表示 null string: HelloWorld # 字符串可以直接书写 string2: \\\"Hello World\\\" # 可以使用双引号包裹,此时可以解析特殊字符了，如\\\\t变成空格 date: 2018-02-17 # 日期必须使用 yyyy-MM-dd 格式 datetime: 2018-02-17T15:02:31+08:00 # 时间和日期之间使用 T 连接，最后使用+ 代表时区 \"},\"487\":{\"h\":\"3. 数组表示方式\",\"a\":\"_3-数组表示方式\"},\"488\":{\"t\":\"在属性名书写位置的下方使用减号作为数据开始符号，每行书写一个数据，减号与数据间空格分隔。\"},\"489\":{\"t\":\"likes: - game - music - sleep likes2: [game,music,sleep] #缩略格式 # 对象数组 users: - name: zhangsan age: 18 - name: lisi age: 17 users2: - name: zhangsan age: 18 - name: lisi age: 17 users3: [{name:zhangsan,age:18},{name:lisi,age:17}] \"},\"490\":{\"h\":\"4. yml文件中的变量引用\",\"a\":\"_4-yml文件中的变量引用\"},\"491\":{\"t\":\"在yml中可以使用 ${属性名} 引用数据，将其他配置项的值作为自己值的一部分。\"},\"492\":{\"t\":\"baseDir: c:\\\\win10 tempDir: ${baseDir}\\\\temp # c:\\\\win10\\\\temp \"},\"493\":{\"h\":\"Ⅱ. 读取yml\",\"a\":\"ii-读取yml\"},\"494\":{\"t\":\"底层是IOC容器，通过注入的方式读取配置项，SpringBoot会自动导入配置文件的，直接使用@Value读配置项即可。\"},\"495\":{\"h\":\"1. 读取yml数据\",\"a\":\"_1-读取yml数据\"},\"496\":{\"t\":\"提示\"},\"497\":{\"t\":\"这里指的是手动读取配置项，大部分配置信息SpringBoot会自动读取。\"},\"498\":{\"t\":\"使用@Value读取单个数据，属性名引用方式：${一级属性名.二级属性名……}\"},\"499\":{\"t\":\"简单读取：@Value(\\\"${属性名}\\\")\"},\"500\":{\"t\":\"多级数据：@Value(\\\"${一级属性名.二级属性名……}\\\")\"},\"501\":{\"t\":\"数组中数据：@Value(\\\"${数组名[索引]}\\\")\"},\"502\":{\"t\":\"对象数组中数据：@Value(\\\"${数组名[索引].对象属性}\\\")\"},\"503\":{\"t\":\"@Value(\\\"${country}\\\") private String country1; @Value(\\\"${user.name}\\\") private String name1; @Value(\\\"${likes[1]}\\\") private String likes1; @Value(\\\"${users[1].age}\\\") private String age1; \"},\"504\":{\"h\":\"2. 读取yaml全部属性数据\",\"a\":\"_2-读取yaml全部属性数据\"},\"505\":{\"t\":\"通过自动装配，SpringBoot可以将配置文件中所有的配置项信息封装到Environment对象中。\"},\"506\":{\"t\":\"这种方式可以省去定义太多成员变量。\"},\"507\":{\"t\":\"通过Environment对象的getProperty方法可以读取具体的配置项，参数是配置项名。\"},\"508\":{\"t\":\"//注入方式 @Autowired private Enviroment env; //读取配置项 System.out.println(env.getProperty(\\\"server.port\\\")); System.out.println(env.getProperty(\\\"user\\\")); System.out.println(env.getProperty(\\\"enterprise.subject[0]\\\")); \"},\"509\":{\"h\":\"3. 读取yml引用类型数据\",\"a\":\"_3-读取yml引用类型数据\"},\"510\":{\"t\":\"yaml配置项的主流配置方式是：将一组数据封装到一个java对象中，使用的时候加载该对象，通过该对象读取所需配置。\"},\"511\":{\"t\":\"创建类：用于封装一组数据，如JDBC数据库连接信息（datasource）\"},\"512\":{\"t\":\"加载数据到对象：由Spring将这组数据加载到数据对象中\"},\"513\":{\"t\":\"使用数据：使用时从spring中直接获取数据使用\"},\"514\":{\"t\":\"示例如下：\"},\"515\":{\"h\":\"3.1 待封装的数据\",\"a\":\"_3-1-待封装的数据\"},\"516\":{\"t\":\"# JDBC驱动配置 datasource: driver: com.mysql.jdbc.Driver url: jdbc:mysql://localhost/springboot_db username: root password: root666123 \"},\"517\":{\"h\":\"3.2 创建数据对象\",\"a\":\"_3-2-创建数据对象\"},\"518\":{\"t\":\"创建config包，创建文件：JDBCDateSource类\"},\"519\":{\"t\":\"/定义数据模型封装yaml文件中对应的数据 @Component//定义为spring管控的bean //指定加载的数据(配置文件中的哪个配置项):datasource @ConfigurationProperties(prefix = \\\"datasource\\\") public class JDBCDateSource { //属性和要封装的数据一一兑对应 private String driver; private String url; private String username; private String password; ....getter\\\\setter\\\\.... } \"},\"520\":{\"h\":\"3.3 注入数据并使用\",\"a\":\"_3-3-注入数据并使用\"},\"521\":{\"t\":\"注入数据对象（自动装配），直接就可以使用了。\"},\"522\":{\"t\":\"@Autowired private JDBCDateSource dataSource; System.out.println(dataSource.url);//可以成功获取 \"},\"523\":{\"h\":\"2-1. 热部署\"},\"524\":{\"t\":\"提示\"},\"525\":{\"t\":\"开发阶段，当代码修改后，想查看效果就要重启服务器，非常麻烦，而使用热部署就能解决这个问题。\"},\"526\":{\"t\":\"注意：热部署是在开发阶段配置的，方便代码的调试。生产阶段不要开启热部署。\"},\"527\":{\"t\":\"热部署就是代码修改后，服务器会自己悄悄的把更新后的程序给重新加载一遍。\"},\"528\":{\"h\":\"1. 热部署实现原理\",\"a\":\"_1-热部署实现原理\"},\"529\":{\"h\":\"1.1 非SpringBoot项目热部署实现原理\",\"a\":\"_1-1-非springboot项目热部署实现原理\"},\"530\":{\"t\":\"背景：JavaWeb项目部署到本地的Tomcat服务器上。\"},\"531\":{\"t\":\"方案1：在tomcat服务器的配置文件中进行配置\"},\"532\":{\"t\":\"方案2：在IDEA中进行配置。\"},\"533\":{\"t\":\"核心思想：使用服务器去监控其中加载的应用，发现产生了变化就重新加载一次。\"},\"534\":{\"h\":\"1.2 SpringBoot项目热部署实现原理\",\"a\":\"_1-2-springboot项目热部署实现原理\"},\"535\":{\"t\":\"SpringBoot的Tomcat服务器是内置的，tomcat本身也是对象，和我们的程序是平级的，都是spring容器中的组件。\"},\"536\":{\"t\":\"这就需要额外设置一个程序，监控开发的文件，发生变化，就命令Tomcat重新加载开发的文件就OK了。 这样做spring容器中东西不用全部重新加载一遍，只需要重新加载正则开发的文件就可以了，效率更高了。\"},\"537\":{\"h\":\"2. 重启与重载\",\"a\":\"_2-重启与重载\"},\"538\":{\"t\":\"一个springboot项目在运行时实际上是分两个过程进行的，根据加载的东西不同，划分成base类加载器与restart类加载器。\"},\"539\":{\"t\":\"base类加载器：用来加载jar包中的类，jar包中的类和配置文件由于不会发生变化，因此不管加载多少次，加载的内容不会发生变化.\"},\"540\":{\"t\":\"restart类加载器：用来加载开发者自己开发的类、配置文件、页面等信息，这一类文件受开发者影响\"},\"541\":{\"h\":\"2.1 重启：Restart\",\"a\":\"_2-1-重启-restart\"},\"542\":{\"t\":\"加载内容：自定义开发代码，包含类、页面、配置文件等，加载位置restart类加载器。\"},\"543\":{\"t\":\"当springboot项目启动时，base类加载器执行，加载jar包中的信息后，restart类加载器执行，加载开发者制作的内容。\"},\"544\":{\"h\":\"2.2 重载Reload\",\"a\":\"_2-2-重载reload\"},\"545\":{\"t\":\"加载内容：项目中包含的jar包，加载位置base类加载器。\"},\"546\":{\"t\":\"当执行构建项目后，由于jar中的信息不会变化，因此base类加载器无需再次执行，所以仅仅运行restart类加载即可，也就是将开发者自己制作的内容重新加载就行了，这就完成了一次热部署的过程，也可以说热部署的过程实际上是重新加载restart类加载器中的信息。\"},\"547\":{\"h\":\"3. 手动启动热部署\",\"a\":\"_3-手动启动热部署\"},\"548\":{\"t\":\"导入一个SpringBoot开发依赖，其中包含热部署工具。\"},\"549\":{\"h\":\"3.1 导入坐标\",\"a\":\"_3-1-导入坐标\"},\"550\":{\"t\":\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <optional>true</optional> </dependency> \"},\"551\":{\"h\":\"3.2 构建项目\",\"a\":\"_3-2-构建项目\"},\"552\":{\"t\":\"热部署需要手动生效，当修改了文件，准备测试前，手动使用IDEA进行Build Project\"},\"553\":{\"t\":\"菜单栏：Buidl->Build Project（快捷键 Ctrl + F9）。\"},\"554\":{\"h\":\"3.3 问题\",\"a\":\"_3-3-问题\"},\"555\":{\"t\":\"每次进行热部署都需要开发者手工操作，非常麻烦。\"},\"556\":{\"h\":\"4. 自动启动热部署\",\"a\":\"_4-自动启动热部署\"},\"557\":{\"t\":\"这个是IDEA中的设置，让IDEA自动进行热部署。\"},\"558\":{\"h\":\"4.1 设置：自动构建项目build project\",\"a\":\"_4-1-设置-自动构建项目build-project\"},\"559\":{\"t\":\"Setting中勾选，如下：\"},\"560\":{\"t\":\"2-1-1\"},\"561\":{\"h\":\"4.2 设置：允许在程序运行时进行自动构建\",\"a\":\"_4-2-设置-允许在程序运行时进行自动构建\"},\"562\":{\"t\":\"继续在Setting进行如下设置：\"},\"563\":{\"t\":\"2-1-2\"},\"564\":{\"h\":\"4.3 热部署的时机\",\"a\":\"_4-3-热部署的时机\"},\"565\":{\"t\":\"默认当idea工具失去焦点5秒后进行热部署，改完程序需要到浏览器上去调试，这个时候idea就自动进行热部署操作，很人性化。\"},\"566\":{\"h\":\"5. 热部署监控的文件范围\",\"a\":\"_5-热部署监控的文件范围\"},\"567\":{\"t\":\"并发所有的文件修改都会触发热部署，开发中工具中有一组配置，该配置就是来指定哪些文件的修改会触发热部署。\"},\"568\":{\"h\":\"5.1 默认不参与热部署的目录\",\"a\":\"_5-1-默认不参与热部署的目录\"},\"569\":{\"t\":\"/META-INF/maven\"},\"570\":{\"t\":\"/META-INF/resources\"},\"571\":{\"t\":\"/resources\"},\"572\":{\"t\":\"/static\"},\"573\":{\"t\":\"/public\"},\"574\":{\"t\":\"/templates\"},\"575\":{\"h\":\"5.2 修改不参与热部署的目录或文件\",\"a\":\"_5-2-修改不参与热部署的目录或文件\"},\"576\":{\"t\":\"可以通过application.yml文件进行设定哪些文件不参与热部署操作。\"},\"577\":{\"t\":\"spring: devtools: restart: # 设置不参与热部署的文件或文件夹 exclude: static/**,public/**,config/application.yml \"},\"578\":{\"h\":\"6. 关闭热部署\",\"a\":\"_6-关闭热部署\"},\"579\":{\"t\":\"热部署是纯开发阶段的功能，生产阶段必须关闭热部署。\"},\"580\":{\"h\":\"6.1 通过配置强制关闭热部署\",\"a\":\"_6-1-通过配置强制关闭热部署\"},\"581\":{\"t\":\"spring: devtools: restart: enabled: false \"},\"582\":{\"h\":\"6.2 通过启动类强制关闭热部署\",\"a\":\"_6-2-通过启动类强制关闭热部署\"},\"583\":{\"t\":\"配置文件层级过多可能会导致相符覆盖最终引起配置失效，可以提高配置的层级，在更高层级中配置关闭热部署。 比如：最高等级的启动文类中进行关闭。\"},\"584\":{\"t\":\"@SpringBootApplication public class SSMPApplication { public static void main(String[] args) { System.setProperty(\\\"spring.devtools.restart.enabled\\\",\\\"false\\\"); SpringApplication.run(SSMPApplication.class); } } \"},\"585\":{\"h\":\"2-2. 高级配置\"},\"586\":{\"h\":\"Ⅰ. 第三方Bean属性\",\"a\":\"i-第三方bean属性\"},\"587\":{\"h\":\"1. @ConfigurationProperties\",\"a\":\"_1-configurationproperties\"},\"588\":{\"t\":\"yaml配置项的主流配置方式是：将一组数据封装到一个对象中，使用的时候加载该对象，通过该对象读取所需配置。\"},\"589\":{\"t\":\"@ConfigurationProperties注解就是用来指定加载的数据(配置文件中的哪个配置项)。\"},\"590\":{\"t\":\"//file:config/JDBCDateSource：该类用来创建数据对象 @Component//定义为spring管控的bean //指定加载的数据(配置文件中的哪个配置项):datasource @ConfigurationProperties(prefix = \\\"datasource\\\") public class JDBCDateSource { //属性和要封装的数据一一对应 private String driver; private String url; private String username; private String password; ...getter/setter... } \"},\"591\":{\"t\":\"在需要使用这组配置的类中，注入该数据对象，就可以动态获取配置的数据了。\"},\"592\":{\"h\":\"2. @ConfigurationProperties绑定第三方Bean\",\"a\":\"_2-configurationproperties绑定第三方bean\"},\"593\":{\"t\":\"@ConfigurationProperties注解是写在类定义的上方，而第三方开发的bean源代码不是你自己书写的，你也不可能到源代码中去添加@ConfigurationProperties注解，不过@ConfigurationProperties注解依然可以为第三方Bean进行属性绑定，只是格式不同。\"},\"594\":{\"h\":\"2.1 将第三方类加入IOC\",\"a\":\"_2-1-将第三方类加入ioc\"},\"595\":{\"t\":\"Spring知识回顾\"},\"596\":{\"t\":\"在方法上加@Bean注解，该方法的返回值就会加入IOC管理。\"},\"597\":{\"t\":\"以在启动类中，获取德鲁伊对象为例：\"},\"598\":{\"t\":\"@SpringBootApplication public class SpringBootApplication{ @Bean public DruidDataSource datasource(){ DruidDataSource ds = new DruidDataSource(); return ds; } } \"},\"599\":{\"h\":\"2.2 在yml配置文件中定义要绑定的属性\",\"a\":\"_2-2-在yml配置文件中定义要绑定的属性\"},\"600\":{\"t\":\"datasource: driverClassName: com.mysql.jdbc.Driver \"},\"601\":{\"h\":\"2.3 用@ConfigurationProperties注解为第三方bean进行属性绑定\",\"a\":\"_2-3-用-configurationproperties注解为第三方bean进行属性绑定\"},\"602\":{\"t\":\"@Bean @ConfigurationProperties(prefix = \\\"datasource\\\") public DruidDataSource datasource(){ DruidDataSource ds = new DruidDataSource(); return ds; } \"},\"603\":{\"h\":\"2.4 总结\",\"a\":\"_2-4-总结\"},\"604\":{\"t\":\"和自定义Bean的属性绑定操作类似，只不过@ConfigurationProperties注解是添加在方法上的。\"},\"605\":{\"h\":\"3. @EnableConfigurationProperties\",\"a\":\"_3-enableconfigurationproperties\"},\"606\":{\"t\":\"该注解是作用在配置类上的，属性值是个数组，用来标注要使用@ConfigurationProperties注解绑定属性的类。\"},\"607\":{\"t\":\"该注解的意义就是对绑定属性的类进行统一的管理。\"},\"608\":{\"h\":\"3.1 配置类统一管理\",\"a\":\"_3-1-配置类统一管理\"},\"609\":{\"t\":\"@SpringBootApplication //配置类：同时也是SpringBoot启动类 //标注ServerConfig类使用@ConfigurationProperties注解绑定属性 @EnableConfigurationProperties(ServerConfig.class) public class Springboot13ConfigurationApplication { } \"},\"610\":{\"h\":\"3.2 使用@ConfigurationProperties的类\",\"a\":\"_3-2-使用-configurationproperties的类\"},\"611\":{\"t\":\"//该类不能再声明为bean,统一管理时，已经将其自动声明为bean了 @Data @ConfigurationProperties(prefix = \\\"servers\\\") public class ServerConfig { private String ipAddress; private int port; private long timeout; } \"},\"612\":{\"h\":\"4. debug\",\"a\":\"_4-debug\"},\"613\":{\"t\":\"使用@ConfigurationProperties注解时，可能会出现一个提示信息，只需要添加一个坐标此提醒就消失了。\"},\"614\":{\"t\":\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-configuration-processor</artifactId> </dependency> \"},\"615\":{\"h\":\"5. 宽松绑定\",\"a\":\"_5-宽松绑定\"},\"616\":{\"t\":\"配置文件：在进行属性绑定时，配置文件中的命名格式与变量名的命名格式可以进行格式上的最大化兼容。\"},\"617\":{\"t\":\"书写前缀：prefix的值只支持烤肉串书写模式（全小写或用-分割）\"},\"618\":{\"t\":\"@Value：该注解不支持宽松绑定\"},\"619\":{\"h\":\"5.1 示例1：宽松绑定\",\"a\":\"_5-1-示例1-宽松绑定\"},\"620\":{\"t\":\"//配置文件中的servers.ipAddress属性各种书写模式 servers: ipAddress: 192.168.0.2 # 驼峰模式 ip_address: 192.168.0.2 # 下划线模式 ip-address: 192.168.0.2 # 烤肉串模式 IP_ADDRESS: 192.168.0.2 # 常量模式 \"},\"621\":{\"t\":\"@Component @Data @ConfigurationProperties(prefix = \\\"servers\\\") public class ServerConfig { private String ipAddress; //无论配置文件中IPAddress哪种书写模式，这里都生效 } \"},\"622\":{\"h\":\"5.2 示例2：prefix\",\"a\":\"_5-2-示例2-prefix\"},\"623\":{\"t\":\"@Bean @ConfigurationProperties(prefix = \\\"dataSource\\\") public DruidDataSource datasource(){ DruidDataSource ds = new DruidDataSource(); return ds; } \"},\"624\":{\"t\":\"报错：Configuration property name 'dataSource' is not valid:Invalid characters: 'S'\"},\"625\":{\"h\":\"Ⅱ. 计量单位\",\"a\":\"ii-计量单位\"},\"626\":{\"h\":\"1. 属性的单位\",\"a\":\"_1-属性的单位\"},\"627\":{\"t\":\"配置文件中的属性，有些是有单位的，如时间和空间的属性。\"},\"628\":{\"t\":\"servers: ip-address: 192.168.0.1 port: 2345 timeout: 200 # 时间属性， datasize: 20MB # 空间属性 \"},\"629\":{\"h\":\"2. 时间单位：Duration\",\"a\":\"_2-时间单位-duration\"},\"630\":{\"t\":\"Duration类：JDK8新增，表示时间间隔，可以通过@DurationUnit注解描述时间单位\"},\"631\":{\"t\":\"@ConfigurationProperties(prefix = \\\"servers\\\") public class ServerConfig { @DurationUnit(ChronoUnit.HOURS) private Duration serverTimeOut; } \"},\"632\":{\"h\":\"3. 空间单位：DateSize\",\"a\":\"_3-空间单位-datesize\"},\"633\":{\"t\":\"DateSize类：JDK8新增，表示存储空间，可以通过@DataSizeUnit注解描述存储空间单位。\"},\"634\":{\"t\":\"注意：空间属性在配置文件中是可以直接指定单位的。\"},\"635\":{\"t\":\"@ConfigurationProperties(prefix = \\\"servers\\\") public class ServerConfig { @DataSizeUnit(DataUnit.MEGABYTES) private DataSize dataSize; } \"},\"636\":{\"h\":\"Ⅲ. 数据校验\",\"a\":\"iii-数据校验\"},\"637\":{\"t\":\"配置文件中的属性值，可能跟预想的不一样，比如要配置Int类型的数据，确给了个String类型的值。 为了避免这种问题，就要用到属性校验了。\"},\"638\":{\"t\":\"提示\"},\"639\":{\"t\":\"仅做了解，配置很重要，肯定要遵守规范书写的。\"},\"640\":{\"h\":\"1. 导入依赖\",\"a\":\"_1-导入依赖\"},\"641\":{\"t\":\"JAVAEE的JSR303规范中给出了具体的数据校验标准，开发者可以根据自己的需要选择对应的校验框架。\"},\"642\":{\"t\":\"<!--1.导入JSR303规范--> <dependency> <groupId>javax.validation</groupId> <artifactId>validation-api</artifactId> </dependency> <!--使用hibernate框架提供的校验器做实现--> <dependency> <groupId>org.hibernate.validator</groupId> <artifactId>hibernate-validator</artifactId> </dependency> \"},\"643\":{\"h\":\"2. @Validated\",\"a\":\"_2-validated\"},\"644\":{\"t\":\"在需要开启校验功能的类上使用注解@Validated开启校验功能。\"},\"645\":{\"t\":\"@Component @Data @ConfigurationProperties(prefix = \\\"servers\\\") //开启对当前bean的属性注入校验 @Validated public class ServerConfig { } \"},\"646\":{\"h\":\"3. 对具体的字段设置校验规则\",\"a\":\"_3-对具体的字段设置校验规则\"},\"647\":{\"t\":\"@Component @Data @ConfigurationProperties(prefix = \\\"servers\\\") //开启对当前bean的属性注入校验 @Validated public class ServerConfig { //设置具体的规则 @Max(value = 8888,message = \\\"最大值不能超过8888\\\") @Min(value = 202,message = \\\"最小值不能低于202\\\") private int port; } \"},\"648\":{\"h\":\"2-3. 代码测试\"},\"649\":{\"h\":\"Ⅰ. 集成 Junit\",\"a\":\"i-集成-junit\"},\"650\":{\"t\":\"junit默认已经被SpringBoot继承了。\"},\"651\":{\"h\":\"1. pom.xml\",\"a\":\"_1-pom-xml\"},\"652\":{\"t\":\"spring-boot-starter-test就是junit测试有关的模块，在创建SpringBoot工程时，他说默认导入的。如果是手动通过Maven创建的项目，可以手动导入该starter。\"},\"653\":{\"t\":\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> \"},\"654\":{\"h\":\"2. 测试类\",\"a\":\"_2-测试类\"},\"655\":{\"t\":\"SpringBoot已经默认创建了一个测试类：test/java/com/sgugo/XxxApplicationTests\"},\"656\":{\"t\":\"@SpringBootTest //声明测试类 class AifaceApplicationTests { @Test void contextLoads() { //测试代码 } } \"},\"657\":{\"t\":\"@SpringBootTest注解定义在类的上方，声明该类为测试类。\"},\"658\":{\"h\":\"3. 测试的步骤\",\"a\":\"_3-测试的步骤\"},\"659\":{\"t\":\"导入测试对应的starter（创建项目时SpringBoot自动导入了）\"},\"660\":{\"t\":\"创建测试类（由@SpringBootTest修饰），项目默认有一个测试类。\"},\"661\":{\"t\":\"注入要测试的对象（IOC自动装载）\"},\"662\":{\"t\":\"执行要测试的对象对应的方法。\"},\"663\":{\"t\":\"@SpringBootTest class BlogApplicationTests { @Autowired private BookDao bookDao;//注入要测试的对象 @Test void contextLoads() { bookDao.save(); //执行要测试的对象的方法。 } } \"},\"664\":{\"h\":\"4. 测试类的目录规划\",\"a\":\"_4-测试类的目录规划\"},\"665\":{\"t\":\"测试类默认的位置和引导类是对应的（package是一样的）。 如果将测试类的位置改变了，测试类将无法运行（包不匹配）。\"},\"666\":{\"h\":\"5. classes属性\",\"a\":\"_5-classes属性\"},\"667\":{\"t\":\"当测试类与引导类的包不匹配时，将无法执行测试类。\"},\"668\":{\"t\":\"此时需要为@SpringBootTest注解添加一个classes属性，指明当前项目的引导类，这样测试类就再次有效了。\"},\"669\":{\"t\":\"@SpringBootTest(calssess = BlogApplication.class) class BlogApplicationTests { } \"},\"670\":{\"t\":\"和Spring整合Junit一样，只是SpringBoot进行了整合简化。SpringBoot不用指定配置类，而是自动去查找配置类（在和引导类相同的包中），如果包里找不到@SpringBootTest注解的类，就会报错，此时就必须手动指定配置类了。\"},\"671\":{\"h\":\"Ⅱ. 加载测试专用配置\",\"a\":\"ii-加载测试专用配置\"},\"672\":{\"t\":\"相关信息\"},\"673\":{\"t\":\"配置文件已经设置好了，但是要测试的属性值与配置文件中的不一样（比如测试兼容性）。如果每次测试前改过来，每次测试后改回去，这太麻烦了。因此需要在测试环境中临时创建一组属性，来覆盖源码中设定的属性。\"},\"674\":{\"t\":\"注意\"},\"675\":{\"t\":\"并不常用，暂略。\"},\"676\":{\"h\":\"Ⅲ. 测试API\",\"a\":\"iii-测试api\"},\"677\":{\"t\":\"注意\"},\"678\":{\"t\":\"在test中测试API，而不是在POSTMAN中。\"},\"679\":{\"t\":\"一般使用POSTMAN或者Swagger，暂略。\"},\"680\":{\"h\":\"Ⅳ. 数据层测试\",\"a\":\"iv-数据层测试\"},\"681\":{\"t\":\"注意\"},\"682\":{\"t\":\"暂略，一般会有测试用的数据库。\"},\"683\":{\"h\":\"3-1. 打包与发布\"},\"684\":{\"h\":\"Ⅰ. Windows\",\"a\":\"i-windows\"},\"685\":{\"t\":\"实际开发时都是部署到Linux服务器上的，windows服务器仅作为测试。\"},\"686\":{\"t\":\"其实测试版基本也是在Linux上。\"},\"687\":{\"h\":\"1. 概念\",\"a\":\"_1-概念\"},\"688\":{\"t\":\"打包：指将程序转换成一个可执行的文件，\"},\"689\":{\"t\":\"发布：指不依赖开发环境执行打包产生的文件。\"},\"690\":{\"t\":\"上述两个操作都有对应的命令可以快速执行。\"},\"691\":{\"h\":\"2. 打包\",\"a\":\"_2-打包\"},\"692\":{\"t\":\"SpringBoot程序是基于Maven创建的，在Maven中提供有打包的指令，叫做package。 本操作可以在Idea环境下执行。\"},\"693\":{\"t\":\"mvn package \"},\"694\":{\"t\":\"打包后会产生一个与工程名类似的jar文件，其名称由模块名+版本号+.jar组成。\"},\"695\":{\"h\":\"3. 发布 (运行)\",\"a\":\"_3-发布-运行\"},\"696\":{\"t\":\"程序打包好以后，就可以直接执行了。 在程序包所在路径下，执行指令：\"},\"697\":{\"t\":\"java -jar 工程包名.jar \"},\"698\":{\"t\":\"执行程序打包指令后，程序正常运行，与在Idea下执行程序没有区别。\"},\"699\":{\"h\":\"3.1 JDK\",\"a\":\"_3-1-jdk\"},\"700\":{\"t\":\"计算机上必须安装JDK，否则无法执行java命令。\"},\"701\":{\"h\":\"3.2 Maven插件\",\"a\":\"_3-2-maven插件\"},\"702\":{\"t\":\"在使用向导创建SpringBoot工程时，pom.xml文件中会有如下配置，这一段配置千万不能删除，否则打包后无法正常执行程序。\"},\"703\":{\"t\":\"<build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> \"},\"704\":{\"h\":\"4. SpringBoot的Maven打包插件\",\"a\":\"_4-springboot的maven打包插件\"},\"705\":{\"t\":\"spring-boot-maven-plugin插件用于将当前程序打包成一个可以独立运行的程序包。\"},\"706\":{\"h\":\"4.1 两种打包方式\",\"a\":\"_4-1-两种打包方式\"},\"707\":{\"t\":\"方式1：不使用spring-boot-maven-plugin插件打包 \"},\"708\":{\"t\":\"将默认生成的spring-boot-maven-plugin插件注释掉。\"},\"709\":{\"t\":\"方式2：使用spring-boot-maven-plugin插件打包\"},\"710\":{\"h\":\"4.2 两种打包方式的对比\",\"a\":\"_4-2-两种打包方式的对比\"},\"711\":{\"t\":\"打包后文件的大小不同：差了30倍\"},\"712\":{\"t\":\"打包后所包含的内容不同\"},\"713\":{\"t\":\"打包程序中个别文件内容不同\"},\"714\":{\"t\":\"3-1-1\"},\"715\":{\"h\":\"5 Jar包的目录结构\",\"a\":\"_5-jar包的目录结构\"},\"716\":{\"h\":\"5.1 带spring-boot-maven-plugin插件的jar包\",\"a\":\"_5-1-带spring-boot-maven-plugin插件的jar包\"},\"717\":{\"t\":\"META-INF \"},\"718\":{\"t\":\"MANIFEST.MF\"},\"719\":{\"t\":\"BOOT-INF \"},\"720\":{\"t\":\"classes：项目目录 \"},\"721\":{\"t\":\"com：项目包\"},\"722\":{\"t\":\"static：页面\"},\"723\":{\"t\":\"application.yml：配置文件\"},\"724\":{\"t\":\"lib：所有springboot项目依赖的jar包都在这里了，依赖这些Jar包，springboot就可以单独运行了\"},\"725\":{\"t\":\"Org.Springframework.boot.loader \"},\"726\":{\"t\":\"JarLauncher.class：该类内部要查找MANIFEST.MF中Start-Class属性配置的类，并执行\"},\"727\":{\"h\":\"5.2 不带spring-boot-maven-plugin插件的jar包\",\"a\":\"_5-2-不带spring-boot-maven-plugin插件的jar包\"},\"728\":{\"t\":\"com：项目目录\"},\"729\":{\"t\":\"META-INF \"},\"730\":{\"t\":\"MANIFEST.MF：\"},\"731\":{\"t\":\"static：页面目录\"},\"732\":{\"t\":\"application.yml：配置文件\"},\"733\":{\"h\":\"5.3 MANIFEAST.MF\",\"a\":\"_5-3-manifeast-mf\"},\"734\":{\"t\":\"//1.普通工程的MANIFEAST.MF Manifest-Version: 1.0 Implementation-Title: springboot_08_ssmp Implementation-Version: 0.0.1-SNAPSHOT Build-Jdk-Spec: 1.8 Created-By: Maven Jar Plugin 3.2.0 //2.带spring-boot-maven-plugin的jar包的MANIFEAST.MF Manifest-Version: 1.0 Spring-Boot-Classpath-Index: BOOT-INF/classpath.idx Implementation-Title: springboot_08_ssmp Implementation-Version: 0.0.1-SNAPSHOT Spring-Boot-Layers-Index: BOOT-INF/layers.idx //JarLauncher执行该类：启动类 Start-Class: com.itheima.SSMPApplication Spring-Boot-Classes: BOOT-INF/classes/ Spring-Boot-Lib: BOOT-INF/lib/ Build-Jdk-Spec: 1.8 Spring-Boot-Version: 2.5.4 Created-By: Maven Jar Plugin 3.2.0 //如果使用java -jar执行此程序包，将执行Main-Class属性配置的类 Main-Class: org.springframework.boot.loader.JarLauncher \"},\"735\":{\"h\":\"5.4 总结\",\"a\":\"_5-4-总结\"},\"736\":{\"t\":\"SpringBoot程序添加配置后会打出一个特殊的包，包含Spring框架部分功能，原始工程内容，原始工程依赖的jar包\"},\"737\":{\"t\":\"首先读取MANIFEST.MF文件中的Main-Class属性，用来标记执行java -jar命令后运行的类\"},\"738\":{\"t\":\"JarLauncher类执行时会找到Start-Class属性，也就是启动类类名\"},\"739\":{\"t\":\"运行启动类时会运行当前工程的内容\"},\"740\":{\"t\":\"运行当前工程时会使用依赖的jar包，从lib目录中查找\"},\"741\":{\"t\":\"这就是为什么这个jar包能独立运行的原因。\"},\"742\":{\"t\":\"而不带Maven插件打包的结果只是一个普通包，在MANIFEST.MF文件中也就没有了Main-Class对应的属性了，所以运行时提示找不到主清单属性，运行报错。\"},\"743\":{\"h\":\"6. 端口号冲突\",\"a\":\"_6-端口号冲突\"},\"744\":{\"t\":\"一般80端口冲突都是因为开启了多个服务器，常用解决方案时，其他服务器关闭，或者修改端口号，比如前端服务器的端口号改为8080。\"},\"745\":{\"t\":\"如果关闭其他服务器和改端口号都解决不了问题，就要针对性的结束进程了。\"},\"746\":{\"t\":\"# 查询端口 netstat -ano # 查询指定端口 netstat -ano |findstr \\\"端口号\\\" # 根据进程PID查询进程名称 tasklist |findstr \\\"进程PID号\\\" # 根据PID杀死任务 taskkill /F /PID \\\"进程PID号\\\" \"},\"747\":{\"h\":\"Ⅱ. Linux\",\"a\":\"ii-linux\"},\"748\":{\"h\":\"1. 项目部署步骤\",\"a\":\"_1-项目部署步骤\"},\"749\":{\"t\":\"本地：开发部门使用git将项目上传道版本服务器\"},\"750\":{\"t\":\"服务器：使用git下载项目\"},\"751\":{\"t\":\"服务器：使用Maven工具在当前真机环境下构建项目\"},\"752\":{\"t\":\"启动服务\"},\"753\":{\"h\":\"2. 部署环境\",\"a\":\"_2-部署环境\"},\"754\":{\"t\":\"安装JDK，搭建数据库并创建好数据表。\"},\"755\":{\"h\":\"3. 上传jar包\",\"a\":\"_3-上传jar包\"},\"756\":{\"t\":\"将SpringBoot打包好的jar包上传道 /usr/local目录中（其他目录也可以）。\"},\"757\":{\"h\":\"4. 启动项目\",\"a\":\"_4-启动项目\"},\"758\":{\"t\":\"基本命令和windows上的相同。\"},\"759\":{\"t\":\"执行jar命令：java –jar 工程名.jar\"},\"760\":{\"h\":\"3-2. 配置文件设计\"},\"761\":{\"t\":\"提示\"},\"762\":{\"t\":\"以下知识点仅做了解，实际开发时：\"},\"763\":{\"t\":\"采用多环境配置文件区分不同场景下的配置。\"},\"764\":{\"t\":\"采用配置中心更新配置文件。\"},\"765\":{\"h\":\"Ⅰ. 临时属性配置\",\"a\":\"i-临时属性配置\"},\"766\":{\"t\":\"程序包打好以后，里面的配置都已经是固定的了，比如配置了服务器的端口是8080。\"},\"767\":{\"t\":\"如果执行jar包时，发现端口被占用了，而占用端口的程序又不能关闭，这是该怎么办呢？要重新打包吗？\"},\"768\":{\"h\":\"1. 启动命令的临时属性\",\"a\":\"_1-启动命令的临时属性\"},\"769\":{\"t\":\"SpringBoot提供了临时属性的方式快速修改某些配置，在启动服务的时候，将配置作为参数添加即可。\"},\"770\":{\"t\":\"java -jar blog.jar --server.port=81 \"},\"771\":{\"t\":\"语法 输入启动命令后，空一格输入两个-，然后按照 属性名=属性值 的方式添加参数（参数的键值对格式为properties），如果有多个属性要添加，按照上述格式继续写，属性与属性之间使用 空格 分隔。\"},\"772\":{\"h\":\"2. 属性加载的优先级\",\"a\":\"_2-属性加载的优先级\"},\"773\":{\"t\":\"临时属性的优先级高于配置文件。\"},\"774\":{\"h\":\"3. 开发中使用临时属性\",\"a\":\"_3-开发中使用临时属性\"},\"775\":{\"t\":\"在IDEA中，也可以输入临时属性： 点击右上角的SpringBoot引导类的运行界面，Program arguments就是输入临时属性的\"},\"776\":{\"t\":\"注意：新版的IDEA默认是没有Program arguments选项框的，使用快捷键Alt m 可以添加隐藏的选项框。\"},\"777\":{\"t\":\"3-2-1\"},\"778\":{\"h\":\"4. main的args参数\",\"a\":\"_4-main的args参数\"},\"779\":{\"t\":\"启动项目时，SpringBoot会自动执行引导类的main方法，main方法再执行时，将args参数传递给了里面的run方法。\"},\"780\":{\"t\":\"在Idea中配置的临时参数就是通过这个位置传递到我们的程序中的。 如果将run方法的args删掉，Springboot项目依然能启动， 但是就无法使用临时属性了。\"},\"781\":{\"t\":\"public static void main(String[] args) { SpringApplication.run(SSMPApplication.class,args); } public static void main(String[] args) { SpringApplication.run(SSMPApplication.class);//不携带args参数，临时属性失效 } //自定义临时属性 public static void main(String[] args) { String[] arg = new String[1]; arg[0] = \\\"--server.port=8082\\\"; //依然能够生效 SpringApplication.run(SSMPApplication.class, arg); } \"},\"782\":{\"h\":\"5. 总结\",\"a\":\"_5-总结\"},\"783\":{\"t\":\"警告\"},\"784\":{\"t\":\"临时属性一般不用，而是采用多个配置文件。\"},\"785\":{\"h\":\"Ⅱ. 配置文件分类\",\"a\":\"ii-配置文件分类\"},\"786\":{\"t\":\"开发中使用的配置文件与项目上线后的配置文件是有一定区别的。 因此需要对配置文件分类，采用多个配置文件。\"},\"787\":{\"h\":\"1. 配置文件的级别\",\"a\":\"_1-配置文件的级别\"},\"788\":{\"t\":\"SpringBoot提供了四个级别的配置文件（级别指的是优先级）。 其实就是四个配置文件书写的位置，不同的位置优先级不同。\"},\"789\":{\"t\":\"4级：类路径下配置文件（一直使用的是这个，resources/application.yml文件）【最低】\"},\"790\":{\"t\":\"3级：类路径下config目录下配置文件，resource/config/application.yml\"},\"791\":{\"t\":\"2级：程序包所在目录中配置文件\"},\"792\":{\"t\":\"1级：程序包所在目录中config目录下配置文件【最高】\"},\"793\":{\"h\":\"2. 使用场景\",\"a\":\"_2-使用场景\"},\"794\":{\"t\":\"1级与2级留做系统打包后设置通用属性，1级常用于运维经理进行线上整体项目部署方案调控\"},\"795\":{\"t\":\"3级与4级用于系统开发阶段设置通用属性，3级常用于项目经理进行整体项目属性调控\"},\"796\":{\"t\":\"项目类路径配置文件（4级）：服务于开发人员本机开发与测试\"},\"797\":{\"t\":\"项目类路径config目录中配置文件（3级）：服务于项目经理整体调控\"},\"798\":{\"t\":\"工程路径配置文件（2级）：服务于运维人员配置涉密线上环境\"},\"799\":{\"t\":\"工程路径config目录中配置文件（1级）：服务于运维经理整体调控\"},\"800\":{\"h\":\"3. 多层级配置文件的关系\",\"a\":\"_3-多层级配置文件的关系\"},\"801\":{\"t\":\"不同配置相互叠加。 相同配置，高优先级覆盖低优先级的。\"},\"802\":{\"h\":\"Ⅲ. 自定义配置文件\",\"a\":\"iii-自定义配置文件\"},\"803\":{\"t\":\"配置文件名默认为：application.yml，这个名字是可以修改的。\"},\"804\":{\"h\":\"1. 应用场景\",\"a\":\"_1-应用场景\"},\"805\":{\"t\":\"比如元旦做活动，需要修改服务器配置，1周后活动取消，这时候更新下配置文件即可。\"},\"806\":{\"t\":\"我们不能再原始配置文件上修改，而是新建一个配置文件，方便维护。\"},\"807\":{\"h\":\"2. 配置方式\",\"a\":\"_2-配置方式\"},\"808\":{\"t\":\"使用临时属性设置配置文件名，注意仅仅是名称，不要带扩展名 \"},\"809\":{\"t\":\"properties与yml文件格式均支持：--spring.config.name=ebank\"},\"810\":{\"t\":\"使用临时属性设置配置文件路径，这个是全路径名 \"},\"811\":{\"t\":\"--spring.config.loaction=classpath:/ebank.properties\"},\"812\":{\"h\":\"3. 补充说明\",\"a\":\"_3-补充说明\"},\"813\":{\"t\":\"现在写的SpringBoot项目都是单体项目（单服务器版本），企业开发时更多的是基于SpringCloud的多服务器的微服务项目。\"},\"814\":{\"t\":\"这种配置方式和我们现在学习的完全不一样，所有的服务器将不再设置自己的配置文件，而是通过配置中心获取配置，动态加载配置信息，目的是为了集中管理。\"},\"815\":{\"h\":\"3-3. 多环境开发\"},\"816\":{\"t\":\"什么是多环境\"},\"817\":{\"t\":\"电脑上写的程序最终要放到别人的服务器上去运行。每个计算机环境不一样，这就是多环境。\"},\"818\":{\"t\":\"比如连接的数据库不一样，设置的访问端口不一样等等。\"},\"819\":{\"t\":\"常见的多环境开发主要兼顾3种环境设置：\"},\"820\":{\"t\":\"生产环境：服务器部署使用\"},\"821\":{\"t\":\"开发环境：开发人员使用\"},\"822\":{\"t\":\"测试环境：公司测试部门使用\"},\"823\":{\"h\":\"Ⅰ. yml 单一文件版\",\"a\":\"i-yml-单一文件版\"},\"824\":{\"t\":\"在一个yaml文件中，设置三种环境。\"},\"825\":{\"h\":\"1. 示例\",\"a\":\"_1-示例\"},\"826\":{\"t\":\"3-3-1\"},\"827\":{\"h\":\"2. 语法\",\"a\":\"_2-语法\"},\"828\":{\"t\":\"以---分割各个环境，spring.profiles：指定环境名，名字随意。\"},\"829\":{\"t\":\"最顶层是来配置当前启动的环境的。一般最顶层也会加上一些通用的配置。\"},\"830\":{\"t\":\"spring: profiles: active: pro # 启动pro --- spring: profiles: pro server: port: 80 --- spring: profiles: dev server: port: 81 --- spring: config: #profiles 过时了，可以采用config.activate.on-profile代替 activate: on-profile: test server: port: 82 \"},\"831\":{\"h\":\"Ⅱ. yml 多文件版\",\"a\":\"ii-yml-多文件版\"},\"832\":{\"t\":\"单个文件存放多个环境配置，不容易维护，且容易暴露信息。\"},\"833\":{\"t\":\"比如：生产环境的密码被测试任意拿到。\"},\"834\":{\"h\":\"1. 定义多个配置文件\",\"a\":\"_1-定义多个配置文件\"},\"835\":{\"t\":\"在resource目录下设置如下配置文件（注意：命名严格要求application-xx）\"},\"836\":{\"t\":\"application.yml【主配置文件，存放通用配置】\"},\"837\":{\"t\":\"application-dev.yml【dev环境配置文件】\"},\"838\":{\"t\":\"application-test.yml【test环境配置文件】\"},\"839\":{\"t\":\"application-pro.yml【生产环境配置文件】\"},\"840\":{\"h\":\"2. 应用\",\"a\":\"_2-应用\"},\"841\":{\"t\":\"在主配置文件中指定要引入哪个环境的配置文件。\"},\"842\":{\"t\":\"主配置文件还会存放通用的配置信息，环境分类配置文件中常用于设置冲突属性（局部）。 启用的名字就是application-后面的名字。\"},\"843\":{\"t\":\"spring: profiles: active: dev #启用dev环境的配置文件 \"},\"844\":{\"h\":\"Ⅲ. 多环境开发控制\",\"a\":\"iii-多环境开发控制\"},\"845\":{\"h\":\"1. include\",\"a\":\"_1-include\"},\"846\":{\"t\":\"将所有的配置根据功能对配置文件中的信息进行拆分，并制作成独立的配置文件。\"},\"847\":{\"t\":\"命名规则如下：\"},\"848\":{\"t\":\"application-devDB.yml\"},\"849\":{\"t\":\"application-devRedis.yml\"},\"850\":{\"t\":\"application-devMVC.yml\"},\"851\":{\"h\":\"1.1 使用\",\"a\":\"_1-1-使用\"},\"852\":{\"t\":\"使用include属性在激活指定环境的情况下，同时对多个环境进行加载使其生效，多个环境间使用逗号分隔。\"},\"853\":{\"t\":\"pring: profiles: active: dev # 主环境dev include: devDB,devRedis,devMVC #dev环境额外新增的配置 \"},\"854\":{\"h\":\"1.2 优先级\",\"a\":\"_1-2-优先级\"},\"855\":{\"t\":\"当主环境dev与其他环境有相同属性时，主环境属性生效；其他环境中有相同属性时，最后加载的环境属性生效。\"},\"856\":{\"h\":\"2. group\",\"a\":\"_2-group\"},\"857\":{\"t\":\"include有一个问题，比如我要切换dev环境为pro时，include也要修改。 SpringBoot从2.4版开始使用group属性替代include属性，降低了配置书写量。\"},\"858\":{\"t\":\"spring: profiles: active: dev group: \\\"dev\\\": devDB,devRedis,devMVC \\\"pro\\\": proDB,proRedis,proMVC \\\"test\\\": testDB,testRedis,testMVC \"},\"859\":{\"t\":\"如上，active指定哪个环境组生效。group中配置各个组环境组，其中键为主环境，值为额外include的环境。主环境的优先级最低（最先加载），其他的根据加载顺序确定。\"},\"860\":{\"h\":\"3. Maven设置多环境\",\"a\":\"_3-maven设置多环境\"},\"861\":{\"t\":\"先在maven环境中设置用什么具体的环境，在SpringBoot中读取maven设置的环境即可。\"},\"862\":{\"t\":\"<!--设置多环境--> <profiles> <profile> <id>env_dev</id> <properties> <profile.active>dev</profile.active> </properties> <activation> //设置默认启动的环境 <activeByDefault>true</activeByDefault> </activation> </profile> <profile> <id>env_pro</id> <properties> <profile.active>pro</profile.active> </properties> </profile> </profiles> \"},\"863\":{\"h\":\"3.1 SpringBoot中读取maven设置值\",\"a\":\"_3-1-springboot中读取maven设置值\"},\"864\":{\"t\":\"SpringBoot使用@..@占位符读取Maven对应的配置属性值。\"},\"865\":{\"t\":\"spring: profiles: active: @profile.active@ #动态读取配置 \"},\"866\":{\"h\":\"3.2 使用\",\"a\":\"_3-2-使用\"},\"867\":{\"t\":\"执行Maven打包指令，并在生成的boot打包文件.jar文件中查看对应信息，发现 @profile.active@被替换成了具体的值。\"},\"868\":{\"h\":\"3.3 debug\",\"a\":\"_3-3-debug\"},\"869\":{\"t\":\"基于SpringBoot读取Maven配置属性的前提下，如果在Idea下测试工程时pom.xml每次更新需要手动compile方可生效。\"},\"870\":{\"h\":\"3-4. log日志\"},\"871\":{\"t\":\"提示\"},\"872\":{\"t\":\"实际开发时，是要在应用后台对日志进行可视化处理的。\"},\"873\":{\"h\":\"Ⅰ. 记录日志\",\"a\":\"i-记录日志\"},\"874\":{\"h\":\"1. 日志的作用\",\"a\":\"_1-日志的作用\"},\"875\":{\"t\":\"编程期调试代码\"},\"876\":{\"t\":\"运营期记录信息\"},\"877\":{\"t\":\"记录日常运营重要信息（峰值流量、平均响应时长……）\"},\"878\":{\"t\":\"记录应用报错信息（错误堆栈）\"},\"879\":{\"t\":\"记录运维过程数据（扩容、宕机、报警……）\"},\"880\":{\"h\":\"2. 使用日志对象记录日志\",\"a\":\"_2-使用日志对象记录日志\"},\"881\":{\"t\":\"例如：在某个Controller添加日志记录。\"},\"882\":{\"t\":\"@RestController @RequestMapping(\\\"/books\\\") public class BookController { @GetMapping public String getById(){ System.out.println(\\\"springboot is running...2\\\"); //1.创建日志对象 private static final logger log = LoggerFactory.getLogger(BookController.class); //2.记录日志(日志会在控制台打印):调用日志对象的API记录日志 log.debug(\\\"debug...\\\"); log.info(\\\"info...\\\"); log.warn(\\\"warn...\\\"); log.error(\\\"error...\\\"); return \\\"springboot is running...2\\\"; } } \"},\"883\":{\"h\":\"3. 优化日志对象的创建\",\"a\":\"_3-优化日志对象的创建\"},\"884\":{\"t\":\"每个类都要创建日志对象，太麻烦了。\"},\"885\":{\"t\":\"可以创建一个基础控制器BaseController，在该控制器中创建日志对象，需要记录日志的控制器就继承该控制器。 缺点：还是比较繁琐，需要继承，继承只能一次，不能浪费了。\"},\"886\":{\"h\":\"4. @Slf4j\",\"a\":\"_4-slf4j\"},\"887\":{\"t\":\"lombok包提供的类注解@Slf4j，可以为类注入日志对象。\"},\"888\":{\"t\":\"@Slf4j //注入日志对象,对象名就是：log @RestController @RequestMapping(\\\"/books\\\") public class BookController { @GetMapping public String getById(){ System.out.println(\\\"springboot is running...2\\\"); //直接使用注入的对象log log.debug(\\\"debug...\\\"); log.info(\\\"info...\\\"); log.warn(\\\"warn...\\\"); log.error(\\\"error...\\\"); return \\\"springboot is running...2\\\"; } } \"},\"889\":{\"h\":\"Ⅱ. 日志的等级\",\"a\":\"ii-日志的等级\"},\"890\":{\"h\":\"1. 等级划分\",\"a\":\"_1-等级划分\"},\"891\":{\"t\":\"日志设置好以后可以根据设置选择哪些参与记录。这里是根据日志的级别来设置的。\"},\"892\":{\"t\":\"日志的级别分为6种，分别是：\"},\"893\":{\"t\":\"TRACE：运行堆栈信息，使用率低\"},\"894\":{\"t\":\"DEBUG：程序员调试代码使用\"},\"895\":{\"t\":\"INFO：记录运维过程数据\"},\"896\":{\"t\":\"WARN：记录运维过程报警数据\"},\"897\":{\"t\":\"ERROR：记录错误堆栈信息\"},\"898\":{\"t\":\"FATAL：灾难信息，合并计入ERROR\"},\"899\":{\"h\":\"2. 日志的等级选择\",\"a\":\"_2-日志的等级选择\"},\"900\":{\"t\":\"一般情况下，开发时候使用DEBUG，上线后使用INFO，运维信息记录使用WARN即可。\"},\"901\":{\"t\":\"日志等级一般在application配置文件中设置。\"},\"902\":{\"h\":\"3. 配置文件设置日志等级\",\"a\":\"_3-配置文件设置日志等级\"},\"903\":{\"t\":\"# 开启 debug 模式，输出调试信息，常用于检查系统运行状况 debug: true \"},\"904\":{\"h\":\"4. 通过日志组设置日志等级\",\"a\":\"_4-通过日志组设置日志等级\"},\"905\":{\"t\":\"直接设置日志等级太粗暴了，日志系统提供了更加细致的日志等级控制，可以精确到某个包的日志等级\"},\"906\":{\"t\":\"也可以同时为多个包设置日志等级（日志组）。\"},\"907\":{\"t\":\"logging: # 设置日志组 group: # 自定义组名，设置当前组中所包含的包 ebank: com.blog.controller level: # 默认日志组root，控制项目下所有包 root: debug # 为对应组设置日志级别 ebank: debug # 为对包设置日志级别 com.itheima.controller: debug \"},\"908\":{\"h\":\"Ⅲ. 日志输出格式\",\"a\":\"iii-日志输出格式\"},\"909\":{\"h\":\"1. 默认格式\",\"a\":\"_1-默认格式\"},\"910\":{\"t\":\"在控制台打印日志时，默认的格式如下：\"},\"911\":{\"t\":\"3-4-1\"},\"912\":{\"h\":\"2. 配置文件控制日志格式\",\"a\":\"_2-配置文件控制日志格式\"},\"913\":{\"t\":\"可以在配置文件中，配置日志格式。\"},\"914\":{\"t\":\"logging: pattern: console: \\\"具体的格式\\\" \"},\"915\":{\"h\":\"3. 日志格式语法\",\"a\":\"_3-日志格式语法\"},\"916\":{\"t\":\"%d：日期\"},\"917\":{\"t\":\"%m：消息\"},\"918\":{\"t\":\"%n：换行\"},\"919\":{\"t\":\"%clr()：颜色 \"},\"920\":{\"t\":\"%clr(%d){red}：后接中括号可以指定日志的颜色\"},\"921\":{\"t\":\"长度：用于对齐，在字母前使用数字，数字就代表该部分日志占多少位\"},\"922\":{\"t\":\"普通字符串：可以拼接任意普通字符串，更加易读\"},\"923\":{\"t\":\"logging: pattern: console: \\\"%d %clr(%p) --- [%16t] %clr(%-40.40c){cyan} : %m %n\\\" \"},\"924\":{\"h\":\"4. 日志处理\",\"a\":\"_4-日志处理\"},\"925\":{\"t\":\"实际开发中，都是将日志写入文件，然后再使用工具读取日志文件。再使用各种字符串处理方法和前端的美化，做日志可视化处理。 这样在后台就可以看见非常：直观、美观、动态、且包含数据分析、警示等各种附加功能的日志了。\"},\"926\":{\"h\":\"Ⅳ. 日志文件\",\"a\":\"iv-日志文件\"},\"927\":{\"t\":\"项目上线后，就要将日志写入文件，然后在进行可视化处理了。\"},\"928\":{\"h\":\"1. 设置日志文件\",\"a\":\"_1-设置日志文件\"},\"929\":{\"t\":\"在配置文件中开启日志文件。\"},\"930\":{\"t\":\"logging: file: name: server.log #日志文件名 \"},\"931\":{\"h\":\"2. 日志策略\",\"a\":\"_2-日志策略\"},\"932\":{\"t\":\"对于日志文件的使用存在各种各样的策略，例如每日记录，分类记录，报警后记录等。\"},\"933\":{\"t\":\"其中最基础的策略就是：日志分文件存储（防止文件太大，难易读取）。 分文件存储就要为每个文件设置动态有序的文件名，并设置新增文件的时机（限制日志大小）。\"},\"934\":{\"h\":\"3. 日志策略配置\",\"a\":\"_3-日志策略配置\"},\"935\":{\"t\":\"在配置文件中，可以对基本的日志策略进行配置：\"},\"936\":{\"t\":\"logging: logback: rollingpolicy: #日志文件大小限制,超过该大小就新建日志文件 max-file-size: 3MB #新建日志文件的命名规则 file-name-pattern: server.%d{yyyy-MM-dd}.%i.log \"},\"937\":{\"t\":\"命名规则\"},\"938\":{\"t\":\"server：固定部分\"},\"939\":{\"t\":\"%d{yyyy-MM-dd}：日期，中括号可选，用来配置日期格式\"},\"940\":{\"t\":\"%i：从0开始的自增数字\"},\"941\":{\"h\":\"Ⅴ. Logback 日志\",\"a\":\"v-logback-日志\"},\"942\":{\"h\":\"1. 介绍\",\"a\":\"_1-介绍\"},\"943\":{\"t\":\"spring boot内部使用Logback作为日志实现的框架。\"},\"944\":{\"t\":\"Logback和log4j非常相似，如果你对log4j很熟悉，那对logback很快就会得心应手。\"},\"945\":{\"t\":\"logback相对于log4j的一些优点\"},\"946\":{\"h\":\"2. 配置logback日志\",\"a\":\"_2-配置logback日志\"},\"947\":{\"t\":\"删除日志配置：删除配置文件中所有的日志配置，包括mybatis的\"},\"948\":{\"t\":\"安装插件：安装idea彩色日志插件：grep-console\"},\"949\":{\"t\":\"创建配置文件：resources 中创建 logback-spring.xml \"},\"950\":{\"t\":\"自动在该模块中生效。\"},\"951\":{\"h\":\"3. 配置文件内容\",\"a\":\"_3-配置文件内容\"},\"952\":{\"t\":\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <configuration scan=\\\"true\\\" scanPeriod=\\\"10 seconds\\\"> <!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 --> <!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true --> <!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 --> <!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --> <contextName>logback</contextName> <!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。 --> <property name=\\\"log.path\\\" value=\\\"D:/guli_1010/edu\\\" /> <!-- 彩色日志 --> <!-- 配置格式变量：CONSOLE_LOG_PATTERN 彩色日志格式 --> <!-- magenta:洋红 --> <!-- boldMagenta:粗红--> <!-- cyan:青色 --> <!-- white:白色 --> <!-- magenta:洋红 --> <property name=\\\"CONSOLE_LOG_PATTERN\\\" value=\\\"%yellow(%date{yyyy-MM-dd HH:mm:ss}) |%highlight(%-5level) |%blue(%thread) |%blue(%file:%line) |%green(%logger) |%cyan(%msg%n)\\\"/> <!--输出到控制台--> <appender name=\\\"CONSOLE\\\" class=\\\"ch.qos.logback.core.ConsoleAppender\\\"> <!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--> <!-- 例如：如果此处配置了INFO级别，则后面其他位置即使配置了DEBUG级别的日志，也不会被输出 --> <filter class=\\\"ch.qos.logback.classic.filter.ThresholdFilter\\\"> <level>INFO</level> </filter> <encoder> <Pattern>${CONSOLE_LOG_PATTERN}</Pattern> <!-- 设置字符集 --> <charset>UTF-8</charset> </encoder> </appender> <!--输出到文件--> <!-- 时间滚动输出 level为 INFO 日志 --> <appender name=\\\"INFO_FILE\\\" class=\\\"ch.qos.logback.core.rolling.RollingFileAppender\\\"> <!-- 正在记录的日志文件的路径及文件名 --> <file>${log.path}/log_info.log</file> <!--日志文件输出格式--> <encoder> <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern> <charset>UTF-8</charset> </encoder> <!-- 日志记录器的滚动策略，按日期，按大小记录 --> <rollingPolicy class=\\\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\\\"> <!-- 每天日志归档路径以及格式 --> <fileNamePattern>${log.path}/info/log-info-%d{yyyy-MM-dd}.%i.log</fileNamePattern> <timeBasedFileNamingAndTriggeringPolicy class=\\\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\\\"> <maxFileSize>100MB</maxFileSize> </timeBasedFileNamingAndTriggeringPolicy> <!--日志文件保留天数--> <maxHistory>15</maxHistory> </rollingPolicy> <!-- 此日志文件只记录info级别的 --> <filter class=\\\"ch.qos.logback.classic.filter.LevelFilter\\\"> <level>INFO</level> <onMatch>ACCEPT</onMatch> <onMismatch>DENY</onMismatch> </filter> </appender> <!-- 时间滚动输出 level为 WARN 日志 --> <appender name=\\\"WARN_FILE\\\" class=\\\"ch.qos.logback.core.rolling.RollingFileAppender\\\"> <!-- 正在记录的日志文件的路径及文件名 --> <file>${log.path}/log_warn.log</file> <!--日志文件输出格式--> <encoder> <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern> <charset>UTF-8</charset> <!-- 此处设置字符集 --> </encoder> <!-- 日志记录器的滚动策略，按日期，按大小记录 --> <rollingPolicy class=\\\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\\\"> <fileNamePattern>${log.path}/warn/log-warn-%d{yyyy-MM-dd}.%i.log</fileNamePattern> <timeBasedFileNamingAndTriggeringPolicy class=\\\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\\\"> <maxFileSize>100MB</maxFileSize> </timeBasedFileNamingAndTriggeringPolicy> <!--日志文件保留天数--> <maxHistory>15</maxHistory> </rollingPolicy> <!-- 此日志文件只记录warn级别的 --> <filter class=\\\"ch.qos.logback.classic.filter.LevelFilter\\\"> <level>warn</level> <onMatch>ACCEPT</onMatch> <onMismatch>DENY</onMismatch> </filter> </appender> <!-- 时间滚动输出 level为 ERROR 日志 --> <appender name=\\\"ERROR_FILE\\\" class=\\\"ch.qos.logback.core.rolling.RollingFileAppender\\\"> <!-- 正在记录的日志文件的路径及文件名 --> <file>${log.path}/log_error.log</file> <!--日志文件输出格式--> <encoder> <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern> <charset>UTF-8</charset> <!-- 此处设置字符集 --> </encoder> <!-- 日志记录器的滚动策略，按日期，按大小记录 --> <rollingPolicy class=\\\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\\\"> <fileNamePattern>${log.path}/error/log-error-%d{yyyy-MM-dd}.%i.log</fileNamePattern> <timeBasedFileNamingAndTriggeringPolicy class=\\\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\\\"> <maxFileSize>100MB</maxFileSize> </timeBasedFileNamingAndTriggeringPolicy> <!--日志文件保留天数--> <maxHistory>15</maxHistory> </rollingPolicy> <!-- 此日志文件只记录ERROR级别的 --> <filter class=\\\"ch.qos.logback.classic.filter.LevelFilter\\\"> <level>ERROR</level> <onMatch>ACCEPT</onMatch> <onMismatch>DENY</onMismatch> </filter> </appender> <!-- <logger>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。 <logger>仅有一个name属性， 一个可选的level和一个可选的addtivity属性。 name:用来指定受此logger约束的某一个包或者具体的某一个类。 level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF， 如果未设置此属性，那么当前logger将会继承上级的级别。 --> <!-- 使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作： 第一种把<root level=\\\"INFO\\\">改成<root level=\\\"DEBUG\\\">这样就会打印sql，不过这样日志那边会出现很多其他消息 第二种就是单独给mapper下目录配置DEBUG模式，代码如下，这样配置sql语句会打印，其他还是正常DEBUG级别： --> <!--开发环境:打印控制台--> <springProfile name=\\\"dev\\\"> <!--可以输出项目中的debug日志，包括mybatis的sql日志--> <logger name=\\\"com.guli\\\" level=\\\"INFO\\\" /> <!-- root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性 level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，默认是DEBUG 可以包含零个或多个appender元素。 --> <root level=\\\"INFO\\\"> <appender-ref ref=\\\"CONSOLE\\\" /> <appender-ref ref=\\\"INFO_FILE\\\" /> <appender-ref ref=\\\"WARN_FILE\\\" /> <appender-ref ref=\\\"ERROR_FILE\\\" /> </root> </springProfile> <!--生产环境:输出到文件--> <springProfile name=\\\"pro\\\"> <root level=\\\"INFO\\\"> <appender-ref ref=\\\"CONSOLE\\\" /> <appender-ref ref=\\\"DEBUG_FILE\\\" /> <appender-ref ref=\\\"INFO_FILE\\\" /> <appender-ref ref=\\\"ERROR_FILE\\\" /> <appender-ref ref=\\\"WARN_FILE\\\" /> </root> </springProfile> </configuration> \"},\"953\":{\"h\":\"4. 手动输出日志\",\"a\":\"_4-手动输出日志\"},\"954\":{\"t\":\"在需要手动输出日志的类上同样加上 @Slf4j 注解，输出的语法就是Slf4j的语法。\"},\"955\":{\"t\":\"@Slf4j //注入日志对象,对象名就是log @RestController @RequestMapping(\\\"/books\\\") public class BookController { @GetMapping public String getById(){ System.out.println(\\\"springboot is running...2\\\"); //直接使用注入的对象log log.debug(\\\"debug...\\\"); log.info(\\\"info...\\\"); log.warn(\\\"warn...\\\"); log.error(\\\"error...\\\"); return \\\"springboot is running...2\\\"; } } \"},\"956\":{\"h\":\"3-5. 监控\"},\"957\":{\"t\":\"提示\"},\"958\":{\"t\":\"TBD\"},\"959\":{\"h\":\"4-1. MySQL\"},\"960\":{\"t\":\"相关信息\"},\"961\":{\"t\":\"在进行整合之前先梳理一下整合的思想，springboot整合任何技术其实就是在springboot中使用对应技术的API。 如果两个技术没有交集，就不存在整合的概念了。所谓整合其实就是使用springboot技术去管理其他技术。\"},\"962\":{\"t\":\"需要先导入对应技术的坐标，而整合之后，这些坐标都有了一些变化\"},\"963\":{\"t\":\"任何技术通常都会有一些相关的设置信息，整合之后，这些信息如何写，写在哪是一个问题\"},\"964\":{\"t\":\"没有整合之前操作如果是模式A的话，整合之后如果没有给开发者带来一些便捷操作，那整合将毫无意义，所以整合后操作肯定要简化一些，那对应的操作方式自然也有所不同\"},\"965\":{\"h\":\"1. 添加依赖\",\"a\":\"_1-添加依赖\"},\"966\":{\"t\":\"Druid依赖的坐标需要手动在pom.xml中导入。\"},\"967\":{\"t\":\"<dependency> <groupId>com.alibaba</groupId> <artifactId>druid-spring-boot-starter</artifactId> <version>1.2.6</version> </dependency> \"},\"968\":{\"h\":\"2. 配置连接池\",\"a\":\"_2-配置连接池\"},\"969\":{\"t\":\"spring: datasource: druid: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC username: root password: root \"},\"970\":{\"h\":\"4-2. MyBatis\"},\"971\":{\"t\":\"相关信息\"},\"972\":{\"t\":\"主流持久层技术是：MyBatis或MyBatisPlus。 Spring提供的默认持久化技术是JdbcTempalte，一般不直接用。\"},\"973\":{\"h\":\"Ⅰ. 集成MyBatis\",\"a\":\"i-集成mybatis\"},\"974\":{\"t\":\"需要配置的是数据库的连接信息和MyBatis的SQL映射。\"},\"975\":{\"h\":\"1. 添加MyBatis依赖\",\"a\":\"_1-添加mybatis依赖\"},\"976\":{\"t\":\"使用SpringBoot创建项目时，勾选SQL->MyBatis Framework、MySQL Driver，或者手动引入坐标，可以选择使用Druid连接池进行连接。\"},\"977\":{\"t\":\"具体坐标如下：\"},\"978\":{\"t\":\" <!--MyBatis--> <dependency> <groupId>org.mybatis.spring.boot</groupId> <artifactId>mybatis-spring-boot-starter</artifactId> </dependency> <!--JDBC Driver--> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <scope>runtime</scope> </dependency> <!--druid--> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid-spring-boot-starter</artifactId> <version>1.2.16</version> </dependency> \"},\"979\":{\"h\":\"2. 配置连接信息\",\"a\":\"_2-配置连接信息\"},\"980\":{\"t\":\"只需要配置数据库连接信息即可，其他的配置采用默认值。\"},\"981\":{\"t\":\"# file: application.yml spring: datasource: druid: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://192.75.225.162:3306/test?serverTimezone=UTC username: admin password: admin \"},\"982\":{\"h\":\"3. 使用MyBatis\",\"a\":\"_3-使用mybatis\"},\"983\":{\"t\":\"创建实体类和Mapper接口，使用Mapper接口时，直接将Mapper接口当实现类使用即可，中间创建接口实体类的过程，SpringBoot都完成了。\"},\"984\":{\"h\":\"3.1 实体类\",\"a\":\"_3-1-实体类\"},\"985\":{\"t\":\"//file: domain/Book public class Book { private Integer id; private String type; private String name; private String description; } \"},\"986\":{\"h\":\"3.2 Dao: Mapper接口\",\"a\":\"_3-2-dao-mapper接口\"},\"987\":{\"t\":\"@Mapper注解是为了被IOC容器识别，自动产生Mapper接口的对象，并加入IOC容器。\"},\"988\":{\"t\":\"//file: dao/BookDao @Mapper public interface BookDao { @Select(\\\"select * from tbl_book where id = #{id}\\\") public Book getById(Integer id); } \"},\"989\":{\"h\":\"3.3 使用测试\",\"a\":\"_3-3-使用测试\"},\"990\":{\"t\":\"这里就不创建Controller了，直接使用测试类访问Mapper接口\"},\"991\":{\"t\":\"//file: test/java/com/blog/cybercell/BlogApplicationTests @SpringBootTest class BlogApplicationTests { @Autowired private BookDao bookDao; @Test void contextLoads() { //直接调用Mapper接口中的方法 System.out.println(bookDao.getById(11)); //可以正常查询 } } \"},\"992\":{\"h\":\"4. 注意事项\",\"a\":\"_4-注意事项\"},\"993\":{\"h\":\"4.1 时区错误\",\"a\":\"_4-1-时区错误\"},\"994\":{\"t\":\"使用SpringBoot2.4.3（不含）之前版本会出现一个小BUG，就是MySQL驱动升级到8以后要求强制配置时区，如果不设置会出问题。\"},\"995\":{\"t\":\"url: jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC \"},\"996\":{\"t\":\"可以去修改mysql中的配置文件mysql.ini，在mysqld项中添加default-time-zone=+8:00也可以解决这个问题。\"},\"997\":{\"h\":\"4.2 MySQL驱动问题\",\"a\":\"_4-2-mysql驱动问题\"},\"998\":{\"t\":\"MySQL版本在8.0以上时，可能会出现驱动类过时的问题。\"},\"999\":{\"t\":\"方案：弃用com.mysql.jdbc.Driver，换用com.mysql.cj.jdbc.Driver\"},\"1000\":{\"h\":\"Ⅱ. 集成MyBatis Plus\",\"a\":\"ii-集成mybatis-plus\"},\"1001\":{\"h\":\"1. 添加MyBatis Plus依赖\",\"a\":\"_1-添加mybatis-plus依赖\"},\"1002\":{\"t\":\"SpringBoot官网没有收录MyBatisPlus，无法像导入MyBatis那样直接导入。\"},\"1003\":{\"t\":\"可以在创建项目时，切换成阿里云的源，或者直接手动导入。\"},\"1004\":{\"t\":\"具体坐标如下：\"},\"1005\":{\"t\":\"<dependency> <groupId>com.baomidou</groupId> <artifactId>mybatis-plus-boot-starter</artifactId> <version>3.5.2</version> </dependency> <!--JDBC Driver--> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <scope>runtime</scope> </dependency> <!--druid--> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid-spring-boot-starter</artifactId> <version>1.2.16</version> </dependency> \"},\"1006\":{\"h\":\"2. 配置连接信息\",\"a\":\"_2-配置连接信息-1\"},\"1007\":{\"t\":\"和MyBatis的连接配置一样。\"},\"1008\":{\"t\":\"# file: application.yml spring: datasource: druid: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://192.75.225.162:3306/test?serverTimezone=UTC username: admin password: admin \"},\"1009\":{\"h\":\"3. 使用MyBatisplus\",\"a\":\"_3-使用mybatisplus\"},\"1010\":{\"t\":\"只需要继承BaseMapper并传入实体类（表名）的泛型，所有基本的SQL操作方法就自动添加了。\"},\"1011\":{\"h\":\"3.1 Mapper 接口\",\"a\":\"_3-1-mapper-接口\"},\"1012\":{\"t\":\"创建Mapper接口，继承MyBatisPlus中的BaseMapper接口。\"},\"1013\":{\"t\":\"@Mapper public interface BookDao extends BaseMapper<Book> { //自动携带了众多BaseMapper中的方法。 } \"},\"1014\":{\"h\":\"3.2 使用测试\",\"a\":\"_3-2-使用测试\"},\"1015\":{\"t\":\"使用测试类访问Mapper接口。\"},\"1016\":{\"t\":\"@SpringBootTest class BlogApplicationTests { @Autowired private BookDao bookDao; @Test void contextLoads() { System.out.println(bookDao.selectById(2)); } @Test void testGetAll() { System.out.println(bookDao.selectList(null)); } } \"},\"1017\":{\"h\":\"4-3. Redis\"},\"1018\":{\"h\":\"1. 依赖\",\"a\":\"_1-依赖\"},\"1019\":{\"t\":\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-redis</artifactId> <dependency> \"},\"1020\":{\"h\":\"2. redis基础配置\",\"a\":\"_2-redis基础配置\"},\"1021\":{\"t\":\"spring: redis: host: 159.75.225.162 port: 6379 password: hello1234 \"},\"1022\":{\"h\":\"4. 使用Redis：RedisTemplate\",\"a\":\"_4-使用redis-redistemplate\"},\"1023\":{\"t\":\"使用springboot整合redis的专用客户端接口操作，此处使用的是RedisTemplate，使用步骤如下\"},\"1024\":{\"t\":\"注入RedisTemplate\"},\"1025\":{\"t\":\"根据要操作的数据类型，调用opsForXxx方法，获取对应的XxxOperations对象（Xxx指的是Redis的数据类型） \"},\"1026\":{\"t\":\"在操作redis时，需要先确认操作何种数据，根据数据种类得到操作接口。\"},\"1027\":{\"t\":\"剩下的就是调用对应api操作了\"},\"1028\":{\"t\":\"使用XxxOperations对象调用方法，操作Redis，方法名和参数，与Redis的指令和参数相同。\"},\"1029\":{\"t\":\"public class RedisTest{ @Autowired //注入RedisTemplate private RedisTemplate redisTemplate; public void strRedis(){ //获取String类型的操作对象 ValueOpeartions strOps = redisTemplate.opsForValue(); //使用ValueOperations对象操作Redis ops.set(\\\"age\\\",31) Object age = ops.get(\\\"age\\\"); } public void hashRedis(){ HashOperations ops = redisTemplate.opsForHash(); ops.put(\\\"info\\\",\\\"a\\\",\\\"b\\\"); Object val = ops.get(\\\"info\\\", \\\"b\\\"); } } \"},\"1030\":{\"t\":\"各种类型的数据操作接口\"},\"1031\":{\"t\":\"如下：\"},\"1032\":{\"t\":\"4-3-1\"},\"1033\":{\"t\":\"问题\"},\"1034\":{\"t\":\"通过对象往Redis数据库中存储的数据是对象格式的，Redis内部不支持java对象的储存格式，因此当操作的数据以对象的形式存在时，会进行转码，转换成字符串格式（序列化）后进行操作。\"},\"1035\":{\"t\":\"为了方便开发者使用基于字符串为数据的操作，springboot整合redis时提供了专用的API接口StringRedisTemplate，你可以理解为这是RedisTemplate的一种指定数据泛型的操作API。\"},\"1036\":{\"h\":\"4. 使用Redis：StringRedisTemplate【常用】\",\"a\":\"_4-使用redis-stringredistemplate【常用】\"},\"1037\":{\"t\":\"使用步骤和RedisTemplate一样。\"},\"1038\":{\"t\":\"public class StringRedisTemplateTest { @Autowired //注入StringRedisTemplate对象 private StringRedisTemplate stringRedisTemplate; void get(){ //获取String类型的操作对象，泛型永远都是String，无论操作对象是操作何种类型 ValueOperations<String, String> ops = stringRedisTemplate.opsForValue(); //使用ValueOperations<String, String>对象操作Redis String name = ops.get(\\\"name\\\"); System.out.println(name); } } \"},\"1039\":{\"h\":\"5. Redis客户端选择\",\"a\":\"_5-redis客户端选择\"},\"1040\":{\"t\":\"springboot整合redis技术提供了多种客户端兼容模式，默认提供的是lettucs客户端技术，也可以根据需要切换成指定客户端技术，例如jedis客户端技术。\"},\"1041\":{\"h\":\"5.1 lettcus与jedis区别\",\"a\":\"_5-1-lettcus与jedis区别\"},\"1042\":{\"t\":\"jedis连接Redis服务器是直连模式，当多线程模式下使用jedis会存在线程安全问题，解决方案可以通过配置连接池使每个连接专用，这样整体性能就大受影响\"},\"1043\":{\"t\":\"lettcus基于Netty框架进行与Redis服务器连接，底层设计中采用线程安全的StatefulRedisConnection，可以保障并发访问安全问题，所以一个连接可以被多线程复用。当然lettcus也支持多连接实例一起工作。\"},\"1044\":{\"h\":\"5.2 切换成jedis客户端技术\",\"a\":\"_5-2-切换成jedis客户端技术\"},\"1045\":{\"t\":\"导入jedis坐标\"},\"1046\":{\"t\":\"<dependency> <groupId>redis.clients</groupId> <artifactId>jedis</artifactId> </dependency> \"},\"1047\":{\"t\":\"yml配置文件：添加redis客户端类型配置\"},\"1048\":{\"t\":\"spring: redis: host: localhost port: 6379 password: hello1235 client-type: jedis \"},\"1049\":{\"h\":\"6. 客户端的其他配置\",\"a\":\"_6-客户端的其他配置\"},\"1050\":{\"t\":\"除了基础配置，还可以根据需要设置对应的配置\"},\"1051\":{\"t\":\"spring: redis: host: localhost port: 6379 client-type: jedis lettuce: pool: //设置连接池 max-active: 16 jedis: pool: max-active: 16 \"},\"1052\":{\"h\":\"5.集成其他技术\"},\"1053\":{\"t\":\"相关信息\"},\"1054\":{\"t\":\"TBD\"},\"1055\":{\"h\":\"6.底层原理\"},\"1056\":{\"t\":\"相关信息\"},\"1057\":{\"t\":\"TBD\"},\"1058\":{\"h\":\"x-1. 项目初始化\"},\"1059\":{\"t\":\"内容说明\"},\"1060\":{\"t\":\"开发SpringBoot项目的一些通用操作。\"},\"1061\":{\"h\":\"Ⅰ. 配置IDEA和GIT\",\"a\":\"i-配置idea和git\"},\"1062\":{\"t\":\"提示\"},\"1063\":{\"t\":\"以下操作和IDEA的版本相关，当前版本为：2021.3\"},\"1064\":{\"h\":\"1. Maven配置\",\"a\":\"_1-maven配置\"},\"1065\":{\"t\":\"不采用IDEA内置的Maven，内置的Maven不方便修改配置，这里采用自己下载的Maven。\"},\"1066\":{\"t\":\"Maven的版本要与SpringCloud与SpringBoot兼容，同时要与IDEA兼容。\"},\"1067\":{\"t\":\"一般采用IDEA内置Maven的版本进行下载\"},\"1068\":{\"t\":\"在IDEA中，替换手动下载的Maven、setting.xml和本地库。 设置位置：Build,Execution,Deployment > Build Tools > Maven\"},\"1069\":{\"t\":\"x-1-1\"},\"1070\":{\"t\":\"一般也会设置跳过Maven单元测试\"},\"1071\":{\"t\":\"x-1-2\"},\"1072\":{\"h\":\"2. 字符编码\",\"a\":\"_2-字符编码\"},\"1073\":{\"t\":\"将整个IDEA全部改为UTF-8编码（三个地方）。\"},\"1074\":{\"t\":\"x-1-3\"},\"1075\":{\"h\":\"3. 隐藏非必要文件\",\"a\":\"_3-隐藏非必要文件\"},\"1076\":{\"t\":\"如：idea、iml等。\"},\"1077\":{\"t\":\"x-1-4\"},\"1078\":{\"h\":\"4. 开启热部署\",\"a\":\"_4-开启热部署\"},\"1079\":{\"t\":\"设置位置：Build,Execution,Deployment->Compiler 配置完后重启IDEA。\"},\"1080\":{\"t\":\"x-1-5\"},\"1081\":{\"h\":\"5. 配置.gitignore\",\"a\":\"_5-配置-gitignore\"},\"1082\":{\"t\":\"在项目的根目录添加.gitignore文件。\"},\"1083\":{\"t\":\"# IntelliJ IDEA # .idea/ /.idea/ */.idea/ *.iws *.iml *.ipr # Eclipse Project files .classpath .project /.settings/ .settings/ # Java class files *.class # Generated files */bin/ */gen/ */out/ ### user ### target/ /target/ /src/logs/ #*.zip sdkTest.log #some local files */.DS_Store .DS_Store gradlew gradlew.bat unused.txt \"},\"1084\":{\"h\":\"Ⅱ. 创建工程\",\"a\":\"ii-创建工程\"},\"1085\":{\"h\":\"1. new project\",\"a\":\"_1-new-project\"},\"1086\":{\"t\":\"以Spring Initializr的方式创建工程。\"},\"1087\":{\"t\":\"1-2-1\"},\"1088\":{\"h\":\"2. 配置工程\",\"a\":\"_2-配置工程\"},\"1089\":{\"t\":\"选择合适的Spring Boot版本和需要直接安装的组件（可以只选版本，组件后面再安装）。\"},\"1090\":{\"t\":\"1-2-2\"},\"1091\":{\"h\":\"3. 添加依赖\",\"a\":\"_3-添加依赖\"},\"1092\":{\"t\":\"根据项目需求添加依赖和插件。\"},\"1093\":{\"h\":\"4. 配置yml\",\"a\":\"_4-配置yml\"},\"1094\":{\"t\":\"删除application.properties，创建application.yml，并进行基本的application配置\"},\"1095\":{\"t\":\"如果是多环境，需要创建dev、test、pro多个配置文件\"},\"1096\":{\"h\":\"5. 初始化\",\"a\":\"_5-初始化\"},\"1097\":{\"h\":\"Ⅲ. 准备工作\",\"a\":\"iii-准备工作\"},\"1098\":{\"h\":\"1. 准备工作顺序\",\"a\":\"_1-准备工作顺序\"},\"1099\":{\"t\":\"前提：开发环境（框架）已经搭建好了，数据库也创建好了，依赖和插件等都准备好了。\"},\"1100\":{\"t\":\"连接数据库：IDEA连接数据库\"},\"1101\":{\"t\":\"完善目录\"},\"1102\":{\"t\":\"创建所有配置：resources/application.yml\"},\"1103\":{\"t\":\"利用MyBatis-plus逆向生成代码\"},\"1104\":{\"t\":\"将所需的所有工具类和插件搭建\"},\"1105\":{\"t\":\"利用启动类启动服务\"},\"1106\":{\"t\":\"写业务代码\"},\"1107\":{\"h\":\"2. 常用工具类\",\"a\":\"_2-常用工具类\"},\"1108\":{\"t\":\"统一响应格式\"},\"1109\":{\"t\":\"配置Swagger\"},\"1110\":{\"h\":\"3. 代码生成\",\"a\":\"_3-代码生成\"},\"1111\":{\"t\":\"使用MyBatis X插件，利用MyBatisPlus生成代码\"},\"1112\":{\"t\":\"配置数据源：在IDEA右边选择DataBase，连接数据库\"},\"1113\":{\"t\":\"生成代码：数据源中选择目标数据表，右键：选择第一个选项MyBatis-Generator\"},\"1114\":{\"t\":\"配置代码模板：可以对将要生成的代码的模板进行配置，可配置项非常多\"},\"1115\":{\"t\":\"x-1-6\"},\"1116\":{\"t\":\"x-1-7\"},\"1117\":{\"h\":\"Ⅳ. 目录规范\",\"a\":\"iv-目录规范\"},\"1118\":{\"t\":\"根据以下规范，按需创建目录\"},\"1119\":{\"t\":\"blog [cc.cybercell]> src > main > java > cc.cybercell.blog ├── common: 公共类 ├── config: 配置 ├── controller: 控制器（API） ├── entity: 实体类（也可命名为domain或pojo） ├── filter: 拦截器 ├── mapper: MyBatis Plus的mapper ├── service: 服务层接口 ├── impl: 服务层接口实现类 ├── utils: 工具 ├── BlogApplication.java :启动类 blog [cc.cybercell]> src > main > java > resources ├── application.yml ├── application-dev.yml ├── application-prod.yml \"},\"1120\":{\"h\":\"x-2. 依赖列表\"},\"1121\":{\"t\":\"核心版本\"},\"1122\":{\"t\":\"更新时间：2023-4-27，版本可以直接复制，不用更改。\"},\"1123\":{\"t\":\"SpringBoot： 2.7.9\"},\"1124\":{\"t\":\"Java：17 PS：下次更新，就是SpringBoot3了。\"},\"1125\":{\"h\":\"Ⅰ. SpringBoot 组件\",\"a\":\"i-springboot-组件\"},\"1126\":{\"t\":\"SpringBoot内置的组件。\"},\"1127\":{\"h\":\"1. SpringBoot\",\"a\":\"_1-springboot\"},\"1128\":{\"t\":\"spring-boot-starter依赖。 spring-boot-starter-web依赖包含了该依赖，一般不用添加。\"},\"1129\":{\"t\":\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter</artifactId> </dependency> \"},\"1130\":{\"h\":\"2. SpringMvc\",\"a\":\"_2-springmvc\"},\"1131\":{\"t\":\"spring-boot-starter-web依赖。\"},\"1132\":{\"t\":\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> \"},\"1133\":{\"h\":\"3. Junit 测试依赖\",\"a\":\"_3-junit-测试依赖\"},\"1134\":{\"t\":\"spring-boot-starter-test依赖。\"},\"1135\":{\"t\":\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> \"},\"1136\":{\"h\":\"4. actuator监控\",\"a\":\"_4-actuator监控\"},\"1137\":{\"t\":\"spring-boot-starter-actuator依赖。\"},\"1138\":{\"t\":\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-actuator</artifactId> </dependency> \"},\"1139\":{\"h\":\"Ⅱ. SQL\",\"a\":\"ii-sql\"},\"1140\":{\"h\":\"1. MySQL\",\"a\":\"_1-mysql\"},\"1141\":{\"t\":\"JDBC依赖，需要手动指定版本。\"},\"1142\":{\"t\":\"<dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <scope>runtime</scope> <version>8.0.16</version> </dependency> \"},\"1143\":{\"h\":\"2. Druid\",\"a\":\"_2-druid\"},\"1144\":{\"t\":\"Druid连接池依赖，需要手动指定版本。\"},\"1145\":{\"t\":\"<dependency> <groupId>com.alibaba</groupId> <artifactId>druid-spring-boot-starter</artifactId> <version>1.2.16</version> </dependency> \"},\"1146\":{\"h\":\"3. MyBatis\",\"a\":\"_3-mybatis\"},\"1147\":{\"t\":\"MyBatis依赖，需要手动指定版本，和MyBatis Plus 只能存在一个。\"},\"1148\":{\"t\":\"<dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis</artifactId> <version>3.5.7</version> </dependency> \"},\"1149\":{\"h\":\"4. MyBatis Plus\",\"a\":\"_4-mybatis-plus\"},\"1150\":{\"t\":\"mybatisplus依赖，需要手动指定版本。 mybatis plus包含了mybatis，不要再引入mybatis了，以免版本冲突。\"},\"1151\":{\"t\":\"<dependency> <groupId>com.baomidou</groupId> <artifactId>mybatis-plus-boot-starter</artifactId> <version>3.5.2</version> </dependency> \"},\"1152\":{\"h\":\"Ⅲ. NoSQL\",\"a\":\"iii-nosql\"},\"1153\":{\"h\":\"1. Redis\",\"a\":\"_1-redis\"},\"1154\":{\"t\":\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-redis</artifactId> <dependency> \"},\"1155\":{\"h\":\"Ⅳ. 消息与缓存\",\"a\":\"iv-消息与缓存\"},\"1156\":{\"h\":\"1. Rabbitmq\",\"a\":\"_1-rabbitmq\"},\"1157\":{\"t\":\"消息队列RabbitMQ依赖。\"},\"1158\":{\"t\":\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-amqp</artifactId> </dependency> \"},\"1159\":{\"h\":\"Ⅴ. 工具\",\"a\":\"v-工具\"},\"1160\":{\"h\":\"1. lombok\",\"a\":\"_1-lombok\"},\"1161\":{\"t\":\"<dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <optional>true</optional> </dependency> \"},\"1162\":{\"h\":\"2. swagger\",\"a\":\"_2-swagger\"},\"1163\":{\"t\":\"需要手动指定版本。\"},\"1164\":{\"t\":\"<dependency> <groupId>io.springfox</groupId> <artifactId>springfox-boot-starter</artifactId> <version>3.0.0</version> </dependency> \"},\"1165\":{\"h\":\"3. sprint-boot-devtool\",\"a\":\"_3-sprint-boot-devtool\"},\"1166\":{\"t\":\"用于开启热部署，需要Maven设置支持。\"},\"1167\":{\"t\":\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <scope>runtime</scope> <optional>true</optional> </dependency> \"},\"1168\":{\"h\":\"4. fastjson\",\"a\":\"_4-fastjson\"},\"1169\":{\"t\":\"<dependency> <groupId>com.alibaba</groupId> <artifactId>fastjson</artifactId> <version>1.2.76</version> </dependency> \"},\"1170\":{\"h\":\"Ⅵ. 第三方API\",\"a\":\"vi-第三方api\"},\"1171\":{\"h\":\"1. 阿里云短信服务\",\"a\":\"_1-阿里云短信服务\"},\"1172\":{\"t\":\"<dependency> <groupId>com.aliyun</groupId> <artifactId>aliyun-java-sdk-core</artifactId> <version>4.5.16</version> </dependency> <dependency> <groupId>com.aliyun</groupId> <artifactId>aliyun-java-sdk-dysmsapi</artifactId> <version>2.1.0</version> </dependency> \"},\"1173\":{\"h\":\"Ω. pom.xml示例\",\"a\":\"ω-pom-xml示例\"},\"1174\":{\"t\":\"说明\"},\"1175\":{\"t\":\"仅包含了常用的依赖，可以直接复制使用，对于不常用的依赖，自己手动添加。\"},\"1176\":{\"t\":\"包含了properties部分dependencies部分和build部分。\"},\"1177\":{\"t\":\"<properties> <java.version>17</java.version> <mysql.version>8.0.16</mysql.version> <druid.version>1.2.16</druid.version> <mybatis.plus.version>3.5.2</mybatis.plus.version> <swagger.version>3.0.0</swagger.version> </properties> <dependencies> <!-- ========================================================= --> <!-- ==================== SpringBoot 组件 ==================== --> <!-- ========================================================= --> <!--Spring:springmvc--> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <!--Spring:test--> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> <!--Spring:图形化处理--> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-actuator</artifactId> </dependency> <!-- ========================================================= --> <!-- ======================== SQL相关 ======================== --> <!-- ========================================================= --> <!--mysql--> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <scope>runtime</scope> <version>${mysql.version}</version> </dependency> <!--druid--> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid-spring-boot-starter</artifactId> <version>${druid.version}</version> </dependency> <!--mybatis-plus--> <dependency> <groupId>com.baomidou</groupId> <artifactId>mybatis-plus-boot-starter</artifactId> <version>${mybatis.plus.version}</version> </dependency> <!-- ========================================================= --> <!-- ==================== NoSQL、缓存、消息 =================== --> <!-- ========================================================= --> <!-- Redis --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-redis</artifactId> <dependency> <!-- RabbitMQ --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-amqp</artifactId> </dependency> <!-- ========================================================= --> <!-- ========================== 工具 ========================= --> <!-- ========================================================= --> <!--lombok--> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <optional>true</optional> </dependency> <!--swagger3--> <dependency> <groupId>io.springfox</groupId> <artifactId>springfox-boot-starter</artifactId> <version>${swagger.version}</version> </dependency> <!--开启热部署--> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <optional>true</optional> </dependency> <!-- ========================================================= --> <!-- ======================= 第三方API ======================= --> <!-- ========================================================= --> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <version>2.7.9</version> </plugin> </plugins> </build> \"},\"1178\":{\"h\":\"x-3. 项目开发规范\"},\"1179\":{\"t\":\"相关信息\"},\"1180\":{\"t\":\"TBD\"},\"1181\":{\"h\":\"x-4. SSM开发案例\"},\"1182\":{\"t\":\"提示\"},\"1183\":{\"t\":\"需要前置知识：\"},\"1184\":{\"t\":\"集成MySQL\"},\"1185\":{\"t\":\"集成MyBatisPlus\"},\"1186\":{\"t\":\"通过一个案例了解使用SpringBoot开发项目的过程。\"},\"1187\":{\"t\":\"要开发的内容\"},\"1188\":{\"t\":\"实体类开发————使用Lombok快速制作实体类\"},\"1189\":{\"t\":\"Dao开发————整合MyBatisPlus，制作数据层测试\"},\"1190\":{\"t\":\"Service开发————基于MyBatisPlus进行增量开发，制作业务层测试类\"},\"1191\":{\"t\":\"Controller开发————基于Restful开发，使用PostMan测试接口功能\"},\"1192\":{\"t\":\"Controller开发————前后端开发协议制作\"},\"1193\":{\"t\":\"页面开发————基于VUE+ElementUI制作，前后端联调，页面数据处理，页面消息处理 \"},\"1194\":{\"t\":\"列表、新增、修改、删除、分页、查询\"},\"1195\":{\"t\":\"项目异常处理\"},\"1196\":{\"t\":\"按条件查询————页面功能调整、Controller修正功能、Service修正功能\"},\"1197\":{\"t\":\"架构 前端(浏览器)->前端服务器->后端服务器（分布式）。 本次案例仅考虑浏览器向服务器发送请求接受响应，不考虑前端服务器。\"},\"1198\":{\"h\":\"1. 初始化\",\"a\":\"_1-初始化\"},\"1199\":{\"h\":\"1.1 创建模块\",\"a\":\"_1-1-创建模块\"},\"1200\":{\"t\":\"依赖：Spring Web；MySQL Driver；MyBatis-Plus；Druid；\"},\"1201\":{\"t\":\"目录优化 \"},\"1202\":{\"t\":\"启动类文件名改为：Application.java，简洁一些。\"},\"1203\":{\"t\":\"配置文件后缀改为yml\"},\"1204\":{\"h\":\"1.2 配置文件\",\"a\":\"_1-2-配置文件\"},\"1205\":{\"t\":\"配置端口号、Druid的连接信息、mybatis-plus的常用设置。\"},\"1206\":{\"t\":\"erver: port: 80 spring: datasource: druid: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC username: root password: root mybatis-plus: global-config: db-config: table-prefix: tbl_ \"},\"1207\":{\"h\":\"1.3 创建数据表Book\",\"a\":\"_1-3-创建数据表book\"},\"1208\":{\"t\":\"结构：id(int)；type(varchar)；name(varchar)； desription(varchar)\"},\"1209\":{\"h\":\"2. 实体类\",\"a\":\"_2-实体类\"},\"1210\":{\"t\":\"根据要操作的数据表创建实体类。 实体类包名：domain( or entity)。\"},\"1211\":{\"t\":\"@Data public class Book { private Integer id; private String type; private String name; private String description; } \"},\"1212\":{\"h\":\"2.1 lombok\",\"a\":\"_2-1-lombok\"},\"1213\":{\"t\":\"实体类需要手动生成get/set方法，创建toString等，非常麻烦。可以使用一个工具：lombok，该java类库提供了一些注解可以简化实体类的开发。\"},\"1214\":{\"t\":\"@Data注解：自动添加getter、setter、toString、equals、hashCode\"},\"1215\":{\"t\":\"@AllArgsContructor：全参构造方法；\"},\"1216\":{\"t\":\"@NoArgsContructor：无参构造方法。\"},\"1217\":{\"t\":\"<dependencies> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> </dependency> </dependencies> \"},\"1218\":{\"h\":\"3. Dao：基本CURD\",\"a\":\"_3-dao-基本curd\"},\"1219\":{\"t\":\"基于：MyBatisPlus、Druid\"},\"1220\":{\"h\":\"3.1 Mapper 接口\",\"a\":\"_3-1-mapper-接口\"},\"1221\":{\"t\":\"所在包：dao\"},\"1222\":{\"t\":\"@Mapper //MyBatisPlus public interface BookDao extends BaseMapper<Book> { //实体类泛型 //这里什么都不用写，基本的CURDBaseMapper中都定义了 //可以点击BaseMapper查看具体有哪些API可以掉用，注释是中文的。 //如果有很个性化的需求，可以手动加，建议用注解的方式加SQL } \"},\"1223\":{\"h\":\"3.2 测试类（可选）\",\"a\":\"_3-2-测试类-可选\"},\"1224\":{\"t\":\"@SpringBootTest //SpringBoot测试类 public class BookDaoTestCase { @Autowired //注入Mapper private BookDao bookDao; @Test //查询 void testGetById(){ System.out.println(bookDao.selectById(1)); } @Test //增加 void testSave(){ Book book = new Book(); book.setType(\\\"测试数据123\\\"); book.setName(\\\"测试数据123\\\"); book.setDescription(\\\"测试数据123\\\"); bookDao.insert(book); } @Test //Update void testUpdate(){ Book book = new Book(); book.setId(17); book.setType(\\\"测试数据abcdefg\\\"); book.setName(\\\"测试数据123\\\"); book.setDescription(\\\"测试数据123\\\"); bookDao.updateById(book); } @Test //delete void testDelete(){ bookDao.deleteById(16); } @Test //getAll void testGetAll(){ bookDao.selectList(null); } } \"},\"1225\":{\"h\":\"3.3 配置\",\"a\":\"_3-3-配置\"},\"1226\":{\"t\":\"MyBatisPlus是采用雪花算法生成UUID作为id的，如果测试的时候想用int作为id，就需要额外的配置。\"},\"1227\":{\"t\":\"基础的CRUD操作均由MyBatisPlus给我们提供，不需要再写SQL，如果想看SQL需要进行配置： \"},\"1228\":{\"t\":\"不只是显示SQL，会显示所有跟SQL相关的操作（仅开发时才能开启）。\"},\"1229\":{\"t\":\"mybatis-plus: global-config: db-config: table-prefix: tbl_ id-type: auto # 生成策略为参照数据库设定的策略 configuration: # 在配置文件里开启日志，设置日志输出方式为：标准输出 log-impl: org.apache.ibatis.logging.stdout.StdOutImpl \"},\"1230\":{\"h\":\"4. Dao：分页功能\",\"a\":\"_4-dao-分页功能\"},\"1231\":{\"t\":\"MyBatisPlus内部有分页操作相关的API，使用分页API需要通过拦截器实现。\"},\"1232\":{\"h\":\"4.1 拦截器\",\"a\":\"_4-1-拦截器\"},\"1233\":{\"t\":\"创建包config，专门存放配置信息相关的类，创建MPconfig用来配置分页相关的拦截器：MybatisPlusInterceptor。\"},\"1234\":{\"t\":\"@Configuration //设置为配置类(该注解会被启动类扫描) public class MPConfig { @Bean //管理第三方bean：将方法的返回值加入IOC容器 public MybatisPlusInterceptor mybatisPlusInterceptor(){ //定义MyBatisPlus拦截器（只是一个壳） MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor(); //添加具体的拦截器：PaginationInnerInterceptor（分页相关的拦截器） interceptor.addInnerInterceptor(new PaginationInnerInterceptor()); return interceptor;//返回拦截器 } } \"},\"1235\":{\"h\":\"4.2 IPage\",\"a\":\"_4-2-ipage\"},\"1236\":{\"t\":\"MyBatisPlus的IPage接口封装了所有与分页相关的信息和操作，实现类为Page。\"},\"1237\":{\"t\":\"参数1：当前是第几页\"},\"1238\":{\"t\":\"参数2：每页显示多少条数据\"},\"1239\":{\"t\":\"Ipage page = new Page(1,5); //进行分页查询，要调用Mapper接口的selectPage方法,参数就是page对象 //返回的是依然是Ipage对象，此时该对象已经包含了各种信息 bookDao.selectPage(page,null); \"},\"1240\":{\"h\":\"4.3 Test\",\"a\":\"_4-3-test\"},\"1241\":{\"t\":\"@Test void testGetPage(){ IPage page = new Page(2,5); bookDao.selectPage(page, null); System.out.println(page.getCurrent());//获取当前页（从第几页开始查询） System.out.println(page.getSize());//获取每页显示的条数 System.out.println(page.getTotal());//获取总条数 System.out.println(page.getPages());//获取总页数 System.out.println(page.getRecords());//查询结果 } \"},\"1242\":{\"h\":\"5. Dao：条件查询\",\"a\":\"_5-dao-条件查询\"},\"1243\":{\"t\":\"MyBatisPlus将复杂的条件查询SQL都封装好了，使用时直接掉用API接口就行了。\"},\"1244\":{\"h\":\"5.1 QueryWrapper\",\"a\":\"_5-1-querywrapper\"},\"1245\":{\"t\":\"QueryWrapper类是用于封装查询条件的，接受一个实体类作为泛型。 该类包含了很多条件查询相关的方法，直接调用就可以拼接查询条件。\"},\"1246\":{\"t\":\"QueryWrapper<Book> qw = new QueryWrapper<>(); \"},\"1247\":{\"h\":\"5.2 示例\",\"a\":\"_5-2-示例\"},\"1248\":{\"t\":\"@Test void testGetBy(){ QueryWrapper<Book> qw = new QueryWrapper<>(); //设置条件：调用like方法，进行模糊查询，传入模糊查询的条件作为参数 qw.like(\\\"name\\\",\\\"Spring\\\"); bookDao.selectList(qw);//进行条件查询，QueryWrapper对象作为参数 } \"},\"1249\":{\"h\":\"5.3 LambdaQueryWrapper\",\"a\":\"_5-3-lambdaquerywrapper\"},\"1250\":{\"t\":\"问题：查询条件的属性名是直接手写的字符串，如果写错了会发生异常。\"},\"1251\":{\"t\":\"解决：支持Lambda表达式的条件查询API，有更好的提示，防止写错字段。\"},\"1252\":{\"t\":\"@Test void testGetBy2(){ String name = \\\"1\\\"; LambdaQueryWrapper<Book> lqw = new LambdaQueryWrapper<Book>(); //通过实体类获取字段名，防止出错 lqw.like(Book::getName,name); bookDao.selectList(lqw); } \"},\"1253\":{\"h\":\"5.4 动态条件拼接\",\"a\":\"_5-4-动态条件拼接\"},\"1254\":{\"t\":\"问题：进行条件查询时，浏览器可能没有传递条件，即条件可能是null，null会被直接当做null字符串。\"},\"1255\":{\"t\":\"解决：使用动态条件拼接，防止将null数据作为条件使用。\"},\"1256\":{\"t\":\"@Test void testGetBy2(){ String name = \\\"1\\\"; LambdaQueryWrapper<Book> lqw = new LambdaQueryWrapper<Book>(); //if(name != null) lqw.like(Book::getName,name);//方式一：JAVA代码控制 lqw.like(name != null,Book::getName,name);//方式二：API接口提供控制开关 bookDao.selectList(lqw); } \"},\"1257\":{\"h\":\"6. Service：业务层\",\"a\":\"_6-service-业务层\"},\"1258\":{\"t\":\"提示\"},\"1259\":{\"t\":\"注意区分业务层和数据层，dao层的方法名是比较直接的，直接与数据库字段和要进行的操作相关，而业务层的方法名就是要做的业务。\"},\"1260\":{\"t\":\"创建包：service作为业务层接口，创建BookService作为业务接口\"},\"1261\":{\"t\":\"创建包：service/impl作为业务层实现类，创建BookServiceImpl作为对应业务层接口的实现类\"},\"1262\":{\"h\":\"6.1 BookService：业务层接口\",\"a\":\"_6-1-bookservice-业务层接口\"},\"1263\":{\"t\":\"public interface BookService { Boolean save(Book book); Boolean update(Book book); Boolean delete(Integer id); Book getById(Integer id); List<Book> getAll(); IPage<Book> getPage(int currentPage,int pageSize); } \"},\"1264\":{\"h\":\"6.2 BookServiceImpl：业务层实现类\",\"a\":\"_6-2-bookserviceimpl-业务层实现类\"},\"1265\":{\"t\":\"@Service public class BookServiceImpl extends ServiceImpl<BookDao, Book> implements IBookService { @Autowired private BookDao bookDao; @Override public boolean saveBook(Book book) { return bookDao.insert(book) > 0; } @Override public boolean modify(Book book) { return bookDao.updateById(book) > 0; } @Override public boolean delete(Integer id) { return bookDao.deleteById(id) > 0; } @Override public IPage<Book> getPage(int currentPage, int pageSize) { IPage page = new Page(currentPage,pageSize); bookDao.selectPage(page,null); return page; } @Override public IPage<Book> getPage(int currentPage, int pageSize, Book book) { LambdaQueryWrapper<Book> lqw = new LambdaQueryWrapper<Book>(); lqw.like(Strings.isNotEmpty(book.getType()),Book::getType,book.getType()); lqw.like(Strings.isNotEmpty(book.getName()),Book::getName,book.getName()); lqw.like(Strings.isNotEmpty(book.getDescription()),Book::getDescription,book.getDescription()); IPage page = new Page(currentPage,pageSize); bookDao.selectPage(page,lqw); return page; } } \"},\"1266\":{\"h\":\"6.3 MyBatisPlus：通用Service接口和通用Service实现类\",\"a\":\"_6-3-mybatisplus-通用service接口和通用service实现类\"},\"1267\":{\"t\":\"Service层也有很多通用的CURD方法，MyBatisPlus也对这些方法进行了封装。\"},\"1268\":{\"t\":\"//Service层：继承IService<Book>类，并填写增强的实体类作为泛型 public interface IBookService extends IService<Book> { //添加非通用操作API接口 //可以继续添加非通用的API } //ServiceImpl层：继承的类需要传入两个泛型，一个是数据层接口，另一个是实体类。 @Service //IOC 管理 public class BookServiceImpl extends ServiceImpl<BookDao, Book> implements IBookService { @Autowired private BookDao bookDao; //添加非通用操作API，注意命名，不要覆盖掉原始操作 } \"},\"1269\":{\"h\":\"6.4 注意事项\",\"a\":\"_6-4-注意事项\"},\"1270\":{\"t\":\"接口命名一般以I开头。 实际开发时，业务层必须进行Test测试。\"},\"1271\":{\"h\":\"7. Controller：表现层\",\"a\":\"_7-controller-表现层\"},\"1272\":{\"t\":\"创建包：controller作为表现层，创建BookController类。\"},\"1273\":{\"t\":\"表现层其实就是：servlet层，调用业务层获取数据，将数据响应给前端，并指定跳转的页面。\"},\"1274\":{\"t\":\"API开发：如果做前后端分离的API开发，Controller只需要响应JSON格式数据即可。\"},\"1275\":{\"h\":\"7.1 Controller\",\"a\":\"_7-1-controller\"},\"1276\":{\"t\":\"@RequestMapping(\\\"/books\\\") public class BookController2 { @Autowired private IBookService bookService; @GetMapping public List<Book> getAll(){ return bookService.list(); } @PostMapping public Boolean save(@RequestBody Book book){ return bookService.save(book); } @PutMapping public Boolean update(@RequestBody Book book){ return bookService.modify(book); } @DeleteMapping(\\\"{id}\\\") public Boolean delete(@PathVariable Integer id){ return bookService.delete(id); } @GetMapping(\\\"{id}\\\") public Book getById(@PathVariable Integer id){ return bookService.getById(id); } @GetMapping(\\\"{currentPage}/{pageSize}\\\") public IPage<Book> getPage( @PathVariable int currentPage,@PathVariable int pageSize){ return bookService.getPage(currentPage,pageSize, null); } \"},\"1277\":{\"h\":\"7.2 注解\",\"a\":\"_7-2-注解\"},\"1278\":{\"t\":\"实体数据：@RequestBody\"},\"1279\":{\"t\":\"路径变量：@PathVariable\"},\"1280\":{\"h\":\"7.3 测试接口\",\"a\":\"_7-3-测试接口\"},\"1281\":{\"t\":\"使用Postman进行接口测试\"},\"1282\":{\"h\":\"8. 接口优化\",\"a\":\"_8-接口优化\"},\"1283\":{\"t\":\"上述Controller响应的数据有一个问题，返回的数据类型未统一：有JSON数组、JSON对象、Boolean、INT，我们必须返回一致的数据类型让前端使用，即：表现层消息一致性处理。\"},\"1284\":{\"h\":\"8.1 响应数据设计：详见RESTful规范\",\"a\":\"_8-1-响应数据设计-详见restful规范\"},\"1285\":{\"t\":\"格式：统一为JSON对象\"},\"1286\":{\"t\":\"{ \\\"code\\\":1, //响应状态码，提前规定好：比如1表示成功 \\\"message\\\":\\\"处理成功\\\", //响应信息 \\\"time\\\":12321654351,//接口响应的时间戳，用于安全 \\\"data\\\":[ //响应的数据 ,JSON数组格式(也可以是其他数据格式) { \\\"id\\\":10, \\\"uname\\\":\\\"Jinno\\\" },{ \\\"id\\\":12, \\\"uname\\\":\\\"Aaron\\\" } ] } \"},\"1287\":{\"h\":\"8.2 异常的统一处理\",\"a\":\"_8-2-异常的统一处理\"},\"1288\":{\"t\":\"在表现层做统一的异常处理，使用SpringMVC提供的异常处理器做统一的异常处理。 比如：将异常信息加入异常日志、发送消息给运维等。\"},\"1289\":{\"t\":\"包：controller/utils，也将异常处理类放入utile包中。 只需要对controller层做异常处理即可，其他层的异常最终会抛到controller。\"},\"1290\":{\"t\":\"//作为springmvc的异常处理器 @RestControllerAdvice public class ProjectExceptionAdvice { //拦截所有的异常信息 @ExceptionHandler(Exception.class) public R doException(Exception ex){ //记录日志 //通知运维 //通知开发 ex.printStackTrace(); return new R(\\\"服务器故障，请稍后再试！\\\"); } } \"},\"1291\":{\"h\":\"8.3 返回结果模型类\",\"a\":\"_8-3-返回结果模型类\"},\"1292\":{\"t\":\"将所有操作的操作结果数据格式统一起来，需要设计表现层返回结果的模型类，用于后端与前端进行数据格式统一，也称为前后端数据协议\"},\"1293\":{\"t\":\"包：创建controller/utils包，专门存放工具类的，创建类R作为返回结果模型类。\"},\"1294\":{\"t\":\"构造方法：根据不同的响应数据类型，设计多个构造方法\"},\"1295\":{\"t\":\"异常处理：返回结果模型，不要漏掉了异常的信息\"},\"1296\":{\"t\":\"@Data public class R { private Boolean flag;//操作是否成功 private Object data; //响应的具体数据 private String msg; //响应信息，如异常信息 public R(){} //空参构造方法 public R(Boolean flag){ //DML构造方法 this.flag = flag; } public R(Boolean flag,Object data){ //DQL构造方法 this.flag = flag; this.data = data; } public R(Boolean flag,String msg){ //带响应信息的构造方法 this.flag = flag; this.msg = msg; } public R(String msg){ //异常专用构造方法 this.flag = false; this.msg = msg; } } \"},\"1297\":{\"h\":\"8.4 使用结果模型类\",\"a\":\"_8-4-使用结果模型类\"},\"1298\":{\"t\":\"在Controller类中，将所有方法的返回值类型都修改为R，对所有的返回值都使用R对象进行包装。 返回定义好的JSON格式数据。\"},\"1299\":{\"t\":\"@RestController @RequestMapping(\\\"/books\\\") public class BookController { @Autowired private IBookService bookService; @GetMapping public R getAll(){ return new R(true, bookService.list()); } @PostMapping public R save(@RequestBody Book book) throws IOException { if (book.getName().equals(\\\"123\\\") ) throw new IOException(); boolean flag = bookService.save(book); return new R(flag, flag ? \\\"添加成功^_^\\\" : \\\"添加失败-_-!\\\"); } @PutMapping public R update(@RequestBody Book book) throws IOException { if (book.getName().equals(\\\"123\\\") ) throw new IOException(); boolean flag = bookService.modify(book); return new R(flag, flag ? \\\"修改成功^_^\\\" : \\\"修改失败-_-!\\\"); } @DeleteMapping(\\\"{id}\\\") public R delete(@PathVariable Integer id){ return new R(bookService.delete(id)); } @GetMapping(\\\"{id}\\\") public R getById(@PathVariable Integer id){ return new R(true, bookService.getById(id)); } @GetMapping(\\\"{currentPage}/{pageSize}\\\") public R getPage (@PathVariable int currentPage,@PathVariable int pageSize,Book book){ IPage<Book> page = bookService.getPage(currentPage, pageSize,book); //如果当前页码值大于了总页码值，那么重新执行查询操作，使最大页码值作为当前页码值 if( currentPage > page.getPages()){ page = bookService.getPage((int)page.getPages(), pageSize,book); } return new R(true, page); } } \"},\"1300\":{\"h\":\"9. 前端页面设计\",\"a\":\"_9-前端页面设计\"},\"1301\":{\"t\":\"实际开发时，都是前后端分离的，有专门的前端服务器（Nginx）。\"},\"1302\":{\"t\":\"现在只是作测试，前端页面放到：resources目录下的static目录中。\"},\"1303\":{\"t\":\"子目录为：css；js;pages；plugins;templates;\"},\"1304\":{\"t\":\"技术栈：采用Vue和Axios。\"},\"1305\":{\"t\":\"暂略。\"},\"1306\":{\"h\":\"1-1. 环境与部署\"},\"1307\":{\"h\":\"数据库设计\",\"a\":\"数据库设计\"},\"1308\":{\"t\":\"如下：共有11张表。\"},\"1309\":{\"t\":\"表名\"},\"1310\":{\"t\":\"说明\"},\"1311\":{\"t\":\"employee\"},\"1312\":{\"t\":\"员工表\"},\"1313\":{\"t\":\"category\"},\"1314\":{\"t\":\"分类表：菜品、套餐\"},\"1315\":{\"t\":\"dish\"},\"1316\":{\"t\":\"菜品表\"},\"1317\":{\"t\":\"setmeal\"},\"1318\":{\"t\":\"套餐表\"},\"1319\":{\"t\":\"setmeal_dish\"},\"1320\":{\"t\":\"菜品与套餐关系表\"},\"1321\":{\"t\":\"dish_flavor\"},\"1322\":{\"t\":\"菜品口味关系表\"},\"1323\":{\"t\":\"user\"},\"1324\":{\"t\":\"用户表C端\"},\"1325\":{\"t\":\"address_book\"},\"1326\":{\"t\":\"地址表\"},\"1327\":{\"t\":\"shopping_cart\"},\"1328\":{\"t\":\"购物车表\"},\"1329\":{\"t\":\"orders\"},\"1330\":{\"t\":\"订单表\"},\"1331\":{\"t\":\"order_detail\"},\"1332\":{\"t\":\"订单明细表\"},\"1333\":{\"h\":\"1. employee：员工表\",\"a\":\"_1-employee-员工表\"},\"1334\":{\"t\":\"CREATE TABLE `employee` ( `id` bigint(20) NOT NULL COMMENT '主键', `name` varchar(32) COLLATE utf8_bin NOT NULL COMMENT '姓名', `username` varchar(32) COLLATE utf8_bin NOT NULL COMMENT '用户名', `password` varchar(64) COLLATE utf8_bin NOT NULL COMMENT '密码', `phone` varchar(11) COLLATE utf8_bin NOT NULL COMMENT '手机号', `sex` varchar(2) COLLATE utf8_bin NOT NULL COMMENT '性别', `id_number` varchar(18) COLLATE utf8_bin NOT NULL COMMENT '身份证号', `status` int(11) NOT NULL DEFAULT '1' COMMENT '状态 0:禁用，1:正常', `create_time` datetime NOT NULL COMMENT '创建时间', `update_time` datetime NOT NULL COMMENT '更新时间', `create_user` bigint(20) NOT NULL COMMENT '创建人', `update_user` bigint(20) NOT NULL COMMENT '修改人', PRIMARY KEY (`id`) USING BTREE, UNIQUE KEY `idx_username` (`username`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='员工信息'; \"},\"1335\":{\"h\":\"2. category：分类表\",\"a\":\"_2-category-分类表\"},\"1336\":{\"t\":\"CREATE TABLE `category` ( `id` bigint(20) NOT NULL COMMENT '主键', `type` int(11) DEFAULT NULL COMMENT '类型 1 菜品分类 2 套餐分类', `name` varchar(64) COLLATE utf8_bin NOT NULL COMMENT '分类名称', `sort` int(11) NOT NULL DEFAULT '0' COMMENT '顺序', `create_time` datetime NOT NULL COMMENT '创建时间', `update_time` datetime NOT NULL COMMENT '更新时间', `create_user` bigint(20) NOT NULL COMMENT '创建人', `update_user` bigint(20) NOT NULL COMMENT '修改人', PRIMARY KEY (`id`) USING BTREE, UNIQUE KEY `idx_category_name` (`name`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='菜品及套餐分类'; \"},\"1337\":{\"h\":\"3. dish：菜品表\",\"a\":\"_3-dish-菜品表\"},\"1338\":{\"t\":\"CREATE TABLE `dish` ( `id` bigint(20) NOT NULL COMMENT '主键', `name` varchar(64) COLLATE utf8_bin NOT NULL COMMENT '菜品名称', `category_id` bigint(20) NOT NULL COMMENT '菜品分类id', `price` decimal(10,2) DEFAULT NULL COMMENT '菜品价格', `code` varchar(64) COLLATE utf8_bin NOT NULL COMMENT '商品码', `image` varchar(200) COLLATE utf8_bin NOT NULL COMMENT '图片', `description` varchar(400) COLLATE utf8_bin DEFAULT NULL COMMENT '描述信息', `status` int(11) NOT NULL DEFAULT '1' COMMENT '0 停售 1 起售', `sort` int(11) NOT NULL DEFAULT '0' COMMENT '顺序', `create_time` datetime NOT NULL COMMENT '创建时间', `update_time` datetime NOT NULL COMMENT '更新时间', `create_user` bigint(20) NOT NULL COMMENT '创建人', `update_user` bigint(20) NOT NULL COMMENT '修改人', `is_deleted` int(11) NOT NULL DEFAULT '0' COMMENT '是否删除', PRIMARY KEY (`id`) USING BTREE, UNIQUE KEY `idx_dish_name` (`name`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='菜品管理'; \"},\"1339\":{\"h\":\"4. setmeal：套餐表\",\"a\":\"_4-setmeal-套餐表\"},\"1340\":{\"t\":\"CREATE TABLE `setmeal` ( `id` bigint(20) NOT NULL COMMENT '主键', `category_id` bigint(20) NOT NULL COMMENT '菜品分类id', `name` varchar(64) COLLATE utf8_bin NOT NULL COMMENT '套餐名称', `price` decimal(10,2) NOT NULL COMMENT '套餐价格', `status` int(11) DEFAULT NULL COMMENT '状态 0:停用 1:启用', `code` varchar(32) COLLATE utf8_bin DEFAULT NULL COMMENT '编码', `description` varchar(512) COLLATE utf8_bin DEFAULT NULL COMMENT '描述信息', `image` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '图片', `create_time` datetime NOT NULL COMMENT '创建时间', `update_time` datetime NOT NULL COMMENT '更新时间', `create_user` bigint(20) NOT NULL COMMENT '创建人', `update_user` bigint(20) NOT NULL COMMENT '修改人', `is_deleted` int(11) NOT NULL DEFAULT '0' COMMENT '是否删除', PRIMARY KEY (`id`) USING BTREE, UNIQUE KEY `idx_setmeal_name` (`name`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='套餐'; \"},\"1341\":{\"h\":\"5. setmeal_dish：菜品与套餐关系表\",\"a\":\"_5-setmeal-dish-菜品与套餐关系表\"},\"1342\":{\"t\":\"CREATE TABLE `setmeal_dish` ( `id` bigint(20) NOT NULL COMMENT '主键', `setmeal_id` varchar(32) COLLATE utf8_bin NOT NULL COMMENT '套餐id ', `dish_id` varchar(32) COLLATE utf8_bin NOT NULL COMMENT '菜品id', `name` varchar(32) COLLATE utf8_bin DEFAULT NULL COMMENT '菜品名称 （冗余字段）', `price` decimal(10,2) DEFAULT NULL COMMENT '菜品原价（冗余字段）', `copies` int(11) NOT NULL COMMENT '份数', `sort` int(11) NOT NULL DEFAULT '0' COMMENT '排序', `create_time` datetime NOT NULL COMMENT '创建时间', `update_time` datetime NOT NULL COMMENT '更新时间', `create_user` bigint(20) NOT NULL COMMENT '创建人', `update_user` bigint(20) NOT NULL COMMENT '修改人', `is_deleted` int(11) NOT NULL DEFAULT '0' COMMENT '是否删除', PRIMARY KEY (`id`) USING BTREE ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='套餐菜品关系'; \"},\"1343\":{\"h\":\"6. dish_flavor：菜品口味关系表\",\"a\":\"_6-dish-flavor-菜品口味关系表\"},\"1344\":{\"t\":\"CREATE TABLE `dish_flavor` ( `id` bigint(20) NOT NULL COMMENT '主键', `dish_id` bigint(20) NOT NULL COMMENT '菜品', `name` varchar(64) COLLATE utf8_bin NOT NULL COMMENT '口味名称', `value` varchar(500) COLLATE utf8_bin DEFAULT NULL COMMENT '口味数据list', `create_time` datetime NOT NULL COMMENT '创建时间', `update_time` datetime NOT NULL COMMENT '更新时间', `create_user` bigint(20) NOT NULL COMMENT '创建人', `update_user` bigint(20) NOT NULL COMMENT '修改人', `is_deleted` int(11) NOT NULL DEFAULT '0' COMMENT '是否删除', PRIMARY KEY (`id`) USING BTREE ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='菜品口味关系表'; \"},\"1345\":{\"h\":\"7. user：用户表\",\"a\":\"_7-user-用户表\"},\"1346\":{\"t\":\"CREATE TABLE `user` ( `id` bigint(20) NOT NULL COMMENT '主键', `name` varchar(50) COLLATE utf8_bin DEFAULT NULL COMMENT '姓名', `phone` varchar(100) COLLATE utf8_bin NOT NULL COMMENT '手机号', `sex` varchar(2) COLLATE utf8_bin DEFAULT NULL COMMENT '性别', `id_number` varchar(18) COLLATE utf8_bin DEFAULT NULL COMMENT '身份证号', `avatar` varchar(500) COLLATE utf8_bin DEFAULT NULL COMMENT '头像', `status` int(11) DEFAULT '0' COMMENT '状态 0:禁用，1:正常', PRIMARY KEY (`id`) USING BTREE ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='用户信息'; \"},\"1347\":{\"h\":\"8. address_book：地址表\",\"a\":\"_8-address-book-地址表\"},\"1348\":{\"t\":\"CREATE TABLE `address_book` ( `id` bigint(20) NOT NULL COMMENT '主键', `user_id` bigint(20) NOT NULL COMMENT '用户id', `consignee` varchar(50) COLLATE utf8_bin NOT NULL COMMENT '收货人', `sex` tinyint(4) NOT NULL COMMENT '性别 0 女 1 男', `phone` varchar(11) COLLATE utf8_bin NOT NULL COMMENT '手机号', `province_code` varchar(12) CHARACTER SET utf8mb4 DEFAULT NULL COMMENT '省级区划编号', `province_name` varchar(32) CHARACTER SET utf8mb4 DEFAULT NULL COMMENT '省级名称', `city_code` varchar(12) CHARACTER SET utf8mb4 DEFAULT NULL COMMENT '市级区划编号', `city_name` varchar(32) CHARACTER SET utf8mb4 DEFAULT NULL COMMENT '市级名称', `district_code` varchar(12) CHARACTER SET utf8mb4 DEFAULT NULL COMMENT '区级区划编号', `district_name` varchar(32) CHARACTER SET utf8mb4 DEFAULT NULL COMMENT '区级名称', `detail` varchar(200) CHARACTER SET utf8mb4 DEFAULT NULL COMMENT '详细地址', `label` varchar(100) CHARACTER SET utf8mb4 DEFAULT NULL COMMENT '标签', `is_default` tinyint(1) NOT NULL DEFAULT '0' COMMENT '默认 0 否 1是', `create_time` datetime NOT NULL COMMENT '创建时间', `update_time` datetime NOT NULL COMMENT '更新时间', `create_user` bigint(20) NOT NULL COMMENT '创建人', `update_user` bigint(20) NOT NULL COMMENT '修改人', `is_deleted` int(11) NOT NULL DEFAULT '0' COMMENT '是否删除', PRIMARY KEY (`id`) USING BTREE ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='地址管理'; \"},\"1349\":{\"h\":\"9. shopping_cart：购物车表\",\"a\":\"_9-shopping-cart-购物车表\"},\"1350\":{\"t\":\"CREATE TABLE `shopping_cart` ( `id` bigint(20) NOT NULL COMMENT '主键', `name` varchar(50) COLLATE utf8_bin DEFAULT NULL COMMENT '名称', `image` varchar(100) COLLATE utf8_bin DEFAULT NULL COMMENT '图片', `user_id` bigint(20) NOT NULL COMMENT '主键', `dish_id` bigint(20) DEFAULT NULL COMMENT '菜品id', `setmeal_id` bigint(20) DEFAULT NULL COMMENT '套餐id', `dish_flavor` varchar(50) COLLATE utf8_bin DEFAULT NULL COMMENT '口味', `number` int(11) NOT NULL DEFAULT '1' COMMENT '数量', `amount` decimal(10,2) NOT NULL COMMENT '金额', `create_time` datetime DEFAULT NULL COMMENT '创建时间', PRIMARY KEY (`id`) USING BTREE ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='购物车'; \"},\"1351\":{\"h\":\"10. order：订单表\",\"a\":\"_10-order-订单表\"},\"1352\":{\"t\":\"CREATE TABLE `orders` ( `id` bigint(20) NOT NULL COMMENT '主键', `number` varchar(50) COLLATE utf8_bin DEFAULT NULL COMMENT '订单号', `status` int(11) NOT NULL DEFAULT '1' COMMENT '订单状态 1待付款，2待派送，3已派送，4已完成，5已取消', `user_id` bigint(20) NOT NULL COMMENT '下单用户', `address_book_id` bigint(20) NOT NULL COMMENT '地址id', `order_time` datetime NOT NULL COMMENT '下单时间', `checkout_time` datetime NOT NULL COMMENT '结账时间', `pay_method` int(11) NOT NULL DEFAULT '1' COMMENT '支付方式 1微信,2支付宝', `amount` decimal(10,2) NOT NULL COMMENT '实收金额', `remark` varchar(100) COLLATE utf8_bin DEFAULT NULL COMMENT '备注', `phone` varchar(255) COLLATE utf8_bin DEFAULT NULL, `address` varchar(255) COLLATE utf8_bin DEFAULT NULL, `user_name` varchar(255) COLLATE utf8_bin DEFAULT NULL, `consignee` varchar(255) COLLATE utf8_bin DEFAULT NULL, PRIMARY KEY (`id`) USING BTREE ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='订单表'; \"},\"1353\":{\"h\":\"11. order_detail：订单明细表\",\"a\":\"_11-order-detail-订单明细表\"},\"1354\":{\"t\":\"CREATE TABLE `order_detail` ( `id` bigint(20) NOT NULL COMMENT '主键', `name` varchar(50) COLLATE utf8_bin DEFAULT NULL COMMENT '名字', `image` varchar(100) COLLATE utf8_bin DEFAULT NULL COMMENT '图片', `order_id` bigint(20) NOT NULL COMMENT '订单id', `dish_id` bigint(20) DEFAULT NULL COMMENT '菜品id', `setmeal_id` bigint(20) DEFAULT NULL COMMENT '套餐id', `dish_flavor` varchar(50) COLLATE utf8_bin DEFAULT NULL COMMENT '口味', `number` int(11) NOT NULL DEFAULT '1' COMMENT '数量', `amount` decimal(10,2) NOT NULL COMMENT '金额', PRIMARY KEY (`id`) USING BTREE ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='订单明细表'; \"},\"1355\":{\"h\":\"搭建项目\",\"a\":\"搭建项目\"},\"1356\":{\"t\":\"使用Maven搭建SpringBoot项目。\"},\"1357\":{\"h\":\"1. new Project\",\"a\":\"_1-new-project\"},\"1358\":{\"h\":\"2. 项目结构\",\"a\":\"_2-项目结构\"},\"1359\":{\"h\":\"3. 添加依赖\",\"a\":\"_3-添加依赖\"},\"1360\":{\"t\":\"这里只列出基本依赖，后续开发中需要什么依赖，再导入。\"},\"1361\":{\"t\":\"<dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> <scope>compile</scope> </dependency> <dependency> <groupId>com.baomidou</groupId> <artifactId>mybatis-plus-boot-starter</artifactId> <version>3.4.2</version> </dependency> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.18.20</version> </dependency> <dependency> <groupId>com.alibaba</groupId> <artifactId>fastjson</artifactId> <version>1.2.76</version> </dependency> <dependency> <groupId>commons-lang</groupId> <artifactId>commons-lang</artifactId> <version>2.6</version> </dependency> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <scope>runtime</scope> </dependency> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid-spring-boot-starter</artifactId> <version>1.1.23</version> </dependency> </dependencies> \"},\"1362\":{\"h\":\"4. 基本配置\",\"a\":\"_4-基本配置\"},\"1363\":{\"t\":\"在application.yml文件中进行基本配置。\"},\"1364\":{\"t\":\"server: port: 8080 spring: application: name: reggie datasource: druid: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://localhost:3306/reggie?serverTimezone=Asia/Shanghai username: root password: 1234 mybatis-plus: configuration: map-underscore-to-camel-case: true log-impl: org.apache.ibatis.logging.stdout.StdOutImpl global-config: db-config: id-type: ASSIGN_ID \"},\"1365\":{\"h\":\"前端代码\",\"a\":\"前端代码\"},\"1366\":{\"t\":\"提示\"},\"1367\":{\"t\":\"因为是SpringBoot项目，关注点在后端，前端代码已经提供好了，可以直接下载。 可以选择在放在后端的resource目录中部署，也可以单独部署。\"},\"1368\":{\"t\":\"单独部署：需要使用Nginx代理\"},\"1369\":{\"t\":\"放入后端的resource：需要设置静态资源映射\"},\"1370\":{\"h\":\"1. 下载\",\"a\":\"_1-下载\"},\"1371\":{\"t\":\"这些代码是使用纯H5写的，参考意义不大，直接使用即可。\"},\"1372\":{\"t\":\"下载用户端代码-front\"},\"1373\":{\"t\":\"下载后台代码-backend\"},\"1374\":{\"h\":\"2. 设置静态资源映射\",\"a\":\"_2-设置静态资源映射\"},\"1375\":{\"t\":\"把前端的静态资源放在resource目录中，然后设置静态资源映射。\"},\"1376\":{\"t\":\"@Slf4j @Configuration public class WebMvcConfig extends WebMvcConfigurationSupport { @Override protected void addResourceHandlers(ResourceHandlerRegistry registry) { log.info(\\\"开始静态资源映射\\\"); registry.addResourceHandler(\\\"/backend/**\\\").addResourceLocations(\\\"classpath:/backend/\\\"); registry.addResourceHandler(\\\"/front/**\\\").addResourceLocations(\\\"classpath:/front/\\\"); } } \"},\"1377\":{\"h\":\"3. 启动项目\",\"a\":\"_3-启动项目\"},\"1378\":{\"t\":\"启动项目，访问后台：http://localhost:8080/backend/index.html\"},\"1379\":{\"h\":\"-> Map\"},\"1380\":{\"t\":\"介绍\"},\"1381\":{\"t\":\"该项目来自于黑马程序员的 瑞吉外卖\"},\"1382\":{\"h\":\"项目介绍\",\"a\":\"项目介绍\"},\"1383\":{\"t\":\"本项目（瑞吉外卖）是专门为餐饮企业(餐厅、饭店)定制的一款软件产品，包括系统管理后台和移动端应用两部分。\"},\"1384\":{\"t\":\"系统管理后台：主要提供给餐饮企业内部员工使用，可以对餐厅的菜品、套餐、订单等进行管理维护。\"},\"1385\":{\"t\":\"移动端应用：主要提供给消费者使用，可以在线浏览菜品、添加购物车、下单等。\"},\"1386\":{\"h\":\"原型图\",\"a\":\"原型图\"},\"1387\":{\"t\":\"瑞吉外卖前台（用户端）\"},\"1388\":{\"t\":\"瑞吉外卖后台（管理端）\"},\"1389\":{\"h\":\"技术选型\",\"a\":\"技术选型\"},\"1390\":{\"t\":\"前端：H5、Vue、ElementUI\"},\"1391\":{\"t\":\"后端：Spring Boot\"},\"1392\":{\"t\":\"数据层：MyBatis Plus、Redis\"},\"1393\":{\"t\":\"服务：Nginx\"},\"1394\":{\"t\":\"工具：Maven、Swagger\"},\"1395\":{\"h\":\"功能清单\",\"a\":\"功能清单\"},\"1396\":{\"t\":\"后台系统\"},\"1397\":{\"t\":\"权限管理：登录、退出\"},\"1398\":{\"t\":\"员工管理：新增、修改、列表、禁用\"},\"1399\":{\"t\":\"分类管理：新增、修改、列表、删除\"},\"1400\":{\"t\":\"菜品管理：新增、修改、列表、删除\"},\"1401\":{\"t\":\"套餐管理：新增、修改、列表、删除、停售\"},\"1402\":{\"t\":\"订单管理：列表、状态\"},\"1403\":{\"t\":\"用户端应用\"},\"1404\":{\"t\":\"登录：手机号、微信\"},\"1405\":{\"t\":\"个人中心：地址管理、历史订单\"},\"1406\":{\"t\":\"浏览：菜品、套餐\"},\"1407\":{\"t\":\"购物车：添加购物车、清空购物车\"},\"1408\":{\"t\":\"下单\"},\"1409\":{\"h\":\"角色介绍\",\"a\":\"角色介绍\"},\"1410\":{\"t\":\"管理员：后台系统超管，拥有所有权限\"},\"1411\":{\"t\":\"员工：后台系统普通员工，仅能管理菜品和订单\"},\"1412\":{\"t\":\"用户：使用用户端应用\"},\"1413\":{\"h\":\"1-1. String\"},\"1414\":{\"t\":\"提示\"},\"1415\":{\"t\":\"位置 class: Libraries=> java=> lang=> String.java\"},\"1416\":{\"t\":\"创建String\"},\"1417\":{\"t\":\"String s1 = \\\"javaEE\\\"; //字面量方式：常用,会存入字符串常量池 String s1 = new String(\\\"javaEE\\\"); //构造函数方式 \"},\"1418\":{\"h\":\"Ⅰ. 属性\",\"a\":\"i-属性\"},\"1419\":{\"h\":\"1. length\",\"a\":\"_1-length\"},\"1420\":{\"t\":\"返回字符串的长度，这里是字符长度，与编码无关。\"},\"1421\":{\"t\":\"int length() ========================= String s1 = \\\"你OK\\\"; System.out.println(s1.length()); //3 \"},\"1422\":{\"h\":\"2. equals\",\"a\":\"_2-equals\"},\"1423\":{\"t\":\"String类对equals进行重写，比较的是内容是否相同，而非内存地址。\"},\"1424\":{\"t\":\"boolean equals(Object obj); ================================== String s1 = \\\"aa\\\"; String s2 = \\\"aa\\\"; boolean res1 = s1.equals(s2); String s3 = new String(\\\"aa\\\"); String s4 = new String(\\\"aa\\\"); boolean res2 = s3.equals(s4); System.out.println(res1); //true System.out.println(res2); //true \"},\"1425\":{\"h\":\"3. equalsIgnoreCase\",\"a\":\"_3-equalsignorecase\"},\"1426\":{\"t\":\"equals的不区分大小写版本。\"},\"1427\":{\"t\":\"boolean equalsIgnoreCase(String anothrerString); ================================= String s1 = \\\"aa\\\"; String s2 = \\\"Aa\\\"; System.out.println(s1.equals(s2)); //false System.out.println(s1.equalsIgnoreCase(s2)); //true \"},\"1428\":{\"h\":\"Ⅱ. 获取\",\"a\":\"ii-获取\"},\"1429\":{\"h\":\"1. charAt\",\"a\":\"_1-charat\"},\"1430\":{\"t\":\"返回指定索引处的字符，如果查询的索引越界了就会报越界异常。\"},\"1431\":{\"t\":\"char charAt(int index); ========================= String s2 = \\\"helloGoogle\\\"; System.out.println(s2.charAt(1));//e \"},\"1432\":{\"h\":\"2. indexOf\",\"a\":\"_2-indexof\"},\"1433\":{\"t\":\"返回指定字符串在此字符串中第一次出现的索引。\"},\"1434\":{\"t\":\"第二个参数可选，表示从该索引处开始找；若未找到目标字符串，则返回-1；\"},\"1435\":{\"t\":\"int indexOf(String str,int fromIndex); ========================================================== String s1 = \\\"hel elo\\\"; System.out.println(s1.indexOf(\\\"el\\\")); //1 System.out.println(s1.indexOf(\\\"el\\\",3)); //4 \"},\"1436\":{\"h\":\"3. lastIndexOf\",\"a\":\"_3-lastindexof\"},\"1437\":{\"t\":\"返回指定子字符串在此字符串中最后一次出现的索引，可以有第二个参数：formIndex，从该索引处反向搜索 该方法如果未找到，将返回-1；\"},\"1438\":{\"t\":\"int lastIndexOf(String str,int fromIndex); ========================================================== String s1 = \\\"hel elo\\\"; System.out.println(s1.lastIndexOf(\\\"el\\\")); System.out.println(s1.lastIndexOf(\\\"el\\\",3)); \"},\"1439\":{\"h\":\"Ⅲ. 检测与比较\",\"a\":\"iii-检测与比较\"},\"1440\":{\"h\":\"1. isEmpty\",\"a\":\"_1-isempty\"},\"1441\":{\"t\":\"判断是否是空字符串，算法是：value.length==0\"},\"1442\":{\"t\":\"boolean isEmpty(); =================================== String s3 = \\\" \\\";//空格不是空字符串 System.out.println(s3.isEmpty());//false \"},\"1443\":{\"h\":\"2. compareTo\",\"a\":\"_2-compareto\"},\"1444\":{\"t\":\"比较两个字符串的大小，算法：比较字符的ASCII，从第一个字符开始比较，相等就比较下一个。\"},\"1445\":{\"t\":\"返回值：\"},\"1446\":{\"t\":\"0：相当；\"},\"1447\":{\"t\":\">0：左边的大；\"},\"1448\":{\"t\":\"<0：右边的大。\"},\"1449\":{\"t\":\"int compareTo(String anotherString); =================================== String s3 = \\\"ab\\\"; String s4 = \\\"ac\\\"; System.out.println(s3.compareTo(s4));//-1 \"},\"1450\":{\"h\":\"3. endsWith\",\"a\":\"_3-endswith\"},\"1451\":{\"t\":\"测试此字符串是否以指定的后缀结束。\"},\"1452\":{\"t\":\"boolean endsWith(String suffix); ========================================================== String s1 = \\\"hello\\\"; System.out.println(s1.endsWith(\\\"lo\\\")); //true \"},\"1453\":{\"h\":\"4. startsWith\",\"a\":\"_4-startswith\"},\"1454\":{\"t\":\"测试此字符串是否以指定潜在开始，第二个参数toffset，可选，表示舍去前面N个字符后，开始比较。\"},\"1455\":{\"t\":\"boolean startWith(String prefix,int toffset); ========================================================== String s1 = \\\"hello\\\"; System.out.println(s1.startsWith(\\\"ll\\\")); //false System.out.println(s1.startsWith(\\\"ll\\\",2)); //true \"},\"1456\":{\"h\":\"5. contains\",\"a\":\"_5-contains\"},\"1457\":{\"t\":\"查询字符串是否包含某个字符串\"},\"1458\":{\"t\":\"boolean contains(CharSequence s); //CharSequence可以看做字符串 ========================================================== String s1 = \\\"hello\\\"; System.out.println(s1.contains(\\\"ll\\\")); //true \"},\"1459\":{\"h\":\"Ⅳ. 修改\",\"a\":\"iv-修改\"},\"1460\":{\"t\":\"String类有不可变性，这里的修改是新创建了个一个字符串并返回，而不是修改了源字符串。\"},\"1461\":{\"h\":\"1. tolowerCase\",\"a\":\"_1-tolowercase\"},\"1462\":{\"t\":\"将所有字符转为小写。\"},\"1463\":{\"t\":\"注意：字符串本身没有改变，返回的是新的字符串。\"},\"1464\":{\"t\":\"String toLowerCase(); ========================================================== String s1 = \\\"FUck YoU\\\"; String newS1 = s1.toLowerCase(); System.out.println(s1); //FUck YoU ,源字符串没有变化 System.out.println(newS1); //fuck you \"},\"1465\":{\"h\":\"2. toUpperCase\",\"a\":\"_2-touppercase\"},\"1466\":{\"t\":\"将所有字符转为大写。\"},\"1467\":{\"t\":\"String toUpperCase(); ========================================================== String s1 = \\\"FUck YoU\\\"; String newS1 = s1.toUpperCase(); System.out.println(s1); //FUck YoU System.out.println(newS1); //FUCK YOU \"},\"1468\":{\"h\":\"3. trim\",\"a\":\"_3-trim\"},\"1469\":{\"t\":\"注意\"},\"1470\":{\"t\":\"暂时没有找到只去除一边空白的方法。\"},\"1471\":{\"t\":\"去除字符串首尾空白。\"},\"1472\":{\"t\":\"String trim(); ========================================================== String s7 = \\\" ok,fuck you \\\"; System.out.println(s7.trim()); //ok,fuck you \"},\"1473\":{\"h\":\"4. concat\",\"a\":\"_4-concat\"},\"1474\":{\"t\":\"连接字符串，等价于 \\\"+\\\"，将参数字符串连接到此字符串的结尾。\"},\"1475\":{\"t\":\"String concat(String str); //参数可以是字符串或代表字符串的变量 ========================================================== String s1 = \\\"hello\\\"; String s2 = s1.concat(\\\" world\\\"); System.out.println(s2); //hello world \"},\"1476\":{\"h\":\"5. substring\",\"a\":\"_5-substring\"},\"1477\":{\"t\":\"字符串截取。\"},\"1478\":{\"t\":\"参数1：beginIndex：开始截取的字符串索引位置\"},\"1479\":{\"t\":\"参数2：endIndex：字符串截取的end位置，可以省略第二个参数，默认是截取到末尾。\"},\"1480\":{\"t\":\"String substring(int beginIndex,int endIndex); ========================================================== String s1 = \\\"love,dead and robot\\\"; String newS1 = s1.substring(1); String newS1_2 = s1.substring(5, 10); System.out.println(newS1); //ove,dead and robot System.out.println(newS1_2); //dead \"},\"1481\":{\"h\":\"Ⅴ. 类型转换\",\"a\":\"v-类型转换\"},\"1482\":{\"t\":\"包括：String转基本数据类型和基本数据类型转String\"},\"1483\":{\"h\":\"1. Xxx.parseXxx\",\"a\":\"_1-xxx-parsexxx\"},\"1484\":{\"t\":\"String转基本数据类型（包装类）。 转不同的数据类型，需要调用对应包装类的静态方法：parseXxx(str)。\"},\"1485\":{\"t\":\"注意：char类型没有parseXxx方法；boolean类型的字符串只有true（不区分大小写）可以转为true，其他的都是false\"},\"1486\":{\"t\":\"byte Byte.parseByte(String s); //String -> byte short Short.parseByte(String s); //String -> short int Integer.parseInt(String s); //String -> int long Long.parseLong(String s); //String -> long float Float.parseFloat(String s); //String -> float double Double.parseDouble(String s); //String -> double boolean Boolean.parseBoolean(String s); //String -> boolean ========================================================== String s1 = \\\"123\\\"; int intS1 = Integer.parseInt(s1); System.out.println(intS1); //123 \"},\"1487\":{\"h\":\"2. valueOf\",\"a\":\"_2-valueof\"},\"1488\":{\"t\":\"基本数据类型转String类型，也可以使用 + “” 取代。\"},\"1489\":{\"t\":\"valueOf根据参数数据类型的不同，有多个重构方法。\"},\"1490\":{\"t\":\"参数类型可以为：8种基本数据类型（包括包装类）、char[]\"},\"1491\":{\"t\":\"string valueOf(int i); //参数可以是8种基本数据类型 string valueOf(char[] c); //参数可以是char[],转为string是将所有char连接在一起 string valueOf(Object obj);//参数也可以是引用数据类型 ========================================================== char[] arr = {'a','b','c'}; String s1 = String.valueOf(arr); System.out.println(s1);//abc \"},\"1492\":{\"h\":\"3. toCharArray\",\"a\":\"_3-tochararray\"},\"1493\":{\"t\":\"将String转为char[]。\"},\"1494\":{\"t\":\"char[] toCharArray(); ========================================================== String str = \\\"love dead & robots\\\"; char[] chars = str.toCharArray(); System.out.println(Arrays.toString(chars)); //[l, o, v, e, , d, e, a, d, , &, , r, o, b, o, t, s] \"},\"1495\":{\"t\":\"char[]转String 通过String的一个特殊构造器，可以将char[]转为String。\"},\"1496\":{\"t\":\"char[] arr = {'a','b','c'}; String s = new String(arr);//构造函数的参数可以是一个char[]类型的数组 System.out.println(s); \"},\"1497\":{\"h\":\"4. getBytes\",\"a\":\"_4-getbytes\"},\"1498\":{\"t\":\"编码：将String转为byte[]数组，byte[]是ASCII编码组成的数组\"},\"1499\":{\"t\":\"字符集：String 与 byte[]（编码和解码）时，字符集必须一致，不然会乱码 \"},\"1500\":{\"t\":\"在UTF8字符集中，一个字母用1个字符表示，一个中文用3个字符表示\"},\"1501\":{\"t\":\"如果指定了字符集：将可能抛出异常，需要对异常进行处理\"},\"1502\":{\"t\":\"byte[] getBytes(String charsetName);//参数可选，默认是UTF8 ========================================================== String s1 = \\\"Dio侠\\\"; byte[] bytes = s1.getBytes(); System.out.println(Arrays.toString(bytes)); //[68, 105, 111, -28, -66, -96] //使用了指定字符集的参数，就需要进行异常处理 try { byte[] gbk = s1.getBytes(\\\"gbk\\\"); System.out.println(Arrays.toString(gbk)); //[68, 105, 111, -49, -64] } catch (UnsupportedEncodingException e) { e.printStackTrace(); } \"},\"1503\":{\"t\":\"解码 解码就是将byte[]数组转为String。\"},\"1504\":{\"t\":\"方式：调用String的构造器，String有一个构造器是可以接受byte[]类型的。\"},\"1505\":{\"t\":\"构造器：同时，该构造器可以接受第二个参数，来指定编码的字符集，默认是UTF8。\"},\"1506\":{\"t\":\"byte[] bytes = {68, 105, 111, -28, -66, -96}; String s1 = new String(bytes); System.out.println(s1); //Dio侠 //如果使用第二个参数来指定字符集，就需要处理异常 try { String s2 = new String(bytes, \\\"gbk\\\"); System.out.println(s2);//Dio渚�,错误的字符集将解码错误 } catch (UnsupportedEncodingException e) { e.printStackTrace(); } \"},\"1507\":{\"h\":\"Ⅵ. 正则\",\"a\":\"vi-正则\"},\"1508\":{\"t\":\"String类里也有很多涉及正则的方法。\"},\"1509\":{\"h\":\"1. replace\",\"a\":\"_1-replace\"},\"1510\":{\"h\":\"1.1 replace：char替换\",\"a\":\"_1-1-replace-char替换\"},\"1511\":{\"t\":\"返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。\"},\"1512\":{\"t\":\"String replace(char oldChar, char newChar); String s1 = \\\"I2bat8 man\\\"; System.out.println(s1.replace('m','g'));//I2bat8 gan \"},\"1513\":{\"h\":\"1.2 replace：str替换\",\"a\":\"_1-2-replace-str替换\"},\"1514\":{\"t\":\"使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。\"},\"1515\":{\"t\":\"String replace(CharSequence target, CharSequence replacement); String s1 = \\\"I2bat8 man\\\"; System.out.println(s1.replace(\\\"man\\\",\\\"van\\\")); //I2bat8 van \"},\"1516\":{\"h\":\"1.3 replaceAll：正则全部替换\",\"a\":\"_1-3-replaceall-正则全部替换\"},\"1517\":{\"t\":\"使用给定的replacement 替换此字符串所有匹配给定的正则表达式的子字符串。\"},\"1518\":{\"t\":\"String replaceAll(String regex, String replacement); String s1 = \\\"I2bat8 man\\\"; System.out.println(s1.replaceAll(\\\"\\\\\\\\d+\\\",\\\",\\\")); //I,bat, man \"},\"1519\":{\"h\":\"1.4 replaceFirst：正则替换第一个子字符串\",\"a\":\"_1-4-replacefirst-正则替换第一个子字符串\"},\"1520\":{\"t\":\"使用给定的replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。\"},\"1521\":{\"t\":\"String replaceFirst(String regex, String replacement); String s1 = \\\"I2bat8 man\\\"; System.out.println(s1.replaceFirst(\\\"\\\\\\\\d+\\\",\\\",\\\"));//I,bat8 man \"},\"1522\":{\"h\":\"2. matches\",\"a\":\"_2-matches\"},\"1523\":{\"t\":\"告知此字符串是否匹配给定的正则表达式。\"},\"1524\":{\"t\":\"boolean matches(String regex); String s2 = \\\"1234\\\"; System.out.println(s2.matches(\\\"\\\\\\\\d+\\\")); //true \"},\"1525\":{\"h\":\"3. split\",\"a\":\"_3-split\"},\"1526\":{\"t\":\"根据给定正则表达式的匹配拆分此字符串。\"},\"1527\":{\"t\":\"可以指定第二个参数：limit，表示切片最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中\"},\"1528\":{\"t\":\"返回值：返回值是个字符串数组，而非字符串\"},\"1529\":{\"t\":\"String[] split(String regex); String[] split(String regex, int limit); String s3 = \\\"I am Bat Van\\\"; String[] s4 = s3.split(\\\" \\\"); //根据空格分割 System.out.println(s4[1]); //am \"},\"1530\":{\"h\":\"1-2. StringBuffer\"},\"1531\":{\"t\":\"提示\"},\"1532\":{\"t\":\"Libraries>java>lang StringBuffer.java Libraries>java>lang StringBuilder\"},\"1533\":{\"h\":\"Ⅰ. 介绍\",\"a\":\"i-介绍\"},\"1534\":{\"h\":\"1. 简介\",\"a\":\"_1-简介\"},\"1535\":{\"h\":\"1.1 StringBuffer\",\"a\":\"_1-1-stringbuffer\"},\"1536\":{\"t\":\"StringBuffer也是个字符串类，代表可变的字符序列吗，可以对字符串内容进行增删，此时不会产生新的对象（可变性）。\"},\"1537\":{\"t\":\"StringBuffer很多方法与String是相同的。\"},\"1538\":{\"h\":\"1.2 StringBuilder\",\"a\":\"_1-2-stringbuilder\"},\"1539\":{\"t\":\"在功能上，StringBuilder和StringBuffer是一样的。\"},\"1540\":{\"t\":\"区别是：StringBuffer是线程安全的，StringBuilder是线程不安全的。\"},\"1541\":{\"h\":\"2. 结构\",\"a\":\"_2-结构\"},\"1542\":{\"t\":\"//StringBuffer结构 public final class StringBuffer extends AbstractStringBuilder implements Serializable,CharSequence{ private transient char[] toStringCache; static final long serialVersionUID = 3388685877147921107L; } //StringBuilder结构 public final class StringBuilder extends AbstractStringBuilder implements Serializable,CharSequence{ static final long serialVersionUID = 4383685877147921099L; } \"},\"1543\":{\"h\":\"3. 创建StringBuffer对象\",\"a\":\"_3-创建stringbuffer对象\"},\"1544\":{\"t\":\"StringBuffer 类不同于String ，其对象必须使用构造器生成。有三个构造器：\"},\"1545\":{\"t\":\"StringBuffer() ：初始容量为16的字符串缓冲区\"},\"1546\":{\"t\":\"StringBuffer(int size) ：构造指定容量的字符串缓冲区\"},\"1547\":{\"t\":\"StringBuffer(String str) ：将内容初始化为指定字符串内容\"},\"1548\":{\"t\":\"StringBuffer sb1 = new StringBuffer(); StringBuffer sb2 = new StringBuffer(100); StringBuffer sb3 = new StringBuffer(\\\"Dickman\\\"); \"},\"1549\":{\"h\":\"4. String、StringBuffer、StringBuilder对比\",\"a\":\"_4-string、stringbuffer、stringbuilder对比\"},\"1550\":{\"t\":\"String：不可变的字符序列；底层使用final char[]存储\"},\"1551\":{\"t\":\"StringBuffer：可变的字符序列；线程安全的，效率低；底层使用char[]存储\"},\"1552\":{\"t\":\"StringBuilder：可变的字符序列；jdk5.0新增的，线程不安全的，效率高；底层使用char[]存储\"},\"1553\":{\"h\":\"5. 源码分析\",\"a\":\"_5-源码分析\"},\"1554\":{\"h\":\"5.1 String源码分析\",\"a\":\"_5-1-string源码分析\"},\"1555\":{\"t\":\"String的底层是将字符保存在char[]数组中的，且是final不可变的（内容和长度都不可变）。\"},\"1556\":{\"t\":\"String str = new String();//char[] value = new char[0]; String str1 = new String(\\\"ab\\\");//char[] value = new char[]{'a','b'}; \"},\"1557\":{\"h\":\"5.2 StringBuffer分析\",\"a\":\"_5-2-stringbuffer分析\"},\"1558\":{\"t\":\"StringBuffer底层也是保存到char数组中的，但是这个char[]不是final，且默认有16个长度，因此就具有了可变性。\"},\"1559\":{\"t\":\"//底层默认创建了16个长度的char数组 StringBuffer sb1 = new String();//char[] value = new char[16] //添加操作 sb1.append('a');//value[0] = 'a'; sb1.append('b');//value[1] = 'b'; \"},\"1560\":{\"h\":\"5.3 StringBuffer扩容\",\"a\":\"_5-3-stringbuffer扩容\"},\"1561\":{\"t\":\"StringBuffer默认长度是16，当添加的字符串超过16时，会自动进行扩容，默认情况下，扩容为原来容量的2倍 + 2，同时将原有数组中的元素复制到新的数组中。\"},\"1562\":{\"h\":\"6. 对比String、StringBuffer、StringBuilder的效率\",\"a\":\"_6-对比string、stringbuffer、stringbuilder的效率\"},\"1563\":{\"t\":\"经过简单的循环向字符串中添加数字，从0添加到两万。耗时大致分别为：\"},\"1564\":{\"t\":\"StringBuffer：5ms\"},\"1565\":{\"t\":\"StringBuilder：2ms\"},\"1566\":{\"t\":\"String：1139ms\"},\"1567\":{\"h\":\"7. 三种创建字符串方式的选择\",\"a\":\"_7-三种创建字符串方式的选择\"},\"1568\":{\"t\":\"有线程安全：StringBuffer(int capacity)\"},\"1569\":{\"t\":\"无线程安全：StringBuilder(int capacity) 总结：优先选择可变的字符串类，为了避免扩容，提高效率，可以指定字符串长度。\"},\"1570\":{\"h\":\"8. StringBuffer方法的特性\",\"a\":\"_8-stringbuffer方法的特性\"},\"1571\":{\"t\":\"可变性：改变StringBuffer内容的方法，会直接改变源StringBuffer，而不是返回一个新的\"},\"1572\":{\"t\":\"synchronized：因为StringBuffer是线程安全的，所以StringBuffer的方法上都会带 synchronized\"},\"1573\":{\"t\":\"同String的方法：String的方法，一般StringBuffer也能使用 \"},\"1574\":{\"t\":\"length：获取字符串内容的长度，这里获取的不是底层char[] 的长度，而是已有的内容的长度\"},\"1575\":{\"t\":\"indexOf：返回指定字符串在此字符串第一次出现的索引\"},\"1576\":{\"t\":\"substring：字符串截取\"},\"1577\":{\"t\":\"charAt：返回指定索引处的字符\"},\"1578\":{\"h\":\"Ⅱ. 常用方法\",\"a\":\"ii-常用方法\"},\"1579\":{\"h\":\"1. length\",\"a\":\"_1-length\"},\"1580\":{\"t\":\"和String的length方法类似，返回StringBuffer的长度。 这里的长度值得是存入StringBuffer的字符数量count，而不是StringBuffer本身的长度。\"},\"1581\":{\"t\":\"int length(); ======================= StringBuffer sb1 = new StringBuffer(); System.out.println(sb1.length());//0 StringBuffer sb2 = new StringBuffer(20); System.out.println(sb2.length()); //0 StringBuffer sb3 = new StringBuffer(\\\"hello\\\"); System.out.println(sb3.length()); //5 \"},\"1582\":{\"h\":\"2. append\",\"a\":\"_2-append\"},\"1583\":{\"t\":\"字符串拼接，StringBuffer不能使用“+”进行字符串拼接，只能使用append方法。 该方法针对不通数据类型的参数，有多个重构方法，能自动转为String类型的数据类型都可以作为参数。\"},\"1584\":{\"t\":\"StringBuffer append(String s);//可以是各种能自动转为String的数据类型 //如果是char[],可以额外指定两个范围参数 StringBuffer append(char[] str, int offset, int len); ========================================= StringBuffer sb1 = new StringBuffer(\\\"Hello\\\"); StringBuffer sb2 = sb1.append(\\\" baby\\\"); System.out.println(sb1); //Hello baby;直接改的源StringBuffer System.out.println(sb2); //Hello baby;直接改的源StringBuffer \"},\"1585\":{\"h\":\"3. delete\",\"a\":\"_3-delete\"},\"1586\":{\"t\":\"删除指定位置的内容\"},\"1587\":{\"t\":\"参数1：start：起始位置的index，包含start\"},\"1588\":{\"t\":\"参数2：end：结束位置的index，不包含end\"},\"1589\":{\"t\":\"StringBuffer delete(int start, int end) ============================ StringBuffer sb1 = new StringBuffer(\\\"Hello Bitman\\\"); sb1.delete(0,6); System.out.println(sb1); //Bitman \"},\"1590\":{\"h\":\"4. replace\",\"a\":\"_4-replace\"},\"1591\":{\"t\":\"字符串替换。\"},\"1592\":{\"t\":\"参数1 start：替换其实位置的index（包括start）\"},\"1593\":{\"t\":\"参数2 end：替换结束为主的index（不包括end），如果要替换最后一个字符，需要end=length+1\"},\"1594\":{\"t\":\"参数3 str：用来替换的字符串\"},\"1595\":{\"t\":\"StringBuffer replace(int start, int end, String str); =============================== StringBuffer sb = new StringBuffer(\\\"Hello Batman\\\"); sb.replace(6,sb.length(),\\\"Superman\\\"); System.out.println(sb); // Hello Superman \"},\"1596\":{\"h\":\"5. insert\",\"a\":\"_5-insert\"},\"1597\":{\"t\":\"在指定位置插入内容。\"},\"1598\":{\"t\":\"参数1 offset：偏移值，从左开始算，从1开始算（非index）。\"},\"1599\":{\"t\":\"参数2 xxx：待插入的内容（可以是任意能转为String的数据类型、包括引用类型） \"},\"1600\":{\"t\":\"根据参数2不同的数据类型，有多个重载方法\"},\"1601\":{\"t\":\"//参数2可以是任意能转为String的数据类型 StringBuffer insert(int offset, String str); ======================================== StringBuffer sb = new StringBuffer(\\\"Hello Batman\\\"); sb.insert(11,\\\",fuck you\\\"); System.out.println(sb); \"},\"1602\":{\"h\":\"6. reverse\",\"a\":\"_6-reverse\"},\"1603\":{\"t\":\"把当前字符序列逆转，即颠倒字符串\"},\"1604\":{\"t\":\"StringBuffer reverse(); ========================================= StringBuffer sb = new StringBuffer(\\\"Hello Batman\\\"); sb.reverse(); System.out.println(sb);//namtaB olleH \"},\"1605\":{\"h\":\"1-3. 时间\"},\"1606\":{\"t\":\"警告\"},\"1607\":{\"t\":\"在开发中，我们采用JDK8新增的时间API，旧的不要再用了。\"},\"1608\":{\"h\":\"Ⅰ. 日期与时间API\",\"a\":\"i-日期与时间api\"},\"1609\":{\"h\":\"1. 旧的时间API\",\"a\":\"_1-旧的时间api\"},\"1610\":{\"t\":\"System.currentTimeMillis：获取ms时间戳\"},\"1611\":{\"t\":\"java.util.Date：获取日期\"},\"1612\":{\"t\":\"java.sql.Date：获取用于SQL的日期\"},\"1613\":{\"t\":\"java.text.SimpleDateFormat：格式化和解析日期\"},\"1614\":{\"t\":\"Calendar：日历类\"},\"1615\":{\"h\":\"2. JDK8之后新时间API出现的背景\",\"a\":\"_2-jdk8之后新时间api出现的背景\"},\"1616\":{\"t\":\"JDK 1.0中包含了一个java.util.Date类，但是它的大多数方法已经在JDK 1.1引入Calendar类之后被弃用了。而Calendar并不比Date好多少。它们面临的问题是：\"},\"1617\":{\"t\":\"可变性：像日期和时间这样的类应该是不可变的\"},\"1618\":{\"t\":\"偏移性：Date中的年份是从1900开始的，而月份都从0开始\"},\"1619\":{\"t\":\"格式化：格式化只对Date有用，Calendar则不行\"},\"1620\":{\"t\":\"不是线程安全：不能处理闰秒等\"},\"1621\":{\"h\":\"3. 新时间API介绍\",\"a\":\"_3-新时间api介绍\"},\"1622\":{\"t\":\"第三次引入的API是成功的，并且Java 8中引入的java.time API 已经纠正了过去的缺陷，将来很长一段时间内它都会为我们服务。\"},\"1623\":{\"t\":\"Java 8 吸收了 Joda-Time 的精华，以一个新的开始为 Java 创建优秀的 API。新的 java.time 中包含了所有关于本地日期（LocalDate）、本地时间（LocalTime）、本地日期时间（LocalDateTime）、时区（ZonedDateTime）和持续时间（Duration）的类。历史悠久的 Date 类新增了 toInstant() 方法，用于把 Date 转换成新的表示形式。这些新增的本地化时间日期 API 大大简化了日期时间和本地化的管理。\"},\"1624\":{\"h\":\"4. 新时间日期API包\",\"a\":\"_4-新时间日期api包\"},\"1625\":{\"t\":\"java.time – 包含值对象的基础包\"},\"1626\":{\"t\":\"java.time.chrono – 提供对不同的日历系统的访问\"},\"1627\":{\"t\":\"java.time.format – 格式化解析时间和日期\"},\"1628\":{\"t\":\"java.time.temporal – 包括底层框架和扩展特性\"},\"1629\":{\"t\":\"java.time.zone – 包含时区支持的类\"},\"1630\":{\"h\":\"5. 补充说明\",\"a\":\"_5-补充说明\"},\"1631\":{\"t\":\"大多数开发者只会用到基础包和format包，也可能会用到temporal包。因此，尽管有68个新的公开类型，大多数开发者，大概将只会用到其中的三分之一。\"},\"1632\":{\"h\":\"Ⅱ. 本地时间\",\"a\":\"ii-本地时间\"},\"1633\":{\"t\":\"跟本地时间有关的类有三个：LocalDate、LocalTime、LocalDateTime。\"},\"1634\":{\"t\":\"这三个类类似于Calendar，但是更方便，且具有不可变性（无法修改源时间）。它们的实例是不可变的对象。它们提供了简单的本地日期或时间，并不包含当前的时间信息，也不包含与时区相关的信息。\"},\"1635\":{\"h\":\"1. LocalDate、LocalTime 和 LocalDateTime\",\"a\":\"_1-localdate、localtime-和-localdatetime\"},\"1636\":{\"t\":\"三个类的方法都是类似的，且这三个类具有不可变性，对日期时间进行的修改将返回同样的一个类的对象，而不是修改源数据。这些方法操作的也是日期、时间相关的属性。\"},\"1637\":{\"h\":\"1.1 LocalDate\",\"a\":\"_1-1-localdate\"},\"1638\":{\"t\":\"本地日期，代表IOS格式（yyyy-MM-dd）的日期,可以存储生日、纪念日等日期。\"},\"1639\":{\"t\":\"//位置：Libraries>java>time>LocalDate.java [class] public final class LocalDate implements Temporal,TemporalAdjuster, ChronoLocalDate,Serializable{ } \"},\"1640\":{\"h\":\"1.2 LocalTime\",\"a\":\"_1-2-localtime\"},\"1641\":{\"t\":\"本地时间，表示一个时间，而不是日期。\"},\"1642\":{\"t\":\"//位置：Libraries>java>time>LocalTime.java [class] public final class LocalTime implements Temporal, TemporalAdjuster, Comparable<LocalTime>, Serializable { } \"},\"1643\":{\"h\":\"1.3 LocalDateTime\",\"a\":\"_1-3-localdatetime\"},\"1644\":{\"t\":\"本地日期和时间，这是一个最常用的类之一。\"},\"1645\":{\"t\":\"//位置：Libraries>java>time>LocalDateTime.java [class] public final class LocalDateTimeimplements Temporal, TemporalAdjuster, ChronoLocalDateTime<LocalDate>, Serializable { } \"},\"1646\":{\"h\":\"2. now\",\"a\":\"_2-now\"},\"1647\":{\"t\":\"实例化类（无参），这三个类无法直接new实例化，需要借助方法。\"},\"1648\":{\"t\":\"LocalDate ldNow = LocalDate.now(); LocalTime ltNow = LocalTime.now(); LocalDateTime ldtNow = LocalDateTime.now(); ======================================== System.out.println(ldNow); //2022-06-09(年-月-日) System.out.println(ltNow); //7:25:17.169(时:分:秒.毫秒) System.out.println(ldtNow); //2022-06-09T17:25:17.169 \"},\"1649\":{\"h\":\"3. of\",\"a\":\"_3-of\"},\"1650\":{\"t\":\"参数用来指定日期和时间，格式为：yyyy,MM,d,hh,mm,ss 。\"},\"1651\":{\"t\":\"LocalDate.of(int year, int month, int dayOfMonth); LocalTime.of(int hour,int minute, int second,int ms);//后两个参数可选 LocalDateTime.of(int year, int month, int dayOfMonthint,int hour,int minute, int second,int ms);//second 和 ms可选 ============================================== LocalDate ld = LocalDate.of(2020, 2, 22); LocalTime lt = LocalTime.of(22, 22, 22,222); LocalDateTime ldt = LocalDateTime.of(2020, 2, 22, 22, 22, 22, 222); \"},\"1652\":{\"h\":\"4. getXxx\",\"a\":\"_4-getxxx\"},\"1653\":{\"t\":\"获取时间和日期信息，以LocalDateTime类为例：\"},\"1654\":{\"t\":\"LocalDateTime ldtNow = LocalDateTime.now(); int year = ldtNow.getYear(); //获取year int month = ldtNow.getMonthValue(); //获取Month int day = ldtNow.getDayOfMonth(); //获取day int hour = ldt.getHour(); //获取hour int minute = ldt.getMinute(); //获取minute int second = ldt.getSecond(); //获取秒 int nano = ldt.getNano(); //获取毫秒 int dayOfYear = ldtNow.getDayOfYear(); //获取现在是一年中的第几天 System.out.println(year); //2022 System.out.println(month); //6 System.out.println(day); //9 System.out.println(hour); //18 System.out.println(minute); //29 System.out.println(second); //41 System.out.println(nano); //328000000 System.out.println(dayOfYear); //160 \"},\"1655\":{\"h\":\"5. withXxx\",\"a\":\"_5-withxxx\"},\"1656\":{\"t\":\"设置日期时间信息，可以使用withXxx单独设置某个时间维度的时间，以LocalDateTime类为例：\"},\"1657\":{\"t\":\"LocalDateTime ldt = LocalDateTime.now(); LocalDateTime ldt1_year = ldt.withYear(1999); //设置year LocalDateTime ldt2_month = ldt.withMonth(9); //设置Month LocalDateTime ldt3_day = ldt.withDayOfMonth(9); //设置day LocalDateTime ldt4_hour = ldt.withHour(3); //设置hour LocalDateTime ldt5_min = ldt.withMinute(23); //设置mins LocalDateTime ldt6_s = ldt.withSecond(10); //设置秒 LocalDateTime ldt7_ms = ldt.withNano(333); //设置毫秒 LocalDateTime ldt8_day_year = ldt.withDayOfYear(100); //设置为当年的第N天 System.out.println(ldt1_year); //1999-06-09T18:21:56.556 System.out.println(ldt2_month); //2022-09-09T18:21:56.556 System.out.println(ldt3_day); //2022-06-09T18:21:56.556 System.out.println(ldt4_hour); //2022-06-09T03:21:56.556 System.out.println(ldt5_min); //2022-06-09T18:23:56.556 System.out.println(ldt6_s); //2022-06-09T18:21:10.556 System.out.println(ldt7_ms); //2022-06-09T18:21:56.000000333 System.out.println(ldt8_day_year); //2022-04-10T18:21:56.556 \"},\"1658\":{\"h\":\"6. plusXxx\",\"a\":\"_6-plusxxx\"},\"1659\":{\"t\":\"增加日期时间，即向当前时间对象上进行指定单位的时间增加。\"},\"1660\":{\"t\":\"LocalDateTime ldt = LocalDateTime.now(); LocalDateTime ldt1_year = ldt.plusYears(1); // +年 LocalDateTime ldt2_month = ldt.plusMonths(1); // + month LocalDateTime ldt3_days = ldt.plusDays(1); // +days LocalDateTime ldt4_hour = ldt.plusHours(1); // +Hours LocalDateTime ldt5_min = ldt.plusMinutes(1); // + min LocalDateTime ldt6_s = ldt.plusSeconds(1); //+second LocalDateTime ldt7_ms = ldt.plusNanos(1); //+ms LocalDateTime ldt8_week = ldt.plusWeeks(1); //+week System.out.println(ldt1_year);//2023-06-09T18:37:52.878 System.out.println(ldt2_month);//2022-07-09T18:37:52.878 System.out.println(ldt3_days); System.out.println(ldt4_hour); System.out.println(ldt5_min); System.out.println(ldt6_s); System.out.println(ldt7_ms); System.out.println(ldt8_week);//2022-06-16T18:37:52.878 \"},\"1661\":{\"h\":\"7. minusXxx\",\"a\":\"_7-minusxxx\"},\"1662\":{\"t\":\"减少日期时间，同上，plus变成了minus。\"},\"1663\":{\"t\":\"LocalDateTime ldt = LocalDateTime.now(); LocalDateTime ldt1_year = ldt.minusYears(1); LocalDateTime ldt2_month = ldt.minusMonths(1); LocalDateTime ldt3_days = ldt.minusDays(1); LocalDateTime ldt4_hour = ldt.minusHours(1); LocalDateTime ldt5_min = ldt.minusMinutes(1); LocalDateTime ldt6_s = ldt.minusSeconds(1); LocalDateTime ldt7_ms = ldt.minusNanos(1); LocalDateTime ldt8_week = ldt.minusWeeks(1); \"},\"1664\":{\"h\":\"Ⅲ. Instant\",\"a\":\"iii-instant\"},\"1665\":{\"t\":\"提示\"},\"1666\":{\"t\":\"位置：Libraries>java>time>Instant.java [class]\"},\"1667\":{\"t\":\"类似 java.util.Date类，\"},\"1668\":{\"t\":\"Instant：时间线上的一个瞬时点。 这可能被用来记录应用程序中的事件时间戳。\"},\"1669\":{\"t\":\"他的功能和方法与java.util.Date类都很像。\"},\"1670\":{\"t\":\"public final class Instant implements Temporal,TemporalAdjuster, Comparable<Instant>,Serializable{ } \"},\"1671\":{\"h\":\"1. now\",\"a\":\"_1-now\"},\"1672\":{\"t\":\"实例化，通过Instant类的now静态方法，获取包含当前时间的Instant对象。\"},\"1673\":{\"t\":\"static Instant now(); ================================ Instant now = Instant.now(); System.out.println(now);//2022-06-09T10:51:01.562Z \"},\"1674\":{\"h\":\"2. atOffset\",\"a\":\"_2-atoffset\"},\"1675\":{\"t\":\"添加时间偏移量，通过now方法获取的Instant对象，表示的时间是格林威治时间，即0时区时间，非本地时间，如果我们需要代表本地时间的对象，需要进行时间偏移，获得一个OffsetDateTime时间对象。\"},\"1676\":{\"t\":\"OffsetDateTime atOffset(ZoneOffset offset); ===================================== Instant now = Instant.now(); OffsetDateTime China_time = now.atOffset(ZoneOffset.ofHours(8)); System.out.println(now);//2022-06-09T10:56:20.146Z System.out.println(China_time);//2022-06-09T18:56:20.146+08:00 \"},\"1677\":{\"h\":\"3. toEpochMillion\",\"a\":\"_3-toepochmillion\"},\"1678\":{\"t\":\"获取毫秒时间戳。\"},\"1679\":{\"t\":\"long toEpochMilli(); ===================================== Instant now = Instant.now(); long ms = now.toEpochMilli(); System.out.println(ms); //1654789042842 \"},\"1680\":{\"h\":\"4. ofEpochMilli\",\"a\":\"_4-ofepochmilli\"},\"1681\":{\"t\":\"通过毫秒时间戳获取Instant对象，这其实也是实例化Instant类的一种方式。\"},\"1682\":{\"t\":\"static Instant ofEpochMilli(long epochMilli);//参数是时间戳 ========================================== long ms = 1654740094502L; Instant time = Instant.ofEpochMilli(ms); System.out.println(time); //2022-06-09T02:01:34.502Z \"},\"1683\":{\"h\":\"Ⅳ. DateTimeFormatter\",\"a\":\"iv-datetimeformatter\"},\"1684\":{\"t\":\"提示\"},\"1685\":{\"t\":\"位置：Libraries>java>time>format>DateTimeFormatter.java [class]\"},\"1686\":{\"t\":\"DateTimeFormatter类用来取代之前的SimpleDateFormatter类，用来格式化和解析日期时间。\"},\"1687\":{\"t\":\"该类有三种实例化的方式；我们一般使用第三种：自定义格式。实例化后，我们主要用该对象进行日期时间的 格式化和解析。\"},\"1688\":{\"t\":\"public final class DateTimeFormatter { } \"},\"1689\":{\"h\":\"1. format\",\"a\":\"_1-format\"},\"1690\":{\"t\":\"格式化：format方法，日期->字符串\"},\"1691\":{\"t\":\"参数是TemporlAccessor，LocalDateTime实现了该接口，可以作为参数。\"},\"1692\":{\"t\":\"String format(TemporalAccessor temporal); \"},\"1693\":{\"h\":\"2. parse\",\"a\":\"_2-parse\"},\"1694\":{\"t\":\"解析：parse方法，字符串->日期\"},\"1695\":{\"t\":\"参数是CharSequence，String可以作为参数。\"},\"1696\":{\"t\":\"TemporalAccessor parse(CharSequence text); \"},\"1697\":{\"h\":\"3. 标准格式\",\"a\":\"_3-标准格式\"},\"1698\":{\"t\":\"有三种标准格式，每种格式都返回一个DateTimeFormatter对象\"},\"1699\":{\"t\":\"ISO_LOCAL_DATE_TIME：日期时间\"},\"1700\":{\"t\":\"ISO_LOCAL_DATE：日期\"},\"1701\":{\"t\":\"ISO_LOCAL_TIME：时间\"},\"1702\":{\"t\":\"DateTimeFormatter isoDateTime = DateTimeFormatter.ISO_LOCAL_DATE_TIME; DateTimeFormatter isoDate = DateTimeFormatter.ISO_LOCAL_DATE; DateTimeFormatter isoTime = DateTimeFormatter.ISO_LOCAL_TIME; \"},\"1703\":{\"h\":\"3.1 格式化\",\"a\":\"_3-1-格式化\"},\"1704\":{\"t\":\"调用format方法，进行格式化，将日期数据转为String，以DATE_TIME为例\"},\"1705\":{\"t\":\"DateTimeFormatter isoDateTime = DateTimeFormatter.ISO_LOCAL_DATE_TIME; LocalDateTime ldt = LocalDateTime.now(); String ldtStr = isoDateTime.format(ldt); //进行格式化 System.out.println(ldtStr);//Str:2022-06-10T15:53:22.532 \"},\"1706\":{\"h\":\"3.2 解析\",\"a\":\"_3-2-解析\"},\"1707\":{\"t\":\"DateTimeFormatter isoDateTime = DateTimeFormatter.ISO_LOCAL_DATE_TIME; String dateTimeStr = \\\"2022-06-10T15:53:22.532\\\"; TemporalAccessor tal = isoDateTime.parse(dateTimeStr); System.out.println(tal);//{},ISO resolved to 2022-06-10T15:53:22.532 \"},\"1708\":{\"h\":\"4. 本地格式\",\"a\":\"_4-本地格式\"},\"1709\":{\"t\":\"同样有三个静态方法来进行实例化：\"},\"1710\":{\"t\":\"ofLocalizedDateTime：日期时间\"},\"1711\":{\"t\":\"ofLocalizedDate：日期\"},\"1712\":{\"t\":\"ofLocalizedTime：时间\"},\"1713\":{\"t\":\"上述三个方法，都有多个参数，来进行格式化，如：\"},\"1714\":{\"t\":\"FormatStyle.FULL：2022年3月3日 星期四\"},\"1715\":{\"t\":\"FormatStyle.LONG：2022年3月3日 上午01时18分16秒\"},\"1716\":{\"t\":\"FormatStyle.MEDIUM：2022-3-3 1:19:21\"},\"1717\":{\"t\":\"FormatStyle.SHORT：22-3-3 上午1:19（适用于LocalDate）\"},\"1718\":{\"t\":\"注意：参数与实例化方法的配合，有可能无法识别值。\"},\"1719\":{\"t\":\"//1.实例化 DateTimeFormatter formatter2 = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.LONG); LocalDateTime ldt2 = LocalDateTime.now(); //2.格式化 String time_str1 = formatter2.format(ldt2); System.out.println(time_str1);//2022年3月3日 上午01时21分07秒 //3.解析 String str2 = \\\"2019年2月18日 下午03时47分16秒\\\"; TemporalAccessor ldt3 = formatter2.parse(str2); System.out.println(ldt3);//{},ISO resolved to 2019-02-18T15:47:16 \"},\"1720\":{\"h\":\"5. 自定义格式\",\"a\":\"_5-自定义格式\"},\"1721\":{\"t\":\"调用ofPattern方法，参数为自定义的日期时间格式。\"},\"1722\":{\"t\":\"常用的格式为：yyyy-MM-dd hh:mm:ss\"},\"1723\":{\"t\":\"//参数是String，但是要是特定的String DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\\\"yyyy-MM-dd hh:mm:ss\\\"); \"},\"1724\":{\"h\":\"5.1 格式化\",\"a\":\"_5-1-格式化\"},\"1725\":{\"t\":\"DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\\\"yyyy-MM-dd hh:mm:ss\\\"); LocalDateTime ldt = LocalDateTime.now(); String dateTimeStr = formatter.format(ldt); System.out.println(dateTimeStr); //2022-06-10 04:09:26 \"},\"1726\":{\"h\":\"5.2\",\"a\":\"_5-2\"},\"1727\":{\"t\":\"DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\\\"yyyy-MM-dd hh:mm:ss\\\"); String str = \\\"2022-06-10 04:09:26\\\"; TemporalAccessor ta = formatter.parse(str); \"},\"1728\":{\"h\":\"1-4. 比较器\"},\"1729\":{\"h\":\"Ⅰ. 介绍\",\"a\":\"i-介绍\"},\"1730\":{\"t\":\"Java中的对象，正常情况下，只能进行比较：== 或 != 。不能使用 > 或 < 的。 但是在开发场景中，我们需要对多个对象进行排序，言外之意，就需要比较对象的大小。\"},\"1731\":{\"h\":\"1. 对象排序的实质\",\"a\":\"_1-对象排序的实质\"},\"1732\":{\"t\":\"实际比较的是对象的属性的大小，本质还是比较的基本数据类型。\"},\"1733\":{\"h\":\"2. 排序接口\",\"a\":\"_2-排序接口\"},\"1734\":{\"t\":\"使用以下两个接口中的任何一个来实现对象的排序\"},\"1735\":{\"t\":\"java.lang.Comparable ：自然排序\"},\"1736\":{\"t\":\"java.util.Comparator：定制排序\"},\"1737\":{\"h\":\"3. Comparable与Comparator的区别\",\"a\":\"_3-comparable与comparator的区别\"},\"1738\":{\"t\":\"Comparable 是在集合内部定义的方法实现的排序，Comparator 是在集合外部实现的排序，所以，如想实现排序，就需要在集合外定义Comparator接口的方法或在集合内实现 Comparable接口的方法。\"},\"1739\":{\"h\":\"Ⅱ. Comparable\",\"a\":\"ii-comparable\"},\"1740\":{\"t\":\"提示\"},\"1741\":{\"t\":\"位置：Libraries>java>lang>Comparable.java 【interface】\"},\"1742\":{\"t\":\"Comparable接口，就是比较器里的自然排序接口。 Comparable接口强行对实现它的每个类的对象进行整体排序。这种排序被称为类的自然排序。\"},\"1743\":{\"t\":\"public interface Comparable<T>{ public int compareTo(T o); } \"},\"1744\":{\"h\":\"1. 用法\",\"a\":\"_1-用法\"},\"1745\":{\"t\":\"很多JDK内置的类，都实现了Comparable接口，可以直接使用Collection.sort或Arrays.sort进行排序。\"},\"1746\":{\"t\":\"对于自定义的类，就需要实现Comparable接口，然后重写接口中的compareTo方法，在compareTo(obj)方法中指明如何比较大小，重写时要满足重写规则。 \"},\"1747\":{\"t\":\"之后，如果要比较该类的两个实例大小，就可以调用实例的compareTo方法进行比较了\"},\"1748\":{\"t\":\"如果要该类的多个对象排序，也可以使用Collection.sort或Arrays.sort进行排序了。\"},\"1749\":{\"h\":\"2. compareTo\",\"a\":\"_2-compareto\"},\"1750\":{\"t\":\"实现 Comparable 的类必须实现 compareTo(Object obj) 方法，两个对象通过 compareTo(Object obj) 方法的返回值来比较大小。\"},\"1751\":{\"t\":\"重写compareTo(obj)的规则：\"},\"1752\":{\"t\":\"如果当前对象this大于形参对象obj，则返回正整数\"},\"1753\":{\"t\":\"如果当前对象this小于形参对象obj，则返回负整数\"},\"1754\":{\"t\":\"如果当前对象this等于形参对象obj，则返回零\"},\"1755\":{\"h\":\"3. JDK内置实现\",\"a\":\"_3-jdk内置实现\"},\"1756\":{\"t\":\"在JDK中，有很多类，已经实现了自然排序接口Comparable。\"},\"1757\":{\"t\":\"String：按照字符串中字符的Unicode值进行比较\"},\"1758\":{\"t\":\"Character：按照字符的Unicode值来进行比较\"},\"1759\":{\"t\":\"数值类型对应的包装类以及BigInteger、BigDecimal：按照它们对应的数值大小进行比较\"},\"1760\":{\"t\":\"Boolean：true 对应的包装类实例大于 false 对应的包装类实例\"},\"1761\":{\"t\":\"Date、Time等：后面的日期时间比前面的日期时间大\"},\"1762\":{\"t\":\"数组、集合\"},\"1763\":{\"t\":\"//String的compareTo内置实现源码 public int compareTo(String anotherString) { int len1 = value.length; int len2 = anotherString.value.length; int lim = Math.min(len1, len2); char v1[] = value; char v2[] = anotherString.value; int k = 0; while (k < lim) { char c1 = v1[k]; char c2 = v2[k]; if (c1 != c2) { return c1 - c2; } k++; } return len1 - len2; } //Integer的CompareTo内置实现源码 public int compareTo(Integer anotherInteger) { return compare(this.value, anotherInteger.value); } public static int compare(int x, int y) { return (x < y) ? -1 : ((x == y) ? 0 : 1); } \"},\"1764\":{\"h\":\"4. sort\",\"a\":\"_4-sort\"},\"1765\":{\"t\":\"对于实现了Comparable接口的类，都可以使用Collection.sort或Arrays.sort进行排序。\"},\"1766\":{\"h\":\"5. 使用示例\",\"a\":\"_5-使用示例\"},\"1767\":{\"t\":\"要求：Person类，根据年龄比较大小，如果年龄相同，就按名字字母进行排序\"},\"1768\":{\"h\":\"5.1 实现Comparable接口，重写CompareTo方法\",\"a\":\"_5-1-实现comparable接口-重写compareto方法\"},\"1769\":{\"t\":\"//这里直接用泛型限制了，数据类型，否则就会允许接收任意Object类进行比较 class Person implements Comparable<Person>{ private int age; private String name; public Person(int age,String name){ this.age = age; this.name = name; } @Override public int compareTo(Person o) { //1.判断数据类型是否相同,由于这里直接用Person限制了因此，可以省略 //if(!(o instanceof Person)){ // throw new RuntimeException(\\\"数据类型不一致\\\"); //} //2.判断这两个对象，是否是同一个对象 if(this == o){ return 0; //同一个对象肯定相等 } //3.先比较年龄属性 if(this.age>o.age){ return 1; }else if(this.age<o.age){ return -1; }else{ //4.当年龄相同时，比较name属性 return this.name.compareTo(o.name);//直接调用String类的compareTo } } @Override public String toString() { return \\\"[\\\"+name+\\\"-\\\"+age+\\\"]\\\"; } } \"},\"1770\":{\"h\":\"5.2 比较：比较两个对象的大小\",\"a\":\"_5-2-比较-比较两个对象的大小\"},\"1771\":{\"t\":\"Person aaron = new Person(10, \\\"Aaron\\\"); Person bob = new Person(10, \\\"Bob\\\"); int res = aaron.compareTo(bob); System.out.println(res);//-1, \"},\"1772\":{\"h\":\"5.3 排序：对多个对象进行排序\",\"a\":\"_5-3-排序-对多个对象进行排序\"},\"1773\":{\"t\":\"Person[] person = new Person[5]; person[0] = new Person(10,\\\"Aaron\\\"); person[1] = new Person(3,\\\"Jinno\\\"); person[2] = new Person(3,\\\"Bob\\\"); person[3] = new Person(23,\\\"Flank\\\"); person[4] = new Person(8,\\\"Jobs\\\"); Arrays.sort(person); System.out.println(Arrays.toString(person)); //[[Bob-3], [Jinno-3], [Jobs-8], [Aaron-10], [Flank-23]] \"},\"1774\":{\"h\":\"Ⅲ. Comparator\",\"a\":\"iii-comparator\"},\"1775\":{\"t\":\"提示\"},\"1776\":{\"t\":\"位置：Libraries>java>util>Comparator.java 【interface】\"},\"1777\":{\"t\":\"Comparator接口是用来实现定制排序的。当元素的类型没有实现java.lang.Comparable接口而又不方便修改代码，或者实现了java.lang.Comparable接口的排序规则不适合当前的操作，那么可以考虑使用 Comparator 的对象来排序，强行对多个对象进行整体排序的比较。\"},\"1778\":{\"t\":\"@FunctionalInterface //该接口是个函数式接口 public interface Comparator<T>{ int compare(T o1,T o2); ...; } \"},\"1779\":{\"h\":\"1. 用法\",\"a\":\"_1-用法-1\"},\"1780\":{\"t\":\"Comparator常作为Collections.sort()或Arrays.sort()的第二个参数（以匿名内部类的方式）。 此时sort方法将按照重写的compare进行排序。\"},\"1781\":{\"h\":\"2. compare\",\"a\":\"_2-compare\"},\"1782\":{\"t\":\"使用Comparator接口，需重写compare(Object o1,Object o2)方法，比较o1和o2的大小 比较规则为：\"},\"1783\":{\"t\":\"返回正整数，则表示o1 大于o2 ；\"},\"1784\":{\"t\":\"返回0 ，表示相等；\"},\"1785\":{\"t\":\"返回负整数，表示o1 小于o2。\"},\"1786\":{\"h\":\"3. 使用示例\",\"a\":\"_3-使用示例\"},\"1787\":{\"h\":\"3.1 字符串排序\",\"a\":\"_3-1-字符串排序\"},\"1788\":{\"t\":\"String[] arr = new String[]{\\\"AA\\\",\\\"CC\\\",\\\"KK\\\",\\\"MM\\\",\\\"GG\\\"}; Arrays.sort(arr); System.out.println(Arrays.toString(arr));//[AA, CC, GG, KK, MM] //使用Comparator接口，进行降序排序 Arrays.sort(arr,new Comparator() { public int compare(Object o1,Object o2){ if(!(o1 instanceof String && o2 instanceof String)){ throw new RuntimeException(\\\"类型不一致，无法比较\\\"); } String s1 = (String)o1; String s2 = (String)o2; return -s1.compareTo(s2);//直接用负数将compare改成降序 } }); System.out.println(Arrays.toString(arr));//[MM, KK, GG, CC, AA] \"},\"1789\":{\"h\":\"3.2 自定义类的对象排序\",\"a\":\"_3-2-自定义类的对象排序\"},\"1790\":{\"t\":\"同上，Comparable排序示例，这次要反向进行排序\"},\"1791\":{\"t\":\"Arrays.sort(person,new Comparator<Person>(){ @Override public int compare(Person o1, Person o2) { if(o1.getAge() > o2.getAge()) { return -1; }else if(o1.getAge()<o2.getAge()){ return 1; }else{ return -o1.getAge()-o2.getAge(); } } }); System.out.println(Arrays.toString(person)); //[[Flank-23], [Aaron-10], [Jobs-8], [Jinno-3], [Bob-3]] //[[Bob-3], [Jinno-3], [Jobs-8], [Aaron-10], [Flank-23]],这个是之前的 \"},\"1792\":{\"h\":\"1-5. 数学与数值\"},\"1793\":{\"h\":\"Ⅰ. Math\",\"a\":\"i-math\"},\"1794\":{\"t\":\"提示\"},\"1795\":{\"t\":\"位置：rt.jar>java>lang>Math.java 【class】\"},\"1796\":{\"t\":\"java.lang.Math 提供了一系列静态方法用于科学计算。其方法的参数和返回为值类型一般为double型。\"},\"1797\":{\"t\":\"public final class Math{ private Math(){} } \"},\"1798\":{\"h\":\"1. abs 绝对值\",\"a\":\"_1-abs-绝对值\"},\"1799\":{\"t\":\"求数值的绝对值，参数是Number类（包含：Byte、short、int、long、float、double）。 比int小的数值类型，会自动转为int：byte、short。\"},\"1800\":{\"t\":\"int abs(int a); int abs = Math.abs(-1); System.out.println(abs);//1 \"},\"1801\":{\"h\":\"2. random 随机数\",\"a\":\"_2-random-随机数\"},\"1802\":{\"t\":\"随机数的范围是：[0.0,1.0)，包含0.0，不包含1.0。 返回值是一个伪随机数，在该范围内(近似)均匀分布。\"},\"1803\":{\"t\":\"随机数的精确度为：小数点后16位，如果要获取其他范围的值，需要将random结果乘一个倍数。\"},\"1804\":{\"t\":\"任意区间随机数公式：[a,b]:(int)(Math.random() * (b - a + 1) )+ a\"},\"1805\":{\"t\":\"double random(); double random = Math.random(); System.out.println(random); //0.3190675085212945 int res = (int)Math.ceil(Math.random() * 100);//修改为返回[1,100]间的随机数 System.out.println(res);//30 \"},\"1806\":{\"h\":\"3. ceil 进1取整\",\"a\":\"_3-ceil-进1取整\"},\"1807\":{\"t\":\"进1取整，向上取整，返回大于等于给定参数的最小整数。 返回值类型是double，可以强转为int。\"},\"1808\":{\"t\":\"double ceil(double a); double n = 1.1; int ceil = (int)Math.ceil(n); System.out.println(ceil); //2 \"},\"1809\":{\"h\":\"4. floor 舍去小数\",\"a\":\"_4-floor-舍去小数\"},\"1810\":{\"t\":\"舍去小数取整，向下取整，返回小于等于（<=）给定参数的最大整数 。\"},\"1811\":{\"t\":\"double floor(double a); double n = 1.99; int floor = (int)Math.floor(n); System.out.println(floor);//1 \"},\"1812\":{\"h\":\"5. round 四舍五入\",\"a\":\"_5-round-四舍五入\"},\"1813\":{\"t\":\"算法为 Math.floor(x+0.5)，即将原来的数字加上 0.5 后再向下取整。\"},\"1814\":{\"t\":\"long round(double a); double n1 = 1.5111; double n2 = 1.4999; long r1 = Math.round(n1); long r2 = Math.round(n2); System.out.println(r1);//2 System.out.println(r2);//1 \"},\"1815\":{\"h\":\"6. PI圆周率\",\"a\":\"_6-pi圆周率\"},\"1816\":{\"t\":\"π = 3.141592653589793\"},\"1817\":{\"t\":\"public static final double PI = 3.14159265358979323846; double pi = Math.PI; System.out.println(pi); \"},\"1818\":{\"h\":\"7. rint 四舍五入\",\"a\":\"_7-rint-四舍五入\"},\"1819\":{\"t\":\"该函数也是四舍五入，返回与参数最接近的整数，不过返回值类型是double类型的。\"},\"1820\":{\"t\":\"double rint(double a); double rint = Math.rint(2.1); long round = Math.round(2.1); System.out.println(rint);//2.0 System.out.println(round);//2 \"},\"1821\":{\"h\":\"8. min 求较小值\",\"a\":\"_8-min-求较小值\"},\"1822\":{\"t\":\"参数是Number类型的子类：int、long、flot、double（byte、sort ->int）。\"},\"1823\":{\"t\":\"double min(double a, double b); double min1 = Math.min(1, 1.0); double min2 = Math.min(2, 3); System.out.println(min1);//1.0 System.out.println(min2);//2.0 \"},\"1824\":{\"h\":\"9. max 求较大值\",\"a\":\"_9-max-求较大值\"},\"1825\":{\"t\":\"double max(double a, double b); double max1 = Math.max(1, 1.0); double max2 = Math.max(2, 3); System.out.println(max1); System.out.println(max2); \"},\"1826\":{\"h\":\"10. 数学公式\",\"a\":\"_10-数学公式\"},\"1827\":{\"t\":\"exp：返回自然数底数e的参数次方 \"},\"1828\":{\"t\":\"以e为底的对数称为自然对数。\"},\"1829\":{\"t\":\"log：求log，返回参数的自然数底数的对数值\"},\"1830\":{\"t\":\"pow：就次方，返回第一个参数的第二个参数次方\"},\"1831\":{\"t\":\"sqrt：求参数的算术平方根\"},\"1832\":{\"t\":\"double exp(double a); double log(double a); double pow(double a, double b); double sqrt(double a); double exp = Math.exp(10); System.out.println(exp);//22026.465794806718 double log = Math.log(10); System.out.println(log);//2.302585092994046 double pow = Math.pow(2, 3); System.out.println(pow);//8.0 double sqrt = Math.sqrt(2); System.out.println(sqrt);//1.4142135623730951 \"},\"1833\":{\"h\":\"11. 几何函数\",\"a\":\"_11-几何函数\"},\"1834\":{\"t\":\"sin：求sin值，double类型\"},\"1835\":{\"t\":\"cos：求cos值，double类型\"},\"1836\":{\"t\":\"tan：求tan值，double类型\"},\"1837\":{\"t\":\"asin：求asin值，double类型\"},\"1838\":{\"t\":\"acos：求acos值，double类型\"},\"1839\":{\"t\":\"atan：求atan值，double类型\"},\"1840\":{\"t\":\"toDegrees：将参数转为角度\"},\"1841\":{\"t\":\"toRadians：将角度转为弧度\"},\"1842\":{\"h\":\"Ⅱ. Number\",\"a\":\"ii-number\"},\"1843\":{\"t\":\"提示\"},\"1844\":{\"t\":\"位置：rt.jar>java>lang>Number.java 【abstract】\"},\"1845\":{\"t\":\"所有包装类(如：Integer，Long，Byte，Double，Float，Short)都是抽象类Number的子类。 由于Number是抽象类，实际使用的时候，用的都是他的子类（包装类）。\"},\"1846\":{\"h\":\"1. xxxValue\",\"a\":\"_1-xxxvalue\"},\"1847\":{\"t\":\"将Number对象的值转换为xxx数据类型并返回。\"},\"1848\":{\"t\":\"包装类包括->byte、sort、int、long、float、double\"},\"1849\":{\"t\":\"任意一个包装类，转为其他六种基本数据类型\"},\"1850\":{\"t\":\"byte byteValue() short shortValue() int intValue() long longValue() float floatValue() double doubleValue() Integer a = 10; double v = a.doubleValue(); System.out.println(v);//10.0 \"},\"1851\":{\"h\":\"2. compareTo\",\"a\":\"_2-compareto\"},\"1852\":{\"t\":\"所有Number类的子类都实现了Comparable接口，可以直接调用compareTo比较大小。 注意包装类的数据类型应该与参数数据类型对应。\"},\"1853\":{\"t\":\"xxx compareTo(xxx anotherxxx); //xxx是任意包装类 Integer a = 10; int res = a.compareTo(20); System.out.println(res);//-1，a<20 \"},\"1854\":{\"h\":\"3. toString\",\"a\":\"_3-tostring\"},\"1855\":{\"t\":\"Number类型转String类型。和String.valueOf效果一样。\"},\"1856\":{\"t\":\"String toString(); Double a = 10.1; String str1 = a.toString(); String str2 = String.valueOf(a); System.out.println(str1); //String:10.1 System.out.println(str2); //String:10.1 \"},\"1857\":{\"h\":\"4. valueOf\",\"a\":\"_4-valueof\"},\"1858\":{\"t\":\"将基本数据类型、String类型的参数转为包装类对象。 注意：该方法与String.valueOf的效果是相反的。\"},\"1859\":{\"t\":\"Xxx valueOf(String s);//Xxx是某种包装类 int a = 10; Integer b1 = Integer.valueOf(a); Integer b2 = a; Integer b3 = Integer.valueOf(\\\"10\\\"); \"},\"1860\":{\"h\":\"5. parseXxx\",\"a\":\"_5-parsexxx\"},\"1861\":{\"t\":\"将String数值字符串转为基本数据类型。\"},\"1862\":{\"t\":\"xxx parseXxx(String s);//xxx是基本数据类型 int i = Integer.parseInt(\\\"10\\\"); double d = Double.parseDouble(\\\"20.0\\\"); System.out.println(i); System.out.println(d); \"},\"1863\":{\"h\":\"Ⅲ. BigInteger\",\"a\":\"iii-biginteger\"},\"1864\":{\"t\":\"提示\"},\"1865\":{\"t\":\"位置：rt.jar>java>math>BigInteger 【class】 使用较少，仅了解。\"},\"1866\":{\"t\":\"Integer类作为int的包装类，能存储的最大整型值为2 31 -1，Long类也是有限的，最大为2 63 -1。如果要表示再大的整数，不管是基本数据类型还是他们的包装类都无能为力，更不用说进行运算了。\"},\"1867\":{\"t\":\"java.math包的BigInteger 可以表示不可变的任意精度的整数。BigInteger 提供所有 Java 的基本整数操作符的对应物，并提供 java.lang.Math 的所有相关方法。另外，BigInteger 还提供以下运算：模算术、GCD 计算、质数测试、素数生成、位操作以及一些其他操作。\"},\"1868\":{\"t\":\"//结构 public class BigInteger extends Number implements Comparable<BigInteger>{ ... } //构造器 BigInteger bi = new BigInteger(\\\"12433241123\\\"); \"},\"1869\":{\"h\":\"Ⅳ. BigDecimal\",\"a\":\"iv-bigdecimal\"},\"1870\":{\"t\":\"提示\"},\"1871\":{\"t\":\"位置：rt.jar>java>math>BigDecimal.java 【class】\"},\"1872\":{\"t\":\"一般的Float类和Double类可以用来做科学计算或工程计算，但在商业计算中，到要求数字精度比较高，故用到java.math.BigDecimal类。\"},\"1873\":{\"t\":\"原因：十进制值通常没有完全相同的二进制表示形式；十进制数的二进制表示形式可能不精确。\"},\"1874\":{\"t\":\"BigDecimal类支持不可变的、任意精度的有符号十进制定点数。\"},\"1875\":{\"t\":\"结构\"},\"1876\":{\"t\":\"public class BigDecimal extends Number implements Comparable<BigDecimal>{ private final BigInteger intVal; } \"},\"1877\":{\"t\":\"构造器\"},\"1878\":{\"t\":\"参数可以是double类型的数值，也可以是字符串。如下：字符串参数更加精准\"},\"1879\":{\"t\":\"BigDecimal bd1 = new BigDecimal(12345.12121200000001408625394105911254882812555); BigDecimal bd2 = new BigDecimal(\\\"12345.12121200000001408625394105911254882812555\\\"); BigDecimal bd3 = new BigDecimal(12345);//int类型直接用也是很精准的 System.out.println(bd1);//12345.121212000000014086253941059112548828125 System.out.println(bd2);//12345.12121200000001408625394105911254882812555 \"},\"1880\":{\"t\":\"BigDecimal的特殊创建方法\"},\"1881\":{\"t\":\"//特殊的0、1、10可以这么创建： BigDecimal zero = BigDecimal.ZERO; BigDecimal one = BigDecimal.ONE; BigDecimal ten = BigDecimal.TEN; //简单int、long、double数据的创建 BigDecimal bd = BigDecimal.valueOf(123345.21); \"},\"1882\":{\"t\":\"运算\"},\"1883\":{\"t\":\"BigDecimal所创建的是对象，我们不能使用传统的+、-、*、/等算术，需要使用特点的方法。\"},\"1884\":{\"h\":\"1. add\",\"a\":\"_1-add\"},\"1885\":{\"t\":\"加法运算，DigDecimal间不能直接使用 + 。\"},\"1886\":{\"t\":\"BigDecimal add(BigDecimal augend); BigDecimal bd1 = new BigDecimal(\\\"123.45\\\"); BigDecimal bd2 = new BigDecimal(\\\"234.56\\\"); BigDecimal bd3 = bd1.add(bd2); System.out.println(bd3);//358.01 \"},\"1887\":{\"h\":\"2. subtract\",\"a\":\"_2-subtract\"},\"1888\":{\"t\":\"减法运算。\"},\"1889\":{\"t\":\"BigDecimal subtract(BigDecimal subtrahend); BigDecimal bd1 = new BigDecimal(\\\"123.45\\\"); BigDecimal bd2 = new BigDecimal(\\\"234.56\\\"); BigDecimal bd3 = bd1.subtract(bd2); System.out.println(bd3);//-111.11 \"},\"1890\":{\"h\":\"3. multiply\",\"a\":\"_3-multiply\"},\"1891\":{\"t\":\"乘法运算。\"},\"1892\":{\"t\":\"BigDecimal multiply(BigDecimal multiplicand); BigDecimal bd1 = new BigDecimal(\\\"123.45\\\"); BigDecimal bd2 = new BigDecimal(\\\"234.56\\\"); BigDecimal bd3 = bd1.multiply(bd2); System.out.println(bd3);//28956.4320 \"},\"1893\":{\"h\":\"4. divide\",\"a\":\"_4-divide\"},\"1894\":{\"t\":\"除法运算；当除不尽的时候，会直接抛出异常，报Non-terminating decimal expansion; no exact representable decimal result（这时因为BigDecimal默认的舍入策略是精准模式）。\"},\"1895\":{\"t\":\"因此使用时应该尽量采用带有三个参数的重载方法。\"},\"1896\":{\"t\":\"参数2是精度，参数3是舍入策略\"},\"1897\":{\"t\":\"参数2和3都可选的，如果为了防止不出异常，就必须指定参数3\"},\"1898\":{\"t\":\"如果只指定了两个参数，第二个参数默认是：roundingMode\"},\"1899\":{\"t\":\"BigDecimal divide(BigDecimal divisor); BigDecimal divide(BigDecimal divisor,int roundingMode); BigDecimal divide(BigDecimal divisor, int scale, int roundingMode) BigDecimal bd1 = new BigDecimal(\\\"10\\\"); BigDecimal bd2 = new BigDecimal(\\\"3\\\"); BigDecimal res = bd1.divide(bd2,2, RoundingMode.CEILING); System.out.println(res);//3.34 \"},\"1900\":{\"h\":\"5. setScale\",\"a\":\"_5-setscale\"},\"1901\":{\"t\":\"设置值的精度，有两个作用：\"},\"1902\":{\"t\":\"作用1：改变BigDecimal值的精度\"},\"1903\":{\"t\":\"作用2：用与divide运算。\"},\"1904\":{\"t\":\"改变BigDecimal值的精度时，往往会发生值大小的改变，此时就需要指定一个舍入策略，系统默认的舍入策略不是四舍五入，而是：ROUND_UNNECESSARY = 7（精准模式，不会改变值的大小）。\"},\"1905\":{\"t\":\"如果设置的精度，会改变值的大小，就必须显示的指定舍入策略，不然会报错：Rounding necessary。\"},\"1906\":{\"t\":\"在进行divide运算时，可能会发生除不尽的情况，这时，就必须指定舍入策略（精度会有默认值，也可以进行指定），不然会报错。\"},\"1907\":{\"t\":\"BigDecimal setScale(int newScale);//不指定舍入策略 BigDecimal setScale(int newScale, int roundingMode);//指定舍入策略 BigDecimal bd1 = new BigDecimal(\\\"1.5555\\\"); BigDecimal res1 = bd1.setScale(2, RoundingMode.UP); System.out.println(res1);//1.56 \"},\"1908\":{\"h\":\"6. roundingMode\",\"a\":\"_6-roundingmode\"},\"1909\":{\"t\":\"舍入策略，常配合精度一起使用，比如四舍五入只是舍入策略的一种。 以下舍入策略，既可以取常量名，也可以直接使用int类型的常量值。\"},\"1910\":{\"t\":\"ROUND_UP = 0：进一位，在绝对值的角度，往大变 \"},\"1911\":{\"t\":\"10/3 = 3.34（精度2），10/3=4（精度0）\"},\"1912\":{\"t\":\"10/-3=-3.34（精度2），10/-3=-4（精度0）\"},\"1913\":{\"t\":\"ROUND_DOWN = 1：舍去，无效精度外的数值全部舍去，无论正负 \"},\"1914\":{\"t\":\"10/3=3.33（精度2），10/3=3（精度0）\"},\"1915\":{\"t\":\"10/3=-3.33（精度2），10/-3=-3（精度0）\"},\"1916\":{\"t\":\"ROUND_CEILING = 2：正常值下，往大变，正数就进一，负数就舍去 \"},\"1917\":{\"t\":\"10/3=3.34（精度2）；10/3=4（精度0）\"},\"1918\":{\"t\":\"10/-3=3.33（精度2）；10/-3=-3（精度0）\"},\"1919\":{\"t\":\"ROUND_FLOOR = 3：正常值下，往小变，正数就舍去，负数就进一 \"},\"1920\":{\"t\":\"10/3=3.33（精度2），10/3=3（精度0）\"},\"1921\":{\"t\":\"10/-3=-3.34（精度2）；10/-3=-4（精度0）\"},\"1922\":{\"t\":\"ROUND_HALF_UP = 4：在绝对值的角度，四舍五入 \"},\"1923\":{\"t\":\"10/3=3.33（精度2），10/3=3（精度0）\"},\"1924\":{\"t\":\"10/3=-3.33（精度2），10/-3=-3（精度0）\"},\"1925\":{\"t\":\"ROUND_HALF_DOWN = 5：在绝对值的角度，5舍6入 \"},\"1926\":{\"t\":\"10/3=3.33（精度2），10/3=3（精度0）\"},\"1927\":{\"t\":\"10/3=-3.33（精度2），10/-3=-3（精度0）\"},\"1928\":{\"t\":\"ROUND_HALF_EVEN = 6：绝对值角度：0-4舍，6-9入，如果是5，则结果为偶数 \"},\"1929\":{\"t\":\"如果是5，结果是偶数，具体舍入都可以。\"},\"1930\":{\"t\":\"ROUND_UNNECESSARY = 7：不进行舍入，精准模式。 \"},\"1931\":{\"t\":\"如果除不尽，会报错\"},\"1932\":{\"h\":\"7. compareTo\",\"a\":\"_7-compareto\"},\"1933\":{\"t\":\"BigDecimal继承了Comparable接口，可以调用compareTo方法比较两个DigDecimal的数值大小。\"},\"1934\":{\"t\":\"返回1：>参数；\"},\"1935\":{\"t\":\"返回-1：<参数；\"},\"1936\":{\"t\":\"返回0：=参数\"},\"1937\":{\"t\":\"int compareTo(BigDecimal val); BigDecimal bd1 = new BigDecimal(\\\"10.0\\\"); BigDecimal bd2 = new BigDecimal(\\\"10\\\"); int res = bd1.compareTo(bd2); System.out.println(res);//0,10 == 10.0 \"},\"1938\":{\"h\":\"1-6. File\"},\"1939\":{\"t\":\"位置\"},\"1940\":{\"t\":\"rt.jar>java>io>File>File.java 【class】\"},\"1941\":{\"t\":\"File 能新建、删除、重命名文件和目录，但 File 不能访问文件内容本身。 Java程序中的一个File对象，可能没有一个真实存在的文件或目录。\"},\"1942\":{\"t\":\"结构\"},\"1943\":{\"t\":\"public class File implements Serializable,Comparable<File>{ private final String path; } \"},\"1944\":{\"t\":\"构造器\"},\"1945\":{\"t\":\"路径：可以是 绝对路径或者相对路径，默认根路径为项目路径\"},\"1946\":{\"t\":\"//1.根据文件路径创建文件对象 public File(String pathname) File f1 = new File(\\\"hello.txt\\\"); File f2 = new File(\\\"D:/Java/workplace/Demo/study/hi.txt\\\"); //2.根据父路径和子路径拼接创建文件对象 public File(String parent,String child) File f3 = new File(\\\"D:/Java/workplace/Demo/study\\\", \\\"img\\\"); //3.根据父File对象拼接子文件路径创建文件对象 public File(File parent,String child) \"},\"1947\":{\"h\":\"Ⅰ. 获取信息\",\"a\":\"i-获取信息\"},\"1948\":{\"h\":\"1. getAbsolutePath\",\"a\":\"_1-getabsolutepath\"},\"1949\":{\"t\":\"获取文件的绝对路径。\"},\"1950\":{\"t\":\"String getAbsolutePath() File file = new File(\\\"File/a.txt\\\"); String path = file.getAbsolutePath(); System.out.println(path);//D:\\\\Java\\\\workplace\\\\Learn\\\\File\\\\a.txt \"},\"1951\":{\"h\":\"2. getPath\",\"a\":\"_2-getpath\"},\"1952\":{\"t\":\"获取文件路径，定义的时候是绝对路径，就获取绝对路径，是相对路径就获取相对路径。\"},\"1953\":{\"t\":\"String getPath(); File file = new File(\\\"File/a.txt\\\"); String path = file.getPath(); System.out.println(path);//File\\\\a.txt \"},\"1954\":{\"h\":\"3. getName\",\"a\":\"_3-getname\"},\"1955\":{\"t\":\"获取文件的名称（包含后缀）。\"},\"1956\":{\"t\":\"String getName(); File file = new File(\\\"File/a.txt\\\"); String fileName = file.getName(); System.out.println(fileName);//a.txt \"},\"1957\":{\"h\":\"4. getParent\",\"a\":\"_4-getparent\"},\"1958\":{\"t\":\"获取当前文件上层文件目录的路径，若无，则返回null；\"},\"1959\":{\"t\":\"String getParent(); File file = new File(\\\"File/a.txt\\\"); String parentPath = file.getParent(); System.out.println(parentPath);//File \"},\"1960\":{\"h\":\"5. length\",\"a\":\"_5-length\"},\"1961\":{\"t\":\"获取文件长度，指的是获取文件的大小（单位byte），只能获取文件，不能获取目录。\"},\"1962\":{\"t\":\"如果是目录或空文件，都返回0.\"},\"1963\":{\"t\":\"long length(); File file = new File(\\\"File/a.txt\\\"); long length = file.length(); System.out.println(length); //13 \"},\"1964\":{\"h\":\"6. lastModified\",\"a\":\"_6-lastmodified\"},\"1965\":{\"t\":\"获取最后一次的修改时间，单位是：毫秒时间戳。\"},\"1966\":{\"t\":\"long lastModified(); File file = new File(\\\"File/a.txt\\\"); long ms = file.lastModified(); System.out.println(ms);//1655442970466 \"},\"1967\":{\"h\":\"7. list\",\"a\":\"_7-list\"},\"1968\":{\"t\":\"获取目录下的文件名称组成的String数组，包括子目录，目录本身也是文件\"},\"1969\":{\"t\":\"注意：只是名字，不包含路径；\"},\"1970\":{\"t\":\"注意：该方法的参数应该是个目录，如果是文件则返回null，如果是空目录，就返回空数组[]\"},\"1971\":{\"t\":\"String[] list(); File file = new File(\\\"File\\\"); String[] list = file.list(); System.out.println(Arrays.toString(list)); //[a.txt, Avadar, b.txt] \"},\"1972\":{\"h\":\"8. listFiles\",\"a\":\"_8-listfiles\"},\"1973\":{\"t\":\"获取目录下所有文件(包含目录)组成的File类数组，注意：是File类不是文件名\"},\"1974\":{\"t\":\"注意：该方法的参数应该是个目录，如果是文件则返回null，如果是空目录，就返回空数组[]\"},\"1975\":{\"t\":\"File[] listFiles(); File file = new File(\\\"File\\\"); File[] files = file.listFiles(); System.out.println(Arrays.toString(files)); //[File\\\\a.txt, File\\\\Avadar, File\\\\b.txt] \"},\"1976\":{\"h\":\"Ⅱ. 判断\",\"a\":\"ii-判断\"},\"1977\":{\"h\":\"1. isDirectory\",\"a\":\"_1-isdirectory\"},\"1978\":{\"t\":\"判断File是否为目录，是就返回true，是文件或file不存在都返回false。\"},\"1979\":{\"t\":\"boolean isDirectory(); File file = new File(\\\"File\\\"); boolean res = file.isDirectory(); System.out.println(res);//true \"},\"1980\":{\"h\":\"2. isFile\",\"a\":\"_2-isfile\"},\"1981\":{\"t\":\"判断File是否为文件，是就返回true，是目录或文件不存在都返回false。\"},\"1982\":{\"t\":\"boolean isFile(); File file = new File(\\\"File\\\"); boolean res = file.isFile(); System.out.println(res);//true \"},\"1983\":{\"h\":\"3. exists\",\"a\":\"_3-exists\"},\"1984\":{\"t\":\"判断文件（目录）是否在硬盘上存在。\"},\"1985\":{\"t\":\"boolean exists(); File file = new File(\\\"File/a.txt\\\"); boolean res = file.exists(); System.out.println(res);//true \"},\"1986\":{\"h\":\"4. canXxx\",\"a\":\"_4-canxxx\"},\"1987\":{\"t\":\"判断文件是否有：Write、Read、Execute权限\"},\"1988\":{\"t\":\"如果文件不存在，也返回false\"},\"1989\":{\"t\":\"boolean canRead(); boolean canWrite(); boolean canExecute() File file = new File(\\\"File/a.txt\\\"); boolean res = file.canRead(); System.out.println(res);//true \"},\"1990\":{\"h\":\"5. isHidden\",\"a\":\"_5-ishidden\"},\"1991\":{\"t\":\"该文件是否已经隐藏。\"},\"1992\":{\"t\":\"在Linux中，. 开头的文件就是隐藏文件，在windows中需要手动设置隐藏。\"},\"1993\":{\"t\":\"boolean isHidden(); File file = new File(\\\"File/.hidden\\\"); boolean res = file.isHidden(); System.out.println(res);//true \"},\"1994\":{\"h\":\"Ⅲ. 创建文件\",\"a\":\"iii-创建文件\"},\"1995\":{\"t\":\"说明\"},\"1996\":{\"t\":\"先创建File对象，然后再调用创建文件或目录的方法进行创建。\"},\"1997\":{\"t\":\"文件和目录创建的路径和名字就是File对象的路径和名字。\"},\"1998\":{\"t\":\"如果文件或目录已经存在了，就无法进行创建，返回false\"},\"1999\":{\"t\":\"目录本身也是文件，文件是可以没有后缀的，同一目录下的目录和文件不能同名\"},\"2000\":{\"t\":\"一个无实体的File对象即可以是目录也可以是文件，就看用什么方法创建\"},\"2001\":{\"h\":\"createNewFile\",\"a\":\"createnewfile\"},\"2002\":{\"t\":\"使用文件对象创建文件。\"},\"2003\":{\"t\":\"boolean createNewFile() throws IOException; File file = new File(\\\"File/c.txt\\\"); if(file.exists()){ System.out.println(\\\"创建失败,文件已存在\\\"); return; } try { boolean res = file.createNewFile(); if(res){ System.out.println(\\\"文件创建成功\\\"); }else{ System.out.println(\\\"文件创建失败，原因未知\\\"); } } catch (IOException e) { e.printStackTrace(); } \"},\"2004\":{\"h\":\"mkdir\",\"a\":\"mkdir\"},\"2005\":{\"t\":\"创建文件目录，如果目录已存在，将无法创建，如果此文件目录的上层目录不存在，也不创建，并返回false。\"},\"2006\":{\"t\":\"boolean mkdir();//mkdir不会抛出异常 File file = new File(\\\"File/c\\\"); if(file.exists()){ System.out.println(\\\"目录已存在，无法创建\\\"); return; }else{ boolean res = file.mkdir(); if(res){ System.out.println(\\\"目录创建成功\\\"); }else{ System.out.println(\\\"目录创建失败，原因未知\\\"); } } \"},\"2007\":{\"h\":\"3. mkdirs\",\"a\":\"_3-mkdirs\"},\"2008\":{\"t\":\"递归创建文件目录，可以同时创建多层目录（上层文件目录不存在，一并创建）。\"},\"2009\":{\"t\":\"boolean mkdirs() ;//mkdir不会抛出异常 File file = new File(\\\"File/c/b/b\\\"); if(file.exists()){ System.out.println(\\\"目录已存在，无法创建\\\"); return; }else{ boolean res = file.mkdirs(); if(res){ System.out.println(\\\"目录创建成功\\\"); }else{ System.out.println(\\\"目录创建失败，原因未知\\\"); } } \"},\"2010\":{\"h\":\"Ⅳ. 删改\",\"a\":\"iv-删改\"},\"2011\":{\"h\":\"1. renameTo\",\"a\":\"_1-renameto\"},\"2012\":{\"t\":\"文件重命名（移动）。\"},\"2013\":{\"t\":\"这里的文件名是完整的文件名，完整的文件名是带路径的，因此重命名也可以做移动文件（文件名不改，路径改了）。\"},\"2014\":{\"t\":\"方法参数是一个包含文件路径属性的File对象。\"},\"2015\":{\"t\":\"boolean renameTo(File dest); File f1= new File(\\\"File/b.txt\\\"); File f2 = new File(\\\"File/c/newB.txt\\\"); boolean res = f1.renameTo(f2); System.out.println(res);//true System.out.println(f1);//File\\\\b.txt，f1的硬盘文件已经不存在了 System.out.println(f2);//File\\\\c\\\\newB.txt，f1的硬盘文件跑这里了 \"},\"2016\":{\"h\":\"1.1 重命名（移动）的条件\",\"a\":\"_1-1-重命名-移动-的条件\"},\"2017\":{\"t\":\"如上：需要保证被移动的文件在硬盘中是存在的，且目标位置不能在硬盘中存在。\"},\"2018\":{\"h\":\"1.2 移动后的文件\",\"a\":\"_1-2-移动后的文件\"},\"2019\":{\"t\":\"f1移动到f2后，f1和f2的对象都还在，只是此时，f1在硬盘上不存在了，到了f2的位置。 即：我们操作f2时，操作的是原来的f1，f1变成了一个硬盘上不存在的文件。\"},\"2020\":{\"h\":\"2. delete\",\"a\":\"_2-delete\"},\"2021\":{\"t\":\"删除广义文件（包含目录）；不会进回收站；文件不存在会返回false。 如果要删除目录，只能删除空的目录，即：不能递归删除（安全考虑，可以自己写递归）。\"},\"2022\":{\"t\":\"boolean delete(); File f1 = new File(\\\"files/img/avatar\\\"); File f2 = new File(\\\"files/img/avatars\\\"); File f3 = new File(\\\"files\\\"); boolean result = f1.delete(); System.out.println(result);//true boolean result2 = f2.delete(); System.out.println(result2); //false:删除的文件不存在 boolean result3 = f3.delete(); System.out.println(result3); //false:不能递归删除 \"},\"2023\":{\"h\":\"1-7. IO 类\"},\"2024\":{\"h\":\"Ⅰ. InputStream & Reader\",\"a\":\"i-inputstream-reader\"},\"2025\":{\"t\":\"位置\"},\"2026\":{\"t\":\"rt.jar>java>io>InputStream.java 【abstract】\"},\"2027\":{\"t\":\"rt.jar>java>io>Reader.java 【abstract】\"},\"2028\":{\"t\":\"InputStream和Reader都是输入流，一个是读取字节的一个是读取字符的。\"},\"2029\":{\"t\":\"他们的方法基本都是一样的。\"},\"2030\":{\"t\":\"结构\"},\"2031\":{\"t\":\"//1.InputStream public abstract class InputStream implements Closeable{ ...... } //2.Reader public abstract class Reader implements Readable,Closeable{ ... } \"},\"2032\":{\"t\":\"构造器\"},\"2033\":{\"t\":\"两个都是抽象类无法直接实现。\"},\"2034\":{\"t\":\"下面例子均采用典型实现：FileInputStream和FileReader.\"},\"2035\":{\"t\":\"注意：读取文件需处理异常：FileNotFoundException\"},\"2036\":{\"t\":\"File f1 = new File(\\\"File/a.txt\\\"); FileInputStream fs = new FileInputStream(f1); FileInputStream fs = new FileInputStream(\\\"File/a.txt\\\");//方式二 File f2 = new File(\\\"File/k.jpg\\\"); FileReader fr = new FileReader(f2); FileReader fr = new FileReader(\\\"File/k.jpg\\\"); //方式二 \"},\"2037\":{\"h\":\"1. read 无参\",\"a\":\"_1-read-无参\"},\"2038\":{\"t\":\"读取一个字节（字节流）或一个字符（字符流）\"},\"2039\":{\"t\":\"InputStream：从输入流中读取数据的下一个字节。返回 0 到 255 范围内的 int 字节值。如果因 为已经到达流末尾而没有可用的字节，则返回值 -1\"},\"2040\":{\"t\":\"Reader：读取单个字符。作为整数读取的字符，范围在 0 到 65535 之间 (0x00-0xffff)（2个字节的Unicode码），如果已到达流的末尾，则返回 -1\"},\"2041\":{\"t\":\"该方法会抛出java.io.IOException异常\"},\"2042\":{\"t\":\"int read(); FileInputStream steam = new FileInputStream(\\\"File/a.txt\\\"); FileReader reader = new FileReader(\\\"File/k.jpg\\\"); //读取一次 int steamRes = steam.read(); System.out.println(steamRes);//255,一个字节的二进制数据 char readerRes = (char)reader.read();//将字符的Unicode值转为字符 System.out.println(readerRes);//A,读到了字符A，转换成了65 //循环读取:以FileReader为例 int readData = reader.read(); while(readData != -1){ System.out.println((char)readData); readData = reader.read(); } \"},\"2043\":{\"h\":\"2. read 一参\",\"a\":\"_2-read-一参\"},\"2044\":{\"t\":\"一次读取多个字节/字符到数组中。\"},\"2045\":{\"t\":\"InputSteam： int read(byte[] b)，从此输入流中将最多 b.length 个字节的数据读入一个 byte 数组中，如果因为已经到达流末尾而没有可用的字节，则返回值 -1。否则以整数形式返回实际读取的字节数\"},\"2046\":{\"t\":\"Reader： int read(char[] cbuf)，将字符读入数组。如果已到达流的末尾，则返回 -1。否则返回本次实际读取的字符数\"},\"2047\":{\"t\":\"该方法会抛出java.io.IOException异常\"},\"2048\":{\"t\":\"int read(byte[] b); int read(char[] cbuf); FileInputStream steam = new FileInputStream(\\\"File/a.txt\\\"); FileReader reader = new FileReader(\\\"File/k.jpg\\\"); //以FileReader读取字符为例 //读取一次 char[] cbuf = new char[3];//设置每次读取的长度 int len = reader.read(cbuf);//读取一次，返回值是字符数 System.out.println(len);//3 System.out.println(Arrays.toString(cbuf));//[A, , s],打印读取的字符数组 //循环读取 char[] cbuf = new char[5];//设置每次读取的长度 int len = reader.read(cbuf);//读取一次，返回值是字符数 while(len != -1){ for(int i = 0;i<len;i++){ System.out.println(cbuf[i]); } len = reader.read(cbuf); } \"},\"2049\":{\"h\":\"2.1 char[]参数\",\"a\":\"_2-1-char-参数\"},\"2050\":{\"t\":\"可以当做读取数据的载体，没有他的时候，我们一次只能读1个字符，现在我们可以先将多个字符放入该数组中，然后一次读取多个字符。\"},\"2051\":{\"h\":\"2.2 byte[]参数\",\"a\":\"_2-2-byte-参数\"},\"2052\":{\"t\":\"同上，只是char[] 变成了 byte[]，读取的单位从字符变成了字节。\"},\"2053\":{\"h\":\"2.3 一个误区\",\"a\":\"_2-3-一个误区\"},\"2054\":{\"t\":\"char[] cbuf = new char[5];\"},\"2055\":{\"t\":\"char数组每次装 5个字符，下一次装载字符时，并非是空数组过去的，而是5个字符还在，装载时进行新旧字符的替换。当字符取模5有余数时，最后一趟是装不满的，也就是会有字符没有被替换，这时如果将数组中的字符全部取下来，就会取到错误的字符。\"},\"2056\":{\"h\":\"3. read 三参\",\"a\":\"_3-read-三参\"},\"2057\":{\"t\":\"该方法额外多了两个参数：off和len，即将字符读入数组时，从off处开始读，最多读len个字符(或字节），如果已到达流的末尾，则返回 -1。否则返回本次读取的字符数。\"},\"2058\":{\"t\":\"不是很常用。\"},\"2059\":{\"t\":\"int read(byte[] b, int off,int len); int read(char[] cbuf,int off,int len); \"},\"2060\":{\"h\":\"4. close\",\"a\":\"_4-close\"},\"2061\":{\"t\":\"关闭流，该方法也需要处理异常：java.io.IOException，且close操作要方法其他异常的finally中。 所有打开的流资源，都必须手动调用close方法进行关闭。\"},\"2062\":{\"t\":\"public void close() throws IOException; FileInputStream steam = new FileInputStream(\\\"File/a.txt\\\"); FileReader reader = new FileReader(\\\"File/k.jpg\\\"); stream.close(); reader.close(); \"},\"2063\":{\"h\":\"Ⅱ. OutputStream & Write\",\"a\":\"ii-outputstream-write\"},\"2064\":{\"t\":\"位置\"},\"2065\":{\"t\":\"rt.jar>java>io>Writer.java 【abstract】\"},\"2066\":{\"t\":\"rt.jar>java>io>OutputStreamr.java 【abstract】\"},\"2067\":{\"t\":\"OutputStream和Write都是输出流，一个是往外写字节的，一个是往外写字符的。\"},\"2068\":{\"t\":\"他们的方法基本都是一样的。\"},\"2069\":{\"t\":\"结构\"},\"2070\":{\"t\":\"public class FileWriter extends OutputStreamWriter{} Public abstract class OutputStream implements Closeable, Flushable {} \"},\"2071\":{\"t\":\"使用步骤\"},\"2072\":{\"t\":\"实例化：new构造器\"},\"2073\":{\"t\":\"写出：调用write()\"},\"2074\":{\"t\":\"刷新：flush，将写的内容刷入文件\"},\"2075\":{\"t\":\"关闭：close，关闭流\"},\"2076\":{\"h\":\"1. 实例化\",\"a\":\"_1-实例化\"},\"2077\":{\"t\":\"OutputStream和Write都是抽象类，无法直接实例化。 他们的常用实现类是：FileWriter和FileOutputStream。他们的方法基本是一样的。\"},\"2078\":{\"t\":\"实例化的文件不存在：自动创建，前提是有权限\"},\"2079\":{\"t\":\"实例化的文件已经存在：覆盖或追加写，由参数决定\"},\"2080\":{\"t\":\"异常：会抛出IOException异常\"},\"2081\":{\"h\":\"1.1 FileWriter 实例化\",\"a\":\"_1-1-filewriter-实例化\"},\"2082\":{\"t\":\"file：文件对象，数据会写到这个文件对象里。\"},\"2083\":{\"t\":\"fileName：文件名，直接使用文件名,构造器内部自动new File(文件名) \"},\"2084\":{\"t\":\"数据直接写入指定的文件名创建的文件中，\"},\"2085\":{\"t\":\"append参数：true=追加写；false=覆盖写(默认)\"},\"2086\":{\"t\":\"异常：会产生FileNotFoundException异常\"},\"2087\":{\"t\":\"FileWriter(File file);//写入指定文件,覆盖写 FileWriter(File file, boolean append);//写入指定文件,自定义写入方式 FileWriter(String fileName);//写入指定文件名,覆盖写 FileWriter(String fileName, boolean append);//写入指定文件名,自定义写入方式 FileWriter(FileDescriptor fd);//略 FileWriter fileWriter = new FileWriter(\\\"File/a.txt\\\",true); fileWriter.write(\\\"Batman\\\"); \"},\"2088\":{\"h\":\"1.2 FileOutStream 实例化\",\"a\":\"_1-2-fileoutstream-实例化\"},\"2089\":{\"t\":\"会产生IOException异常，参数同FileWriter。\"},\"2090\":{\"t\":\"FileOutputStream(File file);//写入指定文件,覆盖写 FileOutputStream(File file, boolean append);//写入指定文件,自定义写入方式 FileOutputStream(String name);//写入指定文件名,覆盖写 FileOutputStream(String name, boolean append);//写入指定文件名,自定义写入方式 FileOutputStream(FileDescriptor fdObj);//略 FileOutputStream fos = new FileOutputStream(\\\"File/k.jpg\\\"); fileWriter.write(11); \"},\"2091\":{\"h\":\"2. write 字符\",\"a\":\"_2-write-字符\"},\"2092\":{\"t\":\"将字符写入指定的文件。\"},\"2093\":{\"t\":\"参数 int c：写入0 到 65535 之间的Unicode码\"},\"2094\":{\"t\":\"参数 cbuf：写入字符数组\"},\"2095\":{\"t\":\"参数 str：写入：字符串\"},\"2096\":{\"t\":\"参数 int off & int len：写入cbuf或str的某一部分。从off开始，写入len个字符\"},\"2097\":{\"t\":\"异常：会产生，IOException异常\"},\"2098\":{\"t\":\"void write(int c)//写入Unicode void write(char[] cbuf)//写入char[] void write(char[] cbuf,int off,int len)//写入char[]的一部分 void write(String str);//写入String void write(String str,int off,int len)//写入String的一部分 FileWriter fileWriter = new FileWriter(\\\"File/a.txt\\\",false);//覆盖写 fileWriter.write(97);//写入Unicode 97->a,a.txt中出现a char[] cbuf = {'a','b','c','d'}; fileWriter.write(cbuf);//写入char[]数组,a.txt中出现了abcd fileWriter.write(\\\"Batman\\\");//写入字符串,a.txt中出现了Batman \"},\"2099\":{\"t\":\"空格与换行符 如果是追加写，每次写入的字符都是无空格连在一起的，在同一行。如果要进行换行和输入空格，就需要手动输入空格或换行符\\\\n。\"},\"2100\":{\"h\":\"3. write 字节流\",\"a\":\"_3-write-字节流\"},\"2101\":{\"t\":\"向一张图片上写入字符，图片就打不开了。\"},\"2102\":{\"t\":\"int b：写入字节，0~255\"},\"2103\":{\"t\":\"byte[] b：将 b.length 个字节从指定的 byte 数组写入此输出流。write(b) 的常规协定是：应该与调用 write(b, 0, b.length) 的效果完全相同\"},\"2104\":{\"t\":\"int off & int len：将指定 byte 数组中从偏移量 off 开始的 len 个字节写入此输出流\"},\"2105\":{\"t\":\"void write(int b);//写入0~255字节数据 void write(byte[] b);//写入byte[] void write(byte[] b,int off,int len)//写入byte[]的一部分 FileOutputStream fos= new FileOutputStream(\\\"File/b\\\"); fos.write(1); byte[] b = {1,2,3,4,5}; fos.write(b); \"},\"2106\":{\"t\":\"向一张图片上写入字符，图片就打不开了。\"},\"2107\":{\"h\":\"4. flush\",\"a\":\"_4-flush\"},\"2108\":{\"t\":\"刷新该流的缓冲，则立即将它们写入预期目标。 该方法若不调用，可能会导致写入失败。\"},\"2109\":{\"t\":\"void flush(); FileWriter fileWriter = new FileWriter(\\\"File/a\\\",false); FileOutputStream fos= new FileOutputStream(\\\"File/b\\\"); .... FileWriter.flush(); fos.flush(); \"},\"2110\":{\"h\":\"5. close\",\"a\":\"_5-close\"},\"2111\":{\"t\":\"关闭此输出流并释放与该流关联的所有系统资源。\"},\"2112\":{\"t\":\"如果有try...catch语句，close方法一定要放到finally语句里，以保证资源肯定能被关闭。\"},\"2113\":{\"t\":\"注意：该方法本身也会抛出异常，也需要进行处理。\"},\"2114\":{\"t\":\"void close()throws IOException; FileWriter fw = null; try { fw = new FileWriter(\\\"File/a\\\", false); fw.write(\\\"I'm Batman\\\"); fw.flush(); } catch (IOException e) { e.printStackTrace(); } finally { try { if(fw !=null) fw.close(); } catch (IOException e) { e.printStackTrace(); } } \"},\"2115\":{\"h\":\"Ⅲ. 其他流的方法\",\"a\":\"iii-其他流的方法\"},\"2116\":{\"h\":\"1. readLine\",\"a\":\"_1-readline\"},\"2117\":{\"t\":\"使用缓冲流：BufferedReader，读取一行。\"},\"2118\":{\"t\":\"该方法是读取一行数据（根据换行符来判定），并返回读到的数据，该方法是阻塞的，如果在接收的数据中不含有'\\\\n','\\\\r'或者结束符时，往往导致进程挂起，从而程序无法继续。\"},\"2119\":{\"t\":\"如果读到文件的末尾就返回null。\"},\"2120\":{\"t\":\"在IO模式下，该方法是一直等待输入的，直到遇到换行符，才会结束执行。\"},\"2121\":{\"t\":\"String readLine() throws IOException; FileReader fr = new FileReader(\\\"files/a.txt\\\"); BufferedReader br = new BufferedReader(fr); data = br.readLine(); System.out.println(data); \"},\"2122\":{\"h\":\"2. newLine\",\"a\":\"_2-newline\"},\"2123\":{\"t\":\"使用缓冲流BufferedWrite，输入换行符。\"},\"2124\":{\"t\":\"在写出文件时，有时需要写出换行符，该方法就可以写出换行符，等价于 \\\"\\\\n\\\"\"},\"2125\":{\"h\":\"1-8. 反射类\"},\"2126\":{\"h\":\"Ⅰ. Class - 类相关\",\"a\":\"i-class-类相关\"},\"2127\":{\"t\":\"提示\"},\"2128\":{\"t\":\"位置：rt.jar>java>lang>Class.java 【class】\"},\"2129\":{\"t\":\"public final class Class<T> implements java.io.Serializable,GenericDeclaration,Type,AnnotatedElement{ ... } \"},\"2130\":{\"h\":\"1. 实例化\",\"a\":\"_1-实例化\"},\"2131\":{\"t\":\"共有四种获取Class类的实例的方式。\"},\"2132\":{\"h\":\"1.1 类的class属性\",\"a\":\"_1-1-类的class属性\"},\"2133\":{\"t\":\"若已知具体的类，通过类的class属性获取，该方法最为安全可靠，程序性能最高。\"},\"2134\":{\"t\":\"Class<Person> clazz = Person.class; System.out.println(clazz); //class Basic.Person \"},\"2135\":{\"h\":\"1.2 对象的getClass方法\",\"a\":\"_1-2-对象的getclass方法\"},\"2136\":{\"t\":\"已知某个类的实例，调用该实例的getClass()方法获取Class对象。\"},\"2137\":{\"t\":\"Person person = new Person(); Class<? extends Person> clazz = person.getClass(); System.out.println(clazz); //class Basic.Person \"},\"2138\":{\"h\":\"1.3 Class.forName\",\"a\":\"_1-3-class-forname\"},\"2139\":{\"t\":\"已知一个类的全类名（包+类名），且该类在类路径下，可通过Class类的静态方法forName()获取。\"},\"2140\":{\"t\":\"可能抛出 ClassNotFoundException 异常\"},\"2141\":{\"t\":\"Class<?> clazz = Class.forName(\\\"Basic.Person\\\"); System.out.println(clazz); //class Basic.Person \"},\"2142\":{\"h\":\"1.4 类加载器\",\"a\":\"_1-4-类加载器\"},\"2143\":{\"t\":\"使用类的加载器：ClassLoader。\"},\"2144\":{\"t\":\"ClassLoader cl = this.getClass().getClassLoader(); //获取当前对象的类加载器 Class<?> clazz = cl.loadClass(\\\"Basic.Person\\\");//根据类加载器加载目标类 System.out.println(clazz); //class Basic.Person,得到了目标类的Class实例 \"},\"2145\":{\"h\":\"2. forName\",\"a\":\"_2-forname\"},\"2146\":{\"t\":\"返回指定类名 name 的 Class 对象，类名为全类名。\"},\"2147\":{\"t\":\"static Class<?> forName(String className)throws ClassNotFoundException Class<?> clazz = Class.forName(\\\"Basic.Person\\\"); System.out.println(clazz); //class Basic.Person \"},\"2148\":{\"h\":\"3. newInstance\",\"a\":\"_3-newinstance\"},\"2149\":{\"t\":\"使用当前运行时类，通过反射创建该类的对象。默认调用空参构造器。\"},\"2150\":{\"t\":\"T newInstance() throws InstantiationException, IllegalAccessException Class<Person> clazz = Person.class;//获取Person类的Class对象 Person person = clazz.newInstance(); \"},\"2151\":{\"h\":\"4. getName\",\"a\":\"_4-getname\"},\"2152\":{\"t\":\"返回此当前运行时类所表示的实体（类、接口、数组类、基本类型或void）名称。\"},\"2153\":{\"t\":\"String getName() Class<Person> clazz = Person.class; String name = clazz.getName(); System.out.println(name);//Basic.Person \"},\"2154\":{\"h\":\"5. getSuperclass\",\"a\":\"_5-getsuperclass\"},\"2155\":{\"t\":\"返回当前运行时类的父类的Class对象，Object是所有类的父类。\"},\"2156\":{\"t\":\"Class<? super T> getSuperclass(); Class<Person> clazz = Person.class; Class<? super Person> superclass = clazz.getSuperclass(); System.out.println(superclass);//class java.lang.Object \"},\"2157\":{\"h\":\"6. getGenericSuperclass\",\"a\":\"_6-getgenericsuperclass\"},\"2158\":{\"t\":\"获取运行时类的父类的泛型。\"},\"2159\":{\"t\":\"Type getGenericSuperclass(); Type genericSuperclass = clazz.getGenericSuperclass(); System.out.println(genericSuperclass); \"},\"2160\":{\"h\":\"7. getInterfaces\",\"a\":\"_7-getinterfaces\"},\"2161\":{\"t\":\"获取当前运行时类实现的所有接口。\"},\"2162\":{\"t\":\"Class<?>[] getInterfaces() Class<Person> clazz = Person.class; Class<?>[] interfaces = clazz.getInterfaces(); System.out.println(Arrays.toString(interfaces)); //[interface java.io.Serializable, interface java.lang.Comparable] \"},\"2163\":{\"h\":\"8. getClassLoader\",\"a\":\"_8-getclassloader\"},\"2164\":{\"t\":\"通过当前运行时类，返回该类的类加载器。\"},\"2165\":{\"t\":\"ClassLoader getClassLoader() Class<Person> clazz = Person.class; ClassLoader classLoader = clazz.getClassLoader(); System.out.println(classLoader);//sun.misc.Launcher$AppClassLoader@18b4aac2 \"},\"2166\":{\"h\":\"9. getParent\",\"a\":\"_9-getparent\"},\"2167\":{\"t\":\"ClassLoader.getParent，获取加载器的父类。\"},\"2168\":{\"t\":\"ClassLoader getParent(); Class<Person> clazz = Person.class; ClassLoader parent = clazz.getClassLoader().getParent(); System.out.println(parent);//sun.misc.Launcher$ExtClassLoader@677327b6 \"},\"2169\":{\"h\":\"10. getPackage\",\"a\":\"_10-getpackage\"},\"2170\":{\"t\":\"获取运行时类所在的包。\"},\"2171\":{\"t\":\"Package getPackage() Package pack = clazz.getPackage(); System.out.println(pack);//package Basic \"},\"2172\":{\"h\":\"Ⅱ. Class - 构造器相关\",\"a\":\"ii-class-构造器相关\"},\"2173\":{\"h\":\"1. getConstructors\",\"a\":\"_1-getconstructors\"},\"2174\":{\"t\":\"获取当前运行时类的构造器对象组成的数组，注意：不包含private构造器。\"},\"2175\":{\"t\":\"Constructor<?>[] getConstructors() throws SecurityException Class<Person> clazz = Person.class; Constructor<?>[] constructors = clazz.getConstructors(); System.out.println(Arrays.toString(constructors)); //[public Basic.Person(), public Basic.Person(java.lang.String)] \"},\"2176\":{\"h\":\"2. getDeclaredConstructors\",\"a\":\"_2-getdeclaredconstructors\"},\"2177\":{\"t\":\"获取当前运行时类中声明的所有的构造器。\"},\"2178\":{\"t\":\"Constructor<?>[] getDeclaredConstructors() throws SecurityException Class<Person> clazz = Person.class; Constructor<?>[] cons = clazz.getDeclaredConstructors(); System.out.println(Arrays.toString(cons)); \"},\"2179\":{\"h\":\"3. getDeclaredConstructor\",\"a\":\"_3-getdeclaredconstructor\"},\"2180\":{\"t\":\"取得本类的指定形参类型的构造器； 参数：就是构造器参数所属的Class。\"},\"2181\":{\"t\":\"Constructor<T> getDeclaredConstructor(Class<?>... parameterTypes) throws NoSuchMethodException, SecurityException Class<Person> clazz = Person.class; Person p1 = clazz.newInstance();//调用无参构造器，创建Person对象 //调用有参构造器，该构造器接受一个String类谢谢的参数：String.class Constructor cons = clazz.getDeclaredConstructor(String.class); Person jin = (Person)cons.newInstance(\\\"jin\\\"); \"},\"2182\":{\"h\":\"Ⅲ. Class - 属性方法相关\",\"a\":\"iii-class-属性方法相关\"},\"2183\":{\"h\":\"1. getFields\",\"a\":\"_1-getfields\"},\"2184\":{\"t\":\"获取当前运行时类及其父类中声明为public访问权限的属性。 返回值类型是：Field类数组。\"},\"2185\":{\"t\":\"Field[] getFields() throws SecurityException Class<Person> clazz = Person.class; Field[] fields = clazz.getFields(); System.out.println(Arrays.toString(fields)); \"},\"2186\":{\"h\":\"2. getDeclareFields\",\"a\":\"_2-getdeclarefields\"},\"2187\":{\"t\":\"获取当前运行时类中声明的所有属性（不包含父类中声明的属性）。 返回值类型是：Field类数组。\"},\"2188\":{\"t\":\"Field[] getDeclaredFields() throws SecurityException Class<Person> clazz = Person.class; Field[] fields = clazz.getDeclaredFields(); System.out.println(Arrays.toString(fields)); \"},\"2189\":{\"h\":\"3. getField\",\"a\":\"_3-getfield\"},\"2190\":{\"t\":\"获取指定的属性对象，不包括私有属性。 参数：参数就是String类型的属性名。\"},\"2191\":{\"t\":\"Field getField(String name)throws NoSuchFieldException, SecurityException Class<Person> clazz = Person.class; Field age = clazz.getField(\\\"name\\\"); System.out.println(age); \"},\"2192\":{\"h\":\"4. getDeclaredField\",\"a\":\"_4-getdeclaredfield\"},\"2193\":{\"t\":\"获取指定的属性对象，包括私有属性。 参数：参数就是String类型的属性名。\"},\"2194\":{\"t\":\"Field getDeclaredField(String name)throws NoSuchFieldException, SecurityException Field age = clazz.getDeclaredField(\\\"age\\\"); System.out.println(age); \"},\"2195\":{\"h\":\"5. getMethods\",\"a\":\"_5-getmethods\"},\"2196\":{\"t\":\"获取当前运行时类及其所有父类中声明为public权限的方法 返回值：Method类数组\"},\"2197\":{\"t\":\"Method[] getMethods() throws SecurityException Class<Person> clazz = Person.class; Method[] methods = clazz.getMethods(); System.out.println(Arrays.toString(methods)); \"},\"2198\":{\"h\":\"6. getDeclaredMethods\",\"a\":\"_6-getdeclaredmethods\"},\"2199\":{\"t\":\"获取当前运行时类中声明的所有权限的方法（不包含父类中声明的方法）。 返回值：Method类数组\"},\"2200\":{\"t\":\"Method[] getDeclaredMethods() throws SecurityException Class<Person> clazz = Person.class; Method[] methods = clazz.getDeclaredMethods(); System.out.println(Arrays.toString(methods)); \"},\"2201\":{\"h\":\"7. getMethod\",\"a\":\"_7-getmethod\"},\"2202\":{\"t\":\"获取当前运行时类中的某一个方法的Method对象。\"},\"2203\":{\"t\":\"参数就是String类型的方法名，以及参数类型列表。 只能获取public修饰的方法，一般用getDeclaredMethod。\"},\"2204\":{\"t\":\"Method getMethod(String name, Class<?>... parameterTypes) throws NoSuchMethodException, SecurityException; Class<Person> clazz = Person.class; Method method = clazz.getMethod(\\\"say\\\",String.class); System.out.println(method); \"},\"2205\":{\"h\":\"8.getDeclaredMethod\",\"a\":\"_8-getdeclaredmethod\"},\"2206\":{\"t\":\"获取当前运行时类中的某一个方法的Method对象。可以获取任何修饰符修饰的方法。\"},\"2207\":{\"t\":\"参数1 name：指明获取的方法的名\"},\"2208\":{\"t\":\"参数2+：指明获取的方法的形参列表(参数类型)， \"},\"2209\":{\"t\":\"注意：获取的是参数数据类型的Class对象\"},\"2210\":{\"t\":\"有几个参数就写几个\"},\"2211\":{\"t\":\"Method getDeclaredMethod(String name, Class<?>... parameterTypes) throws NoSuchMethodException, SecurityException Class<Person> clazz = Person.class; Method say = clazz.getDeclaredMethod(\\\"say\\\", String.class, int.class); System.out.println(say);//public void Basic.Person.say(java.lang.String,int) \"},\"2212\":{\"h\":\"Ⅳ. Field\",\"a\":\"iv-field\"},\"2213\":{\"t\":\"位置\"},\"2214\":{\"t\":\"rt.jar.>java>lang>reflect>Field.java 【class】\"},\"2215\":{\"t\":\"一个Field对象，就代表了一个运行时类的属性。\"},\"2216\":{\"t\":\"结构\"},\"2217\":{\"t\":\"class Field extends AccessibleObject implements Member {} \"},\"2218\":{\"t\":\"实例化 通过Class类进行实例化，见上。\"},\"2219\":{\"h\":\"1. getModifier\",\"a\":\"_1-getmodifier\"},\"2220\":{\"t\":\"获取当前属性的权限修饰符。 返回值是0~3的int数字：\"},\"2221\":{\"t\":\"0：默认类型\"},\"2222\":{\"t\":\"1：public\"},\"2223\":{\"t\":\"2：private\"},\"2224\":{\"t\":\"3：protected\"},\"2225\":{\"t\":\"int getModifiers() int modifiers = field.getModifiers(); System.out.println(modifiers);//2 \"},\"2226\":{\"h\":\"2. getType\",\"a\":\"_2-gettype\"},\"2227\":{\"t\":\"获取属性的数据类型，如果是引用类型，会返回完整的类名。\"},\"2228\":{\"t\":\"Class<?> getType() Class<?> type = field.getType(); System.out.println(type);//int \"},\"2229\":{\"h\":\"3. getName\",\"a\":\"_3-getname\"},\"2230\":{\"t\":\"获取字符串形式的属性名。\"},\"2231\":{\"t\":\"String getName() String name = field.getName(); System.out.println(name);//age \"},\"2232\":{\"h\":\"4. get\",\"a\":\"_4-get\"},\"2233\":{\"t\":\"通过Field对象，获取属性值。\"},\"2234\":{\"t\":\"参数： \"},\"2235\":{\"t\":\"参数1：要获取哪个对象的属性（需要先创建对象）\"},\"2236\":{\"t\":\"参数2：要设置的属性的值\"},\"2237\":{\"t\":\"返回值：Object类型，可以根据需要转型\"},\"2238\":{\"t\":\"Private：无法直接操作private属性，需要先调用setAccessible\"},\"2239\":{\"t\":\"Object get(Object obj) Class<Person> clazz = Person.class; Person person = clazz.newInstance(); Field age = clazz.getDeclaredField(\\\"age\\\"); age.setAccessible(true); int o = (int)age.get(person); System.out.println(o); \"},\"2240\":{\"h\":\"5. set\",\"a\":\"_5-set\"},\"2241\":{\"t\":\"通过Field对象，设置属性的值。\"},\"2242\":{\"t\":\"参数：要设置哪个对象的属性（需要先创建对象）\"},\"2243\":{\"t\":\"Private：无法直接操作private属性，需要先调用setAccessible\"},\"2244\":{\"t\":\"void set(Object obj, Object value) throws IllegalArgumentException, IllegalAccessException Class<Person> clazz = Person.class; Person person = clazz.newInstance(); Field age = clazz.getDeclaredField(\\\"age\\\"); age.setAccessible(true); age.set(person,30); System.out.println(age.get(person));//30 \"},\"2245\":{\"h\":\"6. setAccessible\",\"a\":\"_6-setaccessible\"},\"2246\":{\"t\":\"保证当前属性是可访问的，包括private类型的。\"},\"2247\":{\"t\":\"void setAccessible(boolean flag) throws SecurityException //见上 \"},\"2248\":{\"h\":\"Ⅴ. Method\",\"a\":\"v-method\"},\"2249\":{\"t\":\"位置\"},\"2250\":{\"t\":\"rt.jar>java>lang>reflect>Method.java 【class】\"},\"2251\":{\"t\":\"结构\"},\"2252\":{\"t\":\"public final class Method extends Executable {} \"},\"2253\":{\"t\":\"实例化 通过Class进行实例化；见上。\"},\"2254\":{\"h\":\"1. getAnnotations\",\"a\":\"_1-getannotations\"},\"2255\":{\"t\":\"获取方法的注解\"},\"2256\":{\"t\":\"Annotation[] getAnnotations() Class<Person> clazz = Person.class; Method method = clazz.getMethod(\\\"say\\\",String.class); Annotation[] anno = method.getAnnotations(); System.out.println(Arrays.toString(anno)); //[@org.junit.Test(timeout=0, expected=class org.junit.Test$None)] \"},\"2257\":{\"h\":\"2.getModifiers\",\"a\":\"_2-getmodifiers\"},\"2258\":{\"t\":\"获取权限修饰符，返回值是0~3的int数字\"},\"2259\":{\"t\":\"0：默认类型\"},\"2260\":{\"t\":\"1：public\"},\"2261\":{\"t\":\"2：private\"},\"2262\":{\"t\":\"3：protected\"},\"2263\":{\"t\":\"int getModifiers() int modifier = method.getModifiers(); System.out.println(modifier);//1 \"},\"2264\":{\"h\":\"3. getReturnType\",\"a\":\"_3-getreturntype\"},\"2265\":{\"t\":\"获取返回值类型,如果是引用类型，会返回完整的类名。\"},\"2266\":{\"t\":\"Class<?> getReturnType() Class<?> returnType = method.getReturnType(); System.out.println(returnType);//void \"},\"2267\":{\"h\":\"4. getName\",\"a\":\"_4-getname-1\"},\"2268\":{\"t\":\"获取字符串形式的方法名。\"},\"2269\":{\"t\":\"String getName() String name = method.getName(); System.out.println(name);//say \"},\"2270\":{\"h\":\"5. getParameterTypes\",\"a\":\"_5-getparametertypes\"},\"2271\":{\"t\":\"获取形参列表，返回的只有形参的类型。\"},\"2272\":{\"t\":\"Class<?>[] getParameterTypes() Class<?>[] params = method.getParameterTypes(); System.out.println(Arrays.toString(params));//[class java.lang.String] String name = params[0].getName(); System.out.println(name);//String:获取字符串类型的形参 \"},\"2273\":{\"h\":\"6. getExceptionTypes\",\"a\":\"_6-getexceptiontypes\"},\"2274\":{\"t\":\"获取抛出的异常，可能是多个异常，返回的是数组。\"},\"2275\":{\"t\":\"Class<?>[] getExceptionTypes() Class<?>[] exception = method.getExceptionTypes(); System.out.println(Arrays.toString(exception));//[] \"},\"2276\":{\"h\":\"7.invoke\",\"a\":\"_7-invoke\"},\"2277\":{\"t\":\"调用方法对象（Method）的invoke方法来执行获得的方法\"},\"2278\":{\"t\":\"参数1：方法的调用者\"},\"2279\":{\"t\":\"参数2：给方法形参赋值的实参\"},\"2280\":{\"t\":\"返回值：对应类中调用的方法的返回值，没有返回值就返回null。\"},\"2281\":{\"t\":\"静态方法：如果是静态方法调用invoke，那么调用者是类或者null也可以。\"},\"2282\":{\"t\":\"Object invoke(Object obj, Object... args) throws IllegalAccessException, IllegalArgumentException,InvocationTargetException Class<Person> clazz = Person.class; Person person = clazz.newInstance(); Method say = clazz.getDeclaredMethod(\\\"say\\\", String.class, int.class); System.out.println(say); say.invoke(person,\\\"a\\\", 1); \"},\"2283\":{\"h\":\"8. setAccessible\",\"a\":\"_8-setaccessible\"},\"2284\":{\"t\":\"保证当前方法是可访问的，包括private类型的。 同Field.setAccessible。\"},\"2285\":{\"h\":\"Ⅵ. Constructor\",\"a\":\"vi-constructor\"},\"2286\":{\"t\":\"构造方法\"},\"2287\":{\"t\":\"public final class Constructor<T> extends Executable {} \"},\"2288\":{\"t\":\"实例化 同Class对象进行获取Constructor对象。\"},\"2289\":{\"h\":\"1. newInstance\",\"a\":\"_1-newinstance\"},\"2290\":{\"t\":\"根据获取的构造器创建类的对象\"},\"2291\":{\"t\":\"T newInstance(Object ... initargs) throws InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException Class<Person> clazz = Person.class; Constructor<Person> cons = clazz.getDeclaredConstructor(int.class); cons.setAccessible(true); Person person = cons.newInstance(1); \"},\"2292\":{\"h\":\"2. setAccessible\",\"a\":\"_2-setaccessible\"},\"2293\":{\"t\":\"保证当前构造器是可访问的，包括private类型的。 同Field.setAccessible\"},\"2294\":{\"h\":\"1-9. 其他类\"},\"2295\":{\"h\":\"Ⅰ. System\",\"a\":\"i-system\"},\"2296\":{\"t\":\"位置\"},\"2297\":{\"t\":\"Library>java>lang>System.java 【class】\"},\"2298\":{\"t\":\"System类代表系统，系统级的很多属性和控制方法都放置在该类的内部。\"},\"2299\":{\"t\":\"由于该类的构造器是private的，所以无法创建该类的对象，也就是无法实例化该类。其内部的成员变量和成员方法都是static的，所以也可以很方便的进行调用。\"},\"2300\":{\"t\":\"结构\"},\"2301\":{\"t\":\"public final class System { private System(){} } \"},\"2302\":{\"h\":\"1. currentTimeMillion\",\"a\":\"_1-currenttimemillion\"},\"2303\":{\"t\":\"获取毫秒时间戳，单位 ms，可以用来计算时间差。\"},\"2304\":{\"t\":\"long currentTimeMillis(); long ms = System.currentTimeMillis(); System.out.println(ms); //1654740094502 \"},\"2305\":{\"h\":\"2. exit\",\"a\":\"_2-exit\"},\"2306\":{\"t\":\"该方法的作用是退出程序。其中status的值为0代表正常退出，非零代表异常退出。 使用该方法可以在图形界面编程中实现程序的退出功能等。\"},\"2307\":{\"t\":\"void exit(int status); \"},\"2308\":{\"h\":\"3. gc\",\"a\":\"_3-gc\"},\"2309\":{\"t\":\"垃圾回收，该方法的作用是请求系统进行垃圾回收。至于系统是否立刻回收，则取决于系统中垃圾回收算法的实现以及系统执行时的情况。\"},\"2310\":{\"t\":\"void gc(); \"},\"2311\":{\"h\":\"4. getProperty\",\"a\":\"_4-getproperty\"},\"2312\":{\"t\":\"获取系统信息，该方法的作用是获得系统中属性名对应的值。\"},\"2313\":{\"t\":\"系统中常见的属性名以及属性的作用如下表所示：\"},\"2314\":{\"t\":\"String getProperty(String key); ====================================================================== String javaVersion = System.getProperty(\\\"java.version\\\"); System.out.println(javaVersion); //1.8.0_321 String javaHome = System.getProperty(\\\"java.home\\\"); System.out.println(javaHome);//D:\\\\Java\\\\Soft\\\\JDK\\\\jdk1.8.0_321\\\\jre String osName = System.getProperty(\\\"os.name\\\"); System.out.println(osName);//Windows 10 String osVersion = System.getProperty(\\\"os.version\\\"); System.out.println(osVersion);//10.0 String userName = System.getProperty(\\\"user.name\\\"); System.out.println(userName);//A String userHome = System.getProperty(\\\"user.home\\\"); System.out.println(userHome);//C:\\\\Users\\\\A String userDir = System.getProperty(\\\"user.dir\\\"); System.out.println(userDir);//D:\\\\Java\\\\workplace\\\\Learn \"},\"2315\":{\"h\":\"2-1. Scanner\"},\"2316\":{\"t\":\"位置\"},\"2317\":{\"t\":\"rt.jar>java>util>Scanner.java 【class】\"},\"2318\":{\"t\":\"用来扫描输入文本的类。 Scanner类的用法很多，这里只介绍简单的命令行，方便进行一些测试。\"},\"2319\":{\"t\":\"结构\"},\"2320\":{\"t\":\"public final class Scanner implements Iterator<String>,Closeable{ .... } \"},\"2321\":{\"t\":\"使用 通过Scanner类来获取用户的输入。\"},\"2322\":{\"t\":\"通过 Scanner 类的 next() 与 nextLine() 方法获取输入的字符串，在读取前我们一般需要使用hasNext 与 hasNextLine 判断是否还有输入的数据。\"},\"2323\":{\"h\":\"1. new Scanner\",\"a\":\"_1-new-scanner\"},\"2324\":{\"t\":\"构建一个Scanner对象，他生产从指定输入流扫描的值。当参数为System.in：表示从键盘获取输入的内容。\"},\"2325\":{\"t\":\"Scanner(InputStream source);//这只是构造方法之一 Scanner scan = new Scanner(System.in); \"},\"2326\":{\"h\":\"2. next\",\"a\":\"_2-next\"},\"2327\":{\"t\":\"从此扫描仪查找并返回下一个完整令牌。\"},\"2328\":{\"t\":\"用户从键盘输入内容，按回车即输入完毕，输入完毕后，Scanner.next方法就获取输入的内容。\"},\"2329\":{\"t\":\"无参数：对即将获取的内容无限制。\"},\"2330\":{\"t\":\"有参数：参数可以是String类型的正则或者Pattern类，该参数将限制接下来要输入的数据格式，只有与正则匹配的内容才可以。\"},\"2331\":{\"t\":\"String next(); String next(String pattern); String next(Pattern pattern); Scanner scan = new Scanner(System.in); System.out.println(\\\"请输入姓名\\\"); String next = scan.next();//键盘输入：hello System.out.println(next);//hello \"},\"2332\":{\"t\":\"效果\"},\"2333\":{\"t\":\"执行代码；弹出命令行窗口，显示打印的字符：请输入姓名\"},\"2334\":{\"t\":\"可以在键盘输入字符，点击Enter键完成输入\"},\"2335\":{\"t\":\"输入完毕后，scan.next方法获取输入的字符串，并继续向下执行代码\"},\"2336\":{\"t\":\"代码执行完毕，命令行交互结束\"},\"2337\":{\"h\":\"3. nextXxx\",\"a\":\"_3-nextxxx\"},\"2338\":{\"t\":\"next方法，会将获取的索引内容都当做字符串处理。\"},\"2339\":{\"t\":\"也可以调用nextXxx方法（Xxx为基本数据类型），限制输入的字符类型。\"},\"2340\":{\"t\":\"对于Number类型的Xxx有一个可选参数 radix，radix指的是进制。 \"},\"2341\":{\"t\":\"radix取值为：2~36，即：最小是2进制，最大是36进制。\"},\"2342\":{\"t\":\"输入数据时如果输入的值超过了进制或者超过了数据类型的范围，或者与数据类型不符都会报错。\"},\"2343\":{\"t\":\"对于输入的非十进制数据，获取后的值依然是十进制。\"},\"2344\":{\"t\":\"注意：Scanner没有提供Char类型next方法\"},\"2345\":{\"t\":\"byte nextByte(int radix); boolean nextBoolean(); short nextShrot(int radix); int nextInt(int radix); long nextLong(int radix); float nextFloat(int radix); double nextDouble(int radix); BigInteger nextBigInter(int radix); BigDecimal nextBigDecimal(); Scanner scan = new Scanner(System.in); System.out.println(\\\"请输入\\\"); int next = scan.nextByte(2);//Byte类型的二进制数据 //键入：11111 System.out.println(next);//31,11111自动转为了十进制 \"},\"2346\":{\"h\":\"2-2. Arrays\"},\"2347\":{\"t\":\"提示\"},\"2348\":{\"t\":\"位置：Libraries>java.util Arrays.java 【class】\"},\"2349\":{\"t\":\"java.util.Arrays类即为操作数组的工具类，包含了用来操作数组（比如排序和搜索）的各种方法 该类为工具类，因此该类的方法都是 public static方法。\"},\"2350\":{\"t\":\"结构\"},\"2351\":{\"t\":\"public class Arrays { private static final int MIN_ARRAY_SOCRT_GRAN = 1 <<13; } \"},\"2352\":{\"h\":\"1. toString\",\"a\":\"_1-tostring\"},\"2353\":{\"t\":\"将数组转为字符串形式。 数组是引用类型，直接打印，打印的是内存地址，使用该方法可以将数组作为字符串打印。\"},\"2354\":{\"t\":\"String toString( Object [] a);//该方法对各种类型的参数进行了重构 int[] arr1 = {1,2,3}; System.out.println(arr1); //[I@677327b6 System.out.println(Arrays.toString(arr1));//[1, 2, 3] \"},\"2355\":{\"h\":\"2. sort\",\"a\":\"_2-sort\"},\"2356\":{\"t\":\"注意\"},\"2357\":{\"t\":\"排序并非是返回一个新数组，而是直接改变了源数组\"},\"2358\":{\"t\":\"对数组进行排序，该方法有好几个重构方法，针对不同的数据类型和排序方式。\"},\"2359\":{\"h\":\"2.1 sort(int[] a)\",\"a\":\"_2-1-sort-int-a\"},\"2360\":{\"t\":\"对int类型数组的值按数字大小的升序(默认)进行排序。\"},\"2361\":{\"t\":\"如下：formIndex为开始排序的下标，toIndex-1为终点下标，不指定就是排序整个数组。\"},\"2362\":{\"t\":\"void sort(int[] a, int fromIndex, int toIndex) int[] arr1 = {1,5,8,2,3}; Arrays.sort(arr1); System.out.println(Arrays.toString(arr1));//[1, 2, 3, 5, 8] \"},\"2363\":{\"h\":\"2.2 sort(T[] a, Comparator<? super T> c)\",\"a\":\"_2-2-sort-t-a-comparator-super-t-c\"},\"2364\":{\"t\":\"根据传入的Comparator接口子类，自定义排序规则。\"},\"2365\":{\"t\":\"sort(T[] a, Comparator<? super T> c) Integer[] arr1 = {1,5,8,2,3};//因为使用了泛型，这里要用Integer而非int //2.创建MyComparator类的对象 MyComparator mc = new MyComparator(); //3.将mc作为参数传入给sort方法 Arrays.sort(arr1,mc); System.out.println(Arrays.toString(arr1));//[8, 5, 3, 2, 1] //1.先定义一个实现Comparator接口的类:可以定义成内部类 static class MyComparator implements Comparator<Integer>{ @Override //重写比较大小的核心方法：int类型倒序 public int compare(Integer o1, Integer o2) { if(o1<o2){ return 1; }else if(o1>o2){ return -1; }else{ return 0; } } } \"},\"2366\":{\"h\":\"3. binarySearch\",\"a\":\"_3-binarysearch\"},\"2367\":{\"t\":\"在数组中查询指定元素，返回元素的索引，这里采用的是二分法。 根据参数数组的数据类型不同，该方法有很多重构方法。同时有一个包含Comparator的重构方法，自定义排序算法。\"},\"2368\":{\"t\":\"参数：formIndex参数指定开始排序的下标，toIndex指定结束排序的下标（不包含toIndex）\"},\"2369\":{\"t\":\"返回值：如果没找到就返回负数（不一定是-1），找到了就返回第一次出现的索引。\"},\"2370\":{\"t\":\"int binarySearch(int[] a, int fromIndex, int toIndex,int key) int[] arr1 = {1,5,8,8,2,3}; int k1 = Arrays.binarySearch(arr1, 8); int k2 = Arrays.binarySearch(arr1, 6); System.out.println(k1); //2 System.out.println(k2); //-3 \"},\"2371\":{\"h\":\"4. copyOf\",\"a\":\"_4-copyof\"},\"2372\":{\"t\":\"提示\"},\"2373\":{\"t\":\"注意：该复制是真的值复制，而非引用的复制\"},\"2374\":{\"t\":\"复制指定的数组，可以指定复制的长度。\"},\"2375\":{\"t\":\"T[] copyOf(T[] original, int newLength) int[] arr1 = {1,5,8,8,2,3}; int[] arr2 = Arrays.copyOf(arr1, arr1.length); System.out.println(arr1); //[I@677327b6 System.out.println(arr2); //[I@14ae5a5 两个内存地址是不一样的 System.out.println(Arrays.toString(arr1)); //[1, 5, 8, 8, 2, 3] System.out.println(Arrays.toString(arr2)); //[1, 5, 8, 8, 2, 3] 值一样 \"},\"2376\":{\"h\":\"5. equals\",\"a\":\"_5-equals\"},\"2377\":{\"t\":\"比较两个数组是否相等，Arrays类重写了Object类中的equals，当两个数组中所有元素都相等时，两个数组就相等。(该仿佛根据参数中的数组数据类型不通有多个重构方法)。\"},\"2378\":{\"t\":\"值相等也意味着值的数据类型必须相等。\"},\"2379\":{\"t\":\"boolean equals(int[] a, int[] a2) int[] arr1 = {1,5,8,8,2,3}; int[] arr2 = {1,5,8,8,2,3}; boolean res = Arrays.equals(arr1, arr2); System.out.println(res); //true \"},\"2380\":{\"h\":\"6. asList\",\"a\":\"_6-aslist\"},\"2381\":{\"t\":\"数组转换为List集合。\"},\"2382\":{\"t\":\"List<T> asList(T... a) String[] arr = {\\\"a\\\",\\\"b\\\",\\\"c\\\",\\\"d\\\"}; List<String> str = Arrays.asList(arr); str.add(\\\"ff\\\"); //这里会报异常 System.out.println(str); \"},\"2383\":{\"t\":\"注意\"},\"2384\":{\"t\":\"sList方法会返回一个ArrayList，但是该ArrayList只是Arrays的内部静态类的ArrayList，他跟真正的ArrayList集合是有差异的，Arrays$ArrayList和ArrayList都是继承AbstractList，AbstractList中的add、remove等操作都是默认抛出异常的，ArrayList中重写了这些方法，但是Arrays$ArrayList中并没有重写这些方法，因此在使用时会报异常：UnsupportedOperationException\"},\"2385\":{\"h\":\"7. fill\",\"a\":\"_7-fill\"},\"2386\":{\"t\":\"将指定值填充到数组之中，用于数组的初始化和填充。\"},\"2387\":{\"t\":\"fill(int[] a, int val) int[] arr1 = new int[5]; Arrays.fill(arr1,7); System.out.println(Arrays.toString(arr1)); //[7, 7, 7, 7, 7] \"},\"2388\":{\"h\":\"8. asList\",\"a\":\"_8-aslist\"},\"2389\":{\"t\":\"快速生成一个List集合，该方式返回的是 ArrayList 实例。 该方法可用于快速生成一个List集合。\"},\"2390\":{\"t\":\"参数：就是集合的元素，注意参数类型要统一。\"},\"2391\":{\"t\":\"public static <T> List<T> asList(T... a) { return new ArrayList<>(a);//返回的是ArrayList } List<String> list = Arrays.asList(\\\"a\\\", \\\"b\\\", \\\"c\\\"); System.out.println(list);//[a, b, c] \"},\"2392\":{\"h\":\"2-3. Collection+\"},\"2393\":{\"h\":\"Ⅰ. Collection\",\"a\":\"i-collection\"},\"2394\":{\"t\":\"位置\"},\"2395\":{\"t\":\"Libraries>java>util Collection.java 【interface】\"},\"2396\":{\"h\":\"结构\",\"a\":\"结构\"},\"2397\":{\"t\":\"public interface Collection<E> extends Iterable<E>{ //无成员变量 } \"},\"2398\":{\"h\":\"应用范围\",\"a\":\"应用范围\"},\"2399\":{\"t\":\"Collection 接口是 List、Set 和 Queue 接口的父接口，因此Collection接口中定义的方法，其子接口和子接口的实现类也同样可以使用。 实现类为：ArrayList; Vector;LinkedList; HashSet; LinkedHashSet; TreeSet;\"},\"2400\":{\"h\":\"泛型\",\"a\":\"泛型\"},\"2401\":{\"t\":\"创建容器对象时，可以指定泛型，此时使用Collection接口的方法就会被泛型类型限制了。 如果不指定泛型，则不会有泛型限制，统一视为obj类型。\"},\"2402\":{\"h\":\"1. add\",\"a\":\"_1-add\"},\"2403\":{\"t\":\"将元素添加到集合中，元素可以是任何类型，基本数据类型会自动装箱。\"},\"2404\":{\"t\":\"boolean add(E e); ========================================================= Collection<String> coll = new ArrayList<>(); coll.add(\\\"aa\\\"); String str = \\\"bb\\\"; coll.add(str); System.out.println(coll); //[aa, bb] \"},\"2405\":{\"h\":\"2. addAll\",\"a\":\"_2-addall\"},\"2406\":{\"t\":\"将其他集合的元素添加到当前集合，即合并另一个集合。\"},\"2407\":{\"t\":\"boolean addAll(Collection<? extends E> c); //注意两个集合的泛型要求 ========================================================= Collection<String> coll = new ArrayList<>(); coll.add(\\\"aa\\\"); coll.add(\\\"bb\\\"); Collection<String> coll2 = new ArrayList<>(); coll2.add(\\\"cc\\\"); coll2.add(\\\"dd\\\"); coll.addAll(coll2);//将coll2集合中的元素添加到集合coll System.out.println(coll);//[aa, bb, cc, dd] System.out.println(coll2);//[cc, dd]; 集合coll2依然还在,还可以继续使用 \"},\"2408\":{\"h\":\"3. size\",\"a\":\"_3-size\"},\"2409\":{\"t\":\"获取集合的元素个数。\"},\"2410\":{\"t\":\"int size(); ========================================== int size = coll.size(); //[aa, bb, cc, dd] System.out.println(size); //4 \"},\"2411\":{\"h\":\"4. clear\",\"a\":\"_4-clear\"},\"2412\":{\"t\":\"清空集合元素，集合变为空集合。\"},\"2413\":{\"t\":\"void clear(); ==================================== coll.clear(); //coll == [aa, bb, cc, dd] System.out.println(coll); // [] \"},\"2414\":{\"h\":\"5. isEmpty\",\"a\":\"_5-isempty\"},\"2415\":{\"t\":\"判断集合是否为空。\"},\"2416\":{\"t\":\"boolean isEmpty(); ============================== coll.clear(); boolean result = coll.isEmpty(); System.out.println(result); //true \"},\"2417\":{\"h\":\"6. contains\",\"a\":\"_6-contains\"},\"2418\":{\"t\":\"集合中是否包含某个元素。 注意：比较的方式是，将待比较元素与集合中的元素做equal。\"},\"2419\":{\"t\":\"对于基本数据类型的包装类和String，都重写了equals方法，可以正常比较值；\"},\"2420\":{\"t\":\"而我们自定义的类，如果不重写equals方法，将无法进行比较，直接返回false。 \"},\"2421\":{\"t\":\"因此向Collection接口的实现类的对象中添加数据obj时，要求obj所在类要重写equals()\"},\"2422\":{\"t\":\"boolean contains(Object o); ========================================================= boolean res1 = coll.contains(\\\"aa\\\"); //coll == [aa, bb, cc, dd] System.out.println(res1);//true //自定义类：未重写equals，无法比较值，返回false System.out.println(coll.contains(new Person(\\\"jinno\\\",20)));//false //在Person类中重写equals后 //自定义类：已重写equals，可以比较值，若属性完全相同，返回true System.out.println(coll.contains(new Person(\\\"jinno\\\",20)));//true \"},\"2423\":{\"h\":\"7. containsAll\",\"a\":\"_7-containsall\"},\"2424\":{\"t\":\"比较是否包含某个集合\"},\"2425\":{\"t\":\"算法：拿两个集合的元素挨个比较，判断形参c中的所有元素是否都存在于当前集合中，都存在（即被包含）就返回true。\"},\"2426\":{\"t\":\"boolean containsAll(Collection<?> c); ============================================= //coll == [aa, bb, cc, dd]; coll2 == [cc,dd] boolean res3 = coll.containsAll(coll2); System.out.println(res3); //true \"},\"2427\":{\"h\":\"8. remove\",\"a\":\"_8-remove\"},\"2428\":{\"t\":\"从集合中删除指定的元素，算法是：使用参数与集合中的每个元素做equals判断，找到即删除。 该方法只会删除找到的第一个元素，对于自定义类，需要重写equals方法，不如无法删除成功。\"},\"2429\":{\"t\":\"boolean remove(Object obj);//该方法最初是定义在iterator中的 ========================================================= //coll == [aa,bb,cc,dd] boolean res4 = coll.remove(\\\"dd\\\"); System.out.println(res4); //true; System.out.println(coll); //[aa,bb,cc] \"},\"2430\":{\"h\":\"9. removeAll\",\"a\":\"_9-removeall\"},\"2431\":{\"t\":\"移除交集，求差集；\"},\"2432\":{\"t\":\"将当前集合与参数集合做差集，并将差集从当前集合中移除。即移除当前集合中，参数集合也有的元素。\"},\"2433\":{\"t\":\"boolean removeAll(Collection<?> c); ======================================== //coll == [aa,bb,cc,dd]; coll2 == [cc,dd] boolean result5 = coll.removeAll(coll2); System.out.println(coll); //[aa,bb] \"},\"2434\":{\"h\":\"10. retainAll\",\"a\":\"_10-retainall\"},\"2435\":{\"t\":\"计算当前集合和参数集合的交集，并将交集返回到当前的集合中。\"},\"2436\":{\"t\":\"boolean retainAll(Collection<?> c); ========================================================= //coll == [aa,bb,cc,dd]; coll2 == [cc,hello] boolean res = coll.retainAll(coll2); System.out.println(res);//true,true表示执行成功,而非找到了交集 System.out.println(coll); //[cc] \"},\"2437\":{\"h\":\"11. equals\",\"a\":\"_11-equals\"},\"2438\":{\"t\":\"判断两个集合是否想等，两个集合会用equals比对集合中的所有obj，全部相等就会返回true。\"},\"2439\":{\"t\":\"注意：不同的Collection子类都重写了equal方法，比对时，不同的子类对顺序要求不同，对于ArrayList，他是有序的，所以集合元素如果都相同，但是顺序不同，也会返回false。\"},\"2440\":{\"t\":\"boolean equals(Object o); ================================= coll.equals(coll2);//boolean \"},\"2441\":{\"h\":\"12. toArray\",\"a\":\"_12-toarray\"},\"2442\":{\"t\":\"将集合转为数组。\"},\"2443\":{\"h\":\"12.1 转为Object类型的数组\",\"a\":\"_12-1-转为object类型的数组\"},\"2444\":{\"t\":\"Object[] toArray(); ==================================== Object[] obj = coll.toArray(); System.out.println(Arrays.toString(obj)); \"},\"2445\":{\"h\":\"12.2 转为指定类型的数组\",\"a\":\"_12-2-转为指定类型的数组\"},\"2446\":{\"t\":\"<T> T[] toArray(T[] a); ===================================================== String[] arr = coll.toArray(new String[coll.size()]); \"},\"2447\":{\"h\":\"13. iterator\",\"a\":\"_13-iterator\"},\"2448\":{\"t\":\"返回迭代器对象，用于集合遍历\"},\"2449\":{\"t\":\"Iterator<E> iterator(); ===================================== Iterator it = coll.iterator(); System.out.println(it); //java.util.ArrayList$Itr@4554617c \"},\"2450\":{\"h\":\"Ⅱ. Iterator\",\"a\":\"ii-iterator\"},\"2451\":{\"t\":\"位置\"},\"2452\":{\"t\":\"Libraries>java>util Iterator.java 【interface】\"},\"2453\":{\"h\":\"结构\",\"a\":\"结构-1\"},\"2454\":{\"t\":\"public interface Iterator<E>{ ... } \"},\"2455\":{\"h\":\"使用\",\"a\":\"使用\"},\"2456\":{\"t\":\"通过Collection接口的iterator()方法获取 实现了Iterator接口的对象。 Collection接口实现对象，每调用一次iterator方法，就会产生一个Iterator迭代器对象\"},\"2457\":{\"h\":\"指针\",\"a\":\"指针\"},\"2458\":{\"t\":\"iterator对象有一个指针，指向集合中的某个元素。对于一个全新的迭代器，他的指针在第一个元素之前（注意是之前），每次执行一次next方法，指针就往后移动一次。\"},\"2459\":{\"h\":\"1. hasNext\",\"a\":\"_1-hasnext\"},\"2460\":{\"t\":\"用来判断指针后面还有没有集合元素。\"},\"2461\":{\"t\":\"boolean hasNext(); ===================================== //Collection<Integer> coll == [1,2,3,4] Iterator<Integer> it = coll.iterator(); boolean res = it.hasNext(); System.out.println(res); //true \"},\"2462\":{\"h\":\"2. next\",\"a\":\"_2-next\"},\"2463\":{\"t\":\"iterator.next()用来向后移动一次指针，并取出指针指向的集合元素，进行返回。\"},\"2464\":{\"t\":\"注意：当指针已经指向最后时，就不能再调用next方法了，会抛出异常，且取完数据后，指针就会呆在集合末尾，不会自动重置。\"},\"2465\":{\"t\":\"E next(); ===================================== //Collection<Integer> coll == [1,2,3,4] Iterator<Integer> it = coll.iterator(); Integer nextVal = it.next(); System.out.println(nextVal); //1 \"},\"2466\":{\"h\":\"3. remove\",\"a\":\"_3-remove\"},\"2467\":{\"t\":\"remove方法用来在遍历的时候，删除集合中的元素。此方法不同于集合直接调用remove()。\"},\"2468\":{\"t\":\"注意：如果还未调用next()或在上一次调用 next 方法之后已经调用了 remove 方法，再调用remove都会报IllegalStateException。\"},\"2469\":{\"t\":\"void remove() ===================================== //Collection<Integer> coll == [1,2,3,4] Iterator<Integer> it = coll.iterator(); Integer nextVal = it.next();//此时指针指向1; it.remove();//移除指针指向的值：1; System.out.println(coll); //[2, 3, 4] ,值为1的集合元素被删除 \"},\"2470\":{\"h\":\"Ⅲ. Collections\",\"a\":\"iii-collections\"},\"2471\":{\"t\":\"位置\"},\"2472\":{\"t\":\"rt.jar>java>util>Collections.java 【class】\"},\"2473\":{\"t\":\"不要跟Collection搞混了，前者是个集合接口，后者是操作接口的工具类。\"},\"2474\":{\"t\":\"Collections 中提供了一系列静态的方法对集合元素进行排序、查询和修改等操作，还提供了对集合对象设置不可变、对集合对象实现同步控制等方法。\"},\"2475\":{\"h\":\"结构\",\"a\":\"结构-2\"},\"2476\":{\"t\":\"public class Collections{ private Collections(){} } \"},\"2477\":{\"h\":\"用途\",\"a\":\"用途\"},\"2478\":{\"t\":\"Collections 是一个操作 Set、List 和 Map 等集合的工具类Map相关的方法比较少。\"},\"2479\":{\"t\":\"排序：主要是List集合，就他用顺序。\"},\"2480\":{\"t\":\"查找替换：主要是Collection集合的操作方法\"},\"2481\":{\"t\":\"多线程同步：Collections 类中提供了多个 synchronizedXxx() 方法，该方法可使将指定集合包装成线程同步的集合，从而可以解决多线程并发访问集合时的线程安全问题。\"},\"2482\":{\"h\":\"1. reverse\",\"a\":\"_1-reverse\"},\"2483\":{\"t\":\"元素反转，仅List可用，就他有顺序。 反转 List 中元素的顺序。\"},\"2484\":{\"t\":\"void reverse(List<?> list) ======================================== List<Integer> list = new ArrayList<>(); list.add(1); list.add(2); list.add(3); System.out.println(list); //[1, 2, 3] Collections.reverse(list); System.out.println(list); //[3, 2, 1] \"},\"2485\":{\"h\":\"2. shuffle\",\"a\":\"_2-shuffle\"},\"2486\":{\"t\":\"随机排序，仅List可用，就他有顺序。\"},\"2487\":{\"t\":\"void shuffle(List<?> list); ==================================== //list = [1,3,3] System.out.println(list); //[1, 2, 3] Collections.shuffle(list); System.out.println(list); //[3, 2, 1] Collections.shuffle(list); System.out.println(list); //[3, 1, 2] \"},\"2488\":{\"h\":\"3. sort\",\"a\":\"_3-sort\"},\"2489\":{\"t\":\"排序，仅List可用，就他有顺序。\"},\"2490\":{\"t\":\"自然排序：仅一个参数，待排序的list\"},\"2491\":{\"t\":\"自定义排序：根据指定的第二个参数Comparator进行排序\"},\"2492\":{\"t\":\"<T extends Comparable<? super T>> void sort(List<T> list); <T> void sort(List<T> list, Comparator<? super T> c); ========================================================= //list = [1, 5, 3, 6, 4] System.out.println(list); //[1, 5, 3, 6, 4] Collections.sort(list); //进行自然排序 System.out.println(list);//[1, 3, 4, 5, 6] Collections.sort(list,new Comparator(){ //进行定制排序 public int compare(Object o1, Object o2) { return (int) o2 - (int) o1; //从大到小排序 } }); System.out.println(list); //[6, 5, 4, 3, 1] \"},\"2493\":{\"h\":\"4. swap\",\"a\":\"_4-swap\"},\"2494\":{\"t\":\"交换元素位置，仅List可用，就他有顺序。 将指定 list 集合中的 i 处元素和 j 处元素进行交换\"},\"2495\":{\"t\":\"void swap(List<?> list, int i, int j) ========================================== //list = [1, 5, 3, 6, 4] System.out.println(list);//[1, 5, 3, 6, 4] Collections.swap(list,1,2); System.out.println(list);//[1, 3, 5, 6, 4] \"},\"2496\":{\"h\":\"5. max\",\"a\":\"_5-max\"},\"2497\":{\"t\":\"返回给定集合中的最大元素\"},\"2498\":{\"t\":\"自然排序：默认采用自然排序。\"},\"2499\":{\"t\":\"定制排序：可以指定第二个参数，进行定制排序。\"},\"2500\":{\"t\":\"<T extends Object & Comparable<? super T>> T max(Collection<? extends T> coll); <T> T max(Collection<? extends T> coll, Comparator<? super T> comp); ========================================================= //list = [1, 5, 3, 6, 4] Integer max = Collections.max(list); System.out.println(max);//6 \"},\"2501\":{\"h\":\"6. min\",\"a\":\"_6-min\"},\"2502\":{\"t\":\"返回最小元素\"},\"2503\":{\"t\":\"自然排序：默认采用自然排序。\"},\"2504\":{\"t\":\"定制排序：可以指定第二个参数，进行定制排序。\"},\"2505\":{\"t\":\"<T extends Object & Comparable<? super T>> T min(Collection<? extends T> coll); <T> T min(Collection<? extends T> coll, Comparator<? super T> comp); ========================================================= //list = [1, 5, 3, 6, 4] Integer min = Collections.min(list); System.out.println(min);//1 \"},\"2506\":{\"h\":\"7. frequency\",\"a\":\"_7-frequency\"},\"2507\":{\"t\":\"返回指定集合中指定元素的出现次数\"},\"2508\":{\"t\":\"int frequency(Collection<?> c, Object o); =============================================== //list = [1, 5, 2, 3, 5] int frequency = Collections.frequency(list, 5); System.out.println(frequency);//2 \"},\"2509\":{\"h\":\"8. copy\",\"a\":\"_8-copy\"},\"2510\":{\"t\":\"集合复制，将参数src集合的内容复制到参数dest集合中。\"},\"2511\":{\"t\":\"注意：直接向一个空的集合中复制会报异常，IndexOutOfBoundsException，需要先创建一个同等长度的集合（也可以大于）。\"},\"2512\":{\"t\":\"<T> void copy(List<? super T> dest, List<? extends T> src) ========================================================= List<Integer> list = new ArrayList<>(); list.add(1); list.add(2); list.add(3); ArrayList<Integer> list2 = new ArrayList<>(); list2.add(null); list2.add(null); list2.add(null); list2.add(null); Collections.copy(list2,list); System.out.println(list);//[1, 2, 3] System.out.println(list2);//[1, 2, 3, null] \"},\"2513\":{\"h\":\"9. replaceAll\",\"a\":\"_9-replaceall\"},\"2514\":{\"t\":\"使用新值替换List 对象的所有旧值。\"},\"2515\":{\"t\":\"<T> boolean replaceAll(List<T> list, T oldVal, T newVal); ========================================================= //list = [1, 1,0] Collections.replaceAll(list, 1, 2); System.out.println(list);//[2, 2, 0] \"},\"2516\":{\"h\":\"10. synchronizedXxx\",\"a\":\"_10-synchronizedxxx\"},\"2517\":{\"t\":\"获取线程安全的集合，参数传入一个线程不安全的集合，返回一个线程安全的同类集合。\"},\"2518\":{\"t\":\"<T> List<T> synchronizedList(List<T> list); <T> Collection<T> synchronizedCollection(Collection<T> c); <K,V> Map<K,V> synchronizedMap(Map<K,V> m); <K,V> NavigableMap<K,V> synchronizedNavigableMap(NavigableMap<K,V> m); <T> NavigableSet<T> synchronizedNavigableSet(NavigableSet<T> s); <T> Set<T> synchronizedSet(Set<T> s); <K,V> SortedMap<K,V> synchronizedSortedMap(SortedMap<K,V> m); <T> SortedSet<T> synchronizedSortedSet(SortedSet<T> s); ========================================================= List<Integer> list = new ArrayList<>(); list.add(1); list.add(1); list.add(0); List<Integer> syncList = Collections.synchronizedList(list); \"},\"2519\":{\"h\":\"2-4. List & Map\"},\"2520\":{\"h\":\"Ⅰ. List\",\"a\":\"i-list\"},\"2521\":{\"t\":\"位置\"},\"2522\":{\"t\":\"rt.jar>java>util>List.java 【interface】\"},\"2523\":{\"t\":\"List除了从Collection集合继承的方法外，List 集合里添加了一些根据索引来操作集合元素的方法。 并对Collection的很多方法进行了重载。以下介绍的方法都是新增或重载后的方法。\"},\"2524\":{\"h\":\"结构\",\"a\":\"结构\"},\"2525\":{\"t\":\"public interface List<E> extends Collection<E>{ ... } \"},\"2526\":{\"h\":\"使用说明\",\"a\":\"使用说明\"},\"2527\":{\"t\":\"List是接口不能直接实例化，这里所有案例均以ArrayList为例。 集合都是可以指定泛型的，如果不指定泛型，就接受Object类，以下使用均会含有泛型。\"},\"2528\":{\"h\":\"Arrays.asList\",\"a\":\"arrays-aslist\"},\"2529\":{\"t\":\"可以使用Arrays.asList方法快速生成一个List集合。\"},\"2530\":{\"t\":\"List<String> list = Arrays.asList(\\\"a\\\", \\\"b\\\", \\\"c\\\"); System.out.println(list);//[a, b, c] \"},\"2531\":{\"h\":\"1. add\",\"a\":\"_1-add\"},\"2532\":{\"t\":\"添加数据，重载方法。\"},\"2533\":{\"t\":\"1个参数 ele：就是使用的collection的add()，\"},\"2534\":{\"t\":\"2个参数 index,ele：就使用ArrayList中重载的，即向某个index插入数据，其他数据index顺延。 \"},\"2535\":{\"t\":\"index：集合的索引\"},\"2536\":{\"t\":\"ele：待添加的集合元素。\"},\"2537\":{\"t\":\"void add(int index, E element); ======================================= List<String> list = new ArrayList<>(); list.add(\\\"a\\\"); list.add(\\\"c\\\"); System.out.println(list);//[a, c] list.add(1,\\\"b\\\"); System.out.println(list);//[a, c] \"},\"2538\":{\"h\":\"2. addAll\",\"a\":\"_2-addall\"},\"2539\":{\"t\":\"添加另一个集合的元素，重载方法。\"},\"2540\":{\"t\":\"1个参数 eles：就是使用的collection中的addAll，直接添加另一个集合\"},\"2541\":{\"t\":\"2个参数 index,eles：使用ArrayList重载的，可以从指定的index开始插入另一个集合的数据。 \"},\"2542\":{\"t\":\"index：集合的索引\"},\"2543\":{\"t\":\"else：待添加的集合\"},\"2544\":{\"t\":\"效果：该方法会将参数集合中的所有元素都添加到自己的集合中，该方法会改变源集合。\"},\"2545\":{\"t\":\"返回值：Boolean，添加成功就返回true。\"},\"2546\":{\"t\":\"boolean addAll(int index, Collection eles); =========================================================== //list1 = [a,b,c]; list2 = [d,e,f]; boolean res = list1.addAll(list2); System.out.println(res); //true：添加成功 System.out.println(list1);//[a, b, c, d, e, f]，源集合改变了 System.out.println(list2);//[d, e, f]，参数集合还在 \"},\"2547\":{\"h\":\"3. get\",\"a\":\"_3-get\"},\"2548\":{\"t\":\"获取指定index 位置的元素。 如果取的index不存在，就会报异常：IndexOutOfBoundsException。\"},\"2549\":{\"t\":\"E get(int index); ========================================================= //list1 = [a,b,c]; String s1 = list1.get(0); String s2 = list1.get(3); System.out.println(s1);//a System.out.println(s2);//抛出异常：IndexOutOfBoundsException \"},\"2550\":{\"h\":\"4. indexOf\",\"a\":\"_4-indexof\"},\"2551\":{\"t\":\"查询某个元素首次出现的位置（index），如果不存在，返回-1.\"},\"2552\":{\"t\":\"int indexOf(Object o); ================================ //list1 = [a,b,b,c]; int res = list1.indexOf(\\\"b\\\"); System.out.println(res);//1 \"},\"2553\":{\"h\":\"5. lastIndexOf\",\"a\":\"_5-lastindexof\"},\"2554\":{\"t\":\"返回元素最后出现的位置，如果不存在，返回-1。\"},\"2555\":{\"t\":\"int lastIndexOf(Object o); ================================== //list1 = [a,b,b,c]; int res = list1.lastIndexOf(\\\"b\\\"); System.out.println(res);//2 \"},\"2556\":{\"h\":\"6. remove\",\"a\":\"_6-remove\"},\"2557\":{\"t\":\"移除指定index的元素，重载方法\"},\"2558\":{\"t\":\"参数是index：移除指定index的元素并返回（ArrayList 重载） \"},\"2559\":{\"t\":\"返回值是被移除的元素\"},\"2560\":{\"t\":\"如果index超出了范围，就会报IndexOutOfBoundsException。\"},\"2561\":{\"t\":\"参数是obj：移除元素的值为obj的元素（Collection） \"},\"2562\":{\"t\":\"返回值是Boolean，表示是否移除成功，移除的元素不存在，就返回false\"},\"2563\":{\"t\":\"E remove(int index); ========================================================= //list1 = [a,b,c]; boolean b = list1.remove(\\\"b\\\");//调用的是Collection.remove() System.out.println(list1);//[a, c] String s1 = list1.remove(0);//调用的是List.remove() System.out.println(s1);//a:被删除的元素 System.out.println(list1);//[c] \"},\"2564\":{\"h\":\"7. set\",\"a\":\"_7-set\"},\"2565\":{\"t\":\"修改指定index的元素 。 返回值：修改前的obj元素。\"},\"2566\":{\"t\":\"E set(int index, E element); ============================================================= //list1 = [a,b,c]; String s1 = list1.set(0, \\\"A\\\"); System.out.println(s1);//a System.out.println(list1);//[A, b, c] \"},\"2567\":{\"h\":\"8. subList\",\"a\":\"_8-sublist\"},\"2568\":{\"t\":\"返回两个index区间的元素，返回从fromIndex到toIndex位置的左闭右开区间的子集合。 返回了一个新集合，源集合没有变化。\"},\"2569\":{\"t\":\"List<E> subList(int fromIndex, int toIndex); ================================================ //list1 = [a,b,c,d,e,f]; List<String> list2 = list1.subList(0, 3); System.out.println(list1);//[a, b, c, d, e, f] System.out.println(list2);//[a, b, c] \"},\"2570\":{\"h\":\"Ⅱ. Map\",\"a\":\"ii-map\"},\"2571\":{\"t\":\"位置\"},\"2572\":{\"t\":\"rt.jar>java>util>Map.java 【Interface】\"},\"2573\":{\"h\":\"结构\",\"a\":\"结构-1\"},\"2574\":{\"t\":\"public interface Map<K,V>{ .... } \"},\"2575\":{\"h\":\"实现类\",\"a\":\"实现类\"},\"2576\":{\"t\":\"Map有五个实现类：HashMap、LinkedHashMap、TreeMap、Hashtable、Properties。 常用实现类为HashMap，这里所有的例子均以HashMap为例。\"},\"2577\":{\"h\":\"泛型\",\"a\":\"泛型\"},\"2578\":{\"t\":\"Map集合内的数据是键值对，因此Map支持两个集合，第一个表示键的类型，第二个表示值的类型。\"},\"2579\":{\"h\":\"特性\",\"a\":\"特性\"},\"2580\":{\"t\":\"键不可以重复，值可以重复。\"},\"2581\":{\"h\":\"遍历操作\",\"a\":\"遍历操作\"},\"2582\":{\"t\":\"Map接口是没有iterator的，即没有迭代器接口，但可以对Key，Value进行遍历。\"},\"2583\":{\"t\":\"key：key是有set组成的，可以迭代key\"},\"2584\":{\"t\":\"value：value也是由set组成的，可以迭代value\"},\"2585\":{\"t\":\"entry：也是有set组成的，同理(entry== key,value)。\"},\"2586\":{\"h\":\"1. put\",\"a\":\"_1-put\"},\"2587\":{\"t\":\"增改元素，将指定key-value添加到(或修改)当前map对象中，如果key，已经存在，则为修改value。\"},\"2588\":{\"t\":\"开发中，key一般为String。\"},\"2589\":{\"t\":\"V put(K key, V value); ================================================= hm.put(\\\"Aaron\\\",\\\"A\\\"); hm.put(\\\"Allen\\\",\\\"A\\\"); hm.put(\\\"Bob\\\",\\\"B\\\"); System.out.println(hm);//{Aaron=A, Bob=B, Allen=A} hm.put(\\\"Bob\\\",\\\"b\\\");//相同的key，则为修改。 System.out.println(hm);//{Aaron=A, Bob=b, Allen=A} \"},\"2590\":{\"h\":\"2. putAll\",\"a\":\"_2-putall\"},\"2591\":{\"t\":\"增改集合，将参数集合中的所有key-value对存放到当前map中。 相当于将参数集合中的所有元素挨个添加到了当前集合，同样会发生覆盖（修改）。 注意：参数集合的泛型必须与本集合的泛型相同或是子类。\"},\"2592\":{\"t\":\"void putAll(Map<? extends K, ? extends V> m); ========================================================= Map<String, String> hm = new HashMap<>(); HashMap<String, String> hm2 = new HashMap<>(); //hm={Aaron=A, Bob=B, Allen=A} hm2={Bob=BB, Jobs=J} hm.putAll(hm2); System.out.println(hm);//{Aaron=A, Bob=BB, Jobs=J, Allen=A} \"},\"2593\":{\"h\":\"3. remove\",\"a\":\"_3-remove\"},\"2594\":{\"t\":\"移除元素：移除指定key的key-value对，并返回value。 如果指定的key不存在，则返回null。\"},\"2595\":{\"t\":\"V remove(Object key); ========================================== //hm={Aaron=A, Bob=B, Allen=A} String allen = hm.remove(\\\"Allen\\\"); System.out.println(allen);//A String jobs = hm.remove(\\\"Jobs\\\"); System.out.println(jobs);//null System.out.println(hm);//{Aaron=A, Bob=B} \"},\"2596\":{\"h\":\"4. clear\",\"a\":\"_4-clear\"},\"2597\":{\"t\":\"清空集合：清空当前map中的所有数据，变为空的map集合\"},\"2598\":{\"t\":\"void clear(); ================================= //hm={Aaron=A, Bob=B, Allen=A} hm.clear(); System.out.println(hm);//{} \"},\"2599\":{\"h\":\"5. get\",\"a\":\"_5-get\"},\"2600\":{\"t\":\"获取value，获取指定key对应的value，如果key不存在，就返回null。\"},\"2601\":{\"t\":\"V get(Object key); =================================== //hm={Aaron=A, Bob=B, Allen=A} String allen = hm.get(\\\"Allen\\\"); System.out.println(allen);//A String he = hm.get(\\\"He\\\"); System.out.println(he);//null \"},\"2602\":{\"h\":\"6. containsKey\",\"a\":\"_6-containskey\"},\"2603\":{\"t\":\"是否包含指定的key。\"},\"2604\":{\"t\":\"boolean containsKey(Object key); ====================================== //hm={Aaron=A, Bob=B, Allen=A} boolean res1 = hm.containsKey(\\\"Bob\\\"); boolean res2 = hm.containsKey(\\\"Jobs\\\"); System.out.println(res1);//true System.out.println(res2);//false \"},\"2605\":{\"h\":\"7. containsValue\",\"a\":\"_7-containsvalue\"},\"2606\":{\"t\":\"boolean containsValue(Object value); ========================================= //hm={Aaron=A, Bob=B, Allen=A} boolean res1 = hm.containsValue(\\\"A\\\"); boolean res2 = hm.containsValue(\\\"C\\\"); System.out.println(res1);//true System.out.println(res2);//false \"},\"2607\":{\"h\":\"8. size\",\"a\":\"_8-size\"},\"2608\":{\"t\":\"返回map中key-value对的个数。\"},\"2609\":{\"t\":\"int size(); =============================== //hm={Aaron=A, Bob=B, Allen=A} int size = hm.size(); System.out.println(size);//3 \"},\"2610\":{\"h\":\"9. isEmpty\",\"a\":\"_9-isempty\"},\"2611\":{\"t\":\"判断当前map是否为空，空则返回true。\"},\"2612\":{\"t\":\"boolean isEmpty(); ================================= //hm={Aaron=A, Bob=B, Allen=A} boolean res1 = hm.isEmpty(); System.out.println(res1);//false hm.clear(); boolean res2 = hm.isEmpty(); System.out.println(res2);//true \"},\"2613\":{\"h\":\"10. equals\",\"a\":\"_10-equals\"},\"2614\":{\"t\":\"判断两个集合是否想等，会比对集合中的所有元素。 集合中元素的顺序不影响比对结果，key=>value 是一起参与比对的\"},\"2615\":{\"t\":\"boolean equals(Object o); =========================================================== //hm={Aaron=A, Bob=B, Allen=A} hm2={ Bob=B,Aaron=A, Allen=A} boolean res = hm.equals(hm2); System.out.println(res);//true \"},\"2616\":{\"h\":\"11. keySet\",\"a\":\"_11-keyset\"},\"2617\":{\"t\":\"返回所有key构成的Set集合，可以使用iterator接口或增强for循环遍历了。\"},\"2618\":{\"t\":\"Set<K> keySet(); ============================================================= //hm={Aaron=A, Bob=B, Allen=A} Set<String> set = hm.keySet();//[Aaron, Bob, Allen] Iterator it = set.iterator(); //拥有了iterator接口 while(it.hasNext()){ System.out.println(it.next()); //可以遍历了：Aaron, Bob, Allen } \"},\"2619\":{\"h\":\"12. values\",\"a\":\"_12-values\"},\"2620\":{\"t\":\"返回所有value构成的Set集合,可以进行遍历了。\"},\"2621\":{\"t\":\"Collection<V> values(); ====================================== //hm={Aaron=A, Bob=B, Allen=A} Collection<String> val = hm.values(); System.out.println(val);[A, B, A] for(String str:val){ System.out.println(str);//A, B, A } \"},\"2622\":{\"h\":\"13. entrySet\",\"a\":\"_13-entryset\"},\"2623\":{\"t\":\"返回所有k-v(entry)构成的Set集合，entrySet集合中的元素都是entry。 Entry是Map接口的内部接口。\"},\"2624\":{\"t\":\"Set<Map.Entry<K, V>> entrySet(); ============================================================ //hm={Aaron=A, Bob=B, Allen=A} Set<Map.Entry<String, String>> entries = hm.entrySet(); System.out.println(entries);//[Aaron=A, Bob=B, Allen=A] Iterator it = entries.iterator(); //拥有了iterator接口 while(it.hasNext()){ Object obj = it.next(); Map.Entry entry = (Map.Entry)obj; System.out.println(entry.getKey()); System.out.println(entry.getValue()); } \"},\"2625\":{\"h\":\"2-5. Functional\"},\"2626\":{\"t\":\"提示\"},\"2627\":{\"t\":\"此处将列举JDK所有内置的函数式接口。 JDK一共内置了43个函数式接口，包含了所有可能的情况。\"},\"2628\":{\"t\":\"位置：rt.jar>java>util>function 【dir】\"},\"2629\":{\"h\":\"〇. 核心Functional\",\"a\":\"〇-核心functional\"},\"2630\":{\"t\":\"43中函数式接口都是这四种接口的变形。\"},\"2631\":{\"h\":\"1. Consumer\",\"a\":\"_1-consumer\"},\"2632\":{\"t\":\"消费型：提供一个参数，什么都不返回：参数被消耗了。\"},\"2633\":{\"t\":\"Consumer<T>{ void accept(T t); } \"},\"2634\":{\"h\":\"2. Supplier\",\"a\":\"_2-supplier\"},\"2635\":{\"t\":\"供给型：不提供参数，返回了一个值：供给了一个值。\"},\"2636\":{\"t\":\"Supplier<T>{ T get(); } \"},\"2637\":{\"h\":\"3. Function\",\"a\":\"_3-function\"},\"2638\":{\"t\":\"函数型：提供参数，参数类型是对象T，返回值类型是对象R。\"},\"2639\":{\"t\":\"Function<T,R>{ R apply(T t); } \"},\"2640\":{\"h\":\"4. Predicate\",\"a\":\"_4-predicate\"},\"2641\":{\"t\":\"断定型：提供一个参数，进行判断，返回boolean：进行一些参数的断定\"},\"2642\":{\"t\":\"Predicate<T>{ boolean test(T t) } \"},\"2643\":{\"h\":\"Ⅰ. XxxConsumer\",\"a\":\"i-xxxconsumer\"},\"2644\":{\"t\":\"消费型Functional，接受参数，并不返回任何结果、\"},\"2645\":{\"t\":\"提示\"},\"2646\":{\"t\":\"TBD\"},\"2647\":{\"h\":\"Ⅱ. XxxSupplier\",\"a\":\"ii-xxxsupplier\"},\"2648\":{\"t\":\"提示\"},\"2649\":{\"t\":\"TBD\"},\"2650\":{\"h\":\"Ⅲ. XxxFucntion\",\"a\":\"iii-xxxfucntion\"},\"2651\":{\"t\":\"提示\"},\"2652\":{\"t\":\"TBD\"},\"2653\":{\"h\":\"Ⅳ. XxxPredicate\",\"a\":\"iv-xxxpredicate\"},\"2654\":{\"t\":\"提示\"},\"2655\":{\"t\":\"TBD\"},\"2656\":{\"h\":\"Ⅴ. XxxOperator\",\"a\":\"v-xxxoperator\"},\"2657\":{\"t\":\"提示\"},\"2658\":{\"t\":\"TBD\"},\"2659\":{\"h\":\"2-6. 正则类\"},\"2660\":{\"t\":\"提示\"},\"2661\":{\"t\":\"正则的语法都是通用的，这里介绍的是正则相关的Java内置API\"},\"2662\":{\"h\":\"正则相关的类\",\"a\":\"正则相关的类\"},\"2663\":{\"t\":\"Java 正则表达式和 Perl 的是最为相似的。\"},\"2664\":{\"t\":\"java.util.regex 包主要包括以下三个类：\"},\"2665\":{\"t\":\"Pattern 类：pattern 对象是一个正则表达式的编译表示。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法，它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第一个参数。\"},\"2666\":{\"t\":\"Matcher类：Matcher 对象是对输入字符串进行解释和匹配操作的引擎。与Pattern 类一样，Matcher 也没有公共构造方法。你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。\"},\"2667\":{\"t\":\"PatternSyntaxException类：PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。 \"},\"2668\":{\"t\":\"在JDK中java.util.regex.Pattern类的注释包含了所有Java的正则语法，可以直接查看该类的注释来使用正则语法。\"},\"2669\":{\"h\":\"注意事项\",\"a\":\"注意事项\"},\"2670\":{\"t\":\"在 Java 中，\\\\\\\\ 表示：我要插入一个正则表达式的反斜线，所以其后的字符具有特殊的意义。\"},\"2671\":{\"t\":\"所以，在其他的语言中（如 Perl），一个反斜杠 \\\\就足以具有转义的作用，而在 Java 中正则表达式中则需要有两个反斜杠才能被解析为其他语言中的转义作用。也可以简单的理解在 Java 的正则表达式中，两个 \\\\\\\\ 代表其他语言中的一个 \\\\，这也就是为什么表示一位数字的正则表达式是 \\\\\\\\d，而表示一个普通的反斜杠是 \\\\\\\\。\"},\"2672\":{\"h\":\"Java正则语法指南\",\"a\":\"java正则语法指南\"},\"2673\":{\"t\":\"在JDK中java.util.regex.Pattern类的注释包含了所有Java的正则语法，可以直接查看该类的注释来使用正则语法。\"},\"2674\":{\"t\":\"Pattern：Pattern，专门用来编译正则表达式的，一次编译，多次使用。\"},\"2675\":{\"t\":\"Matcher：对于复杂的表达式需要使用JDK中的Matcher类来处理。 \"},\"2676\":{\"t\":\"如：反向引用：Matcher.group\"},\"2677\":{\"t\":\"模式修饰符：在java中，通过正则字符串不能表示模式修饰符，需要借助Pattern中的flags。\"},\"2678\":{\"h\":\"Pattern与Matcher的使用\",\"a\":\"pattern与matcher的使用\"},\"2679\":{\"t\":\"必须首先将指定为字符串的正则表达式编译为此类的实例。\"},\"2680\":{\"t\":\"然后，可以使用生成的模式创建Matcher对象 \"},\"2681\":{\"t\":\"该对象可以将任意character sequences与正则表达式进行匹配。\"},\"2682\":{\"t\":\"参与执行匹配的所有状态都驻留在匹配器中，因此许多匹配器可以共享相同的模式。\"},\"2683\":{\"t\":\"//1.定义正则表达式 String regex = \\\"a*b\\\"; //2.创建Pattern类的实例：正则模式对象 Pattern p = Pattern.compile(regex,CASE_INSENSITIVE ); //3.创建Matcher类的实例：比较器 Matcher m = p.matcher(\\\"aaabbb\\\"); //4.使用比较器进行匹配：调用某个Matcher实例的方法，获取结果 boolean b = m.matches(); \"},\"2684\":{\"t\":\"提示\"},\"2685\":{\"t\":\"Pattern本身也可以调用很多正则方法，完成正则匹配。 不过，Matcher类的功能更加丰富。\"},\"2686\":{\"h\":\"Ⅰ. String\",\"a\":\"i-string\"},\"2687\":{\"t\":\"String类里也有很多涉及正则的方法。\"},\"2688\":{\"h\":\"1. replaceAll\",\"a\":\"_1-replaceall\"},\"2689\":{\"t\":\"使用正则全部替换。 使用参数replacement替换所有正则表达式匹配到的字符串部分。\"},\"2690\":{\"t\":\"参数1：正则表达式\"},\"2691\":{\"t\":\"参数2：用来替换匹配到的内容。\"},\"2692\":{\"t\":\"String replaceAll(String regex, String replacement); ====================================================== String s1 = \\\"I 1 am 2 a 3 Batman\\\"; String regex = \\\"\\\\\\\\d+\\\"; //设计正则表达式 String res = s1.replaceAll(regex, \\\"@\\\"); //进行替换 System.out.println(s1); //I 1 am 2 a 3 Batman System.out.println(res); //I @ am @ a @ Batman \"},\"2693\":{\"h\":\"2. replaceFirst\",\"a\":\"_2-replacefirst\"},\"2694\":{\"t\":\"使用参数replacement替换正则表达式匹配到的第一个字符串部分。\"},\"2695\":{\"t\":\"参数1：正则表达式\"},\"2696\":{\"t\":\"参数2：用来替换正则表达式第一个匹配到的内容\"},\"2697\":{\"t\":\"String replaceFirst(String regex, String replacement); ======================================================= String s1 = \\\"I 1 am 2 a 3 Batman\\\"; String regex = \\\"\\\\\\\\d+\\\"; String res = s1.replaceFirst(regex, \\\"@\\\"); System.out.println(s1); //I 1 am 2 a 3 Batman System.out.println(res);//I @ am 2 a 3 Batman,只有第一个数字没替换了 \"},\"2698\":{\"h\":\"3. matches\",\"a\":\"_3-matches\"},\"2699\":{\"t\":\"判断参数字符串是否匹配到了给定的正则表达式。\"},\"2700\":{\"t\":\"boolean matches(String regex); ================================== String regex = \\\"a.b\\\"; String s1 = \\\"abb\\\"; boolean res = s1.matches(regex); System.out.println(res);//true \"},\"2701\":{\"h\":\"4. split\",\"a\":\"_4-split\"},\"2702\":{\"t\":\"根据给定正则表达式的匹配拆分此字符串。\"},\"2703\":{\"t\":\"可以指定第二个参数：limit，表示切片最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。\"},\"2704\":{\"t\":\"返回值：返回值是个字符串数组，而非字符串，数组的每个元素就是源字符串切后的小字符串。\"},\"2705\":{\"t\":\"String[] split(String regex); String[] split(String regex, int limit); String s3 = \\\"I am Bat Van\\\"; String[] s4 = s3.split(\\\" \\\"); //根据空格分割 System.out.println(s4[1]); //am \"},\"2706\":{\"h\":\"Ⅱ. Pattern\",\"a\":\"ii-pattern\"},\"2707\":{\"t\":\"位置\"},\"2708\":{\"t\":\"rt.jar>java>util>regex>Pattern.java [class]\"},\"2709\":{\"t\":\"反复使用一个正则表达式字符串进行匹配效率较低，可以把正则表达式字符串编译成Pattern对象，然后反复使用该对象，实现一次编译多次使用。\"},\"2710\":{\"t\":\"pattern (模式器) 与 matcher (匹配器) 搭配使用实现对字符序列的检索和指定模式匹配。\"},\"2711\":{\"h\":\"结构\",\"a\":\"结构\"},\"2712\":{\"t\":\"public final class Pattern implements java.io.Serializable{ private String pattern; ... } \"},\"2713\":{\"h\":\"构造器\",\"a\":\"构造器\"},\"2714\":{\"t\":\"Pattern类的构造器是private，不能通过new创建示例，需要调用静态方法compile返回Pattern实例。\"},\"2715\":{\"h\":\"1. compile\",\"a\":\"_1-compile\"},\"2716\":{\"t\":\"返回一个Pattern对象，参数是String正则表达式。 Java的String正则表达式是无法表示模式修饰符的，可以使用第二个参数flags指明模式修饰符。\"},\"2717\":{\"t\":\"Pattern compile(String regex); Pattern compile(String regex, int flags); =========================================== String regex = \\\"\\\\\\\\d\\\"; Pattern pattern = Pattern.compile(regex); \"},\"2718\":{\"h\":\"2. flags\",\"a\":\"_2-flags\"},\"2719\":{\"t\":\"falgs表示模式Pattern对象的模式修饰符，在创建Pattern对象的时候，可以指定。\"},\"2720\":{\"t\":\"CASE_INSENSITIVE：忽略大小写 \"},\"2721\":{\"t\":\"也可以通过表达式添加(?i)来启用。\"},\"2722\":{\"t\":\"MULTILINE：开启多行模式(?m)； \"},\"2723\":{\"t\":\"此时每行都能单独匹配^或$。\"},\"2724\":{\"t\":\"不开多行模式的话整个字符串会被视作一行（加\\\\n也没用）。\"},\"2725\":{\"t\":\"DOTALL：开启dotAll模式(?s)； \"},\"2726\":{\"t\":\"此时字符.可以匹配一切字符，包括换行符。\"},\"2727\":{\"t\":\"UNICODE_CASE：支持Unicode的忽略大小写 \"},\"2728\":{\"t\":\"与CASE_INSENSITIVE的不同，未知。\"},\"2729\":{\"t\":\"CANON_EQ：使规范等价 \"},\"2730\":{\"t\":\"用法：未知\"},\"2731\":{\"t\":\"UNIX_LINES：Unix行模式 \"},\"2732\":{\"t\":\"在此模式中，只有'\\\\n'行结束符在.^和$的行为中被识别\"},\"2733\":{\"t\":\"LITERAL：启用文字解析 \"},\"2734\":{\"t\":\"表达式中的所有元字符转义字符将不具备特殊含义。\"},\"2735\":{\"t\":\"UNICODE_CHARACTER_CLASS：启用Unicode版本的预定义字符类和POSIX字符类。 \"},\"2736\":{\"t\":\"用法未知\"},\"2737\":{\"t\":\"COMMENTS：允许在表达式中使用空格和注释 \"},\"2738\":{\"t\":\"空格将被忽略，并且以#开头的注释也会被忽略。\"},\"2739\":{\"t\":\"flags()\"},\"2740\":{\"t\":\"flags方法：返回此模式的匹配标志\"},\"2741\":{\"t\":\"int flags(); \"},\"2742\":{\"h\":\"3. matcher\",\"a\":\"_3-matcher\"},\"2743\":{\"t\":\"获取Matcher类的实例。\"},\"2744\":{\"t\":\"Matcher类的构造方法也是私有的,不能随意创建,只能通过Pattern.matcher(CharSequence input)方法得到该类的实例。Pattern类只能做一些简单的匹配操作,要想得到更强更便捷的正则匹配操作,那就需要将Pattern与Matcher一起合作。\"},\"2745\":{\"t\":\"Matcher类提供了对正则表达式的分组支持,以及对正则表达式的多次匹配支持。\"},\"2746\":{\"t\":\"该方法的参数是：待匹配的CharSequence（string）。\"},\"2747\":{\"t\":\"Matcher matcher(CharSequence input); ================================================================ String regex = \\\"\\\\\\\\d{4,}\\\"; //定义String正则表达式 String s1 = \\\"1223\\\";//待匹配的字符串 Pattern pattern = Pattern.compile(regex);//创建模式器 Matcher matcher = pattern.matcher(s1);//创建比较器 boolean res = matcher.matches();//调用比较器的某个方法进行正则匹配 System.out.println(res);//true,获取匹配的结果 \"},\"2748\":{\"h\":\"4. pattern\",\"a\":\"_4-pattern\"},\"2749\":{\"t\":\"返回该模式器的String类型的正则表达式。\"},\"2750\":{\"t\":\"String pattern(); ========================================= Pattern p = Pattern.compile(\\\"\\\\\\\\d{4,}\\\"); String regex = p.pattern(); System.out.println(regex);//\\\\d{4,} \"},\"2751\":{\"h\":\"5. matches\",\"a\":\"_5-matches\"},\"2752\":{\"t\":\"精准匹配：判断参数字符串是否匹配到了Pattern实例指定的正则表达式。\"},\"2753\":{\"t\":\"参数1：regex，正则表达式；\"},\"2754\":{\"t\":\"参数2：input，要匹配的字符序列\"},\"2755\":{\"t\":\"返回值：Boolean，正则表达式是否与字符序列匹配\"},\"2756\":{\"t\":\"boolean matches​(String regex, CharSequence input); ================================================================ String regex = \\\"\\\\\\\\d{4,}\\\"; String s1 = \\\"1223\\\"; Pattern p = Pattern.compile(regex);//创建Pattern对象 boolean res = p.matches(regex,s1);//注意：这里还是需要指定正则表达式 System.out.println(res);//true \"},\"2757\":{\"h\":\"6. split\",\"a\":\"_6-split\"},\"2758\":{\"t\":\"参数1：input，要拆分的字符序列；\"},\"2759\":{\"t\":\"参数2：limit，可选，拆分的数目，表示切片最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。\"},\"2760\":{\"t\":\"String[] split​(CharSequence input); ===================================================== String regex = \\\",\\\"; String s1 = \\\"1223\\\"; Pattern p = Pattern.compile(regex); String[] res = p.split(\\\"a,b,c,d\\\"); System.out.println(Arrays.toString(res));//[a, b, c, d] \"},\"2761\":{\"h\":\"Ⅲ. Matcher\",\"a\":\"iii-matcher\"},\"2762\":{\"t\":\"位置\"},\"2763\":{\"t\":\"rt.jar>java>util>regex>Matcher.java 【class】\"},\"2764\":{\"h\":\"结构\",\"a\":\"结构-1\"},\"2765\":{\"t\":\"public final class Matcher implements MatchResult{ Pattern parentPattern; int[] groups; int from,to; ... } \"},\"2766\":{\"h\":\"实例化\",\"a\":\"实例化\"},\"2767\":{\"t\":\"Matcher类的构造方法是私有的,不能随意创建,只能通过Pattern.matcher(CharSequence input)方法得到该类的实例。\"},\"2768\":{\"t\":\"对照Matcher构造器源码，可知构造器将Pattern对象的引用赋于Matcher中变量parentPattern，目标字符串赋于变量text；并创建了数组groups和locals 。\"},\"2769\":{\"t\":\"数组groups是组使用的存储。存储的是当前匹配的各捕获组的first和last信息。-\"},\"2770\":{\"h\":\"Matcher的状态\",\"a\":\"matcher的状态\"},\"2771\":{\"t\":\"Matcher对象是一个状态机器，在创建Matcher对象后，Matcher会初始化很多匹配的状态信息，这些信息都是私有的，没法直接获取。 对于非完全匹配（精准匹配），这些信息是很有用的。\"},\"2772\":{\"h\":\"2.JDK.util包\"},\"2773\":{\"t\":\"位置\"},\"2774\":{\"t\":\"rt.jar>java>util>Scanner.java 【class】\"},\"2775\":{\"t\":\"用来扫描输入文本的类。 Scanner类的用法很多，这里只介绍简单的命令行，方便进行一些测试。\"},\"2776\":{\"t\":\"结构\"},\"2777\":{\"t\":\"public final class Scanner implements Iterator<String>,Closeable{ .... } \"},\"2778\":{\"t\":\"使用 通过Scanner类来获取用户的输入。\"},\"2779\":{\"t\":\"通过 Scanner 类的 next() 与 nextLine() 方法获取输入的字符串，在读取前我们一般需要使用hasNext 与 hasNextLine 判断是否还有输入的数据。\"},\"2780\":{\"h\":\"1. new Scanner\",\"a\":\"_1-new-scanner\"},\"2781\":{\"t\":\"构建一个Scanner对象，他生产从指定输入流扫描的值。当参数为System.in：表示从键盘获取输入的内容。\"},\"2782\":{\"t\":\"Scanner(InputStream source);//这只是构造方法之一 Scanner scan = new Scanner(System.in); \"},\"2783\":{\"h\":\"2. next\",\"a\":\"_2-next\"},\"2784\":{\"t\":\"从此扫描仪查找并返回下一个完整令牌。\"},\"2785\":{\"t\":\"用户从键盘输入内容，按回车即输入完毕，输入完毕后，Scanner.next方法就获取输入的内容。\"},\"2786\":{\"t\":\"无参数：对即将获取的内容无限制。\"},\"2787\":{\"t\":\"有参数：参数可以是String类型的正则或者Pattern类，该参数将限制接下来要输入的数据格式，只有与正则匹配的内容才可以。\"},\"2788\":{\"t\":\"String next(); String next(String pattern); String next(Pattern pattern); Scanner scan = new Scanner(System.in); System.out.println(\\\"请输入姓名\\\"); String next = scan.next();//键盘输入：hello System.out.println(next);//hello \"},\"2789\":{\"t\":\"效果\"},\"2790\":{\"t\":\"执行代码；弹出命令行窗口，显示打印的字符：请输入姓名\"},\"2791\":{\"t\":\"可以在键盘输入字符，点击Enter键完成输入\"},\"2792\":{\"t\":\"输入完毕后，scan.next方法获取输入的字符串，并继续向下执行代码\"},\"2793\":{\"t\":\"代码执行完毕，命令行交互结束\"},\"2794\":{\"h\":\"3. nextXxx\",\"a\":\"_3-nextxxx\"},\"2795\":{\"t\":\"next方法，会将获取的索引内容都当做字符串处理。\"},\"2796\":{\"t\":\"也可以调用nextXxx方法（Xxx为基本数据类型），限制输入的字符类型。\"},\"2797\":{\"t\":\"对于Number类型的Xxx有一个可选参数 radix，radix指的是进制。 \"},\"2798\":{\"t\":\"radix取值为：2~36，即：最小是2进制，最大是36进制。\"},\"2799\":{\"t\":\"输入数据时如果输入的值超过了进制或者超过了数据类型的范围，或者与数据类型不符都会报错。\"},\"2800\":{\"t\":\"对于输入的非十进制数据，获取后的值依然是十进制。\"},\"2801\":{\"t\":\"注意：Scanner没有提供Char类型next方法\"},\"2802\":{\"t\":\"byte nextByte(int radix); boolean nextBoolean(); short nextShrot(int radix); int nextInt(int radix); long nextLong(int radix); float nextFloat(int radix); double nextDouble(int radix); BigInteger nextBigInter(int radix); BigDecimal nextBigDecimal(); Scanner scan = new Scanner(System.in); System.out.println(\\\"请输入\\\"); int next = scan.nextByte(2);//Byte类型的二进制数据 //键入：11111 System.out.println(next);//31,11111自动转为了十进制 \"},\"2803\":{\"h\":\"1-1. Java介绍\"},\"2804\":{\"h\":\"1. Java内容分类\",\"a\":\"_1-java内容分类\"},\"2805\":{\"t\":\"Java SE：Java标准版；一开始是用于开发桌面级应用的，现在成了Java基础（去除桌面相关的API）。\"},\"2806\":{\"t\":\"Java EE：Java企业版；主要用于应用后台开发。\"},\"2807\":{\"t\":\"Java ME：Java移动版，已经被Android取代。\"},\"2808\":{\"h\":\"2. Java主要应用方向\",\"a\":\"_2-java主要应用方向\"},\"2809\":{\"t\":\"企业级应用：主要是软件后台API\"},\"2810\":{\"t\":\"Android\"},\"2811\":{\"t\":\"大数据开发\"},\"2812\":{\"h\":\"3. Java的特点\",\"a\":\"_3-java的特点\"},\"2813\":{\"t\":\"面向对象\"},\"2814\":{\"t\":\"健壮性：吸收了C的优点，提供了一个相对安全的内存管理和访问机制。\"},\"2815\":{\"t\":\"跨平台：运行在JVM，JVM在各个平台都有。 \"},\"2816\":{\"t\":\"JVM：一个运行Java的虚拟机，可以在各个平台运行，因此JAVA代码就可以在各个平台运行。\"},\"2817\":{\"h\":\"4. Java的核心机制\",\"a\":\"_4-java的核心机制\"},\"2818\":{\"h\":\"4.1 Java虚拟机\",\"a\":\"_4-1-java虚拟机\"},\"2819\":{\"t\":\"JVM：Java Virtal Machine\"},\"2820\":{\"t\":\"JVM 是一个虚拟的计算机，具有指令集并使用不同的存储区域。负责执行指令，管理数据、内存、寄存器。\"},\"2821\":{\"t\":\"对于不同的平台，有不同的虚拟机；只有某平台提供了对应的java虚拟机，java程序才可在此平台运行。\"},\"2822\":{\"t\":\"Java虚拟机机制屏蔽了底层运行平台的差别，实现了“一次编译，到处运行”【跨平台本质】\"},\"2823\":{\"t\":\"开发者->代码->JVM编译->操作系统运行\"},\"2824\":{\"h\":\"4.2 垃圾收集机制\",\"a\":\"_4-2-垃圾收集机制\"},\"2825\":{\"t\":\"Java可以自动进行垃圾回收，将不用内存收回（比如没有变量指向的对象）。\"},\"2826\":{\"h\":\"5. Java版本选择\",\"a\":\"_5-java版本选择\"},\"2827\":{\"t\":\"目前常用的Jave8(1.8)，开发中使用Java8以上版本。\"},\"2828\":{\"h\":\"6. 概念补充\",\"a\":\"_6-概念补充\"},\"2829\":{\"h\":\"6.1 软件运行方式\",\"a\":\"_6-1-软件运行方式\"},\"2830\":{\"t\":\"GUI：Graphical User Interface；图形化界面。\"},\"2831\":{\"t\":\"CLI：Command Line Interface；命令行方式。\"},\"2832\":{\"h\":\"6.2 编程语言介绍\",\"a\":\"_6-2-编程语言介绍\"},\"2833\":{\"t\":\"机器语言：第一代，指令以二进制代码形式存在。\"},\"2834\":{\"t\":\"汇编语言：第二代，使用助记符表示一条机器指令。\"},\"2835\":{\"t\":\"高级语言：第三代 \"},\"2836\":{\"t\":\"面向过程语言：C语言等\"},\"2837\":{\"t\":\"面向对象语言：JAVA、PHP、Python\"},\"2838\":{\"h\":\"1-2. 环境搭建\"},\"2839\":{\"h\":\"Ⅰ. 开发环境搭建\",\"a\":\"i-开发环境搭建\"},\"2840\":{\"t\":\"官网\"},\"2841\":{\"h\":\"1. 环境介绍\",\"a\":\"_1-环境介绍\"},\"2842\":{\"h\":\"1.1 JRE\",\"a\":\"_1-1-jre\"},\"2843\":{\"t\":\"Java Runtime Environment Java 运行环境\"},\"2844\":{\"t\":\"用来运行Java的环境，包括Java虚拟机和Java程序所需的核心类库等，只需要运行JAVA程序可以下载这个（服务器就要单独下载这个）。\"},\"2845\":{\"h\":\"1.2 JDK\",\"a\":\"_1-2-jdk\"},\"2846\":{\"t\":\"JDK：Java Development Kit Java 开发工具包\"},\"2847\":{\"t\":\"Java开发人员使用的，其中包含了java的开发工具，也包括了JRE。所以安装了JDK，就不用在单独安装JRE了。\"},\"2848\":{\"h\":\"1.3 JDK、JRE、JVM的关系\",\"a\":\"_1-3-jdk、jre、jvm的关系\"},\"2849\":{\"t\":\"JDK = JRE + 开发工具集（例如Javac编译工具等）\"},\"2850\":{\"t\":\"JRE = JVM + Java SE标准类库\"},\"2851\":{\"h\":\"2. 安装JDK：windows\",\"a\":\"_2-安装jdk-windows\"},\"2852\":{\"t\":\"JDK8下载地址\"},\"2853\":{\"t\":\"傻瓜式安装即可。版本选择：jdk-8u321-windows-x64（最基础版本）\"},\"2854\":{\"t\":\"注意：当提示安装 JRE 时，正常在JDK安装时已经装过了，但是为了后续使用Eclipse等开发工具不报错，建议也根据提示安装JRE。\"},\"2855\":{\"h\":\"3. 环境变量path配置：windows\",\"a\":\"_3-环境变量path配置-windows\"},\"2856\":{\"h\":\"3.1 直接配置path\",\"a\":\"_3-1-直接配置path\"},\"2857\":{\"t\":\"将jdk bin目录添加到path。\"},\"2858\":{\"t\":\"地址示例：D:\\\\Java\\\\Soft\\\\JDK\\\\jdk1.8.0_321\\\\bin\"},\"2859\":{\"h\":\"3.2 多版本JDK\",\"a\":\"_3-2-多版本jdk\"},\"2860\":{\"t\":\"当安装了多个版本的JDK时，环境变量配置的是哪个就使用的哪个版本。如果都配置了，就看谁在上面（前面）。\"},\"2861\":{\"t\":\"对于IDE开发工具来时，简单设置就可以随意切换Java版本。\"},\"2862\":{\"h\":\"4. 配置JAVA_HOME\",\"a\":\"_4-配置java-home\"},\"2863\":{\"t\":\"先配置个JAVA_HOME环境变量，然后使用该环境变量配置path\"},\"2864\":{\"t\":\"意义：tomcat服务器启动时，会自动识别JAVA_HOME这个变量，来启动。\"},\"2865\":{\"h\":\"4.1 创建变量\",\"a\":\"_4-1-创建变量\"},\"2866\":{\"t\":\"1-2-1\"},\"2867\":{\"h\":\"4.2 使用变量\",\"a\":\"_4-2-使用变量\"},\"2868\":{\"t\":\"1-2-2\"},\"2869\":{\"h\":\"Ⅱ. 生产环境搭建\",\"a\":\"ii-生产环境搭建\"},\"2870\":{\"t\":\"OS：CentOS 9 Stream\"},\"2871\":{\"t\":\"Java Version：JDK17\"},\"2872\":{\"h\":\"1. yum安装\",\"a\":\"_1-yum安装\"},\"2873\":{\"t\":\"yum -y list java* # 列出所有的java \"},\"2874\":{\"t\":\"有多个Java版本，且可安装内容不止有jdk，还有javadoc等。\"},\"2875\":{\"t\":\"1-2-3\"},\"2876\":{\"t\":\"进行安装java17：\"},\"2877\":{\"t\":\"# 安装指定版本的所有Java内容 yum -y install java-17-openjdk* # 查看安装：查看版本信息 java -version # 安装目录 cd /usr/lib/jvm # 卸载 yum -y remove java-17-openjdk* \"},\"2878\":{\"h\":\"1-3. 基本语法\"},\"2879\":{\"h\":\"Ⅰ. 编译执行\",\"a\":\"i-编译执行\"},\"2880\":{\"h\":\"1. Java执行过程\",\"a\":\"_1-java执行过程\"},\"2881\":{\"t\":\" 示例：\"},\"2882\":{\"t\":\"//文件：workpace/test.java class Hello{ public static void main(String[] args){ //单行注释 System.out.println(\\\"fuck world\\\"); } } //命令行编译：需要在文件所在位置执行命令 workplace>javac test.java workplace>java Hello \"},\"2883\":{\"t\":\"编写：将 Java 代码 编写到扩展名为 .java 的文件中\"},\"2884\":{\"t\":\"编译：通过过 javac 命令对该 java 文件进行编译，编译为class文件\"},\"2885\":{\"t\":\"运行：通过 java 命令对生成的 class 文件进行\"},\"2886\":{\"h\":\"2. 执行过程解析\",\"a\":\"_2-执行过程解析\"},\"2887\":{\"h\":\"2.1 编译代码\",\"a\":\"_2-1-编译代码\"},\"2888\":{\"t\":\"javac test.java \"},\"2889\":{\"t\":\"使用javac 命令来编译代码的源文件（文件名区分大小写），将其编译成JVM可识别的二进制文件（字节码文件）。 \"},\"2890\":{\"t\":\"编译成功后，会在当前目录下生成一个编译后的文件（源文件还在）。\"},\"2891\":{\"t\":\"编译后的文件以代码中的类名作为文件名（Hello），以.class作为后缀。\"},\"2892\":{\"t\":\"如果代码进行过修改，就需要重新编译（新编译后的文件会覆盖原文件）。\"},\"2893\":{\"h\":\"2.2 运行代码\",\"a\":\"_2-2-运行代码\"},\"2894\":{\"t\":\"java Hello \"},\"2895\":{\"t\":\"运行的是编译后的.class结尾的文件。使用java命令进行运行\"},\"2896\":{\"t\":\"执行文件时，不要加文件后缀。\"},\"2897\":{\"h\":\"2.3 注意事项\",\"a\":\"_2-3-注意事项\"},\"2898\":{\"t\":\"命令行的编译和执行，需要在文件所在目录执行命令\"},\"2899\":{\"t\":\"使用IDE或者智能编辑器，可以直接在编辑器里运行，自动编译执行。\"},\"2900\":{\"h\":\"3. 基本语法规则\",\"a\":\"_3-基本语法规则\"},\"2901\":{\"h\":\"3.1 class：类\",\"a\":\"_3-1-class-类\"},\"2902\":{\"t\":\"在一个java源文件中可以声明多个class。\"},\"2903\":{\"t\":\"只能最多有一个类声明为public的。\"},\"2904\":{\"t\":\"声明为public的类的类名必须与源文件名相同。\"},\"2905\":{\"h\":\"3.2 main：入口\",\"a\":\"_3-2-main-入口\"},\"2906\":{\"t\":\"程序的入口是main()方法。格式是固定的，必须有main方法，不然只能编译不能执行。 运行class文件时，就是从main方法开始运行的。\"},\"2907\":{\"h\":\"3.3 注意\",\"a\":\"_3-3-注意\"},\"2908\":{\"t\":\"每一行执行语句都以 ; 结束。\"},\"2909\":{\"t\":\"如果文件里有public修饰的类，则文件名必须与类名一样，不然会编译失败。\"},\"2910\":{\"h\":\"4. 输出语句\",\"a\":\"_4-输出语句\"},\"2911\":{\"t\":\"一般用于测试：\"},\"2912\":{\"t\":\"System.out.println(): 先输出数据，然后换行\"},\"2913\":{\"t\":\"System.out.print(): 只输出数据\"},\"2914\":{\"h\":\"5. 基本使用测试\",\"a\":\"_5-基本使用测试\"},\"2915\":{\"h\":\"5.1 包含两个类的java文件，编译后生成了两个class文件\",\"a\":\"_5-1-包含两个类的java文件-编译后生成了两个class文件\"},\"2916\":{\"t\":\"public class Hello{ } class Hi{ } //############################# javac Hello.java; //在当前目录下生成了两个class文件：Hello.class和Hi.class \"},\"2917\":{\"h\":\"5.2 没有main文件，直接运行会报错\",\"a\":\"_5-2-没有main文件-直接运行会报错\"},\"2918\":{\"t\":\"public class Hello{ } class Hi{ } //############################ javac Hello.java; //先编译 java Hello; //执行Hello.class java Hi; //执行Hi.class \"},\"2919\":{\"t\":\"执行结果如下：\"},\"2920\":{\"t\":\"1-3-2\"},\"2921\":{\"h\":\"5.3 结论\",\"a\":\"_5-3-结论\"},\"2922\":{\"t\":\"一个文件可以有多个class，编译后，有几个class就形成几个文件，文件名就是类名；\"},\"2923\":{\"t\":\"想单独执行某个class，则该class必须有main方法，不然无法执行。\"},\"2924\":{\"t\":\"备注：可以在有main方法的类中，调用没有main方法的class文件（调用他的方法），因此main方法并非是类的必备方法\"},\"2925\":{\"h\":\"Ⅱ. 注释\",\"a\":\"ii-注释\"},\"2926\":{\"h\":\"1. 注释的意义\",\"a\":\"_1-注释的意义\"},\"2927\":{\"t\":\"生成api文档\"},\"2928\":{\"t\":\"增加可读性\"},\"2929\":{\"t\":\"调试。\"},\"2930\":{\"t\":\"整理思路，先写注释后写具体代码\"},\"2931\":{\"h\":\"2. 单行注释\",\"a\":\"_2-单行注释\"},\"2932\":{\"t\":\"//这里是单行注释 \"},\"2933\":{\"h\":\"3. 多行注释\",\"a\":\"_3-多行注释\"},\"2934\":{\"t\":\"/* 这里是多行注释 可以写多行 */ \"},\"2935\":{\"h\":\"4. 文档注释\",\"a\":\"_4-文档注释\"},\"2936\":{\"t\":\"文档注释可以用来生成API文档，写文档注释时要按照一定的格式来写。\"},\"2937\":{\"t\":\"/** @author jinno @version 1.0.8 */ \"},\"2938\":{\"t\":\"位置：放在类，接口，构造函数，方法或字段声明之前（方法中不要加）。\"},\"2939\":{\"t\":\"块标记：以@作为标记区分每个注释块的内容\"},\"2940\":{\"t\":\"HTML：可以在注释里写HTML标签，生成的文档会解析HTML代码。\"},\"2941\":{\"h\":\"Ⅲ. 文档注释格式\",\"a\":\"iii-文档注释格式\"},\"2942\":{\"h\":\"1. 通用文档标记\",\"a\":\"_1-通用文档标记\"},\"2943\":{\"t\":\"适用于类、接口、方法、变量、常量等。\"},\"2944\":{\"t\":\"@link：用于快速链接到相关代码，使用格式：{@link 包名.类名#方法名(参数类型)}\"},\"2945\":{\"t\":\"注意：该标记外外面必须加{}，没有这个大引号，就无法直接跳转到目标代码了\"},\"2946\":{\"t\":\"完全限定的类名：{@link java.util.Collections}\"},\"2947\":{\"t\":\"省略包名，只写类名：{@link String}\"},\"2948\":{\"t\":\"省略类名，表示指向当前的某一方法：{@link #toString}\"},\"2949\":{\"t\":\"完全限定方法名，指向某类的某个方法：{@link java.lang.String#charAt(int)}\"},\"2950\":{\"t\":\"@code：将文本标记为代码样式文本，一般在Javadoc中只要涉及到类名或者方法名，都需要使用@code进行标记，使用格式：{@code text}，其会被解析为 text。 \"},\"2951\":{\"t\":\"标记类名：{@code ArrayList}\"},\"2952\":{\"t\":\"标记方法名：{@code isEmpty}\"},\"2953\":{\"t\":\"标记某个代码关键字：{@code null}\"},\"2954\":{\"t\":\"/** * {@link java.util.Collections} * {@link String} * {@link #say(String word)} * {@link java.lang.String#charAt(int)} * {@code ArrayList} * {@code isEmpty} * {@code null} */ \"},\"2955\":{\"h\":\"2. 类上常用文档标记\",\"a\":\"_2-类上常用文档标记\"},\"2956\":{\"t\":\"@author 类的作者，后面跟作者名或邮箱、官网等 \"},\"2957\":{\"t\":\"如果一段程序是由多个作者来维护，则可以标记多个@author\"},\"2958\":{\"t\":\"@param：如果一个类支持泛型时，可以通过@param来解释泛型的类型\"},\"2959\":{\"t\":\"@version 用于标记当前类版本，默认为1.0\"},\"2960\":{\"t\":\"@see 参考链接，用于标记与本类相关联的类，该标注可以用在类或方法上\"},\"2961\":{\"t\":\"@since：表示从以下版本开始有这个类，标记文件创建时项目当时对应的版本，后面可以跟版本号或是时间。\"},\"2962\":{\"t\":\"/** * this {@code Hello} class is very good; * <h1>作用</h1> * 用于测试基JavaSE语法 * <p>比如，文档注释是可以写标签的</p> * </pre></blockquote><p> * Here are some more examples of how strings can be used: * <blockquote><pre> * System.out.println(\\\"abc\\\"); * String cde = \\\"cde\\\"; * System.out.println(\\\"abc\\\" + cde); * String c = \\\"abc\\\".substring(2,3); * String d = cde.substring(1, 2); * </pre></blockquote> //上面的就是文档的概要描述和详细描述 * @author Aaron * @version 1.0.0 * @see java.util.stream.LongStream * @since 1.0.0 * @param <E> the type of elements in this list */ public class Hello<E> { .... } \"},\"2963\":{\"t\":\"以上是类上常用的文档标注，类上的文档格式如下：\"},\"2964\":{\"t\":\"概要描述：通常用一段话简要的描述该类的基本内容。\"},\"2965\":{\"t\":\"详细描述：通常用几大段话详细描述该类的功能与相关情况。 \"},\"2966\":{\"t\":\"这里常使用很多html标签\"},\"2967\":{\"t\":\"文档标注：用于标注该类的作者、时间、版本、参略等信息。\"},\"2968\":{\"h\":\"3. 方法上常用文档标记\",\"a\":\"_3-方法上常用文档标记\"},\"2969\":{\"t\":\"@param：方法的参数名，包括参数描述。\"},\"2970\":{\"t\":\"@return：返回值的描述。\"},\"2971\":{\"t\":\"@throws：异常的类型和异常的描述，用于方法需要抛出异常的情况\"},\"2972\":{\"t\":\"@exception：方法签名throws对应的异常\"},\"2973\":{\"t\":\"@see：类和方法都可以用，表示参考的类和方法\"},\"2974\":{\"t\":\" /** * this{@code say}function is asshole * <h1>作用</h1> * <p> 用来输出一段话</p> * @param word String,the value will return * @return String,the function's param * @throws Exception some Accidental error */ public static String say(String word) throws Exception{ return \\\"hello\\\"+word; } \"},\"2975\":{\"t\":\"以上是方法上常用的文档标注，方法上的文档格式如下：\"},\"2976\":{\"t\":\"概要描述：通常用一段话简要的描述该方法的基本内容。\"},\"2977\":{\"t\":\"详细描述：通常用几大段话详细描述该方法的功能与相关情况。\"},\"2978\":{\"t\":\"文档标注：用于标注该方法的参数、返回值、异常、参略等信息\"},\"2979\":{\"h\":\"4. 使用命令行生成API文档\",\"a\":\"_4-使用命令行生成api文档\"},\"2980\":{\"t\":\"用wiodow打开cmd终端，然后进入要编译的java文件目录的路径中。\"},\"2981\":{\"t\":\"javadoc -encoding UTF-8 -charset UTF-8 *.java //*也可以表示具体的文件名 \"},\"2982\":{\"t\":\"编译成功后当前路径下会多出很多文件，点击打开index.html就可以查看文档了。\"},\"2983\":{\"t\":\"1-3-2\"},\"2984\":{\"h\":\"5. 使用IDE生成帮助文档\",\"a\":\"_5-使用ide生成帮助文档\"},\"2985\":{\"t\":\"提示\"},\"2986\":{\"t\":\"暂略\"},\"2987\":{\"h\":\"Ⅳ. 基本代码规范\",\"a\":\"iv-基本代码规范\"},\"2988\":{\"t\":\"正确的注释和注释风格 \"},\"2989\":{\"t\":\"使用文档注释来注释整个类或整个方法\"},\"2990\":{\"t\":\"如果注释方法中的某一个步骤，使用单行或多行注释。\"},\"2991\":{\"t\":\"正确的缩进和空白 \"},\"2992\":{\"t\":\"使用一次tab操作，实现缩进\"},\"2993\":{\"t\":\"运算符两边习惯性各加一个空格。比如：2 + 4 * 5。\"},\"2994\":{\"t\":\"大括号的风格: Java API 源代码选择了行尾风格（大括号不换行）\"},\"2995\":{\"h\":\"1-4. 变量\"},\"2996\":{\"h\":\"Ⅰ. 变量\",\"a\":\"i-变量\"},\"2997\":{\"h\":\"1. 概念\",\"a\":\"_1-概念\"},\"2998\":{\"t\":\"变量是内存中的一个存储区域，该区域的数据可以在同一类型范围内不断变化。\"},\"2999\":{\"t\":\"变量是程序中最基本的存储单元。包含变量类型、变量名和存储的值。\"},\"3000\":{\"h\":\"2. 作用\",\"a\":\"_2-作用\"},\"3001\":{\"t\":\"用于在内存中保存数据。\"},\"3002\":{\"h\":\"3. 声明变量\",\"a\":\"_3-声明变量\"},\"3003\":{\"h\":\"3.1 只声明\",\"a\":\"_3-1-只声明\"},\"3004\":{\"t\":\"语法：数据类型 变量名称\"},\"3005\":{\"t\":\"int var; //声明但未初始化 \"},\"3006\":{\"h\":\"3.2 变量的赋值\",\"a\":\"_3-2-变量的赋值\"},\"3007\":{\"t\":\"语法：变量名 = 值\"},\"3008\":{\"t\":\"int var; var = 10; //赋值的变量必须已经声明过了(无论有没有初始化) \"},\"3009\":{\"h\":\"3.3 声明的同时赋值\",\"a\":\"_3-3-声明的同时赋值\"},\"3010\":{\"t\":\"语法：数据类型 变量名 = 初始化值\"},\"3011\":{\"t\":\"int var = 10; //声明变量的同时进行初始化 \"},\"3012\":{\"h\":\"4. 变量的作用域\",\"a\":\"_4-变量的作用域\"},\"3013\":{\"t\":\"变量只有在其作用域内才有效；在哪个 {} 内定义，就在哪个 {} 中使用，跨 {} 找不到该标识符（报错）。\"},\"3014\":{\"h\":\"5. 使用变量的注意事项\",\"a\":\"_5-使用变量的注意事项\"},\"3015\":{\"t\":\"Java中每个变量必须先声明，后使用\"},\"3016\":{\"t\":\"使用变量时，该变量必须已经被初始化过了（赋值）。\"},\"3017\":{\"t\":\"同一个作用域内，不能定义重名的变量，会报错（java中不会发生变量覆盖，而是报错）。\"},\"3018\":{\"h\":\"6. 变量的分类\",\"a\":\"_6-变量的分类\"},\"3019\":{\"t\":\"java对于每一种数据都定义了明确的具体数据类型（强类型语言），在内存中分配了不同大小的内存空间。\"},\"3020\":{\"h\":\"6.1 按照数据类型\",\"a\":\"_6-1-按照数据类型\"},\"3021\":{\"t\":\"变量可以分为8种基本数据类型，和3种引用类型。\"},\"3022\":{\"t\":\"基本数据类型：primitive type \"},\"3023\":{\"t\":\"数值型： \"},\"3024\":{\"t\":\"整形 \"},\"3025\":{\"t\":\"byte\"},\"3026\":{\"t\":\"shot\"},\"3027\":{\"t\":\"int\"},\"3028\":{\"t\":\"long\"},\"3029\":{\"t\":\"浮点型 \"},\"3030\":{\"t\":\"float\"},\"3031\":{\"t\":\"double\"},\"3032\":{\"t\":\"字符型：char\"},\"3033\":{\"t\":\"布尔型：boolean\"},\"3034\":{\"t\":\"引用数据类型：reference type \"},\"3035\":{\"t\":\"类：class\"},\"3036\":{\"t\":\"接口：interface\"},\"3037\":{\"t\":\"数组：array[ ]\"},\"3038\":{\"h\":\"6.2 按照变量声明的位置\",\"a\":\"_6-2-按照变量声明的位置\"},\"3039\":{\"t\":\"成员变量：在方法体外，类体内声明的变量 \"},\"3040\":{\"t\":\"实例变量：不易static修饰\"},\"3041\":{\"t\":\"类变量：以static修饰\"},\"3042\":{\"t\":\"局部变量：在方法体内部声明的变量 \"},\"3043\":{\"t\":\"形参：方法、构造器中定义的变量\"},\"3044\":{\"t\":\"方法的局部变量：在方法内定义\"},\"3045\":{\"t\":\"代码块局部变量：在代码块内定义\"},\"3046\":{\"t\":\"注意：局部变量除形参外，需显式初始化\"},\"3047\":{\"h\":\"Ⅱ. 关键字\",\"a\":\"ii-关键字\"},\"3048\":{\"h\":\"1. 介绍\",\"a\":\"_1-介绍\"},\"3049\":{\"t\":\"关键字和保留字是被Java 语言赋予了特殊含义，用做专门用途的字符串（单词）\"},\"3050\":{\"t\":\"特点：关键字中所有字母都为小写\"},\"3051\":{\"h\":\"2. 关键字汇总\",\"a\":\"_2-关键字汇总\"},\"3052\":{\"t\":\"官方地址\"},\"3053\":{\"h\":\"3. 保留字\",\"a\":\"_3-保留字\"},\"3054\":{\"t\":\"现有Java版本尚未使用，但以后版本可能会作为关键字使用。自己命名标识符时要避免使用这些保留字 ：goto 、const\"},\"3055\":{\"h\":\"Ⅲ. 标识符\",\"a\":\"iii-标识符\"},\"3056\":{\"t\":\"Java 对各种 变量、 方法和 类等要素命名时使用的字符序列称为标识符；\"},\"3057\":{\"t\":\"也就是凡是自己可以起名字的地方都叫标识符\\\\\"},\"3058\":{\"h\":\"1. 合法标识符规则\",\"a\":\"_1-合法标识符规则\"},\"3059\":{\"t\":\"规则是必须遵守的\"},\"3060\":{\"t\":\"由26 个英文字母大小写，0-9 ，_或 或 $ 组成\"},\"3061\":{\"t\":\"数字不可以开头。\"},\"3062\":{\"t\":\"不可以使用关键字和保留字，但能包含关键字和保留字。\"},\"3063\":{\"t\":\"Java 中严格区分大小写，长度无限制。\"},\"3064\":{\"t\":\"标识符不能包含空格。\"},\"3065\":{\"h\":\"2. 命名规范\",\"a\":\"_2-命名规范\"},\"3066\":{\"t\":\"规范是最好遵守的\"},\"3067\":{\"t\":\"包名【全小写】：多单词组成时所有字母都小写：xxxyyyzzz\"},\"3068\":{\"t\":\"类名、接口名【大驼峰】：多单词组成时，所有单词的首字母大写：XxxYyyZzz\"},\"3069\":{\"t\":\"变量名、方法名【小驼峰】：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：xxxYyyZzz\"},\"3070\":{\"t\":\"常量名【全大写下划线分隔】：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ\"},\"3071\":{\"h\":\"1-5. 基本数据类型\"},\"3072\":{\"h\":\"Ⅰ. 整形：4种\",\"a\":\"i-整形-4种\"},\"3073\":{\"h\":\"1. 说明\",\"a\":\"_1-说明\"},\"3074\":{\"t\":\"Java各整数类型有固定的表数范围和字段长度，不受具体OS的影响，以保证java程序的可移植性。 四种整形仅仅是储存空间大小和表示的数据范围有区别。\"},\"3075\":{\"h\":\"2. 四种整形的对比\",\"a\":\"_2-四种整形的对比\"},\"3076\":{\"t\":\"通常定义整形变量时，使用int。\"},\"3077\":{\"t\":\"1-5-1\"},\"3078\":{\"h\":\"3. 注意事项\",\"a\":\"_3-注意事项\"},\"3079\":{\"t\":\"给变量赋值时，如果值超过了变量类型规定的范围，将编译失败\"},\"3080\":{\"t\":\"声明long类型时，必须以“l\\\"或”L\\\"结尾。\"},\"3081\":{\"h\":\"4. 使用示例\",\"a\":\"_4-使用示例\"},\"3082\":{\"t\":\"byte age = 20; short pet = 2; int houseNum = 10000000000000000; long money = 146841646541651654681L; \"},\"3083\":{\"h\":\"5. 默认整形\",\"a\":\"_5-默认整形\"},\"3084\":{\"t\":\"java的整型常量默认为 int 型，java程序中变量通常声明为int型，除非不足以表示较大的数，才使用long\"},\"3085\":{\"h\":\"Ⅱ. 浮点类型：2种\",\"a\":\"ii-浮点类型-2种\"},\"3086\":{\"h\":\"1. 说明\",\"a\":\"_1-说明-1\"},\"3087\":{\"t\":\"和整形类似，Java 浮点类型也有固定的表示范围和字段长度，不受具体操作系统的影响。\"},\"3088\":{\"t\":\"浮点型其实就是小数。\"},\"3089\":{\"h\":\"2. 浮点型的两种表示方式\",\"a\":\"_2-浮点型的两种表示方式\"},\"3090\":{\"t\":\"十进制数形式：如：5.12 ；512.0f ；.512 (必须有小数点)\"},\"3091\":{\"t\":\"科学计数法形式：如：5.12e2； 512E2 ；100E-2\"},\"3092\":{\"h\":\"3. 两种浮点类型的对比\",\"a\":\"_3-两种浮点类型的对比\"},\"3093\":{\"t\":\"两种浮点类型只是表示的数据范围和精度不同。我们一般使用时选择double。\"},\"3094\":{\"t\":\"1-5-2\"},\"3095\":{\"t\":\"float: 单精度，尾数可以精确到7位有效数字。很多情况下，精度很难满足需求\"},\"3096\":{\"t\":\"double: 双精度，精度是float的两倍。通常采用此类型\"},\"3097\":{\"h\":\"4. 注意事项\",\"a\":\"_4-注意事项\"},\"3098\":{\"t\":\"定义float类型变量时，变量要以\\\"f\\\"或\\\"F\\\"结尾\"},\"3099\":{\"h\":\"5. 使用示例\",\"a\":\"_5-使用示例\"},\"3100\":{\"t\":\"float f1 = 23.23F; double d1 = 23.2321e12; \"},\"3101\":{\"h\":\"6. 底层说明\",\"a\":\"_6-底层说明\"},\"3102\":{\"t\":\"fload表示数据的数据范围比long还大，却只占用4个字节，为什么？\"},\"3103\":{\"t\":\"这跟fload表示数据的方式有关，如下图：\"},\"3104\":{\"t\":\"1-5-3\"},\"3105\":{\"t\":\"第一个bit表示正负，第2~8个bit表示E指数，剩下的表示小数点。\"},\"3106\":{\"h\":\"7. 知识补充：long类型为什么加L\",\"a\":\"_7-知识补充-long类型为什么加l\"},\"3107\":{\"t\":\"java是需要手动分配内存空间，然后再进行储值的。我们定义变量时，就需要先定义变量类型，再初始化赋值。\"},\"3108\":{\"t\":\"当我们与常量数值进行运算时，这个数值我们没有定义容量，java要怎么分配内存呢？答案是，java提供了默认长度（int），按int长度分配内存。\"},\"3109\":{\"t\":\"因此当我们需要long类型的常量数值时，就需要加个L告诉java分配8个Byte的内存。而加L的操作也延续到了定义变量的时候。\"},\"3110\":{\"t\":\"float同理。\"},\"3111\":{\"h\":\"Ⅲ. 字符类型：char\",\"a\":\"iii-字符类型-char\"},\"3112\":{\"h\":\"1. 说明\",\"a\":\"_1-说明-2\"},\"3113\":{\"t\":\"char 型数据用来表示通常意义上“字符”(2字节)。\"},\"3114\":{\"t\":\"这里的字符是任意语言的一个字，比如一个字母、一个汉字、一个片假名。\"},\"3115\":{\"h\":\"2. 声明字符\",\"a\":\"_2-声明字符\"},\"3116\":{\"t\":\"需要使用单引号表示值（不能使用双引号，否则报错）。\"},\"3117\":{\"t\":\"字符类型只能是一个字符，超过一个字符会报错（字符类型不是字符串）。\"},\"3118\":{\"t\":\"char c1 = 'h'; \"},\"3119\":{\"h\":\"3. 字符变量的三种表现形式\",\"a\":\"_3-字符变量的三种表现形式\"},\"3120\":{\"t\":\"除了直接使用字符作为值外，还可以使用能表示字符的其他形式；\"},\"3121\":{\"t\":\"普通字符：用单引号('')括起来的单个字符\"},\"3122\":{\"t\":\"转义字符：使用转义字符 \\\\ 来将其后的字符转变为特殊字符型常量\"},\"3123\":{\"t\":\"Unicode：使用 Unicode 值来表示字符型常量\"},\"3124\":{\"t\":\"ASCII：直接使用整数ASCII码\"},\"3125\":{\"t\":\"char c1 = '帅'; char c2 = '\\\\n'; //\\\\n:表示换行符 char c3 = '\\\\u0043'; char c4 = 97; //a,不推荐使用 \"},\"3126\":{\"h\":\"4. 字符集介绍\",\"a\":\"_4-字符集介绍\"},\"3127\":{\"t\":\"计算机内部都是二进制的；我们输入的字符都是通过转码变成二进制让计算机识别的。 文字==字符集转码==>计算机能够识别的二进制\"},\"3128\":{\"t\":\"转码就需要用到字符集了（密码本），针对不同的字符类型会有不同的字符集，常见的如下：\"},\"3129\":{\"t\":\"ASCII：只能表示英文的编码集\"},\"3130\":{\"t\":\"Unicode：将世界所有字符都纳入其中，解决乱码问题。\"},\"3131\":{\"t\":\"UTF-8：真正实现了，将所有字符都纳入其中，是在互联网上使用最广的一种 Unicode 的实现方式。\"},\"3132\":{\"t\":\"乱码：不同字符集编码的字符进行传输时，就会出现乱码（密码本不一样，解密解不出）。\"},\"3133\":{\"t\":\"转码：将一种字符集编码的字符转换成其他字符集编码的字符，如GBK转UTF-8.\"},\"3134\":{\"h\":\"5. 注意事项\",\"a\":\"_5-注意事项\"},\"3135\":{\"t\":\"char类型的值不能是空字符串（可以1个是空格）。\"},\"3136\":{\"t\":\"必须使用单引号，不能使用双引号。\"},\"3137\":{\"h\":\"Ⅳ. 布尔类型：boolean\",\"a\":\"iv-布尔类型-boolean\"},\"3138\":{\"h\":\"1. 说明\",\"a\":\"_1-说明-3\"},\"3139\":{\"t\":\"boolean 类型用来判断逻辑条件，一般用于程序流程控制。\"},\"3140\":{\"t\":\"boolean类型数据只允许取值true和false，无null。\"},\"3141\":{\"h\":\"2. 使用示例\",\"a\":\"_2-使用示例\"},\"3142\":{\"t\":\"boolean b1 = true; boolean b2 = false; \"},\"3143\":{\"h\":\"3. 注意\",\"a\":\"_3-注意\"},\"3144\":{\"t\":\"在java中，boolean只能用true和false表示。不可以使用0或非 0 的整数替代false和true，这点和C语言不同。\"},\"3145\":{\"t\":\"Java虚拟机中没有任何供boolean值专用的字节码指令，Java语言表达所操作的boolean值，在编译之后都使用java虚拟机中的int数据类型来代替：true用1表示，false用0表示。\"},\"3146\":{\"h\":\"Ⅴ. 类型间的转换\",\"a\":\"v-类型间的转换\"},\"3147\":{\"h\":\"1. 不同类型之间的运算\",\"a\":\"_1-不同类型之间的运算\"},\"3148\":{\"t\":\"除了boolean类型外，其他7种基本数据类型是可以互相运算的。\"},\"3149\":{\"t\":\"boolean只能取true和false没法参加运算；char是通过转为ASCII码进行运算的。\"},\"3150\":{\"h\":\"2. 自动类型提升\",\"a\":\"_2-自动类型提升\"},\"3151\":{\"t\":\"自动类型转换：容量小的类型自动转换为容量大的数据类型\"},\"3152\":{\"t\":\"1-5-3\"},\"3153\":{\"t\":\"有多种类型的数据混合运算时，系统首先自动将所有数据转换成容量最大的那种数据类型，然后再进行计算（接收结果的变量也要定义成相应的数据类型）。\"},\"3154\":{\"h\":\"2.1 运算的规则\",\"a\":\"_2-1-运算的规则\"},\"3155\":{\"t\":\"当两个不同的数据类型之间进行运算时，必须使用较大的数据类型进行接收，不然就无法编译（这里的大指的是表示的数据范围大小，float就比long要大）。\"},\"3156\":{\"t\":\"byte b1 = 10; int i1 = 200; int i2 = b1 + i1; //使用较大的数据类型进行接收 \"},\"3157\":{\"h\":\"2.2 特殊情况\",\"a\":\"_2-2-特殊情况\"},\"3158\":{\"t\":\"当byte、char、short三种类型的变量做运算时，结果必须为int型。\"},\"3159\":{\"t\":\"char会转为整形的ASCII进行运算。\"},\"3160\":{\"t\":\"有浮点型参与的运算，即使是整数，也会出现小数点\"},\"3161\":{\"h\":\"2.3 示例\",\"a\":\"_2-3-示例\"},\"3162\":{\"t\":\"char c1 = 'a'; //97 byte b1 = 10; int i1 = c1 + b1; //107 int i2 = 100; double d1 = i2; //赋值;此时变成了 100.0 \"},\"3163\":{\"h\":\"3. 数值常量的默认数据类型\",\"a\":\"_3-数值常量的默认数据类型\"},\"3164\":{\"t\":\"对于一个数值常量，他有自己默认的数据类型：\"},\"3165\":{\"t\":\"整型常量：默认类型为int\"},\"3166\":{\"t\":\"浮点常量：默认为double 当数值常量参与运算的时候，接收的值数据类型不能小于数值常量的数据类型。\"},\"3167\":{\"t\":\"//12是个整数常量，默认是int类型，进行计算时，必须用int类型接收。 byte b = 10; byte b1 = b + 12 //报错，应该用int类型接收 //10.1是浮点数常量，默认是double类型的。 byte b = 10; float f1 = b + 10.1; //编译失败，应该用double类型接收 \"},\"3168\":{\"h\":\"4. 不加L和F发生的自动类型转换\",\"a\":\"_4-不加l和f发生的自动类型转换\"},\"3169\":{\"t\":\"为long类型赋值时，值的末尾要L，但不加L有时会报错，有时不会报错；为什么？\"},\"3170\":{\"t\":\"没有加L时，默认数值是int类型的，如果值超过了int的范围，就直接报错（报错的情况）\"},\"3171\":{\"t\":\"如果没有超过int的范围，赋值的过程就自动发生了变量提升（不报错的情况）。\"},\"3172\":{\"t\":\"float同理\"},\"3173\":{\"t\":\"//示例1：为long型变量赋值，没加L，默认为int long l1 = 1000; //编译正常 //示例2：long型没有加L，则取默认的int型，但该值超过了int范围，故报错 long l2 = 21323232323232332323; //编译报错 //示例3：提供的值没有加F，因此默认是double类型，double类型赋值给float会报错 float f1 = 12.3; //编译报错 \"},\"3174\":{\"h\":\"5. 强制类型转换\",\"a\":\"_5-强制类型转换\"},\"3175\":{\"t\":\"自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使用时要加上强制转换符：()，但可能造成精度降低或溢出。\"},\"3176\":{\"t\":\"double d1 = 2302323.123; int i1 = (int)d1; //结果：2302323；截断操作 int i2 = 128; byte b1 = (byte)i2; //结果：-128；溢出，发生了二进制运算 byte b = 3; b = b + 4; //报错 b = (byte)(b+4); //OK \"},\"3177\":{\"t\":\"注意：boolean类型不可以转换为其它的数据类型。\"},\"3178\":{\"h\":\"Ⅵ. 进制问题\",\"a\":\"vi-进制问题\"},\"3179\":{\"h\":\"1. 表示方法\",\"a\":\"_1-表示方法\"},\"3180\":{\"t\":\"二进制：以0b或0B开头\"},\"3181\":{\"t\":\"八进制：以数字0开头表示\"},\"3182\":{\"t\":\"十六进制： 以0x或0X开头表示，a-f不区分大小写\"},\"3183\":{\"h\":\"2. 符号位\",\"a\":\"_2-符号位\"},\"3184\":{\"t\":\"储存数据时，专门有一位来储存数据的正负。\"},\"3185\":{\"t\":\"符号位在最高位，0表示整数，1表示负数。\"},\"3186\":{\"h\":\"3. 原码、反码、补码\",\"a\":\"_3-原码、反码、补码\"},\"3187\":{\"t\":\"二进制的整数有如下三种形式【在计算机底层，都已补码的方式来存储数据】。\"},\"3188\":{\"t\":\"原码：直接将一个数值换成二进制数。最高位是符号位【用最高位表示正负，其余表示值】\"},\"3189\":{\"t\":\"反码：正数的反码是其本身；负数的反码是源码基础上，符号位不变，其余各个位取反（1,0互换）\"},\"3190\":{\"t\":\"补码：正数的补码就是其本身；负数的补码是在其源码的基础上，符号位不变，区域各位取反，最后+1（==反码+1）\"},\"3191\":{\"t\":\"三个码的意义： 计算机辨别“符号位”显然会让计算机的基础电路设计变得十分复杂! 于是人们想出了将符号位也参与运算的方法. 我们知道, 根据运算法则减去一个正数等于加上一个负数, 即: 1-1 = 1 + (-1) = 0 , 所以机器可以只有加法而没有减法, 这样计算机运算的设计就更简单了。\"},\"3192\":{\"t\":\"1-1 = 1 + (-1) = [0000 0001]原 + [1000 0001]原 = [0000 0001]补 + [1111 1111]补 = [0000 0000]补=[0000 0000]原\"},\"3193\":{\"h\":\"4. 进制转换\",\"a\":\"_4-进制转换\"},\"3194\":{\"t\":\"二进制《=》十进制 \"},\"3195\":{\"t\":\"二进制转成十进制： 乘以2的幂数\"},\"3196\":{\"t\":\"十进制转成二进制：除以2 取余数\"},\"3197\":{\"t\":\"二进制《=》八进制 \"},\"3198\":{\"t\":\"二进制转八进制：三个位加起来作为一个位\"},\"3199\":{\"t\":\"八进制转二进制：一个位分解成3个位表示\"},\"3200\":{\"t\":\"二进制《=》十六进制 \"},\"3201\":{\"t\":\"同上，变成了1:4的转换\"},\"3202\":{\"h\":\"1-6. String\"},\"3203\":{\"t\":\"String类型是引用类型，不属于基本数据类型。定义时必须使用双引号，不能使用单引号。\"},\"3204\":{\"h\":\"1. String对象的创建\",\"a\":\"_1-string对象的创建\"},\"3205\":{\"t\":\"有两种创建方式：\"},\"3206\":{\"t\":\"字面量：和基本数据类型一样，只是关键字是String，因为String经常用到，所以JDK对它进行了优化。\"},\"3207\":{\"t\":\"构造器：使用new String创建\"},\"3208\":{\"t\":\"String s1 = \\\"javaEE\\\"; String s3 = new String(\\\"javaEE\\\"); \"},\"3209\":{\"h\":\"2. 字符串常量池\",\"a\":\"_2-字符串常量池\"},\"3210\":{\"t\":\"通过字面量的方式（区别于new）给一个字符串赋值，此时的字符串值声明在字符串常量池中。 字符串常量池中是不会存储相同内容的字符串的。\"},\"3211\":{\"t\":\"结论：给两个String类型的变量，赋值相同的值，他们会指向同一个内存地址。\"},\"3212\":{\"t\":\"String s1 = \\\"abc\\\"; //关键字是String，值必须加双引号 String s2 = \\\"abc\\\"; System.out.println(s1==s2); //true,说明两个变量内存地址相同 =================================== String s3 = new String(\\\"aa\\\"); String s4 = new String(\\\"aa\\\"); System.out.println(s3==s4); //false \"},\"3213\":{\"h\":\"3. String类的特性\",\"a\":\"_3-string类的特性\"},\"3214\":{\"t\":\"String类代表 字符串。Java 程序中的所有字符串字面值（如 \\\"abc\\\" ）都作为此类的实例实现。\"},\"3215\":{\"t\":\"String是一个final类，代表不可变的字符序列。简称：不可变性。\"},\"3216\":{\"t\":\"String实现了两个接口 \"},\"3217\":{\"t\":\"Serializable接口：表示字符串是支持序列化的。\"},\"3218\":{\"t\":\"实现了Comparable接口：表示String可以比较大小\"},\"3219\":{\"t\":\"String内部底层定义了final char[] value用于存储字符串数据\"},\"3220\":{\"h\":\"4. 字符串的不可变性\",\"a\":\"_4-字符串的不可变性\"},\"3221\":{\"t\":\"字符串也属于引用类型，但他是个Final类，储存值使用的是一个Final数组，因此一旦赋值成功，该内存地址（引用）里的值将无法改变。\"},\"3222\":{\"h\":\"4.1 具体体现\",\"a\":\"_4-1-具体体现\"},\"3223\":{\"t\":\"当对字符串重新赋值时，需要重新指定内存区域赋值，不能使用原有的value进行赋值。\"},\"3224\":{\"t\":\"当对现有的字符串进行连接操作时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。\"},\"3225\":{\"t\":\"当调用String的replace()方法修改指定字符或字符串时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。\"},\"3226\":{\"h\":\"4.2 内存图示\",\"a\":\"_4-2-内存图示\"},\"3227\":{\"t\":\"1-6-1\"},\"3228\":{\"h\":\"5. String对象的内存分析\",\"a\":\"_5-string对象的内存分析\"},\"3229\":{\"h\":\"5.1 String对象的储存\",\"a\":\"_5-1-string对象的储存\"},\"3230\":{\"t\":\"通过字面量创建的String，值是直接储存在字符串常量词的，标识符保存常量池的内存地址；\"},\"3231\":{\"t\":\"通过new+构造器的方式创建的String，String对象是储存在堆中的，标识符保存String对象的地址。 \"},\"3232\":{\"t\":\"String对象中有一个属性values，该属性是引用类型，保存了具体字符串值的内存地址，具体的值也是保存在常量词中的。\"},\"3233\":{\"h\":\"5.2 内存图示\",\"a\":\"_5-2-内存图示\"},\"3234\":{\"t\":\"1-6-2\"},\"3235\":{\"h\":\"5.3 对象中的字符串\",\"a\":\"_5-3-对象中的字符串\"},\"3236\":{\"t\":\"字符串属于引用类型，在创建的对象中，属性只能保存字符串的内存地址，真正的值是储存在常量池中的。\"},\"3237\":{\"t\":\"Person p1 = new Person(\\\"Tom\\\",12); Person p2 = new Person(\\\"Tom\\\",12); System.out.println(p1.name.equals(p2.name));//true System.out.println(p1.name == p2.name);//true p1.name = \\\"Jerry\\\"; System.out.println(p2.name);//Tom \"},\"3238\":{\"h\":\"6. String的运算：拼接操作\",\"a\":\"_6-string的运算-拼接操作\"},\"3239\":{\"t\":\"String可以和8种基本数据类型变量做运算，且运算只能是连接运算：+。\"},\"3240\":{\"t\":\"运算的结构是将这些值连接起来了，依然是String类型\"},\"3241\":{\"t\":\"char c = 'a';//97 A:65 int num = 10; String str = \\\"hello\\\"; System.out.println(c + num + str);//107hello System.out.println(c + str + num);//ahello10 System.out.println(str + num + c);//hello10a \"},\"3242\":{\"h\":\"7. 类型转换\",\"a\":\"_7-类型转换\"},\"3243\":{\"t\":\"不支持直接string类型转其他类型，包括强制类型转换。\"},\"3244\":{\"t\":\"实在需要转换类型，需要使用包装函数进行（详见OOP）。\"},\"3245\":{\"t\":\" String a = \\\"43\\\"; int i = Integer.parseInt(a); \"},\"3246\":{\"h\":\"8. String的操作\",\"a\":\"_8-string的操作\"},\"3247\":{\"t\":\"详见 String类的方法\"},\"3248\":{\"h\":\"1-7. 运算符\"},\"3249\":{\"h\":\"Ⅰ. 算术运算符\",\"a\":\"i-算术运算符\"},\"3250\":{\"t\":\"1-7-1\"},\"3251\":{\"h\":\"1. 除号运算的细节\",\"a\":\"_1-除号运算的细节\"},\"3252\":{\"t\":\"两个int类型相除，结果一定是个int类型（舍去小数位），即便用double类型接收，也是int类型的结果转为了double，小数位的值，还是被舍弃了，如果想保留小数位，则需要运算时就进行类型转换。\"},\"3253\":{\"t\":\"int n1 = 12; int n2 = 5; int result = n1/n2;//2, n1/n2的结果是int类型的，没有小数位 double result = n1/n2;//2.0,只是将int类型的结果2.0类型转换成了double double result = (double)num1/num2;//2.4 double result = (num1+0.0)/num2;//2.4 \"},\"3254\":{\"h\":\"2. 取模的细节\",\"a\":\"_2-取模的细节\"},\"3255\":{\"t\":\"结果的符号与被膜数的符号形同。取模一般用来判断是否能除尽。\"},\"3256\":{\"h\":\"3. 自增、自减的细节\",\"a\":\"_3-自增、自减的细节\"},\"3257\":{\"t\":\"(前)++ :先自增1，后运算\"},\"3258\":{\"t\":\"(后)++ :先运算，后自增1\"},\"3259\":{\"t\":\"(前)-- :先自减1，后运算\"},\"3260\":{\"t\":\"(后)-- :先运算，后自减1\"},\"3261\":{\"t\":\"int a1 = 10; int a2 = ++a1; System.out.println(a1,a2);//11,11 int b1 = 10; int b2 = b1++;//b1先取10，赋值给b2,然后才自增的 System.out.println(b1,b2);//11,10 \"},\"3262\":{\"t\":\"自增、自减不会改变数据类型\"},\"3263\":{\"t\":\"short s1 = 10; s1 = s1 + 1;//编译失败，s1是sort类型的，无法接收int类型的1 s1++; //正确，自增不会改变变量的数据类型 \"},\"3264\":{\"h\":\"Ⅱ. 赋值运算符\",\"a\":\"ii-赋值运算符\"},\"3265\":{\"h\":\"1. == 赋值运算符\",\"a\":\"_1-赋值运算符\"},\"3266\":{\"t\":\"支持连续赋值\"},\"3267\":{\"t\":\"int i1,i2; i1 = i2 = 10; int i3 = 10; i4 = 20; \"},\"3268\":{\"h\":\"2. 扩展赋值运算符\",\"a\":\"_2-扩展赋值运算符\"},\"3269\":{\"t\":\"+=, -=, *=, /=, %= 先运算再把结果进行赋值；\"},\"3270\":{\"t\":\"int i1 = 10; i1 += 5// i1 = i1 + 5; \"},\"3271\":{\"h\":\"3. 数据类型不改变\",\"a\":\"_3-数据类型不改变\"},\"3272\":{\"t\":\"与自增自减一样，扩展赋值运算符，不会改变变量本身的数据类型；\"},\"3273\":{\"t\":\"short s1 = 10; s1 += 2; //12,不会报错，变量本身的数据类型没有发生改变 int i = 1; i *= 0.1; //0;不会改变变量类型，所以结果是0. \"},\"3274\":{\"h\":\"4. 开发中的选择\",\"a\":\"_4-开发中的选择\"},\"3275\":{\"t\":\"因为扩展赋值运算符不会改变变量的类型，所以在开发中，优先选择他来替代算数运算符。\"},\"3276\":{\"h\":\"Ⅲ. 比较运算符\",\"a\":\"iii-比较运算符\"},\"3277\":{\"h\":\"1. 概述\",\"a\":\"_1-概述\"},\"3278\":{\"t\":\"比较运算符的结果都是boolean型，也就是要么是true，要么是false。\"},\"3279\":{\"t\":\"注意：比较运算符 == 不能误写成 =。\"},\"3280\":{\"h\":\"2. 使用细节\",\"a\":\"_2-使用细节\"},\"3281\":{\"t\":\"比较运算符不能连续使用；\"},\"3282\":{\"t\":\"int a = 10; if(5<a<=20) XXX ;//这种写法是错误的 if(5<a && a<=20) √;//正确的写法 \"},\"3283\":{\"h\":\"Ⅳ. 逻辑运算符\",\"a\":\"iv-逻辑运算符\"},\"3284\":{\"t\":\"1-7-2\"},\"3285\":{\"h\":\"1. 概述\",\"a\":\"_1-概述-1\"},\"3286\":{\"t\":\"&: 逻辑与\"},\"3287\":{\"t\":\"|: —逻辑或\"},\"3288\":{\"t\":\"!: 逻辑非\"},\"3289\":{\"t\":\"&&: 短路与\"},\"3290\":{\"t\":\"||: 短路或\"},\"3291\":{\"t\":\"^: 逻辑异或\"},\"3292\":{\"h\":\"2. 使用\",\"a\":\"_2-使用\"},\"3293\":{\"t\":\"逻辑运算符用于连接布尔型表达式，在Java中不可以写成3<x<6，应该写成x>3 & x<6 。\"},\"3294\":{\"h\":\"3. 短路情况\",\"a\":\"_3-短路情况\"},\"3295\":{\"t\":\"开发中，优先使用短路的&和|\"},\"3296\":{\"t\":\"“&”和“&&”的区别：单&时，左边无论真假，右边都进行运算；双&时，如果左边为真，右边参与运算，如果左边为假，那么右边不参与运算。\"},\"3297\":{\"t\":\"“|”和“||”的区别同理，||表示：当左边为真，右边不参与运算。\"},\"3298\":{\"h\":\"Ⅴ. 位运算符\",\"a\":\"v-位运算符\"},\"3299\":{\"t\":\"仅了解，Java源码中会用到。\"},\"3300\":{\"h\":\"1. 概述\",\"a\":\"_1-概述-2\"},\"3301\":{\"t\":\"位运算符，就是在内存上进行的二进制bit位的运算。【只支持数值类型】\"},\"3302\":{\"t\":\"1-7-3\"},\"3303\":{\"h\":\"2. 补位的细节\",\"a\":\"_2-补位的细节\"},\"3304\":{\"t\":\"1-7-4\"},\"3305\":{\"h\":\"3. 细节补充\",\"a\":\"_3-细节补充\"},\"3306\":{\"t\":\"<< 左移：bit位向左移动，右边补0，每移动一位，相当于 乘了一次2。 \"},\"3307\":{\"t\":\"如果最高位移动到了符号位，就会变成负数。（符号位是1，则变负数）\"},\"3308\":{\"t\":\">> 右移：bit位向右移动，左边补位，如果符号位是1，就补1，是0就补0.\"},\"3309\":{\"t\":\"~ 取反 \"},\"3310\":{\"t\":\"如下：底层表示-6，是以补码的形式，因此 -6的反码 == -6的补码-1（负数补码= 反码+1），所以6取反的结果是-7\"},\"3311\":{\"t\":\" 0000 0000 0000 0000 0000 0000 0000 0110 //6 1000 0000 0000 0000 0000 0000 0000 0110 //-6的源码 1111 1111 1111 1111 1111 1111 1001 //-6的反码 \"},\"3312\":{\"h\":\"Ⅵ. 三元运算符\",\"a\":\"vi-三元运算符\"},\"3313\":{\"h\":\"1. 格式\",\"a\":\"_1-格式\"},\"3314\":{\"t\":\"条件表达式的结果为boolean类型； 根据条件表达式真或假，决定执行表达式1，还是表达式2\"},\"3315\":{\"t\":\"1-7-5\"},\"3316\":{\"h\":\"2. 使用说明\",\"a\":\"_2-使用说明\"},\"3317\":{\"h\":\"2.1 表达式1 和表达式2为 同种类型\",\"a\":\"_2-1-表达式1-和表达式2为-同种类型\"},\"3318\":{\"t\":\"三元运算符的结果是要被变量接收的，接收的变量类型要与表达式结果的变量类型一致（或能自动转换）。所以也要求表达式1和表达式2的数据类型要一样。\"},\"3319\":{\"t\":\"int m = 10; int n = 5; int max = (m>n)? m : n; //m int max = (m>n)? m : \\\"n大\\\"; //报错，两个表达式类型不一致 \"},\"3320\":{\"h\":\"2.2 三元运算符的嵌套\",\"a\":\"_2-2-三元运算符的嵌套\"},\"3321\":{\"t\":\"三元运算符是可以嵌套使用的，比如计算两个值谁大，或者是相等\"},\"3322\":{\"t\":\"int m = 10; int n = 5; String maxStr = (m > n)? \\\"m大\\\" : ((m == n)? \\\"m和n相等\\\" : \\\"n大\\\"); \"},\"3323\":{\"h\":\"2.3 三元运算符与if-else\",\"a\":\"_2-3-三元运算符与if-else\"},\"3324\":{\"t\":\"凡是可以使用三元运算符的地方，都可以改写为if-else； 如果程序既可以使用三元运算符，又可以使用if-else结构，那么优先选择三元运算符。\"},\"3325\":{\"t\":\"原因：简洁、执行效率高。\"},\"3326\":{\"h\":\"Ⅶ. 运算符优先级\",\"a\":\"vii-运算符优先级\"},\"3327\":{\"t\":\"提示\"},\"3328\":{\"t\":\"不用记，不确定的地方加（）就行了。\"},\"3329\":{\"h\":\"1-8. 流程控制\"},\"3330\":{\"t\":\"流程控制语句是用来控制程序中各语句执行顺序的语句，可以把语句组合成能完成一定功能的小逻辑模块。\"},\"3331\":{\"t\":\"流程控制方式采用结构化程序设计中规定的三种基本流程结构，即：\"},\"3332\":{\"t\":\"顺序结构：冲上到下逐行执行，无任何判断和跳转。\"},\"3333\":{\"t\":\"分支结构：根据条件，选择性的执行某段代码 \"},\"3334\":{\"t\":\"if...else\"},\"3335\":{\"t\":\"switch-case\"},\"3336\":{\"t\":\"循环结构：根据循环条件，重复性的执行某段代码 \"},\"3337\":{\"t\":\"for\"},\"3338\":{\"t\":\"while\"},\"3339\":{\"t\":\"do...while\"},\"3340\":{\"h\":\"Ⅰ. if..else\",\"a\":\"i-if-else\"},\"3341\":{\"h\":\"1. 语法\",\"a\":\"_1-语法\"},\"3342\":{\"t\":\"分支（条件判断）结构有三种格式；\"},\"3343\":{\"h\":\"1.1 单分支：选或跳过\",\"a\":\"_1-1-单分支-选或跳过\"},\"3344\":{\"t\":\"if( 条件表达式){ 执行代码块; } \"},\"3345\":{\"h\":\"1.2 双分支：二选一\",\"a\":\"_1-2-双分支-二选一\"},\"3346\":{\"t\":\"if(条件表达式){ 执行表达式1 }else{ 执行表达式2 } \"},\"3347\":{\"h\":\"1.3 多分支：多选一\",\"a\":\"_1-3-多分支-多选一\"},\"3348\":{\"t\":\"if(条件表达式){ 执行表达式1 }else if(条件表达式){ 执行表达式2 }else if(条件表达式){ 执行表达式3 } ... else{ 执行表达式n } \"},\"3349\":{\"h\":\"2. 使用细节\",\"a\":\"_2-使用细节\"},\"3350\":{\"t\":\"嵌套: if...else是可以进行嵌套的，不过尽量别超过3层。\"},\"3351\":{\"t\":\"省略大括号: 如果if-else结构中的执行语句只有一行时，对应的一对{}可以省略的，不建议省略。\"},\"3352\":{\"h\":\"3. 注意事项\",\"a\":\"_3-注意事项\"},\"3353\":{\"t\":\"多条件表达式的顺序 \"},\"3354\":{\"t\":\"如果多个条件表达式之间是“互斥”关系(或没有交集的关系),哪个判断和执行语句声明在上面还是下面，无所谓。\"},\"3355\":{\"t\":\"如果多个条件表达式之间有交集的关系，需要根据实际情况，考虑清楚应该将哪个结构声明在上面。\"},\"3356\":{\"t\":\"如果多个条件表达式之间有包含的关系，通常情况下，需要将范围小的声明在范围大的上面。否则，范围小的就没机会执行了\"},\"3357\":{\"t\":\"条件表达式必须是布尔表达式（关系表达式或逻辑表达式）、布尔变量\"},\"3358\":{\"h\":\"Ⅱ. switch\",\"a\":\"ii-switch\"},\"3359\":{\"h\":\"1. 语法格式\",\"a\":\"_1-语法格式\"},\"3360\":{\"t\":\"switch(表达式){ case 常量1: 执行语句1; //break; case 常量2: 执行语句2; //break; ... default: 执行语句n; //break; } \"},\"3361\":{\"h\":\"2. 使用说明\",\"a\":\"_2-使用说明\"},\"3362\":{\"t\":\"执行过程 \"},\"3363\":{\"t\":\"根据switch表达式中的值，依次匹配各个case中的常量。一旦匹配成功，则进入相应case结构中，调用其执行语句。\"},\"3364\":{\"t\":\"当调用完执行语句以后，则仍然继续向下执行其他case结构中的执行语句，直到遇到break关键字或此switch-case结构 末尾结束为止。\"},\"3365\":{\"t\":\"break：可以使用在switch-case结构中，表示一旦执行到此关键字，就跳出switch-case结构。 break关键字是可选的，没有break时，就算执行完了case匹配的表达式，还是会继续向下执行，并且不再判断是否满足case了。\"},\"3366\":{\"t\":\"表达式的限制： switch结构中的表达式，只能是如下的6种数据类型之一： \"},\"3367\":{\"t\":\"byte 、short、char、int、枚举类型(JDK5.0新增)、String类型(JDK7.0新增)。\"},\"3368\":{\"t\":\"注意：不能是boolean\"},\"3369\":{\"t\":\"case的限制：case 之后只能声明常量。不能声明范围、变量或不确定的表达式。且同一个switch语句，所有case子句中的常量值互不相同\"},\"3370\":{\"t\":\"default：相当于if-else结构中的else，default结构是可选的，而且位置是灵活的。\"},\"3371\":{\"h\":\"3. 省略break的用法\",\"a\":\"_3-省略break的用法\"},\"3372\":{\"t\":\"可以利用省略break的特性，让代码更简洁。\"},\"3373\":{\"t\":\"例如：周末是双休的，给出今天是星期几（星期日用0表示），算出今天是否用上班。\"},\"3374\":{\"t\":\"switch(day){ case 1: case 2: case 3: case 4: case 5: System.out.println(\\\"今天需要上班\\\"); break; default: System.out.println(\\\"今天不用上班\\\"); } \"},\"3375\":{\"h\":\"4. if..else和switch...case的选择\",\"a\":\"_4-if-else和switch-case的选择\"},\"3376\":{\"t\":\"我们写分支结构时，当发现既可以使用switch-case,（同时，switch中表达式的取值情况不太多），又可以使用if-else时，我们优先选择使用switch-case。原因：switch-case执行效率稍高。\"},\"3377\":{\"t\":\"使用switch-case的，都可以改写为if-else。反之不成立。\"},\"3378\":{\"h\":\"Ⅲ. for\",\"a\":\"iii-for\"},\"3379\":{\"h\":\"循环的组成部分\",\"a\":\"循环的组成部分\"},\"3380\":{\"t\":\"循环结构的4个要素\"},\"3381\":{\"t\":\"初始化条件：可以声明多个变量，但必须是同一个类型，用逗号分隔\"},\"3382\":{\"t\":\"循环条件：是boolean类型；当值为false时，退出循环\"},\"3383\":{\"t\":\"循环体\"},\"3384\":{\"t\":\"迭代条件：可以有多个变量更新，用逗号分隔\"},\"3385\":{\"t\":\"执行过程：直到循环条件不满足，则退出，永远满足，则是死循环。\"},\"3386\":{\"t\":\"1-8-1\"},\"3387\":{\"h\":\"1. for循环的结构\",\"a\":\"_1-for循环的结构\"},\"3388\":{\"t\":\"执行过程：初始化条件 - 循环条件 - 循环体 - 迭代条件- 循环条件 - 循环体 - 迭代条件 - ... - 循环条件\"},\"3389\":{\"t\":\"1-8-2\"},\"3390\":{\"t\":\"for(初始化条件; 循环条件; 迭代条件){ 循环体; } \"},\"3391\":{\"h\":\"2. for循环的使用\",\"a\":\"_2-for循环的使用\"},\"3392\":{\"t\":\"示例：遍历100以内的偶数,输出所有偶数的和,输出偶数的个数\"},\"3393\":{\"t\":\"int num = 0; int count = 0; for(int i=0;i<100;i++){ if(i%2 == 0){ num += i; count++; } } \"},\"3394\":{\"t\":\"i 变量只在循环内有效，出了for循环就失效了。\"},\"3395\":{\"t\":\"num使用前必须先定义（在for循环外定义）。 \"},\"3396\":{\"t\":\"循环内定义，会每次循环都重复生命，在java中，会直接报错。\"},\"3397\":{\"t\":\"i变量的声明别忘了加数据类型，这个也是声明变量。\"},\"3398\":{\"h\":\"Ⅳ. while\",\"a\":\"iv-while\"},\"3399\":{\"h\":\"1. 语法结构\",\"a\":\"_1-语法结构\"},\"3400\":{\"t\":\"while循环没有迭代条件也能编译成功，所以一定不要忘了迭代条件。\"},\"3401\":{\"t\":\"执行过程：初始化条件 - 循环条件 - 循环体 - 迭代条件- 循环条件 - 循环体 - 迭代条件 - ... - 循环条件\"},\"3402\":{\"t\":\"初始化条件 while(循环条件){ 循环体 迭代条件 } \"},\"3403\":{\"h\":\"2. while循环的使用\",\"a\":\"_2-while循环的使用\"},\"3404\":{\"t\":\"示例：遍历100以内的所有偶数\"},\"3405\":{\"t\":\"class WhileTest{ public static void main(String[] args) { //遍历100以内的所有偶数 int i = 1; while(i <= 100){ if(i % 2 == 0){ System.out.println(i); } i++; } //初始化变量出了while循环以后，仍可以调用。 System.out.println(i);//101 } } \"},\"3406\":{\"h\":\"3. for循环和while循环\",\"a\":\"_3-for循环和while循环\"},\"3407\":{\"t\":\"for循环和while循环是可以相互转换的！且没有执行效率的差别。\"},\"3408\":{\"t\":\"区别：for循环和while循环的初始化条件部分的作用范围不同。但是for循环也可以通过以下方式实现初始化部分外移\"},\"3409\":{\"t\":\"int i = 0; //for循环内只要有两个;;就行，里面有无内容都可以编译 for(;i<10;i++){...} \"},\"3410\":{\"h\":\"4. while(true)：无限循环格式\",\"a\":\"_4-while-true-无限循环格式\"},\"3411\":{\"t\":\"可以省略循环体种的一些元素，来实现人为的不限制次数的循环，并用break根据条件退出循环。\"},\"3412\":{\"t\":\"//while循环 while(true){ //只有循环条件和循环体也能编译 循环体; } //for循环 for(;;){ //只要有两个;;就能编译 循环体; } \"},\"3413\":{\"t\":\"示例：从键盘读入个数不确定的整数，并判断读入的正数和负数的个数，输入为0时结束程序。\"},\"3414\":{\"t\":\"import java.util.Scanner; class ForWhileTest { public static void main(String[] args) { Scanner scan = new Scanner(System.in); int positiveNumber = 0;//记录正数的个数 int negativeNumber = 0;//记录负数的个数 for(;;){//while(true){ int number = scan.nextInt(); //判断number的正负情况 if(number > 0){ positiveNumber++; }else if(number < 0){ negativeNumber++; }else{ //一旦执行break，跳出循环 break; } } System.out.println(\\\"输入的正数个数为：\\\" + positiveNumber); System.out.println(\\\"输入的负数个数为：\\\" + negativeNumber); } } \"},\"3415\":{\"h\":\"Ⅴ. do...while\",\"a\":\"v-do-while\"},\"3416\":{\"h\":\"1. 语法结构\",\"a\":\"_1-语法结构-1\"},\"3417\":{\"t\":\"初始化 do{ 循环体 迭代条件 }while(循环条件); \"},\"3418\":{\"h\":\"2. do...while循环的使用\",\"a\":\"_2-do-while循环的使用\"},\"3419\":{\"t\":\"示例：遍历100以内的偶数,并计算所有偶数的和及偶数的个数\"},\"3420\":{\"t\":\"int num = 1; int sum = 0;//记录总和 int count = 0;//记录个数 do{ if(num % 2 == 0){ System.out.println(num); sum += num; count++; } num++; }while(num <= 100); \"},\"3421\":{\"h\":\"3. 使用说明\",\"a\":\"_3-使用说明\"},\"3422\":{\"t\":\"在循环体必须执行一次的时候，使用该循环；开发中较少使用。\"},\"3423\":{\"h\":\"Ⅵ. 循环控制\",\"a\":\"vi-循环控制\"},\"3424\":{\"t\":\"特殊关键字 break、continue、return 可以控制循环的执行。\"},\"3425\":{\"h\":\"1. break\",\"a\":\"_1-break\"},\"3426\":{\"t\":\"break语句用于终止某个语句块的执行。【只能用于switch 语句和 循环语句中】\"},\"3427\":{\"h\":\"1.1 使用范围：\",\"a\":\"_1-1-使用范围\"},\"3428\":{\"t\":\"switch...case中\"},\"3429\":{\"t\":\"循环语句中：跳出当前循环\"},\"3430\":{\"h\":\"1.2 嵌套循环中的使用\",\"a\":\"_1-2-嵌套循环中的使用\"},\"3431\":{\"t\":\"break; 默认跳出包裹此关键字最近的一层循环。\"},\"3432\":{\"t\":\"可以为循环添加label标识符，来跳出指定标识的循环\"},\"3433\":{\"h\":\"2. continue\",\"a\":\"_2-continue\"},\"3434\":{\"t\":\"continue用于结束当次循环【只能用于 循环语句中】\"},\"3435\":{\"t\":\"用于跳过其所在循环语句块的一次执行，继续下一次循环。\"},\"3436\":{\"t\":\"嵌套循环中的使用：continue默认跳过包裹此关键字最近的一层循环。可以通过标签指明要跳过的是哪一层循环\"},\"3437\":{\"h\":\"3. return\",\"a\":\"_3-return\"},\"3438\":{\"t\":\"并非专门用于结束循环的，它的功能是结束一个方法。当一个方法执行到一个return语句时，这个方法将被结束。\"},\"3439\":{\"t\":\"与break和continue不同的是，return直接结束整个方法，不管这个return处于多少层循环之内\"},\"3440\":{\"h\":\"4. 使用说明\",\"a\":\"_4-使用说明\"},\"3441\":{\"t\":\"continue 只能用于 循环语句中。因为程序永远不会执行其后的语句。\"},\"3442\":{\"t\":\"continue是终止 本次循环，break是终止 本层循环。\"},\"3443\":{\"h\":\"5. 使用示例\",\"a\":\"_5-使用示例\"},\"3444\":{\"t\":\"label:for(int i = 1;i <= 4;i++){ for(int j = 1;j <= 10;j++){ if(j % 4 == 0){ //break;//默认跳出包裹此关键字最近的一层循环。 //continue; //break label;//结束指定标识的一层循环结构 continue label;//结束指定标识的一层循环结构当次循环 } System.out.print(j); } } \"},\"3445\":{\"h\":\"Ⅶ. 嵌套循环\",\"a\":\"vii-嵌套循环\"},\"3446\":{\"t\":\"循环是可以嵌套的，将一个循环结构A声明在另一个循环结构B的循环体中,就构成了嵌套循环；一般最多写三层。\"},\"3447\":{\"h\":\"1. 使用说明\",\"a\":\"_1-使用说明\"},\"3448\":{\"t\":\"内层循环结构遍历一遍，只相当于外层循环循环体执行了一次。\"},\"3449\":{\"t\":\"假设外层循环需要执行m次，内层循环需要执行n次。此时内层循环的循环体一共执行了m * n次 两层循环相当于是一个矩阵，外层循环控制行数，内层循环控制列数\"},\"3450\":{\"h\":\"2. 使用示例\",\"a\":\"_2-使用示例\"},\"3451\":{\"h\":\"2.1 示例1：输出星星\",\"a\":\"_2-1-示例1-输出星星\"},\"3452\":{\"t\":\"输出5行 * ，在第几行就输出几个*\"},\"3453\":{\"t\":\"for(int i = 1;i <= 5;i++){//控制行数 for(int j = 1;j <= i;j++){//控制列数 System.out.print(\\\"*\\\"); } System.out.println(); } \"},\"3454\":{\"h\":\"2.2 示例2：输出99乘法表\",\"a\":\"_2-2-示例2-输出99乘法表\"},\"3455\":{\"t\":\"for(int i = 1;i <= 9;i++){ for(int j = 1;j <= i;j++){ System.out.print(i + \\\" * \\\" + j + \\\" = \\\" + (i * j) + \\\" \\\"); } System.out.println(); } \"},\"3456\":{\"h\":\"2.3 示例3：100以内的所有质数的输出\",\"a\":\"_2-3-示例3-100以内的所有质数的输出\"},\"3457\":{\"t\":\"public static void main(String[] args) { boolean isFlag = true;//标识i是否被j除尽，一旦除尽，修改其值 int count = 0;//记录质数的个数 //获取当前时间距离1970-01-01 00:00:00 的毫秒数 long start = System.currentTimeMillis(); for(int i = 2;i <= 100000;i++){//遍历100000以内的自然数 //优化二：对本身是质数的自然数是有效的。 //for(int j = 2;j < i;j++){ for(int j = 2;j <= Math.sqrt(i);j++){//j:被i去除 if(i % j == 0){ //i被j除尽 isFlag = false; break;//优化一：只对本身非质数的自然数是有效的。 } } // if(isFlag == true){ //System.out.println(i); count++; } //重置isFlag isFlag = true; } //获取当前时间距离1970-01-01 00:00:00 的毫秒数 long end = System.currentTimeMillis(); System.out.println(\\\"质数的个数为：\\\" + count); System.out.println(\\\"所花费的时间为：\\\" + (end - start)); //17110 - 优化一：break:1546 - 优化二：13 } \"},\"3458\":{\"h\":\"1-9. 数组\"},\"3459\":{\"h\":\"Ⅰ. 概述\",\"a\":\"i-概述\"},\"3460\":{\"h\":\"1. 概念\",\"a\":\"_1-概念\"},\"3461\":{\"t\":\"数组(Array)，是多个相同类型数据按一定顺序排列的集合，并使用一个名字命名，并通过编号的方式对这些数据进行统一管理。\"},\"3462\":{\"h\":\"2. 数组的元素\",\"a\":\"_2-数组的元素\"},\"3463\":{\"t\":\"数组的变量类型：数组内部元素的变量类型\"},\"3464\":{\"t\":\"索引：数组的下标，从0开始步进（注意：Java是强类型语言，没有关联数组一说）\"},\"3465\":{\"t\":\"数组元素：数组中的每个元素\"},\"3466\":{\"t\":\"数组的长度：数组元素的个数\"},\"3467\":{\"h\":\"3. 数组的特点\",\"a\":\"_3-数组的特点\"},\"3468\":{\"t\":\"数组本身是引用数据类型，而数组中的元素可以是任何数据类型，包括基本数据类型和引用数据类型。\"},\"3469\":{\"t\":\"创建数组对象会在内存中开辟一整块连续的空间，而数组名中引用的是这块连续空间的首地址。 \"},\"3470\":{\"t\":\"可以直接通过下标(或索引)的方式调用指定位置的元素，速度很快\"},\"3471\":{\"t\":\"数组的长度一旦确定，就不能修改。\"},\"3472\":{\"h\":\"4. 数组的分类\",\"a\":\"_4-数组的分类\"},\"3473\":{\"t\":\"按照维度：一维数组、二维数组、多维数组\"},\"3474\":{\"t\":\"按照元素数据类型：基本数据类型元素的数组、引用数据类型元素的数组（如String类型的数组）\"},\"3475\":{\"h\":\"5.使用数组的步骤\",\"a\":\"_5-使用数组的步骤\"},\"3476\":{\"t\":\"声明数组\"},\"3477\":{\"t\":\"分配空间：数组分配的内存空间是连续的 \"},\"3478\":{\"t\":\"java中必须先为数组分配内存空间，才能使用数组\"},\"3479\":{\"t\":\"赋值\"},\"3480\":{\"t\":\"处理数据\"},\"3481\":{\"h\":\"6. 数组间的赋值与复制\",\"a\":\"_6-数组间的赋值与复制\"},\"3482\":{\"h\":\"6.1 赋值\",\"a\":\"_6-1-赋值\"},\"3483\":{\"t\":\"将array1保存的数组的地址值赋给了array2，使得array1和array2的指针共同指向同一个数组实体。\"},\"3484\":{\"t\":\"array2 = array1; \"},\"3485\":{\"h\":\"6.2 复制一份内存空间\",\"a\":\"_6-2-复制一份内存空间\"},\"3486\":{\"t\":\"array2 = new int[array1.length]; //初始化并分配空间 for(int i=0;i<array2.length.i++){ //赋值 array2[i] = array1[i]; } \"},\"3487\":{\"h\":\"Ⅱ. 一维数组\",\"a\":\"ii-一维数组\"},\"3488\":{\"h\":\"1. 声明数组\",\"a\":\"_1-声明数组\"},\"3489\":{\"t\":\"声明语法1：数据类型[ ] 数组名；\"},\"3490\":{\"t\":\"声明语法2：数据类型 数组名[]\"},\"3491\":{\"t\":\"int[] arr1; //声明数组：确定数据类型 int arr2[]; \"},\"3492\":{\"h\":\"2. 初始化数组\",\"a\":\"_2-初始化数组\"},\"3493\":{\"t\":\"数组一旦初始化完成，其长度就确定了。\"},\"3494\":{\"h\":\"2.1 动态初始化\",\"a\":\"_2-1-动态初始化\"},\"3495\":{\"t\":\"先给数组分配空间，然后再进行赋值。\"},\"3496\":{\"t\":\"String[] users; //声明 users = new String[2];//初始化：分配空间 String[] users = new String[2]; //声明+初始化 users[0] = \\\"jinno\\\" //赋值：通过下标取出数组元素，然后赋值 \"},\"3497\":{\"h\":\"2.2 静态初始化\",\"a\":\"_2-2-静态初始化\"},\"3498\":{\"t\":\"数组的初始化和数组元素的赋值操作同时进行，不要给数组长度，赋值时自动获得长度。\"},\"3499\":{\"t\":\"优先使用简化写法：int[ ] nums = {1,2,3};\"},\"3500\":{\"t\":\"int[] nums;//声明 nums = new int[]{1,2,3};//初始化和赋值同时进行 int[] nums = new int[]{1,2,3};//声明+初始化 int[] nums = {1,2,3};//简化写法 \"},\"3501\":{\"h\":\"3. 访问数组元素\",\"a\":\"_3-访问数组元素\"},\"3502\":{\"t\":\"定义并用运算符new为之分配空间后，才可以访问数组中的每个元素；\"},\"3503\":{\"t\":\"可以直接通过数组名[ 数组元素下标 ]的方式调用指定位置的元素; \"},\"3504\":{\"t\":\"数组元素下标可以是整型常量或整型表达式。如a[3] , b[i] , c[6*i];\"},\"3505\":{\"t\":\"数组元素下标从0开始；长度为n的数组合法下标取值范围: 0 —>n-1；\"},\"3506\":{\"t\":\"//为指定索引处的元素赋值，若已有值，则为修改值 nums[1] = 20; //获取指定索引出的值，若指定索引处没有值，就获取默认值 int age = nums[1]; \"},\"3507\":{\"h\":\"4. 获取数组长度\",\"a\":\"_4-获取数组长度\"},\"3508\":{\"t\":\"每个数组都有一个属性length指明它的长度。 数组初始化完成后，其长度就不可变了。\"},\"3509\":{\"t\":\"System.out.println(arr.length); \"},\"3510\":{\"h\":\"5. 遍历数组\",\"a\":\"_5-遍历数组\"},\"3511\":{\"t\":\"可以通过for循环遍历数组\"},\"3512\":{\"t\":\"int[] nums = new int[]{1,2,3,4,5}; for(i=0;i<nums.length;i++){ System.out.println(nums[i]); } \"},\"3513\":{\"h\":\"6. 数组元素的默认初始化值\",\"a\":\"_6-数组元素的默认初始化值\"},\"3514\":{\"t\":\"数组是引用类型，它的元素相当于类的成员变量，因此数组一经分配空间，其中的每个元素也被按照成员变量同样的方式被隐式初始化。即：当对数组进行初始化，还没有分配值的时候，数组的元素会有一个默认值。\"},\"3515\":{\"t\":\"默认值与数组的数据类型有关，具体如下：\"},\"3516\":{\"t\":\"1-9-1\"},\"3517\":{\"h\":\"7. 一维数组的内存解析\",\"a\":\"_7-一维数组的内存解析\"},\"3518\":{\"h\":\"7.1 内存结构\",\"a\":\"_7-1-内存结构\"},\"3519\":{\"t\":\"1-9-2\"},\"3520\":{\"h\":\"7.2 数组的内存结构\",\"a\":\"_7-2-数组的内存结构\"},\"3521\":{\"t\":\"注意：非精准详细的解析，只是对数组的结构进行一些解释（详见JVM）。\"},\"3522\":{\"t\":\"栈：用来存放标识符【数组名】\"},\"3523\":{\"t\":\"堆：用来存放new出来的数组【数组的值】\"},\"3524\":{\"h\":\"7.3 储存的过程\",\"a\":\"_7-3-储存的过程\"},\"3525\":{\"t\":\"数组储存的过程：初始化数组时，在栈内存以栈的结构储存数组的标识符（k）和数组第一个元素的内存地址（v），堆内存中储存（分配空间）数组的值（默认值）。给数组赋值时，就将赋的值替换掉元素的默认值。\"},\"3526\":{\"t\":\"数组删除和修改的过程：删除数组时，就将数组在栈中储存的K=V出栈，同时数组堆中的值成为垃圾，等待被回收。当对数组本身进行修改，重新初始化时（重新分配空间），就将栈中储存的数组第一个元素的地址替换掉（之前与值的指针断裂）；重新指向新的数组的值，同时就数组的值成为垃圾，等待被回收。\"},\"3527\":{\"t\":\"1-9-3\"},\"3528\":{\"h\":\"8. 注意事项\",\"a\":\"_8-注意事项\"},\"3529\":{\"t\":\"数组长度：数组的长度是固定的，在初始化时就确定了，无法更改\"},\"3530\":{\"t\":\"数据类型：数组的中的元素具有相同的数据类型（或能自动转换类型），声明数组时要确定数据类型\"},\"3531\":{\"h\":\"Ⅲ. 多维数组\",\"a\":\"iii-多维数组\"},\"3532\":{\"h\":\"说明\",\"a\":\"说明\"},\"3533\":{\"t\":\"对于二维数组的理解，我们可以看成是一维数组array1又作为另一个一维数组array2的元素而存在。其实，从数组底层的运行机制来看，其实没有多维数组。\"},\"3534\":{\"t\":\"因为数组是引用类型，所以其实二维元素的值是一个内存地址（指针），指向了一个一维数组。\"},\"3535\":{\"t\":\"外层数组：指的是二维数组本身，他的元素全是一维数组\"},\"3536\":{\"t\":\"内层数组：指的是二维数组的元素。\"},\"3537\":{\"t\":\"外层数组元素：arr[0],arr[1] 等，值为内层数组的内存地址\"},\"3538\":{\"t\":\"内层数组元素：arr[0][0],arr[1][2] 等，值为数据\"},\"3539\":{\"h\":\"1. 二维数组的声明\",\"a\":\"_1-二维数组的声明\"},\"3540\":{\"h\":\"1.1 静态初始化\",\"a\":\"_1-1-静态初始化\"},\"3541\":{\"t\":\"int[][] arr;//声明和初始化分开 arr = new int[][]{{1},{2}}; int[][] arr = new int[][]{{1,2,3},{2,3}}; //合并成一行 int[][] arr = {{1,2,3},{2,3}};//简化写法 \"},\"3542\":{\"h\":\"1.2 动态初始化-指定内层数组长度\",\"a\":\"_1-2-动态初始化-指定内层数组长度\"},\"3543\":{\"t\":\"为数组和内层数组都直接分配了内存空间。此时，数组的长度和内层数组的长度都确定了。\"},\"3544\":{\"t\":\"如下：定义了名称为arr的二维数组；二维数组中有3个一维数组；每一个一维数组中有2个元素；一维数组的名称分别为arr[0], arr[1], arr[2]\"},\"3545\":{\"t\":\"int[][] arr = new int[3][2];//外层2个元素，内层3个元素 \"},\"3546\":{\"h\":\"1.3 动态初始化-未指定数组内层长度\",\"a\":\"_1-3-动态初始化-未指定数组内层长度\"},\"3547\":{\"t\":\"只为数组本身指定长度，不为数组内部的内层数组指定长度（内层数组只声明，不初始化）。\"},\"3548\":{\"t\":\"意义：二维数组每个元素的数组长度，不再强制相等。\"},\"3549\":{\"t\":\"如下：二维数组中有3个一维数组。每个一维数组都是默认初始化值null。\"},\"3550\":{\"t\":\"int[][] arr = new int[3][]; //只规定外层长度，不指定内层长度。 \"},\"3551\":{\"h\":\"2. 数组赋值\",\"a\":\"_2-数组赋值\"},\"3552\":{\"t\":\"动态初始化后，就可以为数组元素赋值了（静态初始化已经赋值过了）。\"},\"3553\":{\"h\":\"2.1 指定了内层数组长度\",\"a\":\"_2-1-指定了内层数组长度\"},\"3554\":{\"t\":\"为外层元素赋值：外层元素的值是一个一维数组，赋的值也必须是个数组。\"},\"3555\":{\"t\":\"为内层元素赋值：层层进。\"},\"3556\":{\"t\":\"int[][] arr = new int[3][2] //为外层元素赋值 arr[0] = new int[]{1,2,3}; //为内层元素赋值 arr[0][1] = 10; \"},\"3557\":{\"h\":\"2.2 未指定内层数组长度\",\"a\":\"_2-2-未指定内层数组长度\"},\"3558\":{\"t\":\"为外层元素赋值：虽然是数组，但是他们的值是空的，需要进行数组的初始化，可以静态初始化，也可以动态初始化，内层数组的长度不限。\"},\"3559\":{\"t\":\"为内层元素赋值：外层元素必须初始化，才能为内层元素赋值，不然会报错。\"},\"3560\":{\"t\":\"int[][] arr = new int[3][]; //为外层元素赋值，可以任意指定长度 arr[0] = new int[3]; arr[0] = new int[]{1,2,3}; //为内层元素赋值 arr[0][0] = 20; \"},\"3561\":{\"h\":\"3. 元素的访问和值\",\"a\":\"_3-元素的访问和值\"},\"3562\":{\"t\":\"任何元素访问前必须初始化，未指定内层数组长度的要先初始化内层数组才能访问内层元素。 访问外层数组元素，得到的是一个内存地址值，指向的是内层数组。\"},\"3563\":{\"t\":\"int[][] arr1 = new int[][]{{1,2,3},{2,3}}; arr1[0][1];//2 arr1[0]; // [I@15db9742 [表示数组;I表示int类型;15db9742表示16进制内存地址 int[][] arr2 = new int[3][2]; arr2[1][1];//0 int[][] arr3 = new int[3][]; arr3[1] = null;//外层元素能访问，值为null arr3[1][1];//报错，内层数组未初始化，不能访问内层数据 \"},\"3564\":{\"h\":\"4. 数组的长度\",\"a\":\"_4-数组的长度\"},\"3565\":{\"t\":\"外层数组的长度：外层元素的个数\"},\"3566\":{\"t\":\"内层数组的长度：内层元素的个数\"},\"3567\":{\"t\":\"String[][] arr = new String[2][3]; arr.length;//2,外层数组的长度 arr[0].length;//3,第一个内层数组的长度 \"},\"3568\":{\"h\":\"5. 遍历数组\",\"a\":\"_5-遍历数组-1\"},\"3569\":{\"t\":\"遍历二维数组就需要嵌套循环了\"},\"3570\":{\"t\":\"for(int i = 0;i < arr.length;i++){ for(int j = 0;j < arr[i].length;j++){ System.out.print(arr[i][j] + \\\" \\\"); } System.out.println(); } \"},\"3571\":{\"h\":\"6. 数组元素的默认初始化值\",\"a\":\"_6-数组元素的默认初始化值-1\"},\"3572\":{\"t\":\"指定了内层数组的长度 \"},\"3573\":{\"t\":\"外层元素的初始化值为：地址值，指向的内层数组\"},\"3574\":{\"t\":\"内层元素的初始化值为：与一维数组初始化情况相同\"},\"3575\":{\"t\":\"未指定内层数组的长度 \"},\"3576\":{\"t\":\"外层元素的初始化值为：null，没有初始化，没有地址\"},\"3577\":{\"t\":\"内层元素的初始化值为：不能调用，否则报错。\"},\"3578\":{\"h\":\"7. 二维数组的内存解析\",\"a\":\"_7-二维数组的内存解析\"},\"3579\":{\"t\":\"1-9-4\"},\"3580\":{\"h\":\"8. 注意事项\",\"a\":\"_8-注意事项-1\"},\"3581\":{\"t\":\"数据类型：二维数组也要指定数据类型，这个数据类型限制的是内层数组的元素（外层元素本质上是一维数组，引用类型），也就是内层数组的元素类型也是确定的。\"},\"3582\":{\"t\":\"元素访问：未初始化的不能访问。\"},\"3583\":{\"t\":\"元素的值：外层数组元素的值是一个内存地址（未初始化则为null）； \"},\"3584\":{\"t\":\"即使未赋值，也能取，因为分配内存的时候，内存地址就已经确定了。\"},\"3585\":{\"h\":\"Ⅳ. 常见异常\",\"a\":\"iv-常见异常\"},\"3586\":{\"h\":\"1. 数组索引越界\",\"a\":\"_1-数组索引越界\"},\"3587\":{\"t\":\"ArrayIndexOutOfBoundsException：用了不存在的索引（超过范围的索引）\"},\"3588\":{\"t\":\"int[] arr = new int[]{1,2,3,4,5}; System.out.println(arr[-1]); System.out.println(arr[5]); \"},\"3589\":{\"h\":\"2. 空指针\",\"a\":\"_2-空指针\"},\"3590\":{\"t\":\"NullPointerException：数组标识符指向的内存没了，或者不存在。\"},\"3591\":{\"t\":\"//情况1：数组被赋值为null int[] arr1 = new int[]{1,2,3}; arr1 = null; //情况2：访问未初始化的数组 int[][] arr2 = new int[4][]; System.out.println(arr2[0][0]); //情况3：null调用方法 String[] arr3 = new String[]{\\\"AA\\\",\\\"BB\\\",\\\"CC\\\"}; arr3[0] = null; System.out.println(arr3[0].toString()); \"},\"3592\":{\"h\":\"Ⅴ. Arrays工具类\",\"a\":\"v-arrays工具类\"},\"3593\":{\"t\":\"操作数组的工具类，包含了很多用来操作数据的方法\"},\"3594\":{\"t\":\"详见：Arrays工具类\"},\"3595\":{\"h\":\"2-1. 类与对象\"},\"3596\":{\"h\":\"Ⅰ. 面向对象\",\"a\":\"i-面向对象\"},\"3597\":{\"h\":\"1. 面向过程与面向对象\",\"a\":\"_1-面向过程与面向对象\"},\"3598\":{\"t\":\"面向对象：OOP，Object Oriented Programming\"},\"3599\":{\"t\":\"面向过程：Procedure Oriented Programming 二者都是一种思想，面向对象是相对于面向过程而言的。面向过程，强调的是功能行为，以函数为最小单位，考虑怎么做。面向对象，将功能封装进对象，强调具备了功能的对象，以类/对象为最小单位，考虑谁来做。\"},\"3600\":{\"t\":\"面向对象更加强调运用人类在日常的思维逻辑中采用的思想方法与原则，如抽象、分类、继承、聚合、多态等。\"},\"3601\":{\"h\":\"2. 面向对象的三大特征\",\"a\":\"_2-面向对象的三大特征\"},\"3602\":{\"t\":\"封装 (Encapsulation)\"},\"3603\":{\"t\":\"继承 (Inheritance)\"},\"3604\":{\"t\":\"多态 (Polymorphism)\"},\"3605\":{\"h\":\"3. 面向对象的思想概述\",\"a\":\"_3-面向对象的思想概述\"},\"3606\":{\"t\":\"程序员从面向过程的执行者转化成了面向对象的指挥者\"},\"3607\":{\"t\":\"面向对象分析方法分析问题的思路和步骤： \"},\"3608\":{\"t\":\"根据问题需要，选择问题所针对的现实世界中的实体。\"},\"3609\":{\"t\":\"从实体中寻找解决问题相关的属性和功能，这些属性和功能就形成了概念世界中的类。\"},\"3610\":{\"t\":\"把抽象的实体用计算机语言进行描述，形成计算机世界中类的定义。即借助某种程序语言，把类构造成计算机能够识别和处理的数据结构。\"},\"3611\":{\"t\":\"将类实例化成计算机世界中的对象。对象是计算机世界中解决问题的最终工具。\"},\"3612\":{\"h\":\"4. Java中的万物皆对象\",\"a\":\"_4-java中的万物皆对象\"},\"3613\":{\"t\":\"在Java语言范畴中，我们都将功能、结构等封装到类中，通过类的实例化，来调用具体的功能结构\"},\"3614\":{\"t\":\"在java中，万物皆对象，所有代码都要归属为一个对象；包括涉及到Java语言与前端Html（element对象）、后端的数据库交互时，前后端的结构在Java层面交互时，都体现为类、对象。\"},\"3615\":{\"h\":\"Ⅱ. 类与对象\",\"a\":\"ii-类与对象\"},\"3616\":{\"h\":\"1. 什么是类与对象\",\"a\":\"_1-什么是类与对象\"},\"3617\":{\"t\":\"类(Class)和对象(Object)是面向对象的核心概念。\"},\"3618\":{\"t\":\"类是对一类事物的描述，是抽象的、概念上的定义\"},\"3619\":{\"t\":\"对象是实际存在的该类事物的每个个体，因而也称为实例(instance)。万事万物皆对象；\"},\"3620\":{\"t\":\"类 = 抽象概念的人；对象 = 实实在在的某个人\"},\"3621\":{\"t\":\"面向对象程序设计的重点是 类的设计；类的设计，其实就是类的成员的设计\"},\"3622\":{\"h\":\"2. 类与引用数据类型\",\"a\":\"_2-类与引用数据类型\"},\"3623\":{\"t\":\"所有类都是引用数据类型，类型就是类名。\"},\"3624\":{\"t\":\"String数据类型本质就是java内部定义的String类。\"},\"3625\":{\"h\":\"3. 类与类的成员\",\"a\":\"_3-类与类的成员\"},\"3626\":{\"t\":\"成员变量（field）：类拥有的属性\"},\"3627\":{\"t\":\"方法（method）：类可以做的事（行为）\"},\"3628\":{\"h\":\"4. 创建类\",\"a\":\"_4-创建类\"},\"3629\":{\"t\":\"一个文件中可以创建多个类（只能有一个带public的），但是开发中，通常一个文件中只有一个类。\"},\"3630\":{\"t\":\"class Person{ //class关键字 类名 String name; //属性 int age = 1; //属性，定义并初始化 public void eat(){ //方法 System.out.println(\\\"吃饭\\\"); } public void talk(String language){ //带参数的方法 System.out.pringln(\\\"说\\\"+language); } } \"},\"3631\":{\"h\":\"5. 创建对象\",\"a\":\"_5-创建对象\"},\"3632\":{\"t\":\"根据类创建类的对象，我们使用类的成员时是通过具体的对象使用的。\"},\"3633\":{\"t\":\"创建类的对象 = 类的实例化 = 实例化类\"},\"3634\":{\"t\":\"语法：类名 对象名 = new 类名(可选参数);\"},\"3635\":{\"t\":\"创建玩对象后，就可以使用“对象名. 对象成员 ”的方式访问对象成员（包括属性和 方法）\"},\"3636\":{\"t\":\"public class Person{ public static void main(String[] args){ //在程序入口中调用类 Person p1 = new Person(); //使用对象调用属性：对象.属性名 p1.name = \\\"Tom\\\" //为属性赋值 System.out.println(p1.age);//获取属性的值 //使用对象调用方法：对象.方法名 p1.eat(); p1.talk(\\\"English\\\"); } } \"},\"3637\":{\"h\":\"6. 类和对象的使用\",\"a\":\"_6-类和对象的使用\"},\"3638\":{\"t\":\"创建类：设计类的成员\"},\"3639\":{\"t\":\"创建类的对象\"},\"3640\":{\"t\":\"通过对象调用属性和方法\"},\"3641\":{\"h\":\"7. 类与多个对象\",\"a\":\"_7-类与多个对象\"},\"3642\":{\"t\":\"如果创建了一个类的多个对象，则每个对象都独立的拥有一套类的属性（非static的）。\"},\"3643\":{\"t\":\"意味着：如果我们修改一个对象的属性a，则不影响另外一个对象属性a的值。\"},\"3644\":{\"h\":\"8. 对象间的赋值\",\"a\":\"_8-对象间的赋值\"},\"3645\":{\"t\":\"对象间进行赋值时，是把保存对象的内存地址赋给了对方，因此两个对象指向同一份内存地址，即执行同一个对象实体。\"},\"3646\":{\"t\":\"Person p1 = new Person(); Person p2 = p1; p2.age = 20; system.out.println(p1.age);//20 \"},\"3647\":{\"h\":\"9. 类的访问机制\",\"a\":\"_9-类的访问机制\"},\"3648\":{\"t\":\"在一个类中的访问机制： 类中的方法可以直接访问类中的成员变量 。 \"},\"3649\":{\"t\":\"例外：static 方法访问非 static， ， 编译不通过 。\"},\"3650\":{\"t\":\"在不同类中的访问机制： 先创建要访问类的对象 ， 再用对象访问类中定义的成员\"},\"3651\":{\"h\":\"10. 补充说明\",\"a\":\"_10-补充说明\"},\"3652\":{\"t\":\"java内置类：我们是通过创建类和方法来完成一些功能的，java内置了丰富的类，帮我们完成了很多常见的功能。\"},\"3653\":{\"t\":\"属性的默认值：当用对象调用未赋值的属性时，属性会有个默认值，这个默认值跟数组中元素的默认值一样。\"},\"3654\":{\"h\":\"Ⅲ. 特殊形式对象\",\"a\":\"iii-特殊形式对象\"},\"3655\":{\"h\":\"1. 对象数组\",\"a\":\"_1-对象数组\"},\"3656\":{\"t\":\"数组可以是任何类型：基本数据类型、引用类型都可以。对象就是引用类型的，具体类型就是类名，例如：String数据类型就是引用类型，String是java的一个内置类。\"},\"3657\":{\"t\":\"创建对象数组：假设有Person类，我们需要一次性创建20个Person类的实例、\"},\"3658\":{\"t\":\"Person [] p1 = new Person[20]; //直接声明了20个对象 for(int i=0; i<p1.legnth;i++){ p1[i] = new Student(); //循环创建对象 p1[i][age] = (int)(Math.random()*10+11));//为age赋值 } \"},\"3659\":{\"t\":\"如上，此时内存中有1个数组，数组中包含了20个元素，每个元素是Person类型，但是只是null，并不是对象，具体对象还需要我们进一步创建（初始化），可以使用for循环创建。\"},\"3660\":{\"h\":\"2. 匿名对象\",\"a\":\"_2-匿名对象\"},\"3661\":{\"t\":\"我们创建的对象，没有显式的赋给一个变量名，即为匿名对象。\"},\"3662\":{\"t\":\"特征：匿名对象只能调用一次\"},\"3663\":{\"t\":\"使用场景：对象作为函数的参数\"},\"3664\":{\"t\":\"public class Test(){ public static void maina(String[] args){ new Phone().age = 20;//创建对象，不赋值，直接使用，执行完就失效 new Phone().age; //1; //应用场景：对象作为方法的参数 HelloGay hg = new HelloGay(); hg.show(new Phone()); } } class HelloGay{ public void show(Phone phone){ public void sayHello() public void doIt(); } } class Gay{ int age = 1; public void sayHello(){ System.out.println('Hello') } public void doIt(){ System.out.println(\\\"Do\\\"); } } \"},\"3665\":{\"h\":\"2-2. 属性与方法\"},\"3666\":{\"h\":\"Ⅰ. 属性\",\"a\":\"i-属性\"},\"3667\":{\"h\":\"1. 属性声明语法\",\"a\":\"_1-属性声明语法\"},\"3668\":{\"t\":\"修饰符 数据类型 属性名 = 初始化值; public String age = 10; \"},\"3669\":{\"t\":\"修饰符 \"},\"3670\":{\"t\":\"权限修饰符：private、缺省、protected、public（详见封装）\"},\"3671\":{\"t\":\"其他修饰符：static、final（见后续章节）\"},\"3672\":{\"t\":\"数据类型：任何基本数据类型(如int、Boolean) 或 任何引用数据类型。 \"},\"3673\":{\"t\":\"包括：属性的类型可以是一个类（修饰符将表示一个对象，对象也是引用数据类型）。\"},\"3674\":{\"t\":\"属性名：属于标识符，符合命名规则和规范即可。\"},\"3675\":{\"t\":\"初始化值：可以选择给变量一个初始化值，如果没有初始化值，会采用数据类型的默认值。\"},\"3676\":{\"h\":\"2. 属性与局部变量的对比\",\"a\":\"_2-属性与局部变量的对比\"},\"3677\":{\"t\":\"属性（成员变量）：声明在类中的变量\"},\"3678\":{\"t\":\"局部变量：只在局部作用域有效的变量 \"},\"3679\":{\"t\":\"方法内、方法形参、构造器内、构造器形参、代码块内\"},\"3680\":{\"h\":\"2.1 相同点\",\"a\":\"_2-1-相同点\"},\"3681\":{\"t\":\"定义变量的格式：数据类型 变量名 = 变量值 \"},\"3682\":{\"t\":\"属性还会多个权限控制符\"},\"3683\":{\"t\":\"先声明，后使用\"},\"3684\":{\"t\":\"变量都有其对应的作用域\"},\"3685\":{\"h\":\"2.2 不同点\",\"a\":\"_2-2-不同点\"},\"3686\":{\"t\":\"2-2-1\"},\"3687\":{\"t\":\"在类中声明的位置的不同 \"},\"3688\":{\"t\":\"属性：直接定义在类的一对{}内\"},\"3689\":{\"t\":\"局部变量：声明在方法内、方法形参、代码块内、构造器形参、构造器内部的变量\"},\"3690\":{\"t\":\"关于权限修饰符的不同 \"},\"3691\":{\"t\":\"属性：可以在声明属性时，指明其权限，使用权限修饰符。常用的权限修饰符：private、public、缺省、protected --->封装性\"},\"3692\":{\"t\":\"局部变量：不可以使用权限修饰符。\"},\"3693\":{\"t\":\"默认初始化值的情况 \"},\"3694\":{\"t\":\"属性：类的属性，根据其类型，都有默认初始化值（和数组元素的默认值一样）。 \"},\"3695\":{\"t\":\"整型（byte、short、int、long）：0\"},\"3696\":{\"t\":\"浮点型（float、double）：0.0\"},\"3697\":{\"t\":\"字符型（char）：0 （或'\\\\u0000'）\"},\"3698\":{\"t\":\"布尔型（boolean）：false\"},\"3699\":{\"t\":\"引用数据类型（类、数组、接口）：null\"},\"3700\":{\"t\":\"局部变量：没有默认初始化值。意味着，我们在调用局部变量之前，一定要显式赋值。 \"},\"3701\":{\"t\":\"特别地：形参在调用时，我们赋值即可。\"},\"3702\":{\"t\":\"在内存中加载的位置： \"},\"3703\":{\"t\":\"属性：加载到堆空间中（非static）\"},\"3704\":{\"t\":\"局部变量：加载到栈空间\"},\"3705\":{\"h\":\"3. 对属性可以赋值的位置\",\"a\":\"_3-对属性可以赋值的位置\"},\"3706\":{\"t\":\"①默认初始化\"},\"3707\":{\"t\":\"②显式初始化\"},\"3708\":{\"t\":\"③构造器中初始化\"},\"3709\":{\"t\":\"④有了对象以后，可以通过\\\"对象.属性\\\"或\\\"对象.方法\\\"的方式，进行赋值\"},\"3710\":{\"t\":\"⑤在代码块中赋值\"},\"3711\":{\"t\":\"执行的先后顺序：① - ② =⑤ - ③ - ④；②跟⑤谁在前就先执行谁，一般②在前\"},\"3712\":{\"h\":\"Ⅱ. 方法\",\"a\":\"ii-方法\"},\"3713\":{\"h\":\"1. 概述\",\"a\":\"_1-概述\"},\"3714\":{\"t\":\"方法：描述类应该具有的功能。\"},\"3715\":{\"t\":\"功能封装为方法的目的是，可以实现代码重用，简化代码。Java里的方法不能独立存在，所有的方法必须定义在类里。\"},\"3716\":{\"t\":\"2-2-1\"},\"3717\":{\"h\":\"2. 方法的分类\",\"a\":\"_2-方法的分类\"},\"3718\":{\"t\":\"权限修饰符 其他关键字 返回值类型 方法名(形参列表){ 方法体 return 返回值;//可选 } //暂时不考虑：static、final、abstract关键字 \"},\"3719\":{\"t\":\"权限修饰符：Java规定的4种权限修饰符：private、public、缺省、protected （详见封装）\"},\"3720\":{\"t\":\"返回值：分为有返回值的和没返回值的 \"},\"3721\":{\"t\":\"有返回值：必须在方法声明时，指定返回值的类型。同时，方法中，需要使用 return关键字来返回指定类型的变量或常量：“return 数据”。 \"},\"3722\":{\"t\":\"可以return一个表达式，只要这个表达式的结果是一个值。\"},\"3723\":{\"t\":\"没有返回值：如果方法没有返回值，则方法声明时，使用void来表示。通常，没有返回值的方法中，就不需要使用return.但是，如果使用的话，只能“return;”表示结束此方法的意思。 \"},\"3724\":{\"t\":\"比如在条件判断中，对不满足条件的参数，直接return，结束程序，不继续执行了。\"},\"3725\":{\"t\":\"方法名：属于标识符，遵循标识符的规则和规范，“见名知意”\"},\"3726\":{\"t\":\"形参列表：方法可以声明0个，1个，或多个形参。 \"},\"3727\":{\"t\":\"格式：数据类型1 形参1,数据类型2 形参2,...\"},\"3728\":{\"t\":\"注意：形参不能有默认值\"},\"3729\":{\"t\":\"方法体：方法功能的体现。\"},\"3730\":{\"h\":\"3. return关键字\",\"a\":\"_3-return关键字\"},\"3731\":{\"t\":\"使用在方法体中，有以下作用\"},\"3732\":{\"t\":\"结束方法\"},\"3733\":{\"t\":\"针对于有返回值类型的方法，使用\\\"return 数据\\\"方法返回所要的数据。\"},\"3734\":{\"t\":\"注意：return关键字后面不可以声明执行语句（会直接报错），但可以是有结果的表达式。\"},\"3735\":{\"h\":\"4. 方法的调用\",\"a\":\"_4-方法的调用\"},\"3736\":{\"h\":\"4.1 调用在main所在类中声明的方法\",\"a\":\"_4-1-调用在main所在类中声明的方法\"},\"3737\":{\"t\":\"在main所在类中声明的普通方法（非static），不能在main中直接调用，也需要先建立对象，再进行调用\"},\"3738\":{\"t\":\"public class Person{ public static void main(String [] args){ Person p1 = new Person(); //依然需要new对象 System.out.println(p1.say()); } public String say(){ return \\\"hello\\\"; } } \"},\"3739\":{\"h\":\"4.2 注意\",\"a\":\"_4-2-注意\"},\"3740\":{\"t\":\"方法被调用一次，就会执行一次\"},\"3741\":{\"t\":\"没有具体返回值的情况，返回值类型用关键字void表示，那么方法体中可以不必使用return语句。如果使用，仅用来结束方法。\"},\"3742\":{\"t\":\"定义方法时，方法的结果应该返回给调用者，交由调用者处理\"},\"3743\":{\"t\":\"方法中只能调用方法或属性，不可以在方法内部定义方法。\"},\"3744\":{\"h\":\"5. 方法访问类的成员\",\"a\":\"_5-方法访问类的成员\"},\"3745\":{\"t\":\"方法中，可以调用当前类的属性或方法，包括调用自己（递归）。方法中也可以定义变量，但注意不能定义方法。\"},\"3746\":{\"t\":\"语法：直接用就行，没有特殊语法，在调用时可以对属性进行修改\"},\"3747\":{\"t\":\"class hello { public static void main(String[] args) { Person p = new Person(); p.grow();//我是jinno我现在11岁[属性值被方法修改了] p.grow();//我是jinno我现在12岁 } } class Person{ int age = 10; String uname = \\\"jinno\\\"; public void grow(){ age++; talk(); } public void talk(){ System.out.println(\\\"我是\\\"+uname+\\\"我现在\\\"+age+\\\"岁\\\"); } } \"},\"3748\":{\"h\":\"6. 递归方法\",\"a\":\"_6-递归方法\"},\"3749\":{\"t\":\"提示\"},\"3750\":{\"t\":\"详见：数据结构与算法>递归\"},\"3751\":{\"t\":\"一个方法体内调用它自身。\"},\"3752\":{\"t\":\"方法递归包含了一种隐式的循环，它会重复执行某段代码，但这种重复执行无须循环控制。递归一定要向已知方向递归，否则这种递归就变成了无穷递归，类似于死循环。\"},\"3753\":{\"t\":\"示例：计算1-100之间所有自然数的和\"},\"3754\":{\"t\":\"//使用循环 int sum = 0; for (int i = 1; i <= 100; i++) { sum += i; } //使用递归函数 public int getSum(int n) {// 3 if (n == 1) { return 1; } else { return n + getSum(n - 1); } } \"},\"3755\":{\"h\":\"Ⅲ. 方法的重载\",\"a\":\"iii-方法的重载\"},\"3756\":{\"h\":\"1. overload：重载\",\"a\":\"_1-overload-重载\"},\"3757\":{\"t\":\"在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同即可（跟方法的权限修饰符、返回值类型、形参变量名、方法体都没有关系！）。\"},\"3758\":{\"t\":\"重载的判断方式：两同一不同\"},\"3759\":{\"t\":\"两同：同一个类、相同方法名\"},\"3760\":{\"t\":\"不同：参数列表不同 \"},\"3761\":{\"t\":\"参数个数不同\"},\"3762\":{\"t\":\"参数类型不同：参数是有顺序的；\"},\"3763\":{\"h\":\"2. 重载的调用\",\"a\":\"_2-重载的调用\"},\"3764\":{\"t\":\"调用方法时，是通过方法名和参数列表来确定调用哪一个方法的。\"},\"3765\":{\"t\":\"即通过法名 ---> 参数列表确定某一个指定的方法。\"},\"3766\":{\"h\":\"3. 重载示例\",\"a\":\"_3-重载示例\"},\"3767\":{\"t\":\"public void getInfo(int id){...} public void getInfo(String id){...} private void getInfo(String id,Char flag){...} \"},\"3768\":{\"h\":\"Ⅳ. 参数传递\",\"a\":\"iv-参数传递\"},\"3769\":{\"h\":\"1. 概念\",\"a\":\"_1-概念\"},\"3770\":{\"t\":\"方法必须由其所在类或对象调用才有意义。方法是可以有参数的：\"},\"3771\":{\"t\":\"形参：方法声明时的参数\"},\"3772\":{\"t\":\"实参：方法调用时实际传给形参的参数值\"},\"3773\":{\"h\":\"2. 参数的数据类型\",\"a\":\"_2-参数的数据类型\"},\"3774\":{\"t\":\"方法的参数可以是任意数据类型。\"},\"3775\":{\"t\":\"基础数据类型\"},\"3776\":{\"t\":\"引用数据类型：包括对象作为参数（数据类型是类）。\"},\"3777\":{\"h\":\"3. 参数值的传递机制\",\"a\":\"_3-参数值的传递机制\"},\"3778\":{\"t\":\"Java里方法的参数传递方式只有一种：值传递。 即将实际参数值的副本（复制品）传入方法内，而参数本身不受影响。\"},\"3779\":{\"h\":\"3.1 基本数据类型\",\"a\":\"_3-1-基本数据类型\"},\"3780\":{\"t\":\"参数赋给形参的是实参真实存储的数据值，传递完之后，两个变量互不干扰。\"},\"3781\":{\"t\":\"示例：交换两个变量（基本变量）的值。\"},\"3782\":{\"t\":\"public class Test{ public static void main(String[] args){ int m = 10; int n = 20; Test test = new Test() test.swap(m,n); System.out.println(m+n); //10,20 } public void swap(int m,int n){ int temp = m ; m = n; n = temp; } } \"},\"3783\":{\"t\":\"错误分析：我们将m,n传递给方法后，方法的形参被赋予了m,n的值，方法中操作的是形参中的m,n，形参中的m,n和原始数据m,n是没有关联的，所以这个交换值的函数失败了。可以使用return将修改后的数据返回。\"},\"3784\":{\"h\":\"3.2 引用数据类型\",\"a\":\"_3-2-引用数据类型\"},\"3785\":{\"t\":\"如果参数是引用数据类型，此时实参赋给形参的是实参存储数据的地址值。我们经常会用到将一个对象作为参数。\"},\"3786\":{\"t\":\"示例：交换两个变量的值。\"},\"3787\":{\"t\":\"class Test{ public void Swap(Data data){ int temp = data.m ; data.m = data.n; data.n = temp; } } class Data{ int m = 10; int n = 20; } \"},\"3788\":{\"t\":\"这时上面的需求被实现了。\"},\"3789\":{\"h\":\"4. 可变个数形参的方法\",\"a\":\"_4-可变个数形参的方法\"},\"3790\":{\"t\":\"可变个数形参（Varargs：variable number or argumengts）机制：允许直接定义能和多个实参相匹配的形参。\"},\"3791\":{\"h\":\"4.1 使用说明\",\"a\":\"_4-1-使用说明\"},\"3792\":{\"t\":\"格式1：方法名(参数的类型 ...参数名)\"},\"3793\":{\"t\":\"格式2：方法名(参数的类型[] 参数名) ；这个写法不推荐，这是JDK5.0以前的写法\"},\"3794\":{\"t\":\"public void show(int i,String ...hobbyl){...} \"},\"3795\":{\"t\":\"当调用可变个数形参的方法时，传入的参数个数可以是：0个，1个,2个，。。。\"},\"3796\":{\"t\":\"可变个数形参的方法与本类中方法名相同，形参不同的方法之间构成重载\"},\"3797\":{\"t\":\"可变个数形参的方法与本类中方法名相同，形参类型也相同的数组之间不构成重载。换句话说，二者不能共存（可变个数形参的第二种写法）。\"},\"3798\":{\"t\":\"如果还有其他参数，可变个数形参在方法的形参中，必须声明在末尾\"},\"3799\":{\"t\":\"可变个数形参在方法的形参中,最多只能声明一个可变形参。\"},\"3800\":{\"t\":\"当调用方法时，传递的参数有符合条件的非可变形参方法，就优先调用。\"},\"3801\":{\"h\":\"4.2 遍历可变形参\",\"a\":\"_4-2-遍历可变形参\"},\"3802\":{\"t\":\"可以在方法中，使用for循环遍历可变个数形参。\"},\"3803\":{\"t\":\"public void show(String ... strs){ for(int i = 0;i < strs.length;i++){ System.out.println(strs[i]); } } \"},\"3804\":{\"h\":\"4.3 注意事项\",\"a\":\"_4-3-注意事项\"},\"3805\":{\"t\":\"可变形参的两种写法，java都会认的，所以不要同时出现。\"},\"3806\":{\"t\":\"尽量使用第一种写法 ...str；避免方法重载冲突。\"},\"3807\":{\"h\":\"2-3. 封装\"},\"3808\":{\"h\":\"Ⅰ. 介绍\",\"a\":\"i-介绍\"},\"3809\":{\"h\":\"程序设计的追求\",\"a\":\"程序设计的追求\"},\"3810\":{\"t\":\"高内聚 ：类的内部数据操作细节自己完成，不允许外部干涉；\"},\"3811\":{\"t\":\"低耦合 ：仅对外暴露少量的方法用于使用。\"},\"3812\":{\"h\":\"1. 什么是封装\",\"a\":\"_1-什么是封装\"},\"3813\":{\"t\":\"隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提高系统的可扩展性、可维护性。通俗的说，把该隐藏的隐藏起来，该暴露的暴露出来。这就是封装性的设计思想。\"},\"3814\":{\"h\":\"2. 封装性的意义\",\"a\":\"_2-封装性的意义\"},\"3815\":{\"t\":\"当我们使用一个类时，如果直接对类内部的属性进行访问和操作，可能会导致数据的错误、混乱或安全性问题。\"},\"3816\":{\"t\":\"public class Test{ public static void main(String[] args){ Person p1 = new Person(); p1.age = -1; //修改了Person类内部的属性 } } class Person{ int age; String uname; } \"},\"3817\":{\"h\":\"2.1 直接访问属性\",\"a\":\"_2-1-直接访问属性\"},\"3818\":{\"t\":\"如上，我们在类外部直接访问了类内部的属性，将年龄设置成了负数，这是不符合常理且危险的。我们正确的做法是，属性只能在类的内部访问，在类外部访问需要通过方法，我们可以在方法中通过方法体来验证和保护要访问的数据。\"},\"3819\":{\"h\":\"2.2 通过封装保护属性\",\"a\":\"_2-2-通过封装保护属性\"},\"3820\":{\"t\":\"如下，我们通过将属性设置为私有的，禁止外部访问，来包含属性，并设置 setxxx和get方法来访问和操作属性。\"},\"3821\":{\"t\":\"public class Test{ public static void main(String[] args){ Person p1 = new Person(); p1.getAge; p1.age = 10;//报错，私有属性无权访问 p1.setAge(10) } } class Person{ private int age; String uname; public void setAge(a){ if(a<=0){ age = 1; }else{ age = a; } } public void getAge(){ return age; } } \"},\"3822\":{\"h\":\"2.3 总结\",\"a\":\"_2-3-总结\"},\"3823\":{\"t\":\"Java中通过将数据声明为私有的(private)，再提供公共的（public）方法:getXxx() 和setXxx()实现对该属性的操作，以实现下述目的：\"},\"3824\":{\"t\":\"隐藏一个类中不需要对外提供的实现细节；\"},\"3825\":{\"t\":\"使用者只能通过事先定制好的方法来访问数据，可以方便地加入控制逻辑，限制对属性的不合理操作；\"},\"3826\":{\"t\":\"便于修改，增强代码的可维护性；\"},\"3827\":{\"h\":\"3. 封装思想的体现\",\"a\":\"_3-封装思想的体现\"},\"3828\":{\"t\":\"如上：Java中通过将数据声明为私有的(private)，再提供公共的（public）方法:getXxx() 和setXxx()实现对该属性的操作\"},\"3829\":{\"t\":\"不对外暴露的私有的方法：将一些方法也设置成私有的。\"},\"3830\":{\"t\":\"单例模式\"},\"3831\":{\"h\":\"4. 封装性的总结\",\"a\":\"_4-封装性的总结\"},\"3832\":{\"t\":\"Java提供了4种权限修饰符来修饰类及类的内部结构，体现类及类的内部结构在被调用时的可见性的大小。\"},\"3833\":{\"h\":\"Ⅱ. 权限修饰符\",\"a\":\"ii-权限修饰符\"},\"3834\":{\"h\":\"1. 四种访问权限修饰符\",\"a\":\"_1-四种访问权限修饰符\"},\"3835\":{\"t\":\"Java权限修饰符置于类的成员定义前，用来限定对象对该类成员的访问权限。\"},\"3836\":{\"t\":\"四种权限从大到小为：public、protected、缺省、private\"},\"3837\":{\"h\":\"2. 具体修饰的目标\",\"a\":\"_2-具体修饰的目标\"},\"3838\":{\"t\":\"修饰类的内部结构：属性、方法、构造器、内部类\"},\"3839\":{\"t\":\"修饰类：修饰类的话，只能使用：缺省、public \"},\"3840\":{\"t\":\"public类可以在任意地方被访问\"},\"3841\":{\"t\":\"default（缺省）类只可以被同一个包内部的类访问\"},\"3842\":{\"h\":\"3. 权限范围介绍\",\"a\":\"_3-权限范围介绍\"},\"3843\":{\"t\":\"2-3-1\"},\"3844\":{\"h\":\"4. 开发中的做法\",\"a\":\"_4-开发中的做法\"},\"3845\":{\"t\":\"在实际开发中，我们一般都将属性定义为私有的，访问和操作都以方法的形式\"},\"3846\":{\"t\":\"setXxx：设置成员\"},\"3847\":{\"t\":\"getXxx：获取成员\"},\"3848\":{\"h\":\"2-4. 构造器\"},\"3849\":{\"t\":\"constructor 构造器，也叫构造方法，是java语言中类的一个成员。\"},\"3850\":{\"h\":\"1. 构造器的作用\",\"a\":\"_1-构造器的作用\"},\"3851\":{\"h\":\"1.1 创建对象\",\"a\":\"_1-1-创建对象\"},\"3852\":{\"t\":\"我们创建对象时进行的语法其实是调用的构造器（构造方法）：new+构造器。\"},\"3853\":{\"t\":\"Person p1 = new Person(); \"},\"3854\":{\"h\":\"1.2 给对象进行初始化\",\"a\":\"_1-2-给对象进行初始化\"},\"3855\":{\"t\":\"构造器可以带参数，创建对象时利用传参进行属性的初始化。\"},\"3856\":{\"t\":\"初始化：过滤，为属性赋值等。\"},\"3857\":{\"t\":\"Person p1 = new Person(\\\"jinno\\\",14); public class Person{ private String name; private int age; public Person(String name,int age){ //带参数的构造方法，用于对属性初始化 this.name = name; this.age = age; } } \"},\"3858\":{\"h\":\"2. 构造器的语法\",\"a\":\"_2-构造器的语法\"},\"3859\":{\"t\":\"修饰符 类名 (参数列表){ 初始化语句; } \"},\"3860\":{\"t\":\"它具有与类相同的名称（必须一样）\"},\"3861\":{\"t\":\"它不声明返回值类型。（与声明为void不同）\"},\"3862\":{\"t\":\"不能被static、final、synchronized、abstract、native修饰\"},\"3863\":{\"t\":\"不能有return语句返回值\"},\"3864\":{\"h\":\"3. 构造器分类\",\"a\":\"_3-构造器分类\"},\"3865\":{\"t\":\"隐式无参构造器（系统默认提供）\"},\"3866\":{\"t\":\"显式定义一个或多个构造器（无参、有参）\"},\"3867\":{\"h\":\"4. 构造器重载\",\"a\":\"_4-构造器重载\"},\"3868\":{\"t\":\"构造器虽然不是方法，但是也能像方法那样重载。\"},\"3869\":{\"t\":\"即可以定义多个互相重载的构造器。和方法重载一样，重载时，参数列表必须不同\"},\"3870\":{\"t\":\"class Person{ int age; String uname; Double Money; public Person(){...}; public Person(String uname){...} public Person(String uname,int age){...} public Person(String uname,Double money){...} } \"},\"3871\":{\"t\":\"我们创建对象时，会根据参数，选择符合参数列表的构造器，使初始化时更加灵活。\"},\"3872\":{\"h\":\"5. 默认构造器\",\"a\":\"_5-默认构造器\"},\"3873\":{\"t\":\"如果没有显式的定义类的构造器的话，则系统默认提供一个空参的构造器（权限跟类一样）。一旦我们显式的定义了类的构造器之后，系统就不再提供默认的空参构造器\"},\"3874\":{\"t\":\"也可以显式的创建一个空参构造器（一般开发中都会提供一个）。\"},\"3875\":{\"h\":\"6. 注意事项\",\"a\":\"_6-注意事项\"},\"3876\":{\"t\":\"Java 语言中，每个类都至少有一个构造器\"},\"3877\":{\"t\":\"默认构造器的修饰符与所属类的修饰符一致\"},\"3878\":{\"t\":\"一旦显式定义了构造器，则系统不再提供默认构造器\"},\"3879\":{\"t\":\"一个类可以创建多个重载的构造器\"},\"3880\":{\"t\":\"父类的构造器不可被子类继承\"},\"3881\":{\"h\":\"7. 构造器的调用\",\"a\":\"_7-构造器的调用\"},\"3882\":{\"t\":\"创建对象时，根据参数列表调用对应的构造器来创建对象。\"},\"3883\":{\"h\":\"8. 总结：属性赋值的先后顺序\",\"a\":\"_8-总结-属性赋值的先后顺序\"},\"3884\":{\"t\":\"① 默认初始化\"},\"3885\":{\"t\":\"② 显式初始化\"},\"3886\":{\"t\":\"③ 构造器中初始化\"},\"3887\":{\"t\":\"④ 通过\\\"对象.方法\\\" 或 \\\"对象.属性\\\"的方式，赋值\"},\"3888\":{\"h\":\"2-5. 关键字\"},\"3889\":{\"h\":\"Ⅰ. this\",\"a\":\"i-this\"},\"3890\":{\"h\":\"1. this的作用\",\"a\":\"_1-this的作用\"},\"3891\":{\"t\":\"this 可以调用类的属性、方法和构造器。\"},\"3892\":{\"h\":\"2. this的使用\",\"a\":\"_2-this的使用\"},\"3893\":{\"h\":\"2.1 在类的方法中\",\"a\":\"_2-1-在类的方法中\"},\"3894\":{\"t\":\"可以使用 this.属性 或 this.方法 的方式，调用当前对象属性或方法。\"},\"3895\":{\"t\":\"通常情况下，都选择省略 this.。特殊情况下，如果方法的形参和类的属性同名时，我们必须显式的使用 this.变量 的方式，表明此变量是属性，而非形参。\"},\"3896\":{\"h\":\"2.2 在类的构造器中\",\"a\":\"_2-2-在类的构造器中\"},\"3897\":{\"t\":\"在类的构造器中，我们可以使用 this.属性 或 this.方法 的方式，调用当前正在创建的对象属性或方法。\"},\"3898\":{\"t\":\"通常情况下，我们都选择省略this.。特殊情况下，如果构造器的形参和类的属性同名时，我们必须显式的使用 this.变量 的方式，表明此变量是属性，而非形参。\"},\"3899\":{\"h\":\"3. this调用构造器\",\"a\":\"_3-this调用构造器\"},\"3900\":{\"t\":\"我们在类的构造器中，可以显式的使用\\\"this(形参列表)\\\"方式，调用本类中指定的其他构造器，以运行其他构造器的代码，省的再写一份，减少了冗余。\"},\"3901\":{\"t\":\"public class Person{ private int age; private String uanme; public Person(int age){ this.age = age;//this调用属性 } public Person(int age,String uname){ this(age);//this调用构造器 this.uanme = uanme; } } \"},\"3902\":{\"t\":\"\\\"this(形参列表)\\\"必须声明在当前构造器的首行\"},\"3903\":{\"t\":\"this的调用不要写成死循环（互相this，或this自己）\"},\"3904\":{\"t\":\"如果一个类中声明了n个构造器，则最多有 n - 1个构造器中使用了\\\"this(形参列表)\\\"\"},\"3905\":{\"t\":\"构造器内部，最多只能声明一个\\\"this(形参列表)\\\"，用来调用其他的构造器\"},\"3906\":{\"h\":\"4. this使用时机\",\"a\":\"_4-this使用时机\"},\"3907\":{\"t\":\"当在方法内需要用到调用该方法的对象时，就用this。\"},\"3908\":{\"t\":\"具体的：我们可以用this来区分属性和局部变量。\"},\"3909\":{\"h\":\"5. 总结\",\"a\":\"_5-总结\"},\"3910\":{\"t\":\"哪个对象调用或者哪个对象正在创建，this就表明是哪个对象。\"},\"3911\":{\"t\":\"当形参与成员变量同名时，如果在方法内或构造器内需要使用成员变量，必须添加this来表明该变量是类的成员变量\"},\"3912\":{\"t\":\"使用this访问属性和方法时，如果在本类中未找到，会从父类中查找\"},\"3913\":{\"t\":\"也可以通过添加this增加可读性\"},\"3914\":{\"h\":\"Ⅱ. package\",\"a\":\"ii-package\"},\"3915\":{\"t\":\"package就是包的意思。\"},\"3916\":{\"h\":\"1. 什么是包\",\"a\":\"_1-什么是包\"},\"3917\":{\"t\":\"为了更好的实现项目中类的管理，提供包的概念。\"},\"3918\":{\"t\":\"本质就是一个文件夹，里面包含了一系列类，方便类的管理。\"},\"3919\":{\"h\":\"2. 包的作用\",\"a\":\"_2-包的作用\"},\"3920\":{\"t\":\"包帮助管理大型软件系统：将功能相近的类划分到同一个包中。比如：MVC的设计模式\"},\"3921\":{\"t\":\"包可以包含类和子包，划分项目层次，便于管理\"},\"3922\":{\"t\":\"解决类命名冲突的问题\"},\"3923\":{\"t\":\"控制访问权限\"},\"3924\":{\"t\":\"包虽然就是个文件夹，但是跟文件夹还是不一样的。在同一个类中，只要用package设置了包名，就可以直接实例化包中其他类。而不用将类导入。\"},\"3925\":{\"h\":\"3. 指定包\",\"a\":\"_3-指定包\"},\"3926\":{\"t\":\"package语句作为Java源文件的第一条语句，指明该文件中定义的类所在的包。\"},\"3927\":{\"t\":\"若缺省该语句，则指定为无名包\"},\"3928\":{\"t\":\"//package 顶层包名.子包名 ; package math; package api.back.user; \"},\"3929\":{\"h\":\"4. 包的命名规则\",\"a\":\"_4-包的命名规则\"},\"3930\":{\"t\":\"包属于标识符，遵循标识符的命名规则、规范(xxxyyyzzz)、且最好“见名知意”。\"},\"3931\":{\"t\":\"另外包是有层级的（目录的层级），层级可以用包名的点区分，每 . 一次，就代表一层文件目录。\"},\"3932\":{\"h\":\"5. JDK中主要包介绍\",\"a\":\"_5-jdk中主要包介绍\"},\"3933\":{\"t\":\"java.lang----包含一些Java语言的核心类，如String、Math、Integer、 System和Thread，提供常用功能\"},\"3934\":{\"t\":\"java.net----包含执行与网络相关的操作的类和接口。\"},\"3935\":{\"t\":\"java.io----包含能提供多种输入/输出功能的类。\"},\"3936\":{\"t\":\"java.util----包含一些实用工具类，如定义系统特性、接口的集合框架类、使用与日期日历相关的函数。\"},\"3937\":{\"t\":\"java.text----包含了一些java格式化相关的类\"},\"3938\":{\"t\":\"java.sql----包含了java进行JDBC数据库编程的相关类/接口\"},\"3939\":{\"t\":\"java.awt----包含了构成抽象窗口工具集（abstract window toolkits）的多个类，这些类被用来构建和管理应用程序的图形用户界面(GUI)。 B/S C/S\"},\"3940\":{\"h\":\"Ⅲ. import\",\"a\":\"iii-import\"},\"3941\":{\"t\":\"可以理解为：package用来定义命名空间，而import是导入命名空间的。\"},\"3942\":{\"h\":\"1. 说明\",\"a\":\"_1-说明\"},\"3943\":{\"t\":\"为使用定义在不同包中的Java类，需用import语句来引入指定包层次下所需要的类或全部类(.*)。\"},\"3944\":{\"t\":\"import语句告诉编译器到哪里去寻找类。\"},\"3945\":{\"h\":\"2. 语法格式\",\"a\":\"_2-语法格式\"},\"3946\":{\"t\":\"在源文件中显式的使用import结构导入指定包下的类、接口\"},\"3947\":{\"t\":\"import 包名.类名; import 包名.*; //*表示所有类 \"},\"3948\":{\"h\":\"3. import的使用细节\",\"a\":\"_3-import的使用细节\"},\"3949\":{\"t\":\"位置：声明在包的声明和类的声明之间\"},\"3950\":{\"t\":\"导入多个结构：如果需要导入多个结构，则并列写出即可\"},\"3951\":{\"t\":\"导入包下全部类：可以使用\\\"xxx.*\\\"的方式，表示可以导入xxx包下的所有结构\"},\"3952\":{\"t\":\"lang包：如果使用的类或接口是java.lang包下定义的，则可以省略import结构\"},\"3953\":{\"t\":\"同包类：如果使用的类或接口是本包下定义的，则可以省略import结构，直接用\"},\"3954\":{\"h\":\"4. 全类名：不导入包直接用\",\"a\":\"_4-全类名-不导入包直接用\"},\"3955\":{\"t\":\"想不导入直接用也可以，在类前面加上包名就行。\"},\"3956\":{\"t\":\"带包名的类名，也称为全类名。\"},\"3957\":{\"t\":\"api.back.User u1 = new api.back.User(); \"},\"3958\":{\"h\":\"5. 不同包下的同名类\",\"a\":\"_5-不同包下的同名类\"},\"3959\":{\"t\":\"如果在源文件中，使用了不同包下的同名的类，则必须至少有一个类需要以全类名的方式显示（也可以都用全类名）。\"},\"3960\":{\"t\":\"注意：使用了全类名，就不需要导入了，也一定不要导入，不然还有可能会出问题。\"},\"3961\":{\"t\":\"此时：导入包和类名的可以直接用类名初始化；没导入的用全类名，互不干扰。\"},\"3962\":{\"h\":\"6. 子包下的类\",\"a\":\"_6-子包下的类\"},\"3963\":{\"t\":\"使用\\\"xxx.*\\\"方式表明可以调用xxx包下的所有结构。但是如果使用的是xxx子包下的结构，则仍需要显式导入（包括本包下的子包）；\"},\"3964\":{\"t\":\"比如：lang包无需导入，但是要使用lang包下的子包，还是需要导入。\"},\"3965\":{\"t\":\"import java.lang.reflect.Field; \"},\"3966\":{\"h\":\"7. import static\",\"a\":\"_7-import-static\"},\"3967\":{\"t\":\"import static：导入指定类或接口中的静态结构（属性或方法）。\"},\"3968\":{\"t\":\"即：直接导入静态属性和静态方法。\"},\"3969\":{\"h\":\"Ⅳ. final\",\"a\":\"iv-final\"},\"3970\":{\"h\":\"1. 说明\",\"a\":\"_1-说明-1\"},\"3971\":{\"t\":\"在Java中声明类、变量和方法时，可使用关键字final来修饰,表示“最终的”。\"},\"3972\":{\"t\":\"final可以用来修饰的结构：类、方法、变量\"},\"3973\":{\"h\":\"2. final类：无法继承\",\"a\":\"_2-final类-无法继承\"},\"3974\":{\"t\":\"final用来修饰一个类:此类不能被其他类所继承，提高安全性\"},\"3975\":{\"t\":\"java内部就有很多这样的类：比如：String类、System类\"},\"3976\":{\"t\":\"final public class A{}//final在public前后都可以 final class A{} \"},\"3977\":{\"h\":\"3. final方法：不能重写\",\"a\":\"_3-final方法-不能重写\"},\"3978\":{\"t\":\"final 用来修饰方法：表明此方法不可以被重写。\"},\"3979\":{\"t\":\"比如：Object类中的getClass()。\"},\"3980\":{\"t\":\"class A{ public final void say(){...} } \"},\"3981\":{\"h\":\"4. final变量：常量\",\"a\":\"_4-final变量-常量\"},\"3982\":{\"t\":\"final 用来修饰变量：此时的\\\"变量\\\"就称为是一个常量，此时常量名要大写\"},\"3983\":{\"h\":\"4.1 final修饰属性\",\"a\":\"_4-1-final修饰属性\"},\"3984\":{\"t\":\"修饰的属性必须赋值，且只能被赋值一次，不然会报错，可以考虑赋值的位置有：显式初始化、代码块中初始化、构造器中初始化；即在生命周期内，必须在对象创建前初始化。\"},\"3985\":{\"t\":\"class A{ final int AGE = 18;//显式初始化 final String MAME; final int SEX; { NAME = \\\"jinno\\\" } public A{ SEX = 1; } } \"},\"3986\":{\"h\":\"4.2 final修饰局部变量\",\"a\":\"_4-2-final修饰局部变量\"},\"3987\":{\"t\":\"public satic void main(String[] args){ final int A = 10; A++;//出错 } \"},\"3988\":{\"h\":\"4.3 final修饰形参\",\"a\":\"_4-3-final修饰形参\"},\"3989\":{\"t\":\"形参也属于局部变量；final修饰形参时，表明此形参是一个常量。当我们调用此方法时，给常量形参赋一个实参。一旦赋值以后，就只能在方法体内使用此形参，但不能进行重新赋值。\"},\"3990\":{\"t\":\"public void getIQ(fianl int IQ){ //这里不赋值，不会报错 IQ = 143; //IQ++;报错 return IQ+10;//这样是可以的，没有改变IQ } \"},\"3991\":{\"h\":\"5. static + final\",\"a\":\"_5-static-final\"},\"3992\":{\"t\":\"static final 用来修饰属性：全局常量\"},\"3993\":{\"h\":\"Ⅴ. 其他\",\"a\":\"v-其他\"},\"3994\":{\"h\":\"1. native\",\"a\":\"_1-native\"},\"3995\":{\"t\":\"主要用在方法上，一个native方法就是一个Java调用非Java代码的接口。一个native方法是指该方法的实现由非Java语言实现，比如用C或C++实现。在定义一个native方法时，并不提供实现体（比较像定义一个Java Interface），因为其实现体是由非Java语言在外面实现的。\"},\"3996\":{\"t\":\"public static native long currentTimeMillis(); \"},\"3997\":{\"h\":\"2-6. 继承\"},\"3998\":{\"h\":\"Ⅰ. extends 继承\",\"a\":\"i-extends-继承\"},\"3999\":{\"t\":\"多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中，那么多个类无需再定义这些属性和行为，只要继承那个类即可。\"},\"4000\":{\"h\":\"1. 语法\",\"a\":\"_1-语法\"},\"4001\":{\"t\":\"class Subclass extends SuperClass{ } class A extends B{} \"},\"4002\":{\"t\":\"A：子类、派生类、subclass\"},\"4003\":{\"t\":\"B：父类、超类、基类、superclass\"},\"4004\":{\"h\":\"2. 继承后的效果\",\"a\":\"_2-继承后的效果\"},\"4005\":{\"t\":\"一旦子类A继承父类B以后，子类A中就获取了父类B中声明的所有的属性和方法。\"},\"4006\":{\"t\":\"private属性和方法也继承了，继承过来后也是private权限。如果要使用，也需要使用getxxx和 setXxx来获取和操作；继承不能破坏封装性。\"},\"4007\":{\"t\":\"子类继承父类以后，还可以声明自己特有的属性或方法：实现功能的拓展。子类和父类的关系，不同于子集和集合的关系。extends：延展、扩展\"},\"4008\":{\"h\":\"3. 继承的意义\",\"a\":\"_3-继承的意义\"},\"4009\":{\"t\":\"继承的出现减少了代码冗余，提高了代码的复用性。‘\"},\"4010\":{\"t\":\"便于功能的扩展\"},\"4011\":{\"t\":\"继承的出现让类与类之间产生了关系，为之后多态性的使用，提供了前提\"},\"4012\":{\"t\":\"注意：不要仅为了获取其他类中某个功能而去继承\"},\"4013\":{\"h\":\"4. 继承的规则总结\",\"a\":\"_4-继承的规则总结\"},\"4014\":{\"t\":\"一个类可以被多个子类继承。\"},\"4015\":{\"t\":\"子类不能直接访问父类中私有的(private) 的成员变量和方法\"},\"4016\":{\"t\":\"Java只支持单继承和多层继承，不允许多重继承； \"},\"4017\":{\"t\":\"一个类只能有一个父类，可以链式继承，不能多重继承。\"},\"4018\":{\"t\":\"子类父类是相对的概念（父类的父类也是父类）\"},\"4019\":{\"t\":\"子类直接继承的父类，称为：直接父类。间接继承的父类称为：间接父类\"},\"4020\":{\"t\":\"子类继承父类以后，就获取了直接父类以及所有间接父类中声明的属性和方法 \"},\"4021\":{\"t\":\"private修饰的成员也继承了，但是不能直接访问private修饰的成员\"},\"4022\":{\"h\":\"5. Object类\",\"a\":\"_5-object类\"},\"4023\":{\"t\":\"如果我们没有显式的声明一个类的父类的话，则此类继承于java.lang.Object类\"},\"4024\":{\"t\":\"所有的java类（除java.lang.Object类之外）都直接或间接的继承于java.lang.Object类\"},\"4025\":{\"t\":\"意味着，所有的java类具有java.lang.Object类声明的功能。\"},\"4026\":{\"h\":\"6. 权限问题\",\"a\":\"_6-权限问题\"},\"4027\":{\"h\":\"6.1 子类是否能继承父类的private成员？\",\"a\":\"_6-1-子类是否能继承父类的private成员\"},\"4028\":{\"t\":\"关于子类是否能继承父类的private成员，目前有两种说法：\"},\"4029\":{\"t\":\"说法一：能继承 \"},\"4030\":{\"t\":\"可以继承的观点是，在堆内存中，子类实例其实是，在【父类实例】的基础上，再增加子类独有的属性。因为子类实例中包含父类中的private成员，所以认为可以继承\"},\"4031\":{\"t\":\"这种观点认为，封装和继承是独立的，继承是不会破坏封装性的\"},\"4032\":{\"t\":\"说法二：不能继承 \"},\"4033\":{\"t\":\"不可以继承的观点是，根据定义，子类只能通过父类方法来访问父类中的private成员，而不可以直接访问，所以认为不可以继承\"},\"4034\":{\"h\":\"6.2 底层解析\",\"a\":\"_6-2-底层解析\"},\"4035\":{\"t\":\"创建子类对象时，除了将本类所有的成员复制一份到内存外，还会将父类所有的成员复制一份，子类对象访问继承来的属性和方法时，访问的就是继承来的。\"},\"4036\":{\"t\":\"对于父类中的private成员，子类实例也会同样复制一份（这也是为什么有观点认为private成员能继承）。不过这个继承来的private成员，子类是无法直接访问的，必须借助父类的getXxx、setXxx方法才能访问（这也是为什么有观点认为private成员是无法继承的）。\"},\"4037\":{\"h\":\"6.3 子类访问父类中的private成员\",\"a\":\"_6-3-子类访问父类中的private成员\"},\"4038\":{\"t\":\"需要父类实现了private成员的getXxx和setXxx方法，子类继承了这些方法后，就可以通过调用这些方法来实现。\"},\"4039\":{\"t\":\"[子类继承父类private成员的测试:] class Father{ private int age = 88; public int getAge() { return age; } public void setAge(int age) { this.age = age; } } class Son extends Father{ public void info(){ //System.out.println(age); //直接访问继承到的父类的private属性，会报错 System.out.println(getAge()); //通过继承的父类的getAge方法获取 setAge(50); //通过继承的父类的setAge方法来设置 System.out.println(getAge()); } } \"},\"4040\":{\"h\":\"Ⅱ. override 重写\",\"a\":\"ii-override-重写\"},\"4041\":{\"h\":\"1. 定义\",\"a\":\"_1-定义\"},\"4042\":{\"t\":\"在子类中可以根据需要对从父类中继承来的方法进行改造，也称为方法的重置、覆盖。\"},\"4043\":{\"t\":\"在程序执行时，子类的方法将覆盖父类的方法。约定俗称：子类中的叫重写的方法，父类中的叫被重写的方法。也就是说，子类可以创建一个跟父类相同的方法，并根据子类的需求创建不同的方法体。\"},\"4044\":{\"t\":\"相同指的是：子类重写的方法的方法名和形参列表与父类被重写的方法的方法名和形参列表相同。\"},\"4045\":{\"h\":\"2. 重写的要求\",\"a\":\"_2-重写的要求\"},\"4046\":{\"h\":\"2.1 访问修饰符\",\"a\":\"_2-1-访问修饰符\"},\"4047\":{\"t\":\"子类重写的方法的权限修饰符不小于父类被重写的方法的权限修饰符。\"},\"4048\":{\"t\":\"特殊情况：子类不能重写父类中声明为private权限的方法\"},\"4049\":{\"h\":\"2.2 返回值\",\"a\":\"_2-2-返回值\"},\"4050\":{\"t\":\"void：父类被重写的方法的返回值类型是void，则子类重写的方法的返回值类型只能是void。\"},\"4051\":{\"t\":\"引用类型：父类被重写的方法的返回值类型是A类型，则子类重写的方法的返回值类型可以是A类或A类的子类\"},\"4052\":{\"t\":\"基本数据类型：父类被重写的方法的返回值类型是基本数据类型(比如：double)，则子类重写的方法的返回值类型必须是相同的基本数据类型(必须也是double)\"},\"4053\":{\"h\":\"2.3 异常\",\"a\":\"_2-3-异常\"},\"4054\":{\"t\":\"子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型。详见异常。\"},\"4055\":{\"h\":\"2.4 静态方法的处理\",\"a\":\"_2-4-静态方法的处理\"},\"4056\":{\"t\":\"子类和父类中的同名同参数的方法要么都声明为非static的（考虑重写），要么都声明为static的（不报错，但不叫重写）。\"},\"4057\":{\"t\":\"因为static方法是属于类的，子类无法覆盖父类的方法。\"},\"4058\":{\"h\":\"3. 可变参数的重写\",\"a\":\"_3-可变参数的重写\"},\"4059\":{\"t\":\"拥有可变参数，依然可以进行重写。\"},\"4060\":{\"t\":\"PS：以下示例涉及到多态：\"},\"4061\":{\"t\":\"class Father{ public void add(int a, int ...arr){ System.out.println(\\\"add-father\\\") } } class Son extends Father{ public void add(int a, int[] arr){ System.out.println(\\\"add-son\\\") } public void add(int a,int b,int c){ System.out.println(\\\"add-son2\\\"); } } Son s1 = new Son(); s1.add(1,2,3)//add-son2 Fatehr s2 = new Son();//多态 s2.add(1,2,3);//add-son1 \"},\"4062\":{\"t\":\"有可变参数的子类add方法重写了有可变参数的父类add；\"},\"4063\":{\"t\":\"我们执行s1.add(1,2,3)时，优先寻找的是参数为3（优先找固定参数的）的方法；\"},\"4064\":{\"t\":\"因此s1调用时，输出add-son2；\"},\"4065\":{\"t\":\"s2是产生了多态，父类的引用指向子类的方法，因此s2调用add时会调用子类中重写的add方法。\"},\"4066\":{\"h\":\"4. 关于父类中的属性\",\"a\":\"_4-关于父类中的属性\"},\"4067\":{\"t\":\"子类可以重写父类中的方法，但是不能重写父类中的属性。\"},\"4068\":{\"t\":\"当子类创建了和父类中相同的属性时，仅仅是在子类中新增了一个同类的属性，并没有重新。 访问时，默认访问的是子类的同名属性，要想访问父类中的同名属性就要使用Super关键字了。\"},\"4069\":{\"h\":\"Ⅲ. Super\",\"a\":\"iii-super\"},\"4070\":{\"h\":\"1. Super的作用\",\"a\":\"_1-super的作用\"},\"4071\":{\"t\":\"在Java类中使用super来调用父类中的指定成员：\"},\"4072\":{\"t\":\"super可用于访问父类中定义的属性\"},\"4073\":{\"t\":\"super可用于调用父类中定义的成员方法\"},\"4074\":{\"t\":\"super可用于在子类构造器中调用父类的构造器\"},\"4075\":{\"h\":\"2. super：调用父类属性和方法\",\"a\":\"_2-super-调用父类属性和方法\"},\"4076\":{\"t\":\"我们可以在子类的方法或构造器中。通过使用 super.属性 或 super.方法 的方式，显式的调用父类中声明的属性或方法。但是，通常情况下，我们习惯省略 super.。除非遇到特殊情况（父子类之间出现了同名的方法或属性）。\"},\"4077\":{\"t\":\"super.id; public void say(){ super.say(); System.out.println(\\\"son:say\\\"); } \"},\"4078\":{\"h\":\"2.1 子类调用父类同名属性\",\"a\":\"_2-1-子类调用父类同名属性\"},\"4079\":{\"t\":\"当子类和父类中定义了同名的属性时，我们要想在子类中调用父类中声明的属性，则必须显式的使用super.属性 s的方式，表明调用的是父类中声明的属性。\"},\"4080\":{\"t\":\"//例如：子类和父类都声明了num这个属性,在父类中需要同时访问这两个属性 class Son extends Father{ int num = 20;//父类也有这个属性,值为10 public void getNum(){ System.out.println(this.num);//20.这个是子类中的num,this可以省略 System.out.println(super.num);//10.这个是父类中的num，super必须不能省略 } } \"},\"4081\":{\"h\":\"2.2 子类调用父类同名方法\",\"a\":\"_2-2-子类调用父类同名方法\"},\"4082\":{\"t\":\"当子类重写了父类中的方法以后，我们想在子类的方法中调用父类中被重写的方法时，则必须显式的使用\\\"super.方法\\\"的方式，表明调用的是父类中被重写的方法。\"},\"4083\":{\"t\":\"class Son extends Father{ public void say(String world){ //假如父类也有这个方法 super.say(world); //调用父类中的say System.out.println(\\\"Son's\\\"+world); } } \"},\"4084\":{\"h\":\"2.3 属性和方法查找的过程分析\",\"a\":\"_2-3-属性和方法查找的过程分析\"},\"4085\":{\"t\":\"当我们在一个类中调用属性或方法时：\"},\"4086\":{\"t\":\"①先从本类中查找是否有该属性或方法，找到了就使用，并不会去父类中查找\"},\"4087\":{\"t\":\"②当本类中没有找到时，就自动去父类中寻找，相当于自动加了个super.\"},\"4088\":{\"t\":\"③当父类和子类中拥有相同的属性或方法时，这里执行①就停止了，因此想使用父类的元素，就要手动的加上super（当然，子类和父类可以同时使用，同时使用时，super必加，this随意）。\"},\"4089\":{\"h\":\"3. super调用构造器\",\"a\":\"_3-super调用构造器\"},\"4090\":{\"t\":\"我们可以在子类的构造器中显式的使用\\\"super(形参列表)\\\"的方式，调用父类中声明的指定的构造器（虽然调用了父类的构造器，但是内存中还是只创建了子类的一个对象）。\"},\"4091\":{\"t\":\"无论通过哪个构造器创建子类对象，需要保证先初始化父类；目的是当子类继承父类后，继承父类中所有的属性和方法，因此子类必须知道父类如何为对象进行初始化。\"},\"4092\":{\"t\":\"class Son extends Fathe{ String name; public Son(String name,String fa){ super.Father(fa); this.name = name; } } \"},\"4093\":{\"h\":\"3.1 声明位置\",\"a\":\"_3-1-声明位置\"},\"4094\":{\"t\":\"\\\"super(形参列表)\\\"的使用，必须声明在子类构造器的首行！\"},\"4095\":{\"h\":\"3.2 默认的super\",\"a\":\"_3-2-默认的super\"},\"4096\":{\"t\":\"在构造器的首行，没有显式的声明\\\"this(形参列表)\\\"或\\\"super(形参列表)\\\"，则默认调用的是父类中空参的构造器：super()\"},\"4097\":{\"h\":\"3.3 super和this：对构造器的调用\",\"a\":\"_3-3-super和this-对构造器的调用\"},\"4098\":{\"t\":\"this.构造器是调用本类的其他构造器，this.super是调用父类的构造器\"},\"4099\":{\"t\":\"\\\"this(形参列表)\\\"或\\\"super(形参列表)\\\"只能二选一，不能同时出现\"},\"4100\":{\"t\":\"在类的多个构造器中，至少有一个类的构造器中使用了\\\"super(形参列表)\\\"，调用父类中的构造器\"},\"4101\":{\"h\":\"3.4 父类没有空构造器的情况\",\"a\":\"_3-4-父类没有空构造器的情况\"},\"4102\":{\"t\":\"如果子类构造器中既未显式调用父类或本类的构造器，且父类中又没有无参的构造器，则编译报错\"},\"4103\":{\"t\":\"解析：子类是一定会调用父类的构造器的，我们不手动调用，他也会自动隐式调用了一个空参的父类构造器。当我们在父类中定义了非空参构造器时，父类中的空参构造器就会被删除。这时候如果子类没有使用super显式的调用父类中的非空参构造器，就会报错。\"},\"4104\":{\"t\":\"方案：在类中写非空参构造器时，手动写一个空参空方法体的构造器，防止被继承后子类报错。\"},\"4105\":{\"h\":\"4. super与this的区别\",\"a\":\"_4-super与this的区别\"},\"4106\":{\"t\":\"2-6-1\"},\"4107\":{\"h\":\"Ⅳ. 子类实例化过程\",\"a\":\"iv-子类实例化过程\"},\"4108\":{\"h\":\"1. 从结果上看\",\"a\":\"_1-从结果上看\"},\"4109\":{\"t\":\"子类继承父类以后，就获取了父类中声明的属性和方法。\"},\"4110\":{\"t\":\"创建子类的对象，在堆空间中，就会加载所有父类中声明的属性。\"},\"4111\":{\"h\":\"2. 从过程上看\",\"a\":\"_2-从过程上看\"},\"4112\":{\"t\":\"当我们通过子类的构造器创建子类对象时，我们一定会直接或间接的调用其父类的构造器，进而调用父类的父类的构造器，...直到调用了java.lang.Object类中空参的构造器为止。正因为加载过所有的父类的结构，所以才可以看到内存中有父类中的结构，子类对象才可以考虑进行调用。\"},\"4113\":{\"t\":\"注意：虽然创建子类对象时，调用了父类的构造器，但是自始至终就创建过一个对象，即为new的子类对象。\"},\"4114\":{\"h\":\"2-7. 多态\"},\"4115\":{\"h\":\"Ⅰ. 多态\",\"a\":\"i-多态\"},\"4116\":{\"h\":\"1. 对象的多态性\",\"a\":\"_1-对象的多态性\"},\"4117\":{\"t\":\"父类的引用指向子类的对象（或子类的对象赋给父类的引用）\"},\"4118\":{\"t\":\"父类 标识符 = new 子类(); Father f1 = new Son(); \"},\"4119\":{\"t\":\"Java引用变量有两个类型： 编译时类型和运行时类型。编译时类型由声明该变量时使用的类型决定，运行时类型由实际赋给该变量的对象决定。\"},\"4120\":{\"t\":\"简称：编译看左边；运行看右边。\"},\"4121\":{\"t\":\"看左边：看的是父类的引用（父类中不具备子类特有的方法）\"},\"4122\":{\"t\":\"看右边 ： 看的是子类的对象（实际运行的是子类重写父类的方法）\"},\"4123\":{\"t\":\"而这种：编译时类型和运行时类型不一致 ， 就是对象的多态性\"},\"4124\":{\"h\":\"2. 多态的使用\",\"a\":\"_2-多态的使用\"},\"4125\":{\"h\":\"2.1 规定\",\"a\":\"_2-1-规定\"},\"4126\":{\"t\":\"有了对象的多态性以后，我们在编译期，只能调用父类中声明的方法，但在运行期，我们实际执行的是子类重写父类的方法。\"},\"4127\":{\"t\":\"因此使用多态，是以父类的类型，使用子类中重写的父类方法。 即对象的类型是父类；使用的方法是子类的，该方法必须是重写了父类方法。\"},\"4128\":{\"h\":\"2.2 规定解析\",\"a\":\"_2-2-规定解析\"},\"4129\":{\"t\":\"由规定可知，对象在编译期间，判断的是左边（父类）的数据类型（用于传参），运行时执行的是右边（子类）的方法。\"},\"4130\":{\"t\":\"这样我们就可以向一个函数传递参数时，表面传递的是父类的数据类型，而实际使用的是子类。\"},\"4131\":{\"h\":\"2.3 使用限制\",\"a\":\"_2-3-使用限制\"},\"4132\":{\"t\":\"一个引用类型变量如果声明为父类的类型，但实际引用的是子类对象，那么该变量就不能再访问子类中添加的属性和方法。\"},\"4133\":{\"t\":\"对象的多态性，只适用于方法，不适用于属性，属性只用左边的（父类）\"},\"4134\":{\"h\":\"3. 多态的意义\",\"a\":\"_3-多态的意义\"},\"4135\":{\"t\":\"Java是强类型语言，当一个方法需要传递的参数类型是一个类时，那么参数就必须传递该类生成的对象。那么如果该方法适用很多类，就需要创建很多个除了数据类型（类）外其他完全一样的方法了，这样造成了很大的冗余。\"},\"4136\":{\"t\":\"在实际开发中，经常会遇到这样的情景，N个子类适用于同一个方法，需要为每个子类创建一个方法，太冗余了。因此我们就需要多态了。\"},\"4137\":{\"h\":\"4. 多态示例\",\"a\":\"_4-多态示例\"},\"4138\":{\"t\":\"需求：数据库连接\"},\"4139\":{\"t\":\"我们需要在User类中调用getUser方法获取数据，获取数据需要数据库链接，这时需要将数据库对象传入getUsers方法然后用数据库对象连接数据库进行操作。\"},\"4140\":{\"t\":\"数据库对象不止一种（MySQL、Oracle等），我们不能为每一种数据库都定义一套方法，因此我们这里就要用到多态性。\"},\"4141\":{\"t\":\"定义：所有数据库连接对象的父类都是 java.sql.Connection;（也可以是接口）。\"},\"4142\":{\"t\":\"public class User{ public static void main(String[] args){ User user = new User(); //传入我们想用的数据库对象，这里是MySQL user.getUser(new MysqlConnect()); } public void getUser(Connection conn){ conn.getConnect();//连接数据库 conn...//其他操作 } } \"},\"4143\":{\"h\":\"5. 虚拟方法的调用\",\"a\":\"_5-虚拟方法的调用\"},\"4144\":{\"h\":\"5.1 正常的方法调用\",\"a\":\"_5-1-正常的方法调用\"},\"4145\":{\"t\":\"Person e = new Person(); e.getInfo(); Student e = new Student(); e.getInfo(); \"},\"4146\":{\"h\":\"5.2 虚拟方法调用（多态情况下）\",\"a\":\"_5-2-虚拟方法调用-多态情况下\"},\"4147\":{\"t\":\"子类中定义了与父类同名同参数的方法，在多态情况下，将此时父类的方法称为虚拟方法，父类根据赋给它的不同子类对象，动态调用属于子类的该方法。这样的方法调用在编译期是无法确定的。\"},\"4148\":{\"t\":\"Person e = new Student(); e.getInfo(); // 调用Student 类的getInfo() \"},\"4149\":{\"h\":\"5.3 编译时类型与运行时类型\",\"a\":\"_5-3-编译时类型与运行时类型\"},\"4150\":{\"t\":\"编译时e为Person 类型，而方法的调用是在运行时确定的，所以调用的是Student类的 的getInfo() 方法。\"},\"4151\":{\"h\":\"5.4 虚拟方法调用举例\",\"a\":\"_5-4-虚拟方法调用举例\"},\"4152\":{\"t\":\"定义：Person类中定义了welcome()方法，各个子类重写了welcome()。\"},\"4153\":{\"t\":\"执行：多态的情况下，调用对象的welcome()方法，实际执行的是子类重写的方法。\"},\"4154\":{\"t\":\"2-7-1\"},\"4155\":{\"h\":\"6. 早绑定与晚绑定\",\"a\":\"_6-早绑定与晚绑定\"},\"4156\":{\"t\":\"通过分析重载和重写在编译和运行是状态来判断早绑定与晚绑定\"},\"4157\":{\"t\":\"早绑定（静态绑定）：重载，是指允许存在多个同名方法，而这些方法的参数不同，编译器根据方法不同的参数表，对同名方法的名称做修饰。对于编译器而言，这些同名方法就成了不同的方法，它们的调用地址在编译期就绑定了。Java的重载是可以包括父类和子类的，即子类可以重载父类的同名不同参数的方法。所以：对于重载而言，在方法调用之前，编译器就已经确定了所要调用的方法，这称为“早绑定”或“静态绑定”；\"},\"4158\":{\"t\":\"晚绑定（动态绑定）：而对于多态，只有等到方法调用的那一刻，解释运行器才会确定所要调用的具体方法，这称为“晚绑定”或“动态绑定”。如果它不是晚绑定，它就不是多态。\"},\"4159\":{\"h\":\"7. 赋值形式的多态\",\"a\":\"_7-赋值形式的多态\"},\"4160\":{\"t\":\"将子类对象赋值给父类数据类型的标识符，也属于父类的引用指向子类的对象。\"},\"4161\":{\"t\":\"同时父类和子类的标识符执指向同一地址\"},\"4162\":{\"t\":\"Son s = new Son(); //相当于：Father f = new Son(); f = s; Father f = s; f.age;//调用的是父类中的属性。 f.say();//调用的是子类中的say方法 \"},\"4163\":{\"t\":\"示例：\"},\"4164\":{\"t\":\"public class Test{ public static void main(String[] args){ Son s = new Son(); Father f = s; //Father f = new Son() && f = s System.out.println(f == s);//true System.out.println(f.count);//50,访问的是父类的属性 f.say();//20;调用的是子类的方法，多态的特性 } } class Father{ int age = 50; public void say(){ System.out.println(age); } } class Son extends Father{ int age = 20; public void say(){ System.out.println(age); } } \"},\"4165\":{\"h\":\"8. 多态开发中的应用\",\"a\":\"_8-多态开发中的应用\"},\"4166\":{\"t\":\"多态提高了代码的通用性，常用作接口重用。\"},\"4167\":{\"t\":\"没有多态，接口就没有意义了（只能规范，不能实例化没用）。 同时也提高了代码的健硕性，直接使用父类中定义的方法，子类实现可以随意更换。\"},\"4168\":{\"h\":\"Ⅱ. 转型\",\"a\":\"ii-转型\"},\"4169\":{\"t\":\"有了对象的多态性以后，内存中实际上是加载了子类特有的属性和方法的，但是由于变量声明为父类类型，导致编译时，只能调用父类中声明的属性和方法。子类特有的属性和方法不能调用。如何才能调用子类特有的属性和方法？\"},\"4170\":{\"t\":\"答案是向下转型：使用强制类型转换符。\"},\"4171\":{\"h\":\"1. 向下转型说明\",\"a\":\"_1-向下转型说明\"},\"4172\":{\"t\":\"向上转型：子类转父类，自动转，称为多态\"},\"4173\":{\"t\":\"向下转型：父类转子类，强制转，称为向下转型\"},\"4174\":{\"t\":\"Father f1 = New Son(); Son s1 = (Son)f1;//f1是父类型对象，向下转型成子类型 s1.sonDO();//可以调用son类中独有的方法了 s1.Teacher = \\\"jinno\\\";//可以调用son类中的属性了 \"},\"4175\":{\"h\":\"2. 转型的条件\",\"a\":\"_2-转型的条件\"},\"4176\":{\"h\":\"2.1 向上转型：子转父\",\"a\":\"_2-1-向上转型-子转父\"},\"4177\":{\"t\":\"随便转，没有限制，可以自动进行\"},\"4178\":{\"t\":\"Son s1 = new Son(); System.out.println(s1.age); //Son的age Father f2 = (Father)s1; System.out.println(f2.age);//father的age \"},\"4179\":{\"h\":\"2.2 向下转型：父类转子类\",\"a\":\"_2-2-向下转型-父类转子类\"},\"4180\":{\"t\":\"父类的引用必须指向子类的对象（这样编译时才能加载子类），不然无法转\"},\"4181\":{\"t\":\"Father f1 = new Son(); Son s1 = (Son)f1;//这样才能转 \"},\"4182\":{\"h\":\"3. 向下转型的异常\",\"a\":\"_3-向下转型的异常\"},\"4183\":{\"t\":\"使用强转时，可能出现ClassCastException的异常，如下：\"},\"4184\":{\"t\":\"Father f1 = New Son(); Son s1 = (Son)f1; //可以强转 Daughter = (Daughter)f1;//强转失败，F1是由Son生产的而不是Daughter，不能强转 \"},\"4185\":{\"t\":\"为了避免出错，我们在向下转型之前，先进行instanceof的判断，一旦返回true，就进行向下转型。如果返回false，不进行向下转型。\"},\"4186\":{\"h\":\"4. instancof的\",\"a\":\"_4-instancof的\"},\"4187\":{\"t\":\"对象 instanceof 类名: 这个是用来测试一个对象的类名的\"},\"4188\":{\"t\":\"if(f1 instanceof Son){ Son s1 = (Son)f1; s1.sonDo(); } if(f1 instanceof Daughter){ Daughter d1 = (Daughter)f1; d1.daughterDo(); } \"},\"4189\":{\"t\":\"补充：如果 a instanceof A返回true,则 a instanceof B也返回true 其中类B是类A的父类。\"},\"4190\":{\"h\":\"5. 转型的注意事项\",\"a\":\"_5-转型的注意事项\"},\"4191\":{\"h\":\"5.1 向下转型必须是父类引用子类的对象\",\"a\":\"_5-1-向下转型必须是父类引用子类的对象\"},\"4192\":{\"t\":\"Person p4 = new Person(); Man m4 = (Man)p4; //不能转，p4里面没有加载子类的元素 \"},\"4193\":{\"h\":\"5.2 隔代转型\",\"a\":\"_5-2-隔代转型\"},\"4194\":{\"t\":\"Object->Person->Woman；\"},\"4195\":{\"t\":\"Object引用的Woman子类，Object可以强转成Woman，更何况强转成Person。\"},\"4196\":{\"t\":\"Object obj = new Woman(); Person p = (Person)obj; //可以转 \"},\"4197\":{\"h\":\"5.3 转型必须有父子关系\",\"a\":\"_5-3-转型必须有父子关系\"},\"4198\":{\"t\":\"无继承关系的引用类型间的转换是非法的\"},\"4199\":{\"t\":\"String str = new Date(); Object o = new Date(); String str1 = (String)o; //编译时是不报错的，但是运行还是会出错 \"},\"4200\":{\"h\":\"2-8. 特殊类\"},\"4201\":{\"h\":\"Ⅰ. Object类\",\"a\":\"i-object类\"},\"4202\":{\"h\":\"1. 说明\",\"a\":\"_1-说明\"},\"4203\":{\"t\":\"Object类是所有Java类的根父类；如果在类的声明中未使用extends关键字指明其父类，则默认父类为java.lang.Object类；Object类中的功能(属性、方法)具有通用性。\"},\"4204\":{\"t\":\"Object的主要结构如下：\"},\"4205\":{\"t\":\"2-8-1\"},\"4206\":{\"h\":\"2. Object类的功能\",\"a\":\"_2-object类的功能\"},\"4207\":{\"t\":\"Object类无属性且构造器是空参构造器\"},\"4208\":{\"t\":\"主要功能（方法）如下：\"},\"4209\":{\"t\":\"clone：克隆 对象\"},\"4210\":{\"t\":\"equals：判断两个对象是否想等\"},\"4211\":{\"t\":\"finalize：垃圾回收方法（不要手动调用，由垃圾回收机制自动调用）\"},\"4212\":{\"t\":\"getClass：获取当前对象的所属类\"},\"4213\":{\"t\":\"hashCode：获取当前对象的哈希值（详见集合）\"},\"4214\":{\"t\":\"toString：打印对象\"},\"4215\":{\"t\":\"wait：详见多线程\"},\"4216\":{\"t\":\"notify：详见多线程\"},\"4217\":{\"t\":\"notifyAll：详见多线程\"},\"4218\":{\"h\":\"3. equals与 ==\",\"a\":\"_3-equals与\"},\"4219\":{\"h\":\"3.1 ==的用法\",\"a\":\"_3-1-的用法\"},\"4220\":{\"t\":\"关系操作符 == 生成的是一个boolean结果，它们计算的是操作数的值之间的关系\"},\"4221\":{\"t\":\"可以使用在基本数据类型变量和引用数据类型变量中；\"},\"4222\":{\"t\":\"如果比较的是基本数据类型变量：比较两个变量保存的数据是否相等（不一定类型要相同,运算时会- 自动类型提升）。\"},\"4223\":{\"t\":\"如果比较的是引用数据类型变量：比较两个对象的地址值是否相同.即两个引用是否指向同一个对象实体。\"},\"4224\":{\"t\":\"boolean类型不与其他类型参与比较\"},\"4225\":{\"t\":\"用“==”进行比较时，符号两边的 数据类型必须兼容(可自动转换的基本数据类型除外)，否则编译出错\"},\"4226\":{\"t\":\"注意：java中没有 ===（全等于）符号。\"},\"4227\":{\"t\":\"//基本数据类型 int j = 10; double d = 10.0; System.out.println(i == d);//true,只比较值，不比较数据类型 char c = 10; System.out.println(i == c);//true,char类型就是以数值方式储存的 char c1 = 'A'; char c2 = 65; System.out.println(c1 == c2);//true,同上 //引用类型 Customer cust1 = new Customer(\\\"Tom\\\",21); Customer cust2 = new Customer(\\\"Tom\\\",21); System.out.println(cust1 == cust2);//false;地址不同 String str1 = new String(\\\"atguigu\\\"); String str2 = new String(\\\"atguigu\\\"); System.out.println(str1 == str2);//false;同上，地址不同 \"},\"4228\":{\"h\":\"3.2 equals的用法\",\"a\":\"_3-2-equals的用法\"},\"4229\":{\"t\":\"Customer cust1 = new Customer(\\\"Tom\\\",21); Customer cust2 = new Customer(\\\"Tom\\\",21); System.out.println(cust1 == cust2);//false String str1 = new String(\\\"atguigu\\\"); String str2 = new String(\\\"atguigu\\\"); System.out.println(str1.equals(str2));//true \"},\"4230\":{\"t\":\"equals是一个方法，而非运算符，因此只能适用于引用数据类型\"},\"4231\":{\"t\":\"Object类中（源码）定义的equals()和==的作用是相同的：比较两个对象的地址值是否相同.即两个引用是否指向同一个对象实体。\"},\"4232\":{\"t\":\"像String、Date、File、包装类等都重写了Object类中的equals()方法。重写后，比较的不是两个引用的地址是否相同，而是比较两个对象的\\\"实体内容\\\"是否相同。\"},\"4233\":{\"h\":\"3.3 自定义类重写equals\",\"a\":\"_3-3-自定义类重写equals\"},\"4234\":{\"t\":\"通常情况下，我们自定义的类如果使用equals()的话，也通常是比较两个对象的\\\"实体内容\\\"是否相同。那么，我们就需要对Object类中的equals()进行重写.\"},\"4235\":{\"t\":\"重写的原则：比较两个对象的实体内容是否相同，IDE 可以自动生成equals重写（比较两个对象实体是否相同）\"},\"4236\":{\"t\":\"对称性：如果x.equals(y)返回是“true”，那么y.equals(x)也应该返回是“true”。\"},\"4237\":{\"t\":\"自反性：x.equals(x)必须返回是“true”。\"},\"4238\":{\"t\":\"传递性：如果x.equals(y)返回是“true”，而且y.equals(z)返回是“true”，那么z.equals(x)也应该返回是“true”。\"},\"4239\":{\"t\":\"一致性：如果x.equals(y)返回是“true”，只要x和y内容一直不变，不管你重复x.equals(y)多少次，返回都是“true”。\"},\"4240\":{\"t\":\"任何情况下，x.equals(null)，永远返回是“false”；x.equals(和x不同类型的对象)永远返回是“false”。\"},\"4241\":{\"t\":\"public boolean equals(Object obj){ if(this == obj){ //如果要比较的两个对象是引用关系，直接返回true return true; } if(obj == null){ return false;//obj是null，直接返回false } if(this.getClass() != obj.getClass()){ return false;//类不同，直接返回false； } //运行到这里，obj和Person是同属一个类的对象 Person other = (Person)obj; //将obj的Object类型向下转型为Person以便对比属性 if(this.age != other.age){ return false;//判断两个对象的属性是否相同 } if(this.name == null){ if(other.name != null){ return false;//如果两个对象一个name属性有初始值，一个没有，返回false } }else if (!name.equals(other.name)){ return false; //如果this对象不是null，则调用String重新的equals判断两个name是否相等 } return true; } \"},\"4242\":{\"h\":\"3.4 ==和equals()的区别\",\"a\":\"_3-4-和equals-的区别\"},\"4243\":{\"t\":\"== 既可以比较基本类型也可以比较引用类型。对于基本类型就是比较值，对于引用类型就是比较内存地址\"},\"4244\":{\"t\":\"equals 的话，它是属于java.lang.Object 类里面的方法，如果该方法没有被重写过默认也是 是==; 我们可以到 看到String类 等类的 的equals 方法是被重写过的，而且String 类在日常开发中 用的比较多，久而久之，形成了equals 是比较值的错误观点。\"},\"4245\":{\"t\":\"equals的具体使用要看自定义类里有没有 重写Object 的equals 方法来 判断，通常情况下，重写equals 方法，会比较类中的相应属性是否都相等。\"},\"4246\":{\"h\":\"3.5 特殊情况\",\"a\":\"_3-5-特殊情况\"},\"4247\":{\"t\":\"对于Integer类来说，-128127经常使用，所以系统进行了缓存。因此当值的范围在-128127时，相同值的Integer类指向的是同一个内存地址（除非直接new Integer（））。\"},\"4248\":{\"t\":\"Integer a = 200; Integer b = 200; a == b; //false a.equals(b); //true Integer a = 100; Integer b = 100; a == b; //true \"},\"4249\":{\"h\":\"4. toString\",\"a\":\"_4-tostring\"},\"4250\":{\"t\":\"当我们输出一个对象的引用时，实际上就是调用当前对象的toString()\"},\"4251\":{\"h\":\"4.1 toString的源码\",\"a\":\"_4-1-tostring的源码\"},\"4252\":{\"t\":\"toString在Object中输出的是带对象类型的地址。\"},\"4253\":{\"t\":\"public String toString() { //test.Test@15db9742 return getClass().getName() + \\\"@\\\" + Integer.toHexString(hashCode()); } \"},\"4254\":{\"h\":\"4.2 特殊对象对toString的重写\",\"a\":\"_4-2-特殊对象对tostring的重写\"},\"4255\":{\"t\":\"像String、Date、File、包装类等都重写了Object类中的toString()方法。使得在调用对象的toString()时，返回\\\"实体内容\\\"信息\"},\"4256\":{\"t\":\"String str = new String(\\\"MM\\\"); System.out.println(str);//MM Date date = new Date(4534534534543L); System.out.println(date.toString());//Mon Sep 11 08:55:34 GMT+08:00 2113 \"},\"4257\":{\"h\":\"4.3 自定义重写toString\",\"a\":\"_4-3-自定义重写tostring\"},\"4258\":{\"t\":\"如果我们也想输出对象的实体内容（如包含哪些属性）就需要在类中对toString进行自定义重写； IDE有一键重写功能（输出的就是类名和类的属性）\"},\"4259\":{\"t\":\"public String toString() { return \\\" Person[name=\\\" + name + \\\", age=\\\" + age + \\\"]\\\"; } \"},\"4260\":{\"h\":\"4.4 String.toString\",\"a\":\"_4-4-string-tostring\"},\"4261\":{\"t\":\"在行进行String与其它类型数据的连接操作时 ，自动调用toString() 基本类型数据转换为String 类型时，的 调用了对应包装类的toString()\"},\"4262\":{\"h\":\"Ⅱ. 包装类\",\"a\":\"ii-包装类\"},\"4263\":{\"h\":\"1. 说明\",\"a\":\"_1-说明-1\"},\"4264\":{\"t\":\"包装类就是将基本数据类型的值包装成引用数据类型（对象）\"},\"4265\":{\"t\":\"针对八种基本数据类型定义相应的引用类型—包装类（封装类）有了类的特点，就可以调用类中的方法，Java才是真正的面向对象\"},\"4266\":{\"h\":\"2. 基本数据和对应的包装类\",\"a\":\"_2-基本数据和对应的包装类\"},\"4267\":{\"t\":\"2-8-2\"},\"4268\":{\"h\":\"3. 包装类的转换概述\",\"a\":\"_3-包装类的转换概述\"},\"4269\":{\"t\":\"基本数据类型、包装类与String类的互相转换示意图：\"},\"4270\":{\"t\":\"2-8-3\"},\"4271\":{\"h\":\"4. 基本数据类型转换为包装类\",\"a\":\"_4-基本数据类型转换为包装类\"},\"4272\":{\"t\":\"装箱：通过包装类的构造器实现。\"},\"4273\":{\"t\":\"语法：包装类 标识符 = new 包装类的构造器(基本数据类型的值或标识符);\"},\"4274\":{\"t\":\"//int示例 int num1 = 10; Integer in1 = new Integer(num1); System.out.println(in1.toString());//现在是类了可以调用toString了 Integer in2 = new Integer(\\\"123\\\");//纯数值的字符串也可以作为参数 Integer in1 = new Integer(23);//基本数据类型的值当然也可以 //Boolean示例 Boolean b1 = new Boolean(true);//使用基本数据类型的值 Boolean b2 = new Boolean(\\\"TrUe\\\");// true Boolean b3 = new Boolean(\\\"true123\\\");//false \"},\"4275\":{\"h\":\"4.1 boolean转换的特殊性说明\",\"a\":\"_4-1-boolean转换的特殊性说明\"},\"4276\":{\"t\":\"Boolean构造器的值，如果是字符串，那么经过大小写的转换只要是true，就会转换为true，否则一律转为false\"},\"4277\":{\"t\":\"Boolean类的默认值是null，而不是false（现在已经是类了）。\"},\"4278\":{\"h\":\"5. 包装类转换为基本数据类型\",\"a\":\"_5-包装类转换为基本数据类型\"},\"4279\":{\"t\":\"拆箱：获得 包装类对象中包装的基本类型变量\"},\"4280\":{\"t\":\"语法：调用包装类Xxx的xxxValue()即可\"},\"4281\":{\"t\":\"Integer in1 = new Integer(12); int i1 = in1.intValue(); //变成了 int 12 System.out.println(i1 + 1); //13;转换后可以进行运算了 Float f1 = new Float(12.3); float f2 = f1.floatValue(); System.out.println(f2 + 1); \"},\"4282\":{\"h\":\"6. 自动装箱与自动拆箱\",\"a\":\"_6-自动装箱与自动拆箱\"},\"4283\":{\"t\":\"自动装箱：基本数据类型可以自动转为对应的包装类类型，而不用使用构造器\"},\"4284\":{\"t\":\"自动拆箱：包装类自动转为基本数据类型，而不用调用包装类Xxx的xxxValue()\"},\"4285\":{\"t\":\"注意：类型必须匹配\"},\"4286\":{\"t\":\"int num2 = 10; Integer in1 = num2;//自动装箱 int num3 = in1;//自动拆箱 \"},\"4287\":{\"t\":\"传参：当一个方法的参数是Object数据类型时，基本数据类型不用转换，直接传进去就行，因为会触发自动装箱。\"},\"4288\":{\"h\":\"7. 基本数据类型和包装类与String类型的转换\",\"a\":\"_7-基本数据类型和包装类与string类型的转换\"},\"4289\":{\"h\":\"7.1 基本数据类型、包装类--->String类型\",\"a\":\"_7-1-基本数据类型、包装类-string类型\"},\"4290\":{\"t\":\"方式1：连接运算，任何基本数据类型+String类型都会转为String类型\"},\"4291\":{\"t\":\"方式2：调用String重载的valueOf(Xxx xxx)\"},\"4292\":{\"t\":\"int num1 = 10; //方式1：连接运算 String str1 = num1 + \\\"\\\"; //方式2：调用String的valueOf(Xxx xxx) float f1 = 12.3f; String str2 = String.valueOf(f1);//\\\"12.3\\\" Double d1 = new Double(12.4); String str3 = String.valueOf(d1); //\\\"12.4\\\" \"},\"4293\":{\"h\":\"7.2 String类型转基本数据类型、包装类\",\"a\":\"_7-2-string类型转基本数据类型、包装类\"},\"4294\":{\"t\":\"不能强转，需要调用包装类的parseXxx(String s)\"},\"4295\":{\"t\":\"String str1 = \\\"123\\\"; int num2 = Integer.parseInt(str1);//int 123// String str2 = \\\"true111\\\"; boolean b1 = Boolean.parseBoolean(str2); //boolean false \"},\"4296\":{\"h\":\"8. 注意事项\",\"a\":\"_8-注意事项\"},\"4297\":{\"t\":\"进行互相转换时，要保证输入的类型是正确的。\"},\"4298\":{\"t\":\"比如：不能把123ab或\\\"123ab\\\"当做数值类型.\"},\"4299\":{\"h\":\"Ⅲ. 内部类\",\"a\":\"iii-内部类\"},\"4300\":{\"h\":\"1. 定义\",\"a\":\"_1-定义\"},\"4301\":{\"t\":\"Inner class：内部类。\"},\"4302\":{\"t\":\"Java中允许将一个类A声明在另一个类B中，则类A就是内部类，类B称为外部类。一般用在定义它的类或语句块之内，在外部引用它时必须给出完整的名称。Inner class的名字不能与包含它的外部类类名相同；\"},\"4303\":{\"h\":\"2. 内部类的作用\",\"a\":\"_2-内部类的作用\"},\"4304\":{\"t\":\"当一个事物的内部，还有一个部分需要一个完整的结构进行描述，而这个内部的完整的结构又只为外部事物提供服务，那么整个内部的完整结构最好使用内部类。\"},\"4305\":{\"h\":\"3. 分类\",\"a\":\"_3-分类\"},\"4306\":{\"t\":\"class Person{ class Dog{ //成员内部类 } static class Shit{ //静态成员内部类 } public Person(){ class AA{} //局部内部类 } { class Cat{} //局部内部类 } public Person(){ class CC{} //局部内部类 } } \"},\"4307\":{\"t\":\"成员内部类：定义在类里面和类的成员并列的 \"},\"4308\":{\"t\":\"静态成员内部类\"},\"4309\":{\"t\":\"非静态成员内部类\"},\"4310\":{\"t\":\"局部内部类：定义在方法内、代码块内、构造器内的类\"},\"4311\":{\"h\":\"4. 成员内部类的特点\",\"a\":\"_4-成员内部类的特点\"},\"4312\":{\"h\":\"4.1 作为外部类的成员\",\"a\":\"_4-1-作为外部类的成员\"},\"4313\":{\"t\":\"可以调用外部类的结构\"},\"4314\":{\"t\":\"可以被static修饰，但此时就不能再使用外层类的非static的成员变量；\"},\"4315\":{\"t\":\"可以被4种不同的权限修饰（外部类不能由private和protected修饰）。\"},\"4316\":{\"h\":\"4.2 作为一个类\",\"a\":\"_4-2-作为一个类\"},\"4317\":{\"t\":\"类内可以定义属性、方法、构造器等\"},\"4318\":{\"t\":\"可以被final修饰，表示此类不能被继承。言外之意，不使用final，就可以被继承\"},\"4319\":{\"t\":\"可以被abstract修饰，因此可以被其它的内部类继承\"},\"4320\":{\"h\":\"4.3 注意事项\",\"a\":\"_4-3-注意事项\"},\"4321\":{\"t\":\"非static的成员内部类中的成员不能声明为static的，只有在外部类或static的成员内部类中才可声明static成员。\"},\"4322\":{\"t\":\"外部类访问成员内部类的成员，需要“内部类.成员”或“内部类对象.成员”的方式\"},\"4323\":{\"t\":\"成员内部类可以直接使用外部类的所有成员，包括私有的数据\"},\"4324\":{\"t\":\"当想要在外部类的静态成员部分使用内部类时，可以考虑内部类声明为静态的\"},\"4325\":{\"h\":\"4.4 实例化成员内部类\",\"a\":\"_4-4-实例化成员内部类\"},\"4326\":{\"t\":\"Person.Dog dog = new Person.Dog(); //静态成员内部类 Person p = new Person(); Person.Bird bird = p.new Bird(); //非静态成员内部类 \"},\"4327\":{\"h\":\"4.5 成员内部类调用外部结构\",\"a\":\"_4-5-成员内部类调用外部结构\"},\"4328\":{\"t\":\"不重名的情况下，直接调用即可，重名是要采用以下方法调用。\"},\"4329\":{\"t\":\"{ class Bird{ String name = \\\"bird\\\"; public void sing(){ System.out.println(name);//使用方法的形参 System.out.println(this.name);//调用内部类的name System.out.println(Person.this.name);//调用外部类的name } } } \"},\"4330\":{\"h\":\"5. 局部内部类的使用\",\"a\":\"_5-局部内部类的使用\"},\"4331\":{\"t\":\"直接使用很少见；一般用来返回实现了某个接口的类的对象\"},\"4332\":{\"t\":\"class Person{ public Comparable getComparable(){ class MyComparable implements Comparable{ public int compareTo(Object o) { return 0; } } //方式二 return new Comparable(){ public int compareTo(Object o) { return 0; } }; } } \"},\"4333\":{\"t\":\"在局部内部类的方法中，如果调用声明局部内部类的外部方法的局部变量的话，要求此局部变量声明为final的。\"},\"4334\":{\"h\":\"5.1 使用局部内部类\",\"a\":\"_5-1-使用局部内部类\"},\"4335\":{\"t\":\"只能在声明它的方法或代码块中使用，而且是先声明后使用。除此之外的任何地方 都不能使用该类\"},\"4336\":{\"t\":\"但是它的对象可以通过外部方法的返回值返回使用，返回值类型只能是局部内部类 的父类或父接口类型\"},\"4337\":{\"h\":\"5.2 局部内部类的特点\",\"a\":\"_5-2-局部内部类的特点\"},\"4338\":{\"t\":\"内部类仍然是一个独立的类，在编译之后内部类会被编译成独立的.class文件，但是前面冠以外部类的类名和$符号，以及数字编号。\"},\"4339\":{\"t\":\"只能在声明它的方法或代码块中使用，而且是先声明后使用。除此之外的任何地方都不能使用该类。\"},\"4340\":{\"t\":\"局部内部类可以使用外部类的成员，包括私有的。\"},\"4341\":{\"t\":\"局部内部类可以使用外部方法的局部变量，但是必须是final的。由局部内部类和局部变量的声明周期不同所致。\"},\"4342\":{\"t\":\"局部内部类和局部变量地位类似，不能使用public,protected,缺省,private\"},\"4343\":{\"t\":\"局部内部类不能使用static修饰，因此也不能包含静态成员\"},\"4344\":{\"h\":\"6. 内部列的作用\",\"a\":\"_6-内部列的作用\"},\"4345\":{\"t\":\"当一个事物的内部，还有一个部分需要一个完整的结构进行描述，而这个内部的完整的结构又只为外部事物提供服务，那么整个内部的完整结构最好使用内部类。\"},\"4346\":{\"h\":\"Ⅳ. 匿名类\",\"a\":\"iv-匿名类\"},\"4347\":{\"t\":\"匿名类不能定义任何静态成员、方法和类，只能创建匿名类的一个实例。一个匿名类一定是在new的后面，用其隐含实现一个接口或实现一个类。\"},\"4348\":{\"h\":\"1. 格式\",\"a\":\"_1-格式\"},\"4349\":{\"t\":\"new 父类构造器(实参列表) 或要实现的接口(){ //匿名内部类的类体部分 //如果继承了抽象类或实现了接口，这里要重写抽象方法 } \"},\"4350\":{\"h\":\"2. 特点\",\"a\":\"_2-特点\"},\"4351\":{\"t\":\"匿名类必须继承父类或实现接口\"},\"4352\":{\"t\":\"匿名类只能有一个对象\"},\"4353\":{\"t\":\"匿名类对象只能使用多态形式引用\"},\"4354\":{\"h\":\"3. 示例\",\"a\":\"_3-示例\"},\"4355\":{\"h\":\"3.1 示例1\",\"a\":\"_3-1-示例1\"},\"4356\":{\"t\":\"public class Test { public static void main(String[] args) { I o1 = new I() { public void fun() { System.out.println(\\\"hello\\\"); } }; o1.fun();//hello } } interface I{ void fun(); } \"},\"4357\":{\"h\":\"3.2 示例2\",\"a\":\"_3-2-示例2\"},\"4358\":{\"t\":\"interface A{ public abstract void fun1(); } public class Outer{ public static void main(String[] args){ new Outer().callnener(new A(){ public void fun1(){ System.out.println(\\\"implement for fun1\\\"); } }); } public void callneer(A a){ a.fun1(); } } \"},\"4359\":{\"h\":\"2-9. static\"},\"4360\":{\"h\":\"Ⅰ. static介绍\",\"a\":\"i-static介绍\"},\"4361\":{\"h\":\"1. static关键字的使用\",\"a\":\"_1-static关键字的使用\"},\"4362\":{\"t\":\"static是静态修饰符，用来修饰属性、方法、代码块和内部类的。\"},\"4363\":{\"h\":\"2. static的背景\",\"a\":\"_2-static的背景\"},\"4364\":{\"t\":\"当我们编写一个类时，其实就是在描述其对象的属性和行为，而并没有产生实质上的对象，只有通过new关键字才会产生出对象，这时系统才会分配内存空间给对象，其方法才可以供外部调用。我们有时候希望无论是否产生了对象或无论产生了多少对象的情况下，某些特定的数据在内存空间里只有一份。\"},\"4365\":{\"h\":\"3. 类属性与类方法\",\"a\":\"_3-类属性与类方法\"},\"4366\":{\"t\":\"类属性：类属性作为该类各个对象之间共享的变量。 \"},\"4367\":{\"t\":\"在设计类时, 分析哪些属性不因对象的不同而改变 ，将这些属性设置为类属性。相应的方法设置为类方法。\"},\"4368\":{\"t\":\"类方法：如果方法与调用者无关，则这样的方法通常被声明为类方法，由于不需要创建对象就可以调用类方法 ，从而简化了方法的调用。\"},\"4369\":{\"h\":\"4. 被static修饰后的成员具备的特点\",\"a\":\"_4-被static修饰后的成员具备的特点\"},\"4370\":{\"t\":\"随着类的加载而加载\"},\"4371\":{\"t\":\"优先于对象存在\"},\"4372\":{\"t\":\"修饰的成员，被所有对象所共享\"},\"4373\":{\"t\":\"访问权限允许时，可不创建对象，直接被类调用\"},\"4374\":{\"h\":\"Ⅱ. 静态属性\",\"a\":\"ii-静态属性\"},\"4375\":{\"h\":\"1. 说明\",\"a\":\"_1-说明\"},\"4376\":{\"t\":\"静态属性，又称为静态变量、类变量。\"},\"4377\":{\"t\":\"被static修饰的属性就是静态属性，因此类的属性就分为：静态属性和非静态属性了。\"},\"4378\":{\"t\":\"Class Person{ static String nation; } Person p1 = new Person(); Person p2 = new Person(); p1.nation = \\\"China\\\"; System.out.println(p2.nation);//China;p1赋的值，p2也能取到 p2.nation = \\\"Japan\\\"; System.out.println(p1.nation);//Japan;p2改的值，p1也受影响 \"},\"4379\":{\"t\":\"静态变量（类变量）：我们创建了类的多个对象，多个对象共享同一个静态变量。当通过某一个对象修改静态变量时，会导致其他对象调用此静态变量时，是修改过了的。\"},\"4380\":{\"t\":\"非静态变量（实例变量）：我们创建了类的多个对象，每个对象都独立的拥有一套类中的非静态属性。当修改其中一个对象中的非静态属性时，不会导致其他对象中同样的属性值的修改。\"},\"4381\":{\"h\":\"2. 静态变量的声明\",\"a\":\"_2-静态变量的声明\"},\"4382\":{\"t\":\"如下：访问修饰符和static的顺序可以调换。\"},\"4383\":{\"t\":\"class ClassName{ static 访问修饰符 属性名;//也可以初始化 } \"},\"4384\":{\"h\":\"3. 静态变量的加载\",\"a\":\"_3-静态变量的加载\"},\"4385\":{\"t\":\"静态变量是随着类的加载而加载，静态变量的加载要早于对象的创建。由于类只会加载一次，则静态变量在内存中也只会存在一份：存在方法区的静态域中。因此一个类的不同实例拥有的静态变量是同一个。\"},\"4386\":{\"h\":\"4. 静态变量的使用\",\"a\":\"_4-静态变量的使用\"},\"4387\":{\"t\":\"由于静态变量的加载早于对象，因此可以通过\\\"类.静态变量\\\"的方式进行调用。\\\\\"},\"4388\":{\"t\":\"Person.country = \\\"USA\\\";//直接使用类名访问静态变量 \"},\"4389\":{\"h\":\"Ⅲ. 静态方法\",\"a\":\"iii-静态方法\"},\"4390\":{\"h\":\"1. 概述\",\"a\":\"_1-概述\"},\"4391\":{\"t\":\"使用static修饰的方法，就是静态方法（与之相对的是非静态方法）。\"},\"4392\":{\"t\":\"静态方法也是随着类的加载而加载的。\"},\"4393\":{\"h\":\"2. 静态方法的声明\",\"a\":\"_2-静态方法的声明\"},\"4394\":{\"t\":\"public static 返回值类型 方法名(形参列表){ ... } class Person{ static String nation = \\\"China\\\"; public static String getNation(){ return nation;//return Person.nation; } } \"},\"4395\":{\"h\":\"3. 静态方法的调用\",\"a\":\"_3-静态方法的调用\"},\"4396\":{\"t\":\"因为加载类时已经有静态方法了，因此可以直接通过类名调用静态方法。\"},\"4397\":{\"t\":\"Person.getNation();//直接用类调用静态方法 \"},\"4398\":{\"h\":\"4. 静态方法与非静态方法的对比\",\"a\":\"_4-静态方法与非静态方法的对比\"},\"4399\":{\"t\":\"静态方法中只能调用静态的方法和静态属性。\"},\"4400\":{\"t\":\"非静态方法中，既可以调用非静态的方法或属性，也可以调用静态的方法或属性\"},\"4401\":{\"h\":\"5. 注意事项\",\"a\":\"_5-注意事项\"},\"4402\":{\"t\":\"在静态的方法内，不能使用this关键字（this指向的是对象）、super关键字（super指的是当前对象的父类，也要先有对象）。\"},\"4403\":{\"t\":\"关于静态属性和静态方法的使用，可以从生命周期的角度去理解。\"},\"4404\":{\"h\":\"6. 如何判断是否要声明static\",\"a\":\"_6-如何判断是否要声明static\"},\"4405\":{\"t\":\"属性 \"},\"4406\":{\"t\":\"属性是可以被多个对象所共享的，不会随着对象的不同而不同的\"},\"4407\":{\"t\":\"类中的常量也常常声明为static\"},\"4408\":{\"t\":\"方法 \"},\"4409\":{\"t\":\"操作静态属性的方法，通常设置为static的（静态成员的生命周期同步）。\"},\"4410\":{\"t\":\"工具类中的方法，习惯上声明为static的。 比如：Math、Arrays、Collections \"},\"4411\":{\"t\":\"方便直接用类调用\"},\"4412\":{\"h\":\"Ⅳ. 单例模式\",\"a\":\"iv-单例模式\"},\"4413\":{\"t\":\"提示\"},\"4414\":{\"t\":\"详见：设计模式>单例模式\"},\"4415\":{\"h\":\"1. 单例模式核心\",\"a\":\"_1-单例模式核心\"},\"4416\":{\"t\":\"所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例。\"},\"4417\":{\"t\":\"由于单例模式只生成一个实例，减少了系统性能开销，当一个对象的产生需要比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后永久驻留内存的方式来解决。\"},\"4418\":{\"h\":\"2. 实现方式1： 饿汉式\",\"a\":\"_2-实现方式1-饿汉式\"},\"4419\":{\"t\":\"私有化类的构造器：阻止类外随便造对象\"},\"4420\":{\"t\":\"内部创建类的对象，并保存为静态属性\"},\"4421\":{\"t\":\"提供公共的静态方法，返回累的对象。\"},\"4422\":{\"t\":\"class Bank{ //1.私有化类的构造器 private Bank(){} //2.内部创建类的对象 //4.要求此对象也必须声明为静态的 private static Bank instance = new Bank(); //3.提供公共的静态的方法，返回类的对象 public static Bank getInstance(){ return instance; } } Bank bank1 = Bank.getInstance(); Bank bank2 = Bank.getInstance(); System.out.println(bank1 == bank2);//true \"},\"4423\":{\"h\":\"3. 实现方式2：懒汉式\",\"a\":\"_3-实现方式2-懒汉式\"},\"4424\":{\"t\":\"和饿汉式差不多，这里变成了在方法中调用构造器\"},\"4425\":{\"t\":\"class Order{ //1.私有化类的构造器 private Order(){} //2.声明当前类对象，没有初始化 //4.此对象也必须声明为static的 private static Order instance = null; //3.声明public、static的返回当前类对象的方法 public static Order getInstance(){ if(instance == null){ instance = new Order(); } return instance; } } \"},\"4426\":{\"h\":\"4. 饿汉式和懒汉式的对比\",\"a\":\"_4-饿汉式和懒汉式的对比\"},\"4427\":{\"t\":\"饿汉式 \"},\"4428\":{\"t\":\"优点：对象加载时间过长。\"},\"4429\":{\"t\":\"缺点：饿汉式是线程安全的\"},\"4430\":{\"t\":\"懒汉式 \"},\"4431\":{\"t\":\"优点：延迟对象的创建。\"},\"4432\":{\"t\":\"缺点：线程不安全（无法应对高并发）；需要进行多线程的修改【详见：多线程】。\"},\"4433\":{\"h\":\"5. 单例模式的使用场景\",\"a\":\"_5-单例模式的使用场景\"},\"4434\":{\"t\":\"网站的计数器，一般也是单例模式实现，否则难以同步。\"},\"4435\":{\"t\":\"应用程序的日志应用，一般都使用单例模式实现，这一般是由于共享的日志文件一直处于打开状态，因为只能有一个实例去操作，否则内容不好追加。\"},\"4436\":{\"t\":\"数据库连接池的设计一般也是采用单例模式，因为数据库连接是一种数据库资源。\"},\"4437\":{\"t\":\"项目中，读取配置文件的类，一般也只有一个对象。没有必要每次使用配置文件数据，都生成一个对象去读取。\"},\"4438\":{\"t\":\"Application 也是单例的典型应用\"},\"4439\":{\"t\":\"Manager (任务管理器)就是很典型的单例模式\"},\"4440\":{\"t\":\"Windows的Recycle Bin (回收站)也是典型的单例应用。在整个系统运行过程中，回收站一直维护着仅有的一个实例。\"},\"4441\":{\"h\":\"2-a. 抽象类与接口\"},\"4442\":{\"h\":\"Ⅰ. abstract\",\"a\":\"i-abstract\"},\"4443\":{\"h\":\"1. abstract class：抽象类\",\"a\":\"_1-abstract-class-抽象类\"},\"4444\":{\"t\":\"用abstract关键字来修饰一个类，这个类叫做抽象类\"},\"4445\":{\"t\":\"虽然不能实例化，抽象类中还是存在构造器的，因为抽象类的子类还是要实例化的。开发中，都会提供抽象类的子类，让子类实例化，完成相关的操作。\"},\"4446\":{\"t\":\"abstract class Person{...} \"},\"4447\":{\"h\":\"2. abstract方法：抽象方法\",\"a\":\"_2-abstract方法-抽象方法\"},\"4448\":{\"t\":\"用abstract来修饰一个方法，该方法叫做抽象方法。\"},\"4449\":{\"t\":\"抽象方法只有方法的声明，没有方法体,以分号结束；含有抽象方法的类必须被声明为抽象类。\"},\"4450\":{\"t\":\"若子类重写了父类中的所有的抽象方法后，此子类方可实例化，也就是说，子类必须重写父类中所有的抽象方法（提供方法体），除非自己也声明成抽象类。\"},\"4451\":{\"t\":\"public abstract void Say(); \"},\"4452\":{\"h\":\"3. abstract的使用注意\",\"a\":\"_3-abstract的使用注意\"},\"4453\":{\"t\":\"抽象类不一定有抽象方法，但是有抽象方法的类一定要声明成抽象类。\"},\"4454\":{\"t\":\"abstract不能用来修饰属性、代码块构造器等结构\"},\"4455\":{\"t\":\"abstract不能用来修饰私有方法、静态方法、final的方法、final的类\"},\"4456\":{\"h\":\"4. 创建抽象类的匿名类\",\"a\":\"_4-创建抽象类的匿名类\"},\"4457\":{\"t\":\"普通类是可以创建匿名对象的，而抽象类不能实例化，所以理论上无法创建匿名对象。\"},\"4458\":{\"t\":\"但可以通过特殊的方法创建匿名类，达到匿名对象同样的效果\"},\"4459\":{\"t\":\"abstract class Person{ //匿名类 public abstract eat(); //匿名方法 } //现在不用子类继承，不实例化子类，来实例化一个匿名类 public class Test(){ public static void main(String[] args){ method(new Person(){ //直接new抽象类 public void eat(){ //需要重写抽象类里的抽象方法。 System.out.println(\\\"eat shit\\\"); } }); } public static void method(Person p){ p.eat();//调用匿名类里的eat方法 } } \"},\"4460\":{\"h\":\"5. 模板方法设计模式\",\"a\":\"_5-模板方法设计模式\"},\"4461\":{\"t\":\"抽象类可用于模板方法设计模式。\"},\"4462\":{\"t\":\"思想：当功能内部一部分实现是确定的，一部分实现是不确定的。这时可以把不确定的部分暴露出去，让子类去实现。\"},\"4463\":{\"t\":\"换句话说，在软件开发中实现一个算法时，整体步骤很固定、通用，这些步骤已经在父类中写好了。但是某些部分易变，易变部分可以抽象出来，供不同子类实现。这就是一种模板模式。\"},\"4464\":{\"h\":\"5.1 示例：计算代码执行时间\",\"a\":\"_5-1-示例-计算代码执行时间\"},\"4465\":{\"t\":\"解析：创建一个计算代码执行时间的类，我们并不知道要计算的代码具体是什么代码，因此可以将要计算的代码作为抽象方法来定义和使用。\"},\"4466\":{\"t\":\"abstract class Template{ // 计算代码执行时间的类 //计算某段代码执行所需要花费的时间的方法 public void spendTime(){ long start = System.currentTimeMillis(); this.code();//不确定的部分、易变的部分 long end = System.currentTimeMillis(); System.out.println(\\\"花费的时间为：\\\" + (end - start)); } public abstract void code(); //不确定部分设计成抽象方法 } \"},\"4467\":{\"h\":\"5.2 示例：银行业务流程\",\"a\":\"_5-2-示例-银行业务流程\"},\"4468\":{\"t\":\"解析：银行的业务流程是固定的：预约取号->办理业务->评分；我们可以将其作为一个类，但是办理的具体业务是不确定的，因此我们可以将办理的业务作为抽象方法；然后为具体的业务创建子类继承该抽象类，实现具体业务的代码即可。\"},\"4469\":{\"t\":\"abstract class BankTemplateMethod { public void takeNumber() { System.out.println(\\\"取号排队\\\");//步骤一： } //这种步骤中不确定，需要具体子类确定的步骤，像个钩子，被称为钩子函数 public abstract void transact(); // 步骤二：不确定 办理具体的业务 public void evaluate() { //步骤三：反抗评分 System.out.println(\\\"反馈评分\\\"); } // 模板方法，把基本操作组合到一起，子类一般不能重写 public final void process() { this.takeNumber(); this.transact();// 像个钩子，具体执行时，挂哪个子类，就执行哪个子类 this.evaluate(); } } class DrawMoney extends BankTemplateMethod { //示例：实现 public void transact() { System.out.println(\\\"我要取款！！！\\\"); } } \"},\"4470\":{\"h\":\"Ⅱ. interface\",\"a\":\"ii-interface\"},\"4471\":{\"h\":\"说明\",\"a\":\"说明\"},\"4472\":{\"t\":\"接口和类是并列关系，或者可以理解为一种特殊的类。从本质上讲，接口是一种特殊的抽象类，这种抽象类中只包含常量和方法的定义(JDK7.0及之前)，而没有变量和方法的实现。\"},\"4473\":{\"t\":\"在开发中，常看到一个类不是去继承一个已经实现好的类，而是要么继承抽象类，要么实现接口。\"},\"4474\":{\"h\":\"1. 概述：接口的由来\",\"a\":\"_1-概述-接口的由来\"},\"4475\":{\"h\":\"1.1 多重继承\",\"a\":\"_1-1-多重继承\"},\"4476\":{\"t\":\"有时必须从几个类中派生出一个子类，继承它们所有的属性和方法。但是，Java不支持多重继承。有了接口，就可以得到多重继承的效果。\"},\"4477\":{\"h\":\"1.2 功能\",\"a\":\"_1-2-功能\"},\"4478\":{\"t\":\"有时必须从几个类中抽取出一些共同的行为特征，而它们之间又没有is-a的关系，仅仅是具有相同的行为特征而已。例如：鼠标、键盘、打印机、扫描仪、移动硬盘等都支持USB连接。不能定义一个USB父类让他们都去继承，USB是他们的一个功能，而不是他们的一个抽象。因此就需要用到接口了。\"},\"4479\":{\"t\":\"2-a-1\"},\"4480\":{\"h\":\"2. 接口的意义：规范\",\"a\":\"_2-接口的意义-规范\"},\"4481\":{\"t\":\"接口的本质是契约，标准，规范，就像我们的法律一样。制定好后大家都要遵守。\"},\"4482\":{\"t\":\"接口就是规范，定义的是一组规则，体现了现实世界中“如果你是/要...则必须能...”的思想。\"},\"4483\":{\"t\":\"继承是一个\\\"是不是\\\"的关系，而接口实现则是 \\\"能不能\\\"的关系。\"},\"4484\":{\"t\":\"在开发中，常看到一个类不是去继承一个已经实现好的类，而是要么继承抽象类，要么实现接口\"},\"4485\":{\"h\":\"3. 接口定义\",\"a\":\"_3-接口定义\"},\"4486\":{\"t\":\"接口采用interface关键字来定义，接口(interface)是抽象方法和常量值定义的集合；接口内部只能定义全局常量和抽象方法\"},\"4487\":{\"t\":\"全局常量：public static final \"},\"4488\":{\"t\":\"可以省略public static final，默认就是public static final\"},\"4489\":{\"t\":\"抽象方法：public abstract。 \"},\"4490\":{\"t\":\"可以省略abstract，默认就是abstract\"},\"4491\":{\"t\":\"interface Flyable{ public static final int MAX_SPEED = 7900;//全局常量 int MIN_SPEED = 1;//省略了public static final public abstract void fly(); //抽象方法 void stop(); //省略了public abstract } \"},\"4492\":{\"h\":\"4. 接口的特点\",\"a\":\"_4-接口的特点\"},\"4493\":{\"t\":\"接口中不能定义构造器的！意味着接口不可以实例化\"},\"4494\":{\"t\":\"接口与接口之间可以继承，而且可以多继承\"},\"4495\":{\"t\":\"接口中的所有成员变量都默认是由public static final修饰的。\"},\"4496\":{\"t\":\"接口中的所有抽象方法都默认是由public abstract修饰的。\"},\"4497\":{\"h\":\"5. 接口的使用细节\",\"a\":\"_5-接口的使用细节\"},\"4498\":{\"t\":\"定义Java类的语法格式：先写extends，后写implements \"},\"4499\":{\"t\":\"class Son extends Father implements Students{...}\"},\"4500\":{\"t\":\"一个类可以实现多个接口，接口也可以继承其它接口。\"},\"4501\":{\"t\":\"实现接口的类中必须提供接口中所有方法的具体实现内容，方可实例化。否则，仍需定义为抽象类。\"},\"4502\":{\"t\":\"接口的主要用途就是被实现类实现。（面向接口编程） \"},\"4503\":{\"t\":\"几乎所有的设计模式都是面向接口编程的。\"},\"4504\":{\"t\":\"与继承关系类似，接口与实现类之间存在多态性 \"},\"4505\":{\"t\":\"很多设计模式都用到了接口这个特性。\"},\"4506\":{\"h\":\"6. 接口的实现\",\"a\":\"_6-接口的实现\"},\"4507\":{\"t\":\"Java开发中，接口通过让类去实现(implements)的方式来使用；如果实现类实现了接口中的所有抽象方法，则此实现类就可以实例化；否则就只能定义为抽象类。\"},\"4508\":{\"t\":\"Java类可以实现多个接口 --->弥补了Java单继承性的局限性\"},\"4509\":{\"t\":\"class AA extends BB implements CC,DD,EE{...} \"},\"4510\":{\"h\":\"7. 接口示例\",\"a\":\"_7-接口示例\"},\"4511\":{\"t\":\"接口的具体使用，体现多态性。\"},\"4512\":{\"h\":\"7.1 示例：模拟USB\",\"a\":\"_7-1-示例-模拟usb\"},\"4513\":{\"t\":\"//定义USB接口 interface USB{ ...//常量：定义了长、宽、最大最小的传输速度等 void start();//连接USB void stop();//断开USB } //实现USB接口 class Flash implements USB{ public void start(){ System.out.println(\\\"U盘开启工作\\\"); } public void stop() { System.out.println(\\\"U盘结束工作\\\"); } } //在电脑上使用USB class Computer{ public void transferData(USB usb){//USB usb = new Flash(); usb.start(); System.out.println(\\\"具体传输数据的细节\\\"); usb.stop(); } } //用法：有4中方式使用flash Computer com = new Computer(); //实例化子类 Flash flash = new Flash(); //实例化子类 com.transferData(flash); //创建了接口的非匿名实现类的匿名对象 com.transferData(new Flash);//匿名对象 //创建了接口的匿名实现类的非匿名对象 USB flash = new USB(){ public void start() { System.out.println(\\\"USB开始工作\\\"); } public void stop() { System.out.println(\\\"USB结束工作\\\"); } } com.transferData(flash); //创建了接口的匿名实现类的匿名对象 com.transferData(new USB(){ public void start() { System.out.println(\\\"USB开始工作\\\"); } public void stop() { System.out.println(\\\"USB结束工作\\\"); } }); \"},\"4514\":{\"h\":\"7.2 JDBC\",\"a\":\"_7-2-jdbc\"},\"4515\":{\"t\":\"JDBC：接口，定义了所有操作数据库的抽象方法。\"},\"4516\":{\"t\":\"其他数据库驱动实现接口（一些接口的实现集合）。操作时操作JDBC接口里的方法。\"},\"4517\":{\"t\":\"2-a-2\"},\"4518\":{\"t\":\"意义：只掌握一套连接数据库的方法，就能操作所有数据库。\"},\"4519\":{\"h\":\"8. 接口与抽象类的对比\",\"a\":\"_8-接口与抽象类的对比\"},\"4520\":{\"t\":\"2-a-3\"},\"4521\":{\"h\":\"Ⅲ. 接口新特性\",\"a\":\"iii-接口新特性\"},\"4522\":{\"t\":\"JDK8中除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法\"},\"4523\":{\"t\":\"public interface CompareA { //静态方法 public static void method1(){ System.out.println(\\\"CompareA:北京\\\"); } //默认方法 public default void method2(){ System.out.println(\\\"CompareA：上海\\\"); } default void method3(){ System.out.println(\\\"CompareA：上海\\\"); } } \"},\"4524\":{\"h\":\"1. 静态方法\",\"a\":\"_1-静态方法\"},\"4525\":{\"t\":\"使用 static 关键字修饰。只能通过接口直接调用静态方法，并执行其方法体。\"},\"4526\":{\"t\":\"CompareA.method1(); \"},\"4527\":{\"h\":\"2. 默认方法\",\"a\":\"_2-默认方法\"},\"4528\":{\"t\":\"默认方法使用 default 关键字修饰。可以通过实现类对象来调用。\"},\"4529\":{\"t\":\"s.method2(); s.method3(); \"},\"4530\":{\"t\":\"重写：如果实现类重写了接口中的默认方法，调用时，仍然调用的是重写以后的方法\"},\"4531\":{\"t\":\"类优先：如果子类(或实现类)继承的父类和实现的接口中声明了同名同参数的默认方法，那么子类在没有重写此方法的情况下，默认调用的是父类中的同名同参数的方法。-->类优先原则。\"},\"4532\":{\"t\":\"接口冲突：如果实现类实现了多个接口，而这多个接口中定义了同名同参数的默认方法，那么在实现类没有重写此方法的情况下，报错。-->接口冲突。解决：需要我们必须在实现类中重写此方法。\"},\"4533\":{\"h\":\"3. 在子类中调用父类、接口中被重写的方法\",\"a\":\"_3-在子类中调用父类、接口中被重写的方法\"},\"4534\":{\"t\":\" public void myMethod(){ method3();//调用自己定义的重写的方法 super.method3();//调用的是父类中声明的 //调用接口中的默认方法,可以调用多个接口的 CompareA.super.method3(); CompareB.super.method3(); } \"},\"4535\":{\"h\":\"4. 静态方法和默认方法的意义\",\"a\":\"_4-静态方法和默认方法的意义\"},\"4536\":{\"h\":\"4.1 静态方法：\",\"a\":\"_4-1-静态方法\"},\"4537\":{\"t\":\"解释：静态方法，就是接口可以直接掉用的方法，不用实现类也可以\"},\"4538\":{\"t\":\"意义：不用实现接口也能调用这些方法，可以把接口当做工具类使用\"},\"4539\":{\"t\":\"详细：静态方法在实现类中是看不到，无法调用（但可以重写），静态方法只是用来取代一些工具类的。\"},\"4540\":{\"h\":\"4.2 默认方法\",\"a\":\"_4-2-默认方法\"},\"4541\":{\"t\":\"解释：就是方法的默认实现；即实现接口的类可以直接使用这些方法。\"},\"4542\":{\"t\":\"意义：它将允许我们向较旧的接口添加方法。\"},\"4543\":{\"t\":\"详细：接口的实现类可以直接使用这些默认的方法，同时还可以重写默认的方法，这不是强制性的重写。默认方法使得开发者可以在不破坏二进制兼容性的前提下，往现存接口中添加新的方法，即不强制那些实现了该接口的类也同时实现这个新加的方法。\"},\"4544\":{\"h\":\"2-b. 特殊结构\"},\"4545\":{\"h\":\"Ⅰ. 代码块\",\"a\":\"i-代码块\"},\"4546\":{\"h\":\"1. 作用\",\"a\":\"_1-作用\"},\"4547\":{\"t\":\"用来初始化类、对象；\"},\"4548\":{\"t\":\"代码块里面可以像方法体一样，写一些执行的代码。\"},\"4549\":{\"h\":\"2. 格式\",\"a\":\"_2-格式\"},\"4550\":{\"t\":\"{ //这里写代码 } static{ //静态代码块 //这里写代码 } \"},\"4551\":{\"h\":\"3. 分类\",\"a\":\"_3-分类\"},\"4552\":{\"t\":\"一个类中代码块若有修饰符，则只能被static修饰，称为 静态代码块(static block)，没有使用static修饰的，为非静态代码块。\"},\"4553\":{\"t\":\"class Person{ String name; int age; static String desc = \\\"I'm Gay\\\"; static{//static代码块 System.out.println(\\\"代码块可以输出\\\"); desc = \\\"I'm not Gay\\\";//可以给静态属性赋值 info();//可以调用静态方法 } { //非static代码块 System.out.println(\\\"代码块可以输出\\\"); age = 20;//调用非静态结构：为非静态属性赋值 eat();//掉用非静态方法 desc = \\\"Yes\\\" //调用静态结构 info(); } } \"},\"4554\":{\"h\":\"3.1 静态代码块\",\"a\":\"_3-1-静态代码块\"},\"4555\":{\"t\":\"内部可以有输出语句\"},\"4556\":{\"t\":\"随着类的加载而执行,而且只执行一次\"},\"4557\":{\"t\":\"作用：初始化类的信息\"},\"4558\":{\"t\":\"如果一个类中定义了多个静态代码块，则按照声明的先后顺序执行\"},\"4559\":{\"t\":\"静态代码块的执行要优先于非静态代码块的执行\"},\"4560\":{\"t\":\"静态代码块内只能调用静态的属性、静态的方法，不能调用非静态的结构\"},\"4561\":{\"h\":\"3.2 非静态代码块\",\"a\":\"_3-2-非静态代码块\"},\"4562\":{\"t\":\"内部可以有输出语句\"},\"4563\":{\"t\":\"随着对象的创建而执行\"},\"4564\":{\"t\":\"每创建一个对象，就执行一次非静态代码块\"},\"4565\":{\"t\":\"作用：可以在创建对象时，对对象的属性等进行初始化\"},\"4566\":{\"t\":\"如果一个类中定义了多个非静态代码块，则按照声明的先后顺序执行\"},\"4567\":{\"t\":\"非静态代码块内可以调用静态的属性、静态的方法，或非静态的属性、非静态的方法\"},\"4568\":{\"h\":\"4. 开发中代码块的作用\",\"a\":\"_4-开发中代码块的作用\"},\"4569\":{\"t\":\"当在初始化之前要进行一些操作时，可以使用代码块进行：先操作再赋值。\"},\"4570\":{\"h\":\"Ⅱ. JavaBean\",\"a\":\"ii-javabean\"},\"4571\":{\"t\":\"JavaBean是一种Java语言写成的可重用组件（本质是一套Java书写规范）。\"},\"4572\":{\"t\":\"所谓javaBean，是指符合如下标准的Java类：\"},\"4573\":{\"t\":\"类是公共的\"},\"4574\":{\"t\":\"有一个无参的公共的构造器\"},\"4575\":{\"t\":\"所有属性(如果有) 都是private，并且提供set/get (如果boolean 则get 可以替换成is)\"},\"4576\":{\"h\":\"1. 背景\",\"a\":\"_1-背景\"},\"4577\":{\"t\":\"Java语言欠缺属性、事件、多重继承功能。所以，如果要在Java程序中实现一些面向对象编程的常见需求，只能手写大量胶水代码。Java Bean正是编写这套胶水代码的惯用模式或约定。这些约定包括getXxx、setXxx、isXxx、addXxxListener、XxxEvent等。遵守上述约定的类可以用于若干工具或库。\"},\"4578\":{\"h\":\"2. 意义\",\"a\":\"_2-意义\"},\"4579\":{\"t\":\"用户可以使用JavaBean将功能、处理、值、数据库访问和其他任何可以用Java代码创造的对象进行打包，并且其他的开发者可以通过内部的JSP页面、Servlet、其他JavaBean、applet程序或者应用来使用这些对象。用户可以认为JavaBean提供了一种随时随地的复制和粘贴的功能，而不用关心任何改变。\"},\"4580\":{\"h\":\"3. JavaBean的种类\",\"a\":\"_3-javabean的种类\"},\"4581\":{\"t\":\"第一种：封装数据，这种JavaBean也被叫做实体类，一般来说对应的是数据库中的一张表\"},\"4582\":{\"t\":\"第二种：封装逻辑，这种JavaBean用于实现业务逻辑。目的是为了提高代码的复用和解耦\"},\"4583\":{\"h\":\"4. JavaBean举例\",\"a\":\"_4-javabean举例\"},\"4584\":{\"t\":\"如下：获取用户的年龄\"},\"4585\":{\"t\":\"//不使用JavaBean public class Person{ public int age; } //使用JavaBean public class Person{ private int age; public int getAge(){ return age; } } \"},\"4586\":{\"t\":\"假如某一天，逻辑修改了，不能获取用户的年龄了，怎么办？\"},\"4587\":{\"t\":\"不使用JavaBean就只能隐藏age属性，这样很多其他代码都会受到牵连，比如无法获取属性，报一大堆异常。\"},\"4588\":{\"t\":\"而使用JavaBean设计的类，就可以只修改getXxx内的代码逻辑即可。\"},\"4589\":{\"h\":\"Ⅲ. 概念补充\",\"a\":\"iii-概念补充\"},\"4590\":{\"h\":\"1. UML类图\",\"a\":\"_1-uml类图\"},\"4591\":{\"t\":\"2-b-1\"},\"4592\":{\"t\":\"权限控制： + 表示 public 类型， - 表示 private 类型，#表示protected类型\"},\"4593\":{\"t\":\"方法的写法：方法的类型(+、-) 方法名(参数名： 参数类型)：返回值类型\"},\"4594\":{\"h\":\"2. MVC设计模式\",\"a\":\"_2-mvc设计模式\"},\"4595\":{\"t\":\"MVC是常用的设计模式之一，将整个程序分为三个层次：视图模型层，控制器层，与数据模型层。这种将程序输入输出、数据处理，以及数据的展示分离开来的设计模式使程序结构变的灵活而且清晰，同时也描述了程序各个对象间的通信方式，降低了程序的耦合性。\"},\"4596\":{\"h\":\"2.1 Model：模型层【操作数据】\",\"a\":\"_2-1-model-模型层【操作数据】\"},\"4597\":{\"t\":\"数据对象封装 model.bean/domain\"},\"4598\":{\"t\":\"数据库操作类 model.dao\"},\"4599\":{\"t\":\"数据库 model.db\"},\"4600\":{\"h\":\"2.2 Controller：控制器层【业务逻辑】\",\"a\":\"_2-2-controller-控制器层【业务逻辑】\"},\"4601\":{\"t\":\"应用界面相关 controller.activity\"},\"4602\":{\"t\":\"存放fragment controller.fragment\"},\"4603\":{\"t\":\"显示列表的适配器 controller.adapter\"},\"4604\":{\"t\":\"服务相关的 controller.service\"},\"4605\":{\"t\":\"抽取的基类 controller.base\"},\"4606\":{\"h\":\"2.3 View：视图层【前端】\",\"a\":\"_2-3-view-视图层【前端】\"},\"4607\":{\"t\":\"相关工具类 view.utils\"},\"4608\":{\"t\":\"自定义view view.ui\"},\"4609\":{\"h\":\"3. main\",\"a\":\"_3-main\"},\"4610\":{\"t\":\"main()方法作为程序的入口\"},\"4611\":{\"t\":\"main()方法也是一个普通的静态方法\"},\"4612\":{\"t\":\"main()方法可以作为我们与控制台交互的方式。（之前：使用Scanner） \"},\"4613\":{\"t\":\"用法：控制台 java a.class 空格 参数\"},\"4614\":{\"t\":\"参数将传递给main方法的 args数组。\"},\"4615\":{\"t\":\"main的特点 \"},\"4616\":{\"t\":\"由于Java虚拟机需要调用类的main()方法，所以该方法的访问权限必须是public，又因为Java虚拟机在执行main()方法时不必创建对象，所以该方法必须是static的，该方法接收一个String类型的数组参数，该数组中保存执行Java命令时传递给所运行的类的参数。\"},\"4617\":{\"t\":\"又因为main() 方法是静态的，我们不能直接访问该类中的非静态成员，必须创建该类的一个实例对象后，才能通过这个对象去访问类中的非静态成员。\"},\"4618\":{\"h\":\"4. 连续操作\",\"a\":\"_4-连续操作\"},\"4619\":{\"t\":\"方法是可以连续调用的，方法如果有返回值，返回的是一个对象，那么就可以继续调用该对象的方法\"},\"4620\":{\"h\":\"5. 四种Java文件\",\"a\":\"_5-四种java文件\"},\"4621\":{\"t\":\"以下四种文件是平级的，且后缀都是.java\"},\"4622\":{\"t\":\"Class：标准的Java类\"},\"4623\":{\"t\":\"Interface：接口\"},\"4624\":{\"t\":\"Enum：枚举\"},\"4625\":{\"t\":\"Annotation：注解\"},\"4626\":{\"h\":\"2-c. 内存解析\"},\"4627\":{\"t\":\"提示\"},\"4628\":{\"t\":\"仅简单介绍，详见：JVM\"},\"4629\":{\"h\":\"Ⅰ. 类与对象\",\"a\":\"i-类与对象\"},\"4630\":{\"h\":\"1. 内存区域\",\"a\":\"_1-内存区域\"},\"4631\":{\"t\":\"2-c-1\"},\"4632\":{\"t\":\"堆（Heap）：用于存放对象实例；所有的对象实例以及数组都要在堆上分配内存。\"},\"4633\":{\"t\":\"栈（Stack）：是指虚拟机栈。虚拟机栈用于存储局部变量等。 \"},\"4634\":{\"t\":\"局部变量表存放了编译期可知长度的各种基本数据类型（boolean、byte、char 、 short 、 int 、 float 、 long 、double）、对象引用（reference类型，它不等同于对象本身，是对象在堆内存的首地址）。 方法执行完，自动释放。\"},\"4635\":{\"t\":\"方法区（Method Area）：存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。\"},\"4636\":{\"t\":\"其他区域：其他区域跟类和对象无关，不用关注\"},\"4637\":{\"h\":\"2. 对象的内存解析\",\"a\":\"_2-对象的内存解析\"},\"4638\":{\"t\":\"2-c-2\"},\"4639\":{\"h\":\"2.1 Person p1 = new Person\",\"a\":\"_2-1-person-p1-new-person\"},\"4640\":{\"t\":\"new类创建对象时，在堆内存中，保存了对象的实体；同时在栈内存中，是k=v的形式，用k保存了对象的标识符p1，用v保存了对象实体所在内存空间的首地址。即对象的标识符p1保存了对象的内存地址，p1指向了对象实体；而对象实体中保存了对象的属性。\"},\"4641\":{\"h\":\"2.2 p1.name = Tome；p1.isMale=true\",\"a\":\"_2-2-p1-name-tome-p1-ismale-true\"},\"4642\":{\"t\":\"对象的属性是复制类的，属性的默认值就是类里定义的值；如果没有默认值，就采用数据类型的默认值。当对属性进行修改时，对象实体内属性的值就被修改了。\"},\"4643\":{\"h\":\"2.3 Person p2 = new Person()\",\"a\":\"_2-3-person-p2-new-person\"},\"4644\":{\"t\":\"再新建一个对象时，堆内存中又开辟了一块内存空间储存对象的实体。同时栈内存中，用p2保存了新对象的内存地址。\"},\"4645\":{\"t\":\"p1和p2是完全独立的，他们指向各自的对象内存地址。两个对象中保存的属性也是互不相干的（各种有自己的内存空间）。\"},\"4646\":{\"h\":\"2.4 Person p3 = p1；p3.age = 10\",\"a\":\"_2-4-person-p3-p1-p3-age-10\"},\"4647\":{\"t\":\"通过变量赋值的方式，将p1保存的内存地址赋给了p3，因此现在p1和p3保存的是相同的内存地址，指向同一个对象，通过p1和p3对对象的属性进行修改，会互相影响到对方。\"},\"4648\":{\"h\":\"3. 注意事项\",\"a\":\"_3-注意事项\"},\"4649\":{\"t\":\"引用类型的变量，只可能存储两类值：null 或 地址值（含变量的类型）\"},\"4650\":{\"h\":\"Ⅱ. 变量间赋值\",\"a\":\"ii-变量间赋值\"},\"4651\":{\"h\":\"1. 结论\",\"a\":\"_1-结论\"},\"4652\":{\"t\":\"将一个变量的值赋值给另一个变量时，\"},\"4653\":{\"t\":\"如果变量的值是基本数据类型：那么只是将值复制给另一个变量，两个变量各种保存了一份值，互不干扰，当其中一个变量的值改变时不会影响另一个。\"},\"4654\":{\"t\":\"如果变量的值是引用数据类型：那么变量保存的其实是值所在内存的内存地址，进行赋值时，是将内存地址传给了对方，两个变量指向同一内存地址，互为引用，互相干扰。\"},\"4655\":{\"h\":\"2. 基本数据类型\",\"a\":\"_2-基本数据类型\"},\"4656\":{\"t\":\"基本数据类型的值，是直接跟变量对应的，没有通过保存指针来用变量指向值。\"},\"4657\":{\"t\":\"所以基本数据类型在赋值的时候，是直接将值赋给了对方，两个变量互不干扰。\"},\"4658\":{\"t\":\"int a = 10; int b = a; System.out.println(a+b);//10 10 inb b = 20; System.out.println(a+b);//10 20 \"},\"4659\":{\"h\":\"3. 引用数据类型\",\"a\":\"_3-引用数据类型\"},\"4660\":{\"t\":\"引用数据类型的标识符保存的是值的内存地址，因此在向其他变量赋值的时候，是将内存地址传过去了，两个变量指向同一内存地址，互为引用，互相干扰。\"},\"4661\":{\"t\":\"String a = 'hello'; String b = a; System.out.println(a+b);//hello hello b = \\\"OK \\\"; System.out.println(a+b);//OK OK \"},\"4662\":{\"h\":\"3-1. 异常概述\"},\"4663\":{\"h\":\"Ⅰ. 概述\",\"a\":\"i-概述\"},\"4664\":{\"t\":\"在Java语言中，将程序执行中发生的不正常情况称为“异常”。(开发过程中的语法错误和逻辑错误不是异常)\"},\"4665\":{\"h\":\"1. 异常分类\",\"a\":\"_1-异常分类\"},\"4666\":{\"t\":\"Java程序在执行过程中所发生的异常事件可分为两类：Error和Exception\"},\"4667\":{\"h\":\"2. Error：错误\",\"a\":\"_2-error-错误\"},\"4668\":{\"t\":\"Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源耗尽等严重情况。比如：StackOverflowError和OOM。一般不编写针对性的代码进行处理。\"},\"4669\":{\"t\":\"我们常说的异常处理，不包括这个，这个是我们处理不了的。\"},\"4670\":{\"t\":\"public class ErrorTest { public static void main(String[] args) { //1.栈溢出：java.lang.StackOverflowError main(args); //2.堆溢出：java.lang.OutOfMemoryError Integer[] arr = new Integer[1024*1024*1024]; } } \"},\"4671\":{\"h\":\"3. Exception：异常\",\"a\":\"_3-exception-异常\"},\"4672\":{\"t\":\"其它因编程错误或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理。\"},\"4673\":{\"t\":\"如：空指针访问、试图读取不存在的文件、网络连接中断、数组角标越界\"},\"4674\":{\"t\":\"我们平时说的异常一般指的就是Exception。\"},\"4675\":{\"h\":\"4. 异常处理\",\"a\":\"_4-异常处理\"},\"4676\":{\"t\":\"对于这些错误，一般有两种 解决方法：一是遇到错误就终止程序的运行。另一种方法是由程序员在编写程序时，就考虑到错误的检测、错误消息的提示，以及错误的处理。\"},\"4677\":{\"t\":\"使用程序处理异常，又分为两种形式：try-catch和throws.\"},\"4678\":{\"h\":\"5. 异常处理的意义\",\"a\":\"_5-异常处理的意义\"},\"4679\":{\"t\":\"异常的处理只是为了保证代码的正常运行，并非真正解决了异常。\"},\"4680\":{\"t\":\"例如：点击点击首页时，因为缺少某个资源，发生了乱码，我们进行处理的效果是提示用户发生了资源缺失，而不是让用户看乱码，这就是异常的意义。但是要明确，异常并没有被解决，我们需要将异常写入日志，上报到后台，然后再去真正的解决异常。\"},\"4681\":{\"t\":\"也就是：异常处理只是为了跟用户友好的交互，真正解决异常，还是要后台根据收集的异常信息去优化代码。\"},\"4682\":{\"h\":\"Ⅱ. 异常处理机制\",\"a\":\"ii-异常处理机制\"},\"4683\":{\"t\":\"在编写程序时，经常要在可能出现错误的地方加上检测的代码，如进行x/y运算时，要检测分母为0，数据为空，输入的不是数据而是字符等。过多的if-else分支会导致程序的代码加长、臃肿，可读性差。因此采用异常处理机制。\"},\"4684\":{\"h\":\"1. java的异常处理机制\",\"a\":\"_1-java的异常处理机制\"},\"4685\":{\"t\":\"Java采用的异常处理机制，是将异常处理的程序代码集中在一起，与正常的程序代码分开，使得程序简洁、优雅，并易于维护。\"},\"4686\":{\"h\":\"2. 异常处理的抓抛模型\",\"a\":\"_2-异常处理的抓抛模型\"},\"4687\":{\"t\":\"抛（throw）：程序在正常执行的过程中，一旦出现异常，就会在异常代码处生成一个对应异常类的对象。并将此对象抛出。 一旦抛出对象以后，其后的代码就不再执行。\"},\"4688\":{\"t\":\"抓（catch）：可以理解为异常的处理方式：① try-catch-finally ② throws\"},\"4689\":{\"h\":\"3. 异常对象的产生\",\"a\":\"_3-异常对象的产生\"},\"4690\":{\"t\":\"系统自动生成的异常对象：由虚拟机 自动生成：程序运行过程中，虚拟机检测到程序发生了问题，如果在当前代码中没有找到相应的处理程序，就会在后台自动创建一个对应异常类的实例对象并抛出——自动抛出\"},\"4691\":{\"t\":\"手动的生成一个异常对象，并抛出（throw）：由开发人员手动创建：Exception exception = new ClassCastException();——创建好的异常对象不抛出对程序没有任何影响，和创建一个普通对象一样。\"},\"4692\":{\"h\":\"4. 异常处理总结\",\"a\":\"_4-异常处理总结\"},\"4693\":{\"t\":\"3-1-1\"},\"4694\":{\"h\":\"3-2. 常见异常\"},\"4695\":{\"h\":\"Ⅰ. 异常体系结构\",\"a\":\"i-异常体系结构\"},\"4696\":{\"h\":\"1. 异常分类\",\"a\":\"_1-异常分类\"},\"4697\":{\"t\":\"捕获错误最理想的是在 编译期间，但有的错误只有在 运行时才会发生。比如：除数为0，数组下标越界等\"},\"4698\":{\"t\":\"异常（Exception）分为：编译时异常和运行时异常\"},\"4699\":{\"t\":\"java.lang.Throwable |-----java.lang.Error:一般不编写针对性的代码进行处理。 |-----java.lang.Exception:可以进行异常的处理 |------编译时异常(checked) |-----IOException |-----FileNotFoundException |-----ClassNotFoundException |------运行时异常(unchecked,RuntimeException) |-----NullPointerException |-----ArrayIndexOutOfBoundsException |-----ClassCastException |-----NumberFormatException |-----InputMismatchException |-----ArithmeticException \"},\"4700\":{\"t\":\"3-2-1\"},\"4701\":{\"h\":\"2. 编译时异常\",\"a\":\"_2-编译时异常\"},\"4702\":{\"t\":\"是指编译器要求必须处置的异常。即程序在运行时由于外界因素造成的一般性异常。编译器要求Java程序必须捕获或声明所有编译时异常。\"},\"4703\":{\"t\":\"对于这类异常，如果程序不处理，可能会带来意想不到的结果。\"},\"4704\":{\"h\":\"3. 运行时异常\",\"a\":\"_3-运行时异常\"},\"4705\":{\"t\":\"是指编译器不要求强制处置的异常。一般是指编程时的逻辑错误，是程序员应该积极避免其出现的异常。java.lang.RuntimeException类及它的子类都是运行时异常。\"},\"4706\":{\"t\":\"对于这类异常，可以不作处理，因为这类异常很普遍，若全处理可能会对程序的可读性和运行效率产生影响。\"},\"4707\":{\"h\":\"Ⅱ. 常见异常\",\"a\":\"ii-常见异常\"},\"4708\":{\"h\":\"1. NullPointerException：空指针（运行异常）\",\"a\":\"_1-nullpointerexception-空指针-运行异常\"},\"4709\":{\"t\":\"int[] arr = null; System.out.println(arr[3]); String str = \\\"abc\\\"; str = null; System.out.println(str.charAt(0)); \"},\"4710\":{\"h\":\"2. IndexOutOfBoundsException：角标越界（运行异常）\",\"a\":\"_2-indexoutofboundsexception-角标越界-运行异常\"},\"4711\":{\"h\":\"3.1 ArrayIndexOutOfBoundsException：数组角标越界\",\"a\":\"_3-1-arrayindexoutofboundsexception-数组角标越界\"},\"4712\":{\"t\":\"int[] arr = new int[10]; System.out.println(arr[10]); \"},\"4713\":{\"h\":\"3.2 StringIndexOutOfBoundsException：字符串角标越界\",\"a\":\"_3-2-stringindexoutofboundsexception-字符串角标越界\"},\"4714\":{\"t\":\"String str = \\\"abc\\\" System.out.println(str.charAt(3)); \"},\"4715\":{\"h\":\"3. ClassCastException：类型转换异常（运行异常）\",\"a\":\"_3-classcastexception-类型转换异常-运行异常\"},\"4716\":{\"t\":\"Object obj = new Date(); String str = (String)obj; \"},\"4717\":{\"h\":\"4. NumberFormatException：数值格式异常（运行异常）\",\"a\":\"_4-numberformatexception-数值格式异常-运行异常\"},\"4718\":{\"t\":\"String str = \\\"123\\\"; str = \\\"abc\\\"; int num = Integer.parseInt(str); \"},\"4719\":{\"h\":\"5. InputMismatchException：输入不匹配异常（运行异常）\",\"a\":\"_5-inputmismatchexception-输入不匹配异常-运行异常\"},\"4720\":{\"t\":\"Scanner scanner = new Scanner(System.in); int score = scanner.nextInt(); System.out.println(score);//需求是输入int，如果输入字符串就会报异常 scanner.close(); \"},\"4721\":{\"h\":\"6. ArithmeticException：算学计算异常（运行异常）\",\"a\":\"_6-arithmeticexception-算学计算异常-运行异常\"},\"4722\":{\"t\":\"int a = 10; int b = 0; System.out.println(a / b);//0作为了被除数 \"},\"4723\":{\"h\":\"7. IOException（编译时异常）\",\"a\":\"_7-ioexception-编译时异常\"},\"4724\":{\"t\":\"File file = new File(\\\"hello.txt\\\"); FileInputStream fis = new FileInputStream(file); int data = fis.read(); while(data != -1){ System.out.print((char)data); data = fis.read(); } fis.close(); \"},\"4725\":{\"h\":\"3-3. try-catch\"},\"4726\":{\"h\":\"1. 语法结构\",\"a\":\"_1-语法结构\"},\"4727\":{\"t\":\"try{ //可能出现异常的代码 }catch(异常类型1 变量名1){ //当产生异常类型1时的处理措施 }catch(异常类型2 变量名2){ //当产生异常类型2时的处理措施 }catch(异常类型3 变量名3){ //当产生异常类型3时的处理措施 } .... finally{ //无论是否发生异常，都无条件执行的语句 } \"},\"4728\":{\"t\":\"try：捕获异常的第一步是用try{…}语句块选定捕获异常的范围，将可能出现异常的代码放在try语句块中。\"},\"4729\":{\"t\":\"catch：在catch语句块中是对异常对象进行处理的代码。每个try语句块可以伴随一个或多个catch语句，用于处理可能产生的不同类型的异常对象。\"},\"4730\":{\"h\":\"2. 异常类型的选择\",\"a\":\"_2-异常类型的选择\"},\"4731\":{\"t\":\"如果明确知道产生的是何种异常，可以用该异常类作为catch的参数；也可 以用其父类作为catch的参数。比 如 ： 可以用ArithmeticException 类作为参数的地方，就可以用 RuntimeException类作为参数，或者用所有异常的父类Exception类作为参数。\"},\"4732\":{\"t\":\"但不能是与ArithmeticException类无关的异常，如NullPointerException（catch 中的语句将不会执行）。\"},\"4733\":{\"h\":\"3. try-catch示例\",\"a\":\"_3-try-catch示例\"},\"4734\":{\"t\":\"import java.io.File; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.IOException; public class ExceptionTest{ public void test1(){ String str = \\\"abc\\\"; //非数字字符串 try{ int num = Integer.parseInt(str); //非数字字符串转不了 System.out.println(\\\"shit,这里出问题了\\\"); }catch(NumberFormatException e){ //尝试捕获数值类型异常 System.out.println(\\\"YES,捕获到了数值异常\\\"); System.out.pintln(e.getMessage());//获取异常信息 e.printStackTrace();//打印详细异常：堆栈追踪 }catch(NullPointerException e){ //尝试捕获空指针异常 System.out.println(\\\"YES,捕获到了空指针异常\\\"); }catch(Exception e){ //尝试捕获异常 System.out.println(\\\"这里出现了异常，类型不明\\\"); } System.out.println(num);//无法获取num，num是try里面的局部变量 System.out.println(\\\"后续代码继续执行\\\"); } } \"},\"4735\":{\"h\":\"4. try-catch使用说明\",\"a\":\"_4-try-catch使用说明\"},\"4736\":{\"t\":\"finally是可选的。\"},\"4737\":{\"t\":\"使用try将可能出现异常代码包装起来，在执行过程中，一旦出现异常，就会生成一个对应异常类的对象，根据此对象的类型，去catch中进行匹配\"},\"4738\":{\"t\":\"一旦try中的异常对象匹配到某一个catch时，就进入catch中进行异常的处理。一旦处理完成，就跳出当前的try-catch结构（在没有写finally的情况）。继续执行其后的代码（不会再执行其他catch了，只捕获一次）。\"},\"4739\":{\"h\":\"5. 捕获异常的有关信息\",\"a\":\"_5-捕获异常的有关信息\"},\"4740\":{\"t\":\"捕获异常后，会获取异常对象，对于异常对象e，可以调用下面两个方法，处理（查看）异常信息。\"},\"4741\":{\"t\":\"3-3-1\"},\"4742\":{\"t\":\"getMessage：获取异常信息，返回字符串\"},\"4743\":{\"t\":\"printStackTrace：打印详细异常：堆栈追踪。获取异常类名和异常信息，以及异常出现在程序中的位置。返回值void。\"},\"4744\":{\"h\":\"6. finally的使用\",\"a\":\"_6-finally的使用\"},\"4745\":{\"t\":\"finally是可选的；finally中声明的是一定会被执行的代码。即使catch中又出现异常了，try中有return语句，catch中有return语句，代码没有异常等。finally语句为异常处理提供一个统一的出口，使得在控制流转到程序的其它部分以前，能够对程序的状态作统一的管理。\"},\"4746\":{\"t\":\"使用场景：像数据库连接、输入输出流、网络编程Socket等资源，JVM是不能自动的回收的，我们需要自己手动的进行资源的释放。此时的资源释放，就需要声明在finally中。即无论如何资源都会被释放。\"},\"4747\":{\"h\":\"6.1 示例1：finally一定会被执行\",\"a\":\"_6-1-示例1-finally一定会被执行\"},\"4748\":{\"t\":\"若无异常，执行结果为：finally 1\"},\"4749\":{\"t\":\"若有异常，执行结果为：finally 2\"},\"4750\":{\"t\":\"若finally中有return 3，执行结果为：finally 3 总结：finally中的代码总会执行，且会在return之前执行。\"},\"4751\":{\"t\":\"public int method(){ try{ int[] arr = new int[10]; System.out.println(arr[10]);//角标越位异常 return 1; }catch(ArrayIndexOutOfBoundsException e){ e.printStrackTrace(); return 2; }finally{ System.out.println(\\\"finally\\\"); //return 3; } } \"},\"4752\":{\"h\":\"6.2 示例2：资源的释放\",\"a\":\"_6-2-示例2-资源的释放\"},\"4753\":{\"t\":\" public void test2(){ FileInputStream fis = null; //初始化资源 try { File file = new File(\\\"hello1.txt\\\"); fis = new FileInputStream(file);//读取资源,可能读取失败 int data = fis.read(); //开始读取 while(data != -1){ System.out.print((char)data); data = fis.read(); } } catch (FileNotFoundException e) { //异常：文件打开失败 e.printStackTrace(); } catch (IOException e) { //异常：文件传输失败 e.printStackTrace(); }finally{ try { //finally里吗也可能有异常，所以要嵌套一个try...catch if(fis != null)//先判断资源是否打开 fis.close(); //在finally里面关闭资源 } catch (IOException e) { e.printStackTrace(); } } } \"},\"4754\":{\"h\":\"7. 异常的嵌套\",\"a\":\"_7-异常的嵌套\"},\"4755\":{\"t\":\"try-catch-finally结构可以嵌套。\"},\"4756\":{\"t\":\"catch和finally里面也可能会有异常。\"},\"4757\":{\"h\":\"8. 注意事项\",\"a\":\"_8-注意事项\"},\"4758\":{\"t\":\"catch捕获的顺序：catch中的异常类型如果没有子父类关系，则谁声明在上，谁声明在下无所谓。 catch中的异常类型如果满足子父类关系，则要求子类一定声明在父类的上面。否则，报错\"},\"4759\":{\"t\":\"变量的范围：在try结构中声明的变量，在出了try结构以后，就不能再被调用\"},\"4760\":{\"h\":\"9. 编译时异常和运行时异常的不同处理\",\"a\":\"_9-编译时异常和运行时异常的不同处理\"},\"4761\":{\"t\":\"编译时异常：进行try...catch处理；将其延后成运行时异常 \"},\"4762\":{\"t\":\"使用try-catch-finally处理编译时异常，使得程序在编译时就不再报错，但是运行时仍可能报错。相当于我们使用try-catch-finally将一个编译时可能出现的异常，延迟到运行时出现。针对于编译时异常，一定要考虑异常的处理。\"},\"4763\":{\"t\":\"运行时异常：处理没有意义，不用try...catch进行处理。： \"},\"4764\":{\"t\":\"开发中，由于运行时异常比较常见，所以我们通常就不针对运行时异常编写try-catch-finally了。\"},\"4765\":{\"h\":\"3-4. trows\"},\"4766\":{\"h\":\"Ⅰ. throws\",\"a\":\"i-throws\"},\"4767\":{\"t\":\"如果一个方法(中的语句执行时)可能生成某种异常，但是并不能确定如何处理这种异常，则此方法应显示地声明抛出异常，表明该方法将不对这些异常进行处理，而由该方法的调用者负责处理。\"},\"4768\":{\"t\":\"在方法声明中用throws语句可以声明抛出异常的列表，throws后面的异常类型可以是方法中产生的异常类型，也可以是它的父类 。\"},\"4769\":{\"h\":\"1. throws介绍\",\"a\":\"_1-throws介绍\"},\"4770\":{\"t\":\"throws只是用来抛出异常的，将异常抛到代码的调用处，并不会处理异常，处理异常还是要在代码调用处使用try-catch结构。\"},\"4771\":{\"t\":\"\\\"throws + 异常类型\\\"写在方法的声明处。指明此方法执行时，可能会抛出的异常类型。一旦当方法体执行时，出现异常，仍会在异常代码处生成一个异常类的对象，此对象满足throws后异常类型时，就会被抛出。异常代码后续的代码，就不再执行！\"},\"4772\":{\"h\":\"2. 异常的抛出机制\",\"a\":\"_2-异常的抛出机制\"},\"4773\":{\"t\":\"如果一个方法内抛出异常，该异常对象会被抛给调用者方法中处理。如果异常没有在调用者方法中处理，它继续被抛给这个调用方法的上层方法。这个过程将一直继续下去，直到异常被处理。\"},\"4774\":{\"t\":\"如果一个异常回到main()方法，并且main()也不处理，则程序运行终止。\"},\"4775\":{\"t\":\"3-4-1\"},\"4776\":{\"h\":\"3. throws使用示例\",\"a\":\"_3-throws使用示例\"},\"4777\":{\"t\":\"public class ExceptionTest2 { public static void main(String[] args){ //这里再抛就到虚拟机了，不能再抛了 try{ //这里开始处理异常 method2(); }catch(IOException e){ e.printStackTrace(); } } //因为IOException包含了FileNotFountException,所以可以合并成一个异常 //如果这两个异常的处理方式不一样，比如返回的错误码不一样，则不要合并。 public static void method2() throws IOException{ method1(); //异常又被抛出去了，所以这里不用处理异常 } //这里将异常抛出到调用处，因此不用进行处理。 public static void method1() throws FileNotFoundException,IOException{ File file = new File(\\\"hello1.txt\\\"); FileInputStream fis = new FileInputStream(file); int data = fis.read(); while(data != -1){ System.out.print((char)data); data = fis.read(); } fis.close(); System.out.println(\\\"hahaha!\\\"); } } \"},\"4778\":{\"h\":\"4. try-catch-finally与throws的对比\",\"a\":\"_4-try-catch-finally与throws的对比\"},\"4779\":{\"t\":\"try-catch-finally:真正的将异常给处理掉了。\"},\"4780\":{\"t\":\"throws的方式只是将异常抛给了方法的调用者。并没有真正将异常处理掉。\"},\"4781\":{\"h\":\"5. 方法重写时的异常规则\",\"a\":\"_5-方法重写时的异常规则\"},\"4782\":{\"t\":\"子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型。\"},\"4783\":{\"t\":\"因为我们调用父类方法时要进行异常处理，而此时若使用多态，实际调用的是子类的方法，则必须能处理掉子类的异常，不然会报错。\"},\"4784\":{\"h\":\"6. 开发中try-catch-finally和throws的选择\",\"a\":\"_6-开发中try-catch-finally和throws的选择\"},\"4785\":{\"t\":\"如果父类中被重写的方法没有throws方式处理异常，则子类重写的方法也不能使用throws，意味着如果子类重写的方法中有异常，必须使用try-catch-finally方式处理。\"},\"4786\":{\"t\":\"执行的方法a中，先后又调用了另外的几个方法，这几个方法是递进关系执行的。我们建议这几个方法使用throws的方式进行处理。而执行的方法a可以考虑使用try-catch-finally方式进行处理。\"},\"4787\":{\"h\":\"7. 运行时异常的排查\",\"a\":\"_7-运行时异常的排查\"},\"4788\":{\"t\":\"如果代码编译时没有异常，运行时出现了异常，比如空指针；那么应该对代码进行排查，优化，而不是进行try..catch处理。\"},\"4789\":{\"h\":\"Ⅱ. 手动抛出异常\",\"a\":\"ii-手动抛出异常\"},\"4790\":{\"h\":\"1. 关于异常的产生\",\"a\":\"_1-关于异常的产生\"},\"4791\":{\"t\":\"系统自动生成的异常对象\"},\"4792\":{\"t\":\"手动生成一个异常对象，并抛出（throw）\"},\"4793\":{\"h\":\"2. 手动抛出异常的意义\",\"a\":\"_2-手动抛出异常的意义\"},\"4794\":{\"t\":\"异常是抛给调用者看的，调用者分为其他方法调用，或前端调用。有些异常是逻辑上的，需要我们自己手动抛出。抛出异常和返回一个特殊值，都能解决问题；可自行选择，抛出异常可以省掉很多if...else... 但是返回值更精准。\"},\"4795\":{\"t\":\"如果代码存在逻辑上的问题，我们就需要抛出异常，告诉代码的调用者。\"},\"4796\":{\"h\":\"3. 创建异常的语法\",\"a\":\"_3-创建异常的语法\"},\"4797\":{\"t\":\"由于是逻辑上的异常，需要我们自己new异常类，我们选择的异常类型有：\"},\"4798\":{\"t\":\"Exception：编译异常（编译时会报错）\"},\"4799\":{\"t\":\"RuntimeException：运行时异常（选他，不会报错）-->选这个\"},\"4800\":{\"t\":\"throw new Exception(\\\"异常信息\\\"); throw new RuntimeException(\\\"异常信息\\\"); \"},\"4801\":{\"h\":\"4. 示例\",\"a\":\"_4-示例\"},\"4802\":{\"t\":\"自定义的异常也是可以throws到调用处的，比如抛出的是个编译时异常，就可以抛出到调用处进行处理。自定义异常中定义的异常信息，可以在调用处，使用异常类的getMessage方法获取。\"},\"4803\":{\"t\":\"class Student{ private int id; //这里可以将异常信息再次throws到调用处 public void regist(int id) throws Exception { if(id > 0){ this.id = id; }else{ //手动抛出异常对象,运行时异常不会报编译时错误 throw new RuntimeException(\\\"您输入的数据非法！\\\"); //Exception会报编译时错误，可以将该异常throws到调用处 throw new Exception(\\\"您输入的数据非法\\\"); } } } public class StudentTest { public static void main(String[] args) { try { //处理throws来的的异常 Student s = new Student(); s.regist(-1001); System.out.println(s); } catch (Exception e) { System.out.println(e.getMessage()); } } } \"},\"4804\":{\"h\":\"Ⅲ. 自定义异常类\",\"a\":\"iii-自定义异常类\"},\"4805\":{\"h\":\"1. 自定义异常类的创建说明\",\"a\":\"_1-自定义异常类的创建说明\"},\"4806\":{\"t\":\"一般地，用户自定义异常类都是RuntimeException的子类；\"},\"4807\":{\"t\":\"自定义异常类通常需要编写几个重载的构造器。\"},\"4808\":{\"t\":\"自定义异常需要提供serialVersionUID \"},\"4809\":{\"t\":\"类的标识，随便定义，要是long类型，够长\"},\"4810\":{\"t\":\"自定义的异常通过throw抛出。\"},\"4811\":{\"t\":\"自定义异常最重要的是异常类的名字，当异常出现时，可以根据名字判断异常类型。\"},\"4812\":{\"h\":\"2. 自定义异常类示例\",\"a\":\"_2-自定义异常类示例\"},\"4813\":{\"t\":\"public class MyException extends Exception{ static final long serialVersionUID = -7034897193246939L; public MyException(){ } public MyException(String msg){ super(msg); } } \"},\"4814\":{\"h\":\"3. 自定义异常类的总结\",\"a\":\"_3-自定义异常类的总结\"},\"4815\":{\"t\":\"直接继承RuntimeException即可，方法直接使用父类的。自定义异常类的意义在于异常类的名字，当异常出现时，可以根据名字判断异常类型。\"},\"4816\":{\"h\":\"4-1. 枚举\"},\"4817\":{\"h\":\"Ⅰ. 枚举类\",\"a\":\"i-枚举类\"},\"4818\":{\"h\":\"1. 什么是枚举类\",\"a\":\"_1-什么是枚举类\"},\"4819\":{\"t\":\"当类的对象是有限个，且确定的情况下，这个类就是枚举类，当需要定义一组常量时，强烈建议使用枚举类，例如：\"},\"4820\":{\"t\":\"星期：Monday(星期一)、......、Sunday(星期天)\"},\"4821\":{\"t\":\"性别：Man(男)、Woman(女)\"},\"4822\":{\"t\":\"季节：Spring(春节)......Winter(冬天)\"},\"4823\":{\"t\":\"支付方式：Cash（现金）、WeChatPay（微信）、Alipay(支付宝)、BankCard(银行卡)、CreditCard(信用卡)、就职状态：Busy、Free、Vocation、Dimission、\"},\"4824\":{\"t\":\"订单状态：Nonpayment（未付款）、Paid（已付款）、Delivered（已发货）、Return（退货）、Checked（已确认）Fulfilled（已配货）、\"},\"4825\":{\"t\":\"线程状态：创建、就绪、运行、阻塞、死亡\"},\"4826\":{\"h\":\"2. 枚举类的特点\",\"a\":\"_2-枚举类的特点\"},\"4827\":{\"t\":\"一个类，他有固定的对象数量，且对象不可改变（final）这些对象是作为类的属性的，用的时候直接取即可。且该类不能再创建对象。\"},\"4828\":{\"h\":\"3. 枚举类的实现\",\"a\":\"_3-枚举类的实现\"},\"4829\":{\"t\":\"JDK1.5之前：需要自定义枚举类\"},\"4830\":{\"t\":\"JDK1.5新增：enum 关键字用于定义枚举类\"},\"4831\":{\"h\":\"4. 自定义枚举类说明\",\"a\":\"_4-自定义枚举类说明\"},\"4832\":{\"t\":\"枚举动 类对象的属性不应允许被改动, 所以应该使用 private final 修饰\"},\"4833\":{\"t\":\"枚举类的使用 private final 修饰的属性应该在构造器中为其赋值\"},\"4834\":{\"t\":\"若枚举类显式的定义了带参数的构造器, 则在列出枚举值时也必须对应的传入参数\"},\"4835\":{\"t\":\"如果枚举类中只有一个对象，则可以作为单例模式的实现方式。\"},\"4836\":{\"h\":\"5. 示例：自定义枚举类\",\"a\":\"_5-示例-自定义枚举类\"},\"4837\":{\"t\":\"创建细节：\"},\"4838\":{\"t\":\"私有化类的构造器，保证不能在类的外部创建其对象\"},\"4839\":{\"t\":\"在类的内部创建枚举类的实例。声明为：public static final\"},\"4840\":{\"t\":\"对象如果有实例变量，应该声明为private final，并在构造器中初始化\"},\"4841\":{\"h\":\"5.1 创建枚举类\",\"a\":\"_5-1-创建枚举类\"},\"4842\":{\"t\":\"需求：创建一个季节枚举类，包含四季，属性为季节名和季节描述\"},\"4843\":{\"t\":\"class Season{ //1.声明Season对象的属性:private final修饰 private final String seasonName; private final String seasonDesc; //2.私有化类的构造器,并给对象属性赋值 private Season(String seasonName,String seasonDesc){ this.seasonName = seasonName; this.seasonDesc = seasonDesc; } //3.提供当前枚举类的多个对象：public static final的 public static final Season SPRING = new Season(\\\"春\\\",\\\"交配季节\\\"); public static final Season SUMMER = new Season(\\\"夏\\\",\\\"好大雨\\\"); public static final Season AUTUMN = new Season(\\\"秋\\\",\\\"落叶\\\"); public static final Season WINTER = new Season(\\\"冬\\\",\\\"好大雪\\\"); //4.其他诉求：获取枚举类对象的属性 public String getSeasonName() { return seasonName; } public String getSeasonDesc() { return seasonDesc; } //5.toString，测试用 @Override public String toString() { return \\\"{\\\"+ seasonName + \\\":\\\" + seasonDesc + '}'; } } \"},\"4844\":{\"h\":\"5.2 测试\",\"a\":\"_5-2-测试\"},\"4845\":{\"t\":\"Season spring = Season.SPRING; System.out.println(spring.toString()); //{春:交配季节} System.out.println(spring.getSeasonName()); //春 System.out.println(spring.getSeasonDesc()); //交配季节 \"},\"4846\":{\"h\":\"Ⅱ. enum\",\"a\":\"ii-enum\"},\"4847\":{\"h\":\"1. enum关键字\",\"a\":\"_1-enum关键字\"},\"4848\":{\"t\":\"enum关键字是替代class使用的，用来定义枚举类的。\"},\"4849\":{\"t\":\"即enum也是用来修饰类的，被他修饰类就是枚举类。\"},\"4850\":{\"h\":\"2. enum使用说明\",\"a\":\"_2-enum使用说明\"},\"4851\":{\"t\":\"枚举类默认继承了 java.lang.Enum类，因此不能再继承其他类\"},\"4852\":{\"t\":\"枚举类的构造器只能使用 private 权限修饰符\"},\"4853\":{\"t\":\"枚举类的所有实例必须在枚举类中显式列出(, 分隔 ; 结尾)。列出的实例系统会自动添加 public static final 修饰\"},\"4854\":{\"t\":\"必须在枚举类的第一行声明枚举类对象\"},\"4855\":{\"h\":\"3. 自定义枚举类的步骤\",\"a\":\"_3-自定义枚举类的步骤\"},\"4856\":{\"t\":\"①提供枚举对象：一开始直接定义枚举对象，枚举对象如果有属性，就在括号内加属性。\"},\"4857\":{\"t\":\"OBJNAME1, ... OBJNAME2; //OBJNAME1(\\\"OBJ\\\",\\\"yes\\\"), \"},\"4858\":{\"t\":\"②可选：声明枚举对象的属性（如果有的话）\"},\"4859\":{\"t\":\"③私有化类的构造器,并给对象属性赋值（如果有属性）\"},\"4860\":{\"t\":\"④其他操作：其他方法\"},\"4861\":{\"h\":\"4. Enum的主要方法\",\"a\":\"_4-enum的主要方法\"},\"4862\":{\"t\":\"Enum是所有枚举类的父类，方法直接用即可。\"},\"4863\":{\"t\":\"values：返回枚举类型的对象数组。该方法可以很方便地遍历所有的枚举值。\"},\"4864\":{\"t\":\"valueOf(String str)：可以把一个字符串转为对应的枚举类对象。要求字符串必须是枚举类对象的“名字”。如不是，会有运行时异常：IllegalArgumentException。\"},\"4865\":{\"t\":\"toString()：返回当前枚举类对象常量的名称\"},\"4866\":{\"h\":\"5. 实现接口的枚举类\",\"a\":\"_5-实现接口的枚举类\"},\"4867\":{\"t\":\"统一实现抽象方法：和普通类一样，重写抽象方法，无论哪个枚举对象调用，返回的内容都一样。\"},\"4868\":{\"t\":\"分别实现抽象方法：若需要每个枚举值在调用实现的接口方法呈现出不同的行为方式,则可以让每个枚举值分别来实现该方法，在枚举值后面加{方法名{...}}\"},\"4869\":{\"h\":\"6. enum使用示例\",\"a\":\"_6-enum使用示例\"},\"4870\":{\"h\":\"6.1 定义枚举类，并实现一个接口\",\"a\":\"_6-1-定义枚举类-并实现一个接口\"},\"4871\":{\"t\":\"需求：定义四季，每个季节都有自己的名字\"},\"4872\":{\"t\":\"package Basic;//和正常类一样，也属于某个包 interface show{ //定义一个接口 void showSeason(); } //enum和class一样可以实现接口，并需要重写接口中的方法 public enum Seasons implements show {、 //枚举类的对象必须创建在开头 SPRING(\\\"春天\\\"){ //括号里的参数是构造方法的参数 public void showInfo(){ //在枚举对象中可以单独重写接口中的方法 super.showSeason();//调用类中被重写的showInfo方法 System.out.println(\\\"春天是交配的季节\\\"); } }, //枚举对象间用逗号分割 SUMMER(\\\"夏天\\\"), AUTUMN(\\\"秋天\\\"), WINTER(\\\"春天\\\");//最后一个枚举对象以分号结束 private final String seasonName; //枚举类的private final 属性 //枚举类的私有化构造函数 private Seasons(String seasonName){ this.seasonName = seasonName; System.out.println(seasonName+\\\"来了\\\"); } //和普通类一样，枚举类中也可以定义普通方法 public void info(String s){ System.out.println(s+\\\"真好\\\"); } @Override//重写接口中定义的方法 public void showSeason() { System.out.println(\\\"春夏秋冬\\\"); } } \"},\"4873\":{\"h\":\"6.2 使用枚举类，并测试枚举类的方法\",\"a\":\"_6-2-使用枚举类-并测试枚举类的方法\"},\"4874\":{\"t\":\"//获取一个Seasons对象：SPRING //控制台会输出：春天来了 夏天来了 秋天来了 冬天来了 Seasons spring = Seasons.SPRING; spring.toString(); //输出标识符代表的对象名：SPRING spring.info(\\\"今天\\\");//调用info方法,输出：今天真好 spring.showSeason(); //调用的是Spring重写的showSeason方法 \"},\"4875\":{\"h\":\"4-2. 注解\"},\"4876\":{\"h\":\"Ⅰ. Annotation\",\"a\":\"i-annotation\"},\"4877\":{\"h\":\"1. 介绍\",\"a\":\"_1-介绍\"},\"4878\":{\"t\":\"从JDK5.0 开始, Java 增加了对元数据(MetaData) 的支持, 也就是Annotation(注解)。\"},\"4879\":{\"h\":\"1.1 什么是Annotation\",\"a\":\"_1-1-什么是annotation\"},\"4880\":{\"t\":\"Annotation其实就是代码里的特殊标记, 这些标记可以在编译, 类加载, 运行时被读取, 并执行相应的处理。\"},\"4881\":{\"t\":\"通过使用Annotation, 程序员可以在不改变原有逻辑的情况下, 在源文件中嵌入一些补充信息。 \"},\"4882\":{\"t\":\"代码分析工具、开发工具和部署工具可以通过这些补充信息进行验证或者进行部署。\"},\"4883\":{\"t\":\"Annotation 可以像修饰符一样被使用, 可用于修饰包, 类, 构造器, 方法, 成员变量, 参数, 局部变量, 这些信息被保存在 Annotation\"},\"4884\":{\"h\":\"1.2 注解的用途\",\"a\":\"_1-2-注解的用途\"},\"4885\":{\"t\":\"在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。\"},\"4886\":{\"t\":\"在JavaEE/Android中注解占据了更重要的角色.\"},\"4887\":{\"t\":\"未来的开发模式都是基于注解的，JPA是基于注解的，Spring2.5以上都是基于注解的，Hibernate3.x以后也是基于注解的，现在的Struts2有一部分也是基于注解的了，注解是一种趋势，一定程度上可以说：框架 = 注解 + 反射 + 设计模式。\"},\"4888\":{\"h\":\"2. 注解的使用\",\"a\":\"_2-注解的使用\"},\"4889\":{\"t\":\"使用 Annotation 时要在其前面增加 @ 符号, 并把该 Annotation 当成一个修饰符使用。用于修饰它支持的程序元素。\"},\"4890\":{\"t\":\"①用于文档注释：格式详见：基本语法->文档注释\"},\"4891\":{\"t\":\"②在编译时进行格式检查 \"},\"4892\":{\"t\":\"@Override：限制下面的方法为重写父类中的方法\"},\"4893\":{\"t\":\"@Deprecated：标记所修饰的类、方法等已过时，有更好的选择\"},\"4894\":{\"t\":\"@SuppressWarnings：抑制编译器警告，比如拼写检查\"},\"4895\":{\"t\":\"③减少配置：运行时动态处理，得到注解信息，实现代替配置文件的功能； \"},\"4896\":{\"t\":\"实现替代配置文件功能：常用于JavaWeb\"},\"4897\":{\"t\":\"Servlet3.0提供了注解(annotation),使得不再需要在web.xml文件中进行Servlet的部署。\"},\"4898\":{\"h\":\"3. 注解的分类\",\"a\":\"_3-注解的分类\"},\"4899\":{\"t\":\"JDK中内置了很多注解，我们也可以手动实现Annotation接口来创建自定义注解\"},\"4900\":{\"t\":\"作用在代码的注解 \"},\"4901\":{\"t\":\"@Override：限制下面的方法为重写父类中的方法\"},\"4902\":{\"t\":\"@Deprecated：标记所修饰的类、方法等已过时，有更好的选择\"},\"4903\":{\"t\":\"@SuppressWarnings：抑制编译器警告，比如拼写检查\"},\"4904\":{\"t\":\"@SafeVarargs - Java 7 开始支持，忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告。\"},\"4905\":{\"t\":\"@FunctionalInterface - Java 8 开始支持，标识一个匿名函数或函数式接口。\"},\"4906\":{\"t\":\"元注解 \"},\"4907\":{\"t\":\"@Retention - 标识这个注解怎么保存，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问\"},\"4908\":{\"t\":\"@Documented - 标记这些注解是否包含在用户文档中。\"},\"4909\":{\"t\":\"@Target - 标记这个注解应该是哪种 Java 成员。\"},\"4910\":{\"t\":\"@Inherited - 标记这个注解是继承于哪个注解类(默认 注解并没有继承于任何子类)\"},\"4911\":{\"t\":\"@Repeatable - Java 8 开始支持，标识某注解可以在同一个声明上使用多次。\"},\"4912\":{\"t\":\"自定义注解 \"},\"4913\":{\"t\":\"实现一些自定义的逻辑，比如JUnit框架中有个@Test注解，用来对方法进行测试\"},\"4914\":{\"h\":\"Ⅱ. 自定义注解\",\"a\":\"ii-自定义注解\"},\"4915\":{\"h\":\"1. 语法\",\"a\":\"_1-语法\"},\"4916\":{\"t\":\"@元注解 public @interface 注解名称{ public 配置参数类型 配置参数名() default 默认值; ... //可以有多个属性 } \"},\"4917\":{\"h\":\"2. 示例\",\"a\":\"_2-示例\"},\"4918\":{\"t\":\"public @interface MyAnnotation{ String value() default \\\"hello\\\"; //特殊配置参数 double nums() default 9.99; } \"},\"4919\":{\"h\":\"3. 语法解析\",\"a\":\"_3-语法解析\"},\"4920\":{\"h\":\"3.1 @interface：声明注解\",\"a\":\"_3-1-interface-声明注解\"},\"4921\":{\"t\":\"@interface是注解的关键字与class平级\"},\"4922\":{\"t\":\"注解使用@interface关键字声明，自定义注解自动继承了java.lang.annotation.Annotation 接口。\"},\"4923\":{\"t\":\"注意：它和我们通常的 implemented 实现接口的方法不同。Annotation 接口的实现细节都由编译器完成。通过 @interface 定义注解后，该注解不能继承其他的注解或接口。\"},\"4924\":{\"h\":\"3.2 元注解\",\"a\":\"_3-2-元注解\"},\"4925\":{\"t\":\"用来修饰注解的注解为“元注解”，详见JDK中的元注解\"},\"4926\":{\"h\":\"3.3 配置参数：本质是个常量\",\"a\":\"_3-3-配置参数-本质是个常量\"},\"4927\":{\"t\":\"注解类的成员，或称之为：注解的配置参数，以无参数方法的形式来声明，我们称之为配置参数。\"},\"4928\":{\"t\":\"default：用来声明默认值（初始值）\"},\"4929\":{\"h\":\"3.4 配置参数的类型\",\"a\":\"_3-4-配置参数的类型\"},\"4930\":{\"t\":\"所有基本类型；\"},\"4931\":{\"t\":\"String；\"},\"4932\":{\"t\":\"枚举类型；\"},\"4933\":{\"t\":\"基本类型、String、Class以及枚举的数组\"},\"4934\":{\"h\":\"4. 特殊配置参数\",\"a\":\"_4-特殊配置参数\"},\"4935\":{\"t\":\"没有属性：如果没有成员，那么注解仅起到标识的作用\"},\"4936\":{\"t\":\"只有一个成员：如果注解只有一个成员，就使用value表示。且在使用注解时，value属性可以省略不写。\"},\"4937\":{\"t\":\"有多个成员：如果有多个成员（且有成员没有默认值），那么Value名称是不能呢省略的， \"},\"4938\":{\"t\":\"在使用注解时，所有没有默认值的成员，都必须显式的赋值。\"},\"4939\":{\"h\":\"5. 使用注解\",\"a\":\"_5-使用注解\"},\"4940\":{\"t\":\"语法：@注解类名(配置参数名=\\\"配置参数值\\\")\"},\"4941\":{\"t\":\"注解中定义的成员如果含有配置参数，使用时就必须指明，除非有默认值。如果只有一个参数成员，且名称为value，可以省略“value=”\"},\"4942\":{\"t\":\"使用位置：类上面、方法上面\"},\"4943\":{\"t\":\"@MyAnnotation(value=\\\"hello\\\",nums=12.0) public class Person{ @MyAnnotation(nums=11.0) public void say(){ ... } } \"},\"4944\":{\"h\":\"Ⅲ. 注解结构\",\"a\":\"iii-注解结构\"},\"4945\":{\"h\":\"1. 基本架构\",\"a\":\"_1-基本架构\"},\"4946\":{\"t\":\"4-2-1\"},\"4947\":{\"t\":\"1 个 Annotation 和 1 个 RetentionPolicy 关联。 \"},\"4948\":{\"t\":\"可以理解为：每1个Annotation对象，都会有唯一的RetentionPolicy属性。\"},\"4949\":{\"t\":\"1 个 Annotation 和 1~n 个 ElementType 关联。 \"},\"4950\":{\"t\":\"可以理解为：对于每 1 个 Annotation 对象，可以有若干个 ElementType 属性\"},\"4951\":{\"t\":\"Annotation 有许多实现类，包括：Deprecated, Documented, Inherited, Override 等等。 \"},\"4952\":{\"t\":\"Annotation 的每一个实现类，都 \\\"和 1 个 RetentionPolicy 关联\\\" 并且 \\\" 和 1~n 个 ElementType 关联\\\"。\"},\"4953\":{\"h\":\"2. Annotation组成部分\",\"a\":\"_2-annotation组成部分\"},\"4954\":{\"h\":\"2.1 Annotation.java\",\"a\":\"_2-1-annotation-java\"},\"4955\":{\"t\":\"\\\"每 1 个 Annotation\\\" 都与 \\\"1 个 RetentionPolicy\\\" 关联，并且与 \\\"1～n 个 ElementType\\\" 关联。\"},\"4956\":{\"t\":\"可以通俗的理解为：每 1 个 Annotation 对象，都会有唯一的 RetentionPolicy 属性；至于 ElementType 属性，则有 1~n 个。\"},\"4957\":{\"t\":\"package java.lang.annotation; public interface Annotation{ //Annotation接口 boolean equals(Object obj); int hashCode(); String toString(); Class<? extends Annotation> annotationType(); } \"},\"4958\":{\"h\":\"2.2 ElementType.java\",\"a\":\"_2-2-elementtype-java\"},\"4959\":{\"t\":\"ElementType 是 Enum 枚举类型，它用来指定 Annotation 的类型。\"},\"4960\":{\"t\":\"\\\"每 1 个 Annotation\\\" 都与 \\\"1～n 个 ElementType\\\" 关联。当 Annotation 与某个 ElementType 关联时，就意味着：Annotation有了某种用途。例如，若一个 Annotation 对象是 METHOD 类型，则该 Annotation 只能用来修饰方法。\"},\"4961\":{\"t\":\"package java.lang.annotation; public enum ElementType { TYPE, /* 类、接口（包括注释类型）或枚举声明 */ FIELD, /* 字段声明（包括枚举常量） */ METHOD, /* 方法声明 */ PARAMETER, /* 参数声明 */ CONSTRUCTOR, /* 构造方法声明 */ LOCAL_VARIABLE, /* 局部变量声明 */ ANNOTATION_TYPE, /* 注释类型声明 */ PACKAGE /* 包声明 */ } \"},\"4962\":{\"h\":\"2.3 RetentionPolicy.java\",\"a\":\"_2-3-retentionpolicy-java\"},\"4963\":{\"t\":\"RetentionPolicy 是 Enum 枚举类型，它用来指定 Annotation 的策略。通俗点说，就是不同 RetentionPolicy 类型的 Annotation 的作用域不同。\\\"每 1 个 Annotation\\\" 都与 \\\"1 个 RetentionPolicy\\\" 关联。\"},\"4964\":{\"t\":\"SOURCE：Annotation 仅存在于编译器处理期间，编译器处理完之后，该 Annotation 就没用了。 \"},\"4965\":{\"t\":\"例如：override，当它修饰一个方法的时候，就意味着该方法覆盖父类的方法；并且在编译期间会进行语法检查！编译器处理完后，\\\"@Override\\\" 就没有任何作用了。\"},\"4966\":{\"t\":\"CLASS：编译器将 Annotation 存储于类对应的 .class 文件中，它是 Annotation 的默认行为。\"},\"4967\":{\"t\":\"RUNTIME：编译器将 Annotation 存储于 class 文件中，并且可由JVM读入。\"},\"4968\":{\"t\":\"package java.lang.annotation; public enum RetentionPolicy { SOURCE, /* Annotation信息仅存在于编译器处理期间，编译器处理完之后就没有该Annotation信息了 */ CLASS, /* 编译器将Annotation存储于类对应的.class文件中。默认行为 */ RUNTIME /* 编译器将Annotation存储于class文件中，并且可由JVM读入 */ } \"},\"4969\":{\"h\":\"Ⅳ. 元注解\",\"a\":\"iv-元注解\"},\"4970\":{\"h\":\"1. 元注解说明\",\"a\":\"_1-元注解说明\"},\"4971\":{\"t\":\"JDK 的元注解用于修饰其他 Annotation 定义，JDK5.0提供了4个标准的meta-annotation类型，分别是：\"},\"4972\":{\"t\":\"Retention：指定所修饰的 Annotation 的生命周期。\"},\"4973\":{\"t\":\"Target：标记这个注解应该是哪种 Java 成员。\"},\"4974\":{\"t\":\"Documented：标记这些注解是否包含在用户文档中。\"},\"4975\":{\"t\":\"Inherited：标记这个注解是继承于哪个注解类(默认 注解并没有继承于任何子类)\"},\"4976\":{\"h\":\"2. @Retention\",\"a\":\"_2-retention\"},\"4977\":{\"t\":\"指定所修饰的 Annotation 的生命周期。标识这个注解怎么保存，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问。\"},\"4978\":{\"t\":\"RetentionPolicy 是 Annotation 的策略属性，而 @Retention 的作用，就是指定 Annotation 的策略属性。\"},\"4979\":{\"t\":\"@Retention(RetentionPolicy.RUNTIME) public @interface MyAnnotation{...} \"},\"4980\":{\"h\":\"2.1 使用说明\",\"a\":\"_2-1-使用说明\"},\"4981\":{\"t\":\"使用@Rentention 时必须为该 value 成员变量指定值（枚举类型）\"},\"4982\":{\"h\":\"2.2 Annotation的生命周期（成员变量的值）\",\"a\":\"_2-2-annotation的生命周期-成员变量的值\"},\"4983\":{\"t\":\"RetentionPolicy.SOURCE：在源文件中有效（即源java文件保留），编译器直接丢弃这种策略的注释\"},\"4984\":{\"t\":\"RetentionPolicy.CLASS:在class文件中有效（即class保留） ， 当运行 Java 程序时, JVM不会保留注解。 【默认值】\"},\"4985\":{\"t\":\"RetentionPolicy.RUNTIME:在运行时有效（即运行时保留），当运行 Java 程序时, JVM会保留注释。程序可以通过反射获取注释。\"},\"4986\":{\"h\":\"3. @Target\",\"a\":\"_3-target\"},\"4987\":{\"t\":\"ElementType 是 Annotation 的类型属性。而 @Target 的作用，就是来指定 Annotation 的类型属性。\"},\"4988\":{\"t\":\"用于指定被修饰的 Annotation 能用于修饰哪些程序元素，@Target 也包含一个名为 value 的成员变量，可以取多个枚举值。\"},\"4989\":{\"t\":\"@Target({TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE,TYPE_PARAMETER,TYPE_USE}) public @interface MyAnnotation{...} \"},\"4990\":{\"h\":\"3.1 取值\",\"a\":\"_3-1-取值\"},\"4991\":{\"t\":\"ElementType.TYPE：只能用来标注 类、接口、枚举\"},\"4992\":{\"t\":\"ElementType.FIELD：只能用来标注 字段声明\"},\"4993\":{\"t\":\"ElementType.METHOD：只能用来标注 方法\"},\"4994\":{\"t\":\"ElementType.PARAMETER：只能用来标注 参数\"},\"4995\":{\"t\":\"ElementType.CONSTRUCTOR：只能用来标注 构造方法\"},\"4996\":{\"t\":\"ElementType.LOCAL_VARIABLE：只能用来标注 局部变量\"},\"4997\":{\"h\":\"3.2 注意\",\"a\":\"_3-2-注意\"},\"4998\":{\"t\":\"若没有指定@Target元注解，那么所定义的注解可以用于任何地方。\"},\"4999\":{\"h\":\"4. @Documented【不常用】\",\"a\":\"_4-documented【不常用】\"},\"5000\":{\"t\":\"用于指定被该元 Annotation 修饰的 Annotation类将被javadoc 工具提取成文档。默认情况下，javadoc是不包括注解的。\"},\"5001\":{\"t\":\"@Documented Retention(RetentionPolicy.RUNTIME) public @interface MyAnnotation{...} \"},\"5002\":{\"t\":\"定义为Documented的注解必须设置Retention值为RUNTIME\"},\"5003\":{\"h\":\"5. @Inherited【不常用】\",\"a\":\"_5-inherited【不常用】\"},\"5004\":{\"t\":\"@Inherited public @interface MyAnnotation{...} \"},\"5005\":{\"t\":\"被它修饰的 Annotation 将具有 继承性。如果某个类使用了被@Inherited 修饰的 Annotation, 则其子类将自动具有该注解。\"},\"5006\":{\"t\":\"比如：如果把标有@Inherited注解的自定义的注解标注在类级别上，子类则可以继承父类类级别的注解\"},\"5007\":{\"h\":\"Ⅴ. 注解新特性\",\"a\":\"v-注解新特性\"},\"5008\":{\"t\":\"Java 8对注解处理提供了两点改进：可重复的注解及可用于类型的注解。此外，反射也得到了加强，在Java8中能够得到方法参数的名称。这会简化标注在方法参数上的注解。\"},\"5009\":{\"h\":\"1. 可重复注解\",\"a\":\"_1-可重复注解\"},\"5010\":{\"t\":\"即，同一个注解可以重复用多次。\"},\"5011\":{\"t\":\"@MyAnnotation(value=\\\"hi\\\") @MyAnnotation(value=\\\"abc\\\") class Person{...} \"},\"5012\":{\"h\":\"1.1 1.8之前的重复注解\",\"a\":\"_1-1-1-8之前的重复注解\"},\"5013\":{\"t\":\"在1.8之前，不支持重复注解，同一个注解，多次使用，会报错，编译不通过。\"},\"5014\":{\"t\":\"如果想使用重复注解，就要吧注解的成员变量写成数组的形式\"},\"5015\":{\"t\":\"//注解定义 public @interface MyAnnotations { MyAnnotation[] value(); //定义成数组的形式 } //注解使用 @MyAnnotations({@MyAnnotation(value=\\\"hi\\\"),@MyAnnotation(value=\\\"hi\\\")}) class Person{...} \"},\"5016\":{\"h\":\"1.2 1.8之后的重复注解\",\"a\":\"_1-2-1-8之后的重复注解\"},\"5017\":{\"t\":\"步骤，以MyAnnotation为例：\"},\"5018\":{\"t\":\"创建MyAnnotations注解，如上，定义数组形式的成员变量\"},\"5019\":{\"t\":\"在MyAnnotation注解上使用元注解@Repeatable，值为MyAnnotations.class \"},\"5020\":{\"t\":\"这样这两个注解就被关联起来了。\"},\"5021\":{\"t\":\"注意： MyAnnotation的Target和Retention等元注解与MyAnnotations相同。\"},\"5022\":{\"t\":\"@Repeatable(MyAnnotations.class) //其他元注解要相同 \"},\"5023\":{\"h\":\"2. 可用于类型的注解\",\"a\":\"_2-可用于类型的注解\"},\"5024\":{\"t\":\"JDK1.8之后，关于元注解@Target的参数类型ElementType枚举值多了两个：\"},\"5025\":{\"t\":\"TYPE_PARAMETER\"},\"5026\":{\"t\":\"TYPE_USE\"},\"5027\":{\"t\":\"@Target({...,TYPE_PARAMETER,TYPE_USE});//要加到@Target中 \"},\"5028\":{\"h\":\"2.1 TYPE_PARAMETER\",\"a\":\"_2-1-type-parameter\"},\"5029\":{\"t\":\"表示该注解能写在类型变量的声明语句中（如：泛型声明）\"},\"5030\":{\"t\":\"public class TestTypeDefine<@TypeDefine() U> {...} public static <@MyAnnotation T> void method(T t) {...} \"},\"5031\":{\"h\":\"2.2 TYPE_USE\",\"a\":\"_2-2-type-use\"},\"5032\":{\"t\":\"表示该注解能写在使用类型的任何语句中。\"},\"5033\":{\"t\":\"AnnotationTest<@MyAnnotation String> t = null; int a = (@MyAnnotation int) 2L; \"},\"5034\":{\"h\":\"Ⅵ. 常用注解解析\",\"a\":\"vi-常用注解解析\"},\"5035\":{\"h\":\"1. Deprecated\",\"a\":\"_1-deprecated\"},\"5036\":{\"t\":\"@Deprecated 所标注内容，不再被建议使用。若某个方法被 @Deprecated 标注，则该方法不再被建议使用。如果有开发人员试图使用或重写被 @Deprecated 标示的方法，编译器会给相应的提示信息。\"},\"5037\":{\"t\":\"@Documented @Retention(RetentionPolicy.RUNTIME) public @interface Deprecated { } \"},\"5038\":{\"h\":\"2. @Inherited（元注解之一）\",\"a\":\"_2-inherited-元注解之一\"},\"5039\":{\"t\":\"@Inherited 的含义是，它所标注的Annotation将具有继承性。\"},\"5040\":{\"t\":\"@Documented @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.ANNOTATION_TYPE) public @interface Inherited { } \"},\"5041\":{\"h\":\"3. @SuppressWarnings\",\"a\":\"_3-suppresswarnings\"},\"5042\":{\"t\":\"SuppressWarnings 的作用是，让编译器对\\\"它所标注的内容\\\"的某些警告保持静默。\"},\"5043\":{\"t\":\"@Target({TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE}) @Retention(RetentionPolicy.SOURCE) public @interface SuppressWarnings { String[] value(); } \"},\"5044\":{\"h\":\"3.1 String[] value();\",\"a\":\"_3-1-string-value\"},\"5045\":{\"t\":\"SuppressWarnings 能指定参数，String类型的数组\"},\"5046\":{\"h\":\"3.2 使用举例\",\"a\":\"_3-2-使用举例\"},\"5047\":{\"t\":\"如下：\\\"SuppressWarnings 不再建议使用警告\\\"和\\\"未检查的转换时的警告\\\"保持沉默。\"},\"5048\":{\"t\":\"@SuppressWarnings(value={\\\"deprecation\\\", \\\"unchecked\\\"})\\\" \"},\"5049\":{\"h\":\"3.3 取值\",\"a\":\"_3-3-取值\"},\"5050\":{\"t\":\"deprecation：使用了不赞成使用的类或方法时的警告\"},\"5051\":{\"t\":\"unchecked：执行了未检查的转换时的警告，例如当使用集合时没有用泛型 (Generics) 来指定集合保存的类型。\"},\"5052\":{\"t\":\"fallthrough：当 Switch 程序块直接通往下一种情况而没有 Break 时的警告。\"},\"5053\":{\"t\":\"path：在类路径、源文件路径等中有不存在的路径时的警告。\"},\"5054\":{\"t\":\"serial：当在可序列化的类上缺少 serialVersionUID 定义时的警告。\"},\"5055\":{\"t\":\"finally：任何 finally 子句不能正常完成时的警告。\"},\"5056\":{\"t\":\"all：关于以上所有情况的警告。\"},\"5057\":{\"h\":\"Ⅶ. 反射获取注解信息\",\"a\":\"vii-反射获取注解信息\"},\"5058\":{\"t\":\"在反射的 Class, Method, Field 等函数中，有许多于 Annotation 相关的接口。这也意味着，我们可以在反射中解析并使用 Annotation。\"},\"5059\":{\"h\":\"1. 使用示例\",\"a\":\"_1-使用示例\"},\"5060\":{\"t\":\"import java.lang.annotation.Annotation; import java.lang.annotation.Target; import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Inherited; import java.lang.reflect.Method; /** * Annotation在反射函数中的使用示例 */ @Retention(RetentionPolicy.RUNTIME) @interface MyAnnotation { String[] value() default \\\"unknown\\\"; } /** * Person类。它会使用MyAnnotation注解。 */ class Person { /** * empty()方法同时被 \\\"@Deprecated\\\" 和 \\\"@MyAnnotation(value={\\\"a\\\",\\\"b\\\"})\\\"所标注 * (01) @Deprecated，意味着empty()方法，不再被建议使用 * (02) @MyAnnotation, 意味着empty() 方法对应的MyAnnotation的value值 是默认值\\\"unknown */ @MyAnnotation @Deprecated public void empty(){ System.out.println(\\\"\\\\nempty\\\"); } /** * sombody() 被 @MyAnnotation(value={\\\"girl\\\",\\\"boy\\\"}) 所标注， * @MyAnnotation(value={\\\"girl\\\",\\\"boy\\\"}), 意味着MyAnnotation的value值 是{\\\"girl\\\",\\\"boy\\\"} */ @MyAnnotation(value={\\\"girl\\\",\\\"boy\\\"}) public void somebody(String name, int age){ System.out.println(\\\"\\\\nsomebody: \\\"+name+\\\", \\\"+age); } } public class AnnotationTest { public static void main(String[] args) throws Exception { // 新建Person Person person = new Person(); // 获取Person的Class实例 Class<Person> c = Person.class; // 获取 somebody() 方法的Method实例 Method mSomebody = c.getMethod(\\\"somebody\\\", new Class[]{String.class, int.class}); // 执行该方法 mSomebody.invoke(person, new Object[]{\\\"lily\\\", 18}); iteratorAnnotations(mSomebody); // 获取 somebody() 方法的Method实例 Method mEmpty = c.getMethod(\\\"empty\\\", new Class[]{}); // 执行该方法 mEmpty.invoke(person, new Object[]{}); iteratorAnnotations(mEmpty); } public static void iteratorAnnotations(Method method) { // 判断 somebody() 方法是否包含MyAnnotation注解 if(method.isAnnotationPresent(MyAnnotation.class)){ // 获取该方法的MyAnnotation注解实例 MyAnnotation myAnnotation = method.getAnnotation(MyAnnotation.class); // 获取 myAnnotation的值，并打印出来 String[] values = myAnnotation.value(); for (String str:values) System.out.printf(str+\\\", \\\"); System.out.println(); } // 获取方法上的所有注解，并打印出来 Annotation[] annotations = method.getAnnotations(); for(Annotation annotation : annotations){ System.out.println(annotation); } } } \"},\"5061\":{\"h\":\"5-1. 概念\"},\"5062\":{\"h\":\"Ⅰ. 基本概念\",\"a\":\"i-基本概念\"},\"5063\":{\"h\":\"1. Program：程序的概念\",\"a\":\"_1-program-程序的概念\"},\"5064\":{\"t\":\"程序(program)是为完成特定任务、用某种语言编写的一组指令的集合。即指一段静态的代码，静态对象。\"},\"5065\":{\"t\":\"程序和软件的区别\"},\"5066\":{\"t\":\"软件是为了完成特定的功能，解决特定的问题而用计算机语言编写的命令序列集合，可以理解为应用程序的集合。而应用程序是软件的一个组成部分，它是软件的必要元素。简单来说，“软件=程序+文档=数据结构+算法+文档”。\"},\"5067\":{\"t\":\"程序和软件的区别是，软件是为了完成特定的功能，解决特定的问题而用计算机语言编写的命令序列集合，可以理解为应用程序的集合。而应用程序是软件的一个组成部分，它是软件的必要元素。\"},\"5068\":{\"h\":\"2. Process：进程的概念\",\"a\":\"_2-process-进程的概念\"},\"5069\":{\"t\":\"进程(process)是程序的一次执行过程，或是正在运行的一个程序。是一个动态的过程：有它自身的产生、存在和消亡的过程。——生命周期。\"},\"5070\":{\"t\":\"程序是静态的，进程是动态的；\"},\"5071\":{\"t\":\"进程作为资源分配的单位，系统在运行时会为每个进程分配不同的内存区域\"},\"5072\":{\"t\":\"每个进程之间是独立的，每个进程均运行在其专用的且受保护的内存（即进程之间不方便通信）\"},\"5073\":{\"h\":\"2.1 程序与进程的区别\",\"a\":\"_2-1-程序与进程的区别\"},\"5074\":{\"t\":\"程序是静态的，进程是动态的：程序是存储在某种介质上的二进制代码，进程对应了程序的执行过程，系统不需要为一个不执行的程序创建进程，一旦进程被创建，就处于不断变化的动态过程中，对应了一个不断变化的上下文环境。\"},\"5075\":{\"h\":\"2.2 程序与进程的联系\",\"a\":\"_2-2-程序与进程的联系\"},\"5076\":{\"t\":\"一个程序可以对应多个进程\"},\"5077\":{\"h\":\"3. Thread：线程的概念\",\"a\":\"_3-thread-线程的概念\"},\"5078\":{\"t\":\"进程可进一步细化为线程，是一个程序内部的一条执行路径。若一个进程同一时间 并行执行多个线程，就是支持多线程的;\"},\"5079\":{\"t\":\"线程作为调度和执行的单位，每个线程拥有独立的运行栈和程序计数器(pc)，线程切换的开销小;\"},\"5080\":{\"t\":\"一个进程中的多个线程共享相同的内存单元/内存地址空间->它们从同一堆中分配对象，可以访问相同的变量和对象。这就使得线程间通信更简便、高效。但多个线程操作共享的系统资源可能就会带来安全的隐患。\"},\"5081\":{\"t\":\"程序启动会默认开启一条线程，这条线程被称为主线程或 UI 线程\"},\"5082\":{\"h\":\"4. 进程与线程\",\"a\":\"_4-进程与线程\"},\"5083\":{\"t\":\"一款软件具有某些功能，任一一个功能的执行就是一个进程（同一功能多次开启也算加了一个进程）。每个进程需要多个任务协同完成，可以创建多个线程来执行这些不同的任务。\"},\"5084\":{\"t\":\"5-1-1\"},\"5085\":{\"t\":\"资源拥有：同一进程内的线程共享本进程的资源如内存、I/O、cpu等，但是进程之间的资源是独立的。\"},\"5086\":{\"t\":\"一个进程崩溃后，在保护模式下不会对其他进程产生影响，但是一个线程崩溃整个进程都死掉。所以多进程要比多线程健壮。\"},\"5087\":{\"t\":\"一个进程至少有一个线程(主)。是进程内的一个独立执行单元\"},\"5088\":{\"t\":\"程序是在某个进程中的某个线程执行的。\"},\"5089\":{\"h\":\"5. 单核CPU和多核CPU\",\"a\":\"_5-单核cpu和多核cpu\"},\"5090\":{\"t\":\"单核CPU，其实是一种假的多线程，因为在一个时间单元内，也只能执行一个线程的任务。但是因为CPU时间单元特别短（快速在各个线程间切换），因此感觉不出来。\"},\"5091\":{\"t\":\"如果是多核的话，才能更好的发挥多线程的效率。（现在的服务器都是多核的）。\"},\"5092\":{\"t\":\"一个Java应用程序java.exe，其实至少有三个线程：main()主线程，gc()垃圾回收线程，异常处理线程。当然如果发生异常，会影响主线程。\"},\"5093\":{\"h\":\"6. 并行与并发\",\"a\":\"_6-并行与并发\"},\"5094\":{\"t\":\"并行：多个CPU同时执行多个任务。比如：多个人同时做不同的事。\"},\"5095\":{\"t\":\"并发：一个CPU(采用时间片)同时执行多个任务。比如：秒杀、多个人做同一件事。\"},\"5096\":{\"h\":\"Ⅱ. 多线程的意义\",\"a\":\"ii-多线程的意义\"},\"5097\":{\"h\":\"背景\",\"a\":\"背景\"},\"5098\":{\"t\":\"以单核CPU为例，只使用单个线程先后完成多个任务（调用多个方法），肯定比用多个线程来完成用的时间更短（省去了切换线程），为何仍需多线程呢？\"},\"5099\":{\"t\":\"例如：我们复制文件（程序：文件复制开启），复制完一个，再复制下一个是要比同时复制两个文件要快的（单核CPU省去了切换）。假如是4核CPU，只能同时复制4个文件，第5个文件就需要排队了。拿还要多线程干什么。\"},\"5100\":{\"h\":\"1. 多线程程序的优点\",\"a\":\"_1-多线程程序的优点\"},\"5101\":{\"t\":\"提高应用程序的响应。对图形化界面更有意义，可增强用户体验。 \"},\"5102\":{\"t\":\"用户同时在电脑手机上干多件事\"},\"5103\":{\"t\":\"提高计算机系统CPU的利用率：CPU的切换效率很高，很多时候无法利用完CPU的性能\"},\"5104\":{\"t\":\"改善程序结构：将既长又复杂的进程分为多个线程，独立运行，利于理解和修改\"},\"5105\":{\"h\":\"2. 何时需要多线程\",\"a\":\"_2-何时需要多线程\"},\"5106\":{\"t\":\"程序需要同时执行两个或多个任务。\"},\"5107\":{\"t\":\"程序需要实现一些需要等待的任务时 \"},\"5108\":{\"t\":\"比如：下滑显示新的评论，需要三个功能：加载评论内容、加载头像、页面上滑，如果用单线程做，就会按顺序加载这些内容，如果图片没加载出来就无法继续向上滑动，软件就会显得很卡。多线程，就可以解决该问题。滑动和加载图片分开。\"},\"5109\":{\"t\":\"需要一些后台运行的程序时：比如Java需要后台一直运行GC垃圾回收。\"},\"5110\":{\"h\":\"Ⅲ. 扩展：内存\",\"a\":\"iii-扩展-内存\"},\"5111\":{\"h\":\"1. 数据\",\"a\":\"_1-数据\"},\"5112\":{\"t\":\"存在于内存中可读，可操纵的东西，一切皆数据，函数也是数据。\"},\"5113\":{\"t\":\"内存存在的意义，就是对数据进行操作，（硬盘才是储存数据的）。\"},\"5114\":{\"h\":\"2. 内存\",\"a\":\"_2-内存\"},\"5115\":{\"h\":\"2.1 内存条的空间\",\"a\":\"_2-1-内存条的空间\"},\"5116\":{\"t\":\"内存条通电后产生的存储空间(临时的)就是内存，内存是临时性的储存，是有生命周期的。\"},\"5117\":{\"h\":\"2.2 内存的生命周期\",\"a\":\"_2-2-内存的生命周期\"},\"5118\":{\"t\":\"内存条==》通电==》产生内存空间==》储存数据==》断电==》内存空间和数据都消失\"},\"5119\":{\"h\":\"2.3 内存储存的数据类型\",\"a\":\"_2-3-内存储存的数据类型\"},\"5120\":{\"t\":\"数据：直接储存数据【普通类型】\"},\"5121\":{\"t\":\"内存地址：储存其他内存块的地址【引用类型】。\"},\"5122\":{\"h\":\"2.4 内存空间的基本分类\",\"a\":\"_2-4-内存空间的基本分类\"},\"5123\":{\"t\":\"栈：全局变量和局部变量的值和对象的地址储存在这里。\"},\"5124\":{\"t\":\"堆：对象储存在这里。\"},\"5125\":{\"h\":\"3. 变量\",\"a\":\"_3-变量\"},\"5126\":{\"t\":\"值的标识符，该标识符是可变的，就称为变量，一个变量对应一小块内存，他的值保存在内存中，即内存中的数据==变量的值\"},\"5127\":{\"h\":\"4. 变量名（标识符）\",\"a\":\"_4-变量名-标识符\"},\"5128\":{\"t\":\"内存中储存的是变量的值，变量的名是不会储存的，变量的名可以理解为内存的地址标识。\"},\"5129\":{\"t\":\"变量名是给我们程序员操作内存来使用的。比如我们定义了一个全局的int a;那么编译器都为我们做了什么呢？它会为程序预留4个字节的空间（假设在32位平台），并把我们的变量名“a”保存进符号表，并用这个符号表的索引对应实际的空间。这是写编译器需要做的，我们需要建立符号表。变量名编译后，变成一个内存地址，这个内存地址一般是直接存在于代码段中\"},\"5130\":{\"h\":\"5. 内存、数据、变量间的关系\",\"a\":\"_5-内存、数据、变量间的关系\"},\"5131\":{\"t\":\"内存是容器, 用来存储不同数据；\"},\"5132\":{\"t\":\"变量是内存的标识, 通过变量我们可以操作(读/写)内存中的数据；\"},\"5133\":{\"h\":\"6. 垃圾回收\",\"a\":\"_6-垃圾回收\"},\"5134\":{\"t\":\"当一个对象，没有任何的变量或属性对它进行引用，此时我们将永远无法操作该对象，此时这种对象就是一个垃圾。这种对象过多，会占用大量的内存空间，导致程序运行过慢，所以需要进行清理。\"},\"5135\":{\"h\":\"7. 内存溢出和泄露\",\"a\":\"_7-内存溢出和泄露\"},\"5136\":{\"t\":\"溢出：一种程序运行出现的错误，当程序运行需要的内存超过了剩余的内存时, 就出抛出内存溢出的错误。\"},\"5137\":{\"t\":\"泄露：占用的内存没有及时释放，内存泄露积累多了就容易导致内存溢出。\"},\"5138\":{\"h\":\"5-2. 使用多线程\"},\"5139\":{\"h\":\"Ⅰ. Java的多线程\",\"a\":\"i-java的多线程\"},\"5140\":{\"h\":\"1. 概述\",\"a\":\"_1-概述\"},\"5141\":{\"t\":\"在java里，一条线顺序执行叫一个线程，并列执行的才是多线程。\"},\"5142\":{\"h\":\"2. API中创建线程的方式\",\"a\":\"_2-api中创建线程的方式\"},\"5143\":{\"t\":\"JDK1.5之前创建新执行线程有两种方法： \"},\"5144\":{\"t\":\"①继承Thread类的方式\"},\"5145\":{\"t\":\"②实现Runnable接口的方式\"},\"5146\":{\"t\":\"在JDK5.0后新增了一种 \"},\"5147\":{\"t\":\"③实现Callable接口\"},\"5148\":{\"t\":\"④线程池（常用）\"},\"5149\":{\"h\":\"3. 线程的分类\",\"a\":\"_3-线程的分类\"},\"5150\":{\"t\":\"Java中的线程分为两类：一种是 守护线程，一种是 用户线程。\"},\"5151\":{\"t\":\"它们在几乎每个方面都是相同的，唯一的区别是判断JVM何时离开。\"},\"5152\":{\"t\":\"护线程是用来服务用户线程的，通过在start()方法前调用thread.setDaemon(true)可以把一个用户线程变成一个守护线程。\"},\"5153\":{\"t\":\"Java垃圾回收就是一个典型的守护线程。\"},\"5154\":{\"t\":\"若JVM中都是守护线程，当前JVM将退出。\"},\"5155\":{\"h\":\"Ⅱ. 继承Thred类\",\"a\":\"ii-继承thred类\"},\"5156\":{\"t\":\"创建多线程的方式之一：继承方式，通过继承Thread类\"},\"5157\":{\"h\":\"说明\",\"a\":\"说明\"},\"5158\":{\"t\":\"Java语言的JVM可以通过java.lang.Thread类来实现多线程。\"},\"5159\":{\"t\":\"main线程：java的入口是main方法，main方法就是java程序的主线程，又叫main线程\"},\"5160\":{\"t\":\"子线程：我们用Thread类创建的其他线程，统称为子线程。\"},\"5161\":{\"h\":\"1. Thread类介绍\",\"a\":\"_1-thread类介绍\"},\"5162\":{\"h\":\"1.1 Thread类：多线程类\",\"a\":\"_1-1-thread类-多线程类\"},\"5163\":{\"t\":\"Thread类，用来创建和执行多线程。\"},\"5164\":{\"t\":\"我们通过实例化Thread类的子类对象来创建多线程。\"},\"5165\":{\"h\":\"1.2 构造器\",\"a\":\"_1-2-构造器\"},\"5166\":{\"t\":\"前两个构造器是继承Thread类创建多线程用的，后两个构造器是利用Runable接口创建多线程用的。\"},\"5167\":{\"t\":\"Thread() ：创建新的Thread对象\"},\"5168\":{\"t\":\"Thread(String threadname)：创建线程并指定线程实例名\"},\"5169\":{\"t\":\"Thread(Runnable target) ：指定创建线程的目标对象，它实现了Runnable接口中的run方法\"},\"5170\":{\"t\":\"Thread(Runnable target, String name) ：创建新的Thread对象\"},\"5171\":{\"h\":\"1.3 run方法：线程体\",\"a\":\"_1-3-run方法-线程体\"},\"5172\":{\"t\":\"run方法是该线程操作的入口，需要将此线程的操作声明在run方法中。\"},\"5173\":{\"t\":\"每个线程都是通过某个特定Thread对象的run()方法来完成操作的，经常把run()方法的主体称为线程体\"},\"5174\":{\"h\":\"1.4 start方法：开启线程\",\"a\":\"_1-4-start方法-开启线程\"},\"5175\":{\"t\":\"通过Thread类的对象调用该方法，用来启动线程。该方法会启动对象对应的线程，并调用对象中的run方法。\"},\"5176\":{\"t\":\"注意：通过该Thread对象的start()方法来启动这个线程，而非直接调用run()\"},\"5177\":{\"h\":\"2. 创建多线程的步骤\",\"a\":\"_2-创建多线程的步骤\"},\"5178\":{\"t\":\"5-2-1\"},\"5179\":{\"t\":\"创建一个继承于Thread类的子类\"},\"5180\":{\"t\":\"子类重写Thread类的run() --> 将此线程执行的操作声明在run()中\"},\"5181\":{\"t\":\"创建Thread类的子类的对象，即创建线程对象\"},\"5182\":{\"t\":\"通过此对象调用start()：启动创建的线程，自动调用run方法\"},\"5183\":{\"h\":\"3. 创建多线程示例\",\"a\":\"_3-创建多线程示例\"},\"5184\":{\"t\":\"要求：使用三个线程，每个线程都遍历1~100间的偶数。\"},\"5185\":{\"t\":\"1.//创建一个继承于Thread类的子类 class MyThread extends Thread{ 2.//重写Thread类的run方法：在里面放入我们要执行的代码 public void run() { for (int i = 0; i<100;i++){ if(i%2 == 0){ System.out.println(Thread.currentThread().getName()+\\\"***\\\"+i); } } } } public class ThreadTest { public static void main(String[] args) { 3.//创建Thread类的子类的对象(创建子线程对象) MyThread m1 = new MyThread(); 4.//调用start方法：启动当前线程;调用当前线程的run(); m1.start(); //m1.start(); //m1对象不能重复调用start，将抛出异常 // m1.run(); //没有开启线程，只是在main线程调用了一个普通的run方法 //这个是main线程的遍历代码 for (int i = 0; i<100;i++){ if(i%2 == 0){ System.out.println(Thread.currentThread().getName()+\\\"***\\\"+i); } } //再次创建一个Thread类的子类对象(再次创建一个子线程对象)，并调用start MyThread m2 = new MyThread(); m2.start(); } } \"},\"5186\":{\"h\":\"3.1 备注\",\"a\":\"_3-1-备注\"},\"5187\":{\"t\":\"Thread.currentThread().getName()用来返回当前线程的实例名。\"},\"5188\":{\"t\":\"主线程默认名是 main。\"},\"5189\":{\"t\":\"子线程默认名是 Thread-0（0~N）\"},\"5190\":{\"h\":\"3.2 执行结果\",\"a\":\"_3-2-执行结果\"},\"5191\":{\"t\":\"main***i、Thread***i、Thread***i 交替遍历，没有固定的先后顺序。\"},\"5192\":{\"t\":\"这说明，这三个遍历是并列的，有三个线程在执行遍历代码。\"},\"5193\":{\"t\":\"5-2-2\"},\"5194\":{\"h\":\"4. 注意事项\",\"a\":\"_4-注意事项\"},\"5195\":{\"h\":\"4.1 不能通过调用run开始子线程\",\"a\":\"_4-1-不能通过调用run开始子线程\"},\"5196\":{\"t\":\"通过直接调用run()不能开启子线程，只是普通的在main线程中调用一个方法。 开启子线程必须使用start()，让start方法去调用run。\"},\"5197\":{\"t\":\"run()方法由JVM调用，什么时候调用，执行的过程控制都有操作系统的CPU 调度决定。\"},\"5198\":{\"h\":\"4.2 同一个Thread类的对象不能重复调用start\",\"a\":\"_4-2-同一个thread类的对象不能重复调用start\"},\"5199\":{\"t\":\"一个线程对象只能调用一次start()方法启动，开启一个子线程。\"},\"5200\":{\"t\":\"同一个线程对象重复调用start方法会抛出异常（IllegalThreadStateException异常）。\"},\"5201\":{\"t\":\"如果想再次开启一个线程，需要再次创建一个线程对象（这些对象可以属于同一个Thread类的子类）。\"},\"5202\":{\"h\":\"Ⅲ. Thread常用方法\",\"a\":\"iii-thread常用方法\"},\"5203\":{\"h\":\"方法列表\",\"a\":\"方法列表\"},\"5204\":{\"t\":\"详见Thread的API\"},\"5205\":{\"t\":\"start()：启动当前线程；调用当前线程的run()\"},\"5206\":{\"t\":\"run()：通常需要重写Thread类中的此方法，将创建的线程要执行的操作声明在此方法中。\"},\"5207\":{\"t\":\"Thread.curretnThread()：【static】返回执行当前代码的线程 \"},\"5208\":{\"t\":\"在Thread子类中就是this，通常用于主线程和Runnable实现类\"},\"5209\":{\"t\":\"getName()：获取当前线程的名字（需要先获取执行当前代码的线程）\"},\"5210\":{\"t\":\"setName()：设置当前线程的名字（需要先获取执行当前代码的线程）\"},\"5211\":{\"t\":\"yield():【static】释放当前cpu的执行权\"},\"5212\":{\"t\":\"join():在线程a中调用线程b的join(),此时线程a就进入阻塞状态，直到线程b完全执行完以后，线程a才结束阻塞状态。\"},\"5213\":{\"t\":\"sleep(long millitime)：【static】让当前线程“睡眠”指定的millitime毫秒。在指定的millitime毫秒时间内，当前线程是阻塞状态。\"},\"5214\":{\"t\":\"isAlive():判断当前线程是否存活\"},\"5215\":{\"t\":\"stop():已过时。当执行此方法时，强制结束当前线程。\"},\"5216\":{\"h\":\"1. 线程名\",\"a\":\"_1-线程名\"},\"5217\":{\"t\":\"每个线程都有自己的名字，线程名是个静态属性，可以使用get、set方法访问，也可以使用构造函数初始化。\"},\"5218\":{\"t\":\"默认的线程名为：主线程：main；子线程：Thread-0（0~n）\"},\"5219\":{\"t\":\"public class ThreadMethodTest { public static void main(String[] args) { HelloThread ht1 = new HelloThread(\\\"线程1\\\");//可以通过构造方法设置name ht1.setName(\\\"work one\\\"); //要在start前设置Name ht1.start(); //通过方法获取主线程，并设置线程名 Thread.currentThread().setName(\\\"主线程\\\"); } } class HelloThread extends Thread{ public HelloThread(String s){ super(s); } @Override public void run() { //获取当前线程，并获取线程名 System.out.println(Thread.currentThread().getName()+\\\":HelloThread\\\"); } } \"},\"5220\":{\"h\":\"2. 线程执行控制\",\"a\":\"_2-线程执行控制\"},\"5221\":{\"t\":\"public class ThreadMethodTest { public static void main(String[] args) { HelloThread ht1 = new HelloThread(); ht1.start(); for(int i = 0;i<10;i++){ System.out.println(i); if(i == 5){ try { ht1.join(); //当i==5时，先执行ht1进程，该进程执行完，再接着执行main进程 } catch (InterruptedException e) { e.printStackTrace(); } } } //判断main进程是否还在激活状态：true System.out.println(Thread.currentThread().isAlive()); } } class HelloThread extends Thread{ @Override public void run() { for(int i = 0; i < 100; i++){ System.out.println(i); if(i == 10){ Thread.yield(); //当i==10时，释放本次的执行权 } if(i == 20){ try { Thread.sleep(2000); //当i==20时，阻塞当前进程2秒钟 } catch (InterruptedException e) { e.printStackTrace(); } } } } } \"},\"5222\":{\"t\":\"yield：释放当次执行权 \"},\"5223\":{\"t\":\"CPU是来回切换执行线程的，执行该方法，会释放本次获得的执行权，然后重新加入CPU分配的队列。若队列中没有同优先级的线程，忽略此方法\"},\"5224\":{\"t\":\"join：线程插队 \"},\"5225\":{\"t\":\"在线程a中调用线程b的join(),此时线程a就进入阻塞状态，优先执行线程b，直到线程b执行完，线程a，才重新进入CPU分配线程的队列。\"},\"5226\":{\"t\":\"该方法会抛异常，需要try...catch\"},\"5227\":{\"t\":\"sleep：睡眠线程(指定时间:毫秒) \"},\"5228\":{\"t\":\"让当前线程睡眠（暂停、阻塞）指定的时间。然后再重新加入CPU分配的队列。\"},\"5229\":{\"t\":\"该方法会抛InterruptedException异常，需要try...catch\"},\"5230\":{\"t\":\"stop：结束当前线程；【API明确，该方法已不推荐使用】\"},\"5231\":{\"t\":\"isAlive：判断当前线程是否存活（执行完就死了）\"},\"5232\":{\"h\":\"Ⅳ. 线程的调度\",\"a\":\"iv-线程的调度\"},\"5233\":{\"h\":\"1. CPU的调度策略\",\"a\":\"_1-cpu的调度策略\"},\"5234\":{\"h\":\"1.1 时间片\",\"a\":\"_1-1-时间片\"},\"5235\":{\"t\":\"5-2-3\"},\"5236\":{\"h\":\"1.2 抢占式\",\"a\":\"_1-2-抢占式\"},\"5237\":{\"t\":\"高优先级的线程抢占CPU\"},\"5238\":{\"h\":\"2. Java的调度方法\",\"a\":\"_2-java的调度方法\"},\"5239\":{\"t\":\"同优先级线程组成先进先出队列（先到先服务），使用时间片策略；对高优先级，使用优先调度的抢占式策略\"},\"5240\":{\"h\":\"3. 线程的优先级\",\"a\":\"_3-线程的优先级\"},\"5241\":{\"t\":\"优先级为1~10。\"},\"5242\":{\"t\":\"MAX_PRIORITY：10\"},\"5243\":{\"t\":\"MIN _PRIORITY：1\"},\"5244\":{\"t\":\"NORM_PRIORITY：5 -->默认优先级\"},\"5245\":{\"t\":\"高优先级的线程要抢占低优先级线程cpu的执行权。但是只是从概率上讲，高优先级的线程高概率的情况下被执行。并不意味着只有当高优先级的线程执行完以后，低优先级的线程才执行。\"},\"5246\":{\"t\":\"查看线程的优先级 getPriority() ：返回线程优先值，返回的是int\"},\"5247\":{\"t\":\"修改线程的优先级 setPriority(int newPriority) ：改变线程的优先级，参数是常量或1~10\"},\"5248\":{\"h\":\"4. 注意事项\",\"a\":\"_4-注意事项-1\"},\"5249\":{\"t\":\"线程创建时继承父线程的优先级\"},\"5250\":{\"t\":\"低优先级只是获得调度的概率低，并非一定是在高优先级线程之后才被调用\"},\"5251\":{\"h\":\"5. 线程调度示例\",\"a\":\"_5-线程调度示例\"},\"5252\":{\"t\":\"效果：两个线程无序交替执行，高优先级的线程被优先执行。\"},\"5253\":{\"t\":\"public class ThreadMethodTest { public static void main(String[] args) { HelloThread ht1 = new HelloThread(); //获得线程的优先级，int System.out.println(\\\"线程的默认优先级为：\\\"+ht1.getPriority());//5 //设置线程的优先级 ht1.setPriority(10); System.out.println(\\\"线程的优先级被修改为：\\\"+ht1.getPriority());//10 ht1.start(); for(int i = 0;i<50;i++){ System.out.println(Thread.currentThread().getName()+\\\"***\\\"+i); } } } class HelloThread extends Thread{ @Override public void run() { for(int i = 0; i < 50; i++){ System.out.println(getName()+\\\"***\\\"+i); } } } \"},\"5254\":{\"h\":\"Ⅴ. Runnable接口\",\"a\":\"v-runnable接口\"},\"5255\":{\"t\":\"Runnable接口是创建多线程的方式之一。\"},\"5256\":{\"h\":\"1. Runnable接口创建多线程的步骤\",\"a\":\"_1-runnable接口创建多线程的步骤\"},\"5257\":{\"t\":\"创建一个实现了Runnable接口的类\"},\"5258\":{\"t\":\"实现类去实现Runnable中的抽象方法：run()\"},\"5259\":{\"t\":\"创建实现类的对象\"},\"5260\":{\"t\":\"将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象\"},\"5261\":{\"t\":\"通过Thread类的对象调用start()：开启线程，并调用重写的run方法\"},\"5262\":{\"h\":\"2. 示例\",\"a\":\"_2-示例\"},\"5263\":{\"t\":\"public class RunnableTest { public static void main(String[] args) { 3.//创建实现类的对象 MyRunnable m1 = new MyRunnable(); 4.//将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象 Thread t1 = new Thread(m1); Thread t2 = new Thread(m1); Thread t3 = new Thread(m1); 5.//通过Thread类的对象调用start() t1.start(); t2.start(); t3.start(); } } 1.//创建一个实现了Runnable接口的类：MyRunnable class MyRunnable implements Runnable{ private int num = 100; @Override 2.//实现类去实现Runnable中的抽象方法：run() public void run() { while(true){ //因为循环条件是成员变量，所以要这样写 if(num>0){ System.out.println(Thread.currentThread().getName()+\\\"***\\\"+num); num--; }else{ break; } } } } \"},\"5264\":{\"t\":\"这里通过将Runnable接口的实例作为参数传入Thread类中，再通过new Thread类来创建线程的。 开启线程还是需要掉用Thread类的start方法\"},\"5265\":{\"t\":\"执行结果：三个线程交替输出100->1，共享一个num变量\"},\"5266\":{\"h\":\"2.1\",\"a\":\"_2-1\"},\"5267\":{\"t\":\"疑问：MyRunnable类没有继承，也没有重写Thread类的run方法，为什么Thread类调用start()时会执行MyRunnable类的run方法。\"},\"5268\":{\"t\":\"解答：new Thread类时，将Runnable接口的实例(MyRunnable类的实例)传递了进去，Thread类有一个构造方法是接收 Runnable类型的变量的，该构造方法将Runnble接口实现类的实例赋值给了Target变量，当调用Thread类的run方法时，会判断Target变量是否有值，就值就调用Target的run方法，因此调用的是Runnable的run方法，由于多态的缘故，最终被调用的就是MyRunnable类的run方法了。\"},\"5269\":{\"h\":\"2.2 创建多个线程\",\"a\":\"_2-2-创建多个线程\"},\"5270\":{\"t\":\"如上；创建新的线程，不需要重复new Runnable实现类的实例，只需new Thread类就能创建一个新的线程。\"},\"5271\":{\"h\":\"2.3 共享成员变量\",\"a\":\"_2-3-共享成员变量\"},\"5272\":{\"t\":\"由于使用Runnable接口创建多个线程时，每个线程使用的都是同一个 Runnable的实现类实例。所以这些线程的run方法操作的是同一个对象的成员变量，即共享成员变量，每个线程对成员变量的修改都会影响到其他线程，不需要额外加static。\"},\"5273\":{\"h\":\"3. Thread和Runnable 两种方式的比较\",\"a\":\"_3-thread和runnable-两种方式的比较\"},\"5274\":{\"h\":\"3.1 开发中的选择\",\"a\":\"_3-1-开发中的选择\"},\"5275\":{\"t\":\"开发中：优先选择：实现Runnable接口的方式，原因如下：\"},\"5276\":{\"t\":\"实现的方式没有类的单继承性的局限性\"},\"5277\":{\"t\":\"实现的方式更适合来处理多个线程有共享数据的情况。\"},\"5278\":{\"h\":\"3.2 区别\",\"a\":\"_3-2-区别\"},\"5279\":{\"t\":\"继承Thread：线程代码存放Thread子类run方法中。\"},\"5280\":{\"t\":\"实现Runnable：线程代码存在接口的实现类的run方法。\"},\"5281\":{\"h\":\"3.3 联系\",\"a\":\"_3-3-联系\"},\"5282\":{\"t\":\"相同点：两种方式都需要重写run(),将线程要执行的逻辑声明在run()中。\"},\"5283\":{\"t\":\"public class Thread extends Object implements Runnable \"},\"5284\":{\"h\":\"5-3. 生命周期\"},\"5285\":{\"t\":\"线程是有生命周期（状态）的\"},\"5286\":{\"h\":\"1. 线程的5种状态\",\"a\":\"_1-线程的5种状态\"},\"5287\":{\"t\":\"要想实现多线程，必须在主线程中创建新的线程对象。Java语言使用Thread类及其子类的对象来表示线程，在它的一个完整的生命周期中通常要经历如下的五种状态\"},\"5288\":{\"t\":\"新建：当一个Thread类或其子类的对象被声明并创建时，新生的线程对象处于新建状态\"},\"5289\":{\"t\":\"就绪：处于新建状态的线程被start()后，将进入线程队列等待CPU时间片，此时它已具备了运行的条件，只是没分配到CPU资源\"},\"5290\":{\"t\":\"运行：当就绪的线程被调度并获得CPU资源时,便进入运行状态， run()方法定义了线程的操作和功能\"},\"5291\":{\"t\":\"阻塞：在某种特殊情况下，被人为挂起或执行输入输出操作时，让出 CPU 并临时中止自己的执行，进入阻塞状态\"},\"5292\":{\"t\":\"死亡：线程完成了它的全部工作或线程被提前强制性地中止或出现异常导致结束\"},\"5293\":{\"h\":\"2. 线程的生命周期图解\",\"a\":\"_2-线程的生命周期图解\"},\"5294\":{\"t\":\"5-3-1\"},\"5295\":{\"h\":\"5-4. 安全与同步\"},\"5296\":{\"h\":\"Ⅰ. 线程安全问题\",\"a\":\"i-线程安全问题\"},\"5297\":{\"h\":\"1. 线程的安全问题概述\",\"a\":\"_1-线程的安全问题概述\"},\"5298\":{\"t\":\"当多个线程操作同一个数据时，有可能发生，数据更新不及时，导致a线程更新完数据后，b线程拿到的是老数据，没有及时拿到新数据。\"},\"5299\":{\"h\":\"2. 示例1：消费问题\",\"a\":\"_2-示例1-消费问题\"},\"5300\":{\"t\":\"假设有一个银行账户里有3000元，A使用该账户消费2000元，支付时，系统进行if判断，钱的数目是够的，于是进入了确认支付环节。同时B也使用该账户进行消费2000元，支付时，系统也进行了判断，钱的数目是够的。A和B同时通过了if判断，都还没有更新数据，此时，A支付成功了，B却不会重新进行if判断，这时就产生了线程安全问题。\"},\"5301\":{\"h\":\"3. 示例2：卖票问题\",\"a\":\"_3-示例2-卖票问题\"},\"5302\":{\"t\":\"模拟火车站售票程序，有三个窗口售票（电子打印）。\"},\"5303\":{\"t\":\"问题1-出现重复票：当多个买票程序同时通过是否有票的验证，验证通过时，都进行票据的打印，然后才跟着票号--，就会出现打印的是同一张票的情况。\"},\"5304\":{\"t\":\"问题2-多打印：当只剩下一张票，而多个买票程序通过是否有票的判断时，就会出现多打印票的状况。\"},\"5305\":{\"t\":\"5-4-1\"},\"5306\":{\"t\":\"问题的原因：当多条语句在操作同一个线程共享数据时，一个线程对多条语句只执行了一部分，还没有执行完，另一个线程参与进来执行。导致共享数据的错误。\"},\"5307\":{\"h\":\"4. 解决方案\",\"a\":\"_4-解决方案\"},\"5308\":{\"t\":\"对多条操作共享数据的语句，只能让一个线程都执行完，在执行过程中，其他线程不可以参与执行。 在Java中，我们通过同步机制，来解决线程的安全问题，同步机制有多种方式\"},\"5309\":{\"h\":\"5. 线程安全问题代码示例\",\"a\":\"_5-线程安全问题代码示例\"},\"5310\":{\"t\":\"public class OneTest { public static void main(String[] args) { MyRunnable mr1 = new MyRunnable(); Thread t1 = new Thread(mr1); t1.start(); Thread t2 = new Thread(mr1); t2.start(); } } class MyRunnable implements Runnable{ private int num = 100; public void run() { while(true){ if(num>0){ System.out.println(\\\"子线程：\\\"+Thread.currentThread().getName()+\\\"--\\\"+num); num--; }else{ break; } } } } //效果：多次执行，发现会出现重复数字，小于0的数字，且数字不是完全递减的。 \"},\"5311\":{\"h\":\"Ⅱ. 同步代码块\",\"a\":\"ii-同步代码块\"},\"5312\":{\"t\":\"同步代码块可以解决线程安全问题。\"},\"5313\":{\"h\":\"1. 同步代码块说明\",\"a\":\"_1-同步代码块说明\"},\"5314\":{\"t\":\"public void run(){ synchronized(同步监视器){ //需要被同步的代码块..操作共享数据的代码 } } \"},\"5315\":{\"t\":\"操作共享数据的代码：即为需要被同步的代码。-->不能包含代码多了，也不能包含代码少了。\"},\"5316\":{\"t\":\"共享数据：多个线程共同操作的变量。\"},\"5317\":{\"t\":\"同步监视器 \"},\"5318\":{\"t\":\"俗称：锁。任何一个类的对象，都可以充当锁。\"},\"5319\":{\"t\":\"要求：多个线程必须要共用同一把锁。\"},\"5320\":{\"t\":\"补充：在实现Runnable接口创建多线程的方式中，我们可以考虑使用this充当同步监视器，但是要注意，在继承Thread类创建多线程的方式中，慎用this充当同步监视器，考虑使用当前类充当同步监视器。\"},\"5321\":{\"h\":\"2. 买票问题解决示例\",\"a\":\"_2-买票问题解决示例\"},\"5322\":{\"t\":\"public class RunnableTest { public static void main(String[] args) { MyRunnable m1 = new MyRunnable(); Thread t1 = new Thread(m1); Thread t2 = new Thread(m1); Thread t3 = new Thread(m1); t1.start(); t2.start(); t3.start(); } } class MyRunnable implements Runnable{ private int num = 100; //private static Object obj = new Object(); @Override public void run() { while (true) { synchronized(this) { //创建一个obj也可以 if (num > 0) { System.out.println(Thread.currentThread().getName()+ num); num--; } else { break; } } } } } \"},\"5323\":{\"h\":\"2.1 执行效果\",\"a\":\"_2-1-执行效果\"},\"5324\":{\"t\":\"num的值从100~1有序递减，且不存在重复和过界的数字。\"},\"5325\":{\"h\":\"2.2 注意synchronized的位置\",\"a\":\"_2-2-注意synchronized的位置\"},\"5326\":{\"t\":\"如上，synchronize即不能包的代码多了，也不能包的代码少了。\"},\"5327\":{\"t\":\"包的少了，还是会出现线程安全问题，包的多了可能会产生意外的错误，如上，假如把while(true)也包含在内，那么一个线程拿到锁，就会走完所有循环，多线程就失去意义了。\"},\"5328\":{\"h\":\"3. 处理继承Thread类的线程安全问题\",\"a\":\"_3-处理继承thread类的线程安全问题\"},\"5329\":{\"t\":\"继承Thread类实现多线程的方式和实现Runnable接口是不同的，因为Thread类会通过创建多个Thread类的子类来作为线程对象。每个对象的成员变量都是独立的，因此要注意以下两点：\"},\"5330\":{\"t\":\"将成员变量设置成static。\"},\"5331\":{\"t\":\"将同步监视器也设置成static类，（不要用this），或者使用.class类[反射：类也是对象]。\"},\"5332\":{\"t\":\"private static int num = 100; private static Object obj = new Object(); MyThread.class //类也可以作为对象 \"},\"5333\":{\"h\":\"Ⅲ. 同步方法\",\"a\":\"iii-同步方法\"},\"5334\":{\"h\":\"1. 同步方法说明\",\"a\":\"_1-同步方法说明\"},\"5335\":{\"t\":\"synchronized 还可以放在方法声明中，表示整个方法为同步方法\"},\"5336\":{\"t\":\"如果操作共享数据的代码完整的声明在一个方法中，我们不妨将此方法声明同步的。\"},\"5337\":{\"t\":\"注意：同步方法仍然涉及到同步监视器，只是不需要我们显式的声明。\"},\"5338\":{\"t\":\"public synchronized void run(){}; \"},\"5339\":{\"h\":\"1.1 Runnable实现的：同步监视器\",\"a\":\"_1-1-runnable实现的-同步监视器\"},\"5340\":{\"t\":\"Runnable实现的方式中，默认this是同步监视器\"},\"5341\":{\"h\":\"1.2 继承Thread类的：同步监视器\",\"a\":\"_1-2-继承thread类的-同步监视器\"},\"5342\":{\"t\":\"同理，this表示的是对象，继承Thread的线程对象，每个线程都会创建一个对象，每个对象的的同步方法都是独立的，同步监视器表示是各自的对象。\"},\"5343\":{\"t\":\"解决方案：将同步方法设置为静态方法（此时就变成类调用该方法了，类也是一个对象）。\"},\"5344\":{\"h\":\"2. 买票问题解决示例\",\"a\":\"_2-买票问题解决示例-1\"},\"5345\":{\"t\":\"public class RunnableTest { public static void main(String[] args) { MyRunnable m1 = new MyRunnable(); Thread t1 = new Thread(m1); Thread t2 = new Thread(m1); Thread t3 = new Thread(m1); t1.start(); t2.start(); t3.start(); } } class MyRunnable implements Runnable{ private int num = 100; // final Object obj = new Object(); @Override public void run() { while (true) { getNum(); } } //因为while(true)，不能包裹，所以把while(true)里面的代码提取出来声明成同步方法，再调用 public synchronized void getNum(){ if (num > 0) { System.out.println(Thread.currentThread().getName() + \\\"***\\\" + num); num--; }else{ //stop()已经被废弃了，但是这里如果不stop,线程就不会结束,因为while一直在执行。 Thread.currentThread().stop(); } } } \"},\"5346\":{\"h\":\"3. 解决懒汉式单例模式的线程安全问题\",\"a\":\"_3-解决懒汉式单例模式的线程安全问题\"},\"5347\":{\"t\":\"详见单例模式；\"},\"5348\":{\"t\":\"安全问题解析：当线程通过instance == null的判断后，可能会发生阻塞，这时将会有多个线程进来，从而创造了多个对象。\"},\"5349\":{\"t\":\"解决方案：使用同步方法解决。\"},\"5350\":{\"t\":\"class Order{ //1.私有化类的构造器 private Order(){} //2.声明当前类对象，没有初始化 //4.此对象也必须声明为static的 private static Order instance = null; //3.声明 public、static的返回当前类对象的方法 //方式1：将synchronize声明在getInstance处：效率低 public static synchronized Order getInstance(){ if(instance == null){ instance = new Order(); } return instance; } //方式2：高效率的修改 public static Order getInstance(){ if(instance == null){ synchronized(Order.class){ if(instance == null){ instance = new Order(); } } return instance } } \"},\"5351\":{\"h\":\"3.1 高效修改的逻辑\",\"a\":\"_3-1-高效修改的逻辑\"},\"5352\":{\"t\":\"在方式一，当把synchronize声明在方法最外层时，每当有线程进去，其他线程都要进行等待，哪怕对象已经创建好了。如果一个线程阻塞了，其他线程都需要在后面排队，如果instance真的==null，无可厚非，但如果不是，不如直接return instance。\"},\"5353\":{\"t\":\"改进的方案：将syschronized声明在if里面，一旦判断instance不是null，直接返回对象，如果是null，在进行synchronized，这个方法立面再加一层if判断，保证线程安全。\"},\"5354\":{\"h\":\"4. 同步原理和总结\",\"a\":\"_4-同步原理和总结\"},\"5355\":{\"t\":\"将需要同步的数据放入synchronized包裹的方法中，当线程进入synchronized中时，该线程将拿到锁，此时synchronized变成上锁状态，其他线程需要等待，等线程执行完synchronized中的代码后，锁就被去掉，所有线程开始重新争抢这把锁。这种上锁的方式保证了线程的安全性。\"},\"5356\":{\"t\":\"5-4-2\"},\"5357\":{\"h\":\"4.1 同步机制中的锁\",\"a\":\"_4-1-同步机制中的锁\"},\"5358\":{\"t\":\"需要某种方式来防止两个任务访问相同的资源（其实就是共享资源竞争）。 防止这种冲突的方法就是当资源被一个任务使用时，在其上加锁。第一个访问某项资源的任务必须锁定这项资源，使其他任务在其被解锁之前，就无法访问它了，而在其被解锁之时，另一个任务就可以锁定并使用它了。\"},\"5359\":{\"t\":\"注意： 一个线程类中的所有静态方法共用同一把锁（类名.class），所有非静态方法共用同一把锁（this），同步代码块（指定需谨慎）\"},\"5360\":{\"h\":\"4.2 同步的范围\",\"a\":\"_4-2-同步的范围\"},\"5361\":{\"t\":\"明确哪些代码是多线程运行的代码；明确多个线程是否有共享数据；明确多线程运行代码中是否有多条语句操作共享数据\"},\"5362\":{\"t\":\"对多条操作共享数据的语句，只能让一个线程都执行完，在执行过程中，其他线程不可以参与执行。即所有操作共享数据的这些语句都要放在同步范围中\"},\"5363\":{\"t\":\"注意： 范围太小：没锁住所有有安全问题的代码；范围太大：没发挥多线程的功能。\"},\"5364\":{\"h\":\"4.3 释放锁的操作\",\"a\":\"_4-3-释放锁的操作\"},\"5365\":{\"t\":\"当前线程的同步方法、同步代码块执行结束。\"},\"5366\":{\"t\":\"当前线程在同步代码块、同步方法中遇到break、return终止了该代码块、该方法继续执行。\"},\"5367\":{\"t\":\"当前线程在同步代码块、同步方法中出现了未处理的Error或Exception，导致异常结束。\"},\"5368\":{\"t\":\"当前线程在同步代码块、同步方法中执行了线程对象的wait()方法，当前线程暂停，并释放锁\"},\"5369\":{\"h\":\"4.4 不会释放锁的操作\",\"a\":\"_4-4-不会释放锁的操作\"},\"5370\":{\"t\":\"线程执行同步代码块或同步方法时，程序调用Thread.sleep()、Thread.yield()方法暂停当前线程的执行\"},\"5371\":{\"t\":\"线程执行同步代码块时，其他线程调用了该线程的suspend()方法将该线程挂起，该线程不会释放锁（同步监视器）。\"},\"5372\":{\"t\":\"注意：应尽量避免使用suspend()和resume()来控制线程\"},\"5373\":{\"h\":\"5. 同步方式的优缺点\",\"a\":\"_5-同步方式的优缺点\"},\"5374\":{\"t\":\"优点：完全解决了线程的安全问题 缺点：操作同步代码时，只能有一个线程参与，其他线程等待。相当于是一个单线程的过程，效率低。\"},\"5375\":{\"h\":\"Ⅳ. Lock锁\",\"a\":\"iv-lock锁\"},\"5376\":{\"t\":\"Lock锁方式也可以解决线程安全问题\"},\"5377\":{\"h\":\"1. 说明\",\"a\":\"_1-说明\"},\"5378\":{\"t\":\"从JDK 5.0开始，Java提供了更强大的线程同步机制——通过显式定义同步锁对象来实现同步。同步锁使用Lock对象充当。\"},\"5379\":{\"t\":\"java.util.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应先获得Lock对象。\"},\"5380\":{\"h\":\"2. Lock的优点\",\"a\":\"_2-lock的优点\"},\"5381\":{\"t\":\"使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（提供更多的子类）\"},\"5382\":{\"h\":\"3. ReentrantLock类\",\"a\":\"_3-reentrantlock类\"},\"5383\":{\"t\":\"ReentrantLock 类实现了 Lock ，它拥有与 synchronized 相同的并发性和内存语义，可以显式加锁、释放锁。\"},\"5384\":{\"t\":\"class A{ private final ReentrantLock lock = new ReenTrantLock(); public void m(){ lock.lock(); try{ // 被保证线程安全的代码; } finally{ lock.unlock(); } } } \"},\"5385\":{\"h\":\"3.1 构造函数\",\"a\":\"_3-1-构造函数\"},\"5386\":{\"t\":\"接收一个boolean参数，默认是false，true表示公平的多线程\"},\"5387\":{\"t\":\"true：多个线程安装1:1的几率执行run方法\"},\"5388\":{\"t\":\"false：多个线程安装CPU的调度执行run方法\"},\"5389\":{\"t\":\"public ReenTrantLock(Boolean false); \"},\"5390\":{\"h\":\"3.2 加锁\",\"a\":\"_3-2-加锁\"},\"5391\":{\"t\":\"lock.lock(); \"},\"5392\":{\"h\":\"3.3 释放锁\",\"a\":\"_3-3-释放锁\"},\"5393\":{\"t\":\"注意：如果同步代码有异常，要将unlock()写入finally语句块\"},\"5394\":{\"t\":\"lock.unlock(); \"},\"5395\":{\"h\":\"4. 使用示例\",\"a\":\"_4-使用示例\"},\"5396\":{\"t\":\"package ThreadSafety; import java.util.concurrent.locks.ReentrantLock; public class ReinTyrantTest { public static void main(String[] args) { Test test = new Test(); Thread t1 = new Thread(test); Thread t2 = new Thread(test); Thread t3 = new Thread(test); t1.start(); t2.start(); t3.start(); } } class Test implements Runnable{ private int num = 100; private ReentrantLock lock = new ReentrantLock(true); @Override public void run() { while(true){ try { lock.lock(); if (num > 0) { System.out.println(Thread.currentThread().getName() + \\\"@\\\" + num); num--; } else { lock.unlock(); break; } }finally{ lock.unlock(); } } } } \"},\"5397\":{\"h\":\"5. synchronized与lock的对比\",\"a\":\"_5-synchronized与lock的对比\"},\"5398\":{\"t\":\"相同点：都可以解决线程安全问题\"},\"5399\":{\"t\":\"不用点 \"},\"5400\":{\"t\":\"Lock是显式锁（手动开启和关闭锁，别忘记关闭锁），synchronized是隐式锁，出了作用域自动释放\"},\"5401\":{\"t\":\"Lock只有代码块锁，synchronized有代码块锁和方法锁\"},\"5402\":{\"h\":\"6. 三种线程安全方式的优先使用顺序\",\"a\":\"_6-三种线程安全方式的优先使用顺序\"},\"5403\":{\"t\":\"Lock>同步代码块（已经进入了方法体，分配了相应资源）->同步方法（在方法体之外）\"},\"5404\":{\"h\":\"5-5. 线程的死锁\"},\"5405\":{\"t\":\"我们使用同步时，要避免出现死锁。很多死锁都是很隐蔽，有时根本发现不了。\"},\"5406\":{\"h\":\"1. 死锁介绍\",\"a\":\"_1-死锁介绍\"},\"5407\":{\"t\":\"不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁。\"},\"5408\":{\"t\":\"出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于阻塞状态，无法继续。\"},\"5409\":{\"h\":\"2. 解决方法\",\"a\":\"_2-解决方法\"},\"5410\":{\"t\":\"专门的算法、原则；\"},\"5411\":{\"t\":\"尽量减少同步资源的定义；\"},\"5412\":{\"t\":\"尽量避免嵌套同步\"},\"5413\":{\"t\":\"加锁时限（线程尝试获取锁的时候加上一定的时限，超过时限则放弃对该锁的请求，并释放自己占有的锁）\"},\"5414\":{\"t\":\"死锁检测\"},\"5415\":{\"h\":\"3. 死锁示例\",\"a\":\"_3-死锁示例\"},\"5416\":{\"t\":\"例如，某计算机系统中只有一台打印机和一台输入 设备，进程P1正占用输入设备，同时又提出使用打印机的请求，但此时打印机正被进程P2 所占用，而P2在未释放打印机之前，又提出请求使用正被P1占用着的输入设备。这样两个进程相互无休止地等待下去，均无法继续执行，此时两个进程陷入死锁状态。\"},\"5417\":{\"h\":\"4. 死锁产生的具体原因\",\"a\":\"_4-死锁产生的具体原因\"},\"5418\":{\"h\":\"4.1 系统资源的竞争\",\"a\":\"_4-1-系统资源的竞争\"},\"5419\":{\"t\":\"通常系统中拥有的不可剥夺资源，其数量不足以满足多个进程运行的需要，使得进程在运行过程中，会因争夺资源而陷入僵局。\"},\"5420\":{\"h\":\"4.2 进程推进顺序非法\",\"a\":\"_4-2-进程推进顺序非法\"},\"5421\":{\"t\":\"进程在运行过程中，请求和释放资源的顺序不当，也同样会导致死锁。\"},\"5422\":{\"t\":\"例如，并发进程 P1、P2分别保持了资源R1、R2，而进程P1申请资源R2，进程P2申请资源R1时，两者都会因为所需资源被占用而阻塞。\"},\"5423\":{\"h\":\"4.3 总结\",\"a\":\"_4-3-总结\"},\"5424\":{\"t\":\"产生死锁可能性的最根本原因是：线程在获得一个锁L1的情况下再去申请另外一个锁L2，也就是锁L1想要包含了锁L2，也就是说在获得了锁L1，并且没有释放锁L1的情况下，又去申请获得锁L2，这个是产生死锁的最根本原因。另一个原因是默认的锁申请操作是阻塞的。\"},\"5425\":{\"h\":\"5. 死锁的实例：嵌套锁\",\"a\":\"_5-死锁的实例-嵌套锁\"},\"5426\":{\"t\":\"public class ThreadTest { public static void main(String[] args) { StringBuffer s1 = new StringBuffer(); StringBuffer s2 = new StringBuffer(); new Thread(){ @Override public void run() { synchronized (s1){ s1.append(\\\"a\\\"); s2.append(\\\"1\\\"); try { Thread.sleep(100); } catch (InterruptedException e) { e.printStackTrace(); } synchronized (s2){ s1.append(\\\"b\\\"); s2.append(\\\"2\\\"); System.out.println(s1); System.out.println(s2); } } } }.start(); new Thread(new Runnable() { @Override public void run() { synchronized (s2){ s1.append(\\\"c\\\"); s2.append(\\\"3\\\"); try { Thread.sleep(100); } catch (InterruptedException e) { e.printStackTrace(); } synchronized (s1){ s1.append(\\\"d\\\"); s2.append(\\\"4\\\"); System.out.println(s1); System.out.println(s2); } } } }).start(); } } \"},\"5427\":{\"h\":\"5.1 死锁解析\",\"a\":\"_5-1-死锁解析\"},\"5428\":{\"t\":\"线程1：将s1作为锁，发生阻塞，然后再将s2作为锁，\"},\"5429\":{\"t\":\"线程2：将s2作为锁，发生阻塞，然后再将s1作为锁，\"},\"5430\":{\"t\":\"当s1和s2同时结束阻塞准备拿下一个锁的时候，发现自己需要的锁，被占着者，于是只能等待，这就形成了死锁。\"},\"5431\":{\"h\":\"5.2 锁的补充\",\"a\":\"_5-2-锁的补充\"},\"5432\":{\"t\":\"锁（对象）只有释放了，才能被其他线程拿到，无论这两个线程是否属于同一对象。\"},\"5433\":{\"h\":\"5-6. 线程的通信\"},\"5434\":{\"t\":\"线程的通信指的是多个线程之间的交流。\"},\"5435\":{\"t\":\"比如，使用两个线程打印 1-100。线程1, 线程2 交替打印\"},\"5436\":{\"h\":\"1. 线程通信涉及到的方法\",\"a\":\"_1-线程通信涉及到的方法\"},\"5437\":{\"t\":\"注意：这三个方法只有在synchronized方法或synchronized代码块中才能使用，否则会报 java.lang.IllegalMonitorStateException异常。\"},\"5438\":{\"t\":\"wait：一旦执行此方法，当前线程就进入阻塞状态，并释放同步监视器。 \"},\"5439\":{\"t\":\"令当前线程挂起并放弃CPU、同步资源并等待，使别的线程可访问并修改共享资源，而当前线程排队等候其他线程调用notify()或notifyAll()方法唤醒，唤醒后等待重新获得对监视器的所有权后才能继续执行。\"},\"5440\":{\"t\":\"notify：一旦执行此方法，就会唤醒被wait的一个线程。如果有多个线程被wait，就唤醒优先级高的那个。\"},\"5441\":{\"t\":\"notifyAll：一旦执行此方法，就会唤醒所有等待的线程。\"},\"5442\":{\"h\":\"2. wait()使用说明\",\"a\":\"_2-wait-使用说明\"},\"5443\":{\"t\":\"在当前线程中调用方法： 对象名.wait()；\"},\"5444\":{\"t\":\"使当前线程进入等待（某对象）状态 ，直到另一线程对该对象发出 notify(或notifyAll) 为止。\"},\"5445\":{\"t\":\"调用方法的必要条件：当前线程必须具有对该对象的监控权（加锁）\"},\"5446\":{\"t\":\"调用此方法后，当前线程将释放对象监控权\"},\"5447\":{\"t\":\"在当前线程被notify后，要重新获得监控权，然后从断点处继续代码的执行。\"},\"5448\":{\"h\":\"3. notify()、notifyAll()使用说明\",\"a\":\"_3-notify-、notifyall-使用说明\"},\"5449\":{\"t\":\"在当前线程中调用方法： 对象名.notify()\"},\"5450\":{\"t\":\"功能：唤醒等待该对象监控权的一个/所有线程。\"},\"5451\":{\"t\":\"调用方法的必要条件：当前线程必须具有对该对象的监控权（加锁）\"},\"5452\":{\"h\":\"4. 补充说明\",\"a\":\"_4-补充说明\"},\"5453\":{\"t\":\"wait()，notify()，notifyAll()三个方法必须使用在同步代码块或同步方法中。\"},\"5454\":{\"t\":\"wait()，notify()，notifyAll()三个方法的调用者必须是同步代码块或同步方法中的同步监视器。否则，会出现IllegalMonitorStateException异常\"},\"5455\":{\"t\":\"wait()，notify()，notifyAll()三个方法是定义在java.lang.Object类中。\"},\"5456\":{\"h\":\"5. sleep()和wait()的异同\",\"a\":\"_5-sleep-和wait-的异同\"},\"5457\":{\"t\":\"相同点：一旦执行方法，都可以使得当前的线程进入阻塞状态。\"},\"5458\":{\"t\":\"不同点 \"},\"5459\":{\"t\":\"两个方法声明的位置不同：Thread类中声明sleep() , Object类中声明wait()\"},\"5460\":{\"t\":\"用的要求不同：sleep()可以在任何需要的场景下调用。 wait()必须使用在同步代码块或同步方法中\"},\"5461\":{\"t\":\"关于是否释放同步监视器：如果两个方法都使用在同步代码块或同步方法中，sleep()不会释放锁，wait()会释放锁。\"},\"5462\":{\"h\":\"6. 线程的通信实例\",\"a\":\"_6-线程的通信实例\"},\"5463\":{\"t\":\"使用两个线程打印 1-100。线程1, 线程2 交替打印\"},\"5464\":{\"t\":\"public class WaitTest { public static void main(String[] args) { NumTest nt1 = new NumTest(); Thread t1 = new Thread(nt1); Thread t2 = new Thread(nt1); t1.start(); t2.start(); } } class NumTest implements Runnable{ private int num = 1; @Override public void run() { while(true) { synchronized (this) { notify(); //将被wait的线程重新激活 if (num <= 100) { System.out.println(Thread.currentThread().getName() + \\\"@\\\" + num); num++; try { wait();//当前线程被阻塞，并释放锁 } catch (InterruptedException e) { e.printStackTrace(); } } else { break; } } } } } \"},\"5465\":{\"h\":\"5-7. 线程池\"},\"5466\":{\"h\":\"Ⅰ. Callable接口\",\"a\":\"i-callable接口\"},\"5467\":{\"t\":\"实现Callable接口是JDK5.0新增的一种方式，他比实现Runnable接口更强大。\"},\"5468\":{\"h\":\"1. Callable接口介绍\",\"a\":\"_1-callable接口介绍\"},\"5469\":{\"t\":\"通过实现Callable接口，并重写call()来创建多线程，相当于Runnable接口，Callable接口更加强大，有如下优势：\"},\"5470\":{\"t\":\"call()相当于run()，可以有返回值\"},\"5471\":{\"t\":\"call()可以抛出异常\"},\"5472\":{\"t\":\"支持泛型\"},\"5473\":{\"h\":\"2. Future接口介绍\",\"a\":\"_2-future接口介绍\"},\"5474\":{\"t\":\"Callable接口的实例，需要借助FutureTask类，进行其他操作，比如：获取返回结果\"},\"5475\":{\"t\":\"FutrueTask是Futrue接口的唯一的实现类\"},\"5476\":{\"t\":\"可以对具体Runnable、Callable任务的执行结果进行取消、查询是否完成、获取结果等。\"},\"5477\":{\"t\":\"FutureTask 同时实现了Runnable, Future接口。它既可以作为Runnable被线程执行，又可以作为Future得到Callable的返回值\"},\"5478\":{\"h\":\"3. 使用Callable新增线程的步骤\",\"a\":\"_3-使用callable新增线程的步骤\"},\"5479\":{\"t\":\"①创建一个实现Callable的实现类\"},\"5480\":{\"t\":\"②实现call方法，将此线程需要执行的操作声明在call()中\"},\"5481\":{\"t\":\"③创建Callable接口实现类的对象\"},\"5482\":{\"t\":\"④将此Callable接口实现类的对象作为参数传递到FutureTask构造器中，创建FutureTask的对象\"},\"5483\":{\"t\":\"⑤将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象，并调用start()\"},\"5484\":{\"t\":\"⑥获取Callable中call方法的返回值：get()返回值即为FutureTask构造器参数Callable实现类重写的call()的返回值。\"},\"5485\":{\"h\":\"4. 示例\",\"a\":\"_4-示例\"},\"5486\":{\"t\":\"1.//创建一个实现Callable的实现类 class NumSum implements Callable { private int num = 100; @Override 2.//实现call方法，将此线程需要执行的操作声明在call()中 public Object call() throws Exception { int sum = 0; for(int i=0;i<=num;i++){ System.out.println(Thread.currentThread().getName()+\\\"#\\\"+i); sum += i; } return sum; } } public class CallableTest { public static void main(String[] args) { 3.//创建Callable接口实现类的对象 NumSum ns = new NumSum(); 5.//将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象 FutureTask ft = new FutureTask(ns); Thread t1 = new Thread(ft); t1.start();//调用start方法，开启线程 try { 6.//获取Callable中call方法的返回值 System.out.println(\\\"总和为\\\"+ft.get()); } catch (InterruptedException e) { e.printStackTrace(); } catch (ExecutionException e) { e.printStackTrace(); } } } \"},\"5487\":{\"h\":\"Ⅱ. 线程池\",\"a\":\"ii-线程池\"},\"5488\":{\"h\":\"1. 线程池介绍\",\"a\":\"_1-线程池介绍\"},\"5489\":{\"t\":\"开发中，框架用的就是线程池，我们只管用就行\"},\"5490\":{\"t\":\"背景：经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，对性能影响很大。\"},\"5491\":{\"t\":\"思路：提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。类似生活中的公共交通工具。\"},\"5492\":{\"h\":\"2. 线程池的优点\",\"a\":\"_2-线程池的优点\"},\"5493\":{\"t\":\"提高响应速度（减少了创建新线程的时间）\"},\"5494\":{\"t\":\"降低资源消耗（重复利用线程池中线程，不需要每次都创建）\"},\"5495\":{\"t\":\"便于线程管理 \"},\"5496\":{\"t\":\"corePoolSize：核心池的大小\"},\"5497\":{\"t\":\"maximumPoolSize：最大线程数\"},\"5498\":{\"t\":\"keepAliveTime：线程没有任务时最多保持多长时间后会终止\"},\"5499\":{\"t\":\"…\"},\"5500\":{\"h\":\"3. ExcutorService：线程池接口\",\"a\":\"_3-excutorservice-线程池接口\"},\"5501\":{\"t\":\"常见子类ThreadPoolExecutor\"},\"5502\":{\"t\":\"void execute(Runnable command) ：执行任务/命令，没有返回值，一般用来执行Runnable\"},\"5503\":{\"t\":\"<T> Future<T> submit(Callable<T> task)：执行任务，有返回值，一般用来执行Callable\"},\"5504\":{\"t\":\"void shutdown() ：关闭连接池\"},\"5505\":{\"h\":\"4. Executors：线程池工具类、工厂类\",\"a\":\"_4-executors-线程池工具类、工厂类\"},\"5506\":{\"t\":\"用于创建并返回不同类型的线程池\"},\"5507\":{\"t\":\"Executors.newCachedThreadPool()：创建一个可根据需要创建新线程的线程池\"},\"5508\":{\"t\":\"Executors.newFixedThreadPool(n); 创建一个可重用固定线程数的线程池\"},\"5509\":{\"t\":\"Executors.newSingleThreadExecutor() ：创建一个只有一个线程的线程池\"},\"5510\":{\"t\":\"Executors.newScheduledThreadPool(n)：创建一个线程池，它可安排在给定延迟后运行命令或者定期地执行。\"},\"5511\":{\"h\":\"5. 使用线程池步骤\",\"a\":\"_5-使用线程池步骤\"},\"5512\":{\"t\":\"创建线程池：需要用到Executors工厂类\"},\"5513\":{\"t\":\"可选：设置线程池属性，需要使用ExecutorService接口的子类\"},\"5514\":{\"t\":\"指定线程的操作：使用execute或submit进行操作，需要提供实现Runnable接口或Callable接口实现类的对象做参数\"},\"5515\":{\"t\":\"关闭连接池\"},\"5516\":{\"h\":\"6. 示例\",\"a\":\"_6-示例\"},\"5517\":{\"t\":\"public class ThreadPool { public static void main(String[] args) { 1.//创建线程池：使用创建指定线程数量的方法。 ExecutorService service = Executors.newFixedThreadPool(10); 2.//将线程池接口类型转为接口的子类类型，方便设置线程属性 ThreadPoolExecutor real_service = (ThreadPoolExecutor) service; real_service.setCorePoolSize(15); 3.//执行指定的线程的操作 real_service.execute(new PrintSum()); 4.//关闭连接池 real_service.shutdown(); } } class PrintSum implements Runnable{ @Override //线程需要完成的操作 public void run() { for(int i=0;i<100;i++){ System.out.println(Thread.currentThread().getName()+\\\"@\\\"+i); } } } \"},\"5518\":{\"h\":\"6-1. 集合概述\"},\"5519\":{\"h\":\"Ⅰ. 集合概述\",\"a\":\"i-集合概述\"},\"5520\":{\"h\":\"1. 集合的由来\",\"a\":\"_1-集合的由来\"},\"5521\":{\"t\":\"面向对象语言对事物的体现都是以对象的形式，为了方便对多个对象的操作，就要对对象进行存储。使用Array在存储对象方面具有 一些弊端，而Java 集合就像一种容器，可以动态地把多个对象的引用放入容器中。\"},\"5522\":{\"t\":\"**容器：**集合、数组都是对多个数据进行存储操作的结构，简称Java容器。此时的存储，主要指的是内存层面的存储，不涉及到持久化的存储。\"},\"5523\":{\"h\":\"2. 数组在Java内存储存方面的特点\",\"a\":\"_2-数组在java内存储存方面的特点\"},\"5524\":{\"t\":\"一旦初始化以后，其长度就确定了。\"},\"5525\":{\"t\":\"数组一旦定义好，其元素的类型也就确定了。我们也就只能操作指定类型的数据了。 \"},\"5526\":{\"t\":\"比如：String[] arr;int[] arr1;Object[] arr2;\"},\"5527\":{\"h\":\"3. 数组在储存数据方面的弊端\",\"a\":\"_3-数组在储存数据方面的弊端\"},\"5528\":{\"t\":\"一旦初始化以后，其长度就不可修改。\"},\"5529\":{\"t\":\"数组中提供的方法非常有限，对于添加、删除、插入数据等操作，非常不便，同时效率不高。\"},\"5530\":{\"t\":\"获取数组中实际元素的个数的需求，数组没有现成的属性或方法可用\"},\"5531\":{\"t\":\"数组存储数据的特点：有序、可重复。对于无序、不可重复的需求，不能满足。\"},\"5532\":{\"h\":\"4. 集合的特点\",\"a\":\"_4-集合的特点\"},\"5533\":{\"t\":\"提示\"},\"5534\":{\"t\":\"关联数组：在其他语言中是有关联数组的，K-V键值对，Java中没有关联数组，可以用集合取代。\"},\"5535\":{\"t\":\"数组的弊端，集合都解决了。\"},\"5536\":{\"t\":\"Java 集合类可以用于存储数量不等的多个对象，还可用于保存具有映射关系的关联数组。\"},\"5537\":{\"h\":\"5. 集合的使用场景\",\"a\":\"_5-集合的使用场景\"},\"5538\":{\"t\":\"数组和集合都是容器，但是开发中，凡是涉及到对多个数据进行操作时，一般用集合。\"},\"5539\":{\"t\":\"能用集合就用集合，除非要求用数组。集合出现的目的，就是取代数组。\"},\"5540\":{\"h\":\"Ⅱ. 集合框架\",\"a\":\"ii-集合框架\"},\"5541\":{\"h\":\"1. 集合框架的体系\",\"a\":\"_1-集合框架的体系\"},\"5542\":{\"t\":\"Java 集合可分为 Collection 和 Map 两种体系\"},\"5543\":{\"t\":\"Collection 接口 ：单列数据，定义了存取一组对象的方法的集合 \"},\"5544\":{\"t\":\"List： 存储有序的、可重复的数据。 -->“动态”数组 \"},\"5545\":{\"t\":\"ArrayList、LinkedList、Vector\"},\"5546\":{\"t\":\"Set： 存储无序的、不可重复的数据 -->数学里的“集合” \"},\"5547\":{\"t\":\"HashSet、LinkedHashSet、TreeSet\"},\"5548\":{\"t\":\"Map 接口：双列数据，保存具有映射关系“key-value对”的集合-->存储无序的、不可重复的数据 -->数学中的\\\"函数\\\" \"},\"5549\":{\"t\":\"HashMap、LinkedHashMap、TreeMap、Hashtable、Properties\"},\"5550\":{\"h\":\"2. Collection接口继承图\",\"a\":\"_2-collection接口继承图\"},\"5551\":{\"t\":\"6-1-1\"},\"5552\":{\"h\":\"3. Map接口继承图\",\"a\":\"_3-map接口继承图\"},\"5553\":{\"t\":\"6-1-2\"},\"5554\":{\"h\":\"6-2. Collection\"},\"5555\":{\"h\":\"说明\",\"a\":\"说明\"},\"5556\":{\"t\":\"Collection 接口是 List、Set 和 Queue 接口的父接口，该接口里定义的方法既可用于操作 Set 集合，也可用于操作 List 和 Queue 集合。\"},\"5557\":{\"t\":\"JDK不提供此接口的任何直接实现，而是提供更具体的子接口(如：Set和List)实现。\"},\"5558\":{\"t\":\"从 JDK 5.0 增加了 泛型以后，Java 集合可以记住容器中对象的数据类型（而非都当成obj）。\"},\"5559\":{\"t\":\"下面的方法测试，都是以实现类做测试的（抽象方法，无法执行）。\"},\"5560\":{\"h\":\"实例化\",\"a\":\"实例化\"},\"5561\":{\"t\":\"实际开发中，根据需求选择合适的子类，这些子类的方法都是一样的。\"},\"5562\":{\"t\":\"Collection coll = new ArrayList(); //用实现类进行实例化 System.out.println(coll); //[],一个空的集合 \"},\"5563\":{\"h\":\"Collection接口的方法\",\"a\":\"collection接口的方法\"},\"5564\":{\"t\":\"详见：内置函数>Collection+\"},\"5565\":{\"h\":\"6-3. Iterator\"},\"5566\":{\"h\":\"Ⅰ. Iterator 接口\",\"a\":\"i-iterator-接口\"},\"5567\":{\"t\":\"Iterator是个迭代器接口，用于集合元素的遍历。\"},\"5568\":{\"h\":\"1. 迭代器\",\"a\":\"_1-迭代器\"},\"5569\":{\"t\":\"GOF给迭代器模式(设计模式的一种)的定义为：提供一种方法访问一个容器(container)对象中各个元素，而又不需暴露该对象的内部细节。 迭代器模式，就是为容器而生。\"},\"5570\":{\"t\":\"Iterator对象称为迭代器(设计模式的一种)，主要用于遍历 Collection 集合中的元素。\"},\"5571\":{\"h\":\"2. iterator方法和Iterator对象\",\"a\":\"_2-iterator方法和iterator对象\"},\"5572\":{\"t\":\"Collection接口继承了java.lang.Iterable接口，该接口有一个iterator()方法，那么所有实现了Collection接口的集合类都有一个iterator()方法，用以返回一个实现了Iterator接口的对象。\"},\"5573\":{\"t\":\"Iterator对象称为迭代器，主要用于遍历 Collection 集合中的元素。\"},\"5574\":{\"t\":\"Map集合的元素，不使用Iterator遍历。\"},\"5575\":{\"h\":\"3. iterator对象\",\"a\":\"_3-iterator对象\"},\"5576\":{\"t\":\"Iterator 仅用于遍历集合，Iterator 本身并不提供承装对象的能力。如果需要创建Iterator 对象，则必须有一个被迭代的集合\"},\"5577\":{\"t\":\"集合对象每次调用iterator()方法都得到一个全新的迭代器对象，默认游标都在集合的第一个元素之前。\"},\"5578\":{\"h\":\"4. 遍历方法\",\"a\":\"_4-遍历方法\"},\"5579\":{\"t\":\"详见：内置函数>Collection+\"},\"5580\":{\"h\":\"4.1 指针（游标）\",\"a\":\"_4-1-指针-游标\"},\"5581\":{\"t\":\"iterator对象有一个指针，指向集合中的某个元素。对于一个全新的迭代器，他的指针在第一个元素之前，每次执行一次next方法，指针就往后移动一次。\"},\"5582\":{\"h\":\"4.2 next()\",\"a\":\"_4-2-next\"},\"5583\":{\"t\":\"iterator.next()用来向后移动一次指针，并取出指针指向的集合元素，进行返回。\"},\"5584\":{\"t\":\"注意：当指针已经指向最后时，就不能再调用next方法了，会抛出异常，且取完数据后，指针就会呆在集合末尾，不会自动重置。\"},\"5585\":{\"h\":\"4.3 hashNext()\",\"a\":\"_4-3-hashnext\"},\"5586\":{\"t\":\"用来判断指针后面还有没有集合元素。\"},\"5587\":{\"h\":\"5. 进行遍历\",\"a\":\"_5-进行遍历\"},\"5588\":{\"t\":\"//1.创建集合对象,并添加元素 Collection coll = new ArrayList(); coll.add(123); coll.add(\\\"aa\\\"); coll.add(new Person(\\\"jinno\\\",20)); //2.创建Iterator对象,准备遍历 Iterator it = coll.iterator(); \"},\"5589\":{\"h\":\"5.1 手动遍历【不使用，仅演示】\",\"a\":\"_5-1-手动遍历【不使用-仅演示】\"},\"5590\":{\"t\":\"System.out.println(it.next()); //123 System.out.println(it.next()); //aa System.out.println(it.next()); //day04.Person@1b6d3586 //没有数据，继续next,报异常 System.out.println(it.next()); \"},\"5591\":{\"h\":\"5.2 for循环遍历【不推荐，仅演示】\",\"a\":\"_5-2-for循环遍历【不推荐-仅演示】\"},\"5592\":{\"t\":\"for(int i=0;i<coll.size();i++){ System.out.println(it.next()); } \"},\"5593\":{\"h\":\"5.3 while+hasNext遍历【推荐】\",\"a\":\"_5-3-while-hasnext遍历【推荐】\"},\"5594\":{\"t\":\"在调用it.next()方法之前必须要调用it.hasNext()进行检测。若不调用，且下一条记录无效，直接调用it.next()会抛出NoSuchElementException异常\"},\"5595\":{\"t\":\"while(it.hasNext()){ System.out.println(it.next()); } \"},\"5596\":{\"h\":\"6. 迭代器执行的原理\",\"a\":\"_6-迭代器执行的原理\"},\"5597\":{\"t\":\"6-3-1\"},\"5598\":{\"h\":\"7. 遍历的注意事项\",\"a\":\"_7-遍历的注意事项\"},\"5599\":{\"t\":\"每次调用iterator方法，都会返回一个全新的迭代器，指针指向第一个元素前面\"},\"5600\":{\"t\":\"取完数据后，指针不会重置，再调用next()会抛异常，想再遍历就重新获得迭代器\"},\"5601\":{\"h\":\"8. remove：移除元素\",\"a\":\"_8-remove-移除元素\"},\"5602\":{\"t\":\"remove方法用来在遍历的时候，删除集合中的元素。此方法不同于集合直接调用remove()。\"},\"5603\":{\"t\":\"注意：如果还未调用next()或在上一次调用 next 方法之后已经调用了 remove 方法，再调用remove都会报IllegalStateException。\"},\"5604\":{\"t\":\"while(it.hasNext()){ Object obj = it.next(); if(\\\"aa\\\".equals(obj)){ it.remove(); } } \"},\"5605\":{\"h\":\"Ⅱ. 增强 for 循环\",\"a\":\"ii-增强-for-循环\"},\"5606\":{\"h\":\"1. 介绍\",\"a\":\"_1-介绍\"},\"5607\":{\"t\":\"jdk 5.0 新增了foreach循环(又称增强for循环)，用于遍历集合、数组。\"},\"5608\":{\"t\":\"遍历操作不需获取Collection或数组的长度，无需使用索引访问元素。 遍历集合的底层调用Iterator完成操作。\"},\"5609\":{\"h\":\"2. 示例：遍历集合\",\"a\":\"_2-示例-遍历集合\"},\"5610\":{\"t\":\"for(集合元素的类型 局部变量 : 集合对象)\"},\"5611\":{\"t\":\"Collection coll = new ArrayList(); coll.add(123); coll.add(\\\"aa\\\"); coll.add(new Person(\\\"jinno\\\",20)); //for(集合元素的类型 局部变量 : 集合对象) for(Object obj : coll){ System.out.println(obj); } \"},\"5612\":{\"h\":\"3. 示例：遍历数组\",\"a\":\"_3-示例-遍历数组\"},\"5613\":{\"t\":\"for(数组元素的类型 局部变量 : 数组对象)\"},\"5614\":{\"t\":\"int[] arr = new int[]{1,2,3,4,5,6}; //for(数组元素的类型 局部变量 : 数组对象) for(int i : arr){ System.out.println(i); } \"},\"5615\":{\"h\":\"4. 练习：for循环与增强for循环的对比\",\"a\":\"_4-练习-for循环与增强for循环的对比\"},\"5616\":{\"t\":\"重点：增强for循环中，是把值赋给了局部变量。\"},\"5617\":{\"h\":\"4.1 普通for循环\",\"a\":\"_4-1-普通for循环\"},\"5618\":{\"t\":\"String[] arr = new String[]{\\\"MM\\\",\\\"MM\\\",\\\"MM\\\"}; for(int i = 0;i < arr.length;i++){ arr[i] = \\\"GG\\\"; } for(int i = 0;i < arr.length;i++){ System.out.println(arr[i]); //输出的都是 GG } \"},\"5619\":{\"h\":\"4.2 增强for循环\",\"a\":\"_4-2-增强for循环\"},\"5620\":{\"t\":\"String[] arr = new String[]{\\\"MM\\\",\\\"MM\\\",\\\"MM\\\"}; for(String s : arr){ s = \\\"GG\\\"; } for(int i = 0;i < arr.length;i++){ System.out.println(arr[i]); //输出的都是MM } \"},\"5621\":{\"h\":\"6-4. List\"},\"5622\":{\"h\":\"Ⅰ. List 接口\",\"a\":\"i-list-接口\"},\"5623\":{\"h\":\"1. 介绍\",\"a\":\"_1-介绍\"},\"5624\":{\"t\":\"List接口为Collection接口的子接口，常称为：动态数组\"},\"5625\":{\"t\":\"鉴于Java中数组用来存储数据的局限性，我们通常使用List替代数组；\"},\"5626\":{\"t\":\"List集合类中元素有序、且可重复，集合中的每个元素都有其对应的顺序索引。\"},\"5627\":{\"t\":\"List容器中的元素都对应一个整数型的序号记载其在容器中的位置，可以根据序号存取容器中的元素。\"},\"5628\":{\"h\":\"2. List接口的实现类\",\"a\":\"_2-list接口的实现类\"},\"5629\":{\"t\":\"List接口是Collection的子接口，该接口有三个实现类\"},\"5630\":{\"t\":\"Collection 接口 ：单列数据，定义了存取一组对象的方法的集合 \"},\"5631\":{\"t\":\"List： 存储有序的、可重复的数据。 -->“动态”数组 \"},\"5632\":{\"t\":\"ArrayList、LinkedList、Vector\"},\"5633\":{\"h\":\"2.1 ArrayList 【主要使用】\",\"a\":\"_2-1-arraylist-【主要使用】\"},\"5634\":{\"t\":\"作为List接口的主要实现类；一般情况下用这个\"},\"5635\":{\"t\":\"线程不安全的，效率高；\"},\"5636\":{\"t\":\"底层使用Object[] elementData存储\"},\"5637\":{\"h\":\"2.2 LinkedList\",\"a\":\"_2-2-linkedlist\"},\"5638\":{\"t\":\"对于频繁的插入、删除操作，使用此类效率比ArrayList高；\"},\"5639\":{\"t\":\"底层使用双向链表存储。\"},\"5640\":{\"h\":\"2.3 Vector\",\"a\":\"_2-3-vector\"},\"5641\":{\"t\":\"作为List接口的古老实现类；\"},\"5642\":{\"t\":\"线程安全的，效率低；\"},\"5643\":{\"t\":\"底层使用Object[] elementData存储\"},\"5644\":{\"h\":\"Ⅱ. 源码分析\",\"a\":\"ii-源码分析\"},\"5645\":{\"h\":\"1. ArrayList源码分析\",\"a\":\"_1-arraylist源码分析\"},\"5646\":{\"h\":\"1.1 构造器\",\"a\":\"_1-1-构造器\"},\"5647\":{\"t\":\"底层创建了长度是10的Object[]数组elementData\"},\"5648\":{\"t\":\"ArrayList list = new ArrayList(); \"},\"5649\":{\"h\":\"1.2 add操作\",\"a\":\"_1-2-add操作\"},\"5650\":{\"t\":\"List.add(123); //相当于 elementData[0] = new Interger(123); \"},\"5651\":{\"h\":\"1.3 扩容\",\"a\":\"_1-3-扩容\"},\"5652\":{\"t\":\"如果此次的添加导致底层elementData数组容量不够，则扩容。默认情况下，扩容为原来的容量的1.5倍，同时需要将原有数组中的数据复制到新的数组中。\"},\"5653\":{\"t\":\"......//连续添加10次数据 list.add(11);//第11次添加数据 \"},\"5654\":{\"h\":\"1.4 带参的构造器\",\"a\":\"_1-4-带参的构造器\"},\"5655\":{\"t\":\"扩容是非常消耗资源的，因此尽量不要扩容，建议开发中使用带参的构造器：\"},\"5656\":{\"t\":\"ArrayList list = new ArrayList(int capacity);//参数就是容量 \"},\"5657\":{\"h\":\"1.5 JDK8中，ArrayList的变化\",\"a\":\"_1-5-jdk8中-arraylist的变化\"},\"5658\":{\"t\":\"在JDK8时，ArrayList的底层做了一些改变。\"},\"5659\":{\"t\":\"初始化时，底层Object[] elementData初始化为{}。并没有创建长度为10的数组，而是在第一次add的时候，底层才创建了长度10的数组，并将数据加到elementData[0]，后续的添加和扩容操作与JDK8之前一样。\"},\"5660\":{\"t\":\"ArrayList list = new ArrayList(); //底层是个空的Object[] list.add(123); //第一次调用add(),才真正创建了数组 \"},\"5661\":{\"h\":\"1.6 总结\",\"a\":\"_1-6-总结\"},\"5662\":{\"t\":\"jdk7中的ArrayList的对象的创建类似于单例的饿汉式，而jdk8中的ArrayList的对象的创建类似于单例的懒汉式，延迟了数组的创建，节省内存。\"},\"5663\":{\"h\":\"2. LinkedList\",\"a\":\"_2-linkedlist\"},\"5664\":{\"t\":\"LinkedList是典型的双向链表结构，数据的添加、移除等操作，也是双向链表的基本操作。\"},\"5665\":{\"h\":\"2.1 实例化\",\"a\":\"_2-1-实例化\"},\"5666\":{\"t\":\"内部声明了Node类型的first（上一个Node）和last（下一个Node）属性，默认值为null\"},\"5667\":{\"t\":\"LinkedList list = new LinkedList(); \"},\"5668\":{\"h\":\"2.2 add添加数据\",\"a\":\"_2-2-add添加数据\"},\"5669\":{\"t\":\"list.add(123);//将123封装到Node中，创建了Node对象 \"},\"5670\":{\"h\":\"2.3 Node的定义\",\"a\":\"_2-3-node的定义\"},\"5671\":{\"t\":\"体现了LinkedList的双向链表的说法\"},\"5672\":{\"t\":\"private static class Node<E> { E item; Node<E> next; Node<E> prev; Node(Node<E> prev, E element, Node<E> next) { this.item = element; this.next = next; this.prev = prev; } } \"},\"5673\":{\"h\":\"3. Vector\",\"a\":\"_3-vector\"},\"5674\":{\"h\":\"3.1 说明\",\"a\":\"_3-1-说明\"},\"5675\":{\"t\":\"Vector已经被放弃了，开发时不会用。\"},\"5676\":{\"t\":\"Vector虽然是线程安全的，但是我们需要线程安全问题时，也不用用它，而是使用synchronizedList对ArrayList数据进行处理，取得线程安全的ArrayList。\"},\"5677\":{\"h\":\"3.2 源码简介\",\"a\":\"_3-2-源码简介\"},\"5678\":{\"t\":\"jdk7和jdk8中通过Vector()构造器创建对象时，底层都创建了长度为10的数组。在扩容方面，默认扩容为原来的数组长度的2倍。\"},\"5679\":{\"h\":\"Ⅲ. List方法\",\"a\":\"iii-list方法\"},\"5680\":{\"t\":\"List除了从Collection集合继承的方法外，List 集合里添加了一些根据索引来操作集合元素的方法。并对Collection的很多方法进行了重载。\"},\"5681\":{\"t\":\"详见：内置函数>List & Map\"},\"5682\":{\"h\":\"6-5. Set\"},\"5683\":{\"h\":\"Ⅰ. Set 接口\",\"a\":\"i-set-接口\"},\"5684\":{\"h\":\"1. 介绍\",\"a\":\"_1-介绍\"},\"5685\":{\"t\":\"Set接口是Collection的子接口，Set 集合用来储存无序的的不相同的元素（使用equals()判断）。该接口的结构如下：\"},\"5686\":{\"t\":\"Collection接口：单列集合，用来存储一个一个的对象 \"},\"5687\":{\"t\":\"Set接口：存储无序的、不可重复的数据 -->数学中的“集合” \"},\"5688\":{\"t\":\"HashSet：主要实现类 \"},\"5689\":{\"t\":\"LinkedHashSet\"},\"5690\":{\"t\":\"TreeSet\"},\"5691\":{\"h\":\"2. Set数据存储的特点\",\"a\":\"_2-set数据存储的特点\"},\"5692\":{\"t\":\"储存无序的，不可重复的数据，以HashSet为例：\"},\"5693\":{\"t\":\"无序性：不等于随机性。存储的数据在底层数组中并非按照数组索引的顺序添加，而是根据数据的哈希值决定的。\"},\"5694\":{\"t\":\"不可重复性：保证添加的元素按照equals()判断时，不能返回true.即：相同的元素只能添加一个。\"},\"5695\":{\"h\":\"3. HashSet【主要实现类】\",\"a\":\"_3-hashset【主要实现类】\"},\"5696\":{\"t\":\"HashSet 是 Set 接口的典型实现，大多数时候使用 Set 集合时都使用这个实现类。\"},\"5697\":{\"t\":\"数据结构：数组+链表\"},\"5698\":{\"t\":\"HashSet 按 Hash 算法来存储集合中的元素，因此具有很好的存取、查找、删除性能。\"},\"5699\":{\"t\":\"Set接口的主要实现类；线程不安全的；可以存储null值\"},\"5700\":{\"h\":\"3.1 特点\",\"a\":\"_3-1-特点\"},\"5701\":{\"t\":\"不能保证元素的排列顺序\"},\"5702\":{\"t\":\"HashSet 不是线程安全的\"},\"5703\":{\"t\":\"集合元素可以是 null\"},\"5704\":{\"h\":\"3.2 HashSet 集合判断两个元素相等的标准\",\"a\":\"_3-2-hashset-集合判断两个元素相等的标准\"},\"5705\":{\"t\":\"两个对象通过 hashCode() 方法比较相等，并且两个对象的 equals() 方法返回值也相等。\"},\"5706\":{\"t\":\"对于存放在Set容器中的对象， 对应的类一定要重写equals() 和hashCode(Object obj) 方法，以实现对象相等规则 。即： “相等的对象必须具有相等的散列码”\"},\"5707\":{\"h\":\"4. LinkedHashSet【HashSet的子类】\",\"a\":\"_4-linkedhashset【hashset的子类】\"},\"5708\":{\"t\":\"数据结构：数组+链表\"},\"5709\":{\"t\":\"遍历其内部数据时，可以按照添加的顺序遍历\"},\"5710\":{\"t\":\"LinkedHashSet插入性能略低于 HashSet，但在迭代访问 Set 里的全部元素时有很好的性能。\"},\"5711\":{\"t\":\"LinkedHashSet 根据元素的 hashCode 值来决定元素的存储位置，但它同时使用双向链表维护元素的次序，这使得元素看起来是以插入顺序保存的。\"},\"5712\":{\"h\":\"5. TreeSet\",\"a\":\"_5-treeset\"},\"5713\":{\"t\":\"数据结构：Tree（红黑树）\"},\"5714\":{\"t\":\"TreeSet 是 SortedSet 接口的实现类，TreeSet 可以确保集合元素处于排序状态。\"},\"5715\":{\"t\":\"TreeSet类新增了很多方法。\"},\"5716\":{\"t\":\"可以按照添加对象的指定属性，进行排序。\"},\"5717\":{\"t\":\"特点：有序，查询速度比List快\"},\"5718\":{\"t\":\"自然排序：TreeSet 会调用集合元素的 compareTo(Object obj) 方法来比较元素之间的大小关系，然后将集合元素按升序(默认情况)排列 \"},\"5719\":{\"t\":\"如果试图把一个对象添加到 TreeSet 时，则该对象的类必须实现 Comparable接口。\"},\"5720\":{\"h\":\"6. Set接口的方法\",\"a\":\"_6-set接口的方法\"},\"5721\":{\"t\":\"Set接口中没有额外定义新的方法，使用的都是Collection中声明过的方法。\"},\"5722\":{\"t\":\"详见：内置函数>Collection+\"},\"5723\":{\"h\":\"7. 底层原理：数据的添加过程与底层结构\",\"a\":\"_7-底层原理-数据的添加过程与底层结构\"},\"5724\":{\"t\":\"核心：数据添加时要保证，数据的不可重复性（equals返回false）。\"},\"5725\":{\"t\":\"如果我们只是简单的用新数据比对旧数据，那么当集合中的数据过多时，就要跟之前添加的每一个数据进行equals比对，效率太低，所以java采用的别的方法，以HashSet为例：\"},\"5726\":{\"h\":\"7.1 核心原理\",\"a\":\"_7-1-核心原理\"},\"5727\":{\"t\":\"不同数据的hash值是不同的，所以java采用了一种特殊的算法，先把要添加的元素取哈希值，然后通过一种算法算出他应该储存的位置（比如取模16）。\"},\"5728\":{\"t\":\"这样，如果两个数据的哈希值不同，就一定不会放到同一个位置，即存放数据之前，只要该位置没有其他数据，就一定不会存在重复的数据\"},\"5729\":{\"t\":\"而如果两个元素通过算法计算的位置是一样的（元素不一定相同），则先去判断hash值是否相同，不同就添加成功，相同的话再去判断equals，如果不同就以链表的形式添加到该元素后面，如果相同，就添加失败。\"},\"5730\":{\"t\":\"无序性：这也是为什么Set集合是无序的原因：为了高效的进行互斥性比对。\"},\"5731\":{\"h\":\"7.2 添加过程分析\",\"a\":\"_7-2-添加过程分析\"},\"5732\":{\"t\":\"①向HashSet中添加元素a：首先调用元素所在类的hashCode()方法，计算元素a的哈希值，此哈希值，接着通过某种算法计算在HashSet底层数组中存放的位置（索引位置）。\"},\"5733\":{\"t\":\"②判断要添加的位置上有没有其他元素： \"},\"5734\":{\"t\":\"情况1：没有其他元素，直接添加成功\"},\"5735\":{\"t\":\"有其他元素b（或者以链表形式存在多个元素），这比较a与元素b的hash值 \"},\"5736\":{\"t\":\"情况2：hash值不同，添加成功\"},\"5737\":{\"t\":\"hash值相同，则需要调用a所在类的equals方法： \"},\"5738\":{\"t\":\"返回true，元素a添加失败\"},\"5739\":{\"t\":\"情况3：返回false，添加成功\"},\"5740\":{\"h\":\"7.3 储存的方式\",\"a\":\"_7-3-储存的方式\"},\"5741\":{\"t\":\"HashSet底层是以数组+链表的形式储存的。\"},\"5742\":{\"t\":\"添加元素时，元素首先以数组的形式储存【上述情况1】。如果数组的索引处已经有值了，还需要在此处添加元素【上述情况2和3】，则与已经存在指定索引位置上数据以链表的方式存储。\"},\"5743\":{\"h\":\"7.4 链表的形式：\",\"a\":\"_7-4-链表的形式\"},\"5744\":{\"t\":\"jdk 7 :元素a放到数组中，指向原来的元素。\"},\"5745\":{\"t\":\"jdk 8 :原来的元素在数组中，指向元素a\"},\"5746\":{\"t\":\"6-5-1\"},\"5747\":{\"h\":\"8. hashCode与equals的重写\",\"a\":\"_8-hashcode与equals的重写\"},\"5748\":{\"t\":\"要求：向set(主要指：HashSet、LinkedHashSet)中添加的数据，其所在的类一定要重写hashCode()和equals()，尤其是自定义的类。\"},\"5749\":{\"h\":\"8.1 HahsCode\",\"a\":\"_8-1-hahscode\"},\"5750\":{\"t\":\"对于object元素，即使两个对象完全一样（equals为true），但是只要他们不是同一个对象，其hashcode也是不同的，因为Object类底层默认是通过对象储存的地址来计算hashcode的，对象的存放地址是随机的，即hashcode值也是随机，且不同的。\"},\"5751\":{\"t\":\"因此，对于自定义类，我们要重写hashCode()方法。\"},\"5752\":{\"h\":\"8.2 equals\",\"a\":\"_8-2-equals\"},\"5753\":{\"t\":\"因为我们想通过对象的值是否相同来判断对象的异同，而非地址，因此要重写equals方法\"},\"5754\":{\"h\":\"8.3 重写原则\",\"a\":\"_8-3-重写原则\"},\"5755\":{\"t\":\"在ideal中，直接alt + insert，让编辑器帮我们重写即可。具体重写的规则和细节，暂时不需要掌握。\"},\"5756\":{\"t\":\"如果自己手动重写，则有以下注意点：\"},\"5757\":{\"t\":\"重写的hashCode()和equals()尽可能保持一致性：相等的对象必须具有相等的散列码\"},\"5758\":{\"t\":\"小技巧：对象中用作 equals() 方法比较的 Field，都应该用来计算 hashCode 值。\"},\"5759\":{\"h\":\"9. 补充：hashCode与值\",\"a\":\"_9-补充-hashcode与值\"},\"5760\":{\"t\":\"结论：hashCode相同，值不一定相同，值相同，那么hashCode一定相同。\"},\"5761\":{\"t\":\"不同的类对hashCode的重写方式（算法）不同，可能会造成不同对象拥有相同的HashCode。\"},\"5762\":{\"h\":\"9.1 哈希算法\",\"a\":\"_9-1-哈希算法\"},\"5763\":{\"t\":\"详情，查询：密码学，哈希算法；\"},\"5764\":{\"t\":\"哈希值的长度是固定的，也就是取值范围是有限的，而输入数据的取值范围是无限的，所以总会找到两个不同的输入拥有相同的哈希。所以，哈希函数的安全性肯定是个相对概念。如果出现了两个不同输入有相同输出的情况，就叫碰撞，collision 。不同的哈希算法，哈希位数越多，也就基本意味着安全级别越高，或者说它的”抗碰撞性“就越好。\"},\"5765\":{\"t\":\"我们在重写hashCode，设计哈希算法时，要综合考虑效率和”哈希冲突“。\"},\"5766\":{\"h\":\"9.2 哈希冲突\",\"a\":\"_9-2-哈希冲突\"},\"5767\":{\"t\":\"当两个不同对象的哈希值相同时，就称为：哈希冲突。\"},\"5768\":{\"t\":\"频繁的哈希冲突会降低数据存取的效率，需要优化哈希算法。\"},\"5769\":{\"h\":\"Ⅱ. Set 使用\",\"a\":\"ii-set-使用\"},\"5770\":{\"t\":\"Set接口中没有额外定义新的方法，使用的都是Collection中声明过的方法。\"},\"5771\":{\"t\":\"基本的使用，就是Collection接口中方法的使用。\"},\"5772\":{\"h\":\"1. LinkedHashSet\",\"a\":\"_1-linkedhashset\"},\"5773\":{\"t\":\"LinkedHashSet作为HashSet的子类，也不允许出现重复的元素。\"},\"5774\":{\"t\":\"遍历LinkedHashSet集合，会根据添加数据的顺序进行遍历。\"},\"5775\":{\"t\":\"底层：LinkedHashSet 根据元素的 hashCode 值来决定元素的存储位置，但它同时使用双向链表维护元素的次序，这使得元素看起来是以插入顺序保存的记录了一个双向链表。\"},\"5776\":{\"t\":\"特点：LinkedHashSet插入性能略低于 HashSet，但对于频繁的遍历操作，LinkedHashSet效率高于HashSet。\"},\"5777\":{\"t\":\"注意：当TreeSet的构造函数有没有参数时，该集合的类必须实现Comparable接口，并重写compareTo方法，当TreeSet有参数时，该参数必须是Comparator的对象。\"},\"5778\":{\"t\":\"使用示例：\"},\"5779\":{\"t\":\"LinkedHashSet set = new LinkedHashSet(); set.add(456); set.add(123); set.add(123); set.add(\\\"AA\\\"); set.add(\\\"CC\\\"); set.add(new User(\\\"Tom\\\",12)); set.add(new User(\\\"Tom\\\",12)); set.add(129); //打印结果：[456, 123, AA, CC, User{name='Tom', age=12}, 129] System.out.println(set); Iterator it = set.iterator(); while(it.hasNext()){ System.out.println(it.next()); } \"},\"5780\":{\"t\":\"注意：自定义类中一定要重写equal和hashcode方法\"},\"5781\":{\"h\":\"2. TreeSet\",\"a\":\"_2-treeset\"},\"5782\":{\"t\":\"如果使用TreeSet，一定要重写compareTo方法或compare方法，不然会抛出异常（JDK1.8）。 TreeSet遍历数据，会根据自己定义的排序方式进行排序。\"},\"5783\":{\"t\":\"向TreeSet中添加的数据，要求是相同类的对象。不然就报异常。TreeSet中不允许添加相同的对象。\"},\"5784\":{\"t\":\"底层：TreeSet底层是红黑树\"},\"5785\":{\"h\":\"2.1 比较对象是否相同的方法\",\"a\":\"_2-1-比较对象是否相同的方法\"},\"5786\":{\"t\":\"TreeSet中，不是通过比较两个对象的equals和hashcode来判断是否相同的，而是通过排序方法。\"},\"5787\":{\"t\":\"①自然排序：compareTo()返回0，即两个对象相同\"},\"5788\":{\"t\":\"②定制排序：compare()返回0，即两个对象相同\"},\"5789\":{\"h\":\"2.2 示例：自然排序\",\"a\":\"_2-2-示例-自然排序\"},\"5790\":{\"t\":\"TreeSet set = new TreeSet(); set.add(new User(\\\"Tom\\\",12)); set.add(new User(\\\"Jerry\\\",32)); set.add(new User(\\\"Jack\\\",33)); set.add(new User(\\\"Jack\\\",33)); //[User{name='Tom', age=12}, User{name='Jerry', age=32}, //User{name='Jack', age=33}] System.out.println(set); //重复的数据被排除 ============================================ //compareTo的重写 public int compareTo(Object o) { if(o instanceof User){ User user = (User)o; int compare = -this.name.compareTo(user.name); if(compare != 0){ return compare; }else{ return Integer.compare(this.age,user.age); } }else{ throw new RuntimeException(\\\"输入的类型不匹配\\\"); } } \"},\"5791\":{\"h\":\"2.3 示例：定制排序\",\"a\":\"_2-3-示例-定制排序\"},\"5792\":{\"t\":\"定制排序，就是使用Comparetor接口进行排序。\"},\"5793\":{\"t\":\"如果使用定制排序，那么TreeSet的构造函数需要传入参数，参数就是Comparator接口的实例。\"},\"5794\":{\"t\":\"//Comparator接口的实例 Comparator com = new Comparator(){ public int compare(Object o1,Object o2){ if(o1 instanceof User && o2 instanceof User){ User u1 = (User)o1; User u2 = (User)o2; return Integer.compare(u1.getAge(),u2.getAge()); }else{ throw new RuntimeException(\\\"输入的数据类型不匹配\\\"); } } }; TreeSet set = new TreeSet(com); //将Comparator对象作为参数 ...//其它的同上，可以进行add和其他操作了。 \"},\"5795\":{\"h\":\"6-6. Map\"},\"5796\":{\"h\":\"Ⅰ. Map 接口\",\"a\":\"i-map-接口\"},\"5797\":{\"h\":\"1. 概述\",\"a\":\"_1-概述\"},\"5798\":{\"t\":\"Map与Collection并列存在。用于保存具有 映射关系的数据:key-value\"},\"5799\":{\"t\":\"Map 中的 key 和 value 都可以是任何引用类型的数据\"},\"5800\":{\"t\":\"Map 中的 key 用Set来存放，不允许重复，即同一个 Map 对象所对应的类，须重写hashCode()和equals()方法 \"},\"5801\":{\"t\":\"常用String类作为Map的“键”\"},\"5802\":{\"t\":\"key 和 value 之间存在单向一对一关系，即通过指定的 key 总能找到唯一的、确定的 value\"},\"5803\":{\"t\":\"Map接口的常用实现类：HashMap、TreeMap、LinkedHashMap和Properties。 \"},\"5804\":{\"t\":\"其中，HashMap是 Map 接口使用频率最高的实现类。\"},\"5805\":{\"h\":\"2. Map接口的继承结构\",\"a\":\"_2-map接口的继承结构\"},\"5806\":{\"t\":\"Map:双列数据，存储key-value对的数据 ---类似于高中的函数：y = f(x) \"},\"5807\":{\"t\":\"HashMap 【第一个实现类】 \"},\"5808\":{\"t\":\"LinkedHashMap【第二个实现类】\"},\"5809\":{\"t\":\"TreeMap【第三个实现类】\"},\"5810\":{\"t\":\"Hashtable【第四个实现类】 \"},\"5811\":{\"t\":\"Properties【第五个实现类】 \"},\"5812\":{\"h\":\"3. 实现类简介\",\"a\":\"_3-实现类简介\"},\"5813\":{\"h\":\"3.1 HashMap【使用频率最高的实现类】\",\"a\":\"_3-1-hashmap【使用频率最高的实现类】\"},\"5814\":{\"t\":\"底层结构：数组+链表 （jdk7及之前）；数组+链表+红黑树 （jdk 8）\"},\"5815\":{\"t\":\"线程不安全的，效率高；\"},\"5816\":{\"t\":\"允许使用null键和null值，与HashSet一样，不保证映射的顺序。\"},\"5817\":{\"t\":\"所有的key构成的集合是Set:无序的、不可重复的。所以，key所在的类要重写：equals()和hashCode() \"},\"5818\":{\"t\":\"HashMap 判断两个 key 相等的标准是：两个 key 通过 equals() 方法返回 true，hashCode 值也相等。\"},\"5819\":{\"t\":\"所有的value构成的集合是Collection:无序的、可以重复的。所以，value所在的类要重写：equals() \"},\"5820\":{\"t\":\"HashMap 判断两个 value 相等的标准是：两个 value 通过 equals() 方法返回 true。\"},\"5821\":{\"t\":\"一个key-value构成一个entry，所有的entry构成的集合是Set:无序的、不可重复的\"},\"5822\":{\"t\":\"注意：HashMap是无序的，添加顺序和遍历顺序并没有关联。\"},\"5823\":{\"h\":\"3.2 LinkedHashMap\",\"a\":\"_3-2-linkedhashmap\"},\"5824\":{\"t\":\"底层结构：同上\"},\"5825\":{\"t\":\"LinkedHashMap 是 HashMap 的子类\"},\"5826\":{\"t\":\"遍历map元素时，可以按照添加的顺序实现遍历。 \"},\"5827\":{\"t\":\"原因：在原有的HashMap底层结构基础上，添加了双向链表结构。\"},\"5828\":{\"t\":\"特点：对于频繁的遍历操作，此类执行效率高于HashMap。\"},\"5829\":{\"h\":\"3.3 TreeMap\",\"a\":\"_3-3-treemap\"},\"5830\":{\"t\":\"底层结构：红黑树\"},\"5831\":{\"t\":\"TreeMap存储 Key-Value 对时，需要根据 key-value 对进行 \"},\"5832\":{\"t\":\"key可以自然排序或定制排序\"},\"5833\":{\"t\":\"TreeMap 可以保证所有的 Key-Value 对处于有序状态。\"},\"5834\":{\"t\":\"TreeMap判断 两个key 相等的标准：两个key通过compareTo()方法或者compare()方法返回0。\"},\"5835\":{\"h\":\"3.4 Hashtable\",\"a\":\"_3-4-hashtable\"},\"5836\":{\"t\":\"实现原理和结构与HashMap相同，功能也相同，基本被抛弃。\"},\"5837\":{\"t\":\"作为古老的实现类；线程安全的，效率低；不能存储null的key和value\"},\"5838\":{\"h\":\"3.5 Properties\",\"a\":\"_3-5-properties\"},\"5839\":{\"t\":\"Hahstable的子类，常用来处理配置文件。\"},\"5840\":{\"t\":\"由于属性文件里的 key、value 都是字符串类型，所以 Properties 里的key和value都是String类型\"},\"5841\":{\"t\":\"存取数据时，建议使用setProperty(String key,String value)方法和getProperty(String key)方法\"},\"5842\":{\"h\":\"4. Map常用方法\",\"a\":\"_4-map常用方法\"},\"5843\":{\"t\":\"详见：内置函数>List & Map\"},\"5844\":{\"h\":\"5. key-value的储存特点\",\"a\":\"_5-key-value的储存特点\"},\"5845\":{\"t\":\"以HashMap为例\"},\"5846\":{\"t\":\"Key：无序的、不可重复的，使用Set存储所有的key； \"},\"5847\":{\"t\":\"key所在的类要重写equals()和hashCode() （以HashMap为例）\"},\"5848\":{\"t\":\"Value：无序的、可重复的，使用Collection存储所有的value \"},\"5849\":{\"t\":\"value所在的类要重写equals()，因为要进行查询。\"},\"5850\":{\"t\":\"Entry：键值对key-value，构成了一个Entry对象。 \"},\"5851\":{\"t\":\"Map中的entry:无序的、不可重复的，使用Set存储所有的entry\"},\"5852\":{\"h\":\"Ⅱ. HashMap底层\",\"a\":\"ii-hashmap底层\"},\"5853\":{\"h\":\"1. JDK7中底层实现原理\",\"a\":\"_1-jdk7中底层实现原理\"},\"5854\":{\"h\":\"1.1 初始化\",\"a\":\"_1-1-初始化\"},\"5855\":{\"t\":\"在实例化以后，底层创建了长度是16的一维数组Entry[] table。\"},\"5856\":{\"t\":\"HashMap<Integer, String> map = new HashMap<>(); \"},\"5857\":{\"h\":\"1.2 添加数据\",\"a\":\"_1-2-添加数据\"},\"5858\":{\"t\":\"map.put(key1,value1): 首先，调用key1所在类的hashCode()计算key1哈希值，此哈希值经过某种算法计算以后，得到在Entry数组中的存放位置。\"},\"5859\":{\"t\":\"情况1：如果此位置上的数据为空，此时的key1-value1添加成功。\"},\"5860\":{\"t\":\"如果此位置上的数据不为空，(意味着此位置上存在一个或多个数据(以链表形式存在)),此时应比较key1和已经存在的一个或多个数据的哈希值： \"},\"5861\":{\"t\":\"情况2：如果key1的哈希值与已经存在的数据的哈希值都不相同，此时key1-value1添加成功。\"},\"5862\":{\"t\":\"如果key1的哈希值和已经存在的某一个数据(key2-value2)的哈希值相同，继续比较：调用key1所在类的equals(key2)方法，比较： \"},\"5863\":{\"t\":\"情况3-1：如果equals()返回false:此时key1-value1添加成功。\"},\"5864\":{\"t\":\"情况3-2：如果equals()返回true:使用value1替换value2。\"},\"5865\":{\"h\":\"1.3 链表的产生\",\"a\":\"_1-3-链表的产生\"},\"5866\":{\"t\":\"关于情况2和情况3-1：此时key1-value1和原来的数据以链表的方式存储。\"},\"5867\":{\"h\":\"1.4 扩容\",\"a\":\"_1-4-扩容\"},\"5868\":{\"t\":\"在不断的添加过程中，会涉及到扩容问题，当超出临界值(且要存放的位置非空)时，扩容。默认的扩容方式：扩容为原来容量的2倍，并将原有的数据复制过来。\"},\"5869\":{\"h\":\"1.5 储存结构图\",\"a\":\"_1-5-储存结构图\"},\"5870\":{\"t\":\"①JDK7：HashMap是数组+链表结构(即为链地址法)\"},\"5871\":{\"t\":\"6-6-2\"},\"5872\":{\"t\":\"②JDK8：HashMap是数组+链表+红黑树实现。\"},\"5873\":{\"t\":\"6-6-3\"},\"5874\":{\"h\":\"2. JDK8中的底层实现原理\",\"a\":\"_2-jdk8中的底层实现原理\"},\"5875\":{\"t\":\"相较于jdk7在底层实现方面的不同点为：\"},\"5876\":{\"t\":\"new HashMap():底层没有创建一个长度为16的数组\"},\"5877\":{\"t\":\"首次调用put()方法时，底层创建长度为16的数组\"},\"5878\":{\"t\":\"jdk 8底层的数组是：Node[],而非Entry[]\"},\"5879\":{\"t\":\"jdk7底层结构只有：数组+链表。jdk8中底层结构：数组+链表+红黑树。 \"},\"5880\":{\"t\":\"形成链表时，七上八下（jdk7:新元素指向旧元素。jdk8：旧元素指向新元素）\"},\"5881\":{\"t\":\"红黑树的形成：当数组的某一个索引位置上的元素以链表形式存在的数据个数 > 8且当前数组的长度 > 64时，此时此索引位置上的所数据改为使用红黑树存储（比对速度更快）。\"},\"5882\":{\"h\":\"3. 源码分析\",\"a\":\"_3-源码分析\"},\"5883\":{\"t\":\"暂略。\"},\"5884\":{\"h\":\"4. 源码中的一些重要常量\",\"a\":\"_4-源码中的一些重要常量\"},\"5885\":{\"t\":\"DEFAULT_INITIAL_CAPACITY : HashMap的默认容量，16\"},\"5886\":{\"t\":\"MAXIMUM_CAPACITY ： ： HashMap的最大支持容量，2^30\"},\"5887\":{\"t\":\"DEFAULT_LOAD_FACTOR ：HashMap的默认加载因子\"},\"5888\":{\"t\":\"TREEIFY_THRESHOLD ：Bucket中链表长度大于该默认值，转化为红黑树 -UNTREEIFY_THRESHOLD ：Bucket中红黑树存储的Node小于该默认值，转化为链表\"},\"5889\":{\"t\":\"MIN_TREEIFY_CAPACITY ：桶中的Node被树化时最小的hash表容量。（当桶中Node的数量大到需要变红黑树时，若hash表容量小于MIN_TREEIFY_CAPACITY时，此时应执行resize扩容操作这个- MIN_TREEIFY_CAPACITY的值至少是TREEIFY_THRESHOLD的4倍。）\"},\"5890\":{\"t\":\"table ：存储元素的数组，总是2的n次幂\"},\"5891\":{\"t\":\"entrySet： ：存储具体元素的集\"},\"5892\":{\"t\":\"size ：HashMap中存储的键值对的数量\"},\"5893\":{\"t\":\"modCount ：HashMap扩容和结构改变的次数。\"},\"5894\":{\"t\":\"threshold ：扩容的临界值，=容量*填充因子\"},\"5895\":{\"t\":\"loadFactor： ：填充因子\"},\"5896\":{\"h\":\"Ⅲ. LinkedHashMap\",\"a\":\"iii-linkedhashmap\"},\"5897\":{\"h\":\"1. 底层\",\"a\":\"_1-底层\"},\"5898\":{\"t\":\"暂略，比HahsMap多了个双向链表，\"},\"5899\":{\"t\":\"顺序：迭代顺序与 Key-Value 对的插入顺序一致\"},\"5900\":{\"h\":\"2. 使用\",\"a\":\"_2-使用\"},\"5901\":{\"t\":\"LinkedHashMap map = new LinkedHashMap(); map.put(123,\\\"AA\\\"); map.put(345,\\\"BB\\\"); map.put(12,\\\"CC\\\"); //遍历顺序与添加顺序一致 System.out.println(map); //{123=AA, 345=BB, 12=CC} \"},\"5902\":{\"h\":\"Ⅳ. TreeMap\",\"a\":\"iv-treemap\"},\"5903\":{\"h\":\"1. 特点\",\"a\":\"_1-特点\"},\"5904\":{\"t\":\"TreeMap存储 Key-Value 对时，需要根据 key-value 对进行排序。 \"},\"5905\":{\"t\":\"TreeMap 可以保证所有的 Key-Value 对处于 有序状态。\"},\"5906\":{\"t\":\"TreeSet底层使用 红黑树结构存储数据\"},\"5907\":{\"t\":\"TreeMap判断 两个key 相等的标准：两个key通过compareTo()方法或者compare()方法返回0。\"},\"5908\":{\"h\":\"2. 排序\",\"a\":\"_2-排序\"},\"5909\":{\"t\":\"向TreeMap中添加key-value，要求key必须是由同一个类创建的对象，因为要按照key进行排序。排序分为：自然排序和定制排序\"},\"5910\":{\"t\":\"实际开发中，我们一般使用String作为key，String内部已经重新了排序了。\"},\"5911\":{\"h\":\"2.1 自然排序\",\"a\":\"_2-1-自然排序\"},\"5912\":{\"t\":\"需要key所在的类，实现Comparable，重写compareTo方法\"},\"5913\":{\"t\":\"TreeMap map = new TreeMap(); User u1 = new User(\\\"Tom\\\",23); User u2 = new User(\\\"Jerry\\\",32); User u3 = new User(\\\"Jack\\\",20); User u4 = new User(\\\"Rose\\\",18) ===== User类中已经重写了compareTo ===== map.put(u1,98); map.put(u2,89); map.put(u3,76); map.put(u4,100); Set entrySet = map.entrySet(); Iterator iterator1 = entrySet.iterator(); while (iterator1.hasNext()){ Object obj = iterator1.next(); Map.Entry entry = (Map.Entry) obj; //根据自定义的排序方式进行了排序输出 System.out.println(entry.getKey() + \\\"---->\\\" + entry.getValue()); } \"},\"5914\":{\"h\":\"2.2 定制排序\",\"a\":\"_2-2-定制排序\"},\"5915\":{\"t\":\"TreeMap的构造器接收一个参数，参数即为Comparator接口的实例，接口中重写类的排序方法compare。\"},\"5916\":{\"t\":\"TreeMap map = new TreeMap(new Comparator() { @Override public int compare(Object o1, Object o2) { if(o1 instanceof User && o2 instanceof User){ User u1 = (User)o1; User u2 = (User)o2; return Integer.compare(u1.getAge(),u2.getAge()); } throw new RuntimeException(\\\"输入的类型不匹配！\\\"); } }); //其他代码的同上 \"},\"5917\":{\"h\":\"Ⅴ. Properties\",\"a\":\"v-properties\"},\"5918\":{\"t\":\"该类是专门用来处理项目中的配置文件的。\"},\"5919\":{\"h\":\"1. 定义配置文件\",\"a\":\"_1-定义配置文件\"},\"5920\":{\"t\":\"先定义一个配置文件，用于测试，例如：jdbc.properties（数据库连接的配置）\"},\"5921\":{\"t\":\"uname=jinno password=123abc \"},\"5922\":{\"h\":\"2. Properties类的方法\",\"a\":\"_2-properties类的方法\"},\"5923\":{\"t\":\"getProperty(String key)：获取配置的值\"},\"5924\":{\"t\":\"setProperty(String key,String value)：设置配置的值\"},\"5925\":{\"h\":\"3. 读取配置文件，并加载配置信息\",\"a\":\"_3-读取配置文件-并加载配置信息\"},\"5926\":{\"t\":\"利用Properties类可以读取配置信息。\"},\"5927\":{\"t\":\"//1.创建Properties类的对象 Properties pros = new Properties(); //2.加载文件的流 FileInputStream fis = new FileInputStream(\\\"jdbc.properties\\\"); //3.加载流对应的文件 pros.load(fis); //4.读取配置信息 String uname = pros.getProperty(\\\"name\\\"); String password = pros.getProperty(\\\"password\\\"); System.out.println(uanme); //jinno System.out.println(password); //123abc \"},\"5928\":{\"h\":\"6-7. Collections\"},\"5929\":{\"t\":\"提示\"},\"5930\":{\"t\":\"不要跟Collection搞混了，前者是个集合接口，后者是操作接口的工具类\"},\"5931\":{\"t\":\"详见：内置函数>Collection+\"},\"5932\":{\"h\":\"介绍\",\"a\":\"介绍\"},\"5933\":{\"t\":\"Collections 是一个操作 Set、List 和 Map 等集合的工具类\"},\"5934\":{\"t\":\"Map相关的方法比较少。\"},\"5935\":{\"h\":\"静态方法\",\"a\":\"静态方法\"},\"5936\":{\"t\":\"Collections 中提供了一系列静态的方法对集合元素进行排序、查询和修改等操作，还提供了对集合对象设置不可变、对集合对象实现同步控制等方法。\"},\"5937\":{\"h\":\"7-1. 使用泛型\"},\"5938\":{\"h\":\"Ⅰ. Generic 泛型\",\"a\":\"i-generic-泛型\"},\"5939\":{\"h\":\"意义\",\"a\":\"意义\"},\"5940\":{\"t\":\"我们在定义数据类型时，有时不确定究竟定义为何种类型，以前的做法是定义为Object，这样什么类型的数据都支持。但是这样做，比较危险（类型错误），且麻烦（经常需要强制类型转换）。现在我们可以定义一个泛型，用一个符占位表示，可以在实例化时传递一个数据类型，这样在实际使用时，就可以确定他的数据类型了。\"},\"5941\":{\"t\":\"核心：数据类型，先占位，用的时候再定义。\"},\"5942\":{\"t\":\"使用泛型的主要优点是能够在编译时而不是在运行时检测错误。\"},\"5943\":{\"h\":\"1. 泛型的设计背景\",\"a\":\"_1-泛型的设计背景\"},\"5944\":{\"t\":\"集合容器类在设计阶段/声明阶段不能确定这个容器到底实际存的是什么类型的对象，所以在JDK1.5之前只能把元素类型设计为Object。JDK1.5之后使用泛型来解决。因为这个时候除了元素的类型不确定，其他的部分是确定的，例如关于这个元素如何保存，如何管理等是确定的，因此此时把元素的类型设计成一个参数，这个类型参数叫做泛型。\"},\"5945\":{\"h\":\"2. 泛型的概念\",\"a\":\"_2-泛型的概念\"},\"5946\":{\"t\":\"所谓泛型，就是允许在定义类、接口时通过一个标识表示类中某个属性的类型或者是某个方法的返回值及参数类型。这个类型参数将在使用时（例如，继承或实现这个接口，用这个类型声明变量、创建对象时）确定（即传入实际的类型参数，也称为类型实参）。\"},\"5947\":{\"t\":\"参数化类型：从JDK1.5以后，Java引入了“参数化类型（Parameterized type）”的概念，允许我们在创建集合时再指定集合元素的类型，如：List<String>，这表明该List只能保存字符串类型的对象。\"},\"5948\":{\"t\":\"泛型的发展：JDK1.5改写了集合框架中的全部接口和类，为这些接口、类增加了泛型支持，从而可以在声明集合变量、创建集合对象时传入类型实参。集合也是泛型使用最多的场景。\"},\"5949\":{\"h\":\"3. 为什么要有泛型\",\"a\":\"_3-为什么要有泛型\"},\"5950\":{\"t\":\"那么为什么要有泛型呢 ，直接Object 不是也可以存储数据吗 ？\"},\"5951\":{\"h\":\"3.1 解决元素安全性问题\",\"a\":\"_3-1-解决元素安全性问题\"},\"5952\":{\"t\":\"解决元素存储的安全性问题，好比商品、药品标签，不会弄错。\"},\"5953\":{\"h\":\"3.2 解决获取元素时强制类型转换的问题\",\"a\":\"_3-2-解决获取元素时强制类型转换的问题\"},\"5954\":{\"t\":\"解决获取数据元素时，需要类型强制转换的问题，好比不用每回拿商品、药品都要辨别。\"},\"5955\":{\"t\":\"Java泛型可以保证如果程序在编译时没有发出警告，运行时就不会产生 ClassCastException异常。同时，代码更加简洁、健壮。\"},\"5956\":{\"h\":\"4. 集合中的泛型\",\"a\":\"_4-集合中的泛型\"},\"5957\":{\"t\":\"泛型主要用于集合，也可以用于自定义类。\"},\"5958\":{\"h\":\"4.1 没有泛型时\",\"a\":\"_4-1-没有泛型时\"},\"5959\":{\"t\":\"7-1-1\"},\"5960\":{\"h\":\"4.2 有泛型时\",\"a\":\"_4-2-有泛型时\"},\"5961\":{\"t\":\"7-1-2\"},\"5962\":{\"h\":\"5. 不使用泛型的缺点\",\"a\":\"_5-不使用泛型的缺点\"},\"5963\":{\"t\":\"以ArrayList集合为例，假设我们的集合需要存放学生的成绩（int）。\"},\"5964\":{\"t\":\"ArrayList list = new ArrayList(); //需求：存放学生的成绩 list.add(78); list.add(76); list.add(89); list.add(88); //问题一：类型不安全，Tom不是int类型的 list.add(\\\"Tom\\\"); for(Object score : list){ //问题二：强转时，可能出现ClassCastException，某个值不是int //问题二+：每次都要强转，比较繁琐 int stuScore = (Integer) score; System.out.println(stuScore); } \"},\"5965\":{\"h\":\"Ⅱ. 集合中使用泛型\",\"a\":\"ii-集合中使用泛型\"},\"5966\":{\"h\":\"1. 使用示例：List集合\",\"a\":\"_1-使用示例-list集合\"},\"5967\":{\"t\":\"//1.实例化ArrayList类时，可以指定泛型 ArrayList<Integer> list = new ArrayList<>(); list.add(10); list.add(20); list.add(30); //2.add方法是有泛型限制的，String类型添加失败 //泛型的类型检查，在编译时就会进行，保证了数据安全 //list.add(\\\"tom\\\"); //3.进行遍历 //3.1-1 这里可以直接指定泛型类型，而不是用Object for(Integer num:list){ //3.1-2 不用进行强转 Integer n = num; System.out.println(n); } //3.2-1 创建迭代器时，也会使用泛型 Iterator<Integer> it = list.iterator(); while(it.hasNext()){ //3.2-2 不用进行强转了 Integer n = it.next(); System.out.println(n); } \"},\"5968\":{\"h\":\"2. 使用示例：Map集合\",\"a\":\"_2-使用示例-map集合\"},\"5969\":{\"t\":\"注意：Map集合是K-V 数据结构，因此规定了两个泛型\"},\"5970\":{\"t\":\"//1.实例化HashMap类时，指定了Key和Value的泛型 HashMap<String, Integer> map = new HashMap<>(); map.put(\\\"Jerry\\\",20); map.put(\\\"Tom\\\",40); map.put(\\\"Jinno\\\",50); //2.put方法是有泛型限制的，错误的类型添加失败 //map.put(20,\\\"jinno\\\"); //3.泛型的嵌套:entrySet方法得到的是一个嵌套的泛型 Set<Map.Entry<String, Integer>> entry = map.entrySet(); //4.Iterator方法也得到了了嵌套的泛型 Iterator<Map.Entry<String, Integer>> iterator = entry.iterator(); while(iterator.hasNext()){ //5.嵌套的泛型成为了数据类型 Map.Entry<String, Integer> e = iterator.next(); //6.这里省去了类型强转 String key = e.getKey(); Integer value = e.getValue(); System.out.println(key+\\\"--->\\\"+value); } \"},\"5971\":{\"h\":\"3. 使用总结\",\"a\":\"_3-使用总结\"},\"5972\":{\"t\":\"集合类的泛型 \"},\"5973\":{\"t\":\"集合接口或集合类在jdk5.0时都修改为带泛型的结构，因此我们在使用的时候可以指定泛型。\"},\"5974\":{\"t\":\"在类的定义时，没有指定泛型，用的时候就不能指定。\"},\"5975\":{\"t\":\"指定泛型 \"},\"5976\":{\"t\":\"在实例化集合类时，可以指明具体的泛型类型。\"},\"5977\":{\"t\":\"一旦指明后，在集合类或接口中凡是定义类或接口时，内部结构（比如：方法、构造器、属性等）使用到类的泛型的位置，都指定为实例化的泛型类型。\"},\"5978\":{\"t\":\"这些内部结构也都受到泛型的约束。\"},\"5979\":{\"t\":\"泛型的类型 \"},\"5980\":{\"t\":\"泛型的类型必须是类，不能是基本数据类型。需要用到基本数据类型的位置，拿包装类替换\"},\"5981\":{\"t\":\"比如：int->Integer\"},\"5982\":{\"t\":\"默认泛型 \"},\"5983\":{\"t\":\"如果实例化时，没有指明泛型的类型。默认类型为java.lang.Object类型。\"},\"5984\":{\"h\":\"7-2. 自定义泛型\"},\"5985\":{\"h\":\"Ⅰ. 自定义泛型类\",\"a\":\"i-自定义泛型类\"},\"5986\":{\"h\":\"1. 语法\",\"a\":\"_1-语法\"},\"5987\":{\"t\":\"泛型一般用T、E、K、V字母表示。\"},\"5988\":{\"h\":\"1.1 声明泛型接口和泛型类\",\"a\":\"_1-1-声明泛型接口和泛型类\"},\"5989\":{\"t\":\"泛型类可能有多个参数，此时应将多个参数一起放在尖括号内，比如：<E1,E2,E3>\"},\"5990\":{\"t\":\"interface List<T>{...} class GenTest<K,V>{...} \"},\"5991\":{\"h\":\"1.2 泛型类的实例化\",\"a\":\"_1-2-泛型类的实例化\"},\"5992\":{\"t\":\"构造器中只加个<>即可，指定类型参数的值。\"},\"5993\":{\"t\":\"注意：泛型的类型只能是类，不能用基本数据类型填充。但可以使用包装类填充。\"},\"5994\":{\"t\":\"List<String> strList = new ArrayList<String>(); List<String> strList = new ArrayList<>();//JDK1.7之后的语法 \"},\"5995\":{\"h\":\"1.3 泛型类的构造器\",\"a\":\"_1-3-泛型类的构造器\"},\"5996\":{\"t\":\"public GenericClass(){}//正确的 public GenericClass<E>(){} //错误的 \"},\"5997\":{\"h\":\"2. 示例：自定义泛型类\",\"a\":\"_2-示例-自定义泛型类\"},\"5998\":{\"h\":\"2.1 定义泛型类\",\"a\":\"_2-1-定义泛型类\"},\"5999\":{\"t\":\"//将该类定义为泛型类 public class Order <E>{ String orderName; int orderId; //定义一个泛型 类型的属性 E orderE; //泛型 类型 作为参数 public Order(String orderName,int orderId,E orderE){ this.orderName = orderName; this.orderId = orderId; this.orderE = orderE; } //泛型 类型 作为返回值 public void setOrderE(E orderE){ this.orderE = orderE; } } \"},\"6000\":{\"h\":\"2.2 实例化泛型类\",\"a\":\"_2-2-实例化泛型类\"},\"6001\":{\"t\":\"public static void main(String[] args) { //定义泛型类，但可以不指定泛型，泛型默认是Object类型(不推荐) Order order = new Order(); //实例化时，指定泛型的类型（建议） Order<String> order1 = new Order<>(\\\"AA\\\", 10, \\\"E\\\"); //调用参数设置为泛型的函数，此时参数类型变为String order1.setOrderE(\\\"E-E\\\"); } \"},\"6002\":{\"h\":\"3. 自定义泛型类（接口）的注意事项\",\"a\":\"_3-自定义泛型类-接口-的注意事项\"},\"6003\":{\"t\":\"实例化后，操作原来泛型位置的结构必须与指定的泛型类型一致。\"},\"6004\":{\"t\":\"泛型不同的引用不能相互赋值。\"},\"6005\":{\"t\":\"ArrayList<String> list1 = new ArrayList<>(); ArrayList<String> list2 = new ArrayList<>(); ArrayList<Integer> list3 = new ArrayList<>(); list1 = list2; list1 = list2; //没报错 list3 = list2; //报错：编译不通过 \"},\"6006\":{\"t\":\"泛型擦除：泛型如果不指定，将被擦除，泛型对应的类型均按照Object处理，但不等价于Object。 \"},\"6007\":{\"t\":\"经验：泛型要使用一路都用。要不用，一路都不要用。\"},\"6008\":{\"t\":\"包装类：泛型的指定中不能使用基本数据类型，可以使用包装类替换\"},\"6009\":{\"t\":\"泛型修饰类/接口的成员：在类/接口上声明的泛型，在本类或本接口中即代表某种类型，可以作为非静态属性的类型、非静态方法的参数类型、非静态方法的返回值类型。 \"},\"6010\":{\"t\":\"但在静态方法中不能使用类的泛型，因为类可以直接调用静态方法。\"},\"6011\":{\"t\":\"异常类不能是泛型：包括自定义的异常类和try...catch中的异常类。\"},\"6012\":{\"t\":\"泛型类型的数组：不能直接 new E[]，创建泛型数组，而是要利用Object进行强转。\"},\"6013\":{\"t\":\"E[] arrs = (E[])new Object[10]; \"},\"6014\":{\"h\":\"4. 继承泛型类\",\"a\":\"_4-继承泛型类\"},\"6015\":{\"t\":\"父类有泛型，子类可以选择保留泛型也可以选择指定泛型类型\"},\"6016\":{\"t\":\"class Father<T1, T2> {...} \"},\"6017\":{\"h\":\"4.1 不保留泛型：擦除泛型\",\"a\":\"_4-1-不保留泛型-擦除泛型\"},\"6018\":{\"t\":\"Son1不是泛型类\"},\"6019\":{\"t\":\"//等价于：lass Son extends Father<Object,Object>{...} class Son1 extends Father{...} Son1 son1 = new Son1(); \"},\"6020\":{\"h\":\"4.2 不保留泛型：指定父类泛型具体类型\",\"a\":\"_4-2-不保留泛型-指定父类泛型具体类型\"},\"6021\":{\"t\":\"Son2不是泛型类\"},\"6022\":{\"t\":\"class Son2 extends Father<Integer, String> {...} Son2 son2 = new Son2(); \"},\"6023\":{\"h\":\"4.3 保留泛型：全部保留\",\"a\":\"_4-3-保留泛型-全部保留\"},\"6024\":{\"t\":\"Son3仍是泛型类\"},\"6025\":{\"t\":\"class Son3<T1, T2> extends Father<T1, T2> {..} Son3<String, String> son3 = new Son3<>(); \"},\"6026\":{\"h\":\"4.4 保留泛型：部分保留\",\"a\":\"_4-4-保留泛型-部分保留\"},\"6027\":{\"t\":\"Son4仍是泛型类\"},\"6028\":{\"t\":\"class Son4<T2> extends Father<Integer, T2> {...} Son4<String> son4 = new Son4<>(); \"},\"6029\":{\"h\":\"Ⅱ. 自定义泛型方法\",\"a\":\"ii-自定义泛型方法\"},\"6030\":{\"h\":\"1. 定义\",\"a\":\"_1-定义\"},\"6031\":{\"t\":\"概念：当一个方法，不确定变量的类型时，可以使用泛型，该方法就是泛型方法。\"},\"6032\":{\"t\":\"在泛型方法中可以定义泛型参数，此时，参数的类型就是传入数据的类型\"},\"6033\":{\"h\":\"注意\",\"a\":\"注意\"},\"6034\":{\"t\":\"泛型方法跟泛型类、泛型接口没有任何关系。\"},\"6035\":{\"t\":\"泛型方法所属的类是不是泛型都没有关系\"},\"6036\":{\"h\":\"2. 误区\",\"a\":\"_2-误区\"},\"6037\":{\"t\":\"当类是泛型类时，假如定义了泛型标识E，那么方法参数类型是E的方法，并不是泛型方法，因为他的类型是确定的，和类初始化给的类型一致或是Object。\"},\"6038\":{\"h\":\"3. 标识符\",\"a\":\"_3-标识符\"},\"6039\":{\"t\":\"当泛型方法所在类也是泛型类时，泛型方法使用的泛型标识，不要跟类的泛型标识一样。\"},\"6040\":{\"h\":\"4. 语法\",\"a\":\"_4-语法\"},\"6041\":{\"t\":\"访问权限 < 泛型> 返回类型 方法名([ 泛型标识 参数名称]) 抛出的异常\"},\"6042\":{\"t\":\"public <T> String getUname(T id){...} \"},\"6043\":{\"h\":\"5. 示例\",\"a\":\"_5-示例\"},\"6044\":{\"t\":\"将数组中的数据copy到list中\"},\"6045\":{\"t\":\"public <E> List<E> copyFromArrayToList(E[] arr){ ArrayList<E> list = new ArrayList<>(); for(E e : arr){ list.add(e); } return list; } \"},\"6046\":{\"h\":\"6. 静态化\",\"a\":\"_6-静态化\"},\"6047\":{\"t\":\"public static <E> List<E> copyFromArrayToList(E[] arr){...} \"},\"6048\":{\"t\":\"泛型方法，可以声明为静态的。\"},\"6049\":{\"t\":\"原因：泛型参数是在调用方法时确定的。并非在实例化类时确定。\"},\"6050\":{\"h\":\"7-3. 通配符\"},\"6051\":{\"h\":\"Ⅰ. 继承里的泛型\",\"a\":\"i-继承里的泛型\"},\"6052\":{\"h\":\"1. 不同泛型的类，不具备父子关系，不能互相赋值\",\"a\":\"_1-不同泛型的类-不具备父子关系-不能互相赋值\"},\"6053\":{\"t\":\"例如：B是A的一个子类型（子类或者子接口），而G是具有泛型声明的类或接口，G<B>并不是G<A>的子类型！\"},\"6054\":{\"t\":\"List<Object> list1 = null; List<String> list2 = new ArrayList<String>(); //2.编译不通过，不是同一个 //list1 = list2 \"},\"6055\":{\"h\":\"2. 相同泛型的父子类，具有继承关系\",\"a\":\"_2-相同泛型的父子类-具有继承关系\"},\"6056\":{\"t\":\"例如：类A是类B的父类，A<G> 是 B<G> 的父类\"},\"6057\":{\"t\":\"AbstractList<String> list1 = null; List<String> list2 = null; ArrayList<String> list3 = null; list1 = list3; list2 = list3; \"},\"6058\":{\"h\":\"3. 总结\",\"a\":\"_3-总结\"},\"6059\":{\"t\":\"带泛型的对象，降低了多态的范围，对子类要求也要具备相应的泛型，才能使用多态的特性。不过，我们可以用通配符解决这个问题\"},\"6060\":{\"h\":\"Ⅱ. 通配符的使用\",\"a\":\"ii-通配符的使用\"},\"6061\":{\"h\":\"1. 通配符\",\"a\":\"_1-通配符\"},\"6062\":{\"t\":\"不同泛型的父子类，不具有继承关系，这造成了很大的麻烦，因此有了通配符。\"},\"6063\":{\"t\":\"？：通配符，表示所有泛型的父类。\"},\"6064\":{\"t\":\"类A是类B的父类，G<A>和G<B>是没有关系的，二者共同的父类是：G<?>\"},\"6065\":{\"h\":\"2. 使用通配符\",\"a\":\"_2-使用通配符\"},\"6066\":{\"h\":\"2.1 ？：赋值\",\"a\":\"_2-1-赋值\"},\"6067\":{\"t\":\"List<Object> list1 = null; List<String> list2 = null; List<?> list = null; //无法赋值，报错 //List1 = list2; //可以赋值,List<?>是另外两个的父类 list = list1; list = list2; \"},\"6068\":{\"h\":\"2.2 添加数据\",\"a\":\"_2-2-添加数据\"},\"6069\":{\"t\":\"对于List<?>，不能向其内部添加数据，除了添加null之外\"},\"6070\":{\"t\":\"//以下两个add方法，产生编译错误 //list.add(\\\"DD\\\"); //list.add('?'); //只能添加null list.add(null); \"},\"6071\":{\"h\":\"2.3 获取数据\",\"a\":\"_2-3-获取数据\"},\"6072\":{\"t\":\"？泛型，允许读取数据，读取的数据类型为Object。\"},\"6073\":{\"t\":\"List<String> list3 = new ArrayList<>(); List<?> list = null; list3.add(\\\"AA\\\"); list3.add(\\\"BB\\\"); list3.add(\\\"CC\\\"); list = list3; //可以获取数据, Object o = list.get(0); System.out.println(o); //aa \"},\"6074\":{\"h\":\"3. 方法的使用示例\",\"a\":\"_3-方法的使用示例\"},\"6075\":{\"t\":\"要求：定义一个方法，用来遍历List类型的集合。\"},\"6076\":{\"h\":\"3.1 不使用通配符泛型\",\"a\":\"_3-1-不使用通配符泛型\"},\"6077\":{\"t\":\"如下：我们定义的方法中，参数类型是 List<String>,因此该方法只能被泛型为String的List调用，其他泛型的List就无法调用了，如果其他泛型的List想使用功能这个遍历方法，就需要定义多个不同泛型类型的遍历方法，非常的冗余。\"},\"6078\":{\"t\":\"//1.定义方法 public void print(List<String> list){ Iterator<?> iterator = list.iterator(); while(iterator.hasNext()){ Object obj = iterator.next(); System.out.println(obj); } } //2.使用方法 GenericTest test = new GenericTest(); ArrayList<String> list1 = new ArrayList<>(); list1.add(\\\"aa\\\"); list1.add(\\\"bb\\\"); test.print(list1); //aa;bb ArrayList<Integer> list2 = new ArrayList<>(); list2.add(11); list2.add(22); //报错，参数类型错误，无法调用该方法 test.print(list2); \"},\"6079\":{\"h\":\"3.2 使用通配符泛型\",\"a\":\"_3-2-使用通配符泛型\"},\"6080\":{\"t\":\"如下：我们定义的方法中，类型是List<?>；我们在使用的时候，泛型是任何类型的List都可以调用这个方法；通配符大大扩大了方法的兼容性，我们不用为每一个泛型都定义一个同样的方法了。\"},\"6081\":{\"t\":\"//1.定义方法 public void print(List<?> list){ Iterator<?> iterator = list.iterator(); while(iterator.hasNext()){ Object obj = iterator.next(); System.out.println(obj); } } //2.使用方法 GenericTest test = new GenericTest(); ArrayList<String> list1 = new ArrayList<>(); list1.add(\\\"aa\\\"); list1.add(\\\"bb\\\"); test.print(list1); //aa;bb ArrayList<Integer> list2 = new ArrayList<>(); list2.add(11); list2.add(22); test.print(list2); //11;22 \"},\"6082\":{\"h\":\"3.3 总结\",\"a\":\"_3-3-总结\"},\"6083\":{\"t\":\"带通配符的泛型，是其他所有泛型的父类，相当于实现了泛型中的多态。我们使用功能泛型通配符，即保证了，集合中的元素都是同一类型，有能适配所有的泛型。\"},\"6084\":{\"t\":\"场景：只对集合内元素类型统一有要求，具体是什么类型无要求，比如各种集合工具类\"},\"6085\":{\"h\":\"4. 有限制条件的通配符\",\"a\":\"_4-有限制条件的通配符\"},\"6086\":{\"t\":\"即为通配符指定匹配的上限和下限\"},\"6087\":{\"h\":\"4.1 extends:上限\",\"a\":\"_4-1-extends-上限\"},\"6088\":{\"t\":\"? extends A\"},\"6089\":{\"t\":\"即，通配符只能表示A类，或A类的子类 ==> ( 无穷小，A]\"},\"6090\":{\"h\":\"4.2 super：下限\",\"a\":\"_4-2-super-下限\"},\"6091\":{\"t\":\"? super A\"},\"6092\":{\"t\":\"即，通配符只能表示A类，或A类的父类==> ( A，无穷大]\"},\"6093\":{\"h\":\"4.3 示例\",\"a\":\"_4-3-示例\"},\"6094\":{\"t\":\"//1.定义父子类 class Person{} class Man extends Person{} //2.使用有限制的? //list1: <= Person类 List<? extends Person> list1 = null; //list2: >= Person类 List<? super Person> list2 = null; //3. List<Man> list3 = new ArrayList<Man>(); List<Person> list4 = new ArrayList<Person>(); List<Object> list5 = new ArrayList<Object>(); //4.1 测试extends list1: <= Person类 list1 = list3; list1 = list4; //list1 = list5;//编译报错 //4.2 测试Super list2: >= Person类 //list2 = list3;//编译错误 list2 = list4; list2 = list5; \"},\"6095\":{\"h\":\"5. 注意事项\",\"a\":\"_5-注意事项\"},\"6096\":{\"t\":\"一般只用在集合上。\"},\"6097\":{\"h\":\"5.1 不能用在泛型方法声明上\",\"a\":\"_5-1-不能用在泛型方法声明上\"},\"6098\":{\"t\":\"//注意点1：编译错误：不能用在泛型方法声明上，返回值类型前面<>不能使用? public static <?> void test(ArrayList<?> list){ } \"},\"6099\":{\"h\":\"5.2 不能用在泛型类的声明上\",\"a\":\"_5-2-不能用在泛型类的声明上\"},\"6100\":{\"t\":\"//注意点2：编译错误：不能用在泛型类的声明上 class GenericTypeClass<?>{ } \"},\"6101\":{\"h\":\"5.3 不能用在创建对象上\",\"a\":\"_5-3-不能用在创建对象上\"},\"6102\":{\"t\":\"//注意点3：编译错误：不能用在创建对象上，右边属于创建集合对象 ArrayList<?> list2 = new ArrayList<?>(); \"},\"6103\":{\"h\":\"8-1. File\"},\"6104\":{\"h\":\"Ⅰ. File 类\",\"a\":\"i-file-类\"},\"6105\":{\"h\":\"1. 类介绍\",\"a\":\"_1-类介绍\"},\"6106\":{\"t\":\"java.io.File类：文件和文件目录路径的抽象表示形式，与平台无关。File类即能表示文件，也能表示目录（目录本质也是文件）。\"},\"6107\":{\"t\":\"约定：\"},\"6108\":{\"t\":\"广义文件：文件和目录\"},\"6109\":{\"t\":\"狭义文件或文件：仅指文件\"},\"6110\":{\"t\":\"目录：仅值目录\"},\"6111\":{\"h\":\"2. File的作用\",\"a\":\"_2-file的作用\"},\"6112\":{\"t\":\"File 能新建、删除、重命名文件和目录，但 File 不能访问文件内容本身。\"},\"6113\":{\"t\":\"如果需要访问文件内容本身，则需要使用输入/输出流（File对象可以作为参数传递给流的构造器）。\"},\"6114\":{\"h\":\"3. File类与文件\",\"a\":\"_3-file类与文件\"},\"6115\":{\"t\":\"想要在Java程序中表示一个真实存在的文件或目录，那么必须有一个File对象。但是Java程序中的一个File对象，可能没有一个真实存在的文件或目录。\"},\"6116\":{\"t\":\"即：我们操作File类是在内存层面上进行操作的，硬盘上没有这个文件也可以。\"},\"6117\":{\"t\":\"8-1-1\"},\"6118\":{\"h\":\"4. 路径分隔符\",\"a\":\"_4-路径分隔符\"},\"6119\":{\"t\":\"路径中的每级目录之间用一个路径分隔符隔开。\"},\"6120\":{\"h\":\"4.1 路径分隔符和系统有关\",\"a\":\"_4-1-路径分隔符和系统有关\"},\"6121\":{\"t\":\"windows和DOS系统默认使用“\\\\”来表示\"},\"6122\":{\"t\":\"UNIX和URL使用“/”来表示 但在windows下使用 \\\"/\\\"，也能识别，因此统一使用\\\"/\\\"\"},\"6123\":{\"h\":\"4.2 分隔符常量\",\"a\":\"_4-2-分隔符常量\"},\"6124\":{\"t\":\"File类提供了一个常量：public static final String separator。\"},\"6125\":{\"t\":\"根据操作系统，动态的提供分隔符\"},\"6126\":{\"h\":\"5. File：常用构造器\",\"a\":\"_5-file-常用构造器\"},\"6127\":{\"h\":\"5.1 public File(String pathname)\",\"a\":\"_5-1-public-file-string-pathname\"},\"6128\":{\"t\":\"以pathname为路径创建File对象，可以是 绝对路径或者相对路径，\"},\"6129\":{\"t\":\"如果pathname是相对路径，则默认的当前路径在系统属性user.dir中存储 \"},\"6130\":{\"t\":\"在JDK1.8中user.dir默认为项目路径。\"},\"6131\":{\"t\":\"如果是在单元测试里运行代码，那么user.dir默认是在当前module中的。\"},\"6132\":{\"t\":\"File f1 = new File(\\\"hello.txt\\\"); File f2 = new File(\\\"D:/Java/workplace/Demo/study/hi.txt\\\"); System.out.println(f1); //hello.txt System.out.println(f2); //D:\\\\Java\\\\workplace\\\\Demo\\\\study\\\\hi.txt //默认为项目路径:\\\\Java\\\\workplace\\\\Demo (Demo是我创建的项目名) System.out.println(System.getProperty(\\\"user.dir\\\")); \"},\"6133\":{\"h\":\"5.2 public File(String parent,String child)\",\"a\":\"_5-2-public-file-string-parent-string-child\"},\"6134\":{\"t\":\"parent：父路径\"},\"6135\":{\"t\":\"child：子路径\"},\"6136\":{\"t\":\"File f3 = new File(\\\"D:/Java/workplace/Demo/study\\\", \\\"img\\\"); //路径也是一种文件，万物皆文件 System.out.println(f3); // D:\\\\Java\\\\workplace\\\\Demo\\\\study\\\\img \"},\"6137\":{\"h\":\"5.3 public File(File parent,String child)\",\"a\":\"_5-3-public-file-file-parent-string-child\"},\"6138\":{\"t\":\"parent：父File对象\"},\"6139\":{\"t\":\"child：子文件路径\"},\"6140\":{\"h\":\"6. 创建硬盘文件\",\"a\":\"_6-创建硬盘文件\"},\"6141\":{\"t\":\"先创建File对象，然后再调用创建文件或目录的方法进行创建。\"},\"6142\":{\"t\":\"文件和目录创建的路径和名字就是File对象的路径和名字。\"},\"6143\":{\"t\":\"如果文件或目录已经存在了，就无法进行创建，返回false\"},\"6144\":{\"t\":\"目录本身也是文件，文件是可以没有后缀的，同一目录下的目录和文件不能同名\"},\"6145\":{\"t\":\"一个无实体的File对象即可以是目录也可以是文件，就看用什么方法创建\"},\"6146\":{\"h\":\"Ⅱ. File 常用方法\",\"a\":\"ii-file-常用方法\"},\"6147\":{\"t\":\"详见：内置函数>IO类\"},\"6148\":{\"h\":\"8-2. IO流介绍\"},\"6149\":{\"h\":\"1. IO简介\",\"a\":\"_1-io简介\"},\"6150\":{\"t\":\"什么是IO：I/O是Input/Output的缩写；I/O技术是非常实用的技术，用于处理设备之间的数据传输。如读/写文件，网络通讯等。\"},\"6151\":{\"t\":\"stream：流：Java程序中，对于数据的输入/输出操作以 “流(stream)” 的方式进行。\"},\"6152\":{\"t\":\"流的接口：java.io包下提供了各种“流”类和接口，用以获取不同种类的数据，并通过 标准的方法输入或输出数据。\"},\"6153\":{\"h\":\"2. Java IO原理\",\"a\":\"_2-java-io原理\"},\"6154\":{\"t\":\"输入 input：读取外部数据（磁盘、光盘等存储设备的数据）到程序（内存）中。\"},\"6155\":{\"t\":\"输出 output：将程序（内存）数据输出到磁盘、光盘等存储设备中。\"},\"6156\":{\"h\":\"3. 流的分类\",\"a\":\"_3-流的分类\"},\"6157\":{\"t\":\"8-2-1\"},\"6158\":{\"t\":\"按操作 数据单位不同 \"},\"6159\":{\"t\":\"字节流(8bit)：操作二进制字节\"},\"6160\":{\"t\":\"字符流(16bit)：直接操作字符，适用于文本文件\"},\"6161\":{\"t\":\"按数据流的流向不同 \"},\"6162\":{\"t\":\"输入流\"},\"6163\":{\"t\":\"输出流\"},\"6164\":{\"t\":\"按流的角色的不同 \"},\"6165\":{\"t\":\"节点流（直接连接文件）：直接从数据源或目的地读写数据\"},\"6166\":{\"t\":\"处理流（不直接连接文件：不直接连接到数据源或目的地，而是“连接”在已存在的流（节点流或其他处理流）之上，通过对数据的处理为程序提供更为强大的读写功能。\"},\"6167\":{\"h\":\"4. 抽象基类\",\"a\":\"_4-抽象基类\"},\"6168\":{\"t\":\"Java的IO流共涉及40多个类，实际上非常规则，都是从如下4个抽象基类派生的。\"},\"6169\":{\"t\":\"由这四个类派生出来的子类名称都是以其父类名作为子类名后缀。\"},\"6170\":{\"t\":\"8-2-2\"},\"6171\":{\"h\":\"5. IO流体系\",\"a\":\"_5-io流体系\"},\"6172\":{\"t\":\"类的识别技巧：\"},\"6173\":{\"t\":\"Input：输入；\"},\"6174\":{\"t\":\"Output：输出\"},\"6175\":{\"t\":\"Stream：字节流\"},\"6176\":{\"t\":\"Reader：输入字符流\"},\"6177\":{\"t\":\"Writer：输出字符流\"},\"6178\":{\"t\":\"8-2-3\"},\"6179\":{\"h\":\"6. 节点流和处理流\",\"a\":\"_6-节点流和处理流\"},\"6180\":{\"h\":\"6.1 节点流\",\"a\":\"_6-1-节点流\"},\"6181\":{\"t\":\"直接从数据源或目的地读写数据\"},\"6182\":{\"t\":\"8-2-4\"},\"6183\":{\"h\":\"6.2 处理流\",\"a\":\"_6-2-处理流\"},\"6184\":{\"t\":\"不直接连接到数据源或目的地，而是“连接”在已存在的流（节点流或处理流）之上，通过对数据的处理为程序提供更为强大的读写功能。\"},\"6185\":{\"t\":\"8-2-5\"},\"6186\":{\"h\":\"8-3. 流的基类\"},\"6187\":{\"h\":\"说明\",\"a\":\"说明\"},\"6188\":{\"t\":\"流的基类都是节点流\"},\"6189\":{\"t\":\"8-3-1\"},\"6190\":{\"h\":\"1. 输入流：InputStream & Reader\",\"a\":\"_1-输入流-inputstream-reader\"},\"6191\":{\"t\":\"InputStream 和 Reader 是所有输入流的基类。\"},\"6192\":{\"h\":\"1.1 InputStream\",\"a\":\"_1-1-inputstream\"},\"6193\":{\"t\":\"典型实现：FileInputStream\"},\"6194\":{\"t\":\"FileInputStream 从文件系统中的某个文件中获得输入字节。FileInputStream用于读取非文本数据之类的原始字节流。\"},\"6195\":{\"h\":\"1.2 Reader\",\"a\":\"_1-2-reader\"},\"6196\":{\"t\":\"典型实现：FileReader\"},\"6197\":{\"t\":\"要读取字符流，需要使用 FileReader\"},\"6198\":{\"h\":\"2. 输出流：OutPutStream & Writer\",\"a\":\"_2-输出流-outputstream-writer\"},\"6199\":{\"h\":\"2.1 OutPutStream\",\"a\":\"_2-1-outputstream\"},\"6200\":{\"t\":\"典型实现：FileOutputStream\"},\"6201\":{\"t\":\"FileOutputStream 从文件系统中的某个文件中获得输出字节。FileOutputStream用于写出非文本数据之类的原始字节流。\"},\"6202\":{\"h\":\"2.2 Writer\",\"a\":\"_2-2-writer\"},\"6203\":{\"t\":\"典型实现：FileWriter\"},\"6204\":{\"t\":\"要写出字符流，需要使用 FileWriter\"},\"6205\":{\"h\":\"3. 关闭流\",\"a\":\"_3-关闭流\"},\"6206\":{\"t\":\"程序中打开的文件 IO 资源不属于内存里的资源，垃圾回收机制无法回收该资源，所以应该件 显式关闭文件 IO 资源。\"},\"6207\":{\"h\":\"4. 字节流与字符流的选择\",\"a\":\"_4-字节流与字符流的选择\"},\"6208\":{\"t\":\"文本文件->字符流，以字符而非字节为单位读取\"},\"6209\":{\"t\":\"非文本文件->字节流：能够解析\"},\"6210\":{\"t\":\"如果字符流操作非文本文件，会无法解析。如果字节流操作文本文件，在内存层面读（println）可能会乱码\"},\"6211\":{\"h\":\"5. 节点流\",\"a\":\"_5-节点流\"},\"6212\":{\"t\":\"节点流是最基本的实现（典型实现），其他实现跟节点流类似。\"},\"6213\":{\"t\":\"实际开发中，我们不会去直接使用节点流，因为他读写效率比较低。\"},\"6214\":{\"h\":\"6. 流操作的基本步骤\",\"a\":\"_6-流操作的基本步骤\"},\"6215\":{\"t\":\"创建文件对象\"},\"6216\":{\"t\":\"创建流对象（读/写）\"},\"6217\":{\"t\":\"进行流的操作（读/写）\"},\"6218\":{\"t\":\"关闭流（close） 以上操作需要进行异常处理\"},\"6219\":{\"h\":\"7. 输入流与输出流的方法\",\"a\":\"_7-输入流与输出流的方法\"},\"6220\":{\"t\":\"详见：内置函数>IO类\"},\"6221\":{\"h\":\"8-4. 节点流\"},\"6222\":{\"h\":\"Ⅰ. 节点流介绍\",\"a\":\"i-节点流介绍\"},\"6223\":{\"t\":\"节点流是流基类的典型实现，直接从数据源或目的地读写数据。 实际开发中，我们不会去直接使用节点流，因为他读写效率比较低。\"},\"6224\":{\"h\":\"1. 节点流的方法\",\"a\":\"_1-节点流的方法\"},\"6225\":{\"t\":\"和流基类的方法一样。\"},\"6226\":{\"t\":\"详见：内置函数>IO类\"},\"6227\":{\"h\":\"2. 注意点\",\"a\":\"_2-注意点\"},\"6228\":{\"t\":\"定义文件路径时，注意：可以用“/”或者“\\\\”。\"},\"6229\":{\"t\":\"在写入一个文件时，如果使用构造器FileOutputStream(file)，则目录下有同名文件将被覆盖。\"},\"6230\":{\"t\":\"如果使用构造器FileOutputStream(file,true)，则目录下的同名文件不会被覆盖，在文件内容末尾追加内容。\"},\"6231\":{\"t\":\"在读取文件时，必须保证该文件已存在，否则报异常。\"},\"6232\":{\"t\":\"字节流操作字节，比如：.mp3，.avi，.rmvb，mp4，.jpg，.doc，.ppt\"},\"6233\":{\"t\":\"字符流操作字符，只能操作普通文本文件。最常见的文本文件：.txt，.java，.c，.cpp 等语言的源代码。尤其注意.doc,excel,ppt这些不是文本文件\"},\"6234\":{\"h\":\"Ⅱ. FileReader\",\"a\":\"ii-filereader\"},\"6235\":{\"t\":\"FileReader：字符流的数据读入\"},\"6236\":{\"h\":\"1. FileReader的操作\",\"a\":\"_1-filereader的操作\"},\"6237\":{\"h\":\"1.1 初始化：创建流对象\",\"a\":\"_1-1-初始化-创建流对象\"},\"6238\":{\"t\":\"初始化需要处理异常： java.io.FileNotFoundException\"},\"6239\":{\"t\":\"File f1 = new File(\\\"files/a.txt\\\"); //实例化FileReader对象，开启输入流,参数是文件对象 FileReader fr = new FileReader(f1); //方式二：直接使用文件名：构造器内部自动new File(文件名) FileReader fr = new FileReader(\\\"files/a.txt\\\"); \"},\"6240\":{\"h\":\"1.2 read：数据读入\",\"a\":\"_1-2-read-数据读入\"},\"6241\":{\"t\":\"每次只读取一个字节，返回值是char的ASCII码，如果返回-1，代表文件已经读完了。可以循环读取所有的数据。\"},\"6242\":{\"t\":\"该方法需要处理异常：java.io.IOException\"},\"6243\":{\"t\":\"int data = fr.read(); \"},\"6244\":{\"h\":\"1.3 close：关闭流\",\"a\":\"_1-3-close-关闭流\"},\"6245\":{\"t\":\"该方法需要处理异常：java.io.IOException\"},\"6246\":{\"t\":\"fr.close(); \"},\"6247\":{\"h\":\"2. FileReader的异常处理\",\"a\":\"_2-filereader的异常处理\"},\"6248\":{\"t\":\"开启流、读取数据、关闭流都需要处理异常。\"},\"6249\":{\"t\":\"由于关闭流是必须要进行的操作，所以要用try...catch...finally处理异常\"},\"6250\":{\"h\":\"3. FileReader示例：文本文件读取\",\"a\":\"_3-filereader示例-文本文件读取\"},\"6251\":{\"t\":\"public void fileReaderTest() { FileReader fr = null; //放外面，是因为close操作要用到fr try { //1.实例化File类的对象，指明要操作的文件 File f1 = new File(\\\"files/a.txt\\\"); //2.创造FileReader输入流 fr = new FileReader(f1); //3.仅需数据的读入，循环全部读入 int data = fr.read(); while(data != -1){ System.out.print((char)data); data = fr.read(); } } catch (IOException e) { e.printStackTrace(); } finally { try { if(fr != null){ //房子fr是null,参生空指针异常 //4.流的关闭 fr.close(); } } catch (IOException e) { e.printStackTrace(); } } } \"},\"6252\":{\"h\":\"4. 一次读取多个字符\",\"a\":\"_4-一次读取多个字符\"},\"6253\":{\"t\":\"使用read()的重载方法read(char[] cbuf)，一次读取多个字符\"},\"6254\":{\"t\":\"public void fileReaderTest(){ File f1 = new File(\\\"files/a.txt\\\"); FileReader fr = null; try { fr = new FileReader(f1); char[] cbuf = new char[5]; int len = fr.read(cbuf); while(len != -1){ for(int i=0;i<len;i++){ System.out.println(cbuf[i]); } len = fr.read(cbuf); } } catch (IOException e) { e.printStackTrace(); } finally { try { if(fr != null) fr.close(); } catch (IOException e) { e.printStackTrace(); } } } \"},\"6255\":{\"h\":\"4.1 代码解析\",\"a\":\"_4-1-代码解析\"},\"6256\":{\"t\":\"①read(cbuf)：该步骤已经将数据读入到创建的char[] cbuf数组中了，返回值就是读取的字符数\"},\"6257\":{\"t\":\"②双重循环：外循环是用来循环读取数据的，内循环是用来读取cbuf数组中的字符\"},\"6258\":{\"h\":\"4.2 通过String输出char数组\",\"a\":\"_4-2-通过string输出char数组\"},\"6259\":{\"t\":\"不一定非得用个内循环打印char数组，使用String也可以\"},\"6260\":{\"t\":\"//内循环改为如下代码： String str = new String(cbuf,0,len); System.out.print(str); \"},\"6261\":{\"h\":\"4.3 误区\",\"a\":\"_4-3-误区\"},\"6262\":{\"t\":\"char[] cbuf = new char[5];char数组每次装 5个字符，下一次装载字符时，并非是空数组过去的，而是5个字符还在，装载时进行新旧字符的替换。\"},\"6263\":{\"t\":\"当字符取模5有余数时，最后一趟是装不满的，也就是会有字符没有被替换，这时如果将数组中的字符全部取下来，就会取到错误的字符。\"},\"6264\":{\"t\":\"//错误示例，cbuf.length并不能代表真实的字符数，最后一次可能会出错 for(int i = 0;i < cbuf.length;i++){ System.out.print(cbuf[i]); } \"},\"6265\":{\"h\":\"Ⅲ. FileWriter\",\"a\":\"iii-filewriter\"},\"6266\":{\"t\":\"FileWriter：字符流的数据写出\"},\"6267\":{\"h\":\"说明\",\"a\":\"说明\"},\"6268\":{\"t\":\"输出操作，对应的File可以不存在的。并不会报异常，在输出的过程中，会自动创建此文件。\"},\"6269\":{\"h\":\"1. 相关操作：详见流的基类\",\"a\":\"_1-相关操作-详见流的基类\"},\"6270\":{\"h\":\"1.1 初始化：开启流\",\"a\":\"_1-1-初始化-开启流\"},\"6271\":{\"t\":\"需要处理java.io.FileNotFoundException异常\"},\"6272\":{\"t\":\"File对应的硬盘中的文件如果存在：可以指定构造器的第二个参数：\"},\"6273\":{\"t\":\"false：覆盖写；默认（可省略），对原有文件的覆盖\"},\"6274\":{\"t\":\"true：追加写\"},\"6275\":{\"t\":\"File f1 = new File(\\\"files/a1.txt\\\"); FileWriter fw = new FileWriter(f1,false); //方式二：直接使用文件名：构造器内部自动new File(文件名) FileWriter fw = new FileWriter(\\\"files/a1.txt\\\",false); \"},\"6276\":{\"h\":\"1.2 write：数据写出\",\"a\":\"_1-2-write-数据写出\"},\"6277\":{\"t\":\"会产生java.io.IOException异常，write有多种重载，详见流的基类\"},\"6278\":{\"t\":\"fw.write(\\\"that's good\\\"); \"},\"6279\":{\"h\":\"1.3 close：资源关闭\",\"a\":\"_1-3-close-资源关闭\"},\"6280\":{\"t\":\"会产生java.io.IOException异常\"},\"6281\":{\"t\":\"fw.close(); \"},\"6282\":{\"h\":\"2. 异常处理\",\"a\":\"_2-异常处理\"},\"6283\":{\"t\":\"同上需要进行try...catch...finally处理\"},\"6284\":{\"h\":\"3. FileWriter写出示例\",\"a\":\"_3-filewriter写出示例\"},\"6285\":{\"t\":\"public void fileWriterTest(){ //1.提供File类的对象，指明写出到的文件 File f1 = new File(\\\"files/a1.txt\\\"); try { //2.提供FileWriter的对象，用于数据的写出 fw = new FileWriter(f1,true); //3.写出的操作，可多次调用write fw.write(\\\"that's good \\\\n\\\"); fw.write(\\\"are you ok\\\"); } catch (IOException e) { e.printStackTrace(); } finally { try { //4.流资源的关闭 if(fw != null) fw.close(); } catch (Exception e) { e.printStackTrace(); } } } \"},\"6286\":{\"h\":\"4. FileReader与FileWriter结合示例：文件的复制\",\"a\":\"_4-filereader与filewriter结合示例-文件的复制\"},\"6287\":{\"t\":\" public void testFileReaderFileWriter() { FileReader fr = null; FileWriter fw = null; try { //1.创建File类的对象，指明读入和写出的文件 File srcFile = new File(\\\"hello.txt\\\"); File destFile = new File(\\\"hello2.txt\\\"); //2.创建输入流和输出流的对象 fr = new FileReader(srcFile); fw = new FileWriter(destFile); //3.数据的读入和写出操作 char[] cbuf = new char[5]; int len;//记录每次读入到cbuf数组中的字符的个数 while((len = fr.read(cbuf)) != -1){ //每次写出len个字符 fw.write(cbuf,0,len); } } catch (IOException e) { e.printStackTrace(); } finally { //4.关闭流资源,两个都要关闭 try { if(fw != null) fw.close(); } catch (IOException e) { e.printStackTrace(); } try { if(fr != null) fr.close(); } catch (IOException e) { e.printStackTrace(); } } } \"},\"6288\":{\"h\":\"5. 处理图片资源\",\"a\":\"_5-处理图片资源\"},\"6289\":{\"t\":\"FileReader和FileWriter都无法处理图片资源，因为图片属于二进制资源，不是文本资源。\"},\"6290\":{\"h\":\"Ⅳ. 字节流\",\"a\":\"iv-字节流\"},\"6291\":{\"t\":\"FileInputStream：字节流读入\"},\"6292\":{\"t\":\"FileOutputStream：字节流写出\"},\"6293\":{\"h\":\"说明\",\"a\":\"说明-1\"},\"6294\":{\"t\":\"字节流的操作流程和字符流是一样。用的方法也是一样的，无非是参数有char类型变成了byte类型。\"},\"6295\":{\"t\":\"详见：流的基类\"},\"6296\":{\"h\":\"1. 初始化\",\"a\":\"_1-初始化\"},\"6297\":{\"t\":\"File srcFile = new File(\\\"src.jpg\\\"); File desFile = new File(\\\"des.jpg\\\"); //FileInputStream：读入 FileInputStream fis = new FileInputStream(srcFile); //FileOutputStream:写出 FileOutputStream fos = new FileOutputStream(desFile); //方式二：直接使用文件名：构造器内部自动new File(文件名) FileInputStream fis = new FileInputStream(\\\"src.jpg\\\"); FileOutputStream fos = new FileOutputStream(\\\"des.jpg\\\"); \"},\"6298\":{\"h\":\"2. 基本操作\",\"a\":\"_2-基本操作\"},\"6299\":{\"t\":\"详见流的基类\"},\"6300\":{\"t\":\"读：read方法，同上，只是参数类型变成了byte\"},\"6301\":{\"t\":\"写：write方法，同上，只是参数类型变成了byte\"},\"6302\":{\"t\":\"关闭资源：同上，close()\"},\"6303\":{\"t\":\"异常：需要处理同样的异常\"},\"6304\":{\"h\":\"3. 示例：创建copy方法，进行文件的复制\",\"a\":\"_3-示例-创建copy方法-进行文件的复制\"},\"6305\":{\"t\":\"要求：指定路径下文件的复制\"},\"6306\":{\"t\":\"public void copyFile(String srcPath,String destPath){ FileInputStream fis = null; FileOutputStream fos = null; try { //1. 造文件 File srcFile = new File(srcPath); File destFile = new File(destPath); //2.造流 fis = new FileInputStream(srcFile); fos = new FileOutputStream(destFile); byte[] buffer = new byte[1024];//这里是byte[],而非char[] int len; //3.1 读数据 while((len = fis.read(buffer)) != -1){ //3.2 写数据 fos.write(buffer,0,len); } } catch (IOException e) { e.printStackTrace(); } finally { //4.关闭资源 if(fos != null){ try { fos.close(); } catch (IOException e) { e.printStackTrace(); } } if(fis != null){ try { fis.close(); } catch (IOException e) { e.printStackTrace(); } } } } \"},\"6307\":{\"h\":\"8-5. 缓冲流\"},\"6308\":{\"h\":\"Ⅰ. 介绍\",\"a\":\"i-介绍\"},\"6309\":{\"t\":\"为了提高数据读写的速度，Java API提供了带缓冲功能的流类，缓冲流是处理流的一种，使用的时候需要套接在已有流的基础上。\"},\"6310\":{\"t\":\"作用：缓冲流的作用是提高流的读取、写出速度。\"},\"6311\":{\"h\":\"原理和使用\",\"a\":\"原理和使用\"},\"6312\":{\"t\":\"在使用这些流类时，会创建一个内部缓冲区数组，缺省使用8192个字节的缓冲区。\"},\"6313\":{\"t\":\"8-5-1\"},\"6314\":{\"t\":\"当读取数据时，数据按块读入缓冲区，其后的读操作则直接访问缓冲区\"},\"6315\":{\"t\":\"当使用BufferedInputStream读取字节文件时，BufferedInputStream会一次性从文件中读取8192个(8Kb)，存在缓冲区中，直到缓冲区装满了，才重新从文件中读取下一个8192个字节数组。\"},\"6316\":{\"t\":\"向流中写入字节时，不会直接写到文件，先写到缓冲区中直到缓冲区写满，BufferedOutputStream才会把缓冲区中的数据一次性写到文件里。 \"},\"6317\":{\"t\":\"使用方法flush()可以强制将缓冲区的内容全部写入输出流\"},\"6318\":{\"t\":\"关闭流的顺序和打开流的顺序相反。只要关闭最外层流即可，关闭最外层流也 会相应关闭内层节点流\"},\"6319\":{\"t\":\"flush()方法的使用：手动将buffer中内容写入文件\"},\"6320\":{\"t\":\"如果是带缓冲区的流对象的close()方法，不但会关闭流，还会在关闭流之前刷新缓冲区，关闭后不能再写出\"},\"6321\":{\"h\":\"Ⅱ. 缓冲流的类\",\"a\":\"ii-缓冲流的类\"},\"6322\":{\"t\":\"缓冲流要“套接”在相应的节点流之上，根据数据操作单位可以把缓冲流分为：\"},\"6323\":{\"h\":\"1. 字节流：读入\",\"a\":\"_1-字节流-读入\"},\"6324\":{\"t\":\"rt.jar>java>io>BufferedInputStream\"},\"6325\":{\"t\":\"class BufferedInputStream extends FilterInputStream { private static int DEFAULT_BUFFER_SIZE = 8192;//内部缓冲区数组默认大小 //该构造函数可以自定义内部缓冲区数组的大小 public BufferedInputStream(InputStream in, int size) { super(in); if (size <= 0) { throw new IllegalArgumentException(\\\"Buffer size <= 0\\\"); } buf = new byte[size]; } } \"},\"6326\":{\"h\":\"2. 字节流：写出\",\"a\":\"_2-字节流-写出\"},\"6327\":{\"t\":\"rt.jar>java>io>BufferedOutputStream\"},\"6328\":{\"t\":\"class BufferedOutputStream extends FilterOutputStream { public BufferedOutputStream(OutputStream out) { this(out, 8192);//默认内部缓冲区数组大小。 } //该构造函数可以自定义内部缓冲区数组的大小 public BufferedOutputStream(OutputStream out, int size) { super(out); if (size <= 0) { throw new IllegalArgumentException(\\\"Buffer size <= 0\\\"); } buf = new byte[size];//自定义缓冲区数组大小 } } \"},\"6329\":{\"h\":\"3. 字符流：读入\",\"a\":\"_3-字符流-读入\"},\"6330\":{\"t\":\"rt.jar>java>io>BufferedReader\"},\"6331\":{\"t\":\"public class BufferedReader extends Reader { private static int defaultCharBufferSize = 8192;//内部缓冲区数组默认大小 //该构造函数可以自定义内部缓冲区数组的大小 public BufferedReader(Reader in, int sz) { super(in); if (sz <= 0) throw new IllegalArgumentException(\\\"Buffer size <= 0\\\"); this.in = in; cb = new char[sz]; nextChar = nChars = 0; } } \"},\"6332\":{\"h\":\"4. 字符流：写出\",\"a\":\"_4-字符流-写出\"},\"6333\":{\"t\":\"rt.jar>java>io>BufferedWriter\"},\"6334\":{\"t\":\"public class BufferedWriter extends Writer { private static int defaultCharBufferSize = 8192;//内部缓冲区数组默认大小 //该构造函数可以自定义内部缓冲区数组的大小 public BufferedWriter(Writer out, int sz) { super(out); if (sz <= 0) throw new IllegalArgumentException(\\\"Buffer size <= 0\\\"); this.out = out; cb = new char[sz]; nChars = sz; nextChar = 0; lineSeparator = java.security.AccessController.doPrivileged( new sun.security.action.GetPropertyAction(\\\"line.separator\\\")); } } \"},\"6335\":{\"h\":\"Ⅲ. 基本操作\",\"a\":\"iii-基本操作\"},\"6336\":{\"h\":\"1. 基本操作方法\",\"a\":\"_1-基本操作方法\"},\"6337\":{\"t\":\"读入数据：和节点流的操作一样，也是用read方法\"},\"6338\":{\"t\":\"写出数据：和节点流的操作一样，也是用write方法\"},\"6339\":{\"t\":\"flush：当缓冲区的数据存满时，会自动将数据读入/写出，也可以手动调用flush方法，将buffer中的内容读入/写出。\"},\"6340\":{\"t\":\"close：关闭流的顺序和打开流的顺序相反，即：先关处理流，再关节点流。关闭最外层流也会相应关闭内层节点流，所以只关外层流也可以。 \"},\"6341\":{\"t\":\"x.close();\"},\"6342\":{\"h\":\"2. readLine：读取一行（BufferedReader）\",\"a\":\"_2-readline-读取一行-bufferedreader\"},\"6343\":{\"t\":\"该方法是读取一行数据（根据换行符来判定）。\"},\"6344\":{\"t\":\"阻塞：readLine()方法是阻塞的，如果在接收的数据中不含有'\\\\n','\\\\r'或者结束符时，往往导致进程挂起，从而程序无法继续。\"},\"6345\":{\"t\":\"返回值：返回读到的数据，读到文件的结尾时才会返回null。\"},\"6346\":{\"t\":\"网络编程：在IO模式下，readline是一直等待输入的（文件内容，或者标准输入流），只有遇到换行符，才会结束执行。\"},\"6347\":{\"t\":\"示例：从文件中，一行一行的读，读一行，就在控制台输出一行。\"},\"6348\":{\"t\":\"BufferedReader br = null; try { FileReader fr = new FileReader(\\\"files/a.txt\\\"); br = new BufferedReader(fr); String data = br.readLine(); while( data != null){ System.out.println(data); data = br.readLine(); } } catch (IOException e) { e.printStackTrace(); } finally { try { if(br != null) br.close(); } catch (IOException e) { e.printStackTrace(); } } \"},\"6349\":{\"h\":\"3. newLine：输入换行符（BufferedWriter）\",\"a\":\"_3-newline-输入换行符-bufferedwriter\"},\"6350\":{\"t\":\"在写出文件时，有时需要写出换行符，该方法就可以写出换行符，等价于 \\\"\\\\n\\\"\"},\"6351\":{\"h\":\"4. 缓冲流-字节流：使用示例\",\"a\":\"_4-缓冲流-字节流-使用示例\"},\"6352\":{\"t\":\"进行文件的复制：读入，再写出\"},\"6353\":{\"t\":\"public void StreamTest(){ BufferedInputStream bis = null; BufferedOutputStream bos = null; try { //1.创建文件对象 File srcFile = new File(\\\"files/girl.jpg\\\"); File desFile = new File(\\\"files/girl-1.jpg\\\"); //2.1 创造流：节点流 FileInputStream fis = new FileInputStream(srcFile); FileOutputStream fos = new FileOutputStream(desFile); //2.2 创造流：在节点流上创造缓冲流 bis = new BufferedInputStream(fis); bos = new BufferedOutputStream(fos); //3.进行复制：读入、写出 byte[] buf = new byte[1024]; //使用byte[]参数的重载方法 int len = bis.read(buf); while(len != -1){ bos.write(buf,0,len); //0,len：防止最后一次buf出现不满载情况 len = bis.read(buf); //将数据读入，循环读 } } catch (IOException e) { e.printStackTrace(); } finally { //4.close：关闭所有流 try { if(bis != null) bis.close(); } catch (IOException e) { e.printStackTrace(); } try { if(bos != null) bos.close(); } catch (IOException e) { e.printStackTrace(); } } } \"},\"6354\":{\"h\":\"5. 缓冲流-字符流：使用示例\",\"a\":\"_5-缓冲流-字符流-使用示例\"},\"6355\":{\"t\":\"略，跟上面区别不大。\"},\"6356\":{\"h\":\"6. 效率测试\",\"a\":\"_6-效率测试\"},\"6357\":{\"t\":\"分别测试使用节点流和缓冲流进行文件的测试。\"},\"6358\":{\"t\":\"使用System.currentTimeMillis进行计时，计算两者小号的时间。\"},\"6359\":{\"t\":\"long start = System.currentTimeMillis(); String srcPath = \\\"01-视频.avi\\\"; String destPath = \\\"03-视频.avi\\\"; copyFileWithBuffered(srcPath,destPath); long end = System.currentTimeMillis(); System.out.println(\\\"复制操作花费的时间为：\\\" + (end - start)); //再进行节点流的时间计算，同上 \"},\"6360\":{\"t\":\"结论：缓冲流消耗的时间，远小于节点流\"},\"6361\":{\"h\":\"8-6. 转换流\"},\"6362\":{\"h\":\"Ⅰ. 转换流介绍\",\"a\":\"i-转换流介绍\"},\"6363\":{\"h\":\"1. 说明\",\"a\":\"_1-说明\"},\"6364\":{\"t\":\"转换流也是一种处理流：提供了在字节流和字符流之间的转换\"},\"6365\":{\"t\":\"8-6-1\"},\"6366\":{\"h\":\"2. 转换流的类\",\"a\":\"_2-转换流的类\"},\"6367\":{\"t\":\"Java API提供了两个转换流的类：\"},\"6368\":{\"t\":\"InputStreamReader：将InputStream转为Reader（字节流输入->字符流输入）\"},\"6369\":{\"t\":\"OutputStreamWriter：将Writer转为OutputStream（字符流输出->字节流输出）\"},\"6370\":{\"h\":\"3. 作用\",\"a\":\"_3-作用\"},\"6371\":{\"t\":\"提高操作效率：字节流中的数据都是字符时，转成字符流操作更高效。\"},\"6372\":{\"t\":\"转码：进行转码，将文本文件转换成别的编码输出。 很多时候我们使用转换流来处理文件乱码问题。实现编码和解码的功能。 \"},\"6373\":{\"t\":\"解码：字节、字节数组 --->字符数组、字符串\"},\"6374\":{\"t\":\"编码：字符数组、字符串 ---> 字节、字节数组/\"},\"6375\":{\"h\":\"4. 使用说明\",\"a\":\"_4-使用说明\"},\"6376\":{\"t\":\"这两个流都是用来操作文本文件的，文本文件也可以做为字节流进行IO\"},\"6377\":{\"t\":\"InputStreamReader的字符集参数要和文件本身的编码统一\"},\"6378\":{\"t\":\"使用的方法、操作流程、异常处理，和流的基类基本一致。\"},\"6379\":{\"h\":\"Ⅱ. InputStreamReader\",\"a\":\"ii-inputstreamreader\"},\"6380\":{\"h\":\"说明\",\"a\":\"说明\"},\"6381\":{\"t\":\"InputStreamReader实现将字节的输入流按指定字符集转换为字符的输入流。需要和InputStream“套接”。\"},\"6382\":{\"t\":\"public class InputStreamReader extends Reader {} \"},\"6383\":{\"h\":\"1. 构造器1：不指定字符集\",\"a\":\"_1-构造器1-不指定字符集\"},\"6384\":{\"t\":\"参数是InputStream流，默认编码是utf-8,，即将字节流转为utf-8编码的字符流\"},\"6385\":{\"t\":\"public InputStreamReader(InputStream in); =================================================== FileInputStream fis = new FileInputStream(\\\"File/a.txt\\\"); InputStreamReader isr = new InputStreamReader(fis); \"},\"6386\":{\"h\":\"2. 构造器2：指定字符集\",\"a\":\"_2-构造器2-指定字符集\"},\"6387\":{\"t\":\"提供第二个参数来指定编码集\"},\"6388\":{\"t\":\"public InputSreamReader(InputStream in,String charsetName); =================================================== FileInputStream fis = new FileInputStream(\\\"File/a.txt\\\",\\\"utf-8\\\"); InputStreamReader isr = new InputStreamReader(fis); \"},\"6389\":{\"h\":\"3. 主要方法\",\"a\":\"_3-主要方法\"},\"6390\":{\"h\":\"3.1 read\",\"a\":\"_3-1-read\"},\"6391\":{\"t\":\"和流基类的read方法类似，有三个重载方法。 以字符流的形式读取字符。\"},\"6392\":{\"h\":\"3.2 getEncoding\",\"a\":\"_3-2-getencoding\"},\"6393\":{\"t\":\"获取FileInputStream对象的字符集。\"},\"6394\":{\"t\":\"String getEncoding(); FileInputStream fis = new FileInputStream(\\\"File/a.txt\\\",\\\"utf-8\\\"); InputStreamReader isr = new InputStreamReader(fis); String encoding = isr.getEncoding(); System.out.println(encoding);//UTF8 \"},\"6395\":{\"h\":\"3.3 close\",\"a\":\"_3-3-close\"},\"6396\":{\"t\":\"关闭转换流，关闭该流会自动关闭参数InputStream流。\"},\"6397\":{\"h\":\"4. 使用示例\",\"a\":\"_4-使用示例\"},\"6398\":{\"t\":\"FileInputStream fis = new FileInputStream(\\\"File/a.txt\\\"); InputStreamReader isr = new InputStreamReader(fis,\\\"utf-8\\\"); char[] cbuf = new char[3]; int len = isr.read(cbuf); System.out.println(Arrays.toString(cbuf));//[a, b, c] \"},\"6399\":{\"h\":\"Ⅲ. OutputStreamWriter\",\"a\":\"iii-outputstreamwriter\"},\"6400\":{\"t\":\"实现将字符的输出流按指定字符集转换为字节的输出流。需要和OutputStream“套接”。\"},\"6401\":{\"h\":\"1. 构造器1：不指定字符集\",\"a\":\"_1-构造器1-不指定字符集-1\"},\"6402\":{\"t\":\"public OutputStreamWriter(OutputStream out) \"},\"6403\":{\"h\":\"2. 构造器2：指定字符集\",\"a\":\"_2-构造器2-指定字符集-1\"},\"6404\":{\"t\":\"public OutputSreamWriter(OutputStream out,String charsetName) \"},\"6405\":{\"h\":\"3. 主要方法\",\"a\":\"_3-主要方法-1\"},\"6406\":{\"t\":\"write：将字符流以字节流的方式写出到文件中，字符的编码，由构造器指定。 \"},\"6407\":{\"t\":\"和流基类的字节流方法基本一样，有三个重构方法\"},\"6408\":{\"t\":\"flush：刷新流\"},\"6409\":{\"t\":\"close：关闭流\"},\"6410\":{\"h\":\"4. 综合示例：对文本文件进行转码\",\"a\":\"_4-综合示例-对文本文件进行转码\"},\"6411\":{\"t\":\"//注意：为了结构清晰，这里直接把异常抛出了，实际应该使用try...catch处理 public void test2() throws Exception { //1.造文件、造流 FileInputStream fis = new FileInputStream(\\\"dbcp.txt\\\"); FileOutputStream fos = new FileOutputStream(\\\"dbcp_gbk.txt\\\"); InputStreamReader isr = new InputStreamReader(fis,\\\"utf-8\\\"); OutputStreamWriter osw = new OutputStreamWriter(fos,\\\"gbk\\\"); //2.读写过程 char[] cbuf = new char[20]; int le while((len = isr.read(cbuf)) != -1){ osw.write(cbuf,0,len); } //3.关闭资源 isr.close(); osw.close(); } \"},\"6412\":{\"h\":\"Ⅳ. 补充：字符集\",\"a\":\"iv-补充-字符集\"},\"6413\":{\"h\":\"1. 编码表的由来\",\"a\":\"_1-编码表的由来\"},\"6414\":{\"t\":\"计算机只能识别二进制数据，早期由来是电信号。为了方便应用计算机，让它可以识别各个国家的文字。就将各个国家的文字用数字来表示，并一一对应，形成一张表。这就是编码表。\"},\"6415\":{\"h\":\"2. 常见编码集\",\"a\":\"_2-常见编码集\"},\"6416\":{\"t\":\"ASCII：美国标准信息交换码。用一个字节的7位可以表示。\"},\"6417\":{\"t\":\"ISO8859-1：拉丁码表。欧洲码表，用一个字节的8位表示。\"},\"6418\":{\"t\":\"GB2312：中国的中文编码表。最多两个字节编码所有字符\"},\"6419\":{\"t\":\"GBK：中国的中文编码表升级，融合了更多的中文文字符号。最多两个字节编 \"},\"6420\":{\"t\":\"GBK等双字节编码方式，用最高位是1或0表示两个字节和一个字节。\"},\"6421\":{\"t\":\"Unicode：国际标准码，融合了目前人类使用的所有字符。为每个字符分配唯一的字符码。所有的文字都用两个字节来表示。\"},\"6422\":{\"t\":\"UTF-8：变长的编码方式，可用1-4个字节来表示一个字符。\"},\"6423\":{\"h\":\"3. 编码原理\",\"a\":\"_3-编码原理\"},\"6424\":{\"t\":\"8-6-2\"},\"6425\":{\"h\":\"4. Unicode与UTF-8的由来\",\"a\":\"_4-unicode与utf-8的由来\"},\"6426\":{\"t\":\"Unicode：在Unicode 出现之前，所有的字符集都是和具体编码方案绑定在一起的（即字符集≈ 编码方式），都是直接将字符和最终字节流绑定死了。Unicode是一种将全世界所有文字都包含的编码集，但是 Unicode不完美，这里就有三个问题：一个是，我们已经知道，英文字母只用一个字节表示就够了，第二个问题是如何才能区别Unicode和ASCII？计算机怎么知道两个字节表示一个符号，而不是分别表示两个符号呢？第三个，如果和GBK等双字节编码方式一样，用最高位是1或0表示两个字节和一个字节，就少了很多值无法用于表示字符，不够表示所有字符。Unicode在很长一段时间内无法推广，直到互联网的出现。\"},\"6427\":{\"t\":\"UTF-8：面向传输的众多 UTF（UCS Transfer Format）标准出现了，顾名思义，UTF-8就是每次8个位传输数据，而UTF-16就是每次16个位。这是为传输而设计的编码，并使编码无国界，这样就可以显示全世界上所有文化的字符了。\"},\"6428\":{\"t\":\"Unicode与UTF-8：Unicode只是定义了一个庞大的、全球通用的字符集，并为每个字符规定了唯一确定的编号，具体存储成什么样的字节流，取决于字符编码方案。推荐的Unicode编码是UTF-8和UTF-16。\"},\"6429\":{\"h\":\"5. UTF-8的原理\",\"a\":\"_5-utf-8的原理\"},\"6430\":{\"t\":\"8-6-3\"},\"6431\":{\"h\":\"6. 总结\",\"a\":\"_6-总结\"},\"6432\":{\"t\":\"8-6-4\"},\"6433\":{\"h\":\"8-7. 其他流\"},\"6434\":{\"h\":\"Ⅰ. 标准流\",\"a\":\"i-标准流\"},\"6435\":{\"t\":\"System.in：标准的输入流，默认从键盘输入\"},\"6436\":{\"t\":\"System.out：标准的输出流，默认从控制台输出\"},\"6437\":{\"h\":\"1. System.in与System.out\",\"a\":\"_1-system-in与system-out\"},\"6438\":{\"t\":\"System.in：他是System类的一个变量，类型是InputStream。\"},\"6439\":{\"t\":\"System.out：也是System类的一个变量，类型是PrintStream。 \"},\"6440\":{\"t\":\"该类是：OutputStream的子类FilterOutputStream的子类。\"},\"6441\":{\"h\":\"2. 重定向\",\"a\":\"_2-重定向\"},\"6442\":{\"t\":\"通过System类的setIn，setOut方法对默认设备进行改变。\"},\"6443\":{\"t\":\"public static void setIn(InputStream in) public static void setOut(PrintStream out) \"},\"6444\":{\"h\":\"3. 示例：标准输入流、输出流的练习\",\"a\":\"_3-示例-标准输入流、输出流的练习\"},\"6445\":{\"t\":\"要求：从键盘输入字符串，要求将读取到的整行字符串转成大写输出。然后继续进行输入操作，直至当输入“e”或者“exit”时，退出程序。\"},\"6446\":{\"t\":\"方法一：使用Scanner实现，调用next()返回一个字符串\"},\"6447\":{\"t\":\"方法二：使用System.in实现【以该方法为例】 \"},\"6448\":{\"t\":\"System.in ---> 转换流 ---> BufferedReader的readLine()\"},\"6449\":{\"t\":\"BufferedReader br = null; try { InputStreamReader isr = new InputStreamReader(System.in); br = new BufferedReader(isr); while (true) { System.out.println(\\\"请输入字符串：\\\"); String data = br.readLine(); if (\\\"e\\\".equalsIgnoreCase(data)||\\\"exit\\\".equalsIgnoreCase(data)){ System.out.println(\\\"程序结束\\\"); break; } String upperCase = data.toUpperCase(); System.out.println(upperCase); } } catch (IOException e) { e.printStackTrace(); } finally { if (br != null) { try { br.close(); } catch (IOException e) { e.printStackTrace(); } } } \"},\"6450\":{\"h\":\"Ⅱ. 打印流\",\"a\":\"ii-打印流\"},\"6451\":{\"t\":\"OutPutStream和FileWriter的处理流，实现将基本数据类型的数据格式转化为字符串输出\"},\"6452\":{\"h\":\"1. PrintStream和PrintWriter\",\"a\":\"_1-printstream和printwriter\"},\"6453\":{\"t\":\"PrintStream写出字节流；PrintWriter写出字符流。\"},\"6454\":{\"t\":\"提供了一系列重载的print()和println()方法，用于多种数据类型的输出\"},\"6455\":{\"t\":\"PrintStream和PrintWriter的输出不会抛出IOException异常\"},\"6456\":{\"t\":\"PrintStream和PrintWriter有自动flush功能\"},\"6457\":{\"t\":\"PrintStream 打印的所有字符都使用平台的默认字符编码转换为字节。在需要写入字符而不是写入字节的情况下，应该使用 PrintWriter 类。\"},\"6458\":{\"t\":\"System.out返回的是PrintStream的实例\"},\"6459\":{\"h\":\"2. 示例：将基本数据类型输出到一个文件\",\"a\":\"_2-示例-将基本数据类型输出到一个文件\"},\"6460\":{\"t\":\"PrintStream ps = null; try { FileOutputStream fos = new FileOutputStream(new File(\\\"text.txt\\\")); // 创建打印输出流 ps = new PrintStream(fos, true); if (ps != null) {// 把标准输出流(控制台输出)改成文件 System.setOut(ps); } for (int i = 0; i <= 255; i++) { // 输出ASCII字符 System.out.print((char) i); if (i % 50 == 0) { // 每50个数据一行 System.out.println(); // 换行 } } } catch (FileNotFoundException e) { e.printStackTrace(); } finally { if (ps != null) { ps.close(); } } \"},\"6461\":{\"h\":\"Ⅲ. 数据流\",\"a\":\"iii-数据流\"},\"6462\":{\"t\":\"为了方便地操作Java语言的基本数据类型和String的数据，可以使用数据流。\"},\"6463\":{\"t\":\"作用：将java的基本数据类型和String数据写出到文件中，并能够将文件中的java基本数据类型和String数据读取还愿。\"},\"6464\":{\"h\":\"1. 数据流的类\",\"a\":\"_1-数据流的类\"},\"6465\":{\"t\":\"DataInputStream：读入，“套接”在 InputStream 子类的流上\"},\"6466\":{\"t\":\"DataOutputStream：写出，“套接”在OutputStream 子类的流上\"},\"6467\":{\"h\":\"2. DataInputStream中的方法\",\"a\":\"_2-datainputstream中的方法\"},\"6468\":{\"t\":\"boolean readBoolean()\"},\"6469\":{\"t\":\"byte readByte()\"},\"6470\":{\"t\":\"char readChar()\"},\"6471\":{\"t\":\"float readFloat()\"},\"6472\":{\"t\":\"double readDouble()\"},\"6473\":{\"t\":\"short readShort()\"},\"6474\":{\"t\":\"long readLong()\"},\"6475\":{\"t\":\"int readInt()\"},\"6476\":{\"t\":\"String readUTF()\"},\"6477\":{\"t\":\"void readFully(byte[] b)\"},\"6478\":{\"h\":\"3. DataOutputStream中的方法\",\"a\":\"_3-dataoutputstream中的方法\"},\"6479\":{\"t\":\"将上述的方法的read改为相应的write即可。\"},\"6480\":{\"h\":\"4. DataOutputStream：使用示例\",\"a\":\"_4-dataoutputstream-使用示例\"},\"6481\":{\"t\":\"将内存中的字符串、基本数据类型的变量写出到文件中\"},\"6482\":{\"t\":\"注意：该文件只能用DataInputStream来读入，其他方法无法解析，查看\"},\"6483\":{\"t\":\"//1.创建流 FileOutputStream fos = new FileOutputStream(\\\"data.txt\\\"); DataOutputStream dos = new DataOutputStream(fos); //2.使用 DataInputStream 中的方法将各类数据写入文件 dos.writeUTF(\\\"刘建辰\\\"); dos.flush();//刷新操作，将内存中的数据写入文件 dos.writeInt(23); dos.flush(); dos.writeBoolean(true); dos.flush(); //3.关闭流 dos.close(); //异常处理：省略 \"},\"6484\":{\"h\":\"5. DataInputStream：使用示例\",\"a\":\"_5-datainputstream-使用示例\"},\"6485\":{\"t\":\"将文件中存储的基本数据类型变量和字符串读取到内存中，保存在变量中。\"},\"6486\":{\"t\":\"注意：读取不同类型的数据的顺序要与当初写入文件时，保存的数据的顺序一致！\"},\"6487\":{\"t\":\"//1.创建流 FileInputStream fis = new FileInputStream(\\\"data.txt\\\"); DataInputStream dis = new DataInputStream(fis); //2.使用DataOutputStream将文件中各类数据读入 String name = dis.readUTF(); int age = dis.readInt(); boolean isMale = dis.readBoolean(); System.out.println(\\\"name = \\\" + name); System.out.println(\\\"age = \\\" + age); System.out.println(\\\"isMale = \\\" + isMale); //3.关闭流 dis.close(); //异常处理：省略 \"},\"6488\":{\"h\":\"Ⅳ. 随机存储文件流\",\"a\":\"iv-随机存储文件流\"},\"6489\":{\"t\":\"随机存储文件流 RandomAccessFile 声明在java.io包下，但直接继承于java.lang.Object类，没有继承抽象流基类。并且它实现了DataInput、DataOutput这两个接口，也就意味着这个类既可以读也可以写（既可以作为一个输入流，又可以作为一个输出流）。\"},\"6490\":{\"h\":\"1. 随机访问机制\",\"a\":\"_1-随机访问机制\"},\"6491\":{\"t\":\"RandomAccessFile 类支持 “随机访问” 的方式，程序可以直接跳到文件的任意地方来读、写文件；\"},\"6492\":{\"t\":\"支持只访问文件的部分内容；\"},\"6493\":{\"t\":\"可以向已存在的文件后追加内容。\"},\"6494\":{\"h\":\"2. 记录指针与相关方法\",\"a\":\"_2-记录指针与相关方法\"},\"6495\":{\"t\":\"RandomAccessFile 对象包含一个记录指针，用以标示当前读写处的位置。RandomAccessFile 类对象可以自由移动记录指针。\"},\"6496\":{\"h\":\"2.1 getFilePointer方法\",\"a\":\"_2-1-getfilepointer方法\"},\"6497\":{\"t\":\"获取文件记录指针的当前位置\"},\"6498\":{\"t\":\"long getFilePointer() \"},\"6499\":{\"h\":\"2.2 seek方法\",\"a\":\"_2-2-seek方法\"},\"6500\":{\"t\":\"将文件记录指针定位到 pos 位置\"},\"6501\":{\"t\":\"void seek(long pos) \"},\"6502\":{\"h\":\"3. 构造器与mode参数\",\"a\":\"_3-构造器与mode参数\"},\"6503\":{\"t\":\"参数1：要操作的文件，可以是文件对象，也可以是文件名\"},\"6504\":{\"t\":\"参数2：mode：访问模式\"},\"6505\":{\"t\":\"public RandomAccessFile(File file, String mode) public RandomAccessFile(String name, String mode) \"},\"6506\":{\"h\":\"3.1 mode\",\"a\":\"_3-1-mode\"},\"6507\":{\"t\":\"共有4种访问模式，只需要注意前两种。\"},\"6508\":{\"t\":\"r: 以只读方式打开\"},\"6509\":{\"t\":\"rw ：打开以便读取和写入\"},\"6510\":{\"t\":\"rwd: 打开以便读取和 写入；同步文件内容的更新\"},\"6511\":{\"t\":\"rws: 打开以便读取和 写入； 同步文件内容和元数据 的\"},\"6512\":{\"h\":\"3.2 r模式与rw模式\",\"a\":\"_3-2-r模式与rw模式\"},\"6513\":{\"t\":\"r：只读，不会创建文件，而是会去读取一个已经存在的文件，如果读取的文件不存在则会出现异常。\"},\"6514\":{\"t\":\"rw：读写，如果文件不存在则会去创建文件，如果存在则不会创建。\"},\"6515\":{\"h\":\"4. 使用示例：copy文件\",\"a\":\"_4-使用示例-copy文件\"},\"6516\":{\"t\":\"//1.RandomAccessFile对象 RandomAccessFile rafRead = new RandomAccessFile(\\\"a.jpg\\\",\\\"r\\\"); RandomAccessFile rafWrite = new RandomAccessFile(\\\"a-1.jpg\\\",\\\"rw\\\"); //2.进行读和写,完成复制 byte[] buffer = new byte[1024]; int len = rafRead.read(buffer); while(len != -1){ rafWrite.write(buffer,0,len); } //3.关闭流 rafRead.close(); rafWrite.close(); //省略了异常处理 \"},\"6517\":{\"h\":\"5. 使用指针\",\"a\":\"_5-使用指针\"},\"6518\":{\"t\":\"该类的核心就是可以操作指针，在任意位置进行读写。\"},\"6519\":{\"t\":\"读：只是简单的读。\"},\"6520\":{\"t\":\"写：这里的写是覆盖写，即从指针位置开始写，新写入的内容会覆盖旧的内容。 \"},\"6521\":{\"t\":\"注意：不是文件覆盖，而是内容覆盖；不是追加写，而是从指定指针位置处写；不是插入写，而是覆盖写；\"},\"6522\":{\"h\":\"5.1 实现追加和插入效果\",\"a\":\"_5-1-实现追加和插入效果\"},\"6523\":{\"t\":\"追加效果：将指针指到文件末尾，进行写的操作，就是追加写。\"},\"6524\":{\"t\":\"插入效果：将指针位置后面的数据赋值一份，写完后，再将复制的文件，进行追加写。\"},\"6525\":{\"h\":\"5.2 示例：在指针位置进行写入\",\"a\":\"_5-2-示例-在指针位置进行写入\"},\"6526\":{\"t\":\"//1.RandomAccessFile对象 RandomAccessFile raf1 = new RandomAccessFile(\\\"hello.txt\\\",\\\"rw\\\"); raf1.seek(3);//将指针调到角标为3的位置 //进行写入 raf1.write(\\\"xyz\\\".getBytes()); //关闭资源 raf1.close(); \"},\"6527\":{\"h\":\"6. 断点续传\",\"a\":\"_6-断点续传\"},\"6528\":{\"t\":\"可以用RandomAccessFile这个类，来实现一个多线程断点下载的功能，下载工具下载前都会建立两个临时文件，一个是与被下载文件大小相同的空文件，另一个是记录文件指针的位置文件，每次暂停的时候，都会保存上一次的指针，然后断点下载的时候，会继续从上一次的地方下载，从而实现断点下载或上传的功能。\"},\"6529\":{\"h\":\"8-8. 对象流\"},\"6530\":{\"h\":\"介绍\",\"a\":\"介绍\"},\"6531\":{\"t\":\"由ObjectInputStream 和OjbectOutputSteam两个类组成\"},\"6532\":{\"t\":\"作用：用于存储和读取基本数据类型数据或对象的处理流。它的强大之处就是可以把Java中的对象写入到数据源中（序列化），也能把对象从数据源中还原回来（反序列化）。\"},\"6533\":{\"t\":\"实际开发中，我们都是将对象格式化成JSON进行传输，而不是进行序列化传输。\"},\"6534\":{\"h\":\"1. 序列化与反序列化\",\"a\":\"_1-序列化与反序列化\"},\"6535\":{\"t\":\"序列化：用ObjectOutputStream类，将内存中的java对象保存到磁盘中或通过网络传输出去。\"},\"6536\":{\"t\":\"反序列化：用ObjectInputStream类将磁盘文件中的对象还原为内存中的一个java对象。\"},\"6537\":{\"h\":\"2. 对象的序列化机制\",\"a\":\"_2-对象的序列化机制\"},\"6538\":{\"t\":\"对象序列化机制允许把内存中的Java对象转换成平台无关的二进制流，从而允许把这种二进制流持久地保存在磁盘上，或通过网络将这种二进制流传输到另一个网络节点。//当其它程序获取了这种二进制流，就可以恢复成原来的Java对象\"},\"6539\":{\"t\":\"意义：序列化的好处在于可将任何实现了Serializable接口的对象转化为 字节数据，使其在保存和传输时可被还原\"},\"6540\":{\"h\":\"3. 一些操作\",\"a\":\"_3-一些操作\"},\"6541\":{\"h\":\"3.1 初始化\",\"a\":\"_3-1-初始化\"},\"6542\":{\"t\":\"创建序列化流，需要套接在FileOutputStream上。\"},\"6543\":{\"t\":\"//1. 创建序列化流，需要套接在FileOutputStream上 FileOutputStream fos = new FileOutputStream(\\\"object.dat\\\") ObjectOutputStream oos = new ObjectOutputStream(fos); //2.创建反序列化流,需要套接在FileInputStream上 FileInputStream fis = new FileInputStream(\\\"object.dat\\\") ObjectInputStream ois = new ObjectInputStream(fis); \"},\"6544\":{\"h\":\"3.2 writeObject\",\"a\":\"_3-2-writeobject\"},\"6545\":{\"t\":\"输出可序列化对象，每操作一次，就需要flush一次\"},\"6546\":{\"t\":\"oos.writeObject(new xxObject(...)); \"},\"6547\":{\"h\":\"3.3 readObject\",\"a\":\"_3-3-readobject\"},\"6548\":{\"t\":\"读取流中的对象，返回值类型是被反序列化对象的类。\"},\"6549\":{\"t\":\"Object obj = ois.readObject(); String str = (String) obj; \"},\"6550\":{\"h\":\"3.4 flush\",\"a\":\"_3-4-flush\"},\"6551\":{\"t\":\"刷新操作，输出可序列化对象，每操作一次，就需要flush一次\"},\"6552\":{\"t\":\"oos.flush(); \"},\"6553\":{\"h\":\"4. 示例：字符串的序列化和反序列化\",\"a\":\"_4-示例-字符串的序列化和反序列化\"},\"6554\":{\"h\":\"4.1 序列化\",\"a\":\"_4-1-序列化\"},\"6555\":{\"t\":\"//1.创建输入流、序列化流 FileOutputStream fos = new FileOutputStream(\\\"object.dat\\\") ObjectOutputStream oos = new ObjectOutputStream(fos); //2.使用writerObject方法进行序列化 oos.writeObject(new String(\\\"我爱n门\\\")); oos.flush();//刷新操作 //3.关闭流 oos.close(); //异常处理：省略 \"},\"6556\":{\"h\":\"4.2 反序列化\",\"a\":\"_4-2-反序列化\"},\"6557\":{\"t\":\"//1.创建写出流、反序列化流 FileInputStream fis = new FileInputStream(\\\"object.dat\\\") ObjectInputStream ois = new ObjectInputStream(fis); //2.使用readObejct方法进行反序列化 Object obj = ois.readObject(); String str = (String) obj; System.out.println(str); //3.关闭流 ois.close(); //异常处理：省略 \"},\"6558\":{\"h\":\"5. 序列化类，需要满足的要求\",\"a\":\"_5-序列化类-需要满足的要求\"},\"6559\":{\"t\":\"需要实现接口：Serializable \"},\"6560\":{\"t\":\"基本数据类型和String都已经实现该接口了\"},\"6561\":{\"t\":\"该接口是个标识接口，里面是空的，只是用来标识类可以进行实例化\"},\"6562\":{\"t\":\"当前类提供一个全局常量：serialVersionUID\"},\"6563\":{\"t\":\"除了当前Person类需要实现Serializable接口之外，还必须保证其内部所有属性也必须是可序列化的。（ \"},\"6564\":{\"t\":\"默认情况下，基本数据类型可序列化\"},\"6565\":{\"t\":\"要注意的是，某个属性的类型是其他类，这个类也需要能序列化\"},\"6566\":{\"t\":\"序列化后的结果中，不包含static和transient修饰的成员变量\"},\"6567\":{\"h\":\"6. 示例：自定义类实线序列化与反序列化\",\"a\":\"_6-示例-自定义类实线序列化与反序列化\"},\"6568\":{\"h\":\"6.1 目标类\",\"a\":\"_6-1-目标类\"},\"6569\":{\"t\":\"public class Person implements Serializable{ public static final long serialVersionUID = 475463534532L; ...... } \"},\"6570\":{\"h\":\"6.2 序列化\",\"a\":\"_6-2-序列化\"},\"6571\":{\"t\":\"//1.创建输入流、序列化流 FileOutputStream fos = new FileOutputStream(\\\"object.dat\\\") ObjectOutputStream oos = new ObjectOutputStream(fos); //2.使用writerObject方法进行序列化 oos.writeObject(new Person(\\\"王铭\\\",23)); oos.flush(); oos.writeObject(new Person(\\\"张学良\\\",23,1001,new Account(5000))); oos.flush(); //3.关闭流 oos.close(); //异常处理：省略 \"},\"6572\":{\"h\":\"6.3 反序列化\",\"a\":\"_6-3-反序列化\"},\"6573\":{\"t\":\"//1.创建写出流、反序列化流 FileInputStream fis = new FileInputStream(\\\"object.dat\\\") ObjectInputStream ois = new ObjectInputStream(fis); //2.使用readObejct方法进行反序列化 Person p = (Person) ois.readObject(); Person p1 = (Person) ois.readObject(); //进行toString输出 System.out.println(p); System.out.println(p1); //3.关闭流 ois.close(); //异常处理：省略 \"},\"6574\":{\"h\":\"7. serialVersionUID\",\"a\":\"_7-serialversionuid\"},\"6575\":{\"t\":\"凡是实现Serializable接口的类都有一个表示序列化版本标识符的静态变量：值可自定义。 如果类没有显示定义这个静态常量，它的值是Java运行时环境根据类的内部细节自动生成的。若类的实例变量做了修改，serialVersionUID 可能发生变化。故建议，显式声明，否则，在对象序列化后，如果对类进行了修改，将无法反序列化。\"},\"6576\":{\"t\":\"反序列化时，会比对这个ID，一致后才能正常反序列化。\"},\"6577\":{\"t\":\"private static final long serialVersionUID; public static final long serialVersionUID = 475463534532L; \"},\"6578\":{\"h\":\"8-9. NIO2与Jar包\"},\"6579\":{\"h\":\"Ⅰ. NIO2\",\"a\":\"i-nio2\"},\"6580\":{\"h\":\"1. Java NIO概述\",\"a\":\"_1-java-nio概述\"},\"6581\":{\"t\":\"Java NIO (New IO，Non-Blocking IO)是从Java 1.4版本开始引入的一套新的IO API，可以替代标准的Java IO API。NIO与原来的IO有同样的作用和目的，但是使用的方式完全不同，NIO支持面向缓冲区的(IO是面向流的)、基于通道的IO操作。NIO将以更加高效的方式进行文件的读写操作。\"},\"6582\":{\"t\":\"Java API中提供了两套NIO，一套是针对标准输入输出NIO，另一套就是网络编程NIO。\"},\"6583\":{\"t\":\"java.nio.channels.Channel \"},\"6584\":{\"t\":\"FileChannel:处理本地文件\"},\"6585\":{\"t\":\"SocketChannel：TCP网络编程的客户端的Channel\"},\"6586\":{\"t\":\"ServerSocketChannel:TCP网络编程的服务器端的Channel\"},\"6587\":{\"t\":\"DatagramChannel：UDP网络编程中发送端和接收端的Channe\"},\"6588\":{\"h\":\"2. NIO.2 概述\",\"a\":\"_2-nio-2-概述\"},\"6589\":{\"t\":\"随着 JDK 7 的发布，Java对NIO进行了极大的扩展，增强了对文件处理和文件系统特性的支持，以至于我们称他们为 NIO.2。因为 NIO 提供的一些功能，NIO已经成为文件处理中越来越重要的部分。\"},\"6590\":{\"h\":\"3. 核心API\",\"a\":\"_3-核心api\"},\"6591\":{\"t\":\"早期的Java只提供了一个File类来访问文件系统，但File类的功能比较有限，所提供的方法性能也不高。而且，大多数方法在出错时仅返回失败，并不会提供异常信息。\"},\"6592\":{\"h\":\"3.1 Path接口\",\"a\":\"_3-1-path接口\"},\"6593\":{\"t\":\"NIO. 2为了弥补这种不足，引入了Path接口，代表一个平台无关的平台路径，描述了目录结构中文件的位置。Path可以看成是File类的升级版本，实际引用的资源也可以不存在。\"},\"6594\":{\"t\":\"//以前IO操作都是这样写的: import java.io.File; File file = new File(\\\"index.html\\\"); //在Java7 中，我们可以这样写： import java.nio.file.Path; import java.nio.file.Paths; Path path = Paths.get(\\\"index.html\\\"); \"},\"6595\":{\"h\":\"3.2 Paths和Files工具类\",\"a\":\"_3-2-paths和files工具类\"},\"6596\":{\"t\":\"NIO.2在java.nio.file包下还提供了Files、Paths工具类，Files包含了大量静态的工具方法来操作文件；Paths则包含了两个返回Path的静态工厂方法。\"},\"6597\":{\"h\":\"4. Path接口常用方法\",\"a\":\"_4-path接口常用方法\"},\"6598\":{\"t\":\"String toString() ： 返回调用 Path 对象的字符串表示形式\"},\"6599\":{\"t\":\"boolean startsWith(String path) : 判断是否以 path 路径开始\"},\"6600\":{\"t\":\"boolean endsWith(String path) : 判断是否以 path 路径结束\"},\"6601\":{\"t\":\"boolean isAbsolute() : 判断是否是绝对路径\"},\"6602\":{\"t\":\"Path getParent() ：返回Path对象包含整个路径，不包含 Path 对象指定的文件路径\"},\"6603\":{\"t\":\"Path getRoot() ：返回调用 Path 对象的根路径\"},\"6604\":{\"t\":\"Path getFileName() : 返回与调用 Path 对象关联的文件名\"},\"6605\":{\"t\":\"int getNameCount() : 返回Path 根目录后面元素的数量\"},\"6606\":{\"t\":\"Path getName(int idx) : 返回指定索引位置 idx 的路径名称\"},\"6607\":{\"t\":\"Path toAbsolutePath() : 作为绝对路径返回调用 Path 对象\"},\"6608\":{\"t\":\"Path resolve(Path p) :合并两个路径，返回合并后的路径对应的Path对象\"},\"6609\":{\"t\":\"File toFile(): 将Path转化为File类的对象\"},\"6610\":{\"h\":\"5. Paths类的方法\",\"a\":\"_5-paths类的方法\"},\"6611\":{\"t\":\"Paths 类提供的静态 get() 方法用来获取 Path 对象：\"},\"6612\":{\"t\":\"static Path get(String first, String … more) : 用于将多个字符串串连成路径\"},\"6613\":{\"t\":\"static Path get(URI uri): 返回指定uri对应的Path路径\"},\"6614\":{\"h\":\"6. Files类常用方法\",\"a\":\"_6-files类常用方法\"},\"6615\":{\"t\":\"java.nio.file.Files 用于操作文件或目录的工具类。\"},\"6616\":{\"t\":\"Path copy(Path src, Path dest, CopyOption … how) : 文件的复制\"},\"6617\":{\"t\":\"Path createDirectory(Path path, FileAttribute<?> … attr) : 创建一个目录\"},\"6618\":{\"t\":\"Path createFile(Path path, FileAttribute<?> … arr) : 创建一个文件\"},\"6619\":{\"t\":\"void delete(Path path) : 删除一个文件/目录，如果不存在，执行报错\"},\"6620\":{\"t\":\"void deleteIfExists(Path path) : Path对应的文件/目录如果存在，执行删除\"},\"6621\":{\"t\":\"Path move(Path src, Path dest, CopyOption…how) : 将 src 移动到 dest 位置\"},\"6622\":{\"t\":\"long size(Path path) : 返回 path 指定文件的大小\"},\"6623\":{\"t\":\"boolean exists(Path path, LinkOption … opts) : 判断文件是否存在\"},\"6624\":{\"t\":\"boolean isDirectory(Path path, LinkOption … opts) : 判断是否是目录\"},\"6625\":{\"t\":\"boolean isRegularFile(Path path, LinkOption … opts) : 判断是否是文件\"},\"6626\":{\"t\":\"boolean isHidden(Path path) : 判断是否是隐藏文件\"},\"6627\":{\"t\":\"boolean isReadable(Path path) : 判断文件是否可读\"},\"6628\":{\"t\":\"boolean isWritable(Path path) : 判断文件是否可写\"},\"6629\":{\"t\":\"boolean notExists(Path path, LinkOption … opts) : 判断文件是否不存在\"},\"6630\":{\"t\":\"SeekableByteChannel newByteChannel(Path path, OpenOption…how) : 获取与指定文件的连接，how 指定打开方式\"},\"6631\":{\"t\":\"DirectoryStream<Path> newDirectoryStream(Path path) : 打开 path 指定的目录\"},\"6632\":{\"t\":\"InputStream newInputStream(Path path, OpenOption…how):获取 InputStream 对象\"},\"6633\":{\"t\":\"OutputStream newOutputStream(Path path, OpenOption…how) : 获取 OutputStream 对象\"},\"6634\":{\"h\":\"Ⅱ. 第三方Jar包\",\"a\":\"ii-第三方jar包\"},\"6635\":{\"t\":\"我们在开发中，可以直接使用第三方封装好的IO流操作包。这些第三方包底层用的也是基本的IO流操作。这些封装后的IO操作更加简单，高效。\"},\"6636\":{\"h\":\"9-1. 概述\"},\"6637\":{\"t\":\"提示\"},\"6638\":{\"t\":\"更多网络编程内容详见：通信协议和JavaWeb\"},\"6639\":{\"h\":\"简介\",\"a\":\"简介\"},\"6640\":{\"t\":\"Java是 Internet 上的语言，它从语言级上提供了对网络应用程序的支持，程序员能够很容易开发常见的网络应用程序。\"},\"6641\":{\"t\":\"Java提供的网络类库，可以实现无痛的网络连接，联网的底层细节被隐藏在 Java 的本机安装系统里，由 JVM 进行控制。并且 Java 实现了一个跨平台的网络库， 程序员面对的是一个统一的网络编程环境。\"},\"6642\":{\"h\":\"1. 网络基础\",\"a\":\"_1-网络基础\"},\"6643\":{\"t\":\"计算机网络：把分布在不同地理区域的计算机与专门的外部设备用通信线路互连成一个规模大、功能强的网络系统，从而使众多的计算机可以方便地互相传递信息、共享硬件、软件、数据信息等资源。\"},\"6644\":{\"t\":\"网络编程的目的：直接或间接地通过网络协议与 其它计算机实现数据交换，进行通讯。\"},\"6645\":{\"t\":\"网络编程中的主要问题 \"},\"6646\":{\"t\":\"如何 准确地定位网络上一台或多台主机；定位主机上的特定的应用\"},\"6647\":{\"t\":\"找到主机后如何可靠高效地进行数据传输\"},\"6648\":{\"h\":\"2. 网络通信的要素\",\"a\":\"_2-网络通信的要素\"},\"6649\":{\"t\":\"IP和端口号：解决如何找到和定位主机\"},\"6650\":{\"t\":\"网络通信协议：解决如何高效的进行数据传输\"},\"6651\":{\"h\":\"3. 如何实现网络通信\",\"a\":\"_3-如何实现网络通信\"},\"6652\":{\"t\":\"通信双方的地址：IP、端口号\"},\"6653\":{\"t\":\"一定的规则：网络通信协议 \"},\"6654\":{\"t\":\"OSI参考模型：模型过于理想化，未能在因特网上进行广泛推广\"},\"6655\":{\"t\":\"TCP/IP参考模型(或TCP/IP协议)：事实上的国际标准。\"},\"6656\":{\"h\":\"4. 网络通信协议\",\"a\":\"_4-网络通信协议\"},\"6657\":{\"t\":\"9-1-1\"},\"6658\":{\"h\":\"5. 通信过程\",\"a\":\"_5-通信过程\"},\"6659\":{\"t\":\"9-1-2\"},\"6660\":{\"h\":\"9-2. IP与端口号\"},\"6661\":{\"h\":\"Ⅰ. IP与端口号\",\"a\":\"i-ip与端口号\"},\"6662\":{\"h\":\"1. hostAddress：IP地址介绍\",\"a\":\"_1-hostaddress-ip地址介绍\"},\"6663\":{\"t\":\"唯一的标识 Internet 上的计算机（通信实体）\"},\"6664\":{\"h\":\"2. IP地址分类\",\"a\":\"_2-ip地址分类\"},\"6665\":{\"h\":\"2.1 分类方式1：IPV4和IPV6\",\"a\":\"_2-1-分类方式1-ipv4和ipv6\"},\"6666\":{\"t\":\"IPV4：4个字节组成，4个0-255。大概42亿，30亿都在北美，亚洲4亿。2011年初已经用尽。以点分十进制表示，如192.168.0.1\"},\"6667\":{\"t\":\"IPV6：128位（16个字节），写成8个无符号整数，每个整数用四个十六进制位表示，数之间用冒号（：）分开 \"},\"6668\":{\"t\":\"如：3ffe:3201:1401:1280:c8ff:fe4d:db39:1984\"},\"6669\":{\"h\":\"2.2 分类方式2：公网地址和私有地址\",\"a\":\"_2-2-分类方式2-公网地址和私有地址\"},\"6670\":{\"t\":\"公网地址：万维网使用\"},\"6671\":{\"t\":\"私有地址：局域网使用。 \"},\"6672\":{\"t\":\"192.168.开头的就是私有址址，范围即为192.168.0.0--192.168.255.255\"},\"6673\":{\"h\":\"3. 本机IP\",\"a\":\"_3-本机ip\"},\"6674\":{\"t\":\"本地回环地址(hostAddress)：127.0.0.1 主机名(hostName)：localhost\"},\"6675\":{\"h\":\"4. hostName：域名\",\"a\":\"_4-hostname-域名\"},\"6676\":{\"t\":\"用来对应IP地址，域名需要进行解析才能与IP地址对应。\"},\"6677\":{\"t\":\"当在连接网络时输入一个主机的域名后，域名服务器(DNS)负责将域名转化成IP地址，这样才能和主机建立连接。\"},\"6678\":{\"t\":\"9-2-1\"},\"6679\":{\"h\":\"5. 端口号\",\"a\":\"_5-端口号\"},\"6680\":{\"t\":\"端口号标识正在计算机上运行的进程（程序），不同的进程有不同的端口号，被规定为一个16位的整数，范围： 0~65535。\"},\"6681\":{\"t\":\"9-2-2\"},\"6682\":{\"h\":\"6. 端口分类：\",\"a\":\"_6-端口分类\"},\"6683\":{\"t\":\"公认端口：0~1023。被预先定义的服务通信占用（如：HTTP占用端口80，FTP占用端口21，Telnet占用端口23）\"},\"6684\":{\"t\":\"注册端口：1024~49151。分配给用户进程或应用程序。（如：Tomcat占用端口8080，MySQL占用端口3306，Oracle占用端口1521等）\"},\"6685\":{\"t\":\"动态/私有端口：49152~65535。自己写的程序用的。\"},\"6686\":{\"h\":\"7. Socket\",\"a\":\"_7-socket\"},\"6687\":{\"t\":\"端口号与IP 地址的组合得出一个网络套接字： 接字：Socket。\"},\"6688\":{\"h\":\"Ⅱ. InetAddress类\",\"a\":\"ii-inetaddress类\"},\"6689\":{\"h\":\"readme\",\"a\":\"readme\"},\"6690\":{\"t\":\"Internet上的主机有两种方式表示地址：\"},\"6691\":{\"t\":\"域名(hostName)：www.google.com\"},\"6692\":{\"t\":\"IP 地址(hostAddress)：202.108.35.210\"},\"6693\":{\"h\":\"1. 介绍\",\"a\":\"_1-介绍\"},\"6694\":{\"t\":\"class：rt.jar>java>net>InetAddress\"},\"6695\":{\"t\":\"InetAddress类主要表示IP地址，两个子类：Inet4Address、Inet6Address。\"},\"6696\":{\"t\":\"InetAddress 类对象含有一个 Internet 主机地址的域名和IP地址\"},\"6697\":{\"h\":\"2. 构造器\",\"a\":\"_2-构造器\"},\"6698\":{\"t\":\"InetAddress 类没有提供公共的构造器，而是提供 了 如下几个 静态方法来获取InetAddress\"},\"6699\":{\"h\":\"2.1 getLocalHost：获得本地IP对象\",\"a\":\"_2-1-getlocalhost-获得本地ip对象\"},\"6700\":{\"t\":\"public static InetAddress getLocalHost() throws UnknownHostException{...}; ================================================================== InetAddress ip = InetAddress.getLocalHost(); System.out.println(ip);//Viktor/192.168.31.247 \"},\"6701\":{\"h\":\"2.2 getByName\",\"a\":\"_2-2-getbyname\"},\"6702\":{\"t\":\"根据参数获得IP对象（参数ip地址字符串或域名字符串）。\"},\"6703\":{\"t\":\"public static InetAddress getByName(String host) =========================================================== InetAddress inet2 = InetAddress.getByName(\\\"www.google.com\\\"); System.out.println(inet2); //www.google.com/199.96.59.61 InetAddress inet3 = InetAddress.getByName(\\\"199.96.59.61\\\"); System.out.println(inet3); //199.96.59.61 \"},\"6704\":{\"h\":\"3. getHostAddress\",\"a\":\"_3-gethostaddress\"},\"6705\":{\"t\":\"以文本的形式，返回IP地址字符串\"},\"6706\":{\"t\":\"public String getHostAddress(); ================================================= InetAddress inet4 = InetAddress.getByName(\\\"www.mi.com\\\"); String inetHostAddress = inet4.getHostAddress(); System.out.println(inetHostAddress);//113.106.97.4 \"},\"6707\":{\"h\":\"4. getHostName：获取IP地址的主机名\",\"a\":\"_4-gethostname-获取ip地址的主机名\"},\"6708\":{\"t\":\"String getHostName() ================================================= InetAddress inet4 = InetAddress.getByName(\\\"www.mi.com\\\"); String hostName = inet4.getHostName(); System.out.println(hostName); //www.mi.com \"},\"6709\":{\"h\":\"5. isReachable：测试是否可以达到该地址\",\"a\":\"_5-isreachable-测试是否可以达到该地址\"},\"6710\":{\"t\":\"参数是超时的时间，单位是ms时间戳\"},\"6711\":{\"t\":\"boolean isReachable(int timeout) ================================================= InetAddress inet4 = InetAddress.getByName(\\\"www.mi.com\\\"); boolean reachable = inet4.isReachable(200); System.out.println(reachable); //true \"},\"6712\":{\"h\":\"9-3. 网络协议\"},\"6713\":{\"h\":\"Ⅰ. 网络通信协议\",\"a\":\"i-网络通信协议\"},\"6714\":{\"h\":\"1. 网络通信协议\",\"a\":\"_1-网络通信协议\"},\"6715\":{\"t\":\"计算机网络中实现通信必须有一些约定，即通信协议.\"},\"6716\":{\"t\":\"对速率、传输代码、代码结构、传输控制步骤、出错控制等制定标准。\"},\"6717\":{\"h\":\"2. 通信协议的分层\",\"a\":\"_2-通信协议的分层\"},\"6718\":{\"t\":\"计算机网络通信涉及内容很多，比如指定源地址和目标地址，加密解密，压缩解压缩，差错控制，流量控制，路由控制，如何实现如此复杂的网络协议呢？\"},\"6719\":{\"t\":\"在制定协议时，把复杂成份分解成一些简单的成份，再将它们复合起来。\"},\"6720\":{\"t\":\"最常用的复合方式是层次方式，即同层间可以通信、上一层可以调用下一层，而与再下一层不发生关系。各层互不影响，利于系统的开发和扩展。\"},\"6721\":{\"h\":\"Ⅱ. TCP与UDP\",\"a\":\"ii-tcp与udp\"},\"6722\":{\"h\":\"1. 传输层协议\",\"a\":\"_1-传输层协议\"},\"6723\":{\"t\":\"传输层协议中有两个非常重要的协议：\"},\"6724\":{\"t\":\"传输控制协议TCP(Transmission Control Protocol)\"},\"6725\":{\"t\":\"用户数据报协议UDP(User Datagram Protocol)。\"},\"6726\":{\"h\":\"2. TCP/IP 协议簇\",\"a\":\"_2-tcp-ip-协议簇\"},\"6727\":{\"t\":\"TCP/IP 以其两个主要协议：传输控制协议(TCP) 和网络互联协议(IP)而得名，实际上是一组协议，包括多个具有不同功能且互为关联的协议。\"},\"6728\":{\"t\":\"TCP/IP协议模型从更实用的角度出发，形成了高效的四层体系结构，即物理链路层、IP层、传输层和应用层。\"},\"6729\":{\"t\":\"IP协议：IP(Internet Protocol)协议是网络层的主要协议，支持网间互连的数据通信。\"},\"6730\":{\"h\":\"3. TCP协议\",\"a\":\"_3-tcp协议\"},\"6731\":{\"t\":\"使用TCP协议前，须先建立TCP连接，形成传输数据通道\"},\"6732\":{\"t\":\"传输前，采用“ 三次握手”方式，点对点通信，是可靠的\"},\"6733\":{\"t\":\"TCP协议进行通信的两个应用进程：客户端、服务端。\"},\"6734\":{\"t\":\"在连接中可进行大数据量的传输\"},\"6735\":{\"t\":\"传输完毕，需释放已建立的连接，效率低\"},\"6736\":{\"h\":\"4. UDP协议\",\"a\":\"_4-udp协议\"},\"6737\":{\"t\":\"常用于：视频播放。\"},\"6738\":{\"t\":\"将数据、源、目的封装成数据包，不需要建立连接\"},\"6739\":{\"t\":\"每个数据报的大小限制在64K内\"},\"6740\":{\"t\":\"发送不管对方是否准备好，接收方收到也不确认，故是不可靠的\"},\"6741\":{\"t\":\"可以广播发送\"},\"6742\":{\"t\":\"发送数据结束时无需释放资源，开销小，速度快\"},\"6743\":{\"h\":\"5. TCP的三次握手\",\"a\":\"_5-tcp的三次握手\"},\"6744\":{\"t\":\"形象类比：A（客户端）与B（服务端）进行对话\"},\"6745\":{\"t\":\"A：B，你好，我是A；\"},\"6746\":{\"t\":\"B：A，你好，我是B，我知道你是A\"},\"6747\":{\"t\":\"A：B，OK，我现在知道你知道我是A了。 结论：至此，三次对话，双方都知道对方是谁了，也知道对方知道自己是谁了。\"},\"6748\":{\"t\":\"9-3-1\"},\"6749\":{\"h\":\"6. TCP的四次挥手\",\"a\":\"_6-tcp的四次挥手\"},\"6750\":{\"t\":\"客户端：我要断开连接了->服务端\"},\"6751\":{\"t\":\"服务端：我知道了->客户端\"},\"6752\":{\"t\":\"服务端：连接断开->客户端\"},\"6753\":{\"t\":\"客户端：测试是否断开->服务端\"},\"6754\":{\"t\":\"9-3-2\"},\"6755\":{\"h\":\"9-4. Socket\"},\"6756\":{\"h\":\"1. 说明\",\"a\":\"_1-说明\"},\"6757\":{\"t\":\"网络上具有唯一标识的IP地址和端口号组合在一起才能构成唯一能识别的标识符套接字 Socket\"},\"6758\":{\"t\":\"利用套接字(Socket)开发网络应用程序早已被广泛的采用，以至于成为事实上的标准。\"},\"6759\":{\"t\":\"网络通信其实就是Socket间的通信。 \"},\"6760\":{\"t\":\"通信的两端都要有Socket，是两台机器间通信的端点。\"},\"6761\":{\"t\":\"Socket允许程序把网络连接当成一个流，数据在两个Socket间通过IO传输。\"},\"6762\":{\"t\":\"一般主动发起通信的应用程序属客户端，等待通信请求的为服务端。\"},\"6763\":{\"h\":\"2. Socket分类\",\"a\":\"_2-socket分类\"},\"6764\":{\"t\":\"流套接字（stream socket）：使用TCP提供可依赖的字节流服务\"},\"6765\":{\"t\":\"数据报套接字（datagram socket）：使用UDP提供“尽力而为”的数据报服务\"},\"6766\":{\"h\":\"3. Socket类常用构造器\",\"a\":\"_3-socket类常用构造器\"},\"6767\":{\"h\":\"3.1 根据IP创建\",\"a\":\"_3-1-根据ip创建\"},\"6768\":{\"t\":\"创建一个流套接字并将其连接到指定IP 地址的指定端口号。\"},\"6769\":{\"t\":\"public Socket(InetAddress address,int port)throws IOException \"},\"6770\":{\"h\":\"3.2 根据host创建\",\"a\":\"_3-2-根据host创建\"},\"6771\":{\"t\":\"创建一个流套接字并将其连接到指定主机上的指定端口号。\"},\"6772\":{\"t\":\"public Socket(String host,int port)throws UnknownHostException,IOException \"},\"6773\":{\"h\":\"4. Socket类常用方法\",\"a\":\"_4-socket类常用方法\"},\"6774\":{\"t\":\"public InputStream getInputStream()返回此套接字的输入流。可以用于接收网络消息\"},\"6775\":{\"t\":\"public OutputStream getOutputStream()返回此套接字的输出流。可以用于发送网络消息\"},\"6776\":{\"t\":\"public InetAddress getInetAddress()此套接字连接到的远程 IP 地址；如果套接字是未连接的，则返回 null。\"},\"6777\":{\"t\":\"public InetAddress getLocalAddress()获取套接字绑定的本地地址。 即本端的IP地址\"},\"6778\":{\"t\":\"public int getPort()此套接字连接到的远程端口号；如果尚未连接套接字，则返回0。\"},\"6779\":{\"t\":\"public int getLocalPort()返回此套接字绑定到的本地端口。 如果尚未绑定套接字，则返回 -1。即本端的端口号。\"},\"6780\":{\"t\":\"public void close()关闭此套接字。套接字被关闭后，便不可在以后的网络连接中使用（即无法重新连接或重新绑定）。需要创建新的套接字对象。 关闭此套接字也将会关闭该套接字的 InputStream 和OutputStream。\"},\"6781\":{\"t\":\"public void shutdownInput()如果在套接字上调用 shutdownInput() 后从套接字输入流读取内容，则流将返回 EOF（文件结束符）。即不能在从此套接字的输入流中接收任何数据。\"},\"6782\":{\"t\":\"public void shutdownOutput()禁用此套接字的输出流。对于 TCP 套接字，任何以前写入的数据都将被发送，并且后跟 TCP 的正常连接终止序列。 如果在套接字上调用 shutdownOutput() 后写入套接字输出流，\"},\"6783\":{\"t\":\"则该流将抛出 IOException。 即不能通过此套接字的输出流发送任何数据。\"},\"6784\":{\"h\":\"9-5. TCP编程\"},\"6785\":{\"h\":\"1. 基于Socket的TCP编程\",\"a\":\"_1-基于socket的tcp编程\"},\"6786\":{\"t\":\"Java语言的基于套接字编程分为服务端编程和客户端编程，其通信模型如图所示：\"},\"6787\":{\"t\":\"9-5-1\"},\"6788\":{\"h\":\"2. 客户端Socket\",\"a\":\"_2-客户端socket\"},\"6789\":{\"t\":\"客户端Socket 的工作过程包含以下四个基本的步骤\"},\"6790\":{\"t\":\"创建Socket：根据指定服务端的 IP 地址或端口号构造 Socket 类对象。若服务器端 响应，则建立客户端到服务器的通信线路。若连接失败，会出现异常。\"},\"6791\":{\"t\":\"打开连接到Socket的输入/写出流 \"},\"6792\":{\"t\":\"使用 getInputStream()方法获得输入流\"},\"6793\":{\"t\":\"使用 getOutputStream()方法获得输出流，进行数据传输\"},\"6794\":{\"t\":\"按照一定的协议对Socket进行读/写操作 \"},\"6795\":{\"t\":\"通过输入流读取服务器放入线路的信息（但不能读取自己放入线路的信息）\"},\"6796\":{\"t\":\"通过输出流将信息写入线程\"},\"6797\":{\"t\":\"关闭Socket：断开客户端到服务器的连接，释放线路\"},\"6798\":{\"h\":\"3. 客户端创建Socket对象\",\"a\":\"_3-客户端创建socket对象\"},\"6799\":{\"t\":\"客户端程序可以使用Socket类创建对象， 创建的同时会自动向服务器方发起连接。\"},\"6800\":{\"h\":\"3.1 Socket的构造器\",\"a\":\"_3-1-socket的构造器\"},\"6801\":{\"t\":\"public Socket(InetAddress address,int port)throws IOException public Socket(String host,int port)throws UnknownHostException,IOException \"},\"6802\":{\"h\":\"3.2 示例\",\"a\":\"_3-2-示例\"},\"6803\":{\"t\":\"public void client() throws IOException { //1.创建Socket对象,参数是服务器端的IP和端口号 Socket clientSocket = new Socket(\\\"127.0.0.1\\\", 2333); //2.返回此Socket对象的输出流,可以用于发送网络消息 OutputStream out = clientSocket.getOutputStream(); //3.进行输出byte[] out.write(\\\"hello\\\".getBytes()); //关闭Socket clientSocket.close(); } \"},\"6804\":{\"h\":\"4. 服务器端Socket\",\"a\":\"_4-服务器端socket\"},\"6805\":{\"t\":\"服务器程序的工作过程包含以下四个基本的步骤\"},\"6806\":{\"t\":\"创建服务端的ServerSocket：调用 ServerSocket(int port) 创建一个服务器端套接字，并绑定到指定端口上。用于监听客户端的请求。\"},\"6807\":{\"t\":\"监听连接请求：调用 accept()监听连接请求，如果客户端请求连接，则接受连接，返回通信套接字对象\"},\"6808\":{\"t\":\"获取输入流和输出流：调用该Socket 类对象的 getOutputStream() 和 getInputStream ()获取输出流和输入流，开始网络数据的发送和接收。\"},\"6809\":{\"t\":\"关闭ServerSocket：客户端访问结束，关闭通信套接字。\"},\"6810\":{\"h\":\"5. 服务器端建立ServerSocket\",\"a\":\"_5-服务器端建立serversocket\"},\"6811\":{\"h\":\"5.1 创建ServerSocket对象\",\"a\":\"_5-1-创建serversocket对象\"},\"6812\":{\"t\":\"ServerSocket 对象负责等待客户端请求建立套接字连接，类似邮局某个窗口中的业务员。也就是说， 服务器必须事先建立一个等待客户请求建立套接字的 连接的ServerSocket 对象。\"},\"6813\":{\"t\":\"该类的构造器，接受一个端口号作为参数，端口号就是本服务端的端口号，客户端通过服务端的ip和创建ServerSocket对象时指定的端口号，来找到服务端。\"},\"6814\":{\"t\":\"public ServerSocket(int port) throws IOException; \"},\"6815\":{\"h\":\"5.2 accept方法\",\"a\":\"_5-2-accept方法\"},\"6816\":{\"t\":\"所谓“接收”客户的套接字请求，就是accept()方法会返回一个 Socket 对象。\"},\"6817\":{\"t\":\"这个Socket对象就是客户端的Socket对象，有了该对象就可以与客户端进行通信 了。\"},\"6818\":{\"h\":\"5.3 使用示例\",\"a\":\"_5-3-使用示例\"},\"6819\":{\"t\":\"public void server() throws IOException { //1.创建服务器套接字对象：ServerSocket ServerSocket serverSocket = new ServerSocket(2333); //2.监听接受客户端的请求，并获取请求的套接字对象 Socket client = serverSocket.accept(); //3.根据请求的套接字对象，获取请求时发送过来的流对象 InputStream inputStream = client.getInputStream(); //4.使用获取的流对象read流的数据 byte[] buf = new byte[1024]; int num = inputStream.read(buf); String res = new String(buf, 0, num); System.out.println(res); //5.关闭服务器套接字和获取的客户端套接字 client.close(); serverSocket.close(); } \"},\"6820\":{\"h\":\"6. TCP网络编程示例\",\"a\":\"_6-tcp网络编程示例\"},\"6821\":{\"t\":\"就是把上面两个方法结合起来。\"},\"6822\":{\"t\":\"先启动服务端：调用服务端方法：server()，此时服务端将一直处于监听状态，等待客户端连接。\"},\"6823\":{\"t\":\"再启动客户端：调用客户端方法：client()，注意ip和端口\"},\"6824\":{\"t\":\"此时客户端与服务端连接成功，客户端开始想服务端传输数据，服务端接受到数据。\"},\"6825\":{\"h\":\"9-6. UDP编程\"},\"6826\":{\"h\":\"Ⅰ. UDP网络编程\",\"a\":\"i-udp网络编程\"},\"6827\":{\"h\":\"1. UDP网络通信\",\"a\":\"_1-udp网络通信\"},\"6828\":{\"t\":\"类 DatagramSocket 和 DatagramPacket 实现了基于 UDP 协议网络程序。\"},\"6829\":{\"t\":\"UDP数据报通过数据报套接字 DatagramSocket 发送和接收，系统不保证UDP数据报一定能够安全送到目的地，也不能确定什么时候可以抵达。\"},\"6830\":{\"t\":\"DatagramPacket 对象封装了UDP数据报，在数据报中包含了发送端的IP地址和端口号以及接收端的IP地址和端口号。\"},\"6831\":{\"t\":\"UDP协议中每个数据报都给出了完整的地址信息，因此无须建立发送方和接收方的连接。如同发快递包裹一样。\"},\"6832\":{\"h\":\"2. UDP通信流程\",\"a\":\"_2-udp通信流程\"},\"6833\":{\"t\":\"发送端与接收端是两个独立的运行程序\"},\"6834\":{\"t\":\"DatagramSocket与DatagramPacket\"},\"6835\":{\"t\":\"建立发送端，接收端\"},\"6836\":{\"t\":\"建立数据包\"},\"6837\":{\"t\":\"调用Socket的发送、接收方法\"},\"6838\":{\"t\":\"关闭Socket\"},\"6839\":{\"h\":\"3. 发送端示例\",\"a\":\"_3-发送端示例\"},\"6840\":{\"t\":\"DatagramSocket ds = null; try { ds = new DatagramSocket(); byte[] by = \\\"hello,atguigu.com\\\".getBytes(); DatagramPacket dp = new DatagramPacket (by, 0, by.length,InetAddress.getByName(\\\"127.0.0.1\\\"), 10000); ds.send(dp); } catch (Exception e) { e.printStackTrace(); } finally { if (ds != null) ds.close(); } \"},\"6841\":{\"h\":\"4. 接收端示例\",\"a\":\"_4-接收端示例\"},\"6842\":{\"t\":\"在接收端，要指定监听的接口\"},\"6843\":{\"t\":\"DatagramSocket ds = null; try { ds = new DatagramSocket(10000); byte[] by = new byte[1024]; DatagramPacket dp = new DatagramPacket(by, by.length); ds.receive(dp); String str = new String(dp.getData(), 0, dp.getLength()); System.out.println(str + \\\"--\\\" + dp.getAddress()); } catch (Exception e) { e.printStackTrace(); } finally { if (ds != null) ds.close(); } \"},\"6844\":{\"h\":\"Ⅱ. DatagramSocket\",\"a\":\"ii-datagramsocket\"},\"6845\":{\"t\":\"DatagramSocket 类的常用方法如下：\"},\"6846\":{\"t\":\"public DatagramSocket(int port)创建数据报套接字并将其绑定到本地主机上的指定端口。套接字将被绑定到通配符地址，IP 地址由内核来选择。\"},\"6847\":{\"t\":\"public DatagramSocket(int port,InetAddress laddr)创建数据报套接字，将其绑定到指定的本地地址。本地端口必须在 0 到 65535 之间（包括两者）。如果 IP 地址为 0.0.0.0，套接字将被绑定到通配符地址，IP 地址由内核选择。\"},\"6848\":{\"t\":\"public void close()关闭此数据报套接字。\"},\"6849\":{\"t\":\"public void send(DatagramPacket p)从此套接字发送数据报包。DatagramPacket 包含的信息指示：将要发送的数据、其长度、远程主机的IP 地址和远程主机的端口号。\"},\"6850\":{\"t\":\"public void receive(DatagramPacket p)从此套接字接收数据报包。当此方法返回时，DatagramPacket的缓冲区填充了接收的数据。数据报包也包含发送方的 IP 地址和发送方机器上的端口号。 此方法在接收到数据报前一直阻塞。数据报包对象的 length 字段包含所接收信息的长度。如果信息比包的长度长，该信息将被截短。\"},\"6851\":{\"t\":\"public InetAddress getLocalAddress()获取套接字绑定的本地地址。\"},\"6852\":{\"t\":\"public int getLocalPort()返回此套接字绑定的本地主机上的端口号。\"},\"6853\":{\"t\":\"public InetAddress getInetAddress()返回此套接字连接的地址。如果套接字未连接，则返回null。\"},\"6854\":{\"t\":\"public int getPort()返回此套接字的端口。如果套接字未连接，则返回-1。\"},\"6855\":{\"h\":\"Ⅲ. DatagramPacket\",\"a\":\"iii-datagrampacket\"},\"6856\":{\"t\":\"DatagramPacket 类的常用方法如下\"},\"6857\":{\"t\":\"public DatagramPacket(byte[] buf,int length)构造 DatagramPacket，用来接收长度为 length 的数据包。 length 参数必须小于等于 buf.length。\"},\"6858\":{\"t\":\"public DatagramPacket(byte[] buf,int length,InetAddress address,int port)构造数据报包，用来将长度为 length 的包发送到指定主机上的指定端口号。length参数必须小于等于 buf.length。\"},\"6859\":{\"t\":\"public InetAddress getAddress()返回某台机器的 IP 地址，此数据报将要发往该机器或者是从该机器接收到的。\"},\"6860\":{\"t\":\"public int getPort()返回某台远程主机的端口号，此数据报将要发往该主机或者是从该主机接收到的。\"},\"6861\":{\"t\":\"public byte[] getData()返回数据缓冲区。接收到的或将要发送的数据从缓冲区中的偏移量 offset 处开始，持续 length 长度。\"},\"6862\":{\"t\":\"public int getLength()返回将要发送或接收到的数据的长度。\"},\"6863\":{\"h\":\"9-7. URL编程\"},\"6864\":{\"h\":\"1. URL介绍\",\"a\":\"_1-url介绍\"},\"6865\":{\"t\":\"URL(Uniform Resource Locator)：统一资源定位符，它表示 Internet 上某一 资源的地址。\"},\"6866\":{\"t\":\"它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源。通过 URL 我们可以访问 Internet 上的各种网络资源，比如最常见的 www，ftp站点。\"},\"6867\":{\"t\":\"浏览器通过解析给定的 URL 可以在网络上查找相应的文件或其他资源。\"},\"6868\":{\"h\":\"2. URL的基本结构\",\"a\":\"_2-url的基本结构\"},\"6869\":{\"t\":\"由5部分组成： < 传输协议>://< 主机名>:< 端口号>/< 文件名># 片段名?\"},\"6870\":{\"t\":\"#片段名：即锚点\"},\"6871\":{\"t\":\"参数列表格式：参数名=参数值&参数名=参数值....\"},\"6872\":{\"t\":\"http://192.168.1.100:8080/helloworld/user#a?uname=shk&password=123 \"},\"6873\":{\"h\":\"3. URL类\",\"a\":\"_3-url类\"},\"6874\":{\"t\":\"为了表示URL，java.net 中实现了类 URL。\"},\"6875\":{\"t\":\"public final class URL implements java.io.Serializable {} \"},\"6876\":{\"t\":\"可以通过下面的几个构造器来初始化一个 URL 对象。\"},\"6877\":{\"t\":\"spec：URL地址的字符串\"},\"6878\":{\"t\":\"context：基 URL\"},\"6879\":{\"t\":\"protocol：传输协议\"},\"6880\":{\"t\":\"host：主机名\"},\"6881\":{\"t\":\"file：文件名\"},\"6882\":{\"t\":\"port：端口号\"},\"6883\":{\"t\":\"public URL(String spec) public URL(URL context, String spec) Public URL(String protocol, String host, String file) public URL(String protocol, String host, int port, String file) ==================================================================== URL url = new URL (\\\"http://www. atguigu.com/\\\"); URL downloadUrl = new URL(url, \\\"download.html\\\") URL url = new URL(\\\"http\\\",\\\"www.atguigu.com\\\", \\\"download. html\\\"); URL gamelan = new URL(\\\"http\\\", \\\"www.atguigu.com\\\", 80, \\\"download.html\\\"); \"},\"6884\":{\"t\":\"异常处理：以上构造器会抛出MalformedURLException异常，URL类的构造器都声明抛出非运行时异常，必须要对这一异常进行处理，通常是用 try-catch 语句进行捕获。\"},\"6885\":{\"h\":\"4. URL类常用方法\",\"a\":\"_4-url类常用方法\"},\"6886\":{\"t\":\"一个URL对象生成后，其属性是不能被改变的，但可以通过它给定的方法来获取这些属性：\"},\"6887\":{\"t\":\"public String getProtocol( ) 获取该URL的协议名\"},\"6888\":{\"t\":\"public String getHost( ) 获取该URL的主机名\"},\"6889\":{\"t\":\"public String getPort( ) 获取该URL的端口号\"},\"6890\":{\"t\":\"public String getPath( ) 获取该URL的文件路径\"},\"6891\":{\"t\":\"public String getFile( ) 获取该URL的文件名\"},\"6892\":{\"t\":\"public String getQuery( ) 获取该URL的查询名\"},\"6893\":{\"h\":\"5. URLConnection\",\"a\":\"_5-urlconnection\"},\"6894\":{\"t\":\"URLConnection类是专门针对HTTP协议的。\"},\"6895\":{\"t\":\"URL的方法 openStream()：能从网络上读取数据\"},\"6896\":{\"t\":\"若希望输出数据，例如向服务器端的 CGI （公共网关接口-Common Gateway Interface-的简称，是用户浏览器和服务器端的应用程序进行连接的接口）程序发送一些数据，则必须先与URL建立连接，然后才能对其进行读写，此时需要使用URLConnection 。\"},\"6897\":{\"h\":\"5.1 URLConnection的创建\",\"a\":\"_5-1-urlconnection的创建\"},\"6898\":{\"t\":\"表示到URL所引用的远程对象的连接。当与一个URL建立连接时，首先要在一个 URL 对象上通过方法 openConnection() 生成对应的 URLConnection对象。如果连接过程失败，将产生IOException.\"},\"6899\":{\"t\":\"URL netchinaren = new URL (\\\"http://www.atguigu.com/index.shtml\\\"); URLConnectonn u = netchinaren.openConnection( ); \"},\"6900\":{\"h\":\"5.2 交互方法\",\"a\":\"_5-2-交互方法\"},\"6901\":{\"t\":\"public Object getContent( ) throws IOException\"},\"6902\":{\"t\":\"public int getContentLength( )\"},\"6903\":{\"t\":\"public String getContentType( )\"},\"6904\":{\"t\":\"public long getDate( )\"},\"6905\":{\"t\":\"public long getLastModified( )\"},\"6906\":{\"t\":\"public InputStream getInputStream( )throws IOException\"},\"6907\":{\"t\":\"public OutputSteram getOutputStream( )throws IOException\"},\"6908\":{\"h\":\"6. URI、URL和URN的区别\",\"a\":\"_6-uri、url和urn的区别\"},\"6909\":{\"t\":\"URI，是uniform resource identifier，统一资源标识符，用来唯一的标识一个资源。\"},\"6910\":{\"t\":\"而URL是uniform resource locator，统一资源定位符，它是一种具体的URI。即URL可以用来标识一个资源，而且还指明了如何locate这个资源。\"},\"6911\":{\"t\":\"而URN，uniform resource name，统一资源命名，是通过名字来标识资源，比如mailto:java-net@java.sun.com。也就是说，URI是以一种抽象的，高层次概念定义统一资源标识，而URL和URN则是具体的资源标识的方式。\"},\"6912\":{\"t\":\"9-7-1\"},\"6913\":{\"t\":\"URL和URN都是一种URI。在Java的URI中，一个URI实例可以代表绝对的，也可以是相对的，只要它符合URI的语法规则。而URL类则不仅符合语义，还包含了定位该资源的信息，因此它不能是相对的。\"},\"6914\":{\"h\":\"7. 小结\",\"a\":\"_7-小结\"},\"6915\":{\"t\":\"位于网络中的计算机具有唯一的IP地址，这样不同的主机可以互相区分。\"},\"6916\":{\"t\":\"客户端－服务器是一种最常见的网络应用程序模型。服务器是一个为其客户端提供某种特定服务的硬件或软件。客户机是一个用户应用程序，用于访问某台服务器提供的服务。端口号是对一个服务的访问场所，它用于区分同一物理计算机上的多个服务。套接字用于连接客户端和服务器，客户端和服务器之间的每个通信会话使用一个不同的套接字。TCP协议用于实现面向连接的会话。\"},\"6917\":{\"t\":\"Java 中有关网络方面的功能都定义在 java.net 程序包中。Java 用 InetAddress 对象表示 IP 地址，该对象里有两个字段：主机名(String) 和 IP 地址(int)。\"},\"6918\":{\"t\":\"类 Socket 和 ServerSocket 实现了基于TCP协议的客户端－服务器程序。Socket是客户端和服务器之间的一个连接，连接创建的细节被隐藏了。这个连接提供了一个安全的数据传输通道，这是因为 TCP 协议可以解决数据在传送过程中的丢失、损坏、重复、乱序以及网络拥挤等问题，它保证数据可靠的传送。\"},\"6919\":{\"t\":\"类 URL 和 URLConnection 提供了最高级网络应用。URL 的网络资源的位置来同一表示Internet 上各种网络资源。通过URL对象可以创建当前应用程序和 URL 表示的网络资源之间的连接，这样当前程序就可以读取网络资源数据，或者把自己的数据传送到网络上去\"},\"6920\":{\"h\":\"a-1. 反射机制介绍\"},\"6921\":{\"h\":\"Reflection：反射机制\",\"a\":\"reflection-反射机制\"},\"6922\":{\"t\":\"Reflection（反射）是被视为动态语言的关键，反射机制允许程序在执行期借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。\"},\"6923\":{\"h\":\"1. 动态语言与静态语言\",\"a\":\"_1-动态语言与静态语言\"},\"6924\":{\"t\":\"动态语言：是一类在运行时可以改变其结构的语言：例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或是其他结构上的变化。通俗点说就是 在运行时代码可以根据某些条件改变自身结构。 \"},\"6925\":{\"t\":\"主要动态语言：Object-C、C#、JavaScript、PHP、Python、Erlang。\"},\"6926\":{\"t\":\"静态语言：需要编译，与动态语言相对应的，运行时结构不可变的语言就是静态语言。 \"},\"6927\":{\"t\":\"如Java、C、C++。\"},\"6928\":{\"t\":\"Java：Java不是动态语言，但Java可以称之为“准动态语言”。即Java有一定的动态性，我们可以利用反射机制、字节码操作获得类似动态语言的特性。Java的动态性让编程的时候更加灵活！\"},\"6929\":{\"h\":\"2. Class与反射工作原理\",\"a\":\"_2-class与反射工作原理\"},\"6930\":{\"t\":\"Class类是类的类，加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象（一个类只有一个Class对象），这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以，我们形象的称之为： 反射\"},\"6931\":{\"h\":\"3. 反射机制提供的功能\",\"a\":\"_3-反射机制提供的功能\"},\"6932\":{\"t\":\"在运行时判断任意一个对象所属的类\"},\"6933\":{\"t\":\"在运行时构造任意一个类的对象\"},\"6934\":{\"t\":\"在运行时判断任意一个类所具有的成员变量和方法\"},\"6935\":{\"t\":\"在运行时获取泛型信息\"},\"6936\":{\"t\":\"在运行时调用任意一个对象的成员变量和方法\"},\"6937\":{\"t\":\"在运行时处理注解\"},\"6938\":{\"t\":\"生成动态代理\"},\"6939\":{\"h\":\"4. 反射相关API\",\"a\":\"_4-反射相关api\"},\"6940\":{\"t\":\"java.lang.Class: 代表一个类\"},\"6941\":{\"t\":\"java.lang.reflect.Method: 代表类的方法\"},\"6942\":{\"t\":\"java.lang.reflect.Field: 代表类的 成员 变量\"},\"6943\":{\"t\":\"java.lang.reflect.Constructor: 代表类 的 构造 器\"},\"6944\":{\"t\":\"…\"},\"6945\":{\"h\":\"5. 反射的动态性\",\"a\":\"_5-反射的动态性\"},\"6946\":{\"t\":\"反射机制最大的特点，就是动态性（通用性），这也是为什么框架中会大量的使用反射。\"},\"6947\":{\"h\":\"5.1 示例\",\"a\":\"_5-1-示例\"},\"6948\":{\"t\":\"使用代码体验反射的动态性\"},\"6949\":{\"t\":\"//1.创建一个函数：根据全类名参数创建类的对象 public Object getInstance(String classPath) throws Exception { Class clazz = Class.forName(classPath); return clazz.newInstance(); } //2.动态创建一个随机对象 public void test2(){ int num = new Random().nextInt(3);//0,1,2 String classPath = \\\"\\\"; switch(num){ case 0: classPath = \\\"java.util.Date\\\"; break; case 1: classPath = \\\"java.lang.Object\\\"; break; case 2: classPath = \\\"com.atguigu.java.Person\\\"; break; } Object obj = getInstance(classPath); System.out.println(obj); } \"},\"6950\":{\"h\":\"5.2 补充说明\",\"a\":\"_5-2-补充说明\"},\"6951\":{\"t\":\"为什么不用new，而用反射创建类的对象：我们不知道要创建什么对象，所以无法确定变量的类型，无法new\"},\"6952\":{\"t\":\"public Object getObj(String className) throws Exception{ className cn1 = new className(); //直接报错 return cn1; } \"},\"6953\":{\"t\":\"为什么不直接同判断返回new好的对象：要同时new很多对象，浪费资源。\"},\"6954\":{\"h\":\"6. 反射机制使用示例：仅体验\",\"a\":\"_6-反射机制使用示例-仅体验\"},\"6955\":{\"h\":\"6.1 创建Test类：Person\",\"a\":\"_6-1-创建test类-person\"},\"6956\":{\"t\":\"class Person{ private String name; public int age; public String toString() { return \\\"Person{\\\" +\\\"name='\\\" + name + '\\\\'' +\\\", age=\\\" + age +'}'; } public String getName() { return name; } public void setName(String name) { this.name = name; } public Person(String name, int age) { this.name = name; this.age = age; } private Person(String name) { this.name = name; } public void show(){ System.out.println(\\\"你好，我是一个人\\\"); } private String showNation(String nation){ System.out.println(\\\"我的国籍是：\\\" + nation); return nation; } } \"},\"6957\":{\"h\":\"6.2 不使用反射：对Person的操作\",\"a\":\"_6-2-不使用反射-对person的操作\"},\"6958\":{\"t\":\"public void test(){ Person p1 = new Person(\\\"Aaron\\\", 20); p1.age = 20; System.out.println(p1); //调用toString方法 p1.show(); //你好，我是一个人 } \"},\"6959\":{\"h\":\"6.3 使用反射：操作Person\",\"a\":\"_6-3-使用反射-操作person\"},\"6960\":{\"t\":\"public void test1() throws Exception { //1.通过反射，创建Person类的对象 Class<Person> pClass = Person.class; Constructor<Person> cons = pClass.getConstructor(String.class, int.class); Person p = cons.newInstance(\\\"Aaron\\\", 20); System.out.println(p); //调用了Person对象的toString方法 //2.通过反射，调用对象指定的属性、方法 Field age = pClass.getDeclaredField(\\\"age\\\"); //调用属性 System.out.println(age); //20 Method show = pClass.getDeclaredMethod(\\\"show\\\"); //调用方法 show.invoke(p);//你好，我是一个人 } \"},\"6961\":{\"h\":\"6.4 使用反射：操作Person私有成员\",\"a\":\"_6-4-使用反射-操作person私有成员\"},\"6962\":{\"t\":\"public void test2() throws Exception { //1.通过反射，调用私有化构造器，创建Person对象 Class<Person> pClass = Person.class; Constructor<Person> cons = pClass.getDeclaredConstructor(String.class); cons.setAccessible(true); Person p1 = cons.newInstance(\\\"Jerry\\\"); //2.调用私有属性 Field name = pClass.getDeclaredField(\\\"name\\\"); name.setAccessible(true); name.set(p1,\\\"Alen\\\"); System.out.println(p1); //Person{name='Alen', age=0} //3.调用私有方法 Method showNation = pClass.getDeclaredMethod(\\\"showNation\\\", String.class); showNation.setAccessible(true); Object nation = showNation.invoke(p1, \\\"China\\\"); //我的国籍是：China System.out.println(nation); //China } \"},\"6963\":{\"h\":\"a-2. Class\"},\"6964\":{\"h\":\"1. Class类\",\"a\":\"_1-class类\"},\"6965\":{\"t\":\"Class的全类名为：Object.lang.Class\"},\"6966\":{\"t\":\"Class属于类的类，即每个类所属的类，我们把类当做是对象（万物皆对象），那么类所属的类就是Class类。对于每个类而言，JRE 都为其保留一个不变的 Class 类型的对象。\"},\"6967\":{\"t\":\"Class类是反射的源头。我们需要使用Class类的对象拿到想要的内容。\"},\"6968\":{\"h\":\"2. Class与类的加载\",\"a\":\"_2-class与类的加载\"},\"6969\":{\"t\":\"程序经过javac.exe命令以后，会生成一个或多个字节码文件(.class结尾)。接着我们使用java.exe命令对某个字节码文件进行解释运行。相当于将某个字节码文件加载到内存中。此过程就称为类的加载。加载到内存中的类，我们就称为运行时类，此运行时类，就作为Class的一个实例。\"},\"6970\":{\"h\":\"3. 使用Class的本质\",\"a\":\"_3-使用class的本质\"},\"6971\":{\"t\":\"Class是直接操纵加载到内存里的类的，Class的实例就对应着一个运行时类。\"},\"6972\":{\"t\":\"我们使用类时，会将类加载到内存中，内存中的这个类就是Class的一个实例。我们可以使用Class类的实例，利用Class提供的方法，来操作内存中的类的一切元素，包括私有元素，因为私有元素也加载到内存中了。\"},\"6973\":{\"h\":\"4. Class的特点\",\"a\":\"_4-class的特点\"},\"6974\":{\"t\":\"Class本身也是一个类\"},\"6975\":{\"t\":\"Class 对象只能由系统建立对象\"},\"6976\":{\"t\":\"一个加载的类在 JVM 中只会有一个Class实例\"},\"6977\":{\"t\":\"一个Class对象对应的是一个加载到JVM中的一个.class文件\"},\"6978\":{\"t\":\"每个类的实例都会记得自己是由哪个 Class 实例所生成\"},\"6979\":{\"t\":\"通过Class可以完整地得到一个类中的所有被加载的结构\"},\"6980\":{\"t\":\"Class类是Reflection的根源，针对任何你想动态加载、运行的类，唯有先获得相应的Class对象\"},\"6981\":{\"h\":\"5. 可以有Class对象的元素\",\"a\":\"_5-可以有class对象的元素\"},\"6982\":{\"t\":\"class：外部类，成员(成员内部类，静态内部类)，局部内部类，匿名内部类\"},\"6983\":{\"t\":\"interface：接口\"},\"6984\":{\"t\":\"[]：数组\"},\"6985\":{\"t\":\"enum：枚举\"},\"6986\":{\"t\":\"annotation：注解@interface\"},\"6987\":{\"t\":\"primitive type：基本数据类型\"},\"6988\":{\"t\":\"void\"},\"6989\":{\"t\":\"Class<Object> c1 = Object.class; System.out.println(c1); //class java.lang.Object Class<Override> c2 = Override.class; System.out.println(c2); //interface java.lang.Override Class<Void> c3 = void.class; System.out.println(c3); //void \"},\"6990\":{\"h\":\"6. 获取Class类的实例\",\"a\":\"_6-获取class类的实例\"},\"6991\":{\"t\":\"加载到内存中的运行时类，会缓存一定的时间。在此时间之内，我们可以通过不同的方式来获取此运行时类（即获取Class类的实例），一共有四种方法，以下四个方法创建的Class是同一个Class。\"},\"6992\":{\"h\":\"6.1 调用运行时类的属性：.class\",\"a\":\"_6-1-调用运行时类的属性-class\"},\"6993\":{\"t\":\"若已知具体的类，通过类的class属性获取，该方法最为安全可靠，程序性能最高\"},\"6994\":{\"t\":\"Class<Person> c1 = Person.class; System.out.println(c1); //class ReflectionStudy.Person \"},\"6995\":{\"h\":\"6.2 通过运行时类的对象,调用getClass()\",\"a\":\"_6-2-通过运行时类的对象-调用getclass\"},\"6996\":{\"t\":\"已知某个类的实例，调用该实例的getClass()方法获取Class对象\"},\"6997\":{\"t\":\"Person p1 = new Person(); Class<? extends Person> c2 = p1.getClass(); System.out.println(c2); //class ReflectionStudy.Person \"},\"6998\":{\"h\":\"6.3 调用Class的静态方法：forName(String classPath)【常用】\",\"a\":\"_6-3-调用class的静态方法-forname-string-classpath-【常用】\"},\"6999\":{\"t\":\"已知一个类的全类名（包+类名），且该类在类路径下，可通过Class类的静态方法forName()获取，可能抛出 ClassNotFoundException\"},\"7000\":{\"t\":\"Class<?> c3 = Class.forName(\\\"ReflectionStudy.Person\\\"); System.out.println(c3); //class ReflectionStudy.Person \"},\"7001\":{\"h\":\"6.4 使用类的加载器：ClassLoader (了解)\",\"a\":\"_6-4-使用类的加载器-classloader-了解\"},\"7002\":{\"t\":\"ClassLoader cl = this.getClass().getClassLoader(); Class<?> c4 = cl.loadClass(\\\"ReflectionStudy.Person\\\"); System.out.println(c4); //class ReflectionStudy.Person \"},\"7003\":{\"h\":\"7. Class类的常用方法\",\"a\":\"_7-class类的常用方法\"},\"7004\":{\"t\":\"详见：内置函数>反射类\"},\"7005\":{\"h\":\"a-3. 类的加载\"},\"7006\":{\"h\":\"Ⅰ. 类的加载\",\"a\":\"i-类的加载\"},\"7007\":{\"h\":\"1.类的初始化\",\"a\":\"_1-类的初始化\"},\"7008\":{\"t\":\"当程序主动使用某个类时，如果该类还未被加载到内存中，则系统会通过如下三个步骤来对该类进行初始化：\"},\"7009\":{\"t\":\"a-3-1\"},\"7010\":{\"h\":\"1.1 Load：类的加载\",\"a\":\"_1-1-load-类的加载\"},\"7011\":{\"t\":\"将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口（即引用地址）。所有需要访问和使用类数据只能通过这个Class对象。这个加载的过程需要类加载器参与。\"},\"7012\":{\"h\":\"1.2 Link：类的链接\",\"a\":\"_1-2-link-类的链接\"},\"7013\":{\"t\":\"将Java类的二进制代码合并到JVM的运行状态之中的过程。\"},\"7014\":{\"t\":\"验证：确保加载的类信息符合JVM规范，例如：以cafe开头，没有安全方面的问题\"},\"7015\":{\"t\":\"准备：正式为类变量（static）分配内存并 设置类变量默认初始值的阶段，这些内存都将在方法区中进行分配。\"},\"7016\":{\"t\":\"解析：虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）的过程\"},\"7017\":{\"h\":\"1.3 Initialize：类的初始化\",\"a\":\"_1-3-initialize-类的初始化\"},\"7018\":{\"t\":\"执行类构造器<clinit>()方法的过程。类构造器<clinit>()方法是由编译期自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的。（类构造器是构造类信息的，不是构造该类对象的构造器）。\"},\"7019\":{\"t\":\"当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。\"},\"7020\":{\"t\":\"虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确加锁和同步。\"},\"7021\":{\"h\":\"2. 类初始化的时机\",\"a\":\"_2-类初始化的时机\"},\"7022\":{\"t\":\"类的主动引用 ：一定会发生类的初始化 \"},\"7023\":{\"t\":\"当虚拟机启动，先初始化main方法所在的类\"},\"7024\":{\"t\":\"new一个类的对象\"},\"7025\":{\"t\":\"调用类的静态成员（除了final常量）和静态方法\"},\"7026\":{\"t\":\"使用java.lang.reflect包的方法对类进行反射调用\"},\"7027\":{\"t\":\"当初始化一个类，如果其父类没有被初始化，则先会初始化它的父类\"},\"7028\":{\"t\":\"类的被动引用： 不会发生类的初始化 \"},\"7029\":{\"t\":\"当访问一个静态域时，只有真正声明这个域的类才会被初始化 \"},\"7030\":{\"t\":\"当通过子类引用父类的静态变量，不会导致子类初始化\"},\"7031\":{\"t\":\"通过数组定义类引用，不会触发此类的初始化\"},\"7032\":{\"t\":\"引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池中了）\"},\"7033\":{\"h\":\"Ⅱ. ClassLoader\",\"a\":\"ii-classloader\"},\"7034\":{\"t\":\"ClassLoader：类加载器\"},\"7035\":{\"t\":\"标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载（缓存）一段时间。不过JVM垃圾回收机制可以回收这些Class对象。\"},\"7036\":{\"h\":\"1. 类加载器\",\"a\":\"_1-类加载器\"},\"7037\":{\"t\":\"类加载器作用是用来把类(class)装载进内存的。JVM 规范定义了如下类型的类的加载器。\"},\"7038\":{\"t\":\"a-3-2\"},\"7039\":{\"t\":\"系统类加载器：加载自定义类\"},\"7040\":{\"t\":\"扩展类加载器：加载ext下的jar包\"},\"7041\":{\"t\":\"引导类加载器：加载核心类库，该加载器无法获取\"},\"7042\":{\"h\":\"2. 加载器获取\",\"a\":\"_2-加载器获取\"},\"7043\":{\"t\":\"//1.获得当前自定义类加载器：系统类加载器 ClassLoader cl1 = ClassTest.class.getClassLoader(); System.out.println(cl1); //sun.misc.Launcher$AppClassLoader@18b4aac2 //2.调用系统类加载器的getParent()：获取扩展类加载器 ClassLoader cl2 = cl1.getParent(); System.out.println(cl2);//sun.misc.Launcher$ExtClassLoader@77556fd //3.调用扩展类加载器的getParent()：无法获取引导类加载器 ClassLoader cl3 = cl2.getParent(); System.out.println(cl3); //null //4.获得核心类库String的类加载器：无法获取核心类库的引导类加载器 ClassLoader cl4 = String.class.getClassLoader(); System.out.println(cl4); //null \"},\"7044\":{\"h\":\"3. getResourceAsStream：获取类路径下的指定文件的输入流\",\"a\":\"_3-getresourceasstream-获取类路径下的指定文件的输入流\"},\"7045\":{\"t\":\"将文件加载为InputStream\"},\"7046\":{\"t\":\"getResourceAsStream(String str) \"},\"7047\":{\"h\":\"4. 使用ClassLoader加载配置文件\",\"a\":\"_4-使用classloader加载配置文件\"},\"7048\":{\"t\":\"使用ClassLoader的getResourceAsStream方法加载配置文件，结合Properties类（读取配置文件的输入流）使用。\"},\"7049\":{\"t\":\"Properties pros = new Properties(); //此时的文件默认在当前的module下。 //读取配置文件的方式一： FileInputStream fis = new FileInputStream(\\\"jdbc.properties\\\"); FileInputStream fis = new FileInputStream(\\\"src\\\\\\\\jdbc1.properties\\\"); pros.load(fis); //读取配置文件的方式二：使用ClassLoader //配置文件默认识别为：当前module的src下 ClassLoader classLoader = ClassLoaderTest.class.getClassLoader(); InputStream is = classLoader.getResourceAsStream(\\\"jdbc1.properties\\\"); pros.load(is); String user = pros.getProperty(\\\"user\\\"); String password = pros.getProperty(\\\"password\\\"); System.out.println(\\\"user = \\\" + user + \\\",password = \\\" + password); \"},\"7050\":{\"h\":\"a-4. 运行时类\"},\"7051\":{\"h\":\"Ⅰ. 运行时类的对象\",\"a\":\"i-运行时类的对象\"},\"7052\":{\"h\":\"1. newInstance：通过反射创建对应的运行时类的对象\",\"a\":\"_1-newinstance-通过反射创建对应的运行时类的对象\"},\"7053\":{\"t\":\"要求：类必须有一个无参数的构造器，且访问权限需要足够。\"},\"7054\":{\"t\":\"//创建Person类的Class实例 Class<Person> pClass = Person.class; //2.通过反射创建对象 Person p = pClass.newInstance(); //调用的是空参构造器 System.out.println(p.getClass()); //class ReflectionStudy.Person System.out.println(p); // Person{name='null', age=0} \"},\"7055\":{\"t\":\"异常说明 \"},\"7056\":{\"t\":\"如果类没有空参构造器，newInstance()方法将抛出InstantiationException异常；\"},\"7057\":{\"t\":\"如果空参构造器访问权限是不够(private)，将抛出：IllegalAccessException异常。\"},\"7058\":{\"t\":\"空参构造器 \"},\"7059\":{\"t\":\"newInstance方法默认会调用类的空参构造器，又因为可能会产生异常，所以：在javabean中要求提供一个public的空参构造器。\"},\"7060\":{\"t\":\"同时：也便于子类继承此运行时类时，默认调用super()时，保证父类有此构造器\"},\"7061\":{\"h\":\"2. getDeclaredConstructor\",\"a\":\"_2-getdeclaredconstructor\"},\"7062\":{\"t\":\"取得本类的指定形参类型的构造器；newInstance方法只能调用无参构造器创建对象，如果类中没有无参构造器就不能使用newInstance了。\"},\"7063\":{\"t\":\"可以通过Class类的getDeclaredConstructor(Class … parameterTypes)取得本类的指定形参类 型的构造器向构造器的形参中传递一个对象数组进去，里面包含了构造器中所需的各个参数。通过Constructor实例化对象。\"},\"7064\":{\"t\":\"参数：就是构造器参数所属的Class。\"},\"7065\":{\"t\":\"Class<Person> clazz = Person.class; Person p1 = clazz.newInstance();//调用无参构造器，创建Person对象 //调用有参构造器，该构造器接受一个String类谢谢的参数：String.class Constructor cons = clazz.getDeclaredConstructor(String.class); Person jin = (Person)cons.newInstance(\\\"jin\\\"); \"},\"7066\":{\"h\":\"3. 获取运行时类的完整结构\",\"a\":\"_3-获取运行时类的完整结构\"},\"7067\":{\"t\":\"既然运行时类已经加载到了内存中，那么我们就可以从内存中，获取运行时类的所有结构，只需要使用定义好的Class的方法。\"},\"7068\":{\"t\":\"仅了解：方便看框架源码。\"},\"7069\":{\"h\":\"Ⅱ. 获取属性结构\",\"a\":\"ii-获取属性结构\"},\"7070\":{\"h\":\"1. getFields：获取自己和父类所有Public属性\",\"a\":\"_1-getfields-获取自己和父类所有public属性\"},\"7071\":{\"t\":\"获取当前运行时类及其父类中声明为public访问权限的属性\"},\"7072\":{\"t\":\"Class<Person> personClass = Person.class; Field[] fields = personClass.getFields(); for(Field f:fields){ //遍历包含属性的数组 System.out.println(f); } \"},\"7073\":{\"h\":\"输出结果\",\"a\":\"输出结果\"},\"7074\":{\"t\":\"public int ReflectionStudy.Person.id ：Person类中的public属性\"},\"7075\":{\"t\":\"public double ReflectionStudy.Creature.weight：Person父类的public属性\"},\"7076\":{\"h\":\"2. getDeclareFields：获取所有自己所有权限的属性\",\"a\":\"_2-getdeclarefields-获取所有自己所有权限的属性\"},\"7077\":{\"t\":\"获取当前运行时类中声明的所有属性。（不包含父类中声明的属性）\"},\"7078\":{\"t\":\"Field[] declaredFields = personClass.getDeclaredFields(); for(Field f:declaredFields){ System.out.println(f); } \"},\"7079\":{\"h\":\"遍历结果\",\"a\":\"遍历结果\"},\"7080\":{\"t\":\"输出了所有Person类的属性\"},\"7081\":{\"t\":\"private java.lang.String ReflectionStudy.Person.name\"},\"7082\":{\"t\":\"int ReflectionStudy.Person.age\"},\"7083\":{\"t\":\"public int ReflectionStudy.Person.id\"},\"7084\":{\"h\":\"3. 获取属性的结构\",\"a\":\"_3-获取属性的结构\"},\"7085\":{\"t\":\"包括：权限修饰符、数据类型、变量名\"},\"7086\":{\"t\":\"Field[] declaredFields = personClass.getDeclaredFields(); for(Field f:declaredFields){ //1.权限修饰符 int modifier = f.getModifiers(); System.out.println(modifier); System.out.println(Modifier.toString(modifier)+\\\"\\\\t\\\"); //2.数据类型 Class<?> type = f.getType(); System.out.println(type.getName()); String fName = f.getName(); System.out.println(fName); } \"},\"7087\":{\"t\":\"getModifier：获取权限修饰符，返回值：2,0,1，返回的结果是int类型的：0~3 \"},\"7088\":{\"t\":\"0：默认类型\"},\"7089\":{\"t\":\"1：public\"},\"7090\":{\"t\":\"2：private\"},\"7091\":{\"t\":\"3：protected\"},\"7092\":{\"t\":\"getType：获取数据类型，返回值：java.lang.String、int、int \"},\"7093\":{\"t\":\"返回数据类型，如果是引用类型，会返回完整的类名\"},\"7094\":{\"t\":\"getName：获取属性名，返回值：name、age、int，返回字符串形式的属性名\"},\"7095\":{\"h\":\"Ⅲ. 获取方法结构\",\"a\":\"iii-获取方法结构\"},\"7096\":{\"h\":\"1. 获取运行时类的方法\",\"a\":\"_1-获取运行时类的方法\"},\"7097\":{\"t\":\"Class clazz = Person.class; Method[] methods = clazz.getMethods(); for(Method m : methods){ System.out.println(m); } Method[] declaredMethods = clazz.getDeclaredMethods(); for(Method m : declaredMethods){ System.out.println(m); } \"},\"7098\":{\"t\":\"getMethods：获取类和父类中public方法 \"},\"7099\":{\"t\":\"返回值：略（包括Object这个父类的方法）\"},\"7100\":{\"t\":\"获取当前运行时类及其所有父类中声明为public权限的方法\"},\"7101\":{\"t\":\"getDeclaredMethods：获取本类所有权限的方法 \"},\"7102\":{\"t\":\"返回值：略（包含private方法）\"},\"7103\":{\"t\":\"获取当前运行时类中声明的所有方法。（不包含父类中声明的方法）\"},\"7104\":{\"h\":\"2. 获取运行时方法的结构\",\"a\":\"_2-获取运行时方法的结构\"},\"7105\":{\"t\":\"包括：权限修饰符、返回值类型、方法名、形参列表、方法的注解、异常列表\"},\"7106\":{\"t\":\"Class clazz = Person.class; Method[] declaredMethods = clazz.getDeclaredMethods(); for(Method m : declaredMethods){ //1.获取方法声明的注解 Annotation[] annos = m.getAnnotations(); for(Annotation a : annos){ System.out.println(a); } //2.权限修饰符 System.out.print(Modifier.toString(m.getModifiers()) + \\\"\\\\t\\\"); //3.返回值类型 System.out.print(m.getReturnType().getName() + \\\"\\\\t\\\"); //4.方法名 System.out.print(m.getName()); System.out.print(\\\"(\\\"); //5.形参列表 Class[] parameterTypes = m.getParameterTypes(); if(!(parameterTypes == null && parameterTypes.length == 0)){ for(int i = 0;i < parameterTypes.length;i++){ if(i == parameterTypes.length - 1){ System.out.print(parameterTypes[i].getName() +\\\"args_\\\" +i); break; } System.out.print(parameterTypes[i].getName()+\\\"args_\\\" +i+ \\\",\\\"); } } System.out.print(\\\")\\\"); //6.抛出的异常 Class[] exceptionTypes = m.getExceptionTypes(); if(exceptionTypes.length > 0){ System.out.print(\\\"throws \\\"); for(int i = 0;i < exceptionTypes.length;i++){ if(i == exceptionTypes.length - 1){ System.out.print(exceptionTypes[i].getName()); break; } System.out.print(exceptionTypes[i].getName() + \\\",\\\"); } } System.out.println(); } \"},\"7107\":{\"t\":\"getAnnotations：获取方法的注解 \"},\"7108\":{\"t\":\"返回值：@ReflectionStudy.MyAnnotation(value=hello)\"},\"7109\":{\"t\":\"一般用来获取自定义的注解\"},\"7110\":{\"t\":\"getModifiers：获取权限修饰符 \"},\"7111\":{\"t\":\"返回值：1、1、2、1、2\"},\"7112\":{\"t\":\"同属性的权限修饰符\"},\"7113\":{\"t\":\"getReturnType：获取返回值类型 \"},\"7114\":{\"t\":\"返回值：java.lang.String、int、int、void ...\"},\"7115\":{\"t\":\"同属性的返回值类型\"},\"7116\":{\"t\":\"getName：获取方法名 \"},\"7117\":{\"t\":\"返回值：compareTo、info()、show()、display、showDesc()\"},\"7118\":{\"t\":\"获取字符串形式的方法名\"},\"7119\":{\"t\":\"getParameterTypes：获取形参列表 \"},\"7120\":{\"t\":\"返回值：(java.lang.String args_0)、(java.lang.String args_0,int args_1)......\"},\"7121\":{\"t\":\"返回的只有形参的类型，需要自己进行循环拼接形参名\"},\"7122\":{\"t\":\"getExceptionTypes：获取抛出的异常 \"},\"7123\":{\"t\":\"返回值：throws java.lang.NullPointerException,java.lang.ClassCastException\"},\"7124\":{\"t\":\"可能是多个异常，返回的是数组。\"},\"7125\":{\"h\":\"Ⅳ. 获取其他信息\",\"a\":\"iv-获取其他信息\"},\"7126\":{\"h\":\"1. 获取运行时类的构造器结构\",\"a\":\"_1-获取运行时类的构造器结构\"},\"7127\":{\"t\":\"可能有多个构造器，所以返回数组\"},\"7128\":{\"t\":\"Class clazz = Person.class; //获取当前运行时类中声明为public的构造器 Constructor[] constructors = clazz.getConstructors(); for(Constructor c : constructors){ System.out.println(c); } System.out.println(); //获取当前运行时类中声明的所有的构造器 Constructor[] declaredConstructors = clazz.getDeclaredConstructors(); for(Constructor c : declaredConstructors){ System.out.println(c); } \"},\"7129\":{\"t\":\"getConstructors：获取当前运行时类中声明为public的构造器\"},\"7130\":{\"t\":\"getDeclaredConstructors：获取当前运行时类中声明的所有的构造器\"},\"7131\":{\"h\":\"2. getSuperclass：获取运行时类的父类\",\"a\":\"_2-getsuperclass-获取运行时类的父类\"},\"7132\":{\"t\":\"Class clazz = Person.class; Class superclass = clazz.getSuperclass(); System.out.println(superclass); \"},\"7133\":{\"h\":\"3. getGenericSuperclass：获取运行时类的父类的泛型\",\"a\":\"_3-getgenericsuperclass-获取运行时类的父类的泛型\"},\"7134\":{\"t\":\"Class clazz = Person.class; Type genericSuperclass = clazz.getGenericSuperclass(); System.out.println(genericSuperclass); \"},\"7135\":{\"h\":\"getActualTypeArguments：获取运行时类的父类的泛型\",\"a\":\"getactualtypearguments-获取运行时类的父类的泛型\"},\"7136\":{\"t\":\"只返回泛型\"},\"7137\":{\"t\":\"Class clazz = Person.class; Type genericSuperclass = clazz.getGenericSuperclass(); ParameterizedType paramType = (ParameterizedType) genericSuperclass; //获取泛型类型 Type[] actualTypeArguments = paramType.getActualTypeArguments(); System.out.println(((Class)actualTypeArguments[0]).getName()); \"},\"7138\":{\"h\":\"4. getInterfaces：获取运行时类实现的接口\",\"a\":\"_4-getinterfaces-获取运行时类实现的接口\"},\"7139\":{\"t\":\"Class clazz = Person.class; Class[] interfaces = clazz.getInterfaces(); for(Class c : interfaces){ System.out.println(c); } System.out.println(); //获取运行时类的父类实现的接口 Class[] interfaces1 = clazz.getSuperclass().getInterfaces(); for(Class c : interfaces1){ System.out.println(c); } \"},\"7140\":{\"h\":\"5. getPackage：获取运行时类所在的包\",\"a\":\"_5-getpackage-获取运行时类所在的包\"},\"7141\":{\"t\":\"Class clazz = Person.class; Package pack = clazz.getPackage(); System.out.println(pack); \"},\"7142\":{\"h\":\"6. getAnnotations：获取运行时类声明的注解\",\"a\":\"_6-getannotations-获取运行时类声明的注解\"},\"7143\":{\"t\":\"Class clazz = Person.class; Annotation[] annotations = clazz.getAnnotations(); for(Annotation annos : annotations){ System.out.println(annos); } \"},\"7144\":{\"h\":\"Ⅴ. 调用指定结构\",\"a\":\"v-调用指定结构\"},\"7145\":{\"h\":\"1. 调用属性\",\"a\":\"_1-调用属性\"},\"7146\":{\"t\":\"Class clazz = Person.class; //创建运行时类的对象 Person p = (Person) clazz.newInstance(); //1. getDeclaredField(String fieldName):获取运行时类中指定变量名的属性 Field name = clazz.getDeclaredField(\\\"name\\\"); //2.保证当前属性是可访问的 name.setAccessible(true); //3.获取、设置指定对象的此属性值 name.set(p,\\\"Tom\\\"); System.out.println(name.get(p)); \"},\"7147\":{\"h\":\"1.1 getField：获取属性【一般不用】\",\"a\":\"_1-1-getfield-获取属性【一般不用】\"},\"7148\":{\"t\":\"获取运行类中指定变量名的属性，获取的是public修饰的属性。\"},\"7149\":{\"t\":\"public Field getField(String name) \"},\"7150\":{\"h\":\"1.2getDeclaredField：获取属性\",\"a\":\"_1-2getdeclaredfield-获取属性\"},\"7151\":{\"t\":\"获取运行类中指定变量名的属性，获取的是该类的所有属性\"},\"7152\":{\"t\":\"public Field getDeclaredField(String name) \"},\"7153\":{\"h\":\"1.3get：获取属性值\",\"a\":\"_1-3get-获取属性值\"},\"7154\":{\"t\":\"取得指定对象obj上此Field的属性内容\"},\"7155\":{\"t\":\"public Object get(Object obj) \"},\"7156\":{\"h\":\"1.4set：设置属性值\",\"a\":\"_1-4set-设置属性值\"},\"7157\":{\"t\":\"设置指定对象obj上此Field的属性内容\"},\"7158\":{\"t\":\"注意：非public属性，我们能够获取，但是不能直接设置，需要先setAccessible(true).\"},\"7159\":{\"t\":\"public void set(Object obj,Object value) \"},\"7160\":{\"h\":\"2. 调用方法\",\"a\":\"_2-调用方法\"},\"7161\":{\"t\":\"//创建运行时类的对象 Class clazz = Person.class; Person p = (Person) clazz.newInstance(); //1.获取指定的方法 Method show = clazz.getDeclaredMethod(\\\"show\\\", String.class); //2.保证当前方法是可访问的 show.setAccessible(true); //3.执行获取的函数 Object returnValue = show.invoke(p,\\\"CHN\\\"); //String nation = p.show(\\\"CHN\\\"); System.out.println(returnValue); //调用静态方法 Method showDesc = clazz.getDeclaredMethod(\\\"showDesc\\\"); showDesc.setAccessible(true); //静态方法的调用写是类或者null Object returnVal = showDesc.invoke(Person.class); System.out.println(returnVal);//null \"},\"7162\":{\"h\":\"2.1 getDeclaredMethod：获取指定的某个方法\",\"a\":\"_2-1-getdeclaredmethod-获取指定的某个方法\"},\"7163\":{\"t\":\"可以获取任何修饰符修饰的方法。\"},\"7164\":{\"t\":\"参数1：name：指明获取的方法的名\"},\"7165\":{\"t\":\"参数2：指明获取的方法的形参列表(参数类型)\"},\"7166\":{\"t\":\"Method getDeclaredMethod(String name,parameterTypes) \"},\"7167\":{\"h\":\"2.2 getMethod：获取指定的某个方法【一般不用】\",\"a\":\"_2-2-getmethod-获取指定的某个方法【一般不用】\"},\"7168\":{\"t\":\"只能获取public修饰的方法\"},\"7169\":{\"t\":\"getMethod(String name,Class…parameterTypes) \"},\"7170\":{\"h\":\"2.3 invoke：执行invoke\",\"a\":\"_2-3-invoke-执行invoke\"},\"7171\":{\"t\":\"调用方法对象（Method）的invoke方法来执行获得的方法\"},\"7172\":{\"t\":\"参数1：方法的调用者\"},\"7173\":{\"t\":\"参数2：给方法形参赋值的实参\"},\"7174\":{\"t\":\"返回值：对应类中调用的方法的返回值，没有返回值就返回null。\"},\"7175\":{\"t\":\"静态方法：如果是静态方法调用invoke，那么调用者是类或者null也可以。\"},\"7176\":{\"t\":\"Object invoke(Object obj, Object[] args) \"},\"7177\":{\"h\":\"3. 调用构造器\",\"a\":\"_3-调用构造器\"},\"7178\":{\"t\":\"仅了解，实际开发中，99%用newInstance调用空参构造器\"},\"7179\":{\"t\":\"Class clazz = Person.class; //1.获取指定的构造器 Constructor constructor = clazz.getDeclaredConstructor(String.class); //2.保证此构造器是可访问的 constructor.setAccessible(true); //3.调用此构造器创建运行时类的对象 Person per = (Person) constructor.newInstance(\\\"Tom\\\"); System.out.println(per); \"},\"7180\":{\"h\":\"getDeclaredConstructor：获取指定的构造器\",\"a\":\"getdeclaredconstructor-获取指定的构造器\"},\"7181\":{\"t\":\"参数：指明构造器的参数列表\"},\"7182\":{\"h\":\"4. setAccessible：允许操作封装的类结构\",\"a\":\"_4-setaccessible-允许操作封装的类结构\"},\"7183\":{\"t\":\"运行时类的属性、方法、构造器，我们都能够获取到\"},\"7184\":{\"t\":\"但是非public修饰的成员，我们无法直接进行访问，需要通过setAccessible进行设置。\"},\"7185\":{\"t\":\"void setAccessible(boolean bool) \"},\"7186\":{\"t\":\"Method和Field、Constructor对象都有setAccessible()方法。\"},\"7187\":{\"t\":\"setAccessible启动和禁用访问安全检查的开关。\"},\"7188\":{\"t\":\"参数true：不进行访问检测，可以操作非public修饰的类内部成员\"},\"7189\":{\"t\":\"参数false(默认)：进行访问检查，禁止访问非public修饰的类内部成员。\"},\"7190\":{\"h\":\"a-5. 动态代理\"},\"7191\":{\"h\":\"Ⅰ. 动态代理\",\"a\":\"i-动态代理\"},\"7192\":{\"h\":\"1. 代理设计模式\",\"a\":\"_1-代理设计模式\"},\"7193\":{\"t\":\"原理：使用一个代理将对象包装起来, 然后用该代理对象取代原始对象。任何对原始对象的调用都要通过代理。代理对象决定是否以及何时将方法调用转到原始对象上。\"},\"7194\":{\"t\":\"意义：在不改变原有方法的情况下，对原有方法进行增强、完善。\"},\"7195\":{\"h\":\"例子\",\"a\":\"例子\"},\"7196\":{\"t\":\"要求：我们连接数据库时需要进行安全检查。\"},\"7197\":{\"t\":\"接口：我们定义了一个接口，进行连接数据库，需要连接数据库的类都要继承他 \"},\"7198\":{\"t\":\"conncetDB方法用于连接数据库\"},\"7199\":{\"t\":\"被代理类：User类 重写connectBD方法进行数据库连接。\"},\"7200\":{\"t\":\"代理类：ProxyUser 同样实现接口，并重写connectDB方法。 \"},\"7201\":{\"t\":\"构造函数：就是被代理类User\"},\"7202\":{\"t\":\"connectDB方法中，对数据库连接进行安全检测，并掉用User.conncetDB方法连接数据库\"},\"7203\":{\"t\":\"链接数据库后，将连接信息写入日志。\"},\"7204\":{\"h\":\"2. 静态代理\",\"a\":\"_2-静态代理\"},\"7205\":{\"t\":\"特征是代理类和目标对象的类都是在编译期间确定下来，不利于程序的扩展。同时，每一个代理类只能为一个接口服务，这样一来程序开发中必然产生过多的代理。 最好可以通过一个代理类完成全部的代理功能 。\"},\"7206\":{\"h\":\"2.1 示例\",\"a\":\"_2-1-示例\"},\"7207\":{\"t\":\"还拿连接数据库举例，静态代理需要，每个要连接数据库的类，都声明一个静态代理，即使代理做的操作是一样的，都是：安全检查、掉用被代理类的conncetDB方法、将连接信息写入日志。\"},\"7208\":{\"h\":\"2.2 缺点\",\"a\":\"_2-2-缺点\"},\"7209\":{\"t\":\"代理类和被代理类在编译期间，就确定下来了，不灵活。我们要多很多相似类都定义一个代理类，过于冗余。\"},\"7210\":{\"h\":\"3. 动态代理介绍\",\"a\":\"_3-动态代理介绍\"},\"7211\":{\"t\":\"原理：动态代理是指客户通过代理类来调用其它对象的方法，并且是在程序运行时根据需要动态创建目标类的代理对象。\"},\"7212\":{\"t\":\"使用场合 \"},\"7213\":{\"t\":\"调试\"},\"7214\":{\"t\":\"远程方法调用\"},\"7215\":{\"t\":\"优点：抽象角色中（接口）声明的所有方法都被转移到调用处理器一个集中的方法中处理，这样，我们可以更加灵活和统一的处理众多的方法。\"},\"7216\":{\"t\":\"示例：还拿连接数据库举例，我们调用哪个类，就实例化并代理哪个类，动态代理。\"},\"7217\":{\"h\":\"4. 静态代理示例\",\"a\":\"_4-静态代理示例\"},\"7218\":{\"t\":\"接口：定义一个衣服工厂接口ClothFactory，并声明produceCloth方法用于生产服装\"},\"7219\":{\"t\":\"被代理类：Nike工厂，实现接口，重写produceCloth方法用于生产服装。\"},\"7220\":{\"t\":\"代理类：代理Nike工厂，也实现接口，重写produceCloth方法， \"},\"7221\":{\"t\":\"并在该方法中，进行工厂的准备工作，比如：原料准备\"},\"7222\":{\"t\":\"调用Nike工厂的produceCloth方法进行衣服生产\"},\"7223\":{\"t\":\"进行一些收尾工作，比如写个日志，清洗工厂等\"},\"7224\":{\"h\":\"4.1 接口\",\"a\":\"_4-1-接口\"},\"7225\":{\"t\":\"interface ClothFactory{ void produceCloth(); } \"},\"7226\":{\"h\":\"4.2 代理类\",\"a\":\"_4-2-代理类\"},\"7227\":{\"t\":\"class ProxyClothFactory implements ClothFactory{ private ClothFactory factory;//用被代理类对象进行实例化 public ProxyClothFactory(ClothFactory factory){ this.factory = factory; } @Override public void produceCloth() { System.out.println(\\\"代理工厂做一些准备工作\\\"); factory.produceCloth(); System.out.println(\\\"代理工厂做一些后续的收尾工作\\\"); } } \"},\"7228\":{\"h\":\"4.3 被代理类\",\"a\":\"_4-3-被代理类\"},\"7229\":{\"t\":\"class NikeClothFactory implements ClothFactory{ @Override public void produceCloth() { System.out.println(\\\"Nike工厂生产一批运动服\\\"); } } \"},\"7230\":{\"h\":\"4.4 使用\",\"a\":\"_4-4-使用\"},\"7231\":{\"t\":\"public class StaticProxyTest { public static void main(String[] args) { //创建被代理类的对象 ClothFactory nike = new NikeClothFactory(); //创建代理类的对象 ClothFactory proxyClothFactory = new ProxyClothFactory(nike); proxyClothFactory.produceCloth(); } } \"},\"7232\":{\"h\":\"Ⅱ. 动态代理使用\",\"a\":\"ii-动态代理使用\"},\"7233\":{\"h\":\"1. 需求\",\"a\":\"_1-需求\"},\"7234\":{\"t\":\"①根据加载到内存中的被代理类，动态的创建一个代理类及其对象。\"},\"7235\":{\"t\":\"②当通过代理类的对象调用方法a时，动态的去调用被代理类中的同名方法a。\"},\"7236\":{\"h\":\"2. 逻辑链条\",\"a\":\"_2-逻辑链条\"},\"7237\":{\"t\":\"①实例化被代理类，获取被代理类的对象。\"},\"7238\":{\"t\":\"②通过反射获取该对象的类和所实现的所有接口\"},\"7239\":{\"t\":\"③通过获取的类和接口，创建一个对象，该对象就是代理对象。\"},\"7240\":{\"t\":\"④获取代理对象后，就可以使用代理对象取代源对象了 \"},\"7241\":{\"t\":\"该对象有被代理对象的同名方法，但里的逻辑代码进行了加强。\"},\"7242\":{\"t\":\"⑤使用代理对象调用被代理类中的同名方法 \"},\"7243\":{\"t\":\"首先，代理对象会读取被代理类中的同名方法的方法名和形参列表。\"},\"7244\":{\"t\":\"其次，将这些信息传递作为参数给代理对象的invoke方法\"},\"7245\":{\"t\":\"invoke方法里主要做两件事 \"},\"7246\":{\"t\":\"根据传递的信息调用源被代理对象的方法；\"},\"7247\":{\"t\":\"执行invoke代码体里写的增强逻辑；这个增强逻辑：就是代理的意义，\"},\"7248\":{\"h\":\"2.1 特点\",\"a\":\"_2-1-特点\"},\"7249\":{\"t\":\"通过上述的逻辑链条可知：\"},\"7250\":{\"t\":\"一个动态代理类，可以代理所有的被代理类。\"},\"7251\":{\"t\":\"被代理类中的所有方法都会被代理类中的invoke方法增强，且增强的方式是一样，都可以在调用源方法的前后执行一些指定的增强逻辑。\"},\"7252\":{\"h\":\"2.2 针对不通的方法进行增强\",\"a\":\"_2-2-针对不通的方法进行增强\"},\"7253\":{\"t\":\"如果要针对不同的方法进行增强，就要通过invoke方法的参数，获取要增强的方法名，进行switch...case判断，进行个性化的增强。\"},\"7254\":{\"h\":\"3. 相关API\",\"a\":\"_3-相关api\"},\"7255\":{\"h\":\"3.1 Proxy：所有动态代理类的父类\",\"a\":\"_3-1-proxy-所有动态代理类的父类\"},\"7256\":{\"t\":\"专门完成代理的操作类，通过此类为一个或多个接口动态地生成实现类。\"},\"7257\":{\"h\":\"3.2 Proxy.newProxyInstance\",\"a\":\"_3-2-proxy-newproxyinstance\"},\"7258\":{\"t\":\"Proxy类提供的用于创建动态代理类和动态代理对象的静态方法\"},\"7259\":{\"t\":\"参数1：类加载器\"},\"7260\":{\"t\":\"参数2：得到被代理类实现的全部接口，同时这些接口也会成为代理类的接口（支持多个接口）。\"},\"7261\":{\"t\":\"参数3：InvocationHandler接口 \"},\"7262\":{\"t\":\"需要手动的实现该接口，并把实现类的示例对象作为实参传入；也可以直接写成匿名实现类。\"},\"7263\":{\"t\":\"作用：创建代理对象，其中有个invoke方法，该方法用来调用被代理类的方法，并做一些增强。\"},\"7264\":{\"t\":\"返回值：返回被代理类的代理对象 \"},\"7265\":{\"t\":\"该对象是由参数3的实现类创建的。\"},\"7266\":{\"t\":\"static Object newProxyInstance (ClassLoader loader, Class<?>[] interfaces,InvocationHandler h) \"},\"7267\":{\"h\":\"3.3 InvocationHandler：调用被代理类方法的接口\",\"a\":\"_3-3-invocationhandler-调用被代理类方法的接口\"},\"7268\":{\"t\":\"创建一个实现接口InvocationHandler的类，它必须实现invoke方法，以完成代理的具体操作。\"},\"7269\":{\"h\":\"3.4 InvocationHandler.invoke：调用被代理类方法的方法\",\"a\":\"_3-4-invocationhandler-invoke-调用被代理类方法的方法\"},\"7270\":{\"t\":\"通过InvocationHandler接口的实现类调用该方法，来实现调用被代理类方法的方法\"},\"7271\":{\"t\":\"参数1：代理类对象\"},\"7272\":{\"t\":\"参数2：要调用的方法\"},\"7273\":{\"t\":\"参数3：方法调用时所需要的参数\"},\"7274\":{\"t\":\"public Object invoke(Object theProxy, Method method, Object[] params); \"},\"7275\":{\"h\":\"4. 代理类代码分析\",\"a\":\"_4-代理类代码分析\"},\"7276\":{\"h\":\"4.1 代理类\",\"a\":\"_4-1-代理类\"},\"7277\":{\"t\":\"class ProxyFactory{ //调用此方法，返回一个代理类的对象 public static Object getProxyInstance(Object obj){//obj:被代理类的对象 MyInvocationHandler handler = new MyInvocationHandler(); handler.bind(obj); return Proxy.newProxyInstance (obj.getClass().getClassLoader(),obj.getClass().getInterfaces()handler); } } \"},\"7278\":{\"h\":\"4.2 代理类：Proxy.newProxyInstance的参数3\",\"a\":\"_4-2-代理类-proxy-newproxyinstance的参数3\"},\"7279\":{\"t\":\"class MyInvocationHandler implements InvocationHandler{ private Object obj;//需要使用被代理类的对象进行赋值 //通过bind方法传入被代理对象，为属性赋值 public void bind(Object obj){ //参数是Object类型会更通用 this.obj = obj; } //当我们通过代理类的对象，调用方法a时，就会自动的调用如下的方法：invoke() //将被代理类要执行的方法a的功能就声明在invoke()中 @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { //method:即为代理类对象调用的方法，此方法也就作为了被代理类对象要调用的方法 //obj:被代理类的对象 Object returnValue = method.invoke(obj,args); //上述方法的返回值就作为当前类中的invoke()的返回值。 return returnValue; } } \"},\"7280\":{\"h\":\"4.3 使用示例\",\"a\":\"_4-3-使用示例\"},\"7281\":{\"t\":\"前提：\"},\"7282\":{\"t\":\"接口：Human，两个类：getBelif、和eat\"},\"7283\":{\"t\":\"被代理类：SuperMan，实现了接口\"},\"7284\":{\"t\":\"SuperMan superMan = new SuperMan(); //proxyInstance:代理类的对象 Human proxyInstance = (Human) ProxyFactory.getProxyInstance(superMan); //当通过代理类对象调用方法时，会自动的调用被代理类中同名的方法 String belief = proxyInstance.getBelief(); System.out.println(belief); proxyInstance.eat(\\\"四川麻辣烫\\\"); \"},\"7285\":{\"h\":\"4.4 代理流程分析\",\"a\":\"_4-4-代理流程分析\"},\"7286\":{\"t\":\"①SuperMan superMan = new SuperMan()：实例化被代理类，获取被代理类对象superMan\"},\"7287\":{\"t\":\"②Human proxyInstance = (Human) ProxyFactory.getProxyInstance(superMan)：调用ProxyFactory类的静态方法（将被代理类对象 SuperMan 作为参数传入） \"},\"7288\":{\"t\":\"生成一个被代理类\"},\"7289\":{\"t\":\"ProxyFactory中调用了newProxyInstance方法，创建了代理类proxyInstance\"},\"7290\":{\"t\":\"原理：通过反射获取被代理类的接口和类，并创建一个实现同样接口的类\"},\"7291\":{\"t\":\"在此方法中，也将被代理类传递给了MyInvocationHandler类的invoke方法\"},\"7292\":{\"t\":\"③String belief = proxyInstance.getBelief(); 代理类调用一个被代理类的同名方法，此时发生了如下事情： \"},\"7293\":{\"t\":\"proxyInstance自动调用了MyInvocationHandler类的invoke方法 \"},\"7294\":{\"t\":\"创建proxyInstance时，MyInvocationHandler是他的参数之一，已经进行了绑定\"},\"7295\":{\"t\":\"并将自己调用的方法名、参数列表传递给MyInvocationHandle的invoke方法\"},\"7296\":{\"t\":\"MyInvocationHandle已经在创建代理类是获取了被代理类的对象名，此时又获取了要调用的方法和参数列表\"},\"7297\":{\"t\":\"利用反射，调用被代理类的同名方法。并获取返回值\"},\"7298\":{\"h\":\"5. AOP与动态代理\",\"a\":\"_5-aop与动态代理\"},\"7299\":{\"h\":\"5.1 AOP：Aspect Orient Programming\",\"a\":\"_5-1-aop-aspect-orient-programming\"},\"7300\":{\"t\":\"就是上章写的在动态代理里写一些通用的代码。\"},\"7301\":{\"t\":\"比如：调用被代理类方法前进行安全检查，调用后进行日志记录。\"},\"7302\":{\"h\":\"5.2 AOP代理\",\"a\":\"_5-2-aop代理\"},\"7303\":{\"t\":\"a-5-1\"},\"7304\":{\"t\":\"上面这种动态代理在AOP中被称为AOP代理，AOP代理可代替目标对象，AOP代理包含了目标对象的全部方法。但AOP代理中的方法与目标对象的方法存在差异：AOP代理里的方法可以在执行目标方法之前、之后插入一些通用处理\"},\"7305\":{\"h\":\"5.3 示例\",\"a\":\"_5-3-示例\"},\"7306\":{\"t\":\"以上面的例子为例，加一些通用操作，加入后，我们再调用代理类的方法时就会进行一些附加操作。\"},\"7307\":{\"t\":\"//创建一个类，来包含通用操作，也可以直接写在MyInvocationHandler.invoke方法里 class HumanUtil{ public void method1(){ System.out.println(\\\"============通用方法一===========\\\"); } public void method2(){ System.out.println(\\\"============通用方法二============\\\"); } } //将通用方法加入MyInvocationHandler.invoke，也可以直接写到里面。 public Object invoke(Object proxy, Method method, Object[] args){ HumanUtil util = new HumanUtil(); util.method1(); //通用方法一 Object returnValue = method.invoke(obj,args); util.method2();//通用方法二 return returnValue; } \"},\"7308\":{\"h\":\"b-1. Java版本\"},\"7309\":{\"t\":\"提示\"},\"7310\":{\"t\":\"Java下载地址\"},\"7311\":{\"h\":\"1. 版本说明\",\"a\":\"_1-版本说明\"},\"7312\":{\"t\":\"从Java 9 这个版本开始，Java 的计划发布周期是 6 个月，着Java的更新从传统的以特性驱动的发布周期，转变为以时间驱动的（6 个月为周期）发布模式。\"},\"7313\":{\"t\":\"针对企业客户的需求，Oracle 将以三年为周期发布长期支持版本（long termsupport）\"},\"7314\":{\"h\":\"2. LTS\",\"a\":\"_2-lts\"},\"7315\":{\"t\":\"Java17：2021，LTS版本，【New】\"},\"7316\":{\"t\":\"Java11：2019，LTS版本\"},\"7317\":{\"t\":\"Java8：2014，LTS版本，\"},\"7318\":{\"h\":\"3. Java安装\",\"a\":\"_3-java安装\"},\"7319\":{\"t\":\"从官网直接下载安装即可，注意修改环境变量（修改为最新的Java）。\"},\"7320\":{\"t\":\"Java是向前兼容的，配置成最新的Java版本环境变量即可。\"},\"7321\":{\"h\":\"4. 配置IDEA\",\"a\":\"_4-配置idea\"},\"7322\":{\"t\":\"需要打开项目配置菜单，选择SDK版本。\"},\"7323\":{\"t\":\"备注：新建的Module的SDK默认是Project设置的SDK。\"},\"7324\":{\"t\":\"快捷键：Ctrl + Alt + shit + s\"},\"7325\":{\"h\":\"5. IDEA，多版本切换\",\"a\":\"_5-idea-多版本切换\"},\"7326\":{\"t\":\"在项目配置菜单 Project Structure 中选择目标模块，在SDK选项中切换指定的SDK版本。\"},\"7327\":{\"h\":\"6. JDK与Language level\",\"a\":\"_6-jdk与language-level\"},\"7328\":{\"t\":\"JDK版本是用来控制模块JDK的版本的，而Language Level是编辑器用来对代码进行语言检查的版本。\"},\"7329\":{\"t\":\"即：就算JDK支持新语法，只要Language level指定的版本不支持新语法，编辑器也会报错。\"},\"7330\":{\"t\":\"b-1-1\"},\"7331\":{\"h\":\"b-2. Lambda\"},\"7332\":{\"t\":\"提示\"},\"7333\":{\"t\":\"可以理解为JS-ES6中的 箭头函数\"},\"7334\":{\"h\":\"Ⅰ. Lambda表达式\",\"a\":\"i-lambda表达式\"},\"7335\":{\"h\":\"1. 简介\",\"a\":\"_1-简介\"},\"7336\":{\"t\":\"Lambda 是一个 匿名函数，使用它可以写出更简洁、更灵活的代码。\"},\"7337\":{\"t\":\"是一种更紧凑的代码风格。\"},\"7338\":{\"h\":\"2. Lambda本质\",\"a\":\"_2-lambda本质\"},\"7339\":{\"t\":\"Lambda表达式的本质：作为函数式接口的实例。\"},\"7340\":{\"t\":\"用匿名实现类表示的都可以用Lambda表达式来写。\"},\"7341\":{\"h\":\"3. 应用场景\",\"a\":\"_3-应用场景\"},\"7342\":{\"t\":\"只有函数式接口可以这么用\"},\"7343\":{\"t\":\"函数式接口：只有一个方法的接口。\"},\"7344\":{\"h\":\"4. 格式\",\"a\":\"_4-格式\"},\"7345\":{\"t\":\" Comparator<Integer> com2 = (o1,o2) -> Integer.compare(o1,o2); \"},\"7346\":{\"t\":\"->：Lambda操作符或箭头操作符\"},\"7347\":{\"t\":\"->左边：Lambda形参列表（其实就是接口中的抽象方法的形参列表）\"},\"7348\":{\"t\":\"->右边：lambda体 （其实就是重写的抽象方法的方法体）\"},\"7349\":{\"h\":\"4.1 一定省略的内容\",\"a\":\"_4-1-一定省略的内容\"},\"7350\":{\"t\":\"接口构造器：通过标识符的数据类型就能推断出接口构造器\"},\"7351\":{\"t\":\"参数类型：同类型推断能推断出参数类型\"},\"7352\":{\"t\":\"重写的接口的方法：函数接口只有一个方法，可以省略，只保留方法体\"},\"7353\":{\"h\":\"4.2 特殊情况下省略的内容\",\"a\":\"_4-2-特殊情况下省略的内容\"},\"7354\":{\"t\":\"形参小括号：只有一个参数可以省略\"},\"7355\":{\"t\":\"方法体外的{}：只有一句方法体，可以省略\"},\"7356\":{\"t\":\"return关键字：方法中只要规定了返回值类型，就默认方法体种一定有返回值了，只有一句方法体，肯定是return语句，可以省略return。\"},\"7357\":{\"h\":\"5. 类型推断\",\"a\":\"_5-类型推断\"},\"7358\":{\"t\":\"Lambda 表达式中的参数类型都是由编译器推断得出的。Lambda表达式中无需指定类型，程序依然可以编译，这是因为 javac 根据程序的上下文，在后台推断出了参数的类型。Lambda 表达式的类型依赖于上下文环境，是由编译器推断出来的。这就是所谓的“类型推断”。\"},\"7359\":{\"h\":\"6. 语法总结\",\"a\":\"_6-语法总结\"},\"7360\":{\"t\":\"->左边 \"},\"7361\":{\"t\":\"lambda形参列表的参数类型可以省略(类型推断)；\"},\"7362\":{\"t\":\"如果lambda形参列表只有一个参数，其一对()也可以省略\"},\"7363\":{\"t\":\"没有参数不可省略括号\"},\"7364\":{\"t\":\"->右边 \"},\"7365\":{\"t\":\"lambda体应该使用一对{}包裹；\"},\"7366\":{\"t\":\"如果lambda体只有一条执行语句，省略这一对{}。\"},\"7367\":{\"t\":\"如果只有一条return语句，return也可以省略，且如果{}省略，return必须省略。\"},\"7368\":{\"h\":\"Ⅱ. Lambda的使用\",\"a\":\"ii-lambda的使用\"},\"7369\":{\"t\":\"Lambda表达式的使用，分为6中情况。本质还是上面的语法总结。\"},\"7370\":{\"h\":\"1. 示例：无参、无return\",\"a\":\"_1-示例-无参、无return\"},\"7371\":{\"t\":\" = ()->{...;}; \"},\"7372\":{\"h\":\"示例：Runnable接口的run函数\",\"a\":\"示例-runnable接口的run函数\"},\"7373\":{\"t\":\"//1.老写法 Runnable r1 = new Runnable() { @Override public void run(){ System.out.println(\\\"I'm batman\\\"); } }; r1.run(); ========================================== //2.Lambda Runnable r2 = () -> { System.out.println(\\\"I'm bat van\\\"); }; r2.run(); \"},\"7374\":{\"h\":\"2. 格式2：1参、无return\",\"a\":\"_2-格式2-1参、无return\"},\"7375\":{\"t\":\"= (Object arg1)->{...;}; \"},\"7376\":{\"h\":\"示例：Consumer接口的accept方法\",\"a\":\"示例-consumer接口的accept方法\"},\"7377\":{\"t\":\"//1.老写法 Consumer<String> con = new Consumer<String>(){ @Override public void accept(String s){ System.out.println(s); } }; con.accept(\\\"hello\\\"); ================================================= //2.Lambda Consumer<String> con2 = (String s) ->{System.out.println(s)} ==>进一步更精简模式 Consumer<String> con2 = s -> System.out.println(s); \"},\"7378\":{\"h\":\"3. 格式3：省略数据类型\",\"a\":\"_3-格式3-省略数据类型\"},\"7379\":{\"t\":\"见上一个例子，数据类型是根据接口的规范进行推断的，跟泛型无关。\"},\"7380\":{\"t\":\"(arg1)->{...;}; \"},\"7381\":{\"h\":\"示例：见格式2精简模式\",\"a\":\"示例-见格式2精简模式\"},\"7382\":{\"t\":\"Consumer<String> con2 = s -> System.out.println(s); \"},\"7383\":{\"h\":\"4. 格式4：省略1参的小括号\",\"a\":\"_4-格式4-省略1参的小括号\"},\"7384\":{\"t\":\"arg1->{...;}; \"},\"7385\":{\"h\":\"示例：见格式2示例的\",\"a\":\"示例-见格式2示例的\"},\"7386\":{\"t\":\"Consumer<String> con2 = s -> System.out.println(s); \"},\"7387\":{\"h\":\"5. 格式5：多参、多执行语句\",\"a\":\"_5-格式5-多参、多执行语句\"},\"7388\":{\"t\":\"(arg1,arg2)->{ ...; ....; return ...; }; \"},\"7389\":{\"h\":\"示例：Comparator接口 compare方法\",\"a\":\"示例-comparator接口-compare方法\"},\"7390\":{\"t\":\"//1.老写法 Comparator<Integer> com1 = new Comparator<Integer>() { @Override public int compare(Integer o1, Integer o2) { System.out.println(o1); System.out.println(o2); return o1.compareTo(o2); } }; //Comparator int result = com1.compare(10, 20); System.out.println(result); ================================================= Comparator<Integer>com2 = (o1,o2) -> { System.out.println(o1); System.out.println(o2); return o1.compareTo(o2); }; int result2 = com2.compare(10, 20); System.out.println(result2); \"},\"7391\":{\"h\":\"6. 省略{}\",\"a\":\"_6-省略\"},\"7392\":{\"t\":\"见格式2的更精简写法\"},\"7393\":{\"t\":\"(arg1,arg2)->...; \"},\"7394\":{\"h\":\"b-3. Functional\"},\"7395\":{\"h\":\"Ⅰ. 函数式接口\",\"a\":\"i-函数式接口\"},\"7396\":{\"t\":\"只包含一个抽象方法的接口，称为函数式接口。\"},\"7397\":{\"h\":\"Functional 的意义\",\"a\":\"functional-的意义\"},\"7398\":{\"t\":\"Java是纯面向对象的语言，失去了面向过程（面向函数）的灵活性，比如PHP语言可以直接定义函数，使用函数，以函数为单位提供一个简单的独立的功能。\"},\"7399\":{\"t\":\"而Java不能直接定义函数，所有函数必须以方法的形式属于某个类，这就不够灵活了，而函数式接口就补气了这个短板，以函数式接口的形式模拟了面向函数的特点。\"},\"7400\":{\"t\":\"函数式接口本质上是穷举了所有函数的格式，不同的函数，格式上只有参数和返回值的区别，即多少个参数，有无返回值，返回值是怎么获取的。\"},\"7401\":{\"t\":\"因此函数式接口就是一个载体，用来执行一个函数，Java为不同格式的函数提供了不同类型的内置接口，根据需求选择符合要求（参数和返回值）的接口，实现他的方法，写出需要的功能，就OK了。\"},\"7402\":{\"h\":\"1. Functional 介绍\",\"a\":\"_1-functional-介绍\"},\"7403\":{\"h\":\"函数式接口的特点\",\"a\":\"函数式接口的特点\"},\"7404\":{\"t\":\"由接口名、形参列表、函数名组成。\"},\"7405\":{\"h\":\"如何使用函数式接口\",\"a\":\"如何使用函数式接口\"},\"7406\":{\"t\":\"我们需要一个功能，为一个功能创建一个类太浪费了。\"},\"7407\":{\"t\":\"我们可以利用函数式接口，寻找或定义一个参数符合的接口。然后利用Lambda的方式调用即可，函数体直接在使用的时候定义。\"},\"7408\":{\"h\":\"函数式接口要定义多少\",\"a\":\"函数式接口要定义多少\"},\"7409\":{\"t\":\"函数式接口本质上只是一个载体，用来执行函数体的载体，本身毫无意义。\"},\"7410\":{\"t\":\"但是由于方法是有参数限制的（数量和类型），因此我们需要定义多个函数式接口，这些接口的区别就是参数不一样，可以很简单的穷举出需要多少个函数式接口。\"},\"7411\":{\"h\":\"内置函数式接口\",\"a\":\"内置函数式接口\"},\"7412\":{\"t\":\"在java.util.function包下定义了Java 8 的丰富的函数式接口。\"},\"7413\":{\"t\":\"包含4中常用的函数式接口，和一些不常用的。也就是Java替我们穷举好了，我们直接使用即可。\"},\"7414\":{\"h\":\"2. 注解\",\"a\":\"_2-注解\"},\"7415\":{\"t\":\"@FunctionalInterface\"},\"7416\":{\"t\":\"该注解表示下面要定义的接口为：函数式接口；这样做可以检查它是否是一个函数式接口。同时 javadoc 也会包含一条声明，说明这个接口是一个函数式接口。\"},\"7417\":{\"h\":\"3. 自定义函数式接口\",\"a\":\"_3-自定义函数式接口\"},\"7418\":{\"t\":\"@FunctionalInterface public interface MyInterface { void method1(); } \"},\"7419\":{\"h\":\"4. Lambda与创建Functional对象\",\"a\":\"_4-lambda与创建functional对象\"},\"7420\":{\"t\":\"可以通过 Lambda 表达式来创建该接口的对象。（若 Lambda 表达式抛出一个受检异常(即：非运行时异常)，那么该异常需要在目标接口的抽象方法上进行声明）。\"},\"7421\":{\"t\":\"用匿名实现类表示的都可以用Lambda表达式来写。\"},\"7422\":{\"h\":\"5. 缺点\",\"a\":\"_5-缺点\"},\"7423\":{\"t\":\"每次使用都要写方法体，太繁琐了，在支持函数式编程的语言了，都是提前定义好方法，随用随调，方法体都省了。\"},\"7424\":{\"t\":\"解决方案：方法引用。\"},\"7425\":{\"h\":\"Ⅱ. 内置Functional\",\"a\":\"ii-内置functional\"},\"7426\":{\"t\":\"Java内部已经将参数的类型穷举好了，提供了很多内置的Functional，直接用即可。\"},\"7427\":{\"h\":\"1. Java内置四大核心Functional\",\"a\":\"_1-java内置四大核心functional\"},\"7428\":{\"t\":\"b-3-1\"},\"7429\":{\"t\":\"消费型：提供一个参数，什么都不返回：参数被消耗了 \"},\"7430\":{\"t\":\"Consumer<T> void accept(T t)\"},\"7431\":{\"t\":\"供给型：不提供参数，返回了一个值：供给了一个值 \"},\"7432\":{\"t\":\"Supplier<T> T get()\"},\"7433\":{\"t\":\"函数型：提供参数，参数类型是对象T，返回值类型是对象R。 \"},\"7434\":{\"t\":\"Function<T,R> R apply(T t)\"},\"7435\":{\"t\":\"断定型：提供一个参数，进行判断，返回boolean：进行一些参数的断定 \"},\"7436\":{\"t\":\"Predicate<T> boolean test(T t)\"},\"7437\":{\"h\":\"2. 其他类型Functional\",\"a\":\"_2-其他类型functional\"},\"7438\":{\"t\":\"b-3-2\"},\"7439\":{\"h\":\"b-4. 方法引用\"},\"7440\":{\"h\":\"Ⅰ. 方法引用介绍\",\"a\":\"i-方法引用介绍\"},\"7441\":{\"h\":\"1. 定义\",\"a\":\"_1-定义\"},\"7442\":{\"t\":\"Method References：方法引用，本质上就是Lambda表达式，而Lambda表达式可以作为函数式接口的实例。所以方法引用，也是函数式接口的实例。通过方法的名字来指向一个方法，可以认为是Lambda表达式的一个语法糖。\"},\"7443\":{\"h\":\"2. 使用情景\",\"a\":\"_2-使用情景\"},\"7444\":{\"t\":\"当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！\"},\"7445\":{\"h\":\"3. 语法格式\",\"a\":\"_3-语法格式\"},\"7446\":{\"t\":\"使用格式：类(或对象) :: 方法名\"},\"7447\":{\"t\":\"情况1：对象 :: 非静态方法\"},\"7448\":{\"t\":\"情况2：类 :: 静态方法\"},\"7449\":{\"t\":\"情况3：类 :: 非静态方法\"},\"7450\":{\"h\":\"解析\",\"a\":\"解析\"},\"7451\":{\"t\":\"可以将方法名看做是Lambda表达式中，接口中方法的方法名。\"},\"7452\":{\"t\":\"当我们找到了一个除了方法名不一样，其他完全一样的方法（参数、返回值，方法体逻辑），我们就会用这个方法，替代接口中的方法，而不用自己再去定义了。\"},\"7453\":{\"t\":\":: 就可以认为告诉了表达式要用后面的方法替代接口中的方法。由于后面的方法已经定义过了，参数和返回值也都定义好了，因此只需要写方法名即可。\"},\"7454\":{\"h\":\"4. 使用要求\",\"a\":\"_4-使用要求\"},\"7455\":{\"t\":\"情况1和2：要求接口中的抽象方法的形参列表和返回值类型与方法引用的方法的形参列表和返回值类型相同！\"},\"7456\":{\"t\":\"情况3：要求接口中的抽象方法中，第一个形参是方法引用中的方法的调用者，且其他形参和返回值类型相同。 \"},\"7457\":{\"t\":\"方法引用时，要使用参数1的类，而非对象，比如参数1是个字符串，就要用String类。\"},\"7458\":{\"h\":\"Ⅱ. 方法引用示例\",\"a\":\"ii-方法引用示例\"},\"7459\":{\"h\":\"1. 示例1：情况1： 对象 :: 非静态方法\",\"a\":\"_1-示例1-情况1-对象-非静态方法\"},\"7460\":{\"t\":\"要求：使用Consumer接口，打印参数\"},\"7461\":{\"h\":\"1.1 Lambda表达式写法\",\"a\":\"_1-1-lambda表达式写法\"},\"7462\":{\"t\":\"Consumer<String> con1 = str->System.out.println(str); con1.accept(\\\"hello\\\"); \"},\"7463\":{\"h\":\"1.2 方法引用写法\",\"a\":\"_1-2-方法引用写法\"},\"7464\":{\"t\":\"解析：Lambda要实现的操作（方法体）已经有方法实现过了，就是System.out类的println方法，因此可以直接使用方法引用，使用println这个方法。\"},\"7465\":{\"t\":\"Consumer中的方法为：void accept(T t)\"},\"7466\":{\"t\":\"PrintStream中的方法为：void println(T t)\"},\"7467\":{\"t\":\"参数一样，功能也一样，满足条件。由于参数也一样，故可以省略参数。\"},\"7468\":{\"t\":\"PrintStream ps = System.out; Consumer<string> con2 = ps::println; con2.accept(\\\"hi\\\"); \"},\"7469\":{\"h\":\"2. 示例2：情况1： 对象 :: 非静态方法（自定义类）\",\"a\":\"_2-示例2-情况1-对象-非静态方法-自定义类\"},\"7470\":{\"t\":\"说明：自定义类Employee中，有一个方法getName，无参数，用来获取员工姓名的。\"},\"7471\":{\"t\":\"//创建一个员工对象 Employee emp = new Employee(100,\\\"Jinno\\\",23,4000); \"},\"7472\":{\"h\":\"2.1 Lambda表达式\",\"a\":\"_2-1-lambda表达式\"},\"7473\":{\"t\":\"Supplier<String> = sup1 -> emp.getName(); sup1.get(); \"},\"7474\":{\"h\":\"2.2 方法引用\",\"a\":\"_2-2-方法引用\"},\"7475\":{\"t\":\"解析：Employee类中的方法 String getName()；Supplier中的 T get()方法都是空参，返回一个值，因此可以用getName替代get()。\"},\"7476\":{\"t\":\"Supplier<string> = sup2->emp::getName(); \"},\"7477\":{\"h\":\"3. 示例3：情况二：类 :: 静态方法\",\"a\":\"_3-示例3-情况二-类-静态方法\"},\"7478\":{\"t\":\"要求：使用Comparator接口比较俩个数值的大小\"},\"7479\":{\"h\":\"3.1 Lambda\",\"a\":\"_3-1-lambda\"},\"7480\":{\"t\":\"Comparator<Integer> com1 = (t1,t2)-> Integer.compare(t1,t2); com1.compare(10,20); \"},\"7481\":{\"h\":\"3.2 方法引用\",\"a\":\"_3-2-方法引用\"},\"7482\":{\"t\":\"解析：Comparator中的int compare(T t1,T t2)；Integer中的int compare(T t1,T t2)算法、返回值、参数都是一样的，可以直接替换。\"},\"7483\":{\"t\":\"Comparator<Integer> com2 = Integer::compare; com2.compare(10,20); \"},\"7484\":{\"h\":\"4. 示例4：情况三： 类 :: 实例方法\",\"a\":\"_4-示例4-情况三-类-实例方法\"},\"7485\":{\"t\":\"要求：使用Comparator接口比较两个字符串的大小\"},\"7486\":{\"h\":\"4.1 Lambda\",\"a\":\"_4-1-lambda\"},\"7487\":{\"t\":\"Comparator<String> com1 = (s1,s2)->s1.compareTo(s2); com1.compare(\\\"abc\\\",\\\"abd\\\"); \"},\"7488\":{\"h\":\"4.2 方法引用\",\"a\":\"_4-2-方法引用\"},\"7489\":{\"t\":\"解析：参数s1（属于String类），刚好是compareTo方法的调用者，且两个方法的其他参数和返回值相同，故可以进行方法引用\"},\"7490\":{\"t\":\"Comparator<String> com2 = String::compareTo; \"},\"7491\":{\"h\":\"5. 示例5：情况三：类 :: 实例方法 （自定义类）\",\"a\":\"_5-示例5-情况三-类-实例方法-自定义类\"},\"7492\":{\"t\":\"要求：调用自定义类的getName方法，获取员工姓名（String类型）。\"},\"7493\":{\"t\":\"Employee employee = new Employee(100,\\\"Jinno\\\",23,34); \"},\"7494\":{\"h\":\"5.1 Lambda\",\"a\":\"_5-1-lambda\"},\"7495\":{\"t\":\"Function<Employee,String> fun1 = e ->e.getName(); \"},\"7496\":{\"h\":\"5.2 方法引用\",\"a\":\"_5-2-方法引用\"},\"7497\":{\"t\":\"解析：Function接口的第一个参数刚好是方法的调用者（只有一个参数）；返回值也符合要求，故可以使用方法因引用\"},\"7498\":{\"t\":\"Function<Employee,String> fun2 = Employee::getName(); \"},\"7499\":{\"h\":\"Ⅲ. 构造器引用\",\"a\":\"iii-构造器引用\"},\"7500\":{\"t\":\"函数返回的是一个对象，就可以采用构造器引用\"},\"7501\":{\"h\":\"1. 使用条件\",\"a\":\"_1-使用条件\"},\"7502\":{\"t\":\"函数式接口的抽象方法的形参列表和构造器的形参列表一致。\"},\"7503\":{\"t\":\"抽象方法的返回值类型即为构造器所属的类的类型\"},\"7504\":{\"h\":\"2. 语法格式\",\"a\":\"_2-语法格式\"},\"7505\":{\"t\":\"ClassName::new\"},\"7506\":{\"h\":\"3. 示例1：空参构造器\",\"a\":\"_3-示例1-空参构造器\"},\"7507\":{\"t\":\"要求：获得一个Employee（自定义员工类对象）对象（空参构造器创建的）。\"},\"7508\":{\"t\":\"方法：采用供给型接口：Supplier的get()方法\"},\"7509\":{\"h\":\"3.1 Lambda\",\"a\":\"_3-1-lambda-1\"},\"7510\":{\"t\":\"Supplier<Employee> emp1 = ()-> new Employee(); emp1.get(); \"},\"7511\":{\"h\":\"3.2 构造器引用\",\"a\":\"_3-2-构造器引用\"},\"7512\":{\"t\":\"Supplier<Employee> emp2 = Employee::new; emp2.get(); \"},\"7513\":{\"h\":\"4. 示例2：单参构造器\",\"a\":\"_4-示例2-单参构造器\"},\"7514\":{\"t\":\"要求：获得一个Employee（自定义员工类对象）对象（单参构造器创建的）。\"},\"7515\":{\"t\":\"方法：采用函数型接口Function，提供一个参数，返回一个new的对象\"},\"7516\":{\"h\":\"4.1 Lambda\",\"a\":\"_4-1-lambda-1\"},\"7517\":{\"t\":\"Function<Integer,Employee> func1 = id -> new Employee(id); func1.apply(10); \"},\"7518\":{\"h\":\"4.2 构造器引用\",\"a\":\"_4-2-构造器引用\"},\"7519\":{\"t\":\"解析：泛型里已经规定了有一个Integer类型的参数，所以调用的是单参构造器.\"},\"7520\":{\"t\":\"Fucntion<Integer,Employee> func2 = Employee:new fucn2.apply(10) \"},\"7521\":{\"h\":\"5. 示例3：多参构造器\",\"a\":\"_5-示例3-多参构造器\"},\"7522\":{\"t\":\"要求：获得一个Employee（自定义员工类对象）对象（双参构造器创建的）。\"},\"7523\":{\"t\":\"方法：采用函数式接口BiFunction<T,U,R>，提供两个类参数，返回一个对象。\"},\"7524\":{\"h\":\"5.1 Lambda\",\"a\":\"_5-1-lambda-1\"},\"7525\":{\"t\":\"BiFUnction<Integer,String,Employee> fun1 = (id,name) ->new Employee(id,name); func1.apply(100,\\\"Tom\\\"); \"},\"7526\":{\"h\":\"5.2 构造器引用\",\"a\":\"_5-2-构造器引用\"},\"7527\":{\"t\":\"BiFUnction<Integer,String,Employee> fun2 = Employee::new; func2.apply(101,\\\"Aaron\\\"); \"},\"7528\":{\"h\":\"Ⅳ. 数组引用\",\"a\":\"iv-数组引用\"},\"7529\":{\"t\":\"可以把数组看做是一个特殊的类，则写法与构造器引用一致。\"},\"7530\":{\"h\":\"1. 语法格式\",\"a\":\"_1-语法格式\"},\"7531\":{\"t\":\"type[] :: new\"},\"7532\":{\"h\":\"2. 示例\",\"a\":\"_2-示例\"},\"7533\":{\"t\":\"要求：根据Integer参数，返回指定长度的空数组\"},\"7534\":{\"h\":\"2.1 Lambda\",\"a\":\"_2-1-lambda\"},\"7535\":{\"t\":\"Function<Integer,String[]> func1 = length->new String[length]; func1.apply(5); \"},\"7536\":{\"h\":\"2.2 构造器引用\",\"a\":\"_2-2-构造器引用\"},\"7537\":{\"t\":\"Function<Integer,String[]> func2 = String[]::new; func2.apply(10); \"},\"7538\":{\"h\":\"b-5. Stream\"},\"7539\":{\"h\":\"Ⅰ. Stream API\",\"a\":\"i-stream-api\"},\"7540\":{\"t\":\"Stream API其实就是一套API，用来操作集合类数据的，这套API的操作跟SQL里的操作类似。只是SQL里的操作是操作数据库的，Stream API是操作集合和数组的。\"},\"7541\":{\"t\":\"对于从NoSQL获取的数据，非常有用，可以在java层面对NoSQL数据进行类似SQL的操作（几乎一切操作：过滤、去重、筛选、分页等....）。\"},\"7542\":{\"h\":\"1. Stream API 说明\",\"a\":\"_1-stream-api-说明\"},\"7543\":{\"t\":\"Stream API ( java.util.stream) 把真正的函数式编程风格引入到Java中。\"},\"7544\":{\"t\":\"Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。\"},\"7545\":{\"t\":\"使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。简言之，Stream API 提供了一种高效且易于使用的处理数据的方式。\"},\"7546\":{\"h\":\"2. Stream API使用背景\",\"a\":\"_2-stream-api使用背景\"},\"7547\":{\"t\":\"对于Mysql等数据库层面的数据源，数据库已经对数据进行处理。\"},\"7548\":{\"t\":\"而NoSQL的数据就需要Java层面去处理了。\"},\"7549\":{\"h\":\"3. Stream的本质\",\"a\":\"_3-stream的本质\"},\"7550\":{\"t\":\"是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。\"},\"7551\":{\"h\":\"Stream 和 Collection 集合的区别\",\"a\":\"stream-和-collection-集合的区别\"},\"7552\":{\"t\":\"“集合讲的是数据，Stream 讲的是计算！”\"},\"7553\":{\"t\":\"Collection 是一种静态的内存数据结构，而 Stream 是有关计算的。前者是主要面向内存，存储在内存中，后者主要是面向 CPU，通过 CPU 实现计算。\"},\"7554\":{\"h\":\"4. Stream的操作步骤\",\"a\":\"_4-stream的操作步骤\"},\"7555\":{\"t\":\"b-5-1\"},\"7556\":{\"t\":\"创建Stream：Stream的实例化：通过一个数据源（如：集合、数组），获取一个Stream\"},\"7557\":{\"t\":\"中间操作：一个中间操作链，对数据源的数据进行处理\"},\"7558\":{\"t\":\"终止操作（终端操作）：一旦执行终止操作，就执行中间操作链，并产生结果。之后，中间操作不会再被使用。\"},\"7559\":{\"h\":\"5. Stream的特点\",\"a\":\"_5-stream的特点\"},\"7560\":{\"t\":\"自己不会存储元素。\"},\"7561\":{\"t\":\"不会改变源对象。相反，他们会返回一个持有结果的新Stream。\"},\"7562\":{\"t\":\"操作是延迟执行的。这意味着他们会等到需要结果的时候才执行\"},\"7563\":{\"h\":\"Ⅱ. Stream 实例化\",\"a\":\"ii-stream-实例化\"},\"7564\":{\"h\":\"1. 通过集合创建Stream\",\"a\":\"_1-通过集合创建stream\"},\"7565\":{\"h\":\"1.1 顺序流\",\"a\":\"_1-1-顺序流\"},\"7566\":{\"t\":\"通过集合的Stream方法，返回一个顺序流Stream\"},\"7567\":{\"t\":\"顺序流：按顺序从集合中取出数据\"},\"7568\":{\"t\":\"default Stream<E> stream(); ================================================ //list ->{\\\"a\\\",\\\"b\\\",\\\"c\\\",\\\"d\\\",\\\"e\\\"} Stream<String> stream = list.stream(); \"},\"7569\":{\"h\":\"1.2 并行流\",\"a\":\"_1-2-并行流\"},\"7570\":{\"t\":\"通过集合的parallelStream方法，返回一个并行流Stream\"},\"7571\":{\"t\":\"多线程从集合中取出数据，不按顺序\"},\"7572\":{\"t\":\" default Stream<E> parallelStream() ================================================ //list ->{\\\"a\\\",\\\"b\\\",\\\"c\\\",\\\"d\\\",\\\"e\\\"} Stream<String> parallelStream = list.parallelStream(); \"},\"7573\":{\"h\":\"2. 通过数组创建Stream\",\"a\":\"_2-通过数组创建stream\"},\"7574\":{\"t\":\"Arrays 的静态方法 stream() 可以获取数组的Stream：\"},\"7575\":{\"t\":\"static <T> Stream<T> stream(T[] array) =========================================== int[] arr = {1, 2, 3, 4, 5}; IntStream arrStream = Arrays.stream(arr); \"},\"7576\":{\"h\":\"重载形式\",\"a\":\"重载形式\"},\"7577\":{\"t\":\"如上，不同数据类型的数组，通过该方法，会生成不同类型的Stream。Arrays.stream有多个重载：\"},\"7578\":{\"t\":\"public static IntStream stream(int[] array)\"},\"7579\":{\"t\":\"public static LongStream stream(long[] array)\"},\"7580\":{\"t\":\"public static DoubleStream stream(double[] array)\"},\"7581\":{\"h\":\"3. 通过Stream的of()创建Stream\",\"a\":\"_3-通过stream的of-创建stream\"},\"7582\":{\"t\":\"可以调用Stream类静态方法 of(), 通过显示值创建一个流。它可以接收任意数量的参数。\"},\"7583\":{\"t\":\"public static<T> Stream<T> of(T... values); ================================================ Stream<? extends Serializable> stream1 = Stream.of(1, 2, 3, \\\"hello\\\", \\\"shit\\\"); Stream<Integer> stream2 = Stream.of(1, 2, 3); \"},\"7584\":{\"h\":\"4. 创建无限流Stream【了解】\",\"a\":\"_4-创建无限流stream【了解】\"},\"7585\":{\"t\":\"可以使用静态方法 Stream.iterate() 和 Stream.generate(),创建无限流。\"},\"7586\":{\"t\":\"无限流就是数据无限生成，需要加终止条件和限制条件辅助生成。\"},\"7587\":{\"h\":\"4.1 迭代\",\"a\":\"_4-1-迭代\"},\"7588\":{\"t\":\"参数1：seed->种子，初始值\"},\"7589\":{\"t\":\"参数2：UnaryOperator，对种子进行的操作，一元运算符\"},\"7590\":{\"t\":\"public static<T> Stream<T> iterate(final T seed, final UnaryOperator<T> f) ================================================ //示例:遍历偶数，通过limit限制为10个 Stream.iterate(0, t -> t + 2).limit(10).forEach(System.out::println); \"},\"7591\":{\"h\":\"4.2 生成\",\"a\":\"_4-2-生成\"},\"7592\":{\"t\":\"参数：Supplier，供应者，参数数据的对象.方法\"},\"7593\":{\"t\":\"public static<T> Stream<T> generate(Supplier<T> s) ================================================ //示例:生成随机数，通过limit限制为10个 Stream.generate(Math::random).limit(10).forEach(System.out::println); \"},\"7594\":{\"h\":\"Ⅲ. Stream 的操作\",\"a\":\"iii-stream-的操作\"},\"7595\":{\"t\":\"Stream的操作分为中间操作和终止操作。\"},\"7596\":{\"t\":\"Stream操作的方法，和SQL中的效果类似，名字也基本一样。\"},\"7597\":{\"h\":\"1. 中间操作说明\",\"a\":\"_1-中间操作说明\"},\"7598\":{\"t\":\"多个中间操作可以连接起来形成一个流水线（SQL中也是）。 除非流水线上触发终止操作，否则 中间操作不会执行任何的处理（SQL也是），而在终止操作时一次性全部处理，称为“惰性求值\"},\"7599\":{\"h\":\"2. 总结操作的方法\",\"a\":\"_2-总结操作的方法\"},\"7600\":{\"t\":\"筛选与切片：filter、distinct、limit、skip\"},\"7601\":{\"t\":\"映射：map、mapToDouble、mapToInt、mapToLong、flatMap\"},\"7602\":{\"t\":\"排序：sorted\"},\"7603\":{\"h\":\"3. 终止操作说明\",\"a\":\"_3-终止操作说明\"},\"7604\":{\"t\":\"终止操作会从流的流水线生成结果。其结果可以是任何不是流的值，例如：List、Integer，甚至是 void 。\"},\"7605\":{\"t\":\"流进行了终止操作后，不能再次使用。\"},\"7606\":{\"t\":\"可以只有终止操作，没有中间操作。\"},\"7607\":{\"h\":\"4. 终止操作的方法\",\"a\":\"_4-终止操作的方法\"},\"7608\":{\"t\":\"匹配与查找\"},\"7609\":{\"t\":\"归约\"},\"7610\":{\"t\":\"收集\"},\"7611\":{\"h\":\"Ⅳ. 筛选与切片\",\"a\":\"iv-筛选与切片\"},\"7612\":{\"t\":\"b-5-2\"},\"7613\":{\"t\":\"测试数据源：Employee类的对象，属性包括： id(int)、姓名(string)、年龄(int)、收入(double)。\"},\"7614\":{\"h\":\"1. filter：筛选\",\"a\":\"_1-filter-筛选\"},\"7615\":{\"t\":\"接收 Lambda，从流中排除某些元素，参数就是流操作的数据源。\"},\"7616\":{\"t\":\"filter(Predicate p) ========================================== //1.获取员工集合，并通过集合获取Stream List<Employee> list = EmployeeData.getEmployees(); Stream<Employee> stream = list.stream(); //2.筛选工资>7000的员工 stream.filter(e -> e.getSalary() > 7000).forEach(System.out::println); \"},\"7617\":{\"h\":\"2. distinct：去重\",\"a\":\"_2-distinct-去重\"},\"7618\":{\"t\":\"和SQL的distinct类似，去重，通过流所生成元素的 hashCode() 和 equals() 去除重复元素\"},\"7619\":{\"t\":\"distinct(); ========================================== List<Employee> list = EmployeeData.getEmployees(); Stream<Employee> stream = list.stream(); stream.distinct().forEach(System.out::println); \"},\"7620\":{\"h\":\"3. limit：截断\",\"a\":\"_3-limit-截断\"},\"7621\":{\"t\":\"截断流，使其元素不超过给定数量。\"},\"7622\":{\"t\":\"根据遍历顺序，只获取前N个数据\"},\"7623\":{\"t\":\"limit(n) ========================================== List<Employee> list = EmployeeData.getEmployees(); Stream<Employee> stream = list.stream(); list.stream().limit(3).forEach(System.out::println); \"},\"7624\":{\"h\":\"4. skip：跳过\",\"a\":\"_4-skip-跳过\"},\"7625\":{\"t\":\"跳过元素，返回一个扔掉了前 n 个元素的流。若流中元素不足 n 个，则返回一个空流。与 limit(n) 互补\"},\"7626\":{\"t\":\"skip(n); ========================================== List<Employee> list = EmployeeData.getEmployees(); Stream<Employee> stream = list.stream(); stream.skip(3).forEach(System.out::println); \"},\"7627\":{\"h\":\"Ⅴ. 映射\",\"a\":\"v-映射\"},\"7628\":{\"t\":\"b-5-3\"},\"7629\":{\"t\":\"测试数据源：Employee类的对象，属性包括： id(int)、姓名(string)、年龄(int)、收入(double)\"},\"7630\":{\"h\":\"1. map\",\"a\":\"_1-map\"},\"7631\":{\"t\":\"接收一个函数作为参数，该函数会被应用到每个元素上。\"},\"7632\":{\"t\":\"Stream中的每个元素都会作为参数传递给方法中，做同样的方法体操作。该操作会返回一个新的Stream，函数的每次操作都会将参数映射成一个新的元素。\"},\"7633\":{\"t\":\"主要用途：从一个流中获取新流，比如从用户流中getAge获取年轻，得到一个用户年龄流。\"},\"7634\":{\"t\":\"map(Function f) ========================================== List<String> list = Arrays.asList(\\\"aa\\\", \\\"bb\\\", \\\"cc\\\", \\\"dd\\\"); //将所有元素都转为大写{AA,BB,CC,DD} list.stream().map(str->str.toUpperCase()).forEach(System.out::println); //返回了一个新的Stream,新Stream已经是元素修改后的了{AA,BB,CC,DD} Stream<String> stringStream = strList.stream().map(String::toUpperCase); stringStream.forEach(System.out::println); \"},\"7635\":{\"h\":\"1.1 mapToDouble\",\"a\":\"_1-1-maptodouble\"},\"7636\":{\"t\":\"接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 DoubleStream。\"},\"7637\":{\"t\":\"mapToDouble(ToDoubleFunction f); \"},\"7638\":{\"h\":\"1.2 mapToInt\",\"a\":\"_1-2-maptoint\"},\"7639\":{\"t\":\"接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 IntStream。\"},\"7640\":{\"t\":\"mapToInt(ToIntFunction f); \"},\"7641\":{\"h\":\"1.3 mapToLong\",\"a\":\"_1-3-maptolong\"},\"7642\":{\"t\":\"接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 LongStream。\"},\"7643\":{\"t\":\"mapToLong(ToLongFunction f); \"},\"7644\":{\"h\":\"2. flatMap\",\"a\":\"_2-flatmap\"},\"7645\":{\"t\":\"使用前提：生成Stream的集合是一个嵌套集合，即：集合中的每个元素，都是一个集合。\"},\"7646\":{\"t\":\"将Stream中的每个元素（集合）中的元素，提取出来应用到方法中，并统一放回到一个集合中返回。（嵌套集合，返回成了非嵌套集合）。\"},\"7647\":{\"t\":\"flatMap(Function f) <R> Stream<R> flatMap(Function<? super T, ? extends Stream<? extends R>> mapper); \"},\"7648\":{\"t\":\"使用注意：flatMap中，每个输入始终是一个集合，不然就报错。 \"},\"7649\":{\"t\":\"实测：该方法不会递归，仅支持展开一层嵌套。\"},\"7650\":{\"t\":\"用途：一般仅作用集合的展开，如果要对集合中的所有元素进一步操作，可以接个map()\"},\"7651\":{\"h\":\"3. map和flatMap的对比示例、\",\"a\":\"_3-map和flatmap的对比示例、\"},\"7652\":{\"h\":\"3.1 素材\",\"a\":\"_3-1-素材\"},\"7653\":{\"t\":\"①使用Map从学生集合中获取每个学生的年龄\"},\"7654\":{\"t\":\"②使用flatMap从年级集合中，获取每个学生的年龄\"},\"7655\":{\"t\":\"//1.一个学生类，包含姓名和年龄两个属性 class Student{ private String userName; private int age = 1; public Student(String userName,int age){ this.userName = userName; this.age = age; } public int getAge() { return age; } //2.获取一个集合，包含所有学生数据(元素是学生类) public static List<Student> getStuList(){ Student ton = new Student(\\\"Ton\\\", 20); Student jerry = new Student(\\\"Jerry\\\", 22); Student jinno = new Student(\\\"Jinno\\\", 20); Student aaron = new Student(\\\"Aaron\\\", 19); List<Student> students = new ArrayList<>(); students.add(ton); students.add(jerry); students.add(jinno); students.add(aaron); return students; } //3.获取一个集合，包含子集合，子集合是班级，班级本身是学生数据集合 public static List<List<Student>> getGradeList(){ Student ton = new Student(\\\"Ton\\\", 20); Student jerry = new Student(\\\"Jerry\\\", 22); Student jinno = new Student(\\\"Jinno\\\", 20); Student aaron = new Student(\\\"Aaron\\\", 19); List<Student> grade1 = new ArrayList<>(); List<Student> grade2 = new ArrayList<>(); grade1.add(ton); grade1.add(jerry); grade2.add(jinno); grade2.add(aaron); return Arrays.asList(grade1, grade2); } } \"},\"7656\":{\"h\":\"3.2 map的使用\",\"a\":\"_3-2-map的使用\"},\"7657\":{\"t\":\"从学生对象集合中，获取班级学生所有年龄组成的集合。\"},\"7658\":{\"t\":\"List<Student> stuList = Student.getStuList(); stuList.stream().map(Student::getAge).forEach(System.out::println); \"},\"7659\":{\"h\":\"3.3 flatMap\",\"a\":\"_3-3-flatmap\"},\"7660\":{\"t\":\"从班级对象集合中，获取班级学生所有年龄组成的集合。\"},\"7661\":{\"t\":\"嵌套集合，外部集合内嵌套了班级集合，班级集合内的元素才是学生对象。\"},\"7662\":{\"t\":\"List<List<Student>> gradeList = Student.getGradeList(); gradeList.stream().flatMap(Collection::stream) .map(Student::getAge).collect(Collectors.toList()); \"},\"7663\":{\"h\":\"3.4 总结\",\"a\":\"_3-4-总结\"},\"7664\":{\"t\":\"如上，当我们要对集合中的每个元素进行操作，并返回一个新集合是，使用map\"},\"7665\":{\"t\":\"当我们要操作的集合是个嵌套集合时，就无法直接使用map了，可以先使用flatMap，从嵌套集合生成的流中，获取子集合，并将子集合全部转化为Stream（接着flatMap会将这些stream合并成一个Stream），然后再调用Map进行进一步的操作。\"},\"7666\":{\"h\":\"Ⅵ. 排序\",\"a\":\"vi-排序\"},\"7667\":{\"h\":\"1. sorted：自然排序\",\"a\":\"_1-sorted-自然排序\"},\"7668\":{\"t\":\"自然排序，产生一个新流，其中元素按自然顺序排序\"},\"7669\":{\"t\":\"使用前提：集合的元素需要实现Comparable接口（尤其是自定义的类），否则抛异常\"},\"7670\":{\"t\":\"sorted(); ========================================== List<Integer> list = Arrays.asList(12, 43, 65, 34, 87, 0, -98, 7); //输出内容：-98;0;7;12;34;43;65;87 list.stream().sorted().forEach(System.out::println); \"},\"7671\":{\"h\":\"2. sorted(Comparator com)：定制排序\",\"a\":\"_2-sorted-comparator-com-定制排序\"},\"7672\":{\"t\":\"产生一个新流，其中元素按比较器顺序排序\"},\"7673\":{\"t\":\"sorted(Comparator com); ========================================== List<Student> stuList = Student.getStuList(); //根据学生的年龄进行排序 stuList.stream().sorted((stu1,stu2)->{ return Integer.compare(stu1.getAge(),stu2.getAge()); }).forEach(System.out::println); \"},\"7674\":{\"h\":\"Ⅶ. 匹配与查找\",\"a\":\"vii-匹配与查找\"},\"7675\":{\"h\":\"1. allMatch：检查是否匹配所有元素\",\"a\":\"_1-allmatch-检查是否匹配所有元素\"},\"7676\":{\"t\":\"作用：将stream代表的集合中的每一个元素作为参数在方法中进行操作，如果全都返回true，则整体返回true，否则返回false。\"},\"7677\":{\"t\":\"参数：一个Predicate Functional\"},\"7678\":{\"t\":\"boolean allMatch(Prodecate p); //示例：是否所有的员工的年龄都大于18 List<Employee> list = EmployeeData.getEmployees(); boolean b = list.stream().allMatch(e -> e.getAge() > 18); System.out.println(b); //false \"},\"7679\":{\"h\":\"2. anyMatch：检查是否至少匹配一个元素\",\"a\":\"_2-anymatch-检查是否至少匹配一个元素\"},\"7680\":{\"t\":\"boolean anyMatch(Predicate p); //示例：是否存在员工的工资大于 10000 List<Employee> list = EmployeeData.getEmployees(); boolean b1 = list.stream().anyMatch(e -> e.getSalary() > 10000); System.out.println(b1); //false \"},\"7681\":{\"h\":\"3. noneMatch：检查是否没有匹配任何元素\",\"a\":\"_3-nonematch-检查是否没有匹配任何元素\"},\"7682\":{\"t\":\"Boolean noneMatch(Predicate p) //示例：是否存在员工姓进 boolean name = list.stream().noneMatch(e -> e.getName().startsWith(\\\"进\\\")); System.out.println(name);//true \"},\"7683\":{\"h\":\"4. findFirst：返回第一个元素\",\"a\":\"_4-findfirst-返回第一个元素\"},\"7684\":{\"t\":\"返回值类型是Optional对象\"},\"7685\":{\"t\":\"Optional<> findFirst(); //示例：返回第一个元素 List<Employee> list = EmployeeData.getEmployees(); Optional<Employee> first = list.stream().findFirst(); System.out.println(first); //Optional[Employee{id=1001, name='马化腾', age=34, salary=6000.38}] \"},\"7686\":{\"h\":\"5. findAny：返回当前流中任意元素\",\"a\":\"_5-findany-返回当前流中任意元素\"},\"7687\":{\"t\":\"注意：不能用这个方法来获取随机元素，因为获取的元素是固定的，只是未必是第一个。\"},\"7688\":{\"t\":\"Optional<> findAny(); //示例：默认返回的还是第一个 List<Employee> list = EmployeeData.getEmployees(); Optional<Employee> any = list.stream().findAny(); System.out.println(any); //Optional[Employee{id=1001, name='马化腾', age=34, salary=6000.38}] \"},\"7689\":{\"h\":\"6. count：返回流中元素总数\",\"a\":\"_6-count-返回流中元素总数\"},\"7690\":{\"t\":\"可以在中间接filter，获取要筛选的元素的总数\"},\"7691\":{\"t\":\"long count(); //示例：返回员工总数 long count = list.stream().count(); System.out.println(count); //8 \"},\"7692\":{\"h\":\"7. max：返回流中最大值\",\"a\":\"_7-max-返回流中最大值\"},\"7693\":{\"t\":\"参数是Comparator接口\"},\"7694\":{\"t\":\"Optional<> max(Comparator c) //示例：返回工作最高的员工的工资 Optional<Double> max = list.stream().map(e -> e.getSalary()).max(Double::compare); System.out.println(max); //Optional[9876.12] \"},\"7695\":{\"h\":\"8. min：返回流中最小值\",\"a\":\"_8-min-返回流中最小值\"},\"7696\":{\"t\":\"参数是Comparator接口\"},\"7697\":{\"t\":\"Optional<> min(Comparator c); //示例：获取工资最低的员工对象 Optional<Employee> min = list.stream().min((e1, e2) -> Double.compare(e1.getSalary(), e2.getSalary())); System.out.println(min); //Optional[Employee{id=1008, name='扎克伯格', age=35, salary=2500.32}] \"},\"7698\":{\"h\":\"9. forEach：内部迭代\",\"a\":\"_9-foreach-内部迭代\"},\"7699\":{\"t\":\"使用 Collection 接口需要用户去做迭代，称为外部迭代。\"},\"7700\":{\"t\":\"相反，Stream API 使用内部迭代——它帮你把迭代做了\"},\"7701\":{\"t\":\"forEach(Consumer c); //示例：遍历Stream中集合的所有元素 employees.forEach(System.out::println); \"},\"7702\":{\"h\":\"Ⅷ. 归约与收集\",\"a\":\"viii-归约与收集\"},\"7703\":{\"h\":\"1. reduce：归约\",\"a\":\"_1-reduce-归约\"},\"7704\":{\"t\":\"可以将流中元素反复结合起来，得到一个值。\"},\"7705\":{\"t\":\"参数1：iden，初始值\"},\"7706\":{\"t\":\"参数2：BinaryOpearator Functional（对两个类型相同的参数进行二元运算）。\"},\"7707\":{\"t\":\"返回值：和初始值类型相同的值。\"},\"7708\":{\"t\":\"T reduce(T iden, BinaryOperator b) //示例：获取1到10的总和 List<Integer> intList = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10); //注意：初始值要写0，不然会多算一个1. Integer reduce = intList.stream().reduce(0, Integer::sum); System.out.println(reduce); \"},\"7709\":{\"h\":\"1.1 reduce(BinaryOperator b)\",\"a\":\"_1-1-reduce-binaryoperator-b\"},\"7710\":{\"t\":\"可以省略初始值，进行计算。直接使用集合中的第一个元素进行计算。\"},\"7711\":{\"t\":\"返回值： Optional<T>\"},\"7712\":{\"t\":\"reduce(BinaryOperator b);// List<Integer> intList = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10); Optional<Integer> reduce = intList.stream().reduce(Integer::sum); System.out.println(reduce); //Optional[55] \"},\"7713\":{\"h\":\"1.2 map-reduce模式\",\"a\":\"_1-2-map-reduce模式\"},\"7714\":{\"t\":\"map 和 reduce 的连接通常称为 map-reduce 模式，因 Google用它来进行网络搜索而出名。\"},\"7715\":{\"t\":\"示例：计算公式所有员工工资的总和\"},\"7716\":{\"t\":\"Optional<Double> reduce = list.stream().map(Employee::getSalary) .reduce((s1, s2) -> s1 + s2); //也可以写成：(Double::sum) System.out.println(reduce); //Optional[48424.08] \"},\"7717\":{\"h\":\"2. 收集\",\"a\":\"_2-收集\"},\"7718\":{\"t\":\"将流转换为其他形式。接收一个 Collector接口的实现，用于给Stream中元素做汇总的方法.\"},\"7719\":{\"t\":\"Collector 接口中方法的实现决定了如何对流执行收集的操作(如收集到 List、Set、Map)。\"},\"7720\":{\"t\":\"Collectors 实用类提供了很多静态方法，可以方便地创建常见收集器实例。\"},\"7721\":{\"t\":\"collect(Collector c) \"},\"7722\":{\"h\":\"Collectors\",\"a\":\"collectors\"},\"7723\":{\"t\":\"//1.示例：获取工资大于6000的员工List集合 List<Employee> cList = list.stream().filter(e -> e.getSalary() > 6000) .collect(Collectors.toList()); //2.示例：获取工资大于6000的员工Set集合 Set<Employee> cSet = list.stream().filter(e -> e.getSalary() > 6000) .collect(Collectors.toSet()); \"},\"7724\":{\"t\":\"常用1：toList：返回List集合\"},\"7725\":{\"t\":\"常用2：toSet：返回Set集合\"},\"7726\":{\"h\":\"Collectors的方法\",\"a\":\"collectors的方法\"},\"7727\":{\"t\":\"b-5-4\"},\"7728\":{\"t\":\"b-5-5\"},\"7729\":{\"h\":\"b-6. Optional\"},\"7730\":{\"h\":\"Ⅰ. Optional 介绍\",\"a\":\"i-optional-介绍\"},\"7731\":{\"h\":\"1. 介绍\",\"a\":\"_1-介绍\"},\"7732\":{\"t\":\"Optional<T>类(java.util.Optional) 是一个容器类，它可以保存类型T的值，代表这个值存在。或者仅仅保存null，表示这个值不存在。原来用 null 表示一个值不存在，现在 Optional 可以更好的表达这个概念。并且可以避免空指针异常。\"},\"7733\":{\"h\":\"2. 产生背景\",\"a\":\"_2-产生背景\"},\"7734\":{\"t\":\"臭名昭著的空指针异常是导致Java应用程序失败的最常见原因。以前，为了解决空指针异常，Google公司著名的Guava项目引入了Optional类，Guava通过使用检查空值的方式来防止代码污染，它鼓励程序员写更干净的代码。受到Google Guava的启发，Optional类已经成为Java 8类库的一部分\"},\"7735\":{\"h\":\"3. 应用场景\",\"a\":\"_3-应用场景\"},\"7736\":{\"t\":\"用来防止空指针异常，很少使用。\"},\"7737\":{\"t\":\"Java底层语法很多地方用到了Optional，因此需要了解。\"},\"7738\":{\"t\":\"主要使用T orElse来防止空指针。\"},\"7739\":{\"h\":\"Ⅱ. Optional常用方法\",\"a\":\"ii-optional常用方法\"},\"7740\":{\"h\":\"1. 创建Optional类\",\"a\":\"_1-创建optional类\"},\"7741\":{\"h\":\"1.1 Optional.of(T,t)\",\"a\":\"_1-1-optional-of-t-t\"},\"7742\":{\"t\":\"创建一个 Optional 实例，t必须非空；\"},\"7743\":{\"t\":\"Optional<T> Optional.of(T,t); ==================================== Student stu = new Student(); //要包装stu非null,不然会抛出异常 Optional<Student> stu1 = Optional.of(stu); System.out.println(stu1); \"},\"7744\":{\"h\":\"1.2 Optional.empty()\",\"a\":\"_1-2-optional-empty\"},\"7745\":{\"t\":\"创建一个空的 Optional 实例，意义不大\"},\"7746\":{\"t\":\"Optional<Object> empty = Optional.empty(); \"},\"7747\":{\"h\":\"1.3 Optional.ofNullable(T t) 【常用】\",\"a\":\"_1-3-optional-ofnullable-t-t-【常用】\"},\"7748\":{\"t\":\"创建一个Optional实例，t可以为null\"},\"7749\":{\"t\":\"Optional<T> Optional.ofNullable(T t); ===================================== Student stu = new Student(); Student stu2 = null; Optional<Student> stu3 = Optional.ofNullable(stu2); Optional<Student> stu4 = Optional.ofNullable(stu); System.out.println(stu4);//Optional[Student{userName='null', age=1}] System.out.println(stu3); //Optional.empty \"},\"7750\":{\"h\":\"2. 判断Optional容器中是否有对象\",\"a\":\"_2-判断optional容器中是否有对象\"},\"7751\":{\"h\":\"2.1 isPresent\",\"a\":\"_2-1-ispresent\"},\"7752\":{\"t\":\"判断Optional容器中是否有对象\"},\"7753\":{\"t\":\"boolean isPresent(); ===================================== Student stu2 = null; Optional<Student> optStu2 = Optional.ofNullable(stu2); boolean b = optStu2.isPresent(); System.out.println(b); //false \"},\"7754\":{\"h\":\"2.2 ifPresent\",\"a\":\"_2-2-ifpresent\"},\"7755\":{\"t\":\"如果有值，就执行Consumer接口的实现代码，并且该值会作为参数传给它。\"},\"7756\":{\"t\":\"void ifPresent(Consumer<? super T> consumer) ===================================== Student stu = new Student(); Optional<Student> stu1 = Optional.ofNullable(stu); stu1.ifPresent(System.out::println); //Student{userName='null', age=1} \"},\"7757\":{\"h\":\"3. 获取Optional容器的对象值\",\"a\":\"_3-获取optional容器的对象值\"},\"7758\":{\"h\":\"3.1 get：获取对象包含的值\",\"a\":\"_3-1-get-获取对象包含的值\"},\"7759\":{\"t\":\"如果没有值，就抛异常，可以组合isPresent一起用。\"},\"7760\":{\"t\":\"T get(); ===================================== Optional<Student> stu1 = Optional.ofNullable(stu); //Optional[Student{userName='null', age=1}] System.out.println(stu1); Student student = stu1.get(); //Student{userName='null', age=1} System.out.println(student); \"},\"7761\":{\"h\":\"3.2 T orElse：\",\"a\":\"_3-2-t-orelse\"},\"7762\":{\"t\":\"如果有值则将其返回，否则返回指定的other对象。 加强版get()，防止空值异常。\"},\"7763\":{\"t\":\"T orElse(T other); ===================================== Student stu2 = null; Optional<Student> optStu = Optional.ofNullable(stu2); Student stu3 = optStu.orElse(new Student(\\\"Anonymous\\\",21)); System.out.println(stu3);//Student{userName='Anonymous', age=21} \"},\"7764\":{\"h\":\"b-7. JDK11 LTS\"},\"7765\":{\"t\":\"提示\"},\"7766\":{\"t\":\"JDK11的内容指的是JDK9~JDK11\"},\"7767\":{\"t\":\"暂略\"},\"7768\":{\"h\":\"Ⅰ. Modularity\",\"a\":\"i-modularity\"},\"7769\":{\"h\":\"Ⅱ. REPL工具\",\"a\":\"ii-repl工具\"},\"7770\":{\"h\":\"Ⅲ. try语句\",\"a\":\"iii-try语句\"},\"7771\":{\"h\":\"Ⅳ. 底层改变\",\"a\":\"iv-底层改变\"},\"7772\":{\"h\":\"Ⅴ. 变量类型推断\",\"a\":\"v-变量类型推断\"},\"7773\":{\"h\":\"Ⅵ. String新增方法\",\"a\":\"vi-string新增方法\"},\"7774\":{\"h\":\"Ⅶ. 其他\",\"a\":\"vii-其他\"},\"7775\":{\"h\":\"1. copyOf()\",\"a\":\"_1-copyof\"},\"7776\":{\"h\":\"2. Optional加强\",\"a\":\"_2-optional加强\"},\"7777\":{\"h\":\"3. 局部类型推断升级\",\"a\":\"_3-局部类型推断升级\"},\"7778\":{\"h\":\"4. HttpClient\",\"a\":\"_4-httpclient\"},\"7779\":{\"h\":\"5. 更简化的编译运行\",\"a\":\"_5-更简化的编译运行\"},\"7780\":{\"h\":\"6. 接口中声明私有方法\",\"a\":\"_6-接口中声明私有方法\"},\"7781\":{\"h\":\"7. 钻石操作符<>的增强\",\"a\":\"_7-钻石操作符-的增强\"},\"7782\":{\"h\":\"1-1. 概述\"},\"7783\":{\"t\":\"提示\"},\"7784\":{\"t\":\"开发中，使用的是框架中的数据库操作方法，JDBC只用来了解底层。\"},\"7785\":{\"t\":\"框架中底层用的也是JDBC。\"},\"7786\":{\"t\":\"【本章内容：用来了解底层】\"},\"7787\":{\"h\":\"1. 数据持久化\",\"a\":\"_1-数据持久化\"},\"7788\":{\"t\":\"持久化(persistence)：把数据保存到可掉电式存储设备中以供之后使用。大多数情况下，特别是企业级应用，数据持久化意味着将内存中的数据保存到硬盘上加以”固化”，而持久化的实现过程大多通过各种关系数据库来完成。\"},\"7789\":{\"t\":\"1-1-1\"},\"7790\":{\"t\":\"持久化的主要应用是将内存中的数据存储在关系型数据库中，当然也可以存储在磁盘文件、XML数据文件中。\"},\"7791\":{\"h\":\"2. Java中的数据存储技术\",\"a\":\"_2-java中的数据存储技术\"},\"7792\":{\"t\":\"在Java中，数据库存取技术可分为如下几类：\"},\"7793\":{\"t\":\"JDBC直接访问数据库\"},\"7794\":{\"t\":\"JDO (Java Data Object )技术\"},\"7795\":{\"t\":\"第三方O/R工具，如Hibernate, Mybatis 等\"},\"7796\":{\"t\":\"JDBC是java访问数据库的基石，JDO、Hibernate、MyBatis等只是更好的封装了JDBC。\"},\"7797\":{\"h\":\"3. JDBC介绍\",\"a\":\"_3-jdbc介绍\"},\"7798\":{\"t\":\"JDBC(Java Database Connectivity)是一个独立于特定数据库管理系统、通用的SQL数据库存取和操作的公共接口（一组API），定义了用来访问数据库的标准Java类库，（java.sql,javax.sql）使用这些类库可以以一种标准的方法、方便地访问数据库资源。\"},\"7799\":{\"t\":\"JDBC为访问不同的数据库提供了一种统一的途径，为开发者屏蔽了一些细节问题。\"},\"7800\":{\"t\":\"JDBC的目标是使Java程序员使用JDBC可以连接任何提供了JDBC驱动程序（也就是接口的实现类）的数据库系统，这样就使得程序员无需对特定的数据库系统的特点有过多的了解，从而大大简化和加快了开发过程。\"},\"7801\":{\"h\":\"3.1 没有JDBC，Java程序访问数据库时是这样的：\",\"a\":\"_3-1-没有jdbc-java程序访问数据库时是这样的\"},\"7802\":{\"t\":\"1-1-2\"},\"7803\":{\"h\":\"3.2 有了JDBC，Java程序访问数据库时是这样的：\",\"a\":\"_3-2-有了jdbc-java程序访问数据库时是这样的\"},\"7804\":{\"t\":\"1-1-3\"},\"7805\":{\"h\":\"3.3 总结\",\"a\":\"_3-3-总结\"},\"7806\":{\"t\":\"一般选择使用JDBC来连接数据库，而不是直接操作数据库，这样Java程序的移植性更高，编写难度更低。\"},\"7807\":{\"h\":\"4. JDBC体系结构\",\"a\":\"_4-jdbc体系结构\"},\"7808\":{\"t\":\"JDBC接口（API）包括两个层次：\"},\"7809\":{\"t\":\"面向应用的API：Java API，抽象接口，供应用程序开发人员使用（连接数据库，执行SQL语句，获得结果），java程序员只需要面向这套接口编程即可。\"},\"7810\":{\"t\":\"面向数据库的API：Java Driver API，供开发商开发数据库驱动程序用。不同的数据库厂商，需要针对这套接口，提供不同实现。不同的实现的集合，即为不同数据库的驱动。\"},\"7811\":{\"h\":\"5. JDBC程序编写步骤\",\"a\":\"_5-jdbc程序编写步骤\"},\"7812\":{\"t\":\"1-1-4\"},\"7813\":{\"h\":\"1-2. 连接数据库\"},\"7814\":{\"h\":\"Ⅰ. 安装驱动\",\"a\":\"i-安装驱动\"},\"7815\":{\"h\":\"1. Driver：驱动介绍\",\"a\":\"_1-driver-驱动介绍\"},\"7816\":{\"t\":\"JDK中只有JDBC定义的一系列操作数据库的接口，并没有预装驱动，需要我们自己下载\"},\"7817\":{\"t\":\"目前：以MySql驱动进行操作。\"},\"7818\":{\"h\":\"2. 下载MySQL驱动\",\"a\":\"_2-下载mysql驱动\"},\"7819\":{\"t\":\"选择：Platform Independent\"},\"7820\":{\"t\":\"1-2-1\"},\"7821\":{\"h\":\"3. 驱动文件介绍\",\"a\":\"_3-驱动文件介绍\"},\"7822\":{\"t\":\"解压后的驱动文件，其中：\"},\"7823\":{\"t\":\"src：MySQL的JDBC驱动源码（.java）\"},\"7824\":{\"t\":\"mysql-connector-java-8.0.27.jar：jar包，MySql的JDBC驱动包\"},\"7825\":{\"t\":\"1-2-2\"},\"7826\":{\"h\":\"4. 安装并使用驱动\",\"a\":\"_4-安装并使用驱动\"},\"7827\":{\"t\":\"①将jar包移动到项目目录下，如：Learn/JDBC/lib (JDBC模块的lib目录)\"},\"7828\":{\"t\":\"②在idea中，右键jar包文件：add to Library，将jar包加载到扩展库\"},\"7829\":{\"t\":\"③如图，选择jar包的等级和要加载到哪个模块就OK了。\"},\"7830\":{\"t\":\"1-2-3\"},\"7831\":{\"h\":\"5. 加载驱动源码\",\"a\":\"_5-加载驱动源码\"},\"7832\":{\"t\":\"加载的第三方jar包都是class文件，查看到的源码是经过反编译的，需要将真正的源码导入。 在查看mysql-connector-java-8.0.27.jar中的class文件时，会提示：\"},\"7833\":{\"t\":\"1-2-4\"},\"7834\":{\"t\":\"点击右边的Choose Source，选择之前解压的MySQL驱动目录，选择src目录作为源码来源。\"},\"7835\":{\"t\":\"URL：获取要连接的数据库信息\"},\"7836\":{\"h\":\"Ⅱ. 数据库连接要素\",\"a\":\"ii-数据库连接要素\"},\"7837\":{\"t\":\"连接数据库，必备条件有三个（前提先创建好了数据库）：\"},\"7838\":{\"t\":\"Driver：数据库驱动，JDK只有接口，需要安装具体的实现类\"},\"7839\":{\"t\":\"URL：即要连接的数据库地址\"},\"7840\":{\"t\":\"用户名、密码：连接数据库的用户名密码\"},\"7841\":{\"h\":\"1. Driver\",\"a\":\"_1-driver\"},\"7842\":{\"t\":\"见：安装驱动。\"},\"7843\":{\"h\":\"2. URL\",\"a\":\"_2-url\"},\"7844\":{\"t\":\"以MySQL为例：URL的格式为：jdbc:mysql://主机ip:mysql服务端端口号/数据库名称?其他k=v\"},\"7845\":{\"t\":\"MySQL默认端口是3306（也可以自己指定），其他k=v是字符集，采用默认的就行\"},\"7846\":{\"t\":\"\\\"jdbc:mysql://localhost:3306/test?\\\"; \"},\"7847\":{\"h\":\"3. 用户名、密码\",\"a\":\"_3-用户名、密码\"},\"7848\":{\"t\":\"user,password可以用 属性名=属性值 方式告诉数据库\"},\"7849\":{\"h\":\"Ⅲ. 连接数据库\",\"a\":\"iii-连接数据库\"},\"7850\":{\"t\":\"有5种方法，以下5中方法是循序渐进的，用的时候直接用第五种即可。\"},\"7851\":{\"h\":\"1. 方式1：使用MySQL驱动的API连接\",\"a\":\"_1-方式1-使用mysql驱动的api连接\"},\"7852\":{\"t\":\"import java.sql.Connection; public void connectionDB1() throws SQLException { //1.初始化驱动：Driver接口实现类com.mysql.jdbc.Driver的对象 Driver driver = new com.mysql.cj.jdbc.Driver(); //2. 提供URL String url = \\\"jdbc:mysql://localhost:3306/test\\\"; //3.提供用户名和密码：使用Properties对象 Properties info = new Properties(); info.setProperty(\\\"user\\\",\\\"root\\\"); info.setProperty(\\\"password\\\",\\\"root\\\"); //4.调用driver的connect()，获取连接对象 //connect方法的第二个参数就是Properties类，因此必须以该类储存账号和密码信息 Connection conn = driver.connect(url, info); System.out.println(conn); } \"},\"7853\":{\"t\":\"Properties类：Properties 继承于 Hashtable。表示一个持久的属性集.属性列表中每个键及其对应值都是一个字符串。\"},\"7854\":{\"t\":\"弊端：出现了第三方API com.mysql.jdbc.Driver，失去了移植性。\"},\"7855\":{\"h\":\"2. 方式2：使用反射，不体现第三方API\",\"a\":\"_2-方式2-使用反射-不体现第三方api\"},\"7856\":{\"t\":\"方式1获取Driver实现类的时候使用了第三方API，失去了移植性。\"},\"7857\":{\"t\":\"可以使用反射，来隐藏第三方api\"},\"7858\":{\"t\":\"//1.使用反射初始化驱动 Class<?> driverClass = Class.forName(\\\"com.mysql.cj.jdbc.Driver\\\"); Object driver = driverClass.newInstance(); ...//后续的操作同方式1 \"},\"7859\":{\"t\":\"说明：newInstance已经被jdk舍弃了。\"},\"7860\":{\"h\":\"3. 方式3：使用DriverManager\",\"a\":\"_3-方式3-使用drivermanager\"},\"7861\":{\"t\":\"使用DriverManager类替换Driver\"},\"7862\":{\"t\":\"public void testConnection3() throws Exception { //1.使用反射获取Driver实现类的对象 Class clazz = Class.forName(\\\"com.mysql.jdbc.Driver\\\"); Driver driver = (Driver) clazz.newInstance(); //2.提供另外三个连接的基本信息： String url = \\\"jdbc:mysql://localhost:3306/test\\\"; String user = \\\"root\\\"; String password = \\\"abc123\\\"; //3.注册驱动 DriverManager.registerDriver(driver); //4.获取连接 Connection conn = DriverManager.getConnection(url, user, password); System.out.println(conn); } \"},\"7863\":{\"h\":\"4. 方式4：省略驱动的注册\",\"a\":\"_4-方式4-省略驱动的注册\"},\"7864\":{\"t\":\"驱动会自动注册的，可以省略驱动的注册，只进行驱动的加载即可。\"},\"7865\":{\"t\":\"public void testConnection3() throws Exception { //1.Driver的实现类不用获取了,因为驱动不用注册... // 2.提供三个连接的基本信息： String url = \\\"jdbc:mysql://localhost:3306/test\\\"; String user = \\\"root\\\"; String password = \\\"abc123\\\"; //3.驱动注册可以省略,会自动注册... //3.1 将1和3连在一起，只加载驱动即可 Class.ForName(\\\"com.mysql.jdbc.Driver\\\"); //4.获取连接 Connection conn = DriverManager.getConnection(url, user, password); System.out.println(conn); } \"},\"7866\":{\"h\":\"5. 方式5：将连接方式写入配置文件让驱动加载【最终方案】\",\"a\":\"_5-方式5-将连接方式写入配置文件让驱动加载【最终方案】\"},\"7867\":{\"t\":\"使用配置文件的方式保存配置信息，在代码中加载配置文件。数据库连接的三个要素，都可以保存到配置文件中\"},\"7868\":{\"h\":\"5.1 配置文件\",\"a\":\"_5-1-配置文件\"},\"7869\":{\"t\":\"位置：配置文件声明在工程的src目录下\"},\"7870\":{\"t\":\"文件名：jdbc.properties\"},\"7871\":{\"t\":\"user=root password=root url=jdbc:mysql://localhost:3306/test driverClass=com.mysql.cj.jdbc.Driver \"},\"7872\":{\"h\":\"5.2 代码\",\"a\":\"_5-2-代码\"},\"7873\":{\"t\":\"public void connectionDB1() throws Exception { //1.加载配置文件：使用ClassLoader和Properties类 InputStream is = ConnectionTest.class.getClassLoader() .getResourceAsStream(\\\"jdbc.properties\\\"); Properties pros = new Properties(); pros.load(is); //2.读取配置信息 String user = pros.getProperty(\\\"user\\\"); String password = pros.getProperty(\\\"password\\\"); String url = pros.getProperty(\\\"url\\\"); String driverClass = pros.getProperty(\\\"driverClass\\\"); //3.加载驱动：使用Class类的forName方法根据全类名参数创建对象 Class.forName(driverClass); //4.获取连接 Connection conn = DriverManager.getConnection(url, user,password); System.out.println(conn); } \"},\"7874\":{\"h\":\"5.3 使用配置文件的好处\",\"a\":\"_5-3-使用配置文件的好处\"},\"7875\":{\"t\":\"实现了代码和数据的分离，如果需要修改配置信息，直接在配置文件中修改，不需要深入代码\"},\"7876\":{\"t\":\"如果修改了配置信息，省去重新编译的过程\"},\"7877\":{\"h\":\"1-3. CURD\"},\"7878\":{\"h\":\"Ⅰ. 操作和访问数据库\",\"a\":\"i-操作和访问数据库\"},\"7879\":{\"h\":\"1. 说明\",\"a\":\"_1-说明\"},\"7880\":{\"t\":\"数据库连接被用于向数据库服务器发送命令和 SQL 语句，并接受数据库服务器返回的结果。其实一个数据库连接就是一个Socket连接。\"},\"7881\":{\"h\":\"2. 对数据库的调用方式\",\"a\":\"_2-对数据库的调用方式\"},\"7882\":{\"t\":\"在 java.sql 包中有 3 个接口分别定义了对数据库的调用的不同方式：\"},\"7883\":{\"t\":\"Statement：用于执行静态 SQL 语句并返回它所生成结果的对象。\"},\"7884\":{\"t\":\"PrepatedStatement：SQL 语句被预编译并存储在此对象中，可以使用此对象多次高效地执行该语句。\"},\"7885\":{\"t\":\"CallableStatement：用于执行 SQL 存储过程【框架中用的，暂不关注】\"},\"7886\":{\"t\":\"1-3-1\"},\"7887\":{\"h\":\"3. statement的弊端\",\"a\":\"_3-statement的弊端\"},\"7888\":{\"h\":\"3.1 问题一：存在拼串操作，繁琐\",\"a\":\"_3-1-问题一-存在拼串操作-繁琐\"},\"7889\":{\"t\":\"String userName = ...; //获取用户名 String password = ...; //获取用户密码 //进行SQL语句的拼接：非常繁琐，且不易阅读 String sql = \\\"SELECT user,password FROM user_table WHERE USER = '\\\" + userName + \\\"' AND PASSWORD = '\\\" + password User user = get(sql, User.class); //执行SQL \"},\"7890\":{\"h\":\"3.2 问题二：存在SQL注入问题\",\"a\":\"_3-2-问题二-存在sql注入问题\"},\"7891\":{\"t\":\"SQL 注入是利用某些系统没有对用户输入的数据进行充分的检查，而在用户输入数据中注入非法的 SQL 语句段或命令从而利用系统的 SQL 引擎完成恶意行为的做法。\"},\"7892\":{\"t\":\"如下：通过填写用户名：'1' or ' ，密码：=1 or '1' = '1 进行SQL注入\"},\"7893\":{\"t\":\"SELECT user,password FROM user_table WHERE USER = '1' or ' AND PASSWORD = '='1' or '1' = '1'; \"},\"7894\":{\"h\":\"4. 开发中访问数据库的方式选择\",\"a\":\"_4-开发中访问数据库的方式选择\"},\"7895\":{\"t\":\"PreptredStatement是Statemet你的子接口，更安全和高效，开发中选择它。\"},\"7896\":{\"t\":\"1-3-2\"},\"7897\":{\"h\":\"5. PreparedStatement的优点\",\"a\":\"_5-preparedstatement的优点\"},\"7898\":{\"t\":\"解决了Statement的拼串问题\"},\"7899\":{\"t\":\"解决了SQL注入问题\"},\"7900\":{\"t\":\"可以操作Blob数据\"},\"7901\":{\"t\":\"可以实现高效的批量操作（只需要预编译的时候校验一次SQL语句）\"},\"7902\":{\"h\":\"6. Java与SQL对应数据类型转换表\",\"a\":\"_6-java与sql对应数据类型转换表\"},\"7903\":{\"t\":\"Java类型\"},\"7904\":{\"t\":\"SQL类型\"},\"7905\":{\"t\":\"boolean\"},\"7906\":{\"t\":\"BIT\"},\"7907\":{\"t\":\"byte\"},\"7908\":{\"t\":\"TINYINT\"},\"7909\":{\"t\":\"short\"},\"7910\":{\"t\":\"SMALLINT\"},\"7911\":{\"t\":\"int\"},\"7912\":{\"t\":\"INTEGER\"},\"7913\":{\"t\":\"long\"},\"7914\":{\"t\":\"BIGINT\"},\"7915\":{\"t\":\"String\"},\"7916\":{\"t\":\"CHAR,VARCHAR,LONGVARCHAR\"},\"7917\":{\"t\":\"byte array\"},\"7918\":{\"t\":\"BINARY , VAR BINARY\"},\"7919\":{\"t\":\"java.sql.Date\"},\"7920\":{\"t\":\"DATE\"},\"7921\":{\"t\":\"java.sql.Time\"},\"7922\":{\"t\":\"TIME\"},\"7923\":{\"t\":\"java.sql.Timestamp\"},\"7924\":{\"t\":\"TIMESTAMP\"},\"7925\":{\"h\":\"Ⅱ. PreparedStatement\",\"a\":\"ii-preparedstatement\"},\"7926\":{\"h\":\"1. 简介\",\"a\":\"_1-简介\"},\"7927\":{\"t\":\"可以通过调用 Connection 对象的 preparedStatement(String sql)方法获取 PreparedStatement 对象\"},\"7928\":{\"h\":\"2. PreparedStatement 与 Statement\",\"a\":\"_2-preparedstatement-与-statement\"},\"7929\":{\"t\":\"PreparedStatement 接口是 Statement 的子接口，它表示一条预编译过的 SQL 语句\"},\"7930\":{\"h\":\"3. PreparedStatement的操作步骤\",\"a\":\"_3-preparedstatement的操作步骤\"},\"7931\":{\"t\":\"获取数据库连接对象 \"},\"7932\":{\"t\":\"①读取配置文件中的数据库连接信息\"},\"7933\":{\"t\":\"②加载驱动\"},\"7934\":{\"t\":\"③获取链接\"},\"7935\":{\"t\":\"编写SQL语句 \"},\"7936\":{\"t\":\"④拼接预编译SQL字符串，带占位符“？”，并返回PrepareStatemet对象\"},\"7937\":{\"t\":\"⑤填充占位符\"},\"7938\":{\"t\":\"⑥执行操作 \"},\"7939\":{\"t\":\"execute：DML操作\"},\"7940\":{\"t\":\"executeQuery：DQL操作\"},\"7941\":{\"t\":\"⑦关闭资源： \"},\"7942\":{\"t\":\"close：关闭PreparedStatement资源\"},\"7943\":{\"t\":\"close：关闭连接资源\"},\"7944\":{\"h\":\"4. 创建PreparedStatement对象\",\"a\":\"_4-创建preparedstatement对象\"},\"7945\":{\"t\":\"可以通过调用 Connection 对象的 preparedStatement(String sql)方法获取 PreparedStatement 对象\"},\"7946\":{\"t\":\"获取Connection对象->预编译sql字符串->调用 preparedStatement(String sql) = PreparedStatement对象\"},\"7947\":{\"t\":\"PrepareStatement Connection.prepareStatement(String sql); ====================================================== ...//读取配置文件中的数据库连接信息，加载驱动 //1.获取Connection对象：数据库连接对象 Connection conn = DriverManager.getConnection(url, user, password); //2.编写预编译sql字符串 String sql = \\\"insert into customers(name,email,birth)values(?,?,?)\\\"; //3.Connection对象调用preparedStatement方法执行预编译SQL获取PreparedStatemet对象 PreparedStatement ps = conn.prepareStatement(sql); \"},\"7948\":{\"h\":\"5. 预编译SQL语句与占位符\",\"a\":\"_5-预编译sql语句与占位符\"},\"7949\":{\"h\":\"5.1 预编译SQL语句\",\"a\":\"_5-1-预编译sql语句\"},\"7950\":{\"t\":\"PreparedStatement 对象所代表的 SQL 语句中的参数用问号(?)来表示\"},\"7951\":{\"t\":\"setXxx（Xxx是数据类型）：PreparedStatement 对象的 setXxx() 方法来设置这些参数. setXxx() 方法有两个参数，第一个参数是要设置的 SQL 语句中的参数的索引(从 1 开始)，第二个是设置的 SQL 语句中的参数的值。\"},\"7952\":{\"t\":\"//1.预编译字符串示例 String sql = \\\"insert into customers(name,age,birth)values(?,?,?)\\\"; //2.获取PreparedStatement对象 PreparedStatement ps = conn.prepareStatement(sql); \"},\"7953\":{\"h\":\"5.2 填充占位符\",\"a\":\"_5-2-填充占位符\"},\"7954\":{\"t\":\"setXxx（Xxx是数据类型）：PreparedStatement 对象的 setXxx() 方法来设置这些参数. setXxx() 方法有两个参数，第一个参数是要设置的 SQL 语句中的参数的索引(从 1 开始)，第二个是设置的 SQL 语句中的参数的值。\"},\"7955\":{\"t\":\"该方法会抛出：java.sql.SQLException异常\"},\"7956\":{\"t\":\"void PreparedStatement.setXxx(int paramenterIndex,Xxx x); ====================================== //调用 setXxx方法填充上述占位符 ps.setString(1,\\\"Jinno\\\"); ps.setInt(2,20); SimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy-MM-dd\\\"); java.util.Date date = sdf.parse(\\\"1000-01-01\\\"); ps.setDate(3,new(date.getTime()));//要填SQL中的Date对象 \"},\"7957\":{\"h\":\"6. execute：执行DML操作\",\"a\":\"_6-execute-执行dml操作\"},\"7958\":{\"t\":\"执行PreparedStatement对象包含的所有任意SQL语句。\"},\"7959\":{\"t\":\"该操作会抛出：SQLException异常\"},\"7960\":{\"t\":\"boolean PreparedStatement.execute(); \"},\"7961\":{\"t\":\"指针 \"},\"7962\":{\"t\":\"execute是可以执行多条预编译SQL语句的，返回值返回的是第一条语句的处理结果。\"},\"7963\":{\"t\":\"需要调用方法 getResultSet 或 getUpdateCount 来检索结果，调用 getMoreResults 才能移动到任何后续结果\"},\"7964\":{\"t\":\"返回值 \"},\"7965\":{\"t\":\"如果第一个结果是 ResultSet 对象，则返回 true；\"},\"7966\":{\"t\":\"如果第一个结果是更新计数或没有结果，则返回 false\"},\"7967\":{\"h\":\"Ⅲ. DML\",\"a\":\"iii-dml\"},\"7968\":{\"t\":\"PreparedStatement的DML操作\"},\"7969\":{\"h\":\"1. 添加：代码示例\",\"a\":\"_1-添加-代码示例\"},\"7970\":{\"t\":\"public void testInsert() { Connection conn = null; PreparedStatement ps = null; try { // 1.读取配置文件中的4个基本信息 InputStream is = ClassLoader.getSystemClassLoader() .getResourceAsStream(\\\"jdbc.properties\\\"); Properties pros = new Properties(); pros.load(is); String user = pros.getProperty(\\\"user\\\"); String password = pros.getProperty(\\\"password\\\"); String url = pros.getProperty(\\\"url\\\"); String driverClass = pros.getProperty(\\\"driverClass\\\"); // 2.加载驱动 Class.forName(driverClass); // 3.获取连接 conn = DriverManager.getConnection(url, user, password); //4.预编译sql语句，返回PreparedStatement的实例 String sql = \\\"insert into customers(name,email,birth)values(?,?,?)\\\"; ps = conn.prepareStatement(sql); //5.填充占位符 ps.setString(1, \\\"哪吒\\\"); ps.setString(2, \\\"nezha@gmail.com\\\"); SimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy-MM-dd\\\"); java.util.Date date = sdf.parse(\\\"1000-01-01\\\"); ps.setDate(3, new Date(date.getTime())); //6.执行操作 ps.execute(); } catch (Exception e) { e.printStackTrace(); }finally{ //7.资源的关闭 try { if(ps != null) ps.close(); } catch (SQLException e) { e.printStackTrace(); } try { if(conn != null) conn.close(); } catch (SQLException e) { e.printStackTrace(); } } } \"},\"7971\":{\"h\":\"2. 封装数据库连接的获取和资源的关闭\",\"a\":\"_2-封装数据库连接的获取和资源的关闭\"},\"7972\":{\"t\":\"文件：src/util/JDBCUtils.java\"},\"7973\":{\"t\":\"类：JDBCUtils\"},\"7974\":{\"h\":\"2.1 获取数据库连接\",\"a\":\"_2-1-获取数据库连接\"},\"7975\":{\"t\":\"public static Connection getConnection() throws Exception { // 1.读取配置文件中的4个基本信息 InputStream is = ClassLoader.getSystemClassLoader() .getResourceAsStream(\\\"jdbc.properties\\\"); Properties pros = new Properties(); pros.load(is); String user = pros.getProperty(\\\"user\\\"); String password = pros.getProperty(\\\"password\\\"); String url = pros.getProperty(\\\"url\\\"); String driverClass = pros.getProperty(\\\"driverClass\\\"); // 2.加载驱动 Class.forName(driverClass); // 3.获取连接 Connection conn = DriverManager.getConnection(url, user, password); return conn; } \"},\"7976\":{\"h\":\"2.2 关闭连接和Statement的操作\",\"a\":\"_2-2-关闭连接和statement的操作\"},\"7977\":{\"t\":\"PropertyStatement是Statement的子类。\"},\"7978\":{\"t\":\"public static void closeResource(Connection conn,Statement ps){ try { if(ps != null) ps.close(); } catch (SQLException e) { e.printStackTrace(); } try { if(conn != null) conn.close(); } catch (SQLException e) { e.printStackTrace(); } } \"},\"7979\":{\"h\":\"3. 使用封装好的工具：更新操作示例\",\"a\":\"_3-使用封装好的工具-更新操作示例\"},\"7980\":{\"t\":\"public void testUpdate(){ Connection conn = null; PreparedStatement ps = null; try { //1.获取数据库的连接 conn = JDBCUtils.getConnection(); //2.预编译sql语句，返回PreparedStatement的实例 String sql = \\\"update customers set name = ? where id = ?\\\"; ps = conn.prepareStatement(sql); //3.填充占位符 ps.setObject(1,\\\"莫扎特\\\"); ps.setObject(2, 18); //4.执行 ps.execute(); } catch (Exception e) { e.printStackTrace(); }finally{ //5.资源的关闭 JDBCUtils.closeResource(conn, ps); } } \"},\"7981\":{\"h\":\"4. 封装通用的增删改操作\",\"a\":\"_4-封装通用的增删改操作\"},\"7982\":{\"t\":\"对于DML来说，除了SQL语句外，其他的步骤都是相通的。\"},\"7983\":{\"h\":\"4.1 功能设计\",\"a\":\"_4-1-功能设计\"},\"7984\":{\"t\":\"DML操作的变量是SQL预编译语句，和给占位符赋的值，因此我们可以将SQL预编译语句和占位符作为形参，让用户传输，然后将所有操作封装。\"},\"7985\":{\"h\":\"4.2 参数设计\",\"a\":\"_4-2-参数设计\"},\"7986\":{\"t\":\"SQL的预编译语句，作为方法的第一个参数。SQL的占位符数量和类型都是不确定的，因此可以设计成Object类型的 可变形参。\"},\"7987\":{\"t\":\"使用的时候注意：sql中占位符的个数与可变形参的长度应该相同！\"},\"7988\":{\"h\":\"4.3 源码\",\"a\":\"_4-3-源码\"},\"7989\":{\"t\":\"public void update(String sql,Object ...args){ Connection conn = null; PreparedStatement ps = null; try { //1.获取数据库的连接 conn = JDBCUtils.getConnection(); //2.预编译sql语句，返回PreparedStatement的实例 ps = conn.prepareStatement(sql); //3.填充占位符 for(int i = 0;i < args.length;i++){ ps.setObject(i + 1, args[i]);//小心参数声明错误！！ } //4.执行 ps.execute(); } catch (Exception e) { e.printStackTrace(); }finally{ //5.资源的关闭 JDBCUtils.closeResource(conn, ps); } } \"},\"7990\":{\"h\":\"4.4 使用示例\",\"a\":\"_4-4-使用示例\"},\"7991\":{\"t\":\"//1.示例1：删除某表中的1个数据 String sql = \\\"delete from customers where id = ?\\\"; update(sql,3) //2.示例2：更新某表中的一个数据 String sql = \\\"update `order` set order_name = ? where order_id = ?\\\"; update(sql,\\\"DD\\\",\\\"2\\\"); \"},\"7992\":{\"h\":\"Ⅳ. DQL\",\"a\":\"iv-dql\"},\"7993\":{\"t\":\"PreparedStatement的DQL操作。\"},\"7994\":{\"h\":\"1. DQL的操作步骤\",\"a\":\"_1-dql的操作步骤\"},\"7995\":{\"t\":\"基本步骤与DML一致，只是DQL执行查询的方法是executeQuery()，而不是execute()。\"},\"7996\":{\"t\":\"查询操作比较复杂一点，需要对查询的结果进行处理。\"},\"7997\":{\"h\":\"2. ResultSet对象\",\"a\":\"_2-resultset对象\"},\"7998\":{\"h\":\"2.1 获取\",\"a\":\"_2-1-获取\"},\"7999\":{\"t\":\"调用PreparedStatement 的 executeQuery() 方法，查询结果是一个ResultSet 对象\"},\"8000\":{\"t\":\"ResultSet PreparedStatement.executeQuery(); \"},\"8001\":{\"h\":\"2.2 ResultSet介绍\",\"a\":\"_2-2-resultset介绍\"},\"8002\":{\"t\":\"ResultSet 对象以逻辑表格的形式封装了执行数据库操作的结果集。ResultSet 返回的实际上就是一张数据表。\"},\"8003\":{\"h\":\"2.3 指针\",\"a\":\"_2-3-指针\"},\"8004\":{\"t\":\"ResultSet 对象维护了一个指向当前数据行的指针，指针指向数据表的第一条记录的前面。可以通过 ResultSet 对象的 next() 方法移动到下一行。调用 next()方法检测下一行是否有效。若有效，该方法返回 true，且指针下移，并返回该行的数据。\"},\"8005\":{\"t\":\"当指针指向一行时, 可以通过调用 getXxx(int index) 或 getXxx(int columnName) 获取每一列的值。\"},\"8006\":{\"h\":\"3. ResultSet接口的方法\",\"a\":\"_3-resultset接口的方法\"},\"8007\":{\"h\":\"3.1 next：移动指针\",\"a\":\"_3-1-next-移动指针\"},\"8008\":{\"t\":\"判断下一行有没有数据，没有就返回false，有就移动指针到下一行。\"},\"8009\":{\"t\":\"boolean ResultSet.next() \"},\"8010\":{\"h\":\"3.2 getXxx：获取指针所在行的数据\",\"a\":\"_3-2-getxxx-获取指针所在行的数据\"},\"8011\":{\"t\":\"参数：列的label或索引 \"},\"8012\":{\"t\":\"列的label，列名，推荐这种，更灵活安全，意义明显。\"},\"8013\":{\"t\":\"列的索引，Java与数据库交互涉及到的相关API中的索引都从1开始。\"},\"8014\":{\"t\":\"返回值：返回该列的值\"},\"8015\":{\"t\":\"数据类型：Xxx代表数据类型，用来获取不同类型的值\"},\"8016\":{\"t\":\"Xxx ResultSet.getXxx(int index); \"},\"8017\":{\"h\":\"4. ResultSetMetaDate对象\",\"a\":\"_4-resultsetmetadate对象\"},\"8018\":{\"t\":\"用于获取关于 ResultSet 对象中列的类型和属性信息的对象，也就是用于获取结果集的源数据。\"},\"8019\":{\"t\":\"ResultSetMetaDate ResultSet.getMetaData(); \"},\"8020\":{\"h\":\"5. ResultSetMetaDate对象的常用方法\",\"a\":\"_5-resultsetmetadate对象的常用方法\"},\"8021\":{\"t\":\"getColumnName(int column)：获取指定列的名称\"},\"8022\":{\"t\":\"getColumnLabel(int column)：获取指定列的别名\"},\"8023\":{\"t\":\"getColumnCount()：返回当前 ResultSet 对象中的列数。\"},\"8024\":{\"t\":\"getColumnTypeName(int column)：检索指定列的数据库特定的类型名称。\"},\"8025\":{\"t\":\"getColumnDisplaySize(int column)：指示指定列的最大标准宽度，以字符为单位。\"},\"8026\":{\"t\":\"isNullable(int column)：指示指定列中的值是否可以为 null。\"},\"8027\":{\"t\":\"isAutoIncrement(int column)：指示是否自动为指定列进行编号，这样这些列仍然是只读的。\"},\"8028\":{\"h\":\"6. ORM编程思想：object relational mapping\",\"a\":\"_6-orm编程思想-object-relational-mapping\"},\"8029\":{\"t\":\"一个数据表对应一个java类，表中的一条记录对应java类的一个对象，表中的一个字段对应java类的一个属性。\"},\"8030\":{\"h\":\"7. 图解查询操作的流程\",\"a\":\"_7-图解查询操作的流程\"},\"8031\":{\"t\":\"1-3-3\"},\"8032\":{\"t\":\"1-3-4\"},\"8033\":{\"h\":\"Ⅴ. 查询示例\",\"a\":\"v-查询示例\"},\"8034\":{\"t\":\"PreparedStatement的DQL查询示例。\"},\"8035\":{\"h\":\"1. 基本查询示例：查询custom表中的数据\",\"a\":\"_1-基本查询示例-查询custom表中的数据\"},\"8036\":{\"t\":\"这里用到了上章定义的JDBCUtils，并使用了ORM对象来处理查询的数据\"},\"8037\":{\"t\":\"public void testQuery1() { Connection conn = null; PreparedStatement ps = null; ResultSet resultSet = null; try { //1.获取连接对象 conn = JDBCUtils.getConnection(); //2.获取PreparedStatement对象并给占位符赋值 String sql = \\\"select id,name,email,birth from customers where id = ?\\\"; ps = conn.prepareStatement(sql); ps.setObject(1, 1); //3.执行查询,并返回结果集 resultSet = ps.executeQuery(); //4.处理结果集 if(resultSet.next()){ //4.1 获取当前这条数据的各个字段值 int id = resultSet.getInt(1); String name = resultSet.getString(2); String email = resultSet.getString(3); Date birth = resultSet.getDate(4); //4.2将数据封装为一个对象（推荐） Customer customer = new Customer(id, name, email, birth); System.out.println(customer); } } catch (Exception e) { e.printStackTrace(); }finally{ //5. 关闭资源 JDBCUtils.closeResource(conn, ps, resultSet); } } \"},\"8038\":{\"h\":\"1.1 JDBCUtils更新\",\"a\":\"_1-1-jdbcutils更新\"},\"8039\":{\"t\":\"上章封装的JDBCUtils工具中的关闭资源方法，只关闭了两个资源，而DQL操作需要额外关闭一个resultSet资源\"},\"8040\":{\"h\":\"1.2 Custom对象\",\"a\":\"_1-2-custom对象\"},\"8041\":{\"t\":\"根据ORM编程思想，需要创建一个Customer类（与数据表同名）来储存查询到的数据。\"},\"8042\":{\"t\":\"public class Customer{ private int id; private String name; private String email; private Date birth; public Customer() { super(); } public Customer(int id, String name, String email, Date birth) { super(); this.id = id; this.name = name; this.email = email; this.birth = birth; } ... } \"},\"8043\":{\"h\":\"2. 封装：针对custom表的通用查询操作\",\"a\":\"_2-封装-针对custom表的通用查询操作\"},\"8044\":{\"t\":\"该操作仅支持Custom表，且只能查询一行数据\"},\"8045\":{\"t\":\"public Customer queryForCustomers(String sql,Object...args){ Connection conn = null; PreparedStatement ps = null; ResultSet rs = null; try { //1.获取连接对象 conn = JDBCUtils.getConnection(); //2.获取PreparedStatement对象,并给占位符赋值 ps = conn.prepareStatement(sql); for(int i = 0;i < args.length;i++){ ps.setObject(i + 1, args[i]); } //3.执行查询,并返回结果集 rs = ps.executeQuery(); //3.1 获取结果集的元数据 :ResultSetMetaData ResultSetMetaData rsmd = rs.getMetaData(); //3.2 通过ResultSetMetaData获取结果集中的列数 int columnCount = rsmd.getColumnCount(); //4.循环获取结果集中每列的数据 if(rs.next()){ Customer cust = new Customer(); //4.1 处理结果集一行数据中的每一个列 for(int i = 0;i <columnCount;i++){ //4.2 获取列值 Object columValue = rs.getObject(i + 1); //4.3 获取每个列的列名 String columnLabel = rsmd.getColumnLabel(i + 1); //4.4 给cust对象指定的columnName属性，赋值为columValue：通过反射 Field field = Customer.class.getDeclaredField(columnLabel); field.setAccessible(true); field.set(cust, columValue); } //5. 返回结果集 return cust; } } catch (Exception e) { e.printStackTrace(); }finally{ //6.关闭资源 JDBCUtils.closeResource(conn, ps, rs); } return null; } \"},\"8046\":{\"h\":\"2.1 使用示例\",\"a\":\"_2-1-使用示例\"},\"8047\":{\"t\":\"String sql = \\\"select id,name,birth,email from customers where id = ?\\\"; Customer customer = queryForCustomers(sql, 13); System.out.println(customer); sql = \\\"select name,email from customers where name = ?\\\"; Customer customer1 = queryForCustomers(sql,\\\"周杰伦\\\"); System.out.println(customer1); \"},\"8048\":{\"h\":\"2.2 列的别名\",\"a\":\"_2-2-列的别名\"},\"8049\":{\"t\":\"问题：数据表中，列的名字和储存数据的对象中属性的名字是一一对应的，但是未必完全一样，比如：数据库中是用下划线分隔单词的，而Java中是驼峰分隔单词的。这时使用列名作为类的属性名就会报错（找不到该属性）。\"},\"8050\":{\"t\":\"解决方案：SQL语句中给列起别名，别名 = 数据类的属性名，然后把获取列名的方法改成获取列的别名的方法。 getColumnLabel代替 getColumnName.\"},\"8051\":{\"t\":\"补充：当列没有别名时，就默认把列名当成别名，所以不用担心没有起别名。\"},\"8052\":{\"h\":\"3. 通用查询操作封装：针对不同表\",\"a\":\"_3-通用查询操作封装-针对不同表\"},\"8053\":{\"t\":\"针对于不同的表的通用的查询操作，可返回表中的多条记录\"},\"8054\":{\"t\":\"public <T> List<T> getInstance(Class<T> clazz, String sql, Object... args) { Connection conn = null; PreparedStatement ps = null; ResultSet rs = null; try { //1.获取连接对象 conn = JDBCUtils.getConnection(); //2.获取PreparedStatement对象,并给占位符赋值 ps = conn.prepareStatement(sql); for (int i = 0; i < args.length; i++) { ps.setObject(i + 1, args[i]); } //3.执行查询,并返回结果集 rs = ps.executeQuery(); //3.1获取结果集的元数据 :ResultSetMetaData ResultSetMetaData rsmd = rs.getMetaData(); //3.2通过ResultSetMetaData获取结果集中的列数 int columnCount = rsmd.getColumnCount(); //4.创建集合对象，用来放结果集 ArrayList<T> list = new ArrayList<T>(); //5.循环获取每一行数据 while(rs.next()) { T t = clazz.newInstance(); //通过反射创建存放数据的对象 //6. 处理结果集一行数据中的每一个列:给t对象指定的属性赋值 for (int i = 0; i < columnCount; i++) { //6.1 获取列值 Object columValue = rs.getObject(i + 1); //6.2 获取每个列的列名 String columnLabel = rsmd.getColumnLabel(i + 1); //6.3 给t对象指定的columnName属性，赋值为columValue：通过反射 Field field = clazz.getDeclaredField(columnLabel); field.setAccessible(true); field.set(t, columValue); } //6.4 将循环拿到的每行数据对象，放到集合中 list.add(t); } //7. 返回结果集 return list; } catch (Exception e) { e.printStackTrace(); } finally { //6.关闭资源 JDBCUtils.closeResource(conn, ps, rs); } return null; } \"},\"8055\":{\"h\":\"3.1 使用示例\",\"a\":\"_3-1-使用示例\"},\"8056\":{\"t\":\"String sql = \\\"select id,name,email from customers where id < ?\\\"; List<Customer> list = getForList(Customer.class,sql,12); list.forEach(System.out::println); \"},\"8057\":{\"h\":\"3.2 查询不同的表： Class<T> 参数与返回值 List<T>\",\"a\":\"_3-2-查询不同的表-class-t-参数与返回值-list-t\"},\"8058\":{\"t\":\"为所有的表都创建一个ORM类，调用方法的时候，将类名.class传递进去，如上。\"},\"8059\":{\"t\":\"在方法内通过newInstance()创建数据对象。返回值的类型就是ORM类，也写成泛型的样式。\"},\"8060\":{\"h\":\"3.3 返回多条数据\",\"a\":\"_3-3-返回多条数据\"},\"8061\":{\"t\":\"利用集合和吧next放入循环来获取多条数据。\"},\"8062\":{\"t\":\"如果要创建只需要一行数据的方法，把while循环改成if判断，取消集合就可以了。\"},\"8063\":{\"h\":\"1-4. 操作Blob\"},\"8064\":{\"t\":\"使用PreparedStatement操作Blob数据，Blob数据，就是二进制数据，比如一张图片。\"},\"8065\":{\"h\":\"1. MySQL Blob类型\",\"a\":\"_1-mysql-blob类型\"},\"8066\":{\"t\":\"MySQL中，BLOB是一个二进制大型对象，是一个可以存储大量数据的容器，它能容纳不同大小的数据。\"},\"8067\":{\"t\":\"插入BLOB类型的数据必须使用PreparedStatement，因为BLOB类型的数据无法使用字符串拼接写的。\"},\"8068\":{\"t\":\"MySQL的四种BLOB类型(除了在存储的最大信息量上不同外，他们是等同的) \"},\"8069\":{\"t\":\"TinyBlob：255Byte\"},\"8070\":{\"t\":\"Blob：65KB【常用】\"},\"8071\":{\"t\":\"MediumBlob：16M\"},\"8072\":{\"t\":\"LongBlob：4G\"},\"8073\":{\"t\":\"注意：如果存储的文件过大，数据库的性能会下降。实际使用中根据需要存入的数据大小定义不同的BLOB类型。\"},\"8074\":{\"h\":\"2. 应用场景\",\"a\":\"_2-应用场景\"},\"8075\":{\"t\":\"常用来储存缩略图，使用<=65KB的Blob类型。\"},\"8076\":{\"h\":\"3. debug：文件大小的限制\",\"a\":\"_3-debug-文件大小的限制\"},\"8077\":{\"t\":\"MySQL配置文件中，会对数据的大小进行限制，默认是1M。\"},\"8078\":{\"t\":\"如果上传报错：xxx too large，就修改配置文件，\"},\"8079\":{\"t\":\"[mysqld] max_allowed_packet=16M \"},\"8080\":{\"h\":\"4. 相关方法\",\"a\":\"_4-相关方法\"},\"8081\":{\"t\":\"setBlob：插入Blob类型\"},\"8082\":{\"t\":\"getBlob：获取Blob类型的数据\"},\"8083\":{\"h\":\"5. 示例：向数据表插入Blob类型\",\"a\":\"_5-示例-向数据表插入blob类型\"},\"8084\":{\"t\":\"public void testInsert() throws Exception{ //1.使用封装好的JDBCUtiles获取连接对象 Connection conn = JDBCUtils.getConnection(); //2.设置SQL，获取PreparedStatement对象并给占位符赋值 String sql = \\\"insert into customers(name,email,birth,photo)values(?,?,?,?)\\\"; PreparedStatement ps = conn.prepareStatement(sql); ps.setObject(1,\\\"袁浩\\\"); ps.setObject(2, \\\"yuan@qq.com\\\"); ps.setObject(3,\\\"1992-09-08\\\"); //2.1 创建文件输入流 FileInputStream is = new FileInputStream(new File(\\\"girl.jpg\\\")); //2.2 调用setBlob方法,将文件输入流作为Blob类型插入数据表 ps.setBlob(4, is); //3.执行插入 ps.execute(); //4.关闭资源(数据库连接资源和文件流资源) JDBCUtils.closeResource(conn, ps); } \"},\"8085\":{\"t\":\"修改Blob类型的字段：和添加的步骤一样，只是SQL语句变成了Updata\"},\"8086\":{\"t\":\"删除Blob类型的字段：和删除普通字段的操作一样。\"},\"8087\":{\"h\":\"6. 示例：从数据表中读取Blob类型字段\",\"a\":\"_6-示例-从数据表中读取blob类型字段\"},\"8088\":{\"t\":\"以下代码省去了try...catch\"},\"8089\":{\"t\":\"public void testQuery(){ //1.使用封装好的JDBCUtiles获取连接对象 Connection conn = JDBCUtils.getConnection(); //2.设置SQL,获取PreparedStatement对象并给占位符赋值 String sql = \\\"select id,name,email,birth,photo from customers where id = ?\\\"; PreparedStatement ps = conn.prepareStatement(sql); ps.setInt(1, 21); //3.执行查询,并返回结果集 ResultSet rs = ps.executeQuery(); //4.处理结果集 if(rs.next()){ int id = rs.getInt(\\\"id\\\"); String name = rs.getString(\\\"name\\\"); String email = rs.getString(\\\"email\\\"); Date birth = rs.getDate(\\\"birth\\\"); Customer cust = new Customer(id, name, email, birth); System.out.println(cust); //4.1 将Blob类型的字段下载下来，以文件的方式保存在本地 Blob photo = rs.getBlob(\\\"photo\\\"); InputStream is = photo.getBinaryStream(); FileOutputStream fos = new FileOutputStream(\\\"zhangyuhao.jpg\\\"); byte[] buffer = new byte[1024]; int len; while((len = is.read(buffer)) != -1){ fos.write(buffer, 0, len); } } //5. 关闭资源 is.close(); JDBCUtils.closeResource(conn, ps, rs); } \"},\"8090\":{\"h\":\"1-5. 批量操作\"},\"8091\":{\"t\":\"update、delete、select天然就可以批量操作。这里主要指的批量操作是：批量insert（批量插入）。\"},\"8092\":{\"t\":\"当需要成批插入或者更新记录时，可以采用Java的批量更新机制，这一机制允许多条语句一次性提交给数据库批量处理。通常情况下比单独提交处理更有效率。\"},\"8093\":{\"h\":\"1. JDBC的批量处理相关的方法\",\"a\":\"_1-jdbc的批量处理相关的方法\"},\"8094\":{\"h\":\"1.1 addBatch(String)：积攒SQL语句\",\"a\":\"_1-1-addbatch-string-积攒sql语句\"},\"8095\":{\"t\":\"添加需要批量处理的SQL语句或是参数；\"},\"8096\":{\"t\":\"PreparedStatement.addBath(); \"},\"8097\":{\"h\":\"1.2 executeBatch()：执行batch\",\"a\":\"_1-2-executebatch-执行batch\"},\"8098\":{\"t\":\"执行批量处理语句；\"},\"8099\":{\"t\":\"PreparedStatement.addBath(); \"},\"8100\":{\"h\":\"1.3 clearBatch():清空batch\",\"a\":\"_1-3-clearbatch-清空batch\"},\"8101\":{\"t\":\"清空缓存的数据\"},\"8102\":{\"t\":\"PreparedStatement.addBath(); \"},\"8103\":{\"h\":\"2. 测试数据表\",\"a\":\"_2-测试数据表\"},\"8104\":{\"t\":\"向数据表中插入1百万条数据，数据表结构如下：\"},\"8105\":{\"t\":\"CREATE TABLE goods( id INT PRIMARY KEY AUTO_INCREMENT, NAME VARCHAR(20) ); \"},\"8106\":{\"h\":\"3. 方式1：使用Statement\",\"a\":\"_3-方式1-使用statement\"},\"8107\":{\"t\":\"【消耗400s】\"},\"8108\":{\"t\":\"不推荐，每循环一次，就要创建一次SQL\"},\"8109\":{\"t\":\"Connection conn = JDBCUtils.getConnection(); Statement st = conn.createStatement(); for(int i = 1;i <= 20000;i++){ String sql = \\\"insert into goods(name) values('name_' + \\\"+ i +\\\")\\\"; st.executeUpdate(sql); } \"},\"8110\":{\"h\":\"4. 方式2：使用PreparedStatement\",\"a\":\"_4-方式2-使用preparedstatement\"},\"8111\":{\"t\":\"【消耗：42s】\"},\"8112\":{\"t\":\"使用PreparedStatement，将SQL在循环外面创建。每次循环只是重新为占位符赋值。\"},\"8113\":{\"t\":\"Connection conn = JDBCUtils.getConnection(); String sql = \\\"insert into goods(name)values(?)\\\"; PreparedStatement ps = conn.prepareStatement(sql); for(int i = 1;i <= 20000;i++){ ps.setString(1, \\\"name_\\\" + i); ps.executeUpdate(); } long end = System.currentTimeMillis(); System.out.println(\\\"花费的时间为：\\\" + (end - start));//82340 JDBCUtils.closeResource(conn, ps); \"},\"8114\":{\"h\":\"5. 方式3：使用批处理\",\"a\":\"_5-方式3-使用批处理\"},\"8115\":{\"t\":\"【消耗：16s】\"},\"8116\":{\"t\":\"方式2，每循环一次，就要executeUpdate一次，跟服务器的交互太频繁。 可以使用批处理的方式，积攒一波SQL然后集中的去连接服务器执行。\"},\"8117\":{\"h\":\"5.1 开启批处理\",\"a\":\"_5-1-开启批处理\"},\"8118\":{\"t\":\"首先需要注意：MySQL的驱动要>=5.1.37才支持批处理\"},\"8119\":{\"t\":\"其次：mysql服务器默认是关闭批处理的，我们需要通过一个参数，让mysql开启批处理的支持。 ?rewriteBatchedStatements=true 写在配置文件的url后面\"},\"8120\":{\"h\":\"5.2 code\",\"a\":\"_5-2-code\"},\"8121\":{\"t\":\"public void testInsert1() throws Exception{ Connection conn = JDBCUtils.getConnection(); String sql = \\\"insert into goods(name)values(?)\\\"; PreparedStatement ps = conn.prepareStatement(sql); for(int i = 1;i <= 1000000;i++){ ps.setString(1, \\\"name_\\\" + i); //1.“攒”sql ps.addBatch(); if(i % 500 == 0){ //2.执行 ps.executeBatch(); //3.清空 ps.clearBatch(); } } long end = System.currentTimeMillis(); System.out.println(\\\"花费的时间为：\\\" + (end - start)); JDBCUtils.closeResource(conn, ps); } \"},\"8122\":{\"h\":\"6. 终极方案：批处理+手动提交\",\"a\":\"_6-终极方案-批处理-手动提交\"},\"8123\":{\"t\":\"【消耗5s】\"},\"8124\":{\"t\":\"每执行一次executeBatch，数据库就会自动提交，每提交一次，就要将输入写入数据库一次，比较花时间，可以开启事务，阻止自动提交，等循环执行完所有数据都通过executeBatch传完以后，再统一提交。\"},\"8125\":{\"t\":\"以下代码，省略了Exception处理。\"},\"8126\":{\"t\":\"public void testInsert3() { Connection conn = JDBCUtils.getConnection(); //设置不允许自动提交数据 conn.setAutoCommit(false); String sql = \\\"insert into goods(name)values(?)\\\"; PreparedStatement ps = conn.prepareStatement(sql); for(int i = 1;i <= 1000000;i++){ ps.setObject(1, \\\"name_\\\" + i); //1.\\\"攒\\\"sql ps.addBatch(); if(i % 500 == 0){ //2.执行batch ps.executeBatch(); //3.清空batch ps.clearBatch(); } } //手动提交数据 conn.commit(); JDBCUtils.closeResource(conn, ps); } \"},\"8127\":{\"h\":\"1-6. 事务\"},\"8128\":{\"t\":\"提示\"},\"8129\":{\"t\":\"详见：MySQL事务\"},\"8130\":{\"h\":\"1. JDBC事务处理方法\",\"a\":\"_1-jdbc事务处理方法\"},\"8131\":{\"t\":\"以下三个方法都会抛出SQLException异常\"},\"8132\":{\"h\":\"1.1 setAutoCommit：设置事务的自动提交\",\"a\":\"_1-1-setautocommit-设置事务的自动提交\"},\"8133\":{\"t\":\"参数false表示关闭自动提交，true表示开启（默认）。\"},\"8134\":{\"t\":\"Connection.setAutoCommit(boolean autoCommit) \"},\"8135\":{\"h\":\"1.2 commit：提交事务\",\"a\":\"_1-2-commit-提交事务\"},\"8136\":{\"t\":\"Connection.commit() \"},\"8137\":{\"h\":\"1.3 rollback：回滚事务\",\"a\":\"_1-3-rollback-回滚事务\"},\"8138\":{\"t\":\"Connection.rollback() \"},\"8139\":{\"h\":\"2. JDBC事务的处理流程\",\"a\":\"_2-jdbc事务的处理流程\"},\"8140\":{\"t\":\"数据一旦提交，就无法回滚了，因此应该将数据库连接，放到数据库更新方法的调用处，进行开启和关闭，而不应该放到数据库连接内部。\"},\"8141\":{\"t\":\"同时如果每个操作使用的是自己单独的连接，则无法保证事务，即同一个事务的多个操作必须在同一个连接下，因此数据库的连接和关闭必须放到数据库的操作方法调用处。\"},\"8142\":{\"h\":\"连接池\",\"a\":\"连接池\"},\"8143\":{\"t\":\"当启用了连接池后，关闭连接时，并不是真正的关闭了链接，而是将数据库连接对象放到了联机池中，如果对该数据库连接对象设置了关闭自动提交，就必须在关闭连接前，将设置改回去，以便别的操作使用该数据库连接对象。\"},\"8144\":{\"h\":\"3. JDBC事务示例\",\"a\":\"_3-jdbc事务示例\"},\"8145\":{\"h\":\"3.1 添加事务后：更改数据库通用的增删改方法\",\"a\":\"_3-1-添加事务后-更改数据库通用的增删改方法\"},\"8146\":{\"t\":\"public void updata(Connection conn,String sql,Object.. args){ PreparedStatement ps = null; try { // 1.获取PreparedStatement的实例 (或：预编译sql语句) ps = conn.prepareStatement(sql); // 2.填充占位符 for (int i = 0; i < args.length; i++) { ps.setObject(i + 1, args[i]); } // 3.执行sql语句 ps.execute(); //该操作执行后并不会提交 } catch (Exception e) { e.printStackTrace(); } finally { // 4.关闭资源:第一个参数设置为null，不要关闭数据库连接 JDBCUtils.closeResource(null, ps); } } \"},\"8147\":{\"h\":\"3.2 DML操作示例：使用事务\",\"a\":\"_3-2-dml操作示例-使用事务\"},\"8148\":{\"t\":\"public void testJDBCTransaction() { Connection conn = null; try { // 1.获取数据库连接 conn = JDBCUtils.getConnection(); // 2.开启事务 conn.setAutoCommit(false); // 3.进行数据库操作 String sql1 = \\\"update user_table set balance = balance - 100 where user = ?\\\"; update(conn, sql1, \\\"AA\\\"); // 模拟网络异常 //System.out.println(10 / 0); String sql2 = \\\"update user_table set balance = balance + 100 where user = ?\\\"; update(conn, sql2, \\\"BB\\\"); // 4.若没有异常，则提交事务 conn.commit(); } catch (Exception e) { e.printStackTrace(); // 5.若有异常，则回滚事务 try { conn.rollback(); } catch (SQLException e1) { e1.printStackTrace(); } } finally { try { //6.恢复每次DML操作的自动提交功能：用于连接池 conn.setAutoCommit(true); } catch (SQLException e) { e.printStackTrace(); } //7.关闭连接：将数据库连接关闭 JDBCUtils.closeResource(conn, null, null); } } \"},\"8149\":{\"h\":\"3. JDBC控制隔离级别\",\"a\":\"_3-jdbc控制隔离级别\"},\"8150\":{\"t\":\"在JDBC中，即JAVA端，也能控制隔离级别，不过实际开发中，比如在框架中，都是通过配置文件进行控制的。\"},\"8151\":{\"t\":\"以下两个方法都会抛出SQLException\"},\"8152\":{\"h\":\"3.1 getTransactionIsolation：获取当前隔离级别\",\"a\":\"_3-1-gettransactionisolation-获取当前隔离级别\"},\"8153\":{\"t\":\"Connection.getTransactionIsolation() \"},\"8154\":{\"h\":\"3.2 setTransactionIsolation：设置数据库隔离级别\",\"a\":\"_3-2-settransactionisolation-设置数据库隔离级别\"},\"8155\":{\"t\":\"参数是数字，也可以是隔离级别常量，对照如下：\"},\"8156\":{\"t\":\"Connection.TRANSACTION_READ_UNCOMMITTED =1\"},\"8157\":{\"t\":\"Connection.TRANSACTION_READ_COMMITTED = 2；\"},\"8158\":{\"t\":\"Connection.TRANSACTION_REPEATABLE_READ = 3；\"},\"8159\":{\"t\":\"Connection.TRANSACTION_SERIALIZABLE = 4；\"},\"8160\":{\"t\":\"Connection.setTransactionIsolation(int level) \"},\"8161\":{\"h\":\"4. JDBC控制隔离级别示例\",\"a\":\"_4-jdbc控制隔离级别示例\"},\"8162\":{\"t\":\"public void testTransactionSelect() throws Exception{ //1.获取连接对象 Connection conn = JDBCUtils.getConnection(); //2.获取当前连接的隔离级别 System.out.println(conn.getTransactionIsolation()); //3.设置数据库的隔离级别： conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED); //4.取消自动提交数据 conn.setAutoCommit(false); String sql = \\\"select user,password,balance from user_table where user = ?\\\"; //5.调用查询方法 User user = getInstance(conn, User.class, sql, \\\"CC\\\"); System.out.println(user); } \"},\"8163\":{\"h\":\"1-7. DAO\"},\"8164\":{\"h\":\"Ⅰ. DAO介绍\",\"a\":\"i-dao介绍\"},\"8165\":{\"h\":\"1. 说明\",\"a\":\"_1-说明\"},\"8166\":{\"t\":\"DAO：Data Access Object：访问数据信息的类和接口。\"},\"8167\":{\"t\":\"本质：就是对JDBC中一些列基本常见的操作的封装。包括了对数据表的CRUD（Create、Retrival、Update、Delete）操作，有时也称作：BaseDAO。\"},\"8168\":{\"t\":\"对于具体的数据表（和业务耦合）来说，要先创建相关的数据表操作类，然后继承DAO接口，重写DAO里面的方法，用来专门操作某张表。\"},\"8169\":{\"h\":\"2. 作用\",\"a\":\"_2-作用\"},\"8170\":{\"t\":\"为了实现功能的模块化，更有利于代码的维护和升级。\"},\"8171\":{\"h\":\"3. DAO的使用流程\",\"a\":\"_3-dao的使用流程\"},\"8172\":{\"t\":\"①定义DAO接口：BaseDao，里面包含了所有JDBC的基本操作方法，可自己拿来用\"},\"8173\":{\"t\":\"②定义数据表的接口，用来规范数据表的操作，如CustomerDao【可省略】\"},\"8174\":{\"t\":\"③创建数据表的实现，用来继承BaseDao接口，并实现CustomerDao接口 额外还需要一个查询结果的储存类，和一个用来连接和关闭资源的JDBC工具类。\"},\"8175\":{\"h\":\"Ⅱ. DAO的实现类\",\"a\":\"ii-dao的实现类\"},\"8176\":{\"h\":\"1. BaseDao设计\",\"a\":\"_1-basedao设计\"},\"8177\":{\"h\":\"1.1 类\",\"a\":\"_1-1-类\"},\"8178\":{\"t\":\"设置为abstract类，只能继承和实现，不能实例化\"},\"8179\":{\"h\":\"1.2 需要实现的基本数据表操作\",\"a\":\"_1-2-需要实现的基本数据表操作\"},\"8180\":{\"t\":\"update：DML，通用的增删改操作【可使用事务】\"},\"8181\":{\"t\":\"getInstance：用来返回一条记录的通用查询操作【可使用事务】\"},\"8182\":{\"t\":\"getForList：用来返回数据表中多条记录构成的集合【可使用事务】\"},\"8183\":{\"t\":\"getValue：用于特殊查询的通用方法【可使用事务】\"},\"8184\":{\"h\":\"2. 需要实现的特殊操作\",\"a\":\"_2-需要实现的特殊操作\"},\"8185\":{\"t\":\"在getForList和getValue方法中，我们需要将查询到的结果，放到一个ORM类中（该类同时也表名）。\"},\"8186\":{\"h\":\"2.1 方案1：定义ORM类的属性\",\"a\":\"_2-1-方案1-定义orm类的属性\"},\"8187\":{\"t\":\"在数据表的实现类中，定义当前类操作的ORM类名，作为属性，查询的时候传递该属性。\"},\"8188\":{\"t\":\"这个方法过于繁琐，每个实现类中都要定义一次。\"},\"8189\":{\"h\":\"2.2 方案2：通过泛型传递ORM类名\",\"a\":\"_2-2-方案2-通过泛型传递orm类名\"},\"8190\":{\"t\":\"在数据表实现类继承BaseDao时，直接指定BaseDao的泛型为ORM类名。\"},\"8191\":{\"t\":\"然后在BaseDao类中，获取该泛型作为属性clazz的值。\"},\"8192\":{\"t\":\"在需要使用ORM类的地方，直接使用clazz属性即可，省去了传递Class<T> clazz参数，具体获取方式见代码\"},\"8193\":{\"h\":\"3. JDBC工具类：JDBCUtils\",\"a\":\"_3-jdbc工具类-jdbcutils\"},\"8194\":{\"t\":\"用于操作数据库的工具类：JDBCUtils\"},\"8195\":{\"t\":\"不要将这个类中的方法都放到BaseDao中。而是独作为一个额外的工具类，因为设计到事务操作，需要将数据库的链接和关闭操作再数据表实现类的调用处执行。\"},\"8196\":{\"t\":\"该类实现的基本功能为：\"},\"8197\":{\"t\":\"getConnection：获取数据库连接对象\"},\"8198\":{\"t\":\"closeResource(Connection conn,Statement ps)：关闭数据库连接资源和Statement资源\"},\"8199\":{\"t\":\"closeResource(Connection conn,Statement ps,ResultSet rs)：额外多关闭一个查询结果集资源\"},\"8200\":{\"h\":\"4. BaseDao.java代码参考\",\"a\":\"_4-basedao-java代码参考\"},\"8201\":{\"t\":\"public abstract class BaseDAO<T> { //============================== 1、获取泛型值 ========================= private Class<T> clazz = null; { //获取当前BaseDAO的子类继承的父类中的泛型 Type genericSuperclass = this.getClass().getGenericSuperclass(); ParameterizedType paramType = (ParameterizedType) genericSuperclass; //获取了父类的泛型参数 Type[] typeArguments = paramType.getActualTypeArguments(); clazz = (Class<T>) typeArguments[0];//泛型的第一个参数 } //=========================== 2、update：DML方法 ====================== public int update(Connection conn, String sql, Object... args) { PreparedStatement ps = null; try { // 1.预编译sql语句，返回PreparedStatement的实例 ps = conn.prepareStatement(sql); // 2.填充占位符 for (int i = 0; i < args.length; i++) { ps.setObject(i + 1, args[i]);// 小心参数声明错误！！ } // 3.执行 return ps.executeUpdate(); } catch (Exception e) { e.printStackTrace(); } finally { // 4.资源的关闭 JDBCUtils.closeResource(null, ps); } return 0; } //============== 3、getInstance：返回一条记录的DQL方法 ================= public T getInstance(Connection conn, String sql, Object... args) { PreparedStatement ps = null; ResultSet rs = null; try { ps = conn.prepareStatement(sql); for (int i = 0; i < args.length; i++) { ps.setObject(i + 1, args[i]); } rs = ps.executeQuery(); // 获取结果集的元数据 :ResultSetMetaData ResultSetMetaData rsmd = rs.getMetaData(); // 通过ResultSetMetaData获取结果集中的列数 int columnCount = rsmd.getColumnCount(); if (rs.next()) { T t = clazz.newInstance(); // 处理结果集一行数据中的每一个列 for (int i = 0; i < columnCount; i++) { // 获取列值 Object columValue = rs.getObject(i + 1); // 获取每个列的列名 String columnLabel = rsmd.getColumnLabel(i + 1); // 给t对象指定的columnName属性，赋值为columValue：通过反射 Field field = clazz.getDeclaredField(columnLabel); field.setAccessible(true); field.set(t, columValue); } return t; } } catch (Exception e) { e.printStackTrace(); } finally { JDBCUtils.closeResource(null, ps, rs); } return null; } //============== 4、getForList：返回多条记录的DQL方法 ================= public List<T> getForList(Connection conn, String sql, Object... args) { PreparedStatement ps = null; ResultSet rs = null; try { ps = conn.prepareStatement(sql); for (int i = 0; i < args.length; i++) { ps.setObject(i + 1, args[i]); } rs = ps.executeQuery(); // 获取结果集的元数据 :ResultSetMetaData ResultSetMetaData rsmd = rs.getMetaData(); // 通过ResultSetMetaData获取结果集中的列数 int columnCount = rsmd.getColumnCount(); // 创建集合对象 ArrayList<T> list = new ArrayList<T>(); while (rs.next()) { T t = clazz.newInstance(); // 处理结果集一行数据中的每一个列:给t对象指定的属性赋值 for (int i = 0; i < columnCount; i++) { // 获取列值 Object columValue = rs.getObject(i + 1); // 获取每个列的列名 String columnLabel = rsmd.getColumnLabel(i + 1); // 给t对象指定的columnName属性，赋值为columValue：通过反射 Field field = clazz.getDeclaredField(columnLabel); field.setAccessible(true); field.set(t, columValue); } list.add(t); } return list; } catch (Exception e) { e.printStackTrace(); } finally { JDBCUtils.closeResource(null, ps, rs); } return null; } //============== 5、getValue：查询特殊值的DQL方法 ================= public <E> E getValue(Connection conn,String sql,Object...args){ PreparedStatement ps = null; ResultSet rs = null; try { ps = conn.prepareStatement(sql); for(int i = 0;i < args.length;i++){ ps.setObject(i + 1, args[i]); } rs = ps.executeQuery(); if(rs.next()){ return (E) rs.getObject(1); } } catch (SQLException e) { e.printStackTrace(); }finally{ JDBCUtils.closeResource(null, ps, rs); } return null; } } \"},\"8202\":{\"h\":\"Ⅲ. BaseDao的使用\",\"a\":\"iii-basedao的使用\"},\"8203\":{\"h\":\"1. 创建数据表实现接口：CustomerDAO\",\"a\":\"_1-创建数据表实现接口-customerdao\"},\"8204\":{\"t\":\"根据业务需求编写接口\"},\"8205\":{\"t\":\"public interface CustomerDAO{ //1.插入数据,通过ORM类 Customer void insert(Connection conn,Customer cust); //2.针对指定的id，删除表中的一条记录 void deleteById(Connection conn,int id); //3.针对 ORM对象，去修改数据表中指定的记录 void update(Connection conn,Customer cust); //4.针对指定的id查询得到对应的Customer对象 Customer getCustomerById(Connection conn,int id); //5.查询表中的所有记录构成的集合 List<Customer> getAll(Connection conn); //6.返回数据表中的数据的条目数 Long getCount(Connection conn); //7.返回数据表中最大的生日 Date getMaxBirth(Connection conn); } \"},\"8206\":{\"h\":\"2. 创建数据表实现类：CustomerDAOImpl\",\"a\":\"_2-创建数据表实现类-customerdaoimpl\"},\"8207\":{\"t\":\"public class CustomerDAOImpl extends BaseDAO<Customer> implements CustomerDAO{ //1.插入数据,通过ORM类 Customer public void insert(Connection conn, Customer cust) { String sql = \\\"insert into customers(name,email,birth)values(?,?,?)\\\"; update(conn, sql,cust.getName(),cust.getEmail(),cust.getBirth()); } //2.针对指定的id，删除表中的一条记录 public void deleteById(Connection conn, int id) { String sql = \\\"delete from customers where id = ?\\\"; update(conn, sql, id); } //3.针对 ORM对象，去修改数据表中指定的记录 public void update(Connection conn, Customer cust) { String sql = \\\"update customers set name = ?,email = ?,birth = ? where id = ?\\\"; update(conn, sql,cust.getName(),cust.getEmail(),cust.getBirth(),cust.getId()); } //4.针对指定的id查询得到对应的Customer对象 public Customer getCustomerById(Connection conn, int id) { String sql = \\\"select id,name,email,birth from customers where id = ?\\\"; Customer customer = getInstance(conn, sql,id); return customer; } //5.查询表中的所有记录构成的集合 public List<Customer> getAll(Connection conn) { String sql = \\\"select id,name,email,birth from customers\\\"; List<Customer> list = getForList(conn, sql); return list; } //6.返回数据表中的数据的条目数 public Long getCount(Connection conn) { String sql = \\\"select count(*) from customers\\\"; return getValue(conn, sql); } //7.返回数据表中最大的生日 public Date getMaxBirth(Connection conn) { String sql = \\\"select max(birth) from customers\\\"; return getValue(conn, sql); } } \"},\"8208\":{\"h\":\"3. 使用CustomerDAOImpl\",\"a\":\"_3-使用customerdaoimpl\"},\"8209\":{\"t\":\"可以创建一个CustomerDAOImplTest用来测试CustomerDAOImpl\"},\"8210\":{\"t\":\"public class CustomerDAOImplTest { private CustomerDAOImpl dao = new CustomerDAOImpl(); //1.测试添加 public void testInsert() { Connection conn = null; try { conn = JDBCUtils.getConnection(); Customer cust = new Customer(1, \\\"于小飞\\\", \\\"xiaofei@126.com\\\",new Date(43534646435L)); dao.insert(conn, cust); System.out.println(\\\"添加成功\\\"); } catch (Exception e) { e.printStackTrace(); }finally{ JDBCUtils.closeResource(conn, null); } } //2.测试删除 public void testDeleteById() { Connection conn = null; try { conn = JDBCUtils.getConnection(); dao.deleteById(conn, 13); System.out.println(\\\"删除成功\\\"); } catch (Exception e) { e.printStackTrace(); }finally{ JDBCUtils.closeResource(conn, null); } } //3.测试更新 public void testUpdateConnectionCustomer() { Connection conn = null; try { conn = JDBCUtils.getConnection(); Customer cust = new Customer(18,\\\"贝多芬\\\",\\\"beiduofen@126.com\\\",new Date(453465656L)); dao.update(conn, cust); System.out.println(\\\"修改成功\\\"); } catch (Exception e) { e.printStackTrace(); }finally{ JDBCUtils.closeResource(conn, null); } } //4.测试单行数据查询 public void testGetCustomerById() { Connection conn = null; try { conn = JDBCUtils.getConnection(); Customer cust = dao.getCustomerById(conn, 19); System.out.println(cust); } catch (Exception e) { e.printStackTrace(); }finally{ JDBCUtils.closeResource(conn, null); } } //5.测试多行数据查询 public void testGetAll() { Connection conn = null; try { conn = JDBCUtils.getConnection(); List<Customer> list = dao.getAll(conn); list.forEach(System.out::println); System.out.println(\\\"\\\"); } catch (Exception e) { e.printStackTrace(); }finally{ JDBCUtils.closeResource(conn, null); } } //6.测试特殊查询：获取数据表的count public void testGetCount() { Connection conn = null; try { conn = JDBCUtils.getConnection(); Long count = dao.getCount(conn); System.out.println(\\\"表中的记录数为：\\\" + count); } catch (Exception e) { e.printStackTrace(); }finally{ JDBCUtils.closeResource(conn, null); } } //7.测试特殊查询：获取最大的生日 public void testGetMaxBirth() { Connection conn = null; try { conn = JDBCUtils.getConnection(); Date maxBirth = dao.getMaxBirth(conn); System.out.println(\\\"最大的生日为：\\\" + maxBirth); } catch (Exception e) { e.printStackTrace(); }finally{ JDBCUtils.closeResource(conn, null); } } } \"},\"8211\":{\"h\":\"1-8. 数据库连接池\"},\"8212\":{\"h\":\"Ⅰ. 连接池介绍\",\"a\":\"i-连接池介绍\"},\"8213\":{\"h\":\"1. JDBC数据连接池的必要性\",\"a\":\"_1-jdbc数据连接池的必要性\"},\"8214\":{\"h\":\"1.1 在使用开发基于数据库的web程序时，传统的模式基本是按以下步骤：\",\"a\":\"_1-1-在使用开发基于数据库的web程序时-传统的模式基本是按以下步骤\"},\"8215\":{\"t\":\"在主程序（如servlet、beans）中建立数据库连接\"},\"8216\":{\"t\":\"进行sql操作\"},\"8217\":{\"t\":\"断开数据库连接\"},\"8218\":{\"h\":\"1.2 这种模式开发，存在的问题:\",\"a\":\"_1-2-这种模式开发-存在的问题\"},\"8219\":{\"t\":\"普通的JDBC数据库连接使用 数据库驱动来获取，每次向数据库建立连接的时候都要将 Connection 加载到内存中，再验证用户名和密码(得花费0.05s～1s的时间)。需要数据库连接的时候，就向数据库要求一个，执行完成后再断开连接。 \"},\"8220\":{\"t\":\"这样的方式将会消耗大量的资源和时间。\"},\"8221\":{\"t\":\"数据库的连接资源并没有得到很好的重复利用。若同时有几百人甚至几千人在线，频繁的进行数据库连接操作将占用很多的系统资源，严重的甚至会造成服务器的崩溃。\"},\"8222\":{\"t\":\"对于每一次数据库连接，使用完后都得断开。否则，如果程序出现异常而未能关闭，将会导致数据库系统中的内存泄漏（未关闭数据库连接，导致连接一直存在，最终将导致重启数据库。\"},\"8223\":{\"t\":\"这种开发不能控制被创建的连接对象数，系统资源会被毫无顾及的分配出去，如连接过多，也可能导致内存泄漏，服务器崩溃。\"},\"8224\":{\"h\":\"2. 数据库连接池技术介绍\",\"a\":\"_2-数据库连接池技术介绍\"},\"8225\":{\"t\":\"为解决传统开发中的数据库连接问题，可以采用数据库连接池技术。\"},\"8226\":{\"h\":\"2.1 数据库连接池的基本思想\",\"a\":\"_2-1-数据库连接池的基本思想\"},\"8227\":{\"t\":\"就是为数据库连接建立一个“缓冲池”。预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从“缓冲池”中取出一个，使用完毕之后再放回去。\"},\"8228\":{\"t\":\"数据库连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个。\"},\"8229\":{\"h\":\"2.2 工作方式\",\"a\":\"_2-2-工作方式\"},\"8230\":{\"t\":\"数据库连接池在初始化时将创建一定数量的数据库连接放到连接池中，这些数据库连接的数量是由最小数据库连接数来设定的。无论这些数据库连接是否被使用，连接池都将一直保证至少拥有这么多的连接数量。连接池的最大数据库连接数量限定了这个连接池能占有的最大连接数，当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列中。\"},\"8231\":{\"t\":\"1-8-1\"},\"8232\":{\"h\":\"3. 数据库连接池工作原理\",\"a\":\"_3-数据库连接池工作原理\"},\"8233\":{\"t\":\"连接数据库：从连接池拿出一个连接对象\"},\"8234\":{\"t\":\"断开数据库：将连接对象放回连接池\"},\"8235\":{\"t\":\"1-8-2\"},\"8236\":{\"h\":\"4. 数据库连接池的优点\",\"a\":\"_4-数据库连接池的优点\"},\"8237\":{\"t\":\"资源重用：由于数据库连接得以重用，避免了频繁创建，释放连接引起的大量性能开销。在减少系统消耗的基础上，另一方面也增加了系统运行环境的平稳性。\"},\"8238\":{\"t\":\"更快的系统反应速度：数据库连接池在初始化过程中，往往已经创建了若干数据库连接置于连接池中备用。此时连接的初始化工作均已完成。对于业务请求处理而言，直接利用现有可用连接，避免了数据库连接初始化和释放过程的时间开销，从而减少了系统的响应时间\"},\"8239\":{\"t\":\"新的资源分配手段：对于多应用共享同一数据库的系统而言，可在应用层通过数据库连接池的配置，实现某一应用最大可用数据库连接数的限制，避免某一应用独占所有的数据库资源\"},\"8240\":{\"t\":\"统一的连接管理，避免数据库连接泄漏：在较为完善的数据库连接池实现中，可根据预先的占用超时设定，强制回收被占用连接，从而避免了常规数据库连接操作中可能出现的资源泄露\"},\"8241\":{\"h\":\"5. 开源的数据库连接池技术\",\"a\":\"_5-开源的数据库连接池技术\"},\"8242\":{\"t\":\"JDBC 的数据库连接池使用 javax.sql.DataSource 来表示，DataSource 只是一个接口，该接口通常由服务器(Weblogic, WebSphere, Tomcat)提供实现，也有一些开源组织提供实现。\"},\"8243\":{\"t\":\"DBCP 是Apache提供的数据库连接池。tomcat 服务器自带dbcp数据库连接池。速度相对c3p0较快，但因自身存在BUG，Hibernate3已不再提供支持。\"},\"8244\":{\"t\":\"C3P0 是一个开源组织提供的一个数据库连接池，速度相对较慢，稳定性还可以。hibernate官方推荐使用\"},\"8245\":{\"t\":\"Proxool 是sourceforge下的一个开源项目数据库连接池，有监控连接池状态的功能，稳定性较c3p0差一点\"},\"8246\":{\"t\":\"BoneCP 是一个开源组织提供的数据库连接池，速度快\"},\"8247\":{\"t\":\"Druid 是阿里提供的数据库连接池，据说是集DBCP 、C3P0 、Proxool 优点于一身的数据库连接池，但是速度不确定是否有BoneCP快【常用】\"},\"8248\":{\"t\":\"DataSource用来取代DriverManager来获取Connection，获取速度快，同时可以大幅度提高数据库访问速度。\"},\"8249\":{\"h\":\"注意事项\",\"a\":\"注意事项\"},\"8250\":{\"t\":\"数据源和数据库连接不同，数据源无需创建多个，它是产生数据库连接的工厂，因此整个应用只需要一个数据源即可。\"},\"8251\":{\"t\":\"当数据库访问结束后，程序还是像以前一样关闭数据库连接：conn.close(); 但conn.close()并没有关闭数据库的物理连接，它仅仅把数据库连接释放，归还给了数据库连接池。\"},\"8252\":{\"h\":\"Ⅱ. Druid：德鲁伊\",\"a\":\"ii-druid-德鲁伊\"},\"8253\":{\"t\":\"Druid是阿里巴巴开源平台上一个数据库连接池实现，它结合了C3P0、DBCP、Proxool等DB池的优点，同时加入了日志监控，可以很好的监控DB池连接和SQL的执行情况，可以说是针对监控而生的DB连接池，可以说是目前最好的连接池之一。\"},\"8254\":{\"h\":\"1. 加载驱动（jar包）\",\"a\":\"_1-加载驱动-jar包\"},\"8255\":{\"t\":\"下载页\"},\"8256\":{\"t\":\"github页\"},\"8257\":{\"t\":\"下载jar包，并将jar包导入项目\"},\"8258\":{\"h\":\"2. 使用德鲁伊\",\"a\":\"_2-使用德鲁伊\"},\"8259\":{\"t\":\"只考虑使用配置文件获取Druid连接池的方法，如下：\"},\"8260\":{\"t\":\"...... import javax.sql.DataSource; import com.alibaba.druid.pool.DruidDataSourceFactory; public void getConnection() throws Exception{ Properties pros = new Properties(); InputStream is = ClassLoader.getSystemClassLoader() .getResourceAsStream(\\\"druid.properties\\\"); //1.加载配置文件 pros.load(is); //2.使用工厂方法，创建连接池，参数是配置文件输入流 DataSource source = DruidDataSourceFactory.createDataSource(pros); //3.获取数据库连接对象, Connection conn = source.getConnection(); } \"},\"8261\":{\"h\":\"3. 配置文件\",\"a\":\"_3-配置文件\"},\"8262\":{\"t\":\"src/druid.properties\"},\"8263\":{\"t\":\"url=jdbc:mysql://localhost:3306/test?rewriteBatchedStatements=true username=root password=123456 driverClassName=com.mysql.jdbc.Driver initialSize=10 //初始化数据库连接池时连接的数量 maxActive=20 //最大连接池数量 maxWait=1000 //获取连接时最大等待时间，单位毫秒。 filters=wall //跟日志相关的配置 \"},\"8264\":{\"h\":\"4. 配置项\",\"a\":\"_4-配置项\"},\"8265\":{\"t\":\"配置项如下：\"},\"8266\":{\"t\":\"配置\"},\"8267\":{\"t\":\"缺省\"},\"8268\":{\"t\":\"说明\"},\"8269\":{\"t\":\"name\"},\"8270\":{\"t\":\"配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。 如果没有配置，将会生成一个名字，格式是：”DataSource-” + System.identityHashCode(this)\"},\"8271\":{\"t\":\"url\"},\"8272\":{\"t\":\"连接数据库的url，不同数据库不一样。例如：mysql : jdbc:mysql://10.20.153.104:3306/druid2 oracle : jdbc:oracle:thin:@10.20.149.85:1521:ocnauto\"},\"8273\":{\"t\":\"username\"},\"8274\":{\"t\":\"连接数据库的用户名\"},\"8275\":{\"t\":\"password\"},\"8276\":{\"t\":\"连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细看这里\"},\"8277\":{\"t\":\"driverClassName\"},\"8278\":{\"t\":\"根据url自动识别 这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)\"},\"8279\":{\"t\":\"initialSize\"},\"8280\":{\"t\":\"0\"},\"8281\":{\"t\":\"初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时\"},\"8282\":{\"t\":\"maxActive\"},\"8283\":{\"t\":\"8\"},\"8284\":{\"t\":\"最大连接池数量\"},\"8285\":{\"t\":\"maxIdle\"},\"8286\":{\"t\":\"8\"},\"8287\":{\"t\":\"已经不再使用，配置了也没效果\"},\"8288\":{\"t\":\"minIdle\"},\"8289\":{\"t\":\"最小连接池数量\"},\"8290\":{\"t\":\"maxWait\"},\"8291\":{\"t\":\"获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。\"},\"8292\":{\"t\":\"poolPreparedStatements\"},\"8293\":{\"t\":\"false\"},\"8294\":{\"t\":\"是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。\"},\"8295\":{\"t\":\"maxOpenPreparedStatements\"},\"8296\":{\"t\":\"-1\"},\"8297\":{\"t\":\"要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100\"},\"8298\":{\"t\":\"validationQuery\"},\"8299\":{\"t\":\"用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。\"},\"8300\":{\"t\":\"testOnBorrow\"},\"8301\":{\"t\":\"true\"},\"8302\":{\"t\":\"申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。\"},\"8303\":{\"t\":\"testOnReturn\"},\"8304\":{\"t\":\"false\"},\"8305\":{\"t\":\"归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能\"},\"8306\":{\"t\":\"testWhileIdle\"},\"8307\":{\"t\":\"false\"},\"8308\":{\"t\":\"建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。\"},\"8309\":{\"t\":\"timeBetweenEvictionRunsMillis\"},\"8310\":{\"t\":\"有两个含义： 1)Destroy线程会检测连接的间隔时间2)testWhileIdle的判断依据，详细看testWhileIdle属性的说明\"},\"8311\":{\"t\":\"numTestsPerEvictionRun\"},\"8312\":{\"t\":\"不再使用，一个DruidDataSource只支持一个EvictionRun\"},\"8313\":{\"t\":\"minEvictableIdleTimeMillis\"},\"8314\":{\"t\":\"connectionInitSqls\"},\"8315\":{\"t\":\"物理连接初始化的时候执行的sql\"},\"8316\":{\"t\":\"exceptionSorter\"},\"8317\":{\"t\":\"根据dbType自动识别 当数据库抛出一些不可恢复的异常时，抛弃连接\"},\"8318\":{\"t\":\"filters\"},\"8319\":{\"t\":\"属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall\"},\"8320\":{\"t\":\"proxyFilters\"},\"8321\":{\"t\":\"类型是List，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系\"},\"8322\":{\"h\":\"5. JDBCUtils\",\"a\":\"_5-jdbcutils\"},\"8323\":{\"t\":\"连接池应该放到之前建立的JDBC功能类：JDBCUtils中。\"},\"8324\":{\"t\":\"private static DataSource source; static{ try { Properties pros = new Properties(); InputStream is = ClassLoader.getSystemClassLoader() .getResourceAsStream(\\\"druid.properties\\\"); pros.load(is); source = DruidDataSourceFactory.createDataSource(pros); } catch (Exception e) { e.printStackTrace(); } } public static Connection getConnection3() throws SQLException{ Connection conn = source.getConnection(); return conn; //返回一个数据库连接，从池子里拿出一个数据库连接 } \"},\"8325\":{\"h\":\"6. 使用示例\",\"a\":\"_6-使用示例\"},\"8326\":{\"t\":\"public void testGetCustomerById() { Connection conn = null; try { conn = JDBCUtils.getConnection3(); Customer cust = dao.getCustomerById(conn, 19); System.out.println(cust); } catch (Exception e) { e.printStackTrace(); }finally{ JDBCUtils.closeResource(conn, null); } } \"},\"8327\":{\"h\":\"1-9. DBUtils\"},\"8328\":{\"h\":\"Ⅰ. Apache-DBUtils\",\"a\":\"i-apache-dbutils\"},\"8329\":{\"h\":\"1. DBUtils介绍\",\"a\":\"_1-dbutils介绍\"},\"8330\":{\"t\":\"DBUtils就跟之前封装的Dao一样，这个是Apache提供的。\"},\"8331\":{\"t\":\"commons-dbutils 是 Apache 组织提供的一个开源 JDBC工具类库，它是对JDBC的简单封装，学习成本极低，并且使用dbutils能极大简化jdbc编码的工作量，同时也不会影响程序的性能。\"},\"8332\":{\"h\":\"2. 驱动\",\"a\":\"_2-驱动\"},\"8333\":{\"t\":\"下载包并导入。\"},\"8334\":{\"h\":\"3. API介绍\",\"a\":\"_3-api介绍\"},\"8335\":{\"t\":\"org.apache.commons.dbutils.QueryRunner【BaseDao】\"},\"8336\":{\"t\":\"org.apache.commons.dbutils.ResultSetHandler【处理不同的查询结果集，由不同子类实现】\"},\"8337\":{\"t\":\"工具类：org.apache.commons.dbutils.DbUtils【JDBCUtils，但不能连接】\"},\"8338\":{\"h\":\"4. DbUtils类：工具类API（取代自己写的JDBCUtils）\",\"a\":\"_4-dbutils类-工具类api-取代自己写的jdbcutils\"},\"8339\":{\"t\":\"提供如关闭连接、装载JDBC驱动程序等常规工作的工具类，里面的所有方法都是静态的。主要方法如下：\"},\"8340\":{\"t\":\"public static void close(…) throws java.sql.SQLException： DbUtils类提供了三个重载的关闭方法。这些方法检查所提供的参数是不是NULL，如果不是的话，它们就关闭Connection、Statement和ResultSet。\"},\"8341\":{\"t\":\"public static void closeQuietly(…): 这一类方法不仅能在Connection、Statement和ResultSet为NULL情况下避免关闭，还能隐藏一些在程序中抛出的SQLEeception。\"},\"8342\":{\"t\":\"public static void commitAndClose(Connection conn)throws SQLException： 用来提交连接的事务，然后关闭连接\"},\"8343\":{\"t\":\"public static void commitAndCloseQuietly(Connection conn)： 用来提交连接，然后关闭连接，并且在关闭连接时不抛出SQL异常。\"},\"8344\":{\"t\":\"public static void rollback(Connection conn)throws SQLException：允许conn为null，因为方法内部做了判断\"},\"8345\":{\"t\":\"public static void rollbackAndClose(Connection conn)throws SQLException\"},\"8346\":{\"t\":\"rollbackAndCloseQuietly(Connection)\"},\"8347\":{\"t\":\"public static boolean loadDriver(java.lang.String driverClassName)：这一方装载并注册JDBC驱动程序，如果成功就返回true。使用该方法，你不需要捕捉这个异常ClassNotFoundException。\"},\"8348\":{\"h\":\"5. QueryRunner：CURD的API（取代自己写的BaseDao）\",\"a\":\"_5-queryrunner-curd的api-取代自己写的basedao\"},\"8349\":{\"t\":\"该类简单化了SQL查询，它与ResultSetHandler组合在一起使用可以完成大部分的数据库操作，能够大大减少编码量。\"},\"8350\":{\"t\":\"QueryRunner类提供了两个构造器： \"},\"8351\":{\"t\":\"默认的构造器\"},\"8352\":{\"t\":\"需要一个 javax.sql.DataSource 来作参数的构造器\"},\"8353\":{\"t\":\"QueryRunner类的主要方法： \"},\"8354\":{\"t\":\"更新 \"},\"8355\":{\"t\":\"public int update(Connection conn, String sql, Object... params) throws SQLException:用来执行一个更新（插入、更新或删除）操作。\"},\"8356\":{\"t\":\"......\"},\"8357\":{\"t\":\"插入 \"},\"8358\":{\"t\":\"public <T> T insert(Connection conn,String sql,ResultSetHandler<T> rsh, Object... params) throws SQLException：只支持INSERT语句，其中 rsh - The handler used to create the result object from the ResultSet of auto-generated keys. 返回值: An object generated by the handler.即自动生成的键值\"},\"8359\":{\"t\":\"....\"},\"8360\":{\"t\":\"批处理 \"},\"8361\":{\"t\":\"public int[] batch(Connection conn,String sql,Object params)throws SQLException： INSERT, UPDATE, or DELETE语句\"},\"8362\":{\"t\":\"public <T> T insertBatch(Connection conn,String sql,ResultSetHandler<T> rsh,Object params)throws SQLException：只支持INSERT语句\"},\"8363\":{\"t\":\".....\"},\"8364\":{\"t\":\"查询 \"},\"8365\":{\"t\":\"public Object query(Connection conn, String sql, ResultSetHandler rsh,Object... params) throws SQLException：执行一个查询操作，在这个查询中，对象数组中的每个元素值被用来作为查询语句的置换参数。该方法会自行处理 PreparedStatement 和 ResultSet 的创建和关闭。\"},\"8366\":{\"t\":\"......\"},\"8367\":{\"h\":\"6. ResultSetHandler接口及实现类\",\"a\":\"_6-resultsethandler接口及实现类\"},\"8368\":{\"t\":\"该接口用于处理 java.sql.ResultSet，将数据按要求转换为另一种形式。ResultSetHandler 接口提供了一个单独的方法：Object handle (java.sql.ResultSet .rs)。\"},\"8369\":{\"t\":\"接口的主要实现类：\"},\"8370\":{\"t\":\"ArrayHandler：把结果集中的第一行数据转成对象数组。\"},\"8371\":{\"t\":\"ArrayListHandler：把结果集中的每一行数据都转成一个数组，再存放到List中。\"},\"8372\":{\"t\":\"BeanHandler：将结果集中的第一行数据封装到一个对应的JavaBean实例中。\"},\"8373\":{\"t\":\"BeanListHandler：将结果集中的每一行数据都封装到一个对应的JavaBean实例中，存放到List里。\"},\"8374\":{\"t\":\"ColumnListHandler：将结果集中某一列的数据存放到List中。\"},\"8375\":{\"t\":\"KeyedHandler(name)：将结果集中的每一行数据都封装到一个Map里，再把这些map再存到一个map里，其key为指定的key。\"},\"8376\":{\"t\":\"MapHandler：将结果集中的第一行数据封装到一个Map里，key是列名，value就是对应的值。\"},\"8377\":{\"t\":\"MapListHandler：将结果集中的每一行数据都封装到一个Map里，然后再存放到List\"},\"8378\":{\"t\":\"ScalarHandler：查询单个值对象\"},\"8379\":{\"h\":\"Ⅱ. 使用示例\",\"a\":\"ii-使用示例\"},\"8380\":{\"h\":\"1. 添加\",\"a\":\"_1-添加\"},\"8381\":{\"t\":\"public void testInsert() throws Exception { QueryRunner runner = new QueryRunner(); Connection conn = JDBCUtils.getConnection3(); String sql = \\\"insert into customers(name,email,birth)values(?,?,?)\\\"; int count = runner.update(conn, sql, \\\"何成飞\\\", \\\"he@qq.com\\\", \\\"1992-09-08\\\"); System.out.println(\\\"添加了\\\" + count + \\\"条记录\\\"); JDBCUtils.closeResource(conn, null); } \"},\"8382\":{\"h\":\"2. 删除\",\"a\":\"_2-删除\"},\"8383\":{\"t\":\"public void testDelete() throws Exception { QueryRunner runner = new QueryRunner(); Connection conn = JDBCUtils.getConnection3(); String sql = \\\"delete from customers where id < ?\\\"; int count = runner.update(conn, sql,3); System.out.println(\\\"删除了\\\" + count + \\\"条记录\\\"); JDBCUtils.closeResource(conn, null); } \"},\"8384\":{\"h\":\"3. 查询一条记录\",\"a\":\"_3-查询一条记录\"},\"8385\":{\"t\":\"public void testQueryInstance() throws Exception{ QueryRunner runner = new QueryRunner(); Connection conn = JDBCUtils.getConnection3(); String sql = \\\"select id,name,email,birth from customers where id = ?\\\"; BeanHandler<Customer> handler = new BeanHandler<>(Customer.class); Customer customer = runner.query(conn, sql, handler, 23); System.out.println(customer); JDBCUtils.closeResource(conn, null); } \"},\"8386\":{\"h\":\"4. 查询多条记录构成的集合\",\"a\":\"_4-查询多条记录构成的集合\"},\"8387\":{\"t\":\"public void testQueryList() throws Exception{ QueryRunner runner = new QueryRunner(); Connection conn = JDBCUtils.getConnection3(); String sql = \\\"select id,name,email,birth from customers where id < ?\\\"; BeanListHandler<Customer> handler = new BeanListHandler<>(Customer.class); List<Customer> list = runner.query(conn, sql, handler, 23); list.forEach(System.out::println); JDBCUtils.closeResource(conn, null); } \"},\"8388\":{\"h\":\"5. 自定义ResultSetHandler的实现类\",\"a\":\"_5-自定义resultsethandler的实现类\"},\"8389\":{\"t\":\"public void testQueryInstance1() throws Exception{ QueryRunner runner = new QueryRunner(); Connection conn = JDBCUtils.getConnection3(); String sql = \\\"select id,name,email,birth from customers where id = ?\\\"; ResultSetHandler<Customer> handler = new ResultSetHandler<Customer>() { public Customer handle(ResultSet rs) throws SQLException { System.out.println(\\\"handle\\\"); if(rs.next()){ int id = rs.getInt(\\\"id\\\"); String name = rs.getString(\\\"name\\\"); String email = rs.getString(\\\"email\\\"); Date birth = rs.getDate(\\\"birth\\\"); return new Customer(id, name, email, birth); } return null; } }; Customer customer = runner.query(conn, sql, handler, 23); System.out.println(customer); JDBCUtils.closeResource(conn, null); } \"},\"8390\":{\"h\":\"6. 查询类似于最大的，最小的，平均的，总和，个数相关的数据\",\"a\":\"_6-查询类似于最大的-最小的-平均的-总和-个数相关的数据\"},\"8391\":{\"t\":\"public void testQueryValue() throws Exception{ QueryRunner runner = new QueryRunner(); Connection conn = JDBCUtils.getConnection3(); //测试一： String sql = \\\"select count(*) from customers where id < ?\\\"; ScalarHandler handler = new ScalarHandler(); long count = (long) runner.query(conn, sql, handler, 20); System.out.println(count); //测试二： String sql = \\\"select max(birth) from customers\\\"; ScalarHandler handler = new ScalarHandler(); Date birth = (Date) runner.query(conn, sql, handler); System.out.println(birth); JDBCUtils.closeResource(conn, null); } \"},\"8392\":{\"h\":\"2-1. 基本使用\"},\"8393\":{\"h\":\"Ⅰ. Tomcat介绍\",\"a\":\"i-tomcat介绍\"},\"8394\":{\"h\":\"1. web服务器\",\"a\":\"_1-web服务器\"},\"8395\":{\"t\":\"本质是安装了服务器软件的计算机。\"},\"8396\":{\"t\":\"服务器软件：接收用户的请求，处理请求，调用服务器资源，做出响应，在web服务器软件中，可以部署web项目，让用户通过浏览器来访问这些项目。\"},\"8397\":{\"t\":\"Web服务器是安装在服务器端的一款软件，本质上Web服务器是一个应用程序，对HTTP协议的操作进行封装，使得程序员不必直接对协议进行操作，让Web开发更加便捷。\"},\"8398\":{\"t\":\"相关软件：Tomcat（最常用）\"},\"8399\":{\"h\":\"2. 资源分类\",\"a\":\"_2-资源分类\"},\"8400\":{\"t\":\"静态资源：所有用户访问后，得到的结果都是一样的，称为静态资源.静态资源可以直接被浏览器解析 \"},\"8401\":{\"t\":\"如： html,css,JavaScript\"},\"8402\":{\"t\":\"动态资源:每个用户访问相同资源后，得到的结果可能不一样。称为动态资源。动态资源被访问后，需要先转换为静态资源，在返回给浏览器 \"},\"8403\":{\"t\":\"如：servlet/jsp,php,asp....\"},\"8404\":{\"h\":\"3. Web服务器软件使用步骤\",\"a\":\"_3-web服务器软件使用步骤\"},\"8405\":{\"t\":\"准备静态资源\"},\"8406\":{\"t\":\"下载安装Web服务器软件\"},\"8407\":{\"t\":\"将静态资源部署到Web服务器上\"},\"8408\":{\"t\":\"启动Web服务器使用浏览器访问对应的资源\"},\"8409\":{\"h\":\"4. 网络通信三要素\",\"a\":\"_4-网络通信三要素\"},\"8410\":{\"t\":\"IP：电子设备(计算机)在网络中的唯一标识。\"},\"8411\":{\"t\":\"端口：应用程序在计算机中的唯一标识。 0~65536\"},\"8412\":{\"t\":\"传输协议：规定了数据传输的规则\"},\"8413\":{\"t\":\"tcp：安全协议，三次握手。 速度稍慢\"},\"8414\":{\"t\":\"udp：不安全协议。 速度快\"},\"8415\":{\"h\":\"5. Tomcat\",\"a\":\"_5-tomcat\"},\"8416\":{\"t\":\"Tomcat是一个开源免费的轻量级Web服务器，支持Servlet/JSP少量JavaEE规范。Tomcat也被称为Web容器、Servlet容器，Servlet需要依赖Tomcat才能运行。\"},\"8417\":{\"t\":\"官网\"},\"8418\":{\"t\":\"2-1-1\"},\"8419\":{\"h\":\"Ⅱ. 基本开发使用\",\"a\":\"ii-基本开发使用\"},\"8420\":{\"t\":\"环境：Windows系统上的开发环境\"},\"8421\":{\"h\":\"1. 下载\",\"a\":\"_1-下载\"},\"8422\":{\"t\":\"下载地址\"},\"8423\":{\"t\":\"版本选择：8.5以上\"},\"8424\":{\"t\":\"8.5下载地址直达\"},\"8425\":{\"t\":\"文件选择：Core下的zip包即可（Linux选tar.gz）\"},\"8426\":{\"t\":\"源码：Source Code Distributions下的即为java源码。\"},\"8427\":{\"h\":\"2. 安装与卸载\",\"a\":\"_2-安装与卸载\"},\"8428\":{\"t\":\"安装：该软件是绿色软件，不用安装，解压即可使用。\"},\"8429\":{\"t\":\"卸载：删除即为卸载。\"},\"8430\":{\"h\":\"3. 目录结构\",\"a\":\"_3-目录结构\"},\"8431\":{\"t\":\"2-1-2\"},\"8432\":{\"h\":\"4. 启动\",\"a\":\"_4-启动\"},\"8433\":{\"t\":\"前提：主机上运行着jdk，且配置好了JAVA_HOME，不然命令窗口会一闪而过，启动失败。\"},\"8434\":{\"t\":\"双击bin/startup.bat即可启动，启动后会弹出dos窗口，常驻\"},\"8435\":{\"t\":\"注意：因为有端口占用，只能启动一个Tomcat，除非重新进行端口配置。\"},\"8436\":{\"h\":\"5. 关闭\",\"a\":\"_5-关闭\"},\"8437\":{\"t\":\"正常关闭：在程序的dos端口按ctrl c【推荐】\"},\"8438\":{\"t\":\"正常关闭：双击bin/shutdown.bat\"},\"8439\":{\"t\":\"强制关闭：关闭dos窗口，不推荐，某些destory方法无法生效。\"},\"8440\":{\"h\":\"6. 端口配置\",\"a\":\"_6-端口配置\"},\"8441\":{\"t\":\"Tomcat默认的端口是8080，要想修改Tomcat启动的端口号，需要修改 conf/server.xml\"},\"8442\":{\"t\":\"HTTP协议默认端口号为80，如果将Tomcat端口号改为80，则将来访问Tomcat时，将不用输入端口号。 同样，https协议的默认端口号是443.\"},\"8443\":{\"t\":\"2-1-3\"},\"8444\":{\"h\":\"7. debug\",\"a\":\"_7-debug\"},\"8445\":{\"h\":\"7.1 控制台乱码\",\"a\":\"_7-1-控制台乱码\"},\"8446\":{\"t\":\"原因：命令行默认是GBK编码，Tomcat模式是UTF8；\"},\"8447\":{\"t\":\"IDEA中：将控制台改为UTF8。\"},\"8448\":{\"t\":\"或配置修改： \"},\"8449\":{\"h\":\"7.2 端口冲突\",\"a\":\"_7-2-端口冲突\"},\"8450\":{\"t\":\"报错：Address already in use:bind，端口以备占用\"},\"8451\":{\"t\":\"解决：关闭占用端口的软件，或修改Tomcat的端口。\"},\"8452\":{\"t\":\"netstat -ano //查看进程，会显示端口号和pid，根据pid找到对应的进程 \"},\"8453\":{\"h\":\"7.3 启动时，窗口一闪而过\",\"a\":\"_7-3-启动时-窗口一闪而过\"},\"8454\":{\"t\":\"原因：找不到JDK环境。\"},\"8455\":{\"t\":\"解决：检查JAVA_HOME环境变量是否正确配置\"},\"8456\":{\"h\":\"Ⅲ. 手动部署\",\"a\":\"iii-手动部署\"},\"8457\":{\"h\":\"1. 访问Tomcat服务器\",\"a\":\"_1-访问tomcat服务器\"},\"8458\":{\"t\":\"访问地址是ip地址、域名或localhost，端口号是8080（默认） 地址：http://ipxx:8080 如：http://localhost:8080\"},\"8459\":{\"h\":\"2. 在webapps下部署\",\"a\":\"_2-在webapps下部署\"},\"8460\":{\"t\":\"Tomcat的\\\\webapps目录是用来部署项目的。\"},\"8461\":{\"h\":\"2.1 在webapps下创建项目\",\"a\":\"_2-1-在webapps下创建项目\"},\"8462\":{\"t\":\"在Tomcat目录下的webapps目录下创建一个目录，该目录就是一个独立的项目。\"},\"8463\":{\"t\":\"项目目录下，需要再创建一个必备的目录：WEB-INF（名称固定）。\"},\"8464\":{\"h\":\"2.2 在其他目录下创建项目，并通过war包部署\",\"a\":\"_2-2-在其他目录下创建项目-并通过war包部署\"},\"8465\":{\"t\":\"将项目打成一个war包，再将war包放置到webapps目录下。\"},\"8466\":{\"t\":\"war包会自动解压缩（war包和zip包差不多）。\"},\"8467\":{\"h\":\"2.3 访问项目\",\"a\":\"_2-3-访问项目\"},\"8468\":{\"t\":\"http://localhost:8080/项目目录/目标文件\"},\"8469\":{\"t\":\"如：项目目录是test1，要访问的文件是index.html\"},\"8470\":{\"t\":\"Tomcat默认访问index.* 的\"},\"8471\":{\"t\":\"http://localhost:8080/test1/ \"},\"8472\":{\"h\":\"3. 修改配置文件，创建一个路由\",\"a\":\"_3-修改配置文件-创建一个路由\"},\"8473\":{\"t\":\"修改tomcat配置文件，创建一个路由，指向项目的目录\"},\"8474\":{\"t\":\"文件：conf/server.xml，在<Host>标签体中配置\"},\"8475\":{\"t\":\"docBase:项目存放的路径\"},\"8476\":{\"t\":\"path：虚拟目录，可以随意定义\"},\"8477\":{\"t\":\"<Context docBase=\\\"D:\\\\hello\\\" path=\\\"/hehe\\\" /> \"},\"8478\":{\"t\":\"访问项目：http://localhost:8080/path\"},\"8479\":{\"t\":\"缺点：Tomcat可能会运行多个项目，直接修改server配置文件，会影响到其他项目\"},\"8480\":{\"h\":\"通过子配置文件\",\"a\":\"通过子配置文件\"},\"8481\":{\"t\":\"在 conf/Catalina/localhost中创建任意xml文件，在文件中编写配置项。\"},\"8482\":{\"t\":\"注意：path不用定义，就是文件的名称。\"},\"8483\":{\"t\":\"<Context docBase=\\\"D:\\\\hello\\\" /> \"},\"8484\":{\"h\":\"4. 配合Nginx代理\",\"a\":\"_4-配合nginx代理\"},\"8485\":{\"t\":\"常用，见Nginx\"},\"8486\":{\"h\":\"Ⅳ. JavaWeb项目结构\",\"a\":\"iv-javaweb项目结构\"},\"8487\":{\"t\":\"JavaWeb就是用Java技术来解决相关web互联网领域的技术栈。\"},\"8488\":{\"h\":\"1. 开发时的项目结构【工作目录】\",\"a\":\"_1-开发时的项目结构【工作目录】\"},\"8489\":{\"t\":\"详见：idea & tomcat\"},\"8490\":{\"t\":\"src：java源码目录\"},\"8491\":{\"t\":\"web：静态资源目录\"},\"8492\":{\"h\":\"2. 部署时的项目目录结构【运行目录】\",\"a\":\"_2-部署时的项目目录结构【运行目录】\"},\"8493\":{\"t\":\"真正部署项目时，是把该目录部署到服务器，而非开始时的项目。\"},\"8494\":{\"t\":\"同时这个目录也是Tomcat真正访问的目录。\"},\"8495\":{\"h\":\"2.1 通用目录\",\"a\":\"_2-1-通用目录\"},\"8496\":{\"t\":\"项目的根目录 \"},\"8497\":{\"t\":\"WEB-INF：不能被浏览器直接访问的目录 \"},\"8498\":{\"t\":\"web.xml：web项目的核心配置文件【非必须】\"},\"8499\":{\"t\":\"classes：编译后的java字节码文件目录\"},\"8500\":{\"t\":\"lib：放置依赖的jar包\"},\"8501\":{\"t\":\"其他各种可以被浏览器访问的静态资源。\"},\"8502\":{\"h\":\"2.2 在idea中的输出目录\",\"a\":\"_2-2-在idea中的输出目录\"},\"8503\":{\"t\":\"假如：项目名称叫sgugo，（详见idea & Tomcat）\"},\"8504\":{\"t\":\"out \"},\"8505\":{\"t\":\"artifacts \"},\"8506\":{\"t\":\"sgugo_war_exploded：sgugo项目名的输出目录 \"},\"8507\":{\"t\":\"WEB-INF：不能被浏览器直接访问的目录 \"},\"8508\":{\"t\":\"classes：编译后java类\"},\"8509\":{\"t\":\"其他静态资源\"},\"8510\":{\"h\":\"2-2. IDEA使用\"},\"8511\":{\"h\":\"Ⅰ. Web项目目录\",\"a\":\"i-web项目目录\"},\"8512\":{\"t\":\"以下目录是使用Maven创建的JavaWeb项目的标准目录。\"},\"8513\":{\"h\":\"1. 开发中的项目\",\"a\":\"_1-开发中的项目\"},\"8514\":{\"t\":\"2-2-1\"},\"8515\":{\"h\":\"2. 打包后可以部署的项目\",\"a\":\"_2-打包后可以部署的项目\"},\"8516\":{\"t\":\"通过打包命令，可以直接获取打包后可以部署的项目目录。\"},\"8517\":{\"t\":\"编译后的Java字节码文件和resources的资源文件，会被放到WEB-INF下的classes目录下\"},\"8518\":{\"t\":\"pom.xml中依赖坐标对应的jar包，会被放入WEB-INF下的lib目录下\"},\"8519\":{\"t\":\"2-2-2\"},\"8520\":{\"h\":\"Ⅱ. 创建Web项目\",\"a\":\"ii-创建web项目\"},\"8521\":{\"h\":\"1. IDEA：创建Web项目\",\"a\":\"_1-idea-创建web项目\"},\"8522\":{\"h\":\"1.1 新建工程\",\"a\":\"_1-1-新建工程\"},\"8523\":{\"t\":\"新建一个空Project：如Learn\"},\"8524\":{\"t\":\"里面用一个Module来使用Tomcat：如JavaWeb\"},\"8525\":{\"h\":\"1.2 创建Module\",\"a\":\"_1-2-创建module\"},\"8526\":{\"t\":\"New Module：弹出如下窗口，选择：Java Enterprise（即java企业版）\"},\"8527\":{\"t\":\"右边选项中，进行必要的设置，如下：\"},\"8528\":{\"t\":\"Name/Artifact：模块名\"},\"8529\":{\"t\":\"Project template：Web application\"},\"8530\":{\"t\":\"Project SDK：1.8 然后点击 Next和Finish就OK了\"},\"8531\":{\"h\":\"2. IDEA：非Web项目->Web项目\",\"a\":\"_2-idea-非web项目-web项目\"},\"8532\":{\"t\":\"将已有的项目（模块）部署到Tomcat，和直接创建Web application项目的目录结构稍有不同。\"},\"8533\":{\"h\":\"2.1 通过Project Structure添加Web\",\"a\":\"_2-1-通过project-structure添加web\"},\"8534\":{\"t\":\"打开Project Structure：Ctrl+ALT+Shift+S，选择右边的：Facets，点击+号，选择Web，然后选择要添加Web的模块\"},\"8535\":{\"t\":\"2-2-3\"},\"8536\":{\"h\":\"2.2 通过在Module上右键添加Web\",\"a\":\"_2-2-通过在module上右键添加web\"},\"8537\":{\"t\":\"module上右键：Add Frameworks Support\"},\"8538\":{\"t\":\"在弹出的页面中，选择：Web Application\"},\"8539\":{\"t\":\"如下：也可以取消勾选 Create web.xml，使用注解的方式配置项目\"},\"8540\":{\"t\":\"2-2-4\"},\"8541\":{\"h\":\"2.3 配置Artifacts\",\"a\":\"_2-3-配置artifacts\"},\"8542\":{\"t\":\"注意：如果采用了上述的方式2，就不用配置Artifacts，因为都已经配置好了。\"},\"8543\":{\"t\":\"点击 Artifacts：配置输出文件的目录，和输出Type，如图：\"},\"8544\":{\"t\":\"2-2-5\"},\"8545\":{\"h\":\"3. Maven：使用骨架创建Web项目\",\"a\":\"_3-maven-使用骨架创建web项目\"},\"8546\":{\"h\":\"3.1 创建Module\",\"a\":\"_3-1-创建module\"},\"8547\":{\"t\":\"new Module：选择Maven\"},\"8548\":{\"t\":\"勾选Great from archetype：选中org.apache.maven.archetypes：maven_archetype-webapp\"},\"8549\":{\"t\":\"点击Next，填写项目名称，和Maven的坐标。\"},\"8550\":{\"t\":\"Finish：完成创建\"},\"8551\":{\"h\":\"3.2 删除pom.xml中多余的内容\",\"a\":\"_3-2-删除pom-xml中多余的内容\"},\"8552\":{\"t\":\"<project ...>...</project>外的其他标签内容都删除。\"},\"8553\":{\"h\":\"3.3 补齐Maven Web项目确实的目录结构\",\"a\":\"_3-3-补齐maven-web项目确实的目录结构\"},\"8554\":{\"t\":\"默认的目录是没有java和resources的，需要手动创建补齐。\"},\"8555\":{\"t\":\"2-2-6\"},\"8556\":{\"h\":\"4. Maven：不使用骨架创建Web项目【推荐】\",\"a\":\"_4-maven-不使用骨架创建web项目【推荐】\"},\"8557\":{\"t\":\"详见：Maven\"},\"8558\":{\"h\":\"4.1 创建Module\",\"a\":\"_4-1-创建module\"},\"8559\":{\"t\":\"new Module：选择Maven\"},\"8560\":{\"t\":\"不勾选Great from archetype\"},\"8561\":{\"t\":\"点击Next，填写项目名称，和Maven的坐标。\"},\"8562\":{\"t\":\"Finish：完成创建\"},\"8563\":{\"h\":\"4.2 设置pom.xml的打包方式\",\"a\":\"_4-2-设置pom-xml的打包方式\"},\"8564\":{\"t\":\"<packaging>war</packaging>\"},\"8565\":{\"h\":\"4.3 补齐Maven Web缺失的Webapp目录结构\",\"a\":\"_4-3-补齐maven-web缺失的webapp目录结构\"},\"8566\":{\"t\":\"打开Project Structure：Ctrl+ALT+Shift+S：\"},\"8567\":{\"t\":\"Facets->Web：选中之前创建的Web项目：在右边进行设置\"},\"8568\":{\"t\":\"Web Resource Directories：双击按照提示补齐webapp目录\"},\"8569\":{\"t\":\"Deployment Descriptors：点击+号，按照提示，添加缺失的WEB-INF/web.xml \"},\"8570\":{\"t\":\"注意：WEB-INF所在的目录为webapp。\"},\"8571\":{\"h\":\"Ⅲ. 配置Tomcat\",\"a\":\"iii-配置tomcat\"},\"8572\":{\"h\":\"readme\",\"a\":\"readme\"},\"8573\":{\"t\":\"使用IDEA和下载的Tomcat软件，配置Tomcat模板。该模板只需配置一次，以后再创建Javaweb项目就可以直接使用了。\"},\"8574\":{\"t\":\"注意：这里使用的是本地之前下载的Tomcat。\"},\"8575\":{\"h\":\"1. 打开Tomcat Server模板\",\"a\":\"_1-打开tomcat-server模板\"},\"8576\":{\"t\":\"①右上角点击：Edit Comfigurations（或者：菜单栏run/Edit Comfigurations）\"},\"8577\":{\"t\":\"②在弹出的窗口中点击右下角的edit configuration templates...\"},\"8578\":{\"t\":\"③在弹出的窗口：Run/Debug Configuration Templates中：\"},\"8579\":{\"t\":\"右边选择Tomcat Server->Local，然后就可以配置Tomcat了，配置项如下： 其中：Name是该Tomcat模板的名字，可以任意取，比如：Sgugo项目\"},\"8580\":{\"h\":\"2. Deployment：项目部署\",\"a\":\"_2-deployment-项目部署\"},\"8581\":{\"t\":\"点击该选项卡，部署项目，优先设置该选项卡，再设置Server选项卡\"},\"8582\":{\"t\":\"点击+号，选择：Aftifacts->JavaWeb:war exploded\"},\"8583\":{\"h\":\"2.1 部署模式介绍\",\"a\":\"_2-1-部署模式介绍\"},\"8584\":{\"t\":\"war：将WEB工程打成war包，把war包发布到Tomcat服务器上 \"},\"8585\":{\"t\":\"该方式无法实现热部署\"},\"8586\":{\"t\":\"war exploded：将WEB工程以当前文件夹的位置关系发布到Tomcat服务器上 \"},\"8587\":{\"t\":\"热部署模式\"},\"8588\":{\"h\":\"2.2 Application context：项目路径\",\"a\":\"_2-2-application-context-项目路径\"},\"8589\":{\"t\":\"只有一个项目，建议直接改成 / , 这样以后就不用输入项目目录。\"},\"8590\":{\"h\":\"3. Server：TomCat服务器配置\",\"a\":\"_3-server-tomcat服务器配置\"},\"8591\":{\"t\":\"Application server：指定本地Tomcat软件的具体路径 \"},\"8592\":{\"t\":\"配置Tomcat服务器软件的目录，点击右边的Configure进行配置，选择Tomcat的主目录即可。\"},\"8593\":{\"t\":\"Open Browser：启动项目后默认自动打开的浏览器\"},\"8594\":{\"t\":\"URL：打开浏览器后要访问的项目目录，一般设置为：http://localhost:80/\"},\"8595\":{\"t\":\"On Update action：当项目有更新的时候，该怎么做，推荐update resource：需要编译时按ctrl + f9即可 \"},\"8596\":{\"t\":\"update resource：资源变动时，重新部署，非java文件的其他文件\"},\"8597\":{\"t\":\"update calsses and resource：java和静态资源变更都会重新部署【热部署】\"},\"8598\":{\"t\":\"Redeploy：把当前的一个项目重新部署到Tomcat服务器上\"},\"8599\":{\"t\":\"restart：重启tomcat，将服务器上所有的项目都重新部署\"},\"8600\":{\"t\":\"On fream deactivation：当idea失去焦点时，做什么 \"},\"8601\":{\"t\":\"推荐update calsses and resource。自动更新class和资源。【方便调试】\"},\"8602\":{\"t\":\"HTTP port：访问的端口号，默认是8080，改为80就不用输入端口号了。\"},\"8603\":{\"h\":\"4. 添加配置好的Tomcat模板\",\"a\":\"_4-添加配置好的tomcat模板\"},\"8604\":{\"t\":\"在 Run/Debug Configurations中点击右上角的+号，然后选择刚配置好的Tomcat（通过Name选择）\"},\"8605\":{\"t\":\"以后就可以直接点击这个Tomcat 8.5.78进行Tomcat的配置和项目部署了。点击OK，结束Tomcat的配置。\"},\"8606\":{\"h\":\"5. 配置多个Tomcat\",\"a\":\"_5-配置多个tomcat\"},\"8607\":{\"t\":\"一台主机可以启动多太Tomcat服务器，只要端口号不同就可以。\"},\"8608\":{\"t\":\"这里只介绍一下配置，可以创建多个Tomcat模板给不同的项目用。\"},\"8609\":{\"h\":\"5.1 添加Tomcat模板\",\"a\":\"_5-1-添加tomcat模板\"},\"8610\":{\"t\":\"打开窗口：Run/Debug Configuration ，点击+ 号，选择Tomcat，就可以再创建一个Tomcat模板了。\"},\"8611\":{\"t\":\"注意：不同的Tomcat模板可以起不同的名字，如：起成对应的项目名称，方便区分。\"},\"8612\":{\"h\":\"5.2 配置Tomcat模板\",\"a\":\"_5-2-配置tomcat模板\"},\"8613\":{\"t\":\"选择一个Tomcat模板就可以在右边进行配置。\"},\"8614\":{\"t\":\"具体配置见上文，配置方式一样（更简单，因为有了前一个模板的默认值）。\"},\"8615\":{\"h\":\"5.3 配置文件\",\"a\":\"_5-3-配置文件\"},\"8616\":{\"t\":\"IDEA会为每一个tomcat部署的项目单独建立一份配置文件。不用修改这个配置文件，按照上面的方法在IDEA中修改Tomcat会自动修改配置文件。\"},\"8617\":{\"t\":\"配置文件地址：查看控制台的log：Using CATALINA_BASE:\\\"C:\\\\Users\\\\A\\\\AppData\\\\Local\\\\JetBrains\\\\IntelliJIdea2021.3\\\\tomcat\\\\4dc041da\\\"\"},\"8618\":{\"h\":\"Ⅳ. 使用Tomcat\",\"a\":\"iv-使用tomcat\"},\"8619\":{\"h\":\"1. 启动Tomcat\",\"a\":\"_1-启动tomcat\"},\"8620\":{\"t\":\"如图，下拉框选择Tomcat，并点击右边的 绿色启动按钮启动。\"},\"8621\":{\"t\":\"debug：debug也可以启动，同时进行debug。\"},\"8622\":{\"h\":\"2. 访问测试\",\"a\":\"_2-访问测试\"},\"8623\":{\"t\":\"在JavaWeb/src/main/webapp/ 目录下创建 index.html，并输入<h1>Hi Tomcat</h1> 在浏览器中输入：localhost:8080/index.html，就可以看到页面了。\"},\"8624\":{\"t\":\"注意：要关闭之前通过双击打开的Tomcat服务，不然会报端口占用的错误。\"},\"8625\":{\"h\":\"3. 编译后的项目目录\",\"a\":\"_3-编译后的项目目录\"},\"8626\":{\"t\":\"idea没有使用Tomcat的webapps作为项目目录，而是使用 模块目录下的 target作为项目目录，其中有三个文件夹：\"},\"8627\":{\"t\":\"classes：对应编译后java文件\"},\"8628\":{\"t\":\"generated-source：对应资源文件\"},\"8629\":{\"t\":\"项目名-1.0-SNAPSHOT：前端快照\"},\"8630\":{\"h\":\"4. 多个Tomcat目标的使用\",\"a\":\"_4-多个tomcat目标的使用\"},\"8631\":{\"t\":\"在右上角的下拉框中选择指定的tomcat模板，就可以启动了。\"},\"8632\":{\"t\":\"当有多个Tomcat模板时，可以进行关闭切换其他Tomcat模板，并进行启动。\"},\"8633\":{\"h\":\"Ⅴ. 注意事项\",\"a\":\"v-注意事项\"},\"8634\":{\"h\":\"1. Artifacts配置\",\"a\":\"_1-artifacts配置\"},\"8635\":{\"t\":\"新建的JavaWeb项目可能会出现未配置项目导出方式（Artifacts）。\"},\"8636\":{\"t\":\"如果未配置Artifacts，会导致Tomcat选项中，只有普通的build打包，不能打war包，更不能热部署（没这个选项）。\"},\"8637\":{\"h\":\"1.1 配置Artifacts\",\"a\":\"_1-1-配置artifacts\"},\"8638\":{\"t\":\"打开Project Structure：ctrl+alt+shift+s\"},\"8639\":{\"h\":\"1.2 添加导出方式\",\"a\":\"_1-2-添加导出方式\"},\"8640\":{\"t\":\"如上图，主要用到两个导出方式。\"},\"8641\":{\"t\":\"选中导出方式和要设置的项目进行设置。\"},\"8642\":{\"h\":\"2. Tomcat导出方式介绍\",\"a\":\"_2-tomcat导出方式介绍\"},\"8643\":{\"t\":\"war：将WEB工程打成war包，把war包自动发布到Tomcat服务器上 \"},\"8644\":{\"t\":\"该方式无法实现热部署\"},\"8645\":{\"t\":\"war exploded：将WEB工程以当前文件夹的位置关系发布到Tomcat服务器上 \"},\"8646\":{\"t\":\"热部署模式\"},\"8647\":{\"h\":\"2.1 Tomcat添加导出方式\",\"a\":\"_2-1-tomcat添加导出方式\"},\"8648\":{\"t\":\"在配置Tomcat的目标时，应该首先配置Deployment。\"},\"8649\":{\"t\":\"点击+号，添加项目部署的导出方式。\"},\"8650\":{\"t\":\"选择Artifact...选择war或war exploded中的一个。\"},\"8651\":{\"t\":\"如果此处未出现Artifact...选项，说明Artifacts配置有问题，需要进行配置。\"},\"8652\":{\"h\":\"2.2 注意事项\",\"a\":\"_2-2-注意事项\"},\"8653\":{\"t\":\"如果未配置Artifacts，Tomcat的模板的设置界面将不会出现下面两个选项。\"},\"8654\":{\"t\":\"热部署的具体配置：见上面的配置Tomcat\"},\"8655\":{\"h\":\"@缺少的内容\"},\"8656\":{\"t\":\"待补充的内容，都是一些高级的Tomcat使用\"},\"8657\":{\"t\":\"详细配置\"},\"8658\":{\"t\":\"关联Nginx\"},\"8659\":{\"t\":\"性能调优\"},\"8660\":{\"t\":\"Tomcat架构\"},\"8661\":{\"t\":\"配置：服务器配置、Web应用配置、JVM配置\"},\"8662\":{\"t\":\"Tomcat集群\"},\"8663\":{\"t\":\"Tomcat安全\"},\"8664\":{\"t\":\"WebSocket\"},\"8665\":{\"h\":\"3-1. Servlet介绍\"},\"8666\":{\"t\":\"提示\"},\"8667\":{\"t\":\"Servlet Filter Listner是Javaweb的核心三件套\"},\"8668\":{\"h\":\"1. 概述\",\"a\":\"_1-概述\"},\"8669\":{\"t\":\"3-1-1\"},\"8670\":{\"t\":\"Servlet：server applet，运行在服务器端（Tomcat）的小程序；\"},\"8671\":{\"t\":\"Servlet是JavaWeb最为核心的内容，它是Java提供的一门动态web资源开发技术。\"},\"8672\":{\"t\":\"Servlet是JavaEE规范之一，其实就是一个接口，将来我们需要定义Servlet类实现Servlet接口，并由web服务器运行Servlet\"},\"8673\":{\"h\":\"2. 解析\",\"a\":\"_2-解析\"},\"8674\":{\"t\":\"浏览器访问服务器时，会访问两种资源，静态资源和动态资源。\"},\"8675\":{\"t\":\"对于动态资源来说，他是动态生成的，不同的访问条件，返回的内容是不一样的，也就是说，动态资源是具有逻辑性的，这个逻辑性就是由java代码控制的。\"},\"8676\":{\"t\":\"服务器中的java代码，是需要tomcat来解析，才能生效。\"},\"8677\":{\"t\":\"并不是所有的java代码，tomcat都能解析，而是需要遵守一些规则（接口）。这个规则（接口）就是Servlet。\"},\"8678\":{\"h\":\"3. Servlet的本质\",\"a\":\"_3-servlet的本质\"},\"8679\":{\"t\":\"Servlet就是一个接口，定义了Java类被浏览器访问到(tomcat识别)的规则。\"},\"8680\":{\"t\":\"Javaweb开发中，自定义一个类，要实现Servlet接口，复写方法，才能被Tomcat解析.\"},\"8681\":{\"h\":\"4. 导入servlet包\",\"a\":\"_4-导入servlet包\"},\"8682\":{\"t\":\"servlet包是tomcat lib中的一个包，默认是导入的，如果没有导入可以手动导入： 打开模块设置（ctrl+alt+shift+s）->Libraries->+->选择tomcat/lib/servlet-api->导入到指定module。\"},\"8683\":{\"h\":\"5. 注意事项\",\"a\":\"_5-注意事项\"},\"8684\":{\"t\":\"打包web项目时，一定不要打包Servlet包，无论是开发时是何种配置。\"},\"8685\":{\"t\":\"服务器Tomcat中已经有servlet-api.jar了，重复打包会产生冲突。\"},\"8686\":{\"h\":\"3-2. 基本使用\"},\"8687\":{\"h\":\"Ⅰ. 快速入门\",\"a\":\"i-快速入门\"},\"8688\":{\"h\":\"快速入门步骤\",\"a\":\"快速入门步骤\"},\"8689\":{\"t\":\"创建项目：配置好Tomcat和Servlet\"},\"8690\":{\"t\":\"创建Servlet实现类：实现Servlet接口 \"},\"8691\":{\"t\":\"并重写所有方法，其中server方法中打印一句话进行测设\"},\"8692\":{\"t\":\"配置路由：使用注解的方式为Servlet类配置一个访问路径（暂时不用深究）\"},\"8693\":{\"t\":\"访问Servlet实现类：通过 基本url+路由的方式访问 \"},\"8694\":{\"t\":\"访问前别忘了重启服务器\"},\"8695\":{\"t\":\"测设：观察访问结果 \"},\"8696\":{\"t\":\"不用写测设类，Servlet实现类会被自动访问，并自动调用server方法\"},\"8697\":{\"h\":\"1. 创建项目\",\"a\":\"_1-创建项目\"},\"8698\":{\"t\":\"创建Web项目，并配置Tomcat和Servlet。\"},\"8699\":{\"t\":\"右键Librarys中的servlet-api：Add to Modules....：选择具体的module\"},\"8700\":{\"t\":\"也可以在具体Module的：Depedencies选项卡中，手动添加\"},\"8701\":{\"t\":\"3-2-1\"},\"8702\":{\"h\":\"2. 创建Servlet实现类\",\"a\":\"_2-创建servlet实现类\"},\"8703\":{\"t\":\"定义一个类，实现Servlet接口，并重写接口中所有方法，并在service方法中打印hello\"},\"8704\":{\"t\":\"package servlet.demo; public class ServletDemo1 implements Servlet { @Override public void service(ServletRequest request, ServletResponse response) throws ServletException, IOException { System.out.println(\\\"hello\\\"); } ...//其他方法不用管，暂时只考虑service方法 } \"},\"8705\":{\"h\":\"3. 配置路由\",\"a\":\"_3-配置路由\"},\"8706\":{\"t\":\"在类上使用@WebServlet注解，配置该Servlet的访问路径\"},\"8707\":{\"t\":\"@WebServlet(\\\"/demo1\\\") public class ServletDemo1 implements Servlet {...} \"},\"8708\":{\"h\":\"4. 访问Servlet实现类\",\"a\":\"_4-访问servlet实现类\"},\"8709\":{\"t\":\"启动/重启 Tomcat，浏览器中输入URL地址（基本URL+路由）访问该Servlet\"},\"8710\":{\"t\":\"http://localhost:8080/demo1 \"},\"8711\":{\"h\":\"5. 测试\",\"a\":\"_5-测试\"},\"8712\":{\"t\":\"观察启动后的命令行，发现打印了hello。\"},\"8713\":{\"t\":\"刷新访问的页面，每刷新一次就打印一次hello。\"},\"8714\":{\"h\":\"Ⅱ. Servlet 执行流程\",\"a\":\"ii-servlet-执行流程\"},\"8715\":{\"t\":\"我们并没有创建Servlet类的对象，也没有调用对象中的service方法，为什么在控制台就打印了hello这句话呢?\"},\"8716\":{\"h\":\"1. Servlet执行流程概述\",\"a\":\"_1-servlet执行流程概述\"},\"8717\":{\"t\":\"3-2-5\"},\"8718\":{\"h\":\"2. 解析\",\"a\":\"_2-解析\"},\"8719\":{\"t\":\"浏览器发http://localhost:8080/web-demo/demo1请求，从请求中可以解析出三部分内容分别是`localhost:8080`、`web-demo`、`demo1`\"},\"8720\":{\"t\":\"根据localhost:8080可以找到要访问的Tomcat Web服务器\"},\"8721\":{\"t\":\"根据web-demo可以找到部署在Tomcat服务器上的web-demo项目\"},\"8722\":{\"t\":\"根据demo1可以找到要访问的是项目中的哪个Servlet类，根据@WebServlet后面的值进行匹配\"},\"8723\":{\"t\":\"找到ServletDemo1这个类后，Tomcat Web服务器就会为ServletDemo1这个类创建一个对象，然后调用对象中的service方法 \"},\"8724\":{\"t\":\"ServletDemo1实现了Servlet接口，所以类中必然会重写service方法供Tomcat Web服务器进行调用\"},\"8725\":{\"t\":\"service方法中有ServletRequest和ServletResponse两个参数，ServletRequest封装的是请求数据，ServletResponse封装的是响应数据，后期我们可以通过这两个参数实现前后端的数据交互\"},\"8726\":{\"h\":\"3. 总结\",\"a\":\"_3-总结\"},\"8727\":{\"t\":\"Servlet由web服务器创建，Servlet方法由web服务器调用\"},\"8728\":{\"t\":\"因为我们自定义的Servlet,必须实现Servlet接口并复写其方法，而Servlet接口中有service方法\"},\"8729\":{\"h\":\"Ⅲ. IDEA中快速使用\",\"a\":\"iii-idea中快速使用\"},\"8730\":{\"t\":\"在IDEA中可以快速创建Servlet实现类。\"},\"8731\":{\"t\":\"JavaWeb核心三件套都可以直接new。\"},\"8732\":{\"h\":\"1. 使用方式\",\"a\":\"_1-使用方式\"},\"8733\":{\"t\":\"右键new时直接显示Servlet。\"},\"8734\":{\"t\":\"效果：直接配置好了WebServlet，继承了HttpServlet，且自动重写了doGet和doPost。\"},\"8735\":{\"t\":\"3-2-2\"},\"8736\":{\"h\":\"2. 修改模板\",\"a\":\"_2-修改模板\"},\"8737\":{\"t\":\"可以根据需求修改Servlet模板\"},\"8738\":{\"t\":\"3-2-3\"},\"8739\":{\"h\":\"3. 注意事项\",\"a\":\"_3-注意事项\"},\"8740\":{\"t\":\"前提：已经导入了servlet.api\"},\"8741\":{\"t\":\"在Project Structure界面，点击Module选项卡：将Source Roots中对应的src目录勾选上。\"},\"8742\":{\"t\":\"3-2-4\"},\"8743\":{\"h\":\"3-3. Servlet的对象\"},\"8744\":{\"h\":\"Ⅰ. Servlet 生命周期\",\"a\":\"i-servlet-生命周期\"},\"8745\":{\"t\":\"对象的生命周期指一个对象从被创建到被销毁的整个过程。Servlet运行在Servlet容器(web服务器)中，其生命周期由容器来管理，分为4个阶段\"},\"8746\":{\"h\":\"1. 阶段1：加载和实例化\",\"a\":\"_1-阶段1-加载和实例化\"},\"8747\":{\"t\":\"默认情况下，当Servlet第一次被访问时，由容器创建Servlet对象。该对象只会创建一次，Tomcat会将其常驻内存。\"},\"8748\":{\"h\":\"1.1 修改为启动Servlet时创建\",\"a\":\"_1-1-修改为启动servlet时创建\"},\"8749\":{\"t\":\"如果创建Servlet比较耗时的话，那么第一个访问的人等待的时间就比较长，用户的体验就比较差（注意：只会影响第一个访问的人而已，其实问题也不是很大），可以同设置，将Servlet的创建放到服务器启动的时候来创建。\"},\"8750\":{\"t\":\"通过修改@WebServlet注解中loadOnStartup的值来改变Servlet对象的创建时机：\"},\"8751\":{\"t\":\"取值负整数:第一次访问时创建Servlet对象\"},\"8752\":{\"t\":\"0或正整数:服务器启动时创建Servlet对象，数字越小优先级越高\"},\"8753\":{\"h\":\"1.2 线程安全问题\",\"a\":\"_1-2-线程安全问题\"},\"8754\":{\"t\":\"Servlet的init方法，只执行一次，说明一个Servlet在内存中只存在一个对象，Servlet是单例的，也就是说多个用户同时访问时，可能存在线程安全问题。\"},\"8755\":{\"t\":\"解决：尽量不要在Servlet中定义成员变量。即使定义了成员变量，也不要修改值\"},\"8756\":{\"h\":\"2. 阶段2：初始化\",\"a\":\"_2-阶段2-初始化\"},\"8757\":{\"t\":\"在Servlet实例化之后，容器将自动调用Servlet的init()方法初始化这个对象，完成一些如加载配置文件、创建连接等初始化的工作。该方法只调用一次。\"},\"8758\":{\"h\":\"3. 阶段3：请求处理\",\"a\":\"_3-阶段3-请求处理\"},\"8759\":{\"t\":\"每次请求Servlet时，Servlet容器都会调用Servlet的service()方法对请求进行处理\"},\"8760\":{\"h\":\"4. 阶段4：服务终止\",\"a\":\"_4-阶段4-服务终止\"},\"8761\":{\"t\":\"当需要释放内存或者容器关闭时，容器就会调用Servlet实例的destroy()方法完成资源的释放。在destroy()方法调用之后，容器会释放这个Servlet实例，该实例随后会被Java的垃圾收集器所回收。\"},\"8762\":{\"h\":\"Ⅱ. Servlet 方法\",\"a\":\"ii-servlet-方法\"},\"8763\":{\"t\":\"Servlet接口一共有五个方法，其中init、service、destroy会在生命周期中被调用。\"},\"8764\":{\"t\":\"public interface Servlet { void init(ServletConfig var1) throws ServletException; ServletConfig getServletConfig(); void service(ServletRequest var1, ServletResponse var2) throws ServletException, IOException; String getServletInfo(); void destroy(); } \"},\"8765\":{\"h\":\"1. init：初始化\",\"a\":\"_1-init-初始化\"},\"8766\":{\"t\":\"初始化方法，默认在Servlet被第一次访问时调用，只执行一次。\"},\"8767\":{\"t\":\"可以通过将@WebServlet注解中的loadOnStartup修改为0或整数，将该方法的调用时机改为服务器启动时调用。\"},\"8768\":{\"t\":\"void init(ServletConfig config) ================================== @WebServlet(urlPatterns=\\\"/demo1\\\",loadOnStartup=1) //修改调用时机 public void init(ServletConfig config) throws ServletException { //通过控制台观察代码块运行结果可知：该方法仅启动了一次 System.out.println(\\\"init...\\\"); } \"},\"8769\":{\"h\":\"2. service：服务代码\",\"a\":\"_2-service-服务代码\"},\"8770\":{\"t\":\"这是Servlet的最核心方法，业务逻辑就是写在该方法内的。\"},\"8771\":{\"t\":\"每次该servlet的url被访问，该方法都会执行一次，开发时，主要关注该方法。该方法会获取访问时的请求信息，并会将服务的响应返回给请求处（见后续章节：请求与响应）\"},\"8772\":{\"t\":\"void service(ServletRequest var1, ServletResponse var2); ======================================================= public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException { //观察可知：每次访问(刷新)配置的url，该方法中的代码块都会执行一次 System.out.println(\\\"servlet hello world~\\\"); } \"},\"8773\":{\"h\":\"3. destroy：销毁方法\",\"a\":\"_3-destroy-销毁方法\"},\"8774\":{\"t\":\"内存释放或者服务器关闭的时候，Servlet对象会被销毁，调用。\"},\"8775\":{\"t\":\"由于Servlet对象指挥创建一次，因此也只能销毁一次，所以该方法只会执行一次。\"},\"8776\":{\"t\":\"注意：只有服务器正常关闭时，才会执行destroy方法。\"},\"8777\":{\"t\":\"void destroy(); ======================== public void destroy() { //通过控制台观察代码块运行结果可知：该方法仅运行了一次 System.out.println(\\\"destroy...\\\"); } \"},\"8778\":{\"h\":\"4. getServletInfo：获取Servlet信息\",\"a\":\"_4-getservletinfo-获取servlet信息\"},\"8779\":{\"t\":\"该方法用来返回Servlet的相关信息，如版本、作者等。\"},\"8780\":{\"t\":\"没有什么太大的用处，一般我们返回一个空字符串即可\"},\"8781\":{\"t\":\"String getServletInfo(); ============================ public String getServletInfo() { return \\\"\\\"; } \"},\"8782\":{\"h\":\"5. getServletConfig：获取ServletConfig对象\",\"a\":\"_5-getservletconfig-获取servletconfig对象\"},\"8783\":{\"t\":\"ServletConfig对象，在init方法的参数中有，而Tomcat Web服务器在创建Servlet对象的时候会调用init方法，必定会传入一个ServletConfig对象，我们只需要将服务器传过来的ServletConfig进行返回即可。\"},\"8784\":{\"t\":\"ServletConfig getServletConfig(); ======================================= public class ServletDemo1 implements Servlet{ private ServletConfig servletConfig; public void init(ServletConfig config) throws ServletException{ this.servletConfig = config; System.out.println(\\\"init...\\\"); } public ServletConfig getServletConfig(){ return servletConfig; } } \"},\"8785\":{\"h\":\"Ⅲ. Servlet 体系结构\",\"a\":\"iii-servlet-体系结构\"},\"8786\":{\"t\":\"要想编写一个Servlet就必须要实现Servlet接口，重写接口中的5个方法，虽然已经能完成要求，但是编写起来还是比较麻烦的，因为我们更关注的其实只有service方法。\"},\"8787\":{\"h\":\"1. Servlet的体系结构（继承结构）\",\"a\":\"_1-servlet的体系结构-继承结构\"},\"8788\":{\"t\":\"Servlet接口有一个实现类：\"},\"8789\":{\"t\":\"GenericServlet抽象类。该类也有一个实现类： \"},\"8790\":{\"t\":\"HttpServlet抽象类\"},\"8791\":{\"t\":\"3-3-1\"},\"8792\":{\"h\":\"2. GenericServlet抽象类\",\"a\":\"_2-genericservlet抽象类\"},\"8793\":{\"t\":\"GenericServlet将Servlet接口中其他的方法做了默认空实现，只将service()方法作为抽象。\"},\"8794\":{\"t\":\"因此：将来定义Servlet类时，可以继承GenericServlet，仅实现service()方法即可\"},\"8795\":{\"h\":\"3. HttpServlet抽象类\",\"a\":\"_3-httpservlet抽象类\"},\"8796\":{\"t\":\"在JavaWeb开发中，我们在Servlet中写的代码其实就是对http协议请求的一种响应。即接收get/post等一些列类型的请求，并进行一些操作。而在每次操作前，首要任务就是判断请求类型，每个servlet的实现类都需要进行判断，非常繁琐，因此有了HttpServlet。\"},\"8797\":{\"t\":\"HttpServlet是对http协议的一种封装，简化操作，该类是没有抽象方法的抽象类。并提供了真的不同请求方式的请求方法。\"},\"8798\":{\"h\":\"4. Servlet类的选择\",\"a\":\"_4-servlet类的选择\"},\"8799\":{\"t\":\"因为我们将来开发B/S架构的web项目，都是针对HTTP协议，所以我们自定义Servlet,会通过继承HttpServlet\"},\"8800\":{\"h\":\"5. HttpServlet的使用\",\"a\":\"_5-httpservlet的使用\"},\"8801\":{\"t\":\"注意1：这里是继承HttpServlet 类，而不是实现，HttpServlet是抽象类，不是接口。\"},\"8802\":{\"t\":\"注意2：HttpServlet类中没有抽象方法，因此只需要按需重写方法即可。\"},\"8803\":{\"h\":\"5.1 请求方式\",\"a\":\"_5-1-请求方式\"},\"8804\":{\"t\":\"请求方式一共有7种，HttpServlet中也对每种请求方式做了定义。\"},\"8805\":{\"t\":\"实际开发中，根据需求，重写对应请求方式的doXxx方法，一般doPost和doGet是要被重写的。\"},\"8806\":{\"t\":\"private static final String METHOD_DELETE = \\\"DELETE\\\"; private static final String METHOD_HEAD = \\\"HEAD\\\"; private static final String METHOD_GET = \\\"GET\\\"; private static final String METHOD_OPTIONS = \\\"OPTIONS\\\"; private static final String METHOD_POST = \\\"POST\\\"; private static final String METHOD_PUT = \\\"PUT\\\"; private static final String METHOD_TRACE = \\\"TRACE\\\"; \"},\"8807\":{\"h\":\"5.2 编写格式\",\"a\":\"_5-2-编写格式\"},\"8808\":{\"t\":\"仅考虑重写doGet和doPost方法。\"},\"8809\":{\"t\":\"@WebServlet(\\\"/demo2\\\") public class ServletDemo2 extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { //super.doGet(req, resp); System.out.println(\\\"GET 请求方式的处理逻辑\\\"); } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { //super.doPost(req, resp); System.out.println(\\\"Post 请求方式的处理逻辑\\\"); } } \"},\"8810\":{\"t\":\"如上方的代码。\"},\"8811\":{\"t\":\"通过浏览器地址栏请求该Servlet，doGet方法被调用了。\"},\"8812\":{\"t\":\"通过表达的post方式请求该Servlet，doPost方法被调用了。\"},\"8813\":{\"h\":\"6. HttpServlet的原理\",\"a\":\"_6-httpservlet的原理\"},\"8814\":{\"t\":\"HttpServlet中为什么要根据请求方式的不同，调用不同的方法? 如何调用的?\"},\"8815\":{\"h\":\"6.1 手动实现HttpServlet的逻辑\",\"a\":\"_6-1-手动实现httpservlet的逻辑\"},\"8816\":{\"t\":\"为了验证第一个问题，这里来通过继承原始的Servlet类，来手动实现server方法\"},\"8817\":{\"t\":\"@WebServlet(\\\"/demo\\\") public class MyServlet extends HttpServlet { @Override public void service(ServletRequest request, ServletResponse response) throws ServletException, IOException { HttpServletRequest request = (HttpServletRequest)req; //1. 获取请求方式 String method = request.getMethod(); //2. 判断 if(\\\"GET\\\".equals(method)){ // get方式的处理逻辑 doGet(req,res); }else if(\\\"POST\\\".equals(method)){ // post方式的处理逻辑 doPost(req,res); } } protected void doPost(ServletRequest req, ServletResponse res) { } protected void doGet(ServletRequest req, ServletResponse res) { } ...//其它四个重写的接口方法暂不考虑 } \"},\"8818\":{\"t\":\"有了MyServlet这个指定的类后，以后我们再编写Servlet类的时候，只需要继承MyHttpServlet，重写父类中的doGet和doPost方法，就可以用来处理GET和POST请求的业务逻辑。\"},\"8819\":{\"t\":\"将来页面发送的是GET请求，则会进入到doGet方法中进行执行，如果是POST请求，则进入到doPost方法。这样代码在编写的时候就相对来说更加简单快捷。\"},\"8820\":{\"t\":\"而HttpServlet的原理也是如此。\"},\"8821\":{\"h\":\"6.2 意义\",\"a\":\"_6-2-意义\"},\"8822\":{\"t\":\"在JavaWeb开发中，我们在Servlet中写的代码其实就是对http协议请求的一种响应。\"},\"8823\":{\"t\":\"接收get/post等一些列类型的请求，并进行一些操作。而在每次操作前，首要任务就是判断请求类型，每个servlet的实现类都需要进行判断，非常繁琐，因此有了HttpServlet。\"},\"8824\":{\"t\":\"HttpServlet是对http协议的一种封装，简化操作，该类是没有抽象方法的抽象类。并提供了真的不同请求方式的请求方法。\"},\"8825\":{\"h\":\"3-4. 路由\"},\"8826\":{\"t\":\"提示\"},\"8827\":{\"t\":\"采用注解的方式配置路由。\"},\"8828\":{\"t\":\"也可以采用XML，不过一般不这么用。\"},\"8829\":{\"h\":\"Ⅰ. 注解配置路由\",\"a\":\"i-注解配置路由\"},\"8830\":{\"h\":\"1. urlPattern\",\"a\":\"_1-urlpattern\"},\"8831\":{\"t\":\"配置路由用的是@WebServlet注解，在该注解中，value和urlPatterns是等效的，都可以用来指定url。且他们都是数组，因此一个Servlet可以配置多个urlPattern。\"},\"8832\":{\"h\":\"2. 语法\",\"a\":\"_2-语法\"},\"8833\":{\"t\":\"在Servlet实现类的@WebServlet注解内。\"},\"8834\":{\"t\":\"@WebServlet(urlPatterns=\\\"/资源路径\\\"); //只有一个属性可以省略urlPatterns @WebServlet(\\\"资源路径\\\"); //不写属性就相当于是value @WebServlet(\\\"/demo\\\"); //必须要加/,不能直接demo public class ServletDemo implements Servlet {...} \"},\"8835\":{\"h\":\"3. 配置项\",\"a\":\"_3-配置项\"},\"8836\":{\"t\":\"WebServer有很多配置项，而且除了路由，所有配置项都有默认值，且采用默认值即可。因此只需要配置一下路由。\"},\"8837\":{\"t\":\"@Target({ElementType.TYPE}) @Retention(RetentionPolicy.RUNTIME) @Documented public @interface WebServlet { String name() default \\\"\\\";//相当于<Servlet-name> String[] value() default {};//代表urlPatterns()属性配置 String[] urlPatterns() default {};//相当于<url-pattern> int loadOnStartup() default -1;//相当于<load-on-startup> } \"},\"8838\":{\"h\":\"Ⅱ. 匹配模式\",\"a\":\"ii-匹配模式\"},\"8839\":{\"t\":\"urlPattern一共有四种匹配模式：精准、目录、扩展名、任意。\"},\"8840\":{\"h\":\"1. 精确匹配\",\"a\":\"_1-精确匹配\"},\"8841\":{\"t\":\"配置的路径和访问的路径是一样的。\"},\"8842\":{\"t\":\"3-4-1\"},\"8843\":{\"t\":\"@WebServlet(urlPatterns = \\\"/user/select\\\") //访问路径：http://localhost:8080/web-demo/user/select \"},\"8844\":{\"h\":\"2. 目录匹配\",\"a\":\"_2-目录匹配\"},\"8845\":{\"t\":\"3-4-2\"},\"8846\":{\"t\":\"/* 代表的是零或多个层级访问目录。\"},\"8847\":{\"t\":\"只要是/*前面的能匹配到，后面是什么都无所谓。\"},\"8848\":{\"t\":\"@WebServlet(urlPatterns = \\\"/user/*\\\") //访问路径http://localhost:8080/web-demo/user/任意 \"},\"8849\":{\"h\":\"3. 扩展名匹配\",\"a\":\"_3-扩展名匹配\"},\"8850\":{\"t\":\"该匹配规则和其他三个是不同的，它只识别扩展名。\"},\"8851\":{\"t\":\"3-4-3\"},\"8852\":{\"t\":\"如果路径配置的不是扩展名，那么在路径的前面就必须要加/否则会报错\"},\"8853\":{\"t\":\"如果路径配置的是*.do,那么在*.do的前面不能加/,否则会报错\"},\"8854\":{\"t\":\"@WebServlet(urlPatterns = \\\"*.do\\\") //访问路径http://localhost:8080/web-demo/任意.do \"},\"8855\":{\"h\":\"4. 任意匹配\",\"a\":\"_4-任意匹配\"},\"8856\":{\"t\":\"3-4-3\"},\"8857\":{\"t\":\"@WebServlet(urlPatterns = \\\"/*\\\") //访问路径http://localhost:8080/demo-web/任意 \"},\"8858\":{\"t\":\"defaultServlet：Tomcat中有一个DefaultServlet，当其他的url-pattern都匹配不上时都会走这个Servlet\"},\"8859\":{\"t\":\"/ 与 /*：/ 与 /* 都表示任意匹配。 /*的优先级 > /\"},\"8860\":{\"t\":\"使用 / 会覆盖掉defaultServlet。\"},\"8861\":{\"t\":\"defaultServlet的覆盖：如果项目中的Servlet配置了 \\\"/\\\",会覆盖掉tomcat中的DefaultServlet \"},\"8862\":{\"t\":\"DefaultServlet是用来处理静态资源，如果配置了\\\"/\\\"会把默认的覆盖掉，就会引发请求静态资源的时候没有走默认的而是走了自定义的Servlet类，最终导致静态资源不能被访问\"},\"8863\":{\"h\":\"5. 优先级\",\"a\":\"_5-优先级\"},\"8864\":{\"t\":\"精确匹配 > 目录匹配> 扩展名匹配 > /* > /\"},\"8865\":{\"h\":\"Ⅲ. XML配置路由\",\"a\":\"iii-xml配置路由\"},\"8866\":{\"t\":\"提示\"},\"8867\":{\"t\":\"略，用注解就可以了。\"},\"8868\":{\"h\":\"3-5. 请求与响应\"},\"8869\":{\"h\":\"Ⅰ. 请求与响应概述\",\"a\":\"i-请求与响应概述\"},\"8870\":{\"h\":\"介绍\",\"a\":\"介绍\"},\"8871\":{\"t\":\"Request是请求对象，Response是响应对象。\"},\"8872\":{\"t\":\"这两个对象都是Servlet接口中，service方法的参数。request和response对象是由服务器创建的，我们来使用它们。request对象是来获取请求消息，response对象是来设置响应消息\"},\"8873\":{\"h\":\"1. 完整的请求处理过程\",\"a\":\"_1-完整的请求处理过程\"},\"8874\":{\"t\":\"3-5-1\"},\"8875\":{\"t\":\"如下：这只是基本的处理过程，省略很多非核心步骤，如：过滤\"},\"8876\":{\"t\":\"前端：客户端发起请求\"},\"8877\":{\"t\":\"Tomcat接收到请求： \"},\"8878\":{\"t\":\"①tomcat服务器会根据请求url中的资源路径，创建对应的Servlet实现类的对象。\"},\"8879\":{\"t\":\"②tomcat服务器,会创建request和response对象，request对象中封装请求消息数据。\"},\"8880\":{\"t\":\"③tomcat将request和response两个对象传递给service方法，并调用service方法。\"},\"8881\":{\"t\":\"service方法被调用执行 \"},\"8882\":{\"t\":\"在service方法中，程序员可以通过request对象获取请求消息数据\"},\"8883\":{\"t\":\"也可以通过response对象设置相应消息数据\"},\"8884\":{\"t\":\"Tomcat从response对象中拿到程序中设置的响应消息数据 \"},\"8885\":{\"t\":\"tomcat向之前发起请求的浏览器返回响应\"},\"8886\":{\"t\":\"前端：浏览器接收响应\"},\"8887\":{\"h\":\"2. request的作用：获取请求数据\",\"a\":\"_2-request的作用-获取请求数据\"},\"8888\":{\"t\":\"request对象是用来封装请求数据的对象\"},\"8889\":{\"t\":\"浏览器会发送HTTP请求到后台服务器[ Tomcat ] HTTP的请求中会包含很多请求数据[ 请求行+请求头+请求体 ]\"},\"8890\":{\"t\":\"后台服务器[ Tomcat ]会对HTTP请求中的数据进行解析并把解析结果存入到一个对象中\"},\"8891\":{\"t\":\"所存入的对象即为request对象，所以我们可以从request对象中获取请求的相关参数\"},\"8892\":{\"t\":\"获取到数据后就可以继续后续的业务，比如获取用户名和密码就可以实现登录操作的相关业务\"},\"8893\":{\"h\":\"3. response的作用：设置响应数据\",\"a\":\"_3-response的作用-设置响应数据\"},\"8894\":{\"t\":\"response对象是用来封装响应数据的对象\"},\"8895\":{\"t\":\"业务处理完后，后台就需要给前端返回业务处理的结果即响应数据\"},\"8896\":{\"t\":\"把响应数据封装到response对象中\"},\"8897\":{\"t\":\"后台服务器[ Tomcat ]会解析response对象,按照[ 响应行+响应头+响应体 ]格式拼接结果\"},\"8898\":{\"t\":\"浏览器最终解析结果，把内容展示在浏览器给用户浏览\"},\"8899\":{\"h\":\"Ⅱ. Request继承体系\",\"a\":\"ii-request继承体系\"},\"8900\":{\"h\":\"介绍\",\"a\":\"介绍-1\"},\"8901\":{\"t\":\"当我们的Servlet类实现的是Servlet接口的时候，service方法中的参数是ServletRequest和ServletResponse\"},\"8902\":{\"t\":\"当我们的Servlet类继承的是HttpServlet类的时候，doGet和doPost方法中的参数就变成HttpServletRequest和HttpServletReponse\"},\"8903\":{\"t\":\"和Servlet类似，Request和Response也存在自己的继承体系。\"},\"8904\":{\"h\":\"1.Request的继承体系\",\"a\":\"_1-request的继承体系\"},\"8905\":{\"t\":\"3-5-2\"},\"8906\":{\"t\":\"ServletRequest和HttpServletRequest都是Java提供的，ServletRequest和HttpServletRequest是继承关系，并且两个都是接口，接口是无法创建对象。我们真正使用的类是RequestFacade类。\"},\"8907\":{\"h\":\"2. RequestFacade\",\"a\":\"_2-requestfacade\"},\"8908\":{\"t\":\"真正使用的Request对象的类是：RequestFacade（根据多态显示的类是HttpServletRequest）\"},\"8909\":{\"t\":\"该类实现了HttpServletRequest接口，也间接实现了ServletRequest接口。\"},\"8910\":{\"t\":\"Servlet类中的service方法、doGet方法或者是doPost方法最终都是由Web服务器- [ Tomcat ]来调用的，所以Tomcat提供了方法参数接口的具体实现类，并完成了对象的创建\"},\"8911\":{\"t\":\"要想了解RequestFacade中都提供了哪些方法，我们可以直接查看JavaEE的API文档中关于ServletRequest和HttpServletRequest的接口文档，因为RequestFacade实现了其接口就需要重写接口中的方法\"},\"8912\":{\"t\":\"//doGet是HttpServlet中的Service自动调用的方法，参数跟Service一样 protected void doGet(HttpServletRequest req, HttpServletResponse resp) \"},\"8913\":{\"h\":\"3. 总结\",\"a\":\"_3-总结\"},\"8914\":{\"t\":\"Request的继承体系为ServletRequest-->HttpServletRequest-->RequestFacade\"},\"8915\":{\"t\":\"Tomcat需要解析请求数据，封装为request对象,并且创建request对象传递到service方法\"},\"8916\":{\"t\":\"使用request对象，可以查阅JavaEE API文档的HttpServletRequest接口中方法说明\"},\"8917\":{\"h\":\"Ⅲ. Response继承体系\",\"a\":\"iii-response继承体系\"},\"8918\":{\"t\":\"Reponse的继承体系和Request的继承体系也非常相似\"},\"8919\":{\"h\":\"1. 继承关系\",\"a\":\"_1-继承关系\"},\"8920\":{\"t\":\"3-5-3\"},\"8921\":{\"h\":\"2. ResponseFacade\",\"a\":\"_2-responsefacade\"},\"8922\":{\"t\":\"和RequestFacade一样，只是Request变成了Response\"},\"8923\":{\"h\":\"3-6. Request\"},\"8924\":{\"h\":\"Ⅰ. 获取请求行\",\"a\":\"i-获取请求行\"},\"8925\":{\"h\":\"请求行\",\"a\":\"请求行\"},\"8926\":{\"t\":\"请求行包含三块内容，分别是请求方式、请求资源路径、HTTP协议及版本\"},\"8927\":{\"t\":\"对于这三部分内容，request对象都提供了对应的API方法来获取\"},\"8928\":{\"t\":\"3-6-1\"},\"8929\":{\"h\":\"1. 常用请求方法\",\"a\":\"_1-常用请求方法\"},\"8930\":{\"t\":\"这些方法都是返回String类型(或StringBuffer类型)的getXxx方法。\"},\"8931\":{\"t\":\"getMethod：获取请求方式 \"},\"8932\":{\"t\":\"get请求就返回：GET；\"},\"8933\":{\"t\":\"getContextPath：获取虚拟目录 \"},\"8934\":{\"t\":\"即项目的访问路径，该路径是通过Tomcat的Deployment->Application context配置的。\"},\"8935\":{\"t\":\"如果配置的是 / ，那么该方法将什么都不返回。\"},\"8936\":{\"t\":\"getRequestURL：获取URL，统一资源定位符，完整的网址\"},\"8937\":{\"t\":\"getRequestURI：获取URI，统一资源标识符，基础网址后面的部分。\"},\"8938\":{\"t\":\"getServletPath()：获取Servlet路径，Servlet类中定义的路由\"},\"8939\":{\"t\":\"getProtocol()： 获取协议及版本，如：HTTP/1.1\"},\"8940\":{\"t\":\"getQueryString：获取get的请求参数，url？号后面的键值对\"},\"8941\":{\"t\":\"getRemoteAddr()：获取客户机的IP地址\"},\"8942\":{\"h\":\"2. 使用测试\",\"a\":\"_2-使用测试\"},\"8943\":{\"t\":\"启动服务器，访问：http://localhost:8080/demo3?uname=sgugo\"},\"8944\":{\"t\":\"@WebServlet(name = \\\"ServletDemo3\\\", value = \\\"/demo3\\\") public class ServletDemo3 extends HttpServlet { @Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { String method = request.getMethod(); System.out.println(method); //GET String contextPath = request.getContextPath(); System.out.println(contextPath); //配置的是 / 什么都不返回 StringBuffer requestURL = request.getRequestURL(); System.out.println(requestURL); //http://localhost:8080/demo3 String requestURI = request.getRequestURI(); System.out.println(requestURI); // /demo3 String servletPath = request.getServletPath(); System.out.println(servletPath); // /demo3 String protocol = request.getProtocol(); System.out.println(protocol); // HTTP/1.1 String queryString = request.getQueryString(); System.out.println(queryString); // uname=sgugo String ip = request.getRemoteAddr(); System.out.println(ip); // 0:0:0:0:0:0:0:1 } @Override protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { } } \"},\"8945\":{\"h\":\"Ⅱ. 获取请求头\",\"a\":\"ii-获取请求头\"},\"8946\":{\"t\":\"HTTP请求头的数据是键值对的形式key：value\"},\"8947\":{\"t\":\"可以根据请求头，来获取对应的值。\"},\"8948\":{\"h\":\"1. getHeader：获取请求头的值\",\"a\":\"_1-getheader-获取请求头的值\"},\"8949\":{\"t\":\"String getHeader(String name); \"},\"8950\":{\"h\":\"2. 使用测试\",\"a\":\"_2-使用测试-1\"},\"8951\":{\"t\":\"protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { String host = request.getHeader(\\\"host\\\"); String accept = request.getHeader(\\\"accept\\\"); System.out.println(host); // localhost:8080 System.out.println(accept); //text/html,application/xhtml+xml,... } \"},\"8952\":{\"h\":\"3. 获取所有请求头的名称\",\"a\":\"_3-获取所有请求头的名称\"},\"8953\":{\"t\":\"可以直接进行iterate遍历getHeaderNames方法的结果，获取所有的请求头。\"},\"8954\":{\"t\":\"不常用，因为请求头的名字都是固定的，没必要通过这个方法获取，多走这一步。\"},\"8955\":{\"t\":\"Enumeration<String> getHeaderNames(); ============================================= protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { Enumeration<String> headers = request.getHeaderNames(); //循环遍历获取打印请求头 while(headers.hasMoreElements()) { System.out.println(headers.nextElement()); } } \"},\"8956\":{\"t\":\"请求结果如下：\"},\"8957\":{\"t\":\"host\"},\"8958\":{\"t\":\"connection\"},\"8959\":{\"t\":\"cache-control\"},\"8960\":{\"t\":\"sec-ch-ua\"},\"8961\":{\"t\":\"sec-ch-ua-mobile\"},\"8962\":{\"t\":\"sec-ch-ua-platform\"},\"8963\":{\"t\":\"upgrade-insecure-requests\"},\"8964\":{\"t\":\"user-agent\"},\"8965\":{\"t\":\"accept\"},\"8966\":{\"t\":\"sec-fetch-site\"},\"8967\":{\"t\":\"sec-fetch-mode\"},\"8968\":{\"t\":\"sec-fetch-user\"},\"8969\":{\"t\":\"sec-fetch-dest\"},\"8970\":{\"t\":\"accept-encoding\"},\"8971\":{\"t\":\"accept-language\"},\"8972\":{\"t\":\"cookie\"},\"8973\":{\"h\":\"Ⅲ. 获取请求体\",\"a\":\"iii-获取请求体\"},\"8974\":{\"h\":\"1. 请求体\",\"a\":\"_1-请求体\"},\"8975\":{\"t\":\"浏览器在发送GET请求的时候是没有请求体的，所以需要把请求方式变更为POST，请求体中的数据格式如下:\"},\"8976\":{\"t\":\"3-6-2\"},\"8977\":{\"h\":\"2. 获取请求体的方式\",\"a\":\"_2-获取请求体的方式\"},\"8978\":{\"t\":\"对于请求体中的数据，Request对象提供了如下两种方式来获取其中的数据。\"},\"8979\":{\"t\":\"都是先获取流对象，再从流对象中拿数据（读取流）。\"},\"8980\":{\"h\":\"2.1 获取字节输入流\",\"a\":\"_2-1-获取字节输入流\"},\"8981\":{\"t\":\"如果前端发送的是字节数据，比如传递的是文件数据，则使用该方法\"},\"8982\":{\"t\":\"ServletInputStream getInputStream() \"},\"8983\":{\"h\":\"2.2 获取字符输入流\",\"a\":\"_2-2-获取字符输入流\"},\"8984\":{\"t\":\"如果前端发送的是纯文本数据，则使用该方法\"},\"8985\":{\"t\":\"BufferedReader getReader() \"},\"8986\":{\"h\":\"3. 使用测试\",\"a\":\"_3-使用测试\"},\"8987\":{\"h\":\"3.1 前端表单\",\"a\":\"_3-1-前端表单\"},\"8988\":{\"t\":\"//file：index.html <form action=\\\"/demo3\\\" method=\\\"post\\\"> <input type=\\\"text\\\" name=\\\"uname\\\"> <input type=\\\"password\\\" name=\\\"pwd\\\"> <input type=\\\"submit\\\"> </form> \"},\"8989\":{\"h\":\"3.2 Servlet\",\"a\":\"_3-2-servlet\"},\"8990\":{\"t\":\"protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { //1. 获取字符输入流 BufferedReader br = request.getReader(); //2. 读取数据 String line = br.readLine(); //每读一行就是一个请求键值对 System.out.println(line); //uname=Aaron&pwd=12354 } \"},\"8991\":{\"h\":\"4. 注意事项\",\"a\":\"_4-注意事项\"},\"8992\":{\"t\":\"BufferedReader流是通过request对象来获取的，当请求完成后request对象就会被销毁，request对象被销毁后，BufferedReader流就会自动关闭，所以此处就不需要手动关闭流了。\"},\"8993\":{\"h\":\"Ⅳ. 请求参数\",\"a\":\"iv-请求参数\"},\"8994\":{\"t\":\"请求参数的处理方式\"},\"8995\":{\"t\":\"get方式： getQueryString()\"},\"8996\":{\"t\":\"post方式：getReader();\"},\"8997\":{\"h\":\"1. 需求&问题\",\"a\":\"_1-需求-问题\"},\"8998\":{\"t\":\"一个Servlet类中一般都要定义doGet方法和doPost方法。\"},\"8999\":{\"t\":\"假如，某个Servlet实现类，既可以使用Get方法访问，又可以使用post方法访问，且两种方法方式的代码逻辑都是一样的。此时我们需要分别在doGet方法和doPost方法中，写两份几乎一样的代码，仅获取参数的代码不同。\"},\"9000\":{\"t\":\"问题：这种情况很常见，如果都写两份代码，太冗余了。\"},\"9001\":{\"h\":\"2. 解决方案\",\"a\":\"_2-解决方案\"},\"9002\":{\"t\":\"逻辑代码只写在doGet方法中，并在方法中判断请求方式是get还是post，根据请求方式的不通，调用对应的方法来获取参数。\"},\"9003\":{\"t\":\"而在doPost方法中，只需要去掉用doGet方法即可，如下：\"},\"9004\":{\"t\":\"@WebServlet(\\\"/req1\\\") public class RequestDemo1 extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { String method = req.getMethod(); //获取请求方式 String params = \\\"\\\";//获取请求参数 if(\\\"GET\\\".equals(method)){ params = req.getQueryString(); }else if(\\\"POST\\\".equals(method)){ BufferedReader reader = req.getReader(); params = reader.readLine(); } ...//后续逻辑处理 } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { this.doGet(req,resp);//调用get方法，并传入参数 } } \"},\"9005\":{\"h\":\"3. 方案优化\",\"a\":\"_3-方案优化\"},\"9006\":{\"t\":\"每个servlet类都需要进行判断，还是有点冗余\"},\"9007\":{\"t\":\"Request对象内部提供了更加强大的方法，解决了上述问题，不用再进行判断，且request提供的方法功能更强大。以后只需要调用request提供的方法即可，\"},\"9008\":{\"h\":\"Ⅴ. Request参数处理\",\"a\":\"v-request参数处理\"},\"9009\":{\"h\":\"1. 底层原理\",\"a\":\"_1-底层原理\"},\"9010\":{\"h\":\"1.1 根据不同的请求方式获取请求参数\",\"a\":\"_1-1-根据不同的请求方式获取请求参数\"},\"9011\":{\"t\":\"获取的内容如下:\"},\"9012\":{\"t\":\"3-6-3\"},\"9013\":{\"h\":\"1.2 把获取到的内容进行分割\",\"a\":\"_1-2-把获取到的内容进行分割\"},\"9014\":{\"t\":\"内容如下:\"},\"9015\":{\"t\":\"3-6-4\"},\"9016\":{\"h\":\"1.3 把分割后端数据，存入到一个Map集合中\",\"a\":\"_1-3-把分割后端数据-存入到一个map集合中\"},\"9017\":{\"t\":\"注意：请求参数的键都是字符串，值也是字符串，但可能有多个，所以Map的值的类型为String数组。\"},\"9018\":{\"t\":\"3-6-5\"},\"9019\":{\"h\":\"2. 相关方法\",\"a\":\"_2-相关方法\"},\"9020\":{\"t\":\"基于上述理论，request对象为我们提供了如下方法\"},\"9021\":{\"t\":\"//getParameterMap：获取所有参数Map集合 Map<String,String[]> getParameterMap() //getParameterValues：根据名称获取参数值（数组），如复选框 String[] getParameterValues(String name) //getParameter：根据名称获取参数值(单个值)【常用】 String getParameter(String name) //getParameterNames：获取所有请求的参数名称 Enumeration<String> getParameterNames() \"},\"9022\":{\"h\":\"3. 示例\",\"a\":\"_3-示例\"},\"9023\":{\"h\":\"3.1 前端代码\",\"a\":\"_3-1-前端代码\"},\"9024\":{\"t\":\"一个form表单，其中的method可以选择get和post分别进行测试\"},\"9025\":{\"t\":\"<form action=\\\"/request-demo/req2\\\" method=\\\"get\\\"> <input type=\\\"text\\\" name=\\\"username\\\"><br> <input type=\\\"password\\\" name=\\\"password\\\"><br> <input type=\\\"checkbox\\\" name=\\\"hobby\\\" value=\\\"1\\\"> 游泳 <input type=\\\"checkbox\\\" name=\\\"hobby\\\" value=\\\"2\\\"> 爬山 <br> <input type=\\\"submit\\\"> </form> \"},\"9026\":{\"h\":\"3.2 Servlet\",\"a\":\"_3-2-servlet-1\"},\"9027\":{\"t\":\"@WebServlet(\\\"/req2\\\") public class RequestDemo2 extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { //1. 获取所有参数的Map集合 Map<String, String[]> map = req.getParameterMap(); for (String key : map.keySet()) { System.out.print(key+\\\":\\\");// username:zhangsan lisi String[] values = map.get(key);//获取值 for (String value : values) { System.out.print(value + \\\" \\\"); } System.out.println(); } //2. 根据key获取参数值，数组 String[] hobbies = req.getParameterValues(\\\"hobby\\\"); for (String hobby : hobbies) { System.out.println(hobby); } //3. 根据key 获取单个参数值 String username = req.getParameter(\\\"username\\\"); String password = req.getParameter(\\\"password\\\"); System.out.println(username); System.out.println(password); } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { this.doGet(req,resp); //直接转发 } } \"},\"9028\":{\"h\":\"4. 总结\",\"a\":\"_4-总结\"},\"9029\":{\"t\":\"request.getParameter()方法使用的频率会比较高\"},\"9030\":{\"t\":\"以后再写代码的时候，就只需要按照如下格式来编写:\"},\"9031\":{\"t\":\"public class RequestDemo1 extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { //采用request提供的获取请求参数的通用方式来获取请求参数 //编写其他的业务代码... } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { this.doGet(req,resp); } } \"},\"9032\":{\"h\":\"Ⅵ. 乱码问题\",\"a\":\"vi-乱码问题\"},\"9033\":{\"t\":\"不管是GET还是POST请求，在发送的请求参数中如果有中文，在后台接收的时候，都会出现中文乱码的问题\"},\"9034\":{\"t\":\"提示\"},\"9035\":{\"t\":\"注：当前版本的Tomcat已经解决了GET方式的乱码问题，只需手动解决POST乱码问题即可。\"},\"9036\":{\"h\":\"控制台乱码\",\"a\":\"控制台乱码\"},\"9037\":{\"t\":\"注意：在测试乱码问题的代码时，一定要先处理控制台乱码，不然会干扰测试结果。如下图位置，添加：-Dfile.encoding=UTF-8\"},\"9038\":{\"t\":\"3-6-6\"},\"9039\":{\"h\":\"1. 乱码原因\",\"a\":\"_1-乱码原因\"},\"9040\":{\"t\":\"POST的请求参数是通过request的getReader()来获取流中的数据\"},\"9041\":{\"t\":\"TOMCAT在获取流的时候采用的编码是ISO-8859-1\"},\"9042\":{\"t\":\"ISO-8859-1编码是不支持中文的，所以会出现乱码\"},\"9043\":{\"h\":\"2. 解决方案\",\"a\":\"_2-解决方案-1\"},\"9044\":{\"t\":\"页面设置的编码格式为UTF-8\"},\"9045\":{\"t\":\"把TOMCAT在获取流数据之前的编码设置为UTF-8\"},\"9046\":{\"t\":\"通过request.setCharacterEncoding(\\\"UTF-8\\\")设置编码,UTF-8也可以写成小写\"},\"9047\":{\"h\":\"3. 代码\",\"a\":\"_3-代码\"},\"9048\":{\"t\":\"//request对象在获取请求参数前先修改编码 request.setCharacterEncoding(\\\"UTF-8\\\"); request.getParameter(\\\"uname\\\");//获取请求参数 \"},\"9049\":{\"h\":\"4. 说明\",\"a\":\"_4-说明\"},\"9050\":{\"t\":\"POST请求中文乱码的问题就已经解决，但是这种方案不适用于GET请求. GET请求获取请求参数的方式是request.getQueryString() POST请求获取请求参数的方式是request.getReader()\"},\"9051\":{\"t\":\"不过get请求的乱码Tomcat已解决了。\"},\"9052\":{\"h\":\"5. 总结\",\"a\":\"_5-总结\"},\"9053\":{\"t\":\"一行代码解决所有乱码问题\"},\"9054\":{\"t\":\"request.setCharacterEncoding(\\\"utf-8\\\"); \"},\"9055\":{\"h\":\"3-7. Response\"},\"9056\":{\"h\":\"Ⅰ. Response\",\"a\":\"i-response\"},\"9057\":{\"t\":\"Response对象是用来做HTTP响应的，共分为三个部分：响应行、响应头、响应体。\"},\"9058\":{\"t\":\"Response对象提供了不同的方法还出了这三种响应内容。\"},\"9059\":{\"h\":\"1. 响应行\",\"a\":\"_1-响应行\"},\"9060\":{\"t\":\"3-7-1\"},\"9061\":{\"t\":\"对于响应行，比较常用的是设置响应状态码\"},\"9062\":{\"t\":\"void setStatus(int sc); \"},\"9063\":{\"h\":\"2. 响应头\",\"a\":\"_2-响应头\"},\"9064\":{\"t\":\"3-7-1\"},\"9065\":{\"t\":\"void setHeader(String name,String value); \"},\"9066\":{\"h\":\"3. 对于响应体，是通过字符、字节输出流的方式往浏览器写，\",\"a\":\"_3-对于响应体-是通过字符、字节输出流的方式往浏览器写\"},\"9067\":{\"t\":\"获取字符输出流\"},\"9068\":{\"t\":\"PrintWriter getWriter(); \"},\"9069\":{\"t\":\"获取字节输出流\"},\"9070\":{\"t\":\"ServletOutputStream getOutputStream(); \"},\"9071\":{\"h\":\"Ⅱ. 响应字符数据\",\"a\":\"ii-响应字符数据\"},\"9072\":{\"t\":\"Response响应字符数据\"},\"9073\":{\"h\":\"1. 步骤\",\"a\":\"_1-步骤\"},\"9074\":{\"t\":\"要想将字符数据写回到浏览器，我们需要两个步骤:\"},\"9075\":{\"t\":\"通过Response对象获取字符输出流： PrintWriter writer = response.getWriter();\"},\"9076\":{\"t\":\"通过字符输出流写数据: writer.write(\\\"aaa\\\");\"},\"9077\":{\"h\":\"2. 示例：向浏览器响应字符hello\",\"a\":\"_2-示例-向浏览器响应字符hello\"},\"9078\":{\"t\":\"浏览器访问：http://localhost:8080/demo1，浏览器页面上显示：hello\"},\"9079\":{\"t\":\"@WebServlet(\\\"/demo1\\\") public class ResponseDemo1 extends HttpServlet { @Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { PrintWriter writer = response.getWriter(); writer.write(\\\"hello\\\"); } } \"},\"9080\":{\"h\":\"3. 设置响应的数据类型\",\"a\":\"_3-设置响应的数据类型\"},\"9081\":{\"t\":\"响应的字符数据，默认是按照text解析的，也可以通过修改响应头，改为其他方式解析。\"},\"9082\":{\"t\":\"response.setContentType(\\\"text/html;charset=utf-8\\\");//直接修改ContextType response.setHeader(\\\"context-type\\\",\\\"text/html\\\");//修改响应头的方式修改响应类型 \"},\"9083\":{\"h\":\"4. 示例：向浏览器响应html标签\",\"a\":\"_4-示例-向浏览器响应html标签\"},\"9084\":{\"t\":\"浏览器访问：http://localhost:8080/demo1，浏览器页面上显示：被`h1`渲染后的hello\"},\"9085\":{\"t\":\"response.setContentType(\\\"text/html\\\"); PrintWriter writer = response.getWriter(); writer.write(\\\"<h1>hello<h1>\\\"); \"},\"9086\":{\"h\":\"5. 注意\",\"a\":\"_5-注意\"},\"9087\":{\"t\":\"一次请求响应结束后，response对象就会被销毁掉，所以不要手动关闭流。\"},\"9088\":{\"h\":\"Ⅲ. 响应字节数据\",\"a\":\"iii-响应字节数据\"},\"9089\":{\"h\":\"1. 实现步骤\",\"a\":\"_1-实现步骤\"},\"9090\":{\"t\":\"要想将字节数据写回到浏览器，我们需要两个步骤:\"},\"9091\":{\"t\":\"通过Response对象获取字节输出流：ServletOutputStream outputStream = response.getOutputStream();\"},\"9092\":{\"t\":\"通过字节输出流写数据: outputStream.write(字节数据);\"},\"9093\":{\"h\":\"2. 示例：向浏览器响应一张图片\",\"a\":\"_2-示例-向浏览器响应一张图片\"},\"9094\":{\"t\":\"先从硬盘读取一个图片文件，然后获取字节输出流，进行字节流对拷。\"},\"9095\":{\"t\":\"//1. 读取文件 FileInputStream fis = new FileInputStream(\\\"d://a.jpg\\\"); //2. 获取response字节输出流 ServletOutputStream os = response.getOutputStream(); //3. 完成流的copy byte[] buff = new byte[1024]; int len = 0; while ((len = fis.read(buff))!= -1){ os.write(buff,0,len); } fis.close(); \"},\"9096\":{\"h\":\"第三方工具对拷\",\"a\":\"第三方工具对拷\"},\"9097\":{\"t\":\"上述代码中，对于流的copy的代码还是比较复杂的，所以我们可以使用别人提供好的方法来简化代码的开发。\"},\"9098\":{\"t\":\"如：commons-io\"},\"9099\":{\"t\":\"//1. 读取文件 FileInputStream fis = new FileInputStream(\\\"d://a.jpg\\\"); //2. 获取response字节输出流 ServletOutputStream os = response.getOutputStream(); IOUtils.copy(fis,os); fis.close(); \"},\"9100\":{\"h\":\"3. 示例：以字节的形式输出字符\",\"a\":\"_3-示例-以字节的形式输出字符\"},\"9101\":{\"t\":\"//1.设置编码 response.setContentType(\\\"text/html;charset=utf-8\\\"); //2.获取字节输出流 ServletOutputStream sos = response.getOutputStream(); //3.用直接流输出字符(并设置好编码) sos.write(\\\"你好\\\".getBytes(\\\"utf-8\\\")); \"},\"9102\":{\"h\":\"3-8. 转发与重定向\"},\"9103\":{\"h\":\"Ⅰ. Request 请求转发\",\"a\":\"i-request-请求转发\"},\"9104\":{\"h\":\"1. 介绍\",\"a\":\"_1-介绍\"},\"9105\":{\"t\":\"浏览器发送请求给服务器，服务器中对应的资源A接收到请求\"},\"9106\":{\"t\":\"资源A处理完请求后将请求发给资源B\"},\"9107\":{\"t\":\"资源B处理完后将结果响应给浏览器\"},\"9108\":{\"t\":\"请求从资源A到资源B的过程就叫请求转发\"},\"9109\":{\"t\":\"3-8-1\"},\"9110\":{\"h\":\"2. 请求转发的实现方式\",\"a\":\"_2-请求转发的实现方式\"},\"9111\":{\"t\":\"采用request对象的getRequestDispatch方法获取请求转发器对象，然后使用请求转发器对象的forward方法进行转发。\"},\"9112\":{\"t\":\"RequestDispatcher getRequestDispatcher(String path) forward(ServletRequest request, ServletResponse response) ======================================================== requset.getRequestDispatcher(\\\"资源B路径\\\").forward(req,resp); \"},\"9113\":{\"h\":\"3. 转发时共享数据\",\"a\":\"_3-转发时共享数据\"},\"9114\":{\"t\":\"在转发请求的同时，共享一些数据。\"},\"9115\":{\"t\":\"域对象：一个有作用范围的对象，可以在范围内共享数据。\"},\"9116\":{\"t\":\"request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据\"},\"9117\":{\"h\":\"相关方法：\",\"a\":\"相关方法\"},\"9118\":{\"t\":\"转发时，可以进行数据的共享，需要使用request对象提供的三个方法\"},\"9119\":{\"t\":\"//以键值对的形式存储数据到request域[范围,数据是存储在request对象]中 void setAttribute(String name,Object o); //根据key获取值 Object getAttribute(String name); //根据key删除该键值对 void removeAttribute(String name); \"},\"9120\":{\"h\":\"4. 示例：进行请求转发同时共享数据\",\"a\":\"_4-示例-进行请求转发同时共享数据\"},\"9121\":{\"t\":\"在浏览器中输入：http://localhost:8080/demo5\"},\"9122\":{\"t\":\"执行结果：控制台打印：demo5 demo6，hello，\"},\"9123\":{\"t\":\"结论：/demo5和/demo6的doGet方法都被执行了，且共享数据成功。\"},\"9124\":{\"t\":\"@WebServlet(\\\"/demo5\\\") public class ServletDemo5 extends HttpServlet { @Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { System.out.println(\\\"Demo5\\\"); //存储数据 request.setAttribute(\\\"msg\\\",\\\"hello\\\"); //进行转发 request.getRequestDispatcher(\\\"/demo6\\\").forward(request,response); } } //ServletDemo6 @WebServlet(\\\"/demo6\\\") public class ServletDemo6 extends HttpServlet { @Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { System.out.println(\\\"demo6\\\"); //获取转发时发送的共享数据 Object msg = request.getAttribute(\\\"msg\\\"); System.out.println(msg); } } \"},\"9125\":{\"h\":\"5. 请求转发的特点\",\"a\":\"_5-请求转发的特点\"},\"9126\":{\"t\":\"浏览器地址栏路径不发生变化：虽然后台从/demo5转发到/demo6,但是浏览器的地址一直是/demo5,未发生变化\"},\"9127\":{\"t\":\"只能转发到当前服务器的内部资源：不能从一个服务器通过转发访问另一台服务器\"},\"9128\":{\"t\":\"一次请求，可以在转发资源间使用request共享数据\"},\"9129\":{\"h\":\"Ⅱ. Response 重定向\",\"a\":\"ii-response-重定向\"},\"9130\":{\"t\":\"Response重定向(redirect)：一种资源跳转方式。\"},\"9131\":{\"t\":\"3-8-2\"},\"9132\":{\"h\":\"1. 重定向的过程\",\"a\":\"_1-重定向的过程\"},\"9133\":{\"t\":\"浏览器发送请求给服务器，服务器中对应的资源A接收到请求\"},\"9134\":{\"t\":\"资源A现在无法处理该请求，就会给浏览器响应一个302的状态码+location的一个访问资源B的路径\"},\"9135\":{\"t\":\"浏览器接收到响应状态码为302就会重新发送请求到location对应的访问地址去访问资源B\"},\"9136\":{\"t\":\"资源B接收到请求后进行处理并最终给浏览器响应结果，这整个过程就叫重定向\"},\"9137\":{\"h\":\"2. 重定向的实现方式\",\"a\":\"_2-重定向的实现方式\"},\"9138\":{\"t\":\"需要响应对象，调用setStatus方法响应一个302状态码，然后设置location响应头，响应重定向后的访问路径。\"},\"9139\":{\"t\":\"response.setStatus(302); response.setHeader(\\\"location\\\",\\\"资源B的访问路径\\\"); //直接进行重定向 response.sendRedirect(\\\"资源访问路径\\\") //相当于把上面两步合成了一步 \"},\"9140\":{\"h\":\"3. 示例：重定向\",\"a\":\"_3-示例-重定向\"},\"9141\":{\"t\":\"向ResponseDemo1类发送请求，ResponseDemo1类将请求转发给ResponseDemo2。\"},\"9142\":{\"h\":\"3.1 ResponseDemo1\",\"a\":\"_3-1-responsedemo1\"},\"9143\":{\"t\":\"@WebServlet(\\\"/demo1\\\") public class ResponseDemo1 extends HttpServlet { @Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { System.out.println(\\\"ResponseDemo1\\\"); response.setStatus(302);//设置响应状态码 response.setHeader(\\\"Location\\\",\\\"/demo2\\\");//通过响应头进行重定向 } } \"},\"9144\":{\"h\":\"3.2 ResponseDemo2\",\"a\":\"_3-2-responsedemo2\"},\"9145\":{\"t\":\"@WebServlet(\\\"/demo2\\\") public class ResponseDemo2 extends HttpServlet { @Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { System.out.println(\\\"ResponseDemo2\\\"); } } \"},\"9146\":{\"h\":\"3.3 测试\",\"a\":\"_3-3-测试\"},\"9147\":{\"t\":\"浏览器输入：http://localhost:8080/demo2\"},\"9148\":{\"t\":\"输出结果：ResponseDemo1、ResponseDemo2\"},\"9149\":{\"t\":\"分析：ResponseDemo1、ResponseDemo2两个类都被访问到了，发生了重定向。\"},\"9150\":{\"h\":\"4. 重定向的特点\",\"a\":\"_4-重定向的特点\"},\"9151\":{\"t\":\"浏览器地址栏发生变化：当进行重定向访问的时候，由于是由浏览器发送的两次请求，所以地址会发生变化\"},\"9152\":{\"t\":\"可以重定向到任何位置的资源，包括任意其他服务器上的。\"},\"9153\":{\"t\":\"两次请求，不能在多个资源使用request共享数据，因为浏览器发送了两次请求，是两个不同的request对象，就无法通过request对象进行共享数据\"},\"9154\":{\"h\":\"5. redirect与forward的区别\",\"a\":\"_5-redirect与forward的区别\"},\"9155\":{\"t\":\"重定向的特点:redirect【浏览器->服务器】 \"},\"9156\":{\"t\":\"地址栏发生变化\"},\"9157\":{\"t\":\"重定向可以访问其他站点(服务器)的资源\"},\"9158\":{\"t\":\"重定向是两次请求。不能使用request对象来共享数据\"},\"9159\":{\"t\":\"转发的特点：forward【服务器->服务器】 \"},\"9160\":{\"t\":\"转发地址栏路径不变\"},\"9161\":{\"t\":\"转发只能访问当前服务器下的资源\"},\"9162\":{\"t\":\"转发是一次请求，可以使用request对象来共享数据\"},\"9163\":{\"h\":\"Ⅲ. 路径问题\",\"a\":\"iii-路径问题\"},\"9164\":{\"h\":\"1. 是否要加虚拟路径\",\"a\":\"_1-是否要加虚拟路径\"},\"9165\":{\"t\":\"浏览器使用: 需要加虚拟目录(项目访问路径) \"},\"9166\":{\"t\":\"超链接，从浏览器发送，需要加\"},\"9167\":{\"t\":\"表单，从浏览器发送，需要加\"},\"9168\":{\"t\":\"重定向，是由浏览器进行跳转，需要加。\"},\"9169\":{\"t\":\"服务端使用: 不需要加虚拟目录 \"},\"9170\":{\"t\":\"转发，是从服务器内部跳转，不需要加\"},\"9171\":{\"t\":\"当虚拟目录设置为 / 时，加不加是一样的。\"},\"9172\":{\"h\":\"2. 动态获取虚拟路径\",\"a\":\"_2-动态获取虚拟路径\"},\"9173\":{\"t\":\"在项目代码里写死虚拟路径，不方便维护，可以使用方法动态获取虚拟路径\"},\"9174\":{\"t\":\"String contextPath = request.getContextPath(); response.sendRedirect(contextPath+\\\"/demo2\\\"); //使用动态虚拟路径拼接完整路径 \"},\"9175\":{\"h\":\"3-9. 域对象\"},\"9176\":{\"h\":\"Ⅰ. 域对象\",\"a\":\"i-域对象\"},\"9177\":{\"h\":\"1. 概念\",\"a\":\"_1-概念\"},\"9178\":{\"t\":\"域对象就是一个有作用范围的对象，可以在范围内共享数据。\"},\"9179\":{\"t\":\"JavaWeb中有四大域对象，分别表示四个范围，在范围内数据可以共享。\"},\"9180\":{\"t\":\"之所以他们是域对象，原因是他们都内置了map集合，都有setAttribute和getAttribute方法。\"},\"9181\":{\"h\":\"2. page域对象\",\"a\":\"_2-page域对象\"},\"9182\":{\"t\":\"该域对象是JSP中的。\"},\"9183\":{\"t\":\"作用域是一个页面，不同页面无法共享域中的数据。\"},\"9184\":{\"t\":\"//我们在page1.jsp中存值。 pageContext.setAttribute(\\\"name\\\",\\\"123\\\"); //我们在page1.jsp中取值：此时可以取到值 pageContext域：<%=pageContext.getAttribute(\\\"name\\\") %><br> //定义一个page2.jsp，按照相同的方法取值：此时无法取值 pageContext域：<%=pageContext.getAttribute(\\\"name\\\") %><br> \"},\"9185\":{\"t\":\"注意：该域对象仅在JSP中有用，对于前后端分离项目，是没有page域对象的。\"},\"9186\":{\"h\":\"3. Request域对象\",\"a\":\"_3-request域对象\"},\"9187\":{\"t\":\"Servlet中的Request请求对象（常用HttpServlet），同时也是Request域对象。\"},\"9188\":{\"t\":\"作用域是一次请求，请求转发也是可以共享数据的。\"},\"9189\":{\"h\":\"生命周期\",\"a\":\"生命周期\"},\"9190\":{\"t\":\"当请求来时创建request对象\"},\"9191\":{\"t\":\"当请求结束时，request就销毁。\"},\"9192\":{\"t\":\"每次请求都是一个新的request对象。\"},\"9193\":{\"h\":\"4. Session域对象\",\"a\":\"_4-session域对象\"},\"9194\":{\"t\":\"在服务器端通过request.getSession()创建Session对象，就可以实现Session域了。\"},\"9195\":{\"t\":\"作用域是一次会话，关闭浏览器数据就会丢失，如果会话不中断，所有页面都可以获取session中的数据。\"},\"9196\":{\"t\":\"HttpSession session = request.getSession(); \"},\"9197\":{\"t\":\"在同一服务器上不同的request请求是会得到唯一的session。\"},\"9198\":{\"h\":\"生命周期\",\"a\":\"生命周期-1\"},\"9199\":{\"t\":\"在第一次调用request.getSession()方法时，服务器会检查是否已经有对应的session，如果没有就在内存中创建一个session并返回。\"},\"9200\":{\"t\":\"当一段时间内session没有被使用（默认为30分钟），则服务器会销毁该session。\"},\"9201\":{\"t\":\"如果服务器非正常关闭，没有到期的session也会跟着销毁。\"},\"9202\":{\"t\":\"如果调用session提供的invalidate()，可以立即销毁session。\"},\"9203\":{\"t\":\"浏览器关闭，会话结束，Session也会消失（储存SessionID的Cookie没有了\"},\"9204\":{\"h\":\"5. Application域对象\",\"a\":\"_5-application域对象\"},\"9205\":{\"t\":\"在Servlet中有一个ServletContext对象，该对象代表了整个web应用（Application）。 详见：ServletContext。\"},\"9206\":{\"h\":\"6. 域对象共有的方法\",\"a\":\"_6-域对象共有的方法\"},\"9207\":{\"t\":\"setAttribute(name,value)：存储数据\"},\"9208\":{\"t\":\"getAttribute(name)：根据那么获取对应数据值\"},\"9209\":{\"t\":\"removeAttribute(name)：根据name删除数据\"},\"9210\":{\"h\":\"Ⅱ. ServletContext\",\"a\":\"ii-servletcontext\"},\"9211\":{\"h\":\"1. 概念\",\"a\":\"_1-概念-1\"},\"9212\":{\"t\":\"ServletContext对象代表了整个web应用，可以和程序的容器(Tomcat)来通信。\"},\"9213\":{\"t\":\"该对象会在Tomcat启动时创建。\"},\"9214\":{\"h\":\"2. 主要功能\",\"a\":\"_2-主要功能\"},\"9215\":{\"t\":\"获取MIME类型\"},\"9216\":{\"t\":\"域对象：共享数据\"},\"9217\":{\"t\":\"获取文件的真实（服务器）路径\"},\"9218\":{\"h\":\"3. 获取ServletContext对象\",\"a\":\"_3-获取servletcontext对象\"},\"9219\":{\"t\":\"可以通过以下两种方式获取，这两种方式获取的是同一个对象。\"},\"9220\":{\"t\":\"protected void doGet(HttpServletRequest request, HttpServletResponse resp){ ServletContext servletContext = request.getServletContext(); ServletContext servletContext1 = this.getServletContext(); } \"},\"9221\":{\"t\":\"通过Request对象获取\"},\"9222\":{\"t\":\"ServletContext ServletRequest.getServletContext(); \"},\"9223\":{\"t\":\"通过HttpServlet\"},\"9224\":{\"t\":\"ServletContext HttpServlet.getServletContext(); \"},\"9225\":{\"h\":\"4. 获取MIME类型\",\"a\":\"_4-获取mime类型\"},\"9226\":{\"h\":\"4.1 MIME类型\",\"a\":\"_4-1-mime类型\"},\"9227\":{\"t\":\"在互联网通信过程中定义的一种文件数据类型\"},\"9228\":{\"t\":\"格式为：大类型/小类型\"},\"9229\":{\"t\":\"如：text/html(文本/html)； image/jpeg(图片类型/jpeg格式)\"},\"9230\":{\"h\":\"4.2 底层\",\"a\":\"_4-2-底层\"},\"9231\":{\"t\":\"在Tomcat服务器的一个配置文件（ tomcat/conf/web.xml）中，记录了所有的文件的扩展名和和mime类型的对应关系。而ServletContext对象是可以直接跟Tomcat通信的，因此可以使用ServletContext获取指定文件的MIME类型（通过扩展名）。\"},\"9232\":{\"t\":\"//web.xml:足有4千行代码记录对照关系 ... <mime-mapping> <extension>m4a</extension> <mime-type>audio/mp4</mime-type> </mime-mapping> ... \"},\"9233\":{\"h\":\"4.3 getMimeType(String file)：获取文件类型\",\"a\":\"_4-3-getmimetype-string-file-获取文件类型\"},\"9234\":{\"t\":\"protected void doGet(HttpServletRequest req, HttpServletResponse resp){ ServletContext context = this.getServletContext(); String filename = \\\"a.jpg\\\";//自定义一个文件名用来测试 String mimeType = context.getMimeType(filename); //image/jpeg } \"},\"9235\":{\"h\":\"4.4 局限性\",\"a\":\"_4-4-局限性\"},\"9236\":{\"t\":\"该方法是通过后缀名获取文件类型的，而后缀名可以随便定义。\"},\"9237\":{\"t\":\"因此获取的mime类型并不是很准确，只能做初步的筛选和使用。\"},\"9238\":{\"h\":\"5. 作为域对象\",\"a\":\"_5-作为域对象\"},\"9239\":{\"t\":\"一个有作用范围的对象，可以在范围内共享数据。\"},\"9240\":{\"t\":\"和request对象一样，其方法也一样（域对象都有相同的三个方法）。\"},\"9241\":{\"h\":\"5.1 域的范围\",\"a\":\"_5-1-域的范围\"},\"9242\":{\"t\":\"最大范围：所有用户的所有请求数据，任何地方都可以保存，任何地方都能获取。\"},\"9243\":{\"t\":\"可以理解为：全局变量。\"},\"9244\":{\"t\":\"注意：由于所有用户都可以创建和使用，且常驻内存，直到服务器关闭，因此要谨慎使用。[ 比如可以储存access_token ]\"},\"9245\":{\"h\":\"5.2 方法：\",\"a\":\"_5-2-方法\"},\"9246\":{\"t\":\"setAttribute(String name,Object value)：设置k-v数据\"},\"9247\":{\"t\":\"getAttribute(String name)：通过k获取v\"},\"9248\":{\"t\":\"removeAttribute(String name)：通过k移除k-v\"},\"9249\":{\"t\":\"protected void doPost(HttpServletRequest req, HttpServletResponse resp){ ServletContext context = this.getServletContext(); Object num = context.getAttribute(\\\"top\\\"); context.setAttribute(\\\"top\\\",num+1); } \"},\"9250\":{\"h\":\"6. 获取文件服务器路径\",\"a\":\"_6-获取文件服务器路径\"},\"9251\":{\"t\":\"这里的路径指的是部署到 Tomcat上的资源和编译后的java类路径，而不是工作空间里的路径。\"},\"9252\":{\"h\":\"6.1 getRealPath()\",\"a\":\"_6-1-getrealpath\"},\"9253\":{\"t\":\"参数：参数就是文件的路径（指的是工作目录下的路径）。\"},\"9254\":{\"t\":\"该方法的作用就是通过工作目录下的路径，获取其真正部署后的路径。\"},\"9255\":{\"t\":\"String ServletContext.getRealPath(); \"},\"9256\":{\"h\":\"6.2 文件的工作路径\",\"a\":\"_6-2-文件的工作路径\"},\"9257\":{\"t\":\"文件可能存在于以下三个地方\"},\"9258\":{\"t\":\"web目录下： / 就代表了web目录下，\"},\"9259\":{\"t\":\"WEB-INF目录：WEB-INF目录也在web目录下，因此直接使用/WEB-INF表示\"},\"9260\":{\"t\":\"src目录：/ （根目录）表示的是web目录，而src不再web目录下，访问src目录的路径为：/WEB-INF/classes/a.jpg（classes默认是编译后的java文件目录）\"},\"9261\":{\"h\":\"6.3 示例\",\"a\":\"_6-3-示例\"},\"9262\":{\"t\":\"protected void doPost(HttpServletRequest request, HttpServletResponse response){ ServletContext context = this.getServletContext(); // 获取文件的服务器路径 String b = context.getRealPath(\\\"/b.txt\\\");//web目录下资源访问 //WEB-INF目录下的资源访问 String c = context.getRealPath(\\\"/WEB-INF/c.txt\\\"); //src目录下的资源访问 String a = context.getRealPath(\\\"/WEB-INF/classes/a.txt\\\"); } \"},\"9263\":{\"h\":\"4-1. Filter\"},\"9264\":{\"t\":\"提示\"},\"9265\":{\"t\":\"Fileter是JavaWeb核心三模块之一，不过内容不多。\"},\"9266\":{\"h\":\"1. Filter的位置\",\"a\":\"_1-filter的位置\"},\"9267\":{\"t\":\"Filter是独立的Web模块，应该与Servlet的包在同一目录级创建Filter包，存放Filter类。\"},\"9268\":{\"h\":\"2. 实现Filter接口\",\"a\":\"_2-实现filter接口\"},\"9269\":{\"t\":\"注意是：javax.servlet.Filter接口\"},\"9270\":{\"t\":\"import javax.servlet.*; import java.io.IOException; public class filterDemo implements Filter { @Override public void init(FilterConfig filterConfig) throws ServletException { //初始化时的操作，不用关注 } @Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { //这里是过滤器主要操作的内容：重点关注这个 ...//放行前的逻辑 chain.doFilter(request,response);//默认是直接拦截的，需要放行 ...//放行后的逻辑 } @Override public void destroy() { //过滤器正常关闭前的操作，不用关注 } } \"},\"9271\":{\"h\":\"doFilter：放行\",\"a\":\"dofilter-放行\"},\"9272\":{\"t\":\"请求被拦截后就不会去访问Servlet了，必须进行放行，才能继续访问接着访问。\"},\"9273\":{\"t\":\"使用doFilter方法中的chain对象的doFilter方法进行放行，参数是Request类和Response类\"},\"9274\":{\"h\":\"放行前的逻辑\",\"a\":\"放行前的逻辑\"},\"9275\":{\"t\":\"请求时会执行的逻辑，向Servlet发送请求时，被拦截器拦截，就会执行放行前的逻辑，然后放行去访问Servlet。\"},\"9276\":{\"t\":\"注意：请求阶段，不会执行放行后的逻辑（chain.doFilter后面的代码不会执行）\"},\"9277\":{\"h\":\"放行后的逻辑\",\"a\":\"放行后的逻辑\"},\"9278\":{\"t\":\"当Servlet进行响应时，也是会被对应的拦截器拦截的吗，此时就会执行放行后的逻辑。\"},\"9279\":{\"t\":\"注意：此时放行前的逻辑不会再执行了（chain.doFiter方法以及该方法之前的代码都不会执行）。\"},\"9280\":{\"h\":\"2. 配置拦截路径\",\"a\":\"_2-配置拦截路径\"},\"9281\":{\"t\":\"使用@WebFilter注解进行配置，拦截路径有如下四种配置方式\"},\"9282\":{\"t\":\"拦截具体的资源：/index.jsp：只有访问index.jsp时才会被拦截\"},\"9283\":{\"t\":\"目录拦截：/user/*：访问/user下的所有资源，都会被拦截\"},\"9284\":{\"t\":\"后缀名拦截：*.jsp：访问后缀名为jsp的资源，都会被拦截\"},\"9285\":{\"t\":\"拦截所有：/*：访问所有资源，都会被拦截\"},\"9286\":{\"t\":\"//具体资源路径:只拦截具体的某个路径的访问 @WebServlet(\\\"/index.jsp\\\") //拦截目录:拦截某个目录下所有资源的请求 @WebServlet(\\\"/user/*\\\") //后缀名拦截:对某类格式的资源请求进行拦截 @WebServlet(\\\"*.jsp\\\") //拦截所有资源:访问所有资源时，过滤器都会被执行 @WebServlet(\\\"/*\\\") \"},\"9287\":{\"h\":\"3. 拦截方式的配置\",\"a\":\"_3-拦截方式的配置\"},\"9288\":{\"t\":\"拦截方式，即资源被访问的方式，一共有5种。\"},\"9289\":{\"t\":\"需要使用@WebFilter注解的dispatcherTypes属性来配置，不配置的话有缺省值。\"},\"9290\":{\"t\":\"REQUEST：默认值；只有浏览器直接请求的资源，才会被拦截拦截\"},\"9291\":{\"t\":\"FORWARD：转发；只有Servlet内部转发的请求，才会被拦截\"},\"9292\":{\"t\":\"INCLUDE：包含；转发访问资源，[ 仅了解 ]\"},\"9293\":{\"t\":\"ERROR：错误；错误跳转资源，暂略\"},\"9294\":{\"t\":\"ASYNC：异步；异步访问资源，用于Ajax的访问，暂略。\"},\"9295\":{\"t\":\"@WebFilter(value=\\\"/*\\\", dispatcherTypes = DispatcherType.REQUEST) @WebFilter(value=\\\"/*\\\", dispatcherTypes = DispatcherType.FORWARD) \"},\"9296\":{\"h\":\"配置多个值\",\"a\":\"配置多个值\"},\"9297\":{\"t\":\"dispatcherTypes的值可以是个数组，来同时配置多个值\"},\"9298\":{\"t\":\"@WebFilter( value=\\\"/*\\\", dispatcherTypes ={DispatcherType.REQUEST,DispatcherType.FORWARD} ) \"},\"9299\":{\"h\":\"4. 过滤器链：多个过滤器\",\"a\":\"_4-过滤器链-多个过滤器\"},\"9300\":{\"t\":\"某个资源可以有多个过滤器时，此时注意过滤器执行的顺序\"},\"9301\":{\"t\":\"4-1-1\"},\"9302\":{\"h\":\"多个过滤器的执行顺序\",\"a\":\"多个过滤器的执行顺序\"},\"9303\":{\"t\":\"先进，后出\"},\"9304\":{\"t\":\"过滤器1：请求，执行chain.doFilter()前的代码\"},\"9305\":{\"t\":\"过滤器2：请求，执行chain.doFilter()前的代码\"},\"9306\":{\"t\":\"资源的访问\"},\"9307\":{\"t\":\"过滤器2：响应，执行chain.doFilter()后的代码\"},\"9308\":{\"t\":\"过滤器1：响应，执行chain.doFilter()后的代码\"},\"9309\":{\"h\":\"5. 过滤器的优先级\",\"a\":\"_5-过滤器的优先级\"},\"9310\":{\"t\":\"按照过滤器类名的字符串自然排序规则比较，值小的先执行\"},\"9311\":{\"t\":\"如： AFilter 和 BFilter，AFilter就先执行了。\"},\"9312\":{\"h\":\"4-2. Listener\"},\"9313\":{\"t\":\"提示\"},\"9314\":{\"t\":\"Listener 表示监听器，是 JavaWeb 三大组件(Servlet、Filter、Listener)之一，不过内容不多。作用类似于框架中的钩子函数\"},\"9315\":{\"h\":\"Ⅰ. 监听器介绍\",\"a\":\"i-监听器介绍\"},\"9316\":{\"h\":\"1. 观察者模式\",\"a\":\"_1-观察者模式\"},\"9317\":{\"t\":\"监听器采用的就是观察者模式。#\"},\"9318\":{\"t\":\"观察者：监控『被观察者』的行为，一旦发现『被观察者』触发了事件，就会调用事先准备好的方法执行操作。\"},\"9319\":{\"t\":\"被观察者：『被观察者』一旦触发了被监控的事件，就会被『观察者』发现。\"},\"9320\":{\"h\":\"2. 监听器概念\",\"a\":\"_2-监听器概念\"},\"9321\":{\"t\":\"专门用于对其他对象身上发生的事件或状态改变进行监听和相应处理的对象，当被监视的对象发生情况时，立即采取相应的行动。\"},\"9322\":{\"h\":\"3. Servlet监听器->Listener\",\"a\":\"_3-servlet监听器-listener\"},\"9323\":{\"t\":\"Servlet规范中定义的一种特殊类，它用于监听Web应用程序中的ServletContext，HttpSession 和HttpServletRequest等域对象的创建与销毁事件，以及监听这些域对象中的属性发生修改的事件。\"},\"9324\":{\"h\":\"4. 监听器分类\",\"a\":\"_4-监听器分类\"},\"9325\":{\"t\":\"4-2-1\"},\"9326\":{\"t\":\"域对象监听器\"},\"9327\":{\"t\":\"域对象的属性域监听器\"},\"9328\":{\"t\":\"Session域中数据的监听器\"},\"9329\":{\"h\":\"Ⅱ. 监听器列表\",\"a\":\"ii-监听器列表\"},\"9330\":{\"t\":\"JavaWeb 提供了8个监听器：\"},\"9331\":{\"h\":\"1. ServletContextListener\",\"a\":\"_1-servletcontextlistener\"},\"9332\":{\"t\":\"作用：监听ServletContext对象的创建与销毁\"},\"9333\":{\"t\":\"方法名\"},\"9334\":{\"t\":\"作用\"},\"9335\":{\"t\":\"contextInitialized(ServletContextEvent sce)\"},\"9336\":{\"t\":\"ServletContext创建时调用\"},\"9337\":{\"t\":\"contextDestroyed(ServletContextEvent sce)\"},\"9338\":{\"t\":\"ServletContext销毁时调用\"},\"9339\":{\"t\":\"ServletContextEvent对象代表从ServletContext对象身上捕获到的事件，通过这个事件对象我们可以获取到ServletContext对象。\"},\"9340\":{\"h\":\"2. HttpSessionListener\",\"a\":\"_2-httpsessionlistener\"},\"9341\":{\"t\":\"作用：监听HttpSession对象的创建与销毁\"},\"9342\":{\"t\":\"方法名\"},\"9343\":{\"t\":\"作用\"},\"9344\":{\"t\":\"sessionCreated(HttpSessionEvent hse)\"},\"9345\":{\"t\":\"HttpSession对象创建时调用\"},\"9346\":{\"t\":\"sessionDestroyed(HttpSessionEvent hse)\"},\"9347\":{\"t\":\"HttpSession对象销毁时调用\"},\"9348\":{\"t\":\"HttpSessionEvent对象代表从HttpSession对象身上捕获到的事件，通过这个事件对象我们可以获取到触发事件的HttpSession对象。\"},\"9349\":{\"h\":\"3. ServletRequestListener\",\"a\":\"_3-servletrequestlistener\"},\"9350\":{\"t\":\"作用：监听ServletRequest对象的创建与销毁\"},\"9351\":{\"t\":\"方法名\"},\"9352\":{\"t\":\"作用\"},\"9353\":{\"t\":\"requestInitialized(ServletRequestEvent sre)\"},\"9354\":{\"t\":\"ServletRequest对象创建时调用\"},\"9355\":{\"t\":\"requestDestroyed(ServletRequestEvent sre)\"},\"9356\":{\"t\":\"ServletRequest对象销毁时调用\"},\"9357\":{\"t\":\"ServletRequestEvent对象代表从HttpServletRequest对象身上捕获到的事件，通过这个事件对象我们可以获取到触发事件的HttpServletRequest对象。另外还有一个方法可以获取到当前Web应用的ServletContext对象。\"},\"9358\":{\"h\":\"4. ServletContextAttributeListener\",\"a\":\"_4-servletcontextattributelistener\"},\"9359\":{\"t\":\"作用：监听ServletContext中属性的创建、修改和销毁\"},\"9360\":{\"t\":\"方法名\"},\"9361\":{\"t\":\"作用\"},\"9362\":{\"t\":\"attributeAdded(ServletContextAttributeEvent scab)\"},\"9363\":{\"t\":\"向ServletContext中添加属性时调用\"},\"9364\":{\"t\":\"attributeRemoved(ServletContextAttributeEvent scab)\"},\"9365\":{\"t\":\"从ServletContext中移除属性时调用\"},\"9366\":{\"t\":\"attributeReplaced(ServletContextAttributeEvent scab)\"},\"9367\":{\"t\":\"当ServletContext中的属性被修改时调用\"},\"9368\":{\"t\":\"ServletContextAttributeEvent对象代表属性变化事件，它包含的方法如下：\"},\"9369\":{\"t\":\"方法名\"},\"9370\":{\"t\":\"作用\"},\"9371\":{\"t\":\"getName()\"},\"9372\":{\"t\":\"获取修改或添加的属性名\"},\"9373\":{\"t\":\"getValue()\"},\"9374\":{\"t\":\"获取被修改或添加的属性值\"},\"9375\":{\"t\":\"getServletContext()\"},\"9376\":{\"t\":\"获取ServletContext对象\"},\"9377\":{\"h\":\"5. HttpSessionAttributeListener\",\"a\":\"_5-httpsessionattributelistener\"},\"9378\":{\"t\":\"作用：监听HttpSession中属性的创建、修改和销毁\"},\"9379\":{\"t\":\"方法名\"},\"9380\":{\"t\":\"作用\"},\"9381\":{\"t\":\"attributeAdded(HttpSessionBindingEvent se)\"},\"9382\":{\"t\":\"向HttpSession中添加属性时调用\"},\"9383\":{\"t\":\"attributeRemoved(HttpSessionBindingEvent se)\"},\"9384\":{\"t\":\"从HttpSession中移除属性时调用\"},\"9385\":{\"t\":\"attributeReplaced(HttpSessionBindingEvent se)\"},\"9386\":{\"t\":\"当HttpSession中的属性被修改时调用\"},\"9387\":{\"t\":\"HttpSessionBindingEvent对象代表属性变化事件，它包含的方法如下：\"},\"9388\":{\"t\":\"方法名\"},\"9389\":{\"t\":\"作用\"},\"9390\":{\"t\":\"getName()\"},\"9391\":{\"t\":\"获取修改或添加的属性名\"},\"9392\":{\"t\":\"getValue()\"},\"9393\":{\"t\":\"获取被修改或添加的属性值\"},\"9394\":{\"t\":\"getSession()\"},\"9395\":{\"t\":\"获取触发事件的HttpSession对象\"},\"9396\":{\"h\":\"6. ServletRequestAttributeListener\",\"a\":\"_6-servletrequestattributelistener\"},\"9397\":{\"t\":\"作用：监听ServletRequest中属性的创建、修改和销毁\"},\"9398\":{\"t\":\"方法名\"},\"9399\":{\"t\":\"作用\"},\"9400\":{\"t\":\"attributeAdded(ServletRequestAttributeEvent srae)\"},\"9401\":{\"t\":\"向ServletRequest中添加属性时调用\"},\"9402\":{\"t\":\"attributeRemoved(ServletRequestAttributeEvent srae)\"},\"9403\":{\"t\":\"从ServletRequest中移除属性时调用\"},\"9404\":{\"t\":\"attributeReplaced(ServletRequestAttributeEvent srae)\"},\"9405\":{\"t\":\"当ServletRequest中的属性被修改时调用\"},\"9406\":{\"t\":\"ServletRequestAttributeEvent对象代表属性变化事件，它包含的方法如下：\"},\"9407\":{\"t\":\"方法名\"},\"9408\":{\"t\":\"作用\"},\"9409\":{\"t\":\"getName()\"},\"9410\":{\"t\":\"获取修改或添加的属性名\"},\"9411\":{\"t\":\"getValue()\"},\"9412\":{\"t\":\"获取被修改或添加的属性值\"},\"9413\":{\"t\":\"getServletRequest ()\"},\"9414\":{\"t\":\"获取触发事件的ServletRequest对象\"},\"9415\":{\"h\":\"7. HttpSessionBindingListener\",\"a\":\"_7-httpsessionbindinglistener\"},\"9416\":{\"t\":\"作用：监听某个对象在Session域中的创建与移除\"},\"9417\":{\"t\":\"方法名\"},\"9418\":{\"t\":\"作用\"},\"9419\":{\"t\":\"valueBound(HttpSessionBindingEvent event)\"},\"9420\":{\"t\":\"该类的实例被放到Session域中时调用\"},\"9421\":{\"t\":\"valueUnbound(HttpSessionBindingEvent event)\"},\"9422\":{\"t\":\"该类的实例从Session中移除时调用\"},\"9423\":{\"t\":\"HttpSessionBindingEvent对象代表属性变化事件，它包含的方法如下：\"},\"9424\":{\"t\":\"方法名\"},\"9425\":{\"t\":\"作用\"},\"9426\":{\"t\":\"getName()\"},\"9427\":{\"t\":\"获取当前事件涉及的属性名\"},\"9428\":{\"t\":\"getValue()\"},\"9429\":{\"t\":\"获取当前事件涉及的属性值\"},\"9430\":{\"t\":\"getSession()\"},\"9431\":{\"t\":\"获取触发事件的HttpSession对象\"},\"9432\":{\"h\":\"8. HttpSessionActivationListener\",\"a\":\"_8-httpsessionactivationlistener\"},\"9433\":{\"t\":\"作用：监听某个对象在Session中的序列化与反序列化。\"},\"9434\":{\"t\":\"方法名\"},\"9435\":{\"t\":\"作用\"},\"9436\":{\"t\":\"sessionWillPassivate(HttpSessionEvent se)\"},\"9437\":{\"t\":\"该类实例和Session一起钝化到硬盘时调用\"},\"9438\":{\"t\":\"sessionDidActivate(HttpSessionEvent se)\"},\"9439\":{\"t\":\"该类实例和Session一起活化到内存时调用\"},\"9440\":{\"t\":\"HttpSessionEvent对象代表事件对象，通过getSession()方法获取事件涉及的HttpSession对象。\"},\"9441\":{\"h\":\"Ⅲ. ServletContextListener\",\"a\":\"iii-servletcontextlistener\"},\"9442\":{\"t\":\"将来使用SpringMVC的时候，会用到一个ContextLoaderListener，这个监听器就实现了ServletContextListener接口，表示对ServletContext对象本身的生命周期进行监控。\"},\"9443\":{\"h\":\"1. 监听器的使用步骤\",\"a\":\"_1-监听器的使用步骤\"},\"9444\":{\"t\":\"定义一个类，实现某个监听器接口\"},\"9445\":{\"t\":\"复写接口中的方法\"},\"9446\":{\"t\":\"进行监听器配置：添加@WebLister注解\"},\"9447\":{\"h\":\"2. ServletContextListener接口的方法\",\"a\":\"_2-servletcontextlistener接口的方法\"},\"9448\":{\"t\":\"该监听器接口一共有两个方法：\"},\"9449\":{\"t\":\"void contextDestroyed(ServletContextEvent sce) ：ServletContext对象被销毁之前会调用该方法，一般用来加载资源文件\"},\"9450\":{\"t\":\"void contextInitialized(ServletContextEvent sce) ：ServletContext对象创建后会调用该方法\"},\"9451\":{\"h\":\"使用示例\",\"a\":\"使用示例\"},\"9452\":{\"t\":\"//file：web/listener/ContextLoaderListener public class ContextLoaderListener implement ServletContextListener{ public void contextInitialized(ServletContextEvent sce){ System.out.print(\\\"ServletContext对象被创建了...\\\"); } public void contextInitialized(ServletContextEvent sce){ System.out.print(\\\"ServletContext对象被销毁了...\\\"); } } \"},\"9453\":{\"h\":\"3. 注册监听器\",\"a\":\"_3-注册监听器\"},\"9454\":{\"t\":\"在实现了监听器接口的类上添加@WebLister注解\"},\"9455\":{\"t\":\"该注解不需要任何参数\"},\"9456\":{\"t\":\"@WebListener public class ContextLoaderListener implement ServletContextListener{ ... } \"},\"9457\":{\"h\":\"4. 监听器触发机制\",\"a\":\"_4-监听器触发机制\"},\"9458\":{\"t\":\"监听器是通过事件自动触发的。\"},\"9459\":{\"h\":\"说明\"},\"9460\":{\"t\":\"企业都是RESTAPI：前后端分离。\"},\"9461\":{\"t\":\"JSP仅作了解，一般不使用JSP。\"},\"9462\":{\"t\":\"JSP一般充当MVC模式中的V：view，视图\"},\"9463\":{\"t\":\"警告\"},\"9464\":{\"t\":\"了解都没必要，浪费时间，略了\"},\"9465\":{\"h\":\"6-1. Jar包\"},\"9466\":{\"h\":\"Ⅰ. Jar包介绍\",\"a\":\"i-jar包介绍\"},\"9467\":{\"h\":\"1. 概述\",\"a\":\"_1-概述\"},\"9468\":{\"t\":\"JAR文件（Java归档，英语：Java Archive）是一种软件包文件格式，通常用于聚合大量的Java类文件、相关的元数据和资源（文本、图片等）文件到一个文件，以便开发Java平台应用软件或库。\"},\"9469\":{\"t\":\"JAR文件是一种归档文件，以ZIP格式构建，以.jar为文件扩展名。用户可以使用JDK自带的jar命令创建或提取JAR文件。也可以使用其他zip压缩工具，不过压缩时zip文件头里的条目顺序很重要，因为Manifest文件常需放在首位。JAR文件内的文件名是Unicode文本。\"},\"9470\":{\"h\":\"2. Java包解析\",\"a\":\"_2-java包解析\"},\"9471\":{\"t\":\"我们自己写的Java代码编译成的是class文件，把多个class文件进行打包，就成了一个jar包，jar包其实就是class文件的集合，多个jar包放到一起我们就称之为组件（组件也可以理解为工具类）工具类可以辅助我们进行开发。\"},\"9472\":{\"h\":\"3. Jar包与zip包\",\"a\":\"_3-jar包与zip包\"},\"9473\":{\"t\":\"jar 与 zip 唯一的区别就是在 jar 文件的内容中，包含了一个 META-INF/MANIFEST.MF 文件，该文件是在生成 jar 文件的时候自动创建的，作为jar里面的\\\"详情单\\\"，包含了该Jar包的版本、创建人和类搜索路径Class-Path等信息，当然如果是可执行Jar包，会包含Main-Class属性，表明Main方法入口，尤其是较为重要的Class-Path和Main-Class。\"},\"9474\":{\"h\":\"4. Jar包的内容\",\"a\":\"_4-jar包的内容\"},\"9475\":{\"t\":\"jar包主要是对class文件进行打包，而非.java文件。\"},\"9476\":{\"t\":\"java编译生成的class文件是平台无关的，这就意味着jar包是跨平台的，所以不必关心涉及具体平台的问题。\"},\"9477\":{\"t\":\"除了class外，还有其他的元数据文件、资源文件等。\"},\"9478\":{\"h\":\"5. Jar包签名\",\"a\":\"_5-jar包签名\"},\"9479\":{\"t\":\"可以对 JAR 文件内容加上数字化签名。这样，能够识别签名的工具就可以有选择地为您授予软件安全特权，这是其他文件做不到的，它还可以检测代码是否被篡改过。\"},\"9480\":{\"h\":\"6. Jar包的作用\",\"a\":\"_6-jar包的作用\"},\"9481\":{\"t\":\"用于发布和使用类库\"},\"9482\":{\"t\":\"作为应用程序和扩展的构建单元\"},\"9483\":{\"t\":\"作为组件、applet 或者插件程序的部署单位\"},\"9484\":{\"t\":\"用于打包与组件相关联的辅助资源\"},\"9485\":{\"h\":\"7. 为什么要打jar包\",\"a\":\"_7-为什么要打jar包\"},\"9486\":{\"h\":\"7.1 发布和使用类库\",\"a\":\"_7-1-发布和使用类库\"},\"9487\":{\"t\":\"当我们开发了一个程序以后，程序中有很多的类，如果需要提供给别人使用,发给对方一大堆源文件是非常不好的，因此通常需要把这些类以及相关的资源文件打包成一个 jar 包,把这个 jar 包提供给别人使用,同时提供给使用者清晰的文档。这样他人在拿到我们提供的jar之后，就能方便地进行调用。而且安全。能够对JAR文件进行数字签名，只让能够识别数字签名的用户使用里面的东西。\"},\"9488\":{\"h\":\"7.2 util类库\",\"a\":\"_7-2-util类库\"},\"9489\":{\"t\":\"建议平时写代码时，将代码中的通用部分抽离出来，逐渐积累一些通用的util类（工具类），并逐渐将其模块模块化，最后打成jar包在项目或模块中使用。 积累jar包的过程也会考验代码的重构能力和模块的抽象能力。\"},\"9490\":{\"h\":\"Ⅱ. 使用Jar包\",\"a\":\"ii-使用jar包\"},\"9491\":{\"h\":\"1. 使用Java内置的Jar包\",\"a\":\"_1-使用java内置的jar包\"},\"9492\":{\"t\":\"使用java自带jar包：也称基础类库，又分两类分别存放在两个地方\"},\"9493\":{\"t\":\"一是在java安装目录的jre\\\\lib下，用于已发布的软件运行时调用，可称为jvm环境\"},\"9494\":{\"t\":\"二是在java安装目录的jdk\\\\jre\\\\lib下，用于开发时调试软件调用，可称为开发环境\"},\"9495\":{\"t\":\"在自己新建的项目工程中，基础类库下的类不用导包，即不用手动import，系统默认导入，System、Exception、Math、String，都属于java.lang包下，无需import操作。\"},\"9496\":{\"h\":\"2. 打Jar包\",\"a\":\"_2-打jar包\"},\"9497\":{\"h\":\"2.1 手动打\",\"a\":\"_2-1-手动打\"},\"9498\":{\"t\":\"先使用javac编译java文件，得到class文件，\"},\"9499\":{\"t\":\"创建manifest：内容如下\"},\"9500\":{\"t\":\"Manifest-Version: 1.0 Main-Class: addJarPkg \"},\"9501\":{\"t\":\"把编译好的class文件和manifest文件放入指定文件夹，如test\"},\"9502\":{\"t\":\"在cmd中运行命令\"},\"9503\":{\"t\":\"jar -cvfm main.jar mainfest -C test. \"},\"9504\":{\"h\":\"2.2 使用IDEA\",\"a\":\"_2-2-使用idea\"},\"9505\":{\"t\":\"点击项目->点击“File”菜单 -> Project Structure\"},\"9506\":{\"t\":\"点击\\\"Artifacts\\\" -> 绿色的\\\"+\\\" -> “JAR” -> Empty\"},\"9507\":{\"t\":\"Name栏填入自定义的名字，Output ditectory选择jar包目标目录，Available Elements里双击需要添加到jar包的文件，即可添加到左边的jar包目录下，具体看下图\"},\"9508\":{\"t\":\"6-1-1\"},\"9509\":{\"t\":\"点击Create Manifest，选择放置MANIFEST.MF的文件路径（直接默认项目根目录就行，尽量不要选别的路径，可能会造成不必要的错误），点击OK。\"},\"9510\":{\"t\":\"点击Main Class后面选择按钮\"},\"9511\":{\"t\":\"弹出框中选择需要运行程序入口main函数，点击OK\"},\"9512\":{\"t\":\"以上设置完之后，点击OK\"},\"9513\":{\"t\":\"点击菜单中“Build” -> “Build Artifacts” -双击弹出框中待生成jar包下面的build即可\"},\"9514\":{\"h\":\"3. 添加Jar包依赖\",\"a\":\"_3-添加jar包依赖\"},\"9515\":{\"t\":\"提示\"},\"9516\":{\"t\":\"实际开发中都是使用Maven添加的。\"},\"9517\":{\"t\":\"手动添加方式：暂略。\"},\"9518\":{\"h\":\"Ⅲ. Jar包和war包\",\"a\":\"iii-jar包和war包\"},\"9519\":{\"h\":\"1. war包介绍\",\"a\":\"_1-war包介绍\"},\"9520\":{\"t\":\"war是一个可以直接运行的web模块，通常应用于web项目中，将其打成war包部署到Tomcat等容器中。将war包放置在tomcat根目录的webapps目录下，如果Tomcat成功启动，这个包就会自动解压，就相当于发布了。\"},\"9521\":{\"h\":\"2. jar包与war包的对比\",\"a\":\"_2-jar包与war包的对比\"},\"9522\":{\"t\":\"除了目录结构外，jar里有的war里也都有。\"},\"9523\":{\"t\":\"war包是Sun提出的一种web应用程序格式，与jar类似，是很多文件的压缩包。war包中的文件按照一定目录结构来组织。根据其根目录下包含有html和jsp文件，或者包含有这两种文件的目录，另外还有WEB-INF目录。\"},\"9524\":{\"t\":\"通常在WEB-INF目录下含有一个web.xml文件和一个classes目录，web.xml是这个应用的配置文件，而classes目录下则包含编译好的servlet类和jsp，或者servlet所依赖的其他类（如JavaBean）。\"},\"9525\":{\"t\":\"这些所依赖的类也可以打包成jar包放在WEB-INF下的lib目录下。这也就意味着，war能打包的内容，jar也都可以。\"},\"9526\":{\"h\":\"3. jar包和war包使用\",\"a\":\"_3-jar包和war包使用\"},\"9527\":{\"t\":\"对于现今的应用来讲，主流都是用jar来替代war了。因为war仅服务于Web应用，而jar的涵盖范围更广。目前，war相较于jar的唯一优势在于，当tomcat的进程启动之后，将符合规范的war包放在tomcat的webapps目录下的时候，tomcat会自动将war包解压并对外提供web服务，而jar包则不行。\"},\"9528\":{\"h\":\"4. 微服务\",\"a\":\"_4-微服务\"},\"9529\":{\"t\":\"过去由于并未通过微服务将机器资源进行隔离，因此提倡的是一个tomcat实例管理多个java web项目，因此对于java web项目，都提倡将其打成war包然后放置于同一个tomcat的webapps下进行管理，便于资源的统一利用。\"},\"9530\":{\"t\":\"随着微服务成为主流，同一台机器上的多个web服务可以通过docker等容器进行隔离，因此我们可以让每个容器都单独运行一个tomcat实例，每个tomcat实例独立运行一个web服务，换句话说，我们可以像springboot一样，将tomcat和web项目打成jar放在一起，以内嵌的方式来启动web服务，使得所有服务的启动方式更优雅和统一，不管是Web服务还是后台服务，均使用java -jar指令来启动。\"},\"9531\":{\"h\":\"Ⅳ. Maven\",\"a\":\"iv-maven\"},\"9532\":{\"t\":\"提示\"},\"9533\":{\"t\":\"Maven是包管理器，实际开发中，都是使用Maven来管理包的。\"},\"9534\":{\"t\":\"详见：框架>Maven\"},\"9535\":{\"h\":\"6-2. Web架构\"},\"9536\":{\"h\":\"Ⅰ. MVC\",\"a\":\"i-mvc\"},\"9537\":{\"h\":\"1. 概述\",\"a\":\"_1-概述\"},\"9538\":{\"t\":\"MVC 是一种分层开发的模式，其中\"},\"9539\":{\"t\":\"M：Model，业务模型，处理业务【JavaBean】 \"},\"9540\":{\"t\":\"完成具体的业务操作，如：查询数据库，封装对象\"},\"9541\":{\"t\":\"V：View，视图，界面展示【前端】 \"},\"9542\":{\"t\":\"展示数据\"},\"9543\":{\"t\":\"C：Controller，控制器。Servlet \"},\"9544\":{\"t\":\"获取用户的输入\"},\"9545\":{\"t\":\"调用模型\"},\"9546\":{\"t\":\"将数据交给视图进行展示\"},\"9547\":{\"h\":\"2. 过程\",\"a\":\"_2-过程\"},\"9548\":{\"t\":\"控制器（serlvlet）用来接收浏览器发送过来的请求，控制器调用模型（JavaBean）来获取数据，比如从数据库查询数据；控制器获取到数据后再交由视图（JSP）进行数据展示\"},\"9549\":{\"t\":\"6-2-1\"},\"9550\":{\"h\":\"3. MVC的优点\",\"a\":\"_3-mvc的优点\"},\"9551\":{\"t\":\"职责单一，互不影响。每个角色做它自己的事，各司其职。\"},\"9552\":{\"t\":\"有利于分工协作。\"},\"9553\":{\"t\":\"有利于组件重用\"},\"9554\":{\"h\":\"Ⅱ. 三层架构\",\"a\":\"ii-三层架构\"},\"9555\":{\"t\":\"三层架构\"},\"9556\":{\"h\":\"1. 概述\",\"a\":\"_1-概述-1\"},\"9557\":{\"t\":\"三层架构是将我们的项目分成了三个层面，分别是 表现层、业务逻辑层、数据访问层。\"},\"9558\":{\"t\":\"数据访问层：对数据库的CRUD基本操作\"},\"9559\":{\"t\":\"业务逻辑层：对业务逻辑进行封装，组合数据访问层层中基本功能，形成复杂的业务逻辑功能。 \"},\"9560\":{\"t\":\"例如 注册业务功能 ，我们会先调用 数据访问层 的 selectByName() 方法判断该用户名是否存在，如果不存在再调用 数据访问层 的 insert() 方法进行数据的添加操作\"},\"9561\":{\"t\":\"表现层：接收请求，封装数据，调用业务逻辑层，响应数据\"},\"9562\":{\"t\":\"6-2-2\"},\"9563\":{\"h\":\"2. 业务流程\",\"a\":\"_2-业务流程\"},\"9564\":{\"t\":\"浏览器发送请求，表现层的Servlet接收请求并调用业务逻辑层的方法进行业务逻辑处理，而业务逻辑层方法调用数据访问层方法进行数据的操作，依次返回到serlvet，然后servlet将数据交由 JSP 进行展示。\"},\"9565\":{\"h\":\"3. 命名\",\"a\":\"_3-命名\"},\"9566\":{\"t\":\"三层架构的每一层都有特有的包名称：\"},\"9567\":{\"t\":\"表现层： controller 或者 web\"},\"9568\":{\"t\":\"业务逻辑层：service\"},\"9569\":{\"t\":\"数据访问层：dao 或者 mapper（如果使用MyBatis）\"},\"9570\":{\"h\":\"4. 框架\",\"a\":\"_4-框架\"},\"9571\":{\"t\":\"SSM框架就是对三层架构的封装，不同的框架对应不同的层。\"},\"9572\":{\"t\":\"SpringMVC：表现层\"},\"9573\":{\"t\":\"Spring：业务逻辑层\"},\"9574\":{\"t\":\"MyBatis：数据访问层\"},\"9575\":{\"t\":\"6-2-3\"},\"9576\":{\"h\":\"Ⅲ. MVC与三层架构\",\"a\":\"iii-mvc与三层架构\"},\"9577\":{\"h\":\"1. 关系\",\"a\":\"_1-关系\"},\"9578\":{\"t\":\"6-2-4\"},\"9579\":{\"t\":\"如上图上半部分是 MVC 模式，上图下半部分是三层架构。 MVC 模式 中的 C（控制器）和 V（视图）就是 三层架构 中的表现层，而 MVC 模式 中的 M（模型）就是 三层架构 中的 业务逻辑层 和 数据访问层。\"},\"9580\":{\"h\":\"2. 总结\",\"a\":\"_2-总结\"},\"9581\":{\"t\":\"可以将 MVC 模式 理解成是一个大的概念，而 三层架构 是对 MVC 模式 实现架构的思想。 那么我们以后按照要求将不同层的代码写在不同的包下，每一层里功能职责做到单一，将来如果将表现层的技术换掉，而业务逻辑层和数据访问层的代码不需要发生变化。\"},\"9582\":{\"h\":\"3. 应用\",\"a\":\"_3-应用\"},\"9583\":{\"t\":\"web（表示层）= Controller+View = SpringMVC\"},\"9584\":{\"t\":\"service（业务逻辑层） = Modle - dao = Spring\"},\"9585\":{\"t\":\"dao（数据访问层）= 基本的数据访问操作 = MyBatista\"},\"9586\":{\"h\":\"6-3. XML\"},\"9587\":{\"t\":\"提示\"},\"9588\":{\"t\":\"使用Spring全家桶开发时，很多配置文件都是xml格式，因此需要对xml了解一下。\"},\"9589\":{\"t\":\"仅了解，实际使用时，都有固定的模板。\"},\"9590\":{\"h\":\"Ⅰ. xml 介绍\",\"a\":\"i-xml-介绍\"},\"9591\":{\"t\":\"xml：Extensible Markup Language，W3C推出的可扩展标记语言。\"},\"9592\":{\"t\":\"标签都是自定义的，什么标签名都可以。\"},\"9593\":{\"h\":\"1. xml与html的区别\",\"a\":\"_1-xml与html的区别\"},\"9594\":{\"t\":\"xml标签都是自定义的，html标签是预定义。\"},\"9595\":{\"t\":\"xml的语法严格，html语法松散\"},\"9596\":{\"t\":\"xml是存储数据的，html是展示数据\"},\"9597\":{\"h\":\"2. xml的用途\",\"a\":\"_2-xml的用途\"},\"9598\":{\"t\":\"作为配置文件，这是主要用途，很多框架的配置文件都是用xml写的\"},\"9599\":{\"t\":\"在网络中传输数据，这个已经基本被JSON取代了\"},\"9600\":{\"h\":\"3. 基本语法\",\"a\":\"_3-基本语法\"},\"9601\":{\"t\":\"xml文档的后缀名 .xml\"},\"9602\":{\"t\":\"xml第一行必须定义为文档声明\"},\"9603\":{\"t\":\"xml文档中必须有且仅有一个根标签\"},\"9604\":{\"t\":\"属性值必须使用引号(单双都可)引起来\"},\"9605\":{\"t\":\"标签必须正确关闭\"},\"9606\":{\"t\":\"xml标签名称区分大小写\"},\"9607\":{\"h\":\"4. 简单示例\",\"a\":\"_4-简单示例\"},\"9608\":{\"t\":\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?> <server id=\\\"1\\\"> <uname>shit</uname> <pwd>123456</pwd> <url>fuck.com</url> </server> \"},\"9609\":{\"h\":\"5. xml的组成部分\",\"a\":\"_5-xml的组成部分\"},\"9610\":{\"t\":\"①文档声明 \"},\"9611\":{\"t\":\"version：版本，必备，现在是1.0。\"},\"9612\":{\"t\":\"encoding：编码，建议：utf-8\"},\"9613\":{\"t\":\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?> \"},\"9614\":{\"t\":\"②指令：略，这个指令是用来结合CSS控制标签的样式的，因为早起XML是用来取代HTML的，现在XML不用来作为前端显示页面了，指令已经没用了。\"},\"9615\":{\"t\":\"③标签：自定义的标签名 \"},\"9616\":{\"t\":\"规则：遵循常用的命名规则即可，注意不能包含空格，不能以xml开头\"},\"9617\":{\"t\":\"④属性：id属性值是唯一的，用引号括起来。\"},\"9618\":{\"t\":\"⑤文本：CDATA区，在该区域中的数据会被原样展示 \"},\"9619\":{\"t\":\"<![CDATA[ 数据 ]]>\"},\"9620\":{\"t\":\"⑥注释：和HTML一样。\"},\"9621\":{\"h\":\"Ⅱ. 约束\",\"a\":\"ii-约束\"},\"9622\":{\"h\":\"1. 什么是约束\",\"a\":\"_1-什么是约束\"},\"9623\":{\"t\":\"xml现在的主要作用是作为配置文件，由于xml中标签是自由设置的，所以框架的使用者可以随便配置xml。但是对于框架来说，只有某些标签才是有意义的，因此框架要对xml配置文件中的内容进行一些约束。\"},\"9624\":{\"t\":\"本质：规定xml文档（配置文件）的书写规则\"},\"9625\":{\"h\":\"2. 约束文档的技术实现\",\"a\":\"_2-约束文档的技术实现\"},\"9626\":{\"t\":\"DTD:一种简单的约束技术（有缺陷，只能约束格式，无法约束内容）\"},\"9627\":{\"t\":\"Schema:一种复杂的约束技术\"},\"9628\":{\"t\":\"能够在xml中引入约束文档，能简单看懂约束文档即可。\"},\"9629\":{\"h\":\"3. DTD\",\"a\":\"_3-dtd\"},\"9630\":{\"h\":\"3.1 dtd文档示例\",\"a\":\"_3-1-dtd文档示例\"},\"9631\":{\"t\":\"<!-- 声明一个students标签，+和正则一样，必须出现1次或多次 --> <!ELEMENT students (student+) > <!-- 里面可以声明三个有参的子标签 --> <!ELEMENT student (name,age,sex)> <!-- 声明name标签，值是字符串 --> <!ELEMENT name (#PCDATA)> <!-- 声明age标签，值是字符串 --> <!ELEMENT age (#PCDATA)> <!-- 声明sex标签，值是字符串 --> <!ELEMENT sex (#PCDATA)> <!-- 声明student标签的属性，属性名是number，类型是ID，必须设置 --> <!ATTLIST student number ID #REQUIRED> \"},\"9632\":{\"h\":\"3.2 引入dtd文档\",\"a\":\"_3-2-引入dtd文档\"},\"9633\":{\"t\":\"根据约束文档写xml文档之前，要先将dtd文档引入xml文档中。 内部dtd：将约束规则定义在xml文档中【不常用】 外部dtd：将约束的规则定义在外部的dtd文件中 本地：<!DOCTYPE 根标签名 SYSTEM \\\"dtd文件的位置\\\"> 网络：<!DOCTYPE 根标签名 PUBLIC \\\"dtd文件名字\\\" \\\"dtd文件的位置URL\\\">\"},\"9634\":{\"h\":\"3.3 引入dtd，编写xml\",\"a\":\"_3-3-引入dtd-编写xml\"},\"9635\":{\"t\":\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE students SYSTEM \\\"student.dtd\\\"> <students> <student number=\\\"s001\\\"> <name>zhangsan</name> <age>abc</age> <sex>hehe</sex> </student> </students> \"},\"9636\":{\"h\":\"4. schema\",\"a\":\"_4-schema\"},\"9637\":{\"t\":\"比dtd更复杂，能约束更复杂的内容，包括标签、格式、内容，包含了很多正则。\"},\"9638\":{\"h\":\"4.1 Schema示例\",\"a\":\"_4-1-schema示例\"},\"9639\":{\"t\":\"本身也是个xml文档\"},\"9640\":{\"t\":\"xsd:element：定义元素，包含元素名和类型\"},\"9641\":{\"t\":\"xsd:complexType：自定义类型的说明，name=自定义的类型名\"},\"9642\":{\"t\":\"<?xml version=\\\"1.0\\\"?> <xsd:schema xmlns=\\\"http://www.itcast.cn/xml\\\" xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" targetNamespace=\\\"http://www.itcast.cn/xml\\\" elementFormDefault=\\\"qualified\\\" > <!-- 声明一个自定义类型的元素 --> <xsd:element name=\\\"students\\\" type=\\\"studentsType\\\"/> <!-- 约束自定义的studentsType类型，complexTye:组合类型 --> <xsd:complexType name=\\\"studentsType\\\"> <!-- sequence：按顺序出现 student元素 --> <xsd:sequence> <!-- 定义student元素，类型自定义，最少出现0次，最多无限制 --> <xsd:element name=\\\"student\\\" type=\\\"studentType\\\" minOccurs=\\\"0\\\" maxOccurs=\\\"unbounded\\\"/> </xsd:sequence> </xsd:complexType> <!-- 约束自定义的studentTyep类型 --> <xsd:complexType name=\\\"studentType\\\"> <!-- sequence：按顺序出现以下元素 --> <xsd:sequence> <!-- type是String类型 --> <xsd:element name=\\\"name\\\" type=\\\"xsd:string\\\"/> <!-- 自定义类型：ageType --> <xsd:element name=\\\"age\\\" type=\\\"ageType\\\" /> <!-- 自定义类型：sexType --> <xsd:element name=\\\"sex\\\" type=\\\"sexType\\\" /> </xsd:sequence> <!-- studentType里的属性，属性名：number，类型是numberType，required：必须出现 --> <xsd:attribute name=\\\"number\\\" type=\\\"numberType\\\" use=\\\"required\\\"/> </xsd:complexType> <!-- 对sexType类型的约束，simple：简单类型 --> <xsd:simpleType name=\\\"sexType\\\"> <!-- 基本数据格式：string --> <xsd:restriction base=\\\"xsd:string\\\"> <!-- enumeration:枚举，二选一 --> <xsd:enumeration value=\\\"male\\\"/> <xsd:enumeration value=\\\"female\\\"/> </xsd:restriction> </xsd:simpleType> <!-- 对ageType类型的约束 --> <xsd:simpleType name=\\\"ageType\\\"> <!-- 基本数据格式是integer --> <xsd:restriction base=\\\"xsd:integer\\\"> <!-- 最小值 --> <xsd:minInclusive value=\\\"0\\\"/> <!-- 最大值 --> <xsd:maxInclusive value=\\\"256\\\"/> </xsd:restriction> </xsd:simpleType> <!-- 对numberType类型的约束 --> <xsd:simpleType name=\\\"numberType\\\"> <!-- 基本数据格式：string --> <xsd:restriction base=\\\"xsd:string\\\"> <!-- 正则约束，必须heima开头后跟_加4个数字 --> <xsd:pattern value=\\\"heima_\\\\d{4}\\\"/> </xsd:restriction> </xsd:simpleType> </xsd:schema> \"},\"9643\":{\"h\":\"4.2 引入约束写xml\",\"a\":\"_4-2-引入约束写xml\"},\"9644\":{\"t\":\"可以同时引入多个约束文档，使用命名空间区分。\"},\"9645\":{\"t\":\"<!-- students：根标签 --> <students //引入xsi前缀：这行是固定格式 xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" //为命名空间起个前缀，默认前缀是空 xmlns=\\\"http://www.itcast.cn/xml\\\" //为命名空间起前缀，a就前缀 xmlns:a=\\\"http://www.dsaft.cn/xml\\\" //使用xsi引入文件，schemaLocation：命名空间，student.xsd是文件名 xsi:schemaLocation=\\\"http://www.itcast.cn/xml student.xsd\\\" > <!-- 标签省略了前缀，即为默认命名空间 --> <student number=\\\"heima_0001\\\"> <name>tom</name> <age>18</age> <sex>male</sex> </student> <!-- 指定命名空间的标签 --> <a:name>helo</name> </students> \"},\"9646\":{\"h\":\"6-4. 会话技术\"},\"9647\":{\"t\":\"提醒\"},\"9648\":{\"t\":\"当前开发，以移动平台为主，因此优先采用的是Token技术。\"},\"9649\":{\"t\":\"Cookie和Session只有浏览器能用\"},\"9650\":{\"h\":\"Ⅰ. 会话技术介绍\",\"a\":\"i-会话技术介绍\"},\"9651\":{\"h\":\"1. 会话\",\"a\":\"_1-会话\"},\"9652\":{\"t\":\"用户打开浏览器，访问web服务器的资源，会话建立，直到有一方断开连接，会话结束。\"},\"9653\":{\"t\":\"在一次会话中可以包含多次请求和响应。\"},\"9654\":{\"t\":\"从浏览器发出请求到服务端响应数据给前端之后，一次会话(在浏览器和服务器之间)就被建立了\"},\"9655\":{\"t\":\"会话被建立后，如果浏览器或服务端都没有被关闭，则会话就会持续建立着\"},\"9656\":{\"t\":\"浏览器和服务器就可以继续使用该会话进行请求发送和响应，上述的整个过程就被称之为会话。\"},\"9657\":{\"h\":\"2. 不同的会话\",\"a\":\"_2-不同的会话\"},\"9658\":{\"t\":\"每个浏览器与服务器建立的会话都是不同的会话，如图，一共有三个会话。\"},\"9659\":{\"t\":\"6-4-1\"},\"9660\":{\"h\":\"3. 会话跟踪\",\"a\":\"_3-会话跟踪\"},\"9661\":{\"t\":\"一种维护浏览器状态的方法，服务器需要识别多次请求是否来自于同一浏览器，以便在同一次会话的多次请求间共享数据。\"},\"9662\":{\"t\":\"服务器会收到多个请求，这多个请求可能来自多个浏览器，如上图中的6个请求来自3个浏览器\"},\"9663\":{\"t\":\"服务器需要用来识别请求是否来自同一个浏览器\"},\"9664\":{\"t\":\"服务器用来识别浏览器的过程，这个过程就是会话跟踪\"},\"9665\":{\"t\":\"服务器识别浏览器后就可以在同一个会话中多次请求之间来共享数据\"},\"9666\":{\"h\":\"4. 无状态协议\",\"a\":\"_4-无状态协议\"},\"9667\":{\"t\":\"浏览器和服务器之间使用的是HTTP请求来进行数据传输，HTTP协议是无状态的，每次浏览器向服务器请求时，服务器都会将该请求视为新的请求。HTTP协议设计成无状态的目的是让每次请求之间相互独立，互不影响，请求与请求之间独立后，就无法实现多次请求之间的数据共享。\"},\"9668\":{\"h\":\"5. 会话追踪技术\",\"a\":\"_5-会话追踪技术\"},\"9669\":{\"t\":\"cookie：客户端会话跟踪技术\"},\"9670\":{\"t\":\"session：服务端会话跟踪技术 这两个技术都可以实现会话跟踪，它们之间最大的区别:Cookie是存储在浏览器端而Session是存储在服务器端\"},\"9671\":{\"h\":\"Ⅱ. Cookie\",\"a\":\"ii-cookie\"},\"9672\":{\"t\":\"客户端会话技术，将数据保存到客户端，以后每次请求都携带Cookie数据进行访问。\"},\"9673\":{\"h\":\"1. 使用步骤\",\"a\":\"_1-使用步骤\"},\"9674\":{\"t\":\"Servlet-1：创建Cookie对象，绑定数据\"},\"9675\":{\"t\":\"Servlet-1：发送Cookie对象->给浏览器\"},\"9676\":{\"t\":\"浏览器：保存Cookie，并在下一次请求时携带Cookie\"},\"9677\":{\"t\":\"Servlet-2：拿到浏览器发送请求时携带的Cookie数据\"},\"9678\":{\"h\":\"2. Cookie的相关方法\",\"a\":\"_2-cookie的相关方法\"},\"9679\":{\"h\":\"2.1 创建Cookie对象\",\"a\":\"_2-1-创建cookie对象\"},\"9680\":{\"t\":\"同时构造方法会设置cookie的key 和value\"},\"9681\":{\"t\":\"new Cookie(String name, String value) Cookie cookie = new Cookie(\\\"key\\\",\\\"value\\\"); \"},\"9682\":{\"h\":\"2.2 发送Cookie对象\",\"a\":\"_2-2-发送cookie对象\"},\"9683\":{\"t\":\"将cookie对象通过响应对象Response，发送到客户端。\"},\"9684\":{\"t\":\"void ServletResponse.addCookie(Cookie c); response.addCookie(cookie); \"},\"9685\":{\"h\":\"2.3 获取Cookie数据\",\"a\":\"_2-3-获取cookie数据\"},\"9686\":{\"t\":\"可以通过请求对象Request获取cookie，Cookie可能有多个，因此返回的是数组\"},\"9687\":{\"t\":\"Cookie[] ServletRequest.getCookies(); Cookie[] cookies = request.getCookies(); \"},\"9688\":{\"h\":\"2.4 获取Cookie的name和value\",\"a\":\"_2-4-获取cookie的name和value\"},\"9689\":{\"t\":\"遍历获取的Cookie数据（数组）,来获取具体的key，value\"},\"9690\":{\"t\":\"String Cookie.getName(); //获取Cookie的name String Cookie.getValue();//获取Cookie的Value //循环Cookie[]获取Cookie for (Cookie c : cs) { String name = c.getName(); String value = c.getValue(); } \"},\"9691\":{\"h\":\"3. Cookie使用范例\",\"a\":\"_3-cookie使用范例\"},\"9692\":{\"h\":\"3.1 servlet1：创建cookie\",\"a\":\"_3-1-servlet1-创建cookie\"},\"9693\":{\"t\":\"protected void doPost(HttpServletRequest req, HttpServletResponse resp){ //1.创建Cookie对象 Cookie c = new Cookie(\\\"msg\\\",\\\"hello\\\"); //2.发送Cookie response.addCookie(c); } \"},\"9694\":{\"h\":\"3.2 servlet2：获取cookie\",\"a\":\"_3-2-servlet2-获取cookie\"},\"9695\":{\"t\":\"protected void doPost(HttpServletRequest req, HttpServletResponse resp){ //3. 获取Cookie Cookie[] cs = req.getCookies(); //4.获取数据，遍历Cookies if(cs != null){ for (Cookie c : cs) { String name = c.getName(); if(\\\"msg\\\".equals(name)){ String value = c.getValue(); System.out.println(name+\\\":\\\"+value); break; } } } } \"},\"9696\":{\"h\":\"4. Cookie的工作原理\",\"a\":\"_4-cookie的工作原理\"},\"9697\":{\"t\":\"提示：Cookie有关的所有操作都是基于请求头和响应头的，只是Servlet直接封装了一套api，省去了直接操作消息头。\"},\"9698\":{\"h\":\"4.1 Servlet1创建并发送Cookie\",\"a\":\"_4-1-servlet1创建并发送cookie\"},\"9699\":{\"t\":\"创建new Cookie(String name, String value)的本质是创建了一个响应头\"},\"9700\":{\"t\":\"set-cookie:msg=hello \"},\"9701\":{\"t\":\"然后通过response响应给了浏览器，响应头里就有了set-cookie\"},\"9702\":{\"h\":\"4.2 浏览器：保存Cookie，并在下次请求时携带Cookie\",\"a\":\"_4-2-浏览器-保存cookie-并在下次请求时携带cookie\"},\"9703\":{\"t\":\"浏览器会根据HTTP协议，自动将响应头里的set-cookie保存起来\"},\"9704\":{\"t\":\"当浏览器再次发送强求时，会携带上cookie。\"},\"9705\":{\"t\":\"cookie:msg=hello \"},\"9706\":{\"h\":\"4.3 cookie的识别\",\"a\":\"_4-3-cookie的识别\"},\"9707\":{\"t\":\"cookie不止是储存了键值对，还储存了：\"},\"9708\":{\"t\":\"域名（cookie的适用范围）\"},\"9709\":{\"t\":\"路径（细化cookie的适用范围）\"},\"9710\":{\"t\":\"过期时间：默认关掉浏览器会话就会失效，也可以指定会话时间\"},\"9711\":{\"h\":\"5. 发送多个Cookie\",\"a\":\"_5-发送多个cookie\"},\"9712\":{\"t\":\"可以创建多个Cookie对象，使用response调用多次addCookie方法发送cookie即可。\"},\"9713\":{\"t\":\"响应头和消息头都会携带多个cookie键值对。\"},\"9714\":{\"t\":\"Cookie c1 = new Cookie(\\\"msg1\\\",\\\"hello\\\"); Cookie c2 = new Cookie(\\\"msg2\\\",\\\"hi\\\"); response.addCookie(c1); response.addCookie(c2); \"},\"9715\":{\"h\":\"6. Cookie的保存时间\",\"a\":\"_6-cookie的保存时间\"},\"9716\":{\"t\":\"默认情况下，当浏览器关闭后，Cookie数据被销毁，可以手动设置Cookie的存活时间\"},\"9717\":{\"t\":\"Cookie setMaxAge(int seconds) Cookie c1 = new Cookie(\\\"msg\\\",\\\"aaa\\\"); c1.setMaxAge(2000); response.addCookie(c1); \"},\"9718\":{\"t\":\"参数值的细节：\"},\"9719\":{\"t\":\"正数：将Cookie数据写到硬盘的文件中，持久化存储。 \"},\"9720\":{\"t\":\"并指定cookie存活时间（单位s），时间到后，cookie文件自动失效\"},\"9721\":{\"t\":\"负数：默认值，会话数据储存在内存中，关闭浏览器或服务器就失效。\"},\"9722\":{\"t\":\"0：删除cookie信息，Servlet用来删除还未到期的cook信息。\"},\"9723\":{\"h\":\"7.储存中文\",\"a\":\"_7-储存中文\"},\"9724\":{\"t\":\"在tomcat 8 之前 cookie中不能直接存储中文数据。需要将中文数据转码-一般采用URL编码(%E3)。\"},\"9725\":{\"t\":\"在tomcat 8 之后，cookie支持中文数据。特殊字符还是不支持，建议使用URL编码存储，URL解码解析\"},\"9726\":{\"t\":\"String value = \\\"张三\\\"; value = URLEncoder.encode(value, \\\"UTF-8\\\");//对中文进行URL编码 System.out.println(\\\"存储数据：\\\"+value); //将编码后的值存入Cookie中 Cookie cookie = new Cookie(\\\"username\\\",value); response.addCookie(cookie); \"},\"9727\":{\"h\":\"8. cookie的共享\",\"a\":\"_8-cookie的共享\"},\"9728\":{\"h\":\"8.1 同一Tomcat服务器中，多个Web项目的cookie的共享\",\"a\":\"_8-1-同一tomcat服务器中-多个web项目的cookie的共享\"},\"9729\":{\"t\":\"假设在一个tomcat服务器中，部署了多个web项目，这些web项目中cookie默认情况是不能共享的。\"},\"9730\":{\"t\":\"setPath(String path):设置cookie的获取范围。默认情况下，设置当前的虚拟目录， 如果要共享，则可以将path设置为\\\"/\\\"\"},\"9731\":{\"h\":\"8.2 不同Tomcat服务器间Cookie的共享\",\"a\":\"_8-2-不同tomcat服务器间cookie的共享\"},\"9732\":{\"t\":\"setDomain(String path):如果设置一级域名相同，那么多个服务器之间cookie可以共享setDomain(\\\".baidu.com\\\"),那么tieba.baidu.com和news.baidu.com中cookie可以共享\"},\"9733\":{\"h\":\"9. 总结\",\"a\":\"_9-总结\"},\"9734\":{\"t\":\"cookie的特性 \"},\"9735\":{\"t\":\"cookie存储数据在客户端浏览器\"},\"9736\":{\"t\":\"浏览器对于单个cookie 的大小有限制(4kb) 以及 对同一个域名下的总cookie数量也有限制(20个)\"},\"9737\":{\"t\":\"作用 \"},\"9738\":{\"t\":\"cookie一般用于存出少量的不太敏感的数据\"},\"9739\":{\"t\":\"在不登录的情况下，完成服务器对客户端的身份识别\"},\"9740\":{\"h\":\"Ⅲ. Session\",\"a\":\"iii-session\"},\"9741\":{\"h\":\"1. 概念\",\"a\":\"_1-概念\"},\"9742\":{\"t\":\"服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。这个对象就是HttpSession。\"},\"9743\":{\"t\":\"说明：由于session数据是保存在一个对象里的，所以SESSION本质是在内存中的。\"},\"9744\":{\"h\":\"2. Session的工作流程\",\"a\":\"_2-session的工作流程\"},\"9745\":{\"t\":\"在服务端的AServlet获取一个Session对象，把数据存入其中\"},\"9746\":{\"t\":\"在服务端的BServlet获取到相同的Session对象，从中取出数据\"},\"9747\":{\"t\":\"就可以实现一次会话中多次请求之间的数据共享了 \"},\"9748\":{\"h\":\"3. 获取HttpSession对象\",\"a\":\"_3-获取httpsession对象\"},\"9749\":{\"t\":\"使用Request对象的getSession方法来获取Session对象。\"},\"9750\":{\"t\":\"HttpSession ServletRequest.getSession(); protected void doGet(HttpServletRequest req, HttpServletResponse resp){ HttpSession session = request.getSession(); } \"},\"9751\":{\"h\":\"4. HttpSession对象的方法\",\"a\":\"_4-httpsession对象的方法\"},\"9752\":{\"h\":\"4.1 设置session的键值\",\"a\":\"_4-1-设置session的键值\"},\"9753\":{\"t\":\"void setAttribute(String name, Object value) \"},\"9754\":{\"h\":\"4.2 通过键获取session的值\",\"a\":\"_4-2-通过键获取session的值\"},\"9755\":{\"t\":\"Object getAttribute(String name) \"},\"9756\":{\"h\":\"4.3 通过键删除键值对\",\"a\":\"_4-3-通过键删除键值对\"},\"9757\":{\"t\":\"void removeAttribute(String name) \"},\"9758\":{\"h\":\"4.4 获取SESSIONID\",\"a\":\"_4-4-获取sessionid\"},\"9759\":{\"t\":\"SESSIONID是session的唯一标识id。\"},\"9760\":{\"t\":\"String HttpSession.getId() \"},\"9761\":{\"h\":\"5. Session的原理\",\"a\":\"_5-session的原理\"},\"9762\":{\"t\":\"session的存在是依赖与cookie的，创建Session时，会将sessionid储存到cookie中。\"},\"9763\":{\"t\":\"浏览器：发送请求，调用的service方法中有创建session的代码。\"},\"9764\":{\"t\":\"request.getSession()：第一次创建Session时，会在内存中创建一个Session对象 \"},\"9765\":{\"t\":\"该session对象有一个id属性\"},\"9766\":{\"t\":\"响应：servlet会创建一个响应头来返回创建的sessionid \"},\"9767\":{\"t\":\"set-cookie:JSESSIONID=23a23234\"},\"9768\":{\"t\":\"浏览器：浏览器再次请求时，就会携带cookie，cookie中有JSESSIONID，服务器会自动获取JSESSIONID，用来判断是同一个用户发的请求，并调取SEESION对象的值\"},\"9769\":{\"h\":\"6. session的有效期\",\"a\":\"_6-session的有效期\"},\"9770\":{\"t\":\"当客户端关闭后，服务器不关闭，两次获取的session并不是同一个。\"},\"9771\":{\"t\":\"因为保存JSESSIOID的cookie默认只在会话期是有效的，关闭浏览器cookie就会消失，就无法获取JSEESIONID了\"},\"9772\":{\"h\":\"定义SESSION的有效期\",\"a\":\"定义session的有效期\"},\"9773\":{\"t\":\"可以通过手动创建Cookie，并指定Cookie存在的时间，来定义SESSION的有效时间。\"},\"9774\":{\"t\":\"Cookie c = new Cookie(\\\"JSESSION\\\",session.getId()); c.setMaxAge(60*60*60); response.addCookie(c); \"},\"9775\":{\"h\":\"7. session的钝化和活化\",\"a\":\"_7-session的钝化和活化\"},\"9776\":{\"t\":\"当服务器重启后，由于Session是保存在内存中的，所以默认重启后session将失效。 不过Tomcat服务器或自动对Session对象进行钝化和活化。\"},\"9777\":{\"t\":\"session的钝化：在服务器正常关闭之前，将session对象系列化到硬盘上\"},\"9778\":{\"t\":\"session活化：在服务器启动后，将session文件转化为内存中的session对象即可。\"},\"9779\":{\"t\":\"注意：idea中是无法实现活化的，测试的时候要注意，生产环境无影响。\"},\"9780\":{\"h\":\"8. session的销毁\",\"a\":\"_8-session的销毁\"},\"9781\":{\"h\":\"8.1\",\"a\":\"_8-1\"},\"9782\":{\"t\":\"服务器关闭：自动销毁内存中的SESSION（其实是会钝化处理的）\"},\"9783\":{\"t\":\"session默认失效时间 30分钟，也就是30分钟后，SEESION就自动删除了，假如使用Session储存登陆信息，30分钟就会自动掉线。可以通过修改配置文件，设置session自动销毁的时间：\"},\"9784\":{\"t\":\"文件：web.xml\"},\"9785\":{\"t\":\"<session-config> <session-timeout>30</session-timeout> //单位是分钟 </session-config> \"},\"9786\":{\"h\":\"8.2 手动销毁\",\"a\":\"_8-2-手动销毁\"},\"9787\":{\"t\":\"session对象调用invalidate() 可以手动销毁session。\"},\"9788\":{\"h\":\"9. session的特点\",\"a\":\"_9-session的特点\"},\"9789\":{\"t\":\"session用于存储一次会话的多次请求的数据，存在服务器端\"},\"9790\":{\"t\":\"session可以存储任意类型，任意大小的数据\"},\"9791\":{\"h\":\"Ⅳ. 总结\",\"a\":\"iv-总结\"},\"9792\":{\"h\":\"1. Cookie与Session的区别\",\"a\":\"_1-cookie与session的区别\"},\"9793\":{\"t\":\"存储位置：Cookie 是将数据存储在客户端，Session 将数据存储在服务端\"},\"9794\":{\"t\":\"安全性：Cookie不安全，Session安全\"},\"9795\":{\"t\":\"数据大小：Cookie最大3KB，Session无大小限制\"},\"9796\":{\"t\":\"存储时间：Cookie可以通过setMaxAge()长期存储，Session默认30分钟\"},\"9797\":{\"t\":\"服务器性能：Cookie不占服务器资源，Session占用服务器资源\"},\"9798\":{\"h\":\"2. Cookie与Session的应用场景\",\"a\":\"_2-cookie与session的应用场景\"},\"9799\":{\"t\":\"购物车:使用Cookie来存储\"},\"9800\":{\"t\":\"以登录用户的名称展示:使用Session来存储\"},\"9801\":{\"t\":\"记住我功能:使用Cookie来存储\"},\"9802\":{\"t\":\"验证码:使用session来存储\"},\"9803\":{\"h\":\"3. 结论\",\"a\":\"_3-结论\"},\"9804\":{\"t\":\"Cookie是用来保证用户在未登录情况下的身份识别\"},\"9805\":{\"t\":\"Session是用来保存用户登录后的数据\"},\"9806\":{\"h\":\"6-5. JSON\"},\"9807\":{\"h\":\"Ⅰ. JSON语法\",\"a\":\"i-json语法\"},\"9808\":{\"t\":\"详见：前端>基础>JS>8.其他>json\"},\"9809\":{\"h\":\"Ⅱ. JSON转换\",\"a\":\"ii-json转换\"},\"9810\":{\"h\":\"1. JSON与Java对象\",\"a\":\"_1-json与java对象\"},\"9811\":{\"t\":\"6-5-1\"},\"9812\":{\"t\":\"请求数据：JSON字符串转为Java对象\"},\"9813\":{\"t\":\"响应数据：Java对象转为JSON字符串\"},\"9814\":{\"h\":\"2. Fastjson：JSON与Java对象的转换\",\"a\":\"_2-fastjson-json与java对象的转换\"},\"9815\":{\"t\":\"Fastjson 是阿里巴巴提供的一个Java语言编写的高性能功能完善的 JSON 库，是目前Java语言中最快的 JSON 库，可以实现 Java 对象和 JSON 字符串的相互转换。\"},\"9816\":{\"h\":\"导入坐标\",\"a\":\"导入坐标\"},\"9817\":{\"t\":\"Maven导入Fastjson包\"},\"9818\":{\"t\":\"<dependency> <groupId>com.alibaba</groupId> <artifactId>fastjson</artifactId> <version>1.2.62</version> </dependency> \"},\"9819\":{\"h\":\"3. Java对象转JSON\",\"a\":\"_3-java对象转json\"},\"9820\":{\"t\":\"使用 Fastjson 提供的 JSON 类中的 toJSONString() 静态方法即可。\"},\"9821\":{\"t\":\"String jsonStr = JSON.toJSONString(obj); \"},\"9822\":{\"h\":\"4. JSON转Java对象\",\"a\":\"_4-json转java对象\"},\"9823\":{\"t\":\"使用 Fastjson 提供的 JSON 类中的 parseObject() 静态方法即可。\"},\"9824\":{\"t\":\"User user = JSON.parseObject(jsonStr, User.class); \"},\"9825\":{\"h\":\"1-1. ES介绍\"},\"9826\":{\"h\":\"ES 概述\",\"a\":\"es-概述\"},\"9827\":{\"t\":\"全文搜索属于最常见的需求，开源的 Elasticsearch是目前全文搜索引擎的首选。\"},\"9828\":{\"t\":\"它可以快速地储存、搜索和分析海量数据。\"},\"9829\":{\"h\":\"1. Elastic Stack\",\"a\":\"_1-elastic-stack\"},\"9830\":{\"t\":\"1-1-1\"},\"9831\":{\"t\":\"The Elastic Stack, 包括 Elasticsearch、Kibana、Beats 和 Logstash（也称为 ELK Stack）。\"},\"9832\":{\"t\":\"这个技术栈能够安全可靠地获取任何来源、任何格式的数据，然后实时地对数据进行搜索、分析和可视化。\"},\"9833\":{\"h\":\"2. Elastic Search\",\"a\":\"_2-elastic-search\"},\"9834\":{\"t\":\"Elaticsearch，简称为 ES，ES 是一个开源的高扩展的分布式全文搜索引擎，是整个 Elastic Stack 技术栈的核心。\"},\"9835\":{\"t\":\"它可以近乎实时的存储、检索数据；本身扩展性很好，可以扩展到上百台服务器，处理 PB 级别的数据。\"},\"9836\":{\"h\":\"3. Lucene\",\"a\":\"_3-lucene\"},\"9837\":{\"t\":\"Lucene 是 Apache 软件基金会 Jakarta 项目组的一个子项目，能够做全文索引和搜寻。Lucene只是一个提供全文搜索功能类库的核心工具包，需要晚上的服务框架搭建起来进行应用。\"},\"9838\":{\"t\":\"主流搜索引擎软件就两款：ElasticSearch 和 Solr, 这两款都是基于 Lucene 搭建的，两者的功能和效率基本一样。市面上比较流行的是ElasticSearch。\"},\"9839\":{\"h\":\"4. 分布式\",\"a\":\"_4-分布式\"},\"9840\":{\"t\":\"Elastic 本质上是一个分布式数据库，允许多台服务器协同工作，每台服务器可以运行多个 Elastic 实例。单个 Elastic 实例称为一个节点（node）。一组节点构成一个集群（cluster）\"},\"9841\":{\"h\":\"5. 大企业的选择\",\"a\":\"_5-大企业的选择\"},\"9842\":{\"t\":\"以下IT公司采用了ElasticSearch\"},\"9843\":{\"t\":\"GitHub：GitHub 使用Elasticsearch 搜索 20TB 的数据\"},\"9844\":{\"t\":\"维基百科：启动以 Elasticsearch 为基础的核心搜索架构\"},\"9845\":{\"t\":\"SoundCloud：为 1.8 亿用户提供即时而精准的音乐搜索\"},\"9846\":{\"t\":\"百度：目前广泛使用 Elasticsearch 作为文本数据分析\"},\"9847\":{\"t\":\"新浪：使用 Elasticsearch 分析处理 32 亿条实时日志\"},\"9848\":{\"t\":\"阿里：使用 Elasticsearch 构建日志采集和分析体系\"},\"9849\":{\"t\":\"Stack Overflow\"},\"9850\":{\"h\":\"全文搜索引擎\",\"a\":\"全文搜索引擎\"},\"9851\":{\"h\":\"1. 背景\",\"a\":\"_1-背景\"},\"9852\":{\"t\":\"Google，百度类的网站搜索，它们都是根据网页中的关键字生成索引，我们在搜索的时候输入关键字，它们会将该关键字即索引匹配到的所有网页返回；还有常见的项目中应用日志的搜索等等。对于这些非结构化的数据文本，关系型数据库搜索不是能很好的支持。\"},\"9853\":{\"h\":\"2. 传统数据库的缺点\",\"a\":\"_2-传统数据库的缺点\"},\"9854\":{\"t\":\"一般传统数据库，全文检索都实现的很鸡肋，因为一般也没人用数据库存文本字段。进行全文检索需要扫描整个表，如果数据量大的话即使对 SQL 的语法优化，也收效甚微。建立了索引，但是维护起来也很麻烦，对于 insert 和 update 操作都会重新构建索引。\"},\"9855\":{\"h\":\"3. 不适用常规搜索的场景\",\"a\":\"_3-不适用常规搜索的场景\"},\"9856\":{\"t\":\"基于以上原因可以分析得出，在一些生产环境中，使用常规的搜索方式，性能是非常差的：\"},\"9857\":{\"t\":\"搜索的数据对象是大量的非结构化的文本数据。\"},\"9858\":{\"t\":\"文件记录量达到数十万或数百万个甚至更多。\"},\"9859\":{\"t\":\"支持大量基于交互式文本的查询。\"},\"9860\":{\"t\":\"需求非常灵活的全文搜索查询。\"},\"9861\":{\"t\":\"对高度相关的搜索结果的有特殊需求，但是没有可用的关系数据库可以满足\"},\"9862\":{\"t\":\"对不同记录类型、非文本数据操作或安全事务处理的需求相对较少的情况。\"},\"9863\":{\"h\":\"4. 全文搜索\",\"a\":\"_4-全文搜索\"},\"9864\":{\"t\":\"为了解决结构化数据搜索和非结构化数据搜索性能问题，我们就需要专业，健壮，强大的全文搜索引擎。这里说到的全文搜索引擎指的是目前广泛应用的主流搜索引擎。\"},\"9865\":{\"h\":\"工作原理\",\"a\":\"工作原理\"},\"9866\":{\"t\":\"它的工作原理是计算机索引程序通过扫描文章中的每一个词，对每一个词建立一个索引，指明该词在文章中出现的次数和位置，当用户查询时，检索程序就根据事先建立的索引进行查找，并将查找的结果反馈给用户的检索方式。这个过程类似于通过字典中的检索字表查字的过程。\"},\"9867\":{\"h\":\"1-2. 环境准备\"},\"9868\":{\"h\":\"ES安装\",\"a\":\"es安装\"},\"9869\":{\"t\":\"ElasticSearch官网\"},\"9870\":{\"t\":\"下载地址\"},\"9871\":{\"t\":\"当前最新版本是8.8.1\"},\"9872\":{\"h\":\"1. 系统\",\"a\":\"_1-系统\"},\"9873\":{\"t\":\"Elasticsearch 分为 Linux 、MacOS 和 Windows 版本，先使用Windows环境作为学习和开发使用，生产时要部署到Linux服务器。\"},\"9874\":{\"t\":\"Linux环境的部署，见后续章节。\"},\"9875\":{\"h\":\"2. 安装软件\",\"a\":\"_2-安装软件\"},\"9876\":{\"t\":\"该软件为绿色软件，将下载的压缩包解压后即可使用。\"},\"9877\":{\"t\":\"目录结构如下：\"},\"9878\":{\"t\":\"1-2-1\"},\"9879\":{\"t\":\"bin：可执行脚本目录\"},\"9880\":{\"t\":\"config：配置目录\"},\"9881\":{\"t\":\"jdk：内置JDK目录\"},\"9882\":{\"t\":\"lib：类库\"},\"9883\":{\"t\":\"logs：日志目录\"},\"9884\":{\"t\":\"modules：模块目录\"},\"9885\":{\"t\":\"plugins：插件目录\"},\"9886\":{\"t\":\"由目录结构可知，ElasticSearch是基于Java开发的。\"},\"9887\":{\"h\":\"3. 启动服务\",\"a\":\"_3-启动服务\"},\"9888\":{\"t\":\"解压后，进入 bin 文件目录，点击 elasticsearch.bat 文件启动 ES 服务\"},\"9889\":{\"t\":\"由于ES内置了JDK，所以默认不会采用电脑里的JDK，而是用自己捆绑的JDK。\"},\"9890\":{\"h\":\"4. 访问测试\",\"a\":\"_4-访问测试\"},\"9891\":{\"t\":\"9300 端口为 Elasticsearch 集群间组件的通信端口\"},\"9892\":{\"t\":\"9200 端口为浏览器访问的 http协议 RESTful 端口。\"},\"9893\":{\"t\":\"打开浏览器输入地址：http://localhost:9200，进行访问\"},\"9894\":{\"t\":\"访问结果如下：\"},\"9895\":{\"t\":\"{ \\\"name\\\" : \\\"PC-20210318BCMF\\\", \\\"cluster_name\\\" : \\\"elasticsearch\\\", \\\"cluster_uuid\\\" : \\\"PbTqhy8eTVS2B7eO_0P_oA\\\", \\\"version\\\" : { \\\"number\\\" : \\\"8.8.1\\\", \\\"build_flavor\\\" : \\\"default\\\", \\\"build_type\\\" : \\\"zip\\\", \\\"build_hash\\\" : \\\"f8edfccba429b6477927a7c1ce1bc6729521305e\\\", \\\"build_date\\\" : \\\"2023-06-05T21:32:25.188464208Z\\\", \\\"build_snapshot\\\" : false, \\\"lucene_version\\\" : \\\"9.6.0\\\", \\\"minimum_wire_compatibility_version\\\" : \\\"7.17.0\\\", \\\"minimum_index_compatibility_version\\\" : \\\"7.0.0\\\" }, \\\"tagline\\\" : \\\"You Know, for Search\\\" } \"},\"9896\":{\"h\":\"5. debug\",\"a\":\"_5-debug\"},\"9897\":{\"h\":\"取消安全验证\",\"a\":\"取消安全验证\"},\"9898\":{\"t\":\"当启动Elasticsearch后，在浏览器输入地址 http://localhost:9200/，会产生报错。\"},\"9899\":{\"t\":\"报错信息：received plaintext http traffic on an https channel, closing connection\"},\"9900\":{\"t\":\"原因：Elasticsearch在Windows下开启了安全认证，虽然started成功，但访问http://localhost:9200/失败\"},\"9901\":{\"t\":\"解决方案：找到config/目录下面的elasticsearch.yml配置文件，把安全认证开关从原先的true都改成false，实现免密登录访问即可，修改这两处都为false后：\"},\"9902\":{\"t\":\"# Enable security features xpack.security.enabled: false # 这里由true改为false xpack.security.enrollment.enabled: true xpack.security.http.ssl: enabled: false # 这里由true改为false keystore.path: certs/http.p12 \"},\"9903\":{\"h\":\"HTTP\",\"a\":\"http\"},\"9904\":{\"t\":\"浏览器是通过HTTP协议向ElasticSearch服务器发送请求的。\"},\"9905\":{\"t\":\"RESTFul：通过RESTFul风格访问ES服务器的资源\"},\"9906\":{\"t\":\"JSON：通过JSON格式传递数据\"},\"9907\":{\"t\":\"Postman：通过Postman工具进行数据访问的测试\"},\"9908\":{\"h\":\"1-3. 数据格式与索引\"},\"9909\":{\"h\":\"数据格式\",\"a\":\"数据格式\"},\"9910\":{\"t\":\"Elasticsearch 是面向文档型数据库，一条数据在这里就是一个文档。\"},\"9911\":{\"h\":\"1. ElasticSearch 与 MySQL对比\",\"a\":\"_1-elasticsearch-与-mysql对比\"},\"9912\":{\"t\":\"为了方便理解，将 Elasticsearch 里存储文档数据和关系型数据库 MySQL 存储数据的概念进行一个类比\"},\"9913\":{\"t\":\"1-3-1\"},\"9914\":{\"h\":\"3. 数据类型简介\",\"a\":\"_3-数据类型简介\"},\"9915\":{\"t\":\"ES 里的 Index 可以看做一个库，而 Types 相当于表，Documents 则相当于表的行。\"},\"9916\":{\"t\":\"这里 Types 的概念已经被逐渐弱化，现在版本的ES中已经没有Type这个概念了。\"},\"9917\":{\"h\":\"正排索引\",\"a\":\"正排索引\"},\"9918\":{\"t\":\"提示\"},\"9919\":{\"t\":\"ElasticSearch采用的是倒排索引，在此之前先了解下正排索引。\"},\"9920\":{\"h\":\"1.概述\",\"a\":\"_1-概述\"},\"9921\":{\"t\":\"又称正向索引，当用户发起查询时（假设查询为一个关键词），搜索引擎会扫描索引库中的所有文档，找出所有包含关键词的文档，这样依次从文档中去查找是否含有关键词的方法叫做正向索引。\"},\"9922\":{\"h\":\"2. 正向索引的结构\",\"a\":\"_2-正向索引的结构\"},\"9923\":{\"t\":\"1-3-2\"},\"9924\":{\"h\":\"3. 正向索引解析\",\"a\":\"_3-正向索引解析\"},\"9925\":{\"t\":\"我们查询数据时，输入的是关键字,搜索引擎会扫描库中包含该关键字的所有文档，然后返回文档的id，通过id获取文档，我们就可以查询到结果了。\"},\"9926\":{\"h\":\"4. 正向索引的缺点\",\"a\":\"_4-正向索引的缺点\"},\"9927\":{\"t\":\"对于文档的查询来说，一个站点存在的文档可能会非常多，这样遍历的索引结构效率低下，无法满足用户需求。\"},\"9928\":{\"t\":\"因此才有了对文档搜索效率更高的倒排索引。\"},\"9929\":{\"h\":\"关键字-文档矩阵\",\"a\":\"关键字-文档矩阵\"},\"9930\":{\"t\":\"提示\"},\"9931\":{\"t\":\"先了解下关键字与文档之间的关系。\"},\"9932\":{\"t\":\"单词-文档矩阵是表达两者之间所具有的一种包含关系的概念模型。\"},\"9933\":{\"h\":\"示例\",\"a\":\"示例\"},\"9934\":{\"t\":\"如下几个文档：\"},\"9935\":{\"t\":\"d1：马斯克创建了SpaceX\"},\"9936\":{\"t\":\"d2：SpaceX 星舰下个月发射\"},\"9937\":{\"t\":\"d3：马斯克说将亲自指挥星舰的发射\"},\"9938\":{\"t\":\"此时，用户将以马斯克、SpaceX和星舰进行查询，关键字与文档的矩阵为：\"},\"9939\":{\"t\":\"d1\"},\"9940\":{\"t\":\"d2\"},\"9941\":{\"t\":\"d3\"},\"9942\":{\"t\":\"马斯克\"},\"9943\":{\"t\":\"√\"},\"9944\":{\"t\":\"√\"},\"9945\":{\"t\":\"SpaceX\"},\"9946\":{\"t\":\"√\"},\"9947\":{\"t\":\"√\"},\"9948\":{\"t\":\"星舰\"},\"9949\":{\"t\":\"√\"},\"9950\":{\"t\":\"√\"},\"9951\":{\"h\":\"矩阵解读\",\"a\":\"矩阵解读\"},\"9952\":{\"t\":\"横向：表示哪些文档包含了该关键字，d1和d3包含了 马斯克 这个关键字\"},\"9953\":{\"t\":\"纵向：表示每个单独的文档包含了哪些关键字，如果d1包含了马斯克和SpaceX\"},\"9954\":{\"h\":\"搜索引擎的索引\",\"a\":\"搜索引擎的索引\"},\"9955\":{\"t\":\"搜索引擎的索引其实就是实现 关键字-矩阵的具体数据结构。可以有不同的方式来实现上述概念模型\"},\"9956\":{\"t\":\"正排索引：创建的索引是文档的id，搜索的过程是遍历每一个文档，比对是否有所要查询的关键字，如果有就记录文档的id，最后返回所有的文档id。 \"},\"9957\":{\"t\":\"然后通过文档id获取对应的文档作为结果呈现。\"},\"9958\":{\"t\":\"这种方式非常的低效\"},\"9959\":{\"t\":\"倒排索引：为所有关键字创建索引，关键字对应的值就是包含该关键字的所有文档id。搜索的过程是直接通过索引拿到关键字对应的文档id。 \"},\"9960\":{\"t\":\"然后通过id获取对应的文档作为结果呈现。\"},\"9961\":{\"t\":\"这种方式是最佳的方案，ES就采用了这种方案。\"},\"9962\":{\"t\":\"其他方式：签名文件、后缀树等，这些方式的效率也都不如倒排索引。\"},\"9963\":{\"h\":\"倒排索引\",\"a\":\"倒排索引\"},\"9964\":{\"h\":\"1. 概述\",\"a\":\"_1-概述-1\"},\"9965\":{\"t\":\"倒排索引(Inverted Index)：倒排索引是实现“单词-文档矩阵”的一种具体存储形式，通过倒排索引，可以根据单词快速获取包含这个单词的文档列表。\"},\"9966\":{\"h\":\"2. 倒排索引的结构\",\"a\":\"_2-倒排索引的结构\"},\"9967\":{\"t\":\"为了增加效率，搜索引擎会把正向索引变为反向索引（倒排索引）即把“文档→单词”的形式变为“单词→文档”的形式。倒排索引具体机构如下:\"},\"9968\":{\"t\":\"单词1→文档1的ID；文档2的ID；文档3的ID…\"},\"9969\":{\"t\":\"单词2→文档1的ID；文档4的ID；文档7的ID…\"},\"9970\":{\"h\":\"3. 组成\",\"a\":\"_3-组成\"},\"9971\":{\"t\":\"倒排索引主要由两个部分组成：“单词词典”和“倒排文件”。\"},\"9972\":{\"t\":\"单词词典(Lexicon)：搜索引擎的索引单位是单词，单词词典是由文档集合中出现过的所有单词构成的字符串集合，单词词典内每条索引项记载单词本身的一些信息以及指向“倒排列表”的指针。\"},\"9973\":{\"t\":\"倒排列表(PostingList)：倒排列表记载了出现过某个单词的所有文档的文档列表及单词在该文档中出现的位置信息，每条记录称为一个倒排项(Posting)。根据倒排列表，即可获知哪些文档包含某个单词。\"},\"9974\":{\"t\":\"倒排文件(Inverted File)：所有单词的倒排列表往往顺序地存储在磁盘的某个文件里，这个文件即被称之为倒排文件，倒排文件是存储倒排索引的物理文件。\"},\"9975\":{\"t\":\"1-3-3\"},\"9976\":{\"h\":\"4. 倒排索引的简单实现示例\",\"a\":\"_4-倒排索引的简单实现示例\"},\"9977\":{\"t\":\"如下几个文档：\"},\"9978\":{\"t\":\"d1：马斯克创建了SpaceX\"},\"9979\":{\"t\":\"d2：SpaceX 星舰下个月发射\"},\"9980\":{\"t\":\"d3：马斯克说将亲自指挥星舰的发射\"},\"9981\":{\"t\":\"通过这5个文档建立简单的倒排索引:\"},\"9982\":{\"t\":\"单词id\"},\"9983\":{\"t\":\"关键字（单词）\"},\"9984\":{\"t\":\"倒排列表\"},\"9985\":{\"t\":\"1\"},\"9986\":{\"t\":\"马斯克\"},\"9987\":{\"t\":\"{1,3}\"},\"9988\":{\"t\":\"2\"},\"9989\":{\"t\":\"SpaceX\"},\"9990\":{\"t\":\"{1,2}\"},\"9991\":{\"t\":\"3\"},\"9992\":{\"t\":\"星舰\"},\"9993\":{\"t\":\"{2,3}\"},\"9994\":{\"t\":\"首先要用分词系统将文档自动切分成单词序列，这样就让文档转换为由单词序列构成的数据流，并对每个不同的单词赋予唯一的单词编号(WordID)，并且每个单词都有对应的含有该单词的文档列表即倒排列表。\"},\"9995\":{\"h\":\"略微复杂的倒排列表\",\"a\":\"略微复杂的倒排列表\"},\"9996\":{\"t\":\"下面介绍一种更加复杂，包含信息更多的倒排索引。\"},\"9997\":{\"t\":\"单词id\"},\"9998\":{\"t\":\"关键字（单词）\"},\"9999\":{\"t\":\"倒排列表(文档id;TF;<Pos>)\"},\"10000\":{\"t\":\"1\"},\"10001\":{\"t\":\"马斯克\"},\"10002\":{\"t\":\"(1;1;<1>),(3;1;<1>)\"},\"10003\":{\"t\":\"2\"},\"10004\":{\"t\":\"SpaceX\"},\"10005\":{\"t\":\"(1;1;<7>),(2;1;<1>)\"},\"10006\":{\"t\":\"3\"},\"10007\":{\"t\":\"星舰\"},\"10008\":{\"t\":\"(2;1;<7>),(3;1;<10>)\"},\"10009\":{\"t\":\"TF：单词在文档中出现的次数\"},\"10010\":{\"t\":\"Pos: 单词在文档中出现的位置，也就是字符顺序\"},\"10011\":{\"t\":\"这个表格展示了更加复杂的倒排索引，前两列不变，第三列倒排索引包含的信息为(文档ID，单词频次，<单词位置>)\"},\"10012\":{\"h\":\"1-1. 介绍\"},\"10013\":{\"h\":\"Ⅰ. MongoDB 简介\",\"a\":\"i-mongodb-简介\"},\"10014\":{\"t\":\"MongoDB是一个开源、高性能、无模式的 文档型数据库 ，当初的设计就是用于简化开发和方便扩展，是NoSQL数据库产品中的一种。是 最像关系型数据库（MySQL） 的非关系型数据库。\"},\"10015\":{\"h\":\"1. line\",\"a\":\"_1-line\"},\"10016\":{\"t\":\"官网：https://www.mongodb.com/\"},\"10017\":{\"h\":\"2. 语法风格\",\"a\":\"_2-语法风格\"},\"10018\":{\"t\":\"类似于: JS+MySQL的缝合\"},\"10019\":{\"h\":\"3. 优点\",\"a\":\"_3-优点\"},\"10020\":{\"t\":\"高性能：MongoDB提供高性能的数据持久性。\"},\"10021\":{\"t\":\"高可用：MongoDB的复制工具称为副本集（replica set），它可提供自动故障转移和数据冗余。\"},\"10022\":{\"t\":\"高扩展：提供了水平可扩展性作为其核心功能的一部分。\"},\"10023\":{\"t\":\"丰富查询支持：支持丰富的查询语言\"},\"10024\":{\"t\":\"其他：如无模式（动态模式）、灵活的文档模型\"},\"10025\":{\"h\":\"4. 应用场景\",\"a\":\"_4-应用场景\"},\"10026\":{\"t\":\"很多应用场景，关系型数据库难易应对。 其实MogoDB很多时候是关系型数据库的一个替代。\"},\"10027\":{\"h\":\"3.1 解决的问题\",\"a\":\"_3-1-解决的问题\"},\"10028\":{\"t\":\"MongoDB可应对“三高”需求：\"},\"10029\":{\"t\":\"High performance - 对数据库高并发读写的需求。\"},\"10030\":{\"t\":\"Huge Storage - 对海量数据的高效率存储和访问的需求。\"},\"10031\":{\"t\":\"High Scalability && High Availability- 对数据库的高可扩展性和高可用性的需求。\"},\"10032\":{\"h\":\"3.2 具体应用场景\",\"a\":\"_3-2-具体应用场景\"},\"10033\":{\"t\":\"适合：数据流大、读写频繁以及价值比较低的数据。\"},\"10034\":{\"t\":\"社交场景：使用 MongoDB 存储用户信息，以及用户发表的朋友圈信息，通过地理位置索引实现附近的人、地点等功能。\"},\"10035\":{\"t\":\"游戏场景：使用 MongoDB 存储游戏用户信息，用户的装备、积分等直接以内嵌文档的形式存储，方便查询、高效率存储和访问。\"},\"10036\":{\"t\":\"物流场景：使用 MongoDB 存储订单信息，订单状态在运送过程中会不断更新，以 MongoDB 内嵌数组的形式来存储，一次查询就能将订单所有的变更读取出来。\"},\"10037\":{\"t\":\"物联网场景：使用 MongoDB 存储所有接入的智能设备信息，以及设备汇报的日志信息，并对这些信息进行多维度的分析。\"},\"10038\":{\"t\":\"视频直播，使用 MongoDB 存储用户信息、点赞互动信息等。\"},\"10039\":{\"h\":\"3.3 选择的依据\",\"a\":\"_3-3-选择的依据\"},\"10040\":{\"t\":\"新应用，需求会变，数据模型无法确定，想快速迭代开发\"},\"10041\":{\"t\":\"应用不需要事务及复杂 join 支持\"},\"10042\":{\"t\":\"应用需要TB甚至 PB 级别数据存储\"},\"10043\":{\"t\":\"应用发展迅速，需要能快速水平扩展\"},\"10044\":{\"t\":\"应用需要大量的地理位置查询、文本查询\"},\"10045\":{\"h\":\"4. Serverless\",\"a\":\"_4-serverless\"},\"10046\":{\"t\":\"当前，云服务兴起，云服务一般采用以MongoDB为核心的数据库架构。\"},\"10047\":{\"h\":\"Ⅱ. 存储结构\",\"a\":\"ii-存储结构\"},\"10048\":{\"h\":\"1. 和MySQL对比\",\"a\":\"_1-和mysql对比\"},\"10049\":{\"t\":\"1-1-1\"},\"10050\":{\"t\":\"术语对比\"},\"10051\":{\"t\":\"SQL术语\"},\"10052\":{\"t\":\"MongoDB术语\"},\"10053\":{\"t\":\"说明\"},\"10054\":{\"t\":\"database\"},\"10055\":{\"t\":\"database\"},\"10056\":{\"t\":\"数据库\"},\"10057\":{\"t\":\"table\"},\"10058\":{\"t\":\"collection\"},\"10059\":{\"t\":\"数据库表/集合\"},\"10060\":{\"t\":\"row\"},\"10061\":{\"t\":\"document\"},\"10062\":{\"t\":\"数据记录行/文档\"},\"10063\":{\"t\":\"column\"},\"10064\":{\"t\":\"ﬁeld\"},\"10065\":{\"t\":\"数据字段/域\"},\"10066\":{\"t\":\"index\"},\"10067\":{\"t\":\"index\"},\"10068\":{\"t\":\"索引\"},\"10069\":{\"t\":\"table joins\"},\"10070\":{\"t\":\"表连接,MongoDB不支持\"},\"10071\":{\"t\":\"嵌入文档\"},\"10072\":{\"t\":\"MongoDB通过嵌入式文档来替代多表连接\"},\"10073\":{\"t\":\"primary key\"},\"10074\":{\"t\":\"primary key\"},\"10075\":{\"t\":\"主键,MongoDB自动将_id字段设置为主键\"},\"10076\":{\"h\":\"2. 数据结构\",\"a\":\"_2-数据结构\"},\"10077\":{\"t\":\"MongoDB支持的数据结构非常松散，是一种类似于 JSON 的 格式叫BSON，所以它既可以存储比较复杂的数据类型，又相当的灵活。\"},\"10078\":{\"t\":\"MongoDB中的记录是一个 文档 ，它是一个由字段和值对（ﬁeld:value）组成的数据结构。MongoDB文档类似于JSON对象，即 一个文档认为就是一个对象 。字段的数据类型是字符型，它的值除了使用基本的一些类型外，还可以包括其他文档、普通数组和文档数组。\"},\"10079\":{\"t\":\"MongoDB的最小存储单位就是文档(document)对象。文档(document)对象对应于关系型数据库的 行 。 数据在MongoDB中以BSON（Binary-JSON）文档的格式存储在磁盘上。\"},\"10080\":{\"h\":\"3. BSON\",\"a\":\"_3-bson\"},\"10081\":{\"t\":\"BSON（Binary Serialized Document Format）是一种类json的一种二进制形式的存储格式，简称Binary JSON。BSON和JSON一样，支持内嵌的文档对象和数组对象，但是BSON有JSON没有的一些数据类型，如Date和BinData类型。\"},\"10082\":{\"t\":\"BSON采用了类似于 C 语言结构体的名称、对表示方法，支持内嵌的文档对象和数组对象，具有轻量性、可遍历性、高效性的三个特点，可以有效描述非结构化数据和结构化数据。这种格式的优点是灵活性高，但它的缺点是空间利用率不是很理想。\"},\"10083\":{\"t\":\"Bson中，除了基本的JSON类型：string,integer,boolean,double,null,array和object，mongo还使用了特殊的数据类型。这些类型包括date,object id,binary data,regular expression 和code。每一个驱动都以特定语言的方式实现了这些类型。\"},\"10084\":{\"h\":\"4. BSON数据类型参考\",\"a\":\"_4-bson数据类型参考\"},\"10085\":{\"t\":\"数据类型\"},\"10086\":{\"t\":\"描述\"},\"10087\":{\"t\":\"举例\"},\"10088\":{\"t\":\"字符串\"},\"10089\":{\"t\":\"字符串类型的数据\"},\"10090\":{\"t\":\"{\\\"x\\\" : \\\"foobar\\\"} \"},\"10091\":{\"t\":\"对象id\"},\"10092\":{\"t\":\"文档的12字节的唯一 ID\"},\"10093\":{\"t\":\"{\\\"x\\\" \\\\:ObjectId() } \"},\"10094\":{\"t\":\"布尔值\"},\"10095\":{\"t\":\"true或者false\"},\"10096\":{\"t\":\"{\\\"x\\\"\\\\:true} \"},\"10097\":{\"t\":\"数组\"},\"10098\":{\"t\":\"值的集合或者列表可以表示成数组\"},\"10099\":{\"t\":\"{\\\"x\\\" ： \\\\[\\\"a\\\", \\\"b\\\", \\\"c\\\"]}\"},\"10100\":{\"t\":\"浮点数\"},\"10101\":{\"t\":\"数字就这一种类型，不支持整数\"},\"10102\":{\"t\":\"{\\\"x\\\"：3.14159，\\\"y\\\"：3}\"},\"10103\":{\"t\":\"null\"},\"10104\":{\"t\":\"空值或者未定义的对象\"},\"10105\":{\"t\":\"{\\\"x\\\"\\\\:null}\"},\"10106\":{\"t\":\"undeﬁned\"},\"10107\":{\"t\":\"未定义类型\"},\"10108\":{\"t\":\"{\\\"x\\\"\\\\:undeﬁned}\"},\"10109\":{\"t\":\"正则表达式\"},\"10110\":{\"t\":\"采用JavaScript的正则表达式语法\"},\"10111\":{\"t\":\"{\\\"x\\\" ： /foobar/i} \"},\"10112\":{\"t\":\"代码\"},\"10113\":{\"t\":\"文档中还可以包含JavaScript代码\"},\"10114\":{\"t\":\"{\\\"x\\\" ： function() { /\\\\* …… \\\\*/ }}\"},\"10115\":{\"h\":\"Ⅲ. MongoDB 与 Redis\",\"a\":\"iii-mongodb-与-redis\"},\"10116\":{\"t\":\"MongoDB和Redis都是NoSQL，采用结构型数据存储。 现在的分布式项目基本都会用到redis和mongodb。 二者在使用场景中，存在一定的区别。\"},\"10117\":{\"h\":\"1. 定位\",\"a\":\"_1-定位\"},\"10118\":{\"t\":\"定为不同：大家一般称之为Redis缓存、MongoDB数据库。\"},\"10119\":{\"t\":\"Redis主要把数据存储在内存中，其“缓存”的性质远大于其“数据存储“的性质，其中数据的增删改查也只是像变量操作一样简单；\"},\"10120\":{\"t\":\"MongoDB却是一个“存储数据”的系统，增删改查可以添加很多条件，就像SQL数据库一样灵活。\"},\"10121\":{\"h\":\"2. 应用场景对比\",\"a\":\"_2-应用场景对比\"},\"10122\":{\"t\":\"Redis︰场景较多，比如分布式架构，做session共享，高速缓存。\"},\"10123\":{\"t\":\"Mongodb︰日志记录、内容管理或者博客平台，比如评论系统。\"},\"10124\":{\"h\":\"1-2. 安装\"},\"10125\":{\"t\":\"当前版本：6.0.5\"},\"10126\":{\"h\":\"Ⅰ. Windows\",\"a\":\"i-windows\"},\"10127\":{\"h\":\"1. 下载安装包\",\"a\":\"_1-下载安装包\"},\"10128\":{\"t\":\"下载地址：https://www.mongodb.com/download-center#community\"},\"10129\":{\"t\":\"1-2-1\"},\"10130\":{\"t\":\"版本的选择\"},\"10131\":{\"t\":\"MongoDB的版本命名规范如：x.y.z；\"},\"10132\":{\"t\":\"y为奇数时表示当前版本为开发版\"},\"10133\":{\"t\":\"y为偶数时表示当前版本为稳定版\"},\"10134\":{\"t\":\"z是修正版本号，数字越大越好\"},\"10135\":{\"h\":\"2. 安装\",\"a\":\"_2-安装\"},\"10136\":{\"t\":\"下载的打包格式选zip，即为绿色软件，直接解压即可。 在解压的目录中，创建一个存放数据的目录，如：data/db\"},\"10137\":{\"h\":\"3. 启动\",\"a\":\"_3-启动\"},\"10138\":{\"t\":\"提示\"},\"10139\":{\"t\":\"下载的是绿色软件，是没有配置环境变量的（可以选择手动配置），启动时需要在bin目录输入命令，且需要手动指定参数。\"},\"10140\":{\"h\":\"3.1 通过参数启动服务\",\"a\":\"_3-1-通过参数启动服务\"},\"10141\":{\"t\":\"在软件的bin目录，输入以下命令：\"},\"10142\":{\"t\":\"mongod --dbpath=..\\\\data\\\\db \"},\"10143\":{\"t\":\"--dbpath：该参数用来指定数据库存放的位置\"},\"10144\":{\"t\":\"启动的方式是进程占用（非守护进程）\"},\"10145\":{\"t\":\"默认的服务端口是27017，可以通过--port来手动指定端口\"},\"10146\":{\"h\":\"3.2 通过配置文件启动服务\",\"a\":\"_3-2-通过配置文件启动服务\"},\"10147\":{\"t\":\"将启动的参数写入配置文件，然后通过配置文件启动服务。\"},\"10148\":{\"t\":\"在解压目录中新建 config 文件夹，该文件夹中新建配置文件 mongod.conf ，内容参考如下：\"},\"10149\":{\"t\":\"storage: dbPath: D:\\\\vender\\\\mongodb-6.0.5\\\\data\\\\db \"},\"10150\":{\"t\":\"启动方式\"},\"10151\":{\"t\":\"mongod -f ../config/mongod.conf \"},\"10152\":{\"h\":\"Ⅱ. Linux\",\"a\":\"ii-linux\"},\"10153\":{\"h\":\"1. 下载压缩包\",\"a\":\"_1-下载压缩包\"},\"10154\":{\"t\":\"平台选Linux，打包格式选tgz。 下载安装包，并上传到服务器的 /opt/目录\"},\"10155\":{\"h\":\"2. 安装\",\"a\":\"_2-安装-1\"},\"10156\":{\"t\":\"该软件是绿色软件，在Linux上也不用安装，解压即可。\"},\"10157\":{\"t\":\"tar -zxvf mongodb-6.0.5.tgz -C /opt/mongodb/ \"},\"10158\":{\"t\":\"解压后需要在mongodb目录下新建目录和配置文件\"},\"10159\":{\"t\":\"mkdir -p ./single/data/db # 数据存储目录 mkdir -p ./single/log # 日志存储目录 touch ./single/mongod.conf # 配置文件 \"},\"10160\":{\"h\":\"3. 配置\",\"a\":\"_3-配置\"},\"10161\":{\"t\":\"生产端配置的详细一些，格式为yml 配置文件的内容如下：\"},\"10162\":{\"t\":\"systemLog: #MongoDB发送所有日志输出的目标指定为文件 destination: file #mongod或mongos应向其发送所有诊断日志记录信息的日志文件的路径 path: \\\"/opt/mongodb/mongodb-6.0.5/single/log/mongod.log\\\" #当实例重新启动时，会将新条目附加到现有日志文件的末尾。 logAppend: true storage: #mongod实例存储其数据的目录。storage.dbPath设置仅适用于mongod。 dbPath: \\\"/opt/mongodb/mongodb-6.0.5/single/data/db\\\" journal: #启用或禁用持久性日志以确保数据文件保持有效和可恢复。 enabled: true processManagement: #启用在后台运行mongos或mongod进程的守护进程模式。 fork: true net: #服务实例绑定的IP，默认是localhost,配置的是服务器内网IP bindIp: localhost,172.16.0.9 #bindIp绑定的端口，默认是27017 port: 27017 \"},\"10163\":{\"h\":\"4. 启动服务\",\"a\":\"_4-启动服务\"},\"10164\":{\"t\":\"/opt/mongodb/bin/mongod -f /opt/mongodb/single/mongod.conf # 启动成功的提示信息 about to fork child process, waiting until server is ready for connections. forked process: 3019275 # 进程编号 child process started successfully, parent exiting # 查看是否启动了 ps -ef |grep mongod \"},\"10165\":{\"h\":\"5. 关闭服务\",\"a\":\"_5-关闭服务\"},\"10166\":{\"t\":\"关闭服务设计到权限验证，详见：安全认证\"},\"10167\":{\"t\":\"#方式一：通过进程编号关闭节点，可能会损害数据 kill -2 54410 #方式二：通过命令关闭，需要先连接MongoDB mongod --port 27017 use admin # 切换到admin库 db.shutdownServer() #关闭服务 \"},\"10168\":{\"h\":\"Ⅲ. MacOS\",\"a\":\"iii-macos\"},\"10169\":{\"t\":\"注意\"},\"10170\":{\"t\":\"暂略，用到时再说\"},\"10171\":{\"h\":\"1-3. 连接MongoDB\"},\"10172\":{\"t\":\"提示\"},\"10173\":{\"t\":\"MongoDB shell和Compass都可以连接MongoDB，不过MongoDB Shell已经过时了，现在只需要使用Compass即可。\"},\"10174\":{\"h\":\"Ⅰ. MongoDB shell\",\"a\":\"i-mongodb-shell\"},\"10175\":{\"t\":\"MongoDB Shell 是一个基于javascript的解释器。 他是安装的一个本地shell客户端，可以登录，并执行MongoDB命令。\"},\"10176\":{\"t\":\"警告\"},\"10177\":{\"t\":\"4.x版本以后，MongoDB不再提供MongoDB Shell了。 想用需要自己手动安装：https://www.mongodb.com/try/download/shell\"},\"10178\":{\"t\":\"请选择Compass方式连接MongoDB。\"},\"10179\":{\"h\":\"Ⅱ. Compass\",\"a\":\"ii-compass\"},\"10180\":{\"t\":\"提示\"},\"10181\":{\"t\":\"Compass 是可视化的MongoDB管理工具，但是也支持shell命令，完全可替代MongoDB shell。\"},\"10182\":{\"h\":\"1. 介绍\",\"a\":\"_1-介绍\"},\"10183\":{\"t\":\"mongoDB Compass是mongoDB官方提供的可视化数据管理工具，通过msi包安装MongoDB时可以选择自动安装MongoDB Compass。\"},\"10184\":{\"t\":\"如果是手动安装的绿色版（tar包），可以通过官网下载独立安装包。 官方下载地址：https://www.mongodb.com/try/download/compass\"},\"10185\":{\"h\":\"2. Compass 连接 MongoDB\",\"a\":\"_2-compass-连接-mongodb\"},\"10186\":{\"t\":\"警告\"},\"10187\":{\"t\":\"MongoDB默认是没有用户认证的，通过compass只要输入IP+port就可以直接连接上。 这非常危险，上线时一定要设置安全认证，详见：安全认证章节\"},\"10188\":{\"t\":\"默认是没有用户认证的，可以直接连接。\"},\"10189\":{\"t\":\"如下：点击new Connection，输入url（ip+port）就可以直接连接上\"},\"10190\":{\"t\":\"1-3-1\"},\"10191\":{\"h\":\"3. 页面介绍\",\"a\":\"_3-页面介绍\"},\"10192\":{\"t\":\"功能很直观，所见即所得。 其中底部>_MONGOSH 就是Compass内置的 shell工具，可以直接输入命令\"},\"10193\":{\"t\":\"1-3-2\"},\"10194\":{\"t\":\"Connect： 连接与断开MongoDB连接相关\"},\"10195\":{\"t\":\"Databases：数据库列表 \"},\"10196\":{\"t\":\"Create database：创建数据库\"},\"10197\":{\"t\":\"Refresh：刷新数据库\"},\"10198\":{\"t\":\"Performance：数据库监控\"},\"10199\":{\"t\":\">_MONGOSH：MongoDB Shell\"},\"10200\":{\"h\":\"1-4. 库与集合\"},\"10201\":{\"h\":\"Ⅰ. 数据库操作\",\"a\":\"i-数据库操作\"},\"10202\":{\"h\":\"1. 查看所有数据库\",\"a\":\"_1-查看所有数据库\"},\"10203\":{\"t\":\"提示\"},\"10204\":{\"t\":\"只能查看有权限的数据库，MongoDB会默认创建以下三个数据库：\"},\"10205\":{\"t\":\"admin：从权限的角度来看，这是\\\"root\\\"数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。\"},\"10206\":{\"t\":\"local：这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合。\"},\"10207\":{\"t\":\"conﬁg: 当Mongo用于分片设置时，conﬁg数据库在内部使用，用于保存分片的相关信息。\"},\"10208\":{\"t\":\"命令\"},\"10209\":{\"t\":\"show dbs show databases \"},\"10210\":{\"h\":\"2. 选择或创建数据库\",\"a\":\"_2-选择或创建数据库\"},\"10211\":{\"t\":\"数据库存在就是选择，数据库不存在就是创建。\"},\"10212\":{\"t\":\"use 数据库名称 \"},\"10213\":{\"t\":\"数据库名规范\"},\"10214\":{\"t\":\"不能是空字符串（\\\"\\\")。\"},\"10215\":{\"t\":\"不得含有' '（空格)、.、$、/、\\\\和\\\\0 (空字符)。\"},\"10216\":{\"t\":\"应全部小写\"},\"10217\":{\"h\":\"3. 查看正在使用的数据库\",\"a\":\"_3-查看正在使用的数据库\"},\"10218\":{\"t\":\"MongoDB 中默认的数据库为 test，如果你没有选择数据库，集合将存放在 test 数据库中。\"},\"10219\":{\"t\":\"db \"},\"10220\":{\"h\":\"4. 数据库删除\",\"a\":\"_4-数据库删除\"},\"10221\":{\"t\":\"主要用来删除已经持久化的数据库。 语法和JS类似，db对象调用dropDatabase方法删除当前数据库，db指的是当前use的数据库。\"},\"10222\":{\"t\":\"db.dropDatabase() \"},\"10223\":{\"h\":\"5. 数据库的状态\",\"a\":\"_5-数据库的状态\"},\"10224\":{\"t\":\"当数据库中没有数据时，数据库默认只存在与内存中，而没有在硬盘中。 使用show dbs查看数据库时，不会显示只存在于内存中的数据库，不过使用db命令可以看到当前使用的仅存在于内存中的数据库。\"},\"10225\":{\"h\":\"Ⅱ. 集合操作\",\"a\":\"ii-集合操作\"},\"10226\":{\"t\":\"集合，类似关系型数据库中的表。\"},\"10227\":{\"h\":\"1. 查看当前库中的集合\",\"a\":\"_1-查看当前库中的集合\"},\"10228\":{\"t\":\"show collections 或 show tables \"},\"10229\":{\"h\":\"2. 创建集合\",\"a\":\"_2-创建集合\"},\"10230\":{\"t\":\"当向一个集合中插入一个文档的时候，如果集合不存在，则会自动创建集合。 也可以手动创建集合（不推荐）\"},\"10231\":{\"t\":\"db.createCollection(name) //示例 db.createCollection('user') \"},\"10232\":{\"t\":\"集合的命名规范\"},\"10233\":{\"t\":\"集合名不能是空字符串\\\"\\\"。\"},\"10234\":{\"t\":\"集合名不能含有\\\\0字符（空字符)，这个字符表示集合名的结尾。\"},\"10235\":{\"t\":\"集合名不能以\\\"system.\\\"开头，这是为系统集合保留的前缀。\"},\"10236\":{\"t\":\"用户创建的集合名字不能含有保留字符。有些驱动程序的确支持在集合名里面包含，这是因为某些系统生成的集合中包含该字符。除非你要访问这种系统创建的集合，否则千万不要在名字里出现$\"},\"10237\":{\"h\":\"3. 删除集合\",\"a\":\"_3-删除集合\"},\"10238\":{\"t\":\"如果成功删除选定集合，这返回true，否则返回false\"},\"10239\":{\"t\":\"db.集合名.drop() \"},\"10240\":{\"h\":\"1-5. 文档增删改\"},\"10241\":{\"t\":\"提示\"},\"10242\":{\"t\":\"文档（document）的数据结构和 JSON 基本一样。 所有存储在集合中的数据都是 BSON 格式。\"},\"10243\":{\"h\":\"Ⅰ. 文档的插入\",\"a\":\"i-文档的插入\"},\"10244\":{\"h\":\"1. 单个文档插入\",\"a\":\"_1-单个文档插入\"},\"10245\":{\"t\":\"使用insertOne() 或 save() 方法向集合中插入文档。 PS：如果指定的集合不存在就会自动创建集合（集合的隐式创建）。\"},\"10246\":{\"t\":\"db.集合名.insert( <document or array of documents>, { writeConcern: <document>, ordered: <boolean> } ) \"},\"10247\":{\"h\":\"1.1 参数\",\"a\":\"_1-1-参数\"},\"10248\":{\"t\":\"document：要插入到集合中的文档或文档数组。（(json格式）\"},\"10249\":{\"t\":\"writeConcern：可选，性能和可靠性的级别。\"},\"10250\":{\"t\":\"ordered：可选，如果为true（默认），则按顺序插入数组中的文档，如果其中一个文档出现错误，MongoDB将返回而不处理数组中的其余文档。如果为假，则执行无序插入，如果其中一个文档出现错误，则继续处理数组中的主文档。\"},\"10251\":{\"h\":\"1.2 示例\",\"a\":\"_1-2-示例\"},\"10252\":{\"t\":\"db.comment.insertOne({ \\\"articleid\\\":\\\"10000\\\", \\\"content\\\": \\\"that's good\\\", \\\"userid\\\":\\\"1000\\\", \\\"createdatetime\\\": new Date(), \\\"likenum\\\":NumberInt(10), \\\"state\\\":null }) //执行后，返回如下对象 { acknowledged: true, insertedId: ObjectId(\\\"6432843354a1d1820aa07159\\\") } \"},\"10253\":{\"h\":\"1.3 注意\",\"a\":\"_1-3-注意\"},\"10254\":{\"t\":\"comment集合如果不存在，则会隐式创建\"},\"10255\":{\"t\":\"mongo中的数字，默认情况下是double类型，如果要存整型，必须使用函数NumberInt(整型数字)，否则取出来就有问题了。\"},\"10256\":{\"t\":\"插入当前日期使用 new Date()\"},\"10257\":{\"t\":\"插入的数据没有指定 _id ，会自动生成主键值\"},\"10258\":{\"t\":\"如果某字段没值，可以赋值为null，或不写该字段。\"},\"10259\":{\"t\":\"writeConcern和ordered两个参数一般不用管\"},\"10260\":{\"h\":\"2. 批量插入\",\"a\":\"_2-批量插入\"},\"10261\":{\"t\":\"db.collection.insertMany( [<document 1>, <document 2>,...], { writeConcern:<document>, ordered:<boolean> } ) \"},\"10262\":{\"h\":\"2.1 示例\",\"a\":\"_2-1-示例\"},\"10263\":{\"t\":\"批量插入两条文章评论\"},\"10264\":{\"t\":\"db.comment.insertMany([ { \\\"_id\\\":\\\"1\\\", \\\"articleid\\\":\\\"100001\\\", \\\"content\\\":\\\"我们不应该把清晨浪费在手机上\\\", \\\"userid\\\":\\\"1002\\\", \\\"createdatetime\\\":new Date(\\\"2019-08-05T22:08:15.522Z\\\"), \\\"likenum\\\":NumberInt(1000), \\\"state\\\":\\\"1\\\" }, { \\\"_id\\\":\\\"2\\\", \\\"articleid\\\":\\\"100001\\\", \\\"content\\\":\\\"我夏天空腹喝凉开水，冬天喝温开水\\\", \\\"userid\\\":\\\"1005\\\", \\\"createdatetime\\\":new Date(\\\"2019-08-05T23:58:51.485Z\\\"), \\\"likenum\\\":NumberInt(888), \\\"state\\\":\\\"1\\\" } ]) \"},\"10265\":{\"h\":\"2.2 注意\",\"a\":\"_2-2-注意\"},\"10266\":{\"t\":\"插入时指定了 _id ，则主键就是该值（实际开发时，一般不指定）。 如果某条数据插入失败，将会终止插入，但已经插入成功的数据不会回滚掉。\"},\"10267\":{\"h\":\"3. try catch插入\",\"a\":\"_3-try-catch插入\"},\"10268\":{\"t\":\"因为批量插入由于数据较多容易出现失败，因此，可以使用try catch进行异常捕捉处理。\"},\"10269\":{\"t\":\"try{ db.comment.insertMany([{...},{...}]) //这里是多条插入语句 } catch(e) { print(e) } \"},\"10270\":{\"h\":\"4. 文档键命名规范\",\"a\":\"_4-文档键命名规范\"},\"10271\":{\"t\":\"键不能含有\\\\0 (空字符)。这个字符用来表示键的结尾。\"},\"10272\":{\"t\":\".和$有特别的意义，只有在特定环境下才能使用。\"},\"10273\":{\"t\":\"以下划线\\\"_\\\"开头的键是保留的(不是严格要求的)。\"},\"10274\":{\"h\":\"Ⅱ. 更新文档\",\"a\":\"ii-更新文档\"},\"10275\":{\"t\":\"使用update方法更新文档。\"},\"10276\":{\"t\":\"db.集合名.update(query, update, options) \"},\"10277\":{\"t\":\"query：待更新的文档，可以直接指定_id，也可以使用查询语句\"},\"10278\":{\"t\":\"update：要更新的内容\"},\"10279\":{\"t\":\"options：更新选项\"},\"10280\":{\"h\":\"1. options选项\",\"a\":\"_1-options选项\"},\"10281\":{\"t\":\"options里有很多选项，控制了更新的细节，一般只需关注前两个。\"},\"10282\":{\"t\":\"upsert：[boolean]，可选，true表示没有与查询条件匹配的文档时创建新文档。默认值为false，如果找不到匹配项，则不会插入新文档。\"},\"10283\":{\"t\":\"multi：[boolean]，可选，设置为true，则更新符合查询条件的多个文档。如果设置为false，则更新一个文档。默认值为false。\"},\"10284\":{\"t\":\"writeConcern：可选。表示写问题的文档。抛出异常的级别。\"},\"10285\":{\"t\":\"collation：可选。指定要用于操作的校对规则。校对规则允许用户为字符串比较指定特定于语言的规则，例如字母大小写和重音标记的规则。\"},\"10286\":{\"h\":\"2. 更新指定字段\",\"a\":\"_2-更新指定字段\"},\"10287\":{\"t\":\"警告\"},\"10288\":{\"t\":\"MogonDB 6.0.0+ 经过实测，已经不支持覆盖更新了,只能使用$set修改器进行更新\"},\"10289\":{\"t\":\"使用$set修改器，更新指定的字段(单个或多个)，\"},\"10290\":{\"t\":\"db.comment.updateOne( {_id:\\\"1\\\"}, { $set:{ articleid:\\\"1001\\\", createdatetime:new Date(\\\"2019-08-05T23:58:51.485Z\\\"), likenum: NumberInt(10), state:\\\"2\\\", } } ) \"},\"10291\":{\"h\":\"3. 批量更新\",\"a\":\"_3-批量更新\"},\"10292\":{\"t\":\"当query中有多条符合需要的文档记录时，默认只会更新第一条。 若想全部更新，需要使用options中的multi选项\"},\"10293\":{\"t\":\"db.comment.updateMany( {userid:\\\"1000\\\"}, { $set:{articleid:\\\"100000\\\"}, }, {multi:true} ) \"},\"10294\":{\"h\":\"4. 列值增长的修改\",\"a\":\"_4-列值增长的修改\"},\"10295\":{\"t\":\"如果我们想实现对某列值在原有值的基础上进行增加或减少，可以使用 $inc 运算符来实现。\"},\"10296\":{\"t\":\"db.comment.update( {_id:\\\"1\\\"}, {$inc:{likenum:NumberInt(1)}} ) \"},\"10297\":{\"h\":\"Ⅲ. 删除文档\",\"a\":\"iii-删除文档\"},\"10298\":{\"h\":\"1. 移除全部数据\",\"a\":\"_1-移除全部数据\"},\"10299\":{\"t\":\"将所有的数据都删除，！！！慎用！！。\"},\"10300\":{\"t\":\"db.集合名称.remove({}) db.comment.remove({}) \"},\"10301\":{\"h\":\"2. 删除指定数据\",\"a\":\"_2-删除指定数据\"},\"10302\":{\"t\":\"db.集合名称.remove({条件}) db.comment.remove({_id:\\\"1\\\"}) \"},\"10303\":{\"h\":\"1-6. 文档查询\"},\"10304\":{\"h\":\"Ⅰ. 基本查询\",\"a\":\"i-基本查询\"},\"10305\":{\"h\":\"1. 语法\",\"a\":\"_1-语法\"},\"10306\":{\"t\":\"db.集合名.find(<query>,[projection]) \"},\"10307\":{\"t\":\"参数\"},\"10308\":{\"t\":\"query：可选。使用查询运算符指定选择筛选器。若要返回集合中的所有文档，请省略此参数或传递空文档( {} )。\"},\"10309\":{\"t\":\"projection：可选，指定要在与查询筛选器匹配的文档中返回的字段（投影）。若要返回匹配文档中的所有字段，请省略此参数。\"},\"10310\":{\"h\":\"2. 查询所有数据\",\"a\":\"_2-查询所有数据\"},\"10311\":{\"t\":\"db.comment.find() or db.comment.find({}) \"},\"10312\":{\"h\":\"3. 根据条件查询数据\",\"a\":\"_3-根据条件查询数据\"},\"10313\":{\"t\":\"根据query条件查询数据，默认会返回所有符合条件的数据。 如果只需要返回符合条件的第一条数据，我们可以使用ﬁndOne命令来实现。\"},\"10314\":{\"t\":\"db.comment.find({userid:'1'}) db.comment.findOne({userid:'1'}) \"},\"10315\":{\"h\":\"4. 投影查询\",\"a\":\"_4-投影查询\"},\"10316\":{\"t\":\"如果要查询结果返回部分字段，则需要使用投影查询（不显示所有字段，只显示指定的字段）。 PS： _id字段默认总是显示的。\"},\"10317\":{\"t\":\"db.comment.find( {_id:'1'}, {userid:1,state:1} ) \"},\"10318\":{\"h\":\"Ⅱ. 文档的分页查询\",\"a\":\"ii-文档的分页查询\"},\"10319\":{\"h\":\"1. 统计查询\",\"a\":\"_1-统计查询\"},\"10320\":{\"t\":\"统计查询使用count()方法返回符合条件的全部记录条数。 countDocuments方法 用来返回文档中的记录总数。 语法如下：\"},\"10321\":{\"t\":\"db.集合名.countDocuments() db.集合名.count(query,options) \"},\"10322\":{\"t\":\"参数\"},\"10323\":{\"t\":\"query：查询条件\"},\"10324\":{\"t\":\"options：可选，用于修改计数的额外选项\"},\"10325\":{\"t\":\"示例\"},\"10326\":{\"t\":\"//统计所有记录数 db.comment.countDocument() //按条件统计记录数： db.comment.count({userid:\\\"1\\\"}) \"},\"10327\":{\"h\":\"2. 分页列表查询\",\"a\":\"_2-分页列表查询\"},\"10328\":{\"t\":\"可以使用limit()方法来读取指定数量的数据，使用skip()方法来跳过指定数量的数据(两个方法可以单独使用，也可以一起使用)。\"},\"10329\":{\"t\":\"如果你想返回指定条数的记录，可以在ﬁnd方法后调用limit来返回结果(TopN)，默认值20\"},\"10330\":{\"t\":\"skip方法同样接受一个数字参数作为跳过的记录条数。（前N个不要）,默认值是0\"},\"10331\":{\"t\":\"db.集合名.find().limit(num).skip(num) \"},\"10332\":{\"t\":\"示例\"},\"10333\":{\"t\":\"//分页查询，每页查两个 db.comment.find().skip(0),limit(2) db.comment.find().skip(2).limit(2) \"},\"10334\":{\"h\":\"3. 排序查询\",\"a\":\"_3-排序查询\"},\"10335\":{\"t\":\"sort() 方法对数据进行排序，sort() 方法可以通过参数指定排序的字段，并使用1 和 -1 来指定排序的方式，其中 1 为升序排列，而 -1 是用于降序排列。\"},\"10336\":{\"t\":\"排序方式可以是多个字段。\"},\"10337\":{\"t\":\"db.集合名.find().sort(排序方式...) \"},\"10338\":{\"t\":\"示例 对userid降序排列，并对访问量进行升序排列\"},\"10339\":{\"t\":\"db.comment.find().sort({userid:-1,likenum:1}) \"},\"10340\":{\"t\":\"注意 skip(), limilt(), sort()三个放在一起执行的时候，执行的顺序是先 sort(), 然后是 skip()，最后是显示的 limit()，和命令编写顺序无关。\"},\"10341\":{\"h\":\"Ⅲ. 更多复杂查询\",\"a\":\"iii-更多复杂查询\"},\"10342\":{\"h\":\"1. 正则条件查询\",\"a\":\"_1-正则条件查询\"},\"10343\":{\"t\":\"提示\"},\"10344\":{\"t\":\"正则表达式是js的语法\"},\"10345\":{\"t\":\"MongoDB的模糊查询是通过正则表达式的方式实现的。格式如下：\"},\"10346\":{\"t\":\"db.集合.find({字段:/正则表达式/}) \"},\"10347\":{\"t\":\"示例\"},\"10348\":{\"t\":\"//查询评论内容包含hello的 db.comment.find({content:/hello/}) //查询用户id是1开头的 db.comment.find({userid:/^1/}) \"},\"10349\":{\"h\":\"2. 比较查询\",\"a\":\"_2-比较查询\"},\"10350\":{\"t\":\"查询的时候，可以用上比较运算符，如下：\"},\"10351\":{\"t\":\"db.集合名称.find({ \\\"field\\\" : { $gt: value }}) //field > value db.集合名称.find({ \\\"field\\\" : { $lt: value }}) //field < value db.集合名称.find({ \\\"field\\\" : { $gte: value }}) //field >= value db.集合名称.find({ \\\"field\\\" : { $lte: value }}) //field <= value db.集合名称.find({ \\\"field\\\" : { $ne: value }}) //field != value //查询评论点赞数量大于700的记录 db.comment.find({likenum:{$gt:NumberInt(700)}}) \"},\"10352\":{\"h\":\"3. 包含查询\",\"a\":\"_3-包含查询\"},\"10353\":{\"t\":\"包含使用$in操作符，不包含使用$nin操作符。\"},\"10354\":{\"t\":\"//查询评论的集合中userid字段包含1003或1004的文档 db.comment.find({userid:{$in:[\\\"1003\\\",\\\"1004\\\"]}}) //查询评论集合中userid字段不包含1003和1004的文档 db.comment.find({userid:{$nin:[\\\"1003\\\",\\\"1004\\\"]}}) \"},\"10355\":{\"h\":\"4. 条件连接查询\",\"a\":\"_4-条件连接查询\"},\"10356\":{\"t\":\"我们如果需要查询同时满足两个以上条件，需要使用 $and 操作符将条件进行关联（相 当于SQL的and）。 如果两个以上条件之间是或者的关系，我们使用 $or 操作符进行关联\"},\"10357\":{\"t\":\"$and:[{条件},{条件},{条件}] $or:[ { 条件},{条件},{条件} ] //查询评论集合中likenum大于等于700 并且小于2000的文档： b.comment.find( {$and:[ {likenum:{$gte:NumberInt(700)}}, {likenum:{$lt:NumberInt(2000)}} ]} ) //查询评论集合中userid为1003，或者点赞数小于1000的文档记录 db.comment.find({$or:[ {userid:\\\"1003\\\"} ,{likenum:{$lt:1000} }]}) \"},\"10358\":{\"h\":\"1-7. 索引\"},\"10359\":{\"t\":\"索引支持在MongoDB中高效地执行查询。\"},\"10360\":{\"t\":\"如果没有索引，MongoDB必须执行全集合扫描，以选择与查询语句匹配的文档。这种扫描全集合的查询效率是非常低的。\"},\"10361\":{\"t\":\"索引项的排序支持有效的相等匹配和基于范围的查询操作。此外，MongoDB还可以使用索引中的排序返回排序结果。\"},\"10362\":{\"t\":\"MongoDB索引使用B树数据结构（确切的说是B-Tree，MySQL是B+Tree）\"},\"10363\":{\"h\":\"Ⅰ. 索引的类型\",\"a\":\"i-索引的类型\"},\"10364\":{\"h\":\"1. 单字段索引\",\"a\":\"_1-单字段索引\"},\"10365\":{\"t\":\"在文档的单个字段上创建用户定义的升序/降序索引，称为单字段索引（Single Field Index）。\"},\"10366\":{\"t\":\"对于单个字段索引和排序操作，索引键的排序顺序（即升序或降序）并不重要，因为MongoDB可以在任何方向上遍历索引。\"},\"10367\":{\"h\":\"2. 复合索引\",\"a\":\"_2-复合索引\"},\"10368\":{\"t\":\"MongoDB还支持多个字段的用户定义索引，即复合索引（Compound Index）。\"},\"10369\":{\"t\":\"复合索引中列出的字段顺序很重要。例如，如果复合索引由 { userid: 1, score: -1 } 组成，则索引首先按userid正序排序，然后在每个userid的值内，再在按score倒序排序。\"},\"10370\":{\"h\":\"3. 其他索引\",\"a\":\"_3-其他索引\"},\"10371\":{\"t\":\"地理空间索引（Geospatial Index）：为了支持对地理空间坐标数据的有效查询，MongoDB提供了两种特殊的索引：返回结果时使用平面几何的二维索引和返回结果时使用球面几何的二维球面索引。\"},\"10372\":{\"t\":\"文本索引（Text Indexes）：支持在集合中搜索字符串内容。这些文本索引不存储特定于语言的停止词（例如“the”、“a”、“or”），而将集合中的词作为词干，只存储根词。\"},\"10373\":{\"t\":\"哈希索引（Hashed Indexes）：MongoDB提供了散列索引类型，它对字段值的散列进行索引。这些索引在其范围内的值分布更加随机，但只支持相等匹配，不支持基于范围的查询。\"},\"10374\":{\"h\":\"Ⅱ. 管理索引\",\"a\":\"ii-管理索引\"},\"10375\":{\"h\":\"1. 查看索引\",\"a\":\"_1-查看索引\"},\"10376\":{\"t\":\"getIndexes()方法返回一个集合中的所有索引的数组。\"},\"10377\":{\"t\":\"db.集合.getIndexes() \"},\"10378\":{\"t\":\"示例\"},\"10379\":{\"t\":\"//查看comment集合中所有的索引情况 db.comment.getIndexes() //结果 [ { v: 2, //索引引擎版本，不用管，内置的 key: { _id: 1 //索引的字段，和排序方式 }, name: '_id_' //索引名，默认是索引字段+ _ } ] \"},\"10380\":{\"t\":\"_id索引\"},\"10381\":{\"t\":\"MongoDB在创建集合的过程中，在_id 字段上创建一个唯一的索引，默认名字为_id_。\"},\"10382\":{\"t\":\"注意：该索引是唯一索引，因此值不能重复，即 _id 值不能重复的。在分片集群中，通常使用 _id 作为片键。\"},\"10383\":{\"h\":\"2. 创建索引\",\"a\":\"_2-创建索引\"},\"10384\":{\"t\":\"在集合上通过createIndex方法创建索引。\"},\"10385\":{\"t\":\"db.集合.createIndex(keys,options) \"},\"10386\":{\"h\":\"2.1 参数\",\"a\":\"_2-1-参数\"},\"10387\":{\"t\":\"keys：该参数是一个对象，用来设置索引的字段和索引的排序方式。 \"},\"10388\":{\"t\":\"{字段: 排序方式}。\"},\"10389\":{\"t\":\"排序方式取值1或-1,1表示正序创建索引，-1表示降序创建索引。\"},\"10390\":{\"t\":\"options：可选，包含一组控制索引创建的选项的文档，一般不用设置。 \"},\"10391\":{\"t\":\"unique：建立的索引是否唯一，指定为true创建唯一索引。默认值为false.\"},\"10392\":{\"t\":\"name：索引的名称，不指定的话就会根据字段名自动生成一个。\"},\"10393\":{\"h\":\"2.2 创建单字段索引\",\"a\":\"_2-2-创建单字段索引\"},\"10394\":{\"t\":\"db.comment.createIndex({userid:1}) //查询刚创建的索引 db.comment.getIndexes() [ { v: 2, key: { _id: 1 }, name: '_id_' }, { v: 2, key: { userid: 1 }, name: 'userid_1' } ] \"},\"10395\":{\"t\":\"compass中查看\"},\"10396\":{\"t\":\"1-7-1\"},\"10397\":{\"h\":\"2.3 创建复合索引\",\"a\":\"_2-3-创建复合索引\"},\"10398\":{\"t\":\"对多个字段联合创建一个索引。\"},\"10399\":{\"t\":\"db.comment.createIndex( {userid:1, nickname:-1} ) //查看创建的索引 db.comment.getIndexes() [ { v: 2, key: { _id: 1 }, name: '_id_' }, { v: 2, key: { userid: 1 }, name: 'userid_1' }, { v: 2, key: { userid: 1, nickname: -1 }, //复合索引 name: 'userid_1_nickname_-1' } ] \"},\"10400\":{\"t\":\"compass中查看\"},\"10401\":{\"t\":\"1-7-2\"},\"10402\":{\"h\":\"2.4 索引默认命名规范\",\"a\":\"_2-4-索引默认命名规范\"},\"10403\":{\"t\":\"字段名 + _ + 1或-1\"},\"10404\":{\"t\":\"联合索引可以是上述规则重复N次，用_相连\"},\"10405\":{\"t\":\"1表示正序，-1表示倒叙。\"},\"10406\":{\"t\":\"//示例 userid_1 //userid字段的单字段正序索引 userid_1_nickname_-1 \"},\"10407\":{\"h\":\"3. 移除索引\",\"a\":\"_3-移除索引\"},\"10408\":{\"t\":\"可以移除指定的索引，或移除所有索引。\"},\"10409\":{\"h\":\"3.1 移除指定索引\",\"a\":\"_3-1-移除指定索引\"},\"10410\":{\"t\":\"参数index指定要删除的索引，可以是索引名，也可以是索引规范文档。\"},\"10411\":{\"t\":\"db.集合名.dropIndex(index) //示例： db.comment.dropIndex({userid:1}) //or db.comment.dropIndex(userid_1) \"},\"10412\":{\"h\":\"3.2 移除所有索引\",\"a\":\"_3-2-移除所有索引\"},\"10413\":{\"t\":\"移除指定集合内的所有索引。 注意：_id 的字段的索引是无法删除的，只能删除非 _id 字段的索引。\"},\"10414\":{\"t\":\"db.集合名.dropIndexes() \"},\"10415\":{\"h\":\"4. 执行计划\",\"a\":\"_4-执行计划\"},\"10416\":{\"t\":\"分析查询性能（Analyze Query Performance）通常使用执行计划来查看查询的情况，如查询耗费的时间、是否基于索引查询（建立的索引是否有效）等。 语法：如下在查询语句后面跟explain()方法即可。\"},\"10417\":{\"t\":\"db.collection.find(query,options).explain(opeitons) \"},\"10418\":{\"h\":\"4.1 compass可视化查看\",\"a\":\"_4-1-compass可视化查看\"},\"10419\":{\"t\":\"可以通过compass直接可视化的查看执行计划，更直观。\"},\"10420\":{\"h\":\"4.2 示例\",\"a\":\"_4-2-示例\"},\"10421\":{\"t\":\"根据uerid查询数据，查看执行计划\"},\"10422\":{\"t\":\"db.comment.find({userid:\\\"1002\\\"}).explain() //也可以直接在compass上查看 \"},\"10423\":{\"h\":\"4.3 查询结果解析\",\"a\":\"_4-3-查询结果解析\"},\"10424\":{\"t\":\"返回的结果很多，重点看stage：\"},\"10425\":{\"t\":\"IXCAN：基于索引查询\"},\"10426\":{\"t\":\"COLLSCAN：全盘扫描查询\"},\"10427\":{\"t\":\"FETCH：基于缓存查询\"},\"10428\":{\"t\":\"PROJECTION：覆盖查询\"},\"10429\":{\"t\":\"1-7-4\"},\"10430\":{\"h\":\"5. 涵盖查询\",\"a\":\"_5-涵盖查询\"},\"10431\":{\"t\":\"当查询条件和查询的投影仅包含索引字段时，MongoDB直接从索引返回结果，而不扫描任何文档或将文档带入内存。 简单来说，查询的字段只包含索引时，就直接从索引返回结果。\"},\"10432\":{\"t\":\"db.comment.find({userid:\\\"1002\\\"},{userid:1,_id:0}) \"},\"10433\":{\"t\":\"通过compass查看\"},\"10434\":{\"t\":\"1-7-5\"},\"10435\":{\"h\":\"2-1. 介绍\"},\"10436\":{\"h\":\"Ⅰ. 副本集\",\"a\":\"i-副本集\"},\"10437\":{\"h\":\"1. 概述\",\"a\":\"_1-概述\"},\"10438\":{\"t\":\"MongoDB中的副本集（Replica Set）是一组维护相同数据集的mongod服务。 副本集可提供冗余和高 可用性，是所有生产部署的基础。\"},\"10439\":{\"t\":\"可以说，副本集类似于有自动故障恢复功能的主从集群。通俗的讲就是用多台机器进行同一数据的异 步同步，从而使多台机器拥有同一数据的多个副本，并且当主库当掉时在不需要用户干预的情况下自动 切换其他备份服务器做主库。而且还可以利用副本服务器做只读服务器，实现读写分离，提高负载。\"},\"10440\":{\"h\":\"2. 冗余和数据可用性\",\"a\":\"_2-冗余和数据可用性\"},\"10441\":{\"t\":\"复制提供冗余并提高数据可用性。 通过在不同数据库服务器上提供多个数据副本，复制可提供一定级别的容错功能，以防止丢失单个数据库服务器。\"},\"10442\":{\"t\":\"在某些情况下，复制可以提供增加的读取性能，因为客户端可以将读取操作发送到不同的服务上， 在不 同数据中心维护数据副本可以增加分布式应用程序的数据位置和可用性。 还可以为专用目的维护其他 副本，例如灾难恢复，报告或备份。\"},\"10443\":{\"h\":\"3. MongoDB中的复制\",\"a\":\"_3-mongodb中的复制\"},\"10444\":{\"t\":\"副本集是一组维护相同数据集的mongod实例。 副本集包含多个数据承载节点和可选的一个仲裁节点。 在承载数据的节点中，一个且仅一个成员被视为主节点，而其他节点被视为次要（从）节点。\"},\"10445\":{\"t\":\"主节点接收所有写操作。 副本集只能有一个主要能够确认具有{w：“most”}写入关注的写入; 虽然在某 些情况下，另一个mongod实例可能暂时认为自己也是主要的。主要记录其操作日志中的数据集的所有 更改，即oplog。\"},\"10446\":{\"t\":\"2-1-1\"},\"10447\":{\"h\":\"4. 主从复制和副本集区别\",\"a\":\"_4-主从复制和副本集区别\"},\"10448\":{\"t\":\"主从集群和副本集最大的区别就是副本集没有固定的“主节点”；整个集群会选出一个“主节点”，当其挂 掉后，又在剩下的从节点中选中其他节点为“主节点”，副本集总有一个活跃点(主、primary)和一个或多个备份节点(从、secondary)。\"},\"10449\":{\"h\":\"5. 副本集的类型和角色\",\"a\":\"_5-副本集的类型和角色\"},\"10450\":{\"t\":\"副本集有两种类型三种角色\"},\"10451\":{\"h\":\"5.1 两种类型\",\"a\":\"_5-1-两种类型\"},\"10452\":{\"t\":\"主节点（Primary）类型：数据操作的主要连接点，可读写。\"},\"10453\":{\"t\":\"次要（辅助、从）节点（Secondaries）类型：数据冗余备份节点，可以读或选举。\"},\"10454\":{\"h\":\"5.2 三种角色\",\"a\":\"_5-2-三种角色\"},\"10455\":{\"t\":\"主要成员（Primary）：主要接收所有写操作。就是主节点。\"},\"10456\":{\"t\":\"副本成员（Replicate）：从主节点通过复制操作以维护相同的数据集，即备份数据，不可写操作，但可以读操作（但需要配置）。是默认的一种从节点类型。\"},\"10457\":{\"t\":\"仲裁者（Arbiter）：不保留任何数据的副本，只具有投票选举作用。当然也可以将仲裁服务器维护为副本集的一部分，即副本成员同时也可以是仲裁者。也是一种从节点类型。\"},\"10458\":{\"t\":\"2-1-2\"},\"10459\":{\"h\":\"5.3 仲裁者额外说明\",\"a\":\"_5-3-仲裁者额外说明\"},\"10460\":{\"t\":\"可以将额外的mongod实例添加到副本集作为仲裁者。 仲裁者不维护数据集，仲裁者的目的是通过 响应其他副本集成员的心跳和选举请求来维护副本集中的仲裁。 因为它们不存储数据集，所以仲裁器可 以是提供副本集仲裁功能的好方法，其资源成本比具有数据集的全功能副本集成员更便宜。\"},\"10461\":{\"t\":\"如果副本集具有偶数个成员，添加仲裁者以获得主要选举中的“大多数”投票。 \"},\"10462\":{\"t\":\"如果你的副本+主节点的个数是奇数，可以不加仲裁者。\"},\"10463\":{\"t\":\"仲裁者不需要专用硬件。\"},\"10464\":{\"t\":\"仲裁者将永远是仲裁者，而主要人员可能会退出并成为次要人员，而次要人员可能成为选举期间的主要人员。\"},\"10465\":{\"h\":\"6. 副本集架构示例\",\"a\":\"_6-副本集架构示例\"},\"10466\":{\"t\":\"最小的副本集架构：一主一副本一仲裁\"},\"10467\":{\"t\":\"2-1-3\"},\"10468\":{\"h\":\"Ⅱ. 分片集群\",\"a\":\"ii-分片集群\"},\"10469\":{\"t\":\"提示\"},\"10470\":{\"t\":\"TBD\"},\"10471\":{\"h\":\"2-2. 创建副本集\"},\"10472\":{\"t\":\"最小副本集架构\"},\"10473\":{\"t\":\"一主一副本一仲裁\"},\"10474\":{\"h\":\"Ⅰ. 副本集设计\",\"a\":\"i-副本集设计\"},\"10475\":{\"h\":\"1. 架构\",\"a\":\"_1-架构\"},\"10476\":{\"t\":\"根据最小副本集架构搭建副本集，以下操作示例将在同一台设备上进行，以端口（配置文件）作为区分，实际开发应该在多台服务器上进行。\"},\"10477\":{\"t\":\"PS：是安装一次MongoDB，多次启动，每次端口不同。\"},\"10478\":{\"h\":\"2. 端口设计\",\"a\":\"_2-端口设计\"},\"10479\":{\"t\":\"27017：主节点（Primary）\"},\"10480\":{\"t\":\"27018：副节点（Secondary）\"},\"10481\":{\"t\":\"27019：选举节点（Arbiter）\"},\"10482\":{\"h\":\"3. 目录设计\",\"a\":\"_3-目录设计\"},\"10483\":{\"t\":\"软件安装目录：/opt/mongodb/mongodb-6.0.5/\"},\"10484\":{\"t\":\"文件目录：/opt/mongodb/sets/ \"},\"10485\":{\"t\":\"m27017/：主节点目录\"},\"10486\":{\"t\":\"m27018/：副节点目录\"},\"10487\":{\"t\":\"m27019/：选举节点目录\"},\"10488\":{\"h\":\"4. 文件设计\",\"a\":\"_4-文件设计\"},\"10489\":{\"t\":\"每个节点目录下都有以下文件：\"},\"10490\":{\"t\":\"log/：日志目录\"},\"10491\":{\"t\":\"data/db/：数据目录\"},\"10492\":{\"t\":\"mongod.conf：配置文件，\"},\"10493\":{\"h\":\"Ⅱ. 创建节点\",\"a\":\"ii-创建节点\"},\"10494\":{\"h\":\"1. 创建主节点\",\"a\":\"_1-创建主节点\"},\"10495\":{\"t\":\"根据上述设计，创建主节点的目录和相关文件，其中配置文件如下：\"},\"10496\":{\"t\":\"#和单机MongoDB差不多，就是多了个replSetName（副本集配置）。 systemLog: #MongoDB发送所有日志输出的目标指定为文件 destination: file #mongod或mongos应向其发送所有诊断日志记录信息的日志文件的路径 path: \\\"/opt/mongodb/sets/m27017/log/mongod.log\\\" #当mongos或mongod实例重新启动时，mongos或mongod会将新条目附加到现有日志文件的末尾。 logAppend: true storage: #mongod实例存储其数据的目录。storage.dbPath设置仅适用于mongod。 dbPath: \\\"/opt/mongodb/sets/m27017/data/db\\\" journal: #启用或禁用持久性日志以确保数据文件保持有效和可恢复。 enabled: true processManagement: #启用在后台运行mongos或mongod进程的守护进程模式。 fork: true #指定用于保存mongos或mongod进程的进程ID的文件位置，其中mongos或mongod将写入其PID pidFilePath: \\\"/opt/mongodb/sets/m27017/log/mongod.pid\\\" net: #服务实例绑定所有IP，有副作用，副本集初始化的时候，节点名字会自动设置为本地域名，而不是ip #bindIpAll: true #服务实例绑定的IP bindIp: localhost,172.16.0.9 #bindIp绑定的端口 port: 27017 replication: #副本集的名称 replSetName: myrs \"},\"10497\":{\"t\":\"启动节点\"},\"10498\":{\"t\":\"[bin] ./mongod -f /opt/mongodb/sets/m27017/mongod.conf # about to fork child process, waiting until server is ready for connections. # forked process: 3062446 # child process started successfully, parent exiting \"},\"10499\":{\"h\":\"2. 创建副本节点\",\"a\":\"_2-创建副本节点\"},\"10500\":{\"t\":\"同上创建对应的目录和文件，副节点的配置文件和主节点配置文件相比只有一些目录和端口的配置不同。副本节点和主节点拥有相同的副本集名称以组成副本集。\"},\"10501\":{\"t\":\"path: \\\"/opt/mongodb/sets/m27018/log/mongod.log\\\" dbPath: \\\"/opt/mongodb/sets/m27018/data/db\\\" pidFilePath: \\\"/opt/mongodb/sets/m27018/log/mongod.pid\\\" port: 27018 \"},\"10502\":{\"t\":\"启动副本节点\"},\"10503\":{\"t\":\"[bin] ./mongod -f /opt/mongodb/sets/m27018/mongod.conf \"},\"10504\":{\"h\":\"3. 创建仲裁节点\",\"a\":\"_3-创建仲裁节点\"},\"10505\":{\"t\":\"同上创建对应的目录和文件，仲裁节点的配置文件和主节点配置文件相比只有一些目录和端口的配置不同。仲裁节点和主节点拥有相同的副本集名称以组成副本集。\"},\"10506\":{\"t\":\"path: \\\"/opt/mongodb/sets/m27019/log/mongod.log\\\" dbPath: \\\"/opt/mongodb/sets/m27019/data/db\\\" pidFilePath: \\\"/opt/mongodb/sets/m27019/log/mongod.pid\\\" port: 27019 \"},\"10507\":{\"t\":\"启动仲裁节点\"},\"10508\":{\"t\":\"[bin] ./mongod -f /opt/mongodb/sets/m27019/mongod.conf \"},\"10509\":{\"h\":\"4. 查看启动结果\",\"a\":\"_4-查看启动结果\"},\"10510\":{\"t\":\"看下三个mongodb服务是否启动成功\"},\"10511\":{\"t\":\"ps -ef | grep mongod \"},\"10512\":{\"t\":\"2-2-1\"},\"10513\":{\"h\":\"Ⅲ. 初始化副本集\",\"a\":\"iii-初始化副本集\"},\"10514\":{\"t\":\"注意\"},\"10515\":{\"t\":\"连接上任意一个节点后，很多命令无法使用，比如show dbs等，操作前必须初始化副本集才行。\"},\"10516\":{\"h\":\"1. 连接节点\",\"a\":\"_1-连接节点\"},\"10517\":{\"t\":\"使用Compass连接主节点，注意，由于副本集未初始化，直接连接副本集将失败， 需要勾选如下设置，以直接连接的方式连接副本集主节点：\"},\"10518\":{\"t\":\"2-2-2\"},\"10519\":{\"h\":\"2. 连接后查看\",\"a\":\"_2-连接后查看\"},\"10520\":{\"t\":\"如下：视图中无法显示数据库列表，输入查看数据库的指令，也无法执行。\"},\"10521\":{\"t\":\"2-2-3\"},\"10522\":{\"h\":\"3. 初始化副本集\",\"a\":\"_3-初始化副本集\"},\"10523\":{\"t\":\"rs.initiate(configuration) \"},\"10524\":{\"t\":\"选项一般为空即可，选项是一些与副本集设置有关的信息。\"},\"10525\":{\"h\":\"4. 副本集初始化结果\",\"a\":\"_4-副本集初始化结果\"},\"10526\":{\"t\":\"rs.initiate() { info2: 'no configuration specified. Using a default configuration for the set', me: '172.16.0.9:27017', ok: 1 } myrs [direct: secondary] test> \"},\"10527\":{\"t\":\"解析\"},\"10528\":{\"t\":\"ok值为1，表示副本集创建成功\"},\"10529\":{\"t\":\"命令行提示符发生变化，变成了一个从节点角色。 \"},\"10530\":{\"t\":\"此时默认不能读写。稍等片刻，回车，变成主节点。\"},\"10531\":{\"t\":\"此时已经可以读到数据库了。\"},\"10532\":{\"h\":\"Ⅳ. 查看副本集\",\"a\":\"iv-查看副本集\"},\"10533\":{\"t\":\"主节点\"},\"10534\":{\"t\":\"副本集初始化后，也同时配置好了主节点，查看副本集信息时，可以查看到主节点的信息。\"},\"10535\":{\"h\":\"1. 查看副本集的配置内容\",\"a\":\"_1-查看副本集的配置内容\"},\"10536\":{\"t\":\"提示\"},\"10537\":{\"t\":\"副本集配置的查看命令，本质是查询的是 system.replset 的表中的数据\"},\"10538\":{\"t\":\"rs.conf(configuration) \"},\"10539\":{\"t\":\"conﬁguration：可选，如果没有配置，则使用默认主节点配置。\"},\"10540\":{\"h\":\"1.1 执行结果\",\"a\":\"_1-1-执行结果\"},\"10541\":{\"t\":\"rs.conf() { _id: 'myrs', version: 1, term: 1, members: [ { _id: 0, host: '172.16.0.9:27017', arbiterOnly: false, buildIndexes: true, hidden: false, priority: 1, tags: {}, secondaryDelaySecs: Long(\\\"0\\\"), votes: 1 } ], protocolVersion: Long(\\\"1\\\"), writeConcernMajorityJournalDefault: true, settings: { chainingAllowed: true, heartbeatIntervalMillis: 2000, heartbeatTimeoutSecs: 10, electionTimeoutMillis: 10000, catchUpTimeoutMillis: -1, catchUpTakeoverDelayMillis: 30000, getLastErrorModes: {}, getLastErrorDefaults: { w: 1, wtimeout: 0 }, replicaSetId: ObjectId(\\\"6447e68241b3272f43080f4d\\\") } \"},\"10542\":{\"h\":\"1.2 结果解析\",\"a\":\"_1-2-结果解析\"},\"10543\":{\"t\":\"_id: 'myrs'：副本集的配置数据存储的主键值，默认就是副本集的名字\"},\"10544\":{\"t\":\"members ：副本集成员数组， \"},\"10545\":{\"t\":\"此时只有一个：\\\"host\\\":\\\"172.16.0.9:27017\\\" ， \"},\"10546\":{\"t\":\"该成员不是仲裁节点： \\\"arbiterOnly\\\" : false\"},\"10547\":{\"t\":\"优先级（权重值）：\\\"priority\\\" : 1\"},\"10548\":{\"t\":\"settings：副本集的参数配置\"},\"10549\":{\"h\":\"2. 查看副本集状态\",\"a\":\"_2-查看副本集状态\"},\"10550\":{\"t\":\"rs.status() \"},\"10551\":{\"t\":\"返回包含状态信息的文档。\"},\"10552\":{\"t\":\"此输出使用从副本集的其他成员发送的心跳包中获得的数据反映副本集的当前状态。\"},\"10553\":{\"h\":\"2.1 执行结果\",\"a\":\"_2-1-执行结果\"},\"10554\":{\"t\":\"{ set: 'myrs', date: 2023-04-25T14:54:27.116Z, myState: 1, term: Long(\\\"1\\\"), syncSourceHost: '', syncSourceId: -1, heartbeatIntervalMillis: Long(\\\"2000\\\"), majorityVoteCount: 1, writeMajorityCount: 1, votingMembersCount: 1, writableVotingMembersCount: 1, optimes: { lastCommittedOpTime: { ts: Timestamp({ t: 1682434466, i: 1 }), t: Long(\\\"1\\\") }, lastCommittedWallTime: 2023-04-25T14:54:26.680Z, readConcernMajorityOpTime: { ts: Timestamp({ t: 1682434466, i: 1 }), t: Long(\\\"1\\\") }, appliedOpTime: { ts: Timestamp({ t: 1682434466, i: 1 }), t: Long(\\\"1\\\") }, durableOpTime: { ts: Timestamp({ t: 1682434466, i: 1 }), t: Long(\\\"1\\\") }, lastAppliedWallTime: 2023-04-25T14:54:26.680Z, lastDurableWallTime: 2023-04-25T14:54:26.680Z }, lastStableRecoveryTimestamp: Timestamp({ t: 1682434446, i: 1 }), electionCandidateMetrics: { lastElectionReason: 'electionTimeout', lastElectionDate: 2023-04-25T14:41:06.438Z, electionTerm: Long(\\\"1\\\"), lastCommittedOpTimeAtElection: { ts: Timestamp({ t: 1682433666, i: 1 }), t: Long(\\\"-1\\\") }, lastSeenOpTimeAtElection: { ts: Timestamp({ t: 1682433666, i: 1 }), t: Long(\\\"-1\\\") }, numVotesNeeded: 1, priorityAtElection: 1, electionTimeoutMillis: Long(\\\"10000\\\"), newTermStartDate: 2023-04-25T14:41:06.593Z, wMajorityWriteAvailabilityDate: 2023-04-25T14:41:06.683Z }, members: [ { _id: 0, name: '172.16.0.9:27017', health: 1, state: 1, stateStr: 'PRIMARY', uptime: 3784, optime: [Object], optimeDate: 2023-04-25T14:54:26.000Z, lastAppliedWallTime: 2023-04-25T14:54:26.680Z, lastDurableWallTime: 2023-04-25T14:54:26.680Z, syncSourceHost: '', syncSourceId: -1, infoMessage: '', electionTime: Timestamp({ t: 1682433666, i: 2 }), electionDate: 2023-04-25T14:41:06.000Z, configVersion: 1, configTerm: 1, self: true, lastHeartbeatMessage: '' } ], ok: 1, '$clusterTime': { clusterTime: Timestamp({ t: 1682434466, i: 1 }), signature: { hash: Binary(Buffer.from(\\\"0000000000000000000000000000000000000000\\\", \\\"hex\\\"), 0), keyId: Long(\\\"0\\\") } }, operationTime: Timestamp({ t: 1682434466, i: 1 }) } \"},\"10555\":{\"h\":\"2.2 结果解析\",\"a\":\"_2-2-结果解析\"},\"10556\":{\"t\":\"set: 'myrs'：副本集的名字\"},\"10557\":{\"t\":\"myState: 1：值为1，说明状态正常\"},\"10558\":{\"t\":\"members： 副本集成员数组，此时只有一个，就是主节点。 \"},\"10559\":{\"t\":\"stateStr: 'PRIMARY'：角色名\"},\"10560\":{\"t\":\"health: 1：值为1，表示该节点是健康的。\"},\"10561\":{\"h\":\"Ⅴ. 添加节点\",\"a\":\"v-添加节点\"},\"10562\":{\"t\":\"完成副本集\"},\"10563\":{\"t\":\"手动将副本从节点和仲裁从节点添加到副本集，副本集就真正创建成功了。\"},\"10564\":{\"h\":\"1. 添加副本从节点\",\"a\":\"_1-添加副本从节点\"},\"10565\":{\"t\":\"rs.add(host, arbiterOnly) \"},\"10566\":{\"t\":\"host：要添加到副本集的新成员。 \"},\"10567\":{\"t\":\"字符串：指定新成员的主机名和可选的端口号\"},\"10568\":{\"t\":\"文档：指定配置文档\"},\"10569\":{\"t\":\"arbiterOnly：可选，值为Boolean，若为true，表示要添加的主机为仲裁者 \"},\"10570\":{\"t\":\"默认是false\"},\"10571\":{\"t\":\"一般不用给这个值，添加仲裁节点可以用别的方法\"},\"10572\":{\"t\":\"将从节点添加道副本集\"},\"10573\":{\"t\":\"myrs [direct: primary]test> rs.add(\\\"172.16.0.9:27018\\\") { ok: 1, '$clusterTime': { clusterTime: Timestamp({ t: 1682435169, i: 1 }), signature: { hash: Binary(Buffer.from(\\\"0000000000000000000000000000000000000000\\\", \\\"hex\\\"), 0), keyId: Long(\\\"0\\\") } }, operationTime: Timestamp({ t: 1682435169, i: 1 }) } \"},\"10574\":{\"t\":\"结果说明ok: 1：值为1，表示添加成功。\"},\"10575\":{\"t\":\"此时执行 rs.status() 查看副本集状态，可以发现members里存在了两个节点，刚加入的节点信息如下：\"},\"10576\":{\"t\":\"{ _id: 1, # 节点id name: '172.16.0.9:27018', # 节点ip:port health: 1, # 是否健康 state: 2, stateStr: 'SECONDARY', # 角色名，SECONDARY表示副节点 uptime: 195, optime: [Object], optimeDurable: [Object], optimeDate: 2023-04-25T15:09:16.000Z, optimeDurableDate: 2023-04-25T15:09:16.000Z, lastAppliedWallTime: 2023-04-25T15:09:16.699Z, lastDurableWallTime: 2023-04-25T15:09:16.699Z, lastHeartbeat: 2023-04-25T15:09:23.805Z, lastHeartbeatRecv: 2023-04-25T15:09:24.306Z, pingMs: Long(\\\"0\\\"), lastHeartbeatMessage: '', syncSourceHost: '172.16.0.9:27017', syncSourceId: 0, infoMessage: '', configVersion: 3, configTerm: 1 } \"},\"10577\":{\"h\":\"2. 添加仲裁从节点\",\"a\":\"_2-添加仲裁从节点\"},\"10578\":{\"t\":\"rs.addArb(host) \"},\"10579\":{\"t\":\"将仲裁节点添加到副本集\"},\"10580\":{\"t\":\"rs.addArb(\\\"159.75.225.162:27019\\\") { ok: 1, '$clusterTime': { clusterTime: Timestamp({ t: 1682436386, i: 1 }), signature: { hash: Binary(Buffer.from(\\\"000000000000000000000000000000\\\", \\\"hex\\\"), 0), keyId: Long(\\\"0\\\") } }, operationTime: Timestamp({ t: 1682436386, i: 1 }) } \"},\"10581\":{\"t\":\"查看副本集状态\"},\"10582\":{\"t\":\"此时，members里多了一个对象，就是刚新加入的仲裁节点，内容如下：\"},\"10583\":{\"t\":\"{ _id: 2, name: '159.75.225.162:27019', # ip:port health: 1, # 表示健康 state: 7, stateStr: 'ARBITER', # 角色名，ARBITER表示仲裁节点 uptime: 65, lastHeartbeat: 2023-04-25T15:27:30.240Z, lastHeartbeatRecv: 2023-04-25T15:27:30.276Z, pingMs: Long(\\\"0\\\"), lastHeartbeatMessage: '', syncSourceHost: '', syncSourceId: -1, infoMessage: '', configVersion: 4, configTerm: 1 } \"},\"10584\":{\"h\":\"3. debug\",\"a\":\"_3-debug\"},\"10585\":{\"t\":\"添加节点时，可能会遇到报错： MongoServerError: Reconfig attempted to install a config that would change the implicit default write concern. Use the setDefaultRWConcern command to set a cluster-wide write concern and try the reconfig again.\"},\"10586\":{\"t\":\"解决\"},\"10587\":{\"t\":\"先执行下面这条命令，然后再添加节点。\"},\"10588\":{\"t\":\"db.adminCommand( { \\\"setDefaultRWConcern\\\" : 1, \\\"defaultWriteConcern\\\" : { \\\"w\\\" : 2 } } ) \"},\"10589\":{\"h\":\"2-3. 操作副本集\"},\"10590\":{\"h\":\"Ⅰ. 连接副本集\",\"a\":\"i-连接副本集\"},\"10591\":{\"h\":\"1. 修复host\",\"a\":\"_1-修复host\"},\"10592\":{\"t\":\"当时初始化副本集的时候，节点成员的host都是区域网ip，这是无法正常连接的。\"},\"10593\":{\"t\":\"rs.conf() //查看member可知，节点的host都是区域网ip \"},\"10594\":{\"t\":\"在使用Compass连接副本集时，会连接这些ip，本地ip肯定是不行的，会连接失败，因此需要修复这些host。\"},\"10595\":{\"h\":\"1.1 修改副本集节点的host\",\"a\":\"_1-1-修改副本集节点的host\"},\"10596\":{\"t\":\"实际上就是改一下 config，修改的代码如下：\"},\"10597\":{\"t\":\"config = rs.conf() config.members[0].host=\\\"159.75.225.162:27017\\\" //主节点 config.members[1].host=\\\"159.75.225.162:27018\\\" //从节点 config.members[2].host=\\\"159.75.225.162:27019\\\" //从节点 rs.reconfig(config,{\\\"force\\\":true}) \"},\"10598\":{\"h\":\"2. 连接副本集\",\"a\":\"_2-连接副本集\"},\"10599\":{\"t\":\"详见：Compass\"},\"10600\":{\"h\":\"Ⅱ. 数据读写\",\"a\":\"ii-数据读写\"},\"10601\":{\"h\":\"1. 主节点读写\",\"a\":\"_1-主节点读写\"},\"10602\":{\"t\":\"登录主节点进行读写操作。\"},\"10603\":{\"t\":\"myrs[direct:primary]article> use article # 创建或选择article库 # 'switched to db article' db articel # 显示当前数据库 db.comment.insertOne({ # 插入一条数据 \\\"articleid\\\":\\\"10000\\\", \\\"content\\\": \\\"that's good\\\", \\\"userid\\\":\\\"1000\\\", \\\"createdatetime\\\": new Date(), \\\"likenum\\\":NumberInt(10), \\\"state\\\":null }) { # 插入成功 acknowledged: true, insertedId: ObjectId(\\\"64487fe22c64c9d9921960f8\\\") } \"},\"10604\":{\"t\":\"插入数据成功后，在Compass中，确实可以看到数据库创建成功，数据也插入成功。\"},\"10605\":{\"h\":\"2. 从节点读写\",\"a\":\"_2-从节点读写\"},\"10606\":{\"t\":\"警告\"},\"10607\":{\"t\":\"老的教程显示，从节点是没有读写权限的，需要使用slaveOk方法赋予权限。\"},\"10608\":{\"t\":\"实测，若以replicaSet的方式登录， 主节点和从节点的默认优先级是相同的，操作的一直都是主节点。\"},\"10609\":{\"t\":\"暂略。\"},\"10610\":{\"h\":\"Ⅲ. 主节点的选举\",\"a\":\"iii-主节点的选举\"},\"10611\":{\"h\":\"1. 选举触发条件\",\"a\":\"_1-选举触发条件\"},\"10612\":{\"t\":\"MongoDB在副本集中，会自动进行主节点的选举，触发条件为：\"},\"10613\":{\"t\":\"主节点故障\"},\"10614\":{\"t\":\"主节点网络不可达（默认心跳信息为10秒）\"},\"10615\":{\"t\":\"人工干预（rs.stepDown(600)）\"},\"10616\":{\"h\":\"2. 投票\",\"a\":\"_2-投票\"},\"10617\":{\"t\":\"每个节点都可以投票。 选举规则是根据票数来决定谁获胜：\"},\"10618\":{\"t\":\"票数最高：且获得了“大多数”成员的投票支持的节点获胜，大多数为 N/2 + 1。\"},\"10619\":{\"t\":\"票数相同，且都获得了“大多数”成员的投票支持的，数据新的节点获胜\"},\"10620\":{\"h\":\"3. 优先级\",\"a\":\"_3-优先级\"},\"10621\":{\"t\":\"在获得票数的时候，优先级（priority）参数影响重大。\"},\"10622\":{\"t\":\"可以通过设置优先级（priority）来设置额外票数。优先级即权重，取值为0-1000，相当于可额外增加0-1000的票数，优先级的值越大，就越可能获得多数成员的投票（votes）数。 指定较高的值可使成员更有资格成为主要成员，默认情况下，优先级的值是1。\"},\"10623\":{\"h\":\"3.1 查看优先级\",\"a\":\"_3-1-查看优先级\"},\"10624\":{\"t\":\"rs.conf() //返回的数据中members.priority就是优先级的值 \"},\"10625\":{\"h\":\"3.2 修改优先级\",\"a\":\"_3-2-修改优先级\"},\"10626\":{\"t\":\"cfg=rs.conf() //将配置导入变量 cfg.members[0].priority=2 //修改0号成员的优先级 rs.reconfig(cfg) //重新加载配置 \"},\"10627\":{\"t\":\"修改优先级后，就会开始重新选举。\"},\"10628\":{\"h\":\"Ⅳ. 故障测试\",\"a\":\"iv-故障测试\"},\"10629\":{\"t\":\"相关信息\"},\"10630\":{\"t\":\"TBD\"},\"10631\":{\"h\":\"2-4. 分片集群\"},\"10632\":{\"t\":\"提示\"},\"10633\":{\"t\":\"TBD\"},\"10634\":{\"h\":\"3-1. 角色与权限\"},\"10635\":{\"t\":\"默认情况\"},\"10636\":{\"t\":\"默认情况下，MongoDB实例启动运行时是没有启用用户访问权限控制的。 也就是说，可以随意连接到实例进行各种操作，MongoDB不会对连接客户端进行用户验证，这是非常危险的。\"},\"10637\":{\"h\":\"1. 安全保障手段\",\"a\":\"_1-安全保障手段\"},\"10638\":{\"t\":\"使用新的端口，默认的27017端口如果一旦知道了ip就能连接上，不太安全\"},\"10639\":{\"t\":\"设置mongodb的网络环境，最好将mongodb部署到公司服务器内网，这样外网是访问不到的。公 司内部访问使用vpn等。\"},\"10640\":{\"t\":\"开启安全认证。认证要同时设置服务器之间的内部认证方式，同时要设置客户端连接到集群的账号 密码认证方式。\"},\"10641\":{\"h\":\"2. 启动访问控制\",\"a\":\"_2-启动访问控制\"},\"10642\":{\"t\":\"为了强制开启用户访问控制(用户验证)，则需要在MongoDB实例启动时使用选项 --auth 或在指定启动 配置文件中添加选项 auth=true。\"},\"10643\":{\"t\":\"请选择在配置文件中添加选项，因为启动时加选项毫无意义，别人可以选择不加。\"},\"10644\":{\"h\":\"3. 概念\",\"a\":\"_3-概念\"},\"10645\":{\"h\":\"3.1 启动访问控制\",\"a\":\"_3-1-启动访问控制\"},\"10646\":{\"t\":\"MongoDB使用的是基于角色的访问控制(Role-Based Access Control,RBAC)来管理用户对实例的访问。\"},\"10647\":{\"t\":\"通过对用户授予一个或多个角色来控制用户访问数据库资源的权限和数据库操作的权限，在对用户分配 角色之前，用户无法访问实例\"},\"10648\":{\"h\":\"3.2 角色\",\"a\":\"_3-2-角色\"},\"10649\":{\"t\":\"在MongoDB中通过角色对用户授予相应数据库资源的操作权限，每个角色当中的权限可以显式指定， 也可以通过继承其他角色的权限，或者两都都存在的权限。\"},\"10650\":{\"h\":\"3.3 权限：\",\"a\":\"_3-3-权限\"},\"10651\":{\"t\":\"权限由指定的数据库资源(resource)以及允许在指定资源上进行的操作(action)组成。\"},\"10652\":{\"t\":\"资源(resource)包括：数据库、集合、部分集合和集群；\"},\"10653\":{\"t\":\"操作(action)包括：对资源进行的增、删、改、查(CRUD)操作。\"},\"10654\":{\"t\":\"在角色定义时可以包含一个或多个已存在的角色，新创建的角色会继承包含的角色所有的权限。在同一 个数据库中，新创建角色可以继承其他角色的权限，在 admin 数据库中创建的角色可以继承在其它任意数据库中角色的权限。\"},\"10655\":{\"h\":\"4. 查看角色权限\",\"a\":\"_4-查看角色权限\"},\"10656\":{\"h\":\"4.1 查询所有角色权限（仅用户自定义角色）\",\"a\":\"_4-1-查询所有角色权限-仅用户自定义角色\"},\"10657\":{\"t\":\" db.runCommand({ rolesInfo: 1 }) { roles: [], ok: 1, '$clusterTime': { clusterTime: Timestamp({ t: 1682481367, i: 1 }), signature: { hash: Binary(Buffer.from(\\\"0000000000000000000000000000\\\", \\\"hex\\\"), 0), keyId: Long(\\\"0\\\") } }, operationTime: Timestamp({ t: 1682481367, i: 1 }) } \"},\"10658\":{\"t\":\"默认是没有自定义角色的。\"},\"10659\":{\"h\":\"4.2 查询所有角色权限(包含内置角色)\",\"a\":\"_4-2-查询所有角色权限-包含内置角色\"},\"10660\":{\"t\":\"db.runCommand({ rolesInfo: 1, showBuiltinRoles: true }) { roles: [ { role: 'dbOwner', db: 'test', isBuiltin: true, roles: [], inheritedRoles: [] }, { role: 'readWrite', db: 'test', isBuiltin: true, roles: [], inheritedRoles: [] }, { role: 'userAdmin', db: 'test', isBuiltin: true, roles: [], inheritedRoles: [] }, { role: 'dbAdmin', db: 'test', isBuiltin: true, roles: [], inheritedRoles: [] }, { role: 'read', db: 'test', isBuiltin: true, roles: [], inheritedRoles: [] }, { role: 'enableSharding', db: 'test', isBuiltin: true, roles: [], inheritedRoles: [] } ], ok: 1, '$clusterTime': { clusterTime: Timestamp({ t: 1682481447, i: 1 }), signature: { hash: Binary(Buffer.from(\\\"00000000000000000000000000\\\", \\\"hex\\\"), 0), keyId: Long(\\\"0\\\") } }, operationTime: Timestamp({ t: 1682481447, i: 1 }) } \"},\"10661\":{\"t\":\"如上，有6个内置的角色。\"},\"10662\":{\"h\":\"4.3 查询指定权限\",\"a\":\"_4-3-查询指定权限\"},\"10663\":{\"t\":\"# 查询当前数据库中的某角色的权限 > db.runCommand({ rolesInfo: \\\"<rolename>\\\" }) # 查询其它数据库中指定的角色权限 > db.runCommand({ rolesInfo: { role: \\\"<rolename>\\\", db: \\\"<database>\\\" } } # 查询多个角色权限 > db.runCommand( { rolesInfo: [ \\\"<rolename>\\\", { role: \\\"<rolename>\\\", db: \\\"<database>\\\" }, ... ] } ) \"},\"10664\":{\"h\":\"5. 常用的内置角色：\",\"a\":\"_5-常用的内置角色\"},\"10665\":{\"t\":\"数据库用户角色：read、readWrite;\"},\"10666\":{\"t\":\"所有数据库用户角色：readAnyDatabase、readWriteAnyDatabase、 userAdminAnyDatabase、dbAdminAnyDatabase\"},\"10667\":{\"t\":\"数据库管理角色：dbAdmin、dbOwner、userAdmin；\"},\"10668\":{\"t\":\"集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；\"},\"10669\":{\"t\":\"备份恢复角色：backup、restore；\"},\"10670\":{\"t\":\"超级用户角色：root\"},\"10671\":{\"t\":\"内部角色：system\"},\"10672\":{\"h\":\"6. 角色说明\",\"a\":\"_6-角色说明\"},\"10673\":{\"t\":\"角色\"},\"10674\":{\"t\":\"权限描述\"},\"10675\":{\"t\":\"read\"},\"10676\":{\"t\":\"可以读取指定数据库中任何数据。\"},\"10677\":{\"t\":\"readWrite\"},\"10678\":{\"t\":\"可以读写指定数据库中任何数据，包括创建、重命名、删除集合。\"},\"10679\":{\"t\":\"readAnyDatabase\"},\"10680\":{\"t\":\"可以读取所有数据库中任何数据(除了数据库config和local之外)。\"},\"10681\":{\"t\":\"readWriteAnyDatabase\"},\"10682\":{\"t\":\"可以读写所有数据库中任何数据(除了数据库config和local之外)。\"},\"10683\":{\"t\":\"userAdminAnyDatabase\"},\"10684\":{\"t\":\"可以在指定数据库创建和修改用户(除了数据库config和local之外)。\"},\"10685\":{\"t\":\"dbAdminAnyDatabase\"},\"10686\":{\"t\":\"可以读取任何数据库以及对数据库进行清理、修改、压缩、获取统计信息、执行检查等操作(除了数据库config和local之外)。\"},\"10687\":{\"t\":\"dbAdmin\"},\"10688\":{\"t\":\"可以读取指定数据库以及对数据库进行清理、修改、压缩、获取统计信息、执行检查等操作。\"},\"10689\":{\"t\":\"userAdmin\"},\"10690\":{\"t\":\"可以在指定数据库创建和修改用户。\"},\"10691\":{\"t\":\"clusterAdmin\"},\"10692\":{\"t\":\"可以对整个集群或数据库系统进行管理操作。\"},\"10693\":{\"t\":\"backup\"},\"10694\":{\"t\":\"备份MongoDB数据最小的权限。\"},\"10695\":{\"t\":\"restore\"},\"10696\":{\"t\":\"从备份文件中还原恢复MongoDB数据(除了system.profile集合)的权限。\"},\"10697\":{\"t\":\"root\"},\"10698\":{\"t\":\"超级账号，超级权限\"},\"10699\":{\"h\":\"3-2. 单实例环境\"},\"10700\":{\"h\":\"Ⅰ. 管理用户\",\"a\":\"i-管理用户\"},\"10701\":{\"h\":\"1. createUser\",\"a\":\"_1-createuser\"},\"10702\":{\"t\":\"创建用户需要使用db.createUser方法，该方法有一个对象参数。\"},\"10703\":{\"t\":\"admin> db.createUser( { user: \\\"admin\\\", # 用户名 pwd: \\\"123456\\\", # 设置密码 customData:{ # 账户描述信息，可选 \\\"desc\\\":\\\"this user is admin\\\" } roles:[ # 设置角色，赋予权限 { role:\\\"root\\\" # 赋予root角色 # db可选，默认在所有的数据库上都有效 db:\\\"article\\\" # 赋予角色所属的数据库 } ] } ) { ok: 1 } # 表示创建成功 \"},\"10704\":{\"h\":\"2. 创建用户示例\",\"a\":\"_2-创建用户示例\"},\"10705\":{\"t\":\"连接mongodb，use admin数据库，并创建以下三个账户\"},\"10706\":{\"t\":\"myroot：系统超级用户，角色为root \"},\"10707\":{\"t\":\"如果对安全要求很高，防止超管泄漏，则不要创建root超管用户。\"},\"10708\":{\"t\":\"admin：admin库的管理用户，角色为userAdminAnyDatabase\"},\"10709\":{\"t\":\"blog：普通用户，仅能操作article数据库\"},\"10710\":{\"h\":\"2.1 创建myroot\",\"a\":\"_2-1-创建myroot\"},\"10711\":{\"t\":\"test> use admin admin> db.createUser( {user:'myroot',pwd:'2ck23-5',roles:[{role:'root', db:'admin'}]} ) \"},\"10712\":{\"h\":\"2.2 创建admin\",\"a\":\"_2-2-创建admin\"},\"10713\":{\"t\":\"创建专门用来管理admin库的账号myadmin，只用来作为用户权限的管理。\"},\"10714\":{\"t\":\"use admin db.createUser( {user:'admin',pwd:'a123', roles:[{role:'userAdminAnyDatabase', db:'admin'}]} ) \"},\"10715\":{\"h\":\"2.3 创建普通用户\",\"a\":\"_2-3-创建普通用户\"},\"10716\":{\"t\":\"创建普通用户可以在没有开启认证的时候添加，也可以在开启认证之后添加，但开启认证之后，必须使 用有操作admin库的用户登录认证后才能操作。底层都是将用户信息保存在了admin数据库的集合 system.users中。\"},\"10717\":{\"t\":\"如下，创建一个仅能对article库进行读写的用户。\"},\"10718\":{\"t\":\"db.createUser( {user:\\\"blog\\\",pwd:\\\"1234\\\",roles:[{role:\\\"readWrite\\\",db:\\\"article\\\"}]} ) \"},\"10719\":{\"h\":\"3. 查看用户\",\"a\":\"_3-查看用户\"},\"10720\":{\"t\":\"提示\"},\"10721\":{\"t\":\"和其它数据库（MySQL）一样，权限的管理都差不多一样，也是将用户和权限信息保存到数据库对 应的表中。 Mongodb存储所有的用户信息在admin 数据库的集合system.users中，保存用户名、密码 和数据库信息。 PS：这个集合是隐藏的，没法在Compass上直接看到，需要输入查看命令。\"},\"10722\":{\"t\":\"admin> show collections system.users # 可以看到有两个隐藏的集合 system.version \"},\"10723\":{\"t\":\"输入指令查看所有的用户信息：\"},\"10724\":{\"t\":\"admin> db.system.users.find() \"},\"10725\":{\"t\":\"查询的结果如下：\"},\"10726\":{\"t\":\"// 第一个添加的用户: myroot { _id: 'admin.myroot', // 用户id：admin.用户名 userId: UUID(\\\"a9898c75-ea87-4506-a2cf-30cee1936861\\\"), user: 'myroot', // 用户名 db: 'admin', // 用户所在的数据库 credentials:{ // 加密 key ... }, roles:[ // 角色信息 { role:'root', db: 'admin' //用户管理的数据库 } ] } // 第二个添加的用户: admin { _id: 'admin.admin', userId: UUID(\\\"3b994547-15ef-4cc1-9632-e676dd308382\\\"), user: 'admin', db: 'admin', credentials:{ ... }, roles:[ ... ] // 第三个添加的用户: blog _id: 'admin.blog', userId: UUID(\\\"c8710e95-2218-4032-9ef5-855ed8bca863\\\"), user: 'blog', db: 'admin', credentials:{ ... }, roles:[ { role: 'readWrite', db: 'article' } ] } \"},\"10727\":{\"h\":\"4. 删除用户\",\"a\":\"_4-删除用户\"},\"10728\":{\"t\":\"db.dropUser(\\\"用户名\\\") { ok: 1 } // 表示操作成功 \"},\"10729\":{\"h\":\"5. 修改密码\",\"a\":\"_5-修改密码\"},\"10730\":{\"t\":\"db.changeUserPassword(\\\"用户名\\\",\\\"新密码\\\") { ok: 1 } // 表示操作成功 \"},\"10731\":{\"h\":\"6. 认证测试\",\"a\":\"_6-认证测试\"},\"10732\":{\"t\":\"并非真正的开启用户验证，只是测试下创建的账号。\"},\"10733\":{\"t\":\"注意：无论用户管理的数据库是哪个，该用户的信息都是存储在admin数据库的，因此需要在admin数据库下使用auth方法进行验证。\"},\"10734\":{\"t\":\"//一定要切到admin数据库，不如怎么验证都是失败 use admin //先使用错误的用户名和密码 admin> db.auth(\\\"person\\\",\\\"23d23\\\") 报错：MongoServerError:Authentication failed. //使用正确的用户名和密码 db.auth(\\\"blog\\\",\\\"1234\\\") {ok: 1} //验证通过 \"},\"10735\":{\"h\":\"Ⅱ. 开启认证\",\"a\":\"ii-开启认证\"},\"10736\":{\"t\":\"警告\"},\"10737\":{\"t\":\"创建用户后，还要开启登录认证，不然创建的用户毫无意义。\"},\"10738\":{\"h\":\"1. 修改配置文件\",\"a\":\"_1-修改配置文件\"},\"10739\":{\"t\":\"修改mongod.conf配置文件，添加权限验证。\"},\"10740\":{\"t\":\"security: #开启授权认证 authorization: enabled \"},\"10741\":{\"t\":\"此时再启动服务，就开启了登录认证。\"},\"10742\":{\"h\":\"2. 通过认证登录\",\"a\":\"_2-通过认证登录\"},\"10743\":{\"t\":\"不认证通过Compass直接登录，会报错：\"},\"10744\":{\"t\":\"An error occurred while loading instance info: command hostInfo requires authentication\"},\"10745\":{\"h\":\"2.1 登录时进行验证\",\"a\":\"_2-1-登录时进行验证\"},\"10746\":{\"t\":\"需要在登录时就选择进行权限验证：\"},\"10747\":{\"t\":\"3-2-1\"},\"10748\":{\"h\":\"2.2 登录后的权限\",\"a\":\"_2-2-登录后的权限\"},\"10749\":{\"t\":\"用什么账号登录，就有什么账号的权限，如上采用的blog账号，该账号仅能读写article库，因此登录后就只能看到article库，只能操作article库。\"},\"10750\":{\"t\":\"3-2-2\"},\"10751\":{\"h\":\"Ⅲ. 关闭MongoDB\",\"a\":\"iii-关闭mongodb\"},\"10752\":{\"t\":\"除了暴力kill进程，还可以使用命名关闭MongoDB服务。\"},\"10753\":{\"t\":\"use admin db.shutdownServer() \"},\"10754\":{\"t\":\"shutdownServer执行的条件\"},\"10755\":{\"t\":\"必须是在admin库下执行该关闭服务命令\"},\"10756\":{\"t\":\"如果没有开启认证，必须是从localhost登陆的，才能执行关闭服务命令\"},\"10757\":{\"t\":\"非localhost的、通过远程登录的，必须有登录且必须登录用户有对admin操作权限才可以\"},\"10758\":{\"h\":\"3-3. 副本集环境\"},\"10759\":{\"h\":\"1. 认证的内容\",\"a\":\"_1-认证的内容\"},\"10760\":{\"t\":\"对于副本集，有两个地方需要进行权限认证：\"},\"10761\":{\"t\":\"authorization：用户认证，和单实例的用户登录认证类似\"},\"10762\":{\"t\":\"keyFile：节点成员内部认证，副本集和共享集群的各个节点成员之间使用内部身份验证，一般采用的认证方式是x.509证书。 \"},\"10763\":{\"t\":\"原理：集群中每一个实例彼此连接的时候都检验彼此使用的证书的内容是否相同。 只有证书相同的实例彼此才可以访问\"},\"10764\":{\"h\":\"2. 添加账号\",\"a\":\"_2-添加账号\"},\"10765\":{\"t\":\"登录主节点，添加一个管理员账号。 只需要在主节点上添加用户，副本集会自动同步。\"},\"10766\":{\"t\":\"myrs [direct:primary] test> use admin myrs [direct:primary] admin> db.createUser({ user:\\\"root\\\",pwd:\\\"23cx@fdw\\\",roles:[\\\"root\\\"] }) \"},\"10767\":{\"h\":\"3. 创建x.509证书\",\"a\":\"_3-创建x-509证书\"},\"10768\":{\"h\":\"3.1 通过openssl生成证书\",\"a\":\"_3-1-通过openssl生成证书\"},\"10769\":{\"t\":\"可以使用任何方法生成密钥文件，这里采用openssl生成密码文件。\"},\"10770\":{\"t\":\"# 在当前目录生成证书 openssl rand -base64 90 > ./mongo.keyfile # 修改证书权限 chmod 400 mongo.keyfile \"},\"10771\":{\"h\":\"3.2 复制证书\",\"a\":\"_3-2-复制证书\"},\"10772\":{\"t\":\"赋值该证书到所有节点所在的设备，保证所有的副本集节点都使用同一份证书。\"},\"10773\":{\"t\":\"当前是在一台设备上模拟的副本集，因此拷贝到各自的目录即可：\"},\"10774\":{\"t\":\"cp mongo.keyfile /opt/mongodb/sets/m27017/ cp mongo.keyfile /opt/mongodb/sets/m27018/ cp mongo.keyfile /opt/mongodb/sets/m27019/ \"},\"10775\":{\"h\":\"4. 修改配置文件\",\"a\":\"_4-修改配置文件\"},\"10776\":{\"t\":\"修改配置文件，添加开启authorization和keyFile鉴权的配置。\"},\"10777\":{\"t\":\"security: #KeyFile鉴权文件 keyFile: /opt/mongodb/sets/m27017/mongo.keyfile #开启认证方式运行 authorization: enabled \"},\"10778\":{\"t\":\"每个节点都要修改，注意证书路径。\"},\"10779\":{\"h\":\"5. 连接副本集\",\"a\":\"_5-连接副本集\"},\"10780\":{\"t\":\"重启所有节点，并通过用户认证连接副本集。\"},\"10781\":{\"h\":\"3-4. 分片集群环境\"},\"10782\":{\"t\":\"提示\"},\"10783\":{\"t\":\"TBD\"},\"10784\":{\"h\":\"4-1. Compass\"},\"10785\":{\"t\":\"提示\"},\"10786\":{\"t\":\"关于Compass的介绍见：连接MongoDB\"},\"10787\":{\"h\":\"Ⅰ. 连接方式\",\"a\":\"i-连接方式\"},\"10788\":{\"t\":\"共有两种连接方式：direct和replicaSet。\"},\"10789\":{\"h\":\"1. direct\",\"a\":\"_1-direct\"},\"10790\":{\"t\":\"直接连接mongodb服务，如果连接的对方是副本集，那么忽略他是副本集，直接连接。\"},\"10791\":{\"h\":\"2. replicaSet\",\"a\":\"_2-replicaset\"},\"10792\":{\"t\":\"以副本集的形式连接，连接的是整个副本集。\"},\"10793\":{\"h\":\"3. 权限认证\",\"a\":\"_3-权限认证\"},\"10794\":{\"t\":\"一般采用账户名密码的形式进行权限认证，在连接的时候，切换到Authentication选项卡，输入账户名密码即可。\"},\"10795\":{\"t\":\"4-1-1\"},\"10796\":{\"h\":\"Ⅱ. 连接单实例\",\"a\":\"ii-连接单实例\"},\"10797\":{\"t\":\"连接单实例，默认采用的就direct连接方式，非常简单。\"},\"10798\":{\"t\":\"Comment info为：\"},\"10799\":{\"t\":\"mongodb://blog:1234@159.75.225.162:27017/?authMechanism=DEFAULT \"},\"10800\":{\"t\":\"4-1-2\"},\"10801\":{\"h\":\"Ⅲ. 连接副本集\",\"a\":\"iii-连接副本集\"},\"10802\":{\"t\":\"注意\"},\"10803\":{\"t\":\"需要先搭建好副本集，并且进行启动，除了主节点，连接其他节点需要进行初始化。\"},\"10804\":{\"h\":\"1. 初始化前的连接\",\"a\":\"_1-初始化前的连接\"},\"10805\":{\"t\":\"在副本集初始化之前，是不能以副本集的形式连接的，只能以direct的形式连接副本集的主节点，并进行初始化。\"},\"10806\":{\"t\":\"Comment info为：\"},\"10807\":{\"t\":\"mongodb://159.75.225.162:27017/?directConnection=true \"},\"10808\":{\"t\":\"如下：连接时需要勾选Direct Connection\"},\"10809\":{\"t\":\"4-1-3\"},\"10810\":{\"h\":\"2. 直连副本集\",\"a\":\"_2-直连副本集\"},\"10811\":{\"t\":\"前置条件\"},\"10812\":{\"t\":\"连接前，需要对副本集进行初始化，添加好节点，保证host无误，方能进行连接。 也要提前配置好权限认证，并启动所有节点。\"},\"10813\":{\"t\":\"直接连接副本集，就是以replicaSet的方式连接mongodb。\"},\"10814\":{\"t\":\" 如上，需要添加多个host。\"},\"10815\":{\"t\":\"Comment info为：\"},\"10816\":{\"t\":\"mongodb://root:23cx%40fdw @159.75.225.162:27017,159.75.225.162:27018,159.75.225.162:27019 /?authMechanism=DEFAULT \"},\"10817\":{\"h\":\"3. 只连接一个节点\",\"a\":\"_3-只连接一个节点\"},\"10818\":{\"t\":\"也可以以replicaSet的方式只连接一个节点。\"},\"10819\":{\"t\":\"注意\"},\"10820\":{\"t\":\"暂时意义不明\"},\"10821\":{\"h\":\"Ⅳ. 连接分片集群\",\"a\":\"iv-连接分片集群\"},\"10822\":{\"t\":\"相关信息\"},\"10823\":{\"t\":\"TBD\"},\"10824\":{\"h\":\"4-2. Java操作\"},\"10825\":{\"t\":\"转移\"},\"10826\":{\"t\":\"直接上手SpringBoot集成MongoDB。 Java单独操作MongoDB，暂时省略了。\"},\"10827\":{\"h\":\"1. Maven\",\"a\":\"_1-maven\"},\"10828\":{\"t\":\"使用MongoDB需要先导入驱动。 MongoDB默认是被SpringBoot管理的，使用SpringBoot可以不写版本号。\"},\"10829\":{\"t\":\"<dependency> <groupId>org.mongodb</groupId> <artifactId>mongodb-driver-sync</artifactId> <version>4.9.1</version> </dependency> \"},\"10830\":{\"t\":\"子依赖 该依赖会自动添加子依赖：bson和mongodb-driver-core\"},\"10831\":{\"h\":\"4-3. SpringBoot集成\"},\"10832\":{\"h\":\"引入\",\"a\":\"引入\"},\"10833\":{\"h\":\"1. Spring Data\",\"a\":\"_1-spring-data\"},\"10834\":{\"t\":\"Spring的一个子项目，用于简化数据库访问，支持NoSQL和关系数据存储。其主要目标是使用数据库的访问变得方便快捷。\"},\"10835\":{\"t\":\"Spring Data 致力于减少数据访问层 (DAO) 的开发量. 开发者唯一要做的，就只是声明持久层的接口，其他都交给 Spring Data JPA 来帮你完成！\"},\"10836\":{\"h\":\"2. Spring Data MongoDB\",\"a\":\"_2-spring-data-mongodb\"},\"10837\":{\"t\":\"Spring Data MongDB 是Spring Data的下的一个模块，在SpringBoot中整合MongoDB就需要添加Spring Data MongDB的依赖。\"},\"10838\":{\"h\":\"3. Maven\",\"a\":\"_3-maven\"},\"10839\":{\"t\":\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-mongodb</artifactId> </dependency> \"},\"10840\":{\"h\":\"yml配置\",\"a\":\"yml配置\"},\"10841\":{\"h\":\"1. 通过host和port连接\",\"a\":\"_1-通过host和port连接\"},\"10842\":{\"t\":\"在application.yml文件中添加MongoDB的连接参数。\"},\"10843\":{\"t\":\"spring: data: mongodb: host: 159.75.225.162 port: 27017 authentication-database: admin username: blog password: 1234 database: article \"},\"10844\":{\"h\":\"2. 通过uri连接\",\"a\":\"_2-通过uri连接\"},\"10845\":{\"t\":\"可以直接通过URI进行连接，对于副本集只能通过URI进行连接。\"},\"10846\":{\"t\":\"spring: data: mongodb: uri: mongodb://root:23cx%40fdw@159.75.225.162:27017,159.75.225.162:27018,159.75.225.162:27019/ authentication-database: admin username: blog password: 1234 database: article \"},\"10847\":{\"h\":\"操作方式\",\"a\":\"操作方式\"},\"10848\":{\"t\":\"提示\"},\"10849\":{\"t\":\"TBD\"},\"10850\":{\"h\":\"CURD\",\"a\":\"curd\"},\"10851\":{\"t\":\"提示\"},\"10852\":{\"t\":\"TBD\"},\"10853\":{\"h\":\"4-4. 使用示例\"},\"10854\":{\"t\":\"提示\"},\"10855\":{\"t\":\"TBD\"},\"10856\":{\"h\":\"4-5. Debug\"},\"10857\":{\"h\":\"1. 数据损坏的修复\",\"a\":\"_1-数据损坏的修复\"},\"10858\":{\"t\":\"注意\"},\"10859\":{\"t\":\"如果采用了kill而非标准方式关闭了mongoDB服务，可能会产生数据损坏。\"},\"10860\":{\"t\":\"删除lock文件： */data/db/*.lock\"},\"10861\":{\"t\":\"修复数据：./mongod --repair --depath= */data/db\"},\"10862\":{\"h\":\"2. 服务启动失败\",\"a\":\"_2-服务启动失败\"},\"10863\":{\"t\":\"注意\"},\"10864\":{\"t\":\"ERROR: child process failed, exited with error number 1 To see additional infor\"},\"10865\":{\"t\":\"原因：配置文件中的一些路径出现问题\"},\"10866\":{\"h\":\"Blocks\"},\"10867\":{\"h\":\"Cloud\"},\"10868\":{\"h\":\"Frame\"},\"10869\":{\"h\":\"项目开发指南\"},\"10870\":{\"h\":\"Java\"},\"10871\":{\"h\":\"Other\"},\"10872\":{\"h\":\"Plugin\"},\"10873\":{\"h\":\"Service\"},\"10874\":{\"h\":\"Sql\"},\"10875\":{\"h\":\"1.入门\"},\"10876\":{\"h\":\"2.实用功能\"},\"10877\":{\"h\":\"3.基本运维\"},\"10878\":{\"h\":\"4.集成数据层\"},\"10879\":{\"h\":\"X.dev\"},\"10880\":{\"h\":\"1.瑞吉外卖\"},\"10881\":{\"h\":\"1.基础\"},\"10882\":{\"h\":\"3.异常处理\"},\"10883\":{\"h\":\"4.枚举与注解\"},\"10884\":{\"h\":\"5.多线程\"},\"10885\":{\"h\":\"6.集合\"},\"10886\":{\"h\":\"7.泛型\"},\"10887\":{\"h\":\"9.网络编程\"},\"10888\":{\"h\":\"3. Servlet\"},\"10889\":{\"h\":\"4. Filter Listener\"},\"10890\":{\"h\":\"5. Java前端\"},\"10891\":{\"h\":\"6.扩展内容\"},\"10892\":{\"h\":\"1.基本操作\"},\"10893\":{\"h\":\"2.集群\"},\"10894\":{\"h\":\"3.安全认证\"},\"10895\":{\"h\":\"4.dev\"}},\"dirtCount\":0,\"index\":[[\"入门\",{\"0\":{\"10875\":1}}],[\"入口\",{\"0\":{\"2905\":1}}],[\"致力于减少数据访问层\",{\"1\":{\"10835\":1}}],[\"认证的内容\",{\"0\":{\"10759\":1}}],[\"认证测试\",{\"0\":{\"10731\":1}}],[\"认证要同时设置服务器之间的内部认证方式\",{\"1\":{\"10640\":1}}],[\"账户描述信息\",{\"1\":{\"10703\":1}}],[\"压缩\",{\"1\":{\"10686\":1,\"10688\":1}}],[\"压缩解压缩\",{\"1\":{\"6718\":1}}],[\"备份mongodb数据最小的权限\",{\"1\":{\"10694\":1}}],[\"备份恢复角色\",{\"1\":{\"10669\":1}}],[\"备注\",{\"0\":{\"5186\":1},\"1\":{\"1352\":1,\"2924\":1,\"7323\":1}}],[\"司内部访问使用vpn等\",{\"1\":{\"10639\":1}}],[\"票数相同\",{\"1\":{\"10619\":1}}],[\"票数最高\",{\"1\":{\"10618\":1}}],[\"人工干预\",{\"1\":{\"10615\":1}}],[\"触发条件为\",{\"1\":{\"10612\":1}}],[\"触发了事件\",{\"1\":{\"9318\":1}}],[\"老的教程显示\",{\"1\":{\"10607\":1}}],[\"老写法\",{\"1\":{\"7373\":1,\"7377\":1,\"7390\":1}}],[\"刚加入的节点信息如下\",{\"1\":{\"10575\":1}}],[\"刚好是compareto方法的调用者\",{\"1\":{\"7489\":1}}],[\"权重值\",{\"1\":{\"10547\":1}}],[\"权限认证\",{\"0\":{\"10793\":1}}],[\"权限的管理都差不多一样\",{\"1\":{\"10721\":1}}],[\"权限描述\",{\"1\":{\"10674\":1}}],[\"权限由指定的数据库资源\",{\"1\":{\"10651\":1}}],[\"权限\",{\"0\":{\"10650\":1}}],[\"权限控制\",{\"1\":{\"4592\":1}}],[\"权限问题\",{\"0\":{\"4026\":1}}],[\"权限跟类一样\",{\"1\":{\"3873\":1}}],[\"权限范围介绍\",{\"0\":{\"3842\":1}}],[\"权限修饰符\",{\"0\":{\"3833\":1},\"1\":{\"3670\":1,\"3718\":1,\"3719\":1,\"4852\":1,\"7085\":1,\"7086\":1,\"7105\":1,\"7106\":1}}],[\"权限管理\",{\"1\":{\"1397\":1}}],[\"稍等片刻\",{\"1\":{\"10530\":1}}],[\"仲裁节点和主节点拥有相同的副本集名称以组成副本集\",{\"1\":{\"10505\":1}}],[\"仲裁节点的配置文件和主节点配置文件相比只有一些目录和端口的配置不同\",{\"1\":{\"10505\":1}}],[\"仲裁者将永远是仲裁者\",{\"1\":{\"10464\":1}}],[\"仲裁者不需要专用硬件\",{\"1\":{\"10463\":1}}],[\"仲裁者不维护数据集\",{\"1\":{\"10460\":1}}],[\"仲裁者的目的是通过\",{\"1\":{\"10460\":1}}],[\"仲裁者额外说明\",{\"0\":{\"10459\":1}}],[\"仲裁者\",{\"1\":{\"10457\":1}}],[\"副节点的配置文件和主节点配置文件相比只有一些目录和端口的配置不同\",{\"1\":{\"10500\":1}}],[\"副节点目录\",{\"1\":{\"10486\":1}}],[\"副节点\",{\"1\":{\"10480\":1}}],[\"副本节点和主节点拥有相同的副本集名称以组成副本集\",{\"1\":{\"10500\":1}}],[\"副本成员\",{\"1\":{\"10456\":1}}],[\"副本\",{\"1\":{\"10442\":1}}],[\"副本集会自动同步\",{\"1\":{\"10765\":1}}],[\"副本集和共享集群的各个节点成员之间使用内部身份验证\",{\"1\":{\"10762\":1}}],[\"副本集环境\",{\"0\":{\"10758\":1}}],[\"副本集就真正创建成功了\",{\"1\":{\"10563\":1}}],[\"副本集成员数组\",{\"1\":{\"10544\":1,\"10558\":1}}],[\"副本集初始化后\",{\"1\":{\"10534\":1}}],[\"副本集初始化结果\",{\"0\":{\"10525\":1}}],[\"副本集初始化的时候\",{\"1\":{\"10496\":1}}],[\"副本集的名字\",{\"1\":{\"10556\":1}}],[\"副本集的名称\",{\"1\":{\"10496\":1}}],[\"副本集的参数配置\",{\"1\":{\"10548\":1}}],[\"副本集的配置数据存储的主键值\",{\"1\":{\"10543\":1}}],[\"副本集的类型和角色\",{\"0\":{\"10449\":1}}],[\"副本集配置的查看命令\",{\"1\":{\"10537\":1}}],[\"副本集配置\",{\"1\":{\"10496\":1}}],[\"副本集设计\",{\"0\":{\"10474\":1}}],[\"副本集架构示例\",{\"0\":{\"10465\":1}}],[\"副本集有两种类型三种角色\",{\"1\":{\"10450\":1}}],[\"副本集总有一个活跃点\",{\"1\":{\"10448\":1}}],[\"副本集只能有一个主要能够确认具有\",{\"1\":{\"10445\":1}}],[\"副本集包含多个数据承载节点和可选的一个仲裁节点\",{\"1\":{\"10444\":1}}],[\"副本集是一组维护相同数据集的mongod实例\",{\"1\":{\"10444\":1}}],[\"副本集类似于有自动故障恢复功能的主从集群\",{\"1\":{\"10439\":1}}],[\"副本集可提供冗余和高\",{\"1\":{\"10438\":1}}],[\"副本集\",{\"0\":{\"10436\":1}}],[\"投票\",{\"0\":{\"10616\":1},\"1\":{\"10461\":1}}],[\"投影查询\",{\"0\":{\"10315\":1}}],[\"投影\",{\"1\":{\"10309\":1}}],[\"辅助\",{\"1\":{\"10453\":1}}],[\"辅助功能\",{\"0\":{\"438\":1}}],[\"次要\",{\"1\":{\"10453\":1}}],[\"掉后\",{\"1\":{\"10448\":1}}],[\"掉用被代理类的conncetdb方法\",{\"1\":{\"7207\":1}}],[\"掉用非静态方法\",{\"1\":{\"4553\":1}}],[\"些情况下\",{\"1\":{\"10445\":1}}],[\"冗余和数据可用性\",{\"0\":{\"10440\":1}}],[\"冗余字段\",{\"1\":{\"1342\":2}}],[\"步同步\",{\"1\":{\"10439\":1}}],[\"步骤\",{\"0\":{\"9073\":1},\"1\":{\"5017\":1}}],[\"步骤三\",{\"1\":{\"4469\":1}}],[\"步骤二\",{\"1\":{\"4469\":1}}],[\"步骤一\",{\"1\":{\"4469\":1}}],[\"步骤同idea\",{\"1\":{\"361\":1}}],[\"涵盖查询\",{\"0\":{\"10430\":1}}],[\"降序索引\",{\"1\":{\"10365\":1}}],[\"降低资源消耗\",{\"1\":{\"5494\":1}}],[\"降低了多态的范围\",{\"1\":{\"6059\":1}}],[\"降低了程序的耦合性\",{\"1\":{\"4595\":1}}],[\"降低了配置书写量\",{\"1\":{\"857\":1}}],[\"慎用\",{\"1\":{\"10299\":1}}],[\"慎用this充当同步监视器\",{\"1\":{\"5320\":1}}],[\"校对规则允许用户为字符串比较指定特定于语言的规则\",{\"1\":{\"10285\":1}}],[\"平台选linux\",{\"1\":{\"10154\":1}}],[\"平均的\",{\"0\":{\"8390\":1}}],[\"平均响应时长\",{\"1\":{\"877\":1}}],[\"举例\",{\"1\":{\"10087\":1}}],[\"嵌入文档\",{\"1\":{\"10071\":1}}],[\"嵌套集合\",{\"1\":{\"7646\":1,\"7661\":1}}],[\"嵌套的泛型成为了数据类型\",{\"1\":{\"5970\":1}}],[\"嵌套锁\",{\"0\":{\"5425\":1}}],[\"嵌套循环\",{\"0\":{\"3445\":1}}],[\"嵌套循环中的使用\",{\"0\":{\"3430\":1},\"1\":{\"3436\":1}}],[\"嵌套\",{\"1\":{\"3350\":1}}],[\"ﬁeld\",{\"1\":{\"10064\":1,\"10078\":1}}],[\"术语对比\",{\"1\":{\"10050\":1}}],[\"云服务一般采用以mongodb为核心的数据库架构\",{\"1\":{\"10046\":1}}],[\"云服务兴起\",{\"1\":{\"10046\":1}}],[\"物联网场景\",{\"1\":{\"10037\":1}}],[\"物流场景\",{\"1\":{\"10036\":1}}],[\"物理连接初始化的时候执行的sql\",{\"1\":{\"8315\":1}}],[\"地理空间索引\",{\"1\":{\"10371\":1}}],[\"地点等功能\",{\"1\":{\"10034\":1}}],[\"地址栏发生变化\",{\"1\":{\"9156\":1}}],[\"地址和发送方机器上的端口号\",{\"1\":{\"6850\":1}}],[\"地址和远程主机的端口号\",{\"1\":{\"6849\":1}}],[\"地址由内核选择\",{\"1\":{\"6847\":1}}],[\"地址由内核来选择\",{\"1\":{\"6846\":1}}],[\"地址为\",{\"1\":{\"6847\":1}}],[\"地址或端口号构造\",{\"1\":{\"6790\":1}}],[\"地址的指定端口号\",{\"1\":{\"6768\":1}}],[\"地址的组合得出一个网络套接字\",{\"1\":{\"6687\":1}}],[\"地址不同\",{\"1\":{\"4227\":2}}],[\"地址值\",{\"1\":{\"3573\":1,\"4649\":1}}],[\"地址示例\",{\"1\":{\"2858\":1}}],[\"地址id\",{\"1\":{\"1352\":1}}],[\"地址管理\",{\"1\":{\"1348\":1,\"1405\":1}}],[\"地址表\",{\"0\":{\"1347\":1},\"1\":{\"1326\":1}}],[\"地址\",{\"1\":{\"329\":1,\"6692\":1,\"6776\":1,\"6859\":1,\"6917\":2,\"7016\":1,\"8458\":1}}],[\"社交场景\",{\"1\":{\"10034\":1}}],[\"适合\",{\"1\":{\"10033\":1}}],[\"适用于文本文件\",{\"1\":{\"6160\":1}}],[\"适用于类\",{\"1\":{\"2943\":1}}],[\"适用于localdate\",{\"1\":{\"1717\":1}}],[\"灵活的文档模型\",{\"1\":{\"10024\":1}}],[\"丰富查询支持\",{\"1\":{\"10023\":1}}],[\"倒排列表记载了出现过某个单词的所有文档的文档列表及单词在该文档中出现的位置信息\",{\"1\":{\"9973\":1}}],[\"倒排列表\",{\"1\":{\"9972\":1,\"9973\":1,\"9984\":1,\"9999\":1}}],[\"倒排文件是存储倒排索引的物理文件\",{\"1\":{\"9974\":1}}],[\"倒排文件\",{\"1\":{\"9971\":1,\"9974\":1}}],[\"倒排索引的简单实现示例\",{\"0\":{\"9976\":1}}],[\"倒排索引的结构\",{\"0\":{\"9966\":1}}],[\"倒排索引主要由两个部分组成\",{\"1\":{\"9971\":1}}],[\"倒排索引具体机构如下\",{\"1\":{\"9967\":1}}],[\"倒排索引是实现\",{\"1\":{\"9965\":1}}],[\"倒排索引\",{\"0\":{\"9963\":1},\"1\":{\"9959\":1,\"9965\":1,\"9967\":1}}],[\"签名文件\",{\"1\":{\"9962\":1}}],[\"矩阵的具体数据结构\",{\"1\":{\"9955\":1}}],[\"矩阵解读\",{\"0\":{\"9951\":1}}],[\"纵向\",{\"1\":{\"9953\":1}}],[\"横向\",{\"1\":{\"9952\":1}}],[\"星舰\",{\"1\":{\"9948\":1,\"9992\":1,\"10007\":1}}],[\"星舰下个月发射\",{\"1\":{\"9936\":1,\"9979\":1}}],[\"星期天\",{\"1\":{\"4820\":1}}],[\"星期一\",{\"1\":{\"4820\":1}}],[\"星期\",{\"1\":{\"4820\":1}}],[\"星期日用0表示\",{\"1\":{\"3373\":1}}],[\"星期四\",{\"1\":{\"1714\":1}}],[\"马斯克\",{\"1\":{\"9942\":1,\"9952\":1,\"9986\":1,\"10001\":1}}],[\"马斯克说将亲自指挥星舰的发射\",{\"1\":{\"9937\":1,\"9980\":1}}],[\"马斯克创建了spacex\",{\"1\":{\"9935\":1,\"9978\":1}}],[\"马化腾\",{\"1\":{\"7685\":1,\"7688\":1}}],[\"失败\",{\"1\":{\"9900\":1}}],[\"失去了移植性\",{\"1\":{\"7854\":1,\"7856\":1}}],[\"失去了面向过程\",{\"1\":{\"7398\":1}}],[\"插件目录\",{\"1\":{\"9885\":1}}],[\"插入成功\",{\"1\":{\"10603\":1}}],[\"插入一条数据\",{\"1\":{\"10603\":1}}],[\"插入时指定了\",{\"1\":{\"10266\":1}}],[\"插入的数据没有指定\",{\"1\":{\"10257\":1}}],[\"插入当前日期使用\",{\"1\":{\"10256\":1}}],[\"插入\",{\"1\":{\"8355\":1,\"8357\":1}}],[\"插入数据成功后\",{\"1\":{\"10604\":1}}],[\"插入数据\",{\"1\":{\"8205\":1,\"8207\":1}}],[\"插入数据等操作\",{\"1\":{\"5529\":1}}],[\"插入blob类型\",{\"1\":{\"8081\":1}}],[\"插入blob类型的数据必须使用preparedstatement\",{\"1\":{\"8067\":1}}],[\"插入效果\",{\"1\":{\"6524\":1}}],[\"阿里\",{\"1\":{\"9848\":1}}],[\"阿里云短信服务\",{\"0\":{\"1171\":1}}],[\"亿条实时日志\",{\"1\":{\"9847\":1}}],[\"亿用户提供即时而精准的音乐搜索\",{\"1\":{\"9845\":1}}],[\"百度类的网站搜索\",{\"1\":{\"9852\":1}}],[\"百度\",{\"1\":{\"9846\":1}}],[\"维基百科\",{\"1\":{\"9844\":1}}],[\"搜索的过程是直接通过索引拿到关键字对应的文档id\",{\"1\":{\"9959\":1}}],[\"搜索的过程是遍历每一个文档\",{\"1\":{\"9956\":1}}],[\"搜索的数据对象是大量的非结构化的文本数据\",{\"1\":{\"9857\":1}}],[\"搜索引擎会把正向索引变为反向索引\",{\"1\":{\"9967\":1}}],[\"搜索引擎会扫描库中包含该关键字的所有文档\",{\"1\":{\"9925\":1}}],[\"搜索引擎会扫描索引库中的所有文档\",{\"1\":{\"9921\":1}}],[\"搜索引擎的索引单位是单词\",{\"1\":{\"9972\":1}}],[\"搜索引擎的索引其实就是实现\",{\"1\":{\"9955\":1}}],[\"搜索引擎的索引\",{\"0\":{\"9954\":1}}],[\"搜索\",{\"1\":{\"9843\":1}}],[\"搜索和分析海量数据\",{\"1\":{\"9828\":1}}],[\"市面上比较流行的是elasticsearch\",{\"1\":{\"9838\":1}}],[\"市级名称\",{\"1\":{\"1348\":1}}],[\"市级区划编号\",{\"1\":{\"1348\":1}}],[\"级别数据存储\",{\"1\":{\"10042\":1}}],[\"级别的数据\",{\"1\":{\"9835\":1}}],[\"级别指的是优先级\",{\"1\":{\"788\":1}}],[\"库与集合\",{\"0\":{\"10200\":1}}],[\"库\",{\"1\":{\"9815\":2}}],[\"记住我功能\",{\"1\":{\"9801\":1}}],[\"记录了所有的文件的扩展名和和mime类型的对应关系\",{\"1\":{\"9231\":1}}],[\"记录指针与相关方法\",{\"0\":{\"6494\":1}}],[\"记录每次读入到cbuf数组中的字符的个数\",{\"1\":{\"6287\":1}}],[\"记录质数的个数\",{\"1\":{\"3457\":1}}],[\"记录个数\",{\"1\":{\"3420\":1}}],[\"记录总和\",{\"1\":{\"3420\":1}}],[\"记录负数的个数\",{\"1\":{\"3414\":1}}],[\"记录正数的个数\",{\"1\":{\"3414\":1}}],[\"记录错误堆栈信息\",{\"1\":{\"897\":1}}],[\"记录运维过程报警数据\",{\"1\":{\"896\":1}}],[\"记录运维过程数据\",{\"1\":{\"879\":1,\"895\":1}}],[\"记录应用报错信息\",{\"1\":{\"878\":1}}],[\"记录日常运营重要信息\",{\"1\":{\"877\":1}}],[\"记录日志\",{\"0\":{\"873\":1},\"1\":{\"882\":1,\"1290\":1}}],[\"长期存储\",{\"1\":{\"9796\":1}}],[\"长度为n的数组合法下标取值范围\",{\"1\":{\"3505\":1}}],[\"长度无限制\",{\"1\":{\"3063\":1}}],[\"长度\",{\"1\":{\"921\":1,\"6861\":1}}],[\"张三\",{\"1\":{\"9726\":1}}],[\"张学良\",{\"1\":{\"6571\":1}}],[\"细化cookie的适用范围\",{\"1\":{\"9709\":1}}],[\"细节补充\",{\"0\":{\"3305\":1}}],[\"绑定数据\",{\"1\":{\"9674\":1}}],[\"约束自定义的studenttyep类型\",{\"1\":{\"9642\":1}}],[\"约束自定义的studentstype类型\",{\"1\":{\"9642\":1}}],[\"约束文档的技术实现\",{\"0\":{\"9625\":1}}],[\"约束\",{\"0\":{\"9621\":1}}],[\"约定\",{\"1\":{\"6107\":1}}],[\"约定俗称\",{\"1\":{\"4043\":1}}],[\"职责单一\",{\"1\":{\"9551\":1}}],[\"展示数据\",{\"1\":{\"9542\":1}}],[\"界面展示\",{\"1\":{\"9541\":1}}],[\"绿色的\",{\"1\":{\"9506\":1}}],[\"绿色启动按钮启动\",{\"1\":{\"8620\":1}}],[\"积分等直接以内嵌文档的形式存储\",{\"1\":{\"10035\":1}}],[\"积累jar包的过程也会考验代码的重构能力和模块的抽象能力\",{\"1\":{\"9489\":1}}],[\"积攒一波sql然后集中的去连接服务器执行\",{\"1\":{\"8116\":1}}],[\"积攒sql语句\",{\"0\":{\"8094\":1}}],[\"逐渐积累一些通用的util类\",{\"1\":{\"9489\":1}}],[\"英语\",{\"1\":{\"9468\":1}}],[\"英文字母只用一个字节表示就够了\",{\"1\":{\"6426\":1}}],[\"浪费时间\",{\"1\":{\"9464\":1}}],[\"浪费资源\",{\"1\":{\"6953\":1}}],[\"立即采取相应的行动\",{\"1\":{\"9321\":1}}],[\"异步访问资源\",{\"1\":{\"9294\":1}}],[\"异步\",{\"1\":{\"9294\":1}}],[\"异常列表\",{\"1\":{\"7105\":1}}],[\"异常说明\",{\"1\":{\"7055\":1}}],[\"异常类不能是泛型\",{\"1\":{\"6011\":1}}],[\"异常类型\",{\"1\":{\"4771\":1}}],[\"异常类型的选择\",{\"0\":{\"4730\":1}}],[\"异常类型3\",{\"1\":{\"4727\":1}}],[\"异常类型2\",{\"1\":{\"4727\":1}}],[\"异常类型1\",{\"1\":{\"4727\":1}}],[\"异常是抛给调用者看的\",{\"1\":{\"4794\":1}}],[\"异常又被抛出去了\",{\"1\":{\"4777\":1}}],[\"异常代码后续的代码\",{\"1\":{\"4771\":1}}],[\"异常信息\",{\"1\":{\"4740\":1,\"4800\":2}}],[\"异常体系结构\",{\"0\":{\"4695\":1}}],[\"异常对象的产生\",{\"0\":{\"4689\":1}}],[\"异常并没有被解决\",{\"1\":{\"4680\":1}}],[\"异常分类\",{\"0\":{\"4665\":1,\"4696\":1}}],[\"异常概述\",{\"0\":{\"4662\":1}}],[\"异常的抛出机制\",{\"0\":{\"4772\":1}}],[\"异常的嵌套\",{\"0\":{\"4754\":1}}],[\"异常的处理只是为了保证代码的正常运行\",{\"1\":{\"4679\":1}}],[\"异常的类型和异常的描述\",{\"1\":{\"2971\":1}}],[\"异常的统一处理\",{\"0\":{\"1287\":1}}],[\"异常\",{\"0\":{\"4053\":1,\"4671\":1},\"1\":{\"2080\":1,\"2086\":1,\"2097\":1,\"2140\":1,\"2978\":1,\"4664\":1,\"4698\":1,\"4753\":2,\"6303\":1}}],[\"异常专用构造方法\",{\"1\":{\"1296\":1}}],[\"异常处理线程\",{\"1\":{\"5092\":1}}],[\"异常处理总结\",{\"0\":{\"4692\":1}}],[\"异常处理的抓抛模型\",{\"0\":{\"4686\":1}}],[\"异常处理的意义\",{\"0\":{\"4678\":1}}],[\"异常处理机制\",{\"0\":{\"4682\":1}}],[\"异常处理只是为了跟用户友好的交互\",{\"1\":{\"4681\":1}}],[\"异常处理\",{\"0\":{\"4675\":1,\"6282\":1,\"10882\":1},\"1\":{\"1295\":1,\"6378\":1,\"6483\":1,\"6487\":1,\"6555\":1,\"6557\":1,\"6571\":1,\"6573\":1,\"6884\":1}}],[\"足有4千行代码记录对照关系\",{\"1\":{\"9232\":1}}],[\"域\",{\"1\":{\"10065\":1}}],[\"域的范围\",{\"0\":{\"9241\":1}}],[\"域对象的属性域监听器\",{\"1\":{\"9327\":1}}],[\"域对象监听器\",{\"1\":{\"9326\":1}}],[\"域对象都有相同的三个方法\",{\"1\":{\"9240\":1}}],[\"域对象共有的方法\",{\"0\":{\"9206\":1}}],[\"域对象就是一个有作用范围的对象\",{\"1\":{\"9178\":1}}],[\"域对象\",{\"0\":{\"9175\":1,\"9176\":1},\"1\":{\"9115\":1,\"9216\":1}}],[\"域名或localhost\",{\"1\":{\"8458\":1}}],[\"域名服务器\",{\"1\":{\"6677\":1}}],[\"域名需要进行解析才能与ip地址对应\",{\"1\":{\"6676\":1}}],[\"域名\",{\"0\":{\"6675\":1},\"1\":{\"6691\":1,\"9708\":1}}],[\"爬山\",{\"1\":{\"9025\":1}}],[\"游戏场景\",{\"1\":{\"10035\":1}}],[\"游泳\",{\"1\":{\"9025\":1}}],[\"游标\",{\"0\":{\"5580\":1}}],[\"体系结构\",{\"0\":{\"8785\":1}}],[\"体现了linkedlist的双向链表的说法\",{\"1\":{\"5671\":1}}],[\"体现了现实世界中\",{\"1\":{\"4482\":1}}],[\"体现多态性\",{\"1\":{\"4511\":1}}],[\"体现类及类的内部结构在被调用时的可见性的大小\",{\"1\":{\"3832\":1}}],[\"销毁方法\",{\"0\":{\"8773\":1}}],[\"阶段4\",{\"0\":{\"8760\":1}}],[\"阶段3\",{\"0\":{\"8758\":1}}],[\"阶段2\",{\"0\":{\"8756\":1}}],[\"阶段1\",{\"0\":{\"8746\":1}}],[\"观察者\",{\"1\":{\"9318\":1,\"9319\":1}}],[\"观察者模式\",{\"0\":{\"9316\":1}}],[\"观察可知\",{\"1\":{\"8772\":1}}],[\"观察启动后的命令行\",{\"1\":{\"8712\":1}}],[\"观察访问结果\",{\"1\":{\"8695\":1}}],[\"观察该文件\",{\"1\":{\"396\":1}}],[\"测设\",{\"1\":{\"8695\":1}}],[\"测试的时候要注意\",{\"1\":{\"9779\":1}}],[\"测试的步骤\",{\"0\":{\"658\":1}}],[\"测试二\",{\"1\":{\"8391\":1}}],[\"测试一\",{\"1\":{\"8391\":1}}],[\"测试特殊查询\",{\"1\":{\"8210\":2}}],[\"测试多行数据查询\",{\"1\":{\"8210\":1}}],[\"测试单行数据查询\",{\"1\":{\"8210\":1}}],[\"测试更新\",{\"1\":{\"8210\":1}}],[\"测试删除\",{\"1\":{\"8210\":1}}],[\"测试添加\",{\"1\":{\"8210\":1}}],[\"测试是否断开\",{\"1\":{\"6753\":1}}],[\"测试是否可以达到该地址\",{\"0\":{\"6709\":1}}],[\"测试super\",{\"1\":{\"6094\":1}}],[\"测试extends\",{\"1\":{\"6094\":1}}],[\"测试\",{\"0\":{\"4844\":1,\"8711\":1,\"9146\":1}}],[\"测试用\",{\"1\":{\"4843\":1}}],[\"测试此字符串是否以指定潜在开始\",{\"1\":{\"1454\":1}}],[\"测试此字符串是否以指定的后缀结束\",{\"1\":{\"1451\":1}}],[\"测试接口\",{\"0\":{\"1280\":1}}],[\"测试数据表\",{\"0\":{\"8103\":1}}],[\"测试数据源\",{\"1\":{\"7613\":1,\"7629\":1}}],[\"测试数据abcdefg\",{\"1\":{\"1224\":1}}],[\"测试数据123\",{\"1\":{\"1224\":5}}],[\"测试依赖\",{\"0\":{\"1133\":1}}],[\"测试api\",{\"0\":{\"676\":1}}],[\"测试代码\",{\"1\":{\"656\":1}}],[\"测试类将无法运行\",{\"1\":{\"665\":1}}],[\"测试类默认的位置和引导类是对应的\",{\"1\":{\"665\":1}}],[\"测试类的目录规划\",{\"0\":{\"664\":1}}],[\"测试类\",{\"0\":{\"654\":1,\"1223\":1}}],[\"测试使用容器\",{\"1\":{\"429\":1}}],[\"测试目录\",{\"1\":{\"339\":1}}],[\"测试环境\",{\"1\":{\"118\":1,\"822\":1}}],[\"测试工程师\",{\"1\":{\"114\":1}}],[\"号后面的键值对\",{\"1\":{\"8940\":1}}],[\"号\",{\"1\":{\"8610\":1}}],[\"号通配符回车确认添加\",{\"1\":{\"356\":1}}],[\"填写项目名称\",{\"1\":{\"8549\":1,\"8561\":1}}],[\"填充占位符\",{\"0\":{\"7953\":1},\"1\":{\"7970\":1,\"7980\":1,\"7989\":1,\"8146\":1,\"8201\":1}}],[\"填充因子\",{\"1\":{\"5894\":1,\"5895\":1}}],[\"弹出框中选择需要运行程序入口main函数\",{\"1\":{\"9511\":1}}],[\"弹出如下窗口\",{\"1\":{\"8526\":1}}],[\"弹出命令行窗口\",{\"1\":{\"2333\":1,\"2790\":1}}],[\"配合nginx代理\",{\"0\":{\"8484\":1}}],[\"配置目录\",{\"1\":{\"9880\":1}}],[\"配置多个值\",{\"0\":{\"9296\":1}}],[\"配置多个tomcat\",{\"0\":{\"8606\":1}}],[\"配置拦截路径\",{\"0\":{\"9280\":1}}],[\"配置的是服务器内网ip\",{\"1\":{\"10162\":1}}],[\"配置的是\",{\"1\":{\"8944\":1}}],[\"配置的路径和访问的路径是一样的\",{\"1\":{\"8841\":1}}],[\"配置的url\",{\"1\":{\"8772\":1}}],[\"配置该servlet的访问路径\",{\"1\":{\"8706\":1}}],[\"配置路由用的是\",{\"1\":{\"8831\":1}}],[\"配置路由\",{\"0\":{\"8705\":1},\"1\":{\"8692\":1}}],[\"配置好tomcat和servlet\",{\"1\":{\"8689\":1}}],[\"配置tomcat服务器软件的目录\",{\"1\":{\"8592\":1}}],[\"配置tomcat模板\",{\"0\":{\"8612\":1},\"1\":{\"8573\":1}}],[\"配置tomcat\",{\"0\":{\"8571\":1}}],[\"配置输出文件的目录\",{\"1\":{\"8543\":1}}],[\"配置artifacts\",{\"0\":{\"8541\":1,\"8637\":1}}],[\"配置了maxwait之后\",{\"1\":{\"8291\":1}}],[\"配置了也没效果\",{\"1\":{\"8287\":1}}],[\"配置这个属性的意义在于\",{\"1\":{\"8270\":1}}],[\"配置项如下\",{\"1\":{\"8265\":1,\"8579\":1}}],[\"配置项\",{\"0\":{\"8264\":1,\"8835\":1}}],[\"配置项是k\",{\"1\":{\"462\":1}}],[\"配置idea\",{\"0\":{\"7321\":1}}],[\"配置idea和git\",{\"0\":{\"1061\":1}}],[\"配置成最新的java版本环境变量即可\",{\"1\":{\"7320\":1}}],[\"配置参数值\",{\"1\":{\"4940\":1}}],[\"配置参数的类型\",{\"0\":{\"4929\":1}}],[\"配置参数\",{\"0\":{\"4926\":1}}],[\"配置参数名=\",{\"1\":{\"4940\":1}}],[\"配置参数名\",{\"1\":{\"4916\":1}}],[\"配置参数类型\",{\"1\":{\"4916\":1}}],[\"配置java\",{\"0\":{\"2862\":1}}],[\"配置端口号\",{\"1\":{\"1205\":1}}],[\"配置代码模板\",{\"1\":{\"1114\":1}}],[\"配置数据源\",{\"1\":{\"1112\":1}}],[\"配置swagger\",{\"1\":{\"1109\":1}}],[\"配置\",{\"0\":{\"1081\":1,\"1225\":1,\"10160\":1},\"1\":{\"1119\":1,\"8266\":1,\"8661\":1}}],[\"配置连接信息\",{\"0\":{\"979\":1,\"1006\":1}}],[\"配置连接池\",{\"0\":{\"968\":1}}],[\"配置格式变量\",{\"1\":{\"952\":1}}],[\"配置logback日志\",{\"0\":{\"946\":1}}],[\"配置日志格式\",{\"1\":{\"913\":1}}],[\"配置方式一样\",{\"1\":{\"8614\":1}}],[\"配置方式\",{\"0\":{\"807\":1}}],[\"配置很重要\",{\"1\":{\"639\":1}}],[\"配置类\",{\"1\":{\"609\":1}}],[\"配置类统一管理\",{\"0\":{\"608\":1}}],[\"配置yml\",{\"0\":{\"478\":1,\"1093\":1}}],[\"配置文件中添加选项\",{\"1\":{\"10642\":1}}],[\"配置文件中的一些路径出现问题\",{\"1\":{\"10865\":1}}],[\"配置文件中的属性值\",{\"1\":{\"637\":1}}],[\"配置文件中的属性\",{\"1\":{\"627\":1}}],[\"配置文件中的servers\",{\"1\":{\"620\":1}}],[\"配置文件中的命名格式与变量名的命名格式可以进行格式上的最大化兼容\",{\"1\":{\"616\":1}}],[\"配置文件中的哪个配置项\",{\"1\":{\"519\":1,\"589\":1,\"590\":1}}],[\"配置文件的内容如下\",{\"1\":{\"10161\":1}}],[\"配置文件的级别\",{\"0\":{\"787\":1}}],[\"配置文件地址\",{\"1\":{\"8617\":1}}],[\"配置文件声明在工程的src目录下\",{\"1\":{\"7869\":1}}],[\"配置文件默认识别为\",{\"1\":{\"7049\":1}}],[\"配置文件后缀改为yml\",{\"1\":{\"1203\":1}}],[\"配置文件如果发生改变\",{\"1\":{\"952\":1}}],[\"配置文件内容\",{\"0\":{\"951\":1}}],[\"配置文件控制日志格式\",{\"0\":{\"912\":1}}],[\"配置文件设置日志等级\",{\"0\":{\"902\":1}}],[\"配置文件设计\",{\"0\":{\"760\":1},\"1\":{\"82\":1}}],[\"配置文件名默认为\",{\"1\":{\"803\":1}}],[\"配置文件分类\",{\"0\":{\"785\":1}}],[\"配置文件已经设置好了\",{\"1\":{\"673\":1}}],[\"配置文件层级过多可能会导致相符覆盖最终引起配置失效\",{\"1\":{\"583\":1}}],[\"配置文件等\",{\"1\":{\"542\":1}}],[\"配置文件\",{\"0\":{\"1204\":1,\"7868\":1,\"8261\":1,\"8615\":1},\"1\":{\"540\":1,\"616\":1,\"723\":1,\"732\":1,\"9624\":1,\"10159\":1,\"10476\":1,\"10492\":1}}],[\"配置文件没有小叶子的图标\",{\"1\":{\"474\":1}}],[\"配置文件介绍\",{\"0\":{\"451\":1}}],[\"配置完后重启idea\",{\"1\":{\"1079\":1}}],[\"配置完后\",{\"1\":{\"325\":1}}],[\"配置工程\",{\"0\":{\"316\":1,\"1088\":1}}],[\"窗口一闪而过\",{\"0\":{\"8453\":1}}],[\"条记录\",{\"1\":{\"8381\":1,\"8383\":1}}],[\"条件连接查询\",{\"0\":{\"10355\":1}}],[\"条件\",{\"1\":{\"10302\":1,\"10357\":6}}],[\"条件表达式必须是布尔表达式\",{\"1\":{\"3357\":1}}],[\"条件表达式\",{\"1\":{\"3344\":1,\"3346\":1,\"3348\":3}}],[\"条件表达式的结果为boolean类型\",{\"1\":{\"3314\":1}}],[\"条件判断\",{\"1\":{\"3342\":1}}],[\"条件查询\",{\"0\":{\"1242\":1}}],[\"何成飞\",{\"1\":{\"8381\":1}}],[\"何时需要多线程\",{\"0\":{\"5105\":1}}],[\"申请连接的时候检测\",{\"1\":{\"8308\":1}}],[\"申请连接时执行validationquery检测连接是否有效\",{\"1\":{\"8302\":1}}],[\"德鲁伊\",{\"0\":{\"8252\":1}}],[\"归还连接时执行validationquery检测连接是否有效\",{\"1\":{\"8305\":1}}],[\"归还给了数据库连接池\",{\"1\":{\"8251\":1}}],[\"归约与收集\",{\"0\":{\"7702\":1}}],[\"归约\",{\"0\":{\"7703\":1},\"1\":{\"7609\":1}}],[\"据说是集dbcp\",{\"1\":{\"8247\":1}}],[\"稳定性较c3p0差一点\",{\"1\":{\"8245\":1}}],[\"稳定性还可以\",{\"1\":{\"8244\":1}}],[\"避免数据库连接泄漏\",{\"1\":{\"8240\":1}}],[\"避免某一应用独占所有的数据库资源\",{\"1\":{\"8239\":1}}],[\"避免了数据库连接初始化和释放过程的时间开销\",{\"1\":{\"8238\":1}}],[\"避免了频繁创建\",{\"1\":{\"8237\":1}}],[\"避免方法重载冲突\",{\"1\":{\"3806\":1}}],[\"严重的甚至会造成服务器的崩溃\",{\"1\":{\"8221\":1}}],[\"严重落后现有版本\",{\"1\":{\"260\":1,\"269\":1}}],[\"频繁的进行数据库连接操作将占用很多的系统资源\",{\"1\":{\"8221\":1}}],[\"频繁的哈希冲突会降低数据存取的效率\",{\"1\":{\"5768\":1}}],[\"得花费0\",{\"1\":{\"8219\":1}}],[\"得到class文件\",{\"1\":{\"9498\":1}}],[\"得到一个值\",{\"1\":{\"7704\":1}}],[\"得到一个用户年龄流\",{\"1\":{\"7633\":1}}],[\"得到被代理类实现的全部接口\",{\"1\":{\"7260\":1}}],[\"得到在entry数组中的存放位置\",{\"1\":{\"5858\":1}}],[\"得到注解信息\",{\"1\":{\"4895\":1}}],[\"得到了目标类的class实例\",{\"1\":{\"2144\":1}}],[\"得到的结果可能不一样\",{\"1\":{\"8402\":1}}],[\"得到的结果都是一样的\",{\"1\":{\"8400\":1}}],[\"得到的是一个内存地址值\",{\"1\":{\"3562\":1}}],[\"得到的\",{\"1\":{\"1511\":1}}],[\"贝多芬\",{\"1\":{\"8210\":1}}],[\"于小飞\",{\"1\":{\"8210\":1}}],[\"于是只能等待\",{\"1\":{\"5430\":1}}],[\"于是进入了确认支付环节\",{\"1\":{\"5300\":1}}],[\"于是人们想出了将符号位也参与运算的方法\",{\"1\":{\"3191\":1}}],[\"额外多关闭一个查询结果集资源\",{\"1\":{\"8199\":1}}],[\"额外还需要一个查询结果的储存类\",{\"1\":{\"8174\":1}}],[\"恢复每次dml操作的自动提交功能\",{\"1\":{\"8148\":1}}],[\"批处理\",{\"1\":{\"8360\":1}}],[\"批处理+手动提交\",{\"0\":{\"8122\":1}}],[\"批量更新\",{\"0\":{\"10291\":1}}],[\"批量插入两条文章评论\",{\"1\":{\"10263\":1}}],[\"批量插入\",{\"0\":{\"10260\":1},\"1\":{\"8091\":1}}],[\"批量insert\",{\"1\":{\"8091\":1}}],[\"批量操作\",{\"0\":{\"8090\":1}}],[\"攒\",{\"1\":{\"8121\":1,\"8126\":1}}],[\"袁浩\",{\"1\":{\"8084\":1}}],[\"别人可以选择不加\",{\"1\":{\"10643\":1}}],[\"别名\",{\"1\":{\"8050\":1}}],[\"别忘记关闭锁\",{\"1\":{\"5400\":1}}],[\"周杰伦\",{\"1\":{\"8047\":1}}],[\"周末是双休的\",{\"1\":{\"3373\":1}}],[\"莫扎特\",{\"1\":{\"7980\":1}}],[\"⑦关闭资源\",{\"1\":{\"7941\":1}}],[\"⑥注释\",{\"1\":{\"9620\":1}}],[\"⑥执行操作\",{\"1\":{\"7938\":1}}],[\"⑥获取callable中call方法的返回值\",{\"1\":{\"5484\":1}}],[\"繁琐\",{\"0\":{\"7888\":1}}],[\"弊端\",{\"1\":{\"7854\":1}}],[\"驱动\",{\"0\":{\"8332\":1}}],[\"驱动注册可以省略\",{\"1\":{\"7865\":1}}],[\"驱动会自动注册的\",{\"1\":{\"7864\":1}}],[\"驱动文件介绍\",{\"0\":{\"7821\":1}}],[\"驱动介绍\",{\"0\":{\"7815\":1}}],[\"固化\",{\"1\":{\"7788\":1}}],[\"固定部分\",{\"1\":{\"938\":1}}],[\"持久化存储\",{\"1\":{\"9719\":1}}],[\"持久化的主要应用是将内存中的数据存储在关系型数据库中\",{\"1\":{\"7790\":1}}],[\"持久化\",{\"1\":{\"7788\":1}}],[\"持续\",{\"1\":{\"6861\":1}}],[\"钻石操作符<>的增强\",{\"0\":{\"7781\":1}}],[\"受到google\",{\"1\":{\"7734\":1}}],[\"臭名昭著的空指针异常是导致java应用程序失败的最常见原因\",{\"1\":{\"7734\":1}}],[\"ⅷ\",{\"0\":{\"7702\":1}}],[\"扎克伯格\",{\"1\":{\"7697\":1}}],[\"检索程序就根据事先建立的索引进行查找\",{\"1\":{\"9866\":1}}],[\"检索数据\",{\"1\":{\"9835\":1}}],[\"检索指定列的数据库特定的类型名称\",{\"1\":{\"8024\":1}}],[\"检查java\",{\"1\":{\"8455\":1}}],[\"检查是否没有匹配任何元素\",{\"0\":{\"7681\":1}}],[\"检查是否至少匹配一个元素\",{\"0\":{\"7679\":1}}],[\"检查是否匹配所有元素\",{\"0\":{\"7675\":1}}],[\"检测与比较\",{\"0\":{\"1439\":1}}],[\"班级集合内的元素才是学生对象\",{\"1\":{\"7661\":1}}],[\"班级本身是学生数据集合\",{\"1\":{\"7655\":1}}],[\"素材\",{\"0\":{\"7652\":1}}],[\"素数生成\",{\"1\":{\"1867\":1}}],[\"做session共享\",{\"1\":{\"10122\":1}}],[\"做什么\",{\"1\":{\"8600\":1}}],[\"做出响应\",{\"1\":{\"8396\":1}}],[\"做了这个配置会降低性能\",{\"1\":{\"8302\":1,\"8305\":1}}],[\"做同样的方法体操作\",{\"1\":{\"7632\":1}}],[\"做日志可视化处理\",{\"1\":{\"925\":1}}],[\"跳过元素\",{\"1\":{\"7625\":1}}],[\"跳过\",{\"0\":{\"7624\":1}}],[\"跳出当前循环\",{\"1\":{\"3429\":1}}],[\"跳出循环\",{\"1\":{\"3414\":1}}],[\"收入\",{\"1\":{\"7613\":1,\"7629\":1}}],[\"收集\",{\"0\":{\"7717\":1},\"1\":{\"7610\":1}}],[\"收货人\",{\"1\":{\"1348\":1}}],[\"匹配模式\",{\"0\":{\"8838\":1}}],[\"匹配与查找\",{\"0\":{\"7674\":1},\"1\":{\"7608\":1}}],[\"匹配器\",{\"1\":{\"2710\":1}}],[\"甚至是\",{\"1\":{\"7604\":1}}],[\"甚至代码可以被引进\",{\"1\":{\"6924\":1}}],[\"惰性求值\",{\"1\":{\"7598\":1}}],[\"终极方案\",{\"0\":{\"8122\":1}}],[\"终端操作\",{\"1\":{\"7558\":1}}],[\"终止操作的方法\",{\"0\":{\"7607\":1}}],[\"终止操作会从流的流水线生成结果\",{\"1\":{\"7604\":1}}],[\"终止操作说明\",{\"0\":{\"7603\":1}}],[\"终止操作\",{\"1\":{\"7558\":1}}],[\"讲的是计算\",{\"1\":{\"7552\":1}}],[\"筛选工资>7000的员工\",{\"1\":{\"7616\":1}}],[\"筛选与切片\",{\"0\":{\"7611\":1},\"1\":{\"7600\":1}}],[\"筛选\",{\"0\":{\"7614\":1},\"1\":{\"7541\":1}}],[\"满足条件\",{\"1\":{\"7467\":1}}],[\"替代接口中的方法\",{\"1\":{\"7452\":1}}],[\"替换为直接引用\",{\"1\":{\"7016\":1}}],[\"替换结束为主的index\",{\"1\":{\"1593\":1}}],[\"替换其实位置的index\",{\"1\":{\"1592\":1}}],[\"替换此字符串匹配给定的正则表达式的第一个子字符串\",{\"1\":{\"1520\":1}}],[\"替换此字符串所有匹配给定的正则表达式的子字符串\",{\"1\":{\"1517\":1}}],[\"替换此字符串中出现的所有\",{\"1\":{\"1511\":1}}],[\"替换手动下载的maven\",{\"1\":{\"1068\":1}}],[\"替换别的服务器\",{\"0\":{\"448\":1}}],[\"寻找或定义一个参数符合的接口\",{\"1\":{\"7407\":1}}],[\"箭头函数\",{\"1\":{\"7333\":1}}],[\"着java的更新从传统的以特性驱动的发布周期\",{\"1\":{\"7312\":1}}],[\"清洗工厂等\",{\"1\":{\"7223\":1}}],[\"清空\",{\"1\":{\"8121\":1}}],[\"清空缓存的数据\",{\"1\":{\"8101\":1}}],[\"清空batch\",{\"0\":{\"8100\":1},\"1\":{\"8126\":1}}],[\"清空当前map中的所有数据\",{\"1\":{\"2597\":1}}],[\"清空集合\",{\"1\":{\"2597\":1}}],[\"清空集合元素\",{\"1\":{\"2412\":1}}],[\"清空购物车\",{\"1\":{\"1407\":1}}],[\"链接数据库后\",{\"1\":{\"7203\":1}}],[\"链表的产生\",{\"0\":{\"5865\":1}}],[\"链表的形式\",{\"0\":{\"5743\":1}}],[\"既然运行时类已经加载到了内存中\",{\"1\":{\"7067\":1}}],[\"既可以使用get方法访问\",{\"1\":{\"8999\":1}}],[\"既可以作为一个输入流\",{\"1\":{\"6489\":1}}],[\"既可以调用非静态的方法或属性\",{\"1\":{\"4400\":1}}],[\"既可以比较基本类型也可以比较引用类型\",{\"1\":{\"4243\":1}}],[\"既可以取常量名\",{\"1\":{\"1909\":1}}],[\"验证通过\",{\"1\":{\"10734\":1}}],[\"验证通过时\",{\"1\":{\"5303\":1}}],[\"验证码\",{\"1\":{\"9802\":1}}],[\"验证\",{\"1\":{\"7014\":1}}],[\"唯有先获得相应的class对象\",{\"1\":{\"6980\":1}}],[\"唯一的区别就是在\",{\"1\":{\"9473\":1}}],[\"唯一的区别是判断jvm何时离开\",{\"1\":{\"5151\":1}}],[\"唯一的标识\",{\"1\":{\"6663\":1}}],[\"器\",{\"1\":{\"6943\":1}}],[\"透过这个镜子看到类的结构\",{\"1\":{\"6930\":1}}],[\"乱序以及网络拥挤等问题\",{\"1\":{\"6918\":1}}],[\"乱码原因\",{\"0\":{\"9039\":1}}],[\"乱码问题\",{\"0\":{\"9032\":1}}],[\"乱码\",{\"1\":{\"3132\":1}}],[\"损坏\",{\"1\":{\"6918\":1}}],[\"片段名\",{\"1\":{\"6869\":1,\"6870\":1}}],[\"远程方法调用\",{\"1\":{\"7214\":1}}],[\"远程主机的ip\",{\"1\":{\"6849\":1}}],[\"远小于节点流\",{\"1\":{\"6360\":1}}],[\"建立的索引是否有效\",{\"1\":{\"10416\":1}}],[\"建立的索引是否唯一\",{\"1\":{\"10391\":1}}],[\"建立了索引\",{\"1\":{\"9854\":1}}],[\"建立数据包\",{\"1\":{\"6836\":1}}],[\"建立发送端\",{\"1\":{\"6835\":1}}],[\"建议使用url编码存储\",{\"1\":{\"9725\":1}}],[\"建议使用setproperty\",{\"1\":{\"5841\":1}}],[\"建议平时写代码时\",{\"1\":{\"9489\":1}}],[\"建议直接改成\",{\"1\":{\"8589\":1}}],[\"建议配置为true\",{\"1\":{\"8308\":1}}],[\"建议配置下\",{\"1\":{\"8278\":1}}],[\"建议\",{\"1\":{\"6001\":1,\"9612\":1}}],[\"建议开发中使用带参的构造器\",{\"1\":{\"5655\":1}}],[\"建议也根据提示安装jre\",{\"1\":{\"2854\":1}}],[\"建议用注解的方式加sql\",{\"1\":{\"1222\":1}}],[\"客户机是一个用户应用程序\",{\"1\":{\"6916\":1}}],[\"客户的套接字请求\",{\"1\":{\"6816\":1}}],[\"客户端会话技术\",{\"1\":{\"9672\":1}}],[\"客户端会话跟踪技术\",{\"1\":{\"9669\":1}}],[\"客户端发起请求\",{\"1\":{\"8876\":1}}],[\"客户端和服务器之间的每个通信会话使用一个不同的套接字\",{\"1\":{\"6916\":1}}],[\"客户端开始想服务端传输数据\",{\"1\":{\"6824\":1}}],[\"客户端通过服务端的ip和创建serversocket对象时指定的端口号\",{\"1\":{\"6813\":1}}],[\"客户端访问结束\",{\"1\":{\"6809\":1}}],[\"客户端程序可以使用socket类创建对象\",{\"1\":{\"6799\":1}}],[\"客户端创建socket对象\",{\"0\":{\"6798\":1}}],[\"客户端socket\",{\"0\":{\"6788\":1},\"1\":{\"6789\":1}}],[\"客户端\",{\"1\":{\"6733\":1,\"6744\":1,\"6750\":1,\"6753\":1,\"6916\":1}}],[\"客户端的其他配置\",{\"0\":{\"1049\":1}}],[\"监听某个对象在session中的序列化与反序列化\",{\"1\":{\"9433\":1}}],[\"监听某个对象在session域中的创建与移除\",{\"1\":{\"9416\":1}}],[\"监听httpsession中属性的创建\",{\"1\":{\"9378\":1}}],[\"监听httpsession对象的创建与销毁\",{\"1\":{\"9341\":1}}],[\"监听servletrequest中属性的创建\",{\"1\":{\"9397\":1}}],[\"监听servletrequest对象的创建与销毁\",{\"1\":{\"9350\":1}}],[\"监听servletcontext中属性的创建\",{\"1\":{\"9359\":1}}],[\"监听servletcontext对象的创建与销毁\",{\"1\":{\"9332\":1}}],[\"监听器是通过事件自动触发的\",{\"1\":{\"9458\":1}}],[\"监听器触发机制\",{\"0\":{\"9457\":1}}],[\"监听器的使用步骤\",{\"0\":{\"9443\":1}}],[\"监听器列表\",{\"0\":{\"9329\":1}}],[\"监听器分类\",{\"0\":{\"9324\":1}}],[\"监听器概念\",{\"0\":{\"9320\":1}}],[\"监听器采用的就是观察者模式\",{\"1\":{\"9317\":1}}],[\"监听器介绍\",{\"0\":{\"9315\":1}}],[\"监听接受客户端的请求\",{\"1\":{\"6819\":1}}],[\"监听连接请求\",{\"1\":{\"6807\":2}}],[\"监控统计用的filter\",{\"1\":{\"8319\":1}}],[\"监控的时候可以通过名字来区分开来\",{\"1\":{\"8270\":1}}],[\"监控开发的文件\",{\"1\":{\"536\":1}}],[\"监控\",{\"0\":{\"956\":1},\"1\":{\"85\":1,\"9318\":1}}],[\"速度稍慢\",{\"1\":{\"8413\":1}}],[\"速度相对较慢\",{\"1\":{\"8244\":1}}],[\"速度相对c3p0较快\",{\"1\":{\"8243\":1}}],[\"速度快\",{\"1\":{\"6742\":1,\"8246\":1,\"8414\":1}}],[\"速度很快\",{\"1\":{\"3470\":1}}],[\"点赞互动信息等\",{\"1\":{\"10038\":1}}],[\"点对点通信\",{\"1\":{\"6732\":1}}],[\"点击new\",{\"1\":{\"10189\":1}}],[\"点击next\",{\"1\":{\"8549\":1,\"8561\":1}}],[\"点击菜单中\",{\"1\":{\"9513\":1}}],[\"点击main\",{\"1\":{\"9510\":1}}],[\"点击module选项卡\",{\"1\":{\"8741\":1}}],[\"点击create\",{\"1\":{\"9509\":1}}],[\"点击项目\",{\"1\":{\"9505\":1}}],[\"点击+\",{\"1\":{\"8610\":1}}],[\"点击+号\",{\"1\":{\"8534\":1,\"8569\":1,\"8582\":1,\"8649\":1}}],[\"点击ok\",{\"1\":{\"8605\":1,\"9509\":1,\"9511\":1,\"9512\":1}}],[\"点击该选项卡\",{\"1\":{\"8581\":1}}],[\"点击右边的configure进行配置\",{\"1\":{\"8592\":1}}],[\"点击右边的choose\",{\"1\":{\"7834\":1}}],[\"点击右上角的springboot引导类的运行界面\",{\"1\":{\"775\":1}}],[\"点击点击首页时\",{\"1\":{\"4680\":1}}],[\"点击打开index\",{\"1\":{\"2982\":1}}],[\"点击enter键完成输入\",{\"1\":{\"2334\":1,\"2791\":1}}],[\"点击spring\",{\"1\":{\"411\":1}}],[\"点击parent的artifactid\",{\"1\":{\"393\":1}}],[\"点击\",{\"1\":{\"317\":1,\"325\":1,\"8543\":1,\"9506\":1,\"9888\":1}}],[\"须先建立tcp连接\",{\"1\":{\"6731\":1}}],[\"须重写hashcode\",{\"1\":{\"5800\":1}}],[\"协议可以解决数据在传送过程中的丢失\",{\"1\":{\"6918\":1}}],[\"协议网络程序\",{\"1\":{\"6828\":1}}],[\"协议是网络层的主要协议\",{\"1\":{\"6729\":1}}],[\"协议簇\",{\"0\":{\"6726\":1}}],[\"差错控制\",{\"1\":{\"6718\":1}}],[\"差了30倍\",{\"1\":{\"711\":1}}],[\"了解都没必要\",{\"1\":{\"9464\":1}}],[\"了解\",{\"0\":{\"7001\":1,\"7584\":1}}],[\"了解springboot开发流程\",{\"1\":{\"295\":1}}],[\"了\",{\"1\":{\"6698\":1,\"6817\":1}}],[\"端口设计\",{\"0\":{\"10478\":1}}],[\"端口为浏览器访问的\",{\"1\":{\"9892\":1}}],[\"端口为\",{\"1\":{\"9891\":1}}],[\"端口以备占用\",{\"1\":{\"8450\":1}}],[\"端口冲突\",{\"0\":{\"8449\":1}}],[\"端口配置\",{\"0\":{\"8440\":1}}],[\"端口\",{\"1\":{\"8411\":1,\"9892\":1}}],[\"端口分类\",{\"0\":{\"6682\":1}}],[\"端口号是8080\",{\"1\":{\"8458\":1}}],[\"端口号是对一个服务的访问场所\",{\"1\":{\"6916\":1}}],[\"端口号>\",{\"1\":{\"6869\":1}}],[\"端口号就是本服务端的端口号\",{\"1\":{\"6813\":1}}],[\"端口号与ip\",{\"1\":{\"6687\":1}}],[\"端口号标识正在计算机上运行的进程\",{\"1\":{\"6680\":1}}],[\"端口号\",{\"0\":{\"6679\":1},\"1\":{\"746\":1,\"6652\":1,\"6882\":1}}],[\"端口号冲突\",{\"0\":{\"743\":1}}],[\"局限性\",{\"0\":{\"9235\":1}}],[\"局域网使用\",{\"1\":{\"6671\":1}}],[\"局部类型推断升级\",{\"0\":{\"7777\":1}}],[\"局部内部类不能使用static修饰\",{\"1\":{\"4343\":1}}],[\"局部内部类和局部变量地位类似\",{\"1\":{\"4342\":1}}],[\"局部内部类可以使用外部方法的局部变量\",{\"1\":{\"4341\":1}}],[\"局部内部类可以使用外部类的成员\",{\"1\":{\"4340\":1}}],[\"局部内部类的特点\",{\"0\":{\"4337\":1}}],[\"局部内部类的使用\",{\"0\":{\"4330\":1}}],[\"局部内部类\",{\"1\":{\"4306\":3,\"4310\":1,\"6982\":1}}],[\"局部变量声明\",{\"1\":{\"4961\":1}}],[\"局部变量表存放了编译期可知长度的各种基本数据类型\",{\"1\":{\"4634\":1}}],[\"局部变量除形参外\",{\"1\":{\"3046\":1}}],[\"局部变量\",{\"1\":{\"3042\":1,\"3678\":1,\"3689\":1,\"3692\":1,\"3700\":1,\"3704\":1,\"4883\":1,\"4996\":1,\"5610\":1,\"5611\":1,\"5613\":1,\"5614\":1}}],[\"局部\",{\"1\":{\"842\":1}}],[\"亚洲4亿\",{\"1\":{\"6666\":1}}],[\"事务\",{\"0\":{\"8127\":1}}],[\"事实上的国际标准\",{\"1\":{\"6655\":1}}],[\"事件\",{\"1\":{\"4577\":1}}],[\"准动态语言\",{\"1\":{\"6928\":1}}],[\"准确地定位网络上一台或多台主机\",{\"1\":{\"6646\":1}}],[\"准备静态资源\",{\"1\":{\"8405\":1}}],[\"准备\",{\"1\":{\"7015\":1}}],[\"准备遍历\",{\"1\":{\"5588\":1}}],[\"准备工作顺序\",{\"0\":{\"1098\":1}}],[\"准备工作\",{\"0\":{\"1097\":1}}],[\"准备测试前\",{\"1\":{\"552\":1}}],[\"联合索引可以是上述规则重复n次\",{\"1\":{\"10404\":1}}],[\"联网的底层细节被隐藏在\",{\"1\":{\"6641\":1}}],[\"联系\",{\"0\":{\"5281\":1}}],[\"根标签\",{\"1\":{\"9645\":1}}],[\"根标签名\",{\"1\":{\"9633\":2}}],[\"根目录\",{\"1\":{\"9260\":1}}],[\"根目录后面元素的数量\",{\"1\":{\"6605\":1}}],[\"根据上述设计\",{\"1\":{\"10495\":1}}],[\"根据最小副本集架构搭建副本集\",{\"1\":{\"10476\":1}}],[\"根据uerid查询数据\",{\"1\":{\"10421\":1}}],[\"根据url自动识别\",{\"1\":{\"8278\":1}}],[\"根据query条件查询数据\",{\"1\":{\"10313\":1}}],[\"根据倒排列表\",{\"1\":{\"9973\":1}}],[\"根据约束文档写xml文档之前\",{\"1\":{\"9633\":1}}],[\"根据其根目录下包含有html和jsp文件\",{\"1\":{\"9523\":1}}],[\"根据其类型\",{\"1\":{\"3694\":1}}],[\"根据name删除数据\",{\"1\":{\"9209\":1}}],[\"根据那么获取对应数据值\",{\"1\":{\"9208\":1}}],[\"根据key删除该键值对\",{\"1\":{\"9119\":1}}],[\"根据key获取值\",{\"1\":{\"9119\":1}}],[\"根据key获取参数值\",{\"1\":{\"9027\":1}}],[\"根据key\",{\"1\":{\"9027\":1}}],[\"根据名称获取参数值\",{\"1\":{\"9021\":2}}],[\"根据不同的请求方式获取请求参数\",{\"0\":{\"9010\":1}}],[\"根据不同的响应数据类型\",{\"1\":{\"1294\":1}}],[\"根据请求方式的不通\",{\"1\":{\"9002\":1}}],[\"根据请求的套接字对象\",{\"1\":{\"6819\":1}}],[\"根据多态显示的类是httpservletrequest\",{\"1\":{\"8908\":1}}],[\"根据需求\",{\"1\":{\"8805\":1}}],[\"根据需求选择符合要求\",{\"1\":{\"7401\":1}}],[\"根据需求选择合适的子类\",{\"1\":{\"5561\":1}}],[\"根据\",{\"1\":{\"8722\":1}}],[\"根据demo1可以找到要访问的是项目中的哪个servlet类\",{\"1\":{\"8722\":1}}],[\"根据dbtype自动识别\",{\"1\":{\"8317\":1}}],[\"根据web\",{\"1\":{\"8721\":1}}],[\"根据localhost\",{\"1\":{\"8720\":1}}],[\"根据pid找到对应的进程\",{\"1\":{\"8452\":1}}],[\"根据pid杀死任务\",{\"1\":{\"746\":1}}],[\"根据业务需求编写接口\",{\"1\":{\"8204\":1}}],[\"根据orm编程思想\",{\"1\":{\"8041\":1}}],[\"根据学生的年龄进行排序\",{\"1\":{\"7673\":1}}],[\"根据遍历顺序\",{\"1\":{\"7622\":1}}],[\"根据integer参数\",{\"1\":{\"7533\":1}}],[\"根据ip创建\",{\"0\":{\"6767\":1}}],[\"根据程序的上下文\",{\"1\":{\"7358\":1}}],[\"根据传递的信息调用源被代理对象的方法\",{\"1\":{\"7246\":1}}],[\"根据传入的comparator接口子类\",{\"1\":{\"2364\":1}}],[\"根据全类名参数创建类的对象\",{\"1\":{\"6949\":1}}],[\"根据指定服务端的\",{\"1\":{\"6790\":1}}],[\"根据指定的第二个参数comparator进行排序\",{\"1\":{\"2491\":1}}],[\"根据host创建\",{\"0\":{\"6770\":1}}],[\"根据数据操作单位可以把缓冲流分为\",{\"1\":{\"6322\":1}}],[\"根据数据种类得到操作接口\",{\"1\":{\"1026\":1}}],[\"根据操作系统\",{\"1\":{\"6125\":1}}],[\"根据自定义的排序方式进行了排序输出\",{\"1\":{\"5913\":1}}],[\"根据元素的\",{\"1\":{\"5711\":1,\"5775\":1}}],[\"根据此对象的类型\",{\"1\":{\"4737\":1}}],[\"根据定义\",{\"1\":{\"4033\":1}}],[\"根据类创建类的对象\",{\"1\":{\"3632\":1}}],[\"根据类加载器加载目标类\",{\"1\":{\"2144\":1}}],[\"根据问题需要\",{\"1\":{\"3608\":1}}],[\"根据switch表达式中的值\",{\"1\":{\"3363\":1}}],[\"根据循环条件\",{\"1\":{\"3336\":1}}],[\"根据条件查询数据\",{\"0\":{\"10312\":1}}],[\"根据条件\",{\"1\":{\"3333\":1}}],[\"根据条件表达式真或假\",{\"1\":{\"3314\":1}}],[\"根据运算法则减去一个正数等于加上一个负数\",{\"1\":{\"3191\":1}}],[\"根据参数获得ip对象\",{\"1\":{\"6702\":1}}],[\"根据参数列表调用对应的构造器来创建对象\",{\"1\":{\"3882\":1}}],[\"根据参数数组的数据类型不同\",{\"1\":{\"2367\":1}}],[\"根据参数2不同的数据类型\",{\"1\":{\"1600\":1}}],[\"根据获取的构造器创建类的对象\",{\"1\":{\"2290\":1}}],[\"根据换行符来判定\",{\"1\":{\"2118\":1,\"6343\":1}}],[\"根据父file对象拼接子文件路径创建文件对象\",{\"1\":{\"1946\":1}}],[\"根据父路径和子路径拼接创建文件对象\",{\"1\":{\"1946\":1}}],[\"根据文件路径创建文件对象\",{\"1\":{\"1946\":1}}],[\"根据年龄比较大小\",{\"1\":{\"1767\":1}}],[\"根据空格分割\",{\"1\":{\"1529\":1,\"2705\":1}}],[\"根据给定正则表达式的匹配拆分此字符串\",{\"1\":{\"1526\":1,\"2702\":1}}],[\"根据要操作的数据表创建实体类\",{\"1\":{\"1210\":1}}],[\"根据要操作的数据类型\",{\"1\":{\"1025\":1}}],[\"根据以下规范\",{\"1\":{\"1118\":1}}],[\"根据项目需求添加依赖和插件\",{\"1\":{\"1092\":1}}],[\"根据进程pid查询进程名称\",{\"1\":{\"746\":1}}],[\"根据加载的东西不同\",{\"1\":{\"538\":1}}],[\"根据产品原型输出界面效果图\",{\"1\":{\"111\":1}}],[\"王铭\",{\"1\":{\"6571\":1}}],[\"追加效果\",{\"1\":{\"6523\":1}}],[\"追加写\",{\"1\":{\"6274\":1}}],[\"刘建辰\",{\"1\":{\"6483\":1}}],[\"顾名思义\",{\"1\":{\"6427\":1}}],[\"融合了目前人类使用的所有字符\",{\"1\":{\"6421\":1}}],[\"融合了更多的中文文字符号\",{\"1\":{\"6419\":1}}],[\"国际标准码\",{\"1\":{\"6421\":1}}],[\"欧洲码表\",{\"1\":{\"6417\":1}}],[\"拉丁码表\",{\"1\":{\"6417\":1}}],[\"美国标准信息交换码\",{\"1\":{\"6416\":1}}],[\"美观\",{\"1\":{\"925\":1}}],[\"早期的java只提供了一个file类来访问文件系统\",{\"1\":{\"6591\":1}}],[\"早期由来是电信号\",{\"1\":{\"6414\":1}}],[\"早绑定\",{\"1\":{\"4157\":2}}],[\"早绑定与晚绑定\",{\"0\":{\"4155\":1}}],[\"综合示例\",{\"0\":{\"6410\":1}}],[\"视频直播\",{\"1\":{\"10038\":1}}],[\"视频播放\",{\"1\":{\"6737\":1}}],[\"视频\",{\"1\":{\"6359\":2}}],[\"视图中无法显示数据库列表\",{\"1\":{\"10520\":1}}],[\"视图\",{\"1\":{\"9462\":1,\"9541\":1,\"9579\":1}}],[\"视图层\",{\"0\":{\"4606\":1}}],[\"视图模型层\",{\"1\":{\"4595\":1}}],[\"套接字用于连接客户端和服务器\",{\"1\":{\"6916\":1}}],[\"套接字将被绑定到通配符地址\",{\"1\":{\"6846\":1,\"6847\":1}}],[\"套接字\",{\"1\":{\"6782\":1}}],[\"套接字被关闭后\",{\"1\":{\"6780\":1}}],[\"套接\",{\"1\":{\"6322\":1,\"6381\":1,\"6400\":1,\"6465\":1,\"6466\":1}}],[\"套餐管理\",{\"1\":{\"1401\":1}}],[\"套餐菜品关系\",{\"1\":{\"1342\":1}}],[\"套餐id\",{\"1\":{\"1342\":1,\"1350\":1,\"1354\":1}}],[\"套餐价格\",{\"1\":{\"1340\":1}}],[\"套餐名称\",{\"1\":{\"1340\":1}}],[\"套餐分类\",{\"1\":{\"1336\":1}}],[\"套餐表\",{\"0\":{\"1339\":1},\"1\":{\"1318\":1}}],[\"套餐\",{\"1\":{\"1314\":1,\"1340\":1,\"1384\":1,\"1406\":1}}],[\"缓冲池\",{\"1\":{\"8227\":2}}],[\"缓冲流消耗的时间\",{\"1\":{\"6360\":1}}],[\"缓冲流要\",{\"1\":{\"6322\":1}}],[\"缓冲流的类\",{\"0\":{\"6321\":1}}],[\"缓冲流的作用是提高流的读取\",{\"1\":{\"6310\":1}}],[\"缓冲流是处理流的一种\",{\"1\":{\"6309\":1}}],[\"缓冲流\",{\"0\":{\"6307\":1,\"6351\":1,\"6354\":1}}],[\"缓存\",{\"1\":{\"1177\":1,\"7035\":1,\"10119\":1}}],[\"缓存技术\",{\"1\":{\"95\":1}}],[\"造流\",{\"1\":{\"6306\":1,\"6411\":1}}],[\"造文件\",{\"1\":{\"6306\":1,\"6411\":1}}],[\"房子fr是null\",{\"1\":{\"6251\":1}}],[\"创造流\",{\"1\":{\"6353\":2}}],[\"创造filereader输入流\",{\"1\":{\"6251\":1}}],[\"创建x\",{\"0\":{\"10767\":1}}],[\"创建普通用户可以在没有开启认证的时候添加\",{\"1\":{\"10716\":1}}],[\"创建普通用户\",{\"0\":{\"10715\":1}}],[\"创建专门用来管理admin库的账号myadmin\",{\"1\":{\"10713\":1}}],[\"创建admin\",{\"0\":{\"10712\":1}}],[\"创建application\",{\"1\":{\"1094\":1}}],[\"创建用户后\",{\"1\":{\"10737\":1}}],[\"创建用户示例\",{\"0\":{\"10704\":1}}],[\"创建用户需要使用db\",{\"1\":{\"10702\":1}}],[\"创建或选择article库\",{\"1\":{\"10603\":1}}],[\"创建仲裁节点\",{\"0\":{\"10504\":1}}],[\"创建副本节点\",{\"0\":{\"10499\":1}}],[\"创建副本集\",{\"0\":{\"10471\":1}}],[\"创建主节点的目录和相关文件\",{\"1\":{\"10495\":1}}],[\"创建主节点\",{\"0\":{\"10494\":1}}],[\"创建节点\",{\"0\":{\"10493\":1}}],[\"创建复合索引\",{\"0\":{\"10397\":1}}],[\"创建单字段索引\",{\"0\":{\"10393\":1}}],[\"创建索引\",{\"0\":{\"10383\":1}}],[\"创建集合\",{\"0\":{\"10229\":1}}],[\"创建集合对象时传入类型实参\",{\"1\":{\"5948\":1}}],[\"创建集合对象\",{\"1\":{\"5588\":1,\"8054\":1,\"8201\":1}}],[\"创建new\",{\"1\":{\"9699\":1}}],[\"创建对应的servlet实现类的对象\",{\"1\":{\"8878\":1}}],[\"创建对象时\",{\"1\":{\"3882\":1,\"5946\":1}}],[\"创建对象时利用传参进行属性的初始化\",{\"1\":{\"3855\":1}}],[\"创建对象数组\",{\"1\":{\"3657\":1}}],[\"创建对象\",{\"0\":{\"3631\":1,\"3851\":1},\"1\":{\"3664\":1}}],[\"创建连接等初始化的工作\",{\"1\":{\"8757\":1}}],[\"创建连接池\",{\"1\":{\"8260\":1}}],[\"创建web项目\",{\"0\":{\"8520\":1,\"8521\":1},\"1\":{\"8698\":1}}],[\"创建optional类\",{\"0\":{\"7740\":1}}],[\"创建无限流\",{\"1\":{\"7585\":1}}],[\"创建无限流stream\",{\"0\":{\"7584\":1}}],[\"创建代理对象\",{\"1\":{\"7263\":1}}],[\"创建代理类的对象\",{\"1\":{\"7231\":1}}],[\"创建被代理类的对象\",{\"1\":{\"7231\":1}}],[\"创建运行时类的对象\",{\"1\":{\"7146\":1,\"7161\":1}}],[\"创建服务器套接字对象\",{\"1\":{\"6819\":1}}],[\"创建服务端的serversocket\",{\"1\":{\"6806\":1}}],[\"创建的索引是文档的id\",{\"1\":{\"9956\":1}}],[\"创建的同时会自动向服务器方发起连接\",{\"1\":{\"6799\":1}}],[\"创建的工程\",{\"1\":{\"301\":1}}],[\"创建写出流\",{\"1\":{\"6557\":1,\"6573\":1}}],[\"创建输入流\",{\"1\":{\"6555\":1,\"6571\":1}}],[\"创建输入流和输出流的对象\",{\"1\":{\"6287\":1}}],[\"创建反序列化流\",{\"1\":{\"6543\":1}}],[\"创建序列化流\",{\"1\":{\"6542\":1,\"6543\":1}}],[\"创建流\",{\"1\":{\"6483\":1,\"6487\":1}}],[\"创建流对象\",{\"0\":{\"6237\":1},\"1\":{\"6216\":1}}],[\"创建打印输出流\",{\"1\":{\"6460\":1}}],[\"创建file类的对象\",{\"1\":{\"6287\":1}}],[\"创建futuretask的对象\",{\"1\":{\"5482\":1}}],[\"创建硬盘文件\",{\"0\":{\"6140\":1}}],[\"创建泛型数组\",{\"1\":{\"6012\":1}}],[\"创建迭代器时\",{\"1\":{\"5967\":1}}],[\"创建了代理类proxyinstance\",{\"1\":{\"7289\":1}}],[\"创建了node对象\",{\"1\":{\"5669\":1}}],[\"创建了接口的匿名实现类的匿名对象\",{\"1\":{\"4513\":1}}],[\"创建了接口的匿名实现类的非匿名对象\",{\"1\":{\"4513\":1}}],[\"创建了接口的非匿名实现类的匿名对象\",{\"1\":{\"4513\":1}}],[\"创建iterator对象\",{\"1\":{\"5588\":1}}],[\"创建线程池\",{\"1\":{\"5512\":1,\"5517\":1}}],[\"创建线程并指定线程实例名\",{\"1\":{\"5168\":1}}],[\"创建cookie\",{\"0\":{\"9692\":1}}],[\"创建cookie对象\",{\"0\":{\"9679\":1},\"1\":{\"9674\":1,\"9693\":1}}],[\"创建copy方法\",{\"0\":{\"6304\":1}}],[\"创建config包\",{\"1\":{\"518\":1}}],[\"创建controller\",{\"0\":{\"370\":1},\"1\":{\"1293\":1}}],[\"创建callable接口实现类的对象\",{\"1\":{\"5486\":1}}],[\"创建新的线程\",{\"1\":{\"5270\":1}}],[\"创建新的thread对象\",{\"1\":{\"5167\":1,\"5170\":1}}],[\"创建多个线程\",{\"0\":{\"5269\":1}}],[\"创建多线程示例\",{\"0\":{\"5183\":1}}],[\"创建多线程的步骤\",{\"0\":{\"5177\":1}}],[\"创建多线程的方式之一\",{\"1\":{\"5156\":1}}],[\"创建实现类的对象\",{\"1\":{\"5259\":1,\"5263\":1}}],[\"创建实体类和mapper接口\",{\"1\":{\"983\":1}}],[\"创建子线程对象\",{\"1\":{\"5185\":1}}],[\"创建子类的对象\",{\"1\":{\"4110\":1}}],[\"创建子类对象时\",{\"1\":{\"4035\":1}}],[\"创建test类\",{\"0\":{\"6955\":1}}],[\"创建thread对象\",{\"1\":{\"5483\":1,\"5486\":1}}],[\"创建thread类的对象\",{\"1\":{\"5260\":1,\"5263\":1}}],[\"创建thread类的子类的对象\",{\"1\":{\"5181\":1,\"5185\":1}}],[\"创建tostring等\",{\"1\":{\"1213\":1}}],[\"创建一个仅能对article库进行读写的用户\",{\"1\":{\"10717\":1}}],[\"创建一个存放数据的目录\",{\"1\":{\"10136\":1}}],[\"创建一个路由\",{\"0\":{\"8472\":1},\"1\":{\"8473\":1}}],[\"创建一个optional实例\",{\"1\":{\"7748\":1}}],[\"创建一个obj也可以\",{\"1\":{\"5322\":1}}],[\"创建一个空的\",{\"1\":{\"7745\":1}}],[\"创建一个\",{\"1\":{\"7742\":1}}],[\"创建一个员工对象\",{\"1\":{\"7471\":1}}],[\"创建一个类\",{\"1\":{\"7307\":1}}],[\"创建一个对象\",{\"1\":{\"7239\":1}}],[\"创建一个函数\",{\"1\":{\"6949\":1}}],[\"创建一个服务器端套接字\",{\"1\":{\"6806\":1}}],[\"创建一个流套接字并将其连接到指定主机上的指定端口号\",{\"1\":{\"6771\":1}}],[\"创建一个流套接字并将其连接到指定ip\",{\"1\":{\"6768\":1}}],[\"创建一个文件\",{\"1\":{\"6618\":1}}],[\"创建一个目录\",{\"1\":{\"6617\":1}}],[\"创建一个线程池\",{\"1\":{\"5510\":1}}],[\"创建一个只有一个线程的线程池\",{\"1\":{\"5509\":1}}],[\"创建一个可重用固定线程数的线程池\",{\"1\":{\"5508\":1}}],[\"创建一个可根据需要创建新线程的线程池\",{\"1\":{\"5507\":1}}],[\"创建一个实现接口invocationhandler的类\",{\"1\":{\"7268\":1}}],[\"创建一个实现callable的实现类\",{\"1\":{\"5486\":1}}],[\"创建一个实现了runnable接口的类\",{\"1\":{\"5257\":1,\"5263\":1}}],[\"创建一个继承于thread类的子类\",{\"1\":{\"5179\":1,\"5185\":1}}],[\"创建一个季节枚举类\",{\"1\":{\"4842\":1}}],[\"创建一个计算代码执行时间的类\",{\"1\":{\"4465\":1}}],[\"创建枚举类\",{\"0\":{\"4841\":1}}],[\"创建细节\",{\"1\":{\"4837\":1}}],[\"创建\",{\"1\":{\"4825\":1}}],[\"创建异常的语法\",{\"0\":{\"4796\":1}}],[\"创建好的异常对象不抛出对程序没有任何影响\",{\"1\":{\"4691\":1}}],[\"创建好springboot项目后\",{\"1\":{\"369\":1}}],[\"创建抽象类的匿名类\",{\"0\":{\"4456\":1}}],[\"创建玩对象后\",{\"1\":{\"3635\":1}}],[\"创建数组对象会在内存中开辟一整块连续的空间\",{\"1\":{\"3469\":1}}],[\"创建数据库\",{\"1\":{\"10196\":1}}],[\"创建数据表实现类\",{\"0\":{\"8206\":1}}],[\"创建数据表实现接口\",{\"0\":{\"8203\":1}}],[\"创建数据表book\",{\"0\":{\"1207\":1}}],[\"创建数据报套接字\",{\"1\":{\"6847\":1}}],[\"创建数据报套接字并将其绑定到本地主机上的指定端口\",{\"1\":{\"6846\":1}}],[\"创建数据对象\",{\"0\":{\"517\":1},\"1\":{\"8059\":1}}],[\"创建变量\",{\"0\":{\"2865\":1}}],[\"创建比较器\",{\"1\":{\"2747\":1}}],[\"创建模式器\",{\"1\":{\"2747\":1}}],[\"创建模块\",{\"0\":{\"1199\":1}}],[\"创建preparedstatement对象\",{\"0\":{\"7944\":1}}],[\"创建proxyinstance时\",{\"1\":{\"7294\":1}}],[\"创建properties类的对象\",{\"1\":{\"5927\":1}}],[\"创建person类的class实例\",{\"1\":{\"7054\":1}}],[\"创建person类的对象\",{\"1\":{\"6960\":1}}],[\"创建person对象\",{\"1\":{\"2181\":1,\"6962\":1,\"7065\":1}}],[\"创建pattern对象\",{\"1\":{\"2756\":1}}],[\"创建pattern类的实例\",{\"1\":{\"2683\":1}}],[\"创建容器对象时\",{\"1\":{\"2401\":1}}],[\"创建失败\",{\"1\":{\"2003\":1}}],[\"创建优秀的\",{\"1\":{\"1623\":1}}],[\"创建session时\",{\"1\":{\"9762\":1}}],[\"创建session对象\",{\"1\":{\"9194\":1}}],[\"创建servlet实现类\",{\"0\":{\"8702\":1},\"1\":{\"8690\":1}}],[\"创建serversocket对象\",{\"0\":{\"6811\":1}}],[\"创建stream\",{\"0\":{\"7581\":1},\"1\":{\"7556\":1}}],[\"创建stringbuffer对象\",{\"0\":{\"1543\":1}}],[\"创建string\",{\"1\":{\"1416\":1}}],[\"创建socket对象\",{\"1\":{\"6803\":1}}],[\"创建socket\",{\"1\":{\"6790\":1}}],[\"创建springboot会产生很多无意义的文件\",{\"1\":{\"354\":1}}],[\"创建人和类搜索路径class\",{\"1\":{\"9473\":1}}],[\"创建人\",{\"1\":{\"1334\":1,\"1336\":1,\"1338\":1,\"1340\":1,\"1342\":1,\"1344\":1,\"1348\":1}}],[\"创建时间\",{\"1\":{\"1334\":1,\"1336\":1,\"1338\":1,\"1340\":1,\"1342\":1,\"1344\":1,\"1348\":1,\"1350\":1}}],[\"创建bookcontroller类\",{\"1\":{\"1272\":1}}],[\"创建bookserviceimpl作为对应业务层接口的实现类\",{\"1\":{\"1261\":1}}],[\"创建bookservice作为业务接口\",{\"1\":{\"1260\":1}}],[\"创建包\",{\"1\":{\"1260\":1,\"1261\":1,\"1272\":1}}],[\"创建包config\",{\"1\":{\"1233\":1}}],[\"创建module\",{\"0\":{\"8525\":1,\"8546\":1,\"8558\":1}}],[\"创建myroot\",{\"0\":{\"10710\":1}}],[\"创建myannotations注解\",{\"1\":{\"5018\":1}}],[\"创建mycomparator类的对象\",{\"1\":{\"2365\":1}}],[\"创建manifest\",{\"1\":{\"9499\":1}}],[\"创建matcher类的实例\",{\"1\":{\"2683\":1}}],[\"创建mapper接口\",{\"1\":{\"1012\":1}}],[\"创建mpconfig用来配置分页相关的拦截器\",{\"1\":{\"1233\":1}}],[\"创建所有配置\",{\"1\":{\"1102\":1}}],[\"创建配置文件\",{\"1\":{\"949\":1}}],[\"创建日志对象\",{\"1\":{\"882\":1}}],[\"创建测试类\",{\"1\":{\"660\":1}}],[\"创建文件输入流\",{\"1\":{\"8084\":1}}],[\"创建文件对象\",{\"1\":{\"6215\":1,\"6353\":1}}],[\"创建文件目录\",{\"1\":{\"2005\":1}}],[\"创建文件\",{\"0\":{\"1994\":1},\"1\":{\"518\":1}}],[\"创建类的对象\",{\"1\":{\"3633\":1,\"3639\":1}}],[\"创建类r作为返回结果模型类\",{\"1\":{\"1293\":1}}],[\"创建类\",{\"0\":{\"3628\":1},\"1\":{\"511\":1,\"3638\":1}}],[\"创建完成后\",{\"1\":{\"362\":1}}],[\"创建工程\",{\"0\":{\"1084\":1},\"1\":{\"304\":1,\"361\":1}}],[\"创建项目时springboot自动导入了\",{\"1\":{\"659\":1}}],[\"创建项目的过程中\",{\"1\":{\"352\":1}}],[\"创建项目\",{\"0\":{\"299\":1,\"8697\":1},\"1\":{\"71\":1,\"219\":1,\"8689\":1}}],[\"尤其是较为重要的class\",{\"1\":{\"9473\":1}}],[\"尤其是自定义的类\",{\"1\":{\"5748\":1,\"7669\":1}}],[\"尤其注意\",{\"1\":{\"6233\":1}}],[\"典型实现\",{\"1\":{\"6193\":1,\"6196\":1,\"6200\":1,\"6203\":1,\"6212\":1}}],[\"节点成员内部认证\",{\"1\":{\"10762\":1}}],[\"节点成员的host都是区域网ip\",{\"1\":{\"10592\":1}}],[\"节点的host都是区域网ip\",{\"1\":{\"10593\":1}}],[\"节点ip\",{\"1\":{\"10576\":1}}],[\"节点id\",{\"1\":{\"10576\":1}}],[\"节点名字会自动设置为本地域名\",{\"1\":{\"10496\":1}}],[\"节点\",{\"1\":{\"10444\":1,\"10453\":1}}],[\"节点流的方法\",{\"0\":{\"6224\":1}}],[\"节点流是流基类的典型实现\",{\"1\":{\"6223\":1}}],[\"节点流是最基本的实现\",{\"1\":{\"6212\":1}}],[\"节点流介绍\",{\"0\":{\"6222\":1}}],[\"节点流或处理流\",{\"1\":{\"6184\":1}}],[\"节点流或其他处理流\",{\"1\":{\"6166\":1}}],[\"节点流和处理流\",{\"0\":{\"6179\":1}}],[\"节点流\",{\"0\":{\"6180\":1,\"6211\":1,\"6221\":1},\"1\":{\"6165\":1,\"6353\":1}}],[\"节省内存\",{\"1\":{\"5662\":1}}],[\"光盘等存储设备中\",{\"1\":{\"6155\":1}}],[\"光盘等存储设备的数据\",{\"1\":{\"6154\":1}}],[\"磁盘\",{\"1\":{\"6154\":1}}],[\"流进行了终止操作后\",{\"1\":{\"7605\":1}}],[\"流套接字\",{\"1\":{\"6764\":1}}],[\"流量控制\",{\"1\":{\"6718\":1}}],[\"流资源的关闭\",{\"1\":{\"6285\":1}}],[\"流操作的基本步骤\",{\"0\":{\"6214\":1}}],[\"流的关闭\",{\"1\":{\"6251\":1}}],[\"流的基类都是节点流\",{\"1\":{\"6188\":1}}],[\"流的基类\",{\"0\":{\"6186\":1},\"1\":{\"6295\":1}}],[\"流的分类\",{\"0\":{\"6156\":1}}],[\"流的接口\",{\"1\":{\"6152\":1}}],[\"流\",{\"1\":{\"6151\":2,\"6152\":1}}],[\"流程控制方式采用结构化程序设计中规定的三种基本流程结构\",{\"1\":{\"3331\":1}}],[\"流程控制语句是用来控制程序中各语句执行顺序的语句\",{\"1\":{\"3330\":1}}],[\"流程控制\",{\"0\":{\"3329\":1}}],[\"狭义文件或文件\",{\"1\":{\"6109\":1}}],[\"广义文件\",{\"1\":{\"6108\":1}}],[\"场景较多\",{\"1\":{\"10122\":1}}],[\"场景\",{\"1\":{\"6084\":1}}],[\"误区\",{\"0\":{\"6036\":1,\"6261\":1}}],[\"部分集合和集群\",{\"1\":{\"10652\":1}}],[\"部分保留\",{\"0\":{\"6026\":1}}],[\"部署了多个web项目\",{\"1\":{\"9729\":1}}],[\"部署模式介绍\",{\"0\":{\"8583\":1}}],[\"部署项目\",{\"1\":{\"8581\":1}}],[\"部署到tomcat\",{\"1\":{\"8532\":1}}],[\"部署时的项目目录结构\",{\"0\":{\"8492\":1}}],[\"部署环境\",{\"0\":{\"753\":1}}],[\"擦除泛型\",{\"0\":{\"6017\":1}}],[\"健壮\",{\"1\":{\"5955\":1,\"9864\":1}}],[\"健壮性\",{\"1\":{\"2814\":1}}],[\"药品都要辨别\",{\"1\":{\"5954\":1}}],[\"药品标签\",{\"1\":{\"5952\":1}}],[\"好比不用每回拿商品\",{\"1\":{\"5954\":1}}],[\"好比商品\",{\"1\":{\"5952\":1}}],[\"好大雪\",{\"1\":{\"4843\":1}}],[\"好大雨\",{\"1\":{\"4843\":1}}],[\"桶中的node被树化时最小的hash表容量\",{\"1\":{\"5889\":1}}],[\"旧元素指向新元素\",{\"1\":{\"5880\":1}}],[\"旧的时间api\",{\"0\":{\"1609\":1}}],[\"旧的不要再用了\",{\"1\":{\"1607\":1}}],[\"七上八下\",{\"1\":{\"5880\":1}}],[\"首要任务就是判断请求类型\",{\"1\":{\"8796\":1,\"8823\":1}}],[\"首次调用put\",{\"1\":{\"5877\":1}}],[\"首先要用分词系统将文档自动切分成单词序列\",{\"1\":{\"9994\":1}}],[\"首先要在一个\",{\"1\":{\"6898\":1}}],[\"首先需要注意\",{\"1\":{\"8118\":1}}],[\"首先\",{\"1\":{\"5858\":1,\"7243\":1}}],[\"首先调用元素所在类的hashcode\",{\"1\":{\"5732\":1}}],[\"首先读取manifest\",{\"1\":{\"737\":1}}],[\"映射\",{\"0\":{\"7627\":1},\"1\":{\"7601\":1}}],[\"映射关系的数据\",{\"1\":{\"5798\":1}}],[\"映射操作\",{\"1\":{\"216\":1}}],[\"抗碰撞性\",{\"1\":{\"5764\":1}}],[\"哈希索引\",{\"1\":{\"10373\":1}}],[\"哈希冲突\",{\"0\":{\"5766\":1},\"1\":{\"5765\":1,\"5767\":1}}],[\"哈希位数越多\",{\"1\":{\"5764\":1}}],[\"哈希函数的安全性肯定是个相对概念\",{\"1\":{\"5764\":1}}],[\"哈希值的长度是固定的\",{\"1\":{\"5764\":1}}],[\"哈希算法\",{\"0\":{\"5762\":1},\"1\":{\"5763\":1}}],[\"红黑树结构存储数据\",{\"1\":{\"5906\":1}}],[\"红黑树的形成\",{\"1\":{\"5881\":1}}],[\"红黑树\",{\"1\":{\"5713\":1,\"5830\":1}}],[\"鉴于java中数组用来存储数据的局限性\",{\"1\":{\"5625\":1}}],[\"练习\",{\"0\":{\"5615\":1}}],[\"迭代\",{\"0\":{\"7587\":1}}],[\"迭代顺序与\",{\"1\":{\"5899\":1}}],[\"迭代器执行的原理\",{\"0\":{\"5596\":1}}],[\"迭代器模式\",{\"1\":{\"5569\":1}}],[\"迭代器\",{\"0\":{\"5568\":1}}],[\"迭代条件\",{\"1\":{\"3384\":1,\"3388\":2,\"3390\":1,\"3401\":2,\"3402\":1,\"3417\":1}}],[\"凡是实现serializable接口的类都有一个表示序列化版本标识符的静态变量\",{\"1\":{\"6575\":1}}],[\"凡是涉及到对多个数据进行操作时\",{\"1\":{\"5538\":1}}],[\"凡是可以使用三元运算符的地方\",{\"1\":{\"3324\":1}}],[\"思路\",{\"1\":{\"5491\":1}}],[\"思想\",{\"1\":{\"4462\":1}}],[\"总和\",{\"0\":{\"8390\":1}}],[\"总和为\",{\"1\":{\"5486\":1}}],[\"总是2的n次幂\",{\"1\":{\"5890\":1}}],[\"总能找到唯一的\",{\"1\":{\"5802\":1}}],[\"总结操作的方法\",{\"0\":{\"7599\":1}}],[\"总结\",{\"0\":{\"380\":1,\"436\":1,\"603\":1,\"735\":1,\"782\":1,\"3822\":1,\"3883\":1,\"3909\":1,\"5423\":1,\"5661\":1,\"6058\":1,\"6082\":1,\"6431\":1,\"7663\":1,\"7805\":1,\"8726\":1,\"8913\":1,\"9028\":1,\"9052\":1,\"9580\":1,\"9733\":1,\"9791\":1},\"1\":{\"1569\":1,\"4750\":1}}],[\"⑤文本\",{\"1\":{\"9618\":1}}],[\"⑤填充占位符\",{\"1\":{\"7937\":1}}],[\"⑤使用代理对象调用被代理类中的同名方法\",{\"1\":{\"7242\":1}}],[\"⑤将futuretask的对象作为参数传递到thread类的构造器中\",{\"1\":{\"5483\":1}}],[\"⑤在代码块中赋值\",{\"1\":{\"3710\":1}}],[\"唤醒等待该对象监控权的一个\",{\"1\":{\"5450\":1}}],[\"唤醒后等待重新获得对监视器的所有权后才能继续执行\",{\"1\":{\"5439\":1}}],[\"令当前线程挂起并放弃cpu\",{\"1\":{\"5439\":1}}],[\"某些destory方法无法生效\",{\"1\":{\"8439\":1}}],[\"某些特定的数据在内存空间里只有一份\",{\"1\":{\"4364\":1}}],[\"某个资源可以有多个过滤器时\",{\"1\":{\"9300\":1}}],[\"某个servlet实现类\",{\"1\":{\"8999\":1}}],[\"某个属性的类型是其他类\",{\"1\":{\"6565\":1}}],[\"某个值不是int\",{\"1\":{\"5964\":1}}],[\"某对象\",{\"1\":{\"5444\":1}}],[\"某计算机系统中只有一台打印机和一台输入\",{\"1\":{\"5416\":1}}],[\"死锁解析\",{\"0\":{\"5427\":1}}],[\"死锁的实例\",{\"0\":{\"5425\":1}}],[\"死锁产生的具体原因\",{\"0\":{\"5417\":1}}],[\"死锁示例\",{\"0\":{\"5415\":1}}],[\"死锁检测\",{\"1\":{\"5414\":1}}],[\"死锁介绍\",{\"0\":{\"5406\":1}}],[\"死亡\",{\"1\":{\"4825\":1,\"5292\":1}}],[\"性能和可靠性的级别\",{\"1\":{\"10249\":1}}],[\"性能是非常差的\",{\"1\":{\"9856\":1}}],[\"性能调优\",{\"1\":{\"8659\":1}}],[\"性能更好\",{\"1\":{\"5381\":1}}],[\"性别\",{\"1\":{\"1334\":1,\"1346\":1,\"1348\":1,\"4821\":1}}],[\"明确多线程运行代码中是否有多条语句操作共享数据\",{\"1\":{\"5361\":1}}],[\"明确多个线程是否有共享数据\",{\"1\":{\"5361\":1}}],[\"明确哪些代码是多线程运行的代码\",{\"1\":{\"5361\":1}}],[\"哪吒\",{\"1\":{\"7970\":1}}],[\"哪怕对象已经创建好了\",{\"1\":{\"5352\":1}}],[\"哪个对象调用或者哪个对象正在创建\",{\"1\":{\"3910\":1}}],[\"哪个判断和执行语句声明在上面还是下面\",{\"1\":{\"3354\":1}}],[\"买票问题解决示例\",{\"0\":{\"5321\":1,\"5344\":1}}],[\"锁的补充\",{\"0\":{\"5431\":1}}],[\"锁提供了对共享资源的独占访问\",{\"1\":{\"5379\":1}}],[\"锁就被去掉\",{\"1\":{\"5355\":1}}],[\"锁\",{\"1\":{\"5318\":1,\"5432\":1}}],[\"俗称\",{\"1\":{\"5318\":1}}],[\"电子设备\",{\"1\":{\"8410\":1}}],[\"电子打印\",{\"1\":{\"5302\":1}}],[\"电脑上写的程序最终要放到别人的服务器上去运行\",{\"1\":{\"817\":1}}],[\"卖票问题\",{\"0\":{\"5301\":1}}],[\"钱的数目是够的\",{\"1\":{\"5300\":2}}],[\"便不可在以后的网络连接中使用\",{\"1\":{\"6780\":1}}],[\"便进入运行状态\",{\"1\":{\"5290\":1}}],[\"便于资源的统一利用\",{\"1\":{\"9529\":1}}],[\"便于线程管理\",{\"1\":{\"5495\":1}}],[\"便于功能的扩展\",{\"1\":{\"4010\":1}}],[\"便于管理\",{\"1\":{\"3921\":1}}],[\"便于修改\",{\"1\":{\"3826\":1}}],[\"便于外界调用\",{\"1\":{\"3813\":1}}],[\"疑问\",{\"1\":{\"5267\":1}}],[\"共分为三个部分\",{\"1\":{\"9057\":1}}],[\"共享一些数据\",{\"1\":{\"9114\":1}}],[\"共享一个num变量\",{\"1\":{\"5265\":1}}],[\"共享硬件\",{\"1\":{\"6643\":1}}],[\"共享数据\",{\"1\":{\"5316\":1,\"9216\":1}}],[\"共享成员变量\",{\"0\":{\"5271\":1}}],[\"共有两种连接方式\",{\"1\":{\"10788\":1}}],[\"共有4种访问模式\",{\"1\":{\"6507\":1}}],[\"共有四种获取class类的实例的方式\",{\"1\":{\"2131\":1}}],[\"共有11张表\",{\"1\":{\"1308\":1}}],[\"低优先级只是获得调度的概率低\",{\"1\":{\"5250\":1}}],[\"低优先级的线程才执行\",{\"1\":{\"5245\":1}}],[\"低耦合\",{\"1\":{\"3811\":1}}],[\"抢占式\",{\"0\":{\"5236\":1}}],[\"释放连接引起的大量性能开销\",{\"1\":{\"8237\":1}}],[\"释放线路\",{\"1\":{\"6797\":1}}],[\"释放锁\",{\"0\":{\"5392\":1},\"1\":{\"5383\":1}}],[\"释放锁的操作\",{\"0\":{\"5364\":1}}],[\"释放当次执行权\",{\"1\":{\"5222\":1}}],[\"释放当前cpu的执行权\",{\"1\":{\"5211\":1}}],[\"释放本次的执行权\",{\"1\":{\"5221\":1}}],[\"睡眠线程\",{\"1\":{\"5227\":1}}],[\"睡眠\",{\"1\":{\"5213\":1}}],[\"统计所有记录数\",{\"1\":{\"10326\":1}}],[\"统计查询使用count\",{\"1\":{\"10320\":1}}],[\"统计查询\",{\"0\":{\"10319\":1}}],[\"统称为子线程\",{\"1\":{\"5160\":1}}],[\"统一的连接管理\",{\"1\":{\"8240\":1}}],[\"统一资源命名\",{\"1\":{\"6911\":1}}],[\"统一资源标识符\",{\"1\":{\"6909\":1,\"8937\":1}}],[\"统一资源定位符\",{\"1\":{\"6865\":1,\"6910\":1,\"8936\":1}}],[\"统一实现抽象方法\",{\"1\":{\"4867\":1}}],[\"统一视为obj类型\",{\"1\":{\"2401\":1}}],[\"统一为json对象\",{\"1\":{\"1285\":1}}],[\"统一响应格式\",{\"1\":{\"1108\":1}}],[\"统一管理时\",{\"1\":{\"611\":1}}],[\"统一版本管理\",{\"1\":{\"419\":1}}],[\"统一依赖管理\",{\"0\":{\"382\":1}}],[\"护线程是用来服务用户线程的\",{\"1\":{\"5152\":1}}],[\"守护线程\",{\"1\":{\"5150\":1}}],[\"占用的内存没有及时释放\",{\"1\":{\"5137\":1}}],[\"占位符读取maven对应的配置属性值\",{\"1\":{\"864\":1}}],[\"泄露\",{\"1\":{\"5137\":1}}],[\"临时的\",{\"1\":{\"5116\":1}}],[\"临时属性一般不用\",{\"1\":{\"784\":1}}],[\"临时属性失效\",{\"1\":{\"781\":1}}],[\"临时属性的优先级高于配置文件\",{\"1\":{\"773\":1}}],[\"临时属性配置\",{\"0\":{\"765\":1}}],[\"硬盘上没有这个文件也可以\",{\"1\":{\"6116\":1}}],[\"硬盘才是储存数据的\",{\"1\":{\"5113\":1}}],[\"硬件\",{\"1\":{\"240\":1}}],[\"函数的每次操作都会将参数映射成一个新的元素\",{\"1\":{\"7632\":1}}],[\"函数返回的是一个对象\",{\"1\":{\"7500\":1}}],[\"函数体直接在使用的时候定义\",{\"1\":{\"7407\":1}}],[\"函数名组成\",{\"1\":{\"7404\":1}}],[\"函数接口只有一个方法\",{\"1\":{\"7352\":1}}],[\"函数式接口的抽象方法的形参列表和构造器的形参列表一致\",{\"1\":{\"7502\":1}}],[\"函数式接口的特点\",{\"0\":{\"7403\":1}}],[\"函数式接口本质上只是一个载体\",{\"1\":{\"7409\":1}}],[\"函数式接口本质上是穷举了所有函数的格式\",{\"1\":{\"7400\":1}}],[\"函数式接口要定义多少\",{\"0\":{\"7408\":1}}],[\"函数式接口\",{\"0\":{\"7395\":1},\"1\":{\"7343\":1,\"7416\":1}}],[\"函数\",{\"1\":{\"5548\":1}}],[\"函数也是数据\",{\"1\":{\"5112\":1}}],[\"函数型\",{\"1\":{\"2638\":1,\"7433\":1}}],[\"滑动和加载图片分开\",{\"1\":{\"5108\":1}}],[\"利于系统的开发和扩展\",{\"1\":{\"6720\":1}}],[\"利于理解和修改\",{\"1\":{\"5104\":1}}],[\"利用集合和吧next放入循环来获取多条数据\",{\"1\":{\"8061\":1}}],[\"利用反射\",{\"1\":{\"7297\":1}}],[\"利用class提供的方法\",{\"1\":{\"6972\":1}}],[\"利用套接字\",{\"1\":{\"6758\":1}}],[\"利用properties类可以读取配置信息\",{\"1\":{\"5926\":1}}],[\"利用启动类启动服务\",{\"1\":{\"1105\":1}}],[\"利用mybatisplus生成代码\",{\"1\":{\"1111\":1}}],[\"利用mybatis\",{\"1\":{\"1103\":1}}],[\"独立运行\",{\"1\":{\"5104\":1}}],[\"拿到浏览器发送请求时携带的cookie数据\",{\"1\":{\"9677\":1}}],[\"拿包装类替换\",{\"1\":{\"5980\":1}}],[\"拿还要多线程干什么\",{\"1\":{\"5099\":1}}],[\"拿两个集合的元素挨个比较\",{\"1\":{\"2425\":1}}],[\"肯定是return语句\",{\"1\":{\"7356\":1}}],[\"肯定比用多个线程来完成用的时间更短\",{\"1\":{\"5098\":1}}],[\"肯定要遵守规范书写的\",{\"1\":{\"639\":1}}],[\"元注解之一\",{\"0\":{\"5038\":1}}],[\"元注解说明\",{\"0\":{\"4970\":1}}],[\"元注解\",{\"0\":{\"4924\":1,\"4969\":1},\"1\":{\"4906\":1,\"4916\":1,\"4925\":1}}],[\"元素是学生类\",{\"1\":{\"7655\":1}}],[\"元素a放到数组中\",{\"1\":{\"5744\":1}}],[\"元素a添加失败\",{\"1\":{\"5738\":1}}],[\"元素首先以数组的形式储存\",{\"1\":{\"5742\":1}}],[\"元素不一定相同\",{\"1\":{\"5729\":1}}],[\"元素的值\",{\"1\":{\"3583\":1}}],[\"元素的访问和值\",{\"0\":{\"3561\":1}}],[\"元素访问\",{\"1\":{\"3582\":1}}],[\"元素反转\",{\"1\":{\"2483\":1}}],[\"元素可以是任何类型\",{\"1\":{\"2403\":1}}],[\"抑制编译器警告\",{\"1\":{\"4894\":1,\"4903\":1}}],[\"忽略此方法\",{\"1\":{\"5223\":1}}],[\"忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告\",{\"1\":{\"4904\":1}}],[\"忽略警告等\",{\"1\":{\"4885\":1}}],[\"忽略大小写\",{\"1\":{\"2720\":1}}],[\"真好\",{\"1\":{\"4872\":1}}],[\"真正使用的request对象的类是\",{\"1\":{\"8908\":1}}],[\"真正部署项目时\",{\"1\":{\"8493\":1}}],[\"真正的将异常给处理掉了\",{\"1\":{\"4779\":1}}],[\"真正的值是储存在常量池中的\",{\"1\":{\"3236\":1}}],[\"真正解决异常\",{\"1\":{\"4681\":1}}],[\"真正实现了\",{\"1\":{\"3131\":1}}],[\"括号里的参数是构造方法的参数\",{\"1\":{\"4872\":1}}],[\"括起来的单个字符\",{\"1\":{\"3121\":1}}],[\"冬\",{\"1\":{\"4843\":1}}],[\"冬天喝温开水\",{\"1\":{\"10264\":1}}],[\"冬天来了\",{\"1\":{\"4874\":1}}],[\"冬天\",{\"1\":{\"4822\":1}}],[\"落叶\",{\"1\":{\"4843\":1}}],[\"秋天来了\",{\"1\":{\"4874\":1}}],[\"秋天\",{\"1\":{\"4872\":1}}],[\"秋\",{\"1\":{\"4843\":1}}],[\"夏天来了\",{\"1\":{\"4874\":1}}],[\"夏天\",{\"1\":{\"4872\":1}}],[\"夏\",{\"1\":{\"4843\":1}}],[\"春夏秋冬\",{\"1\":{\"4872\":1}}],[\"春天来了\",{\"1\":{\"4874\":1}}],[\"春天是交配的季节\",{\"1\":{\"4872\":1}}],[\"春天\",{\"1\":{\"4872\":2}}],[\"春\",{\"1\":{\"4843\":1,\"4845\":2}}],[\"春节\",{\"1\":{\"4822\":1}}],[\"阻止自动提交\",{\"1\":{\"8124\":1}}],[\"阻止类外随便造对象\",{\"1\":{\"4419\":1}}],[\"阻塞当前进程2秒钟\",{\"1\":{\"5221\":1}}],[\"阻塞\",{\"1\":{\"4825\":1,\"5228\":1,\"5291\":1,\"6344\":1}}],[\"退货\",{\"1\":{\"4824\":1}}],[\"退出程序\",{\"1\":{\"6445\":1}}],[\"退出循环\",{\"1\":{\"3382\":1}}],[\"退出\",{\"1\":{\"1397\":1}}],[\"信用卡\",{\"1\":{\"4823\":1}}],[\"信息\",{\"1\":{\"4255\":1}}],[\"季节\",{\"1\":{\"4822\":1}}],[\"够长\",{\"1\":{\"4809\":1}}],[\"您输入的数据非法\",{\"1\":{\"4803\":2}}],[\"告诉代码的调用者\",{\"1\":{\"4795\":1}}],[\"告知此字符串是否匹配给定的正则表达式\",{\"1\":{\"1523\":1}}],[\"谁声明在下无所谓\",{\"1\":{\"4758\":1}}],[\"资源文件等\",{\"1\":{\"9477\":1}}],[\"资源访问路径\",{\"1\":{\"9139\":1}}],[\"资源a现在无法处理该请求\",{\"1\":{\"9134\":1}}],[\"资源a处理完请求后将请求发给资源b\",{\"1\":{\"9106\":1}}],[\"资源b的访问路径\",{\"1\":{\"9139\":1}}],[\"资源b接收到请求后进行处理并最终给浏览器响应结果\",{\"1\":{\"9136\":1}}],[\"资源b路径\",{\"1\":{\"9112\":1}}],[\"资源b处理完后将结果响应给浏览器\",{\"1\":{\"9107\":1}}],[\"资源路径\",{\"1\":{\"8834\":2}}],[\"资源变动时\",{\"1\":{\"8596\":1}}],[\"资源分类\",{\"0\":{\"8399\":1}}],[\"资源重用\",{\"1\":{\"8237\":1}}],[\"资源的访问\",{\"1\":{\"9306\":1}}],[\"资源的关闭\",{\"1\":{\"7970\":1,\"7980\":1,\"7989\":1,\"8201\":1}}],[\"资源的地址\",{\"1\":{\"6865\":1}}],[\"资源的释放\",{\"0\":{\"4752\":1}}],[\"资源关闭\",{\"0\":{\"6279\":1}}],[\"资源\",{\"1\":{\"6206\":1,\"10652\":1}}],[\"资源不属于内存里的资源\",{\"1\":{\"6206\":1}}],[\"资源拥有\",{\"1\":{\"5085\":1}}],[\"资源耗尽等严重情况\",{\"1\":{\"4668\":1}}],[\"去修改数据表中指定的记录\",{\"1\":{\"8205\":1,\"8207\":1}}],[\"去重\",{\"0\":{\"7617\":1},\"1\":{\"7541\":1,\"7618\":1}}],[\"去catch中进行匹配\",{\"1\":{\"4737\":1}}],[\"去除重复元素\",{\"1\":{\"7618\":1}}],[\"去除桌面相关的api\",{\"1\":{\"2805\":1}}],[\"去除字符串首尾空白\",{\"1\":{\"1471\":1}}],[\"尝试捕获异常\",{\"1\":{\"4734\":1}}],[\"尝试捕获空指针异常\",{\"1\":{\"4734\":1}}],[\"尝试捕获数值类型异常\",{\"1\":{\"4734\":1}}],[\"捕获异常后\",{\"1\":{\"4740\":1}}],[\"捕获异常的有关信息\",{\"0\":{\"4739\":1}}],[\"捕获异常的第一步是用try\",{\"1\":{\"4728\":1}}],[\"捕获到了空指针异常\",{\"1\":{\"4734\":1}}],[\"捕获到了数值异常\",{\"1\":{\"4734\":1}}],[\"捕获错误最理想的是在\",{\"1\":{\"4697\":1}}],[\"角标越位异常\",{\"1\":{\"4751\":1}}],[\"角标越界\",{\"0\":{\"4710\":1}}],[\"角色信息\",{\"1\":{\"10726\":1}}],[\"角色为useradminanydatabase\",{\"1\":{\"10708\":1}}],[\"角色为root\",{\"1\":{\"10706\":1}}],[\"角色说明\",{\"0\":{\"10672\":1}}],[\"角色\",{\"0\":{\"10648\":1},\"1\":{\"10673\":1}}],[\"角色之前\",{\"1\":{\"10647\":1}}],[\"角色与权限\",{\"0\":{\"10634\":1}}],[\"角色名\",{\"1\":{\"10559\":1,\"10576\":1,\"10583\":1}}],[\"角色介绍\",{\"0\":{\"1409\":1}}],[\"角色分工\",{\"0\":{\"108\":1}}],[\"抓\",{\"1\":{\"4688\":1}}],[\"抛弃连接\",{\"1\":{\"8317\":1}}],[\"抛出的异常\",{\"1\":{\"6041\":1,\"7106\":1}}],[\"抛出异常的级别\",{\"1\":{\"10284\":1}}],[\"抛出异常可以省掉很多if\",{\"1\":{\"4794\":1}}],[\"抛出异常和返回一个特殊值\",{\"1\":{\"4794\":1}}],[\"抛出异常\",{\"1\":{\"2549\":1}}],[\"抛\",{\"1\":{\"4687\":1}}],[\"臃肿\",{\"1\":{\"4683\":1}}],[\"试图读取不存在的文件\",{\"1\":{\"4673\":1}}],[\"含变量的类型\",{\"1\":{\"4649\":1}}],[\"含有抽象方法的类必须被声明为抽象类\",{\"1\":{\"4449\":1}}],[\"虚拟目录\",{\"1\":{\"8476\":1}}],[\"虚拟机会保证一个类的<clinit>\",{\"1\":{\"7020\":1}}],[\"虚拟机常量池内的符号引用\",{\"1\":{\"7016\":1}}],[\"虚拟机检测到程序发生了问题\",{\"1\":{\"4690\":1}}],[\"虚拟机栈用于存储局部变量等\",{\"1\":{\"4633\":1}}],[\"虚拟方法调用举例\",{\"0\":{\"4151\":1}}],[\"虚拟方法调用\",{\"0\":{\"4146\":1}}],[\"虚拟方法的调用\",{\"0\":{\"4143\":1}}],[\"枚举与注解\",{\"0\":{\"10883\":1}}],[\"枚举对象间用逗号分割\",{\"1\":{\"4872\":1}}],[\"枚举对象如果有属性\",{\"1\":{\"4856\":1}}],[\"枚举动\",{\"1\":{\"4832\":1}}],[\"枚举类中也可以定义普通方法\",{\"1\":{\"4872\":1}}],[\"枚举类默认继承了\",{\"1\":{\"4851\":1}}],[\"枚举类的私有化构造函数\",{\"1\":{\"4872\":1}}],[\"枚举类的private\",{\"1\":{\"4872\":1}}],[\"枚举类的对象必须创建在开头\",{\"1\":{\"4872\":1}}],[\"枚举类的所有实例必须在枚举类中显式列出\",{\"1\":{\"4853\":1}}],[\"枚举类的构造器只能使用\",{\"1\":{\"4852\":1}}],[\"枚举类的使用\",{\"1\":{\"4833\":1}}],[\"枚举类的实现\",{\"0\":{\"4828\":1}}],[\"枚举类的特点\",{\"0\":{\"4826\":1}}],[\"枚举类\",{\"0\":{\"4817\":1}}],[\"枚举类型\",{\"1\":{\"3367\":1,\"4932\":1,\"4959\":1,\"4963\":1,\"4981\":1}}],[\"枚举\",{\"0\":{\"4816\":1},\"1\":{\"4624\":1,\"4991\":1,\"6985\":1,\"9642\":1}}],[\"连续添加10次数据\",{\"1\":{\"5653\":1}}],[\"连续操作\",{\"0\":{\"4618\":1}}],[\"连接分片集群\",{\"0\":{\"10821\":1}}],[\"连接前\",{\"1\":{\"10812\":1}}],[\"连接时需要勾选direct\",{\"1\":{\"10808\":1}}],[\"连接其他节点需要进行初始化\",{\"1\":{\"10803\":1}}],[\"连接单实例\",{\"0\":{\"10796\":1},\"1\":{\"10797\":1}}],[\"连接的是整个副本集\",{\"1\":{\"10792\":1}}],[\"连接的serversocket\",{\"1\":{\"6812\":1}}],[\"连接方式\",{\"0\":{\"10787\":1}}],[\"连接副本集\",{\"0\":{\"10590\":1,\"10598\":1,\"10779\":1,\"10801\":1}}],[\"连接后查看\",{\"0\":{\"10519\":1}}],[\"连接节点\",{\"0\":{\"10516\":1}}],[\"连接上任意一个节点后\",{\"1\":{\"10515\":1}}],[\"连接与断开mongodb连接相关\",{\"1\":{\"10194\":1}}],[\"连接mongodb\",{\"0\":{\"10171\":1},\"1\":{\"10705\":1,\"10786\":1}}],[\"连接池应该放到之前建立的jdbc功能类\",{\"1\":{\"8323\":1}}],[\"连接池的最大数据库连接数量限定了这个连接池能占有的最大连接数\",{\"1\":{\"8230\":1}}],[\"连接池都将一直保证至少拥有这么多的连接数量\",{\"1\":{\"8230\":1}}],[\"连接池介绍\",{\"0\":{\"8212\":1}}],[\"连接池\",{\"0\":{\"8142\":1}}],[\"连接创建的细节被隐藏了\",{\"1\":{\"6918\":1}}],[\"连接断开\",{\"1\":{\"6752\":1}}],[\"连接usb\",{\"1\":{\"4513\":1}}],[\"连接运算\",{\"1\":{\"4290\":1,\"4292\":1}}],[\"连接字符串\",{\"1\":{\"1474\":1}}],[\"连接数据库的密码\",{\"1\":{\"8276\":1}}],[\"连接数据库的用户名\",{\"1\":{\"8274\":1}}],[\"连接数据库的用户名密码\",{\"1\":{\"7840\":1}}],[\"连接数据库的url\",{\"1\":{\"8272\":1}}],[\"连接数据库\",{\"0\":{\"7813\":1,\"7849\":1},\"1\":{\"1100\":1,\"1112\":1,\"4142\":1,\"7809\":1,\"7837\":1,\"8233\":1}}],[\"连接\",{\"0\":{\"10185\":1},\"1\":{\"486\":1,\"6166\":1,\"6184\":1}}],[\"抽取的基类\",{\"1\":{\"4605\":1}}],[\"抽象接口\",{\"1\":{\"7809\":1}}],[\"抽象角色中\",{\"1\":{\"7215\":1}}],[\"抽象基类\",{\"0\":{\"6167\":1}}],[\"抽象方法的返回值类型即为构造器所属的类的类型\",{\"1\":{\"7503\":1}}],[\"抽象方法只有方法的声明\",{\"1\":{\"4449\":1}}],[\"抽象方法\",{\"0\":{\"4447\":1},\"1\":{\"4489\":1,\"4491\":1,\"5559\":1}}],[\"抽象类可用于模板方法设计模式\",{\"1\":{\"4461\":1}}],[\"抽象类不一定有抽象方法\",{\"1\":{\"4453\":1}}],[\"抽象类中还是存在构造器的\",{\"1\":{\"4445\":1}}],[\"抽象类\",{\"0\":{\"4443\":1}}],[\"抽象类与接口\",{\"0\":{\"4441\":1}}],[\"抽象概念的人\",{\"1\":{\"3620\":1}}],[\"业务流程\",{\"0\":{\"9563\":1}}],[\"业务模型\",{\"1\":{\"9539\":1}}],[\"业务处理完后\",{\"1\":{\"8895\":1}}],[\"业务逻辑层\",{\"1\":{\"9557\":1,\"9559\":1,\"9568\":1,\"9573\":1,\"9579\":1,\"9584\":1}}],[\"业务逻辑就是写在该方法内的\",{\"1\":{\"8770\":1}}],[\"业务逻辑\",{\"0\":{\"4600\":1}}],[\"业务层必须进行test测试\",{\"1\":{\"1270\":1}}],[\"业务层实现类\",{\"0\":{\"1264\":1}}],[\"业务层接口\",{\"0\":{\"1262\":1}}],[\"业务层\",{\"0\":{\"1257\":1}}],[\"怎么办\",{\"1\":{\"4586\":1}}],[\"遵循常用的命名规则即可\",{\"1\":{\"9616\":1}}],[\"遵循标识符的命名规则\",{\"1\":{\"3930\":1}}],[\"遵循标识符的规则和规范\",{\"1\":{\"3725\":1}}],[\"遵守上述约定的类可以用于若干工具或库\",{\"1\":{\"4577\":1}}],[\"北京\",{\"1\":{\"4523\":1}}],[\"断开数据库\",{\"1\":{\"8234\":1}}],[\"断开数据库连接\",{\"1\":{\"8217\":1}}],[\"断开客户端到服务器的连接\",{\"1\":{\"6797\":1}}],[\"断开usb\",{\"1\":{\"4513\":1}}],[\"断点续传\",{\"0\":{\"6527\":1}}],[\"断电==\",{\"1\":{\"5118\":1}}],[\"断定型\",{\"1\":{\"2641\":1,\"7435\":1}}],[\"宽\",{\"1\":{\"4513\":1}}],[\"宽松绑定\",{\"0\":{\"615\":1,\"619\":1}}],[\"几乎一切操作\",{\"1\":{\"7541\":1}}],[\"几乎所有的设计模式都是面向接口编程的\",{\"1\":{\"4503\":1}}],[\"几何函数\",{\"0\":{\"1833\":1}}],[\"仍会在异常代码处生成一个异常类的对象\",{\"1\":{\"4771\":1}}],[\"仍然调用的是重写以后的方法\",{\"1\":{\"4530\":1}}],[\"仍需定义为抽象类\",{\"1\":{\"4501\":1}}],[\"仍可以调用\",{\"1\":{\"3405\":1}}],[\"制定好后大家都要遵守\",{\"1\":{\"4481\":1}}],[\"制作业务层测试类\",{\"1\":{\"1190\":1}}],[\"制作数据层测试\",{\"1\":{\"1189\":1}}],[\"鼠标\",{\"1\":{\"4478\":1}}],[\"挂哪个子类\",{\"1\":{\"4469\":1}}],[\"办理具体的业务\",{\"1\":{\"4469\":1}}],[\"预先在缓冲池中放入一定数量的连接\",{\"1\":{\"8227\":1}}],[\"预编译字符串示例\",{\"1\":{\"7952\":1}}],[\"预编译sql语句\",{\"0\":{\"7949\":1},\"1\":{\"7970\":1,\"7980\":1,\"7989\":1,\"8146\":1,\"8201\":1}}],[\"预编译sql语句与占位符\",{\"0\":{\"7948\":1}}],[\"预约取号\",{\"1\":{\"4468\":1}}],[\"预设好了几乎所有依赖的版本\",{\"1\":{\"418\":1}}],[\"银行卡\",{\"1\":{\"4823\":1}}],[\"银行的业务流程是固定的\",{\"1\":{\"4468\":1}}],[\"银行业务流程\",{\"0\":{\"4467\":1}}],[\"花费的时间为\",{\"1\":{\"4466\":1,\"8113\":1,\"8121\":1}}],[\"易变的部分\",{\"1\":{\"4466\":1}}],[\"易变部分可以抽象出来\",{\"1\":{\"4463\":1}}],[\"供开发商开发数据库驱动程序用\",{\"1\":{\"7810\":1}}],[\"供应用程序开发人员使用\",{\"1\":{\"7809\":1}}],[\"供应者\",{\"1\":{\"7592\":1}}],[\"供不同子类实现\",{\"1\":{\"4463\":1}}],[\"供给了一个值\",{\"1\":{\"2635\":1,\"7431\":1}}],[\"供给型\",{\"1\":{\"2635\":1,\"7431\":1}}],[\"达到匿名对象同样的效果\",{\"1\":{\"4458\":1}}],[\"达到简化配置的目的\",{\"1\":{\"416\":1}}],[\"回车\",{\"1\":{\"10530\":1}}],[\"回滚事务\",{\"0\":{\"8137\":1}}],[\"回收站一直维护着仅有的一个实例\",{\"1\":{\"4440\":1}}],[\"回收站\",{\"1\":{\"4440\":1}}],[\"回头再学\",{\"1\":{\"8\":1}}],[\"网络\",{\"1\":{\"9633\":1}}],[\"网络上具有唯一标识的ip地址和端口号组合在一起才能构成唯一能识别的标识符套接字\",{\"1\":{\"6757\":1}}],[\"网络协议\",{\"0\":{\"6712\":1}}],[\"网络通信三要素\",{\"0\":{\"8409\":1}}],[\"网络通信其实就是socket间的通信\",{\"1\":{\"6759\":1}}],[\"网络通信协议\",{\"0\":{\"6656\":1,\"6713\":1,\"6714\":1},\"1\":{\"6650\":1,\"6653\":1}}],[\"网络通信的要素\",{\"0\":{\"6648\":1}}],[\"网络通讯等\",{\"1\":{\"6150\":1}}],[\"网络基础\",{\"0\":{\"6642\":1}}],[\"网络编程中的主要问题\",{\"1\":{\"6645\":1}}],[\"网络编程的目的\",{\"1\":{\"6644\":1}}],[\"网络编程\",{\"0\":{\"10887\":1},\"1\":{\"6346\":1}}],[\"网络编程socket等资源\",{\"1\":{\"4746\":1}}],[\"网络连接中断\",{\"1\":{\"4673\":1}}],[\"网络问题\",{\"0\":{\"326\":1}}],[\"网站的计数器\",{\"1\":{\"4434\":1}}],[\"延迟了数组的创建\",{\"1\":{\"5662\":1}}],[\"延迟到运行时出现\",{\"1\":{\"4762\":1}}],[\"延迟对象的创建\",{\"1\":{\"4431\":1}}],[\"延展\",{\"1\":{\"4007\":1}}],[\"懒汉式\",{\"0\":{\"4423\":1},\"1\":{\"4430\":1}}],[\"私有端口\",{\"1\":{\"6685\":1}}],[\"私有地址\",{\"1\":{\"6671\":1}}],[\"私有化类的构造器\",{\"1\":{\"4419\":1,\"4422\":1,\"4425\":1,\"4838\":1,\"4843\":1,\"5350\":1}}],[\"私有属性无权访问\",{\"1\":{\"3821\":1}}],[\"饿汉式是线程安全的\",{\"1\":{\"4429\":1}}],[\"饿汉式和懒汉式的对比\",{\"0\":{\"4426\":1}}],[\"饿汉式\",{\"0\":{\"4418\":1},\"1\":{\"4427\":1}}],[\"产生背景\",{\"0\":{\"7733\":1}}],[\"产生一个新流\",{\"1\":{\"7668\":1,\"7672\":1}}],[\"产生一个新的\",{\"1\":{\"7636\":1,\"7639\":1,\"7642\":1}}],[\"产生编译错误\",{\"1\":{\"6070\":1}}],[\"产生死锁可能性的最根本原因是\",{\"1\":{\"5424\":1}}],[\"产生内存空间==\",{\"1\":{\"5118\":1}}],[\"产生其他依赖对象时\",{\"1\":{\"4417\":1}}],[\"产品原型等\",{\"1\":{\"110\":1}}],[\"产品经理\",{\"1\":{\"110\":1}}],[\"习惯上声明为static的\",{\"1\":{\"4410\":1}}],[\"又在剩下的从节点中选中其他节点为\",{\"1\":{\"10448\":1}}],[\"又相当的灵活\",{\"1\":{\"10077\":1}}],[\"又分两类分别存放在两个地方\",{\"1\":{\"9492\":1}}],[\"又分为两种形式\",{\"1\":{\"4677\":1}}],[\"又称正向索引\",{\"1\":{\"9921\":1}}],[\"又称增强for循环\",{\"1\":{\"5607\":1}}],[\"又称为静态变量\",{\"1\":{\"4376\":1}}],[\"又可以使用post方法访问\",{\"1\":{\"8999\":1}}],[\"又可以使用if\",{\"1\":{\"3324\":1,\"3376\":1}}],[\"又可以作为一个输出流\",{\"1\":{\"6489\":1}}],[\"又可以作为future得到callable的返回值\",{\"1\":{\"5477\":1}}],[\"又去申请获得锁l2\",{\"1\":{\"5424\":1}}],[\"又提出请求使用正被p1占用着的输入设备\",{\"1\":{\"5416\":1}}],[\"又叫main线程\",{\"1\":{\"5159\":1}}],[\"又因为可能会产生异常\",{\"1\":{\"7059\":1}}],[\"又因为main\",{\"1\":{\"4617\":1}}],[\"又因为java虚拟机在执行main\",{\"1\":{\"4616\":1}}],[\"匿名函数\",{\"1\":{\"7336\":1}}],[\"匿名内部类\",{\"1\":{\"6982\":1}}],[\"匿名内部类的类体部分\",{\"1\":{\"4349\":1}}],[\"匿名方法\",{\"1\":{\"4459\":1}}],[\"匿名类对象只能使用多态形式引用\",{\"1\":{\"4353\":1}}],[\"匿名类只能有一个对象\",{\"1\":{\"4352\":1}}],[\"匿名类必须继承父类或实现接口\",{\"1\":{\"4351\":1}}],[\"匿名类不能定义任何静态成员\",{\"1\":{\"4347\":1}}],[\"匿名类\",{\"0\":{\"4346\":1},\"1\":{\"4459\":1}}],[\"匿名对象只能调用一次\",{\"1\":{\"3662\":1}}],[\"匿名对象\",{\"0\":{\"3660\":1},\"1\":{\"4513\":1}}],[\"拆箱\",{\"1\":{\"4279\":1}}],[\"拆分的数目\",{\"1\":{\"2759\":1}}],[\"纯数值的字符串也可以作为参数\",{\"1\":{\"4274\":1}}],[\"纯理论知识\",{\"1\":{\"8\":1}}],[\"装载jdbc驱动程序等常规工作的工具类\",{\"1\":{\"8339\":1}}],[\"装载进内存的\",{\"1\":{\"7037\":1}}],[\"装载时进行新旧字符的替换\",{\"1\":{\"2055\":1,\"6262\":1}}],[\"装箱\",{\"1\":{\"4272\":1}}],[\"久而久之\",{\"1\":{\"4244\":1}}],[\"永远返回是\",{\"1\":{\"4240\":2}}],[\"永远满足\",{\"1\":{\"3385\":1}}],[\"像数据库连接\",{\"1\":{\"4746\":1}}],[\"像个钩子\",{\"1\":{\"4469\":2}}],[\"像string\",{\"1\":{\"4232\":1,\"4255\":1}}],[\"像日期和时间这样的类应该是不可变的\",{\"1\":{\"1617\":1}}],[\"克隆\",{\"1\":{\"4209\":1}}],[\"隔代转型\",{\"0\":{\"4193\":1}}],[\"随用随调\",{\"1\":{\"7423\":1}}],[\"随便定义\",{\"1\":{\"4809\":1}}],[\"随便转\",{\"1\":{\"4177\":1}}],[\"随着微服务成为主流\",{\"1\":{\"9530\":1}}],[\"随着\",{\"1\":{\"6589\":1}}],[\"随着对象的创建而执行\",{\"1\":{\"4563\":1}}],[\"随着类的加载而执行\",{\"1\":{\"4556\":1}}],[\"随着类的加载而加载\",{\"1\":{\"4370\":1}}],[\"随机访问\",{\"1\":{\"6491\":1}}],[\"随机访问机制\",{\"0\":{\"6490\":1}}],[\"随机存储文件流\",{\"0\":{\"6488\":1},\"1\":{\"6489\":1}}],[\"随机排序\",{\"1\":{\"2486\":1}}],[\"随机数的精确度为\",{\"1\":{\"1803\":1}}],[\"随机数的范围是\",{\"1\":{\"1802\":1}}],[\"随机数\",{\"0\":{\"1801\":1}}],[\"晚绑定\",{\"1\":{\"4158\":2}}],[\"各司其职\",{\"1\":{\"9551\":1}}],[\"各层互不影响\",{\"1\":{\"6720\":1}}],[\"各种有自己的内存空间\",{\"1\":{\"4645\":1}}],[\"各种类型的数据操作接口\",{\"1\":{\"1030\":1}}],[\"各个子类重写了welcome\",{\"1\":{\"4152\":1}}],[\"太繁琐了\",{\"1\":{\"7423\":1}}],[\"太冗余了\",{\"1\":{\"4136\":1,\"9000\":1}}],[\"太麻烦了\",{\"1\":{\"884\":1}}],[\"经过实测\",{\"1\":{\"10288\":1}}],[\"经过简单的循环向字符串中添加数字\",{\"1\":{\"1563\":1}}],[\"经验\",{\"1\":{\"6007\":1}}],[\"经常需要强制类型转换\",{\"1\":{\"5940\":1}}],[\"经常创建和销毁\",{\"1\":{\"5490\":1}}],[\"经常把run\",{\"1\":{\"5173\":1}}],[\"经常要在可能出现错误的地方加上检测的代码\",{\"1\":{\"4683\":1}}],[\"经常会遇到这样的情景\",{\"1\":{\"4136\":1}}],[\"外部dtd\",{\"1\":{\"9633\":1}}],[\"外部集合内嵌套了班级集合\",{\"1\":{\"7661\":1}}],[\"外部类\",{\"1\":{\"6982\":1}}],[\"外部类访问成员内部类的成员\",{\"1\":{\"4322\":1}}],[\"外部类不能由private和protected修饰\",{\"1\":{\"4315\":1}}],[\"外循环是用来循环读取数据的\",{\"1\":{\"6257\":1}}],[\"外其他完全一样的方法了\",{\"1\":{\"4135\":1}}],[\"外层元素本质上是一维数组\",{\"1\":{\"3581\":1}}],[\"外层元素的初始化值为\",{\"1\":{\"3573\":1,\"3576\":1}}],[\"外层元素的个数\",{\"1\":{\"3565\":1}}],[\"外层元素的值是一个一维数组\",{\"1\":{\"3554\":1}}],[\"外层元素能访问\",{\"1\":{\"3563\":1}}],[\"外层元素必须初始化\",{\"1\":{\"3559\":1}}],[\"外层2个元素\",{\"1\":{\"3545\":1}}],[\"外层数组的长度\",{\"1\":{\"3565\":1,\"3567\":1}}],[\"外层数组元素的值是一个内存地址\",{\"1\":{\"3583\":1}}],[\"外层数组元素\",{\"1\":{\"3537\":1}}],[\"外层数组\",{\"1\":{\"3535\":1}}],[\"外层循环控制行数\",{\"1\":{\"3449\":1}}],[\"看下三个mongodb服务是否启动成功\",{\"1\":{\"10510\":1}}],[\"看到string类\",{\"1\":{\"4244\":1}}],[\"看的是子类的对象\",{\"1\":{\"4122\":1}}],[\"看的是父类的引用\",{\"1\":{\"4121\":1}}],[\"看右边\",{\"1\":{\"4122\":1}}],[\"看左边\",{\"1\":{\"4121\":1}}],[\"至此\",{\"1\":{\"6747\":1}}],[\"至于\",{\"1\":{\"4956\":1}}],[\"至于系统是否立刻回收\",{\"1\":{\"2309\":1}}],[\"至少有一个类的构造器中使用了\",{\"1\":{\"4100\":1}}],[\"虽然在某\",{\"1\":{\"10445\":1}}],[\"虽然started成功\",{\"1\":{\"9900\":1}}],[\"虽然后台从\",{\"1\":{\"9126\":1}}],[\"虽然已经能完成要求\",{\"1\":{\"8786\":1}}],[\"虽然不能实例化\",{\"1\":{\"4445\":1}}],[\"虽然创建子类对象时\",{\"1\":{\"4113\":1}}],[\"虽然调用了父类的构造器\",{\"1\":{\"4090\":1}}],[\"虽然是数组\",{\"1\":{\"3558\":1}}],[\"假如使用session储存登陆信息\",{\"1\":{\"9783\":1}}],[\"假如\",{\"1\":{\"8503\":1,\"8999\":1}}],[\"假如定义了泛型标识e\",{\"1\":{\"6037\":1}}],[\"假如把while\",{\"1\":{\"5327\":1}}],[\"假如是4核cpu\",{\"1\":{\"5099\":1}}],[\"假如某一天\",{\"1\":{\"4586\":1}}],[\"假如父类也有这个方法\",{\"1\":{\"4083\":1}}],[\"假设查询为一个关键词\",{\"1\":{\"9921\":1}}],[\"假设在一个tomcat服务器中\",{\"1\":{\"9729\":1}}],[\"假设在32位平台\",{\"1\":{\"5129\":1}}],[\"假设我们的集合需要存放学生的成绩\",{\"1\":{\"5963\":1}}],[\"假设有一个银行账户里有3000元\",{\"1\":{\"5300\":1}}],[\"假设有person类\",{\"1\":{\"3657\":1}}],[\"假设外层循环需要执行m次\",{\"1\":{\"3449\":1}}],[\"间接父类\",{\"1\":{\"4019\":1}}],[\"间接继承的父类称为\",{\"1\":{\"4019\":1}}],[\"间的随机数\",{\"1\":{\"1805\":1}}],[\"称为单字段索引\",{\"1\":{\"10365\":1}}],[\"称为动态资源\",{\"1\":{\"8402\":1}}],[\"称为静态资源\",{\"1\":{\"8400\":1}}],[\"称为外部迭代\",{\"1\":{\"7699\":1}}],[\"称为函数式接口\",{\"1\":{\"7396\":1}}],[\"称为向下转型\",{\"1\":{\"4173\":1}}],[\"称为多态\",{\"1\":{\"4172\":1}}],[\"称为\",{\"1\":{\"4019\":1,\"4552\":1,\"7598\":1}}],[\"超级权限\",{\"1\":{\"10698\":1}}],[\"超级账号\",{\"1\":{\"10698\":1}}],[\"超级用户角色\",{\"1\":{\"10670\":1}}],[\"超链接\",{\"1\":{\"9166\":1}}],[\"超类\",{\"1\":{\"4003\":1}}],[\"超过时限则放弃对该锁的请求\",{\"1\":{\"5413\":1}}],[\"超过范围的索引\",{\"1\":{\"3587\":1}}],[\"超过一个字符会报错\",{\"1\":{\"3117\":1}}],[\"超过该大小就新建日志文件\",{\"1\":{\"936\":1}}],[\"派生类\",{\"1\":{\"4002\":1}}],[\"出了作用域自动释放\",{\"1\":{\"5400\":1}}],[\"出了for循环就失效了\",{\"1\":{\"3394\":1}}],[\"出现了第三方api\",{\"1\":{\"7854\":1}}],[\"出现之前\",{\"1\":{\"6426\":1}}],[\"出现死锁后\",{\"1\":{\"5408\":1}}],[\"出现重复票\",{\"1\":{\"5303\":1}}],[\"出现异常\",{\"1\":{\"4771\":1}}],[\"出错控制等制定标准\",{\"1\":{\"6716\":1}}],[\"出错\",{\"1\":{\"3987\":1}}],[\"层级可以用包名的点区分\",{\"1\":{\"3931\":1}}],[\"层层进\",{\"1\":{\"3555\":1}}],[\"顶层包名\",{\"1\":{\"3928\":1}}],[\"划分项目层次\",{\"1\":{\"3921\":1}}],[\"划分成base类加载器与restart类加载器\",{\"1\":{\"538\":1}}],[\"互不影响\",{\"1\":{\"9551\":1,\"9667\":1}}],[\"互不干扰\",{\"1\":{\"3961\":1,\"4653\":1}}],[\"互补\",{\"1\":{\"7625\":1}}],[\"互相干扰\",{\"1\":{\"4654\":1,\"4660\":1}}],[\"互相this\",{\"1\":{\"3903\":1}}],[\"互为引用\",{\"1\":{\"4654\":1,\"4660\":1}}],[\"互斥\",{\"1\":{\"3354\":1}}],[\"父file对象\",{\"1\":{\"6138\":1}}],[\"父路径\",{\"1\":{\"6134\":1}}],[\"父子类之间出现了同名的方法或属性\",{\"1\":{\"4076\":1}}],[\"父类有泛型\",{\"1\":{\"6015\":1}}],[\"父类构造器\",{\"1\":{\"4349\":1}}],[\"父类转子类\",{\"0\":{\"4179\":1},\"1\":{\"4173\":1}}],[\"父类根据赋给它的不同子类对象\",{\"1\":{\"4147\":1}}],[\"父类中不具备子类特有的方法\",{\"1\":{\"4121\":1}}],[\"父类中的空参构造器就会被删除\",{\"1\":{\"4103\":1}}],[\"父类中的叫被重写的方法\",{\"1\":{\"4043\":1}}],[\"父类没有空构造器的情况\",{\"0\":{\"4101\":1}}],[\"父类也有这个属性\",{\"1\":{\"4080\":1}}],[\"父类被重写的方法的返回值类型是基本数据类型\",{\"1\":{\"4052\":1}}],[\"父类被重写的方法的返回值类型是a类型\",{\"1\":{\"4051\":1}}],[\"父类被重写的方法的返回值类型是void\",{\"1\":{\"4050\":1}}],[\"父类实例\",{\"1\":{\"4030\":1}}],[\"父类的引用必须指向子类的对象\",{\"1\":{\"4180\":1}}],[\"父类的引用指向子类的对象\",{\"1\":{\"4117\":1}}],[\"父类的引用指向子类的方法\",{\"1\":{\"4065\":1}}],[\"父类的父类也是父类\",{\"1\":{\"4018\":1}}],[\"父类的构造器不可被子类继承\",{\"1\":{\"3880\":1}}],[\"父类\",{\"1\":{\"4003\":1,\"4118\":1,\"4129\":1,\"4133\":1}}],[\"父工程规定项目所需依赖的版本\",{\"1\":{\"386\":1}}],[\"隐式无参构造器\",{\"1\":{\"3865\":1}}],[\"隐藏一个类中不需要对外提供的实现细节\",{\"1\":{\"3824\":1}}],[\"隐藏对象内部的复杂性\",{\"1\":{\"3813\":1}}],[\"隐藏非必要文件\",{\"0\":{\"1075\":1}}],[\"隐藏无用的文件\",{\"0\":{\"353\":1}}],[\"过期时间\",{\"1\":{\"9710\":1}}],[\"过程\",{\"0\":{\"9547\":1}}],[\"过去由于并未通过微服务将机器资源进行隔离\",{\"1\":{\"9529\":1}}],[\"过于冗余\",{\"1\":{\"7209\":1}}],[\"过多的if\",{\"1\":{\"4683\":1}}],[\"过滤器的优先级\",{\"0\":{\"9309\":1}}],[\"过滤器2\",{\"1\":{\"9305\":1,\"9307\":1}}],[\"过滤器1\",{\"1\":{\"9304\":1,\"9308\":1}}],[\"过滤器链\",{\"0\":{\"9299\":1}}],[\"过滤器都会被执行\",{\"1\":{\"9286\":1}}],[\"过滤器正常关闭前的操作\",{\"1\":{\"9270\":1}}],[\"过滤和映射数据等操作\",{\"1\":{\"7544\":1}}],[\"过滤\",{\"1\":{\"3856\":1,\"7541\":1,\"8875\":1}}],[\"过时了\",{\"1\":{\"830\":1}}],[\"禁止访问非public修饰的类内部成员\",{\"1\":{\"7189\":1}}],[\"禁止外部访问\",{\"1\":{\"3820\":1}}],[\"禁用此套接字的输出流\",{\"1\":{\"6782\":1}}],[\"禁用\",{\"1\":{\"1334\":1,\"1346\":1,\"1398\":1}}],[\"混乱或安全性问题\",{\"1\":{\"3815\":1}}],[\"尽力而为\",{\"1\":{\"6765\":1}}],[\"尽可能保持一致性\",{\"1\":{\"5757\":1}}],[\"尽量不要选别的路径\",{\"1\":{\"9509\":1}}],[\"尽量不要在servlet中定义成员变量\",{\"1\":{\"8755\":1}}],[\"尽量避免嵌套同步\",{\"1\":{\"5412\":1}}],[\"尽量减少同步资源的定义\",{\"1\":{\"5411\":1}}],[\"尽量使用第一种写法\",{\"1\":{\"3806\":1}}],[\"尽管有68个新的公开类型\",{\"1\":{\"1631\":1}}],[\"机制\",{\"1\":{\"3790\":1}}],[\"机器语言\",{\"1\":{\"2833\":1}}],[\"传统数据库的缺点\",{\"0\":{\"9853\":1}}],[\"传统的模式基本是按以下步骤\",{\"0\":{\"8214\":1}}],[\"传输协议\",{\"1\":{\"6879\":1,\"8412\":1}}],[\"传输协议>\",{\"1\":{\"6869\":1}}],[\"传输完毕\",{\"1\":{\"6735\":1}}],[\"传输前\",{\"1\":{\"6732\":1}}],[\"传输层和应用层\",{\"1\":{\"6728\":1}}],[\"传输层协议中有两个非常重要的协议\",{\"1\":{\"6723\":1}}],[\"传输层协议\",{\"0\":{\"6722\":1}}],[\"传输控制协议\",{\"1\":{\"6727\":1}}],[\"传输控制协议tcp\",{\"1\":{\"6724\":1}}],[\"传输控制步骤\",{\"1\":{\"6716\":1}}],[\"传输代码\",{\"1\":{\"6716\":1}}],[\"传参\",{\"1\":{\"4287\":1}}],[\"传递了进去\",{\"1\":{\"5268\":1}}],[\"传递性\",{\"1\":{\"4238\":1}}],[\"传递的参数有符合条件的非可变形参方法\",{\"1\":{\"3800\":1}}],[\"传递完之后\",{\"1\":{\"3780\":1}}],[\"传入我们想用的数据库对象\",{\"1\":{\"4142\":1}}],[\"传入的参数个数可以是\",{\"1\":{\"3795\":1}}],[\"传入方法内\",{\"1\":{\"3778\":1}}],[\"传入模糊查询的条件作为参数\",{\"1\":{\"1248\":1}}],[\"跟日志相关的配置\",{\"1\":{\"8263\":1}}],[\"跟服务器的交互太频繁\",{\"1\":{\"8116\":1}}],[\"跟泛型无关\",{\"1\":{\"7379\":1}}],[\"跟上面区别不大\",{\"1\":{\"6355\":1}}],[\"跟方法的权限修饰符\",{\"1\":{\"3757\":1}}],[\"跟本地时间有关的类有三个\",{\"1\":{\"1633\":1}}],[\"允许多台服务器协同工作\",{\"1\":{\"9840\":1}}],[\"允许conn为null\",{\"1\":{\"8344\":1}}],[\"允许操作封装的类结构\",{\"0\":{\"7182\":1}}],[\"允许读取数据\",{\"1\":{\"6072\":1}}],[\"允许我们在创建集合时再指定集合元素的类型\",{\"1\":{\"5947\":1}}],[\"允许使用null键和null值\",{\"1\":{\"5816\":1}}],[\"允许直接定义能和多个实参相匹配的形参\",{\"1\":{\"3790\":1}}],[\"允许存在一个以上的同名方法\",{\"1\":{\"3757\":1}}],[\"允许在表达式中使用空格和注释\",{\"1\":{\"2737\":1}}],[\"允许在程序运行时进行自动构建\",{\"0\":{\"561\":1}}],[\"岁\",{\"1\":{\"3747\":1}}],[\"递归一定要向已知方向递归\",{\"1\":{\"3752\":1}}],[\"递归方法\",{\"0\":{\"3748\":1}}],[\"递归\",{\"1\":{\"3745\":1}}],[\"递归创建文件目录\",{\"1\":{\"2008\":1}}],[\"交互方法\",{\"0\":{\"6900\":1}}],[\"交替打印\",{\"1\":{\"5435\":1,\"5463\":1}}],[\"交替遍历\",{\"1\":{\"5191\":1}}],[\"交配季节\",{\"1\":{\"4843\":1,\"4845\":2}}],[\"交换两个变量的值\",{\"1\":{\"3786\":1}}],[\"交换两个变量\",{\"1\":{\"3781\":1}}],[\"交换元素位置\",{\"1\":{\"2494\":1}}],[\"交由调用者处理\",{\"1\":{\"3742\":1}}],[\"针对\",{\"1\":{\"8205\":1,\"8207\":1}}],[\"针对指定的id查询得到对应的customer对象\",{\"1\":{\"8205\":1,\"8207\":1}}],[\"针对指定的id\",{\"1\":{\"8205\":1,\"8207\":1}}],[\"针对custom表的通用查询操作\",{\"0\":{\"8043\":1}}],[\"针对企业客户的需求\",{\"1\":{\"7313\":1}}],[\"针对不同表\",{\"0\":{\"8052\":1}}],[\"针对不同的字符类型会有不同的字符集\",{\"1\":{\"3128\":1}}],[\"针对不同的数据类型和排序方式\",{\"1\":{\"2358\":1}}],[\"针对不通的方法进行增强\",{\"0\":{\"7252\":1}}],[\"针对任何你想动态加载\",{\"1\":{\"6980\":1}}],[\"针对于不同的表的通用的查询操作\",{\"1\":{\"8053\":1}}],[\"针对于编译时异常\",{\"1\":{\"4762\":1}}],[\"针对于有返回值类型的方法\",{\"1\":{\"3733\":1}}],[\"针对八种基本数据类型定义相应的引用类型\",{\"1\":{\"4265\":1}}],[\"功能很直观\",{\"1\":{\"10192\":1}}],[\"功能设计\",{\"0\":{\"7983\":1}}],[\"功能也一样\",{\"1\":{\"7467\":1}}],[\"功能也相同\",{\"1\":{\"5836\":1}}],[\"功能强的网络系统\",{\"1\":{\"6643\":1}}],[\"功能\",{\"0\":{\"4477\":1},\"1\":{\"5450\":1}}],[\"功能封装为方法的目的是\",{\"1\":{\"3715\":1}}],[\"功能清单\",{\"0\":{\"1395\":1}}],[\"描述\",{\"1\":{\"10086\":1}}],[\"描述了目录结构中文件的位置\",{\"1\":{\"6593\":1}}],[\"描述类应该具有的功能\",{\"1\":{\"3714\":1}}],[\"描述信息\",{\"1\":{\"1338\":1,\"1340\":1}}],[\"④属性\",{\"1\":{\"9617\":1}}],[\"④拼接预编译sql字符串\",{\"1\":{\"7936\":1}}],[\"④获取代理对象后\",{\"1\":{\"7240\":1}}],[\"④将此callable接口实现类的对象作为参数传递到futuretask构造器中\",{\"1\":{\"5482\":1}}],[\"④线程池\",{\"1\":{\"5148\":1}}],[\"④其他操作\",{\"1\":{\"4860\":1}}],[\"④\",{\"1\":{\"3711\":1,\"3887\":1}}],[\"④有了对象以后\",{\"1\":{\"3709\":1}}],[\"③标签\",{\"1\":{\"9615\":1}}],[\"③tomcat将request和response两个对象传递给service方法\",{\"1\":{\"8880\":1}}],[\"③在弹出的窗口\",{\"1\":{\"8578\":1}}],[\"③创建数据表的实现\",{\"1\":{\"8174\":1}}],[\"③创建callable接口实现类的对象\",{\"1\":{\"5481\":1}}],[\"③获取链接\",{\"1\":{\"7934\":1}}],[\"③如图\",{\"1\":{\"7829\":1}}],[\"③string\",{\"1\":{\"7292\":1}}],[\"③通过获取的类和接口\",{\"1\":{\"7239\":1}}],[\"③实现callable接口\",{\"1\":{\"5147\":1}}],[\"③减少配置\",{\"1\":{\"4895\":1}}],[\"③私有化类的构造器\",{\"1\":{\"4859\":1}}],[\"③当父类和子类中拥有相同的属性或方法时\",{\"1\":{\"4088\":1}}],[\"③\",{\"1\":{\"3711\":1,\"3886\":1}}],[\"③构造器中初始化\",{\"1\":{\"3708\":1}}],[\"②指令\",{\"1\":{\"9614\":1}}],[\"②tomcat服务器\",{\"1\":{\"8879\":1}}],[\"②定义数据表的接口\",{\"1\":{\"8173\":1}}],[\"②定制排序\",{\"1\":{\"5788\":1}}],[\"②加载驱动\",{\"1\":{\"7933\":1}}],[\"②在弹出的窗口中点击右下角的edit\",{\"1\":{\"8577\":1}}],[\"②在idea中\",{\"1\":{\"7828\":1}}],[\"②在编译时进行格式检查\",{\"1\":{\"4891\":1}}],[\"②使用flatmap从年级集合中\",{\"1\":{\"7654\":1}}],[\"②human\",{\"1\":{\"7287\":1}}],[\"②通过反射获取该对象的类和所实现的所有接口\",{\"1\":{\"7238\":1}}],[\"②当通过代理类的对象调用方法a时\",{\"1\":{\"7235\":1}}],[\"②当本类中没有找到时\",{\"1\":{\"4087\":1}}],[\"②双重循环\",{\"1\":{\"6257\":1}}],[\"②jdk8\",{\"1\":{\"5872\":1}}],[\"②判断要添加的位置上有没有其他元素\",{\"1\":{\"5733\":1}}],[\"②实现call方法\",{\"1\":{\"5480\":1}}],[\"②实现runnable接口的方式\",{\"1\":{\"5145\":1}}],[\"②可选\",{\"1\":{\"4858\":1}}],[\"②跟⑤谁在前就先执行谁\",{\"1\":{\"3711\":1}}],[\"②\",{\"1\":{\"3711\":1,\"3885\":1,\"4688\":1}}],[\"②显式初始化\",{\"1\":{\"3707\":1}}],[\"①文档声明\",{\"1\":{\"9610\":1}}],[\"①tomcat服务器会根据请求url中的资源路径\",{\"1\":{\"8878\":1}}],[\"①右上角点击\",{\"1\":{\"8576\":1}}],[\"①定义dao接口\",{\"1\":{\"8172\":1}}],[\"①读取配置文件中的数据库连接信息\",{\"1\":{\"7932\":1}}],[\"①将jar包移动到项目目录下\",{\"1\":{\"7827\":1}}],[\"①使用map从学生集合中获取每个学生的年龄\",{\"1\":{\"7653\":1}}],[\"①superman\",{\"1\":{\"7286\":1}}],[\"①实例化被代理类\",{\"1\":{\"7237\":1}}],[\"①根据加载到内存中的被代理类\",{\"1\":{\"7234\":1}}],[\"①read\",{\"1\":{\"6256\":1}}],[\"①jdk7\",{\"1\":{\"5870\":1}}],[\"①自然排序\",{\"1\":{\"5787\":1}}],[\"①向hashset中添加元素a\",{\"1\":{\"5732\":1}}],[\"①创建一个实现callable的实现类\",{\"1\":{\"5479\":1}}],[\"①继承thread类的方式\",{\"1\":{\"5144\":1}}],[\"①用于文档注释\",{\"1\":{\"4890\":1}}],[\"①提供枚举对象\",{\"1\":{\"4856\":1}}],[\"①先从本类中查找是否有该属性或方法\",{\"1\":{\"4086\":1}}],[\"①\",{\"1\":{\"3711\":1,\"3884\":1,\"4688\":1}}],[\"①默认初始化\",{\"1\":{\"3706\":1}}],[\"符号\",{\"1\":{\"4226\":1,\"4889\":1}}],[\"符号两边的\",{\"1\":{\"4225\":1}}],[\"符号位是1\",{\"1\":{\"3307\":1}}],[\"符号位不变\",{\"1\":{\"3189\":1,\"3190\":1}}],[\"符号位在最高位\",{\"1\":{\"3185\":1}}],[\"符号位\",{\"0\":{\"3183\":1},\"1\":{\"3191\":1}}],[\"符合命名规则和规范即可\",{\"1\":{\"3674\":1}}],[\"属于string类\",{\"1\":{\"7489\":1}}],[\"属于标识符\",{\"1\":{\"3674\":1,\"3725\":1}}],[\"属性配置\",{\"1\":{\"8837\":1}}],[\"属性类型是字符串\",{\"1\":{\"8319\":1}}],[\"属性列表中每个键及其对应值都是一个字符串\",{\"1\":{\"7853\":1}}],[\"属性包括\",{\"1\":{\"7613\":1,\"7629\":1}}],[\"属性等\",{\"1\":{\"5977\":1}}],[\"属性为季节名和季节描述\",{\"1\":{\"4842\":1}}],[\"属性是可以被多个对象所共享的\",{\"1\":{\"4406\":1}}],[\"属性只用左边的\",{\"1\":{\"4133\":1}}],[\"属性只能在类的内部访问\",{\"1\":{\"3818\":1}}],[\"属性只能保存字符串的内存地址\",{\"1\":{\"3236\":1}}],[\"属性和方法查找的过程分析\",{\"0\":{\"4084\":1}}],[\"属性和要封装的数据一一对应\",{\"1\":{\"590\":1}}],[\"属性和要封装的数据一一兑对应\",{\"1\":{\"519\":1}}],[\"属性或方法\",{\"1\":{\"3967\":1}}],[\"属性赋值的先后顺序\",{\"0\":{\"3883\":1}}],[\"属性还会多个权限控制符\",{\"1\":{\"3682\":1}}],[\"属性声明语法\",{\"0\":{\"3667\":1}}],[\"属性与局部变量的对比\",{\"0\":{\"3676\":1}}],[\"属性与方法\",{\"0\":{\"3665\":1}}],[\"属性与属性之间使用\",{\"1\":{\"771\":1}}],[\"属性会有个默认值\",{\"1\":{\"3653\":1}}],[\"属性的类型可以是一个类\",{\"1\":{\"3673\":1}}],[\"属性的默认值就是类里定义的值\",{\"1\":{\"4642\":1}}],[\"属性的默认值\",{\"1\":{\"3653\":1}}],[\"属性的单位\",{\"0\":{\"626\":1}}],[\"属性方法相关\",{\"0\":{\"2182\":1}}],[\"属性\",{\"0\":{\"1418\":1,\"3666\":1},\"1\":{\"3630\":2,\"3677\":1,\"3688\":1,\"3691\":1,\"3694\":1,\"3703\":1,\"3709\":1,\"3838\":1,\"3887\":1,\"3894\":1,\"3897\":1,\"4076\":1,\"4079\":1,\"4203\":1,\"4405\":1,\"4872\":1,\"4950\":1,\"4956\":2,\"5666\":1}}],[\"属性加载的优先级\",{\"0\":{\"772\":1}}],[\"属性值必须使用引号\",{\"1\":{\"9604\":1}}],[\"属性值被方法修改了\",{\"1\":{\"3747\":1}}],[\"属性值是个数组\",{\"1\":{\"606\":1}}],[\"属性值前面添加空格\",{\"1\":{\"483\":1}}],[\"属性名是number\",{\"1\":{\"9631\":1}}],[\"属性名=属性值\",{\"1\":{\"771\":1,\"7848\":1}}],[\"属性名引用方式\",{\"1\":{\"498\":1}}],[\"属性名\",{\"1\":{\"491\":1,\"499\":1,\"3636\":1,\"3668\":1,\"3674\":1,\"4383\":1,\"9642\":1}}],[\"属性名与属性值之间使用冒号+空格作为分隔\",{\"1\":{\"483\":1}}],[\"属性层级关系使用多行描述\",{\"1\":{\"481\":1}}],[\"见nginx\",{\"1\":{\"8485\":1}}],[\"见\",{\"1\":{\"7842\":1}}],[\"见格式2的更精简写法\",{\"1\":{\"7392\":1}}],[\"见格式2示例的\",{\"0\":{\"7385\":1}}],[\"见格式2精简模式\",{\"0\":{\"7381\":1}}],[\"见名知意\",{\"1\":{\"3725\":1,\"3930\":1}}],[\"见后续章节\",{\"1\":{\"3671\":1,\"8771\":1,\"9874\":1}}],[\"见上面的配置tomcat\",{\"1\":{\"8654\":1}}],[\"见上一个例子\",{\"1\":{\"7379\":1}}],[\"见上\",{\"1\":{\"2218\":1,\"2247\":1,\"2253\":1}}],[\"缺少的内容\",{\"0\":{\"8655\":1}}],[\"缺省启用公平锁\",{\"1\":{\"8291\":1}}],[\"缺省使用8192个字节的缓冲区\",{\"1\":{\"6312\":1}}],[\"缺省\",{\"1\":{\"3670\":1,\"3691\":1,\"3719\":1,\"3836\":1,\"3839\":1,\"3841\":1,\"4342\":1,\"8267\":1}}],[\"缺点\",{\"0\":{\"7208\":1,\"7422\":1},\"1\":{\"885\":1,\"4429\":1,\"4432\":1,\"5374\":1,\"8479\":1}}],[\"修复数据\",{\"1\":{\"10861\":1}}],[\"修复host\",{\"0\":{\"10591\":1}}],[\"修饰\",{\"1\":{\"4832\":1,\"4853\":1}}],[\"修饰的\",{\"1\":{\"5000\":1,\"5005\":1}}],[\"修饰的属性应该在构造器中为其赋值\",{\"1\":{\"4833\":1}}],[\"修饰的属性必须赋值\",{\"1\":{\"3984\":1}}],[\"修饰的成员\",{\"1\":{\"4372\":1}}],[\"修饰类的话\",{\"1\":{\"3839\":1}}],[\"修饰类的内部结构\",{\"1\":{\"3838\":1}}],[\"修饰类\",{\"1\":{\"3839\":1}}],[\"修饰符将表示一个对象\",{\"1\":{\"3673\":1}}],[\"修饰符\",{\"1\":{\"3668\":1,\"3669\":1,\"3859\":1}}],[\"修改证书权限\",{\"1\":{\"10770\":1}}],[\"修改mongod\",{\"1\":{\"10739\":1}}],[\"修改密码\",{\"0\":{\"10729\":1}}],[\"修改0号成员的优先级\",{\"1\":{\"10626\":1}}],[\"修改优先级后\",{\"1\":{\"10627\":1}}],[\"修改优先级\",{\"0\":{\"10625\":1}}],[\"修改的代码如下\",{\"1\":{\"10596\":1}}],[\"修改副本集节点的host\",{\"0\":{\"10595\":1}}],[\"修改这两处都为false后\",{\"1\":{\"9901\":1}}],[\"修改和销毁\",{\"1\":{\"9359\":1,\"9378\":1,\"9397\":1}}],[\"修改响应头的方式修改响应类型\",{\"1\":{\"9082\":1}}],[\"修改调用时机\",{\"1\":{\"8768\":1}}],[\"修改模板\",{\"0\":{\"8736\":1}}],[\"修改tomcat配置文件\",{\"1\":{\"8473\":1}}],[\"修改配置文件\",{\"0\":{\"8472\":1,\"10738\":1,\"10775\":1},\"1\":{\"10776\":1}}],[\"修改成功\",{\"1\":{\"8210\":1}}],[\"修改成功^\",{\"1\":{\"1299\":1}}],[\"修改blob类型的字段\",{\"1\":{\"8085\":1}}],[\"修改为启动servlet时创建\",{\"0\":{\"8748\":1}}],[\"修改为最新的java\",{\"1\":{\"7319\":1}}],[\"修改为返回\",{\"1\":{\"1805\":1}}],[\"修改线程的优先级\",{\"1\":{\"5247\":1}}],[\"修改了person类内部的属性\",{\"1\":{\"3816\":1}}],[\"修改其值\",{\"1\":{\"3457\":1}}],[\"修改前的obj元素\",{\"1\":{\"2565\":1}}],[\"修改指定index的元素\",{\"1\":{\"2565\":1}}],[\"修改人\",{\"1\":{\"1334\":1,\"1336\":1,\"1338\":1,\"1340\":1,\"1342\":1,\"1344\":1,\"1348\":1}}],[\"修改失败\",{\"1\":{\"1299\":1}}],[\"修改\",{\"0\":{\"1459\":1},\"1\":{\"1194\":1,\"1398\":1,\"1399\":1,\"1400\":1,\"1401\":1,\"2591\":1,\"10686\":1,\"10688\":1}}],[\"修改不参与热部署的目录或文件\",{\"0\":{\"575\":1}}],[\"帮我们完成了很多常见的功能\",{\"1\":{\"3652\":1}}],[\"例子\",{\"0\":{\"7195\":1}}],[\"例外\",{\"1\":{\"3649\":1}}],[\"例如灾难恢复\",{\"1\":{\"10442\":1}}],[\"例如字母大小写和重音标记的规则\",{\"1\":{\"10285\":1}}],[\"例如新的函数\",{\"1\":{\"6924\":1}}],[\"例如向服务器端的\",{\"1\":{\"6896\":1}}],[\"例如关于这个元素如何保存\",{\"1\":{\"5944\":1}}],[\"例如当使用集合时没有用泛型\",{\"1\":{\"5051\":1}}],[\"例如标记过时的功能\",{\"1\":{\"4885\":1}}],[\"例如javac编译工具等\",{\"1\":{\"2849\":1}}],[\"例如jedis客户端技术\",{\"1\":{\"1040\":1}}],[\"例如每日记录\",{\"1\":{\"932\":1}}],[\"例如\",{\"1\":{\"881\":1,\"952\":1,\"3373\":1,\"3656\":1,\"4080\":1,\"4478\":1,\"4680\":1,\"4819\":1,\"4960\":1,\"4965\":1,\"5099\":1,\"5416\":1,\"5422\":1,\"5920\":1,\"5946\":1,\"6053\":1,\"6056\":1,\"7014\":1,\"7604\":1,\"8272\":1,\"9560\":1,\"10369\":1,\"10372\":1}}],[\"意味着此位置上存在一个或多个数据\",{\"1\":{\"5860\":1}}],[\"意味着myannotation的value值\",{\"1\":{\"5060\":1}}],[\"意味着empty\",{\"1\":{\"5060\":2}}],[\"意味着如果子类重写的方法中有异常\",{\"1\":{\"4785\":1}}],[\"意味着接口不可以实例化\",{\"1\":{\"4493\":1}}],[\"意味着\",{\"1\":{\"3643\":1,\"3700\":1,\"4025\":1}}],[\"意义明显\",{\"1\":{\"8012\":1}}],[\"意义不大\",{\"1\":{\"7745\":1}}],[\"意义\",{\"0\":{\"414\":1,\"4578\":1,\"5939\":1,\"8821\":1},\"1\":{\"2864\":1,\"3548\":1,\"4518\":1,\"4538\":1,\"4542\":1,\"6539\":1,\"7194\":1}}],[\"说法二\",{\"1\":{\"4032\":1}}],[\"说法一\",{\"1\":{\"4029\":1}}],[\"说\",{\"1\":{\"3630\":1}}],[\"说明状态正常\",{\"1\":{\"10557\":1}}],[\"说明一个servlet在内存中只存在一个对象\",{\"1\":{\"8754\":1}}],[\"说明artifacts配置有问题\",{\"1\":{\"8651\":1}}],[\"说明这个接口是一个函数式接口\",{\"1\":{\"7416\":1}}],[\"说明两个变量内存地址相同\",{\"1\":{\"3212\":1}}],[\"说明\",{\"0\":{\"3073\":1,\"3086\":1,\"3112\":1,\"3138\":1,\"3532\":1,\"3942\":1,\"3970\":1,\"4202\":1,\"4263\":1,\"4375\":1,\"4471\":1,\"5157\":1,\"5377\":1,\"5555\":1,\"5674\":1,\"6187\":1,\"6267\":1,\"6293\":1,\"6363\":1,\"6380\":1,\"6756\":1,\"7542\":1,\"7879\":1,\"8165\":1,\"9049\":1,\"9459\":1},\"1\":{\"1174\":1,\"1310\":1,\"1995\":1,\"7470\":1,\"7859\":1,\"8268\":1,\"9743\":1,\"10053\":1}}],[\"吃饭\",{\"1\":{\"3630\":1}}],[\"行\",{\"1\":{\"10079\":1}}],[\"行为\",{\"1\":{\"3627\":1}}],[\"行结束符在\",{\"1\":{\"2732\":1}}],[\"万维网使用\",{\"1\":{\"6670\":1}}],[\"万物皆文件\",{\"1\":{\"6136\":1}}],[\"万物皆对象\",{\"1\":{\"3614\":1,\"6966\":1}}],[\"万事万物皆对象\",{\"1\":{\"3619\":1}}],[\"形象类比\",{\"1\":{\"6744\":1}}],[\"形成复杂的业务逻辑功能\",{\"1\":{\"9559\":1}}],[\"形成传输数据通道\",{\"1\":{\"6731\":1}}],[\"形成了高效的四层体系结构\",{\"1\":{\"6728\":1}}],[\"形成了equals\",{\"1\":{\"4244\":1}}],[\"形成一张表\",{\"1\":{\"6414\":1}}],[\"形成链表时\",{\"1\":{\"5880\":1}}],[\"形成计算机世界中类的定义\",{\"1\":{\"3610\":1}}],[\"形参小括号\",{\"1\":{\"7354\":1}}],[\"形参也属于局部变量\",{\"1\":{\"3989\":1}}],[\"形参类型也相同的数组之间不构成重载\",{\"1\":{\"3797\":1}}],[\"形参不同的方法之间构成重载\",{\"1\":{\"3796\":1}}],[\"形参不能有默认值\",{\"1\":{\"3728\":1}}],[\"形参中的m\",{\"1\":{\"3783\":1}}],[\"形参变量名\",{\"1\":{\"3757\":1}}],[\"形参2\",{\"1\":{\"3727\":1}}],[\"形参1\",{\"1\":{\"3727\":1}}],[\"形参列表\",{\"1\":{\"3718\":1,\"3726\":1,\"3900\":1,\"3902\":1,\"3904\":1,\"3905\":1,\"4090\":1,\"4094\":1,\"4096\":2,\"4099\":2,\"4100\":1,\"4394\":1,\"7105\":1,\"7106\":1,\"7404\":1}}],[\"形参在调用时\",{\"1\":{\"3701\":1}}],[\"形参\",{\"1\":{\"3043\":1,\"3771\":1}}],[\"封装对象\",{\"1\":{\"9540\":1}}],[\"封装为request对象\",{\"1\":{\"8915\":1}}],[\"封装通用的增删改操作\",{\"0\":{\"7981\":1}}],[\"封装逻辑\",{\"1\":{\"4582\":1}}],[\"封装数据库连接的获取和资源的关闭\",{\"0\":{\"7971\":1}}],[\"封装数据\",{\"1\":{\"4581\":1,\"9561\":1}}],[\"封装类\",{\"1\":{\"4265\":1}}],[\"封装和继承是独立的\",{\"1\":{\"4031\":1}}],[\"封装性的总结\",{\"0\":{\"3831\":1}}],[\"封装性的意义\",{\"0\":{\"3814\":1}}],[\"封装思想的体现\",{\"0\":{\"3827\":1}}],[\"封装\",{\"0\":{\"3807\":1,\"8043\":1},\"1\":{\"3602\":1}}],[\"聚合\",{\"1\":{\"3600\":1}}],[\"考虑使用当前类充当同步监视器\",{\"1\":{\"5320\":1}}],[\"考虑重写\",{\"1\":{\"4056\":1}}],[\"考虑谁来做\",{\"1\":{\"3599\":1}}],[\"考虑怎么做\",{\"1\":{\"3599\":1}}],[\"考虑清楚应该将哪个结构声明在上面\",{\"1\":{\"3355\":1}}],[\"情况三\",{\"0\":{\"7484\":1,\"7491\":1}}],[\"情况二\",{\"0\":{\"7477\":1}}],[\"情况3\",{\"1\":{\"3591\":1,\"5739\":1,\"5863\":1,\"5864\":1,\"7449\":1,\"7456\":1}}],[\"情况2\",{\"1\":{\"3591\":1,\"5736\":1,\"5861\":1,\"7448\":1}}],[\"情况1和2\",{\"1\":{\"7455\":1}}],[\"情况1\",{\"0\":{\"7459\":1,\"7469\":1},\"1\":{\"3591\":1,\"5734\":1,\"5859\":1,\"7447\":1}}],[\"赋予角色所属的数据库\",{\"1\":{\"10703\":1}}],[\"赋予root角色\",{\"1\":{\"10703\":1}}],[\"赋予权限\",{\"1\":{\"10703\":1}}],[\"赋的值也必须是个数组\",{\"1\":{\"3554\":1}}],[\"赋值该证书到所有节点所在的设备\",{\"1\":{\"10772\":1}}],[\"赋值为columvalue\",{\"1\":{\"8045\":1,\"8054\":1,\"8201\":2}}],[\"赋值形式的多态\",{\"0\":{\"4159\":1}}],[\"赋值时自动获得长度\",{\"1\":{\"3498\":1}}],[\"赋值运算符\",{\"0\":{\"3264\":1,\"3265\":1}}],[\"赋值给b2\",{\"1\":{\"3261\":1}}],[\"赋值相同的值\",{\"1\":{\"3211\":1}}],[\"赋值的过程就自动发生了变量提升\",{\"1\":{\"3171\":1}}],[\"赋值的变量必须已经声明过了\",{\"1\":{\"3008\":1}}],[\"赋值\",{\"0\":{\"3482\":1,\"6066\":1},\"1\":{\"3016\":1,\"3162\":1,\"3479\":1,\"3486\":1,\"3496\":1,\"3887\":1}}],[\"堆栈追踪\",{\"1\":{\"4734\":1,\"4743\":1}}],[\"堆溢出\",{\"1\":{\"4670\":1}}],[\"堆内存中又开辟了一块内存空间储存对象的实体\",{\"1\":{\"4644\":1}}],[\"堆内存中储存\",{\"1\":{\"3525\":1}}],[\"堆\",{\"1\":{\"3523\":1,\"4632\":1,\"5124\":1}}],[\"栈溢出\",{\"1\":{\"4670\":1}}],[\"栈\",{\"1\":{\"3522\":1,\"4633\":1,\"5123\":1}}],[\"静态资源和动态资源\",{\"1\":{\"8674\":1}}],[\"静态资源目录\",{\"1\":{\"8491\":1}}],[\"静态资源可以直接被浏览器解析\",{\"1\":{\"8400\":1}}],[\"静态资源\",{\"1\":{\"8400\":1}}],[\"静态代理示例\",{\"0\":{\"7217\":1}}],[\"静态代理需要\",{\"1\":{\"7207\":1}}],[\"静态代理\",{\"0\":{\"7204\":1}}],[\"静态代码块内只能调用静态的属性\",{\"1\":{\"4560\":1}}],[\"静态代码块的执行要优先于非静态代码块的执行\",{\"1\":{\"4559\":1}}],[\"静态代码块\",{\"0\":{\"4554\":1},\"1\":{\"4550\":1,\"4552\":1}}],[\"静态内部类\",{\"1\":{\"6982\":1}}],[\"静态语言\",{\"1\":{\"6926\":1}}],[\"静态化\",{\"0\":{\"6046\":1}}],[\"静态对象\",{\"1\":{\"5064\":1}}],[\"静态的方法\",{\"1\":{\"4560\":1,\"4567\":1}}],[\"静态成员的生命周期同步\",{\"1\":{\"4409\":1}}],[\"静态成员内部类\",{\"1\":{\"4306\":1,\"4308\":1,\"4326\":1}}],[\"静态变量是随着类的加载而加载\",{\"1\":{\"4385\":1}}],[\"静态变量的使用\",{\"0\":{\"4386\":1}}],[\"静态变量的加载要早于对象的创建\",{\"1\":{\"4385\":1}}],[\"静态变量的加载\",{\"0\":{\"4384\":1}}],[\"静态变量的声明\",{\"0\":{\"4381\":1}}],[\"静态变量\",{\"1\":{\"4379\":1,\"4387\":1,\"4635\":1}}],[\"静态属性和非静态属性了\",{\"1\":{\"4377\":1}}],[\"静态属性\",{\"0\":{\"4374\":1},\"1\":{\"4376\":1}}],[\"静态绑定\",{\"1\":{\"4157\":2}}],[\"静态初始化已经赋值过了\",{\"1\":{\"3552\":1}}],[\"静态初始化\",{\"0\":{\"3497\":1,\"3540\":1}}],[\"静态方法即可\",{\"1\":{\"9820\":1,\"9823\":1}}],[\"静态方法来获取inetaddress\",{\"1\":{\"6698\":1}}],[\"静态方法只是用来取代一些工具类的\",{\"1\":{\"4539\":1}}],[\"静态方法在实现类中是看不到\",{\"1\":{\"4539\":1}}],[\"静态方法和默认方法的意义\",{\"0\":{\"4535\":1}}],[\"静态方法中只能调用静态的方法和静态属性\",{\"1\":{\"4399\":1}}],[\"静态方法与非静态方法的对比\",{\"0\":{\"4398\":1}}],[\"静态方法的调用写是类或者null\",{\"1\":{\"7161\":1}}],[\"静态方法的调用\",{\"0\":{\"4395\":1}}],[\"静态方法的声明\",{\"0\":{\"4393\":1}}],[\"静态方法的处理\",{\"0\":{\"4055\":1}}],[\"静态方法也是随着类的加载而加载的\",{\"1\":{\"4392\":1}}],[\"静态方法\",{\"0\":{\"4389\":1,\"4524\":1,\"4536\":1,\"5935\":1,\"7477\":1},\"1\":{\"2281\":1,\"4455\":1,\"4523\":1,\"4537\":1,\"7175\":1,\"7448\":1}}],[\"质数的个数为\",{\"1\":{\"3457\":1}}],[\"质数测试\",{\"1\":{\"1867\":1}}],[\"遍历cookies\",{\"1\":{\"9695\":1}}],[\"遍历获取的cookie数据\",{\"1\":{\"9689\":1}}],[\"遍历stream中集合的所有元素\",{\"1\":{\"7701\":1}}],[\"遍历偶数\",{\"1\":{\"7590\":1}}],[\"遍历结果\",{\"0\":{\"7079\":1}}],[\"遍历包含属性的数组\",{\"1\":{\"7072\":1}}],[\"遍历顺序与添加顺序一致\",{\"1\":{\"5901\":1}}],[\"遍历map元素时\",{\"1\":{\"5826\":1}}],[\"遍历linkedhashset集合\",{\"1\":{\"5774\":1}}],[\"遍历其内部数据时\",{\"1\":{\"5709\":1}}],[\"遍历集合\",{\"0\":{\"5609\":1}}],[\"遍历集合的底层调用iterator完成操作\",{\"1\":{\"5608\":1}}],[\"遍历的注意事项\",{\"0\":{\"5598\":1}}],[\"遍历方法\",{\"0\":{\"5578\":1}}],[\"遍历可变形参\",{\"0\":{\"3801\":1}}],[\"遍历二维数组就需要嵌套循环了\",{\"1\":{\"3569\":1}}],[\"遍历数组\",{\"0\":{\"3510\":1,\"3568\":1,\"5612\":1}}],[\"遍历100000以内的自然数\",{\"1\":{\"3457\":1}}],[\"遍历100以内的所有偶数\",{\"1\":{\"3404\":1,\"3405\":1}}],[\"遍历100以内的偶数\",{\"1\":{\"3392\":1,\"3419\":1}}],[\"遍历操作不需获取collection或数组的长度\",{\"1\":{\"5608\":1}}],[\"遍历操作\",{\"0\":{\"2581\":1}}],[\"今天真好\",{\"1\":{\"4874\":1}}],[\"今天\",{\"1\":{\"4874\":1}}],[\"今天不用上班\",{\"1\":{\"3374\":1}}],[\"今天需要上班\",{\"1\":{\"3374\":1}}],[\"让web开发更加便捷\",{\"1\":{\"8397\":1}}],[\"让用户通过浏览器来访问这些项目\",{\"1\":{\"8396\":1}}],[\"让用户传输\",{\"1\":{\"7984\":1}}],[\"让mysql开启批处理的支持\",{\"1\":{\"8119\":1}}],[\"让它可以识别各个国家的文字\",{\"1\":{\"6414\":1}}],[\"让编辑器帮我们重写即可\",{\"1\":{\"5755\":1}}],[\"让编译器对\",{\"1\":{\"5042\":1}}],[\"让出\",{\"1\":{\"5291\":1}}],[\"让当前线程睡眠\",{\"1\":{\"5228\":1}}],[\"让当前线程\",{\"1\":{\"5213\":1}}],[\"让start方法去调用run\",{\"1\":{\"5196\":1}}],[\"让子类去实现\",{\"1\":{\"4462\":1}}],[\"让子类实例化\",{\"1\":{\"4445\":1}}],[\"让代码更简洁\",{\"1\":{\"3372\":1}}],[\"让idea自动进行热部署\",{\"1\":{\"557\":1}}],[\"末尾结束为止\",{\"1\":{\"3364\":1}}],[\"循环cookie\",{\"1\":{\"9690\":1}}],[\"循环遍历获取打印请求头\",{\"1\":{\"8955\":1}}],[\"循环获取每一行数据\",{\"1\":{\"8054\":1}}],[\"循环获取结果集中每列的数据\",{\"1\":{\"8045\":1}}],[\"循环读\",{\"1\":{\"6353\":1}}],[\"循环读取\",{\"1\":{\"2042\":1,\"2048\":1}}],[\"循环全部读入\",{\"1\":{\"6251\":1}}],[\"循环\",{\"0\":{\"5605\":1}}],[\"循环创建对象\",{\"1\":{\"3658\":1}}],[\"循环是可以嵌套的\",{\"1\":{\"3446\":1}}],[\"循环语句中\",{\"1\":{\"3426\":1,\"3429\":1,\"3434\":1,\"3441\":1}}],[\"循环控制\",{\"0\":{\"3423\":1}}],[\"循环内定义\",{\"1\":{\"3396\":1}}],[\"循环体\",{\"1\":{\"3383\":1,\"3388\":2,\"3390\":1,\"3401\":2,\"3402\":1,\"3412\":2,\"3417\":1}}],[\"循环条件\",{\"1\":{\"3382\":1,\"3388\":3,\"3390\":1,\"3401\":3,\"3402\":1,\"3417\":1}}],[\"循环的组成部分\",{\"0\":{\"3379\":1}}],[\"循环结构的4个要素\",{\"1\":{\"3380\":1}}],[\"循环结构\",{\"1\":{\"3336\":1}}],[\"冲上到下逐行执行\",{\"1\":{\"3332\":1}}],[\"ⅶ\",{\"0\":{\"3326\":1,\"3445\":1,\"5057\":1,\"7674\":1,\"7774\":1}}],[\"决定执行表达式1\",{\"1\":{\"3314\":1}}],[\"双击弹出框中待生成jar包下面的build即可\",{\"1\":{\"9513\":1}}],[\"双击按照提示补齐webapp目录\",{\"1\":{\"8568\":1}}],[\"双击bin\",{\"1\":{\"8434\":1,\"8438\":1}}],[\"双参构造器创建的\",{\"1\":{\"7522\":1}}],[\"双方都知道对方是谁了\",{\"1\":{\"6747\":1}}],[\"双列数据\",{\"1\":{\"5548\":1,\"5806\":1}}],[\"双分支\",{\"0\":{\"3345\":1}}],[\"双\",{\"1\":{\"3296\":1}}],[\"双精度\",{\"1\":{\"3096\":1}}],[\"短路情况\",{\"0\":{\"3294\":1}}],[\"短路或\",{\"1\":{\"3290\":1}}],[\"短路与\",{\"1\":{\"3289\":1}}],[\"逻辑代码只写在doget方法中\",{\"1\":{\"9002\":1}}],[\"逻辑链条\",{\"0\":{\"7236\":1}}],[\"逻辑修改了\",{\"1\":{\"4586\":1}}],[\"逻辑异或\",{\"1\":{\"3291\":1}}],[\"逻辑非\",{\"1\":{\"3288\":1}}],[\"逻辑或\",{\"1\":{\"3287\":1}}],[\"逻辑与\",{\"1\":{\"3286\":1}}],[\"逻辑运算符用于连接布尔型表达式\",{\"1\":{\"3293\":1}}],[\"逻辑运算符\",{\"0\":{\"3283\":1}}],[\"√\",{\"1\":{\"3282\":1,\"9943\":1,\"9944\":1,\"9946\":1,\"9947\":1,\"9949\":1,\"9950\":1}}],[\"扩展内容\",{\"0\":{\"10891\":1}}],[\"扩展名匹配\",{\"0\":{\"8849\":1},\"1\":{\"8864\":1}}],[\"扩展名\",{\"1\":{\"8839\":1}}],[\"扩展类加载器\",{\"1\":{\"7040\":1}}],[\"扩展\",{\"0\":{\"5110\":1},\"1\":{\"4007\":1}}],[\"扩展赋值运算符\",{\"0\":{\"3268\":1},\"1\":{\"3272\":1}}],[\"扩容的临界值\",{\"1\":{\"5894\":1}}],[\"扩容是非常消耗资源的\",{\"1\":{\"5655\":1}}],[\"扩容为原来的容量的1\",{\"1\":{\"5652\":1}}],[\"扩容为原来容量的2倍\",{\"1\":{\"1561\":1,\"5868\":1}}],[\"扩容\",{\"0\":{\"5651\":1,\"5867\":1},\"1\":{\"879\":1,\"5868\":1}}],[\"算学计算异常\",{\"0\":{\"4721\":1}}],[\"算出今天是否用上班\",{\"1\":{\"3373\":1}}],[\"算术运算符\",{\"0\":{\"3249\":1}}],[\"算法来存储集合中的元素\",{\"1\":{\"5698\":1}}],[\"算法为\",{\"1\":{\"1813\":1}}],[\"算法\",{\"1\":{\"1444\":1,\"2425\":1,\"5761\":1,\"7482\":1}}],[\"算法是\",{\"1\":{\"1441\":1,\"2428\":1}}],[\"拼接操作\",{\"0\":{\"3238\":1}}],[\"里存储文档数据和关系型数据库\",{\"1\":{\"9912\":1}}],[\"里的\",{\"1\":{\"9915\":1}}],[\"里的key和value都是string类型\",{\"1\":{\"5840\":1}}],[\"里的全部元素时有很好的性能\",{\"1\":{\"5710\":1}}],[\"里的值将无法改变\",{\"1\":{\"3221\":1}}],[\"里面可以声明三个有参的子标签\",{\"1\":{\"9631\":1}}],[\"里面用一个module来使用tomcat\",{\"1\":{\"8524\":1}}],[\"里面包含了所有jdbc的基本操作方法\",{\"1\":{\"8172\":1}}],[\"里面包含了构造器中所需的各个参数\",{\"1\":{\"7063\":1}}],[\"里面包含了一系列类\",{\"1\":{\"3918\":1}}],[\"里面是空的\",{\"1\":{\"6561\":1}}],[\"里面的所有方法都是静态的\",{\"1\":{\"8339\":1}}],[\"里面的代码提取出来声明成同步方法\",{\"1\":{\"5345\":1}}],[\"里面的配置都已经是固定的了\",{\"1\":{\"766\":1}}],[\"里面有无内容都可以编译\",{\"1\":{\"3409\":1}}],[\"储存中文\",{\"0\":{\"9723\":1}}],[\"储存sessionid的cookie没有了\",{\"1\":{\"9203\":1}}],[\"储存结构图\",{\"0\":{\"5869\":1}}],[\"储存的方式\",{\"0\":{\"5740\":1}}],[\"储存的过程\",{\"0\":{\"3524\":1}}],[\"储存无序的\",{\"1\":{\"5692\":1}}],[\"储存其他内存块的地址\",{\"1\":{\"5121\":1}}],[\"储存数据==\",{\"1\":{\"5118\":1}}],[\"储存数据时\",{\"1\":{\"3184\":1}}],[\"储存值使用的是一个final数组\",{\"1\":{\"3221\":1}}],[\"乘了一次2\",{\"1\":{\"3306\":1}}],[\"乘以2的幂数\",{\"1\":{\"3195\":1}}],[\"乘法运算\",{\"1\":{\"1891\":1}}],[\"显示当前数据库\",{\"1\":{\"10603\":1}}],[\"显示列表的适配器\",{\"1\":{\"4603\":1}}],[\"显示打印的字符\",{\"1\":{\"2333\":1,\"2790\":1}}],[\"显式声明\",{\"1\":{\"6575\":1}}],[\"显式关闭文件\",{\"1\":{\"6206\":1}}],[\"显式的调用父类中声明的属性或方法\",{\"1\":{\"4076\":1}}],[\"显式初始化\",{\"1\":{\"3885\":1,\"3984\":1,\"3985\":1}}],[\"显式定义一个或多个构造器\",{\"1\":{\"3866\":1}}],[\"显然会让计算机的基础电路设计变得十分复杂\",{\"1\":{\"3191\":1}}],[\"补齐maven\",{\"0\":{\"8553\":1,\"8565\":1}}],[\"补充\",{\"0\":{\"5759\":1,\"6412\":1},\"1\":{\"4189\":1,\"5320\":1,\"8051\":1}}],[\"补充说明\",{\"0\":{\"812\":1,\"1630\":1,\"3651\":1,\"5452\":1,\"6950\":1}}],[\"补位的细节\",{\"0\":{\"3303\":1}}],[\"补=\",{\"1\":{\"3192\":1}}],[\"补\",{\"1\":{\"3192\":2}}],[\"补码\",{\"0\":{\"3186\":1},\"1\":{\"3190\":1}}],[\"二是在java安装目录的jdk\",{\"1\":{\"9494\":1}}],[\"二者在使用场景中\",{\"1\":{\"10116\":1}}],[\"二者共同的父类是\",{\"1\":{\"6064\":1}}],[\"二者不能共存\",{\"1\":{\"3797\":1}}],[\"二者都是一种思想\",{\"1\":{\"3599\":1}}],[\"二维数组也要指定数据类型\",{\"1\":{\"3581\":1}}],[\"二维数组的内存解析\",{\"0\":{\"3578\":1}}],[\"二维数组的声明\",{\"0\":{\"3539\":1}}],[\"二维数组每个元素的数组长度\",{\"1\":{\"3548\":1}}],[\"二维数组中有3个一维数组\",{\"1\":{\"3544\":1,\"3549\":1}}],[\"二维数组\",{\"1\":{\"3473\":1}}],[\"二选一\",{\"0\":{\"3345\":1},\"1\":{\"9642\":1}}],[\"二进制转八进制\",{\"1\":{\"3198\":1}}],[\"二进制转成十进制\",{\"1\":{\"3195\":1}}],[\"二进制的整数有如下三种形式\",{\"1\":{\"3187\":1}}],[\"二进制\",{\"1\":{\"3180\":1,\"3194\":1,\"3197\":1,\"3200\":1}}],[\"二级属性名\",{\"1\":{\"498\":1,\"500\":1}}],[\"溢出\",{\"1\":{\"3176\":1,\"5136\":1}}],[\"截断流\",{\"1\":{\"7621\":1}}],[\"截断\",{\"0\":{\"7620\":1}}],[\"截断操作\",{\"1\":{\"3176\":1}}],[\"截取如下\",{\"1\":{\"396\":1}}],[\"故障测试\",{\"0\":{\"10628\":1}}],[\"故可以使用方法因引用\",{\"1\":{\"7497\":1}}],[\"故可以进行方法引用\",{\"1\":{\"7489\":1}}],[\"故可以省略参数\",{\"1\":{\"7467\":1}}],[\"故是不可靠的\",{\"1\":{\"6740\":1}}],[\"故建议\",{\"1\":{\"6575\":1}}],[\"故报错\",{\"1\":{\"3173\":1}}],[\"故用到java\",{\"1\":{\"1872\":1}}],[\"容量小的类型自动转换为容量大的数据类型\",{\"1\":{\"3151\":1}}],[\"容器会释放这个servlet实例\",{\"1\":{\"8761\":1}}],[\"容器就会调用servlet实例的destroy\",{\"1\":{\"8761\":1}}],[\"容器将自动调用servlet的init\",{\"1\":{\"8757\":1}}],[\"容器\",{\"0\":{\"426\":1},\"1\":{\"5522\":1}}],[\"布尔值\",{\"1\":{\"10094\":1}}],[\"布尔变量\",{\"1\":{\"3357\":1}}],[\"布尔类型\",{\"0\":{\"3137\":1}}],[\"布尔型\",{\"1\":{\"3033\":1,\"3698\":1}}],[\"帅\",{\"1\":{\"3125\":1}}],[\"答案是向下转型\",{\"1\":{\"4170\":1}}],[\"答案是\",{\"1\":{\"3108\":1}}],[\"知识补充\",{\"0\":{\"3106\":1}}],[\"却只占用4个字节\",{\"1\":{\"3102\":1}}],[\"尾数可以精确到7位有效数字\",{\"1\":{\"3095\":1}}],[\"科学计数法形式\",{\"1\":{\"3091\":1}}],[\"浮点数\",{\"1\":{\"10100\":1}}],[\"浮点常量\",{\"1\":{\"3166\":1}}],[\"浮点类型也有固定的表示范围和字段长度\",{\"1\":{\"3087\":1}}],[\"浮点类型\",{\"0\":{\"3085\":1}}],[\"浮点型的两种表示方式\",{\"0\":{\"3089\":1}}],[\"浮点型其实就是小数\",{\"1\":{\"3088\":1}}],[\"浮点型\",{\"1\":{\"3029\":1,\"3696\":1}}],[\"才会被拦截\",{\"1\":{\"9291\":1}}],[\"才会被拦截拦截\",{\"1\":{\"9290\":1}}],[\"才会执行destroy方法\",{\"1\":{\"8776\":1}}],[\"才会结束执行\",{\"1\":{\"2120\":1,\"6346\":1}}],[\"才重新从文件中读取下一个8192个字节数组\",{\"1\":{\"6315\":1}}],[\"才重新进入cpu分配线程的队列\",{\"1\":{\"5225\":1}}],[\"才真正创建了数组\",{\"1\":{\"5660\":1}}],[\"才能执行关闭服务命令\",{\"1\":{\"10756\":1}}],[\"才能继续访问接着访问\",{\"1\":{\"9272\":1}}],[\"才能被tomcat解析\",{\"1\":{\"8680\":1}}],[\"才能被其他线程拿到\",{\"1\":{\"5432\":1}}],[\"才能生效\",{\"1\":{\"8676\":1}}],[\"才能移动到任何后续结果\",{\"1\":{\"7963\":1}}],[\"才能使用多态的特性\",{\"1\":{\"6059\":1}}],[\"才能使用数组\",{\"1\":{\"3478\":1}}],[\"才能更好的发挥多线程的效率\",{\"1\":{\"5091\":1}}],[\"才能通过这个对象去访问类中的非静态成员\",{\"1\":{\"4617\":1}}],[\"才能为内层元素赋值\",{\"1\":{\"3559\":1}}],[\"才可以访问数组中的每个元素\",{\"1\":{\"3502\":1}}],[\"才使用long\",{\"1\":{\"3084\":1}}],[\"型的构造器向构造器的形参中传递一个对象数组进去\",{\"1\":{\"7063\":1}}],[\"型数据用来表示通常意义上\",{\"1\":{\"3113\":1}}],[\"型\",{\"1\":{\"3084\":1}}],[\"四川麻辣烫\",{\"1\":{\"7284\":1}}],[\"四种java文件\",{\"0\":{\"4620\":1}}],[\"四种权限从大到小为\",{\"1\":{\"3836\":1}}],[\"四种访问权限修饰符\",{\"0\":{\"3834\":1}}],[\"四种整形的对比\",{\"0\":{\"3075\":1}}],[\"四种整形仅仅是储存空间大小和表示的数据范围有区别\",{\"1\":{\"3074\":1}}],[\"四舍五入\",{\"0\":{\"1812\":1,\"1818\":1},\"1\":{\"1922\":1}}],[\"规则\",{\"1\":{\"9616\":1}}],[\"规则是必须遵守的\",{\"1\":{\"3059\":1}}],[\"规定xml文档\",{\"1\":{\"9624\":1}}],[\"规定了数据传输的规则\",{\"1\":{\"8412\":1}}],[\"规定解析\",{\"0\":{\"4128\":1}}],[\"规定\",{\"0\":{\"4125\":1}}],[\"规范定义了如下类型的类的加载器\",{\"1\":{\"7037\":1}}],[\"规范\",{\"0\":{\"4480\":1},\"1\":{\"3930\":1,\"4481\":1}}],[\"规范是最好遵守的\",{\"1\":{\"3066\":1}}],[\"合并两个路径\",{\"1\":{\"6608\":1}}],[\"合并成一行\",{\"1\":{\"3541\":1}}],[\"合并计入error\",{\"1\":{\"898\":1}}],[\"合法标识符规则\",{\"0\":{\"3058\":1}}],[\"现金\",{\"1\":{\"4823\":1}}],[\"现有java版本尚未使用\",{\"1\":{\"3054\":1}}],[\"现在只需要使用compass即可\",{\"1\":{\"10173\":1}}],[\"现在只是作测试\",{\"1\":{\"1302\":1}}],[\"现在版本的es中已经没有type这个概念了\",{\"1\":{\"9916\":1}}],[\"现在xml不用来作为前端显示页面了\",{\"1\":{\"9614\":1}}],[\"现在是1\",{\"1\":{\"9611\":1}}],[\"现在是类了可以调用tostring了\",{\"1\":{\"4274\":1}}],[\"现在\",{\"1\":{\"7732\":1}}],[\"现在我们可以定义一个泛型\",{\"1\":{\"5940\":1}}],[\"现在我们可以先将多个字符放入该数组中\",{\"1\":{\"2050\":1}}],[\"现在的分布式项目基本都会用到redis和mongodb\",{\"1\":{\"10116\":1}}],[\"现在的服务器都是多核的\",{\"1\":{\"5091\":1}}],[\"现在的struts2有一部分也是基于注解的了\",{\"1\":{\"4887\":1}}],[\"现在不用子类继承\",{\"1\":{\"4459\":1}}],[\"现在已经是类了\",{\"1\":{\"4277\":1}}],[\"现在成了java基础\",{\"1\":{\"2805\":1}}],[\"现在写的springboot项目都是单体项目\",{\"1\":{\"813\":1}}],[\"保留泛型\",{\"0\":{\"6023\":1,\"6026\":1}}],[\"保留字\",{\"0\":{\"3053\":1}}],[\"保存用户名\",{\"1\":{\"10721\":1}}],[\"保存cookie\",{\"0\":{\"9702\":1},\"1\":{\"9676\":1}}],[\"保存的数据的顺序一致\",{\"1\":{\"6486\":1}}],[\"保存在变量中\",{\"1\":{\"6485\":1}}],[\"保存具有映射关系\",{\"1\":{\"5548\":1}}],[\"保存进符号表\",{\"1\":{\"5129\":1}}],[\"保存了对象的实体\",{\"1\":{\"4640\":1}}],[\"保存了具体字符串值的内存地址\",{\"1\":{\"3232\":1}}],[\"保持沉默\",{\"1\":{\"5047\":1}}],[\"保证host无误\",{\"1\":{\"10812\":1}}],[\"保证所有的副本集节点都使用同一份证书\",{\"1\":{\"10772\":1}}],[\"保证此构造器是可访问的\",{\"1\":{\"7179\":1}}],[\"保证父类有此构造器\",{\"1\":{\"7060\":1}}],[\"保证了数据安全\",{\"1\":{\"5967\":1}}],[\"保证添加的元素按照equals\",{\"1\":{\"5694\":1}}],[\"保证线程安全\",{\"1\":{\"5353\":1}}],[\"保证不能在类的外部创建其对象\",{\"1\":{\"4838\":1}}],[\"保证当前构造器是可访问的\",{\"1\":{\"2293\":1}}],[\"保证当前方法是可访问的\",{\"1\":{\"2284\":1,\"7161\":1}}],[\"保证当前属性是可访问的\",{\"1\":{\"2246\":1,\"7146\":1}}],[\"官方下载地址\",{\"1\":{\"10184\":1}}],[\"官方地址\",{\"1\":{\"3052\":1}}],[\"官网等\",{\"1\":{\"2956\":1}}],[\"官网\",{\"1\":{\"360\":1,\"2840\":1,\"8417\":1,\"10016\":1}}],[\"官网文档\",{\"1\":{\"257\":1,\"266\":1}}],[\"成员的投票支持的\",{\"1\":{\"10619\":1}}],[\"成员的投票支持的节点获胜\",{\"1\":{\"10618\":1}}],[\"成员\",{\"1\":{\"4322\":2,\"4909\":1,\"4973\":1,\"6942\":1,\"6982\":1}}],[\"成员内部类调用外部结构\",{\"0\":{\"4327\":1}}],[\"成员内部类可以直接使用外部类的所有成员\",{\"1\":{\"4323\":1}}],[\"成员内部类的特点\",{\"0\":{\"4311\":1}}],[\"成员内部类\",{\"1\":{\"4306\":1,\"4307\":1,\"6982\":1}}],[\"成员变量的值\",{\"0\":{\"4982\":1}}],[\"成员变量指定值\",{\"1\":{\"4981\":1}}],[\"成员变量\",{\"1\":{\"3039\":1,\"3626\":1,\"3677\":1,\"4883\":1}}],[\"成功的获取了bean\",{\"1\":{\"430\":1}}],[\"强大的全文搜索引擎\",{\"1\":{\"9864\":1}}],[\"强转时\",{\"1\":{\"5964\":1}}],[\"强转失败\",{\"1\":{\"4184\":1}}],[\"强烈建议使用枚举类\",{\"1\":{\"4819\":1}}],[\"强制关闭\",{\"1\":{\"8439\":1}}],[\"强制回收被占用连接\",{\"1\":{\"8240\":1}}],[\"强制结束当前线程\",{\"1\":{\"5215\":1}}],[\"强制转\",{\"1\":{\"4173\":1}}],[\"强制类型转换\",{\"0\":{\"3174\":1}}],[\"强调具备了功能的对象\",{\"1\":{\"3599\":1}}],[\"强调的是功能行为\",{\"1\":{\"3599\":1}}],[\"强类型语言\",{\"1\":{\"3019\":1}}],[\"强行对多个对象进行整体排序的比较\",{\"1\":{\"1777\":1}}],[\"找出所有包含关键词的文档\",{\"1\":{\"9921\":1}}],[\"找不到jdk环境\",{\"1\":{\"8454\":1}}],[\"找不到该属性\",{\"1\":{\"8049\":1}}],[\"找不到该标识符\",{\"1\":{\"3013\":1}}],[\"找到config\",{\"1\":{\"9901\":1}}],[\"找到servletdemo1这个类后\",{\"1\":{\"8723\":1}}],[\"找到主机后如何可靠高效地进行数据传输\",{\"1\":{\"6647\":1}}],[\"找到了就使用\",{\"1\":{\"4086\":1}}],[\"找到了就返回第一次出现的索引\",{\"1\":{\"2369\":1}}],[\"找到即删除\",{\"1\":{\"2428\":1}}],[\"跨\",{\"1\":{\"3013\":1}}],[\"跨平台本质\",{\"1\":{\"2822\":1}}],[\"跨平台\",{\"1\":{\"2815\":1}}],[\"概述\",{\"0\":{\"3277\":1,\"3285\":1,\"3300\":1,\"3459\":1,\"3713\":1,\"4390\":1,\"4474\":1,\"4663\":1,\"5140\":1,\"5797\":1,\"6588\":1,\"6636\":1,\"7782\":1,\"8668\":1,\"9467\":1,\"9537\":1,\"9556\":1,\"9826\":1,\"9920\":1,\"9964\":1,\"10437\":1}}],[\"概要描述\",{\"1\":{\"2964\":1,\"2976\":1}}],[\"概念上的定义\",{\"1\":{\"3618\":1}}],[\"概念补充\",{\"0\":{\"2828\":1,\"4589\":1}}],[\"概念\",{\"0\":{\"687\":1,\"2997\":1,\"3460\":1,\"3769\":1,\"5061\":1,\"9177\":1,\"9211\":1,\"9741\":1,\"10644\":1},\"1\":{\"224\":1,\"6031\":1}}],[\"省去了直接操作消息头\",{\"1\":{\"9697\":1}}],[\"省去了传递class<t>\",{\"1\":{\"8192\":1}}],[\"省去了切换线程\",{\"1\":{\"5098\":1}}],[\"省去重新编译的过程\",{\"1\":{\"7876\":1}}],[\"省的再写一份\",{\"1\":{\"3900\":1}}],[\"省略很多非核心步骤\",{\"1\":{\"8875\":1}}],[\"省略驱动的注册\",{\"0\":{\"7863\":1}}],[\"省略1参的小括号\",{\"0\":{\"7383\":1}}],[\"省略数据类型\",{\"0\":{\"7378\":1}}],[\"省略这一对\",{\"1\":{\"7366\":1}}],[\"省略了exception处理\",{\"1\":{\"8125\":1}}],[\"省略了异常处理\",{\"1\":{\"6516\":1}}],[\"省略了public\",{\"1\":{\"4491\":2}}],[\"省略\",{\"0\":{\"7391\":1},\"1\":{\"6483\":1,\"6487\":1,\"6555\":1,\"6557\":1,\"6571\":1,\"6573\":1,\"7367\":1}}],[\"省略break的用法\",{\"0\":{\"3371\":1}}],[\"省略大括号\",{\"1\":{\"3351\":1}}],[\"省略类名\",{\"1\":{\"2948\":1}}],[\"省略包名\",{\"1\":{\"2947\":1}}],[\"省级名称\",{\"1\":{\"1348\":1}}],[\"省级区划编号\",{\"1\":{\"1348\":1}}],[\"块标记\",{\"1\":{\"2939\":1}}],[\"放行\",{\"0\":{\"9271\":1}}],[\"放行后的逻辑\",{\"0\":{\"9277\":1},\"1\":{\"9270\":1}}],[\"放行前的逻辑\",{\"0\":{\"9274\":1},\"1\":{\"9270\":1}}],[\"放置依赖的jar包\",{\"1\":{\"8500\":1}}],[\"放到一个orm类中\",{\"1\":{\"8185\":1}}],[\"放到数据库更新方法的调用处\",{\"1\":{\"8140\":1}}],[\"放到集合中\",{\"1\":{\"8054\":1}}],[\"放外面\",{\"1\":{\"6251\":1}}],[\"放入线程池中\",{\"1\":{\"5491\":1}}],[\"放入后端的resource\",{\"1\":{\"1369\":1}}],[\"放在类\",{\"1\":{\"2938\":1}}],[\"整个集群会选出一个\",{\"1\":{\"10448\":1}}],[\"整体步骤很固定\",{\"1\":{\"4463\":1}}],[\"整型数字\",{\"1\":{\"10255\":1}}],[\"整型\",{\"1\":{\"3695\":1}}],[\"整型常量\",{\"1\":{\"3165\":1}}],[\"整形\",{\"0\":{\"3072\":1},\"1\":{\"3024\":1}}],[\"整理思路\",{\"1\":{\"2930\":1}}],[\"整合mybatisplus\",{\"1\":{\"1189\":1}}],[\"整合之后如果没有给开发者带来一些便捷操作\",{\"1\":{\"964\":1}}],[\"整合之后\",{\"1\":{\"963\":1}}],[\"调度决定\",{\"1\":{\"5197\":1}}],[\"调试\",{\"1\":{\"2929\":1,\"7213\":1}}],[\"调用的service方法中有创建session的代码\",{\"1\":{\"9763\":1}}],[\"调用的是空参构造器\",{\"1\":{\"7054\":1}}],[\"调用的是spring重写的showseason方法\",{\"1\":{\"4874\":1}}],[\"调用的是父类中声明的\",{\"1\":{\"4534\":1}}],[\"调用的是父类中的属性\",{\"1\":{\"4162\":1}}],[\"调用的是子类的方法\",{\"1\":{\"4164\":1}}],[\"调用的是子类中的say方法\",{\"1\":{\"4162\":1}}],[\"调用的是list\",{\"1\":{\"2563\":1}}],[\"调用的是collection\",{\"1\":{\"2563\":1}}],[\"调用业务逻辑层\",{\"1\":{\"9561\":1}}],[\"调用业务层获取数据\",{\"1\":{\"1273\":1}}],[\"调用模型\",{\"1\":{\"9545\":1}}],[\"调用get方法\",{\"1\":{\"9004\":1}}],[\"调用getclass\",{\"0\":{\"6995\":1}}],[\"调用对应的方法来获取参数\",{\"1\":{\"9002\":1}}],[\"调用对象指定的属性\",{\"1\":{\"6960\":1}}],[\"调用对象的welcome\",{\"1\":{\"4153\":1}}],[\"调用不同的方法\",{\"1\":{\"8814\":1}}],[\"调用服务器资源\",{\"1\":{\"8396\":1}}],[\"调用服务端方法\",{\"1\":{\"6822\":1}}],[\"调用查询方法\",{\"1\":{\"8162\":1}}],[\"调用preparedstatement\",{\"1\":{\"7999\":1}}],[\"调用proxyfactory类的静态方法\",{\"1\":{\"7287\":1}}],[\"调用driver的connect\",{\"1\":{\"7852\":1}}],[\"调用自定义类的getname方法\",{\"1\":{\"7492\":1}}],[\"调用自己定义的重写的方法\",{\"1\":{\"4534\":1}}],[\"调用后进行日志记录\",{\"1\":{\"7301\":1}}],[\"调用被代理类方法前进行安全检查\",{\"1\":{\"7301\":1}}],[\"调用被代理类方法的方法\",{\"0\":{\"7269\":1}}],[\"调用被代理类方法的接口\",{\"0\":{\"7267\":1}}],[\"调用被代理类的同名方法\",{\"1\":{\"7297\":1}}],[\"调用nike工厂的producecloth方法进行衣服生产\",{\"1\":{\"7222\":1}}],[\"调用next\",{\"1\":{\"6446\":1}}],[\"调用此方法\",{\"1\":{\"7277\":1}}],[\"调用此方法后\",{\"1\":{\"5446\":1}}],[\"调用此构造器创建运行时类的对象\",{\"1\":{\"7179\":1}}],[\"调用构造器\",{\"0\":{\"7177\":1}}],[\"调用静态方法\",{\"1\":{\"7161\":1}}],[\"调用静态结构\",{\"1\":{\"4553\":1}}],[\"调用指定结构\",{\"0\":{\"7144\":1}}],[\"调用扩展类加载器的getparent\",{\"1\":{\"7043\":1}}],[\"调用系统类加载器的getparent\",{\"1\":{\"7043\":1}}],[\"调用类的静态成员\",{\"1\":{\"7025\":1}}],[\"调用类中被重写的showinfo方法\",{\"1\":{\"4872\":1}}],[\"调用class的静态方法\",{\"0\":{\"6998\":1}}],[\"调用运行时类的属性\",{\"0\":{\"6992\":1}}],[\"调用私有方法\",{\"1\":{\"6962\":1}}],[\"调用私有属性\",{\"1\":{\"6962\":1}}],[\"调用私有化构造器\",{\"1\":{\"6962\":1}}],[\"调用属性\",{\"0\":{\"7145\":1},\"1\":{\"6960\":1}}],[\"调用tostring方法\",{\"1\":{\"6958\":1}}],[\"调用setstatus方法响应一个302状态码\",{\"1\":{\"9138\":1}}],[\"调用setblob方法\",{\"1\":{\"8084\":1}}],[\"调用socket的发送\",{\"1\":{\"6837\":1}}],[\"调用start方法\",{\"1\":{\"5185\":1,\"5486\":1}}],[\"调用string的valueof\",{\"1\":{\"4292\":1}}],[\"调用string的构造器\",{\"1\":{\"1504\":1}}],[\"调用string重载的valueof\",{\"1\":{\"4291\":1}}],[\"调用student\",{\"1\":{\"4148\":1}}],[\"调用客户端方法\",{\"1\":{\"6823\":1}}],[\"调用该socket\",{\"1\":{\"6808\":1}}],[\"调用该实例的getclass\",{\"1\":{\"2136\":1,\"6996\":1}}],[\"调用\",{\"1\":{\"6806\":1,\"6807\":1,\"7956\":1,\"7963\":1,\"8004\":1,\"8774\":1}}],[\"调用参数设置为泛型的函数\",{\"1\":{\"6001\":1}}],[\"调用key1所在类的equals\",{\"1\":{\"5862\":1}}],[\"调用key1所在类的hashcode\",{\"1\":{\"5858\":1}}],[\"调用多个方法\",{\"1\":{\"5098\":1}}],[\"调用info方法\",{\"1\":{\"4874\":1}}],[\"调用者分为其他方法调用\",{\"1\":{\"4794\":1}}],[\"调用非静态结构\",{\"1\":{\"4553\":1}}],[\"调用接口中的默认方法\",{\"1\":{\"4534\":1}}],[\"调用时\",{\"1\":{\"4530\":1}}],[\"调用匿名类里的eat方法\",{\"1\":{\"4459\":1}}],[\"调用外部类的name\",{\"1\":{\"4329\":1}}],[\"调用内部类的name\",{\"1\":{\"4329\":1}}],[\"调用包装类xxx的xxxvalue\",{\"1\":{\"4280\":1}}],[\"调用了person对象的tostring方法\",{\"1\":{\"6960\":1}}],[\"调用了对应包装类的tostring\",{\"1\":{\"4261\":1}}],[\"调用了父类的构造器\",{\"1\":{\"4113\":1}}],[\"调用父类中的构造器\",{\"1\":{\"4100\":1}}],[\"调用父类中的say\",{\"1\":{\"4083\":1}}],[\"调用父类中声明的指定的构造器\",{\"1\":{\"4090\":1}}],[\"调用父类属性和方法\",{\"0\":{\"4075\":1}}],[\"调用本类中指定的其他构造器\",{\"1\":{\"3900\":1}}],[\"调用当前线程的run\",{\"1\":{\"5185\":1,\"5205\":1}}],[\"调用当前正在创建的对象属性或方法\",{\"1\":{\"3897\":1}}],[\"调用当前对象属性或方法\",{\"1\":{\"3894\":1}}],[\"调用方法的时候\",{\"1\":{\"8058\":1}}],[\"调用方法的必要条件\",{\"1\":{\"5445\":1,\"5451\":1}}],[\"调用方法a时\",{\"1\":{\"7279\":1}}],[\"调用方法\",{\"0\":{\"7160\":1},\"1\":{\"6960\":1}}],[\"调用方法时\",{\"1\":{\"3764\":1}}],[\"调用方法对象\",{\"1\":{\"2277\":1,\"7171\":1}}],[\"调用在main所在类中声明的方法\",{\"0\":{\"3736\":1}}],[\"调用其执行语句\",{\"1\":{\"3363\":1}}],[\"调用他的方法\",{\"1\":{\"2924\":1}}],[\"调用没有main方法的class文件\",{\"1\":{\"2924\":1}}],[\"调用比较器的某个方法进行正则匹配\",{\"1\":{\"2747\":1}}],[\"调用某个matcher实例的方法\",{\"1\":{\"2683\":1}}],[\"调用有参构造器\",{\"1\":{\"2181\":1,\"7065\":1}}],[\"调用无参构造器\",{\"1\":{\"2181\":1,\"7065\":1}}],[\"调用write\",{\"1\":{\"2073\":1}}],[\"调用ofpattern方法\",{\"1\":{\"1721\":1}}],[\"调用opsforxxx方法\",{\"1\":{\"1025\":1}}],[\"调用format方法\",{\"1\":{\"1704\":1}}],[\"调用like方法\",{\"1\":{\"1248\":1}}],[\"调用日志对象的api记录日志\",{\"1\":{\"882\":1}}],[\"卸载\",{\"1\":{\"2877\":1,\"8429\":1}}],[\"列值增长的修改\",{\"0\":{\"10294\":1}}],[\"列的名字和储存数据的对象中属性的名字是一一对应的\",{\"1\":{\"8049\":1}}],[\"列的别名\",{\"0\":{\"8048\":1}}],[\"列的索引\",{\"1\":{\"8013\":1}}],[\"列的label\",{\"1\":{\"8012\":1}}],[\"列的label或索引\",{\"1\":{\"8011\":1}}],[\"列名\",{\"1\":{\"8012\":1}}],[\"列出的实例系统会自动添加\",{\"1\":{\"4853\":1}}],[\"列出所有的java\",{\"1\":{\"2873\":1}}],[\"列表\",{\"1\":{\"1194\":1,\"1398\":1,\"1399\":1,\"1400\":1,\"1401\":1,\"1402\":1}}],[\"傻瓜式安装即可\",{\"1\":{\"2853\":1}}],[\"面向数据库的api\",{\"1\":{\"7810\":1}}],[\"面向应用的api\",{\"1\":{\"7809\":1}}],[\"面向函数\",{\"1\":{\"7398\":1}}],[\"面向传输的众多\",{\"1\":{\"6427\":1}}],[\"面向接口编程\",{\"1\":{\"4502\":1}}],[\"面向过程\",{\"1\":{\"3599\":2}}],[\"面向过程与面向对象\",{\"0\":{\"3597\":1}}],[\"面向过程语言\",{\"1\":{\"2836\":1}}],[\"面向对象程序设计的重点是\",{\"1\":{\"3621\":1}}],[\"面向对象分析方法分析问题的思路和步骤\",{\"1\":{\"3607\":1}}],[\"面向对象的思想概述\",{\"0\":{\"3605\":1}}],[\"面向对象的三大特征\",{\"0\":{\"3601\":1}}],[\"面向对象更加强调运用人类在日常的思维逻辑中采用的思想方法与原则\",{\"1\":{\"3600\":1}}],[\"面向对象是相对于面向过程而言的\",{\"1\":{\"3599\":1}}],[\"面向对象语言对事物的体现都是以对象的形式\",{\"1\":{\"5521\":1}}],[\"面向对象语言\",{\"1\":{\"2837\":1}}],[\"面向对象\",{\"0\":{\"3596\":1},\"1\":{\"2813\":1,\"3598\":1,\"3599\":1}}],[\"汇编语言\",{\"1\":{\"2834\":1}}],[\"垃圾收集机制\",{\"0\":{\"2824\":1}}],[\"垃圾回收机制无法回收该资源\",{\"1\":{\"6206\":1}}],[\"垃圾回收线程\",{\"1\":{\"5092\":1}}],[\"垃圾回收方法\",{\"1\":{\"4211\":1}}],[\"垃圾回收\",{\"0\":{\"5133\":1},\"1\":{\"2309\":1}}],[\"寄存器\",{\"1\":{\"2820\":1}}],[\"负责将域名转化成ip地址\",{\"1\":{\"6677\":1}}],[\"负责执行指令\",{\"1\":{\"2820\":1}}],[\"负数\",{\"1\":{\"9721\":1}}],[\"负数补码=\",{\"1\":{\"3310\":1}}],[\"负数的补码是在其源码的基础上\",{\"1\":{\"3190\":1}}],[\"负数的反码是源码基础上\",{\"1\":{\"3189\":1}}],[\"负数就进一\",{\"1\":{\"1919\":1}}],[\"负数就舍去\",{\"1\":{\"1916\":1}}],[\"具有轻量性\",{\"1\":{\"10082\":1}}],[\"具有继承关系\",{\"0\":{\"6055\":1}}],[\"具有通用性\",{\"1\":{\"4203\":1}}],[\"具有指令集并使用不同的存储区域\",{\"1\":{\"2820\":1}}],[\"具体应用场景\",{\"0\":{\"10032\":1}}],[\"具体看下图\",{\"1\":{\"9507\":1}}],[\"具体资源路径\",{\"1\":{\"9286\":1}}],[\"具体配置见上文\",{\"1\":{\"8614\":1}}],[\"具体获取方式见代码\",{\"1\":{\"8192\":1}}],[\"具体存储成什么样的字节流\",{\"1\":{\"6428\":1}}],[\"具体是什么类型无要求\",{\"1\":{\"6084\":1}}],[\"具体重写的规则和细节\",{\"1\":{\"5755\":1}}],[\"具体传输数据的细节\",{\"1\":{\"4513\":1}}],[\"具体执行时\",{\"1\":{\"4469\":1}}],[\"具体修饰的目标\",{\"0\":{\"3837\":1}}],[\"具体对象还需要我们进一步创建\",{\"1\":{\"3659\":1}}],[\"具体类型就是类名\",{\"1\":{\"3656\":1}}],[\"具体的\",{\"1\":{\"3908\":1}}],[\"具体的值也是保存在常量词中的\",{\"1\":{\"3232\":1}}],[\"具体的格式\",{\"1\":{\"914\":1}}],[\"具体体现\",{\"0\":{\"3222\":1}}],[\"具体舍入都可以\",{\"1\":{\"1929\":1}}],[\"具体坐标如下\",{\"1\":{\"977\":1,\"1004\":1}}],[\"具体见后续章节和微服务\",{\"1\":{\"472\":1}}],[\"具体如下\",{\"1\":{\"319\":1,\"3515\":1}}],[\"企业都是restapi\",{\"1\":{\"9460\":1}}],[\"企业级应用\",{\"1\":{\"2809\":1}}],[\"企业开发时更多的是基于springcloud的多服务器的微服务项目\",{\"1\":{\"813\":1}}],[\"没法在compass上直接看到\",{\"1\":{\"10721\":1}}],[\"没法直接获取\",{\"1\":{\"2771\":1}}],[\"没必要通过这个方法获取\",{\"1\":{\"8954\":1}}],[\"没这个选项\",{\"1\":{\"8636\":1}}],[\"没报错\",{\"1\":{\"6005\":1}}],[\"没发挥多线程的功能\",{\"1\":{\"5363\":1}}],[\"没锁住所有有安全问题的代码\",{\"1\":{\"5363\":1}}],[\"没导入的用全类名\",{\"1\":{\"3961\":1}}],[\"没加l\",{\"1\":{\"3173\":1}}],[\"没有到期的session也会跟着销毁\",{\"1\":{\"9201\":1}}],[\"没有什么太大的用处\",{\"1\":{\"8780\":1}}],[\"没有就返回false\",{\"1\":{\"8008\":1}}],[\"没有jdbc\",{\"0\":{\"7801\":1}}],[\"没有中间操作\",{\"1\":{\"7606\":1}}],[\"没有中文\",{\"1\":{\"257\":1,\"266\":1}}],[\"没有参数不可省略括号\",{\"1\":{\"7363\":1}}],[\"没有安全方面的问题\",{\"1\":{\"7014\":1}}],[\"没有继承抽象流基类\",{\"1\":{\"6489\":1}}],[\"没有指明泛型的类型\",{\"1\":{\"5983\":1}}],[\"没有指定泛型\",{\"1\":{\"5974\":1}}],[\"没有泛型时\",{\"0\":{\"5958\":1}}],[\"没有其他元素\",{\"1\":{\"5734\":1}}],[\"没有数据\",{\"1\":{\"5590\":1}}],[\"没有及时拿到新数据\",{\"1\":{\"5298\":1}}],[\"没有固定的先后顺序\",{\"1\":{\"5191\":1}}],[\"没有开启线程\",{\"1\":{\"5185\":1}}],[\"没有任何的变量或属性对它进行引用\",{\"1\":{\"5134\":1}}],[\"没有属性\",{\"1\":{\"4935\":1}}],[\"没有通过保存指针来用变量指向值\",{\"1\":{\"4656\":1}}],[\"没有使用static修饰的\",{\"1\":{\"4552\":1}}],[\"没有方法体\",{\"1\":{\"4449\":1}}],[\"没有必要每次使用配置文件数据\",{\"1\":{\"4437\":1}}],[\"没有限制\",{\"1\":{\"4177\":1}}],[\"没有多态\",{\"1\":{\"4167\":1}}],[\"没有显式的声明\",{\"1\":{\"4096\":1}}],[\"没有显式的赋给一个变量名\",{\"1\":{\"3661\":1}}],[\"没有改变iq\",{\"1\":{\"3990\":1}}],[\"没有特殊语法\",{\"1\":{\"3746\":1}}],[\"没有具体返回值的情况\",{\"1\":{\"3741\":1}}],[\"没有返回值的方法中\",{\"1\":{\"3723\":1}}],[\"没有返回值\",{\"1\":{\"3723\":1,\"5502\":1}}],[\"没有返回值就返回null\",{\"1\":{\"2280\":1,\"7174\":1}}],[\"没有默认初始化值\",{\"1\":{\"3700\":1}}],[\"没有地址\",{\"1\":{\"3576\":1}}],[\"没有初始化\",{\"1\":{\"3576\":1,\"4425\":1,\"5350\":1}}],[\"没有关联数组一说\",{\"1\":{\"3464\":1}}],[\"没有break时\",{\"1\":{\"3365\":1}}],[\"没有小数位\",{\"1\":{\"3253\":1}}],[\"没有加l时\",{\"1\":{\"3170\":1}}],[\"没有这个大引号\",{\"1\":{\"2945\":1}}],[\"没有main文件\",{\"0\":{\"2917\":1}}],[\"没有他的时候\",{\"1\":{\"2050\":1}}],[\"没有整合之前操作如果是模式a的话\",{\"1\":{\"964\":1}}],[\"未定义类型\",{\"1\":{\"10107\":1}}],[\"未发生变化\",{\"1\":{\"9126\":1}}],[\"未关闭数据库连接\",{\"1\":{\"8222\":1}}],[\"未能在因特网上进行广泛推广\",{\"1\":{\"6654\":1}}],[\"未检查的转换时的警告\",{\"1\":{\"5047\":1}}],[\"未来的开发模式都是基于注解的\",{\"1\":{\"4887\":1}}],[\"未付款\",{\"1\":{\"4824\":1}}],[\"未初始化则为null\",{\"1\":{\"3583\":1}}],[\"未初始化的不能访问\",{\"1\":{\"3582\":1}}],[\"未指定内层数组的长度\",{\"1\":{\"3575\":1}}],[\"未指定内层数组长度的要先初始化内层数组才能访问内层元素\",{\"1\":{\"3562\":1}}],[\"未指定内层数组长度\",{\"0\":{\"3557\":1}}],[\"未指定数组内层长度\",{\"0\":{\"3546\":1}}],[\"未知\",{\"1\":{\"2728\":1,\"2730\":1}}],[\"未重写equals\",{\"1\":{\"2422\":1}}],[\"搭配使用实现对字符序列的检索和指定模式匹配\",{\"1\":{\"2710\":1}}],[\"搭建的\",{\"1\":{\"9838\":1}}],[\"搭建项目\",{\"0\":{\"1355\":1}}],[\"搭建数据库并创建好数据表\",{\"1\":{\"754\":1}}],[\"必备\",{\"1\":{\"9611\":1}}],[\"必备条件有三个\",{\"1\":{\"7837\":1}}],[\"必定会传入一个servletconfig对象\",{\"1\":{\"8783\":1}}],[\"必须是从localhost登陆的\",{\"1\":{\"10756\":1}}],[\"必须是在admin库下执行该关闭服务命令\",{\"1\":{\"10755\":1}}],[\"必须使\",{\"1\":{\"10716\":1}}],[\"必须使用函数numberint\",{\"1\":{\"10255\":1}}],[\"必须使用在同步代码块或同步方法中\",{\"1\":{\"5460\":1}}],[\"必须使用try\",{\"1\":{\"4785\":1}}],[\"必须使用较大的数据类型进行接收\",{\"1\":{\"3155\":1}}],[\"必须使用单引号\",{\"1\":{\"3136\":1}}],[\"必须heima开头后跟\",{\"1\":{\"9642\":1}}],[\"必须出现\",{\"1\":{\"9642\":1}}],[\"必须出现1次或多次\",{\"1\":{\"9631\":1}}],[\"必须设置\",{\"1\":{\"9631\":1}}],[\"必须进行放行\",{\"1\":{\"9272\":1}}],[\"必须要加\",{\"1\":{\"8834\":1}}],[\"必须要对这一异常进行处理\",{\"1\":{\"6884\":1}}],[\"必须实现servlet接口并复写其方法\",{\"1\":{\"8728\":1}}],[\"必须配置大于0\",{\"1\":{\"8297\":1}}],[\"必须保证该文件已存在\",{\"1\":{\"6231\":1}}],[\"必须创建该类的一个实例对象后\",{\"1\":{\"4617\":1}}],[\"必须返回是\",{\"1\":{\"4237\":1}}],[\"必须也是double\",{\"1\":{\"4052\":1}}],[\"必须借助父类的getxxx\",{\"1\":{\"4036\":1}}],[\"必须在主线程中创建新的线程对象\",{\"1\":{\"5287\":1}}],[\"必须在枚举类的第一行声明枚举类对象\",{\"1\":{\"4854\":1}}],[\"必须在对象创建前初始化\",{\"1\":{\"3984\":1}}],[\"必须在方法声明时\",{\"1\":{\"3721\":1}}],[\"必须添加this来表明该变量是类的成员变量\",{\"1\":{\"3911\":1}}],[\"必须声明在子类构造器的首行\",{\"1\":{\"4094\":1}}],[\"必须声明在当前构造器的首行\",{\"1\":{\"3902\":1}}],[\"必须声明在末尾\",{\"1\":{\"3798\":1}}],[\"必须一样\",{\"1\":{\"3860\":1}}],[\"必须用int类型接收\",{\"1\":{\"3167\":1}}],[\"必须有登录且必须登录用户有对admin操作权限才可以\",{\"1\":{\"10757\":1}}],[\"必须有小数点\",{\"1\":{\"3090\":1}}],[\"必须有main方法\",{\"1\":{\"2906\":1}}],[\"必须以\",{\"1\":{\"3080\":1}}],[\"必须首先将指定为字符串的正则表达式编译为此类的实例\",{\"1\":{\"2679\":1}}],[\"必学\",{\"1\":{\"10\":1}}],[\"我夏天空腹喝凉开水\",{\"1\":{\"10264\":1}}],[\"我的国籍是\",{\"1\":{\"6956\":1,\"6962\":1}}],[\"我知道了\",{\"1\":{\"6751\":1}}],[\"我知道你是a\",{\"1\":{\"6746\":1}}],[\"我爱n门\",{\"1\":{\"6555\":1}}],[\"我要断开连接了\",{\"1\":{\"6750\":1}}],[\"我要取款\",{\"1\":{\"4469\":1}}],[\"我要插入一个正则表达式的反斜线\",{\"1\":{\"2670\":1}}],[\"我现在知道你知道我是a了\",{\"1\":{\"6747\":1}}],[\"我现在\",{\"1\":{\"3747\":1}}],[\"我是一个人\",{\"1\":{\"6956\":1,\"6958\":1,\"6960\":1}}],[\"我是b\",{\"1\":{\"6746\":1}}],[\"我是a\",{\"1\":{\"6745\":1}}],[\"我是\",{\"1\":{\"3747\":1}}],[\"我是jinno我现在12岁\",{\"1\":{\"3747\":1}}],[\"我是jinno我现在11岁\",{\"1\":{\"3747\":1}}],[\"我们如果需要查询同时满足两个以上条件\",{\"1\":{\"10356\":1}}],[\"我们查询数据时\",{\"1\":{\"9925\":1}}],[\"我们会先调用\",{\"1\":{\"9560\":1}}],[\"我们真正使用的类是requestfacade类\",{\"1\":{\"8906\":1}}],[\"我们来使用它们\",{\"1\":{\"8872\":1}}],[\"我们只需要将服务器传过来的servletconfig进行返回即可\",{\"1\":{\"8783\":1}}],[\"我们只管用就行\",{\"1\":{\"5489\":1}}],[\"我们并没有创建servlet类的对象\",{\"1\":{\"8715\":1}}],[\"我们并不知道要计算的代码具体是什么代码\",{\"1\":{\"4465\":1}}],[\"我们直接使用即可\",{\"1\":{\"7413\":1}}],[\"我们再调用代理类的方法时就会进行一些附加操作\",{\"1\":{\"7306\":1}}],[\"我们调用哪个类\",{\"1\":{\"7216\":1}}],[\"我们连接数据库时需要进行安全检查\",{\"1\":{\"7196\":1}}],[\"我们无法直接进行访问\",{\"1\":{\"7184\":1}}],[\"我们能够获取\",{\"1\":{\"7158\":1}}],[\"我们就可以查询到结果了\",{\"1\":{\"9925\":1}}],[\"我们就会用这个方法\",{\"1\":{\"7452\":1}}],[\"我们就称为运行时类\",{\"1\":{\"6969\":1}}],[\"我们就需要专业\",{\"1\":{\"9864\":1}}],[\"我们就需要抛出异常\",{\"1\":{\"4795\":1}}],[\"我们就需要对object类中的equals\",{\"1\":{\"4234\":1}}],[\"我们把类当做是对象\",{\"1\":{\"6966\":1}}],[\"我们形象的称之为\",{\"1\":{\"6930\":1}}],[\"我们已经知道\",{\"1\":{\"6426\":1}}],[\"我们操作file类是在内存层面上进行操作的\",{\"1\":{\"6116\":1}}],[\"我们操作f2时\",{\"1\":{\"2019\":1}}],[\"我们定义了一个接口\",{\"1\":{\"7197\":1}}],[\"我们定义的方法中\",{\"1\":{\"6077\":1,\"6080\":1}}],[\"我们定义变量时\",{\"1\":{\"3107\":1}}],[\"我们要多很多相似类都定义一个代理类\",{\"1\":{\"7209\":1}}],[\"我们要重写hashcode\",{\"1\":{\"5751\":1}}],[\"我们要想在子类中调用父类中声明的属性\",{\"1\":{\"4079\":1}}],[\"我们通常使用list替代数组\",{\"1\":{\"5625\":1}}],[\"我们通过同步机制\",{\"1\":{\"5308\":1}}],[\"我们通过实例化thread类的子类对象来创建多线程\",{\"1\":{\"5164\":1}}],[\"我们通过将属性设置为私有的\",{\"1\":{\"3820\":1}}],[\"我们也就只能操作指定类型的数据了\",{\"1\":{\"5525\":1}}],[\"我们也可以手动实现annotation接口来创建自定义注解\",{\"1\":{\"4899\":1}}],[\"我们使用\",{\"1\":{\"10356\":1}}],[\"我们使用类时\",{\"1\":{\"6972\":1}}],[\"我们使用类的成员时是通过具体的对象使用的\",{\"1\":{\"3632\":1}}],[\"我们使用功能泛型通配符\",{\"1\":{\"6083\":1}}],[\"我们使用同步时\",{\"1\":{\"5405\":1}}],[\"我们用thread类创建的其他线程\",{\"1\":{\"5160\":1}}],[\"我们复制文件\",{\"1\":{\"5099\":1}}],[\"我们称之为配置参数\",{\"1\":{\"4927\":1}}],[\"我们选择的异常类型有\",{\"1\":{\"4797\":1}}],[\"我们建议这几个方法使用throws的方式进行处理\",{\"1\":{\"4786\":1}}],[\"我们进行处理的效果是提示用户发生了资源缺失\",{\"1\":{\"4680\":1}}],[\"我们平时说的异常一般指的就是exception\",{\"1\":{\"4674\":1}}],[\"我们常说的异常处理\",{\"1\":{\"4669\":1}}],[\"我们有时候希望无论是否产生了对象或无论产生了多少对象的情况下\",{\"1\":{\"4364\":1}}],[\"我们自己写的java代码编译成的是class文件\",{\"1\":{\"9471\":1}}],[\"我们自己创建的springboot项目\",{\"1\":{\"400\":1}}],[\"我们自定义的类如果使用equals\",{\"1\":{\"4234\":1}}],[\"我们实际执行的是子类重写父类的方法\",{\"1\":{\"4126\":1}}],[\"我们不应该把清晨浪费在手机上\",{\"1\":{\"10264\":1}}],[\"我们不知道要创建什么对象\",{\"1\":{\"6951\":1}}],[\"我们不会去直接使用节点流\",{\"1\":{\"6213\":1,\"6223\":1}}],[\"我们不用为每一个泛型都定义一个同样的方法了\",{\"1\":{\"6080\":1}}],[\"我们不妨将此方法声明同步的\",{\"1\":{\"5336\":1}}],[\"我们不手动调用\",{\"1\":{\"4103\":1}}],[\"我们不能直接访问该类中的非静态成员\",{\"1\":{\"4617\":1}}],[\"我们不能为每一种数据库都定义一套方法\",{\"1\":{\"4140\":1}}],[\"我们不能使用传统的+\",{\"1\":{\"1883\":1}}],[\"我们不能再原始配置文件上修改\",{\"1\":{\"806\":1}}],[\"我们想在子类的方法中调用父类中被重写的方法时\",{\"1\":{\"4082\":1}}],[\"我们习惯省略\",{\"1\":{\"4076\":1}}],[\"我们执行s1\",{\"1\":{\"4063\":1}}],[\"我们都能够获取到\",{\"1\":{\"7183\":1}}],[\"我们都是将对象格式化成json进行传输\",{\"1\":{\"6533\":1}}],[\"我们都选择省略this\",{\"1\":{\"3898\":1}}],[\"我们都将功能\",{\"1\":{\"3613\":1}}],[\"我们必须显式的使用\",{\"1\":{\"3895\":1,\"3898\":1}}],[\"我们必须返回一致的数据类型让前端使用\",{\"1\":{\"1283\":1}}],[\"我们创建了类的多个对象\",{\"1\":{\"4379\":1,\"4380\":1}}],[\"我们创建对象时\",{\"1\":{\"3871\":1}}],[\"我们创建对象时进行的语法其实是调用的构造器\",{\"1\":{\"3852\":1}}],[\"我们创建的对象\",{\"1\":{\"3661\":1}}],[\"我们可以像springboot一样\",{\"1\":{\"9530\":1}}],[\"我们可以直接查看javaee的api文档中关于servletrequest和httpservletrequest的接口文档\",{\"1\":{\"8911\":1}}],[\"我们可以利用函数式接口\",{\"1\":{\"7407\":1}}],[\"我们可以利用反射机制\",{\"1\":{\"6928\":1}}],[\"我们可以更加灵活和统一的处理众多的方法\",{\"1\":{\"7215\":1}}],[\"我们可以通过不同的方式来获取此运行时类\",{\"1\":{\"6991\":1}}],[\"我们可以通过这个对象看到类的结构\",{\"1\":{\"6930\":1}}],[\"我们可以访问\",{\"1\":{\"6866\":1}}],[\"我们可以这样写\",{\"1\":{\"6594\":1}}],[\"我们可以用通配符解决这个问题\",{\"1\":{\"6059\":1}}],[\"我们可以用this来区分属性和局部变量\",{\"1\":{\"3908\":1}}],[\"我们可以考虑使用this充当同步监视器\",{\"1\":{\"5320\":1}}],[\"我们可以将其作为一个类\",{\"1\":{\"4468\":1}}],[\"我们可以到\",{\"1\":{\"4244\":1}}],[\"我们可以在反射中解析并使用\",{\"1\":{\"5058\":1}}],[\"我们可以在子类的构造器中显式的使用\",{\"1\":{\"4090\":1}}],[\"我们可以在子类的方法或构造器中\",{\"1\":{\"4076\":1}}],[\"我们可以在方法中通过方法体来验证和保护要访问的数据\",{\"1\":{\"3818\":1}}],[\"我们可以使用ﬁndone命令来实现\",{\"1\":{\"10313\":1}}],[\"我们可以使用class类的实例\",{\"1\":{\"6972\":1}}],[\"我们可以使用\",{\"1\":{\"3897\":1}}],[\"我们可以看成是一维数组array1又作为另一个一维数组array2的元素而存在\",{\"1\":{\"3533\":1}}],[\"我们正确的做法是\",{\"1\":{\"3818\":1}}],[\"我们在搜索的时候输入关键字\",{\"1\":{\"9852\":1}}],[\"我们在page1\",{\"1\":{\"9184\":2}}],[\"我们在servlet中写的代码其实就是对http协议请求的一种响应\",{\"1\":{\"8796\":1,\"8822\":1}}],[\"我们在开发中\",{\"1\":{\"6635\":1}}],[\"我们在使用的时候\",{\"1\":{\"6080\":1}}],[\"我们在定义数据类型时\",{\"1\":{\"5940\":1}}],[\"我们在重写hashcode\",{\"1\":{\"5765\":1}}],[\"我们在向下转型之前\",{\"1\":{\"4185\":1}}],[\"我们在编译期\",{\"1\":{\"4126\":1}}],[\"我们在类的构造器中\",{\"1\":{\"3900\":1}}],[\"我们在类外部直接访问了类内部的属性\",{\"1\":{\"3818\":1}}],[\"我们在调用局部变量之前\",{\"1\":{\"3700\":1}}],[\"我们经常会用到将一个对象作为参数\",{\"1\":{\"3785\":1}}],[\"我们将m\",{\"1\":{\"3783\":1}}],[\"我们赋值即可\",{\"1\":{\"3701\":1}}],[\"我们需要两个步骤\",{\"1\":{\"9074\":1,\"9090\":1}}],[\"我们需要将查询到的结果\",{\"1\":{\"8185\":1}}],[\"我们需要将异常写入日志\",{\"1\":{\"4680\":1}}],[\"我们需要通过一个参数\",{\"1\":{\"8119\":1}}],[\"我们需要一个功能\",{\"1\":{\"7406\":1}}],[\"我们需要一次性创建20个person类的实例\",{\"1\":{\"3657\":1}}],[\"我们需要使用class类的对象拿到想要的内容\",{\"1\":{\"6967\":1}}],[\"我们需要建立符号表\",{\"1\":{\"5129\":1}}],[\"我们需要自己手动的进行资源的释放\",{\"1\":{\"4746\":1}}],[\"我们需要在user类中调用getuser方法获取数据\",{\"1\":{\"4139\":1}}],[\"我们需要对多个对象进行排序\",{\"1\":{\"1730\":1}}],[\"我们是通过创建类和方法来完成一些功能的\",{\"1\":{\"3652\":1}}],[\"我们优先选择使用switch\",{\"1\":{\"3376\":1}}],[\"我们写分支结构时\",{\"1\":{\"3376\":1}}],[\"我们知道\",{\"1\":{\"3191\":1}}],[\"我们输入的字符都是通过转码变成二进制让计算机识别的\",{\"1\":{\"3127\":1}}],[\"我们一定会直接或间接的调用其父类的构造器\",{\"1\":{\"4112\":1}}],[\"我们一般都将属性定义为私有的\",{\"1\":{\"3845\":1}}],[\"我们一般使用string作为key\",{\"1\":{\"5910\":1}}],[\"我们一般使用时选择double\",{\"1\":{\"3093\":1}}],[\"我们一般使用第三种\",{\"1\":{\"1687\":1}}],[\"我们一次只能读1个字符\",{\"1\":{\"2050\":1}}],[\"我们主要用该对象进行日期时间的\",{\"1\":{\"1687\":1}}],[\"我们采用jdk8新增的时间api\",{\"1\":{\"1607\":1}}],[\"什么标签名都可以\",{\"1\":{\"9592\":1}}],[\"什么时候调用\",{\"1\":{\"5197\":1}}],[\"什么都不返回\",{\"1\":{\"2632\":1,\"7429\":1,\"8944\":1}}],[\"什么是约束\",{\"0\":{\"9622\":1}}],[\"什么是io\",{\"1\":{\"6150\":1}}],[\"什么是annotation\",{\"0\":{\"4879\":1}}],[\"什么是枚举类\",{\"0\":{\"4818\":1}}],[\"什么是包\",{\"0\":{\"3916\":1}}],[\"什么是封装\",{\"0\":{\"3812\":1}}],[\"什么是类与对象\",{\"0\":{\"3616\":1}}],[\"什么是多环境\",{\"1\":{\"816\":1}}],[\"什么是starter\",{\"0\":{\"408\":1}}],[\"消耗5s\",{\"1\":{\"8123\":1}}],[\"消耗\",{\"1\":{\"8111\":1,\"8115\":1}}],[\"消耗400s\",{\"1\":{\"8107\":1}}],[\"消费问题\",{\"0\":{\"5299\":1}}],[\"消费型functional\",{\"1\":{\"2644\":1}}],[\"消费型\",{\"1\":{\"2632\":1,\"7429\":1}}],[\"消息与缓存\",{\"0\":{\"1155\":1}}],[\"消息\",{\"1\":{\"917\":1,\"1177\":1}}],[\"消息队列rabbitmq依赖\",{\"1\":{\"1157\":1}}],[\"消息队列\",{\"1\":{\"25\":1,\"96\":1}}],[\"〇\",{\"0\":{\"2629\":1}}],[\"拥有可变参数\",{\"1\":{\"4059\":1}}],[\"拥有了iterator接口\",{\"1\":{\"2618\":1,\"2624\":1}}],[\"拥有所有权限\",{\"1\":{\"1410\":1}}],[\"增删改查可以添加很多条件\",{\"1\":{\"10120\":1}}],[\"增强了对文件处理和文件系统特性的支持\",{\"1\":{\"6589\":1}}],[\"增强for循环\",{\"0\":{\"5619\":1}}],[\"增强for循环中\",{\"1\":{\"5616\":1}}],[\"增强\",{\"0\":{\"5605\":1}}],[\"增强代码的可维护性\",{\"1\":{\"3826\":1}}],[\"增改集合\",{\"1\":{\"2591\":1}}],[\"增改元素\",{\"1\":{\"2587\":1}}],[\"增加了\",{\"1\":{\"5558\":1}}],[\"增加了对元数据\",{\"1\":{\"4878\":1}}],[\"增加可读性\",{\"1\":{\"2928\":1}}],[\"增加日期时间\",{\"1\":{\"1659\":1}}],[\"增加\",{\"1\":{\"1224\":1}}],[\"特别是企业级应用\",{\"1\":{\"7788\":1}}],[\"特别地\",{\"1\":{\"3701\":1}}],[\"特征是代理类和目标对象的类都是在编译期间确定下来\",{\"1\":{\"7205\":1}}],[\"特征\",{\"1\":{\"3662\":1}}],[\"特殊字符还是不支持\",{\"1\":{\"9725\":1}}],[\"特殊配置参数\",{\"0\":{\"4934\":1},\"1\":{\"4918\":1}}],[\"特殊结构\",{\"0\":{\"4544\":1}}],[\"特殊对象对tostring的重写\",{\"0\":{\"4254\":1}}],[\"特殊类\",{\"0\":{\"4200\":1}}],[\"特殊形式对象\",{\"0\":{\"3654\":1}}],[\"特殊关键字\",{\"1\":{\"3424\":1}}],[\"特殊情况下省略的内容\",{\"0\":{\"7353\":1}}],[\"特殊情况下\",{\"1\":{\"3895\":1,\"3898\":1}}],[\"特殊情况\",{\"0\":{\"3157\":1,\"4246\":1},\"1\":{\"4048\":1}}],[\"特殊的0\",{\"1\":{\"1881\":1}}],[\"特点\",{\"0\":{\"4350\":1,\"5700\":1,\"5903\":1,\"7248\":1},\"1\":{\"3050\":1,\"5717\":1,\"5776\":1,\"5828\":1}}],[\"特性\",{\"0\":{\"2579\":1}}],[\"被观察者\",{\"1\":{\"9318\":2,\"9319\":2}}],[\"被拦截器拦截\",{\"1\":{\"9275\":1}}],[\"被`h1`渲染后的hello\",{\"1\":{\"9084\":1}}],[\"被代理类的对象\",{\"1\":{\"7277\":1,\"7279\":1}}],[\"被代理类中的所有方法都会被代理类中的invoke方法增强\",{\"1\":{\"7251\":1}}],[\"被代理类\",{\"0\":{\"7228\":1},\"1\":{\"7199\":1,\"7219\":1,\"7283\":1}}],[\"被预先定义的服务通信占用\",{\"1\":{\"6683\":1}}],[\"被规定为一个16位的整数\",{\"1\":{\"6680\":1}}],[\"被占着者\",{\"1\":{\"5430\":1}}],[\"被保证线程安全的代码\",{\"1\":{\"5384\":1}}],[\"被人为挂起或执行输入输出操作时\",{\"1\":{\"5291\":1}}],[\"被\",{\"1\":{\"5060\":1}}],[\"被它修饰的\",{\"1\":{\"5005\":1}}],[\"被他修饰类就是枚举类\",{\"1\":{\"4849\":1}}],[\"被称为钩子函数\",{\"1\":{\"4469\":1}}],[\"被static修饰的属性就是静态属性\",{\"1\":{\"4377\":1}}],[\"被static修饰后的成员具备的特点\",{\"0\":{\"4369\":1}}],[\"被所有对象所共享\",{\"1\":{\"4372\":1}}],[\"被i去除\",{\"1\":{\"3457\":1}}],[\"被删除的元素\",{\"1\":{\"2563\":1}}],[\"被替换成了具体的值\",{\"1\":{\"867\":1}}],[\"处开始\",{\"1\":{\"6861\":1}}],[\"处于新建状态的线程被start\",{\"1\":{\"5289\":1}}],[\"处理业务\",{\"1\":{\"9539\":1}}],[\"处理请求\",{\"1\":{\"8396\":1}}],[\"处理不同的查询结果集\",{\"1\":{\"8336\":1}}],[\"处理结果集一行数据中的每一个列\",{\"1\":{\"8045\":1,\"8054\":1,\"8201\":2}}],[\"处理结果集\",{\"1\":{\"8037\":1,\"8089\":1}}],[\"处理本地文件\",{\"1\":{\"6584\":1}}],[\"处理图片资源\",{\"0\":{\"6288\":1}}],[\"处理流\",{\"0\":{\"6183\":1},\"1\":{\"6166\":1}}],[\"处理继承thread类的线程安全问题\",{\"0\":{\"5328\":1}}],[\"处理throws来的的异常\",{\"1\":{\"4803\":1}}],[\"处理异常还是要在代码调用处使用try\",{\"1\":{\"4770\":1}}],[\"处理没有意义\",{\"1\":{\"4763\":1}}],[\"处理\",{\"1\":{\"4579\":1,\"4740\":1,\"9835\":1}}],[\"处理数据\",{\"1\":{\"3480\":1}}],[\"处理成功\",{\"1\":{\"1286\":1}}],[\"处元素进行交换\",{\"1\":{\"2494\":1}}],[\"处元素和\",{\"1\":{\"2494\":1}}],[\"反序列化时\",{\"1\":{\"6576\":1}}],[\"反序列化流\",{\"1\":{\"6557\":1,\"6573\":1}}],[\"反序列化\",{\"0\":{\"6556\":1,\"6572\":1},\"1\":{\"6532\":1,\"6536\":1}}],[\"反射的动态性\",{\"0\":{\"6945\":1}}],[\"反射相关api\",{\"0\":{\"6939\":1}}],[\"反射机制使用示例\",{\"0\":{\"6954\":1}}],[\"反射机制最大的特点\",{\"1\":{\"6946\":1}}],[\"反射机制提供的功能\",{\"0\":{\"6931\":1}}],[\"反射机制允许程序在执行期借助于reflection\",{\"1\":{\"6922\":1}}],[\"反射机制\",{\"0\":{\"6921\":1}}],[\"反射机制介绍\",{\"0\":{\"6920\":1}}],[\"反射获取注解信息\",{\"0\":{\"5057\":1}}],[\"反射也得到了加强\",{\"1\":{\"5008\":1}}],[\"反射\",{\"1\":{\"4887\":1,\"5331\":1,\"6922\":1,\"6930\":1}}],[\"反射类\",{\"0\":{\"2125\":1},\"1\":{\"131\":1}}],[\"反馈评分\",{\"1\":{\"4469\":1}}],[\"反抗评分\",{\"1\":{\"4469\":1}}],[\"反之不成立\",{\"1\":{\"3377\":1}}],[\"反码+1\",{\"1\":{\"3310\":1}}],[\"反码\",{\"0\":{\"3186\":1},\"1\":{\"3189\":1}}],[\"反复使用一个正则表达式字符串进行匹配效率较低\",{\"1\":{\"2709\":1}}],[\"反向引用\",{\"1\":{\"2676\":1}}],[\"反转\",{\"1\":{\"2483\":1}}],[\"查\",{\"1\":{\"10653\":1}}],[\"查找\",{\"1\":{\"5698\":1}}],[\"查找替换\",{\"1\":{\"2480\":1}}],[\"查看用户\",{\"0\":{\"10719\":1}}],[\"查看角色权限\",{\"0\":{\"10655\":1}}],[\"查看优先级\",{\"0\":{\"10623\":1}}],[\"查看member可知\",{\"1\":{\"10593\":1}}],[\"查看副本集状态\",{\"0\":{\"10549\":1},\"1\":{\"10575\":1,\"10581\":1}}],[\"查看副本集的配置内容\",{\"0\":{\"10535\":1}}],[\"查看副本集信息时\",{\"1\":{\"10534\":1}}],[\"查看副本集\",{\"0\":{\"10532\":1}}],[\"查看启动结果\",{\"0\":{\"10509\":1}}],[\"查看执行计划\",{\"1\":{\"10421\":1}}],[\"查看创建的索引\",{\"1\":{\"10399\":1}}],[\"查看comment集合中所有的索引情况\",{\"1\":{\"10379\":1}}],[\"查看索引\",{\"0\":{\"10375\":1}}],[\"查看当前库中的集合\",{\"0\":{\"10227\":1}}],[\"查看正在使用的数据库\",{\"0\":{\"10217\":1}}],[\"查看所有数据库\",{\"0\":{\"10202\":1}}],[\"查看是否启动了\",{\"1\":{\"10164\":1}}],[\"查看控制台的log\",{\"1\":{\"8617\":1}}],[\"查看进程\",{\"1\":{\"8452\":1}}],[\"查看到的源码是经过反编译的\",{\"1\":{\"7832\":1}}],[\"查看线程的优先级\",{\"1\":{\"5246\":1}}],[\"查看\",{\"1\":{\"4740\":1,\"6482\":1}}],[\"查看版本信息\",{\"1\":{\"2877\":1}}],[\"查看安装\",{\"1\":{\"2877\":1}}],[\"查询多个角色权限\",{\"1\":{\"10663\":1}}],[\"查询多条记录构成的集合\",{\"0\":{\"8386\":1}}],[\"查询其它数据库中指定的角色权限\",{\"1\":{\"10663\":1}}],[\"查询当前数据库中的某角色的权限\",{\"1\":{\"10663\":1}}],[\"查询指定权限\",{\"0\":{\"10662\":1}}],[\"查询指定端口\",{\"1\":{\"746\":1}}],[\"查询所有角色权限\",{\"0\":{\"10656\":1,\"10659\":1}}],[\"查询所有数据\",{\"0\":{\"10310\":1}}],[\"查询的结果如下\",{\"1\":{\"10725\":1}}],[\"查询的字段只包含索引时\",{\"1\":{\"10431\":1}}],[\"查询的时候\",{\"1\":{\"10350\":1}}],[\"查询的时候传递该属性\",{\"1\":{\"8187\":1}}],[\"查询刚创建的索引\",{\"1\":{\"10394\":1}}],[\"查询评论集合中userid为1003\",{\"1\":{\"10357\":1}}],[\"查询评论集合中userid字段不包含1003和1004的文档\",{\"1\":{\"10354\":1}}],[\"查询评论集合中likenum大于等于700\",{\"1\":{\"10357\":1}}],[\"查询评论的集合中userid字段包含1003或1004的文档\",{\"1\":{\"10354\":1}}],[\"查询评论点赞数量大于700的记录\",{\"1\":{\"10351\":1}}],[\"查询评论内容包含hello的\",{\"1\":{\"10348\":1}}],[\"查询用户id是1开头的\",{\"1\":{\"10348\":1}}],[\"查询条件\",{\"1\":{\"10323\":1}}],[\"查询条件的属性名是直接手写的字符串\",{\"1\":{\"1250\":1}}],[\"查询数据库\",{\"1\":{\"9540\":1}}],[\"查询类似于最大的\",{\"0\":{\"8390\":1}}],[\"查询一条记录\",{\"0\":{\"8384\":1}}],[\"查询单个值对象\",{\"1\":{\"8378\":1}}],[\"查询表中的所有记录构成的集合\",{\"1\":{\"8205\":1,\"8207\":1}}],[\"查询特殊值的dql方法\",{\"1\":{\"8201\":1}}],[\"查询不同的表\",{\"0\":{\"8057\":1}}],[\"查询custom表中的数据\",{\"0\":{\"8035\":1}}],[\"查询示例\",{\"0\":{\"8033\":1}}],[\"查询操作比较复杂一点\",{\"1\":{\"7996\":1}}],[\"查询速度比list快\",{\"1\":{\"5717\":1}}],[\"查询是否完成\",{\"1\":{\"5476\":1}}],[\"查询某个元素首次出现的位置\",{\"1\":{\"2551\":1}}],[\"查询和修改等操作\",{\"1\":{\"2474\":1,\"5936\":1}}],[\"查询字符串是否包含某个字符串\",{\"1\":{\"1457\":1}}],[\"查询结果解析\",{\"0\":{\"10423\":1}}],[\"查询结果是一个resultset\",{\"1\":{\"7999\":1}}],[\"查询结果\",{\"1\":{\"1241\":1}}],[\"查询\",{\"1\":{\"1194\":1,\"1224\":1,\"5763\":1,\"8364\":1}}],[\"查询端口\",{\"1\":{\"746\":1}}],[\"移除所有索引\",{\"0\":{\"10412\":1}}],[\"移除索引\",{\"0\":{\"10407\":1}}],[\"移除全部数据\",{\"0\":{\"10298\":1}}],[\"移除等操作\",{\"1\":{\"5664\":1}}],[\"移除元素\",{\"0\":{\"5601\":1},\"1\":{\"2594\":1}}],[\"移除元素的值为obj的元素\",{\"1\":{\"2561\":1}}],[\"移除的元素不存在\",{\"1\":{\"2562\":1}}],[\"移除指定集合内的所有索引\",{\"1\":{\"10413\":1}}],[\"移除指定索引\",{\"0\":{\"10409\":1}}],[\"移除指定key的key\",{\"1\":{\"2594\":1}}],[\"移除指定index的元素并返回\",{\"1\":{\"2558\":1}}],[\"移除指定index的元素\",{\"1\":{\"2557\":1}}],[\"移除指针指向的值\",{\"1\":{\"2469\":1}}],[\"移除交集\",{\"1\":{\"2431\":1}}],[\"移动指针\",{\"0\":{\"8007\":1}}],[\"移动到\",{\"1\":{\"6621\":1}}],[\"移动硬盘等都支持usb连接\",{\"1\":{\"4478\":1}}],[\"移动后的文件\",{\"0\":{\"2018\":1}}],[\"移动\",{\"0\":{\"2016\":1},\"1\":{\"2012\":1}}],[\"移动端应用\",{\"1\":{\"1385\":1}}],[\"泛型里已经规定了有一个integer类型的参数\",{\"1\":{\"7519\":1}}],[\"泛型是任何类型的list都可以调用这个方法\",{\"1\":{\"6080\":1}}],[\"泛型参数是在调用方法时确定的\",{\"1\":{\"6049\":1}}],[\"泛型标识\",{\"1\":{\"6041\":1}}],[\"泛型>\",{\"1\":{\"6041\":1}}],[\"泛型方法\",{\"1\":{\"6048\":1}}],[\"泛型方法使用的泛型标识\",{\"1\":{\"6039\":1}}],[\"泛型方法所属的类是不是泛型都没有关系\",{\"1\":{\"6035\":1}}],[\"泛型方法跟泛型类\",{\"1\":{\"6034\":1}}],[\"泛型接口没有任何关系\",{\"1\":{\"6034\":1}}],[\"泛型修饰类\",{\"1\":{\"6009\":1}}],[\"泛型要使用一路都用\",{\"1\":{\"6007\":1}}],[\"泛型对应的类型均按照object处理\",{\"1\":{\"6006\":1}}],[\"泛型如果不指定\",{\"1\":{\"6006\":1}}],[\"泛型擦除\",{\"1\":{\"6006\":1}}],[\"泛型不同的引用不能相互赋值\",{\"1\":{\"6004\":1}}],[\"泛型默认是object类型\",{\"1\":{\"6001\":1}}],[\"泛型类型的数组\",{\"1\":{\"6012\":1}}],[\"泛型类的构造器\",{\"0\":{\"5995\":1}}],[\"泛型类的实例化\",{\"0\":{\"5991\":1}}],[\"泛型类可能有多个参数\",{\"1\":{\"5989\":1}}],[\"泛型一般用t\",{\"1\":{\"5987\":1}}],[\"泛型主要用于集合\",{\"1\":{\"5957\":1}}],[\"泛型的第一个参数\",{\"1\":{\"8201\":1}}],[\"泛型的指定中不能使用基本数据类型\",{\"1\":{\"6008\":1}}],[\"泛型的类型只能是类\",{\"1\":{\"5993\":1}}],[\"泛型的类型必须是类\",{\"1\":{\"5980\":1}}],[\"泛型的类型\",{\"1\":{\"5979\":1}}],[\"泛型的类型检查\",{\"1\":{\"5967\":1}}],[\"泛型的嵌套\",{\"1\":{\"5970\":1}}],[\"泛型的发展\",{\"1\":{\"5948\":1}}],[\"泛型的概念\",{\"0\":{\"5945\":1}}],[\"泛型的设计背景\",{\"0\":{\"5943\":1}}],[\"泛型以后\",{\"1\":{\"5558\":1}}],[\"泛型声明\",{\"1\":{\"5029\":1}}],[\"泛型\",{\"0\":{\"2400\":1,\"2577\":1,\"5938\":1,\"10886\":1},\"1\":{\"5999\":2,\"6072\":1}}],[\"泛型永远都是string\",{\"1\":{\"1038\":1}}],[\"快速入门步骤\",{\"0\":{\"8688\":1}}],[\"快速入门\",{\"0\":{\"8687\":1}}],[\"快速在各个线程间切换\",{\"1\":{\"5090\":1}}],[\"快速生成一个list集合\",{\"1\":{\"2389\":1}}],[\"快捷键\",{\"1\":{\"553\":1,\"7324\":1}}],[\"值不能重复的\",{\"1\":{\"10382\":1}}],[\"值不一定相同\",{\"1\":{\"5760\":1}}],[\"值是字符串\",{\"1\":{\"9631\":3}}],[\"值是直接储存在字符串常量词的\",{\"1\":{\"3230\":1}}],[\"值小的先执行\",{\"1\":{\"9310\":1}}],[\"值也是字符串\",{\"1\":{\"9017\":1}}],[\"值也相等\",{\"1\":{\"5818\":1}}],[\"值可自定义\",{\"1\":{\"6575\":1}}],[\"值可以重复\",{\"1\":{\"2580\":1}}],[\"值相同\",{\"1\":{\"5760\":1}}],[\"值相等也意味着值的数据类型必须相等\",{\"1\":{\"2378\":1}}],[\"值来决定元素的存储位置\",{\"1\":{\"5711\":1,\"5775\":1}}],[\"值来表示字符型常量\",{\"1\":{\"3123\":1}}],[\"值的集合或者列表可以表示成数组\",{\"1\":{\"10098\":1}}],[\"值的标识符\",{\"1\":{\"5126\":1}}],[\"值的末尾要l\",{\"1\":{\"3169\":1}}],[\"值传递\",{\"1\":{\"3778\":1}}],[\"值必须加双引号\",{\"1\":{\"3212\":1}}],[\"值\",{\"1\":{\"3007\":1,\"4579\":1,\"5758\":1}}],[\"值为boolean\",{\"1\":{\"10569\":1}}],[\"值为myannotations\",{\"1\":{\"5019\":1}}],[\"值为1\",{\"1\":{\"10557\":1,\"10560\":1,\"10574\":1}}],[\"值为10\",{\"1\":{\"4080\":1}}],[\"值为1的集合元素被删除\",{\"1\":{\"2469\":1}}],[\"值为null\",{\"1\":{\"3563\":1}}],[\"值为数据\",{\"1\":{\"3538\":1}}],[\"值为内层数组的内存地址\",{\"1\":{\"3537\":1}}],[\"值为额外include的环境\",{\"1\":{\"859\":1}}],[\"值一样\",{\"1\":{\"2375\":1}}],[\"复合索引中列出的字段顺序很重要\",{\"1\":{\"10369\":1}}],[\"复合索引\",{\"0\":{\"10367\":1},\"1\":{\"10399\":1}}],[\"复写接口中的方法\",{\"1\":{\"9445\":1}}],[\"复写方法\",{\"1\":{\"8680\":1}}],[\"复制证书\",{\"0\":{\"10771\":1}}],[\"复制可以提供增加的读取性能\",{\"1\":{\"10442\":1}}],[\"复制可提供一定级别的容错功能\",{\"1\":{\"10441\":1}}],[\"复制提供冗余并提高数据可用性\",{\"1\":{\"10441\":1}}],[\"复制操作花费的时间为\",{\"1\":{\"6359\":1}}],[\"复制完一个\",{\"1\":{\"5099\":1}}],[\"复制品\",{\"1\":{\"3778\":1}}],[\"复制一份内存空间\",{\"0\":{\"3485\":1}}],[\"复制指定的数组\",{\"1\":{\"2374\":1}}],[\"复杂配置等学完spring系列再研究\",{\"1\":{\"12\":1}}],[\"键不能含有\",{\"1\":{\"10271\":1}}],[\"键不可以重复\",{\"1\":{\"2580\":1}}],[\"键值对key\",{\"1\":{\"5850\":1}}],[\"键\",{\"1\":{\"5801\":1}}],[\"键盘\",{\"1\":{\"4478\":1}}],[\"键盘输入\",{\"1\":{\"2331\":1,\"2788\":1}}],[\"键入\",{\"1\":{\"2345\":1,\"2802\":1}}],[\"限制下面的方法为重写父类中的方法\",{\"1\":{\"4892\":1,\"4901\":1}}],[\"限制对属性的不合理操作\",{\"1\":{\"3825\":1}}],[\"限制输入的字符类型\",{\"1\":{\"2339\":1,\"2796\":1}}],[\"限制日志大小\",{\"1\":{\"933\":1}}],[\"效果\",{\"1\":{\"2332\":1,\"2544\":1,\"2789\":1,\"5252\":1,\"5310\":1,\"8734\":1}}],[\"效率测试\",{\"0\":{\"6356\":1}}],[\"效率太低\",{\"1\":{\"5725\":1}}],[\"效率高\",{\"1\":{\"1552\":1,\"5635\":1,\"5815\":1}}],[\"效率低\",{\"1\":{\"1551\":1,\"5350\":1,\"5374\":1,\"5642\":1,\"5837\":1,\"6735\":1}}],[\"效率更高了\",{\"1\":{\"536\":1}}],[\"请选择在配置文件中添加选项\",{\"1\":{\"10643\":1}}],[\"请选择compass方式连接mongodb\",{\"1\":{\"10178\":1}}],[\"请省略此参数\",{\"1\":{\"10309\":1}}],[\"请省略此参数或传递空文档\",{\"1\":{\"10308\":1}}],[\"请求数据\",{\"1\":{\"9812\":1}}],[\"请求与请求之间独立后\",{\"1\":{\"9667\":1}}],[\"请求与响应概述\",{\"0\":{\"8869\":1}}],[\"请求与响应\",{\"0\":{\"8868\":1},\"1\":{\"8771\":1}}],[\"请求\",{\"1\":{\"9304\":1,\"9305\":1}}],[\"请求阶段\",{\"1\":{\"9276\":1}}],[\"请求时会执行的逻辑\",{\"1\":{\"9275\":1}}],[\"请求被拦截后就不会去访问servlet了\",{\"1\":{\"9272\":1}}],[\"请求从资源a到资源b的过程就叫请求转发\",{\"1\":{\"9108\":1}}],[\"请求转发也是可以共享数据的\",{\"1\":{\"9188\":1}}],[\"请求转发的特点\",{\"0\":{\"9125\":1}}],[\"请求转发的实现方式\",{\"0\":{\"9110\":1}}],[\"请求转发\",{\"0\":{\"9103\":1}}],[\"请求参数的键都是字符串\",{\"1\":{\"9017\":1}}],[\"请求参数的处理方式\",{\"1\":{\"8994\":1}}],[\"请求参数\",{\"0\":{\"8993\":1}}],[\"请求体中的数据格式如下\",{\"1\":{\"8975\":1}}],[\"请求体\",{\"0\":{\"8974\":1}}],[\"请求结果如下\",{\"1\":{\"8956\":1}}],[\"请求资源路径\",{\"1\":{\"8926\":1}}],[\"请求行包含三块内容\",{\"1\":{\"8926\":1}}],[\"请求行\",{\"0\":{\"8925\":1}}],[\"请求行+请求头+请求体\",{\"1\":{\"8889\":1}}],[\"请求方式的处理逻辑\",{\"1\":{\"8809\":2}}],[\"请求方式一共有7种\",{\"1\":{\"8804\":1}}],[\"请求方式\",{\"0\":{\"8803\":1}}],[\"请求处理\",{\"0\":{\"8758\":1}}],[\"请求和释放资源的顺序不当\",{\"1\":{\"5421\":1}}],[\"请输入字符串\",{\"1\":{\"6449\":1}}],[\"请输入\",{\"1\":{\"2345\":1,\"2802\":1}}],[\"请输入姓名\",{\"1\":{\"2331\":1,\"2333\":1,\"2788\":1,\"2790\":1}}],[\"请稍后再试\",{\"1\":{\"1290\":1}}],[\"给t对象指定的columnname属性\",{\"1\":{\"8054\":1,\"8201\":2}}],[\"给t对象指定的属性赋值\",{\"1\":{\"8054\":1,\"8201\":1}}],[\"给cust对象指定的columnname属性\",{\"1\":{\"8045\":1}}],[\"给常量形参赋一个实参\",{\"1\":{\"3989\":1}}],[\"给对象进行初始化\",{\"0\":{\"3854\":1}}],[\"给数组赋值时\",{\"1\":{\"3525\":1}}],[\"给出今天是星期几\",{\"1\":{\"3373\":1}}],[\"给两个string类型的变量\",{\"1\":{\"3211\":1}}],[\"给一个字符串赋值\",{\"1\":{\"3210\":1}}],[\"给变量赋值时\",{\"1\":{\"3079\":1}}],[\"给方法形参赋值的实参\",{\"1\":{\"2279\":1,\"7173\":1}}],[\"给定参数的最大整数\",{\"1\":{\"1810\":1}}],[\"取消安全验证\",{\"0\":{\"9897\":1}}],[\"取消自动提交数据\",{\"1\":{\"8162\":1}}],[\"取消集合就可以了\",{\"1\":{\"8062\":1}}],[\"取决于字符编码方案\",{\"1\":{\"6428\":1}}],[\"取得指定对象obj上此field的属性内容\",{\"1\":{\"7154\":1}}],[\"取得本类的指定形参类\",{\"1\":{\"7063\":1}}],[\"取得本类的指定形参类型的构造器\",{\"1\":{\"2180\":1,\"7062\":1}}],[\"取得线程安全的arraylist\",{\"1\":{\"5676\":1}}],[\"取完数据后\",{\"1\":{\"5600\":1}}],[\"取值为0\",{\"1\":{\"10622\":1}}],[\"取值负整数\",{\"1\":{\"8751\":1}}],[\"取值\",{\"0\":{\"4990\":1,\"5049\":1}}],[\"取号排队\",{\"1\":{\"4469\":1}}],[\"取反\",{\"1\":{\"3309\":1}}],[\"取模一般用来判断是否能除尽\",{\"1\":{\"3255\":1}}],[\"取模的细节\",{\"0\":{\"3254\":1}}],[\"取余数\",{\"1\":{\"3196\":1}}],[\"取代自己写的basedao\",{\"0\":{\"8348\":1}}],[\"取代自己写的jdbcutils\",{\"0\":{\"8338\":1}}],[\"取代\",{\"1\":{\"1488\":1}}],[\"应的表中\",{\"1\":{\"10721\":1}}],[\"应全部小写\",{\"1\":{\"10216\":1}}],[\"应尽量避免使用suspend\",{\"1\":{\"5372\":1}}],[\"应该与servlet的包在同一目录级创建filter包\",{\"1\":{\"9267\":1}}],[\"应该与调用\",{\"1\":{\"2103\":1}}],[\"应该首先配置deployment\",{\"1\":{\"8648\":1}}],[\"应该使用\",{\"1\":{\"6457\":1}}],[\"应该声明为private\",{\"1\":{\"4840\":1}}],[\"应该写成x>3\",{\"1\":{\"3293\":1}}],[\"应该用double类型接收\",{\"1\":{\"3167\":1}}],[\"应该用int类型接收\",{\"1\":{\"3167\":1}}],[\"应用需要大量的地理位置查询\",{\"1\":{\"10044\":1}}],[\"应用需要tb甚至\",{\"1\":{\"10042\":1}}],[\"应用发展迅速\",{\"1\":{\"10043\":1}}],[\"应用不需要事务及复杂\",{\"1\":{\"10041\":1}}],[\"应用程序在计算机中的唯一标识\",{\"1\":{\"8411\":1}}],[\"应用程序的日志应用\",{\"1\":{\"4435\":1}}],[\"应用界面相关\",{\"1\":{\"4601\":1}}],[\"应用范围\",{\"0\":{\"2398\":1}}],[\"应用\",{\"0\":{\"840\":1,\"9582\":1}}],[\"应用场景对比\",{\"0\":{\"10121\":1}}],[\"应用场景\",{\"0\":{\"804\":1,\"7341\":1,\"7735\":1,\"8074\":1,\"10025\":1},\"1\":{\"3664\":1}}],[\"略微复杂的倒排列表\",{\"0\":{\"9995\":1}}],[\"略了\",{\"1\":{\"9464\":1}}],[\"略\",{\"1\":{\"2087\":1,\"2090\":1,\"6355\":1,\"7099\":1,\"7102\":1,\"8867\":1,\"9614\":1}}],[\"覆盖查询\",{\"1\":{\"10428\":1}}],[\"覆盖\",{\"1\":{\"4042\":1}}],[\"覆盖写\",{\"1\":{\"2087\":2,\"2090\":2,\"2098\":1,\"6273\":1}}],[\"覆盖或追加写\",{\"1\":{\"2079\":1}}],[\"刷新数据库\",{\"1\":{\"10197\":1}}],[\"刷新访问的页面\",{\"1\":{\"8713\":1}}],[\"刷新操作\",{\"1\":{\"6483\":1,\"6551\":1,\"6555\":1}}],[\"刷新流\",{\"1\":{\"6408\":1}}],[\"刷新该流的缓冲\",{\"1\":{\"2108\":1}}],[\"刷新\",{\"1\":{\"2074\":1,\"8772\":1}}],[\"变长的编码方式\",{\"1\":{\"6422\":1}}],[\"变成主节点\",{\"1\":{\"10530\":1}}],[\"变成一个内存地址\",{\"1\":{\"5129\":1}}],[\"变成了一个从节点角色\",{\"1\":{\"10529\":1}}],[\"变成了1\",{\"1\":{\"3201\":1}}],[\"变成了\",{\"1\":{\"2052\":1,\"4281\":1}}],[\"变为空的map集合\",{\"1\":{\"2597\":1}}],[\"变量类型推断\",{\"0\":{\"7772\":1}}],[\"变量间的关系\",{\"0\":{\"5130\":1}}],[\"变量间赋值\",{\"0\":{\"4650\":1}}],[\"变量和方法时\",{\"1\":{\"3971\":1}}],[\"变量都有其对应的作用域\",{\"1\":{\"3684\":1}}],[\"变量值\",{\"1\":{\"3681\":1}}],[\"变量只在循环内有效\",{\"1\":{\"3394\":1}}],[\"变量只有在其作用域内才有效\",{\"1\":{\"3013\":1}}],[\"变量或不确定的表达式\",{\"1\":{\"3369\":1}}],[\"变量本身的数据类型没有发生改变\",{\"1\":{\"3273\":1}}],[\"变量要以\",{\"1\":{\"3098\":1}}],[\"变量可以分为8种基本数据类型\",{\"1\":{\"3021\":1}}],[\"变量的名可以理解为内存的地址标识\",{\"1\":{\"5128\":1}}],[\"变量的名是不会储存的\",{\"1\":{\"5128\":1}}],[\"变量的范围\",{\"1\":{\"4759\":1}}],[\"变量的分类\",{\"0\":{\"3018\":1}}],[\"变量的作用域\",{\"0\":{\"3012\":1}}],[\"变量的赋值\",{\"0\":{\"3006\":1}}],[\"变量名编译后\",{\"1\":{\"5129\":1}}],[\"变量名是给我们程序员操作内存来使用的\",{\"1\":{\"5129\":1}}],[\"变量名3\",{\"1\":{\"4727\":1}}],[\"变量名2\",{\"1\":{\"4727\":1}}],[\"变量名1\",{\"1\":{\"4727\":1}}],[\"变量名\",{\"0\":{\"5127\":1},\"1\":{\"3007\":1,\"3010\":1,\"3069\":1,\"3681\":1,\"7085\":1}}],[\"变量名称\",{\"1\":{\"3004\":1}}],[\"变量名和存储的值\",{\"1\":{\"2999\":1}}],[\"变量是内存的标识\",{\"1\":{\"5132\":1}}],[\"变量是内存中的一个存储区域\",{\"1\":{\"2998\":1}}],[\"变量是程序中最基本的存储单元\",{\"1\":{\"2999\":1}}],[\"变量\",{\"0\":{\"2995\":1,\"2996\":1,\"5125\":1},\"1\":{\"397\":1,\"2943\":1,\"3056\":1,\"3895\":1,\"3898\":1,\"3972\":1,\"3982\":1,\"6942\":1}}],[\"个数据库中\",{\"1\":{\"10654\":1}}],[\"个数相关的数据\",{\"0\":{\"8390\":1}}],[\"个接口分别定义了对数据库的调用的不同方式\",{\"1\":{\"7882\":1}}],[\"个元素的流\",{\"1\":{\"7625\":1}}],[\"个月为周期\",{\"1\":{\"7312\":1}}],[\"个月\",{\"1\":{\"7312\":1}}],[\"个\",{\"1\":{\"4947\":2,\"4949\":2,\"4950\":1,\"4952\":2,\"4955\":3,\"4956\":2,\"4960\":2,\"4963\":2,\"7625\":1}}],[\"个英文字母大小写\",{\"1\":{\"3060\":1}}],[\"个字节写入此输出流\",{\"1\":{\"2104\":1}}],[\"个字节从指定的\",{\"1\":{\"2103\":1}}],[\"个字节的数据读入一个\",{\"1\":{\"2045\":1}}],[\"个人中心\",{\"1\":{\"1405\":1}}],[\"读写频繁以及价值比较低的数据\",{\"1\":{\"10033\":1}}],[\"读写\",{\"1\":{\"6514\":1}}],[\"读写过程\",{\"1\":{\"6411\":1}}],[\"读一行\",{\"1\":{\"6347\":1}}],[\"读到文件的结尾时才会返回null\",{\"1\":{\"6345\":1}}],[\"读到了字符a\",{\"1\":{\"2042\":1}}],[\"读数据\",{\"1\":{\"6306\":1}}],[\"读入数据\",{\"1\":{\"6337\":1}}],[\"读入\",{\"0\":{\"6323\":1,\"6329\":1},\"1\":{\"6297\":1,\"6352\":1,\"6353\":1,\"6465\":1}}],[\"读\",{\"1\":{\"5132\":1,\"6216\":1,\"6217\":1,\"6300\":1,\"6519\":1}}],[\"读取文件\",{\"1\":{\"9095\":1,\"9099\":1}}],[\"读取文件需处理异常\",{\"1\":{\"2035\":1}}],[\"读取流\",{\"1\":{\"8979\":1}}],[\"读取流中的对象\",{\"1\":{\"6548\":1}}],[\"读取不同类型的数据的顺序要与当初写入文件时\",{\"1\":{\"6486\":1}}],[\"读取数据\",{\"1\":{\"6248\":1,\"8990\":1}}],[\"读取外部数据\",{\"1\":{\"6154\":1}}],[\"读取的数据类型为object\",{\"1\":{\"6072\":1}}],[\"读取的单位从字符变成了字节\",{\"1\":{\"2052\":1}}],[\"读取资源\",{\"1\":{\"4753\":1}}],[\"读取一行\",{\"0\":{\"6342\":1},\"1\":{\"2117\":1}}],[\"读取一次\",{\"1\":{\"2042\":1,\"2048\":3}}],[\"读取一个字节\",{\"1\":{\"2038\":1}}],[\"读取单个字符\",{\"1\":{\"2040\":1}}],[\"读取yaml全部属性数据\",{\"0\":{\"504\":1}}],[\"读取yml引用类型数据\",{\"0\":{\"509\":1}}],[\"读取yml数据\",{\"0\":{\"495\":1}}],[\"读取yml\",{\"0\":{\"493\":1}}],[\"读取配置信息\",{\"1\":{\"5927\":1,\"7873\":1}}],[\"读取配置文件中的4个基本信息\",{\"1\":{\"7970\":1,\"7975\":1}}],[\"读取配置文件中的数据库连接信息\",{\"1\":{\"7947\":1}}],[\"读取配置文件的方式二\",{\"1\":{\"7049\":1}}],[\"读取配置文件的方式一\",{\"1\":{\"7049\":1}}],[\"读取配置文件的输入流\",{\"1\":{\"7048\":1}}],[\"读取配置文件的类\",{\"1\":{\"4437\":1}}],[\"读取配置文件\",{\"0\":{\"5925\":1}}],[\"读取配置项\",{\"1\":{\"508\":1}}],[\"读取配置\",{\"1\":{\"432\":1}}],[\"范围\",{\"1\":{\"6680\":1,\"9119\":1}}],[\"范围即为192\",{\"1\":{\"6672\":1}}],[\"范围太大\",{\"1\":{\"5363\":1}}],[\"范围太小\",{\"1\":{\"5363\":1}}],[\"范围小的就没机会执行了\",{\"1\":{\"3356\":1}}],[\"范围在\",{\"1\":{\"2040\":1}}],[\"范围内的\",{\"1\":{\"2039\":1}}],[\"安全保障手段\",{\"0\":{\"10637\":1}}],[\"安全认证章节\",{\"1\":{\"10187\":1}}],[\"安全认证\",{\"0\":{\"10894\":1},\"1\":{\"10166\":1}}],[\"安全性\",{\"1\":{\"9794\":1}}],[\"安全协议\",{\"1\":{\"8413\":1}}],[\"安全检查\",{\"1\":{\"7207\":1}}],[\"安全问题解析\",{\"1\":{\"5348\":1}}],[\"安全与同步\",{\"0\":{\"5295\":1}}],[\"安全考虑\",{\"1\":{\"2021\":1}}],[\"安装软件\",{\"0\":{\"9875\":1}}],[\"安装与卸载\",{\"0\":{\"8427\":1}}],[\"安装并使用驱动\",{\"0\":{\"7826\":1}}],[\"安装驱动\",{\"0\":{\"7814\":1},\"1\":{\"7842\":1}}],[\"安装目录\",{\"1\":{\"2877\":1}}],[\"安装指定版本的所有java内容\",{\"1\":{\"2877\":1}}],[\"安装idea彩色日志插件\",{\"1\":{\"948\":1}}],[\"安装插件\",{\"1\":{\"948\":1}}],[\"安装jdk\",{\"0\":{\"2851\":1},\"1\":{\"754\":1}}],[\"安装\",{\"0\":{\"10124\":1,\"10135\":1,\"10155\":1},\"1\":{\"210\":1,\"8428\":1}}],[\"到程序\",{\"1\":{\"6154\":1}}],[\"到处运行\",{\"1\":{\"2822\":1}}],[\"到\",{\"1\":{\"2039\":1,\"2040\":1,\"2093\":1,\"6847\":1}}],[\"到了f2的位置\",{\"1\":{\"2019\":1}}],[\"到要求数字精度比较高\",{\"1\":{\"1872\":1}}],[\"完整的网址\",{\"1\":{\"8936\":1}}],[\"完整的请求处理过程\",{\"0\":{\"8873\":1}}],[\"完整的文件名是带路径的\",{\"1\":{\"2013\":1}}],[\"完善\",{\"1\":{\"7194\":1}}],[\"完善目录\",{\"1\":{\"1101\":1}}],[\"完全可替代mongodb\",{\"1\":{\"10181\":1}}],[\"完全解决了线程的安全问题\",{\"1\":{\"5374\":1}}],[\"完全限定方法名\",{\"1\":{\"2949\":1}}],[\"完全限定的类名\",{\"1\":{\"2946\":1}}],[\"完成副本集\",{\"1\":{\"10562\":1}}],[\"完成服务器对客户端的身份识别\",{\"1\":{\"9739\":1}}],[\"完成具体的业务操作\",{\"1\":{\"9540\":1}}],[\"完成流的copy\",{\"1\":{\"9095\":1}}],[\"完成一些如加载配置文件\",{\"1\":{\"8757\":1}}],[\"完成创建\",{\"1\":{\"8550\":1,\"8562\":1}}],[\"完成复制\",{\"1\":{\"6516\":1}}],[\"完成相关的操作\",{\"1\":{\"4445\":1}}],[\"完成正则匹配\",{\"1\":{\"2685\":1}}],[\"删\",{\"1\":{\"10653\":1}}],[\"删改\",{\"0\":{\"2010\":1}}],[\"删除lock文件\",{\"1\":{\"10860\":1}}],[\"删除用户\",{\"0\":{\"10727\":1}}],[\"删除指定数据\",{\"0\":{\"10301\":1}}],[\"删除指定位置的内容\",{\"1\":{\"1586\":1}}],[\"删除文档\",{\"0\":{\"10297\":1}}],[\"删除集合\",{\"0\":{\"10237\":1},\"1\":{\"10678\":1}}],[\"删除集合中的元素\",{\"1\":{\"2467\":1,\"5602\":1}}],[\"删除cookie信息\",{\"1\":{\"9722\":1}}],[\"删除pom\",{\"0\":{\"8551\":1}}],[\"删除即为卸载\",{\"1\":{\"8429\":1}}],[\"删除了\",{\"1\":{\"8383\":1}}],[\"删除成功\",{\"1\":{\"8210\":1}}],[\"删除表中的一条记录\",{\"1\":{\"8205\":1,\"8207\":1}}],[\"删除blob类型的字段\",{\"1\":{\"8086\":1}}],[\"删除某表中的1个数据\",{\"1\":{\"7991\":1}}],[\"删除一个文件\",{\"1\":{\"6619\":1}}],[\"删除性能\",{\"1\":{\"5698\":1}}],[\"删除操作\",{\"1\":{\"5638\":1}}],[\"删除数组时\",{\"1\":{\"3526\":1}}],[\"删除的文件不存在\",{\"1\":{\"2022\":1}}],[\"删除广义文件\",{\"1\":{\"2021\":1}}],[\"删除\",{\"0\":{\"8382\":1},\"1\":{\"1194\":1,\"1399\":1,\"1400\":1,\"1401\":1,\"1941\":1,\"5529\":1,\"6112\":1}}],[\"删除application\",{\"1\":{\"1094\":1}}],[\"删除配置文件中所有的日志配置\",{\"1\":{\"947\":1}}],[\"删除日志配置\",{\"1\":{\"947\":1}}],[\"组合类型\",{\"1\":{\"9642\":1}}],[\"组合数据访问层层中基本功能\",{\"1\":{\"9559\":1}}],[\"组织提供的一个开源\",{\"1\":{\"8331\":1}}],[\"组成的数据结构\",{\"1\":{\"10078\":1}}],[\"组成的file类数组\",{\"1\":{\"1973\":1}}],[\"组成\",{\"0\":{\"9970\":1},\"1\":{\"3060\":1,\"10369\":1,\"10651\":1}}],[\"组件也可以理解为工具类\",{\"1\":{\"9471\":1}}],[\"组件\",{\"0\":{\"1125\":1},\"1\":{\"1177\":1}}],[\"组件后面再安装\",{\"1\":{\"1089\":1}}],[\"若以replicaset的方式登录\",{\"1\":{\"10608\":1}}],[\"若为true\",{\"1\":{\"10569\":1}}],[\"若要返回匹配文档中的所有字段\",{\"1\":{\"10309\":1}}],[\"若要返回集合中的所有文档\",{\"1\":{\"10308\":1}}],[\"若想全部更新\",{\"1\":{\"10292\":1}}],[\"若同时有几百人甚至几千人在线\",{\"1\":{\"8221\":1}}],[\"若没有异常\",{\"1\":{\"8148\":1}}],[\"若没有指定\",{\"1\":{\"4998\":1}}],[\"若有效\",{\"1\":{\"8004\":1}}],[\"若有异常\",{\"1\":{\"4749\":1,\"8148\":1}}],[\"若流中元素不足\",{\"1\":{\"7625\":1}}],[\"若\",{\"1\":{\"7420\":1}}],[\"若希望输出数据\",{\"1\":{\"6896\":1}}],[\"若连接失败\",{\"1\":{\"6790\":1}}],[\"若服务器端\",{\"1\":{\"6790\":1}}],[\"若类的实例变量做了修改\",{\"1\":{\"6575\":1}}],[\"若hash表容量小于min\",{\"1\":{\"5889\":1}}],[\"若不调用\",{\"1\":{\"5594\":1}}],[\"若队列中没有同优先级的线程\",{\"1\":{\"5223\":1}}],[\"若jvm中都是守护线程\",{\"1\":{\"5154\":1}}],[\"若某个方法被\",{\"1\":{\"5036\":1}}],[\"若一个进程同一时间\",{\"1\":{\"5078\":1}}],[\"若一个\",{\"1\":{\"4960\":1}}],[\"若需要每个枚举值在调用实现的接口方法呈现出不同的行为方式\",{\"1\":{\"4868\":1}}],[\"若枚举类显式的定义了带参数的构造器\",{\"1\":{\"4834\":1}}],[\"若finally中有return\",{\"1\":{\"4750\":1}}],[\"若全处理可能会对程序的可读性和运行效率产生影响\",{\"1\":{\"4706\":1}}],[\"若子类重写了父类中的所有的抽象方法后\",{\"1\":{\"4450\":1}}],[\"若缺省该语句\",{\"1\":{\"3927\":1}}],[\"若指定索引处没有值\",{\"1\":{\"3506\":1}}],[\"若已有值\",{\"1\":{\"3506\":1}}],[\"若已知具体的类\",{\"1\":{\"2133\":1,\"6993\":1}}],[\"若属性完全相同\",{\"1\":{\"2422\":1}}],[\"若无异常\",{\"1\":{\"4748\":1}}],[\"若无\",{\"1\":{\"1958\":1}}],[\"若未找到目标字符串\",{\"1\":{\"1434\":1}}],[\"绝对路径或者相对路径\",{\"1\":{\"1945\":1,\"6128\":1}}],[\"绝对值角度\",{\"1\":{\"1928\":1}}],[\"绝对值\",{\"0\":{\"1798\":1}}],[\"往现存接口中添加新的方法\",{\"1\":{\"4543\":1}}],[\"往往已经创建了若干数据库连接置于连接池中备用\",{\"1\":{\"8238\":1}}],[\"往往导致进程挂起\",{\"1\":{\"2118\":1,\"6344\":1}}],[\"往往会发生值大小的改变\",{\"1\":{\"1904\":1}}],[\"往小变\",{\"1\":{\"1919\":1}}],[\"往大变\",{\"1\":{\"1910\":1,\"1916\":1}}],[\"舍去\",{\"1\":{\"1913\":1}}],[\"舍去小数位\",{\"1\":{\"3252\":1}}],[\"舍去小数取整\",{\"1\":{\"1810\":1}}],[\"舍去小数\",{\"0\":{\"1809\":1}}],[\"舍入策略\",{\"1\":{\"1909\":1}}],[\"精确匹配\",{\"0\":{\"8840\":1},\"1\":{\"8864\":1}}],[\"精准\",{\"1\":{\"8839\":1}}],[\"精准匹配\",{\"1\":{\"2752\":1,\"2771\":1}}],[\"精准模式\",{\"1\":{\"1904\":1,\"1930\":1}}],[\"精度是float的两倍\",{\"1\":{\"3096\":1}}],[\"精度很难满足需求\",{\"1\":{\"3095\":1}}],[\"精度0\",{\"1\":{\"1911\":1,\"1912\":1,\"1914\":1,\"1915\":1,\"1917\":1,\"1918\":1,\"1920\":1,\"1921\":1,\"1923\":1,\"1924\":1,\"1926\":1,\"1927\":1}}],[\"精度2\",{\"1\":{\"1911\":1,\"1912\":1,\"1914\":1,\"1915\":1,\"1917\":1,\"1918\":1,\"1920\":1,\"1921\":1,\"1923\":1,\"1924\":1,\"1926\":1,\"1927\":1}}],[\"精度会有默认值\",{\"1\":{\"1906\":1}}],[\"作者等\",{\"1\":{\"8779\":1}}],[\"作为区分\",{\"1\":{\"10476\":1}}],[\"作为片键\",{\"1\":{\"10382\":1}}],[\"作为文本数据分析\",{\"1\":{\"9846\":1}}],[\"作为配置文件\",{\"1\":{\"9598\":1}}],[\"作为组件\",{\"1\":{\"9483\":1}}],[\"作为应用程序和扩展的构建单元\",{\"1\":{\"9482\":1}}],[\"作为jar里面的\",{\"1\":{\"9473\":1}}],[\"作为域对象\",{\"0\":{\"9238\":1}}],[\"作为属性\",{\"1\":{\"8187\":1}}],[\"作为方法的第一个参数\",{\"1\":{\"7986\":1}}],[\"作为方法区中类数据的访问入口\",{\"1\":{\"7011\":1}}],[\"作为函数式接口的实例\",{\"1\":{\"7339\":1}}],[\"作为绝对路径返回调用\",{\"1\":{\"6607\":1}}],[\"作为返回值\",{\"1\":{\"5999\":1}}],[\"作为参数传入\",{\"1\":{\"7287\":1}}],[\"作为参数\",{\"1\":{\"5999\":1}}],[\"作为古老的实现类\",{\"1\":{\"5837\":1}}],[\"作为list接口的古老实现类\",{\"1\":{\"5641\":1}}],[\"作为list接口的主要实现类\",{\"1\":{\"5634\":1}}],[\"作为一个类\",{\"0\":{\"4316\":1}}],[\"作为外部类的成员\",{\"0\":{\"4312\":1}}],[\"作为标记区分每个注释块的内容\",{\"1\":{\"2939\":1}}],[\"作为整数读取的字符\",{\"1\":{\"2040\":1}}],[\"作为springmvc的异常处理器\",{\"1\":{\"1290\":1}}],[\"作用类似于框架中的钩子函数\",{\"1\":{\"9314\":1}}],[\"作用域是一次会话\",{\"1\":{\"9195\":1}}],[\"作用域是一次请求\",{\"1\":{\"9188\":1}}],[\"作用域是一个页面\",{\"1\":{\"9183\":1}}],[\"作用在代码的注解\",{\"1\":{\"4900\":1}}],[\"作用\",{\"0\":{\"3000\":1,\"4546\":1,\"6370\":1,\"8169\":1},\"1\":{\"4557\":1,\"4565\":1,\"6310\":1,\"6463\":1,\"6532\":1,\"7263\":1,\"7676\":1,\"9332\":1,\"9334\":1,\"9341\":1,\"9343\":1,\"9350\":1,\"9352\":1,\"9359\":1,\"9361\":1,\"9370\":1,\"9378\":1,\"9380\":1,\"9389\":1,\"9397\":1,\"9399\":1,\"9408\":1,\"9416\":1,\"9418\":1,\"9425\":1,\"9433\":1,\"9435\":1,\"9737\":1}}],[\"作用2\",{\"1\":{\"1903\":1}}],[\"作用1\",{\"1\":{\"1902\":1}}],[\"加密\",{\"1\":{\"10726\":1}}],[\"加密解密\",{\"1\":{\"6718\":1}}],[\"加4个数字\",{\"1\":{\"9642\":1}}],[\"加不加是一样的\",{\"1\":{\"9171\":1}}],[\"加强版get\",{\"1\":{\"7762\":1}}],[\"加入后\",{\"1\":{\"7306\":1}}],[\"加一些通用操作\",{\"1\":{\"7306\":1}}],[\"加锁时限\",{\"1\":{\"5413\":1}}],[\"加锁\",{\"0\":{\"5390\":1},\"1\":{\"5445\":1,\"5451\":1}}],[\"加\",{\"1\":{\"2724\":1}}],[\"加法运算\",{\"1\":{\"1885\":1}}],[\"加载和实例化\",{\"0\":{\"8746\":1}}],[\"加载驱动\",{\"0\":{\"8254\":1},\"1\":{\"7873\":1,\"7947\":1,\"7970\":1,\"7975\":1}}],[\"加载驱动源码\",{\"0\":{\"7831\":1}}],[\"加载配置文件\",{\"1\":{\"7873\":1,\"8260\":1}}],[\"加载的第三方jar包都是class文件\",{\"1\":{\"7832\":1}}],[\"加载的内容不会发生变化\",{\"1\":{\"539\":1}}],[\"加载器获取\",{\"0\":{\"7042\":1}}],[\"加载核心类库\",{\"1\":{\"7041\":1}}],[\"加载ext下的jar包\",{\"1\":{\"7040\":1}}],[\"加载自定义类\",{\"1\":{\"7039\":1}}],[\"加载完类之后\",{\"1\":{\"6930\":1}}],[\"加载流对应的文件\",{\"1\":{\"5927\":1}}],[\"加载文件的流\",{\"1\":{\"5927\":1}}],[\"加载头像\",{\"1\":{\"5108\":1}}],[\"加载评论内容\",{\"1\":{\"5108\":1}}],[\"加载到内存中\",{\"1\":{\"8219\":1}}],[\"加载到内存中的运行时类\",{\"1\":{\"6991\":1}}],[\"加载到内存中的类\",{\"1\":{\"6969\":1}}],[\"加载到栈空间\",{\"1\":{\"3704\":1}}],[\"加载到堆空间中\",{\"1\":{\"3703\":1}}],[\"加载测试专用配置\",{\"0\":{\"671\":1}}],[\"加载位置base类加载器\",{\"1\":{\"545\":1}}],[\"加载位置restart类加载器\",{\"1\":{\"542\":1}}],[\"加载开发者制作的内容\",{\"1\":{\"543\":1}}],[\"加载jar包中的信息后\",{\"1\":{\"543\":1}}],[\"加载内容\",{\"1\":{\"542\":1,\"545\":1}}],[\"加载数据到对象\",{\"1\":{\"512\":1}}],[\"十进制转成二进制\",{\"1\":{\"3196\":1}}],[\"十进制\",{\"1\":{\"3194\":1}}],[\"十进制数形式\",{\"1\":{\"3090\":1}}],[\"十进制数的二进制表示形式可能不精确\",{\"1\":{\"1873\":1}}],[\"十进制值通常没有完全相同的二进制表示形式\",{\"1\":{\"1873\":1}}],[\"十六进制\",{\"1\":{\"486\":1,\"3182\":1,\"3200\":1}}],[\"但开启认证之后\",{\"1\":{\"10716\":1}}],[\"但需要配置\",{\"1\":{\"10456\":1}}],[\"但只支持相等匹配\",{\"1\":{\"10373\":1}}],[\"但已经插入成功的数据不会回滚掉\",{\"1\":{\"10266\":1}}],[\"但它的缺点是空间利用率不是很理想\",{\"1\":{\"10082\":1}}],[\"但它同时使用双向链表维护元素的次序\",{\"1\":{\"5711\":1,\"5775\":1}}],[\"但访问http\",{\"1\":{\"9900\":1}}],[\"但conn\",{\"1\":{\"8251\":1}}],[\"但因自身存在bug\",{\"1\":{\"8243\":1}}],[\"但aop代理中的方法与目标对象的方法存在差异\",{\"1\":{\"7304\":1}}],[\"但里的逻辑代码进行了加强\",{\"1\":{\"7241\":1}}],[\"但一旦某个类被加载到类加载器中\",{\"1\":{\"7035\":1}}],[\"但java可以称之为\",{\"1\":{\"6928\":1}}],[\"但file类的功能比较有限\",{\"1\":{\"6591\":1}}],[\"但直接继承于java\",{\"1\":{\"6489\":1}}],[\"但对于频繁的遍历操作\",{\"1\":{\"5776\":1}}],[\"但此时打印机正被进程p2\",{\"1\":{\"5416\":1}}],[\"但此时就不能再使用外层类的非static的成员变量\",{\"1\":{\"4314\":1}}],[\"但如果不是\",{\"1\":{\"5352\":1}}],[\"但多个线程操作共享的系统资源可能就会带来安全的隐患\",{\"1\":{\"5080\":1}}],[\"但有的错误只有在\",{\"1\":{\"4697\":1}}],[\"但实际引用的是子类对象\",{\"1\":{\"4132\":1}}],[\"但在windows下使用\",{\"1\":{\"6122\":1}}],[\"但在静态方法中不能使用类的泛型\",{\"1\":{\"6010\":1}}],[\"但在迭代访问\",{\"1\":{\"5710\":1}}],[\"但在运行期\",{\"1\":{\"4126\":1}}],[\"但在商业计算中\",{\"1\":{\"1872\":1}}],[\"但不等价于object\",{\"1\":{\"6006\":1}}],[\"但不能连接\",{\"1\":{\"8337\":1}}],[\"但不能读取自己放入线路的信息\",{\"1\":{\"6795\":1}}],[\"但不能是与arithmeticexception类无关的异常\",{\"1\":{\"4732\":1}}],[\"但不能进行重新赋值\",{\"1\":{\"3989\":1}}],[\"但不叫重写\",{\"1\":{\"4056\":1}}],[\"但不加l有时会报错\",{\"1\":{\"3169\":1}}],[\"但这种重复执行无须循环控制\",{\"1\":{\"3752\":1}}],[\"但注意不能定义方法\",{\"1\":{\"3745\":1}}],[\"但必须是同一个类型\",{\"1\":{\"3381\":1}}],[\"但他是个final类\",{\"1\":{\"3221\":1}}],[\"但可能有多个\",{\"1\":{\"9017\":1}}],[\"但可能造成精度降低或溢出\",{\"1\":{\"3175\":1}}],[\"但可以读操作\",{\"1\":{\"10456\":1}}],[\"但可以通过它给定的方法来获取这些属性\",{\"1\":{\"6886\":1}}],[\"但可以通过特殊的方法创建匿名类\",{\"1\":{\"4458\":1}}],[\"但可以不指定泛型\",{\"1\":{\"6001\":1}}],[\"但可以使用包装类填充\",{\"1\":{\"5993\":1}}],[\"但可以重写\",{\"1\":{\"4539\":1}}],[\"但可以是有结果的表达式\",{\"1\":{\"3734\":1}}],[\"但可以对key\",{\"1\":{\"2582\":1}}],[\"但该值超过了int范围\",{\"1\":{\"3173\":1}}],[\"但能包含关键字和保留字\",{\"1\":{\"3062\":1}}],[\"但以后版本可能会作为关键字使用\",{\"1\":{\"3054\":1}}],[\"但\",{\"1\":{\"1941\":1,\"6112\":1}}],[\"但是也支持shell命令\",{\"1\":{\"10181\":1}}],[\"但是也能像方法那样重载\",{\"1\":{\"3868\":1}}],[\"但是bson有json没有的一些数据类型\",{\"1\":{\"10081\":1}}],[\"但是没有可用的关系数据库可以满足\",{\"1\":{\"9861\":1}}],[\"但是维护起来也很麻烦\",{\"1\":{\"9854\":1}}],[\"但是对于框架来说\",{\"1\":{\"9623\":1}}],[\"但是浏览器的地址一直是\",{\"1\":{\"9126\":1}}],[\"但是编写起来还是比较麻烦的\",{\"1\":{\"8786\":1}}],[\"但是速度不确定是否有bonecp快\",{\"1\":{\"8247\":1}}],[\"但是未必完全一样\",{\"1\":{\"8049\":1}}],[\"但是由于方法是有参数限制的\",{\"1\":{\"7410\":1}}],[\"但是由于变量声明为父类类型\",{\"1\":{\"4169\":1}}],[\"但是非public修饰的成员\",{\"1\":{\"7184\":1}}],[\"但是使用的方式完全不同\",{\"1\":{\"6581\":1}}],[\"但是java程序中的一个file对象\",{\"1\":{\"6115\":1}}],[\"但是只要他们不是同一个对象\",{\"1\":{\"5750\":1}}],[\"但是只是从概率上讲\",{\"1\":{\"5245\":1}}],[\"但是只是null\",{\"1\":{\"3659\":1}}],[\"但是我们需要线程安全问题时\",{\"1\":{\"5676\":1}}],[\"但是这种方案不适用于get请求\",{\"1\":{\"9050\":1}}],[\"但是这样做\",{\"1\":{\"5940\":1}}],[\"但是这里如果不stop\",{\"1\":{\"5345\":1}}],[\"但是这个char\",{\"1\":{\"1558\":1}}],[\"但是因为cpu时间单元特别短\",{\"1\":{\"5090\":1}}],[\"但是一个线程崩溃整个进程都死掉\",{\"1\":{\"5086\":1}}],[\"但是进程之间的资源是独立的\",{\"1\":{\"5085\":1}}],[\"但是返回值更精准\",{\"1\":{\"4794\":1}}],[\"但是并不能确定如何处理这种异常\",{\"1\":{\"4767\":1}}],[\"但是运行时仍可能报错\",{\"1\":{\"4762\":1}}],[\"但是运行还是会出错\",{\"1\":{\"4199\":1}}],[\"但是办理的具体业务是不确定的\",{\"1\":{\"4468\":1}}],[\"但是某些部分易变\",{\"1\":{\"4463\":1}}],[\"但是有抽象方法的类一定要声明成抽象类\",{\"1\":{\"4453\":1}}],[\"但是必须是final的\",{\"1\":{\"4341\":1}}],[\"但是前面冠以外部类的类名和$符号\",{\"1\":{\"4338\":1}}],[\"但是它的对象可以通过外部方法的返回值返回使用\",{\"1\":{\"4336\":1}}],[\"但是它的大多数方法已经在jdk\",{\"1\":{\"1616\":1}}],[\"但是自始至终就创建过一个对象\",{\"1\":{\"4113\":1}}],[\"但是内存中还是只创建了子类的一个对象\",{\"1\":{\"4090\":1}}],[\"但是不能直接设置\",{\"1\":{\"7158\":1}}],[\"但是不能直接访问private修饰的成员\",{\"1\":{\"4021\":1}}],[\"但是不能重写父类中的属性\",{\"1\":{\"4067\":1}}],[\"但是如果使用的是xxx子包下的结构\",{\"1\":{\"3963\":1}}],[\"但是跟文件夹还是不一样的\",{\"1\":{\"3924\":1}}],[\"但是\",{\"1\":{\"3723\":1,\"4076\":1,\"4476\":1,\"6426\":1}}],[\"但是开发中\",{\"1\":{\"3629\":1,\"5538\":1}}],[\"但是他们的值是空的\",{\"1\":{\"3558\":1}}],[\"但是for循环也可以通过以下方式实现初始化部分外移\",{\"1\":{\"3408\":1}}],[\"但是为了后续使用eclipse等开发工具不报错\",{\"1\":{\"2854\":1}}],[\"但是顺序不同\",{\"1\":{\"2439\":1}}],[\"但是arrays$arraylist中并没有重写这些方法\",{\"1\":{\"2384\":1}}],[\"但是该arraylist只是arrays的内部静态类的arraylist\",{\"1\":{\"2384\":1}}],[\"但是在开发场景中\",{\"1\":{\"1730\":1}}],[\"但是要注意\",{\"1\":{\"5320\":1}}],[\"但是要明确\",{\"1\":{\"4680\":1}}],[\"但是要使用lang包下的子包\",{\"1\":{\"3964\":1}}],[\"但是要是特定的string\",{\"1\":{\"1723\":1}}],[\"但是要测试的属性值与配置文件中的不一样\",{\"1\":{\"673\":1}}],[\"但是更方便\",{\"1\":{\"1634\":1}}],[\"但是就无法使用临时属性了\",{\"1\":{\"780\":1}}],[\"位于网络中的计算机具有唯一的ip地址\",{\"1\":{\"6915\":1}}],[\"位运算符\",{\"0\":{\"3298\":1},\"1\":{\"3301\":1}}],[\"位操作以及一些其他操作\",{\"1\":{\"1867\":1}}],[\"位置的元素\",{\"1\":{\"2548\":1}}],[\"位置\",{\"1\":{\"1415\":1,\"1639\":1,\"1642\":1,\"1645\":1,\"1666\":1,\"1685\":1,\"1741\":1,\"1776\":1,\"1795\":1,\"1844\":1,\"1865\":1,\"1871\":1,\"1939\":1,\"2025\":1,\"2064\":1,\"2128\":1,\"2213\":1,\"2249\":1,\"2296\":1,\"2316\":1,\"2348\":1,\"2394\":1,\"2451\":1,\"2471\":1,\"2521\":1,\"2571\":1,\"2628\":1,\"2707\":1,\"2762\":1,\"2773\":1,\"2938\":1,\"3949\":1,\"6500\":1,\"6621\":1,\"7869\":1}}],[\"模块目录\",{\"1\":{\"9884\":1}}],[\"模块目录下的\",{\"1\":{\"8626\":1}}],[\"模块\",{\"1\":{\"8532\":1}}],[\"模块名\",{\"1\":{\"8528\":1}}],[\"模型\",{\"1\":{\"9579\":1}}],[\"模型过于理想化\",{\"1\":{\"6654\":1}}],[\"模型层\",{\"0\":{\"4596\":1}}],[\"模拟网络异常\",{\"1\":{\"8148\":1}}],[\"模拟火车站售票程序\",{\"1\":{\"5302\":1}}],[\"模拟usb\",{\"0\":{\"4512\":1}}],[\"模板方法\",{\"1\":{\"4469\":1}}],[\"模板方法设计模式\",{\"0\":{\"4460\":1}}],[\"模算术\",{\"1\":{\"1867\":1}}],[\"模式器\",{\"1\":{\"2710\":1}}],[\"模式修饰符\",{\"1\":{\"2677\":1}}],[\"模式\",{\"1\":{\"903\":1,\"7714\":1,\"9579\":3,\"9581\":2}}],[\"另一方面也增加了系统运行环境的平稳性\",{\"1\":{\"8237\":1}}],[\"另一套就是网络编程nio\",{\"1\":{\"6582\":1}}],[\"另一个mongod实例可能暂时认为自己也是主要的\",{\"1\":{\"10445\":1}}],[\"另一个是记录文件指针的位置文件\",{\"1\":{\"6528\":1}}],[\"另一个是实体类\",{\"1\":{\"1268\":1}}],[\"另一个原因是默认的锁申请操作是阻塞的\",{\"1\":{\"5424\":1}}],[\"另一个任务就可以锁定并使用它了\",{\"1\":{\"5358\":1}}],[\"另一个线程参与进来执行\",{\"1\":{\"5306\":1}}],[\"另一种方法是由程序员在编写程序时\",{\"1\":{\"4676\":1}}],[\"另外还有web\",{\"1\":{\"9523\":1}}],[\"另外还有一个方法可以获取到当前web应用的servletcontext对象\",{\"1\":{\"9357\":1}}],[\"另外包是有层级的\",{\"1\":{\"3931\":1}}],[\"另外\",{\"1\":{\"1867\":1}}],[\"求差集\",{\"1\":{\"2431\":1}}],[\"求atan值\",{\"1\":{\"1839\":1}}],[\"求acos值\",{\"1\":{\"1838\":1}}],[\"求asin值\",{\"1\":{\"1837\":1}}],[\"求tan值\",{\"1\":{\"1836\":1}}],[\"求cos值\",{\"1\":{\"1835\":1}}],[\"求sin值\",{\"1\":{\"1834\":1}}],[\"求参数的算术平方根\",{\"1\":{\"1831\":1}}],[\"求log\",{\"1\":{\"1829\":1}}],[\"求较大值\",{\"0\":{\"1824\":1}}],[\"求较小值\",{\"0\":{\"1821\":1}}],[\"求数值的绝对值\",{\"1\":{\"1799\":1}}],[\"π\",{\"1\":{\"1816\":1}}],[\"向httpsession中添加属性时调用\",{\"1\":{\"9382\":1}}],[\"向servletrequest中添加属性时调用\",{\"1\":{\"9401\":1}}],[\"向servletcontext中添加属性时调用\",{\"1\":{\"9363\":1}}],[\"向servlet发送请求时\",{\"1\":{\"9275\":1}}],[\"向set\",{\"1\":{\"5748\":1}}],[\"向responsedemo1类发送请求\",{\"1\":{\"9141\":1}}],[\"向浏览器响应一张图片\",{\"0\":{\"9093\":1}}],[\"向浏览器响应html标签\",{\"0\":{\"9083\":1}}],[\"向浏览器响应字符hello\",{\"0\":{\"9077\":1}}],[\"向数据表中插入1百万条数据\",{\"1\":{\"8104\":1}}],[\"向数据表插入blob类型\",{\"0\":{\"8083\":1}}],[\"向流中写入字节时\",{\"1\":{\"6316\":1}}],[\"向treemap中添加key\",{\"1\":{\"5909\":1}}],[\"向treeset中添加的数据\",{\"1\":{\"5783\":1}}],[\"向上转型\",{\"0\":{\"4176\":1},\"1\":{\"4172\":1}}],[\"向上取整\",{\"1\":{\"1807\":1}}],[\"向下转型必须是父类引用子类的对象\",{\"0\":{\"4191\":1}}],[\"向下转型的异常\",{\"0\":{\"4182\":1}}],[\"向下转型成子类型\",{\"1\":{\"4174\":1}}],[\"向下转型\",{\"0\":{\"4179\":1},\"1\":{\"4173\":1}}],[\"向下转型说明\",{\"0\":{\"4171\":1}}],[\"向下取整\",{\"1\":{\"1810\":1}}],[\"向一张图片上写入字符\",{\"1\":{\"2101\":1,\"2106\":1}}],[\"小类型\",{\"1\":{\"9228\":1}}],[\"小心参数声明错误\",{\"1\":{\"7989\":1,\"8201\":1}}],[\"小结\",{\"0\":{\"6914\":1}}],[\"小技巧\",{\"1\":{\"5758\":1}}],[\"小于0的数字\",{\"1\":{\"5310\":1}}],[\"小于o2\",{\"1\":{\"1785\":1}}],[\"小数位的值\",{\"1\":{\"3252\":1}}],[\"小数点后16位\",{\"1\":{\"1803\":1}}],[\"小驼峰\",{\"1\":{\"3069\":1}}],[\"均使用java\",{\"1\":{\"9530\":1}}],[\"均无法继续执行\",{\"1\":{\"5416\":1}}],[\"均匀分布\",{\"1\":{\"1802\":1}}],[\"均可\",{\"1\":{\"486\":1}}],[\"近似\",{\"1\":{\"1802\":1}}],[\"需释放已建立的连接\",{\"1\":{\"6735\":1}}],[\"需求会变\",{\"1\":{\"10040\":1}}],[\"需求非常灵活的全文搜索查询\",{\"1\":{\"9860\":1}}],[\"需求是输入int\",{\"1\":{\"4720\":1}}],[\"需求\",{\"0\":{\"7233\":1,\"8997\":1},\"1\":{\"4138\":1,\"4842\":1,\"4871\":1,\"5964\":1,\"10028\":1}}],[\"需用import语句来引入指定包层次下所需要的类或全部类\",{\"1\":{\"3943\":1}}],[\"需显式初始化\",{\"1\":{\"3046\":1}}],[\"需重写compare\",{\"1\":{\"1782\":1}}],[\"需要添加多个host\",{\"1\":{\"10814\":1}}],[\"需要在登录时就选择进行权限验证\",{\"1\":{\"10746\":1}}],[\"需要在文件所在目录执行命令\",{\"1\":{\"2898\":1}}],[\"需要在文件所在位置执行命令\",{\"1\":{\"2882\":1}}],[\"需要输入查看命令\",{\"1\":{\"10721\":1}}],[\"需要勾选如下设置\",{\"1\":{\"10517\":1}}],[\"需要能快速水平扩展\",{\"1\":{\"10043\":1}}],[\"需要晚上的服务框架搭建起来进行应用\",{\"1\":{\"9837\":1}}],[\"需要放行\",{\"1\":{\"9270\":1}}],[\"需要加\",{\"1\":{\"9166\":1,\"9167\":1,\"9168\":1}}],[\"需要加虚拟目录\",{\"1\":{\"9165\":1}}],[\"需要加终止条件和限制条件辅助生成\",{\"1\":{\"7586\":1}}],[\"需要响应对象\",{\"1\":{\"9138\":1}}],[\"需要再创建一个必备的目录\",{\"1\":{\"8463\":1}}],[\"需要再次创建一个线程对象\",{\"1\":{\"5201\":1}}],[\"需要修改\",{\"1\":{\"8441\":1}}],[\"需要修改服务器配置\",{\"1\":{\"805\":1}}],[\"需要一个\",{\"1\":{\"8352\":1}}],[\"需要一些后台运行的程序时\",{\"1\":{\"5109\":1}}],[\"需要数据库连接的时候\",{\"1\":{\"8219\":1}}],[\"需要实现的特殊操作\",{\"0\":{\"8184\":1}}],[\"需要实现的基本数据表操作\",{\"0\":{\"8179\":1}}],[\"需要实现接口\",{\"1\":{\"6559\":1}}],[\"需要对副本集进行初始化\",{\"1\":{\"10812\":1}}],[\"需要对查询的结果进行处理\",{\"1\":{\"7996\":1}}],[\"需要对异常进行处理\",{\"1\":{\"1501\":1}}],[\"需要安装具体的实现类\",{\"1\":{\"7838\":1}}],[\"需要针对这套接口\",{\"1\":{\"7810\":1}}],[\"需要打开项目配置菜单\",{\"1\":{\"7322\":1}}],[\"需要手动创建补齐\",{\"1\":{\"8554\":1}}],[\"需要手动的实现该接口\",{\"1\":{\"7262\":1}}],[\"需要手动指定版本\",{\"1\":{\"1141\":1,\"1144\":1,\"1147\":1,\"1150\":1,\"1163\":1}}],[\"需要连接数据库的类都要继承他\",{\"1\":{\"7197\":1}}],[\"需要通过setaccessible进行设置\",{\"1\":{\"7184\":1}}],[\"需要自己进行循环拼接形参名\",{\"1\":{\"7121\":1}}],[\"需要自定义枚举类\",{\"1\":{\"4829\":1}}],[\"需要编译时按ctrl\",{\"1\":{\"8595\":1}}],[\"需要编译\",{\"1\":{\"6926\":1}}],[\"需要创建一个customer类\",{\"1\":{\"8041\":1}}],[\"需要创建新的套接字对象\",{\"1\":{\"6780\":1}}],[\"需要创建dev\",{\"1\":{\"1095\":1}}],[\"需要满足的要求\",{\"0\":{\"6558\":1}}],[\"需要套接在fileinputstream上\",{\"1\":{\"6543\":1}}],[\"需要套接在fileoutputstream上\",{\"1\":{\"6542\":1,\"6543\":1}}],[\"需要和outputstream\",{\"1\":{\"6400\":1}}],[\"需要和inputstream\",{\"1\":{\"6381\":1}}],[\"需要处理同样的异常\",{\"1\":{\"6303\":1}}],[\"需要处理java\",{\"1\":{\"6271\":1}}],[\"需要用到基本数据类型的位置\",{\"1\":{\"5980\":1}}],[\"需要用到executors工厂类\",{\"1\":{\"5512\":1}}],[\"需要类型强制转换的问题\",{\"1\":{\"5954\":1}}],[\"需要key所在的类\",{\"1\":{\"5912\":1}}],[\"需要根据\",{\"1\":{\"5831\":1,\"5904\":1}}],[\"需要根据实际情况\",{\"1\":{\"3355\":1}}],[\"需要优化哈希算法\",{\"1\":{\"5768\":1}}],[\"需要提供实现runnable接口或callable接口实现类的对象做参数\",{\"1\":{\"5514\":1}}],[\"需要某种方式来防止两个任务访问相同的资源\",{\"1\":{\"5358\":1}}],[\"需要被同步的代码块\",{\"1\":{\"5314\":1}}],[\"需要try\",{\"1\":{\"5226\":1,\"5229\":1}}],[\"需要三个功能\",{\"1\":{\"5108\":1}}],[\"需要我们自己下载\",{\"1\":{\"7816\":1}}],[\"需要我们自己new异常类\",{\"1\":{\"4797\":1}}],[\"需要我们自己手动抛出\",{\"1\":{\"4794\":1}}],[\"需要我们必须在实现类中重写此方法\",{\"1\":{\"4532\":1}}],[\"需要具体子类确定的步骤\",{\"1\":{\"4469\":1}}],[\"需要\",{\"1\":{\"4322\":1}}],[\"需要为每个子类创建一个方法\",{\"1\":{\"4136\":1}}],[\"需要保证先初始化父类\",{\"1\":{\"4091\":1}}],[\"需要保证被移动的文件在硬盘中是存在的\",{\"1\":{\"2017\":1}}],[\"需要父类实现了private成员的getxxx和setxxx方法\",{\"1\":{\"4038\":1}}],[\"需要进行配置\",{\"1\":{\"8651\":1}}],[\"需要进行多线程的修改\",{\"1\":{\"4432\":1}}],[\"需要进行数组的初始化\",{\"1\":{\"3558\":1}}],[\"需要进行时间偏移\",{\"1\":{\"1675\":1}}],[\"需要将中文数据转码\",{\"1\":{\"9724\":1}}],[\"需要将数据库的链接和关闭操作再数据表实现类的调用处执行\",{\"1\":{\"8195\":1}}],[\"需要将真正的源码导入\",{\"1\":{\"7832\":1}}],[\"需要将此线程的操作声明在run方法中\",{\"1\":{\"5172\":1}}],[\"需要将范围小的声明在范围大的上面\",{\"1\":{\"3356\":1}}],[\"需要将random结果乘一个倍数\",{\"1\":{\"1803\":1}}],[\"需要重写抽象类里的抽象方法\",{\"1\":{\"4459\":1}}],[\"需要重写equals方法\",{\"1\":{\"2428\":1}}],[\"需要重新指定内存区域赋值\",{\"1\":{\"3223\":1}}],[\"需要调用方法\",{\"1\":{\"7963\":1}}],[\"需要调用包装类的parsexxx\",{\"1\":{\"4294\":1}}],[\"需要调用静态方法compile返回pattern实例\",{\"1\":{\"2714\":1}}],[\"需要调用对应包装类的静态方法\",{\"1\":{\"1484\":1}}],[\"需要借助futuretask类\",{\"1\":{\"5474\":1}}],[\"需要借助pattern中的flags\",{\"1\":{\"2677\":1}}],[\"需要借助方法\",{\"1\":{\"1647\":1}}],[\"需要使用slaveok方法赋予权限\",{\"1\":{\"10607\":1}}],[\"需要使用options中的multi选项\",{\"1\":{\"10292\":1}}],[\"需要使用request对象提供的三个方法\",{\"1\":{\"9118\":1}}],[\"需要使用被代理类的对象进行赋值\",{\"1\":{\"7279\":1}}],[\"需要使用executorservice接口的子类\",{\"1\":{\"5513\":1}}],[\"需要使用\",{\"1\":{\"3721\":1,\"6197\":1,\"6204\":1,\"9289\":1,\"10356\":1}}],[\"需要使用包装函数进行\",{\"1\":{\"3244\":1}}],[\"需要使用单引号表示值\",{\"1\":{\"3116\":1}}],[\"需要使用特点的方法\",{\"1\":{\"1883\":1}}],[\"需要使用nginx代理\",{\"1\":{\"1368\":1}}],[\"需要end=length+1\",{\"1\":{\"1593\":1}}],[\"需要设置静态资源映射\",{\"1\":{\"1369\":1}}],[\"需要设计表现层返回结果的模型类\",{\"1\":{\"1292\":1}}],[\"需要maven设置支持\",{\"1\":{\"1166\":1}}],[\"需要先搭建好副本集\",{\"1\":{\"10803\":1}}],[\"需要先连接mongodb\",{\"1\":{\"10167\":1}}],[\"需要先转换为静态资源\",{\"1\":{\"8402\":1}}],[\"需要先setaccessible\",{\"1\":{\"7158\":1}}],[\"需要先获取执行当前代码的线程\",{\"1\":{\"5209\":1,\"5210\":1}}],[\"需要先创建一个同等长度的集合\",{\"1\":{\"2511\":1}}],[\"需要先创建对象\",{\"1\":{\"2235\":1,\"2242\":1}}],[\"需要先调用setaccessible\",{\"1\":{\"2238\":1,\"2243\":1}}],[\"需要先确认操作何种数据\",{\"1\":{\"1026\":1}}],[\"需要先导入对应技术的坐标\",{\"1\":{\"962\":1}}],[\"需要配置的是数据库的连接信息和mybatis的sql映射\",{\"1\":{\"974\":1}}],[\"需要继承\",{\"1\":{\"885\":1}}],[\"需要记录日志的控制器就继承该控制器\",{\"1\":{\"885\":1}}],[\"需要什么技术\",{\"1\":{\"410\":1}}],[\"需要学习的内容\",{\"0\":{\"294\":1}}],[\"需要前置知识\",{\"1\":{\"17\":1,\"302\":1,\"1183\":1}}],[\"判断下一行有没有数据\",{\"1\":{\"8008\":1}}],[\"判断optional容器中是否有对象\",{\"0\":{\"7750\":1},\"1\":{\"7752\":1}}],[\"判断时\",{\"1\":{\"5694\":1}}],[\"判断main进程是否还在激活状态\",{\"1\":{\"5221\":1}}],[\"判断当前线程是否存活\",{\"1\":{\"5214\":1,\"5231\":1}}],[\"判断当前map是否为空\",{\"1\":{\"2611\":1}}],[\"判断两个\",{\"1\":{\"5818\":1,\"5820\":1}}],[\"判断两个对象的属性是否相同\",{\"1\":{\"4241\":1}}],[\"判断两个对象是否想等\",{\"1\":{\"4210\":1}}],[\"判断两个集合是否想等\",{\"1\":{\"2438\":1,\"2614\":1}}],[\"判断的是左边\",{\"1\":{\"4129\":1}}],[\"判断number的正负情况\",{\"1\":{\"3414\":1}}],[\"判断参数字符串是否匹配到了pattern实例指定的正则表达式\",{\"1\":{\"2752\":1}}],[\"判断参数字符串是否匹配到了给定的正则表达式\",{\"1\":{\"2699\":1}}],[\"判断形参c中的所有元素是否都存在于当前集合中\",{\"1\":{\"2425\":1}}],[\"判断集合是否为空\",{\"1\":{\"2415\":1}}],[\"判断是否是隐藏文件\",{\"1\":{\"6626\":1}}],[\"判断是否是文件\",{\"1\":{\"6625\":1}}],[\"判断是否是目录\",{\"1\":{\"6624\":1}}],[\"判断是否是绝对路径\",{\"1\":{\"6601\":1}}],[\"判断是否是空字符串\",{\"1\":{\"1441\":1}}],[\"判断是否以\",{\"1\":{\"6599\":1,\"6600\":1}}],[\"判断是否还有输入的数据\",{\"1\":{\"2322\":1,\"2779\":1}}],[\"判断文件是否不存在\",{\"1\":{\"6629\":1}}],[\"判断文件是否可写\",{\"1\":{\"6628\":1}}],[\"判断文件是否可读\",{\"1\":{\"6627\":1}}],[\"判断文件是否存在\",{\"1\":{\"6623\":1}}],[\"判断文件是否有\",{\"1\":{\"1987\":1}}],[\"判断文件\",{\"1\":{\"1984\":1}}],[\"判断file是否为文件\",{\"1\":{\"1981\":1}}],[\"判断file是否为目录\",{\"1\":{\"1978\":1}}],[\"判断\",{\"0\":{\"1976\":1},\"1\":{\"4245\":1,\"5060\":1,\"5685\":1,\"8817\":1}}],[\"判断这两个对象\",{\"1\":{\"1769\":1}}],[\"判断数据类型是否相同\",{\"1\":{\"1769\":1}}],[\"know\",{\"1\":{\"9895\":1}}],[\"kill\",{\"1\":{\"10167\":1}}],[\"kibana\",{\"1\":{\"9831\":1}}],[\"kit\",{\"1\":{\"2846\":1}}],[\"keepalivetime\",{\"1\":{\"5498\":1}}],[\"keyfile鉴权文件\",{\"1\":{\"10777\":1}}],[\"keyfile\",{\"1\":{\"10762\":1,\"10770\":2,\"10774\":3,\"10777\":2}}],[\"keyid\",{\"1\":{\"10554\":1,\"10573\":1,\"10580\":1,\"10657\":1,\"10660\":1}}],[\"key是列名\",{\"1\":{\"8376\":1}}],[\"key是有set组成的\",{\"1\":{\"2583\":1}}],[\"keyedhandler\",{\"1\":{\"8375\":1}}],[\"keystore\",{\"1\":{\"9902\":1}}],[\"keys\",{\"1\":{\"8358\":1,\"10385\":1,\"10387\":1}}],[\"keyset\",{\"0\":{\"2616\":1},\"1\":{\"2618\":2,\"9027\":1}}],[\"key+\",{\"1\":{\"5970\":1,\"9027\":1}}],[\"key2\",{\"1\":{\"5862\":2}}],[\"key1\",{\"1\":{\"5858\":1}}],[\"key可以自然排序或定制排序\",{\"1\":{\"5832\":1}}],[\"key所在的类要重写equals\",{\"1\":{\"5847\":1}}],[\"key所在的类要重写\",{\"1\":{\"5817\":1}}],[\"key=>value\",{\"1\":{\"2614\":1}}],[\"key一般为string\",{\"1\":{\"2588\":1}}],[\"key\",{\"0\":{\"5844\":1},\"1\":{\"1334\":2,\"1336\":2,\"1338\":2,\"1340\":2,\"1342\":1,\"1344\":1,\"1346\":1,\"1348\":1,\"1350\":1,\"1352\":1,\"1354\":1,\"2314\":1,\"2370\":1,\"2583\":1,\"2585\":1,\"2589\":1,\"2595\":1,\"2601\":1,\"2604\":1,\"5548\":1,\"5798\":1,\"5799\":1,\"5800\":1,\"5802\":2,\"5818\":2,\"5831\":2,\"5833\":1,\"5840\":1,\"5841\":2,\"5846\":1,\"5899\":1,\"5904\":2,\"5905\":1,\"5923\":1,\"5924\":1,\"5970\":1,\"8105\":1,\"9027\":2,\"9681\":1,\"10073\":1,\"10074\":1,\"10379\":1,\"10394\":2,\"10399\":3,\"10726\":1}}],[\"k2\",{\"1\":{\"2370\":2}}],[\"k1\",{\"1\":{\"2370\":2}}],[\"kk\",{\"1\":{\"1788\":3}}],[\"k++\",{\"1\":{\"1763\":1}}],[\"k\",{\"1\":{\"1763\":4,\"2036\":2,\"2042\":1,\"2048\":1,\"2062\":1,\"2090\":1,\"2589\":1,\"2592\":1,\"3525\":1,\"5534\":1,\"5987\":1}}],[\"两者的功能和效率基本一样\",{\"1\":{\"9838\":1}}],[\"两者都会因为所需资源被占用而阻塞\",{\"1\":{\"5422\":1}}],[\"两次获取的session并不是同一个\",{\"1\":{\"9770\":1}}],[\"两次请求\",{\"1\":{\"9153\":1}}],[\"两同\",{\"1\":{\"3759\":1}}],[\"两同一不同\",{\"1\":{\"3758\":1}}],[\"两层循环相当于是一个矩阵\",{\"1\":{\"3449\":1}}],[\"两种类型\",{\"0\":{\"10451\":1}}],[\"两种体系\",{\"1\":{\"5542\":1}}],[\"两种方式都需要重写run\",{\"1\":{\"5282\":1}}],[\"两种方式的比较\",{\"0\":{\"5273\":1}}],[\"两种浮点类型只是表示的数据范围和精度不同\",{\"1\":{\"3093\":1}}],[\"两种浮点类型的对比\",{\"0\":{\"3092\":1}}],[\"两种打包方式的对比\",{\"0\":{\"710\":1}}],[\"两种打包方式\",{\"0\":{\"706\":1}}],[\"两个方法可以单独使用\",{\"1\":{\"10328\":1}}],[\"两个方法声明的位置不同\",{\"1\":{\"5459\":1}}],[\"两个类\",{\"1\":{\"7282\":1}}],[\"两个子类\",{\"1\":{\"6695\":1}}],[\"两个都要关闭\",{\"1\":{\"6287\":1}}],[\"两个都是抽象类无法直接实现\",{\"1\":{\"2033\":1}}],[\"两个key通过compareto\",{\"1\":{\"5834\":1,\"5907\":1}}],[\"两个key\",{\"1\":{\"5834\":1,\"5907\":1}}],[\"两个线程无序交替执行\",{\"1\":{\"5252\":1}}],[\"两个变量指向同一内存地址\",{\"1\":{\"4654\":1,\"4660\":1}}],[\"两个变量各种保存了一份值\",{\"1\":{\"4653\":1}}],[\"两个变量互不干扰\",{\"1\":{\"3780\":1,\"4657\":1}}],[\"两个对象中保存的属性也是互不相干的\",{\"1\":{\"4645\":1}}],[\"两个对象通过\",{\"1\":{\"1750\":1,\"5705\":1}}],[\"两个表达式类型不一致\",{\"1\":{\"3319\":1}}],[\"两个int类型相除\",{\"1\":{\"3252\":1}}],[\"两个\",{\"1\":{\"2671\":1,\"5818\":1,\"5820\":1}}],[\"两个集合会用equals比对集合中的所有obj\",{\"1\":{\"2438\":1}}],[\"两个数组就相等\",{\"1\":{\"2377\":1}}],[\"两个内存地址是不一样的\",{\"1\":{\"2375\":1}}],[\"之一\",{\"1\":{\"9314\":1}}],[\"之所以他们是域对象\",{\"1\":{\"9180\":1}}],[\"之上\",{\"1\":{\"6166\":1,\"6184\":1}}],[\"之间存在单向一对一关系\",{\"1\":{\"5802\":1}}],[\"之间的unicode码\",{\"1\":{\"2093\":1}}],[\"之间\",{\"1\":{\"2040\":1,\"6847\":1}}],[\"之后插入一些通用处理\",{\"1\":{\"7304\":1}}],[\"之后只能声明常量\",{\"1\":{\"3369\":1}}],[\"之后\",{\"1\":{\"1747\":1,\"7558\":1,\"9725\":1}}],[\"之前\",{\"1\":{\"4612\":1,\"9724\":1}}],[\"之前与值的指针断裂\",{\"1\":{\"3526\":1}}],[\"之前版本会出现一个小bug\",{\"1\":{\"994\":1}}],[\"之前开发某类项目\",{\"1\":{\"415\":1}}],[\"言外之意\",{\"1\":{\"1730\":1,\"4318\":1}}],[\"都提倡将其打成war包然后放置于同一个tomcat的webapps下进行管理\",{\"1\":{\"9529\":1}}],[\"都属于java\",{\"1\":{\"9495\":1}}],[\"都表示任意匹配\",{\"1\":{\"8859\":1}}],[\"都声明一个静态代理\",{\"1\":{\"7207\":1}}],[\"都为其保留一个不变的\",{\"1\":{\"6966\":1}}],[\"都指定为实例化的泛型类型\",{\"1\":{\"5977\":1}}],[\"都应该用来计算\",{\"1\":{\"5758\":1}}],[\"都在等待对方放弃自己需要的同步资源\",{\"1\":{\"5407\":1}}],[\"都进行票据的打印\",{\"1\":{\"5303\":1}}],[\"都还没有更新数据\",{\"1\":{\"5300\":1}}],[\"都与\",{\"1\":{\"4955\":1,\"4960\":1,\"4963\":1}}],[\"都\",{\"1\":{\"4952\":1}}],[\"都会被拦截\",{\"1\":{\"9283\":1,\"9284\":1,\"9285\":1}}],[\"都会出现中文乱码的问题\",{\"1\":{\"9033\":1}}],[\"都会保存上一次的指针\",{\"1\":{\"6528\":1}}],[\"都会返回一个全新的迭代器\",{\"1\":{\"5599\":1}}],[\"都会有唯一的\",{\"1\":{\"4956\":1}}],[\"都会有唯一的retentionpolicy属性\",{\"1\":{\"4948\":1}}],[\"都会提供抽象类的子类\",{\"1\":{\"4445\":1}}],[\"都必须显式的赋值\",{\"1\":{\"4938\":1}}],[\"都必须手动调用close方法进行关闭\",{\"1\":{\"2061\":1}}],[\"都能解决问题\",{\"1\":{\"4794\":1}}],[\"都无条件执行的语句\",{\"1\":{\"4727\":1}}],[\"都生成一个对象去读取\",{\"1\":{\"4437\":1}}],[\"都不能使用该类\",{\"1\":{\"4335\":1}}],[\"都直接或间接的继承于java\",{\"1\":{\"4024\":1}}],[\"都选择省略\",{\"1\":{\"3895\":1}}],[\"都有固定的模板\",{\"1\":{\"9589\":1}}],[\"都有setattribute和getattribute方法\",{\"1\":{\"9180\":1}}],[\"都有默认初始化值\",{\"1\":{\"3694\":1}}],[\"都有多个参数\",{\"1\":{\"1713\":1}}],[\"都体现为类\",{\"1\":{\"3614\":1}}],[\"都可以用来指定url\",{\"1\":{\"8831\":1}}],[\"都可以保存到配置文件中\",{\"1\":{\"7867\":1}}],[\"都可以在调用源方法的前后执行一些指定的增强逻辑\",{\"1\":{\"7251\":1}}],[\"都可以是任何引用类型的数据\",{\"1\":{\"5799\":1}}],[\"都可以使得当前的线程进入阻塞状态\",{\"1\":{\"5457\":1}}],[\"都可以使用collection\",{\"1\":{\"1765\":1}}],[\"都可以解决线程安全问题\",{\"1\":{\"5398\":1}}],[\"都可以充当锁\",{\"1\":{\"5318\":1}}],[\"都可以改写为if\",{\"1\":{\"3324\":1,\"3377\":1}}],[\"都作为此类的实例实现\",{\"1\":{\"3214\":1}}],[\"都已补码的方式来存储数据\",{\"1\":{\"3187\":1}}],[\"都需要使用\",{\"1\":{\"2950\":1}}],[\"都存在\",{\"1\":{\"2425\":1}}],[\"都重写了equals方法\",{\"1\":{\"2419\":1}}],[\"都返回0\",{\"1\":{\"1962\":1}}],[\"都实现了comparable接口\",{\"1\":{\"1745\":1}}],[\"都是使用maven来管理包的\",{\"1\":{\"9533\":1}}],[\"都是先获取流对象\",{\"1\":{\"8979\":1}}],[\"都是针对http协议\",{\"1\":{\"8799\":1}}],[\"都是一些高级的tomcat使用\",{\"1\":{\"8656\":1}}],[\"都是一个集合\",{\"1\":{\"7645\":1}}],[\"都是通过配置文件进行控制的\",{\"1\":{\"8150\":1}}],[\"都是提前定义好方法\",{\"1\":{\"7423\":1}}],[\"都是\",{\"1\":{\"7207\":1}}],[\"都是直接将字符和最终字节流绑定死了\",{\"1\":{\"6426\":1}}],[\"都是从如下4个抽象基类派生的\",{\"1\":{\"6168\":1}}],[\"都是字符串类型\",{\"1\":{\"5840\":1}}],[\"都是以实现类做测试的\",{\"1\":{\"5559\":1}}],[\"都是private\",{\"1\":{\"4575\":1}}],[\"都是抽象类number的子类\",{\"1\":{\"1845\":1}}],[\"都是前后端分离的\",{\"1\":{\"1301\":1}}],[\"都是将日志写入文件\",{\"1\":{\"925\":1}}],[\"都是spring容器中的组件\",{\"1\":{\"535\":1}}],[\"获得结果\",{\"1\":{\"7809\":1}}],[\"获得一个employee\",{\"1\":{\"7507\":1,\"7514\":1,\"7522\":1}}],[\"获得一个offsetdatetime时间对象\",{\"1\":{\"1675\":1}}],[\"获得核心类库string的类加载器\",{\"1\":{\"7043\":1}}],[\"获得当前自定义类加载器\",{\"1\":{\"7043\":1}}],[\"获得本地ip对象\",{\"0\":{\"6699\":1}}],[\"获得线程的优先级\",{\"1\":{\"5253\":1}}],[\"获得\",{\"1\":{\"4279\":1}}],[\"获取统计信息\",{\"1\":{\"10686\":1,\"10688\":1}}],[\"获取httpsession对象\",{\"0\":{\"9748\":1}}],[\"获取hour\",{\"1\":{\"1654\":1}}],[\"获取触发事件的servletrequest对象\",{\"1\":{\"9414\":1}}],[\"获取触发事件的httpsession对象\",{\"1\":{\"9395\":1,\"9431\":1}}],[\"获取被修改或添加的属性值\",{\"1\":{\"9374\":1,\"9393\":1,\"9412\":1}}],[\"获取被代理类对象superman\",{\"1\":{\"7286\":1}}],[\"获取被代理类的对象\",{\"1\":{\"7237\":1}}],[\"获取修改或添加的属性名\",{\"1\":{\"9372\":1,\"9391\":1,\"9410\":1}}],[\"获取其真正部署后的路径\",{\"1\":{\"9254\":1}}],[\"获取其他信息\",{\"0\":{\"7125\":1}}],[\"获取转发时发送的共享数据\",{\"1\":{\"9124\":1}}],[\"获取response字节输出流\",{\"1\":{\"9095\":1,\"9099\":1}}],[\"获取单个参数值\",{\"1\":{\"9027\":1}}],[\"获取值\",{\"1\":{\"9027\":1}}],[\"获取的内容如下\",{\"1\":{\"9011\":1}}],[\"获取的是该类的所有属性\",{\"1\":{\"7151\":1}}],[\"获取的是public修饰的属性\",{\"1\":{\"7148\":1}}],[\"获取的是参数数据类型的class对象\",{\"1\":{\"2209\":1}}],[\"获取字节输出流\",{\"1\":{\"9069\":1,\"9101\":1}}],[\"获取字节输入流\",{\"0\":{\"8980\":1}}],[\"获取字符输出流\",{\"1\":{\"9067\":1}}],[\"获取字符输入流\",{\"0\":{\"8983\":1},\"1\":{\"8990\":1}}],[\"获取字符串类型的形参\",{\"1\":{\"2272\":1}}],[\"获取字符串形式的方法名\",{\"1\":{\"2268\":1,\"7118\":1}}],[\"获取字符串形式的属性名\",{\"1\":{\"2230\":1}}],[\"获取字符串内容的长度\",{\"1\":{\"1574\":1}}],[\"获取所有参数的map集合\",{\"1\":{\"9027\":1}}],[\"获取所有参数map集合\",{\"1\":{\"9021\":1}}],[\"获取所有请求的参数名称\",{\"1\":{\"9021\":1}}],[\"获取所有请求头的名称\",{\"0\":{\"8952\":1}}],[\"获取所有的请求头\",{\"1\":{\"8953\":1}}],[\"获取所有自己所有权限的属性\",{\"0\":{\"7076\":1}}],[\"获取客户机的ip地址\",{\"1\":{\"8941\":1}}],[\"获取get的请求参数\",{\"1\":{\"8940\":1}}],[\"获取协议及版本\",{\"1\":{\"8939\":1}}],[\"获取uri\",{\"1\":{\"8937\":1}}],[\"获取url\",{\"1\":{\"8936\":1}}],[\"获取虚拟目录\",{\"1\":{\"8933\":1}}],[\"获取到数据后就可以继续后续的业务\",{\"1\":{\"8892\":1}}],[\"获取请求参数\",{\"1\":{\"9004\":1,\"9048\":1}}],[\"获取请求体的方式\",{\"0\":{\"8977\":1}}],[\"获取请求体\",{\"0\":{\"8973\":1}}],[\"获取请求头的值\",{\"0\":{\"8948\":1}}],[\"获取请求头\",{\"0\":{\"8945\":1}}],[\"获取请求行\",{\"0\":{\"8924\":1}}],[\"获取请求数据\",{\"0\":{\"8887\":1}}],[\"获取请求方式\",{\"1\":{\"8817\":1,\"8931\":1,\"9004\":1}}],[\"获取请求时发送过来的流对象\",{\"1\":{\"6819\":1}}],[\"获取sessionid\",{\"0\":{\"9758\":1}}],[\"获取servletcontext对象\",{\"0\":{\"9218\":1},\"1\":{\"9376\":1}}],[\"获取servletconfig对象\",{\"0\":{\"8782\":1}}],[\"获取servlet路径\",{\"1\":{\"8938\":1}}],[\"获取servlet信息\",{\"0\":{\"8778\":1}}],[\"获取string类型的操作对象\",{\"1\":{\"1029\":1,\"1038\":1}}],[\"获取速度快\",{\"1\":{\"8248\":1}}],[\"获取最大的生日\",{\"1\":{\"8210\":1}}],[\"获取最后一次的修改时间\",{\"1\":{\"1965\":1}}],[\"获取了父类的泛型参数\",{\"1\":{\"8201\":1}}],[\"获取泛型值\",{\"1\":{\"8201\":1}}],[\"获取泛型类型\",{\"1\":{\"7137\":1}}],[\"获取blob类型的数据\",{\"1\":{\"8082\":1}}],[\"获取列值\",{\"1\":{\"8045\":1,\"8054\":1,\"8201\":2}}],[\"获取指针所在行的数据\",{\"0\":{\"8010\":1}}],[\"获取指定列的别名\",{\"1\":{\"8022\":1}}],[\"获取指定列的名称\",{\"1\":{\"8021\":1}}],[\"获取指定的构造器\",{\"0\":{\"7180\":1},\"1\":{\"7179\":1}}],[\"获取指定的某个方法\",{\"0\":{\"7162\":1,\"7167\":1}}],[\"获取指定的方法\",{\"1\":{\"7161\":1}}],[\"获取指定的属性对象\",{\"1\":{\"2190\":1,\"2193\":1}}],[\"获取指定索引出的值\",{\"1\":{\"3506\":1}}],[\"获取指定key对应的value\",{\"1\":{\"2600\":1}}],[\"获取指定index\",{\"1\":{\"2548\":1}}],[\"获取preparedstatement的实例\",{\"1\":{\"8146\":1}}],[\"获取preparedstatement对象并给占位符赋值\",{\"1\":{\"8037\":1,\"8084\":1,\"8089\":1}}],[\"获取preparedstatement对象\",{\"1\":{\"7952\":1,\"8045\":1,\"8054\":1}}],[\"获取person的class实例\",{\"1\":{\"5060\":1}}],[\"获取person类的class对象\",{\"1\":{\"2150\":1}}],[\"获取连接时最大等待时间\",{\"1\":{\"8263\":1,\"8291\":1}}],[\"获取连接\",{\"1\":{\"7862\":1,\"7865\":1,\"7873\":1,\"7970\":1,\"7975\":1}}],[\"获取连接对象\",{\"1\":{\"7852\":1,\"8037\":1,\"8045\":1,\"8054\":1,\"8162\":1}}],[\"获取对象包含的值\",{\"0\":{\"7758\":1}}],[\"获取对应的xxxoperations对象\",{\"1\":{\"1025\":1}}],[\"获取optional容器的对象值\",{\"0\":{\"7757\":1}}],[\"获取工资大于6000的员工set集合\",{\"1\":{\"7723\":1}}],[\"获取工资大于6000的员工list集合\",{\"1\":{\"7723\":1}}],[\"获取工资最低的员工对象\",{\"1\":{\"7697\":1}}],[\"获取1到10的总和\",{\"1\":{\"7708\":1}}],[\"获取要连接的数据库信息\",{\"1\":{\"7835\":1}}],[\"获取要筛选的元素的总数\",{\"1\":{\"7690\":1}}],[\"获取要增强的方法名\",{\"1\":{\"7253\":1}}],[\"获取子集合\",{\"1\":{\"7665\":1}}],[\"获取班级学生所有年龄组成的集合\",{\"1\":{\"7657\":1,\"7660\":1}}],[\"获取一个集合\",{\"1\":{\"7655\":2}}],[\"获取一个stream\",{\"1\":{\"7556\":1}}],[\"获取一个seasons对象\",{\"1\":{\"4874\":1}}],[\"获取每个列的列名\",{\"1\":{\"8045\":1,\"8054\":1,\"8201\":2}}],[\"获取每个学生的年龄\",{\"1\":{\"7654\":1}}],[\"获取每一列的值\",{\"1\":{\"8005\":1}}],[\"获取每页显示的条数\",{\"1\":{\"1241\":1}}],[\"获取员工集合\",{\"1\":{\"7616\":1}}],[\"获取员工姓名\",{\"1\":{\"7492\":1}}],[\"获取运行类中指定变量名的属性\",{\"1\":{\"7148\":1,\"7151\":1}}],[\"获取运行时方法的结构\",{\"0\":{\"7104\":1}}],[\"获取运行时类中指定变量名的属性\",{\"1\":{\"7146\":1}}],[\"获取运行时类声明的注解\",{\"0\":{\"7142\":1}}],[\"获取运行时类实现的接口\",{\"0\":{\"7138\":1}}],[\"获取运行时类的父类实现的接口\",{\"1\":{\"7139\":1}}],[\"获取运行时类的父类\",{\"0\":{\"7131\":1}}],[\"获取运行时类的父类的泛型\",{\"0\":{\"7133\":1,\"7135\":1},\"1\":{\"2158\":1}}],[\"获取运行时类的构造器结构\",{\"0\":{\"7126\":1}}],[\"获取运行时类的方法\",{\"0\":{\"7096\":1}}],[\"获取运行时类的所有结构\",{\"1\":{\"7067\":1}}],[\"获取运行时类的完整结构\",{\"0\":{\"7066\":1}}],[\"获取运行时类所在的包\",{\"0\":{\"7140\":1},\"1\":{\"2170\":1}}],[\"获取本类所有权限的方法\",{\"1\":{\"7101\":1}}],[\"获取类和父类中public方法\",{\"1\":{\"7098\":1}}],[\"获取类路径下的指定文件的输入流\",{\"0\":{\"7044\":1}}],[\"获取自己和父类所有public属性\",{\"0\":{\"7070\":1}}],[\"获取扩展类加载器\",{\"1\":{\"7043\":1}}],[\"获取cookie\",{\"0\":{\"9694\":1},\"1\":{\"9690\":1,\"9695\":1}}],[\"获取cookie的value\",{\"1\":{\"9690\":1}}],[\"获取cookie的name\",{\"1\":{\"9690\":1}}],[\"获取cookie的name和value\",{\"0\":{\"9688\":1}}],[\"获取cookie数据\",{\"0\":{\"9685\":1}}],[\"获取connection对象\",{\"1\":{\"7946\":1,\"7947\":1}}],[\"获取class类的实例\",{\"0\":{\"6990\":1}}],[\"获取callable中call方法的返回值\",{\"1\":{\"5486\":1}}],[\"获取该泛型作为属性clazz的值\",{\"1\":{\"8191\":1}}],[\"获取该url的查询名\",{\"1\":{\"6892\":1}}],[\"获取该url的文件名\",{\"1\":{\"6891\":1}}],[\"获取该url的文件路径\",{\"1\":{\"6890\":1}}],[\"获取该url的端口号\",{\"1\":{\"6889\":1}}],[\"获取该url的主机名\",{\"1\":{\"6888\":1}}],[\"获取该url的协议名\",{\"1\":{\"6887\":1}}],[\"获取该方法的myannotation注解实例\",{\"1\":{\"5060\":1}}],[\"获取输出流和输入流\",{\"1\":{\"6808\":1}}],[\"获取输入流和输出流\",{\"1\":{\"6808\":1}}],[\"获取套接字绑定的本地地址\",{\"1\":{\"6777\":1,\"6851\":1}}],[\"获取ip地址的主机名\",{\"0\":{\"6707\":1}}],[\"获取与指定文件的连接\",{\"1\":{\"6630\":1}}],[\"获取fileinputstream对象的字符集\",{\"1\":{\"6393\":1}}],[\"获取配置的值\",{\"1\":{\"5923\":1}}],[\"获取返回结果\",{\"1\":{\"5474\":1}}],[\"获取返回值类型\",{\"1\":{\"2265\":1,\"7113\":1}}],[\"获取方法名\",{\"1\":{\"7116\":1}}],[\"获取方法声明的注解\",{\"1\":{\"7106\":1}}],[\"获取方法结构\",{\"0\":{\"7095\":1}}],[\"获取方法上的所有注解\",{\"1\":{\"5060\":1}}],[\"获取方法的注解\",{\"1\":{\"2255\":1,\"7107\":1}}],[\"获取枚举类对象的属性\",{\"1\":{\"4843\":1}}],[\"获取异常类名和异常信息\",{\"1\":{\"4743\":1}}],[\"获取异常信息\",{\"1\":{\"4734\":1,\"4742\":1}}],[\"获取用户的输入\",{\"1\":{\"9544\":1}}],[\"获取用户的年龄\",{\"1\":{\"4584\":1}}],[\"获取用户密码\",{\"1\":{\"7889\":1}}],[\"获取用户名\",{\"1\":{\"7889\":1}}],[\"获取用于sql的日期\",{\"1\":{\"1612\":1}}],[\"获取数据表的count\",{\"1\":{\"8210\":1}}],[\"获取数据库的连接\",{\"1\":{\"7980\":1,\"7989\":1}}],[\"获取数据库连接\",{\"0\":{\"7974\":1},\"1\":{\"8148\":1}}],[\"获取数据库连接对象\",{\"1\":{\"7931\":1,\"8197\":1,\"8260\":1}}],[\"获取数据类型\",{\"1\":{\"7092\":1}}],[\"获取数据\",{\"0\":{\"6071\":1},\"1\":{\"9695\":1}}],[\"获取数据需要数据库链接\",{\"1\":{\"4139\":1}}],[\"获取数组中实际元素的个数的需求\",{\"1\":{\"5530\":1}}],[\"获取数组长度\",{\"0\":{\"3507\":1}}],[\"获取成员\",{\"1\":{\"3847\":1}}],[\"获取匹配的结果\",{\"1\":{\"2747\":1}}],[\"获取结果集的元数据\",{\"1\":{\"8045\":1,\"8201\":2}}],[\"获取结果等\",{\"1\":{\"5476\":1}}],[\"获取结果\",{\"1\":{\"2683\":1}}],[\"获取value\",{\"1\":{\"2600\":1}}],[\"获取线程安全的集合\",{\"1\":{\"2517\":1}}],[\"获取集合的元素个数\",{\"1\":{\"2409\":1}}],[\"获取后的值依然是十进制\",{\"1\":{\"2343\":1,\"2800\":1}}],[\"获取系统信息\",{\"1\":{\"2312\":1}}],[\"获取抛出的异常\",{\"1\":{\"2274\":1,\"7122\":1}}],[\"获取形参列表\",{\"1\":{\"2271\":1,\"7119\":1}}],[\"获取权限修饰符\",{\"1\":{\"2258\":1,\"7087\":1,\"7110\":1}}],[\"获取属性\",{\"0\":{\"7147\":1,\"7150\":1}}],[\"获取属性名\",{\"1\":{\"7094\":1}}],[\"获取属性结构\",{\"0\":{\"7069\":1}}],[\"获取属性的结构\",{\"0\":{\"7084\":1}}],[\"获取属性的值\",{\"1\":{\"3636\":1}}],[\"获取属性的数据类型\",{\"1\":{\"2227\":1}}],[\"获取属性值\",{\"0\":{\"7153\":1},\"1\":{\"2233\":1}}],[\"获取加载器的父类\",{\"1\":{\"2167\":1}}],[\"获取目录下所有文件\",{\"1\":{\"1973\":1}}],[\"获取目录下的文件名称组成的string数组\",{\"1\":{\"1968\":1}}],[\"获取当前事件涉及的属性值\",{\"1\":{\"9429\":1}}],[\"获取当前事件涉及的属性名\",{\"1\":{\"9427\":1}}],[\"获取当前basedao的子类继承的父类中的泛型\",{\"1\":{\"8201\":1}}],[\"获取当前连接的隔离级别\",{\"1\":{\"8162\":1}}],[\"获取当前隔离级别\",{\"0\":{\"8152\":1}}],[\"获取当前这条数据的各个字段值\",{\"1\":{\"8037\":1}}],[\"获取当前线程\",{\"1\":{\"5219\":1}}],[\"获取当前线程的名字\",{\"1\":{\"5209\":1}}],[\"获取当前对象的哈希值\",{\"1\":{\"4213\":1}}],[\"获取当前对象的所属类\",{\"1\":{\"4212\":1}}],[\"获取当前对象的类加载器\",{\"1\":{\"2144\":1}}],[\"获取当前时间距离1970\",{\"1\":{\"3457\":2}}],[\"获取当前属性的权限修饰符\",{\"1\":{\"2220\":1}}],[\"获取当前运行时类中声明为public的构造器\",{\"1\":{\"7128\":1,\"7129\":1}}],[\"获取当前运行时类中声明的所有方法\",{\"1\":{\"7103\":1}}],[\"获取当前运行时类中声明的所有权限的方法\",{\"1\":{\"2199\":1}}],[\"获取当前运行时类中声明的所有属性\",{\"1\":{\"2187\":1,\"7077\":1}}],[\"获取当前运行时类中声明的所有的构造器\",{\"1\":{\"2177\":1,\"7128\":1,\"7130\":1}}],[\"获取当前运行时类中的某一个方法的method对象\",{\"1\":{\"2202\":1,\"2206\":1}}],[\"获取当前运行时类及其所有父类中声明为public权限的方法\",{\"1\":{\"2196\":1,\"7100\":1}}],[\"获取当前运行时类及其父类中声明为public访问权限的属性\",{\"1\":{\"2184\":1,\"7071\":1}}],[\"获取当前运行时类的构造器对象组成的数组\",{\"1\":{\"2174\":1}}],[\"获取当前运行时类实现的所有接口\",{\"1\":{\"2161\":1}}],[\"获取当前文件上层文件目录的路径\",{\"1\":{\"1958\":1}}],[\"获取当前页\",{\"1\":{\"1241\":1}}],[\"获取文件服务器路径\",{\"0\":{\"9250\":1}}],[\"获取文件类型\",{\"0\":{\"9233\":1}}],[\"获取文件记录指针的当前位置\",{\"1\":{\"6497\":1}}],[\"获取文件长度\",{\"1\":{\"1961\":1}}],[\"获取文件的服务器路径\",{\"1\":{\"9262\":1}}],[\"获取文件的真实\",{\"1\":{\"9217\":1}}],[\"获取文件的名称\",{\"1\":{\"1955\":1}}],[\"获取文件的绝对路径\",{\"1\":{\"1949\":1}}],[\"获取文件路径\",{\"1\":{\"1952\":1}}],[\"获取信息\",{\"0\":{\"1947\":1}}],[\"获取包含当前时间的instant对象\",{\"1\":{\"1672\":1}}],[\"获取现在是一年中的第几天\",{\"1\":{\"1654\":1}}],[\"获取毫秒时间戳\",{\"1\":{\"1678\":1,\"2303\":1}}],[\"获取毫秒\",{\"1\":{\"1654\":1}}],[\"获取秒\",{\"1\":{\"1654\":1}}],[\"获取day\",{\"1\":{\"1654\":1}}],[\"获取mime类型\",{\"0\":{\"9225\":1},\"1\":{\"9215\":1}}],[\"获取minute\",{\"1\":{\"1654\":1}}],[\"获取matcher类的实例\",{\"1\":{\"2743\":1}}],[\"获取month\",{\"1\":{\"1654\":1}}],[\"获取ms时间戳\",{\"1\":{\"1610\":1}}],[\"获取year\",{\"1\":{\"1654\":1}}],[\"获取时间和日期信息\",{\"1\":{\"1653\":1}}],[\"获取日期\",{\"1\":{\"1611\":1}}],[\"获取\",{\"0\":{\"1428\":1,\"7998\":1},\"1\":{\"2139\":1,\"5060\":3,\"6632\":1,\"6633\":1,\"6999\":1,\"7146\":1}}],[\"获取总页数\",{\"1\":{\"1241\":1}}],[\"获取总条数\",{\"1\":{\"1241\":1}}],[\"获取德鲁伊对象为例\",{\"1\":{\"597\":1}}],[\"毫秒时间戳\",{\"1\":{\"1965\":1}}],[\"毫秒\",{\"1\":{\"1648\":1,\"5227\":1}}],[\"秒杀\",{\"1\":{\"5095\":1}}],[\"秒\",{\"1\":{\"1648\":1}}],[\"月\",{\"1\":{\"1648\":1}}],[\"年龄\",{\"1\":{\"7613\":1,\"7629\":1}}],[\"年\",{\"1\":{\"1648\":1}}],[\"纪念日等日期\",{\"1\":{\"1638\":1}}],[\"历史悠久的\",{\"1\":{\"1623\":1}}],[\"历史订单\",{\"1\":{\"1405\":1}}],[\"吸收了c的优点\",{\"1\":{\"2814\":1}}],[\"吸收了\",{\"1\":{\"1623\":1}}],[\"偏移性\",{\"1\":{\"1618\":1}}],[\"偏移值\",{\"1\":{\"1598\":1}}],[\"它对字段值的散列进行索引\",{\"1\":{\"10373\":1}}],[\"它还可以检测代码是否被篡改过\",{\"1\":{\"9479\":1}}],[\"它包含的方法如下\",{\"1\":{\"9368\":1,\"9387\":1,\"9406\":1,\"9423\":1}}],[\"它只识别扩展名\",{\"1\":{\"8850\":1}}],[\"它与resultsethandler组合在一起使用可以完成大部分的数据库操作\",{\"1\":{\"8349\":1}}],[\"它结合了c3p0\",{\"1\":{\"8253\":1}}],[\"它仅仅把数据库连接释放\",{\"1\":{\"8251\":1}}],[\"它允许应用程序重复使用一个现有的数据库连接\",{\"1\":{\"8228\":1}}],[\"它能容纳不同大小的数据\",{\"1\":{\"8066\":1}}],[\"它鼓励程序员写更干净的代码\",{\"1\":{\"7734\":1}}],[\"它帮你把迭代做了\",{\"1\":{\"7700\":1}}],[\"它可提供自动故障转移和数据冗余\",{\"1\":{\"10021\":1}}],[\"它可以近乎实时的存储\",{\"1\":{\"9835\":1}}],[\"它可以快速地储存\",{\"1\":{\"9828\":1}}],[\"它可以保存类型t的值\",{\"1\":{\"7732\":1}}],[\"它可以接收任意数量的参数\",{\"1\":{\"7582\":1}}],[\"它可以指定你希望对集合进行的操作\",{\"1\":{\"7544\":1}}],[\"它可安排在给定延迟后运行命令或者定期地执行\",{\"1\":{\"5510\":1}}],[\"它必须实现invoke方法\",{\"1\":{\"7268\":1}}],[\"它将维持加载\",{\"1\":{\"7035\":1}}],[\"它将允许我们向较旧的接口添加方法\",{\"1\":{\"4542\":1}}],[\"它保证数据可靠的传送\",{\"1\":{\"6918\":1}}],[\"它用于监听web应用程序中的servletcontext\",{\"1\":{\"9323\":1}}],[\"它用于区分同一物理计算机上的多个服务\",{\"1\":{\"6916\":1}}],[\"它用来指定\",{\"1\":{\"4959\":1,\"4963\":1}}],[\"它表示一条预编译过的\",{\"1\":{\"7929\":1}}],[\"它表示一个正则表达式模式中的语法错误\",{\"1\":{\"2667\":1}}],[\"它表示\",{\"1\":{\"6865\":1}}],[\"它从语言级上提供了对网络应用程序的支持\",{\"1\":{\"6640\":1}}],[\"它既可以作为runnable被线程执行\",{\"1\":{\"5477\":1}}],[\"它拥有与\",{\"1\":{\"5383\":1}}],[\"它实现了runnable接口中的run方法\",{\"1\":{\"5169\":1}}],[\"它会为程序预留4个字节的空间\",{\"1\":{\"5129\":1}}],[\"它会使用myannotation注解\",{\"1\":{\"5060\":1}}],[\"它会重复执行某段代码\",{\"1\":{\"3752\":1}}],[\"它所标注的内容\",{\"1\":{\"5042\":1}}],[\"它所标注的annotation将具有继承性\",{\"1\":{\"5039\":1}}],[\"它和我们通常的\",{\"1\":{\"4923\":1}}],[\"它继续被抛给这个调用方法的上层方法\",{\"1\":{\"4773\":1}}],[\"它不等同于对象本身\",{\"1\":{\"4634\":1}}],[\"它不声明返回值类型\",{\"1\":{\"3861\":1}}],[\"它是一个由字段和值对\",{\"1\":{\"10078\":1}}],[\"它是一种具体的uri\",{\"1\":{\"6866\":1,\"6910\":1}}],[\"它是java提供的一门动态web资源开发技术\",{\"1\":{\"8671\":1}}],[\"它是对jdbc的简单封装\",{\"1\":{\"8331\":1}}],[\"它是产生数据库连接的工厂\",{\"1\":{\"8250\":1}}],[\"它是软件的必要元素\",{\"1\":{\"5066\":1,\"5067\":1}}],[\"它是\",{\"1\":{\"4966\":1}}],[\"它是属于java\",{\"1\":{\"4244\":1}}],[\"它是通过用\",{\"1\":{\"1511\":1}}],[\"它就不是多态\",{\"1\":{\"4158\":1}}],[\"它具有与类相同的名称\",{\"1\":{\"3860\":1}}],[\"它的值除了使用基本的一些类型外\",{\"1\":{\"10078\":1}}],[\"它的值是java运行时环境根据类的内部细节自动生成的\",{\"1\":{\"6575\":1}}],[\"它的工作原理是计算机索引程序通过扫描文章中的每一个词\",{\"1\":{\"9866\":1}}],[\"它的强大之处就是可以把java中的对象写入到数据源中\",{\"1\":{\"6532\":1}}],[\"它的元素相当于类的成员变量\",{\"1\":{\"3514\":1}}],[\"它的功能是结束一个方法\",{\"1\":{\"3438\":1}}],[\"它返回一个\",{\"1\":{\"2665\":1}}],[\"它们会将该关键字即索引匹配到的所有网页返回\",{\"1\":{\"9852\":1}}],[\"它们都是根据网页中的关键字生成索引\",{\"1\":{\"9852\":1}}],[\"它们之间最大的区别\",{\"1\":{\"9670\":1}}],[\"它们就关闭connection\",{\"1\":{\"8340\":1}}],[\"它们在几乎每个方面都是相同的\",{\"1\":{\"5151\":1}}],[\"它们计算的是操作数的值之间的关系\",{\"1\":{\"4220\":1}}],[\"它们的调用地址在编译期就绑定了\",{\"1\":{\"4157\":1}}],[\"它们的实例是不可变的对象\",{\"1\":{\"1634\":1}}],[\"它们提供了简单的本地日期或时间\",{\"1\":{\"1634\":1}}],[\"它们面临的问题是\",{\"1\":{\"1616\":1}}],[\"待更新的文档\",{\"1\":{\"10277\":1}}],[\"待补充的内容\",{\"1\":{\"8656\":1}}],[\"待匹配的字符串\",{\"1\":{\"2747\":1}}],[\"待匹配的charsequence\",{\"1\":{\"2746\":1}}],[\"待添加的集合\",{\"1\":{\"2543\":1}}],[\"待添加的集合元素\",{\"1\":{\"2536\":1}}],[\"待排序的list\",{\"1\":{\"2490\":1}}],[\"待插入的内容\",{\"1\":{\"1599\":1}}],[\"待封装的数据\",{\"0\":{\"515\":1}}],[\"能约束更复杂的内容\",{\"1\":{\"9637\":1}}],[\"能简单看懂约束文档即可\",{\"1\":{\"9628\":1}}],[\"能从网络上读取数据\",{\"1\":{\"6895\":1}}],[\"能用集合就用集合\",{\"1\":{\"5539\":1}}],[\"能用于修饰哪些程序元素\",{\"1\":{\"4988\":1}}],[\"能指定参数\",{\"1\":{\"5045\":1}}],[\"能够做全文索引和搜寻\",{\"1\":{\"9837\":1}}],[\"能够在xml中引入约束文档\",{\"1\":{\"9628\":1}}],[\"能够对jar文件进行数字签名\",{\"1\":{\"9487\":1}}],[\"能够对程序的状态作统一的管理\",{\"1\":{\"4745\":1}}],[\"能够识别签名的工具就可以有选择地为您授予软件安全特权\",{\"1\":{\"9479\":1}}],[\"能够大大减少编码量\",{\"1\":{\"8349\":1}}],[\"能够解析\",{\"1\":{\"6209\":1}}],[\"能够基于springboot实现基础ssm框架整合\",{\"1\":{\"295\":1}}],[\"能不能\",{\"1\":{\"4483\":1}}],[\"能继承\",{\"1\":{\"4029\":1}}],[\"能新建\",{\"1\":{\"1941\":1,\"6112\":1}}],[\"能存储的最大整型值为2\",{\"1\":{\"1866\":1}}],[\"能自动转为string类型的数据类型都可以作为参数\",{\"1\":{\"1583\":1}}],[\"改\",{\"1\":{\"10653\":1}}],[\"改为其他方式解析\",{\"1\":{\"9081\":1}}],[\"改为80就不用输入端口号了\",{\"1\":{\"8602\":1}}],[\"改成文件\",{\"1\":{\"6460\":1}}],[\"改进的方案\",{\"1\":{\"5353\":1}}],[\"改善程序结构\",{\"1\":{\"5104\":1}}],[\"改变线程的优先级\",{\"1\":{\"5247\":1}}],[\"改变bigdecimal值的精度时\",{\"1\":{\"1904\":1}}],[\"改变bigdecimal值的精度\",{\"1\":{\"1902\":1}}],[\"改变stringbuffer内容的方法\",{\"1\":{\"1571\":1}}],[\"改完程序需要到浏览器上去调试\",{\"1\":{\"565\":1}}],[\"三高\",{\"1\":{\"10028\":1}}],[\"三层架构的每一层都有特有的包名称\",{\"1\":{\"9566\":1}}],[\"三层架构是将我们的项目分成了三个层面\",{\"1\":{\"9557\":1}}],[\"三层架构\",{\"0\":{\"9554\":1},\"1\":{\"9555\":1,\"9579\":2,\"9581\":1}}],[\"三大组件\",{\"1\":{\"9314\":1}}],[\"三次对话\",{\"1\":{\"6747\":1}}],[\"三次握手\",{\"1\":{\"6732\":1,\"8413\":1}}],[\"三种角色\",{\"0\":{\"10454\":1}}],[\"三种线程安全方式的优先使用顺序\",{\"0\":{\"5402\":1}}],[\"三种创建字符串方式的选择\",{\"0\":{\"1567\":1}}],[\"三元运算符与if\",{\"0\":{\"3323\":1}}],[\"三元运算符是可以嵌套使用的\",{\"1\":{\"3321\":1}}],[\"三元运算符的嵌套\",{\"0\":{\"3320\":1}}],[\"三元运算符的结果是要被变量接收的\",{\"1\":{\"3318\":1}}],[\"三元运算符\",{\"0\":{\"3312\":1}}],[\"三参\",{\"0\":{\"2056\":1}}],[\"三个放在一起执行的时候\",{\"1\":{\"10340\":1}}],[\"三个方法是定义在java\",{\"1\":{\"5455\":1}}],[\"三个方法的调用者必须是同步代码块或同步方法中的同步监视器\",{\"1\":{\"5454\":1}}],[\"三个方法必须使用在同步代码块或同步方法中\",{\"1\":{\"5453\":1}}],[\"三个线程交替输出100\",{\"1\":{\"5265\":1}}],[\"三个位加起来作为一个位\",{\"1\":{\"3198\":1}}],[\"三个码的意义\",{\"1\":{\"3191\":1}}],[\"三个类的方法都是类似的\",{\"1\":{\"1636\":1}}],[\"三个地方\",{\"1\":{\"1073\":1}}],[\"耗时大致分别为\",{\"1\":{\"1563\":1}}],[\"源\",{\"1\":{\"6738\":1}}],[\"源文件路径等中有不存在的路径时的警告\",{\"1\":{\"5053\":1}}],[\"源文件还在\",{\"1\":{\"2890\":1}}],[\"源码中的一些重要常量\",{\"0\":{\"5884\":1}}],[\"源码简介\",{\"0\":{\"5677\":1}}],[\"源码\",{\"0\":{\"7988\":1},\"1\":{\"4231\":1,\"8426\":1}}],[\"源码分析\",{\"0\":{\"1553\":1,\"5644\":1,\"5882\":1}}],[\"源代码选择了行尾风格\",{\"1\":{\"2994\":1}}],[\"源集合没有变化\",{\"1\":{\"2568\":1}}],[\"源集合改变了\",{\"1\":{\"2546\":1}}],[\"源字符串没有变化\",{\"1\":{\"1464\":1}}],[\"线程需要完成的操作\",{\"1\":{\"5517\":1}}],[\"线程没有任务时最多保持多长时间后会终止\",{\"1\":{\"5498\":1}}],[\"线程池工具类\",{\"0\":{\"5505\":1}}],[\"线程池接口\",{\"0\":{\"5500\":1}}],[\"线程池的优点\",{\"0\":{\"5492\":1}}],[\"线程池介绍\",{\"0\":{\"5488\":1}}],[\"线程池\",{\"0\":{\"5465\":1,\"5487\":1}}],[\"线程通信涉及到的方法\",{\"0\":{\"5436\":1}}],[\"线程2\",{\"1\":{\"5429\":1,\"5435\":1,\"5463\":1}}],[\"线程在获得一个锁l1的情况下再去申请另外一个锁l2\",{\"1\":{\"5424\":1}}],[\"线程尝试获取锁的时候加上一定的时限\",{\"1\":{\"5413\":1}}],[\"线程开始访问共享资源之前应先获得lock对象\",{\"1\":{\"5379\":1}}],[\"线程执行同步代码块时\",{\"1\":{\"5371\":1}}],[\"线程执行同步代码块或同步方法时\",{\"1\":{\"5370\":1}}],[\"线程执行控制\",{\"0\":{\"5220\":1}}],[\"线程就不会结束\",{\"1\":{\"5345\":1}}],[\"线程安全问题代码示例\",{\"0\":{\"5309\":1}}],[\"线程安全问题\",{\"0\":{\"5296\":1,\"8753\":1}}],[\"线程安全的\",{\"1\":{\"1551\":1,\"5642\":1,\"5837\":1}}],[\"线程完成了它的全部工作或线程被提前强制性地中止或出现异常导致结束\",{\"1\":{\"5292\":1}}],[\"线程是有生命周期\",{\"1\":{\"5285\":1}}],[\"线程代码存在接口的实现类的run方法\",{\"1\":{\"5280\":1}}],[\"线程代码存放thread子类run方法中\",{\"1\":{\"5279\":1}}],[\"线程调度示例\",{\"0\":{\"5251\":1}}],[\"线程创建时继承父线程的优先级\",{\"1\":{\"5249\":1}}],[\"线程a\",{\"1\":{\"5225\":1}}],[\"线程a才结束阻塞状态\",{\"1\":{\"5212\":1}}],[\"线程插队\",{\"1\":{\"5224\":1}}],[\"线程1\",{\"1\":{\"5219\":1,\"5428\":1,\"5435\":1,\"5463\":1}}],[\"线程名是个静态属性\",{\"1\":{\"5217\":1}}],[\"线程名\",{\"0\":{\"5216\":1}}],[\"线程体\",{\"0\":{\"5171\":1}}],[\"线程的通信实例\",{\"0\":{\"5462\":1}}],[\"线程的通信指的是多个线程之间的交流\",{\"1\":{\"5434\":1}}],[\"线程的通信\",{\"0\":{\"5433\":1}}],[\"线程的死锁\",{\"0\":{\"5404\":1}}],[\"线程的安全问题概述\",{\"0\":{\"5297\":1}}],[\"线程的生命周期图解\",{\"0\":{\"5293\":1}}],[\"线程的5种状态\",{\"0\":{\"5286\":1}}],[\"线程的默认优先级为\",{\"1\":{\"5253\":1}}],[\"线程的优先级被修改为\",{\"1\":{\"5253\":1}}],[\"线程的优先级\",{\"0\":{\"5240\":1}}],[\"线程的调度\",{\"0\":{\"5232\":1}}],[\"线程的分类\",{\"0\":{\"5149\":1}}],[\"线程的概念\",{\"0\":{\"5077\":1}}],[\"线程\",{\"1\":{\"5081\":1}}],[\"线程切换的开销小\",{\"1\":{\"5079\":1}}],[\"线程作为调度和执行的单位\",{\"1\":{\"5079\":1}}],[\"线程状态\",{\"1\":{\"4825\":1}}],[\"线程不安全\",{\"1\":{\"4432\":1}}],[\"线程不安全的\",{\"1\":{\"1552\":1,\"5635\":1,\"5699\":1,\"5815\":1}}],[\"存入到一个map集合中\",{\"0\":{\"9016\":1}}],[\"存取数据时\",{\"1\":{\"5841\":1}}],[\"存在一定的区别\",{\"1\":{\"10116\":1}}],[\"存在服务器端\",{\"1\":{\"9789\":1}}],[\"存在的问题\",{\"0\":{\"8218\":1}}],[\"存在sql注入问题\",{\"0\":{\"7890\":1}}],[\"存在拼串操作\",{\"0\":{\"7888\":1}}],[\"存在缓冲区中\",{\"1\":{\"6315\":1}}],[\"存在于内存中可读\",{\"1\":{\"5112\":1}}],[\"存在和消亡的过程\",{\"1\":{\"5069\":1}}],[\"存在方法区的静态域中\",{\"1\":{\"4385\":1}}],[\"存放filter类\",{\"1\":{\"9267\":1}}],[\"存放fragment\",{\"1\":{\"4602\":1}}],[\"存放到list里\",{\"1\":{\"8373\":1}}],[\"存放学生的成绩\",{\"1\":{\"5964\":1}}],[\"存放通用配置\",{\"1\":{\"836\":1}}],[\"存储结构\",{\"0\":{\"10047\":1}}],[\"存储所有接入的智能设备信息\",{\"1\":{\"10037\":1}}],[\"存储订单信息\",{\"1\":{\"10036\":1}}],[\"存储游戏用户信息\",{\"1\":{\"10035\":1}}],[\"存储用户信息\",{\"1\":{\"10034\":1,\"10038\":1}}],[\"存储时间\",{\"1\":{\"9796\":1}}],[\"存储位置\",{\"1\":{\"9793\":1}}],[\"存储数据的概念进行一个类比\",{\"1\":{\"9912\":1}}],[\"存储数据\",{\"1\":{\"9124\":1,\"9207\":1,\"9726\":1,\"10120\":1}}],[\"存储过程\",{\"1\":{\"7885\":1}}],[\"存储在内存中\",{\"1\":{\"7553\":1}}],[\"存储具体元素的集\",{\"1\":{\"5891\":1}}],[\"存储元素的数组\",{\"1\":{\"5890\":1}}],[\"存储key\",{\"1\":{\"5806\":1}}],[\"存储的数据在底层数组中并非按照数组索引的顺序添加\",{\"1\":{\"5693\":1}}],[\"存储的是当前匹配的各捕获组的first和last信息\",{\"1\":{\"2769\":1}}],[\"存储无序的\",{\"1\":{\"5546\":1,\"5687\":1}}],[\"存储有序的\",{\"1\":{\"5544\":1,\"5631\":1}}],[\"存储于\",{\"1\":{\"4967\":1}}],[\"存储于类对应的\",{\"1\":{\"4966\":1}}],[\"存储已被虚拟机加载的类信息\",{\"1\":{\"4635\":1}}],[\"存储\",{\"1\":{\"1550\":1,\"1551\":1,\"1552\":1}}],[\"初始值要写0\",{\"1\":{\"7708\":1}}],[\"初始值\",{\"1\":{\"4928\":1,\"7588\":1,\"7705\":1}}],[\"初始容量为16的字符串缓冲区\",{\"1\":{\"1545\":1}}],[\"初始化前的连接\",{\"0\":{\"10804\":1}}],[\"初始化副本集\",{\"0\":{\"10513\":1,\"10522\":1}}],[\"初始化方法\",{\"1\":{\"8766\":1}}],[\"初始化发生在显示调用init方法\",{\"1\":{\"8281\":1}}],[\"初始化数据库连接池时连接的数量\",{\"1\":{\"8263\":1}}],[\"初始化数组时\",{\"1\":{\"3525\":1}}],[\"初始化数组\",{\"0\":{\"3492\":1}}],[\"初始化驱动\",{\"1\":{\"7852\":1}}],[\"初始化需要处理异常\",{\"1\":{\"6238\":1}}],[\"初始化时的操作\",{\"1\":{\"9270\":1}}],[\"初始化时建立物理连接的个数\",{\"1\":{\"8281\":1}}],[\"初始化时\",{\"1\":{\"5659\":1}}],[\"初始化资源\",{\"1\":{\"4753\":1}}],[\"初始化类的信息\",{\"1\":{\"4557\":1}}],[\"初始化语句\",{\"1\":{\"3859\":1}}],[\"初始化和赋值同时进行\",{\"1\":{\"3500\":1}}],[\"初始化并分配空间\",{\"1\":{\"3486\":1}}],[\"初始化变量出了while循环以后\",{\"1\":{\"3405\":1}}],[\"初始化条件\",{\"1\":{\"3381\":1,\"3388\":1,\"3390\":1,\"3401\":1,\"3402\":1}}],[\"初始化值\",{\"1\":{\"3010\":1,\"3668\":1,\"3675\":1}}],[\"初始化\",{\"0\":{\"1096\":1,\"1198\":1,\"5854\":1,\"6237\":1,\"6270\":1,\"6296\":1,\"6541\":1,\"8756\":1,\"8765\":1},\"1\":{\"3417\":1,\"3496\":1,\"3659\":1,\"3856\":1}}],[\"区别\",{\"0\":{\"5278\":1},\"1\":{\"3408\":1}}],[\"区别于new\",{\"1\":{\"3210\":1}}],[\"区别是\",{\"1\":{\"1540\":1}}],[\"区域各位取反\",{\"1\":{\"3190\":1}}],[\"区级名称\",{\"1\":{\"1348\":1}}],[\"区级区划编号\",{\"1\":{\"1348\":1}}],[\"剩下的表示小数点\",{\"1\":{\"3105\":1}}],[\"剩下的全部都放到最后一个元素中\",{\"1\":{\"1527\":1,\"2703\":1,\"2759\":1}}],[\"剩下的就是调用对应api操作了\",{\"1\":{\"1027\":1}}],[\"错误跳转资源\",{\"1\":{\"9293\":1}}],[\"错误示例\",{\"1\":{\"6264\":1}}],[\"错误的\",{\"1\":{\"5996\":1}}],[\"错误的类型添加失败\",{\"1\":{\"5970\":1}}],[\"错误的字符集将解码错误\",{\"1\":{\"1506\":1}}],[\"错误消息的提示\",{\"1\":{\"4676\":1}}],[\"错误\",{\"0\":{\"4667\":1},\"1\":{\"9293\":1}}],[\"错误分析\",{\"1\":{\"3783\":1}}],[\"错误堆栈\",{\"1\":{\"878\":1}}],[\"转移\",{\"1\":{\"10825\":1}}],[\"转发访问资源\",{\"1\":{\"9292\":1}}],[\"转发\",{\"1\":{\"9170\":1,\"9291\":1}}],[\"转发是一次请求\",{\"1\":{\"9162\":1}}],[\"转发只能访问当前服务器下的资源\",{\"1\":{\"9161\":1}}],[\"转发地址栏路径不变\",{\"1\":{\"9160\":1}}],[\"转发的特点\",{\"1\":{\"9159\":1}}],[\"转发时\",{\"1\":{\"9118\":1}}],[\"转发时共享数据\",{\"0\":{\"9113\":1}}],[\"转发与重定向\",{\"0\":{\"9102\":1}}],[\"转变为以时间驱动的\",{\"1\":{\"7312\":1}}],[\"转成字符流操作更高效\",{\"1\":{\"6371\":1}}],[\"转化为链表\",{\"1\":{\"5888\":1}}],[\"转化为红黑树\",{\"1\":{\"5888\":1}}],[\"转换流的类\",{\"0\":{\"6366\":1}}],[\"转换流也是一种处理流\",{\"1\":{\"6364\":1}}],[\"转换流介绍\",{\"0\":{\"6362\":1}}],[\"转换流\",{\"0\":{\"6361\":1},\"1\":{\"6448\":1}}],[\"转换后可以进行运算了\",{\"1\":{\"4281\":1}}],[\"转换成了65\",{\"1\":{\"2042\":1}}],[\"转换成新的表示形式\",{\"1\":{\"1623\":1}}],[\"转换成字符串格式\",{\"1\":{\"1034\":1}}],[\"转型必须有父子关系\",{\"0\":{\"4197\":1}}],[\"转型的注意事项\",{\"0\":{\"4190\":1}}],[\"转型的条件\",{\"0\":{\"4175\":1}}],[\"转型\",{\"0\":{\"4168\":1}}],[\"转码\",{\"1\":{\"3133\":1,\"6372\":1}}],[\"转码就需要用到字符集了\",{\"1\":{\"3128\":1}}],[\"转义字符\",{\"1\":{\"3122\":1}}],[\"转为指定类型的数组\",{\"0\":{\"2445\":1}}],[\"转为object类型的数组\",{\"0\":{\"2443\":1}}],[\"转为其他六种基本数据类型\",{\"1\":{\"1849\":1}}],[\"转为string\",{\"1\":{\"1495\":1}}],[\"转为string是将所有char连接在一起\",{\"1\":{\"1491\":1}}],[\"转string\",{\"1\":{\"1495\":1}}],[\"转不同的数据类型\",{\"1\":{\"1484\":1}}],[\"右移\",{\"1\":{\"3308\":1}}],[\"右边选择tomcat\",{\"1\":{\"8579\":1}}],[\"右边选项中\",{\"1\":{\"8527\":1}}],[\"右边属于创建集合对象\",{\"1\":{\"6102\":1}}],[\"右边补0\",{\"1\":{\"3306\":1}}],[\"右边不参与运算\",{\"1\":{\"3297\":1}}],[\"右边参与运算\",{\"1\":{\"3296\":1}}],[\"右边都进行运算\",{\"1\":{\"3296\":1}}],[\"右边的大\",{\"1\":{\"1448\":1}}],[\"右键new时直接显示servlet\",{\"1\":{\"8733\":1}}],[\"右键librarys中的servlet\",{\"1\":{\"8699\":1}}],[\"右键jar包文件\",{\"1\":{\"7828\":1}}],[\"右键\",{\"1\":{\"374\":1,\"1113\":1}}],[\"左移\",{\"1\":{\"3306\":1}}],[\"左边补位\",{\"1\":{\"3308\":1}}],[\"左边无论真假\",{\"1\":{\"3296\":1}}],[\"左边的大\",{\"1\":{\"1447\":1}}],[\"左键\",{\"1\":{\"393\":1}}],[\"浏览\",{\"1\":{\"1406\":1}}],[\"浏览器是通过http协议向elasticsearch服务器发送请求的\",{\"1\":{\"9904\":1}}],[\"浏览器再次请求时\",{\"1\":{\"9768\":1}}],[\"浏览器对于单个cookie\",{\"1\":{\"9736\":1}}],[\"浏览器会根据http协议\",{\"1\":{\"9703\":1}}],[\"浏览器会发送http请求到后台服务器\",{\"1\":{\"8889\":1}}],[\"浏览器和服务器之间使用的是http请求来进行数据传输\",{\"1\":{\"9667\":1}}],[\"浏览器和服务器就可以继续使用该会话进行请求发送和响应\",{\"1\":{\"9656\":1}}],[\"浏览器关闭\",{\"1\":{\"9203\":1}}],[\"浏览器使用\",{\"1\":{\"9165\":1}}],[\"浏览器地址栏发生变化\",{\"1\":{\"9151\":1}}],[\"浏览器地址栏路径不发生变化\",{\"1\":{\"9126\":1}}],[\"浏览器输入\",{\"1\":{\"9147\":1}}],[\"浏览器接收到响应状态码为302就会重新发送请求到location对应的访问地址去访问资源b\",{\"1\":{\"9135\":1}}],[\"浏览器接收响应\",{\"1\":{\"8886\":1}}],[\"浏览器发送请求\",{\"1\":{\"9564\":1}}],[\"浏览器发送请求给服务器\",{\"1\":{\"9105\":1,\"9133\":1}}],[\"浏览器发http\",{\"1\":{\"8719\":1}}],[\"浏览器页面上显示\",{\"1\":{\"9078\":1,\"9084\":1}}],[\"浏览器访问\",{\"1\":{\"9078\":1,\"9084\":1}}],[\"浏览器访问服务器时\",{\"1\":{\"8674\":1}}],[\"浏览器在发送get请求的时候是没有请求体的\",{\"1\":{\"8975\":1}}],[\"浏览器最终解析结果\",{\"1\":{\"8898\":1}}],[\"浏览器中输入url地址\",{\"1\":{\"8709\":1}}],[\"浏览器通过解析给定的\",{\"1\":{\"6867\":1}}],[\"浏览器可能没有传递条件\",{\"1\":{\"1254\":1}}],[\"浏览器\",{\"0\":{\"9702\":1},\"1\":{\"1197\":1,\"9155\":1,\"9676\":1,\"9763\":1,\"9768\":1}}],[\"浏览器也返回了指定的文本\",{\"1\":{\"378\":1}}],[\"微信\",{\"1\":{\"1404\":1,\"4823\":1}}],[\"微服务\",{\"0\":{\"9528\":1},\"1\":{\"21\":1}}],[\"登录主节点\",{\"1\":{\"10765\":1}}],[\"登录主节点进行读写操作\",{\"1\":{\"10602\":1}}],[\"登录后的权限\",{\"0\":{\"10748\":1}}],[\"登录时进行验证\",{\"0\":{\"10745\":1}}],[\"登录\",{\"1\":{\"1397\":1,\"1404\":1}}],[\"原来用\",{\"1\":{\"7732\":1}}],[\"原来的元素在数组中\",{\"1\":{\"5745\":1}}],[\"原料准备\",{\"1\":{\"7221\":1}}],[\"原理\",{\"1\":{\"7193\":1,\"7211\":1,\"7290\":1,\"10763\":1}}],[\"原理和使用\",{\"0\":{\"6311\":1}}],[\"原则\",{\"1\":{\"5410\":1}}],[\"原\",{\"1\":{\"3192\":3}}],[\"原码\",{\"0\":{\"3186\":1},\"1\":{\"3188\":1}}],[\"原因是他们都内置了map集合\",{\"1\":{\"9180\":1}}],[\"原因如下\",{\"1\":{\"5275\":1}}],[\"原因未知\",{\"1\":{\"2003\":1,\"2006\":1,\"2009\":1}}],[\"原因\",{\"1\":{\"1873\":1,\"3325\":1,\"3376\":1,\"5827\":1,\"6049\":1,\"8446\":1,\"8454\":1,\"9900\":1,\"10865\":1}}],[\"原型图\",{\"0\":{\"1386\":1}}],[\"原始工程依赖的jar包\",{\"1\":{\"736\":1}}],[\"原始工程内容\",{\"1\":{\"736\":1}}],[\"系统超级用户\",{\"1\":{\"10706\":1}}],[\"系统\",{\"0\":{\"9872\":1}}],[\"系统资源会被毫无顾及的分配出去\",{\"1\":{\"8223\":1}}],[\"系统资源的竞争\",{\"0\":{\"5418\":1}}],[\"系统类加载器\",{\"1\":{\"7039\":1,\"7043\":1}}],[\"系统不保证udp数据报一定能够安全送到目的地\",{\"1\":{\"6829\":1}}],[\"系统不需要为一个不执行的程序创建进程\",{\"1\":{\"5074\":1}}],[\"系统也进行了判断\",{\"1\":{\"5300\":1}}],[\"系统进行if判断\",{\"1\":{\"5300\":1}}],[\"系统在运行时会为每个进程分配不同的内存区域\",{\"1\":{\"5071\":1}}],[\"系统自动生成的异常对象\",{\"1\":{\"4690\":1,\"4791\":1}}],[\"系统就不再提供默认的空参构造器\",{\"1\":{\"3873\":1}}],[\"系统默认导入\",{\"1\":{\"9495\":1}}],[\"系统默认提供\",{\"1\":{\"3865\":1}}],[\"系统默认的舍入策略不是四舍五入\",{\"1\":{\"1904\":1}}],[\"系统首先自动将所有数据转换成容量最大的那种数据类型\",{\"1\":{\"3153\":1}}],[\"系统中常见的属性名以及属性的作用如下表所示\",{\"1\":{\"2313\":1}}],[\"系统级的很多属性和控制方法都放置在该类的内部\",{\"1\":{\"2298\":1}}],[\"系统管理后台\",{\"1\":{\"1384\":1}}],[\"系统架构\",{\"1\":{\"229\":1}}],[\"定为不同\",{\"1\":{\"10118\":1}}],[\"定位\",{\"0\":{\"10117\":1}}],[\"定位主机上的特定的应用\",{\"1\":{\"6646\":1}}],[\"定制排序\",{\"0\":{\"5791\":1,\"5914\":1,\"7671\":1},\"1\":{\"1736\":1,\"2499\":1,\"2504\":1,\"5792\":1}}],[\"定制的一款软件产品\",{\"1\":{\"1383\":1}}],[\"定义session的有效期\",{\"0\":{\"9772\":1}}],[\"定义student元素\",{\"1\":{\"9642\":1}}],[\"定义string正则表达式\",{\"1\":{\"2747\":1}}],[\"定义元素\",{\"1\":{\"9640\":1}}],[\"定义当前类操作的orm类名\",{\"1\":{\"8187\":1}}],[\"定义orm类的属性\",{\"0\":{\"8186\":1}}],[\"定义文件路径时\",{\"1\":{\"6228\":1}}],[\"定义父子类\",{\"1\":{\"6094\":1}}],[\"定义方法\",{\"1\":{\"6078\":1,\"6081\":1}}],[\"定义方法时\",{\"1\":{\"3742\":1}}],[\"定义一个page2\",{\"1\":{\"9184\":1}}],[\"定义一个类\",{\"1\":{\"8703\":1,\"9444\":1}}],[\"定义一个衣服工厂接口clothfactory\",{\"1\":{\"7218\":1}}],[\"定义一个方法\",{\"1\":{\"6075\":1}}],[\"定义一个泛型\",{\"1\":{\"5999\":1}}],[\"定义一个接口\",{\"1\":{\"4872\":1}}],[\"定义泛型类\",{\"0\":{\"5998\":1},\"1\":{\"6001\":1}}],[\"定义配置文件\",{\"0\":{\"5919\":1}}],[\"定义时的警告\",{\"1\":{\"5054\":1}}],[\"定义时必须使用双引号\",{\"1\":{\"3203\":1}}],[\"定义数组形式的成员变量\",{\"1\":{\"5018\":1}}],[\"定义数据模型封装yaml文件中对应的数据\",{\"1\":{\"519\":1}}],[\"定义成数组的形式\",{\"1\":{\"5015\":1}}],[\"定义为documented的注解必须设置retention值为runtime\",{\"1\":{\"5002\":1}}],[\"定义为spring管控的bean\",{\"1\":{\"519\":1,\"590\":1}}],[\"定义注解后\",{\"1\":{\"4923\":1}}],[\"定义四季\",{\"1\":{\"4871\":1}}],[\"定义枚举类\",{\"0\":{\"4870\":1}}],[\"定义了java类被浏览器访问到\",{\"1\":{\"8679\":1}}],[\"定义了用来访问数据库的标准java类库\",{\"1\":{\"7798\":1}}],[\"定义了存取一组对象的方法的集合\",{\"1\":{\"5543\":1,\"5630\":1}}],[\"定义了所有操作数据库的抽象方法\",{\"1\":{\"4515\":1}}],[\"定义了长\",{\"1\":{\"4513\":1}}],[\"定义了名称为arr的二维数组\",{\"1\":{\"3544\":1}}],[\"定义usb接口\",{\"1\":{\"4513\":1}}],[\"定义java类的语法格式\",{\"1\":{\"4498\":1}}],[\"定义在方法内\",{\"1\":{\"4310\":1}}],[\"定义在类里面和类的成员并列的\",{\"1\":{\"4307\":1}}],[\"定义的是一组规则\",{\"1\":{\"4482\":1}}],[\"定义的equals\",{\"1\":{\"4231\":1}}],[\"定义的时候是绝对路径\",{\"1\":{\"1952\":1}}],[\"定义\",{\"0\":{\"4041\":1,\"4300\":1,\"6030\":1,\"7441\":1},\"1\":{\"4141\":1,\"4152\":1,\"4971\":1}}],[\"定义变量的格式\",{\"1\":{\"3681\":1}}],[\"定义变量后\",{\"1\":{\"952\":1}}],[\"定义并初始化\",{\"1\":{\"3630\":1}}],[\"定义并用运算符new为之分配空间后\",{\"1\":{\"3502\":1}}],[\"定义float类型变量时\",{\"1\":{\"3098\":1}}],[\"定义正则表达式\",{\"1\":{\"2683\":1}}],[\"定义mybatisplus拦截器\",{\"1\":{\"1234\":1}}],[\"定义多个配置文件\",{\"0\":{\"834\":1}}],[\"饭店\",{\"1\":{\"1383\":1}}],[\"餐厅\",{\"1\":{\"1383\":1}}],[\"瑞吉外卖后台\",{\"1\":{\"1388\":1}}],[\"瑞吉外卖前台\",{\"1\":{\"1387\":1}}],[\"瑞吉外卖\",{\"0\":{\"10880\":1},\"1\":{\"1381\":1,\"1383\":1}}],[\"访问结果如下\",{\"1\":{\"9894\":1}}],[\"访问web服务器的资源\",{\"1\":{\"9652\":1}}],[\"访问所有资源时\",{\"1\":{\"9286\":1}}],[\"访问所有资源\",{\"1\":{\"9285\":1}}],[\"访问后缀名为jsp的资源\",{\"1\":{\"9284\":1}}],[\"访问后台\",{\"1\":{\"1378\":1}}],[\"访问src目录的路径为\",{\"1\":{\"9260\":1}}],[\"访问servlet实现类\",{\"0\":{\"8708\":1},\"1\":{\"8693\":1}}],[\"访问servlet\",{\"0\":{\"376\":1}}],[\"访问\",{\"1\":{\"8943\":1,\"9283\":1}}],[\"访问路径http\",{\"1\":{\"8848\":1,\"8854\":1,\"8857\":1}}],[\"访问路径\",{\"1\":{\"8843\":1}}],[\"访问该servlet\",{\"1\":{\"8709\":1}}],[\"访问前别忘了重启服务器\",{\"1\":{\"8694\":1}}],[\"访问测试\",{\"0\":{\"8622\":1,\"9890\":1}}],[\"访问项目\",{\"0\":{\"8467\":1},\"1\":{\"8478\":1}}],[\"访问地址是ip地址\",{\"1\":{\"8458\":1}}],[\"访问tomcat服务器\",{\"0\":{\"8457\":1}}],[\"访问数据信息的类和接口\",{\"1\":{\"8166\":1}}],[\"访问数组元素\",{\"0\":{\"3501\":1}}],[\"访问模式\",{\"1\":{\"6504\":1}}],[\"访问权限\",{\"1\":{\"6041\":1}}],[\"访问权限允许时\",{\"1\":{\"4373\":1}}],[\"访问的端口号\",{\"1\":{\"8602\":1}}],[\"访问的是父类的属性\",{\"1\":{\"4164\":1}}],[\"访问的就是继承来的\",{\"1\":{\"4035\":1}}],[\"访问时\",{\"1\":{\"4068\":1}}],[\"访问修饰符和static的顺序可以调换\",{\"1\":{\"4382\":1}}],[\"访问修饰符\",{\"0\":{\"4046\":1},\"1\":{\"4383\":1}}],[\"访问和操作都以方法的形式\",{\"1\":{\"3845\":1}}],[\"访问未初始化的数组\",{\"1\":{\"3591\":1}}],[\"访问外层数组元素\",{\"1\":{\"3562\":1}}],[\"把安全认证开关从原先的true都改成false\",{\"1\":{\"9901\":1}}],[\"把数据存入其中\",{\"1\":{\"9745\":1}}],[\"把数据保存到可掉电式存储设备中以供之后使用\",{\"1\":{\"7788\":1}}],[\"把编译好的class文件和manifest文件放入指定文件夹\",{\"1\":{\"9501\":1}}],[\"把这个\",{\"1\":{\"9487\":1}}],[\"把多个class文件进行打包\",{\"1\":{\"9471\":1}}],[\"把tomcat在获取流数据之前的编码设置为utf\",{\"1\":{\"9045\":1}}],[\"把分割后端数据\",{\"0\":{\"9016\":1}}],[\"把分布在不同地理区域的计算机与专门的外部设备用通信线路互连成一个规模大\",{\"1\":{\"6643\":1}}],[\"把获取到的内容进行分割\",{\"0\":{\"9013\":1}}],[\"把内容展示在浏览器给用户浏览\",{\"1\":{\"8898\":1}}],[\"把响应数据封装到response对象中\",{\"1\":{\"8896\":1}}],[\"把当前的一个项目重新部署到tomcat服务器上\",{\"1\":{\"8598\":1}}],[\"把当前字符序列逆转\",{\"1\":{\"1603\":1}}],[\"把war包自动发布到tomcat服务器上\",{\"1\":{\"8643\":1}}],[\"把war包发布到tomcat服务器上\",{\"1\":{\"8584\":1}}],[\"把while循环改成if判断\",{\"1\":{\"8062\":1}}],[\"把结果集中的每一行数据都转成一个数组\",{\"1\":{\"8371\":1}}],[\"把结果集中的第一行数据转成对象数组\",{\"1\":{\"8370\":1}}],[\"把真正的函数式编程风格引入到java中\",{\"1\":{\"7543\":1}}],[\"把复杂成份分解成一些简单的成份\",{\"1\":{\"6719\":1}}],[\"把标准输出流\",{\"1\":{\"6460\":1}}],[\"把基本操作组合到一起\",{\"1\":{\"4469\":1}}],[\"把该隐藏的隐藏起来\",{\"1\":{\"3813\":1}}],[\"把类构造成计算机能够识别和处理的数据结构\",{\"1\":{\"3610\":1}}],[\"把抽象的实体用计算机语言进行描述\",{\"1\":{\"3610\":1}}],[\"把前端的静态资源放在resource目录中\",{\"1\":{\"1375\":1}}],[\"把控进度\",{\"1\":{\"109\":1}}],[\"参生空指针异常\",{\"1\":{\"6251\":1}}],[\"参略等信息\",{\"1\":{\"2967\":1,\"2978\":1}}],[\"参考链接\",{\"1\":{\"2960\":1}}],[\"参考意义不大\",{\"1\":{\"1371\":1}}],[\"参与执行匹配的所有状态都驻留在匹配器中\",{\"1\":{\"2682\":1}}],[\"参数影响重大\",{\"1\":{\"10621\":1}}],[\"参数index指定要删除的索引\",{\"1\":{\"10410\":1}}],[\"参数ip地址字符串或域名字符串\",{\"1\":{\"6702\":1}}],[\"参数值的细节\",{\"1\":{\"9718\":1}}],[\"参数值的传递机制\",{\"0\":{\"3777\":1}}],[\"参数跟service一样\",{\"1\":{\"8912\":1}}],[\"参数与返回值\",{\"0\":{\"8057\":1}}],[\"参数与实例化方法的配合\",{\"1\":{\"1718\":1}}],[\"参数设计\",{\"0\":{\"7985\":1}}],[\"参数数据的对象\",{\"1\":{\"7592\":1}}],[\"参数s1\",{\"1\":{\"7489\":1}}],[\"参数都是一样的\",{\"1\":{\"7482\":1}}],[\"参数一样\",{\"1\":{\"7467\":1}}],[\"参数和返回值也都定义好了\",{\"1\":{\"7453\":1}}],[\"参数和返回值\",{\"1\":{\"7401\":1}}],[\"参数false表示关闭自动提交\",{\"1\":{\"8133\":1}}],[\"参数false\",{\"1\":{\"7189\":1}}],[\"参数true\",{\"1\":{\"7188\":1}}],[\"参数必须小于等于\",{\"1\":{\"6857\":1}}],[\"参数化类型\",{\"1\":{\"5947\":2}}],[\"参数即为comparator接口的实例\",{\"1\":{\"5915\":1}}],[\"参数声明\",{\"1\":{\"4961\":1}}],[\"参数将传递给main方法的\",{\"1\":{\"4614\":1}}],[\"参数名=参数值\",{\"1\":{\"6871\":2}}],[\"参数名称\",{\"1\":{\"6041\":1}}],[\"参数名\",{\"1\":{\"3792\":1,\"3793\":1,\"4593\":1}}],[\"参数赋给形参的是实参真实存储的数据值\",{\"1\":{\"3780\":1}}],[\"参数的重载方法\",{\"1\":{\"6353\":1}}],[\"参数的类型就是传入数据的类型\",{\"1\":{\"6032\":1}}],[\"参数的类型\",{\"1\":{\"3792\":1,\"3793\":1}}],[\"参数的数据类型\",{\"0\":{\"3773\":1}}],[\"参数的键值对格式为properties\",{\"1\":{\"771\":1}}],[\"参数传递\",{\"0\":{\"3768\":1}}],[\"参数传入一个线程不安全的集合\",{\"1\":{\"2517\":1}}],[\"参数列表传递给myinvocationhandle的invoke方法\",{\"1\":{\"7295\":1}}],[\"参数列表格式\",{\"1\":{\"6871\":1}}],[\"参数列表必须不同\",{\"1\":{\"3869\":1}}],[\"参数列表\",{\"1\":{\"3859\":1}}],[\"参数列表确定某一个指定的方法\",{\"1\":{\"3765\":1}}],[\"参数列表不同\",{\"1\":{\"3760\":1}}],[\"参数个数不同\",{\"1\":{\"3761\":1}}],[\"参数被消耗了\",{\"1\":{\"2632\":1,\"7429\":1}}],[\"参数集合的泛型必须与本集合的泛型相同或是子类\",{\"1\":{\"2591\":1}}],[\"参数集合还在\",{\"1\":{\"2546\":1}}],[\"参数集合也有的元素\",{\"1\":{\"2432\":1}}],[\"参数类型错误\",{\"1\":{\"6078\":1}}],[\"参数类型是\",{\"1\":{\"6077\":1}}],[\"参数类型是对象t\",{\"1\":{\"2638\":1,\"7433\":1}}],[\"参数类型不同\",{\"1\":{\"3762\":1}}],[\"参数类型\",{\"1\":{\"2208\":1,\"2944\":1,\"4593\":1,\"7165\":1,\"7351\":1}}],[\"参数类型可以为\",{\"1\":{\"1490\":1}}],[\"参数就是文件的路径\",{\"1\":{\"9253\":1}}],[\"参数就是流操作的数据源\",{\"1\":{\"7615\":1}}],[\"参数就是comparator接口的实例\",{\"1\":{\"5793\":1}}],[\"参数就是容量\",{\"1\":{\"5656\":1}}],[\"参数就是string类型的方法名\",{\"1\":{\"2203\":1}}],[\"参数就是string类型的属性名\",{\"1\":{\"2190\":1,\"2193\":1}}],[\"参数就是page对象\",{\"1\":{\"1239\":1}}],[\"参数同filewriter\",{\"1\":{\"2089\":1}}],[\"参数\",{\"0\":{\"2049\":1,\"2051\":1,\"10247\":1,\"10386\":1},\"1\":{\"2093\":1,\"2094\":1,\"2095\":1,\"2096\":1,\"2180\":1,\"2190\":1,\"2193\":1,\"2234\":1,\"2242\":1,\"2368\":1,\"2390\":1,\"4613\":1,\"4883\":1,\"4994\":1,\"7064\":1,\"7181\":1,\"7452\":1,\"7592\":1,\"7677\":1,\"8011\":1,\"9253\":1,\"10307\":1,\"10322\":1}}],[\"参数为自定义的日期时间格式\",{\"1\":{\"1721\":1}}],[\"参数是request类和response类\",{\"1\":{\"9273\":1}}],[\"参数是配置文件输入流\",{\"1\":{\"8260\":1}}],[\"参数是配置项名\",{\"1\":{\"507\":1}}],[\"参数是数字\",{\"1\":{\"8155\":1}}],[\"参数是comparator接口\",{\"1\":{\"7693\":1,\"7696\":1}}],[\"参数是charsequence\",{\"1\":{\"1695\":1}}],[\"参数是服务器端的ip和端口号\",{\"1\":{\"6803\":1}}],[\"参数是超时的时间\",{\"1\":{\"6710\":1}}],[\"参数是inputstream流\",{\"1\":{\"6384\":1}}],[\"参数是index\",{\"1\":{\"2558\":1}}],[\"参数是文件对象\",{\"1\":{\"6239\":1}}],[\"参数是常量或1~10\",{\"1\":{\"5247\":1}}],[\"参数是有顺序的\",{\"1\":{\"3762\":1}}],[\"参数是object类型会更通用\",{\"1\":{\"7279\":1}}],[\"参数是obj\",{\"1\":{\"2561\":1}}],[\"参数是number类型的子类\",{\"1\":{\"1822\":1}}],[\"参数是number类\",{\"1\":{\"1799\":1}}],[\"参数是string正则表达式\",{\"1\":{\"2716\":1}}],[\"参数是string\",{\"1\":{\"1723\":1}}],[\"参数是temporlaccessor\",{\"1\":{\"1691\":1}}],[\"参数是时间戳\",{\"1\":{\"1682\":1}}],[\"参数用来指定日期和时间\",{\"1\":{\"1650\":1}}],[\"参数3是舍入策略\",{\"1\":{\"1896\":1}}],[\"参数3\",{\"1\":{\"1594\":1,\"7261\":1,\"7273\":1}}],[\"参数可选\",{\"1\":{\"1502\":1}}],[\"参数可以是string类型的正则或者pattern类\",{\"1\":{\"2330\":1,\"2787\":1}}],[\"参数可以是double类型的数值\",{\"1\":{\"1878\":1}}],[\"参数可以是char\",{\"1\":{\"1491\":1}}],[\"参数可以是8种基本数据类型\",{\"1\":{\"1491\":1}}],[\"参数可以是字符串或代表字符串的变量\",{\"1\":{\"1475\":1}}],[\"参数也可以是引用数据类型\",{\"1\":{\"1491\":1}}],[\"参数2+\",{\"1\":{\"2208\":1}}],[\"参数2和3都可选的\",{\"1\":{\"1897\":1}}],[\"参数2是精度\",{\"1\":{\"1896\":1}}],[\"参数2可以是任意能转为string的数据类型\",{\"1\":{\"1601\":1}}],[\"参数2\",{\"1\":{\"1238\":1,\"1479\":1,\"1588\":1,\"1593\":1,\"1599\":1,\"2236\":1,\"2279\":1,\"2691\":1,\"2696\":1,\"2754\":1,\"2759\":1,\"6504\":1,\"7165\":1,\"7173\":1,\"7260\":1,\"7272\":1,\"7589\":1,\"7706\":1}}],[\"参数1\",{\"1\":{\"1237\":1,\"1478\":1,\"1587\":1,\"1592\":1,\"1598\":1,\"2207\":1,\"2235\":1,\"2278\":1,\"2690\":1,\"2695\":1,\"2753\":1,\"2758\":1,\"6503\":1,\"7164\":1,\"7172\":1,\"7259\":1,\"7271\":1,\"7588\":1,\"7705\":1}}],[\"关联nginx\",{\"1\":{\"8658\":1}}],[\"关联数组\",{\"1\":{\"5534\":1}}],[\"关联时\",{\"1\":{\"4960\":1}}],[\"关联\",{\"1\":{\"4947\":1,\"4949\":1,\"4952\":2,\"4955\":2,\"4960\":1,\"4963\":1}}],[\"关于compass的介绍见\",{\"1\":{\"10786\":1}}],[\"关于情况2和情况3\",{\"1\":{\"5866\":1}}],[\"关于是否释放同步监视器\",{\"1\":{\"5461\":1}}],[\"关于以上所有情况的警告\",{\"1\":{\"5056\":1}}],[\"关于元注解\",{\"1\":{\"5024\":1}}],[\"关于异常的产生\",{\"0\":{\"4790\":1}}],[\"关于静态属性和静态方法的使用\",{\"1\":{\"4403\":1}}],[\"关于父类中的属性\",{\"0\":{\"4066\":1}}],[\"关于子类是否能继承父类的private成员\",{\"1\":{\"4028\":1}}],[\"关于权限修饰符的不同\",{\"1\":{\"3690\":1}}],[\"关系型数据库难易应对\",{\"1\":{\"10026\":1}}],[\"关系型数据库搜索不是能很好的支持\",{\"1\":{\"9852\":1}}],[\"关系操作符\",{\"1\":{\"4220\":1}}],[\"关系表达式或逻辑表达式\",{\"1\":{\"3357\":1}}],[\"关系\",{\"0\":{\"9577\":1},\"1\":{\"3354\":1}}],[\"关键字对应的值就是包含该关键字的所有文档id\",{\"1\":{\"9959\":1}}],[\"关键字与文档的矩阵为\",{\"1\":{\"9938\":1}}],[\"关键字用于定义枚举类\",{\"1\":{\"4830\":1}}],[\"关键字修饰\",{\"1\":{\"4525\":1,\"4528\":1}}],[\"关键字是string\",{\"1\":{\"3212\":1}}],[\"关键字汇总\",{\"0\":{\"3051\":1}}],[\"关键字中所有字母都为小写\",{\"1\":{\"3050\":1}}],[\"关键字和保留字是被java\",{\"1\":{\"3049\":1}}],[\"关键字\",{\"0\":{\"3047\":1,\"3888\":1,\"9929\":1},\"1\":{\"9955\":1,\"9983\":1,\"9998\":1}}],[\"关闭mongodb\",{\"0\":{\"10751\":1}}],[\"关闭服务设计到权限验证\",{\"1\":{\"10166\":1}}],[\"关闭服务\",{\"0\":{\"10165\":1},\"1\":{\"10167\":1}}],[\"关闭服务器套接字和获取的客户端套接字\",{\"1\":{\"6819\":1}}],[\"关闭浏览器cookie就会消失\",{\"1\":{\"9771\":1}}],[\"关闭浏览器或服务器就失效\",{\"1\":{\"9721\":1}}],[\"关闭浏览器数据就会丢失\",{\"1\":{\"9195\":1}}],[\"关闭占用端口的软件\",{\"1\":{\"8451\":1}}],[\"关闭dos窗口\",{\"1\":{\"8439\":1}}],[\"关闭数据库连接资源和statement资源\",{\"1\":{\"8198\":1}}],[\"关闭连接\",{\"1\":{\"8148\":1}}],[\"关闭连接时\",{\"1\":{\"8143\":1}}],[\"关闭连接和statement的操作\",{\"0\":{\"7976\":1}}],[\"关闭连接资源\",{\"1\":{\"7943\":1}}],[\"关闭连接池\",{\"1\":{\"5504\":1,\"5515\":1,\"5517\":1}}],[\"关闭preparedstatement资源\",{\"1\":{\"7942\":1}}],[\"关闭通信套接字\",{\"1\":{\"6809\":1}}],[\"关闭serversocket\",{\"1\":{\"6809\":1}}],[\"关闭socket\",{\"1\":{\"6797\":1,\"6803\":1,\"6838\":1}}],[\"关闭此数据报套接字\",{\"1\":{\"6848\":1}}],[\"关闭此套接字也将会关闭该套接字的\",{\"1\":{\"6780\":1}}],[\"关闭此套接字\",{\"1\":{\"6780\":1}}],[\"关闭此输出流并释放与该流关联的所有系统资源\",{\"1\":{\"2111\":1}}],[\"关闭该流会自动关闭参数inputstream流\",{\"1\":{\"6396\":1}}],[\"关闭转换流\",{\"1\":{\"6396\":1}}],[\"关闭所有流\",{\"1\":{\"6353\":1}}],[\"关闭后不能再写出\",{\"1\":{\"6320\":1}}],[\"关闭最外层流也会相应关闭内层节点流\",{\"1\":{\"6340\":1}}],[\"关闭最外层流也\",{\"1\":{\"6318\":1}}],[\"关闭资源\",{\"1\":{\"6302\":1,\"6306\":1,\"6411\":1,\"6526\":1,\"8037\":1,\"8045\":1,\"8054\":1,\"8084\":1,\"8089\":1,\"8146\":1}}],[\"关闭\",{\"0\":{\"8436\":1},\"1\":{\"2075\":1}}],[\"关闭流的顺序和打开流的顺序相反\",{\"1\":{\"6318\":1,\"6340\":1}}],[\"关闭流资源\",{\"1\":{\"6287\":1}}],[\"关闭流都需要处理异常\",{\"1\":{\"6248\":1}}],[\"关闭流\",{\"0\":{\"6205\":1,\"6244\":1},\"1\":{\"2061\":1,\"2075\":1,\"6218\":1,\"6409\":1,\"6483\":1,\"6487\":1,\"6516\":1,\"6555\":1,\"6557\":1,\"6571\":1,\"6573\":1}}],[\"关闭热部署\",{\"0\":{\"578\":1}}],[\"关注点在后端\",{\"1\":{\"1367\":1}}],[\"支付时\",{\"1\":{\"5300\":2}}],[\"支付宝\",{\"1\":{\"4823\":1}}],[\"支付方式\",{\"1\":{\"1352\":1,\"4823\":1}}],[\"支持nosql和关系数据存储\",{\"1\":{\"10834\":1}}],[\"支持在集合中搜索字符串内容\",{\"1\":{\"10372\":1}}],[\"支持内嵌的文档对象和数组对象\",{\"1\":{\"10081\":1,\"10082\":1}}],[\"支持丰富的查询语言\",{\"1\":{\"10023\":1}}],[\"支持大量基于交互式文本的查询\",{\"1\":{\"9859\":1}}],[\"支持servlet\",{\"1\":{\"8416\":1}}],[\"支持多个接口\",{\"1\":{\"7260\":1}}],[\"支持多种文件格式\",{\"1\":{\"459\":1}}],[\"支持网间互连的数据通信\",{\"1\":{\"6729\":1}}],[\"支持只访问文件的部分内容\",{\"1\":{\"6492\":1}}],[\"支持泛型\",{\"1\":{\"5472\":1}}],[\"支持连续赋值\",{\"1\":{\"3266\":1}}],[\"支持unicode的忽略大小写\",{\"1\":{\"2727\":1}}],[\"支持lambda表达式的条件查询api\",{\"1\":{\"1251\":1}}],[\"支持二进制\",{\"1\":{\"486\":1}}],[\"支持科学计数法\",{\"1\":{\"486\":1}}],[\"支持\",{\"1\":{\"356\":1,\"10041\":1}}],[\"结合properties类\",{\"1\":{\"7048\":1}}],[\"结果说明ok\",{\"1\":{\"10574\":1}}],[\"结果解析\",{\"0\":{\"10542\":1,\"10555\":1}}],[\"结果的符号与被膜数的符号形同\",{\"1\":{\"3255\":1}}],[\"结果一定是个int类型\",{\"1\":{\"3252\":1}}],[\"结果\",{\"1\":{\"3176\":2,\"10379\":1}}],[\"结果必须为int型\",{\"1\":{\"3158\":1}}],[\"结果是偶数\",{\"1\":{\"1929\":1}}],[\"结尾\",{\"1\":{\"3080\":1,\"3098\":1,\"4853\":1}}],[\"结论\",{\"0\":{\"2921\":1,\"4651\":1,\"9803\":1},\"1\":{\"3211\":1,\"5760\":1,\"6360\":1,\"6747\":1,\"9123\":1}}],[\"结束tomcat的配置\",{\"1\":{\"8605\":1}}],[\"结束当前线程\",{\"1\":{\"5230\":1}}],[\"结束方法\",{\"1\":{\"3732\":1}}],[\"结束程序\",{\"1\":{\"3724\":1}}],[\"结束指定标识的一层循环结构当次循环\",{\"1\":{\"3444\":1}}],[\"结束指定标识的一层循环结构\",{\"1\":{\"3444\":1}}],[\"结束\",{\"1\":{\"2908\":1}}],[\"结束位置的index\",{\"1\":{\"1588\":1}}],[\"结账时间\",{\"1\":{\"1352\":1}}],[\"结构等封装到类中\",{\"1\":{\"3613\":1}}],[\"结构有三种格式\",{\"1\":{\"3342\":1}}],[\"结构\",{\"0\":{\"1541\":1,\"2396\":1,\"2453\":1,\"2475\":1,\"2524\":1,\"2573\":1,\"2711\":1,\"2764\":1},\"1\":{\"1208\":1,\"1868\":1,\"1875\":1,\"1942\":1,\"2030\":1,\"2069\":1,\"2216\":1,\"2251\":1,\"2300\":1,\"2319\":1,\"2350\":1,\"2776\":1}}],[\"购物车\",{\"1\":{\"1350\":1,\"1407\":1,\"9799\":1}}],[\"购物车表\",{\"0\":{\"1349\":1},\"1\":{\"1328\":1}}],[\"金额\",{\"1\":{\"1350\":1,\"1354\":1}}],[\"名字也基本一样\",{\"1\":{\"7596\":1}}],[\"名字\",{\"1\":{\"1354\":1,\"4864\":1}}],[\"名字随意\",{\"1\":{\"828\":1}}],[\"名称固定\",{\"1\":{\"8463\":1}}],[\"名称\",{\"1\":{\"1350\":1,\"2152\":1}}],[\"否\",{\"1\":{\"1348\":1}}],[\"否则取出来就有问题了\",{\"1\":{\"10255\":1}}],[\"否则千万不要在名字里出现$\",{\"1\":{\"10236\":1}}],[\"否则返回指定的other对象\",{\"1\":{\"7762\":1}}],[\"否则返回false\",{\"1\":{\"7676\":1,\"10238\":1}}],[\"否则返回本次读取的字符数\",{\"1\":{\"2057\":1}}],[\"否则返回本次实际读取的字符数\",{\"1\":{\"2046\":1}}],[\"否则抛异常\",{\"1\":{\"7669\":1}}],[\"否则报异常\",{\"1\":{\"6231\":1}}],[\"否则报错\",{\"1\":{\"3116\":1,\"3577\":1}}],[\"否则会报错\",{\"1\":{\"8852\":1,\"8853\":1}}],[\"否则会报\",{\"1\":{\"5437\":1}}],[\"否则就只能定义为抽象类\",{\"1\":{\"4507\":1}}],[\"否则就会允许接收任意object类进行比较\",{\"1\":{\"1769\":1}}],[\"否则内容不好追加\",{\"1\":{\"4435\":1}}],[\"否则难以同步\",{\"1\":{\"4434\":1}}],[\"否则一律转为false\",{\"1\":{\"4276\":1}}],[\"否则编译出错\",{\"1\":{\"4225\":1}}],[\"否则这种递归就变成了无穷递归\",{\"1\":{\"3752\":1}}],[\"否则\",{\"1\":{\"3356\":1,\"4501\":1,\"4758\":1,\"5454\":1,\"6575\":1,\"7598\":1,\"8222\":1}}],[\"否则以整数形式返回实际读取的字节数\",{\"1\":{\"2045\":1}}],[\"否则打包后无法正常执行程序\",{\"1\":{\"702\":1}}],[\"否则无法执行java命令\",{\"1\":{\"700\":1}}],[\"详情单\",{\"1\":{\"9473\":1}}],[\"详情\",{\"1\":{\"5763\":1}}],[\"详见idea\",{\"1\":{\"8503\":1}}],[\"详见流的基类\",{\"0\":{\"6269\":1},\"1\":{\"6277\":1,\"6299\":1}}],[\"详见单例模式\",{\"1\":{\"5347\":1}}],[\"详见thread的api\",{\"1\":{\"5204\":1}}],[\"详见jdk中的元注解\",{\"1\":{\"4925\":1}}],[\"详见jvm\",{\"1\":{\"3521\":1}}],[\"详见多线程\",{\"1\":{\"4215\":1,\"4216\":1,\"4217\":1}}],[\"详见集合\",{\"1\":{\"4213\":1}}],[\"详见异常\",{\"1\":{\"4054\":1}}],[\"详见封装\",{\"1\":{\"3670\":1,\"3719\":1}}],[\"详见\",{\"1\":{\"3247\":1,\"3594\":1,\"3750\":1,\"4414\":1,\"4432\":1,\"4628\":1,\"5564\":1,\"5579\":1,\"5681\":1,\"5722\":1,\"5843\":1,\"5931\":1,\"6147\":1,\"6220\":1,\"6226\":1,\"6295\":1,\"7004\":1,\"8129\":1,\"8489\":1,\"8557\":1,\"9205\":1,\"9534\":1,\"9808\":1,\"10166\":1,\"10187\":1,\"10599\":1}}],[\"详见oop\",{\"1\":{\"3244\":1}}],[\"详见restful规范\",{\"0\":{\"1284\":1}}],[\"详细配置\",{\"1\":{\"8657\":1}}],[\"详细看testwhileidle属性的说明\",{\"1\":{\"8310\":1}}],[\"详细看这里\",{\"1\":{\"8276\":1}}],[\"详细\",{\"1\":{\"4539\":1,\"4543\":1}}],[\"详细描述\",{\"1\":{\"2965\":1,\"2977\":1}}],[\"详细地址\",{\"1\":{\"1348\":1}}],[\"男\",{\"1\":{\"1348\":1,\"4821\":1}}],[\"女\",{\"1\":{\"1348\":1,\"4821\":1}}],[\"头像\",{\"1\":{\"1346\":1}}],[\"口味\",{\"1\":{\"1350\":1,\"1354\":1}}],[\"口味数据list\",{\"1\":{\"1344\":1}}],[\"口味名称\",{\"1\":{\"1344\":1}}],[\"排列\",{\"1\":{\"5718\":1}}],[\"排序方式取值1或\",{\"1\":{\"10389\":1}}],[\"排序方式\",{\"1\":{\"10337\":1,\"10388\":1}}],[\"排序方式可以是多个字段\",{\"1\":{\"10336\":1}}],[\"排序查询\",{\"0\":{\"10334\":1}}],[\"排序分为\",{\"1\":{\"5909\":1}}],[\"排序并非是返回一个新数组\",{\"1\":{\"2357\":1}}],[\"排序接口\",{\"0\":{\"1733\":1}}],[\"排序\",{\"0\":{\"1772\":1,\"5908\":1,\"7666\":1},\"1\":{\"1342\":1,\"2479\":1,\"2489\":1,\"7602\":1}}],[\"排除掉tomcat的starter后\",{\"1\":{\"447\":1}}],[\"份数\",{\"1\":{\"1342\":1}}],[\"停用\",{\"1\":{\"1340\":1}}],[\"停售\",{\"1\":{\"1338\":1,\"1401\":1}}],[\"起成对应的项目名称\",{\"1\":{\"8611\":1}}],[\"起始位置的index\",{\"1\":{\"1587\":1}}],[\"起售\",{\"1\":{\"1338\":1}}],[\"起步依赖\",{\"1\":{\"450\":1}}],[\"图解查询操作的流程\",{\"0\":{\"8030\":1}}],[\"图形化界面\",{\"1\":{\"2830\":1}}],[\"图形化处理\",{\"1\":{\"1177\":1}}],[\"图片等\",{\"1\":{\"9468\":1}}],[\"图片类型\",{\"1\":{\"9229\":1}}],[\"图片就打不开了\",{\"1\":{\"2101\":1,\"2106\":1}}],[\"图片\",{\"1\":{\"1338\":1,\"1340\":1,\"1350\":1,\"1354\":1}}],[\"商品码\",{\"1\":{\"1338\":1}}],[\"顺序流\",{\"0\":{\"7565\":1},\"1\":{\"7567\":1}}],[\"顺序结构\",{\"1\":{\"3332\":1}}],[\"顺序\",{\"1\":{\"1336\":1,\"1338\":1,\"5899\":1}}],[\"员工\",{\"1\":{\"1411\":1}}],[\"员工管理\",{\"1\":{\"1398\":1}}],[\"员工信息\",{\"1\":{\"1334\":1}}],[\"员工表\",{\"0\":{\"1333\":1},\"1\":{\"1312\":1}}],[\"状态\",{\"1\":{\"1334\":1,\"1340\":1,\"1346\":1,\"1402\":1,\"5285\":1,\"5444\":1}}],[\"身份证号\",{\"1\":{\"1334\":1,\"1346\":1}}],[\"手机号\",{\"1\":{\"1334\":1,\"1346\":1,\"1348\":1,\"1404\":1}}],[\"手动将副本从节点和仲裁从节点添加到副本集\",{\"1\":{\"10563\":1}}],[\"手动将buffer中内容写入文件\",{\"1\":{\"6319\":1}}],[\"手动销毁\",{\"0\":{\"9786\":1}}],[\"手动打\",{\"0\":{\"9497\":1}}],[\"手动实现httpservlet的逻辑\",{\"0\":{\"8815\":1}}],[\"手动添加方式\",{\"1\":{\"9517\":1}}],[\"手动添加\",{\"1\":{\"8700\":1}}],[\"手动部署\",{\"0\":{\"8456\":1}}],[\"手动提交数据\",{\"1\":{\"8126\":1}}],[\"手动遍历\",{\"0\":{\"5589\":1}}],[\"手动开启和关闭锁\",{\"1\":{\"5400\":1}}],[\"手动生成一个异常对象\",{\"1\":{\"4792\":1}}],[\"手动抛出异常对象\",{\"1\":{\"4803\":1}}],[\"手动抛出异常的意义\",{\"0\":{\"4793\":1}}],[\"手动抛出异常\",{\"0\":{\"4789\":1}}],[\"手动的生成一个异常对象\",{\"1\":{\"4691\":1}}],[\"手动写一个空参空方法体的构造器\",{\"1\":{\"4104\":1}}],[\"手动输出日志\",{\"0\":{\"953\":1}}],[\"手动使用idea进行build\",{\"1\":{\"552\":1}}],[\"手动启动热部署\",{\"0\":{\"547\":1}}],[\"手动编辑pom\",{\"1\":{\"365\":1}}],[\"手动创建一个maven工程\",{\"1\":{\"365\":1}}],[\"手动创建项目\",{\"0\":{\"363\":1}}],[\"密码认证方式\",{\"1\":{\"10640\":1}}],[\"密码学\",{\"1\":{\"5763\":1}}],[\"密码本不一样\",{\"1\":{\"3132\":1}}],[\"密码本\",{\"1\":{\"3128\":1}}],[\"密码\",{\"0\":{\"7847\":1},\"1\":{\"1334\":1,\"7840\":1,\"7892\":1,\"10721\":1}}],[\"姓名\",{\"1\":{\"1334\":1,\"1346\":1,\"7613\":1,\"7629\":1}}],[\"`web\",{\"1\":{\"8719\":1}}],[\"`remark`\",{\"1\":{\"1352\":1}}],[\"`order`\",{\"1\":{\"7991\":1}}],[\"`order\",{\"1\":{\"1352\":1,\"1354\":2}}],[\"`orders`\",{\"1\":{\"1352\":1}}],[\"`number`\",{\"1\":{\"1350\":1,\"1352\":1,\"1354\":1}}],[\"`name`\",{\"1\":{\"1334\":1,\"1336\":2,\"1338\":2,\"1340\":2,\"1342\":1,\"1344\":1,\"1346\":1,\"1350\":1,\"1354\":1}}],[\"`label`\",{\"1\":{\"1348\":1}}],[\"`amount`\",{\"1\":{\"1350\":1,\"1352\":1,\"1354\":1}}],[\"`address`\",{\"1\":{\"1352\":1}}],[\"`address\",{\"1\":{\"1348\":1,\"1352\":1}}],[\"`avatar`\",{\"1\":{\"1346\":1}}],[\"`value`\",{\"1\":{\"1344\":1}}],[\"`demo1`\",{\"1\":{\"8719\":1}}],[\"`detail`\",{\"1\":{\"1348\":1}}],[\"`description`\",{\"1\":{\"1338\":1,\"1340\":1}}],[\"`district\",{\"1\":{\"1348\":2}}],[\"`dish\",{\"1\":{\"1342\":1,\"1344\":2,\"1350\":2,\"1354\":2}}],[\"`dish`\",{\"1\":{\"1338\":1}}],[\"`is\",{\"1\":{\"1338\":1,\"1340\":1,\"1342\":1,\"1344\":1,\"1348\":2}}],[\"`image`\",{\"1\":{\"1338\":1,\"1340\":1,\"1350\":1,\"1354\":1}}],[\"`idx\",{\"1\":{\"1334\":1,\"1336\":1,\"1338\":1,\"1340\":1}}],[\"`id\",{\"1\":{\"1334\":1,\"1346\":1}}],[\"`id`\",{\"1\":{\"1334\":2,\"1336\":2,\"1338\":2,\"1340\":2,\"1342\":2,\"1344\":2,\"1346\":2,\"1348\":2,\"1350\":2,\"1352\":2,\"1354\":2}}],[\"`type`\",{\"1\":{\"1336\":1}}],[\"`checkout\",{\"1\":{\"1352\":1}}],[\"`city\",{\"1\":{\"1348\":2}}],[\"`consignee`\",{\"1\":{\"1348\":1,\"1352\":1}}],[\"`copies`\",{\"1\":{\"1342\":1}}],[\"`code`\",{\"1\":{\"1338\":1,\"1340\":1}}],[\"`category\",{\"1\":{\"1338\":1,\"1340\":1}}],[\"`category`\",{\"1\":{\"1336\":1}}],[\"`create\",{\"1\":{\"1334\":2,\"1336\":2,\"1338\":2,\"1340\":2,\"1342\":2,\"1344\":2,\"1348\":2,\"1350\":1}}],[\"`user\",{\"1\":{\"1348\":1,\"1350\":1,\"1352\":2}}],[\"`user`\",{\"1\":{\"1346\":1}}],[\"`username`\",{\"1\":{\"1334\":2}}],[\"`update\",{\"1\":{\"1334\":2,\"1336\":2,\"1338\":2,\"1340\":2,\"1342\":2,\"1344\":2,\"1348\":2}}],[\"`shopping\",{\"1\":{\"1350\":1}}],[\"`setmeal\",{\"1\":{\"1342\":2,\"1350\":1,\"1354\":1}}],[\"`setmeal`\",{\"1\":{\"1340\":1}}],[\"`sex`\",{\"1\":{\"1334\":1,\"1346\":1,\"1348\":1}}],[\"`sort`\",{\"1\":{\"1336\":1,\"1338\":1,\"1342\":1}}],[\"`status`\",{\"1\":{\"1334\":1,\"1338\":1,\"1340\":1,\"1346\":1,\"1352\":1}}],[\"`pay\",{\"1\":{\"1352\":1}}],[\"`password`\",{\"1\":{\"1334\":1}}],[\"`province\",{\"1\":{\"1348\":2}}],[\"`price`\",{\"1\":{\"1338\":1,\"1340\":1,\"1342\":1}}],[\"`phone`\",{\"1\":{\"1334\":1,\"1346\":1,\"1348\":1,\"1352\":1}}],[\"`employee`\",{\"1\":{\"1334\":1}}],[\"订单管理\",{\"1\":{\"1402\":1}}],[\"订单等进行管理维护\",{\"1\":{\"1384\":1}}],[\"订单id\",{\"1\":{\"1354\":1}}],[\"订单状态在运送过程中会不断更新\",{\"1\":{\"10036\":1}}],[\"订单状态\",{\"1\":{\"1352\":1,\"4824\":1}}],[\"订单号\",{\"1\":{\"1352\":1}}],[\"订单明细表\",{\"0\":{\"1353\":1},\"1\":{\"1332\":1,\"1354\":1}}],[\"订单表\",{\"0\":{\"1351\":1},\"1\":{\"1330\":1,\"1352\":1}}],[\"菜单\",{\"1\":{\"9505\":1}}],[\"菜单栏run\",{\"1\":{\"8576\":1}}],[\"菜单栏\",{\"1\":{\"553\":1}}],[\"菜品原价\",{\"1\":{\"1342\":1}}],[\"菜品id\",{\"1\":{\"1342\":1,\"1350\":1,\"1354\":1}}],[\"菜品管理\",{\"1\":{\"1338\":1,\"1400\":1}}],[\"菜品价格\",{\"1\":{\"1338\":1}}],[\"菜品名称\",{\"1\":{\"1338\":1,\"1342\":1}}],[\"菜品及套餐分类\",{\"1\":{\"1336\":1}}],[\"菜品分类id\",{\"1\":{\"1338\":1,\"1340\":1}}],[\"菜品分类\",{\"1\":{\"1336\":1}}],[\"菜品口味关系表\",{\"0\":{\"1343\":1},\"1\":{\"1322\":1,\"1344\":1}}],[\"菜品与套餐关系表\",{\"0\":{\"1341\":1},\"1\":{\"1320\":1}}],[\"菜品表\",{\"0\":{\"1337\":1},\"1\":{\"1316\":1}}],[\"菜品\",{\"1\":{\"1314\":1,\"1344\":1,\"1406\":1}}],[\"子依赖\",{\"1\":{\"10830\":1}}],[\"子集合是班级\",{\"1\":{\"7655\":1}}],[\"子文件路径\",{\"1\":{\"6139\":1}}],[\"子路径\",{\"1\":{\"6135\":1}}],[\"子线程默认名是\",{\"1\":{\"5189\":1}}],[\"子线程\",{\"1\":{\"5160\":1,\"5218\":1,\"5310\":1}}],[\"子句不能正常完成时的警告\",{\"1\":{\"5055\":1}}],[\"子转父\",{\"0\":{\"4176\":1}}],[\"子类的流上\",{\"1\":{\"6465\":1,\"6466\":1}}],[\"子类的方法将覆盖父类的方法\",{\"1\":{\"4043\":1}}],[\"子类或者子接口\",{\"1\":{\"6053\":1}}],[\"子类重写thread类的run\",{\"1\":{\"5180\":1}}],[\"子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型\",{\"1\":{\"4054\":1,\"4782\":1}}],[\"子类重写的方法的权限修饰符不小于父类被重写的方法的权限修饰符\",{\"1\":{\"4047\":1}}],[\"子类重写的方法的方法名和形参列表与父类被重写的方法的方法名和形参列表相同\",{\"1\":{\"4044\":1}}],[\"子类则可以继承父类类级别的注解\",{\"1\":{\"5006\":1}}],[\"子类一般不能重写\",{\"1\":{\"4469\":1}}],[\"子类必须重写父类中所有的抽象方法\",{\"1\":{\"4450\":1}}],[\"子类转父类\",{\"1\":{\"4172\":1}}],[\"子类特有的属性和方法不能调用\",{\"1\":{\"4169\":1}}],[\"子类实现可以随意更换\",{\"1\":{\"4167\":1}}],[\"子类实例化过程\",{\"0\":{\"4107\":1}}],[\"子类实例也会同样复制一份\",{\"1\":{\"4036\":1}}],[\"子类实例其实是\",{\"1\":{\"4030\":1}}],[\"子类中定义了与父类同名同参数的方法\",{\"1\":{\"4147\":1}}],[\"子类中的叫重写的方法\",{\"1\":{\"4043\":1}}],[\"子类对象才可以考虑进行调用\",{\"1\":{\"4112\":1}}],[\"子类对象访问继承来的属性和方法时\",{\"1\":{\"4035\":1}}],[\"子类调用父类同名方法\",{\"0\":{\"4081\":1}}],[\"子类调用父类同名属性\",{\"0\":{\"4078\":1}}],[\"子类可以选择保留泛型也可以选择指定泛型类型\",{\"1\":{\"6015\":1}}],[\"子类可以重写父类中的方法\",{\"1\":{\"4067\":1}}],[\"子类可以创建一个跟父类相同的方法\",{\"1\":{\"4043\":1}}],[\"子类无法覆盖父类的方法\",{\"1\":{\"4057\":1}}],[\"子类和父类可以同时使用\",{\"1\":{\"4088\":1}}],[\"子类和父类都声明了num这个属性\",{\"1\":{\"4080\":1}}],[\"子类和父类中的同名同参数的方法要么都声明为非static的\",{\"1\":{\"4056\":1}}],[\"子类和父类的关系\",{\"1\":{\"4007\":1}}],[\"子类不能重写父类中声明为private权限的方法\",{\"1\":{\"4048\":1}}],[\"子类不能直接访问父类中私有的\",{\"1\":{\"4015\":1}}],[\"子类继承父类private成员的测试\",{\"1\":{\"4039\":1}}],[\"子类继承父类以后\",{\"1\":{\"4007\":1,\"4020\":1,\"4109\":1}}],[\"子类继承了这些方法后\",{\"1\":{\"4038\":1}}],[\"子类访问父类中的private成员\",{\"0\":{\"4037\":1}}],[\"子类是一定会调用父类的构造器的\",{\"1\":{\"4103\":1}}],[\"子类是无法直接访问的\",{\"1\":{\"4036\":1}}],[\"子类是否能继承父类的private成员\",{\"0\":{\"4027\":1}}],[\"子类只能通过父类方法来访问父类中的private成员\",{\"1\":{\"4033\":1}}],[\"子类直接继承的父类\",{\"1\":{\"4019\":1}}],[\"子类父类是相对的概念\",{\"1\":{\"4018\":1}}],[\"子类a中就获取了父类b中声明的所有的属性和方法\",{\"1\":{\"4005\":1}}],[\"子类\",{\"1\":{\"4002\":1,\"4118\":1,\"4129\":1}}],[\"子包下的类\",{\"0\":{\"3962\":1}}],[\"子包名\",{\"1\":{\"3928\":1}}],[\"子目录为\",{\"1\":{\"1303\":1}}],[\"子项目手动引入所需的依赖\",{\"1\":{\"386\":1}}],[\"使其元素不超过给定数量\",{\"1\":{\"7621\":1}}],[\"使其在保存和传输时可被还原\",{\"1\":{\"6539\":1}}],[\"使其他任务在其被解锁之前\",{\"1\":{\"5358\":1}}],[\"使当前线程进入等待\",{\"1\":{\"5444\":1}}],[\"使别的线程可访问并修改共享资源\",{\"1\":{\"5439\":1}}],[\"使得所有服务的启动方式更优雅和统一\",{\"1\":{\"9530\":1}}],[\"使得进程在运行过程中\",{\"1\":{\"5419\":1}}],[\"使得不再需要在web\",{\"1\":{\"4897\":1}}],[\"使得程序员不必直接对协议进行操作\",{\"1\":{\"8397\":1}}],[\"使得程序在编译时就不再报错\",{\"1\":{\"4762\":1}}],[\"使得程序简洁\",{\"1\":{\"4685\":1}}],[\"使得在控制流转到程序的其它部分以前\",{\"1\":{\"4745\":1}}],[\"使得在调用对象的tostring\",{\"1\":{\"4255\":1}}],[\"使得array1和array2的指针共同指向同一个数组实体\",{\"1\":{\"3483\":1}}],[\"使初始化时更加灵活\",{\"1\":{\"3871\":1}}],[\"使规范等价\",{\"1\":{\"2729\":1}}],[\"使最大页码值作为当前页码值\",{\"1\":{\"1299\":1}}],[\"使用正确的用户名和密码\",{\"1\":{\"10734\":1}}],[\"使用正则全部替换\",{\"1\":{\"2689\":1}}],[\"使用新的端口\",{\"1\":{\"10638\":1}}],[\"使用新值替换list\",{\"1\":{\"2514\":1}}],[\"使用查询运算符指定选择筛选器\",{\"1\":{\"10308\":1}}],[\"使用$set修改器\",{\"1\":{\"10289\":1}}],[\"使用update方法更新文档\",{\"1\":{\"10275\":1}}],[\"使用udp提供\",{\"1\":{\"6765\":1}}],[\"使用常规的搜索方式\",{\"1\":{\"9856\":1}}],[\"使用xsi引入文件\",{\"1\":{\"9645\":1}}],[\"使用xxxoperations对象调用方法\",{\"1\":{\"1028\":1}}],[\"使用命名空间区分\",{\"1\":{\"9644\":1}}],[\"使用命令行生成api文档\",{\"0\":{\"2979\":1}}],[\"使用jar包\",{\"0\":{\"9490\":1}}],[\"使用java自带jar包\",{\"1\":{\"9492\":1}}],[\"使用java内置的jar包\",{\"0\":{\"9491\":1}}],[\"使用java\",{\"1\":{\"7026\":1}}],[\"使用javabean\",{\"1\":{\"4585\":1}}],[\"使用java命令进行运行\",{\"1\":{\"2895\":1}}],[\"使用javac\",{\"1\":{\"2889\":1}}],[\"使用动态虚拟路径拼接完整路径\",{\"1\":{\"9174\":1}}],[\"使用动态条件拼接\",{\"1\":{\"1255\":1}}],[\"使用方式\",{\"0\":{\"8732\":1}}],[\"使用方法flush\",{\"1\":{\"6317\":1}}],[\"使用方法\",{\"1\":{\"6078\":1,\"6081\":1}}],[\"使用方法的形参\",{\"1\":{\"4329\":1}}],[\"使用骨架创建web项目\",{\"0\":{\"8545\":1}}],[\"使用工厂方法\",{\"1\":{\"8260\":1}}],[\"使用德鲁伊\",{\"0\":{\"8258\":1}}],[\"使用完毕之后再放回去\",{\"1\":{\"8227\":1}}],[\"使用完后都得断开\",{\"1\":{\"8222\":1}}],[\"使用完放回池中\",{\"1\":{\"5491\":1}}],[\"使用事务\",{\"0\":{\"8147\":1}}],[\"使用批处理\",{\"0\":{\"8114\":1}}],[\"使用封装好的jdbcutiles获取连接对象\",{\"1\":{\"8084\":1,\"8089\":1}}],[\"使用封装好的工具\",{\"0\":{\"7979\":1}}],[\"使用<=65kb的blob类型\",{\"1\":{\"8075\":1}}],[\"使用配置文件的好处\",{\"0\":{\"7874\":1}}],[\"使用配置文件的方式保存配置信息\",{\"1\":{\"7867\":1}}],[\"使用dofilter方法中的chain对象的dofilter方法进行放行\",{\"1\":{\"9273\":1}}],[\"使用drivermanager类替换driver\",{\"1\":{\"7861\":1}}],[\"使用drivermanager\",{\"0\":{\"7860\":1}}],[\"使用dataoutputstream将文件中各类数据读入\",{\"1\":{\"6487\":1}}],[\"使用这些类库可以以一种标准的方法\",{\"1\":{\"7798\":1}}],[\"使用内部迭代\",{\"1\":{\"7700\":1}}],[\"使用注意\",{\"1\":{\"7648\":1}}],[\"使用注解的方式为servlet类配置一个访问路径\",{\"1\":{\"8692\":1}}],[\"使用注解的方式配置项目\",{\"1\":{\"8539\":1}}],[\"使用注解\",{\"0\":{\"4939\":1}}],[\"使用前提\",{\"1\":{\"7645\":1,\"7669\":1}}],[\"使用条件\",{\"0\":{\"7501\":1}}],[\"使用preparedstatement\",{\"0\":{\"8110\":1},\"1\":{\"8112\":1}}],[\"使用preparedstatement操作blob数据\",{\"1\":{\"8064\":1}}],[\"使用properties对象\",{\"1\":{\"7852\":1}}],[\"使用println这个方法\",{\"1\":{\"7464\":1}}],[\"使用postman进行接口测试\",{\"1\":{\"1281\":1}}],[\"使用postman测试接口功能\",{\"1\":{\"1191\":1}}],[\"使用要求\",{\"0\":{\"7454\":1}}],[\"使用情景\",{\"0\":{\"7443\":1}}],[\"使用函数\",{\"1\":{\"7398\":1}}],[\"使用它可以写出更简洁\",{\"1\":{\"7336\":1}}],[\"使用场合\",{\"1\":{\"7212\":1}}],[\"使用场景\",{\"0\":{\"793\":1},\"1\":{\"3663\":1,\"4746\":1}}],[\"使用一个代理将对象包装起来\",{\"1\":{\"7193\":1}}],[\"使用一次tab操作\",{\"1\":{\"2992\":1}}],[\"使用反射获取driver实现类的对象\",{\"1\":{\"7862\":1}}],[\"使用反射初始化驱动\",{\"1\":{\"7858\":1}}],[\"使用反射\",{\"0\":{\"6959\":1,\"6961\":1,\"7855\":1}}],[\"使用代码体验反射的动态性\",{\"1\":{\"6948\":1}}],[\"使用获取的流对象read流的数据\",{\"1\":{\"6819\":1}}],[\"使用writerobject方法进行序列化\",{\"1\":{\"6555\":1,\"6571\":1}}],[\"使用指针\",{\"0\":{\"6517\":1}}],[\"使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串\",{\"1\":{\"1514\":1}}],[\"使用byte\",{\"1\":{\"6353\":1}}],[\"使用response调用多次addcookie方法发送cookie即可\",{\"1\":{\"9712\":1}}],[\"使用request对象的getsession方法来获取session对象\",{\"1\":{\"9749\":1}}],[\"使用request对象\",{\"1\":{\"8916\":1}}],[\"使用readobejct方法进行反序列化\",{\"1\":{\"6557\":1,\"6573\":1}}],[\"使用read\",{\"1\":{\"6253\":1}}],[\"使用redis\",{\"0\":{\"1022\":1,\"1036\":1}}],[\"使用有限制的\",{\"1\":{\"6094\":1}}],[\"使用通配符泛型\",{\"0\":{\"6079\":1}}],[\"使用通配符\",{\"0\":{\"6065\":1}}],[\"使用到类的泛型的位置\",{\"1\":{\"5977\":1}}],[\"使用总结\",{\"0\":{\"5971\":1}}],[\"使用泛型的主要优点是能够在编译时而不是在运行时检测错误\",{\"1\":{\"5942\":1}}],[\"使用泛型\",{\"0\":{\"5937\":1}}],[\"使用频率最高的实现类\",{\"0\":{\"5813\":1}}],[\"使用elasticsearch\",{\"1\":{\"9843\":1}}],[\"使用equals\",{\"1\":{\"5685\":1}}],[\"使用execute或submit进行操作\",{\"1\":{\"5514\":1}}],[\"使用此类效率比arraylist高\",{\"1\":{\"5638\":1}}],[\"使用array在存储对象方面具有\",{\"1\":{\"5521\":1}}],[\"使用arraylist重载的\",{\"1\":{\"2541\":1}}],[\"使用创建指定线程数量的方法\",{\"1\":{\"5517\":1}}],[\"使用线程池步骤\",{\"0\":{\"5511\":1}}],[\"使用量特别大的资源\",{\"1\":{\"5490\":1}}],[\"使用customerdaoimpl\",{\"0\":{\"8208\":1}}],[\"使用class类的forname方法根据全类名参数创建对象\",{\"1\":{\"7873\":1}}],[\"使用classloader和properties类\",{\"1\":{\"7873\":1}}],[\"使用classloader\",{\"1\":{\"7049\":1}}],[\"使用classloader的getresourceasstream方法加载配置文件\",{\"1\":{\"7048\":1}}],[\"使用classloader加载配置文件\",{\"0\":{\"7047\":1}}],[\"使用class的本质\",{\"0\":{\"6970\":1}}],[\"使用compass连接主节点\",{\"1\":{\"10517\":1}}],[\"使用comparator接口比较两个字符串的大小\",{\"1\":{\"7485\":1}}],[\"使用comparator接口比较俩个数值的大小\",{\"1\":{\"7478\":1}}],[\"使用comparator接口\",{\"1\":{\"1782\":1,\"1788\":1}}],[\"使用cookie来存储\",{\"1\":{\"9799\":1,\"9801\":1}}],[\"使用consumer接口\",{\"1\":{\"7460\":1}}],[\"使用collection存储所有的value\",{\"1\":{\"5848\":1}}],[\"使用callable新增线程的步骤\",{\"0\":{\"5478\":1}}],[\"使用两个线程打印\",{\"1\":{\"5435\":1,\"5463\":1}}],[\"使用lock锁\",{\"1\":{\"5381\":1}}],[\"使用lombok快速制作实体类\",{\"1\":{\"1188\":1}}],[\"使用同步方法解决\",{\"1\":{\"5349\":1}}],[\"使用优先调度的抢占式策略\",{\"1\":{\"5239\":1}}],[\"使用三个线程\",{\"1\":{\"5184\":1}}],[\"使用多线程\",{\"0\":{\"5138\":1}}],[\"使用举例\",{\"0\":{\"5046\":1}}],[\"使用位置\",{\"1\":{\"4942\":1}}],[\"使用枚举类\",{\"0\":{\"4873\":1}}],[\"使用异常类的getmessage方法获取\",{\"1\":{\"4802\":1}}],[\"使用tomcat\",{\"0\":{\"8618\":1}}],[\"使用tcp提供可依赖的字节流服务\",{\"1\":{\"6764\":1}}],[\"使用tcp协议前\",{\"1\":{\"6731\":1}}],[\"使用try\",{\"1\":{\"4762\":1}}],[\"使用try将可能出现异常代码包装起来\",{\"1\":{\"4737\":1}}],[\"使用this访问属性和方法时\",{\"1\":{\"3912\":1}}],[\"使用程序处理异常\",{\"1\":{\"4677\":1}}],[\"使用局部内部类\",{\"0\":{\"4334\":1}}],[\"使用基本数据类型的值\",{\"1\":{\"4274\":1}}],[\"使用强转时\",{\"1\":{\"4183\":1}}],[\"使用强制类型转换符\",{\"1\":{\"4170\":1}}],[\"使用限制\",{\"0\":{\"4131\":1}}],[\"使用子类中重写的父类方法\",{\"1\":{\"4127\":1}}],[\"使用了不赞成使用的类或方法时的警告\",{\"1\":{\"5050\":1}}],[\"使用了不同包下的同名的类\",{\"1\":{\"3959\":1}}],[\"使用了全类名\",{\"1\":{\"3960\":1}}],[\"使用了指定字符集的参数\",{\"1\":{\"1502\":1}}],[\"使用与日期日历相关的函数\",{\"1\":{\"3936\":1}}],[\"使用者只能通过事先定制好的方法来访问数据\",{\"1\":{\"3825\":1}}],[\"使用for循环遍历可变个数形参\",{\"1\":{\"3802\":1}}],[\"使用递归函数\",{\"1\":{\"3754\":1}}],[\"使用循环\",{\"1\":{\"3754\":1}}],[\"使用在方法体中\",{\"1\":{\"3731\":1}}],[\"使用value1替换value2\",{\"1\":{\"5864\":1}}],[\"使用valueoperations<string\",{\"1\":{\"1038\":1}}],[\"使用valueoperations对象操作redis\",{\"1\":{\"1029\":1}}],[\"使用void来表示\",{\"1\":{\"3723\":1}}],[\"使用权限修饰符\",{\"1\":{\"3691\":1}}],[\"使用对象调用方法\",{\"1\":{\"3636\":1}}],[\"使用对象调用属性\",{\"1\":{\"3636\":1}}],[\"使用数组的步骤\",{\"0\":{\"3475\":1}}],[\"使用数据\",{\"1\":{\"513\":1}}],[\"使用范围\",{\"0\":{\"3427\":1}}],[\"使用该方法\",{\"1\":{\"8347\":1}}],[\"使用该方法可以将数组作为字符串打印\",{\"1\":{\"2353\":1}}],[\"使用该方法可以在图形界面编程中实现程序的退出功能等\",{\"1\":{\"2306\":1}}],[\"使用该循环\",{\"1\":{\"3422\":1}}],[\"使用细节\",{\"0\":{\"3280\":1,\"3349\":1}}],[\"使用new\",{\"1\":{\"3207\":1}}],[\"使用较大的数据类型进行接收\",{\"1\":{\"3156\":1}}],[\"使用较少\",{\"1\":{\"1865\":1}}],[\"使用转义字符\",{\"1\":{\"3122\":1}}],[\"使用单行或多行注释\",{\"1\":{\"2990\":1}}],[\"使用文档注释来注释整个类或整个方法\",{\"1\":{\"2989\":1}}],[\"使用文件对象创建文件\",{\"1\":{\"2002\":1}}],[\"使用格式\",{\"1\":{\"2944\":1,\"2950\":1,\"7446\":1}}],[\"使用insertone\",{\"1\":{\"10245\":1}}],[\"使用int\",{\"1\":{\"3076\":1}}],[\"使用include属性在激活指定环境的情况下\",{\"1\":{\"852\":1}}],[\"使用idea\",{\"0\":{\"9504\":1}}],[\"使用idea和下载的tomcat软件\",{\"1\":{\"8573\":1}}],[\"使用ide生成帮助文档\",{\"0\":{\"2984\":1}}],[\"使用ide或者智能编辑器\",{\"1\":{\"2899\":1}}],[\"使用变量时\",{\"1\":{\"3016\":1}}],[\"使用变量的注意事项\",{\"0\":{\"3014\":1}}],[\"使用变量\",{\"0\":{\"2867\":1}}],[\"使用助记符表示一条机器指令\",{\"1\":{\"2834\":1}}],[\"使用参数replacement替换正则表达式匹配到的第一个字符串部分\",{\"1\":{\"2694\":1}}],[\"使用参数replacement替换所有正则表达式匹配到的字符串部分\",{\"1\":{\"2689\":1}}],[\"使用参数与集合中的每个元素做equals判断\",{\"1\":{\"2428\":1}}],[\"使用比较器进行匹配\",{\"1\":{\"2683\":1}}],[\"使用说明\",{\"0\":{\"2526\":1,\"3316\":1,\"3361\":1,\"3421\":1,\"3440\":1,\"3447\":1,\"3791\":1,\"4980\":1,\"5442\":1,\"5448\":1,\"6375\":1}}],[\"使用当前运行时类\",{\"1\":{\"2149\":1}}],[\"使用类的加载器\",{\"0\":{\"7001\":1},\"1\":{\"2143\":1}}],[\"使用缓冲流bufferedwrite\",{\"1\":{\"2123\":1}}],[\"使用缓冲流\",{\"1\":{\"2117\":1}}],[\"使用示例\",{\"0\":{\"1766\":1,\"1786\":1,\"3081\":1,\"3099\":1,\"3141\":1,\"3443\":1,\"3450\":1,\"5059\":1,\"5395\":1,\"5966\":1,\"5968\":1,\"6351\":1,\"6354\":1,\"6397\":1,\"6480\":1,\"6484\":1,\"6515\":1,\"6818\":1,\"7280\":1,\"7990\":1,\"8046\":1,\"8055\":1,\"8325\":1,\"8379\":1,\"9451\":1,\"10853\":1},\"1\":{\"5778\":1}}],[\"使用以下两个接口中的任何一个来实现对象的排序\",{\"1\":{\"1734\":1}}],[\"使用给定的replacement\",{\"1\":{\"1517\":1,\"1520\":1}}],[\"使用用户端应用\",{\"1\":{\"1412\":1}}],[\"使用结果模型类\",{\"0\":{\"1297\":1}}],[\"使用时直接获取\",{\"1\":{\"5491\":1}}],[\"使用时直接掉用api接口就行了\",{\"1\":{\"1243\":1}}],[\"使用时间片策略\",{\"1\":{\"5239\":1}}],[\"使用时就必须指明\",{\"1\":{\"4941\":1}}],[\"使用时要加上强制转换符\",{\"1\":{\"3175\":1}}],[\"使用时从spring中直接获取数据使用\",{\"1\":{\"513\":1}}],[\"使用分页api需要通过拦截器实现\",{\"1\":{\"1231\":1}}],[\"使用步骤\",{\"0\":{\"9673\":1},\"1\":{\"2071\":1}}],[\"使用步骤和redistemplate一样\",{\"1\":{\"1037\":1}}],[\"使用步骤如下\",{\"1\":{\"1023\":1}}],[\"使用测试类访问mapper接口\",{\"1\":{\"1015\":1}}],[\"使用测试\",{\"0\":{\"989\":1,\"1014\":1,\"8942\":1,\"8950\":1,\"8986\":1}}],[\"使用mongodb需要先导入驱动\",{\"1\":{\"10828\":1}}],[\"使用mysql驱动的api连接\",{\"0\":{\"7851\":1}}],[\"使用mybatisplus\",{\"0\":{\"1009\":1}}],[\"使用mybatis\",{\"0\":{\"982\":1},\"1\":{\"1111\":1}}],[\"使用mybatis的时候\",{\"1\":{\"952\":1}}],[\"使用map\",{\"1\":{\"7664\":1}}],[\"使用mapper接口时\",{\"1\":{\"983\":1}}],[\"使用maven搭建springboot项目\",{\"1\":{\"1356\":1}}],[\"使用maven工具在当前真机环境下构建项目\",{\"1\":{\"751\":1}}],[\"使用率低\",{\"1\":{\"893\":1}}],[\"使用日志对象记录日志\",{\"0\":{\"880\":1}}],[\"使用临时属性设置配置文件路径\",{\"1\":{\"810\":1}}],[\"使用临时属性设置配置文件名\",{\"1\":{\"808\":1}}],[\"使用快捷键alt\",{\"1\":{\"776\":1}}],[\"使用git下载项目\",{\"1\":{\"750\":1}}],[\"使用hibernate框架提供的校验器做实现\",{\"1\":{\"642\":1}}],[\"使用服务器去监控其中加载的应用\",{\"1\":{\"533\":1}}],[\"使用的是框架中的数据库操作方法\",{\"1\":{\"7784\":1}}],[\"使用的是idea默认的version\",{\"1\":{\"343\":1}}],[\"使用的方法\",{\"1\":{\"6378\":1}}],[\"使用的方法是子类的\",{\"1\":{\"4127\":1}}],[\"使用的时候注意\",{\"1\":{\"7987\":1}}],[\"使用的时候需要套接在已有流的基础上\",{\"1\":{\"6309\":1}}],[\"使用的时候加载该对象\",{\"1\":{\"510\":1,\"588\":1}}],[\"使用的都是collection中声明过的方法\",{\"1\":{\"5721\":1,\"5770\":1}}],[\"使用\",{\"0\":{\"610\":1,\"851\":1,\"866\":1,\"2455\":1,\"3292\":1,\"5769\":1,\"5900\":1,\"7230\":1},\"1\":{\"486\":1,\"498\":1,\"613\":1,\"2321\":1,\"2778\":1,\"3123\":1,\"3733\":1,\"3963\":1,\"4525\":1,\"4889\":1,\"4981\":1,\"6483\":1,\"6792\":1,\"6793\":1,\"7048\":1,\"7699\":1,\"8860\":1,\"9281\":1,\"9820\":1,\"9823\":1,\"9847\":1,\"9848\":1,\"10034\":1,\"10035\":1,\"10036\":1,\"10037\":1,\"10038\":1}}],[\"使用缩进表示层级关系\",{\"1\":{\"482\":1}}],[\"使用skip\",{\"1\":{\"10328\":1}}],[\"使用show\",{\"1\":{\"10224\":1}}],[\"使用session来存储\",{\"1\":{\"9800\":1,\"9802\":1}}],[\"使用set存储所有的entry\",{\"1\":{\"5851\":1}}],[\"使用set存储所有的key\",{\"1\":{\"5846\":1}}],[\"使用system\",{\"1\":{\"6358\":1,\"6447\":1}}],[\"使用stream\",{\"1\":{\"7545\":1}}],[\"使用string也可以\",{\"1\":{\"6259\":1}}],[\"使用statement\",{\"0\":{\"8106\":1}}],[\"使用static修饰的方法\",{\"1\":{\"4391\":1}}],[\"使用starter可以实现快速配置的效果\",{\"1\":{\"416\":1}}],[\"使用scanner实现\",{\"1\":{\"6446\":1}}],[\"使用scanner\",{\"1\":{\"4612\":1}}],[\"使用switch\",{\"1\":{\"3377\":1}}],[\"使用spring全家桶开发时\",{\"1\":{\"9588\":1}}],[\"使用springmvc提供的异常处理器做统一的异常处理\",{\"1\":{\"1288\":1}}],[\"使用spring\",{\"1\":{\"709\":1}}],[\"使用springboot可以不写版本号\",{\"1\":{\"10828\":1}}],[\"使用springboot整合redis的专用客户端接口操作\",{\"1\":{\"1023\":1}}],[\"使用springboot2\",{\"1\":{\"994\":1}}],[\"使用springboot创建项目时\",{\"1\":{\"976\":1}}],[\"使用springboot\",{\"0\":{\"367\":1}}],[\"使用浏览器访问\",{\"1\":{\"377\":1}}],[\"使用官网创建springboot项目\",{\"0\":{\"359\":1}}],[\"^1\",{\"1\":{\"10348\":1}}],[\"^和$的行为中被识别\",{\"1\":{\"2732\":1}}],[\"^\",{\"1\":{\"1299\":2,\"3291\":1}}],[\"操作方式\",{\"0\":{\"10847\":1}}],[\"操作的一直都是主节点\",{\"1\":{\"10608\":1}}],[\"操作的是原来的f1\",{\"1\":{\"2019\":1}}],[\"操作副本集\",{\"0\":{\"10589\":1}}],[\"操作前必须初始化副本集才行\",{\"1\":{\"10515\":1}}],[\"操作符进行关联\",{\"1\":{\"10356\":1}}],[\"操作符将条件进行关联\",{\"1\":{\"10356\":1}}],[\"操作都会重新构建索引\",{\"1\":{\"9854\":1}}],[\"操作\",{\"1\":{\"8167\":1,\"8355\":1,\"10653\":2}}],[\"操作blob\",{\"0\":{\"8063\":1}}],[\"操作和访问数据库\",{\"0\":{\"7878\":1}}],[\"操作是延迟执行的\",{\"1\":{\"7562\":1}}],[\"操作是否成功\",{\"1\":{\"1296\":1}}],[\"操作person私有成员\",{\"0\":{\"6961\":1}}],[\"操作person\",{\"0\":{\"6959\":1}}],[\"操作流程\",{\"1\":{\"6378\":1}}],[\"操作二进制字节\",{\"1\":{\"6159\":1}}],[\"操作原来泛型位置的结构必须与指定的泛型类型一致\",{\"1\":{\"6003\":1}}],[\"操作同步代码时\",{\"1\":{\"5374\":1}}],[\"操作共享数据的代码\",{\"1\":{\"5314\":1,\"5315\":1}}],[\"操作数据\",{\"0\":{\"4596\":1}}],[\"操作数组的工具类\",{\"1\":{\"3593\":1}}],[\"操作时操作jdbc接口里的方法\",{\"1\":{\"4516\":1}}],[\"操作静态属性的方法\",{\"1\":{\"4409\":1}}],[\"操作redis\",{\"1\":{\"1028\":1}}],[\"构成了一个entry对象\",{\"1\":{\"5850\":1}}],[\"构成的set集合\",{\"1\":{\"2623\":1}}],[\"构造数据报包\",{\"1\":{\"6858\":1}}],[\"构造\",{\"1\":{\"6857\":1,\"6943\":1}}],[\"构造指定容量的字符串缓冲区\",{\"1\":{\"1546\":1}}],[\"构造器引用\",{\"0\":{\"7499\":1,\"7511\":1,\"7518\":1,\"7526\":1,\"7536\":1}}],[\"构造器与mode参数\",{\"0\":{\"6502\":1}}],[\"构造器2\",{\"0\":{\"6386\":1,\"6403\":1}}],[\"构造器1\",{\"0\":{\"6383\":1,\"6401\":1}}],[\"构造器创建对象时\",{\"1\":{\"5678\":1}}],[\"构造器等\",{\"1\":{\"4317\":1}}],[\"构造器是调用本类的其他构造器\",{\"1\":{\"4098\":1}}],[\"构造器中只加个<>即可\",{\"1\":{\"5992\":1}}],[\"构造器中初始化\",{\"1\":{\"3886\":1,\"3984\":1}}],[\"构造器中定义的变量\",{\"1\":{\"3043\":1}}],[\"构造器虽然不是方法\",{\"1\":{\"3868\":1}}],[\"构造器重载\",{\"0\":{\"3867\":1}}],[\"构造器分类\",{\"0\":{\"3864\":1}}],[\"构造器的调用\",{\"0\":{\"3881\":1}}],[\"构造器的语法\",{\"0\":{\"3858\":1}}],[\"构造器的作用\",{\"0\":{\"3850\":1}}],[\"构造器可以带参数\",{\"1\":{\"3855\":1}}],[\"构造器形参\",{\"1\":{\"3679\":1,\"3689\":1}}],[\"构造器内的类\",{\"1\":{\"4310\":1}}],[\"构造器内部\",{\"1\":{\"3905\":1}}],[\"构造器内部的变量\",{\"1\":{\"3689\":1}}],[\"构造器内部自动new\",{\"1\":{\"2083\":1,\"6239\":1,\"6275\":1,\"6297\":1}}],[\"构造器内\",{\"1\":{\"3679\":1}}],[\"构造器相关\",{\"0\":{\"2172\":1}}],[\"构造器\",{\"0\":{\"2713\":1,\"3848\":1,\"5165\":1,\"5646\":1,\"6697\":1},\"1\":{\"1505\":1,\"1868\":1,\"1877\":1,\"1944\":1,\"2032\":1,\"3207\":1,\"3838\":1,\"3849\":1,\"4883\":1,\"5977\":1,\"7183\":1}}],[\"构造函数\",{\"0\":{\"5385\":1},\"1\":{\"2938\":1,\"7201\":1}}],[\"构造函数的参数可以是一个char\",{\"1\":{\"1496\":1}}],[\"构造函数方式\",{\"1\":{\"1417\":1}}],[\"构造方法声明\",{\"1\":{\"4961\":1}}],[\"构造方法\",{\"1\":{\"1294\":1,\"2286\":1,\"3852\":1,\"4995\":1}}],[\"构建日志采集和分析体系\",{\"1\":{\"9848\":1}}],[\"构建一个scanner对象\",{\"1\":{\"2324\":1,\"2781\":1}}],[\"构建项目\",{\"0\":{\"551\":1}}],[\"构建结果\",{\"0\":{\"331\":1}}],[\"拦截方式\",{\"1\":{\"9288\":1}}],[\"拦截方式的配置\",{\"0\":{\"9287\":1}}],[\"拦截某个目录下所有资源的请求\",{\"1\":{\"9286\":1}}],[\"拦截目录\",{\"1\":{\"9286\":1}}],[\"拦截所有资源\",{\"1\":{\"9286\":1}}],[\"拦截所有\",{\"1\":{\"9285\":1}}],[\"拦截所有的异常信息\",{\"1\":{\"1290\":1}}],[\"拦截具体的资源\",{\"1\":{\"9282\":1}}],[\"拦截路径有如下四种配置方式\",{\"1\":{\"9281\":1}}],[\"拦截器\",{\"0\":{\"1232\":1},\"1\":{\"1119\":1}}],[\"提醒\",{\"1\":{\"9647\":1}}],[\"提交事务\",{\"0\":{\"8135\":1}}],[\"提取出来应用到方法中\",{\"1\":{\"7646\":1}}],[\"提前创建好多个线程\",{\"1\":{\"5491\":1}}],[\"提前规定好\",{\"1\":{\"1286\":1}}],[\"提高负载\",{\"1\":{\"10439\":1}}],[\"提高操作效率\",{\"1\":{\"6371\":1}}],[\"提高响应速度\",{\"1\":{\"5493\":1}}],[\"提高计算机系统cpu的利用率\",{\"1\":{\"5103\":1}}],[\"提高应用程序的响应\",{\"1\":{\"5101\":1}}],[\"提高了代码的复用性\",{\"1\":{\"4009\":1}}],[\"提高安全性\",{\"1\":{\"3974\":1}}],[\"提高效率\",{\"1\":{\"1569\":1}}],[\"提供如关闭连接\",{\"1\":{\"8339\":1}}],[\"提供实现\",{\"1\":{\"8242\":1}}],[\"提供三个连接的基本信息\",{\"1\":{\"7865\":1}}],[\"提供另外三个连接的基本信息\",{\"1\":{\"7862\":1}}],[\"提供用户名和密码\",{\"1\":{\"7852\":1}}],[\"提供url\",{\"1\":{\"7852\":1}}],[\"提供不同实现\",{\"1\":{\"7810\":1}}],[\"提供两个类参数\",{\"1\":{\"7523\":1}}],[\"提供的\",{\"1\":{\"9820\":1,\"9823\":1}}],[\"提供的一些功能\",{\"1\":{\"6589\":1}}],[\"提供的值没有加f\",{\"1\":{\"3173\":1}}],[\"提供第二个参数来指定编码集\",{\"1\":{\"6387\":1}}],[\"提供filewriter的对象\",{\"1\":{\"6285\":1}}],[\"提供file类的对象\",{\"1\":{\"6285\":1}}],[\"提供一种方法访问一个容器\",{\"1\":{\"5569\":1}}],[\"提供一个参数\",{\"1\":{\"2632\":1,\"2641\":1,\"7429\":1,\"7435\":1,\"7515\":1}}],[\"提供更多的子类\",{\"1\":{\"5381\":1}}],[\"提供当前枚举类的多个对象\",{\"1\":{\"4843\":1}}],[\"提供方法体\",{\"1\":{\"4450\":1}}],[\"提供公共的静态的方法\",{\"1\":{\"4422\":1}}],[\"提供公共的静态方法\",{\"1\":{\"4421\":1}}],[\"提供了水平可扩展性作为其核心功能的一部分\",{\"1\":{\"10022\":1}}],[\"提供了8个监听器\",{\"1\":{\"9330\":1}}],[\"提供了很多内置的functional\",{\"1\":{\"7426\":1}}],[\"提供了最高级网络应用\",{\"1\":{\"6919\":1}}],[\"提供了在字节流和字符流之间的转换\",{\"1\":{\"6364\":1}}],[\"提供了前提\",{\"1\":{\"4011\":1}}],[\"提供了一种高效且易于使用的处理数据的方式\",{\"1\":{\"7545\":1}}],[\"提供了一系列重载的print\",{\"1\":{\"6454\":1}}],[\"提供了一系列静态方法用于科学计算\",{\"1\":{\"1796\":1}}],[\"提供了一个相对安全的内存管理和访问机制\",{\"1\":{\"2814\":1}}],[\"提供常用功能\",{\"1\":{\"3933\":1}}],[\"提供包的概念\",{\"1\":{\"3917\":1}}],[\"提供参数\",{\"1\":{\"2638\":1,\"7433\":1}}],[\"提供所有\",{\"1\":{\"1867\":1}}],[\"提供对不同的日历系统的访问\",{\"1\":{\"1626\":1}}],[\"提示\",{\"1\":{\"1\":1,\"5\":1,\"27\":1,\"30\":1,\"33\":1,\"36\":1,\"39\":1,\"42\":1,\"45\":1,\"48\":1,\"51\":1,\"54\":1,\"57\":1,\"60\":1,\"63\":1,\"66\":1,\"103\":1,\"121\":1,\"143\":1,\"146\":1,\"149\":1,\"152\":1,\"155\":1,\"158\":1,\"161\":1,\"164\":1,\"167\":1,\"170\":1,\"173\":1,\"176\":1,\"179\":1,\"182\":1,\"185\":1,\"188\":1,\"191\":1,\"194\":1,\"197\":1,\"200\":1,\"203\":1,\"206\":1,\"273\":1,\"276\":1,\"279\":1,\"282\":1,\"300\":1,\"368\":1,\"452\":1,\"496\":1,\"524\":1,\"638\":1,\"761\":1,\"871\":1,\"957\":1,\"1062\":1,\"1182\":1,\"1258\":1,\"1366\":1,\"1414\":1,\"1531\":1,\"1665\":1,\"1684\":1,\"1740\":1,\"1775\":1,\"1794\":1,\"1843\":1,\"1864\":1,\"1870\":1,\"2127\":1,\"2347\":1,\"2372\":1,\"2626\":1,\"2645\":1,\"2648\":1,\"2651\":1,\"2654\":1,\"2657\":1,\"2660\":1,\"2684\":1,\"2985\":1,\"3327\":1,\"3749\":1,\"4413\":1,\"4627\":1,\"5533\":1,\"5929\":1,\"6637\":1,\"7309\":1,\"7332\":1,\"7765\":1,\"7783\":1,\"8128\":1,\"8666\":1,\"8826\":1,\"8866\":1,\"9034\":1,\"9264\":1,\"9313\":1,\"9515\":1,\"9532\":1,\"9587\":1,\"9697\":1,\"9918\":1,\"9930\":1,\"10138\":1,\"10172\":1,\"10180\":1,\"10203\":1,\"10241\":1,\"10343\":1,\"10469\":1,\"10536\":1,\"10632\":1,\"10720\":1,\"10782\":1,\"10785\":1,\"10848\":1,\"10851\":1,\"10854\":1}}],[\"响应其他副本集成员的心跳和选举请求来维护副本集中的仲裁\",{\"1\":{\"10460\":1}}],[\"响应数据\",{\"1\":{\"9561\":1,\"9813\":1}}],[\"响应数据设计\",{\"0\":{\"1284\":1}}],[\"响应重定向后的访问路径\",{\"1\":{\"9138\":1}}],[\"响应字节数据\",{\"0\":{\"9088\":1}}],[\"响应字符数据\",{\"0\":{\"9071\":1}}],[\"响应体\",{\"1\":{\"9057\":1}}],[\"响应头和消息头都会携带多个cookie键值对\",{\"1\":{\"9713\":1}}],[\"响应头里就有了set\",{\"1\":{\"9701\":1}}],[\"响应头\",{\"0\":{\"9063\":1},\"1\":{\"9057\":1}}],[\"响应行\",{\"0\":{\"9059\":1},\"1\":{\"9057\":1}}],[\"响应行+响应头+响应体\",{\"1\":{\"8897\":1}}],[\"响应\",{\"1\":{\"6790\":1,\"9307\":1,\"9308\":1,\"9766\":1}}],[\"响应的字符数据\",{\"1\":{\"9081\":1}}],[\"响应的具体数据\",{\"1\":{\"1296\":1}}],[\"响应的数据\",{\"1\":{\"1286\":1}}],[\"响应信息\",{\"1\":{\"1286\":1,\"1296\":1}}],[\"响应状态码\",{\"1\":{\"1286\":1}}],[\"路径问题\",{\"0\":{\"9163\":1}}],[\"路径结束\",{\"1\":{\"6600\":1}}],[\"路径开始\",{\"1\":{\"6599\":1}}],[\"路径也是一种文件\",{\"1\":{\"6136\":1}}],[\"路径中的每级目录之间用一个路径分隔符隔开\",{\"1\":{\"6119\":1}}],[\"路径分隔符和系统有关\",{\"0\":{\"6120\":1}}],[\"路径分隔符\",{\"0\":{\"6118\":1}}],[\"路径改了\",{\"1\":{\"2013\":1}}],[\"路径\",{\"1\":{\"1945\":1,\"9217\":1,\"9709\":1}}],[\"路径变量\",{\"1\":{\"1279\":1}}],[\"路由\",{\"0\":{\"8825\":1}}],[\"路由控制\",{\"1\":{\"6718\":1}}],[\"路由选择\",{\"1\":{\"242\":1}}],[\"路由计算\",{\"1\":{\"231\":1}}],[\"管理用户\",{\"0\":{\"10700\":1}}],[\"管理索引\",{\"0\":{\"10374\":1}}],[\"管理和释放数据库连接\",{\"1\":{\"8228\":1}}],[\"管理数据\",{\"1\":{\"2820\":1}}],[\"管理员\",{\"1\":{\"1410\":1}}],[\"管理端\",{\"1\":{\"1388\":1}}],[\"管理\",{\"1\":{\"1268\":1}}],[\"管理第三方bean\",{\"1\":{\"1234\":1}}],[\"防止超管泄漏\",{\"1\":{\"10707\":1}}],[\"防止空值异常\",{\"1\":{\"7762\":1}}],[\"防止最后一次buf出现不满载情况\",{\"1\":{\"6353\":1}}],[\"防止这种冲突的方法就是当资源被一个任务使用时\",{\"1\":{\"5358\":1}}],[\"防止被继承后子类报错\",{\"1\":{\"4104\":1}}],[\"防止将null数据作为条件使用\",{\"1\":{\"1255\":1}}],[\"防止出错\",{\"1\":{\"1252\":1}}],[\"防止写错字段\",{\"1\":{\"1251\":1}}],[\"防止文件太大\",{\"1\":{\"933\":1}}],[\"qualified\",{\"1\":{\"9642\":1}}],[\"querystring\",{\"1\":{\"8944\":2}}],[\"query\",{\"1\":{\"8365\":1,\"8385\":1,\"8387\":1,\"8389\":1,\"8391\":2,\"10276\":1,\"10277\":1,\"10308\":1,\"10321\":1,\"10323\":1,\"10416\":1,\"10417\":1}}],[\"queryrunner类的主要方法\",{\"1\":{\"8353\":1}}],[\"queryrunner类提供了两个构造器\",{\"1\":{\"8350\":1}}],[\"queryrunner\",{\"0\":{\"8348\":1},\"1\":{\"8335\":1,\"8381\":2,\"8383\":2,\"8385\":2,\"8387\":2,\"8389\":2,\"8391\":2}}],[\"queryforcustomers\",{\"1\":{\"8045\":1,\"8047\":2}}],[\"querywrapper对象作为参数\",{\"1\":{\"1248\":1}}],[\"querywrapper<>\",{\"1\":{\"1246\":1,\"1248\":1}}],[\"querywrapper<book>\",{\"1\":{\"1246\":1,\"1248\":1}}],[\"querywrapper类是用于封装查询条件的\",{\"1\":{\"1245\":1}}],[\"querywrapper\",{\"0\":{\"1244\":1}}],[\"queue\",{\"1\":{\"2399\":1,\"5556\":2}}],[\"qq\",{\"1\":{\"8084\":1,\"8381\":1}}],[\"qw\",{\"1\":{\"1246\":1,\"1248\":3}}],[\"qos\",{\"1\":{\"952\":14}}],[\"返回包含状态信息的文档\",{\"1\":{\"10551\":1}}],[\"返回如下对象\",{\"1\":{\"10252\":1}}],[\"返回多条记录的dql方法\",{\"1\":{\"8201\":1}}],[\"返回多条数据\",{\"0\":{\"8060\":1}}],[\"返回一条记录的dql方法\",{\"1\":{\"8201\":1}}],[\"返回一个数据库连接\",{\"1\":{\"8324\":1}}],[\"返回一个扔掉了前\",{\"1\":{\"7625\":1}}],[\"返回一个并行流stream\",{\"1\":{\"7570\":1}}],[\"返回一个顺序流stream\",{\"1\":{\"7566\":1}}],[\"返回一个对象\",{\"1\":{\"7523\":1}}],[\"返回一个new的对象\",{\"1\":{\"7515\":1}}],[\"返回一个值\",{\"1\":{\"7475\":1}}],[\"返回一个代理类的对象\",{\"1\":{\"7277\":1}}],[\"返回一个字符串\",{\"1\":{\"6446\":1}}],[\"返回一个pattern对象\",{\"1\":{\"2716\":1}}],[\"返回一个线程安全的同类集合\",{\"1\":{\"2517\":1}}],[\"返回一个新的字符串\",{\"1\":{\"1511\":1}}],[\"返回结果时使用平面几何的二维索引和返回结果时使用球面几何的二维球面索引\",{\"1\":{\"10371\":1}}],[\"返回结果集\",{\"1\":{\"8045\":1,\"8054\":1}}],[\"返回结果模型\",{\"1\":{\"1295\":1}}],[\"返回结果模型类\",{\"0\":{\"1291\":1}}],[\"返回preparedstatement的实例\",{\"1\":{\"7970\":1,\"7980\":1,\"7989\":1,\"8201\":1}}],[\"返回path\",{\"1\":{\"6605\":1}}],[\"返回path对象包含整个路径\",{\"1\":{\"6602\":1}}],[\"返回set集合\",{\"1\":{\"7725\":1}}],[\"返回stringbuffer的长度\",{\"1\":{\"1580\":1}}],[\"返回list集合\",{\"1\":{\"7724\":1}}],[\"返回工作最高的员工的工资\",{\"1\":{\"7694\":1}}],[\"返回流中最小值\",{\"0\":{\"7695\":1}}],[\"返回流中最大值\",{\"0\":{\"7692\":1}}],[\"返回流中元素总数\",{\"0\":{\"7689\":1}}],[\"返回员工总数\",{\"1\":{\"7691\":1}}],[\"返回第一个元素\",{\"0\":{\"7683\":1},\"1\":{\"7685\":1}}],[\"返回第一个参数的第二个参数次方\",{\"1\":{\"1830\":1}}],[\"返回成了非嵌套集合\",{\"1\":{\"7646\":1}}],[\"返回被代理类的代理对象\",{\"1\":{\"7264\":1}}],[\"返回数据表中最大的生日\",{\"1\":{\"8205\":1,\"8207\":1}}],[\"返回数据表中的数据的条目数\",{\"1\":{\"8205\":1,\"8207\":1}}],[\"返回数据类型\",{\"1\":{\"7093\":1}}],[\"返回数据缓冲区\",{\"1\":{\"6861\":1}}],[\"返回将要发送或接收到的数据的长度\",{\"1\":{\"6862\":1}}],[\"返回某台远程主机的端口号\",{\"1\":{\"6860\":1}}],[\"返回某台机器的\",{\"1\":{\"6859\":1}}],[\"返回通信套接字对象\",{\"1\":{\"6807\":1}}],[\"返回ip地址字符串\",{\"1\":{\"6705\":1}}],[\"返回合并后的路径对应的path对象\",{\"1\":{\"6608\":1}}],[\"返回与调用\",{\"1\":{\"6604\":1}}],[\"返回与参数最接近的整数\",{\"1\":{\"1819\":1}}],[\"返回调用\",{\"1\":{\"6598\":1,\"6603\":1}}],[\"返回读到的数据\",{\"1\":{\"6345\":1}}],[\"返回类型\",{\"1\":{\"6041\":1}}],[\"返回类的对象\",{\"1\":{\"4422\":1}}],[\"返回线程优先值\",{\"1\":{\"5246\":1}}],[\"返回执行当前代码的线程\",{\"1\":{\"5207\":1}}],[\"返回当前\",{\"1\":{\"8023\":1}}],[\"返回当前流中任意元素\",{\"0\":{\"7686\":1}}],[\"返回当前枚举类对象常量的名称\",{\"1\":{\"4865\":1}}],[\"返回当前运行时类的父类的class对象\",{\"1\":{\"2155\":1}}],[\"返回枚举类型的对象数组\",{\"1\":{\"4863\":1}}],[\"返回字符串形式的属性名\",{\"1\":{\"7094\":1}}],[\"返回字符串\",{\"1\":{\"4742\":1}}],[\"返回字符串的长度\",{\"1\":{\"1420\":1}}],[\"返回累的对象\",{\"1\":{\"4421\":1}}],[\"返回都是\",{\"1\":{\"4239\":1}}],[\"返回是\",{\"1\":{\"4236\":1,\"4238\":2,\"4239\":1}}],[\"返回该列的值\",{\"1\":{\"8014\":1}}],[\"返回该模式器的string类型的正则表达式\",{\"1\":{\"2749\":1}}],[\"返回该类的类加载器\",{\"1\":{\"2164\":1}}],[\"返回此socket对象的输出流\",{\"1\":{\"6803\":1}}],[\"返回此套接字的端口\",{\"1\":{\"6854\":1}}],[\"返回此套接字的输出流\",{\"1\":{\"6775\":1}}],[\"返回此套接字的输入流\",{\"1\":{\"6774\":1}}],[\"返回此套接字连接的地址\",{\"1\":{\"6853\":1}}],[\"返回此套接字绑定的本地主机上的端口号\",{\"1\":{\"6852\":1}}],[\"返回此套接字绑定到的本地端口\",{\"1\":{\"6779\":1}}],[\"返回此模式的匹配标志\",{\"1\":{\"2740\":1}}],[\"返回此当前运行时类所表示的实体\",{\"1\":{\"2152\":1}}],[\"返回boolean\",{\"1\":{\"2641\":1,\"7435\":1}}],[\"返回了一个新的stream\",{\"1\":{\"7634\":1}}],[\"返回了一个新集合\",{\"1\":{\"2568\":1}}],[\"返回了一个值\",{\"1\":{\"2635\":1,\"7431\":1}}],[\"返回所有k\",{\"1\":{\"2623\":1}}],[\"返回所有key构成的set集合\",{\"1\":{\"2617\":1}}],[\"返回所有value构成的set集合\",{\"1\":{\"2620\":1}}],[\"返回map中key\",{\"1\":{\"2608\":1}}],[\"返回从fromindex到toindex位置的左闭右开区间的子集合\",{\"1\":{\"2568\":1}}],[\"返回两个index区间的元素\",{\"1\":{\"2568\":1}}],[\"返回元素最后出现的位置\",{\"1\":{\"2554\":1}}],[\"返回元素的索引\",{\"1\":{\"2367\":1}}],[\"返回最小元素\",{\"1\":{\"2502\":1}}],[\"返回给定集合中的最大元素\",{\"1\":{\"2497\":1}}],[\"返回迭代器对象\",{\"1\":{\"2448\":1}}],[\"返回true\",{\"1\":{\"2422\":1,\"5738\":1,\"5864\":1}}],[\"返回false\",{\"1\":{\"1998\":1,\"2422\":1,\"4241\":1,\"5739\":1,\"5863\":1,\"6143\":1}}],[\"返回\",{\"1\":{\"1935\":1,\"2039\":1,\"2551\":1,\"2554\":1,\"4255\":1,\"6622\":1}}],[\"返回1\",{\"1\":{\"1934\":1}}],[\"返回参数的自然数底数的对数值\",{\"1\":{\"1829\":1}}],[\"返回自然数底数e的参数次方\",{\"1\":{\"1827\":1}}],[\"返回小于等于\",{\"1\":{\"1810\":1}}],[\"返回大于等于给定参数的最小整数\",{\"1\":{\"1807\":1}}],[\"返回负整数\",{\"1\":{\"1785\":1}}],[\"返回0\",{\"1\":{\"1784\":1,\"1936\":1,\"5787\":1,\"5788\":1}}],[\"返回正整数\",{\"1\":{\"1783\":1}}],[\"返回值的类型就是orm类\",{\"1\":{\"8059\":1}}],[\"返回值的描述\",{\"1\":{\"2970\":1}}],[\"返回值返回的是第一条语句的处理结果\",{\"1\":{\"7962\":1}}],[\"返回值也符合要求\",{\"1\":{\"7497\":1}}],[\"返回值就是读取的字符数\",{\"1\":{\"6256\":1}}],[\"返回值即为futuretask构造器参数callable实现类重写的call\",{\"1\":{\"5484\":1}}],[\"返回值void\",{\"1\":{\"4743\":1}}],[\"返回值类型前面<>不能使用\",{\"1\":{\"6098\":1}}],[\"返回值类型只能是局部内部类\",{\"1\":{\"4336\":1}}],[\"返回值类型用关键字void表示\",{\"1\":{\"3741\":1}}],[\"返回值类型\",{\"1\":{\"3718\":1,\"3757\":1,\"4394\":1,\"4593\":1,\"7105\":1,\"7106\":1}}],[\"返回值类型是optional对象\",{\"1\":{\"7684\":1}}],[\"返回值类型是被反序列化对象的类\",{\"1\":{\"6548\":1}}],[\"返回值类型是对象r\",{\"1\":{\"2638\":1,\"7433\":1}}],[\"返回值类型是\",{\"1\":{\"2184\":1,\"2187\":1}}],[\"返回值类型是double\",{\"1\":{\"1807\":1}}],[\"返回值是怎么获取的\",{\"1\":{\"7400\":1}}],[\"返回值是char的ascii码\",{\"1\":{\"6241\":1}}],[\"返回值是boolean\",{\"1\":{\"2562\":1}}],[\"返回值是被移除的元素\",{\"1\":{\"2559\":1}}],[\"返回值是0~3的int数字\",{\"1\":{\"2220\":1,\"2258\":1}}],[\"返回值是字符数\",{\"1\":{\"2048\":2}}],[\"返回值是一个伪随机数\",{\"1\":{\"1802\":1}}],[\"返回值是个字符串数组\",{\"1\":{\"1528\":1,\"2704\":1}}],[\"返回值\",{\"0\":{\"4049\":1},\"1\":{\"1445\":1,\"1528\":1,\"2196\":1,\"2199\":1,\"2237\":1,\"2280\":1,\"2369\":1,\"2545\":1,\"2565\":1,\"2704\":1,\"2755\":1,\"2978\":1,\"3718\":1,\"3720\":1,\"6345\":1,\"7087\":1,\"7092\":1,\"7094\":1,\"7099\":1,\"7102\":1,\"7108\":1,\"7111\":1,\"7114\":1,\"7117\":1,\"7120\":1,\"7123\":1,\"7174\":1,\"7264\":1,\"7452\":1,\"7482\":1,\"7707\":1,\"7711\":1,\"7964\":1,\"8014\":1,\"8358\":1}}],[\"返回值为\",{\"1\":{\"427\":1}}],[\"返回指定长度的空数组\",{\"1\":{\"7533\":1}}],[\"返回指定uri对应的path路径\",{\"1\":{\"6613\":1}}],[\"返回指定索引位置\",{\"1\":{\"6606\":1}}],[\"返回指定索引处的字符\",{\"1\":{\"1430\":1,\"1577\":1}}],[\"返回指定集合中指定元素的出现次数\",{\"1\":{\"2507\":1}}],[\"返回指定类名\",{\"1\":{\"2146\":1}}],[\"返回指定字符串在此字符串第一次出现的索引\",{\"1\":{\"1575\":1}}],[\"返回指定字符串在此字符串中第一次出现的索引\",{\"1\":{\"1433\":1}}],[\"返回指定子字符串在此字符串中最后一次出现的索引\",{\"1\":{\"1437\":1}}],[\"返回定义好的json格式数据\",{\"1\":{\"1298\":1}}],[\"返回的数据中members\",{\"1\":{\"10624\":1}}],[\"返回的数据类型未统一\",{\"1\":{\"1283\":1}}],[\"返回的结果很多\",{\"1\":{\"10424\":1}}],[\"返回的结果是int类型的\",{\"1\":{\"7087\":1}}],[\"返回的内容是不一样的\",{\"1\":{\"8675\":1}}],[\"返回的内容都一样\",{\"1\":{\"4867\":1}}],[\"返回的实际上就是一张数据表\",{\"1\":{\"8002\":1}}],[\"返回的只有形参的类型\",{\"1\":{\"2271\":1,\"7121\":1}}],[\"返回的是int\",{\"1\":{\"5246\":1}}],[\"返回的是一个对象\",{\"1\":{\"4619\":1}}],[\"返回的是arraylist\",{\"1\":{\"2391\":1}}],[\"返回的是数组\",{\"1\":{\"2274\":1,\"7124\":1}}],[\"返回的是新的字符串\",{\"1\":{\"1463\":1}}],[\"返回的是依然是ipage对象\",{\"1\":{\"1239\":1}}],[\"返回拦截器\",{\"1\":{\"1234\":1}}],[\"专门用于对其他对象身上发生的事件或状态改变进行监听和相应处理的对象\",{\"1\":{\"9321\":1}}],[\"专门用来编译正则表达式的\",{\"1\":{\"2674\":1}}],[\"专门完成代理的操作类\",{\"1\":{\"7256\":1}}],[\"专门的算法\",{\"1\":{\"5410\":1}}],[\"专门有一位来储存数据的正负\",{\"1\":{\"3184\":1}}],[\"专门存放工具类的\",{\"1\":{\"1293\":1}}],[\"专门存放配置信息相关的类\",{\"1\":{\"1233\":1}}],[\"专门给测试人员使用的环境\",{\"1\":{\"118\":1}}],[\"标示的方法\",{\"1\":{\"5036\":1}}],[\"标注\",{\"1\":{\"5036\":1}}],[\"标注serverconfig类使用\",{\"1\":{\"609\":1}}],[\"标识某注解可以在同一个声明上使用多次\",{\"1\":{\"4911\":1}}],[\"标识这个注解怎么保存\",{\"1\":{\"4907\":1,\"4977\":1}}],[\"标识一个匿名函数或函数式接口\",{\"1\":{\"4905\":1}}],[\"标识i是否被j除尽\",{\"1\":{\"3457\":1}}],[\"标识符保存string对象的地址\",{\"1\":{\"3231\":1}}],[\"标识符保存常量池的内存地址\",{\"1\":{\"3230\":1}}],[\"标识符不能包含空格\",{\"1\":{\"3064\":1}}],[\"标识符\",{\"0\":{\"3055\":1,\"5127\":1,\"6038\":1},\"1\":{\"4118\":1,\"4273\":1}}],[\"标记这个注解是继承于哪个注解类\",{\"1\":{\"4910\":1,\"4975\":1}}],[\"标记这个注解应该是哪种\",{\"1\":{\"4909\":1,\"4973\":1}}],[\"标记这些注解是否包含在用户文档中\",{\"1\":{\"4908\":1,\"4974\":1}}],[\"标记所修饰的类\",{\"1\":{\"4893\":1,\"4902\":1}}],[\"标记文件创建时项目当时对应的版本\",{\"1\":{\"2961\":1}}],[\"标记某个代码关键字\",{\"1\":{\"2953\":1}}],[\"标记方法名\",{\"1\":{\"2952\":1}}],[\"标记类名\",{\"1\":{\"2951\":1}}],[\"标准输入流\",{\"0\":{\"6444\":1}}],[\"标准输出\",{\"1\":{\"1229\":1}}],[\"标准流\",{\"0\":{\"6434\":1}}],[\"标准出现了\",{\"1\":{\"6427\":1}}],[\"标准的javase类加载器可以按要求查找类\",{\"1\":{\"7035\":1}}],[\"标准的java类\",{\"1\":{\"4622\":1}}],[\"标准的输出流\",{\"1\":{\"6436\":1}}],[\"标准的输入流\",{\"1\":{\"6435\":1}}],[\"标准的方法输入或输出数据\",{\"1\":{\"6152\":1}}],[\"标准\",{\"1\":{\"4481\":1}}],[\"标准格式\",{\"0\":{\"1697\":1}}],[\"标签省略了前缀\",{\"1\":{\"9645\":1}}],[\"标签必须正确关闭\",{\"1\":{\"9605\":1}}],[\"标签都是自定义的\",{\"1\":{\"9592\":1}}],[\"标签\",{\"1\":{\"1348\":1}}],[\"全盘扫描查询\",{\"1\":{\"10426\":1}}],[\"全文检索都实现的很鸡肋\",{\"1\":{\"9854\":1}}],[\"全文搜索\",{\"0\":{\"9863\":1}}],[\"全文搜索引擎\",{\"0\":{\"9850\":1}}],[\"全文搜索属于最常见的需求\",{\"1\":{\"9827\":1}}],[\"全球通用的字符集\",{\"1\":{\"6428\":1}}],[\"全部保留\",{\"0\":{\"6023\":1}}],[\"全部相等就会返回true\",{\"1\":{\"2438\":1}}],[\"全局变量\",{\"1\":{\"9243\":1}}],[\"全局变量和局部变量的值和对象的地址储存在这里\",{\"1\":{\"5123\":1}}],[\"全局常量\",{\"1\":{\"3992\":1,\"4487\":1,\"4491\":1}}],[\"全等于\",{\"1\":{\"4226\":1}}],[\"全类名\",{\"0\":{\"3954\":1}}],[\"全大写下划线分隔\",{\"1\":{\"3070\":1}}],[\"全小写\",{\"1\":{\"3067\":1}}],[\"全小写或用\",{\"1\":{\"617\":1}}],[\"全参构造方法\",{\"1\":{\"1215\":1}}],[\"架构\",{\"0\":{\"10475\":1},\"1\":{\"1197\":1}}],[\"架构师\",{\"1\":{\"112\":1}}],[\"前置条件\",{\"1\":{\"10811\":1}}],[\"前n个不要\",{\"1\":{\"10330\":1}}],[\"前两列不变\",{\"1\":{\"10011\":1}}],[\"前两个构造器是继承thread类创建多线程用的\",{\"1\":{\"5166\":1}}],[\"前的代码\",{\"1\":{\"9304\":1,\"9305\":1}}],[\"前者是主要面向内存\",{\"1\":{\"7553\":1}}],[\"前者是个集合接口\",{\"1\":{\"2473\":1,\"5930\":1}}],[\"前\",{\"1\":{\"3257\":1,\"3259\":1}}],[\"前面的能匹配到\",{\"1\":{\"8847\":1}}],[\"前面\",{\"1\":{\"2860\":1}}],[\"前端>基础>js>8\",{\"1\":{\"9808\":1}}],[\"前端表单\",{\"0\":{\"8987\":1}}],[\"前端快照\",{\"1\":{\"8629\":1}}],[\"前端代码已经提供好了\",{\"1\":{\"1367\":1}}],[\"前端代码\",{\"0\":{\"1365\":1,\"9023\":1}}],[\"前端页面放到\",{\"1\":{\"1302\":1}}],[\"前端页面设计\",{\"0\":{\"1300\":1}}],[\"前端\",{\"0\":{\"4606\":1},\"1\":{\"1197\":1,\"1390\":1,\"8876\":1,\"8886\":1,\"9541\":1}}],[\"前后端分离\",{\"1\":{\"9460\":1}}],[\"前后端的结构在java层面交互时\",{\"1\":{\"3614\":1}}],[\"前后端联调\",{\"1\":{\"1193\":1}}],[\"前后端开发协议制作\",{\"1\":{\"1192\":1}}],[\"前提先创建好了数据库\",{\"1\":{\"7837\":1}}],[\"前提是有权限\",{\"1\":{\"2078\":1}}],[\"前提\",{\"1\":{\"364\":1,\"1099\":1,\"7281\":1,\"8433\":1,\"8740\":1}}],[\"ω\",{\"0\":{\"1173\":1}}],[\"ⅵ\",{\"0\":{\"1170\":1,\"1507\":1,\"2285\":1,\"3178\":1,\"3312\":1,\"3423\":1,\"5034\":1,\"7666\":1,\"7773\":1,\"9032\":1}}],[\"下拉框选择tomcat\",{\"1\":{\"8620\":1}}],[\"下限\",{\"0\":{\"6090\":1}}],[\"下一个node\",{\"1\":{\"5666\":1}}],[\"下一次装载字符时\",{\"1\":{\"2055\":1,\"6262\":1}}],[\"下面介绍一种更加复杂\",{\"1\":{\"9996\":1}}],[\"下面的方法测试\",{\"1\":{\"5559\":1}}],[\"下面例子均采用典型实现\",{\"1\":{\"2034\":1}}],[\"下滑显示新的评论\",{\"1\":{\"5108\":1}}],[\"下午03时47分16秒\",{\"1\":{\"1719\":1}}],[\"下载压缩包\",{\"0\":{\"10153\":1}}],[\"下载的是绿色软件\",{\"1\":{\"10139\":1}}],[\"下载的打包格式选zip\",{\"1\":{\"10136\":1}}],[\"下载安装包\",{\"0\":{\"10127\":1},\"1\":{\"10154\":1}}],[\"下载安装web服务器软件\",{\"1\":{\"8406\":1}}],[\"下载地址\",{\"1\":{\"8422\":1,\"9870\":1,\"10128\":1}}],[\"下载包并导入\",{\"1\":{\"8333\":1}}],[\"下载jar包\",{\"1\":{\"8257\":1}}],[\"下载页\",{\"1\":{\"8255\":1}}],[\"下载mysql驱动\",{\"0\":{\"7818\":1}}],[\"下载工具下载前都会建立两个临时文件\",{\"1\":{\"6528\":1}}],[\"下载后台代码\",{\"1\":{\"1373\":1}}],[\"下载用户端代码\",{\"1\":{\"1372\":1}}],[\"下载\",{\"0\":{\"1370\":1,\"8421\":1}}],[\"下单\",{\"1\":{\"1408\":1}}],[\"下单等\",{\"1\":{\"1385\":1}}],[\"下单时间\",{\"1\":{\"1352\":1}}],[\"下单用户\",{\"1\":{\"1352\":1}}],[\"下次更新\",{\"1\":{\"1124\":1}}],[\"下划线模式\",{\"1\":{\"620\":1}}],[\"更改\",{\"1\":{\"10445\":1}}],[\"更改数据库通用的增删改方法\",{\"0\":{\"8145\":1}}],[\"更直观\",{\"1\":{\"10419\":1}}],[\"更多复杂查询\",{\"0\":{\"10341\":1}}],[\"更多网络编程内容详见\",{\"1\":{\"6638\":1}}],[\"更不能热部署\",{\"1\":{\"8636\":1}}],[\"更不用说进行运算了\",{\"1\":{\"1866\":1}}],[\"更简单\",{\"1\":{\"8614\":1}}],[\"更简化的编译运行\",{\"0\":{\"7779\":1}}],[\"更快的系统反应速度\",{\"1\":{\"8238\":1}}],[\"更有利于代码的维护和升级\",{\"1\":{\"8170\":1}}],[\"更灵活安全\",{\"1\":{\"8012\":1}}],[\"更灵活的代码\",{\"1\":{\"7336\":1}}],[\"更新指定的字段\",{\"1\":{\"10289\":1}}],[\"更新指定字段\",{\"0\":{\"10286\":1}}],[\"更新选项\",{\"1\":{\"10279\":1}}],[\"更新文档\",{\"0\":{\"10274\":1}}],[\"更新或删除\",{\"1\":{\"8355\":1}}],[\"更新\",{\"1\":{\"8354\":1}}],[\"更新某表中的一个数据\",{\"1\":{\"7991\":1}}],[\"更新操作示例\",{\"0\":{\"7979\":1}}],[\"更新时间\",{\"1\":{\"1122\":1,\"1334\":1,\"1336\":1,\"1338\":1,\"1340\":1,\"1342\":1,\"1344\":1,\"1348\":1}}],[\"更安全和高效\",{\"1\":{\"7895\":1}}],[\"更何况强转成person\",{\"1\":{\"4195\":1}}],[\"更加易读\",{\"1\":{\"922\":1}}],[\"工作原理\",{\"0\":{\"9865\":1}}],[\"工作目录\",{\"0\":{\"8488\":1}}],[\"工作方式\",{\"0\":{\"8229\":1}}],[\"工厂类\",{\"0\":{\"5505\":1}}],[\"工具类可以辅助我们进行开发\",{\"1\":{\"9471\":1}}],[\"工具类api\",{\"0\":{\"8338\":1}}],[\"工具类\",{\"1\":{\"8337\":1,\"9489\":1}}],[\"工具类中的方法\",{\"1\":{\"4410\":1}}],[\"工具提取成文档\",{\"1\":{\"5000\":1}}],[\"工具\",{\"0\":{\"1159\":1},\"1\":{\"1119\":1,\"1177\":1,\"1394\":1}}],[\"工程路径config目录中配置文件\",{\"1\":{\"799\":1}}],[\"工程路径配置文件\",{\"1\":{\"798\":1}}],[\"工程名\",{\"1\":{\"759\":1}}],[\"工程包名\",{\"1\":{\"697\":1}}],[\"工程的pom竟然也有parent\",{\"1\":{\"390\":1}}],[\"工程或模块\",{\"1\":{\"308\":1}}],[\"公\",{\"1\":{\"10639\":1}}],[\"公共网关接口\",{\"1\":{\"6896\":1}}],[\"公共类\",{\"1\":{\"1119\":1}}],[\"公认端口\",{\"1\":{\"6683\":1}}],[\"公网地址\",{\"1\":{\"6670\":1}}],[\"公网地址和私有地址\",{\"0\":{\"6669\":1}}],[\"公司测试部门使用\",{\"1\":{\"822\":1}}],[\"├──\",{\"1\":{\"1119\":13}}],[\"生命周期\",{\"0\":{\"5284\":1,\"8744\":1,\"9189\":1,\"9198\":1},\"1\":{\"5069\":1}}],[\"生成stream的集合是一个嵌套集合\",{\"1\":{\"7645\":1}}],[\"生成随机数\",{\"1\":{\"7593\":1}}],[\"生成\",{\"0\":{\"7591\":1}}],[\"生成一个被代理类\",{\"1\":{\"7288\":1}}],[\"生成动态代理\",{\"1\":{\"6938\":1}}],[\"生成对应的\",{\"1\":{\"6898\":1}}],[\"生成的是一个boolean结果\",{\"1\":{\"4220\":1}}],[\"生成的文档会解析html代码\",{\"1\":{\"2940\":1}}],[\"生成api文档\",{\"1\":{\"2927\":1}}],[\"生成策略为参照数据库设定的策略\",{\"1\":{\"1229\":1}}],[\"生成代码\",{\"1\":{\"1113\":1}}],[\"生产端配置的详细一些\",{\"1\":{\"10161\":1}}],[\"生产时要部署到linux服务器\",{\"1\":{\"9873\":1}}],[\"生产阶段必须关闭热部署\",{\"1\":{\"579\":1}}],[\"生产阶段不要开启热部署\",{\"1\":{\"526\":1}}],[\"生产环境无影响\",{\"1\":{\"9779\":1}}],[\"生产环境搭建\",{\"0\":{\"2869\":1}}],[\"生产环境配置文件\",{\"1\":{\"839\":1}}],[\"生产环境的密码被测试任意拿到\",{\"1\":{\"833\":1}}],[\"生产环境\",{\"1\":{\"119\":1,\"820\":1,\"952\":1}}],[\"框架>maven\",{\"1\":{\"9534\":1}}],[\"框架中用的\",{\"1\":{\"7885\":1}}],[\"框架中底层用的也是jdbc\",{\"1\":{\"7785\":1}}],[\"框架用的就是线程池\",{\"1\":{\"5489\":1}}],[\"框架\",{\"0\":{\"9570\":1},\"1\":{\"1099\":1,\"4887\":1}}],[\"还要开启登录认证\",{\"1\":{\"10737\":1}}],[\"还储存了\",{\"1\":{\"9707\":1}}],[\"还能隐藏一些在程序中抛出的sqleeception\",{\"1\":{\"8341\":1}}],[\"还拿连接数据库举例\",{\"1\":{\"7207\":1,\"7216\":1}}],[\"还包含了定位该资源的信息\",{\"1\":{\"6913\":1}}],[\"还必须保证其内部所有属性也必须是可序列化的\",{\"1\":{\"6563\":1}}],[\"还会在关闭流之前刷新缓冲区\",{\"1\":{\"6320\":1}}],[\"还会将父类所有的成员复制一份\",{\"1\":{\"4035\":1}}],[\"还需要在此处添加元素\",{\"1\":{\"5742\":1}}],[\"还可用于保存具有映射关系的关联数组\",{\"1\":{\"5536\":1}}],[\"还可以使用命名关闭mongodb服务\",{\"1\":{\"10752\":1}}],[\"还可以使用能表示字符的其他形式\",{\"1\":{\"3120\":1}}],[\"还可以为专用目的维护其他\",{\"1\":{\"10442\":1}}],[\"还可以包括其他文档\",{\"1\":{\"10078\":1}}],[\"还可以放在方法声明中\",{\"1\":{\"5335\":1}}],[\"还可以定义静态方法\",{\"1\":{\"4522\":1}}],[\"还可以声明自己特有的属性或方法\",{\"1\":{\"4007\":1}}],[\"还可以继续使用\",{\"1\":{\"2407\":1}}],[\"还可以根据需要设置对应的配置\",{\"1\":{\"1050\":1}}],[\"还没有执行完\",{\"1\":{\"5306\":1}}],[\"还没有分配值的时候\",{\"1\":{\"3514\":1}}],[\"还有常见的项目中应用日志的搜索等等\",{\"1\":{\"9852\":1}}],[\"还有其他的元数据文件\",{\"1\":{\"9477\":1}}],[\"还有一个部分需要一个完整的结构进行描述\",{\"1\":{\"4304\":1,\"4345\":1}}],[\"还有javadoc等\",{\"1\":{\"2874\":1}}],[\"还是有点冗余\",{\"1\":{\"9006\":1}}],[\"还是会出现线程安全问题\",{\"1\":{\"5327\":1}}],[\"还是会继续向下执行\",{\"1\":{\"3365\":1}}],[\"还是编入class文件中\",{\"1\":{\"4907\":1,\"4977\":1}}],[\"还是要后台根据收集的异常信息去优化代码\",{\"1\":{\"4681\":1}}],[\"还是需要导入\",{\"1\":{\"3964\":1}}],[\"还是表达式2\",{\"1\":{\"3314\":1}}],[\"还是被舍弃了\",{\"1\":{\"3252\":1}}],[\"还是比较繁琐\",{\"1\":{\"885\":1}}],[\"还提供了对集合对象设置不可变\",{\"1\":{\"2474\":1,\"5936\":1}}],[\"还提供以下运算\",{\"1\":{\"1867\":1}}],[\"除数为0\",{\"1\":{\"4697\":1}}],[\"除此之外的任何地方都不能使用该类\",{\"1\":{\"4339\":1}}],[\"除此之外的任何地方\",{\"1\":{\"4335\":1}}],[\"除java\",{\"1\":{\"4024\":1}}],[\"除号运算的细节\",{\"0\":{\"3251\":1}}],[\"除以2\",{\"1\":{\"3196\":1}}],[\"除了主节点\",{\"1\":{\"10803\":1}}],[\"除了暴力kill进程\",{\"1\":{\"10752\":1}}],[\"除了system\",{\"1\":{\"10696\":1}}],[\"除了sql语句外\",{\"1\":{\"7982\":1}}],[\"除了数据库config和local之外\",{\"1\":{\"10680\":1,\"10682\":1,\"10684\":1,\"10686\":1}}],[\"除了基本的json类型\",{\"1\":{\"10083\":1}}],[\"除了基础配置\",{\"1\":{\"1050\":1}}],[\"除了目录结构外\",{\"1\":{\"9522\":1}}],[\"除了class外\",{\"1\":{\"9477\":1}}],[\"除了在存储的最大信息量上不同外\",{\"1\":{\"8068\":1}}],[\"除了final常量\",{\"1\":{\"7025\":1}}],[\"除了当前person类需要实现serializable接口之外\",{\"1\":{\"6563\":1}}],[\"除了添加null之外\",{\"1\":{\"6069\":1}}],[\"除了将本类所有的成员复制一份到内存外\",{\"1\":{\"4035\":1}}],[\"除了boolean类型外\",{\"1\":{\"3148\":1}}],[\"除了直接使用字符作为值外\",{\"1\":{\"3120\":1}}],[\"除法运算\",{\"1\":{\"1894\":1}}],[\"除非你要访问这种系统创建的集合\",{\"1\":{\"10236\":1}}],[\"除非重新进行端口配置\",{\"1\":{\"8435\":1}}],[\"除非流水线上触发终止操作\",{\"1\":{\"7598\":1}}],[\"除非要求用数组\",{\"1\":{\"5539\":1}}],[\"除非有默认值\",{\"1\":{\"4941\":1}}],[\"除非自己也声明成抽象类\",{\"1\":{\"4450\":1}}],[\"除非直接new\",{\"1\":{\"4247\":1}}],[\"除非遇到特殊情况\",{\"1\":{\"4076\":1}}],[\"除非不足以表示较大的数\",{\"1\":{\"3084\":1}}],[\"除非springboot未提供对应版本\",{\"1\":{\"405\":1}}],[\"除非手动在pom\",{\"1\":{\"401\":1}}],[\"你不需要捕捉这个异常classnotfoundexception\",{\"1\":{\"8347\":1}}],[\"你好\",{\"1\":{\"6745\":1,\"6746\":1,\"6956\":1,\"6958\":1,\"6960\":1,\"9101\":1}}],[\"你需要调用\",{\"1\":{\"2666\":1}}],[\"你必须首先调用其公共静态编译方法\",{\"1\":{\"2665\":1}}],[\"你ok\",{\"1\":{\"1421\":1}}],[\"你可以理解为这是redistemplate的一种指定数据泛型的操作api\",{\"1\":{\"1035\":1}}],[\"你也不可能到源代码中去添加\",{\"1\":{\"593\":1}}],[\"序列化后的结果中\",{\"1\":{\"6566\":1}}],[\"序列化类\",{\"0\":{\"6558\":1}}],[\"序列化流\",{\"1\":{\"6555\":1,\"6571\":1}}],[\"序列化的好处在于可将任何实现了serializable接口的对象转化为\",{\"1\":{\"6539\":1}}],[\"序列化与反序列化\",{\"0\":{\"6534\":1}}],[\"序列化\",{\"0\":{\"6554\":1,\"6570\":1},\"1\":{\"1034\":1,\"6532\":1,\"6535\":1}}],[\"接着flatmap会将这些stream合并成一个stream\",{\"1\":{\"7665\":1}}],[\"接着我们使用java\",{\"1\":{\"6969\":1}}],[\"接着通过某种算法计算在hashset底层数组中存放的位置\",{\"1\":{\"5732\":1}}],[\"接字\",{\"1\":{\"6687\":1}}],[\"接收请求\",{\"1\":{\"9561\":1}}],[\"接收get\",{\"1\":{\"8823\":1}}],[\"接收用户的请求\",{\"1\":{\"8396\":1}}],[\"接收一个\",{\"1\":{\"7718\":1}}],[\"接收一个函数作为参数\",{\"1\":{\"7631\":1,\"7636\":1,\"7639\":1,\"7642\":1}}],[\"接收一个boolean参数\",{\"1\":{\"5386\":1}}],[\"接收到的或将要发送的数据从缓冲区中的偏移量\",{\"1\":{\"6861\":1}}],[\"接收方法\",{\"1\":{\"6837\":1}}],[\"接收方收到也不确认\",{\"1\":{\"6740\":1}}],[\"接收端示例\",{\"0\":{\"6841\":1}}],[\"接收端\",{\"1\":{\"6835\":1}}],[\"接收\",{\"1\":{\"6816\":1,\"7615\":1}}],[\"接收的变量类型要与表达式结果的变量类型一致\",{\"1\":{\"3318\":1}}],[\"接收的值数据类型不能小于数值常量的数据类型\",{\"1\":{\"3166\":1}}],[\"接收结果的变量也要定义成相应的数据类型\",{\"1\":{\"3153\":1}}],[\"接受一个端口号作为参数\",{\"1\":{\"6813\":1}}],[\"接受一个实体类作为泛型\",{\"1\":{\"1245\":1}}],[\"接受参数\",{\"1\":{\"2644\":1}}],[\"接口提供了一个单独的方法\",{\"1\":{\"8368\":1}}],[\"接口需要用户去做迭代\",{\"1\":{\"7699\":1}}],[\"接口构造器\",{\"1\":{\"7350\":1}}],[\"接口上声明的泛型\",{\"1\":{\"6009\":1}}],[\"接口时通过一个标识表示类中某个属性的类型或者是某个方法的返回值及参数类型\",{\"1\":{\"5946\":1}}],[\"接口使用频率最高的实现类\",{\"1\":{\"5804\":1}}],[\"接口冲突\",{\"1\":{\"4532\":1}}],[\"接口新特性\",{\"0\":{\"4521\":1}}],[\"接口示例\",{\"0\":{\"4510\":1}}],[\"接口通过让类去实现\",{\"1\":{\"4507\":1}}],[\"接口与抽象类的对比\",{\"0\":{\"4519\":1}}],[\"接口与实现类之间存在多态性\",{\"1\":{\"4504\":1}}],[\"接口与接口之间可以继承\",{\"1\":{\"4494\":1}}],[\"接口也可以继承其它接口\",{\"1\":{\"4500\":1}}],[\"接口中声明私有方法\",{\"0\":{\"7780\":1}}],[\"接口中方法的实现决定了如何对流执行收集的操作\",{\"1\":{\"7719\":1}}],[\"接口中方法的方法名\",{\"1\":{\"7451\":1}}],[\"接口中重写类的排序方法compare\",{\"1\":{\"5915\":1}}],[\"接口中被重写的方法\",{\"0\":{\"4533\":1}}],[\"接口中的所有抽象方法都默认是由public\",{\"1\":{\"4496\":1}}],[\"接口中的所有成员变量都默认是由public\",{\"1\":{\"4495\":1}}],[\"接口中不能定义构造器的\",{\"1\":{\"4493\":1}}],[\"接口内部只能定义全局常量和抽象方法\",{\"1\":{\"4486\":1}}],[\"接口采用interface关键字来定义\",{\"1\":{\"4486\":1}}],[\"接口定义\",{\"0\":{\"4485\":1}}],[\"接口就是规范\",{\"1\":{\"4482\":1}}],[\"接口就没有意义了\",{\"1\":{\"4167\":1}}],[\"接口和类是并列关系\",{\"1\":{\"4472\":1}}],[\"接口的主要实现类\",{\"1\":{\"8369\":1}}],[\"接口的主要用途就是被实现类实现\",{\"1\":{\"4502\":1}}],[\"接口的成员\",{\"1\":{\"6009\":1}}],[\"接口的典型实现\",{\"1\":{\"5696\":1}}],[\"接口的具体使用\",{\"1\":{\"4511\":1}}],[\"接口的实现类\",{\"1\":{\"5714\":1}}],[\"接口的实现类可以直接使用这些默认的方法\",{\"1\":{\"4543\":1}}],[\"接口的实现细节都由编译器完成\",{\"1\":{\"4923\":1}}],[\"接口的实现\",{\"0\":{\"4506\":1}}],[\"接口的使用细节\",{\"0\":{\"4497\":1}}],[\"接口的特点\",{\"0\":{\"4492\":1}}],[\"接口的本质是契约\",{\"1\":{\"4481\":1}}],[\"接口的意义\",{\"0\":{\"4480\":1}}],[\"接口的由来\",{\"0\":{\"4474\":1}}],[\"接口的集合框架类\",{\"1\":{\"3936\":1}}],[\"接口的父接口\",{\"1\":{\"2399\":1,\"5556\":1}}],[\"接口名\",{\"1\":{\"3068\":1}}],[\"接口是无法创建对象\",{\"1\":{\"8906\":1}}],[\"接口是一种特殊的抽象类\",{\"1\":{\"4472\":1}}],[\"接口是\",{\"1\":{\"2399\":1,\"5556\":1,\"7929\":1}}],[\"接口响应的时间戳\",{\"1\":{\"1286\":1}}],[\"接口优化\",{\"0\":{\"1282\":1}}],[\"接口命名一般以i开头\",{\"1\":{\"1270\":1}}],[\"接口\",{\"0\":{\"1011\":1,\"1220\":1,\"5566\":1,\"5622\":1,\"5683\":1,\"5796\":1,\"6002\":1,\"7224\":1},\"1\":{\"2152\":1,\"2938\":1,\"2943\":1,\"3036\":1,\"3699\":1,\"3938\":1,\"3946\":1,\"4486\":1,\"4515\":1,\"4623\":1,\"4922\":1,\"4961\":1,\"4991\":1,\"5543\":1,\"5548\":1,\"5630\":1,\"6983\":1,\"7197\":1,\"7215\":1,\"7218\":1,\"7282\":1,\"8677\":2}}],[\"接上一步\",{\"1\":{\"317\":1}}],[\"表连接\",{\"1\":{\"10070\":1}}],[\"表单\",{\"1\":{\"9167\":1}}],[\"表中的记录数为\",{\"1\":{\"8210\":1}}],[\"表中的一个字段对应java类的一个属性\",{\"1\":{\"8029\":1}}],[\"表中的一条记录对应java类的一个对象\",{\"1\":{\"8029\":1}}],[\"表面传递的是父类的数据类型\",{\"1\":{\"4130\":1}}],[\"表明main方法入口\",{\"1\":{\"9473\":1}}],[\"表明该方法将不对这些异常进行处理\",{\"1\":{\"4767\":1}}],[\"表明调用的是父类中被重写的方法\",{\"1\":{\"4082\":1}}],[\"表明调用的是父类中声明的属性\",{\"1\":{\"4079\":1}}],[\"表明此形参是一个常量\",{\"1\":{\"3989\":1}}],[\"表明此方法不可以被重写\",{\"1\":{\"3978\":1}}],[\"表明此变量是属性\",{\"1\":{\"3895\":1,\"3898\":1}}],[\"表达式抛出一个受检异常\",{\"1\":{\"7420\":1}}],[\"表达式来创建该接口的对象\",{\"1\":{\"7420\":1}}],[\"表达式的类型依赖于上下文环境\",{\"1\":{\"7358\":1}}],[\"表达式的限制\",{\"1\":{\"3366\":1}}],[\"表达式中的参数类型都是由编译器推断得出的\",{\"1\":{\"7358\":1}}],[\"表达式中的所有元字符转义字符将不具备特殊含义\",{\"1\":{\"2734\":1}}],[\"表达式\",{\"1\":{\"3360\":1}}],[\"表达式1\",{\"0\":{\"3317\":1}}],[\"表现层的servlet接收请求并调用业务逻辑层的方法进行业务逻辑处理\",{\"1\":{\"9564\":1}}],[\"表现层消息一致性处理\",{\"1\":{\"1283\":1}}],[\"表现层其实就是\",{\"1\":{\"1273\":1}}],[\"表现层\",{\"0\":{\"1271\":1},\"1\":{\"9557\":1,\"9561\":1,\"9567\":1,\"9572\":1}}],[\"表名\",{\"1\":{\"1010\":1,\"1309\":1}}],[\"表示操作成功\",{\"1\":{\"10728\":1,\"10730\":1}}],[\"表示创建成功\",{\"1\":{\"10703\":1}}],[\"表示健康\",{\"1\":{\"10583\":1}}],[\"表示添加成功\",{\"1\":{\"10574\":1}}],[\"表示要添加的主机为仲裁者\",{\"1\":{\"10569\":1}}],[\"表示该节点是健康的\",{\"1\":{\"10560\":1}}],[\"表示该注解能写在使用类型的任何语句中\",{\"1\":{\"5032\":1}}],[\"表示该注解能写在类型变量的声明语句中\",{\"1\":{\"5029\":1}}],[\"表示副本集创建成功\",{\"1\":{\"10528\":1}}],[\"表示写问题的文档\",{\"1\":{\"10284\":1}}],[\"表示每个单独的文档包含了哪些关键字\",{\"1\":{\"9953\":1}}],[\"表示哪些文档包含了该关键字\",{\"1\":{\"9952\":1}}],[\"表示层\",{\"1\":{\"9583\":1}}],[\"表示对servletcontext对象本身的生命周期进行监控\",{\"1\":{\"9442\":1}}],[\"表示监听器\",{\"1\":{\"9314\":1}}],[\"表示这个值不存在\",{\"1\":{\"7732\":1}}],[\"表示的是web目录\",{\"1\":{\"9260\":1}}],[\"表示的网络资源之间的连接\",{\"1\":{\"6919\":1}}],[\"表示的时间是格林威治时间\",{\"1\":{\"1675\":1}}],[\"表示到url所引用的远程对象的连接\",{\"1\":{\"6898\":1}}],[\"表示所有泛型的父类\",{\"1\":{\"6063\":1}}],[\"表示所有类\",{\"1\":{\"3947\":1}}],[\"表示整个方法为同步方法\",{\"1\":{\"5335\":1}}],[\"表示protected类型\",{\"1\":{\"4592\":1}}],[\"表示此类不能被继承\",{\"1\":{\"4318\":1}}],[\"表示可以导入xxx包下的所有结构\",{\"1\":{\"3951\":1}}],[\"表示结束此方法的意思\",{\"1\":{\"3723\":1}}],[\"表示数组\",{\"1\":{\"3563\":1}}],[\"表示一个持久的属性集\",{\"1\":{\"7853\":1}}],[\"表示一个值不存在\",{\"1\":{\"7732\":1}}],[\"表示一个时间\",{\"1\":{\"1641\":1}}],[\"表示一旦执行到此关键字\",{\"1\":{\"3365\":1}}],[\"表示string可以比较大小\",{\"1\":{\"3218\":1}}],[\"表示字符串是支持序列化的\",{\"1\":{\"3217\":1}}],[\"表示方法\",{\"0\":{\"3179\":1}}],[\"表示换行符\",{\"1\":{\"3125\":1}}],[\"表示参考的类和方法\",{\"1\":{\"2973\":1}}],[\"表示指向当前的某一方法\",{\"1\":{\"2948\":1}}],[\"表示是否移除成功\",{\"1\":{\"2562\":1}}],[\"表示从以下版本开始有这个类\",{\"1\":{\"2961\":1}}],[\"表示从键盘获取输入的内容\",{\"1\":{\"2324\":1,\"2781\":1}}],[\"表示从该索引处开始找\",{\"1\":{\"1434\":1}}],[\"表示o1\",{\"1\":{\"1785\":1}}],[\"表示相等\",{\"1\":{\"1784\":1}}],[\"表示切片最多不超过limit个\",{\"1\":{\"1527\":1,\"2703\":1,\"2759\":1}}],[\"表示舍去前面n个字符后\",{\"1\":{\"1454\":1}}],[\"表示存储空间\",{\"1\":{\"633\":1}}],[\"表示时间间隔\",{\"1\":{\"630\":1}}],[\"表示\",{\"1\":{\"486\":1,\"2670\":1,\"3971\":1,\"4592\":2}}],[\"表示注释\",{\"1\":{\"484\":1}}],[\"切换到authentication选项卡\",{\"1\":{\"10794\":1}}],[\"切换到admin库\",{\"1\":{\"10167\":1}}],[\"切换其他备份服务器做主库\",{\"1\":{\"10439\":1}}],[\"切换成jedis客户端技术\",{\"0\":{\"1044\":1}}],[\"切换成阿里云的源\",{\"1\":{\"1003\":1}}],[\"切换阿里云镜像\",{\"1\":{\"328\":1}}],[\"换句话说\",{\"1\":{\"3797\":1,\"4463\":1,\"9530\":1}}],[\"换用com\",{\"1\":{\"999\":1}}],[\"换行\",{\"1\":{\"918\":1,\"6460\":1}}],[\"弃用com\",{\"1\":{\"999\":1}}],[\"zxvf\",{\"1\":{\"10157\":1}}],[\"z是修正版本号\",{\"1\":{\"10134\":1}}],[\"zhangyuhao\",{\"1\":{\"8089\":1}}],[\"zhangsan\",{\"1\":{\"489\":3,\"9027\":1}}],[\"z\",{\"1\":{\"4238\":1,\"10131\":1}}],[\"zzz\",{\"1\":{\"3070\":1}}],[\"zero\",{\"1\":{\"1881\":2}}],[\"zoneoffset\",{\"1\":{\"1676\":2}}],[\"zone\",{\"1\":{\"1629\":1}}],[\"zoneddatetime\",{\"1\":{\"1623\":1}}],[\"zone=+8\",{\"1\":{\"996\":1}}],[\"zip\",{\"1\":{\"1083\":1,\"9473\":1,\"9895\":1}}],[\"勾选great\",{\"1\":{\"8548\":1}}],[\"勾选sql\",{\"1\":{\"976\":1}}],[\"勾选依赖时无法指定版本\",{\"1\":{\"352\":1}}],[\"写两份几乎一样的代码\",{\"1\":{\"8999\":1}}],[\"写操作\",{\"1\":{\"6794\":1}}],[\"写成8个无符号整数\",{\"1\":{\"6667\":1}}],[\"写完后\",{\"1\":{\"6524\":1}}],[\"写数据\",{\"1\":{\"6306\":1}}],[\"写文件\",{\"1\":{\"6150\":1,\"6491\":1}}],[\"写文档注释时要按照一定的格式来写\",{\"1\":{\"2936\":1}}],[\"写\",{\"1\":{\"5132\":1,\"6216\":1,\"6217\":1,\"6301\":1,\"6520\":1}}],[\"写在配置文件的url后面\",{\"1\":{\"8119\":1}}],[\"写在方法的声明处\",{\"1\":{\"4771\":1}}],[\"写在哪是一个问题\",{\"1\":{\"963\":1}}],[\"写一些执行的代码\",{\"1\":{\"4548\":1}}],[\"写入关注的写入\",{\"1\":{\"10445\":1}}],[\"写入finally语句块\",{\"1\":{\"5393\":1}}],[\"写入byte\",{\"1\":{\"2105\":2}}],[\"写入字节\",{\"1\":{\"2102\":1}}],[\"写入字符串\",{\"1\":{\"2098\":1}}],[\"写入字符数组\",{\"1\":{\"2094\":1}}],[\"写入string的一部分\",{\"1\":{\"2098\":1}}],[\"写入string\",{\"1\":{\"2098\":1}}],[\"写入char\",{\"1\":{\"2098\":3}}],[\"写入cbuf或str的某一部分\",{\"1\":{\"2096\":1}}],[\"写入unicode\",{\"1\":{\"2098\":2}}],[\"写入len个字符\",{\"1\":{\"2096\":1}}],[\"写入\",{\"1\":{\"2095\":1,\"6510\":1,\"6511\":1}}],[\"写入0~255字节数据\",{\"1\":{\"2105\":1}}],[\"写入0\",{\"1\":{\"2093\":1}}],[\"写入指定文件名\",{\"1\":{\"2087\":2,\"2090\":2}}],[\"写入指定文件\",{\"1\":{\"2087\":2,\"2090\":2}}],[\"写入速度优化\",{\"1\":{\"243\":1}}],[\"写出需要的功能\",{\"1\":{\"7401\":1}}],[\"写出流\",{\"1\":{\"6791\":1}}],[\"写出数据\",{\"1\":{\"6338\":1}}],[\"写出速度\",{\"1\":{\"6310\":1}}],[\"写出的操作\",{\"1\":{\"6285\":1}}],[\"写出\",{\"0\":{\"6326\":1,\"6332\":1},\"1\":{\"2073\":1,\"6297\":1,\"6339\":2,\"6353\":1,\"6466\":1}}],[\"写业务代码\",{\"1\":{\"1106\":1}}],[\"任一一个功能的执行就是一个进程\",{\"1\":{\"5083\":1}}],[\"任务管理器\",{\"1\":{\"4439\":1}}],[\"任务分配\",{\"1\":{\"109\":1}}],[\"任何格式的数据\",{\"1\":{\"9832\":1}}],[\"任何地方都能获取\",{\"1\":{\"9242\":1}}],[\"任何地方都可以保存\",{\"1\":{\"9242\":1}}],[\"任何对原始对象的调用都要通过代理\",{\"1\":{\"7193\":1}}],[\"任何以前写入的数据都将被发送\",{\"1\":{\"6782\":1}}],[\"任何一个类的对象\",{\"1\":{\"5318\":1}}],[\"任何\",{\"1\":{\"5055\":1}}],[\"任何情况下\",{\"1\":{\"4240\":1}}],[\"任何引用数据类型\",{\"1\":{\"3672\":1}}],[\"任何基本数据类型+string类型都会转为string类型\",{\"1\":{\"4290\":1}}],[\"任何基本数据类型\",{\"1\":{\"3672\":1}}],[\"任何元素访问前必须初始化\",{\"1\":{\"3562\":1}}],[\"任何技术通常都会有一些相关的设置信息\",{\"1\":{\"963\":1}}],[\"任意大小的数据\",{\"1\":{\"9790\":1}}],[\"任意匹配\",{\"0\":{\"8855\":1}}],[\"任意\",{\"1\":{\"8839\":1,\"8848\":1,\"8854\":1,\"8857\":1}}],[\"任意精度的有符号十进制定点数\",{\"1\":{\"1874\":1}}],[\"任意一个包装类\",{\"1\":{\"1849\":1}}],[\"任意区间随机数公式\",{\"1\":{\"1804\":1}}],[\"第五个实现类\",{\"1\":{\"5811\":1}}],[\"第四个实现类\",{\"1\":{\"5810\":1}}],[\"第11次添加数据\",{\"1\":{\"5653\":1}}],[\"第5个文件就需要排队了\",{\"1\":{\"5099\":1}}],[\"第2~8个bit表示e指数\",{\"1\":{\"3105\":1}}],[\"第一次创建session时\",{\"1\":{\"9764\":1}}],[\"第一次访问时创建servlet对象\",{\"1\":{\"8751\":1}}],[\"第一次调用add\",{\"1\":{\"5660\":1}}],[\"第一种\",{\"1\":{\"4581\":1}}],[\"第一种把<root\",{\"1\":{\"952\":1}}],[\"第一个添加的用户\",{\"1\":{\"10726\":1}}],[\"第一个参数设置为null\",{\"1\":{\"8146\":1}}],[\"第一个参数是要设置的\",{\"1\":{\"7951\":1,\"7954\":1}}],[\"第一个形参是方法引用中的方法的调用者\",{\"1\":{\"7456\":1}}],[\"第一个实现类\",{\"1\":{\"5807\":1}}],[\"第一个访问某项资源的任务必须锁定这项资源\",{\"1\":{\"5358\":1}}],[\"第一个内层数组的长度\",{\"1\":{\"3567\":1}}],[\"第一个bit表示正负\",{\"1\":{\"3105\":1}}],[\"第一个单词首字母小写\",{\"1\":{\"3069\":1}}],[\"第一个表示键的类型\",{\"1\":{\"2578\":1}}],[\"第一代\",{\"1\":{\"2833\":1}}],[\"第三列倒排索引包含的信息为\",{\"1\":{\"10011\":1}}],[\"第三个添加的用户\",{\"1\":{\"10726\":1}}],[\"第三个\",{\"1\":{\"6426\":1}}],[\"第三个实现类\",{\"1\":{\"5809\":1}}],[\"第三代\",{\"1\":{\"2835\":1}}],[\"第三次引入的api是成功的\",{\"1\":{\"1622\":1}}],[\"第三方工具对拷\",{\"0\":{\"9096\":1}}],[\"第三方o\",{\"1\":{\"7795\":1}}],[\"第三方jar包\",{\"0\":{\"6634\":1}}],[\"第三方api\",{\"0\":{\"1170\":1},\"1\":{\"1177\":1}}],[\"第三方bean属性\",{\"0\":{\"586\":1}}],[\"第二种\",{\"1\":{\"4582\":1}}],[\"第二种就是单独给mapper下目录配置debug模式\",{\"1\":{\"952\":1}}],[\"第二代\",{\"1\":{\"2834\":1}}],[\"第二个添加的用户\",{\"1\":{\"10726\":1}}],[\"第二个是设置的\",{\"1\":{\"7951\":1,\"7954\":1}}],[\"第二个问题是如何才能区别unicode和ascii\",{\"1\":{\"6426\":1}}],[\"第二个实现类\",{\"1\":{\"5808\":1}}],[\"第二个单词开始每个单词首字母大写\",{\"1\":{\"3069\":1}}],[\"第二个表示值的类型\",{\"1\":{\"2578\":1}}],[\"第二个参数默认是\",{\"1\":{\"1898\":1}}],[\"第二个参数toffset\",{\"1\":{\"1454\":1}}],[\"第二个参数可选\",{\"1\":{\"1434\":1}}],[\"那就需要将pattern与matcher一起合作\",{\"1\":{\"2744\":1}}],[\"那么忽略他是副本集\",{\"1\":{\"10790\":1}}],[\"那么tieba\",{\"1\":{\"9732\":1}}],[\"那么treeset的构造函数需要传入参数\",{\"1\":{\"5793\":1}}],[\"那么多个服务器之间cookie可以共享setdomain\",{\"1\":{\"9732\":1}}],[\"那么多个类无需再定义这些属性和行为\",{\"1\":{\"3999\":1}}],[\"那么我们以后按照要求将不同层的代码写在不同的包下\",{\"1\":{\"9581\":1}}],[\"那么我们就可以从内存中\",{\"1\":{\"7067\":1}}],[\"那么在\",{\"1\":{\"8853\":1}}],[\"那么在路径的前面就必须要加\",{\"1\":{\"8852\":1}}],[\"那么在实现类没有重写此方法的情况下\",{\"1\":{\"4532\":1}}],[\"那么第一个访问的人等待的时间就比较长\",{\"1\":{\"8749\":1}}],[\"那么该方法将什么都不返回\",{\"1\":{\"8935\":1}}],[\"那么该异常需要在目标接口的抽象方法上进行声明\",{\"1\":{\"7420\":1}}],[\"那么该变量就不能再访问子类中添加的属性和方法\",{\"1\":{\"4132\":1}}],[\"那么类所属的类就是class类\",{\"1\":{\"6966\":1}}],[\"那么user\",{\"1\":{\"6131\":1}}],[\"那么必须有一个file对象\",{\"1\":{\"6115\":1}}],[\"那么方法参数类型是e的方法\",{\"1\":{\"6037\":1}}],[\"那么方法体中可以不必使用return语句\",{\"1\":{\"3741\":1}}],[\"那么为什么要有泛型呢\",{\"1\":{\"5950\":1}}],[\"那么hashcode一定相同\",{\"1\":{\"5760\":1}}],[\"那么当集合中的数据过多时\",{\"1\":{\"5725\":1}}],[\"那么当前logger将会继承上级的级别\",{\"1\":{\"952\":1}}],[\"那么所有实现了collection接口的集合类都有一个iterator\",{\"1\":{\"5572\":1}}],[\"那么所定义的注解可以用于任何地方\",{\"1\":{\"4998\":1}}],[\"那么一个线程拿到锁\",{\"1\":{\"5327\":1}}],[\"那么编译器都为我们做了什么呢\",{\"1\":{\"5129\":1}}],[\"那么value名称是不能呢省略的\",{\"1\":{\"4937\":1}}],[\"那么注解仅起到标识的作用\",{\"1\":{\"4935\":1}}],[\"那么应该对代码进行排查\",{\"1\":{\"4788\":1}}],[\"那么变量保存的其实是值所在内存的内存地址\",{\"1\":{\"4654\":1}}],[\"那么只是将值复制给另一个变量\",{\"1\":{\"4653\":1}}],[\"那么就可以继续调用该对象的方法\",{\"1\":{\"4619\":1}}],[\"那么子类在没有重写此方法的情况下\",{\"1\":{\"4531\":1}}],[\"那么整个内部的完整结构最好使用内部类\",{\"1\":{\"4304\":1,\"4345\":1}}],[\"那么经过大小写的转换只要是true\",{\"1\":{\"4276\":1}}],[\"那么z\",{\"1\":{\"4238\":1}}],[\"那么y\",{\"1\":{\"4236\":1}}],[\"那么\",{\"1\":{\"4234\":1}}],[\"那么如果该方法适用很多类\",{\"1\":{\"4135\":1}}],[\"那么参数就必须传递该类生成的对象\",{\"1\":{\"4135\":1}}],[\"那么优先选择三元运算符\",{\"1\":{\"3324\":1}}],[\"那么右边不参与运算\",{\"1\":{\"3296\":1}}],[\"那么调用者是类或者null也可以\",{\"1\":{\"2281\":1,\"7175\":1}}],[\"那么可以考虑使用\",{\"1\":{\"1777\":1}}],[\"那么重新执行查询操作\",{\"1\":{\"1299\":1}}],[\"那对应的操作方式自然也有所不同\",{\"1\":{\"964\":1}}],[\"那对logback很快就会得心应手\",{\"1\":{\"944\":1}}],[\"那整合将毫无意义\",{\"1\":{\"964\":1}}],[\"则使用默认主节点配置\",{\"1\":{\"10539\":1}}],[\"则使用该方法\",{\"1\":{\"8981\":1,\"8984\":1}}],[\"则索引首先按userid正序排序\",{\"1\":{\"10369\":1}}],[\"则更新一个文档\",{\"1\":{\"10283\":1}}],[\"则更新符合查询条件的多个文档\",{\"1\":{\"10283\":1}}],[\"则主键就是该值\",{\"1\":{\"10266\":1}}],[\"则继续处理数组中的主文档\",{\"1\":{\"10250\":1}}],[\"则执行无序插入\",{\"1\":{\"10250\":1}}],[\"则按顺序插入数组中的文档\",{\"1\":{\"10250\":1}}],[\"则按照声明的先后顺序执行\",{\"1\":{\"4558\":1,\"4566\":1}}],[\"则相当于表的行\",{\"1\":{\"9915\":1}}],[\"则会隐式创建\",{\"1\":{\"10254\":1}}],[\"则会自动创建集合\",{\"1\":{\"10230\":1}}],[\"则会话就会持续建立着\",{\"1\":{\"9655\":1}}],[\"则会进入到doget方法中进行执行\",{\"1\":{\"8819\":1}}],[\"则服务器会销毁该session\",{\"1\":{\"9200\":1}}],[\"则进入到dopost方法\",{\"1\":{\"8819\":1}}],[\"则进入相应case结构中\",{\"1\":{\"3363\":1}}],[\"则将来访问tomcat时\",{\"1\":{\"8442\":1}}],[\"则回滚事务\",{\"1\":{\"8148\":1}}],[\"则提交事务\",{\"1\":{\"8148\":1}}],[\"则无法保证事务\",{\"1\":{\"8141\":1}}],[\"则整体返回true\",{\"1\":{\"7676\":1}}],[\"则写法与构造器引用一致\",{\"1\":{\"7529\":1}}],[\"则先会初始化它的父类\",{\"1\":{\"7027\":1}}],[\"则先去判断hash值是否相同\",{\"1\":{\"5729\":1}}],[\"则接受连接\",{\"1\":{\"6807\":1}}],[\"则建立客户端到服务器的通信线路\",{\"1\":{\"6790\":1}}],[\"则流将返回\",{\"1\":{\"6781\":1}}],[\"则目录下的同名文件不会被覆盖\",{\"1\":{\"6230\":1}}],[\"则目录下有同名文件将被覆盖\",{\"1\":{\"6229\":1}}],[\"则与已经存在指定索引位置上数据以链表的方式存储\",{\"1\":{\"5742\":1}}],[\"则需要在mongodb实例启动时使用选项\",{\"1\":{\"10642\":1}}],[\"则需要使用投影查询\",{\"1\":{\"10316\":1}}],[\"则需要使用输入\",{\"1\":{\"6113\":1}}],[\"则需要先触发其父类的初始化\",{\"1\":{\"7019\":1}}],[\"则需要调用a所在类的equals方法\",{\"1\":{\"5737\":1}}],[\"则需要运算时就进行类型转换\",{\"1\":{\"3252\":1}}],[\"则扩容\",{\"1\":{\"5652\":1}}],[\"则其子类将自动具有该注解\",{\"1\":{\"5005\":1}}],[\"则该流将抛出\",{\"1\":{\"6783\":1}}],[\"则该对象的类必须实现\",{\"1\":{\"5719\":1}}],[\"则该方法不再被建议使用\",{\"1\":{\"5036\":1}}],[\"则该\",{\"1\":{\"4960\":1}}],[\"则该class必须有main方法\",{\"1\":{\"2923\":1}}],[\"则有以下注意点\",{\"1\":{\"5756\":1}}],[\"则有\",{\"1\":{\"4956\":1}}],[\"则在列出枚举值时也必须对应的传入参数\",{\"1\":{\"4834\":1}}],[\"则子类重写的方法也不能使用throws\",{\"1\":{\"4785\":1}}],[\"则子类重写的方法的返回值类型必须是相同的基本数据类型\",{\"1\":{\"4052\":1}}],[\"则子类重写的方法的返回值类型可以是a类或a类的子类\",{\"1\":{\"4051\":1}}],[\"则子类重写的方法的返回值类型只能是void\",{\"1\":{\"4050\":1}}],[\"则程序运行终止\",{\"1\":{\"4774\":1}}],[\"则要求子类一定声明在父类的上面\",{\"1\":{\"4758\":1}}],[\"则谁声明在上\",{\"1\":{\"4758\":1}}],[\"则get\",{\"1\":{\"4575\":1}}],[\"则只能被static修饰\",{\"1\":{\"4552\":1}}],[\"则此方法应显示地声明抛出异常\",{\"1\":{\"4767\":1}}],[\"则此实现类就可以实例化\",{\"1\":{\"4507\":1}}],[\"则此类继承于java\",{\"1\":{\"4023\":1}}],[\"则静态变量在内存中也只会存在一份\",{\"1\":{\"4385\":1}}],[\"则这样的方法通常被声明为类方法\",{\"1\":{\"4368\":1}}],[\"则类a就是内部类\",{\"1\":{\"4302\":1}}],[\"则调用string重新的equals判断两个name是否相等\",{\"1\":{\"4241\":1}}],[\"则默认的当前路径在系统属性user\",{\"1\":{\"6129\":1}}],[\"则默认父类为java\",{\"1\":{\"4203\":1}}],[\"则默认调用的是父类中空参的构造器\",{\"1\":{\"4096\":1}}],[\"则\",{\"1\":{\"4189\":1}}],[\"则编译报错\",{\"1\":{\"4102\":1}}],[\"则必须先与url建立连接\",{\"1\":{\"6896\":1}}],[\"则必须有一个被迭代的集合\",{\"1\":{\"5576\":1}}],[\"则必须能处理掉子类的异常\",{\"1\":{\"4783\":1}}],[\"则必须能\",{\"1\":{\"4482\":1}}],[\"则必须显式的使用\",{\"1\":{\"4082\":1}}],[\"则必须显式的使用super\",{\"1\":{\"4079\":1}}],[\"则必须至少有一个类需要以全类名的方式显示\",{\"1\":{\"3959\":1}}],[\"则仍需要显式导入\",{\"1\":{\"3963\":1}}],[\"则仍然继续向下执行其他case结构中的执行语句\",{\"1\":{\"3364\":1}}],[\"则可以将path设置为\",{\"1\":{\"9730\":1}}],[\"则可以让每个枚举值分别来实现该方法\",{\"1\":{\"4868\":1}}],[\"则可以作为单例模式的实现方式\",{\"1\":{\"4835\":1}}],[\"则可以通过在应用启动时直接产生一个单例对象\",{\"1\":{\"4417\":1}}],[\"则可以省略import结构\",{\"1\":{\"3952\":1,\"3953\":1}}],[\"则可以标记多个\",{\"1\":{\"2957\":1}}],[\"则并列写出即可\",{\"1\":{\"3950\":1}}],[\"则指定为无名包\",{\"1\":{\"3927\":1}}],[\"则最多有\",{\"1\":{\"3904\":1}}],[\"则系统会通过如下三个步骤来对该类进行初始化\",{\"1\":{\"7008\":1}}],[\"则系统不再提供默认构造器\",{\"1\":{\"3878\":1}}],[\"则系统默认提供一个空参的构造器\",{\"1\":{\"3873\":1}}],[\"则方法声明时\",{\"1\":{\"3723\":1}}],[\"则不要创建root超管用户\",{\"1\":{\"10707\":1}}],[\"则不要合并\",{\"1\":{\"4777\":1}}],[\"则不会插入新文档\",{\"1\":{\"10282\":1}}],[\"则不会有泛型限制\",{\"1\":{\"2401\":1}}],[\"则不影响另外一个对象属性a的值\",{\"1\":{\"3643\":1}}],[\"则每个对象都独立的拥有一套类的属性\",{\"1\":{\"3642\":1}}],[\"则是死循环\",{\"1\":{\"3385\":1}}],[\"则退出\",{\"1\":{\"3385\":1}}],[\"则变负数\",{\"1\":{\"3307\":1}}],[\"则取默认的int型\",{\"1\":{\"3173\":1}}],[\"则取决于系统中垃圾回收算法的实现以及系统执行时的情况\",{\"1\":{\"2309\":1}}],[\"则文件名必须与类名一样\",{\"1\":{\"2909\":1}}],[\"则为修改值\",{\"1\":{\"3506\":1}}],[\"则为修改\",{\"1\":{\"2589\":1}}],[\"则为修改value\",{\"1\":{\"2587\":1}}],[\"则立即将它们写入预期目标\",{\"1\":{\"2108\":1}}],[\"则结果为偶数\",{\"1\":{\"1928\":1}}],[\"则表示o1\",{\"1\":{\"1783\":1}}],[\"则返回一个空流\",{\"1\":{\"7625\":1}}],[\"则返回0\",{\"1\":{\"6778\":1}}],[\"则返回值\",{\"1\":{\"2039\":1,\"2045\":1}}],[\"则返回null\",{\"1\":{\"1958\":1,\"2594\":1,\"6853\":1}}],[\"则返回零\",{\"1\":{\"1754\":1}}],[\"则返回负整数\",{\"1\":{\"1753\":1}}],[\"则返回正整数\",{\"1\":{\"1752\":1}}],[\"则返回\",{\"1\":{\"1434\":1,\"2040\":1,\"2046\":1,\"2057\":1,\"6776\":1,\"6779\":1,\"6854\":1,\"7965\":1,\"7966\":1}}],[\"则后面其他位置即使配置了debug级别的日志\",{\"1\":{\"952\":1}}],[\"则低于warn的信息都不会输出\",{\"1\":{\"952\":1}}],[\"|grep\",{\"1\":{\"10164\":1}}],[\"||表示\",{\"1\":{\"3297\":1}}],[\"||\",{\"1\":{\"3290\":1,\"3297\":1,\"6449\":1}}],[\"|\",{\"1\":{\"952\":5,\"3287\":1,\"3297\":1,\"4699\":13,\"10511\":1}}],[\"|findstr\",{\"1\":{\"746\":2}}],[\"白色\",{\"1\":{\"952\":1}}],[\"青色\",{\"1\":{\"952\":1}}],[\"粗红\",{\"1\":{\"952\":1}}],[\"洋红\",{\"1\":{\"952\":2}}],[\"彩色日志格式\",{\"1\":{\"952\":1}}],[\"彩色日志\",{\"1\":{\"952\":1}}],[\"来帮你完成\",{\"1\":{\"10835\":1}}],[\"来管理用户对实例的访问\",{\"1\":{\"10646\":1}}],[\"来设置额外票数\",{\"1\":{\"10622\":1}}],[\"来定义session的有效时间\",{\"1\":{\"9773\":1}}],[\"来同时配置多个值\",{\"1\":{\"9297\":1}}],[\"来通信\",{\"1\":{\"9212\":1}}],[\"来获取具体的key\",{\"1\":{\"9689\":1}}],[\"来获取数据\",{\"1\":{\"9548\":1}}],[\"来获取流中的数据\",{\"1\":{\"9040\":1}}],[\"来获取对应的值\",{\"1\":{\"8947\":1}}],[\"来调用的\",{\"1\":{\"8910\":1}}],[\"来调用具体的功能结构\",{\"1\":{\"3613\":1}}],[\"来手动实现server方法\",{\"1\":{\"8816\":1}}],[\"来作参数的构造器\",{\"1\":{\"8352\":1}}],[\"来说\",{\"1\":{\"8168\":1}}],[\"来储存查询到的数据\",{\"1\":{\"8041\":1}}],[\"来检索结果\",{\"1\":{\"7963\":1}}],[\"来隐藏第三方api\",{\"1\":{\"7857\":1}}],[\"来并行执行操作\",{\"1\":{\"7545\":1}}],[\"来包含通用操作\",{\"1\":{\"7307\":1}}],[\"来包含属性\",{\"1\":{\"3820\":1}}],[\"来操作内存中的类的一切元素\",{\"1\":{\"6972\":1}}],[\"来找到服务端\",{\"1\":{\"6813\":1}}],[\"来表示\",{\"1\":{\"6121\":1,\"6122\":1,\"7950\":1,\"8242\":1}}],[\"来创建多线程\",{\"1\":{\"5469\":1}}],[\"来控制线程\",{\"1\":{\"5372\":1}}],[\"来解决线程的安全问题\",{\"1\":{\"5308\":1}}],[\"来指定排序的方式\",{\"1\":{\"10335\":1}}],[\"来指定集合保存的类型\",{\"1\":{\"5051\":1}}],[\"来指定编码的字符集\",{\"1\":{\"1505\":1}}],[\"来了\",{\"1\":{\"4872\":1}}],[\"来实现调用被代理类方法的方法\",{\"1\":{\"7270\":1}}],[\"来实现一个多线程断点下载的功能\",{\"1\":{\"6528\":1}}],[\"来实现人为的不限制次数的循环\",{\"1\":{\"3411\":1}}],[\"来实例化一个匿名类\",{\"1\":{\"4459\":1}}],[\"来跳出指定标识的循环\",{\"1\":{\"3432\":1}}],[\"来将其后的字符转变为特殊字符型常量\",{\"1\":{\"3122\":1}}],[\"来启动\",{\"1\":{\"2864\":1}}],[\"来启用\",{\"1\":{\"2721\":1}}],[\"来进行格式化\",{\"1\":{\"1713\":1}}],[\"来使用变量\",{\"1\":{\"952\":1}}],[\"来覆盖源码中设定的属性\",{\"1\":{\"673\":1}}],[\"此输出使用从副本集的其他成员发送的心跳包中获得的数据反映副本集的当前状态\",{\"1\":{\"10552\":1}}],[\"此运行时类\",{\"1\":{\"6969\":1}}],[\"此过程就称为类的加载\",{\"1\":{\"6969\":1}}],[\"此数据报将要发往该主机或者是从该主机接收到的\",{\"1\":{\"6860\":1}}],[\"此数据报将要发往该机器或者是从该机器接收到的\",{\"1\":{\"6859\":1}}],[\"此方法也就作为了被代理类对象要调用的方法\",{\"1\":{\"7279\":1}}],[\"此方法在接收到数据报前一直阻塞\",{\"1\":{\"6850\":1}}],[\"此方法不同于集合直接调用remove\",{\"1\":{\"2467\":1,\"5602\":1}}],[\"此套接字连接到的远程端口号\",{\"1\":{\"6778\":1}}],[\"此套接字连接到的远程\",{\"1\":{\"6776\":1}}],[\"此类执行效率高于hashmap\",{\"1\":{\"5828\":1}}],[\"此类不能被其他类所继承\",{\"1\":{\"3974\":1}}],[\"此哈希值经过某种算法计算以后\",{\"1\":{\"5858\":1}}],[\"此哈希值\",{\"1\":{\"5732\":1}}],[\"此外\",{\"1\":{\"5008\":1,\"10361\":1}}],[\"此对象满足throws后异常类型时\",{\"1\":{\"4771\":1}}],[\"此对象也必须声明为static的\",{\"1\":{\"4425\":1,\"5350\":1}}],[\"此子类方可实例化\",{\"1\":{\"4450\":1}}],[\"此处将列举jdk所有内置的函数式接口\",{\"1\":{\"2627\":1}}],[\"此处使用的是redistemplate\",{\"1\":{\"1023\":1}}],[\"此处设置字符集\",{\"1\":{\"952\":2}}],[\"此日志文件只记录error级别的\",{\"1\":{\"952\":1}}],[\"此日志文件只记录warn级别的\",{\"1\":{\"952\":1}}],[\"此日志文件只记录info级别的\",{\"1\":{\"952\":1}}],[\"此日志appender是为开发使用\",{\"1\":{\"952\":1}}],[\"此属性生效\",{\"1\":{\"952\":1}}],[\"此时再启动服务\",{\"1\":{\"10741\":1}}],[\"此时执行\",{\"1\":{\"10575\":1}}],[\"此时只有一个\",{\"1\":{\"10545\":1,\"10558\":1}}],[\"此时已经可以读到数据库了\",{\"1\":{\"10531\":1}}],[\"此时默认不能读写\",{\"1\":{\"10530\":1}}],[\"此时注意过滤器执行的顺序\",{\"1\":{\"9300\":1}}],[\"此时放行前的逻辑不会再执行了\",{\"1\":{\"9279\":1}}],[\"此时无法取值\",{\"1\":{\"9184\":1}}],[\"此时可以取到值\",{\"1\":{\"9184\":1}}],[\"此时可以解析特殊字符了\",{\"1\":{\"486\":1}}],[\"此时我们需要分别在doget方法和dopost方法中\",{\"1\":{\"8999\":1}}],[\"此时我们将永远无法操作该对象\",{\"1\":{\"5134\":1}}],[\"此时连接的初始化工作均已完成\",{\"1\":{\"8238\":1}}],[\"此时又获取了要调用的方法和参数列表\",{\"1\":{\"7296\":1}}],[\"此时发生了如下事情\",{\"1\":{\"7292\":1}}],[\"此时客户端与服务端连接成功\",{\"1\":{\"6824\":1}}],[\"此时服务端将一直处于监听状态\",{\"1\":{\"6822\":1}}],[\"此时参数类型变为string\",{\"1\":{\"6001\":1}}],[\"此时应将多个参数一起放在尖括号内\",{\"1\":{\"5989\":1}}],[\"此时应执行resize扩容操作这个\",{\"1\":{\"5889\":1}}],[\"此时应比较key1和已经存在的一个或多个数据的哈希值\",{\"1\":{\"5860\":1}}],[\"此时此索引位置上的所数据改为使用红黑树存储\",{\"1\":{\"5881\":1}}],[\"此时key1\",{\"1\":{\"5861\":1,\"5863\":1,\"5866\":1}}],[\"此时两个进程陷入死锁状态\",{\"1\":{\"5416\":1}}],[\"此时synchronized变成上锁状态\",{\"1\":{\"5355\":1}}],[\"此时sort方法将按照重写的compare进行排序\",{\"1\":{\"1780\":1}}],[\"此时它已具备了运行的条件\",{\"1\":{\"5289\":1}}],[\"此时线程a就进入阻塞状态\",{\"1\":{\"5212\":1,\"5225\":1}}],[\"此时这种对象就是一个垃圾\",{\"1\":{\"5134\":1}}],[\"此时常量名要大写\",{\"1\":{\"3982\":1}}],[\"此时的文件默认在当前的module下\",{\"1\":{\"7049\":1}}],[\"此时的key1\",{\"1\":{\"5859\":1}}],[\"此时的存储\",{\"1\":{\"5522\":1}}],[\"此时的资源释放\",{\"1\":{\"4746\":1}}],[\"此时的\",{\"1\":{\"3982\":1}}],[\"此时的字符串值声明在字符串常量池中\",{\"1\":{\"3210\":1}}],[\"此时实参赋给形参的是实参存储数据的地址值\",{\"1\":{\"3785\":1}}],[\"此时内存中有1个数组\",{\"1\":{\"3659\":1}}],[\"此时内层循环的循环体一共执行了m\",{\"1\":{\"3449\":1}}],[\"此时变成了\",{\"1\":{\"3162\":1}}],[\"此时字符\",{\"1\":{\"2726\":1}}],[\"此时每行都能单独匹配^或$\",{\"1\":{\"2723\":1}}],[\"此时指针指向1\",{\"1\":{\"2469\":1}}],[\"此时使用collection接口的方法就会被泛型类型限制了\",{\"1\":{\"2401\":1}}],[\"此时就会执行放行后的逻辑\",{\"1\":{\"9278\":1}}],[\"此时就变成类调用该方法了\",{\"1\":{\"5343\":1}}],[\"此时就需要指定一个舍入策略\",{\"1\":{\"1904\":1}}],[\"此时就必须手动指定配置类了\",{\"1\":{\"670\":1}}],[\"此时不会产生新的对象\",{\"1\":{\"1536\":1}}],[\"此时该对象已经包含了各种信息\",{\"1\":{\"1239\":1}}],[\"此时需要使用urlconnection\",{\"1\":{\"6896\":1}}],[\"此时需要为\",{\"1\":{\"668\":1}}],[\"此时需要手动将该配置文件激活\",{\"1\":{\"474\":1}}],[\"此时\",{\"1\":{\"401\":1,\"3543\":1,\"3961\":1,\"5300\":1,\"6032\":1,\"9938\":1,\"10582\":1}}],[\"从备份文件中还原恢复mongodb数据\",{\"1\":{\"10696\":1}}],[\"从节点是没有读写权限的\",{\"1\":{\"10607\":1}}],[\"从节点读写\",{\"0\":{\"10605\":1}}],[\"从节点\",{\"1\":{\"10597\":2}}],[\"从主节点通过复制操作以维护相同的数据集\",{\"1\":{\"10456\":1}}],[\"从权限的角度来看\",{\"1\":{\"10205\":1}}],[\"从中取出数据\",{\"1\":{\"9746\":1}}],[\"从浏览器发出请求到服务端响应数据给前端之后\",{\"1\":{\"9654\":1}}],[\"从浏览器发送\",{\"1\":{\"9166\":1,\"9167\":1}}],[\"从servletrequest中移除属性时调用\",{\"1\":{\"9403\":1}}],[\"从servletcontext中移除属性时调用\",{\"1\":{\"9365\":1}}],[\"从httpsession中移除属性时调用\",{\"1\":{\"9384\":1}}],[\"从请求中可以解析出三部分内容分别是`localhost\",{\"1\":{\"8719\":1}}],[\"从池子里拿出一个数据库连接\",{\"1\":{\"8324\":1}}],[\"从连接池拿出一个连接对象\",{\"1\":{\"8233\":1}}],[\"从数据表中读取blob类型字段\",{\"0\":{\"8087\":1}}],[\"从数组底层的运行机制来看\",{\"1\":{\"3533\":1}}],[\"从嵌套集合生成的流中\",{\"1\":{\"7665\":1}}],[\"从班级对象集合中\",{\"1\":{\"7660\":1}}],[\"从学生对象集合中\",{\"1\":{\"7657\":1}}],[\"从一个流中获取新流\",{\"1\":{\"7633\":1}}],[\"从流中排除某些元素\",{\"1\":{\"7615\":1}}],[\"从官网直接下载安装即可\",{\"1\":{\"7319\":1}}],[\"从java\",{\"1\":{\"7312\":1}}],[\"从jdk1\",{\"1\":{\"5947\":1}}],[\"从jdk\",{\"1\":{\"5378\":1}}],[\"从jdk5\",{\"1\":{\"4878\":1}}],[\"从键盘输入字符串\",{\"1\":{\"6445\":1}}],[\"从键盘读入个数不确定的整数\",{\"1\":{\"3413\":1}}],[\"从文件中\",{\"1\":{\"6347\":1}}],[\"从文件系统中的某个文件中获得输出字节\",{\"1\":{\"6201\":1}}],[\"从文件系统中的某个文件中获得输入字节\",{\"1\":{\"6194\":1}}],[\"从\",{\"1\":{\"5558\":1,\"7951\":1,\"7954\":1,\"10444\":1,\"10448\":1,\"10453\":1}}],[\"从本质上讲\",{\"1\":{\"4472\":1}}],[\"从过程上看\",{\"0\":{\"4111\":1}}],[\"从结果上看\",{\"0\":{\"4108\":1}}],[\"从实体中寻找解决问题相关的属性和功能\",{\"1\":{\"3609\":1}}],[\"从大到小排序\",{\"1\":{\"2492\":1}}],[\"从而使多台机器拥有同一数据的多个副本\",{\"1\":{\"10439\":1}}],[\"从而使众多的计算机可以方便地互相传递信息\",{\"1\":{\"6643\":1}}],[\"从而避免了常规数据库连接操作中可能出现的资源泄露\",{\"1\":{\"8240\":1}}],[\"从而减少了系统的响应时间\",{\"1\":{\"8238\":1}}],[\"从而大大简化和加快了开发过程\",{\"1\":{\"7800\":1}}],[\"从而允许把这种二进制流持久地保存在磁盘上\",{\"1\":{\"6538\":1}}],[\"从而实现断点下载或上传的功能\",{\"1\":{\"6528\":1}}],[\"从而可以在声明集合变量\",{\"1\":{\"5948\":1}}],[\"从而可以解决多线程并发访问集合时的线程安全问题\",{\"1\":{\"2481\":1}}],[\"从而创造了多个对象\",{\"1\":{\"5348\":1}}],[\"从而简化了方法的调用\",{\"1\":{\"4368\":1}}],[\"从而提高系统的可扩展性\",{\"1\":{\"3813\":1}}],[\"从而程序无法继续\",{\"1\":{\"2118\":1,\"6344\":1}}],[\"从集合中删除指定的元素\",{\"1\":{\"2428\":1}}],[\"从此套接字接收数据报包\",{\"1\":{\"6850\":1}}],[\"从此套接字发送数据报包\",{\"1\":{\"6849\":1}}],[\"从此扫描仪查找并返回下一个完整令牌\",{\"1\":{\"2327\":1,\"2784\":1}}],[\"从此输入流中将最多\",{\"1\":{\"2045\":1}}],[\"从off开始\",{\"1\":{\"2096\":1}}],[\"从off处开始读\",{\"1\":{\"2057\":1}}],[\"从输入流中读取数据的下一个字节\",{\"1\":{\"2039\":1}}],[\"从1开始算\",{\"1\":{\"1598\":1}}],[\"从左开始算\",{\"1\":{\"1598\":1}}],[\"从0开始步进\",{\"1\":{\"3464\":1}}],[\"从0开始的自增数字\",{\"1\":{\"940\":1}}],[\"从0添加到两万\",{\"1\":{\"1563\":1}}],[\"从第一个字符开始比较\",{\"1\":{\"1444\":1}}],[\"从第几页开始查询\",{\"1\":{\"1241\":1}}],[\"从该索引处反向搜索\",{\"1\":{\"1437\":1}}],[\"从lib目录中查找\",{\"1\":{\"740\":1}}],[\"新密码\",{\"1\":{\"10730\":1}}],[\"新创建角色可以继承其他角色的权限\",{\"1\":{\"10654\":1}}],[\"新创建的角色会继承包含的角色所有的权限\",{\"1\":{\"10654\":1}}],[\"新应用\",{\"1\":{\"10040\":1}}],[\"新浪\",{\"1\":{\"9847\":1}}],[\"新stream已经是元素修改后的了\",{\"1\":{\"7634\":1}}],[\"新写入的内容会覆盖旧的内容\",{\"1\":{\"6520\":1}}],[\"新元素指向旧元素\",{\"1\":{\"5880\":1}}],[\"新生的线程对象处于新建状态\",{\"1\":{\"5288\":1}}],[\"新建的javaweb项目可能会出现未配置项目导出方式\",{\"1\":{\"8635\":1}}],[\"新建的module的sdk默认是project设置的sdk\",{\"1\":{\"7323\":1}}],[\"新建一个空project\",{\"1\":{\"8523\":1}}],[\"新建工程\",{\"0\":{\"8522\":1}}],[\"新建\",{\"1\":{\"5288\":1}}],[\"新建person\",{\"1\":{\"5060\":1}}],[\"新建日志文件的命名规则\",{\"1\":{\"936\":1}}],[\"新编译后的文件会覆盖原文件\",{\"1\":{\"2892\":1}}],[\"新时间日期api包\",{\"0\":{\"1624\":1}}],[\"新时间api介绍\",{\"0\":{\"1621\":1}}],[\"新的资源分配手段\",{\"1\":{\"8239\":1}}],[\"新的\",{\"1\":{\"1623\":1}}],[\"新增了foreach循环\",{\"1\":{\"5607\":1}}],[\"新增\",{\"1\":{\"1194\":1,\"1398\":1,\"1399\":1,\"1400\":1,\"1401\":1}}],[\"新版的idea默认是没有program\",{\"1\":{\"776\":1}}],[\"难易读取\",{\"1\":{\"933\":1}}],[\"警示等各种附加功能的日志了\",{\"1\":{\"925\":1}}],[\"警告\",{\"1\":{\"783\":1,\"1606\":1,\"9463\":1,\"10176\":1,\"10186\":1,\"10287\":1,\"10606\":1,\"10736\":1}}],[\"且都获得了\",{\"1\":{\"10619\":1}}],[\"且获得了\",{\"1\":{\"10618\":1}}],[\"且需要手动指定参数\",{\"1\":{\"10139\":1}}],[\"且常驻内存\",{\"1\":{\"9244\":1}}],[\"且共享数据成功\",{\"1\":{\"9123\":1}}],[\"且request提供的方法功能更强大\",{\"1\":{\"9007\":1}}],[\"且两种方法方式的代码逻辑都是一样的\",{\"1\":{\"8999\":1}}],[\"且两个方法的其他参数和返回值相同\",{\"1\":{\"7489\":1}}],[\"且采用默认值即可\",{\"1\":{\"8836\":1}}],[\"且他们都是数组\",{\"1\":{\"8831\":1}}],[\"且自动重写了doget和dopost\",{\"1\":{\"8734\":1}}],[\"且配置好了java\",{\"1\":{\"8433\":1}}],[\"且只能查询一行数据\",{\"1\":{\"8044\":1}}],[\"且只能被赋值一次\",{\"1\":{\"3984\":1}}],[\"且指针下移\",{\"1\":{\"8004\":1}}],[\"且其他形参和返回值类型相同\",{\"1\":{\"7456\":1}}],[\"且如果\",{\"1\":{\"7367\":1}}],[\"且增强的方式是一样\",{\"1\":{\"7251\":1}}],[\"且访问权限需要足够\",{\"1\":{\"7053\":1}}],[\"且麻烦\",{\"1\":{\"5940\":1}}],[\"且要存放的位置非空\",{\"1\":{\"5868\":1}}],[\"且不易阅读\",{\"1\":{\"7889\":1}}],[\"且不同的\",{\"1\":{\"5750\":1}}],[\"且不存在重复和过界的数字\",{\"1\":{\"5324\":1}}],[\"且可重复\",{\"1\":{\"5626\":1}}],[\"且可安装内容不止有jdk\",{\"1\":{\"2874\":1}}],[\"且下一条记录无效\",{\"1\":{\"5594\":1}}],[\"且数字不是完全递减的\",{\"1\":{\"5310\":1}}],[\"且名称为value\",{\"1\":{\"4941\":1}}],[\"且有成员没有默认值\",{\"1\":{\"4937\":1}}],[\"且在使用注解时\",{\"1\":{\"4936\":1}}],[\"且该类不能再创建对象\",{\"1\":{\"4827\":1}}],[\"且该类在类路径下\",{\"1\":{\"2139\":1,\"6999\":1}}],[\"且对象不可改变\",{\"1\":{\"4827\":1}}],[\"且确定的情况下\",{\"1\":{\"4819\":1}}],[\"且会在return之前执行\",{\"1\":{\"4750\":1}}],[\"且后缀都是\",{\"1\":{\"4621\":1}}],[\"且父类中又没有无参的构造器\",{\"1\":{\"4102\":1}}],[\"且最好\",{\"1\":{\"3930\":1}}],[\"且没有执行效率的差别\",{\"1\":{\"3407\":1}}],[\"且同一个switch语句\",{\"1\":{\"3369\":1}}],[\"且运算只能是连接运算\",{\"1\":{\"3239\":1}}],[\"且取完数据后\",{\"1\":{\"2464\":1,\"5584\":1}}],[\"且close操作要方法其他异常的finally中\",{\"1\":{\"2061\":1}}],[\"且目标位置不能在硬盘中存在\",{\"1\":{\"2017\":1}}],[\"且这三个类具有不可变性\",{\"1\":{\"1636\":1}}],[\"且具有不可变性\",{\"1\":{\"1634\":1}}],[\"且默认有16个长度\",{\"1\":{\"1558\":1}}],[\"且是final不可变的\",{\"1\":{\"1555\":1}}],[\"且包含数据分析\",{\"1\":{\"925\":1}}],[\"且容易暴露信息\",{\"1\":{\"832\":1}}],[\"直连副本集\",{\"0\":{\"10810\":1}}],[\"直至当输入\",{\"1\":{\"6445\":1}}],[\"直到有一方断开连接\",{\"1\":{\"9652\":1}}],[\"直到服务器关闭\",{\"1\":{\"9244\":1}}],[\"直到互联网的出现\",{\"1\":{\"6426\":1}}],[\"直到缓冲区装满了\",{\"1\":{\"6315\":1}}],[\"直到另一线程对该对象发出\",{\"1\":{\"5444\":1}}],[\"直到线程b执行完\",{\"1\":{\"5225\":1}}],[\"直到线程b完全执行完以后\",{\"1\":{\"5212\":1}}],[\"直到异常被处理\",{\"1\":{\"4773\":1}}],[\"直到调用了java\",{\"1\":{\"4112\":1}}],[\"直到循环条件不满足\",{\"1\":{\"3385\":1}}],[\"直到遇到break关键字或此switch\",{\"1\":{\"3364\":1}}],[\"直到遇到换行符\",{\"1\":{\"2120\":1}}],[\"直观\",{\"1\":{\"925\":1}}],[\"直接上手springboot集成mongodb\",{\"1\":{\"10826\":1}}],[\"直接连接副本集\",{\"1\":{\"10813\":1}}],[\"直接连接副本集将失败\",{\"1\":{\"10517\":1}}],[\"直接连接\",{\"1\":{\"10790\":1}}],[\"直接连接mongodb服务\",{\"1\":{\"10790\":1}}],[\"直接连接文件\",{\"1\":{\"6165\":1}}],[\"直接解压即可\",{\"1\":{\"10136\":1}}],[\"直接默认项目根目录就行\",{\"1\":{\"9509\":1}}],[\"直接进行重定向\",{\"1\":{\"9139\":1}}],[\"直接修改contexttype\",{\"1\":{\"9082\":1}}],[\"直接修改server配置文件\",{\"1\":{\"8479\":1}}],[\"直接转发\",{\"1\":{\"9027\":1}}],[\"直接配置好了webservlet\",{\"1\":{\"8734\":1}}],[\"直接配置path\",{\"0\":{\"2856\":1}}],[\"直接利用现有可用连接\",{\"1\":{\"8238\":1}}],[\"直接指定basedao的泛型为orm类名\",{\"1\":{\"8190\":1}}],[\"直接在配置文件中修改\",{\"1\":{\"7875\":1}}],[\"直接报错\",{\"1\":{\"6952\":1}}],[\"直接或间接地通过网络协议与\",{\"1\":{\"6644\":1}}],[\"直接从数据源或目的地读写数据\",{\"1\":{\"6165\":1,\"6181\":1,\"6223\":1}}],[\"直接操作字符\",{\"1\":{\"6160\":1}}],[\"直接object\",{\"1\":{\"5950\":1}}],[\"直接alt\",{\"1\":{\"5755\":1}}],[\"直接添加成功\",{\"1\":{\"5734\":1}}],[\"直接添加另一个集合\",{\"1\":{\"2540\":1}}],[\"直接储存数据\",{\"1\":{\"5120\":1}}],[\"直接继承runtimeexception即可\",{\"1\":{\"4815\":1}}],[\"直接new抽象类\",{\"1\":{\"4459\":1}}],[\"直接被类调用\",{\"1\":{\"4373\":1}}],[\"直接传进去就行\",{\"1\":{\"4287\":1}}],[\"直接返回对象\",{\"1\":{\"5353\":1}}],[\"直接返回true\",{\"1\":{\"4241\":1}}],[\"直接返回false\",{\"1\":{\"2420\":1,\"4241\":2}}],[\"直接访问继承到的父类的private属性\",{\"1\":{\"4039\":1}}],[\"直接访问属性\",{\"0\":{\"3817\":1}}],[\"直接父类\",{\"1\":{\"4019\":1}}],[\"直接导入静态属性和静态方法\",{\"1\":{\"3968\":1}}],[\"直接用即可\",{\"1\":{\"7426\":1}}],[\"直接用类调用静态方法\",{\"1\":{\"4397\":1}}],[\"直接用\",{\"1\":{\"3953\":1}}],[\"直接用就行\",{\"1\":{\"3746\":1}}],[\"直接用负数将compare改成降序\",{\"1\":{\"1788\":1}}],[\"直接return\",{\"1\":{\"3724\":1}}],[\"直接定义在类的一对\",{\"1\":{\"3688\":1}}],[\"直接声明了20个对象\",{\"1\":{\"3658\":1}}],[\"直接将一个数值换成二进制数\",{\"1\":{\"3188\":1}}],[\"直接将mapper接口当实现类使用即可\",{\"1\":{\"983\":1}}],[\"直接运行会报错\",{\"0\":{\"2917\":1}}],[\"直接向一个空的集合中复制会报异常\",{\"1\":{\"2511\":1}}],[\"直接打印\",{\"1\":{\"2353\":1}}],[\"直接改的源stringbuffer\",{\"1\":{\"1584\":2}}],[\"直接与数据库字段和要进行的操作相关\",{\"1\":{\"1259\":1}}],[\"直接调用it\",{\"1\":{\"5594\":1}}],[\"直接调用即可\",{\"1\":{\"4328\":1}}],[\"直接调用string类的compareto\",{\"1\":{\"1769\":1}}],[\"直接调用就可以拼接查询条件\",{\"1\":{\"1245\":1}}],[\"直接调用mapper接口中的方法\",{\"1\":{\"991\":1}}],[\"直接设置日志等级太粗暴了\",{\"1\":{\"905\":1}}],[\"直接就可以使用了\",{\"1\":{\"521\":1}}],[\"直接使用clazz属性即可\",{\"1\":{\"8192\":1}}],[\"直接使用集合中的第一个元素进行计算\",{\"1\":{\"7710\":1}}],[\"直接使用类名访问静态变量\",{\"1\":{\"4388\":1}}],[\"直接使用很少见\",{\"1\":{\"4331\":1}}],[\"直接使用父类中定义的方法\",{\"1\":{\"4167\":1}}],[\"直接使用整数ascii码\",{\"1\":{\"3124\":1}}],[\"直接使用文件名\",{\"1\":{\"2083\":1,\"6239\":1,\"6275\":1,\"6297\":1}}],[\"直接使用即可\",{\"1\":{\"1371\":1}}],[\"直接使用测试类访问mapper接口\",{\"1\":{\"990\":1}}],[\"直接使用注入的对象log\",{\"1\":{\"888\":1,\"955\":1}}],[\"直接使用\",{\"1\":{\"494\":1,\"3664\":1}}],[\"直接可以使用内置的tomcat\",{\"1\":{\"381\":1}}],[\"再在按score倒序排序\",{\"1\":{\"10369\":1}}],[\"再从流对象中拿数据\",{\"1\":{\"8979\":1}}],[\"再设置server选项卡\",{\"1\":{\"8581\":1}}],[\"再把这些map再存到一个map里\",{\"1\":{\"8375\":1}}],[\"再存放到list中\",{\"1\":{\"8371\":1}}],[\"再验证用户名和密码\",{\"1\":{\"8219\":1}}],[\"再统一提交\",{\"1\":{\"8124\":1}}],[\"再启动客户端\",{\"1\":{\"6823\":1}}],[\"再启动springboot\",{\"1\":{\"447\":1}}],[\"再将war包放置到webapps目录下\",{\"1\":{\"8465\":1}}],[\"再将它们复合起来\",{\"1\":{\"6719\":1}}],[\"再将复制的文件\",{\"1\":{\"6524\":1}}],[\"再进行节点流的时间计算\",{\"1\":{\"6359\":1}}],[\"再进行调用\",{\"1\":{\"3737\":1}}],[\"再写出\",{\"1\":{\"6352\":1}}],[\"再关节点流\",{\"1\":{\"6340\":1}}],[\"再调用next\",{\"1\":{\"5600\":1}}],[\"再调用\",{\"1\":{\"5345\":1}}],[\"再调用remove都会报illegalstateexception\",{\"1\":{\"2468\":1,\"5603\":1}}],[\"再通过new\",{\"1\":{\"5264\":1}}],[\"再接着执行main进程\",{\"1\":{\"5221\":1}}],[\"再次创建一个子线程对象\",{\"1\":{\"5185\":1}}],[\"再次创建一个thread类的子类对象\",{\"1\":{\"5185\":1}}],[\"再复制下一个是要比同时复制两个文件要快的\",{\"1\":{\"5099\":1}}],[\"再新建一个对象时\",{\"1\":{\"4644\":1}}],[\"再增加子类独有的属性\",{\"1\":{\"4030\":1}}],[\"再提供公共的\",{\"1\":{\"3823\":1,\"3828\":1}}],[\"再用对象访问类中定义的成员\",{\"1\":{\"3650\":1}}],[\"再初始化赋值\",{\"1\":{\"3107\":1}}],[\"再导入\",{\"1\":{\"1360\":1}}],[\"再使用各种字符串处理方法和前端的美化\",{\"1\":{\"925\":1}}],[\"然后是\",{\"1\":{\"10340\":1}}],[\"然后返回文档的id\",{\"1\":{\"9925\":1}}],[\"然后实时地对数据进行搜索\",{\"1\":{\"9832\":1}}],[\"然后通过配置文件启动服务\",{\"1\":{\"10147\":1}}],[\"然后通过id获取对应的文档作为结果呈现\",{\"1\":{\"9960\":1}}],[\"然后通过文档id获取对应的文档作为结果呈现\",{\"1\":{\"9957\":1}}],[\"然后通过response响应给了浏览器\",{\"1\":{\"9701\":1}}],[\"然后通过一种算法算出他应该储存的位置\",{\"1\":{\"5727\":1}}],[\"然后servlet将数据交由\",{\"1\":{\"9564\":1}}],[\"然后放行去访问servlet\",{\"1\":{\"9275\":1}}],[\"然后设置location响应头\",{\"1\":{\"9138\":1}}],[\"然后设置静态资源映射\",{\"1\":{\"1375\":1}}],[\"然后使用请求转发器对象的forward方法进行转发\",{\"1\":{\"9111\":1}}],[\"然后使用该环境变量配置path\",{\"1\":{\"2863\":1}}],[\"然后获取字节输出流\",{\"1\":{\"9094\":1}}],[\"然后调用对象中的service方法\",{\"1\":{\"8723\":1}}],[\"然后就可以配置tomcat了\",{\"1\":{\"8579\":1}}],[\"然后选择刚配置好的tomcat\",{\"1\":{\"8604\":1}}],[\"然后选择要添加web的模块\",{\"1\":{\"8534\":1}}],[\"然后选择相应的driverclassname\",{\"1\":{\"8278\":1}}],[\"然后点击\",{\"1\":{\"8530\":1}}],[\"然后关闭连接\",{\"1\":{\"8342\":1,\"8343\":1}}],[\"然后在每个userid的值内\",{\"1\":{\"10369\":1}}],[\"然后在basedao类中\",{\"1\":{\"8191\":1}}],[\"然后在进行可视化处理了\",{\"1\":{\"927\":1}}],[\"然后继承dao接口\",{\"1\":{\"8168\":1}}],[\"然后继续进行输入操作\",{\"1\":{\"6445\":1}}],[\"然后把获取列名的方法改成获取列的别名的方法\",{\"1\":{\"8050\":1}}],[\"然后将所有操作封装\",{\"1\":{\"7984\":1}}],[\"然后将集合元素按升序\",{\"1\":{\"5718\":1}}],[\"然后利用lambda的方式调用即可\",{\"1\":{\"7407\":1}}],[\"然后用该代理对象取代原始对象\",{\"1\":{\"7193\":1}}],[\"然后生成一个代表这个类的java\",{\"1\":{\"7011\":1}}],[\"然后断点下载的时候\",{\"1\":{\"6528\":1}}],[\"然后从断点处继续代码的执行\",{\"1\":{\"5447\":1}}],[\"然后才能对其进行读写\",{\"1\":{\"6896\":1}}],[\"然后才跟着票号\",{\"1\":{\"5303\":1}}],[\"然后才自增的\",{\"1\":{\"3261\":1}}],[\"然后重新加入cpu分配的队列\",{\"1\":{\"5223\":1}}],[\"然后重写接口中的compareto方法\",{\"1\":{\"1746\":1}}],[\"然后为具体的业务创建子类继承该抽象类\",{\"1\":{\"4468\":1}}],[\"然后永久驻留内存的方式来解决\",{\"1\":{\"4417\":1}}],[\"然后赋值\",{\"1\":{\"3496\":1}}],[\"然后进入要编译的java文件目录的路径中\",{\"1\":{\"2980\":1}}],[\"然后换行\",{\"1\":{\"2912\":1}}],[\"然后反复使用该对象\",{\"1\":{\"2709\":1}}],[\"然后\",{\"1\":{\"2680\":1}}],[\"然后一次读取多个字符\",{\"1\":{\"2050\":1}}],[\"然后再添加节点\",{\"1\":{\"10587\":1}}],[\"然后再存放到list\",{\"1\":{\"8377\":1}}],[\"然后再调用map进行进一步的操作\",{\"1\":{\"7665\":1}}],[\"然后再调用创建文件或目录的方法进行创建\",{\"1\":{\"1996\":1,\"6141\":1}}],[\"然后再将s1作为锁\",{\"1\":{\"5429\":1}}],[\"然后再将s2作为锁\",{\"1\":{\"5428\":1}}],[\"然后再重新加入cpu分配的队列\",{\"1\":{\"5228\":1}}],[\"然后再去真正的解决异常\",{\"1\":{\"4680\":1}}],[\"然后再进行赋值\",{\"1\":{\"3495\":1}}],[\"然后再进行计算\",{\"1\":{\"3153\":1}}],[\"然后再进行储值的\",{\"1\":{\"3107\":1}}],[\"然后再使用工具读取日志文件\",{\"1\":{\"925\":1}}],[\"然后按照\",{\"1\":{\"771\":1}}],[\"普通用户\",{\"1\":{\"10709\":1}}],[\"普通数组和文档数组\",{\"1\":{\"10078\":1}}],[\"普通的jdbc数据库连接使用\",{\"1\":{\"8219\":1}}],[\"普通for循环\",{\"0\":{\"5617\":1}}],[\"普通类型\",{\"1\":{\"5120\":1}}],[\"普通类是可以创建匿名对象的\",{\"1\":{\"4457\":1}}],[\"普通字符\",{\"1\":{\"3121\":1}}],[\"普通字符串\",{\"1\":{\"922\":1}}],[\"普通工程的manifeast\",{\"1\":{\"734\":1}}],[\"颜色\",{\"1\":{\"919\":1}}],[\"为升序排列\",{\"1\":{\"10335\":1}}],[\"为所有关键字创建索引\",{\"1\":{\"9959\":1}}],[\"为所有的表都创建一个orm类\",{\"1\":{\"8058\":1}}],[\"为\",{\"1\":{\"9845\":1}}],[\"为基础的核心搜索架构\",{\"1\":{\"9844\":1}}],[\"为命名空间起前缀\",{\"1\":{\"9645\":1}}],[\"为命名空间起个前缀\",{\"1\":{\"9645\":1}}],[\"为解决传统开发中的数据库连接问题\",{\"1\":{\"8225\":1}}],[\"为开发者屏蔽了一些细节问题\",{\"1\":{\"7799\":1}}],[\"为一个功能创建一个类太浪费了\",{\"1\":{\"7406\":1}}],[\"为每个字符分配唯一的字符码\",{\"1\":{\"6421\":1}}],[\"为这些接口\",{\"1\":{\"5948\":1}}],[\"为止\",{\"1\":{\"5444\":1}}],[\"为何仍需多线程呢\",{\"1\":{\"5098\":1}}],[\"为非静态属性赋值\",{\"1\":{\"4553\":1}}],[\"为非静态代码块\",{\"1\":{\"4552\":1}}],[\"为之后多态性的使用\",{\"1\":{\"4011\":1}}],[\"为使用定义在不同包中的java类\",{\"1\":{\"3943\":1}}],[\"为age赋值\",{\"1\":{\"3658\":1}}],[\"为属性赋值等\",{\"1\":{\"3856\":1}}],[\"为属性赋值\",{\"1\":{\"3636\":1,\"7279\":1}}],[\"为内层元素赋值\",{\"1\":{\"3555\":1,\"3556\":1,\"3559\":1,\"3560\":1}}],[\"为外层元素赋值\",{\"1\":{\"3554\":1,\"3556\":1,\"3558\":1,\"3560\":1}}],[\"为数组和内层数组都直接分配了内存空间\",{\"1\":{\"3543\":1}}],[\"为指定索引处的元素赋值\",{\"1\":{\"3506\":1}}],[\"为long型变量赋值\",{\"1\":{\"3173\":1}}],[\"为long类型赋值时\",{\"1\":{\"3169\":1}}],[\"为什么要打jar包\",{\"0\":{\"9485\":1}}],[\"为什么要有泛型\",{\"0\":{\"5949\":1}}],[\"为什么在控制台就打印了hello这句话呢\",{\"1\":{\"8715\":1}}],[\"为什么不直接同判断返回new好的对象\",{\"1\":{\"6953\":1}}],[\"为什么不用new\",{\"1\":{\"6951\":1}}],[\"为什么thread类调用start\",{\"1\":{\"5267\":1}}],[\"为什么\",{\"1\":{\"3102\":1,\"3169\":1}}],[\"为已经到达流末尾而没有可用的字节\",{\"1\":{\"2039\":1}}],[\"为了强制开启用户访问控制\",{\"1\":{\"10642\":1}}],[\"为了支持对地理空间坐标数据的有效查询\",{\"1\":{\"10371\":1}}],[\"为了增加效率\",{\"1\":{\"9967\":1}}],[\"为了解决结构化数据搜索和非结构化数据搜索性能问题\",{\"1\":{\"9864\":1}}],[\"为了解决空指针异常\",{\"1\":{\"7734\":1}}],[\"为了验证第一个问题\",{\"1\":{\"8816\":1}}],[\"为了实现功能的模块化\",{\"1\":{\"8170\":1}}],[\"为了表示url\",{\"1\":{\"6874\":1}}],[\"为了结构清晰\",{\"1\":{\"6411\":1}}],[\"为了提高数据读写的速度\",{\"1\":{\"6309\":1}}],[\"为了高效的进行互斥性比对\",{\"1\":{\"5730\":1}}],[\"为了方便理解\",{\"1\":{\"9912\":1}}],[\"为了方便地操作java语言的基本数据类型和string的数据\",{\"1\":{\"6462\":1}}],[\"为了方便应用计算机\",{\"1\":{\"6414\":1}}],[\"为了方便对多个对象的操作\",{\"1\":{\"5521\":1}}],[\"为了方便开发者使用基于字符串为数据的操作\",{\"1\":{\"1035\":1}}],[\"为了更好的实现项目中类的管理\",{\"1\":{\"3917\":1}}],[\"为了避免出错\",{\"1\":{\"4185\":1}}],[\"为了避免扩容\",{\"1\":{\"1569\":1}}],[\"为了避免这种问题\",{\"1\":{\"637\":1}}],[\"为对包设置日志级别\",{\"1\":{\"907\":1}}],[\"为对应组设置日志级别\",{\"1\":{\"907\":1}}],[\"灾难信息\",{\"1\":{\"898\":1}}],[\"等循环执行完所有数据都通过executebatch传完以后\",{\"1\":{\"8124\":1}}],[\"等待客户端连接\",{\"1\":{\"6822\":1}}],[\"等待通信请求的为服务端\",{\"1\":{\"6762\":1}}],[\"等待被回收\",{\"1\":{\"3526\":2}}],[\"等语言的源代码\",{\"1\":{\"6233\":1}}],[\"等集合的工具类\",{\"1\":{\"5933\":1}}],[\"等集合的工具类map相关的方法比较少\",{\"1\":{\"2478\":1}}],[\"等线程执行完synchronized中的代码后\",{\"1\":{\"5355\":1}}],[\"等函数中\",{\"1\":{\"5058\":1}}],[\"等等\",{\"1\":{\"4951\":1}}],[\"等类的\",{\"1\":{\"4244\":1}}],[\"等\",{\"1\":{\"3537\":1,\"3538\":1,\"7795\":1,\"10416\":1}}],[\"等算术\",{\"1\":{\"1883\":1}}],[\"等价于\",{\"1\":{\"1474\":1,\"2124\":1,\"6019\":1,\"6350\":1}}],[\"等级划分\",{\"0\":{\"890\":1}}],[\"等用到了再说\",{\"1\":{\"250\":1,\"253\":1}}],[\"继续比较\",{\"1\":{\"5862\":1}}],[\"继续next\",{\"1\":{\"5590\":1}}],[\"继续执行其后的代码\",{\"1\":{\"4738\":1}}],[\"继续下一次循环\",{\"1\":{\"3435\":1}}],[\"继续在setting进行如下设置\",{\"1\":{\"562\":1}}],[\"继承关系\",{\"0\":{\"8919\":1}}],[\"继承结构\",{\"0\":{\"8787\":1}}],[\"继承了httpservlet\",{\"1\":{\"8734\":1}}],[\"继承于\",{\"1\":{\"7853\":1}}],[\"继承里的泛型\",{\"0\":{\"6051\":1}}],[\"继承泛型类\",{\"0\":{\"6014\":1}}],[\"继承或实现这个接口\",{\"1\":{\"5946\":1}}],[\"继承thread的线程对象\",{\"1\":{\"5342\":1}}],[\"继承thread类的\",{\"0\":{\"5341\":1}}],[\"继承thread类实现多线程的方式和实现runnable接口是不同的\",{\"1\":{\"5329\":1}}],[\"继承thread\",{\"1\":{\"5279\":1}}],[\"继承thred类\",{\"0\":{\"5155\":1}}],[\"继承方式\",{\"1\":{\"5156\":1}}],[\"继承性\",{\"1\":{\"5005\":1}}],[\"继承是一个\",{\"1\":{\"4483\":1}}],[\"继承是不会破坏封装性的\",{\"1\":{\"4031\":1}}],[\"继承它们所有的属性和方法\",{\"1\":{\"4476\":1}}],[\"继承父类中所有的属性和方法\",{\"1\":{\"4091\":1}}],[\"继承的父类和实现的接口中声明了同名同参数的默认方法\",{\"1\":{\"4531\":1}}],[\"继承的规则总结\",{\"0\":{\"4013\":1}}],[\"继承的出现让类与类之间产生了关系\",{\"1\":{\"4011\":1}}],[\"继承的出现减少了代码冗余\",{\"1\":{\"4009\":1}}],[\"继承的意义\",{\"0\":{\"4008\":1}}],[\"继承的类需要传入两个泛型\",{\"1\":{\"1268\":1}}],[\"继承不能破坏封装性\",{\"1\":{\"4006\":1}}],[\"继承过来后也是private权限\",{\"1\":{\"4006\":1}}],[\"继承后的效果\",{\"0\":{\"4004\":1}}],[\"继承\",{\"0\":{\"3997\":1,\"3998\":1},\"1\":{\"3600\":1,\"3603\":1}}],[\"继承iservice<book>类\",{\"1\":{\"1268\":1}}],[\"继承mybatisplus中的basemapper接口\",{\"1\":{\"1012\":1}}],[\"继承只能一次\",{\"1\":{\"885\":1}}],[\"优雅\",{\"1\":{\"4685\":1}}],[\"优点于一身的数据库连接池\",{\"1\":{\"8247\":1}}],[\"优点\",{\"0\":{\"10019\":1},\"1\":{\"4428\":1,\"4431\":1,\"5374\":1,\"7215\":1}}],[\"优化\",{\"1\":{\"4788\":1}}],[\"优化一\",{\"1\":{\"3457\":2}}],[\"优化二\",{\"1\":{\"3457\":2}}],[\"优化日志对象的创建\",{\"0\":{\"883\":1}}],[\"优先设置该选项卡\",{\"1\":{\"8581\":1}}],[\"优先执行线程b\",{\"1\":{\"5225\":1}}],[\"优先于对象存在\",{\"1\":{\"4371\":1}}],[\"优先找固定参数的\",{\"1\":{\"4063\":1}}],[\"优先寻找的是参数为3\",{\"1\":{\"4063\":1}}],[\"优先使用简化写法\",{\"1\":{\"3499\":1}}],[\"优先使用短路的\",{\"1\":{\"3295\":1}}],[\"优先选择\",{\"1\":{\"5275\":1}}],[\"优先选择他来替代算数运算符\",{\"1\":{\"3275\":1}}],[\"优先选择可变的字符串类\",{\"1\":{\"1569\":1}}],[\"优先级的值是1\",{\"1\":{\"10622\":1}}],[\"优先级的值越大\",{\"1\":{\"10622\":1}}],[\"优先级即权重\",{\"1\":{\"10622\":1}}],[\"优先级\",{\"0\":{\"854\":1,\"8863\":1,\"10620\":1},\"1\":{\"10547\":1,\"10621\":1}}],[\"优先级为1~10\",{\"1\":{\"5241\":1}}],[\"优先级为\",{\"1\":{\"469\":1}}],[\"报告或备份\",{\"1\":{\"10442\":1}}],[\"报异常\",{\"1\":{\"5590\":1}}],[\"报一大堆异常\",{\"1\":{\"4587\":1}}],[\"报non\",{\"1\":{\"1894\":1}}],[\"报警后记录等\",{\"1\":{\"932\":1}}],[\"报警\",{\"1\":{\"879\":1}}],[\"报错信息\",{\"1\":{\"9899\":1}}],[\"报错的情况\",{\"1\":{\"3170\":1}}],[\"报错\",{\"1\":{\"624\":1,\"3013\":1,\"3167\":1,\"3176\":1,\"3319\":1,\"3563\":1,\"3821\":1,\"3990\":1,\"4532\":1,\"4758\":1,\"6005\":1,\"6067\":1,\"6078\":1,\"8450\":1,\"10734\":1}}],[\"宕机\",{\"1\":{\"879\":1}}],[\"峰值流量\",{\"1\":{\"877\":1}}],[\"编辑器也会报错\",{\"1\":{\"7329\":1}}],[\"编译错误\",{\"1\":{\"6094\":1,\"6098\":1,\"6100\":1,\"6102\":1}}],[\"编译异常\",{\"1\":{\"4798\":1}}],[\"编译期间\",{\"1\":{\"4697\":1}}],[\"编译器会给相应的提示信息\",{\"1\":{\"5036\":1}}],[\"编译器直接丢弃这种策略的注释\",{\"1\":{\"4983\":1}}],[\"编译器将annotation存储于class文件中\",{\"1\":{\"4968\":1}}],[\"编译器将annotation存储于类对应的\",{\"1\":{\"4968\":1}}],[\"编译器将\",{\"1\":{\"4966\":1,\"4967\":1}}],[\"编译器处理完后\",{\"1\":{\"4965\":1}}],[\"编译器处理完之后就没有该annotation信息了\",{\"1\":{\"4968\":1}}],[\"编译器处理完之后\",{\"1\":{\"4964\":1}}],[\"编译器要求java程序必须捕获或声明所有编译时异常\",{\"1\":{\"4702\":1}}],[\"编译器就已经确定了所要调用的方法\",{\"1\":{\"4157\":1}}],[\"编译器根据方法不同的参数表\",{\"1\":{\"4157\":1}}],[\"编译时会报错\",{\"1\":{\"4798\":1}}],[\"编译时异常\",{\"0\":{\"4701\":1,\"4723\":1},\"1\":{\"4699\":1,\"4761\":1}}],[\"编译时异常和运行时异常的不同处理\",{\"0\":{\"4760\":1}}],[\"编译时异常和运行时异常\",{\"1\":{\"4698\":1}}],[\"编译时是不报错的\",{\"1\":{\"4199\":1}}],[\"编译时e为person\",{\"1\":{\"4150\":1}}],[\"编译时类型与运行时类型\",{\"0\":{\"4149\":1}}],[\"编译时类型由声明该变量时使用的类型决定\",{\"1\":{\"4119\":1}}],[\"编译时类型和运行时类型不一致\",{\"1\":{\"4123\":1}}],[\"编译时类型和运行时类型\",{\"1\":{\"4119\":1}}],[\"编译看左边\",{\"1\":{\"4120\":1}}],[\"编译不通过\",{\"1\":{\"3649\":1,\"5013\":1,\"6005\":1,\"6054\":1}}],[\"编译报错\",{\"1\":{\"3173\":2,\"6094\":1}}],[\"编译正常\",{\"1\":{\"3173\":1}}],[\"编译失败\",{\"1\":{\"3167\":1,\"3263\":1}}],[\"编译后java类\",{\"1\":{\"8508\":1}}],[\"编译后的项目目录\",{\"0\":{\"8625\":1}}],[\"编译后的java字节码文件和resources的资源文件\",{\"1\":{\"8517\":1}}],[\"编译后的java字节码文件目录\",{\"1\":{\"8499\":1}}],[\"编译后的文件以代码中的类名作为文件名\",{\"1\":{\"2891\":1}}],[\"编译后\",{\"1\":{\"2922\":1}}],[\"编译后生成了两个class文件\",{\"0\":{\"2915\":1}}],[\"编译成功后当前路径下会多出很多文件\",{\"1\":{\"2982\":1}}],[\"编译成功后\",{\"1\":{\"2890\":1}}],[\"编译代码\",{\"0\":{\"2887\":1}}],[\"编译为class文件\",{\"1\":{\"2884\":1}}],[\"编译\",{\"1\":{\"2884\":1}}],[\"编译执行\",{\"0\":{\"2879\":1}}],[\"编写xml\",{\"0\":{\"9634\":1}}],[\"编写其他的业务代码\",{\"1\":{\"9031\":1}}],[\"编写格式\",{\"0\":{\"8807\":1}}],[\"编写预编译sql字符串\",{\"1\":{\"7947\":1}}],[\"编写sql语句\",{\"1\":{\"7935\":1}}],[\"编写难度更低\",{\"1\":{\"7806\":1}}],[\"编写到扩展名为\",{\"1\":{\"2883\":1}}],[\"编写\",{\"1\":{\"2883\":1}}],[\"编写测试用例\",{\"1\":{\"114\":1}}],[\"编程语言介绍\",{\"0\":{\"2832\":1}}],[\"编程期调试代码\",{\"1\":{\"875\":1}}],[\"编码方式\",{\"1\":{\"6426\":1}}],[\"编码原理\",{\"0\":{\"6423\":1}}],[\"编码表的由来\",{\"0\":{\"6413\":1}}],[\"编码和解码\",{\"1\":{\"1499\":1}}],[\"编码\",{\"1\":{\"1340\":1,\"1498\":1,\"6374\":1,\"9612\":1}}],[\"是spring\",{\"1\":{\"10837\":1}}],[\"是sourceforge下的一个开源项目数据库连接池\",{\"1\":{\"8245\":1}}],[\"是不能以副本集的形式连接的\",{\"1\":{\"10805\":1}}],[\"是不是\",{\"1\":{\"4483\":1}}],[\"是安装一次mongodb\",{\"1\":{\"10477\":1}}],[\"是默认的一种从节点类型\",{\"1\":{\"10456\":1}}],[\"是默认值\",{\"1\":{\"5060\":1}}],[\"是所有生产部署的基础\",{\"1\":{\"10438\":1}}],[\"是所有输入流的基类\",{\"1\":{\"6191\":1}}],[\"是用于降序排列\",{\"1\":{\"10335\":1}}],[\"是用户浏览器和服务器端的应用程序进行连接的接口\",{\"1\":{\"6896\":1}}],[\"是可视化的mongodb管理工具\",{\"1\":{\"10181\":1}}],[\"是可靠的\",{\"1\":{\"6732\":1}}],[\"是没有配置环境变量的\",{\"1\":{\"10139\":1}}],[\"是没有page域对象的\",{\"1\":{\"9185\":1}}],[\"是nosql数据库产品中的一种\",{\"1\":{\"10014\":1}}],[\"是面向文档型数据库\",{\"1\":{\"9910\":1}}],[\"是面向对象的核心概念\",{\"1\":{\"3617\":1}}],[\"是整个\",{\"1\":{\"9834\":1}}],[\"是目前java语言中最快的\",{\"1\":{\"9815\":1}}],[\"是目录或文件不存在都返回false\",{\"1\":{\"1981\":1}}],[\"是阿里巴巴提供的一个java语言编写的高性能功能完善的\",{\"1\":{\"9815\":1}}],[\"是阿里提供的数据库连接池\",{\"1\":{\"8247\":1}}],[\"是对\",{\"1\":{\"9581\":1}}],[\"是对象在堆内存的首地址\",{\"1\":{\"4634\":1}}],[\"是很多文件的压缩包\",{\"1\":{\"9523\":1}}],[\"是从服务器内部跳转\",{\"1\":{\"9170\":1}}],[\"是从java\",{\"1\":{\"6581\":1}}],[\"是由浏览器进行跳转\",{\"1\":{\"9168\":1}}],[\"是由编译器推断出来的\",{\"1\":{\"7358\":1}}],[\"是两个不同的request对象\",{\"1\":{\"9153\":1}}],[\"是两台机器间通信的端点\",{\"1\":{\"6760\":1}}],[\"是需要tomcat来解析\",{\"1\":{\"8676\":1}}],[\"是组合关系\",{\"1\":{\"8321\":1}}],[\"是apache提供的数据库连接池\",{\"1\":{\"8243\":1}}],[\"是ascii编码组成的数组\",{\"1\":{\"1498\":1}}],[\"是有关计算的\",{\"1\":{\"7553\":1}}],[\"是有生命周期的\",{\"1\":{\"5116\":1}}],[\"是数据渠道\",{\"1\":{\"7550\":1}}],[\"是被视为动态语言的关键\",{\"1\":{\"6922\":1}}],[\"是通过字符\",{\"0\":{\"9066\":1}}],[\"是通过名字来标识资源\",{\"1\":{\"6911\":1}}],[\"是通过方法名和参数列表来确定调用哪一个方法的\",{\"1\":{\"3764\":1}}],[\"是uniform\",{\"1\":{\"6909\":1}}],[\"是因为close操作要用到fr\",{\"1\":{\"6251\":1}}],[\"是其他所有泛型的父类\",{\"1\":{\"6083\":1}}],[\"是把该目录部署到服务器\",{\"1\":{\"8493\":1}}],[\"是把值赋给了局部变量\",{\"1\":{\"5616\":1}}],[\"是把保存对象的内存地址赋给了对方\",{\"1\":{\"3645\":1}}],[\"是进程内的一个独立执行单元\",{\"1\":{\"5087\":1}}],[\"是程序的一次执行过程\",{\"1\":{\"5069\":1}}],[\"是程序员应该积极避免其出现的异常\",{\"1\":{\"4705\":1}}],[\"是为完成特定任务\",{\"1\":{\"5064\":1}}],[\"是\",{\"1\":{\"4959\":1,\"4963\":1,\"4978\":1,\"4987\":1,\"5060\":1,\"5696\":1,\"5714\":1,\"5825\":1,\"6056\":1,\"7544\":1,\"8331\":1,\"9314\":1,\"9837\":1,\"10014\":1}}],[\"是只在代码中\",{\"1\":{\"4907\":1,\"4977\":1}}],[\"是将数据存储在客户端\",{\"1\":{\"9793\":1}}],[\"是将异常处理的程序代码集中在一起\",{\"1\":{\"4685\":1}}],[\"是将内存地址传过去了\",{\"1\":{\"4660\":1}}],[\"是将内存地址传给了对方\",{\"1\":{\"4654\":1}}],[\"是直接将值赋给了对方\",{\"1\":{\"4657\":1}}],[\"是直接跟变量对应的\",{\"1\":{\"4656\":1}}],[\"是k=v的形式\",{\"1\":{\"4640\":1}}],[\"是指编译器不要求强制处置的异常\",{\"1\":{\"4705\":1}}],[\"是指编译器要求必须处置的异常\",{\"1\":{\"4702\":1}}],[\"是指虚拟机栈\",{\"1\":{\"4633\":1}}],[\"是指符合如下标准的java类\",{\"1\":{\"4572\":1}}],[\"是指允许存在多个同名方法\",{\"1\":{\"4157\":1}}],[\"是抽象方法和常量值定义的集合\",{\"1\":{\"4486\":1}}],[\"是抽象的\",{\"1\":{\"3618\":1}}],[\"是修改过了的\",{\"1\":{\"4379\":1}}],[\"是比较值的错误观点\",{\"1\":{\"4244\":1}}],[\"是==\",{\"1\":{\"4244\":1}}],[\"是以父类的类型\",{\"1\":{\"4127\":1}}],[\"是以补码的形式\",{\"1\":{\"3310\":1}}],[\"是java语言中类的一个成员\",{\"1\":{\"3849\":1}}],[\"是多个相同类型数据按一定顺序排列的集合\",{\"1\":{\"3461\":1}}],[\"是boolean类型\",{\"1\":{\"3382\":1}}],[\"是0就补0\",{\"1\":{\"3308\":1}}],[\"是在互联网上使用最广的一种\",{\"1\":{\"3131\":1}}],[\"是在集合外部实现的排序\",{\"1\":{\"1738\":1}}],[\"是在集合内部定义的方法实现的排序\",{\"1\":{\"1738\":1}}],[\"是一组维护相同数据集的mongod服务\",{\"1\":{\"10438\":1}}],[\"是一种类json的一种二进制形式的存储格式\",{\"1\":{\"10081\":1}}],[\"是一种类似于\",{\"1\":{\"10077\":1}}],[\"是一种分层开发的模式\",{\"1\":{\"9538\":1}}],[\"是一种软件包文件格式\",{\"1\":{\"9468\":1}}],[\"是一种静态的内存数据结构\",{\"1\":{\"7553\":1}}],[\"是一种更紧凑的代码风格\",{\"1\":{\"7337\":1}}],[\"是一类在运行时可以改变其结构的语言\",{\"1\":{\"6924\":1}}],[\"是一个基于javascript的解释器\",{\"1\":{\"10175\":1}}],[\"是一个开源的高扩展的分布式全文搜索引擎\",{\"1\":{\"9834\":1}}],[\"是一个开源组织提供的数据库连接池\",{\"1\":{\"8246\":1}}],[\"是一个开源组织提供的一个数据库连接池\",{\"1\":{\"8244\":1}}],[\"是一个可以存储大量数据的容器\",{\"1\":{\"8066\":1}}],[\"是一个独立于特定数据库管理系统\",{\"1\":{\"7798\":1}}],[\"是一个容器类\",{\"1\":{\"7732\":1}}],[\"是一个\",{\"1\":{\"7336\":1}}],[\"是一个程序内部的一条执行路径\",{\"1\":{\"5078\":1}}],[\"是一个动态的过程\",{\"1\":{\"5069\":1}}],[\"是一个虚拟的计算机\",{\"1\":{\"2820\":1}}],[\"是一个非强制异常类\",{\"1\":{\"2667\":1}}],[\"是一个操作\",{\"1\":{\"2478\":1,\"5933\":1}}],[\"是一起参与比对的\",{\"1\":{\"2614\":1}}],[\"是文件或file不存在都返回false\",{\"1\":{\"1978\":1}}],[\"是就返回true\",{\"1\":{\"1978\":1,\"1981\":1}}],[\"是file类不是文件名\",{\"1\":{\"1973\":1}}],[\"是相对路径就获取相对路径\",{\"1\":{\"1952\":1}}],[\"是否健康\",{\"1\":{\"10576\":1}}],[\"是否基于索引查询\",{\"1\":{\"10416\":1}}],[\"是否要加虚拟路径\",{\"0\":{\"9164\":1}}],[\"是否缓存preparedstatement\",{\"1\":{\"8294\":1}}],[\"是否存在员工姓进\",{\"1\":{\"7682\":1}}],[\"是否存在员工的工资大于\",{\"1\":{\"7680\":1}}],[\"是否所有的员工的年龄都大于18\",{\"1\":{\"7678\":1}}],[\"是否相同\",{\"1\":{\"4232\":1,\"4234\":1}}],[\"是否包含指定的key\",{\"1\":{\"2603\":1}}],[\"是否在硬盘上存在\",{\"1\":{\"1984\":1}}],[\"是否是同一个对象\",{\"1\":{\"1769\":1}}],[\"是否删除\",{\"1\":{\"1338\":1,\"1340\":1,\"1342\":1,\"1344\":1,\"1348\":1}}],[\"是专门为餐饮企业\",{\"1\":{\"1383\":1}}],[\"是要在应用后台对日志进行可视化处理的\",{\"1\":{\"872\":1}}],[\"是重要性第一位的框架\",{\"1\":{\"286\":1}}],[\"动态模式\",{\"1\":{\"10024\":1}}],[\"动态获取虚拟路径\",{\"0\":{\"9172\":1}}],[\"动态资源是具有逻辑性的\",{\"1\":{\"8675\":1}}],[\"动态资源被访问后\",{\"1\":{\"8402\":1}}],[\"动态资源\",{\"1\":{\"8402\":1}}],[\"动态的去调用被代理类中的同名方法a\",{\"1\":{\"7235\":1}}],[\"动态的创建一个代理类及其对象\",{\"1\":{\"7234\":1}}],[\"动态的提供分隔符\",{\"1\":{\"6125\":1}}],[\"动态代理使用\",{\"0\":{\"7232\":1}}],[\"动态代理是指客户通过代理类来调用其它对象的方法\",{\"1\":{\"7211\":1}}],[\"动态代理介绍\",{\"0\":{\"7210\":1}}],[\"动态代理\",{\"0\":{\"7190\":1,\"7191\":1},\"1\":{\"7216\":1}}],[\"动态创建一个随机对象\",{\"1\":{\"6949\":1}}],[\"动态语言\",{\"1\":{\"6924\":1}}],[\"动态语言与静态语言\",{\"0\":{\"6923\":1}}],[\"动态数组\",{\"1\":{\"5624\":1}}],[\"动态绑定\",{\"1\":{\"4158\":2}}],[\"动态调用属于子类的该方法\",{\"1\":{\"4147\":1}}],[\"动态初始化后\",{\"1\":{\"3552\":1}}],[\"动态初始化\",{\"0\":{\"3494\":1,\"3542\":1,\"3546\":1}}],[\"动态条件拼接\",{\"0\":{\"1253\":1}}],[\"动态\",{\"1\":{\"925\":1,\"5544\":1,\"5631\":1,\"6685\":1}}],[\"动态读取配置\",{\"1\":{\"865\":1}}],[\"动态加载配置信息\",{\"1\":{\"814\":1}}],[\"先执行下面这条命令\",{\"1\":{\"10587\":1}}],[\"先执行ht1进程\",{\"1\":{\"5221\":1}}],[\"先了解下关键字与文档之间的关系\",{\"1\":{\"9931\":1}}],[\"先使用错误的用户名和密码\",{\"1\":{\"10734\":1}}],[\"先使用windows环境作为学习和开发使用\",{\"1\":{\"9873\":1}}],[\"先使用javac编译java文件\",{\"1\":{\"9498\":1}}],[\"先进\",{\"1\":{\"9303\":1}}],[\"先进行instanceof的判断\",{\"1\":{\"4185\":1}}],[\"先从硬盘读取一个图片文件\",{\"1\":{\"9094\":1}}],[\"先初始化main方法所在的类\",{\"1\":{\"7023\":1}}],[\"先启动服务端\",{\"1\":{\"6822\":1}}],[\"先关处理流\",{\"1\":{\"6340\":1}}],[\"先占位\",{\"1\":{\"5941\":1}}],[\"先定义一个配置文件\",{\"1\":{\"5920\":1}}],[\"先定义一个实现comparator接口的类\",{\"1\":{\"2365\":1}}],[\"先把要添加的元素取哈希值\",{\"1\":{\"5727\":1}}],[\"先到先服务\",{\"1\":{\"5239\":1}}],[\"先后又调用了另外的几个方法\",{\"1\":{\"4786\":1}}],[\"先判断资源是否打开\",{\"1\":{\"4753\":1}}],[\"先操作再赋值\",{\"1\":{\"4569\":1}}],[\"先写到缓冲区中直到缓冲区写满\",{\"1\":{\"6316\":1}}],[\"先写extends\",{\"1\":{\"4498\":1}}],[\"先写注释后写具体代码\",{\"1\":{\"2930\":1}}],[\"先声明\",{\"1\":{\"3683\":1}}],[\"先创建要访问类的对象\",{\"1\":{\"3650\":1}}],[\"先创建file对象\",{\"1\":{\"1996\":1,\"6141\":1}}],[\"先给数组分配空间\",{\"1\":{\"3495\":1}}],[\"先自减1\",{\"1\":{\"3259\":1}}],[\"先自增1\",{\"1\":{\"3257\":1}}],[\"先运算再把结果进行赋值\",{\"1\":{\"3269\":1}}],[\"先运算\",{\"1\":{\"3258\":1,\"3260\":1}}],[\"先编译\",{\"1\":{\"2918\":1}}],[\"先输出数据\",{\"1\":{\"2912\":1}}],[\"先配置个java\",{\"1\":{\"2863\":1}}],[\"先比较年龄属性\",{\"1\":{\"1769\":1}}],[\"先在maven环境中设置用什么具体的环境\",{\"1\":{\"861\":1}}],[\"先学基本用法\",{\"1\":{\"12\":1}}],[\"主节点网络不可达\",{\"1\":{\"10614\":1}}],[\"主节点故障\",{\"1\":{\"10613\":1}}],[\"主节点的选举\",{\"0\":{\"10610\":1}}],[\"主节点和从节点的默认优先级是相同的\",{\"1\":{\"10608\":1}}],[\"主节点读写\",{\"0\":{\"10601\":1}}],[\"主节点目录\",{\"1\":{\"10485\":1}}],[\"主节点\",{\"1\":{\"10448\":3,\"10452\":1,\"10479\":1,\"10533\":1,\"10597\":1}}],[\"主节点接收所有写操作\",{\"1\":{\"10445\":1}}],[\"主从集群和副本集最大的区别就是副本集没有固定的\",{\"1\":{\"10448\":1}}],[\"主从复制和副本集区别\",{\"0\":{\"10447\":1}}],[\"主流搜索引擎软件就两款\",{\"1\":{\"9838\":1}}],[\"主流都是用jar来替代war了\",{\"1\":{\"9527\":1}}],[\"主流持久层技术是\",{\"1\":{\"972\":1}}],[\"主机上运行着jdk\",{\"1\":{\"8433\":1}}],[\"主机ip\",{\"1\":{\"7844\":1}}],[\"主机地址的域名和ip地址\",{\"1\":{\"6696\":1}}],[\"主机名>\",{\"1\":{\"6869\":1}}],[\"主机名\",{\"1\":{\"6674\":1,\"6880\":1,\"6917\":1}}],[\"主线程默认名是\",{\"1\":{\"5188\":1}}],[\"主线程\",{\"1\":{\"5092\":1,\"5218\":1,\"5219\":1}}],[\"主\",{\"1\":{\"5087\":1,\"10448\":1}}],[\"主要接收所有写操作\",{\"1\":{\"10455\":1}}],[\"主要成员\",{\"1\":{\"10455\":1}}],[\"主要记录其操作日志中的数据集的所有\",{\"1\":{\"10445\":1}}],[\"主要关注该方法\",{\"1\":{\"8771\":1}}],[\"主要动态语言\",{\"1\":{\"6925\":1}}],[\"主要方法如下\",{\"1\":{\"8339\":1}}],[\"主要方法\",{\"0\":{\"6389\":1,\"6405\":1}}],[\"主要指\",{\"1\":{\"5748\":1}}],[\"主要指的是内存层面的存储\",{\"1\":{\"5522\":1}}],[\"主要实现类\",{\"0\":{\"5695\":1},\"1\":{\"5688\":1}}],[\"主要使用t\",{\"1\":{\"7738\":1}}],[\"主要使用\",{\"0\":{\"5633\":1}}],[\"主要功能\",{\"0\":{\"9214\":1},\"1\":{\"4208\":1}}],[\"主要用来删除已经持久化的数据库\",{\"1\":{\"10221\":1}}],[\"主要用到两个导出方式\",{\"1\":{\"8640\":1}}],[\"主要用途\",{\"1\":{\"7633\":1}}],[\"主要用于遍历\",{\"1\":{\"5570\":1,\"5573\":1}}],[\"主要用于应用后台开发\",{\"1\":{\"2806\":1}}],[\"主要用在方法上\",{\"1\":{\"3995\":1}}],[\"主要是软件后台api\",{\"1\":{\"2809\":1}}],[\"主要是collection集合的操作方法\",{\"1\":{\"2480\":1}}],[\"主要是list集合\",{\"1\":{\"2479\":1}}],[\"主要提供给消费者使用\",{\"1\":{\"1385\":1}}],[\"主要提供给餐饮企业内部员工使用\",{\"1\":{\"1384\":1}}],[\"主键\",{\"1\":{\"1334\":1,\"1336\":1,\"1338\":1,\"1340\":1,\"1342\":1,\"1344\":1,\"1346\":1,\"1348\":1,\"1350\":2,\"1352\":1,\"1354\":1,\"10075\":1}}],[\"主环境的优先级最低\",{\"1\":{\"859\":1}}],[\"主环境属性生效\",{\"1\":{\"855\":1}}],[\"主环境dev\",{\"1\":{\"853\":1}}],[\"主配置文件还会存放通用的配置信息\",{\"1\":{\"842\":1}}],[\"主配置文件\",{\"1\":{\"836\":1}}],[\"后的代码\",{\"1\":{\"9307\":1,\"9308\":1}}],[\"后出\",{\"1\":{\"9303\":1}}],[\"后缀树等\",{\"1\":{\"9962\":1}}],[\"后缀名拦截\",{\"1\":{\"9284\":1,\"9286\":1}}],[\"后缀是可以改的\",{\"1\":{\"459\":1}}],[\"后台就需要给前端返回业务处理的结果即响应数据\",{\"1\":{\"8895\":1}}],[\"后台服务器\",{\"1\":{\"8890\":1,\"8897\":1}}],[\"后台系统普通员工\",{\"1\":{\"1411\":1}}],[\"后台系统超管\",{\"1\":{\"1410\":1}}],[\"后台系统\",{\"1\":{\"1396\":1}}],[\"后期我们可以通过这两个参数实现前后端的数据交互\",{\"1\":{\"8725\":1}}],[\"后者主要是面向\",{\"1\":{\"7553\":1}}],[\"后者是操作接口的工具类\",{\"1\":{\"2473\":1,\"5930\":1}}],[\"后写入套接字输出流\",{\"1\":{\"6782\":1}}],[\"后写implements\",{\"1\":{\"4498\":1}}],[\"后从套接字输入流读取内容\",{\"1\":{\"6781\":1}}],[\"后两个构造器是利用runable接口创建多线程用的\",{\"1\":{\"5166\":1}}],[\"后两个参数可选\",{\"1\":{\"1651\":1}}],[\"后续逻辑处理\",{\"1\":{\"9004\":1}}],[\"后续的操作同方式1\",{\"1\":{\"7858\":1}}],[\"后续的添加和扩容操作与jdk8之前一样\",{\"1\":{\"5659\":1}}],[\"后续代码继续执行\",{\"1\":{\"4734\":1}}],[\"后续开发中需要什么依赖\",{\"1\":{\"1360\":1}}],[\"后自减1\",{\"1\":{\"3260\":1}}],[\"后自增1\",{\"1\":{\"3258\":1}}],[\"后\",{\"1\":{\"3258\":1,\"3260\":1,\"5289\":1}}],[\"后运算\",{\"1\":{\"3257\":1,\"3259\":1}}],[\"后使用\",{\"1\":{\"3015\":1,\"3683\":1}}],[\"后面是什么都无所谓\",{\"1\":{\"8847\":1}}],[\"后面可以跟版本号或是时间\",{\"1\":{\"2961\":1}}],[\"后面跟作者名或邮箱\",{\"1\":{\"2956\":1}}],[\"后面的日期时间比前面的日期时间大\",{\"1\":{\"1761\":1}}],[\"后面的名字\",{\"1\":{\"842\":1}}],[\"后再向下取整\",{\"1\":{\"1813\":1}}],[\"后端的数据库交互时\",{\"1\":{\"3614\":1}}],[\"后端\",{\"1\":{\"1391\":1}}],[\"后进行操作\",{\"1\":{\"1034\":1}}],[\"后接中括号可以指定日志的颜色\",{\"1\":{\"920\":1}}],[\"启用在后台运行mongos或mongod进程的守护进程模式\",{\"1\":{\"10162\":1,\"10496\":1}}],[\"启用或禁用持久性日志以确保数据文件保持有效和可恢复\",{\"1\":{\"10162\":1,\"10496\":1}}],[\"启用unicode版本的预定义字符类和posix字符类\",{\"1\":{\"2735\":1}}],[\"启用文字解析\",{\"1\":{\"2733\":1}}],[\"启用\",{\"1\":{\"1340\":1}}],[\"启用dev环境的配置文件\",{\"1\":{\"843\":1}}],[\"启用的名字就是application\",{\"1\":{\"842\":1}}],[\"启动访问控制\",{\"0\":{\"10641\":1,\"10645\":1}}],[\"启动仲裁节点\",{\"1\":{\"10507\":1}}],[\"启动副本节点\",{\"1\":{\"10502\":1}}],[\"启动节点\",{\"1\":{\"10497\":1}}],[\"启动成功的提示信息\",{\"1\":{\"10164\":1}}],[\"启动方式\",{\"1\":{\"10150\":1}}],[\"启动的方式是进程占用\",{\"1\":{\"10144\":1}}],[\"启动以\",{\"1\":{\"9844\":1}}],[\"启动tomcat\",{\"0\":{\"8619\":1}}],[\"启动时需要在bin目录输入命令\",{\"1\":{\"10139\":1}}],[\"启动时\",{\"0\":{\"8453\":1}}],[\"启动后会弹出dos窗口\",{\"1\":{\"8434\":1}}],[\"启动失败\",{\"1\":{\"8433\":1}}],[\"启动\",{\"0\":{\"8432\":1,\"10137\":1},\"1\":{\"8709\":1}}],[\"启动web服务器使用浏览器访问对应的资源\",{\"1\":{\"8408\":1}}],[\"启动当前线程\",{\"1\":{\"5185\":1,\"5205\":1}}],[\"启动创建的线程\",{\"1\":{\"5182\":1}}],[\"启动pro\",{\"1\":{\"830\":1}}],[\"启动命令的临时属性\",{\"0\":{\"768\":1}}],[\"启动服务器\",{\"1\":{\"8943\":1}}],[\"启动服务\",{\"0\":{\"9887\":1,\"10163\":1},\"1\":{\"752\":1}}],[\"启动结果如下\",{\"1\":{\"374\":1}}],[\"启动springboot项目\",{\"1\":{\"374\":1}}],[\"启动项目后默认自动打开的浏览器\",{\"1\":{\"8593\":1}}],[\"启动项目时\",{\"1\":{\"779\":1}}],[\"启动项目\",{\"0\":{\"373\":1,\"757\":1,\"1377\":1},\"1\":{\"1378\":1}}],[\"启动类文件名改为\",{\"1\":{\"1202\":1}}],[\"启动类与三层架构放在同一级\",{\"1\":{\"350\":1}}],[\"启动类\",{\"0\":{\"348\":1},\"1\":{\"734\":1,\"1119\":1}}],[\"启动流程\",{\"1\":{\"100\":1}}],[\"环境准备\",{\"0\":{\"9867\":1}}],[\"环境\",{\"1\":{\"8420\":1}}],[\"环境变量配置的是哪个就使用的哪个版本\",{\"1\":{\"2860\":1}}],[\"环境变量path配置\",{\"0\":{\"2855\":1}}],[\"环境介绍\",{\"0\":{\"2841\":1}}],[\"环境与部署\",{\"0\":{\"1306\":1}}],[\"环境分类配置文件中常用于设置冲突属性\",{\"1\":{\"842\":1}}],[\"环境搭建\",{\"0\":{\"2838\":1},\"1\":{\"10\":1}}],[\"命令\",{\"1\":{\"5502\":1,\"10208\":1}}],[\"命令来编译代码的源文件\",{\"1\":{\"2889\":1}}],[\"命令对生成的\",{\"1\":{\"2885\":1}}],[\"命令对该\",{\"1\":{\"2884\":1}}],[\"命令行提示符发生变化\",{\"1\":{\"10529\":1}}],[\"命令行默认是gbk编码\",{\"1\":{\"8446\":1}}],[\"命令行的编译和执行\",{\"1\":{\"2898\":1}}],[\"命令行编译\",{\"1\":{\"2882\":1}}],[\"命令行方式\",{\"1\":{\"2831\":1}}],[\"命令行交互结束\",{\"1\":{\"2336\":1,\"2793\":1}}],[\"命令行打印出了指定的文本\",{\"1\":{\"378\":1}}],[\"命名空间\",{\"1\":{\"9645\":1}}],[\"命名\",{\"0\":{\"9565\":1}}],[\"命名规范\",{\"0\":{\"3065\":1}}],[\"命名规则\",{\"1\":{\"937\":1}}],[\"命名规则如下\",{\"1\":{\"847\":1}}],[\"命名严格要求application\",{\"1\":{\"835\":1}}],[\"单实例环境\",{\"0\":{\"10699\":1}}],[\"单字段索引\",{\"0\":{\"10364\":1}}],[\"单双都可\",{\"1\":{\"9604\":1}}],[\"单个或多个\",{\"1\":{\"10289\":1}}],[\"单个文档插入\",{\"0\":{\"10244\":1}}],[\"单个文件存放多个环境配置\",{\"1\":{\"832\":1}}],[\"单个\",{\"1\":{\"9840\":1}}],[\"单个值\",{\"1\":{\"9021\":1}}],[\"单参构造器创建的\",{\"1\":{\"7514\":1}}],[\"单参构造器\",{\"0\":{\"7513\":1}}],[\"单列集合\",{\"1\":{\"5686\":1}}],[\"单列数据\",{\"1\":{\"5543\":1,\"5630\":1}}],[\"单核cpu省去了切换\",{\"1\":{\"5099\":1}}],[\"单核cpu\",{\"1\":{\"5090\":1}}],[\"单核cpu和多核cpu\",{\"0\":{\"5089\":1}}],[\"单例模式的使用场景\",{\"0\":{\"4433\":1}}],[\"单例模式核心\",{\"0\":{\"4415\":1}}],[\"单例模式\",{\"0\":{\"4412\":1},\"1\":{\"3830\":1}}],[\"单分支\",{\"0\":{\"3343\":1}}],[\"单\",{\"1\":{\"3296\":1}}],[\"单精度\",{\"1\":{\"3095\":1}}],[\"单词频次\",{\"1\":{\"10011\":1}}],[\"单词在文档中出现的位置\",{\"1\":{\"10010\":1}}],[\"单词在文档中出现的次数\",{\"1\":{\"10009\":1}}],[\"单词id\",{\"1\":{\"9982\":1,\"9997\":1}}],[\"单词词典内每条索引项记载单词本身的一些信息以及指向\",{\"1\":{\"9972\":1}}],[\"单词词典是由文档集合中出现过的所有单词构成的字符串集合\",{\"1\":{\"9972\":1}}],[\"单词词典\",{\"1\":{\"9971\":1,\"9972\":1}}],[\"单词2→文档1的id\",{\"1\":{\"9969\":1}}],[\"单词1→文档1的id\",{\"1\":{\"9968\":1}}],[\"单词→文档\",{\"1\":{\"9967\":1}}],[\"单词\",{\"1\":{\"3049\":1,\"9932\":1,\"9965\":1,\"9983\":1,\"9998\":1}}],[\"单行注释\",{\"0\":{\"2931\":1},\"1\":{\"2882\":1}}],[\"单位s\",{\"1\":{\"9720\":1}}],[\"单位毫秒\",{\"1\":{\"8263\":1,\"8291\":1}}],[\"单位\",{\"1\":{\"2303\":1}}],[\"单位是分钟\",{\"1\":{\"9785\":1}}],[\"单位是ms时间戳\",{\"1\":{\"6710\":1}}],[\"单位是\",{\"1\":{\"1965\":1}}],[\"单位byte\",{\"1\":{\"1961\":1}}],[\"单独部署\",{\"1\":{\"1368\":1}}],[\"单一文件版\",{\"0\":{\"823\":1}}],[\"单服务器版本\",{\"1\":{\"813\":1}}],[\"高速缓存\",{\"1\":{\"10122\":1}}],[\"高扩展\",{\"1\":{\"10022\":1}}],[\"高可用\",{\"1\":{\"10021\":1}}],[\"高性能\",{\"1\":{\"10014\":1,\"10020\":1}}],[\"高层次概念定义统一资源标识\",{\"1\":{\"6911\":1}}],[\"高优先级的线程被优先执行\",{\"1\":{\"5252\":1}}],[\"高优先级的线程高概率的情况下被执行\",{\"1\":{\"5245\":1}}],[\"高优先级的线程要抢占低优先级线程cpu的执行权\",{\"1\":{\"5245\":1}}],[\"高优先级的线程抢占cpu\",{\"1\":{\"5237\":1}}],[\"高优先级覆盖低优先级的\",{\"1\":{\"801\":1}}],[\"高效性的三个特点\",{\"1\":{\"10082\":1}}],[\"高效率存储和访问\",{\"1\":{\"10035\":1}}],[\"高效率的修改\",{\"1\":{\"5350\":1}}],[\"高效修改的逻辑\",{\"0\":{\"5351\":1}}],[\"高效\",{\"1\":{\"5080\":1,\"6635\":1}}],[\"高内聚\",{\"1\":{\"3810\":1}}],[\"高级语言\",{\"1\":{\"2835\":1}}],[\"高级查询\",{\"1\":{\"217\":1,\"222\":1}}],[\"高级配置\",{\"0\":{\"585\":1},\"1\":{\"78\":1}}],[\"相连\",{\"1\":{\"10404\":1}}],[\"相\",{\"1\":{\"10356\":1}}],[\"相反\",{\"1\":{\"7561\":1,\"7700\":1}}],[\"相较于jdk7在底层实现方面的不同点为\",{\"1\":{\"5875\":1}}],[\"相等的标准\",{\"1\":{\"5834\":1,\"5907\":1}}],[\"相等的标准是\",{\"1\":{\"5818\":1,\"5820\":1}}],[\"相等的对象必须具有相等的散列码\",{\"1\":{\"5706\":1,\"5757\":1}}],[\"相等就比较下一个\",{\"1\":{\"1444\":1}}],[\"相关的元数据和资源\",{\"1\":{\"9468\":1}}],[\"相关的接口\",{\"1\":{\"5058\":1}}],[\"相关软件\",{\"1\":{\"8398\":1}}],[\"相关方法\",{\"0\":{\"8080\":1,\"9019\":1,\"9117\":1}}],[\"相关api\",{\"0\":{\"7254\":1}}],[\"相关操作\",{\"0\":{\"6269\":1}}],[\"相关工具类\",{\"1\":{\"4607\":1}}],[\"相关信息\",{\"1\":{\"249\":1,\"252\":1,\"672\":1,\"960\":1,\"971\":1,\"1053\":1,\"1056\":1,\"1179\":1,\"10629\":1,\"10822\":1}}],[\"相应的方法设置为类方法\",{\"1\":{\"4367\":1}}],[\"相同泛型的父子类\",{\"0\":{\"6055\":1}}],[\"相同的话再去判断equals\",{\"1\":{\"5729\":1}}],[\"相同的元素只能添加一个\",{\"1\":{\"5694\":1}}],[\"相同的并发性和内存语义\",{\"1\":{\"5383\":1}}],[\"相同的key\",{\"1\":{\"2589\":1}}],[\"相同值的integer类指向的是同一个内存地址\",{\"1\":{\"4247\":1}}],[\"相同指的是\",{\"1\":{\"4044\":1}}],[\"相同方法名\",{\"1\":{\"3759\":1}}],[\"相同点\",{\"0\":{\"3680\":1},\"1\":{\"5282\":1,\"5398\":1,\"5457\":1}}],[\"相同配置\",{\"1\":{\"801\":1}}],[\"相当于可额外增加0\",{\"1\":{\"10622\":1}}],[\"相当于表\",{\"1\":{\"9915\":1}}],[\"相当于把上面两步合成了一步\",{\"1\":{\"9139\":1}}],[\"相当于<load\",{\"1\":{\"8837\":1}}],[\"相当于<url\",{\"1\":{\"8837\":1}}],[\"相当于<servlet\",{\"1\":{\"8837\":1}}],[\"相当于将某个字节码文件加载到内存中\",{\"1\":{\"6969\":1}}],[\"相当于将参数集合中的所有元素挨个添加到了当前集合\",{\"1\":{\"2591\":1}}],[\"相当于实现了泛型中的多态\",{\"1\":{\"6083\":1}}],[\"相当于run\",{\"1\":{\"5470\":1}}],[\"相当于runnable接口\",{\"1\":{\"5469\":1}}],[\"相当于是一个单线程的过程\",{\"1\":{\"5374\":1}}],[\"相当于我们使用try\",{\"1\":{\"4762\":1}}],[\"相当于自动加了个super\",{\"1\":{\"4087\":1}}],[\"相当于if\",{\"1\":{\"3370\":1}}],[\"相当于\",{\"1\":{\"3306\":1,\"4162\":1,\"5650\":1}}],[\"相当\",{\"1\":{\"1446\":1}}],[\"服务启动失败\",{\"0\":{\"10862\":1}}],[\"服务实例绑定所有ip\",{\"1\":{\"10496\":1}}],[\"服务实例绑定的ip\",{\"1\":{\"10162\":1,\"10496\":1}}],[\"服务代码\",{\"0\":{\"8769\":1}}],[\"服务终止\",{\"0\":{\"8760\":1}}],[\"服务端会话跟踪技术\",{\"1\":{\"9670\":1}}],[\"服务端使用\",{\"1\":{\"9169\":1}}],[\"服务端接受到数据\",{\"1\":{\"6824\":1}}],[\"服务端\",{\"1\":{\"6733\":1,\"6744\":1,\"6751\":1,\"6752\":1}}],[\"服务相关的\",{\"1\":{\"4604\":1}}],[\"服务\",{\"1\":{\"1393\":1,\"9888\":1}}],[\"服务层接口实现类\",{\"1\":{\"1119\":1}}],[\"服务层接口\",{\"1\":{\"1119\":1}}],[\"服务于运维经理整体调控\",{\"1\":{\"799\":1}}],[\"服务于运维人员配置涉密线上环境\",{\"1\":{\"798\":1}}],[\"服务于项目经理整体调控\",{\"1\":{\"797\":1}}],[\"服务于开发人员本机开发与测试\",{\"1\":{\"796\":1}}],[\"服务器性能\",{\"1\":{\"9797\":1}}],[\"服务器关闭\",{\"1\":{\"9782\":1}}],[\"服务器不关闭\",{\"1\":{\"9770\":1}}],[\"服务器都会将该请求视为新的请求\",{\"1\":{\"9667\":1}}],[\"服务器识别浏览器后就可以在同一个会话中多次请求之间来共享数据\",{\"1\":{\"9665\":1}}],[\"服务器用来识别浏览器的过程\",{\"1\":{\"9664\":1}}],[\"服务器需要用来识别请求是否来自同一个浏览器\",{\"1\":{\"9663\":1}}],[\"服务器需要识别多次请求是否来自于同一浏览器\",{\"1\":{\"9661\":1}}],[\"服务器会自动获取jsessionid\",{\"1\":{\"9768\":1}}],[\"服务器会自己悄悄的把更新后的程序给重新加载一遍\",{\"1\":{\"527\":1}}],[\"服务器会收到多个请求\",{\"1\":{\"9662\":1}}],[\"服务器会检查是否已经有对应的session\",{\"1\":{\"9199\":1}}],[\"服务器中对应的资源a接收到请求\",{\"1\":{\"9105\":1,\"9133\":1}}],[\"服务器中的java代码\",{\"1\":{\"8676\":1}}],[\"服务器启动时创建servlet对象\",{\"1\":{\"8752\":1}}],[\"服务器tomcat中已经有servlet\",{\"1\":{\"8685\":1}}],[\"服务器配置\",{\"1\":{\"8661\":1}}],[\"服务器软件\",{\"1\":{\"8396\":1}}],[\"服务器自带dbcp数据库连接池\",{\"1\":{\"8243\":1}}],[\"服务器崩溃\",{\"1\":{\"8223\":1}}],[\"服务器程序\",{\"1\":{\"6918\":1}}],[\"服务器程序的工作过程包含以下四个基本的步骤\",{\"1\":{\"6805\":1}}],[\"服务器是一个为其客户端提供某种特定服务的硬件或软件\",{\"1\":{\"6916\":1}}],[\"服务器是一种最常见的网络应用程序模型\",{\"1\":{\"6916\":1}}],[\"服务器必须事先建立一个等待客户请求建立套接字的\",{\"1\":{\"6812\":1}}],[\"服务器端会话技术\",{\"1\":{\"9742\":1}}],[\"服务器端建立serversocket\",{\"0\":{\"6810\":1}}],[\"服务器端socket\",{\"0\":{\"6804\":1}}],[\"服务器就要单独下载这个\",{\"1\":{\"2844\":1}}],[\"服务器故障\",{\"1\":{\"1290\":1}}],[\"服务器部署使用\",{\"1\":{\"820\":1}}],[\"服务器\",{\"1\":{\"750\":1,\"751\":1,\"9157\":1,\"9159\":1,\"9217\":1}}],[\"类库\",{\"1\":{\"9882\":1}}],[\"类必须有一个无参数的构造器\",{\"1\":{\"7053\":1}}],[\"类初始化的时机\",{\"0\":{\"7021\":1}}],[\"类构造器是构造类信息的\",{\"1\":{\"7018\":1}}],[\"类构造器<clinit>\",{\"1\":{\"7018\":1}}],[\"类没有提供公共的构造器\",{\"1\":{\"6698\":1}}],[\"类没有公共构造方法\",{\"1\":{\"2665\":1}}],[\"类提供的静态\",{\"1\":{\"6611\":1}}],[\"类对象的\",{\"1\":{\"6808\":1}}],[\"类对象的属性不应允许被改动\",{\"1\":{\"4832\":1}}],[\"类对象\",{\"1\":{\"6790\":1}}],[\"类对象含有一个\",{\"1\":{\"6696\":1}}],[\"类对象可以自由移动记录指针\",{\"1\":{\"6495\":1}}],[\"类支持\",{\"1\":{\"6491\":1}}],[\"类介绍\",{\"0\":{\"6105\":1}}],[\"类a是类b的父类\",{\"1\":{\"6056\":1,\"6064\":1}}],[\"类增加了泛型支持\",{\"1\":{\"5948\":1}}],[\"类实现了\",{\"1\":{\"5383\":1}}],[\"类也是一个对象\",{\"1\":{\"5343\":1}}],[\"类也是对象\",{\"1\":{\"5331\":1}}],[\"类也可以作为对象\",{\"1\":{\"5332\":1}}],[\"类加载\",{\"1\":{\"4880\":1}}],[\"类加载器作用是用来把类\",{\"1\":{\"7037\":1}}],[\"类加载器\",{\"0\":{\"2142\":1,\"7036\":1},\"1\":{\"7034\":1,\"7259\":1}}],[\"类作为参数的地方\",{\"1\":{\"4731\":1}}],[\"类是公共的\",{\"1\":{\"4573\":1}}],[\"类是对一类事物的描述\",{\"1\":{\"3618\":1}}],[\"类优先\",{\"1\":{\"4531\":1}}],[\"类方法\",{\"1\":{\"4368\":1}}],[\"类属性作为该类各个对象之间共享的变量\",{\"1\":{\"4366\":1}}],[\"类属性\",{\"1\":{\"4366\":1}}],[\"类属性与类方法\",{\"0\":{\"4365\":1}}],[\"类内可以定义属性\",{\"1\":{\"4317\":1}}],[\"类b称为外部类\",{\"1\":{\"4302\":1}}],[\"类在日常开发中\",{\"1\":{\"4244\":1}}],[\"类里面的方法\",{\"1\":{\"4244\":1}}],[\"类不同\",{\"1\":{\"4241\":1}}],[\"类不同于string\",{\"1\":{\"1544\":1}}],[\"类只可以被同一个包内部的类访问\",{\"1\":{\"3841\":1}}],[\"类中的\",{\"1\":{\"9820\":1,\"9823\":1}}],[\"类中的常量也常常声明为static\",{\"1\":{\"4407\":1}}],[\"类中的方法可以直接访问类中的成员变量\",{\"1\":{\"3648\":1}}],[\"类中提供了多个\",{\"1\":{\"2481\":1}}],[\"类和接口\",{\"1\":{\"6152\":1}}],[\"类和对象的使用\",{\"0\":{\"3637\":1}}],[\"类和方法都可以用\",{\"1\":{\"2973\":1}}],[\"类可以做的事\",{\"1\":{\"3627\":1}}],[\"类拥有的属性\",{\"1\":{\"3626\":1}}],[\"类与多个对象\",{\"0\":{\"3641\":1}}],[\"类与类的成员\",{\"0\":{\"3625\":1}}],[\"类与引用数据类型\",{\"0\":{\"3622\":1}}],[\"类与对象\",{\"0\":{\"3595\":1,\"3615\":1,\"4629\":1}}],[\"类等要素命名时使用的字符序列称为标识符\",{\"1\":{\"3056\":1}}],[\"类变量\",{\"1\":{\"3041\":1,\"4376\":1,\"4379\":1}}],[\"类体内声明的变量\",{\"1\":{\"3039\":1}}],[\"类上面\",{\"1\":{\"4942\":1}}],[\"类上的文档格式如下\",{\"1\":{\"2963\":1}}],[\"类上常用文档标记\",{\"0\":{\"2955\":1}}],[\"类名\",{\"1\":{\"2944\":1,\"3068\":1,\"3630\":1,\"3634\":2,\"3859\":1,\"3947\":1,\"4187\":1,\"5359\":1}}],[\"类名为全类名\",{\"1\":{\"2146\":1}}],[\"类一样\",{\"1\":{\"2666\":1}}],[\"类的被动引用\",{\"1\":{\"7028\":1}}],[\"类的主动引用\",{\"1\":{\"7022\":1}}],[\"类的链接\",{\"0\":{\"7012\":1}}],[\"类的初始化\",{\"0\":{\"7007\":1,\"7017\":1}}],[\"类的加载\",{\"0\":{\"7005\":1,\"7006\":1,\"7010\":1}}],[\"类的常用方法如下\",{\"1\":{\"6845\":1,\"6856\":1}}],[\"类的识别技巧\",{\"1\":{\"6172\":1}}],[\"类的标识\",{\"1\":{\"4809\":1}}],[\"类的getinfo\",{\"1\":{\"4148\":1}}],[\"类的内部数据操作细节自己完成\",{\"1\":{\"3810\":1}}],[\"类的属性\",{\"1\":{\"3694\":1}}],[\"类的访问机制\",{\"0\":{\"3647\":1}}],[\"类的实例化\",{\"1\":{\"3633\":1}}],[\"类的设计\",{\"1\":{\"3621\":2}}],[\"类的作者\",{\"1\":{\"2956\":1}}],[\"类的\",{\"1\":{\"2322\":1,\"2779\":1}}],[\"类的class属性\",{\"0\":{\"2132\":1}}],[\"类相关\",{\"0\":{\"2126\":1}}],[\"类\",{\"0\":{\"2023\":1,\"2901\":1,\"6104\":1,\"7477\":1,\"7484\":1,\"7491\":1,\"8177\":1},\"1\":{\"2152\":1,\"2665\":1,\"3035\":1,\"3617\":1,\"3620\":1,\"3699\":1,\"3972\":1,\"4135\":1,\"4387\":1,\"4883\":1,\"4961\":1,\"4991\":1,\"6457\":1,\"6828\":1,\"6918\":1,\"6919\":1,\"7446\":1,\"7448\":1,\"7449\":1,\"7973\":1,\"8801\":1}}],[\"类似关系型数据库中的表\",{\"1\":{\"10226\":1}}],[\"类似邮局某个窗口中的业务员\",{\"1\":{\"6812\":1}}],[\"类似于\",{\"1\":{\"10018\":1}}],[\"类似于高中的函数\",{\"1\":{\"5806\":1}}],[\"类似于死循环\",{\"1\":{\"3752\":1}}],[\"类似生活中的公共交通工具\",{\"1\":{\"5491\":1}}],[\"类似\",{\"1\":{\"1667\":1}}],[\"类似xml和properties\",{\"1\":{\"477\":1}}],[\"类新增了\",{\"1\":{\"1623\":1}}],[\"类型自定义\",{\"1\":{\"9642\":1}}],[\"类型推断\",{\"0\":{\"7357\":1},\"1\":{\"7358\":1,\"7361\":1}}],[\"类型是numbertype\",{\"1\":{\"9642\":1}}],[\"类型是id\",{\"1\":{\"9631\":1}}],[\"类型是inputstream\",{\"1\":{\"6438\":1}}],[\"类型是list\",{\"1\":{\"8321\":1}}],[\"类型是list<\",{\"1\":{\"6080\":1}}],[\"类型是printstream\",{\"1\":{\"6439\":1}}],[\"类型错误\",{\"1\":{\"5940\":1}}],[\"类型不安全\",{\"1\":{\"5964\":1}}],[\"类型不明\",{\"1\":{\"4734\":1}}],[\"类型不一致\",{\"1\":{\"1788\":1}}],[\"类型必须匹配\",{\"1\":{\"4285\":1}}],[\"类型时\",{\"1\":{\"4261\":1}}],[\"类型就是类名\",{\"1\":{\"3623\":1}}],[\"类型间的转换\",{\"0\":{\"3146\":1}}],[\"类型用来判断逻辑条件\",{\"1\":{\"3139\":1}}],[\"类型的对象\",{\"1\":{\"6966\":1}}],[\"类型的属性\",{\"1\":{\"5999\":1}}],[\"类型的\",{\"1\":{\"1504\":1,\"4963\":1}}],[\"类型的数组\",{\"1\":{\"1496\":1}}],[\"类型转换异常\",{\"0\":{\"4715\":1}}],[\"类型转换\",{\"0\":{\"1481\":1,\"3242\":1}}],[\"类型\",{\"1\":{\"1336\":1,\"4150\":1,\"4592\":2,\"4960\":1,\"5999\":2,\"10452\":1,\"10453\":1}}],[\"类路径下config目录下配置文件\",{\"1\":{\"790\":1}}],[\"类路径下配置文件\",{\"1\":{\"789\":1}}],[\"依次返回到serlvet\",{\"1\":{\"9564\":1}}],[\"依次匹配各个case中的常量\",{\"1\":{\"3363\":1}}],[\"依然可以进行重写\",{\"1\":{\"4059\":1}}],[\"依然需要new对象\",{\"1\":{\"3738\":1}}],[\"依然是string类型\",{\"1\":{\"3240\":1}}],[\"依然能够生效\",{\"1\":{\"781\":1}}],[\"依赖列表\",{\"0\":{\"1120\":1}}],[\"依赖和插件等都准备好了\",{\"1\":{\"1099\":1}}],[\"依赖\",{\"0\":{\"1018\":1},\"1\":{\"1200\":1}}],[\"依赖这些jar包\",{\"1\":{\"724\":1}}],[\"依赖的版本完全取决于springboot的版本\",{\"1\":{\"402\":1}}],[\"依赖的版本号\",{\"1\":{\"397\":1}}],[\"依赖管理\",{\"1\":{\"397\":1}}],[\"依赖版本\",{\"0\":{\"351\":1}}],[\"按条件统计记录数\",{\"1\":{\"10326\":1}}],[\"按条件查询\",{\"1\":{\"1196\":1}}],[\"按顺序出现以下元素\",{\"1\":{\"9642\":1}}],[\"按顺序出现\",{\"1\":{\"9642\":1}}],[\"按顺序从集合中取出数据\",{\"1\":{\"7567\":1}}],[\"按流的角色的不同\",{\"1\":{\"6164\":1}}],[\"按数据流的流向不同\",{\"1\":{\"6161\":1}}],[\"按操作\",{\"1\":{\"6158\":1}}],[\"按\",{\"1\":{\"5698\":1}}],[\"按int长度分配内存\",{\"1\":{\"3108\":1}}],[\"按回车即输入完毕\",{\"1\":{\"2328\":1,\"2785\":1}}],[\"按照过滤器类名的字符串自然排序规则比较\",{\"1\":{\"9310\":1}}],[\"按照相同的方法取值\",{\"1\":{\"9184\":1}}],[\"按照\",{\"1\":{\"8897\":1}}],[\"按照上面的方法在idea中修改tomcat会自动修改配置文件\",{\"1\":{\"8616\":1}}],[\"按照上述格式继续写\",{\"1\":{\"771\":1}}],[\"按照提示\",{\"1\":{\"8569\":1}}],[\"按照一定的协议对socket进行读\",{\"1\":{\"6794\":1}}],[\"按照元素数据类型\",{\"1\":{\"3474\":1}}],[\"按照维度\",{\"1\":{\"3473\":1}}],[\"按照变量声明的位置\",{\"0\":{\"3038\":1}}],[\"按照数据类型\",{\"0\":{\"3020\":1}}],[\"按照它们对应的数值大小进行比较\",{\"1\":{\"1759\":1}}],[\"按照字符的unicode值来进行比较\",{\"1\":{\"1758\":1}}],[\"按照字符串中字符的unicode值进行比较\",{\"1\":{\"1757\":1}}],[\"按需创建目录\",{\"1\":{\"1118\":1}}],[\"按需加载\",{\"1\":{\"439\":1}}],[\"按大小记录\",{\"1\":{\"952\":3}}],[\"按日期\",{\"1\":{\"952\":3}}],[\"空字符\",{\"1\":{\"10215\":1,\"10234\":1,\"10271\":1}}],[\"空值或者未定义的对象\",{\"1\":{\"10104\":1}}],[\"空参构造器创建的\",{\"1\":{\"7507\":1}}],[\"空参构造器\",{\"0\":{\"7506\":1},\"1\":{\"7058\":1}}],[\"空参构造方法\",{\"1\":{\"1296\":1}}],[\"空指针访问\",{\"1\":{\"4673\":1}}],[\"空指针\",{\"0\":{\"3589\":1,\"4708\":1}}],[\"空则返回true\",{\"1\":{\"2611\":1}}],[\"空格将被忽略\",{\"1\":{\"2738\":1}}],[\"空格与换行符\",{\"1\":{\"2099\":1}}],[\"空格不是空字符串\",{\"1\":{\"1442\":1}}],[\"空格\",{\"1\":{\"771\":1,\"4613\":1,\"10215\":1}}],[\"空一格输入两个\",{\"1\":{\"771\":1}}],[\"空间单位\",{\"0\":{\"632\":1}}],[\"空间属性在配置文件中是可以直接指定单位的\",{\"1\":{\"634\":1}}],[\"空间属性\",{\"1\":{\"628\":1}}],[\"语句中的参数的值\",{\"1\":{\"7951\":1,\"7954\":1}}],[\"语句中的参数的索引\",{\"1\":{\"7951\":1,\"7954\":1}}],[\"语句中的参数用问号\",{\"1\":{\"7950\":1}}],[\"语句段或命令从而利用系统的\",{\"1\":{\"7891\":1}}],[\"语句被预编译并存储在此对象中\",{\"1\":{\"7884\":1}}],[\"语句并返回它所生成结果的对象\",{\"1\":{\"7883\":1}}],[\"语句\",{\"1\":{\"7880\":1,\"7929\":1}}],[\"语句进行捕获\",{\"1\":{\"6884\":1}}],[\"语句块选定捕获异常的范围\",{\"1\":{\"4728\":1}}],[\"语句和\",{\"1\":{\"3426\":1}}],[\"语法如下\",{\"1\":{\"10320\":1}}],[\"语法和js类似\",{\"1\":{\"10221\":1}}],[\"语法风格\",{\"0\":{\"10017\":1}}],[\"语法总结\",{\"0\":{\"7359\":1}}],[\"语法解析\",{\"0\":{\"4919\":1}}],[\"语法结构\",{\"0\":{\"3399\":1,\"3416\":1,\"4726\":1}}],[\"语法格式\",{\"0\":{\"3359\":1,\"3945\":1,\"7445\":1,\"7504\":1,\"7530\":1}}],[\"语法\",{\"0\":{\"827\":1,\"3341\":1,\"4000\":1,\"4915\":1,\"5986\":1,\"6040\":1,\"8832\":1,\"10305\":1},\"1\":{\"771\":1,\"3004\":1,\"3007\":1,\"3010\":1,\"3634\":1,\"3746\":1,\"4273\":1,\"4280\":1,\"4940\":1,\"10416\":1}}],[\"语言结构体的名称\",{\"1\":{\"10082\":1}}],[\"语言中\",{\"1\":{\"3876\":1}}],[\"语言赋予了特殊含义\",{\"1\":{\"3049\":1}}],[\"语言\",{\"1\":{\"310\":1}}],[\"采用结构型数据存储\",{\"1\":{\"10116\":1}}],[\"采用javascript的正则表达式语法\",{\"1\":{\"10110\":1}}],[\"采用request对象的getrequestdispatch方法获取请求转发器对象\",{\"1\":{\"9111\":1}}],[\"采用request提供的获取请求参数的通用方式来获取请求参数\",{\"1\":{\"9031\":1}}],[\"采用注解的方式配置路由\",{\"1\":{\"8827\":1}}],[\"采用默认的就行\",{\"1\":{\"7845\":1}}],[\"采用函数式接口bifunction<t\",{\"1\":{\"7523\":1}}],[\"采用函数型接口function\",{\"1\":{\"7515\":1}}],[\"采用供给型接口\",{\"1\":{\"7508\":1}}],[\"采用\",{\"1\":{\"6732\":1}}],[\"采用时间片\",{\"1\":{\"5095\":1}}],[\"采用vue和axios\",{\"1\":{\"1304\":1}}],[\"采用多个配置文件\",{\"1\":{\"786\":1}}],[\"采用多环境配置文件区分不同场景下的配置\",{\"1\":{\"763\":1}}],[\"采用配置中心更新配置文件\",{\"1\":{\"764\":1}}],[\"采用的默认配置\",{\"1\":{\"381\":1}}],[\"以副本集的形式连接\",{\"1\":{\"10792\":1}}],[\"以直接连接的方式连接副本集主节点\",{\"1\":{\"10517\":1}}],[\"以端口\",{\"1\":{\"10476\":1}}],[\"以是提供副本集仲裁功能的好方法\",{\"1\":{\"10460\":1}}],[\"以防止丢失单个数据库服务器\",{\"1\":{\"10441\":1}}],[\"以选择与查询语句匹配的文档\",{\"1\":{\"10360\":1}}],[\"以登录用户的名称展示\",{\"1\":{\"9800\":1}}],[\"以移动平台为主\",{\"1\":{\"9648\":1}}],[\"以内嵌的方式来启动web服务\",{\"1\":{\"9530\":1}}],[\"以zip格式构建\",{\"1\":{\"9469\":1}}],[\"以便在同一次会话的多次请求间共享数据\",{\"1\":{\"9661\":1}}],[\"以便开发java平台应用软件或库\",{\"1\":{\"9468\":1}}],[\"以便别的操作使用该数据库连接对象\",{\"1\":{\"8143\":1}}],[\"以键值对的形式存储数据到request域\",{\"1\":{\"9119\":1}}],[\"以字节的形式输出字符\",{\"0\":{\"9100\":1}}],[\"以字符为单位\",{\"1\":{\"8025\":1}}],[\"以字符流的形式读取字符\",{\"1\":{\"6391\":1}}],[\"以字符而非字节为单位读取\",{\"1\":{\"6208\":1}}],[\"以后每次请求都携带cookie数据进行访问\",{\"1\":{\"9672\":1}}],[\"以后再写代码的时候\",{\"1\":{\"9030\":1}}],[\"以后再创建javaweb项目就可以直接使用了\",{\"1\":{\"8573\":1}}],[\"以后只需要调用request提供的方法即可\",{\"1\":{\"9007\":1}}],[\"以后我们再编写servlet类的时候\",{\"1\":{\"8818\":1}}],[\"以后就可以直接点击这个tomcat\",{\"1\":{\"8605\":1}}],[\"以文件的方式保存在本地\",{\"1\":{\"8089\":1}}],[\"以文本的形式\",{\"1\":{\"6705\":1}}],[\"以mysql为例\",{\"1\":{\"7844\":1}}],[\"以mysql驱动进行操作\",{\"1\":{\"7817\":1}}],[\"以myannotation为例\",{\"1\":{\"5017\":1}}],[\"以函数式接口的形式模拟了面向函数的特点\",{\"1\":{\"7399\":1}}],[\"以函数为单位提供一个简单的独立的功能\",{\"1\":{\"7398\":1}}],[\"以函数为最小单位\",{\"1\":{\"3599\":1}}],[\"以完成代理的具体操作\",{\"1\":{\"7268\":1}}],[\"以cafe开头\",{\"1\":{\"7014\":1}}],[\"以至于成为事实上的标准\",{\"1\":{\"6758\":1}}],[\"以至于我们称他们为\",{\"1\":{\"6589\":1}}],[\"以其两个主要协议\",{\"1\":{\"6727\":1}}],[\"以点分十进制表示\",{\"1\":{\"6666\":1}}],[\"以前\",{\"1\":{\"7734\":1}}],[\"以前io操作都是这样写的\",{\"1\":{\"6594\":1}}],[\"以前的做法是定义为object\",{\"1\":{\"5940\":1}}],[\"以只读方式打开\",{\"1\":{\"6508\":1}}],[\"以该方法为例\",{\"1\":{\"6447\":1}}],[\"以上设置完之后\",{\"1\":{\"9512\":1}}],[\"以上面的例子为例\",{\"1\":{\"7306\":1}}],[\"以上构造器会抛出malformedurlexception异常\",{\"1\":{\"6884\":1}}],[\"以上操作需要进行异常处理\",{\"1\":{\"6218\":1}}],[\"以上是方法上常用的文档标注\",{\"1\":{\"2975\":1}}],[\"以上是类上常用的文档标注\",{\"1\":{\"2963\":1}}],[\"以pathname为路径创建file对象\",{\"1\":{\"6128\":1}}],[\"以arraylist集合为例\",{\"1\":{\"5963\":1}}],[\"以链表形式存在\",{\"1\":{\"5860\":1}}],[\"以hashmap为例\",{\"1\":{\"5845\":1,\"5847\":1}}],[\"以hashset为例\",{\"1\":{\"5692\":1,\"5725\":1}}],[\"以实现对象相等规则\",{\"1\":{\"5706\":1}}],[\"以实现下述目的\",{\"1\":{\"3823\":1}}],[\"以单核cpu为例\",{\"1\":{\"5098\":1}}],[\"以无参数方法的形式来声明\",{\"1\":{\"4927\":1}}],[\"以用其父类作为catch的参数\",{\"1\":{\"4731\":1}}],[\"以分号结束\",{\"1\":{\"4449\":1}}],[\"以运行其他构造器的代码\",{\"1\":{\"3900\":1}}],[\"以类\",{\"1\":{\"3599\":1}}],[\"以0x或0x开头表示\",{\"1\":{\"3182\":1}}],[\"以0b或0b开头\",{\"1\":{\"3180\":1}}],[\"以数字0开头表示\",{\"1\":{\"3181\":1}}],[\"以保证java程序的可移植性\",{\"1\":{\"3074\":1}}],[\"以保证资源肯定能被关闭\",{\"1\":{\"2112\":1}}],[\"以static修饰\",{\"1\":{\"3041\":1}}],[\"以spring\",{\"1\":{\"1086\":1}}],[\"以及允许在指定资源上进行的操作\",{\"1\":{\"10651\":1}}],[\"以及设备汇报的日志信息\",{\"1\":{\"10037\":1}}],[\"以及用户发表的朋友圈信息\",{\"1\":{\"10034\":1}}],[\"以及\",{\"1\":{\"9736\":1}}],[\"以及监听这些域对象中的属性发生修改的事件\",{\"1\":{\"9323\":1}}],[\"以及异常出现在程序中的位置\",{\"1\":{\"4743\":1}}],[\"以及错误的处理\",{\"1\":{\"4676\":1}}],[\"以及数据的展示分离开来的设计模式使程序结构变的灵活而且清晰\",{\"1\":{\"4595\":1}}],[\"以及数字编号\",{\"1\":{\"4338\":1}}],[\"以及对正则表达式的多次匹配支持\",{\"1\":{\"2745\":1}}],[\"以及参数类型列表\",{\"1\":{\"2203\":1}}],[\"以及指定<appender>\",{\"1\":{\"952\":1}}],[\"以filereader读取字符为例\",{\"1\":{\"2048\":1}}],[\"以filereader为例\",{\"1\":{\"2042\":1}}],[\"以e为底的对数称为自然对数\",{\"1\":{\"1828\":1}}],[\"以匿名内部类的方式\",{\"1\":{\"1780\":1}}],[\"以date\",{\"1\":{\"1704\":1}}],[\"以localdatetime类为例\",{\"1\":{\"1653\":1,\"1656\":1}}],[\"以一个新的开始为\",{\"1\":{\"1623\":1}}],[\"以免版本冲突\",{\"1\":{\"1150\":1}}],[\"以下操作示例将在同一台设备上进行\",{\"1\":{\"10476\":1}}],[\"以下操作和idea的版本相关\",{\"1\":{\"1063\":1}}],[\"以下划线\",{\"1\":{\"10273\":1}}],[\"以下it公司采用了elasticsearch\",{\"1\":{\"9842\":1}}],[\"以下目录是使用maven创建的javaweb项目的标准目录\",{\"1\":{\"8512\":1}}],[\"以下两个方法都会抛出sqlexception\",{\"1\":{\"8151\":1}}],[\"以下两个add方法\",{\"1\":{\"6070\":1}}],[\"以下三个方法都会抛出sqlexception异常\",{\"1\":{\"8131\":1}}],[\"以下代码\",{\"1\":{\"8125\":1}}],[\"以下代码省去了try\",{\"1\":{\"8088\":1}}],[\"以下5中方法是循序渐进的\",{\"1\":{\"7850\":1}}],[\"以下四个方法创建的class是同一个class\",{\"1\":{\"6991\":1}}],[\"以下四种文件是平级的\",{\"1\":{\"4621\":1}}],[\"以下示例涉及到多态\",{\"1\":{\"4060\":1}}],[\"以下使用均会含有泛型\",{\"1\":{\"2527\":1}}],[\"以下介绍的方法都是新增或重载后的方法\",{\"1\":{\"2523\":1}}],[\"以下舍入策略\",{\"1\":{\"1909\":1}}],[\"以下知识点仅做了解\",{\"1\":{\"762\":1}}],[\"以\",{\"1\":{\"828\":1,\"2891\":1,\"2939\":1,\"9469\":1,\"10036\":1}}],[\"以在启动类中\",{\"1\":{\"597\":1}}],[\"上线时一定要设置安全认证\",{\"1\":{\"10187\":1}}],[\"上线后使用info\",{\"1\":{\"900\":1}}],[\"上图下半部分是三层架构\",{\"1\":{\"9579\":1}}],[\"上章封装的jdbcutils工具中的关闭资源方法\",{\"1\":{\"8039\":1}}],[\"上面这种动态代理在aop中被称为aop代理\",{\"1\":{\"7304\":1}}],[\"上面的就是文档的概要描述和详细描述\",{\"1\":{\"2962\":1}}],[\"上各种网络资源\",{\"1\":{\"6919\":1}}],[\"上某一\",{\"1\":{\"6865\":1}}],[\"上一层可以调用下一层\",{\"1\":{\"6720\":1}}],[\"上一个node\",{\"1\":{\"5666\":1}}],[\"上的各种网络资源\",{\"1\":{\"6866\":1}}],[\"上的计算机\",{\"1\":{\"6663\":1}}],[\"上的语言\",{\"1\":{\"6640\":1}}],[\"上限\",{\"0\":{\"6087\":1}}],[\"上报到后台\",{\"1\":{\"4680\":1}}],[\"上海\",{\"1\":{\"4523\":2}}],[\"上层文件目录不存在\",{\"1\":{\"2008\":1}}],[\"上午01时21分07秒\",{\"1\":{\"1719\":1}}],[\"上午01时18分16秒\",{\"1\":{\"1715\":1}}],[\"上午1\",{\"1\":{\"1717\":1}}],[\"上述的整个过程就被称之为会话\",{\"1\":{\"9656\":1}}],[\"上述代码中\",{\"1\":{\"9097\":1}}],[\"上述方法的返回值就作为当前类中的invoke\",{\"1\":{\"7279\":1}}],[\"上述情况2和3\",{\"1\":{\"5742\":1}}],[\"上述情况1\",{\"1\":{\"5742\":1}}],[\"上述三个方法\",{\"1\":{\"1713\":1}}],[\"上述controller响应的数据有一个问题\",{\"1\":{\"1283\":1}}],[\"上述两个操作都有对应的命令可以快速执行\",{\"1\":{\"690\":1}}],[\"上传jar包\",{\"0\":{\"755\":1}}],[\"进入\",{\"1\":{\"9888\":1}}],[\"进入阻塞状态\",{\"1\":{\"5291\":1}}],[\"进\",{\"1\":{\"7682\":1}}],[\"进程编号\",{\"1\":{\"10164\":1}}],[\"进程在运行过程中\",{\"1\":{\"5421\":1}}],[\"进程推进顺序非法\",{\"0\":{\"5420\":1}}],[\"进程p2申请资源r1时\",{\"1\":{\"5422\":1}}],[\"进程p1正占用输入设备\",{\"1\":{\"5416\":1}}],[\"进程pid号\",{\"1\":{\"746\":2}}],[\"进程与线程\",{\"0\":{\"5082\":1}}],[\"进程可进一步细化为线程\",{\"1\":{\"5078\":1}}],[\"进程对应了程序的执行过程\",{\"1\":{\"5074\":1}}],[\"进程作为资源分配的单位\",{\"1\":{\"5071\":1}}],[\"进程是动态的\",{\"1\":{\"5070\":1,\"5074\":1}}],[\"进程\",{\"1\":{\"5069\":1}}],[\"进程的概念\",{\"0\":{\"5068\":1}}],[\"进而调用父类的父类的构造器\",{\"1\":{\"4112\":1}}],[\"进制转换\",{\"0\":{\"3193\":1}}],[\"进制问题\",{\"0\":{\"3178\":1}}],[\"进一位\",{\"1\":{\"1910\":1}}],[\"进1取整\",{\"0\":{\"1806\":1},\"1\":{\"1807\":1}}],[\"进行访问\",{\"1\":{\"9893\":1}}],[\"进行访问检查\",{\"1\":{\"7189\":1}}],[\"进行全文检索需要扫描整个表\",{\"1\":{\"9854\":1}}],[\"进行展示\",{\"1\":{\"9564\":1}}],[\"进行监听器配置\",{\"1\":{\"9446\":1}}],[\"进行转发\",{\"1\":{\"9124\":1}}],[\"进行转码\",{\"1\":{\"6372\":1}}],[\"进行请求转发同时共享数据\",{\"0\":{\"9120\":1}}],[\"进行字节流对拷\",{\"1\":{\"9094\":1}}],[\"进行字符串拼接\",{\"1\":{\"1583\":1}}],[\"进行必要的设置\",{\"1\":{\"8527\":1}}],[\"进行数据展示\",{\"1\":{\"9548\":1}}],[\"进行数据库操作\",{\"1\":{\"8148\":1}}],[\"进行数据传输\",{\"1\":{\"6793\":1}}],[\"进行开启和关闭\",{\"1\":{\"8140\":1}}],[\"进行sql操作\",{\"1\":{\"8216\":1}}],[\"进行sql注入\",{\"1\":{\"7892\":1}}],[\"进行sql语句的拼接\",{\"1\":{\"7889\":1}}],[\"进行switch\",{\"1\":{\"7253\":1}}],[\"进行计算\",{\"1\":{\"7710\":1}}],[\"进行计算时\",{\"1\":{\"3167\":1}}],[\"进行个性化的增强\",{\"1\":{\"7253\":1}}],[\"进行一些收尾工作\",{\"1\":{\"7223\":1}}],[\"进行一些参数的断定\",{\"1\":{\"2641\":1,\"7435\":1}}],[\"进行工厂的准备工作\",{\"1\":{\"7221\":1}}],[\"进行工程\",{\"1\":{\"317\":1}}],[\"进行连接数据库\",{\"1\":{\"7197\":1}}],[\"进行输出byte\",{\"1\":{\"6803\":1}}],[\"进行对话\",{\"1\":{\"6744\":1}}],[\"进行通讯\",{\"1\":{\"6644\":1}}],[\"进行控制\",{\"1\":{\"6641\":1}}],[\"进行tostring输出\",{\"1\":{\"6573\":1}}],[\"进行try\",{\"1\":{\"4761\":1}}],[\"进行写入\",{\"1\":{\"6526\":1}}],[\"进行写的操作\",{\"1\":{\"6523\":1}}],[\"进行追加写\",{\"1\":{\"6524\":1}}],[\"进行读和写\",{\"1\":{\"6516\":1}}],[\"进行复制\",{\"1\":{\"6353\":1}}],[\"进行文件的复制\",{\"0\":{\"6304\":1},\"1\":{\"6352\":1}}],[\"进行流的操作\",{\"1\":{\"6217\":1}}],[\"进行检测\",{\"1\":{\"5594\":1}}],[\"进行遍历\",{\"0\":{\"5587\":1},\"1\":{\"5967\":1}}],[\"进行其他操作\",{\"1\":{\"5474\":1}}],[\"进行互相转换时\",{\"1\":{\"4297\":1}}],[\"进行重写\",{\"1\":{\"4234\":1}}],[\"进行比较时\",{\"1\":{\"4225\":1}}],[\"进行赋值时\",{\"1\":{\"4654\":1}}],[\"进行赋值\",{\"1\":{\"3709\":1}}],[\"进行安装java17\",{\"1\":{\"2876\":1}}],[\"进行替换\",{\"1\":{\"2692\":1}}],[\"进行判断\",{\"1\":{\"2641\":1,\"7435\":1}}],[\"进行定制排序\",{\"1\":{\"2492\":1,\"2499\":1,\"2504\":1}}],[\"进行自然排序\",{\"1\":{\"2492\":1}}],[\"进行返回\",{\"1\":{\"2463\":1,\"5583\":1}}],[\"进行排序\",{\"1\":{\"2360\":1,\"5716\":1}}],[\"进行降序排序\",{\"1\":{\"1788\":1}}],[\"进行格式化\",{\"1\":{\"1704\":1,\"1705\":1}}],[\"进行条件查询时\",{\"1\":{\"1254\":1}}],[\"进行条件查询\",{\"1\":{\"1248\":1}}],[\"进行模糊查询\",{\"1\":{\"1248\":1}}],[\"进行分页查询\",{\"1\":{\"1239\":1}}],[\"进行依赖管理\",{\"1\":{\"418\":1}}],[\"进行需求调研\",{\"1\":{\"110\":1}}],[\"带占位符\",{\"1\":{\"7936\":1}}],[\"带通配符的泛型\",{\"1\":{\"6083\":1}}],[\"带泛型的对象\",{\"1\":{\"6059\":1}}],[\"带参的构造器\",{\"0\":{\"5654\":1}}],[\"带参数的构造方法\",{\"1\":{\"3857\":1}}],[\"带参数的方法\",{\"1\":{\"3630\":1}}],[\"带包名的类名\",{\"1\":{\"3956\":1}}],[\"带响应信息的构造方法\",{\"1\":{\"1296\":1}}],[\"带spring\",{\"0\":{\"716\":1},\"1\":{\"734\":1}}],[\"带层级的k\",{\"1\":{\"463\":1}}],[\"计算公式所有员工工资的总和\",{\"1\":{\"7715\":1}}],[\"计算两者小号的时间\",{\"1\":{\"6358\":1}}],[\"计算key1哈希值\",{\"1\":{\"5858\":1}}],[\"计算元素a的哈希值\",{\"1\":{\"5732\":1}}],[\"计算某段代码执行所需要花费的时间的方法\",{\"1\":{\"4466\":1}}],[\"计算代码执行时间的类\",{\"1\":{\"4466\":1}}],[\"计算代码执行时间\",{\"0\":{\"4464\":1}}],[\"计算1\",{\"1\":{\"3753\":1}}],[\"计算机\",{\"1\":{\"8410\":1}}],[\"计算机网络通信涉及内容很多\",{\"1\":{\"6718\":1}}],[\"计算机网络中实现通信必须有一些约定\",{\"1\":{\"6715\":1}}],[\"计算机网络\",{\"1\":{\"6643\":1}}],[\"计算机怎么知道两个字节表示一个符号\",{\"1\":{\"6426\":1}}],[\"计算机只能识别二进制数据\",{\"1\":{\"6414\":1}}],[\"计算机辨别\",{\"1\":{\"3191\":1}}],[\"计算机内部都是二进制的\",{\"1\":{\"3127\":1}}],[\"计算机上必须安装jdk\",{\"1\":{\"700\":1}}],[\"计算当前集合和参数集合的交集\",{\"1\":{\"2435\":1}}],[\"计算\",{\"1\":{\"1867\":1}}],[\"计量单位\",{\"0\":{\"625\":1}}],[\"与jar类似\",{\"1\":{\"9523\":1}}],[\"与数据表同名\",{\"1\":{\"8041\":1}}],[\"与数据模型层\",{\"1\":{\"4595\":1}}],[\"与动态语言相对应的\",{\"1\":{\"6926\":1}}],[\"与b\",{\"1\":{\"6744\":1}}],[\"与break和continue不同的是\",{\"1\":{\"3439\":1}}],[\"与平台无关\",{\"1\":{\"6106\":1}}],[\"与hashset一样\",{\"1\":{\"5816\":1}}],[\"与某个\",{\"1\":{\"4960\":1}}],[\"与正常的程序代码分开\",{\"1\":{\"4685\":1}}],[\"与继承关系类似\",{\"1\":{\"4504\":1}}],[\"与之相对的是非静态方法\",{\"1\":{\"4391\":1}}],[\"与声明为void不同\",{\"1\":{\"3861\":1}}],[\"与一维数组初始化情况相同\",{\"1\":{\"3574\":1}}],[\"与自增自减一样\",{\"1\":{\"3272\":1}}],[\"与case\",{\"1\":{\"2728\":1}}],[\"与pattern\",{\"1\":{\"2666\":1}}],[\"与\",{\"0\":{\"7928\":1,\"9911\":1,\"10115\":1},\"1\":{\"1499\":1,\"2322\":2,\"2710\":1,\"2779\":2,\"7625\":1,\"8859\":2,\"9473\":1}}],[\"与编码无关\",{\"1\":{\"1420\":1}}],[\"与redis的指令和参数相同\",{\"1\":{\"1028\":1}}],[\"与在idea下执行程序没有区别\",{\"1\":{\"698\":1}}],[\"与springboot的版本号一样\",{\"1\":{\"346\":1}}],[\"程序还是像以前一样关闭数据库连接\",{\"1\":{\"8251\":1}}],[\"程序依然可以编译\",{\"1\":{\"7358\":1}}],[\"程序经过javac\",{\"1\":{\"6969\":1}}],[\"程序发送一些数据\",{\"1\":{\"6896\":1}}],[\"程序可以直接跳到文件的任意地方来读\",{\"1\":{\"6491\":1}}],[\"程序可以通过反射获取注释\",{\"1\":{\"4985\":1}}],[\"程序结束\",{\"1\":{\"6449\":1}}],[\"程序中有很多的类\",{\"1\":{\"9487\":1}}],[\"程序中打开的文件\",{\"1\":{\"6206\":1}}],[\"程序中的所有字符串字面值\",{\"1\":{\"3214\":1}}],[\"程序调用thread\",{\"1\":{\"5370\":1}}],[\"程序需要实现一些需要等待的任务时\",{\"1\":{\"5107\":1}}],[\"程序需要同时执行两个或多个任务\",{\"1\":{\"5106\":1}}],[\"程序启动会默认开启一条线程\",{\"1\":{\"5081\":1}}],[\"程序与进程的联系\",{\"0\":{\"5075\":1}}],[\"程序与进程的区别\",{\"0\":{\"5073\":1}}],[\"程序是在某个进程中的某个线程执行的\",{\"1\":{\"5088\":1}}],[\"程序是存储在某种介质上的二进制代码\",{\"1\":{\"5074\":1}}],[\"程序是静态的\",{\"1\":{\"5070\":1,\"5074\":1}}],[\"程序和软件的区别是\",{\"1\":{\"5067\":1}}],[\"程序和软件的区别\",{\"1\":{\"5065\":1}}],[\"程序\",{\"1\":{\"5064\":1,\"5099\":1,\"6680\":1}}],[\"程序的概念\",{\"0\":{\"5063\":1}}],[\"程序的入口是main\",{\"1\":{\"2906\":1}}],[\"程序块直接通往下一种情况而没有\",{\"1\":{\"5052\":1}}],[\"程序时\",{\"1\":{\"4984\":1,\"4985\":1}}],[\"程序运行过程中\",{\"1\":{\"4690\":1}}],[\"程序在正常执行的过程中\",{\"1\":{\"4687\":1}}],[\"程序设计的追求\",{\"0\":{\"3809\":1}}],[\"程序员可以通过request对象获取请求消息数据\",{\"1\":{\"8882\":1}}],[\"程序员可以在不改变原有逻辑的情况下\",{\"1\":{\"4881\":1}}],[\"程序员面对的是一个统一的网络编程环境\",{\"1\":{\"6641\":1}}],[\"程序员能够很容易开发常见的网络应用程序\",{\"1\":{\"6640\":1}}],[\"程序员从面向过程的执行者转化成了面向对象的指挥者\",{\"1\":{\"3606\":1}}],[\"程序员调试代码使用\",{\"1\":{\"894\":1}}],[\"程序性能最高\",{\"1\":{\"2133\":1,\"6993\":1}}],[\"程序包中\",{\"1\":{\"6917\":1}}],[\"程序包所在目录中config目录下配置文件\",{\"1\":{\"792\":1}}],[\"程序包所在目录中配置文件\",{\"1\":{\"791\":1}}],[\"程序包打好以后\",{\"1\":{\"766\":1}}],[\"程序正常运行\",{\"1\":{\"698\":1}}],[\"程序打包好以后\",{\"1\":{\"696\":1}}],[\"叫做package\",{\"1\":{\"692\":1}}],[\"暂不关注\",{\"1\":{\"7885\":1}}],[\"暂停\",{\"1\":{\"5228\":1}}],[\"暂时省略了\",{\"1\":{\"10826\":1}}],[\"暂时意义不明\",{\"1\":{\"10820\":1}}],[\"暂时只考虑service方法\",{\"1\":{\"8704\":1}}],[\"暂时不用深究\",{\"1\":{\"8692\":1}}],[\"暂时不需要掌握\",{\"1\":{\"5755\":1}}],[\"暂时不考虑\",{\"1\":{\"3718\":1}}],[\"暂时不做整理了\",{\"1\":{\"250\":1,\"253\":1}}],[\"暂时没有找到只去除一边空白的方法\",{\"1\":{\"1470\":1}}],[\"暂略\",{\"1\":{\"675\":1,\"679\":1,\"682\":1,\"1305\":1,\"2986\":1,\"5883\":1,\"5898\":1,\"7767\":1,\"9293\":1,\"9294\":1,\"9517\":1,\"10170\":1,\"10609\":1}}],[\"执行检查等操作\",{\"1\":{\"10686\":1,\"10688\":1}}],[\"执行计划\",{\"0\":{\"10415\":1}}],[\"执行chain\",{\"1\":{\"9304\":1,\"9305\":1,\"9307\":1,\"9308\":1}}],[\"执行流程\",{\"0\":{\"8714\":1}}],[\"执行一个查询操作\",{\"1\":{\"8365\":1}}],[\"执行validationquery检测连接是否有效\",{\"1\":{\"8308\":1}}],[\"执行完成后再断开连接\",{\"1\":{\"8219\":1}}],[\"执行完就死了\",{\"1\":{\"5231\":1}}],[\"执行完就失效\",{\"1\":{\"3664\":1}}],[\"执行批量处理语句\",{\"1\":{\"8098\":1}}],[\"执行batch\",{\"0\":{\"8097\":1},\"1\":{\"8126\":1}}],[\"执行插入\",{\"1\":{\"8084\":1}}],[\"执行查询\",{\"1\":{\"8037\":1,\"8045\":1,\"8054\":1,\"8089\":1}}],[\"执行操作\",{\"1\":{\"7970\":1}}],[\"执行preparedstatement对象包含的所有任意sql语句\",{\"1\":{\"7958\":1}}],[\"执行dml操作\",{\"0\":{\"7957\":1}}],[\"执行sql\",{\"1\":{\"7889\":1}}],[\"执行sql语句\",{\"1\":{\"7809\":1,\"8146\":1}}],[\"执行invoke代码体里写的增强逻辑\",{\"1\":{\"7247\":1}}],[\"执行invoke\",{\"0\":{\"7170\":1}}],[\"执行获取的函数\",{\"1\":{\"7161\":1}}],[\"执行类构造器<clinit>\",{\"1\":{\"7018\":1}}],[\"执行删除\",{\"1\":{\"6620\":1}}],[\"执行报错\",{\"1\":{\"6619\":1}}],[\"执行指定的线程的操作\",{\"1\":{\"5517\":1}}],[\"执行指令\",{\"1\":{\"696\":1}}],[\"执行任务\",{\"1\":{\"5502\":1,\"5503\":1}}],[\"执行效果\",{\"0\":{\"5323\":1}}],[\"执行效率高\",{\"1\":{\"3325\":1}}],[\"执行该方法\",{\"1\":{\"5060\":2,\"5223\":1}}],[\"执行了未检查的转换时的警告\",{\"1\":{\"5051\":1}}],[\"执行的顺序是先\",{\"1\":{\"10340\":1}}],[\"执行的数据库查询\",{\"1\":{\"7545\":1}}],[\"执行的过程控制都有操作系统的cpu\",{\"1\":{\"5197\":1}}],[\"执行的方法a中\",{\"1\":{\"4786\":1}}],[\"执行的先后顺序\",{\"1\":{\"3711\":1}}],[\"执行结果\",{\"0\":{\"5190\":1,\"10540\":1,\"10553\":1},\"1\":{\"5265\":1,\"9122\":1}}],[\"执行结果为\",{\"1\":{\"4748\":1,\"4749\":1,\"4750\":1}}],[\"执行结果如下\",{\"1\":{\"2919\":1}}],[\"执行\",{\"1\":{\"4153\":1,\"7980\":1,\"7989\":1,\"8121\":1,\"8201\":1}}],[\"执行过程\",{\"1\":{\"3362\":1,\"3385\":1,\"3388\":1,\"3401\":1}}],[\"执行过程解析\",{\"0\":{\"2886\":1}}],[\"执行语句n\",{\"1\":{\"3360\":1}}],[\"执行语句2\",{\"1\":{\"3360\":1}}],[\"执行语句1\",{\"1\":{\"3360\":1}}],[\"执行表达式n\",{\"1\":{\"3348\":1}}],[\"执行表达式3\",{\"1\":{\"3348\":1}}],[\"执行表达式2\",{\"1\":{\"3346\":1,\"3348\":1}}],[\"执行表达式1\",{\"1\":{\"3346\":1,\"3348\":1}}],[\"执行hi\",{\"1\":{\"2918\":1}}],[\"执行hello\",{\"1\":{\"2918\":1}}],[\"执行文件时\",{\"1\":{\"2896\":1}}],[\"执行代码块\",{\"1\":{\"3344\":1}}],[\"执行代码\",{\"1\":{\"2333\":1,\"2790\":1}}],[\"执行maven打包指令\",{\"1\":{\"867\":1}}],[\"执行jar命令\",{\"1\":{\"759\":1}}],[\"执行程序打包指令后\",{\"1\":{\"698\":1}}],[\"执行要测试的对象的方法\",{\"1\":{\"663\":1}}],[\"执行要测试的对象对应的方法\",{\"1\":{\"662\":1}}],[\"执行后\",{\"1\":{\"427\":1,\"10252\":1}}],[\"声明一个自定义类型的元素\",{\"1\":{\"9642\":1}}],[\"声明一个students标签\",{\"1\":{\"9631\":1}}],[\"声明student标签的属性\",{\"1\":{\"9631\":1}}],[\"声明sex标签\",{\"1\":{\"9631\":1}}],[\"声明season对象的属性\",{\"1\":{\"4843\":1}}],[\"声明age标签\",{\"1\":{\"9631\":1}}],[\"声明name标签\",{\"1\":{\"9631\":1}}],[\"声明的所有方法都被转移到调用处理器一个集中的方法中处理\",{\"1\":{\"7215\":1}}],[\"声明的同时赋值\",{\"0\":{\"3009\":1}}],[\"声明泛型接口和泛型类\",{\"0\":{\"5988\":1}}],[\"声明阶段不能确定这个容器到底实际存的是什么类型的对象\",{\"1\":{\"5944\":1}}],[\"声明注解\",{\"0\":{\"4920\":1}}],[\"声明枚举对象的属性\",{\"1\":{\"4858\":1}}],[\"声明为\",{\"1\":{\"4839\":1}}],[\"声明为public的类的类名必须与源文件名相同\",{\"1\":{\"2904\":1}}],[\"声明public\",{\"1\":{\"4425\":1}}],[\"声明当前类对象\",{\"1\":{\"4425\":1,\"5350\":1}}],[\"声明位置\",{\"0\":{\"4093\":1}}],[\"声明在java\",{\"1\":{\"6489\":1}}],[\"声明在包的声明和类的声明之间\",{\"1\":{\"3949\":1}}],[\"声明在方法内\",{\"1\":{\"3689\":1}}],[\"声明在类中的变量\",{\"1\":{\"3677\":1}}],[\"声明和初始化分开\",{\"1\":{\"3541\":1}}],[\"声明+初始化\",{\"1\":{\"3496\":1,\"3500\":1}}],[\"声明\",{\"1\":{\"3496\":1,\"3500\":1,\"5350\":1}}],[\"声明语法2\",{\"1\":{\"3490\":1}}],[\"声明语法1\",{\"1\":{\"3489\":1}}],[\"声明数组时要确定数据类型\",{\"1\":{\"3530\":1}}],[\"声明数组\",{\"0\":{\"3488\":1},\"1\":{\"3476\":1,\"3491\":1}}],[\"声明字符\",{\"0\":{\"3115\":1}}],[\"声明long类型时\",{\"1\":{\"3080\":1}}],[\"声明但未初始化\",{\"1\":{\"3005\":1}}],[\"声明变量的同时进行初始化\",{\"1\":{\"3011\":1}}],[\"声明变量\",{\"0\":{\"3002\":1}}],[\"声明该类为测试类\",{\"1\":{\"657\":1}}],[\"声明测试类\",{\"1\":{\"656\":1}}],[\"他是安装的一个本地shell客户端\",{\"1\":{\"10175\":1}}],[\"他是动态生成的\",{\"1\":{\"8675\":1}}],[\"他是system类的一个变量\",{\"1\":{\"6438\":1}}],[\"他是有序的\",{\"1\":{\"2439\":1}}],[\"他比实现runnable接口更强大\",{\"1\":{\"5467\":1}}],[\"他有固定的对象数量\",{\"1\":{\"4827\":1}}],[\"他有自己默认的数据类型\",{\"1\":{\"3164\":1}}],[\"他也会自动隐式调用了一个空参的父类构造器\",{\"1\":{\"4103\":1}}],[\"他们是等同的\",{\"1\":{\"8068\":1}}],[\"他们会返回一个持有结果的新stream\",{\"1\":{\"7561\":1}}],[\"他们会指向同一个内存地址\",{\"1\":{\"3211\":1}}],[\"他们指向各自的对象内存地址\",{\"1\":{\"4645\":1}}],[\"他们的方法基本是一样的\",{\"1\":{\"2077\":1}}],[\"他们的方法基本都是一样的\",{\"1\":{\"2029\":1,\"2068\":1}}],[\"他们的常用实现类是\",{\"1\":{\"2077\":1}}],[\"他们的配置会互相叠加覆盖\",{\"1\":{\"468\":1}}],[\"他们的版本由springboot项目内置的父工程来进行管理\",{\"1\":{\"388\":1}}],[\"他的值保存在内存中\",{\"1\":{\"5126\":1}}],[\"他的元素全是一维数组\",{\"1\":{\"3535\":1}}],[\"他的指针在第一个元素之前\",{\"1\":{\"2458\":1,\"5581\":1}}],[\"他的功能和方法与java\",{\"1\":{\"1669\":1}}],[\"他跟真正的arraylist集合是有差异的\",{\"1\":{\"2384\":1}}],[\"他生产从指定输入流扫描的值\",{\"1\":{\"2324\":1,\"2781\":1}}],[\"他说默认导入的\",{\"1\":{\"652\":1}}],[\"仅能操作article数据库\",{\"1\":{\"10709\":1}}],[\"仅能管理菜品和订单\",{\"1\":{\"1411\":1}}],[\"仅获取参数的代码不同\",{\"1\":{\"8999\":1}}],[\"仅考虑重写doget和dopost方法\",{\"1\":{\"8808\":1}}],[\"仅实现service\",{\"1\":{\"8794\":1}}],[\"仅支持展开一层嵌套\",{\"1\":{\"7649\":1}}],[\"仅体验\",{\"0\":{\"6954\":1}}],[\"仅需数据的读入\",{\"1\":{\"6251\":1}}],[\"仅值目录\",{\"1\":{\"6110\":1}}],[\"仅指文件\",{\"1\":{\"6109\":1}}],[\"仅演示\",{\"0\":{\"5589\":1,\"5591\":1}}],[\"仅用户自定义角色\",{\"0\":{\"10656\":1}}],[\"仅用于遍历集合\",{\"1\":{\"5576\":1}}],[\"仅用来结束方法\",{\"1\":{\"3741\":1}}],[\"仅存在于编译器处理期间\",{\"1\":{\"4964\":1}}],[\"仅简单介绍\",{\"1\":{\"4628\":1}}],[\"仅仅是具有相同的行为特征而已\",{\"1\":{\"4478\":1}}],[\"仅仅是在子类中新增了一个同类的属性\",{\"1\":{\"4068\":1}}],[\"仅对外暴露少量的方法用于使用\",{\"1\":{\"3811\":1}}],[\"仅一个参数\",{\"1\":{\"2490\":1}}],[\"仅list可用\",{\"1\":{\"2483\":1,\"2486\":1,\"2489\":1,\"2494\":1}}],[\"仅了解\",{\"1\":{\"1865\":1,\"3299\":1,\"7068\":1,\"7178\":1,\"9292\":1,\"9589\":1}}],[\"仅开发时才能开启\",{\"1\":{\"1228\":1}}],[\"仅包含了常用的依赖\",{\"1\":{\"1175\":1}}],[\"仅包含java相关的\",{\"1\":{\"6\":1}}],[\"仅做了解\",{\"1\":{\"639\":1}}],[\"有6个内置的角色\",{\"1\":{\"10661\":1}}],[\"有副作用\",{\"1\":{\"10496\":1}}],[\"有缺陷\",{\"1\":{\"9626\":1}}],[\"有利于组件重用\",{\"1\":{\"9553\":1}}],[\"有利于分工协作\",{\"1\":{\"9552\":1}}],[\"有监控连接池状态的功能\",{\"1\":{\"8245\":1}}],[\"有就移动指针到下一行\",{\"1\":{\"8008\":1}}],[\"有5种方法\",{\"1\":{\"7850\":1}}],[\"有一个方法getname\",{\"1\":{\"7470\":1}}],[\"有一个无参的公共的构造器\",{\"1\":{\"4574\":1}}],[\"有无返回值\",{\"1\":{\"7400\":1}}],[\"有限制条件的通配符\",{\"0\":{\"6085\":1}}],[\"有能适配所有的泛型\",{\"1\":{\"6083\":1}}],[\"有泛型时\",{\"0\":{\"5960\":1}}],[\"有其他元素b\",{\"1\":{\"5735\":1}}],[\"有序状态\",{\"1\":{\"5905\":1}}],[\"有序\",{\"1\":{\"5531\":1,\"5717\":1}}],[\"有如下优势\",{\"1\":{\"5469\":1}}],[\"有它自身的产生\",{\"1\":{\"5069\":1}}],[\"有许多于\",{\"1\":{\"5058\":1}}],[\"有许多实现类\",{\"1\":{\"4951\":1}}],[\"有更好的选择\",{\"1\":{\"4893\":1,\"4902\":1}}],[\"有更好的提示\",{\"1\":{\"1251\":1}}],[\"有些驱动程序的确支持在集合名里面包含\",{\"1\":{\"10236\":1}}],[\"有些异常是逻辑上的\",{\"1\":{\"4794\":1}}],[\"有些是有单位的\",{\"1\":{\"627\":1}}],[\"有4中方式使用flash\",{\"1\":{\"4513\":1}}],[\"有了myservlet这个指定的类后\",{\"1\":{\"8818\":1}}],[\"有了jdbc\",{\"0\":{\"7803\":1}}],[\"有了该对象就可以与客户端进行通信\",{\"1\":{\"6817\":1}}],[\"有了接口\",{\"1\":{\"4476\":1}}],[\"有了类的特点\",{\"1\":{\"4265\":1}}],[\"有了对象的多态性以后\",{\"1\":{\"4126\":1,\"4169\":1}}],[\"有可能发生\",{\"1\":{\"5298\":1}}],[\"有可能无法识别值\",{\"1\":{\"1718\":1}}],[\"有可变参数的子类add方法重写了有可变参数的父类add\",{\"1\":{\"4062\":1}}],[\"有参\",{\"1\":{\"3866\":1}}],[\"有参数\",{\"1\":{\"2330\":1,\"2787\":1}}],[\"有以下作用\",{\"1\":{\"3731\":1}}],[\"有以下两种操作\",{\"1\":{\"952\":1}}],[\"有返回值\",{\"1\":{\"3721\":1,\"5503\":1}}],[\"有两个地方需要进行权限认证\",{\"1\":{\"10760\":1}}],[\"有两个含义\",{\"1\":{\"8310\":1}}],[\"有两个作用\",{\"1\":{\"1901\":1}}],[\"有两种创建方式\",{\"1\":{\"3205\":1}}],[\"有浮点型参与的运算\",{\"1\":{\"3160\":1}}],[\"有多种类型的数据混合运算时\",{\"1\":{\"3153\":1}}],[\"有多个成员\",{\"1\":{\"4937\":1}}],[\"有多个java版本\",{\"1\":{\"2874\":1}}],[\"有多个重载方法\",{\"1\":{\"1600\":1}}],[\"有多个重构方法\",{\"1\":{\"1489\":1,\"1583\":1}}],[\"有几个class就形成几个文件\",{\"1\":{\"2922\":1}}],[\"有几个参数就写几个\",{\"1\":{\"2210\":1}}],[\"有不同的虚拟机\",{\"1\":{\"2821\":1}}],[\"有很多类\",{\"1\":{\"1756\":1}}],[\"有三个重构方法\",{\"1\":{\"6407\":1}}],[\"有三个重载方法\",{\"1\":{\"6391\":1}}],[\"有三个窗口售票\",{\"1\":{\"5302\":1}}],[\"有三个线程在执行遍历代码\",{\"1\":{\"5192\":1}}],[\"有三个构造器\",{\"1\":{\"1544\":1}}],[\"有三种标准格式\",{\"1\":{\"1698\":1}}],[\"有线程安全\",{\"1\":{\"1568\":1}}],[\"有专门的前端服务器\",{\"1\":{\"1301\":1}}],[\"有json数组\",{\"1\":{\"1283\":1}}],[\"有时也称作\",{\"1\":{\"8167\":1}}],[\"有时不确定究竟定义为何种类型\",{\"1\":{\"5940\":1}}],[\"有时不会报错\",{\"1\":{\"3169\":1}}],[\"有时根本发现不了\",{\"1\":{\"5405\":1}}],[\"有时必须从几个类中抽取出一些共同的行为特征\",{\"1\":{\"4478\":1}}],[\"有时必须从几个类中派生出一个子类\",{\"1\":{\"4476\":1}}],[\"有时需要写出换行符\",{\"1\":{\"2124\":1,\"6350\":1}}],[\"有时\",{\"1\":{\"474\":1}}],[\"常驻\",{\"1\":{\"8434\":1}}],[\"常称为\",{\"1\":{\"5624\":1}}],[\"常看到一个类不是去继承一个已经实现好的类\",{\"1\":{\"4473\":1,\"4484\":1}}],[\"常见编码集\",{\"0\":{\"6415\":1}}],[\"常见子类threadpoolexecutor\",{\"1\":{\"5501\":1}}],[\"常见异常\",{\"0\":{\"3585\":1,\"4694\":1,\"4707\":1}}],[\"常见的如下\",{\"1\":{\"3128\":1}}],[\"常见的多环境开发主要兼顾3种环境设置\",{\"1\":{\"819\":1}}],[\"常量在链接阶段就存入调用类的常量池中了\",{\"1\":{\"7032\":1}}],[\"常量\",{\"0\":{\"3981\":1},\"1\":{\"4513\":1,\"4635\":1}}],[\"常量2\",{\"1\":{\"3360\":1}}],[\"常量1\",{\"1\":{\"3360\":1}}],[\"常量名\",{\"1\":{\"3070\":1,\"7016\":1}}],[\"常量等\",{\"1\":{\"2943\":1}}],[\"常量模式\",{\"1\":{\"620\":1}}],[\"常配合精度一起使用\",{\"1\":{\"1909\":1}}],[\"常用httpservlet\",{\"1\":{\"9187\":1}}],[\"常用请求方法\",{\"0\":{\"8929\":1}}],[\"常用来储存缩略图\",{\"1\":{\"8075\":1}}],[\"常用来处理配置文件\",{\"1\":{\"5839\":1}}],[\"常用2\",{\"1\":{\"7725\":1}}],[\"常用1\",{\"1\":{\"7724\":1}}],[\"常用构造器\",{\"0\":{\"6126\":1}}],[\"常用string类作为map的\",{\"1\":{\"5801\":1}}],[\"常用于\",{\"1\":{\"6737\":1}}],[\"常用于javaweb\",{\"1\":{\"4896\":1}}],[\"常用于检查系统运行状况\",{\"1\":{\"903\":1}}],[\"常用作接口重用\",{\"1\":{\"4166\":1}}],[\"常用的内置角色\",{\"0\":{\"10664\":1}}],[\"常用的插件有\",{\"1\":{\"8319\":1}}],[\"常用的权限修饰符\",{\"1\":{\"3691\":1}}],[\"常用的格式为\",{\"1\":{\"1722\":1}}],[\"常用实现类为hashmap\",{\"1\":{\"2576\":1}}],[\"常用方法\",{\"0\":{\"1578\":1,\"6146\":1}}],[\"常用工具类\",{\"0\":{\"1107\":1}}],[\"常用解决方案时\",{\"1\":{\"744\":1}}],[\"常用注解解析\",{\"0\":{\"5034\":1}}],[\"常用注解\",{\"1\":{\"141\":1}}],[\"常用类\",{\"0\":{\"124\":1}}],[\"常用\",{\"0\":{\"1036\":1,\"6998\":1,\"7747\":1},\"1\":{\"22\":1,\"1417\":1,\"5148\":1,\"8070\":1,\"8247\":1,\"8485\":1,\"9021\":1}}],[\"烤肉串模式\",{\"1\":{\"620\":1}}],[\"驼峰模式\",{\"1\":{\"620\":1}}],[\"示例5\",{\"0\":{\"7491\":1}}],[\"示例4\",{\"0\":{\"7484\":1}}],[\"示例3\",{\"0\":{\"3456\":1,\"7477\":1,\"7521\":1},\"1\":{\"3173\":1}}],[\"示例\",{\"0\":{\"825\":1,\"1247\":1,\"3161\":1,\"4354\":1,\"4464\":1,\"4467\":1,\"4512\":1,\"4801\":1,\"4836\":1,\"4917\":1,\"5262\":1,\"5485\":1,\"5516\":1,\"5609\":1,\"5612\":1,\"5789\":1,\"5791\":1,\"5997\":1,\"6043\":1,\"6093\":1,\"6304\":1,\"6444\":1,\"6459\":1,\"6525\":1,\"6553\":1,\"6567\":1,\"6802\":1,\"6947\":1,\"7206\":1,\"7305\":1,\"7370\":1,\"7372\":1,\"7376\":1,\"7381\":1,\"7385\":1,\"7389\":1,\"7532\":1,\"8083\":1,\"8087\":1,\"9022\":1,\"9077\":1,\"9083\":1,\"9093\":1,\"9100\":1,\"9120\":1,\"9140\":1,\"9261\":1,\"9933\":1,\"10251\":1,\"10262\":1,\"10420\":1},\"1\":{\"2881\":1,\"3392\":1,\"3404\":1,\"3413\":1,\"3419\":1,\"3753\":1,\"3781\":1,\"3786\":1,\"4163\":1,\"4469\":1,\"6347\":1,\"7216\":1,\"7590\":1,\"7593\":1,\"7678\":1,\"7680\":1,\"7682\":1,\"7685\":1,\"7688\":1,\"7691\":1,\"7694\":1,\"7697\":1,\"7701\":1,\"7708\":1,\"7715\":1,\"7723\":2,\"10231\":1,\"10325\":1,\"10332\":1,\"10338\":1,\"10347\":1,\"10378\":1,\"10406\":1,\"10411\":1}}],[\"示例2\",{\"0\":{\"622\":1,\"3454\":1,\"4357\":1,\"4752\":1,\"5301\":1,\"7469\":1,\"7513\":1},\"1\":{\"3173\":1,\"7991\":1}}],[\"示例1\",{\"0\":{\"619\":1,\"3451\":1,\"4355\":1,\"4747\":1,\"5299\":1,\"7459\":1,\"7506\":1},\"1\":{\"3173\":1,\"7991\":1}}],[\"示例如下\",{\"1\":{\"514\":1}}],[\"书写前缀\",{\"1\":{\"617\":1}}],[\"很少使用\",{\"1\":{\"7736\":1}}],[\"很多命令无法使用\",{\"1\":{\"10515\":1}}],[\"很多应用场景\",{\"1\":{\"10026\":1}}],[\"很多框架的配置文件都是用xml写的\",{\"1\":{\"9598\":1}}],[\"很多配置文件都是xml格式\",{\"1\":{\"9588\":1}}],[\"很多时候我们使用转换流来处理文件乱码问题\",{\"1\":{\"6372\":1}}],[\"很多时候无法利用完cpu的性能\",{\"1\":{\"5103\":1}}],[\"很多死锁都是很隐蔽\",{\"1\":{\"5405\":1}}],[\"很多设计模式都用到了接口这个特性\",{\"1\":{\"4505\":1}}],[\"很多情况下\",{\"1\":{\"3095\":1}}],[\"很多jdk内置的类\",{\"1\":{\"1745\":1}}],[\"很多规则和内置的api都跟当前版本不同\",{\"1\":{\"260\":1,\"269\":1}}],[\"很人性化\",{\"1\":{\"565\":1}}],[\"问题二+\",{\"1\":{\"5964\":1}}],[\"问题二\",{\"0\":{\"7890\":1},\"1\":{\"5964\":1}}],[\"问题一\",{\"0\":{\"7888\":1},\"1\":{\"5964\":1}}],[\"问题的原因\",{\"1\":{\"5306\":1}}],[\"问题2\",{\"1\":{\"5304\":1}}],[\"问题1\",{\"1\":{\"5303\":1}}],[\"问题\",{\"0\":{\"554\":1,\"8997\":1},\"1\":{\"1033\":1,\"1250\":1,\"1254\":1,\"8049\":1,\"9000\":1}}],[\"也要提前配置好权限认证\",{\"1\":{\"10812\":1}}],[\"也要先有对象\",{\"1\":{\"4402\":1}}],[\"也同时配置好了主节点\",{\"1\":{\"10534\":1}}],[\"也同样会导致死锁\",{\"1\":{\"5421\":1}}],[\"也无法执行\",{\"1\":{\"10520\":1}}],[\"也收效甚微\",{\"1\":{\"9854\":1}}],[\"也称基础类库\",{\"1\":{\"9492\":1}}],[\"也称为\",{\"1\":{\"9831\":1}}],[\"也称为类型实参\",{\"1\":{\"5946\":1}}],[\"也称为方法的重置\",{\"1\":{\"4042\":1}}],[\"也称为全类名\",{\"1\":{\"3956\":1}}],[\"也称为前后端数据协议\",{\"1\":{\"1292\":1}}],[\"也间接实现了servletrequest接口\",{\"1\":{\"8909\":1}}],[\"也有一些开源组织提供实现\",{\"1\":{\"8242\":1}}],[\"也写成泛型的样式\",{\"1\":{\"8059\":1}}],[\"也将被代理类传递给了myinvocationhandler类的invoke方法\",{\"1\":{\"7291\":1}}],[\"也将异常处理类放入utile包中\",{\"1\":{\"1289\":1}}],[\"也实现接口\",{\"1\":{\"7220\":1}}],[\"也便于子类继承此运行时类时\",{\"1\":{\"7060\":1}}],[\"也知道对方知道自己是谁了\",{\"1\":{\"6747\":1}}],[\"也能控制隔离级别\",{\"1\":{\"8150\":1}}],[\"也能把对象从数据源中还原回来\",{\"1\":{\"6532\":1}}],[\"也能识别\",{\"1\":{\"6122\":1}}],[\"也能表示目录\",{\"1\":{\"6106\":1}}],[\"也能取\",{\"1\":{\"3584\":1}}],[\"也就意味着这个类既可以读也可以写\",{\"1\":{\"6489\":1}}],[\"也就基本意味着安全级别越高\",{\"1\":{\"5764\":1}}],[\"也就是字符顺序\",{\"1\":{\"10010\":1}}],[\"也就是30分钟后\",{\"1\":{\"9783\":1}}],[\"也就是pscache\",{\"1\":{\"8294\":1}}],[\"也就是用于获取结果集的源数据\",{\"1\":{\"8018\":1}}],[\"也就是接口的实现类\",{\"1\":{\"7800\":1}}],[\"也就是java替我们穷举好了\",{\"1\":{\"7413\":1}}],[\"也就是取值范围是有限的\",{\"1\":{\"5764\":1}}],[\"也就是锁l1想要包含了锁l2\",{\"1\":{\"5424\":1}}],[\"也就是annotation\",{\"1\":{\"4878\":1}}],[\"也就是\",{\"1\":{\"4681\":1}}],[\"也就是说多个用户同时访问时\",{\"1\":{\"8754\":1}}],[\"也就是说在获得了锁l1\",{\"1\":{\"5424\":1}}],[\"也就是说\",{\"1\":{\"4043\":1,\"4450\":1,\"6812\":1,\"6911\":1,\"8675\":1,\"10636\":1}}],[\"也就是内层数组的元素类型也是确定的\",{\"1\":{\"3581\":1}}],[\"也就是要么是true\",{\"1\":{\"3278\":1}}],[\"也就是凡是自己可以起名字的地方都叫标识符\",{\"1\":{\"3057\":1}}],[\"也就是无法实例化该类\",{\"1\":{\"2299\":1}}],[\"也就是会有字符没有被替换\",{\"1\":{\"2055\":1,\"6263\":1}}],[\"也就是启动类类名\",{\"1\":{\"738\":1}}],[\"也就是将开发者自己制作的内容重新加载就行了\",{\"1\":{\"546\":1}}],[\"也没有调用对象中的service方法\",{\"1\":{\"8715\":1}}],[\"也没有重写thread类的run方法\",{\"1\":{\"5267\":1}}],[\"也没有公共构造方法\",{\"1\":{\"2666\":1}}],[\"也只能执行一个线程的任务\",{\"1\":{\"5090\":1}}],[\"也包含在内\",{\"1\":{\"5327\":1}}],[\"也包含一个名为\",{\"1\":{\"4988\":1}}],[\"也包括了jre\",{\"1\":{\"2847\":1}}],[\"也属于某个包\",{\"1\":{\"4872\":1}}],[\"也属于父类的引用指向子类的对象\",{\"1\":{\"4160\":1}}],[\"也应该返回是\",{\"1\":{\"4236\":1,\"4238\":1}}],[\"也通常是比较两个对象的\",{\"1\":{\"4234\":1}}],[\"也一定不要导入\",{\"1\":{\"3960\":1}}],[\"也叫构造方法\",{\"1\":{\"3849\":1}}],[\"也是将用户和权限信息保存到数据库对\",{\"1\":{\"10721\":1}}],[\"也是一种从节点类型\",{\"1\":{\"10457\":1}}],[\"也是会被对应的拦截器拦截的吗\",{\"1\":{\"9278\":1}}],[\"也是函数式接口的实例\",{\"1\":{\"7442\":1}}],[\"也是system类的一个变量\",{\"1\":{\"6439\":1}}],[\"也是用write方法\",{\"1\":{\"6338\":1}}],[\"也是用read方法\",{\"1\":{\"6337\":1}}],[\"也是双向链表的基本操作\",{\"1\":{\"5664\":1}}],[\"也是典型的单例应用\",{\"1\":{\"4440\":1}}],[\"也是单例的典型应用\",{\"1\":{\"4438\":1}}],[\"也是int类型的结果转为了double\",{\"1\":{\"3252\":1}}],[\"也是有set组成的\",{\"1\":{\"2585\":1}}],[\"也需要使用getxxx和\",{\"1\":{\"4006\":1}}],[\"也需要先建立对象\",{\"1\":{\"3737\":1}}],[\"也需要重新指定内存区域赋值\",{\"1\":{\"3224\":1,\"3225\":1}}],[\"也需要进行处理\",{\"1\":{\"2113\":1}}],[\"也会包含一条声明\",{\"1\":{\"7416\":1}}],[\"也会使用泛型\",{\"1\":{\"5967\":1}}],[\"也会出现小数点\",{\"1\":{\"3160\":1}}],[\"也会返回false\",{\"1\":{\"2439\":1}}],[\"也返回false\",{\"1\":{\"1988\":1}}],[\"也不要修改值\",{\"1\":{\"8755\":1}}],[\"也不能确定什么时候可以抵达\",{\"1\":{\"6829\":1}}],[\"也不能包的代码少了\",{\"1\":{\"5326\":1}}],[\"也不能包含代码少了\",{\"1\":{\"5315\":1}}],[\"也不允许出现重复的元素\",{\"1\":{\"5773\":1}}],[\"也不用用它\",{\"1\":{\"5676\":1}}],[\"也不处理\",{\"1\":{\"4774\":1}}],[\"也不创建\",{\"1\":{\"2005\":1}}],[\"也不包含与时区相关的信息\",{\"1\":{\"1634\":1}}],[\"也不会被输出\",{\"1\":{\"952\":1}}],[\"也可能导致内存泄漏\",{\"1\":{\"8223\":1}}],[\"也可能会用到temporal包\",{\"1\":{\"1631\":1}}],[\"也可用于操作\",{\"1\":{\"5556\":1}}],[\"也可\",{\"1\":{\"4731\":1}}],[\"也可命名为domain或pojo\",{\"1\":{\"1119\":1}}],[\"也可以以replicaset的方式只连接一个节点\",{\"1\":{\"10818\":1}}],[\"也可以在开启认证之后添加\",{\"1\":{\"10716\":1}}],[\"也可以在具体module的\",{\"1\":{\"8700\":1}}],[\"也可以一起使用\",{\"1\":{\"10328\":1}}],[\"也可以手动创建集合\",{\"1\":{\"10230\":1}}],[\"也可以手动调用flush方法\",{\"1\":{\"6339\":1}}],[\"也可以指定会话时间\",{\"1\":{\"9710\":1}}],[\"也可以采用xml\",{\"1\":{\"8828\":1}}],[\"也可以取消勾选\",{\"1\":{\"8539\":1}}],[\"也可以自己指定\",{\"1\":{\"7845\":1}}],[\"也可以写成\",{\"1\":{\"7716\":1}}],[\"也可以省略\",{\"1\":{\"7362\":1}}],[\"也可以直接在compass上查看\",{\"1\":{\"10422\":1}}],[\"也可以直接写到里面\",{\"1\":{\"7307\":1}}],[\"也可以直接写在myinvocationhandler\",{\"1\":{\"7307\":1}}],[\"也可以直接写成匿名实现类\",{\"1\":{\"7262\":1}}],[\"也可以直接使用int类型的常量值\",{\"1\":{\"1909\":1}}],[\"也可以用于自定义类\",{\"1\":{\"5957\":1}}],[\"也可以调用静态的方法或属性\",{\"1\":{\"4400\":1}}],[\"也可以调用nextxxx方法\",{\"1\":{\"2339\":1,\"2796\":1}}],[\"也可以初始化\",{\"1\":{\"4383\":1}}],[\"也可以都用全类名\",{\"1\":{\"3959\":1}}],[\"也可以通过继承其他角色的权限\",{\"1\":{\"10649\":1}}],[\"也可以通过修改响应头\",{\"1\":{\"9081\":1}}],[\"也可以通过response对象设置相应消息数据\",{\"1\":{\"8883\":1}}],[\"也可以通过添加this增加可读性\",{\"1\":{\"3913\":1}}],[\"也可以通过表达式添加\",{\"1\":{\"2721\":1}}],[\"也可以显式的创建一个空参构造器\",{\"1\":{\"3874\":1}}],[\"也可以动态初始化\",{\"1\":{\"3558\":1}}],[\"也可以表示具体的文件名\",{\"1\":{\"2981\":1}}],[\"也可以简单的理解在\",{\"1\":{\"2671\":1}}],[\"也可以大于\",{\"1\":{\"2511\":1}}],[\"也可以进行指定\",{\"1\":{\"1906\":1}}],[\"也可以是索引规范文档\",{\"1\":{\"10410\":1}}],[\"也可以是隔离级别常量\",{\"1\":{\"8155\":1}}],[\"也可以是相对的\",{\"1\":{\"6913\":1}}],[\"也可以是文件名\",{\"1\":{\"6503\":1}}],[\"也可以是它的父类\",{\"1\":{\"4768\":1}}],[\"也可以是接口\",{\"1\":{\"4141\":1}}],[\"也可以是字符串\",{\"1\":{\"1878\":1}}],[\"也可以是其他数据格式\",{\"1\":{\"1286\":1}}],[\"也可以使用查询语句\",{\"1\":{\"10277\":1}}],[\"也可以使用其他zip压缩工具\",{\"1\":{\"9469\":1}}],[\"也可以使用构造函数初始化\",{\"1\":{\"5217\":1}}],[\"也可以使用collection\",{\"1\":{\"1748\":1}}],[\"也可以使用\",{\"1\":{\"1488\":1,\"7545\":1}}],[\"也可以单独部署\",{\"1\":{\"1367\":1}}],[\"也可以根据需要切换成指定客户端技术\",{\"1\":{\"1040\":1}}],[\"也可以同时为多个包设置日志等级\",{\"1\":{\"906\":1}}],[\"也可以输入临时属性\",{\"1\":{\"775\":1}}],[\"也可以说热部署的过程实际上是重新加载restart类加载器中的信息\",{\"1\":{\"546\":1}}],[\"由目录结构可知\",{\"1\":{\"9886\":1}}],[\"由容器创建servlet对象\",{\"1\":{\"8747\":1}}],[\"由不同子类实现\",{\"1\":{\"8336\":1}}],[\"由接口名\",{\"1\":{\"7404\":1}}],[\"由5部分组成\",{\"1\":{\"6869\":1}}],[\"由objectinputstream\",{\"1\":{\"6531\":1}}],[\"由构造器指定\",{\"1\":{\"6406\":1}}],[\"由这四个类派生出来的子类名称都是以其父类名作为子类名后缀\",{\"1\":{\"6169\":1}}],[\"由开发人员手动创建\",{\"1\":{\"4691\":1}}],[\"由虚拟机\",{\"1\":{\"4690\":1}}],[\"由局部内部类和局部变量的声明周期不同所致\",{\"1\":{\"4341\":1}}],[\"由垃圾回收机制自动调用\",{\"1\":{\"4211\":1}}],[\"由规定可知\",{\"1\":{\"4129\":1}}],[\"由26\",{\"1\":{\"3060\":1}}],[\"由参数决定\",{\"1\":{\"2079\":1}}],[\"由于副本集未初始化\",{\"1\":{\"10517\":1}}],[\"由于es内置了jdk\",{\"1\":{\"9889\":1}}],[\"由于session是保存在内存中的\",{\"1\":{\"9776\":1}}],[\"由于session数据是保存在一个对象里的\",{\"1\":{\"9743\":1}}],[\"由于servlet对象指挥创建一次\",{\"1\":{\"8775\":1}}],[\"由于xml中标签是自由设置的\",{\"1\":{\"9623\":1}}],[\"由于所有用户都可以创建和使用\",{\"1\":{\"9244\":1}}],[\"由于是由浏览器发送的两次请求\",{\"1\":{\"9151\":1}}],[\"由于是逻辑上的异常\",{\"1\":{\"4797\":1}}],[\"由于数据库连接得以重用\",{\"1\":{\"8237\":1}}],[\"由于参数也一样\",{\"1\":{\"7467\":1}}],[\"由于后面的方法已经定义过了\",{\"1\":{\"7453\":1}}],[\"由于关闭流是必须要进行的操作\",{\"1\":{\"6249\":1}}],[\"由于属性文件里的\",{\"1\":{\"5840\":1}}],[\"由于使用runnable接口创建多个线程时\",{\"1\":{\"5272\":1}}],[\"由于多态的缘故\",{\"1\":{\"5268\":1}}],[\"由于运行时异常比较常见\",{\"1\":{\"4764\":1}}],[\"由于java虚拟机需要调用类的main\",{\"1\":{\"4616\":1}}],[\"由于jar中的信息不会变化\",{\"1\":{\"546\":1}}],[\"由于单例模式只生成一个实例\",{\"1\":{\"4417\":1}}],[\"由于静态变量的加载早于对象\",{\"1\":{\"4387\":1}}],[\"由于类只会加载一次\",{\"1\":{\"4385\":1}}],[\"由于不需要创建对象就可以调用类方法\",{\"1\":{\"4368\":1}}],[\"由于该类的构造器是private的\",{\"1\":{\"2299\":1}}],[\"由于number是抽象类\",{\"1\":{\"1845\":1}}],[\"由于这里直接用person限制了因此\",{\"1\":{\"1769\":1}}],[\"由\",{\"1\":{\"660\":1,\"6641\":1}}],[\"由spring将这组数据加载到数据对象中\",{\"1\":{\"512\":1}}],[\"页面介绍\",{\"0\":{\"10191\":1}}],[\"页面设置的编码格式为utf\",{\"1\":{\"9044\":1}}],[\"页面上滑\",{\"1\":{\"5108\":1}}],[\"页面功能调整\",{\"1\":{\"1196\":1}}],[\"页面消息处理\",{\"1\":{\"1193\":1}}],[\"页面数据处理\",{\"1\":{\"1193\":1}}],[\"页面开发\",{\"1\":{\"1193\":1}}],[\"页面目录\",{\"1\":{\"731\":1}}],[\"页面\",{\"1\":{\"542\":1,\"722\":1}}],[\"页面等信息\",{\"1\":{\"540\":1}}],[\"自反性\",{\"1\":{\"4237\":1}}],[\"自减不会改变数据类型\",{\"1\":{\"3262\":1}}],[\"自减的细节\",{\"0\":{\"3256\":1}}],[\"自增不会改变变量的数据类型\",{\"1\":{\"3263\":1}}],[\"自增\",{\"0\":{\"3256\":1},\"1\":{\"3262\":1}}],[\"自己不会存储元素\",{\"1\":{\"7560\":1}}],[\"自己写的程序用的\",{\"1\":{\"6685\":1}}],[\"自己命名标识符时要避免使用这些保留字\",{\"1\":{\"3054\":1}}],[\"自己手动添加\",{\"1\":{\"1175\":1}}],[\"自然排序和定制排序\",{\"1\":{\"5909\":1}}],[\"自然排序\",{\"0\":{\"5789\":1,\"5911\":1,\"7667\":1},\"1\":{\"1735\":1,\"2490\":1,\"2498\":1,\"2503\":1,\"5718\":1,\"7668\":1}}],[\"自定义的标签名\",{\"1\":{\"9615\":1}}],[\"自定义的异常通过throw抛出\",{\"1\":{\"4810\":1}}],[\"自定义的异常也是可以throws到调用处的\",{\"1\":{\"4802\":1}}],[\"自定义一个文件名用来测试\",{\"1\":{\"9234\":1}}],[\"自定义一个类\",{\"1\":{\"8680\":1}}],[\"自定义resultsethandler的实现类\",{\"0\":{\"8388\":1}}],[\"自定义员工类对象\",{\"1\":{\"7507\":1,\"7514\":1,\"7522\":1}}],[\"自定义函数式接口\",{\"0\":{\"7417\":1}}],[\"自定义缓冲区数组大小\",{\"1\":{\"6328\":1}}],[\"自定义泛型方法\",{\"0\":{\"6029\":1}}],[\"自定义泛型类\",{\"0\":{\"5985\":1,\"5997\":1,\"6002\":1}}],[\"自定义泛型\",{\"0\":{\"5984\":1}}],[\"自定义注解自动继承了java\",{\"1\":{\"4922\":1}}],[\"自定义注解\",{\"0\":{\"4914\":1},\"1\":{\"4912\":1}}],[\"自定义枚举类的步骤\",{\"0\":{\"4855\":1}}],[\"自定义枚举类\",{\"0\":{\"4836\":1}}],[\"自定义枚举类说明\",{\"0\":{\"4831\":1}}],[\"自定义异常最重要的是异常类的名字\",{\"1\":{\"4811\":1}}],[\"自定义异常需要提供serialversionuid\",{\"1\":{\"4808\":1}}],[\"自定义异常类的意义在于异常类的名字\",{\"1\":{\"4815\":1}}],[\"自定义异常类的总结\",{\"0\":{\"4814\":1}}],[\"自定义异常类的创建说明\",{\"0\":{\"4805\":1}}],[\"自定义异常类示例\",{\"0\":{\"4812\":1}}],[\"自定义异常类通常需要编写几个重载的构造器\",{\"1\":{\"4807\":1}}],[\"自定义异常类\",{\"0\":{\"4804\":1}}],[\"自定义异常中定义的异常信息\",{\"1\":{\"4802\":1}}],[\"自定义view\",{\"1\":{\"4608\":1}}],[\"自定义重写tostring\",{\"0\":{\"4257\":1}}],[\"自定义类型\",{\"1\":{\"9642\":2}}],[\"自定义类型的说明\",{\"1\":{\"9641\":1}}],[\"自定义类employee中\",{\"1\":{\"7470\":1}}],[\"自定义类实线序列化与反序列化\",{\"0\":{\"6567\":1}}],[\"自定义类中一定要重写equal和hashcode方法\",{\"1\":{\"5780\":1}}],[\"自定义类重写equals\",{\"0\":{\"4233\":1}}],[\"自定义类\",{\"0\":{\"7469\":1,\"7491\":1},\"1\":{\"2422\":2}}],[\"自定义类的对象排序\",{\"0\":{\"1789\":1}}],[\"自定义排序\",{\"1\":{\"2491\":1}}],[\"自定义排序算法\",{\"1\":{\"2367\":1}}],[\"自定义排序规则\",{\"1\":{\"2364\":1}}],[\"自定义写入方式\",{\"1\":{\"2087\":2,\"2090\":2}}],[\"自定义格式\",{\"0\":{\"1720\":1},\"1\":{\"1687\":1}}],[\"自定义组名\",{\"1\":{\"907\":1}}],[\"自定义配置文件\",{\"0\":{\"802\":1}}],[\"自定义临时属性\",{\"1\":{\"781\":1}}],[\"自定义开发代码\",{\"1\":{\"542\":1}}],[\"自动销毁内存中的session\",{\"1\":{\"9782\":1}}],[\"自动将响应头里的set\",{\"1\":{\"9703\":1}}],[\"自动更新class和资源\",{\"1\":{\"8601\":1}}],[\"自动调用run方法\",{\"1\":{\"5182\":1}}],[\"自动调用tostring\",{\"1\":{\"4261\":1}}],[\"自动抛出\",{\"1\":{\"4690\":1}}],[\"自动生成\",{\"1\":{\"4690\":1}}],[\"自动释放\",{\"1\":{\"4634\":1}}],[\"自动拆箱\",{\"1\":{\"4284\":1,\"4286\":1}}],[\"自动装箱\",{\"1\":{\"4283\":1,\"4286\":1}}],[\"自动装箱与自动拆箱\",{\"0\":{\"4282\":1}}],[\"自动装配\",{\"1\":{\"521\":1}}],[\"自动转\",{\"1\":{\"4172\":1}}],[\"自动类型转换的逆过程\",{\"1\":{\"3175\":1}}],[\"自动类型转换\",{\"1\":{\"3151\":1}}],[\"自动类型提升\",{\"0\":{\"3150\":1},\"1\":{\"4222\":1}}],[\"自动编译执行\",{\"1\":{\"2899\":1}}],[\"自动创建\",{\"1\":{\"2078\":1}}],[\"自动创建好了\",{\"1\":{\"381\":1}}],[\"自动添加getter\",{\"1\":{\"1214\":1}}],[\"自动携带了众多basemapper中的方法\",{\"1\":{\"1013\":1}}],[\"自动产生mapper接口的对象\",{\"1\":{\"987\":1}}],[\"自动在该模块中生效\",{\"1\":{\"950\":1}}],[\"自动构建项目build\",{\"0\":{\"558\":1}}],[\"自动构建了项目的目录\",{\"1\":{\"332\":1}}],[\"自动启动热部署\",{\"0\":{\"556\":1}}],[\"自动配置\",{\"1\":{\"99\":1}}],[\"发给对方一大堆源文件是非常不好的\",{\"1\":{\"9487\":1}}],[\"发送请求\",{\"1\":{\"9763\":1}}],[\"发送多个cookie\",{\"0\":{\"9711\":1}}],[\"发送cookie\",{\"1\":{\"9693\":1}}],[\"发送cookie对象\",{\"0\":{\"9682\":1},\"1\":{\"9675\":1}}],[\"发送到客户端\",{\"1\":{\"9683\":1}}],[\"发送端示例\",{\"0\":{\"6839\":1}}],[\"发送端与接收端是两个独立的运行程序\",{\"1\":{\"6833\":1}}],[\"发送和接收\",{\"1\":{\"6829\":1}}],[\"发送数据结束时无需释放资源\",{\"1\":{\"6742\":1}}],[\"发送不管对方是否准备好\",{\"1\":{\"6740\":1}}],[\"发送消息给运维等\",{\"1\":{\"1288\":1}}],[\"发生阻塞\",{\"1\":{\"5428\":1,\"5429\":1}}],[\"发生了重定向\",{\"1\":{\"9149\":1}}],[\"发生了乱码\",{\"1\":{\"4680\":1}}],[\"发生了二进制运算\",{\"1\":{\"3176\":1}}],[\"发生变化\",{\"1\":{\"536\":1}}],[\"发现打印了hello\",{\"1\":{\"8712\":1}}],[\"发现自己需要的锁\",{\"1\":{\"5430\":1}}],[\"发现会出现重复数字\",{\"1\":{\"5310\":1}}],[\"发现\",{\"1\":{\"867\":1,\"9319\":1}}],[\"发现端口被占用了\",{\"1\":{\"767\":1}}],[\"发现产生了变化就重新加载一次\",{\"1\":{\"533\":1}}],[\"发布和使用类库\",{\"0\":{\"9486\":1}}],[\"发布模式\",{\"1\":{\"7312\":1}}],[\"发布\",{\"0\":{\"695\":1},\"1\":{\"689\":1}}],[\"和单实例的用户登录认证类似\",{\"1\":{\"10761\":1}}],[\"和单机mongodb差不多\",{\"1\":{\"10496\":1}}],[\"和数据库信息\",{\"1\":{\"10721\":1}}],[\"和数组元素的默认值一样\",{\"1\":{\"3694\":1}}],[\"和数组第一个元素的内存地址\",{\"1\":{\"3525\":1}}],[\"和其它数据库\",{\"1\":{\"10721\":1}}],[\"和排序方式\",{\"1\":{\"10379\":1}}],[\"和命令编写顺序无关\",{\"1\":{\"10340\":1}}],[\"和$有特别的意义\",{\"1\":{\"10272\":1}}],[\"和code\",{\"1\":{\"10083\":1}}],[\"和value\",{\"1\":{\"9680\":1}}],[\"和html一样\",{\"1\":{\"9620\":1}}],[\"和httpservletrequest等域对象的创建与销毁事件\",{\"1\":{\"9323\":1}}],[\"和hashcode\",{\"1\":{\"5706\":1,\"5817\":1,\"5847\":1}}],[\"和request对象一样\",{\"1\":{\"9240\":1}}],[\"和requestfacade一样\",{\"1\":{\"8922\":1}}],[\"和resume\",{\"1\":{\"5372\":1}}],[\"和mysql对比\",{\"0\":{\"10048\":1}}],[\"和mybatis\",{\"1\":{\"1147\":1}}],[\"和mybatis的连接配置一样\",{\"1\":{\"1007\":1}}],[\"和maven的坐标\",{\"1\":{\"8549\":1,\"8561\":1}}],[\"和输出type\",{\"1\":{\"8543\":1}}],[\"和直接创建web\",{\"1\":{\"8532\":1}}],[\"和一个或多个备份节点\",{\"1\":{\"10448\":1}}],[\"和一个用来连接和关闭资源的jdbc工具类\",{\"1\":{\"8174\":1}}],[\"和一些不常用的\",{\"1\":{\"7413\":1}}],[\"和业务耦合\",{\"1\":{\"8168\":1}}],[\"和删除普通字段的操作一样\",{\"1\":{\"8086\":1}}],[\"和添加的步骤一样\",{\"1\":{\"8085\":1}}],[\"和给占位符赋的值\",{\"1\":{\"7984\":1}}],[\"和初始值类型相同的值\",{\"1\":{\"7707\":1}}],[\"和eat\",{\"1\":{\"7282\":1}}],[\"和equals\",{\"1\":{\"5748\":1,\"5757\":1,\"5800\":1}}],[\"和静态方法\",{\"1\":{\"7025\":1}}],[\"和outputstream\",{\"1\":{\"6780\":1}}],[\"和ojbectoutputsteam两个类组成\",{\"1\":{\"6531\":1}}],[\"和网络互联协议\",{\"1\":{\"6727\":1}}],[\"和println\",{\"1\":{\"6454\":1}}],[\"和流基类的字节流方法基本一样\",{\"1\":{\"6407\":1}}],[\"和流基类的read方法类似\",{\"1\":{\"6391\":1}}],[\"和流基类的方法一样\",{\"1\":{\"6225\":1}}],[\"和流的基类基本一致\",{\"1\":{\"6378\":1}}],[\"和节点流的操作一样\",{\"1\":{\"6337\":1,\"6338\":1}}],[\"和类初始化给的类型一致或是object\",{\"1\":{\"6037\":1}}],[\"和last\",{\"1\":{\"5666\":1}}],[\"和wait\",{\"0\":{\"5456\":1}}],[\"和正常类一样\",{\"1\":{\"4872\":1}}],[\"和普通类一样\",{\"1\":{\"4867\":1,\"4872\":1}}],[\"和创建一个普通对象一样\",{\"1\":{\"4691\":1}}],[\"和饿汉式差不多\",{\"1\":{\"4424\":1}}],[\"和x不同类型的对象\",{\"1\":{\"4240\":1}}],[\"和==的作用是相同的\",{\"1\":{\"4231\":1}}],[\"和方法重载一样\",{\"1\":{\"3869\":1}}],[\"和对象\",{\"1\":{\"3617\":1}}],[\"和表达式2为\",{\"0\":{\"3317\":1}}],[\"和|\",{\"1\":{\"3295\":1}}],[\"和基本数据类型一样\",{\"1\":{\"3206\":1}}],[\"和整形类似\",{\"1\":{\"3087\":1}}],[\"和3种引用类型\",{\"1\":{\"3021\":1}}],[\"和持续时间\",{\"1\":{\"1623\":1}}],[\"和servlet类似\",{\"1\":{\"8903\":1}}],[\"和setxxx\",{\"1\":{\"3823\":1,\"3828\":1}}],[\"和sql的distinct类似\",{\"1\":{\"7618\":1}}],[\"和sql中的效果类似\",{\"1\":{\"7596\":1}}],[\"和string\",{\"1\":{\"1855\":1}}],[\"和string的length方法类似\",{\"1\":{\"1580\":1}}],[\"和spring整合junit一样\",{\"1\":{\"670\":1}}],[\"和\",{\"0\":{\"1635\":1,\"7551\":1},\"1\":{\"952\":2,\"1651\":1,\"2399\":1,\"2478\":1,\"3296\":1,\"3297\":1,\"4947\":1,\"4949\":1,\"4952\":2,\"5047\":1,\"5060\":1,\"5542\":1,\"5556\":2,\"5799\":1,\"5802\":1,\"5933\":1,\"6191\":1,\"6808\":1,\"6828\":1,\"6917\":1,\"6918\":1,\"6919\":1,\"7585\":1,\"7618\":1,\"7714\":1,\"8365\":1,\"9311\":1,\"9579\":2,\"9831\":1,\"9838\":1,\"9854\":1,\"9873\":1,\"9971\":1,\"10215\":1,\"10335\":1}}],[\"和自定义bean的属性绑定操作类似\",{\"1\":{\"604\":1}}],[\"和我们的程序是平级的\",{\"1\":{\"535\":1}}],[\"和需要添加的依赖\",{\"1\":{\"319\":1}}],[\"方能进行连接\",{\"1\":{\"10812\":1}}],[\"方可实例化\",{\"1\":{\"4501\":1}}],[\"方法向集合中插入文档\",{\"1\":{\"10245\":1}}],[\"方法进行数据的添加操作\",{\"1\":{\"9560\":1}}],[\"方法判断该用户名是否存在\",{\"1\":{\"9560\":1}}],[\"方法使用的频率会比较高\",{\"1\":{\"9029\":1}}],[\"方法即可\",{\"1\":{\"8794\":1,\"10416\":1}}],[\"方法作为抽象\",{\"1\":{\"8793\":1}}],[\"方法作为程序的入口\",{\"1\":{\"4610\":1}}],[\"方法调用之后\",{\"1\":{\"8761\":1}}],[\"方法调用时所需要的参数\",{\"1\":{\"7273\":1}}],[\"方法调用时实际传给形参的参数值\",{\"1\":{\"3772\":1}}],[\"方法完成资源的释放\",{\"1\":{\"8761\":1}}],[\"方法对数据进行排序\",{\"1\":{\"10335\":1}}],[\"方法对请求进行处理\",{\"1\":{\"8759\":1}}],[\"方法对应的myannotation的value值\",{\"1\":{\"5060\":1}}],[\"方法初始化这个对象\",{\"1\":{\"8757\":1}}],[\"方法检测下一行是否有效\",{\"1\":{\"8004\":1}}],[\"方法移动到下一行\",{\"1\":{\"8004\":1}}],[\"方法有两个参数\",{\"1\":{\"7951\":1,\"7954\":1}}],[\"方法都是空参\",{\"1\":{\"7475\":1}}],[\"方法都得到一个全新的迭代器对象\",{\"1\":{\"5577\":1}}],[\"方法引用写法\",{\"0\":{\"7463\":1}}],[\"方法引用示例\",{\"0\":{\"7458\":1}}],[\"方法引用时\",{\"1\":{\"7457\":1}}],[\"方法引用介绍\",{\"0\":{\"7440\":1}}],[\"方法引用\",{\"0\":{\"7439\":1,\"7474\":1,\"7481\":1,\"7488\":1,\"7496\":1},\"1\":{\"7424\":1,\"7442\":1}}],[\"方法将抛出instantiationexception异常\",{\"1\":{\"7056\":1}}],[\"方法将该线程挂起\",{\"1\":{\"5371\":1}}],[\"方法在多线程环境中被正确加锁和同步\",{\"1\":{\"7020\":1}}],[\"方法会返回一个\",{\"1\":{\"6816\":1}}],[\"方法获得输出流\",{\"1\":{\"6793\":1}}],[\"方法获得输入流\",{\"1\":{\"6792\":1}}],[\"方法获取事件涉及的httpsession对象\",{\"1\":{\"9440\":1}}],[\"方法获取\",{\"1\":{\"2456\":1,\"7927\":1,\"7945\":1}}],[\"方法获取输入的字符串\",{\"1\":{\"2322\":1,\"2779\":1}}],[\"方法获取class对象\",{\"1\":{\"2136\":1,\"6996\":1}}],[\"方法用来获取\",{\"1\":{\"6611\":1}}],[\"方法二\",{\"1\":{\"6447\":1}}],[\"方法一\",{\"1\":{\"6446\":1}}],[\"方法时\",{\"1\":{\"5877\":1,\"9199\":1}}],[\"方法时不必创建对象\",{\"1\":{\"4616\":1}}],[\"方法或者compare\",{\"1\":{\"5834\":1,\"5907\":1}}],[\"方法或字段声明之前\",{\"1\":{\"2938\":1}}],[\"方法比较的\",{\"1\":{\"5758\":1}}],[\"方法比较相等\",{\"1\":{\"5705\":1}}],[\"方法返回一个集合中的所有索引的数组\",{\"1\":{\"10376\":1}}],[\"方法返回符合条件的全部记录条数\",{\"1\":{\"10320\":1}}],[\"方法返回0\",{\"1\":{\"5834\":1,\"5907\":1}}],[\"方法返回\",{\"1\":{\"5818\":1,\"5820\":1}}],[\"方法返回值也相等\",{\"1\":{\"5705\":1}}],[\"方法返回所要的数据\",{\"1\":{\"3733\":1}}],[\"方法之前必须要调用it\",{\"1\":{\"5594\":1}}],[\"方法之后已经调用了\",{\"1\":{\"2468\":1,\"5603\":1}}],[\"方法唤醒\",{\"1\":{\"5439\":1}}],[\"方法暂停当前线程的执行\",{\"1\":{\"5370\":1}}],[\"方法定义了线程的操作和功能\",{\"1\":{\"5290\":1}}],[\"方法列表\",{\"0\":{\"5203\":1}}],[\"方法启动\",{\"1\":{\"5199\":1}}],[\"方法由jvm调用\",{\"1\":{\"5197\":1}}],[\"方法前调用thread\",{\"1\":{\"5152\":1}}],[\"方法同时被\",{\"1\":{\"5060\":1}}],[\"方法声明\",{\"1\":{\"4961\":1}}],[\"方法声明时的参数\",{\"1\":{\"3771\":1}}],[\"方法等已过时\",{\"1\":{\"4893\":1,\"4902\":1}}],[\"方法直接用即可\",{\"1\":{\"4862\":1}}],[\"方法直接使用父类的\",{\"1\":{\"4815\":1}}],[\"方法重写时的异常规则\",{\"0\":{\"4781\":1}}],[\"方法区\",{\"1\":{\"4635\":1}}],[\"方法执行完\",{\"1\":{\"4634\":1}}],[\"方法如果有返回值\",{\"1\":{\"4619\":1}}],[\"方法可以通过参数指定排序的字段\",{\"1\":{\"10335\":1}}],[\"方法可以作为我们与控制台交互的方式\",{\"1\":{\"4612\":1}}],[\"方法可以声明0个\",{\"1\":{\"3726\":1}}],[\"方法也是一个普通的静态方法\",{\"1\":{\"4611\":1}}],[\"方法来跳过指定数量的数据\",{\"1\":{\"10328\":1}}],[\"方法来读取指定数量的数据\",{\"1\":{\"10328\":1}}],[\"方法来设置这些参数\",{\"1\":{\"7951\":1,\"7954\":1}}],[\"方法来比较元素之间的大小关系\",{\"1\":{\"5718\":1}}],[\"方法来启动这个线程\",{\"1\":{\"5176\":1}}],[\"方法来完成操作的\",{\"1\":{\"5173\":1}}],[\"方法来\",{\"1\":{\"4245\":1}}],[\"方法来获得一个\",{\"1\":{\"2666\":1}}],[\"方法是由编译期自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的\",{\"1\":{\"7018\":1}}],[\"方法是阻塞的\",{\"1\":{\"6344\":1}}],[\"方法是否包含myannotation注解\",{\"1\":{\"5060\":1}}],[\"方法是可以连续调用的\",{\"1\":{\"4619\":1}}],[\"方法是可以有参数的\",{\"1\":{\"3770\":1}}],[\"方法是静态的\",{\"1\":{\"4617\":1}}],[\"方法是被重写过的\",{\"1\":{\"4244\":1}}],[\"方法必须由其所在类或对象调用才有意义\",{\"1\":{\"3770\":1}}],[\"方法递归包含了一种隐式的循环\",{\"1\":{\"3752\":1}}],[\"方法访问类的成员\",{\"0\":{\"3744\":1}}],[\"方法访问非\",{\"1\":{\"3649\":1}}],[\"方法被调用一次\",{\"1\":{\"3740\":1}}],[\"方法功能的体现\",{\"1\":{\"3729\":1}}],[\"方法体逻辑\",{\"1\":{\"7452\":1}}],[\"方法体都省了\",{\"1\":{\"7423\":1}}],[\"方法体都没有关系\",{\"1\":{\"3757\":1}}],[\"方法体外的\",{\"1\":{\"7355\":1}}],[\"方法体\",{\"1\":{\"3718\":1,\"3729\":1,\"7464\":1}}],[\"方法形参\",{\"1\":{\"3679\":1,\"3689\":1}}],[\"方法内\",{\"1\":{\"3679\":1}}],[\"方法修改指定字符或字符串时\",{\"1\":{\"3225\":1}}],[\"方法和getproperty\",{\"1\":{\"5841\":1}}],[\"方法和类\",{\"1\":{\"4347\":1}}],[\"方法和构造器\",{\"1\":{\"3891\":1}}],[\"方法和\",{\"1\":{\"3056\":1}}],[\"方法上面\",{\"1\":{\"4942\":1}}],[\"方法上的文档格式如下\",{\"1\":{\"2975\":1}}],[\"方法上常用文档标记\",{\"0\":{\"2968\":1}}],[\"方法签名throws对应的异常\",{\"1\":{\"2972\":1}}],[\"方法名\",{\"1\":{\"2944\":1,\"3069\":1,\"3636\":1,\"3718\":1,\"3725\":1,\"3792\":1,\"3793\":1,\"4394\":1,\"4593\":1,\"4868\":1,\"6041\":1,\"7105\":1,\"7106\":1,\"7446\":1,\"9333\":1,\"9342\":1,\"9351\":1,\"9360\":1,\"9369\":1,\"9379\":1,\"9388\":1,\"9398\":1,\"9407\":1,\"9417\":1,\"9424\":1,\"9434\":1}}],[\"方法名和参数\",{\"1\":{\"1028\":1}}],[\"方法中只要规定了返回值类型\",{\"1\":{\"7356\":1}}],[\"方法中只能调用方法或属性\",{\"1\":{\"3743\":1}}],[\"方法中操作的是形参中的m\",{\"1\":{\"3783\":1}}],[\"方法中也可以定义变量\",{\"1\":{\"3745\":1}}],[\"方法中\",{\"1\":{\"3721\":1,\"3745\":1}}],[\"方法中不要加\",{\"1\":{\"2938\":1}}],[\"方法中指明如何比较大小\",{\"1\":{\"1746\":1}}],[\"方法得到该类的实例\",{\"1\":{\"2744\":1,\"2767\":1}}],[\"方法的注解\",{\"1\":{\"7105\":1}}],[\"方法的过程\",{\"1\":{\"7018\":1}}],[\"方法的使用\",{\"1\":{\"6319\":1}}],[\"方法的使用示例\",{\"0\":{\"6074\":1}}],[\"方法的主体称为线程体\",{\"1\":{\"5173\":1}}],[\"方法的method实例\",{\"1\":{\"5060\":2}}],[\"方法的类型\",{\"1\":{\"4593\":1}}],[\"方法的写法\",{\"1\":{\"4593\":1}}],[\"方法的形参被赋予了m\",{\"1\":{\"3783\":1}}],[\"方法的参数可以是任意数据类型\",{\"1\":{\"3774\":1}}],[\"方法的参数名\",{\"1\":{\"2969\":1}}],[\"方法的重载\",{\"0\":{\"3755\":1}}],[\"方法的结果应该返回给调用者\",{\"1\":{\"3742\":1}}],[\"方法的调用\",{\"0\":{\"3735\":1}}],[\"方法的调用者\",{\"1\":{\"2278\":1,\"7172\":1}}],[\"方法的分类\",{\"0\":{\"3717\":1}}],[\"方法的局部变量\",{\"1\":{\"3044\":1}}],[\"方法的返回值来比较大小\",{\"1\":{\"1750\":1}}],[\"方法参数是一个包含文件路径属性的file对象\",{\"1\":{\"2014\":1}}],[\"方法\",{\"0\":{\"3712\":1,\"8762\":1,\"9245\":1},\"1\":{\"1623\":1,\"1750\":1,\"1782\":1,\"2468\":1,\"2481\":1,\"2906\":1,\"2943\":1,\"3043\":1,\"3627\":1,\"3630\":1,\"3635\":1,\"3709\":1,\"3714\":1,\"3823\":1,\"3828\":1,\"3838\":1,\"3887\":1,\"3894\":1,\"3897\":1,\"3972\":1,\"4076\":1,\"4082\":1,\"4150\":1,\"4152\":1,\"4153\":1,\"4203\":1,\"4208\":1,\"4232\":1,\"4245\":1,\"4255\":1,\"4317\":1,\"4362\":1,\"4408\":1,\"4616\":1,\"4774\":1,\"4883\":1,\"4993\":1,\"5060\":1,\"5368\":1,\"5572\":2,\"5603\":1,\"5706\":1,\"5732\":1,\"5751\":1,\"5800\":1,\"5841\":1,\"5862\":1,\"5977\":1,\"6320\":1,\"6454\":1,\"6960\":1,\"7183\":1,\"7186\":1,\"7508\":2,\"7515\":1,\"7523\":1,\"7592\":1,\"7999\":1}}],[\"方便查询\",{\"1\":{\"10035\":1}}],[\"方便区分\",{\"1\":{\"8611\":1}}],[\"方便调试\",{\"1\":{\"8601\":1}}],[\"方便地访问数据库资源\",{\"1\":{\"7798\":1}}],[\"方便看框架源码\",{\"1\":{\"7068\":1}}],[\"方便设置线程属性\",{\"1\":{\"5517\":1}}],[\"方便直接用类调用\",{\"1\":{\"4411\":1}}],[\"方便类的管理\",{\"1\":{\"3918\":1}}],[\"方便进行一些测试\",{\"1\":{\"2318\":1,\"2775\":1}}],[\"方便维护\",{\"1\":{\"806\":1}}],[\"方便代码的调试\",{\"1\":{\"526\":1}}],[\"方式5\",{\"0\":{\"7866\":1}}],[\"方式4\",{\"0\":{\"7863\":1}}],[\"方式3\",{\"0\":{\"7860\":1,\"8114\":1}}],[\"方式告诉数据库\",{\"1\":{\"7848\":1}}],[\"方式表明可以调用xxx包下的所有结构\",{\"1\":{\"3963\":1}}],[\"方式\",{\"1\":{\"1504\":1,\"3900\":1,\"6732\":1}}],[\"方式二\",{\"1\":{\"1256\":1,\"2036\":2,\"4332\":1,\"6239\":1,\"6275\":1,\"6297\":1,\"10167\":1}}],[\"方式一\",{\"1\":{\"1256\":1,\"10167\":1}}],[\"方式2\",{\"0\":{\"7855\":1,\"8110\":1},\"1\":{\"709\":1,\"4291\":1,\"4292\":1,\"5350\":1,\"8116\":1}}],[\"方式1获取driver实现类的时候使用了第三方api\",{\"1\":{\"7856\":1}}],[\"方式1\",{\"0\":{\"7851\":1,\"8106\":1},\"1\":{\"707\":1,\"4290\":1,\"4292\":1,\"5350\":1}}],[\"方案优化\",{\"0\":{\"9005\":1}}],[\"方案\",{\"1\":{\"999\":1,\"4104\":1}}],[\"方案2\",{\"0\":{\"8189\":1},\"1\":{\"532\":1}}],[\"方案1\",{\"0\":{\"8186\":1},\"1\":{\"531\":1}}],[\"背景\",{\"0\":{\"4576\":1,\"5097\":1,\"9851\":1},\"1\":{\"530\":1,\"5490\":1}}],[\"而次要人员可能成为选举期间的主要人员\",{\"1\":{\"10464\":1}}],[\"而主要人员可能会退出并成为次要人员\",{\"1\":{\"10464\":1}}],[\"而其他节点被视为次要\",{\"1\":{\"10444\":1}}],[\"而将集合中的词作为词干\",{\"1\":{\"10372\":1}}],[\"而没有在硬盘中\",{\"1\":{\"10224\":1}}],[\"而没有变量和方法的实现\",{\"1\":{\"4472\":1}}],[\"而业务逻辑层和数据访问层的代码不需要发生变化\",{\"1\":{\"9581\":1}}],[\"而业务逻辑层方法调用数据访问层方法进行数据的操作\",{\"1\":{\"9564\":1}}],[\"而业务层的方法名就是要做的业务\",{\"1\":{\"1259\":1}}],[\"而classes目录下则包含编译好的servlet类和jsp\",{\"1\":{\"9524\":1}}],[\"而calendar并不比date好多少\",{\"1\":{\"1616\":1}}],[\"而src不再web目录下\",{\"1\":{\"9260\":1}}],[\"而servletcontext对象是可以直接跟tomcat通信的\",{\"1\":{\"9231\":1}}],[\"而servlet接口中有service方法\",{\"1\":{\"8728\":1}}],[\"而后缀名可以随便定义\",{\"1\":{\"9236\":1}}],[\"而httpservlet的原理也是如此\",{\"1\":{\"8820\":1}}],[\"而tomcat\",{\"1\":{\"8783\":1}}],[\"而dql操作需要额外关闭一个resultset资源\",{\"1\":{\"8039\":1}}],[\"而持久化的实现过程大多通过各种关系数据库来完成\",{\"1\":{\"7788\":1}}],[\"而nosql的数据就需要java层面去处理了\",{\"1\":{\"7548\":1}}],[\"而lambda表达式可以作为函数式接口的实例\",{\"1\":{\"7442\":1}}],[\"而language\",{\"1\":{\"7328\":1}}],[\"而函数式接口就补气了这个短板\",{\"1\":{\"7399\":1}}],[\"而用反射创建类的对象\",{\"1\":{\"6951\":1}}],[\"而url类则不仅符合语义\",{\"1\":{\"6913\":1}}],[\"而url和urn则是具体的资源标识的方式\",{\"1\":{\"6911\":1}}],[\"而url是uniform\",{\"1\":{\"6910\":1}}],[\"而urn\",{\"1\":{\"6911\":1}}],[\"而utf\",{\"1\":{\"6427\":1}}],[\"而得名\",{\"1\":{\"6727\":1}}],[\"而与再下一层不发生关系\",{\"1\":{\"6720\":1}}],[\"而g是具有泛型声明的类或接口\",{\"1\":{\"6053\":1}}],[\"而输入数据的取值范围是无限的\",{\"1\":{\"5764\":1}}],[\"而如果两个元素通过算法计算的位置是一样的\",{\"1\":{\"5729\":1}}],[\"而jar包则不行\",{\"1\":{\"9527\":1}}],[\"而jar的涵盖范围更广\",{\"1\":{\"9527\":1}}],[\"而java中是驼峰分隔单词的\",{\"1\":{\"8049\":1}}],[\"而java不能直接定义函数\",{\"1\":{\"7399\":1}}],[\"而java\",{\"1\":{\"5521\":1}}],[\"而jdk8中的arraylist的对象的创建类似于单例的懒汉式\",{\"1\":{\"5662\":1}}],[\"而又不需暴露该对象的内部细节\",{\"1\":{\"5569\":1}}],[\"而当前线程排队等候其他线程调用notify\",{\"1\":{\"5439\":1}}],[\"而进程p1申请资源r2\",{\"1\":{\"5422\":1}}],[\"而p2在未释放打印机之前\",{\"1\":{\"5416\":1}}],[\"而多个买票程序通过是否有票的判断时\",{\"1\":{\"5304\":1}}],[\"而应用程序是软件的一个组成部分\",{\"1\":{\"5066\":1,\"5067\":1}}],[\"而\",{\"1\":{\"4978\":1,\"4987\":1,\"7553\":1,\"9579\":1,\"9581\":1,\"9915\":1,\"10335\":1}}],[\"而执行的方法a可以考虑使用try\",{\"1\":{\"4786\":1}}],[\"而此时若使用多态\",{\"1\":{\"4783\":1}}],[\"而由该方法的调用者负责处理\",{\"1\":{\"4767\":1}}],[\"而对象实体中保存了对象的属性\",{\"1\":{\"4640\":1}}],[\"而对于多态\",{\"1\":{\"4158\":1}}],[\"而使用javabean设计的类\",{\"1\":{\"4588\":1}}],[\"而使用热部署就能解决这个问题\",{\"1\":{\"525\":1}}],[\"而接口实现则是\",{\"1\":{\"4483\":1}}],[\"而它们之间又没有is\",{\"1\":{\"4478\":1}}],[\"而抽象类不能实例化\",{\"1\":{\"4457\":1}}],[\"而并没有产生实质上的对象\",{\"1\":{\"4364\":1}}],[\"而且还可以利用副本服务器做只读服务器\",{\"1\":{\"10439\":1}}],[\"而且还指明了如何locate这个资源\",{\"1\":{\"6866\":1,\"6910\":1}}],[\"而且安全\",{\"1\":{\"9487\":1}}],[\"而且除了路由\",{\"1\":{\"8836\":1}}],[\"而且\",{\"1\":{\"6591\":1}}],[\"而且只执行一次\",{\"1\":{\"4556\":1}}],[\"而且可以多继承\",{\"1\":{\"4494\":1}}],[\"而且是先声明后使用\",{\"1\":{\"4335\":1,\"4339\":1}}],[\"而且string\",{\"1\":{\"4244\":1}}],[\"而且y\",{\"1\":{\"4238\":1}}],[\"而且位置是灵活的\",{\"1\":{\"3370\":1}}],[\"而方法的调用是在运行时确定的\",{\"1\":{\"4150\":1}}],[\"而实际使用的是子类\",{\"1\":{\"4130\":1}}],[\"而这多个接口中定义了同名同参数的默认方法\",{\"1\":{\"4532\":1}}],[\"而这个内部的完整的结构又只为外部事物提供服务\",{\"1\":{\"4304\":1,\"4345\":1}}],[\"而这些方法的参数不同\",{\"1\":{\"4157\":1}}],[\"而这种\",{\"1\":{\"4123\":1}}],[\"而这里我们只配置了info\",{\"1\":{\"952\":1}}],[\"而import是导入命名空间的\",{\"1\":{\"3941\":1}}],[\"而参数本身不受影响\",{\"1\":{\"3778\":1}}],[\"而数组名中引用的是这块连续空间的首地址\",{\"1\":{\"3469\":1}}],[\"而数组中的元素可以是任何数据类型\",{\"1\":{\"3468\":1}}],[\"而加l的操作也延续到了定义变量的时候\",{\"1\":{\"3109\":1}}],[\"而表示一个普通的反斜杠是\",{\"1\":{\"2671\":1}}],[\"而在dopost方法中\",{\"1\":{\"9003\":1}}],[\"而在每次操作前\",{\"1\":{\"8796\":1,\"8823\":1}}],[\"而在用户输入数据中注入非法的\",{\"1\":{\"7891\":1}}],[\"而在终止操作时一次性全部处理\",{\"1\":{\"7598\":1}}],[\"而在其被解锁之时\",{\"1\":{\"5358\":1}}],[\"而在\",{\"1\":{\"2671\":1}}],[\"而我们自定义的类\",{\"1\":{\"2420\":1}}],[\"而月份都从0开始\",{\"1\":{\"1618\":1}}],[\"而非\",{\"1\":{\"9475\":1}}],[\"而非开始时的项目\",{\"1\":{\"8493\":1}}],[\"而非对象\",{\"1\":{\"7457\":1}}],[\"而非char\",{\"1\":{\"6306\":1}}],[\"而非entry\",{\"1\":{\"5878\":1}}],[\"而非地址\",{\"1\":{\"5753\":1}}],[\"而非都当成obj\",{\"1\":{\"5558\":1}}],[\"而非直接调用run\",{\"1\":{\"5176\":1}}],[\"而非运算符\",{\"1\":{\"4230\":1}}],[\"而非形参\",{\"1\":{\"3895\":1,\"3898\":1}}],[\"而非找到了交集\",{\"1\":{\"2436\":1}}],[\"而非引用的复制\",{\"1\":{\"2373\":1}}],[\"而非字符串\",{\"1\":{\"1528\":1,\"2704\":1}}],[\"而非内存地址\",{\"1\":{\"1423\":1}}],[\"而整合之后\",{\"1\":{\"962\":1}}],[\"而是用自己捆绑的jdk\",{\"1\":{\"9889\":1}}],[\"而是需要遵守一些规则\",{\"1\":{\"8677\":1}}],[\"而是使用\",{\"1\":{\"8626\":1}}],[\"而是使用synchronizedlist对arraylist数据进行处理\",{\"1\":{\"5676\":1}}],[\"而是独作为一个额外的工具类\",{\"1\":{\"8195\":1}}],[\"而是将数据库连接对象放到了联机池中\",{\"1\":{\"8143\":1}}],[\"而是提供\",{\"1\":{\"6698\":1}}],[\"而是提供更具体的子接口\",{\"1\":{\"5557\":1}}],[\"而是覆盖写\",{\"1\":{\"6521\":1}}],[\"而是从指定指针位置处写\",{\"1\":{\"6521\":1}}],[\"而是内容覆盖\",{\"1\":{\"6521\":1}}],[\"而是会去读取一个已经存在的文件\",{\"1\":{\"6513\":1}}],[\"而是要利用object进行强转\",{\"1\":{\"6012\":1}}],[\"而是要么继承抽象类\",{\"1\":{\"4473\":1,\"4484\":1}}],[\"而是通过排序方法\",{\"1\":{\"5786\":1}}],[\"而是通过配置中心获取配置\",{\"1\":{\"814\":1}}],[\"而是根据数据的哈希值决定的\",{\"1\":{\"5693\":1}}],[\"而是在第一次add的时候\",{\"1\":{\"5659\":1}}],[\"而是比较两个对象的\",{\"1\":{\"4232\":1}}],[\"而是报错\",{\"1\":{\"3017\":1}}],[\"而是直接改变了源数组\",{\"1\":{\"2357\":1}}],[\"而是5个字符还在\",{\"1\":{\"2055\":1,\"6262\":1}}],[\"而是\",{\"1\":{\"1904\":1,\"6166\":1,\"6184\":1}}],[\"而是已有的内容的长度\",{\"1\":{\"1574\":1}}],[\"而是新建一个配置文件\",{\"1\":{\"806\":1}}],[\"而是采用多个配置文件\",{\"1\":{\"784\":1}}],[\"而是自动去查找配置类\",{\"1\":{\"670\":1}}],[\"而占用端口的程序又不能关闭\",{\"1\":{\"767\":1}}],[\"而不扫描任何文档或将文档带入内存\",{\"1\":{\"10431\":1}}],[\"而不应该放到数据库连接内部\",{\"1\":{\"8140\":1}}],[\"而不用自己再去定义了\",{\"1\":{\"7452\":1}}],[\"而不用关心任何改变\",{\"1\":{\"4579\":1}}],[\"而不用调用包装类xxx的xxxvalue\",{\"1\":{\"4284\":1}}],[\"而不用使用构造器\",{\"1\":{\"4283\":1}}],[\"而不用将类导入\",{\"1\":{\"3924\":1}}],[\"而不可以直接访问\",{\"1\":{\"4033\":1}}],[\"而不是ip\",{\"1\":{\"10496\":1}}],[\"而不是工作空间里的路径\",{\"1\":{\"9251\":1}}],[\"而不是实现\",{\"1\":{\"8801\":1}}],[\"而不是重新建立一个\",{\"1\":{\"8228\":1}}],[\"而不是execute\",{\"1\":{\"7995\":1}}],[\"而不是直接操作数据库\",{\"1\":{\"7806\":1}}],[\"而不是进行序列化传输\",{\"1\":{\"6533\":1}}],[\"而不是进行try\",{\"1\":{\"4788\":1}}],[\"而不是分别表示两个符号呢\",{\"1\":{\"6426\":1}}],[\"而不是用object\",{\"1\":{\"5967\":1}}],[\"而不是让用户看乱码\",{\"1\":{\"4680\":1}}],[\"而不是他们的一个抽象\",{\"1\":{\"4478\":1}}],[\"而不是false\",{\"1\":{\"4277\":1}}],[\"而不是日期\",{\"1\":{\"1641\":1}}],[\"而不是修改源数据\",{\"1\":{\"1636\":1}}],[\"而不是修改了源字符串\",{\"1\":{\"1460\":1}}],[\"而不是stringbuffer本身的长度\",{\"1\":{\"1580\":1}}],[\"而不是返回一个新的\",{\"1\":{\"1571\":1}}],[\"而不是在postman中\",{\"1\":{\"678\":1}}],[\"而不带maven插件打包的结果只是一个普通包\",{\"1\":{\"742\":1}}],[\"而第三方开发的bean源代码不是你自己书写的\",{\"1\":{\"593\":1}}],[\"而默认的版本是3\",{\"1\":{\"321\":1}}],[\"想用需要自己手动安装\",{\"1\":{\"10177\":1}}],[\"想快速迭代开发\",{\"1\":{\"10040\":1}}],[\"想要在java程序中表示一个真实存在的文件或目录\",{\"1\":{\"6115\":1}}],[\"想再遍历就重新获得迭代器\",{\"1\":{\"5600\":1}}],[\"想不导入直接用也可以\",{\"1\":{\"3955\":1}}],[\"想单独执行某个class\",{\"1\":{\"2923\":1}}],[\"想查看效果就要重启服务器\",{\"1\":{\"525\":1}}],[\"想修改版本需要在项目构建完后\",{\"1\":{\"352\":1}}],[\"指令已经没用了\",{\"1\":{\"9614\":1}}],[\"指令以二进制代码形式存在\",{\"1\":{\"2833\":1}}],[\"指示是否自动为指定列进行编号\",{\"1\":{\"8027\":1}}],[\"指示指定列中的值是否可以为\",{\"1\":{\"8026\":1}}],[\"指示指定列的最大标准宽度\",{\"1\":{\"8025\":1}}],[\"指的是工作目录下的路径\",{\"1\":{\"9253\":1}}],[\"指的是二维数组的元素\",{\"1\":{\"3536\":1}}],[\"指的是二维数组本身\",{\"1\":{\"3535\":1}}],[\"指的是获取文件的大小\",{\"1\":{\"1961\":1}}],[\"指向项目的目录\",{\"1\":{\"8473\":1}}],[\"指向元素a\",{\"1\":{\"5745\":1}}],[\"指向原来的元素\",{\"1\":{\"5744\":1}}],[\"指向同一个对象\",{\"1\":{\"4647\":1}}],[\"指向的内层数组\",{\"1\":{\"3573\":1}}],[\"指向的是内层数组\",{\"1\":{\"3562\":1}}],[\"指向了一个一维数组\",{\"1\":{\"3534\":1}}],[\"指向某类的某个方法\",{\"1\":{\"2949\":1}}],[\"指向集合中的某个元素\",{\"1\":{\"2458\":1,\"5581\":1}}],[\"指针指向数据表的第一条记录的前面\",{\"1\":{\"8004\":1}}],[\"指针指向第一个元素前面\",{\"1\":{\"5599\":1}}],[\"指针不会重置\",{\"1\":{\"5600\":1}}],[\"指针就会呆在集合末尾\",{\"1\":{\"2464\":1,\"5584\":1}}],[\"指针就往后移动一次\",{\"1\":{\"2458\":1,\"5581\":1}}],[\"指针\",{\"0\":{\"2457\":1,\"5580\":1,\"8003\":1},\"1\":{\"3534\":1,\"7961\":1}}],[\"指明该词在文章中出现的次数和位置\",{\"1\":{\"9866\":1}}],[\"指明该文件中定义的类所在的包\",{\"1\":{\"3926\":1}}],[\"指明构造器的参数列表\",{\"1\":{\"7181\":1}}],[\"指明读入和写出的文件\",{\"1\":{\"6287\":1}}],[\"指明写出到的文件\",{\"1\":{\"6285\":1}}],[\"指明要操作的文件\",{\"1\":{\"6251\":1}}],[\"指明此方法执行时\",{\"1\":{\"4771\":1}}],[\"指明其权限\",{\"1\":{\"3691\":1}}],[\"指明获取的方法的形参列表\",{\"1\":{\"2208\":1,\"7165\":1}}],[\"指明获取的方法的名\",{\"1\":{\"2207\":1,\"7164\":1}}],[\"指明当前项目的引导类\",{\"1\":{\"668\":1}}],[\"指定较高的值可使成员更有资格成为主要成员\",{\"1\":{\"10622\":1}}],[\"指定配置文档\",{\"1\":{\"10568\":1}}],[\"指定新成员的主机名和可选的端口号\",{\"1\":{\"10567\":1}}],[\"指定用于保存mongos或mongod进程的进程id的文件位置\",{\"1\":{\"10496\":1}}],[\"指定为true创建唯一索引\",{\"1\":{\"10391\":1}}],[\"指定要在与查询筛选器匹配的文档中返回的字段\",{\"1\":{\"10309\":1}}],[\"指定要用于操作的校对规则\",{\"1\":{\"10285\":1}}],[\"指定命名空间的标签\",{\"1\":{\"9645\":1}}],[\"指定本地tomcat软件的具体路径\",{\"1\":{\"8591\":1}}],[\"指定打开方式\",{\"1\":{\"6630\":1}}],[\"指定文件的大小\",{\"1\":{\"6622\":1}}],[\"指定字符集\",{\"0\":{\"6386\":1,\"6403\":1}}],[\"指定路径下文件的复制\",{\"1\":{\"6305\":1}}],[\"指定父类泛型具体类型\",{\"0\":{\"6020\":1}}],[\"指定类型参数的值\",{\"1\":{\"5992\":1}}],[\"指定泛型的类型\",{\"1\":{\"6001\":1}}],[\"指定泛型\",{\"1\":{\"5975\":1}}],[\"指定了key和value的泛型\",{\"1\":{\"5970\":1}}],[\"指定了内层数组的长度\",{\"1\":{\"3572\":1}}],[\"指定了内层数组长度\",{\"0\":{\"3553\":1}}],[\"指定线程的操作\",{\"1\":{\"5514\":1}}],[\"指定需谨慎\",{\"1\":{\"5359\":1}}],[\"指定的目录\",{\"1\":{\"6631\":1}}],[\"指定的时间\",{\"1\":{\"5228\":1}}],[\"指定的millitime毫秒\",{\"1\":{\"5213\":1}}],[\"指定时间\",{\"1\":{\"5227\":1}}],[\"指定创建线程的目标对象\",{\"1\":{\"5169\":1}}],[\"指定所修饰的\",{\"1\":{\"4972\":1,\"4977\":1}}],[\"指定包\",{\"0\":{\"3925\":1}}],[\"指定返回值的类型\",{\"1\":{\"3721\":1}}],[\"指定内层数组长度\",{\"0\":{\"3542\":1}}],[\"指定舍入策略\",{\"1\":{\"1907\":1}}],[\"指定环境名\",{\"1\":{\"828\":1}}],[\"指定加载的数据\",{\"1\":{\"519\":1,\"590\":1}}],[\"指不依赖开发环境执行打包产生的文件\",{\"1\":{\"689\":1}}],[\"指将程序转换成一个可执行的文件\",{\"1\":{\"688\":1}}],[\"指南\",{\"0\":{\"0\":1}}],[\"索引默认命名规范\",{\"0\":{\"10402\":1}}],[\"索引名\",{\"1\":{\"10379\":1}}],[\"索引的名称\",{\"1\":{\"10392\":1}}],[\"索引的字段\",{\"1\":{\"10379\":1}}],[\"索引的类型\",{\"0\":{\"10363\":1}}],[\"索引引擎版本\",{\"1\":{\"10379\":1}}],[\"索引键的排序顺序\",{\"1\":{\"10366\":1}}],[\"索引项的排序支持有效的相等匹配和基于范围的查询操作\",{\"1\":{\"10361\":1}}],[\"索引支持在mongodb中高效地执行查询\",{\"1\":{\"10359\":1}}],[\"索引位置\",{\"1\":{\"5732\":1}}],[\"索引\",{\"0\":{\"10358\":1},\"1\":{\"501\":1,\"502\":1,\"3464\":1,\"10068\":1}}],[\"索引操作\",{\"1\":{\"214\":1,\"220\":1}}],[\"一样\",{\"1\":{\"10721\":1}}],[\"一主一副本一仲裁\",{\"1\":{\"10466\":1,\"10473\":1}}],[\"一条数据在这里就是一个文档\",{\"1\":{\"9910\":1}}],[\"一条线顺序执行叫一个线程\",{\"1\":{\"5141\":1}}],[\"一组节点构成一个集群\",{\"1\":{\"9840\":1}}],[\"一组api\",{\"1\":{\"7798\":1}}],[\"一是在java安装目录的jre\",{\"1\":{\"9493\":1}}],[\"一是遇到错误就终止程序的运行\",{\"1\":{\"4676\":1}}],[\"一共有三个会话\",{\"1\":{\"9658\":1}}],[\"一共有5种\",{\"1\":{\"9288\":1}}],[\"一共有四种方法\",{\"1\":{\"6991\":1}}],[\"一行代码解决所有乱码问题\",{\"1\":{\"9053\":1}}],[\"一行一行的读\",{\"1\":{\"6347\":1}}],[\"一台主机可以启动多太tomcat服务器\",{\"1\":{\"8607\":1}}],[\"一元运算符\",{\"1\":{\"7589\":1}}],[\"一段时间\",{\"1\":{\"7035\":1}}],[\"一套是针对标准输入输出nio\",{\"1\":{\"6582\":1}}],[\"一致后才能正常反序列化\",{\"1\":{\"6576\":1}}],[\"一致性\",{\"1\":{\"4239\":1}}],[\"一路都不要用\",{\"1\":{\"6007\":1}}],[\"一些特定的服务器端命令也只能从这个数据库运行\",{\"1\":{\"10205\":1}}],[\"一些操作\",{\"0\":{\"6540\":1}}],[\"一些弊端\",{\"1\":{\"5521\":1}}],[\"一些接口的实现集合\",{\"1\":{\"4516\":1}}],[\"一种维护浏览器状态的方法\",{\"1\":{\"9661\":1}}],[\"一种复杂的约束技术\",{\"1\":{\"9627\":1}}],[\"一种简单的约束技术\",{\"1\":{\"9626\":1}}],[\"一种资源跳转方式\",{\"1\":{\"9130\":1}}],[\"一种是\",{\"1\":{\"5150\":2}}],[\"一种程序运行出现的错误\",{\"1\":{\"5136\":1}}],[\"一切皆数据\",{\"1\":{\"5112\":1}}],[\"一款软件具有某些功能\",{\"1\":{\"5083\":1}}],[\"一定不要打包servlet包\",{\"1\":{\"8684\":1}}],[\"一定省略的内容\",{\"0\":{\"7349\":1}}],[\"一定会发生类的初始化\",{\"1\":{\"7022\":1}}],[\"一定的规则\",{\"1\":{\"6653\":1}}],[\"一定程度上可以说\",{\"1\":{\"4887\":1}}],[\"一定要切到admin数据库\",{\"1\":{\"10734\":1}}],[\"一定要先处理控制台乱码\",{\"1\":{\"9037\":1}}],[\"一定要重写compareto方法或compare方法\",{\"1\":{\"5782\":1}}],[\"一定要考虑异常的处理\",{\"1\":{\"4762\":1}}],[\"一定要显式赋值\",{\"1\":{\"3700\":1}}],[\"一开始直接定义枚举对象\",{\"1\":{\"4856\":1}}],[\"一开始是用于开发桌面级应用的\",{\"1\":{\"2805\":1}}],[\"一部分实现是不确定的\",{\"1\":{\"4462\":1}}],[\"一维数组的名称分别为arr\",{\"1\":{\"3544\":1}}],[\"一维数组的内存解析\",{\"0\":{\"3517\":1}}],[\"一维数组\",{\"0\":{\"3487\":1},\"1\":{\"3473\":1}}],[\"一旦触发了被监控的事件\",{\"1\":{\"9319\":1}}],[\"一旦发现\",{\"1\":{\"9318\":1}}],[\"一旦指明后\",{\"1\":{\"5977\":1}}],[\"一旦初始化以后\",{\"1\":{\"5524\":1,\"5528\":1}}],[\"一旦执行终止操作\",{\"1\":{\"7558\":1}}],[\"一旦执行方法\",{\"1\":{\"5457\":1}}],[\"一旦执行此方法\",{\"1\":{\"5438\":1,\"5440\":1,\"5441\":1}}],[\"一旦执行break\",{\"1\":{\"3414\":1}}],[\"一旦判断instance不是null\",{\"1\":{\"5353\":1}}],[\"一旦进程被创建\",{\"1\":{\"5074\":1}}],[\"一旦当方法体执行时\",{\"1\":{\"4771\":1}}],[\"一旦处理完成\",{\"1\":{\"4738\":1}}],[\"一旦try中的异常对象匹配到某一个catch时\",{\"1\":{\"4738\":1}}],[\"一旦抛出对象以后\",{\"1\":{\"4687\":1}}],[\"一旦出现异常\",{\"1\":{\"4687\":1,\"4737\":1}}],[\"一旦返回true\",{\"1\":{\"4185\":1}}],[\"一旦子类a继承父类b以后\",{\"1\":{\"4005\":1}}],[\"一旦赋值以后\",{\"1\":{\"3989\":1}}],[\"一旦显式定义了构造器\",{\"1\":{\"3878\":1}}],[\"一旦我们显式的定义了类的构造器之后\",{\"1\":{\"3873\":1}}],[\"一旦除尽\",{\"1\":{\"3457\":1}}],[\"一旦匹配成功\",{\"1\":{\"3363\":1}}],[\"一次查询就能将订单所有的变更读取出来\",{\"1\":{\"10036\":1}}],[\"一次会话\",{\"1\":{\"9654\":1}}],[\"一次请求\",{\"1\":{\"9128\":1}}],[\"一次请求响应结束后\",{\"1\":{\"9087\":1}}],[\"一次读取多个字符\",{\"0\":{\"6252\":1},\"1\":{\"6253\":1}}],[\"一次读取多个字节\",{\"1\":{\"2044\":1}}],[\"一次\",{\"1\":{\"3931\":1}}],[\"一次编译\",{\"1\":{\"2674\":1,\"2822\":1}}],[\"一参\",{\"0\":{\"2043\":1}}],[\"一并创建\",{\"1\":{\"2008\":1}}],[\"一个且仅一个成员被视为主节点\",{\"1\":{\"10444\":1}}],[\"一个文档认为就是一个对象\",{\"1\":{\"10078\":1}}],[\"一个文件中可以创建多个类\",{\"1\":{\"3629\":1}}],[\"一个文件可以有多个class\",{\"1\":{\"2922\":1}}],[\"一个站点存在的文档可能会非常多\",{\"1\":{\"9927\":1}}],[\"一个有作用范围的对象\",{\"1\":{\"9115\":1,\"9239\":1}}],[\"一个form表单\",{\"1\":{\"9024\":1}}],[\"一个field对象\",{\"1\":{\"2215\":1}}],[\"一个servlet类中一般都要定义doget方法和dopost方法\",{\"1\":{\"8998\":1}}],[\"一个springboot项目在运行时实际上是分两个过程进行的\",{\"1\":{\"538\":1}}],[\"一个druiddatasource只支持一个evictionrun\",{\"1\":{\"8312\":1}}],[\"一个数据表对应一个java类\",{\"1\":{\"8029\":1}}],[\"一个predicate\",{\"1\":{\"7677\":1}}],[\"一个学生类\",{\"1\":{\"7655\":1}}],[\"一个中间操作链\",{\"1\":{\"7557\":1}}],[\"一个中文用3个字符表示\",{\"1\":{\"1500\":1}}],[\"一个动态代理类\",{\"1\":{\"7250\":1}}],[\"一个class对象对应的是一个加载到jvm中的一个\",{\"1\":{\"6977\":1}}],[\"一个cpu\",{\"1\":{\"5095\":1}}],[\"一个加载的类在\",{\"1\":{\"6976\":1}}],[\"一个uri实例可以代表绝对的\",{\"1\":{\"6913\":1}}],[\"一个url对象生成后\",{\"1\":{\"6886\":1}}],[\"一个key\",{\"1\":{\"5821\":1}}],[\"一个空的集合\",{\"1\":{\"5562\":1}}],[\"一个线程类中的所有静态方法共用同一把锁\",{\"1\":{\"5359\":1}}],[\"一个线程对多条语句只执行了一部分\",{\"1\":{\"5306\":1}}],[\"一个线程对象只能调用一次start\",{\"1\":{\"5199\":1}}],[\"一个变量对应一小块内存\",{\"1\":{\"5126\":1}}],[\"一个java应用程序java\",{\"1\":{\"5092\":1}}],[\"一个进程至少有一个线程\",{\"1\":{\"5087\":1}}],[\"一个进程崩溃后\",{\"1\":{\"5086\":1}}],[\"一个进程中的多个线程共享相同的内存单元\",{\"1\":{\"5080\":1}}],[\"一个程序可以对应多个进程\",{\"1\":{\"5076\":1}}],[\"一个匿名类一定是在new的后面\",{\"1\":{\"4347\":1}}],[\"一个没有\",{\"1\":{\"4241\":1}}],[\"一个引用类型变量如果声明为父类的类型\",{\"1\":{\"4132\":1}}],[\"一个类只有一个class对象\",{\"1\":{\"6930\":1}}],[\"一个类只能有一个父类\",{\"1\":{\"4017\":1}}],[\"一个类\",{\"1\":{\"4827\":1}}],[\"一个类中代码块若有修饰符\",{\"1\":{\"4552\":1}}],[\"一个类可以实现多个接口\",{\"1\":{\"4500\":1}}],[\"一个类可以被多个子类继承\",{\"1\":{\"4014\":1}}],[\"一个类可以创建多个重载的构造器\",{\"1\":{\"3879\":1}}],[\"一个native方法是指该方法的实现由非java语言实现\",{\"1\":{\"3995\":1}}],[\"一个native方法就是一个java调用非java代码的接口\",{\"1\":{\"3995\":1}}],[\"一个方法体内调用它自身\",{\"1\":{\"3751\":1}}],[\"一个位分解成3个位表示\",{\"1\":{\"3199\":1}}],[\"一个片假名\",{\"1\":{\"3114\":1}}],[\"一个汉字\",{\"1\":{\"3114\":1}}],[\"一个运行java的虚拟机\",{\"1\":{\"2816\":1}}],[\"一个反斜杠\",{\"1\":{\"2671\":1}}],[\"一个误区\",{\"0\":{\"2053\":1}}],[\"一个字节的二进制数据\",{\"1\":{\"2042\":1}}],[\"一个字母用1个字符表示\",{\"1\":{\"1500\":1}}],[\"一个是与被下载文件大小相同的空文件\",{\"1\":{\"6528\":1}}],[\"一个是\",{\"1\":{\"6426\":1}}],[\"一个是往外写字符的\",{\"1\":{\"2067\":1}}],[\"一个是往外写字节的\",{\"1\":{\"2067\":1}}],[\"一个是读取字节的一个是读取字符的\",{\"1\":{\"2028\":1}}],[\"一个是数据层接口\",{\"1\":{\"1268\":1}}],[\"一个无实体的file对象即可以是目录也可以是文件\",{\"1\":{\"2000\":1,\"6145\":1}}],[\"一个可选的level和一个可选的addtivity属性\",{\"1\":{\"952\":1}}],[\"一直使用的是这个\",{\"1\":{\"789\":1}}],[\"一级属性名\",{\"1\":{\"498\":1,\"500\":1}}],[\"一般只需关注前两个\",{\"1\":{\"10281\":1}}],[\"一般只用在集合上\",{\"1\":{\"6096\":1}}],[\"一般传统数据库\",{\"1\":{\"9854\":1}}],[\"一般采用账户名密码的形式进行权限认证\",{\"1\":{\"10794\":1}}],[\"一般采用的认证方式是x\",{\"1\":{\"10762\":1}}],[\"一般采用url编码\",{\"1\":{\"9724\":1}}],[\"一般采用idea内置maven的版本进行下载\",{\"1\":{\"1067\":1}}],[\"一般dopost和doget是要被重写的\",{\"1\":{\"8805\":1}}],[\"一般我们返回一个空字符串即可\",{\"1\":{\"8780\":1}}],[\"一般设置为\",{\"1\":{\"8594\":1}}],[\"一般选择使用jdbc来连接数据库\",{\"1\":{\"7806\":1}}],[\"一般仅作用集合的展开\",{\"1\":{\"7650\":1}}],[\"一般主动发起通信的应用程序属客户端\",{\"1\":{\"6762\":1}}],[\"一般地\",{\"1\":{\"4806\":1}}],[\"一般是指编程时的逻辑错误\",{\"1\":{\"4705\":1}}],[\"一般有两种\",{\"1\":{\"4676\":1}}],[\"一般来说对应的是数据库中的一张表\",{\"1\":{\"4581\":1}}],[\"一般都使用单例模式实现\",{\"1\":{\"4435\":1}}],[\"一般也只有一个对象\",{\"1\":{\"4437\":1}}],[\"一般也是单例模式实现\",{\"1\":{\"4434\":1}}],[\"一般也会设置跳过maven单元测试\",{\"1\":{\"1070\":1}}],[\"一般开发中都会提供一个\",{\"1\":{\"3874\":1}}],[\"一般②在前\",{\"1\":{\"3711\":1}}],[\"一般最多写三层\",{\"1\":{\"3446\":1}}],[\"一般最顶层也会加上一些通用的配置\",{\"1\":{\"829\":1}}],[\"一般在javadoc中只要涉及到类名或者方法名\",{\"1\":{\"2950\":1}}],[\"一般用集合\",{\"1\":{\"5538\":1}}],[\"一般用来加载资源文件\",{\"1\":{\"9449\":1}}],[\"一般用来获取自定义的注解\",{\"1\":{\"7109\":1}}],[\"一般用来执行callable\",{\"1\":{\"5503\":1}}],[\"一般用来执行runnable\",{\"1\":{\"5502\":1}}],[\"一般用来返回实现了某个接口的类的对象\",{\"1\":{\"4331\":1}}],[\"一般用在定义它的类或语句块之内\",{\"1\":{\"4302\":1}}],[\"一般用于请求转发的多个资源中共享数据\",{\"1\":{\"9116\":1}}],[\"一般用于程序流程控制\",{\"1\":{\"3139\":1}}],[\"一般用于测试\",{\"1\":{\"2911\":1}}],[\"一般用getdeclaredmethod\",{\"1\":{\"2203\":1}}],[\"一般的float类和double类可以用来做科学计算或工程计算\",{\"1\":{\"1872\":1}}],[\"一般stringbuffer也能使用\",{\"1\":{\"1573\":1}}],[\"一般不指定\",{\"1\":{\"10266\":1}}],[\"一般不使用jsp\",{\"1\":{\"9461\":1}}],[\"一般不编写针对性的代码进行处理\",{\"1\":{\"4668\":1,\"4699\":1}}],[\"一般不用给这个值\",{\"1\":{\"10571\":1}}],[\"一般不用设置\",{\"1\":{\"10390\":1}}],[\"一般不用\",{\"0\":{\"7147\":1,\"7167\":1}}],[\"一般不用添加\",{\"1\":{\"1128\":1}}],[\"一般不用手动调整\",{\"1\":{\"402\":1}}],[\"一般不直接用\",{\"1\":{\"972\":1}}],[\"一般情况下用这个\",{\"1\":{\"5634\":1}}],[\"一般情况下\",{\"1\":{\"900\":1}}],[\"一般80端口冲突都是因为开启了多个服务器\",{\"1\":{\"744\":1}}],[\"一般会有测试用的数据库\",{\"1\":{\"682\":1}}],[\"一般使用postman或者swagger\",{\"1\":{\"679\":1}}],[\"一般为xxxapplication\",{\"1\":{\"424\":1}}],[\"一般外部用户无法访问\",{\"1\":{\"117\":1,\"118\":1}}],[\"大家一般称之为redis缓存\",{\"1\":{\"10118\":1}}],[\"大企业的选择\",{\"0\":{\"9841\":1}}],[\"大类型\",{\"1\":{\"9228\":1}}],[\"大概42亿\",{\"1\":{\"6666\":1}}],[\"大概将只会用到其中的三分之一\",{\"1\":{\"1631\":1}}],[\"大多数为\",{\"1\":{\"10618\":1}}],[\"大多数\",{\"1\":{\"10461\":1,\"10618\":1,\"10619\":1}}],[\"大多数情况下\",{\"1\":{\"7788\":1}}],[\"大多数方法在出错时仅返回失败\",{\"1\":{\"6591\":1}}],[\"大多数时候使用\",{\"1\":{\"5696\":1}}],[\"大多数开发者\",{\"1\":{\"1631\":1}}],[\"大多数开发者只会用到基础包和format包\",{\"1\":{\"1631\":1}}],[\"大驼峰\",{\"1\":{\"3068\":1}}],[\"大括号不换行\",{\"1\":{\"2994\":1}}],[\"大括号的风格\",{\"1\":{\"2994\":1}}],[\"大数据开发\",{\"1\":{\"2811\":1}}],[\"大于o2\",{\"1\":{\"1783\":1}}],[\"大大简化了日期时间和本地化的管理\",{\"1\":{\"1623\":1}}],[\"大小写无关\",{\"1\":{\"952\":2}}],[\"大小写敏感\",{\"1\":{\"480\":1}}],[\"大部分配置信息springboot会自动读取\",{\"1\":{\"497\":1}}],[\"底层都是将用户信息保存在了admin数据库的集合\",{\"1\":{\"10716\":1}}],[\"底层都创建了长度为10的数组\",{\"1\":{\"5678\":1}}],[\"底层改变\",{\"0\":{\"7771\":1}}],[\"底层创建长度为16的数组\",{\"1\":{\"5877\":1}}],[\"底层创建了长度是16的一维数组entry\",{\"1\":{\"5855\":1}}],[\"底层创建了长度是10的object\",{\"1\":{\"5647\":1}}],[\"底层没有创建一个长度为16的数组\",{\"1\":{\"5876\":1}}],[\"底层结构\",{\"1\":{\"5814\":1,\"5824\":1,\"5830\":1}}],[\"底层\",{\"0\":{\"5897\":1,\"9230\":1},\"1\":{\"5775\":1,\"5784\":1}}],[\"底层是个空的object\",{\"1\":{\"5660\":1}}],[\"底层是ioc容器\",{\"1\":{\"494\":1}}],[\"底层才创建了长度10的数组\",{\"1\":{\"5659\":1}}],[\"底层object\",{\"1\":{\"5659\":1}}],[\"底层解析\",{\"0\":{\"4034\":1}}],[\"底层表示\",{\"1\":{\"3310\":1}}],[\"底层说明\",{\"0\":{\"3101\":1}}],[\"底层默认创建了16个长度的char数组\",{\"1\":{\"1559\":1}}],[\"底层使用双向链表存储\",{\"1\":{\"5639\":1}}],[\"底层使用object\",{\"1\":{\"5636\":1,\"5643\":1}}],[\"底层使用char\",{\"1\":{\"1551\":1,\"1552\":1}}],[\"底层使用final\",{\"1\":{\"1550\":1}}],[\"底层设计中采用线程安全的statefulredisconnection\",{\"1\":{\"1043\":1}}],[\"底层原理\",{\"0\":{\"1055\":1,\"5723\":1,\"9009\":1},\"1\":{\"97\":1}}],[\"将配置导入变量\",{\"1\":{\"10626\":1}}],[\"将配置作为参数添加即可\",{\"1\":{\"769\":1}}],[\"将仲裁节点添加到副本集\",{\"1\":{\"10579\":1}}],[\"将从节点添加道副本集\",{\"1\":{\"10572\":1}}],[\"将启动的参数写入配置文件\",{\"1\":{\"10147\":1}}],[\"将下载的压缩包解压后即可使用\",{\"1\":{\"9876\":1}}],[\"将编码后的值存入cookie中\",{\"1\":{\"9726\":1}}],[\"将编译失败\",{\"1\":{\"3079\":1}}],[\"将约束的规则定义在外部的dtd文件中\",{\"1\":{\"9633\":1}}],[\"将约束规则定义在xml文档中\",{\"1\":{\"9633\":1}}],[\"将tomcat和web项目打成jar放在一起\",{\"1\":{\"9530\":1}}],[\"将符合规范的war包放在tomcat的webapps目录下的时候\",{\"1\":{\"9527\":1}}],[\"将代码中的通用部分抽离出来\",{\"1\":{\"9489\":1}}],[\"将该方法的调用时机改为服务器启动时调用\",{\"1\":{\"8767\":1}}],[\"将该类定义为泛型类\",{\"1\":{\"5999\":1}}],[\"将来如果将表现层的技术换掉\",{\"1\":{\"9581\":1}}],[\"将来使用springmvc的时候\",{\"1\":{\"9442\":1}}],[\"将来页面发送的是get请求\",{\"1\":{\"8819\":1}}],[\"将来定义servlet类时\",{\"1\":{\"8794\":1}}],[\"将来我们需要定义servlet类实现servlet接口\",{\"1\":{\"8672\":1}}],[\"将来很长一段时间内它都会为我们服务\",{\"1\":{\"1622\":1}}],[\"将服务器上所有的项目都重新部署\",{\"1\":{\"8599\":1}}],[\"将war包放置在tomcat根目录的webapps目录下\",{\"1\":{\"9520\":1}}],[\"将web工程以当前文件夹的位置关系发布到tomcat服务器上\",{\"1\":{\"8586\":1,\"8645\":1}}],[\"将web工程打成war包\",{\"1\":{\"8584\":1,\"8643\":1}}],[\"将writer转为outputstream\",{\"1\":{\"6369\":1}}],[\"将已有的项目\",{\"1\":{\"8532\":1}}],[\"将项目打成一个war包\",{\"1\":{\"8465\":1}}],[\"将控制台改为utf8\",{\"1\":{\"8447\":1}}],[\"将不用输入端口号\",{\"1\":{\"8442\":1}}],[\"将不用内存收回\",{\"1\":{\"2825\":1}}],[\"将静态资源部署到web服务器上\",{\"1\":{\"8407\":1}}],[\"将结果集中某一列的数据存放到list中\",{\"1\":{\"8374\":1}}],[\"将结果集中的第一行数据封装到一个map里\",{\"1\":{\"8376\":1}}],[\"将结果集中的第一行数据封装到一个对应的javabean实例中\",{\"1\":{\"8372\":1}}],[\"将结果集中的每一行数据都封装到一个map里\",{\"1\":{\"8375\":1,\"8377\":1}}],[\"将结果集中的每一行数据都封装到一个对应的javabean实例中\",{\"1\":{\"8373\":1}}],[\"将会终止插入\",{\"1\":{\"10266\":1}}],[\"将会生成一个名字\",{\"1\":{\"8270\":1}}],[\"将会导致数据库系统中的内存泄漏\",{\"1\":{\"8222\":1}}],[\"将会被重新加载\",{\"1\":{\"952\":1}}],[\"将设置改回去\",{\"1\":{\"8143\":1}}],[\"将blob类型的字段下载下来\",{\"1\":{\"8089\":1}}],[\"将buffer中的内容读入\",{\"1\":{\"6339\":1}}],[\"将类名\",{\"1\":{\"8058\":1}}],[\"将类实例化成计算机世界中的对象\",{\"1\":{\"3611\":1}}],[\"将循环拿到的每行数据对象\",{\"1\":{\"8054\":1}}],[\"将连接对象放回连接池\",{\"1\":{\"8234\":1}}],[\"将连接方式写入配置文件让驱动加载\",{\"0\":{\"7866\":1}}],[\"将连接信息写入日志\",{\"1\":{\"7203\":1,\"7207\":1}}],[\"将1和3连在一起\",{\"1\":{\"7865\":1}}],[\"将123封装到node中\",{\"1\":{\"5669\":1}}],[\"将流转换为其他形式\",{\"1\":{\"7718\":1}}],[\"将以三年为周期发布长期支持版本\",{\"1\":{\"7313\":1}}],[\"将通用方法加入myinvocationhandler\",{\"1\":{\"7307\":1}}],[\"将抛出\",{\"1\":{\"7057\":1}}],[\"将抛出异常\",{\"1\":{\"5185\":1}}],[\"将class文件字节码内容加载到内存中\",{\"1\":{\"7011\":1}}],[\"将cookie数据写到硬盘的文件中\",{\"1\":{\"9719\":1}}],[\"将cookie对象通过响应对象response\",{\"1\":{\"9683\":1}}],[\"将comparator对象作为参数\",{\"1\":{\"5794\":1}}],[\"将coll2集合中的元素添加到集合coll\",{\"1\":{\"2407\":1}}],[\"将产生ioexception\",{\"1\":{\"6898\":1}}],[\"将要发送的数据\",{\"1\":{\"6849\":1}}],[\"将path转化为file类的对象\",{\"1\":{\"6609\":1}}],[\"将p1保存的内存地址赋给了p3\",{\"1\":{\"4647\":1}}],[\"将指针调到角标为3的位置\",{\"1\":{\"6526\":1}}],[\"将指针位置后面的数据赋值一份\",{\"1\":{\"6524\":1}}],[\"将指针指到文件末尾\",{\"1\":{\"6523\":1}}],[\"将指定key\",{\"1\":{\"2587\":1}}],[\"将指定值填充到数组之中\",{\"1\":{\"2386\":1}}],[\"将指定\",{\"1\":{\"2104\":1,\"2494\":1}}],[\"将文件输入流作为blob类型插入数据表\",{\"1\":{\"8084\":1}}],[\"将文件加载为inputstream\",{\"1\":{\"7045\":1}}],[\"将文件记录指针定位到\",{\"1\":{\"6500\":1}}],[\"将文件中存储的基本数据类型变量和字符串读取到内存中\",{\"1\":{\"6485\":1}}],[\"将文本文件转换成别的编码输出\",{\"1\":{\"6372\":1}}],[\"将文本标记为代码样式文本\",{\"1\":{\"2950\":1}}],[\"将内存中的java对象保存到磁盘中或通过网络传输出去\",{\"1\":{\"6535\":1}}],[\"将内存中的数据写入文件\",{\"1\":{\"6483\":1}}],[\"将内存中的字符串\",{\"1\":{\"6481\":1}}],[\"将内容初始化为指定字符串内容\",{\"1\":{\"1547\":1}}],[\"将上述的方法的read改为相应的write即可\",{\"1\":{\"6479\":1}}],[\"将jar包加载到扩展库\",{\"1\":{\"7828\":1}}],[\"将java类的二进制代码合并到jvm的运行状态之中的过程\",{\"1\":{\"7013\":1}}],[\"将java的基本数据类型和string数据写出到文件中\",{\"1\":{\"6463\":1}}],[\"将jdk\",{\"1\":{\"2857\":1}}],[\"将inputstream转为reader\",{\"1\":{\"6368\":1}}],[\"将程序\",{\"1\":{\"6155\":1}}],[\"将程序执行中发生的不正常情况称为\",{\"1\":{\"4664\":1}}],[\"将被代理类对象\",{\"1\":{\"7287\":1}}],[\"将被代理类要执行的方法a的功能就声明在invoke\",{\"1\":{\"7279\":1}}],[\"将被擦除\",{\"1\":{\"6006\":1}}],[\"将被wait的线程重新激活\",{\"1\":{\"5464\":1}}],[\"将线程池接口类型转为接口的子类类型\",{\"1\":{\"5517\":1}}],[\"将线程要执行的逻辑声明在run\",{\"1\":{\"5282\":1}}],[\"将futuretask的对象作为参数传递到thread类的构造器中\",{\"1\":{\"5486\":1}}],[\"将需要同步的数据放入synchronized包裹的方法中\",{\"1\":{\"5355\":1}}],[\"将同步方法设置为静态方法\",{\"1\":{\"5343\":1}}],[\"将同步监视器也设置成static类\",{\"1\":{\"5331\":1}}],[\"将成员变量设置成static\",{\"1\":{\"5330\":1}}],[\"将进入线程队列等待cpu时间片\",{\"1\":{\"5289\":1}}],[\"将runnable接口的实例\",{\"1\":{\"5268\":1}}],[\"将创建的线程要执行的操作声明在此方法中\",{\"1\":{\"5206\":1}}],[\"将此线程需要执行的操作声明在call\",{\"1\":{\"5480\":1,\"5486\":1}}],[\"将此线程执行的操作声明在run\",{\"1\":{\"5180\":1}}],[\"将此对象作为参数传递到thread类的构造器中\",{\"1\":{\"5260\":1,\"5263\":1}}],[\"将此时父类的方法称为虚拟方法\",{\"1\":{\"4147\":1}}],[\"将既长又复杂的进程分为多个线程\",{\"1\":{\"5104\":1}}],[\"将具有\",{\"1\":{\"5005\":1}}],[\"将异常抛到代码的调用处\",{\"1\":{\"4770\":1}}],[\"将异常信息加入异常日志\",{\"1\":{\"1288\":1}}],[\"将可能出现异常的代码放在try语句块中\",{\"1\":{\"4728\":1}}],[\"将可能抛出异常\",{\"1\":{\"1501\":1}}],[\"将整个程序分为三个层次\",{\"1\":{\"4595\":1}}],[\"将整个idea全部改为utf\",{\"1\":{\"1073\":1}}],[\"将这些信息传递作为参数给代理对象的invoke方法\",{\"1\":{\"7244\":1}}],[\"将这些属性设置为类属性\",{\"1\":{\"4367\":1}}],[\"将这些内容抽取到单独一个类中\",{\"1\":{\"3999\":1}}],[\"将obj的object类型向下转型为person以便对比属性\",{\"1\":{\"4241\":1}}],[\"将子类对象赋值给父类数据类型的标识符\",{\"1\":{\"4160\":1}}],[\"将功能相近的类划分到同一个包中\",{\"1\":{\"3920\":1}}],[\"将功能封装进对象\",{\"1\":{\"3599\":1}}],[\"将年龄设置成了负数\",{\"1\":{\"3818\":1}}],[\"将array1保存的数组的地址值赋给了array2\",{\"1\":{\"3483\":1}}],[\"将args参数传递给了里面的run方法\",{\"1\":{\"779\":1}}],[\"将容量大的数据类型转换为容量小的数据类型\",{\"1\":{\"3175\":1}}],[\"将一个变量的值赋值给另一个变量时\",{\"1\":{\"4652\":1}}],[\"将一个循环结构a声明在另一个循环结构b的循环体中\",{\"1\":{\"3446\":1}}],[\"将一些方法也设置成私有的\",{\"1\":{\"3829\":1}}],[\"将一种字符集编码的字符转换成其他字符集编码的字符\",{\"1\":{\"3133\":1}}],[\"将一组数据封装到一个对象中\",{\"1\":{\"588\":1}}],[\"将一组数据封装到一个java对象中\",{\"1\":{\"510\":1}}],[\"将世界所有字符都纳入其中\",{\"1\":{\"3130\":1}}],[\"将其打成war包部署到tomcat等容器中\",{\"1\":{\"9520\":1}}],[\"将其绑定到指定的本地地址\",{\"1\":{\"6847\":1}}],[\"将其延后成运行时异常\",{\"1\":{\"4761\":1}}],[\"将其编译成jvm可识别的二进制文件\",{\"1\":{\"2889\":1}}],[\"将其他集合的元素添加到当前集合\",{\"1\":{\"2406\":1}}],[\"将其他配置项的值作为自己值的一部分\",{\"1\":{\"491\":1}}],[\"将集合转为数组\",{\"1\":{\"2442\":1}}],[\"将当前集合与参数集合做差集\",{\"1\":{\"2432\":1}}],[\"将待比较元素与集合中的元素做equal\",{\"1\":{\"2418\":1}}],[\"将元素添加到集合中\",{\"1\":{\"2403\":1}}],[\"将mc作为参数传入给sort方法\",{\"1\":{\"2365\":1}}],[\"将数据存储在服务端\",{\"1\":{\"9793\":1}}],[\"将数据保存在服务器端的对象中\",{\"1\":{\"9742\":1}}],[\"将数据保存到客户端\",{\"1\":{\"9672\":1}}],[\"将数据交给视图进行展示\",{\"1\":{\"9546\":1}}],[\"将数据按要求转换为另一种形式\",{\"1\":{\"8368\":1}}],[\"将数据库连接关闭\",{\"1\":{\"8148\":1}}],[\"将数据\",{\"1\":{\"6738\":1}}],[\"将数据读入\",{\"1\":{\"6353\":1}}],[\"将数据响应给前端\",{\"1\":{\"1273\":1}}],[\"将数组中的数据copy到list中\",{\"1\":{\"6044\":1}}],[\"将数组转为字符串形式\",{\"1\":{\"2353\":1}}],[\"将\",{\"1\":{\"2103\":1,\"2883\":1,\"6621\":1,\"9912\":1}}],[\"将写的内容刷入文件\",{\"1\":{\"2074\":1}}],[\"将字符流以字节流的方式写出到文件中\",{\"1\":{\"6406\":1}}],[\"将字符写入指定的文件\",{\"1\":{\"2092\":1}}],[\"将字符读入数组\",{\"1\":{\"2046\":1}}],[\"将字符的unicode值转为字符\",{\"1\":{\"2042\":1}}],[\"将无法反序列化\",{\"1\":{\"6575\":1}}],[\"将无法进行比较\",{\"1\":{\"2420\":1}}],[\"将无法创建\",{\"1\":{\"2005\":1}}],[\"将无法执行测试类\",{\"1\":{\"667\":1}}],[\"将基本数据类型输出到一个文件\",{\"0\":{\"6459\":1}}],[\"将基本数据类型\",{\"1\":{\"1858\":1}}],[\"将number对象的值转换为xxx数据类型并返回\",{\"1\":{\"1847\":1}}],[\"将角度转为弧度\",{\"1\":{\"1841\":1}}],[\"将参数集合中的所有key\",{\"1\":{\"2591\":1}}],[\"将参数src集合的内容复制到参数dest集合中\",{\"1\":{\"2510\":1}}],[\"将参数转为角度\",{\"1\":{\"1840\":1}}],[\"将参数字符串连接到此字符串的结尾\",{\"1\":{\"1474\":1}}],[\"将日期数据转为string\",{\"1\":{\"1704\":1}}],[\"将session文件转化为内存中的session对象即可\",{\"1\":{\"9778\":1}}],[\"将session对象系列化到硬盘上\",{\"1\":{\"9777\":1}}],[\"将servlet的创建放到服务器启动的时候来创建\",{\"1\":{\"8749\":1}}],[\"将source\",{\"1\":{\"8741\":1}}],[\"将sql在循环外面创建\",{\"1\":{\"8112\":1}}],[\"将stream代表的集合中的每一个元素作为参数在方法中进行操作\",{\"1\":{\"7676\":1}}],[\"将stream中的每个元素\",{\"1\":{\"7646\":1}}],[\"将string数值字符串转为基本数据类型\",{\"1\":{\"1861\":1}}],[\"将string转为byte\",{\"1\":{\"1498\":1}}],[\"将string转为char\",{\"1\":{\"1493\":1}}],[\"将s2作为锁\",{\"1\":{\"5429\":1}}],[\"将s1作为锁\",{\"1\":{\"5428\":1}}],[\"将syschronized声明在if里面\",{\"1\":{\"5353\":1}}],[\"将synchronize声明在getinstance处\",{\"1\":{\"5350\":1}}],[\"将springboot打包好的jar包上传道\",{\"1\":{\"756\":1}}],[\"将返回\",{\"1\":{\"1437\":1}}],[\"将方法的返回值加入ioc容器\",{\"1\":{\"1234\":1}}],[\"将所有元素都转为大写\",{\"1\":{\"7634\":1}}],[\"将所有字符都纳入其中\",{\"1\":{\"3131\":1}}],[\"将所有字符转为大写\",{\"1\":{\"1466\":1}}],[\"将所有字符转为小写\",{\"1\":{\"1462\":1}}],[\"将所有方法的返回值类型都修改为r\",{\"1\":{\"1298\":1}}],[\"将所有操作的操作结果数据格式统一起来\",{\"1\":{\"1292\":1}}],[\"将所有的数据都删除\",{\"1\":{\"10299\":1}}],[\"将所有的配置根据功能对配置文件中的信息进行拆分\",{\"1\":{\"846\":1}}],[\"将所有的bean纳入ioc管理\",{\"1\":{\"437\":1}}],[\"将所需的所有工具类和插件搭建\",{\"1\":{\"1104\":1}}],[\"将打印出logback内部日志信息\",{\"1\":{\"952\":1}}],[\"将执行main\",{\"1\":{\"734\":1}}],[\"将默认生成的spring\",{\"1\":{\"708\":1}}],[\"将第三方类加入ioc\",{\"0\":{\"594\":1}}],[\"引入\",{\"0\":{\"10832\":1}}],[\"引入xsi前缀\",{\"1\":{\"9645\":1}}],[\"引入约束写xml\",{\"0\":{\"9643\":1}}],[\"引入dtd\",{\"0\":{\"9634\":1}}],[\"引入dtd文档\",{\"0\":{\"9632\":1}}],[\"引入了path接口\",{\"1\":{\"6593\":1}}],[\"引起来\",{\"1\":{\"9604\":1}}],[\"引擎完成恶意行为的做法\",{\"1\":{\"7891\":1}}],[\"引用常量不会触发此类的初始化\",{\"1\":{\"7032\":1}}],[\"引用类型的变量\",{\"1\":{\"4649\":1}}],[\"引用类型都可以\",{\"1\":{\"3656\":1}}],[\"引用类型\",{\"1\":{\"3581\":1,\"4051\":1,\"4227\":1,\"5121\":1}}],[\"引用\",{\"1\":{\"3221\":1}}],[\"引用数据类型的标识符保存的是值的内存地址\",{\"1\":{\"4660\":1}}],[\"引用数据类型元素的数组\",{\"1\":{\"3474\":1}}],[\"引用数据类型\",{\"0\":{\"3784\":1,\"4659\":1},\"1\":{\"3034\":1,\"3699\":1,\"3776\":1}}],[\"引用数据\",{\"1\":{\"491\":1}}],[\"引导类加载器\",{\"1\":{\"7041\":1}}],[\"引导类的意义就是初始化spring容器\",{\"1\":{\"437\":1}}],[\"引导类的类名随意\",{\"1\":{\"424\":1}}],[\"引导类需要放到项目包中\",{\"1\":{\"435\":1}}],[\"引导类\",{\"0\":{\"422\":1,\"423\":1}}],[\"$clustertime\",{\"1\":{\"10554\":1,\"10573\":1,\"10580\":1,\"10657\":1,\"10660\":1}}],[\"$or\",{\"1\":{\"10356\":1,\"10357\":2}}],[\"$and\",{\"1\":{\"10356\":1,\"10357\":2}}],[\"$nin\",{\"1\":{\"10354\":1}}],[\"$ne\",{\"1\":{\"10351\":1}}],[\"$in\",{\"1\":{\"10354\":1}}],[\"$inc\",{\"1\":{\"10295\":1,\"10296\":1}}],[\"$lte\",{\"1\":{\"10351\":1}}],[\"$lt\",{\"1\":{\"10351\":1,\"10357\":2}}],[\"$gte\",{\"1\":{\"10351\":1,\"10357\":1}}],[\"$gt\",{\"1\":{\"10351\":2}}],[\"$set\",{\"1\":{\"10290\":1,\"10293\":1}}],[\"$\",{\"1\":{\"491\":1,\"492\":1,\"498\":1,\"499\":1,\"500\":1,\"501\":1,\"502\":1,\"503\":4,\"952\":1,\"3060\":1,\"10215\":1}}],[\"对资源进行的增\",{\"1\":{\"10653\":1}}],[\"对userid降序排列\",{\"1\":{\"10338\":1}}],[\"对表示方法\",{\"1\":{\"10082\":1}}],[\"对海量数据的高效率存储和访问的需求\",{\"1\":{\"10030\":1}}],[\"对每一个词建立一个索引\",{\"1\":{\"9866\":1}}],[\"对不同记录类型\",{\"1\":{\"9862\":1}}],[\"对不满足条件的参数\",{\"1\":{\"3724\":1}}],[\"对高度相关的搜索结果的有特殊需求\",{\"1\":{\"9861\":1}}],[\"对高优先级\",{\"1\":{\"5239\":1}}],[\"对同一个域名下的总cookie数量也有限制\",{\"1\":{\"9736\":1}}],[\"对同名方法的名称做修饰\",{\"1\":{\"4157\":1}}],[\"对中文进行url编码\",{\"1\":{\"9726\":1}}],[\"对numbertype类型的约束\",{\"1\":{\"9642\":1}}],[\"对agetype类型的约束\",{\"1\":{\"9642\":1}}],[\"对sextype类型的约束\",{\"1\":{\"9642\":1}}],[\"对业务逻辑进行封装\",{\"1\":{\"9559\":1}}],[\"对某类格式的资源请求进行拦截\",{\"1\":{\"9286\":1}}],[\"对某个类只能存在一个对象实例\",{\"1\":{\"4416\":1}}],[\"对http协议的操作进行封装\",{\"1\":{\"8397\":1}}],[\"对照如下\",{\"1\":{\"8155\":1}}],[\"对照matcher构造器源码\",{\"1\":{\"2768\":1}}],[\"对两个类型相同的参数进行二元运算\",{\"1\":{\"7706\":1}}],[\"对种子进行的操作\",{\"1\":{\"7589\":1}}],[\"对集合数据进行操作\",{\"1\":{\"7545\":1}}],[\"对集合对象实现同步控制等方法\",{\"1\":{\"2474\":1,\"5936\":1}}],[\"对数据库高并发读写的需求\",{\"1\":{\"10029\":1}}],[\"对数据库的高可扩展性和高可用性的需求\",{\"1\":{\"10031\":1}}],[\"对数据库的crud基本操作\",{\"1\":{\"9558\":1}}],[\"对数据库的调用方式\",{\"0\":{\"7881\":1}}],[\"对数据库连接进行安全检测\",{\"1\":{\"7202\":1}}],[\"对数据源的数据进行处理\",{\"1\":{\"7557\":1}}],[\"对数组进行排序\",{\"1\":{\"2358\":1}}],[\"对原有方法进行增强\",{\"1\":{\"7194\":1}}],[\"对原有文件的覆盖\",{\"1\":{\"6273\":1}}],[\"对person的操作\",{\"0\":{\"6957\":1}}],[\"对速率\",{\"1\":{\"6716\":1}}],[\"对文本文件进行转码\",{\"0\":{\"6410\":1}}],[\"对子类要求也要具备相应的泛型\",{\"1\":{\"6059\":1}}],[\"对处于\",{\"1\":{\"5905\":1}}],[\"对处于有序状态\",{\"1\":{\"5833\":1}}],[\"对的插入顺序一致\",{\"1\":{\"5899\":1}}],[\"对进行排序\",{\"1\":{\"5904\":1}}],[\"对进行\",{\"1\":{\"5831\":1}}],[\"对时\",{\"1\":{\"5831\":1,\"5904\":1}}],[\"对性能影响很大\",{\"1\":{\"5490\":1}}],[\"对多个字段联合创建一个索引\",{\"1\":{\"10398\":1}}],[\"对多个对象进行排序\",{\"0\":{\"1772\":1}}],[\"对多条操作共享数据的语句\",{\"1\":{\"5308\":1,\"5362\":1}}],[\"对图形化界面更有意义\",{\"1\":{\"5101\":1}}],[\"对对象的属性等进行初始化\",{\"1\":{\"4565\":1}}],[\"对称性\",{\"1\":{\"4236\":1}}],[\"对构造器的调用\",{\"0\":{\"4097\":1}}],[\"对属性可以赋值的位置\",{\"0\":{\"3705\":1}}],[\"对本身是质数的自然数是有效的\",{\"1\":{\"3457\":1}}],[\"对各种\",{\"1\":{\"3056\":1}}],[\"对int类型数组的值按数字大小的升序\",{\"1\":{\"2360\":1}}],[\"对即将获取的内容无限制\",{\"1\":{\"2329\":1,\"2786\":1}}],[\"对应资源文件\",{\"1\":{\"8628\":1}}],[\"对应编译后java文件\",{\"1\":{\"8627\":1}}],[\"对应了一个不断变化的上下文环境\",{\"1\":{\"5074\":1}}],[\"对应的file可以不存在的\",{\"1\":{\"6268\":1}}],[\"对应的类一定要重写equals\",{\"1\":{\"5706\":1}}],[\"对应的一对\",{\"1\":{\"3351\":1}}],[\"对应的包装类实例\",{\"1\":{\"1760\":1}}],[\"对应的包装类实例大于\",{\"1\":{\"1760\":1}}],[\"对应类中调用的方法的返回值\",{\"1\":{\"2280\":1,\"7174\":1}}],[\"对日期时间进行的修改将返回同样的一个类的对象\",{\"1\":{\"1636\":1}}],[\"对比string\",{\"0\":{\"1562\":1}}],[\"对所有的返回值都使用r对象进行包装\",{\"1\":{\"1298\":1}}],[\"对于副本集只能通过uri进行连接\",{\"1\":{\"10845\":1}}],[\"对于副本集\",{\"1\":{\"10760\":1}}],[\"对于单个字段索引和排序操作\",{\"1\":{\"10366\":1}}],[\"对于文档的查询来说\",{\"1\":{\"9927\":1}}],[\"对于现今的应用来讲\",{\"1\":{\"9527\":1}}],[\"对于前后端分离项目\",{\"1\":{\"9185\":1}}],[\"对于流的copy的代码还是比较复杂的\",{\"1\":{\"9097\":1}}],[\"对于响应体\",{\"0\":{\"9066\":1}}],[\"对于响应行\",{\"1\":{\"9061\":1}}],[\"对于请求体中的数据\",{\"1\":{\"8978\":1}}],[\"对于动态资源来说\",{\"1\":{\"8675\":1}}],[\"对于多应用共享同一数据库的系统而言\",{\"1\":{\"8239\":1}}],[\"对于业务请求处理而言\",{\"1\":{\"8238\":1}}],[\"对于具体的数据表\",{\"1\":{\"8168\":1}}],[\"对于dml来说\",{\"1\":{\"7982\":1}}],[\"对于mysql等数据库层面的数据源\",{\"1\":{\"7547\":1}}],[\"对于从nosql获取的数据\",{\"1\":{\"7541\":1}}],[\"对于\",{\"1\":{\"6782\":1,\"9854\":1}}],[\"对于数据的输入\",{\"1\":{\"6151\":1}}],[\"对于list<\",{\"1\":{\"6069\":1}}],[\"对于频繁的遍历操作\",{\"1\":{\"5828\":1}}],[\"对于频繁的插入\",{\"1\":{\"5638\":1}}],[\"对于object元素\",{\"1\":{\"5750\":1}}],[\"对于存放在set容器中的对象\",{\"1\":{\"5706\":1}}],[\"对于无序\",{\"1\":{\"5531\":1}}],[\"对于添加\",{\"1\":{\"5529\":1}}],[\"对于每一次数据库连接\",{\"1\":{\"8222\":1}}],[\"对于每个类而言\",{\"1\":{\"6966\":1}}],[\"对于每\",{\"1\":{\"4950\":1}}],[\"对于异常对象e\",{\"1\":{\"4740\":1}}],[\"对于这些非结构化的数据文本\",{\"1\":{\"9852\":1}}],[\"对于这些错误\",{\"1\":{\"4676\":1}}],[\"对于这三部分内容\",{\"1\":{\"8927\":1}}],[\"对于这类异常\",{\"1\":{\"4703\":1,\"4706\":1}}],[\"对于integer类来说\",{\"1\":{\"4247\":1}}],[\"对于ide开发工具来时\",{\"1\":{\"2861\":1}}],[\"对于引用类型就是比较内存地址\",{\"1\":{\"4243\":1}}],[\"对于基本类型就是比较值\",{\"1\":{\"4243\":1}}],[\"对于基本数据类型的包装类和string\",{\"1\":{\"2419\":1}}],[\"对于重载而言\",{\"1\":{\"4157\":1}}],[\"对于编译器而言\",{\"1\":{\"4157\":1}}],[\"对于父类中的private成员\",{\"1\":{\"4036\":1}}],[\"对于二维数组的理解\",{\"1\":{\"3533\":1}}],[\"对于一个数值常量\",{\"1\":{\"3164\":1}}],[\"对于一个全新的迭代器\",{\"1\":{\"2458\":1,\"5581\":1}}],[\"对于不同的平台\",{\"1\":{\"2821\":1}}],[\"对于不常用的依赖\",{\"1\":{\"1175\":1}}],[\"对于非完全匹配\",{\"1\":{\"2771\":1}}],[\"对于复杂的表达式需要使用jdk中的matcher类来处理\",{\"1\":{\"2675\":1}}],[\"对于arraylist\",{\"1\":{\"2439\":1}}],[\"对于自定义类\",{\"1\":{\"2428\":1,\"5751\":1}}],[\"对于自定义的类\",{\"1\":{\"1746\":1}}],[\"对于输入的非十进制数据\",{\"1\":{\"2343\":1,\"2800\":1}}],[\"对于number类型的xxx有一个可选参数\",{\"1\":{\"2340\":1,\"2797\":1}}],[\"对于实现了comparable接口的类\",{\"1\":{\"1765\":1}}],[\"对于日志文件的使用存在各种各样的策略\",{\"1\":{\"932\":1}}],[\"对具体的字段设置校验规则\",{\"0\":{\"646\":1}}],[\"对象id\",{\"1\":{\"10091\":1}}],[\"对象对应于关系型数据库的\",{\"1\":{\"10079\":1}}],[\"对象和\",{\"1\":{\"9815\":1}}],[\"对象维护了一个指向当前数据行的指针\",{\"1\":{\"8004\":1}}],[\"对象以逻辑表格的形式封装了执行数据库操作的结果集\",{\"1\":{\"8002\":1}}],[\"对象所代表的\",{\"1\":{\"7950\":1}}],[\"对象所对应的类\",{\"1\":{\"5800\":1}}],[\"对象只能由系统建立对象\",{\"1\":{\"6975\":1}}],[\"对象表示\",{\"1\":{\"6917\":1}}],[\"对象上通过方法\",{\"1\":{\"6898\":1}}],[\"对象封装了udp数据报\",{\"1\":{\"6830\":1}}],[\"对象负责等待客户端请求建立套接字连接\",{\"1\":{\"6812\":1}}],[\"对象关联的文件名\",{\"1\":{\"6604\":1}}],[\"对象指定的文件路径\",{\"1\":{\"6602\":1}}],[\"对象序列化机制允许把内存中的java对象转换成平台无关的二进制流\",{\"1\":{\"6538\":1}}],[\"对象流\",{\"0\":{\"6529\":1}}],[\"对象包含一个记录指针\",{\"1\":{\"6495\":1}}],[\"对象中的列数\",{\"1\":{\"8023\":1}}],[\"对象中的字符串\",{\"0\":{\"3235\":1}}],[\"对象中列的类型和属性信息的对象\",{\"1\":{\"8018\":1}}],[\"对象中用作\",{\"1\":{\"5758\":1}}],[\"对象中各个元素\",{\"1\":{\"5569\":1}}],[\"对象储存在这里\",{\"1\":{\"5124\":1}}],[\"对象如果有实例变量\",{\"1\":{\"4840\":1}}],[\"对象实体内属性的值就被修改了\",{\"1\":{\"4642\":1}}],[\"对象引用\",{\"1\":{\"4634\":1}}],[\"对象加载时间过长\",{\"1\":{\"4428\":1}}],[\"对象在编译期间\",{\"1\":{\"4129\":1}}],[\"对象也是引用数据类型\",{\"1\":{\"3673\":1}}],[\"对象作为方法的参数\",{\"1\":{\"3664\":1}}],[\"对象作为函数的参数\",{\"1\":{\"3663\":1}}],[\"对象就是引用类型的\",{\"1\":{\"3656\":1}}],[\"对象间进行赋值时\",{\"1\":{\"3645\":1}}],[\"对象间的赋值\",{\"0\":{\"3644\":1}}],[\"对象成员\",{\"1\":{\"3635\":1}}],[\"对象名\",{\"1\":{\"3634\":1,\"3635\":1,\"5443\":1,\"5449\":1}}],[\"对象名就是log\",{\"1\":{\"955\":1}}],[\"对象名就是\",{\"1\":{\"888\":1}}],[\"对象为最小单位\",{\"1\":{\"3599\":1}}],[\"对象是\",{\"1\":{\"4960\":1}}],[\"对象是实际存在的该类事物的每个个体\",{\"1\":{\"3619\":1}}],[\"对象是计算机世界中解决问题的最终工具\",{\"1\":{\"3611\":1}}],[\"对象是对输入字符串进行解释和匹配操作的引擎\",{\"1\":{\"2666\":1}}],[\"对象是一个正则表达式的编译表示\",{\"1\":{\"2665\":1}}],[\"对象的生命周期指一个对象从被创建到被销毁的整个过程\",{\"1\":{\"8745\":1}}],[\"对象的根路径\",{\"1\":{\"6603\":1}}],[\"对象的字符串表示形式\",{\"1\":{\"6598\":1}}],[\"对象的序列化机制\",{\"0\":{\"6537\":1}}],[\"对象的存放地址是随机的\",{\"1\":{\"5750\":1}}],[\"对象的属性是复制类的\",{\"1\":{\"4642\":1}}],[\"对象的内存解析\",{\"0\":{\"4637\":1}}],[\"对象的多态性\",{\"0\":{\"4116\":1},\"1\":{\"4133\":1}}],[\"对象的\",{\"1\":{\"2666\":1,\"7927\":1,\"7945\":1,\"7951\":1,\"7954\":1,\"8004\":1}}],[\"对象的所有旧值\",{\"1\":{\"2514\":1}}],[\"对象的getclass方法\",{\"0\":{\"2135\":1}}],[\"对象\",{\"0\":{\"7459\":1,\"7469\":1},\"1\":{\"2146\":1,\"2665\":2,\"2666\":1,\"3614\":1,\"3620\":1,\"3636\":2,\"3709\":2,\"3887\":2,\"4187\":1,\"4209\":1,\"4264\":1,\"4547\":1,\"4950\":1,\"4956\":1,\"5432\":1,\"5576\":1,\"6607\":1,\"6611\":1,\"6632\":1,\"6633\":1,\"6812\":1,\"6816\":1,\"6876\":1,\"6924\":1,\"7447\":1,\"7507\":1,\"7514\":1,\"7522\":1,\"7927\":1,\"7945\":1,\"7965\":1,\"7999\":1,\"10079\":1}}],[\"对象排序的实质\",{\"0\":{\"1731\":1}}],[\"对象属性\",{\"1\":{\"502\":1}}],[\"对象数组中的每个元素值被用来作为查询语句的置换参数\",{\"1\":{\"8365\":1}}],[\"对象数组中数据\",{\"1\":{\"502\":1}}],[\"对象数组\",{\"0\":{\"3655\":1},\"1\":{\"489\":1}}],[\"对整个项目负责\",{\"1\":{\"109\":1}}],[\"缩略格式\",{\"1\":{\"489\":1}}],[\"减法运算\",{\"1\":{\"1888\":1}}],[\"减少了创建新线程的时间\",{\"1\":{\"5493\":1}}],[\"减少了系统性能开销\",{\"1\":{\"4417\":1}}],[\"减少了冗余\",{\"1\":{\"3900\":1}}],[\"减少日期时间\",{\"1\":{\"1662\":1}}],[\"减少pom\",{\"1\":{\"421\":1}}],[\"减号与数据间空格分隔\",{\"1\":{\"488\":1}}],[\"代理流程分析\",{\"0\":{\"7285\":1}}],[\"代理对象会读取被代理类中的同名方法的方法名和形参列表\",{\"1\":{\"7243\":1}}],[\"代理对象决定是否以及何时将方法调用转到原始对象上\",{\"1\":{\"7193\":1}}],[\"代理工厂做一些后续的收尾工作\",{\"1\":{\"7227\":1}}],[\"代理工厂做一些准备工作\",{\"1\":{\"7227\":1}}],[\"代理nike工厂\",{\"1\":{\"7220\":1}}],[\"代理类调用一个被代理类的同名方法\",{\"1\":{\"7292\":1}}],[\"代理类的对象\",{\"1\":{\"7284\":1}}],[\"代理类代码分析\",{\"0\":{\"7275\":1}}],[\"代理类对象\",{\"1\":{\"7271\":1}}],[\"代理类和被代理类在编译期间\",{\"1\":{\"7209\":1}}],[\"代理类\",{\"0\":{\"7226\":1,\"7276\":1,\"7278\":1},\"1\":{\"7200\":1,\"7220\":1}}],[\"代理设计模式\",{\"0\":{\"7192\":1}}],[\"代表一次请求的范围\",{\"1\":{\"9116\":1}}],[\"代表一个类\",{\"1\":{\"6940\":1}}],[\"代表一个平台无关的平台路径\",{\"1\":{\"6593\":1}}],[\"代表的是零或多个层级访问目录\",{\"1\":{\"8846\":1}}],[\"代表urlpatterns\",{\"1\":{\"8837\":1}}],[\"代表这个值存在\",{\"1\":{\"7732\":1}}],[\"代表类\",{\"1\":{\"6943\":1}}],[\"代表类的\",{\"1\":{\"6942\":1}}],[\"代表类的方法\",{\"1\":{\"6941\":1}}],[\"代表文件已经读完了\",{\"1\":{\"6241\":1}}],[\"代表不可变的字符序列\",{\"1\":{\"3215\":1}}],[\"代表其他语言中的一个\",{\"1\":{\"2671\":1}}],[\"代表ios格式\",{\"1\":{\"1638\":1}}],[\"代表可变的字符序列吗\",{\"1\":{\"1536\":1}}],[\"代表时区\",{\"1\":{\"486\":1}}],[\"代码示例\",{\"0\":{\"7969\":1}}],[\"代码结构\",{\"1\":{\"6716\":1}}],[\"代码解析\",{\"0\":{\"6255\":1}}],[\"代码更加简洁\",{\"1\":{\"5955\":1}}],[\"代码分析工具\",{\"1\":{\"4882\":1}}],[\"代码没有异常等\",{\"1\":{\"4745\":1}}],[\"代码块可以输出\",{\"1\":{\"4553\":2}}],[\"代码块里面可以像方法体一样\",{\"1\":{\"4548\":1}}],[\"代码块\",{\"0\":{\"4545\":1}}],[\"代码块构造器等结构\",{\"1\":{\"4454\":1}}],[\"代码块和内部类的\",{\"1\":{\"4362\":1}}],[\"代码块中初始化\",{\"1\":{\"3984\":1}}],[\"代码块内\",{\"1\":{\"3679\":1,\"3689\":1,\"4310\":1}}],[\"代码块局部变量\",{\"1\":{\"3045\":1}}],[\"代码执行完毕\",{\"1\":{\"2336\":1,\"2793\":1}}],[\"代码生成\",{\"0\":{\"1110\":1}}],[\"代码如下\",{\"1\":{\"952\":1}}],[\"代码\",{\"0\":{\"7872\":1,\"9047\":1},\"1\":{\"427\":1,\"2883\":1,\"10112\":1}}],[\"代码实现\",{\"1\":{\"113\":1}}],[\"代码测试\",{\"0\":{\"648\":1},\"1\":{\"79\":1}}],[\"最好将mongodb部署到公司服务器内网\",{\"1\":{\"10639\":1}}],[\"最好可以通过一个代理类完成全部的代理功能\",{\"1\":{\"7205\":1}}],[\"最像关系型数据库\",{\"1\":{\"10014\":1}}],[\"最少出现0次\",{\"1\":{\"9642\":1}}],[\"最常见的文本文件\",{\"1\":{\"6233\":1}}],[\"最常用的复合方式是层次方式\",{\"1\":{\"6720\":1}}],[\"最常用\",{\"1\":{\"25\":1,\"8398\":1}}],[\"最终导致静态资源不能被访问\",{\"1\":{\"8862\":1}}],[\"最终将导致重启数据库\",{\"1\":{\"8222\":1}}],[\"最终方案\",{\"0\":{\"7866\":1}}],[\"最终被调用的就是myrunnable类的run方法了\",{\"1\":{\"5268\":1}}],[\"最终的\",{\"1\":{\"3971\":1}}],[\"最多无限制\",{\"1\":{\"9642\":1}}],[\"最多两个字节编\",{\"1\":{\"6419\":1}}],[\"最多两个字节编码所有字符\",{\"1\":{\"6418\":1}}],[\"最多只能声明一个\",{\"1\":{\"3905\":1}}],[\"最多只能声明一个可变形参\",{\"1\":{\"3799\":1}}],[\"最多读len个字符\",{\"1\":{\"2057\":1}}],[\"最基础版本\",{\"1\":{\"2853\":1}}],[\"最小副本集架构\",{\"1\":{\"10472\":1}}],[\"最小值\",{\"1\":{\"9642\":1}}],[\"最小值不能低于202\",{\"1\":{\"647\":1}}],[\"最小的副本集架构\",{\"1\":{\"10466\":1}}],[\"最小的\",{\"0\":{\"8390\":1}}],[\"最小连接池数量\",{\"1\":{\"8289\":1}}],[\"最小是2进制\",{\"1\":{\"2341\":1,\"2798\":1}}],[\"最大值\",{\"1\":{\"9642\":1}}],[\"最大值不能超过8888\",{\"1\":{\"647\":1}}],[\"最大范围\",{\"1\":{\"9242\":1}}],[\"最大连接池数量\",{\"1\":{\"8263\":1,\"8284\":1}}],[\"最大的生日为\",{\"1\":{\"8210\":1}}],[\"最大线程数\",{\"1\":{\"5497\":1}}],[\"最大最小的传输速度等\",{\"1\":{\"4513\":1}}],[\"最大是36进制\",{\"1\":{\"2341\":1,\"2798\":1}}],[\"最大为2\",{\"1\":{\"1866\":1}}],[\"最先加载\",{\"1\":{\"859\":1}}],[\"最后是显示的\",{\"1\":{\"10340\":1}}],[\"最后返回所有的文档id\",{\"1\":{\"9956\":1}}],[\"最后打成jar包在项目或模块中使用\",{\"1\":{\"9489\":1}}],[\"最后一次可能会出错\",{\"1\":{\"6264\":1}}],[\"最后一个枚举对象以分号结束\",{\"1\":{\"4872\":1}}],[\"最后一趟是装不满的\",{\"1\":{\"2055\":1,\"6263\":1}}],[\"最后+1\",{\"1\":{\"3190\":1}}],[\"最后加载的环境属性生效\",{\"1\":{\"855\":1}}],[\"最后使用+\",{\"1\":{\"486\":1}}],[\"最顶层是来配置当前启动的环境的\",{\"1\":{\"829\":1}}],[\"最高位是符号位\",{\"1\":{\"3188\":1}}],[\"最高\",{\"1\":{\"792\":1}}],[\"最高等级的启动文类中进行关闭\",{\"1\":{\"583\":1}}],[\"最低\",{\"1\":{\"789\":1}}],[\"格式如下\",{\"1\":{\"10345\":1}}],[\"格式叫bson\",{\"1\":{\"10077\":1}}],[\"格式拼接结果\",{\"1\":{\"8897\":1}}],[\"格式是\",{\"1\":{\"8270\":1}}],[\"格式是固定的\",{\"1\":{\"2906\":1}}],[\"格式上只有参数和返回值的区别\",{\"1\":{\"7400\":1}}],[\"格式5\",{\"0\":{\"7387\":1}}],[\"格式4\",{\"0\":{\"7383\":1}}],[\"格式3\",{\"0\":{\"7378\":1}}],[\"格式详见\",{\"1\":{\"4890\":1}}],[\"格式2\",{\"0\":{\"7374\":1},\"1\":{\"3793\":1}}],[\"格式1\",{\"1\":{\"3792\":1}}],[\"格式为yml\",{\"1\":{\"10161\":1}}],[\"格式为\",{\"1\":{\"1650\":1,\"9228\":1}}],[\"格式化和解析\",{\"1\":{\"1687\":1}}],[\"格式化和解析日期\",{\"1\":{\"1613\":1}}],[\"格式化解析时间和日期\",{\"1\":{\"1627\":1}}],[\"格式化只对date有用\",{\"1\":{\"1619\":1}}],[\"格式化\",{\"0\":{\"1703\":1,\"1724\":1},\"1\":{\"1619\":1,\"1690\":1,\"1719\":1}}],[\"格式\",{\"0\":{\"3313\":1,\"4348\":1,\"4549\":1,\"7344\":1},\"1\":{\"486\":1,\"1285\":1,\"3727\":1,\"9637\":1,\"10242\":1}}],[\"日\",{\"1\":{\"1648\":1}}],[\"日历类\",{\"1\":{\"1614\":1}}],[\"日期时间\",{\"1\":{\"1699\":1,\"1710\":1}}],[\"日期与时间api\",{\"0\":{\"1608\":1}}],[\"日期\",{\"1\":{\"916\":1,\"939\":1,\"1690\":1,\"1700\":1,\"1711\":1}}],[\"日期必须使用\",{\"1\":{\"486\":1}}],[\"日志存储目录\",{\"1\":{\"10159\":1}}],[\"日志记录\",{\"1\":{\"10123\":1}}],[\"日志记录器的滚动策略\",{\"1\":{\"952\":3}}],[\"日志目录\",{\"1\":{\"9883\":1,\"10490\":1}}],[\"日志级别从低到高分为trace\",{\"1\":{\"952\":1}}],[\"日志分文件存储\",{\"1\":{\"933\":1}}],[\"日志策略配置\",{\"0\":{\"934\":1}}],[\"日志策略\",{\"0\":{\"931\":1}}],[\"日志文件保留天数\",{\"1\":{\"952\":3}}],[\"日志文件输出格式\",{\"1\":{\"952\":3}}],[\"日志文件大小限制\",{\"1\":{\"936\":1}}],[\"日志文件名\",{\"1\":{\"930\":1}}],[\"日志文件\",{\"0\":{\"926\":1}}],[\"日志处理\",{\"0\":{\"924\":1}}],[\"日志格式语法\",{\"0\":{\"915\":1}}],[\"日志输出格式\",{\"0\":{\"908\":1}}],[\"日志组\",{\"1\":{\"906\":1}}],[\"日志系统提供了更加细致的日志等级控制\",{\"1\":{\"905\":1}}],[\"日志等级一般在application配置文件中设置\",{\"1\":{\"901\":1}}],[\"日志设置好以后可以根据设置选择哪些参与记录\",{\"1\":{\"891\":1}}],[\"日志的级别分为6种\",{\"1\":{\"892\":1}}],[\"日志的等级选择\",{\"0\":{\"899\":1}}],[\"日志的等级\",{\"0\":{\"889\":1}}],[\"日志的作用\",{\"0\":{\"874\":1}}],[\"日志会在控制台打印\",{\"1\":{\"882\":1}}],[\"日志\",{\"0\":{\"941\":1},\"1\":{\"84\":1,\"952\":3}}],[\"字段的索引\",{\"1\":{\"10413\":1}}],[\"字段的数据类型是字符型\",{\"1\":{\"10078\":1}}],[\"字段名\",{\"1\":{\"10403\":1}}],[\"字段上创建一个唯一的索引\",{\"1\":{\"10381\":1}}],[\"字段\",{\"1\":{\"10346\":1,\"10388\":1}}],[\"字段包含所接收信息的长度\",{\"1\":{\"6850\":1}}],[\"字段声明\",{\"1\":{\"4961\":1,\"4992\":1}}],[\"字节输出流的方式往浏览器写\",{\"0\":{\"9066\":1}}],[\"字节码操作获得类似动态语言的特性\",{\"1\":{\"6928\":1}}],[\"字节码文件\",{\"1\":{\"2889\":1}}],[\"字节数据\",{\"1\":{\"6539\":1,\"9092\":1}}],[\"字节数组\",{\"1\":{\"6373\":1,\"6374\":1}}],[\"字节\",{\"1\":{\"6373\":1,\"6374\":1}}],[\"字节值\",{\"1\":{\"2039\":1}}],[\"字节流中的数据都是字符时\",{\"1\":{\"6371\":1}}],[\"字节流输入\",{\"1\":{\"6368\":1}}],[\"字节流的操作流程和字符流是一样\",{\"1\":{\"6294\":1}}],[\"字节流写出\",{\"1\":{\"6292\":1}}],[\"字节流读入\",{\"1\":{\"6291\":1}}],[\"字节流操作字节\",{\"1\":{\"6232\":1}}],[\"字节流与字符流的选择\",{\"0\":{\"6207\":1}}],[\"字节流\",{\"0\":{\"2100\":1,\"6290\":1,\"6323\":1,\"6326\":1,\"6351\":1},\"1\":{\"2038\":1,\"6159\":1,\"6175\":1}}],[\"字面量\",{\"1\":{\"3206\":1}}],[\"字面量方式\",{\"1\":{\"1417\":1}}],[\"字面量表示方式\",{\"0\":{\"485\":1}}],[\"字符的编码\",{\"1\":{\"6406\":1}}],[\"字符数组\",{\"1\":{\"6374\":1}}],[\"字符变量的三种表现形式\",{\"0\":{\"3119\":1}}],[\"字符类型不是字符串\",{\"1\":{\"3117\":1}}],[\"字符类型只能是一个字符\",{\"1\":{\"3117\":1}}],[\"字符类型\",{\"0\":{\"3111\":1}}],[\"字符型\",{\"1\":{\"3032\":1,\"3697\":1}}],[\"字符\",{\"0\":{\"2091\":1},\"1\":{\"3113\":1}}],[\"字符到数组中\",{\"1\":{\"2044\":1}}],[\"字符流输出\",{\"1\":{\"6369\":1}}],[\"字符流的数据写出\",{\"1\":{\"6266\":1}}],[\"字符流的数据读入\",{\"1\":{\"6235\":1}}],[\"字符流操作字符\",{\"1\":{\"6233\":1}}],[\"字符流\",{\"0\":{\"6329\":1,\"6332\":1,\"6354\":1},\"1\":{\"2038\":1,\"6160\":1}}],[\"字符集介绍\",{\"0\":{\"3126\":1}}],[\"字符集必须一致\",{\"1\":{\"1499\":1}}],[\"字符集\",{\"0\":{\"6412\":1},\"1\":{\"1499\":1}}],[\"字符串类型的数据\",{\"1\":{\"10089\":1}}],[\"字符串的相互转换\",{\"1\":{\"9815\":1}}],[\"字符串的序列化和反序列化\",{\"0\":{\"6553\":1}}],[\"字符串的不可变性\",{\"0\":{\"3220\":1}}],[\"字符串角标越界\",{\"0\":{\"4713\":1}}],[\"字符串属于引用类型\",{\"1\":{\"3236\":1}}],[\"字符串也属于引用类型\",{\"1\":{\"3221\":1}}],[\"字符串常量池中是不会存储相同内容的字符串的\",{\"1\":{\"3210\":1}}],[\"字符串常量池\",{\"0\":{\"3209\":1}}],[\"字符串参数更加精准\",{\"1\":{\"1878\":1}}],[\"字符串排序\",{\"0\":{\"1787\":1}}],[\"字符串\",{\"1\":{\"1694\":1,\"2095\":1,\"3214\":1,\"6373\":1,\"6374\":1,\"10088\":1,\"10567\":1}}],[\"字符串替换\",{\"1\":{\"1591\":1}}],[\"字符串拼接\",{\"1\":{\"1583\":1}}],[\"字符串截取的end位置\",{\"1\":{\"1479\":1}}],[\"字符串截取\",{\"1\":{\"1477\":1,\"1576\":1}}],[\"字符串本身没有改变\",{\"1\":{\"1463\":1}}],[\"字符串可以直接书写\",{\"1\":{\"486\":1}}],[\"字符编码\",{\"0\":{\"1072\":1}}],[\"~\",{\"1\":{\"486\":2,\"3309\":1}}],[\"八进制转二进制\",{\"1\":{\"3199\":1}}],[\"八进制\",{\"1\":{\"486\":1,\"3181\":1,\"3197\":1}}],[\"导致连接一直存在\",{\"1\":{\"8222\":1}}],[\"导致异常结束\",{\"1\":{\"5367\":1}}],[\"导致共享数据的错误\",{\"1\":{\"5306\":1}}],[\"导致a线程更新完数据后\",{\"1\":{\"5298\":1}}],[\"导致程序运行过慢\",{\"1\":{\"5134\":1}}],[\"导致编译时\",{\"1\":{\"4169\":1}}],[\"导致配置文件无效\",{\"1\":{\"474\":1}}],[\"导入servlet包\",{\"0\":{\"8681\":1}}],[\"导入指定类或接口中的静态结构\",{\"1\":{\"3967\":1}}],[\"导入包和类名的可以直接用类名初始化\",{\"1\":{\"3961\":1}}],[\"导入包下全部类\",{\"1\":{\"3951\":1}}],[\"导入多个结构\",{\"1\":{\"3950\":1}}],[\"导入jedis坐标\",{\"1\":{\"1045\":1}}],[\"导入jsr303规范\",{\"1\":{\"642\":1}}],[\"导入测试对应的starter\",{\"1\":{\"659\":1}}],[\"导入依赖\",{\"0\":{\"640\":1}}],[\"导入坐标\",{\"0\":{\"549\":1,\"9816\":1}}],[\"导入一个springboot开发依赖\",{\"1\":{\"548\":1}}],[\"导入项目\",{\"1\":{\"362\":1}}],[\"多走这一步\",{\"1\":{\"8954\":1}}],[\"多执行语句\",{\"0\":{\"7387\":1}}],[\"多参构造器\",{\"0\":{\"7521\":1}}],[\"多参\",{\"0\":{\"7387\":1}}],[\"多版本切换\",{\"0\":{\"7325\":1}}],[\"多版本jdk\",{\"0\":{\"2859\":1}}],[\"多次启动\",{\"1\":{\"10477\":1}}],[\"多次执行\",{\"1\":{\"5310\":1}}],[\"多次使用\",{\"1\":{\"2674\":1,\"5013\":1}}],[\"多打印\",{\"1\":{\"5304\":1}}],[\"多重继承功能\",{\"1\":{\"4577\":1}}],[\"多重继承\",{\"0\":{\"4475\":1}}],[\"多线程从集合中取出数据\",{\"1\":{\"7571\":1}}],[\"多线程就失去意义了\",{\"1\":{\"5327\":1}}],[\"多线程类\",{\"0\":{\"5162\":1}}],[\"多线程程序的优点\",{\"0\":{\"5100\":1}}],[\"多线程的意义\",{\"0\":{\"5096\":1}}],[\"多线程\",{\"0\":{\"10884\":1},\"1\":{\"4432\":1,\"5108\":1}}],[\"多线程同步\",{\"1\":{\"2481\":1}}],[\"多少次\",{\"1\":{\"4239\":1}}],[\"多态提高了代码的通用性\",{\"1\":{\"4166\":1}}],[\"多态开发中的应用\",{\"0\":{\"4165\":1}}],[\"多态情况下\",{\"0\":{\"4146\":1}}],[\"多态示例\",{\"0\":{\"4137\":1}}],[\"多态的特性\",{\"1\":{\"4164\":1}}],[\"多态的情况下\",{\"1\":{\"4153\":1}}],[\"多态的意义\",{\"0\":{\"4134\":1}}],[\"多态的使用\",{\"0\":{\"4124\":1}}],[\"多态\",{\"0\":{\"4114\":1,\"4115\":1},\"1\":{\"3604\":1,\"4061\":1}}],[\"多态等\",{\"1\":{\"3600\":1}}],[\"多维数组\",{\"0\":{\"3531\":1},\"1\":{\"3473\":1}}],[\"多条件表达式的顺序\",{\"1\":{\"3353\":1}}],[\"多选一\",{\"0\":{\"3347\":1}}],[\"多分支\",{\"0\":{\"3347\":1}}],[\"多单词时每个单词用下划线连接\",{\"1\":{\"3070\":1}}],[\"多单词组成时\",{\"1\":{\"3068\":1,\"3069\":1}}],[\"多单词组成时所有字母都小写\",{\"1\":{\"3067\":1}}],[\"多行注释\",{\"0\":{\"2933\":1}}],[\"多个web项目的cookie的共享\",{\"0\":{\"9728\":1}}],[\"多个jar包放到一起我们就称之为组件\",{\"1\":{\"9471\":1}}],[\"多个过滤器的执行顺序\",{\"0\":{\"9302\":1}}],[\"多个过滤器\",{\"0\":{\"9299\":1}}],[\"多个tomcat目标的使用\",{\"0\":{\"8630\":1}}],[\"多个中间操作可以连接起来形成一个流水线\",{\"1\":{\"7598\":1}}],[\"多个线程安装cpu的调度执行run方法\",{\"1\":{\"5388\":1}}],[\"多个线程安装1\",{\"1\":{\"5387\":1}}],[\"多个线程必须要共用同一把锁\",{\"1\":{\"5319\":1}}],[\"多个线程共同操作的变量\",{\"1\":{\"5316\":1}}],[\"多个人做同一件事\",{\"1\":{\"5095\":1}}],[\"多个人同时做不同的事\",{\"1\":{\"5094\":1}}],[\"多个cpu同时执行多个任务\",{\"1\":{\"5094\":1}}],[\"多个对象共享同一个静态变量\",{\"1\":{\"4379\":1}}],[\"多个类中存在相同属性和行为时\",{\"1\":{\"3999\":1}}],[\"多个环境间使用逗号分隔\",{\"1\":{\"852\":1}}],[\"多个配置文件\",{\"0\":{\"466\":1}}],[\"多文件版\",{\"0\":{\"831\":1}}],[\"多层级配置文件的关系\",{\"0\":{\"800\":1}}],[\"多级数据\",{\"1\":{\"500\":1}}],[\"多格式配置文件\",{\"0\":{\"467\":1}}],[\"多环境开发控制\",{\"0\":{\"844\":1}}],[\"多环境开发\",{\"0\":{\"815\":1},\"1\":{\"83\":1}}],[\"8也可以写成小写\",{\"1\":{\"9046\":1}}],[\"855ed8bca863\",{\"1\":{\"10726\":1}}],[\"85\",{\"1\":{\"8272\":1}}],[\"8523015e+5\",{\"1\":{\"486\":1}}],[\"8类库的一部分\",{\"1\":{\"7734\":1}}],[\"87\",{\"1\":{\"7670\":2}}],[\"878\",{\"1\":{\"1660\":3}}],[\"8的原理\",{\"0\":{\"6429\":1}}],[\"8的由来\",{\"0\":{\"6425\":1}}],[\"8和utf\",{\"1\":{\"6428\":1}}],[\"8就是每次8个位传输数据\",{\"1\":{\"6427\":1}}],[\"8kb\",{\"1\":{\"6315\":1}}],[\"8bit\",{\"1\":{\"6159\":1}}],[\"8中user\",{\"1\":{\"6130\":1}}],[\"8中引入的java\",{\"1\":{\"1622\":1}}],[\"89\",{\"1\":{\"5913\":1,\"5964\":1}}],[\"8且当前数组的长度\",{\"1\":{\"5881\":1}}],[\"8底层的数组是\",{\"1\":{\"5878\":1}}],[\"8之后\",{\"1\":{\"5024\":1}}],[\"8之后的重复注解\",{\"0\":{\"5016\":1}}],[\"8之前\",{\"1\":{\"5013\":1}}],[\"8之前的重复注解\",{\"0\":{\"5012\":1}}],[\"8对注解处理提供了两点改进\",{\"1\":{\"5008\":1}}],[\"888\",{\"1\":{\"10264\":1}}],[\"8888\",{\"1\":{\"647\":1}}],[\"8859\",{\"1\":{\"9041\":1,\"9042\":1}}],[\"88\",{\"1\":{\"4039\":1,\"5964\":1}}],[\"8u321\",{\"1\":{\"2853\":1}}],[\"8种基本数据类型\",{\"1\":{\"1490\":1}}],[\"8编码的字符流\",{\"1\":{\"6384\":1}}],[\"8编码\",{\"1\":{\"1073\":1}}],[\"8<\",{\"1\":{\"952\":4}}],[\"82340\",{\"1\":{\"8113\":1}}],[\"82\",{\"1\":{\"830\":1}}],[\"805z\",{\"1\":{\"10576\":1}}],[\"80\",{\"1\":{\"830\":1,\"1206\":1,\"6883\":1,\"8594\":1}}],[\"8080可以找到要访问的tomcat\",{\"1\":{\"8720\":1}}],[\"8080`\",{\"1\":{\"8719\":1}}],[\"8080\",{\"1\":{\"377\":1,\"1364\":1,\"1378\":1,\"6872\":1,\"8458\":2,\"8468\":1,\"8471\":1,\"8478\":1,\"8623\":1,\"8710\":1,\"8719\":1,\"8843\":1,\"8848\":1,\"8854\":1,\"8857\":1,\"8943\":1,\"8944\":1,\"8951\":1,\"9078\":1,\"9084\":1,\"9121\":1,\"9147\":1}}],[\"8\",{\"0\":{\"1282\":1,\"1284\":1,\"1287\":1,\"1291\":1,\"1297\":1,\"1347\":1,\"1570\":1,\"1821\":1,\"1972\":1,\"2125\":1,\"2163\":1,\"2205\":1,\"2283\":1,\"2388\":1,\"2427\":1,\"2509\":1,\"2567\":1,\"2607\":1,\"3246\":1,\"3329\":1,\"3528\":1,\"3580\":1,\"3644\":1,\"3883\":1,\"4165\":1,\"4200\":1,\"4296\":1,\"4519\":1,\"4757\":1,\"5601\":1,\"5747\":1,\"5749\":1,\"5752\":1,\"5754\":1,\"6103\":1,\"6148\":1,\"6186\":1,\"6221\":1,\"6307\":1,\"6361\":1,\"6433\":1,\"6529\":2,\"6578\":1,\"7695\":1,\"8211\":1,\"9102\":1,\"9432\":1,\"9727\":1,\"9728\":1,\"9731\":1,\"9780\":1,\"9781\":1,\"9786\":1},\"1\":{\"734\":2,\"952\":1,\"1623\":1,\"1676\":1,\"1773\":2,\"1791\":2,\"1832\":1,\"2314\":2,\"2362\":2,\"2365\":2,\"2370\":3,\"2375\":6,\"2379\":4,\"2827\":1,\"2858\":1,\"2937\":1,\"2981\":2,\"3131\":1,\"3133\":1,\"3386\":1,\"3389\":1,\"4205\":1,\"4267\":1,\"4270\":1,\"4905\":1,\"4911\":1,\"5745\":1,\"5782\":1,\"5814\":1,\"6117\":1,\"6157\":1,\"6170\":1,\"6178\":1,\"6182\":1,\"6185\":1,\"6189\":1,\"6313\":1,\"6365\":1,\"6384\":1,\"6388\":1,\"6394\":1,\"6398\":1,\"6411\":1,\"6422\":1,\"6424\":1,\"6427\":1,\"6428\":1,\"6430\":1,\"6432\":1,\"7412\":1,\"7691\":1,\"7708\":1,\"7712\":1,\"7824\":1,\"7832\":1,\"8231\":1,\"8235\":1,\"8283\":1,\"8286\":1,\"8423\":1,\"8424\":1,\"8530\":1,\"8605\":1,\"9037\":1,\"9044\":1,\"9045\":1,\"9046\":1,\"9048\":1,\"9054\":1,\"9082\":1,\"9101\":2,\"9109\":1,\"9131\":1,\"9608\":1,\"9612\":1,\"9613\":1,\"9635\":1,\"9724\":1,\"9725\":1,\"9726\":1,\"9845\":1,\"9871\":1,\"9895\":2}}],[\"8192\",{\"1\":{\"6325\":1,\"6328\":1,\"6331\":1,\"6334\":1}}],[\"81\",{\"1\":{\"465\":1,\"830\":1}}],[\"推荐update\",{\"1\":{\"8595\":1,\"8601\":1}}],[\"推荐这种\",{\"1\":{\"8012\":1}}],[\"推荐的unicode编码是utf\",{\"1\":{\"6428\":1}}],[\"推荐\",{\"0\":{\"5593\":1,\"8556\":1},\"1\":{\"463\":1,\"8037\":1,\"8437\":1}}],[\"当时初始化副本集的时候\",{\"1\":{\"10592\":1}}],[\"当mongos或mongod实例重新启动时\",{\"1\":{\"10496\":1}}],[\"当mongo用于分片设置时\",{\"1\":{\"10207\":1}}],[\"当查询条件和查询的投影仅包含索引字段时\",{\"1\":{\"10431\":1}}],[\"当于sql的and\",{\"1\":{\"10356\":1}}],[\"当query中有多条符合需要的文档记录时\",{\"1\":{\"10292\":1}}],[\"当向一个集合中插入一个文档的时候\",{\"1\":{\"10230\":1}}],[\"当实例重新启动时\",{\"1\":{\"10162\":1}}],[\"当初的设计就是用于简化开发和方便扩展\",{\"1\":{\"10014\":1}}],[\"当初始化一个类\",{\"1\":{\"7027\":1}}],[\"当初始化一个类的时候\",{\"1\":{\"7019\":1}}],[\"当启动elasticsearch后\",{\"1\":{\"9898\":1}}],[\"当启用了连接池后\",{\"1\":{\"8143\":1}}],[\"当用户发起查询时\",{\"1\":{\"9921\":1}}],[\"当用户查询时\",{\"1\":{\"9866\":1}}],[\"当用对象调用未赋值的属性时\",{\"1\":{\"3653\":1}}],[\"当服务器重启后\",{\"1\":{\"9776\":1}}],[\"当客户端关闭后\",{\"1\":{\"9770\":1}}],[\"当浏览器关闭后\",{\"1\":{\"9716\":1}}],[\"当浏览器再次发送强求时\",{\"1\":{\"9704\":1}}],[\"当tomcat的进程启动之后\",{\"1\":{\"9527\":1}}],[\"当treeset有参数时\",{\"1\":{\"5777\":1}}],[\"当treeset的构造函数有没有参数时\",{\"1\":{\"5777\":1}}],[\"当httpsession中的属性被修改时调用\",{\"1\":{\"9386\":1}}],[\"当被监视的对象发生情况时\",{\"1\":{\"9321\":1}}],[\"当一段时间内session没有被使用\",{\"1\":{\"9200\":1}}],[\"当一个thread类或其子类的对象被声明并创建时\",{\"1\":{\"5288\":1}}],[\"当一个对象\",{\"1\":{\"5134\":1}}],[\"当一个对象的产生需要比较多的资源时\",{\"1\":{\"4417\":1}}],[\"当一个事物的内部\",{\"1\":{\"4304\":1,\"4345\":1}}],[\"当一个方法\",{\"1\":{\"6031\":1}}],[\"当一个方法的参数是object数据类型时\",{\"1\":{\"4287\":1}}],[\"当一个方法需要传递的参数类型是一个类时\",{\"1\":{\"4135\":1}}],[\"当一个方法执行到一个return语句时\",{\"1\":{\"3438\":1}}],[\"当请求结束时\",{\"1\":{\"9191\":1}}],[\"当请求来时创建request对象\",{\"1\":{\"9190\":1}}],[\"当请求完成后request对象就会被销毁\",{\"1\":{\"8992\":1}}],[\"当虚拟目录设置为\",{\"1\":{\"9171\":1}}],[\"当虚拟机启动\",{\"1\":{\"7023\":1}}],[\"当进行重定向访问的时候\",{\"1\":{\"9151\":1}}],[\"当有多个tomcat模板时\",{\"1\":{\"8632\":1}}],[\"当idea失去焦点时\",{\"1\":{\"8600\":1}}],[\"当i==20时\",{\"1\":{\"5221\":1}}],[\"当i==10时\",{\"1\":{\"5221\":1}}],[\"当i==5时\",{\"1\":{\"5221\":1}}],[\"当项目有更新的时候\",{\"1\":{\"8595\":1}}],[\"当大于0时\",{\"1\":{\"8297\":1}}],[\"当应用程序向连接池请求的连接数超过最大连接数量时\",{\"1\":{\"8230\":1}}],[\"当需要释放内存或者容器关闭时\",{\"1\":{\"8761\":1}}],[\"当需要建立数据库连接时\",{\"1\":{\"8227\":1}}],[\"当需要成批插入或者更新记录时\",{\"1\":{\"8092\":1}}],[\"当需要定义一组常量时\",{\"1\":{\"4819\":1}}],[\"当列没有别名时\",{\"1\":{\"8051\":1}}],[\"当指针指向一行时\",{\"1\":{\"8005\":1}}],[\"当指针已经指向最后时\",{\"1\":{\"2464\":1,\"5584\":1}}],[\"当要传递给lambda体的操作\",{\"1\":{\"7444\":1}}],[\"当通过代理类对象调用方法时\",{\"1\":{\"7284\":1}}],[\"当通过子类引用父类的静态变量\",{\"1\":{\"7030\":1}}],[\"当通过某一个对象修改静态变量时\",{\"1\":{\"4379\":1}}],[\"当访问一个静态域时\",{\"1\":{\"7029\":1}}],[\"当程序主动使用某个类时\",{\"1\":{\"7008\":1}}],[\"当程序运行需要的内存超过了剩余的内存时\",{\"1\":{\"5136\":1}}],[\"当与一个url建立连接时\",{\"1\":{\"6898\":1}}],[\"当此方法返回时\",{\"1\":{\"6850\":1}}],[\"当此属性设置为true时\",{\"1\":{\"952\":2}}],[\"当其挂\",{\"1\":{\"10448\":1}}],[\"当其他的url\",{\"1\":{\"8858\":1}}],[\"当其它程序获取了这种二进制流\",{\"1\":{\"6538\":1}}],[\"当其中一个变量的值改变时不会影响另一个\",{\"1\":{\"4653\":1}}],[\"当缓冲区的数据存满时\",{\"1\":{\"6339\":1}}],[\"当使用bufferedinputstream读取字节文件时\",{\"1\":{\"6315\":1}}],[\"当读取数据时\",{\"1\":{\"6314\":1}}],[\"当泛型方法所在类也是泛型类时\",{\"1\":{\"6039\":1}}],[\"当类是泛型类时\",{\"1\":{\"6037\":1}}],[\"当类的对象是有限个\",{\"1\":{\"4819\":1}}],[\"当桶中node的数量大到需要变红黑树时\",{\"1\":{\"5889\":1}}],[\"当数据库中没有数据时\",{\"1\":{\"10224\":1}}],[\"当数据库抛出一些不可恢复的异常时\",{\"1\":{\"8317\":1}}],[\"当数据库访问结束后\",{\"1\":{\"8251\":1}}],[\"当数组的某一个索引位置上的元素以链表形式存在的数据个数\",{\"1\":{\"5881\":1}}],[\"当数值常量参与运算的时候\",{\"1\":{\"3166\":1}}],[\"当超出临界值\",{\"1\":{\"5868\":1}}],[\"当线程进入synchronized中时\",{\"1\":{\"5355\":1}}],[\"当线程通过instance\",{\"1\":{\"5348\":1}}],[\"当把synchronize声明在方法最外层时\",{\"1\":{\"5352\":1}}],[\"当只剩下一张票\",{\"1\":{\"5304\":1}}],[\"当多条语句在操作同一个线程共享数据时\",{\"1\":{\"5306\":1}}],[\"当多个买票程序同时通过是否有票的验证\",{\"1\":{\"5303\":1}}],[\"当多个线程操作同一个数据时\",{\"1\":{\"5298\":1}}],[\"当多线程模式下使用jedis会存在线程安全问题\",{\"1\":{\"1042\":1}}],[\"当就绪的线程被调度并获得cpu资源时\",{\"1\":{\"5290\":1}}],[\"当执行此方法时\",{\"1\":{\"5215\":1}}],[\"当执行构建项目后\",{\"1\":{\"546\":1}}],[\"当运行\",{\"1\":{\"4984\":1,\"4985\":1}}],[\"当它修饰一个方法的时候\",{\"1\":{\"4965\":1}}],[\"当\",{\"1\":{\"4960\":1,\"5052\":1}}],[\"当成一个修饰符使用\",{\"1\":{\"4889\":1}}],[\"当异常出现时\",{\"1\":{\"4811\":1,\"4815\":1}}],[\"当产生异常类型3时的处理措施\",{\"1\":{\"4727\":1}}],[\"当产生异常类型2时的处理措施\",{\"1\":{\"4727\":1}}],[\"当产生异常类型1时的处理措施\",{\"1\":{\"4727\":1}}],[\"当在连接网络时输入一个主机的域名后\",{\"1\":{\"6677\":1}}],[\"当在可序列化的类上缺少\",{\"1\":{\"5054\":1}}],[\"当在初始化之前要进行一些操作时\",{\"1\":{\"4569\":1}}],[\"当在方法内需要用到调用该方法的对象时\",{\"1\":{\"3907\":1}}],[\"当功能内部一部分实现是确定的\",{\"1\":{\"4462\":1}}],[\"当修改其中一个对象中的非静态属性时\",{\"1\":{\"4380\":1}}],[\"当修改了文件\",{\"1\":{\"552\":1}}],[\"当想要在外部类的静态成员部分使用内部类时\",{\"1\":{\"4324\":1}}],[\"当做数值类型\",{\"1\":{\"4298\":1}}],[\"当子类重写了父类中的方法以后\",{\"1\":{\"4082\":1}}],[\"当子类和父类中定义了同名的属性时\",{\"1\":{\"4079\":1}}],[\"当子类创建了和父类中相同的属性时\",{\"1\":{\"4068\":1}}],[\"当形参与成员变量同名时\",{\"1\":{\"3911\":1}}],[\"当我们开发了一个程序以后\",{\"1\":{\"9487\":1}}],[\"当我们的servlet类继承的是httpservlet类的时候\",{\"1\":{\"8902\":1}}],[\"当我们的servlet类实现的是servlet接口的时候\",{\"1\":{\"8901\":1}}],[\"当我们要操作的集合是个嵌套集合时\",{\"1\":{\"7665\":1}}],[\"当我们要对集合中的每个元素进行操作\",{\"1\":{\"7664\":1}}],[\"当我们找到了一个除了方法名不一样\",{\"1\":{\"7452\":1}}],[\"当我们通过代理类的对象\",{\"1\":{\"7279\":1}}],[\"当我们通过子类的构造器创建子类对象时\",{\"1\":{\"4112\":1}}],[\"当我们编写一个类时\",{\"1\":{\"4364\":1}}],[\"当我们输出一个对象的引用时\",{\"1\":{\"4250\":1}}],[\"当我们在父类中定义了非空参构造器时\",{\"1\":{\"4103\":1}}],[\"当我们在一个类中调用属性或方法时\",{\"1\":{\"4085\":1}}],[\"当我们调用此方法时\",{\"1\":{\"3989\":1}}],[\"当我们使用一个类时\",{\"1\":{\"3815\":1}}],[\"当我们与常量数值进行运算时\",{\"1\":{\"3108\":1}}],[\"当值为false时\",{\"1\":{\"3382\":1}}],[\"当发现既可以使用switch\",{\"1\":{\"3376\":1}}],[\"当调用thread类的run方法时\",{\"1\":{\"5268\":1}}],[\"当调用方法时\",{\"1\":{\"3800\":1}}],[\"当调用可变个数形参的方法时\",{\"1\":{\"3795\":1}}],[\"当调用完执行语句以后\",{\"1\":{\"3364\":1}}],[\"当调用string的replace\",{\"1\":{\"3225\":1}}],[\"当左边为真\",{\"1\":{\"3297\":1}}],[\"当对属性进行修改时\",{\"1\":{\"4642\":1}}],[\"当对数组本身进行修改\",{\"1\":{\"3526\":1}}],[\"当对数组进行初始化\",{\"1\":{\"3514\":1}}],[\"当对现有的字符串进行连接操作时\",{\"1\":{\"3224\":1}}],[\"当对字符串重新赋值时\",{\"1\":{\"3223\":1}}],[\"当byte\",{\"1\":{\"3158\":1}}],[\"当两个不同对象的哈希值相同时\",{\"1\":{\"5767\":1}}],[\"当两个不同的数据类型之间进行运算时\",{\"1\":{\"3155\":1}}],[\"当两个数组中所有元素都相等时\",{\"1\":{\"2377\":1}}],[\"当安装了多个版本的jdk时\",{\"1\":{\"2860\":1}}],[\"当提示安装\",{\"1\":{\"2854\":1}}],[\"当参数为system\",{\"1\":{\"2324\":1,\"2781\":1}}],[\"当字符取模5有余数时\",{\"1\":{\"2055\":1,\"6263\":1}}],[\"当除不尽的时候\",{\"1\":{\"1894\":1}}],[\"当元素的类型没有实现java\",{\"1\":{\"1777\":1}}],[\"当年龄相同时\",{\"1\":{\"1769\":1}}],[\"当添加的字符串超过16时\",{\"1\":{\"1561\":1}}],[\"当servletrequest中的属性被修改时调用\",{\"1\":{\"9405\":1}}],[\"当servletcontext中的属性被修改时调用\",{\"1\":{\"9367\":1}}],[\"当servlet进行响应时\",{\"1\":{\"9278\":1}}],[\"当servlet第一次被访问时\",{\"1\":{\"8747\":1}}],[\"当s1和s2同时结束阻塞准备拿下一个锁的时候\",{\"1\":{\"5430\":1}}],[\"当scan为true时\",{\"1\":{\"952\":1}}],[\"当springboot项目启动时\",{\"1\":{\"543\":1}}],[\"当主环境dev与其他环境有相同属性时\",{\"1\":{\"855\":1}}],[\"当测试类与引导类的包不匹配时\",{\"1\":{\"667\":1}}],[\"当代码修改后\",{\"1\":{\"525\":1}}],[\"当覆盖时\",{\"1\":{\"468\":1}}],[\"当然也可以将仲裁服务器维护为副本集的一部分\",{\"1\":{\"10457\":1}}],[\"当然也可以存储在磁盘文件\",{\"1\":{\"7790\":1}}],[\"当然如果是可执行jar包\",{\"1\":{\"9473\":1}}],[\"当然如果发生异常\",{\"1\":{\"5092\":1}}],[\"当然lettcus也支持多连接实例一起工作\",{\"1\":{\"1043\":1}}],[\"当然\",{\"1\":{\"459\":1,\"4088\":1}}],[\"当前是在一台设备上模拟的副本集\",{\"1\":{\"10773\":1}}],[\"当前是第几页\",{\"1\":{\"1237\":1}}],[\"当前\",{\"1\":{\"10046\":1}}],[\"当前最新版本是8\",{\"1\":{\"9871\":1}}],[\"当前开发\",{\"1\":{\"9648\":1}}],[\"当前版本\",{\"1\":{\"10125\":1}}],[\"当前版本的tomcat已经解决了get方式的乱码问题\",{\"1\":{\"9035\":1}}],[\"当前版本为\",{\"1\":{\"1063\":1}}],[\"当前类提供一个全局常量\",{\"1\":{\"6562\":1}}],[\"当前线程被阻塞\",{\"1\":{\"5464\":1}}],[\"当前线程将释放对象监控权\",{\"1\":{\"5446\":1}}],[\"当前线程必须具有对该对象的监控权\",{\"1\":{\"5445\":1,\"5451\":1}}],[\"当前线程就进入阻塞状态\",{\"1\":{\"5438\":1}}],[\"当前线程暂停\",{\"1\":{\"5368\":1}}],[\"当前线程在同步代码块\",{\"1\":{\"5366\":1,\"5367\":1,\"5368\":1}}],[\"当前线程的同步方法\",{\"1\":{\"5365\":1}}],[\"当前线程是阻塞状态\",{\"1\":{\"5213\":1}}],[\"当前jvm将退出\",{\"1\":{\"5154\":1}}],[\"当前module的src下\",{\"1\":{\"7049\":1}}],[\"当前mongodb版本为\",{\"1\":{\"256\":1,\"265\":1}}],[\"当前map对象中\",{\"1\":{\"2587\":1}}],[\"当前项目具体引入的依赖合集\",{\"1\":{\"420\":1}}],[\"当前找不到太多相关中文资料\",{\"1\":{\"260\":1,\"269\":1}}],[\"当前处于建设阶段\",{\"1\":{\"2\":1,\"28\":1,\"122\":1,\"156\":1,\"162\":1,\"168\":1,\"174\":1,\"180\":1,\"186\":1,\"192\":1,\"198\":1}}],[\"控制了更新的细节\",{\"1\":{\"10281\":1}}],[\"控制台打印\",{\"1\":{\"9122\":1}}],[\"控制台乱码\",{\"0\":{\"8445\":1,\"9036\":1}}],[\"控制台输出\",{\"1\":{\"6460\":1}}],[\"控制台输出的日志级别是大于或等于此级别的日志信息\",{\"1\":{\"952\":1}}],[\"控制台会输出\",{\"1\":{\"4874\":1}}],[\"控制台\",{\"1\":{\"4613\":1}}],[\"控制访问权限\",{\"1\":{\"3923\":1}}],[\"控制列数\",{\"1\":{\"3453\":1}}],[\"控制行数\",{\"1\":{\"3453\":1}}],[\"控制器获取到数据后再交由视图\",{\"1\":{\"9548\":1}}],[\"控制器调用模型\",{\"1\":{\"9548\":1}}],[\"控制器层\",{\"0\":{\"4600\":1},\"1\":{\"4595\":1}}],[\"控制器\",{\"1\":{\"1119\":1,\"9543\":1,\"9548\":1,\"9579\":1}}],[\"控制项目下所有包\",{\"1\":{\"907\":1}}],[\"控制\",{\"1\":{\"450\":1}}],[\"添加好节点\",{\"1\":{\"10812\":1}}],[\"添加开启authorization和keyfile鉴权的配置\",{\"1\":{\"10776\":1}}],[\"添加一个管理员账号\",{\"1\":{\"10765\":1}}],[\"添加账号\",{\"0\":{\"10764\":1}}],[\"添加权限验证\",{\"1\":{\"10739\":1}}],[\"添加仲裁从节点\",{\"0\":{\"10577\":1}}],[\"添加仲裁节点可以用别的方法\",{\"1\":{\"10571\":1}}],[\"添加仲裁者以获得主要选举中的\",{\"1\":{\"10461\":1}}],[\"添加副本从节点\",{\"0\":{\"10564\":1}}],[\"添加节点时\",{\"1\":{\"10585\":1}}],[\"添加节点\",{\"0\":{\"10561\":1}}],[\"添加jar包依赖\",{\"0\":{\"9514\":1}}],[\"添加项目部署的导出方式\",{\"1\":{\"8649\":1}}],[\"添加导出方式\",{\"0\":{\"8639\":1}}],[\"添加tomcat模板\",{\"0\":{\"8609\":1}}],[\"添加配置好的tomcat模板\",{\"0\":{\"8603\":1}}],[\"添加缺失的web\",{\"1\":{\"8569\":1}}],[\"添加了\",{\"1\":{\"8381\":1}}],[\"添加了双向链表结构\",{\"1\":{\"5827\":1}}],[\"添加事务后\",{\"0\":{\"8145\":1}}],[\"添加需要批量处理的sql语句或是参数\",{\"1\":{\"8095\":1}}],[\"添加顺序和遍历顺序并没有关联\",{\"1\":{\"5822\":1}}],[\"添加元素时\",{\"1\":{\"5742\":1}}],[\"添加过程分析\",{\"0\":{\"5731\":1}}],[\"添加成功\",{\"1\":{\"2546\":1,\"5736\":1,\"5739\":1,\"8210\":1}}],[\"添加成功就返回true\",{\"1\":{\"2545\":1}}],[\"添加成功^\",{\"1\":{\"1299\":1}}],[\"添加另一个集合的元素\",{\"1\":{\"2539\":1}}],[\"添加数据\",{\"0\":{\"5857\":1,\"6068\":1},\"1\":{\"2532\":1}}],[\"添加时间偏移量\",{\"1\":{\"1675\":1}}],[\"添加操作\",{\"1\":{\"1559\":1}}],[\"添加购物车\",{\"1\":{\"1385\":1,\"1407\":1}}],[\"添加失败\",{\"1\":{\"1299\":1}}],[\"添加非通用操作api\",{\"1\":{\"1268\":1}}],[\"添加非通用操作api接口\",{\"1\":{\"1268\":1}}],[\"添加具体的拦截器\",{\"1\":{\"1234\":1}}],[\"添加redis客户端类型配置\",{\"1\":{\"1047\":1}}],[\"添加mybatis\",{\"0\":{\"1001\":1}}],[\"添加mybatis依赖\",{\"0\":{\"975\":1}}],[\"添加依赖\",{\"0\":{\"965\":1,\"1091\":1,\"1359\":1}}],[\"添加\",{\"0\":{\"7969\":1,\"8380\":1},\"1\":{\"450\":1,\"9037\":1,\"9446\":1}}],[\"添加别的服务器的starter就可以替换内嵌的服务器了\",{\"1\":{\"449\":1}}],[\"注\",{\"1\":{\"9035\":1}}],[\"注册业务功能\",{\"1\":{\"9560\":1}}],[\"注册监听器\",{\"0\":{\"9453\":1}}],[\"注册驱动\",{\"1\":{\"7862\":1}}],[\"注册端口\",{\"1\":{\"6684\":1}}],[\"注释类型声明\",{\"1\":{\"4961\":1}}],[\"注释的意义\",{\"0\":{\"2926\":1}}],[\"注释\",{\"0\":{\"2925\":1}}],[\"注释是中文的\",{\"1\":{\"1222\":1}}],[\"注解配置路由\",{\"0\":{\"8829\":1}}],[\"注解定义\",{\"1\":{\"5015\":1}}],[\"注解新特性\",{\"0\":{\"5007\":1}}],[\"注解结构\",{\"0\":{\"4944\":1}}],[\"注解中定义的成员如果含有配置参数\",{\"1\":{\"4941\":1}}],[\"注解类名\",{\"1\":{\"4940\":1}}],[\"注解类的成员\",{\"1\":{\"4927\":1}}],[\"注解使用\",{\"1\":{\"4922\":1,\"5015\":1}}],[\"注解名称\",{\"1\":{\"4916\":1}}],[\"注解并没有继承于任何子类\",{\"1\":{\"4910\":1,\"4975\":1}}],[\"注解是一种趋势\",{\"1\":{\"4887\":1}}],[\"注解的配置参数\",{\"1\":{\"4927\":1}}],[\"注解的分类\",{\"0\":{\"4898\":1}}],[\"注解的使用\",{\"0\":{\"4888\":1}}],[\"注解的使用目的比较简单\",{\"1\":{\"4885\":1}}],[\"注解的用途\",{\"0\":{\"4884\":1}}],[\"注解\",{\"0\":{\"1277\":1,\"4875\":1,\"7414\":1},\"1\":{\"954\":1,\"4625\":1,\"4878\":1,\"4887\":1,\"6986\":1}}],[\"注解掉spring\",{\"1\":{\"445\":1}}],[\"注入是利用某些系统没有对用户输入的数据进行充分的检查\",{\"1\":{\"7891\":1}}],[\"注入mapper\",{\"1\":{\"1224\":1}}],[\"注入stringredistemplate对象\",{\"1\":{\"1038\":1}}],[\"注入redistemplate\",{\"1\":{\"1024\":1,\"1029\":1}}],[\"注入日志对象\",{\"1\":{\"888\":1,\"955\":1}}],[\"注入要测试的对象\",{\"1\":{\"661\":1,\"663\":1}}],[\"注入该数据对象\",{\"1\":{\"591\":1}}],[\"注入数据对象\",{\"1\":{\"521\":1}}],[\"注入数据并使用\",{\"0\":{\"520\":1}}],[\"注入方式\",{\"1\":{\"508\":1}}],[\"注意证书路径\",{\"1\":{\"10778\":1}}],[\"注意不能包含空格\",{\"1\":{\"9616\":1}}],[\"注意是\",{\"1\":{\"9269\":1}}],[\"注意是之前\",{\"1\":{\"2458\":1}}],[\"注意2\",{\"1\":{\"8802\":1}}],[\"注意1\",{\"1\":{\"8801\":1}}],[\"注意修改环境变量\",{\"1\":{\"7319\":1}}],[\"注意ip和端口\",{\"1\":{\"6823\":1}}],[\"注意点\",{\"0\":{\"6227\":1}}],[\"注意点3\",{\"1\":{\"6102\":1}}],[\"注意点2\",{\"1\":{\"6100\":1}}],[\"注意点1\",{\"1\":{\"6098\":1}}],[\"注意synchronized的位置\",{\"0\":{\"5325\":1}}],[\"注意两个集合的泛型要求\",{\"1\":{\"2407\":1}}],[\"注意参数类型要统一\",{\"1\":{\"2390\":1}}],[\"注意包装类的数据类型应该与参数数据类型对应\",{\"1\":{\"1852\":1}}],[\"注意命名\",{\"1\":{\"1268\":1}}],[\"注意区分业务层和数据层\",{\"1\":{\"1259\":1}}],[\"注意仅仅是名称\",{\"1\":{\"808\":1}}],[\"注意\",{\"0\":{\"2907\":1,\"3143\":1,\"3739\":1,\"4997\":1,\"6033\":1,\"9086\":1,\"10253\":1,\"10265\":1},\"1\":{\"357\":1,\"526\":1,\"634\":1,\"674\":1,\"677\":1,\"681\":1,\"776\":1,\"835\":1,\"1463\":1,\"1469\":1,\"1485\":1,\"1718\":1,\"1858\":1,\"1969\":1,\"1970\":1,\"1973\":1,\"1974\":1,\"2035\":1,\"2113\":1,\"2174\":1,\"2209\":1,\"2344\":1,\"2356\":1,\"2373\":1,\"2383\":1,\"2418\":1,\"2439\":1,\"2464\":1,\"2468\":1,\"2511\":1,\"2591\":1,\"2756\":1,\"2801\":1,\"2854\":1,\"2945\":1,\"3046\":1,\"3177\":1,\"3279\":1,\"3368\":1,\"3464\":1,\"3521\":1,\"3728\":1,\"3734\":1,\"3960\":1,\"4012\":1,\"4113\":1,\"4226\":1,\"4285\":1,\"4923\":1,\"5021\":1,\"5176\":1,\"5337\":1,\"5359\":1,\"5363\":1,\"5372\":1,\"5393\":1,\"5437\":1,\"5584\":1,\"5603\":1,\"5777\":1,\"5780\":1,\"5822\":1,\"5969\":1,\"5993\":1,\"6228\":1,\"6411\":1,\"6482\":1,\"6486\":1,\"6521\":1,\"7158\":1,\"7687\":1,\"7708\":1,\"8073\":1,\"8435\":1,\"8482\":1,\"8542\":1,\"8570\":1,\"8574\":1,\"8611\":1,\"8624\":1,\"8749\":1,\"8776\":1,\"9017\":1,\"9037\":1,\"9185\":1,\"9244\":1,\"9276\":1,\"9279\":1,\"9779\":1,\"10169\":1,\"10340\":1,\"10382\":1,\"10413\":1,\"10514\":1,\"10517\":1,\"10733\":1,\"10802\":1,\"10819\":1,\"10858\":1,\"10863\":1}}],[\"注意事项\",{\"0\":{\"341\":1,\"403\":1,\"992\":1,\"1269\":1,\"2669\":1,\"2897\":1,\"3078\":1,\"3097\":1,\"3134\":1,\"3352\":1,\"3528\":1,\"3580\":1,\"3804\":1,\"3875\":1,\"4296\":1,\"4320\":1,\"4401\":1,\"4648\":1,\"4757\":1,\"5194\":1,\"5248\":1,\"6095\":1,\"8249\":1,\"8633\":1,\"8652\":1,\"8683\":1,\"8739\":1,\"8991\":1}}],[\"注意版本适配\",{\"1\":{\"313\":1}}],[\"非localhost的\",{\"1\":{\"10757\":1}}],[\"非守护进程\",{\"1\":{\"10144\":1}}],[\"非文本数据操作或安全事务处理的需求相对较少的情况\",{\"1\":{\"9862\":1}}],[\"非文本文件\",{\"1\":{\"6209\":1}}],[\"非java文件的其他文件\",{\"1\":{\"8596\":1}}],[\"非web项目\",{\"0\":{\"8531\":1}}],[\"非必须\",{\"1\":{\"8498\":1}}],[\"非运行时异常\",{\"1\":{\"7420\":1}}],[\"非public属性\",{\"1\":{\"7158\":1}}],[\"非数字字符串转不了\",{\"1\":{\"4734\":1}}],[\"非数字字符串\",{\"1\":{\"4734\":1}}],[\"非静态方法\",{\"0\":{\"7459\":1,\"7469\":1},\"1\":{\"7447\":1,\"7449\":1}}],[\"非静态方法的返回值类型\",{\"1\":{\"6009\":1}}],[\"非静态方法的参数类型\",{\"1\":{\"6009\":1}}],[\"非静态方法中\",{\"1\":{\"4400\":1}}],[\"非静态的方法\",{\"1\":{\"4567\":1}}],[\"非静态代码块内可以调用静态的属性\",{\"1\":{\"4567\":1}}],[\"非静态代码块\",{\"0\":{\"4561\":1}}],[\"非静态变量\",{\"1\":{\"4380\":1}}],[\"非静态成员内部类\",{\"1\":{\"4309\":1,\"4326\":1}}],[\"非static代码块\",{\"1\":{\"4553\":1}}],[\"非static\",{\"1\":{\"3703\":1,\"3737\":1}}],[\"非static的成员内部类中的成员不能声明为static的\",{\"1\":{\"4321\":1}}],[\"非static的\",{\"1\":{\"3642\":1}}],[\"非springboot项目热部署实现原理\",{\"0\":{\"529\":1}}],[\"非springboot核心功能\",{\"1\":{\"439\":1}}],[\"非精准详细的解析\",{\"1\":{\"3521\":1}}],[\"非零代表异常退出\",{\"1\":{\"2306\":1}}],[\"非本地时间\",{\"1\":{\"1675\":1}}],[\"非index\",{\"1\":{\"1598\":1}}],[\"非常简单\",{\"1\":{\"10797\":1}}],[\"非常繁琐\",{\"1\":{\"7889\":1,\"8796\":1,\"8823\":1}}],[\"非常有用\",{\"1\":{\"7541\":1}}],[\"非常的冗余\",{\"1\":{\"6077\":1}}],[\"非常不便\",{\"1\":{\"5529\":1}}],[\"非常麻烦\",{\"1\":{\"525\":1,\"555\":1,\"1213\":1}}],[\"非常重要\",{\"1\":{\"286\":1}}],[\"ⅴ\",{\"0\":{\"438\":1,\"941\":1,\"1159\":1,\"1481\":1,\"2248\":1,\"2656\":1,\"3146\":1,\"3298\":1,\"3415\":1,\"3592\":1,\"3993\":1,\"5007\":1,\"5254\":1,\"5917\":1,\"7144\":1,\"7627\":1,\"7772\":1,\"8033\":1,\"8633\":1,\"9008\":1,\"10561\":1}}],[\"因\",{\"1\":{\"7714\":1}}],[\"因而也称为实例\",{\"1\":{\"3619\":1}}],[\"因为启动时加选项毫无意义\",{\"1\":{\"10643\":1}}],[\"因为它们不存储数据集\",{\"1\":{\"10460\":1}}],[\"因为客户端可以将读取操作发送到不同的服务上\",{\"1\":{\"10442\":1}}],[\"因为mongodb可以在任何方向上遍历索引\",{\"1\":{\"10366\":1}}],[\"因为manifest文件常需放在首位\",{\"1\":{\"9469\":1}}],[\"因为批量插入由于数据较多容易出现失败\",{\"1\":{\"10268\":1}}],[\"因为一般也没人用数据库存文本字段\",{\"1\":{\"9854\":1}}],[\"因为保存jsessioid的cookie默认只在会话期是有效的\",{\"1\":{\"9771\":1}}],[\"因为早起xml是用来取代html的\",{\"1\":{\"9614\":1}}],[\"因为war仅服务于web应用\",{\"1\":{\"9527\":1}}],[\"因为while一直在执行\",{\"1\":{\"5345\":1}}],[\"因为while\",{\"1\":{\"5345\":1}}],[\"因为浏览器发送了两次请求\",{\"1\":{\"9153\":1}}],[\"因为请求头的名字都是固定的\",{\"1\":{\"8954\":1}}],[\"因为requestfacade实现了其接口就需要重写接口中的方法\",{\"1\":{\"8911\":1}}],[\"因为有了前一个模板的默认值\",{\"1\":{\"8614\":1}}],[\"因为有端口占用\",{\"1\":{\"8435\":1}}],[\"因为都已经配置好了\",{\"1\":{\"8542\":1}}],[\"因为方法内部做了判断\",{\"1\":{\"8344\":1}}],[\"因为设计到事务操作\",{\"1\":{\"8195\":1}}],[\"因为blob类型的数据无法使用字符串拼接写的\",{\"1\":{\"8067\":1}}],[\"因为驱动不用注册\",{\"1\":{\"7865\":1}}],[\"因为获取的元素是固定的\",{\"1\":{\"7687\":1}}],[\"因为私有元素也加载到内存中了\",{\"1\":{\"6972\":1}}],[\"因为\",{\"1\":{\"6589\":1}}],[\"因为图片属于二进制资源\",{\"1\":{\"6289\":1}}],[\"因为他读写效率比较低\",{\"1\":{\"6213\":1,\"6223\":1}}],[\"因为他的类型是确定的\",{\"1\":{\"6037\":1}}],[\"因为类可以直接调用静态方法\",{\"1\":{\"6010\":1}}],[\"因为这个时候除了元素的类型不确定\",{\"1\":{\"5944\":1}}],[\"因为这类异常很普遍\",{\"1\":{\"4706\":1}}],[\"因为要按照key进行排序\",{\"1\":{\"5909\":1}}],[\"因为要进行查询\",{\"1\":{\"5849\":1}}],[\"因为我们将来开发b\",{\"1\":{\"8799\":1}}],[\"因为我们更关注的其实只有service方法\",{\"1\":{\"8786\":1}}],[\"因为我们自定义的servlet\",{\"1\":{\"8728\":1}}],[\"因为我们想通过对象的值是否相同来判断对象的异同\",{\"1\":{\"5753\":1}}],[\"因为我们调用父类方法时要进行异常处理\",{\"1\":{\"4783\":1}}],[\"因为object类底层默认是通过对象储存的地址来计算hashcode的\",{\"1\":{\"5750\":1}}],[\"因为thread类会通过创建多个thread类的子类来作为线程对象\",{\"1\":{\"5329\":1}}],[\"因为循环条件是成员变量\",{\"1\":{\"5263\":1}}],[\"因为在一个时间单元内\",{\"1\":{\"5090\":1}}],[\"因为ioexception包含了filenotfountexception\",{\"1\":{\"4777\":1}}],[\"因为缺少某个资源\",{\"1\":{\"4680\":1}}],[\"因为抽象类的子类还是要实例化的\",{\"1\":{\"4445\":1}}],[\"因为数据库连接是一种数据库资源\",{\"1\":{\"4436\":1}}],[\"因为数组是引用类型\",{\"1\":{\"3534\":1}}],[\"因为只能有一个实例去操作\",{\"1\":{\"4435\":1}}],[\"因为加载类时已经有静态方法了\",{\"1\":{\"4396\":1}}],[\"因为会触发自动装箱\",{\"1\":{\"4287\":1}}],[\"因为static方法是属于类的\",{\"1\":{\"4057\":1}}],[\"因为string经常用到\",{\"1\":{\"3206\":1}}],[\"因为stringbuffer是线程安全的\",{\"1\":{\"1572\":1}}],[\"因为子类实例中包含父类中的private成员\",{\"1\":{\"4030\":1}}],[\"因为其实现体是由非java语言在外面实现的\",{\"1\":{\"3995\":1}}],[\"因为分配内存的时候\",{\"1\":{\"3584\":1}}],[\"因为程序永远不会执行其后的语句\",{\"1\":{\"3441\":1}}],[\"因为扩展赋值运算符不会改变变量的类型\",{\"1\":{\"3275\":1}}],[\"因为使用了泛型\",{\"1\":{\"2365\":1}}],[\"因为是springboot项目\",{\"1\":{\"1367\":1}}],[\"因为找不到好的资料\",{\"1\":{\"261\":1,\"270\":1}}],[\"因此拷贝到各自的目录即可\",{\"1\":{\"10773\":1}}],[\"因此登录后就只能看到article库\",{\"1\":{\"10749\":1}}],[\"因此值不能重复\",{\"1\":{\"10382\":1}}],[\"因此才有了对文档搜索效率更高的倒排索引\",{\"1\":{\"9928\":1}}],[\"因此返回的是数组\",{\"1\":{\"9686\":1}}],[\"因此优先采用的是token技术\",{\"1\":{\"9648\":1}}],[\"因此框架要对xml配置文件中的内容进行一些约束\",{\"1\":{\"9623\":1}}],[\"因此对于java\",{\"1\":{\"9529\":1}}],[\"因此提倡的是一个tomcat实例管理多个java\",{\"1\":{\"9529\":1}}],[\"因此通常需要把这些类以及相关的资源文件打包成一个\",{\"1\":{\"9487\":1}}],[\"因此直接使用\",{\"1\":{\"9259\":1}}],[\"因此获取的mime类型并不是很准确\",{\"1\":{\"9237\":1}}],[\"因此有了httpservlet\",{\"1\":{\"8796\":1,\"8823\":1}}],[\"因此有了通配符\",{\"1\":{\"6062\":1}}],[\"因此也只能销毁一次\",{\"1\":{\"8775\":1}}],[\"因此也不能包含静态成员\",{\"1\":{\"4343\":1}}],[\"因此整个应用只需要一个数据源即可\",{\"1\":{\"8250\":1}}],[\"因此数据库的连接和关闭必须放到数据库的操作方法调用处\",{\"1\":{\"8141\":1}}],[\"因此数组一经分配空间\",{\"1\":{\"3514\":1}}],[\"因此应该将数据库连接\",{\"1\":{\"8140\":1}}],[\"因此必须以该类储存账号和密码信息\",{\"1\":{\"7852\":1}}],[\"因此只需要配置一下路由\",{\"1\":{\"8836\":1}}],[\"因此只需要按需重写方法即可\",{\"1\":{\"8802\":1}}],[\"因此只需要写方法名即可\",{\"1\":{\"7453\":1}}],[\"因此只能适用于引用数据类型\",{\"1\":{\"4230\":1}}],[\"因此函数式接口就是一个载体\",{\"1\":{\"7401\":1}}],[\"因此它不能是相对的\",{\"1\":{\"6913\":1}}],[\"因此无须建立发送方和接收方的连接\",{\"1\":{\"6831\":1}}],[\"因此统一使用\",{\"1\":{\"6122\":1}}],[\"因此该方法只能被泛型为string的list调用\",{\"1\":{\"6077\":1}}],[\"因此该类的方法都是\",{\"1\":{\"2349\":1}}],[\"因此规定了两个泛型\",{\"1\":{\"5969\":1}}],[\"因此此时把元素的类型设计成一个参数\",{\"1\":{\"5944\":1}}],[\"因此要谨慎使用\",{\"1\":{\"9244\":1}}],[\"因此要重写equals方法\",{\"1\":{\"5753\":1}}],[\"因此要注意以下两点\",{\"1\":{\"5329\":1}}],[\"因此具有很好的存取\",{\"1\":{\"5698\":1}}],[\"因此尽量不要扩容\",{\"1\":{\"5655\":1}}],[\"因此调用的是runnable的run方法\",{\"1\":{\"5268\":1}}],[\"因此感觉不出来\",{\"1\":{\"5090\":1}}],[\"因此不能再继承其他类\",{\"1\":{\"4851\":1}}],[\"因此不用进行处理\",{\"1\":{\"4777\":1}}],[\"因此不管加载多少次\",{\"1\":{\"539\":1}}],[\"因此采用异常处理机制\",{\"1\":{\"4683\":1}}],[\"因此在向其他变量赋值的时候\",{\"1\":{\"4660\":1}}],[\"因此在使用时会报异常\",{\"1\":{\"2384\":1}}],[\"因此现在p1和p3保存的是相同的内存地址\",{\"1\":{\"4647\":1}}],[\"因此可以使用servletcontext获取指定文件的mime类型\",{\"1\":{\"9231\":1}}],[\"因此可以设计成object类型的\",{\"1\":{\"7986\":1}}],[\"因此可以用getname替代get\",{\"1\":{\"7475\":1}}],[\"因此可以直接使用方法引用\",{\"1\":{\"7464\":1}}],[\"因此可以直接通过类名调用静态方法\",{\"1\":{\"4396\":1}}],[\"因此可以将要计算的代码作为抽象方法来定义和使用\",{\"1\":{\"4465\":1}}],[\"因此可以通过\",{\"1\":{\"4387\":1}}],[\"因此可以被其它的内部类继承\",{\"1\":{\"4319\":1}}],[\"因此一个servlet可以配置多个urlpattern\",{\"1\":{\"8831\":1}}],[\"因此一个类的不同实例拥有的静态变量是同一个\",{\"1\":{\"4385\":1}}],[\"因此一旦赋值成功\",{\"1\":{\"3221\":1}}],[\"因此类的属性就分为\",{\"1\":{\"4377\":1}}],[\"因此我们可以让每个容器都单独运行一个tomcat实例\",{\"1\":{\"9530\":1}}],[\"因此我们可以将sql预编译语句和占位符作为形参\",{\"1\":{\"7984\":1}}],[\"因此我们可以将办理的业务作为抽象方法\",{\"1\":{\"4468\":1}}],[\"因此我们需要定义多个函数式接口\",{\"1\":{\"7410\":1}}],[\"因此我们在使用的时候可以指定泛型\",{\"1\":{\"5973\":1}}],[\"因此我们这里就要用到多态性\",{\"1\":{\"4140\":1}}],[\"因此我们就需要多态了\",{\"1\":{\"4136\":1}}],[\"因此使用多态\",{\"1\":{\"4127\":1}}],[\"因此使用时应该尽量采用带有三个参数的重载方法\",{\"1\":{\"1895\":1}}],[\"因此子类必须知道父类如何为对象进行初始化\",{\"1\":{\"4091\":1}}],[\"因此想使用父类的元素\",{\"1\":{\"4088\":1}}],[\"因此s2调用add时会调用子类中重写的add方法\",{\"1\":{\"4065\":1}}],[\"因此s1调用时\",{\"1\":{\"4064\":1}}],[\"因此两个对象指向同一份内存地址\",{\"1\":{\"3645\":1}}],[\"因此默认是double类型\",{\"1\":{\"3173\":1}}],[\"因此当值的范围在\",{\"1\":{\"4247\":1}}],[\"因此当我们需要long类型的常量数值时\",{\"1\":{\"3109\":1}}],[\"因此当操作的数据以对象的形式存在时\",{\"1\":{\"1034\":1}}],[\"因此main方法并非是类的必备方法\",{\"1\":{\"2924\":1}}],[\"因此map支持两个集合\",{\"1\":{\"2578\":1}}],[\"因此java代码就可以在各个平台运行\",{\"1\":{\"2816\":1}}],[\"因此许多匹配器可以共享相同的模式\",{\"1\":{\"2682\":1}}],[\"因此向collection接口的实现类的对象中添加数据obj时\",{\"1\":{\"2421\":1}}],[\"因此collection接口中定义的方法\",{\"1\":{\"2399\":1}}],[\"因此重命名也可以做移动文件\",{\"1\":{\"2013\":1}}],[\"因此就需要用到接口了\",{\"1\":{\"4478\":1}}],[\"因此就具有了可变性\",{\"1\":{\"1558\":1}}],[\"因此就可以内嵌tomcat了\",{\"1\":{\"441\":1}}],[\"因此需要在admin数据库下使用auth方法进行验证\",{\"1\":{\"10733\":1}}],[\"因此需要在测试环境中临时创建一组属性\",{\"1\":{\"673\":1}}],[\"因此需要修复这些host\",{\"1\":{\"10594\":1}}],[\"因此需要对xml了解一下\",{\"1\":{\"9588\":1}}],[\"因此需要对配置文件分类\",{\"1\":{\"786\":1}}],[\"因此需要了解\",{\"1\":{\"7737\":1}}],[\"因此base类加载器无需再次执行\",{\"1\":{\"546\":1}}],[\"因此\",{\"1\":{\"435\":1,\"1631\":1,\"3310\":1,\"5751\":1,\"8794\":1,\"10268\":1}}],[\"扫描仪\",{\"1\":{\"4478\":1}}],[\"扫描引导类所在包\",{\"1\":{\"437\":1}}],[\"扫描的包是引导类所在的包\",{\"1\":{\"434\":1}}],[\"扫描的包\",{\"1\":{\"433\":1}}],[\"扫描bean\",{\"1\":{\"432\":1}}],[\"开头\",{\"1\":{\"10235\":1}}],[\"开头的键是保留的\",{\"1\":{\"10273\":1}}],[\"开头的就是私有址址\",{\"1\":{\"6672\":1}}],[\"开头的注释也会被忽略\",{\"1\":{\"2738\":1}}],[\"开头的文件就是隐藏文件\",{\"1\":{\"1992\":1}}],[\"开源的\",{\"1\":{\"9827\":1}}],[\"开源的数据库连接池技术\",{\"0\":{\"8241\":1}}],[\"开销小\",{\"1\":{\"6742\":1}}],[\"开始网络数据的发送和接收\",{\"1\":{\"6808\":1}}],[\"开始支持\",{\"1\":{\"4904\":1,\"4905\":1,\"4911\":1}}],[\"开始\",{\"1\":{\"4878\":1,\"7951\":1,\"7954\":1}}],[\"开始读取\",{\"1\":{\"4753\":1}}],[\"开始的\",{\"1\":{\"2104\":1}}],[\"开始截取的字符串索引位置\",{\"1\":{\"1478\":1}}],[\"开始比较\",{\"1\":{\"1454\":1}}],[\"开始静态资源映射\",{\"1\":{\"1376\":1}}],[\"开启授权认证\",{\"1\":{\"10740\":1}}],[\"开启认证方式运行\",{\"1\":{\"10777\":1}}],[\"开启认证\",{\"0\":{\"10735\":1}}],[\"开启安全认证\",{\"1\":{\"10640\":1}}],[\"开启事务\",{\"1\":{\"8148\":1}}],[\"开启批处理\",{\"0\":{\"8117\":1}}],[\"开启流\",{\"0\":{\"6270\":1},\"1\":{\"6248\":1}}],[\"开启输入流\",{\"1\":{\"6239\":1}}],[\"开启一个子线程\",{\"1\":{\"5199\":1}}],[\"开启子线程必须使用start\",{\"1\":{\"5196\":1}}],[\"开启线程还是需要掉用thread类的start方法\",{\"1\":{\"5264\":1}}],[\"开启线程\",{\"0\":{\"5174\":1},\"1\":{\"5261\":1,\"5486\":1}}],[\"开启dotall模式\",{\"1\":{\"2725\":1}}],[\"开启多行模式\",{\"1\":{\"2722\":1}}],[\"开启热部署\",{\"0\":{\"1078\":1},\"1\":{\"1177\":1}}],[\"开启\",{\"1\":{\"903\":1}}],[\"开启对当前bean的属性注入校验\",{\"1\":{\"645\":1,\"647\":1}}],[\"开启ioc容器\",{\"1\":{\"432\":1}}],[\"开发网络应用程序早已被广泛的采用\",{\"1\":{\"6758\":1}}],[\"开发时\",{\"1\":{\"8771\":1}}],[\"开发时的项目结构\",{\"0\":{\"8488\":1}}],[\"开发时不会用\",{\"1\":{\"5675\":1}}],[\"开发时候使用debug\",{\"1\":{\"900\":1}}],[\"开发过程中的语法错误和逻辑错误不是异常\",{\"1\":{\"4664\":1}}],[\"开发工具和部署工具可以通过这些补充信息进行验证或者进行部署\",{\"1\":{\"4882\":1}}],[\"开发工具集\",{\"1\":{\"2849\":1}}],[\"开发工具包\",{\"1\":{\"2846\":1}}],[\"开发工程师\",{\"1\":{\"113\":1}}],[\"开发者唯一要做的\",{\"1\":{\"10835\":1}}],[\"开发者\",{\"1\":{\"2823\":1}}],[\"开发者可以根据自己的需要选择对应的校验框架\",{\"1\":{\"641\":1}}],[\"开发springboot项目的一些通用操作\",{\"1\":{\"1060\":1}}],[\"开发人员使用\",{\"1\":{\"821\":1}}],[\"开发人员在开发阶段使用的环境\",{\"1\":{\"117\":1}}],[\"开发中选择它\",{\"1\":{\"7895\":1}}],[\"开发中访问数据库的方式选择\",{\"0\":{\"7894\":1}}],[\"开发中try\",{\"0\":{\"4784\":1}}],[\"开发中代码块的作用\",{\"0\":{\"4568\":1}}],[\"开发中的项目\",{\"0\":{\"8513\":1}}],[\"开发中的做法\",{\"0\":{\"3844\":1}}],[\"开发中的选择\",{\"0\":{\"3274\":1,\"5274\":1}}],[\"开发中较少使用\",{\"1\":{\"3422\":1}}],[\"开发中\",{\"1\":{\"2588\":1,\"3295\":1,\"4445\":1,\"4764\":1,\"5275\":1,\"5489\":1,\"7784\":1}}],[\"开发中使用java8以上版本\",{\"1\":{\"2827\":1}}],[\"开发中使用的配置文件与项目上线后的配置文件是有一定区别的\",{\"1\":{\"786\":1}}],[\"开发中使用临时属性\",{\"0\":{\"774\":1}}],[\"开发中工具中有一组配置\",{\"1\":{\"567\":1}}],[\"开发部门使用git将项目上传道版本服务器\",{\"1\":{\"749\":1}}],[\"开发阶段\",{\"1\":{\"525\":1}}],[\"开发一个控制器类\",{\"1\":{\"371\":1}}],[\"开发环境搭建\",{\"0\":{\"2839\":1}}],[\"开发环境\",{\"1\":{\"117\":1,\"821\":1,\"952\":1,\"1099\":1}}],[\"=pagecontext\",{\"1\":{\"9184\":2}}],[\"=1\",{\"1\":{\"7892\":1,\"8156\":1}}],[\"=容量\",{\"1\":{\"5894\":1}}],[\"=⑤\",{\"1\":{\"3711\":1}}],[\"=null\",{\"1\":{\"2114\":1}}],[\"=参数\",{\"1\":{\"1936\":1}}],[\"==>进一步更精简模式\",{\"1\":{\"7377\":1}}],[\"==>\",{\"1\":{\"6089\":1}}],[\"==和equals\",{\"0\":{\"4242\":1}}],[\"=================\",{\"1\":{\"8201\":3}}],[\"===================\",{\"1\":{\"1177\":1}}],[\"======================\",{\"1\":{\"8201\":1}}],[\"=======================\",{\"1\":{\"1177\":2,\"1581\":1}}],[\"=========================\",{\"1\":{\"1177\":1,\"1421\":1,\"1431\":1,\"8201\":1}}],[\"===========================\",{\"1\":{\"8201\":1}}],[\"==============================\",{\"1\":{\"2416\":1,\"8201\":1}}],[\"================================\",{\"1\":{\"1673\":1,\"2552\":1}}],[\"=================================\",{\"1\":{\"1427\":1,\"2440\":1,\"2598\":1,\"2612\":1}}],[\"====================================\",{\"1\":{\"2413\":1,\"2444\":1,\"2487\":1,\"7743\":1}}],[\"======================================\",{\"1\":{\"2604\":1,\"2621\":1,\"7956\":1}}],[\"=======================================\",{\"1\":{\"2537\":1,\"8784\":1}}],[\"========================================\",{\"1\":{\"1601\":1,\"1648\":1,\"2433\":1,\"2484\":1}}],[\"============================================\",{\"1\":{\"5790\":1}}],[\"=============================================\",{\"1\":{\"2426\":1,\"8955\":1}}],[\"===================================================\",{\"1\":{\"6385\":1,\"6388\":1}}],[\"========================================================\",{\"1\":{\"9112\":1}}],[\"============================================================\",{\"1\":{\"2624\":1}}],[\"====================================================================\",{\"1\":{\"6883\":1}}],[\"======================================================================\",{\"1\":{\"2314\":1}}],[\"==================================================================\",{\"1\":{\"6700\":1}}],[\"================================================================\",{\"1\":{\"2747\":1,\"2756\":1}}],[\"=============================================================\",{\"1\":{\"2566\":1,\"2618\":1}}],[\"===========================================================\",{\"1\":{\"2546\":1,\"2615\":1,\"6703\":1}}],[\"==========================================================\",{\"1\":{\"1435\":1,\"1438\":1,\"1452\":1,\"1455\":1,\"1458\":1,\"1464\":1,\"1467\":1,\"1472\":1,\"1475\":1,\"1480\":1,\"1486\":1,\"1491\":1,\"1494\":1,\"1502\":1}}],[\"=========================================================\",{\"1\":{\"1177\":10,\"2404\":1,\"2407\":1,\"2422\":1,\"2429\":1,\"2436\":1,\"2492\":1,\"2500\":1,\"2505\":1,\"2512\":1,\"2515\":1,\"2518\":1,\"2549\":1,\"2563\":1,\"2592\":1}}],[\"=======================================================\",{\"1\":{\"2697\":1,\"8772\":1}}],[\"======================================================\",{\"1\":{\"2692\":1,\"7947\":1}}],[\"=====================================================\",{\"1\":{\"2446\":1,\"2760\":1}}],[\"=================================================\",{\"1\":{\"2589\":1,\"6706\":1,\"6708\":1,\"6711\":1,\"7377\":1,\"7390\":1}}],[\"================================================\",{\"1\":{\"2569\":1,\"7568\":1,\"7572\":1,\"7583\":1,\"7590\":1,\"7593\":1}}],[\"===============================================\",{\"1\":{\"2508\":1}}],[\"==============================================\",{\"1\":{\"1651\":1}}],[\"===========================================\",{\"1\":{\"2717\":1,\"7575\":1}}],[\"==========================================\",{\"1\":{\"1682\":1,\"2410\":1,\"2495\":1,\"2595\":1,\"7373\":1,\"7616\":1,\"7619\":1,\"7623\":1,\"7626\":1,\"7634\":1,\"7670\":1,\"7673\":1}}],[\"=========================================\",{\"1\":{\"1584\":1,\"1604\":1,\"2606\":1,\"2750\":1}}],[\"=====================================\",{\"1\":{\"1676\":1,\"1679\":1,\"2449\":1,\"2461\":1,\"2465\":1,\"2469\":1,\"7749\":1,\"7753\":1,\"7756\":1,\"7760\":1,\"7763\":1}}],[\"===================================\",{\"1\":{\"1442\":1,\"1449\":1,\"2601\":1,\"3212\":1}}],[\"==================================\",{\"1\":{\"1424\":1,\"2555\":1,\"2700\":1,\"8768\":1}}],[\"===============================\",{\"1\":{\"1595\":1,\"2609\":1}}],[\"============================\",{\"1\":{\"1589\":1,\"8781\":1}}],[\"==========================\",{\"1\":{\"1177\":1}}],[\"========================\",{\"1\":{\"1177\":2,\"8777\":1}}],[\"====================\",{\"1\":{\"1177\":3}}],[\"==============\",{\"1\":{\"8201\":3}}],[\"============通用方法二============\",{\"1\":{\"7307\":1}}],[\"============通用方法一===========\",{\"1\":{\"7307\":1}}],[\"=====\",{\"1\":{\"5913\":2}}],[\"===\",{\"1\":{\"4226\":1}}],[\"==的用法\",{\"0\":{\"4219\":1}}],[\"==反码+1\",{\"1\":{\"3190\":1}}],[\"==\",{\"0\":{\"3265\":1,\"4218\":1},\"1\":{\"1730\":1,\"1763\":1,\"1769\":1,\"1937\":1,\"2413\":1,\"2422\":1,\"2426\":2,\"2429\":1,\"2433\":2,\"2436\":2,\"2461\":1,\"2465\":1,\"2469\":1,\"3237\":1,\"3279\":1,\"3310\":1,\"3322\":1,\"3393\":1,\"3405\":1,\"3420\":1,\"3444\":1,\"3457\":2,\"3754\":1,\"4164\":1,\"4220\":1,\"4225\":1,\"4227\":5,\"4229\":1,\"4241\":3,\"4243\":1,\"4248\":2,\"4422\":1,\"4425\":1,\"5185\":2,\"5221\":3,\"5348\":1,\"5350\":3,\"6460\":1,\"7106\":4,\"8121\":1,\"8126\":1}}],[\"=\",{\"0\":{\"4639\":1,\"4641\":1,\"4643\":1,\"4646\":2},\"1\":{\"430\":2,\"519\":1,\"590\":1,\"598\":1,\"602\":2,\"611\":1,\"621\":1,\"623\":2,\"631\":1,\"635\":1,\"645\":1,\"647\":5,\"669\":1,\"781\":2,\"882\":1,\"988\":1,\"1029\":4,\"1038\":2,\"1224\":2,\"1234\":1,\"1239\":1,\"1241\":1,\"1246\":1,\"1248\":1,\"1252\":2,\"1256\":4,\"1265\":3,\"1296\":7,\"1299\":4,\"1417\":2,\"1421\":1,\"1424\":6,\"1427\":2,\"1431\":1,\"1435\":1,\"1438\":1,\"1442\":1,\"1449\":2,\"1452\":1,\"1455\":1,\"1458\":1,\"1464\":2,\"1467\":2,\"1472\":1,\"1475\":2,\"1480\":3,\"1486\":2,\"1491\":2,\"1494\":2,\"1496\":2,\"1502\":3,\"1506\":3,\"1512\":1,\"1515\":1,\"1518\":1,\"1521\":1,\"1524\":1,\"1529\":2,\"1542\":2,\"1548\":3,\"1556\":4,\"1559\":4,\"1581\":3,\"1584\":2,\"1589\":1,\"1595\":1,\"1601\":1,\"1604\":1,\"1648\":3,\"1651\":3,\"1654\":9,\"1657\":9,\"1660\":9,\"1663\":9,\"1673\":1,\"1676\":2,\"1679\":2,\"1682\":2,\"1702\":3,\"1705\":3,\"1707\":3,\"1719\":5,\"1723\":1,\"1725\":3,\"1727\":3,\"1730\":1,\"1763\":9,\"1769\":2,\"1771\":3,\"1773\":6,\"1788\":3,\"1800\":1,\"1805\":2,\"1808\":2,\"1811\":2,\"1814\":4,\"1816\":1,\"1817\":2,\"1820\":2,\"1823\":2,\"1825\":2,\"1832\":4,\"1850\":2,\"1853\":2,\"1856\":3,\"1859\":4,\"1862\":2,\"1868\":1,\"1879\":3,\"1881\":4,\"1886\":3,\"1889\":3,\"1892\":3,\"1899\":3,\"1904\":1,\"1907\":2,\"1910\":1,\"1911\":1,\"1913\":1,\"1916\":1,\"1919\":1,\"1922\":1,\"1925\":1,\"1928\":1,\"1930\":1,\"1937\":3,\"1946\":3,\"1950\":2,\"1953\":2,\"1956\":2,\"1959\":2,\"1963\":2,\"1966\":2,\"1971\":2,\"1975\":2,\"1979\":2,\"1982\":2,\"1985\":2,\"1989\":2,\"1993\":2,\"2003\":2,\"2006\":2,\"2009\":2,\"2015\":2,\"2022\":6,\"2036\":6,\"2042\":7,\"2048\":9,\"2054\":1,\"2062\":2,\"2087\":1,\"2090\":1,\"2098\":2,\"2105\":1,\"2109\":1,\"2114\":2,\"2121\":3,\"2134\":1,\"2137\":2,\"2141\":1,\"2144\":2,\"2147\":1,\"2150\":2,\"2153\":2,\"2156\":2,\"2159\":1,\"2162\":2,\"2165\":2,\"2168\":2,\"2171\":1,\"2175\":2,\"2178\":2,\"2181\":4,\"2185\":2,\"2188\":2,\"2191\":2,\"2194\":1,\"2197\":2,\"2200\":2,\"2204\":2,\"2211\":2,\"2225\":1,\"2228\":1,\"2231\":1,\"2239\":4,\"2244\":3,\"2256\":3,\"2263\":1,\"2266\":1,\"2269\":1,\"2272\":2,\"2275\":1,\"2282\":3,\"2291\":3,\"2304\":1,\"2314\":7,\"2325\":1,\"2331\":2,\"2345\":2,\"2351\":1,\"2354\":1,\"2362\":1,\"2365\":2,\"2370\":3,\"2375\":2,\"2379\":3,\"2382\":2,\"2387\":1,\"2391\":1,\"2404\":2,\"2407\":2,\"2410\":1,\"2416\":1,\"2422\":1,\"2426\":1,\"2429\":1,\"2433\":1,\"2436\":1,\"2444\":1,\"2446\":1,\"2449\":1,\"2461\":2,\"2465\":2,\"2469\":2,\"2484\":1,\"2487\":1,\"2492\":1,\"2495\":1,\"2500\":2,\"2505\":2,\"2508\":2,\"2512\":2,\"2515\":1,\"2518\":2,\"2530\":1,\"2537\":1,\"2546\":3,\"2549\":3,\"2552\":2,\"2555\":2,\"2563\":3,\"2566\":2,\"2569\":2,\"2592\":2,\"2595\":2,\"2601\":2,\"2604\":2,\"2606\":2,\"2609\":1,\"2612\":2,\"2615\":1,\"2618\":2,\"2621\":1,\"2624\":4,\"2683\":4,\"2692\":3,\"2697\":3,\"2700\":3,\"2705\":2,\"2717\":2,\"2747\":5,\"2750\":2,\"2756\":4,\"2760\":4,\"2782\":1,\"2788\":2,\"2802\":2,\"2849\":1,\"2850\":1,\"2962\":3,\"3007\":1,\"3008\":1,\"3010\":1,\"3011\":1,\"3082\":4,\"3100\":2,\"3118\":1,\"3125\":4,\"3142\":2,\"3156\":3,\"3162\":5,\"3167\":4,\"3173\":3,\"3176\":7,\"3191\":2,\"3192\":4,\"3194\":1,\"3197\":1,\"3200\":1,\"3208\":2,\"3212\":4,\"3237\":3,\"3241\":3,\"3245\":2,\"3253\":6,\"3261\":4,\"3263\":2,\"3267\":4,\"3269\":4,\"3270\":2,\"3273\":3,\"3279\":1,\"3282\":1,\"3319\":4,\"3322\":3,\"3393\":2,\"3405\":1,\"3409\":1,\"3414\":4,\"3420\":3,\"3444\":2,\"3453\":2,\"3455\":3,\"3457\":9,\"3484\":1,\"3486\":2,\"3496\":3,\"3499\":1,\"3500\":3,\"3506\":2,\"3512\":1,\"3541\":3,\"3545\":1,\"3550\":1,\"3556\":3,\"3560\":4,\"3563\":4,\"3567\":1,\"3570\":2,\"3588\":1,\"3591\":5,\"3620\":2,\"3630\":1,\"3633\":2,\"3634\":1,\"3636\":2,\"3646\":3,\"3658\":3,\"3664\":3,\"3668\":2,\"3681\":1,\"3738\":1,\"3747\":3,\"3754\":2,\"3782\":6,\"3787\":5,\"3803\":1,\"3816\":2,\"3821\":4,\"3853\":1,\"3857\":3,\"3901\":2,\"3957\":1,\"3985\":3,\"3987\":1,\"3990\":1,\"4039\":2,\"4061\":2,\"4080\":1,\"4092\":1,\"4118\":2,\"4142\":1,\"4145\":2,\"4148\":1,\"4162\":4,\"4164\":6,\"4174\":3,\"4178\":2,\"4181\":2,\"4184\":3,\"4188\":2,\"4192\":2,\"4196\":2,\"4199\":3,\"4227\":9,\"4229\":4,\"4241\":4,\"4248\":4,\"4256\":2,\"4273\":1,\"4274\":7,\"4281\":4,\"4286\":3,\"4292\":6,\"4295\":4,\"4326\":3,\"4329\":1,\"4356\":1,\"4378\":4,\"4388\":1,\"4394\":1,\"4422\":3,\"4425\":2,\"4466\":2,\"4491\":2,\"4513\":4,\"4553\":4,\"4658\":3,\"4661\":3,\"4670\":1,\"4691\":1,\"4709\":3,\"4712\":1,\"4714\":1,\"4716\":2,\"4718\":3,\"4720\":2,\"4722\":2,\"4724\":5,\"4734\":2,\"4751\":1,\"4753\":7,\"4777\":5,\"4803\":2,\"4813\":1,\"4843\":6,\"4845\":1,\"4872\":1,\"4874\":1,\"4887\":1,\"5033\":2,\"5060\":7,\"5185\":4,\"5219\":1,\"5221\":3,\"5253\":3,\"5263\":5,\"5310\":4,\"5322\":6,\"5332\":2,\"5345\":6,\"5350\":3,\"5384\":1,\"5396\":6,\"5426\":2,\"5464\":4,\"5486\":5,\"5517\":2,\"5562\":1,\"5588\":2,\"5604\":1,\"5611\":1,\"5614\":1,\"5618\":4,\"5620\":3,\"5648\":1,\"5650\":1,\"5656\":1,\"5660\":1,\"5667\":1,\"5672\":3,\"5779\":2,\"5790\":4,\"5794\":4,\"5806\":1,\"5856\":1,\"5901\":1,\"5913\":9,\"5916\":3,\"5927\":4,\"5964\":2,\"5967\":4,\"5970\":6,\"5994\":2,\"5999\":4,\"6001\":2,\"6005\":6,\"6013\":1,\"6019\":1,\"6022\":1,\"6025\":1,\"6028\":1,\"6045\":1,\"6054\":3,\"6057\":5,\"6067\":6,\"6073\":4,\"6078\":5,\"6081\":5,\"6094\":11,\"6102\":1,\"6132\":2,\"6136\":1,\"6239\":3,\"6243\":1,\"6251\":7,\"6254\":8,\"6260\":1,\"6262\":1,\"6264\":1,\"6275\":3,\"6285\":3,\"6287\":11,\"6297\":6,\"6306\":11,\"6325\":2,\"6328\":1,\"6331\":5,\"6334\":6,\"6348\":7,\"6353\":14,\"6359\":4,\"6385\":2,\"6388\":2,\"6394\":3,\"6398\":4,\"6411\":7,\"6449\":6,\"6460\":6,\"6483\":2,\"6487\":8,\"6516\":5,\"6526\":1,\"6543\":4,\"6549\":2,\"6555\":2,\"6557\":4,\"6569\":1,\"6571\":2,\"6573\":4,\"6577\":1,\"6594\":2,\"6700\":1,\"6703\":2,\"6706\":2,\"6708\":2,\"6711\":2,\"6803\":2,\"6819\":6,\"6840\":5,\"6843\":6,\"6883\":4,\"6899\":2,\"6949\":7,\"6952\":1,\"6956\":4,\"6958\":2,\"6960\":5,\"6962\":6,\"6989\":3,\"6994\":1,\"6997\":2,\"7000\":1,\"7002\":2,\"7043\":4,\"7049\":9,\"7054\":2,\"7065\":4,\"7072\":2,\"7078\":1,\"7086\":4,\"7097\":3,\"7106\":7,\"7128\":3,\"7132\":2,\"7134\":2,\"7137\":4,\"7139\":3,\"7141\":2,\"7143\":2,\"7146\":3,\"7161\":7,\"7179\":3,\"7227\":1,\"7231\":2,\"7277\":1,\"7279\":2,\"7284\":3,\"7286\":1,\"7287\":1,\"7292\":1,\"7307\":2,\"7345\":1,\"7371\":1,\"7373\":2,\"7375\":1,\"7377\":3,\"7382\":1,\"7386\":1,\"7390\":4,\"7462\":1,\"7468\":2,\"7471\":1,\"7473\":1,\"7476\":1,\"7480\":1,\"7483\":1,\"7487\":1,\"7490\":1,\"7493\":1,\"7495\":1,\"7498\":1,\"7510\":1,\"7512\":1,\"7517\":1,\"7520\":1,\"7525\":1,\"7527\":1,\"7535\":1,\"7537\":1,\"7568\":1,\"7572\":1,\"7575\":2,\"7583\":2,\"7616\":2,\"7619\":2,\"7623\":2,\"7626\":2,\"7634\":2,\"7655\":14,\"7658\":1,\"7662\":1,\"7670\":1,\"7673\":1,\"7678\":2,\"7680\":2,\"7682\":1,\"7685\":2,\"7688\":2,\"7691\":1,\"7694\":1,\"7697\":1,\"7708\":2,\"7712\":2,\"7716\":1,\"7723\":2,\"7743\":2,\"7746\":1,\"7749\":4,\"7753\":3,\"7756\":2,\"7760\":2,\"7763\":3,\"7852\":4,\"7858\":2,\"7862\":6,\"7865\":4,\"7873\":7,\"7889\":6,\"7892\":1,\"7893\":4,\"7946\":1,\"7947\":3,\"7952\":2,\"7956\":2,\"7970\":15,\"7975\":7,\"7978\":2,\"7980\":7,\"7989\":5,\"7991\":5,\"8037\":13,\"8042\":4,\"8045\":14,\"8047\":6,\"8050\":1,\"8054\":15,\"8056\":2,\"8084\":4,\"8089\":16,\"8109\":4,\"8113\":5,\"8121\":5,\"8126\":4,\"8146\":3,\"8148\":8,\"8157\":1,\"8158\":1,\"8159\":1,\"8162\":4,\"8201\":38,\"8207\":15,\"8210\":21,\"8260\":4,\"8324\":4,\"8326\":3,\"8381\":4,\"8383\":4,\"8385\":6,\"8387\":5,\"8389\":10,\"8391\":8,\"8784\":1,\"8806\":7,\"8817\":2,\"8843\":1,\"8848\":1,\"8854\":1,\"8857\":1,\"8944\":10,\"8951\":2,\"8955\":1,\"8990\":2,\"9004\":5,\"9027\":5,\"9075\":1,\"9079\":1,\"9085\":1,\"9091\":1,\"9095\":6,\"9099\":2,\"9101\":1,\"9124\":1,\"9174\":1,\"9196\":1,\"9220\":2,\"9234\":3,\"9249\":2,\"9262\":4,\"9295\":2,\"9298\":1,\"9583\":2,\"9584\":2,\"9585\":2,\"9681\":1,\"9687\":1,\"9690\":2,\"9693\":1,\"9695\":4,\"9714\":2,\"9717\":1,\"9726\":3,\"9750\":1,\"9774\":1,\"9821\":1,\"9824\":1,\"10351\":1,\"10597\":1}}],[\"x版本以后\",{\"1\":{\"10177\":1}}],[\"xpack\",{\"1\":{\"9902\":3}}],[\"xsi\",{\"1\":{\"9645\":1}}],[\"xsi=\",{\"1\":{\"9645\":1}}],[\"xsd是文件名\",{\"1\":{\"9645\":1}}],[\"xsd=\",{\"1\":{\"9642\":1}}],[\"xsd\",{\"1\":{\"9640\":1,\"9641\":1,\"9642\":15,\"9645\":1}}],[\"xhtml+xml\",{\"1\":{\"8951\":1}}],[\"xiaofei\",{\"1\":{\"8210\":1}}],[\"xyz\",{\"1\":{\"6526\":1}}],[\"x以后也是基于注解的\",{\"1\":{\"4887\":1}}],[\"x<6\",{\"1\":{\"3293\":1}}],[\"x64\",{\"1\":{\"2853\":1}}],[\"x+0\",{\"1\":{\"1813\":1}}],[\"x插件\",{\"1\":{\"1111\":1}}],[\"x\",{\"0\":{\"1058\":1,\"1120\":1,\"1178\":1,\"1181\":1,\"10879\":1},\"1\":{\"1069\":1,\"1071\":1,\"1074\":1,\"1077\":1,\"1080\":1,\"1115\":1,\"1116\":1,\"1763\":3,\"4236\":1,\"4237\":2,\"4238\":1,\"4240\":2,\"5806\":1,\"6341\":1,\"7956\":1,\"10090\":1,\"10093\":1,\"10096\":1,\"10099\":1,\"10102\":1,\"10105\":1,\"10108\":1,\"10111\":1,\"10114\":1,\"10131\":1}}],[\"xxobject\",{\"1\":{\"6546\":1}}],[\"xxx代表数据类型\",{\"1\":{\"8015\":1}}],[\"xxxevent等\",{\"1\":{\"4577\":1}}],[\"xxxyyyzzz\",{\"1\":{\"3067\":1,\"3068\":1,\"3069\":1,\"3930\":1}}],[\"xxxoperator\",{\"0\":{\"2656\":1}}],[\"xxxpredicate\",{\"0\":{\"2653\":1}}],[\"xxxfucntion\",{\"0\":{\"2650\":1}}],[\"xxxsupplier\",{\"0\":{\"2647\":1}}],[\"xxxconsumer\",{\"0\":{\"2643\":1}}],[\"xxx为基本数据类型\",{\"1\":{\"2339\":1,\"2796\":1}}],[\"xxx是数据类型\",{\"1\":{\"7951\":1,\"7954\":1}}],[\"xxx是基本数据类型\",{\"1\":{\"1862\":1}}],[\"xxx是某种包装类\",{\"1\":{\"1859\":1}}],[\"xxx是任意包装类\",{\"1\":{\"1853\":1}}],[\"xxxvalue\",{\"0\":{\"1846\":1}}],[\"xxx\",{\"0\":{\"1483\":1},\"1\":{\"1599\":1,\"1853\":2,\"1859\":1,\"1862\":1,\"3070\":1,\"3282\":1,\"3951\":1,\"3963\":1,\"4291\":2,\"4292\":2,\"7956\":1,\"8016\":1,\"8078\":1}}],[\"xxx指的是redis的数据类型\",{\"1\":{\"1025\":1}}],[\"xxxapplicationtests\",{\"1\":{\"655\":1}}],[\"xxxapplication\",{\"0\":{\"423\":1}}],[\"xx\",{\"1\":{\"835\":1}}],[\"xmlschema\",{\"1\":{\"9642\":1,\"9645\":1}}],[\"xmlns\",{\"1\":{\"9642\":1,\"9645\":2}}],[\"xmlns=\",{\"1\":{\"9642\":1,\"9645\":1}}],[\"xml现在的主要作用是作为配置文件\",{\"1\":{\"9623\":1}}],[\"xml标签名称区分大小写\",{\"1\":{\"9606\":1}}],[\"xml标签都是自定义的\",{\"1\":{\"9594\":1}}],[\"xml第一行必须定义为文档声明\",{\"1\":{\"9602\":1}}],[\"xml文档中必须有且仅有一个根标签\",{\"1\":{\"9603\":1}}],[\"xml文档的后缀名\",{\"1\":{\"9601\":1}}],[\"xml文件和一个classes目录\",{\"1\":{\"9524\":1}}],[\"xml文件中进行servlet的部署\",{\"1\":{\"4897\":1}}],[\"xml文件中会有如下配置\",{\"1\":{\"702\":1}}],[\"xml是存储数据的\",{\"1\":{\"9596\":1}}],[\"xml是这个应用的配置文件\",{\"1\":{\"9524\":1}}],[\"xml与html的区别\",{\"0\":{\"9593\":1}}],[\"xml配置路由\",{\"0\":{\"8865\":1}}],[\"xml的组成部分\",{\"0\":{\"9609\":1}}],[\"xml的用途\",{\"0\":{\"9597\":1}}],[\"xml的语法严格\",{\"1\":{\"9595\":1}}],[\"xml的打包方式\",{\"0\":{\"8563\":1}}],[\"xml的parent\",{\"0\":{\"389\":1}}],[\"xml数据文件中\",{\"1\":{\"7790\":1}}],[\"xml示例\",{\"0\":{\"1173\":1}}],[\"xml每次更新需要手动compile方可生效\",{\"1\":{\"869\":1}}],[\"xml对所有项目的依赖进行统一管理\",{\"1\":{\"385\":1}}],[\"xml和本地库\",{\"1\":{\"1068\":1}}],[\"xml和创建启动类\",{\"1\":{\"365\":1}}],[\"xml和启动类需要手动进行创建\",{\"1\":{\"365\":1}}],[\"xml中多余的内容\",{\"0\":{\"8551\":1}}],[\"xml中依赖坐标对应的jar包\",{\"1\":{\"8518\":1}}],[\"xml中导入\",{\"1\":{\"966\":1}}],[\"xml中对spring\",{\"1\":{\"445\":1}}],[\"xml中的配置项\",{\"1\":{\"421\":1}}],[\"xml中的spring\",{\"1\":{\"343\":1}}],[\"xml中指定某个依赖的版本\",{\"1\":{\"401\":1}}],[\"xml中\",{\"1\":{\"388\":1}}],[\"xml中进行设置\",{\"1\":{\"352\":1}}],[\"xml\",{\"0\":{\"342\":1,\"651\":1,\"9586\":1,\"9590\":1},\"1\":{\"11\":1,\"443\":1,\"949\":1,\"952\":1,\"8441\":1,\"8474\":1,\"8498\":1,\"8539\":1,\"8569\":1,\"9231\":1,\"9232\":1,\"9591\":1,\"9601\":1,\"9608\":1,\"9613\":1,\"9635\":1,\"9642\":3,\"9645\":3,\"9784\":1}}],[\"ⅳ\",{\"0\":{\"422\":1,\"680\":1,\"926\":1,\"1117\":1,\"1155\":1,\"1459\":1,\"1683\":1,\"1869\":1,\"2010\":1,\"2212\":1,\"2653\":1,\"2987\":1,\"3137\":1,\"3283\":1,\"3398\":1,\"3585\":1,\"3768\":1,\"3969\":1,\"4107\":1,\"4346\":1,\"4412\":1,\"4969\":1,\"5232\":1,\"5375\":1,\"5902\":1,\"6290\":1,\"6412\":1,\"6488\":1,\"7125\":1,\"7528\":1,\"7611\":1,\"7771\":1,\"7992\":1,\"8486\":1,\"8618\":1,\"8993\":1,\"9531\":1,\"9791\":1,\"10532\":1,\"10628\":1,\"10821\":1}}],[\"设备\",{\"1\":{\"5416\":1}}],[\"设计哈希算法时\",{\"1\":{\"5765\":1}}],[\"设计类的成员\",{\"1\":{\"3638\":1}}],[\"设计正则表达式\",{\"1\":{\"2692\":1}}],[\"设计多个构造方法\",{\"1\":{\"1294\":1}}],[\"设计模式的一种\",{\"1\":{\"5569\":1,\"5570\":1}}],[\"设计模式>单例模式\",{\"1\":{\"4414\":1}}],[\"设计模式\",{\"0\":{\"160\":1},\"1\":{\"4887\":1}}],[\"设置角色\",{\"1\":{\"10703\":1}}],[\"设置密码\",{\"1\":{\"10703\":1}}],[\"设置session自动销毁的时间\",{\"1\":{\"9783\":1}}],[\"设置session的键值\",{\"0\":{\"9752\":1}}],[\"设置sql\",{\"1\":{\"8084\":1,\"8089\":1}}],[\"设置cookie的获取范围\",{\"1\":{\"9730\":1}}],[\"设置k\",{\"1\":{\"9246\":1}}],[\"设置响应状态码\",{\"1\":{\"9143\":1}}],[\"设置响应的数据类型\",{\"0\":{\"9080\":1}}],[\"设置响应数据\",{\"0\":{\"8893\":1}}],[\"设置编码\",{\"1\":{\"9046\":1,\"9101\":1}}],[\"设置pom\",{\"0\":{\"8563\":1}}],[\"设置数据库的隔离级别\",{\"1\":{\"8162\":1}}],[\"设置数据库隔离级别\",{\"0\":{\"8154\":1}}],[\"设置事务的自动提交\",{\"0\":{\"8132\":1}}],[\"设置不允许自动提交数据\",{\"1\":{\"8126\":1}}],[\"设置不参与热部署的文件或文件夹\",{\"1\":{\"577\":1}}],[\"设置指定对象obj上此field的属性内容\",{\"1\":{\"7157\":1}}],[\"设置指定对象的此属性值\",{\"1\":{\"7146\":1}}],[\"设置属性值\",{\"0\":{\"7156\":1}}],[\"设置属性的值\",{\"1\":{\"2241\":1}}],[\"设置类变量默认初始值的阶段\",{\"1\":{\"7015\":1}}],[\"设置配置的值\",{\"1\":{\"5924\":1}}],[\"设置线程池属性\",{\"1\":{\"5513\":1}}],[\"设置线程的优先级\",{\"1\":{\"5253\":1}}],[\"设置当前的虚拟目录\",{\"1\":{\"9730\":1}}],[\"设置当前线程的名字\",{\"1\":{\"5210\":1}}],[\"设置当前组中所包含的包\",{\"1\":{\"907\":1}}],[\"设置成员\",{\"1\":{\"3846\":1}}],[\"设置每次读取的长度\",{\"1\":{\"2048\":2}}],[\"设置值的精度\",{\"1\":{\"1901\":1}}],[\"设置为true\",{\"1\":{\"10283\":1}}],[\"设置为abstract类\",{\"1\":{\"8178\":1}}],[\"设置为当年的第n天\",{\"1\":{\"1657\":1}}],[\"设置为配置类\",{\"1\":{\"1234\":1}}],[\"设置毫秒\",{\"1\":{\"1657\":1}}],[\"设置秒\",{\"1\":{\"1657\":1}}],[\"设置mongodb的网络环境\",{\"1\":{\"10639\":1}}],[\"设置month\",{\"1\":{\"1657\":1}}],[\"设置mins\",{\"1\":{\"1657\":1}}],[\"设置hour\",{\"1\":{\"1657\":1}}],[\"设置day\",{\"1\":{\"1657\":1}}],[\"设置year\",{\"1\":{\"1657\":1}}],[\"设置日期时间信息\",{\"1\":{\"1656\":1}}],[\"设置日志输出方式为\",{\"1\":{\"1229\":1}}],[\"设置日志文件\",{\"0\":{\"928\":1}}],[\"设置日志组\",{\"1\":{\"907\":1}}],[\"设置静态资源映射\",{\"0\":{\"1374\":1}}],[\"设置条件\",{\"1\":{\"1248\":1}}],[\"设置位置\",{\"1\":{\"1068\":1,\"1079\":1}}],[\"设置连接池\",{\"1\":{\"1051\":1}}],[\"设置字符集\",{\"1\":{\"952\":1}}],[\"设置监测配置文件是否有修改的时间间隔\",{\"1\":{\"952\":1}}],[\"设置默认启动的环境\",{\"1\":{\"862\":1}}],[\"设置多环境\",{\"1\":{\"862\":1}}],[\"设置三种环境\",{\"1\":{\"824\":1}}],[\"设置的访问端口不一样等等\",{\"1\":{\"818\":1}}],[\"设置具体的规则\",{\"1\":{\"647\":1}}],[\"设置\",{\"0\":{\"558\":1,\"561\":1}}],[\"设置最佳版本组合\",{\"1\":{\"419\":1}}],[\"通信的两端都要有socket\",{\"1\":{\"6760\":1}}],[\"通信协议的分层\",{\"0\":{\"6717\":1}}],[\"通信协议和javaweb\",{\"1\":{\"6638\":1}}],[\"通信实体\",{\"1\":{\"6663\":1}}],[\"通信过程\",{\"0\":{\"6658\":1}}],[\"通信双方的地址\",{\"1\":{\"6652\":1}}],[\"通配符只能表示a类\",{\"1\":{\"6089\":1,\"6092\":1}}],[\"通配符大大扩大了方法的兼容性\",{\"1\":{\"6080\":1}}],[\"通配符的使用\",{\"0\":{\"6060\":1}}],[\"通配符\",{\"0\":{\"6050\":1,\"6061\":1},\"1\":{\"6063\":1}}],[\"通电==\",{\"1\":{\"5118\":1}}],[\"通俗的讲就是用多台机器进行同一数据的异\",{\"1\":{\"10439\":1}}],[\"通俗的说\",{\"1\":{\"3813\":1}}],[\"通俗点说就是\",{\"1\":{\"6924\":1}}],[\"通俗点说\",{\"1\":{\"4963\":1}}],[\"通常使用执行计划来查看查询的情况\",{\"1\":{\"10416\":1}}],[\"通常使用\",{\"1\":{\"10382\":1}}],[\"通常在web\",{\"1\":{\"9524\":1}}],[\"通常应用于web项目中\",{\"1\":{\"9520\":1}}],[\"通常是用\",{\"1\":{\"6884\":1}}],[\"通常系统中拥有的不可剥夺资源\",{\"1\":{\"5419\":1}}],[\"通常需要重写thread类中的此方法\",{\"1\":{\"5206\":1}}],[\"通常设置为static的\",{\"1\":{\"4409\":1}}],[\"通常\",{\"1\":{\"3723\":1}}],[\"通常一个文件中只有一个类\",{\"1\":{\"3629\":1}}],[\"通常情况下比单独提交处理更有效率\",{\"1\":{\"8092\":1}}],[\"通常情况下\",{\"1\":{\"3356\":1,\"3895\":1,\"3898\":1,\"4076\":1,\"4234\":1,\"4245\":1}}],[\"通常采用此类型\",{\"1\":{\"3096\":1}}],[\"通常定义整形变量时\",{\"1\":{\"3076\":1}}],[\"通常用于聚合大量的java类文件\",{\"1\":{\"9468\":1}}],[\"通常用于主线程和runnable实现类\",{\"1\":{\"5208\":1}}],[\"通常用几大段话详细描述该方法的功能与相关情况\",{\"1\":{\"2977\":1}}],[\"通常用几大段话详细描述该类的功能与相关情况\",{\"1\":{\"2965\":1}}],[\"通常用一段话简要的描述该方法的基本内容\",{\"1\":{\"2976\":1}}],[\"通常用一段话简要的描述该类的基本内容\",{\"1\":{\"2964\":1}}],[\"通常包含多个依赖坐标\",{\"1\":{\"416\":1}}],[\"通用目录\",{\"0\":{\"8495\":1}}],[\"通用的增删改操作\",{\"1\":{\"8180\":1}}],[\"通用的sql数据库存取和操作的公共接口\",{\"1\":{\"7798\":1}}],[\"通用查询操作封装\",{\"0\":{\"8052\":1}}],[\"通用方法二\",{\"1\":{\"7307\":1}}],[\"通用方法一\",{\"1\":{\"7307\":1}}],[\"通用性\",{\"1\":{\"6946\":1}}],[\"通用\",{\"1\":{\"4463\":1}}],[\"通用文档标记\",{\"0\":{\"2942\":1}}],[\"通用service接口和通用service实现类\",{\"0\":{\"1266\":1}}],[\"通知开发\",{\"1\":{\"1290\":1}}],[\"通知运维\",{\"1\":{\"1290\":1}}],[\"通过uri连接\",{\"0\":{\"10844\":1}}],[\"通过url对象可以创建当前应用程序和\",{\"1\":{\"6919\":1}}],[\"通过host和port连接\",{\"0\":{\"10841\":1}}],[\"通过httpservlet\",{\"1\":{\"9223\":1}}],[\"通过openssl生成证书\",{\"0\":{\"10768\":1}}],[\"通过orm类\",{\"1\":{\"8205\":1,\"8207\":1}}],[\"通过远程登录的\",{\"1\":{\"10757\":1}}],[\"通过认证登录\",{\"0\":{\"10742\":1}}],[\"通过msi包安装mongodb时可以选择自动安装mongodb\",{\"1\":{\"10183\":1}}],[\"通过命令关闭\",{\"1\":{\"10167\":1}}],[\"通过进程编号关闭节点\",{\"1\":{\"10167\":1}}],[\"通过配置文件启动服务\",{\"0\":{\"10146\":1}}],[\"通过配置强制关闭热部署\",{\"0\":{\"580\":1}}],[\"通过参数启动服务\",{\"0\":{\"10140\":1}}],[\"通过地理位置索引实现附近的人\",{\"1\":{\"10034\":1}}],[\"通过这5个文档建立简单的倒排索引\",{\"1\":{\"9981\":1}}],[\"通过这个事件对象我们可以获取到触发事件的httpservletrequest对象\",{\"1\":{\"9357\":1}}],[\"通过这个事件对象我们可以获取到触发事件的httpsession对象\",{\"1\":{\"9348\":1}}],[\"通过这个事件对象我们可以获取到servletcontext对象\",{\"1\":{\"9339\":1}}],[\"通过倒排索引\",{\"1\":{\"9965\":1}}],[\"通过json格式传递数据\",{\"1\":{\"9906\":1}}],[\"通过键删除键值对\",{\"0\":{\"9756\":1}}],[\"通过键获取session的值\",{\"0\":{\"9754\":1}}],[\"通过getsession\",{\"1\":{\"9440\":1}}],[\"通过k移除k\",{\"1\":{\"9248\":1}}],[\"通过k获取v\",{\"1\":{\"9247\":1}}],[\"通过扩展名\",{\"1\":{\"9231\":1}}],[\"通过响应头进行重定向\",{\"1\":{\"9143\":1}}],[\"通过字节输出流写数据\",{\"1\":{\"9092\":1}}],[\"通过字符输出流写数据\",{\"1\":{\"9076\":1}}],[\"通过字面量创建的string\",{\"1\":{\"3230\":1}}],[\"通过字面量的方式\",{\"1\":{\"3210\":1}}],[\"通过restful风格访问es服务器的资源\",{\"1\":{\"9905\":1}}],[\"通过response对象获取字节输出流\",{\"1\":{\"9091\":1}}],[\"通过response对象获取字符输出流\",{\"1\":{\"9075\":1}}],[\"通过resultsetmetadata获取结果集中的列数\",{\"1\":{\"8045\":1,\"8201\":2}}],[\"通过request对象获取\",{\"1\":{\"9221\":1}}],[\"通过request\",{\"1\":{\"9046\":1}}],[\"通过表达的post方式请求该servlet\",{\"1\":{\"8812\":1}}],[\"通过浏览器地址栏请求该servlet\",{\"1\":{\"8811\":1}}],[\"通过控制台观察代码块运行结果可知\",{\"1\":{\"8768\":1,\"8777\":1}}],[\"通过修改\",{\"1\":{\"8750\":1}}],[\"通过在不同数据库服务器上提供多个数据副本\",{\"1\":{\"10441\":1}}],[\"通过在module上右键添加web\",{\"0\":{\"8536\":1}}],[\"通过在start\",{\"1\":{\"5152\":1}}],[\"通过postman工具进行数据访问的测试\",{\"1\":{\"9907\":1}}],[\"通过project\",{\"0\":{\"8533\":1}}],[\"通过p1和p3对对象的属性进行修改\",{\"1\":{\"4647\":1}}],[\"通过打包命令\",{\"1\":{\"8516\":1}}],[\"通过子配置文件\",{\"0\":{\"8480\":1}}],[\"通过别名的方式配置扩展插件\",{\"1\":{\"8319\":1}}],[\"通过泛型传递orm类名\",{\"0\":{\"8189\":1}}],[\"通过填写用户名\",{\"1\":{\"7892\":1}}],[\"通过流所生成元素的\",{\"1\":{\"7618\":1}}],[\"通过limit限制为10个\",{\"1\":{\"7590\":1,\"7593\":1}}],[\"通过显示值创建一个流\",{\"1\":{\"7582\":1}}],[\"通过显式定义同步锁对象来实现同步\",{\"1\":{\"5378\":1}}],[\"通过数组创建stream\",{\"0\":{\"7573\":1}}],[\"通过数组定义类引用\",{\"1\":{\"7031\":1}}],[\"通过集合的parallelstream方法\",{\"1\":{\"7570\":1}}],[\"通过集合的stream方法\",{\"1\":{\"7566\":1}}],[\"通过集合创建stream\",{\"0\":{\"7564\":1}}],[\"通过一个数据源\",{\"1\":{\"7556\":1}}],[\"通过一个案例了解使用springboot开发项目的过程\",{\"1\":{\"1186\":1}}],[\"通过方法的名字来指向一个方法\",{\"1\":{\"7442\":1}}],[\"通过方法获取主线程\",{\"1\":{\"5219\":1}}],[\"通过标识符的数据类型就能推断出接口构造器\",{\"1\":{\"7350\":1}}],[\"通过bind方法传入被代理对象\",{\"1\":{\"7279\":1}}],[\"通过此类为一个或多个接口动态地生成实现类\",{\"1\":{\"7256\":1}}],[\"通过此对象调用start\",{\"1\":{\"5182\":1}}],[\"通过上述的逻辑链条可知\",{\"1\":{\"7249\":1}}],[\"通过运行时类的对象\",{\"0\":{\"6995\":1}}],[\"通过反射获取被代理类的接口和类\",{\"1\":{\"7290\":1}}],[\"通过反射创建存放数据的对象\",{\"1\":{\"8054\":1}}],[\"通过反射创建对象\",{\"1\":{\"7054\":1}}],[\"通过反射创建对应的运行时类的对象\",{\"0\":{\"7052\":1}}],[\"通过反射创建该类的对象\",{\"1\":{\"2149\":1}}],[\"通过反射\",{\"1\":{\"6960\":2,\"6962\":1,\"8045\":1,\"8054\":1,\"8201\":2}}],[\"通过输出流将信息写入线程\",{\"1\":{\"6796\":1}}],[\"通过输入流读取服务器放入线路的信息\",{\"1\":{\"6795\":1}}],[\"通过对用户授予一个或多个角色来控制用户访问数据库资源的权限和数据库操作的权限\",{\"1\":{\"10647\":1}}],[\"通过对数据的处理为程序提供更为强大的读写功能\",{\"1\":{\"6166\":1,\"6184\":1}}],[\"通过对象调用属性和方法\",{\"1\":{\"3640\":1}}],[\"通过对象往redis数据库中存储的数据是对象格式的\",{\"1\":{\"1034\":1}}],[\"通过实现callable接口\",{\"1\":{\"5469\":1}}],[\"通过实体类获取字段名\",{\"1\":{\"1252\":1}}],[\"通过thread类的对象调用start\",{\"1\":{\"5261\":1,\"5263\":1}}],[\"通过thread类的对象调用该方法\",{\"1\":{\"5175\":1}}],[\"通过直接调用run\",{\"1\":{\"5196\":1}}],[\"通过该方法\",{\"1\":{\"7577\":1}}],[\"通过该thread对象的start\",{\"1\":{\"5176\":1}}],[\"通过该对象读取所需配置\",{\"1\":{\"510\":1,\"588\":1}}],[\"通过继承thread类\",{\"1\":{\"5156\":1}}],[\"通过继承的父类的setage方法来设置\",{\"1\":{\"4039\":1}}],[\"通过继承的父类的getage方法获取\",{\"1\":{\"4039\":1}}],[\"通过变量我们可以操作\",{\"1\":{\"5132\":1}}],[\"通过变量赋值的方式\",{\"1\":{\"4647\":1}}],[\"通过包装类的构造器实现\",{\"1\":{\"4272\":1}}],[\"通过分析重载和重写在编译和运行是状态来判断早绑定与晚绑定\",{\"1\":{\"4156\":1}}],[\"通过使用annotation\",{\"1\":{\"4881\":1}}],[\"通过使用\",{\"1\":{\"4076\":1}}],[\"通过封装保护属性\",{\"0\":{\"3819\":1}}],[\"通过类的实例化\",{\"1\":{\"3613\":1}}],[\"通过类的class属性获取\",{\"1\":{\"2133\":1,\"6993\":1}}],[\"通过下标取出数组元素\",{\"1\":{\"3496\":1}}],[\"通过name选择\",{\"1\":{\"8604\":1}}],[\"通过new+构造器的方式创建的string\",{\"1\":{\"3231\":1}}],[\"通过now方法获取的instant对象\",{\"1\":{\"1675\":1}}],[\"通过过\",{\"1\":{\"2884\":1}}],[\"通过正则字符串不能表示模式修饰符\",{\"1\":{\"2677\":1}}],[\"通过compass查看\",{\"1\":{\"10433\":1}}],[\"通过compass只要输入ip+port就可以直接连接上\",{\"1\":{\"10187\":1}}],[\"通过constructor实例化对象\",{\"1\":{\"7063\":1}}],[\"通过collection接口的iterator\",{\"1\":{\"2456\":1}}],[\"通过class可以完整地得到一个类中的所有被加载的结构\",{\"1\":{\"6979\":1}}],[\"通过class进行实例化\",{\"1\":{\"2253\":1}}],[\"通过class类进行实例化\",{\"1\":{\"2218\":1}}],[\"通过\",{\"1\":{\"2322\":1,\"2779\":1,\"2885\":1,\"3887\":1,\"4923\":1,\"5818\":1,\"5820\":1,\"6866\":1,\"7553\":1,\"8693\":1}}],[\"通过stream的of\",{\"0\":{\"7581\":1}}],[\"通过string输出char数组\",{\"0\":{\"6258\":1}}],[\"通过string的一个特殊构造器\",{\"1\":{\"1495\":1}}],[\"通过system类的setin\",{\"1\":{\"6442\":1}}],[\"通过scanner类来获取用户的输入\",{\"1\":{\"2321\":1,\"2778\":1}}],[\"通过field对象\",{\"1\":{\"2233\":1,\"2241\":1}}],[\"通过当前运行时类\",{\"1\":{\"2164\":1}}],[\"通过毫秒时间戳获取instant对象\",{\"1\":{\"1681\":1}}],[\"通过id获取文档\",{\"1\":{\"9925\":1}}],[\"通过ide导入项目即可\",{\"1\":{\"362\":1}}],[\"通过invocationhandler接口的实现类调用该方法\",{\"1\":{\"7270\":1}}],[\"通过instant类的now静态方法\",{\"1\":{\"1672\":1}}],[\"通过定义的值会被插入到logger上下文中\",{\"1\":{\"952\":1}}],[\"通过日志组设置日志等级\",{\"0\":{\"904\":1}}],[\"通过启动类强制关闭热部署\",{\"0\":{\"582\":1}}],[\"通过environment对象的getproperty方法可以读取具体的配置项\",{\"1\":{\"507\":1}}],[\"通过自动装配\",{\"1\":{\"505\":1}}],[\"通过注入的方式读取配置项\",{\"1\":{\"494\":1}}],[\"每页查两个\",{\"1\":{\"10333\":1}}],[\"每页显示多少条数据\",{\"1\":{\"1238\":1}}],[\"每条记录称为一个倒排项\",{\"1\":{\"9973\":1}}],[\"每台服务器可以运行多个\",{\"1\":{\"9840\":1}}],[\"每读一行就是一个请求键值对\",{\"1\":{\"8990\":1}}],[\"每刷新一次就打印一次hello\",{\"1\":{\"8713\":1}}],[\"每提交一次\",{\"1\":{\"8124\":1}}],[\"每执行一次executebatch\",{\"1\":{\"8124\":1}}],[\"每循环一次\",{\"1\":{\"8108\":1,\"8116\":1}}],[\"每操作一次\",{\"1\":{\"6545\":1,\"6551\":1}}],[\"每50个数据一行\",{\"1\":{\"6460\":1}}],[\"每当有线程进去\",{\"1\":{\"5352\":1}}],[\"每1个annotation对象\",{\"1\":{\"4948\":1}}],[\"每创建一个对象\",{\"1\":{\"4564\":1}}],[\"每\",{\"1\":{\"3931\":1,\"4955\":1,\"4956\":1,\"4960\":1,\"4963\":1}}],[\"每一层里功能职责做到单一\",{\"1\":{\"9581\":1}}],[\"每一个驱动都以特定语言的方式实现了这些类型\",{\"1\":{\"10083\":1}}],[\"每一个代理类只能为一个接口服务\",{\"1\":{\"7205\":1}}],[\"每一个一维数组中有2个元素\",{\"1\":{\"3544\":1}}],[\"每一行执行语句都以\",{\"1\":{\"2908\":1}}],[\"每移动一位\",{\"1\":{\"3306\":1}}],[\"每调用一次iterator方法\",{\"1\":{\"2456\":1}}],[\"每种格式都返回一个datetimeformatter对象\",{\"1\":{\"1698\":1}}],[\"每天日志归档路径以及格式\",{\"1\":{\"952\":1}}],[\"每个角色当中的权限可以显式指定\",{\"1\":{\"10649\":1}}],[\"每个角色做它自己的事\",{\"1\":{\"9551\":1}}],[\"每个节点都要修改\",{\"1\":{\"10778\":1}}],[\"每个节点都可以投票\",{\"1\":{\"10617\":1}}],[\"每个节点目录下都有以下文件\",{\"1\":{\"10489\":1}}],[\"每个浏览器与服务器建立的会话都是不同的会话\",{\"1\":{\"9658\":1}}],[\"每个tomcat实例独立运行一个web服务\",{\"1\":{\"9530\":1}}],[\"每个try语句块可以伴随一个或多个catch语句\",{\"1\":{\"4729\":1}}],[\"每个servlet类都需要进行判断\",{\"1\":{\"9006\":1}}],[\"每个servlet的实现类都需要进行判断\",{\"1\":{\"8796\":1,\"8823\":1}}],[\"每个用户访问相同资源后\",{\"1\":{\"8402\":1}}],[\"每个实现类中都要定义一次\",{\"1\":{\"8188\":1}}],[\"每个输入始终是一个集合\",{\"1\":{\"7648\":1}}],[\"每个要连接数据库的类\",{\"1\":{\"7207\":1}}],[\"每个类的实例都会记得自己是由哪个\",{\"1\":{\"6978\":1}}],[\"每个类都至少有一个构造器\",{\"1\":{\"3876\":1}}],[\"每个类都要创建日志对象\",{\"1\":{\"884\":1}}],[\"每个数据报的大小限制在64k内\",{\"1\":{\"6739\":1}}],[\"每个数组都有一个属性length指明它的长度\",{\"1\":{\"3508\":1}}],[\"每个整数用四个十六进制位表示\",{\"1\":{\"6667\":1}}],[\"每个对象的的同步方法都是独立的\",{\"1\":{\"5342\":1}}],[\"每个对象的成员变量都是独立的\",{\"1\":{\"5329\":1}}],[\"每个对象都独立的拥有一套类中的非静态属性\",{\"1\":{\"4380\":1}}],[\"每个线程对成员变量的修改都会影响到其他线程\",{\"1\":{\"5272\":1}}],[\"每个线程使用的都是同一个\",{\"1\":{\"5272\":1}}],[\"每个线程都会创建一个对象\",{\"1\":{\"5342\":1}}],[\"每个线程都有自己的名字\",{\"1\":{\"5217\":1}}],[\"每个线程都遍历1~100间的偶数\",{\"1\":{\"5184\":1}}],[\"每个线程都是通过某个特定thread对象的run\",{\"1\":{\"5173\":1}}],[\"每个线程拥有独立的运行栈和程序计数器\",{\"1\":{\"5079\":1}}],[\"每个进程需要多个任务协同完成\",{\"1\":{\"5083\":1}}],[\"每个进程均运行在其专用的且受保护的内存\",{\"1\":{\"5072\":1}}],[\"每个进程之间是独立的\",{\"1\":{\"5072\":1}}],[\"每个季节都有自己的名字\",{\"1\":{\"4871\":1}}],[\"每个元素是person类型\",{\"1\":{\"3659\":1}}],[\"每个一维数组都是默认初始化值null\",{\"1\":{\"3549\":1}}],[\"每个计算机环境不一样\",{\"1\":{\"817\":1}}],[\"每个不同的starter根据功能不同\",{\"1\":{\"416\":1}}],[\"每次端口不同\",{\"1\":{\"10477\":1}}],[\"每次浏览器向服务器请求时\",{\"1\":{\"9667\":1}}],[\"每次请求都是一个新的request对象\",{\"1\":{\"9192\":1}}],[\"每次请求servlet时\",{\"1\":{\"8759\":1}}],[\"每次访问\",{\"1\":{\"8772\":1}}],[\"每次该servlet的url被访问\",{\"1\":{\"8771\":1}}],[\"每次向数据库建立连接的时候都要将\",{\"1\":{\"8219\":1}}],[\"每次循环只是重新为占位符赋值\",{\"1\":{\"8112\":1}}],[\"每次使用都要写方法体\",{\"1\":{\"7423\":1}}],[\"每次暂停的时候\",{\"1\":{\"6528\":1}}],[\"每次写出len个字符\",{\"1\":{\"6287\":1}}],[\"每次写入的字符都是无空格连在一起的\",{\"1\":{\"2099\":1}}],[\"每次只读取一个字节\",{\"1\":{\"6241\":1}}],[\"每次只能有一个线程对lock对象加锁\",{\"1\":{\"5379\":1}}],[\"每次都要强转\",{\"1\":{\"5964\":1}}],[\"每次调用iterator方法\",{\"1\":{\"5599\":1}}],[\"每次执行一次next方法\",{\"1\":{\"2458\":1,\"5581\":1}}],[\"每次测试后改回去\",{\"1\":{\"673\":1}}],[\"每次进行热部署都需要开发者手工操作\",{\"1\":{\"555\":1}}],[\"每次手动删太麻烦\",{\"1\":{\"354\":1}}],[\"每行书写一个数据\",{\"1\":{\"488\":1}}],[\"每行结尾使用冒号结束\",{\"1\":{\"481\":1}}],[\"就有什么账号的权限\",{\"1\":{\"10749\":1}}],[\"就开启了登录认证\",{\"1\":{\"10741\":1}}],[\"就越可能获得多数成员的投票\",{\"1\":{\"10622\":1}}],[\"就越好\",{\"1\":{\"5764\":1}}],[\"就直接从索引返回结果\",{\"1\":{\"10431\":1}}],[\"就直接报错\",{\"1\":{\"3170\":1}}],[\"就像sql数据库一样灵活\",{\"1\":{\"10120\":1}}],[\"就像我们的法律一样\",{\"1\":{\"4481\":1}}],[\"就被建立了\",{\"1\":{\"9654\":1}}],[\"就相当于发布了\",{\"1\":{\"9520\":1}}],[\"就成了一个jar包\",{\"1\":{\"9471\":1}}],[\"就只是声明持久层的接口\",{\"1\":{\"10835\":1}}],[\"就只需要按照如下格式来编写\",{\"1\":{\"9030\":1}}],[\"就只能在方法体内使用此形参\",{\"1\":{\"3989\":1}}],[\"就向数据库要求一个\",{\"1\":{\"8219\":1}}],[\"就修改配置文件\",{\"1\":{\"8078\":1}}],[\"就默认把列名当成别名\",{\"1\":{\"8051\":1}}],[\"就默认方法体种一定有返回值了\",{\"1\":{\"7356\":1}}],[\"就抛异常\",{\"1\":{\"7759\":1}}],[\"就类似于使用\",{\"1\":{\"7545\":1}}],[\"就ok了\",{\"1\":{\"7401\":1}}],[\"就算jdk支持新语法\",{\"1\":{\"7329\":1}}],[\"就算执行完了case匹配的表达式\",{\"1\":{\"3365\":1}}],[\"就实例化并代理哪个类\",{\"1\":{\"7216\":1}}],[\"就确定下来了\",{\"1\":{\"7209\":1}}],[\"就作为class的一个实例\",{\"1\":{\"6969\":1}}],[\"就少了很多值无法用于表示字符\",{\"1\":{\"6426\":1}}],[\"就叫碰撞\",{\"1\":{\"5764\":1}}],[\"就添加失败\",{\"1\":{\"5729\":1}}],[\"就一定不会存在重复的数据\",{\"1\":{\"5728\":1}}],[\"就一定不会放到同一个位置\",{\"1\":{\"5728\":1}}],[\"就唤醒优先级高的那个\",{\"1\":{\"5440\":1}}],[\"就形成了线程的死锁\",{\"1\":{\"5407\":1}}],[\"就值就调用target的run方法\",{\"1\":{\"5268\":1}}],[\"就出抛出内存溢出的错误\",{\"1\":{\"5136\":1}}],[\"就称为\",{\"1\":{\"5767\":1}}],[\"就称为变量\",{\"1\":{\"5126\":1}}],[\"就称为是一个常量\",{\"1\":{\"3982\":1}}],[\"就处于不断变化的动态过程中\",{\"1\":{\"5074\":1}}],[\"就没有任何作用了\",{\"1\":{\"4965\":1}}],[\"就没用了\",{\"1\":{\"4964\":1}}],[\"就意味着该方法覆盖父类的方法\",{\"1\":{\"4965\":1}}],[\"就意味着\",{\"1\":{\"4960\":1}}],[\"就使用value表示\",{\"1\":{\"4936\":1}}],[\"就使用arraylist中重载的\",{\"1\":{\"2534\":1}}],[\"就在控制台输出一行\",{\"1\":{\"6347\":1}}],[\"就在括号内加属性\",{\"1\":{\"4856\":1}}],[\"就在哪个\",{\"1\":{\"3013\":1}}],[\"就绪\",{\"1\":{\"4825\":1,\"5289\":1}}],[\"就职状态\",{\"1\":{\"4823\":1}}],[\"就跳出当前的try\",{\"1\":{\"4738\":1}}],[\"就跳出switch\",{\"1\":{\"3365\":1}}],[\"就进入catch中进行异常的处理\",{\"1\":{\"4738\":1}}],[\"就进行向下转型\",{\"1\":{\"4185\":1}}],[\"就考虑到错误的检测\",{\"1\":{\"4676\":1}}],[\"就采用数据类型的默认值\",{\"1\":{\"4642\":1}}],[\"就执行consumer接口的实现代码\",{\"1\":{\"7755\":1}}],[\"就执行中间操作链\",{\"1\":{\"7558\":1}}],[\"就执行一次非静态代码块\",{\"1\":{\"4564\":1}}],[\"就执行哪个子类\",{\"1\":{\"4469\":1}}],[\"就能方便地进行调用\",{\"1\":{\"9487\":1}}],[\"就能操作所有数据库\",{\"1\":{\"4518\":1}}],[\"就能编译\",{\"1\":{\"3412\":1}}],[\"就自动去父类中寻找\",{\"1\":{\"4087\":1}}],[\"就代表了web目录下\",{\"1\":{\"9258\":1}}],[\"就代表了一个运行时类的属性\",{\"1\":{\"2215\":1}}],[\"就代表一层文件目录\",{\"1\":{\"3931\":1}}],[\"就用this\",{\"1\":{\"3907\":1}}],[\"就优先调用\",{\"1\":{\"3800\":1}}],[\"就将各个国家的文字用数字来表示\",{\"1\":{\"6414\":1}}],[\"就将栈中储存的数组第一个元素的地址替换掉\",{\"1\":{\"3526\":1}}],[\"就将数组在栈中储存的k=v出栈\",{\"1\":{\"3526\":1}}],[\"就将赋的值替换掉元素的默认值\",{\"1\":{\"3525\":1}}],[\"就获取了父类中声明的属性和方法\",{\"1\":{\"4109\":1}}],[\"就获取了直接父类以及所有间接父类中声明的属性和方法\",{\"1\":{\"4020\":1}}],[\"就获取默认值\",{\"1\":{\"3506\":1}}],[\"就获取绝对路径\",{\"1\":{\"1952\":1}}],[\"就构成了嵌套循环\",{\"1\":{\"3446\":1}}],[\"就行\",{\"1\":{\"3409\":1}}],[\"就行了\",{\"1\":{\"3328\":1}}],[\"就补1\",{\"1\":{\"3308\":1}}],[\"就无法获取jseesionid了\",{\"1\":{\"9771\":1}}],[\"就无法实现多次请求之间的数据共享\",{\"1\":{\"9667\":1}}],[\"就无法通过request对象进行共享数据\",{\"1\":{\"9153\":1}}],[\"就无法回滚了\",{\"1\":{\"8140\":1}}],[\"就无法直接使用map了\",{\"1\":{\"7665\":1}}],[\"就无法直接跳转到目标代码了\",{\"1\":{\"2945\":1}}],[\"就无法访问它了\",{\"1\":{\"5358\":1}}],[\"就无法进行创建\",{\"1\":{\"1998\":1,\"6143\":1}}],[\"就看谁在上面\",{\"1\":{\"2860\":1}}],[\"就看用什么方法创建\",{\"1\":{\"2000\":1,\"6145\":1}}],[\"就足以具有转义的作用\",{\"1\":{\"2671\":1}}],[\"就接受object类\",{\"1\":{\"2527\":1}}],[\"就他有顺序\",{\"1\":{\"2483\":1,\"2486\":1,\"2489\":1,\"2494\":1}}],[\"就他用顺序\",{\"1\":{\"2479\":1}}],[\"就返回null\",{\"1\":{\"2600\":1}}],[\"就返回false\",{\"1\":{\"2562\":1}}],[\"就返回true\",{\"1\":{\"2425\":1}}],[\"就返回空数组\",{\"1\":{\"1970\":1,\"1974\":1}}],[\"就必须在关闭连接前\",{\"1\":{\"8143\":1}}],[\"就必须指定舍入策略\",{\"1\":{\"1906\":1}}],[\"就必须指定参数3\",{\"1\":{\"1897\":1}}],[\"就必须显示的指定舍入策略\",{\"1\":{\"1905\":1}}],[\"就次方\",{\"1\":{\"1830\":1}}],[\"就按名字字母进行排序\",{\"1\":{\"1767\":1}}],[\"就需要flush一次\",{\"1\":{\"6545\":1,\"6551\":1}}],[\"就需要定义多个不同泛型类型的遍历方法\",{\"1\":{\"6077\":1}}],[\"就需要声明在finally中\",{\"1\":{\"4746\":1}}],[\"就需要在类中对tostring进行自定义重写\",{\"1\":{\"4258\":1}}],[\"就需要在集合外定义comparator接口的方法或在集合内实现\",{\"1\":{\"1738\":1}}],[\"就需要创建很多个除了数据类型\",{\"1\":{\"4135\":1}}],[\"就需要加个l告诉java分配8个byte的内存\",{\"1\":{\"3109\":1}}],[\"就需要先定义变量类型\",{\"1\":{\"3107\":1}}],[\"就需要重新编译\",{\"1\":{\"2892\":1}}],[\"就需要手动输入空格或换行符\",{\"1\":{\"2099\":1}}],[\"就需要实现comparable接口\",{\"1\":{\"1746\":1}}],[\"就需要比较对象的大小\",{\"1\":{\"1730\":1}}],[\"就需要处理异常\",{\"1\":{\"1506\":1}}],[\"就需要进行异常处理\",{\"1\":{\"1502\":1}}],[\"就需要额外的配置\",{\"1\":{\"1226\":1}}],[\"就需要考虑优先级了\",{\"1\":{\"468\":1}}],[\"就是以replicaset的方式连接mongodb\",{\"1\":{\"10813\":1}}],[\"就是刚新加入的仲裁节点\",{\"1\":{\"10582\":1}}],[\"就是多了个replsetname\",{\"1\":{\"10496\":1}}],[\"就是主节点\",{\"1\":{\"10455\":1,\"10558\":1}}],[\"就是compass内置的\",{\"1\":{\"10192\":1}}],[\"就是collection接口中方法的使用\",{\"1\":{\"5771\":1}}],[\"就是\",{\"1\":{\"9579\":2}}],[\"就是文件的名称\",{\"1\":{\"8482\":1}}],[\"就是为数据库连接建立一个\",{\"1\":{\"8227\":1}}],[\"就是为容器而生\",{\"1\":{\"5569\":1}}],[\"就是二进制数据\",{\"1\":{\"8064\":1}}],[\"就是servlet\",{\"1\":{\"8677\":1}}],[\"就是system\",{\"1\":{\"7464\":1}}],[\"就是springboot3了\",{\"1\":{\"1124\":1}}],[\"就是上章写的在动态代理里写一些通用的代码\",{\"1\":{\"7300\":1}}],[\"就是代理的意义\",{\"1\":{\"7247\":1}}],[\"就是被代理类user\",{\"1\":{\"7201\":1}}],[\"就是动态性\",{\"1\":{\"6946\":1}}],[\"就是把上面两个方法结合起来\",{\"1\":{\"6821\":1}}],[\"就是accept\",{\"1\":{\"6816\":1}}],[\"就是追加写\",{\"1\":{\"6523\":1}}],[\"就是允许在定义类\",{\"1\":{\"5946\":1}}],[\"就是使用comparetor接口进行排序\",{\"1\":{\"5792\":1}}],[\"就是使用的collection中的addall\",{\"1\":{\"2540\":1}}],[\"就是使用的collection的add\",{\"1\":{\"2533\":1}}],[\"就是取代数组\",{\"1\":{\"5539\":1}}],[\"就是内存\",{\"1\":{\"5116\":1}}],[\"就是对jdbc中一些列基本常见的操作的封装\",{\"1\":{\"8167\":1}}],[\"就是对数据进行操作\",{\"1\":{\"5113\":1}}],[\"就是对象的多态性\",{\"1\":{\"4123\":1}}],[\"就是支持多线程的\",{\"1\":{\"5078\":1}}],[\"就是来指定\",{\"1\":{\"4987\":1}}],[\"就是指定\",{\"1\":{\"4978\":1}}],[\"就是不同\",{\"1\":{\"4963\":1}}],[\"就是方法的默认实现\",{\"1\":{\"4541\":1}}],[\"就是接口可以直接掉用的方法\",{\"1\":{\"4537\":1}}],[\"就是很典型的单例模式\",{\"1\":{\"4439\":1}}],[\"就是采取一定的方法保证在整个的软件系统中\",{\"1\":{\"4416\":1}}],[\"就是静态方法\",{\"1\":{\"4391\":1}}],[\"就是在内存上进行的二进制bit位的运算\",{\"1\":{\"3301\":1}}],[\"就是从main方法开始运行的\",{\"1\":{\"2906\":1}}],[\"就是集合的元素\",{\"1\":{\"2390\":1}}],[\"就是构造器参数所属的class\",{\"1\":{\"2180\":1,\"7064\":1}}],[\"就是比较器里的自然排序接口\",{\"1\":{\"1742\":1}}],[\"就是mysql驱动升级到8以后要求强制配置时区\",{\"1\":{\"994\":1}}],[\"就不用配置artifacts\",{\"1\":{\"8542\":1}}],[\"就不用在单独安装jre了\",{\"1\":{\"2847\":1}}],[\"就不再执行\",{\"1\":{\"4771\":1}}],[\"就不需要导入了\",{\"1\":{\"3960\":1}}],[\"就不需要使用return\",{\"1\":{\"3723\":1}}],[\"就不能再被调用\",{\"1\":{\"4759\":1}}],[\"就不能再调用next方法了\",{\"1\":{\"2464\":1,\"5584\":1}}],[\"就不能修改\",{\"1\":{\"3471\":1}}],[\"就不存在整合的概念了\",{\"1\":{\"961\":1}}],[\"就不会开启tomcat了\",{\"1\":{\"447\":1}}],[\"就要将输入写入数据库一次\",{\"1\":{\"8124\":1}}],[\"就要将日志写入文件\",{\"1\":{\"927\":1}}],[\"就要executeupdate一次\",{\"1\":{\"8116\":1}}],[\"就要创建一次sql\",{\"1\":{\"8108\":1}}],[\"就要用string类\",{\"1\":{\"7457\":1}}],[\"就要用到属性校验了\",{\"1\":{\"637\":1}}],[\"就要通过invoke方法的参数\",{\"1\":{\"7253\":1}}],[\"就要跟之前添加的每一个数据进行equals比对\",{\"1\":{\"5725\":1}}],[\"就要对对象进行存储\",{\"1\":{\"5521\":1}}],[\"就要吧注解的成员变量写成数组的形式\",{\"1\":{\"5014\":1}}],[\"就要手动的加上super\",{\"1\":{\"4088\":1}}],[\"就要针对性的结束进程了\",{\"1\":{\"745\":1}}],[\"就会开始重新选举\",{\"1\":{\"10627\":1}}],[\"就会携带cookie\",{\"1\":{\"9768\":1}}],[\"就会被\",{\"1\":{\"9319\":1}}],[\"就会被抛出\",{\"1\":{\"4771\":1}}],[\"就会调用事先准备好的方法执行操作\",{\"1\":{\"9318\":1}}],[\"就会执行放行前的逻辑\",{\"1\":{\"9275\":1}}],[\"就会执行一次\",{\"1\":{\"3740\":1}}],[\"就会给浏览器响应一个302的状态码+location的一个访问资源b的路径\",{\"1\":{\"9134\":1}}],[\"就会引发请求静态资源的时候没有走默认的而是走了自定义的servlet类\",{\"1\":{\"8862\":1}}],[\"就会自动的调用如下的方法\",{\"1\":{\"7279\":1}}],[\"就会唤醒所有等待的线程\",{\"1\":{\"5441\":1}}],[\"就会唤醒被wait的一个线程\",{\"1\":{\"5440\":1}}],[\"就会走完所有循环\",{\"1\":{\"5327\":1}}],[\"就会出现多打印票的状况\",{\"1\":{\"5304\":1}}],[\"就会出现打印的是同一张票的情况\",{\"1\":{\"5303\":1}}],[\"就会出现乱码\",{\"1\":{\"3132\":1}}],[\"就会按顺序加载这些内容\",{\"1\":{\"5108\":1}}],[\"就会生成一个对应异常类的对象\",{\"1\":{\"4737\":1}}],[\"就会在后台自动创建一个对应异常类的实例对象并抛出\",{\"1\":{\"4690\":1}}],[\"就会在异常代码处生成一个对应异常类的对象\",{\"1\":{\"4687\":1}}],[\"就会转换为true\",{\"1\":{\"4276\":1}}],[\"就会加载所有父类中声明的属性\",{\"1\":{\"4110\":1}}],[\"就会变成负数\",{\"1\":{\"3307\":1}}],[\"就会报indexoutofboundsexception\",{\"1\":{\"2560\":1}}],[\"就会报异常\",{\"1\":{\"2548\":1}}],[\"就会报错\",{\"1\":{\"670\":1,\"4103\":1}}],[\"就会产生一个iterator迭代器对象\",{\"1\":{\"2456\":1}}],[\"就会取到错误的字符\",{\"1\":{\"2055\":1,\"6263\":1}}],[\"就会导入对应的starter\",{\"1\":{\"410\":1}}],[\"就命令tomcat重新加载开发的文件就ok了\",{\"1\":{\"536\":1}}],[\"就可以实现一次会话中多次请求之间的数据共享了\",{\"1\":{\"9747\":1}}],[\"就可以实现session域了\",{\"1\":{\"9194\":1}}],[\"就可以启动了\",{\"1\":{\"8631\":1}}],[\"就可以看到页面了\",{\"1\":{\"8623\":1}}],[\"就可以再创建一个tomcat模板了\",{\"1\":{\"8610\":1}}],[\"就可以采用构造器引用\",{\"1\":{\"7500\":1}}],[\"就可以认为告诉了表达式要用后面的方法替代接口中的方法\",{\"1\":{\"7453\":1}}],[\"就可以恢复成原来的java对象\",{\"1\":{\"6538\":1}}],[\"就可以确定他的数据类型了\",{\"1\":{\"5940\":1}}],[\"就可以解决该问题\",{\"1\":{\"5108\":1}}],[\"就可以抛出到调用处进行处理\",{\"1\":{\"4802\":1}}],[\"就可以用来处理get和post请求的业务逻辑\",{\"1\":{\"8818\":1}}],[\"就可以用\",{\"1\":{\"4731\":1}}],[\"就可以只修改getxxx内的代码逻辑即可\",{\"1\":{\"4588\":1}}],[\"就可以得到多重继承的效果\",{\"1\":{\"4476\":1}}],[\"就可以被继承\",{\"1\":{\"4318\":1}}],[\"就可以调用类中的方法\",{\"1\":{\"4265\":1}}],[\"就可以调用实例的compareto方法进行比较了\",{\"1\":{\"1747\":1}}],[\"就可以通过调用这些方法来实现\",{\"1\":{\"4038\":1}}],[\"就可以直接连接上\",{\"1\":{\"10189\":1}}],[\"就可以直接实例化包中其他类\",{\"1\":{\"3924\":1}}],[\"就可以直接执行了\",{\"1\":{\"696\":1}}],[\"就可以使用代理对象取代源对象了\",{\"1\":{\"7240\":1}}],[\"就可以使用\",{\"1\":{\"3635\":1}}],[\"就可以使用springboot进行开发了\",{\"1\":{\"369\":1}}],[\"就可以为数组元素赋值了\",{\"1\":{\"3552\":1}}],[\"就可以动态获取配置的数据了\",{\"1\":{\"591\":1}}],[\"就可以查看该文件\",{\"1\":{\"393\":1}}],[\"ⅲ\",{\"0\":{\"407\":1,\"636\":1,\"676\":1,\"802\":1,\"844\":1,\"908\":1,\"1097\":1,\"1152\":1,\"1439\":1,\"1664\":1,\"1774\":1,\"1863\":1,\"1994\":1,\"2115\":1,\"2182\":1,\"2470\":1,\"2650\":1,\"2761\":1,\"2941\":1,\"3055\":1,\"3111\":1,\"3276\":1,\"3378\":1,\"3531\":1,\"3654\":1,\"3755\":1,\"3940\":1,\"4069\":1,\"4299\":1,\"4389\":1,\"4521\":1,\"4589\":1,\"4804\":1,\"4944\":1,\"5110\":1,\"5202\":1,\"5333\":1,\"5679\":1,\"5896\":1,\"6265\":1,\"6335\":1,\"6399\":1,\"6461\":1,\"6855\":1,\"7095\":1,\"7499\":1,\"7594\":1,\"7770\":1,\"7849\":1,\"7967\":1,\"8202\":1,\"8456\":1,\"8571\":1,\"8729\":1,\"8785\":1,\"8865\":1,\"8917\":1,\"8973\":1,\"9088\":1,\"9163\":1,\"9441\":1,\"9518\":1,\"9576\":1,\"9740\":1,\"10115\":1,\"10168\":1,\"10297\":1,\"10341\":1,\"10513\":1,\"10610\":1,\"10751\":1,\"10801\":1}}],[\"v数据\",{\"1\":{\"9246\":1}}],[\"v字母表示\",{\"1\":{\"5987\":1}}],[\"v键值对\",{\"1\":{\"5534\":1}}],[\"votingmemberscount\",{\"1\":{\"10554\":1}}],[\"votes\",{\"1\":{\"10541\":1,\"10622\":1}}],[\"vocation\",{\"1\":{\"4823\":1}}],[\"void\",{\"1\":{\"425\":1,\"430\":1,\"584\":1,\"656\":1,\"663\":1,\"781\":3,\"991\":1,\"1016\":2,\"1029\":2,\"1038\":1,\"1224\":5,\"1241\":1,\"1248\":1,\"1252\":1,\"1256\":1,\"1376\":1,\"2062\":1,\"2098\":5,\"2105\":3,\"2109\":1,\"2114\":1,\"2211\":1,\"2244\":1,\"2247\":1,\"2266\":1,\"2307\":1,\"2310\":1,\"2362\":1,\"2413\":1,\"2469\":1,\"2484\":1,\"2487\":1,\"2492\":2,\"2495\":1,\"2512\":1,\"2537\":1,\"2592\":1,\"2598\":1,\"2633\":1,\"2882\":1,\"3405\":1,\"3414\":1,\"3457\":1,\"3630\":2,\"3636\":1,\"3664\":6,\"3738\":1,\"3747\":3,\"3767\":3,\"3782\":2,\"3787\":1,\"3794\":1,\"3803\":1,\"3816\":1,\"3821\":3,\"3980\":1,\"3987\":1,\"3990\":1,\"4039\":2,\"4050\":1,\"4061\":3,\"4077\":1,\"4080\":1,\"4083\":1,\"4142\":2,\"4164\":3,\"4329\":1,\"4356\":3,\"4358\":4,\"4451\":1,\"4459\":3,\"4466\":2,\"4469\":5,\"4491\":2,\"4513\":9,\"4523\":3,\"4534\":1,\"4670\":1,\"4734\":1,\"4753\":1,\"4777\":3,\"4803\":2,\"4872\":4,\"4943\":1,\"5030\":1,\"5060\":4,\"5185\":2,\"5219\":2,\"5221\":2,\"5253\":2,\"5263\":2,\"5310\":2,\"5314\":1,\"5322\":2,\"5338\":1,\"5345\":3,\"5384\":1,\"5396\":2,\"5426\":3,\"5464\":2,\"5486\":1,\"5502\":1,\"5504\":1,\"5517\":2,\"5999\":1,\"6001\":1,\"6078\":1,\"6081\":1,\"6098\":1,\"6251\":1,\"6254\":1,\"6285\":1,\"6287\":1,\"6306\":1,\"6353\":1,\"6411\":1,\"6443\":2,\"6477\":1,\"6501\":1,\"6619\":1,\"6620\":1,\"6780\":1,\"6781\":1,\"6782\":1,\"6803\":1,\"6819\":1,\"6848\":1,\"6849\":1,\"6850\":1,\"6949\":1,\"6956\":2,\"6958\":1,\"6960\":1,\"6962\":1,\"6988\":1,\"6989\":2,\"7114\":1,\"7159\":1,\"7185\":1,\"7225\":1,\"7227\":1,\"7229\":1,\"7231\":1,\"7279\":1,\"7307\":2,\"7373\":1,\"7377\":1,\"7418\":1,\"7430\":1,\"7465\":1,\"7466\":1,\"7604\":1,\"7756\":1,\"7852\":1,\"7862\":1,\"7865\":1,\"7873\":1,\"7956\":1,\"7970\":1,\"7978\":1,\"7980\":1,\"7989\":1,\"8037\":1,\"8084\":1,\"8089\":1,\"8121\":1,\"8126\":1,\"8146\":1,\"8148\":1,\"8162\":1,\"8205\":3,\"8207\":3,\"8210\":7,\"8260\":1,\"8326\":1,\"8340\":1,\"8341\":1,\"8342\":1,\"8343\":1,\"8344\":1,\"8345\":1,\"8381\":1,\"8383\":1,\"8385\":1,\"8387\":1,\"8389\":1,\"8391\":1,\"8704\":1,\"8764\":3,\"8768\":2,\"8772\":2,\"8777\":2,\"8784\":1,\"8809\":2,\"8817\":3,\"8912\":1,\"8944\":2,\"8951\":1,\"8955\":1,\"8990\":1,\"9004\":2,\"9027\":2,\"9031\":2,\"9062\":1,\"9065\":1,\"9079\":1,\"9119\":2,\"9124\":2,\"9143\":1,\"9145\":1,\"9220\":1,\"9234\":1,\"9249\":1,\"9262\":1,\"9270\":3,\"9449\":1,\"9450\":1,\"9452\":2,\"9684\":1,\"9693\":1,\"9695\":1,\"9750\":1,\"9753\":1,\"9757\":1}}],[\"viktor\",{\"1\":{\"6700\":1}}],[\"view\",{\"0\":{\"4606\":1},\"1\":{\"4607\":1,\"4608\":1,\"9462\":1,\"9541\":1}}],[\"virtal\",{\"1\":{\"2819\":1}}],[\"v>>\",{\"1\":{\"2624\":1}}],[\"v>\",{\"1\":{\"2518\":9,\"2574\":1,\"2592\":1,\"5990\":1}}],[\"vender\",{\"1\":{\"10149\":1}}],[\"very\",{\"1\":{\"2962\":1}}],[\"version=\",{\"1\":{\"952\":1,\"9608\":1,\"9613\":1,\"9635\":1,\"9642\":1}}],[\"version\",{\"1\":{\"397\":4,\"734\":5,\"1177\":4,\"2314\":2,\"2871\":1,\"2877\":1,\"2937\":1,\"2959\":1,\"2962\":1,\"9500\":1,\"9611\":1,\"9895\":4,\"10541\":1,\"10722\":1}}],[\"version>8\",{\"1\":{\"1177\":1}}],[\"version>3\",{\"1\":{\"397\":1,\"1177\":2}}],[\"version>17<\",{\"1\":{\"1177\":1}}],[\"version>1\",{\"1\":{\"397\":2,\"1177\":1}}],[\"version>2\",{\"1\":{\"397\":2}}],[\"version>5\",{\"1\":{\"397\":1}}],[\"version>\",{\"1\":{\"347\":1,\"391\":1,\"394\":1,\"397\":11,\"412\":5,\"967\":1,\"978\":1,\"1005\":2,\"1142\":1,\"1145\":1,\"1148\":1,\"1151\":1,\"1164\":1,\"1169\":1,\"1172\":2,\"1177\":10,\"1361\":5,\"9818\":1,\"10829\":1}}],[\"vector虽然是线程安全的\",{\"1\":{\"5676\":1}}],[\"vector已经被放弃了\",{\"1\":{\"5675\":1}}],[\"vector\",{\"0\":{\"5640\":1,\"5673\":1},\"1\":{\"2399\":1,\"5545\":1,\"5632\":1}}],[\"v2\",{\"1\":{\"1763\":2}}],[\"v1\",{\"1\":{\"1763\":2}}],[\"vue\",{\"1\":{\"1390\":1}}],[\"var2\",{\"1\":{\"8764\":1,\"8772\":1}}],[\"var1\",{\"1\":{\"8764\":2,\"8772\":1}}],[\"variable\",{\"1\":{\"3790\":1,\"4961\":1,\"4989\":1,\"4996\":1,\"5043\":1}}],[\"varargs\",{\"1\":{\"3790\":1}}],[\"var\",{\"1\":{\"3005\":1,\"3008\":2,\"3011\":1,\"7918\":1}}],[\"varchar\",{\"1\":{\"1208\":3,\"1334\":6,\"1336\":1,\"1338\":4,\"1340\":4,\"1342\":3,\"1344\":2,\"1346\":5,\"1348\":10,\"1350\":3,\"1352\":6,\"1354\":3,\"7916\":1,\"8105\":1}}],[\"van\",{\"1\":{\"1515\":2,\"1529\":1,\"2705\":1,\"7373\":1}}],[\"val\",{\"1\":{\"1029\":1,\"1937\":1,\"2387\":1,\"2621\":3}}],[\"validationquery\",{\"1\":{\"8298\":1}}],[\"validation<\",{\"1\":{\"642\":1}}],[\"validated开启校验功能\",{\"1\":{\"644\":1}}],[\"validated\",{\"0\":{\"643\":1},\"1\":{\"645\":1,\"647\":1}}],[\"validator<\",{\"1\":{\"642\":2}}],[\"valid\",{\"1\":{\"624\":1}}],[\"valueunbound\",{\"1\":{\"9421\":1}}],[\"valuebound\",{\"1\":{\"9419\":1}}],[\"value和urlpatterns是等效的\",{\"1\":{\"8831\":1}}],[\"value就是对应的值\",{\"1\":{\"8376\":1}}],[\"value2\",{\"1\":{\"5862\":1}}],[\"value1和原来的数据以链表的方式存储\",{\"1\":{\"5866\":1}}],[\"value1添加成功\",{\"1\":{\"5859\":1,\"5861\":1,\"5863\":1}}],[\"value1\",{\"1\":{\"5858\":1}}],[\"value的储存特点\",{\"0\":{\"5844\":1}}],[\"value的值时变量定义的值\",{\"1\":{\"952\":1}}],[\"value构成一个entry\",{\"1\":{\"5821\":1}}],[\"value所在的类要重写equals\",{\"1\":{\"5849\":1}}],[\"value所在的类要重写\",{\"1\":{\"5819\":1}}],[\"value属性可以省略不写\",{\"1\":{\"4936\":1}}],[\"value用于存储字符串数据\",{\"1\":{\"3219\":1}}],[\"values\",{\"0\":{\"2619\":1},\"1\":{\"2621\":2,\"4863\":1,\"5060\":2,\"7583\":1,\"7947\":1,\"7952\":1,\"7970\":1,\"8084\":1,\"8109\":1,\"8113\":1,\"8121\":1,\"8126\":1,\"8207\":1,\"8381\":1,\"9027\":2}}],[\"value对的数据\",{\"1\":{\"5806\":1}}],[\"value对的个数\",{\"1\":{\"2608\":1}}],[\"value对\",{\"1\":{\"2594\":1,\"5548\":1}}],[\"value对存放到当前map中\",{\"1\":{\"2591\":1}}],[\"value添加到\",{\"1\":{\"2587\":1}}],[\"value也是由set组成的\",{\"1\":{\"2584\":1}}],[\"value进行遍历\",{\"1\":{\"2582\":1}}],[\"valueof的效果是相反的\",{\"1\":{\"1858\":1}}],[\"valueof效果一样\",{\"1\":{\"1855\":1}}],[\"valueof根据参数数据类型的不同\",{\"1\":{\"1489\":1}}],[\"valueof\",{\"0\":{\"1487\":1,\"1857\":1},\"1\":{\"1491\":4,\"1856\":1,\"1859\":3,\"1881\":1,\"4292\":2,\"4864\":1}}],[\"valueoperations<string\",{\"1\":{\"1038\":1}}],[\"valueopeartions\",{\"1\":{\"1029\":1}}],[\"value=hello\",{\"1\":{\"7108\":1}}],[\"value=\",{\"1\":{\"952\":2,\"4941\":1,\"4943\":1,\"5011\":2,\"5015\":2,\"5048\":1,\"5060\":4,\"9025\":2,\"9295\":2,\"9298\":1,\"9642\":5}}],[\"value\",{\"0\":{\"5044\":1},\"1\":{\"499\":1,\"500\":1,\"501\":1,\"502\":1,\"503\":4,\"618\":1,\"647\":2,\"1441\":1,\"1556\":2,\"1559\":3,\"1763\":6,\"2244\":1,\"2584\":1,\"2585\":1,\"2589\":1,\"2606\":1,\"2974\":1,\"4918\":1,\"4981\":1,\"4988\":1,\"5015\":1,\"5043\":1,\"5060\":2,\"5798\":1,\"5799\":1,\"5802\":2,\"5820\":2,\"5831\":2,\"5833\":1,\"5840\":1,\"5841\":1,\"5848\":1,\"5850\":1,\"5899\":1,\"5904\":2,\"5905\":1,\"5909\":1,\"5924\":1,\"5970\":1,\"7159\":1,\"8837\":1,\"8944\":1,\"8946\":1,\"9027\":2,\"9065\":1,\"9207\":1,\"9246\":1,\"9681\":2,\"9689\":1,\"9690\":1,\"9695\":1,\"9699\":1,\"9726\":4,\"9753\":1,\"10078\":1,\"10351\":10}}],[\"value读取单个数据\",{\"1\":{\"498\":1}}],[\"value读配置项即可\",{\"1\":{\"494\":1}}],[\"v\",{\"1\":{\"463\":1,\"1494\":1,\"1850\":2,\"2589\":2,\"2595\":1,\"2601\":1,\"2623\":1,\"3525\":1,\"5969\":1,\"9248\":1,\"9541\":1,\"9579\":1,\"10379\":1,\"10394\":2,\"10399\":3}}],[\"v格式\",{\"1\":{\"462\":1}}],[\"v由springboot提供\",{\"1\":{\"405\":1}}],[\"只连接一个节点\",{\"0\":{\"10817\":1}}],[\"只用来作为用户权限的管理\",{\"1\":{\"10713\":1}}],[\"只具有投票选举作用\",{\"1\":{\"10457\":1}}],[\"只存储根词\",{\"1\":{\"10372\":1}}],[\"只显示指定的字段\",{\"1\":{\"10316\":1}}],[\"只让能够识别数字签名的用户使用里面的东西\",{\"1\":{\"9487\":1}}],[\"只拦截具体的某个路径的访问\",{\"1\":{\"9286\":1}}],[\"只将service\",{\"1\":{\"8793\":1}}],[\"只执行一次\",{\"1\":{\"8754\":1,\"8766\":1}}],[\"只会影响第一个访问的人而已\",{\"1\":{\"8749\":1}}],[\"只支持insert语句\",{\"1\":{\"8358\":1,\"8362\":1}}],[\"只支持数值类型\",{\"1\":{\"3301\":1}}],[\"只考虑使用配置文件获取druid连接池的方法\",{\"1\":{\"8259\":1}}],[\"只关闭了两个资源\",{\"1\":{\"8039\":1}}],[\"只加载驱动即可\",{\"1\":{\"7865\":1}}],[\"只进行驱动的加载即可\",{\"1\":{\"7864\":1}}],[\"只获取前n个数据\",{\"1\":{\"7622\":1}}],[\"只包含一个抽象方法的接口\",{\"1\":{\"7396\":1}}],[\"只保留方法体\",{\"1\":{\"7352\":1}}],[\"只返回泛型\",{\"1\":{\"7136\":1}}],[\"只读\",{\"1\":{\"6513\":1}}],[\"只需手动解决post乱码问题即可\",{\"1\":{\"9035\":1}}],[\"只需从\",{\"1\":{\"8227\":1}}],[\"只需new\",{\"1\":{\"5270\":1}}],[\"只需要在主节点上添加用户\",{\"1\":{\"10765\":1}}],[\"只需要去掉用doget方法即可\",{\"1\":{\"9003\":1}}],[\"只需要继承myhttpservlet\",{\"1\":{\"8818\":1}}],[\"只需要继承basemapper并传入实体类\",{\"1\":{\"1010\":1}}],[\"只需要预编译的时候校验一次sql语句\",{\"1\":{\"7901\":1}}],[\"只需要使用定义好的class的方法\",{\"1\":{\"7067\":1}}],[\"只需要注意前两种\",{\"1\":{\"6507\":1}}],[\"只需要运行java程序可以下载这个\",{\"1\":{\"2844\":1}}],[\"只需要对controller层做异常处理即可\",{\"1\":{\"1289\":1}}],[\"只需要配置数据库连接信息即可\",{\"1\":{\"980\":1}}],[\"只需要添加一个坐标此提醒就消失了\",{\"1\":{\"613\":1}}],[\"只需要重新加载正则开发的文件就可以了\",{\"1\":{\"536\":1}}],[\"只使用单个线程先后完成多个任务\",{\"1\":{\"5098\":1}}],[\"只捕获一次\",{\"1\":{\"4738\":1}}],[\"只可能存储两类值\",{\"1\":{\"4649\":1}}],[\"只掌握一套连接数据库的方法\",{\"1\":{\"4518\":1}}],[\"只比较值\",{\"1\":{\"4227\":1}}],[\"只适用于方法\",{\"1\":{\"4133\":1}}],[\"只对集合内元素类型统一有要求\",{\"1\":{\"6084\":1}}],[\"只对外公开简单的接口\",{\"1\":{\"3813\":1}}],[\"只对本身非质数的自然数是有效的\",{\"1\":{\"3457\":1}}],[\"只要是\",{\"1\":{\"8847\":1}}],[\"只要端口号不同就可以\",{\"1\":{\"8607\":1}}],[\"只要language\",{\"1\":{\"7329\":1}}],[\"只要它符合uri的语法规则\",{\"1\":{\"6913\":1}}],[\"只要它们的参数个数或者参数类型不同即可\",{\"1\":{\"3757\":1}}],[\"只要关闭最外层流即可\",{\"1\":{\"6318\":1}}],[\"只要该位置没有其他数据\",{\"1\":{\"5728\":1}}],[\"只要x和y内容一直不变\",{\"1\":{\"4239\":1}}],[\"只要继承那个类即可\",{\"1\":{\"3999\":1}}],[\"只要用package设置了包名\",{\"1\":{\"3924\":1}}],[\"只要这个表达式的结果是一个值\",{\"1\":{\"3722\":1}}],[\"只要有两个\",{\"1\":{\"3412\":1}}],[\"只在局部作用域有效的变量\",{\"1\":{\"3678\":1}}],[\"只规定外层长度\",{\"1\":{\"3550\":1}}],[\"只为数组本身指定长度\",{\"1\":{\"3547\":1}}],[\"只相当于外层循环循环体执行了一次\",{\"1\":{\"3448\":1}}],[\"只声明\",{\"0\":{\"3003\":1}}],[\"只写类名\",{\"1\":{\"2947\":1}}],[\"只输出数据\",{\"1\":{\"2913\":1}}],[\"只有证书相同的实例彼此才可以访问\",{\"1\":{\"10763\":1}}],[\"只有在特定环境下才能使用\",{\"1\":{\"10272\":1}}],[\"只有在外部类或static的成员内部类中才可声明static成员\",{\"1\":{\"4321\":1}}],[\"只有某些标签才是有意义的\",{\"1\":{\"9623\":1}}],[\"只有某平台提供了对应的java虚拟机\",{\"1\":{\"2821\":1}}],[\"只有servlet内部转发的请求\",{\"1\":{\"9291\":1}}],[\"只有浏览器直接请求的资源\",{\"1\":{\"9290\":1}}],[\"只有访问index\",{\"1\":{\"9282\":1}}],[\"只有服务器正常关闭时\",{\"1\":{\"8776\":1}}],[\"只有普通的build打包\",{\"1\":{\"8636\":1}}],[\"只有一句方法体\",{\"1\":{\"7355\":1,\"7356\":1}}],[\"只有一个属性可以省略urlpatterns\",{\"1\":{\"8834\":1}}],[\"只有一个项目\",{\"1\":{\"8589\":1}}],[\"只有一个参数\",{\"1\":{\"7497\":1}}],[\"只有一个参数可以省略\",{\"1\":{\"7354\":1}}],[\"只有一个方法的接口\",{\"1\":{\"7343\":1}}],[\"只有一个成员\",{\"1\":{\"4936\":1}}],[\"只有一个level属性\",{\"1\":{\"952\":1}}],[\"只有函数式接口可以这么用\",{\"1\":{\"7342\":1}}],[\"只有真正声明这个域的类才会被初始化\",{\"1\":{\"7029\":1}}],[\"只有遇到换行符\",{\"1\":{\"6346\":1}}],[\"只有释放了\",{\"1\":{\"5432\":1}}],[\"只有通过new关键字才会产生出对象\",{\"1\":{\"4364\":1}}],[\"只有等到方法调用的那一刻\",{\"1\":{\"4158\":1}}],[\"只有循环条件和循环体也能编译\",{\"1\":{\"3412\":1}}],[\"只有\",{\"1\":{\"2732\":1}}],[\"只有第一个数字没替换了\",{\"1\":{\"2697\":1}}],[\"只有与正则匹配的内容才可以\",{\"1\":{\"2330\":1,\"2787\":1}}],[\"只能以direct的形式连接副本集的主节点\",{\"1\":{\"10805\":1}}],[\"只能操作article库\",{\"1\":{\"10749\":1}}],[\"只能操作普通文本文件\",{\"1\":{\"6233\":1}}],[\"只能删除非\",{\"1\":{\"10413\":1}}],[\"只能删除空的目录\",{\"1\":{\"2021\":1}}],[\"只能查看有权限的数据库\",{\"1\":{\"10204\":1}}],[\"只能约束格式\",{\"1\":{\"9626\":1}}],[\"只能做初步的筛选和使用\",{\"1\":{\"9237\":1}}],[\"只能转发到当前服务器的内部资源\",{\"1\":{\"9127\":1}}],[\"只能启动一个tomcat\",{\"1\":{\"8435\":1}}],[\"只能继承和实现\",{\"1\":{\"8178\":1}}],[\"只能添加null\",{\"1\":{\"6070\":1}}],[\"只能有一个线程参与\",{\"1\":{\"5374\":1}}],[\"只能有一个带public的\",{\"1\":{\"3629\":1}}],[\"只能让一个线程都执行完\",{\"1\":{\"5308\":1,\"5362\":1}}],[\"只能同时复制4个文件\",{\"1\":{\"5099\":1}}],[\"只能用来标注\",{\"1\":{\"4991\":1,\"4992\":1,\"4993\":1,\"4994\":1,\"4995\":1,\"4996\":1}}],[\"只能用来修饰方法\",{\"1\":{\"4960\":1}}],[\"只能用于\",{\"1\":{\"3434\":1,\"3441\":1}}],[\"只能用于switch\",{\"1\":{\"3426\":1}}],[\"只能手写大量胶水代码\",{\"1\":{\"4577\":1}}],[\"只能通过接口直接调用静态方法\",{\"1\":{\"4525\":1}}],[\"只能通过pattern\",{\"1\":{\"2744\":1,\"2767\":1}}],[\"只能创建匿名类的一个实例\",{\"1\":{\"4347\":1}}],[\"只能在声明它的方法或代码块中使用\",{\"1\":{\"4335\":1,\"4339\":1}}],[\"只能调用父类中声明的属性和方法\",{\"1\":{\"4169\":1}}],[\"只能调用父类中声明的方法\",{\"1\":{\"4126\":1}}],[\"只能规范\",{\"1\":{\"4167\":1}}],[\"只能二选一\",{\"1\":{\"4099\":1}}],[\"只能使用$set修改器进行更新\",{\"1\":{\"10288\":1}}],[\"只能使用\",{\"1\":{\"3839\":1}}],[\"只能使用append方法\",{\"1\":{\"1583\":1}}],[\"只能\",{\"1\":{\"3723\":1}}],[\"只能是如下的6种数据类型之一\",{\"1\":{\"3366\":1}}],[\"只能表示英文的编码集\",{\"1\":{\"3129\":1}}],[\"只能最多有一个类声明为public的\",{\"1\":{\"2903\":1}}],[\"只能获取public修饰的方法\",{\"1\":{\"2203\":1,\"7168\":1}}],[\"只能获取文件\",{\"1\":{\"1961\":1}}],[\"只能进行比较\",{\"1\":{\"1730\":1}}],[\"只能存在一个\",{\"1\":{\"1147\":1}}],[\"只配置最底级别\",{\"1\":{\"952\":1}}],[\"只不过\",{\"1\":{\"604\":1}}],[\"只是测试下创建的账号\",{\"1\":{\"10732\":1}}],[\"只是request变成了response\",{\"1\":{\"8922\":1}}],[\"只是一个接口\",{\"1\":{\"8242\":1}}],[\"只是一个壳\",{\"1\":{\"1234\":1}}],[\"只是dql执行查询的方法是executequery\",{\"1\":{\"7995\":1}}],[\"只是未必是第一个\",{\"1\":{\"7687\":1}}],[\"只是servlet直接封装了一套api\",{\"1\":{\"9697\":1}}],[\"只是sql语句变成了updata\",{\"1\":{\"8085\":1}}],[\"只是sql里的操作是操作数据库的\",{\"1\":{\"7540\":1}}],[\"只是springboot进行了整合简化\",{\"1\":{\"670\":1}}],[\"只是用来标识类可以进行实例化\",{\"1\":{\"6561\":1}}],[\"只是简单的读\",{\"1\":{\"6519\":1}}],[\"只是参数类型变成了byte\",{\"1\":{\"6300\":1,\"6301\":1}}],[\"只是所有的线程都处于阻塞状态\",{\"1\":{\"5408\":1}}],[\"只是不需要我们显式的声明\",{\"1\":{\"5337\":1}}],[\"只是没分配到cpu资源\",{\"1\":{\"5289\":1}}],[\"只是普通的在main线程中调用一个方法\",{\"1\":{\"5196\":1}}],[\"只是在main线程调用了一个普通的run方法\",{\"1\":{\"5185\":1}}],[\"只是对数组的结构进行一些解释\",{\"1\":{\"3521\":1}}],[\"只是将int类型的结果2\",{\"1\":{\"3253\":1}}],[\"只是关键字是string\",{\"1\":{\"3206\":1}}],[\"只是char\",{\"1\":{\"2052\":1}}],[\"只是此时\",{\"1\":{\"2019\":1}}],[\"只是名字\",{\"1\":{\"1969\":1}}],[\"只是格式不同\",{\"1\":{\"593\":1}}],[\"只是包含了常用依赖的坐标\",{\"1\":{\"404\":1}}],[\"只允许使用空格\",{\"1\":{\"482\":1}}],[\"只指定了springboot的版本\",{\"1\":{\"402\":1}}],[\"版本的选择\",{\"1\":{\"10130\":1}}],[\"版本说明\",{\"0\":{\"7311\":1}}],[\"版本\",{\"1\":{\"2967\":1,\"9611\":1,\"9873\":1}}],[\"版本选择\",{\"1\":{\"2853\":1,\"8423\":1}}],[\"版本可以直接复制\",{\"1\":{\"1122\":1}}],[\"版本由\",{\"1\":{\"450\":1}}],[\"版本组合是最佳的\",{\"1\":{\"402\":1}}],[\"版本采用父类中的版本\",{\"1\":{\"386\":1}}],[\"同数据中心维护数据副本可以增加分布式应用程序的数据位置和可用性\",{\"1\":{\"10442\":1}}],[\"同类型推断能推断出参数类型\",{\"1\":{\"7351\":1}}],[\"同属性的返回值类型\",{\"1\":{\"7115\":1}}],[\"同属性的权限修饰符\",{\"1\":{\"7112\":1}}],[\"同步文件内容和元数据\",{\"1\":{\"6511\":1}}],[\"同步文件内容的更新\",{\"1\":{\"6510\":1}}],[\"同步资源并等待\",{\"1\":{\"5439\":1}}],[\"同步锁使用lock对象充当\",{\"1\":{\"5378\":1}}],[\"同步方式的优缺点\",{\"0\":{\"5373\":1}}],[\"同步方法中执行了线程对象的wait\",{\"1\":{\"5368\":1}}],[\"同步方法中出现了未处理的error或exception\",{\"1\":{\"5367\":1}}],[\"同步方法中遇到break\",{\"1\":{\"5366\":1}}],[\"同步方法仍然涉及到同步监视器\",{\"1\":{\"5337\":1}}],[\"同步方法说明\",{\"0\":{\"5334\":1}}],[\"同步方法\",{\"0\":{\"5333\":1}}],[\"同步的范围\",{\"0\":{\"5360\":1}}],[\"同步机制中的锁\",{\"0\":{\"5357\":1}}],[\"同步机制有多种方式\",{\"1\":{\"5308\":1}}],[\"同步原理和总结\",{\"0\":{\"5354\":1}}],[\"同步监视器表示是各自的对象\",{\"1\":{\"5342\":1}}],[\"同步监视器\",{\"0\":{\"5339\":1,\"5341\":1},\"1\":{\"5314\":1,\"5317\":1,\"5371\":1}}],[\"同步代码块执行结束\",{\"1\":{\"5365\":1}}],[\"同步代码块说明\",{\"0\":{\"5313\":1}}],[\"同步代码块可以解决线程安全问题\",{\"1\":{\"5312\":1}}],[\"同步代码块\",{\"0\":{\"5311\":1},\"1\":{\"5359\":1}}],[\"同优先级线程组成先进先出队列\",{\"1\":{\"5239\":1}}],[\"同包类\",{\"1\":{\"3953\":1}}],[\"同种类型\",{\"0\":{\"3317\":1}}],[\"同理\",{\"1\":{\"2585\":1,\"5342\":1}}],[\"同class对象进行获取constructor对象\",{\"1\":{\"2288\":1}}],[\"同field\",{\"1\":{\"2284\":1,\"2293\":1}}],[\"同一tomcat服务器中\",{\"0\":{\"9728\":1}}],[\"同一台机器上的多个web服务可以通过docker等容器进行隔离\",{\"1\":{\"9530\":1}}],[\"同一进程内的线程共享本进程的资源如内存\",{\"1\":{\"5085\":1}}],[\"同一功能多次开启也算加了一个进程\",{\"1\":{\"5083\":1}}],[\"同一个线程对象重复调用start方法会抛出异常\",{\"1\":{\"5200\":1}}],[\"同一个thread类的对象不能重复调用start\",{\"0\":{\"5198\":1}}],[\"同一个注解\",{\"1\":{\"5013\":1}}],[\"同一个注解可以重复用多次\",{\"1\":{\"5010\":1}}],[\"同一个类\",{\"1\":{\"3759\":1}}],[\"同一个作用域内\",{\"1\":{\"3017\":1}}],[\"同一个对象肯定相等\",{\"1\":{\"1769\":1}}],[\"同一目录下的目录和文件不能同名\",{\"1\":{\"1999\":1,\"6144\":1}}],[\"同样\",{\"1\":{\"8442\":1}}],[\"同样实现接口\",{\"1\":{\"7200\":1}}],[\"同样会发生覆盖\",{\"1\":{\"2591\":1}}],[\"同样有三个静态方法来进行实例化\",{\"1\":{\"1709\":1}}],[\"同样进入该文件\",{\"1\":{\"396\":1}}],[\"同上创建对应的目录和文件\",{\"1\":{\"10500\":1,\"10505\":1}}],[\"同上需要进行try\",{\"1\":{\"6283\":1}}],[\"同上\",{\"1\":{\"1662\":1,\"1790\":1,\"2052\":1,\"3201\":1,\"4227\":2,\"5824\":1,\"6300\":1,\"6301\":1,\"6302\":1,\"6359\":1}}],[\"同string的方法\",{\"1\":{\"1573\":1}}],[\"同时要设置客户端连接到集群的账号\",{\"1\":{\"10640\":1}}],[\"同时要与idea兼容\",{\"1\":{\"1066\":1}}],[\"同时构造方法会设置cookie的key\",{\"1\":{\"9680\":1}}],[\"同时提供给使用者清晰的文档\",{\"1\":{\"9487\":1}}],[\"同时进行debug\",{\"1\":{\"8621\":1}}],[\"同时这个目录也是tomcat真正访问的目录\",{\"1\":{\"8494\":1}}],[\"同时这些接口也会成为代理类的接口\",{\"1\":{\"7260\":1}}],[\"同时加入了日志监控\",{\"1\":{\"8253\":1}}],[\"同时可以大幅度提高数据库访问速度\",{\"1\":{\"8248\":1}}],[\"同时如果每个操作使用的是自己单独的连接\",{\"1\":{\"8141\":1}}],[\"同时需要将原有数组中的数据复制到新的数组中\",{\"1\":{\"5652\":1}}],[\"同时效率不高\",{\"1\":{\"5529\":1}}],[\"同时实现了runnable\",{\"1\":{\"5477\":1}}],[\"同时又提出使用打印机的请求\",{\"1\":{\"5416\":1}}],[\"同时b也使用该账户进行消费2000元\",{\"1\":{\"5300\":1}}],[\"同时执行多个任务\",{\"1\":{\"5095\":1}}],[\"同时栈内存中\",{\"1\":{\"4644\":1}}],[\"同时在栈内存中\",{\"1\":{\"4640\":1}}],[\"同时还可以重写默认的方法\",{\"1\":{\"4543\":1}}],[\"同时也是request域对象\",{\"1\":{\"9187\":1}}],[\"同时也是springboot启动类\",{\"1\":{\"609\":1}}],[\"同时也不会影响程序的性能\",{\"1\":{\"8331\":1}}],[\"同时也描述了程序各个对象间的通信方式\",{\"1\":{\"4595\":1}}],[\"同时也提高了代码的健硕性\",{\"1\":{\"4167\":1}}],[\"同时父类和子类的标识符执指向同一地址\",{\"1\":{\"4161\":1}}],[\"同时使用时\",{\"1\":{\"4088\":1}}],[\"同时就数组的值成为垃圾\",{\"1\":{\"3526\":1}}],[\"同时数组堆中的值成为垃圾\",{\"1\":{\"3526\":1}}],[\"同时有一个包含comparator的重构方法\",{\"1\":{\"2367\":1}}],[\"同时将原有数组中的元素复制到新的数组中\",{\"1\":{\"1561\":1}}],[\"同时\",{\"1\":{\"1505\":1,\"3376\":1,\"3721\":1,\"5955\":1,\"7060\":1,\"7205\":1,\"7416\":1}}],[\"同时对多个环境进行加载使其生效\",{\"1\":{\"852\":1}}],[\"同时tomcat也不用进行配置\",{\"1\":{\"381\":1}}],[\"同层级左侧对齐\",{\"1\":{\"482\":1}}],[\"90\",{\"1\":{\"10770\":1}}],[\"9ef5\",{\"1\":{\"10726\":1}}],[\"9200\",{\"1\":{\"9892\":1,\"9893\":1,\"9898\":1,\"9900\":1}}],[\"9300\",{\"1\":{\"9891\":1}}],[\"9876\",{\"1\":{\"7694\":1}}],[\"98\",{\"1\":{\"5913\":1,\"7670\":2}}],[\"98<\",{\"1\":{\"397\":1}}],[\"97\",{\"1\":{\"2098\":2,\"3125\":1,\"3162\":1,\"3241\":1,\"6706\":1}}],[\"9入\",{\"1\":{\"1928\":1}}],[\"99\",{\"1\":{\"1811\":1,\"4918\":1,\"7178\":1}}],[\"9632\",{\"1\":{\"10726\":1}}],[\"96\",{\"1\":{\"1502\":1,\"1506\":1,\"6703\":3}}],[\"9\",{\"0\":{\"1300\":1,\"1349\":1,\"1824\":1,\"2166\":1,\"2294\":1,\"2430\":1,\"2513\":1,\"2610\":1,\"3458\":1,\"3647\":1,\"4359\":1,\"4760\":1,\"5759\":1,\"5762\":1,\"5766\":1,\"6578\":1,\"6636\":1,\"6660\":1,\"6712\":1,\"6755\":1,\"6784\":1,\"6825\":1,\"6863\":1,\"7698\":1,\"8327\":1,\"9175\":1,\"9733\":1,\"9788\":1,\"10887\":1},\"1\":{\"393\":1,\"397\":2,\"399\":1,\"443\":1,\"1123\":1,\"1654\":1,\"1657\":2,\"2870\":1,\"3060\":1,\"3455\":1,\"3516\":1,\"3519\":1,\"3527\":1,\"3579\":1,\"4918\":1,\"6657\":1,\"6659\":1,\"6678\":1,\"6681\":1,\"6748\":1,\"6754\":1,\"6787\":1,\"6912\":1,\"7312\":1,\"7708\":1,\"7712\":1,\"9895\":1,\"10162\":1,\"10496\":1,\"10526\":1,\"10541\":1,\"10545\":1,\"10554\":1,\"10573\":1,\"10576\":2,\"10829\":1}}],[\"9<\",{\"1\":{\"391\":1,\"394\":1,\"397\":1,\"412\":3,\"1177\":1}}],[\"+和正则一样\",{\"1\":{\"9631\":1}}],[\"+value\",{\"1\":{\"5970\":1,\"9695\":1,\"9726\":1}}],[\"+ft\",{\"1\":{\"5486\":1}}],[\"+thread\",{\"1\":{\"5310\":1}}],[\"+num\",{\"1\":{\"5263\":1,\"5310\":1}}],[\"+name+\",{\"1\":{\"1769\":1,\"5060\":1}}],[\"+ht1\",{\"1\":{\"5253\":2}}],[\"+hours\",{\"1\":{\"1660\":1}}],[\"+i+\",{\"1\":{\"7106\":1}}],[\"+i\",{\"1\":{\"5185\":2,\"5253\":2,\"5486\":1,\"5517\":1,\"7106\":1}}],[\"+age\",{\"1\":{\"5060\":1}}],[\"+age+\",{\"1\":{\"1769\":1,\"3747\":1}}],[\"+uname+\",{\"1\":{\"3747\":1}}],[\"+language\",{\"1\":{\"3630\":1}}],[\"+=\",{\"1\":{\"3269\":1,\"3270\":1,\"3273\":1,\"3393\":1,\"3420\":1,\"3754\":1,\"5486\":1}}],[\"++a1\",{\"1\":{\"3261\":1}}],[\"++\",{\"1\":{\"3257\":1,\"3258\":1}}],[\"+world\",{\"1\":{\"4083\":1}}],[\"+word\",{\"1\":{\"2974\":1}}],[\"+week\",{\"1\":{\"1660\":1}}],[\"+ms\",{\"1\":{\"1660\":1}}],[\"+second\",{\"1\":{\"1660\":1}}],[\"+days\",{\"1\":{\"1660\":1}}],[\"+年\",{\"1\":{\"1660\":1}}],[\"+\",{\"0\":{\"3991\":1},\"1\":{\"393\":1,\"553\":1,\"1474\":1,\"1488\":1,\"1561\":1,\"1583\":1,\"1660\":2,\"1804\":2,\"1885\":1,\"2849\":1,\"2850\":1,\"2962\":1,\"2993\":1,\"3156\":1,\"3162\":1,\"3167\":2,\"3176\":1,\"3191\":1,\"3192\":3,\"3239\":1,\"3241\":6,\"3263\":1,\"3270\":1,\"3414\":2,\"3455\":5,\"3457\":2,\"3570\":1,\"3754\":1,\"4253\":2,\"4259\":4,\"4281\":2,\"4292\":1,\"4466\":1,\"4592\":1,\"4593\":1,\"4771\":1,\"4843\":4,\"4887\":2,\"5185\":2,\"5219\":1,\"5253\":2,\"5263\":1,\"5310\":1,\"5322\":1,\"5345\":2,\"5396\":2,\"5464\":2,\"5486\":1,\"5517\":1,\"5755\":1,\"5913\":2,\"6359\":1,\"6487\":3,\"6843\":2,\"6956\":7,\"7049\":3,\"7086\":1,\"7106\":5,\"7324\":3,\"7590\":1,\"7716\":1,\"7889\":3,\"7989\":1,\"8045\":3,\"8054\":3,\"8109\":3,\"8113\":2,\"8121\":2,\"8126\":1,\"8146\":1,\"8148\":1,\"8201\":8,\"8210\":2,\"8270\":1,\"8381\":2,\"8383\":2,\"8595\":1,\"9027\":1,\"9506\":1,\"10403\":2,\"10618\":1}}],[\">给浏览器\",{\"1\":{\"9675\":1}}],[\">点击\",{\"1\":{\"9505\":1}}],[\">服务器\",{\"1\":{\"9155\":1,\"9159\":1}}],[\">服务端\",{\"1\":{\"6750\":1,\"6753\":1}}],[\"><br>\",{\"1\":{\"9025\":2,\"9184\":2}}],[\">requestfacade\",{\"1\":{\"8914\":1}}],[\">httpservletrequest\",{\"1\":{\"8914\":1}}],[\">导入到指定module\",{\"1\":{\"8682\":1}}],[\">选择tomcat\",{\"1\":{\"8682\":1}}],[\">选这个\",{\"1\":{\"4799\":1}}],[\">+\",{\"1\":{\"8682\":1}}],[\">listener\",{\"0\":{\"9322\":1}}],[\">libraries\",{\"1\":{\"8682\":1}}],[\">local\",{\"1\":{\"8579\":1}}],[\">web\",{\"1\":{\"8567\":1}}],[\">web项目\",{\"0\":{\"8531\":1}}],[\">woman\",{\"1\":{\"4194\":1}}],[\">调用\",{\"1\":{\"7946\":1}}],[\">预编译sql字符串\",{\"1\":{\"7946\":1}}],[\">种子\",{\"1\":{\"7588\":1}}],[\">e\",{\"1\":{\"7495\":1}}],[\">emp\",{\"1\":{\"7476\":1}}],[\">str\",{\"1\":{\"7634\":1}}],[\">string类型\",{\"0\":{\"4289\":1}}],[\">s1\",{\"1\":{\"7487\":1}}],[\">system\",{\"1\":{\"7462\":1}}],[\">右边\",{\"1\":{\"7348\":1,\"7364\":1}}],[\">左边\",{\"1\":{\"7347\":1,\"7360\":1}}],[\">客户端\",{\"1\":{\"6751\":1,\"6752\":1}}],[\">字节流输出\",{\"1\":{\"6369\":1}}],[\">字节流\",{\"1\":{\"6209\":1}}],[\">字符数组\",{\"1\":{\"6373\":1}}],[\">字符流输入\",{\"1\":{\"6368\":1}}],[\">字符流\",{\"1\":{\"6208\":1}}],[\">字符串\",{\"1\":{\"1690\":1}}],[\">=\",{\"1\":{\"6094\":2,\"10351\":1}}],[\">是另外两个的父类\",{\"1\":{\"6067\":1}}],[\">数学中的\",{\"1\":{\"5548\":1,\"5687\":1}}],[\">数学里的\",{\"1\":{\"5546\":1}}],[\">存储无序的\",{\"1\":{\"5548\":1}}],[\">同步方法\",{\"1\":{\"5403\":1}}],[\">不能包含代码多了\",{\"1\":{\"5315\":1}}],[\">1\",{\"1\":{\"5265\":1}}],[\">默认优先级\",{\"1\":{\"5244\":1}}],[\">它们从同一堆中分配对象\",{\"1\":{\"5080\":1}}],[\">文档注释\",{\"1\":{\"4890\":1}}],[\">接口冲突\",{\"1\":{\"4532\":1}}],[\">类优先原则\",{\"1\":{\"4531\":1}}],[\">弥补了java单继承性的局限性\",{\"1\":{\"4508\":1}}],[\">评分\",{\"1\":{\"4468\":1}}],[\">办理业务\",{\"1\":{\"4468\":1}}],[\">person\",{\"1\":{\"4194\":1}}],[\">封装性\",{\"1\":{\"3691\":1}}],[\">new\",{\"1\":{\"7525\":1,\"7535\":1}}],[\">n\",{\"1\":{\"3505\":1}}],[\">>\",{\"1\":{\"3308\":1}}],[\">操作系统运行\",{\"1\":{\"2823\":1}}],[\">javaweb\",{\"1\":{\"8582\":1}}],[\">java>lang>reflect>field\",{\"1\":{\"2214\":1}}],[\">jvm编译\",{\"1\":{\"2823\":1}}],[\">代码\",{\"1\":{\"2823\":1}}],[\">application\",{\"1\":{\"8934\":1}}],[\">a\",{\"1\":{\"2098\":1}}],[\">参数\",{\"1\":{\"1934\":1}}],[\">byte\",{\"1\":{\"1848\":1}}],[\">build\",{\"1\":{\"553\":1}}],[\">integer\",{\"1\":{\"5981\":1}}],[\">int\",{\"1\":{\"1822\":1}}],[\">日期\",{\"1\":{\"1694\":1}}],[\">0\",{\"1\":{\"1447\":1}}],[\">后端服务器\",{\"1\":{\"1197\":1}}],[\">前端服务器\",{\"1\":{\"1197\":1}}],[\">compiler\",{\"1\":{\"1079\":1}}],[\">mybatis\",{\"1\":{\"976\":1}}],[\">map\",{\"0\":{\"29\":1,\"32\":1,\"35\":1,\"38\":1,\"41\":1,\"44\":1,\"47\":1,\"50\":1,\"53\":1,\"56\":1,\"59\":1,\"62\":1,\"68\":1,\"102\":1,\"123\":1,\"142\":1,\"145\":1,\"148\":1,\"151\":1,\"157\":1,\"163\":1,\"169\":1,\"175\":1,\"181\":1,\"187\":1,\"193\":1,\"199\":1,\"205\":1,\"251\":1,\"263\":1,\"275\":1,\"281\":1}}],[\">这样就会打印sql\",{\"1\":{\"952\":1}}],[\">改成<root\",{\"1\":{\"952\":1}}],[\">\",{\"0\":{\"1379\":1},\"1\":{\"391\":2,\"397\":3,\"443\":1,\"450\":1,\"642\":2,\"862\":1,\"952\":76,\"978\":3,\"1005\":2,\"1068\":2,\"1119\":8,\"1177\":26,\"1265\":3,\"1299\":1,\"1486\":7,\"1730\":1,\"1791\":1,\"2141\":1,\"2144\":1,\"2147\":2,\"2162\":2,\"2175\":2,\"2178\":2,\"2181\":1,\"2204\":1,\"2211\":1,\"2228\":2,\"2266\":2,\"2272\":2,\"2275\":2,\"2426\":1,\"2433\":1,\"2436\":1,\"2484\":1,\"2487\":1,\"2495\":1,\"2508\":1,\"3322\":1,\"3414\":1,\"3765\":1,\"4803\":1,\"5180\":1,\"5322\":1,\"5345\":1,\"5396\":1,\"5544\":1,\"5631\":1,\"5881\":2,\"5913\":1,\"5970\":1,\"6064\":1,\"6067\":1,\"6069\":1,\"6073\":1,\"6078\":1,\"6080\":1,\"6081\":2,\"6098\":2,\"6100\":1,\"6102\":2,\"6374\":1,\"6448\":2,\"6617\":1,\"6618\":1,\"7000\":1,\"7002\":1,\"7086\":1,\"7106\":1,\"7266\":1,\"7345\":1,\"7346\":1,\"7371\":1,\"7373\":1,\"7375\":1,\"7377\":2,\"7380\":1,\"7382\":1,\"7384\":1,\"7386\":1,\"7388\":1,\"7390\":1,\"7393\":1,\"7473\":1,\"7480\":1,\"7510\":1,\"7517\":1,\"7535\":1,\"7537\":1,\"7568\":1,\"7572\":1,\"7590\":1,\"7616\":2,\"7673\":1,\"7678\":2,\"7680\":2,\"7682\":1,\"7694\":1,\"7697\":1,\"7716\":1,\"7723\":4,\"7858\":1,\"8477\":1,\"8483\":1,\"8552\":1,\"8859\":1,\"8864\":3,\"8988\":4,\"9021\":1,\"9025\":4,\"9027\":1,\"9505\":1,\"9506\":3,\"9513\":1,\"9608\":2,\"9613\":1,\"9619\":1,\"9631\":11,\"9633\":2,\"9635\":3,\"9642\":41,\"9645\":5,\"10199\":1,\"10351\":1,\"10663\":3,\"10770\":1}}],[\"该依赖会自动添加子依赖\",{\"1\":{\"10830\":1}}],[\"该账号仅能读写article库\",{\"1\":{\"10749\":1}}],[\"该用户的信息都是存储在admin数据库的\",{\"1\":{\"10733\":1}}],[\"该成员不是仲裁节点\",{\"1\":{\"10546\":1}}],[\"该索引是唯一索引\",{\"1\":{\"10382\":1}}],[\"该软件为绿色软件\",{\"1\":{\"9876\":1}}],[\"该软件是绿色软件\",{\"1\":{\"8428\":1,\"10156\":1}}],[\"该session对象有一个id属性\",{\"1\":{\"9765\":1}}],[\"该监听器接口一共有两个方法\",{\"1\":{\"9448\":1}}],[\"该域对象仅在jsp中有用\",{\"1\":{\"9185\":1}}],[\"该域对象是jsp中的\",{\"1\":{\"9182\":1}}],[\"该路径是通过tomcat的deployment\",{\"1\":{\"8934\":1}}],[\"该匹配规则和其他三个是不同的\",{\"1\":{\"8850\":1}}],[\"该实例随后会被java的垃圾收集器所回收\",{\"1\":{\"8761\":1}}],[\"该怎么做\",{\"1\":{\"8595\":1}}],[\"该模板只需配置一次\",{\"1\":{\"8573\":1}}],[\"该目录就是一个独立的项目\",{\"1\":{\"8462\":1}}],[\"该操作执行后并不会提交\",{\"1\":{\"8146\":1}}],[\"该操作仅支持custom表\",{\"1\":{\"8044\":1}}],[\"该操作会抛出\",{\"1\":{\"7959\":1}}],[\"该操作会返回一个新的stream\",{\"1\":{\"7632\":1}}],[\"该函数会被应用到每个元素上\",{\"1\":{\"7631\":1,\"7636\":1,\"7639\":1,\"7642\":1}}],[\"该函数也是四舍五入\",{\"1\":{\"1819\":1}}],[\"该加载器无法获取\",{\"1\":{\"7041\":1}}],[\"该对象会在tomcat启动时创建\",{\"1\":{\"9213\":1}}],[\"该对象代表了整个web应用\",{\"1\":{\"9205\":1}}],[\"该对象只会创建一次\",{\"1\":{\"8747\":1}}],[\"该对象是由参数3的实现类创建的\",{\"1\":{\"7265\":1}}],[\"该对象有被代理对象的同名方法\",{\"1\":{\"7241\":1}}],[\"该对象就是代理对象\",{\"1\":{\"7239\":1}}],[\"该对象里有两个字段\",{\"1\":{\"6917\":1}}],[\"该对象可以将任意character\",{\"1\":{\"2681\":1}}],[\"该信息将被截短\",{\"1\":{\"6850\":1}}],[\"该步骤已经将数据读入到创建的char\",{\"1\":{\"6256\":1}}],[\"该参数是一个对象\",{\"1\":{\"10387\":1}}],[\"该参数用来指定数据库存放的位置\",{\"1\":{\"10143\":1}}],[\"该参数必须是comparator的对象\",{\"1\":{\"5777\":1}}],[\"该参数将限制接下来要输入的数据格式\",{\"1\":{\"2330\":1,\"2787\":1}}],[\"该集合的类必须实现comparable接口\",{\"1\":{\"5777\":1}}],[\"该接口用于处理\",{\"1\":{\"8368\":1}}],[\"该接口通常由服务器\",{\"1\":{\"8242\":1}}],[\"该接口是个标识接口\",{\"1\":{\"6561\":1}}],[\"该接口是个函数式接口\",{\"1\":{\"1778\":1}}],[\"该接口的结构如下\",{\"1\":{\"5685\":1}}],[\"该接口有三个实现类\",{\"1\":{\"5629\":1}}],[\"该接口有一个iterator\",{\"1\":{\"5572\":1}}],[\"该接口里定义的方法既可用于操作\",{\"1\":{\"5556\":1}}],[\"该线程不会释放锁\",{\"1\":{\"5371\":1}}],[\"该线程将拿到锁\",{\"1\":{\"5355\":1}}],[\"该构造函数可以自定义内部缓冲区数组的大小\",{\"1\":{\"6325\":1,\"6328\":1,\"6331\":1,\"6334\":1}}],[\"该构造方法将runnble接口实现类的实例赋值给了target变量\",{\"1\":{\"5268\":1}}],[\"该构造器接受一个string类谢谢的参数\",{\"1\":{\"2181\":1,\"7065\":1}}],[\"该构造器可以接受第二个参数\",{\"1\":{\"1505\":1}}],[\"该进程执行完\",{\"1\":{\"5221\":1}}],[\"该\",{\"1\":{\"4964\":1}}],[\"该异常对象会被抛给调用者方法中处理\",{\"1\":{\"4773\":1}}],[\"该数组中保存执行java命令时传递给所运行的类的参数\",{\"1\":{\"4616\":1}}],[\"该暴露的暴露出来\",{\"1\":{\"3813\":1}}],[\"该属性是引用类型\",{\"1\":{\"3232\":1}}],[\"该内存地址\",{\"1\":{\"3221\":1}}],[\"该变量必须已经被初始化过了\",{\"1\":{\"3016\":1}}],[\"该区域的数据可以在同一类型范围内不断变化\",{\"1\":{\"2998\":1}}],[\"该标识符是可变的\",{\"1\":{\"5126\":1}}],[\"该标注可以用在类或方法上\",{\"1\":{\"2960\":1}}],[\"该标记外外面必须加\",{\"1\":{\"2945\":1}}],[\"该方式无法实现热部署\",{\"1\":{\"8585\":1,\"8644\":1}}],[\"该方式返回的是\",{\"1\":{\"2389\":1}}],[\"该方法用来返回servlet的相关信息\",{\"1\":{\"8779\":1}}],[\"该方法用来调用被代理类的方法\",{\"1\":{\"7263\":1}}],[\"该方法仅运行了一次\",{\"1\":{\"8777\":1}}],[\"该方法仅启动了一次\",{\"1\":{\"8768\":1}}],[\"该方法中的代码块都会执行一次\",{\"1\":{\"8772\":1}}],[\"该方法都会执行一次\",{\"1\":{\"8771\":1}}],[\"该方法只调用一次\",{\"1\":{\"8757\":1}}],[\"该方法只会删除找到的第一个元素\",{\"1\":{\"2428\":1}}],[\"该方法返回\",{\"1\":{\"8004\":1}}],[\"该方法不会递归\",{\"1\":{\"7649\":1}}],[\"该方法需要处理异常\",{\"1\":{\"6242\":1,\"6245\":1}}],[\"该方法就是泛型方法\",{\"1\":{\"6031\":1}}],[\"该方法就可以写出换行符\",{\"1\":{\"2124\":1,\"6350\":1}}],[\"该方法继续执行\",{\"1\":{\"5366\":1}}],[\"该方法已不推荐使用\",{\"1\":{\"5230\":1}}],[\"该方法接收一个string类型的数组参数\",{\"1\":{\"4616\":1}}],[\"该方法接受一个正则表达式作为它的第一个参数\",{\"1\":{\"2665\":1}}],[\"该方法叫做抽象方法\",{\"1\":{\"4448\":1}}],[\"该方法必须是重写了父类方法\",{\"1\":{\"4127\":1}}],[\"该方法会获取访问时的请求信息\",{\"1\":{\"8771\":1}}],[\"该方法会自行处理\",{\"1\":{\"8365\":1}}],[\"该方法会抛出\",{\"1\":{\"7955\":1}}],[\"该方法会抛出java\",{\"1\":{\"2041\":1,\"2047\":1}}],[\"该方法会抛interruptedexception异常\",{\"1\":{\"5229\":1}}],[\"该方法会抛异常\",{\"1\":{\"5226\":1}}],[\"该方法会启动对象对应的线程\",{\"1\":{\"5175\":1}}],[\"该方法会改变源集合\",{\"1\":{\"2544\":1}}],[\"该方法会将参数集合中的所有元素都添加到自己的集合中\",{\"1\":{\"2544\":1}}],[\"该方法可以很方便地遍历所有的枚举值\",{\"1\":{\"4863\":1}}],[\"该方法可使将指定集合包装成线程同步的集合\",{\"1\":{\"2481\":1}}],[\"该方法可用于快速生成一个list集合\",{\"1\":{\"2389\":1}}],[\"该方法最初是定义在iterator中的\",{\"1\":{\"2429\":1}}],[\"该方法最为安全可靠\",{\"1\":{\"2133\":1,\"6993\":1}}],[\"该方法有一个对象参数\",{\"1\":{\"10702\":1}}],[\"该方法有很多重构方法\",{\"1\":{\"2367\":1}}],[\"该方法有好几个重构方法\",{\"1\":{\"2358\":1}}],[\"该方法对各种类型的参数进行了重构\",{\"1\":{\"2354\":1}}],[\"该方法是通过后缀名获取文件类型的\",{\"1\":{\"9236\":1}}],[\"该方法是一直等待输入的\",{\"1\":{\"2120\":1}}],[\"该方法是阻塞的\",{\"1\":{\"2118\":1}}],[\"该方法是读取一行数据\",{\"1\":{\"2118\":1,\"6343\":1}}],[\"该方法本身也会抛出异常\",{\"1\":{\"2113\":1}}],[\"该方法若不调用\",{\"1\":{\"2108\":1}}],[\"该方法也需要处理异常\",{\"1\":{\"2061\":1}}],[\"该方法额外多了两个参数\",{\"1\":{\"2057\":1}}],[\"该方法的作用就是通过工作目录下的路径\",{\"1\":{\"9254\":1}}],[\"该方法的作用是获得系统中属性名对应的值\",{\"1\":{\"2312\":1}}],[\"该方法的作用是请求系统进行垃圾回收\",{\"1\":{\"2309\":1}}],[\"该方法的作用是退出程序\",{\"1\":{\"2306\":1}}],[\"该方法的参数是\",{\"1\":{\"2746\":1}}],[\"该方法的参数应该是个目录\",{\"1\":{\"1970\":1,\"1974\":1}}],[\"该方法的返回值就会加入ioc管理\",{\"1\":{\"596\":1}}],[\"该方法与string\",{\"1\":{\"1858\":1}}],[\"该方法针对不通数据类型的参数\",{\"1\":{\"1583\":1}}],[\"该方法如果未找到\",{\"1\":{\"1437\":1}}],[\"该仿佛根据参数中的数组数据类型不通有多个重构方法\",{\"1\":{\"2377\":1}}],[\"该复制是真的值复制\",{\"1\":{\"2373\":1}}],[\"该文件夹中新建配置文件\",{\"1\":{\"10148\":1}}],[\"该文件是在生成\",{\"1\":{\"9473\":1}}],[\"该文件是否已经隐藏\",{\"1\":{\"1991\":1}}],[\"该文件只能用datainputstream来读入\",{\"1\":{\"6482\":1}}],[\"该文件还有一个父工程\",{\"1\":{\"393\":1}}],[\"该项目来自于黑马程序员的\",{\"1\":{\"1381\":1}}],[\"该java类库提供了一些注解可以简化实体类的开发\",{\"1\":{\"1213\":1}}],[\"该注解表示下面要定义的接口为\",{\"1\":{\"7416\":1}}],[\"该注解不需要任何参数\",{\"1\":{\"9455\":1}}],[\"该注解不能继承其他的注解或接口\",{\"1\":{\"4923\":1}}],[\"该注解不支持宽松绑定\",{\"1\":{\"618\":1}}],[\"该注解会被启动类扫描\",{\"1\":{\"1234\":1}}],[\"该注解的意义就是对绑定属性的类进行统一的管理\",{\"1\":{\"607\":1}}],[\"该注解的功能\",{\"1\":{\"432\":1}}],[\"该注解是作用在配置类上的\",{\"1\":{\"606\":1}}],[\"该类实例和session一起活化到内存时调用\",{\"1\":{\"9439\":1}}],[\"该类实例和session一起钝化到硬盘时调用\",{\"1\":{\"9437\":1}}],[\"该类实现了httpservletrequest接口\",{\"1\":{\"8909\":1}}],[\"该类实现的基本功能为\",{\"1\":{\"8196\":1}}],[\"该类也有一个实现类\",{\"1\":{\"8789\":1}}],[\"该类简单化了sql查询\",{\"1\":{\"8349\":1}}],[\"该类同时也表名\",{\"1\":{\"8185\":1}}],[\"该类的实例从session中移除时调用\",{\"1\":{\"9422\":1}}],[\"该类的实例被放到session域中时调用\",{\"1\":{\"9420\":1}}],[\"该类的构造器\",{\"1\":{\"6813\":1}}],[\"该类的核心就是可以操作指针\",{\"1\":{\"6518\":1}}],[\"该类是没有抽象方法的抽象类\",{\"1\":{\"8797\":1,\"8824\":1}}],[\"该类是\",{\"1\":{\"6440\":1}}],[\"该类是专门用来处理项目中的配置文件的\",{\"1\":{\"5918\":1}}],[\"该类为工具类\",{\"1\":{\"2349\":1}}],[\"该类有三种实例化的方式\",{\"1\":{\"1687\":1}}],[\"该类包含了很多条件查询相关的方法\",{\"1\":{\"1245\":1}}],[\"该类内部要查找manifest\",{\"1\":{\"726\":1}}],[\"该类不能再声明为bean\",{\"1\":{\"611\":1}}],[\"该类用来创建数据对象\",{\"1\":{\"590\":1}}],[\"该类型依赖出现的目的是减少依赖配置的数量\",{\"1\":{\"409\":1}}],[\"该配置就是来指定哪些文件的修改会触发热部署\",{\"1\":{\"567\":1}}],[\"该该配置文件可以配置所有可以自定义的配置项\",{\"1\":{\"456\":1}}],[\"该引导类是靠\",{\"1\":{\"432\":1}}],[\"该parent就是springboot内置的专门用来管理依赖的父pom\",{\"1\":{\"390\":1}}],[\"该url就是要连接的网址\",{\"1\":{\"307\":1}}],[\"要添加到副本集的新成员\",{\"1\":{\"10566\":1}}],[\"要更新的内容\",{\"1\":{\"10278\":1}}],[\"要插入到集合中的文档或文档数组\",{\"1\":{\"10248\":1}}],[\"要是将一个用户添加到这个数据库\",{\"1\":{\"10205\":1}}],[\"要是long类型\",{\"1\":{\"4809\":1}}],[\"要先将dtd文档引入xml文档中\",{\"1\":{\"9633\":1}}],[\"要先创建相关的数据表操作类\",{\"1\":{\"8168\":1}}],[\"要实现servlet接口\",{\"1\":{\"8680\":1}}],[\"要关闭之前通过双击打开的tomcat服务\",{\"1\":{\"8624\":1}}],[\"要访问的文件是index\",{\"1\":{\"8469\":1}}],[\"要启用pscache\",{\"1\":{\"8297\":1}}],[\"要填sql中的date对象\",{\"1\":{\"7956\":1}}],[\"要包装stu非null\",{\"1\":{\"7743\":1}}],[\"要使用参数1的类\",{\"1\":{\"7457\":1}}],[\"要调用的方法\",{\"1\":{\"7272\":1}}],[\"要调用mapper接口的selectpage方法\",{\"1\":{\"1239\":1}}],[\"要同时new很多对象\",{\"1\":{\"6953\":1}}],[\"要指定监听的接口\",{\"1\":{\"6842\":1}}],[\"要注意的是\",{\"1\":{\"6565\":1}}],[\"要操作的文件\",{\"1\":{\"6503\":1}}],[\"要写出字符流\",{\"1\":{\"6204\":1}}],[\"要读取字符流\",{\"1\":{\"6197\":1}}],[\"要不用\",{\"1\":{\"6007\":1}}],[\"要综合考虑效率和\",{\"1\":{\"5765\":1}}],[\"要重新获得监控权\",{\"1\":{\"5447\":1}}],[\"要重新打包吗\",{\"1\":{\"767\":1}}],[\"要避免出现死锁\",{\"1\":{\"5405\":1}}],[\"要将unlock\",{\"1\":{\"5393\":1}}],[\"要在start前设置name\",{\"1\":{\"5219\":1}}],[\"要加到\",{\"1\":{\"5027\":1}}],[\"要检测分母为0\",{\"1\":{\"4683\":1}}],[\"要\",{\"1\":{\"4482\":1}}],[\"要保证输入的类型是正确的\",{\"1\":{\"4297\":1}}],[\"要保证效果最佳且没有bug\",{\"1\":{\"383\":1}}],[\"要想将字节数据写回到浏览器\",{\"1\":{\"9090\":1}}],[\"要想将字符数据写回到浏览器\",{\"1\":{\"9074\":1}}],[\"要想了解requestfacade中都提供了哪些方法\",{\"1\":{\"8911\":1}}],[\"要想编写一个servlet就必须要实现servlet接口\",{\"1\":{\"8786\":1}}],[\"要想修改tomcat启动的端口号\",{\"1\":{\"8441\":1}}],[\"要想实现多线程\",{\"1\":{\"5287\":1}}],[\"要想访问父类中的同名属性就要使用super关键字了\",{\"1\":{\"4068\":1}}],[\"要想得到更强更便捷的正则匹配操作\",{\"1\":{\"2744\":1}}],[\"要么实现接口\",{\"1\":{\"4473\":1,\"4484\":1}}],[\"要么都声明为static的\",{\"1\":{\"4056\":1}}],[\"要么是false\",{\"1\":{\"3278\":1}}],[\"要拆分的字符序列\",{\"1\":{\"2758\":1}}],[\"要匹配的字符序列\",{\"1\":{\"2754\":1}}],[\"要创建一个\",{\"1\":{\"2665\":1}}],[\"要设置哪个对象的属性\",{\"1\":{\"2242\":1}}],[\"要设置的属性的值\",{\"1\":{\"2236\":1}}],[\"要获取哪个对象的属性\",{\"1\":{\"2235\":1}}],[\"要求是一个查询语句\",{\"1\":{\"8299\":1}}],[\"要求是相同类的对象\",{\"1\":{\"5783\":1}}],[\"要求接口中的抽象方法中\",{\"1\":{\"7456\":1}}],[\"要求接口中的抽象方法的形参列表和返回值类型与方法引用的方法的形参列表和返回值类型相同\",{\"1\":{\"7455\":1}}],[\"要求将读取到的整行字符串转成大写输出\",{\"1\":{\"6445\":1}}],[\"要求key必须是由同一个类创建的对象\",{\"1\":{\"5909\":1}}],[\"要求字符串必须是枚举类对象的\",{\"1\":{\"4864\":1}}],[\"要求此对象也必须声明为静态的\",{\"1\":{\"4422\":1}}],[\"要求此局部变量声明为final的\",{\"1\":{\"4333\":1}}],[\"要求obj所在类要重写equals\",{\"1\":{\"2421\":1}}],[\"要求\",{\"1\":{\"1767\":1,\"5184\":1,\"5319\":1,\"5748\":1,\"6075\":1,\"6305\":1,\"6445\":1,\"7053\":1,\"7196\":1,\"7460\":1,\"7478\":1,\"7485\":1,\"7492\":1,\"7507\":1,\"7514\":1,\"7522\":1,\"7533\":1}}],[\"要开发的内容\",{\"1\":{\"1187\":1}}],[\"要用到一堆依赖\",{\"1\":{\"415\":1}}],[\"要根据项目的其他组件依赖进行选择\",{\"1\":{\"320\":1}}],[\"ⅱ\",{\"0\":{\"382\":1,\"493\":1,\"625\":1,\"671\":1,\"747\":1,\"785\":1,\"831\":1,\"889\":1,\"1000\":1,\"1084\":1,\"1139\":1,\"1428\":1,\"1578\":1,\"1632\":1,\"1739\":1,\"1842\":1,\"1976\":1,\"2063\":1,\"2172\":1,\"2450\":1,\"2570\":1,\"2647\":1,\"2706\":1,\"2869\":1,\"2925\":1,\"3047\":1,\"3085\":1,\"3264\":1,\"3358\":1,\"3487\":1,\"3615\":1,\"3712\":1,\"3833\":1,\"3914\":1,\"4040\":1,\"4168\":1,\"4262\":1,\"4374\":1,\"4470\":1,\"4570\":1,\"4650\":1,\"4682\":1,\"4707\":1,\"4789\":1,\"4846\":1,\"4914\":1,\"5096\":1,\"5155\":1,\"5311\":1,\"5487\":1,\"5540\":1,\"5605\":1,\"5644\":1,\"5769\":1,\"5852\":1,\"5965\":1,\"6029\":1,\"6060\":1,\"6146\":1,\"6234\":1,\"6321\":1,\"6379\":1,\"6450\":1,\"6634\":1,\"6688\":1,\"6721\":1,\"6844\":1,\"7033\":1,\"7069\":1,\"7232\":1,\"7368\":1,\"7425\":1,\"7458\":1,\"7563\":1,\"7739\":1,\"7769\":1,\"7836\":1,\"7925\":1,\"8175\":1,\"8252\":1,\"8379\":1,\"8419\":1,\"8520\":1,\"8714\":1,\"8762\":1,\"8838\":1,\"8899\":1,\"8945\":1,\"9071\":1,\"9129\":1,\"9210\":1,\"9329\":1,\"9490\":1,\"9554\":1,\"9621\":1,\"9671\":1,\"9809\":1,\"10047\":1,\"10152\":1,\"10179\":1,\"10225\":1,\"10274\":1,\"10318\":1,\"10374\":1,\"10468\":1,\"10493\":1,\"10600\":1,\"10735\":1,\"10796\":1}}],[\"所见即所得\",{\"1\":{\"10192\":1}}],[\"所存入的对象即为request对象\",{\"1\":{\"8891\":1}}],[\"所生成的元素序列\",{\"1\":{\"7550\":1}}],[\"所提供的方法性能也不高\",{\"1\":{\"6591\":1}}],[\"所占用\",{\"1\":{\"5416\":1}}],[\"所标注\",{\"1\":{\"5060\":2}}],[\"所标注内容\",{\"1\":{\"5036\":1}}],[\"所谓\",{\"1\":{\"6816\":1}}],[\"所谓泛型\",{\"1\":{\"5946\":1}}],[\"所谓javabean\",{\"1\":{\"4572\":1}}],[\"所谓类的单例设计模式\",{\"1\":{\"4416\":1}}],[\"所谓整合其实就是使用springboot技术去管理其他技术\",{\"1\":{\"961\":1}}],[\"所花费的时间为\",{\"1\":{\"3457\":1}}],[\"所在包\",{\"1\":{\"1221\":1}}],[\"所以仲裁器可\",{\"1\":{\"10460\":1}}],[\"所以它既可以存储比较复杂的数据类型\",{\"1\":{\"10077\":1}}],[\"所以默认不会采用电脑里的jdk\",{\"1\":{\"9889\":1}}],[\"所以默认重启后session将失效\",{\"1\":{\"9776\":1}}],[\"所以session本质是在内存中的\",{\"1\":{\"9743\":1}}],[\"所以stringbuffer的方法上都会带\",{\"1\":{\"1572\":1}}],[\"所以框架的使用者可以随便配置xml\",{\"1\":{\"9623\":1}}],[\"所以地址会发生变化\",{\"1\":{\"9151\":1}}],[\"所以会出现乱码\",{\"1\":{\"9042\":1}}],[\"所以map的值的类型为string数组\",{\"1\":{\"9017\":1}}],[\"所以此处就不需要手动关闭流了\",{\"1\":{\"8992\":1}}],[\"所以需要把请求方式变更为post\",{\"1\":{\"8975\":1}}],[\"所以需要进行清理\",{\"1\":{\"5134\":1}}],[\"所以tomcat提供了方法参数接口的具体实现类\",{\"1\":{\"8910\":1}}],[\"所以我们可以使用别人提供好的方法来简化代码的开发\",{\"1\":{\"9097\":1}}],[\"所以我们可以从request对象中获取请求的相关参数\",{\"1\":{\"8891\":1}}],[\"所以我们自定义servlet\",{\"1\":{\"8799\":1}}],[\"所以我们通常就不针对运行时异常编写try\",{\"1\":{\"4764\":1}}],[\"所以类中必然会重写service方法供tomcat\",{\"1\":{\"8724\":1}}],[\"所以不必关心涉及具体平台的问题\",{\"1\":{\"9476\":1}}],[\"所以不要手动关闭流\",{\"1\":{\"9087\":1}}],[\"所以不要同时出现\",{\"1\":{\"3805\":1}}],[\"所以不用担心没有起别名\",{\"1\":{\"8051\":1}}],[\"所以调用的是单参构造器\",{\"1\":{\"7519\":1}}],[\"所以调用的是student类的\",{\"1\":{\"4150\":1}}],[\"所以方法引用\",{\"1\":{\"7442\":1}}],[\"所以返回数组\",{\"1\":{\"7127\":1}}],[\"所以无法确定变量的类型\",{\"1\":{\"6951\":1}}],[\"所以无法创建该类的对象\",{\"1\":{\"2299\":1}}],[\"所以只关外层流也可以\",{\"1\":{\"6340\":1}}],[\"所以应该件\",{\"1\":{\"6206\":1}}],[\"所以应该使用\",{\"1\":{\"4832\":1}}],[\"所以在jdk1\",{\"1\":{\"5944\":1}}],[\"所以在开发中\",{\"1\":{\"3275\":1}}],[\"所以总会找到两个不同的输入拥有相同的哈希\",{\"1\":{\"5764\":1}}],[\"所以java采用了一种特殊的算法\",{\"1\":{\"5727\":1}}],[\"所以java采用的别的方法\",{\"1\":{\"5725\":1}}],[\"所以jdk对它进行了优化\",{\"1\":{\"3206\":1}}],[\"所以把while\",{\"1\":{\"5345\":1}}],[\"所以要用try\",{\"1\":{\"6249\":1}}],[\"所以要这样写\",{\"1\":{\"5263\":1}}],[\"所以要嵌套一个try\",{\"1\":{\"4753\":1}}],[\"所以多进程要比多线程健壮\",{\"1\":{\"5086\":1}}],[\"所以这些线程的run方法操作的是同一个对象的成员变量\",{\"1\":{\"5272\":1}}],[\"所以这里不用处理异常\",{\"1\":{\"4777\":1}}],[\"所以这个交换值的函数失败了\",{\"1\":{\"3783\":1}}],[\"所以可以合并成一个异常\",{\"1\":{\"4777\":1}}],[\"所以基本数据类型在赋值的时候\",{\"1\":{\"4657\":1}}],[\"所以该方法只会执行一次\",{\"1\":{\"8775\":1}}],[\"所以该方法必须是static的\",{\"1\":{\"4616\":1}}],[\"所以该方法的访问权限必须是public\",{\"1\":{\"4616\":1}}],[\"所以该文件默认是空的\",{\"1\":{\"457\":1}}],[\"所以理论上无法创建匿名对象\",{\"1\":{\"4457\":1}}],[\"所以系统进行了缓存\",{\"1\":{\"4247\":1}}],[\"所以才可以看到内存中有父类中的结构\",{\"1\":{\"4112\":1}}],[\"所以认为不可以继承\",{\"1\":{\"4033\":1}}],[\"所以认为可以继承\",{\"1\":{\"4030\":1}}],[\"所以其实二维元素的值是一个内存地址\",{\"1\":{\"3534\":1}}],[\"所以其后的字符具有特殊的意义\",{\"1\":{\"2670\":1}}],[\"所以一定不要忘了迭代条件\",{\"1\":{\"3400\":1}}],[\"所以一个连接可以被多线程复用\",{\"1\":{\"1043\":1}}],[\"所以也要求表达式1和表达式2的数据类型要一样\",{\"1\":{\"3318\":1}}],[\"所以也可以很方便的进行调用\",{\"1\":{\"2299\":1}}],[\"所以6取反的结果是\",{\"1\":{\"3310\":1}}],[\"所以结果是0\",{\"1\":{\"3273\":1}}],[\"所以机器可以只有加法而没有减法\",{\"1\":{\"3191\":1}}],[\"所以安装了jdk\",{\"1\":{\"2847\":1}}],[\"所以集合元素如果都相同\",{\"1\":{\"2439\":1}}],[\"所以\",{\"1\":{\"1738\":1,\"2671\":1,\"4157\":1,\"4577\":1,\"5764\":1,\"5817\":1,\"5819\":1,\"5840\":1,\"6930\":1,\"7059\":1}}],[\"所以整合后操作肯定要简化一些\",{\"1\":{\"964\":1}}],[\"所以想要查看sql语句的话\",{\"1\":{\"952\":1}}],[\"所以运行时提示找不到主清单属性\",{\"1\":{\"742\":1}}],[\"所以仅仅运行restart类加载即可\",{\"1\":{\"546\":1}}],[\"所以没有深入探索复杂内容\",{\"1\":{\"261\":1,\"270\":1}}],[\"所有数据库用户角色\",{\"1\":{\"10666\":1}}],[\"所有数据库连接对象的父类都是\",{\"1\":{\"4141\":1}}],[\"所有存储在集合中的数据都是\",{\"1\":{\"10242\":1}}],[\"所有单词的倒排列表往往顺序地存储在磁盘的某个文件里\",{\"1\":{\"9974\":1}}],[\"所有单词的首字母大写\",{\"1\":{\"3068\":1}}],[\"所有用户的所有请求数据\",{\"1\":{\"9242\":1}}],[\"所有用户访问后\",{\"1\":{\"8400\":1}}],[\"所有页面都可以获取session中的数据\",{\"1\":{\"9195\":1}}],[\"所有配置项都有默认值\",{\"1\":{\"8836\":1}}],[\"所有配置文件都不需要管\",{\"1\":{\"381\":1}}],[\"所有函数必须以方法的形式属于某个类\",{\"1\":{\"7399\":1}}],[\"所有动态代理类的父类\",{\"0\":{\"7255\":1}}],[\"所有需要访问和使用类数据只能通过这个class对象\",{\"1\":{\"7011\":1}}],[\"所有线程\",{\"1\":{\"5450\":1}}],[\"所有线程开始重新争抢这把锁\",{\"1\":{\"5355\":1}}],[\"所有非静态方法共用同一把锁\",{\"1\":{\"5359\":1}}],[\"所有没有默认值的成员\",{\"1\":{\"4938\":1}}],[\"所有基本类型\",{\"1\":{\"4930\":1}}],[\"所有基本的sql操作方法就自动添加了\",{\"1\":{\"1010\":1}}],[\"所有属性\",{\"1\":{\"4575\":1}}],[\"所有类都是引用数据类型\",{\"1\":{\"3623\":1}}],[\"所有代码都要归属为一个对象\",{\"1\":{\"3614\":1}}],[\"所有case子句中的常量值互不相同\",{\"1\":{\"3369\":1}}],[\"所有字母都大写\",{\"1\":{\"3070\":1}}],[\"所有打开的流资源\",{\"1\":{\"2061\":1}}],[\"所有number类的子类都实现了comparable接口\",{\"1\":{\"1852\":1}}],[\"所有包装类\",{\"1\":{\"1845\":1}}],[\"所有的字符集都是和具体编码方案绑定在一起的\",{\"1\":{\"6426\":1}}],[\"所有的文字都用两个字节来表示\",{\"1\":{\"6421\":1}}],[\"所有的entry构成的集合是set\",{\"1\":{\"5821\":1}}],[\"所有的value构成的集合是collection\",{\"1\":{\"5819\":1}}],[\"所有的key构成的集合是set\",{\"1\":{\"5817\":1}}],[\"所有的对象实例以及数组都要在堆上分配内存\",{\"1\":{\"4632\":1}}],[\"所有的java类具有java\",{\"1\":{\"4025\":1}}],[\"所有的java类\",{\"1\":{\"4024\":1}}],[\"所有的方法必须定义在类里\",{\"1\":{\"3715\":1}}],[\"所有的服务器将不再设置自己的配置文件\",{\"1\":{\"814\":1}}],[\"所有的依赖都是没有版本的\",{\"1\":{\"388\":1}}],[\"所有springboot项目依赖的jar包都在这里了\",{\"1\":{\"724\":1}}],[\"运算时会\",{\"1\":{\"4222\":1}}],[\"运算符来实现\",{\"1\":{\"10295\":1}}],[\"运算符优先级\",{\"0\":{\"3326\":1}}],[\"运算符\",{\"0\":{\"3248\":1}}],[\"运算符两边习惯性各加一个空格\",{\"1\":{\"2993\":1}}],[\"运算的结构是将这些值连接起来了\",{\"1\":{\"3240\":1}}],[\"运算的规则\",{\"0\":{\"3154\":1}}],[\"运算\",{\"1\":{\"1882\":1}}],[\"运维信息记录使用warn即可\",{\"1\":{\"900\":1}}],[\"运维工程师\",{\"1\":{\"115\":1}}],[\"运营期记录信息\",{\"1\":{\"876\":1}}],[\"运行在服务器端\",{\"1\":{\"8670\":1}}],[\"运行在jvm\",{\"1\":{\"2815\":1}}],[\"运行目录\",{\"0\":{\"8492\":1}}],[\"运行的类\",{\"1\":{\"6980\":1}}],[\"运行的是编译后的\",{\"1\":{\"2895\":1}}],[\"运行异常\",{\"0\":{\"4708\":1,\"4710\":1,\"4715\":1,\"4717\":1,\"4719\":1,\"4721\":1}}],[\"运行到这里\",{\"1\":{\"4241\":1}}],[\"运行时类的属性\",{\"1\":{\"7183\":1}}],[\"运行时类的对象\",{\"0\":{\"7051\":1}}],[\"运行时类\",{\"0\":{\"7050\":1}}],[\"运行时类型由实际赋给该变量的对象决定\",{\"1\":{\"4119\":1}}],[\"运行时结构不可变的语言就是静态语言\",{\"1\":{\"6926\":1}}],[\"运行时就不会产生\",{\"1\":{\"5955\":1}}],[\"运行时动态处理\",{\"1\":{\"4895\":1}}],[\"运行时被读取\",{\"1\":{\"4880\":1}}],[\"运行时出现了异常\",{\"1\":{\"4788\":1}}],[\"运行时异常不会报编译时错误\",{\"1\":{\"4803\":1}}],[\"运行时异常的排查\",{\"0\":{\"4787\":1}}],[\"运行时异常\",{\"0\":{\"4704\":1},\"1\":{\"4699\":1,\"4763\":1,\"4799\":1}}],[\"运行时才会发生\",{\"1\":{\"4697\":1}}],[\"运行时执行的是右边\",{\"1\":{\"4129\":1}}],[\"运行看右边\",{\"1\":{\"4120\":1}}],[\"运行class文件时\",{\"1\":{\"2906\":1}}],[\"运行代码\",{\"0\":{\"2893\":1}}],[\"运行环境\",{\"1\":{\"2843\":1}}],[\"运行堆栈信息\",{\"1\":{\"893\":1}}],[\"运行报错\",{\"1\":{\"742\":1}}],[\"运行当前工程时会使用依赖的jar包\",{\"1\":{\"740\":1}}],[\"运行\",{\"0\":{\"695\":1},\"1\":{\"2885\":1,\"4825\":1,\"5290\":1}}],[\"运行main方法就可以启动项目\",{\"1\":{\"424\":1}}],[\"运行启动类时会运行当前工程的内容\",{\"1\":{\"739\":1}}],[\"运行启动类\",{\"1\":{\"374\":1}}],[\"并启动所有节点\",{\"1\":{\"10812\":1}}],[\"并上传到服务器的\",{\"1\":{\"10154\":1}}],[\"并对访问量进行升序排列\",{\"1\":{\"10338\":1}}],[\"并对这些信息进行多维度的分析\",{\"1\":{\"10037\":1}}],[\"并对每个不同的单词赋予唯一的单词编号\",{\"1\":{\"9994\":1}}],[\"并对collection的很多方法进行了重载\",{\"1\":{\"2523\":1,\"5680\":1}}],[\"并调取seesion对象的值\",{\"1\":{\"9768\":1}}],[\"并调用service方法\",{\"1\":{\"8880\":1}}],[\"并调用start\",{\"1\":{\"5185\":1,\"5483\":1}}],[\"并调用重写的run方法\",{\"1\":{\"5261\":1}}],[\"并调用对象中的run方法\",{\"1\":{\"5175\":1}}],[\"并指定cookie存在的时间\",{\"1\":{\"9773\":1}}],[\"并指定cookie存活时间\",{\"1\":{\"9720\":1}}],[\"并指定跳转的页面\",{\"1\":{\"1273\":1}}],[\"并逐渐将其模块模块化\",{\"1\":{\"9489\":1}}],[\"并传入参数\",{\"1\":{\"9004\":1}}],[\"并完成了对象的创建\",{\"1\":{\"8910\":1}}],[\"并会将服务的响应返回给请求处\",{\"1\":{\"8771\":1}}],[\"并配置tomcat和servlet\",{\"1\":{\"8698\":1}}],[\"并自动调用server方法\",{\"1\":{\"8696\":1}}],[\"并重写接口中所有方法\",{\"1\":{\"8703\":1}}],[\"并重写所有方法\",{\"1\":{\"8691\":1}}],[\"并重写connectdb方法\",{\"1\":{\"7200\":1}}],[\"并重写compareto方法\",{\"1\":{\"5777\":1}}],[\"并重写call\",{\"1\":{\"5469\":1}}],[\"并由web服务器运行servlet\",{\"1\":{\"8672\":1}}],[\"并进行初始化\",{\"1\":{\"10805\":1}}],[\"并进行一些操作\",{\"1\":{\"8796\":1,\"8823\":1}}],[\"并进行启动\",{\"1\":{\"8632\":1}}],[\"并进行基本的application配置\",{\"1\":{\"1094\":1}}],[\"并输入<h1>hi\",{\"1\":{\"8623\":1}}],[\"并点击右边的\",{\"1\":{\"8620\":1}}],[\"并实现customerdao接口\",{\"1\":{\"8174\":1}}],[\"并实现一个接口\",{\"0\":{\"4870\":1}}],[\"并给占位符赋值\",{\"1\":{\"8045\":1,\"8054\":1}}],[\"并给对象属性赋值\",{\"1\":{\"4843\":1,\"4859\":1}}],[\"并接受数据库服务器返回的结果\",{\"1\":{\"7880\":1}}],[\"并统一放回到一个集合中返回\",{\"1\":{\"7646\":1}}],[\"并产生结果\",{\"1\":{\"7558\":1}}],[\"并做一些增强\",{\"1\":{\"7263\":1}}],[\"并声明producecloth方法用于生产服装\",{\"1\":{\"7218\":1}}],[\"并掉用user\",{\"1\":{\"7202\":1}}],[\"并能直接操作任意对象的内部属性及方法\",{\"1\":{\"6922\":1}}],[\"并能够将文件中的java基本数据类型和string数据读取还愿\",{\"1\":{\"6463\":1}}],[\"并获取返回值\",{\"1\":{\"7297\":1}}],[\"并获取请求的套接字对象\",{\"1\":{\"6819\":1}}],[\"并获取线程名\",{\"1\":{\"5219\":1}}],[\"并绑定到指定端口上\",{\"1\":{\"6806\":1}}],[\"并为每个字符规定了唯一确定的编号\",{\"1\":{\"6428\":1}}],[\"并使用1\",{\"1\":{\"10335\":1}}],[\"并使用了orm对象来处理查询的数据\",{\"1\":{\"8036\":1}}],[\"并使用一个名字命名\",{\"1\":{\"3461\":1}}],[\"并使编码无国界\",{\"1\":{\"6427\":1}}],[\"并一一对应\",{\"1\":{\"6414\":1}}],[\"并通过用户认证连接副本集\",{\"1\":{\"10780\":1}}],[\"并通过war包部署\",{\"0\":{\"8464\":1}}],[\"并通过集合获取stream\",{\"1\":{\"7616\":1}}],[\"并通过\",{\"1\":{\"6152\":1}}],[\"并通过编号的方式对这些数据进行统一管理\",{\"1\":{\"3461\":1}}],[\"并加载配置信息\",{\"0\":{\"5925\":1}}],[\"并加入ioc容器\",{\"1\":{\"987\":1}}],[\"并添加元素\",{\"1\":{\"5588\":1}}],[\"并释放同步监视器\",{\"1\":{\"5438\":1}}],[\"并释放自己占有的锁\",{\"1\":{\"5413\":1}}],[\"并释放锁\",{\"1\":{\"5368\":1,\"5464\":1}}],[\"并临时中止自己的执行\",{\"1\":{\"5291\":1}}],[\"并列执行的才是多线程\",{\"1\":{\"5141\":1}}],[\"并用这个符号表的索引对应实际的空间\",{\"1\":{\"5129\":1}}],[\"并用break根据条件退出循环\",{\"1\":{\"3411\":1}}],[\"并把实现类的示例对象作为实参传入\",{\"1\":{\"7262\":1}}],[\"并把我们的变量名\",{\"1\":{\"5129\":1}}],[\"并把该\",{\"1\":{\"4889\":1}}],[\"并发效率会有所下降\",{\"1\":{\"8291\":1}}],[\"并发进程\",{\"1\":{\"5422\":1}}],[\"并发\",{\"1\":{\"5095\":1}}],[\"并发所有的文件修改都会触发热部署\",{\"1\":{\"567\":1}}],[\"并行流\",{\"0\":{\"7569\":1}}],[\"并行\",{\"1\":{\"5094\":1}}],[\"并行与并发\",{\"0\":{\"5093\":1}}],[\"并行执行多个线程\",{\"1\":{\"5078\":1}}],[\"并打印出来\",{\"1\":{\"5060\":2}}],[\"并测试枚举类的方法\",{\"0\":{\"4873\":1}}],[\"并需要重写接口中的方法\",{\"1\":{\"4872\":1}}],[\"并在下次请求时携带cookie\",{\"0\":{\"9702\":1}}],[\"并在下一次请求时携带cookie\",{\"1\":{\"9676\":1}}],[\"并在方法中判断请求方式是get还是post\",{\"1\":{\"9002\":1}}],[\"并在service方法中打印hello\",{\"1\":{\"8703\":1}}],[\"并在该方法中\",{\"1\":{\"7221\":1}}],[\"并在构造器中初始化\",{\"1\":{\"4840\":1}}],[\"并在生成的boot打包文件\",{\"1\":{\"867\":1}}],[\"并没有关闭数据库的物理连接\",{\"1\":{\"8251\":1}}],[\"并没有预装驱动\",{\"1\":{\"7816\":1}}],[\"并没有创建长度为10的数组\",{\"1\":{\"5659\":1}}],[\"并没有真正将异常处理掉\",{\"1\":{\"4780\":1}}],[\"并没有重新\",{\"1\":{\"4068\":1}}],[\"并抛出\",{\"1\":{\"4691\":1,\"4792\":1}}],[\"并易于维护\",{\"1\":{\"4685\":1}}],[\"并保存为静态属性\",{\"1\":{\"4420\":1}}],[\"并保存项目\",{\"1\":{\"361\":1}}],[\"并根据子类的需求创建不同的方法体\",{\"1\":{\"4043\":1}}],[\"并设置好编码\",{\"1\":{\"9101\":1}}],[\"并设置线程名\",{\"1\":{\"5219\":1}}],[\"并设置\",{\"1\":{\"3820\":1}}],[\"并设置新增文件的时机\",{\"1\":{\"933\":1}}],[\"并非真正的开启用户验证\",{\"1\":{\"10732\":1}}],[\"并非真正解决了异常\",{\"1\":{\"4679\":1}}],[\"并非替换关系\",{\"1\":{\"8321\":1}}],[\"并非在实例化类时确定\",{\"1\":{\"6049\":1}}],[\"并非一定是在高优先级线程之后才被调用\",{\"1\":{\"5250\":1}}],[\"并非专门用于结束循环的\",{\"1\":{\"3438\":1}}],[\"并非是空数组过去的\",{\"1\":{\"2055\":1,\"6262\":1}}],[\"并计算所有偶数的和及偶数的个数\",{\"1\":{\"3419\":1}}],[\"并判断读入的正数和负数的个数\",{\"1\":{\"3413\":1}}],[\"并创建以下三个账户\",{\"1\":{\"10705\":1}}],[\"并创建一个实现同样接口的类\",{\"1\":{\"7290\":1}}],[\"并创建一个rest风格的controller\",{\"1\":{\"371\":1}}],[\"并创建了数组groups和locals\",{\"1\":{\"2768\":1}}],[\"并且进行启动\",{\"1\":{\"10803\":1}}],[\"并且当主库当掉时在不需要用户干预的情况下自动\",{\"1\":{\"10439\":1}}],[\"并且小于2000的文档\",{\"1\":{\"10357\":1}}],[\"并且每个单词都有对应的含有该单词的文档列表即倒排列表\",{\"1\":{\"9994\":1}}],[\"并且创建request对象传递到service方法\",{\"1\":{\"8915\":1}}],[\"并且两个都是接口\",{\"1\":{\"8906\":1}}],[\"并且两个对象的\",{\"1\":{\"5705\":1}}],[\"并且在关闭连接时不抛出sql异常\",{\"1\":{\"8343\":1}}],[\"并且在编译期间会进行语法检查\",{\"1\":{\"4965\":1}}],[\"并且使用dbutils能极大简化jdbc编码的工作量\",{\"1\":{\"8331\":1}}],[\"并且保证安全性\",{\"1\":{\"8308\":1}}],[\"并且该值会作为参数传给它\",{\"1\":{\"7755\":1}}],[\"并且可以避免空指针异常\",{\"1\":{\"7732\":1}}],[\"并且可由jvm读入\",{\"1\":{\"4967\":1,\"4968\":1}}],[\"并且是在程序运行时根据需要动态创建目标类的代理对象\",{\"1\":{\"7211\":1}}],[\"并且后跟\",{\"1\":{\"6782\":1}}],[\"并且它实现了datainput\",{\"1\":{\"6489\":1}}],[\"并且没有释放锁l1的情况下\",{\"1\":{\"5424\":1}}],[\"并且具有更好的扩展性\",{\"1\":{\"5381\":1}}],[\"并且与\",{\"1\":{\"4955\":1}}],[\"并且\",{\"1\":{\"4952\":1,\"6641\":1}}],[\"并且main\",{\"1\":{\"4774\":1}}],[\"并且其他的开发者可以通过内部的jsp页面\",{\"1\":{\"4579\":1}}],[\"并且提供set\",{\"1\":{\"4575\":1}}],[\"并且不再判断是否满足case了\",{\"1\":{\"3365\":1}}],[\"并且以\",{\"1\":{\"2738\":1}}],[\"并且java\",{\"1\":{\"1622\":1}}],[\"并取出指针指向的集合元素\",{\"1\":{\"2463\":1,\"5583\":1}}],[\"并将查找的结果反馈给用户的检索方式\",{\"1\":{\"9866\":1}}],[\"并将jar包导入项目\",{\"1\":{\"8257\":1}}],[\"并将子集合全部转化为stream\",{\"1\":{\"7665\":1}}],[\"并将自己调用的方法名\",{\"1\":{\"7295\":1}}],[\"并将这些静态数据转换成方法区的运行时数据结构\",{\"1\":{\"7011\":1}}],[\"并将原有的数据复制过来\",{\"1\":{\"5868\":1}}],[\"并将数据加到elementdata\",{\"1\":{\"5659\":1}}],[\"并将此对象抛出\",{\"1\":{\"4687\":1}}],[\"并将交集返回到当前的集合中\",{\"1\":{\"2435\":1}}],[\"并将差集从当前集合中移除\",{\"1\":{\"2432\":1}}],[\"并继续向下执行代码\",{\"1\":{\"2335\":1,\"2792\":1}}],[\"并返回结果集\",{\"1\":{\"8037\":1,\"8045\":1,\"8054\":1,\"8089\":1}}],[\"并返回该行的数据\",{\"1\":{\"8004\":1}}],[\"并返回preparestatemet对象\",{\"1\":{\"7936\":1}}],[\"并返回一个新集合是\",{\"1\":{\"7664\":1}}],[\"并返回value\",{\"1\":{\"2594\":1}}],[\"并返回读到的数据\",{\"1\":{\"2118\":1}}],[\"并返回false\",{\"1\":{\"2005\":1}}],[\"并提供了真的不同请求方式的请求方法\",{\"1\":{\"8797\":1,\"8824\":1}}],[\"并提供\",{\"1\":{\"1867\":1}}],[\"并不重要\",{\"1\":{\"10366\":1}}],[\"并不是所有的java代码\",{\"1\":{\"8677\":1}}],[\"并不是真正的关闭了链接\",{\"1\":{\"8143\":1}}],[\"并不是泛型方法\",{\"1\":{\"6037\":1}}],[\"并不是对象\",{\"1\":{\"3659\":1}}],[\"并不意味着只有当高优先级的线程执行完以后\",{\"1\":{\"5245\":1}}],[\"并不会提供异常信息\",{\"1\":{\"6591\":1}}],[\"并不会报异常\",{\"1\":{\"6268\":1}}],[\"并不会处理异常\",{\"1\":{\"4770\":1}}],[\"并不会去父类中查找\",{\"1\":{\"4086\":1}}],[\"并不提供实现体\",{\"1\":{\"3995\":1}}],[\"并不返回任何结果\",{\"1\":{\"2644\":1}}],[\"并不包含当前的时间信息\",{\"1\":{\"1634\":1}}],[\"并不常用\",{\"1\":{\"675\":1}}],[\"并填写增强的实体类作为泛型\",{\"1\":{\"1268\":1}}],[\"并制作成独立的配置文件\",{\"1\":{\"846\":1}}],[\"并执行mongodb命令\",{\"1\":{\"10175\":1}}],[\"并执行相应的处理\",{\"1\":{\"4880\":1}}],[\"并执行其方法体\",{\"1\":{\"4525\":1}}],[\"并执行\",{\"1\":{\"726\":1}}],[\"并交给了spring的ioc容器\",{\"1\":{\"441\":1}}],[\"并安装\",{\"1\":{\"386\":1}}],[\"ⅰ\",{\"0\":{\"367\":1,\"478\":1,\"586\":1,\"649\":1,\"684\":1,\"765\":1,\"823\":1,\"873\":1,\"973\":1,\"1061\":1,\"1125\":1,\"1418\":1,\"1533\":1,\"1608\":1,\"1729\":1,\"1793\":1,\"1947\":1,\"2024\":1,\"2126\":1,\"2295\":1,\"2393\":1,\"2520\":1,\"2643\":1,\"2686\":1,\"2839\":1,\"2879\":1,\"2996\":1,\"3072\":1,\"3249\":1,\"3340\":1,\"3459\":1,\"3596\":1,\"3666\":1,\"3808\":1,\"3889\":1,\"3998\":1,\"4115\":1,\"4201\":1,\"4360\":1,\"4442\":1,\"4545\":1,\"4629\":1,\"4663\":1,\"4695\":1,\"4766\":1,\"4817\":1,\"4876\":1,\"5062\":1,\"5139\":1,\"5296\":1,\"5466\":1,\"5519\":1,\"5566\":1,\"5622\":1,\"5683\":1,\"5796\":1,\"5938\":1,\"5985\":1,\"6051\":1,\"6104\":1,\"6222\":1,\"6308\":1,\"6362\":1,\"6434\":1,\"6579\":1,\"6661\":1,\"6713\":1,\"6826\":1,\"7006\":1,\"7051\":1,\"7191\":1,\"7334\":1,\"7395\":1,\"7440\":1,\"7539\":1,\"7730\":1,\"7768\":1,\"7814\":1,\"7878\":1,\"8164\":1,\"8212\":1,\"8328\":1,\"8393\":1,\"8511\":1,\"8687\":1,\"8744\":1,\"8829\":1,\"8869\":1,\"8924\":1,\"9056\":1,\"9103\":1,\"9176\":1,\"9315\":1,\"9466\":1,\"9536\":1,\"9590\":1,\"9650\":1,\"9807\":1,\"10013\":1,\"10126\":1,\"10174\":1,\"10201\":1,\"10243\":1,\"10304\":1,\"10363\":1,\"10436\":1,\"10474\":1,\"10590\":1,\"10700\":1,\"10787\":1}}],[\"文本索引\",{\"1\":{\"10372\":1}}],[\"文本查询\",{\"1\":{\"10044\":1}}],[\"文本\",{\"1\":{\"9229\":1,\"9468\":1}}],[\"文本文件也可以做为字节流进行io\",{\"1\":{\"6376\":1}}],[\"文本文件读取\",{\"0\":{\"6250\":1}}],[\"文本文件\",{\"1\":{\"6208\":1}}],[\"文字==字符集转码==>计算机能够识别的二进制\",{\"1\":{\"3127\":1}}],[\"文件设计\",{\"0\":{\"10488\":1}}],[\"文件夹\",{\"1\":{\"10148\":1}}],[\"文件启动\",{\"1\":{\"9888\":1}}],[\"文件目录\",{\"1\":{\"9888\":1,\"10484\":1}}],[\"文件记录量达到数十万或数百万个甚至更多\",{\"1\":{\"9858\":1}}],[\"文件到一个文件\",{\"1\":{\"9468\":1}}],[\"文件可能存在于以下三个地方\",{\"1\":{\"9257\":1}}],[\"文件的时候自动创建的\",{\"1\":{\"9473\":1}}],[\"文件的内容中\",{\"1\":{\"9473\":1}}],[\"文件的工作路径\",{\"0\":{\"9256\":1}}],[\"文件的复制\",{\"0\":{\"6286\":1},\"1\":{\"6616\":1}}],[\"文件选择\",{\"1\":{\"8425\":1}}],[\"文件大小的限制\",{\"0\":{\"8076\":1}}],[\"文件结束符\",{\"1\":{\"6781\":1}}],[\"文件内容加上数字化签名\",{\"1\":{\"9479\":1}}],[\"文件内容\",{\"1\":{\"6346\":1}}],[\"文件内容和自动创建的一样\",{\"1\":{\"365\":1}}],[\"文件和目录\",{\"1\":{\"6108\":1}}],[\"文件和目录创建的路径和名字就是file对象的路径和名字\",{\"1\":{\"1997\":1,\"6142\":1}}],[\"文件和文件目录路径的抽象表示形式\",{\"1\":{\"6106\":1}}],[\"文件复制开启\",{\"1\":{\"5099\":1}}],[\"文件中\",{\"1\":{\"4966\":1,\"4967\":1}}],[\"文件传输失败\",{\"1\":{\"4753\":1}}],[\"文件打开失败\",{\"1\":{\"4753\":1}}],[\"文件进行\",{\"1\":{\"2885\":1}}],[\"文件进行编译\",{\"1\":{\"2884\":1}}],[\"文件\",{\"1\":{\"2882\":1,\"7972\":1,\"8474\":1,\"9473\":1,\"9784\":1}}],[\"文件对象\",{\"1\":{\"2082\":1}}],[\"文件不存在会返回false\",{\"1\":{\"2021\":1}}],[\"文件重命名\",{\"1\":{\"2012\":1}}],[\"文件创建失败\",{\"1\":{\"2003\":1}}],[\"文件创建成功\",{\"1\":{\"2003\":1}}],[\"文件已存在\",{\"1\":{\"2003\":1}}],[\"文件是可以没有后缀的\",{\"1\":{\"1999\":1,\"6144\":1}}],[\"文件格式\",{\"0\":{\"460\":1}}],[\"文件名>\",{\"1\":{\"6869\":1}}],[\"文件名就是类名\",{\"1\":{\"2922\":1}}],[\"文件名区分大小写\",{\"1\":{\"2889\":1}}],[\"文件名不改\",{\"1\":{\"2013\":1}}],[\"文件名\",{\"0\":{\"458\":1},\"1\":{\"2083\":2,\"6239\":1,\"6275\":1,\"6297\":1,\"6881\":1,\"7870\":1}}],[\"文件坐标\",{\"1\":{\"397\":1}}],[\"文档查询\",{\"0\":{\"10303\":1}}],[\"文档键命名规范\",{\"0\":{\"10270\":1}}],[\"文档增删改\",{\"0\":{\"10240\":1}}],[\"文档中还可以包含javascript代码\",{\"1\":{\"10113\":1}}],[\"文档的分页查询\",{\"0\":{\"10318\":1}}],[\"文档的插入\",{\"0\":{\"10243\":1}}],[\"文档的12字节的唯一\",{\"1\":{\"10092\":1}}],[\"文档的格式存储在磁盘上\",{\"1\":{\"10079\":1}}],[\"文档\",{\"1\":{\"10062\":1,\"10078\":1,\"10079\":1,\"10242\":1,\"10568\":1}}],[\"文档型数据库\",{\"1\":{\"10014\":1}}],[\"文档id\",{\"1\":{\"9999\":1,\"10011\":1}}],[\"文档7的id\",{\"1\":{\"9969\":1}}],[\"文档4的id\",{\"1\":{\"9969\":1}}],[\"文档3的id\",{\"1\":{\"9968\":1}}],[\"文档2的id\",{\"1\":{\"9968\":1}}],[\"文档→单词\",{\"1\":{\"9967\":1}}],[\"文档矩阵是表达两者之间所具有的一种包含关系的概念模型\",{\"1\":{\"9932\":1}}],[\"文档矩阵\",{\"0\":{\"9929\":1},\"1\":{\"9965\":1}}],[\"文档标注\",{\"1\":{\"2967\":1,\"2978\":1}}],[\"文档注释是可以写标签的<\",{\"1\":{\"2962\":1}}],[\"文档注释格式\",{\"0\":{\"2941\":1}}],[\"文档注释可以用来生成api文档\",{\"1\":{\"2936\":1}}],[\"文档注释\",{\"0\":{\"2935\":1}}],[\"文档处理\",{\"1\":{\"234\":1}}],[\"文档分析\",{\"1\":{\"233\":1}}],[\"文档操作\",{\"1\":{\"215\":1,\"221\":1}}],[\"文档迁移中\",{\"1\":{\"31\":1,\"34\":1,\"37\":1,\"40\":1,\"43\":1,\"46\":1,\"49\":1,\"52\":1,\"55\":1,\"58\":1,\"61\":1,\"64\":1,\"67\":1,\"104\":1,\"159\":1,\"165\":1,\"171\":1,\"177\":1,\"183\":1,\"189\":1,\"195\":1,\"201\":1,\"204\":1,\"207\":1,\"274\":1,\"277\":1,\"280\":1,\"283\":1}}],[\"解压即可\",{\"1\":{\"10156\":1}}],[\"解压即可使用\",{\"1\":{\"8428\":1}}],[\"解压后需要在mongodb目录下新建目录和配置文件\",{\"1\":{\"10158\":1}}],[\"解压后\",{\"1\":{\"9888\":1}}],[\"解压后的驱动文件\",{\"1\":{\"7822\":1}}],[\"解压项目\",{\"1\":{\"362\":1}}],[\"解答\",{\"1\":{\"5268\":1}}],[\"解释\",{\"1\":{\"4537\":1,\"4541\":1}}],[\"解释运行器才会确定所要调用的具体方法\",{\"1\":{\"4158\":1}}],[\"解密解不出\",{\"1\":{\"3132\":1}}],[\"解析\",{\"0\":{\"1706\":1,\"7450\":1,\"8673\":1,\"8718\":1},\"1\":{\"1694\":1,\"1719\":1,\"4103\":1,\"4465\":1,\"4468\":1,\"7016\":1,\"7464\":1,\"7475\":1,\"7482\":1,\"7489\":1,\"7497\":1,\"7519\":1,\"10527\":1}}],[\"解码就是将byte\",{\"1\":{\"1503\":1}}],[\"解码\",{\"1\":{\"1503\":1,\"6373\":1}}],[\"解决的问题\",{\"0\":{\"10027\":1}}],[\"解决了上述问题\",{\"1\":{\"9007\":1}}],[\"解决了sql注入问题\",{\"1\":{\"7899\":1}}],[\"解决了statement的拼串问题\",{\"1\":{\"7898\":1}}],[\"解决如何高效的进行数据传输\",{\"1\":{\"6650\":1}}],[\"解决如何找到和定位主机\",{\"1\":{\"6649\":1}}],[\"解决获取数据元素时\",{\"1\":{\"5954\":1}}],[\"解决获取元素时强制类型转换的问题\",{\"0\":{\"5953\":1}}],[\"解决元素存储的安全性问题\",{\"1\":{\"5952\":1}}],[\"解决元素安全性问题\",{\"0\":{\"5951\":1}}],[\"解决懒汉式单例模式的线程安全问题\",{\"0\":{\"5346\":1}}],[\"解决特定的问题而用计算机语言编写的命令序列集合\",{\"1\":{\"5066\":1,\"5067\":1}}],[\"解决方法\",{\"0\":{\"5409\":1},\"1\":{\"4676\":1}}],[\"解决方案可以通过配置连接池使每个连接专用\",{\"1\":{\"1042\":1}}],[\"解决方案\",{\"0\":{\"5307\":1,\"9001\":1,\"9043\":1},\"1\":{\"345\":1,\"5343\":1,\"5349\":1,\"7424\":1,\"8050\":1,\"9901\":1}}],[\"解决类命名冲突的问题\",{\"1\":{\"3922\":1}}],[\"解决乱码问题\",{\"1\":{\"3130\":1}}],[\"解决\",{\"1\":{\"1251\":1,\"1255\":1,\"4532\":1,\"8451\":1,\"8455\":1,\"8755\":1,\"10586\":1}}],[\"会连接失败\",{\"1\":{\"10594\":1}}],[\"会连接这些ip\",{\"1\":{\"10594\":1}}],[\"会在内存中创建一个session对象\",{\"1\":{\"9764\":1}}],[\"会在当前目录下生成一个编译后的文件\",{\"1\":{\"2890\":1}}],[\"会携带上cookie\",{\"1\":{\"9704\":1}}],[\"会包含main\",{\"1\":{\"9473\":1}}],[\"会用到一个contextloaderlistener\",{\"1\":{\"9442\":1}}],[\"会话数据储存在内存中\",{\"1\":{\"9721\":1}}],[\"会话追踪技术\",{\"0\":{\"9668\":1}}],[\"会话跟踪\",{\"0\":{\"9660\":1}}],[\"会话被建立后\",{\"1\":{\"9655\":1}}],[\"会话建立\",{\"1\":{\"9652\":1}}],[\"会话\",{\"0\":{\"9651\":1}}],[\"会话结束\",{\"1\":{\"9203\":1,\"9652\":1}}],[\"会话技术介绍\",{\"0\":{\"9650\":1}}],[\"会话技术\",{\"0\":{\"9646\":1},\"1\":{\"11\":1}}],[\"会解析response对象\",{\"1\":{\"8897\":1}}],[\"会对http请求中的数据进行解析并把解析结果存入到一个对象中\",{\"1\":{\"8890\":1}}],[\"会对数据的大小进行限制\",{\"1\":{\"8077\":1}}],[\"会创建request和response对象\",{\"1\":{\"8879\":1}}],[\"会创建一个内部缓冲区数组\",{\"1\":{\"6312\":1}}],[\"会把默认的覆盖掉\",{\"1\":{\"8862\":1}}],[\"会覆盖掉tomcat中的defaultservlet\",{\"1\":{\"8861\":1}}],[\"会覆盖掉defaultservlet\",{\"1\":{\"8860\":1}}],[\"会通过继承httpservlet\",{\"1\":{\"8799\":1}}],[\"会访问两种资源\",{\"1\":{\"8674\":1}}],[\"会导致tomcat选项中\",{\"1\":{\"8636\":1}}],[\"会导致其他对象调用此静态变量时\",{\"1\":{\"4379\":1}}],[\"会被放入web\",{\"1\":{\"8518\":1}}],[\"会被放到web\",{\"1\":{\"8517\":1}}],[\"会影响到其他项目\",{\"1\":{\"8479\":1}}],[\"会影响主线程\",{\"1\":{\"5092\":1}}],[\"会显示端口号和pid\",{\"1\":{\"8452\":1}}],[\"会显示所有跟sql相关的操作\",{\"1\":{\"1228\":1}}],[\"会提示\",{\"1\":{\"7832\":1}}],[\"会生成不同类型的stream\",{\"1\":{\"7577\":1}}],[\"会生成一个或多个字节码文件\",{\"1\":{\"6969\":1}}],[\"会缓存一定的时间\",{\"1\":{\"6991\":1}}],[\"会将新条目附加到现有日志文件的末尾\",{\"1\":{\"10162\":1}}],[\"会将sessionid储存到cookie中\",{\"1\":{\"9762\":1}}],[\"会将类加载到内存中\",{\"1\":{\"6972\":1}}],[\"会将获取的索引内容都当做字符串处理\",{\"1\":{\"2338\":1,\"2795\":1}}],[\"会出现异常\",{\"1\":{\"6790\":1}}],[\"会出现illegalmonitorstateexception异常\",{\"1\":{\"5454\":1}}],[\"会继续从上一次的地方下载\",{\"1\":{\"6528\":1}}],[\"会相应关闭内层节点流\",{\"1\":{\"6318\":1}}],[\"会无法解析\",{\"1\":{\"6210\":1}}],[\"会涉及到扩容问题\",{\"1\":{\"5868\":1}}],[\"会根据自己定义的排序方式进行排序\",{\"1\":{\"5782\":1}}],[\"会根据添加数据的顺序进行遍历\",{\"1\":{\"5774\":1}}],[\"会根据参数\",{\"1\":{\"3871\":1}}],[\"会调用集合元素的\",{\"1\":{\"5718\":1}}],[\"会抛异常\",{\"1\":{\"5600\":1}}],[\"会抛出nosuchelementexception异常\",{\"1\":{\"5594\":1}}],[\"会抛出异常\",{\"1\":{\"2464\":1,\"5584\":1}}],[\"会抛出ioexception异常\",{\"1\":{\"2080\":1}}],[\"会释放锁\",{\"1\":{\"5461\":1}}],[\"会释放本次获得的执行权\",{\"1\":{\"5223\":1}}],[\"会因争夺资源而陷入僵局\",{\"1\":{\"5419\":1}}],[\"会判断target变量是否有值\",{\"1\":{\"5268\":1}}],[\"会占用大量的内存空间\",{\"1\":{\"5134\":1}}],[\"会有运行时异常\",{\"1\":{\"4864\":1}}],[\"会获取异常对象\",{\"1\":{\"4740\":1}}],[\"会互相影响到对方\",{\"1\":{\"4647\":1}}],[\"会比对这个id\",{\"1\":{\"6576\":1}}],[\"会比对集合中的所有元素\",{\"1\":{\"2614\":1}}],[\"会比较类中的相应属性是否都相等\",{\"1\":{\"4245\":1}}],[\"会从父类中查找\",{\"1\":{\"3912\":1}}],[\"会采用数据类型的默认值\",{\"1\":{\"3675\":1}}],[\"会每次循环都重复生命\",{\"1\":{\"3396\":1}}],[\"会返回完整的类名\",{\"1\":{\"2227\":1,\"2265\":1,\"7093\":1}}],[\"会产生报错\",{\"1\":{\"9898\":1}}],[\"会产生java\",{\"1\":{\"6277\":1,\"6280\":1}}],[\"会产生\",{\"1\":{\"2097\":1}}],[\"会产生ioexception异常\",{\"1\":{\"2089\":1}}],[\"会产生filenotfoundexception异常\",{\"1\":{\"2086\":1}}],[\"会报错\",{\"1\":{\"1931\":1,\"3017\":1,\"4039\":1,\"5013\":1,\"10743\":1}}],[\"会改变值的大小\",{\"1\":{\"1905\":1}}],[\"会直接报错\",{\"1\":{\"3396\":1,\"3734\":1}}],[\"会直接抛出异常\",{\"1\":{\"1894\":1}}],[\"会直接改变源stringbuffer\",{\"1\":{\"1571\":1}}],[\"会自动进行主节点的选举\",{\"1\":{\"10612\":1}}],[\"会自动进行扩容\",{\"1\":{\"1561\":1}}],[\"会自动生成主键值\",{\"1\":{\"10257\":1}}],[\"会自动注册\",{\"1\":{\"7865\":1}}],[\"会自动的调用被代理类中同名的方法\",{\"1\":{\"7284\":1}}],[\"会自动将数据读入\",{\"1\":{\"6339\":1}}],[\"会自动创建此文件\",{\"1\":{\"6268\":1}}],[\"会自动识别java\",{\"1\":{\"2864\":1}}],[\"会自动转为int\",{\"1\":{\"1799\":1}}],[\"会自动下载一个项目压缩包\",{\"1\":{\"362\":1}}],[\"会存入字符串常量池\",{\"1\":{\"1417\":1}}],[\"会进行转码\",{\"1\":{\"1034\":1}}],[\"y为偶数时表示当前版本为稳定版\",{\"1\":{\"10133\":1}}],[\"y为奇数时表示当前版本为开发版\",{\"1\":{\"10132\":1}}],[\"yuan\",{\"1\":{\"8084\":1}}],[\"yum\",{\"1\":{\"2873\":1,\"2877\":2}}],[\"yum安装\",{\"0\":{\"2872\":1}}],[\"yield\",{\"1\":{\"5211\":1,\"5221\":1,\"5222\":1,\"5370\":1}}],[\"y运算时\",{\"1\":{\"4683\":1}}],[\"yyy\",{\"1\":{\"3070\":1}}],[\"yyyy\",{\"1\":{\"486\":1,\"936\":1,\"939\":1,\"952\":7,\"1638\":1,\"1650\":1,\"1722\":1,\"1723\":1,\"1725\":1,\"1727\":1,\"7956\":1,\"7970\":1}}],[\"y\",{\"1\":{\"1763\":3,\"2873\":1,\"2877\":2,\"4236\":1,\"4238\":1,\"4239\":2,\"5806\":1,\"10102\":1,\"10131\":1}}],[\"yes\",{\"1\":{\"4553\":1,\"4734\":2,\"4857\":1}}],[\"year\",{\"1\":{\"1651\":2,\"1654\":2,\"1657\":4,\"1660\":2,\"1663\":1}}],[\"yellow\",{\"1\":{\"952\":1}}],[\"you\",{\"1\":{\"1464\":3,\"1467\":3,\"1472\":2,\"1601\":1,\"6285\":1,\"9895\":1}}],[\"your\",{\"1\":{\"360\":1}}],[\"yaml配置项的主流配置方式是\",{\"1\":{\"510\":1,\"588\":1}}],[\"yaml配置语法\",{\"1\":{\"74\":1}}],[\"yaml语法规则\",{\"0\":{\"479\":1}}],[\"yaml是一种数据存储格式\",{\"1\":{\"477\":1}}],[\"yaml共存时\",{\"1\":{\"468\":1}}],[\"yml配置\",{\"0\":{\"10840\":1}}],[\"yml配置文件\",{\"1\":{\"471\":1,\"1047\":1,\"9901\":1}}],[\"yml文件中添加mongodb的连接参数\",{\"1\":{\"10842\":1}}],[\"yml文件中进行基本配置\",{\"1\":{\"1363\":1}}],[\"yml文件中的变量引用\",{\"0\":{\"490\":1}}],[\"yml文件\",{\"1\":{\"789\":1}}],[\"yml文件进行设定哪些文件不参与热部署操作\",{\"1\":{\"576\":1}}],[\"yml语法\",{\"0\":{\"476\":1}}],[\"yml格式\",{\"1\":{\"465\":1}}],[\"yml和yaml是一回事\",{\"1\":{\"464\":1}}],[\"yml\",{\"0\":{\"823\":1,\"831\":1},\"1\":{\"463\":1,\"468\":1,\"577\":1,\"723\":1,\"732\":1,\"790\":1,\"803\":1,\"836\":1,\"837\":1,\"838\":1,\"839\":1,\"848\":1,\"849\":1,\"850\":1,\"981\":1,\"1008\":1,\"1094\":1,\"1102\":1,\"1119\":3}}],[\"打jar包\",{\"0\":{\"9496\":1}}],[\"打开浏览器输入地址\",{\"1\":{\"9893\":1}}],[\"打开浏览器后要访问的项目目录\",{\"1\":{\"8594\":1}}],[\"打开模块设置\",{\"1\":{\"8682\":1}}],[\"打开窗口\",{\"1\":{\"8610\":1}}],[\"打开tomcat\",{\"0\":{\"8575\":1}}],[\"打开project\",{\"1\":{\"8534\":1,\"8566\":1,\"8638\":1}}],[\"打开连接到socket的输入\",{\"1\":{\"6791\":1}}],[\"打开\",{\"1\":{\"6631\":1}}],[\"打开以便读取和\",{\"1\":{\"6510\":1,\"6511\":1}}],[\"打开以便读取和写入\",{\"1\":{\"6509\":1}}],[\"打开springboot\",{\"1\":{\"360\":1}}],[\"打印参数\",{\"1\":{\"7460\":1}}],[\"打印的所有字符都使用平台的默认字符编码转换为字节\",{\"1\":{\"6457\":1}}],[\"打印的是内存地址\",{\"1\":{\"2353\":1}}],[\"打印流\",{\"0\":{\"6450\":1}}],[\"打印结果\",{\"1\":{\"5779\":1}}],[\"打印详细异常\",{\"1\":{\"4734\":1,\"4743\":1}}],[\"打印机\",{\"1\":{\"4478\":1}}],[\"打印对象\",{\"1\":{\"4214\":1}}],[\"打印读取的字符数组\",{\"1\":{\"2048\":1}}],[\"打印控制台\",{\"1\":{\"952\":1}}],[\"打包格式选tgz\",{\"1\":{\"10154\":1}}],[\"打包web项目时\",{\"1\":{\"8684\":1}}],[\"打包程序中个别文件内容不同\",{\"1\":{\"713\":1}}],[\"打包后可以部署的项目\",{\"0\":{\"8515\":1}}],[\"打包后所包含的内容不同\",{\"1\":{\"712\":1}}],[\"打包后文件的大小不同\",{\"1\":{\"711\":1}}],[\"打包后会产生一个与工程名类似的jar文件\",{\"1\":{\"694\":1}}],[\"打包\",{\"0\":{\"691\":1},\"1\":{\"688\":1}}],[\"打包方式选择jar\",{\"1\":{\"315\":1}}],[\"打包与发布\",{\"0\":{\"683\":1},\"1\":{\"81\":1}}],[\"输入账户名密码即可\",{\"1\":{\"10794\":1}}],[\"输入指令查看所有的用户信息\",{\"1\":{\"10723\":1}}],[\"输入查看数据库的指令\",{\"1\":{\"10520\":1}}],[\"输入url\",{\"1\":{\"10189\":1}}],[\"输入以下命令\",{\"1\":{\"10141\":1}}],[\"输入字符流\",{\"1\":{\"6176\":1}}],[\"输入流与输出流的方法\",{\"0\":{\"6219\":1}}],[\"输入流\",{\"0\":{\"6190\":1},\"1\":{\"6162\":1}}],[\"输入\",{\"1\":{\"6154\":1,\"6173\":1}}],[\"输入输出流\",{\"1\":{\"4746\":1}}],[\"输入不匹配异常\",{\"0\":{\"4719\":1}}],[\"输入的是关键字\",{\"1\":{\"9925\":1}}],[\"输入的数据类型不匹配\",{\"1\":{\"5794\":1}}],[\"输入的类型不匹配\",{\"1\":{\"5790\":1,\"5916\":1}}],[\"输入的不是数据而是字符等\",{\"1\":{\"4683\":1}}],[\"输入的负数个数为\",{\"1\":{\"3414\":1}}],[\"输入的正数个数为\",{\"1\":{\"3414\":1}}],[\"输入为0时结束程序\",{\"1\":{\"3413\":1}}],[\"输入数据时如果输入的值超过了进制或者超过了数据类型的范围\",{\"1\":{\"2342\":1,\"2799\":1}}],[\"输入完毕后\",{\"1\":{\"2328\":1,\"2335\":1,\"2785\":1,\"2792\":1}}],[\"输入换行符\",{\"0\":{\"6349\":1},\"1\":{\"2123\":1}}],[\"输入启动命令后\",{\"1\":{\"771\":1}}],[\"输入要隐藏的文件名\",{\"1\":{\"356\":1}}],[\"输出内容\",{\"1\":{\"7670\":1}}],[\"输出了所有person类的属性\",{\"1\":{\"7080\":1}}],[\"输出结果\",{\"0\":{\"7073\":1},\"1\":{\"9148\":1}}],[\"输出可序列化对象\",{\"1\":{\"6545\":1,\"6551\":1}}],[\"输出ascii字符\",{\"1\":{\"6460\":1}}],[\"输出add\",{\"1\":{\"4064\":1}}],[\"输出操作\",{\"1\":{\"6268\":1}}],[\"输出操作以\",{\"1\":{\"6151\":1}}],[\"输出字符流\",{\"1\":{\"6177\":1}}],[\"输出流的练习\",{\"0\":{\"6444\":1}}],[\"输出流\",{\"0\":{\"6198\":1},\"1\":{\"6113\":1,\"6163\":1}}],[\"输出\",{\"1\":{\"4874\":1,\"6155\":1,\"6174\":1}}],[\"输出标识符代表的对象名\",{\"1\":{\"4874\":1}}],[\"输出的都是mm\",{\"1\":{\"5620\":1}}],[\"输出的都是\",{\"1\":{\"5618\":1}}],[\"输出的就是类名和类的属性\",{\"1\":{\"4258\":1}}],[\"输出的语法就是slf4j的语法\",{\"1\":{\"954\":1}}],[\"输出功能的类\",{\"1\":{\"3935\":1}}],[\"输出99乘法表\",{\"0\":{\"3454\":1}}],[\"输出5行\",{\"1\":{\"3452\":1}}],[\"输出星星\",{\"0\":{\"3451\":1}}],[\"输出偶数的个数\",{\"1\":{\"3392\":1}}],[\"输出所有偶数的和\",{\"1\":{\"3392\":1}}],[\"输出语句\",{\"0\":{\"2910\":1}}],[\"输出到文件\",{\"1\":{\"952\":2}}],[\"输出到控制台\",{\"1\":{\"952\":1}}],[\"输出调试信息\",{\"1\":{\"903\":1}}],[\"输出测试报告\",{\"1\":{\"114\":1}}],[\"输出需求调研文档\",{\"1\":{\"110\":1}}],[\"→\",{\"1\":{\"355\":2}}],[\"影响目录观感\",{\"1\":{\"354\":1}}],[\"在副本集初始化之前\",{\"1\":{\"10805\":1}}],[\"在连接的时候\",{\"1\":{\"10794\":1}}],[\"在连接中可进行大数据量的传输\",{\"1\":{\"6734\":1}}],[\"在角色定义时可以包含一个或多个已存在的角色\",{\"1\":{\"10654\":1}}],[\"在对用户分配\",{\"1\":{\"10647\":1}}],[\"在对象序列化后\",{\"1\":{\"6575\":1}}],[\"在获得票数的时候\",{\"1\":{\"10621\":1}}],[\"在承载数据的节点中\",{\"1\":{\"10444\":1}}],[\"在集合上通过createindex方法创建索引\",{\"1\":{\"10384\":1}}],[\"在集合类或接口中凡是定义类或接口时\",{\"1\":{\"5977\":1}}],[\"在分片集群中\",{\"1\":{\"10382\":1}}],[\"在文档的单个字段上创建用户定义的升序\",{\"1\":{\"10365\":1}}],[\"在文件中编写配置项\",{\"1\":{\"8481\":1}}],[\"在文件内容末尾追加内容\",{\"1\":{\"6230\":1}}],[\"在linux上也不用安装\",{\"1\":{\"10156\":1}}],[\"在linux中\",{\"1\":{\"1992\":1}}],[\"在解压目录中新建\",{\"1\":{\"10148\":1}}],[\"在解压的目录中\",{\"1\":{\"10136\":1}}],[\"在软件的bin目录\",{\"1\":{\"10141\":1}}],[\"在软件开发中实现一个算法时\",{\"1\":{\"4463\":1}}],[\"在服务器启动后\",{\"1\":{\"9778\":1}}],[\"在服务器正常关闭之前\",{\"1\":{\"9777\":1}}],[\"在服务器端通过request\",{\"1\":{\"9194\":1}}],[\"在服务端的bservlet获取到相同的session对象\",{\"1\":{\"9746\":1}}],[\"在服务端的aservlet获取一个session对象\",{\"1\":{\"9745\":1}}],[\"在浏览器输入地址\",{\"1\":{\"9898\":1}}],[\"在浏览器和服务器之间\",{\"1\":{\"9654\":1}}],[\"在浏览器中输入\",{\"1\":{\"8623\":1,\"9121\":1}}],[\"在一些生产环境中\",{\"1\":{\"9856\":1}}],[\"在一次会话的多次请求间共享数据\",{\"1\":{\"9742\":1}}],[\"在一次会话中可以包含多次请求和响应\",{\"1\":{\"9653\":1}}],[\"在一个类中的访问机制\",{\"1\":{\"3648\":1}}],[\"在一个java源文件中可以声明多个class\",{\"1\":{\"2902\":1}}],[\"在一个yaml文件中\",{\"1\":{\"824\":1}}],[\"在网络中传输数据\",{\"1\":{\"9599\":1}}],[\"在网络中的唯一标识\",{\"1\":{\"8410\":1}}],[\"在自己新建的项目工程中\",{\"1\":{\"9495\":1}}],[\"在互联网通信过程中定义的一种文件数据类型\",{\"1\":{\"9227\":1}}],[\"在第一次调用request\",{\"1\":{\"9199\":1}}],[\"在第几行就输出几个\",{\"1\":{\"3452\":1}}],[\"在范围内数据可以共享\",{\"1\":{\"9179\":1}}],[\"在转发请求的同时\",{\"1\":{\"9114\":1}}],[\"在测试乱码问题的代码时\",{\"1\":{\"9037\":1}}],[\"在后台接收的时候\",{\"1\":{\"9033\":1}}],[\"在后台推断出了参数的类型\",{\"1\":{\"7358\":1}}],[\"在发送的请求参数中如果有中文\",{\"1\":{\"9033\":1}}],[\"在destroy\",{\"1\":{\"8761\":1}}],[\"在druid中\",{\"1\":{\"8297\":1}}],[\"在配置tomcat的目标时\",{\"1\":{\"8648\":1}}],[\"在配置文件里开启日志\",{\"1\":{\"1229\":1}}],[\"在配置文件中\",{\"1\":{\"935\":1}}],[\"在配置文件中开启日志文件\",{\"1\":{\"929\":1}}],[\"在右上角的下拉框中选择指定的tomcat模板\",{\"1\":{\"8631\":1}}],[\"在右边进行设置\",{\"1\":{\"8567\":1}}],[\"在弹出的页面中\",{\"1\":{\"8538\":1}}],[\"在<host>标签体中配置\",{\"1\":{\"8474\":1}}],[\"在返回给浏览器\",{\"1\":{\"8402\":1}}],[\"在webapps下创建项目\",{\"0\":{\"8461\":1}}],[\"在webapps下部署\",{\"0\":{\"8459\":1}}],[\"在web服务器软件中\",{\"1\":{\"8396\":1}}],[\"在windows中需要手动设置隐藏\",{\"1\":{\"1992\":1}}],[\"在这个查询中\",{\"1\":{\"8365\":1}}],[\"在这里配置springboot版本\",{\"1\":{\"319\":1}}],[\"在较为完善的数据库连接池实现中\",{\"1\":{\"8240\":1}}],[\"在减少系统消耗的基础上\",{\"1\":{\"8237\":1}}],[\"在主程序\",{\"1\":{\"8215\":1}}],[\"在主配置文件中指定要引入哪个环境的配置文件\",{\"1\":{\"841\":1}}],[\"在getforlist和getvalue方法中\",{\"1\":{\"8185\":1}}],[\"在代码中加载配置文件\",{\"1\":{\"7867\":1}}],[\"在代码块内定义\",{\"1\":{\"3045\":1}}],[\"在查看mysql\",{\"1\":{\"7832\":1}}],[\"在支持函数式编程的语言了\",{\"1\":{\"7423\":1}}],[\"在servlet中有一个servletcontext对象\",{\"1\":{\"9205\":1}}],[\"在servlet实现类的\",{\"1\":{\"8833\":1}}],[\"在servlet实例化之后\",{\"1\":{\"8757\":1}}],[\"在service方法中\",{\"1\":{\"8882\":1}}],[\"在sdk选项中切换指定的sdk版本\",{\"1\":{\"7326\":1}}],[\"在springboot中整合mongodb就需要添加spring\",{\"1\":{\"10837\":1}}],[\"在springboot中读取maven设置的环境即可\",{\"1\":{\"861\":1}}],[\"在springboot项目的bom\",{\"1\":{\"388\":1}}],[\"在此之前先了解下正排索引\",{\"1\":{\"9919\":1}}],[\"在此方法中\",{\"1\":{\"7291\":1}}],[\"在此时间之内\",{\"1\":{\"6991\":1}}],[\"在此模式中\",{\"1\":{\"2732\":1}}],[\"在运行时处理注解\",{\"1\":{\"6937\":1}}],[\"在运行时调用任意一个对象的成员变量和方法\",{\"1\":{\"6936\":1}}],[\"在运行时获取泛型信息\",{\"1\":{\"6935\":1}}],[\"在运行时判断任意一个类所具有的成员变量和方法\",{\"1\":{\"6934\":1}}],[\"在运行时判断任意一个对象所属的类\",{\"1\":{\"6932\":1}}],[\"在运行时构造任意一个类的对象\",{\"1\":{\"6933\":1}}],[\"在运行时代码可以根据某些条件改变自身结构\",{\"1\":{\"6924\":1}}],[\"在运行时有效\",{\"1\":{\"4985\":1}}],[\"在接收端\",{\"1\":{\"6842\":1}}],[\"在数据表实现类继承basedao时\",{\"1\":{\"8190\":1}}],[\"在数据表的实现类中\",{\"1\":{\"8187\":1}}],[\"在数据报中包含了发送端的ip地址和端口号以及接收端的ip地址和端口号\",{\"1\":{\"6830\":1}}],[\"在数组中查询指定元素\",{\"1\":{\"2367\":1}}],[\"在制定协议时\",{\"1\":{\"6719\":1}}],[\"在指针位置进行写入\",{\"0\":{\"6525\":1}}],[\"在指定的millitime毫秒时间内\",{\"1\":{\"5213\":1}}],[\"在指定位置插入内容\",{\"1\":{\"1597\":1}}],[\"在任意位置进行读写\",{\"1\":{\"6518\":1}}],[\"在outputstream\",{\"1\":{\"6466\":1}}],[\"在unicode\",{\"1\":{\"6426\":1}}],[\"在utf8字符集中\",{\"1\":{\"1500\":1}}],[\"在节点流上创造缓冲流\",{\"1\":{\"6353\":1}}],[\"在相应的节点流之上\",{\"1\":{\"6322\":1}}],[\"在输出的过程中\",{\"1\":{\"6268\":1}}],[\"在读取文件时\",{\"1\":{\"6231\":1}}],[\"在读取前我们一般需要使用hasnext\",{\"1\":{\"2322\":1,\"2779\":1}}],[\"在写入一个文件时\",{\"1\":{\"6229\":1}}],[\"在写出文件时\",{\"1\":{\"2124\":1,\"6350\":1}}],[\"在内存层面读\",{\"1\":{\"6210\":1}}],[\"在内存中加载的位置\",{\"1\":{\"3702\":1}}],[\"在内存中分配了不同大小的内存空间\",{\"1\":{\"3019\":1}}],[\"在已存在的流\",{\"1\":{\"6166\":1,\"6184\":1}}],[\"在泛型方法中可以定义泛型参数\",{\"1\":{\"6032\":1}}],[\"在本类或本接口中即代表某种类型\",{\"1\":{\"6009\":1}}],[\"在不\",{\"1\":{\"10442\":1}}],[\"在不登录的情况下\",{\"1\":{\"9739\":1}}],[\"在不改变原有方法的情况下\",{\"1\":{\"7194\":1}}],[\"在不断的添加过程中\",{\"1\":{\"5868\":1}}],[\"在不同类中的访问机制\",{\"1\":{\"3650\":1}}],[\"在原有的hashmap底层结构基础上\",{\"1\":{\"5827\":1}}],[\"在扩容方面\",{\"1\":{\"5678\":1}}],[\"在调用it\",{\"1\":{\"5594\":1}}],[\"在调用时可以对属性进行修改\",{\"1\":{\"3746\":1}}],[\"在当前目录生成证书\",{\"1\":{\"10770\":1}}],[\"在当前目录下生成了两个class文件\",{\"1\":{\"2916\":1}}],[\"在当前线程被notify后\",{\"1\":{\"5447\":1}}],[\"在当前线程中调用方法\",{\"1\":{\"5443\":1,\"5449\":1}}],[\"在其他目录下创建项目\",{\"0\":{\"8464\":1}}],[\"在其他语言中是有关联数组的\",{\"1\":{\"5534\":1}}],[\"在其他的语言中\",{\"1\":{\"2671\":1}}],[\"在其上加锁\",{\"1\":{\"5358\":1}}],[\"在方式一\",{\"1\":{\"5352\":1}}],[\"在方法内通过newinstance\",{\"1\":{\"8059\":1}}],[\"在方法内定义\",{\"1\":{\"3044\":1}}],[\"在方法声明中用throws语句可以声明抛出异常的列表\",{\"1\":{\"4768\":1}}],[\"在方法调用之前\",{\"1\":{\"4157\":1}}],[\"在方法体之外\",{\"1\":{\"5403\":1}}],[\"在方法体内部声明的变量\",{\"1\":{\"3042\":1}}],[\"在方法体外\",{\"1\":{\"3039\":1}}],[\"在方法上加\",{\"1\":{\"596\":1}}],[\"在继承thread类创建多线程的方式中\",{\"1\":{\"5320\":1}}],[\"在实现了监听器接口的类上添加\",{\"1\":{\"9454\":1}}],[\"在实现runnable接口创建多线程的方式中\",{\"1\":{\"5320\":1}}],[\"在实例化集合类时\",{\"1\":{\"5976\":1}}],[\"在实例化以后\",{\"1\":{\"5855\":1}}],[\"在实际开发中\",{\"1\":{\"3845\":1,\"4136\":1}}],[\"在某些情况下\",{\"1\":{\"10442\":1}}],[\"在某种特殊情况下\",{\"1\":{\"5291\":1}}],[\"在某个controller添加日志记录\",{\"1\":{\"881\":1}}],[\"在它的一个完整的生命周期中通常要经历如下的五种状态\",{\"1\":{\"5287\":1}}],[\"在线程a中调用线程b的join\",{\"1\":{\"5212\":1,\"5225\":1}}],[\"在里面放入我们要执行的代码\",{\"1\":{\"5185\":1}}],[\"在保护模式下不会对其他进程产生影响\",{\"1\":{\"5086\":1}}],[\"在反射的\",{\"1\":{\"5058\":1}}],[\"在1\",{\"1\":{\"5013\":1}}],[\"在源文件中有效\",{\"1\":{\"4983\":1}}],[\"在源文件中嵌入一些补充信息\",{\"1\":{\"4881\":1}}],[\"在源文件中显式的使用import结构导入指定包下的类\",{\"1\":{\"3946\":1}}],[\"在枚举对象中可以单独重写接口中的方法\",{\"1\":{\"4872\":1}}],[\"在枚举值后面加\",{\"1\":{\"4868\":1}}],[\"在出了try结构以后\",{\"1\":{\"4759\":1}}],[\"在finally里面关闭资源\",{\"1\":{\"4753\":1}}],[\"在for循环外定义\",{\"1\":{\"3395\":1}}],[\"在没有写finally的情况\",{\"1\":{\"4738\":1}}],[\"在执行过程中\",{\"1\":{\"4737\":1,\"5308\":1,\"5362\":1}}],[\"在cmd中运行命令\",{\"1\":{\"9502\":1}}],[\"在class文件中有效\",{\"1\":{\"4984\":1}}],[\"在catch语句块中是对异常对象进行处理的代码\",{\"1\":{\"4729\":1}}],[\"在compass中\",{\"1\":{\"10604\":1}}],[\"在compareto\",{\"1\":{\"1746\":1}}],[\"在controller类中\",{\"1\":{\"1298\":1}}],[\"在编译时就会进行\",{\"1\":{\"5967\":1}}],[\"在编译之后内部类会被编译成独立的\",{\"1\":{\"4338\":1}}],[\"在编译之后都使用java虚拟机中的int数据类型来代替\",{\"1\":{\"3145\":1}}],[\"在编写程序时\",{\"1\":{\"4683\":1}}],[\"在子类中调用父类\",{\"0\":{\"4533\":1}}],[\"在子类中可以根据需要对从父类中继承来的方法进行改造\",{\"1\":{\"4042\":1}}],[\"在电脑上使用usb\",{\"1\":{\"4513\":1}}],[\"在整个系统运行过程中\",{\"1\":{\"4440\":1}}],[\"在静态的方法内\",{\"1\":{\"4402\":1}}],[\"在设计类时\",{\"1\":{\"4367\":1}}],[\"在局部内部类的方法中\",{\"1\":{\"4333\":1}}],[\"在外部引用它时必须给出完整的名称\",{\"1\":{\"4302\":1}}],[\"在行进行string与其它类型数据的连接操作时\",{\"1\":{\"4261\":1}}],[\"在多态情况下\",{\"1\":{\"4147\":1}}],[\"在堆内存的方法区中就产生了一个class类型的对象\",{\"1\":{\"6930\":1}}],[\"在堆内存中\",{\"1\":{\"4030\":1,\"4640\":1}}],[\"在堆空间中\",{\"1\":{\"4110\":1}}],[\"在构造器的首行\",{\"1\":{\"4096\":1}}],[\"在父类中需要同时访问这两个属性\",{\"1\":{\"4080\":1}}],[\"在定义一个native方法时\",{\"1\":{\"3995\":1}}],[\"在类上使用\",{\"1\":{\"8706\":1}}],[\"在类\",{\"1\":{\"6009\":1}}],[\"在类路径\",{\"1\":{\"5053\":1}}],[\"在类中写非空参构造器时\",{\"1\":{\"4104\":1}}],[\"在类中声明的位置的不同\",{\"1\":{\"3687\":1}}],[\"在类前面加上包名就行\",{\"1\":{\"3955\":1}}],[\"在类的定义时\",{\"1\":{\"5974\":1}}],[\"在类的内部创建枚举类的实例\",{\"1\":{\"4839\":1}}],[\"在类的多个构造器中\",{\"1\":{\"4100\":1}}],[\"在类的构造器中\",{\"0\":{\"3896\":1},\"1\":{\"3897\":1}}],[\"在类的方法中\",{\"0\":{\"3893\":1}}],[\"在类外部访问需要通过方法\",{\"1\":{\"3818\":1}}],[\"在同一\",{\"1\":{\"10654\":1}}],[\"在同一服务器上不同的request请求是会得到唯一的session\",{\"1\":{\"9197\":1}}],[\"在同一个类中\",{\"1\":{\"3757\":1,\"3924\":1}}],[\"在同一行\",{\"1\":{\"2099\":1}}],[\"在程序的dos端口按ctrl\",{\"1\":{\"8437\":1}}],[\"在程序执行时\",{\"1\":{\"4043\":1}}],[\"在程序入口中调用类\",{\"1\":{\"3636\":1}}],[\"在程序包所在路径下\",{\"1\":{\"696\":1}}],[\"在初始化时就确定了\",{\"1\":{\"3529\":1}}],[\"在栈内存以栈的结构储存数组的标识符\",{\"1\":{\"3525\":1}}],[\"在循环体必须执行一次的时候\",{\"1\":{\"3422\":1}}],[\"在计算机底层\",{\"1\":{\"3187\":1}}],[\"在哪个\",{\"1\":{\"3013\":1}}],[\"在创建的对象中\",{\"1\":{\"3236\":1}}],[\"在创建matcher对象后\",{\"1\":{\"2771\":1}}],[\"在创建pattern对象的时候\",{\"1\":{\"2719\":1}}],[\"在创建springboot工程时\",{\"1\":{\"652\":1}}],[\"在创建springboot项目时\",{\"1\":{\"402\":1}}],[\"在jdbc中\",{\"1\":{\"8150\":1}}],[\"在jdk1\",{\"1\":{\"6130\":1}}],[\"在jdk8时\",{\"1\":{\"5658\":1}}],[\"在jdk5\",{\"1\":{\"5146\":1}}],[\"在jdk中java\",{\"1\":{\"2668\":1,\"2673\":1}}],[\"在jdk中\",{\"1\":{\"1756\":1}}],[\"在javaweb开发中\",{\"1\":{\"8796\":1,\"8822\":1}}],[\"在javaweb\",{\"1\":{\"8623\":1}}],[\"在java\",{\"1\":{\"7412\":1}}],[\"在javabean中要求提供一个public的空参构造器\",{\"1\":{\"7059\":1}}],[\"在java的uri中\",{\"1\":{\"6913\":1}}],[\"在java7\",{\"1\":{\"6594\":1}}],[\"在java里\",{\"1\":{\"5141\":1}}],[\"在java8中能够得到方法参数的名称\",{\"1\":{\"5008\":1}}],[\"在javaee\",{\"1\":{\"4886\":1}}],[\"在javase中\",{\"1\":{\"4885\":1}}],[\"在java语言中\",{\"1\":{\"4664\":1}}],[\"在java语言范畴中\",{\"1\":{\"3613\":1}}],[\"在java类中使用super来调用父类中的指定成员\",{\"1\":{\"4071\":1}}],[\"在java中声明类\",{\"1\":{\"3971\":1}}],[\"在java中不可以写成3<x<6\",{\"1\":{\"3293\":1}}],[\"在java中\",{\"1\":{\"2677\":1,\"3144\":1,\"3396\":1,\"3614\":1,\"5308\":1,\"7792\":1}}],[\"在\",{\"1\":{\"2670\":1,\"4030\":1,\"6465\":1,\"7882\":1,\"8481\":1,\"8604\":1,\"10381\":1,\"10654\":1}}],[\"在project\",{\"1\":{\"8741\":1}}],[\"在person类中重写equals后\",{\"1\":{\"2422\":1}}],[\"在pom\",{\"1\":{\"352\":1}}],[\"在init方法的参数中有\",{\"1\":{\"8783\":1}}],[\"在io模式下\",{\"1\":{\"2120\":1,\"6346\":1}}],[\"在ideal中\",{\"1\":{\"5755\":1}}],[\"在idea右边选择database\",{\"1\":{\"1112\":1}}],[\"在idea中可以快速创建servlet实现类\",{\"1\":{\"8730\":1}}],[\"在idea中的输出目录\",{\"0\":{\"8502\":1}}],[\"在idea中配置的临时参数就是通过这个位置传递到我们的程序中的\",{\"1\":{\"780\":1}}],[\"在idea中\",{\"1\":{\"775\":1,\"1068\":1}}],[\"在idea中进行配置\",{\"1\":{\"532\":1}}],[\"在绝对值的角度\",{\"1\":{\"1910\":1,\"1922\":1,\"1925\":1}}],[\"在该区域中的数据会被原样展示\",{\"1\":{\"9618\":1}}],[\"在该注解中\",{\"1\":{\"8831\":1}}],[\"在该范围内\",{\"1\":{\"1802\":1}}],[\"在该控制器中创建日志对象\",{\"1\":{\"885\":1}}],[\"在开发中\",{\"1\":{\"1607\":1,\"4473\":1,\"4484\":1}}],[\"在功能上\",{\"1\":{\"1539\":1}}],[\"在application\",{\"1\":{\"1363\":1,\"10842\":1}}],[\"在表现层做统一的异常处理\",{\"1\":{\"1288\":1}}],[\"在项目代码里写死虚拟路径\",{\"1\":{\"9173\":1}}],[\"在项目配置菜单\",{\"1\":{\"7326\":1}}],[\"在项目的根目录添加\",{\"1\":{\"1082\":1}}],[\"在项目包下创建controller包\",{\"1\":{\"371\":1}}],[\"在操作redis时\",{\"1\":{\"1026\":1}}],[\"在mongodb中通过角色对用户授予相应数据库资源的操作权限\",{\"1\":{\"10649\":1}}],[\"在mysql下建议关闭\",{\"1\":{\"8294\":1}}],[\"在mysqld项中添加default\",{\"1\":{\"996\":1}}],[\"在myannotation注解上使用元注解\",{\"1\":{\"5019\":1}}],[\"在main所在类中声明的普通方法\",{\"1\":{\"3737\":1}}],[\"在manifest\",{\"1\":{\"742\":1}}],[\"在maven中提供有打包的指令\",{\"1\":{\"692\":1}}],[\"在字母前使用数字\",{\"1\":{\"921\":1}}],[\"在控制台打印日志时\",{\"1\":{\"910\":1}}],[\"在resource目录下设置如下配置文件\",{\"1\":{\"835\":1}}],[\"在启动服务的时候\",{\"1\":{\"769\":1}}],[\"在使用compass连接副本集时\",{\"1\":{\"10594\":1}}],[\"在使用开发基于数据库的web程序时\",{\"0\":{\"8214\":1}}],[\"在使用这些流类时\",{\"1\":{\"6312\":1}}],[\"在使用注解时\",{\"1\":{\"4938\":1}}],[\"在使用向导创建springboot工程时\",{\"1\":{\"702\":1}}],[\"在使用maven开发时\",{\"1\":{\"385\":1}}],[\"在tomcat\",{\"1\":{\"9724\":1,\"9725\":1}}],[\"在tomcat服务器的一个配置文件\",{\"1\":{\"9231\":1}}],[\"在tomcat服务器的配置文件中进行配置\",{\"1\":{\"531\":1}}],[\"在tomcat目录下的webapps目录下创建一个目录\",{\"1\":{\"8462\":1}}],[\"在thread子类中就是this\",{\"1\":{\"5208\":1}}],[\"在try结构中声明的变量\",{\"1\":{\"4759\":1}}],[\"在test中测试api\",{\"1\":{\"678\":1}}],[\"在和引导类相同的包中\",{\"1\":{\"670\":1}}],[\"在需要使用orm类的地方\",{\"1\":{\"8192\":1}}],[\"在需要使用这组配置的类中\",{\"1\":{\"591\":1}}],[\"在需要写入字符而不是写入字节的情况下\",{\"1\":{\"6457\":1}}],[\"在需要手动输出日志的类上同样加上\",{\"1\":{\"954\":1}}],[\"在需要开启校验功能的类上使用注解\",{\"1\":{\"644\":1}}],[\"在进行synchronized\",{\"1\":{\"5353\":1}}],[\"在进行divide运算时\",{\"1\":{\"1906\":1}}],[\"在进行整合之前先梳理一下整合的思想\",{\"1\":{\"961\":1}}],[\"在进行属性绑定时\",{\"1\":{\"616\":1}}],[\"在进行项目开发时\",{\"1\":{\"410\":1}}],[\"在yml配置文件中定义要绑定的属性\",{\"0\":{\"599\":1}}],[\"在yml中可以使用\",{\"1\":{\"491\":1}}],[\"在更高层级中配置关闭热部署\",{\"1\":{\"583\":1}}],[\"在属性名书写位置的下方使用减号作为数据开始符号\",{\"1\":{\"488\":1}}],[\"无模式的\",{\"1\":{\"10014\":1}}],[\"无状态协议\",{\"0\":{\"9666\":1}}],[\"无需import操作\",{\"1\":{\"9495\":1}}],[\"无需使用索引访问元素\",{\"1\":{\"5608\":1}}],[\"无限流就是数据无限生成\",{\"1\":{\"7586\":1}}],[\"无限循环格式\",{\"0\":{\"3410\":1}}],[\"无return\",{\"0\":{\"7370\":1,\"7374\":1}}],[\"无非是参数有char类型变成了byte类型\",{\"1\":{\"6294\":1}}],[\"无穷大\",{\"1\":{\"6092\":1}}],[\"无穷小\",{\"1\":{\"6089\":1}}],[\"无序的\",{\"1\":{\"5817\":1,\"5819\":1,\"5821\":1,\"5846\":1,\"5848\":1,\"5851\":1}}],[\"无序性\",{\"1\":{\"5693\":1,\"5730\":1}}],[\"无可厚非\",{\"1\":{\"5352\":1}}],[\"无继承关系的引用类型间的转换是非法的\",{\"1\":{\"4198\":1}}],[\"无所谓\",{\"1\":{\"3354\":1}}],[\"无任何判断和跳转\",{\"1\":{\"3332\":1}}],[\"无null\",{\"1\":{\"3140\":1}}],[\"无成员变量\",{\"1\":{\"2397\":1}}],[\"无效精度外的数值全部舍去\",{\"1\":{\"1913\":1}}],[\"无参数\",{\"1\":{\"2329\":1,\"2786\":1,\"7470\":1}}],[\"无参\",{\"0\":{\"2037\":1,\"7370\":1},\"1\":{\"1647\":1,\"3866\":1}}],[\"无参构造方法\",{\"1\":{\"1216\":1}}],[\"无线程安全\",{\"1\":{\"1569\":1}}],[\"无论用户管理的数据库是哪个\",{\"1\":{\"10733\":1}}],[\"无论是开发时是何种配置\",{\"1\":{\"8684\":1}}],[\"无论是否发生异常\",{\"1\":{\"4727\":1}}],[\"无论这些数据库连接是否被使用\",{\"1\":{\"8230\":1}}],[\"无论这两个线程是否属于同一对象\",{\"1\":{\"5432\":1}}],[\"无论哪个枚举对象调用\",{\"1\":{\"4867\":1}}],[\"无论通过哪个构造器创建子类对象\",{\"1\":{\"4091\":1}}],[\"无论有没有初始化\",{\"1\":{\"3008\":1}}],[\"无论正负\",{\"1\":{\"1913\":1}}],[\"无论操作对象是操作何种类型\",{\"1\":{\"1038\":1}}],[\"无论配置文件中ipaddress哪种书写模式\",{\"1\":{\"621\":1}}],[\"无法满足用户需求\",{\"1\":{\"9927\":1}}],[\"无法约束内容\",{\"1\":{\"9626\":1}}],[\"无法获取核心类库的引导类加载器\",{\"1\":{\"7043\":1}}],[\"无法获取引导类加载器\",{\"1\":{\"7043\":1}}],[\"无法获取num\",{\"1\":{\"4734\":1}}],[\"无法new\",{\"1\":{\"6951\":1}}],[\"无法赋值\",{\"1\":{\"6067\":1}}],[\"无法执行\",{\"1\":{\"5559\":1}}],[\"无法继续\",{\"1\":{\"5408\":1}}],[\"无法继承\",{\"0\":{\"3973\":1}}],[\"无法调用该方法\",{\"1\":{\"6078\":1}}],[\"无法调用\",{\"1\":{\"4539\":1}}],[\"无法应对高并发\",{\"1\":{\"4432\":1}}],[\"无法更改\",{\"1\":{\"3529\":1}}],[\"无法接收int类型的1\",{\"1\":{\"3263\":1}}],[\"无法直接操作private属性\",{\"1\":{\"2238\":1,\"2243\":1}}],[\"无法直接实例化\",{\"1\":{\"2077\":1}}],[\"无法创建\",{\"1\":{\"2006\":1,\"2009\":1}}],[\"无法比较值\",{\"1\":{\"2422\":1}}],[\"无法比较\",{\"1\":{\"1788\":1}}],[\"无法修改源时间\",{\"1\":{\"1634\":1}}],[\"无法像导入mybatis那样直接导入\",{\"1\":{\"1002\":1}}],[\"无法启动项目\",{\"1\":{\"350\":1}}],[\"无用的文件\",{\"1\":{\"340\":1}}],[\"确实可以看到数据库创建成功\",{\"1\":{\"10604\":1}}],[\"确切的说是b\",{\"1\":{\"10362\":1}}],[\"确保加载的类信息符合jvm规范\",{\"1\":{\"7014\":1}}],[\"确保启动类与直接在\",{\"1\":{\"349\":1}}],[\"确定\",{\"1\":{\"5946\":1}}],[\"确定的\",{\"1\":{\"5802\":1}}],[\"确定数据类型\",{\"1\":{\"3491\":1}}],[\"确给了个string类型的值\",{\"1\":{\"637\":1}}],[\"确认了springboot的依赖\",{\"1\":{\"338\":1}}],[\"<query>\",{\"1\":{\"10306\":1}}],[\"<单词位置>\",{\"1\":{\"10011\":1}}],[\"<10>\",{\"1\":{\"10008\":1}}],[\"<1>\",{\"1\":{\"10002\":2,\"10005\":1}}],[\"<7>\",{\"1\":{\"10005\":1,\"10008\":1}}],[\"<name>tom<\",{\"1\":{\"9645\":1}}],[\"<name>zhangsan<\",{\"1\":{\"9635\":1}}],[\"<xsd\",{\"1\":{\"9642\":22}}],[\"<url>fuck\",{\"1\":{\"9608\":1}}],[\"<uname>shit<\",{\"1\":{\"9608\":1}}],[\"<h1>hello<h1>\",{\"1\":{\"9085\":1}}],[\"<h1>作用<\",{\"1\":{\"2962\":1,\"2974\":1}}],[\"<input\",{\"1\":{\"8988\":3,\"9025\":5}}],[\"<id>env\",{\"1\":{\"862\":2}}],[\"<form\",{\"1\":{\"8988\":1,\"9025\":1}}],[\"<filenamepattern>$\",{\"1\":{\"952\":3}}],[\"<file>$\",{\"1\":{\"952\":3}}],[\"<filter\",{\"1\":{\"952\":4}}],[\"<<\",{\"1\":{\"3306\":1}}],[\"<<13\",{\"1\":{\"2351\":1}}],[\"<boolean>\",{\"1\":{\"10246\":1,\"10261\":1}}],[\"<br>\",{\"1\":{\"9025\":1}}],[\"<blockquote><pre>\",{\"1\":{\"2962\":1}}],[\"<build>\",{\"1\":{\"703\":1,\"1177\":1}}],[\"<k\",{\"1\":{\"2518\":3}}],[\"<t\",{\"1\":{\"2492\":1,\"2500\":1,\"2505\":1}}],[\"<t>\",{\"1\":{\"2391\":1,\"2446\":1,\"2492\":1,\"2500\":1,\"2505\":1,\"2512\":1,\"2515\":1,\"2518\":5,\"5503\":1,\"6042\":1,\"7575\":1,\"8054\":1,\"8358\":1,\"8362\":1}}],[\"<timebasedfilenamingandtriggeringpolicy\",{\"1\":{\"952\":3}}],[\"<参数\",{\"1\":{\"1935\":1}}],[\"<=\",{\"1\":{\"1810\":1,\"3405\":1,\"3420\":1,\"3444\":2,\"3453\":2,\"3455\":2,\"3457\":2,\"3754\":1,\"5464\":1,\"6094\":2,\"6325\":2,\"6328\":2,\"6331\":2,\"6334\":2,\"6460\":1,\"8109\":1,\"8113\":1,\"8121\":1,\"8126\":1,\"10351\":1}}],[\"<0\",{\"1\":{\"1448\":1}}],[\"<database>\",{\"1\":{\"10663\":2}}],[\"<document>\",{\"1\":{\"10246\":1,\"10261\":1}}],[\"<document\",{\"1\":{\"10246\":1,\"10261\":2}}],[\"<druid\",{\"1\":{\"1177\":1}}],[\"<dependency>\",{\"1\":{\"397\":4,\"412\":5,\"446\":1,\"450\":1,\"550\":1,\"614\":1,\"642\":2,\"653\":1,\"967\":1,\"978\":3,\"1005\":3,\"1019\":2,\"1046\":1,\"1129\":1,\"1132\":1,\"1135\":1,\"1138\":1,\"1142\":1,\"1145\":1,\"1148\":1,\"1151\":1,\"1154\":2,\"1158\":1,\"1161\":1,\"1164\":1,\"1167\":1,\"1169\":1,\"1172\":2,\"1177\":12,\"1217\":1,\"1361\":9,\"9818\":1,\"10829\":1,\"10839\":1}}],[\"<dependencymanagement>\",{\"1\":{\"397\":1}}],[\"<dependencies>\",{\"1\":{\"397\":1,\"412\":1,\"1177\":1,\"1217\":1,\"1361\":1}}],[\"<mime\",{\"1\":{\"9232\":2}}],[\"<mybatis\",{\"1\":{\"1177\":1}}],[\"<mysql\",{\"1\":{\"1177\":1}}],[\"<maxhistory>15<\",{\"1\":{\"952\":3}}],[\"<maxfilesize>100mb<\",{\"1\":{\"952\":3}}],[\"<java\",{\"1\":{\"1177\":1}}],[\"<session\",{\"1\":{\"9785\":2}}],[\"<sex>male<\",{\"1\":{\"9645\":1}}],[\"<sex>hehe<\",{\"1\":{\"9635\":1}}],[\"<server\",{\"1\":{\"9608\":1}}],[\"<students\",{\"1\":{\"9645\":1}}],[\"<students>\",{\"1\":{\"9635\":1}}],[\"<student\",{\"1\":{\"9635\":1,\"9645\":1}}],[\"<swagger\",{\"1\":{\"1177\":1}}],[\"<springprofile\",{\"1\":{\"952\":2}}],[\"<scope>runtime<\",{\"1\":{\"978\":1,\"1005\":1,\"1142\":1,\"1167\":1,\"1177\":1,\"1361\":1}}],[\"<scope>test<\",{\"1\":{\"653\":1,\"1135\":1,\"1177\":1,\"1361\":1}}],[\"<scope>compile<\",{\"1\":{\"412\":5,\"1361\":1}}],[\"<logger\",{\"1\":{\"952\":1}}],[\"<logger>仅有一个name属性\",{\"1\":{\"952\":1}}],[\"<logger>用来设置某一个包或者具体的某一个类的日志打印级别\",{\"1\":{\"952\":1}}],[\"<level>error<\",{\"1\":{\"952\":1}}],[\"<level>warn<\",{\"1\":{\"952\":1}}],[\"<level>info<\",{\"1\":{\"952\":2}}],[\"<o2\",{\"1\":{\"1791\":1}}],[\"<onmismatch>deny<\",{\"1\":{\"952\":3}}],[\"<onmatch>accept<\",{\"1\":{\"952\":3}}],[\"<optional>true<\",{\"1\":{\"550\":1,\"1161\":1,\"1167\":1,\"1177\":2}}],[\"<r>\",{\"1\":{\"7647\":1}}],[\"<rolename>\",{\"1\":{\"10663\":4}}],[\"<rollingpolicy\",{\"1\":{\"952\":3}}],[\"<root\",{\"1\":{\"952\":2}}],[\"<relativepath\",{\"1\":{\"391\":1}}],[\"<columncount\",{\"1\":{\"8045\":1}}],[\"<context\",{\"1\":{\"8477\":1,\"8483\":1}}],[\"<contextname>logback<\",{\"1\":{\"952\":1}}],[\"<configuration\",{\"1\":{\"952\":1}}],[\"<charset>utf\",{\"1\":{\"952\":4}}],[\"<extension>m4a<\",{\"1\":{\"9232\":1}}],[\"<exclusion>\",{\"1\":{\"446\":1}}],[\"<exclusions>\",{\"1\":{\"446\":1}}],[\"<e1\",{\"1\":{\"5989\":1}}],[\"<e>\",{\"1\":{\"2962\":1,\"5999\":1,\"6045\":1,\"6047\":1,\"8201\":1}}],[\"<encoder>\",{\"1\":{\"952\":4}}],[\"<groupid>io\",{\"1\":{\"1164\":1,\"1177\":1}}],[\"<groupid>redis\",{\"1\":{\"1046\":1}}],[\"<groupid>mysql<\",{\"1\":{\"978\":1,\"1005\":1,\"1142\":1,\"1177\":1,\"1361\":1}}],[\"<groupid>commons\",{\"1\":{\"1361\":1}}],[\"<groupid>com\",{\"1\":{\"967\":1,\"978\":1,\"1005\":2,\"1145\":1,\"1151\":1,\"1169\":1,\"1172\":2,\"1177\":2,\"1361\":3,\"9818\":1}}],[\"<groupid>javax\",{\"1\":{\"642\":1}}],[\"<groupid>org\",{\"1\":{\"347\":1,\"391\":1,\"394\":1,\"397\":5,\"412\":5,\"446\":2,\"450\":1,\"550\":1,\"614\":1,\"642\":1,\"653\":1,\"703\":1,\"978\":1,\"1019\":1,\"1129\":1,\"1132\":1,\"1135\":1,\"1138\":1,\"1148\":1,\"1154\":1,\"1158\":1,\"1161\":1,\"1167\":1,\"1177\":8,\"1217\":1,\"1361\":4,\"10829\":1,\"10839\":1}}],[\"<version>4\",{\"1\":{\"1172\":1,\"10829\":1}}],[\"<version>8\",{\"1\":{\"1142\":1}}],[\"<version>3\",{\"1\":{\"1005\":1,\"1148\":1,\"1151\":1,\"1164\":1,\"1361\":1}}],[\"<version>1\",{\"1\":{\"967\":1,\"978\":1,\"1005\":1,\"1145\":1,\"1169\":1,\"1361\":3,\"9818\":1}}],[\"<version>5\",{\"1\":{\"412\":2}}],[\"<version>$\",{\"1\":{\"397\":4,\"1177\":4}}],[\"<version>2\",{\"1\":{\"347\":1,\"391\":1,\"394\":1,\"397\":1,\"412\":3,\"1172\":1,\"1177\":1,\"1361\":1}}],[\"<a\",{\"1\":{\"9645\":1}}],[\"<age>18<\",{\"1\":{\"9645\":1}}],[\"<age>abc<\",{\"1\":{\"9635\":1}}],[\"<appender\",{\"1\":{\"952\":13}}],[\"<appengine\",{\"1\":{\"397\":1}}],[\"<activebydefault>true<\",{\"1\":{\"862\":1}}],[\"<activemq\",{\"1\":{\"397\":1}}],[\"<activation>\",{\"1\":{\"862\":1}}],[\"<assertj\",{\"1\":{\"397\":1}}],[\"<aspectj\",{\"1\":{\"397\":1}}],[\"<artifactid>mongodb\",{\"1\":{\"10829\":1}}],[\"<artifactid>mysql\",{\"1\":{\"978\":1,\"1005\":1,\"1142\":1,\"1177\":1,\"1361\":1}}],[\"<artifactid>mybatis<\",{\"1\":{\"1148\":1}}],[\"<artifactid>mybatis\",{\"1\":{\"978\":1,\"1005\":1,\"1151\":1,\"1177\":1,\"1361\":1}}],[\"<artifactid>commons\",{\"1\":{\"1361\":1}}],[\"<artifactid>aliyun\",{\"1\":{\"1172\":2}}],[\"<artifactid>activemq\",{\"1\":{\"397\":4}}],[\"<artifactid>fastjson<\",{\"1\":{\"1169\":1,\"1361\":1,\"9818\":1}}],[\"<artifactid>lombok<\",{\"1\":{\"1161\":1,\"1177\":1,\"1217\":1,\"1361\":1}}],[\"<artifactid>jedis<\",{\"1\":{\"1046\":1}}],[\"<artifactid>druid\",{\"1\":{\"967\":1,\"978\":1,\"1005\":1,\"1145\":1,\"1177\":1,\"1361\":1}}],[\"<artifactid>hibernate\",{\"1\":{\"642\":1}}],[\"<artifactid>validation\",{\"1\":{\"642\":1}}],[\"<artifactid>springfox\",{\"1\":{\"1164\":1,\"1177\":1}}],[\"<artifactid>spring\",{\"1\":{\"347\":1,\"391\":1,\"394\":1,\"397\":1,\"412\":5,\"446\":2,\"450\":1,\"550\":1,\"614\":1,\"653\":1,\"703\":1,\"1019\":1,\"1129\":1,\"1132\":1,\"1135\":1,\"1138\":1,\"1154\":1,\"1158\":1,\"1167\":1,\"1177\":7,\"1361\":3,\"10839\":1}}],[\"<artemis\",{\"1\":{\"397\":1}}],[\"<antlr2\",{\"1\":{\"397\":1}}],[\"<pos>\",{\"1\":{\"9999\":1}}],[\"<pwd>123456<\",{\"1\":{\"9608\":1}}],[\"<p>\",{\"1\":{\"2974\":1}}],[\"<p>比如\",{\"1\":{\"2962\":1}}],[\"<project\",{\"1\":{\"8552\":1}}],[\"<property\",{\"1\":{\"952\":2}}],[\"<properties>\",{\"1\":{\"397\":1,\"862\":2,\"1177\":1}}],[\"<profile\",{\"1\":{\"862\":2}}],[\"<profile>\",{\"1\":{\"862\":2}}],[\"<profiles>\",{\"1\":{\"862\":1}}],[\"<packaging>war<\",{\"1\":{\"8564\":1}}],[\"<packaging>pom<\",{\"1\":{\"397\":1}}],[\"<pattern>\",{\"1\":{\"952\":3}}],[\"<pattern>$\",{\"1\":{\"952\":1}}],[\"<parent>\",{\"1\":{\"391\":1,\"394\":1}}],[\"<plugin>\",{\"1\":{\"347\":1,\"703\":1,\"1177\":1}}],[\"<plugins>\",{\"1\":{\"347\":1,\"703\":1,\"1177\":1}}],[\"<\",{\"1\":{\"347\":2,\"391\":2,\"394\":1,\"397\":14,\"412\":6,\"446\":3,\"450\":2,\"550\":1,\"614\":1,\"642\":4,\"653\":1,\"703\":3,\"862\":7,\"952\":74,\"967\":1,\"978\":6,\"1005\":5,\"1046\":1,\"1129\":1,\"1132\":1,\"1135\":1,\"1138\":1,\"1142\":1,\"1145\":1,\"1148\":1,\"1151\":1,\"1158\":1,\"1161\":1,\"1164\":1,\"1167\":1,\"1169\":1,\"1172\":2,\"1177\":45,\"1217\":2,\"1361\":10,\"1730\":1,\"1763\":2,\"2962\":2,\"3414\":1,\"3457\":1,\"3570\":2,\"3803\":1,\"5030\":1,\"5221\":1,\"5253\":1,\"5618\":2,\"5620\":1,\"6041\":1,\"6098\":1,\"6264\":1,\"6869\":4,\"7106\":2,\"7989\":1,\"8045\":1,\"8054\":2,\"8056\":1,\"8146\":1,\"8201\":6,\"8383\":1,\"8387\":1,\"8391\":1,\"8552\":1,\"8988\":1,\"9025\":1,\"9184\":2,\"9232\":1,\"9608\":2,\"9613\":1,\"9619\":1,\"9631\":12,\"9633\":2,\"9635\":4,\"9642\":32,\"9645\":5,\"9785\":1,\"9818\":1,\"10351\":1,\"10829\":1,\"10839\":1}}],[\"c8710e95\",{\"1\":{\"10726\":1}}],[\"c8ff\",{\"1\":{\"6668\":1}}],[\"crud\",{\"1\":{\"10653\":1}}],[\"credentials\",{\"1\":{\"10726\":3}}],[\"creditcard\",{\"1\":{\"4823\":1}}],[\"creature\",{\"1\":{\"7075\":1}}],[\"createuser方法\",{\"1\":{\"10702\":1}}],[\"createuser\",{\"0\":{\"10701\":1},\"1\":{\"10703\":1,\"10711\":1,\"10714\":1,\"10718\":1,\"10766\":1}}],[\"createindex\",{\"1\":{\"10385\":1,\"10394\":1,\"10399\":1}}],[\"createcollection\",{\"1\":{\"10231\":2}}],[\"createstatement\",{\"1\":{\"8109\":1}}],[\"createfile\",{\"1\":{\"6618\":1}}],[\"createnewfile\",{\"0\":{\"2001\":1},\"1\":{\"2003\":2}}],[\"create\",{\"1\":{\"1334\":1,\"1336\":1,\"1338\":1,\"1340\":1,\"1342\":1,\"1344\":1,\"1346\":1,\"1348\":1,\"1350\":1,\"1352\":1,\"1354\":1,\"8105\":1,\"8167\":1,\"8358\":1,\"8539\":1,\"10196\":1}}],[\"createdatetime\",{\"1\":{\"10252\":1,\"10264\":2,\"10290\":1,\"10603\":1}}],[\"createdatasource\",{\"1\":{\"8260\":1,\"8324\":1}}],[\"createdirectory\",{\"1\":{\"6617\":1}}],[\"created\",{\"1\":{\"734\":2}}],[\"cfg\",{\"1\":{\"10626\":2}}],[\"cfg=rs\",{\"1\":{\"10626\":1}}],[\"cn\",{\"1\":{\"9642\":2,\"9645\":3}}],[\"cn1\",{\"1\":{\"6952\":2}}],[\"cvfm\",{\"1\":{\"9503\":1}}],[\"cs\",{\"1\":{\"9690\":1,\"9695\":3}}],[\"cset\",{\"1\":{\"7723\":1}}],[\"css\",{\"1\":{\"1303\":1,\"8401\":1}}],[\"c++\",{\"1\":{\"6927\":1}}],[\"cgi\",{\"1\":{\"6896\":1}}],[\"cb\",{\"1\":{\"6331\":1,\"6334\":1}}],[\"cbuf数组中了\",{\"1\":{\"6256\":1}}],[\"cbuf\",{\"1\":{\"2046\":1,\"2048\":8,\"2054\":1,\"2059\":1,\"2094\":1,\"2098\":4,\"6253\":1,\"6254\":4,\"6256\":1,\"6260\":1,\"6262\":1,\"6264\":3,\"6287\":3,\"6398\":3,\"6411\":3}}],[\"cp\",{\"1\":{\"10774\":3}}],[\"cpp\",{\"1\":{\"6233\":1}}],[\"cpu\",{\"1\":{\"5291\":1,\"7553\":2}}],[\"cpu的调度策略\",{\"0\":{\"5233\":1}}],[\"cpu的切换效率很高\",{\"1\":{\"5103\":1}}],[\"cpu是来回切换执行线程的\",{\"1\":{\"5223\":1}}],[\"cpu等\",{\"1\":{\"5085\":1}}],[\"curd的api\",{\"0\":{\"8348\":1}}],[\"curd\",{\"0\":{\"7877\":1,\"10850\":1}}],[\"curretnthread\",{\"1\":{\"5207\":1}}],[\"currentthread\",{\"1\":{\"5185\":2,\"5187\":1,\"5219\":2,\"5221\":1,\"5253\":1,\"5263\":1,\"5310\":1,\"5322\":1,\"5345\":2,\"5396\":1,\"5464\":1,\"5486\":1,\"5517\":1}}],[\"currenttimemillion\",{\"0\":{\"2302\":1}}],[\"currenttimemillis进行计时\",{\"1\":{\"6358\":1}}],[\"currenttimemillis\",{\"1\":{\"1610\":1,\"2304\":2,\"3457\":2,\"3996\":1,\"4466\":2,\"6359\":2,\"8113\":1,\"8121\":1}}],[\"currentpage\",{\"1\":{\"1263\":1,\"1265\":4,\"1276\":3,\"1299\":4}}],[\"cust\",{\"1\":{\"8045\":3,\"8089\":2,\"8205\":2,\"8207\":9,\"8210\":6,\"8326\":2}}],[\"customdata\",{\"1\":{\"10703\":1}}],[\"custom对象\",{\"0\":{\"8040\":1}}],[\"customerdaoimpltest\",{\"1\":{\"8210\":1}}],[\"customerdaoimpl\",{\"0\":{\"8206\":1},\"1\":{\"8207\":1,\"8210\":2}}],[\"customerdao\",{\"0\":{\"8203\":1},\"1\":{\"8205\":1,\"8207\":1}}],[\"customer1\",{\"1\":{\"8047\":2}}],[\"customers\",{\"1\":{\"7947\":1,\"7952\":1,\"7970\":1,\"7980\":1,\"7991\":1,\"8037\":1,\"8047\":2,\"8056\":1,\"8084\":1,\"8089\":1,\"8207\":7,\"8381\":1,\"8383\":1,\"8385\":1,\"8387\":1,\"8389\":1,\"8391\":2}}],[\"customer\",{\"1\":{\"4227\":4,\"4229\":4,\"8037\":4,\"8042\":3,\"8045\":4,\"8047\":4,\"8056\":1,\"8089\":2,\"8205\":4,\"8207\":7,\"8210\":5,\"8326\":1,\"8385\":4,\"8387\":1,\"8389\":5}}],[\"cust2\",{\"1\":{\"4227\":2,\"4229\":2}}],[\"cust1\",{\"1\":{\"4227\":2,\"4229\":2}}],[\"c4\",{\"1\":{\"3125\":1,\"7002\":2}}],[\"c3p0\",{\"1\":{\"8244\":1,\"8247\":1}}],[\"c3\",{\"1\":{\"3125\":1,\"6989\":2,\"7000\":2}}],[\"cdata\",{\"1\":{\"9619\":1}}],[\"cdata区\",{\"1\":{\"9618\":1}}],[\"cde\",{\"1\":{\"2962\":4}}],[\"cd\",{\"1\":{\"2877\":1}}],[\"center\",{\"1\":{\"10128\":1}}],[\"centos\",{\"1\":{\"2870\":1}}],[\"certs\",{\"1\":{\"9902\":1}}],[\"ceiling\",{\"1\":{\"1899\":1,\"1916\":1}}],[\"ceil\",{\"0\":{\"1806\":1},\"1\":{\"1805\":1,\"1808\":4}}],[\"c语言等\",{\"1\":{\"2836\":1}}],[\"c2\",{\"1\":{\"1763\":3,\"3125\":1,\"4227\":2,\"6989\":2,\"6997\":2,\"9714\":2}}],[\"c1\",{\"1\":{\"1763\":3,\"3118\":1,\"3125\":1,\"3162\":2,\"4227\":2,\"6989\":2,\"6994\":2,\"9714\":2,\"9717\":3}}],[\"cc\",{\"1\":{\"1119\":3,\"1788\":3,\"2407\":3,\"2410\":1,\"2413\":1,\"2422\":1,\"2426\":2,\"2429\":2,\"2433\":2,\"2436\":3,\"3591\":1,\"4306\":1,\"4509\":1,\"5779\":2,\"5901\":1,\"6073\":1,\"7634\":3,\"8162\":1}}],[\"cj\",{\"1\":{\"969\":1,\"981\":1,\"999\":1,\"1008\":1,\"1206\":1,\"1364\":1,\"7852\":1,\"7858\":1,\"7871\":1}}],[\"cyan\",{\"1\":{\"923\":1,\"952\":2}}],[\"cybercell\",{\"1\":{\"434\":1,\"991\":1,\"1119\":3}}],[\"clustermonitor\",{\"1\":{\"10668\":1}}],[\"clustermanager\",{\"1\":{\"10668\":1}}],[\"clusteradmin\",{\"1\":{\"10668\":1,\"10691\":1}}],[\"clustertime\",{\"1\":{\"10554\":1,\"10573\":1,\"10580\":1,\"10657\":1,\"10660\":1}}],[\"cluster\",{\"1\":{\"9840\":1,\"9895\":2,\"10585\":1}}],[\"cl4\",{\"1\":{\"7043\":2}}],[\"cl3\",{\"1\":{\"7043\":2}}],[\"cl2\",{\"1\":{\"7043\":3}}],[\"cl1\",{\"1\":{\"7043\":3}}],[\"cloud\",{\"0\":{\"10867\":1}}],[\"closing\",{\"1\":{\"9899\":1}}],[\"closequietly\",{\"1\":{\"8341\":1}}],[\"closeresource\",{\"1\":{\"7978\":1,\"7980\":1,\"7989\":1,\"8037\":1,\"8045\":1,\"8054\":1,\"8084\":1,\"8089\":1,\"8113\":1,\"8121\":1,\"8126\":1,\"8146\":1,\"8148\":1,\"8198\":1,\"8199\":1,\"8201\":4,\"8210\":7,\"8326\":1,\"8381\":1,\"8383\":1,\"8385\":1,\"8387\":1,\"8389\":1,\"8391\":1}}],[\"close方法一定要放到finally语句里\",{\"1\":{\"2112\":1}}],[\"close\",{\"0\":{\"2060\":1,\"2110\":1,\"6244\":1,\"6279\":1,\"6395\":1},\"1\":{\"2062\":3,\"2075\":1,\"2114\":2,\"4720\":1,\"4724\":1,\"4753\":1,\"4777\":1,\"6218\":1,\"6246\":1,\"6251\":1,\"6254\":1,\"6281\":1,\"6285\":1,\"6287\":2,\"6302\":1,\"6306\":2,\"6340\":1,\"6341\":1,\"6348\":1,\"6353\":3,\"6409\":1,\"6411\":2,\"6449\":1,\"6460\":1,\"6483\":1,\"6487\":1,\"6516\":2,\"6526\":1,\"6555\":1,\"6557\":1,\"6571\":1,\"6573\":1,\"6780\":1,\"6803\":1,\"6819\":2,\"6840\":1,\"6843\":1,\"6848\":1,\"7942\":1,\"7943\":1,\"7970\":2,\"7978\":2,\"8089\":1,\"8251\":2,\"8340\":1,\"9095\":1,\"9099\":1}}],[\"closeable\",{\"1\":{\"2031\":2,\"2070\":1,\"2320\":1,\"2777\":1}}],[\"clothfactory\",{\"1\":{\"7225\":1,\"7227\":3,\"7229\":1,\"7231\":2}}],[\"clone\",{\"1\":{\"4209\":1}}],[\"clist\",{\"1\":{\"7723\":1}}],[\"cli\",{\"1\":{\"2831\":1}}],[\"clientsocket\",{\"1\":{\"6803\":3}}],[\"clients<\",{\"1\":{\"1046\":1}}],[\"client\",{\"1\":{\"1048\":1,\"1051\":1,\"6803\":1,\"6819\":3,\"6823\":1}}],[\"clearbatch\",{\"0\":{\"8100\":1},\"1\":{\"8121\":1,\"8126\":1}}],[\"clear\",{\"0\":{\"2411\":1,\"2596\":1},\"1\":{\"2413\":2,\"2416\":1,\"2598\":2,\"2612\":1}}],[\"cl\",{\"1\":{\"2144\":2,\"7002\":2}}],[\"clazz参数\",{\"1\":{\"8192\":1}}],[\"clazz\",{\"1\":{\"2134\":2,\"2137\":2,\"2141\":2,\"2144\":2,\"2147\":2,\"2150\":2,\"2153\":2,\"2156\":2,\"2159\":1,\"2162\":2,\"2165\":2,\"2168\":2,\"2171\":1,\"2175\":2,\"2178\":2,\"2181\":3,\"2185\":2,\"2188\":2,\"2191\":2,\"2194\":1,\"2197\":2,\"2200\":2,\"2204\":2,\"2211\":2,\"2239\":3,\"2244\":3,\"2256\":2,\"2282\":3,\"2291\":2,\"6949\":2,\"7065\":3,\"7097\":3,\"7106\":2,\"7128\":3,\"7132\":2,\"7134\":2,\"7137\":2,\"7139\":3,\"7141\":2,\"7143\":2,\"7146\":3,\"7161\":4,\"7179\":2,\"7862\":2,\"8054\":3,\"8201\":6}}],[\"class后面选择按钮\",{\"1\":{\"9510\":1}}],[\"class传递进去\",{\"1\":{\"8058\":1}}],[\"classtest\",{\"1\":{\"7043\":1}}],[\"class对象\",{\"1\":{\"7011\":1}}],[\"class对应的属性了\",{\"1\":{\"742\":1}}],[\"class本身也是一个类\",{\"1\":{\"6974\":1}}],[\"class是直接操纵加载到内存里的类的\",{\"1\":{\"6971\":1}}],[\"class结尾\",{\"1\":{\"6969\":1}}],[\"class结尾的文件\",{\"1\":{\"2895\":1}}],[\"class与类的加载\",{\"0\":{\"6968\":1}}],[\"class与反射工作原理\",{\"0\":{\"6929\":1}}],[\"class属于类的类\",{\"1\":{\"6966\":1}}],[\"class属性\",{\"1\":{\"737\":1,\"738\":1,\"9473\":1}}],[\"class属性配置的类\",{\"1\":{\"726\":1,\"734\":1}}],[\"class的特点\",{\"0\":{\"6973\":1}}],[\"class的实例就对应着一个运行时类\",{\"1\":{\"6971\":1}}],[\"class的全类名为\",{\"1\":{\"6965\":1}}],[\"class的名字不能与包含它的外部类类名相同\",{\"1\":{\"4302\":1}}],[\"class类的常用方法\",{\"0\":{\"7003\":1}}],[\"class类是reflection的根源\",{\"1\":{\"6980\":1}}],[\"class类是反射的源头\",{\"1\":{\"6967\":1}}],[\"class类是类的类\",{\"1\":{\"6930\":1}}],[\"class类\",{\"0\":{\"6964\":1},\"1\":{\"5331\":1}}],[\"class以及枚举的数组\",{\"1\":{\"4933\":1}}],[\"classcastexception异常\",{\"1\":{\"5955\":1}}],[\"classcastexception\",{\"0\":{\"4715\":1},\"1\":{\"4691\":1,\"4699\":1,\"7123\":1}}],[\"class文件中\",{\"1\":{\"4968\":1}}],[\"class文件\",{\"1\":{\"4338\":1,\"6977\":1}}],[\"class关键字\",{\"1\":{\"3630\":1}}],[\"class和hi\",{\"1\":{\"2916\":1}}],[\"class作为后缀\",{\"1\":{\"2891\":1}}],[\"classname\",{\"1\":{\"2147\":1,\"4383\":1,\"6952\":3,\"7505\":1}}],[\"classnotfoundexception\",{\"1\":{\"2140\":1,\"2147\":1,\"4699\":1,\"6999\":1}}],[\"classloadertest\",{\"1\":{\"7049\":1}}],[\"classloader\",{\"0\":{\"7001\":1,\"7033\":1},\"1\":{\"2143\":1,\"2144\":1,\"2165\":4,\"2167\":1,\"2168\":2,\"7002\":1,\"7034\":1,\"7043\":4,\"7049\":3,\"7266\":1,\"7970\":1,\"7975\":1,\"8260\":1,\"8324\":1}}],[\"class<void>\",{\"1\":{\"6989\":1}}],[\"class<override>\",{\"1\":{\"6989\":1}}],[\"class<object>\",{\"1\":{\"6989\":1}}],[\"class<\",{\"1\":{\"2137\":1,\"2141\":1,\"2144\":1,\"2147\":2,\"2156\":2,\"2162\":2,\"2181\":1,\"2204\":1,\"2211\":1,\"2228\":2,\"2266\":2,\"2272\":2,\"2275\":2,\"4957\":1,\"6997\":1,\"7000\":1,\"7002\":1,\"7086\":1,\"7266\":1,\"7858\":1}}],[\"class<person>\",{\"1\":{\"2134\":1,\"2150\":1,\"2153\":1,\"2156\":1,\"2162\":1,\"2165\":1,\"2168\":1,\"2175\":1,\"2178\":1,\"2181\":1,\"2185\":1,\"2188\":1,\"2191\":1,\"2197\":1,\"2200\":1,\"2204\":1,\"2211\":1,\"2239\":1,\"2244\":1,\"2256\":1,\"2282\":1,\"2291\":1,\"5060\":1,\"6960\":1,\"6962\":1,\"6994\":1,\"7054\":1,\"7065\":1,\"7072\":1}}],[\"class<t>\",{\"0\":{\"8057\":1},\"1\":{\"2129\":1,\"8054\":1,\"8201\":2}}],[\"classic\",{\"1\":{\"952\":4}}],[\"class=\",{\"1\":{\"952\":14}}],[\"classpath\",{\"0\":{\"6998\":1},\"1\":{\"734\":2,\"1083\":1,\"1376\":2,\"6949\":7}}],[\"classes默认是编译后的java文件目录\",{\"1\":{\"9260\":1}}],[\"classes\",{\"1\":{\"720\":1,\"734\":2,\"8499\":1,\"8508\":1,\"8627\":1,\"9260\":1,\"9262\":1}}],[\"classes属性\",{\"0\":{\"666\":1}}],[\"class\",{\"0\":{\"2126\":1,\"2138\":1,\"2172\":1,\"2182\":1,\"2901\":1,\"4443\":1,\"6963\":1,\"6992\":1},\"1\":{\"372\":1,\"425\":2,\"427\":1,\"430\":3,\"519\":1,\"584\":2,\"590\":1,\"598\":1,\"609\":2,\"611\":1,\"621\":1,\"631\":1,\"635\":1,\"645\":1,\"647\":1,\"656\":1,\"663\":1,\"669\":2,\"726\":1,\"734\":2,\"781\":3,\"882\":2,\"888\":1,\"955\":1,\"969\":1,\"981\":1,\"985\":1,\"991\":1,\"1008\":1,\"1016\":1,\"1029\":1,\"1038\":1,\"1083\":2,\"1206\":1,\"1211\":1,\"1224\":1,\"1234\":1,\"1265\":1,\"1268\":1,\"1276\":1,\"1290\":2,\"1296\":1,\"1299\":1,\"1364\":1,\"1376\":1,\"1415\":1,\"1542\":2,\"1639\":2,\"1642\":2,\"1645\":2,\"1666\":1,\"1670\":1,\"1685\":1,\"1688\":1,\"1769\":1,\"1795\":1,\"1797\":1,\"1865\":1,\"1868\":1,\"1871\":1,\"1876\":1,\"1940\":1,\"1943\":1,\"2031\":2,\"2070\":2,\"2128\":1,\"2129\":1,\"2134\":2,\"2137\":1,\"2141\":2,\"2144\":1,\"2146\":1,\"2147\":2,\"2150\":1,\"2153\":1,\"2156\":2,\"2162\":1,\"2165\":1,\"2168\":1,\"2175\":1,\"2178\":1,\"2181\":3,\"2185\":1,\"2188\":1,\"2191\":1,\"2197\":1,\"2200\":1,\"2204\":2,\"2211\":3,\"2214\":1,\"2217\":1,\"2239\":1,\"2244\":1,\"2250\":1,\"2252\":1,\"2256\":2,\"2272\":1,\"2282\":3,\"2287\":1,\"2291\":2,\"2297\":1,\"2301\":1,\"2317\":1,\"2320\":1,\"2348\":1,\"2351\":1,\"2365\":1,\"2472\":1,\"2476\":1,\"2708\":1,\"2712\":1,\"2735\":1,\"2763\":1,\"2765\":1,\"2774\":1,\"2777\":1,\"2882\":1,\"2885\":1,\"2916\":3,\"2918\":4,\"2962\":2,\"3035\":1,\"3405\":1,\"3414\":1,\"3617\":1,\"3630\":1,\"3636\":1,\"3664\":3,\"3738\":1,\"3747\":2,\"3782\":1,\"3787\":2,\"3816\":2,\"3821\":2,\"3857\":1,\"3870\":1,\"3901\":1,\"3976\":2,\"3980\":1,\"3985\":1,\"4001\":2,\"4039\":2,\"4061\":2,\"4080\":1,\"4083\":1,\"4092\":1,\"4142\":1,\"4164\":3,\"4301\":1,\"4306\":6,\"4329\":1,\"4332\":2,\"4356\":1,\"4358\":1,\"4378\":1,\"4383\":1,\"4394\":1,\"4422\":1,\"4425\":1,\"4446\":1,\"4459\":2,\"4466\":1,\"4469\":2,\"4499\":1,\"4509\":1,\"4513\":2,\"4553\":1,\"4585\":2,\"4613\":1,\"4622\":1,\"4670\":1,\"4734\":1,\"4777\":1,\"4803\":2,\"4813\":1,\"4843\":1,\"4943\":1,\"4966\":2,\"4967\":1,\"4968\":1,\"4984\":1,\"5011\":1,\"5015\":1,\"5019\":1,\"5022\":1,\"5030\":1,\"5058\":1,\"5060\":9,\"5185\":2,\"5219\":2,\"5221\":2,\"5253\":2,\"5263\":2,\"5283\":1,\"5310\":2,\"5322\":2,\"5332\":1,\"5345\":2,\"5350\":2,\"5359\":1,\"5384\":1,\"5396\":2,\"5426\":1,\"5464\":2,\"5486\":2,\"5517\":2,\"5672\":1,\"5990\":1,\"5999\":1,\"6016\":1,\"6019\":1,\"6022\":1,\"6025\":1,\"6028\":1,\"6094\":2,\"6100\":1,\"6325\":1,\"6328\":1,\"6331\":1,\"6334\":1,\"6382\":1,\"6569\":1,\"6694\":1,\"6875\":1,\"6940\":1,\"6949\":2,\"6956\":1,\"6960\":3,\"6962\":3,\"6965\":1,\"6966\":1,\"6975\":1,\"6978\":1,\"6982\":1,\"6989\":4,\"6994\":2,\"6997\":1,\"7000\":2,\"7002\":1,\"7037\":1,\"7043\":2,\"7049\":1,\"7054\":2,\"7063\":1,\"7065\":3,\"7072\":1,\"7097\":2,\"7106\":4,\"7128\":2,\"7132\":3,\"7134\":2,\"7137\":3,\"7139\":6,\"7141\":2,\"7143\":2,\"7146\":2,\"7161\":4,\"7169\":1,\"7179\":3,\"7227\":1,\"7229\":1,\"7231\":1,\"7277\":1,\"7279\":1,\"7307\":1,\"7655\":1,\"7858\":1,\"7862\":2,\"7865\":1,\"7873\":2,\"7889\":1,\"7970\":1,\"7975\":1,\"8042\":1,\"8045\":1,\"8056\":1,\"8162\":1,\"8201\":1,\"8207\":1,\"8210\":1,\"8385\":1,\"8387\":1,\"8704\":1,\"8707\":1,\"8784\":1,\"8809\":1,\"8817\":1,\"8834\":1,\"8944\":1,\"9004\":1,\"9027\":1,\"9031\":1,\"9079\":1,\"9124\":2,\"9143\":1,\"9145\":1,\"9270\":1,\"9452\":1,\"9456\":1,\"9473\":1,\"9500\":1,\"9824\":1}}],[\"clr\",{\"1\":{\"919\":1,\"920\":1,\"923\":2}}],[\"cache\",{\"1\":{\"8959\":1}}],[\"cash\",{\"1\":{\"4823\":1}}],[\"case判断\",{\"1\":{\"7253\":1}}],[\"case中\",{\"1\":{\"3428\":1}}],[\"case执行效率稍高\",{\"1\":{\"3376\":1}}],[\"case的\",{\"1\":{\"3377\":1}}],[\"case的选择\",{\"0\":{\"3375\":1}}],[\"case的限制\",{\"1\":{\"3369\":1}}],[\"case结构中\",{\"1\":{\"3365\":1}}],[\"case结构\",{\"1\":{\"3364\":1,\"3365\":1}}],[\"case\",{\"1\":{\"1364\":1,\"2683\":1,\"2720\":1,\"2727\":1,\"3335\":1,\"3360\":2,\"3369\":1,\"3374\":5,\"3376\":2,\"6949\":3}}],[\"can\",{\"1\":{\"2962\":1}}],[\"canon\",{\"1\":{\"2729\":1}}],[\"canexecute\",{\"1\":{\"1989\":1}}],[\"canwrite\",{\"1\":{\"1989\":1}}],[\"canread\",{\"1\":{\"1989\":2}}],[\"canxxx\",{\"0\":{\"1986\":1}}],[\"calsses\",{\"1\":{\"8597\":1,\"8601\":1}}],[\"calssess\",{\"1\":{\"669\":1}}],[\"callablestatement\",{\"1\":{\"7885\":1}}],[\"callable<t>\",{\"1\":{\"5503\":1}}],[\"callabletest\",{\"1\":{\"5486\":1}}],[\"callable\",{\"1\":{\"5486\":1}}],[\"callable任务的执行结果进行取消\",{\"1\":{\"5476\":1}}],[\"callable接口的实例\",{\"1\":{\"5474\":1}}],[\"callable接口更加强大\",{\"1\":{\"5469\":1}}],[\"callable接口介绍\",{\"0\":{\"5468\":1}}],[\"callable接口\",{\"0\":{\"5466\":1}}],[\"call\",{\"1\":{\"5470\":1,\"5471\":1,\"5486\":1}}],[\"callneer\",{\"1\":{\"4358\":1}}],[\"callnener\",{\"1\":{\"4358\":1}}],[\"calendar则不行\",{\"1\":{\"1619\":1}}],[\"calendar\",{\"1\":{\"1614\":1}}],[\"capacity的值至少是treeify\",{\"1\":{\"5889\":1}}],[\"capacity时\",{\"1\":{\"5889\":1}}],[\"capacity\",{\"1\":{\"1568\":1,\"1569\":1,\"5656\":1,\"5885\":1,\"5886\":1,\"5889\":1}}],[\"catalina\",{\"1\":{\"8481\":1,\"8617\":1}}],[\"cat\",{\"1\":{\"4306\":1}}],[\"catchuptakeoverdelaymillis\",{\"1\":{\"10541\":1}}],[\"catchuptimeoutmillis\",{\"1\":{\"10541\":1}}],[\"catch进行异常捕捉处理\",{\"1\":{\"10268\":1}}],[\"catch进行处理\",{\"1\":{\"4763\":1}}],[\"catch插入\",{\"0\":{\"10267\":1}}],[\"catch处理\",{\"1\":{\"4761\":1,\"4788\":1,\"6411\":1}}],[\"catch中的异常类\",{\"1\":{\"6011\":1}}],[\"catch中的异常类型如果满足子父类关系\",{\"1\":{\"4758\":1}}],[\"catch中的异常类型如果没有子父类关系\",{\"1\":{\"4758\":1}}],[\"catch中有return语句\",{\"1\":{\"4745\":1}}],[\"catch捕获的顺序\",{\"1\":{\"4758\":1}}],[\"catch和finally里面也可能会有异常\",{\"1\":{\"4756\":1}}],[\"catch和throws\",{\"1\":{\"4677\":1}}],[\"catch结构\",{\"1\":{\"4738\":1,\"4770\":1}}],[\"catch使用说明\",{\"0\":{\"4735\":1}}],[\"catch示例\",{\"0\":{\"4733\":1}}],[\"catch语句\",{\"1\":{\"2112\":1}}],[\"catch\",{\"0\":{\"4725\":1,\"4778\":1,\"4784\":1},\"1\":{\"1502\":1,\"1506\":1,\"2003\":1,\"2114\":2,\"4688\":2,\"4727\":3,\"4729\":1,\"4732\":1,\"4734\":3,\"4751\":1,\"4753\":4,\"4755\":1,\"4762\":2,\"4764\":1,\"4777\":1,\"4779\":1,\"4785\":1,\"4786\":1,\"4803\":1,\"5221\":2,\"5226\":1,\"5229\":1,\"5426\":2,\"5464\":1,\"5486\":2,\"6249\":1,\"6251\":2,\"6254\":2,\"6283\":1,\"6285\":2,\"6287\":3,\"6306\":3,\"6348\":2,\"6353\":3,\"6449\":2,\"6460\":1,\"6840\":1,\"6843\":1,\"6884\":1,\"7970\":3,\"7978\":2,\"7980\":1,\"7989\":1,\"8037\":1,\"8045\":1,\"8054\":1,\"8088\":1,\"8146\":1,\"8148\":3,\"8201\":4,\"8210\":7,\"8324\":1,\"8326\":1,\"10269\":1}}],[\"category\",{\"0\":{\"1335\":1},\"1\":{\"1313\":1,\"1336\":1}}],[\"camel\",{\"1\":{\"1364\":1}}],[\"camel<\",{\"1\":{\"397\":1}}],[\"cart`\",{\"1\":{\"1350\":1}}],[\"cart\",{\"0\":{\"1349\":1},\"1\":{\"1327\":1}}],[\"chmod\",{\"1\":{\"10770\":1}}],[\"checkbox\",{\"1\":{\"9025\":2}}],[\"checked\",{\"1\":{\"4699\":1,\"4824\":1}}],[\"chn\",{\"1\":{\"7161\":2}}],[\"changeuserpassword\",{\"1\":{\"10730\":1}}],[\"change\",{\"1\":{\"10585\":1}}],[\"channel\",{\"1\":{\"6583\":1,\"9899\":1}}],[\"channels\",{\"1\":{\"6583\":1}}],[\"chainingallowed\",{\"1\":{\"10541\":1}}],[\"chain\",{\"1\":{\"9270\":2,\"9276\":1,\"9279\":1}}],[\"char会转为整形的ascii进行运算\",{\"1\":{\"3159\":1}}],[\"char是通过转为ascii码进行运算的\",{\"1\":{\"3149\":1}}],[\"char类型就是以数值方式储存的\",{\"1\":{\"4227\":1}}],[\"char类型的值不能是空字符串\",{\"1\":{\"3135\":1}}],[\"char类型没有parsexxx方法\",{\"1\":{\"1485\":1}}],[\"char数组每次装\",{\"1\":{\"2055\":1,\"6262\":1}}],[\"char替换\",{\"0\":{\"1510\":1}}],[\"chars\",{\"1\":{\"1494\":2}}],[\"charsequence可以看做字符串\",{\"1\":{\"1458\":1}}],[\"charsequence\",{\"1\":{\"1458\":1,\"1515\":2,\"1542\":2,\"1696\":1,\"2744\":1,\"2747\":1,\"2756\":1,\"2760\":1,\"2767\":1}}],[\"charset=utf\",{\"1\":{\"9082\":1,\"9101\":1}}],[\"charset=utf8\",{\"1\":{\"1334\":1,\"1336\":1,\"1338\":1,\"1340\":1,\"1342\":1,\"1344\":1,\"1346\":1,\"1348\":1,\"1350\":1,\"1352\":1,\"1354\":1}}],[\"charset\",{\"1\":{\"2981\":1}}],[\"charsetname\",{\"1\":{\"1502\":1,\"6388\":1,\"6404\":1}}],[\"charset>\",{\"1\":{\"952\":4}}],[\"char\",{\"0\":{\"2049\":1,\"3111\":1},\"1\":{\"1431\":1,\"1490\":1,\"1491\":2,\"1494\":2,\"1495\":1,\"1496\":1,\"1512\":2,\"1542\":1,\"1550\":1,\"1556\":4,\"1559\":2,\"1584\":1,\"1763\":4,\"2042\":3,\"2046\":1,\"2048\":5,\"2054\":2,\"2059\":1,\"2098\":3,\"3032\":1,\"3113\":1,\"3118\":1,\"3125\":4,\"3158\":1,\"3162\":1,\"3219\":1,\"3241\":1,\"3367\":1,\"3697\":1,\"3767\":1,\"4227\":3,\"4634\":1,\"4724\":1,\"4753\":1,\"4777\":1,\"6251\":1,\"6253\":1,\"6254\":2,\"6262\":2,\"6287\":2,\"6331\":1,\"6334\":1,\"6398\":2,\"6411\":2,\"6460\":1,\"6470\":1,\"7916\":1}}],[\"charat\",{\"0\":{\"1429\":1},\"1\":{\"1431\":2,\"1577\":1,\"2949\":1,\"2954\":1,\"4709\":1,\"4714\":1}}],[\"character\",{\"1\":{\"1348\":8,\"1758\":1,\"2735\":1}}],[\"characters\",{\"1\":{\"624\":1}}],[\"child\",{\"0\":{\"6133\":1,\"6137\":1},\"1\":{\"1946\":2,\"6135\":1,\"6139\":1,\"10164\":2,\"10498\":2,\"10864\":1}}],[\"china\",{\"1\":{\"1676\":2,\"4378\":2,\"4394\":1,\"6962\":3}}],[\"chronolocaldatetime<localdate>\",{\"1\":{\"1645\":1}}],[\"chronolocaldate\",{\"1\":{\"1639\":1}}],[\"chrono\",{\"1\":{\"1626\":1}}],[\"chronounit\",{\"1\":{\"631\":1}}],[\"ch\",{\"1\":{\"952\":14,\"8960\":1,\"8961\":1,\"8962\":1}}],[\"c\",{\"0\":{\"2363\":1,\"4626\":1},\"1\":{\"492\":2,\"1491\":2,\"1496\":1,\"2003\":1,\"2006\":1,\"2009\":1,\"2015\":2,\"2093\":1,\"2098\":2,\"2314\":1,\"2365\":1,\"2382\":1,\"2391\":2,\"2407\":1,\"2426\":1,\"2433\":1,\"2436\":1,\"2492\":1,\"2508\":1,\"2518\":1,\"2530\":2,\"2537\":3,\"2546\":2,\"2549\":1,\"2552\":1,\"2555\":1,\"2563\":3,\"2566\":2,\"2569\":3,\"2606\":1,\"2760\":2,\"2962\":1,\"3241\":4,\"3504\":1,\"3939\":1,\"4061\":1,\"4227\":2,\"4631\":1,\"4638\":1,\"5060\":3,\"5426\":1,\"6233\":1,\"6398\":1,\"6925\":2,\"6927\":1,\"7128\":4,\"7139\":4,\"7568\":1,\"7572\":1,\"7694\":1,\"7697\":1,\"7701\":1,\"7721\":1,\"8437\":1,\"8617\":1,\"9262\":2,\"9503\":1,\"9543\":1,\"9579\":1,\"9684\":1,\"9690\":3,\"9693\":2,\"9695\":3,\"9774\":3,\"10082\":1,\"10099\":1,\"10157\":1}}],[\"ctx\",{\"1\":{\"430\":2}}],[\"ctrl+alt+shift+s\",{\"1\":{\"8534\":1,\"8566\":1,\"8638\":1,\"8682\":1}}],[\"ctrl\",{\"1\":{\"393\":1,\"553\":1,\"7324\":1}}],[\"cmd\",{\"1\":{\"340\":1}}],[\"cookie是用来保证用户在未登录情况下的身份识别\",{\"1\":{\"9804\":1}}],[\"cookie是存储在浏览器端而session是存储在服务器端\",{\"1\":{\"9670\":1}}],[\"cookie与session的应用场景\",{\"0\":{\"9798\":1}}],[\"cookie与session的区别\",{\"0\":{\"9792\":1}}],[\"cookie可以通过setmaxage\",{\"1\":{\"9796\":1}}],[\"cookie可能有多个\",{\"1\":{\"9686\":1}}],[\"cookie最大3kb\",{\"1\":{\"9795\":1}}],[\"cookie不占服务器资源\",{\"1\":{\"9797\":1}}],[\"cookie不安全\",{\"1\":{\"9794\":1}}],[\"cookie不止是储存了键值对\",{\"1\":{\"9707\":1}}],[\"cookie中有jsessionid\",{\"1\":{\"9768\":1}}],[\"cookie中不能直接存储中文数据\",{\"1\":{\"9724\":1}}],[\"cookie一般用于存出少量的不太敏感的数据\",{\"1\":{\"9738\":1}}],[\"cookie存储数据在客户端浏览器\",{\"1\":{\"9735\":1}}],[\"cookie支持中文数据\",{\"1\":{\"9725\":1}}],[\"cookie文件自动失效\",{\"1\":{\"9720\":1}}],[\"cookie数据被销毁\",{\"1\":{\"9716\":1}}],[\"cookie保存起来\",{\"1\":{\"9703\":1}}],[\"cookie有关的所有操作都是基于请求头和响应头的\",{\"1\":{\"9697\":1}}],[\"cookie的特性\",{\"1\":{\"9734\":1}}],[\"cookie的共享\",{\"0\":{\"9727\":1}}],[\"cookie的保存时间\",{\"0\":{\"9715\":1}}],[\"cookie的适用范围\",{\"1\":{\"9708\":1}}],[\"cookie的识别\",{\"0\":{\"9706\":1}}],[\"cookie的工作原理\",{\"0\":{\"9696\":1}}],[\"cookie的相关方法\",{\"0\":{\"9678\":1}}],[\"cookie使用范例\",{\"0\":{\"9691\":1}}],[\"cookies\",{\"1\":{\"9687\":1}}],[\"cookie和session只有浏览器能用\",{\"1\":{\"9649\":1}}],[\"cookie\",{\"0\":{\"9671\":1},\"1\":{\"8972\":1,\"9669\":1,\"9681\":4,\"9684\":2,\"9687\":2,\"9690\":3,\"9693\":2,\"9695\":2,\"9699\":1,\"9700\":1,\"9701\":1,\"9705\":1,\"9714\":4,\"9717\":3,\"9726\":4,\"9767\":1,\"9774\":2,\"9793\":1}}],[\"columvalue\",{\"1\":{\"8045\":2,\"8054\":2,\"8201\":4}}],[\"columnlisthandler\",{\"1\":{\"8374\":1}}],[\"columnlabel\",{\"1\":{\"8045\":2,\"8054\":2,\"8201\":4}}],[\"columncount\",{\"1\":{\"8045\":1,\"8054\":2,\"8201\":4}}],[\"column\",{\"1\":{\"8021\":1,\"8022\":1,\"8024\":1,\"8025\":1,\"8026\":1,\"8027\":1,\"10063\":1}}],[\"columnname\",{\"1\":{\"8005\":1}}],[\"collscan\",{\"1\":{\"10426\":1}}],[\"collation\",{\"1\":{\"10285\":1}}],[\"collate=utf8\",{\"1\":{\"1334\":1,\"1336\":1,\"1338\":1,\"1340\":1,\"1342\":1,\"1344\":1,\"1346\":1,\"1348\":1,\"1350\":1,\"1352\":1,\"1354\":1}}],[\"collate\",{\"1\":{\"1334\":6,\"1336\":1,\"1338\":4,\"1340\":4,\"1342\":3,\"1344\":2,\"1346\":5,\"1348\":2,\"1350\":3,\"1352\":6,\"1354\":3}}],[\"collector\",{\"1\":{\"7719\":1,\"7721\":1}}],[\"collector接口的实现\",{\"1\":{\"7718\":1}}],[\"collectors的方法\",{\"0\":{\"7726\":1}}],[\"collectors\",{\"0\":{\"7722\":1},\"1\":{\"7662\":1,\"7720\":1,\"7723\":2}}],[\"collect\",{\"1\":{\"7662\":1,\"7721\":1,\"7723\":2}}],[\"collection接口\",{\"1\":{\"5686\":1}}],[\"collection接口继承了java\",{\"1\":{\"5572\":1}}],[\"collection接口继承图\",{\"0\":{\"5550\":1}}],[\"collection接口的方法\",{\"0\":{\"5563\":1}}],[\"collection接口实现对象\",{\"1\":{\"2456\":1}}],[\"collections\",{\"0\":{\"2470\":1,\"5928\":1},\"1\":{\"2474\":1,\"2476\":2,\"2478\":1,\"2481\":1,\"2484\":1,\"2487\":2,\"2492\":2,\"2495\":1,\"2500\":1,\"2505\":1,\"2508\":1,\"2512\":1,\"2515\":1,\"2518\":1,\"2946\":1,\"2954\":1,\"4410\":1,\"5933\":1,\"5936\":1,\"10228\":1,\"10722\":1}}],[\"collection<v>\",{\"1\":{\"2621\":1}}],[\"collection<t>\",{\"1\":{\"2518\":2}}],[\"collection<integer>\",{\"1\":{\"2461\":1,\"2465\":1,\"2469\":1}}],[\"collection<\",{\"1\":{\"2407\":1,\"2426\":1,\"2433\":1,\"2436\":1,\"2500\":2,\"2505\":2,\"2508\":1}}],[\"collection<string>\",{\"1\":{\"2404\":1,\"2407\":2,\"2621\":1}}],[\"collection<e>\",{\"1\":{\"2397\":1,\"2525\":1}}],[\"collection\",{\"0\":{\"2393\":1,\"5554\":1,\"7551\":1},\"1\":{\"2395\":1,\"2399\":1,\"2546\":1,\"2561\":1,\"5542\":1,\"5543\":1,\"5556\":1,\"5562\":1,\"5570\":1,\"5573\":1,\"5588\":1,\"5611\":1,\"5630\":1,\"7553\":1,\"7662\":1,\"7699\":1,\"10058\":1,\"10261\":1,\"10417\":1}}],[\"collection+\",{\"0\":{\"2392\":1},\"1\":{\"136\":1}}],[\"collision\",{\"1\":{\"5764\":1}}],[\"coll2\",{\"1\":{\"2407\":5,\"2426\":2,\"2433\":2,\"2436\":2,\"2440\":1}}],[\"coll\",{\"1\":{\"2404\":4,\"2407\":5,\"2410\":1,\"2413\":3,\"2416\":2,\"2422\":4,\"2426\":2,\"2429\":3,\"2433\":3,\"2436\":3,\"2440\":1,\"2444\":1,\"2446\":2,\"2449\":1,\"2461\":2,\"2465\":2,\"2469\":3,\"2500\":2,\"2505\":2,\"5562\":2,\"5588\":5,\"5611\":5}}],[\"countdocument\",{\"1\":{\"10326\":1}}],[\"countdocuments\",{\"1\":{\"10321\":1}}],[\"countdocuments方法\",{\"1\":{\"10320\":1}}],[\"count++\",{\"1\":{\"3393\":1,\"3420\":1,\"3457\":1}}],[\"count\",{\"0\":{\"7689\":1},\"1\":{\"3393\":1,\"3420\":1,\"3457\":2,\"4164\":1,\"7691\":4,\"8207\":1,\"8210\":2,\"8381\":2,\"8383\":2,\"8391\":3,\"10321\":1,\"10326\":1}}],[\"country1\",{\"1\":{\"503\":1}}],[\"country\",{\"1\":{\"503\":1,\"4388\":1}}],[\"copyoption\",{\"1\":{\"6616\":1,\"6621\":1}}],[\"copyof\",{\"0\":{\"2371\":1,\"7775\":1},\"1\":{\"2375\":2}}],[\"copy文件\",{\"0\":{\"6515\":1}}],[\"copyfilewithbuffered\",{\"1\":{\"6359\":1}}],[\"copyfile\",{\"1\":{\"6306\":1}}],[\"copyfromarraytolist\",{\"1\":{\"6045\":1,\"6047\":1}}],[\"copy\",{\"0\":{\"2509\":1},\"1\":{\"2512\":2,\"6616\":1,\"9099\":1}}],[\"cos\",{\"1\":{\"1835\":1}}],[\"code进行标记\",{\"1\":{\"2950\":1}}],[\"code`\",{\"1\":{\"1348\":3}}],[\"code\",{\"0\":{\"8120\":1},\"1\":{\"1286\":1,\"2950\":2,\"2951\":1,\"2952\":1,\"2953\":1,\"2954\":3,\"2962\":1,\"2974\":1,\"4466\":2,\"8426\":1}}],[\"core下的zip包即可\",{\"1\":{\"8425\":1}}],[\"corepoolsize\",{\"1\":{\"5496\":1}}],[\"core<\",{\"1\":{\"1172\":1}}],[\"core\",{\"1\":{\"952\":10,\"10830\":1}}],[\"conﬁguration\",{\"1\":{\"10539\":1}}],[\"conﬁg数据库在内部使用\",{\"1\":{\"10207\":1}}],[\"conﬁg\",{\"1\":{\"10207\":1}}],[\"conf配置文件\",{\"1\":{\"10739\":1}}],[\"conf\",{\"1\":{\"8441\":1,\"8474\":1,\"8481\":1,\"9231\":1,\"10148\":1,\"10151\":1,\"10159\":1,\"10164\":1,\"10492\":1,\"10498\":1,\"10503\":1,\"10508\":1,\"10538\":1,\"10541\":1,\"10593\":1,\"10597\":1,\"10624\":1,\"10626\":1}}],[\"configterm\",{\"1\":{\"10554\":1,\"10576\":1,\"10583\":1}}],[\"configversion\",{\"1\":{\"10554\":1,\"10576\":1,\"10583\":1}}],[\"config>\",{\"1\":{\"9785\":2}}],[\"configurations中点击右上角的+号\",{\"1\":{\"8604\":1}}],[\"configuration>\",{\"1\":{\"952\":1}}],[\"configuration\",{\"1\":{\"614\":1,\"624\":1,\"1229\":1,\"1234\":1,\"1364\":1,\"1376\":1,\"8577\":1,\"8578\":1,\"8610\":1,\"10523\":1,\"10526\":2,\"10538\":1}}],[\"configurationproperties的类\",{\"0\":{\"610\":1}}],[\"configurationproperties注解时\",{\"1\":{\"613\":1}}],[\"configurationproperties注解绑定属性\",{\"1\":{\"609\":1}}],[\"configurationproperties注解绑定属性的类\",{\"1\":{\"606\":1}}],[\"configurationproperties注解是添加在方法上的\",{\"1\":{\"604\":1}}],[\"configurationproperties注解是写在类定义的上方\",{\"1\":{\"593\":1}}],[\"configurationproperties注解为第三方bean进行属性绑定\",{\"0\":{\"601\":1}}],[\"configurationproperties注解依然可以为第三方bean进行属性绑定\",{\"1\":{\"593\":1}}],[\"configurationproperties注解\",{\"1\":{\"593\":1}}],[\"configurationproperties注解就是用来指定加载的数据\",{\"1\":{\"589\":1}}],[\"configurationproperties绑定第三方bean\",{\"0\":{\"592\":1}}],[\"configurationproperties\",{\"0\":{\"587\":1},\"1\":{\"519\":1,\"590\":1,\"602\":1,\"611\":1,\"621\":1,\"623\":1,\"631\":1,\"635\":1,\"645\":1,\"647\":1}}],[\"configurableapplicationcontext就是一个ioc容器\",{\"1\":{\"428\":1}}],[\"configurableapplicationcontext\",{\"1\":{\"427\":1,\"430\":1}}],[\"config\",{\"1\":{\"23\":1,\"577\":1,\"590\":1,\"790\":1,\"809\":1,\"811\":1,\"830\":1,\"1119\":1,\"1206\":2,\"1229\":2,\"1364\":2,\"8768\":2,\"8784\":2,\"9880\":1,\"10148\":1,\"10151\":1,\"10585\":1,\"10596\":1,\"10597\":5}}],[\"con1\",{\"1\":{\"7462\":2}}],[\"con2\",{\"1\":{\"7377\":2,\"7382\":1,\"7386\":1,\"7468\":2}}],[\"con\",{\"1\":{\"7377\":2}}],[\"concern\",{\"1\":{\"10585\":2}}],[\"concurrent\",{\"1\":{\"5379\":1,\"5396\":1}}],[\"concat\",{\"0\":{\"1473\":1},\"1\":{\"1475\":2}}],[\"conncetdb方法连接数据库\",{\"1\":{\"7202\":1}}],[\"conncetdb方法用于连接数据库\",{\"1\":{\"7198\":1}}],[\"conn\",{\"1\":{\"4142\":3,\"7852\":2,\"7862\":2,\"7865\":2,\"7873\":2,\"7947\":2,\"7952\":1,\"7970\":5,\"7975\":2,\"7978\":3,\"7980\":4,\"7989\":4,\"8037\":4,\"8045\":4,\"8054\":4,\"8084\":3,\"8089\":3,\"8109\":2,\"8113\":3,\"8121\":3,\"8126\":5,\"8146\":2,\"8148\":9,\"8162\":5,\"8198\":1,\"8199\":1,\"8201\":8,\"8205\":7,\"8207\":14,\"8210\":28,\"8251\":1,\"8260\":1,\"8324\":2,\"8326\":4,\"8342\":1,\"8343\":1,\"8344\":1,\"8345\":1,\"8355\":1,\"8358\":1,\"8361\":1,\"8362\":1,\"8365\":1,\"8381\":3,\"8383\":3,\"8385\":3,\"8387\":3,\"8389\":3,\"8391\":4}}],[\"connect\",{\"1\":{\"7852\":1,\"10194\":1}}],[\"connect方法的第二个参数就是properties类\",{\"1\":{\"7852\":1}}],[\"connectivity\",{\"1\":{\"7798\":1}}],[\"connections\",{\"1\":{\"10164\":1,\"10498\":1}}],[\"connectioninitsqls\",{\"1\":{\"8314\":1}}],[\"connection对象调用preparedstatement方法执行预编译sql获取preparedstatemet对象\",{\"1\":{\"7947\":1}}],[\"connectiontest\",{\"1\":{\"7873\":1}}],[\"connectiondb1\",{\"1\":{\"7852\":1,\"7873\":1}}],[\"connection\",{\"1\":{\"4141\":1,\"4142\":1,\"7852\":2,\"7862\":1,\"7865\":1,\"7873\":1,\"7927\":1,\"7945\":1,\"7947\":2,\"7970\":1,\"7975\":2,\"7978\":1,\"7980\":1,\"7989\":1,\"8037\":1,\"8045\":1,\"8054\":1,\"8084\":1,\"8089\":1,\"8109\":1,\"8113\":1,\"8121\":1,\"8126\":1,\"8134\":1,\"8136\":1,\"8138\":1,\"8146\":1,\"8148\":1,\"8153\":1,\"8156\":1,\"8157\":1,\"8158\":1,\"8159\":1,\"8160\":1,\"8162\":2,\"8198\":1,\"8199\":1,\"8201\":4,\"8205\":7,\"8207\":7,\"8210\":7,\"8219\":1,\"8260\":1,\"8324\":2,\"8326\":1,\"8342\":1,\"8343\":1,\"8344\":1,\"8345\":1,\"8346\":1,\"8355\":1,\"8358\":1,\"8361\":1,\"8362\":1,\"8365\":1,\"8381\":1,\"8383\":1,\"8385\":1,\"8387\":1,\"8389\":1,\"8391\":1,\"8958\":1,\"9899\":1,\"10189\":1,\"10808\":1}}],[\"connectdb方法中\",{\"1\":{\"7202\":1}}],[\"connector\",{\"1\":{\"978\":1,\"1005\":1,\"1142\":1,\"1177\":1,\"1361\":1,\"7824\":1,\"7832\":1}}],[\"const\",{\"1\":{\"3054\":1}}],[\"constructor对象都有setaccessible\",{\"1\":{\"7186\":1}}],[\"constructor\",{\"0\":{\"2285\":1},\"1\":{\"2181\":1,\"3849\":1,\"4961\":1,\"4989\":1,\"4995\":1,\"5043\":1,\"6943\":1,\"7065\":1,\"7128\":4,\"7179\":4}}],[\"constructors\",{\"1\":{\"2175\":2,\"7128\":2}}],[\"constructor<person>\",{\"1\":{\"2291\":1,\"6960\":1,\"6962\":1}}],[\"constructor<t>\",{\"1\":{\"2181\":1,\"2287\":1}}],[\"constructor<\",{\"1\":{\"2175\":2,\"2178\":2}}],[\"consumer中的方法为\",{\"1\":{\"7465\":1}}],[\"consumer<\",{\"1\":{\"7756\":1}}],[\"consumer<string>\",{\"1\":{\"7377\":4,\"7382\":1,\"7386\":1,\"7462\":1,\"7468\":1}}],[\"consumer<t>\",{\"1\":{\"2633\":1,\"7430\":1}}],[\"consumer接口的accept方法\",{\"0\":{\"7376\":1}}],[\"consumer\",{\"0\":{\"2631\":1},\"1\":{\"7701\":1,\"7756\":1}}],[\"cons\",{\"1\":{\"2178\":2,\"2181\":2,\"2291\":3,\"6960\":2,\"6962\":3,\"7065\":2}}],[\"consoleappender\",{\"1\":{\"952\":1}}],[\"console\",{\"1\":{\"914\":1,\"923\":1,\"948\":1,\"952\":6}}],[\"content\",{\"1\":{\"10252\":1,\"10264\":2,\"10348\":1,\"10603\":1}}],[\"contextloaderlistener\",{\"1\":{\"9452\":2,\"9456\":1}}],[\"contextloads\",{\"1\":{\"656\":1,\"663\":1,\"991\":1,\"1016\":1}}],[\"contextdestroyed\",{\"1\":{\"9337\":1,\"9449\":1}}],[\"contextinitialized\",{\"1\":{\"9335\":1,\"9450\":1,\"9452\":2}}],[\"contextpath+\",{\"1\":{\"9174\":1}}],[\"contextpath\",{\"1\":{\"8944\":2,\"9174\":1}}],[\"context配置的\",{\"1\":{\"8934\":1}}],[\"context\",{\"0\":{\"8588\":1},\"1\":{\"6878\":1,\"6883\":1,\"9082\":1,\"9234\":2,\"9249\":3,\"9262\":4}}],[\"contextname>\",{\"1\":{\"952\":1}}],[\"control\",{\"1\":{\"6724\":1,\"8959\":1,\"10646\":1}}],[\"controller+view\",{\"1\":{\"9583\":1}}],[\"controller只需要响应json格式数据即可\",{\"1\":{\"1274\":1}}],[\"controller作为表现层\",{\"1\":{\"1272\":1}}],[\"controller修正功能\",{\"1\":{\"1196\":1}}],[\"controller开发\",{\"1\":{\"1191\":1,\"1192\":1}}],[\"controller\",{\"0\":{\"1271\":1,\"1275\":1,\"4600\":1},\"1\":{\"907\":2,\"1119\":1,\"1289\":1,\"4601\":1,\"4602\":1,\"4603\":1,\"4604\":1,\"4605\":1,\"9543\":1,\"9567\":1}}],[\"container\",{\"1\":{\"5569\":1}}],[\"containsvalue\",{\"0\":{\"2605\":1},\"1\":{\"2606\":3}}],[\"containskey\",{\"0\":{\"2602\":1},\"1\":{\"2604\":3}}],[\"containsall\",{\"0\":{\"2423\":1},\"1\":{\"2426\":2}}],[\"contains\",{\"0\":{\"1456\":1,\"2417\":1},\"1\":{\"1458\":2,\"2422\":4}}],[\"continue是终止\",{\"1\":{\"3442\":1}}],[\"continue默认跳过包裹此关键字最近的一层循环\",{\"1\":{\"3436\":1}}],[\"continue用于结束当次循环\",{\"1\":{\"3434\":1}}],[\"continue\",{\"0\":{\"3433\":1},\"1\":{\"3424\":1,\"3441\":1,\"3444\":2}}],[\"com中cookie可以共享\",{\"1\":{\"9732\":1}}],[\"com和news\",{\"1\":{\"9732\":1}}],[\"com<\",{\"1\":{\"9608\":1}}],[\"comfigurations\",{\"1\":{\"8576\":2}}],[\"com1\",{\"1\":{\"7390\":2,\"7480\":2,\"7487\":2}}],[\"com2\",{\"1\":{\"7345\":1,\"7390\":1,\"7483\":2,\"7490\":1}}],[\"compound\",{\"1\":{\"10368\":1}}],[\"component\",{\"1\":{\"519\":1,\"590\":1,\"621\":1,\"645\":1,\"647\":1}}],[\"compass可视化查看\",{\"0\":{\"10418\":1}}],[\"compass中查看\",{\"1\":{\"10395\":1,\"10400\":1}}],[\"compass是mongodb官方提供的可视化数据管理工具\",{\"1\":{\"10183\":1}}],[\"compass\",{\"0\":{\"10179\":1,\"10185\":1,\"10784\":1},\"1\":{\"10181\":1,\"10183\":1,\"10184\":1,\"10599\":1}}],[\"compatibility\",{\"1\":{\"9895\":2}}],[\"compare方法\",{\"0\":{\"7389\":1}}],[\"compareb\",{\"1\":{\"4534\":1}}],[\"comparea\",{\"1\":{\"4523\":4,\"4526\":1,\"4534\":1}}],[\"compare\",{\"0\":{\"1781\":1},\"1\":{\"1763\":2,\"1778\":1,\"1788\":1,\"1791\":1,\"2365\":1,\"2492\":1,\"5788\":1,\"5790\":4,\"5794\":2,\"5916\":2,\"7345\":1,\"7390\":3,\"7480\":2,\"7482\":2,\"7483\":2,\"7487\":1,\"7673\":1,\"7694\":1,\"7697\":1}}],[\"compareto的重写\",{\"1\":{\"5790\":1}}],[\"compareto\",{\"0\":{\"1443\":1,\"1749\":1,\"1851\":1,\"1932\":1},\"1\":{\"1449\":2,\"1743\":1,\"1750\":2,\"1763\":2,\"1769\":2,\"1771\":1,\"1788\":1,\"1853\":2,\"1937\":2,\"4332\":2,\"5718\":1,\"5787\":1,\"5790\":2,\"7117\":1,\"7390\":2,\"7487\":1,\"7490\":1}}],[\"comparator中的int\",{\"1\":{\"7482\":1}}],[\"comparator接口\",{\"0\":{\"7389\":1}}],[\"comparator接口的实例\",{\"1\":{\"5794\":1}}],[\"comparator接口是用来实现定制排序的\",{\"1\":{\"1777\":1}}],[\"comparator<string>\",{\"1\":{\"7487\":1,\"7490\":1}}],[\"comparator<integer>com2\",{\"1\":{\"7390\":1}}],[\"comparator<integer>\",{\"1\":{\"2365\":1,\"7345\":1,\"7390\":2,\"7480\":1,\"7483\":1}}],[\"comparator<\",{\"0\":{\"2363\":1},\"1\":{\"2365\":1,\"2492\":1,\"2500\":1,\"2505\":1}}],[\"comparator<person>\",{\"1\":{\"1791\":1}}],[\"comparator<t>\",{\"1\":{\"1778\":1}}],[\"comparator常作为collections\",{\"1\":{\"1780\":1}}],[\"comparator\",{\"0\":{\"1774\":1,\"7671\":1},\"1\":{\"1736\":1,\"1738\":1,\"1777\":1,\"1788\":1,\"2492\":1,\"5794\":2,\"5916\":1,\"7390\":1,\"7673\":1,\"7694\":1,\"7697\":1}}],[\"comparable排序示例\",{\"1\":{\"1790\":1}}],[\"comparable接口的排序规则不适合当前的操作\",{\"1\":{\"1777\":1}}],[\"comparable接口的方法\",{\"1\":{\"1738\":1}}],[\"comparable接口而又不方便修改代码\",{\"1\":{\"1777\":1}}],[\"comparable接口强行对实现它的每个类的对象进行整体排序\",{\"1\":{\"1742\":1}}],[\"comparable接口\",{\"1\":{\"1742\":1,\"5719\":1}}],[\"comparable与comparator的区别\",{\"0\":{\"1737\":1}}],[\"comparable\",{\"0\":{\"1739\":1},\"1\":{\"1735\":1,\"1738\":1,\"1750\":1,\"2162\":1,\"4332\":3}}],[\"comparable<\",{\"1\":{\"2492\":1,\"2500\":1,\"2505\":1}}],[\"comparable<file>\",{\"1\":{\"1943\":1}}],[\"comparable<bigdecimal>\",{\"1\":{\"1876\":1}}],[\"comparable<biginteger>\",{\"1\":{\"1868\":1}}],[\"comparable<person>\",{\"1\":{\"1769\":1}}],[\"comparable<t>\",{\"1\":{\"1743\":1}}],[\"comparable<instant>\",{\"1\":{\"1670\":1}}],[\"comparable<localtime>\",{\"1\":{\"1642\":1}}],[\"complextye\",{\"1\":{\"9642\":1}}],[\"complextype>\",{\"1\":{\"9642\":2}}],[\"complextype\",{\"1\":{\"9641\":1,\"9642\":2}}],[\"computer\",{\"1\":{\"4513\":3}}],[\"compile\",{\"0\":{\"2715\":1},\"1\":{\"2683\":1,\"2717\":3,\"2747\":1,\"2750\":1,\"2756\":1,\"2760\":1}}],[\"comp\",{\"1\":{\"2500\":1,\"2505\":1}}],[\"community\",{\"1\":{\"10128\":1}}],[\"commitandclosequietly\",{\"1\":{\"8343\":1}}],[\"commitandclose\",{\"1\":{\"8342\":1}}],[\"committed\",{\"1\":{\"8157\":1,\"8162\":1}}],[\"commit\",{\"0\":{\"8135\":1},\"1\":{\"8126\":1,\"8136\":1,\"8148\":1}}],[\"command\",{\"1\":{\"2831\":1,\"5502\":1,\"10585\":1,\"10744\":1}}],[\"comment集合如果不存在\",{\"1\":{\"10254\":1}}],[\"comments\",{\"1\":{\"2737\":1}}],[\"comment=\",{\"1\":{\"1334\":1,\"1336\":1,\"1338\":1,\"1340\":1,\"1342\":1,\"1344\":1,\"1346\":1,\"1348\":1,\"1350\":1,\"1352\":1,\"1354\":1}}],[\"comment\",{\"1\":{\"1334\":12,\"1336\":8,\"1338\":14,\"1340\":13,\"1342\":12,\"1344\":9,\"1346\":7,\"1348\":19,\"1350\":10,\"1352\":10,\"1354\":9,\"10252\":1,\"10264\":1,\"10269\":1,\"10290\":1,\"10293\":1,\"10296\":1,\"10300\":1,\"10302\":1,\"10311\":2,\"10314\":2,\"10317\":1,\"10326\":2,\"10333\":2,\"10339\":1,\"10348\":2,\"10351\":1,\"10354\":2,\"10357\":2,\"10379\":1,\"10394\":2,\"10399\":2,\"10411\":2,\"10422\":1,\"10432\":1,\"10603\":1,\"10798\":1,\"10806\":1,\"10815\":1}}],[\"commons\",{\"1\":{\"8331\":1,\"8335\":1,\"8336\":1,\"8337\":1,\"9098\":1}}],[\"common\",{\"1\":{\"1119\":1,\"6896\":1}}],[\"com\",{\"0\":{\"7671\":1},\"1\":{\"329\":1,\"434\":1,\"516\":1,\"600\":1,\"655\":1,\"721\":1,\"728\":1,\"734\":1,\"907\":2,\"952\":1,\"969\":1,\"981\":1,\"991\":1,\"1008\":1,\"1206\":1,\"1364\":1,\"4513\":5,\"5794\":2,\"6691\":1,\"6703\":2,\"6706\":1,\"6708\":2,\"6711\":1,\"6840\":1,\"6883\":3,\"6899\":1,\"6911\":1,\"6949\":1,\"7673\":1,\"7852\":1,\"7854\":1,\"7858\":1,\"7862\":1,\"7865\":1,\"7970\":1,\"8084\":1,\"8210\":2,\"8260\":1,\"8381\":1,\"9732\":1,\"10016\":1,\"10128\":1,\"10177\":1,\"10184\":1}}],[\"不认证通过compass直接登录\",{\"1\":{\"10743\":1}}],[\"不太安全\",{\"1\":{\"10638\":1}}],[\"不显示所有字段\",{\"1\":{\"10316\":1}}],[\"不得含有\",{\"1\":{\"10215\":1}}],[\"不适用常规搜索的场景\",{\"0\":{\"9855\":1}}],[\"不适用于属性\",{\"1\":{\"4133\":1}}],[\"不配置的话有缺省值\",{\"1\":{\"9289\":1}}],[\"不方便维护\",{\"1\":{\"9173\":1}}],[\"不写属性就相当于是value\",{\"1\":{\"8834\":1}}],[\"不勾选great\",{\"1\":{\"8560\":1}}],[\"不安全协议\",{\"1\":{\"8414\":1}}],[\"不影响性能\",{\"1\":{\"8308\":1}}],[\"不体现第三方api\",{\"0\":{\"7855\":1}}],[\"不按顺序\",{\"1\":{\"7571\":1}}],[\"不灵活\",{\"1\":{\"7209\":1}}],[\"不利于程序的扩展\",{\"1\":{\"7205\":1}}],[\"不够表示所有字符\",{\"1\":{\"6426\":1}}],[\"不但会关闭流\",{\"1\":{\"6320\":1}}],[\"不直接连接到数据源或目的地\",{\"1\":{\"6166\":1,\"6184\":1}}],[\"不直接连接文件\",{\"1\":{\"6166\":1}}],[\"不具有继承关系\",{\"1\":{\"6062\":1}}],[\"不具备父子关系\",{\"0\":{\"6052\":1}}],[\"不保留任何数据的副本\",{\"1\":{\"10457\":1}}],[\"不保留泛型\",{\"0\":{\"6017\":1,\"6020\":1}}],[\"不保证映射的顺序\",{\"1\":{\"5816\":1}}],[\"不等于随机性\",{\"1\":{\"5693\":1}}],[\"不推荐\",{\"0\":{\"5591\":1},\"1\":{\"6001\":1,\"8108\":1,\"8439\":1,\"10230\":1}}],[\"不推荐使用\",{\"1\":{\"3125\":1}}],[\"不涉及到持久化的存储\",{\"1\":{\"5522\":1}}],[\"不如怎么验证都是失败\",{\"1\":{\"10734\":1}}],[\"不如直接return\",{\"1\":{\"5352\":1}}],[\"不如无法删除成功\",{\"1\":{\"2428\":1}}],[\"不需要加\",{\"1\":{\"9170\":1}}],[\"不需要加虚拟目录\",{\"1\":{\"9169\":1}}],[\"不需要深入代码\",{\"1\":{\"7875\":1}}],[\"不需要建立连接\",{\"1\":{\"6738\":1}}],[\"不需要每次都创建\",{\"1\":{\"5494\":1}}],[\"不需要额外加static\",{\"1\":{\"5272\":1}}],[\"不需要重复new\",{\"1\":{\"5270\":1}}],[\"不需要再写sql\",{\"1\":{\"1227\":1}}],[\"不支持基于范围的查询\",{\"1\":{\"10373\":1}}],[\"不支持整数\",{\"1\":{\"10101\":1}}],[\"不支持重复注解\",{\"1\":{\"5013\":1}}],[\"不支持直接string类型转其他类型\",{\"1\":{\"3243\":1}}],[\"不常用\",{\"0\":{\"4999\":1,\"5003\":1},\"1\":{\"8954\":1,\"9633\":1}}],[\"不确定变量的类型时\",{\"1\":{\"6031\":1}}],[\"不确定\",{\"1\":{\"4469\":1}}],[\"不确定部分设计成抽象方法\",{\"1\":{\"4466\":1}}],[\"不确定的部分\",{\"1\":{\"4466\":1}}],[\"不确定的地方加\",{\"1\":{\"3328\":1}}],[\"不实例化子类\",{\"1\":{\"4459\":1}}],[\"不重名的情况下\",{\"1\":{\"4328\":1}}],[\"不比较数据类型\",{\"1\":{\"4227\":1}}],[\"不一定非得用个内循环打印char数组\",{\"1\":{\"6259\":1}}],[\"不一定类型要相同\",{\"1\":{\"4222\":1}}],[\"不一定是\",{\"1\":{\"2369\":1}}],[\"不进行访问检测\",{\"1\":{\"7188\":1}}],[\"不进行向下转型\",{\"1\":{\"4185\":1}}],[\"不进行舍入\",{\"1\":{\"1930\":1}}],[\"不报错\",{\"1\":{\"4056\":1}}],[\"不报错的情况\",{\"1\":{\"3171\":1}}],[\"不导入包直接用\",{\"0\":{\"3954\":1}}],[\"不对外暴露的私有的方法\",{\"1\":{\"3829\":1}}],[\"不允许重复\",{\"1\":{\"5800\":1}}],[\"不允许多重继承\",{\"1\":{\"4016\":1}}],[\"不允许外部干涉\",{\"1\":{\"3810\":1}}],[\"不允许使用tab键\",{\"1\":{\"482\":1}}],[\"不继续执行了\",{\"1\":{\"3724\":1}}],[\"不赋值\",{\"1\":{\"3664\":1}}],[\"不再使用\",{\"1\":{\"8312\":1}}],[\"不再建议使用警告\",{\"1\":{\"5047\":1}}],[\"不再被建议使用\",{\"1\":{\"5036\":1,\"5060\":1}}],[\"不再强制相等\",{\"1\":{\"3548\":1}}],[\"不再这里提及\",{\"1\":{\"6\":1}}],[\"不初始化\",{\"1\":{\"3547\":1}}],[\"不为数组内部的内层数组指定长度\",{\"1\":{\"3547\":1}}],[\"不管是web服务还是后台服务\",{\"1\":{\"9530\":1}}],[\"不管是get还是post请求\",{\"1\":{\"9033\":1}}],[\"不管是基本数据类型还是他们的包装类都无能为力\",{\"1\":{\"1866\":1}}],[\"不管你重复x\",{\"1\":{\"4239\":1}}],[\"不管这个return处于多少层循环之内\",{\"1\":{\"3439\":1}}],[\"不建议省略\",{\"1\":{\"3351\":1}}],[\"不属于基本数据类型\",{\"1\":{\"3203\":1}}],[\"不加l和f发生的自动类型转换\",{\"0\":{\"3168\":1}}],[\"不受具体操作系统的影响\",{\"1\":{\"3087\":1}}],[\"不受具体os的影响\",{\"1\":{\"3074\":1}}],[\"不可写操作\",{\"1\":{\"10456\":1}}],[\"不可重复性\",{\"1\":{\"5694\":1}}],[\"不可重复的\",{\"1\":{\"5817\":1,\"5821\":1,\"5846\":1,\"5851\":1}}],[\"不可重复的数据\",{\"1\":{\"5546\":1,\"5548\":1,\"5687\":1,\"5692\":1}}],[\"不可重复的需求\",{\"1\":{\"5531\":1}}],[\"不可以继承的观点是\",{\"1\":{\"4033\":1}}],[\"不可以在方法内部定义方法\",{\"1\":{\"3743\":1}}],[\"不可以使用权限修饰符\",{\"1\":{\"3692\":1}}],[\"不可以使用0或非\",{\"1\":{\"3144\":1}}],[\"不可以使用关键字和保留字\",{\"1\":{\"3062\":1}}],[\"不可变性\",{\"1\":{\"3215\":1}}],[\"不可变的字符序列\",{\"1\":{\"1550\":1}}],[\"不易static修饰\",{\"1\":{\"3040\":1}}],[\"不开多行模式的话整个字符串会被视作一行\",{\"1\":{\"2724\":1}}],[\"不提供参数\",{\"1\":{\"2635\":1,\"7431\":1}}],[\"不指定的话就会根据字段名自动生成一个\",{\"1\":{\"10392\":1}}],[\"不指定字符集\",{\"0\":{\"6383\":1,\"6401\":1}}],[\"不指定内层长度\",{\"1\":{\"3550\":1}}],[\"不指定就是排序整个数组\",{\"1\":{\"2361\":1}}],[\"不指定舍入策略\",{\"1\":{\"1907\":1}}],[\"不会显示只存在于内存中的数据库\",{\"1\":{\"10224\":1}}],[\"不会执行放行后的逻辑\",{\"1\":{\"9276\":1}}],[\"不会存在oracle下pscache占用内存过多的问题\",{\"1\":{\"8297\":1}}],[\"不会触发此类的初始化\",{\"1\":{\"7031\":1}}],[\"不会导致子类初始化\",{\"1\":{\"7030\":1}}],[\"不会导致其他对象中同样的属性值的修改\",{\"1\":{\"4380\":1}}],[\"不会发生类的初始化\",{\"1\":{\"7028\":1}}],[\"不会创建文件\",{\"1\":{\"6513\":1}}],[\"不会直接写到文件\",{\"1\":{\"6316\":1}}],[\"不会弄错\",{\"1\":{\"5952\":1}}],[\"不会释放锁\",{\"1\":{\"5461\":1}}],[\"不会释放锁的操作\",{\"0\":{\"5369\":1}}],[\"不会出现提示\",{\"1\":{\"5408\":1}}],[\"不会出现异常\",{\"1\":{\"5408\":1}}],[\"不会再执行其他catch了\",{\"1\":{\"4738\":1}}],[\"不会随着对象的不同而不同的\",{\"1\":{\"4406\":1}}],[\"不会报错\",{\"1\":{\"3273\":1,\"3990\":1,\"4799\":1}}],[\"不会改变源对象\",{\"1\":{\"7561\":1}}],[\"不会改变变量类型\",{\"1\":{\"3273\":1}}],[\"不会改变变量本身的数据类型\",{\"1\":{\"3272\":1}}],[\"不会改变值的大小\",{\"1\":{\"1904\":1}}],[\"不会自动重置\",{\"1\":{\"2464\":1,\"5584\":1}}],[\"不会进回收站\",{\"1\":{\"2021\":1}}],[\"不能以xml开头\",{\"1\":{\"9616\":1}}],[\"不能在多个资源使用request共享数据\",{\"1\":{\"9153\":1}}],[\"不能在main中直接调用\",{\"1\":{\"3737\":1}}],[\"不能从一个服务器通过转发访问另一台服务器\",{\"1\":{\"9127\":1}}],[\"不能打war包\",{\"1\":{\"8636\":1}}],[\"不能被浏览器直接访问的目录\",{\"1\":{\"8497\":1,\"8507\":1}}],[\"不能被static\",{\"1\":{\"3862\":1}}],[\"不能实例化\",{\"1\":{\"8178\":1}}],[\"不能实例化没用\",{\"1\":{\"4167\":1}}],[\"不能再次使用\",{\"1\":{\"7605\":1}}],[\"不能再抛了\",{\"1\":{\"4777\":1}}],[\"不能用这个方法来获取随机元素\",{\"1\":{\"7687\":1}}],[\"不能用在创建对象上\",{\"0\":{\"6101\":1},\"1\":{\"6102\":1}}],[\"不能用在泛型类的声明上\",{\"0\":{\"6099\":1},\"1\":{\"6100\":1}}],[\"不能用在泛型方法声明上\",{\"0\":{\"6097\":1},\"1\":{\"6098\":1}}],[\"不能用基本数据类型填充\",{\"1\":{\"5993\":1}}],[\"不能向其内部添加数据\",{\"1\":{\"6069\":1}}],[\"不能互相赋值\",{\"0\":{\"6052\":1}}],[\"不能直接demo\",{\"1\":{\"8834\":1}}],[\"不能直接\",{\"1\":{\"6012\":1}}],[\"不能是空字符串\",{\"1\":{\"10214\":1}}],[\"不能是基本数据类型\",{\"1\":{\"5980\":1}}],[\"不能是boolean\",{\"1\":{\"3368\":1}}],[\"不能存储null的key和value\",{\"1\":{\"5837\":1}}],[\"不能保证元素的排列顺序\",{\"1\":{\"5701\":1}}],[\"不能返回true\",{\"1\":{\"5694\":1}}],[\"不能满足\",{\"1\":{\"5531\":1}}],[\"不能包裹\",{\"1\":{\"5345\":1}}],[\"不能开启子线程\",{\"1\":{\"5196\":1}}],[\"不能通过调用run开始子线程\",{\"0\":{\"5195\":1}}],[\"不能通过new创建示例\",{\"1\":{\"2714\":1}}],[\"不能获取用户的年龄了\",{\"1\":{\"4586\":1}}],[\"不能获取目录\",{\"1\":{\"1961\":1}}],[\"不能定义一个usb父类让他们都去继承\",{\"1\":{\"4478\":1}}],[\"不能定义重名的变量\",{\"1\":{\"3017\":1}}],[\"不能把123ab或\",{\"1\":{\"4298\":1}}],[\"不能转\",{\"1\":{\"4192\":1}}],[\"不能强转\",{\"1\":{\"4184\":1,\"4294\":1}}],[\"不能同时出现\",{\"1\":{\"4099\":1}}],[\"不能继承\",{\"1\":{\"4032\":1}}],[\"不能多重继承\",{\"1\":{\"4017\":1}}],[\"不能重写\",{\"0\":{\"3977\":1}}],[\"不能有return语句返回值\",{\"1\":{\"3863\":1}}],[\"不能调用非静态的结构\",{\"1\":{\"4560\":1}}],[\"不能调用\",{\"1\":{\"3577\":1}}],[\"不能访问内层数据\",{\"1\":{\"3563\":1}}],[\"不能访问文件内容本身\",{\"1\":{\"1941\":1,\"6112\":1}}],[\"不能声明范围\",{\"1\":{\"3369\":1}}],[\"不能误写成\",{\"1\":{\"3279\":1}}],[\"不能随意创建\",{\"1\":{\"2744\":1,\"2767\":1}}],[\"不能递归删除\",{\"1\":{\"2021\":1,\"2022\":1}}],[\"不能使用request对象来共享数据\",{\"1\":{\"9158\":1}}],[\"不能使用this关键字\",{\"1\":{\"4402\":1}}],[\"不能使用public\",{\"1\":{\"4342\":1}}],[\"不能使用原有的value进行赋值\",{\"1\":{\"3223\":1,\"3224\":1,\"3225\":1}}],[\"不能使用单引号\",{\"1\":{\"3203\":1}}],[\"不能使用双引号\",{\"1\":{\"3116\":1,\"3136\":1}}],[\"不能使用\",{\"1\":{\"1730\":1}}],[\"不能处理闰秒等\",{\"1\":{\"1620\":1}}],[\"不能浪费了\",{\"1\":{\"885\":1}}],[\"不是严格要求的\",{\"1\":{\"10273\":1}}],[\"不是接口\",{\"1\":{\"8801\":1}}],[\"不是构造该类对象的构造器\",{\"1\":{\"7018\":1}}],[\"不是插入写\",{\"1\":{\"6521\":1}}],[\"不是追加写\",{\"1\":{\"6521\":1}}],[\"不是文件覆盖\",{\"1\":{\"6521\":1}}],[\"不是文本资源\",{\"1\":{\"6289\":1}}],[\"不是同一个\",{\"1\":{\"6054\":1}}],[\"不是也可以存储数据吗\",{\"1\":{\"5950\":1}}],[\"不是通过比较两个对象的equals和hashcode来判断是否相同的\",{\"1\":{\"5786\":1}}],[\"不是很常用\",{\"1\":{\"2058\":1}}],[\"不是线程安全的\",{\"1\":{\"5702\":1}}],[\"不是线程安全\",{\"1\":{\"1620\":1}}],[\"不是final\",{\"1\":{\"1558\":1}}],[\"不包括这个\",{\"1\":{\"4669\":1}}],[\"不包括私有属性\",{\"1\":{\"2190\":1}}],[\"不包括end\",{\"1\":{\"1593\":1}}],[\"不包含使用$nin操作符\",{\"1\":{\"10353\":1}}],[\"不包含\",{\"1\":{\"6602\":1}}],[\"不包含static和transient修饰的成员变量\",{\"1\":{\"6566\":1}}],[\"不包含toindex\",{\"1\":{\"2368\":1}}],[\"不包含父类中声明的方法\",{\"1\":{\"2199\":1,\"7103\":1}}],[\"不包含父类中声明的属性\",{\"1\":{\"2187\":1,\"7077\":1}}],[\"不包含private构造器\",{\"1\":{\"2174\":1}}],[\"不包含路径\",{\"1\":{\"1969\":1}}],[\"不包含1\",{\"1\":{\"1802\":1}}],[\"不包含end\",{\"1\":{\"1588\":1}}],[\"不区分大小写\",{\"1\":{\"1485\":1}}],[\"不只是显示sql\",{\"1\":{\"1228\":1}}],[\"不考虑前端服务器\",{\"1\":{\"1197\":1}}],[\"不用管\",{\"1\":{\"10379\":1}}],[\"不用再进行判断\",{\"1\":{\"9007\":1}}],[\"不用写测设类\",{\"1\":{\"8696\":1}}],[\"不用修改这个配置文件\",{\"1\":{\"8616\":1}}],[\"不用安装\",{\"1\":{\"8428\":1}}],[\"不用进行强转了\",{\"1\":{\"5967\":1}}],[\"不用进行强转\",{\"1\":{\"5967\":1}}],[\"不用点\",{\"1\":{\"5399\":1}}],[\"不用try\",{\"1\":{\"4763\":1}}],[\"不用关注\",{\"1\":{\"4636\":1,\"9270\":2}}],[\"不用实现接口也能调用这些方法\",{\"1\":{\"4538\":1}}],[\"不用实现类也可以\",{\"1\":{\"4537\":1}}],[\"不用记\",{\"1\":{\"3328\":1}}],[\"不用更改\",{\"1\":{\"1122\":1}}],[\"不用指定版本\",{\"1\":{\"386\":1}}],[\"不采用idea内置的maven\",{\"1\":{\"1065\":1}}],[\"不含\",{\"1\":{\"994\":1}}],[\"不容易维护\",{\"1\":{\"832\":1}}],[\"不同tomcat服务器间cookie的共享\",{\"0\":{\"9731\":1}}],[\"不同页面无法共享域中的数据\",{\"1\":{\"9183\":1}}],[\"不同数据库不一样\",{\"1\":{\"8272\":1}}],[\"不同数据类型的数组\",{\"1\":{\"7577\":1}}],[\"不同数据的hash值是不同的\",{\"1\":{\"5727\":1}}],[\"不同泛型的父子类\",{\"1\":{\"6062\":1}}],[\"不同泛型的类\",{\"0\":{\"6052\":1}}],[\"不同就添加成功\",{\"1\":{\"5729\":1}}],[\"不同于子集和集合的关系\",{\"1\":{\"4007\":1}}],[\"不同包下的同名类\",{\"0\":{\"3958\":1}}],[\"不同\",{\"1\":{\"3760\":1,\"5761\":1}}],[\"不同点\",{\"0\":{\"3685\":1},\"1\":{\"5458\":1}}],[\"不同类型之间的运算\",{\"0\":{\"3147\":1}}],[\"不同字符集编码的字符进行传输时\",{\"1\":{\"3132\":1}}],[\"不同的会话\",{\"0\":{\"9657\":1}}],[\"不同的框架对应不同的层\",{\"1\":{\"9571\":1}}],[\"不同的访问条件\",{\"1\":{\"8675\":1}}],[\"不同的tomcat模板可以起不同的名字\",{\"1\":{\"8611\":1}}],[\"不同的实现的集合\",{\"1\":{\"7810\":1}}],[\"不同的数据库厂商\",{\"1\":{\"7810\":1}}],[\"不同的函数\",{\"1\":{\"7400\":1}}],[\"不同的进程有不同的端口号\",{\"1\":{\"6680\":1}}],[\"不同的哈希算法\",{\"1\":{\"5764\":1}}],[\"不同的类对hashcode的重写方式\",{\"1\":{\"5761\":1}}],[\"不同的线程分别占用对方需要的同步资源不放弃\",{\"1\":{\"5407\":1}}],[\"不同的子类对顺序要求不同\",{\"1\":{\"2439\":1}}],[\"不同的collection子类都重写了equal方法\",{\"1\":{\"2439\":1}}],[\"不同的位置优先级不同\",{\"1\":{\"788\":1}}],[\"不同配置相互叠加\",{\"1\":{\"801\":1}}],[\"不携带args参数\",{\"1\":{\"781\":1}}],[\"不带spring\",{\"0\":{\"727\":1}}],[\"不使用骨架创建web项目\",{\"0\":{\"8556\":1}}],[\"不使用反射\",{\"0\":{\"6957\":1}}],[\"不使用通配符泛型\",{\"0\":{\"6076\":1}}],[\"不使用泛型的缺点\",{\"0\":{\"5962\":1}}],[\"不使用\",{\"0\":{\"5589\":1}}],[\"不使用iterator遍历\",{\"1\":{\"5574\":1}}],[\"不使用javabean就只能隐藏age属性\",{\"1\":{\"4587\":1}}],[\"不使用javabean\",{\"1\":{\"4585\":1}}],[\"不使用final\",{\"1\":{\"4318\":1}}],[\"不使用spring\",{\"1\":{\"707\":1}}],[\"不使用内嵌服务器\",{\"0\":{\"444\":1}}],[\"不过使用db命令可以看到当前使用的仅存在于内存中的数据库\",{\"1\":{\"10224\":1}}],[\"不过mongodb\",{\"1\":{\"10173\":1}}],[\"不过tomcat服务器或自动对session对象进行钝化和活化\",{\"1\":{\"9776\":1}}],[\"不过压缩时zip文件头里的条目顺序很重要\",{\"1\":{\"9469\":1}}],[\"不过内容不多\",{\"1\":{\"9265\":1,\"9314\":1}}],[\"不过get请求的乱码tomcat已解决了\",{\"1\":{\"9051\":1}}],[\"不过一般不这么用\",{\"1\":{\"8828\":1}}],[\"不过实际开发中\",{\"1\":{\"8150\":1}}],[\"不过jvm垃圾回收机制可以回收这些class对象\",{\"1\":{\"7035\":1}}],[\"不过这个继承来的private成员\",{\"1\":{\"4036\":1}}],[\"不过这样日志那边会出现很多其他消息\",{\"1\":{\"952\":1}}],[\"不过尽量别超过3层\",{\"1\":{\"3350\":1}}],[\"不过返回值类型是double类型的\",{\"1\":{\"1819\":1}}],[\"不过\",{\"1\":{\"593\":1,\"2685\":1,\"6059\":1}}],[\"不过后续使用时会采用yaml格式的配置文件\",{\"1\":{\"337\":1}}],[\"不然创建的用户毫无意义\",{\"1\":{\"10737\":1}}],[\"不然命令窗口会一闪而过\",{\"1\":{\"8433\":1}}],[\"不然还有可能会出问题\",{\"1\":{\"3960\":1}}],[\"不然就报错\",{\"1\":{\"7648\":1}}],[\"不然就报异常\",{\"1\":{\"5783\":1}}],[\"不然就无法编译\",{\"1\":{\"3155\":1}}],[\"不然就是采用内置父工程的版本\",{\"1\":{\"401\":1}}],[\"不然无法转\",{\"1\":{\"4180\":1}}],[\"不然无法执行\",{\"1\":{\"2923\":1}}],[\"不然无法自动加载\",{\"1\":{\"459\":1}}],[\"不然只能编译不能执行\",{\"1\":{\"2906\":1}}],[\"不然会干扰测试结果\",{\"1\":{\"9037\":1}}],[\"不然会报端口占用的错误\",{\"1\":{\"8624\":1}}],[\"不然会报错\",{\"1\":{\"1905\":1,\"1906\":1,\"3559\":1,\"3984\":1,\"4783\":1}}],[\"不然会多算一个1\",{\"1\":{\"7708\":1}}],[\"不然会抛出异常\",{\"1\":{\"5782\":1,\"7743\":1}}],[\"不然会编译失败\",{\"1\":{\"2909\":1}}],[\"不然会乱码\",{\"1\":{\"1499\":1}}],[\"不要将这个类中的方法都放到basedao中\",{\"1\":{\"8195\":1}}],[\"不要关闭数据库连接\",{\"1\":{\"8146\":1}}],[\"不要跟类的泛型标识一样\",{\"1\":{\"6039\":1}}],[\"不要跟collection搞混了\",{\"1\":{\"2473\":1,\"5930\":1}}],[\"不要用this\",{\"1\":{\"5331\":1}}],[\"不要手动调用\",{\"1\":{\"4211\":1}}],[\"不要仅为了获取其他类中某个功能而去继承\",{\"1\":{\"4012\":1}}],[\"不要给数组长度\",{\"1\":{\"3498\":1}}],[\"不要加文件后缀\",{\"1\":{\"2896\":1}}],[\"不要漏掉了异常的信息\",{\"1\":{\"1295\":1}}],[\"不要覆盖掉原始操作\",{\"1\":{\"1268\":1}}],[\"不要再引入mybatis了\",{\"1\":{\"1150\":1}}],[\"不要带扩展名\",{\"1\":{\"808\":1}}],[\"不要修改这个名字\",{\"1\":{\"459\":1}}],[\"不要放入组件包\",{\"1\":{\"435\":1}}],[\"不要隐藏\",{\"1\":{\"357\":1}}],[\"核心api\",{\"0\":{\"6590\":1}}],[\"核心原理\",{\"0\":{\"5726\":1}}],[\"核心池的大小\",{\"1\":{\"5496\":1}}],[\"核心functional\",{\"0\":{\"2629\":1}}],[\"核心版本\",{\"1\":{\"1121\":1}}],[\"核心思想\",{\"1\":{\"533\":1}}],[\"核心\",{\"1\":{\"365\":1,\"5724\":1,\"5941\":1}}],[\"核心文件\",{\"1\":{\"338\":1}}],[\"核心配置文件\",{\"1\":{\"336\":1}}],[\"核心类\",{\"1\":{\"335\":1}}],[\"核心概念\",{\"1\":{\"229\":1}}],[\"目标文件\",{\"1\":{\"8468\":1}}],[\"目标类\",{\"0\":{\"6568\":1}}],[\"目标字符串赋于变量text\",{\"1\":{\"2768\":1}}],[\"目前广泛使用\",{\"1\":{\"9846\":1}}],[\"目前\",{\"1\":{\"7817\":1,\"9527\":1}}],[\"目前有两种说法\",{\"1\":{\"4028\":1}}],[\"目前常用的jave8\",{\"1\":{\"2827\":1}}],[\"目前能找到的中文资料版本都在4\",{\"1\":{\"260\":1,\"269\":1}}],[\"目录设计\",{\"0\":{\"10482\":1}}],[\"目录下面的elasticsearch\",{\"1\":{\"9901\":1}}],[\"目录下创建\",{\"1\":{\"8623\":1}}],[\"目录拦截\",{\"1\":{\"9283\":1}}],[\"目录匹配>\",{\"1\":{\"8864\":1}}],[\"目录匹配\",{\"0\":{\"8844\":1}}],[\"目录结构如下\",{\"1\":{\"9877\":1}}],[\"目录结构\",{\"0\":{\"8430\":1}}],[\"目录如果存在\",{\"1\":{\"6620\":1}}],[\"目录本质也是文件\",{\"1\":{\"6106\":1}}],[\"目录本身也是文件\",{\"1\":{\"1968\":1,\"1999\":1,\"6144\":1}}],[\"目录的层级\",{\"1\":{\"3931\":1}}],[\"目录创建失败\",{\"1\":{\"2006\":1,\"2009\":1}}],[\"目录创建成功\",{\"1\":{\"2006\":1,\"2009\":1}}],[\"目录已存在\",{\"1\":{\"2006\":1,\"2009\":1}}],[\"目录\",{\"1\":{\"1984\":1,\"6110\":1,\"6619\":1,\"8839\":1,\"10154\":1}}],[\"目录优化\",{\"1\":{\"1201\":1}}],[\"目录规范\",{\"0\":{\"1117\":1}}],[\"目录解读\",{\"1\":{\"334\":1}}],[\"目的封装成数据包\",{\"1\":{\"6738\":1}}],[\"目的是为了提高代码的复用和解耦\",{\"1\":{\"4582\":1}}],[\"目的是为了集中管理\",{\"1\":{\"814\":1}}],[\"目的是当子类继承父类后\",{\"1\":{\"4091\":1}}],[\"目的\",{\"1\":{\"419\":1,\"421\":1}}],[\"4cc1\",{\"1\":{\"10726\":1}}],[\"485z\",{\"1\":{\"10264\":1,\"10290\":1}}],[\"48424\",{\"1\":{\"7716\":1}}],[\"4kb\",{\"1\":{\"9736\":1}}],[\"4dc041da\",{\"1\":{\"8617\":1}}],[\"42s\",{\"1\":{\"8111\":1}}],[\"4g\",{\"1\":{\"8072\":1}}],[\"4set\",{\"0\":{\"7156\":1}}],[\"4个0\",{\"1\":{\"6666\":1}}],[\"4个字节组成\",{\"1\":{\"6666\":1}}],[\"4个字节来表示一个字符\",{\"1\":{\"6422\":1}}],[\"4版本开始引入的一套新的io\",{\"1\":{\"6581\":1}}],[\"4版开始使用group属性替代include属性\",{\"1\":{\"857\":1}}],[\"4的转换\",{\"1\":{\"3201\":1}}],[\"4种\",{\"0\":{\"3072\":1}}],[\"4舍\",{\"1\":{\"1928\":1}}],[\"438z\",{\"1\":{\"10554\":1}}],[\"4383685877147921099l\",{\"1\":{\"1542\":1}}],[\"43534646435l\",{\"1\":{\"8210\":1}}],[\"43\",{\"1\":{\"3245\":1,\"7670\":2}}],[\"43中函数式接口都是这四种接口的变形\",{\"1\":{\"2630\":1}}],[\"4320\",{\"1\":{\"1892\":1}}],[\"4506\",{\"1\":{\"10726\":1}}],[\"453465656l\",{\"1\":{\"8210\":1}}],[\"4534534534543l\",{\"1\":{\"4256\":1}}],[\"456\",{\"1\":{\"5779\":2}}],[\"4554617c\",{\"1\":{\"2449\":1}}],[\"45\",{\"1\":{\"1886\":1,\"1889\":1,\"1892\":1}}],[\"465794806718\",{\"1\":{\"1832\":1}}],[\"475463534532l\",{\"1\":{\"6569\":1,\"6577\":1}}],[\"47\",{\"1\":{\"1719\":1}}],[\"4142135623730951\",{\"1\":{\"1832\":1}}],[\"41\",{\"1\":{\"1654\":1,\"10554\":4}}],[\"49152~65535\",{\"1\":{\"6685\":1}}],[\"4999\",{\"1\":{\"1814\":1}}],[\"49\",{\"1\":{\"1502\":1}}],[\"4已完成\",{\"1\":{\"1352\":1}}],[\"40fdw\",{\"1\":{\"10816\":1,\"10846\":1}}],[\"4032\",{\"1\":{\"10726\":1}}],[\"4000\",{\"1\":{\"7471\":1}}],[\"400\",{\"1\":{\"1338\":1,\"10770\":1}}],[\"40c\",{\"1\":{\"923\":1}}],[\"40\",{\"1\":{\"923\":1,\"5970\":1}}],[\"4级\",{\"1\":{\"789\":1,\"796\":1}}],[\"4\",{\"0\":{\"331\":1,\"379\":1,\"398\":1,\"436\":1,\"451\":1,\"466\":1,\"467\":1,\"470\":1,\"490\":1,\"556\":1,\"558\":1,\"561\":1,\"564\":1,\"603\":1,\"612\":1,\"664\":1,\"704\":1,\"706\":1,\"710\":1,\"735\":1,\"757\":1,\"778\":1,\"870\":1,\"886\":1,\"904\":1,\"924\":1,\"953\":1,\"959\":1,\"970\":1,\"992\":1,\"993\":1,\"997\":1,\"1017\":1,\"1022\":1,\"1036\":1,\"1078\":1,\"1093\":1,\"1136\":1,\"1149\":1,\"1168\":1,\"1181\":1,\"1230\":1,\"1232\":1,\"1235\":1,\"1240\":1,\"1253\":1,\"1269\":1,\"1297\":1,\"1339\":1,\"1362\":1,\"1453\":1,\"1473\":1,\"1497\":1,\"1519\":1,\"1549\":1,\"1590\":1,\"1624\":1,\"1652\":1,\"1680\":1,\"1708\":1,\"1728\":1,\"1764\":1,\"1809\":1,\"1857\":1,\"1893\":1,\"1957\":1,\"1986\":1,\"2060\":1,\"2107\":1,\"2142\":1,\"2151\":1,\"2192\":1,\"2232\":1,\"2267\":1,\"2311\":1,\"2371\":1,\"2411\":1,\"2493\":1,\"2519\":1,\"2550\":1,\"2596\":1,\"2640\":1,\"2701\":1,\"2748\":1,\"2817\":1,\"2818\":1,\"2824\":1,\"2862\":1,\"2865\":1,\"2867\":1,\"2910\":1,\"2935\":1,\"2979\":1,\"2995\":1,\"3012\":1,\"3081\":1,\"3097\":1,\"3126\":1,\"3168\":1,\"3193\":1,\"3220\":1,\"3222\":1,\"3226\":1,\"3274\":1,\"3375\":1,\"3410\":1,\"3440\":1,\"3472\":1,\"3507\":1,\"3564\":1,\"3612\":1,\"3628\":1,\"3735\":1,\"3736\":1,\"3739\":1,\"3789\":1,\"3791\":1,\"3801\":1,\"3804\":1,\"3831\":1,\"3844\":1,\"3848\":1,\"3867\":1,\"3906\":1,\"3929\":1,\"3954\":1,\"3981\":1,\"3983\":1,\"3986\":1,\"3988\":1,\"4013\":1,\"4055\":1,\"4066\":1,\"4101\":1,\"4105\":1,\"4137\":1,\"4151\":1,\"4186\":1,\"4242\":1,\"4249\":1,\"4251\":1,\"4254\":1,\"4257\":1,\"4260\":2,\"4271\":1,\"4275\":1,\"4311\":1,\"4312\":1,\"4316\":1,\"4320\":1,\"4325\":2,\"4327\":1,\"4369\":1,\"4386\":1,\"4398\":1,\"4426\":1,\"4456\":1,\"4492\":1,\"4535\":1,\"4536\":1,\"4540\":1,\"4568\":1,\"4583\":1,\"4618\":1,\"4646\":1,\"4675\":1,\"4692\":1,\"4717\":1,\"4735\":1,\"4765\":1,\"4778\":1,\"4801\":1,\"4816\":1,\"4831\":1,\"4861\":1,\"4875\":1,\"4929\":1,\"4934\":1,\"4999\":1,\"5082\":1,\"5122\":1,\"5127\":1,\"5174\":1,\"5194\":1,\"5195\":1,\"5198\":1,\"5248\":1,\"5295\":1,\"5307\":1,\"5354\":1,\"5357\":1,\"5360\":1,\"5364\":1,\"5369\":2,\"5395\":1,\"5417\":1,\"5418\":1,\"5420\":1,\"5423\":1,\"5452\":1,\"5485\":1,\"5505\":1,\"5532\":1,\"5578\":1,\"5580\":1,\"5582\":1,\"5585\":1,\"5615\":1,\"5617\":1,\"5619\":1,\"5621\":1,\"5654\":1,\"5707\":1,\"5743\":1,\"5835\":1,\"5842\":1,\"5867\":1,\"5884\":1,\"5956\":1,\"5958\":1,\"5960\":1,\"6014\":1,\"6017\":1,\"6020\":1,\"6023\":1,\"6026\":2,\"6040\":1,\"6085\":1,\"6087\":1,\"6090\":1,\"6093\":1,\"6118\":1,\"6120\":1,\"6123\":1,\"6167\":1,\"6207\":1,\"6221\":1,\"6252\":1,\"6255\":1,\"6258\":1,\"6261\":1,\"6286\":1,\"6332\":1,\"6351\":1,\"6375\":1,\"6397\":1,\"6410\":1,\"6425\":1,\"6480\":1,\"6515\":1,\"6550\":1,\"6553\":1,\"6554\":1,\"6556\":1,\"6597\":1,\"6656\":1,\"6675\":1,\"6707\":1,\"6736\":1,\"6755\":1,\"6773\":1,\"6804\":1,\"6841\":1,\"6885\":1,\"6939\":1,\"6961\":1,\"6973\":1,\"7001\":1,\"7047\":1,\"7050\":1,\"7138\":1,\"7182\":1,\"7217\":1,\"7224\":1,\"7226\":1,\"7228\":1,\"7230\":2,\"7269\":1,\"7275\":1,\"7276\":1,\"7278\":1,\"7280\":1,\"7285\":2,\"7321\":1,\"7344\":1,\"7349\":1,\"7353\":1,\"7383\":1,\"7419\":1,\"7439\":1,\"7454\":1,\"7484\":1,\"7486\":1,\"7488\":1,\"7513\":1,\"7516\":1,\"7518\":1,\"7554\":1,\"7584\":1,\"7587\":1,\"7591\":1,\"7607\":1,\"7624\":1,\"7663\":1,\"7683\":1,\"7778\":1,\"7807\":1,\"7826\":1,\"7863\":1,\"7894\":1,\"7944\":1,\"7981\":1,\"7983\":1,\"7985\":1,\"7988\":1,\"7990\":2,\"8017\":1,\"8063\":1,\"8080\":1,\"8110\":1,\"8161\":1,\"8200\":1,\"8236\":1,\"8264\":1,\"8338\":1,\"8386\":1,\"8409\":1,\"8432\":1,\"8484\":1,\"8556\":1,\"8558\":1,\"8563\":1,\"8565\":1,\"8603\":1,\"8630\":1,\"8681\":1,\"8708\":1,\"8760\":1,\"8778\":1,\"8798\":1,\"8825\":1,\"8855\":1,\"8991\":1,\"9028\":1,\"9049\":1,\"9083\":1,\"9120\":1,\"9150\":1,\"9193\":1,\"9225\":1,\"9226\":1,\"9230\":1,\"9233\":1,\"9235\":2,\"9263\":1,\"9299\":1,\"9312\":1,\"9324\":1,\"9358\":1,\"9457\":1,\"9474\":1,\"9528\":1,\"9570\":1,\"9607\":1,\"9636\":1,\"9638\":1,\"9643\":1,\"9646\":1,\"9666\":1,\"9688\":1,\"9696\":1,\"9698\":1,\"9702\":1,\"9706\":1,\"9751\":1,\"9752\":1,\"9754\":1,\"9756\":1,\"9758\":2,\"9822\":1,\"9839\":1,\"9863\":1,\"9890\":1,\"9926\":1,\"9976\":1,\"10025\":1,\"10045\":1,\"10084\":1,\"10163\":1,\"10200\":1,\"10220\":1,\"10270\":1,\"10294\":1,\"10315\":1,\"10355\":1,\"10402\":1,\"10415\":1,\"10418\":1,\"10420\":1,\"10423\":1,\"10447\":1,\"10488\":1,\"10509\":1,\"10525\":1,\"10631\":1,\"10655\":1,\"10656\":1,\"10659\":1,\"10662\":1,\"10727\":1,\"10775\":1,\"10781\":1,\"10784\":1,\"10824\":1,\"10831\":1,\"10853\":2,\"10856\":1,\"10878\":1,\"10883\":1,\"10889\":1,\"10895\":1},\"1\":{\"333\":1,\"400\":2,\"475\":1,\"734\":1,\"911\":1,\"994\":1,\"1032\":1,\"1077\":1,\"1122\":1,\"1348\":1,\"1361\":1,\"1435\":1,\"1769\":1,\"1773\":1,\"1912\":1,\"1921\":1,\"1922\":1,\"2105\":1,\"2410\":1,\"2461\":1,\"2465\":1,\"2469\":2,\"2492\":4,\"2495\":3,\"2500\":1,\"2505\":1,\"2683\":1,\"2747\":1,\"2750\":2,\"2756\":1,\"2993\":1,\"3176\":1,\"3253\":2,\"3304\":1,\"3374\":1,\"3444\":2,\"3512\":1,\"3579\":1,\"3588\":1,\"3591\":1,\"4292\":2,\"4422\":1,\"4425\":1,\"4775\":1,\"4843\":1,\"4946\":1,\"5185\":1,\"5263\":1,\"5305\":1,\"5350\":1,\"5356\":1,\"5426\":1,\"5517\":1,\"5614\":1,\"5927\":1,\"5970\":1,\"6094\":2,\"6182\":1,\"6251\":1,\"6285\":1,\"6287\":1,\"6306\":1,\"6353\":1,\"6432\":1,\"6706\":1,\"6819\":1,\"7043\":1,\"7106\":1,\"7575\":1,\"7708\":1,\"7712\":1,\"7727\":1,\"7812\":1,\"7833\":1,\"7852\":1,\"7862\":1,\"7865\":1,\"7873\":1,\"7970\":1,\"7980\":1,\"7989\":1,\"8032\":1,\"8037\":4,\"8045\":6,\"8054\":2,\"8084\":2,\"8089\":2,\"8146\":1,\"8148\":1,\"8159\":1,\"8162\":1,\"8201\":2,\"8205\":1,\"8207\":1,\"8210\":1,\"8540\":1,\"8742\":1,\"8842\":1,\"8845\":1,\"8851\":1,\"8856\":1,\"9015\":1,\"9301\":1,\"9325\":1,\"9578\":1,\"9642\":1,\"9659\":1,\"9695\":1,\"10177\":1,\"10429\":1,\"10583\":1,\"10795\":1,\"10800\":1,\"10809\":1}}],[\"或在指定启动\",{\"1\":{\"10642\":1}}],[\"或在上一次调用\",{\"1\":{\"2468\":1,\"5603\":1}}],[\"或移除所有索引\",{\"1\":{\"10408\":1}}],[\"或不写该字段\",{\"1\":{\"10258\":1}}],[\"或stringbuffer类型\",{\"1\":{\"8930\":1}}],[\"或配置修改\",{\"1\":{\"8448\":1}}],[\"或对象\",{\"1\":{\"7446\":1}}],[\"或tcp\",{\"1\":{\"6655\":1}}],[\"或this自己\",{\"1\":{\"3903\":1}}],[\"或通过网络将这种二进制流传输到另一个网络节点\",{\"1\":{\"6538\":1}}],[\"或a类的父类==>\",{\"1\":{\"6092\":1}}],[\"或a类的子类\",{\"1\":{\"6089\":1}}],[\"或arrays\",{\"1\":{\"1780\":1}}],[\"或notifyall\",{\"1\":{\"5439\":1,\"5444\":1}}],[\"或是正在运行的一个程序\",{\"1\":{\"5069\":1}}],[\"或是bootstrap\",{\"1\":{\"471\":1}}],[\"或枚举声明\",{\"1\":{\"4961\":1}}],[\"或称之为\",{\"1\":{\"4927\":1}}],[\"或前端调用\",{\"1\":{\"4794\":1}}],[\"或非静态的属性\",{\"1\":{\"4567\":1}}],[\"或实现类\",{\"1\":{\"4531\":1}}],[\"或要实现的接口\",{\"1\":{\"4349\":1}}],[\"或子类的对象赋给父类的引用\",{\"1\":{\"4117\":1}}],[\"或多个形参\",{\"1\":{\"3726\":1}}],[\"或索引\",{\"1\":{\"3470\":1}}],[\"或没有交集的关系\",{\"1\":{\"3354\":1}}],[\"或能自动转换类型\",{\"1\":{\"3530\":1}}],[\"或能自动转换\",{\"1\":{\"3318\":1}}],[\"或修改tomcat的端口\",{\"1\":{\"8451\":1}}],[\"或修改\",{\"1\":{\"2587\":1}}],[\"或字节\",{\"1\":{\"2057\":1}}],[\"或一个字符\",{\"1\":{\"2038\":1}}],[\"或\",{\"1\":{\"1730\":2,\"3060\":2,\"3080\":1,\"3098\":1,\"3672\":1,\"3697\":1,\"3709\":1,\"3887\":1,\"3894\":1,\"3897\":1,\"4076\":1,\"4096\":1,\"4099\":1,\"4157\":1,\"4158\":1,\"4322\":1,\"4649\":1,\"7963\":1,\"8005\":1,\"8146\":1,\"10228\":1,\"10245\":1}}],[\"或者两都都存在的权限\",{\"1\":{\"10649\":1}}],[\"或者点赞数小于1000的文档记录\",{\"1\":{\"10357\":1}}],[\"或者servlet所依赖的其他类\",{\"1\":{\"9524\":1}}],[\"或者包含有这两种文件的目录\",{\"1\":{\"9523\":1}}],[\"或者插件程序的部署单位\",{\"1\":{\"9483\":1}}],[\"或者第一次getconnection时\",{\"1\":{\"8281\":1}}],[\"或者仅仅保存null\",{\"1\":{\"7732\":1}}],[\"或者把自己的数据传送到网络上去\",{\"1\":{\"6919\":1}}],[\"或者标准输入流\",{\"1\":{\"6346\":1}}],[\"或者\",{\"1\":{\"6228\":1,\"6445\":1,\"8576\":1,\"9567\":1,\"9569\":1}}],[\"或者说它的\",{\"1\":{\"5764\":1}}],[\"或者以链表形式存在多个元素\",{\"1\":{\"5735\":1}}],[\"或者使用\",{\"1\":{\"5331\":1}}],[\"或者使用国内镜像\",{\"1\":{\"327\":1}}],[\"或者是在运行时可以通过反射访问\",{\"1\":{\"4907\":1,\"4977\":1}}],[\"或者是相等\",{\"1\":{\"3321\":1}}],[\"或者用所有异常的父类exception类作为参数\",{\"1\":{\"4731\":1}}],[\"或者可以理解为一种特殊的类\",{\"1\":{\"4472\":1}}],[\"或者不存在\",{\"1\":{\"3590\":1}}],[\"或者与数据类型不符都会报错\",{\"1\":{\"2342\":1,\"2799\":1}}],[\"或者结束符时\",{\"1\":{\"2118\":1,\"6344\":1}}],[\"或者实现了java\",{\"1\":{\"1777\":1}}],[\"或者直接手动导入\",{\"1\":{\"1003\":1}}],[\"或者直接输入\",{\"1\":{\"360\":1}}],[\"或者手动引入坐标\",{\"1\":{\"976\":1}}],[\"或者修改端口号\",{\"1\":{\"744\":1}}],[\"或者在pom\",{\"1\":{\"445\":1}}],[\"或者遇到了特殊的版本bug\",{\"1\":{\"406\":1}}],[\"或模块\",{\"1\":{\"317\":1}}],[\"默认采用的就direct连接方式\",{\"1\":{\"10797\":1}}],[\"默认采用自然排序\",{\"1\":{\"2498\":1,\"2503\":1}}],[\"默认在所有的数据库上都有效\",{\"1\":{\"10703\":1}}],[\"默认在servlet被第一次访问时调用\",{\"1\":{\"8766\":1}}],[\"默认心跳信息为10秒\",{\"1\":{\"10614\":1}}],[\"默认名字为\",{\"1\":{\"10381\":1}}],[\"默认会返回所有符合条件的数据\",{\"1\":{\"10313\":1}}],[\"默认只会更新第一条\",{\"1\":{\"10292\":1}}],[\"默认关掉浏览器会话就会失效\",{\"1\":{\"9710\":1}}],[\"默认前缀是空\",{\"1\":{\"9645\":1}}],[\"默认返回的还是第一个\",{\"1\":{\"7688\":1}}],[\"默认从控制台输出\",{\"1\":{\"6436\":1}}],[\"默认从键盘输入\",{\"1\":{\"6435\":1}}],[\"默认编码是utf\",{\"1\":{\"6384\":1}}],[\"默认内部缓冲区数组大小\",{\"1\":{\"6328\":1}}],[\"默认泛型\",{\"1\":{\"5982\":1}}],[\"默认情况\",{\"1\":{\"5718\":1,\"10635\":1}}],[\"默认情况下是double类型\",{\"1\":{\"10255\":1}}],[\"默认情况下\",{\"1\":{\"1561\":1,\"5000\":1,\"5652\":1,\"6564\":1,\"8747\":1,\"9716\":1,\"9730\":1,\"10622\":1,\"10636\":1}}],[\"默认扩容为原来的数组长度的2倍\",{\"1\":{\"5678\":1}}],[\"默认游标都在集合的第一个元素之前\",{\"1\":{\"5577\":1}}],[\"默认this是同步监视器\",{\"1\":{\"5340\":1}}],[\"默认行为\",{\"1\":{\"4968\":1}}],[\"默认调用super\",{\"1\":{\"7060\":1}}],[\"默认调用的是父类中的同名同参数的方法\",{\"1\":{\"4531\":1}}],[\"默认调用空参构造器\",{\"1\":{\"2149\":1}}],[\"默认方法使得开发者可以在不破坏二进制兼容性的前提下\",{\"1\":{\"4543\":1}}],[\"默认方法使用\",{\"1\":{\"4528\":1}}],[\"默认方法\",{\"0\":{\"4527\":1,\"4540\":1},\"1\":{\"4522\":1,\"4523\":1}}],[\"默认就是副本集的名字\",{\"1\":{\"10543\":1}}],[\"默认就是abstract\",{\"1\":{\"4490\":1}}],[\"默认就是public\",{\"1\":{\"4488\":1}}],[\"默认访问的是子类的同名属性\",{\"1\":{\"4068\":1}}],[\"默认初始化\",{\"1\":{\"3884\":1}}],[\"默认初始化值的情况\",{\"1\":{\"3693\":1}}],[\"默认构造器的修饰符与所属类的修饰符一致\",{\"1\":{\"3877\":1}}],[\"默认构造器\",{\"0\":{\"3872\":1}}],[\"默认值是0\",{\"1\":{\"10330\":1}}],[\"默认值20\",{\"1\":{\"10329\":1}}],[\"默认值\",{\"1\":{\"3525\":1,\"4916\":1,\"4984\":1,\"9290\":1,\"9721\":1}}],[\"默认值与数组的数据类型有关\",{\"1\":{\"3515\":1}}],[\"默认值为null\",{\"1\":{\"5666\":1}}],[\"默认值为false\",{\"1\":{\"952\":1,\"10282\":1,\"10283\":1,\"10391\":1}}],[\"默认值为true\",{\"1\":{\"952\":1}}],[\"默认跳出包裹此关键字最近的一层循环\",{\"1\":{\"3431\":1,\"3444\":1}}],[\"默认数值是int类型的\",{\"1\":{\"3170\":1}}],[\"默认为30分钟\",{\"1\":{\"9200\":1}}],[\"默认为项目路径\",{\"1\":{\"6132\":1}}],[\"默认为int\",{\"1\":{\"3173\":1}}],[\"默认为double\",{\"1\":{\"3166\":1}}],[\"默认为1\",{\"1\":{\"2959\":1}}],[\"默认整形\",{\"0\":{\"3083\":1}}],[\"默认类型为java\",{\"1\":{\"5983\":1}}],[\"默认类型为int\",{\"1\":{\"3165\":1}}],[\"默认类型\",{\"1\":{\"2221\":1,\"2259\":1,\"7088\":1}}],[\"默认根路径为项目路径\",{\"1\":{\"1945\":1}}],[\"默认\",{\"1\":{\"1348\":1,\"2085\":1,\"2360\":1,\"4910\":1,\"4975\":1,\"6273\":1,\"7189\":1,\"8133\":1,\"8458\":1,\"10250\":1}}],[\"默认提供的是lettucs客户端技术\",{\"1\":{\"1040\":1}}],[\"默认单位是毫秒\",{\"1\":{\"952\":1}}],[\"默认的27017端口如果一旦知道了ip就能连接上\",{\"1\":{\"10638\":1}}],[\"默认的服务端口是27017\",{\"1\":{\"10145\":1}}],[\"默认的目录是没有java和resources的\",{\"1\":{\"8554\":1}}],[\"默认的构造器\",{\"1\":{\"8351\":1}}],[\"默认的扩容方式\",{\"1\":{\"5868\":1}}],[\"默认的线程名为\",{\"1\":{\"5218\":1}}],[\"默认的super\",{\"0\":{\"4095\":1}}],[\"默认的时间间隔为1分钟\",{\"1\":{\"952\":1}}],[\"默认的格式如下\",{\"1\":{\"910\":1}}],[\"默认的文件后缀就是properties\",{\"1\":{\"461\":1}}],[\"默认格式\",{\"0\":{\"909\":1}}],[\"默认日志组root\",{\"1\":{\"907\":1}}],[\"默认不参与热部署的目录\",{\"0\":{\"568\":1}}],[\"默认当idea工具失去焦点5秒后进行热部署\",{\"1\":{\"565\":1}}],[\"默认配置文件\",{\"0\":{\"454\":1}}],[\"默认网址是\",{\"1\":{\"327\":1}}],[\"默认是没有自定义角色的\",{\"1\":{\"10658\":1}}],[\"默认是没有用户认证的\",{\"1\":{\"10188\":1}}],[\"默认是索引字段+\",{\"1\":{\"10379\":1}}],[\"默认是27017\",{\"1\":{\"10162\":1}}],[\"默认是localhost\",{\"1\":{\"10162\":1}}],[\"默认是直接拦截的\",{\"1\":{\"9270\":1}}],[\"默认是按照text解析的\",{\"1\":{\"9081\":1}}],[\"默认是导入的\",{\"1\":{\"8682\":1}}],[\"默认是8080\",{\"1\":{\"8602\":1}}],[\"默认是1m\",{\"1\":{\"8077\":1}}],[\"默认是false\",{\"1\":{\"5386\":1,\"10570\":1}}],[\"默认是double类型的\",{\"1\":{\"3167\":1}}],[\"默认是debug\",{\"1\":{\"952\":1}}],[\"默认是int类型\",{\"1\":{\"3167\":1}}],[\"默认是utf8\",{\"1\":{\"1502\":1,\"1505\":1}}],[\"默认是截取到末尾\",{\"1\":{\"1479\":1}}],[\"默认是application\",{\"1\":{\"459\":1}}],[\"默认是最新的稳定版\",{\"1\":{\"320\":1}}],[\"默认是官网\",{\"1\":{\"307\":1}}],[\"已有的函数可以被删除或是其他结构上的变化\",{\"1\":{\"6924\":1}}],[\"已配货\",{\"1\":{\"4824\":1}}],[\"已确认\",{\"1\":{\"4824\":1}}],[\"已发货\",{\"1\":{\"4824\":1}}],[\"已付款\",{\"1\":{\"4824\":1}}],[\"已重写equals\",{\"1\":{\"2422\":1}}],[\"已知一个类的全类名\",{\"1\":{\"2139\":1,\"6999\":1}}],[\"已知某个类的实例\",{\"1\":{\"2136\":1,\"6996\":1}}],[\"已经不支持覆盖更新了\",{\"1\":{\"10288\":1}}],[\"已经不再使用\",{\"1\":{\"8287\":1}}],[\"已经导入了servlet\",{\"1\":{\"8740\":1}}],[\"已经有方法实现过了\",{\"1\":{\"7464\":1}}],[\"已经有实现的方法了\",{\"1\":{\"7444\":1}}],[\"已经进行了绑定\",{\"1\":{\"7294\":1}}],[\"已经进入了方法体\",{\"1\":{\"5403\":1}}],[\"已经被废弃了\",{\"1\":{\"5345\":1}}],[\"已经被android取代\",{\"1\":{\"2807\":1}}],[\"已经存在\",{\"1\":{\"2587\":1}}],[\"已经实现了自然排序接口comparable\",{\"1\":{\"1756\":1}}],[\"已经纠正了过去的缺陷\",{\"1\":{\"1622\":1}}],[\"已经搭建好了\",{\"1\":{\"1099\":1}}],[\"已经将其自动声明为bean了\",{\"1\":{\"611\":1}}],[\"已经勾选的依赖\",{\"1\":{\"324\":1}}],[\"已过时\",{\"1\":{\"23\":1,\"5215\":1}}],[\"700\",{\"1\":{\"10351\":1,\"10357\":1}}],[\"7000\",{\"1\":{\"7616\":1}}],[\"7034897193246939l\",{\"1\":{\"4813\":1}}],[\"77556fd\",{\"1\":{\"7043\":1}}],[\"7之后的语法\",{\"1\":{\"5994\":1}}],[\"78进行tomcat的配置和项目部署了\",{\"1\":{\"8605\":1}}],[\"78\",{\"1\":{\"5964\":1}}],[\"76\",{\"1\":{\"5913\":1,\"5964\":1}}],[\"76<\",{\"1\":{\"1169\":1,\"1361\":1}}],[\"7900\",{\"1\":{\"4491\":1}}],[\"75\",{\"1\":{\"981\":1,\"1008\":1,\"1021\":1,\"10580\":1,\"10583\":1,\"10597\":3,\"10799\":1,\"10807\":1,\"10816\":3,\"10843\":1,\"10846\":3}}],[\"7<\",{\"1\":{\"397\":2,\"1148\":1}}],[\"7\",{\"0\":{\"358\":1,\"359\":1,\"363\":1,\"1271\":1,\"1275\":1,\"1277\":1,\"1280\":1,\"1345\":1,\"1567\":1,\"1661\":1,\"1818\":1,\"1932\":1,\"1967\":1,\"2023\":1,\"2160\":1,\"2201\":1,\"2276\":1,\"2385\":1,\"2423\":1,\"2506\":1,\"2564\":1,\"2605\":1,\"3106\":1,\"3242\":1,\"3248\":1,\"3517\":1,\"3518\":1,\"3520\":1,\"3524\":1,\"3578\":1,\"3641\":1,\"3881\":1,\"3966\":1,\"4114\":1,\"4159\":1,\"4288\":1,\"4289\":1,\"4293\":1,\"4510\":1,\"4512\":1,\"4514\":1,\"4723\":1,\"4754\":1,\"4787\":1,\"5135\":1,\"5465\":1,\"5598\":1,\"5723\":1,\"5726\":1,\"5731\":1,\"5740\":1,\"5743\":1,\"5928\":1,\"5937\":1,\"5984\":1,\"6050\":1,\"6219\":1,\"6433\":1,\"6574\":1,\"6686\":1,\"6863\":1,\"6914\":1,\"7003\":1,\"7692\":1,\"7764\":1,\"7781\":1,\"8030\":1,\"8163\":1,\"8444\":1,\"8445\":1,\"8449\":1,\"8453\":1,\"9055\":1,\"9415\":1,\"9485\":1,\"9486\":1,\"9488\":1,\"9723\":1,\"9775\":1,\"10358\":1,\"10886\":1},\"1\":{\"321\":1,\"347\":1,\"391\":1,\"393\":1,\"394\":1,\"397\":2,\"399\":1,\"400\":2,\"412\":3,\"443\":1,\"1116\":1,\"1123\":1,\"1177\":1,\"1648\":1,\"1904\":1,\"1930\":1,\"2387\":6,\"3250\":1,\"3284\":1,\"3302\":1,\"3304\":1,\"3310\":1,\"3315\":1,\"4154\":1,\"4904\":1,\"5744\":1,\"5959\":1,\"5961\":1,\"6589\":1,\"6912\":1,\"7670\":2,\"7708\":1,\"7712\":1,\"7970\":1,\"8054\":1,\"8148\":1,\"8205\":1,\"8207\":1,\"8210\":1,\"9060\":1,\"9064\":1,\"9895\":2,\"10396\":1,\"10401\":1,\"10429\":1,\"10434\":1,\"10583\":1}}],[\"比dtd更复杂\",{\"1\":{\"9637\":1}}],[\"比hahsmap多了个双向链表\",{\"1\":{\"5898\":1}}],[\"比对是否有所要查询的关键字\",{\"1\":{\"9956\":1}}],[\"比对速度更快\",{\"1\":{\"5881\":1}}],[\"比对时\",{\"1\":{\"2439\":1}}],[\"比\",{\"1\":{\"4731\":1}}],[\"比int小的数值类型\",{\"1\":{\"1799\":1}}],[\"比较查询\",{\"0\":{\"10349\":1}}],[\"比较常用的是设置响应状态码\",{\"1\":{\"9061\":1}}],[\"比较花时间\",{\"1\":{\"8124\":1}}],[\"比较繁琐\",{\"1\":{\"5964\":1}}],[\"比较危险\",{\"1\":{\"5940\":1}}],[\"比较对象是否相同的方法\",{\"0\":{\"5785\":1}}],[\"比较像定义一个java\",{\"1\":{\"3995\":1}}],[\"比较运算符不能连续使用\",{\"1\":{\"3281\":1}}],[\"比较运算符的结果都是boolean型\",{\"1\":{\"3278\":1}}],[\"比较运算符\",{\"0\":{\"3276\":1},\"1\":{\"3279\":1}}],[\"比较是否包含某个集合\",{\"1\":{\"2424\":1}}],[\"比较的不是两个引用的地址是否相同\",{\"1\":{\"4232\":1}}],[\"比较的方式是\",{\"1\":{\"2418\":1}}],[\"比较的是内容是否相同\",{\"1\":{\"1423\":1}}],[\"比较规则为\",{\"1\":{\"1782\":1}}],[\"比较o1和o2的大小\",{\"1\":{\"1782\":1}}],[\"比较两个对象实体是否相同\",{\"1\":{\"4235\":1}}],[\"比较两个对象的实体内容是否相同\",{\"1\":{\"4235\":1}}],[\"比较两个对象的地址值是否相同\",{\"1\":{\"4223\":1,\"4231\":1}}],[\"比较两个对象的大小\",{\"0\":{\"1770\":1}}],[\"比较两个变量保存的数据是否相等\",{\"1\":{\"4222\":1}}],[\"比较两个数组是否相等\",{\"1\":{\"2377\":1}}],[\"比较两个字符串的大小\",{\"1\":{\"1444\":1}}],[\"比较\",{\"0\":{\"1770\":1},\"1\":{\"5862\":1}}],[\"比较name属性\",{\"1\":{\"1769\":1}}],[\"比较字符的ascii\",{\"1\":{\"1444\":1}}],[\"比较器\",{\"0\":{\"1728\":1},\"1\":{\"128\":1,\"2683\":1}}],[\"比如show\",{\"1\":{\"10515\":1}}],[\"比如springcloud\",{\"1\":{\"321\":1}}],[\"比如列出所有的数据库或者关闭服务器\",{\"1\":{\"10205\":1}}],[\"比如评论系统\",{\"1\":{\"10123\":1}}],[\"比如分布式架构\",{\"1\":{\"10122\":1}}],[\"比如从数据库查询数据\",{\"1\":{\"9548\":1}}],[\"比如从用户流中getage获取年轻\",{\"1\":{\"7633\":1}}],[\"比如可以储存access\",{\"1\":{\"9244\":1}}],[\"比如传递的是文件数据\",{\"1\":{\"8981\":1}}],[\"比如获取用户名和密码就可以实现登录操作的相关业务\",{\"1\":{\"8892\":1}}],[\"比如说100\",{\"1\":{\"8297\":1}}],[\"比如说oracle\",{\"1\":{\"8294\":1}}],[\"比如在框架中\",{\"1\":{\"8150\":1}}],[\"比如在条件判断中\",{\"1\":{\"3724\":1}}],[\"比如一张图片\",{\"1\":{\"8064\":1}}],[\"比如一个字母\",{\"1\":{\"3114\":1}}],[\"比如参数1是个字符串\",{\"1\":{\"7457\":1}}],[\"比如php语言可以直接定义函数\",{\"1\":{\"7398\":1}}],[\"比如写个日志\",{\"1\":{\"7223\":1}}],[\"比如mailto\",{\"1\":{\"6911\":1}}],[\"比如最常见的\",{\"1\":{\"6866\":1}}],[\"比如指定源地址和目标地址\",{\"1\":{\"6718\":1}}],[\"比如各种集合工具类\",{\"1\":{\"6084\":1}}],[\"比如取模16\",{\"1\":{\"5727\":1}}],[\"比如并发情况下的线程\",{\"1\":{\"5490\":1}}],[\"比如我们定义了一个全局的int\",{\"1\":{\"5129\":1}}],[\"比如我要切换dev环境为pro时\",{\"1\":{\"857\":1}}],[\"比如java需要后台一直运行gc垃圾回收\",{\"1\":{\"5109\":1}}],[\"比如junit框架中有个\",{\"1\":{\"4913\":1}}],[\"比如拼写检查\",{\"1\":{\"4894\":1,\"4903\":1}}],[\"比如抛出的是个编译时异常\",{\"1\":{\"4802\":1}}],[\"比如空指针\",{\"1\":{\"4788\":1}}],[\"比如返回的错误码不一样\",{\"1\":{\"4777\":1}}],[\"比如无法获取属性\",{\"1\":{\"4587\":1}}],[\"比如用c或c++实现\",{\"1\":{\"3995\":1}}],[\"比如计算两个值谁大\",{\"1\":{\"3321\":1}}],[\"比如没有变量指向的对象\",{\"1\":{\"2825\":1}}],[\"比如排序和搜索\",{\"1\":{\"2349\":1}}],[\"比如四舍五入只是舍入策略的一种\",{\"1\":{\"1909\":1}}],[\"比如1表示成功\",{\"1\":{\"1286\":1}}],[\"比如连接的数据库不一样\",{\"1\":{\"818\":1}}],[\"比如元旦做活动\",{\"1\":{\"805\":1}}],[\"比如配置了服务器的端口是8080\",{\"1\":{\"766\":1}}],[\"比如前端服务器的端口号改为8080\",{\"1\":{\"744\":1}}],[\"比如测试兼容性\",{\"1\":{\"673\":1}}],[\"比如要配置int类型的数据\",{\"1\":{\"637\":1}}],[\"比如\",{\"1\":{\"583\":1,\"833\":1,\"1288\":1,\"2993\":1,\"3920\":1,\"3964\":1,\"3975\":1,\"3979\":1,\"4052\":1,\"4298\":1,\"4410\":1,\"4668\":1,\"4697\":1,\"5006\":1,\"5094\":1,\"5095\":1,\"5108\":1,\"5435\":1,\"5474\":1,\"5526\":1,\"5977\":1,\"5981\":1,\"5989\":1,\"6232\":1,\"7221\":1,\"7301\":1,\"8049\":1,\"8579\":1}}],[\"比如lombok\",{\"1\":{\"322\":1}}],[\"的开发量\",{\"1\":{\"10835\":1}}],[\"的权限\",{\"1\":{\"10696\":1}}],[\"的表中的数据\",{\"1\":{\"10537\":1}}],[\"的字段的索引是无法删除的\",{\"1\":{\"10413\":1}}],[\"的系统\",{\"1\":{\"10120\":1}}],[\"的性质\",{\"1\":{\"10119\":1}}],[\"的性质远大于其\",{\"1\":{\"10119\":1}}],[\"的非关系型数据库\",{\"1\":{\"10014\":1}}],[\"的指针\",{\"1\":{\"9972\":1}}],[\"的形式\",{\"1\":{\"9967\":1}}],[\"的形式变为\",{\"1\":{\"9967\":1}}],[\"的一种具体存储形式\",{\"1\":{\"9965\":1}}],[\"的一部分\",{\"1\":{\"2098\":1,\"2105\":1}}],[\"的语法优化\",{\"1\":{\"9854\":1}}],[\"的大小有限制\",{\"1\":{\"9736\":1}}],[\"的本质是创建了一个响应头\",{\"1\":{\"9699\":1}}],[\"的本机安装系统里\",{\"1\":{\"6641\":1}}],[\"的书写规则\",{\"1\":{\"9624\":1}}],[\"的行为\",{\"1\":{\"9318\":1}}],[\"的资源\",{\"1\":{\"9157\":1}}],[\"的getxxx方法\",{\"1\":{\"8930\":1}}],[\"的getinfo\",{\"1\":{\"4150\":1}}],[\"的优先级\",{\"1\":{\"8859\":1}}],[\"的小程序\",{\"1\":{\"8670\":1}}],[\"的创建和关闭\",{\"1\":{\"8365\":1}}],[\"的子接口\",{\"1\":{\"7929\":1}}],[\"的子类\",{\"1\":{\"5825\":1}}],[\"的连接通常称为\",{\"1\":{\"7714\":1}}],[\"的操作\",{\"0\":{\"7594\":1}}],[\"的静态方法\",{\"1\":{\"7574\":1}}],[\"的丰富的函数式接口\",{\"1\":{\"7412\":1}}],[\"的接口\",{\"1\":{\"7401\":1}}],[\"的灵活性\",{\"1\":{\"7398\":1}}],[\"的意义\",{\"0\":{\"7397\":1}}],[\"的计划发布周期是\",{\"1\":{\"7312\":1}}],[\"的过程\",{\"1\":{\"7016\":1}}],[\"的网络资源的位置来同一表示internet\",{\"1\":{\"6919\":1}}],[\"的简称\",{\"1\":{\"6896\":1}}],[\"的包发送到指定主机上的指定端口号\",{\"1\":{\"6858\":1}}],[\"的工作过程包含以下四个基本的步骤\",{\"1\":{\"6789\":1}}],[\"的正常连接终止序列\",{\"1\":{\"6782\":1}}],[\"的正则表达式中\",{\"1\":{\"2671\":1}}],[\"的数据结构和\",{\"1\":{\"10242\":1}}],[\"的数据\",{\"1\":{\"9843\":1}}],[\"的数据库连接池使用\",{\"1\":{\"8242\":1}}],[\"的数据库系统\",{\"1\":{\"7800\":1}}],[\"的数据包\",{\"1\":{\"6857\":1}}],[\"的数据报服务\",{\"1\":{\"6765\":1}}],[\"的数据类型\",{\"1\":{\"4129\":1}}],[\"的路径名称\",{\"1\":{\"6606\":1}}],[\"的发布\",{\"1\":{\"6589\":1}}],[\"的重载方法read\",{\"1\":{\"6253\":1}}],[\"的父类\",{\"1\":{\"6056\":1}}],[\"的父类或父接口类型\",{\"1\":{\"4336\":1}}],[\"的注意事项\",{\"0\":{\"6002\":1}}],[\"的概念已经被逐渐弱化\",{\"1\":{\"9916\":1}}],[\"的概念\",{\"1\":{\"5947\":1}}],[\"的哈希值相同\",{\"1\":{\"5862\":1}}],[\"的定义为\",{\"1\":{\"5569\":1}}],[\"的集合\",{\"1\":{\"5548\":1}}],[\"的返回值\",{\"1\":{\"5484\":1,\"7279\":1}}],[\"的异同\",{\"0\":{\"5456\":1}}],[\"的某些警告保持静默\",{\"1\":{\"5042\":1}}],[\"的含义是\",{\"1\":{\"5039\":1}}],[\"的成员变量\",{\"1\":{\"4988\":1}}],[\"的成员变量和方法\",{\"1\":{\"4015\":1}}],[\"的作用是\",{\"1\":{\"5042\":1}}],[\"的作用\",{\"1\":{\"4978\":1,\"4987\":1}}],[\"的作用域不同\",{\"1\":{\"4963\":1}}],[\"的生命周期\",{\"1\":{\"4972\":1,\"4977\":1}}],[\"的元注解用于修饰其他\",{\"1\":{\"4971\":1}}],[\"的默认行为\",{\"1\":{\"4966\":1}}],[\"的策略属性\",{\"1\":{\"4978\":2}}],[\"的策略\",{\"1\":{\"4963\":1}}],[\"的每一个实现类\",{\"1\":{\"4952\":1}}],[\"的支持\",{\"1\":{\"4878\":1}}],[\"的关系\",{\"1\":{\"4483\":2}}],[\"的思想\",{\"1\":{\"4482\":1}}],[\"的equals\",{\"1\":{\"4244\":1,\"4245\":1}}],[\"的话\",{\"1\":{\"4234\":1,\"4244\":1}}],[\"的使用\",{\"1\":{\"4094\":1}}],[\"的方法\",{\"1\":{\"4063\":1,\"4129\":1}}],[\"的方式进行\",{\"1\":{\"6151\":1}}],[\"的方式进行调用\",{\"1\":{\"4387\":1}}],[\"的方式来使用\",{\"1\":{\"4507\":1}}],[\"的方式\",{\"1\":{\"3709\":1,\"3887\":1,\"3894\":1,\"3895\":1,\"3897\":1,\"3898\":1,\"3951\":1,\"4076\":1,\"4082\":1,\"4090\":1,\"4322\":1,\"6491\":1}}],[\"的方式访问对象成员\",{\"1\":{\"3635\":1}}],[\"的方式调用指定位置的元素\",{\"1\":{\"3470\":1,\"3503\":1}}],[\"的方式添加参数\",{\"1\":{\"771\":1}}],[\"的基础上\",{\"1\":{\"4030\":1}}],[\"的基本整数操作符的对应物\",{\"1\":{\"1867\":1}}],[\"的多个类\",{\"1\":{\"3939\":1}}],[\"的值\",{\"1\":{\"3781\":1}}],[\"的毫秒数\",{\"1\":{\"3457\":2}}],[\"的区别同理\",{\"1\":{\"3297\":1}}],[\"的区别\",{\"0\":{\"4242\":1},\"1\":{\"3296\":1}}],[\"的整数替代false和true\",{\"1\":{\"3144\":1}}],[\"的实现方式\",{\"1\":{\"3131\":1}}],[\"的文件中\",{\"1\":{\"2883\":1}}],[\"的是最为相似的\",{\"1\":{\"2663\":1}}],[\"的各种方法\",{\"1\":{\"2349\":1}}],[\"的invoke方法来执行获得的方法\",{\"1\":{\"2277\":1,\"7171\":1}}],[\"的效果完全相同\",{\"1\":{\"2103\":1}}],[\"的常规协定是\",{\"1\":{\"2103\":1}}],[\"的条件\",{\"0\":{\"2016\":1}}],[\"的所有相关方法\",{\"1\":{\"1867\":1}}],[\"的第二个参数\",{\"1\":{\"1780\":1}}],[\"的对象来排序\",{\"1\":{\"1777\":1}}],[\"的规则\",{\"1\":{\"1751\":1,\"8679\":1}}],[\"的日期\",{\"1\":{\"1638\":1}}],[\"的类型属性\",{\"1\":{\"4987\":2}}],[\"的类型\",{\"1\":{\"4959\":1}}],[\"的类必须实现\",{\"1\":{\"1750\":1}}],[\"的类\",{\"1\":{\"1623\":1}}],[\"的精华\",{\"1\":{\"1623\":1}}],[\"的长度\",{\"1\":{\"1574\":1}}],[\"的泛型\",{\"1\":{\"1010\":1}}],[\"的\",{\"1\":{\"450\":1,\"1730\":1,\"2146\":1,\"4261\":1,\"5285\":1,\"6511\":1,\"6943\":1,\"7999\":1,\"8470\":1,\"9560\":2,\"10077\":1}}],[\"的目录下\",{\"1\":{\"349\":1}}],[\"的配置\",{\"1\":{\"317\":1}}],[\"的名字\",{\"1\":{\"308\":1}}],[\"即副本成员同时也可以是仲裁者\",{\"1\":{\"10457\":1}}],[\"即备份数据\",{\"1\":{\"10456\":1}}],[\"即oplog\",{\"1\":{\"10445\":1}}],[\"即复合索引\",{\"1\":{\"10368\":1}}],[\"即升序或降序\",{\"1\":{\"10366\":1}}],[\"即把\",{\"1\":{\"9967\":1}}],[\"即资源被访问的方式\",{\"1\":{\"9288\":1}}],[\"即项目的访问路径\",{\"1\":{\"8934\":1}}],[\"即接收get\",{\"1\":{\"8796\":1}}],[\"即自动生成的键值\",{\"1\":{\"8358\":1}}],[\"即java企业版\",{\"1\":{\"8526\":1}}],[\"即java端\",{\"1\":{\"8150\":1}}],[\"即java有一定的动态性\",{\"1\":{\"6928\":1}}],[\"即要连接的数据库地址\",{\"1\":{\"7839\":1}}],[\"即多少个参数\",{\"1\":{\"7400\":1}}],[\"即引用地址\",{\"1\":{\"7011\":1}}],[\"即获取class类的实例\",{\"1\":{\"6991\":1}}],[\"即每个类所属的类\",{\"1\":{\"6966\":1}}],[\"即锚点\",{\"1\":{\"6870\":1}}],[\"即url可以用来标识一个资源\",{\"1\":{\"6866\":1,\"6910\":1}}],[\"即不用手动import\",{\"1\":{\"9495\":1}}],[\"即不能通过此套接字的输出流发送任何数据\",{\"1\":{\"6783\":1}}],[\"即不能在从此套接字的输入流中接收任何数据\",{\"1\":{\"6781\":1}}],[\"即不强制那些实现了该接口的类也同时实现这个新加的方法\",{\"1\":{\"4543\":1}}],[\"即无法重新连接或重新绑定\",{\"1\":{\"6780\":1}}],[\"即无论如何资源都会被释放\",{\"1\":{\"4746\":1}}],[\"即本端的端口号\",{\"1\":{\"6779\":1}}],[\"即本端的ip地址\",{\"1\":{\"6777\":1}}],[\"即物理链路层\",{\"1\":{\"6728\":1}}],[\"即同层间可以通信\",{\"1\":{\"6720\":1}}],[\"即同一个事务的多个操作必须在同一个连接下\",{\"1\":{\"8141\":1}}],[\"即同一个\",{\"1\":{\"5800\":1}}],[\"即通信协议\",{\"1\":{\"6715\":1}}],[\"即通过指定的\",{\"1\":{\"5802\":1}}],[\"即通过法名\",{\"1\":{\"3765\":1}}],[\"即从指针位置开始写\",{\"1\":{\"6520\":1}}],[\"即字符集≈\",{\"1\":{\"6426\":1}}],[\"即保证了\",{\"1\":{\"6083\":1}}],[\"即传入实际的类型参数\",{\"1\":{\"5946\":1}}],[\"即两个对象相同\",{\"1\":{\"5787\":1,\"5788\":1}}],[\"即两个引用是否指向同一个对象实体\",{\"1\":{\"4223\":1,\"4231\":1}}],[\"即hashcode值也是随机\",{\"1\":{\"5750\":1}}],[\"即存放数据之前\",{\"1\":{\"5728\":1}}],[\"即所有操作共享数据的这些语句都要放在同步范围中\",{\"1\":{\"5362\":1}}],[\"即共享成员变量\",{\"1\":{\"5272\":1}}],[\"即创建线程对象\",{\"1\":{\"5181\":1}}],[\"即内存中的数据==变量的值\",{\"1\":{\"5126\":1}}],[\"即进程之间不方便通信\",{\"1\":{\"5072\":1}}],[\"即指一段静态的代码\",{\"1\":{\"5064\":1}}],[\"即运行时保留\",{\"1\":{\"4985\":1}}],[\"即class保留\",{\"1\":{\"4984\":1}}],[\"即源java文件保留\",{\"1\":{\"4983\":1}}],[\"即enum也是用来修饰类的\",{\"1\":{\"4849\":1}}],[\"即程序在运行时由于外界因素造成的一般性异常\",{\"1\":{\"4702\":1}}],[\"即对象的标识符p1保存了对象的内存地址\",{\"1\":{\"4640\":1}}],[\"即对象的类型是父类\",{\"1\":{\"4127\":1}}],[\"即时编译器编译后的代码等数据\",{\"1\":{\"4635\":1}}],[\"即实现接口的类可以直接使用这些方法\",{\"1\":{\"4541\":1}}],[\"即可获知哪些文档包含某个单词\",{\"1\":{\"9973\":1}}],[\"即可添加到左边的jar包目录下\",{\"1\":{\"9507\":1}}],[\"即可\",{\"1\":{\"4280\":1}}],[\"即可以定义多个互相重载的构造器\",{\"1\":{\"3869\":1}}],[\"即子类可以重载父类的同名不同参数的方法\",{\"1\":{\"4157\":1}}],[\"即为绿色软件\",{\"1\":{\"10136\":1}}],[\"即为默认命名空间\",{\"1\":{\"9645\":1}}],[\"即为不同数据库的驱动\",{\"1\":{\"7810\":1}}],[\"即为代理类对象调用的方法\",{\"1\":{\"7279\":1}}],[\"即为通配符指定匹配的上限和下限\",{\"1\":{\"6086\":1}}],[\"即为链地址法\",{\"1\":{\"5870\":1}}],[\"即为需要被同步的代码\",{\"1\":{\"5315\":1}}],[\"即为new的子类对象\",{\"1\":{\"4113\":1}}],[\"即为匿名对象\",{\"1\":{\"3661\":1}}],[\"即在生命周期内\",{\"1\":{\"3984\":1}}],[\"即执行同一个对象实体\",{\"1\":{\"3645\":1}}],[\"即借助某种程序语言\",{\"1\":{\"3610\":1}}],[\"即使定义了成员变量\",{\"1\":{\"8755\":1}}],[\"即使代理做的操作是一样的\",{\"1\":{\"7207\":1}}],[\"即使两个对象完全一样\",{\"1\":{\"5750\":1}}],[\"即使catch中又出现异常了\",{\"1\":{\"4745\":1}}],[\"即使未赋值\",{\"1\":{\"3584\":1}}],[\"即使是整数\",{\"1\":{\"3160\":1}}],[\"即使是web工程\",{\"1\":{\"315\":1}}],[\"即便用double类型接收\",{\"1\":{\"3252\":1}}],[\"即没有迭代器接口\",{\"1\":{\"2582\":1}}],[\"即向某个index插入数据\",{\"1\":{\"2534\":1}}],[\"即向当前时间对象上进行指定单位的时间增加\",{\"1\":{\"1659\":1}}],[\"即移除当前集合中\",{\"1\":{\"2432\":1}}],[\"即被包含\",{\"1\":{\"2425\":1}}],[\"即合并另一个集合\",{\"1\":{\"2406\":1}}],[\"即将字节流转为utf\",{\"1\":{\"6384\":1}}],[\"即将字符读入数组时\",{\"1\":{\"2057\":1}}],[\"即将实际参数值的副本\",{\"1\":{\"3778\":1}}],[\"即将原来的数字加上\",{\"1\":{\"1813\":1}}],[\"即0时区时间\",{\"1\":{\"1675\":1}}],[\"即颠倒字符串\",{\"1\":{\"1603\":1}}],[\"即条件可能是null\",{\"1\":{\"1254\":1}}],[\"即\",{\"1\":{\"350\":1,\"1283\":1,\"2019\":1,\"2021\":1,\"2341\":1,\"2798\":1,\"3191\":1,\"3331\":1,\"3514\":1,\"3968\":1,\"5010\":1,\"5694\":1,\"5706\":1,\"6089\":1,\"6092\":1,\"6116\":1,\"6340\":1,\"7329\":1,\"7420\":1,\"7645\":1,\"10078\":1,\"10382\":1}}],[\"即线上环境\",{\"1\":{\"119\":1}}],[\"选举规则是根据票数来决定谁获胜\",{\"1\":{\"10617\":1}}],[\"选举触发条件\",{\"0\":{\"10611\":1}}],[\"选举节点目录\",{\"1\":{\"10487\":1}}],[\"选举节点\",{\"1\":{\"10481\":1}}],[\"选项是一些与副本集设置有关的信息\",{\"1\":{\"10524\":1}}],[\"选项一般为空即可\",{\"1\":{\"10524\":1}}],[\"选项\",{\"1\":{\"8651\":1}}],[\"选项解释\",{\"1\":{\"306\":1}}],[\"选中导出方式和要设置的项目进行设置\",{\"1\":{\"8641\":1}}],[\"选中之前创建的web项目\",{\"1\":{\"8567\":1}}],[\"选中org\",{\"1\":{\"8548\":1}}],[\"选他\",{\"1\":{\"4799\":1}}],[\"选或跳过\",{\"0\":{\"3343\":1}}],[\"选择或创建数据库\",{\"0\":{\"10210\":1}}],[\"选择的依据\",{\"0\":{\"10039\":1}}],[\"选择放置manifest\",{\"1\":{\"9509\":1}}],[\"选择具体的module\",{\"1\":{\"8699\":1}}],[\"选择war或war\",{\"1\":{\"8650\":1}}],[\"选择web\",{\"1\":{\"8534\":1}}],[\"选择artifact\",{\"1\":{\"8650\":1}}],[\"选择一个tomcat模板就可以在右边进行配置\",{\"1\":{\"8613\":1}}],[\"选择tomcat\",{\"1\":{\"8610\":1}}],[\"选择tomcat的主目录即可\",{\"1\":{\"8592\":1}}],[\"选择maven\",{\"1\":{\"8547\":1,\"8559\":1}}],[\"选择右边的\",{\"1\":{\"8534\":1}}],[\"选择src目录作为源码来源\",{\"1\":{\"7834\":1}}],[\"选择sdk版本\",{\"1\":{\"7322\":1}}],[\"选择之前解压的mysql驱动目录\",{\"1\":{\"7834\":1}}],[\"选择jar包的等级和要加载到哪个模块就ok了\",{\"1\":{\"7829\":1}}],[\"选择\",{\"1\":{\"7819\":1,\"8526\":1,\"8538\":1,\"8582\":1}}],[\"选择符合参数列表的构造器\",{\"1\":{\"3871\":1}}],[\"选择问题所针对的现实世界中的实体\",{\"1\":{\"3608\":1}}],[\"选择性的执行某段代码\",{\"1\":{\"3333\":1}}],[\"选择第一个选项mybatis\",{\"1\":{\"1113\":1}}],[\"选择合适的spring\",{\"1\":{\"1089\":1}}],[\"选择quickstart\",{\"1\":{\"360\":1}}],[\"选择版本\",{\"1\":{\"320\":1}}],[\"选maven就行\",{\"1\":{\"311\":1}}],[\"选java就行\",{\"1\":{\"310\":1}}],[\"时会执行myrunnable类的run方法\",{\"1\":{\"5267\":1}}],[\"时的警告\",{\"1\":{\"5052\":1}}],[\"时必须为该\",{\"1\":{\"4981\":1}}],[\"时要在其前面增加\",{\"1\":{\"4889\":1}}],[\"时区\",{\"1\":{\"1623\":1}}],[\"时区错误\",{\"0\":{\"993\":1}}],[\"时\",{\"1\":{\"1499\":1,\"1648\":1,\"2854\":1,\"3296\":2,\"4063\":1,\"4255\":1,\"5719\":1,\"5868\":1,\"6445\":1,\"7060\":1,\"9171\":1}}],[\"时选择\",{\"1\":{\"304\":1}}],[\"时间到后\",{\"1\":{\"9720\":1}}],[\"时间片\",{\"0\":{\"5234\":1}}],[\"时间线上的一个瞬时点\",{\"1\":{\"1668\":1}}],[\"时间相关的属性\",{\"1\":{\"1636\":1}}],[\"时间滚动输出\",{\"1\":{\"952\":3}}],[\"时间单位\",{\"0\":{\"629\":1}}],[\"时间属性\",{\"1\":{\"628\":1}}],[\"时间和日期之间使用\",{\"1\":{\"486\":1}}],[\"时间\",{\"0\":{\"1605\":1},\"1\":{\"127\":1,\"1701\":1,\"1712\":1,\"2967\":1}}],[\"ixcan\",{\"1\":{\"10425\":1}}],[\"illegalmonitorstateexception异常\",{\"1\":{\"5437\":1}}],[\"illegalthreadstateexception异常\",{\"1\":{\"5200\":1}}],[\"illegalargumentexception\",{\"1\":{\"2244\":1,\"2282\":1,\"2291\":1,\"4864\":1,\"6325\":1,\"6328\":1,\"6331\":1,\"6334\":1}}],[\"illegalaccessexception异常\",{\"1\":{\"7057\":1}}],[\"illegalaccessexception\",{\"1\":{\"2150\":1,\"2244\":1,\"2282\":1,\"2291\":1}}],[\"iq+10\",{\"1\":{\"3990\":1}}],[\"iq++\",{\"1\":{\"3990\":1}}],[\"iq\",{\"1\":{\"3990\":2}}],[\"i表示int类型\",{\"1\":{\"3563\":1}}],[\"i被j除尽\",{\"1\":{\"3457\":1}}],[\"i变量的声明别忘了加数据类型\",{\"1\":{\"3397\":1}}],[\"i<coll\",{\"1\":{\"5592\":1}}],[\"i<=num\",{\"1\":{\"5486\":1}}],[\"i<50\",{\"1\":{\"5253\":1}}],[\"i<p1\",{\"1\":{\"3658\":1}}],[\"i<nums\",{\"1\":{\"3512\":1}}],[\"i<array2\",{\"1\":{\"3486\":1}}],[\"i<10\",{\"1\":{\"3409\":1,\"5221\":1}}],[\"i<100\",{\"1\":{\"3393\":1,\"5185\":2,\"5517\":1}}],[\"i<len\",{\"1\":{\"2048\":1,\"6254\":1}}],[\"i=0\",{\"1\":{\"3393\":1,\"3486\":1,\"3512\":1,\"3658\":1,\"5486\":1,\"5517\":1,\"5592\":1,\"6254\":1}}],[\"i4\",{\"1\":{\"3267\":1}}],[\"i3\",{\"1\":{\"3267\":1}}],[\"i2\",{\"1\":{\"3156\":1,\"3162\":2,\"3176\":2,\"3267\":2}}],[\"i2bat8\",{\"1\":{\"1512\":2,\"1515\":2,\"1518\":1,\"1521\":1}}],[\"i1\",{\"1\":{\"3156\":2,\"3162\":1,\"3176\":1,\"3267\":2,\"3270\":4,\"4281\":2}}],[\"itcast\",{\"1\":{\"9642\":2,\"9645\":2}}],[\"item\",{\"1\":{\"5672\":2}}],[\"iterate\",{\"1\":{\"7585\":1,\"7590\":2}}],[\"iterator方法也得到了了嵌套的泛型\",{\"1\":{\"5970\":1}}],[\"iterator方法和iterator对象\",{\"0\":{\"5571\":1}}],[\"iterator1\",{\"1\":{\"5913\":3}}],[\"iterator对象\",{\"0\":{\"5575\":1}}],[\"iterator对象称为迭代器\",{\"1\":{\"5570\":1,\"5573\":1}}],[\"iterator对象有一个指针\",{\"1\":{\"2458\":1,\"5581\":1}}],[\"iterator是个迭代器接口\",{\"1\":{\"5567\":1}}],[\"iteratorannotations\",{\"1\":{\"5060\":3}}],[\"iterator<\",{\"1\":{\"6078\":1,\"6081\":1}}],[\"iterator<map\",{\"1\":{\"5970\":1}}],[\"iterator<integer>\",{\"1\":{\"2461\":1,\"2465\":1,\"2469\":1,\"5967\":1}}],[\"iterator<e>\",{\"1\":{\"2449\":1,\"2454\":1}}],[\"iterator<string>\",{\"1\":{\"2320\":1,\"2777\":1}}],[\"iterator\",{\"0\":{\"2447\":1,\"2450\":1,\"5565\":1,\"5566\":1},\"1\":{\"2449\":3,\"2452\":1,\"2461\":1,\"2463\":1,\"2465\":1,\"2469\":1,\"2618\":2,\"2624\":2,\"5576\":2,\"5583\":1,\"5588\":2,\"5779\":2,\"5913\":2,\"5967\":1,\"5970\":4,\"6078\":4,\"6081\":4}}],[\"iterable接口\",{\"1\":{\"5572\":1}}],[\"iterable<e>\",{\"1\":{\"2397\":1}}],[\"it\",{\"1\":{\"2449\":2,\"2461\":2,\"2465\":2,\"2469\":3,\"2618\":3,\"2624\":3,\"5588\":1,\"5590\":4,\"5592\":1,\"5595\":2,\"5604\":3,\"5779\":3,\"5967\":3}}],[\"itheima\",{\"1\":{\"734\":1,\"907\":1}}],[\"i++\",{\"1\":{\"2048\":1,\"3393\":1,\"3405\":1,\"3409\":1,\"3444\":1,\"3453\":1,\"3455\":1,\"3457\":1,\"3486\":1,\"3512\":1,\"3570\":1,\"3658\":1,\"3754\":1,\"3803\":1,\"5185\":2,\"5221\":2,\"5253\":2,\"5486\":1,\"5517\":1,\"5592\":1,\"5618\":2,\"5620\":1,\"6254\":1,\"6264\":1,\"6460\":1,\"7106\":2,\"7989\":1,\"8045\":2,\"8054\":2,\"8109\":1,\"8113\":1,\"8121\":1,\"8126\":1,\"8146\":1,\"8201\":6}}],[\"ibookservice\",{\"1\":{\"1265\":1,\"1268\":2,\"1276\":1,\"1299\":1}}],[\"ibatis\",{\"1\":{\"1229\":1,\"1364\":1}}],[\"ifpresent\",{\"0\":{\"7754\":1},\"1\":{\"7756\":2}}],[\"if\",{\"0\":{\"3340\":1,\"3375\":1},\"1\":{\"1256\":1,\"1299\":3,\"1763\":1,\"1769\":4,\"1788\":1,\"1791\":2,\"2003\":2,\"2006\":2,\"2009\":2,\"2114\":1,\"2365\":2,\"3282\":2,\"3334\":1,\"3344\":1,\"3346\":1,\"3348\":3,\"3350\":1,\"3393\":1,\"3405\":1,\"3414\":2,\"3420\":1,\"3444\":1,\"3457\":2,\"3754\":1,\"3821\":1,\"4188\":2,\"4241\":7,\"4425\":1,\"4753\":1,\"4803\":1,\"5060\":1,\"5185\":2,\"5221\":3,\"5263\":1,\"5310\":1,\"5322\":1,\"5345\":1,\"5350\":3,\"5396\":1,\"5464\":1,\"5604\":1,\"5790\":2,\"5794\":1,\"5916\":1,\"6251\":1,\"6254\":1,\"6285\":1,\"6287\":2,\"6306\":2,\"6325\":1,\"6328\":1,\"6331\":1,\"6334\":1,\"6348\":1,\"6353\":2,\"6449\":2,\"6460\":3,\"6840\":1,\"6843\":1,\"7106\":4,\"7970\":2,\"7978\":2,\"8037\":1,\"8045\":1,\"8089\":1,\"8121\":1,\"8126\":1,\"8201\":2,\"8389\":1,\"8817\":2,\"9004\":2,\"9695\":2}}],[\"iws\",{\"1\":{\"1083\":1}}],[\"image\",{\"1\":{\"9229\":1,\"9234\":1}}],[\"import的使用细节\",{\"0\":{\"3948\":1}}],[\"import语句告诉编译器到哪里去寻找类\",{\"1\":{\"3944\":1}}],[\"import\",{\"0\":{\"3940\":1,\"3966\":1},\"1\":{\"3414\":1,\"3947\":2,\"3965\":1,\"3967\":1,\"4734\":4,\"5060\":7,\"5396\":1,\"6594\":3,\"7852\":1,\"8260\":2,\"9270\":2}}],[\"implicit\",{\"1\":{\"10585\":1}}],[\"implemented\",{\"1\":{\"4923\":1}}],[\"implement\",{\"1\":{\"4358\":1,\"9452\":1,\"9456\":1}}],[\"implements\",{\"1\":{\"1265\":1,\"1268\":1,\"1542\":2,\"1639\":1,\"1642\":1,\"1670\":1,\"1769\":1,\"1868\":1,\"1876\":1,\"1943\":1,\"2031\":2,\"2070\":1,\"2129\":1,\"2217\":1,\"2320\":1,\"2365\":1,\"2712\":1,\"2765\":1,\"2777\":1,\"4332\":1,\"4499\":1,\"4507\":1,\"4509\":1,\"4513\":1,\"4872\":1,\"5263\":1,\"5283\":1,\"5310\":1,\"5322\":1,\"5345\":1,\"5396\":1,\"5464\":1,\"5486\":1,\"5517\":1,\"6569\":1,\"6875\":1,\"7227\":1,\"7229\":1,\"7279\":1,\"8207\":1,\"8704\":1,\"8707\":1,\"8784\":1,\"8834\":1,\"9270\":1}}],[\"implementation\",{\"1\":{\"734\":4}}],[\"impl作为业务层实现类\",{\"1\":{\"1261\":1}}],[\"impl\",{\"1\":{\"1119\":1,\"1229\":1,\"1364\":1}}],[\"img\",{\"1\":{\"1946\":1,\"2022\":2,\"6136\":2}}],[\"iml\",{\"1\":{\"1083\":1}}],[\"iml等\",{\"1\":{\"1076\":1}}],[\"i\",{\"1\":{\"936\":1,\"940\":1,\"952\":3,\"1491\":1,\"1518\":1,\"1521\":1,\"1529\":1,\"1862\":2,\"2048\":2,\"2114\":1,\"2354\":1,\"2375\":2,\"2494\":1,\"2495\":1,\"2692\":3,\"2697\":3,\"2705\":1,\"2721\":1,\"3245\":1,\"3273\":2,\"3393\":2,\"3394\":1,\"3405\":5,\"3409\":1,\"3444\":2,\"3453\":3,\"3455\":5,\"3457\":6,\"3486\":2,\"3504\":2,\"3512\":1,\"3563\":1,\"3570\":4,\"3658\":2,\"3754\":3,\"3794\":1,\"3803\":3,\"4227\":2,\"4356\":3,\"4553\":2,\"5085\":1,\"5185\":4,\"5191\":3,\"5221\":8,\"5253\":3,\"5486\":1,\"5614\":2,\"5618\":6,\"5620\":3,\"6150\":2,\"6254\":1,\"6264\":3,\"6460\":4,\"7106\":10,\"7373\":2,\"7989\":4,\"8045\":8,\"8054\":8,\"8109\":3,\"8113\":3,\"8121\":4,\"8126\":4,\"8146\":4,\"8201\":24,\"10111\":1,\"10554\":10,\"10573\":2,\"10580\":2,\"10657\":2,\"10660\":2}}],[\"id索引\",{\"1\":{\"10380\":1}}],[\"id字段默认总是显示的\",{\"1\":{\"10316\":1}}],[\"id字段设置为主键\",{\"1\":{\"10075\":1}}],[\"id属性值是唯一的\",{\"1\":{\"9617\":1}}],[\"id=\",{\"1\":{\"9608\":1}}],[\"id=1008\",{\"1\":{\"7697\":1}}],[\"id=1001\",{\"1\":{\"7685\":1,\"7688\":1}}],[\"identityhashcode\",{\"1\":{\"8270\":1}}],[\"identifier\",{\"1\":{\"6909\":1}}],[\"iden\",{\"1\":{\"7705\":1,\"7708\":1}}],[\"ide有一键重写功能\",{\"1\":{\"4258\":1}}],[\"ide\",{\"1\":{\"4235\":1}}],[\"idea没有使用tomcat的webapps作为项目目录\",{\"1\":{\"8626\":1}}],[\"idea会为每一个tomcat部署的项目单独建立一份配置文件\",{\"1\":{\"8616\":1}}],[\"idea使用\",{\"0\":{\"8510\":1}}],[\"idea中是无法实现活化的\",{\"1\":{\"9779\":1}}],[\"idea中快速使用\",{\"0\":{\"8729\":1}}],[\"idea中\",{\"1\":{\"8447\":1}}],[\"idea连接数据库\",{\"1\":{\"1100\":1}}],[\"idea\",{\"0\":{\"7325\":1,\"8521\":1,\"8531\":1},\"1\":{\"1076\":1,\"1083\":4,\"8489\":1}}],[\"idea文件\",{\"1\":{\"357\":1}}],[\"id`\",{\"1\":{\"1338\":1,\"1340\":1,\"1342\":2,\"1344\":1,\"1348\":1,\"1350\":3,\"1352\":2,\"1354\":3}}],[\"id\",{\"1\":{\"985\":1,\"988\":3,\"1208\":1,\"1211\":1,\"1229\":1,\"1263\":2,\"1265\":2,\"1276\":6,\"1286\":2,\"1299\":6,\"1364\":2,\"3767\":3,\"4077\":1,\"4803\":5,\"6042\":1,\"7074\":1,\"7083\":1,\"7517\":2,\"7525\":2,\"7613\":1,\"7629\":1,\"7980\":1,\"7991\":2,\"8037\":4,\"8042\":4,\"8047\":2,\"8056\":2,\"8089\":5,\"8105\":1,\"8205\":2,\"8207\":9,\"8383\":1,\"8385\":2,\"8387\":2,\"8389\":5,\"8391\":1,\"9631\":1,\"10083\":1,\"10092\":1,\"10257\":1,\"10264\":2,\"10266\":1,\"10277\":1,\"10290\":1,\"10296\":1,\"10302\":1,\"10317\":1,\"10379\":2,\"10381\":2,\"10382\":2,\"10394\":2,\"10399\":2,\"10413\":2,\"10432\":1,\"10541\":2,\"10543\":1,\"10554\":1,\"10576\":1,\"10583\":1,\"10726\":3}}],[\"id>\",{\"1\":{\"862\":2}}],[\"idx\",{\"1\":{\"734\":2,\"6606\":2}}],[\"isbuiltin\",{\"1\":{\"10660\":6}}],[\"isnullable\",{\"1\":{\"8026\":1}}],[\"isnotempty\",{\"1\":{\"1265\":3}}],[\"ispresent\",{\"0\":{\"7751\":1},\"1\":{\"7753\":2}}],[\"iswritable\",{\"1\":{\"6628\":1}}],[\"ismale\",{\"1\":{\"6487\":3}}],[\"ismale=true\",{\"0\":{\"4641\":1}}],[\"isreachable\",{\"0\":{\"6709\":1},\"1\":{\"6711\":2}}],[\"isreadable\",{\"1\":{\"6627\":1}}],[\"isregularfile\",{\"1\":{\"6625\":1}}],[\"isr\",{\"1\":{\"6385\":1,\"6388\":1,\"6394\":2,\"6398\":2,\"6411\":3,\"6449\":2}}],[\"isautoincrement\",{\"1\":{\"8027\":1}}],[\"isabsolute\",{\"1\":{\"6601\":1}}],[\"isalive\",{\"1\":{\"5214\":1,\"5221\":1,\"5231\":1}}],[\"isannotationpresent\",{\"1\":{\"5060\":1}}],[\"isxxx\",{\"1\":{\"4577\":1}}],[\"isflag\",{\"1\":{\"3457\":4}}],[\"isfile\",{\"0\":{\"1980\":1},\"1\":{\"1982\":2}}],[\"ishidden\",{\"0\":{\"1990\":1},\"1\":{\"1993\":2,\"6626\":1}}],[\"isdirectory\",{\"0\":{\"1977\":1},\"1\":{\"1979\":2,\"6624\":1}}],[\"iso8859\",{\"1\":{\"6417\":1}}],[\"isotime\",{\"1\":{\"1702\":1}}],[\"isodate\",{\"1\":{\"1702\":1}}],[\"isodatetime\",{\"1\":{\"1702\":1,\"1705\":2,\"1707\":2}}],[\"iso\",{\"1\":{\"1699\":1,\"1700\":1,\"1701\":1,\"1702\":3,\"1705\":1,\"1707\":2,\"1719\":1,\"9042\":1}}],[\"isempty\",{\"0\":{\"1440\":1,\"2414\":1,\"2610\":1},\"1\":{\"1442\":2,\"2416\":2,\"2612\":3,\"2952\":1,\"2954\":1}}],[\"iservice<book>\",{\"1\":{\"1268\":1}}],[\"is\",{\"1\":{\"624\":1,\"882\":2,\"888\":2,\"955\":2,\"2962\":1,\"2974\":1,\"7049\":2,\"7873\":2,\"7970\":2,\"7975\":2,\"8084\":2,\"8089\":3,\"8260\":2,\"8324\":2,\"10164\":1,\"10498\":1,\"10703\":1}}],[\"ip+port\",{\"1\":{\"10189\":1}}],[\"ipxx\",{\"1\":{\"8458\":1}}],[\"ip层\",{\"1\":{\"6728\":1}}],[\"ipv6\",{\"1\":{\"6667\":1}}],[\"ipv4\",{\"1\":{\"6666\":1}}],[\"ipv4和ipv6\",{\"0\":{\"6665\":1}}],[\"ip地址分类\",{\"0\":{\"6664\":1}}],[\"ip地址介绍\",{\"0\":{\"6662\":1}}],[\"ip与端口号\",{\"0\":{\"6660\":1,\"6661\":1}}],[\"ip协议模型从更实用的角度出发\",{\"1\":{\"6728\":1}}],[\"ip协议\",{\"1\":{\"6655\":1,\"6729\":1}}],[\"ip参考模型\",{\"1\":{\"6655\":1}}],[\"ip和端口号\",{\"1\":{\"6649\":1}}],[\"ipage<book>\",{\"1\":{\"1263\":1,\"1265\":2,\"1276\":1,\"1299\":1}}],[\"ipage\",{\"0\":{\"1235\":1},\"1\":{\"1239\":1,\"1241\":1,\"1265\":2}}],[\"ipaddress属性各种书写模式\",{\"1\":{\"620\":1}}],[\"ipaddress\",{\"1\":{\"611\":1,\"620\":1,\"621\":1}}],[\"ipr\",{\"1\":{\"1083\":1}}],[\"ip\",{\"0\":{\"6726\":1},\"1\":{\"620\":3,\"628\":1,\"6652\":1,\"6692\":1,\"6700\":2,\"6727\":2,\"6729\":1,\"6776\":1,\"6790\":1,\"6846\":1,\"6847\":2,\"6850\":1,\"6859\":1,\"6917\":2,\"8410\":1,\"8944\":2,\"10583\":1}}],[\"increment\",{\"1\":{\"8105\":1}}],[\"include也要修改\",{\"1\":{\"857\":1}}],[\"include有一个问题\",{\"1\":{\"857\":1}}],[\"include\",{\"0\":{\"845\":1},\"1\":{\"853\":1,\"9292\":1}}],[\"independent\",{\"1\":{\"7819\":1}}],[\"indexes\",{\"1\":{\"10372\":1,\"10373\":1}}],[\"indexoutofboundsexception\",{\"0\":{\"4710\":1},\"1\":{\"2511\":1,\"2548\":1,\"2549\":1}}],[\"indexof\",{\"0\":{\"1432\":1,\"2550\":1},\"1\":{\"1435\":3,\"1575\":1,\"2552\":2}}],[\"index\",{\"1\":{\"734\":2,\"1378\":1,\"1431\":1,\"2534\":1,\"2535\":1,\"2537\":1,\"2541\":1,\"2542\":1,\"2546\":1,\"2549\":1,\"2551\":1,\"2563\":1,\"2566\":1,\"6594\":2,\"6899\":1,\"8005\":1,\"8016\":1,\"8623\":2,\"8988\":1,\"9282\":1,\"9286\":1,\"9895\":1,\"9915\":1,\"9965\":1,\"10066\":1,\"10067\":1,\"10365\":1,\"10368\":1,\"10371\":1,\"10411\":1}}],[\"inethostaddress\",{\"1\":{\"6706\":2}}],[\"inet4\",{\"1\":{\"6706\":2,\"6708\":2,\"6711\":2}}],[\"inet4address\",{\"1\":{\"6695\":1}}],[\"inet3\",{\"1\":{\"6703\":2}}],[\"inet2\",{\"1\":{\"6703\":2}}],[\"inetaddress\",{\"1\":{\"6696\":1,\"6698\":1,\"6700\":3,\"6703\":5,\"6706\":2,\"6708\":2,\"6711\":2,\"6769\":1,\"6776\":1,\"6777\":1,\"6801\":1,\"6840\":1,\"6847\":1,\"6851\":1,\"6853\":1,\"6858\":1,\"6859\":1,\"6917\":1}}],[\"inetaddress类主要表示ip地址\",{\"1\":{\"6695\":1}}],[\"inetaddress类\",{\"0\":{\"6688\":1}}],[\"inet6address\",{\"1\":{\"6695\":1}}],[\"in实现\",{\"1\":{\"6447\":1}}],[\"in与system\",{\"0\":{\"6437\":1}}],[\"inheritedroles\",{\"1\":{\"10660\":6}}],[\"inherited注解的自定义的注解标注在类级别上\",{\"1\":{\"5006\":1}}],[\"inherited\",{\"0\":{\"5003\":1,\"5038\":1},\"1\":{\"4910\":1,\"4951\":1,\"4975\":1,\"5004\":1,\"5005\":1,\"5039\":1,\"5040\":1,\"5060\":1}}],[\"inheritance\",{\"1\":{\"3603\":1}}],[\"inb\",{\"1\":{\"4658\":1}}],[\"inner\",{\"1\":{\"4301\":1,\"4302\":1}}],[\"in2\",{\"1\":{\"4274\":1}}],[\"in1\",{\"1\":{\"4274\":3,\"4281\":2,\"4286\":2}}],[\"inputsreamreader\",{\"1\":{\"6388\":1}}],[\"inputsteam\",{\"1\":{\"2045\":1}}],[\"inputstreamreader实现将字节的输入流按指定字符集转换为字符的输入流\",{\"1\":{\"6381\":1}}],[\"inputstreamreader的字符集参数要和文件本身的编码统一\",{\"1\":{\"6377\":1}}],[\"inputstreamreader\",{\"0\":{\"6379\":1},\"1\":{\"6368\":1,\"6382\":1,\"6385\":3,\"6388\":2,\"6394\":2,\"6398\":2,\"6411\":2,\"6449\":2}}],[\"inputstream和reader都是输入流\",{\"1\":{\"2028\":1}}],[\"inputstream\",{\"0\":{\"2024\":1,\"6190\":1,\"6192\":1},\"1\":{\"2031\":2,\"2039\":1,\"2325\":1,\"2782\":1,\"6191\":1,\"6325\":1,\"6385\":1,\"6388\":1,\"6443\":1,\"6465\":1,\"6632\":2,\"6774\":1,\"6780\":1,\"6819\":3,\"6906\":1,\"7049\":1,\"7873\":1,\"7970\":1,\"7975\":1,\"8089\":1,\"8260\":1,\"8324\":1}}],[\"inputmismatchexception\",{\"0\":{\"4719\":1},\"1\":{\"4699\":1}}],[\"input\",{\"1\":{\"2744\":1,\"2747\":1,\"2754\":1,\"2756\":1,\"2758\":1,\"2760\":1,\"2767\":1,\"6154\":1,\"6173\":1}}],[\"in\",{\"1\":{\"2324\":1,\"2325\":1,\"2331\":1,\"2345\":1,\"2781\":1,\"2782\":1,\"2788\":1,\"2802\":1,\"2962\":1,\"3414\":1,\"4720\":1,\"6325\":2,\"6331\":4,\"6385\":1,\"6388\":1,\"6435\":1,\"6438\":1,\"6443\":1,\"6448\":1,\"6449\":1,\"8450\":1}}],[\"inverted\",{\"1\":{\"9965\":1,\"9974\":1}}],[\"invocationhandler\",{\"0\":{\"7267\":1,\"7269\":1},\"1\":{\"7266\":1,\"7279\":1}}],[\"invocationhandler接口\",{\"1\":{\"7261\":1}}],[\"invocationtargetexception\",{\"1\":{\"2282\":1,\"2291\":1}}],[\"invoke方法里\",{\"1\":{\"7307\":1}}],[\"invoke方法里主要做两件事\",{\"1\":{\"7245\":1}}],[\"invoke\",{\"0\":{\"2276\":1,\"7170\":1,\"7269\":1},\"1\":{\"2282\":2,\"5060\":2,\"6960\":1,\"6962\":1,\"7161\":2,\"7176\":1,\"7274\":1,\"7279\":3,\"7307\":3}}],[\"invalid\",{\"1\":{\"624\":1}}],[\"install\",{\"1\":{\"2877\":1,\"10585\":1}}],[\"instancof的\",{\"0\":{\"4186\":1}}],[\"instance\",{\"1\":{\"3619\":1,\"4422\":2,\"4425\":4,\"5350\":8,\"5352\":1,\"9645\":1,\"10744\":1}}],[\"instanceof\",{\"1\":{\"1769\":1,\"1788\":2,\"4187\":1,\"4188\":2,\"4189\":2,\"5790\":1,\"5794\":2,\"5916\":2}}],[\"instantiationexception\",{\"1\":{\"2150\":1,\"2291\":1}}],[\"instant\",{\"0\":{\"1664\":1},\"1\":{\"1668\":1,\"1670\":1,\"1673\":3,\"1676\":2,\"1679\":2,\"1682\":3}}],[\"insecure\",{\"1\":{\"8963\":1}}],[\"insensitive的不同\",{\"1\":{\"2728\":1}}],[\"insensitive\",{\"1\":{\"2683\":1,\"2720\":1}}],[\"insertmany\",{\"1\":{\"10261\":1,\"10264\":1,\"10269\":1}}],[\"insertedid\",{\"1\":{\"10252\":1,\"10603\":1}}],[\"insertone\",{\"1\":{\"10252\":1,\"10603\":1}}],[\"insertbatch\",{\"1\":{\"8362\":1}}],[\"insert\",{\"0\":{\"1596\":1},\"1\":{\"1224\":1,\"1265\":1,\"1601\":2,\"5755\":1,\"7947\":1,\"7952\":1,\"7970\":1,\"8084\":1,\"8109\":1,\"8113\":1,\"8121\":1,\"8126\":1,\"8205\":1,\"8207\":2,\"8210\":1,\"8358\":1,\"8361\":1,\"8381\":1,\"9560\":1,\"9854\":1,\"10246\":1}}],[\"initiate\",{\"1\":{\"10523\":1,\"10526\":1}}],[\"initialsize\",{\"1\":{\"8279\":1}}],[\"initialsize=10\",{\"1\":{\"8263\":1}}],[\"initialize\",{\"0\":{\"7017\":1}}],[\"initializr的方式创建工程\",{\"1\":{\"1086\":1}}],[\"initializr\",{\"0\":{\"303\":1},\"1\":{\"301\":1,\"304\":1}}],[\"initial\",{\"1\":{\"5885\":1}}],[\"init\",{\"0\":{\"8765\":1},\"1\":{\"8764\":1,\"8768\":3,\"8784\":2,\"9270\":1}}],[\"initargs\",{\"1\":{\"2291\":1}}],[\"ini\",{\"1\":{\"996\":1}}],[\"inf表示\",{\"1\":{\"9259\":1}}],[\"inf目录下含有一个web\",{\"1\":{\"9524\":1}}],[\"inf目录下的资源访问\",{\"1\":{\"9262\":1}}],[\"inf目录也在web目录下\",{\"1\":{\"9259\":1}}],[\"inf目录\",{\"1\":{\"9259\":1,\"9523\":1}}],[\"inf所在的目录为webapp\",{\"1\":{\"8570\":1}}],[\"inf下的lib目录下\",{\"1\":{\"8518\":1,\"9525\":1}}],[\"inf下的classes目录下\",{\"1\":{\"8517\":1}}],[\"infor\",{\"1\":{\"10864\":1}}],[\"info为\",{\"1\":{\"10798\":1,\"10806\":1,\"10815\":1}}],[\"infomessage\",{\"1\":{\"10554\":1,\"10576\":1,\"10583\":1}}],[\"info2\",{\"1\":{\"10526\":1}}],[\"info\",{\"1\":{\"882\":2,\"888\":2,\"895\":1,\"952\":14,\"955\":2,\"1029\":2,\"1376\":1,\"4039\":1,\"4553\":2,\"4872\":1,\"4874\":1,\"7117\":1,\"7852\":4,\"10744\":1}}],[\"inf\",{\"1\":{\"569\":1,\"570\":1,\"717\":1,\"719\":1,\"729\":1,\"734\":4,\"8463\":1,\"8497\":1,\"8507\":1,\"8569\":1,\"9260\":1,\"9262\":2,\"9473\":1}}],[\"into\",{\"1\":{\"7947\":1,\"7952\":1,\"7970\":1,\"8084\":1,\"8109\":1,\"8113\":1,\"8121\":1,\"8126\":1,\"8207\":1,\"8381\":1}}],[\"intlist\",{\"1\":{\"7708\":2,\"7712\":2}}],[\"intstream\",{\"1\":{\"7575\":1,\"7578\":1,\"7639\":1}}],[\"ints1\",{\"1\":{\"1486\":2}}],[\"int示例\",{\"1\":{\"4274\":1}}],[\"int类型倒序\",{\"1\":{\"2365\":1}}],[\"int类型直接用也是很精准的\",{\"1\":{\"1879\":1}}],[\"intval\",{\"1\":{\"1876\":1}}],[\"intvalue\",{\"1\":{\"1850\":1,\"4281\":1}}],[\"internet上的主机有两种方式表示地址\",{\"1\":{\"6690\":1}}],[\"internet\",{\"1\":{\"6640\":1,\"6663\":1,\"6696\":1,\"6729\":1,\"6865\":1,\"6866\":1}}],[\"interger\",{\"1\":{\"5650\":1}}],[\"interruptedexception\",{\"1\":{\"5221\":2,\"5426\":2,\"5464\":1,\"5486\":1}}],[\"interceptor\",{\"1\":{\"1234\":3}}],[\"interface关键字声明\",{\"1\":{\"4922\":1}}],[\"interface是注解的关键字与class平级\",{\"1\":{\"4921\":1}}],[\"interfaces1\",{\"1\":{\"7139\":2}}],[\"interfaces\",{\"1\":{\"2162\":2,\"7139\":2,\"7266\":1}}],[\"interface\",{\"0\":{\"4470\":1,\"4920\":1},\"1\":{\"988\":1,\"1013\":1,\"1222\":1,\"1263\":1,\"1268\":1,\"1741\":1,\"1743\":1,\"1776\":1,\"1778\":1,\"2162\":2,\"2395\":1,\"2397\":1,\"2452\":1,\"2454\":1,\"2522\":1,\"2525\":1,\"2572\":1,\"2574\":1,\"2830\":1,\"2831\":1,\"3036\":1,\"3995\":1,\"4356\":1,\"4358\":1,\"4486\":1,\"4491\":1,\"4513\":1,\"4523\":1,\"4623\":1,\"4872\":1,\"4916\":1,\"4918\":1,\"4923\":1,\"4957\":1,\"4979\":1,\"4989\":1,\"5001\":1,\"5004\":1,\"5015\":1,\"5037\":1,\"5040\":1,\"5043\":1,\"5060\":1,\"5990\":1,\"6896\":1,\"6983\":1,\"6986\":1,\"6989\":1,\"7225\":1,\"7418\":1,\"8205\":1,\"8764\":1,\"8837\":1}}],[\"intellijidea2021\",{\"1\":{\"8617\":1}}],[\"intellij\",{\"1\":{\"1083\":1}}],[\"integer中的int\",{\"1\":{\"7482\":1}}],[\"integer>>\",{\"1\":{\"5970\":2}}],[\"integer>\",{\"1\":{\"5970\":2}}],[\"integer类作为int的包装类\",{\"1\":{\"1866\":1}}],[\"integer的compareto内置实现源码\",{\"1\":{\"1763\":1}}],[\"integer\",{\"1\":{\"985\":1,\"988\":1,\"1211\":1,\"1263\":2,\"1265\":1,\"1276\":2,\"1299\":2,\"1486\":2,\"1763\":1,\"1845\":1,\"1850\":1,\"1853\":1,\"1859\":5,\"1862\":1,\"2365\":3,\"2465\":1,\"2469\":1,\"2500\":1,\"2505\":1,\"3245\":1,\"3933\":1,\"4247\":1,\"4248\":4,\"4253\":1,\"4274\":6,\"4281\":2,\"4286\":1,\"4295\":1,\"4670\":2,\"4718\":1,\"4734\":1,\"5790\":1,\"5794\":1,\"5916\":1,\"5964\":1,\"5967\":3,\"5970\":1,\"7345\":1,\"7390\":2,\"7480\":1,\"7483\":1,\"7604\":1,\"7673\":1,\"7708\":2,\"7712\":1,\"7912\":1,\"9642\":1,\"10083\":1}}],[\"int\",{\"0\":{\"2359\":1},\"1\":{\"486\":1,\"611\":1,\"647\":1,\"1208\":1,\"1263\":2,\"1265\":4,\"1276\":2,\"1283\":1,\"1299\":3,\"1334\":1,\"1336\":2,\"1338\":3,\"1340\":2,\"1342\":3,\"1344\":1,\"1346\":1,\"1348\":1,\"1350\":1,\"1352\":2,\"1354\":1,\"1421\":1,\"1431\":1,\"1435\":2,\"1438\":2,\"1449\":1,\"1455\":1,\"1480\":2,\"1486\":3,\"1491\":1,\"1529\":1,\"1546\":1,\"1568\":1,\"1569\":1,\"1581\":1,\"1584\":2,\"1589\":2,\"1595\":2,\"1601\":1,\"1651\":14,\"1654\":8,\"1743\":1,\"1763\":9,\"1769\":3,\"1771\":1,\"1778\":1,\"1788\":1,\"1791\":1,\"1799\":1,\"1800\":3,\"1804\":1,\"1805\":2,\"1808\":2,\"1811\":2,\"1822\":1,\"1848\":1,\"1850\":1,\"1853\":1,\"1859\":1,\"1862\":1,\"1899\":3,\"1907\":3,\"1937\":2,\"2039\":1,\"2042\":3,\"2045\":1,\"2046\":1,\"2048\":5,\"2059\":6,\"2093\":1,\"2096\":2,\"2098\":5,\"2102\":1,\"2104\":2,\"2105\":3,\"2211\":2,\"2225\":2,\"2228\":1,\"2239\":2,\"2263\":2,\"2282\":1,\"2291\":1,\"2307\":1,\"2345\":9,\"2351\":1,\"2354\":1,\"2362\":4,\"2365\":1,\"2370\":8,\"2375\":3,\"2379\":4,\"2387\":4,\"2410\":2,\"2492\":3,\"2495\":2,\"2508\":2,\"2537\":1,\"2546\":1,\"2549\":1,\"2552\":2,\"2555\":2,\"2563\":1,\"2566\":1,\"2569\":2,\"2609\":2,\"2705\":1,\"2717\":1,\"2741\":1,\"2765\":2,\"2802\":9,\"2949\":1,\"2954\":1,\"3005\":1,\"3008\":1,\"3011\":1,\"3027\":1,\"3082\":1,\"3084\":1,\"3108\":1,\"3156\":2,\"3162\":2,\"3176\":3,\"3241\":1,\"3245\":1,\"3253\":3,\"3261\":4,\"3267\":2,\"3270\":1,\"3273\":1,\"3282\":1,\"3319\":4,\"3322\":2,\"3367\":1,\"3393\":3,\"3405\":1,\"3409\":1,\"3414\":3,\"3420\":3,\"3444\":2,\"3453\":2,\"3455\":2,\"3457\":4,\"3486\":2,\"3491\":2,\"3499\":1,\"3500\":5,\"3506\":1,\"3512\":2,\"3541\":5,\"3545\":2,\"3550\":2,\"3556\":3,\"3560\":4,\"3563\":6,\"3570\":2,\"3588\":2,\"3591\":4,\"3630\":1,\"3658\":2,\"3664\":1,\"3695\":1,\"3747\":1,\"3754\":4,\"3767\":1,\"3782\":5,\"3787\":3,\"3794\":1,\"3803\":1,\"3816\":1,\"3821\":1,\"3857\":2,\"3870\":2,\"3901\":3,\"3985\":2,\"3987\":1,\"3990\":1,\"4039\":3,\"4061\":7,\"4080\":1,\"4164\":2,\"4227\":1,\"4274\":1,\"4281\":2,\"4286\":2,\"4292\":1,\"4295\":2,\"4332\":2,\"4491\":2,\"4553\":1,\"4585\":3,\"4634\":1,\"4658\":2,\"4709\":1,\"4712\":2,\"4718\":1,\"4720\":1,\"4722\":2,\"4724\":1,\"4734\":1,\"4751\":3,\"4753\":1,\"4777\":1,\"4803\":2,\"4957\":1,\"5033\":2,\"5060\":2,\"5185\":2,\"5221\":2,\"5247\":1,\"5253\":3,\"5263\":1,\"5310\":1,\"5322\":1,\"5332\":1,\"5345\":1,\"5396\":1,\"5464\":1,\"5486\":3,\"5517\":1,\"5526\":1,\"5592\":1,\"5614\":3,\"5618\":2,\"5620\":1,\"5656\":1,\"5790\":2,\"5794\":1,\"5916\":1,\"5963\":1,\"5964\":1,\"5981\":1,\"5999\":2,\"6243\":1,\"6251\":1,\"6254\":2,\"6264\":1,\"6287\":1,\"6306\":1,\"6325\":2,\"6328\":1,\"6331\":2,\"6334\":2,\"6353\":1,\"6398\":1,\"6411\":1,\"6460\":1,\"6475\":1,\"6487\":1,\"6516\":1,\"6605\":1,\"6606\":1,\"6711\":1,\"6769\":1,\"6772\":1,\"6778\":1,\"6779\":1,\"6801\":2,\"6806\":1,\"6814\":1,\"6819\":1,\"6846\":1,\"6847\":1,\"6852\":1,\"6854\":1,\"6857\":1,\"6858\":2,\"6860\":1,\"6862\":1,\"6883\":1,\"6902\":1,\"6917\":1,\"6949\":1,\"6956\":2,\"6960\":1,\"7074\":1,\"7082\":1,\"7083\":1,\"7086\":1,\"7092\":2,\"7094\":1,\"7106\":2,\"7114\":2,\"7120\":1,\"7390\":3,\"7575\":1,\"7578\":1,\"7613\":2,\"7629\":2,\"7655\":3,\"7911\":1,\"7956\":1,\"7989\":1,\"8005\":2,\"8016\":1,\"8021\":1,\"8022\":1,\"8024\":1,\"8025\":1,\"8026\":1,\"8027\":1,\"8037\":1,\"8042\":2,\"8045\":3,\"8054\":3,\"8089\":2,\"8105\":1,\"8109\":1,\"8113\":1,\"8121\":1,\"8126\":1,\"8146\":1,\"8160\":1,\"8201\":9,\"8205\":2,\"8207\":2,\"8355\":1,\"8361\":1,\"8381\":1,\"8383\":1,\"8389\":1,\"8837\":1,\"9062\":1,\"9095\":1,\"9717\":1}}],[\"introduction\",{\"1\":{\"372\":2}}],[\"ignored\",{\"1\":{\"355\":1}}],[\"ioutils\",{\"1\":{\"9099\":1}}],[\"io是面向流的\",{\"1\":{\"6581\":1}}],[\"io包下\",{\"1\":{\"6489\":1}}],[\"io包下提供了各种\",{\"1\":{\"6152\":1}}],[\"io流体系\",{\"0\":{\"6171\":1}}],[\"io流介绍\",{\"0\":{\"6148\":1}}],[\"io原理\",{\"0\":{\"6153\":1}}],[\"io简介\",{\"0\":{\"6149\":1}}],[\"ioexception异常\",{\"1\":{\"2041\":1,\"2047\":1,\"2097\":1,\"6277\":1,\"6280\":1}}],[\"ioexception\",{\"0\":{\"4723\":1},\"1\":{\"1299\":4,\"2003\":2,\"2061\":1,\"2062\":1,\"2114\":3,\"2121\":1,\"4699\":1,\"4734\":1,\"4753\":2,\"4777\":3,\"6242\":1,\"6245\":1,\"6251\":2,\"6254\":2,\"6285\":1,\"6287\":3,\"6306\":3,\"6348\":2,\"6353\":3,\"6449\":2,\"6769\":1,\"6772\":1,\"6783\":1,\"6801\":2,\"6803\":1,\"6814\":1,\"6819\":1,\"6901\":1,\"6906\":1,\"6907\":1,\"8704\":1,\"8764\":1,\"8772\":1,\"8809\":2,\"8817\":1,\"8944\":2,\"8951\":1,\"8955\":1,\"8990\":1,\"9004\":2,\"9027\":2,\"9031\":2,\"9079\":1,\"9124\":2,\"9143\":1,\"9145\":1,\"9270\":2}}],[\"ioc\",{\"1\":{\"1268\":1}}],[\"ioc自动装载\",{\"1\":{\"661\":1}}],[\"io\",{\"0\":{\"2023\":1},\"1\":{\"360\":1,\"2041\":1,\"2047\":1,\"2061\":1,\"2129\":1,\"2162\":1,\"2712\":1,\"3935\":1,\"4734\":4,\"6106\":1,\"6206\":2,\"6238\":1,\"6242\":1,\"6245\":1,\"6271\":1,\"6277\":1,\"6280\":1,\"6581\":3,\"6594\":1,\"6875\":1,\"9098\":1,\"9270\":1}}],[\"io如果网络不通畅\",{\"1\":{\"327\":1}}],[\"io类\",{\"1\":{\"130\":1}}],[\"实用类提供了很多静态方法\",{\"1\":{\"7720\":1}}],[\"实用功能\",{\"0\":{\"10876\":1},\"1\":{\"75\":1}}],[\"实测\",{\"1\":{\"7649\":1,\"10608\":1}}],[\"实参列表\",{\"1\":{\"4349\":1}}],[\"实参\",{\"1\":{\"3772\":1}}],[\"实实在在的某个人\",{\"1\":{\"3620\":1}}],[\"实在需要转换类型\",{\"1\":{\"3244\":1}}],[\"实例称为一个节点\",{\"1\":{\"9840\":1}}],[\"实例方法\",{\"0\":{\"7484\":1,\"7491\":1}}],[\"实例所生成\",{\"1\":{\"6978\":1}}],[\"实例变量\",{\"1\":{\"3040\":1,\"4380\":1}}],[\"实例\",{\"1\":{\"2389\":1,\"7742\":1,\"7745\":1,\"9840\":1}}],[\"实例化被代理类\",{\"1\":{\"7286\":1}}],[\"实例化file类的对象\",{\"1\":{\"6251\":1}}],[\"实例化filereader对象\",{\"1\":{\"6239\":1}}],[\"实例化时\",{\"1\":{\"6001\":1}}],[\"实例化泛型类\",{\"0\":{\"6000\":1}}],[\"实例化hashmap类时\",{\"1\":{\"5970\":1}}],[\"实例化arraylist类时\",{\"1\":{\"5967\":1}}],[\"实例化子类\",{\"1\":{\"4513\":2}}],[\"实例化成员内部类\",{\"0\":{\"4325\":1}}],[\"实例化的文件已经存在\",{\"1\":{\"2079\":1}}],[\"实例化的文件不存在\",{\"1\":{\"2078\":1}}],[\"实例化后\",{\"1\":{\"1687\":1,\"6003\":1}}],[\"实例化\",{\"0\":{\"2076\":1,\"2081\":1,\"2088\":1,\"2130\":1,\"2766\":1,\"5560\":1,\"5665\":1,\"7563\":1},\"1\":{\"1672\":1,\"1719\":1,\"2072\":1,\"2218\":1,\"2253\":1,\"2288\":1}}],[\"实例化类\",{\"1\":{\"1647\":1,\"3633\":1}}],[\"实际使用时\",{\"1\":{\"9589\":1}}],[\"实际使用中根据需要存入的数据大小定义不同的blob类型\",{\"1\":{\"8073\":1}}],[\"实际使用的时候\",{\"1\":{\"1845\":1}}],[\"实际引用的资源也可以不存在\",{\"1\":{\"6593\":1}}],[\"实际应该使用try\",{\"1\":{\"6411\":1}}],[\"实际上就是改一下\",{\"1\":{\"10596\":1}}],[\"实际上就是调用当前对象的tostring\",{\"1\":{\"4250\":1}}],[\"实际上是一组协议\",{\"1\":{\"6727\":1}}],[\"实际上非常规则\",{\"1\":{\"6168\":1}}],[\"实际调用的是子类的方法\",{\"1\":{\"4783\":1}}],[\"实际执行的是子类重写的方法\",{\"1\":{\"4153\":1}}],[\"实际运行的是子类重写父类的方法\",{\"1\":{\"4122\":1}}],[\"实际比较的是对象的属性的大小\",{\"1\":{\"1732\":1}}],[\"实际开发应该在多台服务器上进行\",{\"1\":{\"10476\":1}}],[\"实际开发中都是使用maven添加的\",{\"1\":{\"9516\":1}}],[\"实际开发中\",{\"1\":{\"925\":1,\"5561\":1,\"5910\":1,\"6213\":1,\"6223\":1,\"6533\":1,\"7178\":1,\"8805\":1,\"9533\":1}}],[\"实际开发时都是部署到linux服务器上的\",{\"1\":{\"685\":1}}],[\"实际开发时\",{\"1\":{\"471\":1,\"762\":1,\"872\":1,\"1270\":1,\"1301\":1,\"10266\":1}}],[\"实际开发时仅书写gav中的g和a\",{\"1\":{\"405\":1}}],[\"实收金额\",{\"1\":{\"1352\":1}}],[\"实体内容\",{\"1\":{\"4232\":1,\"4234\":1,\"4255\":1}}],[\"实体数据\",{\"1\":{\"1278\":1}}],[\"实体类泛型\",{\"1\":{\"1222\":1}}],[\"实体类需要手动生成get\",{\"1\":{\"1213\":1}}],[\"实体类包名\",{\"1\":{\"1210\":1}}],[\"实体类开发\",{\"1\":{\"1188\":1}}],[\"实体类\",{\"0\":{\"984\":1,\"1209\":1},\"1\":{\"1119\":1}}],[\"实现读写分离\",{\"1\":{\"10439\":1}}],[\"实现免密登录访问即可\",{\"1\":{\"9901\":1}}],[\"实现架构的思想\",{\"1\":{\"9581\":1}}],[\"实现某个监听器接口\",{\"1\":{\"9444\":1}}],[\"实现某一应用最大可用数据库连接数的限制\",{\"1\":{\"8239\":1}}],[\"实现filter接口\",{\"0\":{\"9268\":1}}],[\"实现步骤\",{\"0\":{\"9089\":1}}],[\"实现servlet接口\",{\"1\":{\"8690\":1,\"8703\":1}}],[\"实现计算\",{\"1\":{\"7553\":1}}],[\"实现他的方法\",{\"1\":{\"7401\":1}}],[\"实现接口\",{\"1\":{\"7219\":1}}],[\"实现接口的方法不同\",{\"1\":{\"4923\":1}}],[\"实现接口的枚举类\",{\"0\":{\"4866\":1}}],[\"实现接口的类中必须提供接口中所有方法的具体实现内容\",{\"1\":{\"4501\":1}}],[\"实现追加和插入效果\",{\"0\":{\"6522\":1}}],[\"实现将基本数据类型的数据格式转化为字符串输出\",{\"1\":{\"6451\":1}}],[\"实现将字符的输出流按指定字符集转换为字节的输出流\",{\"1\":{\"6400\":1}}],[\"实现编码和解码的功能\",{\"1\":{\"6372\":1}}],[\"实现原理和结构与hashmap相同\",{\"1\":{\"5836\":1}}],[\"实现重复利用\",{\"1\":{\"5491\":1}}],[\"实现comparable\",{\"1\":{\"5912\":1}}],[\"实现comparable接口\",{\"0\":{\"1768\":1}}],[\"实现call方法\",{\"1\":{\"5486\":1}}],[\"实现callable接口是jdk5\",{\"1\":{\"5467\":1}}],[\"实现runnable\",{\"1\":{\"5280\":1}}],[\"实现runnable接口的方式\",{\"1\":{\"5275\":1}}],[\"实现的方式更适合来处理多个线程有共享数据的情况\",{\"1\":{\"5277\":1}}],[\"实现的方式没有类的单继承性的局限性\",{\"1\":{\"5276\":1}}],[\"实现一些自定义的逻辑\",{\"1\":{\"4913\":1}}],[\"实现一次编译多次使用\",{\"1\":{\"2709\":1}}],[\"实现替代配置文件功能\",{\"1\":{\"4896\":1}}],[\"实现代替配置文件的功能\",{\"1\":{\"4895\":1}}],[\"实现usb接口\",{\"1\":{\"4513\":1}}],[\"实现具体业务的代码即可\",{\"1\":{\"4468\":1}}],[\"实现方式2\",{\"0\":{\"4423\":1}}],[\"实现方式1\",{\"0\":{\"4418\":1}}],[\"实现功能的拓展\",{\"1\":{\"4007\":1}}],[\"实现对该属性的操作\",{\"1\":{\"3823\":1,\"3828\":1}}],[\"实现缩进\",{\"1\":{\"2992\":1}}],[\"实现了代码和数据的分离\",{\"1\":{\"7875\":1}}],[\"实现了接口\",{\"1\":{\"7283\":1}}],[\"实现了基于tcp协议的客户端\",{\"1\":{\"6918\":1}}],[\"实现了基于\",{\"1\":{\"6828\":1}}],[\"实现了一个跨平台的网络库\",{\"1\":{\"6641\":1}}],[\"实现了comparable接口\",{\"1\":{\"3218\":1}}],[\"实现了\",{\"1\":{\"2822\":1}}],[\"实现了iterator接口的对象\",{\"1\":{\"2456\":1}}],[\"实现类简介\",{\"0\":{\"5812\":1}}],[\"实现类去实现runnable中的抽象方法\",{\"1\":{\"5258\":1,\"5263\":1}}],[\"实现类\",{\"0\":{\"2575\":1}}],[\"实现类为\",{\"1\":{\"2399\":1}}],[\"实现类为page\",{\"1\":{\"1236\":1}}],[\"实现\",{\"1\":{\"1750\":1,\"4469\":1,\"5557\":1}}],[\"实现自主研发基于springboot整合任意技术的开发方式\",{\"1\":{\"298\":1}}],[\"实时查看logback运行状态\",{\"1\":{\"952\":1}}],[\"理解成是一个大的概念\",{\"1\":{\"9581\":1}}],[\"理解springboot底层\",{\"1\":{\"297\":1}}],[\"理解为主\",{\"1\":{\"9\":1,\"14\":1}}],[\"掌握各式各样的第三方技术与springboot整合的方案\",{\"1\":{\"296\":1}}],[\"简言之\",{\"1\":{\"7545\":1}}],[\"简洁\",{\"1\":{\"3325\":1}}],[\"简洁一些\",{\"1\":{\"1202\":1}}],[\"简称binary\",{\"1\":{\"10081\":1}}],[\"简称为\",{\"1\":{\"9834\":1}}],[\"简称java容器\",{\"1\":{\"5522\":1}}],[\"简称\",{\"1\":{\"3215\":1,\"4120\":1}}],[\"简单类型\",{\"1\":{\"9642\":1}}],[\"简单示例\",{\"0\":{\"9607\":1}}],[\"简单来说\",{\"1\":{\"5066\":1,\"10431\":1}}],[\"简单设置就可以随意切换java版本\",{\"1\":{\"2861\":1}}],[\"简单int\",{\"1\":{\"1881\":1}}],[\"简单读取\",{\"1\":{\"499\":1}}],[\"简化操作\",{\"1\":{\"8797\":1,\"8824\":1}}],[\"简化代码\",{\"1\":{\"3715\":1}}],[\"简化写法\",{\"1\":{\"3500\":1,\"3541\":1}}],[\"简化常用工程相关配置\",{\"1\":{\"291\":1}}],[\"简化依赖管理\",{\"1\":{\"290\":1}}],[\"简介\",{\"0\":{\"287\":1,\"1534\":1,\"6639\":1,\"7335\":1,\"7926\":1,\"10013\":1}}],[\"其主要目标是使用数据库的访问变得方便快捷\",{\"1\":{\"10834\":1}}],[\"其资源成本比具有数据集的全功能副本集成员更便宜\",{\"1\":{\"10460\":1}}],[\"其\",{\"1\":{\"10119\":1}}],[\"其生命周期由容器来管理\",{\"1\":{\"8745\":1}}],[\"其key为指定的key\",{\"1\":{\"8375\":1}}],[\"其结果可以是任何不是流的值\",{\"1\":{\"7604\":1}}],[\"其一对\",{\"1\":{\"7362\":1}}],[\"其次\",{\"1\":{\"7244\":1,\"8119\":1}}],[\"其属性是不能被改变的\",{\"1\":{\"6886\":1}}],[\"其长度\",{\"1\":{\"6849\":1}}],[\"其长度就不可修改\",{\"1\":{\"5528\":1}}],[\"其长度就不可变了\",{\"1\":{\"3508\":1}}],[\"其长度就确定了\",{\"1\":{\"3493\":1,\"5524\":1}}],[\"其通信模型如图所示\",{\"1\":{\"6786\":1}}],[\"其后的读操作则直接访问缓冲区\",{\"1\":{\"6314\":1}}],[\"其后的代码就不再执行\",{\"1\":{\"4687\":1}}],[\"其它四个重写的接口方法暂不考虑\",{\"1\":{\"8817\":1}}],[\"其它计算机实现数据交换\",{\"1\":{\"6644\":1}}],[\"其它的同上\",{\"1\":{\"5794\":1}}],[\"其它因编程错误或偶然的外在因素导致的一般性问题\",{\"1\":{\"4672\":1}}],[\"其hashcode也是不同的\",{\"1\":{\"5750\":1}}],[\"其所在的类一定要重写hashcode\",{\"1\":{\"5748\":1}}],[\"其元素的类型也就确定了\",{\"1\":{\"5525\":1}}],[\"其数量不足以满足多个进程运行的需要\",{\"1\":{\"5419\":1}}],[\"其方法也一样\",{\"1\":{\"9240\":1}}],[\"其方法才可以供外部调用\",{\"1\":{\"4364\":1}}],[\"其方法的参数和返回为值类型一般为double型\",{\"1\":{\"1796\":1}}],[\"其余各个位取反\",{\"1\":{\"3189\":1}}],[\"其余表示值\",{\"1\":{\"3188\":1}}],[\"其会被解析为\",{\"1\":{\"2950\":1}}],[\"其子接口和子接口的实现类也同样可以使用\",{\"1\":{\"2399\":1}}],[\"其内部的成员变量和成员方法都是static的\",{\"1\":{\"2299\":1}}],[\"其对象必须使用构造器生成\",{\"1\":{\"1544\":1}}],[\"其中mongos或mongod将写入其pid\",{\"1\":{\"10496\":1}}],[\"其中配置文件如下\",{\"1\":{\"10495\":1}}],[\"其中底部>\",{\"1\":{\"10192\":1}}],[\"其中数据的增删改查也只是像变量操作一样简单\",{\"1\":{\"10119\":1}}],[\"其中的method可以选择get和post分别进行测试\",{\"1\":{\"9024\":1}}],[\"其中的每个元素也被按照成员变量同样的方式被隐式初始化\",{\"1\":{\"3514\":1}}],[\"其中init\",{\"1\":{\"8763\":1}}],[\"其中server方法中打印一句话进行测设\",{\"1\":{\"8691\":1}}],[\"其中status的值为0代表正常退出\",{\"1\":{\"2306\":1}}],[\"其中有三个文件夹\",{\"1\":{\"8626\":1}}],[\"其中有个invoke方法\",{\"1\":{\"7263\":1}}],[\"其中元素按比较器顺序排序\",{\"1\":{\"7672\":1}}],[\"其中元素按自然顺序排序\",{\"1\":{\"7668\":1}}],[\"其中\",{\"1\":{\"5804\":1,\"7822\":1,\"8358\":1,\"8579\":1,\"9538\":1,\"10335\":1}}],[\"其中类b是类a的父类\",{\"1\":{\"4189\":1}}],[\"其中包含了java的开发工具\",{\"1\":{\"2847\":1}}],[\"其中包含热部署工具\",{\"1\":{\"548\":1}}],[\"其中最基础的策略就是\",{\"1\":{\"933\":1}}],[\"其中键为主环境\",{\"1\":{\"859\":1}}],[\"其实mogodb很多时候是关系型数据库的一个替代\",{\"1\":{\"10026\":1}}],[\"其实是会钝化处理的\",{\"1\":{\"9782\":1}}],[\"其实是一种假的多线程\",{\"1\":{\"5090\":1}}],[\"其实问题也不是很大\",{\"1\":{\"8749\":1}}],[\"其实一个数据库连接就是一个socket连接\",{\"1\":{\"7880\":1}}],[\"其实至少有三个线程\",{\"1\":{\"5092\":1}}],[\"其实就是一个接口\",{\"1\":{\"8672\":1}}],[\"其实就是重写的抽象方法的方法体\",{\"1\":{\"7348\":1}}],[\"其实就是接口中的抽象方法的形参列表\",{\"1\":{\"7347\":1}}],[\"其实就是共享资源竞争\",{\"1\":{\"5358\":1}}],[\"其实就是在描述其对象的属性和行为\",{\"1\":{\"4364\":1}}],[\"其实就是类的成员的设计\",{\"1\":{\"3621\":1}}],[\"其实就是四个配置文件书写的位置\",{\"1\":{\"788\":1}}],[\"其实没有多维数组\",{\"1\":{\"3533\":1}}],[\"其实\",{\"1\":{\"3533\":1}}],[\"其实测试版基本也是在linux上\",{\"1\":{\"686\":1}}],[\"其名称由模块名+版本号+\",{\"1\":{\"694\":1}}],[\"其设计目的是用来简化spring应用的初始搭建以及开发过程\",{\"1\":{\"288\":1}}],[\"其他都交给\",{\"1\":{\"10835\":1}}],[\"其他索引\",{\"0\":{\"10370\":1}}],[\"其他>json\",{\"1\":{\"9808\":1}}],[\"其他静态资源\",{\"1\":{\"8509\":1}}],[\"其他各种可以被浏览器访问的静态资源\",{\"1\":{\"8501\":1}}],[\"其他k=v是字符集\",{\"1\":{\"7845\":1}}],[\"其他k=v\",{\"1\":{\"7844\":1}}],[\"其他完全一样的方法\",{\"1\":{\"7452\":1}}],[\"其他流\",{\"0\":{\"6433\":1}}],[\"其他流的方法\",{\"0\":{\"2115\":1}}],[\"其他实现跟节点流类似\",{\"1\":{\"6212\":1}}],[\"其他泛型的list就无法调用了\",{\"1\":{\"6077\":1}}],[\"其他代码的同上\",{\"1\":{\"5916\":1}}],[\"其他线程等待\",{\"1\":{\"5374\":1}}],[\"其他线程调用了该线程的suspend\",{\"1\":{\"5371\":1}}],[\"其他线程需要等待\",{\"1\":{\"5355\":1}}],[\"其他线程都需要在后面排队\",{\"1\":{\"5352\":1}}],[\"其他线程都要进行等待\",{\"1\":{\"5352\":1}}],[\"其他线程不可以参与执行\",{\"1\":{\"5308\":1,\"5362\":1}}],[\"其他元注解要相同\",{\"1\":{\"5022\":1}}],[\"其他方式\",{\"1\":{\"9962\":1}}],[\"其他方式创建springboot项目\",{\"0\":{\"358\":1}}],[\"其他方法不用管\",{\"1\":{\"8704\":1}}],[\"其他方法无法解析\",{\"1\":{\"6482\":1}}],[\"其他方法\",{\"1\":{\"4860\":1}}],[\"其他诉求\",{\"1\":{\"4843\":1}}],[\"其他区域跟类和对象无关\",{\"1\":{\"4636\":1}}],[\"其他区域\",{\"1\":{\"4636\":1}}],[\"其他javabean\",{\"1\":{\"4579\":1}}],[\"其他数据库驱动实现接口\",{\"1\":{\"4516\":1}}],[\"其他数据index顺延\",{\"1\":{\"2534\":1}}],[\"其他操作\",{\"1\":{\"4142\":1}}],[\"其他关键字\",{\"1\":{\"3718\":1}}],[\"其他修饰符\",{\"1\":{\"3671\":1}}],[\"其他7种基本数据类型是可以互相运算的\",{\"1\":{\"3148\":1}}],[\"其他类型functional\",{\"0\":{\"7437\":1}}],[\"其他类型配置文件\",{\"0\":{\"470\":1}}],[\"其他类\",{\"0\":{\"2294\":1}}],[\"其他层的异常最终会抛到controller\",{\"1\":{\"1289\":1}}],[\"其他的步骤都是相通的\",{\"1\":{\"7982\":1}}],[\"其他的部分是确定的\",{\"1\":{\"5944\":1}}],[\"其他的都是false\",{\"1\":{\"1485\":1}}],[\"其他的配置采用默认值\",{\"1\":{\"980\":1}}],[\"其他的根据加载顺序确定\",{\"1\":{\"859\":1}}],[\"其他还是正常debug级别\",{\"1\":{\"952\":1}}],[\"其他环境中有相同属性时\",{\"1\":{\"855\":1}}],[\"其他目录也可以\",{\"1\":{\"756\":1}}],[\"其他服务器关闭\",{\"1\":{\"744\":1}}],[\"其他内置类\",{\"1\":{\"132\":1}}],[\"其他\",{\"0\":{\"3993\":1,\"7774\":1},\"1\":{\"101\":1,\"10024\":1}}],[\"其他spring组件\",{\"1\":{\"20\":1}}],[\"其他知识\",{\"1\":{\"6\":1}}],[\"集群\",{\"0\":{\"10893\":1}}],[\"集群中每一个实例彼此连接的时候都检验彼此使用的证书的内容是否相同\",{\"1\":{\"10763\":1}}],[\"集群管理角色\",{\"1\":{\"10668\":1}}],[\"集群间组件的通信端口\",{\"1\":{\"9891\":1}}],[\"集群等复杂操作只能保证尽量正确\",{\"1\":{\"262\":1,\"271\":1}}],[\"集合名称\",{\"1\":{\"10300\":1,\"10302\":1,\"10351\":5}}],[\"集合名\",{\"1\":{\"10239\":1,\"10246\":1,\"10276\":1,\"10306\":1,\"10321\":2,\"10331\":1,\"10337\":1,\"10411\":1,\"10414\":1}}],[\"集合名不能以\",{\"1\":{\"10235\":1}}],[\"集合名不能含有\",{\"1\":{\"10234\":1}}],[\"集合名不能是空字符串\",{\"1\":{\"10233\":1}}],[\"集合操作\",{\"0\":{\"10225\":1}}],[\"集合将存放在\",{\"1\":{\"10218\":1}}],[\"集合讲的是数据\",{\"1\":{\"7552\":1}}],[\"集合接口或集合类在jdk5\",{\"1\":{\"5973\":1}}],[\"集合类的泛型\",{\"1\":{\"5972\":1}}],[\"集合类可以用于存储数量不等的多个对象\",{\"1\":{\"5536\":1}}],[\"集合也是泛型使用最多的场景\",{\"1\":{\"5948\":1}}],[\"集合容器类在设计阶段\",{\"1\":{\"5944\":1}}],[\"集合判断两个元素相等的标准\",{\"0\":{\"5704\":1}}],[\"集合元素可以是\",{\"1\":{\"5703\":1}}],[\"集合元素的类型\",{\"1\":{\"5610\":1,\"5611\":1}}],[\"集合时都使用这个实现类\",{\"1\":{\"5696\":1}}],[\"集合用来储存无序的的不相同的元素\",{\"1\":{\"5685\":1}}],[\"集合对象\",{\"1\":{\"5610\":1,\"5611\":1}}],[\"集合对象每次调用iterator\",{\"1\":{\"5577\":1}}],[\"集合可以记住容器中对象的数据类型\",{\"1\":{\"5558\":1}}],[\"集合可分为\",{\"1\":{\"5542\":1}}],[\"集合框架的体系\",{\"0\":{\"5541\":1}}],[\"集合框架\",{\"0\":{\"5540\":1}}],[\"集合出现的目的\",{\"1\":{\"5539\":1}}],[\"集合都解决了\",{\"1\":{\"5535\":1}}],[\"集合都是可以指定泛型的\",{\"1\":{\"2527\":1}}],[\"集合就像一种容器\",{\"1\":{\"5521\":1}}],[\"集合的隐式创建\",{\"1\":{\"10245\":1}}],[\"集合的命名规范\",{\"1\":{\"10232\":1}}],[\"集合的元素需要实现comparable接口\",{\"1\":{\"7669\":1}}],[\"集合的区别\",{\"0\":{\"7551\":1}}],[\"集合的使用场景\",{\"0\":{\"5537\":1}}],[\"集合的特点\",{\"0\":{\"5532\":1}}],[\"集合的由来\",{\"0\":{\"5520\":1}}],[\"集合的索引\",{\"1\":{\"2535\":1,\"2542\":1}}],[\"集合概述\",{\"0\":{\"5518\":1,\"5519\":1}}],[\"集合里添加了一些根据索引来操作集合元素的方法\",{\"1\":{\"2523\":1,\"5680\":1}}],[\"集合复制\",{\"1\":{\"2510\":1}}],[\"集合中使用泛型\",{\"0\":{\"5965\":1}}],[\"集合中元素的顺序不影响比对结果\",{\"1\":{\"2614\":1}}],[\"集合中的每个元素\",{\"1\":{\"7645\":1}}],[\"集合中的每个元素都有其对应的顺序索引\",{\"1\":{\"5626\":1}}],[\"集合中的泛型\",{\"0\":{\"5956\":1}}],[\"集合中的元素都是同一类型\",{\"1\":{\"6083\":1}}],[\"集合中的元素\",{\"1\":{\"5570\":1,\"5573\":1}}],[\"集合中的\",{\"1\":{\"2494\":1}}],[\"集合中是否包含某个元素\",{\"1\":{\"2418\":1}}],[\"集合变为空集合\",{\"1\":{\"2412\":1}}],[\"集合coll2依然还在\",{\"1\":{\"2407\":1}}],[\"集合\",{\"0\":{\"10885\":1},\"1\":{\"1762\":1,\"5522\":1,\"5546\":1,\"5556\":2,\"5687\":1,\"7550\":1,\"7556\":1,\"7646\":1,\"10059\":1,\"10226\":1,\"10346\":1,\"10377\":1,\"10385\":1,\"10652\":1}}],[\"集成数据层\",{\"0\":{\"10878\":1}}],[\"集成mysql\",{\"1\":{\"1184\":1}}],[\"集成mybatisplus\",{\"1\":{\"1185\":1}}],[\"集成mybatis\",{\"0\":{\"973\":1,\"1000\":1}}],[\"集成\",{\"0\":{\"649\":1}}],[\"集成其他技术\",{\"0\":{\"1052\":1},\"1\":{\"94\":1}}],[\"集成data\",{\"1\":{\"86\":1}}],[\"本章内容\",{\"1\":{\"7786\":1}}],[\"本身扩展性很好\",{\"1\":{\"9835\":1}}],[\"本身也是个xml文档\",{\"1\":{\"9639\":1}}],[\"本身毫无意义\",{\"1\":{\"7409\":1}}],[\"本身并不提供承装对象的能力\",{\"1\":{\"5576\":1}}],[\"本机ip\",{\"0\":{\"6673\":1}}],[\"本质上是一个分布式数据库\",{\"1\":{\"9840\":1}}],[\"本质上web服务器是一个应用程序\",{\"1\":{\"8397\":1}}],[\"本质上就是lambda表达式\",{\"1\":{\"7442\":1}}],[\"本质\",{\"1\":{\"8167\":1,\"9624\":1}}],[\"本质还是上面的语法总结\",{\"1\":{\"7369\":1}}],[\"本质还是比较的基本数据类型\",{\"1\":{\"1732\":1}}],[\"本质是查询的是\",{\"1\":{\"10537\":1}}],[\"本质是安装了服务器软件的计算机\",{\"1\":{\"8395\":1}}],[\"本质是个常量\",{\"0\":{\"4926\":1}}],[\"本质是一套java书写规范\",{\"1\":{\"4571\":1}}],[\"本质就是一个文件夹\",{\"1\":{\"3918\":1}}],[\"本层循环\",{\"1\":{\"3442\":1}}],[\"本次循环\",{\"1\":{\"3442\":1}}],[\"本次案例仅考虑浏览器向服务器发送请求接受响应\",{\"1\":{\"1197\":1}}],[\"本项目\",{\"1\":{\"1383\":1}}],[\"本地ip肯定是不行的\",{\"1\":{\"10594\":1}}],[\"本地端口必须在\",{\"1\":{\"6847\":1}}],[\"本地回环地址\",{\"1\":{\"6674\":1}}],[\"本地格式\",{\"0\":{\"1708\":1}}],[\"本地日期和时间\",{\"1\":{\"1644\":1}}],[\"本地日期\",{\"1\":{\"1638\":1}}],[\"本地日期时间\",{\"1\":{\"1623\":1}}],[\"本地时间\",{\"0\":{\"1632\":1},\"1\":{\"1623\":1,\"1641\":1}}],[\"本地\",{\"1\":{\"749\":1,\"9633\":1}}],[\"本操作可以在idea环境下执行\",{\"1\":{\"692\":1}}],[\"本人都经过验证了\",{\"1\":{\"262\":1,\"271\":1}}],[\"本笔记是以6\",{\"1\":{\"261\":1,\"270\":1}}],[\"翻译很烂\",{\"1\":{\"258\":1,\"267\":1}}],[\"中默认的数据库为\",{\"1\":{\"10218\":1}}],[\"中取出一个\",{\"1\":{\"8227\":1}}],[\"中建立数据库连接\",{\"1\":{\"8215\":1}}],[\"中处理集合的关键抽象概念\",{\"1\":{\"7544\":1}}],[\"中选择目标模块\",{\"1\":{\"7326\":1}}],[\"中只会有一个class实例\",{\"1\":{\"6976\":1}}],[\"中有关网络方面的功能都定义在\",{\"1\":{\"6917\":1}}],[\"中实现了类\",{\"1\":{\"6874\":1}}],[\"中国的中文编码表升级\",{\"1\":{\"6419\":1}}],[\"中国的中文编码表\",{\"1\":{\"6418\":1}}],[\"中添加的数据\",{\"1\":{\"5748\":1}}],[\"中严格区分大小写\",{\"1\":{\"3063\":1}}],[\"中使用\",{\"1\":{\"3013\":1}}],[\"中正则表达式中则需要有两个反斜杠才能被解析为其他语言中的转义作用\",{\"1\":{\"2671\":1}}],[\"中\",{\"1\":{\"2670\":1,\"5180\":1,\"5282\":1,\"5480\":1,\"5486\":1,\"6154\":1,\"6594\":1,\"7279\":1,\"8745\":1,\"9119\":1,\"9231\":1}}],[\"中元素的顺序\",{\"1\":{\"2483\":1}}],[\"中提供了一系列静态的方法对集合元素进行排序\",{\"1\":{\"2474\":1,\"5936\":1}}],[\"中包含了所有关于本地日期\",{\"1\":{\"1623\":1}}],[\"中间操作不会执行任何的处理\",{\"1\":{\"7598\":1}}],[\"中间操作不会再被使用\",{\"1\":{\"7558\":1}}],[\"中间操作说明\",{\"0\":{\"7597\":1}}],[\"中间操作\",{\"1\":{\"7557\":1}}],[\"中间创建接口实体类的过程\",{\"1\":{\"983\":1}}],[\"中间件\",{\"1\":{\"24\":1}}],[\"中创建\",{\"1\":{\"949\":1}}],[\"中括号可选\",{\"1\":{\"939\":1}}],[\"中的表现层\",{\"1\":{\"9579\":1}}],[\"中的元素\",{\"1\":{\"7646\":1}}],[\"中的方法将各类数据写入文件\",{\"1\":{\"6483\":1}}],[\"中的语句执行时\",{\"1\":{\"4767\":1}}],[\"中的语句将不会执行\",{\"1\":{\"4732\":1}}],[\"中的\",{\"0\":{\"387\":1},\"1\":{\"5799\":1,\"5800\":1,\"9579\":3}}],[\"中文文档\",{\"1\":{\"258\":1,\"267\":1}}],[\"54\",{\"1\":{\"10554\":7}}],[\"54410\",{\"1\":{\"10167\":1}}],[\"58\",{\"1\":{\"10264\":1,\"10290\":1}}],[\"5下载地址直达\",{\"1\":{\"8424\":1}}],[\"593z\",{\"1\":{\"10554\":1}}],[\"59\",{\"1\":{\"6703\":3}}],[\"5改写了集合框架中的全部接口和类\",{\"1\":{\"5948\":1}}],[\"5以上\",{\"1\":{\"8423\":1}}],[\"5以上都是基于注解的\",{\"1\":{\"4887\":1}}],[\"5以后\",{\"1\":{\"5947\":1}}],[\"5之后使用泛型来解决\",{\"1\":{\"5944\":1}}],[\"5之前只能把元素类型设计为object\",{\"1\":{\"5944\":1}}],[\"5之前创建新执行线程有两种方法\",{\"1\":{\"5143\":1}}],[\"5之前\",{\"1\":{\"4829\":1}}],[\"5倍\",{\"1\":{\"5652\":1}}],[\"5新增\",{\"1\":{\"4830\":1}}],[\"5<a\",{\"1\":{\"3282\":1}}],[\"5<a<=20\",{\"1\":{\"3282\":1}}],[\"5个字符\",{\"1\":{\"2055\":1,\"6262\":1}}],[\"5舍6入\",{\"1\":{\"1925\":1}}],[\"55\",{\"1\":{\"4256\":1,\"7712\":1}}],[\"5555\",{\"1\":{\"1907\":1}}],[\"556\",{\"1\":{\"1657\":7}}],[\"532\",{\"1\":{\"1705\":1,\"1707\":2}}],[\"53\",{\"1\":{\"1705\":1,\"1707\":2}}],[\"5111\",{\"1\":{\"1814\":1}}],[\"51\",{\"1\":{\"1673\":1,\"10264\":1,\"10290\":1}}],[\"512e2\",{\"1\":{\"3091\":1}}],[\"512\",{\"1\":{\"1340\":1,\"3090\":2}}],[\"522z\",{\"1\":{\"10264\":1}}],[\"52\",{\"1\":{\"1660\":3}}],[\"562z\",{\"1\":{\"1673\":1}}],[\"56\",{\"1\":{\"1657\":7,\"1676\":2,\"1886\":1,\"1889\":1,\"1892\":1,\"1907\":1}}],[\"5ms\",{\"1\":{\"1564\":1}}],[\"5已取消\",{\"1\":{\"1352\":1}}],[\"509证书\",{\"0\":{\"10767\":1},\"1\":{\"10762\":1}}],[\"502z\",{\"1\":{\"1682\":1}}],[\"5000\",{\"1\":{\"6571\":1}}],[\"500\",{\"1\":{\"1344\":1,\"1346\":1,\"8121\":1,\"8126\":1}}],[\"50\",{\"1\":{\"952\":3,\"1346\":1,\"1348\":1,\"1350\":2,\"1352\":1,\"1354\":2,\"4039\":1,\"4164\":2,\"5253\":1,\"5970\":1,\"6460\":1}}],[\"5level\",{\"1\":{\"952\":4}}],[\"5版本为基础的\",{\"1\":{\"261\":1,\"270\":1}}],[\"5\",{\"0\":{\"341\":1,\"342\":1,\"348\":1,\"351\":1,\"380\":1,\"403\":1,\"473\":1,\"476\":1,\"566\":1,\"568\":1,\"575\":1,\"615\":1,\"619\":1,\"622\":1,\"666\":1,\"715\":1,\"716\":1,\"727\":1,\"733\":1,\"735\":1,\"782\":1,\"956\":1,\"1039\":1,\"1041\":1,\"1044\":1,\"1052\":1,\"1081\":1,\"1096\":1,\"1242\":1,\"1244\":1,\"1247\":1,\"1249\":1,\"1253\":1,\"1341\":1,\"1456\":1,\"1476\":1,\"1553\":1,\"1554\":1,\"1557\":1,\"1560\":1,\"1596\":1,\"1630\":1,\"1655\":1,\"1720\":1,\"1724\":1,\"1726\":1,\"1766\":1,\"1768\":1,\"1770\":1,\"1772\":1,\"1792\":1,\"1812\":1,\"1860\":1,\"1900\":1,\"1960\":1,\"1990\":1,\"2110\":1,\"2154\":1,\"2195\":1,\"2240\":1,\"2270\":1,\"2376\":1,\"2414\":1,\"2496\":1,\"2553\":1,\"2599\":1,\"2625\":1,\"2751\":1,\"2826\":1,\"2914\":1,\"2915\":1,\"2917\":1,\"2921\":1,\"2984\":1,\"3014\":1,\"3071\":1,\"3083\":1,\"3099\":1,\"3134\":1,\"3174\":1,\"3228\":1,\"3229\":1,\"3233\":1,\"3235\":1,\"3443\":1,\"3475\":1,\"3510\":1,\"3568\":1,\"3631\":1,\"3744\":1,\"3872\":1,\"3888\":1,\"3909\":1,\"3932\":1,\"3958\":1,\"3991\":1,\"4022\":1,\"4143\":1,\"4144\":1,\"4146\":1,\"4149\":1,\"4151\":1,\"4190\":1,\"4191\":1,\"4193\":1,\"4197\":1,\"4246\":1,\"4278\":1,\"4327\":1,\"4330\":1,\"4334\":1,\"4337\":1,\"4401\":1,\"4433\":1,\"4460\":1,\"4464\":1,\"4467\":1,\"4497\":1,\"4620\":1,\"4678\":1,\"4719\":1,\"4739\":1,\"4781\":1,\"4836\":1,\"4841\":1,\"4844\":1,\"4866\":1,\"4939\":1,\"5003\":1,\"5061\":1,\"5089\":1,\"5130\":1,\"5138\":1,\"5251\":1,\"5284\":1,\"5295\":1,\"5309\":1,\"5373\":1,\"5397\":1,\"5404\":2,\"5425\":1,\"5427\":1,\"5431\":1,\"5433\":1,\"5456\":1,\"5465\":1,\"5511\":1,\"5537\":1,\"5587\":1,\"5589\":1,\"5591\":1,\"5593\":1,\"5657\":1,\"5682\":1,\"5712\":1,\"5838\":1,\"5844\":1,\"5869\":1,\"5962\":1,\"6043\":1,\"6095\":1,\"6097\":1,\"6099\":1,\"6101\":1,\"6126\":1,\"6127\":1,\"6133\":1,\"6137\":1,\"6171\":1,\"6211\":1,\"6288\":1,\"6307\":1,\"6354\":1,\"6429\":1,\"6484\":1,\"6517\":1,\"6522\":1,\"6525\":1,\"6558\":1,\"6610\":1,\"6658\":1,\"6679\":1,\"6709\":1,\"6743\":1,\"6784\":1,\"6810\":1,\"6811\":1,\"6815\":1,\"6818\":1,\"6893\":1,\"6897\":1,\"6900\":1,\"6945\":1,\"6947\":1,\"6950\":1,\"6981\":1,\"7140\":1,\"7190\":1,\"7298\":1,\"7299\":1,\"7302\":1,\"7305\":1,\"7325\":1,\"7357\":1,\"7387\":1,\"7422\":1,\"7491\":1,\"7494\":1,\"7496\":1,\"7521\":1,\"7524\":1,\"7526\":1,\"7538\":1,\"7559\":1,\"7686\":1,\"7779\":1,\"7811\":1,\"7831\":1,\"7866\":1,\"7868\":1,\"7872\":1,\"7874\":1,\"7897\":1,\"7948\":1,\"7949\":1,\"7953\":1,\"8020\":1,\"8083\":1,\"8090\":1,\"8114\":1,\"8117\":1,\"8120\":1,\"8241\":1,\"8322\":1,\"8348\":1,\"8388\":1,\"8415\":1,\"8436\":1,\"8606\":1,\"8609\":1,\"8612\":1,\"8615\":1,\"8683\":1,\"8711\":1,\"8782\":1,\"8800\":1,\"8803\":1,\"8807\":1,\"8863\":1,\"8868\":1,\"9052\":1,\"9086\":1,\"9125\":1,\"9154\":1,\"9204\":1,\"9238\":1,\"9241\":1,\"9245\":1,\"9309\":1,\"9377\":1,\"9478\":1,\"9609\":1,\"9668\":1,\"9711\":1,\"9761\":1,\"9806\":1,\"9841\":1,\"9896\":1,\"10165\":1,\"10223\":1,\"10240\":1,\"10430\":1,\"10449\":1,\"10451\":1,\"10454\":1,\"10459\":1,\"10664\":1,\"10729\":1,\"10779\":1,\"10856\":1,\"10884\":1,\"10890\":1},\"1\":{\"256\":1,\"265\":1,\"344\":1,\"734\":1,\"1005\":1,\"1080\":1,\"1148\":1,\"1151\":1,\"1172\":1,\"1177\":1,\"1239\":1,\"1241\":1,\"1480\":1,\"1581\":1,\"1773\":1,\"1813\":2,\"1925\":1,\"2048\":1,\"2054\":1,\"2105\":1,\"2362\":2,\"2365\":2,\"2370\":1,\"2375\":3,\"2379\":2,\"2387\":1,\"2492\":4,\"2495\":3,\"2500\":1,\"2505\":1,\"2508\":3,\"2993\":1,\"3077\":1,\"3090\":1,\"3091\":1,\"3094\":1,\"3104\":1,\"3152\":1,\"3253\":1,\"3270\":2,\"3315\":1,\"3319\":1,\"3322\":1,\"3374\":1,\"3453\":1,\"3512\":1,\"3588\":2,\"4843\":1,\"5084\":1,\"5178\":1,\"5193\":1,\"5221\":1,\"5235\":1,\"5244\":1,\"5253\":1,\"5263\":1,\"5294\":1,\"5305\":1,\"5356\":1,\"5378\":1,\"5486\":1,\"5558\":1,\"5607\":1,\"5614\":1,\"5746\":1,\"5970\":1,\"6185\":1,\"6254\":1,\"6262\":1,\"6287\":1,\"6313\":1,\"6787\":1,\"6819\":1,\"7106\":1,\"7303\":1,\"7535\":1,\"7555\":1,\"7575\":1,\"7612\":1,\"7628\":1,\"7708\":1,\"7712\":1,\"7727\":1,\"7728\":2,\"7970\":1,\"7980\":1,\"7989\":1,\"8037\":1,\"8045\":1,\"8054\":1,\"8089\":1,\"8148\":1,\"8162\":1,\"8201\":1,\"8205\":1,\"8207\":1,\"8210\":1,\"8544\":1,\"8605\":1,\"8717\":1,\"8874\":1,\"8905\":1,\"8920\":1,\"9018\":1,\"9811\":1,\"10125\":1,\"10149\":1,\"10157\":1,\"10162\":2,\"10434\":1,\"10483\":1,\"10711\":1}}],[\"0+\",{\"1\":{\"10288\":1}}],[\"0字符\",{\"1\":{\"10234\":1}}],[\"05t23\",{\"1\":{\"10264\":1,\"10290\":1}}],[\"05t22\",{\"1\":{\"10264\":1}}],[\"05t21\",{\"1\":{\"9895\":1}}],[\"05s～1s的时间\",{\"1\":{\"8219\":1}}],[\"0p\",{\"1\":{\"9895\":1}}],[\"0或正整数\",{\"1\":{\"8752\":1}}],[\"03\",{\"1\":{\"6359\":1}}],[\"0时都修改为带泛型的结构\",{\"1\":{\"5973\":1}}],[\"0开始\",{\"1\":{\"5378\":1}}],[\"0~65536\",{\"1\":{\"8411\":1}}],[\"0~65535\",{\"1\":{\"6680\":1}}],[\"0~3\",{\"1\":{\"7087\":1}}],[\"0~1023\",{\"1\":{\"6683\":1}}],[\"0~n\",{\"1\":{\"5189\":1,\"5218\":1}}],[\"0~255\",{\"1\":{\"2102\":1}}],[\"0后新增了一种\",{\"1\":{\"5146\":1}}],[\"0提供了4个标准的meta\",{\"1\":{\"4971\":1}}],[\"0提供了注解\",{\"1\":{\"4897\":1}}],[\"0作为了被除数\",{\"1\":{\"4722\":1}}],[\"0及之前\",{\"1\":{\"4472\":1}}],[\"0个\",{\"1\":{\"3795\":1}}],[\"0以前的写法\",{\"1\":{\"3793\":1}}],[\"0以上时\",{\"1\":{\"998\":1}}],[\"0新增\",{\"1\":{\"3367\":2}}],[\"0新增的一种方式\",{\"1\":{\"5467\":1}}],[\"0新增的\",{\"1\":{\"1552\":1}}],[\"0类型转换成了double\",{\"1\":{\"3253\":1}}],[\"0互换\",{\"1\":{\"3189\":1}}],[\"0表示整数\",{\"1\":{\"3185\":1}}],[\"0f\",{\"1\":{\"3090\":1}}],[\"0xffff\",{\"1\":{\"2040\":1}}],[\"0x00\",{\"1\":{\"2040\":1}}],[\"07\",{\"1\":{\"1660\":1}}],[\"04\",{\"1\":{\"1657\":1,\"1725\":1,\"1727\":1,\"10554\":11,\"10576\":6,\"10583\":2}}],[\"09t02\",{\"1\":{\"1682\":1}}],[\"09t03\",{\"1\":{\"1657\":1}}],[\"09t10\",{\"1\":{\"1673\":1,\"1676\":1}}],[\"09t18\",{\"1\":{\"1657\":6,\"1660\":2,\"1676\":1}}],[\"09t17\",{\"1\":{\"1648\":1}}],[\"09\",{\"1\":{\"1648\":1,\"1657\":1,\"1725\":1,\"1727\":1,\"8084\":1,\"8381\":1,\"10576\":6}}],[\"06\",{\"1\":{\"1648\":2,\"1657\":6,\"1660\":2,\"1673\":1,\"1676\":2,\"1682\":1,\"1705\":1,\"1707\":2,\"1725\":1,\"1727\":1,\"9895\":1,\"10554\":4}}],[\"0中包含了一个java\",{\"1\":{\"1616\":1}}],[\"08\",{\"1\":{\"734\":2,\"4256\":1,\"7716\":1,\"8084\":1,\"8381\":1,\"10264\":3,\"10290\":1}}],[\"000z\",{\"1\":{\"10554\":2,\"10576\":2}}],[\"0001\",{\"1\":{\"3192\":3,\"9645\":1}}],[\"00000000000000000000000000\",{\"1\":{\"10660\":1}}],[\"0000000000000000000000000000\",{\"1\":{\"10657\":1}}],[\"000000000000000000000000000000\",{\"1\":{\"10580\":1}}],[\"0000000000000000000000000000000000000000\",{\"1\":{\"10554\":1,\"10573\":1}}],[\"000000333\",{\"1\":{\"1657\":1}}],[\"0000\",{\"1\":{\"3192\":6,\"3311\":13}}],[\"00也可以解决这个问题\",{\"1\":{\"996\":1}}],[\"00\",{\"1\":{\"486\":1,\"1676\":1,\"3457\":6,\"4256\":1}}],[\"02\",{\"1\":{\"486\":3,\"1719\":1,\"5060\":1}}],[\"0110\",{\"1\":{\"3311\":2}}],[\"0111\",{\"1\":{\"486\":1}}],[\"01\",{\"1\":{\"1673\":1,\"1682\":1,\"1886\":1,\"3457\":4,\"5060\":1,\"6359\":1,\"7956\":2,\"7970\":2}}],[\"0100\",{\"1\":{\"486\":1}}],[\"0b1010\",{\"1\":{\"486\":1}}],[\"0<\",{\"1\":{\"397\":1,\"1164\":1,\"1172\":1,\"1177\":1}}],[\"0左右\",{\"1\":{\"260\":1,\"269\":1}}],[\"0\",{\"1\":{\"256\":1,\"261\":1,\"265\":1,\"270\":1,\"321\":2,\"508\":1,\"620\":4,\"628\":1,\"734\":8,\"781\":1,\"952\":1,\"1142\":1,\"1164\":1,\"1177\":2,\"1265\":3,\"1334\":1,\"1336\":1,\"1338\":3,\"1340\":2,\"1342\":2,\"1344\":1,\"1346\":2,\"1348\":4,\"1446\":1,\"1556\":1,\"1559\":1,\"1581\":2,\"1589\":1,\"1763\":2,\"1769\":1,\"1773\":1,\"1802\":5,\"1805\":1,\"1813\":1,\"1820\":1,\"1823\":3,\"1825\":1,\"1832\":1,\"1850\":1,\"1862\":1,\"1910\":1,\"1928\":1,\"1937\":3,\"2039\":1,\"2040\":1,\"2048\":1,\"2103\":1,\"2221\":1,\"2259\":1,\"2272\":1,\"2314\":3,\"2365\":1,\"2515\":2,\"2518\":1,\"2549\":1,\"2563\":1,\"2566\":1,\"2569\":1,\"2858\":1,\"2937\":1,\"2959\":1,\"2962\":4,\"3060\":1,\"3144\":1,\"3162\":1,\"3191\":1,\"3253\":2,\"3273\":2,\"3393\":3,\"3405\":1,\"3409\":1,\"3414\":4,\"3420\":3,\"3444\":1,\"3457\":2,\"3496\":1,\"3505\":1,\"3537\":1,\"3538\":2,\"3544\":1,\"3556\":2,\"3560\":4,\"3563\":3,\"3567\":1,\"3570\":2,\"3591\":4,\"3695\":1,\"3696\":2,\"3697\":1,\"3754\":1,\"3803\":1,\"4227\":1,\"4332\":2,\"4709\":1,\"4722\":1,\"4803\":1,\"4878\":1,\"4943\":2,\"5185\":4,\"5189\":1,\"5218\":1,\"5221\":2,\"5253\":2,\"5322\":1,\"5345\":1,\"5396\":1,\"5486\":1,\"5558\":1,\"5607\":1,\"5618\":2,\"5620\":1,\"5650\":1,\"5659\":1,\"5790\":1,\"6073\":1,\"6260\":1,\"6264\":1,\"6287\":1,\"6306\":1,\"6325\":2,\"6328\":2,\"6331\":3,\"6334\":3,\"6353\":2,\"6411\":1,\"6460\":2,\"6516\":1,\"6666\":1,\"6672\":2,\"6674\":2,\"6803\":2,\"6819\":1,\"6840\":3,\"6843\":1,\"6847\":5,\"6949\":2,\"7087\":1,\"7088\":1,\"7106\":4,\"7120\":2,\"7137\":1,\"7590\":1,\"7670\":2,\"7708\":1,\"7824\":1,\"7832\":1,\"7989\":1,\"8045\":2,\"8054\":2,\"8089\":1,\"8121\":1,\"8126\":1,\"8146\":1,\"8148\":1,\"8201\":8,\"8280\":1,\"8629\":1,\"8944\":7,\"9095\":2,\"9500\":1,\"9608\":1,\"9611\":1,\"9613\":1,\"9635\":1,\"9642\":3,\"9722\":1,\"9895\":4,\"10125\":1,\"10149\":1,\"10157\":1,\"10162\":3,\"10215\":1,\"10271\":1,\"10288\":1,\"10333\":1,\"10432\":1,\"10483\":1,\"10496\":1,\"10526\":1,\"10541\":4,\"10545\":1,\"10554\":4,\"10573\":3,\"10576\":4,\"10580\":2,\"10583\":1,\"10597\":1,\"10626\":1,\"10657\":2,\"10660\":2}}],[\"699z\",{\"1\":{\"10576\":2}}],[\"62<\",{\"1\":{\"9818\":1}}],[\"600\",{\"1\":{\"10615\":1}}],[\"6000\",{\"1\":{\"7723\":2}}],[\"60\",{\"1\":{\"9774\":3}}],[\"61\",{\"1\":{\"6703\":3}}],[\"6的源码\",{\"1\":{\"3311\":1}}],[\"6的补码\",{\"1\":{\"3310\":1}}],[\"6的反码\",{\"1\":{\"3310\":1,\"3311\":1}}],[\"65kb\",{\"1\":{\"8070\":1}}],[\"65\",{\"1\":{\"3241\":1,\"4227\":1,\"7670\":2,\"10583\":1}}],[\"65535\",{\"1\":{\"2040\":1,\"2093\":1,\"6847\":1}}],[\"677327b6\",{\"1\":{\"2168\":1,\"2354\":1,\"2375\":1}}],[\"63\",{\"1\":{\"1866\":1}}],[\"6379\",{\"1\":{\"1021\":1,\"1048\":1,\"1051\":1}}],[\"66\",{\"1\":{\"1502\":1,\"1506\":1}}],[\"683z\",{\"1\":{\"10554\":1}}],[\"680z\",{\"1\":{\"10554\":5}}],[\"68\",{\"1\":{\"1502\":2,\"1506\":1}}],[\"64487fe22c64c9d9921960f8\",{\"1\":{\"10603\":1}}],[\"6447e68241b3272f43080f4d\",{\"1\":{\"10541\":1}}],[\"6432843354a1d1820aa07159\",{\"1\":{\"10252\":1}}],[\"64时\",{\"1\":{\"5881\":1}}],[\"64\",{\"1\":{\"1334\":1,\"1336\":1,\"1338\":2,\"1340\":1,\"1344\":1,\"1502\":1}}],[\"6<\",{\"1\":{\"397\":1,\"967\":1,\"1361\":1}}],[\"6\",{\"0\":{\"353\":1,\"578\":1,\"580\":1,\"582\":1,\"743\":1,\"1049\":1,\"1055\":1,\"1257\":1,\"1262\":1,\"1264\":1,\"1266\":1,\"1269\":1,\"1343\":1,\"1562\":1,\"1602\":1,\"1658\":1,\"1815\":1,\"1908\":1,\"1938\":1,\"1964\":1,\"2157\":1,\"2198\":1,\"2245\":1,\"2273\":1,\"2380\":1,\"2417\":1,\"2501\":1,\"2556\":1,\"2602\":1,\"2659\":1,\"2757\":1,\"2828\":1,\"2829\":1,\"2832\":1,\"3018\":1,\"3020\":1,\"3038\":1,\"3101\":1,\"3202\":1,\"3238\":1,\"3481\":1,\"3482\":1,\"3485\":1,\"3513\":1,\"3571\":1,\"3637\":1,\"3748\":1,\"3875\":1,\"3962\":1,\"3997\":1,\"4026\":1,\"4027\":1,\"4034\":1,\"4037\":1,\"4155\":1,\"4282\":1,\"4344\":1,\"4404\":1,\"4506\":1,\"4721\":1,\"4744\":1,\"4747\":1,\"4752\":1,\"4784\":1,\"4869\":1,\"4870\":1,\"4873\":1,\"5093\":1,\"5133\":1,\"5402\":1,\"5433\":1,\"5462\":1,\"5516\":1,\"5518\":1,\"5554\":1,\"5565\":1,\"5596\":1,\"5621\":1,\"5661\":1,\"5682\":1,\"5720\":1,\"5795\":2,\"5928\":1,\"6046\":1,\"6140\":1,\"6179\":1,\"6180\":1,\"6183\":1,\"6214\":1,\"6356\":1,\"6361\":1,\"6431\":1,\"6527\":1,\"6567\":1,\"6568\":1,\"6570\":1,\"6572\":1,\"6614\":1,\"6682\":1,\"6749\":1,\"6820\":1,\"6825\":1,\"6908\":1,\"6954\":1,\"6955\":1,\"6957\":1,\"6959\":1,\"6961\":1,\"6990\":1,\"6992\":1,\"6995\":1,\"6998\":1,\"7001\":1,\"7142\":1,\"7327\":1,\"7359\":1,\"7391\":1,\"7689\":1,\"7729\":1,\"7780\":1,\"7902\":1,\"7957\":1,\"8028\":1,\"8087\":1,\"8122\":1,\"8127\":1,\"8325\":1,\"8367\":1,\"8390\":1,\"8440\":1,\"8813\":1,\"8815\":1,\"8821\":1,\"8923\":1,\"9206\":1,\"9250\":1,\"9252\":1,\"9256\":1,\"9261\":1,\"9396\":1,\"9465\":1,\"9480\":1,\"9535\":1,\"9586\":1,\"9646\":1,\"9715\":1,\"9769\":1,\"9806\":1,\"10303\":1,\"10465\":1,\"10672\":1,\"10731\":1,\"10885\":1,\"10891\":1},\"1\":{\"256\":1,\"265\":1,\"486\":1,\"1115\":1,\"1589\":1,\"1595\":1,\"1654\":1,\"1928\":2,\"2370\":1,\"2492\":4,\"2495\":3,\"2500\":2,\"2505\":1,\"3227\":1,\"3234\":1,\"3310\":1,\"3311\":1,\"3504\":1,\"4106\":1,\"5486\":1,\"5551\":1,\"5553\":1,\"5597\":1,\"5614\":1,\"5746\":1,\"5871\":2,\"5873\":2,\"5970\":1,\"6365\":1,\"6424\":1,\"6430\":1,\"6432\":1,\"7106\":1,\"7312\":2,\"7708\":1,\"7712\":1,\"7970\":1,\"8045\":1,\"8054\":6,\"8148\":1,\"8205\":1,\"8207\":1,\"8210\":1,\"8555\":1,\"8928\":1,\"8976\":1,\"9012\":1,\"9015\":1,\"9018\":1,\"9038\":2,\"9508\":1,\"9549\":1,\"9562\":1,\"9575\":1,\"9578\":1,\"9659\":1,\"9811\":1,\"9895\":1,\"10125\":1,\"10149\":1,\"10157\":1,\"10162\":2,\"10288\":1,\"10483\":1}}],[\"这返回true\",{\"1\":{\"10238\":1}}],[\"这非常危险\",{\"1\":{\"10187\":1}}],[\"这多个请求可能来自多个浏览器\",{\"1\":{\"9662\":1}}],[\"这行是固定格式\",{\"1\":{\"9645\":1}}],[\"这两款都是基于\",{\"1\":{\"9838\":1}}],[\"这两种方式获取的是同一个对象\",{\"1\":{\"9219\":1}}],[\"这两个技术都可以实现会话跟踪\",{\"1\":{\"9670\":1}}],[\"这两个对象都是servlet接口中\",{\"1\":{\"8872\":1}}],[\"这两个流都是用来操作文本文件的\",{\"1\":{\"6376\":1}}],[\"这整个过程就叫重定向\",{\"1\":{\"9136\":1}}],[\"这只是基本的处理过程\",{\"1\":{\"8875\":1}}],[\"这只是构造方法之一\",{\"1\":{\"2325\":1,\"2782\":1}}],[\"这意味着他们会等到需要结果的时候才执行\",{\"1\":{\"7562\":1}}],[\"这套api的操作跟sql里的操作类似\",{\"1\":{\"7540\":1}}],[\"这造成了很大的麻烦\",{\"1\":{\"6062\":1}}],[\"这表明该list只能保存字符串类型的对象\",{\"1\":{\"5947\":1}}],[\"这比较a与元素b的hash值\",{\"1\":{\"5735\":1}}],[\"这使得元素看起来是以插入顺序保存的记录了一个双向链表\",{\"1\":{\"5775\":1}}],[\"这使得元素看起来是以插入顺序保存的\",{\"1\":{\"5711\":1}}],[\"这三个方法只有在synchronized方法或synchronized代码块中才能使用\",{\"1\":{\"5437\":1}}],[\"这三个遍历是并列的\",{\"1\":{\"5192\":1}}],[\"这三个类无法直接new实例化\",{\"1\":{\"1647\":1}}],[\"这三个类类似于calendar\",{\"1\":{\"1634\":1}}],[\"这说明\",{\"1\":{\"5192\":1}}],[\"这条线程被称为主线程或\",{\"1\":{\"5081\":1}}],[\"这会简化标注在方法参数上的注解\",{\"1\":{\"5008\":1}}],[\"这几个方法是递进关系执行的\",{\"1\":{\"4786\":1}}],[\"这不是强制性的重写\",{\"1\":{\"4543\":1}}],[\"这称为\",{\"1\":{\"4157\":1,\"4158\":1}}],[\"这也就意味着\",{\"1\":{\"9525\":1}}],[\"这也就是为什么表示一位数字的正则表达式是\",{\"1\":{\"2671\":1}}],[\"这也是为什么框架中会大量的使用反射\",{\"1\":{\"6946\":1}}],[\"这也是为什么set集合是无序的原因\",{\"1\":{\"5730\":1}}],[\"这也是为什么有观点认为private成员是无法继承的\",{\"1\":{\"4036\":1}}],[\"这也是为什么有观点认为private成员能继承\",{\"1\":{\"4036\":1}}],[\"这也意味着\",{\"1\":{\"5058\":1}}],[\"这点和c语言不同\",{\"1\":{\"3144\":1}}],[\"这跟fload表示数据的方式有关\",{\"1\":{\"3103\":1}}],[\"这时使用列名作为类的属性名就会报错\",{\"1\":{\"8049\":1}}],[\"这时将会有多个线程进来\",{\"1\":{\"5348\":1}}],[\"这时就产生了线程安全问题\",{\"1\":{\"5300\":1}}],[\"这时可以把不确定的部分暴露出去\",{\"1\":{\"4462\":1}}],[\"这时系统才会分配内存空间给对象\",{\"1\":{\"4364\":1}}],[\"这时需要将数据库对象传入getusers方法然后用数据库对象连接数据库进行操作\",{\"1\":{\"4139\":1}}],[\"这时候如果子类没有使用super显式的调用父类中的非空参构造器\",{\"1\":{\"4103\":1}}],[\"这时候更新下配置文件即可\",{\"1\":{\"805\":1}}],[\"这时上面的需求被实现了\",{\"1\":{\"3788\":1}}],[\"这时如果将数组中的字符全部取下来\",{\"1\":{\"2055\":1,\"6263\":1}}],[\"这时\",{\"1\":{\"1906\":1}}],[\"这时因为bigdecimal默认的舍入策略是精准模式\",{\"1\":{\"1894\":1}}],[\"这次要反向进行排序\",{\"1\":{\"1790\":1}}],[\"这其实也是实例化instant类的一种方式\",{\"1\":{\"1681\":1}}],[\"这可能被用来记录应用程序中的事件时间戳\",{\"1\":{\"1668\":1}}],[\"这是非常危险的\",{\"1\":{\"10636\":1}}],[\"这是无法正常连接的\",{\"1\":{\"10592\":1}}],[\"这是为系统集合保留的前缀\",{\"1\":{\"10235\":1}}],[\"这是为传输而设计的编码\",{\"1\":{\"6427\":1}}],[\"这是\",{\"1\":{\"10205\":1}}],[\"这是主要用途\",{\"1\":{\"9598\":1}}],[\"这是其他文件做不到的\",{\"1\":{\"9479\":1}}],[\"这是servlet的最核心方法\",{\"1\":{\"8770\":1}}],[\"这是因为某些系统生成的集合中包含该字符\",{\"1\":{\"10236\":1}}],[\"这是因为\",{\"1\":{\"6918\":1,\"7358\":1}}],[\"这是写编译器需要做的\",{\"1\":{\"5129\":1}}],[\"这是不符合常理且危险的\",{\"1\":{\"3818\":1}}],[\"这是jdk5\",{\"1\":{\"3793\":1}}],[\"这是一个最常用的类之一\",{\"1\":{\"1644\":1}}],[\"这是该怎么办呢\",{\"1\":{\"767\":1}}],[\"这种扫描全集合的查询效率是非常低的\",{\"1\":{\"10360\":1}}],[\"这种格式的优点是灵活性高\",{\"1\":{\"10082\":1}}],[\"这种方式是最佳的方案\",{\"1\":{\"9961\":1}}],[\"这种方式非常的低效\",{\"1\":{\"9958\":1}}],[\"这种方式可以省去定义太多成员变量\",{\"1\":{\"506\":1}}],[\"这种情况很常见\",{\"1\":{\"9000\":1}}],[\"这种开发不能控制被创建的连接对象数\",{\"1\":{\"8223\":1}}],[\"这种模式开发\",{\"0\":{\"8218\":1}}],[\"这种上锁的方式保证了线程的安全性\",{\"1\":{\"5355\":1}}],[\"这种对象过多\",{\"1\":{\"5134\":1}}],[\"这种将程序输入输出\",{\"1\":{\"4595\":1}}],[\"这种javabean用于实现业务逻辑\",{\"1\":{\"4582\":1}}],[\"这种javabean也被叫做实体类\",{\"1\":{\"4581\":1}}],[\"这种抽象类中只包含常量和方法的定义\",{\"1\":{\"4472\":1}}],[\"这种步骤中不确定\",{\"1\":{\"4469\":1}}],[\"这种观点认为\",{\"1\":{\"4031\":1}}],[\"这种写法是错误的\",{\"1\":{\"3282\":1}}],[\"这种排序被称为类的自然排序\",{\"1\":{\"1742\":1}}],[\"这种配置方式和我们现在学习的完全不一样\",{\"1\":{\"814\":1}}],[\"这一方装载并注册jdbc驱动程序\",{\"1\":{\"8347\":1}}],[\"这一类方法不仅能在connection\",{\"1\":{\"8341\":1}}],[\"这一类文件受开发者影响\",{\"1\":{\"540\":1}}],[\"这一项可配可不配\",{\"1\":{\"8278\":1}}],[\"这一机制允许多条语句一次性提交给数据库批量处理\",{\"1\":{\"8092\":1}}],[\"这一般是由于共享的日志文件一直处于打开状态\",{\"1\":{\"4435\":1}}],[\"这一段配置千万不能删除\",{\"1\":{\"702\":1}}],[\"这太麻烦了\",{\"1\":{\"673\":1}}],[\"这样外网是访问不到的\",{\"1\":{\"10639\":1}}],[\"这样遍历的索引结构效率低下\",{\"1\":{\"9927\":1}}],[\"这样依次从文档中去查找是否含有关键词的方法叫做正向索引\",{\"1\":{\"9921\":1}}],[\"这样他人在拿到我们提供的jar之后\",{\"1\":{\"9487\":1}}],[\"这样代码在编写的时候就相对来说更加简单快捷\",{\"1\":{\"8819\":1}}],[\"这样以后就不用输入项目目录\",{\"1\":{\"8589\":1}}],[\"这样的方式将会消耗大量的资源和时间\",{\"1\":{\"8220\":1}}],[\"这样的方法调用在编译期是无法确定的\",{\"1\":{\"4147\":1}}],[\"这样这些列仍然是只读的\",{\"1\":{\"8027\":1}}],[\"这样这两个注解就被关联起来了\",{\"1\":{\"5020\":1}}],[\"这样java程序的移植性更高\",{\"1\":{\"7806\":1}}],[\"这样就让文档转换为由单词序列构成的数据流\",{\"1\":{\"9994\":1}}],[\"这样就使得程序员无需对特定的数据库系统的特点有过多的了解\",{\"1\":{\"7800\":1}}],[\"这样就可以显示全世界上所有文化的字符了\",{\"1\":{\"6427\":1}}],[\"这样做可以检查它是否是一个函数式接口\",{\"1\":{\"7416\":1}}],[\"这样做spring容器中东西不用全部重新加载一遍\",{\"1\":{\"536\":1}}],[\"这样一来程序开发中必然产生过多的代理\",{\"1\":{\"7205\":1}}],[\"这样当前程序就可以读取网络资源数据\",{\"1\":{\"6919\":1}}],[\"这样不同的主机可以互相区分\",{\"1\":{\"6915\":1}}],[\"这样才能和主机建立连接\",{\"1\":{\"6677\":1}}],[\"这样才能转\",{\"1\":{\"4181\":1}}],[\"这样在实际使用时\",{\"1\":{\"5940\":1}}],[\"这样在后台就可以看见非常\",{\"1\":{\"925\":1}}],[\"这样什么类型的数据都支持\",{\"1\":{\"5940\":1}}],[\"这样\",{\"1\":{\"5728\":1,\"7215\":1,\"9479\":1}}],[\"这样两个进程相互无休止地等待下去\",{\"1\":{\"5416\":1}}],[\"这样很多其他代码都会受到牵连\",{\"1\":{\"4587\":1}}],[\"这样编译时才能加载子类\",{\"1\":{\"4180\":1}}],[\"这样造成了很大的冗余\",{\"1\":{\"4135\":1}}],[\"这样我们就可以向一个函数传递参数时\",{\"1\":{\"4130\":1}}],[\"这样是可以的\",{\"1\":{\"3990\":1}}],[\"这样计算机运算的设计就更简单了\",{\"1\":{\"3191\":1}}],[\"这样整体性能就大受影响\",{\"1\":{\"1042\":1}}],[\"这样配置sql语句会打印\",{\"1\":{\"952\":1}}],[\"这样测试类就再次有效了\",{\"1\":{\"668\":1}}],[\"这就意味着jar包是跨平台的\",{\"1\":{\"9476\":1}}],[\"这就不够灵活了\",{\"1\":{\"7399\":1}}],[\"这就形成了死锁\",{\"1\":{\"5430\":1}}],[\"这就使得线程间通信更简便\",{\"1\":{\"5080\":1}}],[\"这就是所谓的\",{\"1\":{\"7358\":1}}],[\"这就是编码表\",{\"1\":{\"6414\":1}}],[\"这就是异常的意义\",{\"1\":{\"4680\":1}}],[\"这就是一种模板模式\",{\"1\":{\"4463\":1}}],[\"这就是封装性的设计思想\",{\"1\":{\"3813\":1}}],[\"这就是多环境\",{\"1\":{\"817\":1}}],[\"这就是为什么这个jar包能独立运行的原因\",{\"1\":{\"741\":1}}],[\"这就完成了一次热部署的过程\",{\"1\":{\"546\":1}}],[\"这就需要额外设置一个程序\",{\"1\":{\"536\":1}}],[\"这类的配置文件\",{\"1\":{\"471\":1}}],[\"这个集合是隐藏的\",{\"1\":{\"10721\":1}}],[\"这个字符用来表示键的结尾\",{\"1\":{\"10271\":1}}],[\"这个字符表示集合名的结尾\",{\"1\":{\"10234\":1}}],[\"这个用户自动继承所有数据库的权限\",{\"1\":{\"10205\":1}}],[\"这个表格展示了更加复杂的倒排索引\",{\"1\":{\"10011\":1}}],[\"这个文件即被称之为倒排文件\",{\"1\":{\"9974\":1}}],[\"这个文件存放在spring\",{\"1\":{\"399\":1}}],[\"这个关键字\",{\"1\":{\"9952\":1}}],[\"这个技术栈能够安全可靠地获取任何来源\",{\"1\":{\"9832\":1}}],[\"这个过程类似于通过字典中的检索字表查字的过程\",{\"1\":{\"9866\":1}}],[\"这个过程就是会话跟踪\",{\"1\":{\"9664\":1}}],[\"这个过程将一直继续下去\",{\"1\":{\"4773\":1}}],[\"这个指令是用来结合css控制标签的样式的\",{\"1\":{\"9614\":1}}],[\"这个已经基本被json取代了\",{\"1\":{\"9599\":1}}],[\"这个包就会自动解压\",{\"1\":{\"9520\":1}}],[\"这个监听器就实现了servletcontextlistener接口\",{\"1\":{\"9442\":1}}],[\"这个规则\",{\"1\":{\"8677\":1}}],[\"这个逻辑性就是由java代码控制的\",{\"1\":{\"8675\":1}}],[\"这个版本开始\",{\"1\":{\"7312\":1}}],[\"这个增强逻辑\",{\"1\":{\"7247\":1}}],[\"这个加载的过程需要类加载器参与\",{\"1\":{\"7011\":1}}],[\"这个对象就是httpsession\",{\"1\":{\"9742\":1}}],[\"这个对象就像一面镜子\",{\"1\":{\"6930\":1}}],[\"这个对象就包含了完整的类的结构信息\",{\"1\":{\"6930\":1}}],[\"这个连接提供了一个安全的数据传输通道\",{\"1\":{\"6918\":1}}],[\"这个socket对象就是客户端的socket对象\",{\"1\":{\"6817\":1}}],[\"这个方法过于繁琐\",{\"1\":{\"8188\":1}}],[\"这个方法立面再加一层if判断\",{\"1\":{\"5353\":1}}],[\"这个方法将被结束\",{\"1\":{\"3438\":1}}],[\"这个内存地址一般是直接存在于代码段中\",{\"1\":{\"5129\":1}}],[\"这个类也需要能序列化\",{\"1\":{\"6565\":1}}],[\"这个类型参数将在使用时\",{\"1\":{\"5946\":1}}],[\"这个类型参数叫做泛型\",{\"1\":{\"5944\":1}}],[\"这个类就是枚举类\",{\"1\":{\"4819\":1}}],[\"这个类叫做抽象类\",{\"1\":{\"4444\":1}}],[\"这个写法不推荐\",{\"1\":{\"3793\":1}}],[\"这个默认值跟数组中元素的默认值一样\",{\"1\":{\"3653\":1}}],[\"这个数据永远不会被复制\",{\"1\":{\"10206\":1}}],[\"这个数据类型限制的是内层数组的元素\",{\"1\":{\"3581\":1}}],[\"这个数值我们没有定义容量\",{\"1\":{\"3108\":1}}],[\"这个也是声明变量\",{\"1\":{\"3397\":1}}],[\"这个是apache提供的\",{\"1\":{\"8330\":1}}],[\"这个是产生死锁的最根本原因\",{\"1\":{\"5424\":1}}],[\"这个是main线程的遍历代码\",{\"1\":{\"5185\":1}}],[\"这个是我们处理不了的\",{\"1\":{\"4669\":1}}],[\"这个是用来测试一个对象的类名的\",{\"1\":{\"4187\":1}}],[\"这个是父类中的num\",{\"1\":{\"4080\":1}}],[\"这个是子类中的num\",{\"1\":{\"4080\":1}}],[\"这个是之前的\",{\"1\":{\"1791\":1}}],[\"这个是全路径名\",{\"1\":{\"810\":1}}],[\"这个是idea中的设置\",{\"1\":{\"557\":1}}],[\"这个名字是可以修改的\",{\"1\":{\"803\":1}}],[\"这个时候idea就自动进行热部署操作\",{\"1\":{\"565\":1}}],[\"这个目前不太流行了\",{\"1\":{\"250\":1,\"253\":1}}],[\"这些索引在其范围内的值分布更加随机\",{\"1\":{\"10373\":1}}],[\"这些文本索引不存储特定于语言的停止词\",{\"1\":{\"10372\":1}}],[\"这些类型包括date\",{\"1\":{\"10083\":1}}],[\"这些类被用来构建和管理应用程序的图形用户界面\",{\"1\":{\"3939\":1}}],[\"这些方式的效率也都不如倒排索引\",{\"1\":{\"9962\":1}}],[\"这些方法都是返回string类型\",{\"1\":{\"8930\":1}}],[\"这些方法检查所提供的参数是不是null\",{\"1\":{\"8340\":1}}],[\"这些方法操作的也是日期\",{\"1\":{\"1636\":1}}],[\"这些web项目中cookie默认情况是不能共享的\",{\"1\":{\"9729\":1}}],[\"这些所依赖的类也可以打包成jar包放在web\",{\"1\":{\"9525\":1}}],[\"这些请求将被加入到等待队列中\",{\"1\":{\"8230\":1}}],[\"这些数据库连接的数量是由最小数据库连接数来设定的\",{\"1\":{\"8230\":1}}],[\"这些接口的区别就是参数不一样\",{\"1\":{\"7410\":1}}],[\"这些内存都将在方法区中进行分配\",{\"1\":{\"7015\":1}}],[\"这些内部结构也都受到泛型的约束\",{\"1\":{\"5978\":1}}],[\"这些封装后的io操作更加简单\",{\"1\":{\"6635\":1}}],[\"这些第三方包底层用的也是基本的io流操作\",{\"1\":{\"6635\":1}}],[\"这些子类的方法都是一样的\",{\"1\":{\"5561\":1}}],[\"这些对象可以属于同一个thread类的子类\",{\"1\":{\"5201\":1}}],[\"这些对象是作为类的属性的\",{\"1\":{\"4827\":1}}],[\"这些标记可以在编译\",{\"1\":{\"4880\":1}}],[\"这些约定包括getxxx\",{\"1\":{\"4577\":1}}],[\"这些步骤已经在父类中写好了\",{\"1\":{\"4463\":1}}],[\"这些同名方法就成了不同的方法\",{\"1\":{\"4157\":1}}],[\"这些属性和功能就形成了概念世界中的类\",{\"1\":{\"3609\":1}}],[\"这些信息被保存在\",{\"1\":{\"4883\":1}}],[\"这些信息是很有用的\",{\"1\":{\"2771\":1}}],[\"这些信息都是私有的\",{\"1\":{\"2771\":1}}],[\"这些信息如何写\",{\"1\":{\"963\":1}}],[\"这些新增的本地化时间日期\",{\"1\":{\"1623\":1}}],[\"这些代码是使用纯h5写的\",{\"1\":{\"1371\":1}}],[\"这些坐标都有了一些变化\",{\"1\":{\"962\":1}}],[\"这些包的版本配置非常麻烦\",{\"1\":{\"383\":1}}],[\"这些技术你不会就没法整合\",{\"1\":{\"19\":1}}],[\"这里\",{\"1\":{\"9916\":1}}],[\"这里由true改为false\",{\"1\":{\"9902\":2}}],[\"这里说到的全文搜索引擎指的是目前广泛应用的主流搜索引擎\",{\"1\":{\"9864\":1}}],[\"这里来通过继承原始的servlet类\",{\"1\":{\"8816\":1}}],[\"这里使用的是本地之前下载的tomcat\",{\"1\":{\"8574\":1}}],[\"这里主要指的批量操作是\",{\"1\":{\"8091\":1}}],[\"这里用到了上章定义的jdbcutils\",{\"1\":{\"8036\":1}}],[\"这里就有三个问题\",{\"1\":{\"6426\":1}}],[\"这里就不创建controller了\",{\"1\":{\"990\":1}}],[\"这里直接把异常抛出了\",{\"1\":{\"6411\":1}}],[\"这里直接用泛型限制了\",{\"1\":{\"1769\":1}}],[\"这里省去了类型强转\",{\"1\":{\"5970\":1}}],[\"这里通过将runnable接口的实例作为参数传入thread类中\",{\"1\":{\"5264\":1}}],[\"这里可以直接指定泛型类型\",{\"1\":{\"5967\":1}}],[\"这里可以将异常信息再次throws到调用处\",{\"1\":{\"4803\":1}}],[\"这里可以选择项目所需的一些依赖\",{\"1\":{\"322\":1}}],[\"这里将异常抛出到调用处\",{\"1\":{\"4777\":1}}],[\"这里开始处理异常\",{\"1\":{\"4777\":1}}],[\"这里再抛就到虚拟机了\",{\"1\":{\"4777\":1}}],[\"这里出现了异常\",{\"1\":{\"4734\":1}}],[\"这里出问题了\",{\"1\":{\"4734\":1}}],[\"这里写代码\",{\"1\":{\"4550\":2}}],[\"这里变成了在方法中调用构造器\",{\"1\":{\"4424\":1}}],[\"这里要重写抽象方法\",{\"1\":{\"4349\":1}}],[\"这里要用integer而非int\",{\"1\":{\"2365\":1}}],[\"这里执行①就停止了\",{\"1\":{\"4088\":1}}],[\"这里不赋值\",{\"1\":{\"3990\":1}}],[\"这里不用纠结\",{\"1\":{\"323\":1}}],[\"这里常使用很多html标签\",{\"1\":{\"2966\":1}}],[\"这里还是需要指定正则表达式\",{\"1\":{\"2756\":1}}],[\"这里介绍的是正则相关的java内置api\",{\"1\":{\"2661\":1}}],[\"这里所有的例子均以hashmap为例\",{\"1\":{\"2576\":1}}],[\"这里所有案例均以arraylist为例\",{\"1\":{\"2527\":1}}],[\"这里会报异常\",{\"1\":{\"2382\":1}}],[\"这里的路径指的是部署到\",{\"1\":{\"9251\":1}}],[\"这里的写是覆盖写\",{\"1\":{\"6520\":1}}],[\"这里的大指的是表示的数据范围大小\",{\"1\":{\"3155\":1}}],[\"这里的字符是任意语言的一个字\",{\"1\":{\"3114\":1}}],[\"这里的文件名是完整的文件名\",{\"1\":{\"2013\":1}}],[\"这里的长度值得是存入stringbuffer的字符数量count\",{\"1\":{\"1580\":1}}],[\"这里的修改是新创建了个一个字符串并返回\",{\"1\":{\"1460\":1}}],[\"这里获取的不是底层char\",{\"1\":{\"1574\":1}}],[\"这里是多条插入语句\",{\"1\":{\"10269\":1}}],[\"这里是多行注释\",{\"1\":{\"2934\":1}}],[\"这里是过滤器主要操作的内容\",{\"1\":{\"9270\":1}}],[\"这里是继承httpservlet\",{\"1\":{\"8801\":1}}],[\"这里是byte\",{\"1\":{\"6306\":1}}],[\"这里是mysql\",{\"1\":{\"4142\":1}}],[\"这里是单行注释\",{\"1\":{\"2932\":1}}],[\"这里是字符长度\",{\"1\":{\"1420\":1}}],[\"这里是根据日志的级别来设置的\",{\"1\":{\"891\":1}}],[\"这里只介绍一下配置\",{\"1\":{\"8608\":1}}],[\"这里只介绍简单的命令行\",{\"1\":{\"2318\":1,\"2775\":1}}],[\"这里只列出基本依赖\",{\"1\":{\"1360\":1}}],[\"这里只需要几个starter就搞定了\",{\"1\":{\"415\":1}}],[\"这里什么都不用写\",{\"1\":{\"1222\":1}}],[\"这里采用openssl生成密码文件\",{\"1\":{\"10769\":1}}],[\"这里采用的是二分法\",{\"1\":{\"2367\":1}}],[\"这里采用的是idea里的spring\",{\"1\":{\"301\":1}}],[\"这里采用自己下载的maven\",{\"1\":{\"1065\":1}}],[\"这里都生效\",{\"1\":{\"621\":1}}],[\"这里指的是手动读取配置项\",{\"1\":{\"497\":1}}],[\"重定向是两次请求\",{\"1\":{\"9158\":1}}],[\"重定向可以访问其他站点\",{\"1\":{\"9157\":1}}],[\"重定向的特点\",{\"0\":{\"9150\":1},\"1\":{\"9155\":1}}],[\"重定向的实现方式\",{\"0\":{\"9137\":1}}],[\"重定向的过程\",{\"0\":{\"9132\":1}}],[\"重定向\",{\"0\":{\"6441\":1,\"9129\":1,\"9140\":1},\"1\":{\"9168\":1}}],[\"重点看stage\",{\"1\":{\"10424\":1}}],[\"重点关注这个\",{\"1\":{\"9270\":1}}],[\"重点\",{\"1\":{\"5616\":1}}],[\"重点实践\",{\"1\":{\"18\":1}}],[\"重复打包会产生冲突\",{\"1\":{\"8685\":1}}],[\"重复\",{\"1\":{\"6918\":1}}],[\"重复的数据被排除\",{\"1\":{\"5790\":1}}],[\"重复利用线程池中线程\",{\"1\":{\"5494\":1}}],[\"重复性的执行某段代码\",{\"1\":{\"3336\":1}}],[\"重名是要采用以下方法调用\",{\"1\":{\"4328\":1}}],[\"重新加载配置\",{\"1\":{\"10626\":1}}],[\"重新部署\",{\"1\":{\"8596\":1}}],[\"重新指向新的数组的值\",{\"1\":{\"3526\":1}}],[\"重新分配空间\",{\"1\":{\"3526\":1}}],[\"重新初始化时\",{\"1\":{\"3526\":1}}],[\"重置isflag\",{\"1\":{\"3457\":1}}],[\"重载形式\",{\"0\":{\"7576\":1}}],[\"重载时\",{\"1\":{\"3869\":1}}],[\"重载示例\",{\"0\":{\"3766\":1}}],[\"重载的调用\",{\"0\":{\"3763\":1}}],[\"重载的判断方式\",{\"1\":{\"3758\":1}}],[\"重载\",{\"0\":{\"3756\":1},\"1\":{\"2558\":1,\"4157\":1}}],[\"重载方法\",{\"1\":{\"2532\":1,\"2539\":1,\"2557\":1}}],[\"重载reload\",{\"0\":{\"544\":1}}],[\"重命名\",{\"0\":{\"2016\":1},\"1\":{\"10678\":1}}],[\"重命名文件和目录\",{\"1\":{\"1941\":1,\"6112\":1}}],[\"重写父类中的doget和dopost方法\",{\"1\":{\"8818\":1}}],[\"重写对应请求方式的doxxx方法\",{\"1\":{\"8805\":1}}],[\"重写接口中的5个方法\",{\"1\":{\"8786\":1}}],[\"重写接口中定义的方法\",{\"1\":{\"4872\":1}}],[\"重写dao里面的方法\",{\"1\":{\"8168\":1}}],[\"重写producecloth方法\",{\"1\":{\"7220\":1}}],[\"重写producecloth方法用于生产服装\",{\"1\":{\"7219\":1}}],[\"重写connectbd方法进行数据库连接\",{\"1\":{\"7199\":1}}],[\"重写compareto方法\",{\"0\":{\"1768\":1},\"1\":{\"5912\":1}}],[\"重写compareto\",{\"1\":{\"1751\":1}}],[\"重写原则\",{\"0\":{\"5754\":1}}],[\"重写thread类的run方法\",{\"1\":{\"5185\":1}}],[\"重写抽象方法\",{\"1\":{\"4867\":1}}],[\"重写equals\",{\"1\":{\"4245\":1}}],[\"重写object\",{\"1\":{\"4245\":1}}],[\"重写的接口的方法\",{\"1\":{\"7352\":1}}],[\"重写的hashcode\",{\"1\":{\"5757\":1}}],[\"重写的原则\",{\"1\":{\"4235\":1}}],[\"重写的要求\",{\"0\":{\"4045\":1}}],[\"重写后\",{\"1\":{\"4232\":1}}],[\"重写\",{\"0\":{\"4040\":1},\"1\":{\"4530\":1}}],[\"重写比较大小的核心方法\",{\"1\":{\"2365\":1}}],[\"重写时要满足重写规则\",{\"1\":{\"1746\":1}}],[\"重启所有节点\",{\"1\":{\"10780\":1}}],[\"重启tomcat\",{\"1\":{\"8599\":1}}],[\"重启\",{\"0\":{\"541\":1},\"1\":{\"8709\":1}}],[\"重启与重载\",{\"0\":{\"537\":1}}],[\"重要性\",{\"1\":{\"285\":1}}],[\"重要配置\",{\"1\":{\"245\":1}}],[\"内嵌数组的形式来存储\",{\"1\":{\"10036\":1}}],[\"内嵌tomcat\",{\"0\":{\"440\":1}}],[\"内循环改为如下代码\",{\"1\":{\"6260\":1}}],[\"内循环是用来读取cbuf数组中的字符\",{\"1\":{\"6257\":1}}],[\"内部角色\",{\"1\":{\"10671\":1}}],[\"内部dtd\",{\"1\":{\"9633\":1}}],[\"内部迭代\",{\"0\":{\"7698\":1}}],[\"内部缓冲区数组默认大小\",{\"1\":{\"6325\":1,\"6331\":1,\"6334\":1}}],[\"内部结构\",{\"1\":{\"5977\":1}}],[\"内部声明了node类型的first\",{\"1\":{\"5666\":1}}],[\"内部可以有输出语句\",{\"1\":{\"4555\":1,\"4562\":1}}],[\"内部创建类的对象\",{\"1\":{\"4420\":1,\"4422\":1}}],[\"内部列的作用\",{\"0\":{\"4344\":1}}],[\"内部类仍然是一个独立的类\",{\"1\":{\"4338\":1}}],[\"内部类对象\",{\"1\":{\"4322\":1}}],[\"内部类的作用\",{\"0\":{\"4303\":1}}],[\"内部类\",{\"0\":{\"4299\":1},\"1\":{\"3838\":1,\"4301\":1,\"4322\":1}}],[\"内\",{\"1\":{\"3688\":1}}],[\"内层元素的初始化值为\",{\"1\":{\"3574\":1,\"3577\":1}}],[\"内层元素的个数\",{\"1\":{\"3566\":1}}],[\"内层3个元素\",{\"1\":{\"3545\":1}}],[\"内层数组的长度\",{\"1\":{\"3566\":1}}],[\"内层数组的长度不限\",{\"1\":{\"3558\":1}}],[\"内层数组未初始化\",{\"1\":{\"3563\":1}}],[\"内层数组只声明\",{\"1\":{\"3547\":1}}],[\"内层数组元素\",{\"1\":{\"3538\":1}}],[\"内层数组\",{\"1\":{\"3536\":1}}],[\"内层循环控制列数\",{\"1\":{\"3449\":1}}],[\"内层循环需要执行n次\",{\"1\":{\"3449\":1}}],[\"内层循环结构遍历一遍\",{\"1\":{\"3448\":1}}],[\"内定义\",{\"1\":{\"3013\":1}}],[\"内存释放或者服务器关闭的时候\",{\"1\":{\"8774\":1}}],[\"内存泄露积累多了就容易导致内存溢出\",{\"1\":{\"5137\":1}}],[\"内存溢出和泄露\",{\"0\":{\"5135\":1}}],[\"内存是容器\",{\"1\":{\"5131\":1}}],[\"内存是临时性的储存\",{\"1\":{\"5116\":1}}],[\"内存中的这个类就是class的一个实例\",{\"1\":{\"6972\":1}}],[\"内存中的数据\",{\"1\":{\"5132\":1}}],[\"内存中储存的是变量的值\",{\"1\":{\"5128\":1}}],[\"内存中实际上是加载了子类特有的属性和方法的\",{\"1\":{\"4169\":1}}],[\"内存空间的基本分类\",{\"0\":{\"5122\":1}}],[\"内存空间和数据都消失\",{\"1\":{\"5118\":1}}],[\"内存储存的数据类型\",{\"0\":{\"5119\":1}}],[\"内存的生命周期\",{\"0\":{\"5117\":1}}],[\"内存条==\",{\"1\":{\"5118\":1}}],[\"内存条通电后产生的存储空间\",{\"1\":{\"5116\":1}}],[\"内存条的空间\",{\"0\":{\"5115\":1}}],[\"内存存在的意义\",{\"1\":{\"5113\":1}}],[\"内存地址\",{\"1\":{\"5121\":1}}],[\"内存地址空间\",{\"1\":{\"5080\":1}}],[\"内存地址就已经确定了\",{\"1\":{\"3584\":1}}],[\"内存区域\",{\"0\":{\"4630\":1}}],[\"内存解析\",{\"0\":{\"4626\":1}}],[\"内存结构\",{\"0\":{\"3518\":1}}],[\"内存图示\",{\"0\":{\"3226\":1,\"3233\":1}}],[\"内存\",{\"0\":{\"5110\":1,\"5114\":1,\"5130\":1},\"1\":{\"2820\":1,\"6154\":1,\"6155\":1}}],[\"内存设置\",{\"1\":{\"244\":1}}],[\"内置的\",{\"1\":{\"10379\":1}}],[\"内置的maven不方便修改配置\",{\"1\":{\"1065\":1}}],[\"内置jdk目录\",{\"1\":{\"9881\":1}}],[\"内置functional\",{\"0\":{\"7425\":1}}],[\"内置函数式接口\",{\"0\":{\"7411\":1}}],[\"内置函数>反射类\",{\"1\":{\"7004\":1}}],[\"内置函数>io类\",{\"1\":{\"6147\":1,\"6220\":1,\"6226\":1}}],[\"内置函数>list\",{\"1\":{\"5681\":1,\"5843\":1}}],[\"内置函数>collection+\",{\"1\":{\"5564\":1,\"5579\":1,\"5722\":1,\"5931\":1}}],[\"内置服务器\",{\"1\":{\"292\":1}}],[\"内容参考如下\",{\"1\":{\"10148\":1}}],[\"内容管理或者博客平台\",{\"1\":{\"10123\":1}}],[\"内容\",{\"1\":{\"9637\":1}}],[\"内容如下\",{\"1\":{\"9014\":1,\"9499\":1,\"10582\":1}}],[\"内容和长度都不可变\",{\"1\":{\"1555\":1}}],[\"内容说明\",{\"1\":{\"259\":1,\"268\":1,\"1059\":1}}],[\"内容正在迁移中\",{\"1\":{\"144\":1,\"147\":1,\"150\":1,\"153\":1}}],[\"分析查询性能\",{\"1\":{\"10416\":1}}],[\"分析处理\",{\"1\":{\"9847\":1}}],[\"分析和可视化\",{\"1\":{\"9832\":1}}],[\"分析\",{\"1\":{\"9149\":1}}],[\"分析哪些属性不因对象的不同而改变\",{\"1\":{\"4367\":1}}],[\"分开\",{\"1\":{\"6667\":1}}],[\"分配内存并\",{\"1\":{\"7015\":1}}],[\"分配给用户进程或应用程序\",{\"1\":{\"6684\":1}}],[\"分配了相应资源\",{\"1\":{\"5403\":1}}],[\"分配空间\",{\"1\":{\"3477\":1,\"3496\":1,\"3525\":1}}],[\"分别表示四个范围\",{\"1\":{\"9179\":1}}],[\"分别测试使用节点流和缓冲流进行文件的测试\",{\"1\":{\"6357\":1}}],[\"分别实现抽象方法\",{\"1\":{\"4868\":1}}],[\"分别是请求方式\",{\"1\":{\"8926\":1}}],[\"分别是\",{\"1\":{\"892\":1,\"4971\":1,\"9557\":1}}],[\"分为4个阶段\",{\"1\":{\"8745\":1}}],[\"分为6中情况\",{\"1\":{\"7369\":1}}],[\"分为\",{\"1\":{\"4698\":1,\"9873\":1}}],[\"分为有返回值的和没返回值的\",{\"1\":{\"3720\":1}}],[\"分支\",{\"1\":{\"3342\":1}}],[\"分支结构\",{\"1\":{\"3333\":1}}],[\"分\",{\"1\":{\"1648\":1}}],[\"分类方式2\",{\"0\":{\"6669\":1}}],[\"分类方式1\",{\"0\":{\"6665\":1}}],[\"分类\",{\"0\":{\"4305\":1,\"4551\":1},\"1\":{\"3600\":1}}],[\"分类管理\",{\"1\":{\"1399\":1}}],[\"分类名称\",{\"1\":{\"1336\":1}}],[\"分类表\",{\"0\":{\"1335\":1},\"1\":{\"1314\":1}}],[\"分类记录\",{\"1\":{\"932\":1}}],[\"分布式\",{\"0\":{\"9839\":1},\"1\":{\"1197\":1}}],[\"分布式集群\",{\"1\":{\"230\":1}}],[\"分页查询\",{\"1\":{\"10333\":1}}],[\"分页列表查询\",{\"0\":{\"10327\":1}}],[\"分页等\",{\"1\":{\"7541\":1}}],[\"分页相关的拦截器\",{\"1\":{\"1234\":1}}],[\"分页功能\",{\"0\":{\"1230\":1}}],[\"分页\",{\"1\":{\"1194\":1}}],[\"分文件存储就要为每个文件设置动态有序的文件名\",{\"1\":{\"933\":1}}],[\"分隔符常量\",{\"0\":{\"6123\":1}}],[\"分隔\",{\"1\":{\"771\":1,\"4853\":1}}],[\"分割各个环境\",{\"1\":{\"828\":1}}],[\"分割\",{\"1\":{\"617\":1}}],[\"分片集群环境\",{\"0\":{\"10781\":1}}],[\"分片集群\",{\"0\":{\"10468\":1,\"10631\":1}}],[\"分片策略\",{\"1\":{\"241\":1}}],[\"分片原理\",{\"1\":{\"232\":1}}],[\"分片控制\",{\"1\":{\"232\":1}}],[\"wmajoritywriteavailabilitydate\",{\"1\":{\"10554\":1}}],[\"writablevotingmemberscount\",{\"1\":{\"10554\":1}}],[\"writemajoritycount\",{\"1\":{\"10554\":1}}],[\"writeconcernmajorityjournaldefault\",{\"1\":{\"10541\":1}}],[\"writeconcern和ordered两个参数一般不用管\",{\"1\":{\"10259\":1}}],[\"writeconcern\",{\"1\":{\"10246\":1,\"10249\":1,\"10261\":1,\"10284\":1}}],[\"writeobject\",{\"0\":{\"6544\":1},\"1\":{\"6546\":1,\"6555\":1,\"6571\":2}}],[\"writeboolean\",{\"1\":{\"6483\":1}}],[\"writeint\",{\"1\":{\"6483\":1}}],[\"writeutf\",{\"1\":{\"6483\":1}}],[\"write方法\",{\"1\":{\"6301\":1}}],[\"write有多种重载\",{\"1\":{\"6277\":1}}],[\"writer\",{\"0\":{\"6198\":1,\"6202\":1},\"1\":{\"6177\":1,\"6334\":2,\"9075\":1,\"9076\":1,\"9079\":2,\"9085\":2}}],[\"write\",{\"0\":{\"2063\":1,\"2091\":1,\"2100\":1,\"6276\":1},\"1\":{\"1987\":1,\"2087\":1,\"2090\":1,\"2098\":8,\"2103\":2,\"2105\":5,\"2114\":1,\"6278\":1,\"6285\":2,\"6287\":1,\"6306\":1,\"6353\":1,\"6406\":1,\"6411\":1,\"6516\":1,\"6526\":1,\"6803\":1,\"8089\":1,\"9076\":1,\"9079\":1,\"9085\":1,\"9092\":1,\"9095\":1,\"9101\":1,\"10585\":2}}],[\"wtimeout\",{\"1\":{\"10541\":1}}],[\"w\",{\"1\":{\"10445\":1,\"10541\":1,\"10588\":1}}],[\"w3\",{\"1\":{\"9642\":1,\"9645\":1}}],[\"w3c推出的可扩展标记语言\",{\"1\":{\"9591\":1}}],[\"www\",{\"1\":{\"6691\":1,\"6703\":2,\"6706\":1,\"6708\":2,\"6711\":1,\"6866\":1,\"6883\":3,\"6899\":1,\"9642\":3,\"9645\":4,\"10016\":1,\"10128\":1,\"10177\":1,\"10184\":1}}],[\"war相较于jar的唯一优势在于\",{\"1\":{\"9527\":1}}],[\"war能打包的内容\",{\"1\":{\"9525\":1}}],[\"war是一个可以直接运行的web模块\",{\"1\":{\"9520\":1}}],[\"war\",{\"1\":{\"8506\":1,\"8582\":1,\"8584\":1,\"8586\":1,\"8643\":1,\"8645\":1}}],[\"war包中的文件按照一定目录结构来组织\",{\"1\":{\"9523\":1}}],[\"war包是sun提出的一种web应用程序格式\",{\"1\":{\"9523\":1}}],[\"war包介绍\",{\"0\":{\"9519\":1}}],[\"war包和zip包差不多\",{\"1\":{\"8466\":1}}],[\"war包会自动解压缩\",{\"1\":{\"8466\":1}}],[\"warn\",{\"1\":{\"882\":2,\"888\":2,\"896\":1,\"952\":10,\"955\":2}}],[\"wall\",{\"1\":{\"8319\":1}}],[\"waiting\",{\"1\":{\"10164\":1,\"10498\":1}}],[\"waittest\",{\"1\":{\"5464\":1}}],[\"wait\",{\"0\":{\"5442\":1},\"1\":{\"4215\":1,\"5438\":1,\"5443\":1,\"5453\":1,\"5454\":1,\"5455\":1,\"5460\":1,\"5461\":1,\"5464\":1}}],[\"would\",{\"1\":{\"10585\":1}}],[\"woman\",{\"1\":{\"4196\":1,\"4821\":1}}],[\"work\",{\"1\":{\"5219\":1}}],[\"workpace\",{\"1\":{\"2882\":1}}],[\"workplace>java\",{\"1\":{\"2882\":1}}],[\"workplace>javac\",{\"1\":{\"2882\":1}}],[\"workplace\",{\"1\":{\"1946\":2,\"1950\":1,\"2314\":1,\"6132\":3,\"6136\":2}}],[\"wordid\",{\"1\":{\"9994\":1}}],[\"word\",{\"1\":{\"2954\":1,\"2974\":2}}],[\"world~\",{\"1\":{\"8772\":1}}],[\"world\",{\"1\":{\"486\":1,\"1475\":2,\"2882\":1,\"4083\":2}}],[\"weight\",{\"1\":{\"7075\":1}}],[\"wechatpay\",{\"1\":{\"4823\":1}}],[\"week\",{\"1\":{\"1660\":2,\"1663\":1}}],[\"weblistener\",{\"1\":{\"9456\":1}}],[\"weblister注解\",{\"1\":{\"9446\":1,\"9454\":1}}],[\"weblogic\",{\"1\":{\"8242\":1}}],[\"webfilter\",{\"1\":{\"9295\":2,\"9298\":1}}],[\"webfilter注解的dispatchertypes属性来配置\",{\"1\":{\"9289\":1}}],[\"webfilter注解进行配置\",{\"1\":{\"9281\":1}}],[\"web目录下资源访问\",{\"1\":{\"9262\":1}}],[\"web目录下\",{\"1\":{\"9258\":1}}],[\"webserver有很多配置项\",{\"1\":{\"8836\":1}}],[\"webservlet后面的值进行匹配\",{\"1\":{\"8722\":1}}],[\"webservlet\",{\"1\":{\"8707\":1,\"8768\":1,\"8809\":1,\"8817\":1,\"8834\":3,\"8837\":1,\"8843\":1,\"8848\":1,\"8854\":1,\"8857\":1,\"8944\":1,\"9004\":1,\"9027\":1,\"9079\":1,\"9124\":2,\"9143\":1,\"9145\":1,\"9286\":4}}],[\"webservlet注解内\",{\"1\":{\"8833\":1}}],[\"webservlet注解中的loadonstartup修改为0或整数\",{\"1\":{\"8767\":1}}],[\"webservlet注解中loadonstartup的值来改变servlet对象的创建时机\",{\"1\":{\"8750\":1}}],[\"webservlet注解\",{\"1\":{\"8706\":1,\"8831\":1}}],[\"websocket\",{\"1\":{\"8664\":1}}],[\"websphere\",{\"1\":{\"8242\":1}}],[\"web应用配置\",{\"1\":{\"8661\":1}}],[\"web缺失的webapp目录结构\",{\"0\":{\"8565\":1}}],[\"webapp\",{\"1\":{\"8548\":1,\"8623\":1}}],[\"webapps目录是用来部署项目的\",{\"1\":{\"8460\":1}}],[\"web项目\",{\"1\":{\"9529\":2}}],[\"web项目确实的目录结构\",{\"0\":{\"8553\":1}}],[\"web项目目录\",{\"0\":{\"8511\":1}}],[\"web项目的核心配置文件\",{\"1\":{\"8498\":1}}],[\"web服务器在创建servlet对象的时候会调用init方法\",{\"1\":{\"8783\":1}}],[\"web服务器进行调用\",{\"1\":{\"8724\":1}}],[\"web服务器就会为servletdemo1这个类创建一个对象\",{\"1\":{\"8723\":1}}],[\"web服务器软件使用步骤\",{\"0\":{\"8404\":1}}],[\"web服务器是安装在服务器端的一款软件\",{\"1\":{\"8397\":1}}],[\"web服务器\",{\"0\":{\"8394\":1},\"1\":{\"8720\":1,\"8745\":1}}],[\"webmvcconfigurationsupport\",{\"1\":{\"1376\":1}}],[\"webmvcconfig\",{\"1\":{\"1376\":1}}],[\"webmvc<\",{\"1\":{\"412\":1}}],[\"web依赖\",{\"1\":{\"1131\":1}}],[\"web依赖包含了该依赖\",{\"1\":{\"1128\":1}}],[\"web进行排除依赖\",{\"1\":{\"445\":1}}],[\"web\",{\"1\":{\"443\":2,\"1200\":1,\"8463\":1,\"8491\":1,\"8497\":1,\"8498\":1,\"8507\":1,\"8529\":1,\"8538\":1,\"8539\":1,\"8568\":1,\"8569\":1,\"8570\":1,\"8719\":1,\"8843\":1,\"8848\":1,\"8854\":1,\"8857\":1,\"9231\":1,\"9232\":1,\"9259\":3,\"9260\":1,\"9262\":3,\"9452\":1,\"9524\":1,\"9567\":1,\"9583\":1,\"9784\":1}}],[\"web<\",{\"1\":{\"412\":1,\"446\":1,\"1132\":1,\"1177\":1,\"1361\":1}}],[\"web就会打开一个包含所有依赖信息的文件\",{\"1\":{\"411\":1}}],[\"web架构\",{\"0\":{\"9535\":1},\"1\":{\"10\":1}}],[\"wide\",{\"1\":{\"10585\":1}}],[\"wire\",{\"1\":{\"9895\":1}}],[\"will\",{\"1\":{\"2974\":1}}],[\"with\",{\"1\":{\"10864\":1}}],[\"withdayofyear\",{\"1\":{\"1657\":1}}],[\"withdayofmonth\",{\"1\":{\"1657\":1}}],[\"withnano\",{\"1\":{\"1657\":1}}],[\"withsecond\",{\"1\":{\"1657\":1}}],[\"withminute\",{\"1\":{\"1657\":1}}],[\"withmonth\",{\"1\":{\"1657\":1}}],[\"withhour\",{\"1\":{\"1657\":1}}],[\"withyear\",{\"1\":{\"1657\":1}}],[\"withxxx\",{\"0\":{\"1655\":1}}],[\"winter\",{\"1\":{\"4822\":1,\"4843\":1,\"4872\":1}}],[\"window\",{\"1\":{\"3939\":1}}],[\"windows系统上的开发环境\",{\"1\":{\"8420\":1}}],[\"windows和dos系统默认使用\",{\"1\":{\"6121\":1}}],[\"windows的recycle\",{\"1\":{\"4440\":1}}],[\"windows服务器仅作为测试\",{\"1\":{\"685\":1}}],[\"windows\",{\"0\":{\"684\":1,\"2851\":1,\"2855\":1,\"10126\":1},\"1\":{\"2314\":1,\"2853\":1,\"9873\":1}}],[\"windows集群\",{\"1\":{\"225\":1}}],[\"win10\",{\"1\":{\"492\":2}}],[\"while+hasnext遍历\",{\"0\":{\"5593\":1}}],[\"whiletest\",{\"1\":{\"3405\":1}}],[\"while循环\",{\"1\":{\"3412\":1}}],[\"while循环的使用\",{\"0\":{\"3403\":1,\"3418\":1}}],[\"while循环没有迭代条件也能编译成功\",{\"1\":{\"3400\":1}}],[\"while\",{\"0\":{\"3398\":1,\"3410\":1,\"3415\":1},\"1\":{\"1763\":1,\"2042\":1,\"2048\":1,\"2618\":1,\"2624\":1,\"3338\":1,\"3339\":1,\"3402\":1,\"3405\":1,\"3412\":1,\"3414\":1,\"3417\":1,\"3420\":1,\"4724\":1,\"4753\":1,\"4777\":1,\"5263\":1,\"5310\":1,\"5322\":1,\"5345\":1,\"5396\":1,\"5464\":1,\"5595\":1,\"5604\":1,\"5779\":1,\"5913\":1,\"5967\":1,\"5970\":1,\"6078\":1,\"6081\":1,\"6251\":1,\"6254\":1,\"6287\":1,\"6306\":1,\"6348\":1,\"6353\":1,\"6411\":1,\"6449\":1,\"6516\":1,\"8054\":1,\"8089\":1,\"8201\":1,\"8955\":1,\"9095\":1,\"10744\":1}}],[\"white\",{\"1\":{\"952\":1}}],[\"where\",{\"1\":{\"988\":1,\"7889\":1,\"7893\":1,\"7980\":1,\"7991\":2,\"8037\":1,\"8047\":2,\"8056\":1,\"8089\":1,\"8148\":2,\"8162\":1,\"8207\":3,\"8383\":1,\"8385\":1,\"8387\":1,\"8389\":1,\"8391\":1}}],[\"a9898c75\",{\"1\":{\"10726\":1}}],[\"again\",{\"1\":{\"10585\":1}}],[\"agetype\",{\"1\":{\"9642\":3}}],[\"age>\",{\"1\":{\"9635\":1,\"9645\":1}}],[\"age>o\",{\"1\":{\"1769\":1}}],[\"agent\",{\"1\":{\"8964\":1}}],[\"age=21\",{\"1\":{\"7763\":1}}],[\"age=1\",{\"1\":{\"7749\":1,\"7756\":1,\"7760\":2}}],[\"age=12\",{\"1\":{\"5779\":1,\"5790\":1}}],[\"age=0\",{\"1\":{\"6962\":1,\"7054\":1}}],[\"age=35\",{\"1\":{\"7697\":1}}],[\"age=34\",{\"1\":{\"7685\":1,\"7688\":1}}],[\"age=33\",{\"1\":{\"5790\":1}}],[\"age=32\",{\"1\":{\"5790\":1}}],[\"age=\",{\"1\":{\"4259\":1,\"6956\":1}}],[\"age++\",{\"1\":{\"3747\":1}}],[\"age<o\",{\"1\":{\"1769\":1}}],[\"age1\",{\"1\":{\"503\":1}}],[\"age\",{\"0\":{\"4646\":1},\"1\":{\"489\":6,\"503\":1,\"1029\":3,\"1769\":6,\"2191\":2,\"2194\":3,\"2231\":1,\"2239\":4,\"2244\":5,\"3082\":1,\"3506\":1,\"3630\":1,\"3636\":1,\"3646\":2,\"3658\":1,\"3664\":3,\"3668\":1,\"3747\":1,\"3816\":2,\"3821\":5,\"3857\":4,\"3870\":2,\"3901\":6,\"3985\":1,\"4039\":6,\"4162\":1,\"4164\":4,\"4178\":2,\"4241\":2,\"4259\":1,\"4553\":2,\"4585\":3,\"5060\":1,\"5790\":2,\"6487\":3,\"6956\":5,\"6958\":1,\"6960\":3,\"7082\":1,\"7094\":1,\"7655\":5,\"7952\":1,\"9631\":2,\"9642\":1}}],[\"a=\",{\"1\":{\"9645\":1}}],[\"a就前缀\",{\"1\":{\"9645\":1}}],[\"afilter就先执行了\",{\"1\":{\"9311\":1}}],[\"afilter\",{\"1\":{\"9311\":1}}],[\"aftifacts\",{\"1\":{\"8582\":1}}],[\"aop代理里的方法可以在执行目标方法之前\",{\"1\":{\"7304\":1}}],[\"aop代理包含了目标对象的全部方法\",{\"1\":{\"7304\":1}}],[\"aop代理可代替目标对象\",{\"1\":{\"7304\":1}}],[\"aop代理\",{\"0\":{\"7302\":1}}],[\"aop\",{\"0\":{\"7299\":1}}],[\"aop与动态代理\",{\"0\":{\"7298\":1}}],[\"avi\",{\"1\":{\"6232\":1,\"6359\":2}}],[\"availability\",{\"1\":{\"10031\":1}}],[\"available\",{\"1\":{\"9507\":1}}],[\"avatars\",{\"1\":{\"2022\":1}}],[\"avatar\",{\"1\":{\"2022\":1}}],[\"avadar\",{\"1\":{\"1971\":1,\"1975\":1}}],[\"a支付成功了\",{\"1\":{\"5300\":1}}],[\"a和b同时通过了if判断\",{\"1\":{\"5300\":1}}],[\"a使用该账户消费2000元\",{\"1\":{\"5300\":1}}],[\"a+b\",{\"1\":{\"4658\":2,\"4661\":2}}],[\"a++\",{\"1\":{\"3987\":1}}],[\"a的关系\",{\"1\":{\"4478\":1}}],[\"a返回true\",{\"1\":{\"4189\":1}}],[\"awt\",{\"1\":{\"3939\":1}}],[\"a<g>\",{\"1\":{\"6056\":1}}],[\"a<=0\",{\"1\":{\"3821\":1}}],[\"a<=20\",{\"1\":{\"3282\":1}}],[\"a<20\",{\"1\":{\"1853\":1}}],[\"a123\",{\"1\":{\"10714\":1}}],[\"a1\",{\"1\":{\"3261\":2,\"6275\":2,\"6285\":1}}],[\"ahello10\",{\"1\":{\"3241\":1}}],[\"a2cf\",{\"1\":{\"10726\":1}}],[\"a2\",{\"1\":{\"2379\":1,\"3261\":2}}],[\"authmechanism=default\",{\"1\":{\"10799\":1,\"10816\":1}}],[\"authentication\",{\"1\":{\"10734\":1,\"10744\":1,\"10843\":1,\"10846\":1}}],[\"auth=true\",{\"1\":{\"10642\":1}}],[\"auth\",{\"1\":{\"10642\":1,\"10734\":2}}],[\"authorization\",{\"1\":{\"10740\":1,\"10761\":1,\"10777\":1}}],[\"author\",{\"1\":{\"2937\":1,\"2956\":1,\"2957\":1,\"2962\":1}}],[\"autumn\",{\"1\":{\"4843\":1,\"4872\":1}}],[\"autocommit\",{\"1\":{\"8134\":1}}],[\"auto\",{\"1\":{\"1229\":1,\"8105\":1,\"8358\":1}}],[\"autowired\",{\"1\":{\"508\":1,\"522\":1,\"663\":1,\"991\":1,\"1016\":1,\"1029\":1,\"1038\":1,\"1224\":1,\"1265\":1,\"1268\":1,\"1276\":1,\"1299\":1}}],[\"augend\",{\"1\":{\"1886\":1}}],[\"attempted\",{\"1\":{\"10585\":1}}],[\"attlist\",{\"1\":{\"9631\":1}}],[\"attribute\",{\"1\":{\"9642\":1}}],[\"attributereplaced\",{\"1\":{\"9366\":1,\"9385\":1,\"9404\":1}}],[\"attributeremoved\",{\"1\":{\"9364\":1,\"9383\":1,\"9402\":1}}],[\"attributeadded\",{\"1\":{\"9362\":1,\"9381\":1,\"9400\":1}}],[\"attr\",{\"1\":{\"6617\":1}}],[\"atguigu\",{\"1\":{\"4227\":2,\"4229\":2,\"6840\":1,\"6883\":3,\"6899\":1,\"6949\":1}}],[\"atan\",{\"1\":{\"1839\":1}}],[\"atoffset\",{\"0\":{\"1674\":1},\"1\":{\"1676\":2}}],[\"am\",{\"1\":{\"1529\":2,\"2692\":3,\"2697\":3,\"2705\":2}}],[\"amqp<\",{\"1\":{\"397\":1,\"1158\":1,\"1177\":1}}],[\"acknowledged\",{\"1\":{\"10252\":1,\"10603\":1}}],[\"account\",{\"1\":{\"6571\":1}}],[\"accidental\",{\"1\":{\"2974\":1}}],[\"access\",{\"1\":{\"8166\":1,\"10646\":1}}],[\"accesscontroller\",{\"1\":{\"6334\":1}}],[\"accessibleobject\",{\"1\":{\"2217\":1}}],[\"accept方法\",{\"0\":{\"6815\":1}}],[\"accept\",{\"1\":{\"2633\":1,\"6807\":1,\"6819\":1,\"7377\":2,\"7430\":1,\"7462\":1,\"7465\":1,\"7468\":1,\"8951\":3,\"8965\":1,\"8970\":1,\"8971\":1}}],[\"acos\",{\"1\":{\"1838\":1}}],[\"ac\",{\"1\":{\"1449\":1}}],[\"actualtypearguments\",{\"1\":{\"7137\":2}}],[\"actuator<\",{\"1\":{\"1138\":1,\"1177\":1}}],[\"actuator依赖\",{\"1\":{\"1137\":1}}],[\"actuator监控\",{\"0\":{\"1136\":1}}],[\"action=\",{\"1\":{\"8988\":1,\"9025\":1}}],[\"action\",{\"1\":{\"6334\":1,\"8595\":1,\"10651\":1,\"10653\":1}}],[\"activity\",{\"1\":{\"4601\":1}}],[\"activation>\",{\"1\":{\"862\":1}}],[\"activate\",{\"1\":{\"830\":2}}],[\"activebydefault>\",{\"1\":{\"862\":1}}],[\"active>pro<\",{\"1\":{\"862\":1}}],[\"active>\",{\"1\":{\"862\":2}}],[\"active>dev<\",{\"1\":{\"862\":1}}],[\"active指定哪个环境组生效\",{\"1\":{\"859\":1}}],[\"active\",{\"1\":{\"830\":1,\"843\":1,\"853\":1,\"858\":1,\"865\":2,\"867\":1,\"1051\":2}}],[\"activemq<\",{\"1\":{\"397\":4}}],[\"activemq\",{\"1\":{\"397\":5}}],[\"about\",{\"1\":{\"10164\":1,\"10498\":1}}],[\"abd\",{\"1\":{\"7487\":1}}],[\"abb\",{\"1\":{\"2700\":1}}],[\"abstractlist<string>\",{\"1\":{\"6057\":1}}],[\"abstractlist中的add\",{\"1\":{\"2384\":1}}],[\"abstract修饰的\",{\"1\":{\"4496\":1}}],[\"abstract不能用来修饰私有方法\",{\"1\":{\"4455\":1}}],[\"abstract不能用来修饰属性\",{\"1\":{\"4454\":1}}],[\"abstract的使用注意\",{\"0\":{\"4452\":1}}],[\"abstract方法\",{\"0\":{\"4447\":1}}],[\"abstract关键字\",{\"1\":{\"3718\":1}}],[\"abstract\",{\"0\":{\"4442\":1,\"4443\":1},\"1\":{\"1844\":1,\"2026\":1,\"2027\":1,\"2031\":2,\"2065\":1,\"2066\":1,\"2070\":1,\"3862\":1,\"3939\":1,\"4358\":1,\"4446\":1,\"4451\":1,\"4459\":2,\"4466\":2,\"4469\":2,\"4489\":1,\"4491\":2,\"8201\":1}}],[\"abstractstringbuilder\",{\"1\":{\"1542\":2}}],[\"abs\",{\"0\":{\"1798\":1},\"1\":{\"1800\":4}}],[\"abc123\",{\"1\":{\"7862\":1,\"7865\":1}}],[\"abc\",{\"1\":{\"1491\":1,\"2962\":3,\"3212\":2,\"3214\":1,\"4709\":1,\"4714\":1,\"4718\":1,\"4734\":1,\"5011\":1,\"7487\":1}}],[\"ab\",{\"1\":{\"1449\":1,\"1556\":1}}],[\"aaa\",{\"1\":{\"9076\":1,\"9717\":1}}],[\"aaabbb\",{\"1\":{\"2683\":1}}],[\"aa\",{\"1\":{\"1424\":4,\"1427\":2,\"1788\":3,\"2404\":2,\"2407\":2,\"2410\":1,\"2413\":1,\"2422\":2,\"2426\":1,\"2429\":2,\"2433\":2,\"2436\":1,\"3212\":2,\"3591\":1,\"4306\":1,\"4509\":1,\"5588\":1,\"5590\":1,\"5604\":1,\"5611\":1,\"5779\":2,\"5901\":1,\"6001\":1,\"6073\":2,\"6078\":2,\"6081\":2,\"7634\":3,\"8148\":1}}],[\"aaron=a\",{\"1\":{\"2589\":2,\"2592\":2,\"2595\":2,\"2598\":1,\"2601\":1,\"2604\":1,\"2606\":1,\"2609\":1,\"2612\":1,\"2615\":2,\"2618\":1,\"2621\":1,\"2624\":2}}],[\"aaron\",{\"1\":{\"1286\":1,\"1771\":3,\"1773\":2,\"1791\":2,\"2589\":1,\"2618\":2,\"2962\":1,\"6958\":1,\"6960\":1,\"7527\":1,\"7655\":6}}],[\"a\",{\"0\":{\"2359\":1,\"2363\":1,\"4441\":1,\"6920\":1,\"6963\":1,\"7005\":1,\"7050\":1,\"7190\":1},\"1\":{\"1029\":1,\"1491\":1,\"1494\":1,\"1496\":1,\"1556\":1,\"1559\":2,\"1800\":1,\"1804\":3,\"1808\":1,\"1811\":1,\"1814\":1,\"1820\":1,\"1823\":1,\"1825\":1,\"1832\":4,\"1850\":2,\"1853\":2,\"1856\":3,\"1859\":3,\"1950\":2,\"1953\":2,\"1956\":2,\"1959\":1,\"1963\":1,\"1966\":1,\"1971\":1,\"1975\":1,\"1985\":1,\"1989\":1,\"2036\":2,\"2042\":2,\"2048\":2,\"2062\":1,\"2087\":1,\"2098\":5,\"2109\":1,\"2114\":1,\"2121\":1,\"2282\":1,\"2314\":2,\"2354\":1,\"2362\":1,\"2365\":1,\"2370\":1,\"2379\":1,\"2382\":2,\"2387\":1,\"2391\":4,\"2446\":1,\"2530\":2,\"2537\":3,\"2546\":2,\"2549\":2,\"2552\":1,\"2555\":1,\"2563\":3,\"2566\":4,\"2569\":3,\"2589\":2,\"2595\":1,\"2601\":1,\"2606\":1,\"2621\":4,\"2683\":1,\"2692\":3,\"2697\":3,\"2700\":1,\"2760\":2,\"3125\":1,\"3162\":1,\"3182\":1,\"3241\":2,\"3245\":2,\"3282\":1,\"3821\":2,\"3976\":2,\"3980\":1,\"3985\":2,\"3987\":1,\"4001\":1,\"4002\":1,\"4061\":3,\"4189\":2,\"4227\":1,\"4248\":5,\"4358\":5,\"4479\":1,\"4517\":1,\"4520\":1,\"4613\":1,\"4658\":2,\"4661\":2,\"4722\":2,\"5033\":1,\"5060\":1,\"5129\":2,\"5384\":1,\"5426\":1,\"6088\":1,\"6089\":1,\"6091\":1,\"6092\":1,\"6239\":2,\"6251\":1,\"6254\":1,\"6348\":1,\"6385\":1,\"6388\":1,\"6394\":1,\"6398\":2,\"6516\":2,\"6744\":1,\"6745\":1,\"6746\":1,\"6747\":1,\"6872\":1,\"7009\":1,\"7038\":1,\"7106\":2,\"7303\":1,\"7568\":1,\"7572\":1,\"8617\":1,\"9095\":1,\"9099\":1,\"9234\":1,\"9260\":1,\"9262\":2,\"10099\":1,\"10372\":1,\"10526\":1,\"10585\":2}}],[\"adapter\",{\"1\":{\"4603\":1}}],[\"admin库的管理用户\",{\"1\":{\"10708\":1}}],[\"admin数据库\",{\"1\":{\"10705\":1}}],[\"admin>\",{\"1\":{\"10703\":1,\"10711\":1,\"10722\":1,\"10724\":1,\"10734\":1,\"10766\":1}}],[\"admincommand\",{\"1\":{\"10588\":1}}],[\"admin\",{\"1\":{\"981\":2,\"1008\":2,\"10167\":1,\"10205\":1,\"10654\":1,\"10703\":2,\"10708\":1,\"10711\":2,\"10714\":3,\"10726\":11,\"10734\":1,\"10753\":1,\"10766\":1,\"10843\":1,\"10846\":1}}],[\"additional\",{\"1\":{\"10864\":1}}],[\"addinnerinterceptor\",{\"1\":{\"1234\":1}}],[\"addarb\",{\"1\":{\"10578\":1,\"10580\":1}}],[\"addall\",{\"0\":{\"2405\":1,\"2538\":1},\"1\":{\"2407\":2,\"2546\":2}}],[\"addcookie\",{\"1\":{\"9684\":2,\"9693\":1,\"9714\":2,\"9717\":1,\"9726\":1,\"9774\":1}}],[\"addjarpkg\",{\"1\":{\"9500\":1}}],[\"addbath\",{\"1\":{\"8096\":1,\"8099\":1,\"8102\":1}}],[\"addbatch\",{\"0\":{\"8094\":1},\"1\":{\"8121\":1,\"8126\":1}}],[\"add方法是有泛型限制的\",{\"1\":{\"5967\":1}}],[\"add添加数据\",{\"0\":{\"5668\":1}}],[\"add操作\",{\"0\":{\"5649\":1}}],[\"addxxxlistener\",{\"1\":{\"4577\":1}}],[\"add\",{\"0\":{\"1884\":1,\"2402\":1,\"2531\":1},\"1\":{\"1886\":2,\"2382\":1,\"2404\":3,\"2407\":4,\"2484\":3,\"2512\":7,\"2518\":3,\"2537\":4,\"4061\":10,\"4063\":1,\"5588\":3,\"5611\":3,\"5650\":1,\"5653\":1,\"5660\":1,\"5669\":1,\"5779\":8,\"5790\":4,\"5964\":5,\"5967\":4,\"6045\":1,\"6070\":3,\"6073\":3,\"6078\":4,\"6081\":4,\"7655\":8,\"7828\":1,\"8054\":1,\"8201\":1,\"8537\":1,\"8699\":1,\"10565\":1,\"10573\":1}}],[\"addresourcelocations\",{\"1\":{\"1376\":2}}],[\"addresourcehandler\",{\"1\":{\"1376\":2}}],[\"addresourcehandlers\",{\"1\":{\"1376\":1}}],[\"address\",{\"0\":{\"1347\":1},\"1\":{\"620\":3,\"628\":1,\"1325\":1,\"6769\":1,\"6801\":1,\"6858\":1,\"8450\":1}}],[\"addeed\",{\"1\":{\"324\":1}}],[\"already\",{\"1\":{\"8450\":1}}],[\"alt\",{\"1\":{\"7324\":1}}],[\"alen\",{\"1\":{\"6962\":2}}],[\"allowed\",{\"1\":{\"8079\":1}}],[\"allmatch\",{\"0\":{\"7675\":1},\"1\":{\"7678\":2}}],[\"allen=a\",{\"1\":{\"2589\":2,\"2592\":2,\"2595\":1,\"2598\":1,\"2601\":1,\"2604\":1,\"2606\":1,\"2609\":1,\"2612\":1,\"2615\":2,\"2618\":1,\"2621\":1,\"2624\":2}}],[\"allen\",{\"1\":{\"2589\":1,\"2595\":3,\"2601\":3,\"2618\":2}}],[\"allargscontructor\",{\"1\":{\"1215\":1}}],[\"all\",{\"1\":{\"952\":2,\"5056\":1}}],[\"alipay\",{\"1\":{\"4823\":1}}],[\"alibaba\",{\"1\":{\"8260\":1}}],[\"alibaba<\",{\"1\":{\"967\":1,\"978\":1,\"1005\":1,\"1145\":1,\"1169\":1,\"1177\":1,\"1361\":2,\"9818\":1}}],[\"alibaba最新的稳定版需要的是springboot\",{\"1\":{\"321\":1}}],[\"aliyun<\",{\"1\":{\"1172\":2}}],[\"aliyun\",{\"1\":{\"329\":1}}],[\"aifaceapplicationtests\",{\"1\":{\"656\":1}}],[\"aifaceapplication\",{\"1\":{\"425\":2}}],[\"async\",{\"1\":{\"9294\":1}}],[\"asp\",{\"1\":{\"8403\":1}}],[\"aspect\",{\"0\":{\"7299\":1}}],[\"aspectj\",{\"1\":{\"397\":1}}],[\"ascii\",{\"1\":{\"3124\":1,\"3129\":1,\"6416\":1}}],[\"aslist方法快速生成一个list集合\",{\"1\":{\"2529\":1}}],[\"aslist\",{\"0\":{\"2380\":1,\"2388\":1,\"2528\":1},\"1\":{\"2382\":2,\"2391\":2,\"2530\":1,\"7634\":1,\"7655\":1,\"7670\":1,\"7708\":1,\"7712\":1}}],[\"asin\",{\"1\":{\"1837\":1}}],[\"asshole\",{\"1\":{\"2974\":1}}],[\"assign\",{\"1\":{\"1364\":1}}],[\"assertj\",{\"1\":{\"397\":1}}],[\"analyze\",{\"1\":{\"10416\":1}}],[\"an\",{\"1\":{\"8358\":1,\"9899\":1,\"10744\":1}}],[\"any\",{\"1\":{\"7688\":2}}],[\"anymatch\",{\"0\":{\"7679\":1},\"1\":{\"7680\":2}}],[\"annos\",{\"1\":{\"7106\":2,\"7143\":2}}],[\"anno\",{\"1\":{\"2256\":2}}],[\"annotations\",{\"1\":{\"5060\":2,\"7143\":2}}],[\"annotation在反射函数中的使用示例\",{\"1\":{\"5060\":1}}],[\"annotationtest\",{\"1\":{\"5060\":1}}],[\"annotationtest<\",{\"1\":{\"5033\":1}}],[\"annotationtype\",{\"1\":{\"4957\":1}}],[\"annotation类将被javadoc\",{\"1\":{\"5000\":1}}],[\"annotation类型\",{\"1\":{\"4971\":1}}],[\"annotation的生命周期\",{\"0\":{\"4982\":1}}],[\"annotation信息仅存在于编译器处理期间\",{\"1\":{\"4968\":1}}],[\"annotation有了某种用途\",{\"1\":{\"4960\":1}}],[\"annotation>\",{\"1\":{\"4957\":1}}],[\"annotation接口\",{\"1\":{\"4957\":1}}],[\"annotation组成部分\",{\"0\":{\"4953\":1}}],[\"annotation其实就是代码里的特殊标记\",{\"1\":{\"4880\":1}}],[\"annotation\",{\"0\":{\"4876\":1,\"4954\":1},\"1\":{\"2256\":2,\"4625\":1,\"4883\":2,\"4889\":2,\"4897\":1,\"4922\":2,\"4923\":1,\"4947\":1,\"4949\":1,\"4950\":1,\"4951\":1,\"4952\":1,\"4955\":1,\"4956\":1,\"4957\":2,\"4959\":1,\"4960\":4,\"4961\":2,\"4963\":3,\"4964\":2,\"4966\":2,\"4967\":1,\"4968\":1,\"4971\":1,\"4972\":1,\"4977\":1,\"4978\":2,\"4987\":2,\"4988\":1,\"5000\":1,\"5005\":2,\"5040\":1,\"5058\":2,\"5060\":11,\"6986\":1,\"7106\":2,\"7143\":2}}],[\"annotatedelement\",{\"1\":{\"2129\":1}}],[\"anonymous\",{\"1\":{\"7763\":2}}],[\"anotherxxx\",{\"1\":{\"1853\":1}}],[\"anotherinteger\",{\"1\":{\"1763\":2}}],[\"anotherstring\",{\"1\":{\"1449\":1,\"1763\":3}}],[\"anothrerstring\",{\"1\":{\"1427\":1}}],[\"ano\",{\"1\":{\"746\":2,\"8452\":1}}],[\"antlr2\",{\"1\":{\"397\":1}}],[\"android中注解占据了更重要的角色\",{\"1\":{\"4886\":1}}],[\"android\",{\"1\":{\"2810\":1}}],[\"and\",{\"1\":{\"355\":1,\"1480\":2,\"7889\":1,\"7893\":1,\"8597\":1,\"8601\":1,\"10585\":1}}],[\"apache\",{\"0\":{\"8328\":1},\"1\":{\"397\":4,\"1229\":1,\"1364\":1,\"8331\":1,\"8335\":1,\"8336\":1,\"8337\":1,\"8548\":1,\"9837\":1}}],[\"appdata\",{\"1\":{\"8617\":1}}],[\"appliedoptime\",{\"1\":{\"10554\":1}}],[\"application域对象\",{\"0\":{\"9204\":1}}],[\"application项目的目录结构稍有不同\",{\"1\":{\"8532\":1}}],[\"application\",{\"0\":{\"8588\":1},\"1\":{\"336\":1,\"455\":1,\"468\":3,\"577\":1,\"723\":1,\"732\":1,\"789\":1,\"790\":1,\"803\":1,\"836\":1,\"837\":1,\"838\":1,\"839\":1,\"848\":1,\"849\":1,\"850\":1,\"981\":1,\"1008\":1,\"1102\":1,\"1119\":3,\"1202\":1,\"1364\":1,\"4438\":1,\"8529\":1,\"8538\":1,\"8591\":1,\"8951\":1,\"9205\":1}}],[\"applet\",{\"1\":{\"8670\":1,\"9483\":1}}],[\"applet程序或者应用来使用这些对象\",{\"1\":{\"4579\":1}}],[\"apply\",{\"1\":{\"2639\":1,\"7434\":1,\"7517\":1,\"7520\":1,\"7525\":1,\"7527\":1,\"7535\":1,\"7537\":1}}],[\"append参数\",{\"1\":{\"2085\":1}}],[\"append\",{\"0\":{\"1582\":1},\"1\":{\"1559\":2,\"1584\":3,\"2087\":2,\"2090\":2,\"5426\":8}}],[\"appender>\",{\"1\":{\"952\":4}}],[\"appengine\",{\"1\":{\"397\":1}}],[\"api文档的httpservletrequest接口中方法说明\",{\"1\":{\"8916\":1}}],[\"api介绍\",{\"0\":{\"8334\":1}}],[\"api使用背景\",{\"0\":{\"7546\":1}}],[\"api是操作集合和数组的\",{\"1\":{\"7540\":1}}],[\"api其实就是一套api\",{\"1\":{\"7540\":1}}],[\"api取得任何类的内部信息\",{\"1\":{\"6922\":1}}],[\"api中提供了两套nio\",{\"1\":{\"6582\":1}}],[\"api中创建线程的方式\",{\"0\":{\"5142\":1}}],[\"api提供了两个转换流的类\",{\"1\":{\"6367\":1}}],[\"api提供了带缓冲功能的流类\",{\"1\":{\"6309\":1}}],[\"api明确\",{\"1\":{\"5230\":1}}],[\"api开发\",{\"1\":{\"1274\":1}}],[\"api接口提供控制开关\",{\"1\":{\"1256\":1}}],[\"api<\",{\"1\":{\"642\":1}}],[\"api\",{\"0\":{\"7539\":1,\"7542\":1},\"1\":{\"218\":1,\"1119\":1,\"1622\":1,\"1623\":2,\"2994\":1,\"3928\":1,\"3957\":2,\"6581\":2,\"7543\":1,\"7545\":3,\"7700\":1,\"7808\":1,\"7809\":1,\"7810\":1,\"8682\":1,\"8685\":1,\"8699\":1,\"8740\":1}}],[\"arbiter表示仲裁节点\",{\"1\":{\"10583\":1}}],[\"arbiteronly\",{\"1\":{\"10541\":1,\"10546\":1,\"10565\":1,\"10569\":1}}],[\"arbiter\",{\"1\":{\"10457\":1,\"10481\":1,\"10583\":1}}],[\"archive\",{\"1\":{\"9468\":1}}],[\"archetypes\",{\"1\":{\"8548\":1}}],[\"archetype\",{\"1\":{\"8548\":2,\"8560\":1}}],[\"arithmeticexception\",{\"0\":{\"4721\":1},\"1\":{\"4699\":1}}],[\"area\",{\"1\":{\"4635\":1}}],[\"are\",{\"1\":{\"2962\":1,\"6285\":1}}],[\"arrstream\",{\"1\":{\"7575\":1}}],[\"arrs\",{\"1\":{\"6013\":1}}],[\"arr3\",{\"1\":{\"3563\":3,\"3591\":3}}],[\"arr2\",{\"1\":{\"2375\":3,\"2379\":2,\"3491\":1,\"3563\":2,\"3591\":2,\"5526\":1}}],[\"arr1\",{\"1\":{\"2354\":3,\"2362\":3,\"2365\":3,\"2370\":3,\"2375\":5,\"2379\":2,\"2387\":3,\"3491\":1,\"3563\":3,\"3591\":2,\"5526\":1}}],[\"array和object\",{\"1\":{\"10083\":1}}],[\"arrayhandler\",{\"1\":{\"8370\":1}}],[\"arrayindexoutofboundsexception\",{\"0\":{\"4711\":1},\"1\":{\"3587\":1,\"4699\":1,\"4751\":1}}],[\"array1\",{\"1\":{\"3484\":1,\"3486\":2}}],[\"array2\",{\"1\":{\"3484\":1,\"3486\":2}}],[\"arraylisthandler\",{\"1\":{\"8371\":1}}],[\"arraylist的底层做了一些改变\",{\"1\":{\"5658\":1}}],[\"arraylist的变化\",{\"0\":{\"5657\":1}}],[\"arraylist源码分析\",{\"0\":{\"5645\":1}}],[\"arraylist<t>\",{\"1\":{\"8054\":2,\"8201\":2}}],[\"arraylist<\",{\"1\":{\"6098\":1,\"6102\":2}}],[\"arraylist<object>\",{\"1\":{\"6094\":1}}],[\"arraylist<person>\",{\"1\":{\"6094\":1}}],[\"arraylist<man>\",{\"1\":{\"6094\":1}}],[\"arraylist<e>\",{\"1\":{\"6045\":1}}],[\"arraylist<string>\",{\"1\":{\"5994\":1,\"6005\":2,\"6054\":1,\"6057\":1,\"6078\":1,\"6081\":1}}],[\"arraylist<integer>\",{\"1\":{\"2512\":1,\"5967\":1,\"6005\":1,\"6078\":1,\"6081\":1}}],[\"arraylist<>\",{\"1\":{\"2391\":1,\"2404\":1,\"2407\":2,\"2484\":1,\"2512\":2,\"2518\":1,\"2537\":1,\"5967\":1,\"5994\":1,\"6005\":3,\"6045\":1,\"6073\":1,\"6078\":2,\"6081\":2,\"7655\":3}}],[\"arraylist$itr\",{\"1\":{\"2449\":1}}],[\"arraylist\",{\"0\":{\"5633\":1},\"1\":{\"2389\":1,\"2399\":1,\"2558\":1,\"2951\":1,\"2954\":1,\"5545\":1,\"5562\":1,\"5588\":1,\"5611\":1,\"5632\":1,\"5648\":2,\"5656\":2,\"5660\":2,\"5964\":2}}],[\"arraylist中重写了这些方法\",{\"1\":{\"2384\":1}}],[\"array\",{\"1\":{\"2351\":1,\"3037\":1,\"3461\":1,\"7575\":1,\"7578\":1,\"7579\":1,\"7580\":1,\"7917\":1,\"10246\":1}}],[\"arrays工具类\",{\"0\":{\"3592\":1},\"1\":{\"3594\":1}}],[\"arrays$arraylist和arraylist都是继承abstractlist\",{\"1\":{\"2384\":1}}],[\"arrays类重写了object类中的equals\",{\"1\":{\"2377\":1}}],[\"arrays类即为操作数组的工具类\",{\"1\":{\"2349\":1}}],[\"arrays\",{\"0\":{\"2346\":1,\"2528\":1},\"1\":{\"135\":1,\"1494\":1,\"1502\":2,\"1773\":2,\"1788\":4,\"1791\":2,\"1971\":1,\"1975\":1,\"2048\":1,\"2162\":1,\"2175\":1,\"2178\":1,\"2185\":1,\"2188\":1,\"2197\":1,\"2200\":1,\"2256\":1,\"2272\":1,\"2275\":1,\"2348\":1,\"2351\":1,\"2354\":1,\"2362\":2,\"2365\":2,\"2370\":2,\"2375\":3,\"2379\":1,\"2382\":1,\"2387\":2,\"2391\":1,\"2444\":1,\"2530\":1,\"2760\":1,\"4410\":1,\"6398\":1,\"7574\":1,\"7575\":1,\"7577\":1,\"7634\":1,\"7655\":1,\"7670\":1,\"7708\":1,\"7712\":1}}],[\"arr\",{\"1\":{\"1491\":2,\"1496\":2,\"1788\":5,\"2382\":2,\"2446\":1,\"3509\":1,\"3537\":2,\"3538\":2,\"3541\":4,\"3544\":2,\"3545\":1,\"3550\":1,\"3556\":3,\"3560\":4,\"3567\":3,\"3570\":3,\"3588\":3,\"4061\":2,\"4670\":1,\"4709\":2,\"4712\":2,\"4751\":2,\"5526\":1,\"5614\":2,\"5618\":5,\"5620\":4,\"6045\":2,\"6047\":1,\"6618\":1,\"7575\":2}}],[\"arg2\",{\"1\":{\"7388\":1,\"7393\":1}}],[\"arg1\",{\"1\":{\"7375\":1,\"7380\":1,\"7384\":1,\"7388\":1,\"7393\":1}}],[\"argumengts\",{\"1\":{\"3790\":1}}],[\"arguments选项框的\",{\"1\":{\"776\":1}}],[\"arguments就是输入临时属性的\",{\"1\":{\"775\":1}}],[\"arg\",{\"1\":{\"781\":3}}],[\"args数组\",{\"1\":{\"4614\":1}}],[\"args\",{\"1\":{\"425\":2,\"427\":1,\"430\":2,\"584\":1,\"781\":4,\"2282\":1,\"2882\":1,\"3405\":1,\"3414\":1,\"3457\":1,\"3636\":1,\"3664\":1,\"3738\":1,\"3747\":1,\"3782\":1,\"3816\":1,\"3821\":1,\"3987\":1,\"4142\":1,\"4164\":1,\"4356\":1,\"4358\":1,\"4459\":1,\"4670\":2,\"4777\":1,\"4803\":1,\"5060\":1,\"5185\":1,\"5219\":1,\"5221\":1,\"5253\":1,\"5263\":1,\"5310\":1,\"5322\":1,\"5345\":1,\"5396\":1,\"5426\":1,\"5464\":1,\"5486\":1,\"5517\":1,\"6001\":1,\"7106\":2,\"7120\":3,\"7176\":1,\"7231\":1,\"7279\":2,\"7307\":2,\"7989\":3,\"8045\":3,\"8054\":3,\"8146\":3,\"8201\":12}}],[\"articel\",{\"1\":{\"10603\":1}}],[\"article\",{\"1\":{\"10603\":2,\"10703\":1,\"10718\":1,\"10726\":1,\"10843\":1,\"10846\":1}}],[\"article>\",{\"1\":{\"10603\":1}}],[\"articleid\",{\"1\":{\"10252\":1,\"10264\":2,\"10290\":1,\"10293\":1,\"10603\":1}}],[\"artifacts配置\",{\"0\":{\"8634\":1}}],[\"artifacts\",{\"1\":{\"8505\":1,\"8543\":1,\"8635\":1,\"9506\":1,\"9513\":1}}],[\"artifactid>\",{\"1\":{\"347\":1,\"391\":1,\"394\":1,\"397\":5,\"412\":5,\"446\":2,\"450\":1,\"550\":1,\"614\":1,\"642\":2,\"653\":1,\"703\":1,\"967\":1,\"978\":3,\"1005\":3,\"1019\":1,\"1046\":1,\"1129\":1,\"1132\":1,\"1135\":1,\"1138\":1,\"1142\":1,\"1145\":1,\"1148\":1,\"1151\":1,\"1154\":1,\"1158\":1,\"1161\":1,\"1164\":1,\"1167\":1,\"1169\":1,\"1172\":2,\"1177\":12,\"1217\":1,\"1361\":9,\"9818\":1,\"10829\":1,\"10839\":1}}],[\"artifact\",{\"1\":{\"312\":1,\"8528\":1}}],[\"artemis\",{\"1\":{\"397\":1}}],[\"huge\",{\"1\":{\"10030\":1}}],[\"humanutil\",{\"1\":{\"7307\":3}}],[\"human\",{\"1\":{\"7282\":1,\"7284\":2,\"7287\":1}}],[\"hse\",{\"1\":{\"9344\":1,\"9346\":1}}],[\"hg\",{\"1\":{\"3664\":2}}],[\"h\",{\"1\":{\"3118\":1,\"7266\":1}}],[\"h1>\",{\"1\":{\"2962\":1,\"2974\":1,\"8623\":1}}],[\"hex\",{\"1\":{\"10554\":1,\"10573\":1,\"10580\":1,\"10657\":1,\"10660\":1}}],[\"heima\",{\"1\":{\"9642\":1,\"9645\":1}}],[\"health\",{\"1\":{\"10554\":1,\"10560\":1,\"10576\":1,\"10583\":1}}],[\"heartbeattimeoutsecs\",{\"1\":{\"10541\":1}}],[\"heartbeatintervalmillis\",{\"1\":{\"10541\":1,\"10554\":1}}],[\"headers\",{\"1\":{\"8955\":3}}],[\"head\",{\"1\":{\"8806\":2}}],[\"heap\",{\"1\":{\"4632\":1}}],[\"hehe\",{\"1\":{\"8477\":1}}],[\"here\",{\"1\":{\"2962\":1}}],[\"he\",{\"1\":{\"2601\":3,\"8381\":1}}],[\"hel\",{\"1\":{\"1435\":1,\"1438\":1}}],[\"hello2\",{\"1\":{\"6287\":1}}],[\"hellothread\",{\"1\":{\"5219\":5,\"5221\":3,\"5253\":3}}],[\"hellogay\",{\"1\":{\"3664\":3}}],[\"hellogoogle\",{\"1\":{\"1431\":1}}],[\"hello1\",{\"1\":{\"4753\":1,\"4777\":1}}],[\"hello10a\",{\"1\":{\"3241\":1}}],[\"hello1235\",{\"1\":{\"1048\":1}}],[\"hello1234\",{\"1\":{\"1021\":1}}],[\"hello<e>\",{\"1\":{\"2962\":1}}],[\"helloworld\",{\"1\":{\"486\":1,\"6872\":1}}],[\"hello\",{\"1\":{\"372\":2,\"486\":1,\"1452\":1,\"1455\":1,\"1458\":1,\"1475\":2,\"1581\":1,\"1584\":3,\"1589\":1,\"1595\":2,\"1601\":1,\"1604\":1,\"1946\":1,\"2331\":2,\"2436\":1,\"2788\":2,\"2882\":2,\"2891\":1,\"2894\":1,\"2916\":3,\"2918\":3,\"2962\":1,\"2974\":1,\"3241\":1,\"3664\":1,\"3738\":1,\"3747\":1,\"4356\":2,\"4661\":3,\"4724\":1,\"4918\":1,\"4943\":1,\"6132\":2,\"6287\":1,\"6526\":1,\"6803\":1,\"6840\":1,\"7377\":1,\"7462\":1,\"7583\":1,\"8477\":1,\"8483\":1,\"8704\":1,\"8772\":1,\"9078\":1,\"9079\":1,\"9122\":1,\"9124\":1,\"9693\":1,\"9714\":1,\"10348\":1}}],[\"help\",{\"1\":{\"340\":1}}],[\"hm=\",{\"1\":{\"2592\":1,\"2595\":1,\"2598\":1,\"2601\":1,\"2604\":1,\"2606\":1,\"2609\":1,\"2612\":1,\"2615\":1,\"2618\":1,\"2621\":1,\"2624\":1}}],[\"hm2=\",{\"1\":{\"2592\":1,\"2615\":1}}],[\"hm2\",{\"1\":{\"2592\":2,\"2615\":1}}],[\"hm\",{\"1\":{\"2589\":6,\"2592\":3,\"2595\":3,\"2598\":2,\"2601\":2,\"2604\":2,\"2606\":2,\"2609\":1,\"2612\":3,\"2615\":1,\"2618\":1,\"2621\":1,\"2624\":1}}],[\"handle\",{\"1\":{\"8368\":1,\"8389\":2}}],[\"handler\",{\"1\":{\"7277\":3,\"8358\":2,\"8385\":2,\"8387\":2,\"8389\":2,\"8391\":4}}],[\"hahstable的子类\",{\"1\":{\"5839\":1}}],[\"hahscode\",{\"0\":{\"5749\":1}}],[\"hahaha\",{\"1\":{\"4777\":1}}],[\"hasmoreelements\",{\"1\":{\"8955\":1}}],[\"hasnext\",{\"0\":{\"2459\":1},\"1\":{\"2461\":2,\"2618\":1,\"2624\":1,\"5594\":1,\"5595\":1,\"5604\":1,\"5779\":1,\"5913\":1,\"5967\":1,\"5970\":1,\"6078\":1,\"6081\":1}}],[\"hasnextline\",{\"1\":{\"2322\":1,\"2779\":1}}],[\"hashed\",{\"1\":{\"10373\":1}}],[\"hash值相同\",{\"1\":{\"5737\":1}}],[\"hash值不同\",{\"1\":{\"5736\":1}}],[\"hash\",{\"1\":{\"5698\":1,\"9895\":1,\"10554\":1,\"10573\":1,\"10580\":1,\"10657\":1,\"10660\":1}}],[\"hashnext\",{\"0\":{\"5585\":1}}],[\"hashtable\",{\"0\":{\"5835\":1},\"1\":{\"2576\":1,\"5549\":1,\"5810\":1,\"7853\":1}}],[\"hashmap扩容和结构改变的次数\",{\"1\":{\"5893\":1}}],[\"hashmap中存储的键值对的数量\",{\"1\":{\"5892\":1}}],[\"hashmap的默认加载因子\",{\"1\":{\"5887\":1}}],[\"hashmap的默认容量\",{\"1\":{\"5885\":1}}],[\"hashmap的最大支持容量\",{\"1\":{\"5886\":1}}],[\"hashmap底层\",{\"0\":{\"5852\":1}}],[\"hashmap是数组+链表+红黑树实现\",{\"1\":{\"5872\":1}}],[\"hashmap是数组+链表结构\",{\"1\":{\"5870\":1}}],[\"hashmap是无序的\",{\"1\":{\"5822\":1}}],[\"hashmap是\",{\"1\":{\"5804\":1}}],[\"hashmap<integer\",{\"1\":{\"5856\":1}}],[\"hashmap<string\",{\"1\":{\"2592\":1,\"5970\":1}}],[\"hashmap<>\",{\"1\":{\"2592\":2,\"5856\":1,\"5970\":1}}],[\"hashmap\",{\"0\":{\"5813\":1},\"1\":{\"2576\":1,\"5549\":1,\"5803\":1,\"5807\":1,\"5818\":1,\"5820\":1,\"5825\":1,\"5876\":1}}],[\"hashset底层是以数组+链表的形式储存的\",{\"1\":{\"5741\":1}}],[\"hashset的子类\",{\"0\":{\"5707\":1}}],[\"hashset\",{\"0\":{\"5695\":1,\"5704\":1},\"1\":{\"2399\":1,\"5547\":1,\"5688\":1,\"5696\":1,\"5698\":1,\"5702\":1,\"5710\":1,\"5748\":1,\"5776\":1}}],[\"hashcode相同\",{\"1\":{\"5760\":1}}],[\"hashcode与值\",{\"0\":{\"5759\":1}}],[\"hashcode与equals的重写\",{\"0\":{\"5747\":1}}],[\"hashcode\",{\"1\":{\"1214\":1,\"4213\":1,\"4253\":1,\"4957\":1,\"5705\":1,\"5711\":1,\"5758\":1,\"5775\":1,\"5818\":1,\"7618\":1}}],[\"hashoperations\",{\"1\":{\"1029\":1}}],[\"hashredis\",{\"1\":{\"1029\":1}}],[\"half\",{\"1\":{\"1922\":1,\"1925\":1,\"1928\":1}}],[\"h5\",{\"1\":{\"1390\":1}}],[\"ht1\",{\"1\":{\"5219\":3,\"5221\":3,\"5253\":3}}],[\"html是展示数据\",{\"1\":{\"9596\":1}}],[\"html语法松散\",{\"1\":{\"9595\":1}}],[\"html标签是预定义\",{\"1\":{\"9594\":1}}],[\"html就可以查看文档了\",{\"1\":{\"2982\":1}}],[\"html\",{\"1\":{\"1378\":1,\"2940\":1,\"6594\":2,\"6883\":3,\"8401\":1,\"8469\":1,\"8623\":2,\"8951\":1,\"8988\":1,\"9082\":2,\"9085\":1,\"9101\":1,\"9229\":2}}],[\"http请求头的数据是键值对的形式key\",{\"1\":{\"8946\":1}}],[\"http协议\",{\"1\":{\"9892\":1}}],[\"http协议设计成无状态的目的是让每次请求之间相互独立\",{\"1\":{\"9667\":1}}],[\"http协议是无状态的\",{\"1\":{\"9667\":1}}],[\"http协议及版本\",{\"1\":{\"8926\":1}}],[\"http协议默认端口号为80\",{\"1\":{\"8442\":1}}],[\"http的请求中会包含很多请求数据\",{\"1\":{\"8889\":1}}],[\"httpclient\",{\"0\":{\"7778\":1}}],[\"http占用端口80\",{\"1\":{\"6683\":1}}],[\"http\",{\"0\":{\"9903\":1},\"1\":{\"1378\":1,\"6872\":1,\"6883\":3,\"6899\":1,\"8458\":2,\"8468\":1,\"8471\":1,\"8478\":1,\"8594\":1,\"8602\":1,\"8710\":1,\"8843\":1,\"8939\":1,\"8943\":1,\"8944\":2,\"9078\":1,\"9084\":1,\"9121\":1,\"9147\":1,\"9642\":3,\"9645\":4,\"9893\":1,\"9898\":1,\"9899\":1,\"9902\":2}}],[\"httpsessionactivationlistener\",{\"0\":{\"9432\":1}}],[\"httpsessionattributelistener\",{\"0\":{\"9377\":1}}],[\"httpsessionbindinglistener\",{\"0\":{\"9415\":1}}],[\"httpsessionbindingevent对象代表属性变化事件\",{\"1\":{\"9387\":1,\"9423\":1}}],[\"httpsessionbindingevent\",{\"1\":{\"9381\":1,\"9383\":1,\"9385\":1,\"9419\":1,\"9421\":1}}],[\"httpsession对象的方法\",{\"0\":{\"9751\":1}}],[\"httpsession对象销毁时调用\",{\"1\":{\"9347\":1}}],[\"httpsession对象创建时调用\",{\"1\":{\"9345\":1}}],[\"httpsessionevent对象代表事件对象\",{\"1\":{\"9440\":1}}],[\"httpsessionevent对象代表从httpsession对象身上捕获到的事件\",{\"1\":{\"9348\":1}}],[\"httpsessionevent\",{\"1\":{\"9344\":1,\"9346\":1,\"9436\":1,\"9438\":1}}],[\"httpsessionlistener\",{\"0\":{\"9340\":1}}],[\"httpsession\",{\"1\":{\"9196\":1,\"9323\":1,\"9750\":2,\"9760\":1}}],[\"httpservlet中为什么要根据请求方式的不同\",{\"1\":{\"8814\":1}}],[\"httpservlet中也对每种请求方式做了定义\",{\"1\":{\"8804\":1}}],[\"httpservlet的原理\",{\"0\":{\"8813\":1}}],[\"httpservlet的使用\",{\"0\":{\"8800\":1}}],[\"httpservletresponse\",{\"1\":{\"8809\":2,\"8912\":1,\"8944\":2,\"8951\":1,\"8955\":1,\"8990\":1,\"9004\":2,\"9027\":2,\"9031\":2,\"9079\":1,\"9124\":2,\"9143\":1,\"9145\":1,\"9220\":1,\"9234\":1,\"9249\":1,\"9262\":1,\"9693\":1,\"9695\":1,\"9750\":1}}],[\"httpservletrequest\",{\"1\":{\"8809\":2,\"8817\":2,\"8912\":1,\"8944\":2,\"8951\":1,\"8955\":1,\"8990\":1,\"9004\":2,\"9027\":2,\"9031\":2,\"9079\":1,\"9124\":2,\"9143\":1,\"9145\":1,\"9220\":1,\"9234\":1,\"9249\":1,\"9262\":1,\"9693\":1,\"9695\":1,\"9750\":1}}],[\"httpservlet\",{\"1\":{\"8809\":1,\"8817\":1,\"8944\":1,\"9004\":1,\"9027\":1,\"9031\":1,\"9079\":1,\"9124\":2,\"9143\":1,\"9145\":1,\"9224\":1}}],[\"httpservlet类中没有抽象方法\",{\"1\":{\"8802\":1}}],[\"httpservlet是抽象类\",{\"1\":{\"8801\":1}}],[\"httpservlet是对http协议的一种封装\",{\"1\":{\"8797\":1,\"8824\":1}}],[\"httpservlet抽象类\",{\"0\":{\"8795\":1},\"1\":{\"8790\":1}}],[\"https协议的默认端口号是443\",{\"1\":{\"8442\":1}}],[\"https\",{\"1\":{\"329\":1,\"9899\":1,\"10016\":1,\"10128\":1,\"10177\":1,\"10184\":1}}],[\"http操作\",{\"1\":{\"213\":1}}],[\"hobbies\",{\"1\":{\"9027\":2}}],[\"hobby\",{\"1\":{\"9025\":2,\"9027\":3}}],[\"hobbyl\",{\"1\":{\"3794\":1}}],[\"housenum\",{\"1\":{\"3082\":1}}],[\"hour\",{\"1\":{\"1651\":2,\"1654\":2,\"1657\":2,\"1660\":2,\"1663\":1}}],[\"hours\",{\"1\":{\"631\":1}}],[\"how\",{\"1\":{\"2962\":1,\"6616\":1,\"6621\":1,\"6630\":2,\"6632\":1,\"6633\":1}}],[\"home这个变量\",{\"1\":{\"2864\":1}}],[\"home环境变量是否正确配置\",{\"1\":{\"8455\":1}}],[\"home环境变量\",{\"1\":{\"2863\":1}}],[\"home\",{\"0\":{\"2862\":1},\"1\":{\"2314\":2,\"8433\":1}}],[\"hostinfo\",{\"1\":{\"10744\":1}}],[\"hostmanager\",{\"1\":{\"10668\":1}}],[\"host=\",{\"1\":{\"10597\":3}}],[\"hostname\",{\"0\":{\"6675\":1},\"1\":{\"6674\":1,\"6691\":1,\"6708\":2}}],[\"hostaddress\",{\"0\":{\"6662\":1},\"1\":{\"6674\":1,\"6692\":1}}],[\"host\",{\"1\":{\"1021\":1,\"1048\":1,\"1051\":1,\"6703\":1,\"6772\":1,\"6801\":1,\"6880\":1,\"6883\":2,\"8951\":3,\"8957\":1,\"10541\":1,\"10545\":1,\"10565\":1,\"10566\":1,\"10578\":1,\"10843\":1}}],[\"high\",{\"1\":{\"10029\":1,\"10031\":2}}],[\"highlight\",{\"1\":{\"952\":1}}],[\"hidden\",{\"1\":{\"1993\":1,\"10541\":1}}],[\"hi\",{\"1\":{\"1946\":1,\"2916\":1,\"2918\":2,\"5011\":1,\"5015\":2,\"6132\":2,\"7468\":1,\"9714\":1}}],[\"hibernate官方推荐使用\",{\"1\":{\"8244\":1}}],[\"hibernate3已不再提供支持\",{\"1\":{\"8243\":1}}],[\"hibernate3\",{\"1\":{\"4887\":1}}],[\"hibernate\",{\"1\":{\"642\":1,\"7796\":1}}],[\"hh\",{\"1\":{\"952\":4,\"1650\":1,\"1722\":1,\"1723\":1,\"1725\":1,\"1727\":1}}],[\"hystrix\",{\"1\":{\"23\":1}}],[\"nickname\",{\"1\":{\"10399\":3,\"10406\":1}}],[\"nike\",{\"1\":{\"7231\":2}}],[\"nikeclothfactory\",{\"1\":{\"7229\":1,\"7231\":1}}],[\"nike工厂生产一批运动服\",{\"1\":{\"7229\":1}}],[\"nike工厂\",{\"1\":{\"7219\":1}}],[\"nio已经成为文件处理中越来越重要的部分\",{\"1\":{\"6589\":1}}],[\"nio将以更加高效的方式进行文件的读写操作\",{\"1\":{\"6581\":1}}],[\"nio支持面向缓冲区的\",{\"1\":{\"6581\":1}}],[\"nio与原来的io有同样的作用和目的\",{\"1\":{\"6581\":1}}],[\"nio\",{\"0\":{\"6588\":1},\"1\":{\"6581\":1,\"6583\":1,\"6589\":2,\"6593\":1,\"6594\":2,\"6596\":2,\"6615\":1}}],[\"nio概述\",{\"0\":{\"6580\":1}}],[\"nio2\",{\"0\":{\"6579\":1}}],[\"nio2与jar包\",{\"0\":{\"6578\":1}}],[\"nchars\",{\"1\":{\"6331\":1,\"6334\":1}}],[\"ns\",{\"1\":{\"5486\":2}}],[\"nsomebody\",{\"1\":{\"5060\":1}}],[\"nt1\",{\"1\":{\"5464\":3}}],[\"n个子类适用于同一个方法\",{\"1\":{\"4136\":1}}],[\"n是没有关联的\",{\"1\":{\"3783\":1}}],[\"n和原始数据m\",{\"1\":{\"3783\":1}}],[\"n的值\",{\"1\":{\"3783\":1}}],[\"n传递给方法后\",{\"1\":{\"3783\":1}}],[\"n次\",{\"1\":{\"3449\":1}}],[\"n大\",{\"1\":{\"3319\":1,\"3322\":1}}],[\"n也没用\",{\"1\":{\"2724\":1}}],[\"n2的结果是int类型的\",{\"1\":{\"3253\":1}}],[\"n2\",{\"1\":{\"1814\":2,\"3253\":3}}],[\"n1\",{\"1\":{\"1814\":2,\"3253\":4}}],[\"numvotesneeded\",{\"1\":{\"10554\":1}}],[\"num+1\",{\"1\":{\"9249\":1}}],[\"num++\",{\"1\":{\"3420\":1,\"5464\":1}}],[\"numtestsperevictionrun\",{\"1\":{\"8311\":1}}],[\"numtest\",{\"1\":{\"5464\":3}}],[\"num的值从100~1有序递减\",{\"1\":{\"5324\":1}}],[\"num>0\",{\"1\":{\"5263\":1,\"5310\":1}}],[\"num是try里面的局部变量\",{\"1\":{\"4734\":1}}],[\"num3\",{\"1\":{\"4286\":1}}],[\"numsum\",{\"1\":{\"5486\":3}}],[\"nums=11\",{\"1\":{\"4943\":1}}],[\"nums=12\",{\"1\":{\"4943\":1}}],[\"nums\",{\"1\":{\"3499\":1,\"3500\":4,\"3506\":2,\"3512\":2,\"4918\":1}}],[\"num使用前必须先定义\",{\"1\":{\"3395\":1}}],[\"num2\",{\"1\":{\"3253\":2,\"4286\":2,\"4295\":1}}],[\"num1+0\",{\"1\":{\"3253\":1}}],[\"num1\",{\"1\":{\"3253\":1,\"4274\":2,\"4292\":2}}],[\"num\",{\"1\":{\"3241\":4,\"3393\":2,\"3420\":5,\"4080\":3,\"4718\":1,\"4734\":2,\"5263\":2,\"5310\":2,\"5322\":4,\"5332\":1,\"5345\":4,\"5396\":4,\"5464\":3,\"5486\":1,\"5967\":2,\"6819\":2,\"6949\":2,\"9249\":1,\"10331\":2}}],[\"numberint\",{\"1\":{\"10252\":1,\"10264\":2,\"10290\":1,\"10296\":1,\"10351\":1,\"10357\":2,\"10603\":1}}],[\"numbertype\",{\"1\":{\"9642\":2}}],[\"number=\",{\"1\":{\"9635\":1,\"9645\":1}}],[\"numberformatexception\",{\"0\":{\"4717\":1},\"1\":{\"4699\":1,\"4734\":1}}],[\"number类型转string类型\",{\"1\":{\"1855\":1}}],[\"number\",{\"0\":{\"1842\":1},\"1\":{\"1868\":1,\"1876\":1,\"3414\":3,\"3790\":1,\"9631\":1,\"9642\":2,\"9895\":1,\"10864\":1}}],[\"number`\",{\"1\":{\"1334\":1,\"1346\":1}}],[\"null的判断后\",{\"1\":{\"5348\":1}}],[\"null调用方法\",{\"1\":{\"3591\":1}}],[\"nullpointerexception\",{\"0\":{\"4708\":1},\"1\":{\"3590\":1,\"4699\":1,\"4734\":1,\"7123\":1}}],[\"null会被直接当做null字符串\",{\"1\":{\"1254\":1}}],[\"null\",{\"1\":{\"486\":2,\"1016\":1,\"1224\":1,\"1239\":1,\"1241\":1,\"1256\":2,\"1265\":1,\"1276\":1,\"1334\":12,\"1336\":8,\"1338\":14,\"1340\":13,\"1342\":12,\"1344\":9,\"1346\":6,\"1348\":19,\"1350\":10,\"1352\":14,\"1354\":9,\"2114\":1,\"2512\":5,\"2595\":1,\"2601\":1,\"2953\":1,\"2954\":1,\"3563\":1,\"3576\":1,\"3591\":2,\"3699\":1,\"4240\":1,\"4241\":3,\"4425\":2,\"4649\":1,\"4709\":2,\"4753\":2,\"5033\":1,\"5350\":4,\"5703\":1,\"6054\":1,\"6057\":3,\"6067\":3,\"6070\":1,\"6073\":1,\"6094\":2,\"6251\":2,\"6254\":2,\"6285\":1,\"6287\":4,\"6306\":4,\"6348\":3,\"6353\":4,\"6449\":2,\"6460\":3,\"6776\":1,\"6840\":2,\"6843\":2,\"7043\":2,\"7054\":1,\"7106\":1,\"7161\":1,\"7732\":1,\"7749\":2,\"7753\":1,\"7756\":1,\"7760\":2,\"7763\":1,\"7970\":4,\"7978\":2,\"7980\":2,\"7989\":2,\"8026\":1,\"8037\":3,\"8045\":4,\"8054\":4,\"8146\":2,\"8148\":3,\"8201\":15,\"8210\":14,\"8326\":2,\"8381\":1,\"8383\":1,\"8385\":1,\"8387\":1,\"8389\":2,\"8391\":1,\"9695\":1,\"10083\":1,\"10103\":1,\"10105\":1,\"10252\":1,\"10603\":1}}],[\"nonematch\",{\"0\":{\"7681\":1},\"1\":{\"7682\":2}}],[\"non\",{\"1\":{\"6581\":1}}],[\"nonpayment\",{\"1\":{\"4824\":1}}],[\"node\",{\"1\":{\"5672\":1,\"5878\":1,\"9840\":1}}],[\"node<e>\",{\"1\":{\"5672\":5}}],[\"node的定义\",{\"0\":{\"5670\":1}}],[\"norm\",{\"1\":{\"5244\":1}}],[\"nosuchfieldexception\",{\"1\":{\"2191\":1,\"2194\":1}}],[\"nosuchmethodexception\",{\"1\":{\"2181\":1,\"2204\":1,\"2211\":1}}],[\"nosql\",{\"0\":{\"1152\":1},\"1\":{\"1177\":1}}],[\"no\",{\"1\":{\"1894\":1,\"10526\":1}}],[\"now\",{\"0\":{\"1646\":1,\"1671\":1},\"1\":{\"1648\":3,\"1654\":1,\"1657\":1,\"1660\":1,\"1663\":1,\"1673\":4,\"1676\":4,\"1679\":3,\"1705\":1,\"1719\":1,\"1725\":1}}],[\"noargscontructor\",{\"1\":{\"1216\":1}}],[\"notexists\",{\"1\":{\"6629\":1}}],[\"notifyall\",{\"0\":{\"5448\":1},\"1\":{\"4217\":1,\"5441\":1,\"5453\":1,\"5454\":1,\"5455\":1}}],[\"notify\",{\"0\":{\"5448\":1},\"1\":{\"4216\":1,\"5440\":1,\"5444\":1,\"5449\":1,\"5453\":1,\"5454\":1,\"5455\":1,\"5464\":1}}],[\"not\",{\"1\":{\"624\":1,\"1334\":12,\"1336\":7,\"1338\":12,\"1340\":9,\"1342\":10,\"1344\":8,\"1346\":2,\"1348\":11,\"1350\":4,\"1352\":8,\"1354\":4,\"4553\":1}}],[\"n<\",{\"1\":{\"952\":3}}],[\"n\",{\"1\":{\"918\":1,\"923\":1,\"952\":1,\"1808\":2,\"1811\":2,\"2099\":1,\"2118\":1,\"2124\":1,\"2732\":1,\"3125\":2,\"3319\":2,\"3322\":3,\"3754\":4,\"3782\":5,\"3783\":1,\"3787\":3,\"3904\":1,\"5508\":1,\"5510\":1,\"5967\":4,\"6285\":1,\"6344\":1,\"6350\":1,\"7623\":1,\"7625\":3,\"7626\":1,\"10618\":1}}],[\"nezha\",{\"1\":{\"7970\":1}}],[\"nempty\",{\"1\":{\"5060\":1}}],[\"netchinaren\",{\"1\":{\"6899\":2}}],[\"net\",{\"1\":{\"3934\":1,\"6874\":1,\"6911\":1,\"6917\":1,\"10162\":1,\"10496\":1}}],[\"netstat\",{\"1\":{\"746\":2,\"8452\":1}}],[\"negativenumber++\",{\"1\":{\"3414\":1}}],[\"negativenumber\",{\"1\":{\"3414\":2}}],[\"necessary\",{\"1\":{\"1905\":1}}],[\"nextelement\",{\"1\":{\"8955\":1}}],[\"next和finish就ok了\",{\"1\":{\"8530\":1}}],[\"nextchar\",{\"1\":{\"6331\":1,\"6334\":1}}],[\"nextval\",{\"1\":{\"2465\":2,\"2469\":1}}],[\"nextdouble\",{\"1\":{\"2345\":1,\"2802\":1}}],[\"nextfloat\",{\"1\":{\"2345\":1,\"2802\":1}}],[\"nextlong\",{\"1\":{\"2345\":1,\"2802\":1}}],[\"nextline\",{\"1\":{\"2322\":1,\"2779\":1}}],[\"nextint\",{\"1\":{\"2345\":1,\"2802\":1,\"3414\":1,\"4720\":1,\"6949\":1}}],[\"nextshrot\",{\"1\":{\"2345\":1,\"2802\":1}}],[\"nextbigdecimal\",{\"1\":{\"2345\":1,\"2802\":1}}],[\"nextbiginter\",{\"1\":{\"2345\":1,\"2802\":1}}],[\"nextboolean\",{\"1\":{\"2345\":1,\"2802\":1}}],[\"nextbyte\",{\"1\":{\"2345\":2,\"2802\":2}}],[\"nextxxx\",{\"0\":{\"2337\":1,\"2794\":1}}],[\"next方法\",{\"1\":{\"2338\":1,\"2795\":1}}],[\"next方法获取输入的字符串\",{\"1\":{\"2335\":1,\"2792\":1}}],[\"next方法就获取输入的内容\",{\"1\":{\"2328\":1,\"2785\":1}}],[\"next\",{\"0\":{\"2326\":1,\"2462\":1,\"2783\":1,\"5582\":1,\"8007\":1},\"1\":{\"317\":1,\"2322\":1,\"2331\":6,\"2345\":2,\"2463\":1,\"2465\":2,\"2468\":1,\"2469\":1,\"2618\":1,\"2624\":1,\"2779\":1,\"2788\":6,\"2802\":2,\"5583\":1,\"5590\":4,\"5592\":1,\"5594\":2,\"5595\":1,\"5603\":1,\"5604\":1,\"5672\":4,\"5779\":1,\"5913\":1,\"5967\":1,\"5970\":1,\"6078\":1,\"6081\":1,\"8004\":2,\"8009\":1,\"8037\":1,\"8045\":1,\"8054\":1,\"8089\":1,\"8201\":3,\"8389\":1}}],[\"newtermstartdate\",{\"1\":{\"10554\":1}}],[\"newproxyinstance的参数3\",{\"0\":{\"7278\":1}}],[\"newproxyinstance\",{\"0\":{\"7257\":1},\"1\":{\"7266\":1,\"7277\":1}}],[\"newpriority\",{\"1\":{\"5247\":1}}],[\"new一个类的对象\",{\"1\":{\"7024\":1}}],[\"newoutputstream\",{\"1\":{\"6633\":1}}],[\"newinputstream\",{\"1\":{\"6632\":1}}],[\"newinstance已经被jdk舍弃了\",{\"1\":{\"7859\":1}}],[\"newinstance方法只能调用无参构造器创建对象\",{\"1\":{\"7062\":1}}],[\"newinstance方法默认会调用类的空参构造器\",{\"1\":{\"7059\":1}}],[\"newinstance\",{\"0\":{\"2148\":1,\"2289\":1,\"7052\":1},\"1\":{\"2150\":2,\"2181\":2,\"2239\":1,\"2244\":1,\"2282\":1,\"2291\":2,\"6949\":1,\"6960\":1,\"6962\":1,\"7054\":1,\"7056\":1,\"7065\":2,\"7146\":1,\"7161\":1,\"7179\":1,\"7858\":1,\"7862\":1,\"8054\":1,\"8201\":2}}],[\"newdirectorystream\",{\"1\":{\"6631\":1}}],[\"newfixedthreadpool\",{\"1\":{\"5508\":1,\"5517\":1}}],[\"newcachedthreadpool\",{\"1\":{\"5507\":1}}],[\"newchar\",{\"1\":{\"1511\":1,\"1512\":1}}],[\"new类创建对象时\",{\"1\":{\"4640\":1}}],[\"new+构造器\",{\"1\":{\"3852\":1}}],[\"newval\",{\"1\":{\"2515\":1}}],[\"newlength\",{\"1\":{\"2375\":1}}],[\"newline\",{\"0\":{\"2122\":1,\"6349\":1}}],[\"new构造器\",{\"1\":{\"2072\":1}}],[\"newbytechannel\",{\"1\":{\"6630\":1}}],[\"newb\",{\"1\":{\"2015\":2}}],[\"newscheduledthreadpool\",{\"1\":{\"5510\":1}}],[\"newscale\",{\"1\":{\"1907\":2}}],[\"newsinglethreadexecutor\",{\"1\":{\"5509\":1}}],[\"news1\",{\"1\":{\"1464\":2,\"1467\":2,\"1480\":4}}],[\"new\",{\"0\":{\"1085\":1,\"1357\":1,\"2323\":1,\"2780\":1,\"4639\":1,\"4643\":1},\"1\":{\"304\":1,\"598\":1,\"602\":1,\"623\":1,\"781\":1,\"1224\":2,\"1234\":2,\"1239\":1,\"1241\":1,\"1246\":1,\"1248\":1,\"1252\":1,\"1256\":1,\"1265\":3,\"1290\":1,\"1299\":8,\"1417\":1,\"1424\":2,\"1496\":1,\"1506\":2,\"1548\":3,\"1556\":4,\"1559\":2,\"1581\":3,\"1584\":1,\"1589\":1,\"1595\":1,\"1601\":1,\"1604\":1,\"1769\":1,\"1771\":2,\"1773\":6,\"1788\":3,\"1791\":1,\"1868\":1,\"1879\":3,\"1886\":2,\"1889\":2,\"1892\":2,\"1899\":2,\"1907\":1,\"1937\":2,\"1946\":3,\"1950\":1,\"1953\":1,\"1956\":1,\"1959\":1,\"1963\":1,\"1966\":1,\"1971\":1,\"1975\":1,\"1979\":1,\"1982\":1,\"1985\":1,\"1989\":1,\"1993\":1,\"2003\":1,\"2006\":1,\"2009\":1,\"2015\":2,\"2022\":3,\"2036\":6,\"2042\":2,\"2048\":4,\"2054\":1,\"2062\":2,\"2087\":1,\"2090\":1,\"2098\":1,\"2105\":1,\"2109\":2,\"2114\":1,\"2121\":2,\"2137\":1,\"2325\":1,\"2331\":1,\"2345\":1,\"2365\":1,\"2387\":1,\"2391\":1,\"2404\":1,\"2407\":2,\"2422\":2,\"2446\":1,\"2484\":1,\"2492\":1,\"2512\":2,\"2518\":1,\"2537\":1,\"2592\":2,\"2782\":1,\"2788\":1,\"2802\":1,\"3208\":1,\"3212\":2,\"3237\":2,\"3414\":1,\"3486\":1,\"3496\":2,\"3500\":2,\"3512\":1,\"3541\":2,\"3545\":1,\"3550\":1,\"3556\":2,\"3560\":3,\"3563\":3,\"3567\":1,\"3588\":1,\"3591\":3,\"3634\":1,\"3636\":1,\"3646\":1,\"3658\":2,\"3664\":4,\"3738\":1,\"3747\":1,\"3782\":1,\"3816\":1,\"3821\":1,\"3853\":1,\"3857\":1,\"3957\":1,\"4061\":2,\"4118\":2,\"4142\":2,\"4145\":2,\"4148\":1,\"4162\":2,\"4164\":2,\"4174\":1,\"4178\":1,\"4181\":1,\"4184\":1,\"4192\":1,\"4196\":1,\"4199\":2,\"4227\":4,\"4229\":4,\"4256\":2,\"4273\":1,\"4274\":6,\"4281\":2,\"4292\":1,\"4326\":3,\"4332\":1,\"4349\":1,\"4356\":1,\"4358\":2,\"4378\":2,\"4422\":1,\"4425\":1,\"4459\":1,\"4513\":6,\"4670\":1,\"4691\":1,\"4712\":1,\"4716\":1,\"4720\":1,\"4724\":2,\"4751\":1,\"4753\":2,\"4777\":2,\"4800\":2,\"4803\":3,\"4843\":4,\"5060\":5,\"5185\":2,\"5219\":1,\"5221\":1,\"5253\":1,\"5263\":4,\"5268\":1,\"5310\":3,\"5322\":5,\"5332\":1,\"5345\":5,\"5350\":2,\"5384\":1,\"5396\":5,\"5426\":5,\"5464\":3,\"5486\":3,\"5517\":1,\"5562\":1,\"5588\":2,\"5611\":2,\"5614\":1,\"5618\":1,\"5620\":1,\"5648\":1,\"5650\":1,\"5656\":1,\"5660\":1,\"5667\":1,\"5779\":3,\"5790\":6,\"5794\":3,\"5856\":1,\"5876\":1,\"5901\":1,\"5913\":5,\"5916\":3,\"5927\":2,\"5964\":1,\"5967\":1,\"5970\":1,\"5994\":2,\"6001\":2,\"6005\":3,\"6012\":1,\"6013\":1,\"6019\":1,\"6022\":1,\"6025\":1,\"6028\":1,\"6045\":1,\"6054\":1,\"6073\":1,\"6078\":3,\"6081\":3,\"6094\":3,\"6102\":1,\"6132\":2,\"6136\":1,\"6239\":3,\"6251\":2,\"6254\":3,\"6260\":1,\"6262\":1,\"6275\":3,\"6285\":2,\"6287\":5,\"6297\":6,\"6306\":5,\"6325\":2,\"6328\":2,\"6331\":2,\"6334\":3,\"6348\":2,\"6353\":7,\"6385\":2,\"6388\":2,\"6394\":2,\"6398\":3,\"6411\":5,\"6449\":2,\"6460\":3,\"6483\":2,\"6487\":2,\"6516\":3,\"6526\":1,\"6543\":4,\"6546\":1,\"6555\":3,\"6557\":2,\"6571\":5,\"6573\":2,\"6581\":1,\"6594\":1,\"6803\":1,\"6819\":3,\"6840\":2,\"6843\":4,\"6883\":4,\"6899\":1,\"6949\":1,\"6952\":1,\"6958\":1,\"6997\":1,\"7049\":3,\"7231\":2,\"7277\":1,\"7284\":1,\"7286\":1,\"7307\":1,\"7315\":1,\"7373\":1,\"7377\":1,\"7390\":1,\"7471\":1,\"7493\":1,\"7505\":1,\"7510\":1,\"7512\":1,\"7517\":1,\"7520\":1,\"7527\":1,\"7531\":1,\"7537\":1,\"7655\":11,\"7743\":1,\"7749\":1,\"7756\":1,\"7763\":1,\"7852\":2,\"7873\":1,\"7956\":2,\"7970\":3,\"7975\":1,\"8037\":1,\"8045\":1,\"8054\":1,\"8084\":2,\"8089\":3,\"8201\":1,\"8210\":5,\"8260\":1,\"8324\":1,\"8381\":1,\"8383\":1,\"8385\":2,\"8387\":2,\"8389\":3,\"8391\":3,\"8526\":1,\"8547\":1,\"8559\":1,\"9095\":2,\"9099\":1,\"9681\":2,\"9693\":1,\"9714\":2,\"9717\":1,\"9726\":1,\"9774\":1,\"10252\":1,\"10256\":1,\"10264\":2,\"10290\":1,\"10603\":1}}],[\"nation\",{\"1\":{\"4378\":5,\"4394\":3,\"6956\":3,\"6962\":2,\"7161\":1}}],[\"native\",{\"0\":{\"3994\":1},\"1\":{\"3996\":1}}],[\"native修饰\",{\"1\":{\"3862\":1}}],[\"navigableset<t>\",{\"1\":{\"2518\":2}}],[\"navigablemap<k\",{\"1\":{\"2518\":2}}],[\"nano\",{\"1\":{\"1654\":2}}],[\"namtab\",{\"1\":{\"1604\":1}}],[\"name+\",{\"1\":{\"9695\":1}}],[\"name栏填入自定义的名字\",{\"1\":{\"9507\":1}}],[\"name>helo<\",{\"1\":{\"9645\":1}}],[\"name>\",{\"1\":{\"8837\":1,\"9635\":1,\"9645\":2}}],[\"name是该tomcat模板的名字\",{\"1\":{\"8579\":1}}],[\"name`\",{\"1\":{\"1336\":1,\"1338\":1,\"1340\":1,\"1348\":3,\"1352\":1}}],[\"name=自定义的类型名\",{\"1\":{\"9641\":1}}],[\"name=\",{\"1\":{\"952\":9,\"4259\":1,\"5779\":1,\"5790\":3,\"6956\":1,\"6962\":1,\"7054\":1,\"7685\":1,\"7688\":1,\"7697\":1,\"8988\":2,\"9025\":4,\"9642\":11}}],[\"name=ebank\",{\"1\":{\"809\":1}}],[\"name的值是变量的名称\",{\"1\":{\"952\":1}}],[\"name1\",{\"1\":{\"503\":1}}],[\"name\",{\"0\":{\"4641\":1},\"1\":{\"308\":1,\"312\":1,\"489\":6,\"503\":1,\"624\":1,\"930\":1,\"936\":1,\"952\":1,\"969\":1,\"981\":1,\"985\":1,\"1008\":1,\"1038\":3,\"1206\":1,\"1208\":1,\"1211\":1,\"1248\":1,\"1252\":2,\"1256\":5,\"1364\":2,\"1769\":6,\"2090\":2,\"2146\":1,\"2153\":2,\"2191\":2,\"2194\":1,\"2204\":1,\"2207\":1,\"2211\":1,\"2231\":2,\"2269\":2,\"2272\":2,\"2314\":2,\"3237\":6,\"3630\":1,\"3636\":1,\"3857\":4,\"3985\":1,\"4092\":4,\"4241\":4,\"4259\":1,\"4329\":4,\"4553\":1,\"5060\":1,\"5170\":1,\"5790\":2,\"5927\":1,\"6487\":3,\"6505\":1,\"6911\":1,\"6956\":12,\"6962\":4,\"7081\":1,\"7094\":1,\"7146\":5,\"7149\":1,\"7152\":1,\"7164\":1,\"7166\":1,\"7169\":1,\"7525\":2,\"7682\":2,\"7947\":1,\"7952\":1,\"7970\":1,\"7980\":1,\"7991\":1,\"8037\":3,\"8042\":4,\"8047\":3,\"8056\":1,\"8084\":1,\"8089\":4,\"8105\":1,\"8109\":2,\"8113\":2,\"8121\":2,\"8126\":2,\"8207\":4,\"8269\":1,\"8375\":1,\"8381\":1,\"8385\":1,\"8387\":1,\"8389\":4,\"8528\":1,\"8837\":1,\"8944\":1,\"8949\":1,\"9021\":2,\"9065\":1,\"9119\":3,\"9184\":3,\"9207\":1,\"9208\":1,\"9209\":1,\"9246\":1,\"9247\":1,\"9248\":1,\"9631\":2,\"9642\":1,\"9681\":1,\"9690\":1,\"9695\":2,\"9699\":1,\"9753\":1,\"9755\":1,\"9757\":1,\"9895\":2,\"10231\":1,\"10379\":1,\"10392\":1,\"10394\":2,\"10399\":3,\"10554\":1,\"10576\":1,\"10583\":1}}],[\"nacos\",{\"1\":{\"22\":1}}],[\"nginx\",{\"0\":{\"190\":1},\"1\":{\"1301\":1,\"1393\":1}}],[\"gz\",{\"1\":{\"8425\":1}}],[\"gmail\",{\"1\":{\"7970\":1}}],[\"gmt+08\",{\"1\":{\"4256\":1}}],[\"gb2312\",{\"1\":{\"6418\":1}}],[\"gbk等双字节编码方式\",{\"1\":{\"6420\":1}}],[\"gbk\",{\"1\":{\"1502\":3,\"1506\":1,\"6411\":2,\"6419\":1}}],[\"g<\",{\"1\":{\"6064\":1}}],[\"g<a>和g<b>是没有关系的\",{\"1\":{\"6064\":1}}],[\"g<b>并不是g<a>的子类型\",{\"1\":{\"6053\":1}}],[\"girl\",{\"1\":{\"5060\":4,\"6353\":2,\"8084\":1}}],[\"github\",{\"1\":{\"9843\":2}}],[\"github页\",{\"1\":{\"8256\":1}}],[\"gitignore文件\",{\"1\":{\"1082\":1}}],[\"gitignore\",{\"0\":{\"1081\":1}}],[\"git\",{\"0\":{\"154\":1}}],[\"google公司著名的guava项目引入了optional类\",{\"1\":{\"7734\":1}}],[\"google用它来进行网络搜索而出名\",{\"1\":{\"7714\":1}}],[\"google\",{\"1\":{\"6691\":1,\"6703\":2,\"9852\":1}}],[\"goods\",{\"1\":{\"8105\":1,\"8109\":1,\"8113\":1,\"8121\":1,\"8126\":1}}],[\"good\",{\"1\":{\"2962\":1,\"6278\":1,\"6285\":1,\"10252\":1,\"10603\":1}}],[\"gof给迭代器模式\",{\"1\":{\"5569\":1}}],[\"goto\",{\"1\":{\"3054\":1}}],[\"guava的启发\",{\"1\":{\"7734\":1}}],[\"guava通过使用检查空值的方式来防止代码污染\",{\"1\":{\"7734\":1}}],[\"gui\",{\"1\":{\"2830\":1,\"3939\":1}}],[\"guli\",{\"1\":{\"952\":2}}],[\"gc\",{\"0\":{\"2308\":1},\"1\":{\"2310\":1,\"5092\":1}}],[\"gcd\",{\"1\":{\"1867\":1}}],[\"gg\",{\"1\":{\"1788\":3,\"5618\":2,\"5620\":1}}],[\"g\",{\"1\":{\"1512\":1}}],[\"global\",{\"1\":{\"1206\":1,\"1229\":1,\"1364\":1}}],[\"geospatial\",{\"1\":{\"10371\":1}}],[\"gentest<k\",{\"1\":{\"5990\":1}}],[\"generictypeclass<\",{\"1\":{\"6100\":1}}],[\"generictest\",{\"1\":{\"6078\":2,\"6081\":2}}],[\"genericclass<e>\",{\"1\":{\"5996\":1}}],[\"genericclass\",{\"1\":{\"5996\":1}}],[\"generic\",{\"0\":{\"5938\":1}}],[\"genericservlet将servlet接口中其他的方法做了默认空实现\",{\"1\":{\"8793\":1}}],[\"genericservlet抽象类\",{\"0\":{\"8792\":1},\"1\":{\"8789\":1}}],[\"generics\",{\"1\":{\"5051\":1}}],[\"genericsuperclass\",{\"1\":{\"2159\":2,\"7134\":2,\"7137\":2,\"8201\":2}}],[\"genericdeclaration\",{\"1\":{\"2129\":1}}],[\"generate\",{\"1\":{\"7585\":1,\"7593\":2}}],[\"generated\",{\"1\":{\"1083\":1,\"8358\":2,\"8628\":1}}],[\"generator\",{\"1\":{\"1113\":1}}],[\"gen\",{\"1\":{\"1083\":1}}],[\"getwriter\",{\"1\":{\"9068\":1,\"9075\":1,\"9079\":1,\"9085\":1}}],[\"get请求获取请求参数的方式是request\",{\"1\":{\"9050\":1}}],[\"get请求就返回\",{\"1\":{\"8932\":1}}],[\"get方式\",{\"1\":{\"8995\":1}}],[\"get方式的处理逻辑\",{\"1\":{\"8817\":1}}],[\"getheadernames\",{\"1\":{\"8955\":2}}],[\"getheader\",{\"0\":{\"8948\":1},\"1\":{\"8949\":1,\"8951\":2}}],[\"gethost\",{\"1\":{\"6888\":1}}],[\"gethostname\",{\"0\":{\"6707\":1},\"1\":{\"6708\":2}}],[\"gethostaddress\",{\"0\":{\"6704\":1},\"1\":{\"6706\":2}}],[\"gethour\",{\"1\":{\"1654\":1}}],[\"getforlist\",{\"1\":{\"8056\":1,\"8182\":1,\"8201\":2,\"8207\":1}}],[\"getfile\",{\"1\":{\"6891\":1}}],[\"getfilename\",{\"1\":{\"6604\":1}}],[\"getfilepointer\",{\"1\":{\"6498\":1}}],[\"getfilepointer方法\",{\"0\":{\"6496\":1}}],[\"getfield\",{\"0\":{\"2189\":1,\"7147\":1},\"1\":{\"2191\":2,\"7149\":1}}],[\"getfields\",{\"0\":{\"2183\":1,\"7070\":1},\"1\":{\"2185\":2,\"7072\":1}}],[\"getgradelist\",{\"1\":{\"7655\":1,\"7662\":1}}],[\"getgenericsuperclass\",{\"0\":{\"2157\":1,\"7133\":1},\"1\":{\"2159\":2,\"7134\":1,\"7137\":1,\"8201\":1}}],[\"getobject\",{\"1\":{\"8045\":1,\"8054\":1,\"8201\":3}}],[\"getobj\",{\"1\":{\"6952\":1}}],[\"getoutputstream\",{\"1\":{\"6775\":1,\"6793\":1,\"6803\":1,\"6808\":1,\"6907\":1,\"9070\":1,\"9091\":1,\"9095\":1,\"9099\":1,\"9101\":1}}],[\"getquerystring\",{\"1\":{\"8940\":1,\"8944\":1,\"8995\":1,\"9004\":1,\"9050\":1}}],[\"getquery\",{\"1\":{\"6892\":1}}],[\"getlasterrordefaults\",{\"1\":{\"10541\":1}}],[\"getlasterrormodes\",{\"1\":{\"10541\":1}}],[\"getlastmodified\",{\"1\":{\"6905\":1}}],[\"getlength\",{\"1\":{\"6843\":1,\"6862\":1}}],[\"getlocalport\",{\"1\":{\"6779\":1,\"6852\":1}}],[\"getlocaladdress\",{\"1\":{\"6777\":1,\"6851\":1}}],[\"getlocalhost\",{\"0\":{\"6699\":1},\"1\":{\"6700\":2}}],[\"getlogger\",{\"1\":{\"882\":1}}],[\"getroot\",{\"1\":{\"6603\":1}}],[\"getrealpath\",{\"0\":{\"9252\":1},\"1\":{\"9255\":1,\"9262\":3}}],[\"getreader\",{\"1\":{\"8985\":1,\"8990\":1,\"8996\":1,\"9004\":1,\"9050\":1}}],[\"getrequestdispatcher\",{\"1\":{\"9112\":2,\"9124\":1}}],[\"getrequesturi\",{\"1\":{\"8937\":1,\"8944\":1}}],[\"getrequesturl\",{\"1\":{\"8936\":1,\"8944\":1}}],[\"getremoteaddr\",{\"1\":{\"8941\":1,\"8944\":1}}],[\"getresultset\",{\"1\":{\"7963\":1}}],[\"getresourceasstream\",{\"0\":{\"7044\":1},\"1\":{\"7046\":1,\"7049\":1,\"7873\":1,\"7970\":1,\"7975\":1,\"8260\":1,\"8324\":1}}],[\"getreturntype\",{\"0\":{\"2264\":1},\"1\":{\"2266\":2,\"7106\":1,\"7113\":1}}],[\"getrecords\",{\"1\":{\"1241\":1}}],[\"getemail\",{\"1\":{\"8207\":2}}],[\"getemployees\",{\"1\":{\"7616\":1,\"7619\":1,\"7623\":1,\"7626\":1,\"7678\":1,\"7680\":1,\"7685\":1,\"7688\":1}}],[\"getencoding\",{\"0\":{\"6392\":1},\"1\":{\"6394\":2}}],[\"getexceptiontypes\",{\"0\":{\"2273\":1},\"1\":{\"2275\":2,\"7106\":1,\"7122\":1}}],[\"getupdatecount\",{\"1\":{\"7963\":1}}],[\"getuname\",{\"1\":{\"6042\":1}}],[\"getuser\",{\"1\":{\"4142\":2}}],[\"getnum\",{\"1\":{\"4080\":1,\"5345\":2}}],[\"getnation\",{\"1\":{\"4394\":1,\"4397\":1}}],[\"getnano\",{\"1\":{\"1654\":1}}],[\"getnamecount\",{\"1\":{\"6605\":1}}],[\"getname\",{\"0\":{\"1954\":1,\"2151\":1,\"2229\":1,\"2267\":1},\"1\":{\"1252\":1,\"1256\":2,\"1265\":3,\"1299\":2,\"1956\":2,\"2153\":2,\"2231\":2,\"2269\":2,\"2272\":1,\"4253\":1,\"5185\":2,\"5187\":1,\"5209\":1,\"5219\":1,\"5253\":2,\"5263\":1,\"5310\":1,\"5322\":1,\"5345\":1,\"5396\":1,\"5464\":1,\"5486\":1,\"5517\":1,\"6606\":1,\"6956\":1,\"7086\":2,\"7094\":1,\"7106\":6,\"7116\":1,\"7137\":1,\"7473\":1,\"7475\":1,\"7476\":1,\"7495\":1,\"7498\":1,\"7682\":1,\"8207\":2,\"9371\":1,\"9390\":1,\"9409\":1,\"9426\":1,\"9690\":2,\"9695\":1}}],[\"getvalue\",{\"1\":{\"2624\":1,\"5913\":1,\"5970\":1,\"8183\":1,\"8201\":2,\"8207\":2,\"9373\":1,\"9392\":1,\"9411\":1,\"9428\":1,\"9690\":2,\"9695\":1}}],[\"getkey\",{\"1\":{\"2624\":1,\"5913\":1,\"5970\":1}}],[\"getid\",{\"1\":{\"8207\":1,\"9760\":1,\"9774\":1}}],[\"getiq\",{\"1\":{\"3990\":1}}],[\"getindexes\",{\"1\":{\"10376\":1,\"10377\":1,\"10379\":1,\"10394\":1,\"10399\":1}}],[\"getint\",{\"1\":{\"8037\":1,\"8089\":1,\"8389\":1}}],[\"getinterfaces\",{\"0\":{\"2160\":1,\"7138\":1},\"1\":{\"2162\":2,\"7139\":2,\"7277\":1}}],[\"getinetaddress\",{\"1\":{\"6776\":1,\"6853\":1}}],[\"getinputstream\",{\"1\":{\"6774\":1,\"6792\":1,\"6808\":1,\"6819\":1,\"6906\":1,\"8982\":1}}],[\"getinstance\",{\"1\":{\"4422\":3,\"4425\":1,\"5350\":2,\"6949\":2,\"8054\":1,\"8162\":1,\"8181\":1,\"8201\":2,\"8207\":1}}],[\"getinfo\",{\"1\":{\"3767\":3,\"4145\":2,\"4148\":1}}],[\"getit\",{\"1\":{\"372\":1}}],[\"getcustomerbyid\",{\"1\":{\"8205\":1,\"8207\":1,\"8210\":1,\"8326\":1}}],[\"getcurrent\",{\"1\":{\"1241\":1}}],[\"getcookies\",{\"1\":{\"9687\":2,\"9695\":1}}],[\"getcount\",{\"1\":{\"8205\":1,\"8207\":1,\"8210\":1}}],[\"getcolumndisplaysize\",{\"1\":{\"8025\":1}}],[\"getcolumntypename\",{\"1\":{\"8024\":1}}],[\"getcolumncount\",{\"1\":{\"8023\":1,\"8045\":1,\"8054\":1,\"8201\":2}}],[\"getcolumnlabel代替\",{\"1\":{\"8050\":1}}],[\"getcolumnlabel\",{\"1\":{\"8022\":1,\"8045\":1,\"8054\":1,\"8201\":2}}],[\"getcolumnname\",{\"1\":{\"8021\":1,\"8050\":1}}],[\"getcomparable\",{\"1\":{\"4332\":1}}],[\"getcontextpath\",{\"1\":{\"8933\":1,\"8944\":1,\"9174\":1}}],[\"getcontenttype\",{\"1\":{\"6903\":1}}],[\"getcontentlength\",{\"1\":{\"6902\":1}}],[\"getcontent\",{\"1\":{\"6901\":1}}],[\"getconstructor\",{\"1\":{\"6960\":1}}],[\"getconstructors\",{\"0\":{\"2173\":1},\"1\":{\"2175\":2,\"7128\":1,\"7129\":1}}],[\"getconnection3\",{\"1\":{\"8324\":1,\"8326\":1,\"8381\":1,\"8383\":1,\"8385\":1,\"8387\":1,\"8389\":1,\"8391\":1}}],[\"getconnection\",{\"1\":{\"7862\":1,\"7865\":1,\"7873\":1,\"7947\":1,\"7970\":1,\"7975\":2,\"7980\":1,\"7989\":1,\"8037\":1,\"8045\":1,\"8054\":1,\"8084\":1,\"8089\":1,\"8109\":1,\"8113\":1,\"8121\":1,\"8126\":1,\"8148\":1,\"8162\":1,\"8197\":1,\"8210\":7,\"8260\":2,\"8324\":1}}],[\"getconnect\",{\"1\":{\"4142\":1}}],[\"getclassloader\",{\"0\":{\"2163\":1},\"1\":{\"2144\":1,\"2165\":2,\"2168\":1,\"7002\":1,\"7043\":2,\"7049\":1,\"7277\":1,\"7873\":1}}],[\"getclass\",{\"1\":{\"2137\":1,\"2144\":1,\"4212\":1,\"4241\":2,\"4253\":1,\"6997\":1,\"7002\":1,\"7054\":1,\"7277\":2,\"8201\":1}}],[\"getattribute\",{\"1\":{\"9119\":1,\"9124\":1,\"9184\":2,\"9208\":1,\"9247\":1,\"9249\":1,\"9755\":1}}],[\"getactualtypearguments\",{\"0\":{\"7135\":1},\"1\":{\"7137\":1,\"8201\":1}}],[\"getaddress\",{\"1\":{\"6843\":1,\"6859\":1}}],[\"getannotation\",{\"1\":{\"5060\":1}}],[\"getannotations\",{\"0\":{\"2254\":1,\"7142\":1},\"1\":{\"2256\":2,\"5060\":1,\"7106\":1,\"7107\":1,\"7143\":1}}],[\"getabsolutepath\",{\"0\":{\"1948\":1},\"1\":{\"1950\":2}}],[\"getage\",{\"1\":{\"1791\":6,\"3821\":2,\"4039\":3,\"4585\":1,\"5794\":2,\"5916\":2,\"7655\":1,\"7658\":1,\"7662\":1,\"7673\":2,\"7678\":1}}],[\"getall\",{\"1\":{\"1224\":1,\"1263\":1,\"1276\":1,\"1299\":1,\"8205\":1,\"8207\":1,\"8210\":1}}],[\"getstring\",{\"1\":{\"8037\":2,\"8089\":2,\"8389\":2}}],[\"getstulist\",{\"1\":{\"7655\":1,\"7658\":1,\"7673\":1}}],[\"getsystemclassloader\",{\"1\":{\"7970\":1,\"7975\":1,\"8260\":1,\"8324\":1}}],[\"getsalary\",{\"1\":{\"7616\":1,\"7680\":1,\"7694\":1,\"7697\":2,\"7716\":1,\"7723\":2}}],[\"getsession\",{\"1\":{\"9194\":1,\"9196\":1,\"9199\":1,\"9394\":1,\"9430\":1,\"9750\":2,\"9764\":1}}],[\"getservletrequest\",{\"1\":{\"9413\":1}}],[\"getservletcontext\",{\"1\":{\"9220\":2,\"9222\":1,\"9224\":1,\"9234\":1,\"9249\":1,\"9262\":1,\"9375\":1}}],[\"getservletconfig\",{\"0\":{\"8782\":1},\"1\":{\"8764\":1,\"8784\":2}}],[\"getservletpath\",{\"1\":{\"8938\":1,\"8944\":1}}],[\"getservletinfo\",{\"0\":{\"8778\":1},\"1\":{\"8764\":1,\"8781\":2}}],[\"getseasondesc\",{\"1\":{\"4843\":1,\"4845\":1}}],[\"getseasonname\",{\"1\":{\"4843\":1,\"4845\":1}}],[\"getsecond\",{\"1\":{\"1654\":1}}],[\"getsum\",{\"1\":{\"3754\":2}}],[\"getsuperclass\",{\"0\":{\"2154\":1,\"7131\":1},\"1\":{\"2156\":2,\"7132\":1,\"7139\":1}}],[\"getsize\",{\"1\":{\"1241\":1}}],[\"getdate\",{\"1\":{\"6904\":1,\"8037\":1,\"8089\":1,\"8389\":1}}],[\"getdata\",{\"1\":{\"6843\":1,\"6861\":1}}],[\"getdayofyear\",{\"1\":{\"1654\":1}}],[\"getdayofmonth\",{\"1\":{\"1654\":1}}],[\"getdeclaredmethod\",{\"0\":{\"2205\":1,\"7162\":1},\"1\":{\"2211\":2,\"2282\":1,\"6960\":1,\"6962\":1,\"7161\":2,\"7166\":1}}],[\"getdeclaredmethods\",{\"0\":{\"2198\":1},\"1\":{\"2200\":2,\"7097\":1,\"7101\":1,\"7106\":1}}],[\"getdeclaredfield\",{\"0\":{\"2192\":1},\"1\":{\"2194\":2,\"2239\":1,\"2244\":1,\"6960\":1,\"6962\":1,\"7146\":2,\"7152\":1,\"8045\":1,\"8054\":1,\"8201\":2}}],[\"getdeclaredfields\",{\"1\":{\"2188\":2,\"7078\":1,\"7086\":1}}],[\"getdeclaredconstructor\",{\"0\":{\"2179\":1,\"7061\":1,\"7180\":1},\"1\":{\"2181\":2,\"2291\":1,\"6962\":1,\"7065\":1,\"7179\":1}}],[\"getdeclaredconstructors\",{\"0\":{\"2176\":1},\"1\":{\"2178\":2,\"7128\":1,\"7130\":1}}],[\"getdeclarefields\",{\"0\":{\"2186\":1,\"7076\":1}}],[\"getdescription\",{\"1\":{\"1265\":3}}],[\"getmimetype\",{\"0\":{\"9233\":1},\"1\":{\"9234\":1}}],[\"getminute\",{\"1\":{\"1654\":1}}],[\"getmaxbirth\",{\"1\":{\"8205\":1,\"8207\":1,\"8210\":1}}],[\"getmapping\",{\"1\":{\"372\":1,\"882\":1,\"888\":1,\"955\":1,\"1276\":3,\"1299\":3}}],[\"getmetadata\",{\"1\":{\"8019\":1,\"8045\":1,\"8054\":1,\"8201\":2}}],[\"getmethod\",{\"0\":{\"2201\":1,\"7167\":1},\"1\":{\"2204\":2,\"2256\":1,\"5060\":2,\"7169\":1,\"8817\":1,\"8931\":1,\"8944\":1,\"9004\":1}}],[\"getmethods\",{\"0\":{\"2195\":1},\"1\":{\"2197\":2,\"7097\":1,\"7098\":1}}],[\"getmessage\",{\"1\":{\"4734\":1,\"4742\":1,\"4803\":1}}],[\"getmoreresults\",{\"1\":{\"7963\":1}}],[\"getmodifiers\",{\"0\":{\"2257\":1},\"1\":{\"2225\":2,\"2263\":2,\"7086\":1,\"7106\":1,\"7110\":1}}],[\"getmodifier\",{\"0\":{\"2219\":1},\"1\":{\"7087\":1}}],[\"getmonthvalue\",{\"1\":{\"1654\":1}}],[\"getyear\",{\"1\":{\"1654\":1}}],[\"getxxx\",{\"0\":{\"1652\":1,\"8010\":1},\"1\":{\"3823\":1,\"3828\":1,\"3847\":1,\"8005\":2,\"8016\":1}}],[\"getport\",{\"1\":{\"6778\":1,\"6854\":1,\"6860\":1,\"6889\":1}}],[\"getproxyinstance\",{\"1\":{\"7277\":1,\"7284\":1,\"7287\":1}}],[\"getprotocol\",{\"1\":{\"6887\":1,\"8939\":1,\"8944\":1}}],[\"getpropertyaction\",{\"1\":{\"6334\":1}}],[\"getproperty\",{\"0\":{\"2311\":1},\"1\":{\"508\":3,\"2314\":8,\"5923\":1,\"5927\":2,\"6132\":1,\"7049\":2,\"7873\":4,\"7970\":4,\"7975\":4}}],[\"getpriority\",{\"1\":{\"5246\":1,\"5253\":2}}],[\"getparameternames\",{\"1\":{\"9021\":2}}],[\"getparameter\",{\"1\":{\"9021\":2,\"9027\":2,\"9029\":1,\"9048\":1}}],[\"getparametervalues\",{\"1\":{\"9021\":2,\"9027\":1}}],[\"getparametermap\",{\"1\":{\"9021\":2,\"9027\":1}}],[\"getparametertypes\",{\"0\":{\"2270\":1},\"1\":{\"2272\":2,\"7106\":1,\"7119\":1}}],[\"getparent\",{\"0\":{\"1957\":1,\"2166\":1},\"1\":{\"1959\":2,\"2167\":1,\"2168\":2,\"6602\":1,\"7043\":2}}],[\"getpackage\",{\"0\":{\"2169\":1,\"7140\":1},\"1\":{\"2171\":2,\"7141\":1}}],[\"getpath\",{\"0\":{\"1951\":1},\"1\":{\"1953\":2,\"6890\":1}}],[\"getpage\",{\"1\":{\"1263\":1,\"1265\":2,\"1276\":2,\"1299\":3}}],[\"getpages\",{\"1\":{\"1241\":1,\"1299\":2}}],[\"gettransactionisolation\",{\"0\":{\"8152\":1},\"1\":{\"8153\":1,\"8162\":1}}],[\"gettime\",{\"1\":{\"7956\":1,\"7970\":1}}],[\"gettype\",{\"0\":{\"2226\":1},\"1\":{\"1265\":3,\"2228\":2,\"7086\":1,\"7092\":1}}],[\"gettotal\",{\"1\":{\"1241\":1}}],[\"getter\",{\"1\":{\"519\":1,\"590\":1}}],[\"get\",{\"0\":{\"2232\":1,\"2547\":1,\"2599\":1,\"7758\":1},\"1\":{\"1029\":2,\"1038\":2,\"2239\":2,\"2244\":1,\"2549\":3,\"2601\":3,\"2636\":1,\"4575\":1,\"5484\":1,\"5486\":1,\"6073\":1,\"6594\":1,\"6611\":1,\"6612\":1,\"6613\":1,\"7146\":1,\"7155\":1,\"7432\":1,\"7473\":1,\"7475\":1,\"7510\":1,\"7512\":1,\"7760\":2,\"7889\":1,\"8806\":2,\"8809\":1,\"8817\":1,\"8932\":1,\"8944\":1,\"9004\":1,\"9025\":1,\"9027\":1}}],[\"getbirth\",{\"1\":{\"8207\":2}}],[\"getbinarystream\",{\"1\":{\"8089\":1}}],[\"getblob\",{\"1\":{\"8082\":1,\"8089\":1}}],[\"getbelief\",{\"1\":{\"7284\":1,\"7292\":1}}],[\"getbelif\",{\"1\":{\"7282\":1}}],[\"getbean\",{\"1\":{\"430\":1}}],[\"getbyname\",{\"0\":{\"6701\":1},\"1\":{\"6703\":3,\"6706\":1,\"6708\":1,\"6711\":1,\"6840\":1}}],[\"getbytes\",{\"0\":{\"1497\":1},\"1\":{\"1502\":3,\"6526\":1,\"6803\":1,\"6840\":1,\"9101\":1}}],[\"getbyid\",{\"1\":{\"882\":1,\"888\":1,\"955\":1,\"988\":1,\"991\":1,\"1263\":1,\"1276\":2,\"1299\":2}}],[\"grow\",{\"1\":{\"3747\":3}}],[\"groups\",{\"1\":{\"2765\":1}}],[\"group中配置各个组环境组\",{\"1\":{\"859\":1}}],[\"groupid>\",{\"1\":{\"347\":1,\"391\":1,\"394\":1,\"397\":5,\"412\":5,\"446\":2,\"450\":1,\"550\":1,\"614\":1,\"642\":2,\"653\":1,\"703\":1,\"967\":1,\"978\":3,\"1005\":3,\"1019\":1,\"1046\":1,\"1129\":1,\"1132\":1,\"1135\":1,\"1138\":1,\"1142\":1,\"1145\":1,\"1148\":1,\"1151\":1,\"1154\":1,\"1158\":1,\"1161\":1,\"1164\":1,\"1167\":1,\"1169\":1,\"1172\":2,\"1177\":12,\"1217\":1,\"1361\":9,\"9818\":1,\"10829\":1,\"10839\":1}}],[\"group\",{\"0\":{\"856\":1},\"1\":{\"312\":1,\"858\":1,\"907\":1,\"2676\":1}}],[\"gradelist\",{\"1\":{\"7662\":2}}],[\"grade2\",{\"1\":{\"7655\":4}}],[\"grade1\",{\"1\":{\"7655\":4}}],[\"gradlew\",{\"1\":{\"1083\":2}}],[\"graphical\",{\"1\":{\"2830\":1}}],[\"gran\",{\"1\":{\"2351\":1}}],[\"green\",{\"1\":{\"952\":1}}],[\"grep\",{\"1\":{\"948\":1,\"10511\":1}}],[\"gay\",{\"1\":{\"3664\":1,\"4553\":2}}],[\"gan\",{\"1\":{\"1512\":1}}],[\"gamelan\",{\"1\":{\"6883\":1}}],[\"game\",{\"1\":{\"489\":2}}],[\"gateway\",{\"1\":{\"22\":1,\"6896\":1}}],[\"occurred\",{\"1\":{\"10744\":1}}],[\"ocnauto\",{\"1\":{\"8272\":1}}],[\"oa\",{\"1\":{\"9895\":1}}],[\"ois\",{\"1\":{\"6543\":1,\"6549\":1,\"6557\":3,\"6573\":4}}],[\"oos\",{\"1\":{\"6543\":1,\"6546\":1,\"6552\":1,\"6555\":4,\"6571\":6}}],[\"oop\",{\"1\":{\"3598\":1}}],[\"o技术是非常实用的技术\",{\"1\":{\"6150\":1}}],[\"o是input\",{\"1\":{\"6150\":1}}],[\"osi参考模型\",{\"1\":{\"6654\":1}}],[\"osw\",{\"1\":{\"6411\":3}}],[\"osversion\",{\"1\":{\"2314\":2}}],[\"os\",{\"1\":{\"2314\":2,\"2870\":1,\"9095\":2,\"9099\":2}}],[\"osname\",{\"1\":{\"2314\":2}}],[\"o2\",{\"1\":{\"1778\":1,\"1782\":1,\"1788\":3,\"1791\":3,\"2365\":1,\"2492\":2,\"5794\":3,\"5916\":3,\"7345\":2,\"7390\":6}}],[\"o1>o2\",{\"1\":{\"2365\":1}}],[\"o1<o2\",{\"1\":{\"2365\":1}}],[\"o1\",{\"1\":{\"1778\":1,\"1782\":1,\"1788\":3,\"1791\":4,\"2365\":1,\"2492\":2,\"4356\":2,\"5794\":3,\"5916\":3,\"7345\":2,\"7390\":6}}],[\"ofnullable\",{\"0\":{\"7747\":1},\"1\":{\"7749\":3,\"7753\":1,\"7756\":1,\"7760\":1,\"7763\":1}}],[\"ofpattern\",{\"1\":{\"1723\":1,\"1725\":1,\"1727\":1}}],[\"oflocalizedtime\",{\"1\":{\"1712\":1}}],[\"oflocalizeddate\",{\"1\":{\"1711\":1}}],[\"oflocalizeddatetime\",{\"1\":{\"1710\":1,\"1719\":1}}],[\"ofepochmilli\",{\"0\":{\"1680\":1},\"1\":{\"1682\":2}}],[\"ofhours\",{\"1\":{\"1676\":1}}],[\"of\",{\"0\":{\"1649\":1,\"7741\":1},\"1\":{\"1651\":6,\"2962\":2,\"7582\":1,\"7583\":3,\"7743\":2,\"8358\":1,\"10246\":1}}],[\"off和len\",{\"1\":{\"2057\":1}}],[\"offsetdatetime\",{\"1\":{\"1676\":2}}],[\"offset\",{\"1\":{\"1584\":1,\"1598\":1,\"1601\":1,\"1676\":1,\"6861\":1}}],[\"off\",{\"1\":{\"952\":2,\"2059\":2,\"2096\":1,\"2098\":2,\"2104\":2,\"2105\":1}}],[\"oldval\",{\"1\":{\"2515\":1}}],[\"oldchar\",{\"1\":{\"1511\":1,\"1512\":1}}],[\"olleh\",{\"1\":{\"1604\":1}}],[\"o\",{\"1\":{\"1494\":3,\"1743\":1,\"1769\":4,\"2239\":2,\"2422\":1,\"2440\":1,\"2508\":1,\"2552\":1,\"2555\":1,\"2615\":1,\"4199\":2,\"4332\":2,\"5085\":1,\"5790\":3,\"6073\":2,\"9119\":1}}],[\"overflow\",{\"1\":{\"9849\":1}}],[\"overload\",{\"0\":{\"3756\":1}}],[\"override\",{\"0\":{\"4040\":1},\"1\":{\"1265\":5,\"1376\":1,\"1769\":2,\"1791\":1,\"2365\":1,\"4843\":1,\"4872\":1,\"4892\":1,\"4901\":1,\"4951\":1,\"4965\":2,\"5219\":1,\"5221\":1,\"5253\":1,\"5263\":1,\"5322\":1,\"5345\":1,\"5396\":1,\"5426\":2,\"5464\":1,\"5486\":1,\"5517\":1,\"5916\":1,\"6989\":2,\"7227\":1,\"7229\":1,\"7279\":1,\"7373\":1,\"7377\":1,\"7390\":1,\"8704\":1,\"8809\":2,\"8817\":1,\"8944\":2,\"9004\":2,\"9027\":2,\"9031\":2,\"9079\":1,\"9124\":2,\"9143\":1,\"9145\":1,\"9270\":3}}],[\"ove\",{\"1\":{\"1480\":1}}],[\"ok值为1\",{\"1\":{\"10528\":1}}],[\"ok\",{\"1\":{\"1472\":2,\"3176\":1,\"4661\":3,\"6285\":1,\"6747\":1,\"10526\":1,\"10554\":1,\"10573\":1,\"10580\":1,\"10657\":1,\"10660\":1,\"10703\":1,\"10728\":1,\"10730\":1,\"10734\":1}}],[\"objname2\",{\"1\":{\"4857\":1}}],[\"objname1\",{\"1\":{\"4857\":2}}],[\"obj和person是同属一个类的对象\",{\"1\":{\"4241\":1}}],[\"obj是null\",{\"1\":{\"4241\":1}}],[\"obj\",{\"1\":{\"1424\":1,\"1491\":1,\"1746\":1,\"1750\":2,\"1751\":1,\"2239\":1,\"2244\":1,\"2282\":1,\"2429\":1,\"2444\":2,\"2624\":2,\"4196\":2,\"4241\":5,\"4716\":2,\"4857\":1,\"4957\":1,\"5322\":1,\"5332\":1,\"5345\":1,\"5604\":2,\"5611\":2,\"5706\":1,\"5718\":1,\"5913\":2,\"6078\":2,\"6081\":2,\"6549\":2,\"6557\":2,\"6949\":2,\"7155\":1,\"7159\":1,\"7176\":1,\"7277\":5,\"7279\":6,\"7307\":1,\"9821\":1}}],[\"objectid\",{\"1\":{\"10093\":1,\"10252\":1,\"10541\":1,\"10603\":1}}],[\"objectinputstream\",{\"1\":{\"6543\":2,\"6557\":2,\"6573\":2}}],[\"objectoutputstream\",{\"1\":{\"6543\":2,\"6555\":2,\"6571\":2}}],[\"object>\",{\"1\":{\"6019\":1}}],[\"object的主要结构如下\",{\"1\":{\"4204\":1}}],[\"object可以强转成woman\",{\"1\":{\"4195\":1}}],[\"object引用的woman子类\",{\"1\":{\"4195\":1}}],[\"object类无属性且构造器是空参构造器\",{\"1\":{\"4207\":1}}],[\"object类的功能\",{\"0\":{\"4206\":1}}],[\"object类是所有java类的根父类\",{\"1\":{\"4203\":1}}],[\"object类中声明wait\",{\"1\":{\"5459\":1}}],[\"object类中\",{\"1\":{\"4231\":1,\"5455\":1}}],[\"object类中的功能\",{\"1\":{\"4203\":1}}],[\"object类中的getclass\",{\"1\":{\"3979\":1}}],[\"object类中空参的构造器为止\",{\"1\":{\"4112\":1}}],[\"object类声明的功能\",{\"1\":{\"4025\":1}}],[\"object类之外\",{\"1\":{\"4024\":1}}],[\"object类\",{\"0\":{\"4022\":1,\"4201\":1},\"1\":{\"4023\":1,\"4024\":1,\"4203\":1,\"6489\":1}}],[\"object类型\",{\"1\":{\"2237\":1,\"5983\":1}}],[\"object是所有类的父类\",{\"1\":{\"2155\":1}}],[\"object\",{\"0\":{\"8028\":1},\"1\":{\"1029\":2,\"1296\":2,\"1424\":1,\"1491\":1,\"1750\":2,\"1782\":2,\"1788\":2,\"2156\":1,\"2239\":2,\"2244\":2,\"2282\":3,\"2291\":1,\"2354\":1,\"2422\":1,\"2429\":1,\"2440\":1,\"2444\":2,\"2492\":2,\"2500\":1,\"2505\":1,\"2508\":1,\"2552\":1,\"2555\":1,\"2595\":1,\"2601\":1,\"2604\":1,\"2606\":1,\"2615\":1,\"2624\":1,\"3598\":1,\"3617\":1,\"4194\":1,\"4196\":1,\"4199\":1,\"4241\":1,\"4244\":1,\"4332\":2,\"4716\":1,\"4957\":1,\"5060\":2,\"5283\":1,\"5322\":2,\"5332\":2,\"5345\":2,\"5486\":1,\"5526\":1,\"5604\":1,\"5611\":1,\"5706\":1,\"5718\":1,\"5790\":1,\"5794\":2,\"5913\":1,\"5916\":2,\"5964\":1,\"6013\":1,\"6073\":1,\"6078\":1,\"6081\":1,\"6543\":2,\"6549\":1,\"6555\":1,\"6557\":2,\"6571\":1,\"6573\":1,\"6901\":1,\"6925\":1,\"6949\":3,\"6952\":1,\"6962\":1,\"6965\":1,\"6989\":2,\"7155\":2,\"7159\":2,\"7161\":2,\"7176\":3,\"7266\":1,\"7274\":3,\"7277\":2,\"7279\":6,\"7307\":4,\"7375\":1,\"7794\":1,\"7858\":1,\"7989\":1,\"8045\":2,\"8054\":2,\"8146\":1,\"8166\":1,\"8201\":6,\"8355\":1,\"8358\":3,\"8361\":1,\"8362\":1,\"8365\":2,\"8368\":1,\"9119\":2,\"9124\":1,\"9246\":1,\"9249\":1,\"9753\":1,\"9755\":1,\"10083\":1,\"10554\":1,\"10576\":2}}],[\"orm对象\",{\"1\":{\"8205\":1,\"8207\":1}}],[\"orm编程思想\",{\"0\":{\"8028\":1}}],[\"orelse\",{\"0\":{\"7761\":1},\"1\":{\"7763\":2}}],[\"orelse来防止空指针\",{\"1\":{\"7738\":1}}],[\"oracle\",{\"1\":{\"7313\":1,\"8272\":2}}],[\"oracle占用端口1521等\",{\"1\":{\"6684\":1}}],[\"oracle等\",{\"1\":{\"4140\":1}}],[\"orient\",{\"0\":{\"7299\":1}}],[\"oriented\",{\"1\":{\"3598\":1,\"3599\":1}}],[\"original\",{\"1\":{\"2375\":1}}],[\"order<>\",{\"1\":{\"6001\":1}}],[\"order<string>\",{\"1\":{\"6001\":1}}],[\"order1\",{\"1\":{\"6001\":2}}],[\"ordered\",{\"1\":{\"10246\":1,\"10250\":1,\"10261\":1}}],[\"ordere\",{\"1\":{\"5999\":7}}],[\"orderid\",{\"1\":{\"5999\":4}}],[\"ordername\",{\"1\":{\"5999\":4}}],[\"order\",{\"0\":{\"1351\":1,\"1353\":1},\"1\":{\"1331\":1,\"4425\":5,\"5350\":8,\"5999\":2,\"6001\":3,\"7991\":2}}],[\"orders\",{\"1\":{\"1329\":1}}],[\"or\",{\"1\":{\"1210\":1,\"3790\":1,\"7892\":2,\"7893\":2,\"8361\":1,\"10246\":1,\"10311\":1,\"10372\":1,\"10411\":1}}],[\"org\",{\"1\":{\"725\":1,\"734\":1,\"1229\":1,\"1364\":1,\"2256\":2,\"8335\":1,\"8336\":1,\"8337\":1,\"9642\":1,\"9645\":1}}],[\"onetest\",{\"1\":{\"5310\":1}}],[\"one\",{\"1\":{\"1881\":2,\"5219\":1}}],[\"onmismatch>\",{\"1\":{\"952\":3}}],[\"onmatch>\",{\"1\":{\"952\":3}}],[\"on\",{\"1\":{\"830\":2,\"8595\":1,\"8600\":1,\"8837\":1,\"9899\":1}}],[\"operationtime\",{\"1\":{\"10554\":1,\"10573\":1,\"10580\":1,\"10657\":1,\"10660\":1}}],[\"opeitons\",{\"1\":{\"10417\":1}}],[\"openssl\",{\"1\":{\"10770\":1}}],[\"openstream\",{\"1\":{\"6895\":1}}],[\"open\",{\"1\":{\"8593\":1}}],[\"openconnection\",{\"1\":{\"6898\":1,\"6899\":1}}],[\"openoption\",{\"1\":{\"6630\":1,\"6632\":1,\"6633\":1}}],[\"openjdk\",{\"1\":{\"2877\":2}}],[\"openfeign\",{\"1\":{\"22\":1}}],[\"optimedurabledate\",{\"1\":{\"10576\":1}}],[\"optimedurable\",{\"1\":{\"10576\":1}}],[\"optimedate\",{\"1\":{\"10554\":1,\"10576\":1}}],[\"optime\",{\"1\":{\"10554\":1,\"10576\":1}}],[\"optimes\",{\"1\":{\"10554\":1}}],[\"options里有很多选项\",{\"1\":{\"10281\":1}}],[\"options选项\",{\"0\":{\"10280\":1}}],[\"options\",{\"1\":{\"8806\":2,\"10276\":1,\"10279\":1,\"10321\":1,\"10324\":1,\"10385\":1,\"10390\":1,\"10417\":1}}],[\"optional加强\",{\"0\":{\"7776\":1}}],[\"optional常用方法\",{\"0\":{\"7739\":1}}],[\"optional类已经成为java\",{\"1\":{\"7734\":1}}],[\"optional\",{\"0\":{\"7729\":1,\"7730\":1,\"7741\":1,\"7744\":1,\"7747\":1},\"1\":{\"7685\":1,\"7688\":1,\"7694\":1,\"7697\":1,\"7712\":1,\"7716\":1,\"7732\":2,\"7742\":1,\"7743\":2,\"7745\":1,\"7746\":1,\"7749\":5,\"7753\":1,\"7756\":1,\"7760\":2,\"7763\":1}}],[\"optional<object>\",{\"1\":{\"7746\":1}}],[\"optional<student>\",{\"1\":{\"7743\":1,\"7749\":2,\"7753\":1,\"7756\":1,\"7760\":1,\"7763\":1}}],[\"optional<integer>\",{\"1\":{\"7712\":1}}],[\"optional<t>类\",{\"1\":{\"7732\":1}}],[\"optional<t>\",{\"1\":{\"7711\":1,\"7743\":1,\"7749\":1}}],[\"optional<double>\",{\"1\":{\"7694\":1,\"7716\":1}}],[\"optional<employee>\",{\"1\":{\"7685\":1,\"7688\":1,\"7697\":1}}],[\"optional<>\",{\"1\":{\"7685\":1,\"7688\":1,\"7694\":1,\"7697\":1}}],[\"optional>\",{\"1\":{\"550\":1,\"1161\":1,\"1167\":1,\"1177\":2}}],[\"opt\",{\"1\":{\"10154\":1,\"10157\":1,\"10162\":2,\"10164\":2,\"10483\":1,\"10484\":1,\"10496\":3,\"10498\":1,\"10501\":3,\"10503\":1,\"10506\":3,\"10508\":1,\"10774\":3,\"10777\":1}}],[\"optstu\",{\"1\":{\"7763\":2}}],[\"optstu2\",{\"1\":{\"7753\":2}}],[\"opts\",{\"1\":{\"6623\":1,\"6624\":1,\"6625\":1,\"6629\":1}}],[\"opsforhash\",{\"1\":{\"1029\":1}}],[\"opsforvalue\",{\"1\":{\"1029\":1,\"1038\":1}}],[\"ops\",{\"1\":{\"1029\":5,\"1038\":2}}],[\"out类的println方法\",{\"1\":{\"7464\":1}}],[\"out返回的是printstream的实例\",{\"1\":{\"6458\":1}}],[\"outputsteram\",{\"1\":{\"6907\":1}}],[\"outputstream和filewriter的处理流\",{\"1\":{\"6451\":1}}],[\"outputstream和write都是抽象类\",{\"1\":{\"2077\":1}}],[\"outputstream和write都是输出流\",{\"1\":{\"2067\":1}}],[\"outputstream的子类filteroutputstream的子类\",{\"1\":{\"6440\":1}}],[\"outputstreamwriter\",{\"0\":{\"6399\":1},\"1\":{\"2070\":1,\"6369\":1,\"6402\":1,\"6411\":2}}],[\"outputstream\",{\"0\":{\"2063\":1,\"6198\":1,\"6199\":1},\"1\":{\"2070\":1,\"6328\":2,\"6402\":1,\"6404\":1,\"6633\":2,\"6775\":1,\"6803\":1,\"9091\":1,\"9092\":1}}],[\"outputsreamwriter\",{\"1\":{\"6404\":1}}],[\"output\",{\"1\":{\"6155\":1,\"6174\":1,\"9507\":1}}],[\"output的缩写\",{\"1\":{\"6150\":1}}],[\"outofmemoryerror\",{\"1\":{\"4670\":1}}],[\"outer\",{\"1\":{\"4358\":2}}],[\"out\",{\"0\":{\"6437\":1},\"1\":{\"372\":1,\"430\":1,\"508\":3,\"522\":1,\"882\":1,\"888\":1,\"955\":1,\"991\":1,\"1016\":2,\"1038\":1,\"1083\":1,\"1224\":1,\"1241\":5,\"1421\":1,\"1424\":2,\"1427\":2,\"1431\":1,\"1435\":2,\"1438\":2,\"1442\":1,\"1449\":1,\"1452\":1,\"1455\":2,\"1458\":1,\"1464\":2,\"1467\":2,\"1472\":1,\"1475\":1,\"1480\":2,\"1486\":1,\"1491\":1,\"1494\":1,\"1496\":1,\"1502\":2,\"1506\":2,\"1512\":1,\"1515\":1,\"1518\":1,\"1521\":1,\"1524\":1,\"1529\":1,\"1581\":3,\"1584\":2,\"1589\":1,\"1595\":1,\"1601\":1,\"1604\":1,\"1648\":3,\"1654\":8,\"1657\":8,\"1660\":8,\"1673\":1,\"1676\":2,\"1679\":1,\"1682\":1,\"1705\":1,\"1707\":1,\"1719\":2,\"1725\":1,\"1771\":1,\"1773\":1,\"1788\":2,\"1791\":1,\"1800\":1,\"1805\":2,\"1808\":1,\"1811\":1,\"1814\":2,\"1817\":1,\"1820\":2,\"1823\":2,\"1825\":2,\"1832\":4,\"1850\":1,\"1853\":1,\"1856\":2,\"1862\":2,\"1879\":2,\"1886\":1,\"1889\":1,\"1892\":1,\"1899\":1,\"1907\":1,\"1937\":1,\"1950\":1,\"1953\":1,\"1956\":1,\"1959\":1,\"1963\":1,\"1966\":1,\"1971\":1,\"1975\":1,\"1979\":1,\"1982\":1,\"1985\":1,\"1989\":1,\"1993\":1,\"2003\":3,\"2006\":3,\"2009\":3,\"2015\":3,\"2022\":3,\"2042\":3,\"2048\":3,\"2121\":1,\"2134\":1,\"2137\":1,\"2141\":1,\"2144\":1,\"2147\":1,\"2153\":1,\"2156\":1,\"2159\":1,\"2162\":1,\"2165\":1,\"2168\":1,\"2171\":1,\"2175\":1,\"2178\":1,\"2185\":1,\"2188\":1,\"2191\":1,\"2194\":1,\"2197\":1,\"2200\":1,\"2204\":1,\"2211\":1,\"2225\":1,\"2228\":1,\"2231\":1,\"2239\":1,\"2244\":1,\"2256\":1,\"2263\":1,\"2266\":1,\"2269\":1,\"2272\":2,\"2275\":1,\"2282\":1,\"2304\":1,\"2314\":7,\"2331\":2,\"2345\":2,\"2354\":2,\"2362\":1,\"2365\":1,\"2370\":2,\"2375\":4,\"2379\":1,\"2382\":1,\"2387\":1,\"2391\":1,\"2404\":1,\"2407\":2,\"2410\":1,\"2413\":1,\"2416\":1,\"2422\":3,\"2426\":1,\"2429\":2,\"2433\":1,\"2436\":2,\"2444\":1,\"2449\":1,\"2461\":1,\"2465\":1,\"2469\":1,\"2484\":2,\"2487\":3,\"2492\":3,\"2495\":2,\"2500\":1,\"2505\":1,\"2508\":1,\"2512\":2,\"2515\":1,\"2530\":1,\"2537\":2,\"2546\":3,\"2549\":2,\"2552\":1,\"2555\":1,\"2563\":3,\"2566\":2,\"2569\":2,\"2589\":2,\"2592\":1,\"2595\":3,\"2598\":1,\"2601\":2,\"2604\":2,\"2606\":2,\"2609\":1,\"2612\":2,\"2615\":1,\"2618\":1,\"2621\":2,\"2624\":3,\"2692\":2,\"2697\":2,\"2700\":1,\"2705\":1,\"2747\":1,\"2750\":1,\"2756\":1,\"2760\":1,\"2788\":2,\"2802\":2,\"2882\":1,\"2912\":1,\"2913\":1,\"2962\":2,\"3212\":2,\"3237\":3,\"3241\":3,\"3261\":2,\"3374\":2,\"3405\":2,\"3414\":2,\"3420\":1,\"3444\":1,\"3453\":2,\"3455\":2,\"3457\":3,\"3509\":1,\"3512\":1,\"3570\":2,\"3588\":2,\"3591\":2,\"3630\":2,\"3636\":1,\"3646\":1,\"3664\":2,\"3738\":1,\"3747\":1,\"3782\":1,\"3803\":1,\"4039\":3,\"4061\":3,\"4077\":1,\"4080\":2,\"4083\":1,\"4164\":4,\"4178\":2,\"4227\":5,\"4229\":2,\"4256\":2,\"4274\":1,\"4281\":2,\"4329\":3,\"4356\":1,\"4358\":1,\"4378\":2,\"4422\":1,\"4459\":1,\"4466\":1,\"4469\":3,\"4513\":7,\"4523\":3,\"4553\":2,\"4658\":2,\"4661\":2,\"4709\":2,\"4712\":1,\"4714\":1,\"4720\":1,\"4722\":1,\"4724\":1,\"4734\":7,\"4751\":2,\"4753\":1,\"4777\":2,\"4803\":2,\"4845\":3,\"4872\":4,\"5060\":5,\"5185\":2,\"5219\":1,\"5221\":3,\"5253\":4,\"5263\":1,\"5310\":1,\"5322\":1,\"5345\":1,\"5396\":1,\"5426\":4,\"5464\":1,\"5486\":2,\"5517\":1,\"5562\":1,\"5590\":4,\"5592\":1,\"5595\":1,\"5611\":1,\"5614\":1,\"5618\":1,\"5620\":1,\"5779\":2,\"5790\":1,\"5901\":1,\"5913\":1,\"5927\":2,\"5964\":1,\"5967\":2,\"5970\":1,\"6073\":1,\"6078\":1,\"6081\":1,\"6132\":3,\"6136\":1,\"6251\":1,\"6254\":1,\"6260\":1,\"6264\":1,\"6328\":4,\"6334\":4,\"6348\":1,\"6359\":1,\"6394\":1,\"6398\":1,\"6402\":1,\"6404\":1,\"6436\":1,\"6439\":1,\"6443\":1,\"6449\":3,\"6460\":2,\"6487\":3,\"6557\":1,\"6573\":2,\"6700\":1,\"6703\":2,\"6706\":1,\"6708\":1,\"6711\":1,\"6803\":2,\"6819\":1,\"6843\":1,\"6949\":1,\"6956\":2,\"6958\":1,\"6960\":2,\"6962\":2,\"6989\":3,\"6994\":1,\"6997\":1,\"7000\":1,\"7002\":1,\"7043\":4,\"7049\":1,\"7054\":2,\"7072\":1,\"7078\":1,\"7086\":4,\"7097\":2,\"7106\":12,\"7128\":3,\"7132\":1,\"7134\":1,\"7137\":1,\"7139\":3,\"7141\":1,\"7143\":1,\"7146\":1,\"7161\":2,\"7179\":1,\"7227\":2,\"7229\":1,\"7284\":1,\"7307\":2,\"7373\":2,\"7377\":3,\"7382\":1,\"7386\":1,\"7390\":6,\"7462\":1,\"7468\":1,\"7590\":1,\"7593\":1,\"7616\":1,\"7619\":1,\"7623\":1,\"7626\":1,\"7634\":2,\"7658\":1,\"7670\":1,\"7673\":1,\"7678\":1,\"7680\":1,\"7682\":1,\"7685\":1,\"7688\":1,\"7691\":1,\"7694\":1,\"7697\":1,\"7701\":1,\"7708\":1,\"7712\":1,\"7716\":1,\"7743\":1,\"7749\":2,\"7753\":1,\"7756\":1,\"7760\":2,\"7763\":1,\"7852\":1,\"7862\":1,\"7865\":1,\"7873\":1,\"8037\":1,\"8047\":2,\"8056\":1,\"8089\":1,\"8113\":1,\"8121\":1,\"8148\":1,\"8162\":2,\"8210\":8,\"8326\":1,\"8381\":1,\"8383\":1,\"8385\":1,\"8387\":1,\"8389\":2,\"8391\":2,\"8504\":1,\"8704\":1,\"8768\":1,\"8772\":1,\"8777\":1,\"8784\":1,\"8809\":2,\"8944\":8,\"8951\":2,\"8955\":1,\"8990\":1,\"9027\":6,\"9124\":3,\"9143\":1,\"9145\":1,\"9452\":2,\"9695\":1,\"9726\":1}}],[\"other\",{\"0\":{\"140\":1,\"10871\":1},\"1\":{\"4241\":4,\"7763\":1}}],[\"正向索引的缺点\",{\"0\":{\"9926\":1}}],[\"正向索引的结构\",{\"0\":{\"9922\":1}}],[\"正向索引解析\",{\"0\":{\"9924\":1}}],[\"正排索引\",{\"0\":{\"9917\":1},\"1\":{\"9956\":1}}],[\"正式为类变量\",{\"1\":{\"7015\":1}}],[\"正式提供对外服务的环境\",{\"1\":{\"119\":1}}],[\"正因为加载过所有的父类的结构\",{\"1\":{\"4112\":1}}],[\"正确\",{\"1\":{\"3263\":1}}],[\"正确的\",{\"1\":{\"5996\":1}}],[\"正确的写法\",{\"1\":{\"3282\":1}}],[\"正确的缩进和空白\",{\"1\":{\"2991\":1}}],[\"正确的注释和注释风格\",{\"1\":{\"2988\":1}}],[\"正数\",{\"1\":{\"9719\":1}}],[\"正数的补码就是其本身\",{\"1\":{\"3190\":1}}],[\"正数的反码是其本身\",{\"1\":{\"3189\":1}}],[\"正数就舍去\",{\"1\":{\"1919\":1}}],[\"正数就进一\",{\"1\":{\"1916\":1}}],[\"正常关闭\",{\"1\":{\"8437\":1,\"8438\":1}}],[\"正常的方法调用\",{\"0\":{\"4144\":1}}],[\"正常在jdk安装时已经装过了\",{\"1\":{\"2854\":1}}],[\"正常值下\",{\"1\":{\"1916\":1,\"1919\":1}}],[\"正常情况下\",{\"1\":{\"1730\":1}}],[\"正常\",{\"1\":{\"1334\":1,\"1346\":1}}],[\"正在记录的日志文件的路径及文件名\",{\"1\":{\"952\":3}}],[\"正则条件查询\",{\"0\":{\"10342\":1}}],[\"正则约束\",{\"1\":{\"9642\":1}}],[\"正则表达式是js的语法\",{\"1\":{\"10344\":1}}],[\"正则表达式是否与字符序列匹配\",{\"1\":{\"2755\":1}}],[\"正则表达式\",{\"1\":{\"2690\":1,\"2695\":1,\"2753\":1,\"10109\":1,\"10346\":1}}],[\"正则表达式和\",{\"1\":{\"2663\":1}}],[\"正则模式对象\",{\"1\":{\"2683\":1}}],[\"正则相关的类\",{\"0\":{\"2662\":1}}],[\"正则的语法都是通用的\",{\"1\":{\"2661\":1}}],[\"正则类\",{\"0\":{\"2659\":1}}],[\"正则替换第一个子字符串\",{\"0\":{\"1519\":1}}],[\"正则全部替换\",{\"0\":{\"1516\":1}}],[\"正则\",{\"0\":{\"166\":1,\"1507\":1},\"1\":{\"139\":1}}],[\"f8edfccba429b6477927a7c1ce1bc6729521305e\",{\"1\":{\"9895\":1}}],[\"features\",{\"1\":{\"9902\":1}}],[\"female\",{\"1\":{\"9642\":1}}],[\"fetch\",{\"1\":{\"8966\":1,\"8967\":1,\"8968\":1,\"8969\":1,\"10427\":1}}],[\"fe4d\",{\"1\":{\"6668\":1}}],[\"fname\",{\"1\":{\"7086\":2}}],[\"ftp站点\",{\"1\":{\"6866\":1}}],[\"ftp占用端口21\",{\"1\":{\"6683\":1}}],[\"ft\",{\"1\":{\"5486\":2}}],[\"f不区分大小写\",{\"1\":{\"3182\":1}}],[\"ff\",{\"1\":{\"2382\":1}}],[\"fw\",{\"1\":{\"2114\":6,\"6275\":2,\"6278\":1,\"6281\":1,\"6285\":5,\"6287\":5}}],[\"fdw\",{\"1\":{\"10766\":1}}],[\"fdobj\",{\"1\":{\"2090\":1}}],[\"fd\",{\"1\":{\"2087\":1}}],[\"fs\",{\"1\":{\"2036\":2}}],[\"f3\",{\"1\":{\"1946\":1,\"2022\":2,\"6136\":2}}],[\"f2\",{\"1\":{\"1946\":1,\"2015\":3,\"2022\":2,\"2036\":2,\"4178\":2,\"4281\":2,\"6132\":2}}],[\"f1是由son生产的而不是daughter\",{\"1\":{\"4184\":1}}],[\"f1是父类型对象\",{\"1\":{\"4174\":1}}],[\"f1变成了一个硬盘上不存在的文件\",{\"1\":{\"2019\":1}}],[\"f1在硬盘上不存在了\",{\"1\":{\"2019\":1}}],[\"f1和f2的对象都还在\",{\"1\":{\"2019\":1}}],[\"f1移动到f2后\",{\"1\":{\"2019\":1}}],[\"f1的硬盘文件跑这里了\",{\"1\":{\"2015\":1}}],[\"f1的硬盘文件已经不存在了\",{\"1\":{\"2015\":1}}],[\"f1=\",{\"1\":{\"2015\":1}}],[\"f1\",{\"1\":{\"1946\":1,\"2015\":2,\"2022\":2,\"2036\":2,\"3100\":1,\"3167\":1,\"3173\":1,\"4118\":1,\"4174\":2,\"4181\":2,\"4184\":3,\"4188\":4,\"4281\":2,\"4292\":2,\"6132\":2,\"6239\":2,\"6251\":2,\"6254\":2,\"6275\":2,\"6285\":2}}],[\"fucn2\",{\"1\":{\"7520\":1}}],[\"fucntion<integer\",{\"1\":{\"7520\":1}}],[\"fuck\",{\"1\":{\"1464\":3,\"1467\":3,\"1472\":2,\"1601\":1,\"2882\":1}}],[\"future<t>\",{\"1\":{\"5503\":1}}],[\"future接口\",{\"1\":{\"5477\":1}}],[\"future接口介绍\",{\"0\":{\"5473\":1}}],[\"futuretask\",{\"1\":{\"5477\":1,\"5486\":2}}],[\"futruetask是futrue接口的唯一的实现类\",{\"1\":{\"5475\":1}}],[\"fulfilled\",{\"1\":{\"4824\":1}}],[\"full\",{\"1\":{\"1714\":1}}],[\"func2\",{\"1\":{\"7520\":1,\"7527\":1,\"7537\":2}}],[\"func1\",{\"1\":{\"7517\":2,\"7525\":1,\"7535\":2}}],[\"function接口的第一个参数刚好是方法的调用者\",{\"1\":{\"7497\":1}}],[\"function<\",{\"1\":{\"7647\":1}}],[\"function<integer\",{\"1\":{\"7517\":1,\"7535\":1,\"7537\":1}}],[\"function<employee\",{\"1\":{\"7495\":1,\"7498\":1}}],[\"function<t\",{\"1\":{\"2639\":1,\"7434\":1}}],[\"function包下定义了java\",{\"1\":{\"7412\":1}}],[\"function\",{\"0\":{\"2637\":1},\"1\":{\"2974\":2,\"7634\":1,\"7647\":1,\"10114\":1}}],[\"functionalinterface\",{\"1\":{\"1778\":1,\"4905\":1,\"7415\":1,\"7418\":1}}],[\"functional\",{\"0\":{\"2625\":1,\"7394\":1,\"7397\":1,\"7402\":1},\"1\":{\"138\":1,\"7677\":1,\"7706\":1}}],[\"fun2\",{\"1\":{\"7498\":1,\"7527\":1}}],[\"fun1\",{\"1\":{\"4358\":4,\"7495\":1,\"7525\":1}}],[\"fun\",{\"1\":{\"4356\":3}}],[\"foobar\",{\"1\":{\"10090\":1,\"10111\":1}}],[\"fos=\",{\"1\":{\"2105\":1,\"2109\":1}}],[\"fos\",{\"1\":{\"2090\":1,\"2105\":2,\"2109\":1,\"6297\":2,\"6306\":5,\"6353\":2,\"6411\":2,\"6460\":2,\"6483\":2,\"6543\":2,\"6555\":2,\"6571\":2,\"8089\":2}}],[\"force\",{\"1\":{\"10597\":1}}],[\"forked\",{\"1\":{\"10164\":1,\"10498\":1}}],[\"fork\",{\"1\":{\"10162\":1,\"10164\":1,\"10496\":1,\"10498\":1}}],[\"forward\",{\"1\":{\"9112\":2,\"9124\":1,\"9159\":1,\"9291\":1,\"9295\":1,\"9298\":1}}],[\"forwhiletest\",{\"1\":{\"3414\":1}}],[\"foreach\",{\"0\":{\"7698\":1},\"1\":{\"7590\":1,\"7593\":1,\"7616\":1,\"7619\":1,\"7623\":1,\"7626\":1,\"7634\":2,\"7658\":1,\"7670\":1,\"7673\":1,\"7701\":2,\"8056\":1,\"8210\":1,\"8387\":1}}],[\"for循环与增强for循环的对比\",{\"0\":{\"5615\":1}}],[\"for循环遍历\",{\"0\":{\"5591\":1}}],[\"for循环\",{\"1\":{\"3412\":1}}],[\"for循环内只要有两个\",{\"1\":{\"3409\":1}}],[\"for循环和while循环的初始化条件部分的作用范围不同\",{\"1\":{\"3408\":1}}],[\"for循环和while循环是可以相互转换的\",{\"1\":{\"3407\":1}}],[\"for循环和while循环\",{\"0\":{\"3406\":1}}],[\"for循环的使用\",{\"0\":{\"3391\":1}}],[\"for循环的结构\",{\"0\":{\"3387\":1}}],[\"forname\",{\"0\":{\"2138\":1,\"2145\":1,\"6998\":1},\"1\":{\"2141\":1,\"2147\":2,\"6949\":1,\"7000\":1,\"7858\":1,\"7862\":1,\"7865\":1,\"7873\":1,\"7970\":1,\"7975\":1}}],[\"for\",{\"0\":{\"3378\":1,\"5605\":1},\"1\":{\"2048\":1,\"2621\":1,\"3337\":1,\"3390\":1,\"3393\":1,\"3409\":1,\"3412\":1,\"3414\":1,\"3444\":2,\"3453\":2,\"3455\":2,\"3457\":3,\"3486\":1,\"3512\":1,\"3570\":2,\"3658\":1,\"3754\":1,\"3803\":1,\"4358\":1,\"5060\":2,\"5185\":2,\"5221\":2,\"5253\":2,\"5486\":1,\"5517\":1,\"5592\":1,\"5610\":1,\"5611\":2,\"5613\":1,\"5614\":2,\"5618\":2,\"5620\":2,\"5964\":1,\"5967\":1,\"6045\":1,\"6254\":1,\"6264\":1,\"6460\":1,\"7072\":1,\"7078\":1,\"7086\":1,\"7097\":2,\"7106\":4,\"7128\":2,\"7139\":2,\"7143\":1,\"7989\":1,\"8045\":2,\"8054\":2,\"8109\":1,\"8113\":1,\"8121\":1,\"8126\":1,\"8146\":1,\"8201\":6,\"9027\":3,\"9690\":1,\"9695\":1,\"9895\":1,\"10164\":1,\"10498\":1,\"10526\":1}}],[\"form>\",{\"1\":{\"8988\":1,\"9025\":1}}],[\"formatter\",{\"1\":{\"1723\":1,\"1725\":2,\"1727\":2}}],[\"formatter2\",{\"1\":{\"1719\":3}}],[\"formatstyle\",{\"1\":{\"1714\":1,\"1715\":1,\"1716\":1,\"1717\":1,\"1719\":1}}],[\"format方法\",{\"1\":{\"1690\":1}}],[\"format\",{\"0\":{\"1689\":1},\"1\":{\"1627\":1,\"1692\":1,\"1705\":1,\"1719\":1,\"1725\":1,\"6427\":1,\"10081\":1}}],[\"formindex参数指定开始排序的下标\",{\"1\":{\"2368\":1}}],[\"formindex为开始排序的下标\",{\"1\":{\"2361\":1}}],[\"formindex\",{\"1\":{\"1437\":1}}],[\"folders\",{\"1\":{\"355\":1}}],[\"fream\",{\"1\":{\"8600\":1}}],[\"free\",{\"1\":{\"4823\":1}}],[\"frequency\",{\"0\":{\"2506\":1},\"1\":{\"2508\":4}}],[\"frame\",{\"0\":{\"10868\":1}}],[\"frameworks\",{\"1\":{\"8537\":1}}],[\"framework\",{\"1\":{\"976\":1}}],[\"fragment\",{\"1\":{\"4602\":1}}],[\"fr\",{\"1\":{\"2036\":2,\"2121\":2,\"6239\":2,\"6243\":1,\"6246\":1,\"6251\":6,\"6254\":6,\"6287\":5,\"6348\":2}}],[\"front\",{\"1\":{\"1372\":1,\"1376\":2}}],[\"fromindex\",{\"1\":{\"1435\":1,\"1438\":1,\"2362\":1,\"2370\":1,\"2569\":1}}],[\"from\",{\"1\":{\"391\":1,\"988\":1,\"2765\":1,\"7889\":1,\"7893\":1,\"7991\":1,\"8037\":1,\"8047\":2,\"8056\":1,\"8089\":1,\"8162\":1,\"8207\":5,\"8358\":1,\"8383\":1,\"8385\":1,\"8387\":1,\"8389\":1,\"8391\":2,\"8548\":1,\"8560\":1,\"10554\":1,\"10573\":1,\"10580\":1,\"10657\":1,\"10660\":1}}],[\"failed\",{\"1\":{\"10734\":1,\"10864\":1}}],[\"facets\",{\"1\":{\"8534\":1,\"8567\":1}}],[\"factory\",{\"1\":{\"7227\":5}}],[\"factor\",{\"1\":{\"5887\":1}}],[\"fa\",{\"1\":{\"4092\":2}}],[\"fathe\",{\"1\":{\"4092\":1}}],[\"father<integer\",{\"1\":{\"6022\":1,\"6028\":1}}],[\"father<object\",{\"1\":{\"6019\":1}}],[\"father<t1\",{\"1\":{\"6016\":1,\"6025\":1}}],[\"father的age\",{\"1\":{\"4178\":1}}],[\"father\",{\"1\":{\"4039\":2,\"4061\":3,\"4080\":1,\"4083\":1,\"4092\":1,\"4118\":1,\"4162\":2,\"4164\":4,\"4174\":1,\"4178\":2,\"4181\":1,\"4184\":1,\"4499\":1,\"6019\":1}}],[\"fatehr\",{\"1\":{\"4061\":1}}],[\"fatal\",{\"1\":{\"898\":1,\"952\":1}}],[\"fallthrough\",{\"1\":{\"5052\":1}}],[\"falgs表示模式pattern对象的模式修饰符\",{\"1\":{\"2719\":1}}],[\"false用0表示\",{\"1\":{\"3145\":1}}],[\"false=覆盖写\",{\"1\":{\"2085\":1}}],[\"false\",{\"1\":{\"486\":3,\"581\":1,\"584\":1,\"1296\":1,\"1427\":1,\"1442\":1,\"1455\":1,\"1760\":1,\"2022\":2,\"2098\":1,\"2109\":1,\"2114\":1,\"2422\":1,\"2604\":1,\"2606\":1,\"2612\":1,\"3142\":1,\"3212\":1,\"3457\":1,\"3698\":1,\"4227\":2,\"4229\":1,\"4240\":2,\"4241\":5,\"4248\":1,\"4274\":1,\"4295\":1,\"5388\":1,\"5389\":1,\"6273\":1,\"6275\":2,\"7678\":1,\"7680\":1,\"7753\":1,\"7966\":1,\"8126\":1,\"8148\":1,\"8162\":1,\"8293\":1,\"8304\":1,\"8307\":1,\"9895\":1,\"9902\":2,\"10541\":2,\"10546\":1}}],[\"fastjson\",{\"0\":{\"1168\":1,\"9814\":1},\"1\":{\"9815\":1,\"9820\":1,\"9823\":1}}],[\"f\",{\"1\":{\"746\":1,\"2546\":3,\"2569\":2,\"3098\":2,\"4162\":5,\"4164\":6,\"5806\":1,\"7072\":2,\"7078\":2,\"7086\":4,\"7590\":1,\"7634\":1,\"7637\":1,\"7640\":1,\"7643\":1,\"7647\":1,\"10151\":1,\"10164\":1,\"10498\":1,\"10503\":1,\"10508\":1}}],[\"f9即可\",{\"1\":{\"8595\":1}}],[\"f9\",{\"1\":{\"553\":1}}],[\"fly\",{\"1\":{\"4491\":1}}],[\"flyable\",{\"1\":{\"4491\":1}}],[\"flush\",{\"0\":{\"2107\":1,\"6550\":1},\"1\":{\"2074\":1,\"2109\":3,\"2114\":1,\"6319\":1,\"6339\":1,\"6408\":1,\"6483\":3,\"6552\":1,\"6555\":1,\"6571\":2}}],[\"flushable\",{\"1\":{\"2070\":1}}],[\"fload表示数据的数据范围比long还大\",{\"1\":{\"3102\":1}}],[\"float就比long要大\",{\"1\":{\"3155\":1}}],[\"float同理\",{\"1\":{\"3110\":1,\"3172\":1}}],[\"floatvalue\",{\"1\":{\"1850\":1,\"4281\":1}}],[\"float\",{\"1\":{\"486\":1,\"1486\":3,\"1799\":1,\"1845\":1,\"1848\":1,\"1850\":1,\"2345\":1,\"2802\":1,\"3030\":1,\"3095\":1,\"3100\":1,\"3167\":1,\"3173\":1,\"3696\":1,\"4281\":3,\"4292\":1,\"4634\":1,\"6471\":1}}],[\"flot\",{\"1\":{\"1822\":1}}],[\"floor\",{\"0\":{\"1809\":1},\"1\":{\"1811\":4,\"1813\":1,\"1919\":1}}],[\"flatmap中\",{\"1\":{\"7648\":1}}],[\"flatmap\",{\"0\":{\"7644\":1,\"7659\":1},\"1\":{\"7601\":1,\"7647\":2,\"7662\":1}}],[\"flash\",{\"1\":{\"4513\":9}}],[\"flank\",{\"1\":{\"1773\":2,\"1791\":2}}],[\"flavor`\",{\"1\":{\"1344\":1,\"1350\":1,\"1354\":1}}],[\"flavor\",{\"0\":{\"1343\":1},\"1\":{\"1321\":1,\"9895\":1}}],[\"flags方法\",{\"1\":{\"2740\":1}}],[\"flags\",{\"0\":{\"2718\":1},\"1\":{\"2717\":1,\"2739\":1,\"2741\":1}}],[\"flag\",{\"1\":{\"1296\":11,\"1299\":6,\"2247\":1,\"3767\":1}}],[\"flink集成\",{\"1\":{\"238\":1}}],[\"first\",{\"1\":{\"6612\":1,\"7685\":2}}],[\"fis\",{\"1\":{\"4724\":4,\"4753\":6,\"4777\":4,\"5927\":2,\"6297\":2,\"6306\":5,\"6353\":2,\"6385\":2,\"6388\":2,\"6394\":2,\"6398\":2,\"6411\":2,\"6487\":2,\"6543\":2,\"6557\":2,\"6573\":2,\"7049\":3,\"9095\":3,\"9099\":3}}],[\"fianl\",{\"1\":{\"3990\":1}}],[\"fieldname\",{\"1\":{\"7146\":1}}],[\"fields\",{\"1\":{\"2185\":2,\"2188\":2,\"7072\":2}}],[\"field\",{\"0\":{\"2212\":1},\"1\":{\"2185\":2,\"2188\":2,\"2191\":2,\"2194\":2,\"2217\":1,\"2225\":1,\"2228\":1,\"2231\":1,\"2239\":1,\"2244\":1,\"3626\":1,\"3965\":1,\"4961\":1,\"4989\":1,\"4992\":1,\"5043\":1,\"5058\":1,\"5758\":1,\"6942\":1,\"6960\":1,\"6962\":1,\"7072\":2,\"7078\":2,\"7086\":2,\"7146\":1,\"7149\":1,\"7152\":1,\"8045\":4,\"8054\":4,\"8201\":8,\"10351\":10,\"10365\":1}}],[\"field类数组\",{\"1\":{\"2184\":1,\"2187\":1}}],[\"fill\",{\"0\":{\"2385\":1},\"1\":{\"2387\":2}}],[\"filterchain\",{\"1\":{\"9270\":1}}],[\"filterconfig\",{\"1\":{\"9270\":2}}],[\"filterdemo\",{\"1\":{\"9270\":1}}],[\"filter接口\",{\"1\":{\"9269\":1}}],[\"filter是独立的web模块\",{\"1\":{\"9267\":1}}],[\"filter的位置\",{\"0\":{\"9266\":1}}],[\"filters\",{\"1\":{\"8318\":1}}],[\"filters=wall\",{\"1\":{\"8263\":1}}],[\"filteroutputstream\",{\"1\":{\"6328\":1}}],[\"filterinputstream\",{\"1\":{\"6325\":1}}],[\"filter>\",{\"1\":{\"952\":4}}],[\"filter\",{\"0\":{\"7614\":1,\"9263\":1,\"10889\":1},\"1\":{\"952\":4,\"1119\":1,\"7600\":1,\"7616\":2,\"7723\":2,\"8667\":1,\"9270\":1,\"9314\":1}}],[\"fileattribute<\",{\"1\":{\"6617\":1,\"6618\":1}}],[\"file包下还提供了files\",{\"1\":{\"6596\":1}}],[\"filechannel\",{\"1\":{\"6584\":1}}],[\"file对应的硬盘中的文件如果存在\",{\"1\":{\"6272\":1}}],[\"file对象可以作为参数传递给流的构造器\",{\"1\":{\"6113\":1}}],[\"file的作用\",{\"0\":{\"6111\":1}}],[\"file类提供了一个常量\",{\"1\":{\"6124\":1}}],[\"file类与文件\",{\"0\":{\"6114\":1}}],[\"file类即能表示文件\",{\"1\":{\"6106\":1}}],[\"file类\",{\"1\":{\"6106\":1}}],[\"fileoutputstream用于写出非文本数据之类的原始字节流\",{\"1\":{\"6201\":1}}],[\"fileoutputstream\",{\"1\":{\"2090\":7,\"2105\":2,\"2109\":2,\"6200\":1,\"6201\":1,\"6292\":1,\"6297\":5,\"6306\":2,\"6353\":2,\"6411\":2,\"6460\":2,\"6483\":2,\"6543\":2,\"6555\":2,\"6571\":2,\"8089\":2}}],[\"fileoutstream\",{\"0\":{\"2088\":1}}],[\"filedescriptor\",{\"1\":{\"2087\":1,\"2090\":1}}],[\"filewritertest\",{\"1\":{\"6285\":1}}],[\"filewriter写出示例\",{\"0\":{\"6284\":1}}],[\"filewriter和fileoutputstream\",{\"1\":{\"2077\":1}}],[\"filewriter\",{\"0\":{\"2081\":1,\"6265\":1},\"1\":{\"2070\":1,\"2087\":9,\"2090\":1,\"2098\":6,\"2109\":4,\"2114\":2,\"6203\":1,\"6204\":1,\"6266\":1,\"6275\":4,\"6285\":1,\"6287\":2}}],[\"filereader和filewriter都无法处理图片资源\",{\"1\":{\"6289\":1}}],[\"filereader与filewriter结合示例\",{\"0\":{\"6286\":1}}],[\"filereadertest\",{\"1\":{\"6251\":1,\"6254\":1}}],[\"filereader示例\",{\"0\":{\"6250\":1}}],[\"filereader的异常处理\",{\"0\":{\"6247\":1}}],[\"filereader的操作\",{\"0\":{\"6236\":1}}],[\"filereader\",{\"0\":{\"6234\":1},\"1\":{\"2036\":4,\"2042\":2,\"2048\":2,\"2062\":2,\"2121\":2,\"6196\":1,\"6197\":1,\"6235\":1,\"6239\":4,\"6251\":2,\"6254\":2,\"6287\":2,\"6348\":2}}],[\"fileinputstream用于读取非文本数据之类的原始字节流\",{\"1\":{\"6194\":1}}],[\"fileinputstream\",{\"1\":{\"2036\":4,\"2042\":2,\"2048\":2,\"2062\":2,\"4724\":2,\"4734\":1,\"4753\":2,\"4777\":2,\"5927\":2,\"6193\":1,\"6194\":1,\"6291\":1,\"6297\":5,\"6306\":2,\"6353\":2,\"6385\":2,\"6388\":2,\"6394\":2,\"6398\":2,\"6411\":2,\"6487\":2,\"6543\":2,\"6557\":2,\"6573\":2,\"7049\":4,\"8084\":2,\"9095\":2,\"9099\":2}}],[\"fileinputstream和filereader\",{\"1\":{\"2034\":1}}],[\"filenotfoundexception异常\",{\"1\":{\"6271\":1}}],[\"filenotfoundexception\",{\"1\":{\"2035\":1,\"4699\":1,\"4734\":1,\"4753\":1,\"4777\":1,\"6238\":1,\"6460\":1}}],[\"filename\",{\"1\":{\"1956\":2,\"2083\":1,\"2087\":2,\"9234\":2}}],[\"filenamepattern>\",{\"1\":{\"952\":3}}],[\"file>\",{\"1\":{\"952\":3}}],[\"files类常用方法\",{\"0\":{\"6614\":1}}],[\"files包含了大量静态的工具方法来操作文件\",{\"1\":{\"6596\":1}}],[\"files\",{\"1\":{\"355\":1,\"1083\":4,\"1975\":2,\"2022\":3,\"2121\":1,\"6239\":2,\"6251\":1,\"6254\":1,\"6275\":2,\"6285\":1,\"6348\":1,\"6353\":2,\"6615\":1}}],[\"file\",{\"0\":{\"1938\":1,\"6103\":1,\"6104\":1,\"6126\":1,\"6127\":1,\"6133\":1,\"6137\":2,\"6146\":1,\"9233\":1},\"1\":{\"355\":1,\"590\":1,\"930\":1,\"936\":2,\"952\":11,\"981\":1,\"985\":1,\"988\":1,\"991\":1,\"1008\":1,\"1941\":2,\"1943\":1,\"1946\":10,\"1950\":6,\"1953\":6,\"1956\":5,\"1959\":6,\"1963\":5,\"1966\":5,\"1971\":5,\"1975\":10,\"1979\":5,\"1982\":5,\"1985\":5,\"1989\":5,\"1993\":5,\"2003\":6,\"2006\":6,\"2009\":6,\"2015\":9,\"2022\":6,\"2036\":8,\"2042\":2,\"2048\":2,\"2062\":2,\"2082\":1,\"2083\":1,\"2087\":5,\"2090\":5,\"2098\":1,\"2105\":1,\"2109\":2,\"2114\":1,\"4232\":1,\"4255\":1,\"4724\":4,\"4734\":1,\"4753\":4,\"4777\":4,\"6112\":2,\"6132\":4,\"6136\":2,\"6229\":1,\"6230\":1,\"6239\":3,\"6251\":2,\"6254\":2,\"6275\":3,\"6285\":2,\"6287\":4,\"6297\":5,\"6306\":4,\"6353\":4,\"6385\":1,\"6388\":1,\"6394\":1,\"6398\":1,\"6460\":1,\"6505\":2,\"6594\":6,\"6609\":1,\"6615\":1,\"6881\":1,\"6883\":2,\"8084\":1,\"8988\":1,\"9452\":1,\"9505\":1,\"9974\":1,\"10162\":1,\"10496\":1}}],[\"fileter是javaweb核心三模块之一\",{\"1\":{\"9265\":1}}],[\"fileter\",{\"1\":{\"10\":1}}],[\"findone\",{\"1\":{\"10314\":1}}],[\"find\",{\"1\":{\"10306\":1,\"10311\":2,\"10314\":1,\"10317\":1,\"10331\":1,\"10333\":2,\"10337\":1,\"10339\":1,\"10346\":1,\"10348\":2,\"10351\":6,\"10354\":2,\"10357\":2,\"10417\":1,\"10422\":1,\"10432\":1,\"10724\":1}}],[\"findany\",{\"0\":{\"7686\":1},\"1\":{\"7688\":2}}],[\"findfirst\",{\"0\":{\"7683\":1},\"1\":{\"7685\":2}}],[\"final的\",{\"1\":{\"4843\":1}}],[\"final的类\",{\"1\":{\"4455\":1}}],[\"final的方法\",{\"1\":{\"4455\":1}}],[\"finalize\",{\"1\":{\"4211\":1}}],[\"final修饰\",{\"1\":{\"4843\":1}}],[\"final修饰的\",{\"1\":{\"4495\":1}}],[\"final修饰形参时\",{\"1\":{\"3989\":1}}],[\"final修饰形参\",{\"0\":{\"3988\":1}}],[\"final修饰局部变量\",{\"0\":{\"3986\":1}}],[\"final修饰属性\",{\"0\":{\"3983\":1}}],[\"final变量\",{\"0\":{\"3981\":1}}],[\"final方法\",{\"0\":{\"3977\":1}}],[\"final在public前后都可以\",{\"1\":{\"3976\":1}}],[\"final用来修饰一个类\",{\"1\":{\"3974\":1}}],[\"final类\",{\"0\":{\"3973\":1}}],[\"final可以用来修饰的结构\",{\"1\":{\"3972\":1}}],[\"finally处理\",{\"1\":{\"6283\":1}}],[\"finally处理异常\",{\"1\":{\"6249\":1}}],[\"finally处理编译时异常\",{\"1\":{\"4762\":1}}],[\"finally方式进行处理\",{\"1\":{\"4786\":1}}],[\"finally方式处理\",{\"1\":{\"4785\":1}}],[\"finally和throws的选择\",{\"0\":{\"4784\":1}}],[\"finally与throws的对比\",{\"0\":{\"4778\":1}}],[\"finally了\",{\"1\":{\"4764\":1}}],[\"finally将一个编译时可能出现的异常\",{\"1\":{\"4762\":1}}],[\"finally结构可以嵌套\",{\"1\":{\"4755\":1}}],[\"finally里吗也可能有异常\",{\"1\":{\"4753\":1}}],[\"finally中的代码总会执行\",{\"1\":{\"4750\":1}}],[\"finally中声明的是一定会被执行的代码\",{\"1\":{\"4745\":1}}],[\"finally一定会被执行\",{\"0\":{\"4747\":1}}],[\"finally语句为异常处理提供一个统一的出口\",{\"1\":{\"4745\":1}}],[\"finally的使用\",{\"0\":{\"4744\":1}}],[\"finally是可选的\",{\"1\":{\"4736\":1,\"4745\":1}}],[\"finally\",{\"1\":{\"2114\":1,\"4688\":1,\"4727\":1,\"4748\":1,\"4749\":1,\"4750\":1,\"4751\":2,\"4753\":1,\"4779\":1,\"5055\":2,\"5384\":1,\"5396\":1,\"6251\":1,\"6254\":1,\"6285\":1,\"6287\":1,\"6306\":1,\"6348\":1,\"6353\":1,\"6449\":1,\"6460\":1,\"6840\":1,\"6843\":1,\"7970\":1,\"7980\":1,\"7989\":1,\"8037\":1,\"8045\":1,\"8054\":1,\"8146\":1,\"8148\":1,\"8201\":4,\"8210\":7,\"8326\":1}}],[\"final\",{\"0\":{\"3969\":1,\"3991\":1},\"1\":{\"882\":1,\"1542\":4,\"1639\":1,\"1642\":1,\"1645\":1,\"1670\":1,\"1688\":1,\"1797\":1,\"1817\":1,\"1876\":1,\"1943\":1,\"2129\":1,\"2252\":1,\"2287\":1,\"2301\":1,\"2320\":1,\"2351\":1,\"2712\":1,\"2765\":1,\"2777\":1,\"3671\":1,\"3718\":1,\"3862\":1,\"3976\":2,\"3978\":1,\"3980\":1,\"3982\":1,\"3985\":3,\"3987\":1,\"3992\":1,\"4469\":1,\"4487\":1,\"4488\":2,\"4491\":2,\"4813\":1,\"4827\":1,\"4832\":1,\"4833\":1,\"4839\":1,\"4840\":1,\"4843\":6,\"4853\":1,\"4872\":2,\"5345\":1,\"5384\":1,\"6124\":1,\"6569\":1,\"6577\":2,\"6875\":1,\"7590\":2,\"8806\":7}}],[\"finish\",{\"1\":{\"325\":1,\"8550\":1,\"8562\":1}}],[\"uuid\",{\"1\":{\"9895\":1,\"10726\":3}}],[\"ua\",{\"1\":{\"8960\":1,\"8961\":1,\"8962\":1}}],[\"uanme\",{\"1\":{\"3901\":3,\"5927\":1}}],[\"u\",{\"1\":{\"6899\":1,\"7523\":1}}],[\"udp通信流程\",{\"0\":{\"6832\":1}}],[\"udp数据报通过数据报套接字\",{\"1\":{\"6829\":1}}],[\"udp\",{\"1\":{\"6828\":1,\"8414\":1}}],[\"udp网络通信\",{\"0\":{\"6827\":1}}],[\"udp网络编程\",{\"0\":{\"6826\":1}}],[\"udp网络编程中发送端和接收端的channe\",{\"1\":{\"6587\":1}}],[\"udp编程\",{\"0\":{\"6825\":1}}],[\"udp协议中每个数据报都给出了完整的地址信息\",{\"1\":{\"6831\":1}}],[\"udp协议\",{\"0\":{\"6736\":1}}],[\"uri是以一种抽象的\",{\"1\":{\"6911\":1}}],[\"uri\",{\"0\":{\"6908\":1},\"1\":{\"6613\":2,\"6909\":1,\"10846\":1}}],[\"urlencoder\",{\"1\":{\"9726\":1}}],[\"url解码解析\",{\"1\":{\"9725\":1}}],[\"url>\",{\"1\":{\"9608\":1}}],[\"urlpattern一共有四种匹配模式\",{\"1\":{\"8839\":1}}],[\"urlpatterns\",{\"1\":{\"8837\":1,\"8843\":1,\"8848\":1,\"8854\":1,\"8857\":1}}],[\"urlpatterns=\",{\"1\":{\"8768\":1,\"8834\":1}}],[\"urlpattern\",{\"0\":{\"8830\":1}}],[\"url=jdbc\",{\"1\":{\"7871\":1,\"8263\":1}}],[\"url和urn都是一种uri\",{\"1\":{\"6913\":1}}],[\"url和urn的区别\",{\"0\":{\"6908\":1}}],[\"urlconnectonn\",{\"1\":{\"6899\":1}}],[\"urlconnection对象\",{\"1\":{\"6898\":1}}],[\"urlconnection的创建\",{\"0\":{\"6897\":1}}],[\"urlconnection类是专门针对http协议的\",{\"1\":{\"6894\":1}}],[\"urlconnection\",{\"0\":{\"6893\":1},\"1\":{\"6919\":1}}],[\"url的格式为\",{\"1\":{\"7844\":1}}],[\"url的方法\",{\"1\":{\"6895\":1}}],[\"url的基本结构\",{\"0\":{\"6868\":1}}],[\"url地址的字符串\",{\"1\":{\"6877\":1}}],[\"url类常用方法\",{\"0\":{\"6885\":1}}],[\"url类的构造器都声明抛出非运行时异常\",{\"1\":{\"6884\":1}}],[\"url类\",{\"0\":{\"6873\":1}}],[\"url介绍\",{\"0\":{\"6864\":1}}],[\"url编程\",{\"0\":{\"6863\":1}}],[\"url\",{\"0\":{\"7843\":1},\"1\":{\"307\":1,\"516\":1,\"519\":1,\"522\":1,\"590\":1,\"969\":1,\"981\":1,\"995\":1,\"1008\":1,\"1206\":1,\"1364\":1,\"6865\":1,\"6866\":1,\"6867\":1,\"6874\":1,\"6875\":1,\"6876\":1,\"6878\":1,\"6883\":16,\"6898\":1,\"6899\":2,\"6919\":3,\"7835\":1,\"7839\":1,\"7852\":2,\"7862\":2,\"7865\":2,\"7873\":3,\"7947\":1,\"7970\":3,\"7975\":3,\"8271\":1,\"8594\":1,\"8940\":1}}],[\"ucs\",{\"1\":{\"6427\":1}}],[\"u4\",{\"1\":{\"5913\":2}}],[\"u3\",{\"1\":{\"5913\":2}}],[\"u2\",{\"1\":{\"5794\":2,\"5913\":2,\"5916\":2}}],[\"u>\",{\"1\":{\"5030\":1}}],[\"ui\",{\"1\":{\"4608\":1,\"5081\":1}}],[\"ui设计师\",{\"1\":{\"111\":1}}],[\"uml类图\",{\"0\":{\"4590\":1}}],[\"u盘结束工作\",{\"1\":{\"4513\":1}}],[\"u盘开启工作\",{\"1\":{\"4513\":1}}],[\"u1\",{\"1\":{\"3957\":1,\"5794\":2,\"5913\":2,\"5916\":2}}],[\"u0000\",{\"1\":{\"3697\":1}}],[\"u0043\",{\"1\":{\"3125\":1}}],[\"uptime\",{\"1\":{\"10554\":1,\"10576\":1,\"10583\":1}}],[\"upsert\",{\"1\":{\"10282\":1}}],[\"upgrade\",{\"1\":{\"8963\":1}}],[\"updata\",{\"1\":{\"8146\":1}}],[\"updatemany\",{\"1\":{\"10293\":1}}],[\"updateone\",{\"1\":{\"10290\":1}}],[\"updatebyid\",{\"1\":{\"1224\":1,\"1265\":1}}],[\"update\",{\"1\":{\"1224\":1,\"1263\":1,\"1276\":1,\"1299\":1,\"7980\":1,\"7989\":1,\"7991\":3,\"8091\":1,\"8148\":4,\"8167\":1,\"8180\":1,\"8201\":2,\"8205\":1,\"8207\":5,\"8210\":1,\"8355\":1,\"8361\":1,\"8381\":1,\"8383\":1,\"8595\":1,\"8596\":1,\"8597\":1,\"9854\":1,\"10276\":2,\"10278\":1,\"10296\":1}}],[\"uppercase\",{\"1\":{\"6449\":2}}],[\"up\",{\"1\":{\"1907\":1,\"1910\":1,\"1922\":1}}],[\"until\",{\"1\":{\"10164\":1,\"10498\":1}}],[\"untreeify\",{\"1\":{\"5888\":1}}],[\"undeﬁned\",{\"1\":{\"10106\":1,\"10108\":1}}],[\"underscore\",{\"1\":{\"1364\":1}}],[\"unbounded\",{\"1\":{\"9642\":1}}],[\"uncommitted\",{\"1\":{\"8156\":1}}],[\"unchecked\",{\"1\":{\"4699\":1,\"5048\":1,\"5051\":1}}],[\"unaryoperator<t>\",{\"1\":{\"7590\":1}}],[\"unaryoperator\",{\"1\":{\"7589\":1}}],[\"uname>\",{\"1\":{\"9608\":1}}],[\"uname=aaron\",{\"1\":{\"8990\":1}}],[\"uname=sgugo\",{\"1\":{\"8943\":1,\"8944\":1}}],[\"uname=shk\",{\"1\":{\"6872\":1}}],[\"uname=jinno\",{\"1\":{\"5921\":1}}],[\"uname\",{\"1\":{\"1286\":2,\"3747\":1,\"3816\":1,\"3821\":1,\"3870\":4,\"3901\":1,\"5927\":1,\"8988\":1,\"9048\":1}}],[\"unlock\",{\"1\":{\"5384\":1,\"5394\":1,\"5396\":2}}],[\"unknownhostexception\",{\"1\":{\"6700\":1,\"6772\":1,\"6801\":1}}],[\"unknown\",{\"1\":{\"5060\":2}}],[\"uniform\",{\"1\":{\"6865\":1,\"6911\":1}}],[\"unix和url使用\",{\"1\":{\"6122\":1}}],[\"unix行模式\",{\"1\":{\"2731\":1}}],[\"unix\",{\"1\":{\"2731\":1}}],[\"unicode只是定义了一个庞大的\",{\"1\":{\"6428\":1}}],[\"unicode在很长一段时间内无法推广\",{\"1\":{\"6426\":1}}],[\"unicode不完美\",{\"1\":{\"6426\":1}}],[\"unicode是一种将全世界所有文字都包含的编码集\",{\"1\":{\"6426\":1}}],[\"unicode与utf\",{\"0\":{\"6425\":1},\"1\":{\"6428\":1}}],[\"unicode\",{\"1\":{\"2727\":1,\"2735\":1,\"3123\":2,\"3130\":1,\"3131\":1,\"6421\":1,\"6426\":1}}],[\"unique\",{\"1\":{\"1334\":1,\"1336\":1,\"1338\":1,\"1340\":1,\"10391\":1}}],[\"unsupportedoperationexception\",{\"1\":{\"2384\":1}}],[\"unsupportedencodingexception\",{\"1\":{\"1502\":1,\"1506\":1}}],[\"unnecessary\",{\"1\":{\"1904\":1,\"1930\":1}}],[\"unused\",{\"1\":{\"1083\":1}}],[\"util类库\",{\"0\":{\"9488\":1}}],[\"util\",{\"1\":{\"1611\":1,\"1616\":1,\"1667\":1,\"1669\":1,\"1736\":1,\"2348\":1,\"2349\":1,\"2449\":1,\"2664\":1,\"2668\":1,\"2673\":1,\"2946\":1,\"2954\":1,\"2962\":1,\"3414\":1,\"3936\":1,\"5379\":1,\"5396\":1,\"6949\":1,\"7307\":3,\"7412\":1,\"7543\":1,\"7732\":1,\"7956\":1,\"7970\":1,\"7972\":1}}],[\"utils包\",{\"1\":{\"1293\":1}}],[\"utils\",{\"1\":{\"1119\":1,\"1289\":1,\"4607\":1}}],[\"util包\",{\"0\":{\"133\":1,\"2772\":1}}],[\"utf8mb4\",{\"1\":{\"1348\":8}}],[\"utf8\",{\"1\":{\"1334\":6,\"1336\":1,\"1338\":4,\"1340\":4,\"1342\":3,\"1344\":2,\"1346\":5,\"1348\":2,\"1350\":3,\"1352\":6,\"1354\":3,\"6394\":1}}],[\"utf\",{\"0\":{\"6429\":1},\"1\":{\"952\":1,\"2981\":2,\"3131\":1,\"6388\":1,\"6394\":1,\"6398\":1,\"6411\":1,\"6422\":1,\"6427\":3,\"9046\":2,\"9048\":1,\"9054\":1,\"9101\":1,\"9608\":1,\"9612\":1,\"9613\":1,\"9635\":1,\"9726\":1}}],[\"usb结束工作\",{\"1\":{\"4513\":2}}],[\"usb开始工作\",{\"1\":{\"4513\":2}}],[\"usb\",{\"1\":{\"4513\":11}}],[\"usb是他们的一个功能\",{\"1\":{\"4478\":1}}],[\"usa\",{\"1\":{\"4388\":1}}],[\"use=\",{\"1\":{\"9642\":1}}],[\"use\",{\"0\":{\"5031\":1},\"1\":{\"4989\":1,\"5026\":1,\"5027\":1,\"8450\":1,\"10167\":1,\"10212\":1,\"10585\":1,\"10603\":1,\"10705\":1,\"10711\":1,\"10714\":1,\"10734\":1,\"10753\":1,\"10766\":1}}],[\"used\",{\"1\":{\"2962\":1,\"8358\":1}}],[\"useradminanydatabase\",{\"1\":{\"10666\":1,\"10683\":1,\"10714\":1}}],[\"useradmin\",{\"1\":{\"10660\":1,\"10667\":1,\"10689\":1}}],[\"userid字段的单字段正序索引\",{\"1\":{\"10406\":1}}],[\"userid\",{\"1\":{\"10252\":1,\"10264\":2,\"10293\":1,\"10314\":2,\"10317\":1,\"10326\":1,\"10339\":1,\"10348\":1,\"10354\":2,\"10357\":1,\"10369\":1,\"10394\":3,\"10399\":5,\"10406\":2,\"10411\":2,\"10422\":1,\"10432\":2,\"10603\":1,\"10726\":3}}],[\"user下的所有资源\",{\"1\":{\"9283\":1}}],[\"user=root\",{\"1\":{\"7871\":1}}],[\"user类\",{\"1\":{\"7199\":1}}],[\"user类中已经重写了compareto\",{\"1\":{\"5913\":1}}],[\"userdir\",{\"1\":{\"2314\":2}}],[\"userhome\",{\"1\":{\"2314\":2}}],[\"user`\",{\"1\":{\"1334\":2,\"1336\":2,\"1338\":2,\"1340\":2,\"1342\":2,\"1344\":2,\"1348\":2}}],[\"username=root\",{\"1\":{\"8263\":1}}],[\"username=\",{\"1\":{\"7749\":1,\"7756\":1,\"7760\":2,\"7763\":1}}],[\"username`\",{\"1\":{\"1334\":1}}],[\"username\",{\"1\":{\"516\":1,\"519\":1,\"590\":1,\"969\":1,\"981\":1,\"1008\":1,\"1206\":1,\"1364\":1,\"2314\":2,\"7655\":4,\"7889\":2,\"8273\":1,\"9025\":1,\"9027\":4,\"9726\":1,\"10843\":1,\"10846\":1}}],[\"user\",{\"0\":{\"1345\":1},\"1\":{\"503\":1,\"508\":1,\"1083\":1,\"1323\":1,\"2314\":3,\"2830\":1,\"3928\":1,\"3957\":2,\"4142\":5,\"5779\":3,\"5790\":13,\"5794\":6,\"5913\":8,\"5916\":6,\"6132\":1,\"6725\":1,\"6872\":1,\"7049\":4,\"7848\":1,\"7852\":1,\"7862\":2,\"7865\":2,\"7873\":3,\"7889\":6,\"7893\":3,\"7947\":1,\"7970\":3,\"7975\":3,\"8148\":4,\"8162\":7,\"8843\":2,\"8848\":2,\"8964\":1,\"8968\":1,\"9283\":1,\"9286\":1,\"9824\":3,\"10231\":1,\"10703\":2,\"10711\":1,\"10714\":1,\"10718\":1,\"10726\":3,\"10766\":1}}],[\"users中\",{\"1\":{\"10716\":1,\"10721\":1}}],[\"users3\",{\"1\":{\"489\":1}}],[\"users2\",{\"1\":{\"489\":1}}],[\"users\",{\"1\":{\"489\":1,\"503\":1,\"2314\":1,\"3496\":4,\"8617\":1,\"10722\":1,\"10724\":1}}],[\"using\",{\"1\":{\"1334\":1,\"1336\":1,\"1338\":1,\"1340\":1,\"1342\":1,\"1344\":1,\"1346\":1,\"1348\":1,\"1350\":1,\"1352\":1,\"1354\":1,\"8617\":1,\"10526\":1}}],[\"usr\",{\"1\":{\"756\":1,\"2877\":1}}],[\"数\",{\"1\":{\"10622\":1}}],[\"数之间用冒号\",{\"1\":{\"6667\":1}}],[\"数字越大越好\",{\"1\":{\"10134\":1}}],[\"数字越小优先级越高\",{\"1\":{\"8752\":1}}],[\"数字就这一种类型\",{\"1\":{\"10101\":1}}],[\"数字就代表该部分日志占多少位\",{\"1\":{\"921\":1}}],[\"数字不可以开头\",{\"1\":{\"3061\":1}}],[\"数值格式异常\",{\"0\":{\"4717\":1}}],[\"数值常量的默认数据类型\",{\"0\":{\"3163\":1}}],[\"数值型\",{\"1\":{\"3023\":1}}],[\"数值类型对应的包装类以及biginteger\",{\"1\":{\"1759\":1}}],[\"数学公式\",{\"0\":{\"1826\":1}}],[\"数学与数值\",{\"0\":{\"1792\":1},\"1\":{\"129\":1}}],[\"数量和类型\",{\"1\":{\"7410\":1}}],[\"数量\",{\"1\":{\"1350\":1,\"1354\":1}}],[\"数据损坏的修复\",{\"0\":{\"10857\":1}}],[\"数据新的节点获胜\",{\"1\":{\"10619\":1}}],[\"数据也插入成功\",{\"1\":{\"10604\":1}}],[\"数据读写\",{\"0\":{\"10600\":1}}],[\"数据读入\",{\"0\":{\"6240\":1}}],[\"数据目录\",{\"1\":{\"10491\":1}}],[\"数据冗余备份节点\",{\"1\":{\"10453\":1}}],[\"数据操作的主要连接点\",{\"1\":{\"10452\":1}}],[\"数据存储目录\",{\"1\":{\"10159\":1}}],[\"数据存储\",{\"1\":{\"10119\":1}}],[\"数据在mongodb中以bson\",{\"1\":{\"10079\":1}}],[\"数据在两个socket间通过io传输\",{\"1\":{\"6761\":1}}],[\"数据字段\",{\"1\":{\"10065\":1}}],[\"数据记录行\",{\"1\":{\"10062\":1}}],[\"数据模型无法确定\",{\"1\":{\"10040\":1}}],[\"数据格式\",{\"0\":{\"9909\":1}}],[\"数据格式与索引\",{\"0\":{\"9908\":1}}],[\"数据大小\",{\"1\":{\"9795\":1}}],[\"数据访问层\",{\"1\":{\"9557\":1,\"9558\":1,\"9560\":2,\"9569\":1,\"9574\":1,\"9579\":1,\"9585\":1}}],[\"数据是存储在request对象\",{\"1\":{\"9119\":1}}],[\"数据源无需创建多个\",{\"1\":{\"8250\":1}}],[\"数据源和数据库连接不同\",{\"1\":{\"8250\":1}}],[\"数据源中选择目标数据表\",{\"1\":{\"1113\":1}}],[\"数据一旦提交\",{\"1\":{\"8140\":1}}],[\"数据表结构如下\",{\"1\":{\"8104\":1}}],[\"数据表中\",{\"1\":{\"8049\":1}}],[\"数据类的属性名\",{\"1\":{\"8050\":1}}],[\"数据类型简介\",{\"0\":{\"9914\":1}}],[\"数据类型是根据接口的规范进行推断的\",{\"1\":{\"7379\":1}}],[\"数据类型是类\",{\"1\":{\"3776\":1}}],[\"数据类型必须兼容\",{\"1\":{\"4225\":1}}],[\"数据类型2\",{\"1\":{\"3727\":1}}],[\"数据类型1\",{\"1\":{\"3727\":1}}],[\"数据类型不改变\",{\"0\":{\"3271\":1}}],[\"数据类型不一致\",{\"1\":{\"1769\":1}}],[\"数据类型\",{\"1\":{\"1769\":1,\"3004\":1,\"3010\":1,\"3489\":1,\"3490\":1,\"3530\":1,\"3581\":1,\"3668\":1,\"3672\":1,\"3681\":1,\"5941\":1,\"7085\":1,\"7086\":1,\"8015\":1,\"10085\":1}}],[\"数据持久化意味着将内存中的数据保存到硬盘上加以\",{\"1\":{\"7788\":1}}],[\"数据持久化\",{\"0\":{\"7787\":1}}],[\"数据报包对象的\",{\"1\":{\"6850\":1}}],[\"数据报包也包含发送方的\",{\"1\":{\"6850\":1}}],[\"数据报套接字\",{\"1\":{\"6765\":1}}],[\"数据信息等资源\",{\"1\":{\"6643\":1}}],[\"数据流大\",{\"1\":{\"10033\":1}}],[\"数据流的类\",{\"0\":{\"6464\":1}}],[\"数据流\",{\"0\":{\"6461\":1}}],[\"数据按块读入缓冲区\",{\"1\":{\"6314\":1}}],[\"数据写出\",{\"0\":{\"6276\":1}}],[\"数据单位不同\",{\"1\":{\"6158\":1}}],[\"数据输出到磁盘\",{\"1\":{\"6155\":1}}],[\"数据的读入和写出操作\",{\"1\":{\"6287\":1}}],[\"数据的不可重复性\",{\"1\":{\"5724\":1}}],[\"数据的添加过程与底层结构\",{\"0\":{\"5723\":1}}],[\"数据的添加\",{\"1\":{\"5664\":1}}],[\"数据添加时要保证\",{\"1\":{\"5724\":1}}],[\"数据结构\",{\"0\":{\"10076\":1},\"1\":{\"5697\":1,\"5708\":1,\"5713\":1,\"5969\":1}}],[\"数据结构与算法>递归\",{\"1\":{\"3750\":1}}],[\"数据更新不及时\",{\"1\":{\"5298\":1}}],[\"数据为空\",{\"1\":{\"4683\":1}}],[\"数据对象封装\",{\"1\":{\"4597\":1}}],[\"数据处理\",{\"1\":{\"4595\":1}}],[\"数据\",{\"0\":{\"5111\":1,\"5130\":1},\"1\":{\"3721\":1,\"3733\":1,\"5120\":1,\"9619\":1}}],[\"数据直接写入指定的文件名创建的文件中\",{\"1\":{\"2084\":1}}],[\"数据会写到这个文件对象里\",{\"1\":{\"2082\":1}}],[\"数据库管理角色\",{\"1\":{\"10667\":1}}],[\"数据库用户角色\",{\"1\":{\"10665\":1}}],[\"数据库默认只存在与内存中\",{\"1\":{\"10224\":1}}],[\"数据库删除\",{\"0\":{\"10220\":1}}],[\"数据库中创建的角色可以继承在其它任意数据库中角色的权限\",{\"1\":{\"10654\":1}}],[\"数据库中\",{\"1\":{\"10218\":1}}],[\"数据库中是用下划线分隔单词的\",{\"1\":{\"8049\":1}}],[\"数据库名规范\",{\"1\":{\"10213\":1}}],[\"数据库名称\",{\"1\":{\"7844\":1,\"10212\":1}}],[\"数据库不存在就是创建\",{\"1\":{\"10211\":1}}],[\"数据库存在就是选择\",{\"1\":{\"10211\":1}}],[\"数据库存取技术可分为如下几类\",{\"1\":{\"7792\":1}}],[\"数据库操作\",{\"0\":{\"10201\":1}}],[\"数据库操作类\",{\"1\":{\"4598\":1}}],[\"数据库监控\",{\"1\":{\"10198\":1}}],[\"数据库列表\",{\"1\":{\"10195\":1}}],[\"数据库表\",{\"1\":{\"10059\":1}}],[\"数据库的集合system\",{\"1\":{\"10721\":1}}],[\"数据库的状态\",{\"0\":{\"10223\":1}}],[\"数据库的连接资源并没有得到很好的重复利用\",{\"1\":{\"8221\":1}}],[\"数据库的性能会下降\",{\"1\":{\"8073\":1}}],[\"数据库就会自动提交\",{\"1\":{\"8124\":1}}],[\"数据库驱动来获取\",{\"1\":{\"8219\":1}}],[\"数据库驱动\",{\"1\":{\"7838\":1}}],[\"数据库已经对数据进行处理\",{\"1\":{\"7547\":1}}],[\"数据库\",{\"1\":{\"4599\":1,\"10056\":1,\"10205\":1,\"10652\":1}}],[\"数据库访问和其他任何可以用java代码创造的对象进行打包\",{\"1\":{\"4579\":1}}],[\"数据库对象不止一种\",{\"1\":{\"4140\":1}}],[\"数据库连接池在初始化过程中\",{\"1\":{\"8238\":1}}],[\"数据库连接池在初始化时将创建一定数量的数据库连接放到连接池中\",{\"1\":{\"8230\":1}}],[\"数据库连接池工作原理\",{\"0\":{\"8232\":1}}],[\"数据库连接池负责分配\",{\"1\":{\"8228\":1}}],[\"数据库连接池的优点\",{\"0\":{\"8236\":1}}],[\"数据库连接池的基本思想\",{\"0\":{\"8226\":1}}],[\"数据库连接池的设计一般也是采用单例模式\",{\"1\":{\"4436\":1}}],[\"数据库连接池技术介绍\",{\"0\":{\"8224\":1}}],[\"数据库连接池\",{\"0\":{\"8211\":1}}],[\"数据库连接资源和文件流资源\",{\"1\":{\"8084\":1}}],[\"数据库连接对象\",{\"1\":{\"7947\":1}}],[\"数据库连接被用于向数据库服务器发送命令和\",{\"1\":{\"7880\":1}}],[\"数据库连接的三个要素\",{\"1\":{\"7867\":1}}],[\"数据库连接的配置\",{\"1\":{\"5920\":1}}],[\"数据库连接要素\",{\"0\":{\"7836\":1}}],[\"数据库连接\",{\"1\":{\"4138\":1}}],[\"数据库设计\",{\"0\":{\"1307\":1}}],[\"数据库也创建好了\",{\"1\":{\"1099\":1}}],[\"数据层\",{\"1\":{\"1392\":1}}],[\"数据层测试\",{\"0\":{\"680\":1}}],[\"数据层技术\",{\"1\":{\"87\":1}}],[\"数据校验\",{\"0\":{\"636\":1}}],[\"数组等\",{\"1\":{\"7550\":1}}],[\"数组引用\",{\"0\":{\"7528\":1}}],[\"数组+链表+红黑树\",{\"1\":{\"5814\":1,\"5879\":1}}],[\"数组+链表\",{\"1\":{\"5697\":1,\"5708\":1,\"5814\":1,\"5879\":1}}],[\"数组elementdata\",{\"1\":{\"5647\":1}}],[\"数组对象\",{\"1\":{\"5613\":1,\"5614\":1}}],[\"数组和集合都是容器\",{\"1\":{\"5538\":1}}],[\"数组存储数据的特点\",{\"1\":{\"5531\":1}}],[\"数组没有现成的属性或方法可用\",{\"1\":{\"5530\":1}}],[\"数组在储存数据方面的弊端\",{\"0\":{\"5527\":1}}],[\"数组在java内存储存方面的特点\",{\"0\":{\"5523\":1}}],[\"数组一旦定义好\",{\"1\":{\"5525\":1}}],[\"数组一旦初始化完成\",{\"1\":{\"3493\":1}}],[\"数组都是对多个数据进行存储操作的结构\",{\"1\":{\"5522\":1}}],[\"数组下标越界等\",{\"1\":{\"4697\":1}}],[\"数组角标越界\",{\"0\":{\"4711\":1},\"1\":{\"4673\":1}}],[\"数组可以是任何类型\",{\"1\":{\"3656\":1}}],[\"数组被赋值为null\",{\"1\":{\"3591\":1}}],[\"数组标识符指向的内存没了\",{\"1\":{\"3590\":1}}],[\"数组索引越界\",{\"0\":{\"3586\":1}}],[\"数组赋值\",{\"0\":{\"3551\":1}}],[\"数组长度\",{\"1\":{\"3529\":1}}],[\"数组删除和修改的过程\",{\"1\":{\"3526\":1}}],[\"数组储存的过程\",{\"1\":{\"3525\":1}}],[\"数组初始化完成后\",{\"1\":{\"3508\":1}}],[\"数组间的赋值与复制\",{\"0\":{\"3481\":1}}],[\"数组分配的内存空间是连续的\",{\"1\":{\"3477\":1}}],[\"数组本身是引用数据类型\",{\"1\":{\"3468\":1}}],[\"数组元素的类型\",{\"1\":{\"5613\":1,\"5614\":1}}],[\"数组元素的默认初始化值\",{\"0\":{\"3513\":1,\"3571\":1}}],[\"数组元素的个数\",{\"1\":{\"3466\":1}}],[\"数组元素下标从0开始\",{\"1\":{\"3505\":1}}],[\"数组元素下标可以是整型常量或整型表达式\",{\"1\":{\"3504\":1}}],[\"数组元素下标\",{\"1\":{\"3503\":1}}],[\"数组元素\",{\"1\":{\"3465\":1}}],[\"数组内部元素的变量类型\",{\"1\":{\"3463\":1}}],[\"数组的弊端\",{\"1\":{\"5535\":1}}],[\"数组的中的元素具有相同的数据类型\",{\"1\":{\"3530\":1}}],[\"数组的值\",{\"1\":{\"3523\":1,\"3525\":1}}],[\"数组的内存结构\",{\"0\":{\"3520\":1}}],[\"数组的初始化和数组元素的赋值操作同时进行\",{\"1\":{\"3498\":1}}],[\"数组的分类\",{\"0\":{\"3472\":1}}],[\"数组的特点\",{\"0\":{\"3467\":1}}],[\"数组的长度和内层数组的长度都确定了\",{\"1\":{\"3543\":1}}],[\"数组的长度是固定的\",{\"1\":{\"3529\":1}}],[\"数组的长度一旦确定\",{\"1\":{\"3471\":1}}],[\"数组的长度\",{\"0\":{\"3564\":1},\"1\":{\"3466\":1}}],[\"数组的下标\",{\"1\":{\"3464\":1}}],[\"数组的变量类型\",{\"1\":{\"3463\":1}}],[\"数组的元素会有一个默认值\",{\"1\":{\"3514\":1}}],[\"数组的元素\",{\"0\":{\"3462\":1}}],[\"数组的每个元素就是源字符串切后的小字符串\",{\"1\":{\"2704\":1}}],[\"数组groups是组使用的存储\",{\"1\":{\"2769\":1}}],[\"数组转换为list集合\",{\"1\":{\"2381\":1}}],[\"数组转为string\",{\"1\":{\"1503\":1}}],[\"数组是引用类型\",{\"1\":{\"2353\":1,\"3514\":1}}],[\"数组类\",{\"1\":{\"2152\":1}}],[\"数组写入此输出流\",{\"1\":{\"2103\":1}}],[\"数组中提供的方法非常有限\",{\"1\":{\"5529\":1}}],[\"数组中包含了20个元素\",{\"1\":{\"3659\":1}}],[\"数组中从偏移量\",{\"1\":{\"2104\":1}}],[\"数组中\",{\"1\":{\"2045\":1}}],[\"数组中的每个元素\",{\"1\":{\"3465\":1}}],[\"数组中的\",{\"1\":{\"1555\":1}}],[\"数组中数据\",{\"1\":{\"501\":1}}],[\"数组\",{\"0\":{\"3458\":1},\"1\":{\"1498\":1,\"1762\":1,\"2098\":1,\"3037\":1,\"3461\":1,\"3699\":1,\"5544\":1,\"5607\":1,\"5631\":1,\"6984\":1,\"7556\":1,\"9021\":1,\"9027\":1,\"9689\":1,\"10097\":1}}],[\"数组名\",{\"1\":{\"501\":1,\"502\":1,\"3489\":1,\"3490\":1,\"3522\":1}}],[\"数组表示方式\",{\"0\":{\"487\":1}}],[\"pbtqhy8etvs2b7eo\",{\"1\":{\"9895\":1}}],[\"pb\",{\"1\":{\"9835\":1,\"10042\":1}}],[\"pwd>\",{\"1\":{\"9608\":1}}],[\"pwd=12354\",{\"1\":{\"8990\":1}}],[\"pwd\",{\"1\":{\"8988\":1,\"10703\":1,\"10711\":1,\"10714\":1,\"10718\":1,\"10766\":1}}],[\"plaintext\",{\"1\":{\"9899\":1}}],[\"platform\",{\"1\":{\"7819\":1,\"8962\":1}}],[\"plugins\",{\"1\":{\"1303\":1,\"9885\":1}}],[\"plugins>\",{\"1\":{\"347\":1,\"703\":1,\"1177\":1}}],[\"plugin的jar包的manifeast\",{\"1\":{\"734\":1}}],[\"plugin\",{\"0\":{\"10872\":1},\"1\":{\"734\":2}}],[\"plugin插件的jar包\",{\"0\":{\"716\":1,\"727\":1}}],[\"plugin插件注释掉\",{\"1\":{\"708\":1}}],[\"plugin插件打包\",{\"1\":{\"707\":1,\"709\":1}}],[\"plugin插件用于将当前程序打包成一个可以独立运行的程序包\",{\"1\":{\"705\":1}}],[\"plugin>\",{\"1\":{\"347\":1,\"703\":1,\"1177\":1}}],[\"plugin<\",{\"1\":{\"347\":1,\"703\":1,\"1177\":1}}],[\"plugin是没有指定version的\",{\"1\":{\"343\":1}}],[\"plus变成了minus\",{\"1\":{\"1662\":1}}],[\"plusweeks\",{\"1\":{\"1660\":1}}],[\"plusnanos\",{\"1\":{\"1660\":1}}],[\"plusseconds\",{\"1\":{\"1660\":1}}],[\"plusminutes\",{\"1\":{\"1660\":1}}],[\"plusmonths\",{\"1\":{\"1660\":1}}],[\"plushours\",{\"1\":{\"1660\":1}}],[\"plusdays\",{\"1\":{\"1660\":1}}],[\"plusyears\",{\"1\":{\"1660\":1}}],[\"plusxxx\",{\"0\":{\"1658\":1}}],[\"plus的常用设置\",{\"1\":{\"1205\":1}}],[\"plus的mapper\",{\"1\":{\"1119\":1}}],[\"plus包含了mybatis\",{\"1\":{\"1150\":1}}],[\"plus逆向生成代码\",{\"1\":{\"1103\":1}}],[\"plus依赖\",{\"0\":{\"1001\":1}}],[\"plus\",{\"0\":{\"1000\":1,\"1149\":1},\"1\":{\"89\":1,\"1005\":1,\"1147\":1,\"1151\":1,\"1177\":5,\"1200\":1,\"1206\":1,\"1229\":1,\"1361\":1,\"1364\":1,\"1392\":1}}],[\"ppt这些不是文本文件\",{\"1\":{\"6233\":1}}],[\"ppt\",{\"1\":{\"6232\":1}}],[\"pcdata\",{\"1\":{\"9631\":3}}],[\"pclass\",{\"1\":{\"6960\":4,\"6962\":4,\"7054\":2}}],[\"pc\",{\"1\":{\"5079\":1,\"9895\":1}}],[\"p3\",{\"0\":{\"4646\":2}}],[\"p4里面没有加载子类的元素\",{\"1\":{\"4192\":1}}],[\"p4\",{\"1\":{\"4192\":2}}],[\"photo\",{\"1\":{\"8084\":1,\"8089\":4}}],[\"phone\",{\"1\":{\"3664\":5}}],[\"php\",{\"1\":{\"2837\":1,\"6925\":1,\"8403\":1}}],[\"p2分别保持了资源r1\",{\"1\":{\"5422\":1}}],[\"p2改的值\",{\"1\":{\"4378\":1}}],[\"p2也能取到\",{\"1\":{\"4378\":1}}],[\"p2\",{\"0\":{\"4643\":1},\"1\":{\"3237\":4,\"3646\":2,\"4378\":3}}],[\"pet\",{\"1\":{\"3082\":1}}],[\"performance\",{\"1\":{\"10029\":1,\"10198\":1,\"10416\":1}}],[\"persistence\",{\"1\":{\"7788\":1}}],[\"person父类的public属性\",{\"1\":{\"7075\":1}}],[\"personclass\",{\"1\":{\"7072\":2,\"7078\":1,\"7086\":1}}],[\"person>\",{\"1\":{\"2137\":1,\"2156\":1,\"6094\":2,\"6997\":1}}],[\"person\",{\"0\":{\"4639\":2,\"4643\":2,\"4646\":1,\"6955\":1},\"1\":{\"1769\":4,\"1771\":4,\"1773\":15,\"1791\":4,\"2134\":2,\"2137\":5,\"2141\":2,\"2144\":2,\"2147\":2,\"2150\":3,\"2153\":2,\"2156\":1,\"2162\":1,\"2165\":1,\"2168\":1,\"2175\":3,\"2178\":1,\"2181\":4,\"2185\":1,\"2188\":1,\"2191\":1,\"2197\":1,\"2200\":1,\"2204\":1,\"2211\":2,\"2239\":4,\"2244\":5,\"2256\":1,\"2282\":4,\"2291\":3,\"2422\":2,\"3237\":4,\"3630\":1,\"3636\":3,\"3646\":3,\"3658\":2,\"3738\":3,\"3747\":3,\"3816\":3,\"3821\":3,\"3853\":2,\"3857\":4,\"3870\":5,\"3901\":3,\"4145\":2,\"4148\":1,\"4192\":2,\"4196\":2,\"4241\":2,\"4259\":1,\"4306\":3,\"4326\":5,\"4329\":1,\"4332\":1,\"4378\":5,\"4388\":1,\"4394\":2,\"4397\":1,\"4446\":1,\"4459\":3,\"4553\":1,\"4585\":2,\"4943\":1,\"5011\":1,\"5015\":1,\"5060\":7,\"5588\":1,\"5590\":1,\"5611\":1,\"6094\":2,\"6569\":1,\"6571\":2,\"6573\":4,\"6949\":1,\"6956\":4,\"6958\":2,\"6960\":2,\"6962\":3,\"6994\":2,\"6997\":3,\"7000\":2,\"7002\":2,\"7054\":4,\"7065\":4,\"7072\":1,\"7074\":1,\"7081\":1,\"7082\":1,\"7083\":1,\"7097\":1,\"7106\":1,\"7128\":1,\"7132\":1,\"7134\":1,\"7137\":1,\"7139\":1,\"7141\":1,\"7143\":1,\"7146\":3,\"7161\":4,\"7179\":3,\"10734\":1}}],[\"person类中的public属性\",{\"1\":{\"7074\":1}}],[\"person类中定义了welcome\",{\"1\":{\"4152\":1}}],[\"person类\",{\"1\":{\"1767\":1,\"5060\":1,\"6094\":4}}],[\"per\",{\"1\":{\"7179\":2}}],[\"perl\",{\"1\":{\"2663\":1,\"2671\":1}}],[\"p>\",{\"1\":{\"2962\":1,\"2974\":1}}],[\"python\",{\"1\":{\"2837\":1,\"6925\":1}}],[\"p12\",{\"1\":{\"9902\":1}}],[\"p1和p2是完全独立的\",{\"1\":{\"4645\":1}}],[\"p1指向了对象实体\",{\"1\":{\"4640\":1}}],[\"p1也受影响\",{\"1\":{\"4378\":1}}],[\"p1赋的值\",{\"1\":{\"4378\":1}}],[\"p1\",{\"0\":{\"4639\":1,\"4641\":2,\"4646\":1},\"1\":{\"2181\":1,\"3237\":4,\"3636\":5,\"3646\":3,\"3658\":3,\"3738\":2,\"3816\":2,\"3821\":4,\"3853\":1,\"3857\":1,\"4378\":3,\"5422\":1,\"6573\":2,\"6958\":4,\"6962\":4,\"6997\":2,\"7065\":1}}],[\"pingms\",{\"1\":{\"10576\":1,\"10583\":1}}],[\"pintln\",{\"1\":{\"4734\":1}}],[\"pi\",{\"1\":{\"1817\":4}}],[\"pi圆周率\",{\"0\":{\"1815\":1}}],[\"pidfilepath\",{\"1\":{\"10496\":1,\"10501\":1,\"10506\":1}}],[\"pid\",{\"1\":{\"746\":1,\"10496\":1,\"10501\":1,\"10506\":1}}],[\"put方法是有泛型限制的\",{\"1\":{\"5970\":1}}],[\"putall\",{\"0\":{\"2590\":1},\"1\":{\"2592\":2}}],[\"putmapping\",{\"1\":{\"1276\":1,\"1299\":1}}],[\"put\",{\"0\":{\"2586\":1},\"1\":{\"1029\":1,\"2589\":5,\"5858\":1,\"5901\":3,\"5913\":4,\"5970\":4,\"8806\":2}}],[\"public类可以在任意地方被访问\",{\"1\":{\"3840\":1}}],[\"public\",{\"0\":{\"6127\":1,\"6133\":1,\"6137\":1},\"1\":{\"372\":2,\"425\":2,\"430\":2,\"519\":1,\"573\":1,\"577\":1,\"584\":2,\"590\":1,\"598\":2,\"602\":1,\"609\":1,\"611\":1,\"621\":1,\"623\":1,\"631\":1,\"635\":1,\"645\":1,\"647\":1,\"781\":3,\"882\":2,\"888\":2,\"955\":2,\"985\":1,\"988\":2,\"1013\":1,\"1029\":3,\"1038\":1,\"1211\":1,\"1222\":1,\"1224\":1,\"1234\":2,\"1263\":1,\"1265\":6,\"1268\":2,\"1276\":7,\"1290\":2,\"1296\":6,\"1299\":7,\"1376\":1,\"1542\":2,\"1639\":1,\"1642\":1,\"1645\":1,\"1670\":1,\"1688\":1,\"1743\":2,\"1763\":3,\"1769\":3,\"1778\":1,\"1788\":1,\"1791\":1,\"1797\":1,\"1817\":1,\"1868\":1,\"1876\":1,\"1943\":1,\"1946\":3,\"2031\":2,\"2062\":1,\"2070\":2,\"2129\":1,\"2175\":2,\"2211\":1,\"2222\":1,\"2252\":1,\"2260\":1,\"2287\":1,\"2301\":1,\"2320\":1,\"2349\":1,\"2351\":1,\"2365\":1,\"2391\":1,\"2397\":1,\"2454\":1,\"2476\":1,\"2492\":1,\"2525\":1,\"2574\":1,\"2712\":1,\"2765\":1,\"2777\":1,\"2882\":1,\"2916\":1,\"2918\":1,\"2962\":1,\"2974\":1,\"3405\":1,\"3414\":1,\"3457\":1,\"3630\":2,\"3636\":2,\"3664\":7,\"3668\":1,\"3670\":1,\"3691\":1,\"3719\":1,\"3738\":3,\"3747\":3,\"3754\":1,\"3767\":2,\"3782\":3,\"3787\":1,\"3794\":1,\"3803\":1,\"3816\":2,\"3821\":4,\"3823\":1,\"3828\":1,\"3836\":1,\"3839\":1,\"3857\":2,\"3870\":4,\"3901\":3,\"3976\":1,\"3980\":1,\"3985\":1,\"3987\":1,\"3990\":1,\"3996\":1,\"4039\":3,\"4061\":3,\"4077\":1,\"4080\":1,\"4083\":1,\"4092\":1,\"4142\":3,\"4164\":4,\"4241\":1,\"4253\":1,\"4259\":1,\"4306\":2,\"4329\":1,\"4332\":3,\"4356\":3,\"4358\":5,\"4394\":2,\"4422\":1,\"4425\":1,\"4451\":1,\"4459\":5,\"4466\":2,\"4469\":5,\"4487\":1,\"4489\":1,\"4491\":2,\"4513\":7,\"4523\":3,\"4534\":1,\"4585\":4,\"4592\":1,\"4670\":2,\"4734\":2,\"4751\":1,\"4753\":1,\"4777\":4,\"4803\":3,\"4813\":3,\"4839\":1,\"4843\":8,\"4853\":1,\"4872\":4,\"4916\":2,\"4918\":1,\"4943\":2,\"4957\":1,\"4961\":1,\"4968\":1,\"4979\":1,\"4989\":1,\"5001\":1,\"5004\":1,\"5015\":1,\"5030\":2,\"5037\":1,\"5040\":1,\"5043\":1,\"5060\":5,\"5185\":3,\"5219\":4,\"5221\":3,\"5253\":3,\"5263\":3,\"5283\":1,\"5310\":3,\"5314\":1,\"5322\":3,\"5338\":1,\"5345\":4,\"5350\":3,\"5384\":1,\"5389\":1,\"5396\":3,\"5426\":4,\"5464\":3,\"5486\":3,\"5517\":3,\"5790\":1,\"5794\":1,\"5916\":1,\"5996\":2,\"5999\":3,\"6001\":1,\"6042\":1,\"6045\":1,\"6047\":1,\"6078\":1,\"6081\":1,\"6098\":1,\"6124\":1,\"6251\":1,\"6254\":1,\"6285\":1,\"6287\":1,\"6306\":1,\"6325\":1,\"6328\":2,\"6331\":2,\"6334\":2,\"6353\":1,\"6382\":1,\"6385\":1,\"6388\":1,\"6402\":1,\"6404\":1,\"6411\":1,\"6443\":2,\"6505\":2,\"6569\":2,\"6577\":1,\"6700\":1,\"6703\":1,\"6706\":1,\"6769\":1,\"6772\":1,\"6774\":1,\"6775\":1,\"6776\":1,\"6777\":1,\"6778\":1,\"6779\":1,\"6780\":1,\"6781\":1,\"6782\":1,\"6801\":2,\"6803\":1,\"6814\":1,\"6819\":1,\"6846\":1,\"6847\":1,\"6848\":1,\"6849\":1,\"6850\":1,\"6851\":1,\"6852\":1,\"6853\":1,\"6854\":1,\"6857\":1,\"6858\":1,\"6859\":1,\"6860\":1,\"6861\":1,\"6862\":1,\"6875\":1,\"6883\":4,\"6887\":1,\"6888\":1,\"6889\":1,\"6890\":1,\"6891\":1,\"6892\":1,\"6901\":1,\"6902\":1,\"6903\":1,\"6904\":1,\"6905\":1,\"6906\":1,\"6907\":1,\"6949\":2,\"6952\":1,\"6956\":6,\"6958\":1,\"6960\":1,\"6962\":1,\"7074\":1,\"7075\":1,\"7083\":1,\"7089\":1,\"7149\":1,\"7152\":1,\"7155\":1,\"7159\":1,\"7227\":2,\"7229\":1,\"7231\":2,\"7274\":1,\"7277\":1,\"7279\":2,\"7307\":3,\"7373\":1,\"7377\":1,\"7390\":1,\"7418\":1,\"7578\":1,\"7579\":1,\"7580\":1,\"7583\":1,\"7590\":1,\"7593\":1,\"7655\":4,\"7852\":1,\"7862\":1,\"7865\":1,\"7873\":1,\"7970\":1,\"7975\":1,\"7978\":1,\"7980\":1,\"7989\":1,\"8037\":1,\"8042\":3,\"8045\":1,\"8054\":1,\"8084\":1,\"8089\":1,\"8121\":1,\"8126\":1,\"8146\":1,\"8148\":1,\"8162\":1,\"8201\":5,\"8205\":1,\"8207\":8,\"8210\":8,\"8260\":1,\"8324\":1,\"8326\":1,\"8340\":1,\"8341\":1,\"8342\":1,\"8343\":1,\"8344\":1,\"8345\":1,\"8347\":1,\"8355\":1,\"8358\":1,\"8361\":1,\"8362\":1,\"8365\":1,\"8381\":1,\"8383\":1,\"8385\":1,\"8387\":1,\"8389\":2,\"8391\":1,\"8704\":2,\"8707\":1,\"8764\":1,\"8768\":1,\"8772\":1,\"8777\":1,\"8781\":1,\"8784\":3,\"8809\":1,\"8817\":2,\"8834\":1,\"8837\":1,\"8944\":1,\"9004\":1,\"9027\":1,\"9031\":1,\"9079\":1,\"9124\":2,\"9143\":1,\"9145\":1,\"9270\":4,\"9452\":3,\"9456\":1,\"9633\":1}}],[\"p\",{\"1\":{\"923\":1,\"2683\":2,\"2750\":2,\"2756\":2,\"2760\":2,\"3747\":3,\"4196\":1,\"4326\":2,\"4459\":2,\"6573\":2,\"6608\":1,\"6849\":1,\"6850\":1,\"6960\":3,\"7054\":3,\"7146\":3,\"7161\":3,\"7616\":1,\"7678\":1,\"7680\":1,\"7682\":1,\"10159\":2}}],[\"paid\",{\"1\":{\"4824\":1}}],[\"packet=16m\",{\"1\":{\"8079\":1}}],[\"pack\",{\"1\":{\"2171\":2,\"7141\":2}}],[\"packaging>\",{\"1\":{\"397\":1,\"8564\":1}}],[\"packaging\",{\"1\":{\"315\":1}}],[\"package用来定义命名空间\",{\"1\":{\"3941\":1}}],[\"package语句作为java源文件的第一条语句\",{\"1\":{\"3926\":1}}],[\"package就是包的意思\",{\"1\":{\"3915\":1}}],[\"package是一样的\",{\"1\":{\"665\":1}}],[\"package\",{\"0\":{\"3914\":1},\"1\":{\"312\":1,\"693\":1,\"2171\":3,\"3928\":3,\"4872\":1,\"4957\":1,\"4961\":2,\"4968\":1,\"5396\":1,\"7141\":1,\"8704\":1}}],[\"parallelstream\",{\"1\":{\"7572\":3}}],[\"paramenterindex\",{\"1\":{\"7956\":1}}],[\"parameterizedtype\",{\"1\":{\"7137\":2,\"8201\":2}}],[\"parameterized\",{\"1\":{\"5947\":1}}],[\"parameter\",{\"0\":{\"5028\":1},\"1\":{\"4961\":1,\"4989\":2,\"4994\":1,\"5025\":1,\"5027\":1,\"5043\":1}}],[\"parametertypes\",{\"1\":{\"2181\":1,\"2204\":1,\"2211\":1,\"7063\":1,\"7106\":7,\"7166\":1,\"7169\":1}}],[\"paramtype\",{\"1\":{\"7137\":2,\"8201\":2}}],[\"param来解释泛型的类型\",{\"1\":{\"2958\":1}}],[\"param\",{\"1\":{\"2958\":1,\"2962\":1,\"2969\":1,\"2974\":2}}],[\"params\",{\"1\":{\"2272\":3,\"7274\":1,\"8355\":1,\"8358\":1,\"8361\":1,\"8362\":1,\"8365\":1,\"9004\":3}}],[\"parseobject\",{\"1\":{\"9823\":1,\"9824\":1}}],[\"parse方法\",{\"1\":{\"1694\":1}}],[\"parse\",{\"0\":{\"1693\":1},\"1\":{\"1696\":1,\"1707\":1,\"1719\":1,\"1727\":1,\"7956\":1,\"7970\":1}}],[\"parseboolean\",{\"1\":{\"1486\":1,\"4295\":1}}],[\"parsebyte\",{\"1\":{\"1486\":2}}],[\"parsedouble\",{\"1\":{\"1486\":1,\"1862\":1}}],[\"parsefloat\",{\"1\":{\"1486\":1}}],[\"parselong\",{\"1\":{\"1486\":1}}],[\"parseint\",{\"1\":{\"1486\":2,\"1862\":1,\"3245\":1,\"4295\":1,\"4718\":1,\"4734\":1}}],[\"parsexxx\",{\"0\":{\"1483\":1,\"1860\":1},\"1\":{\"1484\":1,\"1862\":1}}],[\"parentpattern\",{\"1\":{\"2765\":1}}],[\"parentpath\",{\"1\":{\"1959\":2}}],[\"parent>\",{\"1\":{\"391\":1,\"394\":1}}],[\"parent\",{\"0\":{\"392\":1,\"6133\":1,\"6137\":1},\"1\":{\"391\":1,\"393\":1,\"400\":1,\"418\":1,\"1946\":2,\"2168\":2,\"6134\":1,\"6138\":1,\"10164\":1,\"10498\":1}}],[\"parent<\",{\"1\":{\"391\":1}}],[\"pagecontext域\",{\"1\":{\"9184\":2}}],[\"pagecontext\",{\"1\":{\"9184\":1}}],[\"page域对象\",{\"0\":{\"9181\":1}}],[\"pages\",{\"1\":{\"1303\":1}}],[\"pagesize\",{\"1\":{\"1263\":1,\"1265\":4,\"1276\":3,\"1299\":4}}],[\"page\",{\"1\":{\"1239\":3,\"1241\":8,\"1265\":8,\"1299\":5}}],[\"paginationinnerinterceptor\",{\"1\":{\"1234\":2}}],[\"path和main\",{\"1\":{\"9473\":1}}],[\"path等信息\",{\"1\":{\"9473\":1}}],[\"path不用定义\",{\"1\":{\"8482\":1}}],[\"path=\",{\"1\":{\"8477\":1}}],[\"path对应的文件\",{\"1\":{\"6620\":1}}],[\"paths类的方法\",{\"0\":{\"6610\":1}}],[\"paths则包含了两个返回path的静态工厂方法\",{\"1\":{\"6596\":1}}],[\"paths工具类\",{\"1\":{\"6596\":1}}],[\"paths和files工具类\",{\"0\":{\"6595\":1}}],[\"paths\",{\"1\":{\"6594\":2,\"6611\":1}}],[\"path可以看成是file类的升级版本\",{\"1\":{\"6593\":1}}],[\"path接口常用方法\",{\"0\":{\"6597\":1}}],[\"path接口\",{\"0\":{\"6592\":1}}],[\"pathname\",{\"0\":{\"6127\":1},\"1\":{\"1946\":1}}],[\"pathvariable\",{\"1\":{\"1276\":4,\"1279\":1,\"1299\":4}}],[\"path\",{\"1\":{\"952\":7,\"1943\":1,\"1950\":2,\"1953\":2,\"5053\":1,\"6594\":3,\"6598\":1,\"6599\":2,\"6600\":2,\"6602\":2,\"6603\":2,\"6604\":2,\"6606\":1,\"6607\":2,\"6608\":2,\"6611\":1,\"6612\":1,\"6613\":1,\"6616\":3,\"6617\":3,\"6618\":3,\"6619\":2,\"6620\":2,\"6621\":3,\"6622\":3,\"6623\":2,\"6624\":2,\"6625\":2,\"6626\":2,\"6627\":2,\"6628\":2,\"6629\":2,\"6630\":2,\"6631\":3,\"6632\":2,\"6633\":2,\"8476\":1,\"8478\":1,\"9112\":1,\"9730\":1,\"9732\":1,\"9902\":1,\"10162\":1,\"10496\":1,\"10501\":1,\"10506\":1}}],[\"pattern都匹配不上时都会走这个servlet\",{\"1\":{\"8858\":1}}],[\"pattern类只能做一些简单的匹配操作\",{\"1\":{\"2744\":1}}],[\"pattern类的构造器是private\",{\"1\":{\"2714\":1}}],[\"pattern类的注释包含了所有java的正则语法\",{\"1\":{\"2668\":1,\"2673\":1}}],[\"pattern本身也可以调用很多正则方法\",{\"1\":{\"2685\":1}}],[\"pattern与matcher的使用\",{\"0\":{\"2678\":1}}],[\"patternsyntaxexception\",{\"1\":{\"2667\":1}}],[\"patternsyntaxexception类\",{\"1\":{\"2667\":1}}],[\"pattern>\",{\"1\":{\"952\":4,\"8837\":1}}],[\"pattern\",{\"0\":{\"2706\":1,\"2748\":1},\"1\":{\"914\":1,\"923\":1,\"936\":1,\"952\":3,\"2331\":3,\"2665\":5,\"2666\":1,\"2674\":2,\"2683\":2,\"2710\":1,\"2712\":2,\"2717\":5,\"2747\":4,\"2750\":4,\"2756\":2,\"2760\":2,\"2765\":1,\"2788\":3,\"9642\":1}}],[\"password=root\",{\"1\":{\"7871\":1}}],[\"password=123456\",{\"1\":{\"8263\":1}}],[\"password=123\",{\"1\":{\"6872\":1}}],[\"password=123abc\",{\"1\":{\"5921\":1}}],[\"password可以用\",{\"1\":{\"7848\":1}}],[\"password\",{\"1\":{\"516\":1,\"519\":1,\"590\":1,\"969\":1,\"981\":1,\"1008\":1,\"1021\":1,\"1048\":1,\"1206\":1,\"1364\":1,\"5927\":3,\"7049\":4,\"7852\":1,\"7862\":2,\"7865\":2,\"7873\":3,\"7889\":4,\"7893\":2,\"7947\":1,\"7970\":3,\"7975\":3,\"8162\":1,\"8275\":1,\"8988\":1,\"9025\":2,\"9027\":3,\"10843\":1,\"10846\":1}}],[\"polymorphism\",{\"1\":{\"3604\":1}}],[\"posting\",{\"1\":{\"9973\":1}}],[\"postinglist\",{\"1\":{\"9973\":1}}],[\"postman\",{\"1\":{\"9907\":1}}],[\"postmapping\",{\"1\":{\"1276\":1,\"1299\":1}}],[\"post请求获取请求参数的方式是request\",{\"1\":{\"9050\":1}}],[\"post请求中文乱码的问题就已经解决\",{\"1\":{\"9050\":1}}],[\"post的请求参数是通过request的getreader\",{\"1\":{\"9040\":1}}],[\"post方式\",{\"1\":{\"8996\":1}}],[\"post方式的处理逻辑\",{\"1\":{\"8817\":1}}],[\"post\",{\"1\":{\"8806\":2,\"8809\":1,\"8817\":1,\"8988\":1,\"9004\":1}}],[\"post等一些列类型的请求\",{\"1\":{\"8796\":1,\"8823\":1}}],[\"pos\",{\"1\":{\"6500\":1,\"6501\":1,\"10010\":1}}],[\"positivenumber++\",{\"1\":{\"3414\":1}}],[\"positivenumber\",{\"1\":{\"3414\":2}}],[\"pow\",{\"1\":{\"1830\":1,\"1832\":4}}],[\"poolpreparedstatements自动触发修改为true\",{\"1\":{\"8297\":1}}],[\"poolpreparedstatements\",{\"1\":{\"8292\":1}}],[\"pool\",{\"1\":{\"1051\":2,\"8260\":1}}],[\"port来手动指定端口\",{\"1\":{\"10145\":1}}],[\"port=81\",{\"1\":{\"770\":1}}],[\"port=8082\",{\"1\":{\"781\":1}}],[\"port=80\",{\"1\":{\"465\":1}}],[\"port\",{\"1\":{\"465\":1,\"508\":1,\"611\":1,\"628\":1,\"647\":1,\"830\":3,\"1021\":1,\"1048\":1,\"1051\":1,\"1206\":1,\"1364\":1,\"6769\":1,\"6772\":1,\"6801\":2,\"6806\":1,\"6814\":1,\"6846\":1,\"6847\":1,\"6858\":1,\"6882\":1,\"6883\":1,\"8602\":1,\"10162\":1,\"10167\":1,\"10496\":1,\"10501\":1,\"10506\":1,\"10576\":1,\"10583\":1,\"10843\":1}}],[\"pox\",{\"0\":{\"389\":1}}],[\"pom并间接继承spring\",{\"1\":{\"400\":1}}],[\"pom文件会自动将继承spring\",{\"1\":{\"400\":1}}],[\"pom中\",{\"1\":{\"399\":1}}],[\"pom\",{\"0\":{\"342\":1,\"384\":1,\"387\":1,\"651\":1,\"1173\":1},\"1\":{\"338\":1,\"343\":1,\"365\":1,\"393\":1,\"400\":1,\"443\":2,\"702\":1,\"8518\":1}}],[\"preparestatement\",{\"1\":{\"7947\":3,\"7952\":1,\"7970\":1,\"7980\":1,\"7989\":1,\"8037\":1,\"8045\":1,\"8054\":1,\"8084\":1,\"8089\":1,\"8113\":1,\"8121\":1,\"8126\":1,\"8146\":1,\"8201\":4}}],[\"preparedstatement对象\",{\"1\":{\"7946\":1}}],[\"preparedstatement的dql查询示例\",{\"1\":{\"8034\":1}}],[\"preparedstatement的dql操作\",{\"1\":{\"7993\":1}}],[\"preparedstatement的dml操作\",{\"1\":{\"7968\":1}}],[\"preparedstatement的操作步骤\",{\"0\":{\"7930\":1}}],[\"preparedstatement的优点\",{\"0\":{\"7897\":1}}],[\"preparedstatement\",{\"0\":{\"7925\":1,\"7928\":1},\"1\":{\"7927\":2,\"7929\":1,\"7945\":2,\"7946\":1,\"7947\":1,\"7950\":1,\"7951\":1,\"7952\":1,\"7954\":1,\"7956\":1,\"7960\":1,\"7970\":1,\"7980\":1,\"7989\":1,\"8000\":1,\"8037\":1,\"8045\":1,\"8054\":1,\"8084\":1,\"8089\":1,\"8096\":1,\"8099\":1,\"8102\":1,\"8113\":1,\"8121\":1,\"8126\":1,\"8146\":1,\"8201\":4,\"8365\":1}}],[\"prepatedstatement\",{\"1\":{\"7884\":1}}],[\"preptredstatement是statemet你的子接口\",{\"1\":{\"7895\":1}}],[\"prev\",{\"1\":{\"5672\":4}}],[\"pre><\",{\"1\":{\"2962\":2}}],[\"predicate<t>\",{\"1\":{\"2642\":1,\"7436\":1}}],[\"predicate\",{\"0\":{\"2640\":1},\"1\":{\"7616\":1,\"7680\":1,\"7682\":1}}],[\"prefix的值只支持烤肉串书写模式\",{\"1\":{\"617\":1}}],[\"prefix\",{\"0\":{\"622\":1},\"1\":{\"519\":1,\"590\":1,\"602\":1,\"611\":1,\"621\":1,\"623\":1,\"631\":1,\"635\":1,\"645\":1,\"647\":1,\"1206\":1,\"1229\":1,\"1455\":1}}],[\"priority=2\",{\"1\":{\"10626\":1}}],[\"priority就是优先级的值\",{\"1\":{\"10624\":1}}],[\"priorityatelection\",{\"1\":{\"10554\":1}}],[\"priority\",{\"1\":{\"5242\":1,\"5243\":1,\"5244\":1,\"10541\":1,\"10547\":1,\"10621\":1,\"10622\":1}}],[\"primitive\",{\"1\":{\"3022\":1,\"6987\":1}}],[\"primary\",{\"1\":{\"1334\":1,\"1336\":1,\"1338\":1,\"1340\":1,\"1342\":1,\"1344\":1,\"1346\":1,\"1348\":1,\"1350\":1,\"1352\":1,\"1354\":1,\"8105\":1,\"10073\":1,\"10074\":1,\"10448\":1,\"10452\":1,\"10455\":1,\"10479\":1,\"10554\":1,\"10559\":1,\"10573\":1,\"10603\":1,\"10766\":2}}],[\"private修饰的成员也继承了\",{\"1\":{\"4021\":1}}],[\"private属性和方法也继承了\",{\"1\":{\"4006\":1}}],[\"private\",{\"1\":{\"503\":4,\"508\":1,\"519\":4,\"522\":1,\"590\":4,\"611\":3,\"621\":1,\"631\":1,\"635\":1,\"647\":1,\"663\":1,\"882\":1,\"985\":4,\"991\":1,\"1016\":1,\"1029\":1,\"1038\":1,\"1211\":4,\"1224\":1,\"1265\":1,\"1268\":1,\"1276\":1,\"1296\":3,\"1299\":1,\"1542\":1,\"1769\":2,\"1797\":1,\"1876\":1,\"1943\":1,\"2223\":1,\"2238\":1,\"2243\":1,\"2261\":1,\"2301\":1,\"2351\":1,\"2476\":1,\"2712\":1,\"3670\":1,\"3691\":1,\"3719\":1,\"3767\":1,\"3821\":1,\"3823\":1,\"3828\":1,\"3836\":1,\"3857\":2,\"3901\":2,\"4015\":1,\"4039\":1,\"4342\":1,\"4422\":2,\"4425\":2,\"4585\":1,\"4592\":1,\"4803\":1,\"4832\":1,\"4833\":1,\"4843\":4,\"4852\":1,\"4872\":2,\"5263\":1,\"5310\":1,\"5322\":2,\"5332\":2,\"5345\":1,\"5350\":2,\"5384\":1,\"5396\":2,\"5464\":1,\"5486\":1,\"5672\":1,\"6325\":1,\"6331\":1,\"6334\":1,\"6577\":1,\"6956\":3,\"7057\":1,\"7081\":1,\"7090\":1,\"7227\":1,\"7279\":1,\"7655\":2,\"8042\":4,\"8201\":1,\"8210\":1,\"8324\":1,\"8784\":1,\"8806\":7}}],[\"printwriter\",{\"1\":{\"6457\":1,\"9068\":1,\"9075\":1,\"9079\":1,\"9085\":1}}],[\"printwriter写出字符流\",{\"1\":{\"6453\":1}}],[\"printsum\",{\"1\":{\"5517\":2}}],[\"printstream中的方法为\",{\"1\":{\"7466\":1}}],[\"printstream写出字节流\",{\"1\":{\"6453\":1}}],[\"printstream和printwriter有自动flush功能\",{\"1\":{\"6456\":1}}],[\"printstream和printwriter的输出不会抛出ioexception异常\",{\"1\":{\"6455\":1}}],[\"printstream和printwriter\",{\"0\":{\"6452\":1}}],[\"printstream\",{\"1\":{\"6443\":1,\"6457\":1,\"6460\":2,\"7468\":1}}],[\"printstracktrace\",{\"1\":{\"4751\":1}}],[\"printstacktrace\",{\"1\":{\"1290\":1,\"1502\":1,\"1506\":1,\"2003\":1,\"2114\":2,\"4734\":1,\"4743\":1,\"4753\":3,\"4777\":1,\"5221\":2,\"5426\":2,\"5464\":1,\"5486\":2,\"6251\":2,\"6254\":2,\"6285\":2,\"6287\":3,\"6306\":3,\"6348\":2,\"6353\":3,\"6449\":2,\"6460\":1,\"6840\":1,\"6843\":1,\"7970\":3,\"7978\":2,\"7980\":1,\"7989\":1,\"8037\":1,\"8045\":1,\"8054\":1,\"8146\":1,\"8148\":3,\"8201\":4,\"8210\":7,\"8324\":1,\"8326\":1}}],[\"printf\",{\"1\":{\"5060\":1}}],[\"print\",{\"1\":{\"2913\":1,\"3444\":1,\"3453\":1,\"3455\":1,\"3570\":1,\"4724\":1,\"4753\":1,\"4777\":1,\"6078\":3,\"6081\":3,\"6251\":1,\"6260\":1,\"6264\":1,\"6460\":1,\"7106\":10,\"9027\":2,\"9452\":2,\"10269\":1}}],[\"println\",{\"1\":{\"372\":1,\"508\":3,\"522\":1,\"882\":1,\"888\":1,\"955\":1,\"991\":1,\"1016\":2,\"1038\":1,\"1224\":1,\"1241\":5,\"1421\":1,\"1424\":2,\"1427\":2,\"1431\":1,\"1435\":2,\"1438\":2,\"1442\":1,\"1449\":1,\"1452\":1,\"1455\":2,\"1458\":1,\"1464\":2,\"1467\":2,\"1472\":1,\"1475\":1,\"1480\":2,\"1486\":1,\"1491\":1,\"1494\":1,\"1496\":1,\"1502\":2,\"1506\":2,\"1512\":1,\"1515\":1,\"1518\":1,\"1521\":1,\"1524\":1,\"1529\":1,\"1581\":3,\"1584\":2,\"1589\":1,\"1595\":1,\"1601\":1,\"1604\":1,\"1648\":3,\"1654\":8,\"1657\":8,\"1660\":8,\"1673\":1,\"1676\":2,\"1679\":1,\"1682\":1,\"1705\":1,\"1707\":1,\"1719\":2,\"1725\":1,\"1771\":1,\"1773\":1,\"1788\":2,\"1791\":1,\"1800\":1,\"1805\":2,\"1808\":1,\"1811\":1,\"1814\":2,\"1817\":1,\"1820\":2,\"1823\":2,\"1825\":2,\"1832\":4,\"1850\":1,\"1853\":1,\"1856\":2,\"1862\":2,\"1879\":2,\"1886\":1,\"1889\":1,\"1892\":1,\"1899\":1,\"1907\":1,\"1937\":1,\"1950\":1,\"1953\":1,\"1956\":1,\"1959\":1,\"1963\":1,\"1966\":1,\"1971\":1,\"1975\":1,\"1979\":1,\"1982\":1,\"1985\":1,\"1989\":1,\"1993\":1,\"2003\":3,\"2006\":3,\"2009\":3,\"2015\":3,\"2022\":3,\"2042\":3,\"2048\":3,\"2121\":1,\"2134\":1,\"2137\":1,\"2141\":1,\"2144\":1,\"2147\":1,\"2153\":1,\"2156\":1,\"2159\":1,\"2162\":1,\"2165\":1,\"2168\":1,\"2171\":1,\"2175\":1,\"2178\":1,\"2185\":1,\"2188\":1,\"2191\":1,\"2194\":1,\"2197\":1,\"2200\":1,\"2204\":1,\"2211\":1,\"2225\":1,\"2228\":1,\"2231\":1,\"2239\":1,\"2244\":1,\"2256\":1,\"2263\":1,\"2266\":1,\"2269\":1,\"2272\":2,\"2275\":1,\"2282\":1,\"2304\":1,\"2314\":7,\"2331\":2,\"2345\":2,\"2354\":2,\"2362\":1,\"2365\":1,\"2370\":2,\"2375\":4,\"2379\":1,\"2382\":1,\"2387\":1,\"2391\":1,\"2404\":1,\"2407\":2,\"2410\":1,\"2413\":1,\"2416\":1,\"2422\":3,\"2426\":1,\"2429\":2,\"2433\":1,\"2436\":2,\"2444\":1,\"2449\":1,\"2461\":1,\"2465\":1,\"2469\":1,\"2484\":2,\"2487\":3,\"2492\":3,\"2495\":2,\"2500\":1,\"2505\":1,\"2508\":1,\"2512\":2,\"2515\":1,\"2530\":1,\"2537\":2,\"2546\":3,\"2549\":2,\"2552\":1,\"2555\":1,\"2563\":3,\"2566\":2,\"2569\":2,\"2589\":2,\"2592\":1,\"2595\":3,\"2598\":1,\"2601\":2,\"2604\":2,\"2606\":2,\"2609\":1,\"2612\":2,\"2615\":1,\"2618\":1,\"2621\":2,\"2624\":3,\"2692\":2,\"2697\":2,\"2700\":1,\"2705\":1,\"2747\":1,\"2750\":1,\"2756\":1,\"2760\":1,\"2788\":2,\"2802\":2,\"2882\":1,\"2912\":1,\"2962\":2,\"3212\":2,\"3237\":3,\"3241\":3,\"3261\":2,\"3374\":2,\"3405\":2,\"3414\":2,\"3420\":1,\"3453\":1,\"3455\":1,\"3457\":3,\"3509\":1,\"3512\":1,\"3570\":1,\"3588\":2,\"3591\":2,\"3630\":1,\"3636\":1,\"3646\":1,\"3664\":2,\"3738\":1,\"3747\":1,\"3782\":1,\"3803\":1,\"4039\":3,\"4061\":3,\"4077\":1,\"4080\":2,\"4083\":1,\"4164\":4,\"4178\":2,\"4227\":5,\"4229\":2,\"4256\":2,\"4274\":1,\"4281\":2,\"4329\":3,\"4356\":1,\"4358\":1,\"4378\":2,\"4422\":1,\"4459\":1,\"4466\":1,\"4469\":3,\"4513\":7,\"4523\":3,\"4553\":2,\"4658\":2,\"4661\":2,\"4709\":2,\"4712\":1,\"4714\":1,\"4720\":1,\"4722\":1,\"4734\":6,\"4751\":2,\"4777\":1,\"4803\":2,\"4845\":3,\"4872\":4,\"5060\":4,\"5185\":2,\"5219\":1,\"5221\":3,\"5253\":4,\"5263\":1,\"5310\":1,\"5322\":1,\"5345\":1,\"5396\":1,\"5426\":4,\"5464\":1,\"5486\":2,\"5517\":1,\"5562\":1,\"5590\":4,\"5592\":1,\"5595\":1,\"5611\":1,\"5614\":1,\"5618\":1,\"5620\":1,\"5779\":2,\"5790\":1,\"5901\":1,\"5913\":1,\"5927\":2,\"5964\":1,\"5967\":2,\"5970\":1,\"6073\":1,\"6078\":1,\"6081\":1,\"6132\":3,\"6136\":1,\"6210\":1,\"6254\":1,\"6348\":1,\"6359\":1,\"6394\":1,\"6398\":1,\"6449\":3,\"6460\":1,\"6487\":3,\"6557\":1,\"6573\":2,\"6700\":1,\"6703\":2,\"6706\":1,\"6708\":1,\"6711\":1,\"6819\":1,\"6843\":1,\"6949\":1,\"6956\":2,\"6958\":1,\"6960\":2,\"6962\":2,\"6989\":3,\"6994\":1,\"6997\":1,\"7000\":1,\"7002\":1,\"7043\":4,\"7049\":1,\"7054\":2,\"7072\":1,\"7078\":1,\"7086\":4,\"7097\":2,\"7106\":2,\"7128\":3,\"7132\":1,\"7134\":1,\"7137\":1,\"7139\":3,\"7141\":1,\"7143\":1,\"7146\":1,\"7161\":2,\"7179\":1,\"7227\":2,\"7229\":1,\"7284\":1,\"7307\":2,\"7373\":2,\"7377\":3,\"7382\":1,\"7386\":1,\"7390\":6,\"7462\":1,\"7466\":1,\"7468\":1,\"7590\":1,\"7593\":1,\"7616\":1,\"7619\":1,\"7623\":1,\"7626\":1,\"7634\":2,\"7658\":1,\"7670\":1,\"7673\":1,\"7678\":1,\"7680\":1,\"7682\":1,\"7685\":1,\"7688\":1,\"7691\":1,\"7694\":1,\"7697\":1,\"7701\":1,\"7708\":1,\"7712\":1,\"7716\":1,\"7743\":1,\"7749\":2,\"7753\":1,\"7756\":1,\"7760\":2,\"7763\":1,\"7852\":1,\"7862\":1,\"7865\":1,\"7873\":1,\"8037\":1,\"8047\":2,\"8056\":1,\"8089\":1,\"8113\":1,\"8121\":1,\"8148\":1,\"8162\":2,\"8210\":8,\"8326\":1,\"8381\":1,\"8383\":1,\"8385\":1,\"8387\":1,\"8389\":2,\"8391\":2,\"8704\":1,\"8768\":1,\"8772\":1,\"8777\":1,\"8784\":1,\"8809\":2,\"8944\":8,\"8951\":2,\"8955\":1,\"8990\":1,\"9027\":4,\"9124\":3,\"9143\":1,\"9145\":1,\"9695\":1,\"9726\":1}}],[\"prinln\",{\"1\":{\"430\":1}}],[\"pringln\",{\"1\":{\"3630\":1}}],[\"pring\",{\"0\":{\"392\":1},\"1\":{\"853\":1}}],[\"proxool等db池的优点\",{\"1\":{\"8253\":1}}],[\"proxool\",{\"1\":{\"8245\":1,\"8247\":1}}],[\"proxyfilters\",{\"1\":{\"8320\":1}}],[\"proxyfactory中调用了newproxyinstance方法\",{\"1\":{\"7289\":1}}],[\"proxyfactory\",{\"1\":{\"7277\":1,\"7284\":1,\"7287\":1}}],[\"proxyinstance自动调用了myinvocationhandler类的invoke方法\",{\"1\":{\"7293\":1}}],[\"proxyinstance\",{\"1\":{\"7284\":4,\"7287\":1,\"7292\":1}}],[\"proxy类提供的用于创建动态代理类和动态代理对象的静态方法\",{\"1\":{\"7258\":1}}],[\"proxy\",{\"0\":{\"7255\":1,\"7257\":1,\"7278\":1},\"1\":{\"7277\":1,\"7279\":1,\"7307\":1}}],[\"proxyclothfactory\",{\"1\":{\"7227\":2,\"7231\":3}}],[\"proxyuser\",{\"1\":{\"7200\":1}}],[\"protocolversion\",{\"1\":{\"10541\":1}}],[\"protocol\",{\"1\":{\"6724\":1,\"6725\":1,\"6729\":1,\"6879\":1,\"6883\":2,\"8944\":2}}],[\"protected\",{\"1\":{\"1376\":1,\"2224\":1,\"2262\":1,\"3670\":1,\"3691\":1,\"3719\":1,\"3836\":1,\"4342\":1,\"7091\":1,\"8809\":2,\"8817\":2,\"8912\":1,\"8944\":2,\"8951\":1,\"8955\":1,\"8990\":1,\"9004\":2,\"9027\":2,\"9031\":2,\"9079\":1,\"9124\":2,\"9143\":1,\"9145\":1,\"9220\":1,\"9234\":1,\"9249\":1,\"9262\":1,\"9693\":1,\"9695\":1,\"9750\":1}}],[\"pros\",{\"1\":{\"5927\":4,\"7049\":5,\"7873\":6,\"7970\":6,\"7975\":6,\"8260\":3,\"8324\":3}}],[\"processmanagement\",{\"1\":{\"10162\":1,\"10496\":1}}],[\"process\",{\"0\":{\"5068\":1},\"1\":{\"4469\":1,\"5069\":1,\"10164\":3,\"10498\":3,\"10864\":1}}],[\"processor<\",{\"1\":{\"614\":1}}],[\"procedure\",{\"1\":{\"3599\":1}}],[\"pro多个配置文件\",{\"1\":{\"1095\":1}}],[\"pro<\",{\"1\":{\"862\":1}}],[\"promvc\",{\"1\":{\"858\":1}}],[\"proredis\",{\"1\":{\"858\":1}}],[\"prodecate\",{\"1\":{\"7678\":1}}],[\"producecloth\",{\"1\":{\"7225\":1,\"7227\":2,\"7229\":1,\"7231\":1}}],[\"production\",{\"1\":{\"119\":1}}],[\"prod\",{\"1\":{\"1119\":1}}],[\"prodb\",{\"1\":{\"858\":1}}],[\"profile集合\",{\"1\":{\"10696\":1}}],[\"profile>\",{\"1\":{\"862\":2}}],[\"profile\",{\"1\":{\"830\":1,\"862\":2,\"865\":1,\"867\":1}}],[\"profile代替\",{\"1\":{\"830\":1}}],[\"profiles>\",{\"1\":{\"862\":1}}],[\"profiles\",{\"1\":{\"828\":1,\"830\":4,\"843\":1,\"853\":1,\"858\":1,\"865\":1}}],[\"pro\",{\"1\":{\"830\":2,\"839\":1,\"858\":1,\"952\":1}}],[\"programming\",{\"0\":{\"7299\":1},\"1\":{\"3598\":1,\"3599\":1}}],[\"program\",{\"0\":{\"5063\":1},\"1\":{\"775\":1,\"5064\":1}}],[\"propertystatement是statement的子类\",{\"1\":{\"7977\":1}}],[\"property\",{\"1\":{\"624\":1}}],[\"properties类\",{\"1\":{\"7853\":1}}],[\"properties类的方法\",{\"0\":{\"5922\":1}}],[\"properties与yml文件格式均支持\",{\"1\":{\"809\":1}}],[\"properties>yml>yaml\",{\"1\":{\"469\":1}}],[\"properties>\",{\"1\":{\"397\":1,\"862\":2,\"1177\":1}}],[\"properties\",{\"0\":{\"5838\":1,\"5917\":1},\"1\":{\"336\":1,\"455\":1,\"461\":1,\"468\":1,\"811\":1,\"1094\":1,\"2576\":1,\"5549\":1,\"5811\":1,\"5840\":1,\"5920\":1,\"5927\":3,\"7049\":5,\"7852\":2,\"7853\":1,\"7870\":1,\"7873\":3,\"7970\":3,\"7975\":3,\"8260\":3,\"8262\":1,\"8324\":3}}],[\"propeties格式\",{\"1\":{\"465\":1}}],[\"projection\",{\"1\":{\"10306\":1,\"10309\":1,\"10428\":1}}],[\"project>外的其他标签内容都删除\",{\"1\":{\"8552\":1}}],[\"projectexceptionadvice\",{\"1\":{\"1290\":1}}],[\"projectlombok<\",{\"1\":{\"1161\":1,\"1177\":1,\"1217\":1,\"1361\":1}}],[\"project\",{\"0\":{\"558\":1,\"1085\":1,\"1357\":1},\"1\":{\"304\":1,\"313\":1,\"314\":1,\"360\":1,\"552\":1,\"553\":1,\"1083\":2,\"7326\":1,\"8529\":1,\"8530\":1,\"9505\":1}}],[\"pscache对支持游标的数据库性能提升巨大\",{\"1\":{\"8294\":1}}],[\"ps\",{\"1\":{\"288\":1,\"1124\":1,\"4060\":1,\"6460\":6,\"7468\":2,\"7947\":1,\"7952\":1,\"7956\":3,\"7970\":8,\"7978\":3,\"7980\":6,\"7989\":5,\"8037\":5,\"8045\":5,\"8054\":5,\"8084\":7,\"8089\":4,\"8113\":4,\"8121\":6,\"8126\":6,\"8146\":5,\"8198\":1,\"8199\":1,\"8201\":20,\"10164\":1,\"10245\":1,\"10316\":1,\"10477\":1,\"10511\":1,\"10721\":1}}],[\"用什么账号登录\",{\"1\":{\"10749\":1}}],[\"用有操作admin库的用户登录认证后才能操作\",{\"1\":{\"10716\":1}}],[\"用到时再说\",{\"1\":{\"10170\":1}}],[\"用到了再学\",{\"1\":{\"20\":1}}],[\"用引号括起来\",{\"1\":{\"9617\":1}}],[\"用直接流输出字符\",{\"1\":{\"9101\":1}}],[\"用注解就可以了\",{\"1\":{\"8867\":1}}],[\"用匿名实现类表示的都可以用lambda表达式来写\",{\"1\":{\"7340\":1,\"7421\":1}}],[\"用被代理类对象进行实例化\",{\"1\":{\"7227\":1}}],[\"用newinstance调用空参构造器\",{\"1\":{\"7178\":1}}],[\"用objectinputstream类将磁盘文件中的对象还原为内存中的一个java对象\",{\"1\":{\"6536\":1}}],[\"用objectoutputstream类\",{\"1\":{\"6535\":1}}],[\"用最高位是1或0表示两个字节和一个字节\",{\"1\":{\"6420\":1,\"6426\":1}}],[\"用最高位表示正负\",{\"1\":{\"3188\":1}}],[\"用一个字节的8位表示\",{\"1\":{\"6417\":1}}],[\"用一个字节的7位可以表示\",{\"1\":{\"6416\":1}}],[\"用一个符占位表示\",{\"1\":{\"5940\":1}}],[\"用以标示当前读写处的位置\",{\"1\":{\"6495\":1}}],[\"用以获取不同种类的数据\",{\"1\":{\"6152\":1}}],[\"用以返回一个实现了iterator接口的对象\",{\"1\":{\"5572\":1}}],[\"用这个类型声明变量\",{\"1\":{\"5946\":1}}],[\"用set来存放\",{\"1\":{\"5800\":1}}],[\"用实现类进行实例化\",{\"1\":{\"5562\":1}}],[\"用某种语言编写的一组指令的集合\",{\"1\":{\"5064\":1}}],[\"用p2保存了新对象的内存地址\",{\"1\":{\"4644\":1}}],[\"用v保存了对象实体所在内存空间的首地址\",{\"1\":{\"4640\":1}}],[\"用k保存了对象的标识符p1\",{\"1\":{\"4640\":1}}],[\"用abstract来修饰一个方法\",{\"1\":{\"4448\":1}}],[\"用abstract关键字来修饰一个类\",{\"1\":{\"4444\":1}}],[\"用其隐含实现一个接口或实现一个类\",{\"1\":{\"4347\":1}}],[\"用的方法也是一样的\",{\"1\":{\"6294\":1}}],[\"用的时候直接用第五种即可\",{\"1\":{\"7850\":1}}],[\"用的时候直接取即可\",{\"1\":{\"4827\":1}}],[\"用的时候就不能指定\",{\"1\":{\"5974\":1}}],[\"用的时候再定义\",{\"1\":{\"5941\":1}}],[\"用的要求不同\",{\"1\":{\"5460\":1}}],[\"用的比较多\",{\"1\":{\"4244\":1}}],[\"用的都是他的子类\",{\"1\":{\"1845\":1}}],[\"用了不存在的索引\",{\"1\":{\"3587\":1}}],[\"用逗号分隔\",{\"1\":{\"3381\":1,\"3384\":1}}],[\"用单引号\",{\"1\":{\"3121\":1}}],[\"用做专门用途的字符串\",{\"1\":{\"3049\":1}}],[\"用wiodow打开cmd终端\",{\"1\":{\"2980\":1}}],[\"用途\",{\"0\":{\"2477\":1},\"1\":{\"7650\":1}}],[\"用与divide运算\",{\"1\":{\"1903\":1}}],[\"用法未知\",{\"1\":{\"2736\":1}}],[\"用法\",{\"0\":{\"1744\":1,\"1779\":1},\"1\":{\"2730\":1,\"4513\":1,\"4613\":1}}],[\"用户认证\",{\"1\":{\"10761\":1}}],[\"用户管理的数据库\",{\"1\":{\"10726\":1}}],[\"用户所在的数据库\",{\"1\":{\"10726\":1}}],[\"用户无法访问实例\",{\"1\":{\"10647\":1}}],[\"用户验证\",{\"1\":{\"10642\":1}}],[\"用户创建的集合名字不能含有保留字符\",{\"1\":{\"10236\":1}}],[\"用户的装备\",{\"1\":{\"10035\":1}}],[\"用户的体验就比较差\",{\"1\":{\"8749\":1}}],[\"用户将以马斯克\",{\"1\":{\"9938\":1}}],[\"用户打开浏览器\",{\"1\":{\"9652\":1}}],[\"用户数据报协议udp\",{\"1\":{\"6725\":1}}],[\"用户线程\",{\"1\":{\"5150\":1}}],[\"用户同时在电脑手机上干多件事\",{\"1\":{\"5102\":1}}],[\"用户自定义异常类都是runtimeexception的子类\",{\"1\":{\"4806\":1}}],[\"用户可以使用jdk自带的jar命令创建或提取jar文件\",{\"1\":{\"9469\":1}}],[\"用户可以使用javabean将功能\",{\"1\":{\"4579\":1}}],[\"用户可以认为javabean提供了一种随时随地的复制和粘贴的功能\",{\"1\":{\"4579\":1}}],[\"用户从键盘输入内容\",{\"1\":{\"2328\":1,\"2785\":1}}],[\"用户\",{\"1\":{\"1412\":1}}],[\"用户端应用\",{\"1\":{\"1403\":1}}],[\"用户端\",{\"1\":{\"1387\":1}}],[\"用户id\",{\"1\":{\"1348\":1,\"10726\":1}}],[\"用户信息\",{\"1\":{\"1346\":1}}],[\"用户表\",{\"0\":{\"1345\":1}}],[\"用户表c端\",{\"1\":{\"1324\":1}}],[\"用户名\",{\"0\":{\"7847\":1},\"1\":{\"1334\":1,\"7840\":1,\"10703\":1,\"10726\":2,\"10728\":1,\"10730\":1}}],[\"用\",{\"0\":{\"601\":1},\"1\":{\"4225\":1,\"6917\":1,\"10404\":1}}],[\"用来设置索引的字段和索引的排序方式\",{\"1\":{\"10387\":1}}],[\"用来设置打印级别\",{\"1\":{\"952\":2}}],[\"用来判断是同一个用户发的请求\",{\"1\":{\"9768\":1}}],[\"用来判断指针后面还有没有集合元素\",{\"1\":{\"2460\":1,\"5586\":1}}],[\"用来接收浏览器发送过来的请求\",{\"1\":{\"9548\":1}}],[\"用来接收长度为\",{\"1\":{\"6857\":1}}],[\"用来提交连接\",{\"1\":{\"8343\":1}}],[\"用来提交连接的事务\",{\"1\":{\"8342\":1}}],[\"用来检测连接是否有效的sql\",{\"1\":{\"8299\":1}}],[\"用来返回文档中的记录总数\",{\"1\":{\"10320\":1}}],[\"用来返回数据表中多条记录构成的集合\",{\"1\":{\"8182\":1}}],[\"用来返回一条记录的通用查询操作\",{\"1\":{\"8181\":1}}],[\"用来返回当前线程的实例名\",{\"1\":{\"5187\":1}}],[\"用来继承basedao接口\",{\"1\":{\"8174\":1}}],[\"用来规范数据表的操作\",{\"1\":{\"8173\":1}}],[\"用来专门操作某张表\",{\"1\":{\"8168\":1}}],[\"用来放结果集\",{\"1\":{\"8054\":1}}],[\"用来获取不同类型的值\",{\"1\":{\"8015\":1}}],[\"用来获取员工姓名的\",{\"1\":{\"7470\":1}}],[\"用来了解底层\",{\"1\":{\"7786\":1}}],[\"用来防止空指针异常\",{\"1\":{\"7736\":1}}],[\"用来操作集合类数据的\",{\"1\":{\"7540\":1}}],[\"用来执行一个更新\",{\"1\":{\"8355\":1}}],[\"用来执行一个函数\",{\"1\":{\"7401\":1}}],[\"用来执行函数体的载体\",{\"1\":{\"7409\":1}}],[\"用来唯一的标识一个资源\",{\"1\":{\"6909\":1}}],[\"用来将长度为\",{\"1\":{\"6858\":1}}],[\"用来对应ip地址\",{\"1\":{\"6676\":1}}],[\"用来对方法进行测试\",{\"1\":{\"4913\":1}}],[\"用来遍历list类型的集合\",{\"1\":{\"6075\":1}}],[\"用来启动线程\",{\"1\":{\"5175\":1}}],[\"用来启动springboot项目\",{\"1\":{\"335\":1}}],[\"用来创建和执行多线程\",{\"1\":{\"5163\":1}}],[\"用来存储一个一个的对象\",{\"1\":{\"5686\":1}}],[\"用来存储不同数据\",{\"1\":{\"5131\":1}}],[\"用来存放new出来的数组\",{\"1\":{\"3523\":1}}],[\"用来存放标识符\",{\"1\":{\"3522\":1}}],[\"用来声明默认值\",{\"1\":{\"4928\":1}}],[\"用来定义枚举类的\",{\"1\":{\"4848\":1}}],[\"用来初始化类\",{\"1\":{\"4547\":1}}],[\"用来修饰注解的注解为\",{\"1\":{\"4925\":1}}],[\"用来修饰属性\",{\"1\":{\"3992\":1,\"4362\":1}}],[\"用来修饰变量\",{\"1\":{\"3982\":1}}],[\"用来修饰方法\",{\"1\":{\"3978\":1}}],[\"用来调用其他的构造器\",{\"1\":{\"3905\":1}}],[\"用来限定对象对该类成员的访问权限\",{\"1\":{\"3835\":1}}],[\"用来输出一段话<\",{\"1\":{\"2974\":1}}],[\"用来运行java的环境\",{\"1\":{\"2844\":1}}],[\"用来替换正则表达式第一个匹配到的内容\",{\"1\":{\"2696\":1}}],[\"用来替换匹配到的内容\",{\"1\":{\"2691\":1}}],[\"用来替换的字符串\",{\"1\":{\"1594\":1}}],[\"用来向后移动一次指针\",{\"1\":{\"2463\":1,\"5583\":1}}],[\"用来扫描输入文本的类\",{\"1\":{\"2318\":1,\"2775\":1}}],[\"用来格式化和解析日期时间\",{\"1\":{\"1686\":1}}],[\"用来指定最基础的日志输出级别\",{\"1\":{\"952\":1}}],[\"用来指定受此logger约束的某一个包或者具体的某一个类\",{\"1\":{\"952\":1}}],[\"用来配置日期格式\",{\"1\":{\"939\":1}}],[\"用来标记执行java\",{\"1\":{\"737\":1}}],[\"用来标注要使用\",{\"1\":{\"606\":1}}],[\"用来加载开发者自己开发的类\",{\"1\":{\"540\":1}}],[\"用来加载jar包中的类\",{\"1\":{\"539\":1}}],[\"用于简化数据库访问\",{\"1\":{\"10834\":1}}],[\"用于修改计数的额外选项\",{\"1\":{\"10324\":1}}],[\"用于修饰它支持的程序元素\",{\"1\":{\"4889\":1}}],[\"用于保存分片的相关信息\",{\"1\":{\"10207\":1}}],[\"用于保存具有\",{\"1\":{\"5798\":1}}],[\"用于开发时调试软件调用\",{\"1\":{\"9494\":1}}],[\"用于开启热部署\",{\"1\":{\"1166\":1}}],[\"用于已发布的软件运行时调用\",{\"1\":{\"9493\":1}}],[\"用于打包与组件相关联的辅助资源\",{\"1\":{\"9484\":1}}],[\"用于发布和使用类库\",{\"1\":{\"9481\":1}}],[\"用于ajax的访问\",{\"1\":{\"9294\":1}}],[\"用于特殊查询的通用方法\",{\"1\":{\"8183\":1}}],[\"用于连接池\",{\"1\":{\"8148\":1}}],[\"用于获取关于\",{\"1\":{\"8018\":1}}],[\"用于执行\",{\"1\":{\"7885\":1}}],[\"用于执行静态\",{\"1\":{\"7883\":1}}],[\"用于给stream中元素做汇总的方法\",{\"1\":{\"7718\":1}}],[\"用于操作数据库的工具类\",{\"1\":{\"8194\":1}}],[\"用于操作数据源\",{\"1\":{\"7550\":1}}],[\"用于操作文件或目录的工具类\",{\"1\":{\"6615\":1}}],[\"用于访问某台服务器提供的服务\",{\"1\":{\"6916\":1}}],[\"用于监听客户端的请求\",{\"1\":{\"6806\":1}}],[\"用于将多个字符串串连成路径\",{\"1\":{\"6612\":1}}],[\"用于存储和读取基本数据类型数据或对象的处理流\",{\"1\":{\"6532\":1}}],[\"用于存放对象实例\",{\"1\":{\"4632\":1}}],[\"用于多种数据类型的输出\",{\"1\":{\"6454\":1}}],[\"用于数据的写出\",{\"1\":{\"6285\":1}}],[\"用于数组的初始化和填充\",{\"1\":{\"2386\":1}}],[\"用于处理设备之间的数据传输\",{\"1\":{\"6150\":1}}],[\"用于处理可能产生的不同类型的异常对象\",{\"1\":{\"4729\":1}}],[\"用于遍历集合\",{\"1\":{\"5607\":1}}],[\"用于集合元素的遍历\",{\"1\":{\"5567\":1}}],[\"用于集合遍历\",{\"1\":{\"2448\":1}}],[\"用于创建并返回不同类型的线程池\",{\"1\":{\"5506\":1}}],[\"用于指定被该元\",{\"1\":{\"5000\":1}}],[\"用于指定被修饰的\",{\"1\":{\"4988\":1}}],[\"用于传参\",{\"1\":{\"4129\":1}}],[\"用于对属性初始化\",{\"1\":{\"3857\":1}}],[\"用于对齐\",{\"1\":{\"921\":1}}],[\"用于跳过其所在循环语句块的一次执行\",{\"1\":{\"3435\":1}}],[\"用于在内存中保存数据\",{\"1\":{\"3001\":1}}],[\"用于方法需要抛出异常的情况\",{\"1\":{\"2971\":1}}],[\"用于标注该方法的参数\",{\"1\":{\"2978\":1}}],[\"用于标注该类的作者\",{\"1\":{\"2967\":1}}],[\"用于标记与本类相关联的类\",{\"1\":{\"2960\":1}}],[\"用于标记当前类版本\",{\"1\":{\"2959\":1}}],[\"用于测试\",{\"1\":{\"5920\":1}}],[\"用于测试基javase语法\",{\"1\":{\"2962\":1}}],[\"用于测试项目\",{\"1\":{\"118\":1}}],[\"用于快速链接到相关代码\",{\"1\":{\"2944\":1}}],[\"用于把\",{\"1\":{\"1623\":1}}],[\"用于后端与前端进行数据格式统一\",{\"1\":{\"1292\":1}}],[\"用于安全\",{\"1\":{\"1286\":1}}],[\"用于封装一组数据\",{\"1\":{\"511\":1}}],[\"ts\",{\"1\":{\"10554\":6}}],[\"tgz\",{\"1\":{\"10157\":1}}],[\"tf\",{\"1\":{\"9999\":1,\"10009\":1}}],[\"t可以为null\",{\"1\":{\"7748\":1}}],[\"t必须非空\",{\"1\":{\"7742\":1}}],[\"tcp网络编程示例\",{\"0\":{\"6820\":1}}],[\"tcp网络编程的服务器端的channel\",{\"1\":{\"6586\":1}}],[\"tcp网络编程的客户端的channel\",{\"1\":{\"6585\":1}}],[\"tcp编程\",{\"0\":{\"6784\":1}}],[\"tcp的四次挥手\",{\"0\":{\"6749\":1}}],[\"tcp的三次握手\",{\"0\":{\"6743\":1}}],[\"tcp协议用于实现面向连接的会话\",{\"1\":{\"6916\":1}}],[\"tcp协议进行通信的两个应用进程\",{\"1\":{\"6733\":1}}],[\"tcp协议\",{\"0\":{\"6730\":1}}],[\"tcp与udp\",{\"0\":{\"6721\":1}}],[\"tcp\",{\"0\":{\"6726\":1},\"1\":{\"6655\":1,\"6727\":2,\"6728\":1,\"6782\":2,\"6918\":1,\"8413\":1}}],[\"t3\",{\"1\":{\"5263\":2,\"5322\":2,\"5345\":2,\"5396\":2}}],[\"t2>\",{\"1\":{\"6016\":1,\"6025\":2,\"6028\":1}}],[\"t2\",{\"1\":{\"5263\":2,\"5310\":2,\"5322\":2,\"5345\":2,\"5396\":2,\"5464\":2,\"7480\":2,\"7482\":2}}],[\"t1\",{\"1\":{\"5263\":2,\"5310\":2,\"5322\":2,\"5345\":2,\"5396\":2,\"5464\":2,\"5486\":2,\"7480\":2,\"7482\":2}}],[\"t>>\",{\"1\":{\"2492\":1,\"2500\":1,\"2505\":1}}],[\"t>\",{\"0\":{\"2363\":1},\"1\":{\"2156\":1,\"2365\":1,\"2492\":1,\"2500\":3,\"2505\":3,\"2512\":2,\"5030\":1,\"7756\":1}}],[\"thin\",{\"1\":{\"8272\":1}}],[\"this表示的是对象\",{\"1\":{\"5342\":1}}],[\"this指向的是对象\",{\"1\":{\"4402\":1}}],[\"this随意\",{\"1\":{\"4088\":1}}],[\"this可以省略\",{\"1\":{\"4080\":1}}],[\"this就表明是哪个对象\",{\"1\":{\"3910\":1}}],[\"this使用时机\",{\"0\":{\"3906\":1}}],[\"this调用属性\",{\"1\":{\"3901\":1}}],[\"this调用构造器\",{\"0\":{\"3899\":1},\"1\":{\"3901\":1}}],[\"this的调用不要写成死循环\",{\"1\":{\"3903\":1}}],[\"this的使用\",{\"0\":{\"3892\":1}}],[\"this的作用\",{\"0\":{\"3890\":1}}],[\"this\",{\"0\":{\"3889\":1},\"1\":{\"1296\":7,\"1763\":1,\"1769\":6,\"2144\":1,\"2962\":2,\"2974\":1,\"3857\":2,\"3891\":1,\"3894\":2,\"3895\":2,\"3897\":2,\"3898\":1,\"3900\":1,\"3901\":3,\"3902\":1,\"3904\":1,\"3905\":1,\"4039\":1,\"4080\":1,\"4092\":1,\"4096\":1,\"4098\":2,\"4099\":1,\"4241\":4,\"4329\":2,\"4466\":1,\"4469\":3,\"4803\":1,\"4843\":2,\"4872\":1,\"5322\":1,\"5359\":1,\"5464\":1,\"5672\":3,\"5790\":2,\"5999\":4,\"6328\":1,\"6331\":1,\"6334\":1,\"6956\":4,\"7002\":1,\"7227\":1,\"7279\":1,\"7655\":2,\"8042\":4,\"8201\":1,\"8270\":1,\"8784\":1,\"9004\":1,\"9027\":1,\"9031\":1,\"9220\":1,\"9234\":1,\"9249\":1,\"9262\":1,\"10703\":1}}],[\"that\",{\"1\":{\"6278\":1,\"6285\":1,\"10252\":1,\"10585\":1,\"10603\":1}}],[\"theproxy\",{\"1\":{\"7274\":1}}],[\"the\",{\"1\":{\"2962\":1,\"2974\":2,\"8358\":4,\"9831\":1,\"10372\":1,\"10526\":1,\"10585\":3}}],[\"throwable\",{\"1\":{\"4699\":1,\"7279\":1}}],[\"throw\",{\"1\":{\"1299\":2,\"1769\":1,\"1788\":1,\"4687\":1,\"4691\":1,\"4792\":1,\"4800\":2,\"4803\":2,\"5790\":1,\"5794\":1,\"5916\":1,\"6325\":1,\"6328\":1,\"6331\":1,\"6334\":1}}],[\"throws的方式只是将异常抛给了方法的调用者\",{\"1\":{\"4780\":1}}],[\"throws使用示例\",{\"0\":{\"4776\":1}}],[\"throws只是用来抛出异常的\",{\"1\":{\"4770\":1}}],[\"throws介绍\",{\"0\":{\"4769\":1}}],[\"throws后面的异常类型可以是方法中产生的异常类型\",{\"1\":{\"4768\":1}}],[\"throws\",{\"0\":{\"4766\":1},\"1\":{\"1299\":2,\"2003\":1,\"2062\":1,\"2114\":1,\"2121\":1,\"2147\":1,\"2150\":1,\"2175\":1,\"2178\":1,\"2181\":1,\"2185\":1,\"2188\":1,\"2191\":1,\"2194\":1,\"2197\":1,\"2200\":1,\"2204\":1,\"2211\":1,\"2244\":1,\"2247\":1,\"2282\":1,\"2291\":1,\"2971\":1,\"2974\":2,\"4688\":1,\"4771\":1,\"4777\":2,\"4803\":1,\"5060\":1,\"5486\":1,\"6411\":1,\"6700\":1,\"6769\":1,\"6772\":1,\"6801\":2,\"6803\":1,\"6814\":1,\"6819\":1,\"6901\":1,\"6906\":1,\"6907\":1,\"6949\":1,\"6952\":1,\"6960\":1,\"6962\":1,\"7106\":1,\"7123\":1,\"7279\":1,\"7852\":1,\"7862\":1,\"7865\":1,\"7873\":1,\"7975\":1,\"8084\":1,\"8121\":1,\"8162\":1,\"8260\":1,\"8324\":1,\"8340\":1,\"8342\":1,\"8344\":1,\"8345\":1,\"8355\":1,\"8358\":1,\"8361\":1,\"8362\":1,\"8365\":1,\"8381\":1,\"8383\":1,\"8385\":1,\"8387\":1,\"8389\":2,\"8391\":1,\"8704\":1,\"8764\":2,\"8768\":1,\"8772\":1,\"8784\":1,\"8809\":2,\"8817\":1,\"8944\":2,\"8951\":1,\"8955\":1,\"8990\":1,\"9004\":2,\"9027\":2,\"9031\":2,\"9079\":1,\"9124\":2,\"9143\":1,\"9145\":1,\"9270\":2}}],[\"threshold的4倍\",{\"1\":{\"5889\":1}}],[\"threshold\",{\"1\":{\"5888\":2,\"5894\":1}}],[\"thresholdfilter\",{\"1\":{\"952\":1}}],[\"threadpoolexecutor\",{\"1\":{\"5517\":2}}],[\"threadpool\",{\"1\":{\"5517\":1}}],[\"threadsafety\",{\"1\":{\"5396\":1}}],[\"thread和runnable\",{\"0\":{\"5273\":1}}],[\"threadmethodtest\",{\"1\":{\"5219\":1,\"5221\":1,\"5253\":1}}],[\"thread常用方法\",{\"0\":{\"5202\":1}}],[\"threadtest\",{\"1\":{\"5185\":1,\"5426\":1}}],[\"threadname\",{\"1\":{\"5168\":1}}],[\"thread类中声明sleep\",{\"1\":{\"5459\":1}}],[\"thread类就能创建一个新的线程\",{\"1\":{\"5270\":1}}],[\"thread类有一个构造方法是接收\",{\"1\":{\"5268\":1}}],[\"thread类时\",{\"1\":{\"5268\":1}}],[\"thread类来创建线程的\",{\"1\":{\"5264\":1}}],[\"thread类来实现多线程\",{\"1\":{\"5158\":1}}],[\"thread类\",{\"0\":{\"5162\":1},\"1\":{\"5163\":1}}],[\"thread类介绍\",{\"0\":{\"5161\":1}}],[\"thread\",{\"0\":{\"5077\":1},\"1\":{\"952\":4,\"5167\":1,\"5168\":1,\"5169\":1,\"5170\":1,\"5185\":3,\"5187\":1,\"5189\":1,\"5191\":2,\"5207\":1,\"5218\":1,\"5219\":3,\"5221\":4,\"5253\":2,\"5263\":7,\"5283\":1,\"5310\":4,\"5322\":7,\"5345\":8,\"5370\":1,\"5396\":7,\"5426\":4,\"5464\":5,\"5486\":3,\"5517\":1}}],[\"txt中出现了batman\",{\"1\":{\"2098\":1}}],[\"txt中出现了abcd\",{\"1\":{\"2098\":1}}],[\"txt中出现a\",{\"1\":{\"2098\":1}}],[\"txt\",{\"1\":{\"1083\":1,\"1946\":2,\"1950\":2,\"1953\":2,\"1956\":2,\"1959\":1,\"1963\":1,\"1966\":1,\"1971\":2,\"1975\":2,\"1985\":1,\"1989\":1,\"2003\":1,\"2015\":4,\"2036\":2,\"2042\":1,\"2048\":1,\"2062\":1,\"2087\":1,\"2098\":1,\"2121\":1,\"4724\":1,\"4753\":1,\"4777\":1,\"6132\":4,\"6233\":1,\"6239\":2,\"6251\":1,\"6254\":1,\"6275\":2,\"6285\":1,\"6287\":2,\"6348\":1,\"6385\":1,\"6388\":1,\"6394\":1,\"6398\":1,\"6411\":2,\"6460\":1,\"6483\":1,\"6487\":1,\"6526\":1,\"9262\":3}}],[\"tags\",{\"1\":{\"10541\":1}}],[\"tagline\",{\"1\":{\"9895\":1}}],[\"tar包\",{\"1\":{\"10184\":1}}],[\"tar\",{\"1\":{\"10157\":1}}],[\"targetnamespace=\",{\"1\":{\"9642\":1}}],[\"target作为项目目录\",{\"1\":{\"8626\":1}}],[\"target中\",{\"1\":{\"5027\":1}}],[\"target的参数类型elementtype枚举值多了两个\",{\"1\":{\"5024\":1}}],[\"target元注解\",{\"1\":{\"4998\":1}}],[\"target\",{\"0\":{\"4986\":1},\"1\":{\"1083\":2,\"1515\":1,\"4909\":1,\"4973\":1,\"4987\":1,\"4988\":1,\"4989\":1,\"5027\":1,\"5040\":1,\"5043\":1,\"5060\":1,\"5169\":1,\"5170\":1,\"8837\":1}}],[\"takenumber\",{\"1\":{\"4469\":2}}],[\"tan\",{\"1\":{\"1836\":1}}],[\"ta\",{\"1\":{\"1727\":1}}],[\"talk\",{\"1\":{\"3630\":1,\"3636\":1,\"3747\":2}}],[\"tal\",{\"1\":{\"1707\":2}}],[\"tables\",{\"1\":{\"10228\":1}}],[\"table\",{\"1\":{\"1206\":1,\"1229\":1,\"1334\":1,\"1336\":1,\"1338\":1,\"1340\":1,\"1342\":1,\"1344\":1,\"1346\":1,\"1348\":1,\"1350\":1,\"1352\":1,\"1354\":1,\"5855\":1,\"5890\":1,\"7889\":1,\"7893\":1,\"8105\":1,\"8148\":2,\"8162\":1,\"10057\":1,\"10069\":1}}],[\"task\",{\"1\":{\"5503\":1}}],[\"taskkill\",{\"1\":{\"746\":1}}],[\"tasklist\",{\"1\":{\"746\":1}}],[\"touch\",{\"1\":{\"10159\":1}}],[\"touppercase\",{\"0\":{\"1465\":1},\"1\":{\"1467\":2,\"6449\":1,\"7634\":2}}],[\"tojsonstring\",{\"1\":{\"9820\":1,\"9821\":1}}],[\"topn\",{\"1\":{\"10329\":1}}],[\"top\",{\"1\":{\"9249\":2}}],[\"token\",{\"1\":{\"9244\":1}}],[\"too\",{\"1\":{\"8078\":1}}],[\"toolkits\",{\"1\":{\"3939\":1}}],[\"tools\",{\"1\":{\"1068\":1}}],[\"toset\",{\"1\":{\"7723\":1,\"7725\":1}}],[\"tostring在object中输出的是带对象类型的地址\",{\"1\":{\"4252\":1}}],[\"tostring的源码\",{\"0\":{\"4251\":1}}],[\"tostringcache\",{\"1\":{\"1542\":1}}],[\"tostring\",{\"0\":{\"1854\":1,\"2352\":1,\"4249\":1,\"4260\":1},\"1\":{\"1214\":1,\"1494\":1,\"1502\":2,\"1769\":1,\"1773\":1,\"1788\":2,\"1791\":1,\"1856\":2,\"1971\":1,\"1975\":1,\"2048\":1,\"2162\":1,\"2175\":1,\"2178\":1,\"2185\":1,\"2188\":1,\"2197\":1,\"2200\":1,\"2256\":1,\"2272\":1,\"2275\":1,\"2354\":2,\"2362\":1,\"2365\":1,\"2375\":2,\"2387\":1,\"2444\":1,\"2760\":1,\"2948\":1,\"3591\":1,\"4214\":1,\"4253\":1,\"4256\":1,\"4259\":1,\"4274\":1,\"4843\":2,\"4845\":1,\"4865\":1,\"4874\":1,\"4957\":1,\"6398\":1,\"6598\":1,\"6956\":1,\"7086\":1,\"7106\":1}}],[\"tolist\",{\"1\":{\"7662\":1,\"7723\":1,\"7724\":1}}],[\"tolongfunction\",{\"1\":{\"7643\":1}}],[\"tolowercase\",{\"0\":{\"1461\":1},\"1\":{\"1464\":2}}],[\"ton\",{\"1\":{\"7655\":6}}],[\"todoublefunction\",{\"1\":{\"7637\":1}}],[\"todegrees\",{\"1\":{\"1840\":1}}],[\"tofile\",{\"1\":{\"6609\":1}}],[\"toffset\",{\"1\":{\"1455\":1}}],[\"toabsolutepath\",{\"1\":{\"6607\":1}}],[\"toarray\",{\"0\":{\"2441\":1},\"1\":{\"2444\":2,\"2446\":2}}],[\"tohexstring\",{\"1\":{\"4253\":1}}],[\"tom不是int类型的\",{\"1\":{\"5964\":1}}],[\"tome\",{\"0\":{\"4641\":1}}],[\"tom\",{\"1\":{\"3237\":3,\"3636\":1,\"4227\":2,\"4229\":2,\"5779\":3,\"5790\":2,\"5913\":1,\"5964\":1,\"5967\":1,\"5970\":1,\"7146\":1,\"7179\":1,\"7525\":1}}],[\"tomcat会自动将war包解压并对外提供web服务\",{\"1\":{\"9527\":1}}],[\"tomcat会将其常驻内存\",{\"1\":{\"8747\":1}}],[\"tomcat上的资源和编译后的java类路径\",{\"1\":{\"9251\":1}}],[\"tomcat在获取流的时候采用的编码是iso\",{\"1\":{\"9041\":1}}],[\"tomcat需要解析请求数据\",{\"1\":{\"8915\":1}}],[\"tomcat向之前发起请求的浏览器返回响应\",{\"1\":{\"8885\":1}}],[\"tomcat从response对象中拿到程序中设置的响应消息数据\",{\"1\":{\"8884\":1}}],[\"tomcat接收到请求\",{\"1\":{\"8877\":1}}],[\"tomcat中有一个defaultservlet\",{\"1\":{\"8858\":1}}],[\"tomcat识别\",{\"1\":{\"8679\":1}}],[\"tomcat都能解析\",{\"1\":{\"8677\":1}}],[\"tomcat安全\",{\"1\":{\"8663\":1}}],[\"tomcat集群\",{\"1\":{\"8662\":1}}],[\"tomcat架构\",{\"1\":{\"8660\":1}}],[\"tomcat添加导出方式\",{\"0\":{\"8647\":1}}],[\"tomcat导出方式介绍\",{\"0\":{\"8642\":1}}],[\"tomcat可能会运行多个项目\",{\"1\":{\"8479\":1}}],[\"tomcat默认访问index\",{\"1\":{\"8470\":1}}],[\"tomcat默认的端口是8080\",{\"1\":{\"8441\":1}}],[\"tomcat的模板的设置界面将不会出现下面两个选项\",{\"1\":{\"8653\":1}}],[\"tomcat的\",{\"1\":{\"8460\":1}}],[\"tomcat模式是utf8\",{\"1\":{\"8446\":1}}],[\"tomcat也被称为web容器\",{\"1\":{\"8416\":1}}],[\"tomcat是一个开源免费的轻量级web服务器\",{\"1\":{\"8416\":1}}],[\"tomcat介绍\",{\"0\":{\"8393\":1}}],[\"tomcat占用端口8080\",{\"1\":{\"6684\":1}}],[\"tomcat服务器配置\",{\"0\":{\"8590\":1}}],[\"tomcat服务器启动时\",{\"1\":{\"2864\":1}}],[\"tomcat服务器代码也是java写的\",{\"1\":{\"441\":1}}],[\"tomcat本身也是对象\",{\"1\":{\"535\":1}}],[\"tomcat这个starter就可以\",{\"1\":{\"445\":1}}],[\"tomcat依赖的位置\",{\"0\":{\"442\":1}}],[\"tomcat<\",{\"1\":{\"412\":1,\"446\":1,\"8623\":1}}],[\"tomcat\",{\"0\":{\"8415\":1},\"1\":{\"10\":1,\"443\":1,\"8242\":1,\"8243\":1,\"8398\":1,\"8489\":1,\"8503\":1,\"8617\":1,\"8670\":1,\"8709\":1,\"8723\":1,\"8889\":1,\"8890\":1,\"8897\":1,\"8910\":1,\"9212\":1,\"9231\":1}}],[\"tointfunction\",{\"1\":{\"7640\":1}}],[\"toindex指定结束排序的下标\",{\"1\":{\"2368\":1}}],[\"toindex\",{\"1\":{\"2361\":1,\"2362\":1,\"2370\":1,\"2569\":1}}],[\"toinstant\",{\"1\":{\"1623\":1}}],[\"toradians\",{\"1\":{\"1841\":1}}],[\"toepochmilli\",{\"1\":{\"1679\":2}}],[\"toepochmillion\",{\"0\":{\"1677\":1}}],[\"tochararray\",{\"0\":{\"1492\":1},\"1\":{\"1494\":2}}],[\"to\",{\"1\":{\"1364\":1,\"1707\":1,\"1719\":1,\"2765\":1,\"7828\":1,\"8358\":1,\"8699\":1,\"10164\":1,\"10498\":1,\"10585\":2,\"10603\":1,\"10864\":1}}],[\"tbl\",{\"1\":{\"988\":1,\"1206\":1,\"1229\":1}}],[\"tbd\",{\"1\":{\"958\":1,\"1054\":1,\"1057\":1,\"1180\":1,\"2646\":1,\"2649\":1,\"2652\":1,\"2655\":1,\"2658\":1,\"10470\":1,\"10630\":1,\"10633\":1,\"10783\":1,\"10823\":1,\"10849\":1,\"10852\":1,\"10855\":1}}],[\"trows\",{\"0\":{\"4765\":1}}],[\"treeify\",{\"1\":{\"5888\":1,\"5889\":3}}],[\"tree\",{\"1\":{\"5713\":1,\"10362\":1}}],[\"treemap的构造器接收一个参数\",{\"1\":{\"5915\":1}}],[\"treemap判断\",{\"1\":{\"5834\":1,\"5907\":1}}],[\"treemap存储\",{\"1\":{\"5831\":1,\"5904\":1}}],[\"treemap\",{\"0\":{\"5829\":1,\"5902\":1},\"1\":{\"2576\":1,\"5549\":1,\"5803\":1,\"5809\":1,\"5833\":1,\"5905\":1,\"5913\":2,\"5916\":2}}],[\"treeset底层使用\",{\"1\":{\"5906\":1}}],[\"treeset底层是红黑树\",{\"1\":{\"5784\":1}}],[\"treeset中\",{\"1\":{\"5786\":1}}],[\"treeset中不允许添加相同的对象\",{\"1\":{\"5783\":1}}],[\"treeset遍历数据\",{\"1\":{\"5782\":1}}],[\"treeset类新增了很多方法\",{\"1\":{\"5715\":1}}],[\"treeset\",{\"0\":{\"5712\":1,\"5781\":1},\"1\":{\"2399\":1,\"5547\":1,\"5690\":1,\"5714\":2,\"5718\":1,\"5719\":1,\"5790\":2,\"5794\":2}}],[\"traffic\",{\"1\":{\"9899\":1}}],[\"transmission\",{\"1\":{\"6724\":1}}],[\"transfer\",{\"1\":{\"6427\":1}}],[\"transferdata\",{\"1\":{\"4513\":5}}],[\"transaction\",{\"1\":{\"8156\":1,\"8157\":1,\"8158\":1,\"8159\":1,\"8162\":1}}],[\"transact\",{\"1\":{\"4469\":3}}],[\"transient\",{\"1\":{\"1542\":1}}],[\"trace\",{\"1\":{\"893\":1,\"952\":2,\"8806\":2}}],[\"try语句\",{\"0\":{\"7770\":1}}],[\"try中有return语句\",{\"1\":{\"4745\":1}}],[\"try\",{\"0\":{\"4725\":1,\"4733\":1,\"4735\":1,\"4778\":1,\"10267\":1},\"1\":{\"1502\":1,\"1506\":1,\"2003\":1,\"2114\":2,\"4677\":1,\"4688\":1,\"4727\":1,\"4728\":1,\"4734\":1,\"4751\":1,\"4753\":2,\"4755\":1,\"4777\":1,\"4779\":1,\"4803\":1,\"5221\":2,\"5384\":1,\"5396\":1,\"5426\":2,\"5464\":1,\"5486\":1,\"6251\":2,\"6254\":2,\"6285\":2,\"6287\":3,\"6306\":3,\"6348\":2,\"6353\":3,\"6449\":2,\"6460\":1,\"6840\":1,\"6843\":1,\"6884\":1,\"7970\":3,\"7978\":2,\"7980\":1,\"7989\":1,\"8037\":1,\"8045\":1,\"8054\":1,\"8146\":1,\"8148\":3,\"8201\":4,\"8210\":7,\"8324\":1,\"8326\":1,\"10177\":1,\"10184\":1,\"10269\":1,\"10585\":1}}],[\"trim\",{\"0\":{\"1468\":1},\"1\":{\"1472\":2}}],[\"true或者false\",{\"1\":{\"10095\":1}}],[\"true表示没有与查询条件匹配的文档时创建新文档\",{\"1\":{\"10282\":1}}],[\"true表示开启\",{\"1\":{\"8133\":1}}],[\"true表示公平的多线程\",{\"1\":{\"5386\":1}}],[\"true表示执行成功\",{\"1\":{\"2436\":1}}],[\"true111\",{\"1\":{\"4295\":1}}],[\"true123\",{\"1\":{\"4274\":1}}],[\"true用1表示\",{\"1\":{\"3145\":1}}],[\"true=追加写\",{\"1\":{\"2085\":1}}],[\"true\",{\"0\":{\"3410\":1},\"1\":{\"486\":4,\"903\":1,\"952\":1,\"1299\":3,\"1364\":1,\"1424\":2,\"1427\":1,\"1452\":1,\"1455\":1,\"1458\":1,\"1524\":1,\"1760\":1,\"1979\":1,\"1982\":1,\"1985\":1,\"1989\":1,\"1993\":1,\"2015\":1,\"2022\":1,\"2087\":1,\"2239\":1,\"2244\":1,\"2291\":1,\"2379\":1,\"2416\":1,\"2422\":2,\"2426\":1,\"2429\":1,\"2436\":1,\"2461\":1,\"2546\":1,\"2604\":1,\"2606\":1,\"2612\":1,\"2615\":1,\"2700\":1,\"2747\":1,\"2756\":1,\"3142\":1,\"3212\":1,\"3237\":2,\"3412\":1,\"3414\":1,\"3457\":3,\"4164\":1,\"4227\":3,\"4229\":1,\"4236\":2,\"4237\":1,\"4238\":3,\"4239\":2,\"4241\":2,\"4248\":2,\"4274\":3,\"4422\":1,\"5152\":1,\"5221\":1,\"5263\":1,\"5310\":1,\"5322\":1,\"5327\":1,\"5345\":3,\"5387\":1,\"5396\":2,\"5464\":1,\"5818\":1,\"5820\":1,\"6230\":1,\"6274\":1,\"6285\":1,\"6449\":1,\"6460\":1,\"6483\":1,\"6711\":1,\"6962\":3,\"7146\":1,\"7158\":1,\"7161\":2,\"7179\":1,\"7682\":1,\"7965\":1,\"8004\":1,\"8045\":1,\"8054\":1,\"8148\":1,\"8201\":2,\"8301\":1,\"9902\":1,\"10096\":1,\"10162\":3,\"10252\":1,\"10293\":1,\"10496\":4,\"10541\":3,\"10554\":1,\"10597\":1,\"10603\":1,\"10660\":7}}],[\"tinyblob\",{\"1\":{\"8069\":1}}],[\"tinyint\",{\"1\":{\"1348\":2,\"7908\":1}}],[\"timebetweenevictionrunsmillis\",{\"1\":{\"8309\":1}}],[\"timebasedfilenamingandtriggeringpolicy>\",{\"1\":{\"952\":3}}],[\"timebasedrollingpolicy\",{\"1\":{\"952\":3}}],[\"timestamp\",{\"1\":{\"7923\":1,\"7924\":1,\"10554\":10,\"10573\":2,\"10580\":2,\"10657\":2,\"10660\":2}}],[\"time等\",{\"1\":{\"1761\":1}}],[\"time为例\",{\"1\":{\"1704\":1}}],[\"time`\",{\"1\":{\"1334\":2,\"1336\":2,\"1338\":2,\"1340\":2,\"1342\":2,\"1344\":2,\"1348\":2,\"1350\":1,\"1352\":2}}],[\"time\",{\"1\":{\"996\":1,\"1286\":1,\"1622\":1,\"1623\":2,\"1625\":1,\"1626\":1,\"1627\":1,\"1628\":1,\"1629\":1,\"1676\":2,\"1682\":2,\"1699\":1,\"1701\":1,\"1702\":2,\"1705\":1,\"1707\":1,\"1719\":2,\"7921\":1,\"7922\":1}}],[\"timeout>\",{\"1\":{\"9785\":1}}],[\"timeout>30<\",{\"1\":{\"9785\":1}}],[\"timeout=0\",{\"1\":{\"2256\":1}}],[\"timeout\",{\"1\":{\"611\":1,\"628\":1,\"6711\":1}}],[\"title\",{\"1\":{\"734\":2}}],[\"term\",{\"1\":{\"10541\":1,\"10554\":1}}],[\"termsupport\",{\"1\":{\"7313\":1}}],[\"terminating\",{\"1\":{\"1894\":1}}],[\"telnet占用端口23\",{\"1\":{\"6683\":1}}],[\"teacher\",{\"1\":{\"4174\":1}}],[\"ten\",{\"1\":{\"1881\":2}}],[\"text\",{\"1\":{\"1613\":1,\"1696\":1,\"2950\":2,\"3937\":1,\"6460\":1,\"8951\":1,\"8988\":1,\"9025\":1,\"9082\":2,\"9085\":1,\"9101\":1,\"9229\":1,\"10372\":1}}],[\"template\",{\"1\":{\"4466\":1,\"8529\":1}}],[\"templates中\",{\"1\":{\"8578\":1}}],[\"templates\",{\"1\":{\"574\":1,\"1303\":1,\"8577\":1}}],[\"temporalaccessor\",{\"1\":{\"1692\":1,\"1696\":1,\"1707\":1,\"1719\":1,\"1727\":1}}],[\"temporaladjuster\",{\"1\":{\"1639\":1,\"1642\":1,\"1645\":1,\"1670\":1}}],[\"temporal\",{\"1\":{\"1628\":1,\"1639\":1,\"1642\":1,\"1645\":1,\"1670\":1,\"1692\":1}}],[\"temp\",{\"1\":{\"492\":2,\"3782\":2,\"3787\":2}}],[\"tempdir\",{\"1\":{\"492\":1}}],[\"test>\",{\"1\":{\"10526\":1,\"10573\":1,\"10711\":1,\"10766\":1}}],[\"testwhileidle的判断依据\",{\"1\":{\"8310\":1}}],[\"testwhileidle\",{\"1\":{\"8306\":1}}],[\"testwhileidle都不会其作用\",{\"1\":{\"8299\":1}}],[\"testonreturn\",{\"1\":{\"8299\":1,\"8303\":1}}],[\"testonborrow\",{\"1\":{\"8299\":1,\"8300\":1}}],[\"testtransactionselect\",{\"1\":{\"8162\":1}}],[\"testtypedefine<\",{\"1\":{\"5030\":1}}],[\"testjdbctransaction\",{\"1\":{\"8148\":1}}],[\"testqueryvalue\",{\"1\":{\"8391\":1}}],[\"testquerylist\",{\"1\":{\"8387\":1}}],[\"testqueryinstance1\",{\"1\":{\"8389\":1}}],[\"testqueryinstance\",{\"1\":{\"8385\":1}}],[\"testquery\",{\"1\":{\"8089\":1}}],[\"testquery1\",{\"1\":{\"8037\":1}}],[\"testinsert3\",{\"1\":{\"8126\":1}}],[\"testinsert1\",{\"1\":{\"8121\":1}}],[\"testinsert\",{\"1\":{\"7970\":1,\"8084\":1,\"8210\":1,\"8381\":1}}],[\"testing\",{\"1\":{\"118\":1}}],[\"testconnection3\",{\"1\":{\"7862\":1,\"7865\":1}}],[\"testcontroller类的getit方法被成功执行\",{\"1\":{\"378\":1}}],[\"testcontroller\",{\"1\":{\"372\":1,\"430\":2}}],[\"testfilereaderfilewriter\",{\"1\":{\"6287\":1}}],[\"test注解\",{\"1\":{\"4913\":1}}],[\"test2\",{\"1\":{\"4753\":1,\"6411\":1,\"6949\":1,\"6962\":1}}],[\"test1\",{\"1\":{\"4734\":1,\"6960\":1,\"8471\":1}}],[\"test$none\",{\"1\":{\"2256\":1}}],[\"testdeletebyid\",{\"1\":{\"8210\":1}}],[\"testdelete\",{\"1\":{\"1224\":1,\"8383\":1}}],[\"testdb\",{\"1\":{\"858\":1}}],[\"testupdateconnectioncustomer\",{\"1\":{\"8210\":1}}],[\"testupdate\",{\"1\":{\"1224\":1,\"7980\":1}}],[\"testsave\",{\"1\":{\"1224\":1}}],[\"testgetmaxbirth\",{\"1\":{\"8210\":1}}],[\"testgetcount\",{\"1\":{\"8210\":1}}],[\"testgetcustomerbyid\",{\"1\":{\"8210\":1,\"8326\":1}}],[\"testgetby2\",{\"1\":{\"1252\":1,\"1256\":1}}],[\"testgetby\",{\"1\":{\"1248\":1}}],[\"testgetbyid\",{\"1\":{\"1224\":1}}],[\"testgetpage\",{\"1\":{\"1241\":1}}],[\"testgetall\",{\"1\":{\"1016\":1,\"1224\":1,\"8210\":1}}],[\"test依赖\",{\"1\":{\"1134\":1}}],[\"testmvc\",{\"1\":{\"858\":1}}],[\"testredis\",{\"1\":{\"858\":1}}],[\"test环境配置文件\",{\"1\":{\"838\":1}}],[\"test<\",{\"1\":{\"653\":1,\"1135\":1,\"1177\":1,\"1361\":1}}],[\"test就是junit测试有关的模块\",{\"1\":{\"652\":1}}],[\"test\",{\"0\":{\"1240\":1},\"1\":{\"339\":1,\"372\":1,\"377\":1,\"655\":1,\"656\":1,\"663\":1,\"830\":1,\"838\":1,\"858\":1,\"981\":1,\"991\":2,\"1008\":1,\"1016\":2,\"1095\":1,\"1177\":1,\"1224\":5,\"1241\":1,\"1248\":1,\"1252\":1,\"1256\":1,\"2256\":1,\"2642\":1,\"2882\":2,\"2888\":1,\"3664\":1,\"3782\":5,\"3787\":1,\"3816\":1,\"3821\":1,\"4164\":1,\"4253\":2,\"4356\":1,\"4459\":1,\"5396\":7,\"6078\":3,\"6081\":3,\"6098\":1,\"6958\":1,\"7436\":1,\"7846\":1,\"7852\":1,\"7862\":1,\"7865\":1,\"7871\":1,\"8263\":1,\"9503\":1,\"10218\":2,\"10660\":6}}],[\"t\",{\"0\":{\"2363\":1,\"7741\":2,\"7747\":2,\"7761\":1},\"1\":{\"486\":1,\"1494\":1,\"1743\":1,\"1778\":2,\"2150\":1,\"2291\":1,\"2365\":1,\"2375\":2,\"2382\":1,\"2391\":1,\"2446\":2,\"2500\":2,\"2505\":2,\"2515\":2,\"2633\":2,\"2636\":1,\"2639\":2,\"2642\":2,\"5030\":2,\"5033\":1,\"6042\":1,\"7086\":1,\"7106\":2,\"7430\":2,\"7432\":1,\"7434\":2,\"7436\":2,\"7465\":2,\"7466\":2,\"7475\":1,\"7482\":4,\"7575\":1,\"7583\":1,\"7590\":3,\"7647\":1,\"7708\":2,\"7743\":2,\"7749\":2,\"7760\":1,\"7763\":2,\"8054\":4,\"8201\":9,\"8358\":1,\"8362\":1,\"10554\":16,\"10573\":2,\"10580\":2,\"10657\":2,\"10660\":2}}],[\"t变成空格\",{\"1\":{\"486\":1}}],[\"ttps\",{\"1\":{\"360\":1}}],[\"type是string类型\",{\"1\":{\"9642\":1}}],[\"type>\",{\"1\":{\"9232\":1}}],[\"type>audio\",{\"1\":{\"9232\":1}}],[\"type=\",{\"1\":{\"8988\":3,\"9025\":5,\"9642\":6}}],[\"typearguments\",{\"1\":{\"8201\":2}}],[\"typedefine\",{\"1\":{\"5030\":1}}],[\"types\",{\"1\":{\"355\":1,\"9915\":1,\"9916\":1}}],[\"type\",{\"0\":{\"5028\":1,\"5031\":1},\"1\":{\"311\":1,\"985\":1,\"1048\":1,\"1051\":1,\"1208\":1,\"1211\":1,\"1229\":1,\"1364\":1,\"2129\":1,\"2159\":2,\"2228\":2,\"2962\":1,\"3022\":1,\"3034\":1,\"4961\":2,\"4989\":3,\"4991\":1,\"5025\":1,\"5026\":1,\"5027\":2,\"5040\":1,\"5043\":1,\"5947\":1,\"6987\":1,\"7086\":2,\"7134\":1,\"7137\":2,\"7531\":1,\"8201\":2,\"8837\":1,\"9082\":1,\"9895\":1}}],[\"durableoptime\",{\"1\":{\"10554\":1}}],[\"durationunit\",{\"1\":{\"631\":1}}],[\"durationunit注解描述时间单位\",{\"1\":{\"630\":1}}],[\"duration类\",{\"1\":{\"630\":1}}],[\"duration\",{\"0\":{\"629\":1},\"1\":{\"631\":1,\"1623\":1}}],[\"d3\",{\"1\":{\"9937\":1,\"9941\":1,\"9980\":1}}],[\"d2\",{\"1\":{\"9936\":1,\"9940\":1,\"9979\":1}}],[\"dtd文件名字\",{\"1\":{\"9633\":1}}],[\"dtd文件的位置url\",{\"1\":{\"9633\":1}}],[\"dtd文件的位置\",{\"1\":{\"9633\":1}}],[\"dtd文档示例\",{\"0\":{\"9630\":1}}],[\"dtd\",{\"0\":{\"9629\":1},\"1\":{\"9626\":1,\"9635\":1}}],[\"dfile\",{\"1\":{\"9037\":1}}],[\"dql的操作步骤\",{\"0\":{\"7994\":1}}],[\"dql\",{\"0\":{\"7992\":1}}],[\"dql操作\",{\"1\":{\"7940\":1}}],[\"dql构造方法\",{\"1\":{\"1296\":1}}],[\"dml方法\",{\"1\":{\"8201\":1}}],[\"dml\",{\"0\":{\"7967\":1},\"1\":{\"8180\":1}}],[\"dml操作示例\",{\"0\":{\"8147\":1}}],[\"dml操作的变量是sql预编译语句\",{\"1\":{\"7984\":1}}],[\"dml操作\",{\"1\":{\"7939\":1}}],[\"dml构造方法\",{\"1\":{\"1296\":1}}],[\"dp\",{\"1\":{\"6840\":2,\"6843\":5}}],[\"dns\",{\"1\":{\"6677\":1}}],[\"d1和d3包含了\",{\"1\":{\"9952\":1}}],[\"d1\",{\"1\":{\"3100\":1,\"3162\":1,\"3176\":2,\"4188\":2,\"4292\":2,\"9935\":1,\"9939\":1,\"9978\":1}}],[\"d+\",{\"1\":{\"1518\":1,\"1521\":1,\"1524\":1,\"2692\":1,\"2697\":1}}],[\"ditectory选择jar包目标目录\",{\"1\":{\"9507\":1}}],[\"dispatchertype\",{\"1\":{\"9295\":2,\"9298\":2}}],[\"dispatchertypes的值可以是个数组\",{\"1\":{\"9297\":1}}],[\"dispatchertypes\",{\"1\":{\"9295\":2,\"9298\":1}}],[\"display\",{\"1\":{\"7117\":1}}],[\"distributions下的即为java源码\",{\"1\":{\"8426\":1}}],[\"distinct\",{\"0\":{\"7617\":1},\"1\":{\"7600\":1,\"7619\":2}}],[\"dis\",{\"1\":{\"6487\":5}}],[\"dish`\",{\"1\":{\"1342\":1}}],[\"dish\",{\"0\":{\"1337\":1,\"1341\":1,\"1343\":1},\"1\":{\"1315\":1,\"1319\":1,\"1321\":1,\"1338\":1}}],[\"dimission\",{\"1\":{\"4823\":1}}],[\"directconnection=true\",{\"1\":{\"10807\":1}}],[\"direct和replicaset\",{\"1\":{\"10788\":1}}],[\"direct\",{\"0\":{\"10789\":1},\"1\":{\"10526\":1,\"10573\":1,\"10603\":1,\"10766\":2}}],[\"directories\",{\"1\":{\"8568\":1}}],[\"directorystream<path>\",{\"1\":{\"6631\":1}}],[\"dir默认是在当前module中的\",{\"1\":{\"6131\":1}}],[\"dir默认为项目路径\",{\"1\":{\"6130\":1}}],[\"dir中存储\",{\"1\":{\"6129\":1}}],[\"dir\",{\"1\":{\"2314\":1,\"2628\":1,\"6132\":1}}],[\"divisor\",{\"1\":{\"1899\":3}}],[\"divide\",{\"0\":{\"1893\":1},\"1\":{\"1899\":4}}],[\"digdecimal间不能直接使用\",{\"1\":{\"1885\":1}}],[\"dickman\",{\"1\":{\"1548\":1}}],[\"dio渚�\",{\"1\":{\"1506\":1}}],[\"dio侠\",{\"1\":{\"1502\":1,\"1506\":1}}],[\"dysmsapi<\",{\"1\":{\"1172\":1}}],[\"daughterdo\",{\"1\":{\"4188\":1}}],[\"daughter\",{\"1\":{\"4184\":2,\"4188\":3}}],[\"day04\",{\"1\":{\"5590\":1}}],[\"days\",{\"1\":{\"1660\":2,\"1663\":1}}],[\"dayofyear\",{\"1\":{\"1654\":2}}],[\"dayofmonthint\",{\"1\":{\"1651\":1}}],[\"dayofmonth\",{\"1\":{\"1651\":1}}],[\"day\",{\"1\":{\"1654\":2,\"1657\":4,\"3374\":1}}],[\"dao的实现类\",{\"0\":{\"8175\":1}}],[\"dao的使用流程\",{\"0\":{\"8171\":1}}],[\"dao介绍\",{\"0\":{\"8164\":1}}],[\"dao层的方法名是比较直接的\",{\"1\":{\"1259\":1}}],[\"dao开发\",{\"1\":{\"1189\":1}}],[\"dao\",{\"0\":{\"986\":1,\"1218\":1,\"1230\":1,\"1242\":1,\"8163\":1},\"1\":{\"988\":1,\"1221\":1,\"4598\":1,\"8166\":1,\"8210\":8,\"8326\":1,\"9569\":1,\"9584\":1,\"9585\":1,\"10835\":1}}],[\"dat\",{\"1\":{\"6543\":2,\"6555\":1,\"6557\":1,\"6571\":1,\"6573\":1}}],[\"data的下的一个模块\",{\"1\":{\"10837\":1}}],[\"databases\",{\"1\":{\"10195\":1,\"10209\":1}}],[\"database\",{\"1\":{\"7798\":1,\"10054\":1,\"10055\":1,\"10196\":1,\"10843\":2,\"10846\":2}}],[\"datagrampacket的缓冲区填充了接收的数据\",{\"1\":{\"6850\":1}}],[\"datagrampacket\",{\"0\":{\"6855\":1},\"1\":{\"6828\":1,\"6830\":1,\"6840\":2,\"6843\":2,\"6849\":2,\"6850\":1,\"6856\":1,\"6857\":2,\"6858\":1}}],[\"datagramsocket与datagrampacket\",{\"1\":{\"6834\":1}}],[\"datagramsocket\",{\"0\":{\"6844\":1},\"1\":{\"6828\":1,\"6829\":1,\"6840\":2,\"6843\":2,\"6845\":1,\"6846\":1,\"6847\":1}}],[\"datagram\",{\"1\":{\"6725\":1,\"6765\":1}}],[\"datagramchannel\",{\"1\":{\"6587\":1}}],[\"dataoutput这两个接口\",{\"1\":{\"6489\":1}}],[\"dataoutputstream中的方法\",{\"0\":{\"6478\":1}}],[\"dataoutputstream\",{\"0\":{\"6480\":1},\"1\":{\"6466\":1,\"6483\":2}}],[\"datainputstream中的方法\",{\"0\":{\"6467\":1}}],[\"datainputstream\",{\"0\":{\"6484\":1},\"1\":{\"6465\":1,\"6483\":1,\"6487\":2}}],[\"data注解\",{\"1\":{\"1214\":1}}],[\"dataunit\",{\"1\":{\"635\":1}}],[\"datasizeunit\",{\"1\":{\"635\":1}}],[\"datasizeunit注解描述存储空间单位\",{\"1\":{\"633\":1}}],[\"datasize\",{\"1\":{\"628\":1,\"635\":2}}],[\"datasource用来取代drivermanager来获取connection\",{\"1\":{\"8248\":1}}],[\"datasource\",{\"1\":{\"511\":1,\"516\":1,\"519\":2,\"522\":2,\"590\":2,\"598\":1,\"600\":1,\"602\":2,\"623\":2,\"624\":1,\"969\":1,\"981\":1,\"1008\":1,\"1206\":1,\"1364\":1,\"8242\":2,\"8260\":2,\"8270\":1,\"8324\":1,\"8352\":1}}],[\"data\",{\"0\":{\"10833\":1,\"10836\":1},\"1\":{\"611\":1,\"621\":1,\"645\":1,\"647\":1,\"1019\":1,\"1154\":1,\"1177\":1,\"1211\":1,\"1286\":1,\"1296\":5,\"2121\":2,\"3787\":7,\"4724\":4,\"4753\":4,\"4777\":4,\"6243\":1,\"6251\":4,\"6348\":4,\"6449\":4,\"6483\":1,\"6487\":1,\"7794\":1,\"8166\":1,\"10083\":1,\"10136\":1,\"10142\":1,\"10149\":1,\"10159\":1,\"10162\":1,\"10491\":1,\"10496\":1,\"10501\":1,\"10506\":1,\"10835\":2,\"10837\":2,\"10839\":1,\"10843\":1,\"10846\":1,\"10860\":1,\"10861\":1}}],[\"date中的年份是从1900开始的\",{\"1\":{\"1618\":1}}],[\"date类都很像\",{\"1\":{\"1669\":1}}],[\"date类\",{\"1\":{\"1616\":1,\"1667\":1}}],[\"datesize类\",{\"1\":{\"633\":1}}],[\"datesize\",{\"0\":{\"632\":1}}],[\"datetimestr\",{\"1\":{\"1707\":2,\"1725\":2}}],[\"datetimeformatter类用来取代之前的simpledateformatter类\",{\"1\":{\"1686\":1}}],[\"datetimeformatter\",{\"0\":{\"1683\":1},\"1\":{\"1688\":1,\"1702\":6,\"1705\":2,\"1707\":2,\"1719\":2,\"1723\":2,\"1725\":2,\"1727\":2}}],[\"datetime\",{\"1\":{\"486\":1,\"1334\":2,\"1336\":2,\"1338\":2,\"1340\":2,\"1342\":2,\"1344\":2,\"1348\":2,\"1350\":1,\"1352\":2}}],[\"date\",{\"1\":{\"486\":1,\"952\":1,\"1611\":1,\"1612\":1,\"1623\":2,\"1699\":1,\"1700\":1,\"1702\":2,\"1705\":1,\"1707\":1,\"1761\":1,\"4199\":2,\"4232\":1,\"4255\":1,\"4256\":4,\"4716\":1,\"6949\":1,\"7919\":1,\"7920\":1,\"7956\":3,\"7970\":4,\"8037\":1,\"8042\":2,\"8089\":1,\"8205\":1,\"8207\":1,\"8210\":3,\"8389\":1,\"8391\":2,\"9895\":1,\"10252\":1,\"10256\":1,\"10264\":2,\"10290\":1,\"10554\":1,\"10603\":1}}],[\"dofiter方法以及该方法之前的代码都不会执行\",{\"1\":{\"9279\":1}}],[\"dofilter后面的代码不会执行\",{\"1\":{\"9276\":1}}],[\"dofilter\",{\"0\":{\"9271\":1},\"1\":{\"9270\":2,\"9304\":1,\"9305\":1,\"9307\":1,\"9308\":1}}],[\"do的前面不能加\",{\"1\":{\"8853\":1}}],[\"dopost方法被调用了\",{\"1\":{\"8812\":1}}],[\"dopost\",{\"1\":{\"8809\":2,\"8817\":2,\"8944\":1,\"8990\":1,\"9004\":1,\"9027\":1,\"9031\":1,\"9249\":1,\"9262\":1,\"9693\":1,\"9695\":1}}],[\"doprivileged\",{\"1\":{\"6334\":1}}],[\"dos\",{\"1\":{\"6483\":8}}],[\"document\",{\"1\":{\"10061\":1,\"10079\":2,\"10081\":1,\"10242\":1,\"10248\":1}}],[\"documents>\",{\"1\":{\"10246\":1}}],[\"documents\",{\"1\":{\"9915\":1}}],[\"documented\",{\"0\":{\"4999\":1},\"1\":{\"4908\":1,\"4951\":1,\"4974\":1,\"5001\":1,\"5037\":1,\"5040\":1,\"8837\":1}}],[\"doctype\",{\"1\":{\"9633\":2,\"9635\":1}}],[\"docbase=\",{\"1\":{\"8477\":1,\"8483\":1}}],[\"docbase\",{\"1\":{\"8475\":1}}],[\"doc\",{\"1\":{\"6232\":1,\"6233\":1}}],[\"docker\",{\"0\":{\"178\":1}}],[\"doget是httpservlet中的service自动调用的方法\",{\"1\":{\"8912\":1}}],[\"doget方法或者是dopost方法最终都是由web服务器\",{\"1\":{\"8910\":1}}],[\"doget方法被调用了\",{\"1\":{\"8811\":1}}],[\"doget和dopost方法中的参数就变成httpservletrequest和httpservletreponse\",{\"1\":{\"8902\":1}}],[\"doget\",{\"1\":{\"8809\":2,\"8817\":2,\"8912\":1,\"8944\":1,\"8951\":1,\"8955\":1,\"9004\":2,\"9027\":2,\"9031\":2,\"9079\":1,\"9124\":2,\"9143\":1,\"9145\":1,\"9220\":1,\"9234\":1,\"9750\":1}}],[\"dog\",{\"1\":{\"4306\":1,\"4326\":3}}],[\"doit\",{\"1\":{\"3664\":2}}],[\"do\",{\"0\":{\"3415\":1,\"3418\":1},\"1\":{\"3339\":1,\"3417\":1,\"3420\":1,\"3664\":1,\"8853\":1,\"8854\":2}}],[\"dotall\",{\"1\":{\"2725\":1}}],[\"download\",{\"1\":{\"6883\":3,\"10128\":1,\"10177\":1,\"10184\":1}}],[\"downloadurl\",{\"1\":{\"6883\":1}}],[\"down\",{\"1\":{\"1913\":1,\"1925\":1}}],[\"doublestream\",{\"1\":{\"7580\":1,\"7636\":1}}],[\"double数据的创建\",{\"1\":{\"1881\":1}}],[\"doublevalue\",{\"1\":{\"1850\":2}}],[\"double类型赋值给float会报错\",{\"1\":{\"3173\":1}}],[\"double类型\",{\"1\":{\"1834\":1,\"1835\":1,\"1836\":1,\"1837\":1,\"1838\":1,\"1839\":1}}],[\"double\",{\"1\":{\"1486\":3,\"1799\":1,\"1805\":2,\"1808\":3,\"1811\":3,\"1814\":3,\"1817\":2,\"1820\":3,\"1822\":1,\"1823\":5,\"1825\":5,\"1832\":13,\"1845\":1,\"1848\":1,\"1850\":2,\"1856\":1,\"1862\":2,\"2345\":1,\"2802\":1,\"3031\":1,\"3096\":1,\"3100\":1,\"3162\":1,\"3176\":1,\"3253\":4,\"3696\":1,\"3870\":2,\"4052\":1,\"4227\":1,\"4292\":2,\"4634\":1,\"4918\":1,\"6472\":1,\"7075\":1,\"7580\":1,\"7613\":1,\"7629\":1,\"7694\":1,\"7697\":1,\"7716\":1,\"10083\":1}}],[\"doexception\",{\"1\":{\"1290\":1}}],[\"domain\",{\"1\":{\"985\":1,\"1210\":1,\"4597\":1}}],[\"d\",{\"1\":{\"916\":1,\"920\":1,\"923\":1,\"936\":1,\"939\":1,\"952\":7,\"1494\":2,\"1650\":1,\"1862\":2,\"1946\":2,\"1950\":1,\"2098\":1,\"2314\":2,\"2382\":1,\"2546\":3,\"2569\":2,\"2671\":1,\"2717\":1,\"2747\":1,\"2750\":2,\"2756\":1,\"2760\":2,\"2858\":1,\"2962\":1,\"4227\":2,\"5426\":1,\"6132\":2,\"6136\":2,\"7568\":1,\"7572\":1,\"8477\":1,\"8483\":1,\"9095\":1,\"9099\":1,\"9642\":1,\"10149\":1}}],[\"dsaft\",{\"1\":{\"9645\":1}}],[\"ds\",{\"1\":{\"598\":2,\"602\":2,\"623\":2,\"1083\":2,\"6840\":5,\"6843\":5}}],[\"db可选\",{\"1\":{\"10703\":1}}],[\"dbadminanydatabase\",{\"1\":{\"10666\":1,\"10685\":1}}],[\"dbadmin\",{\"1\":{\"10660\":1,\"10667\":1,\"10687\":1}}],[\"dbowner\",{\"1\":{\"10660\":1,\"10667\":1}}],[\"db指的是当前use的数据库\",{\"1\":{\"10221\":1}}],[\"db对象调用dropdatabase方法删除当前数据库\",{\"1\":{\"10221\":1}}],[\"dbs等\",{\"1\":{\"10515\":1}}],[\"dbs查看数据库时\",{\"1\":{\"10224\":1}}],[\"dbs\",{\"1\":{\"10209\":1}}],[\"dbpath设置仅适用于mongod\",{\"1\":{\"10162\":1,\"10496\":1}}],[\"dbpath\",{\"1\":{\"10143\":1,\"10149\":1,\"10162\":1,\"10496\":1,\"10501\":1,\"10506\":1}}],[\"dbpath=\",{\"1\":{\"10142\":1}}],[\"dbutils类提供了三个重载的关闭方法\",{\"1\":{\"8340\":1}}],[\"dbutils类\",{\"0\":{\"8338\":1}}],[\"dbutils就跟之前封装的dao一样\",{\"1\":{\"8330\":1}}],[\"dbutils介绍\",{\"0\":{\"8329\":1}}],[\"dbutils\",{\"0\":{\"8327\":1,\"8328\":1},\"1\":{\"8331\":1,\"8335\":1,\"8336\":1,\"8337\":2}}],[\"db39\",{\"1\":{\"6668\":1}}],[\"dbcp\",{\"1\":{\"6411\":2,\"8243\":1,\"8253\":1}}],[\"db\",{\"1\":{\"516\":1,\"969\":1,\"995\":1,\"1206\":2,\"1229\":1,\"1364\":1,\"4599\":1,\"10136\":1,\"10142\":1,\"10149\":1,\"10159\":1,\"10162\":1,\"10167\":1,\"10219\":1,\"10222\":1,\"10231\":2,\"10239\":1,\"10246\":1,\"10252\":1,\"10261\":1,\"10264\":1,\"10269\":1,\"10276\":1,\"10290\":1,\"10293\":1,\"10296\":1,\"10300\":2,\"10302\":2,\"10306\":1,\"10311\":2,\"10314\":2,\"10317\":1,\"10321\":2,\"10326\":2,\"10331\":1,\"10333\":2,\"10337\":1,\"10339\":1,\"10346\":1,\"10348\":2,\"10351\":6,\"10354\":2,\"10357\":1,\"10377\":1,\"10379\":1,\"10385\":1,\"10394\":2,\"10399\":2,\"10411\":3,\"10414\":1,\"10417\":1,\"10422\":1,\"10432\":1,\"10491\":1,\"10496\":1,\"10501\":1,\"10506\":1,\"10588\":1,\"10603\":3,\"10657\":1,\"10660\":7,\"10663\":5,\"10703\":2,\"10711\":2,\"10714\":2,\"10718\":2,\"10724\":1,\"10726\":5,\"10728\":1,\"10730\":1,\"10734\":2,\"10753\":1,\"10766\":1,\"10860\":1,\"10861\":1}}],[\"dropuser\",{\"1\":{\"10728\":1}}],[\"dropindexes\",{\"1\":{\"10414\":1}}],[\"dropindex\",{\"1\":{\"10411\":3}}],[\"drop\",{\"1\":{\"10239\":1}}],[\"dropdatabase\",{\"1\":{\"10222\":1}}],[\"drawmoney\",{\"1\":{\"4469\":1}}],[\"driver的实现类不用获取了\",{\"1\":{\"7865\":1}}],[\"driver的对象\",{\"1\":{\"7852\":1}}],[\"drivermanager\",{\"1\":{\"7862\":2,\"7865\":1,\"7873\":1,\"7947\":1,\"7970\":1,\"7975\":1}}],[\"driverclass=com\",{\"1\":{\"7871\":1}}],[\"driverclass\",{\"1\":{\"7858\":2,\"7873\":3,\"7970\":3,\"7975\":3}}],[\"driverclassname=com\",{\"1\":{\"8263\":1}}],[\"driverclassname\",{\"1\":{\"600\":1,\"8277\":1,\"8347\":1}}],[\"driver接口实现类com\",{\"1\":{\"7852\":1}}],[\"driver\",{\"0\":{\"7815\":1,\"7841\":1},\"1\":{\"516\":2,\"519\":1,\"590\":1,\"600\":1,\"969\":2,\"976\":1,\"978\":1,\"981\":2,\"999\":2,\"1005\":1,\"1008\":2,\"1200\":1,\"1206\":2,\"1364\":2,\"7810\":1,\"7838\":1,\"7852\":4,\"7854\":1,\"7858\":2,\"7862\":5,\"7865\":1,\"7871\":1,\"8263\":1,\"10829\":1,\"10830\":1}}],[\"druid2\",{\"1\":{\"8272\":1}}],[\"druid是阿里巴巴开源平台上一个数据库连接池实现\",{\"1\":{\"8253\":1}}],[\"druid的连接信息\",{\"1\":{\"1205\":1}}],[\"druid连接池依赖\",{\"1\":{\"1144\":1}}],[\"druid依赖的坐标需要手动在pom\",{\"1\":{\"966\":1}}],[\"druiddatasourcefactory\",{\"1\":{\"8260\":2,\"8324\":1}}],[\"druiddatasource\",{\"1\":{\"598\":3,\"602\":3,\"623\":3}}],[\"druid\",{\"0\":{\"1143\":1,\"8252\":1},\"1\":{\"88\":1,\"969\":1,\"978\":1,\"981\":1,\"1005\":1,\"1008\":1,\"1177\":3,\"1200\":1,\"1206\":1,\"1219\":1,\"1364\":1,\"8247\":1,\"8260\":2,\"8262\":1,\"8324\":1}}],[\"dd\",{\"1\":{\"486\":1,\"936\":1,\"939\":1,\"952\":7,\"1638\":1,\"1722\":1,\"1723\":1,\"1725\":1,\"1727\":1,\"2407\":3,\"2410\":1,\"2413\":1,\"2422\":1,\"2426\":2,\"2429\":2,\"2433\":2,\"2436\":1,\"4509\":1,\"6070\":1,\"7634\":3,\"7956\":1,\"7970\":1,\"7991\":1}}],[\"deactivation\",{\"1\":{\"8600\":1}}],[\"dead\",{\"1\":{\"1480\":3,\"1494\":1}}],[\"declaredconstructors\",{\"1\":{\"7128\":2}}],[\"declaredmethods\",{\"1\":{\"7097\":2,\"7106\":2}}],[\"declaredfields\",{\"1\":{\"7078\":2,\"7086\":2}}],[\"decimal\",{\"1\":{\"1338\":1,\"1340\":1,\"1342\":1,\"1350\":1,\"1352\":1,\"1354\":1,\"1894\":2}}],[\"delivered\",{\"1\":{\"4824\":1}}],[\"delete语句\",{\"1\":{\"8361\":1}}],[\"deleteifexists\",{\"1\":{\"6620\":1}}],[\"deleted`\",{\"1\":{\"1338\":1,\"1340\":1,\"1342\":1,\"1344\":1,\"1348\":1}}],[\"deletemapping\",{\"1\":{\"1276\":1,\"1299\":1}}],[\"deletebyid\",{\"1\":{\"1224\":1,\"1265\":1,\"8205\":1,\"8207\":1,\"8210\":1}}],[\"delete\",{\"0\":{\"1585\":1,\"2020\":1},\"1\":{\"1224\":1,\"1263\":1,\"1265\":1,\"1276\":2,\"1299\":2,\"1589\":2,\"2022\":4,\"6619\":1,\"7991\":1,\"8091\":1,\"8167\":1,\"8207\":1,\"8383\":1,\"8806\":2}}],[\"demo6的doget方法都被执行了\",{\"1\":{\"9123\":1}}],[\"demo6\",{\"1\":{\"9122\":1,\"9124\":3,\"9126\":1}}],[\"demo5转发到\",{\"1\":{\"9126\":1}}],[\"demo5和\",{\"1\":{\"9123\":1}}],[\"demo5\",{\"1\":{\"9121\":1,\"9122\":1,\"9124\":2,\"9126\":1}}],[\"demo3\",{\"1\":{\"8943\":1,\"8944\":4,\"8988\":1}}],[\"demo2\",{\"1\":{\"8809\":1,\"9143\":1,\"9145\":1,\"9147\":1,\"9174\":1}}],[\"demo项目\",{\"1\":{\"8721\":1}}],[\"demo可以找到部署在tomcat服务器上的web\",{\"1\":{\"8721\":1}}],[\"demo`\",{\"1\":{\"8719\":1}}],[\"demo1请求\",{\"1\":{\"8719\":1}}],[\"demo1\",{\"1\":{\"8707\":1,\"8710\":1,\"8768\":1,\"9078\":1,\"9079\":1,\"9084\":1,\"9143\":1}}],[\"demo是我创建的项目名\",{\"1\":{\"6132\":1}}],[\"demo\",{\"1\":{\"1946\":2,\"6132\":3,\"6136\":2,\"8704\":1,\"8719\":1,\"8817\":1,\"8834\":1,\"8843\":1,\"8848\":1,\"8854\":1,\"8857\":1,\"9025\":1}}],[\"defaultwriteconcern\",{\"1\":{\"10588\":1}}],[\"defaultservlet是用来处理静态资源\",{\"1\":{\"8862\":1}}],[\"defaultservlet的覆盖\",{\"1\":{\"8861\":1}}],[\"defaultservlet\",{\"1\":{\"8858\":1}}],[\"defaultcharbuffersize\",{\"1\":{\"6331\":1,\"6334\":1}}],[\"default结构是可选的\",{\"1\":{\"3370\":1}}],[\"default`\",{\"1\":{\"1348\":1}}],[\"default\",{\"1\":{\"1334\":2,\"1336\":3,\"1338\":6,\"1340\":6,\"1342\":5,\"1344\":3,\"1346\":6,\"1348\":11,\"1350\":8,\"1352\":9,\"1354\":7,\"3360\":1,\"3370\":1,\"3374\":1,\"3841\":1,\"4523\":2,\"4528\":1,\"4916\":1,\"4918\":2,\"4928\":1,\"5060\":1,\"5885\":1,\"5887\":1,\"6325\":1,\"7568\":1,\"7572\":1,\"8837\":4,\"9895\":1,\"10526\":1,\"10585\":1}}],[\"detail`\",{\"1\":{\"1354\":1}}],[\"detail\",{\"0\":{\"1353\":1},\"1\":{\"1331\":1}}],[\"des\",{\"1\":{\"6297\":2}}],[\"desfile\",{\"1\":{\"6297\":2,\"6353\":2}}],[\"descriptors\",{\"1\":{\"8569\":1}}],[\"description\",{\"1\":{\"985\":1,\"1211\":1}}],[\"desc\",{\"1\":{\"4553\":3,\"10703\":1}}],[\"destination\",{\"1\":{\"10162\":1,\"10496\":1}}],[\"destroy\",{\"0\":{\"8773\":1},\"1\":{\"8764\":1,\"8777\":3,\"9270\":1}}],[\"destroy会在生命周期中被调用\",{\"1\":{\"8763\":1}}],[\"destroy线程会检测连接的间隔时间2\",{\"1\":{\"8310\":1}}],[\"destpath\",{\"1\":{\"6306\":2,\"6359\":2}}],[\"destfile\",{\"1\":{\"6287\":2,\"6306\":2}}],[\"dest\",{\"1\":{\"2015\":1,\"2512\":1,\"6616\":1,\"6621\":2,\"8969\":1}}],[\"desription\",{\"1\":{\"1208\":1}}],[\"depath=\",{\"1\":{\"10861\":1}}],[\"depedencies选项卡中\",{\"1\":{\"8700\":1}}],[\"dependencymanagement>\",{\"1\":{\"397\":1}}],[\"dependency>\",{\"1\":{\"397\":4,\"412\":5,\"446\":1,\"450\":1,\"550\":1,\"614\":1,\"642\":2,\"653\":1,\"967\":1,\"978\":3,\"1005\":3,\"1046\":1,\"1129\":1,\"1132\":1,\"1135\":1,\"1138\":1,\"1142\":1,\"1145\":1,\"1148\":1,\"1151\":1,\"1158\":1,\"1161\":1,\"1164\":1,\"1167\":1,\"1169\":1,\"1172\":2,\"1177\":10,\"1217\":1,\"1361\":9,\"9818\":1,\"10829\":1,\"10839\":1}}],[\"dependencies>\",{\"1\":{\"397\":1,\"412\":1,\"1177\":1,\"1217\":1,\"1361\":1}}],[\"dependencies<\",{\"1\":{\"394\":1,\"397\":1}}],[\"dependencies\",{\"0\":{\"395\":1},\"1\":{\"322\":1,\"324\":1,\"399\":1,\"400\":1}}],[\"deprecation\",{\"1\":{\"5048\":1,\"5050\":1}}],[\"deprecated\",{\"0\":{\"5035\":1},\"1\":{\"4893\":1,\"4902\":1,\"4951\":1,\"5036\":3,\"5037\":1,\"5060\":3}}],[\"deployment\",{\"0\":{\"8580\":1},\"1\":{\"1068\":1,\"1079\":1,\"8569\":1}}],[\"debug也可以启动\",{\"1\":{\"8621\":1}}],[\"debug\",{\"0\":{\"473\":1,\"612\":1,\"868\":1,\"8076\":1,\"8444\":1,\"9896\":1,\"10584\":1,\"10856\":1},\"1\":{\"882\":2,\"888\":2,\"894\":1,\"903\":2,\"907\":3,\"952\":6,\"955\":2,\"8578\":1,\"8604\":1,\"8610\":1,\"8621\":1}}],[\"devtool\",{\"0\":{\"1165\":1}}],[\"devtools\",{\"1\":{\"577\":1,\"581\":1,\"584\":1}}],[\"devtools<\",{\"1\":{\"550\":1,\"1167\":1,\"1177\":1}}],[\"dev<\",{\"1\":{\"862\":1}}],[\"devmvc\",{\"1\":{\"850\":1,\"853\":1,\"858\":1}}],[\"devredis\",{\"1\":{\"849\":1,\"853\":1,\"858\":1}}],[\"devdb\",{\"1\":{\"848\":1,\"853\":1,\"858\":1}}],[\"dev环境额外新增的配置\",{\"1\":{\"853\":1}}],[\"dev环境配置文件\",{\"1\":{\"837\":1}}],[\"dev环境\",{\"1\":{\"471\":1}}],[\"dev\",{\"0\":{\"10879\":1,\"10895\":1},\"1\":{\"471\":1,\"830\":1,\"837\":1,\"843\":1,\"853\":1,\"858\":2,\"952\":1,\"1119\":1}}],[\"development\",{\"1\":{\"117\":1,\"2846\":1}}],[\"3b994547\",{\"1\":{\"10726\":1}}],[\"38\",{\"1\":{\"7685\":1,\"7688\":1}}],[\"3get\",{\"0\":{\"7153\":1}}],[\"35\",{\"1\":{\"6692\":1}}],[\"358\",{\"1\":{\"1886\":1}}],[\"3ffe\",{\"1\":{\"6668\":1}}],[\"3f\",{\"1\":{\"4292\":1}}],[\"3=3\",{\"1\":{\"1914\":2,\"1917\":1,\"1918\":1,\"1920\":2,\"1923\":2,\"1926\":2}}],[\"3=\",{\"1\":{\"1912\":2,\"1915\":2,\"1918\":1,\"1921\":2,\"1924\":2,\"1927\":2}}],[\"3=4\",{\"1\":{\"1911\":1,\"1917\":1}}],[\"30cee1936861\",{\"1\":{\"10726\":1}}],[\"306z\",{\"1\":{\"10576\":1}}],[\"3062446\",{\"1\":{\"10498\":1}}],[\"30000\",{\"1\":{\"10541\":1}}],[\"3019275\",{\"1\":{\"10164\":1}}],[\"30分钟就会自动掉线\",{\"1\":{\"9783\":1}}],[\"30分钟\",{\"1\":{\"9783\":1}}],[\"302\",{\"1\":{\"9139\":1,\"9143\":1}}],[\"302585092994046\",{\"1\":{\"1832\":1}}],[\"30亿都在北美\",{\"1\":{\"6666\":1}}],[\"30\",{\"1\":{\"1805\":1,\"2244\":2,\"5967\":1,\"10583\":2}}],[\"345=bb\",{\"1\":{\"5901\":1}}],[\"345\",{\"1\":{\"5901\":1}}],[\"34\",{\"1\":{\"1682\":1,\"1899\":1,\"1911\":1,\"1912\":1,\"1917\":1,\"1921\":1,\"4256\":1,\"7493\":1,\"7670\":2}}],[\"3784\",{\"1\":{\"10554\":1}}],[\"37才支持批处理\",{\"1\":{\"8118\":1}}],[\"37\",{\"1\":{\"1660\":3}}],[\"33\",{\"1\":{\"1914\":1,\"1915\":1,\"1918\":1,\"1920\":1,\"1923\":1,\"1924\":1,\"1926\":1,\"1927\":1,\"5790\":2}}],[\"333\",{\"1\":{\"1657\":1}}],[\"3388685877147921107l\",{\"1\":{\"1542\":1}}],[\"3306\",{\"1\":{\"969\":1,\"981\":1,\"995\":1,\"1008\":1,\"1206\":1,\"1364\":1,\"7846\":1,\"7852\":1,\"7862\":1,\"7865\":1,\"7871\":1,\"8263\":1,\"8272\":1}}],[\"3已派送\",{\"1\":{\"1352\":1}}],[\"3201\",{\"1\":{\"6668\":1}}],[\"321\",{\"1\":{\"2314\":2,\"2858\":1}}],[\"328000000\",{\"1\":{\"1654\":1}}],[\"32\",{\"1\":{\"1334\":2,\"1340\":1,\"1342\":3,\"1348\":3,\"5790\":1,\"5913\":1,\"7697\":1,\"9847\":1,\"9895\":1}}],[\"3190675085212945\",{\"1\":{\"1805\":1}}],[\"31\",{\"1\":{\"1029\":1,\"1866\":1,\"2345\":1,\"2802\":1,\"6700\":1}}],[\"31+08\",{\"1\":{\"486\":1}}],[\"3mb\",{\"1\":{\"936\":1}}],[\"3级常用于项目经理进行整体项目属性调控\",{\"1\":{\"795\":1}}],[\"3级与4级用于系统开发阶段设置通用属性\",{\"1\":{\"795\":1}}],[\"3级\",{\"1\":{\"790\":1,\"797\":1}}],[\"3\",{\"0\":{\"116\":1,\"294\":1,\"326\":1,\"351\":1,\"366\":1,\"376\":1,\"395\":1,\"417\":1,\"431\":1,\"448\":1,\"460\":1,\"487\":1,\"509\":1,\"515\":1,\"517\":1,\"520\":2,\"547\":1,\"549\":1,\"551\":1,\"554\":2,\"564\":1,\"601\":1,\"605\":1,\"608\":1,\"610\":1,\"632\":1,\"646\":1,\"648\":1,\"658\":1,\"683\":1,\"695\":1,\"699\":1,\"701\":1,\"733\":1,\"755\":1,\"760\":1,\"774\":1,\"800\":1,\"812\":1,\"815\":2,\"860\":1,\"863\":1,\"866\":1,\"868\":2,\"870\":1,\"883\":1,\"902\":1,\"915\":1,\"934\":1,\"951\":1,\"956\":1,\"982\":1,\"984\":1,\"986\":1,\"989\":2,\"1009\":1,\"1011\":1,\"1014\":1,\"1017\":1,\"1075\":1,\"1091\":1,\"1110\":1,\"1133\":1,\"1146\":1,\"1165\":1,\"1178\":1,\"1207\":1,\"1218\":1,\"1220\":1,\"1223\":1,\"1225\":2,\"1240\":1,\"1249\":1,\"1266\":1,\"1280\":1,\"1291\":1,\"1337\":1,\"1359\":1,\"1377\":1,\"1425\":1,\"1436\":1,\"1450\":1,\"1468\":1,\"1492\":1,\"1516\":1,\"1525\":1,\"1543\":1,\"1560\":1,\"1585\":1,\"1605\":1,\"1621\":1,\"1643\":1,\"1649\":1,\"1677\":1,\"1697\":1,\"1703\":1,\"1706\":1,\"1737\":1,\"1755\":1,\"1772\":1,\"1786\":1,\"1787\":1,\"1789\":1,\"1806\":1,\"1854\":1,\"1890\":1,\"1954\":1,\"1983\":1,\"2007\":1,\"2053\":1,\"2056\":1,\"2100\":1,\"2138\":1,\"2148\":1,\"2179\":1,\"2189\":1,\"2229\":1,\"2264\":1,\"2308\":1,\"2337\":1,\"2366\":1,\"2392\":1,\"2408\":1,\"2466\":1,\"2488\":1,\"2547\":1,\"2593\":1,\"2637\":1,\"2698\":1,\"2742\":1,\"2794\":1,\"2812\":1,\"2848\":1,\"2855\":1,\"2856\":1,\"2859\":1,\"2878\":1,\"2897\":1,\"2900\":1,\"2901\":1,\"2905\":1,\"2907\":2,\"2921\":1,\"2933\":1,\"2968\":1,\"3002\":1,\"3003\":1,\"3006\":1,\"3009\":2,\"3053\":1,\"3078\":1,\"3092\":1,\"3119\":1,\"3143\":1,\"3161\":1,\"3163\":1,\"3186\":1,\"3213\":1,\"3235\":1,\"3256\":1,\"3271\":1,\"3294\":1,\"3305\":1,\"3323\":1,\"3347\":1,\"3352\":1,\"3371\":1,\"3406\":1,\"3421\":1,\"3437\":1,\"3456\":1,\"3467\":1,\"3501\":1,\"3524\":1,\"3546\":1,\"3561\":1,\"3605\":1,\"3625\":1,\"3705\":1,\"3730\":1,\"3766\":1,\"3777\":1,\"3779\":1,\"3784\":1,\"3804\":1,\"3807\":1,\"3822\":1,\"3827\":1,\"3842\":1,\"3864\":1,\"3899\":1,\"3925\":1,\"3948\":1,\"3977\":1,\"3988\":1,\"4008\":1,\"4037\":1,\"4053\":1,\"4058\":1,\"4084\":1,\"4089\":1,\"4093\":1,\"4095\":1,\"4097\":2,\"4101\":1,\"4131\":1,\"4134\":1,\"4149\":1,\"4182\":1,\"4197\":1,\"4218\":1,\"4219\":1,\"4228\":1,\"4233\":2,\"4242\":1,\"4246\":1,\"4257\":1,\"4268\":1,\"4305\":1,\"4320\":1,\"4354\":1,\"4355\":1,\"4357\":1,\"4365\":1,\"4384\":1,\"4395\":1,\"4423\":1,\"4452\":1,\"4485\":1,\"4533\":1,\"4551\":1,\"4554\":1,\"4561\":1,\"4580\":1,\"4606\":1,\"4609\":1,\"4643\":1,\"4648\":1,\"4659\":1,\"4662\":1,\"4671\":1,\"4689\":1,\"4694\":1,\"4704\":1,\"4711\":1,\"4713\":1,\"4715\":1,\"4725\":2,\"4733\":1,\"4765\":1,\"4776\":1,\"4796\":1,\"4814\":1,\"4828\":1,\"4855\":1,\"4898\":1,\"4919\":1,\"4920\":1,\"4924\":1,\"4926\":2,\"4929\":1,\"4962\":1,\"4986\":1,\"4990\":1,\"4997\":1,\"5041\":1,\"5044\":1,\"5046\":1,\"5049\":2,\"5077\":1,\"5119\":1,\"5125\":1,\"5149\":1,\"5171\":1,\"5183\":1,\"5186\":1,\"5190\":1,\"5240\":1,\"5271\":1,\"5273\":1,\"5274\":1,\"5278\":1,\"5281\":2,\"5284\":1,\"5301\":1,\"5328\":1,\"5346\":1,\"5351\":1,\"5364\":1,\"5382\":1,\"5385\":1,\"5390\":1,\"5392\":2,\"5415\":1,\"5423\":1,\"5448\":1,\"5478\":1,\"5500\":1,\"5527\":1,\"5552\":1,\"5565\":1,\"5575\":1,\"5585\":1,\"5593\":1,\"5612\":1,\"5640\":1,\"5651\":1,\"5670\":1,\"5673\":1,\"5674\":1,\"5677\":1,\"5695\":1,\"5700\":1,\"5704\":1,\"5740\":1,\"5754\":1,\"5791\":1,\"5812\":1,\"5813\":1,\"5823\":1,\"5829\":2,\"5835\":1,\"5838\":1,\"5865\":1,\"5882\":1,\"5925\":1,\"5949\":1,\"5951\":1,\"5953\":1,\"5971\":1,\"5995\":1,\"6002\":1,\"6023\":1,\"6038\":1,\"6050\":1,\"6058\":1,\"6071\":1,\"6074\":1,\"6076\":1,\"6079\":1,\"6082\":2,\"6093\":1,\"6101\":1,\"6114\":1,\"6137\":1,\"6156\":1,\"6186\":1,\"6205\":1,\"6244\":1,\"6250\":1,\"6261\":1,\"6279\":1,\"6284\":1,\"6304\":1,\"6329\":1,\"6349\":1,\"6370\":1,\"6389\":1,\"6390\":1,\"6392\":1,\"6395\":2,\"6405\":1,\"6423\":1,\"6444\":1,\"6478\":1,\"6502\":1,\"6506\":1,\"6512\":1,\"6540\":1,\"6541\":1,\"6544\":1,\"6547\":2,\"6550\":1,\"6572\":1,\"6590\":1,\"6592\":1,\"6595\":1,\"6651\":1,\"6673\":1,\"6704\":1,\"6712\":1,\"6730\":1,\"6766\":1,\"6767\":1,\"6770\":1,\"6798\":1,\"6800\":1,\"6802\":1,\"6818\":1,\"6839\":1,\"6873\":1,\"6931\":1,\"6959\":1,\"6970\":1,\"6998\":1,\"7005\":1,\"7017\":1,\"7044\":1,\"7066\":1,\"7084\":1,\"7133\":1,\"7170\":1,\"7177\":1,\"7210\":1,\"7228\":1,\"7254\":1,\"7255\":1,\"7257\":1,\"7267\":2,\"7269\":1,\"7280\":1,\"7305\":1,\"7318\":1,\"7341\":1,\"7378\":1,\"7394\":1,\"7417\":1,\"7445\":1,\"7477\":1,\"7479\":1,\"7481\":1,\"7506\":1,\"7509\":1,\"7511\":1,\"7549\":1,\"7581\":1,\"7603\":1,\"7620\":1,\"7641\":1,\"7651\":1,\"7652\":1,\"7656\":1,\"7659\":2,\"7663\":1,\"7681\":1,\"7735\":1,\"7747\":1,\"7757\":1,\"7758\":1,\"7761\":1,\"7777\":1,\"7797\":1,\"7801\":1,\"7803\":1,\"7805\":2,\"7821\":1,\"7847\":1,\"7860\":1,\"7874\":1,\"7877\":1,\"7887\":1,\"7888\":1,\"7890\":1,\"7930\":1,\"7979\":1,\"7988\":1,\"8003\":1,\"8006\":1,\"8007\":1,\"8010\":1,\"8052\":1,\"8055\":1,\"8057\":1,\"8060\":2,\"8076\":1,\"8100\":1,\"8106\":1,\"8137\":1,\"8144\":1,\"8145\":1,\"8147\":1,\"8149\":1,\"8152\":1,\"8154\":1,\"8171\":1,\"8193\":1,\"8208\":1,\"8232\":1,\"8261\":1,\"8334\":1,\"8384\":1,\"8404\":1,\"8430\":1,\"8453\":1,\"8467\":1,\"8472\":1,\"8541\":1,\"8545\":1,\"8546\":1,\"8551\":1,\"8553\":2,\"8565\":1,\"8590\":1,\"8615\":1,\"8625\":1,\"8665\":1,\"8678\":1,\"8686\":1,\"8705\":1,\"8726\":1,\"8739\":1,\"8743\":2,\"8758\":1,\"8773\":1,\"8795\":1,\"8825\":1,\"8835\":1,\"8849\":1,\"8868\":1,\"8893\":1,\"8913\":1,\"8923\":1,\"8952\":1,\"8986\":1,\"8987\":1,\"8989\":1,\"9005\":1,\"9016\":1,\"9022\":1,\"9023\":1,\"9026\":1,\"9047\":1,\"9055\":1,\"9066\":1,\"9080\":1,\"9100\":1,\"9102\":1,\"9113\":1,\"9140\":1,\"9142\":1,\"9144\":1,\"9146\":2,\"9175\":1,\"9186\":1,\"9218\":1,\"9233\":1,\"9261\":1,\"9287\":1,\"9322\":1,\"9349\":1,\"9453\":1,\"9472\":1,\"9514\":1,\"9526\":1,\"9550\":1,\"9565\":1,\"9582\":1,\"9586\":1,\"9600\":1,\"9629\":1,\"9630\":1,\"9632\":1,\"9634\":2,\"9660\":1,\"9685\":1,\"9691\":1,\"9692\":1,\"9694\":1,\"9706\":1,\"9748\":1,\"9756\":1,\"9803\":1,\"9819\":1,\"9836\":1,\"9855\":1,\"9887\":1,\"9908\":1,\"9914\":1,\"9924\":1,\"9970\":1,\"10019\":1,\"10027\":1,\"10032\":1,\"10039\":2,\"10080\":1,\"10137\":1,\"10140\":1,\"10146\":1,\"10160\":1,\"10171\":1,\"10191\":1,\"10217\":1,\"10237\":1,\"10253\":1,\"10267\":1,\"10291\":1,\"10312\":1,\"10334\":1,\"10352\":1,\"10370\":1,\"10397\":1,\"10407\":1,\"10409\":1,\"10412\":1,\"10423\":1,\"10443\":1,\"10459\":1,\"10482\":1,\"10504\":1,\"10522\":1,\"10584\":1,\"10589\":1,\"10620\":1,\"10623\":1,\"10625\":1,\"10634\":1,\"10644\":1,\"10645\":1,\"10648\":1,\"10650\":2,\"10662\":1,\"10699\":1,\"10715\":1,\"10719\":1,\"10758\":2,\"10767\":1,\"10768\":1,\"10771\":1,\"10781\":1,\"10793\":1,\"10817\":1,\"10831\":1,\"10838\":1,\"10877\":1,\"10882\":1,\"10888\":1,\"10894\":1},\"1\":{\"330\":1,\"375\":1,\"412\":2,\"486\":1,\"714\":1,\"734\":2,\"777\":1,\"826\":2,\"911\":1,\"994\":1,\"1032\":1,\"1063\":1,\"1074\":1,\"1421\":1,\"1435\":1,\"1438\":1,\"1657\":1,\"1716\":2,\"1717\":2,\"1719\":1,\"1769\":1,\"1773\":5,\"1791\":4,\"1816\":1,\"1817\":1,\"1823\":1,\"1825\":1,\"1832\":1,\"1899\":2,\"1911\":2,\"1912\":1,\"1915\":2,\"1918\":1,\"1919\":1,\"1921\":1,\"1924\":2,\"1927\":2,\"1946\":1,\"2048\":2,\"2105\":1,\"2224\":1,\"2262\":1,\"2354\":2,\"2362\":2,\"2365\":3,\"2370\":2,\"2375\":3,\"2379\":2,\"2461\":1,\"2465\":1,\"2469\":2,\"2484\":3,\"2487\":5,\"2492\":4,\"2495\":3,\"2500\":1,\"2505\":1,\"2508\":1,\"2512\":3,\"2549\":1,\"2569\":1,\"2609\":1,\"2683\":1,\"2692\":2,\"2697\":3,\"2875\":1,\"2920\":1,\"2962\":1,\"2983\":1,\"3104\":1,\"3152\":1,\"3173\":1,\"3176\":1,\"3302\":1,\"3374\":1,\"3499\":1,\"3500\":3,\"3504\":1,\"3512\":1,\"3527\":1,\"3541\":4,\"3545\":1,\"3550\":1,\"3556\":2,\"3560\":3,\"3563\":4,\"3567\":2,\"3588\":1,\"3591\":1,\"3754\":1,\"3843\":1,\"4061\":2,\"4063\":1,\"4270\":1,\"4281\":1,\"4292\":1,\"4422\":1,\"4425\":1,\"4520\":1,\"4693\":1,\"4700\":1,\"4709\":1,\"4714\":1,\"4741\":2,\"4750\":2,\"4751\":1,\"4775\":1,\"4843\":1,\"5185\":1,\"5235\":1,\"5263\":1,\"5294\":1,\"5350\":1,\"5426\":1,\"5486\":1,\"5517\":1,\"5597\":1,\"5614\":1,\"5873\":1,\"5927\":1,\"5967\":5,\"5970\":1,\"6094\":1,\"6178\":1,\"6189\":1,\"6251\":1,\"6285\":1,\"6287\":1,\"6306\":2,\"6353\":1,\"6398\":1,\"6411\":1,\"6430\":1,\"6483\":1,\"6487\":1,\"6516\":1,\"6526\":1,\"6555\":1,\"6557\":1,\"6571\":1,\"6573\":1,\"6748\":1,\"6754\":1,\"6803\":1,\"6819\":1,\"6949\":1,\"6962\":1,\"7009\":1,\"7038\":1,\"7043\":1,\"7091\":1,\"7106\":1,\"7146\":1,\"7161\":1,\"7179\":1,\"7428\":1,\"7438\":1,\"7575\":1,\"7583\":2,\"7623\":1,\"7626\":1,\"7628\":1,\"7655\":1,\"7708\":1,\"7712\":1,\"7804\":1,\"7830\":1,\"7852\":1,\"7862\":1,\"7865\":2,\"7873\":1,\"7882\":1,\"7886\":1,\"7896\":1,\"7947\":1,\"7956\":1,\"7970\":2,\"7975\":1,\"7980\":1,\"7989\":1,\"7991\":1,\"8031\":2,\"8032\":1,\"8037\":2,\"8045\":4,\"8054\":4,\"8084\":2,\"8089\":1,\"8121\":1,\"8126\":1,\"8146\":1,\"8148\":1,\"8158\":1,\"8162\":1,\"8201\":2,\"8205\":1,\"8207\":1,\"8210\":1,\"8260\":1,\"8383\":1,\"8443\":1,\"8535\":1,\"8617\":1,\"8669\":1,\"8701\":1,\"8717\":1,\"8735\":1,\"8738\":2,\"8742\":1,\"8791\":2,\"8842\":1,\"8845\":1,\"8851\":2,\"8856\":2,\"8874\":1,\"8905\":1,\"8920\":2,\"8928\":1,\"8976\":1,\"9012\":2,\"9015\":1,\"9018\":1,\"9027\":1,\"9038\":1,\"9060\":1,\"9064\":1,\"9095\":1,\"9101\":1,\"9109\":1,\"9131\":1,\"9575\":1,\"9695\":1,\"9913\":1,\"9923\":1,\"9975\":2,\"9987\":1,\"9991\":1,\"9993\":1,\"10002\":1,\"10006\":1,\"10008\":1,\"10102\":2,\"10190\":1,\"10193\":1,\"10467\":1,\"10521\":1,\"10576\":1,\"10747\":1,\"10750\":1,\"10809\":1}}],[\"软件安装目录\",{\"1\":{\"10483\":1}}],[\"软件基金会\",{\"1\":{\"9837\":1}}],[\"软件\",{\"1\":{\"6643\":1}}],[\"软件就会显得很卡\",{\"1\":{\"5108\":1}}],[\"软件=程序+文档=数据结构+算法+文档\",{\"1\":{\"5066\":1}}],[\"软件是为了完成特定的功能\",{\"1\":{\"5066\":1,\"5067\":1}}],[\"软件运行方式\",{\"0\":{\"2829\":1}}],[\"软件环境\",{\"0\":{\"116\":1}}],[\"软件环境搭建\",{\"1\":{\"115\":1}}],[\"软件开发流程\",{\"0\":{\"106\":1}}],[\"软件开发介绍\",{\"0\":{\"105\":1}}],[\"技术\",{\"1\":{\"7794\":1}}],[\"技术选型\",{\"0\":{\"1389\":1}}],[\"技术选型等\",{\"1\":{\"112\":1}}],[\"技术栈的核心\",{\"1\":{\"9834\":1}}],[\"技术栈\",{\"1\":{\"1304\":1}}],[\"技术栈导航\",{\"0\":{\"3\":1}}],[\"2ck23\",{\"1\":{\"10711\":1}}],[\"240z\",{\"1\":{\"10583\":1}}],[\"24\",{\"1\":{\"10576\":1}}],[\"247\",{\"1\":{\"6700\":1}}],[\"2>\",{\"1\":{\"10261\":1}}],[\"2通过resultsetmetadata获取结果集中的列数\",{\"1\":{\"8054\":1}}],[\"2将数据封装为一个对象\",{\"1\":{\"8037\":1}}],[\"2getdeclaredfield\",{\"0\":{\"7150\":1}}],[\"2在java\",{\"1\":{\"6596\":1}}],[\"2为了弥补这种不足\",{\"1\":{\"6593\":1}}],[\"2^30\",{\"1\":{\"5886\":1}}],[\"2l\",{\"1\":{\"5033\":1}}],[\"2字节\",{\"1\":{\"3113\":1}}],[\"2种\",{\"0\":{\"3085\":1}}],[\"2个\",{\"1\":{\"3795\":1}}],[\"2个参数\",{\"1\":{\"2534\":1,\"2541\":1}}],[\"2个字节的unicode码\",{\"1\":{\"2040\":1}}],[\"2~36\",{\"1\":{\"2341\":1,\"2798\":1}}],[\"26\",{\"1\":{\"1725\":1,\"1727\":1,\"10554\":6}}],[\"210\",{\"1\":{\"6692\":1}}],[\"2113\",{\"1\":{\"4256\":1}}],[\"21323232323232332323\",{\"1\":{\"3173\":1}}],[\"21\",{\"1\":{\"1657\":7,\"1716\":1,\"1881\":1,\"4227\":2,\"4229\":2,\"7763\":1,\"8089\":1}}],[\"29\",{\"1\":{\"1654\":1}}],[\"2ms\",{\"1\":{\"1565\":1}}],[\"28956\",{\"1\":{\"1892\":1}}],[\"28\",{\"1\":{\"1502\":1,\"1506\":1}}],[\"23cx\",{\"1\":{\"10766\":1,\"10816\":1,\"10846\":1}}],[\"23d23\",{\"1\":{\"10734\":1}}],[\"2333\",{\"1\":{\"6803\":1,\"6819\":1}}],[\"2302323\",{\"1\":{\"3176\":2}}],[\"2321e12\",{\"1\":{\"3100\":1}}],[\"23f\",{\"1\":{\"3100\":1}}],[\"234\",{\"1\":{\"1886\":1,\"1889\":1,\"1892\":1}}],[\"2345\",{\"1\":{\"628\":1}}],[\"23\",{\"1\":{\"1657\":2,\"1773\":2,\"1791\":2,\"3100\":2,\"4274\":1,\"5913\":1,\"6483\":1,\"6571\":2,\"7471\":1,\"7493\":1,\"8385\":1,\"8387\":1,\"8389\":1,\"10576\":1}}],[\"23<\",{\"1\":{\"1361\":1}}],[\"2支付宝\",{\"1\":{\"1352\":1}}],[\"2待派送\",{\"1\":{\"1352\":1}}],[\"25t15\",{\"1\":{\"10576\":6,\"10583\":2}}],[\"25t14\",{\"1\":{\"10554\":11}}],[\"256\",{\"1\":{\"9642\":1}}],[\"25\",{\"1\":{\"1648\":2,\"9895\":1}}],[\"255byte\",{\"1\":{\"8069\":1}}],[\"255\",{\"1\":{\"1340\":1,\"1352\":4,\"2039\":1,\"2042\":1,\"6460\":1,\"6666\":1,\"6672\":2}}],[\"25<\",{\"1\":{\"412\":2}}],[\"276z\",{\"1\":{\"10583\":1}}],[\"27019\",{\"1\":{\"10481\":1,\"10506\":1,\"10580\":1,\"10583\":1,\"10597\":1,\"10816\":1,\"10846\":1}}],[\"27018\",{\"1\":{\"10480\":1,\"10501\":1,\"10573\":1,\"10576\":1,\"10597\":1,\"10816\":1,\"10846\":1}}],[\"27017\",{\"1\":{\"10162\":1,\"10167\":1,\"10479\":1,\"10496\":1,\"10526\":1,\"10541\":1,\"10545\":1,\"10554\":1,\"10576\":1,\"10597\":1,\"10799\":1,\"10807\":1,\"10816\":1,\"10843\":1,\"10846\":1}}],[\"27\",{\"1\":{\"1122\":1,\"7824\":1,\"7832\":1,\"10554\":1,\"10583\":2}}],[\"2<\",{\"1\":{\"1005\":1,\"1151\":1,\"1177\":1,\"1361\":1}}],[\"2级\",{\"1\":{\"791\":1,\"798\":1}}],[\"20tb\",{\"1\":{\"9843\":1}}],[\"20个\",{\"1\":{\"9736\":1}}],[\"2014\",{\"1\":{\"7317\":1}}],[\"2011年初已经用尽\",{\"1\":{\"6666\":1}}],[\"2019\",{\"1\":{\"1719\":1,\"7316\":1,\"10264\":2,\"10290\":1}}],[\"2019年2月18日\",{\"1\":{\"1719\":1}}],[\"2018\",{\"1\":{\"486\":2}}],[\"20<\",{\"1\":{\"1361\":1}}],[\"20\",{\"1\":{\"1334\":3,\"1336\":3,\"1338\":4,\"1340\":4,\"1342\":3,\"1344\":4,\"1346\":1,\"1348\":4,\"1350\":4,\"1352\":3,\"1354\":4,\"1581\":1,\"1676\":2,\"1853\":1,\"1862\":1,\"2422\":2,\"3082\":1,\"3267\":1,\"3506\":1,\"3560\":1,\"3646\":2,\"3658\":1,\"3664\":1,\"3782\":2,\"3787\":1,\"4080\":2,\"4164\":2,\"4553\":1,\"4658\":2,\"5221\":1,\"5588\":1,\"5611\":1,\"5913\":1,\"5967\":1,\"5970\":2,\"6411\":1,\"6958\":2,\"6960\":2,\"7390\":2,\"7480\":1,\"7483\":1,\"7655\":4,\"7956\":1,\"8105\":1,\"8272\":2,\"8391\":1}}],[\"2020\",{\"1\":{\"1651\":2}}],[\"2022年3月3日\",{\"1\":{\"1714\":1,\"1715\":1,\"1719\":1}}],[\"2022\",{\"1\":{\"1648\":2,\"1654\":1,\"1657\":7,\"1660\":2,\"1673\":1,\"1676\":2,\"1682\":1,\"1705\":1,\"1707\":2,\"1716\":1,\"1725\":1,\"1727\":1}}],[\"2023\",{\"1\":{\"1122\":1,\"1660\":1,\"9895\":1,\"10554\":11,\"10576\":6,\"10583\":2}}],[\"20210318bcmf\",{\"1\":{\"9895\":1}}],[\"2021\",{\"1\":{\"1063\":1,\"7315\":1}}],[\"202\",{\"1\":{\"647\":1,\"6692\":1}}],[\"20mb\",{\"1\":{\"628\":1}}],[\"2001\",{\"1\":{\"9642\":1,\"9645\":1}}],[\"20000\",{\"1\":{\"8109\":1,\"8113\":1}}],[\"2000\",{\"1\":{\"5221\":1,\"9717\":1,\"10357\":1,\"10541\":1,\"10554\":1}}],[\"200\",{\"1\":{\"628\":1,\"1338\":1,\"1348\":1,\"3156\":1,\"4248\":2,\"6711\":1}}],[\"2218\",{\"1\":{\"10726\":1}}],[\"22026\",{\"1\":{\"1832\":1}}],[\"222\",{\"1\":{\"1651\":2}}],[\"225\",{\"1\":{\"981\":1,\"1008\":1,\"1021\":1,\"10580\":1,\"10583\":1,\"10597\":3,\"10799\":1,\"10807\":1,\"10816\":3,\"10843\":1,\"10846\":3}}],[\"22\",{\"1\":{\"397\":1,\"1651\":8,\"1705\":1,\"1707\":2,\"1717\":1,\"6078\":1,\"6081\":2,\"7655\":2}}],[\"2\",{\"0\":{\"108\":1,\"289\":1,\"299\":1,\"316\":1,\"348\":1,\"363\":1,\"373\":1,\"387\":1,\"389\":1,\"392\":2,\"395\":1,\"414\":1,\"426\":1,\"444\":1,\"458\":1,\"470\":1,\"485\":1,\"504\":1,\"517\":1,\"523\":1,\"534\":1,\"537\":1,\"541\":1,\"544\":2,\"551\":1,\"561\":1,\"575\":1,\"582\":1,\"585\":2,\"592\":1,\"594\":1,\"599\":2,\"601\":1,\"603\":1,\"610\":1,\"622\":1,\"629\":1,\"643\":1,\"648\":1,\"654\":1,\"691\":1,\"701\":1,\"710\":1,\"727\":1,\"753\":1,\"760\":1,\"772\":1,\"793\":1,\"807\":1,\"827\":1,\"840\":1,\"854\":1,\"856\":1,\"866\":1,\"880\":1,\"899\":1,\"912\":1,\"931\":1,\"946\":1,\"968\":1,\"970\":1,\"979\":1,\"986\":1,\"997\":1,\"1006\":1,\"1014\":1,\"1020\":1,\"1044\":1,\"1072\":1,\"1088\":1,\"1107\":1,\"1120\":1,\"1130\":1,\"1143\":1,\"1162\":1,\"1204\":1,\"1209\":1,\"1212\":1,\"1223\":1,\"1235\":1,\"1247\":1,\"1264\":1,\"1277\":1,\"1287\":1,\"1335\":1,\"1358\":1,\"1374\":1,\"1422\":1,\"1432\":1,\"1443\":1,\"1465\":1,\"1487\":1,\"1513\":1,\"1522\":1,\"1530\":1,\"1538\":1,\"1541\":1,\"1557\":1,\"1582\":1,\"1615\":1,\"1640\":1,\"1646\":1,\"1674\":1,\"1693\":1,\"1706\":1,\"1726\":1,\"1733\":1,\"1749\":1,\"1770\":1,\"1781\":1,\"1789\":1,\"1801\":1,\"1851\":1,\"1887\":1,\"1951\":1,\"1980\":1,\"2018\":1,\"2020\":1,\"2043\":1,\"2049\":1,\"2051\":2,\"2053\":1,\"2088\":1,\"2091\":1,\"2122\":1,\"2135\":1,\"2145\":1,\"2176\":1,\"2186\":1,\"2226\":1,\"2257\":1,\"2292\":1,\"2305\":1,\"2315\":1,\"2326\":1,\"2346\":2,\"2355\":1,\"2359\":1,\"2363\":2,\"2392\":1,\"2405\":1,\"2445\":1,\"2462\":1,\"2485\":1,\"2519\":1,\"2538\":1,\"2590\":1,\"2625\":1,\"2634\":1,\"2659\":1,\"2693\":1,\"2718\":1,\"2772\":1,\"2783\":1,\"2808\":1,\"2824\":1,\"2832\":1,\"2838\":1,\"2845\":1,\"2851\":1,\"2859\":1,\"2867\":1,\"2886\":1,\"2887\":1,\"2893\":2,\"2897\":1,\"2905\":1,\"2917\":1,\"2931\":1,\"2955\":1,\"3000\":1,\"3006\":1,\"3038\":1,\"3051\":1,\"3065\":1,\"3075\":1,\"3089\":1,\"3115\":1,\"3141\":1,\"3150\":1,\"3154\":1,\"3157\":2,\"3161\":1,\"3183\":1,\"3209\":1,\"3226\":1,\"3233\":1,\"3254\":1,\"3268\":1,\"3280\":1,\"3292\":1,\"3303\":1,\"3316\":1,\"3317\":1,\"3320\":2,\"3323\":1,\"3345\":1,\"3349\":1,\"3361\":1,\"3391\":1,\"3403\":1,\"3418\":1,\"3430\":1,\"3433\":1,\"3450\":1,\"3451\":1,\"3454\":2,\"3456\":1,\"3462\":1,\"3485\":1,\"3492\":1,\"3494\":1,\"3497\":2,\"3520\":1,\"3542\":1,\"3551\":1,\"3553\":1,\"3557\":2,\"3589\":1,\"3595\":1,\"3601\":1,\"3622\":1,\"3660\":1,\"3665\":2,\"3676\":1,\"3680\":1,\"3685\":2,\"3717\":1,\"3739\":1,\"3763\":1,\"3773\":1,\"3784\":1,\"3801\":1,\"3807\":1,\"3814\":1,\"3817\":1,\"3819\":2,\"3822\":1,\"3837\":1,\"3848\":1,\"3854\":1,\"3858\":1,\"3888\":1,\"3892\":1,\"3893\":1,\"3896\":2,\"3919\":1,\"3945\":1,\"3973\":1,\"3986\":1,\"3997\":1,\"4004\":1,\"4034\":1,\"4045\":1,\"4046\":1,\"4049\":2,\"4053\":1,\"4055\":1,\"4075\":1,\"4078\":1,\"4081\":2,\"4084\":1,\"4095\":1,\"4111\":1,\"4114\":1,\"4124\":1,\"4125\":1,\"4128\":2,\"4131\":1,\"4146\":1,\"4175\":1,\"4176\":1,\"4179\":2,\"4193\":1,\"4200\":1,\"4206\":1,\"4228\":1,\"4254\":1,\"4266\":1,\"4293\":1,\"4303\":1,\"4316\":1,\"4337\":1,\"4350\":1,\"4357\":1,\"4359\":1,\"4363\":1,\"4381\":1,\"4393\":1,\"4418\":1,\"4441\":1,\"4447\":1,\"4467\":1,\"4477\":1,\"4480\":1,\"4514\":1,\"4527\":1,\"4540\":1,\"4544\":1,\"4549\":1,\"4561\":1,\"4578\":1,\"4594\":1,\"4596\":1,\"4600\":2,\"4606\":1,\"4626\":1,\"4637\":1,\"4639\":1,\"4641\":2,\"4643\":1,\"4646\":1,\"4655\":1,\"4667\":1,\"4686\":1,\"4694\":1,\"4701\":1,\"4710\":1,\"4713\":1,\"4730\":1,\"4752\":1,\"4772\":1,\"4793\":1,\"4812\":1,\"4826\":1,\"4844\":1,\"4850\":1,\"4873\":1,\"4875\":1,\"4884\":1,\"4888\":1,\"4917\":1,\"4924\":1,\"4953\":1,\"4954\":1,\"4958\":2,\"4962\":1,\"4976\":1,\"4980\":1,\"4982\":2,\"4997\":1,\"5016\":1,\"5023\":1,\"5028\":1,\"5031\":2,\"5038\":1,\"5046\":1,\"5068\":1,\"5073\":1,\"5075\":2,\"5105\":1,\"5114\":1,\"5115\":1,\"5117\":2,\"5119\":1,\"5122\":1,\"5138\":1,\"5142\":1,\"5165\":1,\"5177\":1,\"5190\":1,\"5198\":1,\"5220\":1,\"5236\":1,\"5238\":1,\"5262\":1,\"5266\":1,\"5269\":2,\"5271\":1,\"5278\":1,\"5293\":1,\"5299\":1,\"5321\":1,\"5323\":1,\"5325\":2,\"5341\":1,\"5344\":1,\"5360\":1,\"5380\":1,\"5390\":1,\"5409\":1,\"5420\":1,\"5431\":1,\"5442\":1,\"5473\":1,\"5492\":1,\"5523\":1,\"5550\":1,\"5554\":1,\"5571\":1,\"5582\":1,\"5591\":1,\"5609\":1,\"5619\":1,\"5628\":1,\"5633\":1,\"5637\":2,\"5640\":1,\"5649\":1,\"5663\":1,\"5665\":1,\"5668\":2,\"5670\":1,\"5677\":1,\"5691\":1,\"5704\":1,\"5731\":1,\"5752\":1,\"5766\":1,\"5781\":1,\"5785\":1,\"5789\":2,\"5791\":1,\"5805\":1,\"5823\":1,\"5857\":1,\"5874\":1,\"5900\":1,\"5908\":1,\"5911\":1,\"5914\":2,\"5922\":1,\"5945\":1,\"5953\":1,\"5960\":1,\"5968\":1,\"5984\":1,\"5991\":1,\"5997\":1,\"5998\":1,\"6000\":2,\"6020\":1,\"6036\":1,\"6055\":1,\"6065\":1,\"6066\":1,\"6068\":2,\"6071\":1,\"6079\":1,\"6090\":1,\"6099\":1,\"6111\":1,\"6123\":1,\"6133\":1,\"6148\":1,\"6153\":1,\"6183\":1,\"6195\":1,\"6198\":1,\"6199\":1,\"6202\":2,\"6227\":1,\"6240\":1,\"6247\":1,\"6258\":1,\"6276\":1,\"6282\":1,\"6298\":1,\"6326\":1,\"6342\":1,\"6366\":1,\"6386\":1,\"6392\":1,\"6403\":1,\"6415\":1,\"6441\":1,\"6459\":1,\"6467\":1,\"6494\":1,\"6496\":1,\"6499\":2,\"6512\":1,\"6525\":1,\"6537\":1,\"6544\":1,\"6556\":1,\"6570\":1,\"6588\":2,\"6595\":1,\"6648\":1,\"6660\":1,\"6664\":1,\"6665\":1,\"6669\":2,\"6697\":1,\"6699\":1,\"6701\":2,\"6717\":1,\"6726\":1,\"6763\":1,\"6770\":1,\"6788\":1,\"6802\":1,\"6815\":1,\"6832\":1,\"6868\":1,\"6900\":1,\"6929\":1,\"6950\":1,\"6957\":1,\"6963\":1,\"6968\":1,\"6995\":1,\"7012\":1,\"7021\":1,\"7042\":1,\"7061\":1,\"7076\":1,\"7104\":1,\"7131\":1,\"7160\":1,\"7162\":1,\"7167\":2,\"7170\":1,\"7204\":1,\"7206\":1,\"7208\":2,\"7226\":1,\"7236\":1,\"7248\":1,\"7252\":2,\"7257\":1,\"7278\":1,\"7302\":1,\"7314\":1,\"7331\":1,\"7338\":1,\"7353\":1,\"7374\":1,\"7414\":1,\"7437\":1,\"7443\":1,\"7463\":1,\"7469\":1,\"7472\":1,\"7474\":2,\"7481\":1,\"7488\":1,\"7496\":1,\"7504\":1,\"7511\":1,\"7518\":1,\"7526\":1,\"7532\":1,\"7534\":1,\"7536\":2,\"7546\":1,\"7569\":1,\"7573\":1,\"7591\":1,\"7599\":1,\"7617\":1,\"7638\":1,\"7644\":1,\"7656\":1,\"7671\":1,\"7679\":1,\"7713\":1,\"7717\":1,\"7733\":1,\"7744\":1,\"7750\":1,\"7751\":1,\"7754\":2,\"7761\":1,\"7776\":1,\"7791\":1,\"7803\":1,\"7813\":1,\"7818\":1,\"7843\":1,\"7855\":1,\"7872\":1,\"7881\":1,\"7890\":1,\"7928\":1,\"7953\":1,\"7971\":1,\"7974\":1,\"7976\":2,\"7985\":1,\"7997\":1,\"7998\":1,\"8001\":2,\"8003\":1,\"8010\":1,\"8040\":1,\"8043\":1,\"8046\":1,\"8048\":2,\"8057\":1,\"8074\":1,\"8097\":1,\"8103\":1,\"8120\":1,\"8135\":1,\"8139\":1,\"8147\":1,\"8154\":1,\"8169\":1,\"8179\":1,\"8184\":1,\"8186\":1,\"8189\":2,\"8206\":1,\"8218\":1,\"8224\":1,\"8226\":1,\"8229\":2,\"8258\":1,\"8332\":1,\"8382\":1,\"8392\":1,\"8399\":1,\"8427\":1,\"8449\":1,\"8459\":1,\"8461\":1,\"8464\":2,\"8467\":1,\"8492\":1,\"8495\":1,\"8502\":2,\"8510\":2,\"8515\":1,\"8525\":1,\"8531\":1,\"8533\":1,\"8536\":2,\"8541\":1,\"8551\":1,\"8563\":1,\"8580\":1,\"8583\":1,\"8588\":2,\"8612\":1,\"8622\":1,\"8639\":1,\"8642\":1,\"8647\":1,\"8652\":2,\"8673\":1,\"8686\":1,\"8702\":1,\"8718\":1,\"8736\":1,\"8753\":1,\"8756\":1,\"8769\":1,\"8792\":1,\"8807\":1,\"8821\":1,\"8832\":1,\"8844\":1,\"8887\":1,\"8907\":1,\"8921\":1,\"8942\":1,\"8950\":1,\"8977\":1,\"8980\":1,\"8983\":2,\"8989\":1,\"9001\":1,\"9013\":1,\"9019\":1,\"9026\":1,\"9043\":1,\"9063\":1,\"9077\":1,\"9093\":1,\"9110\":1,\"9137\":1,\"9144\":1,\"9172\":1,\"9181\":1,\"9214\":1,\"9230\":1,\"9245\":1,\"9256\":1,\"9268\":1,\"9280\":1,\"9312\":1,\"9320\":1,\"9340\":1,\"9447\":1,\"9470\":1,\"9488\":1,\"9496\":1,\"9497\":1,\"9504\":2,\"9521\":1,\"9535\":1,\"9547\":1,\"9563\":1,\"9580\":1,\"9597\":1,\"9625\":1,\"9632\":1,\"9643\":1,\"9657\":1,\"9678\":1,\"9679\":1,\"9682\":2,\"9685\":1,\"9688\":1,\"9694\":1,\"9702\":1,\"9731\":1,\"9744\":1,\"9754\":1,\"9786\":1,\"9798\":1,\"9814\":1,\"9833\":1,\"9853\":1,\"9867\":1,\"9875\":1,\"9922\":1,\"9966\":1,\"10017\":1,\"10032\":1,\"10076\":1,\"10121\":1,\"10124\":1,\"10135\":1,\"10146\":1,\"10155\":1,\"10185\":1,\"10210\":1,\"10229\":1,\"10251\":1,\"10260\":1,\"10262\":1,\"10265\":2,\"10286\":1,\"10301\":1,\"10310\":1,\"10327\":1,\"10349\":1,\"10367\":1,\"10383\":1,\"10386\":1,\"10393\":2,\"10397\":1,\"10402\":1,\"10412\":1,\"10420\":1,\"10435\":1,\"10440\":1,\"10454\":1,\"10471\":2,\"10478\":1,\"10499\":1,\"10519\":1,\"10542\":1,\"10549\":1,\"10553\":1,\"10555\":2,\"10577\":1,\"10589\":1,\"10598\":1,\"10605\":1,\"10616\":1,\"10625\":1,\"10631\":1,\"10641\":1,\"10648\":1,\"10659\":1,\"10699\":1,\"10704\":1,\"10710\":1,\"10712\":2,\"10715\":1,\"10742\":1,\"10745\":1,\"10748\":2,\"10764\":1,\"10771\":1,\"10791\":1,\"10810\":1,\"10824\":1,\"10836\":1,\"10844\":1,\"10862\":1,\"10876\":1,\"10893\":1},\"1\":{\"305\":1,\"318\":2,\"321\":1,\"330\":1,\"333\":1,\"344\":1,\"393\":1,\"399\":1,\"400\":2,\"443\":1,\"465\":1,\"560\":1,\"563\":2,\"620\":4,\"734\":4,\"777\":1,\"882\":3,\"888\":2,\"955\":2,\"967\":1,\"978\":1,\"1005\":1,\"1016\":1,\"1071\":1,\"1087\":1,\"1090\":2,\"1123\":1,\"1145\":1,\"1169\":1,\"1177\":1,\"1241\":1,\"1334\":1,\"1336\":1,\"1338\":1,\"1340\":1,\"1342\":1,\"1346\":1,\"1350\":1,\"1352\":1,\"1354\":1,\"1361\":1,\"1455\":1,\"1480\":2,\"1561\":1,\"1651\":2,\"1719\":1,\"1769\":1,\"1773\":1,\"1808\":1,\"1814\":1,\"1820\":4,\"1823\":2,\"1825\":1,\"1832\":3,\"1899\":1,\"1907\":1,\"1916\":1,\"1946\":1,\"2031\":1,\"2105\":1,\"2223\":1,\"2225\":1,\"2261\":1,\"2345\":1,\"2354\":2,\"2362\":2,\"2365\":3,\"2370\":2,\"2375\":3,\"2379\":2,\"2461\":1,\"2465\":1,\"2469\":2,\"2484\":3,\"2487\":3,\"2495\":1,\"2508\":2,\"2512\":3,\"2515\":3,\"2555\":1,\"2683\":1,\"2692\":2,\"2697\":3,\"2802\":1,\"2866\":1,\"2868\":2,\"2875\":1,\"2920\":1,\"2962\":2,\"2983\":1,\"2993\":1,\"3082\":1,\"3091\":1,\"3094\":1,\"3234\":1,\"3253\":4,\"3273\":1,\"3284\":1,\"3374\":1,\"3389\":1,\"3393\":1,\"3405\":1,\"3420\":1,\"3457\":3,\"3496\":2,\"3499\":1,\"3500\":3,\"3512\":1,\"3519\":1,\"3538\":1,\"3541\":5,\"3544\":1,\"3545\":1,\"3556\":2,\"3560\":1,\"3563\":4,\"3567\":2,\"3588\":1,\"3591\":1,\"3686\":2,\"3716\":2,\"3843\":1,\"4061\":2,\"4063\":1,\"4106\":1,\"4154\":1,\"4205\":1,\"4267\":2,\"4270\":1,\"4422\":1,\"4425\":1,\"4479\":1,\"4517\":2,\"4520\":1,\"4591\":1,\"4631\":1,\"4638\":2,\"4670\":1,\"4700\":1,\"4749\":1,\"4751\":1,\"4843\":1,\"4946\":1,\"5178\":1,\"5185\":3,\"5193\":2,\"5235\":1,\"5263\":1,\"5350\":1,\"5356\":1,\"5426\":1,\"5486\":1,\"5517\":1,\"5553\":1,\"5588\":1,\"5614\":1,\"5864\":1,\"5871\":1,\"5927\":1,\"5961\":1,\"5967\":5,\"5970\":1,\"6054\":1,\"6078\":1,\"6081\":1,\"6094\":2,\"6157\":1,\"6170\":2,\"6178\":1,\"6182\":1,\"6185\":1,\"6251\":1,\"6285\":1,\"6287\":1,\"6306\":2,\"6353\":3,\"6411\":1,\"6424\":1,\"6483\":1,\"6487\":1,\"6516\":1,\"6543\":1,\"6555\":1,\"6557\":1,\"6571\":1,\"6573\":1,\"6589\":1,\"6659\":1,\"6678\":1,\"6681\":2,\"6754\":1,\"6803\":1,\"6819\":1,\"6949\":3,\"6960\":1,\"6962\":1,\"7038\":1,\"7043\":1,\"7054\":1,\"7086\":1,\"7087\":1,\"7090\":1,\"7106\":1,\"7111\":2,\"7146\":1,\"7161\":1,\"7179\":1,\"7373\":1,\"7377\":1,\"7438\":1,\"7575\":1,\"7583\":2,\"7590\":1,\"7612\":1,\"7616\":1,\"7655\":1,\"7708\":1,\"7712\":1,\"7723\":1,\"7802\":1,\"7820\":1,\"7825\":2,\"7830\":1,\"7833\":1,\"7852\":1,\"7862\":1,\"7865\":1,\"7873\":1,\"7896\":1,\"7947\":1,\"7952\":1,\"7956\":1,\"7970\":2,\"7975\":1,\"7980\":2,\"7989\":1,\"7991\":2,\"8037\":2,\"8045\":3,\"8054\":2,\"8084\":5,\"8089\":1,\"8121\":1,\"8126\":1,\"8146\":1,\"8148\":1,\"8157\":1,\"8162\":1,\"8201\":2,\"8205\":1,\"8207\":1,\"8210\":1,\"8235\":1,\"8260\":1,\"8418\":1,\"8431\":2,\"8443\":1,\"8514\":2,\"8519\":3,\"8535\":2,\"8540\":2,\"8544\":2,\"8555\":2,\"8701\":1,\"8717\":1,\"8735\":2,\"8738\":1,\"8742\":1,\"8817\":1,\"8845\":1,\"8905\":1,\"8976\":1,\"8990\":1,\"9025\":1,\"9027\":1,\"9095\":1,\"9099\":1,\"9101\":1,\"9131\":1,\"9325\":1,\"9549\":1,\"9562\":2,\"9575\":1,\"9578\":1,\"9677\":1,\"9693\":1,\"9818\":1,\"9878\":1,\"9923\":1,\"9988\":1,\"9990\":1,\"9993\":1,\"10003\":1,\"10005\":1,\"10008\":1,\"10129\":1,\"10167\":1,\"10193\":1,\"10264\":1,\"10290\":1,\"10333\":3,\"10379\":1,\"10394\":2,\"10399\":3,\"10401\":1,\"10446\":1,\"10458\":2,\"10467\":1,\"10512\":2,\"10518\":3,\"10521\":2,\"10554\":1,\"10576\":1,\"10583\":1,\"10588\":1,\"10597\":1,\"10618\":1,\"10747\":1,\"10750\":2,\"10800\":1}}],[\"1或\",{\"1\":{\"10403\":1}}],[\"1表示倒叙\",{\"1\":{\"10405\":1}}],[\"1表示正序\",{\"1\":{\"10405\":1}}],[\"1表示正序创建索引\",{\"1\":{\"10389\":1}}],[\"1表示降序创建索引\",{\"1\":{\"10389\":1}}],[\"1表示负数\",{\"1\":{\"3185\":1}}],[\"1>\",{\"1\":{\"10261\":1}}],[\"1编码是不支持中文的\",{\"1\":{\"9042\":1}}],[\"1获取结果集的元数据\",{\"1\":{\"8054\":1}}],[\"1参\",{\"0\":{\"7374\":1}}],[\"1b6d3586\",{\"1\":{\"5590\":1}}],[\"1的几率执行run方法\",{\"1\":{\"5387\":1}}],[\"1～n\",{\"1\":{\"4955\":1,\"4960\":1}}],[\"1~n\",{\"1\":{\"4949\":1,\"4952\":1,\"4956\":1}}],[\"15ef\",{\"1\":{\"10726\":1}}],[\"1521\",{\"1\":{\"8272\":1}}],[\"153\",{\"1\":{\"8272\":1}}],[\"15\",{\"1\":{\"5517\":1,\"10264\":1}}],[\"15db9742表示16进制内存地址\",{\"1\":{\"3563\":1}}],[\"15db9742\",{\"1\":{\"3563\":1,\"4253\":1}}],[\"1546\",{\"1\":{\"3457\":1}}],[\"159\",{\"1\":{\"1021\":1,\"10580\":1,\"10583\":1,\"10597\":3,\"10799\":1,\"10807\":1,\"10816\":3,\"10843\":1,\"10846\":3}}],[\"1个构造器中使用了\",{\"1\":{\"3904\":1}}],[\"1个\",{\"1\":{\"3726\":1,\"3795\":1}}],[\"1个参数\",{\"1\":{\"2533\":1,\"2540\":1}}],[\"1个starter往往包含了若干个相关联的依赖包\",{\"1\":{\"410\":1}}],[\"1为终点下标\",{\"1\":{\"2361\":1}}],[\"13\",{\"0\":{\"2447\":1,\"2622\":1},\"1\":{\"1963\":1,\"3457\":1,\"4281\":1,\"8047\":1,\"8210\":1}}],[\"1引入calendar类之后被弃用了\",{\"1\":{\"1616\":1}}],[\"1微信\",{\"1\":{\"1352\":1}}],[\"1待付款\",{\"1\":{\"1352\":1}}],[\"1是浮点数常量\",{\"1\":{\"3167\":1}}],[\"1是\",{\"1\":{\"1348\":1}}],[\"126\",{\"1\":{\"8210\":2}}],[\"127\",{\"1\":{\"6674\":1,\"6803\":1,\"6840\":1}}],[\"12=cc\",{\"1\":{\"5901\":1}}],[\"129\",{\"1\":{\"5779\":2}}],[\"1280\",{\"1\":{\"6668\":1}}],[\"128位\",{\"1\":{\"6667\":1}}],[\"128127时\",{\"1\":{\"4247\":1}}],[\"128127经常使用\",{\"1\":{\"4247\":1}}],[\"128\",{\"1\":{\"3176\":2}}],[\"12是个整数常量\",{\"1\":{\"3167\":1}}],[\"12e2\",{\"1\":{\"3091\":1}}],[\"1223\",{\"1\":{\"2747\":1,\"2756\":1,\"2760\":1}}],[\"121212000000014086253941059112548828125\",{\"1\":{\"1879\":1}}],[\"12121200000001408625394105911254882812555\",{\"1\":{\"1879\":3}}],[\"12433241123\",{\"1\":{\"1868\":1}}],[\"12\",{\"0\":{\"2441\":1,\"2443\":1,\"2445\":1,\"2619\":1},\"1\":{\"1286\":1,\"1348\":3,\"3090\":1,\"3167\":1,\"3173\":1,\"3237\":2,\"3253\":1,\"3273\":1,\"4281\":3,\"4292\":4,\"5779\":2,\"5790\":1,\"5901\":1,\"7670\":2,\"7694\":1,\"8056\":1}}],[\"123=aa\",{\"1\":{\"5901\":1}}],[\"123abc\",{\"1\":{\"5927\":1}}],[\"123ab\",{\"1\":{\"4298\":1}}],[\"123345\",{\"1\":{\"1881\":1}}],[\"123456\",{\"1\":{\"10703\":1}}],[\"12345\",{\"1\":{\"1879\":5}}],[\"1234\",{\"1\":{\"1364\":1,\"1524\":1,\"10718\":1,\"10734\":1,\"10799\":1,\"10843\":1,\"10846\":1}}],[\"12321654351\",{\"1\":{\"1286\":1}}],[\"123\",{\"1\":{\"486\":1,\"1299\":2,\"1486\":2,\"1886\":1,\"1889\":1,\"1892\":1,\"3176\":1,\"4274\":1,\"4295\":2,\"4718\":1,\"5588\":1,\"5590\":1,\"5611\":1,\"5650\":2,\"5660\":1,\"5669\":1,\"5779\":3,\"5901\":1,\"9184\":1}}],[\"116z\",{\"1\":{\"10554\":1}}],[\"113\",{\"1\":{\"6706\":1}}],[\"1139ms\",{\"1\":{\"1566\":1}}],[\"1111\",{\"1\":{\"3192\":2,\"3311\":6}}],[\"11111自动转为了十进制\",{\"1\":{\"2345\":1,\"2802\":1}}],[\"11111\",{\"1\":{\"2345\":1,\"2802\":1}}],[\"111\",{\"1\":{\"1502\":2,\"1506\":1,\"1889\":1}}],[\"1110\",{\"1\":{\"486\":1}}],[\"11\",{\"0\":{\"1353\":1,\"1833\":1,\"2437\":1,\"2616\":1},\"1\":{\"991\":1,\"1334\":2,\"1336\":2,\"1338\":3,\"1340\":2,\"1342\":3,\"1344\":1,\"1346\":1,\"1348\":2,\"1350\":1,\"1352\":2,\"1354\":1,\"1601\":1,\"1889\":1,\"2090\":1,\"3261\":3,\"4256\":1,\"5653\":1,\"6078\":1,\"6081\":2}}],[\"1周后活动取消\",{\"1\":{\"805\":1}}],[\"1级常用于运维经理进行线上整体项目部署方案调控\",{\"1\":{\"794\":1}}],[\"1级与2级留做系统打包后设置通用属性\",{\"1\":{\"794\":1}}],[\"1级\",{\"1\":{\"792\":1,\"799\":1}}],[\"188464208z\",{\"1\":{\"9895\":1}}],[\"18b4aac2\",{\"1\":{\"2165\":1,\"7043\":1}}],[\"18t15\",{\"1\":{\"1719\":1}}],[\"18\",{\"1\":{\"489\":3,\"1334\":1,\"1346\":1,\"1361\":1,\"1654\":1,\"3985\":1,\"5060\":1,\"5913\":1,\"7678\":1,\"7980\":1,\"8210\":1}}],[\"172\",{\"1\":{\"10162\":1,\"10496\":1,\"10526\":1,\"10541\":1,\"10545\":1,\"10554\":1,\"10573\":1,\"10576\":2}}],[\"17110\",{\"1\":{\"3457\":1}}],[\"17t15\",{\"1\":{\"486\":1}}],[\"17\",{\"1\":{\"486\":1,\"489\":3,\"1124\":1,\"1224\":1,\"1648\":2,\"2877\":2,\"9895\":1}}],[\"104\",{\"1\":{\"8272\":1}}],[\"106\",{\"1\":{\"6706\":1}}],[\"108\",{\"1\":{\"6692\":1}}],[\"1024~49151\",{\"1\":{\"6684\":1}}],[\"1024\",{\"1\":{\"4670\":3,\"6306\":1,\"6353\":1,\"6516\":1,\"6819\":1,\"6843\":1,\"8089\":1,\"9095\":1}}],[\"10+11\",{\"1\":{\"3658\":1}}],[\"101\",{\"1\":{\"3405\":1,\"7527\":1}}],[\"1010\",{\"1\":{\"486\":1,\"952\":1}}],[\"107hello\",{\"1\":{\"3241\":1}}],[\"107\",{\"1\":{\"3162\":1}}],[\"10可以这么创建\",{\"1\":{\"1881\":1}}],[\"10t15\",{\"1\":{\"1705\":1,\"1707\":2}}],[\"10t18\",{\"1\":{\"1657\":1}}],[\"105\",{\"1\":{\"1502\":2,\"1506\":1}}],[\"1004\",{\"1\":{\"10354\":2}}],[\"1003\",{\"1\":{\"10354\":2,\"10357\":1}}],[\"1005\",{\"1\":{\"10264\":1}}],[\"1002\",{\"1\":{\"10264\":1,\"10422\":1,\"10432\":1}}],[\"100之间所有自然数的和\",{\"1\":{\"3753\":1}}],[\"100以内的所有质数的输出\",{\"0\":{\"3456\":1}}],[\"1001\",{\"1\":{\"3311\":1,\"4803\":1,\"6571\":1,\"10290\":1}}],[\"1000的票数\",{\"1\":{\"10622\":1}}],[\"100001\",{\"1\":{\"10264\":2}}],[\"10000\",{\"1\":{\"6840\":1,\"6843\":1,\"7680\":2,\"10252\":1,\"10541\":1,\"10554\":1,\"10603\":1}}],[\"1000000\",{\"1\":{\"8121\":1,\"8126\":1}}],[\"10000000000000000\",{\"1\":{\"3082\":1}}],[\"100000\",{\"1\":{\"3457\":1,\"10293\":1}}],[\"1000\",{\"1\":{\"3173\":1,\"3192\":1,\"3311\":1,\"7956\":1,\"7970\":1,\"10252\":1,\"10264\":1,\"10293\":1,\"10357\":1,\"10603\":1,\"10622\":1}}],[\"100e\",{\"1\":{\"3091\":1}}],[\"100\",{\"1\":{\"1346\":1,\"1348\":1,\"1350\":1,\"1352\":1,\"1354\":1,\"1548\":1,\"1657\":1,\"1805\":2,\"3162\":2,\"3405\":1,\"3420\":1,\"3754\":1,\"4248\":2,\"5221\":1,\"5263\":1,\"5310\":1,\"5322\":1,\"5332\":1,\"5345\":1,\"5396\":1,\"5426\":2,\"5435\":1,\"5463\":1,\"5464\":1,\"5486\":1,\"5913\":1,\"6872\":1,\"7471\":1,\"7493\":1,\"7525\":1,\"8148\":2}}],[\"10\",{\"0\":{\"1351\":1,\"1826\":1,\"2169\":1,\"2434\":1,\"2516\":1,\"2613\":1,\"3651\":1,\"4646\":1},\"1\":{\"952\":1,\"1286\":1,\"1338\":1,\"1340\":1,\"1342\":1,\"1350\":1,\"1352\":1,\"1354\":1,\"1480\":1,\"1657\":2,\"1725\":1,\"1727\":1,\"1771\":2,\"1773\":2,\"1791\":2,\"1832\":2,\"1850\":2,\"1853\":1,\"1856\":3,\"1859\":2,\"1862\":1,\"1899\":1,\"1911\":2,\"1912\":2,\"1914\":2,\"1915\":2,\"1917\":2,\"1918\":2,\"1920\":2,\"1921\":2,\"1923\":2,\"1924\":2,\"1926\":2,\"1927\":2,\"1937\":4,\"2314\":2,\"3008\":1,\"3011\":1,\"3156\":1,\"3162\":1,\"3167\":4,\"3241\":1,\"3261\":3,\"3263\":1,\"3267\":2,\"3270\":1,\"3273\":1,\"3282\":1,\"3319\":1,\"3322\":1,\"3444\":1,\"3556\":1,\"3668\":1,\"3747\":1,\"3782\":2,\"3787\":1,\"3821\":2,\"3987\":1,\"4080\":1,\"4227\":3,\"4274\":1,\"4286\":1,\"4292\":1,\"4658\":4,\"4712\":2,\"4722\":1,\"4751\":2,\"5221\":1,\"5242\":1,\"5253\":2,\"5517\":1,\"5967\":1,\"6001\":1,\"6013\":1,\"7390\":2,\"7480\":1,\"7483\":1,\"7517\":1,\"7520\":1,\"7537\":1,\"7590\":1,\"7593\":1,\"7708\":1,\"7712\":1,\"8148\":1,\"8272\":2,\"10252\":1,\"10290\":1,\"10541\":1,\"10603\":1}}],[\"10<\",{\"1\":{\"347\":1}}],[\"14159\",{\"1\":{\"10102\":1}}],[\"14159265358979323846\",{\"1\":{\"1817\":1}}],[\"141592653589793\",{\"1\":{\"1816\":1}}],[\"149\",{\"1\":{\"8272\":1}}],[\"1401\",{\"1\":{\"6668\":1}}],[\"143\",{\"1\":{\"3990\":1}}],[\"14ae5a5\",{\"1\":{\"2375\":1}}],[\"146841646541651654681l\",{\"1\":{\"3082\":1}}],[\"146+08\",{\"1\":{\"1676\":1}}],[\"146z\",{\"1\":{\"1676\":1}}],[\"14\",{\"1\":{\"486\":1,\"3857\":1}}],[\"1<\",{\"1\":{\"397\":1,\"10829\":1}}],[\"195\",{\"1\":{\"10576\":1}}],[\"1992\",{\"1\":{\"8084\":1,\"8381\":1}}],[\"199\",{\"1\":{\"6703\":3}}],[\"1999\",{\"1\":{\"1657\":2}}],[\"1984\",{\"1\":{\"6668\":1}}],[\"192\",{\"1\":{\"620\":4,\"628\":1,\"981\":1,\"1008\":1,\"6672\":2,\"6700\":1,\"6872\":1}}],[\"19\",{\"1\":{\"397\":1,\"1716\":1,\"1717\":1,\"7655\":2,\"8210\":1,\"8326\":1}}],[\"16s\",{\"1\":{\"8115\":1}}],[\"16m\",{\"1\":{\"8071\":1}}],[\"16个字节\",{\"1\":{\"6667\":1}}],[\"16就是每次16个位\",{\"1\":{\"6427\":1}}],[\"16bit\",{\"1\":{\"6160\":1}}],[\"1655442970466\",{\"1\":{\"1966\":1}}],[\"1654740094502\",{\"1\":{\"2304\":1}}],[\"1654740094502l\",{\"1\":{\"1682\":1}}],[\"1654789042842\",{\"1\":{\"1679\":1}}],[\"160\",{\"1\":{\"1654\":1}}],[\"169\",{\"1\":{\"1648\":2}}],[\"162\",{\"1\":{\"981\":1,\"1008\":1,\"1021\":1,\"10580\":1,\"10583\":1,\"10597\":3,\"10799\":1,\"10807\":1,\"10816\":3,\"10843\":1,\"10846\":3}}],[\"16<\",{\"1\":{\"978\":1,\"1005\":1,\"1142\":1,\"1145\":1,\"1172\":1,\"1177\":2}}],[\"16t18\",{\"1\":{\"1660\":1}}],[\"16t\",{\"1\":{\"923\":1}}],[\"1682481447\",{\"1\":{\"10660\":2}}],[\"1682481367\",{\"1\":{\"10657\":2}}],[\"1682436386\",{\"1\":{\"10580\":2}}],[\"1682435169\",{\"1\":{\"10573\":2}}],[\"1682433666\",{\"1\":{\"10554\":3}}],[\"1682434446\",{\"1\":{\"10554\":1}}],[\"1682434466\",{\"1\":{\"10554\":6}}],[\"168\",{\"1\":{\"620\":4,\"628\":1,\"6666\":1,\"6672\":3,\"6700\":1,\"6872\":1}}],[\"16\",{\"1\":{\"397\":1,\"1051\":2,\"1224\":1,\"1559\":1,\"1719\":1,\"5885\":1,\"6428\":1,\"10162\":1,\"10496\":1,\"10526\":1,\"10541\":1,\"10545\":1,\"10554\":1,\"10573\":1,\"10576\":6}}],[\"1\",{\"0\":{\"105\":1,\"106\":1,\"284\":2,\"287\":1,\"299\":1,\"303\":1,\"342\":1,\"359\":1,\"366\":1,\"370\":1,\"384\":1,\"389\":1,\"408\":1,\"440\":1,\"442\":2,\"444\":1,\"448\":1,\"451\":1,\"454\":1,\"467\":1,\"476\":1,\"479\":1,\"495\":1,\"515\":1,\"523\":1,\"528\":1,\"529\":2,\"534\":1,\"541\":1,\"549\":1,\"558\":1,\"568\":1,\"580\":1,\"587\":1,\"594\":1,\"608\":1,\"619\":1,\"626\":1,\"640\":1,\"651\":1,\"683\":1,\"687\":1,\"699\":1,\"706\":1,\"716\":1,\"748\":1,\"768\":1,\"787\":1,\"804\":1,\"825\":1,\"834\":1,\"845\":1,\"851\":2,\"854\":1,\"863\":1,\"874\":1,\"890\":1,\"909\":1,\"928\":1,\"942\":1,\"959\":1,\"965\":1,\"975\":1,\"984\":1,\"993\":1,\"1001\":1,\"1011\":1,\"1018\":1,\"1041\":1,\"1058\":1,\"1064\":1,\"1085\":1,\"1098\":1,\"1127\":1,\"1140\":1,\"1153\":1,\"1156\":1,\"1160\":1,\"1171\":1,\"1198\":1,\"1199\":2,\"1204\":1,\"1207\":1,\"1212\":1,\"1220\":1,\"1232\":1,\"1244\":1,\"1262\":1,\"1275\":1,\"1284\":1,\"1306\":2,\"1333\":1,\"1357\":1,\"1370\":1,\"1413\":2,\"1419\":1,\"1429\":1,\"1440\":1,\"1461\":1,\"1483\":1,\"1509\":1,\"1510\":2,\"1513\":1,\"1516\":1,\"1519\":1,\"1530\":1,\"1534\":1,\"1535\":2,\"1538\":1,\"1554\":1,\"1579\":1,\"1605\":1,\"1609\":1,\"1635\":1,\"1637\":2,\"1640\":1,\"1643\":1,\"1671\":1,\"1689\":1,\"1703\":1,\"1724\":1,\"1728\":1,\"1731\":1,\"1744\":1,\"1768\":1,\"1779\":1,\"1787\":1,\"1792\":1,\"1798\":1,\"1846\":1,\"1884\":1,\"1938\":1,\"1948\":1,\"1977\":1,\"2011\":1,\"2016\":2,\"2018\":1,\"2023\":1,\"2037\":1,\"2049\":1,\"2076\":1,\"2081\":2,\"2088\":1,\"2116\":1,\"2125\":1,\"2130\":1,\"2132\":2,\"2135\":1,\"2138\":1,\"2142\":1,\"2173\":1,\"2183\":1,\"2219\":1,\"2254\":1,\"2289\":1,\"2294\":1,\"2302\":1,\"2315\":1,\"2323\":1,\"2352\":1,\"2359\":1,\"2402\":1,\"2443\":1,\"2459\":1,\"2482\":1,\"2531\":1,\"2586\":1,\"2631\":1,\"2688\":1,\"2715\":1,\"2780\":1,\"2803\":2,\"2804\":1,\"2818\":1,\"2829\":1,\"2838\":1,\"2841\":1,\"2842\":2,\"2845\":1,\"2848\":1,\"2856\":1,\"2865\":1,\"2872\":1,\"2878\":1,\"2880\":1,\"2887\":1,\"2901\":1,\"2915\":1,\"2926\":1,\"2942\":1,\"2995\":1,\"2997\":1,\"3003\":1,\"3020\":1,\"3048\":1,\"3058\":1,\"3071\":1,\"3073\":1,\"3086\":1,\"3112\":1,\"3138\":1,\"3147\":1,\"3154\":1,\"3179\":1,\"3202\":1,\"3204\":1,\"3222\":1,\"3229\":1,\"3248\":1,\"3251\":1,\"3265\":1,\"3277\":1,\"3285\":1,\"3300\":1,\"3313\":1,\"3317\":1,\"3329\":1,\"3341\":1,\"3343\":2,\"3345\":1,\"3347\":1,\"3359\":1,\"3387\":1,\"3399\":1,\"3416\":1,\"3425\":1,\"3427\":2,\"3430\":1,\"3447\":1,\"3451\":1,\"3458\":1,\"3460\":1,\"3482\":1,\"3488\":1,\"3494\":1,\"3518\":1,\"3539\":1,\"3540\":2,\"3542\":1,\"3546\":1,\"3553\":1,\"3586\":1,\"3595\":1,\"3597\":1,\"3616\":1,\"3655\":1,\"3667\":1,\"3680\":1,\"3713\":1,\"3736\":1,\"3756\":1,\"3769\":1,\"3779\":1,\"3791\":1,\"3812\":1,\"3817\":1,\"3834\":1,\"3850\":1,\"3851\":2,\"3854\":1,\"3890\":1,\"3893\":1,\"3916\":1,\"3942\":1,\"3970\":1,\"3983\":1,\"3994\":1,\"4000\":1,\"4027\":1,\"4041\":1,\"4046\":1,\"4070\":1,\"4078\":1,\"4093\":1,\"4108\":1,\"4116\":1,\"4125\":1,\"4144\":1,\"4171\":1,\"4176\":1,\"4191\":1,\"4202\":1,\"4219\":1,\"4251\":1,\"4263\":1,\"4275\":1,\"4289\":1,\"4300\":1,\"4312\":1,\"4334\":1,\"4348\":1,\"4355\":1,\"4361\":1,\"4375\":1,\"4390\":1,\"4415\":1,\"4443\":1,\"4464\":1,\"4474\":1,\"4475\":2,\"4477\":1,\"4512\":1,\"4524\":1,\"4536\":1,\"4546\":1,\"4554\":1,\"4576\":1,\"4590\":1,\"4596\":1,\"4630\":1,\"4639\":1,\"4651\":1,\"4662\":1,\"4665\":1,\"4684\":1,\"4696\":1,\"4708\":1,\"4711\":1,\"4726\":1,\"4747\":1,\"4769\":1,\"4790\":1,\"4805\":1,\"4816\":1,\"4818\":1,\"4841\":1,\"4847\":1,\"4870\":1,\"4877\":1,\"4879\":2,\"4884\":1,\"4915\":1,\"4920\":1,\"4945\":1,\"4954\":1,\"4970\":1,\"4980\":1,\"4990\":1,\"5009\":1,\"5012\":3,\"5016\":2,\"5028\":1,\"5035\":1,\"5044\":1,\"5059\":1,\"5061\":1,\"5063\":1,\"5073\":1,\"5100\":1,\"5111\":1,\"5115\":1,\"5140\":1,\"5161\":1,\"5162\":2,\"5165\":1,\"5171\":1,\"5174\":1,\"5186\":1,\"5195\":1,\"5216\":1,\"5233\":1,\"5234\":2,\"5236\":1,\"5256\":1,\"5266\":1,\"5274\":1,\"5286\":1,\"5297\":1,\"5313\":1,\"5323\":1,\"5334\":1,\"5339\":2,\"5341\":1,\"5351\":1,\"5357\":1,\"5377\":1,\"5385\":1,\"5406\":1,\"5418\":1,\"5427\":1,\"5436\":1,\"5468\":1,\"5488\":1,\"5518\":1,\"5520\":1,\"5541\":1,\"5568\":1,\"5580\":1,\"5589\":1,\"5606\":1,\"5617\":1,\"5623\":1,\"5633\":1,\"5645\":1,\"5646\":2,\"5649\":1,\"5651\":1,\"5654\":1,\"5657\":1,\"5661\":1,\"5665\":1,\"5674\":1,\"5684\":1,\"5700\":1,\"5726\":1,\"5749\":1,\"5762\":1,\"5772\":1,\"5785\":1,\"5797\":1,\"5813\":1,\"5853\":1,\"5854\":2,\"5857\":1,\"5865\":1,\"5867\":1,\"5869\":1,\"5897\":1,\"5903\":1,\"5911\":1,\"5919\":1,\"5937\":1,\"5943\":1,\"5951\":1,\"5958\":1,\"5966\":1,\"5986\":1,\"5988\":2,\"5991\":1,\"5995\":1,\"5998\":1,\"6017\":1,\"6030\":1,\"6052\":1,\"6061\":1,\"6066\":1,\"6076\":1,\"6087\":1,\"6097\":1,\"6103\":1,\"6105\":1,\"6120\":1,\"6127\":1,\"6149\":1,\"6180\":1,\"6190\":1,\"6192\":2,\"6195\":1,\"6199\":1,\"6224\":1,\"6236\":1,\"6237\":2,\"6240\":1,\"6244\":1,\"6255\":1,\"6269\":1,\"6270\":2,\"6276\":1,\"6279\":1,\"6296\":1,\"6323\":1,\"6336\":1,\"6363\":1,\"6383\":1,\"6390\":1,\"6401\":1,\"6413\":1,\"6437\":1,\"6452\":1,\"6464\":1,\"6490\":1,\"6496\":1,\"6506\":1,\"6522\":1,\"6534\":1,\"6541\":1,\"6554\":1,\"6568\":1,\"6580\":1,\"6592\":1,\"6636\":1,\"6642\":1,\"6662\":1,\"6665\":1,\"6693\":1,\"6699\":1,\"6714\":1,\"6722\":1,\"6756\":1,\"6767\":1,\"6785\":1,\"6800\":1,\"6811\":1,\"6827\":1,\"6864\":1,\"6897\":1,\"6920\":1,\"6923\":1,\"6947\":1,\"6955\":1,\"6964\":1,\"6992\":1,\"7007\":1,\"7010\":2,\"7012\":1,\"7017\":1,\"7036\":1,\"7052\":1,\"7070\":1,\"7096\":1,\"7126\":1,\"7145\":1,\"7147\":2,\"7150\":1,\"7153\":1,\"7156\":1,\"7162\":1,\"7192\":1,\"7206\":1,\"7224\":1,\"7233\":1,\"7248\":1,\"7255\":1,\"7276\":1,\"7299\":1,\"7308\":1,\"7311\":1,\"7335\":1,\"7349\":1,\"7370\":1,\"7402\":1,\"7427\":1,\"7441\":1,\"7459\":1,\"7461\":2,\"7463\":1,\"7472\":1,\"7479\":1,\"7486\":1,\"7494\":1,\"7501\":1,\"7509\":1,\"7516\":1,\"7524\":1,\"7530\":1,\"7534\":1,\"7542\":1,\"7564\":1,\"7565\":2,\"7569\":1,\"7587\":1,\"7597\":1,\"7614\":1,\"7630\":1,\"7635\":2,\"7638\":1,\"7641\":1,\"7652\":1,\"7667\":1,\"7675\":1,\"7703\":1,\"7709\":2,\"7713\":1,\"7731\":1,\"7740\":1,\"7741\":2,\"7744\":1,\"7747\":1,\"7751\":1,\"7758\":1,\"7775\":1,\"7782\":2,\"7787\":1,\"7801\":1,\"7813\":1,\"7815\":1,\"7841\":1,\"7851\":1,\"7868\":1,\"7877\":1,\"7879\":1,\"7888\":1,\"7926\":1,\"7949\":1,\"7969\":1,\"7974\":1,\"7983\":1,\"7994\":1,\"7998\":1,\"8007\":1,\"8035\":1,\"8038\":2,\"8040\":1,\"8046\":1,\"8055\":1,\"8063\":1,\"8065\":1,\"8090\":1,\"8093\":1,\"8094\":2,\"8097\":1,\"8100\":1,\"8117\":1,\"8127\":1,\"8130\":1,\"8132\":2,\"8135\":1,\"8137\":1,\"8145\":1,\"8152\":1,\"8163\":1,\"8165\":1,\"8176\":1,\"8177\":2,\"8179\":1,\"8186\":1,\"8203\":1,\"8211\":1,\"8213\":1,\"8214\":2,\"8218\":1,\"8226\":1,\"8254\":1,\"8327\":1,\"8329\":1,\"8380\":1,\"8392\":1,\"8394\":1,\"8421\":1,\"8445\":1,\"8457\":1,\"8461\":1,\"8488\":1,\"8495\":1,\"8513\":1,\"8521\":1,\"8522\":2,\"8525\":1,\"8533\":1,\"8546\":1,\"8558\":1,\"8575\":1,\"8583\":1,\"8609\":1,\"8619\":1,\"8634\":1,\"8637\":2,\"8639\":1,\"8647\":1,\"8665\":1,\"8668\":1,\"8697\":1,\"8716\":1,\"8732\":1,\"8746\":1,\"8748\":2,\"8753\":1,\"8765\":1,\"8787\":1,\"8803\":1,\"8815\":1,\"8830\":1,\"8840\":1,\"8873\":1,\"8904\":1,\"8919\":1,\"8929\":1,\"8948\":1,\"8974\":1,\"8980\":1,\"8987\":1,\"8997\":1,\"9009\":1,\"9010\":2,\"9013\":1,\"9016\":1,\"9023\":1,\"9039\":1,\"9059\":1,\"9073\":1,\"9089\":1,\"9104\":1,\"9132\":1,\"9142\":1,\"9164\":1,\"9177\":1,\"9211\":1,\"9226\":1,\"9241\":1,\"9252\":1,\"9263\":1,\"9266\":1,\"9316\":1,\"9331\":1,\"9443\":1,\"9465\":1,\"9467\":1,\"9486\":1,\"9491\":1,\"9497\":1,\"9519\":1,\"9537\":1,\"9556\":1,\"9577\":1,\"9593\":1,\"9622\":1,\"9630\":1,\"9638\":1,\"9651\":1,\"9673\":1,\"9679\":1,\"9692\":1,\"9698\":1,\"9728\":1,\"9741\":1,\"9752\":1,\"9781\":1,\"9792\":1,\"9810\":1,\"9825\":2,\"9829\":1,\"9851\":1,\"9867\":1,\"9872\":1,\"9908\":1,\"9911\":1,\"9920\":1,\"9964\":1,\"10012\":2,\"10015\":1,\"10027\":1,\"10048\":1,\"10117\":1,\"10124\":1,\"10127\":1,\"10140\":1,\"10153\":1,\"10171\":1,\"10182\":1,\"10200\":1,\"10202\":1,\"10227\":1,\"10240\":1,\"10244\":1,\"10247\":2,\"10251\":1,\"10253\":1,\"10262\":1,\"10280\":1,\"10298\":1,\"10303\":1,\"10305\":1,\"10319\":1,\"10342\":1,\"10358\":1,\"10364\":1,\"10375\":1,\"10386\":1,\"10409\":1,\"10418\":1,\"10435\":1,\"10437\":1,\"10451\":1,\"10475\":1,\"10494\":1,\"10516\":1,\"10535\":1,\"10540\":2,\"10542\":1,\"10553\":1,\"10564\":1,\"10591\":1,\"10595\":2,\"10601\":1,\"10611\":1,\"10623\":1,\"10634\":1,\"10637\":1,\"10645\":1,\"10656\":1,\"10701\":1,\"10710\":1,\"10738\":1,\"10745\":1,\"10759\":1,\"10768\":1,\"10784\":1,\"10789\":1,\"10804\":1,\"10827\":1,\"10833\":1,\"10841\":1,\"10857\":1,\"10875\":1,\"10880\":1,\"10881\":1,\"10892\":1},\"1\":{\"107\":2,\"305\":2,\"318\":1,\"330\":1,\"333\":1,\"344\":1,\"372\":2,\"375\":2,\"465\":1,\"475\":2,\"503\":2,\"560\":2,\"563\":1,\"628\":1,\"642\":1,\"714\":2,\"734\":7,\"777\":1,\"781\":1,\"826\":1,\"882\":1,\"911\":1,\"952\":1,\"1032\":1,\"1069\":2,\"1071\":1,\"1074\":1,\"1077\":1,\"1080\":1,\"1087\":2,\"1090\":1,\"1115\":1,\"1116\":1,\"1172\":1,\"1224\":1,\"1239\":1,\"1252\":1,\"1256\":1,\"1286\":1,\"1334\":2,\"1336\":1,\"1338\":2,\"1340\":1,\"1346\":1,\"1348\":2,\"1350\":1,\"1352\":2,\"1354\":1,\"1361\":1,\"1431\":1,\"1434\":1,\"1435\":1,\"1437\":1,\"1449\":1,\"1480\":1,\"1529\":1,\"1559\":1,\"1616\":2,\"1660\":8,\"1663\":8,\"1716\":1,\"1719\":1,\"1763\":2,\"1769\":3,\"1771\":1,\"1773\":1,\"1791\":2,\"1800\":2,\"1802\":1,\"1804\":1,\"1805\":1,\"1808\":2,\"1811\":2,\"1814\":3,\"1820\":2,\"1823\":3,\"1825\":2,\"1832\":1,\"1853\":1,\"1856\":3,\"1866\":2,\"1881\":1,\"1907\":2,\"1913\":1,\"1935\":1,\"1946\":1,\"2031\":1,\"2039\":1,\"2040\":1,\"2042\":1,\"2045\":1,\"2046\":1,\"2048\":1,\"2057\":1,\"2105\":2,\"2222\":1,\"2260\":1,\"2263\":1,\"2282\":1,\"2291\":1,\"2314\":1,\"2351\":1,\"2354\":2,\"2362\":2,\"2365\":5,\"2369\":1,\"2370\":1,\"2375\":3,\"2379\":2,\"2461\":1,\"2465\":2,\"2469\":2,\"2484\":3,\"2487\":4,\"2492\":4,\"2495\":4,\"2500\":1,\"2505\":2,\"2508\":1,\"2512\":3,\"2515\":3,\"2518\":2,\"2537\":1,\"2551\":1,\"2552\":1,\"2554\":1,\"2683\":1,\"2692\":2,\"2697\":2,\"2705\":1,\"2827\":1,\"2866\":2,\"2868\":1,\"2875\":1,\"2920\":1,\"2937\":1,\"2962\":3,\"2983\":1,\"3077\":2,\"3094\":1,\"3104\":1,\"3152\":1,\"3167\":1,\"3189\":1,\"3191\":4,\"3192\":4,\"3227\":2,\"3234\":1,\"3250\":2,\"3263\":1,\"3273\":2,\"3284\":1,\"3302\":1,\"3304\":1,\"3310\":1,\"3315\":1,\"3374\":1,\"3386\":2,\"3389\":1,\"3405\":1,\"3420\":1,\"3444\":2,\"3453\":2,\"3455\":2,\"3499\":1,\"3500\":3,\"3505\":1,\"3506\":2,\"3512\":1,\"3516\":2,\"3519\":1,\"3527\":1,\"3537\":1,\"3538\":1,\"3541\":3,\"3544\":1,\"3556\":2,\"3560\":1,\"3563\":7,\"3579\":1,\"3588\":2,\"3591\":1,\"3630\":1,\"3664\":2,\"3686\":1,\"3716\":1,\"3754\":4,\"3816\":1,\"3821\":1,\"3843\":1,\"3985\":1,\"4061\":2,\"4063\":1,\"4106\":1,\"4154\":1,\"4205\":1,\"4281\":2,\"4422\":1,\"4425\":1,\"4479\":1,\"4491\":1,\"4591\":1,\"4631\":1,\"4670\":1,\"4693\":2,\"4700\":1,\"4724\":1,\"4741\":1,\"4748\":1,\"4751\":1,\"4753\":1,\"4775\":1,\"4777\":1,\"4843\":1,\"4946\":1,\"4947\":2,\"4949\":1,\"4950\":1,\"4952\":1,\"4955\":2,\"4956\":1,\"4960\":1,\"4963\":2,\"5084\":2,\"5178\":1,\"5185\":1,\"5243\":1,\"5263\":1,\"5294\":1,\"5305\":1,\"5350\":1,\"5426\":1,\"5435\":1,\"5463\":1,\"5464\":1,\"5486\":1,\"5517\":1,\"5551\":2,\"5553\":1,\"5588\":1,\"5597\":1,\"5614\":1,\"5746\":1,\"5863\":1,\"5866\":1,\"5927\":1,\"5959\":2,\"5961\":1,\"5967\":5,\"5970\":1,\"6078\":1,\"6081\":1,\"6094\":2,\"6117\":2,\"6157\":1,\"6189\":1,\"6241\":1,\"6251\":2,\"6254\":1,\"6285\":1,\"6287\":2,\"6306\":3,\"6313\":1,\"6353\":4,\"6365\":1,\"6411\":2,\"6417\":1,\"6483\":1,\"6487\":1,\"6516\":3,\"6526\":1,\"6543\":1,\"6555\":1,\"6557\":1,\"6571\":1,\"6573\":1,\"6581\":1,\"6657\":2,\"6659\":1,\"6666\":1,\"6674\":1,\"6678\":1,\"6748\":1,\"6779\":1,\"6787\":1,\"6803\":2,\"6819\":1,\"6840\":1,\"6854\":1,\"6872\":1,\"6912\":1,\"6949\":3,\"6960\":1,\"6962\":1,\"7009\":1,\"7043\":1,\"7086\":1,\"7087\":1,\"7089\":1,\"7106\":3,\"7111\":3,\"7120\":1,\"7146\":1,\"7161\":1,\"7179\":1,\"7303\":1,\"7330\":2,\"7373\":1,\"7377\":1,\"7390\":1,\"7428\":1,\"7555\":1,\"7575\":1,\"7583\":2,\"7616\":1,\"7655\":2,\"7708\":1,\"7712\":1,\"7723\":1,\"7789\":3,\"7802\":2,\"7804\":2,\"7812\":2,\"7820\":2,\"7825\":1,\"7830\":1,\"7833\":1,\"7852\":1,\"7858\":1,\"7862\":1,\"7865\":2,\"7873\":1,\"7886\":2,\"7892\":3,\"7893\":4,\"7896\":1,\"7947\":1,\"7951\":1,\"7952\":1,\"7954\":1,\"7956\":1,\"7970\":2,\"7975\":1,\"7980\":2,\"7989\":2,\"7991\":1,\"8031\":1,\"8032\":1,\"8037\":5,\"8045\":6,\"8054\":5,\"8084\":3,\"8089\":4,\"8109\":1,\"8113\":2,\"8118\":1,\"8121\":3,\"8126\":3,\"8146\":2,\"8148\":1,\"8162\":1,\"8201\":11,\"8205\":1,\"8207\":1,\"8210\":2,\"8231\":2,\"8235\":1,\"8260\":1,\"8296\":1,\"8310\":1,\"8418\":2,\"8431\":1,\"8443\":1,\"8514\":1,\"8530\":1,\"8629\":1,\"8669\":2,\"8701\":1,\"8791\":1,\"8817\":1,\"8837\":1,\"8842\":1,\"8874\":1,\"8928\":1,\"8939\":2,\"8944\":3,\"8990\":1,\"9025\":1,\"9027\":1,\"9041\":1,\"9060\":1,\"9064\":1,\"9095\":2,\"9099\":1,\"9101\":1,\"9109\":1,\"9301\":2,\"9325\":1,\"9500\":1,\"9508\":2,\"9549\":1,\"9608\":2,\"9613\":1,\"9635\":1,\"9642\":1,\"9659\":1,\"9674\":1,\"9675\":1,\"9693\":1,\"9811\":1,\"9830\":3,\"9845\":1,\"9871\":1,\"9878\":2,\"9895\":1,\"9913\":2,\"9923\":1,\"9975\":1,\"9985\":1,\"9987\":1,\"9990\":1,\"10000\":1,\"10002\":3,\"10005\":3,\"10008\":2,\"10049\":3,\"10129\":2,\"10190\":2,\"10193\":1,\"10264\":3,\"10290\":1,\"10296\":2,\"10302\":1,\"10314\":2,\"10317\":3,\"10326\":1,\"10335\":3,\"10339\":2,\"10369\":2,\"10379\":1,\"10389\":1,\"10394\":4,\"10396\":2,\"10399\":9,\"10401\":1,\"10403\":1,\"10406\":3,\"10411\":2,\"10429\":1,\"10432\":1,\"10434\":1,\"10446\":2,\"10458\":1,\"10467\":1,\"10512\":1,\"10526\":1,\"10541\":7,\"10547\":1,\"10554\":31,\"10557\":1,\"10560\":1,\"10573\":3,\"10574\":1,\"10576\":3,\"10580\":3,\"10583\":3,\"10588\":1,\"10597\":1,\"10618\":1,\"10657\":4,\"10660\":4,\"10703\":1,\"10728\":1,\"10730\":1,\"10734\":1,\"10747\":1,\"10795\":2,\"10800\":1,\"10809\":1,\"10864\":1}}],[\"bson和mongodb\",{\"1\":{\"10830\":1}}],[\"bson和json一样\",{\"1\":{\"10081\":1}}],[\"bson数据类型参考\",{\"0\":{\"10084\":1}}],[\"bson中\",{\"1\":{\"10083\":1}}],[\"bson采用了类似于\",{\"1\":{\"10082\":1}}],[\"bson\",{\"0\":{\"10080\":1},\"1\":{\"10081\":1,\"10242\":1}}],[\"bfilter\",{\"1\":{\"9311\":1}}],[\"b<g>\",{\"1\":{\"6056\":1}}],[\"b是a的一个子类型\",{\"1\":{\"6053\":1}}],[\"b却不会重新进行if判断\",{\"1\":{\"5300\":1}}],[\"b线程拿到的是老数据\",{\"1\":{\"5298\":1}}],[\"b也返回true\",{\"1\":{\"4189\":1}}],[\"b+4\",{\"1\":{\"3176\":1}}],[\"bb\",{\"1\":{\"2404\":2,\"2407\":2,\"2410\":1,\"2413\":1,\"2422\":1,\"2426\":1,\"2429\":2,\"2433\":2,\"2436\":1,\"3591\":1,\"4509\":1,\"5901\":1,\"6073\":1,\"6078\":2,\"6081\":2,\"7634\":3,\"8148\":1}}],[\"browser\",{\"1\":{\"8593\":1}}],[\"broker<\",{\"1\":{\"397\":1}}],[\"break是终止\",{\"1\":{\"3442\":1}}],[\"break语句用于终止某个语句块的执行\",{\"1\":{\"3426\":1}}],[\"break关键字是可选的\",{\"1\":{\"3365\":1}}],[\"break\",{\"0\":{\"3425\":1},\"1\":{\"3360\":3,\"3365\":1,\"3374\":1,\"3414\":1,\"3424\":1,\"3431\":1,\"3444\":2,\"3457\":2,\"5052\":1,\"5263\":1,\"5310\":1,\"5322\":1,\"5396\":1,\"5464\":1,\"6449\":1,\"6949\":3,\"7106\":2,\"9695\":1}}],[\"br\",{\"1\":{\"2121\":2,\"6348\":6,\"6449\":5,\"8990\":2}}],[\"bd\",{\"1\":{\"1881\":1}}],[\"bd3\",{\"1\":{\"1879\":1,\"1886\":2,\"1889\":2,\"1892\":2}}],[\"bd2\",{\"1\":{\"1879\":2,\"1886\":2,\"1889\":2,\"1892\":2,\"1899\":2,\"1937\":2}}],[\"bd1\",{\"1\":{\"1879\":2,\"1886\":2,\"1889\":2,\"1892\":2,\"1899\":2,\"1907\":2,\"1937\":2}}],[\"b3\",{\"1\":{\"1859\":1,\"4274\":1}}],[\"b2\",{\"1\":{\"1859\":1,\"3142\":1,\"3261\":2,\"4274\":1}}],[\"b1先取10\",{\"1\":{\"3261\":1}}],[\"b1++\",{\"1\":{\"3261\":1}}],[\"b1\",{\"1\":{\"1859\":1,\"3142\":1,\"3156\":2,\"3162\":2,\"3167\":1,\"3176\":1,\"3261\":2,\"4274\":1,\"4295\":1,\"7680\":2}}],[\"beats\",{\"1\":{\"9831\":1}}],[\"beanlisthandler<>\",{\"1\":{\"8387\":1}}],[\"beanlisthandler<customer>\",{\"1\":{\"8387\":1}}],[\"beanlisthandler\",{\"1\":{\"8373\":1}}],[\"beanhandler<>\",{\"1\":{\"8385\":1}}],[\"beanhandler<customer>\",{\"1\":{\"8385\":1}}],[\"beanhandler\",{\"1\":{\"8372\":1}}],[\"beans\",{\"1\":{\"8215\":1}}],[\"bean正是编写这套胶水代码的惯用模式或约定\",{\"1\":{\"4577\":1}}],[\"bean注解\",{\"1\":{\"596\":1}}],[\"bean\",{\"1\":{\"430\":2,\"598\":1,\"602\":1,\"623\":1,\"1234\":1,\"4597\":1}}],[\"bean加载方式\",{\"1\":{\"98\":1}}],[\"beiduofen\",{\"1\":{\"8210\":1}}],[\"belief\",{\"1\":{\"7284\":2,\"7292\":1}}],[\"be\",{\"1\":{\"2962\":1}}],[\"beginindex\",{\"1\":{\"1478\":1,\"1480\":1}}],[\"btree\",{\"1\":{\"1334\":1,\"1336\":1,\"1338\":1,\"1340\":1,\"1342\":1,\"1344\":1,\"1346\":1,\"1348\":1,\"1350\":1,\"1352\":1,\"1354\":1}}],[\"birth\",{\"1\":{\"7947\":1,\"7952\":1,\"7970\":1,\"8037\":3,\"8042\":4,\"8047\":1,\"8084\":1,\"8089\":4,\"8207\":5,\"8381\":1,\"8385\":1,\"8387\":1,\"8389\":4,\"8391\":3}}],[\"bird\",{\"1\":{\"4326\":3,\"4329\":2}}],[\"bifunction<integer\",{\"1\":{\"7525\":1,\"7527\":1}}],[\"bis\",{\"1\":{\"6353\":6}}],[\"bit\",{\"1\":{\"7906\":1}}],[\"bit位向右移动\",{\"1\":{\"3308\":1}}],[\"bit位向左移动\",{\"1\":{\"3306\":1}}],[\"bitman\",{\"1\":{\"1589\":2}}],[\"bi\",{\"1\":{\"1868\":1}}],[\"bigdecimal继承了comparable接口\",{\"1\":{\"1933\":1}}],[\"bigdecimal所创建的是对象\",{\"1\":{\"1883\":1}}],[\"bigdecimal的特殊创建方法\",{\"1\":{\"1880\":1}}],[\"bigdecimal类支持不可变的\",{\"1\":{\"1874\":1}}],[\"bigdecimal类\",{\"1\":{\"1872\":1}}],[\"bigdecimal\",{\"0\":{\"1869\":1},\"1\":{\"1759\":1,\"1876\":1,\"1879\":6,\"1881\":8,\"1886\":7,\"1889\":7,\"1892\":7,\"1899\":11,\"1907\":5,\"1937\":5,\"2345\":1,\"2802\":1}}],[\"biginteger\",{\"0\":{\"1863\":1},\"1\":{\"1867\":2,\"1868\":3,\"1876\":1,\"2345\":1,\"2802\":1}}],[\"bigint\",{\"1\":{\"1334\":3,\"1336\":3,\"1338\":4,\"1340\":4,\"1342\":3,\"1344\":4,\"1346\":1,\"1348\":4,\"1350\":4,\"1352\":3,\"1354\":4,\"7914\":1}}],[\"binary\",{\"1\":{\"7918\":2,\"10079\":1,\"10081\":1,\"10083\":1,\"10554\":1,\"10573\":1,\"10580\":1,\"10657\":1,\"10660\":1}}],[\"binaryoperator\",{\"0\":{\"7709\":1},\"1\":{\"7708\":1,\"7712\":1}}],[\"binaryopearator\",{\"1\":{\"7706\":1}}],[\"binarysearch\",{\"0\":{\"2366\":1},\"1\":{\"2370\":3}}],[\"bindipall\",{\"1\":{\"10496\":1}}],[\"bindip绑定的端口\",{\"1\":{\"10162\":1,\"10496\":1}}],[\"bindip\",{\"1\":{\"10162\":1,\"10496\":1}}],[\"bind\",{\"1\":{\"7277\":1,\"7279\":1,\"8450\":1}}],[\"bin目录添加到path\",{\"1\":{\"2857\":1}}],[\"bin\",{\"1\":{\"1083\":1,\"1334\":7,\"1336\":2,\"1338\":5,\"1340\":5,\"1342\":4,\"1344\":3,\"1346\":6,\"1348\":3,\"1350\":4,\"1352\":7,\"1354\":4,\"2858\":1,\"4440\":1,\"9879\":1,\"9888\":1,\"10164\":1,\"10498\":1,\"10503\":1,\"10508\":1}}],[\"b\",{\"0\":{\"4544\":1,\"7308\":1,\"7331\":1,\"7394\":1,\"7439\":1,\"7538\":1,\"7709\":1,\"7729\":1,\"7764\":1},\"1\":{\"1029\":2,\"1491\":1,\"1494\":1,\"1496\":1,\"1556\":1,\"1559\":2,\"1804\":2,\"1823\":1,\"1825\":1,\"1832\":1,\"1971\":1,\"1975\":1,\"2009\":2,\"2015\":2,\"2045\":2,\"2048\":1,\"2059\":1,\"2098\":1,\"2102\":1,\"2103\":5,\"2105\":6,\"2109\":1,\"2382\":1,\"2391\":2,\"2530\":2,\"2537\":1,\"2546\":2,\"2549\":1,\"2552\":3,\"2555\":3,\"2563\":3,\"2566\":2,\"2569\":3,\"2589\":2,\"2621\":2,\"2683\":2,\"2700\":1,\"2760\":2,\"3167\":4,\"3176\":4,\"3504\":1,\"3939\":1,\"4001\":1,\"4003\":1,\"4061\":1,\"4248\":5,\"4591\":1,\"4658\":2,\"4661\":2,\"4722\":2,\"5060\":1,\"5426\":1,\"6398\":1,\"6477\":1,\"6745\":1,\"6746\":1,\"6747\":1,\"7330\":1,\"7428\":1,\"7438\":1,\"7555\":1,\"7568\":1,\"7572\":1,\"7612\":1,\"7628\":1,\"7678\":2,\"7708\":1,\"7712\":1,\"7727\":1,\"7728\":1,\"7753\":2,\"9262\":2,\"10099\":1,\"10357\":1}}],[\"baidu\",{\"1\":{\"9732\":3}}],[\"balance\",{\"1\":{\"8148\":4,\"8162\":1}}],[\"bankcard\",{\"1\":{\"4823\":1}}],[\"banktemplatemethod\",{\"1\":{\"4469\":2}}],[\"bank2\",{\"1\":{\"4422\":2}}],[\"bank1\",{\"1\":{\"4422\":2}}],[\"bank\",{\"1\":{\"4422\":9}}],[\"backup\",{\"1\":{\"10669\":1,\"10693\":1}}],[\"back\",{\"1\":{\"3928\":1,\"3957\":2}}],[\"backend\",{\"1\":{\"1373\":1,\"1376\":2,\"1378\":1}}],[\"basic\",{\"1\":{\"2134\":1,\"2137\":1,\"2141\":2,\"2144\":2,\"2147\":2,\"2153\":1,\"2171\":1,\"2175\":2,\"2211\":1,\"4872\":1}}],[\"base64\",{\"1\":{\"10770\":1}}],[\"base=\",{\"1\":{\"9642\":3}}],[\"based\",{\"1\":{\"10646\":1}}],[\"basedao<customer>\",{\"1\":{\"8207\":1}}],[\"basedao<t>\",{\"1\":{\"8201\":1}}],[\"basedao的使用\",{\"0\":{\"8202\":1}}],[\"basedao设计\",{\"0\":{\"8176\":1}}],[\"basedao\",{\"0\":{\"8200\":1},\"1\":{\"8167\":1,\"8172\":1,\"8335\":1}}],[\"basedir\",{\"1\":{\"492\":2}}],[\"base\",{\"1\":{\"4605\":1,\"8617\":1}}],[\"basemapper<book>\",{\"1\":{\"1013\":1,\"1222\":1}}],[\"base类加载器执行\",{\"1\":{\"543\":1}}],[\"base类加载器\",{\"1\":{\"539\":1}}],[\"baby\",{\"1\":{\"1584\":3}}],[\"bat即可启动\",{\"1\":{\"8434\":1}}],[\"batch\",{\"1\":{\"8361\":1}}],[\"batman\",{\"1\":{\"1595\":1,\"1601\":1,\"1604\":1,\"2087\":1,\"2098\":1,\"2114\":1,\"2692\":3,\"2697\":3,\"7373\":1}}],[\"bat8\",{\"1\":{\"1521\":1}}],[\"bat\",{\"1\":{\"1083\":1,\"1518\":1,\"1529\":1,\"2705\":1,\"7373\":1,\"8438\":1,\"9888\":1}}],[\"baomidou<\",{\"1\":{\"1005\":1,\"1151\":1,\"1177\":1,\"1361\":1}}],[\"byte类型的二进制数据\",{\"1\":{\"2345\":1,\"2802\":1}}],[\"bytevalue\",{\"1\":{\"1850\":1}}],[\"bytes\",{\"1\":{\"1502\":2,\"1506\":3}}],[\"byte\",{\"0\":{\"2051\":1},\"1\":{\"1486\":3,\"1498\":1,\"1499\":1,\"1502\":3,\"1506\":1,\"1799\":2,\"1822\":1,\"1845\":1,\"1850\":1,\"2045\":2,\"2048\":1,\"2052\":1,\"2059\":1,\"2103\":2,\"2104\":1,\"2105\":3,\"2345\":1,\"2802\":1,\"3025\":1,\"3082\":1,\"3156\":1,\"3162\":1,\"3167\":3,\"3176\":4,\"3367\":1,\"3695\":1,\"4634\":1,\"6306\":2,\"6325\":1,\"6328\":1,\"6353\":2,\"6469\":1,\"6477\":1,\"6516\":2,\"6819\":2,\"6840\":1,\"6843\":2,\"6857\":1,\"6858\":1,\"6861\":1,\"7907\":1,\"7917\":1,\"8089\":2,\"9095\":2}}],[\"by\",{\"1\":{\"734\":2,\"6840\":3,\"6843\":3,\"8358\":1}}],[\"buff\",{\"1\":{\"9095\":3}}],[\"bufferedwriter\",{\"0\":{\"6349\":1},\"1\":{\"6334\":2}}],[\"bufferedoutputstream\",{\"1\":{\"6328\":3,\"6353\":2}}],[\"bufferedoutputstream才会把缓冲区中的数据一次性写到文件里\",{\"1\":{\"6316\":1}}],[\"bufferedinputstream\",{\"1\":{\"6325\":2,\"6353\":2}}],[\"bufferedinputstream会一次性从文件中读取8192个\",{\"1\":{\"6315\":1}}],[\"bufferedreader流就会自动关闭\",{\"1\":{\"8992\":1}}],[\"bufferedreader流是通过request对象来获取的\",{\"1\":{\"8992\":1}}],[\"bufferedreader的readline\",{\"1\":{\"6448\":1}}],[\"bufferedreader\",{\"0\":{\"6342\":1},\"1\":{\"2117\":1,\"2121\":2,\"6331\":2,\"6348\":2,\"6449\":2,\"8985\":1,\"8990\":1,\"9004\":1}}],[\"buffer\",{\"1\":{\"6306\":3,\"6325\":2,\"6328\":1,\"6331\":1,\"6334\":1,\"6516\":3,\"8089\":3,\"10554\":1,\"10573\":1,\"10580\":1,\"10657\":1,\"10660\":1}}],[\"buf\",{\"1\":{\"6325\":1,\"6328\":1,\"6353\":4,\"6819\":3,\"6857\":2,\"6858\":2}}],[\"bucket中红黑树存储的node小于该默认值\",{\"1\":{\"5888\":1}}],[\"bucket中链表长度大于该默认值\",{\"1\":{\"5888\":1}}],[\"buildindexes\",{\"1\":{\"10541\":1}}],[\"build\",{\"1\":{\"734\":2,\"1068\":2,\"1079\":1,\"9513\":2,\"9895\":5}}],[\"build>\",{\"1\":{\"703\":1,\"1177\":1}}],[\"buidl\",{\"1\":{\"553\":1}}],[\"busy\",{\"1\":{\"4823\":1}}],[\"bus\",{\"1\":{\"23\":1}}],[\"blob\",{\"1\":{\"8070\":1,\"8089\":1}}],[\"blob是一个二进制大型对象\",{\"1\":{\"8066\":1}}],[\"blob类型\",{\"0\":{\"8065\":1}}],[\"blob数据\",{\"1\":{\"8064\":1}}],[\"blocks\",{\"0\":{\"10866\":1}}],[\"blocking\",{\"1\":{\"6581\":1}}],[\"block\",{\"1\":{\"4552\":1}}],[\"blockquote>\",{\"1\":{\"2962\":1}}],[\"blockquote><p>\",{\"1\":{\"2962\":1}}],[\"blogapplication\",{\"1\":{\"669\":1,\"1119\":1}}],[\"blogapplicationtests\",{\"1\":{\"663\":1,\"669\":1,\"991\":2,\"1016\":1}}],[\"blog\",{\"1\":{\"434\":1,\"770\":1,\"907\":1,\"991\":1,\"1119\":3,\"10709\":1,\"10718\":1,\"10726\":3,\"10734\":1,\"10799\":1,\"10843\":1,\"10846\":1}}],[\"blue\",{\"1\":{\"952\":2}}],[\"blueprint<\",{\"1\":{\"397\":1}}],[\"bonecp\",{\"1\":{\"8246\":1}}],[\"bos\",{\"1\":{\"6353\":5}}],[\"boy\",{\"1\":{\"5060\":4}}],[\"bob=bb\",{\"1\":{\"2592\":2}}],[\"bob=b\",{\"1\":{\"2589\":2,\"2592\":1,\"2595\":2,\"2598\":1,\"2601\":1,\"2604\":1,\"2606\":1,\"2609\":1,\"2612\":1,\"2615\":2,\"2618\":1,\"2621\":1,\"2624\":2}}],[\"bob\",{\"1\":{\"1771\":3,\"1773\":2,\"1791\":2,\"2589\":2,\"2604\":1,\"2618\":2}}],[\"boldmagenta\",{\"1\":{\"952\":1}}],[\"bolgapplication\",{\"1\":{\"335\":1}}],[\"bool\",{\"1\":{\"7185\":1}}],[\"boolean类的默认值是null\",{\"1\":{\"4277\":1}}],[\"boolean类型不与其他类型参与比较\",{\"1\":{\"4224\":1}}],[\"boolean类型不可以转换为其它的数据类型\",{\"1\":{\"3177\":1}}],[\"boolean类型数据只允许取值true和false\",{\"1\":{\"3140\":1}}],[\"boolean类型的字符串只有true\",{\"1\":{\"1485\":1}}],[\"boolean构造器的值\",{\"1\":{\"4276\":1}}],[\"boolean转换的特殊性说明\",{\"0\":{\"4275\":1}}],[\"boolean示例\",{\"1\":{\"4274\":1}}],[\"boolean只能取true和false没法参加运算\",{\"1\":{\"3149\":1}}],[\"boolean只能用true和false表示\",{\"1\":{\"3144\":1}}],[\"boolean\",{\"0\":{\"3137\":1},\"1\":{\"486\":1,\"1263\":3,\"1265\":3,\"1276\":3,\"1283\":1,\"1296\":4,\"1299\":2,\"1424\":3,\"1427\":1,\"1442\":1,\"1452\":1,\"1455\":1,\"1458\":1,\"1486\":3,\"1524\":1,\"1760\":1,\"1979\":2,\"1982\":2,\"1985\":2,\"1989\":4,\"1993\":2,\"2003\":2,\"2006\":2,\"2009\":2,\"2015\":2,\"2022\":4,\"2087\":2,\"2090\":2,\"2247\":1,\"2345\":1,\"2379\":2,\"2404\":1,\"2407\":1,\"2416\":2,\"2422\":2,\"2426\":2,\"2429\":2,\"2433\":2,\"2436\":2,\"2440\":2,\"2461\":2,\"2515\":1,\"2545\":1,\"2546\":2,\"2563\":1,\"2604\":3,\"2606\":3,\"2612\":3,\"2615\":2,\"2642\":1,\"2683\":1,\"2700\":2,\"2747\":1,\"2755\":1,\"2756\":2,\"2802\":1,\"3033\":1,\"3139\":1,\"3142\":2,\"3457\":1,\"3672\":1,\"3698\":1,\"4241\":1,\"4274\":6,\"4295\":3,\"4634\":1,\"4957\":1,\"5389\":1,\"6468\":1,\"6487\":1,\"6599\":1,\"6600\":1,\"6601\":1,\"6623\":1,\"6624\":1,\"6625\":1,\"6626\":1,\"6627\":1,\"6628\":1,\"6629\":1,\"6711\":2,\"7185\":1,\"7436\":1,\"7678\":2,\"7680\":2,\"7682\":2,\"7753\":2,\"7905\":1,\"7960\":1,\"8009\":1,\"8134\":1,\"8347\":1,\"10083\":1,\"10282\":1,\"10283\":1}}],[\"book`\",{\"1\":{\"1348\":1}}],[\"book>\",{\"1\":{\"1265\":1,\"1268\":1}}],[\"book\",{\"0\":{\"1347\":1},\"1\":{\"985\":2,\"988\":2,\"1211\":1,\"1224\":15,\"1252\":1,\"1256\":2,\"1263\":5,\"1265\":17,\"1276\":7,\"1299\":12,\"1325\":1,\"1352\":1}}],[\"bookcontroller2\",{\"1\":{\"1276\":1}}],[\"bookcontroller\",{\"1\":{\"882\":2,\"888\":1,\"955\":1,\"1299\":1}}],[\"bookserviceimpl\",{\"0\":{\"1264\":1},\"1\":{\"1265\":1,\"1268\":1}}],[\"bookservice\",{\"0\":{\"1262\":1},\"1\":{\"1263\":1,\"1276\":7,\"1299\":8}}],[\"books\",{\"1\":{\"882\":1,\"888\":1,\"955\":1,\"1276\":1,\"1299\":1}}],[\"bookdaotestcase\",{\"1\":{\"1224\":1}}],[\"bookdao\",{\"1\":{\"663\":3,\"988\":2,\"991\":3,\"1013\":1,\"1016\":4,\"1222\":1,\"1224\":7,\"1239\":1,\"1241\":1,\"1248\":1,\"1252\":1,\"1256\":1,\"1265\":7,\"1268\":2}}],[\"boot版本和需要直接安装的组件\",{\"1\":{\"1089\":1}}],[\"boot内部使用logback作为日志实现的框架\",{\"1\":{\"943\":1}}],[\"bootintroduction1application\",{\"1\":{\"427\":1,\"430\":2}}],[\"boot<\",{\"1\":{\"347\":1,\"391\":1,\"394\":1,\"397\":1,\"412\":3,\"446\":2,\"450\":1,\"550\":1,\"614\":1,\"653\":1,\"703\":1,\"978\":1,\"1019\":1,\"1129\":1,\"1132\":1,\"1135\":1,\"1138\":1,\"1154\":1,\"1158\":1,\"1167\":1,\"1177\":7,\"1361\":3,\"10839\":1}}],[\"boot\",{\"0\":{\"392\":1,\"395\":1,\"716\":1,\"727\":1,\"1165\":1},\"1\":{\"320\":1,\"343\":1,\"347\":1,\"372\":2,\"391\":1,\"393\":1,\"394\":1,\"397\":1,\"399\":1,\"400\":2,\"411\":1,\"412\":3,\"443\":3,\"445\":2,\"446\":2,\"450\":1,\"550\":1,\"614\":1,\"652\":1,\"653\":1,\"703\":1,\"705\":1,\"707\":1,\"708\":1,\"709\":1,\"719\":1,\"725\":1,\"734\":11,\"967\":1,\"978\":2,\"1005\":2,\"1019\":1,\"1128\":2,\"1129\":1,\"1131\":1,\"1132\":1,\"1134\":1,\"1135\":1,\"1137\":1,\"1138\":1,\"1145\":1,\"1151\":1,\"1154\":1,\"1158\":1,\"1164\":1,\"1167\":1,\"1177\":10,\"1361\":5,\"1391\":1,\"10839\":1}}],[\"e676dd308382\",{\"1\":{\"10726\":1}}],[\"ea87\",{\"1\":{\"10726\":1}}],[\"eat\",{\"1\":{\"3630\":1,\"3636\":1,\"4459\":4,\"4553\":1,\"7284\":1}}],[\"ef\",{\"1\":{\"10164\":1,\"10511\":1}}],[\"e3\",{\"1\":{\"9724\":1}}],[\"e3>\",{\"1\":{\"5989\":1}}],[\"edit\",{\"1\":{\"8576\":2}}],[\"edu\",{\"1\":{\"952\":1}}],[\"email\",{\"1\":{\"7947\":1,\"7970\":1,\"8037\":3,\"8042\":4,\"8047\":2,\"8056\":1,\"8084\":1,\"8089\":4,\"8207\":4,\"8381\":1,\"8385\":1,\"8387\":1,\"8389\":4}}],[\"emp2\",{\"1\":{\"7512\":2}}],[\"emp1\",{\"1\":{\"7510\":2}}],[\"emp\",{\"1\":{\"7471\":1,\"7473\":1}}],[\"empty\",{\"0\":{\"7744\":1},\"1\":{\"5060\":3,\"7746\":2,\"7749\":1,\"9506\":1}}],[\"employees\",{\"1\":{\"7701\":1}}],[\"employeedata\",{\"1\":{\"7616\":1,\"7619\":1,\"7623\":1,\"7626\":1,\"7678\":1,\"7680\":1,\"7685\":1,\"7688\":1}}],[\"employee类的对象\",{\"1\":{\"7613\":1,\"7629\":1}}],[\"employee类中的方法\",{\"1\":{\"7475\":1}}],[\"employee>\",{\"1\":{\"7517\":1,\"7520\":1,\"7525\":1,\"7527\":1}}],[\"employee\",{\"0\":{\"1333\":1},\"1\":{\"1311\":1,\"7471\":2,\"7493\":3,\"7498\":1,\"7510\":1,\"7512\":1,\"7517\":1,\"7520\":1,\"7525\":1,\"7527\":1,\"7685\":1,\"7688\":1,\"7697\":1,\"7716\":1}}],[\"e1\",{\"1\":{\"7697\":2,\"8148\":2}}],[\"eof\",{\"1\":{\"6781\":1}}],[\"e2\",{\"1\":{\"5989\":1,\"7697\":2}}],[\"evaluate\",{\"1\":{\"4469\":2}}],[\"event\",{\"1\":{\"9419\":1,\"9421\":1}}],[\"even\",{\"1\":{\"1928\":1}}],[\"ee\",{\"1\":{\"2806\":1,\"4509\":1}}],[\"eq\",{\"1\":{\"2729\":1}}],[\"equals为true\",{\"1\":{\"5750\":1}}],[\"equals返回false\",{\"1\":{\"5724\":1}}],[\"equals是一个方法\",{\"1\":{\"4230\":1}}],[\"equals的具体使用要看自定义类里有没有\",{\"1\":{\"4245\":1}}],[\"equals的用法\",{\"0\":{\"4228\":1}}],[\"equals的不区分大小写版本\",{\"1\":{\"1426\":1}}],[\"equals与\",{\"0\":{\"4218\":1}}],[\"equalsignorecase\",{\"0\":{\"1425\":1},\"1\":{\"1427\":2,\"6449\":2}}],[\"equals\",{\"0\":{\"1422\":1,\"2376\":1,\"2437\":1,\"2613\":1,\"5752\":1},\"1\":{\"1214\":1,\"1299\":2,\"1424\":3,\"1427\":1,\"2379\":2,\"2440\":2,\"2615\":2,\"3237\":1,\"4210\":1,\"4229\":1,\"4236\":2,\"4237\":1,\"4238\":3,\"4239\":2,\"4240\":2,\"4241\":2,\"4244\":1,\"4248\":1,\"4957\":1,\"5604\":1,\"5705\":1,\"5758\":1,\"5817\":1,\"5818\":1,\"5819\":1,\"5820\":1,\"7618\":1,\"8817\":2,\"9004\":2,\"9695\":1}}],[\"e>\",{\"1\":{\"2407\":1}}],[\"epochmilli\",{\"1\":{\"1682\":1}}],[\"e\",{\"1\":{\"1431\":1,\"1494\":2,\"1502\":2,\"1506\":2,\"2003\":2,\"2114\":4,\"2404\":2,\"2465\":1,\"2537\":1,\"2546\":3,\"2549\":1,\"2563\":1,\"2566\":2,\"2569\":2,\"4145\":4,\"4148\":2,\"4734\":5,\"4751\":2,\"4753\":6,\"4777\":2,\"4803\":2,\"5221\":4,\"5426\":4,\"5464\":2,\"5486\":4,\"5672\":2,\"5970\":3,\"5987\":1,\"5999\":3,\"6001\":3,\"6012\":1,\"6013\":2,\"6045\":4,\"6047\":1,\"6251\":4,\"6254\":4,\"6285\":4,\"6287\":6,\"6306\":6,\"6348\":4,\"6353\":6,\"6445\":1,\"6449\":5,\"6460\":2,\"6840\":2,\"6843\":2,\"7495\":1,\"7568\":1,\"7572\":1,\"7616\":2,\"7678\":2,\"7680\":2,\"7682\":2,\"7694\":2,\"7723\":4,\"7970\":6,\"7978\":4,\"7980\":2,\"7989\":2,\"8037\":2,\"8045\":2,\"8054\":2,\"8146\":2,\"8148\":4,\"8201\":10,\"8210\":14,\"8324\":2,\"8326\":2,\"10269\":2}}],[\"elaticsearch\",{\"1\":{\"9834\":1}}],[\"elastic\",{\"0\":{\"9829\":1,\"9833\":1},\"1\":{\"9831\":1,\"9834\":1,\"9840\":3}}],[\"elasticsearch采用的是倒排索引\",{\"1\":{\"9919\":1}}],[\"elasticsearch在windows下开启了安全认证\",{\"1\":{\"9900\":1}}],[\"elasticsearch是基于java开发的\",{\"1\":{\"9886\":1}}],[\"elasticsearch是目前全文搜索引擎的首选\",{\"1\":{\"9827\":1}}],[\"elasticsearch官网\",{\"1\":{\"9869\":1}}],[\"elasticsearch\",{\"0\":{\"202\":1,\"9911\":1},\"1\":{\"9831\":1,\"9838\":1,\"9844\":1,\"9846\":1,\"9847\":1,\"9848\":1,\"9873\":1,\"9888\":1,\"9891\":1,\"9895\":1,\"9910\":1,\"9912\":1}}],[\"elk\",{\"1\":{\"9831\":1}}],[\"electiondate\",{\"1\":{\"10554\":1}}],[\"electiontime\",{\"1\":{\"10554\":1}}],[\"electiontimeout\",{\"1\":{\"10554\":1}}],[\"electiontimeoutmillis\",{\"1\":{\"10541\":1,\"10554\":1}}],[\"electionterm\",{\"1\":{\"10554\":1}}],[\"electioncandidatemetrics\",{\"1\":{\"10554\":1}}],[\"eles\",{\"1\":{\"2540\":1,\"2541\":1,\"2546\":1}}],[\"elementformdefault=\",{\"1\":{\"9642\":1}}],[\"elementdata初始化为\",{\"1\":{\"5659\":1}}],[\"elementdata\",{\"1\":{\"5650\":1}}],[\"elementdata存储\",{\"1\":{\"5636\":1,\"5643\":1}}],[\"elementtype\",{\"0\":{\"4958\":1},\"1\":{\"4949\":1,\"4950\":1,\"4952\":1,\"4955\":1,\"4956\":1,\"4959\":1,\"4960\":2,\"4961\":1,\"4987\":1,\"4991\":1,\"4992\":1,\"4993\":1,\"4994\":1,\"4995\":1,\"4996\":1,\"5040\":1,\"5060\":1,\"8837\":1}}],[\"element对象\",{\"1\":{\"3614\":1}}],[\"elements里双击需要添加到jar包的文件\",{\"1\":{\"9507\":1}}],[\"elements\",{\"1\":{\"2962\":1}}],[\"element\",{\"1\":{\"2537\":1,\"2566\":1,\"5672\":2,\"9631\":5,\"9640\":1,\"9642\":5}}],[\"elementui\",{\"1\":{\"1390\":1}}],[\"ele\",{\"1\":{\"2533\":1,\"2534\":1,\"2536\":1}}],[\"else分支会导致程序的代码加长\",{\"1\":{\"4683\":1}}],[\"else时\",{\"1\":{\"3376\":1}}],[\"else和switch\",{\"0\":{\"3375\":1}}],[\"else是可以进行嵌套的\",{\"1\":{\"3350\":1}}],[\"else结构中的else\",{\"1\":{\"3370\":1}}],[\"else结构中的执行语句只有一行时\",{\"1\":{\"3351\":1}}],[\"else结构\",{\"1\":{\"3324\":1}}],[\"else\",{\"0\":{\"3323\":1,\"3340\":1},\"1\":{\"1769\":2,\"1791\":2,\"2003\":1,\"2006\":2,\"2009\":2,\"2365\":2,\"2543\":1,\"3324\":1,\"3334\":1,\"3346\":1,\"3348\":3,\"3377\":1,\"3414\":2,\"3754\":1,\"3821\":1,\"4241\":1,\"4794\":1,\"4803\":1,\"5263\":1,\"5310\":1,\"5322\":1,\"5345\":1,\"5396\":1,\"5464\":1,\"5790\":2,\"5794\":1,\"8817\":1,\"9004\":1}}],[\"el\",{\"1\":{\"1435\":2,\"1438\":2}}],[\"elo\",{\"1\":{\"1435\":1,\"1438\":1}}],[\"erlang\",{\"1\":{\"6925\":1}}],[\"erver\",{\"1\":{\"1206\":1}}],[\"errortest\",{\"1\":{\"4670\":1}}],[\"error和exception\",{\"1\":{\"4666\":1}}],[\"error\",{\"0\":{\"4667\":1},\"1\":{\"882\":2,\"888\":2,\"897\":1,\"952\":10,\"955\":2,\"2974\":1,\"4699\":1,\"9293\":1,\"10744\":1,\"10864\":2}}],[\"eclipse\",{\"1\":{\"1083\":1}}],[\"extensible\",{\"1\":{\"9591\":1}}],[\"extension>\",{\"1\":{\"9232\":1}}],[\"extends\",{\"0\":{\"3998\":1,\"6087\":1},\"1\":{\"1013\":1,\"1222\":1,\"1265\":1,\"1268\":2,\"1376\":1,\"1542\":2,\"1868\":1,\"1876\":1,\"2070\":1,\"2137\":1,\"2217\":1,\"2252\":1,\"2287\":1,\"2397\":1,\"2407\":1,\"2492\":1,\"2500\":3,\"2505\":3,\"2512\":1,\"2525\":1,\"2592\":2,\"4001\":2,\"4007\":1,\"4039\":1,\"4061\":1,\"4080\":1,\"4083\":1,\"4092\":1,\"4164\":1,\"4469\":1,\"4499\":1,\"4509\":1,\"4813\":1,\"4957\":1,\"5185\":1,\"5219\":1,\"5221\":1,\"5253\":1,\"5283\":1,\"6019\":2,\"6022\":1,\"6025\":1,\"6028\":1,\"6088\":1,\"6094\":2,\"6325\":1,\"6328\":1,\"6331\":1,\"6334\":1,\"6382\":1,\"6997\":1,\"7583\":1,\"7647\":2,\"8207\":1,\"8809\":1,\"8817\":1,\"8944\":1,\"9004\":1,\"9027\":1,\"9031\":1,\"9079\":1,\"9124\":2,\"9143\":1,\"9145\":1}}],[\"exe命令对某个字节码文件进行解释运行\",{\"1\":{\"6969\":1}}],[\"exe命令以后\",{\"1\":{\"6969\":1}}],[\"exe\",{\"1\":{\"5092\":1}}],[\"executorservice\",{\"1\":{\"5517\":1}}],[\"executors\",{\"0\":{\"5505\":1},\"1\":{\"5507\":1,\"5508\":1,\"5509\":1,\"5510\":1,\"5517\":1}}],[\"executeupdate\",{\"1\":{\"8109\":1,\"8113\":1,\"8201\":1}}],[\"executebatch\",{\"0\":{\"8097\":1},\"1\":{\"8121\":1,\"8126\":1}}],[\"execute是可以执行多条预编译sql语句的\",{\"1\":{\"7962\":1}}],[\"executequery\",{\"1\":{\"7940\":1,\"7999\":1,\"8000\":1,\"8037\":1,\"8045\":1,\"8054\":1,\"8089\":1,\"8201\":3}}],[\"execute\",{\"0\":{\"7957\":1},\"1\":{\"5502\":1,\"5517\":1,\"7939\":1,\"7960\":1,\"7970\":1,\"7980\":1,\"7989\":1,\"8084\":1,\"8146\":1}}],[\"execute权限\",{\"1\":{\"1987\":1}}],[\"executable\",{\"1\":{\"2252\":1,\"2287\":1}}],[\"executionexception\",{\"1\":{\"5486\":1}}],[\"execution\",{\"1\":{\"1068\":1,\"1079\":1}}],[\"examples\",{\"1\":{\"2962\":1}}],[\"exact\",{\"1\":{\"1894\":1}}],[\"exited\",{\"1\":{\"10864\":1}}],[\"exiting\",{\"1\":{\"10164\":1,\"10498\":1}}],[\"exit\",{\"0\":{\"2305\":1},\"1\":{\"2307\":1,\"6445\":1,\"6449\":1}}],[\"exists\",{\"0\":{\"1983\":1},\"1\":{\"1985\":2,\"2003\":1,\"2006\":1,\"2009\":1,\"6623\":1}}],[\"explain\",{\"1\":{\"10417\":1,\"10422\":1}}],[\"exploded中的一个\",{\"1\":{\"8650\":1}}],[\"exploded\",{\"1\":{\"8506\":1,\"8582\":1,\"8586\":1,\"8645\":1}}],[\"expression\",{\"1\":{\"10083\":1}}],[\"expected=class\",{\"1\":{\"2256\":1}}],[\"expansion\",{\"1\":{\"1894\":1}}],[\"exp\",{\"1\":{\"1827\":1,\"1832\":4}}],[\"ex\",{\"1\":{\"1290\":2}}],[\"excel\",{\"1\":{\"6233\":1}}],[\"exceptionsorter\",{\"1\":{\"8316\":1}}],[\"exceptiontypes\",{\"1\":{\"7106\":6}}],[\"exceptiontest2\",{\"1\":{\"4777\":1}}],[\"exceptiontest\",{\"1\":{\"4734\":1}}],[\"exception会报编译时错误\",{\"1\":{\"4803\":1}}],[\"exception\",{\"0\":{\"4671\":1},\"1\":{\"1290\":2,\"2275\":2,\"2972\":1,\"2974\":2,\"4691\":2,\"4698\":1,\"4699\":1,\"4734\":1,\"4798\":1,\"4800\":1,\"4803\":3,\"4813\":1,\"5060\":1,\"5486\":1,\"6285\":1,\"6411\":1,\"6840\":1,\"6843\":1,\"6949\":1,\"6952\":1,\"6960\":1,\"6962\":1,\"7862\":1,\"7865\":1,\"7873\":1,\"7970\":1,\"7975\":1,\"7980\":1,\"7989\":1,\"8037\":1,\"8045\":1,\"8054\":1,\"8084\":1,\"8121\":1,\"8146\":1,\"8148\":1,\"8162\":1,\"8201\":3,\"8210\":7,\"8260\":1,\"8324\":1,\"8326\":1,\"8381\":1,\"8383\":1,\"8385\":1,\"8387\":1,\"8389\":1,\"8391\":1,\"9495\":1}}],[\"exceptionhandler\",{\"1\":{\"1290\":1}}],[\"excutorservice\",{\"0\":{\"5500\":1}}],[\"exclude\",{\"1\":{\"577\":1}}],[\"exclusions>\",{\"1\":{\"446\":1}}],[\"exclusion>\",{\"1\":{\"446\":1}}],[\"ebank\",{\"1\":{\"811\":1,\"907\":2}}],[\"enrollment\",{\"1\":{\"9902\":1}}],[\"enumeration\",{\"1\":{\"9642\":3}}],[\"enumeration<string>\",{\"1\":{\"8955\":2,\"9021\":1}}],[\"enum和class一样可以实现接口\",{\"1\":{\"4872\":1}}],[\"enum使用示例\",{\"0\":{\"4869\":1}}],[\"enum使用说明\",{\"0\":{\"4850\":1}}],[\"enum是所有枚举类的父类\",{\"1\":{\"4862\":1}}],[\"enum的主要方法\",{\"0\":{\"4861\":1}}],[\"enum类\",{\"1\":{\"4851\":1}}],[\"enum关键字是替代class使用的\",{\"1\":{\"4848\":1}}],[\"enum关键字\",{\"0\":{\"4847\":1}}],[\"enum\",{\"0\":{\"4846\":1},\"1\":{\"4624\":1,\"4830\":1,\"4872\":1,\"4959\":1,\"4961\":1,\"4963\":1,\"4968\":1,\"6985\":1}}],[\"english\",{\"1\":{\"3636\":1}}],[\"engine=innodb\",{\"1\":{\"1334\":1,\"1336\":1,\"1338\":1,\"1340\":1,\"1342\":1,\"1344\":1,\"1346\":1,\"1348\":1,\"1350\":1,\"1352\":1,\"1354\":1}}],[\"encapsulation\",{\"1\":{\"3602\":1}}],[\"encode\",{\"1\":{\"9726\":1}}],[\"encoder>\",{\"1\":{\"952\":4}}],[\"encoding\",{\"1\":{\"2981\":1,\"6394\":2,\"8970\":1,\"9612\":1}}],[\"encoding=utf\",{\"1\":{\"9037\":1}}],[\"encoding=\",{\"1\":{\"952\":1,\"9608\":1,\"9613\":1,\"9635\":1}}],[\"end\",{\"1\":{\"1588\":1,\"1589\":1,\"1593\":1,\"1595\":1,\"3457\":2,\"4466\":2,\"6359\":2,\"8113\":2,\"8121\":2}}],[\"endindex\",{\"1\":{\"1479\":1,\"1480\":1}}],[\"endswith\",{\"0\":{\"1450\":1},\"1\":{\"1452\":2,\"6600\":1}}],[\"entries\",{\"1\":{\"2624\":3}}],[\"entry<string\",{\"1\":{\"2624\":1,\"5970\":3}}],[\"entry<k\",{\"1\":{\"2624\":1}}],[\"entry是map接口的内部接口\",{\"1\":{\"2623\":1}}],[\"entryset方法得到的是一个嵌套的泛型\",{\"1\":{\"5970\":1}}],[\"entryset集合中的元素都是entry\",{\"1\":{\"2623\":1}}],[\"entryset\",{\"0\":{\"2622\":1},\"1\":{\"2624\":2,\"5891\":1,\"5913\":3,\"5970\":1}}],[\"entry==\",{\"1\":{\"2585\":1}}],[\"entry\",{\"1\":{\"2585\":1,\"2623\":1,\"2624\":5,\"5850\":1,\"5913\":5,\"5970\":2}}],[\"entity\",{\"1\":{\"1119\":1,\"1210\":1}}],[\"enterprise\",{\"1\":{\"508\":1,\"8526\":1}}],[\"enablesharding\",{\"1\":{\"10660\":1}}],[\"enable\",{\"1\":{\"9902\":1}}],[\"enableconfigurationproperties\",{\"0\":{\"605\":1},\"1\":{\"609\":1}}],[\"enabled\",{\"1\":{\"581\":1,\"584\":1,\"9902\":3,\"10162\":1,\"10496\":1,\"10740\":1,\"10777\":1}}],[\"environment\",{\"1\":{\"2843\":1}}],[\"enviroment\",{\"1\":{\"508\":1}}],[\"env\",{\"1\":{\"508\":4}}],[\"es就采用了这种方案\",{\"1\":{\"9961\":1}}],[\"es安装\",{\"0\":{\"9868\":1}}],[\"es6中的\",{\"1\":{\"7333\":1}}],[\"es8\",{\"1\":{\"247\":1}}],[\"es面试题\",{\"1\":{\"246\":1}}],[\"es优化\",{\"1\":{\"239\":1}}],[\"es集成\",{\"1\":{\"235\":1}}],[\"es进阶\",{\"1\":{\"228\":1}}],[\"es环境\",{\"1\":{\"223\":1}}],[\"es基本操作\",{\"1\":{\"211\":1}}],[\"es介绍\",{\"0\":{\"9825\":1},\"1\":{\"209\":1}}],[\"es入门\",{\"1\":{\"208\":1}}],[\"es\",{\"0\":{\"9826\":1},\"1\":{\"93\":1,\"9834\":2,\"9888\":1,\"9915\":1}}],[\"eureka\",{\"1\":{\"23\":1}}],[\"包提供给别人使用\",{\"1\":{\"9487\":1}}],[\"包中有\",{\"1\":{\"7882\":1}}],[\"包裹\",{\"1\":{\"7365\":1}}],[\"包声明\",{\"1\":{\"4961\":1}}],[\"包属于标识符\",{\"1\":{\"3930\":1}}],[\"包的多了可能会产生意外的错误\",{\"1\":{\"5327\":1}}],[\"包的少了\",{\"1\":{\"5327\":1}}],[\"包的命名规则\",{\"0\":{\"3929\":1}}],[\"包的作用\",{\"0\":{\"3919\":1}}],[\"包虽然就是个文件夹\",{\"1\":{\"3924\":1}}],[\"包可以包含类和子包\",{\"1\":{\"3921\":1}}],[\"包帮助管理大型软件系统\",{\"1\":{\"3920\":1}}],[\"包名\",{\"1\":{\"2944\":1,\"3067\":1,\"3947\":2}}],[\"包主要包括以下三个类\",{\"1\":{\"2664\":1}}],[\"包+类名\",{\"1\":{\"2139\":1,\"6999\":1}}],[\"包装类自动转为基本数据类型\",{\"1\":{\"4284\":1}}],[\"包装类对象中包装的基本类型变量\",{\"1\":{\"4279\":1}}],[\"包装类转换为基本数据类型\",{\"0\":{\"4278\":1}}],[\"包装类的构造器\",{\"1\":{\"4273\":1}}],[\"包装类的转换概述\",{\"0\":{\"4268\":1}}],[\"包装类与string类的互相转换示意图\",{\"1\":{\"4269\":1}}],[\"包装类就是将基本数据类型的值包装成引用数据类型\",{\"1\":{\"4264\":1}}],[\"包装类等都重写了object类中的tostring\",{\"1\":{\"4255\":1}}],[\"包装类等都重写了object类中的equals\",{\"1\":{\"4232\":1}}],[\"包装类包括\",{\"1\":{\"1848\":1}}],[\"包装类\",{\"0\":{\"4262\":1,\"4289\":1,\"4293\":1},\"1\":{\"1484\":1,\"1845\":1,\"4265\":1,\"4273\":1,\"6008\":1}}],[\"包括创建\",{\"1\":{\"10678\":1}}],[\"包括标签\",{\"1\":{\"9637\":1}}],[\"包括任意其他服务器上的\",{\"1\":{\"9152\":1}}],[\"包括了对数据表的crud\",{\"1\":{\"8167\":1}}],[\"包括两个层次\",{\"1\":{\"7808\":1}}],[\"包括两者\",{\"1\":{\"6847\":1}}],[\"包括object这个父类的方法\",{\"1\":{\"7099\":1}}],[\"包括多个具有不同功能且互为关联的协议\",{\"1\":{\"6727\":1}}],[\"包括自定义的异常类和try\",{\"1\":{\"6011\":1}}],[\"包括枚举常量\",{\"1\":{\"4961\":1}}],[\"包括注释类型\",{\"1\":{\"4961\":1}}],[\"包括私有元素\",{\"1\":{\"6972\":1}}],[\"包括私有的\",{\"1\":{\"4340\":1}}],[\"包括私有的数据\",{\"1\":{\"4323\":1}}],[\"包括私有属性\",{\"1\":{\"2193\":1}}],[\"包括本包下的子包\",{\"1\":{\"3963\":1}}],[\"包括对象作为参数\",{\"1\":{\"3776\":1}}],[\"包括调用自己\",{\"1\":{\"3745\":1}}],[\"包括属性和\",{\"1\":{\"3635\":1}}],[\"包括涉及到java语言与前端html\",{\"1\":{\"3614\":1}}],[\"包括基本数据类型和引用数据类型\",{\"1\":{\"3468\":1}}],[\"包括强制类型转换\",{\"1\":{\"3243\":1}}],[\"包括参数描述\",{\"1\":{\"2969\":1}}],[\"包括java虚拟机和java程序所需的核心类库等\",{\"1\":{\"2844\":1}}],[\"包括换行符\",{\"1\":{\"2726\":1}}],[\"包括private类型的\",{\"1\":{\"2246\":1,\"2284\":1,\"2293\":1}}],[\"包括子目录\",{\"1\":{\"1968\":1}}],[\"包括底层框架和扩展特性\",{\"1\":{\"1628\":1}}],[\"包括引用类型\",{\"1\":{\"1599\":1}}],[\"包括start\",{\"1\":{\"1592\":1}}],[\"包括包装类\",{\"1\":{\"1490\":1}}],[\"包括\",{\"1\":{\"1482\":1,\"3673\":1,\"4951\":1,\"7085\":1,\"7105\":1,\"9831\":1,\"10652\":1,\"10653\":1}}],[\"包括系统管理后台和移动端应用两部分\",{\"1\":{\"1383\":1}}],[\"包括mybatis的sql日志\",{\"1\":{\"952\":1}}],[\"包括mybatis的\",{\"1\":{\"947\":1}}],[\"包括mybatisplus\",{\"1\":{\"16\":1}}],[\"包\",{\"1\":{\"1289\":1,\"1293\":1,\"9487\":1}}],[\"包不匹配\",{\"1\":{\"665\":1}}],[\"包含内置角色\",{\"0\":{\"10659\":1}}],[\"包含一组控制索引创建的选项的文档\",{\"1\":{\"10390\":1}}],[\"包含一些实用工具类\",{\"1\":{\"3936\":1}}],[\"包含一些java语言的核心类\",{\"1\":{\"3933\":1}}],[\"包含使用$in操作符\",{\"1\":{\"10353\":1}}],[\"包含查询\",{\"0\":{\"10352\":1}}],[\"包含信息更多的倒排索引\",{\"1\":{\"9996\":1}}],[\"包含元素名和类型\",{\"1\":{\"9640\":1}}],[\"包含子集合\",{\"1\":{\"7655\":1}}],[\"包含所有学生数据\",{\"1\":{\"7655\":1}}],[\"包含姓名和年龄两个属性\",{\"1\":{\"7655\":1}}],[\"包含4中常用的函数式接口\",{\"1\":{\"7413\":1}}],[\"包含private方法\",{\"1\":{\"7102\":1}}],[\"包含的信息指示\",{\"1\":{\"6849\":1}}],[\"包含四季\",{\"1\":{\"4842\":1}}],[\"包含能提供多种输入\",{\"1\":{\"3935\":1}}],[\"包含执行与网络相关的操作的类和接口\",{\"1\":{\"3934\":1}}],[\"包含变量类型\",{\"1\":{\"2999\":1}}],[\"包含两个类的java文件\",{\"0\":{\"2915\":1}}],[\"包含目录\",{\"1\":{\"1973\":1,\"2021\":1}}],[\"包含后缀\",{\"1\":{\"1955\":1}}],[\"包含0\",{\"1\":{\"1802\":1}}],[\"包含\",{\"1\":{\"1799\":1,\"9292\":1}}],[\"包含时区支持的类\",{\"1\":{\"1629\":1}}],[\"包含值对象的基础包\",{\"1\":{\"1625\":1}}],[\"包含start\",{\"1\":{\"1587\":1}}],[\"包含spring框架部分功能\",{\"1\":{\"736\":1}}],[\"包含了很多正则\",{\"1\":{\"9637\":1}}],[\"包含了很多用来操作数据的方法\",{\"1\":{\"3593\":1}}],[\"包含了该jar包的版本\",{\"1\":{\"9473\":1}}],[\"包含了一个\",{\"1\":{\"9473\":1}}],[\"包含了一些java格式化相关的类\",{\"1\":{\"3937\":1}}],[\"包含了构成抽象窗口工具集\",{\"1\":{\"3939\":1}}],[\"包含了java进行jdbc数据库编程的相关类\",{\"1\":{\"3938\":1}}],[\"包含了所有可能的情况\",{\"1\":{\"2627\":1}}],[\"包含了用来操作数组\",{\"1\":{\"2349\":1}}],[\"包含了properties部分dependencies部分和build部分\",{\"1\":{\"1176\":1}}],[\"包含了几乎所有开发中可能用到的依赖\",{\"1\":{\"397\":1}}],[\"包含类\",{\"1\":{\"542\":1}}],[\"包含mybatis\",{\"1\":{\"89\":1}}],[\"热部署的具体配置\",{\"1\":{\"8654\":1}}],[\"热部署的时机\",{\"0\":{\"564\":1}}],[\"热部署模式\",{\"1\":{\"8587\":1,\"8646\":1}}],[\"热部署是纯开发阶段的功能\",{\"1\":{\"579\":1}}],[\"热部署是在开发阶段配置的\",{\"1\":{\"526\":1}}],[\"热部署监控的文件范围\",{\"0\":{\"566\":1}}],[\"热部署需要手动生效\",{\"1\":{\"552\":1}}],[\"热部署实现原理\",{\"0\":{\"528\":1}}],[\"热部署就是代码修改后\",{\"1\":{\"527\":1}}],[\"热部署\",{\"0\":{\"523\":1},\"1\":{\"77\":1,\"8597\":1}}],[\"基\",{\"1\":{\"6878\":1}}],[\"基类\",{\"1\":{\"4003\":1}}],[\"基于缓存查询\",{\"1\":{\"10427\":1}}],[\"基于索引查询\",{\"1\":{\"10425\":1}}],[\"基于以上原因可以分析得出\",{\"1\":{\"9856\":1}}],[\"基于上述理论\",{\"1\":{\"9020\":1}}],[\"基于socket的tcp编程\",{\"0\":{\"6785\":1}}],[\"基于springboot读取maven配置属性的前提下\",{\"1\":{\"869\":1}}],[\"基于通道的io操作\",{\"1\":{\"6581\":1}}],[\"基于\",{\"1\":{\"1219\":1}}],[\"基于vue+elementui制作\",{\"1\":{\"1193\":1}}],[\"基于restful开发\",{\"1\":{\"1191\":1}}],[\"基于mybatisplus进行增量开发\",{\"1\":{\"1190\":1}}],[\"基于原理理解基础上\",{\"1\":{\"298\":1}}],[\"基本查询\",{\"0\":{\"10304\":1}}],[\"基本查询示例\",{\"0\":{\"8035\":1}}],[\"基本一样\",{\"1\":{\"10242\":1}}],[\"基本url+路由\",{\"1\":{\"8709\":1}}],[\"基本url+路由的方式访问\",{\"1\":{\"8693\":1}}],[\"基本开发使用\",{\"0\":{\"8419\":1}}],[\"基本使用\",{\"0\":{\"8392\":1,\"8686\":1}}],[\"基本使用测试\",{\"0\":{\"2914\":1}}],[\"基本步骤与dml一致\",{\"1\":{\"7995\":1}}],[\"基本操作方法\",{\"0\":{\"6336\":1}}],[\"基本操作\",{\"0\":{\"6298\":1,\"6335\":1,\"10892\":1}}],[\"基本被抛弃\",{\"1\":{\"5836\":1}}],[\"基本的数据访问操作\",{\"1\":{\"9585\":1}}],[\"基本的使用\",{\"1\":{\"5771\":1}}],[\"基本的curdbasemapper中都定义了\",{\"1\":{\"1222\":1}}],[\"基本概念\",{\"0\":{\"5062\":1}}],[\"基本架构\",{\"0\":{\"4945\":1}}],[\"基本数据格式是integer\",{\"1\":{\"9642\":1}}],[\"基本数据格式\",{\"1\":{\"9642\":2}}],[\"基本数据和对应的包装类\",{\"0\":{\"4266\":1}}],[\"基本数据类型可序列化\",{\"1\":{\"6564\":1}}],[\"基本数据类型可以自动转为对应的包装类类型\",{\"1\":{\"4283\":1}}],[\"基本数据类型和string都已经实现该接口了\",{\"1\":{\"6560\":1}}],[\"基本数据类型和包装类与string类型的转换\",{\"0\":{\"4288\":1}}],[\"基本数据类型的变量写出到文件中\",{\"1\":{\"6481\":1}}],[\"基本数据类型的值\",{\"1\":{\"4656\":1}}],[\"基本数据类型的值当然也可以\",{\"1\":{\"4274\":1}}],[\"基本数据类型的值或标识符\",{\"1\":{\"4273\":1}}],[\"基本数据类型不用转换\",{\"1\":{\"4287\":1}}],[\"基本数据类型转换为包装类\",{\"0\":{\"4271\":1}}],[\"基本数据类型转string类型\",{\"1\":{\"1488\":1}}],[\"基本数据类型元素的数组\",{\"1\":{\"3474\":1}}],[\"基本数据类型\",{\"0\":{\"3071\":1,\"3779\":1,\"4289\":1,\"4655\":1},\"1\":{\"3022\":1,\"3656\":1,\"4052\":1,\"4227\":1,\"4269\":1,\"6987\":1}}],[\"基本数据类型会自动装箱\",{\"1\":{\"2403\":1}}],[\"基本类型\",{\"1\":{\"4933\":1}}],[\"基本类型数据转换为string\",{\"1\":{\"4261\":1}}],[\"基本类型或void\",{\"1\":{\"2152\":1}}],[\"基本变量\",{\"1\":{\"3781\":1}}],[\"基本代码规范\",{\"0\":{\"2987\":1}}],[\"基本语法规则\",{\"0\":{\"2900\":1}}],[\"基本语法\",{\"0\":{\"2878\":1,\"9600\":1},\"1\":{\"4890\":1}}],[\"基本配置\",{\"0\":{\"1362\":1}}],[\"基本配置文件\",{\"1\":{\"73\":1}}],[\"基本curd\",{\"0\":{\"1218\":1}}],[\"基本命令和windows上的相同\",{\"1\":{\"758\":1}}],[\"基本运维\",{\"0\":{\"10877\":1},\"1\":{\"80\":1}}],[\"基础类库下的类不用导包\",{\"1\":{\"9495\":1}}],[\"基础网址后面的部分\",{\"1\":{\"8937\":1}}],[\"基础数据类型\",{\"1\":{\"3775\":1}}],[\"基础的crud操作均由mybatisplus给我们提供\",{\"1\":{\"1227\":1}}],[\"基础操作可以保证正确性\",{\"1\":{\"262\":1,\"271\":1}}],[\"基础\",{\"0\":{\"10881\":1},\"1\":{\"69\":1}}],[\"介绍\",{\"0\":{\"284\":1,\"942\":1,\"1533\":1,\"1729\":1,\"3048\":1,\"3808\":1,\"4877\":1,\"5606\":1,\"5623\":1,\"5684\":1,\"5932\":1,\"6308\":1,\"6530\":1,\"6693\":1,\"7402\":1,\"7730\":1,\"7731\":1,\"8870\":1,\"8900\":1,\"9104\":1,\"9590\":1,\"10012\":1,\"10182\":1,\"10435\":1},\"1\":{\"70\":1,\"1380\":1}}],[\"项目组的一个子项目\",{\"1\":{\"9837\":1}}],[\"项目访问路径\",{\"1\":{\"9165\":1}}],[\"项目名\",{\"1\":{\"8629\":1}}],[\"项目名称叫sgugo\",{\"1\":{\"8503\":1}}],[\"项目路径\",{\"0\":{\"8588\":1}}],[\"项目部署\",{\"0\":{\"8580\":1}}],[\"项目部署步骤\",{\"0\":{\"748\":1}}],[\"项目的根目录\",{\"1\":{\"8496\":1}}],[\"项目存放的路径\",{\"1\":{\"8475\":1}}],[\"项目中\",{\"1\":{\"4437\":1}}],[\"项目中包含的jar包\",{\"1\":{\"545\":1}}],[\"项目介绍\",{\"0\":{\"1382\":1}}],[\"项目结构\",{\"0\":{\"1358\":1}}],[\"项目异常处理\",{\"1\":{\"1195\":1}}],[\"项目开发指南\",{\"0\":{\"10869\":1}}],[\"项目开发规范\",{\"0\":{\"1178\":1}}],[\"项目开发需要非常多的包\",{\"1\":{\"383\":1}}],[\"项目初始化\",{\"0\":{\"1058\":1}}],[\"项目类路径config目录中配置文件\",{\"1\":{\"797\":1}}],[\"项目类路径配置文件\",{\"1\":{\"796\":1}}],[\"项目目录是test1\",{\"1\":{\"8469\":1}}],[\"项目目录下\",{\"1\":{\"8463\":1}}],[\"项目目录\",{\"1\":{\"720\":1,\"728\":1,\"8468\":1}}],[\"项目默认有一个测试类\",{\"1\":{\"660\":1}}],[\"项目搭建完后\",{\"1\":{\"381\":1}}],[\"项目包\",{\"1\":{\"349\":1,\"721\":1}}],[\"项目就创建成功了\",{\"1\":{\"325\":1}}],[\"项目创建后是可以手动添加依赖的\",{\"1\":{\"323\":1}}],[\"项目在硬盘上的位置\",{\"1\":{\"309\":1}}],[\"项目上线后\",{\"1\":{\"927\":1}}],[\"项目上线\",{\"1\":{\"115\":1}}],[\"项目整体架构设计\",{\"1\":{\"112\":1}}],[\"项目经理\",{\"1\":{\"109\":1}}],[\"项目解析\",{\"0\":{\"366\":1},\"1\":{\"72\":1}}],[\"项目\",{\"0\":{\"26\":1},\"1\":{\"308\":1}}],[\"rbac\",{\"1\":{\"10646\":1}}],[\"rsh\",{\"1\":{\"8358\":2,\"8362\":1,\"8365\":1}}],[\"rsmd\",{\"1\":{\"8045\":3,\"8054\":3,\"8201\":6}}],[\"rs\",{\"1\":{\"8045\":6,\"8054\":6,\"8089\":8,\"8199\":1,\"8201\":17,\"8368\":1,\"8389\":6,\"10523\":1,\"10526\":1,\"10538\":1,\"10541\":1,\"10550\":1,\"10565\":1,\"10573\":1,\"10575\":1,\"10578\":1,\"10580\":1,\"10593\":1,\"10597\":2,\"10615\":1,\"10624\":1,\"10626\":1}}],[\"r工具\",{\"1\":{\"7795\":1}}],[\"r模式与rw模式\",{\"0\":{\"6512\":1}}],[\"rws\",{\"1\":{\"6511\":1}}],[\"rwd\",{\"1\":{\"6510\":1}}],[\"rw\",{\"1\":{\"6509\":1,\"6514\":1,\"6516\":1,\"6526\":1}}],[\"rmvb\",{\"1\":{\"6232\":1}}],[\"r>>\",{\"1\":{\"7647\":1}}],[\"r>\",{\"1\":{\"2639\":1,\"7434\":1,\"7523\":1}}],[\"rint\",{\"0\":{\"1818\":1},\"1\":{\"1820\":4}}],[\"ribbon\",{\"1\":{\"23\":1}}],[\"r2\",{\"1\":{\"1814\":2,\"5422\":1,\"7373\":2}}],[\"r1\",{\"1\":{\"1814\":2,\"7373\":2}}],[\"rand\",{\"1\":{\"10770\":1}}],[\"randomaccessfile对象\",{\"1\":{\"6516\":1,\"6526\":1}}],[\"randomaccessfile\",{\"1\":{\"6489\":1,\"6491\":1,\"6495\":2,\"6505\":2,\"6516\":4,\"6526\":2}}],[\"random\",{\"0\":{\"1801\":1},\"1\":{\"1804\":1,\"1805\":5,\"3658\":1,\"6949\":1,\"7593\":1}}],[\"raf1\",{\"1\":{\"6526\":4}}],[\"rafwrite\",{\"1\":{\"6516\":3}}],[\"rafread\",{\"1\":{\"6516\":3}}],[\"radix取值为\",{\"1\":{\"2341\":1,\"2798\":1}}],[\"radix指的是进制\",{\"1\":{\"2340\":1,\"2797\":1}}],[\"radix\",{\"1\":{\"2340\":1,\"2345\":7,\"2797\":1,\"2802\":7}}],[\"rabbitmq\",{\"0\":{\"1156\":1},\"1\":{\"25\":1,\"1177\":1}}],[\"rt\",{\"1\":{\"1795\":1,\"1844\":1,\"1865\":1,\"1871\":1,\"1940\":1,\"2026\":1,\"2027\":1,\"2065\":1,\"2066\":1,\"2128\":1,\"2214\":1,\"2250\":1,\"2317\":1,\"2472\":1,\"2522\":1,\"2572\":1,\"2628\":1,\"2708\":1,\"2763\":1,\"2774\":1,\"6324\":1,\"6327\":1,\"6330\":1,\"6333\":1,\"6694\":1}}],[\"r\",{\"1\":{\"1290\":2,\"1296\":6,\"1299\":12,\"1494\":1,\"2118\":1,\"2639\":1,\"6344\":1,\"6508\":1,\"6513\":1,\"6516\":1,\"7434\":1}}],[\"roles\",{\"1\":{\"10657\":1,\"10660\":7,\"10703\":1,\"10711\":1,\"10714\":1,\"10718\":1,\"10726\":3,\"10766\":1}}],[\"rolesinfo\",{\"1\":{\"10657\":1,\"10660\":1,\"10663\":3}}],[\"role\",{\"1\":{\"10646\":1,\"10660\":6,\"10663\":2,\"10703\":1,\"10711\":1,\"10714\":1,\"10718\":1,\"10726\":2}}],[\"rollbackandclosequietly\",{\"1\":{\"8346\":1}}],[\"rollbackandclose\",{\"1\":{\"8345\":1}}],[\"rollback\",{\"0\":{\"8137\":1},\"1\":{\"8138\":1,\"8148\":1,\"8344\":1}}],[\"rollingfileappender\",{\"1\":{\"952\":3}}],[\"rolling\",{\"1\":{\"952\":9}}],[\"rollingpolicy>\",{\"1\":{\"952\":3}}],[\"rollingpolicy\",{\"1\":{\"936\":1}}],[\"row\",{\"1\":{\"10060\":1}}],[\"rose\",{\"1\":{\"5913\":1}}],[\"rounding\",{\"1\":{\"1905\":1}}],[\"roundingmode\",{\"0\":{\"1908\":1},\"1\":{\"1898\":1,\"1899\":3,\"1907\":2}}],[\"round\",{\"0\":{\"1812\":1},\"1\":{\"1814\":3,\"1820\":3,\"1904\":1,\"1910\":1,\"1913\":1,\"1916\":1,\"1919\":1,\"1922\":1,\"1925\":1,\"1928\":1,\"1930\":1}}],[\"robots\",{\"1\":{\"1494\":1}}],[\"robot\",{\"1\":{\"1480\":2}}],[\"roots中对应的src目录勾选上\",{\"1\":{\"8741\":1}}],[\"root>\",{\"1\":{\"952\":2}}],[\"root节点是必选节点\",{\"1\":{\"952\":1}}],[\"root666123\",{\"1\":{\"516\":1}}],[\"root\",{\"1\":{\"516\":1,\"907\":1,\"969\":2,\"1206\":2,\"1364\":1,\"7852\":2,\"7862\":1,\"7865\":1,\"10205\":1,\"10670\":1,\"10697\":1,\"10703\":1,\"10711\":1,\"10726\":1,\"10766\":2,\"10816\":1,\"10846\":1}}],[\"runcommand\",{\"1\":{\"10657\":1,\"10660\":1,\"10663\":3}}],[\"run方法是该线程操作的入口\",{\"1\":{\"5172\":1}}],[\"run方法\",{\"0\":{\"5171\":1}}],[\"runner\",{\"1\":{\"8381\":2,\"8383\":2,\"8385\":2,\"8387\":2,\"8389\":2,\"8391\":3}}],[\"runnable实现的方式中\",{\"1\":{\"5340\":1}}],[\"runnable实现的\",{\"0\":{\"5339\":1}}],[\"runnable实现类的实例\",{\"1\":{\"5270\":1}}],[\"runnable的实现类实例\",{\"1\":{\"5272\":1}}],[\"runnable类型的变量的\",{\"1\":{\"5268\":1}}],[\"runnabletest\",{\"1\":{\"5263\":1,\"5322\":1,\"5345\":1}}],[\"runnable接口的run函数\",{\"0\":{\"7372\":1}}],[\"runnable接口创建多线程的步骤\",{\"0\":{\"5256\":1}}],[\"runnable接口是创建多线程的方式之一\",{\"1\":{\"5255\":1}}],[\"runnable接口\",{\"0\":{\"5254\":1}}],[\"runnable\",{\"1\":{\"5169\":1,\"5170\":1,\"5263\":1,\"5283\":1,\"5310\":1,\"5322\":1,\"5345\":1,\"5396\":1,\"5426\":1,\"5464\":1,\"5502\":1,\"5517\":1,\"7373\":3}}],[\"running\",{\"1\":{\"882\":2,\"888\":2,\"955\":2}}],[\"runtime\",{\"1\":{\"2843\":1,\"4967\":1,\"4968\":1,\"4979\":1,\"4985\":1,\"5001\":1,\"5037\":1,\"5040\":1,\"5060\":1,\"8837\":1}}],[\"runtimeexception类作为参数\",{\"1\":{\"4731\":1}}],[\"runtimeexception类及它的子类都是运行时异常\",{\"1\":{\"4705\":1}}],[\"runtimeexception\",{\"1\":{\"1769\":1,\"1788\":1,\"4699\":1,\"4799\":1,\"4800\":1,\"4803\":1,\"5790\":1,\"5794\":1,\"5916\":1}}],[\"run\",{\"1\":{\"425\":1,\"427\":1,\"430\":1,\"584\":1,\"781\":3,\"5185\":2,\"5197\":1,\"5206\":1,\"5219\":1,\"5221\":1,\"5253\":1,\"5258\":1,\"5263\":2,\"5290\":1,\"5310\":1,\"5314\":1,\"5322\":1,\"5338\":1,\"5345\":1,\"5396\":1,\"5426\":2,\"5464\":1,\"5517\":1,\"7373\":3,\"8578\":1,\"8604\":1,\"8610\":1}}],[\"reconfig\",{\"1\":{\"10585\":2,\"10597\":1,\"10626\":1}}],[\"received\",{\"1\":{\"9899\":1}}],[\"receive\",{\"1\":{\"6843\":1,\"6850\":1}}],[\"requires\",{\"1\":{\"10744\":1}}],[\"required\",{\"1\":{\"9642\":2}}],[\"required>\",{\"1\":{\"9631\":1}}],[\"requset\",{\"1\":{\"9112\":1}}],[\"requestinitialized\",{\"1\":{\"9353\":1}}],[\"request就销毁\",{\"1\":{\"9191\":1}}],[\"request域对象\",{\"0\":{\"9186\":1}}],[\"request域\",{\"1\":{\"9116\":1}}],[\"requestdestroyed\",{\"1\":{\"9355\":1}}],[\"requestdemo2\",{\"1\":{\"9027\":1}}],[\"requestdemo1\",{\"1\":{\"9004\":1,\"9031\":1}}],[\"requestdispatcher\",{\"1\":{\"9112\":1}}],[\"request参数处理\",{\"0\":{\"9008\":1}}],[\"requests\",{\"1\":{\"8963\":1}}],[\"requesturi\",{\"1\":{\"8944\":2}}],[\"requesturl\",{\"1\":{\"8944\":2}}],[\"requestfacade\",{\"0\":{\"8907\":1},\"1\":{\"8908\":1}}],[\"request的继承体系为servletrequest\",{\"1\":{\"8914\":1}}],[\"request的继承体系\",{\"0\":{\"8904\":1}}],[\"request的作用\",{\"0\":{\"8887\":1}}],[\"request和response也存在自己的继承体系\",{\"1\":{\"8903\":1}}],[\"request和response对象是由服务器创建的\",{\"1\":{\"8872\":1}}],[\"request继承体系\",{\"0\":{\"8899\":1}}],[\"request对象在获取请求参数前先修改编码\",{\"1\":{\"9048\":1}}],[\"request对象为我们提供了如下方法\",{\"1\":{\"9020\":1}}],[\"request对象内部提供了更加强大的方法\",{\"1\":{\"9007\":1}}],[\"request对象被销毁后\",{\"1\":{\"8992\":1}}],[\"request对象提供了如下两种方式来获取其中的数据\",{\"1\":{\"8978\":1}}],[\"request对象都提供了对应的api方法来获取\",{\"1\":{\"8927\":1}}],[\"request对象是用来封装请求数据的对象\",{\"1\":{\"8888\":1}}],[\"request对象是来获取请求消息\",{\"1\":{\"8872\":1}}],[\"request对象中封装请求消息数据\",{\"1\":{\"8879\":1}}],[\"request是请求对象\",{\"1\":{\"8871\":1}}],[\"request\",{\"0\":{\"8923\":1,\"9103\":1},\"1\":{\"8704\":1,\"8817\":3,\"8944\":10,\"8951\":3,\"8955\":2,\"8990\":2,\"9025\":1,\"9029\":1,\"9048\":2,\"9054\":1,\"9079\":1,\"9112\":1,\"9124\":6,\"9143\":1,\"9145\":1,\"9174\":1,\"9196\":1,\"9220\":2,\"9262\":1,\"9270\":2,\"9290\":1,\"9295\":1,\"9298\":1,\"9687\":1,\"9750\":1,\"9764\":1}}],[\"requestbody\",{\"1\":{\"1276\":2,\"1278\":1,\"1299\":2}}],[\"requestmapping\",{\"1\":{\"372\":1,\"882\":1,\"888\":1,\"955\":1,\"1276\":1,\"1299\":1}}],[\"req2\",{\"1\":{\"9025\":1,\"9027\":1}}],[\"req1\",{\"1\":{\"9004\":1}}],[\"req\",{\"1\":{\"8772\":1,\"8809\":4,\"8817\":5,\"8912\":1,\"9004\":6,\"9027\":7,\"9031\":3,\"9112\":1,\"9234\":1,\"9249\":1,\"9693\":1,\"9695\":2,\"9750\":1}}],[\"rewritebatchedstatements=true\",{\"1\":{\"8119\":1,\"8263\":1}}],[\"relational\",{\"0\":{\"8028\":1}}],[\"reachable\",{\"1\":{\"6711\":2}}],[\"real\",{\"1\":{\"5517\":4}}],[\"readanydatabase\",{\"1\":{\"10666\":1,\"10679\":1}}],[\"readable\",{\"1\":{\"2031\":1}}],[\"readwriteanydatabase\",{\"1\":{\"10666\":1,\"10681\":1}}],[\"readwrite\",{\"1\":{\"10660\":1,\"10665\":1,\"10677\":1,\"10718\":1,\"10726\":1}}],[\"readconcernmajorityoptime\",{\"1\":{\"10554\":1}}],[\"readchar\",{\"1\":{\"6470\":1}}],[\"ready\",{\"1\":{\"10164\":1,\"10498\":1}}],[\"readme\",{\"0\":{\"6689\":1,\"8572\":1}}],[\"readobject\",{\"0\":{\"6547\":1},\"1\":{\"6549\":1,\"6557\":1,\"6573\":2}}],[\"readfully\",{\"1\":{\"6477\":1}}],[\"readfloat\",{\"1\":{\"6471\":1}}],[\"readutf\",{\"1\":{\"6476\":1,\"6487\":1}}],[\"readint\",{\"1\":{\"6475\":1,\"6487\":1}}],[\"readlong\",{\"1\":{\"6474\":1}}],[\"readline是一直等待输入的\",{\"1\":{\"6346\":1}}],[\"readline\",{\"0\":{\"2116\":1,\"6342\":1},\"1\":{\"2121\":2,\"6344\":1,\"6348\":2,\"6449\":1,\"8990\":1,\"9004\":1}}],[\"readshort\",{\"1\":{\"6473\":1}}],[\"readdouble\",{\"1\":{\"6472\":1}}],[\"readdata\",{\"1\":{\"2042\":4}}],[\"readbyte\",{\"1\":{\"6469\":1}}],[\"readboolean\",{\"1\":{\"6468\":1,\"6487\":1}}],[\"read方法\",{\"1\":{\"6300\":1}}],[\"readerres\",{\"1\":{\"2042\":2}}],[\"reader\",{\"0\":{\"2024\":1,\"6190\":1,\"6195\":1},\"1\":{\"2031\":2,\"2040\":1,\"2042\":4,\"2046\":1,\"2048\":4,\"2062\":2,\"6176\":1,\"6191\":1,\"6331\":2,\"6382\":1,\"9004\":2}}],[\"read\",{\"0\":{\"2037\":1,\"2043\":1,\"2056\":1,\"6240\":1,\"6390\":1},\"1\":{\"1987\":1,\"2042\":5,\"2045\":1,\"2046\":1,\"2048\":5,\"2059\":2,\"4724\":2,\"4753\":2,\"4777\":2,\"6243\":1,\"6251\":2,\"6254\":2,\"6287\":1,\"6306\":1,\"6353\":2,\"6398\":1,\"6411\":1,\"6516\":1,\"6819\":1,\"8089\":1,\"8156\":1,\"8157\":1,\"8158\":1,\"8162\":1,\"9095\":1,\"10660\":1,\"10665\":1,\"10675\":1}}],[\"reintyranttest\",{\"1\":{\"5396\":1}}],[\"reentrantlock\",{\"1\":{\"5383\":1,\"5384\":2,\"5389\":1,\"5396\":3}}],[\"reentrantlock类\",{\"0\":{\"5382\":1}}],[\"rentention\",{\"1\":{\"4981\":1}}],[\"renameto\",{\"0\":{\"2011\":1},\"1\":{\"2015\":2}}],[\"retrival\",{\"1\":{\"8167\":1}}],[\"retentionpolicy\",{\"0\":{\"4962\":1},\"1\":{\"4947\":1,\"4952\":1,\"4955\":1,\"4956\":1,\"4963\":3,\"4968\":1,\"4978\":1,\"4979\":1,\"4983\":1,\"4984\":1,\"4985\":1,\"5001\":1,\"5037\":1,\"5040\":1,\"5043\":1,\"5060\":2,\"8837\":1}}],[\"retention\",{\"0\":{\"4976\":1},\"1\":{\"4907\":1,\"4972\":1,\"4978\":1,\"4979\":1,\"5001\":1,\"5037\":1,\"5040\":1,\"5043\":1,\"5060\":2,\"8837\":1}}],[\"retainall\",{\"0\":{\"2434\":1},\"1\":{\"2436\":2}}],[\"return必须省略\",{\"1\":{\"7367\":1}}],[\"return也可以省略\",{\"1\":{\"7367\":1}}],[\"returnval\",{\"1\":{\"7161\":2}}],[\"returnvalue\",{\"1\":{\"7161\":2,\"7279\":2,\"7307\":2}}],[\"return终止了该代码块\",{\"1\":{\"5366\":1}}],[\"return关键字后面不可以声明执行语句\",{\"1\":{\"3734\":1}}],[\"return关键字\",{\"0\":{\"3730\":1},\"1\":{\"7356\":1}}],[\"return关键字来返回指定类型的变量或常量\",{\"1\":{\"3721\":1}}],[\"return直接结束整个方法\",{\"1\":{\"3439\":1}}],[\"returntype\",{\"1\":{\"2266\":2}}],[\"return\",{\"0\":{\"3437\":1},\"1\":{\"372\":1,\"598\":1,\"602\":1,\"623\":1,\"882\":1,\"888\":1,\"955\":1,\"1234\":1,\"1265\":5,\"1276\":6,\"1290\":1,\"1299\":6,\"1763\":4,\"1769\":5,\"1788\":1,\"1791\":3,\"2003\":1,\"2006\":1,\"2009\":1,\"2365\":3,\"2391\":1,\"2492\":1,\"2970\":1,\"2974\":3,\"3424\":1,\"3718\":1,\"3721\":1,\"3723\":1,\"3733\":1,\"3738\":1,\"3754\":2,\"3821\":1,\"3990\":1,\"4039\":1,\"4241\":7,\"4253\":1,\"4259\":1,\"4332\":3,\"4394\":2,\"4422\":1,\"4425\":1,\"4585\":1,\"4751\":3,\"4824\":1,\"4843\":3,\"5350\":2,\"5486\":1,\"5790\":2,\"5794\":1,\"5916\":1,\"6045\":1,\"6949\":1,\"6952\":1,\"6956\":3,\"7277\":1,\"7279\":1,\"7307\":1,\"7388\":1,\"7390\":2,\"7655\":3,\"7673\":1,\"7975\":1,\"8045\":2,\"8054\":2,\"8201\":8,\"8207\":4,\"8324\":1,\"8389\":2,\"8781\":1,\"8784\":1}}],[\"removeattribute\",{\"1\":{\"9119\":1,\"9209\":1,\"9248\":1,\"9757\":1}}],[\"removeall\",{\"0\":{\"2430\":1},\"1\":{\"2433\":2}}],[\"remove方法用来在遍历的时候\",{\"1\":{\"2467\":1,\"5602\":1}}],[\"remove\",{\"0\":{\"2427\":1,\"2466\":1,\"2556\":1,\"2593\":1,\"5601\":1},\"1\":{\"2429\":2,\"2468\":1,\"2469\":2,\"2563\":5,\"2595\":3,\"2877\":1,\"5603\":1,\"5604\":1,\"10300\":2,\"10302\":2}}],[\"remove等操作都是默认抛出异常的\",{\"1\":{\"2384\":1}}],[\"reverse\",{\"0\":{\"1602\":1,\"2482\":1},\"1\":{\"1604\":2,\"2484\":2}}],[\"repair\",{\"1\":{\"10861\":1}}],[\"reponse的继承体系和request的继承体系也非常相似\",{\"1\":{\"8918\":1}}],[\"repository\",{\"1\":{\"391\":1}}],[\"replset\",{\"1\":{\"10537\":1}}],[\"replsetname\",{\"1\":{\"10496\":1}}],[\"replicaset\",{\"0\":{\"10791\":1}}],[\"replicasetid\",{\"1\":{\"10541\":1}}],[\"replication\",{\"1\":{\"10496\":1}}],[\"replicate\",{\"1\":{\"10456\":1}}],[\"replica\",{\"1\":{\"10021\":1,\"10438\":1}}],[\"repl工具\",{\"0\":{\"7769\":1}}],[\"replacefirst\",{\"0\":{\"1519\":1,\"2693\":1},\"1\":{\"1521\":2,\"2697\":2}}],[\"replaceall\",{\"0\":{\"1516\":1,\"2513\":1,\"2688\":1},\"1\":{\"1518\":2,\"2515\":2,\"2692\":2}}],[\"replacement\",{\"1\":{\"1515\":1,\"1518\":1,\"1521\":1,\"2692\":1,\"2697\":1}}],[\"replace\",{\"0\":{\"1509\":1,\"1510\":1,\"1513\":1,\"1590\":1},\"1\":{\"1512\":2,\"1515\":2,\"1595\":2}}],[\"repeatable\",{\"1\":{\"4911\":1,\"5019\":1,\"5022\":1,\"8158\":1}}],[\"representable\",{\"1\":{\"1894\":1}}],[\"regular\",{\"1\":{\"10083\":1}}],[\"registerdriver\",{\"1\":{\"7862\":1}}],[\"regist\",{\"1\":{\"4803\":2}}],[\"registry\",{\"1\":{\"1376\":3}}],[\"regex\",{\"1\":{\"1518\":1,\"1521\":1,\"1524\":1,\"1529\":2,\"2664\":1,\"2668\":1,\"2673\":1,\"2683\":2,\"2692\":3,\"2697\":3,\"2700\":3,\"2705\":2,\"2717\":4,\"2747\":2,\"2750\":2,\"2753\":1,\"2756\":4,\"2760\":2}}],[\"reggie\",{\"1\":{\"1364\":2}}],[\"refresh\",{\"1\":{\"10197\":1}}],[\"reflect包的方法对类进行反射调用\",{\"1\":{\"7026\":1}}],[\"reflectionstudy\",{\"1\":{\"6994\":1,\"6997\":1,\"7000\":2,\"7002\":2,\"7054\":1,\"7074\":1,\"7075\":1,\"7081\":1,\"7082\":1,\"7083\":1,\"7108\":1}}],[\"reflection\",{\"0\":{\"6921\":1},\"1\":{\"6922\":1}}],[\"reflect\",{\"1\":{\"3965\":1,\"5060\":1,\"6941\":1,\"6942\":1,\"6943\":1}}],[\"references\",{\"1\":{\"7442\":1}}],[\"reference类型\",{\"1\":{\"4634\":1}}],[\"reference\",{\"1\":{\"3034\":1}}],[\"ref=\",{\"1\":{\"952\":9}}],[\"ref\",{\"1\":{\"952\":9}}],[\"redirect与forward的区别\",{\"0\":{\"9154\":1}}],[\"redirect\",{\"1\":{\"9130\":1,\"9155\":1}}],[\"redis主要把数据存储在内存中\",{\"1\":{\"10119\":1}}],[\"redis客户端选择\",{\"0\":{\"1039\":1}}],[\"redis内部不支持java对象的储存格式\",{\"1\":{\"1034\":1}}],[\"redistest\",{\"1\":{\"1029\":1}}],[\"redistemplate\",{\"0\":{\"1022\":1},\"1\":{\"1029\":4}}],[\"redis基础配置\",{\"0\":{\"1020\":1}}],[\"redis<\",{\"1\":{\"1019\":1,\"1154\":1,\"1177\":1}}],[\"redis\",{\"0\":{\"278\":1,\"1017\":1,\"1153\":1,\"10115\":1},\"1\":{\"90\":1,\"1021\":1,\"1048\":1,\"1051\":1,\"1177\":1,\"1392\":1,\"10122\":1}}],[\"redeploy\",{\"1\":{\"8598\":1}}],[\"reduce模式\",{\"0\":{\"7713\":1}}],[\"reduce\",{\"0\":{\"7703\":1,\"7709\":1},\"1\":{\"7708\":4,\"7712\":4,\"7714\":2,\"7716\":3}}],[\"red\",{\"1\":{\"920\":1}}],[\"resp\",{\"1\":{\"8809\":4,\"8912\":1,\"9004\":3,\"9027\":3,\"9031\":3,\"9112\":1,\"9220\":1,\"9234\":1,\"9249\":1,\"9693\":1,\"9695\":1,\"9750\":1}}],[\"responsedemo2两个类都被访问到了\",{\"1\":{\"9149\":1}}],[\"responsedemo2\",{\"0\":{\"9144\":1},\"1\":{\"9145\":2,\"9148\":1}}],[\"responsedemo1类将请求转发给responsedemo2\",{\"1\":{\"9141\":1}}],[\"responsedemo1\",{\"0\":{\"9142\":1},\"1\":{\"9079\":1,\"9143\":2,\"9148\":1,\"9149\":1}}],[\"response重定向\",{\"1\":{\"9130\":1}}],[\"response响应字符数据\",{\"1\":{\"9072\":1}}],[\"response对象就会被销毁掉\",{\"1\":{\"9087\":1}}],[\"response对象提供了不同的方法还出了这三种响应内容\",{\"1\":{\"9058\":1}}],[\"response对象是用来做http响应的\",{\"1\":{\"9057\":1}}],[\"response对象是用来封装响应数据的对象\",{\"1\":{\"8894\":1}}],[\"response对象是来设置响应消息\",{\"1\":{\"8872\":1}}],[\"responsefacade\",{\"0\":{\"8921\":1}}],[\"response继承体系\",{\"0\":{\"8917\":1}}],[\"response的作用\",{\"0\":{\"8893\":1}}],[\"response是响应对象\",{\"1\":{\"8871\":1}}],[\"response\",{\"0\":{\"9055\":1,\"9056\":1,\"9129\":1},\"1\":{\"8704\":1,\"8817\":1,\"8944\":2,\"8951\":1,\"8955\":1,\"8990\":1,\"9075\":1,\"9079\":2,\"9082\":2,\"9085\":2,\"9091\":1,\"9095\":1,\"9099\":1,\"9101\":2,\"9112\":1,\"9124\":3,\"9139\":3,\"9143\":3,\"9145\":1,\"9174\":1,\"9262\":1,\"9270\":2,\"9684\":1,\"9693\":1,\"9714\":2,\"9717\":1,\"9726\":1,\"9774\":1}}],[\"res4\",{\"1\":{\"2429\":2}}],[\"res3\",{\"1\":{\"2426\":2}}],[\"resultsethandler<customer>\",{\"1\":{\"8389\":2}}],[\"resultsethandler<t>\",{\"1\":{\"8358\":1,\"8362\":1}}],[\"resultsethandler接口及实现类\",{\"0\":{\"8367\":1}}],[\"resultsethandler\",{\"1\":{\"8336\":1,\"8365\":1,\"8368\":1}}],[\"resultsetmetadata\",{\"1\":{\"8045\":2,\"8054\":2,\"8201\":4}}],[\"resultsetmetadate\",{\"1\":{\"8019\":1}}],[\"resultsetmetadate对象的常用方法\",{\"0\":{\"8020\":1}}],[\"resultsetmetadate对象\",{\"0\":{\"8017\":1}}],[\"resultset接口的方法\",{\"0\":{\"8006\":1}}],[\"resultset介绍\",{\"0\":{\"8001\":1}}],[\"resultset对象\",{\"0\":{\"7997\":1}}],[\"resultset\",{\"1\":{\"7965\":1,\"8000\":1,\"8002\":2,\"8004\":2,\"8009\":1,\"8016\":1,\"8018\":1,\"8019\":1,\"8023\":1,\"8037\":9,\"8045\":1,\"8054\":1,\"8089\":1,\"8199\":1,\"8201\":3,\"8358\":1,\"8365\":1,\"8368\":2,\"8389\":1}}],[\"result5\",{\"1\":{\"2433\":1}}],[\"result3\",{\"1\":{\"2022\":2}}],[\"result2\",{\"1\":{\"2022\":2,\"7390\":2}}],[\"result\",{\"1\":{\"1894\":1,\"2022\":2,\"2416\":2,\"3253\":4,\"7390\":2,\"8358\":1}}],[\"res\",{\"1\":{\"1771\":2,\"1805\":2,\"1853\":2,\"1899\":2,\"1937\":2,\"1979\":2,\"1982\":2,\"1985\":2,\"1989\":2,\"1993\":2,\"2003\":2,\"2006\":2,\"2009\":2,\"2015\":2,\"2379\":2,\"2436\":2,\"2461\":2,\"2546\":2,\"2552\":2,\"2555\":2,\"2615\":2,\"2692\":2,\"2697\":2,\"2700\":2,\"2747\":2,\"2756\":2,\"2760\":2,\"6819\":2,\"8772\":1,\"8817\":4}}],[\"resolve\",{\"1\":{\"6608\":1}}],[\"resolved\",{\"1\":{\"1707\":1,\"1719\":1}}],[\"resourcehandlerregistry\",{\"1\":{\"1376\":1}}],[\"resource\",{\"1\":{\"790\":1,\"6865\":1,\"6909\":1,\"6910\":1,\"6911\":1,\"8568\":1,\"8595\":1,\"8596\":1,\"8597\":1,\"8601\":1,\"10651\":1,\"10652\":1}}],[\"resources目录下的static目录中\",{\"1\":{\"1302\":1}}],[\"resources\",{\"1\":{\"570\":1,\"571\":1,\"789\":1,\"949\":1,\"1102\":1,\"1119\":1}}],[\"res2\",{\"1\":{\"1424\":2,\"2604\":2,\"2606\":2,\"2612\":2}}],[\"res1\",{\"1\":{\"1424\":2,\"1907\":2,\"2422\":2,\"2604\":2,\"2606\":2,\"2612\":2}}],[\"restore\",{\"1\":{\"10669\":1,\"10695\":1}}],[\"restful\",{\"1\":{\"9892\":1,\"9905\":1}}],[\"restful+postman+数据格式\",{\"1\":{\"212\":1}}],[\"restriction>\",{\"1\":{\"9642\":3}}],[\"restriction\",{\"1\":{\"9642\":3}}],[\"restart\",{\"0\":{\"541\":1},\"1\":{\"577\":1,\"581\":1,\"584\":1,\"8599\":1}}],[\"restart类加载器执行\",{\"1\":{\"543\":1}}],[\"restart类加载器\",{\"1\":{\"540\":1}}],[\"restcontrolleradvice\",{\"1\":{\"1290\":1}}],[\"restcontroller\",{\"1\":{\"372\":1,\"882\":1,\"888\":1,\"955\":1,\"1299\":1}}],[\"lucene只是一个提供全文搜索功能类库的核心工具包\",{\"1\":{\"9837\":1}}],[\"lucene\",{\"0\":{\"9836\":1},\"1\":{\"9837\":1,\"9838\":1,\"9895\":1}}],[\"l2\",{\"1\":{\"3173\":1}}],[\"l1\",{\"1\":{\"3173\":1}}],[\"lts版本\",{\"1\":{\"7315\":1,\"7316\":1,\"7317\":1}}],[\"lts\",{\"0\":{\"7314\":1,\"7764\":1}}],[\"lt\",{\"1\":{\"1651\":1}}],[\"ltnow\",{\"1\":{\"1648\":2}}],[\"ldtstr\",{\"1\":{\"1705\":2}}],[\"ldt8\",{\"1\":{\"1657\":2,\"1660\":2,\"1663\":1}}],[\"ldt7\",{\"1\":{\"1657\":2,\"1660\":2,\"1663\":1}}],[\"ldt6\",{\"1\":{\"1657\":2,\"1660\":2,\"1663\":1}}],[\"ldt5\",{\"1\":{\"1657\":2,\"1660\":2,\"1663\":1}}],[\"ldt4\",{\"1\":{\"1657\":2,\"1660\":2,\"1663\":1}}],[\"ldt3\",{\"1\":{\"1657\":2,\"1660\":2,\"1663\":1,\"1719\":2}}],[\"ldt2\",{\"1\":{\"1657\":2,\"1660\":2,\"1663\":1,\"1719\":2}}],[\"ldt1\",{\"1\":{\"1657\":2,\"1660\":2,\"1663\":1}}],[\"ldt\",{\"1\":{\"1651\":1,\"1654\":4,\"1657\":9,\"1660\":9,\"1663\":9,\"1705\":2,\"1725\":2}}],[\"ldtnow\",{\"1\":{\"1648\":2,\"1654\":5}}],[\"ld\",{\"1\":{\"1651\":1}}],[\"ldnow\",{\"1\":{\"1648\":2}}],[\"l\",{\"1\":{\"1494\":1,\"3080\":2}}],[\"ll\",{\"1\":{\"1455\":2,\"1458\":1}}],[\"lqw\",{\"1\":{\"1252\":3,\"1256\":4,\"1265\":5}}],[\"lexicon\",{\"1\":{\"9972\":1}}],[\"le\",{\"1\":{\"6411\":1}}],[\"legnth\",{\"1\":{\"3658\":1}}],[\"learn\",{\"1\":{\"1950\":1,\"2314\":1,\"7827\":1}}],[\"len2\",{\"1\":{\"1763\":3}}],[\"len1\",{\"1\":{\"1763\":3}}],[\"len\",{\"1\":{\"1584\":1,\"2048\":5,\"2059\":2,\"2096\":1,\"2098\":2,\"2104\":2,\"2105\":1,\"6254\":3,\"6260\":1,\"6287\":3,\"6306\":3,\"6353\":5,\"6398\":1,\"6411\":2,\"6516\":3,\"8089\":3,\"9095\":3}}],[\"length参数必须小于等于\",{\"1\":{\"6858\":1}}],[\"length并不能代表真实的字符数\",{\"1\":{\"6264\":1}}],[\"length==0\",{\"1\":{\"1441\":1}}],[\"length\",{\"0\":{\"1419\":1,\"1579\":1,\"1960\":1},\"1\":{\"1421\":2,\"1574\":1,\"1581\":4,\"1595\":1,\"1763\":2,\"1963\":4,\"2045\":1,\"2103\":2,\"2375\":1,\"3486\":2,\"3509\":1,\"3512\":1,\"3567\":2,\"3570\":2,\"3803\":1,\"5618\":2,\"5620\":1,\"6264\":1,\"6840\":1,\"6843\":1,\"6850\":1,\"6857\":4,\"6858\":3,\"6861\":1,\"7106\":6,\"7535\":2,\"7989\":1,\"8045\":1,\"8054\":1,\"8146\":1,\"8201\":4}}],[\"lettuce\",{\"1\":{\"1051\":1}}],[\"lettcus基于netty框架进行与redis服务器连接\",{\"1\":{\"1043\":1}}],[\"lettcus与jedis区别\",{\"0\":{\"1041\":1}}],[\"level指定的版本不支持新语法\",{\"1\":{\"7329\":1}}],[\"level是编辑器用来对代码进行语言检查的版本\",{\"1\":{\"7328\":1}}],[\"level=\",{\"1\":{\"952\":5}}],[\"levelfilter\",{\"1\":{\"952\":3}}],[\"level为\",{\"1\":{\"952\":3}}],[\"level>\",{\"1\":{\"952\":4}}],[\"level\",{\"0\":{\"7327\":1},\"1\":{\"907\":1,\"952\":2,\"8160\":1}}],[\"large\",{\"1\":{\"8078\":1}}],[\"lambda要实现的操作\",{\"1\":{\"7464\":1}}],[\"lambda与创建functional对象\",{\"0\":{\"7419\":1}}],[\"lambda的使用\",{\"0\":{\"7368\":1}}],[\"lambda体应该使用一对\",{\"1\":{\"7365\":1}}],[\"lambda体\",{\"1\":{\"7348\":1}}],[\"lambda形参列表的参数类型可以省略\",{\"1\":{\"7361\":1}}],[\"lambda形参列表\",{\"1\":{\"7347\":1}}],[\"lambda操作符或箭头操作符\",{\"1\":{\"7346\":1}}],[\"lambda本质\",{\"0\":{\"7338\":1}}],[\"lambda表达式写法\",{\"0\":{\"7461\":1}}],[\"lambda表达式的使用\",{\"1\":{\"7369\":1}}],[\"lambda表达式的本质\",{\"1\":{\"7339\":1}}],[\"lambda表达式中无需指定类型\",{\"1\":{\"7358\":1}}],[\"lambda表达式\",{\"0\":{\"7334\":1,\"7472\":1}}],[\"lambda\",{\"0\":{\"7331\":1,\"7479\":1,\"7486\":1,\"7494\":1,\"7509\":1,\"7516\":1,\"7524\":1,\"7534\":1},\"1\":{\"7336\":1,\"7358\":2,\"7373\":1,\"7377\":1,\"7420\":2,\"7615\":1}}],[\"lambdaquerywrapper<book>\",{\"1\":{\"1252\":2,\"1256\":2,\"1265\":2}}],[\"lambdaquerywrapper\",{\"0\":{\"1249\":1}}],[\"laddr\",{\"1\":{\"6847\":1}}],[\"lass\",{\"1\":{\"6019\":1}}],[\"lastheartbeatrecv\",{\"1\":{\"10576\":1,\"10583\":1}}],[\"lastheartbeat\",{\"1\":{\"10576\":1,\"10583\":1}}],[\"lastheartbeatmessage\",{\"1\":{\"10554\":1,\"10576\":1,\"10583\":1}}],[\"lastseenoptimeatelection\",{\"1\":{\"10554\":1}}],[\"laststablerecoverytimestamp\",{\"1\":{\"10554\":1}}],[\"lastelectiondate\",{\"1\":{\"10554\":1}}],[\"lastelectionreason\",{\"1\":{\"10554\":1}}],[\"lastdurablewalltime\",{\"1\":{\"10554\":2,\"10576\":1}}],[\"lastappliedwalltime\",{\"1\":{\"10554\":2,\"10576\":1}}],[\"lastcommittedwalltime\",{\"1\":{\"10554\":1}}],[\"lastcommittedoptimeatelection\",{\"1\":{\"10554\":1}}],[\"lastcommittedoptime\",{\"1\":{\"10554\":1}}],[\"lastmodified\",{\"0\":{\"1964\":1},\"1\":{\"1966\":2}}],[\"lastindexof\",{\"0\":{\"1436\":1,\"2553\":1},\"1\":{\"1438\":3,\"2555\":2}}],[\"label\",{\"1\":{\"3444\":3}}],[\"launcher$extclassloader\",{\"1\":{\"2168\":1,\"7043\":1}}],[\"launcher$appclassloader\",{\"1\":{\"2165\":1,\"7043\":1}}],[\"lang包下\",{\"1\":{\"9495\":1}}],[\"lang包下定义的\",{\"1\":{\"3952\":1}}],[\"lang包无需导入\",{\"1\":{\"3964\":1}}],[\"lang包\",{\"1\":{\"3952\":1}}],[\"lang\",{\"1\":{\"1735\":1,\"1777\":2,\"1796\":1,\"1867\":1,\"2156\":1,\"2162\":1,\"2175\":1,\"2211\":1,\"2272\":1,\"2949\":1,\"2954\":1,\"3933\":1,\"3965\":1,\"4023\":1,\"4024\":2,\"4025\":1,\"4112\":1,\"4203\":1,\"4244\":1,\"4670\":2,\"4699\":3,\"4705\":1,\"4851\":1,\"4922\":1,\"4957\":1,\"4961\":1,\"4968\":1,\"5060\":7,\"5158\":1,\"5437\":1,\"5455\":1,\"5572\":1,\"5983\":1,\"6489\":1,\"6940\":1,\"6941\":1,\"6942\":1,\"6943\":1,\"6949\":1,\"6965\":1,\"6989\":2,\"7011\":1,\"7026\":1,\"7081\":1,\"7092\":1,\"7114\":1,\"7120\":2,\"7123\":2,\"8347\":1}}],[\"lang=>\",{\"1\":{\"1415\":1}}],[\"lang<\",{\"1\":{\"1361\":2}}],[\"language\",{\"1\":{\"310\":1,\"3630\":1,\"8971\":1,\"9591\":1}}],[\"layers\",{\"1\":{\"734\":2}}],[\"lily\",{\"1\":{\"5060\":1}}],[\"literal\",{\"1\":{\"2733\":1}}],[\"limilt\",{\"1\":{\"10340\":1}}],[\"limit\",{\"0\":{\"7620\":1},\"1\":{\"1527\":1,\"1529\":1,\"2703\":1,\"2705\":1,\"2759\":1,\"7590\":1,\"7593\":1,\"7600\":1,\"7623\":2,\"7625\":1,\"10331\":1,\"10333\":2,\"10340\":1}}],[\"lim\",{\"1\":{\"1763\":2}}],[\"likenum\",{\"1\":{\"10252\":1,\"10264\":2,\"10290\":1,\"10296\":1,\"10339\":1,\"10351\":1,\"10357\":3,\"10603\":1}}],[\"like\",{\"1\":{\"1248\":1,\"1252\":1,\"1256\":2,\"1265\":3}}],[\"likes1\",{\"1\":{\"503\":1}}],[\"likes2\",{\"1\":{\"489\":1}}],[\"likes\",{\"1\":{\"489\":1,\"503\":1}}],[\"lib下\",{\"1\":{\"9493\":1,\"9494\":1}}],[\"lib中的一个包\",{\"1\":{\"8682\":1}}],[\"library\",{\"1\":{\"7828\":1}}],[\"library>java>lang>system\",{\"1\":{\"2297\":1}}],[\"libraries>java\",{\"1\":{\"2348\":1}}],[\"libraries>java>util\",{\"1\":{\"2395\":1,\"2452\":1}}],[\"libraries>java>util>comparator\",{\"1\":{\"1776\":1}}],[\"libraries>java>time>format>datetimeformatter\",{\"1\":{\"1685\":1}}],[\"libraries>java>time>instant\",{\"1\":{\"1666\":1}}],[\"libraries>java>time>localtime\",{\"1\":{\"1642\":1}}],[\"libraries>java>time>localdatetime\",{\"1\":{\"1645\":1}}],[\"libraries>java>time>localdate\",{\"1\":{\"1639\":1}}],[\"libraries>java>lang>comparable\",{\"1\":{\"1741\":1}}],[\"libraries>java>lang\",{\"1\":{\"1532\":2}}],[\"libraries=>\",{\"1\":{\"1415\":1}}],[\"lib\",{\"1\":{\"724\":1,\"734\":2,\"2877\":1,\"7827\":1,\"8500\":1,\"8682\":1,\"9882\":1}}],[\"lisi\",{\"1\":{\"489\":3,\"9027\":1}}],[\"listner是javaweb的核心三件套\",{\"1\":{\"8667\":1}}],[\"list5\",{\"1\":{\"6094\":3}}],[\"list4\",{\"1\":{\"6094\":3}}],[\"list3\",{\"1\":{\"6005\":2,\"6057\":3,\"6073\":5,\"6094\":3}}],[\"list集合\",{\"0\":{\"5966\":1}}],[\"list集合类中元素有序\",{\"1\":{\"5626\":1}}],[\"list方法\",{\"0\":{\"5679\":1}}],[\"list接口是collection的子接口\",{\"1\":{\"5629\":1}}],[\"list接口的实现类\",{\"0\":{\"5628\":1}}],[\"list接口为collection接口的子接口\",{\"1\":{\"5624\":1}}],[\"list容器中的元素都对应一个整数型的序号记载其在容器中的位置\",{\"1\":{\"5627\":1}}],[\"list1\",{\"1\":{\"2546\":3,\"2549\":3,\"2552\":2,\"2555\":2,\"2563\":5,\"2566\":3,\"2569\":3,\"6005\":3,\"6054\":2,\"6057\":2,\"6067\":3,\"6078\":4,\"6081\":4,\"6094\":6}}],[\"list是接口不能直接实例化\",{\"1\":{\"2527\":1}}],[\"list除了从collection集合继承的方法外\",{\"1\":{\"2523\":1,\"5680\":1}}],[\"list2\",{\"1\":{\"2512\":7,\"2546\":3,\"2569\":2,\"6005\":4,\"6054\":2,\"6057\":2,\"6067\":3,\"6078\":4,\"6081\":4,\"6094\":6,\"6102\":1}}],[\"list<customer>\",{\"1\":{\"8056\":1,\"8205\":1,\"8207\":2,\"8210\":1,\"8387\":1}}],[\"list<list<student>>\",{\"1\":{\"7655\":1,\"7662\":1}}],[\"list<student>\",{\"1\":{\"7655\":4,\"7658\":1,\"7673\":1}}],[\"list<string>\",{\"1\":{\"2382\":1,\"2391\":1,\"2530\":1,\"2537\":1,\"2569\":1,\"5947\":1,\"5994\":2,\"6054\":1,\"6057\":1,\"6067\":1,\"6073\":1,\"6077\":1,\"6078\":1,\"7634\":1}}],[\"list<employee>\",{\"1\":{\"7616\":1,\"7619\":1,\"7623\":1,\"7626\":1,\"7678\":1,\"7680\":1,\"7685\":1,\"7688\":1,\"7723\":1}}],[\"list<e>\",{\"1\":{\"2525\":1,\"2569\":1,\"6045\":1,\"6047\":1}}],[\"list<person>\",{\"1\":{\"6094\":1}}],[\"list<man>\",{\"1\":{\"6094\":1}}],[\"list<object>\",{\"1\":{\"6054\":1,\"6067\":1,\"6094\":1}}],[\"list<integer>\",{\"1\":{\"2484\":1,\"2512\":1,\"2518\":2,\"7670\":1,\"7708\":1,\"7712\":1}}],[\"list<\",{\"1\":{\"2484\":1,\"2487\":1,\"2495\":1,\"2512\":2,\"6067\":2,\"6073\":1,\"6081\":1,\"6094\":2}}],[\"list<t>\",{\"0\":{\"8057\":1},\"1\":{\"2382\":1,\"2391\":1,\"2492\":2,\"2515\":1,\"2518\":2,\"5990\":1,\"8054\":1,\"8201\":1}}],[\"list<book>\",{\"1\":{\"1263\":1,\"1276\":1}}],[\"listfiles\",{\"0\":{\"1972\":1},\"1\":{\"1975\":2}}],[\"list\",{\"0\":{\"1967\":1,\"2519\":1,\"2520\":1,\"5621\":1,\"5622\":1},\"1\":{\"137\":1,\"1276\":1,\"1299\":1,\"1971\":4,\"2391\":2,\"2399\":1,\"2478\":1,\"2483\":1,\"2484\":8,\"2487\":7,\"2492\":8,\"2494\":1,\"2495\":5,\"2500\":2,\"2505\":2,\"2508\":2,\"2512\":6,\"2515\":4,\"2518\":6,\"2523\":1,\"2530\":2,\"2537\":6,\"2873\":1,\"2962\":1,\"5544\":1,\"5556\":2,\"5631\":1,\"5648\":1,\"5650\":1,\"5653\":1,\"5656\":1,\"5660\":2,\"5667\":1,\"5669\":1,\"5680\":1,\"5933\":1,\"5964\":7,\"5967\":7,\"6045\":3,\"6067\":3,\"6070\":3,\"6073\":3,\"6078\":2,\"6081\":2,\"6098\":1,\"7568\":2,\"7572\":2,\"7604\":1,\"7616\":2,\"7619\":2,\"7623\":3,\"7626\":2,\"7634\":2,\"7670\":2,\"7678\":2,\"7680\":2,\"7682\":1,\"7685\":2,\"7688\":2,\"7691\":1,\"7694\":1,\"7697\":1,\"7716\":1,\"7719\":1,\"7723\":2,\"8054\":3,\"8056\":2,\"8201\":3,\"8207\":2,\"8210\":2,\"8387\":2}}],[\"listener\",{\"0\":{\"9312\":1,\"10889\":1},\"1\":{\"10\":1,\"9314\":2,\"9452\":1}}],[\"linkoption\",{\"1\":{\"6623\":1,\"6624\":1,\"6625\":1,\"6629\":1}}],[\"link\",{\"0\":{\"7012\":1},\"1\":{\"2944\":2,\"2946\":1,\"2947\":1,\"2948\":1,\"2949\":1,\"2954\":4}}],[\"linkedhashmap和properties\",{\"1\":{\"5803\":1}}],[\"linkedhashmap\",{\"0\":{\"5823\":1,\"5896\":1},\"1\":{\"2576\":1,\"5549\":1,\"5808\":1,\"5825\":1,\"5901\":2}}],[\"linkedhashset效率高于hashset\",{\"1\":{\"5776\":1}}],[\"linkedhashset作为hashset的子类\",{\"1\":{\"5773\":1}}],[\"linkedhashset插入性能略低于\",{\"1\":{\"5710\":1,\"5776\":1}}],[\"linkedhashset\",{\"0\":{\"5707\":1,\"5772\":1},\"1\":{\"2399\":1,\"5547\":1,\"5689\":1,\"5711\":1,\"5748\":1,\"5775\":1,\"5779\":2}}],[\"linkedlist是典型的双向链表结构\",{\"1\":{\"5664\":1}}],[\"linkedlist\",{\"0\":{\"5637\":1,\"5663\":1},\"1\":{\"2399\":1,\"5545\":1,\"5632\":1,\"5667\":2}}],[\"lineseparator\",{\"1\":{\"6334\":1}}],[\"lines\",{\"1\":{\"2731\":1}}],[\"line\",{\"0\":{\"10015\":1},\"1\":{\"255\":1,\"264\":1,\"952\":1,\"2831\":1,\"6334\":1,\"8990\":2}}],[\"linux环境的部署\",{\"1\":{\"9874\":1}}],[\"linux选tar\",{\"1\":{\"8425\":1}}],[\"linux集群\",{\"1\":{\"227\":1}}],[\"linux单机\",{\"1\":{\"226\":1}}],[\"linux\",{\"0\":{\"184\":1,\"747\":1,\"10152\":1},\"1\":{\"9873\":1}}],[\"lock>同步代码块\",{\"1\":{\"5403\":1}}],[\"lock只有代码块锁\",{\"1\":{\"5401\":1}}],[\"lock是显式锁\",{\"1\":{\"5400\":1}}],[\"lock\",{\"1\":{\"5383\":1,\"5384\":4,\"5391\":2,\"5394\":1,\"5396\":5,\"10860\":1}}],[\"lock的优点\",{\"0\":{\"5380\":1}}],[\"lock接口是控制多个线程对共享资源进行访问的工具\",{\"1\":{\"5379\":1}}],[\"locks\",{\"1\":{\"5379\":1,\"5396\":1}}],[\"lock锁方式也可以解决线程安全问题\",{\"1\":{\"5376\":1}}],[\"lock锁\",{\"0\":{\"5375\":1}}],[\"locator\",{\"1\":{\"6865\":1,\"6910\":1}}],[\"location\",{\"1\":{\"309\":1,\"9139\":1,\"9143\":1}}],[\"localtime\",{\"0\":{\"1635\":1,\"1640\":1},\"1\":{\"1623\":1,\"1633\":1,\"1642\":1,\"1648\":2,\"1651\":3}}],[\"localdatetime实现了该接口\",{\"1\":{\"1691\":1}}],[\"localdatetimeimplements\",{\"1\":{\"1645\":1}}],[\"localdatetime\",{\"0\":{\"1635\":1,\"1643\":1},\"1\":{\"1623\":1,\"1633\":1,\"1648\":2,\"1651\":3,\"1654\":2,\"1657\":10,\"1660\":10,\"1663\":10,\"1705\":2,\"1719\":2,\"1725\":2}}],[\"localdate\",{\"0\":{\"1635\":1,\"1637\":1},\"1\":{\"1623\":1,\"1633\":1,\"1639\":1,\"1648\":2,\"1651\":3}}],[\"local\",{\"1\":{\"1083\":1,\"1699\":1,\"1700\":1,\"1701\":1,\"1702\":3,\"1705\":1,\"1707\":1,\"4961\":1,\"4989\":1,\"4996\":1,\"5043\":1,\"8617\":1,\"10206\":1}}],[\"local目录中\",{\"1\":{\"756\":1}}],[\"localhost中创建任意xml文件\",{\"1\":{\"8481\":1}}],[\"localhost\",{\"1\":{\"377\":1,\"516\":1,\"969\":1,\"995\":1,\"1048\":1,\"1051\":1,\"1206\":1,\"1364\":1,\"1378\":1,\"6674\":1,\"7846\":1,\"7852\":1,\"7862\":1,\"7865\":1,\"7871\":1,\"8263\":1,\"8458\":1,\"8468\":1,\"8471\":1,\"8478\":1,\"8594\":1,\"8623\":1,\"8710\":1,\"8719\":1,\"8843\":1,\"8848\":1,\"8854\":1,\"8857\":1,\"8943\":1,\"8944\":1,\"8951\":1,\"9078\":1,\"9084\":1,\"9121\":1,\"9147\":1,\"9893\":1,\"9898\":1,\"9900\":1,\"10162\":1,\"10496\":1}}],[\"love\",{\"1\":{\"1480\":1,\"1494\":1}}],[\"lo\",{\"1\":{\"1452\":1}}],[\"lombok\",{\"0\":{\"1160\":1,\"1212\":1},\"1\":{\"1177\":1,\"1213\":1}}],[\"lombok包提供的类注解\",{\"1\":{\"887\":1}}],[\"loaction=classpath\",{\"1\":{\"811\":1}}],[\"loading\",{\"1\":{\"10744\":1}}],[\"loadonstartup\",{\"1\":{\"8837\":1}}],[\"loadonstartup=1\",{\"1\":{\"8768\":1}}],[\"loaddriver\",{\"1\":{\"8347\":1}}],[\"loadfactor\",{\"1\":{\"5895\":1}}],[\"load\",{\"0\":{\"7010\":1},\"1\":{\"5887\":1,\"5927\":1,\"7049\":2,\"7873\":1,\"7970\":1,\"7975\":1,\"8260\":1,\"8324\":1}}],[\"loadclass\",{\"1\":{\"2144\":1,\"7002\":1}}],[\"loader\",{\"1\":{\"725\":1,\"734\":1,\"7266\":1}}],[\"loadbalancer\",{\"1\":{\"23\":1}}],[\"longblob\",{\"1\":{\"8072\":1}}],[\"longvarchar\",{\"1\":{\"7916\":1}}],[\"longvalue\",{\"1\":{\"1850\":1}}],[\"long型没有加l\",{\"1\":{\"3173\":1}}],[\"long类型为什么加l\",{\"0\":{\"3106\":1}}],[\"long类也是有限的\",{\"1\":{\"1866\":1}}],[\"longstream\",{\"1\":{\"2962\":1,\"7579\":1,\"7642\":1}}],[\"long\",{\"1\":{\"611\":1,\"1486\":3,\"1542\":2,\"1679\":2,\"1682\":2,\"1715\":1,\"1719\":1,\"1799\":1,\"1814\":3,\"1820\":1,\"1822\":1,\"1845\":1,\"1848\":1,\"1850\":1,\"1881\":1,\"1963\":2,\"1966\":2,\"2304\":2,\"2345\":1,\"2802\":1,\"3028\":1,\"3082\":1,\"3173\":2,\"3457\":2,\"3695\":1,\"3996\":1,\"4466\":2,\"4634\":1,\"4813\":1,\"5213\":1,\"6359\":2,\"6474\":1,\"6498\":1,\"6501\":1,\"6569\":1,\"6577\":2,\"6622\":1,\"6904\":1,\"6905\":1,\"7313\":1,\"7579\":1,\"7691\":2,\"7913\":1,\"8113\":1,\"8121\":1,\"8205\":1,\"8207\":1,\"8210\":1,\"8391\":2,\"10541\":2,\"10554\":11,\"10573\":1,\"10576\":1,\"10580\":1,\"10583\":1,\"10657\":1,\"10660\":1}}],[\"lookup\",{\"1\":{\"391\":1}}],[\"logappend\",{\"1\":{\"10162\":1,\"10496\":1}}],[\"log4j防御sql注入的filter\",{\"1\":{\"8319\":1}}],[\"logstash\",{\"1\":{\"9831\":1}}],[\"logs\",{\"1\":{\"1083\":1,\"9883\":1}}],[\"log<\",{\"1\":{\"952\":6}}],[\"logback相对于log4j的一些优点\",{\"1\":{\"945\":1}}],[\"logback和log4j非常相似\",{\"1\":{\"944\":1}}],[\"logback\",{\"0\":{\"941\":1},\"1\":{\"936\":1,\"949\":1,\"952\":14}}],[\"logging\",{\"1\":{\"907\":1,\"914\":1,\"923\":1,\"930\":1,\"936\":1,\"1229\":1,\"1364\":1}}],[\"loggerfactory\",{\"1\":{\"882\":1}}],[\"logger\",{\"1\":{\"882\":1,\"952\":4}}],[\"log日志\",{\"0\":{\"870\":1}}],[\"log\",{\"1\":{\"84\":1,\"882\":5,\"888\":5,\"930\":1,\"936\":1,\"952\":16,\"955\":4,\"1083\":1,\"1229\":1,\"1364\":1,\"1376\":1,\"1829\":1,\"1832\":4,\"10159\":1,\"10162\":2,\"10490\":1,\"10496\":3,\"10501\":3,\"10506\":3}}],[\"学习成本极低\",{\"1\":{\"8331\":1}}],[\"学习项目\",{\"0\":{\"120\":1}}],[\"学习顺序\",{\"0\":{\"4\":1}}],[\"学这个之前了解下项目架构\",{\"1\":{\"21\":1}}],[\"如查询耗费的时间\",{\"1\":{\"10416\":1}}],[\"如date和bindata类型\",{\"1\":{\"10081\":1}}],[\"如无模式\",{\"1\":{\"10024\":1}}],[\"如test\",{\"1\":{\"9501\":1}}],[\"如复选框\",{\"1\":{\"9021\":1}}],[\"如版本\",{\"1\":{\"8779\":1}}],[\"如图\",{\"1\":{\"8543\":1,\"8620\":1,\"9658\":1}}],[\"如learn\",{\"1\":{\"8523\":1}}],[\"如连接过多\",{\"1\":{\"8223\":1}}],[\"如servlet\",{\"1\":{\"8215\":1}}],[\"如string\",{\"1\":{\"3933\":1}}],[\"如string类型的数组\",{\"1\":{\"3474\":1}}],[\"如customerdao\",{\"1\":{\"8173\":1}}],[\"如hibernate\",{\"1\":{\"7795\":1}}],[\"如收集到\",{\"1\":{\"7719\":1}}],[\"如同发快递包裹一样\",{\"1\":{\"6831\":1}}],[\"如192\",{\"1\":{\"6666\":1}}],[\"如读\",{\"1\":{\"6150\":1}}],[\"如读取配置\",{\"1\":{\"4417\":1}}],[\"如不是\",{\"1\":{\"4864\":1}}],[\"如nullpointerexception\",{\"1\":{\"4732\":1}}],[\"如进行x\",{\"1\":{\"4683\":1}}],[\"如何调用的\",{\"1\":{\"8814\":1}}],[\"如何使用函数式接口\",{\"0\":{\"7405\":1}}],[\"如何实现如此复杂的网络协议呢\",{\"1\":{\"6718\":1}}],[\"如何实现网络通信\",{\"0\":{\"6651\":1}}],[\"如何\",{\"1\":{\"6646\":1}}],[\"如何管理等是确定的\",{\"1\":{\"5944\":1}}],[\"如何判断是否要声明static\",{\"0\":{\"4404\":1}}],[\"如何才能调用子类特有的属性和方法\",{\"1\":{\"4169\":1}}],[\"如包含哪些属性\",{\"1\":{\"4258\":1}}],[\"如定义系统特性\",{\"1\":{\"3936\":1}}],[\"如int\",{\"1\":{\"3672\":1}}],[\"如抽象\",{\"1\":{\"3600\":1}}],[\"如a\",{\"1\":{\"3504\":1}}],[\"如gbk转utf\",{\"1\":{\"3133\":1}}],[\"如想实现排序\",{\"1\":{\"1738\":1}}],[\"如异常信息\",{\"1\":{\"1296\":1}}],[\"如上采用的blog账号\",{\"1\":{\"10749\":1}}],[\"如上方的代码\",{\"1\":{\"8810\":1}}],[\"如上图中的6个请求来自3个浏览器\",{\"1\":{\"9662\":1}}],[\"如上图上半部分是\",{\"1\":{\"9579\":1}}],[\"如上图\",{\"1\":{\"8640\":1}}],[\"如上\",{\"1\":{\"859\":1,\"2017\":1,\"3659\":1,\"3818\":1,\"3828\":1,\"5018\":1,\"5270\":1,\"5326\":1,\"5327\":1,\"7577\":1,\"7664\":1,\"8058\":1,\"10661\":1,\"10814\":1}}],[\"如果采用了kill而非标准方式关闭了mongodb服务\",{\"1\":{\"10859\":1}}],[\"如果采用了上述的方式2\",{\"1\":{\"8542\":1}}],[\"如果连接的对方是副本集\",{\"1\":{\"10790\":1}}],[\"如果连接过程失败\",{\"1\":{\"6898\":1}}],[\"如果副本集具有偶数个成员\",{\"1\":{\"10461\":1}}],[\"如果复合索引由\",{\"1\":{\"10369\":1}}],[\"如果找不到匹配项\",{\"1\":{\"10282\":1}}],[\"如果某条数据插入失败\",{\"1\":{\"10266\":1}}],[\"如果某字段没值\",{\"1\":{\"10258\":1}}],[\"如果某个类使用了被\",{\"1\":{\"5005\":1}}],[\"如果为假\",{\"1\":{\"10250\":1}}],[\"如果为true\",{\"1\":{\"10250\":1}}],[\"如果为了防止不出异常\",{\"1\":{\"1897\":1}}],[\"如果成功删除选定集合\",{\"1\":{\"10238\":1}}],[\"如果成功就返回true\",{\"1\":{\"8347\":1}}],[\"如果集合不存在\",{\"1\":{\"10230\":1}}],[\"如果d1包含了马斯克和spacex\",{\"1\":{\"9953\":1}}],[\"如果数据量大的话即使对\",{\"1\":{\"9854\":1}}],[\"如果数组的索引处已经有值了\",{\"1\":{\"5742\":1}}],[\"如果浏览器或服务端都没有被关闭\",{\"1\":{\"9655\":1}}],[\"如果tomcat成功启动\",{\"1\":{\"9520\":1}}],[\"如果this对象不是null\",{\"1\":{\"4241\":1}}],[\"如果调用session提供的invalidate\",{\"1\":{\"9202\":1}}],[\"如果调用声明局部内部类的外部方法的局部变量的话\",{\"1\":{\"4333\":1}}],[\"如果服务器非正常关闭\",{\"1\":{\"9201\":1}}],[\"如果会话不中断\",{\"1\":{\"9195\":1}}],[\"如果都写两份代码\",{\"1\":{\"9000\":1}}],[\"如果都配置了\",{\"1\":{\"2860\":1}}],[\"如果前端发送的是纯文本数据\",{\"1\":{\"8984\":1}}],[\"如果前端发送的是字节数据\",{\"1\":{\"8981\":1}}],[\"如果配置的是\",{\"1\":{\"8935\":1}}],[\"如果配置了\",{\"1\":{\"8862\":1}}],[\"如果项目中的servlet配置了\",{\"1\":{\"8861\":1}}],[\"如果路径配置的是\",{\"1\":{\"8853\":1}}],[\"如果路径配置的不是扩展名\",{\"1\":{\"8852\":1}}],[\"如果创建servlet比较耗时的话\",{\"1\":{\"8749\":1}}],[\"如果创建了一个类的多个对象\",{\"1\":{\"3642\":1}}],[\"如果未配置artifacts\",{\"1\":{\"8636\":1,\"8653\":1}}],[\"如果未设置此属性\",{\"1\":{\"952\":1}}],[\"如果同时配置了filters和proxyfilters\",{\"1\":{\"8321\":1}}],[\"如果同步代码有异常\",{\"1\":{\"5393\":1}}],[\"如果空闲时间大于timebetweenevictionrunsmillis\",{\"1\":{\"8308\":1}}],[\"如果空参构造器访问权限是不够\",{\"1\":{\"7057\":1}}],[\"如果validationquery为null\",{\"1\":{\"8299\":1}}],[\"如果对安全要求很高\",{\"1\":{\"10707\":1}}],[\"如果对该数据库连接对象设置了关闭自动提交\",{\"1\":{\"8143\":1}}],[\"如果对类进行了修改\",{\"1\":{\"6575\":1}}],[\"如果上传报错\",{\"1\":{\"8078\":1}}],[\"如果存在多个数据源\",{\"1\":{\"8270\":1}}],[\"如果存在则不会创建\",{\"1\":{\"6514\":1}}],[\"如果存储的文件过大\",{\"1\":{\"8073\":1}}],[\"如果第一个结果是更新计数或没有结果\",{\"1\":{\"7966\":1}}],[\"如果第一个结果是\",{\"1\":{\"7965\":1}}],[\"如果修改了配置信息\",{\"1\":{\"7876\":1}}],[\"如果全都返回true\",{\"1\":{\"7676\":1}}],[\"如果lambda体只有一条执行语句\",{\"1\":{\"7366\":1}}],[\"如果lambda形参列表只有一个参数\",{\"1\":{\"7362\":1}}],[\"如果类中没有无参构造器就不能使用newinstance了\",{\"1\":{\"7062\":1}}],[\"如果类没有空参构造器\",{\"1\":{\"7056\":1}}],[\"如果类没有显示定义这个静态常量\",{\"1\":{\"6575\":1}}],[\"如果其中一个文档出现错误\",{\"1\":{\"10250\":2}}],[\"如果其父类没有被初始化\",{\"1\":{\"7027\":1}}],[\"如果其他泛型的list想使用功能这个遍历方法\",{\"1\":{\"6077\":1}}],[\"如果发现其父类还没有进行初始化\",{\"1\":{\"7019\":1}}],[\"如果该类还未被加载到内存中\",{\"1\":{\"7008\":1}}],[\"如果该方法没有被重写过默认也是\",{\"1\":{\"4244\":1}}],[\"如果套接字未连接\",{\"1\":{\"6853\":1,\"6854\":1}}],[\"如果套接字是未连接的\",{\"1\":{\"6776\":1}}],[\"如果信息比包的长度长\",{\"1\":{\"6850\":1}}],[\"如果客户端请求连接\",{\"1\":{\"6807\":1}}],[\"如果尚未绑定套接字\",{\"1\":{\"6779\":1}}],[\"如果尚未连接套接字\",{\"1\":{\"6778\":1}}],[\"如果读取的文件不存在则会出现异常\",{\"1\":{\"6513\":1}}],[\"如果读到文件的末尾就返回null\",{\"1\":{\"2119\":1}}],[\"如果和gbk等双字节编码方式一样\",{\"1\":{\"6426\":1}}],[\"如果返回\",{\"1\":{\"6241\":1}}],[\"如果返回false\",{\"1\":{\"4185\":1}}],[\"如果字节流操作文本文件\",{\"1\":{\"6210\":1}}],[\"如果字符流操作非文本文件\",{\"1\":{\"6210\":1}}],[\"如果pathname是相对路径\",{\"1\":{\"6129\":1}}],[\"如果实例化时\",{\"1\":{\"5983\":1}}],[\"如果实现类实现了多个接口\",{\"1\":{\"4532\":1}}],[\"如果实现类实现了接口中的所有抽象方法\",{\"1\":{\"4507\":1}}],[\"如果实现类重写了接口中的默认方法\",{\"1\":{\"4530\":1}}],[\"如果equals\",{\"1\":{\"5863\":1,\"5864\":1}}],[\"如果出现了两个不同输入有相同输出的情况\",{\"1\":{\"5764\":1}}],[\"如果自己手动重写\",{\"1\":{\"5756\":1}}],[\"如果相同\",{\"1\":{\"5729\":1}}],[\"如果试图把一个对象添加到\",{\"1\":{\"5719\":1}}],[\"如果需要提供给别人使用\",{\"1\":{\"9487\":1}}],[\"如果需要可以通过配置useunfairlock属性为true使用非公平锁\",{\"1\":{\"8291\":1}}],[\"如果需要修改配置信息\",{\"1\":{\"7875\":1}}],[\"如果需要访问文件内容本身\",{\"1\":{\"6113\":1}}],[\"如果需要创建iterator\",{\"1\":{\"5576\":1}}],[\"如果需要导入多个结构\",{\"1\":{\"3950\":1}}],[\"如果操作共享数据的代码完整的声明在一个方法中\",{\"1\":{\"5336\":1}}],[\"如果图片没加载出来就无法继续向上滑动\",{\"1\":{\"5108\":1}}],[\"如果用单线程做\",{\"1\":{\"5108\":1}}],[\"如果把标有\",{\"1\":{\"5006\":1}}],[\"如果只需要返回符合条件的第一条数据\",{\"1\":{\"10313\":1}}],[\"如果只有一条return语句\",{\"1\":{\"7367\":1}}],[\"如果只有一个参数成员\",{\"1\":{\"4941\":1}}],[\"如果只指定了两个参数\",{\"1\":{\"1898\":1}}],[\"如果注解只有一个成员\",{\"1\":{\"4936\":1}}],[\"如果注释方法中的某一个步骤\",{\"1\":{\"2990\":1}}],[\"如果枚举类中只有一个对象\",{\"1\":{\"4835\":1}}],[\"如果代码存在逻辑上的问题\",{\"1\":{\"4795\":1}}],[\"如果代码编译时没有异常\",{\"1\":{\"4788\":1}}],[\"如果代码进行过修改\",{\"1\":{\"2892\":1}}],[\"如果父类中被重写的方法没有throws方式处理异常\",{\"1\":{\"4785\":1}}],[\"如果这两个异常的处理方式不一样\",{\"1\":{\"4777\":1}}],[\"如果异常没有在调用者方法中处理\",{\"1\":{\"4773\":1}}],[\"如果明确知道产生的是何种异常\",{\"1\":{\"4731\":1}}],[\"如果输入字符串就会报异常\",{\"1\":{\"4720\":1}}],[\"如果程序出现异常而未能关闭\",{\"1\":{\"8222\":1}}],[\"如果程序不处理\",{\"1\":{\"4703\":1}}],[\"如果程序既可以使用三元运算符\",{\"1\":{\"3324\":1}}],[\"如果变量的值是引用数据类型\",{\"1\":{\"4654\":1}}],[\"如果变量的值是基本数据类型\",{\"1\":{\"4653\":1}}],[\"如果boolean\",{\"1\":{\"4575\":1}}],[\"如果子类\",{\"1\":{\"4531\":1}}],[\"如果子类构造器中既未显式调用父类或本类的构造器\",{\"1\":{\"4102\":1}}],[\"如果你的副本+主节点的个数是奇数\",{\"1\":{\"10462\":1}}],[\"如果你想返回指定条数的记录\",{\"1\":{\"10329\":1}}],[\"如果你没有选择数据库\",{\"1\":{\"10218\":1}}],[\"如果你不希望密码直接写在配置文件中\",{\"1\":{\"8276\":1}}],[\"如果你是\",{\"1\":{\"4482\":1}}],[\"如果你对log4j很熟悉\",{\"1\":{\"944\":1}}],[\"如果继承了抽象类或实现了接口\",{\"1\":{\"4349\":1}}],[\"如果两个以上条件之间是或者的关系\",{\"1\":{\"10356\":1}}],[\"如果两个数据的哈希值不同\",{\"1\":{\"5728\":1}}],[\"如果两个方法都使用在同步代码块或同步方法中\",{\"1\":{\"5461\":1}}],[\"如果两个对象一个name属性有初始值\",{\"1\":{\"4241\":1}}],[\"如果两个技术没有交集\",{\"1\":{\"961\":1}}],[\"如果x\",{\"1\":{\"4236\":1,\"4238\":1,\"4239\":1}}],[\"如果比较的是引用数据类型变量\",{\"1\":{\"4223\":1}}],[\"如果比较的是基本数据类型变量\",{\"1\":{\"4222\":1}}],[\"如果\",{\"1\":{\"4189\":1,\"6847\":1}}],[\"如果它不是晚绑定\",{\"1\":{\"4158\":1}}],[\"如果构造器的形参和类的属性同名时\",{\"1\":{\"3898\":1}}],[\"如果方法与调用者无关\",{\"1\":{\"4368\":1}}],[\"如果方法的形参和类的属性同名时\",{\"1\":{\"3895\":1}}],[\"如果方法没有返回值\",{\"1\":{\"3723\":1}}],[\"如果直接对类内部的属性进行访问和操作\",{\"1\":{\"3815\":1}}],[\"如果还有其他参数\",{\"1\":{\"3798\":1}}],[\"如果还未调用next\",{\"1\":{\"2468\":1,\"5603\":1}}],[\"如果参数是引用数据类型\",{\"1\":{\"3785\":1}}],[\"如果我们想实现对某列值在原有值的基础上进行增加或减少\",{\"1\":{\"10295\":1}}],[\"如果我们只是简单的用新数据比对旧数据\",{\"1\":{\"5725\":1}}],[\"如果我们也想输出对象的实体内容\",{\"1\":{\"4258\":1}}],[\"如果我们没有显式的声明一个类的父类的话\",{\"1\":{\"4023\":1}}],[\"如果我们修改一个对象的属性a\",{\"1\":{\"3643\":1}}],[\"如果我们需要代表本地时间的对象\",{\"1\":{\"1675\":1}}],[\"如果多个条件表达式之间有包含的关系\",{\"1\":{\"3356\":1}}],[\"如果多个条件表达式之间有交集的关系\",{\"1\":{\"3355\":1}}],[\"如果多个条件表达式之间是\",{\"1\":{\"3354\":1}}],[\"如果instance真的==null\",{\"1\":{\"5352\":1}}],[\"如果index超出了范围\",{\"1\":{\"2560\":1}}],[\"如果if\",{\"1\":{\"3351\":1}}],[\"如果符号位是1\",{\"1\":{\"3308\":1}}],[\"如果最高位移动到了符号位\",{\"1\":{\"3307\":1}}],[\"如果左边为假\",{\"1\":{\"3296\":1}}],[\"如果左边为真\",{\"1\":{\"3296\":1}}],[\"如果想再次开启一个线程\",{\"1\":{\"5201\":1}}],[\"如果想使用重复注解\",{\"1\":{\"5014\":1}}],[\"如果想保留小数位\",{\"1\":{\"3252\":1}}],[\"如果想看sql需要进行配置\",{\"1\":{\"1227\":1}}],[\"如果值超过了int的范围\",{\"1\":{\"3170\":1}}],[\"如果值超过了变量类型规定的范围\",{\"1\":{\"3079\":1}}],[\"如果一个线程阻塞了\",{\"1\":{\"5352\":1}}],[\"如果一个异常回到main\",{\"1\":{\"4774\":1}}],[\"如果一个方法内抛出异常\",{\"1\":{\"4773\":1}}],[\"如果一个方法\",{\"1\":{\"4767\":1}}],[\"如果一个类中定义了多个非静态代码块\",{\"1\":{\"4566\":1}}],[\"如果一个类中定义了多个静态代码块\",{\"1\":{\"4558\":1}}],[\"如果一个类中声明了n个构造器\",{\"1\":{\"3904\":1}}],[\"如果一个类支持泛型时\",{\"1\":{\"2958\":1}}],[\"如果一段程序是由多个作者来维护\",{\"1\":{\"2957\":1}}],[\"如果指定的集合不存在就会自动创建集合\",{\"1\":{\"10245\":1}}],[\"如果指定的key不存在\",{\"1\":{\"2594\":1}}],[\"如果指定了字符集\",{\"1\":{\"1501\":1}}],[\"如果key1的哈希值和已经存在的某一个数据\",{\"1\":{\"5862\":1}}],[\"如果key1的哈希值与已经存在的数据的哈希值都不相同\",{\"1\":{\"5861\":1}}],[\"如果key不存在\",{\"1\":{\"2600\":1}}],[\"如果key\",{\"1\":{\"2587\":1}}],[\"如果取的index不存在\",{\"1\":{\"2548\":1}}],[\"如果没有开启认证\",{\"1\":{\"10756\":1}}],[\"如果没有索引\",{\"1\":{\"10360\":1}}],[\"如果没有就在内存中创建一个session并返回\",{\"1\":{\"9199\":1}}],[\"如果没有导入可以手动导入\",{\"1\":{\"8682\":1}}],[\"如果没有配置\",{\"1\":{\"8270\":1,\"10539\":1}}],[\"如果没有值\",{\"1\":{\"7759\":1}}],[\"如果没有成员\",{\"1\":{\"4935\":1}}],[\"如果没有默认值\",{\"1\":{\"4642\":1}}],[\"如果没有显式的定义类的构造器的话\",{\"1\":{\"3873\":1}}],[\"如果没有初始化值\",{\"1\":{\"3675\":1}}],[\"如果没有超过int的范围\",{\"1\":{\"3171\":1}}],[\"如果没有给出时间单位\",{\"1\":{\"952\":1}}],[\"如果没找到就返回负数\",{\"1\":{\"2369\":1}}],[\"如果在套接字上调用\",{\"1\":{\"6781\":1,\"6782\":1}}],[\"如果在当前代码中没有找到相应的处理程序\",{\"1\":{\"4690\":1}}],[\"如果在类的声明中未使用extends关键字指明其父类\",{\"1\":{\"4203\":1}}],[\"如果在源文件中\",{\"1\":{\"3959\":1}}],[\"如果在本类中未找到\",{\"1\":{\"3912\":1}}],[\"如果在方法内或构造器内需要使用成员变量\",{\"1\":{\"3911\":1}}],[\"如果在接收的数据中不含有\",{\"1\":{\"2118\":1,\"6344\":1}}],[\"如果在idea下测试工程时pom\",{\"1\":{\"869\":1}}],[\"如果已到达流的末尾\",{\"1\":{\"2040\":1,\"2046\":1,\"2057\":1}}],[\"如果因为已经到达流末尾而没有可用的字节\",{\"1\":{\"2045\":1}}],[\"如果因\",{\"1\":{\"2039\":1}}],[\"如果此处未出现artifact\",{\"1\":{\"8651\":1}}],[\"如果此处配置了info级别\",{\"1\":{\"952\":1}}],[\"如果此位置上的数据不为空\",{\"1\":{\"5860\":1}}],[\"如果此位置上的数据为空\",{\"1\":{\"5859\":1}}],[\"如果此次的添加导致底层elementdata数组容量不够\",{\"1\":{\"5652\":1}}],[\"如果此文件目录的上层目录不存在\",{\"1\":{\"2005\":1}}],[\"如果目录已存在\",{\"1\":{\"2005\":1}}],[\"如果文件里有public修饰的类\",{\"1\":{\"2909\":1}}],[\"如果文件或目录已经存在了\",{\"1\":{\"1998\":1,\"6143\":1}}],[\"如果文件不存在则会去创建文件\",{\"1\":{\"6514\":1}}],[\"如果文件不存在\",{\"1\":{\"1988\":1}}],[\"如果除不尽\",{\"1\":{\"1931\":1}}],[\"如果设置为false\",{\"1\":{\"10283\":1}}],[\"如果设置为warn\",{\"1\":{\"952\":1}}],[\"如果设置一级域名相同\",{\"1\":{\"9732\":1}}],[\"如果设置的精度\",{\"1\":{\"1905\":1}}],[\"如果年龄相同\",{\"1\":{\"1767\":1}}],[\"如果当前对象this等于形参对象obj\",{\"1\":{\"1754\":1}}],[\"如果当前对象this小于形参对象obj\",{\"1\":{\"1753\":1}}],[\"如果当前对象this大于形参对象obj\",{\"1\":{\"1752\":1}}],[\"如果当前页码值大于了总页码值\",{\"1\":{\"1299\":1}}],[\"如果要查询结果返回部分字段\",{\"1\":{\"10316\":1}}],[\"如果要存整型\",{\"1\":{\"10255\":1}}],[\"如果要共享\",{\"1\":{\"9730\":1}}],[\"如果要创建只需要一行数据的方法\",{\"1\":{\"8062\":1}}],[\"如果要对集合中的所有元素进一步操作\",{\"1\":{\"7650\":1}}],[\"如果要针对不同的方法进行增强\",{\"1\":{\"7253\":1}}],[\"如果要在java程序中实现一些面向对象编程的常见需求\",{\"1\":{\"4577\":1}}],[\"如果要比较的两个对象是引用关系\",{\"1\":{\"4241\":1}}],[\"如果要比较该类的两个实例大小\",{\"1\":{\"1747\":1}}],[\"如果要使用\",{\"1\":{\"4006\":1}}],[\"如果要进行换行和输入空格\",{\"1\":{\"2099\":1}}],[\"如果要删除目录\",{\"1\":{\"2021\":1}}],[\"如果要表示再大的整数\",{\"1\":{\"1866\":1}}],[\"如果要获取其他范围的值\",{\"1\":{\"1803\":1}}],[\"如果要该类的多个对象排序\",{\"1\":{\"1748\":1}}],[\"如果要替换最后一个字符\",{\"1\":{\"1593\":1}}],[\"如果超过了\",{\"1\":{\"1527\":1,\"2703\":1,\"2759\":1}}],[\"如果使用mybatis\",{\"1\":{\"9569\":1}}],[\"如果使用构造器fileoutputstream\",{\"1\":{\"6229\":1,\"6230\":1}}],[\"如果使用定制排序\",{\"1\":{\"5793\":1}}],[\"如果使用treeset\",{\"1\":{\"5782\":1}}],[\"如果使用的类或接口是本包下定义的\",{\"1\":{\"3953\":1}}],[\"如果使用的类或接口是java\",{\"1\":{\"3952\":1}}],[\"如果使用的话\",{\"1\":{\"3723\":1}}],[\"如果使用\",{\"1\":{\"3741\":1}}],[\"如果使用第二个参数来指定字符集\",{\"1\":{\"1506\":1}}],[\"如果使用java\",{\"1\":{\"734\":1}}],[\"如果查询的索引越界了就会报越界异常\",{\"1\":{\"1430\":1}}],[\"如果做前后端分离的api开发\",{\"1\":{\"1274\":1}}],[\"如果写错了会发生异常\",{\"1\":{\"1250\":1}}],[\"如果测试的时候想用int作为id\",{\"1\":{\"1226\":1}}],[\"如果有就记录文档的id\",{\"1\":{\"9956\":1}}],[\"如果有值则将其返回\",{\"1\":{\"7762\":1}}],[\"如果有值\",{\"1\":{\"7755\":1}}],[\"如果有开发人员试图使用或重写被\",{\"1\":{\"5036\":1}}],[\"如果有多个线程被wait\",{\"1\":{\"5440\":1}}],[\"如果有多个成员\",{\"1\":{\"4937\":1}}],[\"如果有多个属性要添加\",{\"1\":{\"771\":1}}],[\"如果有属性\",{\"1\":{\"4859\":1}}],[\"如果有的话\",{\"1\":{\"4858\":1}}],[\"如果有\",{\"1\":{\"4575\":1}}],[\"如果有try\",{\"1\":{\"2112\":1}}],[\"如果有很个性化的需求\",{\"1\":{\"1222\":1}}],[\"如果是手动安装的绿色版\",{\"1\":{\"10184\":1}}],[\"如果是手动通过maven创建的项目\",{\"1\":{\"652\":1}}],[\"如果是post请求\",{\"1\":{\"8819\":1}}],[\"如果是带缓冲区的流对象的close\",{\"1\":{\"6320\":1}}],[\"如果是在单元测试里运行代码\",{\"1\":{\"6131\":1}}],[\"如果是null\",{\"1\":{\"5353\":1}}],[\"如果是多核的话\",{\"1\":{\"5091\":1}}],[\"如果是多环境\",{\"1\":{\"1095\":1}}],[\"如果是字符串\",{\"1\":{\"4276\":1}}],[\"如果是静态方法调用invoke\",{\"1\":{\"2281\":1,\"7175\":1}}],[\"如果是引用类型\",{\"1\":{\"2227\":1,\"2265\":1,\"7093\":1}}],[\"如果是追加写\",{\"1\":{\"2099\":1}}],[\"如果是空目录\",{\"1\":{\"1970\":1,\"1974\":1}}],[\"如果是文件则返回null\",{\"1\":{\"1970\":1,\"1974\":1}}],[\"如果是目录或空文件\",{\"1\":{\"1962\":1}}],[\"如果是5\",{\"1\":{\"1928\":1,\"1929\":1}}],[\"如果是char\",{\"1\":{\"1584\":1}}],[\"如果不是的话\",{\"1\":{\"8340\":1}}],[\"如果不配置druid会根据url自动识别dbtype\",{\"1\":{\"8278\":1}}],[\"如果不同就以链表的形式添加到该元素后面\",{\"1\":{\"5729\":1}}],[\"如果不存在再调用\",{\"1\":{\"9560\":1}}],[\"如果不存在\",{\"1\":{\"2551\":1,\"2554\":1,\"6619\":1}}],[\"如果不重写equals方法\",{\"1\":{\"2420\":1}}],[\"如果不指定泛型\",{\"1\":{\"2401\":1,\"2527\":1}}],[\"如果不设置会出问题\",{\"1\":{\"994\":1}}],[\"如果不这样就无法找到启动类\",{\"1\":{\"350\":1}}],[\"如果将tomcat端口号改为80\",{\"1\":{\"8442\":1}}],[\"如果将run方法的args删掉\",{\"1\":{\"780\":1}}],[\"如果将测试类的位置改变了\",{\"1\":{\"665\":1}}],[\"如果执行jar包时\",{\"1\":{\"767\":1}}],[\"如果关闭其他服务器和改端口号都解决不了问题\",{\"1\":{\"745\":1}}],[\"如果每次测试前改过来\",{\"1\":{\"673\":1}}],[\"如果包里找不到\",{\"1\":{\"670\":1}}],[\"如时间和空间的属性\",{\"1\":{\"627\":1}}],[\"如javabean\",{\"1\":{\"9524\":1}}],[\"如javaweb\",{\"1\":{\"8524\":1}}],[\"如java\",{\"1\":{\"6927\":1}}],[\"如jdbc数据库连接信息\",{\"1\":{\"511\":1}}],[\"如jetty\",{\"1\":{\"449\":1}}],[\"如常用的内嵌tomcat\",{\"1\":{\"439\":1}}],[\"如\",{\"1\":{\"434\":1,\"486\":1,\"1076\":1,\"1713\":1,\"1845\":1,\"2671\":1,\"2676\":1,\"3090\":1,\"3091\":1,\"3214\":1,\"4668\":1,\"4673\":1,\"4731\":1,\"5029\":1,\"5557\":1,\"5947\":1,\"6668\":1,\"6683\":1,\"6684\":1,\"7556\":1,\"7827\":1,\"8401\":1,\"8403\":1,\"8458\":1,\"8469\":1,\"8611\":1,\"8875\":1,\"8939\":1,\"9098\":1,\"9229\":1,\"9311\":1,\"9540\":1,\"10136\":1}}],[\"如下在查询语句后面跟explain\",{\"1\":{\"10416\":1}}],[\"如下几个文档\",{\"1\":{\"9934\":1,\"9977\":1}}],[\"如下几个\",{\"1\":{\"6698\":1}}],[\"如下图位置\",{\"1\":{\"9037\":1}}],[\"如下图\",{\"1\":{\"3103\":1}}],[\"如下\",{\"1\":{\"332\":1,\"390\":1,\"393\":1,\"411\":1,\"559\":1,\"1031\":1,\"1308\":1,\"1878\":1,\"2361\":1,\"3310\":1,\"3544\":1,\"3549\":1,\"3820\":1,\"4183\":1,\"4208\":1,\"4382\":1,\"4584\":1,\"5047\":1,\"6077\":1,\"6080\":1,\"7892\":1,\"8259\":1,\"8527\":1,\"8539\":1,\"8875\":1,\"9003\":1,\"10189\":1,\"10350\":1,\"10520\":1,\"10717\":1,\"10808\":1}}],[\"如redis\",{\"1\":{\"19\":1}}],[\"如mysql\",{\"1\":{\"6\":1}}],[\"mp4<\",{\"1\":{\"9232\":1}}],[\"mp4\",{\"1\":{\"6232\":1}}],[\"mp3\",{\"1\":{\"6232\":1}}],[\"mpconfig\",{\"1\":{\"1234\":1}}],[\"mr1\",{\"1\":{\"5310\":3}}],[\"m27019\",{\"1\":{\"10487\":1,\"10506\":3,\"10508\":1,\"10774\":1}}],[\"m27018\",{\"1\":{\"10486\":1,\"10501\":3,\"10503\":1,\"10774\":1}}],[\"m27017\",{\"1\":{\"10485\":1,\"10496\":3,\"10498\":1,\"10774\":1,\"10777\":1}}],[\"m2\",{\"1\":{\"5185\":2}}],[\"m1对象不能重复调用start\",{\"1\":{\"5185\":1}}],[\"m1\",{\"1\":{\"5185\":4,\"5263\":4,\"5322\":4,\"5345\":4}}],[\"m4\",{\"1\":{\"4192\":1}}],[\"mvc与三层架构\",{\"0\":{\"9576\":1}}],[\"mvc的优点\",{\"0\":{\"9550\":1}}],[\"mvc的设计模式\",{\"1\":{\"3920\":1}}],[\"mvc\",{\"0\":{\"9536\":1},\"1\":{\"9538\":1,\"9579\":3,\"9581\":2}}],[\"mvc是常用的设计模式之一\",{\"1\":{\"4595\":1}}],[\"mvc设计模式\",{\"0\":{\"4594\":1}}],[\"mvn\",{\"1\":{\"693\":1}}],[\"mvnw\",{\"1\":{\"340\":2}}],[\"m+n\",{\"1\":{\"3782\":1}}],[\"m和n相等\",{\"1\":{\"3322\":1}}],[\"m大\",{\"1\":{\"3322\":1}}],[\"m>n\",{\"1\":{\"3319\":2}}],[\"mc\",{\"1\":{\"2365\":2}}],[\"mimetype\",{\"1\":{\"9234\":1}}],[\"mime\",{\"1\":{\"9232\":2}}],[\"mime类型\",{\"0\":{\"9226\":1}}],[\"mi\",{\"1\":{\"6706\":1,\"6708\":2,\"6711\":1}}],[\"millitime\",{\"1\":{\"5213\":1}}],[\"misc\",{\"1\":{\"2165\":1,\"2168\":1,\"7043\":2}}],[\"minimum\",{\"1\":{\"9895\":2}}],[\"mininclusive\",{\"1\":{\"9642\":1}}],[\"minidle\",{\"1\":{\"8288\":1}}],[\"minoccurs=\",{\"1\":{\"9642\":1}}],[\"minevictableidletimemillis\",{\"1\":{\"8313\":1}}],[\"min2\",{\"1\":{\"1823\":2}}],[\"min1\",{\"1\":{\"1823\":2}}],[\"minusweeks\",{\"1\":{\"1663\":1}}],[\"minusnanos\",{\"1\":{\"1663\":1}}],[\"minusseconds\",{\"1\":{\"1663\":1}}],[\"minusminutes\",{\"1\":{\"1663\":1}}],[\"minusmonths\",{\"1\":{\"1663\":1}}],[\"minushours\",{\"1\":{\"1663\":1}}],[\"minusdays\",{\"1\":{\"1663\":1}}],[\"minusyears\",{\"1\":{\"1663\":1}}],[\"minusxxx\",{\"0\":{\"1661\":1}}],[\"minute\",{\"1\":{\"1651\":2,\"1654\":2}}],[\"min\",{\"0\":{\"1821\":1,\"2501\":1,\"7695\":1},\"1\":{\"647\":1,\"1657\":2,\"1660\":3,\"1663\":1,\"1763\":1,\"1823\":3,\"2351\":1,\"2505\":5,\"4491\":1,\"5243\":1,\"5889\":2,\"7697\":4}}],[\"mkdirs\",{\"0\":{\"2007\":1},\"1\":{\"2009\":2}}],[\"mkdir不会抛出异常\",{\"1\":{\"2006\":1,\"2009\":1}}],[\"mkdir\",{\"0\":{\"2004\":1},\"1\":{\"2006\":2,\"10159\":2}}],[\"multi\",{\"1\":{\"10283\":1,\"10293\":1}}],[\"multiline\",{\"1\":{\"2722\":1}}],[\"multiplicand\",{\"1\":{\"1892\":1}}],[\"multiply\",{\"0\":{\"1890\":1},\"1\":{\"1892\":2}}],[\"music\",{\"1\":{\"489\":2}}],[\"msomebody\",{\"1\":{\"5060\":3}}],[\"ms可选\",{\"1\":{\"1651\":1}}],[\"ms\",{\"1\":{\"1651\":2,\"1657\":2,\"1660\":2,\"1663\":1,\"1679\":2,\"1682\":2,\"1966\":2,\"2303\":1,\"2304\":2}}],[\"msg2\",{\"1\":{\"9714\":1}}],[\"msg1\",{\"1\":{\"9714\":1}}],[\"msg=hello\",{\"1\":{\"9700\":1,\"9705\":1}}],[\"msg\",{\"1\":{\"952\":4,\"1296\":7,\"4813\":2,\"9124\":4,\"9693\":1,\"9695\":1,\"9717\":1}}],[\"most\",{\"1\":{\"10445\":1}}],[\"mogondb\",{\"1\":{\"10288\":1}}],[\"mobile\",{\"1\":{\"8961\":1}}],[\"move\",{\"1\":{\"6621\":1}}],[\"modle\",{\"1\":{\"9584\":1}}],[\"modules\",{\"1\":{\"8699\":1,\"9884\":1}}],[\"module上右键\",{\"1\":{\"8537\":1}}],[\"module\",{\"1\":{\"8526\":1,\"8547\":1,\"8559\":1}}],[\"modularity\",{\"0\":{\"7768\":1}}],[\"mode\",{\"0\":{\"6506\":1},\"1\":{\"6504\":1,\"6505\":2,\"8967\":1}}],[\"model\",{\"0\":{\"4596\":1},\"1\":{\"4597\":1,\"4598\":1,\"4599\":1,\"9539\":1}}],[\"modcount\",{\"1\":{\"5893\":1}}],[\"modifier\",{\"1\":{\"2263\":2,\"7086\":4,\"7106\":1}}],[\"modifiers\",{\"1\":{\"2225\":2}}],[\"modify\",{\"1\":{\"1265\":1,\"1276\":1,\"1299\":1}}],[\"more\",{\"1\":{\"2962\":1,\"6612\":1}}],[\"mongdb的依赖\",{\"1\":{\"10837\":1}}],[\"mongdb\",{\"1\":{\"10837\":1}}],[\"mongo\",{\"1\":{\"10770\":2,\"10774\":3,\"10777\":1}}],[\"mongoservererror\",{\"1\":{\"10585\":1,\"10734\":1}}],[\"mongos或mongod会将新条目附加到现有日志文件的末尾\",{\"1\":{\"10496\":1}}],[\"mongosh\",{\"1\":{\"10192\":1,\"10199\":1}}],[\"mongo中的数字\",{\"1\":{\"10255\":1}}],[\"mongod实例存储其数据的目录\",{\"1\":{\"10162\":1,\"10496\":1}}],[\"mongod或mongos应向其发送所有诊断日志记录信息的日志文件的路径\",{\"1\":{\"10162\":1,\"10496\":1}}],[\"mongod\",{\"1\":{\"10142\":1,\"10148\":1,\"10151\":2,\"10159\":1,\"10162\":1,\"10164\":3,\"10167\":1,\"10492\":1,\"10496\":2,\"10498\":2,\"10501\":2,\"10503\":2,\"10506\":2,\"10508\":2,\"10511\":1,\"10861\":1}}],[\"mongodb<\",{\"1\":{\"10829\":1,\"10839\":1}}],[\"mongodb默认是被springboot管理的\",{\"1\":{\"10828\":1}}],[\"mongodb默认是没有用户认证的\",{\"1\":{\"10187\":1}}],[\"mongodb存储所有的用户信息在admin\",{\"1\":{\"10721\":1}}],[\"mongodb使用的是基于角色的访问控制\",{\"1\":{\"10646\":1}}],[\"mongodb实例启动运行时是没有启用用户访问权限控制的\",{\"1\":{\"10636\":1}}],[\"mongodb在副本集中\",{\"1\":{\"10612\":1}}],[\"mongodb在创建集合的过程中\",{\"1\":{\"10381\":1}}],[\"mongodb中的复制\",{\"0\":{\"10443\":1}}],[\"mongodb中的副本集\",{\"1\":{\"10438\":1}}],[\"mongodb中的记录是一个\",{\"1\":{\"10078\":1}}],[\"mongodb直接从索引返回结果\",{\"1\":{\"10431\":1}}],[\"mongodb提供了散列索引类型\",{\"1\":{\"10373\":1}}],[\"mongodb提供了两种特殊的索引\",{\"1\":{\"10371\":1}}],[\"mongodb提供高性能的数据持久性\",{\"1\":{\"10020\":1}}],[\"mongodb还支持多个字段的用户定义索引\",{\"1\":{\"10368\":1}}],[\"mongodb还可以使用索引中的排序返回排序结果\",{\"1\":{\"10361\":1}}],[\"mongodb索引使用b树数据结构\",{\"1\":{\"10362\":1}}],[\"mongodb必须执行全集合扫描\",{\"1\":{\"10360\":1}}],[\"mongodb将返回而不处理数组中的其余文档\",{\"1\":{\"10250\":1}}],[\"mongodb会默认创建以下三个数据库\",{\"1\":{\"10204\":1}}],[\"mongodb不会对连接客户端进行用户验证\",{\"1\":{\"10636\":1}}],[\"mongodb不再提供mongodb\",{\"1\":{\"10177\":1}}],[\"mongodb不支持\",{\"1\":{\"10070\":1}}],[\"mongodb发送所有日志输出的目标指定为文件\",{\"1\":{\"10162\":1,\"10496\":1}}],[\"mongodb却是一个\",{\"1\":{\"10120\":1}}],[\"mongodb数据库\",{\"1\":{\"10118\":1}}],[\"mongodb和redis都是nosql\",{\"1\":{\"10116\":1}}],[\"mongodb的模糊查询是通过正则表达式的方式实现的\",{\"1\":{\"10345\":1}}],[\"mongodb的版本命名规范如\",{\"1\":{\"10131\":1}}],[\"mongodb的最小存储单位就是文档\",{\"1\":{\"10079\":1}}],[\"mongodb的复制工具称为副本集\",{\"1\":{\"10021\":1}}],[\"mongodb文档类似于json对象\",{\"1\":{\"10078\":1}}],[\"mongodb支持的数据结构非常松散\",{\"1\":{\"10077\":1}}],[\"mongodb自动将\",{\"1\":{\"10075\":1}}],[\"mongodb通过嵌入式文档来替代多表连接\",{\"1\":{\"10072\":1}}],[\"mongodb术语\",{\"1\":{\"10052\":1}}],[\"mongodb可应对\",{\"1\":{\"10028\":1}}],[\"mongodb是一个开源\",{\"1\":{\"10014\":1}}],[\"mongodb并非很流行的技术\",{\"1\":{\"260\":1,\"269\":1}}],[\"mongodb\",{\"0\":{\"254\":1,\"10013\":1,\"10115\":1,\"10174\":1,\"10185\":1,\"10836\":1},\"1\":{\"91\":1,\"10016\":1,\"10034\":1,\"10035\":1,\"10036\":2,\"10037\":1,\"10038\":1,\"10123\":1,\"10128\":1,\"10149\":1,\"10157\":2,\"10162\":4,\"10164\":2,\"10173\":1,\"10175\":1,\"10177\":1,\"10183\":1,\"10184\":1,\"10199\":1,\"10218\":1,\"10483\":2,\"10484\":1,\"10496\":3,\"10498\":1,\"10501\":3,\"10503\":1,\"10506\":3,\"10508\":1,\"10774\":3,\"10777\":1,\"10799\":1,\"10807\":1,\"10816\":1,\"10843\":1,\"10846\":2}}],[\"mongo还使用了特殊的数据类型\",{\"1\":{\"10083\":1}}],[\"monday\",{\"1\":{\"4820\":1}}],[\"mon\",{\"1\":{\"4256\":1}}],[\"money\",{\"1\":{\"3082\":1,\"3870\":2}}],[\"month\",{\"1\":{\"1651\":2,\"1654\":2,\"1657\":2,\"1660\":3,\"1663\":1}}],[\"m\",{\"1\":{\"776\":1,\"917\":1,\"923\":1,\"1512\":1,\"2114\":1,\"2518\":3,\"2592\":1,\"2683\":2,\"2722\":1,\"3319\":4,\"3322\":3,\"3782\":5,\"3787\":3,\"4553\":2,\"5384\":1,\"7097\":4,\"7106\":7,\"7373\":2,\"9539\":1,\"9579\":1}}],[\"mf的文件路径\",{\"1\":{\"9509\":1}}],[\"mf文件中也就没有了main\",{\"1\":{\"742\":1}}],[\"mf文件中的main\",{\"1\":{\"737\":1}}],[\"mf中start\",{\"1\":{\"726\":1}}],[\"mf\",{\"0\":{\"733\":1},\"1\":{\"718\":1,\"730\":1,\"734\":2,\"9473\":1}}],[\"me\",{\"1\":{\"2807\":1,\"10526\":1}}],[\"mempty\",{\"1\":{\"5060\":3}}],[\"members里多了一个对象\",{\"1\":{\"10582\":1}}],[\"members\",{\"1\":{\"10541\":1,\"10544\":1,\"10554\":1,\"10558\":1,\"10597\":3,\"10626\":1}}],[\"member\",{\"1\":{\"2217\":1}}],[\"memcache\",{\"0\":{\"248\":1},\"1\":{\"92\":1}}],[\"mediumblob\",{\"1\":{\"8071\":1}}],[\"medium\",{\"1\":{\"1716\":1}}],[\"method=\",{\"1\":{\"8988\":1,\"9025\":1}}],[\"method和field\",{\"1\":{\"7186\":1}}],[\"method3\",{\"1\":{\"4523\":1,\"4529\":1,\"4534\":4}}],[\"method2\",{\"1\":{\"4523\":1,\"4529\":1,\"4777\":2,\"7307\":2}}],[\"method1\",{\"1\":{\"4523\":1,\"4526\":1,\"4777\":2,\"7307\":2,\"7418\":1}}],[\"methods\",{\"1\":{\"2197\":2,\"2200\":2,\"7097\":2}}],[\"method\",{\"0\":{\"2248\":1},\"1\":{\"2197\":2,\"2200\":2,\"2204\":4,\"2211\":2,\"2252\":1,\"2256\":3,\"2263\":1,\"2266\":1,\"2269\":1,\"2272\":1,\"2275\":1,\"2277\":1,\"2282\":1,\"3627\":1,\"4459\":2,\"4635\":1,\"4751\":1,\"4960\":1,\"4961\":1,\"4989\":1,\"4993\":1,\"5030\":1,\"5043\":1,\"5058\":1,\"5060\":8,\"6941\":1,\"6960\":1,\"6962\":1,\"7097\":4,\"7106\":2,\"7161\":2,\"7166\":1,\"7171\":1,\"7274\":2,\"7279\":4,\"7307\":3,\"7442\":1,\"8806\":7,\"8817\":3,\"8944\":2,\"9004\":3}}],[\"method类数组\",{\"1\":{\"2196\":1,\"2199\":1}}],[\"method`\",{\"1\":{\"1352\":1}}],[\"metadata\",{\"1\":{\"4878\":1}}],[\"meta\",{\"1\":{\"569\":1,\"570\":1,\"717\":1,\"729\":1,\"9473\":1}}],[\"message\",{\"1\":{\"647\":2,\"1286\":1}}],[\"megabytes\",{\"1\":{\"635\":1}}],[\"mm\",{\"1\":{\"486\":1,\"936\":1,\"939\":1,\"952\":11,\"1638\":1,\"1650\":2,\"1722\":2,\"1723\":2,\"1725\":2,\"1727\":2,\"1788\":3,\"4256\":2,\"5618\":3,\"5620\":3,\"7956\":1,\"7970\":1}}],[\"md\",{\"1\":{\"340\":1}}],[\"majorityvotecount\",{\"1\":{\"10554\":1}}],[\"macos\",{\"0\":{\"10168\":1},\"1\":{\"9873\":1}}],[\"machine\",{\"1\":{\"2819\":1}}],[\"male\",{\"1\":{\"9642\":1}}],[\"markup\",{\"1\":{\"9591\":1}}],[\"mame\",{\"1\":{\"3985\":1}}],[\"matchresult\",{\"1\":{\"2765\":1}}],[\"matcher会初始化很多匹配的状态信息\",{\"1\":{\"2771\":1}}],[\"matcher对象是一个状态机器\",{\"1\":{\"2771\":1}}],[\"matcher的状态\",{\"0\":{\"2770\":1}}],[\"matcher\",{\"0\":{\"2742\":1,\"2761\":1},\"1\":{\"2666\":4,\"2675\":1,\"2676\":1,\"2683\":2,\"2710\":1,\"2744\":1,\"2747\":6,\"2765\":1,\"2767\":1}}],[\"matcher类提供了对正则表达式的分组支持\",{\"1\":{\"2745\":1}}],[\"matcher类的构造方法是私有的\",{\"1\":{\"2767\":1}}],[\"matcher类的构造方法也是私有的\",{\"1\":{\"2744\":1}}],[\"matcher类的功能更加丰富\",{\"1\":{\"2685\":1}}],[\"matcher类\",{\"1\":{\"2666\":1}}],[\"matches​\",{\"1\":{\"2756\":1}}],[\"matches\",{\"0\":{\"1522\":1,\"2698\":1,\"2751\":1},\"1\":{\"1524\":2,\"2683\":1,\"2700\":2,\"2747\":1,\"2756\":1}}],[\"math包的biginteger\",{\"1\":{\"1867\":1}}],[\"math\",{\"0\":{\"1793\":1},\"1\":{\"1763\":1,\"1796\":1,\"1797\":2,\"1800\":1,\"1804\":1,\"1805\":3,\"1808\":1,\"1811\":1,\"1813\":1,\"1814\":2,\"1817\":1,\"1820\":2,\"1823\":2,\"1825\":2,\"1832\":4,\"1867\":1,\"1872\":1,\"3457\":1,\"3658\":1,\"3928\":1,\"3933\":1,\"4410\":1,\"7593\":1,\"9495\":1}}],[\"manager\",{\"1\":{\"4439\":1}}],[\"man\",{\"1\":{\"1512\":1,\"1515\":2,\"1518\":2,\"1521\":2,\"4192\":2,\"4821\":1,\"6094\":1}}],[\"manifeast\",{\"0\":{\"733\":1}}],[\"manifest\",{\"1\":{\"718\":1,\"730\":1,\"734\":2,\"9473\":1,\"9500\":1,\"9509\":1}}],[\"magenta\",{\"1\":{\"952\":2}}],[\"maxoccurs=\",{\"1\":{\"9642\":1}}],[\"maxopenpreparedstatements\",{\"1\":{\"8295\":1}}],[\"maxwait\",{\"1\":{\"8290\":1}}],[\"maxwait=1000\",{\"1\":{\"8263\":1}}],[\"maxinclusive\",{\"1\":{\"9642\":1}}],[\"maxidle\",{\"1\":{\"8285\":1}}],[\"maximum\",{\"1\":{\"5886\":1}}],[\"maximumpoolsize\",{\"1\":{\"5497\":1}}],[\"maxactive\",{\"1\":{\"8282\":1}}],[\"maxactive=20\",{\"1\":{\"8263\":1}}],[\"maxbirth\",{\"1\":{\"8210\":2}}],[\"maxstr\",{\"1\":{\"3322\":1}}],[\"max2\",{\"1\":{\"1825\":2}}],[\"max1\",{\"1\":{\"1825\":2}}],[\"maxhistory>\",{\"1\":{\"952\":3}}],[\"maxfilesize>\",{\"1\":{\"952\":3}}],[\"max\",{\"0\":{\"1824\":1,\"2496\":1,\"7692\":1},\"1\":{\"647\":1,\"936\":1,\"1051\":2,\"1825\":3,\"2500\":5,\"3319\":2,\"4491\":1,\"5242\":1,\"7694\":4,\"8079\":1,\"8207\":1,\"8391\":1}}],[\"mainfest\",{\"1\":{\"9503\":1}}],[\"main方法就是java程序的主线程\",{\"1\":{\"5159\":1}}],[\"main方法再执行时\",{\"1\":{\"779\":1}}],[\"main线程\",{\"1\":{\"5159\":1}}],[\"main的特点\",{\"1\":{\"4615\":1}}],[\"main的args参数\",{\"0\":{\"778\":1}}],[\"maina\",{\"1\":{\"3664\":1}}],[\"main\",{\"0\":{\"2905\":1,\"4609\":1},\"1\":{\"425\":1,\"430\":1,\"584\":1,\"734\":1,\"781\":3,\"1119\":2,\"2882\":1,\"3405\":1,\"3414\":1,\"3457\":1,\"3636\":1,\"3738\":1,\"3747\":1,\"3782\":1,\"3816\":1,\"3821\":1,\"3987\":1,\"4142\":1,\"4164\":1,\"4356\":1,\"4358\":1,\"4459\":1,\"4610\":1,\"4611\":1,\"4612\":1,\"4670\":2,\"4777\":1,\"4803\":1,\"5060\":1,\"5092\":1,\"5185\":1,\"5188\":1,\"5191\":1,\"5218\":1,\"5219\":1,\"5221\":1,\"5253\":1,\"5263\":1,\"5310\":1,\"5322\":1,\"5345\":1,\"5396\":1,\"5426\":1,\"5464\":1,\"5486\":1,\"5517\":1,\"6001\":1,\"7231\":1,\"8623\":1,\"9500\":1,\"9503\":1}}],[\"maplisthandler\",{\"1\":{\"8377\":1}}],[\"maphandler\",{\"1\":{\"8376\":1}}],[\"mapping>\",{\"1\":{\"9232\":2}}],[\"mapping\",{\"0\":{\"8028\":1}}],[\"mapper\",{\"0\":{\"1011\":1,\"1220\":1},\"1\":{\"988\":1,\"1013\":1,\"1119\":1,\"1222\":1,\"7647\":1,\"9569\":1}}],[\"mapper注解是为了被ioc容器识别\",{\"1\":{\"987\":1}}],[\"mapper接口\",{\"0\":{\"986\":1}}],[\"map的使用\",{\"0\":{\"7656\":1}}],[\"map和flatmap的对比示例\",{\"0\":{\"7651\":1}}],[\"maptolong\",{\"0\":{\"7641\":1},\"1\":{\"7601\":1,\"7643\":1}}],[\"maptoint\",{\"0\":{\"7638\":1},\"1\":{\"7601\":1,\"7640\":1}}],[\"maptodouble\",{\"0\":{\"7635\":1},\"1\":{\"7601\":1,\"7637\":1}}],[\"map相关的方法比较少\",{\"1\":{\"5934\":1}}],[\"map中的entry\",{\"1\":{\"5851\":1}}],[\"map常用方法\",{\"0\":{\"5842\":1}}],[\"map与collection并列存在\",{\"1\":{\"5798\":1}}],[\"map集合是k\",{\"1\":{\"5969\":1}}],[\"map集合\",{\"0\":{\"5968\":1}}],[\"map集合的元素\",{\"1\":{\"5574\":1}}],[\"map集合内的数据是键值对\",{\"1\":{\"2578\":1}}],[\"map接口的继承结构\",{\"0\":{\"5805\":1}}],[\"map接口的常用实现类\",{\"1\":{\"5803\":1}}],[\"map接口继承图\",{\"0\":{\"5552\":1}}],[\"map接口是没有iterator的\",{\"1\":{\"2582\":1}}],[\"map<string\",{\"1\":{\"2592\":1,\"9021\":1,\"9027\":1}}],[\"map<\",{\"1\":{\"2592\":1}}],[\"map<k\",{\"1\":{\"2518\":2,\"2574\":1}}],[\"map有五个实现类\",{\"1\":{\"2576\":1}}],[\"map\",{\"0\":{\"1379\":1,\"2519\":1,\"2570\":1,\"5795\":1,\"5796\":1,\"7630\":1,\"7713\":1},\"1\":{\"137\":1,\"1364\":1,\"2478\":1,\"2624\":2,\"5542\":1,\"5548\":1,\"5681\":1,\"5799\":1,\"5800\":2,\"5804\":1,\"5806\":1,\"5843\":1,\"5856\":1,\"5858\":1,\"5901\":5,\"5913\":8,\"5916\":1,\"5933\":1,\"5970\":7,\"7601\":1,\"7634\":3,\"7658\":1,\"7662\":1,\"7694\":1,\"7714\":2,\"7716\":1,\"7719\":1,\"9027\":3}}],[\"maven导入fastjson包\",{\"1\":{\"9817\":1}}],[\"maven是包管理器\",{\"1\":{\"9533\":1}}],[\"maven的版本要与springcloud与springboot兼容\",{\"1\":{\"1066\":1}}],[\"maven的包信息\",{\"1\":{\"312\":1}}],[\"maven配置\",{\"0\":{\"1064\":1}}],[\"maven设置多环境\",{\"0\":{\"860\":1}}],[\"maven插件\",{\"0\":{\"701\":1}}],[\"maven已经下载好了所需的依赖\",{\"1\":{\"364\":1}}],[\"maven\",{\"0\":{\"384\":1,\"716\":1,\"727\":1,\"8545\":1,\"8556\":1,\"9531\":1,\"10827\":1,\"10838\":1},\"1\":{\"12\":1,\"302\":1,\"343\":1,\"347\":1,\"569\":1,\"703\":1,\"705\":1,\"707\":1,\"708\":1,\"709\":1,\"734\":3,\"1068\":1,\"1177\":1,\"1394\":1,\"8548\":2,\"8557\":1}}],[\"myroot\",{\"1\":{\"10706\":1,\"10711\":1,\"10726\":3}}],[\"myrs\",{\"1\":{\"10496\":1,\"10526\":1,\"10541\":1,\"10543\":1,\"10554\":1,\"10556\":1,\"10573\":1,\"10603\":1,\"10766\":2}}],[\"myrunnable类的实例\",{\"1\":{\"5268\":1}}],[\"myrunnable类没有继承\",{\"1\":{\"5267\":1}}],[\"myrunnable\",{\"1\":{\"5263\":4,\"5310\":3,\"5322\":3,\"5345\":3}}],[\"mystate\",{\"1\":{\"10554\":1,\"10557\":1}}],[\"myservlet\",{\"1\":{\"8817\":1}}],[\"mysql是b+tree\",{\"1\":{\"10362\":1}}],[\"mysql对比\",{\"0\":{\"9911\":1}}],[\"mysql事务\",{\"1\":{\"8129\":1}}],[\"mysql服务器默认是关闭批处理的\",{\"1\":{\"8119\":1}}],[\"mysql服务端端口号\",{\"1\":{\"7844\":1}}],[\"mysqld\",{\"1\":{\"8079\":1}}],[\"mysql配置文件中\",{\"1\":{\"8077\":1}}],[\"mysql的驱动要>=5\",{\"1\":{\"8118\":1}}],[\"mysql的四种blob类型\",{\"1\":{\"8068\":1}}],[\"mysql的jdbc驱动包\",{\"1\":{\"7824\":1}}],[\"mysql的jdbc驱动源码\",{\"1\":{\"7823\":1}}],[\"mysql中\",{\"1\":{\"8066\":1}}],[\"mysql默认端口是3306\",{\"1\":{\"7845\":1}}],[\"mysql占用端口3306\",{\"1\":{\"6684\":1}}],[\"mysqlconnect\",{\"1\":{\"4142\":1}}],[\"mysql版本在8\",{\"1\":{\"998\":1}}],[\"mysql驱动问题\",{\"0\":{\"997\":1}}],[\"mysql\",{\"0\":{\"272\":1,\"959\":1,\"1140\":1,\"8065\":1},\"1\":{\"17\":1,\"88\":1,\"516\":2,\"600\":1,\"969\":2,\"976\":1,\"981\":2,\"995\":1,\"999\":2,\"1008\":2,\"1177\":3,\"1200\":1,\"1206\":2,\"1364\":2,\"4140\":1,\"7824\":1,\"7844\":1,\"7846\":1,\"7852\":3,\"7854\":1,\"7858\":1,\"7862\":2,\"7865\":2,\"7871\":2,\"8263\":2,\"8272\":2,\"9912\":1,\"10014\":1,\"10721\":1}}],[\"myinterface\",{\"1\":{\"7418\":1}}],[\"myinvocationhandle已经在创建代理类是获取了被代理类的对象名\",{\"1\":{\"7296\":1}}],[\"myinvocationhandler是他的参数之一\",{\"1\":{\"7294\":1}}],[\"myinvocationhandler\",{\"1\":{\"7277\":2,\"7279\":1}}],[\"mythread\",{\"1\":{\"5185\":5,\"5332\":1}}],[\"myannotation的值\",{\"1\":{\"5060\":1}}],[\"myannotation的target和retention等元注解与myannotations相同\",{\"1\":{\"5021\":1}}],[\"myannotations\",{\"1\":{\"5015\":2,\"5022\":1}}],[\"myannotation\",{\"1\":{\"4918\":1,\"4943\":2,\"4979\":1,\"4989\":1,\"5001\":1,\"5004\":1,\"5011\":2,\"5015\":3,\"5030\":1,\"5033\":2,\"5060\":12,\"7108\":1}}],[\"myexception\",{\"1\":{\"4813\":3}}],[\"mymethod\",{\"1\":{\"4534\":1}}],[\"mycomparable\",{\"1\":{\"4332\":1}}],[\"mycomparator\",{\"1\":{\"2365\":3}}],[\"mybatista\",{\"1\":{\"9585\":1}}],[\"mybatis等只是更好的封装了jdbc\",{\"1\":{\"7796\":1}}],[\"mybatisplus也对这些方法进行了封装\",{\"1\":{\"1267\":1}}],[\"mybatisplus将复杂的条件查询sql都封装好了\",{\"1\":{\"1243\":1}}],[\"mybatisplus的ipage接口封装了所有与分页相关的信息和操作\",{\"1\":{\"1236\":1}}],[\"mybatisplusinterceptor\",{\"1\":{\"1233\":1,\"1234\":4}}],[\"mybatisplus内部有分页操作相关的api\",{\"1\":{\"1231\":1}}],[\"mybatisplus是采用雪花算法生成uuid作为id的\",{\"1\":{\"1226\":1}}],[\"mybatisplus\",{\"0\":{\"1266\":1},\"1\":{\"1219\":1,\"1222\":1}}],[\"mybatisplus依赖\",{\"1\":{\"1150\":1}}],[\"mybatis<\",{\"1\":{\"1148\":1}}],[\"mybatis依赖\",{\"1\":{\"1147\":1}}],[\"mybatis或mybatisplus\",{\"1\":{\"972\":1}}],[\"mybatis\",{\"0\":{\"970\":1,\"1146\":1,\"1149\":1},\"1\":{\"16\":1,\"89\":1,\"978\":2,\"1119\":1,\"1150\":1,\"1177\":3,\"1200\":1,\"1205\":1,\"1206\":1,\"1229\":1,\"1364\":1,\"1392\":1,\"7795\":1,\"9574\":1}}],[\"s001\",{\"1\":{\"9635\":1}}],[\"srae\",{\"1\":{\"9400\":1,\"9402\":1,\"9404\":1}}],[\"sre\",{\"1\":{\"9353\":1,\"9355\":1}}],[\"src目录下的资源访问\",{\"1\":{\"9262\":1}}],[\"src目录\",{\"1\":{\"9260\":1}}],[\"srcpath\",{\"1\":{\"6306\":2,\"6359\":2}}],[\"srcfile\",{\"1\":{\"6287\":2,\"6297\":2,\"6306\":2,\"6353\":2}}],[\"src\",{\"1\":{\"1083\":1,\"1119\":2,\"2512\":1,\"6297\":2,\"6616\":1,\"6621\":2,\"7049\":1,\"7823\":1,\"7972\":1,\"8262\":1,\"8490\":1,\"8623\":1}}],[\"src=>main=>resources内的\",{\"1\":{\"453\":1}}],[\"s架构的web项目\",{\"1\":{\"8799\":1}}],[\"sdf\",{\"1\":{\"7956\":2,\"7970\":2}}],[\"sdktest\",{\"1\":{\"1083\":1}}],[\"sdk\",{\"1\":{\"397\":2,\"1172\":2,\"8530\":1}}],[\"sdk的版本要与java处的sdk版本一致\",{\"1\":{\"314\":1}}],[\"smallint\",{\"1\":{\"7910\":1}}],[\"skip方法同样接受一个数字参数作为跳过的记录条数\",{\"1\":{\"10330\":1}}],[\"skip\",{\"0\":{\"7624\":1},\"1\":{\"7600\":1,\"7626\":2,\"10331\":1,\"10333\":2,\"10340\":2}}],[\"sz\",{\"1\":{\"6331\":3,\"6334\":4}}],[\"s+\",{\"1\":{\"4872\":1}}],[\"s的方式\",{\"1\":{\"4079\":1}}],[\"switched\",{\"1\":{\"10603\":1}}],[\"switch中表达式的取值情况不太多\",{\"1\":{\"3376\":1}}],[\"switch结构中的表达式\",{\"1\":{\"3366\":1}}],[\"switch\",{\"0\":{\"3358\":1},\"1\":{\"3335\":1,\"3360\":1,\"3374\":1,\"3376\":1,\"3428\":1,\"5052\":1,\"6949\":1}}],[\"swap\",{\"0\":{\"2493\":1},\"1\":{\"2495\":2,\"3782\":2,\"3787\":1}}],[\"swagger3\",{\"1\":{\"1177\":1}}],[\"swagger\",{\"0\":{\"172\":1,\"1162\":1},\"1\":{\"1177\":2,\"1394\":1}}],[\"salary=2500\",{\"1\":{\"7697\":1}}],[\"salary=6000\",{\"1\":{\"7685\":1,\"7688\":1}}],[\"safevarargs\",{\"1\":{\"4904\":1}}],[\"satic\",{\"1\":{\"3987\":1}}],[\"sayhello\",{\"1\":{\"3664\":2}}],[\"say\",{\"1\":{\"2204\":1,\"2211\":4,\"2256\":1,\"2269\":1,\"2282\":4,\"2954\":1,\"2974\":2,\"3738\":2,\"3980\":1,\"4077\":3,\"4083\":2,\"4162\":1,\"4164\":3,\"4451\":1,\"4943\":1}}],[\"savebook\",{\"1\":{\"1265\":1}}],[\"save\",{\"1\":{\"663\":1,\"1263\":1,\"1276\":2,\"1299\":2,\"10245\":1}}],[\"sqrt\",{\"1\":{\"1831\":1,\"1832\":4,\"3457\":1}}],[\"sql术语\",{\"1\":{\"10051\":1}}],[\"sql2\",{\"1\":{\"8148\":2}}],[\"sql1\",{\"1\":{\"8148\":2}}],[\"sql语句中给列起别名\",{\"1\":{\"8050\":1}}],[\"sql语句是debug下才会打印\",{\"1\":{\"952\":1}}],[\"sql中占位符的个数与可变形参的长度应该相同\",{\"1\":{\"7987\":1}}],[\"sql中也是\",{\"1\":{\"7598\":1}}],[\"sql的占位符数量和类型都是不确定的\",{\"1\":{\"7986\":1}}],[\"sql的预编译语句\",{\"1\":{\"7986\":1}}],[\"sql类型\",{\"1\":{\"7904\":1}}],[\"sqlexception异常\",{\"1\":{\"7955\":1,\"7959\":1}}],[\"sqlexception\",{\"1\":{\"7852\":1,\"7970\":2,\"7978\":2,\"8148\":2,\"8201\":1,\"8324\":1,\"8340\":1,\"8342\":1,\"8344\":1,\"8345\":1,\"8355\":1,\"8358\":1,\"8361\":1,\"8362\":1,\"8365\":1,\"8389\":1}}],[\"sql也是\",{\"1\":{\"7598\":1}}],[\"sql相关\",{\"1\":{\"1177\":1}}],[\"sql\",{\"0\":{\"1139\":1,\"10874\":1},\"1\":{\"1612\":1,\"3938\":1,\"4141\":1,\"7545\":1,\"7798\":2,\"7852\":1,\"7880\":1,\"7882\":1,\"7883\":1,\"7884\":1,\"7885\":1,\"7889\":2,\"7891\":3,\"7919\":1,\"7921\":1,\"7923\":1,\"7927\":1,\"7929\":1,\"7945\":1,\"7946\":1,\"7947\":3,\"7950\":1,\"7951\":2,\"7952\":2,\"7954\":2,\"7955\":1,\"7970\":2,\"7980\":2,\"7989\":2,\"7991\":4,\"8037\":2,\"8045\":2,\"8047\":4,\"8054\":2,\"8056\":2,\"8084\":2,\"8089\":2,\"8109\":2,\"8113\":2,\"8121\":3,\"8126\":3,\"8146\":2,\"8162\":2,\"8201\":8,\"8207\":14,\"8242\":1,\"8260\":1,\"8340\":1,\"8352\":1,\"8355\":1,\"8358\":1,\"8361\":1,\"8362\":1,\"8365\":1,\"8368\":2,\"8381\":2,\"8383\":2,\"8385\":2,\"8387\":2,\"8389\":2,\"8391\":4,\"9854\":1}}],[\"soundcloud\",{\"1\":{\"9845\":1}}],[\"source\",{\"1\":{\"2325\":1,\"2782\":1,\"4964\":1,\"4968\":1,\"4983\":1,\"5043\":1,\"7834\":1,\"8260\":2,\"8324\":3,\"8426\":1,\"8628\":1}}],[\"solr\",{\"1\":{\"9838\":1}}],[\"sos\",{\"1\":{\"9101\":2}}],[\"socket是客户端和服务器之间的一个连接\",{\"1\":{\"6918\":1}}],[\"socket的构造器\",{\"0\":{\"6800\":1}}],[\"socket类常用方法\",{\"0\":{\"6773\":1}}],[\"socket类常用构造器\",{\"0\":{\"6766\":1}}],[\"socket分类\",{\"0\":{\"6763\":1}}],[\"socket允许程序把网络连接当成一个流\",{\"1\":{\"6761\":1}}],[\"socket\",{\"0\":{\"6686\":1,\"6755\":1},\"1\":{\"6687\":1,\"6757\":1,\"6758\":1,\"6764\":1,\"6765\":1,\"6769\":1,\"6772\":1,\"6790\":1,\"6801\":2,\"6803\":2,\"6816\":1,\"6819\":1,\"6918\":1}}],[\"socketchannel\",{\"1\":{\"6585\":1}}],[\"socrt\",{\"1\":{\"2351\":1}}],[\"sombody\",{\"1\":{\"5060\":1}}],[\"somebody\",{\"1\":{\"5060\":5}}],[\"some\",{\"1\":{\"1083\":1,\"2962\":1,\"2974\":1}}],[\"son4\",{\"1\":{\"6028\":1}}],[\"son4<>\",{\"1\":{\"6028\":1}}],[\"son4<string>\",{\"1\":{\"6028\":1}}],[\"son4<t2>\",{\"1\":{\"6028\":1}}],[\"son4仍是泛型类\",{\"1\":{\"6027\":1}}],[\"son3\",{\"1\":{\"6025\":1}}],[\"son3<>\",{\"1\":{\"6025\":1}}],[\"son3<string\",{\"1\":{\"6025\":1}}],[\"son3<t1\",{\"1\":{\"6025\":1}}],[\"son3仍是泛型类\",{\"1\":{\"6024\":1}}],[\"son的age\",{\"1\":{\"4178\":1}}],[\"sondo\",{\"1\":{\"4174\":1,\"4188\":1}}],[\"son1不是泛型类\",{\"1\":{\"6018\":1}}],[\"son1\",{\"1\":{\"4061\":1,\"6019\":4}}],[\"son2不是泛型类\",{\"1\":{\"6021\":1}}],[\"son2\",{\"1\":{\"4061\":2,\"4064\":1,\"6022\":4}}],[\"son\",{\"1\":{\"4039\":1,\"4061\":5,\"4077\":1,\"4080\":1,\"4083\":2,\"4092\":2,\"4118\":1,\"4162\":3,\"4164\":4,\"4174\":3,\"4178\":2,\"4181\":3,\"4184\":3,\"4188\":3,\"4499\":1,\"6019\":1}}],[\"soft\",{\"1\":{\"2314\":1,\"2858\":1}}],[\"sorted\",{\"0\":{\"7667\":1,\"7671\":1},\"1\":{\"7602\":1,\"7670\":2,\"7673\":2}}],[\"sortedset\",{\"1\":{\"5714\":1}}],[\"sortedset<t>\",{\"1\":{\"2518\":2}}],[\"sortedmap<k\",{\"1\":{\"2518\":2}}],[\"sort\",{\"0\":{\"1764\":1,\"2355\":1,\"2359\":1,\"2363\":1,\"2488\":1},\"1\":{\"1773\":1,\"1780\":2,\"1788\":2,\"1791\":1,\"1822\":1,\"1848\":1,\"2362\":2,\"2365\":2,\"2492\":4,\"10335\":2,\"10337\":1,\"10339\":1,\"10340\":2}}],[\"sort进行排序了\",{\"1\":{\"1748\":1}}],[\"sort进行排序\",{\"1\":{\"1745\":1,\"1765\":1}}],[\"sort或arrays\",{\"1\":{\"1745\":1,\"1748\":1,\"1765\":1}}],[\"signature\",{\"1\":{\"10554\":1,\"10573\":1,\"10580\":1,\"10657\":1,\"10660\":1}}],[\"simpletype>\",{\"1\":{\"9642\":3}}],[\"simpletype\",{\"1\":{\"9642\":3}}],[\"simple\",{\"1\":{\"9642\":1}}],[\"simpledateformat\",{\"1\":{\"1613\":1,\"7956\":2,\"7970\":2}}],[\"site\",{\"1\":{\"8966\":1}}],[\"single\",{\"1\":{\"10159\":3,\"10162\":2,\"10164\":1,\"10365\":1}}],[\"sing\",{\"1\":{\"4329\":1}}],[\"since\",{\"1\":{\"2961\":1,\"2962\":1}}],[\"sin\",{\"1\":{\"1834\":1}}],[\"sizeandtimebasedfnatp\",{\"1\":{\"952\":3}}],[\"size\",{\"0\":{\"2408\":1,\"2607\":1},\"1\":{\"936\":1,\"1546\":1,\"2410\":4,\"2446\":1,\"2609\":4,\"5592\":1,\"5892\":1,\"6325\":5,\"6328\":4,\"6331\":1,\"6334\":1,\"6622\":1}}],[\"sync<\",{\"1\":{\"10829\":1}}],[\"syncsourceid\",{\"1\":{\"10554\":2,\"10576\":1,\"10583\":1}}],[\"syncsourcehost\",{\"1\":{\"10554\":2,\"10576\":1,\"10583\":1}}],[\"synchronize即不能包的代码多了\",{\"1\":{\"5326\":1}}],[\"synchronized有代码块锁和方法锁\",{\"1\":{\"5401\":1}}],[\"synchronized是隐式锁\",{\"1\":{\"5400\":1}}],[\"synchronized与lock的对比\",{\"0\":{\"5397\":1}}],[\"synchronizedsortedset\",{\"1\":{\"2518\":1}}],[\"synchronizedsortedmap\",{\"1\":{\"2518\":1}}],[\"synchronizedset\",{\"1\":{\"2518\":1}}],[\"synchronizednavigableset\",{\"1\":{\"2518\":1}}],[\"synchronizednavigablemap\",{\"1\":{\"2518\":1}}],[\"synchronizedmap\",{\"1\":{\"2518\":1}}],[\"synchronizedcollection\",{\"1\":{\"2518\":1}}],[\"synchronizedlist\",{\"1\":{\"2518\":2}}],[\"synchronizedxxx\",{\"0\":{\"2516\":1},\"1\":{\"2481\":1}}],[\"synchronized\",{\"1\":{\"1572\":2,\"3862\":1,\"5314\":1,\"5322\":1,\"5335\":1,\"5338\":1,\"5345\":1,\"5350\":2,\"5383\":1,\"5426\":4,\"5464\":1}}],[\"synclist\",{\"1\":{\"2518\":1}}],[\"systemlog\",{\"1\":{\"10162\":1,\"10496\":1}}],[\"system类\",{\"1\":{\"3975\":1}}],[\"system类代表系统\",{\"1\":{\"2298\":1}}],[\"system和thread\",{\"1\":{\"3933\":1}}],[\"system\",{\"0\":{\"2295\":1,\"6437\":1},\"1\":{\"372\":1,\"430\":1,\"508\":3,\"522\":1,\"584\":1,\"882\":1,\"888\":1,\"955\":1,\"991\":1,\"1016\":2,\"1038\":1,\"1224\":1,\"1241\":5,\"1421\":1,\"1424\":2,\"1427\":2,\"1431\":1,\"1435\":2,\"1438\":2,\"1442\":1,\"1449\":1,\"1452\":1,\"1455\":2,\"1458\":1,\"1464\":2,\"1467\":2,\"1472\":1,\"1475\":1,\"1480\":2,\"1486\":1,\"1491\":1,\"1494\":1,\"1496\":1,\"1502\":2,\"1506\":2,\"1512\":1,\"1515\":1,\"1518\":1,\"1521\":1,\"1524\":1,\"1529\":1,\"1581\":3,\"1584\":2,\"1589\":1,\"1595\":1,\"1601\":1,\"1604\":1,\"1610\":1,\"1648\":3,\"1654\":8,\"1657\":8,\"1660\":8,\"1673\":1,\"1676\":2,\"1679\":1,\"1682\":1,\"1705\":1,\"1707\":1,\"1719\":2,\"1725\":1,\"1771\":1,\"1773\":1,\"1788\":2,\"1791\":1,\"1800\":1,\"1805\":2,\"1808\":1,\"1811\":1,\"1814\":2,\"1817\":1,\"1820\":2,\"1823\":2,\"1825\":2,\"1832\":4,\"1850\":1,\"1853\":1,\"1856\":2,\"1862\":2,\"1879\":2,\"1886\":1,\"1889\":1,\"1892\":1,\"1899\":1,\"1907\":1,\"1937\":1,\"1950\":1,\"1953\":1,\"1956\":1,\"1959\":1,\"1963\":1,\"1966\":1,\"1971\":1,\"1975\":1,\"1979\":1,\"1982\":1,\"1985\":1,\"1989\":1,\"1993\":1,\"2003\":3,\"2006\":3,\"2009\":3,\"2015\":3,\"2022\":3,\"2042\":3,\"2048\":3,\"2121\":1,\"2134\":1,\"2137\":1,\"2141\":1,\"2144\":1,\"2147\":1,\"2153\":1,\"2156\":1,\"2159\":1,\"2162\":1,\"2165\":1,\"2168\":1,\"2171\":1,\"2175\":1,\"2178\":1,\"2185\":1,\"2188\":1,\"2191\":1,\"2194\":1,\"2197\":1,\"2200\":1,\"2204\":1,\"2211\":1,\"2225\":1,\"2228\":1,\"2231\":1,\"2239\":1,\"2244\":1,\"2256\":1,\"2263\":1,\"2266\":1,\"2269\":1,\"2272\":2,\"2275\":1,\"2282\":1,\"2301\":2,\"2304\":2,\"2314\":14,\"2325\":1,\"2331\":3,\"2345\":3,\"2354\":2,\"2362\":1,\"2365\":1,\"2370\":2,\"2375\":4,\"2379\":1,\"2382\":1,\"2387\":1,\"2391\":1,\"2404\":1,\"2407\":2,\"2410\":1,\"2413\":1,\"2416\":1,\"2422\":3,\"2426\":1,\"2429\":2,\"2433\":1,\"2436\":2,\"2444\":1,\"2449\":1,\"2461\":1,\"2465\":1,\"2469\":1,\"2484\":2,\"2487\":3,\"2492\":3,\"2495\":2,\"2500\":1,\"2505\":1,\"2508\":1,\"2512\":2,\"2515\":1,\"2530\":1,\"2537\":2,\"2546\":3,\"2549\":2,\"2552\":1,\"2555\":1,\"2563\":3,\"2566\":2,\"2569\":2,\"2589\":2,\"2592\":1,\"2595\":3,\"2598\":1,\"2601\":2,\"2604\":2,\"2606\":2,\"2609\":1,\"2612\":2,\"2615\":1,\"2618\":1,\"2621\":2,\"2624\":3,\"2692\":2,\"2697\":2,\"2700\":1,\"2705\":1,\"2747\":1,\"2750\":1,\"2756\":1,\"2760\":1,\"2782\":1,\"2788\":3,\"2802\":3,\"2882\":1,\"2912\":1,\"2913\":1,\"2962\":2,\"3212\":2,\"3237\":3,\"3241\":3,\"3261\":2,\"3374\":2,\"3405\":2,\"3414\":3,\"3420\":1,\"3444\":1,\"3453\":2,\"3455\":2,\"3457\":5,\"3509\":1,\"3512\":1,\"3570\":2,\"3588\":2,\"3591\":2,\"3630\":2,\"3636\":1,\"3646\":1,\"3664\":2,\"3738\":1,\"3747\":1,\"3782\":1,\"3803\":1,\"4039\":3,\"4061\":3,\"4077\":1,\"4080\":2,\"4083\":1,\"4164\":4,\"4178\":2,\"4227\":5,\"4229\":2,\"4256\":2,\"4274\":1,\"4281\":2,\"4329\":3,\"4356\":1,\"4358\":1,\"4378\":2,\"4422\":1,\"4459\":1,\"4466\":3,\"4469\":3,\"4513\":7,\"4523\":3,\"4553\":2,\"4658\":2,\"4661\":2,\"4709\":2,\"4712\":1,\"4714\":1,\"4720\":2,\"4722\":1,\"4724\":1,\"4734\":7,\"4751\":2,\"4753\":1,\"4777\":2,\"4803\":2,\"4845\":3,\"4872\":4,\"5060\":5,\"5185\":2,\"5219\":1,\"5221\":3,\"5253\":4,\"5263\":1,\"5310\":1,\"5322\":1,\"5345\":1,\"5396\":1,\"5426\":4,\"5464\":1,\"5486\":2,\"5517\":1,\"5562\":1,\"5590\":4,\"5592\":1,\"5595\":1,\"5611\":1,\"5614\":1,\"5618\":1,\"5620\":1,\"5779\":2,\"5790\":1,\"5901\":1,\"5913\":1,\"5927\":2,\"5964\":1,\"5967\":2,\"5970\":1,\"6073\":1,\"6078\":1,\"6081\":1,\"6132\":4,\"6136\":1,\"6251\":1,\"6254\":1,\"6260\":1,\"6264\":1,\"6348\":1,\"6359\":3,\"6394\":1,\"6398\":1,\"6435\":1,\"6436\":1,\"6438\":1,\"6439\":1,\"6448\":1,\"6449\":4,\"6458\":1,\"6460\":3,\"6487\":3,\"6557\":1,\"6573\":2,\"6700\":1,\"6703\":2,\"6706\":1,\"6708\":1,\"6711\":1,\"6819\":1,\"6843\":1,\"6949\":1,\"6956\":2,\"6958\":1,\"6960\":2,\"6962\":2,\"6989\":3,\"6994\":1,\"6997\":1,\"7000\":1,\"7002\":1,\"7043\":4,\"7049\":1,\"7054\":2,\"7072\":1,\"7078\":1,\"7086\":4,\"7097\":2,\"7106\":12,\"7128\":3,\"7132\":1,\"7134\":1,\"7137\":1,\"7139\":3,\"7141\":1,\"7143\":1,\"7146\":1,\"7161\":2,\"7179\":1,\"7227\":2,\"7229\":1,\"7284\":1,\"7307\":2,\"7373\":2,\"7377\":3,\"7382\":1,\"7386\":1,\"7390\":6,\"7468\":1,\"7590\":1,\"7593\":1,\"7616\":1,\"7619\":1,\"7623\":1,\"7626\":1,\"7634\":2,\"7658\":1,\"7670\":1,\"7673\":1,\"7678\":1,\"7680\":1,\"7682\":1,\"7685\":1,\"7688\":1,\"7691\":1,\"7694\":1,\"7697\":1,\"7701\":1,\"7708\":1,\"7712\":1,\"7716\":1,\"7743\":1,\"7749\":2,\"7753\":1,\"7756\":1,\"7760\":2,\"7763\":1,\"7852\":1,\"7862\":1,\"7865\":1,\"7873\":1,\"8037\":1,\"8047\":2,\"8056\":1,\"8089\":1,\"8113\":2,\"8121\":2,\"8148\":1,\"8162\":2,\"8210\":8,\"8270\":1,\"8326\":1,\"8381\":1,\"8383\":1,\"8385\":1,\"8387\":1,\"8389\":2,\"8391\":2,\"8704\":1,\"8768\":1,\"8772\":1,\"8777\":1,\"8784\":1,\"8809\":2,\"8944\":8,\"8951\":2,\"8955\":1,\"8990\":1,\"9027\":6,\"9124\":3,\"9143\":1,\"9145\":1,\"9452\":2,\"9495\":1,\"9633\":1,\"9635\":1,\"9695\":1,\"9726\":1,\"10235\":1,\"10537\":1,\"10671\":1,\"10716\":1,\"10722\":2,\"10724\":1}}],[\"sb\",{\"1\":{\"1595\":4,\"1601\":3,\"1604\":3}}],[\"sb3\",{\"1\":{\"1548\":1,\"1581\":2}}],[\"sb2\",{\"1\":{\"1548\":1,\"1581\":2,\"1584\":2}}],[\"sb1\",{\"1\":{\"1548\":1,\"1559\":3,\"1581\":2,\"1584\":3,\"1589\":3}}],[\"s7\",{\"1\":{\"1472\":2}}],[\"successfully\",{\"1\":{\"10164\":1,\"10498\":1}}],[\"summer\",{\"1\":{\"4843\":1,\"4872\":1}}],[\"sum\",{\"1\":{\"3420\":2,\"3754\":2,\"5486\":3,\"7708\":1,\"7712\":1,\"7716\":1}}],[\"sup2\",{\"1\":{\"7476\":1}}],[\"sup1\",{\"1\":{\"7473\":2}}],[\"support\",{\"1\":{\"8537\":1}}],[\"suppresswarnings\",{\"0\":{\"5041\":1},\"1\":{\"4894\":1,\"4903\":1,\"5042\":1,\"5043\":1,\"5045\":1,\"5047\":1,\"5048\":1}}],[\"supplier的get\",{\"1\":{\"7508\":1}}],[\"supplier中的\",{\"1\":{\"7475\":1}}],[\"supplier<employee>\",{\"1\":{\"7510\":1,\"7512\":1}}],[\"supplier<string>\",{\"1\":{\"7473\":1,\"7476\":1}}],[\"supplier<t>\",{\"1\":{\"2636\":1,\"7432\":1,\"7593\":1}}],[\"supplier\",{\"0\":{\"2634\":1},\"1\":{\"7592\":1}}],[\"super指的是当前对象的父类\",{\"1\":{\"4402\":1}}],[\"super关键字\",{\"1\":{\"4402\":1}}],[\"super与this的区别\",{\"0\":{\"4105\":1}}],[\"super是调用父类的构造器\",{\"1\":{\"4098\":1}}],[\"super和this\",{\"0\":{\"4097\":1}}],[\"super调用构造器\",{\"0\":{\"4089\":1}}],[\"super必加\",{\"1\":{\"4088\":1}}],[\"super必须不能省略\",{\"1\":{\"4080\":1}}],[\"super可用于在子类构造器中调用父类的构造器\",{\"1\":{\"4074\":1}}],[\"super可用于调用父类中定义的成员方法\",{\"1\":{\"4073\":1}}],[\"super可用于访问父类中定义的属性\",{\"1\":{\"4072\":1}}],[\"super的作用\",{\"0\":{\"4070\":1}}],[\"superclass\",{\"1\":{\"2156\":2,\"4001\":1,\"4003\":1,\"7132\":2}}],[\"super\",{\"0\":{\"2363\":1,\"4069\":1,\"4075\":1,\"6090\":1},\"1\":{\"2156\":2,\"2365\":1,\"2492\":2,\"2500\":2,\"2505\":2,\"2512\":1,\"4076\":3,\"4077\":2,\"4080\":1,\"4082\":1,\"4083\":1,\"4090\":1,\"4092\":1,\"4094\":1,\"4096\":2,\"4099\":1,\"4100\":1,\"4534\":3,\"4813\":1,\"4872\":1,\"5219\":1,\"6091\":1,\"6094\":1,\"6325\":1,\"6328\":1,\"6331\":1,\"6334\":1,\"7647\":1,\"7756\":1,\"8042\":2,\"8809\":2}}],[\"superman\",{\"1\":{\"1595\":2,\"7283\":1,\"7284\":4,\"7286\":2,\"7287\":2}}],[\"sunday\",{\"1\":{\"4820\":1}}],[\"sun\",{\"1\":{\"2165\":1,\"2168\":1,\"6334\":1,\"6911\":1,\"7043\":2}}],[\"submit\",{\"1\":{\"5503\":1,\"8988\":1,\"9025\":1}}],[\"subclass\",{\"1\":{\"4001\":1,\"4002\":1}}],[\"sublist\",{\"0\":{\"2567\":1},\"1\":{\"2569\":2}}],[\"subtrahend\",{\"1\":{\"1889\":1}}],[\"subtract\",{\"0\":{\"1887\":1},\"1\":{\"1889\":2}}],[\"substring\",{\"0\":{\"1476\":1},\"1\":{\"1480\":3,\"1576\":1,\"2962\":2}}],[\"subject\",{\"1\":{\"508\":1}}],[\"suffix\",{\"1\":{\"1452\":1}}],[\"s4\",{\"1\":{\"1424\":2,\"1449\":2,\"1529\":2,\"2705\":2,\"3212\":1}}],[\"s3==s4\",{\"1\":{\"3212\":1}}],[\"s3\",{\"1\":{\"1424\":2,\"1442\":2,\"1449\":2,\"1529\":2,\"2705\":2,\"3208\":1,\"3212\":1}}],[\"s2是产生了多态\",{\"1\":{\"4065\":1}}],[\"s2\",{\"1\":{\"1424\":2,\"1427\":3,\"1431\":2,\"1475\":2,\"1506\":2,\"1524\":2,\"1788\":2,\"2549\":2,\"3212\":1,\"4061\":2,\"5426\":9,\"7487\":2,\"7716\":2}}],[\"s1++\",{\"1\":{\"3263\":1}}],[\"s1是sort类型的\",{\"1\":{\"3263\":1}}],[\"s1==s2\",{\"1\":{\"3212\":1}}],[\"s1\",{\"1\":{\"1417\":2,\"1421\":2,\"1424\":2,\"1427\":3,\"1435\":3,\"1438\":3,\"1452\":2,\"1455\":3,\"1458\":2,\"1464\":3,\"1467\":3,\"1475\":2,\"1480\":3,\"1486\":2,\"1491\":2,\"1502\":3,\"1506\":2,\"1512\":2,\"1515\":2,\"1518\":2,\"1521\":2,\"1788\":2,\"2549\":2,\"2563\":2,\"2566\":2,\"2692\":3,\"2697\":3,\"2700\":2,\"2747\":2,\"2756\":2,\"2760\":1,\"3208\":1,\"3212\":1,\"3263\":3,\"3273\":2,\"4061\":2,\"4174\":3,\"4178\":3,\"4181\":1,\"4184\":1,\"4188\":2,\"5426\":9,\"7487\":1,\"7716\":2}}],[\"shtml\",{\"1\":{\"6899\":1}}],[\"shutdownserver执行的条件\",{\"1\":{\"10754\":1}}],[\"shutdownserver\",{\"1\":{\"10167\":1,\"10753\":1}}],[\"shutdownoutput\",{\"1\":{\"6782\":2}}],[\"shutdowninput\",{\"1\":{\"6781\":2}}],[\"shutdown\",{\"1\":{\"5504\":1,\"5517\":1,\"8438\":1}}],[\"shuffle\",{\"0\":{\"2485\":1},\"1\":{\"2487\":3}}],[\"shit\",{\"1\":{\"4306\":1,\"4459\":1,\"4734\":1,\"7324\":1,\"7583\":1}}],[\"showbuiltinroles\",{\"1\":{\"10660\":1}}],[\"showdesc\",{\"1\":{\"7117\":1,\"7161\":4}}],[\"shownation\",{\"1\":{\"6956\":1,\"6962\":4}}],[\"showinfo\",{\"1\":{\"4872\":1}}],[\"showseason\",{\"1\":{\"4872\":3,\"4874\":1}}],[\"show\",{\"1\":{\"3664\":2,\"3794\":1,\"3803\":1,\"4872\":2,\"6956\":1,\"6958\":1,\"6960\":3,\"7117\":1,\"7161\":5,\"10209\":2,\"10228\":2,\"10722\":1}}],[\"shot\",{\"1\":{\"3026\":1}}],[\"short三种类型的变量做运算时\",{\"1\":{\"3158\":1}}],[\"shortvalue\",{\"1\":{\"1850\":1}}],[\"short\",{\"1\":{\"1486\":3,\"1717\":1,\"1799\":2,\"1845\":1,\"1850\":1,\"2345\":1,\"2802\":1,\"3082\":1,\"3263\":1,\"3273\":1,\"3367\":1,\"3695\":1,\"4634\":1,\"6473\":1,\"7909\":1}}],[\"shopping\",{\"0\":{\"1349\":1},\"1\":{\"1327\":1}}],[\"shanghai\",{\"1\":{\"1364\":1}}],[\"shell工具\",{\"1\":{\"10192\":1}}],[\"shell了\",{\"1\":{\"10177\":1}}],[\"shell已经过时了\",{\"1\":{\"10173\":1}}],[\"shell和compass都可以连接mongodb\",{\"1\":{\"10173\":1}}],[\"shell\",{\"0\":{\"196\":1,\"10174\":1},\"1\":{\"10175\":1,\"10177\":1,\"10181\":1,\"10199\":1}}],[\"ssl\",{\"1\":{\"9902\":1}}],[\"sss\",{\"1\":{\"952\":3}}],[\"ss\",{\"1\":{\"952\":4,\"1650\":1,\"1722\":1,\"1723\":1,\"1725\":1,\"1727\":1}}],[\"ssm框架就是对三层架构的封装\",{\"1\":{\"9571\":1}}],[\"ssm\",{\"1\":{\"969\":1,\"995\":1,\"1206\":1}}],[\"ssmp\",{\"1\":{\"734\":2}}],[\"ssmpapplication\",{\"1\":{\"584\":2,\"734\":1,\"781\":3}}],[\"ssm开发案例\",{\"0\":{\"1181\":1},\"1\":{\"76\":1}}],[\"slist方法会返回一个arraylist\",{\"1\":{\"2384\":1}}],[\"slf4j\",{\"0\":{\"886\":1},\"1\":{\"887\":1,\"888\":1,\"954\":1,\"955\":1,\"1376\":1}}],[\"sleep\",{\"0\":{\"5456\":1},\"1\":{\"489\":2,\"5213\":1,\"5221\":1,\"5227\":1,\"5370\":1,\"5426\":2,\"5460\":1,\"5461\":1}}],[\"snapshot\",{\"1\":{\"734\":2,\"8629\":1,\"9895\":1}}],[\"sgugo项目\",{\"1\":{\"8579\":1}}],[\"sgugo项目名的输出目录\",{\"1\":{\"8506\":1}}],[\"sgugo\",{\"1\":{\"655\":1,\"8506\":1}}],[\"s\",{\"1\":{\"624\":1,\"1458\":1,\"1486\":7,\"1494\":1,\"1496\":2,\"1584\":1,\"1657\":2,\"1660\":2,\"1663\":1,\"1859\":1,\"1862\":1,\"2048\":1,\"2518\":3,\"2725\":1,\"2974\":1,\"3939\":2,\"4083\":1,\"4162\":3,\"4164\":4,\"4294\":1,\"4529\":2,\"4803\":3,\"4872\":1,\"5219\":2,\"5620\":2,\"6278\":1,\"6285\":1,\"7324\":1,\"7377\":6,\"7382\":2,\"7386\":2,\"7593\":1,\"10252\":1,\"10603\":1}}],[\"schemalocation=\",{\"1\":{\"9645\":1}}],[\"schemalocation\",{\"1\":{\"9645\":1}}],[\"schema>\",{\"1\":{\"9642\":1}}],[\"schema示例\",{\"0\":{\"9638\":1}}],[\"schema\",{\"0\":{\"9636\":1},\"1\":{\"9627\":1,\"9642\":1}}],[\"sce\",{\"1\":{\"9335\":1,\"9337\":1,\"9449\":1,\"9450\":1,\"9452\":2}}],[\"sc\",{\"1\":{\"9062\":1}}],[\"score\",{\"1\":{\"4720\":2,\"5964\":2,\"10369\":1}}],[\"scope>\",{\"1\":{\"412\":5,\"653\":1,\"978\":1,\"1005\":1,\"1135\":1,\"1142\":1,\"1167\":1,\"1177\":2,\"1361\":3}}],[\"scab\",{\"1\":{\"9362\":1,\"9364\":1,\"9366\":1}}],[\"scalability\",{\"1\":{\"10031\":1}}],[\"scalarhandler\",{\"1\":{\"8378\":1,\"8391\":4}}],[\"scale\",{\"1\":{\"1899\":1}}],[\"scanperiod\",{\"1\":{\"952\":1}}],[\"scanperiod=\",{\"1\":{\"952\":1}}],[\"scan\",{\"1\":{\"952\":1,\"2325\":1,\"2331\":2,\"2335\":1,\"2345\":2,\"2782\":1,\"2788\":2,\"2792\":1,\"2802\":2,\"3414\":2}}],[\"scan=\",{\"1\":{\"952\":1}}],[\"scanner没有提供char类型next方法\",{\"1\":{\"2344\":1,\"2801\":1}}],[\"scanner类的用法很多\",{\"1\":{\"2318\":1,\"2775\":1}}],[\"scanner\",{\"0\":{\"2315\":1,\"2323\":1,\"2780\":1},\"1\":{\"134\":1,\"2320\":1,\"2322\":1,\"2325\":3,\"2328\":1,\"2331\":2,\"2345\":2,\"2777\":1,\"2779\":1,\"2782\":3,\"2785\":1,\"2788\":2,\"2802\":2,\"3414\":3,\"4720\":5}}],[\"stepdown\",{\"1\":{\"10615\":1}}],[\"steamres\",{\"1\":{\"2042\":2}}],[\"steam\",{\"1\":{\"2042\":2,\"2048\":1,\"2062\":1}}],[\"st\",{\"1\":{\"8109\":2}}],[\"stu4\",{\"1\":{\"7749\":2}}],[\"stu3\",{\"1\":{\"7749\":2,\"7763\":2}}],[\"stu\",{\"1\":{\"7743\":2,\"7749\":2,\"7756\":2,\"7760\":1}}],[\"stu2\",{\"1\":{\"7673\":2,\"7749\":2,\"7753\":2,\"7763\":2}}],[\"stu1\",{\"1\":{\"7673\":2,\"7743\":2,\"7756\":2,\"7760\":3}}],[\"stulist\",{\"1\":{\"7658\":2,\"7673\":2}}],[\"stuscore\",{\"1\":{\"5964\":2}}],[\"studenttype里的属性\",{\"1\":{\"9642\":1}}],[\"studenttype\",{\"1\":{\"9642\":2}}],[\"studenttest\",{\"1\":{\"4803\":1}}],[\"student元素\",{\"1\":{\"9642\":1}}],[\"student>\",{\"1\":{\"9635\":1,\"9645\":1}}],[\"student+\",{\"1\":{\"9631\":1}}],[\"studentstype\",{\"1\":{\"9642\":2}}],[\"students>\",{\"1\":{\"9635\":1,\"9645\":1}}],[\"students\",{\"1\":{\"4499\":1,\"7655\":6,\"9631\":1,\"9635\":1,\"9642\":1,\"9645\":1}}],[\"student\",{\"1\":{\"3658\":1,\"4145\":2,\"4148\":1,\"4803\":3,\"7655\":18,\"7658\":2,\"7662\":2,\"7673\":1,\"7743\":2,\"7749\":4,\"7753\":1,\"7756\":3,\"7760\":5,\"7763\":4,\"9631\":2,\"9635\":1,\"9642\":1,\"9645\":2}}],[\"study\",{\"1\":{\"1946\":2,\"6132\":2,\"6136\":2}}],[\"storage\",{\"1\":{\"10030\":1,\"10149\":1,\"10162\":2,\"10496\":2}}],[\"store\",{\"1\":{\"1083\":2}}],[\"stop\",{\"1\":{\"4491\":1,\"4513\":5,\"5215\":1,\"5230\":1,\"5345\":2}}],[\"stdoutimpl\",{\"1\":{\"1229\":1,\"1364\":1}}],[\"stdout\",{\"1\":{\"1229\":1,\"1364\":1}}],[\"stackoverflowerror\",{\"1\":{\"4670\":1}}],[\"stackoverflowerror和oom\",{\"1\":{\"4668\":1}}],[\"stack\",{\"0\":{\"9829\":1},\"1\":{\"4633\":1,\"9831\":2,\"9834\":1,\"9849\":1}}],[\"statestr\",{\"1\":{\"10554\":1,\"10559\":1,\"10576\":1,\"10583\":1}}],[\"state\",{\"1\":{\"10252\":1,\"10264\":2,\"10290\":1,\"10317\":1,\"10554\":1,\"10576\":1,\"10583\":1,\"10603\":1}}],[\"statement和resultset为null情况下避免关闭\",{\"1\":{\"8341\":1}}],[\"statement和resultset\",{\"1\":{\"8340\":1}}],[\"statement的弊端\",{\"0\":{\"7887\":1}}],[\"statement\",{\"0\":{\"7928\":1},\"1\":{\"7883\":1,\"7929\":1,\"7978\":1,\"8109\":1,\"8198\":1,\"8199\":1}}],[\"stat日志用的filter\",{\"1\":{\"8319\":1}}],[\"status\",{\"1\":{\"2307\":1,\"10550\":1,\"10575\":1}}],[\"static<t>\",{\"1\":{\"7583\":1,\"7590\":1,\"7593\":1}}],[\"staticproxytest\",{\"1\":{\"7231\":1}}],[\"static代码块\",{\"1\":{\"4553\":1}}],[\"static的返回当前类对象的方法\",{\"1\":{\"4425\":1,\"5350\":1}}],[\"static的背景\",{\"0\":{\"4363\":1}}],[\"static是静态修饰符\",{\"1\":{\"4362\":1}}],[\"static关键字的使用\",{\"0\":{\"4361\":1}}],[\"static介绍\",{\"0\":{\"4360\":1}}],[\"static方法\",{\"1\":{\"2349\":1}}],[\"static\",{\"0\":{\"3966\":1,\"3991\":1,\"4359\":1},\"1\":{\"425\":1,\"430\":1,\"572\":1,\"577\":1,\"584\":1,\"722\":1,\"731\":1,\"781\":3,\"882\":1,\"1542\":2,\"1673\":1,\"1682\":1,\"1763\":1,\"1817\":1,\"2147\":1,\"2351\":1,\"2365\":1,\"2391\":1,\"2882\":1,\"2974\":1,\"3405\":1,\"3414\":1,\"3457\":1,\"3636\":1,\"3649\":2,\"3664\":1,\"3671\":1,\"3718\":1,\"3738\":1,\"3747\":1,\"3782\":1,\"3816\":1,\"3821\":1,\"3967\":1,\"3992\":1,\"3996\":1,\"4142\":1,\"4164\":1,\"4306\":1,\"4356\":1,\"4358\":1,\"4378\":1,\"4383\":1,\"4394\":3,\"4422\":2,\"4425\":2,\"4459\":2,\"4487\":1,\"4488\":2,\"4491\":2,\"4495\":1,\"4523\":1,\"4525\":1,\"4550\":1,\"4552\":1,\"4553\":2,\"4670\":1,\"4777\":3,\"4803\":1,\"4813\":1,\"4839\":1,\"4843\":5,\"4853\":1,\"5030\":1,\"5060\":2,\"5185\":1,\"5207\":1,\"5211\":1,\"5213\":1,\"5219\":1,\"5221\":1,\"5253\":1,\"5263\":1,\"5310\":1,\"5322\":2,\"5332\":2,\"5345\":1,\"5350\":3,\"5396\":1,\"5426\":1,\"5464\":1,\"5486\":1,\"5517\":1,\"5672\":1,\"6001\":1,\"6047\":1,\"6098\":1,\"6124\":1,\"6325\":1,\"6331\":1,\"6334\":1,\"6443\":2,\"6569\":1,\"6577\":2,\"6612\":1,\"6613\":1,\"6700\":1,\"6703\":1,\"7015\":1,\"7231\":1,\"7266\":1,\"7277\":1,\"7575\":1,\"7578\":1,\"7579\":1,\"7580\":1,\"7655\":2,\"7975\":1,\"7978\":1,\"8324\":3,\"8340\":1,\"8341\":1,\"8342\":1,\"8343\":1,\"8344\":1,\"8345\":1,\"8347\":1,\"8806\":7}}],[\"started\",{\"1\":{\"10164\":1,\"10498\":1}}],[\"starter依赖\",{\"1\":{\"1128\":1}}],[\"starter与parent\",{\"0\":{\"417\":1}}],[\"starter<\",{\"1\":{\"412\":1,\"967\":1,\"978\":2,\"1005\":2,\"1129\":1,\"1145\":1,\"1151\":1,\"1164\":1,\"1177\":3,\"1361\":3}}],[\"starter内部会包含很多依赖包的依赖信息\",{\"1\":{\"410\":1}}],[\"starter\",{\"0\":{\"392\":1,\"407\":1},\"1\":{\"391\":1,\"393\":1,\"400\":1,\"411\":1,\"412\":2,\"420\":1,\"443\":3,\"445\":2,\"446\":2,\"450\":2,\"652\":1,\"653\":1,\"1019\":1,\"1128\":1,\"1131\":1,\"1132\":1,\"1134\":1,\"1135\":1,\"1137\":1,\"1138\":1,\"1154\":1,\"1158\":1,\"1177\":5,\"1361\":2,\"10839\":1}}],[\"startup>\",{\"1\":{\"8837\":1}}],[\"startup\",{\"1\":{\"8434\":1}}],[\"start方法\",{\"0\":{\"5174\":1}}],[\"startwith\",{\"1\":{\"1455\":1}}],[\"startswith\",{\"0\":{\"1453\":1},\"1\":{\"1455\":2,\"6599\":1,\"7682\":1}}],[\"start是可以嵌套的\",{\"1\":{\"413\":1}}],[\"start\",{\"1\":{\"327\":1,\"329\":1,\"360\":1,\"734\":1,\"1587\":1,\"1589\":1,\"1592\":1,\"1595\":1,\"3457\":2,\"4466\":2,\"4513\":5,\"5185\":3,\"5205\":1,\"5219\":1,\"5221\":1,\"5253\":1,\"5263\":3,\"5310\":2,\"5322\":3,\"5345\":3,\"5396\":3,\"5426\":2,\"5464\":2,\"5486\":1,\"6359\":2,\"8113\":1,\"8121\":1}}],[\"structure界面\",{\"1\":{\"8741\":1}}],[\"structure添加web\",{\"0\":{\"8533\":1}}],[\"structure\",{\"1\":{\"7326\":1,\"8534\":1,\"8566\":1,\"8638\":1,\"9505\":1}}],[\"strlist\",{\"1\":{\"5994\":2,\"7634\":1}}],[\"str+\",{\"1\":{\"5060\":1}}],[\"str3\",{\"1\":{\"4292\":1}}],[\"strs\",{\"1\":{\"3803\":3}}],[\"str2\",{\"1\":{\"1719\":2,\"1856\":2,\"4227\":2,\"4229\":2,\"4292\":1,\"4295\":2}}],[\"str1\",{\"1\":{\"1556\":1,\"1719\":2,\"1856\":2,\"4199\":1,\"4227\":2,\"4229\":2,\"4292\":1,\"4295\":2}}],[\"str替换\",{\"0\":{\"1513\":1}}],[\"str\",{\"1\":{\"1435\":1,\"1438\":1,\"1475\":1,\"1484\":1,\"1494\":2,\"1547\":1,\"1556\":1,\"1584\":1,\"1594\":1,\"1595\":1,\"1601\":1,\"1705\":1,\"1727\":2,\"2095\":1,\"2098\":2,\"2382\":3,\"2404\":2,\"2621\":2,\"3241\":4,\"3806\":1,\"4199\":1,\"4256\":2,\"4709\":3,\"4714\":2,\"4716\":1,\"4718\":3,\"4734\":2,\"4864\":1,\"5060\":1,\"6260\":2,\"6549\":1,\"6557\":2,\"6843\":2,\"7046\":1,\"7462\":2,\"7634\":1}}],[\"strops\",{\"1\":{\"1029\":1}}],[\"strredis\",{\"1\":{\"1029\":1}}],[\"string新增方法\",{\"0\":{\"7773\":1}}],[\"string内部已经重新了排序了\",{\"1\":{\"5910\":1}}],[\"string内部底层定义了final\",{\"1\":{\"3219\":1}}],[\"stringindexoutofboundsexception\",{\"0\":{\"4713\":1}}],[\"string是java的一个内置类\",{\"1\":{\"3656\":1}}],[\"string是一个final类\",{\"1\":{\"3215\":1}}],[\"string数据类型就是引用类型\",{\"1\":{\"3656\":1}}],[\"string数据类型本质就是java内部定义的string类\",{\"1\":{\"3624\":1}}],[\"string可以和8种基本数据类型变量做运算\",{\"1\":{\"3239\":1}}],[\"string可以作为参数\",{\"1\":{\"1695\":1}}],[\"string对象中有一个属性values\",{\"1\":{\"3232\":1}}],[\"string对象是储存在堆中的\",{\"1\":{\"3231\":1}}],[\"string对象的储存\",{\"0\":{\"3229\":1}}],[\"string对象的内存分析\",{\"0\":{\"3228\":1}}],[\"string对象的创建\",{\"0\":{\"3204\":1}}],[\"string实现了两个接口\",{\"1\":{\"3216\":1}}],[\"string创建\",{\"1\":{\"3207\":1}}],[\"string的操作\",{\"0\":{\"3246\":1}}],[\"string的运算\",{\"0\":{\"3238\":1}}],[\"string的compareto内置实现源码\",{\"1\":{\"1763\":1}}],[\"string的方法\",{\"1\":{\"1573\":1}}],[\"string的底层是将字符保存在char\",{\"1\":{\"1555\":1}}],[\"string源码分析\",{\"0\":{\"1554\":1}}],[\"stringbuilder的效率\",{\"0\":{\"1562\":1}}],[\"stringbuilder对比\",{\"0\":{\"1549\":1}}],[\"stringbuilder结构\",{\"1\":{\"1542\":1}}],[\"stringbuilder是线程不安全的\",{\"1\":{\"1540\":1}}],[\"stringbuilder和stringbuffer是一样的\",{\"1\":{\"1539\":1}}],[\"stringbuilder\",{\"0\":{\"1538\":1},\"1\":{\"1532\":1,\"1542\":1,\"1552\":1,\"1565\":1,\"1569\":1}}],[\"stringbuffer不能使用\",{\"1\":{\"1583\":1}}],[\"stringbuffer方法的特性\",{\"0\":{\"1570\":1}}],[\"stringbuffer默认长度是16\",{\"1\":{\"1561\":1}}],[\"stringbuffer扩容\",{\"0\":{\"1560\":1}}],[\"stringbuffer底层也是保存到char数组中的\",{\"1\":{\"1558\":1}}],[\"stringbuffer分析\",{\"0\":{\"1557\":1}}],[\"stringbuffer结构\",{\"1\":{\"1542\":1}}],[\"stringbuffer是线程安全的\",{\"1\":{\"1540\":1}}],[\"stringbuffer很多方法与string是相同的\",{\"1\":{\"1537\":1}}],[\"stringbuffer也是个字符串类\",{\"1\":{\"1536\":1}}],[\"stringbuffer\",{\"0\":{\"1530\":1,\"1535\":1,\"1549\":1,\"1562\":1},\"1\":{\"126\":1,\"1532\":1,\"1542\":1,\"1544\":1,\"1545\":1,\"1546\":1,\"1547\":1,\"1548\":6,\"1551\":1,\"1559\":1,\"1564\":1,\"1568\":1,\"1581\":6,\"1584\":5,\"1589\":3,\"1595\":3,\"1601\":3,\"1604\":3,\"5426\":4,\"8944\":1}}],[\"string有一个构造器是可以接受byte\",{\"1\":{\"1504\":1}}],[\"string转基本数据类型\",{\"1\":{\"1484\":1}}],[\"string转基本数据类型和基本数据类型转string\",{\"1\":{\"1482\":1}}],[\"string类\",{\"1\":{\"3975\":1}}],[\"string类的方法\",{\"1\":{\"3247\":1}}],[\"string类的特性\",{\"0\":{\"3213\":1}}],[\"string类代表\",{\"1\":{\"3214\":1}}],[\"string类型添加失败\",{\"1\":{\"5967\":1}}],[\"string类型的数组\",{\"1\":{\"5045\":1}}],[\"string类型的参数转为包装类对象\",{\"1\":{\"1858\":1}}],[\"string类型转基本数据类型\",{\"0\":{\"4293\":1}}],[\"string类型\",{\"1\":{\"3367\":1,\"7492\":1}}],[\"string类型是引用类型\",{\"1\":{\"3203\":1}}],[\"string类里也有很多涉及正则的方法\",{\"1\":{\"1508\":1,\"2687\":1}}],[\"string类有不可变性\",{\"1\":{\"1460\":1}}],[\"string类对equals进行重写\",{\"1\":{\"1423\":1}}],[\"stringstream\",{\"1\":{\"7634\":2}}],[\"strings\",{\"1\":{\"1265\":3,\"2962\":1}}],[\"string>>\",{\"1\":{\"2624\":1}}],[\"string>对象操作redis\",{\"1\":{\"1038\":1}}],[\"string>\",{\"1\":{\"1038\":1,\"2592\":2,\"5033\":1,\"5856\":1,\"6022\":1,\"6025\":1,\"7495\":1,\"7498\":1}}],[\"stringredistemplatetest\",{\"1\":{\"1038\":1}}],[\"stringredistemplate\",{\"0\":{\"1036\":1},\"1\":{\"1038\":3}}],[\"string2\",{\"1\":{\"486\":1}}],[\"string\",{\"0\":{\"1413\":1,\"1549\":1,\"2686\":1,\"3202\":1,\"4260\":1,\"5044\":1,\"6127\":1,\"6133\":2,\"6137\":1,\"6998\":1,\"8094\":1,\"9233\":1},\"1\":{\"125\":1,\"372\":1,\"425\":1,\"430\":1,\"486\":1,\"503\":4,\"519\":4,\"584\":1,\"590\":4,\"611\":1,\"621\":1,\"781\":5,\"882\":1,\"888\":1,\"955\":1,\"985\":3,\"1038\":1,\"1211\":3,\"1252\":1,\"1256\":1,\"1296\":3,\"1415\":1,\"1417\":3,\"1421\":1,\"1424\":6,\"1427\":3,\"1431\":1,\"1435\":2,\"1438\":2,\"1442\":1,\"1449\":3,\"1452\":2,\"1455\":2,\"1458\":1,\"1464\":3,\"1467\":3,\"1472\":2,\"1475\":4,\"1480\":4,\"1486\":15,\"1491\":5,\"1494\":1,\"1496\":2,\"1499\":1,\"1502\":2,\"1506\":4,\"1512\":2,\"1515\":2,\"1518\":4,\"1521\":4,\"1524\":2,\"1529\":6,\"1547\":1,\"1550\":1,\"1556\":4,\"1559\":1,\"1566\":1,\"1584\":1,\"1595\":1,\"1601\":1,\"1692\":1,\"1705\":1,\"1707\":1,\"1719\":2,\"1725\":1,\"1727\":1,\"1757\":1,\"1763\":1,\"1769\":3,\"1788\":8,\"1856\":6,\"1859\":1,\"1862\":1,\"1943\":1,\"1946\":4,\"1950\":2,\"1953\":2,\"1956\":2,\"1959\":2,\"1971\":2,\"2087\":2,\"2090\":2,\"2098\":2,\"2121\":1,\"2147\":1,\"2153\":2,\"2175\":1,\"2181\":2,\"2191\":1,\"2194\":1,\"2204\":2,\"2211\":3,\"2231\":2,\"2256\":1,\"2269\":2,\"2272\":3,\"2282\":1,\"2314\":9,\"2331\":5,\"2354\":1,\"2382\":1,\"2404\":1,\"2446\":2,\"2549\":2,\"2563\":1,\"2566\":1,\"2595\":2,\"2601\":2,\"2621\":1,\"2683\":1,\"2692\":6,\"2697\":6,\"2700\":3,\"2705\":6,\"2712\":1,\"2717\":3,\"2746\":1,\"2747\":2,\"2750\":2,\"2756\":3,\"2760\":4,\"2788\":5,\"2882\":1,\"2947\":1,\"2949\":1,\"2954\":3,\"2962\":3,\"2974\":4,\"3208\":3,\"3212\":6,\"3241\":1,\"3245\":1,\"3322\":1,\"3405\":1,\"3414\":1,\"3457\":1,\"3496\":4,\"3567\":2,\"3591\":2,\"3630\":2,\"3636\":1,\"3664\":1,\"3668\":1,\"3738\":2,\"3747\":2,\"3767\":2,\"3782\":1,\"3794\":1,\"3803\":1,\"3816\":2,\"3821\":2,\"3857\":2,\"3870\":4,\"3901\":2,\"3985\":1,\"3987\":1,\"4083\":1,\"4092\":3,\"4142\":1,\"4164\":1,\"4199\":3,\"4227\":4,\"4229\":4,\"4253\":1,\"4256\":2,\"4259\":1,\"4292\":5,\"4294\":1,\"4295\":2,\"4329\":1,\"4356\":1,\"4358\":1,\"4378\":1,\"4394\":2,\"4459\":1,\"4553\":2,\"4661\":2,\"4670\":1,\"4709\":1,\"4714\":1,\"4716\":2,\"4718\":1,\"4734\":1,\"4777\":1,\"4803\":1,\"4813\":1,\"4843\":7,\"4864\":1,\"4872\":3,\"4918\":1,\"4931\":1,\"4933\":1,\"4957\":1,\"5043\":1,\"5060\":6,\"5168\":1,\"5170\":1,\"5185\":1,\"5219\":2,\"5221\":1,\"5253\":1,\"5263\":1,\"5310\":1,\"5322\":1,\"5345\":1,\"5396\":1,\"5426\":1,\"5464\":1,\"5486\":1,\"5517\":1,\"5526\":1,\"5618\":2,\"5620\":3,\"5841\":3,\"5923\":1,\"5924\":2,\"5927\":2,\"5970\":1,\"5999\":2,\"6001\":1,\"6042\":1,\"6124\":1,\"6260\":2,\"6306\":2,\"6348\":1,\"6359\":2,\"6388\":1,\"6394\":2,\"6404\":1,\"6449\":2,\"6476\":1,\"6487\":1,\"6505\":3,\"6549\":2,\"6555\":1,\"6557\":2,\"6598\":1,\"6599\":1,\"6600\":1,\"6612\":2,\"6703\":1,\"6706\":2,\"6708\":2,\"6772\":1,\"6801\":1,\"6819\":2,\"6843\":2,\"6883\":8,\"6887\":1,\"6888\":1,\"6889\":1,\"6890\":1,\"6891\":1,\"6892\":1,\"6903\":1,\"6917\":1,\"6949\":2,\"6952\":1,\"6956\":8,\"6960\":1,\"6962\":2,\"7043\":1,\"7046\":1,\"7049\":2,\"7065\":2,\"7081\":1,\"7086\":1,\"7092\":1,\"7114\":1,\"7120\":2,\"7146\":1,\"7149\":1,\"7152\":1,\"7161\":2,\"7166\":1,\"7169\":1,\"7179\":1,\"7231\":1,\"7284\":1,\"7377\":2,\"7475\":1,\"7490\":1,\"7525\":1,\"7527\":1,\"7535\":2,\"7537\":2,\"7613\":1,\"7629\":1,\"7634\":1,\"7655\":2,\"7852\":1,\"7862\":3,\"7865\":3,\"7873\":4,\"7889\":3,\"7915\":1,\"7927\":1,\"7945\":1,\"7946\":1,\"7947\":2,\"7952\":1,\"7970\":5,\"7975\":4,\"7980\":1,\"7989\":1,\"7991\":2,\"8037\":3,\"8042\":4,\"8045\":2,\"8047\":1,\"8054\":2,\"8056\":1,\"8084\":1,\"8089\":3,\"8109\":1,\"8113\":1,\"8121\":1,\"8126\":1,\"8146\":1,\"8148\":2,\"8162\":1,\"8201\":6,\"8207\":7,\"8347\":1,\"8355\":1,\"8358\":1,\"8361\":1,\"8362\":1,\"8365\":1,\"8381\":1,\"8383\":1,\"8385\":1,\"8387\":1,\"8389\":3,\"8391\":2,\"8764\":1,\"8781\":2,\"8806\":7,\"8817\":1,\"8837\":3,\"8944\":7,\"8949\":2,\"8951\":2,\"8990\":1,\"9004\":2,\"9021\":5,\"9027\":8,\"9065\":2,\"9112\":1,\"9119\":3,\"9174\":1,\"9234\":2,\"9246\":1,\"9247\":1,\"9248\":1,\"9255\":1,\"9262\":3,\"9495\":1,\"9642\":5,\"9681\":2,\"9690\":4,\"9695\":2,\"9699\":2,\"9726\":1,\"9730\":1,\"9732\":1,\"9753\":1,\"9755\":1,\"9757\":1,\"9760\":1,\"9821\":1,\"10083\":1}}],[\"stream中的每个元素都会作为参数传递给方法中\",{\"1\":{\"7632\":1}}],[\"stream操作的方法\",{\"1\":{\"7596\":1}}],[\"stream2\",{\"1\":{\"7583\":1}}],[\"stream1\",{\"1\":{\"7583\":1}}],[\"stream有多个重载\",{\"1\":{\"7577\":1}}],[\"stream<r>\",{\"1\":{\"7647\":1}}],[\"stream<employee>\",{\"1\":{\"7616\":1,\"7619\":1,\"7623\":1,\"7626\":1}}],[\"stream<e>\",{\"1\":{\"7568\":1,\"7572\":1}}],[\"stream<integer>\",{\"1\":{\"7583\":1}}],[\"stream<\",{\"1\":{\"7583\":1,\"7647\":1}}],[\"stream<t>\",{\"1\":{\"7575\":1,\"7583\":1,\"7590\":1,\"7593\":1}}],[\"stream<string>\",{\"1\":{\"7568\":1,\"7572\":1,\"7634\":1}}],[\"stream的操作分为中间操作和终止操作\",{\"1\":{\"7595\":1}}],[\"stream的操作步骤\",{\"0\":{\"7554\":1}}],[\"stream的特点\",{\"0\":{\"7559\":1}}],[\"stream的实例化\",{\"1\":{\"7556\":1}}],[\"stream的本质\",{\"0\":{\"7549\":1}}],[\"streamtest\",{\"1\":{\"6353\":1}}],[\"streaming集成\",{\"1\":{\"237\":1}}],[\"stream\",{\"0\":{\"7538\":1,\"7539\":1,\"7542\":1,\"7546\":1,\"7551\":1,\"7563\":1,\"7594\":1},\"1\":{\"23\":1,\"2062\":1,\"2870\":1,\"2962\":1,\"6151\":2,\"6175\":1,\"6764\":1,\"7540\":2,\"7543\":2,\"7544\":1,\"7545\":2,\"7552\":1,\"7553\":1,\"7568\":3,\"7574\":1,\"7575\":2,\"7578\":1,\"7579\":1,\"7580\":1,\"7583\":2,\"7585\":2,\"7590\":1,\"7593\":1,\"7616\":3,\"7619\":3,\"7623\":3,\"7626\":3,\"7634\":2,\"7658\":1,\"7662\":2,\"7670\":1,\"7673\":1,\"7678\":1,\"7680\":1,\"7682\":1,\"7685\":1,\"7688\":1,\"7691\":1,\"7694\":1,\"7697\":1,\"7700\":1,\"7708\":1,\"7712\":1,\"7716\":1,\"7723\":2}}],[\"spacex和星舰进行查询\",{\"1\":{\"9938\":1}}],[\"spacex\",{\"1\":{\"9936\":1,\"9945\":1,\"9979\":1,\"9989\":1,\"10004\":1}}],[\"spark\",{\"1\":{\"237\":1}}],[\"speed\",{\"1\":{\"4491\":2}}],[\"spendtime\",{\"1\":{\"4466\":1}}],[\"specified\",{\"1\":{\"10526\":1}}],[\"spec\",{\"1\":{\"734\":2,\"6877\":1,\"6883\":2}}],[\"split​\",{\"1\":{\"2760\":1}}],[\"split\",{\"0\":{\"1525\":1,\"2701\":1,\"2757\":1},\"1\":{\"1529\":3,\"2705\":3,\"2760\":1}}],[\"sprint\",{\"0\":{\"1165\":1}}],[\"spring的一个子项目\",{\"1\":{\"10834\":1}}],[\"spring2\",{\"1\":{\"4887\":1}}],[\"springfox<\",{\"1\":{\"1164\":1,\"1177\":1}}],[\"springframework<\",{\"1\":{\"412\":2}}],[\"springframework\",{\"1\":{\"347\":1,\"391\":1,\"394\":1,\"397\":1,\"412\":3,\"446\":2,\"450\":1,\"550\":1,\"614\":1,\"653\":1,\"703\":1,\"725\":1,\"734\":1,\"1019\":1,\"1129\":1,\"1132\":1,\"1135\":1,\"1138\":1,\"1154\":1,\"1158\":1,\"1167\":1,\"1177\":7,\"1361\":3,\"10839\":1}}],[\"spring提供的默认持久化技术是jdbctempalte\",{\"1\":{\"972\":1}}],[\"springprofile>\",{\"1\":{\"952\":2}}],[\"spring知识回顾\",{\"1\":{\"595\":1}}],[\"springapplication\",{\"1\":{\"425\":1,\"427\":1,\"430\":1,\"584\":1,\"781\":3}}],[\"spring系列框架的配置和依赖太复杂了\",{\"1\":{\"288\":1}}],[\"springdata集成\",{\"1\":{\"236\":1}}],[\"springboot集成\",{\"0\":{\"10831\":1}}],[\"springboot测试类\",{\"1\":{\"1224\":1}}],[\"springboot内置的组件\",{\"1\":{\"1126\":1}}],[\"springboot整合redis技术提供了多种客户端兼容模式\",{\"1\":{\"1040\":1}}],[\"springboot整合redis时提供了专用的api接口stringredistemplate\",{\"1\":{\"1035\":1}}],[\"springboot整合任何技术其实就是在springboot中使用对应技术的api\",{\"1\":{\"961\":1}}],[\"springboot官网没有收录mybatisplus\",{\"1\":{\"1002\":1}}],[\"springboot都完成了\",{\"1\":{\"983\":1}}],[\"springboot使用\",{\"1\":{\"864\":1}}],[\"springboot从2\",{\"1\":{\"857\":1}}],[\"springboot提供了四个级别的配置文件\",{\"1\":{\"788\":1}}],[\"springboot提供了临时属性的方式快速修改某些配置\",{\"1\":{\"769\":1}}],[\"springboot就可以单独运行了\",{\"1\":{\"724\":1}}],[\"springboot程序添加配置后会打出一个特殊的包\",{\"1\":{\"736\":1}}],[\"springboot程序是基于maven创建的\",{\"1\":{\"692\":1}}],[\"springboot程序包含的基础文件\",{\"1\":{\"338\":1}}],[\"springboot不用指定配置类\",{\"1\":{\"670\":1}}],[\"springboottest注解的类\",{\"1\":{\"670\":1}}],[\"springboottest注解添加一个classes属性\",{\"1\":{\"668\":1}}],[\"springboottest注解定义在类的上方\",{\"1\":{\"657\":1}}],[\"springboottest修饰\",{\"1\":{\"660\":1}}],[\"springboottest\",{\"1\":{\"656\":1,\"663\":1,\"669\":1,\"991\":1,\"1016\":1,\"1224\":1}}],[\"springboot已经默认创建了一个测试类\",{\"1\":{\"655\":1}}],[\"springboot已经将所有的项目依赖的最佳版本组合给提前设置好了\",{\"1\":{\"399\":1}}],[\"springboot13configurationapplication\",{\"1\":{\"609\":1}}],[\"springboot可以将配置文件中所有的配置项信息封装到environment对象中\",{\"1\":{\"505\":1}}],[\"springboot会自动执行引导类的main方法\",{\"1\":{\"779\":1}}],[\"springboot会自动导入配置文件的\",{\"1\":{\"494\":1}}],[\"springboot会整合很多技术\",{\"1\":{\"19\":1}}],[\"springboot为所有的重要的配置项基本都设置了默认值\",{\"1\":{\"457\":1}}],[\"springboot默认配置文件\",{\"1\":{\"455\":1}}],[\"springboot默认集成了unit\",{\"1\":{\"339\":1}}],[\"springboot将tomcat功能抽取出来封装到了一个对象\",{\"1\":{\"441\":1}}],[\"springboot中读取maven设置值\",{\"0\":{\"863\":1}}],[\"springboot中内嵌了一个tomcat服务器\",{\"1\":{\"441\":1}}],[\"springboot中常见的依赖类型\",{\"1\":{\"409\":1}}],[\"springbootapplication配置生效的\",{\"1\":{\"432\":1}}],[\"springbootapplication\",{\"0\":{\"431\":1},\"1\":{\"425\":1,\"430\":1,\"584\":1,\"598\":2,\"609\":1}}],[\"springboot依赖的版本就已经确认了\",{\"1\":{\"401\":1}}],[\"springboot依赖管理总结\",{\"0\":{\"398\":1}}],[\"springboot做了什么\",{\"0\":{\"379\":1}}],[\"springboot的maven打包插件\",{\"0\":{\"704\":1}}],[\"springboot的tomcat服务器是内置的\",{\"1\":{\"535\":1}}],[\"springboot的引导类是boot工程的执行入口\",{\"1\":{\"424\":1}}],[\"springboot的parent并非包含了所有依赖的坐标\",{\"1\":{\"404\":1}}],[\"springboot的启动类在项目中的位置是固定的\",{\"1\":{\"349\":1}}],[\"springboot的特点\",{\"0\":{\"289\":1}}],[\"springboot项目依然能启动\",{\"1\":{\"780\":1}}],[\"springboot项目热部署实现原理\",{\"0\":{\"534\":1}}],[\"springboot项目的配置文件都是放在\",{\"1\":{\"453\":1}}],[\"springboot项目是需要联网创建的\",{\"1\":{\"327\":1}}],[\"springboot项目构建是需要联网的\",{\"1\":{\"307\":1}}],[\"springboot对它们进行了非常大的简化\",{\"1\":{\"288\":1}}],[\"springboot是由pivotal团队提供的全新框架\",{\"1\":{\"288\":1}}],[\"springboot是java开发必备的\",{\"1\":{\"286\":1}}],[\"springboot\",{\"0\":{\"65\":1,\"387\":1,\"1125\":1,\"1127\":1},\"1\":{\"18\":1,\"450\":1,\"516\":1,\"734\":2,\"882\":2,\"888\":2,\"955\":2,\"1123\":1,\"1177\":1}}],[\"springmvc\",{\"0\":{\"1130\":1},\"1\":{\"15\":1,\"1177\":1,\"9572\":1,\"9583\":1}}],[\"spring\",{\"0\":{\"303\":1,\"395\":1,\"10833\":1,\"10836\":1},\"1\":{\"14\":1,\"304\":1,\"320\":1,\"327\":1,\"360\":1,\"393\":1,\"443\":3,\"577\":1,\"581\":1,\"584\":1,\"652\":1,\"705\":1,\"734\":5,\"809\":1,\"811\":1,\"828\":1,\"830\":4,\"843\":1,\"858\":1,\"865\":1,\"943\":1,\"949\":1,\"967\":1,\"969\":1,\"978\":3,\"981\":1,\"1005\":1,\"1008\":1,\"1021\":1,\"1048\":1,\"1051\":1,\"1128\":2,\"1131\":1,\"1134\":1,\"1137\":1,\"1145\":1,\"1177\":4,\"1200\":1,\"1206\":1,\"1248\":1,\"1361\":1,\"1364\":1,\"1391\":1,\"4822\":1,\"4843\":1,\"4845\":5,\"4872\":1,\"4874\":7,\"9573\":1,\"9584\":1,\"10835\":2,\"10837\":1,\"10843\":1,\"10846\":1}}],[\"spring全家桶\",{\"1\":{\"13\":1}}],[\"self\",{\"1\":{\"10554\":1}}],[\"selectbyname\",{\"1\":{\"9560\":1}}],[\"selectbyid\",{\"1\":{\"1016\":1,\"1224\":1}}],[\"select天然就可以批量操作\",{\"1\":{\"8091\":1}}],[\"selectpage\",{\"1\":{\"1239\":1,\"1241\":1,\"1265\":2}}],[\"selectlist\",{\"1\":{\"1016\":1,\"1224\":1,\"1248\":1,\"1252\":1,\"1256\":1}}],[\"select\",{\"1\":{\"988\":2,\"7889\":1,\"7893\":1,\"8037\":1,\"8047\":2,\"8056\":1,\"8089\":1,\"8162\":1,\"8207\":4,\"8385\":1,\"8387\":1,\"8389\":1,\"8391\":2,\"8843\":2}}],[\"sequence>\",{\"1\":{\"9642\":4}}],[\"sequence\",{\"1\":{\"9642\":2}}],[\"sequences与正则表达式进行匹配\",{\"1\":{\"2681\":1}}],[\"session是用来保存用户登录后的数据\",{\"1\":{\"9805\":1}}],[\"session占用服务器资源\",{\"1\":{\"9797\":1}}],[\"session默认30分钟\",{\"1\":{\"9796\":1}}],[\"session默认失效时间\",{\"1\":{\"9783\":1}}],[\"session无大小限制\",{\"1\":{\"9795\":1}}],[\"session安全\",{\"1\":{\"9794\":1}}],[\"session可以存储任意类型\",{\"1\":{\"9790\":1}}],[\"session用于存储一次会话的多次请求的数据\",{\"1\":{\"9789\":1}}],[\"session对象调用invalidate\",{\"1\":{\"9787\":1}}],[\"session活化\",{\"1\":{\"9778\":1}}],[\"session的特点\",{\"0\":{\"9788\":1}}],[\"session的销毁\",{\"0\":{\"9780\":1}}],[\"session的钝化\",{\"1\":{\"9777\":1}}],[\"session的钝化和活化\",{\"0\":{\"9775\":1}}],[\"session的有效期\",{\"0\":{\"9769\":1}}],[\"session的存在是依赖与cookie的\",{\"1\":{\"9762\":1}}],[\"session的原理\",{\"0\":{\"9761\":1}}],[\"session的工作流程\",{\"0\":{\"9744\":1}}],[\"sessionid是session的唯一标识id\",{\"1\":{\"9759\":1}}],[\"sessiondidactivate\",{\"1\":{\"9438\":1}}],[\"sessiondestroyed\",{\"1\":{\"9346\":1}}],[\"sessionwillpassivate\",{\"1\":{\"9436\":1}}],[\"sessioncreated\",{\"1\":{\"9344\":1}}],[\"session域中数据的监听器\",{\"1\":{\"9328\":1}}],[\"session域对象\",{\"0\":{\"9193\":1}}],[\"session也会消失\",{\"1\":{\"9203\":1}}],[\"session\",{\"0\":{\"9740\":1},\"1\":{\"9196\":1,\"9670\":1,\"9750\":1,\"9774\":1,\"9785\":2,\"9793\":1}}],[\"sendredirect\",{\"1\":{\"9139\":1,\"9174\":1}}],[\"send\",{\"1\":{\"6840\":1,\"6849\":1}}],[\"sentinel\",{\"1\":{\"22\":1}}],[\"search\",{\"0\":{\"9833\":1},\"1\":{\"9895\":1}}],[\"seasons\",{\"1\":{\"4872\":2,\"4874\":2}}],[\"seasondesc\",{\"1\":{\"4843\":6}}],[\"seasonname+\",{\"1\":{\"4872\":1}}],[\"seasonname\",{\"1\":{\"4843\":6,\"4872\":4}}],[\"season\",{\"1\":{\"4843\":10,\"4845\":2}}],[\"seata\",{\"1\":{\"22\":1}}],[\"separator\",{\"1\":{\"6124\":1,\"6334\":1}}],[\"sep\",{\"1\":{\"4256\":1}}],[\"sextype\",{\"1\":{\"9642\":3}}],[\"sex>\",{\"1\":{\"9635\":1,\"9645\":1}}],[\"sex\",{\"1\":{\"3985\":2,\"9631\":2,\"9642\":1}}],[\"seesion就自动删除了\",{\"1\":{\"9783\":1}}],[\"seed\",{\"1\":{\"7588\":1,\"7590\":1}}],[\"seekablebytechannel\",{\"1\":{\"6630\":1}}],[\"seek\",{\"1\":{\"6501\":1,\"6526\":1}}],[\"seek方法\",{\"0\":{\"6499\":1}}],[\"see\",{\"1\":{\"2960\":1,\"2962\":1,\"2973\":1,\"10864\":1}}],[\"se标准类库\",{\"1\":{\"2850\":1}}],[\"sec\",{\"1\":{\"8960\":1,\"8961\":1,\"8962\":1,\"8966\":1,\"8967\":1,\"8968\":1,\"8969\":1}}],[\"security\",{\"1\":{\"6334\":2,\"9902\":4,\"10740\":1,\"10777\":1}}],[\"securityexception\",{\"1\":{\"2175\":1,\"2178\":1,\"2181\":1,\"2185\":1,\"2188\":1,\"2191\":1,\"2194\":1,\"2197\":1,\"2200\":1,\"2204\":1,\"2211\":1,\"2247\":1}}],[\"secondaries\",{\"1\":{\"10453\":1}}],[\"secondary表示副节点\",{\"1\":{\"10576\":1}}],[\"secondarydelaysecs\",{\"1\":{\"10541\":1}}],[\"secondary\",{\"1\":{\"10448\":1,\"10480\":1,\"10526\":1,\"10576\":1}}],[\"second\",{\"1\":{\"1651\":3,\"1654\":2}}],[\"seconds\",{\"1\":{\"952\":1,\"9717\":1}}],[\"serlvlet\",{\"1\":{\"9548\":1}}],[\"serialized\",{\"1\":{\"10081\":1}}],[\"serializable>\",{\"1\":{\"7583\":1}}],[\"serializable接口\",{\"1\":{\"3217\":1}}],[\"serializable\",{\"1\":{\"1542\":2,\"1639\":1,\"1642\":1,\"1645\":1,\"1670\":1,\"1943\":1,\"2129\":1,\"2162\":1,\"2712\":1,\"6559\":1,\"6569\":1,\"6875\":1,\"8159\":1}}],[\"serial\",{\"1\":{\"5054\":1}}],[\"serialversionuid\",{\"0\":{\"6574\":1},\"1\":{\"1542\":2,\"4813\":1,\"5054\":1,\"6562\":1,\"6569\":1,\"6575\":1,\"6577\":2}}],[\"service方法中的参数是servletrequest和servletresponse\",{\"1\":{\"8901\":1}}],[\"service方法中有servletrequest和servletresponse两个参数\",{\"1\":{\"8725\":1}}],[\"service方法被调用执行\",{\"1\":{\"8881\":1}}],[\"service方法的参数\",{\"1\":{\"8872\":1}}],[\"serviceimpl层\",{\"1\":{\"1268\":1}}],[\"serviceimpl<bookdao\",{\"1\":{\"1265\":1,\"1268\":1}}],[\"service层\",{\"1\":{\"1268\":1}}],[\"service层也有很多通用的curd方法\",{\"1\":{\"1267\":1}}],[\"service作为业务层接口\",{\"1\":{\"1260\":1}}],[\"service修正功能\",{\"1\":{\"1196\":1}}],[\"service开发\",{\"1\":{\"1190\":1}}],[\"service\",{\"0\":{\"1257\":1,\"8769\":1,\"10873\":1},\"1\":{\"1119\":1,\"1261\":1,\"1265\":1,\"1268\":1,\"4604\":1,\"5517\":6,\"8704\":1,\"8763\":1,\"8764\":1,\"8772\":2,\"8817\":1,\"9568\":1,\"9584\":1}}],[\"serverless\",{\"0\":{\"10045\":1}}],[\"server>\",{\"1\":{\"9608\":1}}],[\"server模板\",{\"0\":{\"8575\":1}}],[\"servertimezone=asia\",{\"1\":{\"1364\":1}}],[\"servertimezone=utc\",{\"1\":{\"969\":1,\"981\":1,\"995\":1,\"1008\":1,\"1206\":1}}],[\"servertimeout\",{\"1\":{\"631\":1}}],[\"serversocket\",{\"1\":{\"6806\":1,\"6812\":1,\"6814\":1,\"6819\":6,\"6918\":1}}],[\"serversocketchannel\",{\"1\":{\"6586\":1}}],[\"servers\",{\"1\":{\"611\":1,\"620\":1,\"621\":1,\"628\":1,\"631\":1,\"635\":1,\"645\":1,\"647\":1}}],[\"serverconfig\",{\"1\":{\"609\":1,\"611\":1,\"621\":1,\"631\":1,\"635\":1,\"645\":1,\"647\":1}}],[\"server\",{\"0\":{\"8590\":1},\"1\":{\"307\":1,\"465\":2,\"508\":1,\"770\":1,\"781\":1,\"830\":3,\"930\":1,\"936\":1,\"938\":1,\"1364\":1,\"6819\":1,\"6822\":1,\"8441\":1,\"8474\":1,\"8579\":1,\"8591\":1,\"8670\":1,\"10164\":1,\"10498\":1}}],[\"servlet会创建一个响应头来返回创建的sessionid\",{\"1\":{\"9766\":1}}],[\"servlet用来删除还未到期的cook信息\",{\"1\":{\"9722\":1}}],[\"servlet2\",{\"0\":{\"9694\":1}}],[\"servlet1创建并发送cookie\",{\"0\":{\"9698\":1}}],[\"servlet1\",{\"0\":{\"9692\":1}}],[\"servlet规范中定义的一种特殊类\",{\"1\":{\"9323\":1}}],[\"servlet监听器\",{\"0\":{\"9322\":1}}],[\"servletcontext对象被销毁了\",{\"1\":{\"9452\":1}}],[\"servletcontext对象被销毁之前会调用该方法\",{\"1\":{\"9449\":1}}],[\"servletcontext对象被创建了\",{\"1\":{\"9452\":1}}],[\"servletcontext对象创建后会调用该方法\",{\"1\":{\"9450\":1}}],[\"servletcontext对象代表了整个web应用\",{\"1\":{\"9212\":1}}],[\"servletcontextattributeevent对象代表属性变化事件\",{\"1\":{\"9368\":1}}],[\"servletcontextattributeevent\",{\"1\":{\"9362\":1,\"9364\":1,\"9366\":1}}],[\"servletcontextattributelistener\",{\"0\":{\"9358\":1}}],[\"servletcontext销毁时调用\",{\"1\":{\"9338\":1}}],[\"servletcontext创建时调用\",{\"1\":{\"9336\":1}}],[\"servletcontextevent对象代表从servletcontext对象身上捕获到的事件\",{\"1\":{\"9339\":1}}],[\"servletcontextevent\",{\"1\":{\"9335\":1,\"9337\":1,\"9449\":1,\"9450\":1,\"9452\":2}}],[\"servletcontextlistener接口的方法\",{\"0\":{\"9447\":1}}],[\"servletcontextlistener\",{\"0\":{\"9331\":1,\"9441\":1},\"1\":{\"9452\":1,\"9456\":1}}],[\"servletcontext1\",{\"1\":{\"9220\":1}}],[\"servletcontext\",{\"0\":{\"9210\":1},\"1\":{\"9205\":1,\"9220\":3,\"9222\":1,\"9224\":1,\"9234\":1,\"9249\":1,\"9255\":1,\"9262\":1}}],[\"servletconfig对象\",{\"1\":{\"8783\":1}}],[\"servletconfig\",{\"1\":{\"8764\":2,\"8768\":2,\"8784\":7}}],[\"servlet中的request请求对象\",{\"1\":{\"9187\":1}}],[\"servletoutputstream\",{\"1\":{\"9070\":1,\"9091\":1,\"9095\":1,\"9099\":1,\"9101\":1}}],[\"servletinputstream\",{\"1\":{\"8982\":1}}],[\"servletpath\",{\"1\":{\"8944\":2}}],[\"servlet类中定义的路由\",{\"1\":{\"8938\":1}}],[\"servlet类中的service方法\",{\"1\":{\"8910\":1}}],[\"servlet类的选择\",{\"0\":{\"8798\":1}}],[\"servletdemo6\",{\"1\":{\"9124\":2}}],[\"servletdemo5\",{\"1\":{\"9124\":1}}],[\"servletdemo3\",{\"1\":{\"8944\":2}}],[\"servletdemo\",{\"1\":{\"8834\":1}}],[\"servletdemo2\",{\"1\":{\"8809\":1}}],[\"servletdemo1实现了servlet接口\",{\"1\":{\"8724\":1}}],[\"servletdemo1\",{\"1\":{\"8704\":1,\"8707\":1,\"8784\":1}}],[\"servlet接口有一个实现类\",{\"1\":{\"8788\":1}}],[\"servlet接口一共有五个方法\",{\"1\":{\"8763\":1}}],[\"servlet对象会被销毁\",{\"1\":{\"8774\":1}}],[\"servlet是单例的\",{\"1\":{\"8754\":1}}],[\"servlet是javaee规范之一\",{\"1\":{\"8672\":1}}],[\"servlet是javaweb最为核心的内容\",{\"1\":{\"8671\":1}}],[\"servlet运行在servlet容器\",{\"1\":{\"8745\":1}}],[\"servlet的体系结构\",{\"0\":{\"8787\":1}}],[\"servlet的init方法\",{\"1\":{\"8754\":1}}],[\"servlet的对象\",{\"0\":{\"8743\":1}}],[\"servlet的本质\",{\"0\":{\"8678\":1}}],[\"servlet方法由web服务器调用\",{\"1\":{\"8727\":1}}],[\"servlet由web服务器创建\",{\"1\":{\"8727\":1}}],[\"servlet执行流程概述\",{\"0\":{\"8716\":1}}],[\"servletexception\",{\"1\":{\"8704\":1,\"8764\":2,\"8768\":1,\"8772\":1,\"8784\":1,\"8809\":2,\"8817\":1,\"8944\":2,\"8951\":1,\"8955\":1,\"8990\":1,\"9004\":2,\"9027\":2,\"9031\":2,\"9079\":1,\"9124\":2,\"9143\":1,\"9145\":1,\"9270\":2}}],[\"servletresponse封装的是响应数据\",{\"1\":{\"8725\":1}}],[\"servletresponse\",{\"1\":{\"8704\":1,\"8764\":1,\"8772\":2,\"8817\":3,\"9112\":1,\"9270\":1,\"9684\":1}}],[\"servletrequestattributeevent对象代表属性变化事件\",{\"1\":{\"9406\":1}}],[\"servletrequestattributeevent\",{\"1\":{\"9400\":1,\"9402\":1,\"9404\":1}}],[\"servletrequestattributelistener\",{\"0\":{\"9396\":1}}],[\"servletrequest对象销毁时调用\",{\"1\":{\"9356\":1}}],[\"servletrequest对象创建时调用\",{\"1\":{\"9354\":1}}],[\"servletrequestevent对象代表从httpservletrequest对象身上捕获到的事件\",{\"1\":{\"9357\":1}}],[\"servletrequestevent\",{\"1\":{\"9353\":1,\"9355\":1}}],[\"servletrequestlistener\",{\"0\":{\"9349\":1}}],[\"servletrequest和httpservletrequest是继承关系\",{\"1\":{\"8906\":1}}],[\"servletrequest和httpservletrequest都是java提供的\",{\"1\":{\"8906\":1}}],[\"servletrequest封装的是请求数据\",{\"1\":{\"8725\":1}}],[\"servletrequest\",{\"1\":{\"8704\":1,\"8764\":1,\"8772\":2,\"8817\":3,\"9112\":1,\"9222\":1,\"9270\":1,\"9687\":1,\"9750\":1}}],[\"servlet实现类会被自动访问\",{\"1\":{\"8696\":1}}],[\"servlet包是tomcat\",{\"1\":{\"8682\":1}}],[\"servlet就是一个接口\",{\"1\":{\"8679\":1}}],[\"servlet介绍\",{\"0\":{\"8665\":1}}],[\"servlet需要依赖tomcat才能运行\",{\"1\":{\"8416\":1}}],[\"servlet容器都会调用servlet的service\",{\"1\":{\"8759\":1}}],[\"servlet容器\",{\"1\":{\"8416\":1}}],[\"servlet3\",{\"1\":{\"4897\":1}}],[\"servlet层\",{\"1\":{\"1273\":1}}],[\"servlet\",{\"0\":{\"8714\":1,\"8744\":1,\"8762\":1,\"8785\":1,\"8989\":1,\"9026\":1,\"10888\":1},\"1\":{\"10\":1,\"4579\":1,\"8403\":1,\"8667\":1,\"8670\":1,\"8682\":1,\"8704\":2,\"8707\":1,\"8764\":1,\"8772\":1,\"8784\":1,\"8834\":1,\"9269\":1,\"9270\":1,\"9314\":1,\"9543\":1,\"9674\":1,\"9675\":1,\"9677\":1}}],[\"setpath\",{\"1\":{\"9730\":1}}],[\"setpriority\",{\"1\":{\"5247\":1,\"5253\":1}}],[\"setproperty\",{\"1\":{\"584\":1,\"5924\":1,\"7852\":2}}],[\"setmaxage\",{\"1\":{\"9717\":2,\"9774\":1}}],[\"setmeal\",{\"0\":{\"1339\":1,\"1341\":1},\"1\":{\"1317\":1,\"1319\":1,\"1340\":1}}],[\"setheader\",{\"1\":{\"9065\":1,\"9082\":1,\"9139\":1,\"9143\":1}}],[\"setcontenttype\",{\"1\":{\"9082\":1,\"9085\":1,\"9101\":1}}],[\"setcorepoolsize\",{\"1\":{\"5517\":1}}],[\"setcharacterencoding\",{\"1\":{\"9046\":1,\"9048\":1,\"9054\":1}}],[\"setblob\",{\"1\":{\"8081\":1,\"8084\":1}}],[\"sets\",{\"1\":{\"10484\":1,\"10496\":3,\"10498\":1,\"10501\":3,\"10503\":1,\"10506\":3,\"10508\":1,\"10774\":3,\"10777\":1}}],[\"setstatus\",{\"1\":{\"9062\":1,\"9139\":1,\"9143\":1}}],[\"setstring\",{\"1\":{\"7956\":1,\"7970\":2,\"8113\":1,\"8121\":1}}],[\"setscale\",{\"0\":{\"1900\":1},\"1\":{\"1907\":3}}],[\"setint\",{\"1\":{\"7956\":1,\"8089\":1}}],[\"setin\",{\"1\":{\"6443\":1}}],[\"setid\",{\"1\":{\"1224\":1}}],[\"setobject\",{\"1\":{\"7980\":2,\"7989\":1,\"8037\":1,\"8045\":1,\"8054\":1,\"8084\":3,\"8126\":1,\"8146\":1,\"8201\":4}}],[\"setout\",{\"1\":{\"6443\":1,\"6460\":1}}],[\"setout方法对默认设备进行改变\",{\"1\":{\"6442\":1}}],[\"setordere\",{\"1\":{\"5999\":1,\"6001\":1}}],[\"set数据存储的特点\",{\"0\":{\"5691\":1}}],[\"set接口中没有额外定义新的方法\",{\"1\":{\"5721\":1,\"5770\":1}}],[\"set接口的方法\",{\"0\":{\"5720\":1}}],[\"set接口的主要实现类\",{\"1\":{\"5699\":1}}],[\"set接口\",{\"1\":{\"5687\":1}}],[\"set接口是collection的子接口\",{\"1\":{\"5685\":1}}],[\"set和list\",{\"1\":{\"5557\":1}}],[\"setdefaultrwconcern\",{\"1\":{\"10585\":1,\"10588\":1}}],[\"setdescription\",{\"1\":{\"1224\":2}}],[\"setdomain\",{\"1\":{\"9732\":1}}],[\"setdate\",{\"1\":{\"7956\":1,\"7970\":1}}],[\"setdaemon\",{\"1\":{\"5152\":1}}],[\"setxxx方法填充上述占位符\",{\"1\":{\"7956\":1}}],[\"setxxx方法才能访问\",{\"1\":{\"4036\":1}}],[\"setxxx来获取和操作\",{\"1\":{\"4006\":1}}],[\"setxxx\",{\"1\":{\"3846\":1,\"4577\":1,\"7951\":3,\"7954\":3,\"7956\":1}}],[\"setxxx和get方法来访问和操作属性\",{\"1\":{\"3820\":1}}],[\"setattribute\",{\"1\":{\"9119\":1,\"9124\":1,\"9184\":1,\"9207\":1,\"9246\":1,\"9249\":1,\"9753\":1}}],[\"setautocommit\",{\"0\":{\"8132\":1},\"1\":{\"8126\":1,\"8134\":1,\"8148\":2,\"8162\":1}}],[\"setage\",{\"1\":{\"3821\":2,\"4039\":2}}],[\"setaccessible启动和禁用访问安全检查的开关\",{\"1\":{\"7187\":1}}],[\"setaccessible\",{\"0\":{\"2245\":1,\"2283\":1,\"2292\":1,\"7182\":1},\"1\":{\"2239\":1,\"2244\":1,\"2247\":1,\"2284\":1,\"2291\":1,\"2293\":1,\"6962\":3,\"7146\":1,\"7161\":2,\"7179\":1,\"7185\":1,\"8045\":1,\"8054\":1,\"8201\":2}}],[\"set<employee>\",{\"1\":{\"7723\":1}}],[\"set<map\",{\"1\":{\"2624\":2,\"5970\":1}}],[\"set<string>\",{\"1\":{\"2618\":1}}],[\"set<k>\",{\"1\":{\"2618\":1}}],[\"set<t>\",{\"1\":{\"2518\":2}}],[\"setname\",{\"1\":{\"1224\":2,\"5210\":1,\"5219\":2,\"6956\":1}}],[\"set方法访问\",{\"1\":{\"5217\":1}}],[\"set方法\",{\"1\":{\"1213\":1}}],[\"set\",{\"0\":{\"2240\":1,\"2564\":1,\"5682\":1,\"5683\":1,\"5769\":1},\"1\":{\"1029\":1,\"1348\":8,\"2244\":2,\"2399\":1,\"2478\":1,\"2566\":2,\"2618\":2,\"5546\":1,\"5556\":2,\"5685\":1,\"5696\":2,\"5710\":1,\"5779\":11,\"5790\":6,\"5794\":1,\"5913\":1,\"5933\":1,\"6962\":1,\"7146\":1,\"7159\":1,\"7719\":1,\"7980\":1,\"7991\":1,\"8045\":1,\"8054\":1,\"8148\":2,\"8201\":2,\"8207\":1,\"9700\":1,\"9767\":1,\"10021\":1,\"10438\":1,\"10526\":1,\"10554\":1,\"10556\":1,\"10585\":1}}],[\"settransactionisolation\",{\"0\":{\"8154\":1},\"1\":{\"8160\":1,\"8162\":1}}],[\"settype\",{\"1\":{\"1224\":2}}],[\"setter\",{\"1\":{\"519\":1,\"590\":1,\"1214\":1}}],[\"settings\",{\"1\":{\"1083\":2,\"10541\":1,\"10548\":1}}],[\"setting中勾选\",{\"1\":{\"559\":1}}],[\"setting\",{\"1\":{\"355\":1,\"1068\":1}}],[\"se\",{\"1\":{\"7\":1,\"2805\":1,\"9381\":1,\"9383\":1,\"9385\":1,\"9436\":1,\"9438\":1}}],[\"可读写\",{\"1\":{\"10452\":1}}],[\"可读性差\",{\"1\":{\"4683\":1}}],[\"可遍历性\",{\"1\":{\"10082\":1}}],[\"可执行脚本目录\",{\"1\":{\"9879\":1}}],[\"可称为开发环境\",{\"1\":{\"9494\":1}}],[\"可称为jvm环境\",{\"1\":{\"9493\":1}}],[\"可根据预先的占用超时设定\",{\"1\":{\"8240\":1}}],[\"可在应用层通过数据库连接池的配置\",{\"1\":{\"8239\":1}}],[\"可使用事务\",{\"1\":{\"8180\":1,\"8181\":1,\"8182\":1,\"8183\":1}}],[\"可使用关键字final来修饰\",{\"1\":{\"3971\":1}}],[\"可返回表中的多条记录\",{\"1\":{\"8053\":1}}],[\"可用性\",{\"1\":{\"10438\":1}}],[\"可用1\",{\"1\":{\"6422\":1}}],[\"可用于类型的注解\",{\"0\":{\"5023\":1}}],[\"可用于修饰包\",{\"1\":{\"4883\":1}}],[\"可多次调用write\",{\"1\":{\"6285\":1}}],[\"可省略\",{\"1\":{\"6273\":1,\"8173\":1}}],[\"可操纵的东西\",{\"1\":{\"5112\":1}}],[\"可增强用户体验\",{\"1\":{\"5101\":1}}],[\"可重复的\",{\"1\":{\"5848\":1}}],[\"可重复的数据\",{\"1\":{\"5544\":1,\"5631\":1}}],[\"可重复的注解及可用于类型的注解\",{\"1\":{\"5008\":1}}],[\"可重复\",{\"1\":{\"5531\":1}}],[\"可重复注解\",{\"0\":{\"5009\":1}}],[\"可自己拿来用\",{\"1\":{\"8172\":1}}],[\"可自行选择\",{\"1\":{\"4794\":1}}],[\"可自动转换的基本数据类型除外\",{\"1\":{\"4225\":1}}],[\"可不创建对象\",{\"1\":{\"4373\":1}}],[\"可维护性\",{\"1\":{\"3813\":1}}],[\"可知构造器将pattern对象的引用赋于matcher中变量parentpattern\",{\"1\":{\"2768\":1}}],[\"可通过class类的静态方法forname\",{\"1\":{\"2139\":1,\"6999\":1}}],[\"可变形参\",{\"1\":{\"7986\":1}}],[\"可变形参的两种写法\",{\"1\":{\"3805\":1}}],[\"可变参数的重写\",{\"0\":{\"4058\":1}}],[\"可变个数形参在方法的形参中\",{\"1\":{\"3798\":1,\"3799\":1}}],[\"可变个数形参的第二种写法\",{\"1\":{\"3797\":1}}],[\"可变个数形参的方法与本类中方法名相同\",{\"1\":{\"3796\":1,\"3797\":1}}],[\"可变个数形参的方法\",{\"0\":{\"3789\":1}}],[\"可变个数形参\",{\"1\":{\"3790\":1}}],[\"可变的字符序列\",{\"1\":{\"1551\":1,\"1552\":1}}],[\"可变性\",{\"1\":{\"1536\":1,\"1571\":1,\"1617\":1}}],[\"可配置项非常多\",{\"1\":{\"1114\":1}}],[\"可能存在线程安全问题\",{\"1\":{\"8754\":1}}],[\"可能有多个构造器\",{\"1\":{\"7127\":1}}],[\"可能发生变化\",{\"1\":{\"6575\":1}}],[\"可能生成某种异常\",{\"1\":{\"4767\":1}}],[\"可能读取失败\",{\"1\":{\"4753\":1}}],[\"可能出现classcastexception\",{\"1\":{\"5964\":1}}],[\"可能出现classcastexception的异常\",{\"1\":{\"4183\":1}}],[\"可能出现异常的代码\",{\"1\":{\"4727\":1}}],[\"可能是多个异常\",{\"1\":{\"2274\":1,\"7124\":1}}],[\"可能抛出\",{\"1\":{\"2140\":1,\"6999\":1}}],[\"可能没有一个真实存在的文件或目录\",{\"1\":{\"1941\":1,\"6115\":1}}],[\"可能跟预想的不一样\",{\"1\":{\"637\":1}}],[\"可能会产生数据损坏\",{\"1\":{\"10859\":1}}],[\"可能会遇到报错\",{\"1\":{\"10585\":1}}],[\"可能会遇到bug\",{\"1\":{\"474\":1}}],[\"可能会损害数据\",{\"1\":{\"10167\":1}}],[\"可能会造成不必要的错误\",{\"1\":{\"9509\":1}}],[\"可能会造成不同对象拥有相同的hashcode\",{\"1\":{\"5761\":1}}],[\"可能会乱码\",{\"1\":{\"6210\":1}}],[\"可能会发生阻塞\",{\"1\":{\"5348\":1}}],[\"可能会发生除不尽的情况\",{\"1\":{\"1906\":1}}],[\"可能会抛出的异常类型\",{\"1\":{\"4771\":1}}],[\"可能会带来意想不到的结果\",{\"1\":{\"4703\":1}}],[\"可能会导致数据的错误\",{\"1\":{\"3815\":1}}],[\"可能会导致写入失败\",{\"1\":{\"2108\":1}}],[\"可能会出现驱动类过时的问题\",{\"1\":{\"998\":1}}],[\"可能会出现一个提示信息\",{\"1\":{\"613\":1}}],[\"可能会根据开发环境添加诸如application\",{\"1\":{\"471\":1}}],[\"可能与springboot的版本号对不上导致无法引入报错\",{\"1\":{\"343\":1}}],[\"可以看到有两个隐藏的集合\",{\"1\":{\"10722\":1}}],[\"可以看做一个库\",{\"1\":{\"9915\":1}}],[\"可以读写所有数据库中任何数据\",{\"1\":{\"10682\":1}}],[\"可以读写指定数据库中任何数据\",{\"1\":{\"10678\":1}}],[\"可以读取指定数据库以及对数据库进行清理\",{\"1\":{\"10688\":1}}],[\"可以读取指定数据库中任何数据\",{\"1\":{\"10676\":1}}],[\"可以读取任何数据库以及对数据库进行清理\",{\"1\":{\"10686\":1}}],[\"可以读取所有数据库中任何数据\",{\"1\":{\"10680\":1}}],[\"可以读或选举\",{\"1\":{\"10453\":1}}],[\"可以随意连接到实例进行各种操作\",{\"1\":{\"10636\":1}}],[\"可以随意定义\",{\"1\":{\"8476\":1}}],[\"可以发现members里存在了两个节点\",{\"1\":{\"10575\":1}}],[\"可以查看到主节点的信息\",{\"1\":{\"10534\":1}}],[\"可以查阅javaee\",{\"1\":{\"8916\":1}}],[\"可以不加仲裁者\",{\"1\":{\"10462\":1}}],[\"可以不作处理\",{\"1\":{\"4706\":1}}],[\"可以说\",{\"1\":{\"10439\":1}}],[\"可以说是目前最好的连接池之一\",{\"1\":{\"8253\":1}}],[\"可以说是针对监控而生的db连接池\",{\"1\":{\"8253\":1}}],[\"可以移除指定的索引\",{\"1\":{\"10408\":1}}],[\"可以登录\",{\"1\":{\"10175\":1}}],[\"可以扩展到上百台服务器\",{\"1\":{\"9835\":1}}],[\"可以和程序的容器\",{\"1\":{\"9212\":1}}],[\"可以立即销毁session\",{\"1\":{\"9202\":1}}],[\"可以重定向到任何位置的资源\",{\"1\":{\"9152\":1}}],[\"可以重复的\",{\"1\":{\"5819\":1}}],[\"可以同时引入多个约束文档\",{\"1\":{\"9644\":1}}],[\"可以同时创建多层目录\",{\"1\":{\"2008\":1}}],[\"可以同设置\",{\"1\":{\"8749\":1}}],[\"可以任意取\",{\"1\":{\"8579\":1}}],[\"可以任意指定长度\",{\"1\":{\"3560\":1}}],[\"可以部署web项目\",{\"1\":{\"8396\":1}}],[\"可以很好的监控db池连接和sql的执行情况\",{\"1\":{\"8253\":1}}],[\"可以很简单的穷举出需要多少个函数式接口\",{\"1\":{\"7410\":1}}],[\"可以开启事务\",{\"1\":{\"8124\":1}}],[\"可以采用数据库连接池技术\",{\"1\":{\"8225\":1}}],[\"可以采用java的批量更新机制\",{\"1\":{\"8092\":1}}],[\"可以采用config\",{\"1\":{\"830\":1}}],[\"可以操作blob数据\",{\"1\":{\"7900\":1}}],[\"可以操作非public修饰的类内部成员\",{\"1\":{\"7188\":1}}],[\"可以组合ispresent一起用\",{\"1\":{\"7759\":1}}],[\"可以更好的表达这个概念\",{\"1\":{\"7732\":1}}],[\"可以方便地创建常见收集器实例\",{\"1\":{\"7720\":1}}],[\"可以方便地加入控制逻辑\",{\"1\":{\"3825\":1}}],[\"可以先使用flatmap\",{\"1\":{\"7665\":1}}],[\"可以接个map\",{\"1\":{\"7650\":1}}],[\"可以只有终止操作\",{\"1\":{\"7606\":1}}],[\"可以只选版本\",{\"1\":{\"1089\":1}}],[\"可以执行非常复杂的查找\",{\"1\":{\"7544\":1}}],[\"可以认为是lambda表达式的一个语法糖\",{\"1\":{\"7442\":1}}],[\"可以代理所有的被代理类\",{\"1\":{\"7250\":1}}],[\"可以广播发送\",{\"1\":{\"6741\":1}}],[\"可以实现\",{\"1\":{\"9815\":1}}],[\"可以实现高效的批量操作\",{\"1\":{\"7901\":1}}],[\"可以实现无痛的网络连接\",{\"1\":{\"6641\":1}}],[\"可以实现代码重用\",{\"1\":{\"3715\":1}}],[\"可以替代标准的java\",{\"1\":{\"6581\":1}}],[\"可以替换成is\",{\"1\":{\"4575\":1}}],[\"可以向已存在的文件后追加内容\",{\"1\":{\"6493\":1}}],[\"可以强制将缓冲区的内容全部写入输出流\",{\"1\":{\"6317\":1}}],[\"可以强转\",{\"1\":{\"4184\":1}}],[\"可以强转为int\",{\"1\":{\"1807\":1}}],[\"可以循环读取所有的数据\",{\"1\":{\"6241\":1}}],[\"可以获取数组的stream\",{\"1\":{\"7574\":1}}],[\"可以获取数据\",{\"1\":{\"6073\":1}}],[\"可以获取任何修饰符修饰的方法\",{\"1\":{\"2206\":1,\"7163\":1}}],[\"可以赋值为null\",{\"1\":{\"10258\":1}}],[\"可以赋值\",{\"1\":{\"6067\":1}}],[\"可以声明为静态的\",{\"1\":{\"6048\":1}}],[\"可以声明多个变量\",{\"1\":{\"3381\":1}}],[\"可以作为非静态属性的类型\",{\"1\":{\"6009\":1}}],[\"可以作为参数\",{\"1\":{\"1691\":1}}],[\"可以指明具体的泛型类型\",{\"1\":{\"5976\":1}}],[\"可以指定构造器的第二个参数\",{\"1\":{\"6272\":1}}],[\"可以指定\",{\"1\":{\"2719\":1}}],[\"可以指定泛型\",{\"1\":{\"2401\":1,\"5967\":1}}],[\"可以指定复制的长度\",{\"1\":{\"2374\":1}}],[\"可以指定字符串长度\",{\"1\":{\"1569\":1}}],[\"可以指定第二个参数\",{\"1\":{\"1527\":1,\"2499\":1,\"2504\":1,\"2703\":1}}],[\"可以保证所有的\",{\"1\":{\"5833\":1,\"5905\":1}}],[\"可以保障并发访问安全问题\",{\"1\":{\"1043\":1}}],[\"可以按照添加的顺序实现遍历\",{\"1\":{\"5826\":1}}],[\"可以按照添加的顺序遍历\",{\"1\":{\"5709\":1}}],[\"可以按照添加对象的指定属性\",{\"1\":{\"5716\":1}}],[\"可以确保集合元素处于排序状态\",{\"1\":{\"5714\":1}}],[\"可以存储null值\",{\"1\":{\"5699\":1}}],[\"可以存储生日\",{\"1\":{\"1638\":1}}],[\"可以动态地把多个对象的引用放入容器中\",{\"1\":{\"5521\":1}}],[\"可以避免频繁创建销毁\",{\"1\":{\"5491\":1}}],[\"可以抛出异常\",{\"1\":{\"5471\":1}}],[\"可以显式加锁\",{\"1\":{\"5383\":1}}],[\"可以显式的使用\",{\"1\":{\"3900\":1}}],[\"可以创建多个cookie对象\",{\"1\":{\"9712\":1}}],[\"可以创建多个tomcat模板给不同的项目用\",{\"1\":{\"8608\":1}}],[\"可以创建多个线程来执行这些不同的任务\",{\"1\":{\"5083\":1}}],[\"可以创建一个customerdaoimpltest用来测试customerdaoimpl\",{\"1\":{\"8209\":1}}],[\"可以创建一个基础控制器basecontroller\",{\"1\":{\"885\":1}}],[\"可以访问相同的变量和对象\",{\"1\":{\"5080\":1}}],[\"可以取多个枚举值\",{\"1\":{\"4988\":1}}],[\"可以通俗的理解为\",{\"1\":{\"4956\":1}}],[\"可以通过设置优先级\",{\"1\":{\"10622\":1}}],[\"可以通过compass直接可视化的查看执行计划\",{\"1\":{\"10419\":1}}],[\"可以通过class类的getdeclaredconstructor\",{\"1\":{\"7063\":1}}],[\"可以通过官网下载独立安装包\",{\"1\":{\"10184\":1}}],[\"可以通过修改配置文件\",{\"1\":{\"9783\":1}}],[\"可以通过手动创建cookie\",{\"1\":{\"9773\":1}}],[\"可以通过请求对象request获取cookie\",{\"1\":{\"9686\":1}}],[\"可以通过以下两种方式获取\",{\"1\":{\"9219\":1}}],[\"可以通过将\",{\"1\":{\"8767\":1}}],[\"可以通过调用\",{\"1\":{\"7927\":1,\"7945\":1,\"8005\":1}}],[\"可以通过下面的几个构造器来初始化一个\",{\"1\":{\"6876\":1}}],[\"可以通过构造方法设置name\",{\"1\":{\"5219\":1}}],[\"可以通过实现类对象来调用\",{\"1\":{\"4528\":1}}],[\"可以通过for循环遍历数组\",{\"1\":{\"3511\":1}}],[\"可以通过标签指明要跳过的是哪一层循环\",{\"1\":{\"3436\":1}}],[\"可以通过\",{\"1\":{\"630\":1,\"633\":1,\"2958\":1,\"3709\":1,\"7420\":1,\"8004\":1,\"10145\":1}}],[\"可以通过application\",{\"1\":{\"576\":1}}],[\"可以像修饰符一样被使用\",{\"1\":{\"4883\":1}}],[\"可以根据单词快速获取包含这个单词的文档列表\",{\"1\":{\"9965\":1}}],[\"可以根据请求头\",{\"1\":{\"8947\":1}}],[\"可以根据需求修改servlet模板\",{\"1\":{\"8737\":1}}],[\"可以根据需要转型\",{\"1\":{\"2237\":1}}],[\"可以根据序号存取容器中的元素\",{\"1\":{\"5627\":1}}],[\"可以根据名字判断异常类型\",{\"1\":{\"4811\":1,\"4815\":1}}],[\"可以将额外的mongod实例添加到副本集作为仲裁者\",{\"1\":{\"10460\":1}}],[\"可以将\",{\"1\":{\"9581\":1}}],[\"可以将流中元素反复结合起来\",{\"1\":{\"7704\":1}}],[\"可以将方法名看做是lambda表达式中\",{\"1\":{\"7451\":1}}],[\"可以将该异常throws到调用处\",{\"1\":{\"4803\":1}}],[\"可以将char\",{\"1\":{\"1495\":1}}],[\"可以用上比较运算符\",{\"1\":{\"10350\":1}}],[\"可以用来存储限于本地单台服务器的任意集合\",{\"1\":{\"10206\":1}}],[\"可以用来计算时间差\",{\"1\":{\"2303\":1}}],[\"可以用于发送网络消息\",{\"1\":{\"6775\":1,\"6803\":1}}],[\"可以用于接收网络消息\",{\"1\":{\"6774\":1}}],[\"可以用randomaccessfile这个类\",{\"1\":{\"6528\":1}}],[\"可以用\",{\"1\":{\"6228\":1}}],[\"可以用集合取代\",{\"1\":{\"5534\":1}}],[\"可以用arithmeticexception\",{\"1\":{\"4731\":1}}],[\"可以用该异常类作为catch的参数\",{\"1\":{\"4731\":1}}],[\"可以进行数据的共享\",{\"1\":{\"9118\":1}}],[\"可以进行关闭切换其他tomcat模板\",{\"1\":{\"8632\":1}}],[\"可以进行add和其他操作了\",{\"1\":{\"5794\":1}}],[\"可以进行异常的处理\",{\"1\":{\"4699\":1}}],[\"可以进行遍历了\",{\"1\":{\"2620\":1}}],[\"可以给静态属性赋值\",{\"1\":{\"4553\":1}}],[\"可以从生命周期的角度去理解\",{\"1\":{\"4403\":1}}],[\"可以从指定的index开始插入另一个集合的数据\",{\"1\":{\"2541\":1}}],[\"可以考虑内部类声明为静态的\",{\"1\":{\"4324\":1}}],[\"可以考虑赋值的位置有\",{\"1\":{\"3984\":1}}],[\"可以被abstract修饰\",{\"1\":{\"4319\":1}}],[\"可以被final修饰\",{\"1\":{\"4318\":1}}],[\"可以被4种不同的权限修饰\",{\"1\":{\"4315\":1}}],[\"可以被static修饰\",{\"1\":{\"4314\":1}}],[\"可以转\",{\"1\":{\"4196\":1}}],[\"可以转为true\",{\"1\":{\"1485\":1}}],[\"可以自动生成equals重写\",{\"1\":{\"4235\":1}}],[\"可以自动进行\",{\"1\":{\"4177\":1}}],[\"可以自己写递归\",{\"1\":{\"2021\":1}}],[\"可以继承genericservlet\",{\"1\":{\"8794\":1}}],[\"可以继承的观点是\",{\"1\":{\"4030\":1}}],[\"可以继续添加非通用的api\",{\"1\":{\"1268\":1}}],[\"可以链式继承\",{\"1\":{\"4017\":1}}],[\"可以理解为js\",{\"1\":{\"7333\":1}}],[\"可以理解为应用程序的集合\",{\"1\":{\"5066\":1,\"5067\":1}}],[\"可以理解为异常的处理方式\",{\"1\":{\"4688\":1}}],[\"可以理解为\",{\"1\":{\"3941\":1,\"4948\":1,\"4950\":1,\"9243\":1}}],[\"可以调用stream类静态方法\",{\"1\":{\"7582\":1}}],[\"可以调用son类中的属性了\",{\"1\":{\"4174\":1}}],[\"可以调用son类中独有的方法了\",{\"1\":{\"4174\":1}}],[\"可以调用下面两个方法\",{\"1\":{\"4740\":1}}],[\"可以调用静态方法\",{\"1\":{\"4553\":1}}],[\"可以调用多个接口的\",{\"1\":{\"4534\":1}}],[\"可以调用外部类的结构\",{\"1\":{\"4313\":1}}],[\"可以调用类的属性\",{\"1\":{\"3891\":1}}],[\"可以调用当前类的属性或方法\",{\"1\":{\"3745\":1}}],[\"可以调用compareto方法比较两个digdecimal的数值大小\",{\"1\":{\"1933\":1}}],[\"可以return一个表达式\",{\"1\":{\"3722\":1}}],[\"可以静态初始化\",{\"1\":{\"3558\":1}}],[\"可以为循环添加label标识符\",{\"1\":{\"3432\":1}}],[\"可以为类注入日志对象\",{\"1\":{\"887\":1}}],[\"可以控制循环的执行\",{\"1\":{\"3424\":1}}],[\"可以有效描述非结构化数据和结构化数据\",{\"1\":{\"10082\":1}}],[\"可以有不同的方式来实现上述概念模型\",{\"1\":{\"9955\":1}}],[\"可以有class对象的元素\",{\"0\":{\"6981\":1}}],[\"可以有返回值\",{\"1\":{\"5470\":1}}],[\"可以有若干个\",{\"1\":{\"4950\":1}}],[\"可以有多个属性\",{\"1\":{\"4916\":1}}],[\"可以有多个变量更新\",{\"1\":{\"3384\":1}}],[\"可以有第二个参数\",{\"1\":{\"1437\":1}}],[\"可以利用省略break的特性\",{\"1\":{\"3372\":1}}],[\"可以把这个数值配置大一些\",{\"1\":{\"8297\":1}}],[\"可以把数组看做是一个特殊的类\",{\"1\":{\"7529\":1}}],[\"可以把一个用户线程变成一个守护线程\",{\"1\":{\"5152\":1}}],[\"可以把一个字符串转为对应的枚举类对象\",{\"1\":{\"4864\":1}}],[\"可以把接口当做工具类使用\",{\"1\":{\"4538\":1}}],[\"可以把语句组合成能完成一定功能的小逻辑模块\",{\"1\":{\"3330\":1}}],[\"可以把正则表达式字符串编译成pattern对象\",{\"1\":{\"2709\":1}}],[\"可以1个是空格\",{\"1\":{\"3135\":1}}],[\"可以写多行\",{\"1\":{\"2934\":1}}],[\"可以匹配一切字符\",{\"1\":{\"2726\":1}}],[\"可以遍历了\",{\"1\":{\"2618\":1}}],[\"可以迭代value\",{\"1\":{\"2584\":1}}],[\"可以迭代key\",{\"1\":{\"2583\":1}}],[\"可以比较值\",{\"1\":{\"2422\":1}}],[\"可以正常比较值\",{\"1\":{\"2419\":1}}],[\"可以正常查询\",{\"1\":{\"991\":1}}],[\"可以定义成内部类\",{\"1\":{\"2365\":1}}],[\"可以当做读取数据的载体\",{\"1\":{\"2050\":1}}],[\"可以表示不可变的任意精度的整数\",{\"1\":{\"1867\":1}}],[\"可以省略驱动的注册\",{\"1\":{\"7864\":1}}],[\"可以省略初始值\",{\"1\":{\"7710\":1}}],[\"可以省略return\",{\"1\":{\"7356\":1}}],[\"可以省略abstract\",{\"1\":{\"4490\":1}}],[\"可以省略public\",{\"1\":{\"4488\":1}}],[\"可以省略循环体种的一些元素\",{\"1\":{\"3411\":1}}],[\"可以省略的\",{\"1\":{\"3351\":1}}],[\"可以省略\",{\"1\":{\"1769\":1,\"4941\":1,\"7352\":1,\"7355\":1}}],[\"可以省略第二个参数\",{\"1\":{\"1479\":1}}],[\"可以是索引名\",{\"1\":{\"10410\":1}}],[\"可以是文件对象\",{\"1\":{\"6503\":1}}],[\"可以是\",{\"1\":{\"1945\":1,\"6128\":1}}],[\"可以是任意能转为string的数据类型\",{\"1\":{\"1599\":1}}],[\"可以是各种能自动转为string的数据类型\",{\"1\":{\"1584\":1}}],[\"可以额外指定两个范围参数\",{\"1\":{\"1584\":1}}],[\"可以直接指定\",{\"1\":{\"10277\":1}}],[\"可以直接输入命令\",{\"1\":{\"10192\":1}}],[\"可以直接连接\",{\"1\":{\"10188\":1}}],[\"可以直接进行iterate遍历getheadernames方法的结果\",{\"1\":{\"8953\":1}}],[\"可以直接获取打包后可以部署的项目目录\",{\"1\":{\"8516\":1}}],[\"可以直接替换\",{\"1\":{\"7482\":1}}],[\"可以直接使用第三方封装好的io流操作包\",{\"1\":{\"6635\":1}}],[\"可以直接使用collection\",{\"1\":{\"1745\":1}}],[\"可以直接通过uri进行连接\",{\"1\":{\"10845\":1}}],[\"可以直接通过数组名\",{\"1\":{\"3503\":1}}],[\"可以直接通过下标\",{\"1\":{\"3470\":1}}],[\"可以直接在编辑器里运行\",{\"1\":{\"2899\":1}}],[\"可以直接查看该类的注释来使用正则语法\",{\"1\":{\"2668\":1,\"2673\":1}}],[\"可以直接调用compareto比较大小\",{\"1\":{\"1852\":1}}],[\"可以直接下载\",{\"1\":{\"1367\":1}}],[\"可以直接复制使用\",{\"1\":{\"1175\":1}}],[\"可以点击basemapper查看具体有哪些api可以掉用\",{\"1\":{\"1222\":1}}],[\"可以点x取消\",{\"1\":{\"324\":1}}],[\"可以对整个集群或数据库系统进行管理操作\",{\"1\":{\"10692\":1}}],[\"可以对\",{\"1\":{\"9479\":1}}],[\"可以对具体runnable\",{\"1\":{\"5476\":1}}],[\"可以对字符串内容进行增删\",{\"1\":{\"1536\":1}}],[\"可以对餐厅的菜品\",{\"1\":{\"1384\":1}}],[\"可以对将要生成的代码的模板进行配置\",{\"1\":{\"1114\":1}}],[\"可以对基本的日志策略进行配置\",{\"1\":{\"935\":1}}],[\"可以在指定数据库创建和修改用户\",{\"1\":{\"10684\":1,\"10690\":1}}],[\"可以在ﬁnd方法后调用limit来返回结果\",{\"1\":{\"10329\":1}}],[\"可以在转发资源间使用request共享数据\",{\"1\":{\"9128\":1}}],[\"可以在范围内共享数据\",{\"1\":{\"9115\":1,\"9178\":1,\"9239\":1}}],[\"可以在中间接filter\",{\"1\":{\"7690\":1}}],[\"可以在java层面对nosql数据进行类似sql的操作\",{\"1\":{\"7541\":1}}],[\"可以在网络上查找相应的文件或其他资源\",{\"1\":{\"6867\":1}}],[\"可以在实例化时传递一个数据类型\",{\"1\":{\"5940\":1}}],[\"可以在任何需要的场景下调用\",{\"1\":{\"5460\":1}}],[\"可以在调用处\",{\"1\":{\"4802\":1}}],[\"可以在创建对象时\",{\"1\":{\"4565\":1}}],[\"可以在创建项目时\",{\"1\":{\"1003\":1}}],[\"可以在方法中\",{\"1\":{\"3802\":1}}],[\"可以在声明属性时\",{\"1\":{\"3691\":1}}],[\"可以在注释里写html标签\",{\"1\":{\"2940\":1}}],[\"可以在有main方法的类中\",{\"1\":{\"2924\":1}}],[\"可以在各个平台运行\",{\"1\":{\"2816\":1}}],[\"可以在键盘输入字符\",{\"1\":{\"2334\":1,\"2791\":1}}],[\"可以在线浏览菜品\",{\"1\":{\"1385\":1}}],[\"可以在配置文件中\",{\"1\":{\"913\":1}}],[\"可以去修改mysql中的配置文件mysql\",{\"1\":{\"996\":1}}],[\"可以选择手动配置\",{\"1\":{\"10139\":1}}],[\"可以选择给变量一个初始化值\",{\"1\":{\"3675\":1}}],[\"可以选择在放在后端的resource目录中部署\",{\"1\":{\"1367\":1}}],[\"可以选择使用druid连接池进行连接\",{\"1\":{\"976\":1}}],[\"可以选择其他方式创建\",{\"1\":{\"327\":1}}],[\"可以包含零个或多个appender元素\",{\"1\":{\"952\":1}}],[\"可以输出项目中的debug日志\",{\"1\":{\"952\":1}}],[\"可以使\",{\"1\":{\"952\":1}}],[\"可以使用任何方法生成密钥文件\",{\"1\":{\"10769\":1}}],[\"可以使用limit\",{\"1\":{\"10328\":1}}],[\"可以使用try\",{\"1\":{\"10268\":1}}],[\"可以使用方法动态获取虚拟路径\",{\"1\":{\"9173\":1}}],[\"可以使用方法引用\",{\"1\":{\"7444\":1}}],[\"可以使用request对象来共享数据\",{\"1\":{\"9162\":1}}],[\"可以使用return将修改后的数据返回\",{\"1\":{\"3783\":1}}],[\"可以使用configfilter\",{\"1\":{\"8276\":1}}],[\"可以使用批处理的方式\",{\"1\":{\"8116\":1}}],[\"可以使用此对象多次高效地执行该语句\",{\"1\":{\"7884\":1}}],[\"可以使用反射\",{\"1\":{\"7857\":1}}],[\"可以使用静态方法\",{\"1\":{\"7585\":1}}],[\"可以使用数据流\",{\"1\":{\"6462\":1}}],[\"可以使用泛型\",{\"1\":{\"6031\":1}}],[\"可以使用包装类替换\",{\"1\":{\"6008\":1}}],[\"可以使用get\",{\"1\":{\"5217\":1}}],[\"可以使用针对性的代码进行处理\",{\"1\":{\"4672\":1}}],[\"可以使用代码块进行\",{\"1\":{\"4569\":1}}],[\"可以使用在基本数据类型变量和引用数据类型变量中\",{\"1\":{\"4221\":1}}],[\"可以使用在switch\",{\"1\":{\"3365\":1}}],[\"可以使用\",{\"1\":{\"3894\":1,\"3951\":1,\"10295\":1}}],[\"可以使用for循环创建\",{\"1\":{\"3659\":1}}],[\"可以使用第二个参数flags指明模式修饰符\",{\"1\":{\"2716\":1}}],[\"可以使用生成的模式创建matcher对象\",{\"1\":{\"2680\":1}}],[\"可以使用iterator接口或增强for循环遍历了\",{\"1\":{\"2617\":1}}],[\"可以使用idea的设置进行自动隐藏\",{\"1\":{\"354\":1}}],[\"可以使用arrays\",{\"1\":{\"2529\":1}}],[\"可以使用withxxx单独设置某个时间维度的时间\",{\"1\":{\"1656\":1}}],[\"可以使用一个工具\",{\"1\":{\"1213\":1}}],[\"可以使用双引号包裹\",{\"1\":{\"486\":1}}],[\"可以使用父工程的pom\",{\"1\":{\"385\":1}}],[\"可以拼接任意普通字符串\",{\"1\":{\"922\":1}}],[\"可以精确到某个包的日志等级\",{\"1\":{\"905\":1}}],[\"可以添加隐藏的选项框\",{\"1\":{\"776\":1}}],[\"可以手动销毁session\",{\"1\":{\"9787\":1}}],[\"可以手动设置cookie的存活时间\",{\"1\":{\"9716\":1}}],[\"可以手动加\",{\"1\":{\"1222\":1}}],[\"可以手动导入该starter\",{\"1\":{\"652\":1}}],[\"可以手动指定版本号\",{\"1\":{\"346\":1}}],[\"可以提高配置的层级\",{\"1\":{\"583\":1}}],[\"可以成功获取\",{\"1\":{\"522\":1}}],[\"可选参数\",{\"1\":{\"3634\":1}}],[\"可选\",{\"0\":{\"1223\":1},\"1\":{\"11\":1,\"1454\":1,\"2759\":1,\"3718\":1,\"5513\":1,\"10249\":1,\"10250\":1,\"10282\":1,\"10283\":1,\"10284\":1,\"10285\":1,\"10308\":1,\"10309\":1,\"10324\":1,\"10390\":1,\"10539\":1,\"10569\":1,\"10703\":1}}],[\"可略过\",{\"1\":{\"8\":1}}],[\"jpa\",{\"1\":{\"10835\":1}}],[\"jpa是基于注解的\",{\"1\":{\"4887\":1}}],[\"jpeg格式\",{\"1\":{\"9229\":1}}],[\"jpeg\",{\"1\":{\"9229\":1,\"9234\":1}}],[\"jpg\",{\"1\":{\"2036\":2,\"2042\":1,\"2048\":1,\"2062\":1,\"2090\":1,\"6232\":1,\"6297\":4,\"6353\":2,\"6516\":2,\"8084\":1,\"8089\":1,\"9095\":1,\"9099\":1,\"9234\":1,\"9260\":1}}],[\"j++\",{\"1\":{\"3444\":1,\"3453\":1,\"3455\":1,\"3457\":2,\"3570\":1}}],[\"j\",{\"1\":{\"2494\":1,\"2495\":1,\"3444\":4,\"3453\":2,\"3455\":4,\"3457\":6,\"3570\":3,\"4227\":1}}],[\"jre\",{\"0\":{\"2842\":1,\"2848\":1},\"1\":{\"2314\":1,\"2849\":1,\"2850\":1,\"2854\":1,\"6966\":1,\"9494\":1}}],[\"jin\",{\"1\":{\"2181\":2,\"7065\":2}}],[\"jinno\",{\"1\":{\"1286\":1,\"1773\":2,\"1791\":2,\"2422\":2,\"2937\":1,\"3496\":1,\"3747\":1,\"3857\":1,\"3985\":1,\"4174\":1,\"5588\":1,\"5611\":1,\"5927\":1,\"5970\":2,\"7471\":1,\"7493\":1,\"7655\":6,\"7956\":1}}],[\"journal\",{\"1\":{\"10162\":1,\"10496\":1}}],[\"joins\",{\"1\":{\"10069\":1}}],[\"join\",{\"1\":{\"5212\":1,\"5221\":1,\"5224\":1,\"10041\":1}}],[\"jobs=j\",{\"1\":{\"2592\":2}}],[\"jobs\",{\"1\":{\"1773\":2,\"1791\":2,\"2595\":3,\"2604\":1}}],[\"joda\",{\"1\":{\"1623\":1}}],[\"jetbrains\",{\"1\":{\"8617\":1}}],[\"jetty<\",{\"1\":{\"450\":1}}],[\"jetty\",{\"1\":{\"450\":1}}],[\"jerry\",{\"1\":{\"3237\":1,\"5790\":2,\"5913\":1,\"5970\":1,\"6962\":1,\"7655\":6}}],[\"jedis\",{\"1\":{\"1048\":1,\"1051\":2}}],[\"jedis连接redis服务器是直连模式\",{\"1\":{\"1042\":1}}],[\"junit默认已经被springboot继承了\",{\"1\":{\"650\":1}}],[\"junit\",{\"0\":{\"649\":1,\"1133\":1},\"1\":{\"2256\":2}}],[\"jakarta\",{\"1\":{\"9837\":1}}],[\"jack\",{\"1\":{\"5790\":3,\"5913\":1}}],[\"japan\",{\"1\":{\"4378\":2}}],[\"jar指令来启动\",{\"1\":{\"9530\":1}}],[\"jar也都可以\",{\"1\":{\"9525\":1}}],[\"jar里有的war里也都有\",{\"1\":{\"9522\":1}}],[\"jar为文件扩展名\",{\"1\":{\"9469\":1}}],[\"jar文件内的文件名是unicode文本\",{\"1\":{\"9469\":1}}],[\"jar文件是一种归档文件\",{\"1\":{\"9469\":1}}],[\"jar文件\",{\"1\":{\"9468\":1}}],[\"jar文件中查看对应信息\",{\"1\":{\"867\":1}}],[\"jar了\",{\"1\":{\"8685\":1}}],[\"jar中的class文件时\",{\"1\":{\"7832\":1}}],[\"jar>java>net>inetaddress\",{\"1\":{\"6694\":1}}],[\"jar>java>util>regex>matcher\",{\"1\":{\"2763\":1}}],[\"jar>java>util>regex>pattern\",{\"1\":{\"2708\":1}}],[\"jar>java>util>function\",{\"1\":{\"2628\":1}}],[\"jar>java>util>map\",{\"1\":{\"2572\":1}}],[\"jar>java>util>list\",{\"1\":{\"2522\":1}}],[\"jar>java>util>collections\",{\"1\":{\"2472\":1}}],[\"jar>java>util>scanner\",{\"1\":{\"2317\":1,\"2774\":1}}],[\"jar>java>io>bufferedwriter\",{\"1\":{\"6333\":1}}],[\"jar>java>io>bufferedreader\",{\"1\":{\"6330\":1}}],[\"jar>java>io>bufferedoutputstream\",{\"1\":{\"6327\":1}}],[\"jar>java>io>bufferedinputstream\",{\"1\":{\"6324\":1}}],[\"jar>java>io>outputstreamr\",{\"1\":{\"2066\":1}}],[\"jar>java>io>writer\",{\"1\":{\"2065\":1}}],[\"jar>java>io>reader\",{\"1\":{\"2027\":1}}],[\"jar>java>io>inputstream\",{\"1\":{\"2026\":1}}],[\"jar>java>io>file>file\",{\"1\":{\"1940\":1}}],[\"jar>java>math>bigdecimal\",{\"1\":{\"1871\":1}}],[\"jar>java>math>biginteger\",{\"1\":{\"1865\":1}}],[\"jar>java>lang>reflect>method\",{\"1\":{\"2250\":1}}],[\"jar>java>lang>class\",{\"1\":{\"2128\":1}}],[\"jar>java>lang>number\",{\"1\":{\"1844\":1}}],[\"jar>java>lang>math\",{\"1\":{\"1795\":1}}],[\"jar命令后运行的类\",{\"1\":{\"737\":1}}],[\"jar执行此程序包\",{\"1\":{\"734\":1}}],[\"jarlauncher类执行时会找到start\",{\"1\":{\"738\":1}}],[\"jarlauncher执行该类\",{\"1\":{\"734\":1}}],[\"jarlauncher\",{\"1\":{\"726\":1,\"734\":1}}],[\"jar包与war包的对比\",{\"0\":{\"9521\":1}}],[\"jar包与zip包\",{\"0\":{\"9472\":1}}],[\"jar包和war包使用\",{\"0\":{\"9526\":1}}],[\"jar包和war包\",{\"0\":{\"9518\":1}}],[\"jar包签名\",{\"0\":{\"9478\":1}}],[\"jar包主要是对class文件进行打包\",{\"1\":{\"9475\":1}}],[\"jar包的作用\",{\"0\":{\"9480\":1}}],[\"jar包的内容\",{\"0\":{\"9474\":1}}],[\"jar包的目录结构\",{\"0\":{\"715\":1}}],[\"jar包其实就是class文件的集合\",{\"1\":{\"9471\":1}}],[\"jar包介绍\",{\"0\":{\"9466\":1}}],[\"jar包\",{\"0\":{\"8254\":1,\"9465\":1},\"1\":{\"7824\":1}}],[\"jar包中的类和配置文件由于不会发生变化\",{\"1\":{\"539\":1}}],[\"jar\",{\"1\":{\"697\":2,\"734\":2,\"759\":2,\"770\":2,\"2214\":1,\"7824\":1,\"9473\":3,\"9479\":1,\"9487\":2,\"9503\":2,\"9506\":1}}],[\"jar组成\",{\"1\":{\"694\":1}}],[\"java前端\",{\"0\":{\"10890\":1}}],[\"java单独操作mongodb\",{\"1\":{\"10826\":1}}],[\"java操作\",{\"0\":{\"10824\":1}}],[\"java编译生成的class文件是平台无关的\",{\"1\":{\"9476\":1}}],[\"java文件\",{\"1\":{\"9475\":1}}],[\"java包解析\",{\"0\":{\"9470\":1}}],[\"java归档\",{\"1\":{\"9468\":1}}],[\"java和静态资源变更都会重新部署\",{\"1\":{\"8597\":1}}],[\"java源码目录\",{\"1\":{\"8490\":1}}],[\"java源码中会用到\",{\"1\":{\"3299\":1}}],[\"java代码参考\",{\"0\":{\"8200\":1}}],[\"java代码控制\",{\"1\":{\"1256\":1}}],[\"java与数据库交互涉及到的相关api中的索引都从1开始\",{\"1\":{\"8013\":1}}],[\"java与sql对应数据类型转换表\",{\"0\":{\"7902\":1}}],[\"java类型\",{\"1\":{\"7903\":1}}],[\"java类可以实现多个接口\",{\"1\":{\"4508\":1}}],[\"javax\",{\"1\":{\"7798\":1,\"8242\":1,\"8260\":1,\"8352\":1,\"9269\":1,\"9270\":1}}],[\"java底层语法很多地方用到了optional\",{\"1\":{\"7737\":1}}],[\"java为不同格式的函数提供了不同类型的内置接口\",{\"1\":{\"7401\":1}}],[\"java安装\",{\"0\":{\"7318\":1}}],[\"java8\",{\"1\":{\"7317\":1,\"7544\":1}}],[\"java11\",{\"1\":{\"7316\":1}}],[\"java17\",{\"1\":{\"7315\":1}}],[\"java下载地址\",{\"1\":{\"7310\":1}}],[\"java版本\",{\"0\":{\"7308\":1}}],[\"java版本选择\",{\"0\":{\"2826\":1}}],[\"java不是动态语言\",{\"1\":{\"6928\":1}}],[\"java不支持多重继承\",{\"1\":{\"4476\":1}}],[\"javascript\",{\"1\":{\"6925\":1,\"8401\":1}}],[\"java提供的网络类库\",{\"1\":{\"6641\":1}}],[\"java提供了更强大的线程同步机制\",{\"1\":{\"5378\":1}}],[\"java提供了4种权限修饰符来修饰类及类的内部结构\",{\"1\":{\"3832\":1}}],[\"java提供了默认长度\",{\"1\":{\"3108\":1}}],[\"java对象转json\",{\"0\":{\"9819\":1}}],[\"java对象转为json字符串\",{\"1\":{\"9813\":1}}],[\"java对nio进行了极大的扩展\",{\"1\":{\"6589\":1}}],[\"java对于每一种数据都定义了明确的具体数据类型\",{\"1\":{\"3019\":1}}],[\"java泛型可以保证如果程序在编译时没有发出警告\",{\"1\":{\"5955\":1}}],[\"java引入了\",{\"1\":{\"5947\":1}}],[\"java引用变量有两个类型\",{\"1\":{\"4119\":1}}],[\"java垃圾回收就是一个典型的守护线程\",{\"1\":{\"5153\":1}}],[\"java采用的异常处理机制\",{\"1\":{\"4685\":1}}],[\"java语言的基于套接字编程分为服务端编程和客户端编程\",{\"1\":{\"6786\":1}}],[\"java语言的jvm可以通过java\",{\"1\":{\"5158\":1}}],[\"java语言使用thread类及其子类的对象来表示线程\",{\"1\":{\"5287\":1}}],[\"java语言欠缺属性\",{\"1\":{\"4577\":1}}],[\"java语言表达所操作的boolean值\",{\"1\":{\"3145\":1}}],[\"javabean举例\",{\"0\":{\"4583\":1}}],[\"javabean的种类\",{\"0\":{\"4580\":1}}],[\"javabean是一种java语言写成的可重用组件\",{\"1\":{\"4571\":1}}],[\"javabean\",{\"0\":{\"4570\":1},\"1\":{\"9539\":1,\"9548\":1}}],[\"java开发中\",{\"1\":{\"4507\":1}}],[\"java开发人员使用的\",{\"1\":{\"2847\":1}}],[\"java才是真正的面向对象\",{\"1\":{\"4265\":1}}],[\"java只支持单继承和多层继承\",{\"1\":{\"4016\":1}}],[\"java权限修饰符置于类的成员定义前\",{\"1\":{\"3835\":1}}],[\"java都会认的\",{\"1\":{\"3805\":1}}],[\"java里方法的参数传递方式只有一种\",{\"1\":{\"3778\":1}}],[\"java里的方法不能独立存在\",{\"1\":{\"3715\":1}}],[\"java规定的4种权限修饰符\",{\"1\":{\"3719\":1}}],[\"java内部已经将参数的类型穷举好了\",{\"1\":{\"7426\":1}}],[\"java内部就有很多这样的类\",{\"1\":{\"3975\":1}}],[\"java内置四大核心functional\",{\"0\":{\"7427\":1}}],[\"java内置了丰富的类\",{\"1\":{\"3652\":1}}],[\"java内置类\",{\"1\":{\"3652\":1}}],[\"java内容分类\",{\"0\":{\"2804\":1}}],[\"java是纯面向对象的语言\",{\"1\":{\"7398\":1}}],[\"java是向前兼容的\",{\"1\":{\"7320\":1}}],[\"java是\",{\"1\":{\"6640\":1}}],[\"java是强类型语言\",{\"1\":{\"3464\":1,\"4135\":1}}],[\"java是需要手动分配内存空间\",{\"1\":{\"3107\":1}}],[\"java要怎么分配内存呢\",{\"1\":{\"3108\":1}}],[\"java各整数类型有固定的表数范围和字段长度\",{\"1\":{\"3074\":1}}],[\"java中允许将一个类a声明在另一个类b中\",{\"1\":{\"4302\":1}}],[\"java中没有关联数组\",{\"1\":{\"5534\":1}}],[\"java中没有\",{\"1\":{\"4226\":1}}],[\"java中通过将数据声明为私有的\",{\"1\":{\"3823\":1,\"3828\":1}}],[\"java中的数据存储技术\",{\"0\":{\"7791\":1}}],[\"java中的线程分为两类\",{\"1\":{\"5150\":1}}],[\"java中的万物皆对象\",{\"0\":{\"3612\":1}}],[\"java中的对象\",{\"1\":{\"1730\":1}}],[\"java中必须先为数组分配内存空间\",{\"1\":{\"3478\":1}}],[\"java中不会发生变量覆盖\",{\"1\":{\"3017\":1}}],[\"java中每个变量必须先声明\",{\"1\":{\"3015\":1}}],[\"javadoc是不包括注解的\",{\"1\":{\"5000\":1}}],[\"javadoc\",{\"1\":{\"2981\":1,\"7416\":1}}],[\"javac\",{\"1\":{\"2884\":1,\"2888\":1,\"2916\":1,\"2918\":1,\"7358\":1}}],[\"java执行过程\",{\"0\":{\"2880\":1}}],[\"java可以自动进行垃圾回收\",{\"1\":{\"2825\":1}}],[\"java程序员只需要面向这套接口编程即可\",{\"1\":{\"7809\":1}}],[\"java程序访问数据库时是这样的\",{\"0\":{\"7801\":1,\"7803\":1}}],[\"java程序在执行过程中所发生的异常事件可分为两类\",{\"1\":{\"4666\":1}}],[\"java程序中\",{\"1\":{\"6151\":1}}],[\"java程序中变量通常声明为int型\",{\"1\":{\"3084\":1}}],[\"java程序中的一个file对象\",{\"1\":{\"1941\":1}}],[\"java程序才可在此平台运行\",{\"1\":{\"2821\":1}}],[\"java虚拟机无法解决的严重问题\",{\"1\":{\"4668\":1}}],[\"java虚拟机中没有任何供boolean值专用的字节码指令\",{\"1\":{\"3145\":1}}],[\"java虚拟机机制屏蔽了底层运行平台的差别\",{\"1\":{\"2822\":1}}],[\"java虚拟机\",{\"0\":{\"2818\":1}}],[\"java的动态性让编程的时候更加灵活\",{\"1\":{\"6928\":1}}],[\"java的io流共涉及40多个类\",{\"1\":{\"6168\":1}}],[\"java的调度方法\",{\"0\":{\"5238\":1}}],[\"java的入口是main方法\",{\"1\":{\"5159\":1}}],[\"java的多线程\",{\"0\":{\"5139\":1}}],[\"java的异常处理机制\",{\"0\":{\"4684\":1}}],[\"java的重载是可以包括父类和子类的\",{\"1\":{\"4157\":1}}],[\"java的整型常量默认为\",{\"1\":{\"3084\":1}}],[\"java的核心机制\",{\"0\":{\"2817\":1}}],[\"java的特点\",{\"0\":{\"2812\":1}}],[\"java的string正则表达式是无法表示模式修饰符的\",{\"1\":{\"2716\":1}}],[\"java主要应用方向\",{\"0\":{\"2808\":1}}],[\"java移动版\",{\"1\":{\"2807\":1}}],[\"java企业版\",{\"1\":{\"2806\":1}}],[\"java标准版\",{\"1\":{\"2805\":1}}],[\"java介绍\",{\"0\":{\"2803\":1}}],[\"java正则语法指南\",{\"0\":{\"2672\":1}}],[\"javahome\",{\"1\":{\"2314\":2}}],[\"javaversion\",{\"1\":{\"2314\":2}}],[\"javaee\",{\"1\":{\"1417\":2,\"3208\":2}}],[\"javaee的jsr303规范中给出了具体的数据校验标准\",{\"1\":{\"641\":1}}],[\"java=>\",{\"1\":{\"1415\":1}}],[\"java<\",{\"1\":{\"978\":1,\"1005\":1,\"1142\":1,\"1177\":1,\"1361\":1}}],[\"javaweb中有四大域对象\",{\"1\":{\"9179\":1}}],[\"javaweb核心三件套都可以直接new\",{\"1\":{\"8731\":1}}],[\"javaweb开发中\",{\"1\":{\"8680\":1}}],[\"javaweb就是用java技术来解决相关web互联网领域的技术栈\",{\"1\":{\"8487\":1}}],[\"javaweb项目结构\",{\"0\":{\"8486\":1}}],[\"javaweb项目部署到本地的tomcat服务器上\",{\"1\":{\"530\":1}}],[\"javaweb\",{\"1\":{\"9\":1,\"9314\":1,\"9330\":1}}],[\"java\",{\"0\":{\"4954\":1,\"4958\":1,\"4962\":1,\"6153\":1,\"6580\":1,\"10870\":1},\"1\":{\"7\":1,\"218\":1,\"314\":1,\"655\":1,\"697\":1,\"759\":1,\"770\":1,\"991\":1,\"1083\":1,\"1119\":3,\"1124\":1,\"1172\":2,\"1177\":1,\"1202\":1,\"1415\":1,\"1532\":1,\"1611\":1,\"1612\":1,\"1613\":1,\"1623\":3,\"1625\":1,\"1626\":1,\"1627\":1,\"1628\":1,\"1629\":1,\"1639\":1,\"1642\":1,\"1645\":1,\"1666\":1,\"1667\":1,\"1685\":1,\"1735\":1,\"1736\":1,\"1741\":1,\"1776\":1,\"1795\":1,\"1796\":1,\"1844\":1,\"1867\":3,\"1871\":1,\"1940\":1,\"1946\":2,\"1950\":1,\"2026\":1,\"2027\":1,\"2061\":1,\"2065\":1,\"2066\":1,\"2128\":1,\"2129\":1,\"2156\":1,\"2162\":2,\"2175\":1,\"2211\":1,\"2214\":1,\"2250\":1,\"2272\":1,\"2297\":1,\"2314\":4,\"2317\":1,\"2348\":1,\"2349\":1,\"2395\":1,\"2449\":1,\"2452\":1,\"2472\":1,\"2522\":1,\"2572\":1,\"2663\":1,\"2664\":1,\"2670\":1,\"2671\":2,\"2708\":1,\"2712\":1,\"2763\":1,\"2774\":1,\"2805\":1,\"2806\":1,\"2807\":1,\"2819\":1,\"2837\":1,\"2843\":2,\"2846\":2,\"2850\":1,\"2858\":1,\"2871\":1,\"2873\":1,\"2877\":3,\"2882\":2,\"2883\":2,\"2884\":1,\"2885\":1,\"2888\":1,\"2894\":1,\"2916\":1,\"2918\":3,\"2946\":1,\"2949\":1,\"2954\":2,\"2962\":1,\"2981\":1,\"2994\":1,\"3056\":1,\"3063\":1,\"3087\":1,\"3214\":1,\"3414\":1,\"3876\":1,\"3933\":1,\"3934\":1,\"3935\":1,\"3936\":1,\"3937\":1,\"3938\":1,\"3939\":1,\"3965\":1,\"4141\":1,\"4577\":1,\"4613\":1,\"4621\":1,\"4670\":2,\"4699\":3,\"4705\":1,\"4734\":4,\"4851\":1,\"4878\":1,\"4904\":1,\"4905\":1,\"4909\":1,\"4911\":1,\"4957\":1,\"4961\":1,\"4968\":1,\"4973\":1,\"4984\":1,\"4985\":1,\"5008\":1,\"5060\":7,\"5379\":1,\"5396\":1,\"5437\":1,\"5536\":1,\"5542\":1,\"5558\":1,\"6106\":1,\"6132\":3,\"6136\":2,\"6152\":1,\"6233\":1,\"6238\":1,\"6242\":1,\"6245\":1,\"6309\":1,\"6334\":1,\"6367\":1,\"6581\":1,\"6582\":1,\"6583\":1,\"6594\":3,\"6615\":1,\"6641\":2,\"6874\":1,\"6875\":1,\"6911\":2,\"6917\":3,\"6928\":1,\"6940\":1,\"6941\":1,\"6942\":1,\"6943\":1,\"6949\":3,\"6989\":2,\"7081\":1,\"7092\":1,\"7114\":1,\"7120\":2,\"7123\":2,\"7312\":1,\"7543\":1,\"7732\":1,\"7794\":1,\"7798\":2,\"7809\":1,\"7810\":1,\"7823\":1,\"7824\":1,\"7832\":1,\"7852\":1,\"7882\":1,\"7919\":1,\"7921\":1,\"7923\":1,\"7955\":1,\"7956\":1,\"7970\":1,\"7972\":1,\"8340\":1,\"8347\":1,\"8368\":2,\"8526\":1,\"9270\":1,\"9468\":1,\"9815\":1}}],[\"jdo\",{\"1\":{\"7794\":1,\"7796\":1}}],[\"jdk只有接口\",{\"1\":{\"7838\":1}}],[\"jdk与language\",{\"0\":{\"7327\":1}}],[\"jdk不提供此接口的任何直接实现\",{\"1\":{\"5557\":1}}],[\"jdk中只有jdbc定义的一系列操作数据库的接口\",{\"1\":{\"7816\":1}}],[\"jdk中内置了很多注解\",{\"1\":{\"4899\":1}}],[\"jdk中主要包介绍\",{\"0\":{\"3932\":1}}],[\"jdk7底层结构只有\",{\"1\":{\"5879\":1}}],[\"jdk7中底层实现原理\",{\"0\":{\"5853\":1}}],[\"jdk7中的arraylist的对象的创建类似于单例的饿汉式\",{\"1\":{\"5662\":1}}],[\"jdk7及之前\",{\"1\":{\"5814\":1}}],[\"jdk7和jdk8中通过vector\",{\"1\":{\"5678\":1}}],[\"jdk7\",{\"1\":{\"3367\":1,\"4472\":1,\"5880\":1}}],[\"jdk一共内置了43个函数式接口\",{\"1\":{\"2627\":1}}],[\"jdk11的内容指的是jdk9~jdk11\",{\"1\":{\"7766\":1}}],[\"jdk11\",{\"0\":{\"7764\":1}}],[\"jdk17\",{\"1\":{\"2871\":1}}],[\"jdk1\",{\"1\":{\"2314\":1,\"2858\":1,\"4829\":1,\"4830\":1,\"5024\":1,\"5143\":1,\"5782\":1,\"5944\":1,\"5948\":1,\"5994\":1}}],[\"jdk内置实现\",{\"0\":{\"1755\":1}}],[\"jdk8\",{\"1\":{\"5880\":1}}],[\"jdk8中底层结构\",{\"1\":{\"5879\":1}}],[\"jdk8中的底层实现原理\",{\"0\":{\"5874\":1}}],[\"jdk8中\",{\"0\":{\"5657\":1}}],[\"jdk8中除了定义全局常量和抽象方法之外\",{\"1\":{\"4522\":1}}],[\"jdk8下载地址\",{\"1\":{\"2852\":1}}],[\"jdk8之后新时间api出现的背景\",{\"0\":{\"1615\":1}}],[\"jdk8新增\",{\"1\":{\"630\":1,\"633\":1}}],[\"jdk5\",{\"1\":{\"1552\":1,\"3367\":1,\"4971\":1}}],[\"jdk版本是用来控制模块jdk的版本的\",{\"1\":{\"7328\":1}}],[\"jdk版本\",{\"1\":{\"313\":1}}],[\"jdk\",{\"0\":{\"124\":1,\"133\":1,\"699\":1,\"2772\":1,\"2845\":1,\"2848\":1},\"1\":{\"313\":1,\"734\":2,\"1616\":1,\"2314\":1,\"2846\":1,\"2849\":1,\"2853\":1,\"2858\":1,\"4971\":1,\"5558\":1,\"5607\":1,\"5744\":1,\"5745\":1,\"5814\":1,\"5878\":1,\"6589\":1,\"9881\":1}}],[\"jdbc数据连接池的必要性\",{\"0\":{\"8213\":1}}],[\"jdbc工具类库\",{\"1\":{\"8331\":1}}],[\"jdbc工具类\",{\"0\":{\"8193\":1}}],[\"jdbc控制隔离级别示例\",{\"0\":{\"8161\":1}}],[\"jdbc控制隔离级别\",{\"0\":{\"8149\":1}}],[\"jdbc事务示例\",{\"0\":{\"8144\":1}}],[\"jdbc事务的处理流程\",{\"0\":{\"8139\":1}}],[\"jdbc事务处理方法\",{\"0\":{\"8130\":1}}],[\"jdbc的批量处理相关的方法\",{\"0\":{\"8093\":1}}],[\"jdbc的目标是使java程序员使用jdbc可以连接任何提供了jdbc驱动程序\",{\"1\":{\"7800\":1}}],[\"jdbcutils中\",{\"1\":{\"8323\":1}}],[\"jdbcutils更新\",{\"0\":{\"8038\":1}}],[\"jdbcutils\",{\"0\":{\"8193\":1,\"8322\":1},\"1\":{\"7972\":1,\"7973\":1,\"7980\":2,\"7989\":2,\"8037\":2,\"8045\":2,\"8054\":2,\"8084\":2,\"8089\":2,\"8109\":1,\"8113\":2,\"8121\":2,\"8126\":2,\"8146\":1,\"8148\":2,\"8162\":1,\"8194\":1,\"8201\":4,\"8210\":14,\"8326\":2,\"8337\":1,\"8381\":2,\"8383\":2,\"8385\":2,\"8387\":2,\"8389\":2,\"8391\":2}}],[\"jdbc模块的lib目录\",{\"1\":{\"7827\":1}}],[\"jdbc程序编写步骤\",{\"0\":{\"7811\":1}}],[\"jdbc接口\",{\"1\":{\"7808\":1}}],[\"jdbc体系结构\",{\"0\":{\"7807\":1}}],[\"jdbc为访问不同的数据库提供了一种统一的途径\",{\"1\":{\"7799\":1}}],[\"jdbc介绍\",{\"0\":{\"7797\":1}}],[\"jdbc是java访问数据库的基石\",{\"1\":{\"7796\":1}}],[\"jdbc直接访问数据库\",{\"1\":{\"7793\":1}}],[\"jdbc只用来了解底层\",{\"1\":{\"7784\":1}}],[\"jdbc1\",{\"1\":{\"7049\":2}}],[\"jdbc依赖\",{\"1\":{\"1141\":1}}],[\"jdbcdatesource\",{\"1\":{\"519\":1,\"522\":1,\"590\":2}}],[\"jdbcdatesource类\",{\"1\":{\"518\":1}}],[\"jdbc驱动配置\",{\"1\":{\"516\":1}}],[\"jdbc\",{\"0\":{\"4514\":1},\"1\":{\"10\":1,\"88\":1,\"516\":2,\"600\":1,\"969\":2,\"978\":1,\"981\":2,\"995\":1,\"999\":2,\"1005\":1,\"1008\":2,\"1206\":2,\"1364\":2,\"4515\":1,\"5920\":1,\"5927\":1,\"7049\":1,\"7798\":1,\"7827\":1,\"7844\":1,\"7846\":1,\"7852\":3,\"7854\":1,\"7858\":1,\"7862\":2,\"7865\":2,\"7870\":1,\"7871\":1,\"7873\":1,\"7970\":1,\"7975\":1,\"8242\":1,\"8263\":1,\"8272\":2}}],[\"js+mysql的缝合\",{\"1\":{\"10018\":1}}],[\"jsession\",{\"1\":{\"9774\":1}}],[\"jsessionid=23a23234\",{\"1\":{\"9767\":1}}],[\"js\",{\"1\":{\"1303\":1}}],[\"jstl\",{\"1\":{\"11\":1}}],[\"jsp一般充当mvc模式中的v\",{\"1\":{\"9462\":1}}],[\"jsp仅作了解\",{\"1\":{\"9461\":1}}],[\"jsp时才会被拦截\",{\"1\":{\"9282\":1}}],[\"jsp中取值\",{\"1\":{\"9184\":1}}],[\"jsp中存值\",{\"1\":{\"9184\":1}}],[\"jsp少量javaee规范\",{\"1\":{\"8416\":1}}],[\"jsp\",{\"1\":{\"11\":1,\"8403\":1,\"9184\":1,\"9282\":1,\"9284\":1,\"9286\":2,\"9548\":1,\"9564\":1}}],[\"json格式\",{\"1\":{\"10248\":1}}],[\"json转java对象\",{\"0\":{\"9822\":1}}],[\"json转换\",{\"0\":{\"9809\":1}}],[\"jsonstr\",{\"1\":{\"9821\":1,\"9824\":1}}],[\"json字符串转为java对象\",{\"1\":{\"9812\":1}}],[\"json与java对象的转换\",{\"0\":{\"9814\":1}}],[\"json与java对象\",{\"0\":{\"9810\":1}}],[\"json语法\",{\"0\":{\"9807\":1}}],[\"json数组格式\",{\"1\":{\"1286\":1}}],[\"json对象\",{\"1\":{\"1283\":1}}],[\"json<\",{\"1\":{\"412\":1}}],[\"json\",{\"0\":{\"9806\":1},\"1\":{\"10\":1,\"9815\":3,\"9820\":1,\"9821\":1,\"9823\":1,\"9824\":1,\"9906\":1,\"10077\":1,\"10079\":1,\"10081\":1,\"10242\":1}}],[\"jvm配置\",{\"1\":{\"8661\":1}}],[\"jvm将花费较少的时间来调度线程\",{\"1\":{\"5381\":1}}],[\"jvm会保留注释\",{\"1\":{\"4985\":1}}],[\"jvm不会保留注解\",{\"1\":{\"4984\":1}}],[\"jvm是不能自动的回收的\",{\"1\":{\"4746\":1}}],[\"jvm系统内部错误\",{\"1\":{\"4668\":1}}],[\"jvm的关系\",{\"0\":{\"2848\":1}}],[\"jvm在各个平台都有\",{\"1\":{\"2815\":1}}],[\"jvm\",{\"1\":{\"8\":1,\"2816\":1,\"2819\":1,\"2820\":1,\"2850\":1,\"2877\":1,\"4628\":1,\"6641\":1,\"6976\":1,\"7037\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,kt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(it(t,I[s],n)):e==="search"?self.postMessage(ot(t,I[s],n)):self.postMessage({suggestions:it(t,I[s],n),results:ot(t,I[s],n)})};
//# sourceMappingURL=index.js.map
