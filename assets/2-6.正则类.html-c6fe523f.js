import{_ as a,o as n,c as s,e as p}from"./app-c8f1ef72.js";const t={},e=p(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>正则的语法都是通用的，这里介绍的是正则相关的Java内置API</p></div><h4 id="正则相关的类" tabindex="-1"><a class="header-anchor" href="#正则相关的类" aria-hidden="true">#</a> 正则相关的类</h4><p>Java 正则表达式和 Perl 的是最为相似的。</p><p>java.util.regex 包主要包括以下三个类：</p><ul><li>Pattern 类：pattern 对象是一个正则表达式的编译表示。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法，它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第一个参数。</li><li>Matcher类：Matcher 对象是对输入字符串进行解释和匹配操作的引擎。与Pattern 类一样，Matcher 也没有公共构造方法。你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。</li><li>PatternSyntaxException类：PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。 <ul><li>在JDK中java.util.regex.Pattern类的注释包含了所有Java的正则语法，可以直接查看该类的注释来使用正则语法。</li></ul></li></ul><h4 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h4><p>在 Java 中，<code>\\\\</code> 表示：我要插入一个正则表达式的反斜线，所以其后的字符具有特殊的意义。</p><p>所以，在其他的语言中（如 Perl），一个反斜杠 <code>\\</code>就足以具有转义的作用，而在 Java 中正则表达式中则需要有两个反斜杠才能被解析为其他语言中的转义作用。也可以简单的理解在 Java 的正则表达式中，两个 <code>\\\\</code> 代表其他语言中的一个 <code>\\</code>，这也就是为什么表示一位数字的正则表达式是 <code>\\\\d</code>，而表示一个普通的反斜杠是 <code>\\\\</code>。</p><h4 id="java正则语法指南" tabindex="-1"><a class="header-anchor" href="#java正则语法指南" aria-hidden="true">#</a> Java正则语法指南</h4><p>在JDK中java.util.regex.Pattern类的注释包含了所有Java的正则语法，可以直接查看该类的注释来使用正则语法。</p><ul><li>Pattern：Pattern，专门用来编译正则表达式的，一次编译，多次使用。</li><li>Matcher：对于复杂的表达式需要使用JDK中的Matcher类来处理。 <ul><li>如：反向引用：Matcher.group</li></ul></li><li>模式修饰符：在java中，通过正则字符串不能表示模式修饰符，需要借助Pattern中的flags。</li></ul><h4 id="pattern与matcher的使用" tabindex="-1"><a class="header-anchor" href="#pattern与matcher的使用" aria-hidden="true">#</a> Pattern与Matcher的使用</h4><ul><li>必须首先将指定为字符串的正则表达式编译为此类的实例。</li><li>然后，可以使用生成的模式创建Matcher对象 <ul><li>该对象可以将任意character sequences与正则表达式进行匹配。</li><li>参与执行匹配的所有状态都驻留在匹配器中，因此许多匹配器可以共享相同的模式。</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1.定义正则表达式</span>
<span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">&quot;a*b&quot;</span><span class="token punctuation">;</span> 
<span class="token comment">//2.创建Pattern类的实例：正则模式对象</span>
<span class="token class-name">Pattern</span> p <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span><span class="token constant">CASE_INSENSITIVE</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//3.创建Matcher类的实例：比较器</span>
<span class="token class-name">Matcher</span> m <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">&quot;aaabbb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//4.使用比较器进行匹配：调用某个Matcher实例的方法，获取结果</span>
<span class="token keyword">boolean</span> b <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Pattern本身也可以调用很多正则方法，完成正则匹配。<br> 不过，Matcher类的功能更加丰富。</p></div><h2 id="i-string" tabindex="-1"><a class="header-anchor" href="#i-string" aria-hidden="true">#</a> Ⅰ. String</h2><p>String类里也有很多涉及正则的方法。</p><h4 id="_1-replaceall" tabindex="-1"><a class="header-anchor" href="#_1-replaceall" aria-hidden="true">#</a> 1. replaceAll</h4><p>使用正则全部替换。<br> 使用参数replacement替换所有正则表达式匹配到的字符串部分。</p><ul><li>参数1：正则表达式</li><li>参数2：用来替换匹配到的内容。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token class-name">String</span> regex<span class="token punctuation">,</span> <span class="token class-name">String</span> replacement<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;I 1 am 2 a 3 Batman&quot;</span><span class="token punctuation">;</span> 
<span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">&quot;\\\\d+&quot;</span><span class="token punctuation">;</span> <span class="token comment">//设计正则表达式</span>

<span class="token class-name">String</span> res <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token string">&quot;@&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//进行替换</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//I 1 am 2 a 3 Batman</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//I @ am @ a @ Batman</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-replacefirst" tabindex="-1"><a class="header-anchor" href="#_2-replacefirst" aria-hidden="true">#</a> 2. replaceFirst</h4><p>使用参数replacement替换正则表达式匹配到的第一个字符串部分。</p><ul><li>参数1：正则表达式</li><li>参数2：用来替换正则表达式第一个匹配到的内容</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token function">replaceFirst</span><span class="token punctuation">(</span><span class="token class-name">String</span> regex<span class="token punctuation">,</span> <span class="token class-name">String</span> replacement<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
<span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;I 1 am 2 a 3 Batman&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">&quot;\\\\d+&quot;</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> res <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">replaceFirst</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token string">&quot;@&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//I 1 am 2 a 3 Batman</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//I @ am 2 a 3 Batman,只有第一个数字没替换了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-matches" tabindex="-1"><a class="header-anchor" href="#_3-matches" aria-hidden="true">#</a> 3. matches</h4><p>判断参数字符串是否匹配到了给定的正则表达式。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">String</span> regex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token class-name">String</span>  regex <span class="token operator">=</span> <span class="token string">&quot;a.b&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span>  s1 <span class="token operator">=</span> <span class="token string">&quot;abb&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> res <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-split" tabindex="-1"><a class="header-anchor" href="#_4-split" aria-hidden="true">#</a> 4. split</h4><p>根据给定正则表达式的匹配拆分此字符串。</p><ul><li>可以指定第二个参数：limit，表示切片最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。</li><li>返回值：返回值是个字符串数组，而非字符串，数组的每个元素就是源字符串切后的小字符串。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token class-name">String</span> regex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token class-name">String</span> regex<span class="token punctuation">,</span> <span class="token keyword">int</span> limit<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token string">&quot;I am Bat Van&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s4 <span class="token operator">=</span> s3<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//根据空格分割</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s4<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//am</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-pattern" tabindex="-1"><a class="header-anchor" href="#ii-pattern" aria-hidden="true">#</a> Ⅱ. Pattern</h2><div class="hint-container tip"><p class="hint-container-title">位置</p><p>rt.jar&gt;java&gt;util&gt;regex&gt;Pattern.java [class]</p></div><p>反复使用一个正则表达式字符串进行匹配效率较低，可以把正则表达式字符串编译成Pattern对象，然后反复使用该对象，实现一次编译多次使用。</p><p>pattern (模式器) 与 matcher (匹配器) 搭配使用实现对字符序列的检索和指定模式匹配。</p><h4 id="结构" tabindex="-1"><a class="header-anchor" href="#结构" aria-hidden="true">#</a> 结构</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Pattern</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> pattern<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="构造器" tabindex="-1"><a class="header-anchor" href="#构造器" aria-hidden="true">#</a> 构造器</h4><p>Pattern类的构造器是private，不能通过new创建示例，需要调用静态方法compile返回Pattern实例。</p><h4 id="_1-compile" tabindex="-1"><a class="header-anchor" href="#_1-compile" aria-hidden="true">#</a> 1. compile</h4><p>返回一个Pattern对象，参数是String正则表达式。<br> Java的String正则表达式是无法表示模式修饰符的，可以使用第二个参数flags指明模式修饰符。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Pattern</span> <span class="token function">compile</span><span class="token punctuation">(</span><span class="token class-name">String</span> regex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Pattern</span> <span class="token function">compile</span><span class="token punctuation">(</span><span class="token class-name">String</span> regex<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
<span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">&quot;\\\\d&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-flags" tabindex="-1"><a class="header-anchor" href="#_2-flags" aria-hidden="true">#</a> 2. flags</h4><p>falgs表示模式Pattern对象的模式修饰符，在创建Pattern对象的时候，可以指定。</p><ul><li>CASE_INSENSITIVE：忽略大小写 <ul><li>也可以通过表达式添加(?i)来启用。</li></ul></li><li>MULTILINE：开启多行模式(?m)； <ul><li>此时每行都能单独匹配^或<code>$</code>。</li><li>不开多行模式的话整个字符串会被视作一行（加\\n也没用）。</li></ul></li><li>DOTALL：开启dotAll模式(?s)； <ul><li>此时字符.可以匹配一切字符，包括换行符。</li></ul></li><li>UNICODE_CASE：支持Unicode的忽略大小写 <ul><li>与CASE_INSENSITIVE的不同，未知。</li></ul></li><li>CANON_EQ：使规范等价 <ul><li>用法：未知</li></ul></li><li>UNIX_LINES：Unix行模式 <ul><li>在此模式中，只有&#39;\\n&#39;行结束符在.^和<code>$</code>的行为中被识别</li></ul></li><li>LITERAL：启用文字解析 <ul><li>表达式中的所有元字符转义字符将不具备特殊含义。</li></ul></li><li>UNICODE_CHARACTER_CLASS：启用Unicode版本的预定义字符类和POSIX字符类。 <ul><li>用法未知</li></ul></li><li>COMMENTS：允许在表达式中使用空格和注释 <ul><li>空格将被忽略，并且以#开头的注释也会被忽略。</li></ul></li></ul><p><strong>flags()</strong></p><p>flags方法：返回此模式的匹配标志</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">flags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-matcher" tabindex="-1"><a class="header-anchor" href="#_3-matcher" aria-hidden="true">#</a> 3. matcher</h4><p>获取Matcher类的实例。</p><p>Matcher类的构造方法也是私有的,不能随意创建,只能通过Pattern.matcher(CharSequence input)方法得到该类的实例。Pattern类只能做一些简单的匹配操作,要想得到更强更便捷的正则匹配操作,那就需要将Pattern与Matcher一起合作。</p><p>Matcher类提供了对正则表达式的分组支持,以及对正则表达式的多次匹配支持。</p><p>该方法的参数是：待匹配的CharSequence（string）。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Matcher</span> <span class="token function">matcher</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">&quot;\\\\d{4,}&quot;</span><span class="token punctuation">;</span> <span class="token comment">//定义String正则表达式</span>
<span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;1223&quot;</span><span class="token punctuation">;</span><span class="token comment">//待匹配的字符串</span>

<span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建模式器</span>
<span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建比较器</span>
<span class="token keyword">boolean</span> res <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用比较器的某个方法进行正则匹配</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true,获取匹配的结果</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-pattern" tabindex="-1"><a class="header-anchor" href="#_4-pattern" aria-hidden="true">#</a> 4. pattern</h4><p>返回该模式器的String类型的正则表达式。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token function">pattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
<span class="token class-name">Pattern</span> p <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\d{4,}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> regex <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">pattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\\d{4,}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-matches" tabindex="-1"><a class="header-anchor" href="#_5-matches" aria-hidden="true">#</a> 5. matches</h4><p>精准匹配：判断参数字符串是否匹配到了Pattern实例指定的正则表达式。</p><ul><li>参数1：regex，正则表达式；</li><li>参数2：input，要匹配的字符序列</li><li>返回值：Boolean，正则表达式是否与字符序列匹配</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> matches​<span class="token punctuation">(</span><span class="token class-name">String</span> regex<span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">&quot;\\\\d{4,}&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;1223&quot;</span><span class="token punctuation">;</span>

<span class="token class-name">Pattern</span> p <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建Pattern对象</span>
<span class="token keyword">boolean</span> res <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注意：这里还是需要指定正则表达式</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-split" tabindex="-1"><a class="header-anchor" href="#_6-split" aria-hidden="true">#</a> 6. split</h4><ul><li>参数1：input，要拆分的字符序列；</li><li>参数2：limit，可选，拆分的数目，表示切片最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split​<span class="token punctuation">(</span><span class="token class-name">CharSequence</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
<span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;1223&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">Pattern</span> p <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;a,b,c,d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[a, b, c, d]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iii-matcher" tabindex="-1"><a class="header-anchor" href="#iii-matcher" aria-hidden="true">#</a> Ⅲ. Matcher</h2><div class="hint-container tip"><p class="hint-container-title">位置</p><p>rt.jar&gt;java&gt;util&gt;regex&gt;Matcher.java 【class】</p></div><h4 id="结构-1" tabindex="-1"><a class="header-anchor" href="#结构-1" aria-hidden="true">#</a> 结构</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Matcher</span> <span class="token keyword">implements</span> <span class="token class-name">MatchResult</span><span class="token punctuation">{</span>
    <span class="token class-name">Pattern</span> parentPattern<span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> groups<span class="token punctuation">;</span>
    <span class="token keyword">int</span> from<span class="token punctuation">,</span><span class="token keyword">to</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实例化" tabindex="-1"><a class="header-anchor" href="#实例化" aria-hidden="true">#</a> 实例化</h4><ul><li>Matcher类的构造方法是私有的,不能随意创建,只能通过Pattern.matcher(CharSequence input)方法得到该类的实例。</li><li>对照Matcher构造器源码，可知构造器将Pattern对象的引用赋于Matcher中变量parentPattern，目标字符串赋于变量text；并创建了数组groups和locals 。</li><li>数组groups是组使用的存储。存储的是当前匹配的各捕获组的first和last信息。-</li></ul><h4 id="matcher的状态" tabindex="-1"><a class="header-anchor" href="#matcher的状态" aria-hidden="true">#</a> Matcher的状态</h4><p>Matcher对象是一个状态机器，在创建Matcher对象后，Matcher会初始化很多匹配的状态信息，这些信息都是私有的，没法直接获取。<br> 对于非完全匹配（精准匹配），这些信息是很有用的。</p>`,73),o=[e];function c(l,r){return n(),s("div",null,o)}const u=a(t,[["render",c],["__file","2-6.正则类.html.vue"]]);export{u as default};
