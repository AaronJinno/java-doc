import{_ as n,o as s,c as a,e as t}from"./app-9c74391d.js";const e="/java-doc/img/java/javaweb/1-3-1.jpg",p="/java-doc/img/java/javaweb/1-3-2.jpg",c="/java-doc/img/java/javaweb/1-3-3.jpg",o="/java-doc/img/java/javaweb/1-3-4.jpg",l={},i=t('<h2 id="i-操作和访问数据库" tabindex="-1"><a class="header-anchor" href="#i-操作和访问数据库" aria-hidden="true">#</a> Ⅰ. 操作和访问数据库</h2><h4 id="_1-说明" tabindex="-1"><a class="header-anchor" href="#_1-说明" aria-hidden="true">#</a> 1. 说明</h4><p>数据库连接被用于向数据库服务器发送命令和 SQL 语句，并接受数据库服务器返回的结果。其实一个数据库连接就是一个Socket连接。</p><h4 id="_2-对数据库的调用方式" tabindex="-1"><a class="header-anchor" href="#_2-对数据库的调用方式" aria-hidden="true">#</a> 2. 对数据库的调用方式</h4><p>在 java.sql 包中有 3 个接口分别定义了对数据库的调用的不同方式：</p><ul><li>Statement：用于执行静态 SQL 语句并返回它所生成结果的对象。</li><li>PrepatedStatement：SQL 语句被预编译并存储在此对象中，可以使用此对象多次高效地执行该语句。</li><li>CallableStatement：用于执行 SQL 存储过程【框架中用的，暂不关注】</li></ul><figure><img src="'+e+`" alt="1-3-1" tabindex="0" loading="lazy"><figcaption>1-3-1</figcaption></figure><h4 id="_3-statement的弊端" tabindex="-1"><a class="header-anchor" href="#_3-statement的弊端" aria-hidden="true">#</a> 3. statement的弊端</h4><h5 id="_3-1-问题一-存在拼串操作-繁琐" tabindex="-1"><a class="header-anchor" href="#_3-1-问题一-存在拼串操作-繁琐" aria-hidden="true">#</a> 3.1 问题一：存在拼串操作，繁琐</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> userName <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span> <span class="token comment">//获取用户名</span>
<span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span> <span class="token comment">//获取用户密码</span>
<span class="token comment">//进行SQL语句的拼接：非常繁琐，且不易阅读</span>
<span class="token class-name">String</span> sql <span class="token operator">=</span> &quot;<span class="token class-name">SELECT</span> user<span class="token punctuation">,</span>password <span class="token constant">FROM</span> user_table <span class="token class-name">WHERE</span> <span class="token constant">USER</span> <span class="token operator">=</span> 
             &#39;<span class="token string">&quot; + userName + &quot;</span>&#39; <span class="token class-name">AND</span> <span class="token constant">PASSWORD</span> <span class="token operator">=</span> &#39;&quot; <span class="token operator">+</span> password
<span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//执行SQL</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-2-问题二-存在sql注入问题" tabindex="-1"><a class="header-anchor" href="#_3-2-问题二-存在sql注入问题" aria-hidden="true">#</a> 3.2 问题二：存在SQL注入问题</h5><p>SQL 注入是利用某些系统没有对用户输入的数据进行充分的检查，而在用户输入数据中注入非法的 SQL 语句段或命令从而利用系统的 SQL 引擎完成恶意行为的做法。</p><p>如下：通过填写用户名：<code>&#39;1&#39; or &#39;</code> ，密码：<code>=1 or &#39;1&#39; = &#39;1</code> 进行SQL注入</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">SELECT</span> user<span class="token punctuation">,</span>password <span class="token constant">FROM</span> user_table <span class="token class-name">WHERE</span> <span class="token constant">USER</span> <span class="token operator">=</span> <span class="token char">&#39;1&#39;</span> 
or  &#39; <span class="token class-name">AND</span> <span class="token constant">PASSWORD</span> <span class="token operator">=</span> <span class="token char">&#39;=&#39;</span><span class="token number">1</span><span class="token char">&#39; or &#39;</span><span class="token number">1</span><span class="token char">&#39; = &#39;</span><span class="token number">1</span>&#39;<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-开发中访问数据库的方式选择" tabindex="-1"><a class="header-anchor" href="#_4-开发中访问数据库的方式选择" aria-hidden="true">#</a> 4. 开发中访问数据库的方式选择</h4><p>PreptredStatement是Statemet你的子接口，更安全和高效，开发中选择它。</p><figure><img src="`+p+`" alt="1-3-2" tabindex="0" loading="lazy"><figcaption>1-3-2</figcaption></figure><h4 id="_5-preparedstatement的优点" tabindex="-1"><a class="header-anchor" href="#_5-preparedstatement的优点" aria-hidden="true">#</a> 5. PreparedStatement的优点</h4><ul><li>解决了Statement的拼串问题</li><li>解决了SQL注入问题</li><li>可以操作Blob数据</li><li>可以实现高效的批量操作（只需要预编译的时候校验一次SQL语句）</li></ul><h4 id="_6-java与sql对应数据类型转换表" tabindex="-1"><a class="header-anchor" href="#_6-java与sql对应数据类型转换表" aria-hidden="true">#</a> 6. Java与SQL对应数据类型转换表</h4><table><thead><tr><th style="text-align:left;">Java类型</th><th style="text-align:left;">SQL类型</th></tr></thead><tbody><tr><td style="text-align:left;">boolean</td><td style="text-align:left;">BIT</td></tr><tr><td style="text-align:left;">byte</td><td style="text-align:left;">TINYINT</td></tr><tr><td style="text-align:left;">short</td><td style="text-align:left;">SMALLINT</td></tr><tr><td style="text-align:left;">int</td><td style="text-align:left;">INTEGER</td></tr><tr><td style="text-align:left;">long</td><td style="text-align:left;">BIGINT</td></tr><tr><td style="text-align:left;">String</td><td style="text-align:left;">CHAR,VARCHAR,LONGVARCHAR</td></tr><tr><td style="text-align:left;">byte array</td><td style="text-align:left;">BINARY , VAR BINARY</td></tr><tr><td style="text-align:left;">java.sql.Date</td><td style="text-align:left;">DATE</td></tr><tr><td style="text-align:left;">java.sql.Time</td><td style="text-align:left;">TIME</td></tr><tr><td style="text-align:left;">java.sql.Timestamp</td><td style="text-align:left;">TIMESTAMP</td></tr></tbody></table><h2 id="ii-preparedstatement" tabindex="-1"><a class="header-anchor" href="#ii-preparedstatement" aria-hidden="true">#</a> Ⅱ. PreparedStatement</h2><h4 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1. 简介</h4><p>可以通过调用 Connection 对象的 preparedStatement(String sql)方法获取 PreparedStatement 对象</p><h4 id="_2-preparedstatement-与-statement" tabindex="-1"><a class="header-anchor" href="#_2-preparedstatement-与-statement" aria-hidden="true">#</a> 2. PreparedStatement 与 Statement</h4><p>PreparedStatement 接口是 Statement 的子接口，它表示一条预编译过的 SQL 语句</p><h4 id="_3-preparedstatement的操作步骤" tabindex="-1"><a class="header-anchor" href="#_3-preparedstatement的操作步骤" aria-hidden="true">#</a> 3. PreparedStatement的操作步骤</h4><ul><li>获取数据库连接对象 <ul><li>①读取配置文件中的数据库连接信息</li><li>②加载驱动</li><li>③获取链接</li></ul></li><li>编写SQL语句 <ul><li>④拼接预编译SQL字符串，带占位符“？”，并返回PrepareStatemet对象</li><li>⑤填充占位符</li></ul></li><li>⑥执行操作 <ul><li>execute：DML操作</li><li>executeQuery：DQL操作</li></ul></li><li>⑦关闭资源： <ul><li>close：关闭PreparedStatement资源</li><li>close：关闭连接资源</li></ul></li></ul><h4 id="_4-创建preparedstatement对象" tabindex="-1"><a class="header-anchor" href="#_4-创建preparedstatement对象" aria-hidden="true">#</a> 4. 创建PreparedStatement对象</h4><p>可以通过调用 Connection 对象的 preparedStatement(String sql)方法获取 PreparedStatement 对象</p><p>获取Connection对象-&gt;预编译sql字符串-&gt;调用 preparedStatement(String sql) = PreparedStatement对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">PrepareStatement</span> <span class="token class-name">Connection</span><span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//读取配置文件中的数据库连接信息，加载驱动</span>
<span class="token comment">//1.获取Connection对象：数据库连接对象</span>
<span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//2.编写预编译sql字符串</span>
<span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;insert into customers(name,email,birth)values(?,?,?)&quot;</span><span class="token punctuation">;</span>

<span class="token comment">//3.Connection对象调用preparedStatement方法执行预编译SQL获取PreparedStatemet对象</span>
<span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-预编译sql语句与占位符" tabindex="-1"><a class="header-anchor" href="#_5-预编译sql语句与占位符" aria-hidden="true">#</a> 5. 预编译SQL语句与占位符</h4><h5 id="_5-1-预编译sql语句" tabindex="-1"><a class="header-anchor" href="#_5-1-预编译sql语句" aria-hidden="true">#</a> 5.1 预编译SQL语句</h5><p>PreparedStatement 对象所代表的 SQL 语句中的参数用问号(?)来表示</p><p>setXxx（Xxx是数据类型）：PreparedStatement 对象的 setXxx() 方法来设置这些参数. setXxx() 方法有两个参数，第一个参数是要设置的 SQL 语句中的参数的索引(从 1 开始)，第二个是设置的 SQL 语句中的参数的值。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1.预编译字符串示例</span>
<span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;insert into customers(name,age,birth)values(?,?,?)&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//2.获取PreparedStatement对象</span>
<span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-2-填充占位符" tabindex="-1"><a class="header-anchor" href="#_5-2-填充占位符" aria-hidden="true">#</a> 5.2 填充占位符</h5><p>setXxx（Xxx是数据类型）：PreparedStatement 对象的 setXxx() 方法来设置这些参数. setXxx() 方法有两个参数，第一个参数是要设置的 SQL 语句中的参数的索引(从 1 开始)，第二个是设置的 SQL 语句中的参数的值。</p><p>该方法会抛出：java.sql.SQLException异常</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token class-name">PreparedStatement</span><span class="token punctuation">.</span><span class="token function">setXxx</span><span class="token punctuation">(</span><span class="token keyword">int</span> paramenterIndex<span class="token punctuation">,</span><span class="token class-name">Xxx</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token comment">//调用 setXxx方法填充上述占位符</span>
ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;Jinno&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Date</span> date <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;1000-01-01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ps<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token keyword">new</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//要填SQL中的Date对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-execute-执行dml操作" tabindex="-1"><a class="header-anchor" href="#_6-execute-执行dml操作" aria-hidden="true">#</a> 6. execute：执行DML操作</h4><p>执行PreparedStatement对象包含的所有任意SQL语句。</p><p>该操作会抛出：SQLException异常</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token class-name">PreparedStatement</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>指针 <ul><li>execute是可以执行多条预编译SQL语句的，返回值返回的是第一条语句的处理结果。</li><li>需要调用方法 getResultSet 或 getUpdateCount 来检索结果，调用 getMoreResults 才能移动到任何后续结果</li></ul></li><li>返回值 <ul><li>如果第一个结果是 ResultSet 对象，则返回 true；</li><li>如果第一个结果是更新计数或没有结果，则返回 false</li></ul></li></ul><h2 id="iii-dml" tabindex="-1"><a class="header-anchor" href="#iii-dml" aria-hidden="true">#</a> Ⅲ. DML</h2><p>PreparedStatement的DML操作</p><h4 id="_1-添加-代码示例" tabindex="-1"><a class="header-anchor" href="#_1-添加-代码示例" aria-hidden="true">#</a> 1. 添加：代码示例</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1.读取配置文件中的4个基本信息</span>
        <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Properties</span> pros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pros<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> user <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> password <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> url <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> driverClass <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;driverClass&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 2.加载驱动</span>
        <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driverClass<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 3.获取连接</span>
        conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//4.预编译sql语句，返回PreparedStatement的实例</span>
        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;insert into customers(name,email,birth)values(?,?,?)&quot;</span><span class="token punctuation">;</span>
        ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">//5.填充占位符</span>
        ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;哪吒&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;nezha@gmail.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Date</span> date <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;1000-01-01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ps<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//6.执行操作</span>
        ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>
        <span class="token comment">//7.资源的关闭</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>ps <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                ps<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>conn <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-封装数据库连接的获取和资源的关闭" tabindex="-1"><a class="header-anchor" href="#_2-封装数据库连接的获取和资源的关闭" aria-hidden="true">#</a> 2. 封装数据库连接的获取和资源的关闭</h4><ul><li>文件：src/util/JDBCUtils.java</li><li>类：JDBCUtils</li></ul><h5 id="_2-1-获取数据库连接" tabindex="-1"><a class="header-anchor" href="#_2-1-获取数据库连接" aria-hidden="true">#</a> 2.1 获取数据库连接</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1.读取配置文件中的4个基本信息</span>
    <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Properties</span> pros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pros<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> user <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> password <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> url <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> driverClass <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;driverClass&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2.加载驱动</span>
    <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driverClass<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 3.获取连接</span>
    <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> conn<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-2-关闭连接和statement的操作" tabindex="-1"><a class="header-anchor" href="#_2-2-关闭连接和statement的操作" aria-hidden="true">#</a> 2.2 关闭连接和Statement的操作</h5><p>PropertyStatement是Statement的子类。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">closeResource</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> conn<span class="token punctuation">,</span><span class="token class-name">Statement</span> ps<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>ps <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        ps<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>conn <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-使用封装好的工具-更新操作示例" tabindex="-1"><a class="header-anchor" href="#_3-使用封装好的工具-更新操作示例" aria-hidden="true">#</a> 3. 使用封装好的工具：更新操作示例</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token comment">//1.获取数据库的连接</span>
      conn <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
      <span class="token comment">//2.预编译sql语句，返回PreparedStatement的实例</span>
      <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;update customers set name = ? where id = ?&quot;</span><span class="token punctuation">;</span>
      ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
      
      <span class="token comment">//3.填充占位符</span>
      ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;莫扎特&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
      <span class="token comment">//4.执行</span>
      ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>
      <span class="token comment">//5.资源的关闭</span>
      <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> ps<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-封装通用的增删改操作" tabindex="-1"><a class="header-anchor" href="#_4-封装通用的增删改操作" aria-hidden="true">#</a> 4. 封装通用的增删改操作</h4><p>对于DML来说，除了SQL语句外，其他的步骤都是相通的。</p><h5 id="_4-1-功能设计" tabindex="-1"><a class="header-anchor" href="#_4-1-功能设计" aria-hidden="true">#</a> 4.1 功能设计</h5><p>DML操作的变量是SQL预编译语句，和给占位符赋的值，因此我们可以将SQL预编译语句和占位符作为形参，让用户传输，然后将所有操作封装。</p><h5 id="_4-2-参数设计" tabindex="-1"><a class="header-anchor" href="#_4-2-参数设计" aria-hidden="true">#</a> 4.2 参数设计</h5><p>SQL的预编译语句，作为方法的第一个参数。SQL的占位符数量和类型都是不确定的，因此可以设计成Object类型的 可变形参。</p><p>使用的时候注意：sql中占位符的个数与可变形参的长度应该相同！</p><h5 id="_4-3-源码" tabindex="-1"><a class="header-anchor" href="#_4-3-源码" aria-hidden="true">#</a> 4.3 源码</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span><span class="token class-name">Object</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token comment">//1.获取数据库的连接</span>
      conn <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">//2.预编译sql语句，返回PreparedStatement的实例</span>
      ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">//3.填充占位符</span>
      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//小心参数声明错误！！</span>
      <span class="token punctuation">}</span>
      <span class="token comment">//4.执行</span>
      ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>
      <span class="token comment">//5.资源的关闭</span>
      <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> ps<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-4-使用示例" tabindex="-1"><a class="header-anchor" href="#_4-4-使用示例" aria-hidden="true">#</a> 4.4 使用示例</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1.示例1：删除某表中的1个数据</span>
<span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;delete from customers where id = ?&quot;</span><span class="token punctuation">;</span>
<span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>

<span class="token comment">//2.示例2：更新某表中的一个数据</span>
<span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;update \`order\` set order_name = ? where order_id = ?&quot;</span><span class="token punctuation">;</span>
<span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token string">&quot;DD&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iv-dql" tabindex="-1"><a class="header-anchor" href="#iv-dql" aria-hidden="true">#</a> Ⅳ. DQL</h2><p>PreparedStatement的DQL操作。</p><h4 id="_1-dql的操作步骤" tabindex="-1"><a class="header-anchor" href="#_1-dql的操作步骤" aria-hidden="true">#</a> 1. DQL的操作步骤</h4><p>基本步骤与DML一致，只是DQL执行查询的方法是executeQuery()，而不是execute()。</p><p>查询操作比较复杂一点，需要对查询的结果进行处理。</p><h4 id="_2-resultset对象" tabindex="-1"><a class="header-anchor" href="#_2-resultset对象" aria-hidden="true">#</a> 2. ResultSet对象</h4><h5 id="_2-1-获取" tabindex="-1"><a class="header-anchor" href="#_2-1-获取" aria-hidden="true">#</a> 2.1 获取</h5><p>调用PreparedStatement 的 executeQuery() 方法，查询结果是一个ResultSet 对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ResultSet</span> <span class="token class-name">PreparedStatement</span><span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-2-resultset介绍" tabindex="-1"><a class="header-anchor" href="#_2-2-resultset介绍" aria-hidden="true">#</a> 2.2 ResultSet介绍</h5><p>ResultSet 对象以逻辑表格的形式封装了执行数据库操作的结果集。ResultSet 返回的实际上就是一张数据表。</p><h5 id="_2-3-指针" tabindex="-1"><a class="header-anchor" href="#_2-3-指针" aria-hidden="true">#</a> 2.3 指针</h5><p>ResultSet 对象维护了一个指向当前数据行的指针，指针指向数据表的第一条记录的前面。可以通过 ResultSet 对象的 next() 方法移动到下一行。调用 next()方法检测下一行是否有效。若有效，该方法返回 true，且指针下移，并返回该行的数据。</p><p>当指针指向一行时, 可以通过调用 getXxx(int index) 或 getXxx(int columnName) 获取每一列的值。</p><h4 id="_3-resultset接口的方法" tabindex="-1"><a class="header-anchor" href="#_3-resultset接口的方法" aria-hidden="true">#</a> 3. ResultSet接口的方法</h4><h5 id="_3-1-next-移动指针" tabindex="-1"><a class="header-anchor" href="#_3-1-next-移动指针" aria-hidden="true">#</a> 3.1 next：移动指针</h5><p>判断下一行有没有数据，没有就返回false，有就移动指针到下一行。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token class-name">ResultSet</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-getxxx-获取指针所在行的数据" tabindex="-1"><a class="header-anchor" href="#_3-2-getxxx-获取指针所在行的数据" aria-hidden="true">#</a> 3.2 getXxx：获取指针所在行的数据</h5><ul><li>参数：列的label或索引 <ul><li>列的label，列名，推荐这种，更灵活安全，意义明显。</li><li>列的索引，Java与数据库交互涉及到的相关API中的索引都从1开始。</li></ul></li><li>返回值：返回该列的值</li><li>数据类型：Xxx代表数据类型，用来获取不同类型的值</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Xxx</span> <span class="token class-name">ResultSet</span><span class="token punctuation">.</span><span class="token function">getXxx</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-resultsetmetadate对象" tabindex="-1"><a class="header-anchor" href="#_4-resultsetmetadate对象" aria-hidden="true">#</a> 4. ResultSetMetaDate对象</h4><p>用于获取关于 ResultSet 对象中列的类型和属性信息的对象，也就是用于获取结果集的源数据。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ResultSetMetaDate</span> <span class="token class-name">ResultSet</span><span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_5-resultsetmetadate对象的常用方法" tabindex="-1"><a class="header-anchor" href="#_5-resultsetmetadate对象的常用方法" aria-hidden="true">#</a> 5. ResultSetMetaDate对象的常用方法</h4><ul><li>getColumnName(int column)：获取指定列的名称</li><li>getColumnLabel(int column)：获取指定列的别名</li><li>getColumnCount()：返回当前 ResultSet 对象中的列数。</li><li>getColumnTypeName(int column)：检索指定列的数据库特定的类型名称。</li><li>getColumnDisplaySize(int column)：指示指定列的最大标准宽度，以字符为单位。</li><li>isNullable(int column)：指示指定列中的值是否可以为 null。</li><li>isAutoIncrement(int column)：指示是否自动为指定列进行编号，这样这些列仍然是只读的。</li></ul><h4 id="_6-orm编程思想-object-relational-mapping" tabindex="-1"><a class="header-anchor" href="#_6-orm编程思想-object-relational-mapping" aria-hidden="true">#</a> 6. ORM编程思想：object relational mapping</h4><p>一个数据表对应一个java类，表中的一条记录对应java类的一个对象，表中的一个字段对应java类的一个属性。</p><h4 id="_7-图解查询操作的流程" tabindex="-1"><a class="header-anchor" href="#_7-图解查询操作的流程" aria-hidden="true">#</a> 7. 图解查询操作的流程</h4><figure><img src="`+c+'" alt="1-3-3" tabindex="0" loading="lazy"><figcaption>1-3-3</figcaption></figure><figure><img src="'+o+`" alt="1-3-4" tabindex="0" loading="lazy"><figcaption>1-3-4</figcaption></figure><h2 id="v-查询示例" tabindex="-1"><a class="header-anchor" href="#v-查询示例" aria-hidden="true">#</a> Ⅴ. 查询示例</h2><p>PreparedStatement的DQL查询示例。</p><h4 id="_1-基本查询示例-查询custom表中的数据" tabindex="-1"><a class="header-anchor" href="#_1-基本查询示例-查询custom表中的数据" aria-hidden="true">#</a> 1. 基本查询示例：查询custom表中的数据</h4><p>这里用到了上章定义的JDBCUtils，并使用了ORM对象来处理查询的数据</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQuery1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token comment">//1.获取连接对象  </span>
      conn <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
      <span class="token comment">//2.获取PreparedStatement对象并给占位符赋值</span>
      <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;select id,name,email,birth from customers where id = ?&quot;</span><span class="token punctuation">;</span>
      ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
      ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
      <span class="token comment">//3.执行查询,并返回结果集</span>
      resultSet <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
      <span class="token comment">//4.处理结果集</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//4.1 获取当前这条数据的各个字段值</span>
        <span class="token keyword">int</span> id <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> name <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> email <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Date</span> birth <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">//4.2将数据封装为一个对象（推荐）</span>
        <span class="token class-name">Customer</span> customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> birth<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>  
       <span class="token punctuation">}</span>
   <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>
      <span class="token comment">//5. 关闭资源</span>
      <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> ps<span class="token punctuation">,</span> resultSet<span class="token punctuation">)</span><span class="token punctuation">;</span>  
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-1-jdbcutils更新" tabindex="-1"><a class="header-anchor" href="#_1-1-jdbcutils更新" aria-hidden="true">#</a> 1.1 JDBCUtils更新</h5><p>上章封装的JDBCUtils工具中的关闭资源方法，只关闭了两个资源，而DQL操作需要额外关闭一个resultSet资源</p><h5 id="_1-2-custom对象" tabindex="-1"><a class="header-anchor" href="#_1-2-custom对象" aria-hidden="true">#</a> 1.2 Custom对象</h5><p>根据ORM编程思想，需要创建一个Customer类（与数据表同名）来储存查询到的数据。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Date</span> birth<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> email<span class="token punctuation">,</span> <span class="token class-name">Date</span> birth<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>birth <span class="token operator">=</span> birth<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-封装-针对custom表的通用查询操作" tabindex="-1"><a class="header-anchor" href="#_2-封装-针对custom表的通用查询操作" aria-hidden="true">#</a> 2. 封装：针对custom表的通用查询操作</h4><p>该操作仅支持Custom表，且只能查询一行数据</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Customer</span> <span class="token function">queryForCustomers</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token comment">//1.获取连接对象  </span>
      conn <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
      <span class="token comment">//2.获取PreparedStatement对象,并给占位符赋值</span>
      ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      
      <span class="token comment">//3.执行查询,并返回结果集</span>
      rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">//3.1 获取结果集的元数据 :ResultSetMetaData</span>
      <span class="token class-name">ResultSetMetaData</span> rsmd <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">//3.2 通过ResultSetMetaData获取结果集中的列数</span>
      <span class="token keyword">int</span> columnCount <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
      <span class="token comment">//4.循环获取结果集中每列的数据</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Customer</span> cust <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//4.1 处理结果集一行数据中的每一个列</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span>columnCount<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token comment">//4.2 获取列值</span>
          <span class="token class-name">Object</span> columValue <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">//4.3 获取每个列的列名</span>
          <span class="token class-name">String</span> columnLabel <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">getColumnLabel</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          
          <span class="token comment">//4.4 给cust对象指定的columnName属性，赋值为columValue：通过反射</span>
          <span class="token class-name">Field</span> field <span class="token operator">=</span> <span class="token class-name">Customer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>columnLabel<span class="token punctuation">)</span><span class="token punctuation">;</span>
          field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>cust<span class="token punctuation">,</span> columValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//5. 返回结果集</span>
        <span class="token keyword">return</span> cust<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>
      <span class="token comment">//6.关闭资源  </span>
      <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> ps<span class="token punctuation">,</span> rs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-1-使用示例" tabindex="-1"><a class="header-anchor" href="#_2-1-使用示例" aria-hidden="true">#</a> 2.1 使用示例</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;select id,name,birth,email from customers where id = ?&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">Customer</span> customer <span class="token operator">=</span> <span class="token function">queryForCustomers</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>

sql <span class="token operator">=</span> <span class="token string">&quot;select name,email from customers where name = ?&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">Customer</span> customer1 <span class="token operator">=</span> <span class="token function">queryForCustomers</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token string">&quot;周杰伦&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customer1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-2-列的别名" tabindex="-1"><a class="header-anchor" href="#_2-2-列的别名" aria-hidden="true">#</a> 2.2 列的别名</h5><p>问题：数据表中，列的名字和储存数据的对象中属性的名字是一一对应的，但是未必完全一样，比如：数据库中是用下划线分隔单词的，而Java中是驼峰分隔单词的。这时使用列名作为类的属性名就会报错（找不到该属性）。</p><p>解决方案：SQL语句中给列起别名，别名 = 数据类的属性名，然后把获取列名的方法改成获取列的别名的方法。 getColumnLabel代替 getColumnName.</p><p>补充：当列没有别名时，就默认把列名当成别名，所以不用担心没有起别名。</p><h4 id="_3-通用查询操作封装-针对不同表" tabindex="-1"><a class="header-anchor" href="#_3-通用查询操作封装-针对不同表" aria-hidden="true">#</a> 3. 通用查询操作封装：针对不同表</h4><p>针对于不同的表的通用的查询操作，可返回表中的多条记录</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">,</span> <span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">//1.获取连接对象</span>
        conn <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//2.获取PreparedStatement对象,并给占位符赋值</span>
        ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//3.执行查询,并返回结果集</span>
        rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//3.1获取结果集的元数据 :ResultSetMetaData</span>
        <span class="token class-name">ResultSetMetaData</span> rsmd <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//3.2通过ResultSetMetaData获取结果集中的列数</span>
        <span class="token keyword">int</span> columnCount <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//4.创建集合对象，用来放结果集</span>
        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//5.循环获取每一行数据</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">T</span> t <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通过反射创建存放数据的对象</span>

            <span class="token comment">//6. 处理结果集一行数据中的每一个列:给t对象指定的属性赋值</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> columnCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//6.1 获取列值</span>
                <span class="token class-name">Object</span> columValue <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//6.2 获取每个列的列名</span>
                <span class="token class-name">String</span> columnLabel <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">getColumnLabel</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//6.3 给t对象指定的columnName属性，赋值为columValue：通过反射</span>
                <span class="token class-name">Field</span> field <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>columnLabel<span class="token punctuation">)</span><span class="token punctuation">;</span>
                field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> columValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//6.4 将循环拿到的每行数据对象，放到集合中</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//7. 返回结果集</span>
        <span class="token keyword">return</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token comment">//6.关闭资源</span>
        <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> ps<span class="token punctuation">,</span> rs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-1-使用示例" tabindex="-1"><a class="header-anchor" href="#_3-1-使用示例" aria-hidden="true">#</a> 3.1 使用示例</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;select id,name,email from customers where id &lt; ?&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token function">getForList</span><span class="token punctuation">(</span><span class="token class-name">Customer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>sql<span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-2-查询不同的表-class-t-参数与返回值-list-t" tabindex="-1"><a class="header-anchor" href="#_3-2-查询不同的表-class-t-参数与返回值-list-t" aria-hidden="true">#</a> 3.2 查询不同的表：<code>Class&lt;T&gt;</code>参数与返回值 <code>List&lt;T&gt;</code></h5><p>为所有的表都创建一个ORM类，调用方法的时候，将类名.class传递进去，如上。</p><p>在方法内通过newInstance()创建数据对象。返回值的类型就是ORM类，也写成泛型的样式。</p><h5 id="_3-3-返回多条数据" tabindex="-1"><a class="header-anchor" href="#_3-3-返回多条数据" aria-hidden="true">#</a> 3.3 返回多条数据</h5><p>利用集合和吧next放入循环来获取多条数据。</p><p>如果要创建只需要一行数据的方法，把while循环改成if判断，取消集合就可以了。</p>`,131),u=[i];function r(k,d){return s(),a("div",null,u)}const v=n(l,[["render",r],["__file","1-3.CURD.html.vue"]]);export{v as default};
