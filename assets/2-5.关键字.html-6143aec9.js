import{_ as a,o as n,c as s,e}from"./app-9484c6b3.js";const i={},t=e(`<h2 id="i-this" tabindex="-1"><a class="header-anchor" href="#i-this" aria-hidden="true">#</a> Ⅰ. this</h2><h4 id="_1-this的作用" tabindex="-1"><a class="header-anchor" href="#_1-this的作用" aria-hidden="true">#</a> 1. this的作用</h4><p>this 可以调用类的属性、方法和构造器。</p><h4 id="_2-this的使用" tabindex="-1"><a class="header-anchor" href="#_2-this的使用" aria-hidden="true">#</a> 2. this的使用</h4><h5 id="_2-1-在类的方法中" tabindex="-1"><a class="header-anchor" href="#_2-1-在类的方法中" aria-hidden="true">#</a> 2.1 在类的方法中</h5><p>可以使用 <code>this.属性</code> 或 <code>this.方法</code> 的方式，调用当前对象属性或方法。</p><p>通常情况下，都选择省略 <code>this.</code>。特殊情况下，如果方法的形参和类的属性同名时，我们必须显式的使用 <code>this.变量</code> 的方式，表明此变量是属性，而非形参。</p><h5 id="_2-2-在类的构造器中" tabindex="-1"><a class="header-anchor" href="#_2-2-在类的构造器中" aria-hidden="true">#</a> 2.2 在类的构造器中</h5><p>在类的构造器中，我们可以使用 <code>this.属性</code> 或 <code>this.方法</code> 的方式，调用当前正在创建的对象属性或方法。</p><p>通常情况下，我们都选择省略<code>this.</code>。特殊情况下，如果构造器的形参和类的属性同名时，我们必须显式的使用 <code>this.变量</code> 的方式，表明此变量是属性，而非形参。</p><h4 id="_3-this调用构造器" tabindex="-1"><a class="header-anchor" href="#_3-this调用构造器" aria-hidden="true">#</a> 3. this调用构造器</h4><p>我们在类的构造器中，可以显式的使用&quot;this(形参列表)&quot;方式，调用本类中指定的其他构造器，以运行其他构造器的代码，省的再写一份，减少了冗余。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> uanme<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token comment">//this调用属性</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span><span class="token class-name">String</span> uname<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//this调用构造器</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>uanme <span class="token operator">=</span> uanme<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>&quot;this(形参列表)&quot;必须声明在当前构造器的首行</li><li>this的调用不要写成死循环（互相this，或this自己）</li><li>如果一个类中声明了n个构造器，则最多有 n - 1个构造器中使用了&quot;this(形参列表)&quot;</li><li>构造器内部，最多只能声明一个&quot;this(形参列表)&quot;，用来调用其他的构造器</li></ul><h4 id="_4-this使用时机" tabindex="-1"><a class="header-anchor" href="#_4-this使用时机" aria-hidden="true">#</a> 4. this使用时机</h4><p>当在方法内需要用到调用该方法的对象时，就用this。</p><p>具体的：我们可以用this来区分属性和局部变量。</p><h4 id="_5-总结" tabindex="-1"><a class="header-anchor" href="#_5-总结" aria-hidden="true">#</a> 5. 总结</h4><ul><li>哪个对象调用或者哪个对象正在创建，this就表明是哪个对象。</li><li>当形参与成员变量同名时，如果在方法内或构造器内需要使用成员变量，必须添加this来表明该变量是类的成员变量</li><li>使用this访问属性和方法时，如果在本类中未找到，会从父类中查找</li><li>也可以通过添加this增加可读性</li></ul><h2 id="ii-package" tabindex="-1"><a class="header-anchor" href="#ii-package" aria-hidden="true">#</a> Ⅱ. package</h2><p>package就是包的意思。</p><h4 id="_1-什么是包" tabindex="-1"><a class="header-anchor" href="#_1-什么是包" aria-hidden="true">#</a> 1. 什么是包</h4><p>为了更好的实现项目中类的管理，提供包的概念。</p><p>本质就是一个文件夹，里面包含了一系列类，方便类的管理。</p><h4 id="_2-包的作用" tabindex="-1"><a class="header-anchor" href="#_2-包的作用" aria-hidden="true">#</a> 2. 包的作用</h4><ul><li>包帮助管理大型软件系统：将功能相近的类划分到同一个包中。比如：MVC的设计模式</li><li>包可以包含类和子包，划分项目层次，便于管理</li><li>解决类命名冲突的问题</li><li>控制访问权限</li></ul><p>包虽然就是个文件夹，但是跟文件夹还是不一样的。在同一个类中，只要用package设置了包名，就可以直接实例化包中其他类。而不用将类导入。</p><h4 id="_3-指定包" tabindex="-1"><a class="header-anchor" href="#_3-指定包" aria-hidden="true">#</a> 3. 指定包</h4><p>package语句作为Java源文件的第一条语句，指明该文件中定义的类所在的包。</p><p>若缺省该语句，则指定为无名包</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//package 顶层包名.子包名 ;</span>
<span class="token keyword">package</span> <span class="token namespace">math</span><span class="token punctuation">;</span>

<span class="token keyword">package</span> <span class="token namespace">api<span class="token punctuation">.</span>back<span class="token punctuation">.</span>user</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-包的命名规则" tabindex="-1"><a class="header-anchor" href="#_4-包的命名规则" aria-hidden="true">#</a> 4. 包的命名规则</h4><p>包属于标识符，遵循标识符的命名规则、规范(xxxyyyzzz)、且最好“见名知意”。</p><p>另外包是有层级的（目录的层级），层级可以用包名的点区分，每 <code>.</code> 一次，就代表一层文件目录。</p><h4 id="_5-jdk中主要包介绍" tabindex="-1"><a class="header-anchor" href="#_5-jdk中主要包介绍" aria-hidden="true">#</a> 5. JDK中主要包介绍</h4><ul><li>java.lang----包含一些Java语言的核心类，如String、Math、Integer、 System和Thread，提供常用功能</li><li>java.net----包含执行与网络相关的操作的类和接口。</li><li>java.io----包含能提供多种输入/输出功能的类。</li><li>java.util----包含一些实用工具类，如定义系统特性、接口的集合框架类、使用与日期日历相关的函数。</li><li>java.text----包含了一些java格式化相关的类</li><li>java.sql----包含了java进行JDBC数据库编程的相关类/接口</li><li>java.awt----包含了构成抽象窗口工具集（abstract window toolkits）的多个类，这些类被用来构建和管理应用程序的图形用户界面(GUI)。 B/S C/S</li></ul><h2 id="iii-import" tabindex="-1"><a class="header-anchor" href="#iii-import" aria-hidden="true">#</a> Ⅲ. import</h2><p>可以理解为：package用来定义命名空间，而import是导入命名空间的。</p><h4 id="_1-说明" tabindex="-1"><a class="header-anchor" href="#_1-说明" aria-hidden="true">#</a> 1. 说明</h4><p>为使用定义在不同包中的Java类，需用import语句来引入指定包层次下所需要的类或全部类(.*)。</p><p>import语句告诉编译器到哪里去寻找类。</p><h4 id="_2-语法格式" tabindex="-1"><a class="header-anchor" href="#_2-语法格式" aria-hidden="true">#</a> 2. 语法格式</h4><p>在源文件中显式的使用import结构导入指定包下的类、接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span>  包名<span class="token punctuation">.</span>类名<span class="token punctuation">;</span>
<span class="token keyword">import</span>  包名<span class="token punctuation">.</span>*<span class="token punctuation">;</span> <span class="token comment">//*表示所有类</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-import的使用细节" tabindex="-1"><a class="header-anchor" href="#_3-import的使用细节" aria-hidden="true">#</a> 3. import的使用细节</h4><ul><li>位置：声明在包的声明和类的声明之间</li><li>导入多个结构：如果需要导入多个结构，则并列写出即可</li><li>导入包下全部类：可以使用&quot;xxx.*&quot;的方式，表示可以导入xxx包下的所有结构</li><li>lang包：如果使用的类或接口是java.lang包下定义的，则可以省略import结构</li><li>同包类：如果使用的类或接口是本包下定义的，则可以省略import结构，直接用</li></ul><h4 id="_4-全类名-不导入包直接用" tabindex="-1"><a class="header-anchor" href="#_4-全类名-不导入包直接用" aria-hidden="true">#</a> 4. 全类名：不导入包直接用</h4><p>想不导入直接用也可以，在类前面加上包名就行。</p><p>带包名的类名，也称为全类名。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">api<span class="token punctuation">.</span>back<span class="token punctuation">.</span></span>User</span> u1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">api<span class="token punctuation">.</span>back<span class="token punctuation">.</span></span>User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_5-不同包下的同名类" tabindex="-1"><a class="header-anchor" href="#_5-不同包下的同名类" aria-hidden="true">#</a> 5. 不同包下的同名类</h4><p>如果在源文件中，使用了不同包下的同名的类，则必须至少有一个类需要以全类名的方式显示（也可以都用全类名）。</p><ul><li>注意：使用了全类名，就不需要导入了，也一定不要导入，不然还有可能会出问题。</li><li>此时：导入包和类名的可以直接用类名初始化；没导入的用全类名，互不干扰。</li></ul><h4 id="_6-子包下的类" tabindex="-1"><a class="header-anchor" href="#_6-子包下的类" aria-hidden="true">#</a> 6. 子包下的类</h4><p>使用&quot;xxx.*&quot;方式表明可以调用xxx包下的所有结构。但是如果使用的是xxx子包下的结构，则仍需要显式导入（包括本包下的子包）；</p><p>比如：lang包无需导入，但是要使用lang包下的子包，还是需要导入。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_7-import-static" tabindex="-1"><a class="header-anchor" href="#_7-import-static" aria-hidden="true">#</a> 7. import static</h4><p>import static：导入指定类或接口中的静态结构（属性或方法）。</p><p>即：直接导入静态属性和静态方法。</p><h2 id="iv-final" tabindex="-1"><a class="header-anchor" href="#iv-final" aria-hidden="true">#</a> Ⅳ. final</h2><h4 id="_1-说明-1" tabindex="-1"><a class="header-anchor" href="#_1-说明-1" aria-hidden="true">#</a> 1. 说明</h4><p>在Java中声明类、变量和方法时，可使用关键字final来修饰,表示“最终的”。</p><p>final可以用来修饰的结构：类、方法、变量</p><h4 id="_2-final类-无法继承" tabindex="-1"><a class="header-anchor" href="#_2-final类-无法继承" aria-hidden="true">#</a> 2. final类：无法继承</h4><p>final用来修饰一个类:此类不能被其他类所继承，提高安全性</p><p>java内部就有很多这样的类：比如：String类、System类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//final在public前后都可以 </span>
<span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-final方法-不能重写" tabindex="-1"><a class="header-anchor" href="#_3-final方法-不能重写" aria-hidden="true">#</a> 3. final方法：不能重写</h4><p>final 用来修饰方法：表明此方法不可以被重写。</p><p>比如：Object类中的getClass()。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-final变量-常量" tabindex="-1"><a class="header-anchor" href="#_4-final变量-常量" aria-hidden="true">#</a> 4. final变量：常量</h4><p>final 用来修饰变量：此时的&quot;变量&quot;就称为是一个常量，此时常量名要大写</p><h5 id="_4-1-final修饰属性" tabindex="-1"><a class="header-anchor" href="#_4-1-final修饰属性" aria-hidden="true">#</a> 4.1 final修饰属性</h5><p>修饰的属性必须赋值，且只能被赋值一次，不然会报错，可以考虑赋值的位置有：显式初始化、代码块中初始化、构造器中初始化；即在生命周期内，必须在对象创建前初始化。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">AGE</span> <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token comment">//显式初始化</span>
    <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">MAME</span><span class="token punctuation">;</span> 
    <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">SEX</span><span class="token punctuation">;</span>
    <span class="token punctuation">{</span>
        <span class="token constant">NAME</span> <span class="token operator">=</span> <span class="token string">&quot;jinno&quot;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
        <span class="token constant">SEX</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-2-final修饰局部变量" tabindex="-1"><a class="header-anchor" href="#_4-2-final修饰局部变量" aria-hidden="true">#</a> 4.2 final修饰局部变量</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> satic <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token class-name">A</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token class-name">A</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//出错</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-3-final修饰形参" tabindex="-1"><a class="header-anchor" href="#_4-3-final修饰形参" aria-hidden="true">#</a> 4.3 final修饰形参</h5><p>形参也属于局部变量；final修饰形参时，表明此形参是一个常量。当我们调用此方法时，给常量形参赋一个实参。一旦赋值以后，就只能在方法体内使用此形参，但不能进行重新赋值。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getIQ</span><span class="token punctuation">(</span>fianl <span class="token keyword">int</span> <span class="token constant">IQ</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//这里不赋值，不会报错</span>
    <span class="token constant">IQ</span> <span class="token operator">=</span> <span class="token number">143</span><span class="token punctuation">;</span>
    <span class="token comment">//IQ++;报错</span>
    <span class="token keyword">return</span> <span class="token constant">IQ</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//这样是可以的，没有改变IQ</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-static-final" tabindex="-1"><a class="header-anchor" href="#_5-static-final" aria-hidden="true">#</a> 5. static + final</h4><p>static final 用来修饰属性：全局常量</p><h2 id="v-其他" tabindex="-1"><a class="header-anchor" href="#v-其他" aria-hidden="true">#</a> Ⅴ. 其他</h2><h4 id="_1-native" tabindex="-1"><a class="header-anchor" href="#_1-native" aria-hidden="true">#</a> 1. native</h4><p>主要用在方法上，一个native方法就是一个Java调用非Java代码的接口。一个native方法是指该方法的实现由非Java语言实现，比如用C或C++实现。在定义一个native方法时，并不提供实现体（比较像定义一个Java Interface），因为其实现体是由非Java语言在外面实现的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token keyword">long</span> <span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,88),p=[t];function c(l,o){return n(),s("div",null,p)}const r=a(i,[["render",c],["__file","2-5.关键字.html.vue"]]);export{r as default};
