import{_ as a,o as s,c as e,e as p}from"./app-ab36e818.js";const n="/java-doc/img/java/javase/2-2-1.jpg",t={},i=p(`<h2 id="i-属性" tabindex="-1"><a class="header-anchor" href="#i-属性" aria-hidden="true">#</a> Ⅰ. 属性</h2><h4 id="_1-属性声明语法" tabindex="-1"><a class="header-anchor" href="#_1-属性声明语法" aria-hidden="true">#</a> 1. 属性声明语法</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>修饰符 数据类型 属性名 <span class="token operator">=</span> 初始化值<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>修饰符 <ul><li>权限修饰符：private、缺省、protected、public（详见封装）</li><li>其他修饰符：static、final（见后续章节）</li></ul></li><li>数据类型：任何基本数据类型(如int、Boolean) 或 任何引用数据类型。 <ul><li>包括：属性的类型可以是一个类（修饰符将表示一个对象，对象也是引用数据类型）。</li></ul></li><li>属性名：属于标识符，符合命名规则和规范即可。</li><li>初始化值：可以选择给变量一个初始化值，如果没有初始化值，会采用数据类型的默认值。</li></ul><h4 id="_2-属性与局部变量的对比" tabindex="-1"><a class="header-anchor" href="#_2-属性与局部变量的对比" aria-hidden="true">#</a> 2. 属性与局部变量的对比</h4><ul><li>属性（成员变量）：声明在类中的变量</li><li>局部变量：只在局部作用域有效的变量 <ul><li>方法内、方法形参、构造器内、构造器形参、代码块内</li></ul></li></ul><h5 id="_2-1-相同点" tabindex="-1"><a class="header-anchor" href="#_2-1-相同点" aria-hidden="true">#</a> 2.1 相同点</h5><ul><li>定义变量的格式：数据类型 变量名 = 变量值 <ul><li>属性还会多个权限控制符</li></ul></li><li>先声明，后使用</li><li>变量都有其对应的作用域</li></ul><h5 id="_2-2-不同点" tabindex="-1"><a class="header-anchor" href="#_2-2-不同点" aria-hidden="true">#</a> 2.2 不同点</h5><figure><img src="`+n+'" alt="2-2-1" tabindex="0" loading="lazy"><figcaption>2-2-1</figcaption></figure><ul><li>在类中声明的位置的不同 <ul><li>属性：直接定义在类的一对{}内</li><li>局部变量：声明在方法内、方法形参、代码块内、构造器形参、构造器内部的变量</li></ul></li><li>关于权限修饰符的不同 <ul><li>属性：可以在声明属性时，指明其权限，使用权限修饰符。常用的权限修饰符：private、public、缺省、protected ---&gt;封装性</li><li>局部变量：不可以使用权限修饰符。</li></ul></li><li>默认初始化值的情况 <ul><li>属性：类的属性，根据其类型，都有默认初始化值（和数组元素的默认值一样）。 <ul><li>整型（byte、short、int、long）：0</li><li>浮点型（float、double）：0.0</li><li>字符型（char）：0 （或&#39;\\u0000&#39;）</li><li>布尔型（boolean）：false</li><li>引用数据类型（类、数组、接口）：null</li></ul></li><li>局部变量：没有默认初始化值。意味着，我们在调用局部变量之前，一定要显式赋值。 <ul><li>特别地：形参在调用时，我们赋值即可。</li></ul></li></ul></li><li>在内存中加载的位置： <ul><li>属性：加载到堆空间中（非static）</li><li>局部变量：加载到栈空间</li></ul></li></ul><h4 id="_3-对属性可以赋值的位置" tabindex="-1"><a class="header-anchor" href="#_3-对属性可以赋值的位置" aria-hidden="true">#</a> 3. 对属性可以赋值的位置</h4><ul><li>①默认初始化</li><li>②显式初始化</li><li>③构造器中初始化</li><li>④有了对象以后，可以通过&quot;对象.属性&quot;或&quot;对象.方法&quot;的方式，进行赋值</li><li>⑤在代码块中赋值</li></ul><p>执行的先后顺序：① - ② =⑤ - ③ - ④；②跟⑤谁在前就先执行谁，一般②在前</p><h2 id="ii-方法" tabindex="-1"><a class="header-anchor" href="#ii-方法" aria-hidden="true">#</a> Ⅱ. 方法</h2><h4 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述" aria-hidden="true">#</a> 1. 概述</h4><p>方法：描述类应该具有的功能。</p><p>功能封装为方法的目的是，可以实现代码重用，简化代码。Java里的方法不能独立存在，所有的方法必须定义在类里。</p><figure><img src="'+n+`" alt="2-2-1" tabindex="0" loading="lazy"><figcaption>2-2-1</figcaption></figure><h4 id="_2-方法的分类" tabindex="-1"><a class="header-anchor" href="#_2-方法的分类" aria-hidden="true">#</a> 2. 方法的分类</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>权限修饰符 其他关键字 返回值类型  方法名<span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span><span class="token punctuation">{</span>
    方法体
    <span class="token keyword">return</span> 返回值<span class="token punctuation">;</span><span class="token comment">//可选</span>
<span class="token punctuation">}</span>
<span class="token comment">//暂时不考虑：static、final、abstract关键字</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>权限修饰符：Java规定的4种权限修饰符：private、public、缺省、protected （详见封装）</li><li>返回值：分为有返回值的和没返回值的 <ul><li>有返回值：必须在方法声明时，指定返回值的类型。同时，方法中，需要使用 return关键字来返回指定类型的变量或常量：“return 数据”。 <ul><li>可以return一个表达式，只要这个表达式的结果是一个值。</li></ul></li><li>没有返回值：如果方法没有返回值，则方法声明时，使用void来表示。通常，没有返回值的方法中，就不需要使用return.但是，如果使用的话，只能“return;”表示结束此方法的意思。 <ul><li>比如在条件判断中，对不满足条件的参数，直接return，结束程序，不继续执行了。</li></ul></li></ul></li><li>方法名：属于标识符，遵循标识符的规则和规范，“见名知意”</li><li>形参列表：方法可以声明0个，1个，或多个形参。 <ul><li>格式：数据类型1 形参1,数据类型2 形参2,...</li><li>注意：形参不能有默认值</li></ul></li><li>方法体：方法功能的体现。</li></ul><h4 id="_3-return关键字" tabindex="-1"><a class="header-anchor" href="#_3-return关键字" aria-hidden="true">#</a> 3. return关键字</h4><p>使用在方法体中，有以下作用</p><ul><li>结束方法</li><li>针对于有返回值类型的方法，使用&quot;return 数据&quot;方法返回所要的数据。</li></ul><p>注意：return关键字后面不可以声明执行语句（会直接报错），但可以是有结果的表达式。</p><h4 id="_4-方法的调用" tabindex="-1"><a class="header-anchor" href="#_4-方法的调用" aria-hidden="true">#</a> 4. 方法的调用</h4><h5 id="_4-1-调用在main所在类中声明的方法" tabindex="-1"><a class="header-anchor" href="#_4-1-调用在main所在类中声明的方法" aria-hidden="true">#</a> 4.1 调用在main所在类中声明的方法</h5><p>在main所在类中声明的普通方法（非static），不能在main中直接调用，也需要先建立对象，再进行调用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//依然需要new对象</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-2-注意" tabindex="-1"><a class="header-anchor" href="#_4-2-注意" aria-hidden="true">#</a> 4.2 注意</h5><ul><li>方法被调用一次，就会执行一次</li><li>没有具体返回值的情况，返回值类型用关键字void表示，那么方法体中可以不必使用return语句。如果使用，仅用来结束方法。</li><li>定义方法时，方法的结果应该返回给调用者，交由调用者处理</li><li>方法中只能调用方法或属性，不可以在方法内部定义方法。</li></ul><h4 id="_5-方法访问类的成员" tabindex="-1"><a class="header-anchor" href="#_5-方法访问类的成员" aria-hidden="true">#</a> 5. 方法访问类的成员</h4><p>方法中，可以调用当前类的属性或方法，包括调用自己（递归）。方法中也可以定义变量，但注意不能定义方法。</p><p>语法：直接用就行，没有特殊语法，在调用时可以对属性进行修改</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> hello <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p<span class="token punctuation">.</span><span class="token function">grow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//我是jinno我现在11岁[属性值被方法修改了]</span>
    p<span class="token punctuation">.</span><span class="token function">grow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//我是jinno我现在12岁</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token class-name">String</span> uname <span class="token operator">=</span> <span class="token string">&quot;jinno&quot;</span><span class="token punctuation">;</span>
  
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      age<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我是&quot;</span><span class="token operator">+</span>uname<span class="token operator">+</span><span class="token string">&quot;我现在&quot;</span><span class="token operator">+</span>age<span class="token operator">+</span><span class="token string">&quot;岁&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-递归方法" tabindex="-1"><a class="header-anchor" href="#_6-递归方法" aria-hidden="true">#</a> 6. 递归方法</h4><div class="hint-container tip"><p class="hint-container-title">提示</p><p>详见：数据结构与算法&gt;递归</p></div><p>一个方法体内调用它自身。</p><p>方法递归包含了一种隐式的循环，它会重复执行某段代码，但这种重复执行无须循环控制。递归一定要向已知方向递归，否则这种递归就变成了无穷递归，类似于死循环。</p><p>示例：计算1-100之间所有自然数的和</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//使用循环</span>
<span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//使用递归函数</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 3</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> n <span class="token operator">+</span> <span class="token function">getSum</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iii-方法的重载" tabindex="-1"><a class="header-anchor" href="#iii-方法的重载" aria-hidden="true">#</a> Ⅲ. 方法的重载</h2><h4 id="_1-overload-重载" tabindex="-1"><a class="header-anchor" href="#_1-overload-重载" aria-hidden="true">#</a> 1. overload：重载</h4><p>在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同即可（跟方法的权限修饰符、返回值类型、形参变量名、方法体都没有关系！）。</p><p>重载的判断方式：两同一不同</p><ul><li>两同：同一个类、相同方法名</li><li>不同：参数列表不同 <ul><li>参数个数不同</li><li>参数类型不同：参数是有顺序的；</li></ul></li></ul><h4 id="_2-重载的调用" tabindex="-1"><a class="header-anchor" href="#_2-重载的调用" aria-hidden="true">#</a> 2. 重载的调用</h4><p>调用方法时，是通过方法名和参数列表来确定调用哪一个方法的。</p><p>即通过法名 ---&gt; 参数列表确定某一个指定的方法。</p><h4 id="_3-重载示例" tabindex="-1"><a class="header-anchor" href="#_3-重载示例" aria-hidden="true">#</a> 3. 重载示例</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">,</span><span class="token class-name">Char</span> flag<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iv-参数传递" tabindex="-1"><a class="header-anchor" href="#iv-参数传递" aria-hidden="true">#</a> Ⅳ. 参数传递</h2><h4 id="_1-概念" tabindex="-1"><a class="header-anchor" href="#_1-概念" aria-hidden="true">#</a> 1. 概念</h4><p>方法必须由其所在类或对象调用才有意义。方法是可以有参数的：</p><ul><li>形参：方法声明时的参数</li><li>实参：方法调用时实际传给形参的参数值</li></ul><h4 id="_2-参数的数据类型" tabindex="-1"><a class="header-anchor" href="#_2-参数的数据类型" aria-hidden="true">#</a> 2. 参数的数据类型</h4><p>方法的参数可以是任意数据类型。</p><ul><li>基础数据类型</li><li>引用数据类型：包括对象作为参数（数据类型是类）。</li></ul><h4 id="_3-参数值的传递机制" tabindex="-1"><a class="header-anchor" href="#_3-参数值的传递机制" aria-hidden="true">#</a> 3. 参数值的传递机制</h4><p>Java里方法的参数传递方式只有一种：值传递。 即将实际参数值的副本（复制品）传入方法内，而参数本身不受影响。</p><h5 id="_3-1-基本数据类型" tabindex="-1"><a class="header-anchor" href="#_3-1-基本数据类型" aria-hidden="true">#</a> 3.1 基本数据类型</h5><p>参数赋给形参的是实参真实存储的数据值，传递完之后，两个变量互不干扰。</p><p>示例：交换两个变量（基本变量）的值。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
        <span class="token class-name">Test</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        test<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//10,20</span>
    <span class="token punctuation">}</span> 
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> temp <span class="token operator">=</span> m <span class="token punctuation">;</span>
        m <span class="token operator">=</span> n<span class="token punctuation">;</span>
        n <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>错误分析：我们将m,n传递给方法后，方法的形参被赋予了m,n的值，方法中操作的是形参中的m,n，形参中的m,n和原始数据m,n是没有关联的，所以这个交换值的函数失败了。可以使用return将修改后的数据返回。</p><h5 id="_3-2-引用数据类型" tabindex="-1"><a class="header-anchor" href="#_3-2-引用数据类型" aria-hidden="true">#</a> 3.2 引用数据类型</h5><p>如果参数是引用数据类型，此时实参赋给形参的是实参存储数据的地址值。我们经常会用到将一个对象作为参数。</p><p>示例：交换两个变量的值。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Swap</span><span class="token punctuation">(</span><span class="token class-name">Data</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> temp <span class="token operator">=</span> data<span class="token punctuation">.</span>m <span class="token punctuation">;</span>
        data<span class="token punctuation">.</span>m <span class="token operator">=</span> data<span class="token punctuation">.</span>n<span class="token punctuation">;</span>
        data<span class="token punctuation">.</span>n <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Data</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时上面的需求被实现了。</p><h4 id="_4-可变个数形参的方法" tabindex="-1"><a class="header-anchor" href="#_4-可变个数形参的方法" aria-hidden="true">#</a> 4. 可变个数形参的方法</h4><p>可变个数形参（Varargs：variable number or argumengts）机制：允许直接定义能和多个实参相匹配的形参。</p><h5 id="_4-1-使用说明" tabindex="-1"><a class="header-anchor" href="#_4-1-使用说明" aria-hidden="true">#</a> 4.1 使用说明</h5><p>格式1：方法名(参数的类型 ...参数名)</p><p>格式2：方法名(参数的类型[] 参数名) ；这个写法不推荐，这是JDK5.0以前的写法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token class-name">String</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>hobbyl<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>当调用可变个数形参的方法时，传入的参数个数可以是：0个，1个,2个，。。。</li><li>可变个数形参的方法与本类中方法名相同，形参不同的方法之间构成重载</li><li>可变个数形参的方法与本类中方法名相同，形参类型也相同的数组之间不构成重载。换句话说，二者不能共存（可变个数形参的第二种写法）。</li><li>如果还有其他参数，可变个数形参在方法的形参中，必须声明在末尾</li><li>可变个数形参在方法的形参中,最多只能声明一个可变形参。</li><li>当调用方法时，传递的参数有符合条件的非可变形参方法，就优先调用。</li></ul><h5 id="_4-2-遍历可变形参" tabindex="-1"><a class="header-anchor" href="#_4-2-遍历可变形参" aria-hidden="true">#</a> 4.2 遍历可变形参</h5><p>可以在方法中，使用for循环遍历可变个数形参。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> strs<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-3-注意事项" tabindex="-1"><a class="header-anchor" href="#_4-3-注意事项" aria-hidden="true">#</a> 4.3 注意事项</h5><p>可变形参的两种写法，java都会认的，所以不要同时出现。</p><p>尽量使用第一种写法 ...str；避免方法重载冲突。</p>`,84),l=[i];function o(c,u){return s(),e("div",null,l)}const d=a(t,[["render",o],["__file","2-2.属性与方法.html.vue"]]);export{d as default};
