import{_ as n,o as s,c as a,e as t}from"./app-2f916dc9.js";const e="/java-doc/img/frame/springboot/4-4-1.jpg",p={},o=t(`<h2 id="导入" tabindex="-1"><a class="header-anchor" href="#导入" aria-hidden="true">#</a> 导入</h2><h4 id="_1-依赖" tabindex="-1"><a class="header-anchor" href="#_1-依赖" aria-hidden="true">#</a> 1. 依赖</h4><p>一般采用springboot data 整合的MongoDB</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- mongodb --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-mongodb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-application-yml" tabindex="-1"><a class="header-anchor" href="#_2-application-yml" aria-hidden="true">#</a> 2. application.yml</h4><p>主要配置MongoDB的连接参数。</p><p>有两种连接方式：</p><ul><li>URI：直接使用URI进行连接，这个URI和MongoDB Compass连接信息里的URI基本是一样的 <ul><li>推荐这种，配置项更简洁</li><li>由于有身份校验bug的存在，只能采用这种方式连接</li></ul></li><li>选项链接：列出连接数据库的各个选项进行链接</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># URI链接</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">data</span><span class="token punctuation">:</span>
    <span class="token key atrule">mongodb</span><span class="token punctuation">:</span>
      <span class="token key atrule">uri</span><span class="token punctuation">:</span> mongodb<span class="token punctuation">:</span>//myroot<span class="token punctuation">:</span>2ck23<span class="token punctuation">-</span>5@159.75.225.162<span class="token punctuation">:</span>27017/article
           <span class="token punctuation">?</span>authSource=admin<span class="token important">&amp;authMechanism=SCRAM-SHA-</span><span class="token number">1</span>

<span class="token comment"># 选项连接的方式：目前仅支持无密码的库</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">data</span><span class="token punctuation">:</span>
    <span class="token key atrule">mongodb</span><span class="token punctuation">:</span>
      <span class="token key atrule">database</span><span class="token punctuation">:</span> article
      <span class="token key atrule">host</span><span class="token punctuation">:</span> 159.75.225.162
      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">27017</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-uri的格式" tabindex="-1"><a class="header-anchor" href="#_3-uri的格式" aria-hidden="true">#</a> 3. URI的格式</h4><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在Java中使用MongoDB需要指明操作的库，且库要提前创建好，对于MongoDB总，每个库都有所属的用户，因此操作那个库，就使用哪个库的用户名。</p><p>使用超级管理员用户也可以，就是不够安全。</p></div><ul><li>无密码：<code>mongodb://ip:port/数据库名</code></li><li>有密码：<code>mongodb://username:password@ip:port/数据库名?authSource=admin&amp;authMechanism=SCRAM-SHA-1</code></li></ul><h5 id="_3-1-致命bug-身份验证" tabindex="-1"><a class="header-anchor" href="#_3-1-致命bug-身份验证" aria-hidden="true">#</a> 3.1 致命Bug：身份验证</h5><p>当服务器开启密码验证时，连接服务器就需要用户名和密码了，不过只给出用户名和密码可能无法连接，从而报错（至少当前版本是这样的）。</p><ul><li>报错信息：<code>Exception authenticating MongoCredential</code></li><li>原因：没有指明身份验证用到的数据库（authSource）和认证机制（authMechanism）</li></ul><h5 id="_3-2-authsource-储存用户信息的数据库" tabindex="-1"><a class="header-anchor" href="#_3-2-authsource-储存用户信息的数据库" aria-hidden="true">#</a> 3.2 authSource：储存用户信息的数据库</h5><p>MongoDB默认把所有的用户信息都储存在了内置的admin数据库。</p><p>Spring-mongodb并不知道这个信息，因此需要指明</p><h5 id="_3-3-authmechanism-身份认证的机制" tabindex="-1"><a class="header-anchor" href="#_3-3-authmechanism-身份认证的机制" aria-hidden="true">#</a> 3.3 authMechanism：身份认证的机制</h5><p>ongodb的认证机制有2种：SCRAM-SHA-1和MONGODB-CR</p><ul><li>SCRAM-SHA-1：3.0版本之后Mongodb默认的认证机制</li><li>MONGOOD-CR：3.0版本之前Mongodb的认证机制</li></ul><p>spring-mongodb并不知道采用哪种认证机制，因此需要指明。</p><h4 id="_4-mongotemplate" tabindex="-1"><a class="header-anchor" href="#_4-mongotemplate" aria-hidden="true">#</a> 4. MongoTemplate</h4><p>Java对MongoDB所有的操作都是通过MongoTemplate类实现的。操作MongoDB就是使用MongoTemplate的方法。</p><p>注意：受限于版本因素，当前MongoTemplate类无法直接通过@Autowired进行注入，要么手动添加@Bean，要么通过@Resource进行注入</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Resource</span>
<span class="token class-name">MongoTemplate</span> mongoTemplate<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实体类" tabindex="-1"><a class="header-anchor" href="#实体类" aria-hidden="true">#</a> 实体类</h2><p>操作MongoDB里的数据是需要实体类作为载体的，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Document</span><span class="token punctuation">(</span>collection<span class="token operator">=</span><span class="token string">&quot;student&quot;</span><span class="token punctuation">)</span> 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">long</span> userid<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> gender<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-document" tabindex="-1"><a class="header-anchor" href="#_1-document" aria-hidden="true">#</a> 1. @Document</h4><p>@Document注解的collection属性用来绑定当前实体类对应的集合（表）。</p><ul><li>当实体类的类名和集合名相同时（不区分大小写），就不需要该注解绑定</li><li>当实体类的类名和集合名不同时，就需要该注解进行绑定</li><li>如果操作的实体类没有对应的集合，API也不会报错，而是得到空结果。</li></ul><p>建议统一加该注解</p><h4 id="_2-id与-id" tabindex="-1"><a class="header-anchor" href="#_2-id与-id" aria-hidden="true">#</a> 2. @id与 _id</h4><p>向集合添加文档时，文档会自动添加一个_id字段（开发中该字段一般采用自动生成的）。_id字段的数据类型是<code>ObjectId</code>，其实可以被解析为字符串。</p><h5 id="_2-1-映射" tabindex="-1"><a class="header-anchor" href="#_2-1-映射" aria-hidden="true">#</a> 2.1 映射</h5><ul><li>自动映射：当实体类中出现id字段时，会被自动被映射为_id字段，对该字段的操作就是对ObjectId的操作。</li><li>@id注解：可以使用@id注解手动将一个字段与_id字段建立映射。</li></ul><h5 id="_2-2-数据类型" tabindex="-1"><a class="header-anchor" href="#_2-2-数据类型" aria-hidden="true">#</a> 2.2 数据类型</h5><p>_id的数据类型是有限制的，当一个字段被映射为_id字段后，也应该遵守相同的限制。<br> 必须是：String、BigInteger或ObjectID中的一种。</p><p>如果数据类型不符合限制就会报异常：<code>No converter found capable of converting...</code></p><h4 id="_3-无表结构" tabindex="-1"><a class="header-anchor" href="#_3-无表结构" aria-hidden="true">#</a> 3. 无表结构</h4><p>MongoDB不是关系型数据库，没有标结果，同一个集合总储存的文档可以有不同的字段，字段类型也可以不同。</p><p>不过开发者还是会保持：集合内字段统一、类型统一。</p><h4 id="_4-缺省数据" tabindex="-1"><a class="header-anchor" href="#_4-缺省数据" aria-hidden="true">#</a> 4. 缺省数据</h4><p>对集合进行CURD操作，可能会出现集合的字段和实体类的字段不匹配，此时无值的字段就会自动变为null，而不会报错。</p><h4 id="_5-class字段" tabindex="-1"><a class="header-anchor" href="#_5-class字段" aria-hidden="true">#</a> 5. _class字段</h4><p>向集合中插入数据时，所有的文档都会自动添加一个_class字段，该字段用来储存添加数据的实体类。如：&quot;com.sgugo.es.Student&quot;</p><p>可以创建一个配置类，监听MongoDB保存数据，跳过创建_class字段。</p><h2 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h2><p>MongoTemplatel类的方法包含了所需的所有对MongoDB数据库的操作。</p><ul><li>增 <ul><li>insert：插入一条文档</li><li>insertAll：插入多条文档</li></ul></li><li>删 <ul><li>remove：根据条件移除文档</li></ul></li><li>改 <ul><li>updateFirst：更新一个文档，只能更新一个。 <ul><li>upsert：同上，上述方法的别名</li></ul></li><li>updateMulti：根据条件更新多个文档</li></ul></li><li>查 <ul><li>findAll：查询指定集合的全部数据</li><li>findById：根据_id查询数据</li><li>find：根据复杂的查询条件，查询数据</li></ul></li></ul><h4 id="_1-insert-插入一个文档" tabindex="-1"><a class="header-anchor" href="#_1-insert-插入一个文档" aria-hidden="true">#</a> 1. insert：插入一个文档</h4><p>insert方法常用参数为实体类，将实体类的数据插入绑定的集合</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MongoDbBaseTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token class-name">MongoTemplate</span> mongoTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">insertTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        student<span class="token punctuation">.</span><span class="token function">setUserid</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        student<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;Aaron&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        student<span class="token punctuation">.</span><span class="token function">setGender</span><span class="token punctuation">(</span><span class="token string">&quot;male&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mongoTemplate<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><figure><img src="`+e+`" alt="4-4-1" tabindex="0" loading="lazy"><figcaption>4-4-1</figcaption></figure><ul><li>PS：默认情况下额外插入一个名为_class的字段。</li><li>PS：没有为id字段指定值，MongoDB自动创建_id（主键不能为空）</li></ul><h4 id="_2-remote-根据条件移除文档" tabindex="-1"><a class="header-anchor" href="#_2-remote-根据条件移除文档" aria-hidden="true">#</a> 2. remote：根据条件移除文档</h4><p>该方法一般接受两个参数，并有一个返回值</p><ul><li>参数1：Query对象，一个查询对象，删除时需要依据该查询结果</li><li>参数2：Class&lt;?&gt; entityClass，实体类.calss，用来指定删除哪个集合中的文档</li><li>返回值：返回删除的条数，返回的是一个对象，需要通过<code>getDeletedCount()</code>方法获取具体的条数。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MongoDbBaseTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token class-name">MongoTemplate</span> mongoTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">remoteTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 注意Query在org.springframework.data.mongodb.core.query;</span>
        <span class="token class-name">Query</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token punctuation">(</span><span class="token class-name">Criteria</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">DeleteResult</span> result <span class="token operator">=</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span><span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getDeletedCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="查询语法" tabindex="-1"><a class="header-anchor" href="#查询语法" aria-hidden="true">#</a> 查询语法</h5><p><code>Criteria.where(&quot;要查询的字段&quot;).查询方法(匹配的值)</code></p><p>查询方法非常多，基本可以见名知意，通过IDEA的提示信息使用，不用记忆。</p><h4 id="_3-upsert-updatefirst-更新一个文档" tabindex="-1"><a class="header-anchor" href="#_3-upsert-updatefirst-更新一个文档" aria-hidden="true">#</a> 3. upsert || updateFirst：更新一个文档</h4><p>upsert是updateFirst方法的别名，用法和作用都一样。</p><ul><li>参数1：Query，查询对象，查询出要更新的文档</li><li>参数2：Update，更新对象，设置要更新的内容</li><li>参数3：Class&lt;?&gt; entityClass，实体类.calss，用来指定更新哪个集合中的文档</li><li>返回值：updateResult对象，通过getModifiedCount获取影响的行数</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>core<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">Query</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>core<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">Update</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MongoDbBaseTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token class-name">MongoTemplate</span> mongoTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">updateTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Query</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token punctuation">(</span><span class="token class-name">Criteria</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token string">&quot;21&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Update</span> update <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">UpdateResult</span> updateResult <span class="token operator">=</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">updateFirst</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span>update<span class="token punctuation">,</span><span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>updateResult<span class="token punctuation">.</span><span class="token function">getModifiedCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-updatemulti-更新多个文档" tabindex="-1"><a class="header-anchor" href="#_4-updatemulti-更新多个文档" aria-hidden="true">#</a> 4. updateMulti：更新多个文档</h4><p>updateMulti的用法和updateFirst完全一样，只是updateMulti可以更新所有符合条件的文档，updateFirst只能更新符合条件的第一个文档。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>core<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">Query</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>core<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">Update</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MongoDbBaseTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token class-name">MongoTemplate</span> mongoTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">updateTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Query</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token punctuation">(</span><span class="token class-name">Criteria</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Update</span> update <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">UpdateResult</span> updateResult <span class="token operator">=</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">updateMulti</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> update<span class="token punctuation">,</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>updateResult<span class="token punctuation">.</span><span class="token function">getModifiedCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-findall-查询集合中所有数据" tabindex="-1"><a class="header-anchor" href="#_5-findall-查询集合中所有数据" aria-hidden="true">#</a> 5. findAll：查询集合中所有数据</h4><p>该方法会返回集合中所有的文档，参数是实体类。</p><p>参数实体类绑定的集合就是要查询的集合，查询的结果同时也被实体类的属性接收。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MongoDbBaseTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token class-name">MongoTemplate</span> mongoTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">findAllTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> all <span class="token operator">=</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>all<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//打印结果</span>
<span class="token punctuation">[</span>
    <span class="token class-name">Student</span><span class="token punctuation">(</span>
        id<span class="token operator">=</span><span class="token number">64</span>a4d9aaad5837556a80e329<span class="token punctuation">,</span> userid<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> username<span class="token operator">=</span><span class="token class-name">Jinno</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> gender<span class="token operator">=</span>famale<span class="token punctuation">)</span><span class="token punctuation">,</span> 
    <span class="token class-name">Student</span><span class="token punctuation">(</span>
        id<span class="token operator">=</span><span class="token number">64</span>a4df85481a3664d13fb90e<span class="token punctuation">,</span> userid<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> username<span class="token operator">=</span><span class="token class-name">Aaron</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> gender<span class="token operator">=</span>male
    <span class="token punctuation">)</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>文档中有，而实体类中没有的字段，不会返回；</li><li>文档中没有，而实体类总有该属性，就赋值null。</li></ul><h4 id="_6-findbyid-通过-id查询数据" tabindex="-1"><a class="header-anchor" href="#_6-findbyid-通过-id查询数据" aria-hidden="true">#</a> 6. FindById：通过_id查询数据</h4><ul><li>参数1：要查询的文档的_id</li><li>参数2：实体类.class，用来获取绑定的文档，并接收数据</li><li>返回值：实体类</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MongoDbBaseTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token class-name">MongoTemplate</span> mongoTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">findByItTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Student</span> result <span class="token operator">=</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token string">&quot;64a4d9aaad5837556a80e329&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//打印结果</span>
<span class="token class-name">Student</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">64</span>a4d9aaad5837556a80e329<span class="token punctuation">,</span> userid<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> username<span class="token operator">=</span><span class="token class-name">Jinno</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> gender<span class="token operator">=</span>famale<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-find-根据复杂条件查询" tabindex="-1"><a class="header-anchor" href="#_7-find-根据复杂条件查询" aria-hidden="true">#</a> 7. find：根据复杂条件查询</h4><p>find方法可以进行各种复杂的查询</p><ul><li>参数1：Query对象</li><li>参数2：实体类.class</li><li>返回值：<code>List&lt;Class&lt;T&gt;&gt;</code>无论查询结果是几条，返回结果都是List<br> 因为Query对象可以进行各种复杂的查询，所有find方法也可以进行各种复杂的查询。</li></ul><p>包括：多条件查询、范围查询、模糊查询、分页查询、聚合查询，这些都与Query对象的方法有关。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MongoDbBaseTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token class-name">MongoTemplate</span> mongoTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">findTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Query</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token punctuation">(</span><span class="token class-name">Criteria</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token string">&quot;Jinno&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> students <span class="token operator">=</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,84),c=[o];function l(i,u){return s(),a("div",null,c)}const r=n(p,[["render",l],["__file","4-4.MongoDB.html.vue"]]);export{r as default};
