import{_ as n,o as a,c as s,e}from"./app-acd7cce4.js";const t="/java-doc/img/java/javase/a-5-1.jpg",p={},c=e(`<h2 id="i-动态代理" tabindex="-1"><a class="header-anchor" href="#i-动态代理" aria-hidden="true">#</a> Ⅰ. 动态代理</h2><h4 id="_1-代理设计模式" tabindex="-1"><a class="header-anchor" href="#_1-代理设计模式" aria-hidden="true">#</a> 1. 代理设计模式</h4><ul><li>原理：使用一个代理将对象包装起来, 然后用该代理对象取代原始对象。任何对原始对象的调用都要通过代理。代理对象决定是否以及何时将方法调用转到原始对象上。</li><li>意义：在不改变原有方法的情况下，对原有方法进行增强、完善。</li></ul><h5 id="例子" tabindex="-1"><a class="header-anchor" href="#例子" aria-hidden="true">#</a> 例子</h5><ul><li>要求：我们连接数据库时需要进行安全检查。</li><li>接口：我们定义了一个接口，进行连接数据库，需要连接数据库的类都要继承他 <ul><li>conncetDB方法用于连接数据库</li></ul></li><li>被代理类：User类 重写connectBD方法进行数据库连接。</li><li>代理类：ProxyUser 同样实现接口，并重写connectDB方法。 <ul><li>构造函数：就是被代理类User</li><li>connectDB方法中，对数据库连接进行安全检测，并掉用User.conncetDB方法连接数据库</li><li>链接数据库后，将连接信息写入日志。</li></ul></li></ul><h4 id="_2-静态代理" tabindex="-1"><a class="header-anchor" href="#_2-静态代理" aria-hidden="true">#</a> 2. 静态代理</h4><p>特征是代理类和目标对象的类都是在编译期间确定下来，不利于程序的扩展。同时，每一个代理类只能为一个接口服务，这样一来程序开发中必然产生过多的代理。 最好可以通过一个代理类完成全部的代理功能 。</p><h5 id="_2-1-示例" tabindex="-1"><a class="header-anchor" href="#_2-1-示例" aria-hidden="true">#</a> 2.1 示例</h5><p>还拿连接数据库举例，静态代理需要，每个要连接数据库的类，都声明一个静态代理，即使代理做的操作是一样的，都是：安全检查、掉用被代理类的conncetDB方法、将连接信息写入日志。</p><h5 id="_2-2-缺点" tabindex="-1"><a class="header-anchor" href="#_2-2-缺点" aria-hidden="true">#</a> 2.2 缺点</h5><p>代理类和被代理类在编译期间，就确定下来了，不灵活。我们要多很多相似类都定义一个代理类，过于冗余。</p><h4 id="_3-动态代理介绍" tabindex="-1"><a class="header-anchor" href="#_3-动态代理介绍" aria-hidden="true">#</a> 3. 动态代理介绍</h4><ul><li>原理：动态代理是指客户通过代理类来调用其它对象的方法，并且是在程序运行时根据需要动态创建目标类的代理对象。</li><li>使用场合 <ul><li>调试</li><li>远程方法调用</li></ul></li><li>优点：抽象角色中（接口）声明的所有方法都被转移到调用处理器一个集中的方法中处理，这样，我们可以更加灵活和统一的处理众多的方法。</li><li>示例：还拿连接数据库举例，我们调用哪个类，就实例化并代理哪个类，动态代理。</li></ul><h4 id="_4-静态代理示例" tabindex="-1"><a class="header-anchor" href="#_4-静态代理示例" aria-hidden="true">#</a> 4. 静态代理示例</h4><ul><li>接口：定义一个衣服工厂接口ClothFactory，并声明produceCloth方法用于生产服装</li><li>被代理类：Nike工厂，实现接口，重写produceCloth方法用于生产服装。</li><li>代理类：代理Nike工厂，也实现接口，重写produceCloth方法， <ul><li>并在该方法中，进行工厂的准备工作，比如：原料准备</li><li>调用Nike工厂的produceCloth方法进行衣服生产</li><li>进行一些收尾工作，比如写个日志，清洗工厂等</li></ul></li></ul><h5 id="_4-1-接口" tabindex="-1"><a class="header-anchor" href="#_4-1-接口" aria-hidden="true">#</a> 4.1 接口</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">ClothFactory</span><span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">produceCloth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-2-代理类" tabindex="-1"><a class="header-anchor" href="#_4-2-代理类" aria-hidden="true">#</a> 4.2 代理类</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">ProxyClothFactory</span> <span class="token keyword">implements</span> <span class="token class-name">ClothFactory</span><span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">ClothFactory</span> factory<span class="token punctuation">;</span><span class="token comment">//用被代理类对象进行实例化</span>

    <span class="token keyword">public</span> <span class="token class-name">ProxyClothFactory</span><span class="token punctuation">(</span><span class="token class-name">ClothFactory</span> factory<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>factory <span class="token operator">=</span> factory<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">produceCloth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;代理工厂做一些准备工作&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        factory<span class="token punctuation">.</span><span class="token function">produceCloth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;代理工厂做一些后续的收尾工作&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-3-被代理类" tabindex="-1"><a class="header-anchor" href="#_4-3-被代理类" aria-hidden="true">#</a> 4.3 被代理类</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">NikeClothFactory</span> <span class="token keyword">implements</span> <span class="token class-name">ClothFactory</span><span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">produceCloth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Nike工厂生产一批运动服&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-4-使用" tabindex="-1"><a class="header-anchor" href="#_4-4-使用" aria-hidden="true">#</a> 4.4 使用</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticProxyTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//创建被代理类的对象</span>
        <span class="token class-name">ClothFactory</span> nike <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NikeClothFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//创建代理类的对象</span>
        <span class="token class-name">ClothFactory</span> proxyClothFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyClothFactory</span><span class="token punctuation">(</span>nike<span class="token punctuation">)</span><span class="token punctuation">;</span>
        proxyClothFactory<span class="token punctuation">.</span><span class="token function">produceCloth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-动态代理使用" tabindex="-1"><a class="header-anchor" href="#ii-动态代理使用" aria-hidden="true">#</a> Ⅱ. 动态代理使用</h2><h4 id="_1-需求" tabindex="-1"><a class="header-anchor" href="#_1-需求" aria-hidden="true">#</a> 1. 需求</h4><ul><li>①根据加载到内存中的被代理类，动态的创建一个代理类及其对象。</li><li>②当通过代理类的对象调用方法a时，动态的去调用被代理类中的同名方法a。</li></ul><h4 id="_2-逻辑链条" tabindex="-1"><a class="header-anchor" href="#_2-逻辑链条" aria-hidden="true">#</a> 2. 逻辑链条</h4><ul><li>①实例化被代理类，获取被代理类的对象。</li><li>②通过反射获取该对象的类和所实现的所有接口</li><li>③通过获取的类和接口，创建一个对象，该对象就是代理对象。</li><li>④获取代理对象后，就可以使用代理对象取代源对象了 <ul><li>该对象有被代理对象的同名方法，但里的逻辑代码进行了加强。</li></ul></li><li>⑤使用代理对象调用被代理类中的同名方法 <ul><li>首先，代理对象会读取被代理类中的同名方法的方法名和形参列表。</li><li>其次，将这些信息传递作为参数给代理对象的invoke方法</li><li>invoke方法里主要做两件事 <ul><li>根据传递的信息调用源被代理对象的方法；</li><li>执行invoke代码体里写的增强逻辑；这个增强逻辑：就是代理的意义，</li></ul></li></ul></li></ul><h5 id="_2-1-特点" tabindex="-1"><a class="header-anchor" href="#_2-1-特点" aria-hidden="true">#</a> 2.1 特点</h5><p>通过上述的逻辑链条可知：</p><ul><li>一个动态代理类，可以代理所有的被代理类。</li><li>被代理类中的所有方法都会被代理类中的invoke方法增强，且增强的方式是一样，都可以在调用源方法的前后执行一些指定的增强逻辑。</li></ul><h5 id="_2-2-针对不通的方法进行增强" tabindex="-1"><a class="header-anchor" href="#_2-2-针对不通的方法进行增强" aria-hidden="true">#</a> 2.2 针对不通的方法进行增强</h5><p>如果要针对不同的方法进行增强，就要通过invoke方法的参数，获取要增强的方法名，进行switch...case判断，进行个性化的增强。</p><h4 id="_3-相关api" tabindex="-1"><a class="header-anchor" href="#_3-相关api" aria-hidden="true">#</a> 3. 相关API</h4><h5 id="_3-1-proxy-所有动态代理类的父类" tabindex="-1"><a class="header-anchor" href="#_3-1-proxy-所有动态代理类的父类" aria-hidden="true">#</a> 3.1 Proxy：所有动态代理类的父类</h5><p>专门完成代理的操作类，通过此类为一个或多个接口动态地生成实现类。</p><h5 id="_3-2-proxy-newproxyinstance" tabindex="-1"><a class="header-anchor" href="#_3-2-proxy-newproxyinstance" aria-hidden="true">#</a> 3.2 Proxy.newProxyInstance</h5><p>Proxy类提供的用于创建动态代理类和动态代理对象的静态方法</p><ul><li>参数1：类加载器</li><li>参数2：得到被代理类实现的全部接口，同时这些接口也会成为代理类的接口（支持多个接口）。</li><li>参数3：InvocationHandler接口 <ul><li>需要手动的实现该接口，并把实现类的示例对象作为实参传入；也可以直接写成匿名实现类。</li><li>作用：创建代理对象，其中有个invoke方法，该方法用来调用被代理类的方法，并做一些增强。</li></ul></li><li>返回值：返回被代理类的代理对象 <ul><li>该对象是由参数3的实现类创建的。</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token class-name">Object</span> newProxyInstance
    <span class="token punctuation">(</span><span class="token class-name">ClassLoader</span> loader<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">,</span><span class="token class-name">InvocationHandler</span> h<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-3-invocationhandler-调用被代理类方法的接口" tabindex="-1"><a class="header-anchor" href="#_3-3-invocationhandler-调用被代理类方法的接口" aria-hidden="true">#</a> 3.3 InvocationHandler：调用被代理类方法的接口</h5><p>创建一个实现接口InvocationHandler的类，它必须实现invoke方法，以完成代理的具体操作。</p><h5 id="_3-4-invocationhandler-invoke-调用被代理类方法的方法" tabindex="-1"><a class="header-anchor" href="#_3-4-invocationhandler-invoke-调用被代理类方法的方法" aria-hidden="true">#</a> 3.4 InvocationHandler.invoke：调用被代理类方法的方法</h5><p>通过InvocationHandler接口的实现类调用该方法，来实现调用被代理类方法的方法</p><ul><li>参数1：代理类对象</li><li>参数2：要调用的方法</li><li>参数3：方法调用时所需要的参数</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> theProxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-代理类代码分析" tabindex="-1"><a class="header-anchor" href="#_4-代理类代码分析" aria-hidden="true">#</a> 4. 代理类代码分析</h4><h5 id="_4-1-代理类" tabindex="-1"><a class="header-anchor" href="#_4-1-代理类" aria-hidden="true">#</a> 4.1 代理类</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">{</span>
    <span class="token comment">//调用此方法，返回一个代理类的对象</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//obj:被代理类的对象</span>
        <span class="token class-name">MyInvocationHandler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyInvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        handler<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span>newProxyInstance
            <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-2-代理类-proxy-newproxyinstance的参数3" tabindex="-1"><a class="header-anchor" href="#_4-2-代理类-proxy-newproxyinstance的参数3" aria-hidden="true">#</a> 4.2 代理类：Proxy.newProxyInstance的参数3</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">MyInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Object</span> obj<span class="token punctuation">;</span><span class="token comment">//需要使用被代理类的对象进行赋值</span>
    
    <span class="token comment">//通过bind方法传入被代理对象，为属性赋值</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//参数是Object类型会更通用</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> obj<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//当我们通过代理类的对象，调用方法a时，就会自动的调用如下的方法：invoke()</span>
    <span class="token comment">//将被代理类要执行的方法a的功能就声明在invoke()中</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token comment">//method:即为代理类对象调用的方法，此方法也就作为了被代理类对象要调用的方法</span>
        <span class="token comment">//obj:被代理类的对象</span>
        <span class="token class-name">Object</span> returnValue <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//上述方法的返回值就作为当前类中的invoke()的返回值。</span>
        <span class="token keyword">return</span> returnValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-3-使用示例" tabindex="-1"><a class="header-anchor" href="#_4-3-使用示例" aria-hidden="true">#</a> 4.3 使用示例</h5><p>前提：</p><ul><li>接口：Human，两个类：getBelif、和eat</li><li>被代理类：SuperMan，实现了接口</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">SuperMan</span> superMan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//proxyInstance:代理类的对象</span>
<span class="token class-name">Human</span> proxyInstance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Human</span><span class="token punctuation">)</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">.</span><span class="token function">getProxyInstance</span><span class="token punctuation">(</span>superMan<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//当通过代理类对象调用方法时，会自动的调用被代理类中同名的方法</span>
<span class="token class-name">String</span> belief <span class="token operator">=</span> proxyInstance<span class="token punctuation">.</span><span class="token function">getBelief</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>belief<span class="token punctuation">)</span><span class="token punctuation">;</span>
proxyInstance<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&quot;四川麻辣烫&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-4-代理流程分析" tabindex="-1"><a class="header-anchor" href="#_4-4-代理流程分析" aria-hidden="true">#</a> 4.4 代理流程分析</h5><ul><li>①SuperMan superMan = new SuperMan()：实例化被代理类，获取被代理类对象superMan</li><li>②Human proxyInstance = (Human) ProxyFactory.getProxyInstance(superMan)：调用ProxyFactory类的静态方法（将被代理类对象 SuperMan 作为参数传入） <ul><li>生成一个被代理类</li><li>ProxyFactory中调用了newProxyInstance方法，创建了代理类proxyInstance</li><li>原理：通过反射获取被代理类的接口和类，并创建一个实现同样接口的类</li><li>在此方法中，也将被代理类传递给了MyInvocationHandler类的invoke方法</li></ul></li><li>③String belief = proxyInstance.getBelief(); 代理类调用一个被代理类的同名方法，此时发生了如下事情： <ul><li>proxyInstance自动调用了MyInvocationHandler类的invoke方法 <ul><li>创建proxyInstance时，MyInvocationHandler是他的参数之一，已经进行了绑定</li></ul></li><li>并将自己调用的方法名、参数列表传递给MyInvocationHandle的invoke方法</li><li>MyInvocationHandle已经在创建代理类是获取了被代理类的对象名，此时又获取了要调用的方法和参数列表</li><li>利用反射，调用被代理类的同名方法。并获取返回值</li></ul></li></ul><h4 id="_5-aop与动态代理" tabindex="-1"><a class="header-anchor" href="#_5-aop与动态代理" aria-hidden="true">#</a> 5. AOP与动态代理</h4><h5 id="_5-1-aop-aspect-orient-programming" tabindex="-1"><a class="header-anchor" href="#_5-1-aop-aspect-orient-programming" aria-hidden="true">#</a> 5.1 AOP：Aspect Orient Programming</h5><p>就是上章写的在动态代理里写一些通用的代码。</p><p>比如：调用被代理类方法前进行安全检查，调用后进行日志记录。</p><h5 id="_5-2-aop代理" tabindex="-1"><a class="header-anchor" href="#_5-2-aop代理" aria-hidden="true">#</a> 5.2 AOP代理</h5><figure><img src="`+t+`" alt="a-5-1" tabindex="0" loading="lazy"><figcaption>a-5-1</figcaption></figure><p>上面这种动态代理在AOP中被称为AOP代理，AOP代理可代替目标对象，AOP代理包含了目标对象的全部方法。但AOP代理中的方法与目标对象的方法存在差异：AOP代理里的方法可以在执行目标方法之前、之后插入一些通用处理</p><h5 id="_5-3-示例" tabindex="-1"><a class="header-anchor" href="#_5-3-示例" aria-hidden="true">#</a> 5.3 示例</h5><p>以上面的例子为例，加一些通用操作，加入后，我们再调用代理类的方法时就会进行一些附加操作。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//创建一个类，来包含通用操作，也可以直接写在MyInvocationHandler.invoke方法里</span>
<span class="token keyword">class</span> <span class="token class-name">HumanUtil</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;============通用方法一===========&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;============通用方法二============&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//将通用方法加入MyInvocationHandler.invoke，也可以直接写到里面。</span>
<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">HumanUtil</span> util <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HumanUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        util<span class="token punctuation">.</span><span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通用方法一</span>
        <span class="token class-name">Object</span> returnValue <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        util<span class="token punctuation">.</span><span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通用方法二</span>
        <span class="token keyword">return</span> returnValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,67),o=[c];function i(l,u){return a(),s("div",null,o)}const d=n(p,[["render",i],["__file","a-5.动态代理.html.vue"]]);export{d as default};
