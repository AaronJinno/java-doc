import{_ as l,a as i,b as c}from"./4-3-4-41bab6ef.js";import{_ as d,r as p,o as r,c as o,a as n,b as a,d as t,e as s}from"./app-dd87de81.js";const u="/java-doc/img/sql/es/4-3-2.jpg",m="/java-doc/img/sql/es/4-3-3.jpg",h="/java-doc/img/sql/es/4-3-5.jpg",v={},b=s('<h2 id="整体步骤" tabindex="-1"><a class="header-anchor" href="#整体步骤" aria-hidden="true">#</a> 整体步骤</h2><ul><li>安装 <ul><li>下载Elasticsearch 8.7.0</li><li>上传到服务器：/opt/soft-bar/</li><li>解压到：/opt/es/（此时ES软件目录为：<code>/opt/es/es-8.7.0/</code>）</li><li>补齐目录：<code>es-8.7.0/data</code>和<code>es-8.7.0/certs</code></li><li>创建es用户：创建一个专门的用户es，用来启动es服务</li></ul></li><li>证书：千万不要再签发证书了，新版本的ES是自动签发证书的</li><li>配置：config/elasticsearch.yml <ul><li>一些基本的配置，因为不是集群，所以不用配置集群信息</li></ul></li><li>启动 <ul><li>debug：有很多bug要提前解决</li><li>启动：常见bug解决后再进行启动</li><li>访问：启动后就可以在浏览器端访问了</li></ul></li></ul><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><p>ES8需要Java17，不过ES8会默认会捆绑JDK，所以不配置Java环境也可以。</p><h4 id="_1-下载es" tabindex="-1"><a class="header-anchor" href="#_1-下载es" aria-hidden="true">#</a> 1. 下载ES</h4>',5),k={href:"https://www.elastic.co/cn/downloads/past-releases#elasticsearch",target:"_blank",rel:"noopener noreferrer"},g=s(`<p>可以在本地下载上传到服务器，也可以直接在服务器进行wget下载。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">wget</span> https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-8.7.0-linux-x86_64.tar.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-上传安装包-规划目录" tabindex="-1"><a class="header-anchor" href="#_2-上传安装包-规划目录" aria-hidden="true">#</a> 2. 上传安装包，规划目录</h4><ul><li>上传目录：<code>/opt/soft-bar/</code>，该目录用来存放安装包</li><li>工作目录：<code>/opt/es/</code>：该目录存放所有ES相关的内容 <ul><li>解压目录：<code>/opt/es/es-8.7.0/</code></li><li>其他ES文件也都放在该目录下，包括Kibana</li></ul></li></ul><h5 id="_3-解压缩" tabindex="-1"><a class="header-anchor" href="#_3-解压缩" aria-hidden="true">#</a> 3. 解压缩</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /opt/soft-bar
<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> elasticsearch-8.7.0-linux-x86_64.tar.gz <span class="token parameter variable">-C</span> /opt/es
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>解压后的目录结构：</p><figure><img src="`+l+`" alt="4-3-1" tabindex="0" loading="lazy"><figcaption>4-3-1</figcaption></figure><ul><li>bin：可执行脚本目录</li><li>config：配置目录</li><li>jdk：内置JDK</li><li>lib：内置类库</li><li>logs：日志目录</li><li>modules：模块目录</li><li>plugins：插件目录</li></ul><h5 id="_4-补齐目录" tabindex="-1"><a class="header-anchor" href="#_4-补齐目录" aria-hidden="true">#</a> 4. 补齐目录</h5><p>解压后的目录结构还缺一个数据文件目录和证书目录。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>不用补齐，这俩目录都会自动创建</p></div><h4 id="_5-创建es用户" tabindex="-1"><a class="header-anchor" href="#_5-创建es用户" aria-hidden="true">#</a> 5. 创建es用户</h4><p>Elasticsearch 不能使用 root用户启动，因此要创建一个名为es的用户操作Elasticsearch。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">useradd</span> es <span class="token comment"># 创建用户</span>
<span class="token function">passwd</span> es <span class="token comment"># 设置密码，回车输入密码，这里暂密码暂定为es</span>
<span class="token function">chown</span> <span class="token parameter variable">-R</span> es:es /opt/es/elasticsearch-8.7.0 <span class="token comment"># 修改文件拥有者</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ca证书" tabindex="-1"><a class="header-anchor" href="#ca证书" aria-hidden="true">#</a> CA证书</h2><div class="hint-container danger"><p class="hint-container-title">警告</p><p>不要再创建证书了，从ES8.4（也许更早）版本开始，证书是自动创建的，手动创建的证书可能会发生冲突，以下创建证书的步骤依然保留，但实际开发中不要创建。</p><p>如下图，启动ES时，自动创建certs目录，并创建了3个证书</p><figure><img src="`+i+'" alt="4-3-6" tabindex="0" loading="lazy"><figcaption>4-3-6</figcaption></figure></div><p>证书是用来进行身份验证，防止请求被篡改的。不使用证书可能会报错。</p><p>ES通过内置的elasticsearch-certutil工具来生成证书。</p><h4 id="_1-ca模式。" tabindex="-1"><a class="header-anchor" href="#_1-ca模式。" aria-hidden="true">#</a> 1. CA模式。</h4><p>创建证书有四种模式：ca、cert、csr、http，我们这里采用CA模式</p><ul><li>CA模式生成新的证书颁发机构(ca)。默认情况下，它生成一个PKCS#12输出文件，其中保存CA证书和CA的私钥。</li><li>也可以指定–pem参数，则命令生成一个zip文件，其中包含PEM格式的证书和私钥。随后可以使用这些文件作为命令的cert模式的输入。</li><li>PKCS#12文件：一种交换数字证书的加密标准。通常用它来加密打包一个私钥及有关的 X.509 证书，产生的文件就是PKCS#12文件。</li></ul><h4 id="_2-ca证书" tabindex="-1"><a class="header-anchor" href="#_2-ca证书" aria-hidden="true">#</a> 2. CA证书</h4><ul><li>证书：用来证明受访问的服务身份信息。</li><li>签名：存在证书上的一个可信标识，代表该证书是经过认证的，因为假冒服务器也可以有证书。</li><li>CA证书：是公认可靠的CA(certificate authority)机构签发的证书</li></ul><figure><img src="'+u+'" alt="4-3-2" tabindex="0" loading="lazy"><figcaption>4-3-2</figcaption></figure><h4 id="_3-ca证书工作机理" tabindex="-1"><a class="header-anchor" href="#_3-ca证书工作机理" aria-hidden="true">#</a> 3. CA证书工作机理</h4><p>通过HTTPS请求的步骤来说明CA证书的工作机理</p><ul><li>浏览器发起https请求</li><li>服务器返回它的证书</li><li>浏览器通过CA的公钥对证书签名进行校验，检查证书是否有效</li><li>浏览器生成一个临时秘钥并用服务器的公钥对它加密，然后将其发送给服务器。</li><li>服务器用私钥解密，得到浏览器发送给它的秘钥， 然后用该秘钥对数据进行加密</li><li>浏览器得到加密数据，并用发给服务端的秘钥进行解密。</li></ul><figure><img src="'+m+`" alt="4-3-3" tabindex="0" loading="lazy"><figcaption>4-3-3</figcaption></figure><h4 id="_4-签发ca证书" tabindex="-1"><a class="header-anchor" href="#_4-签发ca证书" aria-hidden="true">#</a> 4. 签发ca证书</h4><div class="hint-container danger"><p class="hint-container-title">警告</p><p>不用签发，启动ES时，会自动签发。这一步不要再做了</p></div><p>需要用到内置的<code>elasticsearch-certutil ca</code> 命令，在 elasticsearch-8.7.0/bin目录中</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">su</span> es <span class="token comment"># 切换用户</span>
<span class="token builtin class-name">cd</span>  /opt/es/elasticsearch-8.7.0/bin <span class="token comment"># 进入bin目录</span>
./elasticsearch-certutil ca <span class="token comment"># 签发 ca 证书</span>

<span class="token comment"># 签发 ca 证书时有两次交互，直接回车即可</span>
<span class="token comment"># 第一次交互：设置文件名，回车采用默认名，默认文件在ES软件根目录中</span>
Please enter the desired output <span class="token function">file</span> <span class="token punctuation">[</span>elastic-stack-ca.p12<span class="token punctuation">]</span>: 
<span class="token comment"># 第二次交互：设置ca证书密码，直接回车将采用空密码，如果设置了要保存后，后续会用</span>
Enter password <span class="token keyword">for</span> elastic-stack-ca.p12 <span class="token builtin class-name">:</span>  <span class="token comment"># 设置密码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认生成的证书位置：/opt/es/elasticsearch-8.7.0/elastic-stack-ca.p12</p><h4 id="_5-移动证书" tabindex="-1"><a class="header-anchor" href="#_5-移动证书" aria-hidden="true">#</a> 5. 移动证书</h4><div class="hint-container danger"><p class="hint-container-title">警告</p><p>会自动生成证书，这一步不要再做了</p></div><p>生成的证书要放到到config目录内，可以在config目录下创建certs目录用来存放证书。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /opt/es/elasticsearch-8.7.0/config
<span class="token function">mkdir</span> certs
<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>
<span class="token function">mv</span> elastic-* config/certs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-签发http证书" tabindex="-1"><a class="header-anchor" href="#_6-签发http证书" aria-hidden="true">#</a> 6. 签发HTTP证书</h4><div class="hint-container danger"><p class="hint-container-title">警告</p><p>不用签发，启动ES时，会自动签发。这一步不要再做了</p></div><div class="hint-container danger"><p class="hint-container-title">注意</p><p>注意：使用使用 elasticsearch-certutil 工具自己生成的CA，签发的证书属于自认证证书，该证书浏览器是不不会信任的，需要手动让浏览器信任。</p><p>可以选择使用第三方签发的受信任的证书。</p></div><p>使用CA证书签发HTTP证书，以便可以使用HTTP REST API方式访问ES服务。</p><p>其他组件（例如 Kibana 或任何 Elastic 语言客户端）在连接到 ES服务 时会验证此证书。</p><p>生成证书的流程很复杂，交互很多，如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 用户 和目录同上</span>
./elasticsearch-certutil http

<span class="token comment"># 生成http证书的过程要进行以下10次交互</span>
<span class="token comment">##########################</span>

<span class="token comment"># 第1次: 是否生成证书签名请求</span>
Generate a CSR? <span class="token punctuation">[</span>y/N<span class="token punctuation">]</span> <span class="token comment"># n</span>

<span class="token comment"># 第2次: 是否要使用现有 CA</span>
Use an existing CA? <span class="token punctuation">[</span>y/N<span class="token punctuation">]</span> <span class="token comment"># y</span>

<span class="token comment"># 第3次: 指定ca证书的路径：以es软件/config为起始路径</span>
CA Path: <span class="token comment"># certs/elastic-stack-ca.p12 </span>

<span class="token comment"># 第4次: 输入CA证书的密码，之前创建ca证书时未设置，这里直接回车</span>
Password <span class="token keyword">for</span> elastic-stack-ca.p12: <span class="token comment"># 直接回车</span>

<span class="token comment"># 第5次: 证书的生效时间：默认是5y(5年)</span>
For how long should your certificate be valid? <span class="token punctuation">[</span>5y<span class="token punctuation">]</span> <span class="token comment"># 20y </span>

<span class="token comment"># 第6次: 是否为每个节点创建一个单独的证书：不需要，即使是集群也只需主节点创建证书</span>
Generate a certificate per node? <span class="token punctuation">[</span>y/N<span class="token punctuation">]</span> <span class="token comment"># n</span>

<span class="token comment"># 第7和8是用来配置DNS与证书绑定的：(域名-&gt;ip)：绑定证书</span>

<span class="token comment"># 第7次：输入链接到ES的主机名称（域名） # 如果是集群需要所如所有集群的主机名称</span>
<span class="token comment">## 如果没有DNS解析的主机名（域名），就需要使用本地进行hosts映射，或者直接用IP</span>
aicell.cc <span class="token comment"># 回车一次就可以输入一个名字，两次回车就输入完毕</span>
<span class="token comment">#159.75.225.162 没有被DNS解析的域名，直接用ip，访问的时候用ip访问</span>
Is this correct <span class="token punctuation">[</span>Y/n<span class="token punctuation">]</span> <span class="token comment">#y，确认名字输入是否正确</span>

<span class="token comment"># 第8次: 输入主机名(域名）解析的ip地址，需要提前进行DNS解析，或hosts映射</span>
<span class="token comment">## 如果是单节点集群，就要指定端口号</span>
<span class="token number">159.75</span>.225.162 <span class="token comment"># 要与主机名对应，</span>
Is this correct <span class="token punctuation">[</span>Y/n<span class="token punctuation">]</span> <span class="token comment">#y，确认名字输入是否正确</span>


<span class="token comment"># 第9次: 是否对集群中的每个节点重复上述操作，不用</span>
Do you wish to change any of these options? <span class="token punctuation">[</span>y/N<span class="token punctuation">]</span> <span class="token comment"># n </span>

<span class="token comment"># 第10次: 是否给证书加密</span>
Provide a password <span class="token keyword">for</span> the <span class="token string">&quot;http.p12&quot;</span> file:  <span class="token comment"># 连续回车两次，不加密</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完成上述10个步骤，证书就生成好了，是一个压缩包，需要解压获取证书。<br> 证书位置：/opt/es/elasticsearch-8.7.0/elasticsearch-ssl-http.zip</p><h4 id="_7-解压并移动http证书" tabindex="-1"><a class="header-anchor" href="#_7-解压并移动http证书" aria-hidden="true">#</a> 7. 解压并移动http证书</h4><div class="hint-container danger"><p class="hint-container-title">警告</p><p>不用签发，启动ES时，会自动签发。这一步不要再做了</p></div><h5 id="_7-1-解压http证书" tabindex="-1"><a class="header-anchor" href="#_7-1-解压http证书" aria-hidden="true">#</a> 7.1 解压http证书</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span>  /opt/es/elasticsearch-8.7.0 
<span class="token function">unzip</span> elasticsearch-ssl-http.zip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>解压后会在<code>/opt/es/elasticsearch-8.7.0/</code> 目录下产生两个信息目录</p><ul><li>elasticsearch：目录内有http.p12证书</li><li>kibana：目录内有elasticsearch-ca.pem证书</li></ul><h5 id="_7-2-移动证书" tabindex="-1"><a class="header-anchor" href="#_7-2-移动证书" aria-hidden="true">#</a> 7.2 移动证书</h5><p>将两个证书移动到certs目录中。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span>  /opt/es/elasticsearch-8.7.0 
<span class="token function">mv</span> elasticsearch/http.p12 kibana/elasticsearch-ca.pem config/certs
<span class="token function">rm</span> <span class="token parameter variable">-rf</span> elasticsearch kibana <span class="token comment"># 删除之前生成的目录</span>
<span class="token function">mv</span> elasticsearch-ssl-http.zip <span class="token punctuation">..</span>/ <span class="token comment"># 将http证书压缩包移动到别的位置，备份</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h2><p>修改主配置文件：config/elasticsearch.yml</p><p>由于是单机ES，很多配置不用开启，基本上所有配置都采用默认即可。</p><h2 id="启动es" tabindex="-1"><a class="header-anchor" href="#启动es" aria-hidden="true">#</a> 启动ES</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>启动前，最好是先看下debug部分的内容。提前排错。</p></div><h4 id="_1-第一次启动启" tabindex="-1"><a class="header-anchor" href="#_1-第一次启动启" aria-hidden="true">#</a> 1. 第一次启动启</h4><p>第一次启动比较特殊，会额外做三件事：</p><ul><li>返回验证信息：账号、密码、Token等</li><li>创建证书：证书会自动创建</li><li>开启安全模块：开启SSL验证，并自动索引证书，运行其他其他IP访问RESTFul API</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 启动服务</span>
<span class="token builtin class-name">cd</span> /opt/es/elasticsearch-8.7.0/
bin/elasticsearch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-1-返回验证信息" tabindex="-1"><a class="header-anchor" href="#_1-1-返回验证信息" aria-hidden="true">#</a> 1.1 返回验证信息</h5><p>第一次启动控制台打印的验证信息</p><p>━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</p><p>✅ Elasticsearch security features have been automatically configured!</p><p>✅ Authentication is enabled and cluster connections are encrypted.</p><p>Password for the elastic user (reset with <code>bin/elasticsearch-reset-password -u elastic</code>):</p><p><em>p1V7xKwWO8lgV62_aUfd</em></p><p>HTTP CA certificate SHA-256 fingerprint:</p><p><em>30b920bb03429973b605b035c144f7c51c7df327ec396f85e9db3ad82923157d</em></p><p>Configure Kibana to use this cluster:<br> Run Kibana and click the configuration link in the terminal when Kibana starts.<br> Copy the following enrollment token and paste it into Kibana in your browser (valid for the next 30 minutes):</p><p><em>eyJ2ZXIiOiI4LjcuMCIsImFkciI6WyIxNzIuMTYuMC45OjkyMDAiXSwiZmdyIjoiMzBiOTIwYmIwMzQyOTk3M2I2MDViMDM1YzE0NGY3YzUxYzdkZjMyN2VjMzk2Zjg1ZTlkYjNhZDgyOTIzMTU3ZCIsImtleSI6ImczdTZFSWtCb24xMUUyVjlFTmJoOjFjemlfR2FDVFJtaWswQ1Y5TzJJX1EifQ==</em></p><p>Configure other nodes to join this cluster:<br> Copy the following enrollment token and start new Elasticsearch nodes with <code>bin/elasticsearch --enrollment-token &lt;token&gt;</code> (valid for the next 30 minutes):</p><p><code>eyJ2ZXIiOiI4LjcuMCIsImFkciI6WyIxNzIuMTYuMC45OjkyMDAiXSwiZmdyIjoiMzBiOTIwYmIwMzQyOTk3M2I2MDViMDM1YzE0NGY3YzUxYzdkZjMyN2VjMzk2Zjg1ZTlkYjNhZDgyOTIzMTU3ZCIsImtleSI6ImdYdTZFSWtCb24xMUUyVjlFTmJlOm5xQVR4NWwxUUptdWN1endFeWg1alEifQ==</code></p><p>If you&#39;re running in Docker, copy the enrollment token and run:</p><p><code>docker run -e &quot;ENROLLMENT_TOKEN=&lt;token&gt;&quot; </code></p><p><code>docker.elastic.co/elasticsearch/elasticsearch:8.7.0</code><br> ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</p><p>上面的内容只会在第一次启动时显示，注意保存里面的内容，尤其是账号和密码</p><ul><li>账号: elastic</li><li>密码: p1V7xKwWO8lgV62_aUfd</li></ul><h5 id="_1-2-创建证书" tabindex="-1"><a class="header-anchor" href="#_1-2-创建证书" aria-hidden="true">#</a> 1.2 创建证书</h5><p>ES会自动创建ca、http和节点通信三个证书，如下：</p><figure><img src="`+i+`" alt="4-3-6" tabindex="0" loading="lazy"><figcaption>4-3-6</figcaption></figure><h5 id="_1-3-开启安全模块" tabindex="-1"><a class="header-anchor" href="#_1-3-开启安全模块" aria-hidden="true">#</a> 1.3 开启安全模块</h5><p>ES会自动在配置文件elasticsearch.yaml中添加安全相关的配置</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># Enable security features</span>
<span class="token comment">##  激活安全验证能模块</span>
<span class="token key atrule">xpack.security.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">xpack.security.enrollment.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>

<span class="token comment"># Enable encryption for HTTP API client connections, such as Kibana</span>
<span class="token comment">## 开启SSL验证，所有HTTP API都要进行SSL验证</span>
<span class="token key atrule">xpack.security.http.ssl</span><span class="token punctuation">:</span>
  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">keystore.path</span><span class="token punctuation">:</span> certs/http.p12 <span class="token comment"># 索引的证书</span>

<span class="token comment"># Enable encryption and mutual authentication between cluster nodes</span>
<span class="token comment"># 开启集群节点间的加密和相互认证功能</span>
<span class="token key atrule">xpack.security.transport.ssl</span><span class="token punctuation">:</span>
  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">verification_mode</span><span class="token punctuation">:</span> certificate
  <span class="token key atrule">keystore.path</span><span class="token punctuation">:</span> certs/transport.p12 <span class="token comment"># 节点通信的证书</span>
  <span class="token key atrule">truststore.path</span><span class="token punctuation">:</span> certs/transport.p12

<span class="token comment"># Create a new cluster with the current node only</span>
<span class="token comment"># Additional nodes can still join the cluster later</span>
<span class="token comment">## 使用当前节点创建一个新集群，主节点就是当前主机名</span>
<span class="token comment">## 其他节点随后可以加入该节点</span>
<span class="token key atrule">cluster.initial_master_nodes</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;tx-1&quot;</span><span class="token punctuation">]</span>

<span class="token comment"># Allow HTTP API connections from anywhere</span>
<span class="token comment"># Connections are encrypted and require user authentication</span>
<span class="token comment">## 运行所有IP访问 HTTP API </span>
<span class="token key atrule">http.host</span><span class="token punctuation">:</span> 0.0.0.0

<span class="token comment"># Allow other nodes to join the cluster from anywhere</span>
<span class="token comment"># Connections are encrypted and mutually authenticated</span>
<span class="token comment"># 节点通信配置：该配置运行其他任何ip的节点加入该集群，默认是没有开启的。</span>
<span class="token comment">#transport.host: 0.0.0.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-登录es" tabindex="-1"><a class="header-anchor" href="#_2-登录es" aria-hidden="true">#</a> 2. 登录ES</h4><p>输入<code>https://ip或hostname:端口号/</code> 进行访问</p>`,90),f={href:"https://159.75.225.162:9200/",target:"_blank",rel:"noopener noreferrer"},_=s('<p>第一次访问要输入账号和密码，就是第一次启动ES时返回的账号密码（换一个客户端就要输一次密码）。</p><figure><img src="'+c+'" alt="4-3-4" tabindex="0" loading="lazy"><figcaption>4-3-4</figcaption></figure><p>登录后的页面：</p><figure><img src="'+h+`" alt="4-3-5" tabindex="0" loading="lazy"><figcaption>4-3-5</figcaption></figure><p>则表示服务正常启动，且能访问了。</p><h4 id="_5-其他登录方式" tabindex="-1"><a class="header-anchor" href="#_5-其他登录方式" aria-hidden="true">#</a> 5. 其他登录方式</h4><p>所有登录方式都要进行身份验证。</p><ul><li>postman：以请求头的方式，添加格式化后的账号密码</li><li>kibana：需要验证token</li></ul><h4 id="_4-守护进程" tabindex="-1"><a class="header-anchor" href="#_4-守护进程" aria-hidden="true">#</a> 4. 守护进程</h4><p>ES默认启动的方式是前台启动，第一次前台启动为了获取密码信息，之后可以选择守护进程的方式启动</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">su</span> es
<span class="token builtin class-name">cd</span> /opt/es/elasticsearch-8.7.0/
<span class="token comment"># 后台启动服务</span>
bin/elasticsearch <span class="token parameter variable">-d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="debug" tabindex="-1"><a class="header-anchor" href="#debug" aria-hidden="true">#</a> debug</h2><p>一些启动时可能会出现的问题。</p><h4 id="_1-默认jvm内存过大" tabindex="-1"><a class="header-anchor" href="#_1-默认jvm内存过大" aria-hidden="true">#</a> 1. 默认JVM内存过大</h4><p>ES内置JVM的默认内存是4G。</p><p>如果Linux服务器剩余内存过小，就会直接卡死，可以按照优化章节的内容重新配置内存</p><p>ES 目录的 config/jvm.options文件是用来配置内存的。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment">################################################################</span>
<span class="token comment">## IMPORTANT: JVM heap size</span>
<span class="token comment">################################################################</span>
<span class="token comment">## -Xms4g</span>
<span class="token comment">## -Xmx4g</span>
<span class="token punctuation">-</span>Xms1g  <span class="token comment"># 初始启动大小</span>
<span class="token punctuation">-</span>Xmx1g  <span class="token comment"># 可分配的最大内置值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-虚拟内存过小" tabindex="-1"><a class="header-anchor" href="#_2-虚拟内存过小" aria-hidden="true">#</a> 2. 虚拟内存过小</h4><p>报错：<code>max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</code>，虚拟内存过小，只有65530，至少需要262144</p><p>将虚拟内存修改层262144</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看当前虚拟内存</span>
<span class="token function">cat</span> /proc/sys/vm/max_map_count <span class="token comment"># 65530 </span>

<span class="token comment"># 修改虚拟内存</span>
<span class="token function">sudo</span> <span class="token function">sysctl</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">vm.max_map_count</span><span class="token operator">=</span><span class="token number">262144</span> <span class="token comment"># vm.max_map_count=262144</span>

<span class="token comment"># 再次查看当前内存</span>
<span class="token function">cat</span> /proc/sys/vm/max_map_count <span class="token comment"># 262144</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-协议错误" tabindex="-1"><a class="header-anchor" href="#_3-协议错误" aria-hidden="true">#</a> 3. 协议错误</h4><ul><li>报错：received plaintext http traffic on an https chann<br> 配置了ssl，就要用https访问，而不是http</li></ul><h4 id="_4-忘记密码" tabindex="-1"><a class="header-anchor" href="#_4-忘记密码" aria-hidden="true">#</a> 4. 忘记密码</h4><p>第一次启动ES会返回密码信息，如果没有保存，可以采用指令重置密码</p><p>PS: 用户名默认是elastic</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /opt/es/elasticsearch-8.7.0/
bin/elasticsearch-reset-password <span class="token parameter variable">-u</span> elastic
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,28);function x(y,S){const e=p("ExternalLinkIcon");return r(),o("div",null,[b,n("ul",null,[n("li",null,[a("下载地址："),n("a",k,[a("LINUX_X86_64"),t(e)])])]),g,n("p",null,[a("当前配置的URL： "),n("a",f,[a("https://159.75.225.162:9200/"),t(e)]),a(" （没有主机映射，就直接用ip访问了）")]),_])}const w=d(v,[["render",x],["__file","4-3.linux单机.html.vue"]]);export{w as default};
