import{_ as p,r as s,o as c,c as l,a as o,b as a,d as n,w as i,e as u}from"./app-c8f1ef72.js";const r={},d=u(`<h4 id="_1-class类" tabindex="-1"><a class="header-anchor" href="#_1-class类" aria-hidden="true">#</a> 1. Class类</h4><p>Class的全类名为：Object.lang.Class</p><p>Class属于类的类，即每个类所属的类，我们把类当做是对象（万物皆对象），那么类所属的类就是Class类。对于每个类而言，JRE 都为其保留一个不变的 Class 类型的对象。</p><p>Class类是反射的源头。我们需要使用Class类的对象拿到想要的内容。</p><h4 id="_2-class与类的加载" tabindex="-1"><a class="header-anchor" href="#_2-class与类的加载" aria-hidden="true">#</a> 2. Class与类的加载</h4><p>程序经过javac.exe命令以后，会生成一个或多个字节码文件(.class结尾)。接着我们使用java.exe命令对某个字节码文件进行解释运行。相当于将某个字节码文件加载到内存中。此过程就称为类的加载。加载到内存中的类，我们就称为运行时类，此运行时类，就作为Class的一个实例。</p><h4 id="_3-使用class的本质" tabindex="-1"><a class="header-anchor" href="#_3-使用class的本质" aria-hidden="true">#</a> 3. 使用Class的本质</h4><p>Class是直接操纵加载到内存里的类的，Class的实例就对应着一个运行时类。</p><p>我们使用类时，会将类加载到内存中，内存中的这个类就是Class的一个实例。我们可以使用Class类的实例，利用Class提供的方法，来操作内存中的类的一切元素，包括私有元素，因为私有元素也加载到内存中了。</p><h4 id="_4-class的特点" tabindex="-1"><a class="header-anchor" href="#_4-class的特点" aria-hidden="true">#</a> 4. Class的特点</h4><ul><li>Class本身也是一个类</li><li>Class 对象只能由系统建立对象</li><li>一个加载的类在 JVM 中只会有一个Class实例</li><li>一个Class对象对应的是一个加载到JVM中的一个.class文件</li><li>每个类的实例都会记得自己是由哪个 Class 实例所生成</li><li>通过Class可以完整地得到一个类中的所有被加载的结构</li><li>Class类是Reflection的根源，针对任何你想动态加载、运行的类，唯有先获得相应的Class对象</li></ul><h4 id="_5-可以有class对象的元素" tabindex="-1"><a class="header-anchor" href="#_5-可以有class对象的元素" aria-hidden="true">#</a> 5. 可以有Class对象的元素</h4><ul><li>class：外部类，成员(成员内部类，静态内部类)，局部内部类，匿名内部类</li><li>interface：接口</li><li>[]：数组</li><li>enum：枚举</li><li>annotation：注解@interface</li><li>primitive type：基本数据类型</li><li>void</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> c1 <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//class java.lang.Object</span>

<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Override</span><span class="token punctuation">&gt;</span></span> c2 <span class="token operator">=</span> <span class="token class-name">Override</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//interface java.lang.Override</span>

<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> c3 <span class="token operator">=</span> <span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//void</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-获取class类的实例" tabindex="-1"><a class="header-anchor" href="#_6-获取class类的实例" aria-hidden="true">#</a> 6. 获取Class类的实例</h4><p>加载到内存中的运行时类，会缓存一定的时间。在此时间之内，我们可以通过不同的方式来获取此运行时类（即获取Class类的实例），一共有四种方法，以下四个方法创建的Class是同一个Class。</p><h5 id="_6-1-调用运行时类的属性-class" tabindex="-1"><a class="header-anchor" href="#_6-1-调用运行时类的属性-class" aria-hidden="true">#</a> 6.1 调用运行时类的属性：.class</h5><p>若已知具体的类，通过类的class属性获取，该方法最为安全可靠，程序性能最高</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> c1 <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//class ReflectionStudy.Person</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6-2-通过运行时类的对象-调用getclass" tabindex="-1"><a class="header-anchor" href="#_6-2-通过运行时类的对象-调用getclass" aria-hidden="true">#</a> 6.2 通过运行时类的对象,调用getClass()</h5><p>已知某个类的实例，调用该实例的getClass()方法获取Class对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> c2 <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//class ReflectionStudy.Person</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6-3-调用class的静态方法-forname-string-classpath-【常用】" tabindex="-1"><a class="header-anchor" href="#_6-3-调用class的静态方法-forname-string-classpath-【常用】" aria-hidden="true">#</a> 6.3 调用Class的静态方法：forName(String classPath)【常用】</h5><p>已知一个类的全类名（包+类名），且该类在类路径下，可通过Class类的静态方法forName()获取，可能抛出 ClassNotFoundException</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c3 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;ReflectionStudy.Person&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//class ReflectionStudy.Person</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6-4-使用类的加载器-classloader-了解" tabindex="-1"><a class="header-anchor" href="#_6-4-使用类的加载器-classloader-了解" aria-hidden="true">#</a> 6.4 使用类的加载器：ClassLoader (了解)</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ClassLoader</span> cl <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c4 <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">&quot;ReflectionStudy.Person&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//class ReflectionStudy.Person</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-class类的常用方法" tabindex="-1"><a class="header-anchor" href="#_7-class类的常用方法" aria-hidden="true">#</a> 7. Class类的常用方法</h4>`,28);function k(m,v){const e=s("ExternalLinkIcon"),t=s("RouterLink");return c(),l("div",null,[d,o("p",null,[a("详见："),n(t,{to:"/java/func/1.JDK%E5%B8%B8%E7%94%A8%E7%B1%BB/1-8.%E5%8F%8D%E5%B0%84%E7%B1%BB.html",target:"_blank"},{default:i(()=>[a("内置函数>反射类"),n(e)]),_:1})])])}const C=p(r,[["render",k],["__file","a-2.Class.html.vue"]]);export{C as default};
