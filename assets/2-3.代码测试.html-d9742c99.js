import{_ as n,o as a,c as s,e as t}from"./app-a9ffbbba.js";const e={},i=t(`<h2 id="i-集成-junit" tabindex="-1"><a class="header-anchor" href="#i-集成-junit" aria-hidden="true">#</a> Ⅰ. 集成 Junit</h2><p>junit默认已经被SpringBoot继承了。</p><h4 id="_1-pom-xml" tabindex="-1"><a class="header-anchor" href="#_1-pom-xml" aria-hidden="true">#</a> 1. pom.xml</h4><p>spring-boot-starter-test就是junit测试有关的模块，在创建SpringBoot工程时，他说默认导入的。如果是手动通过Maven创建的项目，可以手动导入该starter。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-测试类" tabindex="-1"><a class="header-anchor" href="#_2-测试类" aria-hidden="true">#</a> 2. 测试类</h4><p>SpringBoot已经默认创建了一个测试类：test/java/com/sgugo/XxxApplicationTests</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span> <span class="token comment">//声明测试类</span>
<span class="token keyword">class</span> <span class="token class-name">AifaceApplicationTests</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//测试代码</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>@SpringBootTest</strong>注解定义在类的上方，声明该类为测试类。</p><h4 id="_3-测试的步骤" tabindex="-1"><a class="header-anchor" href="#_3-测试的步骤" aria-hidden="true">#</a> 3. 测试的步骤</h4><ul><li>导入测试对应的starter（创建项目时SpringBoot自动导入了）</li><li>创建测试类（由@SpringBootTest修饰），项目默认有一个测试类。</li><li>注入要测试的对象（IOC自动装载）</li><li>执行要测试的对象对应的方法。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">BlogApplicationTests</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">BookDao</span> bookDao<span class="token punctuation">;</span><span class="token comment">//注入要测试的对象</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        bookDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//执行要测试的对象的方法。</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-测试类的目录规划" tabindex="-1"><a class="header-anchor" href="#_4-测试类的目录规划" aria-hidden="true">#</a> 4. 测试类的目录规划</h4><p>测试类默认的位置和引导类是对应的（package是一样的）。<br> 如果将测试类的位置改变了，测试类将无法运行（包不匹配）。</p><h4 id="_5-classes属性" tabindex="-1"><a class="header-anchor" href="#_5-classes属性" aria-hidden="true">#</a> 5. classes属性</h4><p>当测试类与引导类的包不匹配时，将无法执行测试类。</p><p>此时需要为@SpringBootTest注解添加一个classes属性，指明当前项目的引导类，这样测试类就再次有效了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>calssess <span class="token operator">=</span> <span class="token class-name">BlogApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">BlogApplicationTests</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和Spring整合Junit一样，只是SpringBoot进行了整合简化。SpringBoot不用指定配置类，而是自动去查找配置类（在和引导类相同的包中），如果包里找不到@SpringBootTest注解的类，就会报错，此时就必须手动指定配置类了。</p><h2 id="ii-加载测试专用配置" tabindex="-1"><a class="header-anchor" href="#ii-加载测试专用配置" aria-hidden="true">#</a> Ⅱ. 加载测试专用配置</h2><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>配置文件已经设置好了，但是要测试的属性值与配置文件中的不一样（比如测试兼容性）。如果每次测试前改过来，每次测试后改回去，这太麻烦了。因此需要在测试环境中临时创建一组属性，来覆盖源码中设定的属性。</p></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>并不常用，暂略。</p></div><h2 id="iii-测试api" tabindex="-1"><a class="header-anchor" href="#iii-测试api" aria-hidden="true">#</a> Ⅲ. 测试API</h2><div class="hint-container warning"><p class="hint-container-title">注意</p><p>在test中测试API，而不是在POSTMAN中。</p><p>一般使用POSTMAN或者Swagger，暂略。</p></div><h2 id="iv-数据层测试" tabindex="-1"><a class="header-anchor" href="#iv-数据层测试" aria-hidden="true">#</a> Ⅳ. 数据层测试</h2><div class="hint-container warning"><p class="hint-container-title">注意</p><p>暂略，一般会有测试用的数据库。</p></div>`,26),p=[i];function o(c,l){return a(),s("div",null,p)}const r=n(e,[["render",o],["__file","2-3.代码测试.html.vue"]]);export{r as default};
