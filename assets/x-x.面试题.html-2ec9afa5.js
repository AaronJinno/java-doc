import{_ as a,o as e,c as r,e as s}from"./app-acd7cce4.js";const i={},h=s('<h2 id="基础知识点" tabindex="-1"><a class="header-anchor" href="#基础知识点" aria-hidden="true">#</a> 基础知识点</h2><h4 id="_1-为什么要使用-elasticsearch" tabindex="-1"><a class="header-anchor" href="#_1-为什么要使用-elasticsearch" aria-hidden="true">#</a> 1. 为什么要使用 Elasticsearch</h4><p>ES 查询速度快，基于倒排索引的全文搜索很适合做为搜索引擎。</p><p>系统中的数据，随着业务的发展，时间的推移，将会非常多，而业务中往往采用模糊查询进行数据的搜索，而模糊查询会导致查询引擎放弃索引，导致系统查询数据时都是全表扫描，在百万级别的数据中，查询效率是非常低下的，而我们使用 ES 做一个全文索引，将经常查询的系统功能的某些字段，比如说电商系统的商品表中商品名，描述、价格还有 id 这些字段我们放入 ES 索引库里，可以提高查询速度。</p><h2 id="工作流程" tabindex="-1"><a class="header-anchor" href="#工作流程" aria-hidden="true">#</a> 工作流程</h2><h4 id="_1-elasticsearch-的-master-选举流程" tabindex="-1"><a class="header-anchor" href="#_1-elasticsearch-的-master-选举流程" aria-hidden="true">#</a> 1. Elasticsearch 的 master 选举流程？</h4><p>master 节点的职责主要包括集群、节点和索引的管理，不负责文档级别的管理；data 节点可以关闭 http功能。</p><ul><li>Elasticsearch 的选主是 ZenDiscovery 模块负责的，主要包含 Ping（节点之间通过这个 RPC 来发现彼此）和 Unicast（单播模块包含一个主机列表以控制哪些节点需要 ping 通）这两部分</li><li>对所有可以成为 master 的节点（node.master: true）根据 nodeId 字典排序，每次选举每个节点都把自己所知道节点排一次序，然后选出第一个（第 0 位）节点，暂且认为它是 master 节点。</li><li>如果对某个节点的投票数达到一定的值（可以成为 master 节点数 n/2+1）并且该节点自己也选举自己，那这个节点就是 master。否则重新选举一直到满足上述条件。</li></ul><h4 id="_2-elasticsearch-索引文档的流程" tabindex="-1"><a class="header-anchor" href="#_2-elasticsearch-索引文档的流程" aria-hidden="true">#</a> 2. Elasticsearch 索引文档的流程</h4><ul><li>路由计算：协调节点默认使用文档 ID 参与计算（也支持通过 routing），以便为路由提供合适的分片 <ul><li>公式：shard = hash(document_id) % (num_of_primary_shards)</li></ul></li><li>refresh：当分片所在的节点接收到来自协调节点的请求后，会将请求写入到 Memory Buffer，然后定时（默认是每隔 1 秒）写入到 Filesystem Cache，这个从 Memory Buffer 到 Filesystem Cache 的过程就叫做 refresh；</li><li>translog &amp; flush：某些情况下，存在 Momery Buffer 和 Filesystem Cache 的数据可能会丢失，ES 是通过 translog的机制来保证数据的可靠性的。其实现机制是接收到请求后，同时也会写入到 translog 中，当 Filesystem cache 中的数据写入到磁盘中时，才会清除掉，这个过程叫做 flush；</li><li>在 flush 过程中，内存中的缓冲将被清除，内容被写入一个新段，段的 fsync 将创建一个新的提交点，并将内容刷新到磁盘，旧的 translog 将被删除并开始一个新的 translog。</li><li>flush 触发的时机是定时触发（默认 30 分钟）或者 translog 变得太大（默认为 512M）时；</li></ul><h4 id="_3-elasticsearch-更新和删除文档的流程" tabindex="-1"><a class="header-anchor" href="#_3-elasticsearch-更新和删除文档的流程" aria-hidden="true">#</a> 3. Elasticsearch 更新和删除文档的流程</h4><p>删除和更新也都是写操作，但是 Elasticsearch 中的文档是不可变的，因此不能被删除或者改动以展示其变更；</p><p>磁盘上的每个段都有一个相应的.del 文件。当删除请求发送后，文档并没有真的被删除，而是在.del文件中被标记为删除。该文档依然能匹配查询，但是会在结果中被过滤掉。当段合并时，在.del 文件中被标记为删除的文档将不会被写入新段。</p><p>在新的文档被创建时，Elasticsearch 会为该文档指定一个版本号，当执行更新时，旧版本的文档在.del文件中被标记为删除，新版本的文档被索引到一个新段。旧版本的文档依然能匹配查询，但是会在结果中被过滤掉。</p><h4 id="_4-elasticsearch-搜索的流程" tabindex="-1"><a class="header-anchor" href="#_4-elasticsearch-搜索的流程" aria-hidden="true">#</a> 4. Elasticsearch 搜索的流程</h4><p>暂略</p><h2 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理" aria-hidden="true">#</a> 异常处理</h2><h4 id="_1-集群脑裂问题" tabindex="-1"><a class="header-anchor" href="#_1-集群脑裂问题" aria-hidden="true">#</a> 1. 集群脑裂问题</h4><h5 id="_1-1-成因" tabindex="-1"><a class="header-anchor" href="#_1-1-成因" aria-hidden="true">#</a> 1.1 成因</h5><ul><li>网络问题：集群间的网络延迟导致一些节点访问不到 master，认为 master 挂掉了从而选举出新的master，并对 master 上的分片和副本标红，分配新的主分片</li><li>节点负载：主节点的角色既为 master 又为 data，访问量较大时可能会导致 ES 停止响应造成大面积延迟，此时其他节点得不到主节点的响应认为主节点挂掉了，会重新选取主节点。</li><li>内存回收：data 节点上的 ES 进程占用的内存较大，引发 JVM 的大规模内存回收，造成 ES 进程失去响应。</li></ul><h5 id="_1-2-方案" tabindex="-1"><a class="header-anchor" href="#_1-2-方案" aria-hidden="true">#</a> 1.2 方案</h5><ul><li>减少误判：discovery.zen.ping_timeout 节点状态的响应时间，默认为 3s，可以适当调大，如果 master 在该响应时间的范围内没有做出响应应答，判断该节点已经挂掉了。调大参数（如 6s，<br> discovery.zen.ping_timeout:6），可适当减少误判。</li><li>选举触发: discovery.zen.minimum_master_nodes: 1，该参数是用于控制选举行为发生的最小集群主节点数量。当备选主节点的个数大于等于该参数的值，且备选主节点中有该参数个节点认为主节点挂了，进行选举。官方建议为（n/2）+1，n 为主节点个数（即有资格成为主节点的节点个数）</li><li>角色分离：即 master 节点与 data 节点分离，限制角色</li></ul>',22),t=[h];function l(c,d){return e(),r("div",null,t)}const o=a(i,[["render",l],["__file","x-x.面试题.html.vue"]]);export{o as default};
