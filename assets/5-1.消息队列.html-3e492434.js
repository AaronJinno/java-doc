import{_ as n,o as s,c as a,e}from"./app-2f916dc9.js";const t={},p=e(`<h2 id="rabbitmq" tabindex="-1"><a class="header-anchor" href="#rabbitmq" aria-hidden="true">#</a> RabbitMQ</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>连接信息在yml配置文件中配置。</p><p>队列、交换机的声明在专门的配置类中，消费者和生产者直接使用即可。</p><p><strong>SpringBoot对RabbitMQ只是整合了依赖和配置，具体用法详见：RabbitMQ。</strong></p></div><h4 id="_1-依赖" tabindex="-1"><a class="header-anchor" href="#_1-依赖" aria-hidden="true">#</a> 1. 依赖</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--rabbitmq--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-yml" tabindex="-1"><a class="header-anchor" href="#_2-yml" aria-hidden="true">#</a> 2. yml</h4><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">serserver</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8021</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> rabbitmq<span class="token punctuation">-</span>provider
  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span> <span class="token comment">#配置rabbitmq服务器</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> 159.75.225.162
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> admin
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
    <span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> / <span class="token comment">#虚拟host,默认是</span>
    <span class="token key atrule">listener</span><span class="token punctuation">:</span>
      <span class="token key atrule">simple</span><span class="token punctuation">:</span>
        <span class="token key atrule">prefetch</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 设置预取值,默认是0[轮训],1为根据性能不公平分发  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-使用指南" tabindex="-1"><a class="header-anchor" href="#_3-使用指南" aria-hidden="true">#</a> 3. 使用指南</h4><h5 id="基本使用过程" tabindex="-1"><a class="header-anchor" href="#基本使用过程" aria-hidden="true">#</a> 基本使用过程</h5><ul><li>搭建好环境：引入依赖、做好yml配置</li><li>创建一个config包，包里按需创建队列配置类， <ul><li>返回队列Bean</li><li>返回交换器Bean（共五种）</li><li>返回绑定Bean</li></ul></li><li>生产者发送消息 <ul><li>创建一个生产者Service，调用RabbitTemplate.convertAndSend向交换机发送消息</li></ul></li><li>消费者接收消息 <ul><li>创建一个消费者Service，使用@RabbitListener监听目标队列，来接受消息。</li></ul></li></ul><p>PS：实际开发中，生产者和消费者大概率分属于两个SpringBoot模块。</p><h5 id="配置类说明" tabindex="-1"><a class="header-anchor" href="#配置类说明" aria-hidden="true">#</a> 配置类说明</h5><p>-目的：<em>创建队列和交换机并将他们绑定，然后全部加入Bean</em>。</p><p>按需创建配置类，一个配置类可以创建多个队列，可以创建各种类型的交换机（因为配置类本身就可以放很多@Bean）</p><p>为了结构清晰，配置类根据功能创建；不要忘记将配置类和队列绑定。</p><h4 id="_4-使用示例-direct" tabindex="-1"><a class="header-anchor" href="#_4-使用示例-direct" aria-hidden="true">#</a> 4. 使用示例：Direct</h4><h5 id="_4-1-配置类" tabindex="-1"><a class="header-anchor" href="#_4-1-配置类" aria-hidden="true">#</a> 4.1 配置类</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sgugo<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitConfig</span> <span class="token punctuation">{</span>
    <span class="token comment">//定义队列名和交换机名</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">DIRECT_Q1</span> <span class="token operator">=</span> <span class="token string">&quot;direct_Q1&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">DIRECT_EXCHANGE</span> <span class="token operator">=</span> <span class="token string">&quot;directExchange&quot;</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span> <span class="token comment">//返回一个队列</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">directQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token constant">DIRECT_Q1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span> <span class="token comment">//返回一个交换机</span>
    <span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token constant">DIRECT_EXCHANGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span> <span class="token comment">//将交换机与队列绑定</span>
    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">bindingDirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">directQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">&quot;route1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-2-生产者service-发送消息" tabindex="-1"><a class="header-anchor" href="#_4-2-生产者service-发送消息" aria-hidden="true">#</a> 4.2 生产者Service：发送消息</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendMessageServer</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendDirectMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;love &amp; peace&quot;</span><span class="token punctuation">;</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;directExchange&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;route1&quot;</span><span class="token punctuation">,</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-3-生成者controller-调用service发送消息" tabindex="-1"><a class="header-anchor" href="#_4-3-生成者controller-调用service发送消息" aria-hidden="true">#</a> 4.3 生成者Controller：调用Service发送消息</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sgugo<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">SendMessageServer</span> server<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;sendMsg&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        server<span class="token punctuation">.</span><span class="token function">sendDirectMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;OK&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-4-消费者-监听消息" tabindex="-1"><a class="header-anchor" href="#_4-4-消费者-监听消息" aria-hidden="true">#</a> 4.4 消费者：监听消息</h5><p>通过@RabbitListener注解的queues监听指定的队列。当交换机想队列中推送消息时，消息将会逐条赋值给注解下面方法的参数。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DirectConsumer</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;direct-queue1&quot;</span><span class="token punctuation">)</span><span class="token comment">//设置监听队列1</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listenerDirect1</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;direct接受消息1&quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;direct-queue2&quot;</span><span class="token punctuation">)</span><span class="token comment">//设置监听队列2</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listenerDirect2</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;direct接受消息2&quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-5-测试效果" tabindex="-1"><a class="header-anchor" href="#_4-5-测试效果" aria-hidden="true">#</a> 4.5 测试效果</h5><ul><li>启动服务器：队列和交换机被创建出来，可在web页面查看</li><li>发送消息：访问Controller中的sendMsg方法发送消息，访问多次，可发送多次消息。 <ul><li>同时在web页面可以看到，积压了发送的消息。</li></ul></li><li>创建消费者：消费者只需创建，无需执行（当然类需要加入bean） <ul><li>只要@RabbitListener监听的队列有消息推送过来，就会自动执行下面的方法去处理消息。</li></ul></li></ul><h2 id="activemq" tabindex="-1"><a class="header-anchor" href="#activemq" aria-hidden="true">#</a> ActiveMQ</h2><h4 id="_1-依赖-1" tabindex="-1"><a class="header-anchor" href="#_1-依赖-1" aria-hidden="true">#</a> 1. 依赖</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-activemq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-yml配置" tabindex="-1"><a class="header-anchor" href="#_2-yml配置" aria-hidden="true">#</a> 2. yml配置</h4><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">activemq</span><span class="token punctuation">:</span>
    <span class="token key atrule">broker-url</span><span class="token punctuation">:</span> tcp<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">61616</span> <span class="token comment"># 配置ActiveMQ的服务器地址</span>
    <span class="token key atrule">jms</span><span class="token punctuation">:</span>
      <span class="token key atrule">pub-sub-domain</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 配置消息模型,true表示订阅模式，默认为点对点模式</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-操作activemq" tabindex="-1"><a class="header-anchor" href="#_3-操作activemq" aria-hidden="true">#</a> 3. 操作ActiveMQ</h4><p>使用JmsMessagingTemplate操作ActiveMQ</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageServiceActivemqImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MessageService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">JmsMessagingTemplate</span> messagingTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;待发送短信的订单已纳入处理队列，id：&quot;</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        messagingTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;order.queue.id&quot;</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">doMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> id <span class="token operator">=</span> messagingTemplate<span class="token punctuation">.</span><span class="token function">receiveAndConvert</span><span class="token punctuation">(</span><span class="token string">&quot;order.queue.id&quot;</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;已完成短信发送业务，id：&quot;</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-1-convertandsend-发送消息" tabindex="-1"><a class="header-anchor" href="#_3-1-convertandsend-发送消息" aria-hidden="true">#</a> 3.1 convertAndSend：发送消息</h5><p>该方法发送消息时会先将消息的类型转换成字符串，然后再发送。</p><ul><li>参数1：队列名，消息发送的位置</li><li>参数2：消息内容</li></ul><h5 id="_3-2-receiveandconvert-接收消息" tabindex="-1"><a class="header-anchor" href="#_3-2-receiveandconvert-接收消息" aria-hidden="true">#</a> 3.2 receiveAndConvert：接收消息</h5><p>接收消息会先将消息接收到，然后再转换成指定的数据类型</p><ul><li>参数1：队列，消息读取的位置</li><li>参数2：消息要转换成什么类型。</li></ul><h4 id="_4-消息监听器" tabindex="-1"><a class="header-anchor" href="#_4-消息监听器" aria-hidden="true">#</a> 4. 消息监听器</h4><p>使用消息监听器在服务器启动后，监听指定位置（生产者），当消息出现后，立即消费消息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span> <span class="token comment">//加入bean</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageListener</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@JmsListener</span><span class="token punctuation">(</span>destination <span class="token operator">=</span> <span class="token string">&quot;order.queue.id&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@SendTo</span><span class="token punctuation">(</span><span class="token string">&quot;order.other.queue.id&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;已完成短信发送业务，id：&quot;</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;new:&quot;</span><span class="token operator">+</span>id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>@JmsListener：注解@JmsListener定义当前方法监听ActiveMQ中指定名称的消息队列 <ul><li>destination属性就是要监听的队列名</li></ul></li><li>@SendTo：队列转发。消息接收并处理完后，转发到下一个消息队列中。这样即可构造连续执行的顺序消息队列。 <ul><li>属性value就是要转发的队列名。</li></ul></li></ul><h4 id="_6-总结" tabindex="-1"><a class="header-anchor" href="#_6-总结" aria-hidden="true">#</a> 6. 总结</h4><ul><li>springboot整合ActiveMQ提供了JmsMessagingTemplate对象作为客户端操作消息队列</li><li>操作ActiveMQ需要配置ActiveMQ服务器地址，默认端口61616</li><li>企业开发时通常使用监听器来处理消息队列中的消息，设置监听器使用注解@JmsListener</li></ul><h2 id="rocketmq" tabindex="-1"><a class="header-anchor" href="#rocketmq" aria-hidden="true">#</a> RocketMQ</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>暂略。</p></div><h2 id="kafka" tabindex="-1"><a class="header-anchor" href="#kafka" aria-hidden="true">#</a> Kafka</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>暂略。</p></div>`,50),i=[p];function c(o,l){return s(),a("div",null,i)}const r=n(t,[["render",c],["__file","5-1.消息队列.html.vue"]]);export{r as default};
