import{_ as o,r as n,o as c,c as l,a as i,b as a,d as s,w as u,e}from"./app-77176646.js";const r="/java-doc/img/java/javase/6-5-1.jpg",d={},k=e('<h2 id="i-set-接口" tabindex="-1"><a class="header-anchor" href="#i-set-接口" aria-hidden="true">#</a> Ⅰ. Set 接口</h2><h4 id="_1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-介绍" aria-hidden="true">#</a> 1. 介绍</h4><p>Set接口是Collection的子接口，Set 集合用来储存无序的的不相同的元素（使用equals()判断）。该接口的结构如下：</p><ul><li>Collection接口：单列集合，用来存储一个一个的对象 <ul><li>Set接口：存储无序的、不可重复的数据 --&gt;数学中的“集合” <ul><li>HashSet：主要实现类 <ul><li>LinkedHashSet</li></ul></li><li>TreeSet</li></ul></li></ul></li></ul><h4 id="_2-set数据存储的特点" tabindex="-1"><a class="header-anchor" href="#_2-set数据存储的特点" aria-hidden="true">#</a> 2. Set数据存储的特点</h4><p>储存无序的，不可重复的数据，以HashSet为例：</p><ul><li>无序性：不等于随机性。存储的数据在底层数组中并非按照数组索引的顺序添加，而是根据数据的哈希值决定的。</li><li>不可重复性：保证添加的元素按照equals()判断时，不能返回true.即：相同的元素只能添加一个。</li></ul><h4 id="_3-hashset【主要实现类】" tabindex="-1"><a class="header-anchor" href="#_3-hashset【主要实现类】" aria-hidden="true">#</a> 3. HashSet【主要实现类】</h4><p>HashSet 是 Set 接口的典型实现，大多数时候使用 Set 集合时都使用这个实现类。</p><ul><li>数据结构：数组+链表</li><li>HashSet 按 Hash 算法来存储集合中的元素，因此具有很好的存取、查找、删除性能。</li><li>Set接口的主要实现类；线程不安全的；可以存储null值</li></ul><h5 id="_3-1-特点" tabindex="-1"><a class="header-anchor" href="#_3-1-特点" aria-hidden="true">#</a> 3.1 特点</h5><ul><li>不能保证元素的排列顺序</li><li>HashSet 不是线程安全的</li><li>集合元素可以是 null</li></ul><h5 id="_3-2-hashset-集合判断两个元素相等的标准" tabindex="-1"><a class="header-anchor" href="#_3-2-hashset-集合判断两个元素相等的标准" aria-hidden="true">#</a> 3.2 HashSet 集合判断两个元素相等的标准</h5><p>两个对象通过 hashCode() 方法比较相等，并且两个对象的 equals() 方法返回值也相等。</p><p>对于存放在Set容器中的对象， 对应的类一定要重写equals() 和hashCode(Object<br> obj) 方法，以实现对象相等规则 。即： “相等的对象必须具有相等的散列码”</p><h4 id="_4-linkedhashset【hashset的子类】" tabindex="-1"><a class="header-anchor" href="#_4-linkedhashset【hashset的子类】" aria-hidden="true">#</a> 4. LinkedHashSet【HashSet的子类】</h4><ul><li>数据结构：数组+链表</li><li>遍历其内部数据时，可以按照添加的顺序遍历</li><li>LinkedHashSet插入性能略低于 HashSet，但在迭代访问 Set 里的全部元素时有很好的性能。</li><li>LinkedHashSet 根据元素的 hashCode 值来决定元素的存储位置，但它同时使用双向链表维护元素的次序，这使得元素看起来是以插入顺序保存的。</li></ul><h4 id="_5-treeset" tabindex="-1"><a class="header-anchor" href="#_5-treeset" aria-hidden="true">#</a> 5. TreeSet</h4><ul><li>数据结构：Tree（红黑树）</li><li>TreeSet 是 SortedSet 接口的实现类，TreeSet 可以确保集合元素处于排序状态。</li><li>TreeSet类新增了很多方法。</li><li>可以按照添加对象的指定属性，进行排序。</li><li>特点：有序，查询速度比List快</li><li>自然排序：TreeSet 会调用集合元素的 compareTo(Object obj) 方法来比较元素之间的大小关系，然后将集合元素按升序(默认情况)排列 <ul><li>如果试图把一个对象添加到 TreeSet 时，则该对象的类必须实现 Comparable接口。</li></ul></li></ul><h4 id="_6-set接口的方法" tabindex="-1"><a class="header-anchor" href="#_6-set接口的方法" aria-hidden="true">#</a> 6. Set接口的方法</h4><p>Set接口中没有额外定义新的方法，使用的都是Collection中声明过的方法。</p>',21),h=e('<h4 id="_7-底层原理-数据的添加过程与底层结构" tabindex="-1"><a class="header-anchor" href="#_7-底层原理-数据的添加过程与底层结构" aria-hidden="true">#</a> 7. 底层原理：数据的添加过程与底层结构</h4><p>核心：数据添加时要保证，数据的不可重复性（equals返回false）。</p><p>如果我们只是简单的用新数据比对旧数据，那么当集合中的数据过多时，就要跟之前添加的每一个数据进行equals比对，效率太低，所以java采用的别的方法，以HashSet为例：</p><h5 id="_7-1-核心原理" tabindex="-1"><a class="header-anchor" href="#_7-1-核心原理" aria-hidden="true">#</a> 7.1 核心原理</h5><ul><li>不同数据的hash值是不同的，所以java采用了一种特殊的算法，先把要添加的元素取哈希值，然后通过一种算法算出他应该储存的位置（比如取模16）。</li><li>这样，如果两个数据的哈希值不同，就一定不会放到同一个位置，即存放数据之前，只要该位置没有其他数据，就一定不会存在重复的数据</li><li>而如果两个元素通过算法计算的位置是一样的（元素不一定相同），则先去判断hash值是否相同，不同就添加成功，相同的话再去判断equals，如果不同就以链表的形式添加到该元素后面，如果相同，就添加失败。</li><li>无序性：这也是为什么Set集合是无序的原因：为了高效的进行互斥性比对。</li></ul><h5 id="_7-2-添加过程分析" tabindex="-1"><a class="header-anchor" href="#_7-2-添加过程分析" aria-hidden="true">#</a> 7.2 添加过程分析</h5><ul><li>①向HashSet中添加元素a：首先调用元素所在类的hashCode()方法，计算元素a的哈希值，此哈希值，接着通过某种算法计算在HashSet底层数组中存放的位置（索引位置）。</li><li>②判断要添加的位置上有没有其他元素： <ul><li>情况1：没有其他元素，直接添加成功</li><li>有其他元素b（或者以链表形式存在多个元素），这比较a与元素b的hash值 <ul><li>情况2：hash值不同，添加成功</li><li>hash值相同，则需要调用a所在类的equals方法： <ul><li>返回true，元素a添加失败</li><li>情况3：返回false，添加成功</li></ul></li></ul></li></ul></li></ul><h5 id="_7-3-储存的方式" tabindex="-1"><a class="header-anchor" href="#_7-3-储存的方式" aria-hidden="true">#</a> 7.3 储存的方式</h5><p>HashSet底层是以数组+链表的形式储存的。</p><p>添加元素时，元素首先以数组的形式储存【上述情况1】。如果数组的索引处已经有值了，还需要在此处添加元素【上述情况2和3】，则与已经存在指定索引位置上数据以链表的方式存储。</p><h5 id="_7-4-链表的形式" tabindex="-1"><a class="header-anchor" href="#_7-4-链表的形式" aria-hidden="true">#</a> 7.4 链表的形式：</h5><ul><li>jdk 7 :元素a放到数组中，指向原来的元素。</li><li>jdk 8 :原来的元素在数组中，指向元素a</li></ul><figure><img src="'+r+`" alt="6-5-1" tabindex="0" loading="lazy"><figcaption>6-5-1</figcaption></figure><h4 id="_8-hashcode与equals的重写" tabindex="-1"><a class="header-anchor" href="#_8-hashcode与equals的重写" aria-hidden="true">#</a> 8. hashCode与equals的重写</h4><p>要求：向set(主要指：HashSet、LinkedHashSet)中添加的数据，其所在的类一定要重写hashCode()和equals()，尤其是自定义的类。</p><h5 id="_8-1-hahscode" tabindex="-1"><a class="header-anchor" href="#_8-1-hahscode" aria-hidden="true">#</a> 8.1 HahsCode</h5><p>对于object元素，即使两个对象完全一样（equals为true），但是只要他们不是同一个对象，其hashcode也是不同的，因为Object类底层默认是通过对象储存的地址来计算hashcode的，对象的存放地址是随机的，即hashcode值也是随机，且不同的。</p><p>因此，对于自定义类，我们要重写hashCode()方法。</p><h5 id="_8-2-equals" tabindex="-1"><a class="header-anchor" href="#_8-2-equals" aria-hidden="true">#</a> 8.2 equals</h5><p>因为我们想通过对象的值是否相同来判断对象的异同，而非地址，因此要重写equals方法</p><h5 id="_8-3-重写原则" tabindex="-1"><a class="header-anchor" href="#_8-3-重写原则" aria-hidden="true">#</a> 8.3 重写原则</h5><p>在ideal中，直接alt + insert，让编辑器帮我们重写即可。具体重写的规则和细节，暂时不需要掌握。</p><p>如果自己手动重写，则有以下注意点：</p><ul><li>重写的hashCode()和equals()尽可能保持一致性：相等的对象必须具有相等的散列码</li><li>小技巧：对象中用作 equals() 方法比较的 Field，都应该用来计算 hashCode 值。</li></ul><h4 id="_9-补充-hashcode与值" tabindex="-1"><a class="header-anchor" href="#_9-补充-hashcode与值" aria-hidden="true">#</a> 9. 补充：hashCode与值</h4><p>结论：hashCode相同，值不一定相同，值相同，那么hashCode一定相同。</p><p>不同的类对hashCode的重写方式（算法）不同，可能会造成不同对象拥有相同的HashCode。</p><h5 id="_9-1-哈希算法" tabindex="-1"><a class="header-anchor" href="#_9-1-哈希算法" aria-hidden="true">#</a> 9.1 哈希算法</h5><p>详情，查询：密码学，哈希算法；</p><p>哈希值的长度是固定的，也就是取值范围是有限的，而输入数据的取值范围是无限的，所以总会找到两个不同的输入拥有相同的哈希。所以，哈希函数的安全性肯定是个相对概念。如果出现了两个不同输入有相同输出的情况，就叫碰撞，collision 。不同的哈希算法，哈希位数越多，也就基本意味着安全级别越高，或者说它的”抗碰撞性“就越好。</p><p>我们在重写hashCode，设计哈希算法时，要综合考虑效率和”哈希冲突“。</p><h5 id="_9-2-哈希冲突" tabindex="-1"><a class="header-anchor" href="#_9-2-哈希冲突" aria-hidden="true">#</a> 9.2 哈希冲突</h5><p>当两个不同对象的哈希值相同时，就称为：哈希冲突。</p><p>频繁的哈希冲突会降低数据存取的效率，需要优化哈希算法。</p><h2 id="ii-set-使用" tabindex="-1"><a class="header-anchor" href="#ii-set-使用" aria-hidden="true">#</a> Ⅱ. Set 使用</h2><p>Set接口中没有额外定义新的方法，使用的都是Collection中声明过的方法。</p><p>基本的使用，就是Collection接口中方法的使用。</p><h4 id="_1-linkedhashset" tabindex="-1"><a class="header-anchor" href="#_1-linkedhashset" aria-hidden="true">#</a> 1. LinkedHashSet</h4><p>LinkedHashSet作为HashSet的子类，也不允许出现重复的元素。</p><p>遍历LinkedHashSet集合，会根据添加数据的顺序进行遍历。</p><ul><li>底层：LinkedHashSet 根据元素的 hashCode 值来决定元素的存储位置，但它同时使用双向链表维护元素的次序，这使得元素看起来是以插入顺序保存的记录了一个双向链表。</li><li>特点：LinkedHashSet插入性能略低于 HashSet，但对于频繁的遍历操作，LinkedHashSet效率高于HashSet。</li><li>注意：当TreeSet的构造函数有没有参数时，该集合的类必须实现Comparable接口，并重写compareTo方法，当TreeSet有参数时，该参数必须是Comparator的对象。</li></ul><p>使用示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">LinkedHashSet</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;AA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;CC&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">129</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token comment">//打印结果：[456, 123, AA, CC, User{name=&#39;Tom&#39;, age=12}, 129]</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Iterator</span> it <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：自定义类中一定要重写equal和hashcode方法</p><h4 id="_2-treeset" tabindex="-1"><a class="header-anchor" href="#_2-treeset" aria-hidden="true">#</a> 2. TreeSet</h4><p>如果使用TreeSet，一定要重写compareTo方法或compare方法，不然会抛出异常（JDK1.8）。<br> TreeSet遍历数据，会根据自己定义的排序方式进行排序。</p><ul><li>向TreeSet中添加的数据，要求是相同类的对象。不然就报异常。TreeSet中不允许添加相同的对象。</li><li>底层：TreeSet底层是红黑树</li></ul><h5 id="_2-1-比较对象是否相同的方法" tabindex="-1"><a class="header-anchor" href="#_2-1-比较对象是否相同的方法" aria-hidden="true">#</a> 2.1 比较对象是否相同的方法</h5><p>TreeSet中，不是通过比较两个对象的equals和hashcode来判断是否相同的，而是通过排序方法。</p><ul><li>①自然排序：compareTo()返回0，即两个对象相同</li><li>②定制排序：compare()返回0，即两个对象相同</li></ul><h5 id="_2-2-示例-自然排序" tabindex="-1"><a class="header-anchor" href="#_2-2-示例-自然排序" aria-hidden="true">#</a> 2.2 示例：自然排序</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">TreeSet</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;Jerry&quot;</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;Jack&quot;</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;Jack&quot;</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//[User{name=&#39;Tom&#39;, age=12}, User{name=&#39;Jerry&#39;, age=32}, </span>
<span class="token comment">//User{name=&#39;Jack&#39;, age=33}]</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//重复的数据被排除</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token comment">//compareTo的重写</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">User</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span>o<span class="token punctuation">;</span>
        <span class="token keyword">int</span> compare <span class="token operator">=</span> <span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>compare <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> compare<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span>user<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;输入的类型不匹配&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-3-示例-定制排序" tabindex="-1"><a class="header-anchor" href="#_2-3-示例-定制排序" aria-hidden="true">#</a> 2.3 示例：定制排序</h5><p>定制排序，就是使用Comparetor接口进行排序。</p><p>如果使用定制排序，那么TreeSet的构造函数需要传入参数，参数就是Comparator接口的实例。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//Comparator接口的实例</span>
<span class="token class-name">Comparator</span> com <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o1<span class="token punctuation">,</span><span class="token class-name">Object</span> o2<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>o1 <span class="token keyword">instanceof</span> <span class="token class-name">User</span> <span class="token operator">&amp;&amp;</span> o2 <span class="token keyword">instanceof</span> <span class="token class-name">User</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">User</span> u1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span>o1<span class="token punctuation">;</span>
            <span class="token class-name">User</span> u2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span>o2<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>u2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;输入的数据类型不匹配&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name">TreeSet</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span>com<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将Comparator对象作为参数</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//其它的同上，可以进行add和其他操作了。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,56);function m(v,b){const t=n("ExternalLinkIcon"),p=n("RouterLink");return c(),l("div",null,[k,i("p",null,[a("详见："),s(p,{to:"/java/func/2.JDK.util%E5%8C%85/2-3.Collection.html",target:"_blank"},{default:u(()=>[a("内置函数>Collection+"),s(t)]),_:1})]),h])}const S=o(d,[["render",m],["__file","6-5.Set.html.vue"]]);export{S as default};
