import{_ as a,o as n,c as s,e}from"./app-acb3e2bc.js";const i="/java-doc/img/java/javase/2-b-1.jpg",l={},t=e(`<h2 id="i-代码块" tabindex="-1"><a class="header-anchor" href="#i-代码块" aria-hidden="true">#</a> Ⅰ. 代码块</h2><h4 id="_1-作用" tabindex="-1"><a class="header-anchor" href="#_1-作用" aria-hidden="true">#</a> 1. 作用</h4><p>用来初始化类、对象；</p><p>代码块里面可以像方法体一样，写一些执行的代码。</p><h4 id="_2-格式" tabindex="-1"><a class="header-anchor" href="#_2-格式" aria-hidden="true">#</a> 2. 格式</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">{</span>
    <span class="token comment">//这里写代码</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span><span class="token punctuation">{</span> <span class="token comment">//静态代码块</span>
    <span class="token comment">//这里写代码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-分类" tabindex="-1"><a class="header-anchor" href="#_3-分类" aria-hidden="true">#</a> 3. 分类</h4><p>一个类中代码块若有修饰符，则只能被static修饰，称为 静态代码块(static block)，没有使用static修饰的，为非静态代码块。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token class-name">String</span> desc <span class="token operator">=</span> <span class="token string">&quot;I&#39;m Gay&quot;</span><span class="token punctuation">;</span>
    
    <span class="token keyword">static</span><span class="token punctuation">{</span><span class="token comment">//static代码块</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;代码块可以输出&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        desc <span class="token operator">=</span> <span class="token string">&quot;I&#39;m not Gay&quot;</span><span class="token punctuation">;</span><span class="token comment">//可以给静态属性赋值</span>
        <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可以调用静态方法</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">{</span> <span class="token comment">//非static代码块</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;代码块可以输出&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//调用非静态结构：为非静态属性赋值</span>
        <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//掉用非静态方法</span>
        desc <span class="token operator">=</span> <span class="token string">&quot;Yes&quot;</span> <span class="token comment">//调用静态结构</span>
        <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-1-静态代码块" tabindex="-1"><a class="header-anchor" href="#_3-1-静态代码块" aria-hidden="true">#</a> 3.1 静态代码块</h5><ul><li>内部可以有输出语句</li><li>随着类的加载而执行,而且只执行一次</li><li>作用：初始化类的信息</li><li>如果一个类中定义了多个静态代码块，则按照声明的先后顺序执行</li><li>静态代码块的执行要优先于非静态代码块的执行</li><li>静态代码块内只能调用静态的属性、静态的方法，不能调用非静态的结构</li></ul><h5 id="_3-2-非静态代码块" tabindex="-1"><a class="header-anchor" href="#_3-2-非静态代码块" aria-hidden="true">#</a> 3.2 非静态代码块</h5><ul><li>内部可以有输出语句</li><li>随着对象的创建而执行</li><li>每创建一个对象，就执行一次非静态代码块</li><li>作用：可以在创建对象时，对对象的属性等进行初始化</li><li>如果一个类中定义了多个非静态代码块，则按照声明的先后顺序执行</li><li>非静态代码块内可以调用静态的属性、静态的方法，或非静态的属性、非静态的方法</li></ul><h4 id="_4-开发中代码块的作用" tabindex="-1"><a class="header-anchor" href="#_4-开发中代码块的作用" aria-hidden="true">#</a> 4. 开发中代码块的作用</h4><p>当在初始化之前要进行一些操作时，可以使用代码块进行：先操作再赋值。</p><h2 id="ii-javabean" tabindex="-1"><a class="header-anchor" href="#ii-javabean" aria-hidden="true">#</a> Ⅱ. JavaBean</h2><p>JavaBean是一种Java语言写成的可重用组件（本质是一套Java书写规范）。</p><p>所谓javaBean，是指符合如下标准的Java类：</p><ul><li>类是公共的</li><li>有一个无参的公共的构造器</li><li>所有属性(如果有) 都是private，并且提供set/get (如果boolean 则get 可以替换成is)</li></ul><h4 id="_1-背景" tabindex="-1"><a class="header-anchor" href="#_1-背景" aria-hidden="true">#</a> 1. 背景</h4><p>Java语言欠缺属性、事件、多重继承功能。所以，如果要在Java程序中实现一些面向对象编程的常见需求，只能手写大量胶水代码。Java Bean正是编写这套胶水代码的惯用模式或约定。这些约定包括getXxx、setXxx、isXxx、addXxxListener、XxxEvent等。遵守上述约定的类可以用于若干工具或库。</p><h4 id="_2-意义" tabindex="-1"><a class="header-anchor" href="#_2-意义" aria-hidden="true">#</a> 2. 意义</h4><p>用户可以使用JavaBean将功能、处理、值、数据库访问和其他任何可以用Java代码创造的对象进行打包，并且其他的开发者可以通过内部的JSP页面、Servlet、其他JavaBean、applet程序或者应用来使用这些对象。用户可以认为JavaBean提供了一种随时随地的复制和粘贴的功能，而不用关心任何改变。</p><h4 id="_3-javabean的种类" tabindex="-1"><a class="header-anchor" href="#_3-javabean的种类" aria-hidden="true">#</a> 3. JavaBean的种类</h4><ul><li>第一种：封装数据，这种JavaBean也被叫做实体类，一般来说对应的是数据库中的一张表</li><li>第二种：封装逻辑，这种JavaBean用于实现业务逻辑。目的是为了提高代码的复用和解耦</li></ul><h4 id="_4-javabean举例" tabindex="-1"><a class="header-anchor" href="#_4-javabean举例" aria-hidden="true">#</a> 4. JavaBean举例</h4><p>如下：获取用户的年龄</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//不使用JavaBean</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//使用JavaBean</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假如某一天，逻辑修改了，不能获取用户的年龄了，怎么办？</p><ul><li>不使用JavaBean就只能隐藏age属性，这样很多其他代码都会受到牵连，比如无法获取属性，报一大堆异常。</li><li>而使用JavaBean设计的类，就可以只修改getXxx内的代码逻辑即可。</li></ul><h2 id="iii-概念补充" tabindex="-1"><a class="header-anchor" href="#iii-概念补充" aria-hidden="true">#</a> Ⅲ. 概念补充</h2><h4 id="_1-uml类图" tabindex="-1"><a class="header-anchor" href="#_1-uml类图" aria-hidden="true">#</a> 1. UML类图</h4><figure><img src="`+i+'" alt="2-b-1" tabindex="0" loading="lazy"><figcaption>2-b-1</figcaption></figure><ul><li>权限控制： + 表示 public 类型， - 表示 private 类型，#表示protected类型</li><li>方法的写法：方法的类型(+、-) 方法名(参数名： 参数类型)：返回值类型</li></ul><h4 id="_2-mvc设计模式" tabindex="-1"><a class="header-anchor" href="#_2-mvc设计模式" aria-hidden="true">#</a> 2. MVC设计模式</h4><p>MVC是常用的设计模式之一，将整个程序分为三个层次：视图模型层，控制器层，与数据模型层。这种将程序输入输出、数据处理，以及数据的展示分离开来的设计模式使程序结构变的灵活而且清晰，同时也描述了程序各个对象间的通信方式，降低了程序的耦合性。</p><h5 id="_2-1-model-模型层【操作数据】" tabindex="-1"><a class="header-anchor" href="#_2-1-model-模型层【操作数据】" aria-hidden="true">#</a> 2.1 Model：模型层【操作数据】</h5><ul><li>数据对象封装 model.bean/domain</li><li>数据库操作类 model.dao</li><li>数据库 model.db</li></ul><h5 id="_2-2-controller-控制器层【业务逻辑】" tabindex="-1"><a class="header-anchor" href="#_2-2-controller-控制器层【业务逻辑】" aria-hidden="true">#</a> 2.2 Controller：控制器层【业务逻辑】</h5><ul><li>应用界面相关 controller.activity</li><li>存放fragment controller.fragment</li><li>显示列表的适配器 controller.adapter</li><li>服务相关的 controller.service</li><li>抽取的基类 controller.base</li></ul><h5 id="_2-3-view-视图层【前端】" tabindex="-1"><a class="header-anchor" href="#_2-3-view-视图层【前端】" aria-hidden="true">#</a> 2.3 View：视图层【前端】</h5><ul><li>相关工具类 view.utils</li><li>自定义view view.ui</li></ul><h4 id="_3-main" tabindex="-1"><a class="header-anchor" href="#_3-main" aria-hidden="true">#</a> 3. main</h4><ul><li>main()方法作为程序的入口</li><li>main()方法也是一个普通的静态方法</li><li>main()方法可以作为我们与控制台交互的方式。（之前：使用Scanner） <ul><li>用法：控制台 java a.class 空格 参数</li><li>参数将传递给main方法的 args数组。</li></ul></li><li>main的特点 <ul><li>由于Java虚拟机需要调用类的main()方法，所以该方法的访问权限必须是public，又因为Java虚拟机在执行main()方法时不必创建对象，所以该方法必须是static的，该方法接收一个String类型的数组参数，该数组中保存执行Java命令时传递给所运行的类的参数。</li><li>又因为main() 方法是静态的，我们不能直接访问该类中的非静态成员，必须创建该类的一个实例对象后，才能通过这个对象去访问类中的非静态成员。</li></ul></li></ul><h4 id="_4-连续操作" tabindex="-1"><a class="header-anchor" href="#_4-连续操作" aria-hidden="true">#</a> 4. 连续操作</h4><p>方法是可以连续调用的，方法如果有返回值，返回的是一个对象，那么就可以继续调用该对象的方法</p><h4 id="_5-四种java文件" tabindex="-1"><a class="header-anchor" href="#_5-四种java文件" aria-hidden="true">#</a> 5. 四种Java文件</h4><p>以下四种文件是平级的，且后缀都是.java</p><ul><li>Class：标准的Java类</li><li>Interface：接口</li><li>Enum：枚举</li><li>Annotation：注解</li></ul>',49),c=[t];function p(o,d){return n(),s("div",null,c)}const u=a(l,[["render",p],["__file","2-b.特殊结构.html.vue"]]);export{u as default};
