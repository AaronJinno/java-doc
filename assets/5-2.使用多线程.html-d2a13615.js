import{_ as n,o as a,c as s,e as t}from"./app-dd87de81.js";const p="/java-doc/img/java/javase/5-2-1.jpg",e="/java-doc/img/java/javase/5-2-2.jpg",c="/java-doc/img/java/javase/5-2-3.jpg",o={},l=t('<h2 id="i-java的多线程" tabindex="-1"><a class="header-anchor" href="#i-java的多线程" aria-hidden="true">#</a> Ⅰ. Java的多线程</h2><h4 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述" aria-hidden="true">#</a> 1. 概述</h4><p>在java里，一条线顺序执行叫一个线程，并列执行的才是多线程。</p><h4 id="_2-api中创建线程的方式" tabindex="-1"><a class="header-anchor" href="#_2-api中创建线程的方式" aria-hidden="true">#</a> 2. API中创建线程的方式</h4><ul><li>JDK1.5之前创建新执行线程有两种方法： <ul><li>①继承Thread类的方式</li><li>②实现Runnable接口的方式</li></ul></li><li>在JDK5.0后新增了一种 <ul><li>③实现Callable接口</li></ul></li><li>④线程池（常用）</li></ul><h4 id="_3-线程的分类" tabindex="-1"><a class="header-anchor" href="#_3-线程的分类" aria-hidden="true">#</a> 3. 线程的分类</h4><p>Java中的线程分为两类：一种是 守护线程，一种是 用户线程。</p><ul><li>它们在几乎每个方面都是相同的，唯一的区别是判断JVM何时离开。</li><li>护线程是用来服务用户线程的，通过在start()方法前调用thread.setDaemon(true)可以把一个用户线程变成一个守护线程。</li><li>Java垃圾回收就是一个典型的守护线程。</li><li>若JVM中都是守护线程，当前JVM将退出。</li></ul><h2 id="ii-继承thred类" tabindex="-1"><a class="header-anchor" href="#ii-继承thred类" aria-hidden="true">#</a> Ⅱ. 继承Thred类</h2><p>创建多线程的方式之一：继承方式，通过继承Thread类</p><h4 id="说明" tabindex="-1"><a class="header-anchor" href="#说明" aria-hidden="true">#</a> 说明</h4><p>Java语言的JVM可以通过java.lang.Thread类来实现多线程。</p><ul><li>main线程：java的入口是main方法，main方法就是java程序的主线程，又叫main线程</li><li>子线程：我们用Thread类创建的其他线程，统称为子线程。</li></ul><h4 id="_1-thread类介绍" tabindex="-1"><a class="header-anchor" href="#_1-thread类介绍" aria-hidden="true">#</a> 1. Thread类介绍</h4><h5 id="_1-1-thread类-多线程类" tabindex="-1"><a class="header-anchor" href="#_1-1-thread类-多线程类" aria-hidden="true">#</a> 1.1 Thread类：多线程类</h5><p>Thread类，用来创建和执行多线程。</p><p>我们通过实例化Thread类的子类对象来创建多线程。</p><h5 id="_1-2-构造器" tabindex="-1"><a class="header-anchor" href="#_1-2-构造器" aria-hidden="true">#</a> 1.2 构造器</h5><p>前两个构造器是继承Thread类创建多线程用的，后两个构造器是利用Runable接口创建多线程用的。</p><ul><li>Thread() ：创建新的Thread对象</li><li>Thread(String threadname)：创建线程并指定线程实例名</li><li>Thread(Runnable target) ：指定创建线程的目标对象，它实现了Runnable接口中的run方法</li><li>Thread(Runnable target, String name) ：创建新的Thread对象</li></ul><h5 id="_1-3-run方法-线程体" tabindex="-1"><a class="header-anchor" href="#_1-3-run方法-线程体" aria-hidden="true">#</a> 1.3 run方法：线程体</h5><p>run方法是该线程操作的入口，需要将此线程的操作声明在run方法中。</p><p>每个线程都是通过某个特定Thread对象的run()方法来完成操作的，经常把run()方法的主体称为线程体</p><h5 id="_1-4-start方法-开启线程" tabindex="-1"><a class="header-anchor" href="#_1-4-start方法-开启线程" aria-hidden="true">#</a> 1.4 start方法：开启线程</h5><p>通过Thread类的对象调用该方法，用来启动线程。该方法会启动对象对应的线程，并调用对象中的run方法。</p><p>注意：通过该Thread对象的start()方法来启动这个线程，而非直接调用run()</p><h4 id="_2-创建多线程的步骤" tabindex="-1"><a class="header-anchor" href="#_2-创建多线程的步骤" aria-hidden="true">#</a> 2. 创建多线程的步骤</h4><figure><img src="'+p+`" alt="5-2-1" tabindex="0" loading="lazy"><figcaption>5-2-1</figcaption></figure><ul><li>创建一个继承于Thread类的子类</li><li>子类重写Thread类的run() --&gt; 将此线程执行的操作声明在run()中</li><li>创建Thread类的子类的对象，即创建线程对象</li><li>通过此对象调用start()：启动创建的线程，自动调用run方法</li></ul><h4 id="_3-创建多线程示例" tabindex="-1"><a class="header-anchor" href="#_3-创建多线程示例" aria-hidden="true">#</a> 3. 创建多线程示例</h4><p>要求：使用三个线程，每个线程都遍历1~100间的偶数。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">1.</span><span class="token comment">//创建一个继承于Thread类的子类</span>
<span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>
    <span class="token number">2.</span><span class="token comment">//重写Thread类的run方法：在里面放入我们要执行的代码</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;***&quot;</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token number">3.</span><span class="token comment">//创建Thread类的子类的对象(创建子线程对象)</span>
        <span class="token class-name">MyThread</span> m1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token number">4.</span><span class="token comment">//调用start方法：启动当前线程;调用当前线程的run();</span>
        m1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//m1.start();  //m1对象不能重复调用start，将抛出异常</span>
       <span class="token comment">// m1.run();  //没有开启线程，只是在main线程调用了一个普通的run方法</span>
        
        <span class="token comment">//这个是main线程的遍历代码</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;***&quot;</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//再次创建一个Thread类的子类对象(再次创建一个子线程对象)，并调用start</span>
        <span class="token class-name">MyThread</span> m2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        m2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-1-备注" tabindex="-1"><a class="header-anchor" href="#_3-1-备注" aria-hidden="true">#</a> 3.1 备注</h5><p>Thread.currentThread().getName()用来返回当前线程的实例名。</p><ul><li>主线程默认名是 main。</li><li>子线程默认名是 Thread-0（0~N）</li></ul><h5 id="_3-2-执行结果" tabindex="-1"><a class="header-anchor" href="#_3-2-执行结果" aria-hidden="true">#</a> 3.2 执行结果</h5><p><code>main***i、Thread***i、Thread***i</code> 交替遍历，没有固定的先后顺序。</p><p>这说明，这三个遍历是并列的，有三个线程在执行遍历代码。</p><figure><img src="`+e+`" alt="5-2-2" tabindex="0" loading="lazy"><figcaption>5-2-2</figcaption></figure><h4 id="_4-注意事项" tabindex="-1"><a class="header-anchor" href="#_4-注意事项" aria-hidden="true">#</a> 4. 注意事项</h4><h5 id="_4-1-不能通过调用run开始子线程" tabindex="-1"><a class="header-anchor" href="#_4-1-不能通过调用run开始子线程" aria-hidden="true">#</a> 4.1 不能通过调用run开始子线程</h5><p>通过直接调用run()不能开启子线程，只是普通的在main线程中调用一个方法。<br> 开启子线程必须使用start()，让start方法去调用run。</p><p>run()方法由JVM调用，什么时候调用，执行的过程控制都有操作系统的CPU<br> 调度决定。</p><h5 id="_4-2-同一个thread类的对象不能重复调用start" tabindex="-1"><a class="header-anchor" href="#_4-2-同一个thread类的对象不能重复调用start" aria-hidden="true">#</a> 4.2 同一个Thread类的对象不能重复调用start</h5><ul><li>一个线程对象只能调用一次start()方法启动，开启一个子线程。</li><li>同一个线程对象重复调用start方法会抛出异常（IllegalThreadStateException异常）。</li><li>如果想再次开启一个线程，需要再次创建一个线程对象（这些对象可以属于同一个Thread类的子类）。</li></ul><h2 id="iii-thread常用方法" tabindex="-1"><a class="header-anchor" href="#iii-thread常用方法" aria-hidden="true">#</a> Ⅲ. Thread常用方法</h2><h4 id="方法列表" tabindex="-1"><a class="header-anchor" href="#方法列表" aria-hidden="true">#</a> 方法列表</h4><p>详见Thread的API</p><ul><li>start()：启动当前线程；调用当前线程的run()</li><li>run()：通常需要重写Thread类中的此方法，将创建的线程要执行的操作声明在此方法中。</li><li>Thread.curretnThread()：【static】返回执行当前代码的线程 <ul><li>在Thread子类中就是this，通常用于主线程和Runnable实现类</li></ul></li><li>getName()：获取当前线程的名字（需要先获取执行当前代码的线程）</li><li>setName()：设置当前线程的名字（需要先获取执行当前代码的线程）</li><li>yield():【static】释放当前cpu的执行权</li><li>join():在线程a中调用线程b的join(),此时线程a就进入阻塞状态，直到线程b完全执行完以后，线程a才结束阻塞状态。</li><li>sleep(long millitime)：【static】让当前线程“睡眠”指定的millitime毫秒。在指定的millitime毫秒时间内，当前线程是阻塞状态。</li><li>isAlive():判断当前线程是否存活</li><li>stop():已过时。当执行此方法时，强制结束当前线程。</li></ul><h4 id="_1-线程名" tabindex="-1"><a class="header-anchor" href="#_1-线程名" aria-hidden="true">#</a> 1. 线程名</h4><p>每个线程都有自己的名字，线程名是个静态属性，可以使用get、set方法访问，也可以使用构造函数初始化。</p><p>默认的线程名为：主线程：main；子线程：Thread-0（0~n）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadMethodTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">HelloThread</span> ht1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloThread</span><span class="token punctuation">(</span><span class="token string">&quot;线程1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可以通过构造方法设置name</span>
        ht1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;work one&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//要在start前设置Name</span>
        ht1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//通过方法获取主线程，并设置线程名</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;主线程&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">HelloThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">HelloThread</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取当前线程，并获取线程名</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;:HelloThread&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-线程执行控制" tabindex="-1"><a class="header-anchor" href="#_2-线程执行控制" aria-hidden="true">#</a> 2. 线程执行控制</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadMethodTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">HelloThread</span> ht1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ht1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    ht1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//当i==5时，先执行ht1进程，该进程执行完，再接着执行main进程</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//判断main进程是否还在激活状态：true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">HelloThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
               <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//当i==10时，释放本次的执行权</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//当i==20时，阻塞当前进程2秒钟</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>yield：释放当次执行权 <ul><li>CPU是来回切换执行线程的，执行该方法，会释放本次获得的执行权，然后重新加入CPU分配的队列。若队列中没有同优先级的线程，忽略此方法</li></ul></li><li>join：线程插队 <ul><li>在线程a中调用线程b的join(),此时线程a就进入阻塞状态，优先执行线程b，直到线程b执行完，线程a，才重新进入CPU分配线程的队列。</li><li>该方法会抛异常，需要try...catch</li></ul></li><li>sleep：睡眠线程(指定时间:毫秒) <ul><li>让当前线程睡眠（暂停、阻塞）指定的时间。然后再重新加入CPU分配的队列。</li><li>该方法会抛InterruptedException异常，需要try...catch</li></ul></li><li>stop：结束当前线程；【API明确，该方法已不推荐使用】</li><li>isAlive：判断当前线程是否存活（执行完就死了）</li></ul><h2 id="iv-线程的调度" tabindex="-1"><a class="header-anchor" href="#iv-线程的调度" aria-hidden="true">#</a> Ⅳ. 线程的调度</h2><h4 id="_1-cpu的调度策略" tabindex="-1"><a class="header-anchor" href="#_1-cpu的调度策略" aria-hidden="true">#</a> 1. CPU的调度策略</h4><h5 id="_1-1-时间片" tabindex="-1"><a class="header-anchor" href="#_1-1-时间片" aria-hidden="true">#</a> 1.1 时间片</h5><figure><img src="`+c+`" alt="5-2-3" tabindex="0" loading="lazy"><figcaption>5-2-3</figcaption></figure><h5 id="_1-2-抢占式" tabindex="-1"><a class="header-anchor" href="#_1-2-抢占式" aria-hidden="true">#</a> 1.2 抢占式</h5><p>高优先级的线程抢占CPU</p><h4 id="_2-java的调度方法" tabindex="-1"><a class="header-anchor" href="#_2-java的调度方法" aria-hidden="true">#</a> 2. Java的调度方法</h4><p>同优先级线程组成先进先出队列（先到先服务），使用时间片策略；对高优先级，使用优先调度的抢占式策略</p><h4 id="_3-线程的优先级" tabindex="-1"><a class="header-anchor" href="#_3-线程的优先级" aria-hidden="true">#</a> 3. 线程的优先级</h4><p>优先级为1~10。</p><ul><li>MAX_PRIORITY：10</li><li>MIN _PRIORITY：1</li><li>NORM_PRIORITY：5 --&gt;默认优先级</li></ul><p>高优先级的线程要抢占低优先级线程cpu的执行权。但是只是从概率上讲，高优先级的线程高概率的情况下被执行。并不意味着只有当高优先级的线程执行完以后，低优先级的线程才执行。</p><ul><li>查看线程的优先级 getPriority() ：返回线程优先值，返回的是int</li><li>修改线程的优先级 setPriority(int newPriority) ：改变线程的优先级，参数是常量或1~10</li></ul><h4 id="_4-注意事项-1" tabindex="-1"><a class="header-anchor" href="#_4-注意事项-1" aria-hidden="true">#</a> 4. 注意事项</h4><ul><li>线程创建时继承父线程的优先级</li><li>低优先级只是获得调度的概率低，并非一定是在高优先级线程之后才被调用</li></ul><h4 id="_5-线程调度示例" tabindex="-1"><a class="header-anchor" href="#_5-线程调度示例" aria-hidden="true">#</a> 5. 线程调度示例</h4><p>效果：两个线程无序交替执行，高优先级的线程被优先执行。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadMethodTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">HelloThread</span> ht1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//获得线程的优先级，int</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程的默认优先级为：&quot;</span><span class="token operator">+</span>ht1<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5</span>
        <span class="token comment">//设置线程的优先级</span>
        ht1<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程的优先级被修改为：&quot;</span><span class="token operator">+</span>ht1<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10</span>
        ht1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">50</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;***&quot;</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">HelloThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;***&quot;</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="v-runnable接口" tabindex="-1"><a class="header-anchor" href="#v-runnable接口" aria-hidden="true">#</a> Ⅴ. Runnable接口</h2><p>Runnable接口是创建多线程的方式之一。</p><h4 id="_1-runnable接口创建多线程的步骤" tabindex="-1"><a class="header-anchor" href="#_1-runnable接口创建多线程的步骤" aria-hidden="true">#</a> 1. Runnable接口创建多线程的步骤</h4><ul><li>创建一个实现了Runnable接口的类</li><li>实现类去实现Runnable中的抽象方法：run()</li><li>创建实现类的对象</li><li>将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</li><li>通过Thread类的对象调用start()：开启线程，并调用重写的run方法</li></ul><h4 id="_2-示例" tabindex="-1"><a class="header-anchor" href="#_2-示例" aria-hidden="true">#</a> 2. 示例</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RunnableTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token number">3.</span><span class="token comment">//创建实现类的对象</span>
        <span class="token class-name">MyRunnable</span> m1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token number">4.</span><span class="token comment">//将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</span>
        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token number">5.</span><span class="token comment">//通过Thread类的对象调用start()</span>
        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token number">1.</span><span class="token comment">//创建一个实现了Runnable接口的类：MyRunnable</span>
<span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token number">2.</span><span class="token comment">//实现类去实现Runnable中的抽象方法：run()</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//因为循环条件是成员变量，所以要这样写</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;***&quot;</span><span class="token operator">+</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
                num<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里通过将Runnable接口的实例作为参数传入Thread类中，再通过new Thread类来创建线程的。<br> 开启线程还是需要掉用Thread类的start方法</p><p>执行结果：三个线程交替输出100-&gt;1，共享一个num变量</p><h5 id="_2-1" tabindex="-1"><a class="header-anchor" href="#_2-1" aria-hidden="true">#</a> 2.1</h5><p>疑问：MyRunnable类没有继承，也没有重写Thread类的run方法，为什么Thread类调用start()时会执行MyRunnable类的run方法。</p><p>解答：new Thread类时，将Runnable接口的实例(MyRunnable类的实例)传递了进去，Thread类有一个构造方法是接收 Runnable类型的变量的，该构造方法将Runnble接口实现类的实例赋值给了Target变量，当调用Thread类的run方法时，会判断Target变量是否有值，就值就调用Target的run方法，因此调用的是Runnable的run方法，由于多态的缘故，最终被调用的就是MyRunnable类的run方法了。</p><h5 id="_2-2-创建多个线程" tabindex="-1"><a class="header-anchor" href="#_2-2-创建多个线程" aria-hidden="true">#</a> 2.2 创建多个线程</h5><p>如上；创建新的线程，不需要重复new Runnable实现类的实例，只需new Thread类就能创建一个新的线程。</p><h5 id="_2-3-共享成员变量" tabindex="-1"><a class="header-anchor" href="#_2-3-共享成员变量" aria-hidden="true">#</a> 2.3 共享成员变量</h5><p>由于使用Runnable接口创建多个线程时，每个线程使用的都是同一个 Runnable的实现类实例。所以这些线程的run方法操作的是同一个对象的成员变量，即共享成员变量，每个线程对成员变量的修改都会影响到其他线程，不需要额外加static。</p><h4 id="_3-thread和runnable-两种方式的比较" tabindex="-1"><a class="header-anchor" href="#_3-thread和runnable-两种方式的比较" aria-hidden="true">#</a> 3. Thread和Runnable 两种方式的比较</h4><h5 id="_3-1-开发中的选择" tabindex="-1"><a class="header-anchor" href="#_3-1-开发中的选择" aria-hidden="true">#</a> 3.1 开发中的选择</h5><p>开发中：优先选择：实现Runnable接口的方式，原因如下：</p><ul><li>实现的方式没有类的单继承性的局限性</li><li>实现的方式更适合来处理多个线程有共享数据的情况。</li></ul><h5 id="_3-2-区别" tabindex="-1"><a class="header-anchor" href="#_3-2-区别" aria-hidden="true">#</a> 3.2 区别</h5><ul><li>继承Thread：线程代码存放Thread子类run方法中。</li><li>实现Runnable：线程代码存在接口的实现类的run方法。</li></ul><h5 id="_3-3-联系" tabindex="-1"><a class="header-anchor" href="#_3-3-联系" aria-hidden="true">#</a> 3.3 联系</h5><p>相同点：两种方式都需要重写run(),将线程要执行的逻辑声明在run()中。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Thread</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,98),i=[l];function u(r,d){return a(),s("div",null,i)}const m=n(o,[["render",u],["__file","5-2.使用多线程.html.vue"]]);export{m as default};
