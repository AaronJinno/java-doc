import{_ as r,r as o,o as c,c as d,a,b as e,d as n,e as i}from"./app-dca03e8f.js";const l="/java-doc/img/java/javaweb/2-2-1.jpg",h="/java-doc/img/java/javaweb/2-2-2.jpg",p="/java-doc/img/java/javaweb/2-2-3.jpg",s="/java-doc/img/java/javaweb/2-2-4.jpg",m="/java-doc/img/java/javaweb/2-2-5.jpg",u="/java-doc/img/java/javaweb/2-2-6.jpg",g="/java-doc/img/java/javaweb/2-2-7.jpg",f="/java-doc/img/java/javaweb/2-2-8.jpg",b="/java-doc/img/java/javaweb/2-2-9.jpg",_="/java-doc/img/java/javaweb/2-2-10.jpg",v="/java-doc/img/java/javaweb/2-2-11.jpg",x="/java-doc/img/java/javaweb/2-2-12.jpg",j="/java-doc/img/java/javaweb/2-2-13.jpg",w="/java-doc/img/java/javaweb/2-2-14.jpg",T="/java-doc/img/java/javaweb/2-2-15.jpg",A="/java-doc/img/java/javaweb/2-2-16.jpg",W={},y=i('<h2 id="i-web项目目录" tabindex="-1"><a class="header-anchor" href="#i-web项目目录" aria-hidden="true">#</a> Ⅰ. Web项目目录</h2><p>以下目录是使用Maven创建的JavaWeb项目的标准目录。</p><h4 id="_1-开发中的项目" tabindex="-1"><a class="header-anchor" href="#_1-开发中的项目" aria-hidden="true">#</a> 1. 开发中的项目</h4><figure><img src="'+l+'" alt="2-2-1" tabindex="0" loading="lazy"><figcaption>2-2-1</figcaption></figure><h4 id="_2-打包后可以部署的项目" tabindex="-1"><a class="header-anchor" href="#_2-打包后可以部署的项目" aria-hidden="true">#</a> 2. 打包后可以部署的项目</h4><p>通过打包命令，可以直接获取打包后可以部署的项目目录。</p><p>编译后的Java字节码文件和resources的资源文件，会被放到WEB-INF下的classes目录下</p><p>pom.xml中依赖坐标对应的jar包，会被放入WEB-INF下的lib目录下</p><figure><img src="'+h+'" alt="2-2-2" tabindex="0" loading="lazy"><figcaption>2-2-2</figcaption></figure><h2 id="ii-创建web项目" tabindex="-1"><a class="header-anchor" href="#ii-创建web项目" aria-hidden="true">#</a> Ⅱ. 创建Web项目</h2><h4 id="_1-idea-创建web项目" tabindex="-1"><a class="header-anchor" href="#_1-idea-创建web项目" aria-hidden="true">#</a> 1. IDEA：创建Web项目</h4><h5 id="_1-1-新建工程" tabindex="-1"><a class="header-anchor" href="#_1-1-新建工程" aria-hidden="true">#</a> 1.1 新建工程</h5><p>新建一个空Project：如Learn</p><p>里面用一个Module来使用Tomcat：如JavaWeb</p><h5 id="_1-2-创建module" tabindex="-1"><a class="header-anchor" href="#_1-2-创建module" aria-hidden="true">#</a> 1.2 创建Module</h5><p>New Module：弹出如下窗口，选择：Java Enterprise（即java企业版）</p><p>右边选项中，进行必要的设置，如下：</p><ul><li>Name/Artifact：模块名</li><li>Project template：Web application</li><li>Project SDK：1.8<br> 然后点击 Next和Finish就OK了</li></ul><h4 id="_2-idea-非web项目-web项目" tabindex="-1"><a class="header-anchor" href="#_2-idea-非web项目-web项目" aria-hidden="true">#</a> 2. IDEA：非Web项目-&gt;Web项目</h4><p>将已有的项目（模块）部署到Tomcat，和直接创建Web application项目的目录结构稍有不同。</p><h5 id="_2-1-通过project-structure添加web" tabindex="-1"><a class="header-anchor" href="#_2-1-通过project-structure添加web" aria-hidden="true">#</a> 2.1 通过Project Structure添加Web</h5><p>打开Project Structure：Ctrl+ALT+Shift+S，选择右边的：Facets，点击+号，选择Web，然后选择要添加Web的模块</p><figure><img src="'+p+'" alt="2-2-3" tabindex="0" loading="lazy"><figcaption>2-2-3</figcaption></figure><h5 id="_2-2-通过在module上右键添加web" tabindex="-1"><a class="header-anchor" href="#_2-2-通过在module上右键添加web" aria-hidden="true">#</a> 2.2 通过在Module上右键添加Web</h5><p>module上右键：Add Frameworks Support</p><p>在弹出的页面中，选择：Web Application</p><p>如下：也可以取消勾选 Create web.xml，使用注解的方式配置项目</p><figure><img src="'+s+'" alt="2-2-4" tabindex="0" loading="lazy"><figcaption>2-2-4</figcaption></figure><h5 id="_2-3-配置artifacts" tabindex="-1"><a class="header-anchor" href="#_2-3-配置artifacts" aria-hidden="true">#</a> 2.3 配置Artifacts</h5><p>注意：如果采用了上述的方式2，就不用配置Artifacts，因为都已经配置好了。</p><p>点击 Artifacts：配置输出文件的目录，和输出Type，如图：</p><figure><img src="'+m+'" alt="2-2-5" tabindex="0" loading="lazy"><figcaption>2-2-5</figcaption></figure><h4 id="_3-maven-使用骨架创建web项目" tabindex="-1"><a class="header-anchor" href="#_3-maven-使用骨架创建web项目" aria-hidden="true">#</a> 3. Maven：使用骨架创建Web项目</h4><h5 id="_3-1-创建module" tabindex="-1"><a class="header-anchor" href="#_3-1-创建module" aria-hidden="true">#</a> 3.1 创建Module</h5><ul><li>new Module：选择Maven</li><li>勾选Great from archetype：选中org.apache.maven.archetypes：maven_archetype-webapp</li><li>点击Next，填写项目名称，和Maven的坐标。</li><li>Finish：完成创建</li></ul><h5 id="_3-2-删除pom-xml中多余的内容" tabindex="-1"><a class="header-anchor" href="#_3-2-删除pom-xml中多余的内容" aria-hidden="true">#</a> 3.2 删除pom.xml中多余的内容</h5><p><code>&lt;project ...&gt;...&lt;/project&gt;</code>外的其他标签内容都删除。</p><h5 id="_3-3-补齐maven-web项目确实的目录结构" tabindex="-1"><a class="header-anchor" href="#_3-3-补齐maven-web项目确实的目录结构" aria-hidden="true">#</a> 3.3 补齐Maven Web项目确实的目录结构</h5><p>默认的目录是没有java和resources的，需要手动创建补齐。</p><figure><img src="'+u+'" alt="2-2-6" tabindex="0" loading="lazy"><figcaption>2-2-6</figcaption></figure><h4 id="_4-maven-不使用骨架创建web项目【推荐】" tabindex="-1"><a class="header-anchor" href="#_4-maven-不使用骨架创建web项目【推荐】" aria-hidden="true">#</a> 4. Maven：不使用骨架创建Web项目【推荐】</h4><p>详见：Maven</p><h5 id="_4-1-创建module" tabindex="-1"><a class="header-anchor" href="#_4-1-创建module" aria-hidden="true">#</a> 4.1 创建Module</h5><ul><li>new Module：选择Maven</li><li>不勾选Great from archetype</li><li>点击Next，填写项目名称，和Maven的坐标。</li><li>Finish：完成创建</li></ul><h5 id="_4-2-设置pom-xml的打包方式" tabindex="-1"><a class="header-anchor" href="#_4-2-设置pom-xml的打包方式" aria-hidden="true">#</a> 4.2 设置pom.xml的打包方式</h5><p><code>&lt;packaging&gt;war&lt;/packaging&gt;</code></p><h5 id="_4-3-补齐maven-web缺失的webapp目录结构" tabindex="-1"><a class="header-anchor" href="#_4-3-补齐maven-web缺失的webapp目录结构" aria-hidden="true">#</a> 4.3 补齐Maven Web缺失的Webapp目录结构</h5><ul><li>打开Project Structure：Ctrl+ALT+Shift+S：</li><li>Facets-&gt;Web：选中之前创建的Web项目：在右边进行设置</li><li>Web Resource Directories：双击按照提示补齐webapp目录</li><li>Deployment Descriptors：点击+号，按照提示，添加缺失的WEB-INF/web.xml <ul><li>注意：WEB-INF所在的目录为webapp。</li></ul></li></ul><h2 id="iii-配置tomcat" tabindex="-1"><a class="header-anchor" href="#iii-配置tomcat" aria-hidden="true">#</a> Ⅲ. 配置Tomcat</h2><h4 id="readme" tabindex="-1"><a class="header-anchor" href="#readme" aria-hidden="true">#</a> readme</h4><p>使用IDEA和下载的Tomcat软件，配置Tomcat模板。该模板只需配置一次，以后再创建Javaweb项目就可以直接使用了。</p><p>注意：这里使用的是本地之前下载的Tomcat。</p><h4 id="_1-打开tomcat-server模板" tabindex="-1"><a class="header-anchor" href="#_1-打开tomcat-server模板" aria-hidden="true">#</a> 1. 打开Tomcat Server模板</h4><p>①右上角点击：Edit Comfigurations（或者：菜单栏run/Edit Comfigurations）</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>②在弹出的窗口中点击右下角的edit configuration templates...</p><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>③在弹出的窗口：Run/Debug Configuration Templates中：</p><p>右边选择Tomcat Server-&gt;Local，然后就可以配置Tomcat了，配置项如下：<br> 其中：Name是该Tomcat模板的名字，可以任意取，比如：Sgugo项目</p><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_2-deployment-项目部署" tabindex="-1"><a class="header-anchor" href="#_2-deployment-项目部署" aria-hidden="true">#</a> 2. Deployment：项目部署</h4><p>点击该选项卡，部署项目，优先设置该选项卡，再设置Server选项卡</p><p>点击+号，选择：Aftifacts-&gt;JavaWeb:war exploded</p><h5 id="_2-1-部署模式介绍" tabindex="-1"><a class="header-anchor" href="#_2-1-部署模式介绍" aria-hidden="true">#</a> 2.1 部署模式介绍</h5><ul><li>war：将WEB工程打成war包，把war包发布到Tomcat服务器上 <ul><li>该方式无法实现热部署</li></ul></li><li>war exploded：将WEB工程以当前文件夹的位置关系发布到Tomcat服务器上 <ul><li>热部署模式</li></ul></li></ul><h5 id="_2-2-application-context-项目路径" tabindex="-1"><a class="header-anchor" href="#_2-2-application-context-项目路径" aria-hidden="true">#</a> 2.2 Application context：项目路径</h5><p>只有一个项目，建议直接改成 / , 这样以后就不用输入项目目录。</p><h4 id="_3-server-tomcat服务器配置" tabindex="-1"><a class="header-anchor" href="#_3-server-tomcat服务器配置" aria-hidden="true">#</a> 3. Server：TomCat服务器配置</h4>',68),E=a("li",null,[e("Application server：指定本地Tomcat软件的具体路径 "),a("ul",null,[a("li",null,"配置Tomcat服务器软件的目录，点击右边的Configure进行配置，选择Tomcat的主目录即可。")])],-1),S=a("li",null,"Open Browser：启动项目后默认自动打开的浏览器",-1),M={href:"http://localhost:80/",target:"_blank",rel:"noopener noreferrer"},D=a("li",null,[e("On Update action：当项目有更新的时候，该怎么做，推荐update resource：需要编译时按ctrl + f9即可 "),a("ul",null,[a("li",null,"update resource：资源变动时，重新部署，非java文件的其他文件"),a("li",null,"update calsses and resource：java和静态资源变更都会重新部署【热部署】"),a("li",null,"Redeploy：把当前的一个项目重新部署到Tomcat服务器上"),a("li",null,"restart：重启tomcat，将服务器上所有的项目都重新部署")])],-1),N=a("li",null,[e("On fream deactivation：当idea失去焦点时，做什么 "),a("ul",null,[a("li",null,"推荐update calsses and resource。自动更新class和资源。【方便调试】")])],-1),z=a("li",null,"HTTP port：访问的端口号，默认是8080，改为80就不用输入端口号了。",-1),I=i('<h4 id="_4-添加配置好的tomcat模板" tabindex="-1"><a class="header-anchor" href="#_4-添加配置好的tomcat模板" aria-hidden="true">#</a> 4. 添加配置好的Tomcat模板</h4><p>在 Run/Debug Configurations中点击右上角的+号，然后选择刚配置好的Tomcat（通过Name选择）</p><p>以后就可以直接点击这个Tomcat 8.5.78进行Tomcat的配置和项目部署了。点击OK，结束Tomcat的配置。</p><figure><img src="'+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_5-配置多个tomcat" tabindex="-1"><a class="header-anchor" href="#_5-配置多个tomcat" aria-hidden="true">#</a> 5. 配置多个Tomcat</h4><p>一台主机可以启动多太Tomcat服务器，只要端口号不同就可以。</p><p>这里只介绍一下配置，可以创建多个Tomcat模板给不同的项目用。</p><h5 id="_5-1-添加tomcat模板" tabindex="-1"><a class="header-anchor" href="#_5-1-添加tomcat模板" aria-hidden="true">#</a> 5.1 添加Tomcat模板</h5><p>打开窗口：Run/Debug Configuration ，点击+ 号，选择Tomcat，就可以再创建一个Tomcat模板了。</p><p>注意：不同的Tomcat模板可以起不同的名字，如：起成对应的项目名称，方便区分。</p><h5 id="_5-2-配置tomcat模板" tabindex="-1"><a class="header-anchor" href="#_5-2-配置tomcat模板" aria-hidden="true">#</a> 5.2 配置Tomcat模板</h5><p>选择一个Tomcat模板就可以在右边进行配置。</p><p>具体配置见上文，配置方式一样（更简单，因为有了前一个模板的默认值）。</p><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="_5-3-配置文件" tabindex="-1"><a class="header-anchor" href="#_5-3-配置文件" aria-hidden="true">#</a> 5.3 配置文件</h5><p>IDEA会为每一个tomcat部署的项目单独建立一份配置文件。不用修改这个配置文件，按照上面的方法在IDEA中修改Tomcat会自动修改配置文件。</p><p>配置文件地址：查看控制台的log：Using CATALINA_BASE:<br><code>&quot;C:\\Users\\A\\AppData\\Local\\JetBrains\\IntelliJIdea2021.3\\tomcat\\4dc041da&quot;</code></p><h2 id="iv-使用tomcat" tabindex="-1"><a class="header-anchor" href="#iv-使用tomcat" aria-hidden="true">#</a> Ⅳ. 使用Tomcat</h2><h4 id="_1-启动tomcat" tabindex="-1"><a class="header-anchor" href="#_1-启动tomcat" aria-hidden="true">#</a> 1. 启动Tomcat</h4><p>如图，下拉框选择Tomcat，并点击右边的 绿色启动按钮启动。</p><p>debug：debug也可以启动，同时进行debug。</p><figure><img src="'+x+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_2-访问测试" tabindex="-1"><a class="header-anchor" href="#_2-访问测试" aria-hidden="true">#</a> 2. 访问测试</h4><p>在JavaWeb/src/main/webapp/ 目录下创建 index.html，并输入<code>&lt;h1&gt;Hi Tomcat&lt;/h1&gt;</code><br> 在浏览器中输入：localhost:8080/index.html，就可以看到页面了。</p><p>注意：要关闭之前通过双击打开的Tomcat服务，不然会报端口占用的错误。</p><h4 id="_3-编译后的项目目录" tabindex="-1"><a class="header-anchor" href="#_3-编译后的项目目录" aria-hidden="true">#</a> 3. 编译后的项目目录</h4><p>idea没有使用Tomcat的webapps作为项目目录，而是使用 模块目录下的 target作为项目目录，其中有三个文件夹：</p><ul><li>classes：对应编译后java文件</li><li>generated-source：对应资源文件</li><li>项目名-1.0-SNAPSHOT：前端快照</li></ul><h4 id="_4-多个tomcat目标的使用" tabindex="-1"><a class="header-anchor" href="#_4-多个tomcat目标的使用" aria-hidden="true">#</a> 4. 多个Tomcat目标的使用</h4><p>在右上角的下拉框中选择指定的tomcat模板，就可以启动了。</p><p>当有多个Tomcat模板时，可以进行关闭切换其他Tomcat模板，并进行启动。</p><figure><img src="'+j+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="v-注意事项" tabindex="-1"><a class="header-anchor" href="#v-注意事项" aria-hidden="true">#</a> Ⅴ. 注意事项</h2><h4 id="_1-artifacts配置" tabindex="-1"><a class="header-anchor" href="#_1-artifacts配置" aria-hidden="true">#</a> 1. Artifacts配置</h4><p>新建的JavaWeb项目可能会出现未配置项目导出方式（Artifacts）。</p><p>如果未配置Artifacts，会导致Tomcat选项中，只有普通的build打包，不能打war包，更不能热部署（没这个选项）。</p><h5 id="_1-1-配置artifacts" tabindex="-1"><a class="header-anchor" href="#_1-1-配置artifacts" aria-hidden="true">#</a> 1.1 配置Artifacts</h5><p>打开Project Structure：ctrl+alt+shift+s</p><figure><img src="'+w+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="_1-2-添加导出方式" tabindex="-1"><a class="header-anchor" href="#_1-2-添加导出方式" aria-hidden="true">#</a> 1.2 添加导出方式</h5><p>如上图，主要用到两个导出方式。</p><p>选中导出方式和要设置的项目进行设置。</p><h4 id="_2-tomcat导出方式介绍" tabindex="-1"><a class="header-anchor" href="#_2-tomcat导出方式介绍" aria-hidden="true">#</a> 2. Tomcat导出方式介绍</h4><ul><li>war：将WEB工程打成war包，把war包自动发布到Tomcat服务器上 <ul><li>该方式无法实现热部署</li></ul></li><li>war exploded：将WEB工程以当前文件夹的位置关系发布到Tomcat服务器上 <ul><li>热部署模式</li></ul></li></ul><h5 id="_2-1-tomcat添加导出方式" tabindex="-1"><a class="header-anchor" href="#_2-1-tomcat添加导出方式" aria-hidden="true">#</a> 2.1 Tomcat添加导出方式</h5><p>在配置Tomcat的目标时，应该首先配置Deployment。</p><ul><li>点击+号，添加项目部署的导出方式。</li><li>选择Artifact...选择war或war exploded中的一个。</li><li>如果此处未出现Artifact...选项，说明Artifacts配置有问题，需要进行配置。</li></ul><figure><img src="'+T+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="_2-2-注意事项" tabindex="-1"><a class="header-anchor" href="#_2-2-注意事项" aria-hidden="true">#</a> 2.2 注意事项</h5><p>如果未配置Artifacts，Tomcat的模板的设置界面将不会出现下面两个选项。</p><p>热部署的具体配置：见上面的配置Tomcat</p><figure><img src="'+A+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',52);function B(C,F){const t=o("ExternalLinkIcon");return c(),d("div",null,[y,a("ul",null,[E,S,a("li",null,[e("URL：打开浏览器后要访问的项目目录，一般设置为："),a("a",M,[e("http://localhost:80/"),n(t)])]),D,N,z]),I])}const L=r(W,[["render",B],["__file","2-2.IDEA使用.html.vue"]]);export{L as default};
