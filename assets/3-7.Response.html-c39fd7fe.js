import{_ as p,r as o,o as c,c as i,a as n,b as s,d as l,e}from"./app-5ca20126.js";const a="/java-doc/img/java/javaweb/3-7-1.jpg",u={},r=e('<h2 id="i-response" tabindex="-1"><a class="header-anchor" href="#i-response" aria-hidden="true">#</a> Ⅰ. Response</h2><p>Response对象是用来做HTTP响应的，共分为三个部分：响应行、响应头、响应体。</p><p>Response对象提供了不同的方法还出了这三种响应内容。</p><h4 id="_1-响应行" tabindex="-1"><a class="header-anchor" href="#_1-响应行" aria-hidden="true">#</a> 1. 响应行</h4><figure><img src="'+a+`" alt="3-7-1" tabindex="0" loading="lazy"><figcaption>3-7-1</figcaption></figure><p>对于响应行，比较常用的是设置响应状态码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token keyword">int</span> sc<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-响应头" tabindex="-1"><a class="header-anchor" href="#_2-响应头" aria-hidden="true">#</a> 2. 响应头</h4><figure><img src="`+a+`" alt="3-7-1" tabindex="0" loading="lazy"><figcaption>3-7-1</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token class-name">String</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-对于响应体-是通过字符、字节输出流的方式往浏览器写" tabindex="-1"><a class="header-anchor" href="#_3-对于响应体-是通过字符、字节输出流的方式往浏览器写" aria-hidden="true">#</a> 3. 对于响应体，是通过字符、字节输出流的方式往浏览器写，</h4><p>获取字符输出流</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">PrintWriter</span> <span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>获取字节输出流</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ServletOutputStream</span> <span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="ii-响应字符数据" tabindex="-1"><a class="header-anchor" href="#ii-响应字符数据" aria-hidden="true">#</a> Ⅱ. 响应字符数据</h2><p>Response响应字符数据</p><h4 id="_1-步骤" tabindex="-1"><a class="header-anchor" href="#_1-步骤" aria-hidden="true">#</a> 1. 步骤</h4><p>要想将字符数据写回到浏览器，我们需要两个步骤:</p><ul><li>通过Response对象获取字符输出流： <code>PrintWriter writer = response.getWriter();</code></li><li>通过字符输出流写数据: <code>writer.write(&quot;aaa&quot;);</code></li></ul><h4 id="_2-示例-向浏览器响应字符hello" tabindex="-1"><a class="header-anchor" href="#_2-示例-向浏览器响应字符hello" aria-hidden="true">#</a> 2. 示例：向浏览器响应字符hello</h4><p>浏览器访问：<code>http://localhost:8080/demo1</code>，浏览器页面上显示：hello</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/demo1&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseDemo1</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span>
    <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-设置响应的数据类型" tabindex="-1"><a class="header-anchor" href="#_3-设置响应的数据类型" aria-hidden="true">#</a> 3. 设置响应的数据类型</h4><p>响应的字符数据，默认是按照text解析的，也可以通过修改响应头，改为其他方式解析。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/html;charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//直接修改ContextType</span>
response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;context-type&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;text/html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//修改响应头的方式修改响应类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-示例-向浏览器响应html标签" tabindex="-1"><a class="header-anchor" href="#_4-示例-向浏览器响应html标签" aria-hidden="true">#</a> 4. 示例：向浏览器响应html标签</h4>`,27),d={href:"http://localhost:8080/demo1%EF%BC%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E9%A1%B5%E9%9D%A2%E4%B8%8A%E6%98%BE%E7%A4%BA%EF%BC%9A%E8%A2%AB%60h1%60%E6%B8%B2%E6%9F%93%E5%90%8E%E7%9A%84hello",target:"_blank",rel:"noopener noreferrer"},k=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;h1&gt;hello&lt;h1&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-注意" tabindex="-1"><a class="header-anchor" href="#_5-注意" aria-hidden="true">#</a> 5. 注意</h4><p>一次请求响应结束后，response对象就会被销毁掉，所以不要手动关闭流。</p><h2 id="iii-响应字节数据" tabindex="-1"><a class="header-anchor" href="#iii-响应字节数据" aria-hidden="true">#</a> Ⅲ. 响应字节数据</h2><h4 id="_1-实现步骤" tabindex="-1"><a class="header-anchor" href="#_1-实现步骤" aria-hidden="true">#</a> 1. 实现步骤</h4><p>要想将字节数据写回到浏览器，我们需要两个步骤:</p><ul><li>通过Response对象获取字节输出流：ServletOutputStream outputStream = response.getOutputStream();</li><li>通过字节输出流写数据: outputStream.write(字节数据);</li></ul><h4 id="_2-示例-向浏览器响应一张图片" tabindex="-1"><a class="header-anchor" href="#_2-示例-向浏览器响应一张图片" aria-hidden="true">#</a> 2. 示例：向浏览器响应一张图片</h4><p>先从硬盘读取一个图片文件，然后获取字节输出流，进行字节流对拷。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1. 读取文件</span>
<span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;d://a.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//2. 获取response字节输出流</span>
<span class="token class-name">ServletOutputStream</span> os <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//3. 完成流的copy</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="第三方工具对拷" tabindex="-1"><a class="header-anchor" href="#第三方工具对拷" aria-hidden="true">#</a> 第三方工具对拷</h5><p>上述代码中，对于流的copy的代码还是比较复杂的，所以我们可以使用别人提供好的方法来简化代码的开发。</p><p>如：commons-io</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1. 读取文件</span>
<span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;d://a.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//2. 获取response字节输出流</span>
<span class="token class-name">ServletOutputStream</span> os <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>fis<span class="token punctuation">,</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span>
fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-示例-以字节的形式输出字符" tabindex="-1"><a class="header-anchor" href="#_3-示例-以字节的形式输出字符" aria-hidden="true">#</a> 3. 示例：以字节的形式输出字符</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1.设置编码</span>
response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/html;charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//2.获取字节输出流</span>
<span class="token class-name">ServletOutputStream</span> sos <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//3.用直接流输出字符(并设置好编码)</span>
sos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;你好&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16);function v(m,h){const t=o("ExternalLinkIcon");return c(),i("div",null,[r,n("p",null,[s("浏览器访问："),n("a",d,[s("http://localhost:8080/demo1，浏览器页面上显示：被`h1`渲染后的hello"),l(t)])]),k])}const g=p(u,[["render",v],["__file","3-7.Response.html.vue"]]);export{g as default};
