import{_ as e,o as a,c as i,e as t}from"./app-9c0ded09.js";const n={},r=t('<h2 id="自动配置介绍" tabindex="-1"><a class="header-anchor" href="#自动配置介绍" aria-hidden="true">#</a> 自动配置介绍</h2><p>自动配置：简单说就是springboot根据我们开发者的行为猜测你要做什么事情，然后把你要用的bean都给你准备好，同时在配置文件中提供了很多配置项。</p><h4 id="springboot做了什么" tabindex="-1"><a class="header-anchor" href="#springboot做了什么" aria-hidden="true">#</a> SpringBoot做了什么</h4><p>通过你编码中导入的类，就知道你有可能需要的Bean，于是就把这些Bean提前加载好了，这些Bean可以直接用了，不用再手动的加载Bean，加快了开发速度。</p><p>之前通过各种方式加载Bean的做法，都不用做了，Spring配置文件，各种动态加载Bean的注解也完全不用写了，SprigBoot都帮我们做好了，这很酷。</p><h4 id="参数的定义" tabindex="-1"><a class="header-anchor" href="#参数的定义" aria-hidden="true">#</a> 参数的定义</h4><p>很多Bean是需要手动提供参数才能正确加载的，SpringBoot如何处理这些类呢？</p><p>答案就是 Application.yml配置文件，比如数据库连接，你就需要在yml配置中根据SpringBoot预定义好的属性名提供值，Spring Boot会自动加载他们。</p><p>SpringBoot 对几乎所有常用的基数都提供了预定义属性名以及设置了通用的属性值，他会根据pom中导入的包加载，IDEA也会有提示。</p><h4 id="手动操作" tabindex="-1"><a class="header-anchor" href="#手动操作" aria-hidden="true">#</a> 手动操作</h4><p>对于特殊操作和冷门技术，SpringBoot没有整合方案，就需要通过手动创建配置类，手动进行配置和加载了。</p><h2 id="自动配置流程" tabindex="-1"><a class="header-anchor" href="#自动配置流程" aria-hidden="true">#</a> 自动配置流程</h2><div class="hint-container warning"><p class="hint-container-title">疑问？</p><p>SpringBoot是如何知道那些具体的Bean要加载，那些属性要配置？既SpringBoot自动配置是如何具体操作的？</p></div><ul><li>step 1-&gt;收集Spring开发者的编程习惯，整理开发过程使用的常用技术列表——&gt;(技术集A)</li><li>step 2-&gt;收集常用技术(技术集A)的使用参数，整理开发过程中每个技术的常用设置列表——&gt;(设置集B)</li><li>step 3-&gt;初始化SpringBoot基础环境，加载用户自定义的bean和导入的其他坐标，形成初始化环境</li><li>step 4-&gt;将技术集A包含的所有技术都定义出来，在Spring/SpringBoot启动时默认全部加载</li><li>step 5-&gt;将技术集A中具有使用条件的技术约定出来，设置成按条件加载，由开发者决定是否使用该技术（与初始化环境比对）</li><li>step 6-&gt;将设置集B作为默认配置加载（约定大于配置），减少开发者配置工作量</li><li>step 7-&gt;开放设置集B的配置覆盖接口，由开发者根据自身需要决定是否覆盖默认配置</li></ul><h2 id="变更自动配置" tabindex="-1"><a class="header-anchor" href="#变更自动配置" aria-hidden="true">#</a> 变更自动配置</h2>',15),o=[r];function p(h,s){return a(),i("div",null,o)}const l=e(n,[["render",p],["__file","6-3.自动配置.html.vue"]]);export{l as default};
