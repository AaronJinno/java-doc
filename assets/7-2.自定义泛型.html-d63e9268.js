import{_ as n,o as s,c as a,e}from"./app-5ca20126.js";const t={},p=e(`<h2 id="i-自定义泛型类" tabindex="-1"><a class="header-anchor" href="#i-自定义泛型类" aria-hidden="true">#</a> Ⅰ. 自定义泛型类</h2><h4 id="_1-语法" tabindex="-1"><a class="header-anchor" href="#_1-语法" aria-hidden="true">#</a> 1. 语法</h4><p>泛型一般用T、E、K、V字母表示。</p><h5 id="_1-1-声明泛型接口和泛型类" tabindex="-1"><a class="header-anchor" href="#_1-1-声明泛型接口和泛型类" aria-hidden="true">#</a> 1.1 声明泛型接口和泛型类</h5><p>泛型类可能有多个参数，此时应将多个参数一起放在尖括号内，比如：<code>&lt;E1,E2,E3&gt;</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">GenTest</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-2-泛型类的实例化" tabindex="-1"><a class="header-anchor" href="#_1-2-泛型类的实例化" aria-hidden="true">#</a> 1.2 泛型类的实例化</h5><p>构造器中只加个&lt;&gt;即可，指定类型参数的值。</p><p>注意：泛型的类型只能是类，不能用基本数据类型填充。但可以使用包装类填充。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> strList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> strList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//JDK1.7之后的语法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-3-泛型类的构造器" tabindex="-1"><a class="header-anchor" href="#_1-3-泛型类的构造器" aria-hidden="true">#</a> 1.3 泛型类的构造器</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">GenericClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//正确的</span>
<span class="token keyword">public</span> <span class="token class-name">GenericClass</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//错误的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-示例-自定义泛型类" tabindex="-1"><a class="header-anchor" href="#_2-示例-自定义泛型类" aria-hidden="true">#</a> 2. 示例：自定义泛型类</h4><h5 id="_2-1-定义泛型类" tabindex="-1"><a class="header-anchor" href="#_2-1-定义泛型类" aria-hidden="true">#</a> 2.1 定义泛型类</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//将该类定义为泛型类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>
    <span class="token class-name">String</span> orderName<span class="token punctuation">;</span>
    <span class="token keyword">int</span> orderId<span class="token punctuation">;</span>
    <span class="token comment">//定义一个泛型 类型的属性</span>
    <span class="token class-name">E</span> orderE<span class="token punctuation">;</span>

    <span class="token comment">//泛型 类型 作为参数</span>
    <span class="token keyword">public</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token class-name">String</span> orderName<span class="token punctuation">,</span><span class="token keyword">int</span> orderId<span class="token punctuation">,</span><span class="token class-name">E</span> orderE<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>orderName <span class="token operator">=</span> orderName<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>orderId <span class="token operator">=</span> orderId<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>orderE <span class="token operator">=</span> orderE<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//泛型 类型 作为返回值</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrderE</span><span class="token punctuation">(</span><span class="token class-name">E</span> orderE<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>orderE <span class="token operator">=</span> orderE<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-2-实例化泛型类" tabindex="-1"><a class="header-anchor" href="#_2-2-实例化泛型类" aria-hidden="true">#</a> 2.2 实例化泛型类</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//定义泛型类，但可以不指定泛型，泛型默认是Object类型(不推荐)</span>
    <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//实例化时，指定泛型的类型（建议）</span>
    <span class="token class-name">Order</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> order1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;AA&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&quot;E&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//调用参数设置为泛型的函数，此时参数类型变为String</span>
    order1<span class="token punctuation">.</span><span class="token function">setOrderE</span><span class="token punctuation">(</span><span class="token string">&quot;E-E&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-自定义泛型类-接口-的注意事项" tabindex="-1"><a class="header-anchor" href="#_3-自定义泛型类-接口-的注意事项" aria-hidden="true">#</a> 3. 自定义泛型类（接口）的注意事项</h4><ul><li>实例化后，操作原来泛型位置的结构必须与指定的泛型类型一致。</li><li>泛型不同的引用不能相互赋值。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list1 <span class="token operator">=</span> list2<span class="token punctuation">;</span>

list1 <span class="token operator">=</span> list2<span class="token punctuation">;</span> <span class="token comment">//没报错</span>
list3 <span class="token operator">=</span> list2<span class="token punctuation">;</span> <span class="token comment">//报错：编译不通过</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>泛型擦除：泛型如果不指定，将被擦除，泛型对应的类型均按照Object处理，但不等价于Object。 <ul><li>经验：泛型要使用一路都用。要不用，一路都不要用。</li></ul></li><li>包装类：泛型的指定中不能使用基本数据类型，可以使用包装类替换</li><li>泛型修饰类/接口的成员：在类/接口上声明的泛型，在本类或本接口中即代表某种类型，可以作为非静态属性的类型、非静态方法的参数类型、非静态方法的返回值类型。 <ul><li>但在静态方法中不能使用类的泛型，因为类可以直接调用静态方法。</li></ul></li><li>异常类不能是泛型：包括自定义的异常类和try...catch中的异常类。</li><li>泛型类型的数组：不能直接 new E[]，创建泛型数组，而是要利用Object进行强转。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">E</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-继承泛型类" tabindex="-1"><a class="header-anchor" href="#_4-继承泛型类" aria-hidden="true">#</a> 4. 继承泛型类</h4><p>父类有泛型，子类可以选择保留泛型也可以选择指定泛型类型</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token generics"><span class="token punctuation">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_4-1-不保留泛型-擦除泛型" tabindex="-1"><a class="header-anchor" href="#_4-1-不保留泛型-擦除泛型" aria-hidden="true">#</a> 4.1 不保留泛型：擦除泛型</h5><p>Son1不是泛型类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//等价于：lass Son extends Father&lt;Object,Object&gt;{...}</span>
<span class="token keyword">class</span> <span class="token class-name">Son1</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>

<span class="token class-name">Son1</span> son1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-2-不保留泛型-指定父类泛型具体类型" tabindex="-1"><a class="header-anchor" href="#_4-2-不保留泛型-指定父类泛型具体类型" aria-hidden="true">#</a> 4.2 不保留泛型：指定父类泛型具体类型</h5><p>Son2不是泛型类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Son2</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>

<span class="token class-name">Son2</span> son2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-3-保留泛型-全部保留" tabindex="-1"><a class="header-anchor" href="#_4-3-保留泛型-全部保留" aria-hidden="true">#</a> 4.3 保留泛型：全部保留</h5><p>Son3仍是泛型类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Son3</span><span class="token generics"><span class="token punctuation">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token generics"><span class="token punctuation">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>

<span class="token class-name">Son3</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> son3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son3</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-4-保留泛型-部分保留" tabindex="-1"><a class="header-anchor" href="#_4-4-保留泛型-部分保留" aria-hidden="true">#</a> 4.4 保留泛型：部分保留</h5><p>Son4仍是泛型类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Son4</span><span class="token generics"><span class="token punctuation">&lt;</span>T2<span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> T2<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>

<span class="token class-name">Son4</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> son4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son4</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-自定义泛型方法" tabindex="-1"><a class="header-anchor" href="#ii-自定义泛型方法" aria-hidden="true">#</a> Ⅱ. 自定义泛型方法</h2><h4 id="_1-定义" tabindex="-1"><a class="header-anchor" href="#_1-定义" aria-hidden="true">#</a> 1. 定义</h4><p>概念：当一个方法，不确定变量的类型时，可以使用泛型，该方法就是泛型方法。</p><p>在泛型方法中可以定义泛型参数，此时，参数的类型就是传入数据的类型</p><h5 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h5><ul><li>泛型方法跟泛型类、泛型接口没有任何关系。</li><li>泛型方法所属的类是不是泛型都没有关系</li></ul><h4 id="_2-误区" tabindex="-1"><a class="header-anchor" href="#_2-误区" aria-hidden="true">#</a> 2. 误区</h4><p>当类是泛型类时，假如定义了泛型标识E，那么方法参数类型是E的方法，并不是泛型方法，因为他的类型是确定的，和类初始化给的类型一致或是Object。</p><h4 id="_3-标识符" tabindex="-1"><a class="header-anchor" href="#_3-标识符" aria-hidden="true">#</a> 3. 标识符</h4><p>当泛型方法所在类也是泛型类时，泛型方法使用的泛型标识，不要跟类的泛型标识一样。</p><h4 id="_4-语法" tabindex="-1"><a class="header-anchor" href="#_4-语法" aria-hidden="true">#</a> 4. 语法</h4><p>访问权限 &lt; 泛型&gt; 返回类型 方法名([ 泛型标识 参数名称]) 抛出的异常</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">String</span> <span class="token function">getUname</span><span class="token punctuation">(</span><span class="token class-name">T</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_5-示例" tabindex="-1"><a class="header-anchor" href="#_5-示例" aria-hidden="true">#</a> 5. 示例</h4><p>将数组中的数据copy到list中</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">copyFromArrayToList</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">E</span> e <span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> list<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-静态化" tabindex="-1"><a class="header-anchor" href="#_6-静态化" aria-hidden="true">#</a> 6. 静态化</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">copyFromArrayToList</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>泛型方法，可以声明为静态的。</p><p>原因：泛型参数是在调用方法时确定的。并非在实例化类时确定。</p>`,57),c=[p];function o(l,i){return s(),a("div",null,c)}const r=n(t,[["render",o],["__file","7-2.自定义泛型.html.vue"]]);export{r as default};
