import{_ as n,o as s,c as a,b as e}from"./app-2ea4aaaf.js";const t="/java-doc/img/java/javase/2-8-1.jpg",p="/java-doc/img/java/javase/2-8-2.jpg",o="/java-doc/img/java/javase/2-8-3.jpg",c={},l=e('<h2 id="i-object类" tabindex="-1"><a class="header-anchor" href="#i-object类" aria-hidden="true">#</a> Ⅰ. Object类</h2><h4 id="_1-说明" tabindex="-1"><a class="header-anchor" href="#_1-说明" aria-hidden="true">#</a> 1. 说明</h4><p>Object类是所有Java类的根父类；如果在类的声明中未使用extends关键字指明其父类，则默认父类为java.lang.Object类；Object类中的功能(属性、方法)具有通用性。</p><p>Object的主要结构如下：</p><figure><img src="'+t+`" alt="2-8-1" tabindex="0" loading="lazy"><figcaption>2-8-1</figcaption></figure><h4 id="_2-object类的功能" tabindex="-1"><a class="header-anchor" href="#_2-object类的功能" aria-hidden="true">#</a> 2. Object类的功能</h4><p>Object类无属性且构造器是空参构造器</p><p>主要功能（方法）如下：</p><ul><li>clone：克隆 对象</li><li>equals：判断两个对象是否想等</li><li>finalize：垃圾回收方法（不要手动调用，由垃圾回收机制自动调用）</li><li>getClass：获取当前对象的所属类</li><li>hashCode：获取当前对象的哈希值（详见集合）</li><li>toString：打印对象</li><li>wait：详见多线程</li><li>notify：详见多线程</li><li>notifyAll：详见多线程</li></ul><h4 id="_3-equals与" tabindex="-1"><a class="header-anchor" href="#_3-equals与" aria-hidden="true">#</a> 3. equals与 ==</h4><h5 id="_3-1-的用法" tabindex="-1"><a class="header-anchor" href="#_3-1-的用法" aria-hidden="true">#</a> 3.1 ==的用法</h5><p>关系操作符 == 生成的是一个boolean结果，它们计算的是操作数的值之间的关系</p><p>可以使用在基本数据类型变量和引用数据类型变量中；</p><ul><li>如果比较的是基本数据类型变量：比较两个变量保存的数据是否相等（不一定类型要相同,运算时会- 自动类型提升）。</li><li>如果比较的是引用数据类型变量：比较两个对象的地址值是否相同.即两个引用是否指向同一个对象实体。</li><li>boolean类型不与其他类型参与比较</li><li>用“==”进行比较时，符号两边的 数据类型必须兼容(可自动转换的基本数据类型除外)，否则编译出错</li></ul><p>注意：java中没有 ===（全等于）符号。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//基本数据类型</span>
<span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">10.0</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">==</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true,只比较值，不比较数据类型</span>
<span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">==</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true,char类型就是以数值方式储存的</span>
<span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token number">65</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1 <span class="token operator">==</span> c2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true,同上</span>
<span class="token comment">//引用类型</span>
<span class="token class-name">Customer</span> cust1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Customer</span> cust2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cust1 <span class="token operator">==</span> cust2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false;地址不同</span>
<span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;atguigu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;atguigu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false;同上，地址不同</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-2-equals的用法" tabindex="-1"><a class="header-anchor" href="#_3-2-equals的用法" aria-hidden="true">#</a> 3.2 equals的用法</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Customer</span> cust1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Customer</span> cust2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cust1 <span class="token operator">==</span> cust2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
<span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;atguigu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;atguigu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>equals是一个方法，而非运算符，因此只能适用于引用数据类型</li><li>Object类中（源码）定义的equals()和==的作用是相同的：比较两个对象的地址值是否相同.即两个引用是否指向同一个对象实体。</li><li>像String、Date、File、包装类等都重写了Object类中的equals()方法。重写后，比较的不是两个引用的地址是否相同，而是比较两个对象的&quot;实体内容&quot;是否相同。</li></ul><h5 id="_3-3-自定义类重写equals" tabindex="-1"><a class="header-anchor" href="#_3-3-自定义类重写equals" aria-hidden="true">#</a> 3.3 自定义类重写equals</h5><p>通常情况下，我们自定义的类如果使用equals()的话，也通常是比较两个对象的&quot;实体内容&quot;是否相同。那么，我们就需要对Object类中的equals()进行重写.</p><p>重写的原则：比较两个对象的实体内容是否相同，IDE 可以自动生成equals重写（比较两个对象实体是否相同）</p><ul><li>对称性：如果x.equals(y)返回是“true”，那么y.equals(x)也应该返回是“true”。</li><li>自反性：x.equals(x)必须返回是“true”。</li><li>传递性：如果x.equals(y)返回是“true”，而且y.equals(z)返回是“true”，那么z.equals(x)也应该返回是“true”。</li><li>一致性：如果x.equals(y)返回是“true”，只要x和y内容一直不变，不管你重复x.equals(y)多少次，返回都是“true”。</li><li>任何情况下，x.equals(null)，永远返回是“false”；x.equals(和x不同类型的对象)永远返回是“false”。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//如果要比较的两个对象是引用关系，直接返回true</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//obj是null，直接返回false</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//类不同，直接返回false；</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//运行到这里，obj和Person是同属一个类的对象</span>
    <span class="token class-name">Person</span> other <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span>obj<span class="token punctuation">;</span> <span class="token comment">//将obj的Object类型向下转型为Person以便对比属性</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">!=</span> other<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//判断两个对象的属性是否相同</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>name <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//如果两个对象一个name属性有初始值，一个没有，返回false</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//如果this对象不是null，则调用String重新的equals判断两个name是否相等</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-4-和equals-的区别" tabindex="-1"><a class="header-anchor" href="#_3-4-和equals-的区别" aria-hidden="true">#</a> 3.4 ==和equals()的区别</h5><ul><li>== 既可以比较基本类型也可以比较引用类型。对于基本类型就是比较值，对于引用类型就是比较内存地址</li><li>equals 的话，它是属于java.lang.Object 类里面的方法，如果该方法没有被重写过默认也是 是==; 我们可以到 看到String类 等类的 的equals 方法是被重写过的，而且String 类在日常开发中 用的比较多，久而久之，形成了equals 是比较值的错误观点。</li><li>equals的具体使用要看自定义类里有没有 重写Object 的equals 方法来 判断，通常情况下，重写equals 方法，会比较类中的相应属性是否都相等。</li></ul><h5 id="_3-5-特殊情况" tabindex="-1"><a class="header-anchor" href="#_3-5-特殊情况" aria-hidden="true">#</a> 3.5 特殊情况</h5><p>对于Integer类来说，-128<sub>127经常使用，所以系统进行了缓存。因此当值的范围在-128</sub>127时，相同值的Integer类指向的是同一个内存地址（除非直接new Integer（））。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
a <span class="token operator">==</span> b<span class="token punctuation">;</span> <span class="token comment">//false</span>
a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
<span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
a <span class="token operator">==</span> b<span class="token punctuation">;</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-tostring" tabindex="-1"><a class="header-anchor" href="#_4-tostring" aria-hidden="true">#</a> 4. toString</h4><p>当我们输出一个对象的引用时，实际上就是调用当前对象的toString()</p><h5 id="_4-1-tostring的源码" tabindex="-1"><a class="header-anchor" href="#_4-1-tostring的源码" aria-hidden="true">#</a> 4.1 toString的源码</h5><p>toString在Object中输出的是带对象类型的地址。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//test.Test@15db9742</span>
    <span class="token keyword">return</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;@&quot;</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-2-特殊对象对tostring的重写" tabindex="-1"><a class="header-anchor" href="#_4-2-特殊对象对tostring的重写" aria-hidden="true">#</a> 4.2 特殊对象对toString的重写</h5><p>像String、Date、File、包装类等都重写了Object类中的toString()方法。使得在调用对象的toString()时，返回&quot;实体内容&quot;信息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;MM&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//MM</span>
<span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">4534534534543L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Mon Sep 11 08:55:34 GMT+08:00 2113</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-3-自定义重写tostring" tabindex="-1"><a class="header-anchor" href="#_4-3-自定义重写tostring" aria-hidden="true">#</a> 4.3 自定义重写toString</h5><p>如果我们也想输出对象的实体内容（如包含哪些属性）就需要在类中对toString进行自定义重写； IDE有一键重写功能（输出的就是类名和类的属性）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot; Person[name=&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;, age=&quot;</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-4-string-tostring" tabindex="-1"><a class="header-anchor" href="#_4-4-string-tostring" aria-hidden="true">#</a> 4.4 String.toString</h5><p>在行进行String与其它类型数据的连接操作时 ，自动调用toString() 基本类型数据转换为String 类型时，的 调用了对应包装类的toString()</p><h2 id="ii-包装类" tabindex="-1"><a class="header-anchor" href="#ii-包装类" aria-hidden="true">#</a> Ⅱ. 包装类</h2><h4 id="_1-说明-1" tabindex="-1"><a class="header-anchor" href="#_1-说明-1" aria-hidden="true">#</a> 1. 说明</h4><p>包装类就是将基本数据类型的值包装成引用数据类型（对象）</p><p>针对八种基本数据类型定义相应的引用类型—包装类（封装类）有了类的特点，就可以调用类中的方法，Java才是真正的面向对象</p><h4 id="_2-基本数据和对应的包装类" tabindex="-1"><a class="header-anchor" href="#_2-基本数据和对应的包装类" aria-hidden="true">#</a> 2. 基本数据和对应的包装类</h4><figure><img src="`+p+'" alt="2-8-2" tabindex="0" loading="lazy"><figcaption>2-8-2</figcaption></figure><h4 id="_3-包装类的转换概述" tabindex="-1"><a class="header-anchor" href="#_3-包装类的转换概述" aria-hidden="true">#</a> 3. 包装类的转换概述</h4><p>基本数据类型、包装类与String类的互相转换示意图：</p><figure><img src="'+o+`" alt="2-8-3" tabindex="0" loading="lazy"><figcaption>2-8-3</figcaption></figure><h4 id="_4-基本数据类型转换为包装类" tabindex="-1"><a class="header-anchor" href="#_4-基本数据类型转换为包装类" aria-hidden="true">#</a> 4. 基本数据类型转换为包装类</h4><p>装箱：通过包装类的构造器实现。</p><p>语法：包装类 标识符 = new 包装类的构造器(基本数据类型的值或标识符);</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//int示例</span>
<span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> in1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>in1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//现在是类了可以调用toString了</span>
<span class="token class-name">Integer</span> in2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//纯数值的字符串也可以作为参数</span>
<span class="token class-name">Integer</span> in1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//基本数据类型的值当然也可以</span>

<span class="token comment">//Boolean示例</span>
<span class="token class-name">Boolean</span> b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用基本数据类型的值</span>
<span class="token class-name">Boolean</span> b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token string">&quot;TrUe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>
<span class="token class-name">Boolean</span> b3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token string">&quot;true123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-1-boolean转换的特殊性说明" tabindex="-1"><a class="header-anchor" href="#_4-1-boolean转换的特殊性说明" aria-hidden="true">#</a> 4.1 boolean转换的特殊性说明</h5><ul><li>Boolean构造器的值，如果是字符串，那么经过大小写的转换只要是true，就会转换为true，否则一律转为false</li><li>Boolean类的默认值是null，而不是false（现在已经是类了）。</li></ul><h4 id="_5-包装类转换为基本数据类型" tabindex="-1"><a class="header-anchor" href="#_5-包装类转换为基本数据类型" aria-hidden="true">#</a> 5. 包装类转换为基本数据类型</h4><p>拆箱：获得 包装类对象中包装的基本类型变量</p><p>语法：调用包装类Xxx的xxxValue()即可</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> in1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> i1 <span class="token operator">=</span> in1<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//变成了 int 12</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//13;转换后可以进行运算了</span>

<span class="token class-name">Float</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float</span><span class="token punctuation">(</span><span class="token number">12.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> f2 <span class="token operator">=</span> f1<span class="token punctuation">.</span><span class="token function">floatValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-自动装箱与自动拆箱" tabindex="-1"><a class="header-anchor" href="#_6-自动装箱与自动拆箱" aria-hidden="true">#</a> 6. 自动装箱与自动拆箱</h4><p>自动装箱：基本数据类型可以自动转为对应的包装类类型，而不用使用构造器</p><p>自动拆箱：包装类自动转为基本数据类型，而不用调用包装类Xxx的xxxValue()</p><p>注意：类型必须匹配</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> in1 <span class="token operator">=</span> num2<span class="token punctuation">;</span><span class="token comment">//自动装箱</span>

<span class="token keyword">int</span> num3 <span class="token operator">=</span> in1<span class="token punctuation">;</span><span class="token comment">//自动拆箱</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>传参：当一个方法的参数是Object数据类型时，基本数据类型不用转换，直接传进去就行，因为会触发自动装箱。</p><h4 id="_7-基本数据类型和包装类与string类型的转换" tabindex="-1"><a class="header-anchor" href="#_7-基本数据类型和包装类与string类型的转换" aria-hidden="true">#</a> 7. 基本数据类型和包装类与String类型的转换</h4><h5 id="_7-1-基本数据类型、包装类-string类型" tabindex="-1"><a class="header-anchor" href="#_7-1-基本数据类型、包装类-string类型" aria-hidden="true">#</a> 7.1 基本数据类型、包装类---&gt;String类型</h5><ul><li>方式1：连接运算，任何基本数据类型+String类型都会转为String类型</li><li>方式2：调用String重载的valueOf(Xxx xxx)</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token comment">//方式1：连接运算</span>
<span class="token class-name">String</span> str1 <span class="token operator">=</span> num1 <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

<span class="token comment">//方式2：调用String的valueOf(Xxx xxx)</span>
<span class="token keyword">float</span> f1 <span class="token operator">=</span> <span class="token number">12.3f</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&quot;12.3&quot;</span>

<span class="token class-name">Double</span> d1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">12.4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&quot;12.4&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_7-2-string类型转基本数据类型、包装类" tabindex="-1"><a class="header-anchor" href="#_7-2-string类型转基本数据类型、包装类" aria-hidden="true">#</a> 7.2 String类型转基本数据类型、包装类</h5><p>不能强转，需要调用包装类的parseXxx(String s)</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//int 123//</span>
<span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">&quot;true111&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//boolean false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8-注意事项" tabindex="-1"><a class="header-anchor" href="#_8-注意事项" aria-hidden="true">#</a> 8. 注意事项</h4><p>进行互相转换时，要保证输入的类型是正确的。</p><p>比如：不能把123ab或&quot;123ab&quot;当做数值类型.</p><h2 id="iii-内部类" tabindex="-1"><a class="header-anchor" href="#iii-内部类" aria-hidden="true">#</a> Ⅲ. 内部类</h2><h4 id="_1-定义" tabindex="-1"><a class="header-anchor" href="#_1-定义" aria-hidden="true">#</a> 1. 定义</h4><p>Inner class：内部类。</p><p>Java中允许将一个类A声明在另一个类B中，则类A就是内部类，类B称为外部类。一般用在定义它的类或语句块之内，在外部引用它时必须给出完整的名称。Inner class的名字不能与包含它的外部类类名相同；</p><h4 id="_2-内部类的作用" tabindex="-1"><a class="header-anchor" href="#_2-内部类的作用" aria-hidden="true">#</a> 2. 内部类的作用</h4><p>当一个事物的内部，还有一个部分需要一个完整的结构进行描述，而这个内部的完整的结构又只为外部事物提供服务，那么整个内部的完整结构最好使用内部类。</p><h4 id="_3-分类" tabindex="-1"><a class="header-anchor" href="#_3-分类" aria-hidden="true">#</a> 3. 分类</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">{</span> <span class="token comment">//成员内部类</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Shit</span><span class="token punctuation">{</span> <span class="token comment">//静态成员内部类</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">class</span> <span class="token class-name">AA</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//局部内部类</span>
    <span class="token punctuation">}</span>
    
    <span class="token punctuation">{</span>
        <span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//局部内部类</span>
    <span class="token punctuation">}</span>
    
     <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">class</span> <span class="token class-name">CC</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">//局部内部类</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>成员内部类：定义在类里面和类的成员并列的 <ul><li>静态成员内部类</li><li>非静态成员内部类</li></ul></li><li>局部内部类：定义在方法内、代码块内、构造器内的类</li></ul><h4 id="_4-成员内部类的特点" tabindex="-1"><a class="header-anchor" href="#_4-成员内部类的特点" aria-hidden="true">#</a> 4. 成员内部类的特点</h4><h5 id="_4-1-作为外部类的成员" tabindex="-1"><a class="header-anchor" href="#_4-1-作为外部类的成员" aria-hidden="true">#</a> 4.1 作为外部类的成员</h5><ul><li>可以调用外部类的结构</li><li>可以被static修饰，但此时就不能再使用外层类的非static的成员变量；</li><li>可以被4种不同的权限修饰（外部类不能由private和protected修饰）。</li></ul><h5 id="_4-2-作为一个类" tabindex="-1"><a class="header-anchor" href="#_4-2-作为一个类" aria-hidden="true">#</a> 4.2 作为一个类</h5><ul><li>类内可以定义属性、方法、构造器等</li><li>可以被final修饰，表示此类不能被继承。言外之意，不使用final，就可以被继承</li><li>可以被abstract修饰，因此可以被其它的内部类继承</li></ul><h5 id="_4-3-注意事项" tabindex="-1"><a class="header-anchor" href="#_4-3-注意事项" aria-hidden="true">#</a> 4.3 注意事项</h5><ul><li>非static的成员内部类中的成员不能声明为static的，只有在外部类或static的成员内部类中才可声明static成员。</li><li>外部类访问成员内部类的成员，需要“内部类.成员”或“内部类对象.成员”的方式</li><li>成员内部类可以直接使用外部类的所有成员，包括私有的数据</li><li>当想要在外部类的静态成员部分使用内部类时，可以考虑内部类声明为静态的</li></ul><h5 id="_4-4-实例化成员内部类" tabindex="-1"><a class="header-anchor" href="#_4-4-实例化成员内部类" aria-hidden="true">#</a> 4.4 实例化成员内部类</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Person<span class="token punctuation">.</span>Dog</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person<span class="token punctuation">.</span>Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//静态成员内部类</span>
<span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Person<span class="token punctuation">.</span>Bird</span> bird <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//非静态成员内部类</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-5-成员内部类调用外部结构" tabindex="-1"><a class="header-anchor" href="#_4-5-成员内部类调用外部结构" aria-hidden="true">#</a> 4.5 成员内部类调用外部结构</h5><p>不重名的情况下，直接调用即可，重名是要采用以下方法调用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">Bird</span><span class="token punctuation">{</span>
        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;bird&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用方法的形参</span>
           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用内部类的name</span>
           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用外部类的name</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-局部内部类的使用" tabindex="-1"><a class="header-anchor" href="#_5-局部内部类的使用" aria-hidden="true">#</a> 5. 局部内部类的使用</h4><p>直接使用很少见；一般用来返回实现了某个接口的类的对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Comparable</span> <span class="token function">getComparable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">class</span> <span class="token class-name">MyComparable</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token punctuation">{</span>
            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//方式二</span>
       <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Comparable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> 
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在局部内部类的方法中，如果调用声明局部内部类的外部方法的局部变量的话，要求此局部变量声明为final的。</p><h5 id="_5-1-使用局部内部类" tabindex="-1"><a class="header-anchor" href="#_5-1-使用局部内部类" aria-hidden="true">#</a> 5.1 使用局部内部类</h5><ul><li>只能在声明它的方法或代码块中使用，而且是先声明后使用。除此之外的任何地方 都不能使用该类</li><li>但是它的对象可以通过外部方法的返回值返回使用，返回值类型只能是局部内部类 的父类或父接口类型</li></ul><h5 id="_5-2-局部内部类的特点" tabindex="-1"><a class="header-anchor" href="#_5-2-局部内部类的特点" aria-hidden="true">#</a> 5.2 局部内部类的特点</h5><ul><li>内部类仍然是一个独立的类，在编译之后内部类会被编译成独立的.class文件，但是前面冠以外部类的类名和$符号，以及数字编号。</li><li>只能在声明它的方法或代码块中使用，而且是先声明后使用。除此之外的任何地方都不能使用该类。</li><li>局部内部类可以使用外部类的成员，包括私有的。</li><li>局部内部类可以使用外部方法的局部变量，但是必须是final的。由局部内部类和局部变量的声明周期不同所致。</li><li>局部内部类和局部变量地位类似，不能使用public,protected,缺省,private</li><li>局部内部类不能使用static修饰，因此也不能包含静态成员</li></ul><h4 id="_6-内部列的作用" tabindex="-1"><a class="header-anchor" href="#_6-内部列的作用" aria-hidden="true">#</a> 6. 内部列的作用</h4><p>当一个事物的内部，还有一个部分需要一个完整的结构进行描述，而这个内部的完整的结构又只为外部事物提供服务，那么整个内部的完整结构最好使用内部类。</p><h2 id="iv-匿名类" tabindex="-1"><a class="header-anchor" href="#iv-匿名类" aria-hidden="true">#</a> Ⅳ. 匿名类</h2><p>匿名类不能定义任何静态成员、方法和类，只能创建匿名类的一个实例。一个匿名类一定是在new的后面，用其隐含实现一个接口或实现一个类。</p><h4 id="_1-格式" tabindex="-1"><a class="header-anchor" href="#_1-格式" aria-hidden="true">#</a> 1. 格式</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">new</span> 父类构造器<span class="token punctuation">(</span>实参列表<span class="token punctuation">)</span> 或要实现的接口<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//匿名内部类的类体部分</span>
    <span class="token comment">//如果继承了抽象类或实现了接口，这里要重写抽象方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-特点" tabindex="-1"><a class="header-anchor" href="#_2-特点" aria-hidden="true">#</a> 2. 特点</h4><ul><li>匿名类必须继承父类或实现接口</li><li>匿名类只能有一个对象</li><li>匿名类对象只能使用多态形式引用</li></ul><h4 id="_3-示例" tabindex="-1"><a class="header-anchor" href="#_3-示例" aria-hidden="true">#</a> 3. 示例</h4><h5 id="_3-1-示例1" tabindex="-1"><a class="header-anchor" href="#_3-1-示例1" aria-hidden="true">#</a> 3.1 示例1</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">{</span>
        <span class="token class-name">I</span> o1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">I</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        o1<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//hello</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">I</span><span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-2-示例2" tabindex="-1"><a class="header-anchor" href="#_3-2-示例2" aria-hidden="true">#</a> 3.2 示例2</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">callnener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;implement for fun1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            
            <span class="token punctuation">}</span>        
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callneer</span><span class="token punctuation">(</span><span class="token class-name">A</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>
        a<span class="token punctuation">.</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,119),i=[l];function u(r,k){return s(),a("div",null,i)}const m=n(c,[["render",u],["__file","2-8.特殊类.html.vue"]]);export{m as default};
