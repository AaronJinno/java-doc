import{_ as a,r as d,o as i,c as n,a as t,b as e,d as o,e as r}from"./app-acb3e2bc.js";const s="/java-doc/img/sql/mongodb/1-1-1.png",h={},g=t("h2",{id:"i-mongodb-简介",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#i-mongodb-简介","aria-hidden":"true"},"#"),e(" Ⅰ. MongoDB 简介")],-1),c=t("p",null,[e("MongoDB是一个开源、高性能、无模式的 "),t("strong",null,"文档型数据库"),e(" ，当初的设计就是用于简化开发和方便扩展，是NoSQL数据库产品中的一种。是 "),t("strong",null,"最像关系型数据库（MySQL）"),e(" 的非关系型数据库。")],-1),x=t("h4",{id:"_1-line",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_1-line","aria-hidden":"true"},"#"),e(" 1. line")],-1),f={href:"https://www.mongodb.com/",target:"_blank",rel:"noopener noreferrer"},u=r('<h4 id="_2-语法风格" tabindex="-1"><a class="header-anchor" href="#_2-语法风格" aria-hidden="true">#</a> 2. 语法风格</h4><p>类似于: JS+MySQL的缝合</p><h4 id="_3-优点" tabindex="-1"><a class="header-anchor" href="#_3-优点" aria-hidden="true">#</a> 3. 优点</h4><ul><li>高性能：MongoDB提供高性能的数据持久性。</li><li>高可用：MongoDB的复制工具称为副本集（replica set），它可提供自动故障转移和数据冗余。</li><li>高扩展：提供了水平可扩展性作为其核心功能的一部分。</li><li>丰富查询支持：支持丰富的查询语言</li><li>其他：如无模式（动态模式）、灵活的文档模型</li></ul><h4 id="_4-应用场景" tabindex="-1"><a class="header-anchor" href="#_4-应用场景" aria-hidden="true">#</a> 4. 应用场景</h4><p>很多应用场景，关系型数据库难易应对。<br> 其实MogoDB很多时候是关系型数据库的一个替代。</p><h5 id="_3-1-解决的问题" tabindex="-1"><a class="header-anchor" href="#_3-1-解决的问题" aria-hidden="true">#</a> 3.1 解决的问题</h5><p>MongoDB可应对“三高”需求：</p><ul><li>High performance - 对数据库高并发读写的需求。</li><li>Huge Storage - 对海量数据的高效率存储和访问的需求。</li><li>High Scalability &amp;&amp; High Availability- 对数据库的高可扩展性和高可用性的需求。</li></ul><h5 id="_3-2-具体应用场景" tabindex="-1"><a class="header-anchor" href="#_3-2-具体应用场景" aria-hidden="true">#</a> 3.2 具体应用场景</h5><p>适合：数据流大、读写频繁以及价值比较低的数据。</p><ul><li>社交场景：使用 MongoDB 存储用户信息，以及用户发表的朋友圈信息，通过地理位置索引实现附近的人、地点等功能。</li><li>游戏场景：使用 MongoDB 存储游戏用户信息，用户的装备、积分等直接以内嵌文档的形式存储，方便查询、高效率存储和访问。</li><li>物流场景：使用 MongoDB 存储订单信息，订单状态在运送过程中会不断更新，以 MongoDB 内嵌数组的形式来存储，一次查询就能将订单所有的变更读取出来。</li><li>物联网场景：使用 MongoDB 存储所有接入的智能设备信息，以及设备汇报的日志信息，并对这些信息进行多维度的分析。</li><li>视频直播，使用 MongoDB 存储用户信息、点赞互动信息等。</li></ul><h5 id="_3-3-选择的依据" tabindex="-1"><a class="header-anchor" href="#_3-3-选择的依据" aria-hidden="true">#</a> 3.3 选择的依据</h5><ul><li>新应用，需求会变，数据模型无法确定，想快速迭代开发</li><li>应用不需要事务及复杂 join 支持</li><li>应用需要TB甚至 PB 级别数据存储</li><li>应用发展迅速，需要能快速水平扩展</li><li>应用需要大量的地理位置查询、文本查询</li></ul><h4 id="_4-serverless" tabindex="-1"><a class="header-anchor" href="#_4-serverless" aria-hidden="true">#</a> 4. Serverless</h4><p>当前，云服务兴起，云服务一般采用以MongoDB为核心的数据库架构。</p><h2 id="ii-存储结构" tabindex="-1"><a class="header-anchor" href="#ii-存储结构" aria-hidden="true">#</a> Ⅱ. 存储结构</h2><h4 id="_1-和mysql对比" tabindex="-1"><a class="header-anchor" href="#_1-和mysql对比" aria-hidden="true">#</a> 1. 和MySQL对比</h4><figure><img src="'+s+'" alt="1-1-1" tabindex="0" loading="lazy"><figcaption>1-1-1</figcaption></figure><p><strong>术语对比</strong></p><table><thead><tr><th style="text-align:left;">SQL术语</th><th style="text-align:left;">MongoDB术语</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">database</td><td style="text-align:left;">database</td><td style="text-align:left;">数据库</td></tr><tr><td style="text-align:left;">table</td><td style="text-align:left;">collection</td><td style="text-align:left;">数据库表/集合</td></tr><tr><td style="text-align:left;">row</td><td style="text-align:left;">document</td><td style="text-align:left;">数据记录行/文档</td></tr><tr><td style="text-align:left;">column</td><td style="text-align:left;">ﬁeld</td><td style="text-align:left;">数据字段/域</td></tr><tr><td style="text-align:left;">index</td><td style="text-align:left;">index</td><td style="text-align:left;">索引</td></tr><tr><td style="text-align:left;">table joins</td><td style="text-align:left;"></td><td style="text-align:left;">表连接,MongoDB不支持</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">嵌入文档</td><td style="text-align:left;">MongoDB通过嵌入式文档来替代多表连接</td></tr><tr><td style="text-align:left;">primary key</td><td style="text-align:left;">primary key</td><td style="text-align:left;">主键,MongoDB自动将_id字段设置为主键</td></tr></tbody></table><h4 id="_2-数据结构" tabindex="-1"><a class="header-anchor" href="#_2-数据结构" aria-hidden="true">#</a> 2. 数据结构</h4><p>MongoDB支持的数据结构非常松散，是一种类似于 JSON 的 格式叫BSON，所以它既可以存储比较复杂的数据类型，又相当的灵活。</p><p>MongoDB中的记录是一个 <strong>文档</strong> ，它是一个由字段和值对（ﬁeld:value）组成的数据结构。MongoDB文档类似于JSON对象，即 <strong>一个文档认为就是一个对象</strong> 。字段的数据类型是字符型，它的值除了使用基本的一些类型外，还可以包括其他文档、普通数组和文档数组。</p><p>MongoDB的最小存储单位就是文档(document)对象。文档(document)对象对应于关系型数据库的 <mark>行</mark> 。<br> 数据在MongoDB中以BSON（Binary-JSON）文档的格式存储在磁盘上。</p><h4 id="_3-bson" tabindex="-1"><a class="header-anchor" href="#_3-bson" aria-hidden="true">#</a> 3. BSON</h4><p>BSON（Binary Serialized Document Format）是一种类json的一种二进制形式的存储格式，简称Binary JSON。BSON和JSON一样，支持内嵌的文档对象和数组对象，但是BSON有JSON没有的一些数据类型，如Date和BinData类型。</p><p>BSON采用了类似于 C 语言结构体的名称、对表示方法，支持内嵌的文档对象和数组对象，具有轻量性、可遍历性、高效性的三个特点，可以有效描述非结构化数据和结构化数据。这种格式的优点是灵活性高，但它的缺点是空间利用率不是很理想。</p><p>Bson中，除了基本的JSON类型：string,integer,boolean,double,null,array和object，mongo还使用了特殊的数据类型。这些类型包括date,object id,binary data,regular expression 和code。每一个驱动都以特定语言的方式实现了这些类型。</p><h4 id="_4-bson数据类型参考" tabindex="-1"><a class="header-anchor" href="#_4-bson数据类型参考" aria-hidden="true">#</a> 4. BSON数据类型参考</h4><table><thead><tr><th style="text-align:left;">数据类型</th><th style="text-align:left;">描述</th><th style="text-align:left;">举例</th></tr></thead><tbody><tr><td style="text-align:left;">字符串</td><td style="text-align:left;">字符串类型的数据</td><td style="text-align:left;"><code>{&quot;x&quot; : &quot;foobar&quot;} </code></td></tr><tr><td style="text-align:left;">对象id</td><td style="text-align:left;">文档的12字节的唯一 ID</td><td style="text-align:left;"><code>{&quot;x&quot; \\:ObjectId() } </code></td></tr><tr><td style="text-align:left;">布尔值</td><td style="text-align:left;">true或者false</td><td style="text-align:left;"><code>{&quot;x&quot;\\:true} </code></td></tr><tr><td style="text-align:left;">数组</td><td style="text-align:left;">值的集合或者列表可以表示成数组</td><td style="text-align:left;"><code>{&quot;x&quot; ： \\[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]}</code></td></tr><tr><td style="text-align:left;">浮点数</td><td style="text-align:left;">数字就这一种类型，不支持整数</td><td style="text-align:left;"><code>{&quot;x&quot;：3.14159，&quot;y&quot;：3}</code></td></tr><tr><td style="text-align:left;">null</td><td style="text-align:left;">空值或者未定义的对象</td><td style="text-align:left;"><code>{&quot;x&quot;\\:null}</code></td></tr><tr><td style="text-align:left;">undeﬁned</td><td style="text-align:left;">未定义类型</td><td style="text-align:left;"><code>{&quot;x&quot;\\:undeﬁned}</code></td></tr><tr><td style="text-align:left;">正则表达式</td><td style="text-align:left;">采用JavaScript的正则表达式语法</td><td style="text-align:left;"><code>{&quot;x&quot; ： /foobar/i} </code></td></tr><tr><td style="text-align:left;">代码</td><td style="text-align:left;">文档中还可以包含JavaScript代码</td><td style="text-align:left;"><code>{&quot;x&quot; ： function() { /\\* …… \\*/ }}</code></td></tr></tbody></table><h2 id="iii-mongodb-与-redis" tabindex="-1"><a class="header-anchor" href="#iii-mongodb-与-redis" aria-hidden="true">#</a> Ⅲ. MongoDB 与 Redis</h2><p>MongoDB和Redis都是NoSQL，采用结构型数据存储。<br> 现在的分布式项目基本都会用到redis和mongodb。<br> 二者在使用场景中，存在一定的区别。</p><h4 id="_1-定位" tabindex="-1"><a class="header-anchor" href="#_1-定位" aria-hidden="true">#</a> 1. 定位</h4><p>定为不同：大家一般称之为Redis缓存、MongoDB数据库。</p><ul><li>Redis主要把数据存储在内存中，其“缓存”的性质远大于其“数据存储“的性质，其中数据的增删改查也只是像变量操作一样简单；</li><li>MongoDB却是一个“存储数据”的系统，增删改查可以添加很多条件，就像SQL数据库一样灵活。</li></ul><h4 id="_2-应用场景对比" tabindex="-1"><a class="header-anchor" href="#_2-应用场景对比" aria-hidden="true">#</a> 2. 应用场景对比</h4><ul><li>Redis︰场景较多，比如分布式架构，做session共享，高速缓存。</li><li>Mongodb︰日志记录、内容管理或者博客平台，比如评论系统。</li></ul>',38);function y(b,_){const l=d("ExternalLinkIcon");return i(),n("div",null,[g,c,x,t("p",null,[e("官网："),t("a",f,[e("https://www.mongodb.com/"),o(l)])]),u])}const B=a(h,[["render",y],["__file","1-1.介绍.html.vue"]]);export{B as default};
