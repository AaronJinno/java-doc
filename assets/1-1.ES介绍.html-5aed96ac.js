import{_ as a,o as e,c as i,e as c}from"./app-9484c6b3.js";const r="/java-doc/img/sql/es/1-1-1.jpg",h="/java-doc/img/sql/es/1-3-1.jpg",s={},t=c('<h2 id="es-概述" tabindex="-1"><a class="header-anchor" href="#es-概述" aria-hidden="true">#</a> ES 概述</h2><p>全文搜索属于最常见的需求，开源的 Elasticsearch是目前全文搜索引擎的首选。</p><p>它可以快速地储存、搜索和分析海量数据。</p><h4 id="_1-elastic-stack" tabindex="-1"><a class="header-anchor" href="#_1-elastic-stack" aria-hidden="true">#</a> 1. Elastic Stack</h4><figure><img src="'+r+'" alt="1-1-1" tabindex="0" loading="lazy"><figcaption>1-1-1</figcaption></figure><p>The Elastic Stack, 包括 Elasticsearch、Kibana、Beats 和 Logstash（也称为 ELK Stack）。</p><p>这个技术栈能够安全可靠地获取任何来源、任何格式的数据，然后实时地对数据进行搜索、分析和可视化。</p><h4 id="_2-elastic-search" tabindex="-1"><a class="header-anchor" href="#_2-elastic-search" aria-hidden="true">#</a> 2. Elastic Search</h4><p>Elaticsearch，简称为 ES，ES 是一个开源的高扩展的分布式全文搜索引擎，是整个 Elastic Stack 技术栈的核心。</p><p>它可以近乎实时的存储、检索数据；本身扩展性很好，可以扩展到上百台服务器，处理 PB 级别的数据。</p><h4 id="_3-lucene" tabindex="-1"><a class="header-anchor" href="#_3-lucene" aria-hidden="true">#</a> 3. Lucene</h4><p>Lucene 是 Apache 软件基金会 Jakarta 项目组的一个子项目，能够做全文索引和搜寻。Lucene只是一个提供全文搜索功能类库的核心工具包，需要晚上的服务框架搭建起来进行应用。</p><p>主流搜索引擎软件就两款：ElasticSearch 和 Solr, 这两款都是基于 Lucene 搭建的，两者的功能和效率基本一样。市面上比较流行的是ElasticSearch。</p><h4 id="_4-分布式" tabindex="-1"><a class="header-anchor" href="#_4-分布式" aria-hidden="true">#</a> 4. 分布式</h4><p>Elastic 本质上是一个分布式数据库，允许多台服务器协同工作，每台服务器可以运行多个 Elastic 实例。单个 Elastic 实例称为一个节点（node）。一组节点构成一个集群（cluster）</p><h4 id="_5-大企业的选择" tabindex="-1"><a class="header-anchor" href="#_5-大企业的选择" aria-hidden="true">#</a> 5. 大企业的选择</h4><p>以下IT公司采用了ElasticSearch</p><ul><li>GitHub：GitHub 使用Elasticsearch 搜索 20TB 的数据</li><li>维基百科：启动以 Elasticsearch 为基础的核心搜索架构</li><li>SoundCloud：为 1.8 亿用户提供即时而精准的音乐搜索</li><li>百度：目前广泛使用 Elasticsearch 作为文本数据分析</li><li>新浪：使用 Elasticsearch 分析处理 32 亿条实时日志</li><li>阿里：使用 Elasticsearch 构建日志采集和分析体系</li><li>Stack Overflow</li></ul><h2 id="全文搜索引擎" tabindex="-1"><a class="header-anchor" href="#全文搜索引擎" aria-hidden="true">#</a> 全文搜索引擎</h2><h4 id="_1-背景" tabindex="-1"><a class="header-anchor" href="#_1-背景" aria-hidden="true">#</a> 1. 背景</h4><p>Google，百度类的网站搜索，它们都是根据网页中的关键字生成索引，我们在搜索的时候输入关键字，它们会将该关键字即索引匹配到的所有网页返回；还有常见的项目中应用日志的搜索等等。对于这些非结构化的数据文本，关系型数据库搜索不是能很好的支持。</p><h4 id="_2-传统数据库的缺点" tabindex="-1"><a class="header-anchor" href="#_2-传统数据库的缺点" aria-hidden="true">#</a> 2. 传统数据库的缺点</h4><p>一般传统数据库，全文检索都实现的很鸡肋，因为一般也没人用数据库存文本字段。进行全文检索需要扫描整个表，如果数据量大的话即使对 SQL 的语法优化，也收效甚微。建立了索引，但是维护起来也很麻烦，对于 insert 和 update 操作都会重新构建索引。</p><h4 id="_3-不适用常规搜索的场景" tabindex="-1"><a class="header-anchor" href="#_3-不适用常规搜索的场景" aria-hidden="true">#</a> 3. 不适用常规搜索的场景</h4><p>基于以上原因可以分析得出，在一些生产环境中，使用常规的搜索方式，性能是非常差的：</p><ul><li>搜索的数据对象是大量的非结构化的文本数据。</li><li>文件记录量达到数十万或数百万个甚至更多。</li><li>支持大量基于交互式文本的查询。</li><li>需求非常灵活的全文搜索查询。</li><li>对高度相关的搜索结果的有特殊需求，但是没有可用的关系数据库可以满足</li><li>对不同记录类型、非文本数据操作或安全事务处理的需求相对较少的情况。</li></ul><h4 id="_4-全文搜索" tabindex="-1"><a class="header-anchor" href="#_4-全文搜索" aria-hidden="true">#</a> 4. 全文搜索</h4><p>为了解决结构化数据搜索和非结构化数据搜索性能问题，我们就需要专业，健壮，强大的全文搜索引擎。这里说到的全文搜索引擎指的是目前广泛应用的主流搜索引擎。</p><h5 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理" aria-hidden="true">#</a> 工作原理</h5><p>它的工作原理是计算机索引程序通过扫描文章中的每一个词，对每一个词建立一个索引，指明该词在文章中出现的次数和位置，当用户查询时，检索程序就根据事先建立的索引进行查找，并将查找的结果反馈给用户的检索方式。这个过程类似于通过字典中的检索字表查字的过程。</p><h2 id="es的数据格式" tabindex="-1"><a class="header-anchor" href="#es的数据格式" aria-hidden="true">#</a> ES的数据格式</h2><p>Elasticsearch 是面向文档型数据库，一条数据在这里就是一个文档。</p><h4 id="elasticsearch-与-mysql对比" tabindex="-1"><a class="header-anchor" href="#elasticsearch-与-mysql对比" aria-hidden="true">#</a> ElasticSearch 与 MySQL对比</h4><p>为了方便理解，将 Elasticsearch 里存储文档数据和关系型数据库 MySQL 存储数据的概念进行一个类比</p><figure><img src="'+h+'" alt="1-3-1" tabindex="0" loading="lazy"><figcaption>1-3-1</figcaption></figure><p>ES 里的 Index 可以看做一个库，而 Types 相当于表，Documents 则相当于表的行。</p><p>这里 Types 的概念</p>',37),l=[t];function d(n,p){return e(),i("div",null,l)}const _=a(s,[["render",d],["__file","1-1.ES介绍.html.vue"]]);export{_ as default};
