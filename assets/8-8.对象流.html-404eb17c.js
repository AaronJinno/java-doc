import{_ as n,o as s,c as a,e}from"./app-9484c6b3.js";const t={},p=e(`<h4 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h4><p>由ObjectInputStream 和OjbectOutputSteam两个类组成</p><p>作用：用于存储和读取基本数据类型数据或对象的处理流。它的强大之处就是可以把Java中的对象写入到数据源中（序列化），也能把对象从数据源中还原回来（反序列化）。</p><p>实际开发中，我们都是将对象格式化成JSON进行传输，而不是进行序列化传输。</p><h4 id="_1-序列化与反序列化" tabindex="-1"><a class="header-anchor" href="#_1-序列化与反序列化" aria-hidden="true">#</a> 1. 序列化与反序列化</h4><ul><li>序列化：用ObjectOutputStream类，将内存中的java对象保存到磁盘中或通过网络传输出去。</li><li>反序列化：用ObjectInputStream类将磁盘文件中的对象还原为内存中的一个java对象。</li></ul><h4 id="_2-对象的序列化机制" tabindex="-1"><a class="header-anchor" href="#_2-对象的序列化机制" aria-hidden="true">#</a> 2. 对象的序列化机制</h4><p>对象序列化机制允许把内存中的Java对象转换成平台无关的二进制流，从而允许把这种二进制流持久地保存在磁盘上，或通过网络将这种二进制流传输到另一个网络节点。//当其它程序获取了这种二进制流，就可以恢复成原来的Java对象</p><p>意义：序列化的好处在于可将任何实现了Serializable接口的对象转化为 字节数据，使其在保存和传输时可被还原</p><h4 id="_3-一些操作" tabindex="-1"><a class="header-anchor" href="#_3-一些操作" aria-hidden="true">#</a> 3. 一些操作</h4><h5 id="_3-1-初始化" tabindex="-1"><a class="header-anchor" href="#_3-1-初始化" aria-hidden="true">#</a> 3.1 初始化</h5><p>创建序列化流，需要套接在FileOutputStream上。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1. 创建序列化流，需要套接在FileOutputStream上</span>
<span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;object.dat&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//2.创建反序列化流,需要套接在FileInputStream上</span>
<span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;object.dat&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-2-writeobject" tabindex="-1"><a class="header-anchor" href="#_3-2-writeobject" aria-hidden="true">#</a> 3.2 writeObject</h5><p>输出可序列化对象，每操作一次，就需要flush一次</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">xxObject</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-3-readobject" tabindex="-1"><a class="header-anchor" href="#_3-3-readobject" aria-hidden="true">#</a> 3.3 readObject</h5><p>读取流中的对象，返回值类型是被反序列化对象的类。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span> obj <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-4-flush" tabindex="-1"><a class="header-anchor" href="#_3-4-flush" aria-hidden="true">#</a> 3.4 flush</h5><p>刷新操作，输出可序列化对象，每操作一次，就需要flush一次</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>oos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-示例-字符串的序列化和反序列化" tabindex="-1"><a class="header-anchor" href="#_4-示例-字符串的序列化和反序列化" aria-hidden="true">#</a> 4. 示例：字符串的序列化和反序列化</h4><h5 id="_4-1-序列化" tabindex="-1"><a class="header-anchor" href="#_4-1-序列化" aria-hidden="true">#</a> 4.1 序列化</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1.创建输入流、序列化流</span>
<span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;object.dat&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//2.使用writerObject方法进行序列化</span>
oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;我爱n门&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
oos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//刷新操作</span>

<span class="token comment">//3.关闭流</span>
oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//异常处理：省略</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-2-反序列化" tabindex="-1"><a class="header-anchor" href="#_4-2-反序列化" aria-hidden="true">#</a> 4.2 反序列化</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1.创建写出流、反序列化流</span>
<span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;object.dat&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//2.使用readObejct方法进行反序列化</span>
<span class="token class-name">Object</span> obj <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//3.关闭流</span>
ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//异常处理：省略</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-序列化类-需要满足的要求" tabindex="-1"><a class="header-anchor" href="#_5-序列化类-需要满足的要求" aria-hidden="true">#</a> 5. 序列化类，需要满足的要求</h4><ul><li>需要实现接口：Serializable <ul><li>基本数据类型和String都已经实现该接口了</li><li>该接口是个标识接口，里面是空的，只是用来标识类可以进行实例化</li></ul></li><li>当前类提供一个全局常量：serialVersionUID</li><li>除了当前Person类需要实现Serializable接口之外，还必须保证其内部所有属性也必须是可序列化的。（ <ul><li>默认情况下，基本数据类型可序列化</li><li>要注意的是，某个属性的类型是其他类，这个类也需要能序列化</li></ul></li><li>序列化后的结果中，不包含static和transient修饰的成员变量</li></ul><h4 id="_6-示例-自定义类实线序列化与反序列化" tabindex="-1"><a class="header-anchor" href="#_6-示例-自定义类实线序列化与反序列化" aria-hidden="true">#</a> 6. 示例：自定义类实线序列化与反序列化</h4><h5 id="_6-1-目标类" tabindex="-1"><a class="header-anchor" href="#_6-1-目标类" aria-hidden="true">#</a> 6.1 目标类</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">475463534532L</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6-2-序列化" tabindex="-1"><a class="header-anchor" href="#_6-2-序列化" aria-hidden="true">#</a> 6.2 序列化</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1.创建输入流、序列化流</span>
<span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;object.dat&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//2.使用writerObject方法进行序列化</span>
oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;王铭&quot;</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
oos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;张学良&quot;</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
oos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//3.关闭流</span>
oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//异常处理：省略</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6-3-反序列化" tabindex="-1"><a class="header-anchor" href="#_6-3-反序列化" aria-hidden="true">#</a> 6.3 反序列化</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1.创建写出流、反序列化流</span>
<span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;object.dat&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//2.使用readObejct方法进行反序列化</span>
<span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   
   <span class="token comment">//进行toString输出</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//3.关闭流</span>
ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//异常处理：省略</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-serialversionuid" tabindex="-1"><a class="header-anchor" href="#_7-serialversionuid" aria-hidden="true">#</a> 7. serialVersionUID</h4><p>凡是实现Serializable接口的类都有一个表示序列化版本标识符的静态变量：值可自定义。<br> 如果类没有显示定义这个静态常量，它的值是Java运行时环境根据类的内部细节自动生成的。若类的实例变量做了修改，serialVersionUID 可能发生变化。故建议，显式声明，否则，在对象序列化后，如果对类进行了修改，将无法反序列化。</p><p>反序列化时，会比对这个ID，一致后才能正常反序列化。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">475463534532L</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,40),c=[p];function o(l,i){return s(),a("div",null,c)}const r=n(t,[["render",o],["__file","8-8.对象流.html.vue"]]);export{r as default};
