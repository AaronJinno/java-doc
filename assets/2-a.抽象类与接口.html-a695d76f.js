import{_ as n,o as s,c as a,e as t}from"./app-2f916dc9.js";const p="/java-doc/img/java/javase/2-a-1.jpg",e="/java-doc/img/java/javase/2-a-2.jpg",c="/java-doc/img/java/javase/2-a-3.jpg",o={},i=t(`<h2 id="i-abstract" tabindex="-1"><a class="header-anchor" href="#i-abstract" aria-hidden="true">#</a> Ⅰ. abstract</h2><h4 id="_1-abstract-class-抽象类" tabindex="-1"><a class="header-anchor" href="#_1-abstract-class-抽象类" aria-hidden="true">#</a> 1. abstract class：抽象类</h4><p>用abstract关键字来修饰一个类，这个类叫做抽象类</p><p>虽然不能实例化，抽象类中还是存在构造器的，因为抽象类的子类还是要实例化的。开发中，都会提供抽象类的子类，让子类实例化，完成相关的操作。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-abstract方法-抽象方法" tabindex="-1"><a class="header-anchor" href="#_2-abstract方法-抽象方法" aria-hidden="true">#</a> 2. abstract方法：抽象方法</h4><p>用abstract来修饰一个方法，该方法叫做抽象方法。</p><p>抽象方法只有方法的声明，没有方法体,以分号结束；含有抽象方法的类必须被声明为抽象类。</p><p>若子类重写了父类中的所有的抽象方法后，此子类方可实例化，也就是说，子类必须重写父类中所有的抽象方法（提供方法体），除非自己也声明成抽象类。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token class-name">Say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-abstract的使用注意" tabindex="-1"><a class="header-anchor" href="#_3-abstract的使用注意" aria-hidden="true">#</a> 3. abstract的使用注意</h4><ul><li>抽象类不一定有抽象方法，但是有抽象方法的类一定要声明成抽象类。</li><li>abstract不能用来修饰属性、代码块构造器等结构</li><li>abstract不能用来修饰私有方法、静态方法、final的方法、final的类</li></ul><h4 id="_4-创建抽象类的匿名类" tabindex="-1"><a class="header-anchor" href="#_4-创建抽象类的匿名类" aria-hidden="true">#</a> 4. 创建抽象类的匿名类</h4><p>普通类是可以创建匿名对象的，而抽象类不能实例化，所以理论上无法创建匿名对象。</p><p>但可以通过特殊的方法创建匿名类，达到匿名对象同样的效果</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span> <span class="token comment">//匿名类</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//匿名方法</span>
<span class="token punctuation">}</span>
<span class="token comment">//现在不用子类继承，不实例化子类，来实例化一个匿名类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//直接new抽象类</span>
           <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//需要重写抽象类里的抽象方法。</span>
              <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;eat shit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span> 
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">Person</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>
        p<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用匿名类里的eat方法</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-模板方法设计模式" tabindex="-1"><a class="header-anchor" href="#_5-模板方法设计模式" aria-hidden="true">#</a> 5. 模板方法设计模式</h4><p>抽象类可用于模板方法设计模式。</p><p>思想：当功能内部一部分实现是确定的，一部分实现是不确定的。这时可以把不确定的部分暴露出去，让子类去实现。</p><p>换句话说，在软件开发中实现一个算法时，整体步骤很固定、通用，这些步骤已经在父类中写好了。但是某些部分易变，易变部分可以抽象出来，供不同子类实现。这就是一种模板模式。</p><h5 id="_5-1-示例-计算代码执行时间" tabindex="-1"><a class="header-anchor" href="#_5-1-示例-计算代码执行时间" aria-hidden="true">#</a> 5.1 示例：计算代码执行时间</h5><p>解析：创建一个计算代码执行时间的类，我们并不知道要计算的代码具体是什么代码，因此可以将要计算的代码作为抽象方法来定义和使用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Template</span><span class="token punctuation">{</span> <span class="token comment">// 计算代码执行时间的类</span>
  <span class="token comment">//计算某段代码执行所需要花费的时间的方法</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">spendTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不确定的部分、易变的部分</span>
    <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;花费的时间为：&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//不确定部分设计成抽象方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-2-示例-银行业务流程" tabindex="-1"><a class="header-anchor" href="#_5-2-示例-银行业务流程" aria-hidden="true">#</a> 5.2 示例：银行业务流程</h5><p>解析：银行的业务流程是固定的：预约取号-&gt;办理业务-&gt;评分；我们可以将其作为一个类，但是办理的具体业务是不确定的，因此我们可以将办理的业务作为抽象方法；然后为具体的业务创建子类继承该抽象类，实现具体业务的代码即可。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BankTemplateMethod</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">takeNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;取号排队&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//步骤一：</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//这种步骤中不确定，需要具体子类确定的步骤，像个钩子，被称为钩子函数</span>
  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">transact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 步骤二：不确定 办理具体的业务</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//步骤三：反抗评分</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;反馈评分&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 模板方法，把基本操作组合到一起，子类一般不能重写</span>
  <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">takeNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">transact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 像个钩子，具体执行时，挂哪个子类，就执行哪个子类</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">DrawMoney</span> <span class="token keyword">extends</span> <span class="token class-name">BankTemplateMethod</span> <span class="token punctuation">{</span> <span class="token comment">//示例：实现</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transact</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我要取款！！！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-interface" tabindex="-1"><a class="header-anchor" href="#ii-interface" aria-hidden="true">#</a> Ⅱ. interface</h2><h4 id="说明" tabindex="-1"><a class="header-anchor" href="#说明" aria-hidden="true">#</a> 说明</h4><p>接口和类是并列关系，或者可以理解为一种特殊的类。从本质上讲，接口是一种特殊的抽象类，这种抽象类中只包含常量和方法的定义(JDK7.0及之前)，而没有变量和方法的实现。</p><p>在开发中，常看到一个类不是去继承一个已经实现好的类，而是要么继承抽象类，要么实现接口。</p><h4 id="_1-概述-接口的由来" tabindex="-1"><a class="header-anchor" href="#_1-概述-接口的由来" aria-hidden="true">#</a> 1. 概述：接口的由来</h4><h5 id="_1-1-多重继承" tabindex="-1"><a class="header-anchor" href="#_1-1-多重继承" aria-hidden="true">#</a> 1.1 多重继承</h5><p>有时必须从几个类中派生出一个子类，继承它们所有的属性和方法。但是，Java不支持多重继承。有了接口，就可以得到多重继承的效果。</p><h5 id="_1-2-功能" tabindex="-1"><a class="header-anchor" href="#_1-2-功能" aria-hidden="true">#</a> 1.2 功能</h5><p>有时必须从几个类中抽取出一些共同的行为特征，而它们之间又没有is-a的关系，仅仅是具有相同的行为特征而已。例如：鼠标、键盘、打印机、扫描仪、移动硬盘等都支持USB连接。不能定义一个USB父类让他们都去继承，USB是他们的一个功能，而不是他们的一个抽象。因此就需要用到接口了。</p><figure><img src="`+p+`" alt="2-a-1" tabindex="0" loading="lazy"><figcaption>2-a-1</figcaption></figure><h4 id="_2-接口的意义-规范" tabindex="-1"><a class="header-anchor" href="#_2-接口的意义-规范" aria-hidden="true">#</a> 2. 接口的意义：规范</h4><p>接口的本质是契约，标准，规范，就像我们的法律一样。制定好后大家都要遵守。</p><p>接口就是规范，定义的是一组规则，体现了现实世界中“如果你是/要...则必须能...”的思想。</p><p>继承是一个&quot;是不是&quot;的关系，而接口实现则是 &quot;能不能&quot;的关系。</p><p>在开发中，常看到一个类不是去继承一个已经实现好的类，而是要么继承抽象类，要么实现接口</p><h4 id="_3-接口定义" tabindex="-1"><a class="header-anchor" href="#_3-接口定义" aria-hidden="true">#</a> 3. 接口定义</h4><p>接口采用interface关键字来定义，接口(interface)是抽象方法和常量值定义的集合；接口内部只能定义全局常量和抽象方法</p><ul><li>全局常量：public static final <ul><li>可以省略public static final，默认就是public static final</li></ul></li><li>抽象方法：public abstract。 <ul><li>可以省略abstract，默认就是abstract</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Flyable</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_SPEED</span> <span class="token operator">=</span> <span class="token number">7900</span><span class="token punctuation">;</span><span class="token comment">//全局常量</span>
  <span class="token keyword">int</span> <span class="token constant">MIN_SPEED</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//省略了public static final</span>
  
  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//抽象方法</span>
  <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//省略了public abstract</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-接口的特点" tabindex="-1"><a class="header-anchor" href="#_4-接口的特点" aria-hidden="true">#</a> 4. 接口的特点</h4><ul><li>接口中不能定义构造器的！意味着接口不可以实例化</li><li>接口与接口之间可以继承，而且可以多继承</li><li>接口中的所有成员变量都默认是由public static final修饰的。</li><li>接口中的所有抽象方法都默认是由public abstract修饰的。</li></ul><h4 id="_5-接口的使用细节" tabindex="-1"><a class="header-anchor" href="#_5-接口的使用细节" aria-hidden="true">#</a> 5. 接口的使用细节</h4><ul><li>定义Java类的语法格式：先写extends，后写implements <ul><li><code>class Son extends Father implements Students{...}</code></li></ul></li><li>一个类可以实现多个接口，接口也可以继承其它接口。</li><li>实现接口的类中必须提供接口中所有方法的具体实现内容，方可实例化。否则，仍需定义为抽象类。</li><li>接口的主要用途就是被实现类实现。（面向接口编程） <ul><li>几乎所有的设计模式都是面向接口编程的。</li></ul></li><li>与继承关系类似，接口与实现类之间存在多态性 <ul><li>很多设计模式都用到了接口这个特性。</li></ul></li></ul><h4 id="_6-接口的实现" tabindex="-1"><a class="header-anchor" href="#_6-接口的实现" aria-hidden="true">#</a> 6. 接口的实现</h4><p>Java开发中，接口通过让类去实现(implements)的方式来使用；如果实现类实现了接口中的所有抽象方法，则此实现类就可以实例化；否则就只能定义为抽象类。</p><p>Java类可以实现多个接口 ---&gt;弥补了Java单继承性的局限性</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">AA</span> <span class="token keyword">extends</span> <span class="token class-name">BB</span> <span class="token keyword">implements</span> <span class="token class-name">CC</span><span class="token punctuation">,</span><span class="token constant">DD</span><span class="token punctuation">,</span><span class="token constant">EE</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_7-接口示例" tabindex="-1"><a class="header-anchor" href="#_7-接口示例" aria-hidden="true">#</a> 7. 接口示例</h4><p>接口的具体使用，体现多态性。</p><h5 id="_7-1-示例-模拟usb" tabindex="-1"><a class="header-anchor" href="#_7-1-示例-模拟usb" aria-hidden="true">#</a> 7.1 示例：模拟USB</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//定义USB接口</span>
<span class="token keyword">interface</span> <span class="token class-name">USB</span><span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//常量：定义了长、宽、最大最小的传输速度等</span>
    <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//连接USB</span>
    <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//断开USB</span>
<span class="token punctuation">}</span>

<span class="token comment">//实现USB接口</span>
<span class="token keyword">class</span> <span class="token class-name">Flash</span> <span class="token keyword">implements</span> <span class="token class-name">USB</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;U盘开启工作&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;U盘结束工作&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//在电脑上使用USB</span>
<span class="token keyword">class</span> <span class="token class-name">Computer</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transferData</span><span class="token punctuation">(</span><span class="token class-name">USB</span> usb<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//USB usb = new Flash();</span>
    usb<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;具体传输数据的细节&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    usb<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>   
<span class="token punctuation">}</span>

<span class="token comment">//用法：有4中方式使用flash</span>
<span class="token class-name">Computer</span> com <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//实例化子类</span>
<span class="token class-name">Flash</span> flash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Flash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//实例化子类</span>
com<span class="token punctuation">.</span><span class="token function">transferData</span><span class="token punctuation">(</span>flash<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//创建了接口的非匿名实现类的匿名对象</span>
com<span class="token punctuation">.</span><span class="token function">transferData</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Flash</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//匿名对象</span>
<span class="token comment">//创建了接口的匿名实现类的非匿名对象</span>
<span class="token class-name">USB</span> flash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">USB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;USB开始工作&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;USB结束工作&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
com<span class="token punctuation">.</span><span class="token function">transferData</span><span class="token punctuation">(</span>flash<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//创建了接口的匿名实现类的匿名对象</span>
com<span class="token punctuation">.</span><span class="token function">transferData</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">USB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;USB开始工作&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;USB结束工作&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_7-2-jdbc" tabindex="-1"><a class="header-anchor" href="#_7-2-jdbc" aria-hidden="true">#</a> 7.2 JDBC</h5><p>JDBC：接口，定义了所有操作数据库的抽象方法。</p><p>其他数据库驱动实现接口（一些接口的实现集合）。操作时操作JDBC接口里的方法。</p><figure><img src="`+e+'" alt="2-a-2" tabindex="0" loading="lazy"><figcaption>2-a-2</figcaption></figure><p>意义：只掌握一套连接数据库的方法，就能操作所有数据库。</p><h4 id="_8-接口与抽象类的对比" tabindex="-1"><a class="header-anchor" href="#_8-接口与抽象类的对比" aria-hidden="true">#</a> 8. 接口与抽象类的对比</h4><figure><img src="'+c+`" alt="2-a-3" tabindex="0" loading="lazy"><figcaption>2-a-3</figcaption></figure><h2 id="iii-接口新特性" tabindex="-1"><a class="header-anchor" href="#iii-接口新特性" aria-hidden="true">#</a> Ⅲ. 接口新特性</h2><p>JDK8中除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CompareA</span> <span class="token punctuation">{</span>
  <span class="token comment">//静态方法</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;CompareA:北京&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//默认方法</span>
  <span class="token keyword">public</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;CompareA：上海&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;CompareA：上海&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-静态方法" tabindex="-1"><a class="header-anchor" href="#_1-静态方法" aria-hidden="true">#</a> 1. 静态方法</h4><p>使用 static 关键字修饰。只能通过接口直接调用静态方法，并执行其方法体。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">CompareA</span><span class="token punctuation">.</span><span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-默认方法" tabindex="-1"><a class="header-anchor" href="#_2-默认方法" aria-hidden="true">#</a> 2. 默认方法</h4><p>默认方法使用 default 关键字修饰。可以通过实现类对象来调用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>s<span class="token punctuation">.</span><span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s<span class="token punctuation">.</span><span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>重写：如果实现类重写了接口中的默认方法，调用时，仍然调用的是重写以后的方法</li><li>类优先：如果子类(或实现类)继承的父类和实现的接口中声明了同名同参数的默认方法，那么子类在没有重写此方法的情况下，默认调用的是父类中的同名同参数的方法。--&gt;类优先原则。</li><li>接口冲突：如果实现类实现了多个接口，而这多个接口中定义了同名同参数的默认方法，那么在实现类没有重写此方法的情况下，报错。--&gt;接口冲突。解决：需要我们必须在实现类中重写此方法。</li></ul><h4 id="_3-在子类中调用父类、接口中被重写的方法" tabindex="-1"><a class="header-anchor" href="#_3-在子类中调用父类、接口中被重写的方法" aria-hidden="true">#</a> 3. 在子类中调用父类、接口中被重写的方法</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用自己定义的重写的方法</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用的是父类中声明的</span>
    <span class="token comment">//调用接口中的默认方法,可以调用多个接口的</span>
    <span class="token class-name">CompareA</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">CompareB</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-静态方法和默认方法的意义" tabindex="-1"><a class="header-anchor" href="#_4-静态方法和默认方法的意义" aria-hidden="true">#</a> 4. 静态方法和默认方法的意义</h4><h5 id="_4-1-静态方法" tabindex="-1"><a class="header-anchor" href="#_4-1-静态方法" aria-hidden="true">#</a> 4.1 静态方法：</h5><ul><li>解释：静态方法，就是接口可以直接掉用的方法，不用实现类也可以</li><li>意义：不用实现接口也能调用这些方法，可以把接口当做工具类使用</li><li>详细：静态方法在实现类中是看不到，无法调用（但可以重写），静态方法只是用来取代一些工具类的。</li></ul><h5 id="_4-2-默认方法" tabindex="-1"><a class="header-anchor" href="#_4-2-默认方法" aria-hidden="true">#</a> 4.2 默认方法</h5><ul><li>解释：就是方法的默认实现；即实现接口的类可以直接使用这些方法。</li><li>意义：它将允许我们向较旧的接口添加方法。</li><li>详细：接口的实现类可以直接使用这些默认的方法，同时还可以重写默认的方法，这不是强制性的重写。默认方法使得开发者可以在不破坏二进制兼容性的前提下，往现存接口中添加新的方法，即不强制那些实现了该接口的类也同时实现这个新加的方法。</li></ul>`,81),l=[i];function u(d,k){return s(),a("div",null,l)}const v=n(o,[["render",u],["__file","2-a.抽象类与接口.html.vue"]]);export{v as default};
