import{_ as a,o as n,c as s,e}from"./app-889eb22c.js";const p="/java-doc/img/java/javase/2-c-1.jpg",t="/java-doc/img/java/javase/2-c-2.jpg",o={},i=e('<div class="hint-container tip"><p class="hint-container-title">提示</p><p>仅简单介绍，详见：JVM</p></div><h2 id="i-类与对象" tabindex="-1"><a class="header-anchor" href="#i-类与对象" aria-hidden="true">#</a> Ⅰ. 类与对象</h2><h4 id="_1-内存区域" tabindex="-1"><a class="header-anchor" href="#_1-内存区域" aria-hidden="true">#</a> 1. 内存区域</h4><figure><img src="'+p+'" alt="2-c-1" tabindex="0" loading="lazy"><figcaption>2-c-1</figcaption></figure><ul><li>堆（Heap）：用于存放对象实例；所有的对象实例以及数组都要在堆上分配内存。</li><li>栈（Stack）：是指虚拟机栈。虚拟机栈用于存储局部变量等。 <ul><li>局部变量表存放了编译期可知长度的各种基本数据类型（boolean、byte、char 、 short 、 int 、 float 、 long 、double）、对象引用（reference类型，它不等同于对象本身，是对象在堆内存的首地址）。 方法执行完，自动释放。</li></ul></li><li>方法区（Method Area）：存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</li><li>其他区域：其他区域跟类和对象无关，不用关注</li></ul><h4 id="_2-对象的内存解析" tabindex="-1"><a class="header-anchor" href="#_2-对象的内存解析" aria-hidden="true">#</a> 2. 对象的内存解析</h4><figure><img src="'+t+`" alt="2-c-2" tabindex="0" loading="lazy"><figcaption>2-c-2</figcaption></figure><h5 id="_2-1-person-p1-new-person" tabindex="-1"><a class="header-anchor" href="#_2-1-person-p1-new-person" aria-hidden="true">#</a> 2.1 <code>Person p1 = new Person</code></h5><p>new类创建对象时，在堆内存中，保存了对象的实体；同时在栈内存中，是k=v的形式，用k保存了对象的标识符p1，用v保存了对象实体所在内存空间的首地址。即对象的标识符p1保存了对象的内存地址，p1指向了对象实体；而对象实体中保存了对象的属性。</p><h5 id="_2-2-p1-name-tome-p1-ismale-true" tabindex="-1"><a class="header-anchor" href="#_2-2-p1-name-tome-p1-ismale-true" aria-hidden="true">#</a> 2.2 <code>p1.name = Tome；p1.isMale=true</code></h5><p>对象的属性是复制类的，属性的默认值就是类里定义的值；如果没有默认值，就采用数据类型的默认值。当对属性进行修改时，对象实体内属性的值就被修改了。</p><h5 id="_2-3-person-p2-new-person" tabindex="-1"><a class="header-anchor" href="#_2-3-person-p2-new-person" aria-hidden="true">#</a> 2.3 <code>Person p2 = new Person()</code></h5><p>再新建一个对象时，堆内存中又开辟了一块内存空间储存对象的实体。同时栈内存中，用p2保存了新对象的内存地址。</p><p>p1和p2是完全独立的，他们指向各自的对象内存地址。两个对象中保存的属性也是互不相干的（各种有自己的内存空间）。</p><h5 id="_2-4-person-p3-p1-p3-age-10" tabindex="-1"><a class="header-anchor" href="#_2-4-person-p3-p1-p3-age-10" aria-hidden="true">#</a> 2.4 <code>Person p3 = p1；p3.age = 10</code></h5><p>通过变量赋值的方式，将p1保存的内存地址赋给了p3，因此现在p1和p3保存的是相同的内存地址，指向同一个对象，通过p1和p3对对象的属性进行修改，会互相影响到对方。</p><h4 id="_3-注意事项" tabindex="-1"><a class="header-anchor" href="#_3-注意事项" aria-hidden="true">#</a> 3. 注意事项</h4><p>引用类型的变量，只可能存储两类值：null 或 地址值（含变量的类型）</p><h2 id="ii-变量间赋值" tabindex="-1"><a class="header-anchor" href="#ii-变量间赋值" aria-hidden="true">#</a> Ⅱ. 变量间赋值</h2><h4 id="_1-结论" tabindex="-1"><a class="header-anchor" href="#_1-结论" aria-hidden="true">#</a> 1. 结论</h4><p>将一个变量的值赋值给另一个变量时，</p><ul><li>如果变量的值是基本数据类型：那么只是将值复制给另一个变量，两个变量各种保存了一份值，互不干扰，当其中一个变量的值改变时不会影响另一个。</li><li>如果变量的值是引用数据类型：那么变量保存的其实是值所在内存的内存地址，进行赋值时，是将内存地址传给了对方，两个变量指向同一内存地址，互为引用，互相干扰。</li></ul><h4 id="_2-基本数据类型" tabindex="-1"><a class="header-anchor" href="#_2-基本数据类型" aria-hidden="true">#</a> 2. 基本数据类型</h4><p>基本数据类型的值，是直接跟变量对应的，没有通过保存指针来用变量指向值。</p><p>所以基本数据类型在赋值的时候，是直接将值赋给了对方，两个变量互不干扰。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10 10</span>
inb b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10 20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-引用数据类型" tabindex="-1"><a class="header-anchor" href="#_3-引用数据类型" aria-hidden="true">#</a> 3. 引用数据类型</h4><p>引用数据类型的标识符保存的是值的内存地址，因此在向其他变量赋值的时候，是将内存地址传过去了，两个变量指向同一内存地址，互为引用，互相干扰。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token char">&#39;hello&#39;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//hello hello</span>
b <span class="token operator">=</span> <span class="token string">&quot;OK &quot;</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//OK OK </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29),c=[i];function l(r,d){return n(),s("div",null,c)}const h=a(o,[["render",l],["__file","2-c.内存解析.html.vue"]]);export{h as default};
