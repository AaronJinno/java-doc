import{_ as n,o as a,c as s,e}from"./app-d25397b5.js";const p="/java-doc/img/java/javase/2-3-1.jpg",t={},i=e(`<h2 id="i-介绍" tabindex="-1"><a class="header-anchor" href="#i-介绍" aria-hidden="true">#</a> Ⅰ. 介绍</h2><h4 id="程序设计的追求" tabindex="-1"><a class="header-anchor" href="#程序设计的追求" aria-hidden="true">#</a> 程序设计的追求</h4><ul><li>高内聚 ：类的内部数据操作细节自己完成，不允许外部干涉；</li><li>低耦合 ：仅对外暴露少量的方法用于使用。</li></ul><h4 id="_1-什么是封装" tabindex="-1"><a class="header-anchor" href="#_1-什么是封装" aria-hidden="true">#</a> 1. 什么是封装</h4><p>隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提高系统的可扩展性、可维护性。通俗的说，把该隐藏的隐藏起来，该暴露的暴露出来。这就是封装性的设计思想。</p><h4 id="_2-封装性的意义" tabindex="-1"><a class="header-anchor" href="#_2-封装性的意义" aria-hidden="true">#</a> 2. 封装性的意义</h4><p>当我们使用一个类时，如果直接对类内部的属性进行访问和操作，可能会导致数据的错误、混乱或安全性问题。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        p1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//修改了Person类内部的属性</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token class-name">String</span> uname<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-1-直接访问属性" tabindex="-1"><a class="header-anchor" href="#_2-1-直接访问属性" aria-hidden="true">#</a> 2.1 直接访问属性</h5><p>如上，我们在类外部直接访问了类内部的属性，将年龄设置成了负数，这是不符合常理且危险的。我们正确的做法是，属性只能在类的内部访问，在类外部访问需要通过方法，我们可以在方法中通过方法体来验证和保护要访问的数据。</p><h5 id="_2-2-通过封装保护属性" tabindex="-1"><a class="header-anchor" href="#_2-2-通过封装保护属性" aria-hidden="true">#</a> 2.2 通过封装保护属性</h5><p>如下，我们通过将属性设置为私有的，禁止外部访问，来包含属性，并设置 setxxx和get方法来访问和操作属性。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        p1<span class="token punctuation">.</span>getAge<span class="token punctuation">;</span>
        p1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//报错，私有属性无权访问</span>
        p1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token class-name">String</span> uname<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            age  <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            age <span class="token operator">=</span> a<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-3-总结" tabindex="-1"><a class="header-anchor" href="#_2-3-总结" aria-hidden="true">#</a> 2.3 总结</h5><p>Java中通过将数据声明为私有的(private)，再提供公共的（public）方法:getXxx() 和setXxx()实现对该属性的操作，以实现下述目的：</p><ul><li>隐藏一个类中不需要对外提供的实现细节；</li><li>使用者只能通过事先定制好的方法来访问数据，可以方便地加入控制逻辑，限制对属性的不合理操作；</li><li>便于修改，增强代码的可维护性；</li></ul><h4 id="_3-封装思想的体现" tabindex="-1"><a class="header-anchor" href="#_3-封装思想的体现" aria-hidden="true">#</a> 3. 封装思想的体现</h4><ul><li>如上：Java中通过将数据声明为私有的(private)，再提供公共的（public）方法:getXxx() 和setXxx()实现对该属性的操作</li><li>不对外暴露的私有的方法：将一些方法也设置成私有的。</li><li>单例模式</li></ul><h4 id="_4-封装性的总结" tabindex="-1"><a class="header-anchor" href="#_4-封装性的总结" aria-hidden="true">#</a> 4. 封装性的总结</h4><p>Java提供了4种权限修饰符来修饰类及类的内部结构，体现类及类的内部结构在被调用时的可见性的大小。</p><h2 id="ii-权限修饰符" tabindex="-1"><a class="header-anchor" href="#ii-权限修饰符" aria-hidden="true">#</a> Ⅱ. 权限修饰符</h2><h4 id="_1-四种访问权限修饰符" tabindex="-1"><a class="header-anchor" href="#_1-四种访问权限修饰符" aria-hidden="true">#</a> 1. 四种访问权限修饰符</h4><p>Java权限修饰符置于类的成员定义前，用来限定对象对该类成员的访问权限。</p><p>四种权限从大到小为：public、protected、缺省、private</p><h4 id="_2-具体修饰的目标" tabindex="-1"><a class="header-anchor" href="#_2-具体修饰的目标" aria-hidden="true">#</a> 2. 具体修饰的目标</h4><ul><li>修饰类的内部结构：属性、方法、构造器、内部类</li><li>修饰类：修饰类的话，只能使用：缺省、public <ul><li>public类可以在任意地方被访问</li><li>default（缺省）类只可以被同一个包内部的类访问</li></ul></li></ul><h4 id="_3-权限范围介绍" tabindex="-1"><a class="header-anchor" href="#_3-权限范围介绍" aria-hidden="true">#</a> 3. 权限范围介绍</h4><figure><img src="`+p+'" alt="2-3-1" tabindex="0" loading="lazy"><figcaption>2-3-1</figcaption></figure><h4 id="_4-开发中的做法" tabindex="-1"><a class="header-anchor" href="#_4-开发中的做法" aria-hidden="true">#</a> 4. 开发中的做法</h4><p>在实际开发中，我们一般都将属性定义为私有的，访问和操作都以方法的形式</p><ul><li>setXxx：设置成员</li><li>getXxx：获取成员</li></ul>',31),c=[i];function l(o,u){return a(),s("div",null,c)}const r=n(t,[["render",l],["__file","2-3.封装.html.vue"]]);export{r as default};
