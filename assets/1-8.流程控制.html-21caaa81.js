import{_ as n,o as s,c as a,e}from"./app-9f16a8fe.js";const p="/java-doc/img/java/javase/1-8-1.jpg",t="/java-doc/img/java/javase/1-8-2.jpg",o={},i=e(`<p>流程控制语句是用来控制程序中各语句执行顺序的语句，可以把语句组合成能完成一定功能的小逻辑模块。</p><p>流程控制方式采用结构化程序设计中规定的三种基本流程结构，即：</p><ul><li>顺序结构：冲上到下逐行执行，无任何判断和跳转。</li><li>分支结构：根据条件，选择性的执行某段代码 <ul><li>if...else</li><li>switch-case</li></ul></li><li>循环结构：根据循环条件，重复性的执行某段代码 <ul><li>for</li><li>while</li><li>do...while</li></ul></li></ul><h2 id="i-if-else" tabindex="-1"><a class="header-anchor" href="#i-if-else" aria-hidden="true">#</a> Ⅰ. if..else</h2><h4 id="_1-语法" tabindex="-1"><a class="header-anchor" href="#_1-语法" aria-hidden="true">#</a> 1. 语法</h4><p>分支（条件判断）结构有三种格式；</p><h5 id="_1-1-单分支-选或跳过" tabindex="-1"><a class="header-anchor" href="#_1-1-单分支-选或跳过" aria-hidden="true">#</a> 1.1 单分支：选或跳过</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span><span class="token punctuation">(</span> 条件表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>
    执行代码块<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-2-双分支-二选一" tabindex="-1"><a class="header-anchor" href="#_1-2-双分支-二选一" aria-hidden="true">#</a> 1.2 双分支：二选一</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>
  执行表达式<span class="token number">1</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
  执行表达式<span class="token number">2</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-3-多分支-多选一" tabindex="-1"><a class="header-anchor" href="#_1-3-多分支-多选一" aria-hidden="true">#</a> 1.3 多分支：多选一</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>
  执行表达式<span class="token number">1</span>
<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>
  执行表达式<span class="token number">2</span>
<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>
  执行表达式<span class="token number">3</span>
<span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">else</span><span class="token punctuation">{</span>
  执行表达式n
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-使用细节" tabindex="-1"><a class="header-anchor" href="#_2-使用细节" aria-hidden="true">#</a> 2. 使用细节</h4><ul><li>嵌套: if...else是可以进行嵌套的，不过尽量别超过3层。</li><li>省略大括号: 如果if-else结构中的执行语句只有一行时，对应的一对{}可以省略的，不建议省略。</li></ul><h4 id="_3-注意事项" tabindex="-1"><a class="header-anchor" href="#_3-注意事项" aria-hidden="true">#</a> 3. 注意事项</h4><ul><li>多条件表达式的顺序 <ul><li>如果多个条件表达式之间是“互斥”关系(或没有交集的关系),哪个判断和执行语句声明在上面还是下面，无所谓。</li><li>如果多个条件表达式之间有交集的关系，需要根据实际情况，考虑清楚应该将哪个结构声明在上面。</li><li>如果多个条件表达式之间有包含的关系，通常情况下，需要将范围小的声明在范围大的上面。否则，范围小的就没机会执行了</li></ul></li><li>条件表达式必须是布尔表达式（关系表达式或逻辑表达式）、布尔变量</li></ul><h2 id="ii-switch" tabindex="-1"><a class="header-anchor" href="#ii-switch" aria-hidden="true">#</a> Ⅱ. switch</h2><h4 id="_1-语法格式" tabindex="-1"><a class="header-anchor" href="#_1-语法格式" aria-hidden="true">#</a> 1. 语法格式</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">switch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">case</span> 常量<span class="token number">1</span><span class="token operator">:</span>
  执行语句<span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token comment">//break;</span>

<span class="token keyword">case</span> 常量<span class="token number">2</span><span class="token operator">:</span>
  执行语句<span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token comment">//break;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">default</span><span class="token operator">:</span>
  执行语句n<span class="token punctuation">;</span>
  <span class="token comment">//break;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-使用说明" tabindex="-1"><a class="header-anchor" href="#_2-使用说明" aria-hidden="true">#</a> 2. 使用说明</h4><ul><li>执行过程 <ul><li>根据switch表达式中的值，依次匹配各个case中的常量。一旦匹配成功，则进入相应case结构中，调用其执行语句。</li><li>当调用完执行语句以后，则仍然继续向下执行其他case结构中的执行语句，直到遇到break关键字或此switch-case结构 末尾结束为止。</li></ul></li><li>break：可以使用在switch-case结构中，表示一旦执行到此关键字，就跳出switch-case结构。 break关键字是可选的，没有break时，就算执行完了case匹配的表达式，还是会继续向下执行，并且不再判断是否满足case了。</li><li>表达式的限制： switch结构中的表达式，只能是如下的6种数据类型之一： <ul><li>byte 、short、char、int、枚举类型(JDK5.0新增)、String类型(JDK7.0新增)。</li><li>注意：不能是boolean</li></ul></li><li>case的限制：case 之后只能声明常量。不能声明范围、变量或不确定的表达式。且同一个switch语句，所有case子句中的常量值互不相同</li><li>default：相当于if-else结构中的else，default结构是可选的，而且位置是灵活的。</li></ul><h4 id="_3-省略break的用法" tabindex="-1"><a class="header-anchor" href="#_3-省略break的用法" aria-hidden="true">#</a> 3. 省略break的用法</h4><p>可以利用省略break的特性，让代码更简洁。</p><p>例如：周末是双休的，给出今天是星期几（星期日用0表示），算出今天是否用上班。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">switch</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;今天需要上班&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>    
    <span class="token keyword">default</span><span class="token operator">:</span>
       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;今天不用上班&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-if-else和switch-case的选择" tabindex="-1"><a class="header-anchor" href="#_4-if-else和switch-case的选择" aria-hidden="true">#</a> 4. if..else和switch...case的选择</h4><p>我们写分支结构时，当发现既可以使用switch-case,（同时，switch中表达式的取值情况不太多），又可以使用if-else时，我们优先选择使用switch-case。原因：switch-case执行效率稍高。</p><p>使用switch-case的，都可以改写为if-else。反之不成立。</p><h2 id="iii-for" tabindex="-1"><a class="header-anchor" href="#iii-for" aria-hidden="true">#</a> Ⅲ. for</h2><h4 id="循环的组成部分" tabindex="-1"><a class="header-anchor" href="#循环的组成部分" aria-hidden="true">#</a> 循环的组成部分</h4><p>循环结构的4个要素</p><ul><li>初始化条件：可以声明多个变量，但必须是同一个类型，用逗号分隔</li><li>循环条件：是boolean类型；当值为false时，退出循环</li><li>循环体</li><li>迭代条件：可以有多个变量更新，用逗号分隔</li></ul><p>执行过程：直到循环条件不满足，则退出，永远满足，则是死循环。</p><figure><img src="`+p+'" alt="1-8-1" tabindex="0" loading="lazy"><figcaption>1-8-1</figcaption></figure><h4 id="_1-for循环的结构" tabindex="-1"><a class="header-anchor" href="#_1-for循环的结构" aria-hidden="true">#</a> 1. for循环的结构</h4><p>执行过程：初始化条件 - 循环条件 - 循环体 - 迭代条件- 循环条件 - 循环体 - 迭代条件 - ... - 循环条件</p><figure><img src="'+t+`" alt="1-8-2" tabindex="0" loading="lazy"><figcaption>1-8-2</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span><span class="token punctuation">(</span>初始化条件<span class="token punctuation">;</span> 循环条件<span class="token punctuation">;</span> 迭代条件<span class="token punctuation">)</span><span class="token punctuation">{</span>
   循环体<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-for循环的使用" tabindex="-1"><a class="header-anchor" href="#_2-for循环的使用" aria-hidden="true">#</a> 2. for循环的使用</h4><p>示例：遍历100以内的偶数,输出所有偶数的和,输出偶数的个数</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        num <span class="token operator">+=</span> i<span class="token punctuation">;</span>
        count<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>i 变量只在循环内有效，出了for循环就失效了。</li><li>num使用前必须先定义（在for循环外定义）。 <ul><li>循环内定义，会每次循环都重复生命，在java中，会直接报错。</li></ul></li><li>i变量的声明别忘了加数据类型，这个也是声明变量。</li></ul><h2 id="iv-while" tabindex="-1"><a class="header-anchor" href="#iv-while" aria-hidden="true">#</a> Ⅳ. while</h2><h4 id="_1-语法结构" tabindex="-1"><a class="header-anchor" href="#_1-语法结构" aria-hidden="true">#</a> 1. 语法结构</h4><p>while循环没有迭代条件也能编译成功，所以一定不要忘了迭代条件。</p><p>执行过程：初始化条件 - 循环条件 - 循环体 - 迭代条件- 循环条件 - 循环体 - 迭代条件 - ... - 循环条件</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>初始化条件
<span class="token keyword">while</span><span class="token punctuation">(</span>循环条件<span class="token punctuation">)</span><span class="token punctuation">{</span> 
    循环体
    迭代条件
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-while循环的使用" tabindex="-1"><a class="header-anchor" href="#_2-while循环的使用" aria-hidden="true">#</a> 2. while循环的使用</h4><p>示例：遍历100以内的所有偶数</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span>  <span class="token class-name">WhileTest</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//遍历100以内的所有偶数</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      
      <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      
      i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//初始化变量出了while循环以后，仍可以调用。</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//101</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-for循环和while循环" tabindex="-1"><a class="header-anchor" href="#_3-for循环和while循环" aria-hidden="true">#</a> 3. for循环和while循环</h4><p>for循环和while循环是可以相互转换的！且没有执行效率的差别。</p><p>区别：for循环和while循环的初始化条件部分的作用范围不同。但是for循环也可以通过以下方式实现初始化部分外移</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//for循环内只要有两个;;就行，里面有无内容都可以编译</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-while-true-无限循环格式" tabindex="-1"><a class="header-anchor" href="#_4-while-true-无限循环格式" aria-hidden="true">#</a> 4. while(true)：无限循环格式</h4><p>可以省略循环体种的一些元素，来实现人为的不限制次数的循环，并用break根据条件退出循环。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//while循环</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//只有循环条件和循环体也能编译</span>
    循环体<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//for循环</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//只要有两个;;就能编译</span>
    循环体<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例：从键盘读入个数不确定的整数，并判断读入的正数和负数的个数，输入为0时结束程序。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">ForWhileTest</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token class-name">Scanner</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>   
    <span class="token keyword">int</span> positiveNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//记录正数的个数</span>
    <span class="token keyword">int</span> negativeNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//记录负数的个数</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//while(true){     </span>
      <span class="token keyword">int</span> number <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">//判断number的正负情况</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>number <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        positiveNumber<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>number <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        negativeNumber<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token comment">//一旦执行break，跳出循环</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;输入的正数个数为：&quot;</span> <span class="token operator">+</span> positiveNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;输入的负数个数为：&quot;</span> <span class="token operator">+</span> negativeNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>    
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="v-do-while" tabindex="-1"><a class="header-anchor" href="#v-do-while" aria-hidden="true">#</a> Ⅴ. do...while</h2><h4 id="_1-语法结构-1" tabindex="-1"><a class="header-anchor" href="#_1-语法结构-1" aria-hidden="true">#</a> 1. 语法结构</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>初始化
<span class="token keyword">do</span><span class="token punctuation">{</span>
  循环体
  迭代条件

<span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>循环条件<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-do-while循环的使用" tabindex="-1"><a class="header-anchor" href="#_2-do-while循环的使用" aria-hidden="true">#</a> 2. do...while循环的使用</h4><p>示例：遍历100以内的偶数,并计算所有偶数的和及偶数的个数</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//记录总和</span>
<span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//记录个数</span>
<span class="token keyword">do</span><span class="token punctuation">{</span>      
    <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    sum <span class="token operator">+=</span> num<span class="token punctuation">;</span>
    count<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    num<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-使用说明" tabindex="-1"><a class="header-anchor" href="#_3-使用说明" aria-hidden="true">#</a> 3. 使用说明</h4><p>在循环体必须执行一次的时候，使用该循环；开发中较少使用。</p><h2 id="vi-循环控制" tabindex="-1"><a class="header-anchor" href="#vi-循环控制" aria-hidden="true">#</a> Ⅵ. 循环控制</h2><p>特殊关键字 <code>break</code>、<code>continue</code>、<code>return</code> 可以控制循环的执行。</p><h4 id="_1-break" tabindex="-1"><a class="header-anchor" href="#_1-break" aria-hidden="true">#</a> 1. break</h4><p>break语句用于终止某个语句块的执行。【只能用于switch 语句和 循环语句中】</p><h5 id="_1-1-使用范围" tabindex="-1"><a class="header-anchor" href="#_1-1-使用范围" aria-hidden="true">#</a> 1.1 使用范围：</h5><ul><li>switch...case中</li><li>循环语句中：跳出当前循环</li></ul><h5 id="_1-2-嵌套循环中的使用" tabindex="-1"><a class="header-anchor" href="#_1-2-嵌套循环中的使用" aria-hidden="true">#</a> 1.2 嵌套循环中的使用</h5><p>break; 默认跳出包裹此关键字最近的一层循环。</p><p>可以为循环添加label标识符，来跳出指定标识的循环</p><h4 id="_2-continue" tabindex="-1"><a class="header-anchor" href="#_2-continue" aria-hidden="true">#</a> 2. continue</h4><p>continue用于结束当次循环【只能用于 循环语句中】</p><p>用于跳过其所在循环语句块的一次执行，继续下一次循环。</p><p>嵌套循环中的使用：continue默认跳过包裹此关键字最近的一层循环。可以通过标签指明要跳过的是哪一层循环</p><h4 id="_3-return" tabindex="-1"><a class="header-anchor" href="#_3-return" aria-hidden="true">#</a> 3. return</h4><p>并非专门用于结束循环的，它的功能是结束一个方法。当一个方法执行到一个return语句时，这个方法将被结束。</p><p>与break和continue不同的是，return直接结束整个方法，不管这个return处于多少层循环之内</p><h4 id="_4-使用说明" tabindex="-1"><a class="header-anchor" href="#_4-使用说明" aria-hidden="true">#</a> 4. 使用说明</h4><ul><li>continue 只能用于 循环语句中。因为程序永远不会执行其后的语句。</li><li>continue是终止 本次循环，break是终止 本层循环。</li></ul><h4 id="_5-使用示例" tabindex="-1"><a class="header-anchor" href="#_5-使用示例" aria-hidden="true">#</a> 5. 使用示例</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>label<span class="token operator">:</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token comment">//break;//默认跳出包裹此关键字最近的一层循环。</span>
      <span class="token comment">//continue;</span>
      <span class="token comment">//break label;//结束指定标识的一层循环结构</span>
      <span class="token keyword">continue</span> label<span class="token punctuation">;</span><span class="token comment">//结束指定标识的一层循环结构当次循环</span>
    <span class="token punctuation">}</span>
    
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vii-嵌套循环" tabindex="-1"><a class="header-anchor" href="#vii-嵌套循环" aria-hidden="true">#</a> Ⅶ. 嵌套循环</h2><p>循环是可以嵌套的，将一个循环结构A声明在另一个循环结构B的循环体中,就构成了嵌套循环；一般最多写三层。</p><h4 id="_1-使用说明" tabindex="-1"><a class="header-anchor" href="#_1-使用说明" aria-hidden="true">#</a> 1. 使用说明</h4><p>内层循环结构遍历一遍，只相当于外层循环循环体执行了一次。</p><p>假设外层循环需要执行m次，内层循环需要执行n次。此时内层循环的循环体一共执行了m * n次<br> 两层循环相当于是一个矩阵，外层循环控制行数，内层循环控制列数</p><h4 id="_2-使用示例" tabindex="-1"><a class="header-anchor" href="#_2-使用示例" aria-hidden="true">#</a> 2. 使用示例</h4><h5 id="_2-1-示例1-输出星星" tabindex="-1"><a class="header-anchor" href="#_2-1-示例1-输出星星" aria-hidden="true">#</a> 2.1 示例1：输出星星</h5><p>输出5行 * ，在第几行就输出几个*</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//控制行数</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//控制列数</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-2-示例2-输出99乘法表" tabindex="-1"><a class="header-anchor" href="#_2-2-示例2-输出99乘法表" aria-hidden="true">#</a> 2.2 示例2：输出99乘法表</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">&quot; * &quot;</span> <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token string">&quot; = &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;  &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-3-示例3-100以内的所有质数的输出" tabindex="-1"><a class="header-anchor" href="#_2-3-示例3-100以内的所有质数的输出" aria-hidden="true">#</a> 2.3 示例3：100以内的所有质数的输出</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> isFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//标识i是否被j除尽，一旦除尽，修改其值</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//记录质数的个数</span>

    <span class="token comment">//获取当前时间距离1970-01-01 00:00:00 的毫秒数</span>
    <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">100000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//遍历100000以内的自然数</span>
      
      <span class="token comment">//优化二：对本身是质数的自然数是有效的。</span>
      <span class="token comment">//for(int j = 2;j &lt; i;j++){</span>
      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//j:被i去除</span>
        
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//i被j除尽</span>
          isFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//优化一：只对本身非质数的自然数是有效的。</span>
        <span class="token punctuation">}</span>
        
      <span class="token punctuation">}</span>
      <span class="token comment">//</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>isFlag <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//System.out.println(i);</span>
        count<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">//重置isFlag</span>
      isFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    
    <span class="token punctuation">}</span>

    <span class="token comment">//获取当前时间距离1970-01-01 00:00:00 的毫秒数</span>
    <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;质数的个数为：&quot;</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;所花费的时间为：&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//17110 - 优化一：break:1546 - 优化二：13</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,100),c=[i];function l(u,r){return s(),a("div",null,c)}const k=n(o,[["render",l],["__file","1-8.流程控制.html.vue"]]);export{k as default};
