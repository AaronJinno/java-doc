import{_ as a,o as i,c as e,e as r}from"./app-23bfaf90.js";const l="/java-doc/img/java/javase/6-1-1.jpg",t="/java-doc/img/java/javase/6-1-2.jpg",h={},n=r('<h2 id="i-集合概述" tabindex="-1"><a class="header-anchor" href="#i-集合概述" aria-hidden="true">#</a> Ⅰ. 集合概述</h2><h4 id="_1-集合的由来" tabindex="-1"><a class="header-anchor" href="#_1-集合的由来" aria-hidden="true">#</a> 1. 集合的由来</h4><p>面向对象语言对事物的体现都是以对象的形式，为了方便对多个对象的操作，就要对对象进行存储。使用Array在存储对象方面具有 一些弊端，而Java 集合就像一种容器，可以动态地把多个对象的引用放入容器中。</p><p>**容器：**集合、数组都是对多个数据进行存储操作的结构，简称Java容器。此时的存储，主要指的是内存层面的存储，不涉及到持久化的存储。</p><h4 id="_2-数组在java内存储存方面的特点" tabindex="-1"><a class="header-anchor" href="#_2-数组在java内存储存方面的特点" aria-hidden="true">#</a> 2. 数组在Java内存储存方面的特点</h4><ul><li>一旦初始化以后，其长度就确定了。</li><li>数组一旦定义好，其元素的类型也就确定了。我们也就只能操作指定类型的数据了。 <ul><li>比如：String[] arr;int[] arr1;Object[] arr2;</li></ul></li></ul><h4 id="_3-数组在储存数据方面的弊端" tabindex="-1"><a class="header-anchor" href="#_3-数组在储存数据方面的弊端" aria-hidden="true">#</a> 3. 数组在储存数据方面的弊端</h4><ul><li>一旦初始化以后，其长度就不可修改。</li><li>数组中提供的方法非常有限，对于添加、删除、插入数据等操作，非常不便，同时效率不高。</li><li>获取数组中实际元素的个数的需求，数组没有现成的属性或方法可用</li><li>数组存储数据的特点：有序、可重复。对于无序、不可重复的需求，不能满足。</li></ul><h4 id="_4-集合的特点" tabindex="-1"><a class="header-anchor" href="#_4-集合的特点" aria-hidden="true">#</a> 4. 集合的特点</h4><div class="hint-container tip"><p class="hint-container-title">提示</p><p>关联数组：在其他语言中是有关联数组的，K-V键值对，Java中没有关联数组，可以用集合取代。</p></div><p>数组的弊端，集合都解决了。</p><p>Java 集合类可以用于存储数量不等的多个对象，还可用于保存具有映射关系的关联数组。</p><h4 id="_5-集合的使用场景" tabindex="-1"><a class="header-anchor" href="#_5-集合的使用场景" aria-hidden="true">#</a> 5. 集合的使用场景</h4><p>数组和集合都是容器，但是开发中，凡是涉及到对多个数据进行操作时，一般用集合。</p><p>能用集合就用集合，除非要求用数组。集合出现的目的，就是取代数组。</p><h2 id="ii-集合框架" tabindex="-1"><a class="header-anchor" href="#ii-集合框架" aria-hidden="true">#</a> Ⅱ. 集合框架</h2><h4 id="_1-集合框架的体系" tabindex="-1"><a class="header-anchor" href="#_1-集合框架的体系" aria-hidden="true">#</a> 1. 集合框架的体系</h4><p>Java 集合可分为 Collection 和 Map 两种体系</p><ul><li>Collection 接口 ：单列数据，定义了存取一组对象的方法的集合 <ul><li>List： 存储有序的、可重复的数据。 --&gt;“动态”数组 <ul><li>ArrayList、LinkedList、Vector</li></ul></li><li>Set： 存储无序的、不可重复的数据 --&gt;数学里的“集合” <ul><li>HashSet、LinkedHashSet、TreeSet</li></ul></li></ul></li><li>Map 接口：双列数据，保存具有映射关系“key-value对”的集合--&gt;存储无序的、不可重复的数据 --&gt;数学中的&quot;函数&quot; <ul><li>HashMap、LinkedHashMap、TreeMap、Hashtable、Properties</li></ul></li></ul><h4 id="_2-collection接口继承图" tabindex="-1"><a class="header-anchor" href="#_2-collection接口继承图" aria-hidden="true">#</a> 2. Collection接口继承图</h4><figure><img src="'+l+'" alt="6-1-1" tabindex="0" loading="lazy"><figcaption>6-1-1</figcaption></figure><h4 id="_3-map接口继承图" tabindex="-1"><a class="header-anchor" href="#_3-map接口继承图" aria-hidden="true">#</a> 3. Map接口继承图</h4><figure><img src="'+t+'" alt="6-1-2" tabindex="0" loading="lazy"><figcaption>6-1-2</figcaption></figure>',23),d=[n];function c(s,o){return i(),e("div",null,d)}const _=a(h,[["render",c],["__file","6-1.概述.html.vue"]]);export{_ as default};
