import{_ as a,o as e,c as i,e as t}from"./app-77176646.js";const n={},r=t('<h4 id="_1-index-索引" tabindex="-1"><a class="header-anchor" href="#_1-index-索引" aria-hidden="true">#</a> 1. Index：索引</h4><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在结构层次方面，类似于MySQL中的库</p></div><p>一个索引就是一个拥有几分相似特征的文档的集合。比如说，你可以有一个客户数据的索引，另一个产品目录的索引，还有一个订单数据的索引。</p><p>一个索引由一个名字来标识（必须全部是小写字母），并且当我们要对这个索引中的文档进行索引、搜索、更新和删除的时候，都要使用到这个名字。在一个集群中，可以定义任意多的索引。</p><p>能搜索的数据必须索引，这样的好处是可以提高查询速度，比如：新华字典前面的目录<br> 就是索引的意思，目录可以提高查询速度。</p><p>Elasticsearch 索引的精髓：<mark>一切设计都是为了提高搜索的性能。</mark></p><h4 id="_2-type-类型" tabindex="-1"><a class="header-anchor" href="#_2-type-类型" aria-hidden="true">#</a> 2. Type：类型</h4><div class="hint-container tip"><p class="hint-container-title">提示</p><p>ES 7.x 及以上版本已经没有Type这层概念了。</p></div><p>Type表示逻辑上的分类，当前已经不支持自定义，默认类型为：_doc</p><h4 id="_3-document-文档" tabindex="-1"><a class="header-anchor" href="#_3-document-文档" aria-hidden="true">#</a> 3. Document：文档</h4><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在结构层次方面，类似于MySQL中数据表的<mark>一行数据</mark></p></div><p>一个文档是一个可被索引的基础信息单元，也就是一条数据</p><p>比如：你可以拥有某一个客户的文档，某一个产品的一个文档，当然，也可以拥有某个<br> 订单的一个文档。文档以 JSON格式来表示，</p><p>在一个索引里面，可以存储任意多的文档。</p><h4 id="_4-field-字段" tabindex="-1"><a class="header-anchor" href="#_4-field-字段" aria-hidden="true">#</a> 4. Field：字段</h4><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在结构层次方面，类似于MySQL中数据表里的字段</p></div><p>对文档数据根据不同属性进行的分类标识</p><h4 id="_5-mapping-映射" tabindex="-1"><a class="header-anchor" href="#_5-mapping-映射" aria-hidden="true">#</a> 5. Mapping：映射</h4><div class="hint-container tip"><p class="hint-container-title">提示</p><p>映射类似于MySQL中的表结构</p></div><p>mapping 是处理数据的方式和规则方面做一些限制</p><p>如：某个字段的数据类型、默认值、分析器、是否被索引等等。这些都是映射里面可以设置的，其它就是处理 ES 里面数据的一些使用规则设置。</p><p>按着最优规则处理数据对性能提高很大，因此才需要建立映射，并且需要思考如何建立映射才能对性能更好。</p><h4 id="_6-shards-分片" tabindex="-1"><a class="header-anchor" href="#_6-shards-分片" aria-hidden="true">#</a> 6. Shards：分片</h4><div class="hint-container tip"><p class="hint-container-title">提示</p><p>类似MySQL中的水平分表，目的是为了水平扩容和分布式效率提升</p></div><p>一个索引可以存储超出单个节点硬件限制的大量数据。<br> 比如，一个具有 10 亿文档数据的索引占据 1TB 的磁盘空间，而任一节点都可能没有这样大的磁盘空间。或者单个节点处理搜索请求，响应太慢。为了解决这个问题，Elasticsearch 提供了将索引划分成多份的能力，每一份就称之为分片。</p><p>当你创建一个索引的时候，你可以指定你想要的分片的数量。每个分片本身也是一个功能完善并且独立的“索引”，这个“索引”可以被放置到集群中的任何节点上。</p><p>分片很重要，主要有主要有两方面的原因：</p><ul><li>允许你水平分割 / 扩展你的内容容量</li><li>允许你在分片之上进行分布式的、并行的操作，进而提高性能/吞吐量</li></ul><h5 id="_6-1-分片的部署" tabindex="-1"><a class="header-anchor" href="#_6-1-分片的部署" aria-hidden="true">#</a> 6.1 分片的部署</h5><p>和MySQL不同，一个分片怎样分布，它的文档怎样聚合和搜索请求，是完全由 Elasticsearch 管理的，开发者不用进行手动部署。</p><h5 id="_6-2-分片与索引" tabindex="-1"><a class="header-anchor" href="#_6-2-分片与索引" aria-hidden="true">#</a> 6.2 分片与索引</h5><p>索引是分片的集合。</p><p>当 Elasticsearch 在索引中搜索的时候， 他发送查询到每一个属于索引的分片(Lucene 索引)，然后合并每个分片的结果到一个全局的结果集。</p><h4 id="_7-replicas-副本" tabindex="-1"><a class="header-anchor" href="#_7-replicas-副本" aria-hidden="true">#</a> 7. Replicas：副本</h4><div class="hint-container tip"><p class="hint-container-title">提示</p><p>类似于MySQL分布式部署中的从节点，是为了高并发和高可用。</p></div><p>为了节点的高可用，创建副本是很有必要且推荐的。Elasticsearch 允许你创建分片的一份或多份拷贝，这些拷贝叫做复制分片(副本)。</p><p>除了高可用外，副本也可以提高性能、吞吐量，也就是高并发。</p><h5 id="_7-1-主分片与复制分片" tabindex="-1"><a class="header-anchor" href="#_7-1-主分片与复制分片" aria-hidden="true">#</a> 7.1 主分片与复制分片</h5><p>一旦复制了，每个索引就有了主分片（作为复制源的原来的分片）和复制分片（主分片的拷贝）之别。分片和复制的数量可以在索引创建的时候指定。在索引创建之后，你可以在任何时候动态地改变复制的数量，但是你事后不能改变分片的数量。</p><h5 id="_7-2-默认处理" tabindex="-1"><a class="header-anchor" href="#_7-2-默认处理" aria-hidden="true">#</a> 7.2 默认处理</h5><p>默认情况下，Elasticsearch 中的每个索引被分片 1 个主分片和 1 个复制，这意味着，如果你的集群中至少有两个节点，你的索引将会有 1 个主分片和另外 1 个复制分片（1 个完全拷贝），这样的话每个索引总共就有 2 个分片，我们需要根据索引需要确定分片个数。</p><h4 id="_8-allocation-分配" tabindex="-1"><a class="header-anchor" href="#_8-allocation-分配" aria-hidden="true">#</a> 8. Allocation：分配</h4><p>将分片分配给某个节点的过程，包括分配主分片或者副本。</p><p>如果是副本，还包含从主分片复制数据的过程。这个过程是由 master 节点完成的。</p>',44),p=[r];function h(d,c){return e(),i("div",null,p)}const l=a(n,[["render",h],["__file","5-1.核心概念.html.vue"]]);export{l as default};
