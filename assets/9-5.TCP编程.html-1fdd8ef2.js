import{_ as n,o as s,c as a,e}from"./app-171d5e07.js";const t="/java-doc/img/java/javase/9-5-1.jpg",p={},c=e('<h4 id="_1-基于socket的tcp编程" tabindex="-1"><a class="header-anchor" href="#_1-基于socket的tcp编程" aria-hidden="true">#</a> 1. 基于Socket的TCP编程</h4><p>Java语言的基于套接字编程分为服务端编程和客户端编程，其通信模型如图所示：</p><figure><img src="'+t+`" alt="9-5-1" tabindex="0" loading="lazy"><figcaption>9-5-1</figcaption></figure><h4 id="_2-客户端socket" tabindex="-1"><a class="header-anchor" href="#_2-客户端socket" aria-hidden="true">#</a> 2. 客户端Socket</h4><p>客户端Socket 的工作过程包含以下四个基本的步骤</p><ul><li>创建Socket：根据指定服务端的 IP 地址或端口号构造 Socket 类对象。若服务器端<br> 响应，则建立客户端到服务器的通信线路。若连接失败，会出现异常。</li><li>打开连接到Socket的输入/写出流 <ul><li>使用 getInputStream()方法获得输入流</li><li>使用 getOutputStream()方法获得输出流，进行数据传输</li></ul></li><li>按照一定的协议对Socket进行读/写操作 <ul><li>通过输入流读取服务器放入线路的信息（但不能读取自己放入线路的信息）</li><li>通过输出流将信息写入线程</li></ul></li><li>关闭Socket：断开客户端到服务器的连接，释放线路</li></ul><h4 id="_3-客户端创建socket对象" tabindex="-1"><a class="header-anchor" href="#_3-客户端创建socket对象" aria-hidden="true">#</a> 3. 客户端创建Socket对象</h4><p>客户端程序可以使用Socket类创建对象， 创建的同时会自动向服务器方发起连接。</p><h5 id="_3-1-socket的构造器" tabindex="-1"><a class="header-anchor" href="#_3-1-socket的构造器" aria-hidden="true">#</a> 3.1 Socket的构造器</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token class-name">InetAddress</span> address<span class="token punctuation">,</span><span class="token keyword">int</span> port<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOException</span>
<span class="token keyword">public</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token class-name">String</span> host<span class="token punctuation">,</span><span class="token keyword">int</span> port<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">UnknownHostException</span><span class="token punctuation">,</span><span class="token class-name">IOException</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-2-示例" tabindex="-1"><a class="header-anchor" href="#_3-2-示例" aria-hidden="true">#</a> 3.2 示例</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">client</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">//1.创建Socket对象,参数是服务器端的IP和端口号</span>
    <span class="token class-name">Socket</span> clientSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span> <span class="token number">2333</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//2.返回此Socket对象的输出流,可以用于发送网络消息</span>
    <span class="token class-name">OutputStream</span> out <span class="token operator">=</span> clientSocket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//3.进行输出byte[]</span>
    out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//关闭Socket</span>
    clientSocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-服务器端socket" tabindex="-1"><a class="header-anchor" href="#_4-服务器端socket" aria-hidden="true">#</a> 4. 服务器端Socket</h4><p>服务器程序的工作过程包含以下四个基本的步骤</p><ul><li>创建服务端的ServerSocket：调用 ServerSocket(int port) 创建一个服务器端套接字，并绑定到指定端口上。用于监听客户端的请求。</li><li>监听连接请求：调用 accept()监听连接请求，如果客户端请求连接，则接受连接，返回通信套接字对象</li><li>获取输入流和输出流：调用该Socket 类对象的 getOutputStream() 和 getInputStream ()获取输出流和输入流，开始网络数据的发送和接收。</li><li>关闭ServerSocket：客户端访问结束，关闭通信套接字。</li></ul><h4 id="_5-服务器端建立serversocket" tabindex="-1"><a class="header-anchor" href="#_5-服务器端建立serversocket" aria-hidden="true">#</a> 5. 服务器端建立ServerSocket</h4><h5 id="_5-1-创建serversocket对象" tabindex="-1"><a class="header-anchor" href="#_5-1-创建serversocket对象" aria-hidden="true">#</a> 5.1 创建ServerSocket对象</h5><p>ServerSocket 对象负责等待客户端请求建立套接字连接，类似邮局某个窗口中的业务员。也就是说， 服务器必须事先建立一个等待客户请求建立套接字的 连接的ServerSocket 对象。</p><p>该类的构造器，接受一个端口号作为参数，端口号就是本服务端的端口号，客户端通过服务端的ip和创建ServerSocket对象时指定的端口号，来找到服务端。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_5-2-accept方法" tabindex="-1"><a class="header-anchor" href="#_5-2-accept方法" aria-hidden="true">#</a> 5.2 accept方法</h5><p>所谓“接收”客户的套接字请求，就是accept()方法会返回一个 Socket 对象。</p><p>这个Socket对象就是客户端的Socket对象，有了该对象就可以与客户端进行通信 了。</p><h5 id="_5-3-使用示例" tabindex="-1"><a class="header-anchor" href="#_5-3-使用示例" aria-hidden="true">#</a> 5.3 使用示例</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">server</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">//1.创建服务器套接字对象：ServerSocket</span>
    <span class="token class-name">ServerSocket</span> serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">2333</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//2.监听接受客户端的请求，并获取请求的套接字对象</span>
    <span class="token class-name">Socket</span> client <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//3.根据请求的套接字对象，获取请求时发送过来的流对象</span>
    <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//4.使用获取的流对象read流的数据</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//5.关闭服务器套接字和获取的客户端套接字</span>
    client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    serverSocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-tcp网络编程示例" tabindex="-1"><a class="header-anchor" href="#_6-tcp网络编程示例" aria-hidden="true">#</a> 6. TCP网络编程示例</h4><p>就是把上面两个方法结合起来。</p><ul><li>先启动服务端：调用服务端方法：server()，此时服务端将一直处于监听状态，等待客户端连接。</li><li>再启动客户端：调用客户端方法：client()，注意ip和端口</li><li>此时客户端与服务端连接成功，客户端开始想服务端传输数据，服务端接受到数据。</li></ul>`,28),o=[c];function l(i,u){return s(),a("div",null,o)}const k=n(p,[["render",l],["__file","9-5.TCP编程.html.vue"]]);export{k as default};
