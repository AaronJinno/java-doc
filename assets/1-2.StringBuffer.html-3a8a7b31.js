import{_ as n,o as s,c as a,b as e}from"./app-b1eed5ae.js";const t={},p=e(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>Libraries&gt;java&gt;lang StringBuffer.java Libraries&gt;java&gt;lang StringBuilder</p></div><h2 id="i-介绍" tabindex="-1"><a class="header-anchor" href="#i-介绍" aria-hidden="true">#</a> Ⅰ. 介绍</h2><h4 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1. 简介</h4><h5 id="_1-1-stringbuffer" tabindex="-1"><a class="header-anchor" href="#_1-1-stringbuffer" aria-hidden="true">#</a> 1.1 StringBuffer</h5><p>StringBuffer也是个字符串类，代表可变的字符序列吗，可以对字符串内容进行增删，此时不会产生新的对象（可变性）。</p><p>StringBuffer很多方法与String是相同的。</p><h5 id="_1-2-stringbuilder" tabindex="-1"><a class="header-anchor" href="#_1-2-stringbuilder" aria-hidden="true">#</a> 1.2 StringBuilder</h5><p>在功能上，StringBuilder和StringBuffer是一样的。</p><p>区别是：StringBuffer是线程安全的，StringBuilder是线程不安全的。</p><h4 id="_2-结构" tabindex="-1"><a class="header-anchor" href="#_2-结构" aria-hidden="true">#</a> 2. 结构</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//StringBuffer结构</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">StringBuffer</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractStringBuilder</span> <span class="token keyword">implements</span>
<span class="token class-name">Serializable</span><span class="token punctuation">,</span><span class="token class-name">CharSequence</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span>  <span class="token keyword">transient</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> toStringCache<span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">3388685877147921107L</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//StringBuilder结构</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">StringBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractStringBuilder</span> <span class="token keyword">implements</span> 
<span class="token class-name">Serializable</span><span class="token punctuation">,</span><span class="token class-name">CharSequence</span><span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">4383685877147921099L</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-创建stringbuffer对象" tabindex="-1"><a class="header-anchor" href="#_3-创建stringbuffer对象" aria-hidden="true">#</a> 3. 创建StringBuffer对象</h4><p>StringBuffer 类不同于String ，其对象必须使用构造器生成。有三个构造器：</p><ul><li>StringBuffer() ：初始容量为16的字符串缓冲区</li><li>StringBuffer(int size) ：构造指定容量的字符串缓冲区</li><li>StringBuffer(String str) ：将内容初始化为指定字符串内容</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">StringBuffer</span> sb1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">StringBuffer</span> sb2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">StringBuffer</span> sb3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;Dickman&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-string、stringbuffer、stringbuilder对比" tabindex="-1"><a class="header-anchor" href="#_4-string、stringbuffer、stringbuilder对比" aria-hidden="true">#</a> 4. String、StringBuffer、StringBuilder对比</h4><ul><li>String：不可变的字符序列；底层使用final char[]存储</li><li>StringBuffer：可变的字符序列；线程安全的，效率低；底层使用char[]存储</li><li>StringBuilder：可变的字符序列；jdk5.0新增的，线程不安全的，效率高；底层使用char[]存储</li></ul><h4 id="_5-源码分析" tabindex="-1"><a class="header-anchor" href="#_5-源码分析" aria-hidden="true">#</a> 5. 源码分析</h4><h5 id="_5-1-string源码分析" tabindex="-1"><a class="header-anchor" href="#_5-1-string源码分析" aria-hidden="true">#</a> 5.1 String源码分析</h5><p>String的底层是将字符保存在char[]数组中的，且是final不可变的（内容和长度都不可变）。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//char[] value = new char[0];</span>
<span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;ab&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//char[] value = new char[]{&#39;a&#39;,&#39;b&#39;};</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-2-stringbuffer分析" tabindex="-1"><a class="header-anchor" href="#_5-2-stringbuffer分析" aria-hidden="true">#</a> 5.2 StringBuffer分析</h5><p>StringBuffer底层也是保存到char数组中的，但是这个char[]不是final，且默认有16个长度，因此就具有了可变性。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//底层默认创建了16个长度的char数组</span>
<span class="token class-name">StringBuffer</span> sb1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//char[] value = new char[16]</span>
<span class="token comment">//添加操作</span>
sb1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//value[0] = &#39;a&#39;;</span>
sb1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//value[1] = &#39;b&#39;;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-3-stringbuffer扩容" tabindex="-1"><a class="header-anchor" href="#_5-3-stringbuffer扩容" aria-hidden="true">#</a> 5.3 StringBuffer扩容</h5><p>StringBuffer默认长度是16，当添加的字符串超过16时，会自动进行扩容，默认情况下，扩容为原来容量的2倍 + 2，同时将原有数组中的元素复制到新的数组中。</p><h4 id="_6-对比string、stringbuffer、stringbuilder的效率" tabindex="-1"><a class="header-anchor" href="#_6-对比string、stringbuffer、stringbuilder的效率" aria-hidden="true">#</a> 6. 对比String、StringBuffer、StringBuilder的效率</h4><p>经过简单的循环向字符串中添加数字，从0添加到两万。耗时大致分别为：</p><ul><li>StringBuffer：5ms</li><li>StringBuilder：2ms</li><li>String：1139ms</li></ul><h4 id="_7-三种创建字符串方式的选择" tabindex="-1"><a class="header-anchor" href="#_7-三种创建字符串方式的选择" aria-hidden="true">#</a> 7. 三种创建字符串方式的选择</h4><ul><li>有线程安全：StringBuffer(int capacity)</li><li>无线程安全：StringBuilder(int capacity) 总结：优先选择可变的字符串类，为了避免扩容，提高效率，可以指定字符串长度。</li></ul><h4 id="_8-stringbuffer方法的特性" tabindex="-1"><a class="header-anchor" href="#_8-stringbuffer方法的特性" aria-hidden="true">#</a> 8. StringBuffer方法的特性</h4><ul><li>可变性：改变StringBuffer内容的方法，会直接改变源StringBuffer，而不是返回一个新的</li><li>synchronized：因为StringBuffer是线程安全的，所以StringBuffer的方法上都会带 synchronized</li><li>同String的方法：String的方法，一般StringBuffer也能使用 <ul><li>length：获取字符串内容的长度，这里获取的不是底层char[] 的长度，而是已有的内容的长度</li><li>indexOf：返回指定字符串在此字符串第一次出现的索引</li><li>substring：字符串截取</li><li>charAt：返回指定索引处的字符</li></ul></li></ul><h2 id="ii-常用方法" tabindex="-1"><a class="header-anchor" href="#ii-常用方法" aria-hidden="true">#</a> Ⅱ. 常用方法</h2><h4 id="_1-length" tabindex="-1"><a class="header-anchor" href="#_1-length" aria-hidden="true">#</a> 1. length</h4><p>和String的length方法类似，返回StringBuffer的长度。<br> 这里的长度值得是存入StringBuffer的字符数量count，而不是StringBuffer本身的长度。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
<span class="token class-name">StringBuffer</span> sb1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span>
<span class="token class-name">StringBuffer</span> sb2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0</span>
<span class="token class-name">StringBuffer</span> sb3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb3<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-append" tabindex="-1"><a class="header-anchor" href="#_2-append" aria-hidden="true">#</a> 2. append</h4><p>字符串拼接，StringBuffer不能使用“+”进行字符串拼接，只能使用append方法。<br> 该方法针对不通数据类型的参数，有多个重构方法，能自动转为String类型的数据类型都可以作为参数。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">StringBuffer</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可以是各种能自动转为String的数据类型</span>

<span class="token comment">//如果是char[],可以额外指定两个范围参数 </span>
<span class="token class-name">StringBuffer</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
<span class="token class-name">StringBuffer</span> sb1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">StringBuffer</span> sb2 <span class="token operator">=</span> sb1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot; baby&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Hello baby;直接改的源StringBuffer</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Hello baby;直接改的源StringBuffer</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-delete" tabindex="-1"><a class="header-anchor" href="#_3-delete" aria-hidden="true">#</a> 3. delete</h4><p>删除指定位置的内容</p><ul><li>参数1：start：起始位置的index，包含start</li><li>参数2：end：结束位置的index，不包含end</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">StringBuffer</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token class-name">StringBuffer</span> sb1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Bitman&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sb1<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Bitman</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-replace" tabindex="-1"><a class="header-anchor" href="#_4-replace" aria-hidden="true">#</a> 4. replace</h4><p>字符串替换。</p><ul><li>参数1 start：替换其实位置的index（包括start）</li><li>参数2 end：替换结束为主的index（不包括end），如果要替换最后一个字符，需要end=length+1</li><li>参数3 str：用来替换的字符串</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">StringBuffer</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
<span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Batman&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sb<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;Superman&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello Superman</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-insert" tabindex="-1"><a class="header-anchor" href="#_5-insert" aria-hidden="true">#</a> 5. insert</h4><p>在指定位置插入内容。</p><ul><li>参数1 offset：偏移值，从左开始算，从1开始算（非index）。</li><li>参数2 xxx：待插入的内容（可以是任意能转为String的数据类型、包括引用类型） <ul><li>根据参数2不同的数据类型，有多个重载方法</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//参数2可以是任意能转为String的数据类型</span>
<span class="token class-name">StringBuffer</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Batman&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sb<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token string">&quot;,fuck you&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-reverse" tabindex="-1"><a class="header-anchor" href="#_6-reverse" aria-hidden="true">#</a> 6. reverse</h4><p>把当前字符序列逆转，即颠倒字符串</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">StringBuffer</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
<span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Batman&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sb<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//namtaB olleH</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,55),o=[p];function c(l,r){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","1-2.StringBuffer.html.vue"]]);export{u as default};
