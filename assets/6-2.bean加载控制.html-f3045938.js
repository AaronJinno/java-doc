import{_ as n,o as a,c as s,e as t}from"./app-5ca20126.js";const e={},p=t(`<div class="hint-container tip"><p class="hint-container-title">那些Bean要被加载</p><p>虽然一般人立马想到了加载所有Bean，但企业级开发中不可能在spring容器中进行bean的饱和式加载的（饱和式加载，就是不管用不用，全部加载）。</p><p>虽然开发时自定义的bean不是很多，但JDK中就有两万个类，加载两万个bean，显然是不合理的，因为大部分类根本就用不到。</p></div><h4 id="对加载bean进行控制" tabindex="-1"><a class="header-anchor" href="#对加载bean进行控制" aria-hidden="true">#</a> 对加载Bean进行控制</h4><p>合理的加载Bean的方式，应该是用到哪个就加载哪个。也就是web项目提供服务时，调用了哪个类就加载对应的Bean。</p><h2 id="编程式控制" tabindex="-1"><a class="header-anchor" href="#编程式控制" aria-hidden="true">#</a> 编程式控制</h2><p>编程式注册bean里四种注册Bean的方式，都可以实现对Bean加载的控制，这种控制方式就是编程式Bean加载控制。</p><h4 id="_1-四种编程式注册bean的方式" tabindex="-1"><a class="header-anchor" href="#_1-四种编程式注册bean的方式" aria-hidden="true">#</a> 1. 四种编程式注册Bean的方式</h4><ul><li>AnnotationConfigApplicationContext.register：动态注册</li><li>@Import导入ImportSelector：通过判断元数据控制加载</li><li>@Import导入ImportBeanDefinitionRegistrar：通过判断元数据控制加载，且能定义Bean的属性</li><li>@Import导入BeanDefinitionRegistryPostProcessor：对Bean的加载进行最终裁决</li></ul><h4 id="_2-示例" tabindex="-1"><a class="header-anchor" href="#_2-示例" aria-hidden="true">#</a> 2. 示例</h4><p>判断当前环境中是否有名为Mouse的Bean，若有就加载名为Cat的Bean</p><p>这里采用ImportSelector接口的方式控制</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyImportSelector</span> <span class="token keyword">implements</span> <span class="token class-name">ImportSelector</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectImports</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> importingClassMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;com.sgugo.bean.Mouse&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>clazz <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;com.sgugo.bean.Cat&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-总结" tabindex="-1"><a class="header-anchor" href="#_3-总结" aria-hidden="true">#</a> 3. 总结</h4><p>根据条件加载Bean是企业级开发中的场景操作，但上面的写法太复杂了，于是Spring和Spring Boot提供了更好的解决方案：注解式Bean加载控制。</p><h2 id="注解式控制" tabindex="-1"><a class="header-anchor" href="#注解式控制" aria-hidden="true">#</a> 注解式控制</h2><h4 id="conditional" tabindex="-1"><a class="header-anchor" href="#conditional" aria-hidden="true">#</a> @Conditional</h4><p>Spring提供了@Conditional注解，用来进行Bean的加载控制，不过该注解依然需要手写实现接口定义规则，还是很麻烦。</p><p>于是，Spring Boot提供了大量@Conditional的派生注解，来组合各种条件。实现仅通过注解就能控制bean的加载。</p><h4 id="_1-通过容器中是否存在某个类来控制加载" tabindex="-1"><a class="header-anchor" href="#_1-通过容器中是否存在某个类来控制加载" aria-hidden="true">#</a> 1. 通过容器中是否存在某个类来控制加载</h4><ul><li>@ConditionalOnClass(name=&quot;全类名&quot;)：若参数中的类在环境中存在，就执行下方代码</li><li>@ConditionalOnMissingClass(&quot;全类名&quot;)：若参数中的类在环境中不存在，就执行下方代码</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span><span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;com.sgugo.bean.Wolf&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Cat</span> <span class="token function">tom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span> <span class="token comment">//返回的对象被加入到了bean</span>
    <span class="token annotation punctuation">@ConditionalOnMissingClass</span><span class="token punctuation">(</span><span class="token string">&quot;com.sgugo.bean.Dog&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Cat</span> <span class="token function">tom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-通过容器中是否存在某个bean来控制加载" tabindex="-1"><a class="header-anchor" href="#_2-通过容器中是否存在某个bean来控制加载" aria-hidden="true">#</a> 2. 通过容器中是否存在某个Bean来控制加载</h4><ul><li>@ConditionalOnBean(各种表示Bean的类型)：若环境中有参数指定的Bean，就执行下方代码</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span><span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;jery&quot;</span><span class="token punctuation">)</span> <span class="token comment">//可以是全类名，也可以是具体的bean名称</span>
    <span class="token annotation punctuation">@ConditionalOnMissingClass</span><span class="token punctuation">(</span><span class="token string">&quot;com.sgugo.bean.Dog&quot;</span><span class="token punctuation">)</span> <span class="token comment">//可以组合多个条件</span>
    <span class="token keyword">public</span> <span class="token class-name">Cat</span> <span class="token function">tom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-其他条件" tabindex="-1"><a class="header-anchor" href="#_3-其他条件" aria-hidden="true">#</a> 3. 其他条件</h4><p>有十几种注解，可以控制各种条件，也可以将他们组合起来形成组合条件。这里就不一一列举了，最常用的判定条件就是根据类是否加载来进行控制。</p><h4 id="_4-真实案例" tabindex="-1"><a class="header-anchor" href="#_4-真实案例" aria-hidden="true">#</a> 4. 真实案例</h4><p>判定当前是否加载了mysql的驱动类，如果加载了，我就给你搞一个Druid的数据源对象出来。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;com.mysql.jdbc.Driver&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">DruidDataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="读取yml文件" tabindex="-1"><a class="header-anchor" href="#读取yml文件" aria-hidden="true">#</a> 读取yml文件</h2><p>bean在运行的时候，实现对应的业务逻辑时有可能需要开发者提供一些设置值（也就是属性了）。如果使用构造方法就不太灵活了，使用配置文件是个比较好的方案。使用Bean的时候，可以直接去yml文件里读取配置，然后对Bean进行属性设置。</p><h4 id="_1-configurationproperties" tabindex="-1"><a class="header-anchor" href="#_1-configurationproperties" aria-hidden="true">#</a> 1. @ConfigurationProperties</h4><p>先提前了解@ConfigurationProperties注解的用法，他是专门用来读取配置文件的。</p><p>在 SpringBoot 中，当想需要获取到配置文件数据时，除了可以用 Spring 自带的<code>@Value</code> 注解外，SpringBoot 还提供了一种更加方便的方式：@ConfigurationProperties。</p><p>只要在 Bean 上添加上了这个注解，指定好配置文件的前缀，那么对应的配置文件数据就会自动填充到 Bean 中，注意当前类一定要注册到Bean。</p><p>配置文件可以是properties也可以是yml，这没有影响，只要是SpringBoot的配置文件就行。</p><h5 id="如下所示" tabindex="-1"><a class="header-anchor" href="#如下所示" aria-hidden="true">#</a> 如下所示</h5><p>application.yml: 设置配置文件</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">check</span><span class="token punctuation">:</span>
    <span class="token key atrule">user</span><span class="token punctuation">:</span> 
        <span class="token key atrule">username</span><span class="token punctuation">:</span> <span class="token string">&quot;Jinno&quot;</span>
        <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">&quot;123345&quot;</span>
    <span class="token key atrule">status</span><span class="token punctuation">:</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CheckUser.java：使用配置文件</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span> <span class="token comment">//必须注册到Bean，不能是普通的类</span>
<span class="token annotation punctuation">@Data</span> <span class="token comment">//设置Getter和Setter</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix<span class="token operator">=</span><span class="token string">&quot;check&quot;</span><span class="token punctuation">)</span> <span class="token comment">//前缀为check的配置已经被载入</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CheckUser</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">User</span> user<span class="token punctuation">;</span> <span class="token comment">//check.user自动赋值给User对象</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> status<span class="token punctuation">;</span> <span class="token comment">//check.status自动赋值给User对象</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-通过配置文件为bean提供属性" tabindex="-1"><a class="header-anchor" href="#_2-通过配置文件为bean提供属性" aria-hidden="true">#</a> 2. 通过配置文件为Bean提供属性</h4><p>创建Bean时，读取配置文件，为Bean提供一些属性，使Bean的创建更灵活。</p><h5 id="_2-1-设置配置文件" tabindex="-1"><a class="header-anchor" href="#_2-1-设置配置文件" aria-hidden="true">#</a> 2.1 设置配置文件</h5><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">carton</span><span class="token punctuation">:</span>
    <span class="token key atrule">cat</span><span class="token punctuation">:</span>
        <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">&quot;Tom&quot;</span>
        <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">4</span>
    <span class="token key atrule">mouse</span><span class="token punctuation">:</span>
        <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">&quot;Jerry&quot;</span>
        <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-2-相关的bean" tabindex="-1"><a class="header-anchor" href="#_2-2-相关的bean" aria-hidden="true">#</a> 2.2 相关的Bean</h5><p>有两个类注册了Bean，用于测试：Dog和Cat</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    
<span class="token punctuation">}</span>

<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Mouse</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-3-使用bean时读取配置文件" tabindex="-1"><a class="header-anchor" href="#_2-3-使用bean时读取配置文件" aria-hidden="true">#</a> 2.3 使用Bean时读取配置文件</h5><p>创建一个类使用上面两个Bean，并通过配置文件为Bean提供属性</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Data</span> <span class="token comment">//通过getter和setter为两个类赋值，值游下面的注解提供</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix<span class="token operator">=</span><span class="token string">&quot;cartoon&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CartoonCatAndMouse</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Cat</span> cat<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Mouse</span> mouse<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//这里要获取cat和mouse对象的属性，就需要初始化两个对象。</span>
        <span class="token comment">//可以手动进行创建对象并初始化，只是这样不够灵活，属性是斜视。</span>
        <span class="token comment">//因此可以选择从配置文件中读取两个类的配置，并返回初始化后的bean</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;岁的&quot;</span><span class="token operator">+</span>cat<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;和&quot;</span>
        <span class="token operator">+</span>mouse<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;岁的&quot;</span><span class="token operator">+</span>mouse<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-4-初始化异常" tabindex="-1"><a class="header-anchor" href="#_2-4-初始化异常" aria-hidden="true">#</a> 2.4 初始化异常</h5><p>上面的Cat类和Mouse类创建对象时用的是配置文件提供的属性初始化的。如果此时配置文件不提供属性，那这两个类就无法创建对象，那么cat.getAge()等方法的调用都会报空指针异常。</p><p>且此时CartoonCatAndMouse类与cartoon下的配置绑死了，配置文件不提供配置的话，该类就完全不可用了。</p><h4 id="_3-封装用于读取配置文件的类" tabindex="-1"><a class="header-anchor" href="#_3-封装用于读取配置文件的类" aria-hidden="true">#</a> 3. 封装用于读取配置文件的类</h4><p>为了解决上述方式产生的初始化异常，出现了一种全新的解决方案，封装一个读取配置文件的专属类。</p><h5 id="_3-1-定义读取属性的类" tabindex="-1"><a class="header-anchor" href="#_3-1-定义读取属性的类" aria-hidden="true">#</a> 3.1 定义读取属性的类</h5><p>定义一个类，加载配置文件，读取对应前缀相关的属性值</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//读取配置文件，并设置要读取的配置的前缀</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix<span class="token operator">=</span><span class="token string">&quot;cartoon&quot;</span><span class="token punctuation">)</span>
<span class="token comment">//此时配置文件中carton开头的配置已经全部装载进来了。</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Component</span> <span class="token comment">//该类必须注册为Bean，才能加载配置文件</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CartoonProperties</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Cat</span> cat<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Mouse</span> mouse<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-2-使用配置读取类-获取配置" tabindex="-1"><a class="header-anchor" href="#_3-2-使用配置读取类-获取配置" aria-hidden="true">#</a> 3.2 使用<code>配置读取类</code> 获取配置</h5><p>在需要使用配置的地方，注入配置读取类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 注册CartoonProperties对象</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">CartoonProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Data</span>
<span class="token comment">//该类没有注册我bean,而是使用时再通过@import动态声明为bean</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CartoonCatAndMouse</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span> <span class="token comment">//CartoonProperties已经注册到容器里了，这里直接注入他</span>
    <span class="token keyword">private</span> <span class="token class-name">CartoonProperties</span> cartoonProperties<span class="token punctuation">;</span>

    <span class="token comment">// 为了避免再次出现初始化异常，这里通过三目运算：在获取配置时设置默认值</span>
    <span class="token comment">// 定义一个构造函数用来进行初始化</span>
    <span class="token keyword">public</span> <span class="token class-name">CartoonCatAndMouse</span><span class="token punctuation">(</span><span class="token class-name">CartoonProperties</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>cartoonProperties <span class="token operator">=</span> cartoonProperties<span class="token punctuation">;</span>
        cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cat<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>cartoonProperties<span class="token punctuation">.</span><span class="token function">getCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>cartoonProperties<span class="token punctuation">.</span><span class="token function">getCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span>cartoonProperties<span class="token punctuation">.</span><span class="token function">getCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cat<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>cartoonProperties<span class="token punctuation">.</span><span class="token function">getCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>cartoonProperties<span class="token punctuation">.</span><span class="token function">getCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span>cartoonProperties<span class="token punctuation">.</span><span class="token function">getCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        mouse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//同上</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;岁的&quot;</span><span class="token operator">+</span>cat<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;和&quot;</span>
            <span class="token operator">+</span>mouse<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;岁的&quot;</span><span class="token operator">+</span>mouse<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>@EnableConfigurationProperties注解也是用来加载Bean的 <ul><li>同时CartoonProperties类可以不声明为Bean了（不用加@Component 注解）</li><li>这种声明方式会在所修饰的类被使用时加载bean，不使用时不加载，减少spring管控的资源数量。</li></ul></li></ul><h5 id="_3-3-使用cartooncatandmouse类" tabindex="-1"><a class="header-anchor" href="#_3-3-使用cartooncatandmouse类" aria-hidden="true">#</a> 3.3 使用CartoonCatAndMouse类</h5><p>这里直接在SpringBoot启动类中调用CartoonCatAndMouse类，用以测试。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">CartoonCatAndMouse</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">//导入类，声明为bean</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">ConfigurableApplicationContext</span> ctx <span class="token operator">=</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">App</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CartoonCatAndMouse</span> bean <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">CartoonCatAndMouse</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bean<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-总结" tabindex="-1"><a class="header-anchor" href="#_4-总结" aria-hidden="true">#</a> 4. 总结</h4><p>需要的功能是：加载Bean时，可以通过配置文件设置他的属性，若配置文件中没有设置对应的值，就采用默认值（实际开发中，对于必须给值的属性，配置文件中没值可以直接抛出异常，比如数据库连接）。</p><ul><li>application.yml：再配置文件中为bean配置一些属性（属性值要与Bean的属性值对应） <ul><li>通过@ConfigurationProperties读取配置文件的属性</li></ul></li><li>Bean属性读取类：设置一个专门的类为需要自定义的Bean读取配置文件的属性</li><li>使用Bean：再使用Bean的类中加载<code>Bean属性读取类</code>，为创建的类设置属性 <ul><li>默认值：为了防止yml中没有配置属性值，可以再加载配置文件的属性前先进行判断，若没有给值，就设置一个默认值。</li></ul></li></ul><p>实现的效果：通过配置文件控制了Bean加载的初始化，同时也可以给Bean初始化设置默认的配置（这就是yml配置文件的工作原理）。</p>`,69),o=[p];function c(i,l){return a(),s("div",null,o)}const r=n(e,[["render",c],["__file","6-2.bean加载控制.html.vue"]]);export{r as default};
