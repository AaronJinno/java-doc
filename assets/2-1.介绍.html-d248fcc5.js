import{_ as a,o as i,c as e,e as r}from"./app-4816a6c6.js";const n="/java-doc/img/sql/mongodb/2-1-1.png",d="/java-doc/img/sql/mongodb/2-1-2.png",o="/java-doc/img/sql/mongodb/2-1-3.png",h={},t=r('<h2 id="i-副本集" tabindex="-1"><a class="header-anchor" href="#i-副本集" aria-hidden="true">#</a> Ⅰ. 副本集</h2><h4 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述" aria-hidden="true">#</a> 1. 概述</h4><p>MongoDB中的副本集（Replica Set）是一组维护相同数据集的mongod服务。 副本集可提供冗余和高<br> 可用性，是所有生产部署的基础。</p><p>可以说，副本集类似于有自动故障恢复功能的主从集群。通俗的讲就是用多台机器进行同一数据的异<br> 步同步，从而使多台机器拥有同一数据的多个副本，并且当主库当掉时在不需要用户干预的情况下自动<br> 切换其他备份服务器做主库。而且还可以利用副本服务器做只读服务器，实现读写分离，提高负载。</p><h4 id="_2-冗余和数据可用性" tabindex="-1"><a class="header-anchor" href="#_2-冗余和数据可用性" aria-hidden="true">#</a> 2. 冗余和数据可用性</h4><p>复制提供<strong>冗余</strong>并提高数据可用性。 通过在不同数据库服务器上提供多个数据副本，复制可提供一定级别的容错功能，以防止丢失单个数据库服务器。</p><p>在某些情况下，复制可以提供增加的读取性能，因为客户端可以将读取操作发送到不同的服务上， 在不<br> 同数据中心维护数据副本可以增加分布式应用程序的数据位置和可用性。 还可以为专用目的维护其他<br> 副本，例如灾难恢复，报告或备份。</p><h4 id="_3-mongodb中的复制" tabindex="-1"><a class="header-anchor" href="#_3-mongodb中的复制" aria-hidden="true">#</a> 3. MongoDB中的复制</h4><p>副本集是一组维护相同数据集的mongod实例。<br> 副本集包含多个数据承载节点和可选的一个仲裁节点。<br> 在承载数据的节点中，一个且仅一个成员被视为主节点，而其他节点被视为次要（从）节点。</p><p>主节点接收所有写操作。 副本集只能有一个主要能够确认具有{w：“most”}写入关注的写入; 虽然在某<br> 些情况下，另一个mongod实例可能暂时认为自己也是主要的。主要记录其操作日志中的数据集的所有<br> 更改，即oplog。</p><figure><img src="'+n+'" alt="2-1-1" tabindex="0" loading="lazy"><figcaption>2-1-1</figcaption></figure><h4 id="_4-主从复制和副本集区别" tabindex="-1"><a class="header-anchor" href="#_4-主从复制和副本集区别" aria-hidden="true">#</a> 4. 主从复制和副本集区别</h4><p>主从集群和副本集最大的区别就是副本集没有固定的“主节点”；整个集群会选出一个“主节点”，当其挂<br> 掉后，又在剩下的从节点中选中其他节点为“主节点”，副本集总有一个活跃点(主、primary)和一个或多个备份节点(从、secondary)。</p><h4 id="_5-副本集的类型和角色" tabindex="-1"><a class="header-anchor" href="#_5-副本集的类型和角色" aria-hidden="true">#</a> 5. 副本集的类型和角色</h4><p>副本集有两种类型三种角色</p><h5 id="_5-1-两种类型" tabindex="-1"><a class="header-anchor" href="#_5-1-两种类型" aria-hidden="true">#</a> 5.1 两种类型</h5><ul><li>主节点（Primary）类型：数据操作的主要连接点，可读写。</li><li>次要（辅助、从）节点（Secondaries）类型：数据冗余备份节点，可以读或选举。</li></ul><h5 id="_5-2-三种角色" tabindex="-1"><a class="header-anchor" href="#_5-2-三种角色" aria-hidden="true">#</a> 5.2 三种角色</h5><ul><li>主要成员（Primary）：主要接收所有写操作。就是主节点。</li><li>副本成员（Replicate）：从主节点通过复制操作以维护相同的数据集，即备份数据，不可写操作，但可以读操作（但需要配置）。是默认的一种从节点类型。</li><li>仲裁者（Arbiter）：不保留任何数据的副本，只具有投票选举作用。当然也可以将仲裁服务器维护为副本集的一部分，即副本成员同时也可以是仲裁者。也是一种从节点类型。</li></ul><figure><img src="'+d+'" alt="2-1-2" tabindex="0" loading="lazy"><figcaption>2-1-2</figcaption></figure><h5 id="_5-3-仲裁者额外说明" tabindex="-1"><a class="header-anchor" href="#_5-3-仲裁者额外说明" aria-hidden="true">#</a> 5.3 仲裁者额外说明</h5><p>可以将额外的mongod实例添加到副本集作为仲裁者。 仲裁者不维护数据集，仲裁者的目的是通过<br> 响应其他副本集成员的心跳和选举请求来维护副本集中的仲裁。 因为它们不存储数据集，所以仲裁器可<br> 以是提供副本集仲裁功能的好方法，其资源成本比具有数据集的全功能副本集成员更便宜。</p><ul><li>如果副本集具有偶数个成员，添加仲裁者以获得主要选举中的“大多数”投票。 <ul><li>如果你的副本+主节点的个数是奇数，可以不加仲裁者。</li></ul></li><li>仲裁者不需要专用硬件。</li><li>仲裁者将永远是仲裁者，而主要人员可能会退出并成为次要人员，而次要人员可能成为选举期间的主要人员。</li></ul><h4 id="_6-副本集架构示例" tabindex="-1"><a class="header-anchor" href="#_6-副本集架构示例" aria-hidden="true">#</a> 6. 副本集架构示例</h4><p>最小的副本集架构：一主一副本一仲裁</p><figure><img src="'+o+'" alt="2-1-3" tabindex="0" loading="lazy"><figcaption>2-1-3</figcaption></figure><h2 id="ii-分片集群" tabindex="-1"><a class="header-anchor" href="#ii-分片集群" aria-hidden="true">#</a> Ⅱ. 分片集群</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>TBD</p></div>',28),l=[t];function c(s,p){return i(),e("div",null,l)}const g=a(h,[["render",c],["__file","2-1.介绍.html.vue"]]);export{g as default};
