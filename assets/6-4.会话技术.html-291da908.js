import{_ as s,o as a,c as n,e}from"./app-a9d52fc3.js";const o="/java-doc/img/java/javaweb/6-4-1.jpg",t="/java-doc/img/java/javaweb/6-4-2.jpg",i={},p=e('<div class="hint-container danger"><p class="hint-container-title">提醒</p><p>当前开发，以移动平台为主，因此优先采用的是Token技术。</p><p>Cookie和Session只有浏览器能用</p></div><h2 id="i-会话技术介绍" tabindex="-1"><a class="header-anchor" href="#i-会话技术介绍" aria-hidden="true">#</a> Ⅰ. 会话技术介绍</h2><h4 id="_1-会话" tabindex="-1"><a class="header-anchor" href="#_1-会话" aria-hidden="true">#</a> 1. 会话</h4><p>用户打开浏览器，访问web服务器的资源，会话建立，直到有一方断开连接，会话结束。</p><p>在一次会话中可以包含多次请求和响应。</p><ul><li>从浏览器发出请求到服务端响应数据给前端之后，一次会话(在浏览器和服务器之间)就被建立了</li><li>会话被建立后，如果浏览器或服务端都没有被关闭，则会话就会持续建立着</li><li>浏览器和服务器就可以继续使用该会话进行请求发送和响应，上述的整个过程就被称之为会话。</li></ul><h4 id="_2-不同的会话" tabindex="-1"><a class="header-anchor" href="#_2-不同的会话" aria-hidden="true">#</a> 2. 不同的会话</h4><p>每个浏览器与服务器建立的会话都是不同的会话，如图，一共有三个会话。</p><figure><img src="'+o+`" alt="6-4-1" tabindex="0" loading="lazy"><figcaption>6-4-1</figcaption></figure><h4 id="_3-会话跟踪" tabindex="-1"><a class="header-anchor" href="#_3-会话跟踪" aria-hidden="true">#</a> 3. 会话跟踪</h4><p>一种维护浏览器状态的方法，服务器需要识别多次请求是否来自于同一浏览器，以便在同一次会话的多次请求间共享数据。</p><ul><li>服务器会收到多个请求，这多个请求可能来自多个浏览器，如上图中的6个请求来自3个浏览器</li><li>服务器需要用来识别请求是否来自同一个浏览器</li><li>服务器用来识别浏览器的过程，这个过程就是会话跟踪</li><li>服务器识别浏览器后就可以在同一个会话中多次请求之间来共享数据</li></ul><h4 id="_4-无状态协议" tabindex="-1"><a class="header-anchor" href="#_4-无状态协议" aria-hidden="true">#</a> 4. 无状态协议</h4><p>浏览器和服务器之间使用的是HTTP请求来进行数据传输，HTTP协议是无状态的，每次浏览器向服务器请求时，服务器都会将该请求视为新的请求。HTTP协议设计成无状态的目的是让每次请求之间相互独立，互不影响，请求与请求之间独立后，就无法实现多次请求之间的数据共享。</p><h4 id="_5-会话追踪技术" tabindex="-1"><a class="header-anchor" href="#_5-会话追踪技术" aria-hidden="true">#</a> 5. 会话追踪技术</h4><ul><li>cookie：客户端会话跟踪技术</li><li>session：服务端会话跟踪技术<br> 这两个技术都可以实现会话跟踪，它们之间最大的区别:Cookie是存储在浏览器端而Session是存储在服务器端</li></ul><h2 id="ii-cookie" tabindex="-1"><a class="header-anchor" href="#ii-cookie" aria-hidden="true">#</a> Ⅱ. Cookie</h2><p>客户端会话技术，将数据保存到客户端，以后每次请求都携带Cookie数据进行访问。</p><h4 id="_1-使用步骤" tabindex="-1"><a class="header-anchor" href="#_1-使用步骤" aria-hidden="true">#</a> 1. 使用步骤</h4><ul><li>Servlet-1：创建Cookie对象，绑定数据</li><li>Servlet-1：发送Cookie对象-&gt;给浏览器</li><li>浏览器：保存Cookie，并在下一次请求时携带Cookie</li><li>Servlet-2：拿到浏览器发送请求时携带的Cookie数据</li></ul><h4 id="_2-cookie的相关方法" tabindex="-1"><a class="header-anchor" href="#_2-cookie的相关方法" aria-hidden="true">#</a> 2. Cookie的相关方法</h4><h5 id="_2-1-创建cookie对象" tabindex="-1"><a class="header-anchor" href="#_2-1-创建cookie对象" aria-hidden="true">#</a> 2.1 创建Cookie对象</h5><p>同时构造方法会设置cookie的key 和value</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span>

<span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-2-发送cookie对象" tabindex="-1"><a class="header-anchor" href="#_2-2-发送cookie对象" aria-hidden="true">#</a> 2.2 发送Cookie对象</h5><p>将cookie对象通过响应对象Response，发送到客户端。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token class-name">ServletResponse</span><span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span><span class="token class-name">Cookie</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-3-获取cookie数据" tabindex="-1"><a class="header-anchor" href="#_2-3-获取cookie数据" aria-hidden="true">#</a> 2.3 获取Cookie数据</h5><p>可以通过请求对象Request获取cookie，Cookie可能有多个，因此返回的是数组</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Cookie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">ServletRequest</span><span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Cookie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-4-获取cookie的name和value" tabindex="-1"><a class="header-anchor" href="#_2-4-获取cookie的name和value" aria-hidden="true">#</a> 2.4 获取Cookie的name和value</h5><p>遍历获取的Cookie数据（数组）,来获取具体的key，value</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token class-name">Cookie</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取Cookie的name</span>
<span class="token class-name">String</span> <span class="token class-name">Cookie</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取Cookie的Value</span>
<span class="token comment">//循环Cookie[]获取Cookie</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Cookie</span> c <span class="token operator">:</span> cs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> name <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> value <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-cookie使用范例" tabindex="-1"><a class="header-anchor" href="#_3-cookie使用范例" aria-hidden="true">#</a> 3. Cookie使用范例</h4><h5 id="_3-1-servlet1-创建cookie" tabindex="-1"><a class="header-anchor" href="#_3-1-servlet1-创建cookie" aria-hidden="true">#</a> 3.1 servlet1：创建cookie</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//1.创建Cookie对象</span>
    <span class="token class-name">Cookie</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//2.发送Cookie</span>
    response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-2-servlet2-获取cookie" tabindex="-1"><a class="header-anchor" href="#_3-2-servlet2-获取cookie" aria-hidden="true">#</a> 3.2 servlet2：获取cookie</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token comment">//3. 获取Cookie</span>
    <span class="token class-name">Cookie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cs <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//4.获取数据，遍历Cookies</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>cs <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Cookie</span> c <span class="token operator">:</span> cs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> name <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
               <span class="token class-name">String</span> value <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">&quot;:&quot;</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    
               <span class="token keyword">break</span><span class="token punctuation">;</span>             
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-cookie的工作原理" tabindex="-1"><a class="header-anchor" href="#_4-cookie的工作原理" aria-hidden="true">#</a> 4. Cookie的工作原理</h4><p>提示：Cookie有关的所有操作都是基于请求头和响应头的，只是Servlet直接封装了一套api，省去了直接操作消息头。</p><h5 id="_4-1-servlet1创建并发送cookie" tabindex="-1"><a class="header-anchor" href="#_4-1-servlet1创建并发送cookie" aria-hidden="true">#</a> 4.1 Servlet1创建并发送Cookie</h5><p>创建new Cookie(String name, String value)的本质是创建了一个响应头</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>set<span class="token operator">-</span>cookie<span class="token operator">:</span>msg<span class="token operator">=</span>hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后通过response响应给了浏览器，响应头里就有了set-cookie</p><h5 id="_4-2-浏览器-保存cookie-并在下次请求时携带cookie" tabindex="-1"><a class="header-anchor" href="#_4-2-浏览器-保存cookie-并在下次请求时携带cookie" aria-hidden="true">#</a> 4.2 浏览器：保存Cookie，并在下次请求时携带Cookie</h5><p>浏览器会根据HTTP协议，自动将响应头里的set-cookie保存起来</p><p>当浏览器再次发送强求时，会携带上cookie。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>cookie<span class="token operator">:</span>msg<span class="token operator">=</span>hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_4-3-cookie的识别" tabindex="-1"><a class="header-anchor" href="#_4-3-cookie的识别" aria-hidden="true">#</a> 4.3 cookie的识别</h5><p>cookie不止是储存了键值对，还储存了：</p><ul><li>域名（cookie的适用范围）</li><li>路径（细化cookie的适用范围）</li><li>过期时间：默认关掉浏览器会话就会失效，也可以指定会话时间</li></ul><h4 id="_5-发送多个cookie" tabindex="-1"><a class="header-anchor" href="#_5-发送多个cookie" aria-hidden="true">#</a> 5. 发送多个Cookie</h4><p>可以创建多个Cookie对象，使用response调用多次addCookie方法发送cookie即可。</p><p>响应头和消息头都会携带多个cookie键值对。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Cookie</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">&quot;msg1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Cookie</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">&quot;msg2&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;hi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span> 
response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-cookie的保存时间" tabindex="-1"><a class="header-anchor" href="#_6-cookie的保存时间" aria-hidden="true">#</a> 6. Cookie的保存时间</h4><p>默认情况下，当浏览器关闭后，Cookie数据被销毁，可以手动设置Cookie的存活时间</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Cookie</span> <span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> seconds<span class="token punctuation">)</span>

<span class="token class-name">Cookie</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
c1<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数值的细节：</p><ul><li>正数：将Cookie数据写到硬盘的文件中，持久化存储。 <ul><li>并指定cookie存活时间（单位s），时间到后，cookie文件自动失效</li></ul></li><li>负数：默认值，会话数据储存在内存中，关闭浏览器或服务器就失效。</li><li>0：删除cookie信息，Servlet用来删除还未到期的cook信息。</li></ul><h4 id="_7-储存中文" tabindex="-1"><a class="header-anchor" href="#_7-储存中文" aria-hidden="true">#</a> 7.储存中文</h4><p>在tomcat 8 之前 cookie中不能直接存储中文数据。需要将中文数据转码-一般采用URL编码(%E3)。</p><p>在tomcat 8 之后，cookie支持中文数据。特殊字符还是不支持，建议使用URL编码存储，URL解码解析</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">;</span>

value <span class="token operator">=</span> <span class="token class-name">URLEncoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对中文进行URL编码</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;存储数据：&quot;</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//将编码后的值存入Cookie中</span>
<span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8-cookie的共享" tabindex="-1"><a class="header-anchor" href="#_8-cookie的共享" aria-hidden="true">#</a> 8. cookie的共享</h4><h5 id="_8-1-同一tomcat服务器中-多个web项目的cookie的共享" tabindex="-1"><a class="header-anchor" href="#_8-1-同一tomcat服务器中-多个web项目的cookie的共享" aria-hidden="true">#</a> 8.1 同一Tomcat服务器中，多个Web项目的cookie的共享</h5><p>假设在一个tomcat服务器中，部署了多个web项目，这些web项目中cookie默认情况是不能共享的。</p><p>setPath(String path):设置cookie的获取范围。默认情况下，设置当前的虚拟目录， 如果要共享，则可以将path设置为&quot;/&quot;</p><h5 id="_8-2-不同tomcat服务器间cookie的共享" tabindex="-1"><a class="header-anchor" href="#_8-2-不同tomcat服务器间cookie的共享" aria-hidden="true">#</a> 8.2 不同Tomcat服务器间Cookie的共享</h5><p>setDomain(String path):如果设置一级域名相同，那么多个服务器之间cookie可以共享setDomain(&quot;.baidu.com&quot;),那么tieba.baidu.com和news.baidu.com中cookie可以共享</p><h4 id="_9-总结" tabindex="-1"><a class="header-anchor" href="#_9-总结" aria-hidden="true">#</a> 9. 总结</h4><ul><li>cookie的特性 <ul><li>cookie存储数据在客户端浏览器</li><li>浏览器对于单个cookie 的大小有限制(4kb) 以及 对同一个域名下的总cookie数量也有限制(20个)</li></ul></li><li>作用 <ul><li>cookie一般用于存出少量的不太敏感的数据</li><li>在不登录的情况下，完成服务器对客户端的身份识别</li></ul></li></ul><h2 id="iii-session" tabindex="-1"><a class="header-anchor" href="#iii-session" aria-hidden="true">#</a> Ⅲ. Session</h2><h4 id="_1-概念" tabindex="-1"><a class="header-anchor" href="#_1-概念" aria-hidden="true">#</a> 1. 概念</h4><p>服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。这个对象就是HttpSession。</p><p>说明：由于session数据是保存在一个对象里的，所以SESSION本质是在内存中的。</p><h4 id="_2-session的工作流程" tabindex="-1"><a class="header-anchor" href="#_2-session的工作流程" aria-hidden="true">#</a> 2. Session的工作流程</h4><ul><li>在服务端的AServlet获取一个Session对象，把数据存入其中</li><li>在服务端的BServlet获取到相同的Session对象，从中取出数据</li><li>就可以实现一次会话中多次请求之间的数据共享了<br><img src="`+t+`" alt="6-4-2" loading="lazy"></li></ul><h4 id="_3-获取httpsession对象" tabindex="-1"><a class="header-anchor" href="#_3-获取httpsession对象" aria-hidden="true">#</a> 3. 获取HttpSession对象</h4><p>使用Request对象的getSession方法来获取Session对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">HttpSession</span> <span class="token class-name">ServletRequest</span><span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-httpsession对象的方法" tabindex="-1"><a class="header-anchor" href="#_4-httpsession对象的方法" aria-hidden="true">#</a> 4. HttpSession对象的方法</h4><h5 id="_4-1-设置session的键值" tabindex="-1"><a class="header-anchor" href="#_4-1-设置session的键值" aria-hidden="true">#</a> 4.1 设置session的键值</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_4-2-通过键获取session的值" tabindex="-1"><a class="header-anchor" href="#_4-2-通过键获取session的值" aria-hidden="true">#</a> 4.2 通过键获取session的值</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span> <span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_4-3-通过键删除键值对" tabindex="-1"><a class="header-anchor" href="#_4-3-通过键删除键值对" aria-hidden="true">#</a> 4.3 通过键删除键值对</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_4-4-获取sessionid" tabindex="-1"><a class="header-anchor" href="#_4-4-获取sessionid" aria-hidden="true">#</a> 4.4 获取SESSIONID</h5><p>SESSIONID是session的唯一标识id。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token class-name">HttpSession</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_5-session的原理" tabindex="-1"><a class="header-anchor" href="#_5-session的原理" aria-hidden="true">#</a> 5. Session的原理</h4><p>session的存在是依赖与cookie的，创建Session时，会将sessionid储存到cookie中。</p><ul><li>浏览器：发送请求，调用的service方法中有创建session的代码。</li><li>request.getSession()：第一次创建Session时，会在内存中创建一个Session对象 <ul><li>该session对象有一个id属性</li></ul></li><li>响应：servlet会创建一个响应头来返回创建的sessionid <ul><li>set-cookie:JSESSIONID=23a23234</li></ul></li><li>浏览器：浏览器再次请求时，就会携带cookie，cookie中有JSESSIONID，服务器会自动获取JSESSIONID，用来判断是同一个用户发的请求，并调取SEESION对象的值</li></ul><h4 id="_6-session的有效期" tabindex="-1"><a class="header-anchor" href="#_6-session的有效期" aria-hidden="true">#</a> 6. session的有效期</h4><p>当客户端关闭后，服务器不关闭，两次获取的session并不是同一个。</p><p>因为保存JSESSIOID的cookie默认只在会话期是有效的，关闭浏览器cookie就会消失，就无法获取JSEESIONID了</p><h5 id="定义session的有效期" tabindex="-1"><a class="header-anchor" href="#定义session的有效期" aria-hidden="true">#</a> 定义SESSION的有效期</h5><p>可以通过手动创建Cookie，并指定Cookie存在的时间，来定义SESSION的有效时间。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Cookie</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">&quot;JSESSION&quot;</span><span class="token punctuation">,</span>session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
c<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-session的钝化和活化" tabindex="-1"><a class="header-anchor" href="#_7-session的钝化和活化" aria-hidden="true">#</a> 7. session的钝化和活化</h4><p>当服务器重启后，由于Session是保存在内存中的，所以默认重启后session将失效。<br> 不过Tomcat服务器或自动对Session对象进行钝化和活化。</p><ul><li>session的钝化：在服务器正常关闭之前，将session对象系列化到硬盘上</li><li>session活化：在服务器启动后，将session文件转化为内存中的session对象即可。</li></ul><p>注意：idea中是无法实现活化的，测试的时候要注意，生产环境无影响。</p><h4 id="_8-session的销毁" tabindex="-1"><a class="header-anchor" href="#_8-session的销毁" aria-hidden="true">#</a> 8. session的销毁</h4><h5 id="_8-1" tabindex="-1"><a class="header-anchor" href="#_8-1" aria-hidden="true">#</a> 8.1</h5><p>服务器关闭：自动销毁内存中的SESSION（其实是会钝化处理的）</p><p>session默认失效时间 30分钟，也就是30分钟后，SEESION就自动删除了，假如使用Session储存登陆信息，30分钟就会自动掉线。可以通过修改配置文件，设置session自动销毁的时间：</p><p>文件：web.xml</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-config</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-timeout</span><span class="token punctuation">&gt;</span></span>30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-timeout</span><span class="token punctuation">&gt;</span></span> //单位是分钟
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-config</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_8-2-手动销毁" tabindex="-1"><a class="header-anchor" href="#_8-2-手动销毁" aria-hidden="true">#</a> 8.2 手动销毁</h5><p>session对象调用invalidate() 可以手动销毁session。</p><h4 id="_9-session的特点" tabindex="-1"><a class="header-anchor" href="#_9-session的特点" aria-hidden="true">#</a> 9. session的特点</h4><ul><li>session用于存储一次会话的多次请求的数据，存在服务器端</li><li>session可以存储任意类型，任意大小的数据</li></ul><h2 id="iv-总结" tabindex="-1"><a class="header-anchor" href="#iv-总结" aria-hidden="true">#</a> Ⅳ. 总结</h2><h4 id="_1-cookie与session的区别" tabindex="-1"><a class="header-anchor" href="#_1-cookie与session的区别" aria-hidden="true">#</a> 1. Cookie与Session的区别</h4><ul><li>存储位置：Cookie 是将数据存储在客户端，Session 将数据存储在服务端</li><li>安全性：Cookie不安全，Session安全</li><li>数据大小：Cookie最大3KB，Session无大小限制</li><li>存储时间：Cookie可以通过setMaxAge()长期存储，Session默认30分钟</li><li>服务器性能：Cookie不占服务器资源，Session占用服务器资源</li></ul><h4 id="_2-cookie与session的应用场景" tabindex="-1"><a class="header-anchor" href="#_2-cookie与session的应用场景" aria-hidden="true">#</a> 2. Cookie与Session的应用场景</h4><ul><li>购物车:使用Cookie来存储</li><li>以登录用户的名称展示:使用Session来存储</li><li>记住我功能:使用Cookie来存储</li><li>验证码:使用session来存储</li></ul><h4 id="_3-结论" tabindex="-1"><a class="header-anchor" href="#_3-结论" aria-hidden="true">#</a> 3. 结论</h4><ul><li>Cookie是用来保证用户在未登录情况下的身份识别</li><li>Session是用来保存用户登录后的数据</li></ul>`,121),c=[p];function l(u,d){return a(),n("div",null,c)}const k=s(i,[["render",l],["__file","6-4.会话技术.html.vue"]]);export{k as default};
