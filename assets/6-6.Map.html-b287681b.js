import{_ as l,r as a,o,c as i,a as c,d as n,e as s,w as u,b as e}from"./app-2ea4aaaf.js";const r="/java-doc/img/java/javase/6-6-1.jpg",k="/java-doc/img/java/javase/6-6-2.jpg",d="/java-doc/img/java/javase/6-6-3.jpg",h={},m=e('<h2 id="i-map-接口" tabindex="-1"><a class="header-anchor" href="#i-map-接口" aria-hidden="true">#</a> Ⅰ. Map 接口</h2><h4 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述" aria-hidden="true">#</a> 1. 概述</h4><ul><li>Map与Collection并列存在。用于保存具有 映射关系的数据:key-value</li><li>Map 中的 key 和 value 都可以是任何引用类型的数据</li><li>Map 中的 key 用Set来存放，不允许重复，即同一个 Map 对象所对应的类，须重写hashCode()和equals()方法 <ul><li>常用String类作为Map的“键”</li></ul></li><li>key 和 value 之间存在单向一对一关系，即通过指定的 key 总能找到唯一的、确定的 value</li><li>Map接口的常用实现类：HashMap、TreeMap、LinkedHashMap和Properties。 <ul><li>其中，HashMap是 Map 接口使用频率最高的实现类。</li></ul></li></ul><h4 id="_2-map接口的继承结构" tabindex="-1"><a class="header-anchor" href="#_2-map接口的继承结构" aria-hidden="true">#</a> 2. Map接口的继承结构</h4><ul><li>Map:双列数据，存储key-value对的数据 ---类似于高中的函数：y = f(x) <ul><li>HashMap 【第一个实现类】 <ul><li>LinkedHashMap【第二个实现类】</li></ul></li><li>TreeMap【第三个实现类】</li><li>Hashtable【第四个实现类】 <ul><li>Properties【第五个实现类】 <img src="'+r+'" alt="6-6-1" loading="lazy"></li></ul></li></ul></li></ul><h4 id="_3-实现类简介" tabindex="-1"><a class="header-anchor" href="#_3-实现类简介" aria-hidden="true">#</a> 3. 实现类简介</h4><h5 id="_3-1-hashmap【使用频率最高的实现类】" tabindex="-1"><a class="header-anchor" href="#_3-1-hashmap【使用频率最高的实现类】" aria-hidden="true">#</a> 3.1 HashMap【使用频率最高的实现类】</h5><p>底层结构：数组+链表 （jdk7及之前）；数组+链表+红黑树 （jdk 8）</p><ul><li>线程不安全的，效率高；</li><li>允许使用null键和null值，与HashSet一样，不保证映射的顺序。</li><li>所有的key构成的集合是Set:无序的、不可重复的。所以，key所在的类要重写：equals()和hashCode() <ul><li>HashMap 判断两个 key 相等的标准是：两个 key 通过 equals() 方法返回 true，hashCode 值也相等。</li></ul></li><li>所有的value构成的集合是Collection:无序的、可以重复的。所以，value所在的类要重写：equals() <ul><li>HashMap 判断两个 value 相等的标准是：两个 value 通过 equals() 方法返回 true。</li></ul></li><li>一个key-value构成一个entry，所有的entry构成的集合是Set:无序的、不可重复的</li><li>注意：HashMap是无序的，添加顺序和遍历顺序并没有关联。</li></ul><h5 id="_3-2-linkedhashmap" tabindex="-1"><a class="header-anchor" href="#_3-2-linkedhashmap" aria-hidden="true">#</a> 3.2 LinkedHashMap</h5><p>底层结构：同上</p><ul><li>LinkedHashMap 是 HashMap 的子类</li><li>遍历map元素时，可以按照添加的顺序实现遍历。 <ul><li>原因：在原有的HashMap底层结构基础上，添加了双向链表结构。</li><li>特点：对于频繁的遍历操作，此类执行效率高于HashMap。</li></ul></li></ul><h5 id="_3-3-treemap" tabindex="-1"><a class="header-anchor" href="#_3-3-treemap" aria-hidden="true">#</a> 3.3 TreeMap</h5><p>底层结构：红黑树</p><ul><li>TreeMap存储 Key-Value 对时，需要根据 key-value 对进行 <ul><li>key可以自然排序或定制排序</li><li>TreeMap 可以保证所有的 Key-Value 对处于有序状态。</li></ul></li><li>TreeMap判断 两个key 相等的标准：两个key通过compareTo()方法或者compare()方法返回0。</li></ul><h5 id="_3-4-hashtable" tabindex="-1"><a class="header-anchor" href="#_3-4-hashtable" aria-hidden="true">#</a> 3.4 Hashtable</h5><p>实现原理和结构与HashMap相同，功能也相同，基本被抛弃。</p><ul><li>作为古老的实现类；线程安全的，效率低；不能存储null的key和value</li></ul><h5 id="_3-5-properties" tabindex="-1"><a class="header-anchor" href="#_3-5-properties" aria-hidden="true">#</a> 3.5 Properties</h5><ul><li>Hahstable的子类，常用来处理配置文件。</li><li>由于属性文件里的 key、value 都是字符串类型，所以 Properties 里的key和value都是String类型</li><li>存取数据时，建议使用setProperty(String key,String value)方法和getProperty(String key)方法</li></ul><h4 id="_4-map常用方法" tabindex="-1"><a class="header-anchor" href="#_4-map常用方法" aria-hidden="true">#</a> 4. Map常用方法</h4>',21),v=e(`<h4 id="_5-key-value的储存特点" tabindex="-1"><a class="header-anchor" href="#_5-key-value的储存特点" aria-hidden="true">#</a> 5. key-value的储存特点</h4><p>以HashMap为例</p><ul><li>Key：无序的、不可重复的，使用Set存储所有的key； <ul><li>key所在的类要重写equals()和hashCode() （以HashMap为例）</li></ul></li><li>Value：无序的、可重复的，使用Collection存储所有的value <ul><li>value所在的类要重写equals()，因为要进行查询。</li></ul></li><li>Entry：键值对key-value，构成了一个Entry对象。 <ul><li>Map中的entry:无序的、不可重复的，使用Set存储所有的entry</li></ul></li></ul><h2 id="ii-hashmap底层" tabindex="-1"><a class="header-anchor" href="#ii-hashmap底层" aria-hidden="true">#</a> Ⅱ. HashMap底层</h2><h4 id="_1-jdk7中底层实现原理" tabindex="-1"><a class="header-anchor" href="#_1-jdk7中底层实现原理" aria-hidden="true">#</a> 1. JDK7中底层实现原理</h4><h5 id="_1-1-初始化" tabindex="-1"><a class="header-anchor" href="#_1-1-初始化" aria-hidden="true">#</a> 1.1 初始化</h5><p>在实例化以后，底层创建了长度是16的一维数组Entry[] table。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_1-2-添加数据" tabindex="-1"><a class="header-anchor" href="#_1-2-添加数据" aria-hidden="true">#</a> 1.2 添加数据</h5><p>map.put(key1,value1): 首先，调用key1所在类的hashCode()计算key1哈希值，此哈希值经过某种算法计算以后，得到在Entry数组中的存放位置。</p><ul><li>情况1：如果此位置上的数据为空，此时的key1-value1添加成功。</li><li>如果此位置上的数据不为空，(意味着此位置上存在一个或多个数据(以链表形式存在)),此时应比较key1和已经存在的一个或多个数据的哈希值： <ul><li>情况2：如果key1的哈希值与已经存在的数据的哈希值都不相同，此时key1-value1添加成功。</li><li>如果key1的哈希值和已经存在的某一个数据(key2-value2)的哈希值相同，继续比较：调用key1所在类的equals(key2)方法，比较： <ul><li>情况3-1：如果equals()返回false:此时key1-value1添加成功。</li><li>情况3-2：如果equals()返回true:使用value1替换value2。</li></ul></li></ul></li></ul><h5 id="_1-3-链表的产生" tabindex="-1"><a class="header-anchor" href="#_1-3-链表的产生" aria-hidden="true">#</a> 1.3 链表的产生</h5><p>关于情况2和情况3-1：此时key1-value1和原来的数据以链表的方式存储。</p><h5 id="_1-4-扩容" tabindex="-1"><a class="header-anchor" href="#_1-4-扩容" aria-hidden="true">#</a> 1.4 扩容</h5><p>在不断的添加过程中，会涉及到扩容问题，当超出临界值(且要存放的位置非空)时，扩容。默认的扩容方式：扩容为原来容量的2倍，并将原有的数据复制过来。</p><h5 id="_1-5-储存结构图" tabindex="-1"><a class="header-anchor" href="#_1-5-储存结构图" aria-hidden="true">#</a> 1.5 储存结构图</h5><p>①JDK7：HashMap是数组+链表结构(即为链地址法)</p><figure><img src="`+k+'" alt="6-6-2" tabindex="0" loading="lazy"><figcaption>6-6-2</figcaption></figure><p>②JDK8：HashMap是数组+链表+红黑树实现。</p><figure><img src="'+d+`" alt="6-6-3" tabindex="0" loading="lazy"><figcaption>6-6-3</figcaption></figure><h4 id="_2-jdk8中的底层实现原理" tabindex="-1"><a class="header-anchor" href="#_2-jdk8中的底层实现原理" aria-hidden="true">#</a> 2. JDK8中的底层实现原理</h4><p>相较于jdk7在底层实现方面的不同点为：</p><ul><li>new HashMap():底层没有创建一个长度为16的数组</li><li>首次调用put()方法时，底层创建长度为16的数组</li><li>jdk 8底层的数组是：Node[],而非Entry[]</li><li>jdk7底层结构只有：数组+链表。jdk8中底层结构：数组+链表+红黑树。 <ul><li>形成链表时，七上八下（jdk7:新元素指向旧元素。jdk8：旧元素指向新元素）</li></ul></li></ul><p>红黑树的形成：当数组的某一个索引位置上的元素以链表形式存在的数据个数 &gt; 8且当前数组的长度 &gt; 64时，此时此索引位置上的所数据改为使用红黑树存储（比对速度更快）。</p><h4 id="_3-源码分析" tabindex="-1"><a class="header-anchor" href="#_3-源码分析" aria-hidden="true">#</a> 3. 源码分析</h4><p>暂略。</p><h4 id="_4-源码中的一些重要常量" tabindex="-1"><a class="header-anchor" href="#_4-源码中的一些重要常量" aria-hidden="true">#</a> 4. 源码中的一些重要常量</h4><ul><li>DEFAULT_INITIAL_CAPACITY : HashMap的默认容量，16</li><li>MAXIMUM_CAPACITY ： ： HashMap的最大支持容量，2^30</li><li>DEFAULT_LOAD_FACTOR ：HashMap的默认加载因子</li><li>TREEIFY_THRESHOLD ：Bucket中链表长度大于该默认值，转化为红黑树 -UNTREEIFY_THRESHOLD ：Bucket中红黑树存储的Node小于该默认值，转化为链表</li><li>MIN_TREEIFY_CAPACITY ：桶中的Node被树化时最小的hash表容量。（当桶中Node的数量大到需要变红黑树时，若hash表容量小于MIN_TREEIFY_CAPACITY时，此时应执行resize扩容操作这个- MIN_TREEIFY_CAPACITY的值至少是TREEIFY_THRESHOLD的4倍。）</li><li>table ：存储元素的数组，总是2的n次幂</li><li>entrySet： ：存储具体元素的集</li><li>size ：HashMap中存储的键值对的数量</li><li>modCount ：HashMap扩容和结构改变的次数。</li><li>threshold ：扩容的临界值，=容量*填充因子</li><li>loadFactor： ：填充因子</li></ul><h2 id="iii-linkedhashmap" tabindex="-1"><a class="header-anchor" href="#iii-linkedhashmap" aria-hidden="true">#</a> Ⅲ. LinkedHashMap</h2><h4 id="_1-底层" tabindex="-1"><a class="header-anchor" href="#_1-底层" aria-hidden="true">#</a> 1. 底层</h4><p>暂略，比HahsMap多了个双向链表，</p><p>顺序：迭代顺序与 Key-Value 对的插入顺序一致</p><h4 id="_2-使用" tabindex="-1"><a class="header-anchor" href="#_2-使用" aria-hidden="true">#</a> 2. 使用</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">LinkedHashMap</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token string">&quot;AA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">345</span><span class="token punctuation">,</span><span class="token string">&quot;BB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">&quot;CC&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//遍历顺序与添加顺序一致</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//{123=AA, 345=BB, 12=CC}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iv-treemap" tabindex="-1"><a class="header-anchor" href="#iv-treemap" aria-hidden="true">#</a> Ⅳ. TreeMap</h2><h4 id="_1-特点" tabindex="-1"><a class="header-anchor" href="#_1-特点" aria-hidden="true">#</a> 1. 特点</h4><ul><li>TreeMap存储 Key-Value 对时，需要根据 key-value 对进行排序。 <ul><li>TreeMap 可以保证所有的 Key-Value 对处于 有序状态。</li></ul></li><li>TreeSet底层使用 红黑树结构存储数据</li><li>TreeMap判断 两个key 相等的标准：两个key通过compareTo()方法或者compare()方法返回0。</li></ul><h4 id="_2-排序" tabindex="-1"><a class="header-anchor" href="#_2-排序" aria-hidden="true">#</a> 2. 排序</h4><p>向TreeMap中添加key-value，要求key必须是由同一个类创建的对象，因为要按照key进行排序。排序分为：自然排序和定制排序</p><p>实际开发中，我们一般使用String作为key，String内部已经重新了排序了。</p><h5 id="_2-1-自然排序" tabindex="-1"><a class="header-anchor" href="#_2-1-自然排序" aria-hidden="true">#</a> 2.1 自然排序</h5><p>需要key所在的类，实现Comparable，重写compareTo方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">TreeMap</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">User</span> u1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">User</span> u2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;Jerry&quot;</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">User</span> u3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;Jack&quot;</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">User</span> u4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;Rose&quot;</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>  <span class="token class-name">User</span>类中已经重写了compareTo  <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>u1<span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>u2<span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>u3<span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>u4<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Set</span> entrySet <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Iterator</span> iterator1 <span class="token operator">=</span> entrySet<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>iterator1<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Object</span> obj <span class="token operator">=</span> iterator1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span> entry <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>
    <span class="token comment">//根据自定义的排序方式进行了排序输出</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;----&gt;&quot;</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-定制排序" tabindex="-1"><a class="header-anchor" href="#_2-2-定制排序" aria-hidden="true">#</a> 2.2 定制排序</h4><p>TreeMap的构造器接收一个参数，参数即为Comparator接口的实例，接口中重写类的排序方法compare。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">TreeMap</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o1<span class="token punctuation">,</span> <span class="token class-name">Object</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>o1 <span class="token keyword">instanceof</span> <span class="token class-name">User</span> <span class="token operator">&amp;&amp;</span> o2 <span class="token keyword">instanceof</span> <span class="token class-name">User</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">User</span> u1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span>o1<span class="token punctuation">;</span>
            <span class="token class-name">User</span> u2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span>o2<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>u2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;输入的类型不匹配！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//其他代码的同上</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="v-properties" tabindex="-1"><a class="header-anchor" href="#v-properties" aria-hidden="true">#</a> Ⅴ. Properties</h2><p>该类是专门用来处理项目中的配置文件的。</p><h4 id="_1-定义配置文件" tabindex="-1"><a class="header-anchor" href="#_1-定义配置文件" aria-hidden="true">#</a> 1. 定义配置文件</h4><p>先定义一个配置文件，用于测试，例如：jdbc.properties（数据库连接的配置）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>uname<span class="token operator">=</span>jinno
password<span class="token operator">=</span><span class="token number">123</span>abc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-properties类的方法" tabindex="-1"><a class="header-anchor" href="#_2-properties类的方法" aria-hidden="true">#</a> 2. Properties类的方法</h4><ul><li>getProperty(String key)：获取配置的值</li><li>setProperty(String key,String value)：设置配置的值</li></ul><h4 id="_3-读取配置文件-并加载配置信息" tabindex="-1"><a class="header-anchor" href="#_3-读取配置文件-并加载配置信息" aria-hidden="true">#</a> 3. 读取配置文件，并加载配置信息</h4><p>利用Properties类可以读取配置信息。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1.创建Properties类的对象</span>
<span class="token class-name">Properties</span> pros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//2.加载文件的流</span>
<span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//3.加载流对应的文件</span>
pros<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//4.读取配置信息</span>
<span class="token class-name">String</span> uname <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> password <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>uanme<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//jinno</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//123abc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,56);function b(y,_){const p=a("ExternalLinkIcon"),t=a("RouterLink");return o(),i("div",null,[m,c("p",null,[n("详见："),s(t,{to:"/java/func/2.JDK.util%E5%8C%85/2-4.List-Map.html",target:"_blank"},{default:u(()=>[n("内置函数>List & Map"),s(p)]),_:1})]),v])}const f=l(h,[["render",b],["__file","6-6.Map.html.vue"]]);export{f as default};
