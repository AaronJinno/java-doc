import{_ as n,o as s,c as a,e}from"./app-9f16a8fe.js";const t={},p=e(`<h2 id="i-枚举类" tabindex="-1"><a class="header-anchor" href="#i-枚举类" aria-hidden="true">#</a> Ⅰ. 枚举类</h2><h4 id="_1-什么是枚举类" tabindex="-1"><a class="header-anchor" href="#_1-什么是枚举类" aria-hidden="true">#</a> 1. 什么是枚举类</h4><p>当类的对象是有限个，且确定的情况下，这个类就是枚举类，当需要定义一组常量时，强烈建议使用枚举类，例如：</p><ul><li>星期：Monday(星期一)、......、Sunday(星期天)</li><li>性别：Man(男)、Woman(女)</li><li>季节：Spring(春节)......Winter(冬天)</li><li>支付方式：Cash（现金）、WeChatPay（微信）、Alipay(支付宝)、BankCard(银行卡)、CreditCard(信用卡)、就职状态：Busy、Free、Vocation、Dimission、</li><li>订单状态：Nonpayment（未付款）、Paid（已付款）、Delivered（已发货）、Return（退货）、Checked（已确认）Fulfilled（已配货）、</li><li>线程状态：创建、就绪、运行、阻塞、死亡</li></ul><h4 id="_2-枚举类的特点" tabindex="-1"><a class="header-anchor" href="#_2-枚举类的特点" aria-hidden="true">#</a> 2. 枚举类的特点</h4><p>一个类，他有固定的对象数量，且对象不可改变（final）这些对象是作为类的属性的，用的时候直接取即可。且该类不能再创建对象。</p><h4 id="_3-枚举类的实现" tabindex="-1"><a class="header-anchor" href="#_3-枚举类的实现" aria-hidden="true">#</a> 3. 枚举类的实现</h4><ul><li>JDK1.5之前：需要自定义枚举类</li><li>JDK1.5新增：enum 关键字用于定义枚举类</li></ul><h4 id="_4-自定义枚举类说明" tabindex="-1"><a class="header-anchor" href="#_4-自定义枚举类说明" aria-hidden="true">#</a> 4. 自定义枚举类说明</h4><ul><li>枚举动 类对象的属性不应允许被改动, 所以应该使用 private final 修饰</li><li>枚举类的使用 private final 修饰的属性应该在构造器中为其赋值</li><li>若枚举类显式的定义了带参数的构造器, 则在列出枚举值时也必须对应的传入参数</li><li>如果枚举类中只有一个对象，则可以作为单例模式的实现方式。</li></ul><h4 id="_5-示例-自定义枚举类" tabindex="-1"><a class="header-anchor" href="#_5-示例-自定义枚举类" aria-hidden="true">#</a> 5. 示例：自定义枚举类</h4><p>创建细节：</p><ul><li>私有化类的构造器，保证不能在类的外部创建其对象</li><li>在类的内部创建枚举类的实例。声明为：public static final</li><li>对象如果有实例变量，应该声明为private final，并在构造器中初始化</li></ul><h5 id="_5-1-创建枚举类" tabindex="-1"><a class="header-anchor" href="#_5-1-创建枚举类" aria-hidden="true">#</a> 5.1 创建枚举类</h5><p>需求：创建一个季节枚举类，包含四季，属性为季节名和季节描述</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Season</span><span class="token punctuation">{</span>
    <span class="token comment">//1.声明Season对象的属性:private final修饰</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> seasonName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> seasonDesc<span class="token punctuation">;</span>

    <span class="token comment">//2.私有化类的构造器,并给对象属性赋值</span>
    <span class="token keyword">private</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token class-name">String</span> seasonName<span class="token punctuation">,</span><span class="token class-name">String</span> seasonDesc<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonName <span class="token operator">=</span> seasonName<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonDesc <span class="token operator">=</span> seasonDesc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//3.提供当前枚举类的多个对象：public static final的</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> <span class="token constant">SPRING</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">&quot;春&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;交配季节&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> <span class="token constant">SUMMER</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">&quot;夏&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;好大雨&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> <span class="token constant">AUTUMN</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">&quot;秋&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;落叶&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> <span class="token constant">WINTER</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">&quot;冬&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;好大雪&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//4.其他诉求：获取枚举类对象的属性</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSeasonName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> seasonName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSeasonDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> seasonDesc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//5.toString，测试用</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;{&quot;</span><span class="token operator">+</span> seasonName  <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> seasonDesc <span class="token operator">+</span> <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-2-测试" tabindex="-1"><a class="header-anchor" href="#_5-2-测试" aria-hidden="true">#</a> 5.2 测试</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Season</span> spring <span class="token operator">=</span> <span class="token class-name">Season</span><span class="token punctuation">.</span><span class="token constant">SPRING</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>spring<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//{春:交配季节}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>spring<span class="token punctuation">.</span><span class="token function">getSeasonName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//春</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>spring<span class="token punctuation">.</span><span class="token function">getSeasonDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//交配季节</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-enum" tabindex="-1"><a class="header-anchor" href="#ii-enum" aria-hidden="true">#</a> Ⅱ. enum</h2><h4 id="_1-enum关键字" tabindex="-1"><a class="header-anchor" href="#_1-enum关键字" aria-hidden="true">#</a> 1. enum关键字</h4><p>enum关键字是替代class使用的，用来定义枚举类的。</p><p>即enum也是用来修饰类的，被他修饰类就是枚举类。</p><h4 id="_2-enum使用说明" tabindex="-1"><a class="header-anchor" href="#_2-enum使用说明" aria-hidden="true">#</a> 2. enum使用说明</h4><ul><li>枚举类默认继承了 java.lang.Enum类，因此不能再继承其他类</li><li>枚举类的构造器只能使用 private 权限修饰符</li><li>枚举类的所有实例必须在枚举类中显式列出(, 分隔 ; 结尾)。列出的实例系统会自动添加 public static final 修饰</li><li>必须在枚举类的第一行声明枚举类对象</li></ul><h4 id="_3-自定义枚举类的步骤" tabindex="-1"><a class="header-anchor" href="#_3-自定义枚举类的步骤" aria-hidden="true">#</a> 3. 自定义枚举类的步骤</h4><ul><li>①提供枚举对象：一开始直接定义枚举对象，枚举对象如果有属性，就在括号内加属性。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token constant">OBJNAME1</span><span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token constant">OBJNAME2</span><span class="token punctuation">;</span>
<span class="token comment">//OBJNAME1(&quot;OBJ&quot;,&quot;yes&quot;),</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>②可选：声明枚举对象的属性（如果有的话）</li><li>③私有化类的构造器,并给对象属性赋值（如果有属性）</li><li>④其他操作：其他方法</li></ul><h4 id="_4-enum的主要方法" tabindex="-1"><a class="header-anchor" href="#_4-enum的主要方法" aria-hidden="true">#</a> 4. Enum的主要方法</h4><p>Enum是所有枚举类的父类，方法直接用即可。</p><ul><li>values：返回枚举类型的对象数组。该方法可以很方便地遍历所有的枚举值。</li><li>valueOf(String str)：可以把一个字符串转为对应的枚举类对象。要求字符串必须是枚举类对象的“名字”。如不是，会有运行时异常：IllegalArgumentException。</li><li>toString()：返回当前枚举类对象常量的名称</li></ul><h4 id="_5-实现接口的枚举类" tabindex="-1"><a class="header-anchor" href="#_5-实现接口的枚举类" aria-hidden="true">#</a> 5. 实现接口的枚举类</h4><ul><li>统一实现抽象方法：和普通类一样，重写抽象方法，无论哪个枚举对象调用，返回的内容都一样。</li><li>分别实现抽象方法：若需要每个枚举值在调用实现的接口方法呈现出不同的行为方式,则可以让每个枚举值分别来实现该方法，在枚举值后面加<code>{方法名{...}}</code></li></ul><h4 id="_6-enum使用示例" tabindex="-1"><a class="header-anchor" href="#_6-enum使用示例" aria-hidden="true">#</a> 6. enum使用示例</h4><h5 id="_6-1-定义枚举类-并实现一个接口" tabindex="-1"><a class="header-anchor" href="#_6-1-定义枚举类-并实现一个接口" aria-hidden="true">#</a> 6.1 定义枚举类，并实现一个接口</h5><p>需求：定义四季，每个季节都有自己的名字</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token class-name">Basic</span><span class="token punctuation">;</span><span class="token comment">//和正常类一样，也属于某个包</span>

<span class="token keyword">interface</span> show<span class="token punctuation">{</span> <span class="token comment">//定义一个接口</span>
    <span class="token keyword">void</span> <span class="token function">showSeason</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//enum和class一样可以实现接口，并需要重写接口中的方法</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Seasons</span> <span class="token keyword">implements</span> show <span class="token punctuation">{</span>、
    <span class="token comment">//枚举类的对象必须创建在开头</span>
    <span class="token function">SPRING</span><span class="token punctuation">(</span><span class="token string">&quot;春天&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//括号里的参数是构造方法的参数</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//在枚举对象中可以单独重写接口中的方法</span>
            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">showSeason</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用类中被重写的showInfo方法</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;春天是交配的季节&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//枚举对象间用逗号分割</span>
    <span class="token function">SUMMER</span><span class="token punctuation">(</span><span class="token string">&quot;夏天&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">AUTUMN</span><span class="token punctuation">(</span><span class="token string">&quot;秋天&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">WINTER</span><span class="token punctuation">(</span><span class="token string">&quot;春天&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最后一个枚举对象以分号结束</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> seasonName<span class="token punctuation">;</span> <span class="token comment">//枚举类的private final 属性</span>
    
     <span class="token comment">//枚举类的私有化构造函数</span>
    <span class="token keyword">private</span> <span class="token class-name">Seasons</span><span class="token punctuation">(</span><span class="token class-name">String</span> seasonName<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonName <span class="token operator">=</span> seasonName<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>seasonName<span class="token operator">+</span><span class="token string">&quot;来了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//和普通类一样，枚举类中也可以定义普通方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span> 
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token operator">+</span><span class="token string">&quot;真好&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span><span class="token comment">//重写接口中定义的方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showSeason</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;春夏秋冬&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6-2-使用枚举类-并测试枚举类的方法" tabindex="-1"><a class="header-anchor" href="#_6-2-使用枚举类-并测试枚举类的方法" aria-hidden="true">#</a> 6.2 使用枚举类，并测试枚举类的方法</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//获取一个Seasons对象：SPRING</span>
<span class="token comment">//控制台会输出：春天来了 夏天来了 秋天来了 冬天来了</span>
<span class="token class-name">Seasons</span> spring <span class="token operator">=</span> <span class="token class-name">Seasons</span><span class="token punctuation">.</span><span class="token constant">SPRING</span><span class="token punctuation">;</span> 
spring<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出标识符代表的对象名：SPRING</span>
spring<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;今天&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用info方法,输出：今天真好</span>
spring<span class="token punctuation">.</span><span class="token function">showSeason</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用的是Spring重写的showSeason方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,39),o=[p];function c(i,l){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","4-1.枚举.html.vue"]]);export{k as default};
