import{_ as a,o as n,c as t,e}from"./app-385ffbff.js";const s={},i=e(`<h2 id="i-nio2" tabindex="-1"><a class="header-anchor" href="#i-nio2" aria-hidden="true">#</a> Ⅰ. NIO2</h2><h4 id="_1-java-nio概述" tabindex="-1"><a class="header-anchor" href="#_1-java-nio概述" aria-hidden="true">#</a> 1. Java NIO概述</h4><p>Java NIO (New IO，Non-Blocking IO)是从Java 1.4版本开始引入的一套新的IO API，可以替代标准的Java IO API。NIO与原来的IO有同样的作用和目的，但是使用的方式完全不同，NIO支持面向缓冲区的(IO是面向流的)、基于通道的IO操作。NIO将以更加高效的方式进行文件的读写操作。</p><p>Java API中提供了两套NIO，一套是针对标准输入输出NIO，另一套就是网络编程NIO。</p><ul><li>java.nio.channels.Channel <ul><li>FileChannel:处理本地文件</li><li>SocketChannel：TCP网络编程的客户端的Channel</li><li>ServerSocketChannel:TCP网络编程的服务器端的Channel</li><li>DatagramChannel：UDP网络编程中发送端和接收端的Channe</li></ul></li></ul><h4 id="_2-nio-2-概述" tabindex="-1"><a class="header-anchor" href="#_2-nio-2-概述" aria-hidden="true">#</a> 2. NIO.2 概述</h4><p>随着 JDK 7 的发布，Java对NIO进行了极大的扩展，增强了对文件处理和文件系统特性的支持，以至于我们称他们为 NIO.2。因为 NIO 提供的一些功能，NIO已经成为文件处理中越来越重要的部分。</p><h4 id="_3-核心api" tabindex="-1"><a class="header-anchor" href="#_3-核心api" aria-hidden="true">#</a> 3. 核心API</h4><p>早期的Java只提供了一个File类来访问文件系统，但File类的功能比较有限，所提供的方法性能也不高。而且，大多数方法在出错时仅返回失败，并不会提供异常信息。</p><h5 id="_3-1-path接口" tabindex="-1"><a class="header-anchor" href="#_3-1-path接口" aria-hidden="true">#</a> 3.1 Path接口</h5><p>NIO. 2为了弥补这种不足，引入了Path接口，代表一个平台无关的平台路径，描述了目录结构中文件的位置。Path可以看成是File类的升级版本，实际引用的资源也可以不存在。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//以前IO操作都是这样写的:</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span>
<span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;index.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//在Java7 中，我们可以这样写：</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Path</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span>
<span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;index.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-2-paths和files工具类" tabindex="-1"><a class="header-anchor" href="#_3-2-paths和files工具类" aria-hidden="true">#</a> 3.2 Paths和Files工具类</h5><p>NIO.2在java.nio.file包下还提供了Files、Paths工具类，Files包含了大量静态的工具方法来操作文件；Paths则包含了两个返回Path的静态工厂方法。</p><h4 id="_4-path接口常用方法" tabindex="-1"><a class="header-anchor" href="#_4-path接口常用方法" aria-hidden="true">#</a> 4. Path接口常用方法</h4><ul><li>String toString() ： 返回调用 Path 对象的字符串表示形式</li><li>boolean startsWith(String path) : 判断是否以 path 路径开始</li><li>boolean endsWith(String path) : 判断是否以 path 路径结束</li><li>boolean isAbsolute() : 判断是否是绝对路径</li><li>Path getParent() ：返回Path对象包含整个路径，不包含 Path 对象指定的文件路径</li><li>Path getRoot() ：返回调用 Path 对象的根路径</li><li>Path getFileName() : 返回与调用 Path 对象关联的文件名</li><li>int getNameCount() : 返回Path 根目录后面元素的数量</li><li>Path getName(int idx) : 返回指定索引位置 idx 的路径名称</li><li>Path toAbsolutePath() : 作为绝对路径返回调用 Path 对象</li><li>Path resolve(Path p) :合并两个路径，返回合并后的路径对应的Path对象</li><li>File toFile(): 将Path转化为File类的对象</li></ul><h4 id="_5-paths类的方法" tabindex="-1"><a class="header-anchor" href="#_5-paths类的方法" aria-hidden="true">#</a> 5. Paths类的方法</h4><p>Paths 类提供的静态 get() 方法用来获取 Path 对象：</p><ul><li>static Path get(String first, String … more) : 用于将多个字符串串连成路径</li><li>static Path get(URI uri): 返回指定uri对应的Path路径</li></ul><h4 id="_6-files类常用方法" tabindex="-1"><a class="header-anchor" href="#_6-files类常用方法" aria-hidden="true">#</a> 6. Files类常用方法</h4><p>java.nio.file.Files 用于操作文件或目录的工具类。</p><ul><li>Path copy(Path src, Path dest, CopyOption … how) : 文件的复制</li><li>Path createDirectory(Path path, FileAttribute&lt;?&gt; … attr) : 创建一个目录</li><li>Path createFile(Path path, FileAttribute&lt;?&gt; … arr) : 创建一个文件</li><li>void delete(Path path) : 删除一个文件/目录，如果不存在，执行报错</li><li>void deleteIfExists(Path path) : Path对应的文件/目录如果存在，执行删除</li><li>Path move(Path src, Path dest, CopyOption…how) : 将 src 移动到 dest 位置</li><li>long size(Path path) : 返回 path 指定文件的大小</li><li>boolean exists(Path path, LinkOption … opts) : 判断文件是否存在</li><li>boolean isDirectory(Path path, LinkOption … opts) : 判断是否是目录</li><li>boolean isRegularFile(Path path, LinkOption … opts) : 判断是否是文件</li><li>boolean isHidden(Path path) : 判断是否是隐藏文件</li><li>boolean isReadable(Path path) : 判断文件是否可读</li><li>boolean isWritable(Path path) : 判断文件是否可写</li><li>boolean notExists(Path path, LinkOption … opts) : 判断文件是否不存在</li><li>SeekableByteChannel newByteChannel(Path path, OpenOption…how) : 获取与指定文件的连接，how 指定打开方式</li><li><code>DirectoryStream&lt;Path&gt; newDirectoryStream(Path path)</code> : 打开 path 指定的目录</li><li>InputStream newInputStream(Path path, OpenOption…how):获取 InputStream 对象</li><li>OutputStream newOutputStream(Path path, OpenOption…how) : 获取 OutputStream 对象</li></ul><h2 id="ii-第三方jar包" tabindex="-1"><a class="header-anchor" href="#ii-第三方jar包" aria-hidden="true">#</a> Ⅱ. 第三方Jar包</h2><p>我们在开发中，可以直接使用第三方封装好的IO流操作包。这些第三方包底层用的也是基本的IO流操作。这些封装后的IO操作更加简单，高效。</p>`,24),l=[i];function p(o,h){return n(),t("div",null,l)}const r=a(s,[["render",p],["__file","8-9.NIO2与Jar包.html.vue"]]);export{r as default};
