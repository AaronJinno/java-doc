import{_ as a,o as n,c as s,b as e}from"./app-b1eed5ae.js";const t="/java-doc/img/frame/springboot/2-1-1.png",i="/java-doc/img/frame/springboot/2-1-2.png",p={},l=e(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>开发阶段，当代码修改后，想查看效果就要重启服务器，非常麻烦，而使用热部署就能解决这个问题。</p><p>注意：热部署是在开发阶段配置的，方便代码的调试。生产阶段不要开启热部署。</p></div><p>热部署就是代码修改后，服务器会自己悄悄的把更新后的程序给重新加载一遍。</p><h4 id="_1-热部署实现原理" tabindex="-1"><a class="header-anchor" href="#_1-热部署实现原理" aria-hidden="true">#</a> 1. 热部署实现原理</h4><h5 id="_1-1-非springboot项目热部署实现原理" tabindex="-1"><a class="header-anchor" href="#_1-1-非springboot项目热部署实现原理" aria-hidden="true">#</a> 1.1 非SpringBoot项目热部署实现原理</h5><p>背景：JavaWeb项目部署到本地的Tomcat服务器上。</p><ul><li>方案1：在tomcat服务器的配置文件中进行配置</li><li>方案2：在IDEA中进行配置。</li></ul><p>核心思想：使用服务器去监控其中加载的应用，发现产生了变化就重新加载一次。</p><h5 id="_1-2-springboot项目热部署实现原理" tabindex="-1"><a class="header-anchor" href="#_1-2-springboot项目热部署实现原理" aria-hidden="true">#</a> 1.2 SpringBoot项目热部署实现原理</h5><p>SpringBoot的Tomcat服务器是内置的，tomcat本身也是对象，和我们的程序是平级的，都是spring容器中的组件。</p><p>这就需要额外设置一个程序，监控开发的文件，发生变化，就命令Tomcat重新加载开发的文件就OK了。 这样做spring容器中东西不用全部重新加载一遍，只需要重新加载正则开发的文件就可以了，效率更高了。</p><h4 id="_2-重启与重载" tabindex="-1"><a class="header-anchor" href="#_2-重启与重载" aria-hidden="true">#</a> 2. 重启与重载</h4><p>一个springboot项目在运行时实际上是分两个过程进行的，根据加载的东西不同，划分成base类加载器与restart类加载器。</p><ul><li>base类加载器：用来加载jar包中的类，jar包中的类和配置文件由于不会发生变化，因此不管加载多少次，加载的内容不会发生变化.</li><li>restart类加载器：用来加载开发者自己开发的类、配置文件、页面等信息，这一类文件受开发者影响</li></ul><h5 id="_2-1-重启-restart" tabindex="-1"><a class="header-anchor" href="#_2-1-重启-restart" aria-hidden="true">#</a> 2.1 重启：Restart</h5><p>加载内容：自定义开发代码，包含类、页面、配置文件等，加载位置restart类加载器。</p><p>当springboot项目启动时，base类加载器执行，加载jar包中的信息后，restart类加载器执行，加载开发者制作的内容。</p><h5 id="_2-2-重载reload" tabindex="-1"><a class="header-anchor" href="#_2-2-重载reload" aria-hidden="true">#</a> 2.2 重载Reload</h5><p>加载内容：项目中包含的jar包，加载位置base类加载器。</p><p>当执行构建项目后，由于jar中的信息不会变化，因此base类加载器无需再次执行，所以仅仅运行restart类加载即可，也就是将开发者自己制作的内容重新加载就行了，这就完成了一次热部署的过程，也可以说热部署的过程实际上是重新加载restart类加载器中的信息。</p><h4 id="_3-手动启动热部署" tabindex="-1"><a class="header-anchor" href="#_3-手动启动热部署" aria-hidden="true">#</a> 3. 手动启动热部署</h4><p>导入一个SpringBoot开发依赖，其中包含热部署工具。</p><h5 id="_3-1-导入坐标" tabindex="-1"><a class="header-anchor" href="#_3-1-导入坐标" aria-hidden="true">#</a> 3.1 导入坐标</h5><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-2-构建项目" tabindex="-1"><a class="header-anchor" href="#_3-2-构建项目" aria-hidden="true">#</a> 3.2 构建项目</h5><p>热部署需要手动生效，当修改了文件，准备测试前，手动使用IDEA进行Build Project</p><p>菜单栏：Buidl-&gt;Build Project（快捷键 Ctrl + F9）。</p><h5 id="_3-3-问题" tabindex="-1"><a class="header-anchor" href="#_3-3-问题" aria-hidden="true">#</a> 3.3 问题</h5><p>每次进行热部署都需要开发者手工操作，非常麻烦。</p><h4 id="_4-自动启动热部署" tabindex="-1"><a class="header-anchor" href="#_4-自动启动热部署" aria-hidden="true">#</a> 4. 自动启动热部署</h4><p>这个是IDEA中的设置，让IDEA自动进行热部署。</p><h5 id="_4-1-设置-自动构建项目build-project" tabindex="-1"><a class="header-anchor" href="#_4-1-设置-自动构建项目build-project" aria-hidden="true">#</a> 4.1 设置：自动构建项目build project</h5><p>Setting中勾选，如下：</p><figure><img src="`+t+'" alt="2-1-1" tabindex="0" loading="lazy"><figcaption>2-1-1</figcaption></figure><h5 id="_4-2-设置-允许在程序运行时进行自动构建" tabindex="-1"><a class="header-anchor" href="#_4-2-设置-允许在程序运行时进行自动构建" aria-hidden="true">#</a> 4.2 设置：允许在程序运行时进行自动构建</h5><p>继续在Setting进行如下设置：</p><figure><img src="'+i+`" alt="2-1-2" tabindex="0" loading="lazy"><figcaption>2-1-2</figcaption></figure><h5 id="_4-3-热部署的时机" tabindex="-1"><a class="header-anchor" href="#_4-3-热部署的时机" aria-hidden="true">#</a> 4.3 热部署的时机</h5><p>默认当idea工具失去焦点5秒后进行热部署，改完程序需要到浏览器上去调试，这个时候idea就自动进行热部署操作，很人性化。</p><h4 id="_5-热部署监控的文件范围" tabindex="-1"><a class="header-anchor" href="#_5-热部署监控的文件范围" aria-hidden="true">#</a> 5. 热部署监控的文件范围</h4><p>并发所有的文件修改都会触发热部署，开发中工具中有一组配置，该配置就是来指定哪些文件的修改会触发热部署。</p><h5 id="_5-1-默认不参与热部署的目录" tabindex="-1"><a class="header-anchor" href="#_5-1-默认不参与热部署的目录" aria-hidden="true">#</a> 5.1 默认不参与热部署的目录</h5><ul><li>/META-INF/maven</li><li>/META-INF/resources</li><li>/resources</li><li>/static</li><li>/public</li><li>/templates</li></ul><h5 id="_5-2-修改不参与热部署的目录或文件" tabindex="-1"><a class="header-anchor" href="#_5-2-修改不参与热部署的目录或文件" aria-hidden="true">#</a> 5.2 修改不参与热部署的目录或文件</h5><p>可以通过application.yml文件进行设定哪些文件不参与热部署操作。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">devtools</span><span class="token punctuation">:</span>
    <span class="token key atrule">restart</span><span class="token punctuation">:</span>
      <span class="token comment"># 设置不参与热部署的文件或文件夹</span>
      <span class="token key atrule">exclude</span><span class="token punctuation">:</span> static/<span class="token important">**</span><span class="token punctuation">,</span>public/<span class="token important">**</span><span class="token punctuation">,</span>config/application.yml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-关闭热部署" tabindex="-1"><a class="header-anchor" href="#_6-关闭热部署" aria-hidden="true">#</a> 6. 关闭热部署</h4><p>热部署是纯开发阶段的功能，生产阶段必须关闭热部署。</p><h5 id="_6-1-通过配置强制关闭热部署" tabindex="-1"><a class="header-anchor" href="#_6-1-通过配置强制关闭热部署" aria-hidden="true">#</a> 6.1 通过配置强制关闭热部署</h5><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">devtools</span><span class="token punctuation">:</span>
    <span class="token key atrule">restart</span><span class="token punctuation">:</span>
      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_6-2-通过启动类强制关闭热部署" tabindex="-1"><a class="header-anchor" href="#_6-2-通过启动类强制关闭热部署" aria-hidden="true">#</a> 6.2 通过启动类强制关闭热部署</h6><p>配置文件层级过多可能会导致相符覆盖最终引起配置失效，可以提高配置的层级，在更高层级中配置关闭热部署。<br> 比如：最高等级的启动文类中进行关闭。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SSMPApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;spring.devtools.restart.enabled&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;false&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SSMPApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,52),c=[l];function o(r,d){return n(),s("div",null,c)}const h=a(p,[["render",o],["__file","2-1.热部署.html.vue"]]);export{h as default};
