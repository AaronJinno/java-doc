import{_ as e,a as o}from"./1-2-2-0841486f.js";import{_ as p,r as l,o as r,c,a,b as n,d as t,e as s}from"./app-5ca20126.js";const d="/java-doc/img/frame/springboot/1-2-3.png",g="/java-doc/img/frame/springboot/1-2-4.png",u="/java-doc/img/frame/springboot/1-2-5.png",h={},_=s('<div class="hint-container tip"><p class="hint-container-title">提示</p><p>这里采用的是IDEA里的Spring Initializr 创建的工程。</p><p>需要前置知识：Maven。</p></div><h4 id="_1-spring-initializr" tabindex="-1"><a class="header-anchor" href="#_1-spring-initializr" aria-hidden="true">#</a> 1. Spring Initializr</h4><p>创建工程（new Project）时选择 Spring Initializr。</p><figure><img src="'+e+'" alt="1-2-1" tabindex="0" loading="lazy"><figcaption>1-2-1</figcaption></figure><p><strong>选项解释</strong></p><ul><li>Server URL：SpringBoot项目构建是需要联网的，该URL就是要连接的网址，默认是官网。</li><li>Name：项目（工程或模块）的名字</li><li>Location：项目在硬盘上的位置</li><li>Language：语言，选Java就行</li><li>Type：选Maven就行</li><li>Group / Artifact / Package name：Maven的包信息</li><li>Project JDK：JDK版本，注意版本适配</li><li>Java：Project SDK的版本要与Java处的SDK版本一致。</li><li>Packaging：打包方式选择Jar，即使是Web工程。</li></ul><h4 id="_2-配置工程" tabindex="-1"><a class="header-anchor" href="#_2-配置工程" aria-hidden="true">#</a> 2. 配置工程</h4><p>接上一步，点击 <code>NEXT</code> ，进行工程（或模块）的配置。</p><figure><img src="'+o+'" alt="1-2-2" tabindex="0" loading="lazy"><figcaption>1-2-2</figcaption></figure><p>在这里配置SpringBoot版本，和需要添加的依赖，具体如下：</p><ul><li>Spring Boot：选择版本，默认是最新的稳定版，要根据项目的其他组件依赖进行选择 <ul><li>比如SpringCloud alibaba最新的稳定版需要的是SpringBoot 2.7，而默认的版本是3.0.0</li></ul></li><li>Dependencies：这里可以选择项目所需的一些依赖，比如Lombok <ul><li>项目创建后是可以手动添加依赖的，这里不用纠结</li></ul></li><li>Addeed dependencies：已经勾选的依赖，可以点X取消。</li></ul><p>配置完后，点击 <code>Finish</code> 项目就创建成功了。</p><h4 id="_3-网络问题" tabindex="-1"><a class="header-anchor" href="#_3-网络问题" aria-hidden="true">#</a> 3. 网络问题</h4><p>SpringBoot项目是需要联网创建的，默认网址是：<code>start.spring.io</code>如果网络不通畅，可以选择其他方式创建，或者使用国内镜像。</p><p><strong>切换阿里云镜像</strong></p>',15),m={href:"https://start.aliyun.com",target:"_blank",rel:"noopener noreferrer"},f=s('<figure><img src="'+d+'" alt="1-2-3" tabindex="0" loading="lazy"><figcaption>1-2-3</figcaption></figure><h4 id="_4-构建结果" tabindex="-1"><a class="header-anchor" href="#_4-构建结果" aria-hidden="true">#</a> 4. 构建结果</h4><p>自动构建了项目的目录，如下：</p><figure><img src="'+g+'" alt="1-2-4" tabindex="0" loading="lazy"><figcaption>1-2-4</figcaption></figure><p><strong>目录解读</strong></p><ul><li>BolgApplication：核心类，用来启动SpringBoot项目</li><li>application.properties：核心配置文件 <ul><li>不过后续使用时会采用yaml格式的配置文件</li></ul></li><li>pom：核心文件，确认了SpringBoot的依赖（SpringBoot程序包含的基础文件）</li><li>test：测试目录，SpringBoot默认集成了Unit</li><li>无用的文件：<code>HELP.md</code> 、<code>mvnw</code>、<code>mvnw.cmd</code></li></ul><h4 id="_5-注意事项" tabindex="-1"><a class="header-anchor" href="#_5-注意事项" aria-hidden="true">#</a> 5. 注意事项</h4><h5 id="_5-1-pom-xml" tabindex="-1"><a class="header-anchor" href="#_5-1-pom-xml" aria-hidden="true">#</a> 5.1 pom.xml</h5><p>pom.xml中的spring-boot-maven-plugin是没有指定version的，使用的是IDEA默认的version，可能与SpringBoot的版本号对不上导致无法引入报错。</p><figure><img src="'+u+`" alt="1-2-5" tabindex="0" loading="lazy"><figcaption>1-2-5</figcaption></figure><p><strong>解决方案</strong></p><p>可以手动指定版本号（与SpringBoot的版本号一样）。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.7.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-2-启动类" tabindex="-1"><a class="header-anchor" href="#_5-2-启动类" aria-hidden="true">#</a> 5.2 启动类</h5><p>SpringBoot的启动类在项目中的位置是固定的，确保启动类与直接在“项目包”的目录下</p><p>即：启动类与三层架构放在同一级，如果不这样就无法找到启动类，无法启动项目。</p><h5 id="_5-3-依赖版本" tabindex="-1"><a class="header-anchor" href="#_5-3-依赖版本" aria-hidden="true">#</a> 5.3 依赖版本</h5><p>创建项目的过程中，勾选依赖时无法指定版本，想修改版本需要在项目构建完后，在pom.xml中进行设置。</p><h4 id="_6-隐藏无用的文件" tabindex="-1"><a class="header-anchor" href="#_6-隐藏无用的文件" aria-hidden="true">#</a> 6. 隐藏无用的文件</h4><p>创建SpringBoot会产生很多无意义的文件，影响目录观感。<br> 每次手动删太麻烦，可以使用IDEA的设置进行自动隐藏。</p><ul><li>Setting → File Types → Ignored Files and Folders</li><li>输入要隐藏的文件名，支持*号通配符回车确认添加</li></ul><p>注意：不要隐藏.idea文件</p><h4 id="_7-其他方式创建springboot项目" tabindex="-1"><a class="header-anchor" href="#_7-其他方式创建springboot项目" aria-hidden="true">#</a> 7. 其他方式创建SpringBoot项目</h4><h5 id="_7-1-使用官网创建springboot项目" tabindex="-1"><a class="header-anchor" href="#_7-1-使用官网创建springboot项目" aria-hidden="true">#</a> 7.1 使用官网创建SpringBoot项目</h5>`,24),k={href:"https://start.spring.io/",target:"_blank",rel:"noopener noreferrer"},b=a("li",null,"创建工程，并保存项目（步骤同IDEA）",-1),v=a("li",null,"导入项目：创建完成后，会自动下载一个项目压缩包，解压项目，通过IDE导入项目即可。",-1),x=a("h5",{id:"_7-2-手动创建项目",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_7-2-手动创建项目","aria-hidden":"true"},"#"),n(" 7.2 手动创建项目")],-1),S=a("ul",null,[a("li",null,"前提：Maven已经下载好了所需的依赖。"),a("li",null,[n("核心：pom.xml和启动类需要手动进行创建。"),a("br"),n(" 手动创建一个Maven工程，手动编辑pom.xml和创建启动类"),a("br"),n(" 文件内容和自动创建的一样。")])],-1);function B(I,y){const i=l("ExternalLinkIcon");return r(),c("div",null,[_,a("p",null,[n("地址："),a("a",m,[n("https://start.aliyun.com"),t(i)])]),f,a("ul",null,[a("li",null,[n("打开SpringBoot "),a("a",k,[n("官网"),t(i)]),n("，选择Quickstart Your Project，或者直接输入：ttps://start.spring.io/")]),b,v]),x,S])}const E=p(h,[["render",B],["__file","1-2.创建项目.html.vue"]]);export{E as default};
