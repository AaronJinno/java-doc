import{_ as a,o as e,c as r,e as i}from"./app-9484c6b3.js";const s="/java-doc/img/java/javaweb/6-1-1.jpg",n={},t=i(`<h2 id="i-jar包介绍" tabindex="-1"><a class="header-anchor" href="#i-jar包介绍" aria-hidden="true">#</a> Ⅰ. Jar包介绍</h2><h4 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述" aria-hidden="true">#</a> 1. 概述</h4><p>JAR文件（Java归档，英语：Java Archive）是一种软件包文件格式，通常用于聚合大量的Java类文件、相关的元数据和资源（文本、图片等）文件到一个文件，以便开发Java平台应用软件或库。</p><p>JAR文件是一种归档文件，以ZIP格式构建，以.jar为文件扩展名。用户可以使用JDK自带的jar命令创建或提取JAR文件。也可以使用其他zip压缩工具，不过压缩时zip文件头里的条目顺序很重要，因为Manifest文件常需放在首位。JAR文件内的文件名是Unicode文本。</p><h4 id="_2-java包解析" tabindex="-1"><a class="header-anchor" href="#_2-java包解析" aria-hidden="true">#</a> 2. Java包解析</h4><p>我们自己写的Java代码编译成的是class文件，把多个class文件进行打包，就成了一个jar包，jar包其实就是class文件的集合，多个jar包放到一起我们就称之为组件（组件也可以理解为工具类）工具类可以辅助我们进行开发。</p><h4 id="_3-jar包与zip包" tabindex="-1"><a class="header-anchor" href="#_3-jar包与zip包" aria-hidden="true">#</a> 3. Jar包与zip包</h4><p>jar 与 zip 唯一的区别就是在 jar 文件的内容中，包含了一个 META-INF/MANIFEST.MF 文件，该文件是在生成 jar 文件的时候自动创建的，作为jar里面的&quot;详情单&quot;，包含了该Jar包的版本、创建人和类搜索路径Class-Path等信息，当然如果是可执行Jar包，会包含Main-Class属性，表明Main方法入口，尤其是较为重要的Class-Path和Main-Class。</p><h4 id="_4-jar包的内容" tabindex="-1"><a class="header-anchor" href="#_4-jar包的内容" aria-hidden="true">#</a> 4. Jar包的内容</h4><p>jar包主要是对class文件进行打包，而非.java文件。</p><p>java编译生成的class文件是平台无关的，这就意味着jar包是跨平台的，所以不必关心涉及具体平台的问题。</p><p>除了class外，还有其他的元数据文件、资源文件等。</p><h4 id="_5-jar包签名" tabindex="-1"><a class="header-anchor" href="#_5-jar包签名" aria-hidden="true">#</a> 5. Jar包签名</h4><p>可以对 JAR 文件内容加上数字化签名。这样，能够识别签名的工具就可以有选择地为您授予软件安全特权，这是其他文件做不到的，它还可以检测代码是否被篡改过。</p><h4 id="_6-jar包的作用" tabindex="-1"><a class="header-anchor" href="#_6-jar包的作用" aria-hidden="true">#</a> 6. Jar包的作用</h4><ul><li>用于发布和使用类库</li><li>作为应用程序和扩展的构建单元</li><li>作为组件、applet 或者插件程序的部署单位</li><li>用于打包与组件相关联的辅助资源</li></ul><h4 id="_7-为什么要打jar包" tabindex="-1"><a class="header-anchor" href="#_7-为什么要打jar包" aria-hidden="true">#</a> 7. 为什么要打jar包</h4><h5 id="_7-1-发布和使用类库" tabindex="-1"><a class="header-anchor" href="#_7-1-发布和使用类库" aria-hidden="true">#</a> 7.1 发布和使用类库</h5><p>当我们开发了一个程序以后，程序中有很多的类，如果需要提供给别人使用,发给对方一大堆源文件是非常不好的，因此通常需要把这些类以及相关的资源文件打包成一个 jar 包,把这个 jar 包提供给别人使用,同时提供给使用者清晰的文档。这样他人在拿到我们提供的jar之后，就能方便地进行调用。而且安全。能够对JAR文件进行数字签名，只让能够识别数字签名的用户使用里面的东西。</p><h5 id="_7-2-util类库" tabindex="-1"><a class="header-anchor" href="#_7-2-util类库" aria-hidden="true">#</a> 7.2 util类库</h5><p>建议平时写代码时，将代码中的通用部分抽离出来，逐渐积累一些通用的util类（工具类），并逐渐将其模块模块化，最后打成jar包在项目或模块中使用。<br> 积累jar包的过程也会考验代码的重构能力和模块的抽象能力。</p><h2 id="ii-使用jar包" tabindex="-1"><a class="header-anchor" href="#ii-使用jar包" aria-hidden="true">#</a> Ⅱ. 使用Jar包</h2><h4 id="_1-使用java内置的jar包" tabindex="-1"><a class="header-anchor" href="#_1-使用java内置的jar包" aria-hidden="true">#</a> 1. 使用Java内置的Jar包</h4><p>使用java自带jar包：也称基础类库，又分两类分别存放在两个地方</p><ul><li>一是在java安装目录的jre\\lib下，用于已发布的软件运行时调用，可称为jvm环境</li><li>二是在java安装目录的jdk\\jre\\lib下，用于开发时调试软件调用，可称为开发环境</li></ul><p>在自己新建的项目工程中，基础类库下的类不用导包，即不用手动import，系统默认导入，System、Exception、Math、String，都属于java.lang包下，无需import操作。</p><h4 id="_2-打jar包" tabindex="-1"><a class="header-anchor" href="#_2-打jar包" aria-hidden="true">#</a> 2. 打Jar包</h4><h5 id="_2-1-手动打" tabindex="-1"><a class="header-anchor" href="#_2-1-手动打" aria-hidden="true">#</a> 2.1 手动打</h5><ul><li>先使用javac编译java文件，得到class文件，</li><li>创建manifest：内容如下</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Manifest</span><span class="token operator">-</span><span class="token class-name">Version</span><span class="token operator">:</span> <span class="token number">1.0</span>
<span class="token class-name">Main</span><span class="token operator">-</span><span class="token class-name">Class</span><span class="token operator">:</span> addJarPkg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>把编译好的class文件和manifest文件放入指定文件夹，如test</li><li>在cmd中运行命令</li></ul><div class="language-base line-numbers-mode" data-ext="base"><pre class="language-base"><code>jar -cvfm main.jar mainfest -C test.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-2-使用idea" tabindex="-1"><a class="header-anchor" href="#_2-2-使用idea" aria-hidden="true">#</a> 2.2 使用IDEA</h5><ul><li>点击项目-&gt;点击“File”菜单 -&gt; Project Structure</li><li>点击&quot;Artifacts&quot; -&gt; 绿色的&quot;+&quot; -&gt; “JAR” -&gt; Empty</li></ul><p>Name栏填入自定义的名字，Output ditectory选择jar包目标目录，Available Elements里双击需要添加到jar包的文件，即可添加到左边的jar包目录下，具体看下图</p><figure><img src="`+s+'" alt="6-1-1" tabindex="0" loading="lazy"><figcaption>6-1-1</figcaption></figure><ul><li>点击Create Manifest，选择放置MANIFEST.MF的文件路径（直接默认项目根目录就行，尽量不要选别的路径，可能会造成不必要的错误），点击OK。</li><li>点击Main Class后面选择按钮</li><li>弹出框中选择需要运行程序入口main函数，点击OK</li><li>以上设置完之后，点击OK</li><li>点击菜单中“Build” -&gt; “Build Artifacts”<br> -双击弹出框中待生成jar包下面的build即可</li></ul><h4 id="_3-添加jar包依赖" tabindex="-1"><a class="header-anchor" href="#_3-添加jar包依赖" aria-hidden="true">#</a> 3. 添加Jar包依赖</h4><div class="hint-container tip"><p class="hint-container-title">提示</p><p>实际开发中都是使用Maven添加的。</p></div><p>手动添加方式：暂略。</p><h2 id="iii-jar包和war包" tabindex="-1"><a class="header-anchor" href="#iii-jar包和war包" aria-hidden="true">#</a> Ⅲ. Jar包和war包</h2><h4 id="_1-war包介绍" tabindex="-1"><a class="header-anchor" href="#_1-war包介绍" aria-hidden="true">#</a> 1. war包介绍</h4><p>war是一个可以直接运行的web模块，通常应用于web项目中，将其打成war包部署到Tomcat等容器中。将war包放置在tomcat根目录的webapps目录下，如果Tomcat成功启动，这个包就会自动解压，就相当于发布了。</p><h4 id="_2-jar包与war包的对比" tabindex="-1"><a class="header-anchor" href="#_2-jar包与war包的对比" aria-hidden="true">#</a> 2. jar包与war包的对比</h4><p>除了目录结构外，jar里有的war里也都有。</p><ul><li>war包是Sun提出的一种web应用程序格式，与jar类似，是很多文件的压缩包。war包中的文件按照一定目录结构来组织。根据其根目录下包含有html和jsp文件，或者包含有这两种文件的目录，另外还有WEB-INF目录。</li><li>通常在WEB-INF目录下含有一个web.xml文件和一个classes目录，web.xml是这个应用的配置文件，而classes目录下则包含编译好的servlet类和jsp，或者servlet所依赖的其他类（如JavaBean）。</li><li>这些所依赖的类也可以打包成jar包放在WEB-INF下的lib目录下。这也就意味着，war能打包的内容，jar也都可以。</li></ul><h4 id="_3-jar包和war包使用" tabindex="-1"><a class="header-anchor" href="#_3-jar包和war包使用" aria-hidden="true">#</a> 3. jar包和war包使用</h4><p>对于现今的应用来讲，主流都是用jar来替代war了。因为war仅服务于Web应用，而jar的涵盖范围更广。目前，war相较于jar的唯一优势在于，当tomcat的进程启动之后，将符合规范的war包放在tomcat的webapps目录下的时候，tomcat会自动将war包解压并对外提供web服务，而jar包则不行。</p><h4 id="_4-微服务" tabindex="-1"><a class="header-anchor" href="#_4-微服务" aria-hidden="true">#</a> 4. 微服务</h4><p>过去由于并未通过微服务将机器资源进行隔离，因此提倡的是一个tomcat实例管理多个java web项目，因此对于java web项目，都提倡将其打成war包然后放置于同一个tomcat的webapps下进行管理，便于资源的统一利用。</p><p>随着微服务成为主流，同一台机器上的多个web服务可以通过docker等容器进行隔离，因此我们可以让每个容器都单独运行一个tomcat实例，每个tomcat实例独立运行一个web服务，换句话说，我们可以像springboot一样，将tomcat和web项目打成jar放在一起，以内嵌的方式来启动web服务，使得所有服务的启动方式更优雅和统一，不管是Web服务还是后台服务，均使用java -jar指令来启动。</p><h2 id="iv-maven" tabindex="-1"><a class="header-anchor" href="#iv-maven" aria-hidden="true">#</a> Ⅳ. Maven</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Maven是包管理器，实际开发中，都是使用Maven来管理包的。</p><p>详见：框架&gt;Maven</p></div>',53),l=[t];function d(h,c){return e(),r("div",null,l)}const o=a(n,[["render",d],["__file","6-1.Jar包.html.vue"]]);export{o as default};
