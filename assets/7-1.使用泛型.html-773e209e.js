import{_ as n,o as s,c as a,e as t}from"./app-cd3300e3.js";const p="/java-doc/img/java/javase/7-1-1.jpg",e="/java-doc/img/java/javase/7-1-2.jpg",c={},o=t('<h2 id="i-generic-泛型" tabindex="-1"><a class="header-anchor" href="#i-generic-泛型" aria-hidden="true">#</a> Ⅰ. Generic 泛型</h2><h4 id="意义" tabindex="-1"><a class="header-anchor" href="#意义" aria-hidden="true">#</a> 意义</h4><p>我们在定义数据类型时，有时不确定究竟定义为何种类型，以前的做法是定义为Object，这样什么类型的数据都支持。但是这样做，比较危险（类型错误），且麻烦（经常需要强制类型转换）。现在我们可以定义一个泛型，用一个符占位表示，可以在实例化时传递一个数据类型，这样在实际使用时，就可以确定他的数据类型了。</p><p>核心：数据类型，先占位，用的时候再定义。</p><p>使用泛型的主要优点是能够在编译时而不是在运行时检测错误。</p><h4 id="_1-泛型的设计背景" tabindex="-1"><a class="header-anchor" href="#_1-泛型的设计背景" aria-hidden="true">#</a> 1. 泛型的设计背景</h4><p>集合容器类在设计阶段/声明阶段不能确定这个容器到底实际存的是什么类型的对象，所以在JDK1.5之前只能把元素类型设计为Object。JDK1.5之后使用泛型来解决。因为这个时候除了元素的类型不确定，其他的部分是确定的，例如关于这个元素如何保存，如何管理等是确定的，因此此时把元素的类型设计成一个参数，这个类型参数叫做泛型。</p><h4 id="_2-泛型的概念" tabindex="-1"><a class="header-anchor" href="#_2-泛型的概念" aria-hidden="true">#</a> 2. 泛型的概念</h4><p>所谓泛型，就是允许在定义类、接口时通过一个标识表示类中某个属性的类型或者是某个方法的返回值及参数类型。这个类型参数将在使用时（例如，继承或实现这个接口，用这个类型声明变量、创建对象时）确定（即传入实际的类型参数，也称为类型实参）。</p><ul><li>参数化类型：从JDK1.5以后，Java引入了“参数化类型（Parameterized type）”的概念，允许我们在创建集合时再指定集合元素的类型，如：<code>List&lt;String&gt;</code>，这表明该List只能保存字符串类型的对象。</li><li>泛型的发展：JDK1.5改写了集合框架中的全部接口和类，为这些接口、类增加了泛型支持，从而可以在声明集合变量、创建集合对象时传入类型实参。集合也是泛型使用最多的场景。</li></ul><h4 id="_3-为什么要有泛型" tabindex="-1"><a class="header-anchor" href="#_3-为什么要有泛型" aria-hidden="true">#</a> 3. 为什么要有泛型</h4><p>那么为什么要有泛型呢 ，直接Object 不是也可以存储数据吗 ？</p><h5 id="_3-1-解决元素安全性问题" tabindex="-1"><a class="header-anchor" href="#_3-1-解决元素安全性问题" aria-hidden="true">#</a> 3.1 解决元素安全性问题</h5><p>解决元素存储的安全性问题，好比商品、药品标签，不会弄错。</p><h5 id="_3-2-解决获取元素时强制类型转换的问题" tabindex="-1"><a class="header-anchor" href="#_3-2-解决获取元素时强制类型转换的问题" aria-hidden="true">#</a> 3.2 解决获取元素时强制类型转换的问题</h5><p>解决获取数据元素时，需要类型强制转换的问题，好比不用每回拿商品、药品都要辨别。</p><p>Java泛型可以保证如果程序在编译时没有发出警告，运行时就不会产生<br> ClassCastException异常。同时，代码更加简洁、健壮。</p><h4 id="_4-集合中的泛型" tabindex="-1"><a class="header-anchor" href="#_4-集合中的泛型" aria-hidden="true">#</a> 4. 集合中的泛型</h4><p>泛型主要用于集合，也可以用于自定义类。</p><h5 id="_4-1-没有泛型时" tabindex="-1"><a class="header-anchor" href="#_4-1-没有泛型时" aria-hidden="true">#</a> 4.1 没有泛型时</h5><figure><img src="'+p+'" alt="7-1-1" tabindex="0" loading="lazy"><figcaption>7-1-1</figcaption></figure><h5 id="_4-2-有泛型时" tabindex="-1"><a class="header-anchor" href="#_4-2-有泛型时" aria-hidden="true">#</a> 4.2 有泛型时</h5><figure><img src="'+e+`" alt="7-1-2" tabindex="0" loading="lazy"><figcaption>7-1-2</figcaption></figure><h4 id="_5-不使用泛型的缺点" tabindex="-1"><a class="header-anchor" href="#_5-不使用泛型的缺点" aria-hidden="true">#</a> 5. 不使用泛型的缺点</h4><p>以ArrayList集合为例，假设我们的集合需要存放学生的成绩（int）。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ArrayList</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//需求：存放学生的成绩</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">78</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">76</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">89</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//问题一：类型不安全，Tom不是int类型的</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Object</span> score <span class="token operator">:</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//问题二：强转时，可能出现ClassCastException，某个值不是int</span>
    <span class="token comment">//问题二+：每次都要强转，比较繁琐</span>
    <span class="token keyword">int</span> stuScore <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> score<span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stuScore<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-集合中使用泛型" tabindex="-1"><a class="header-anchor" href="#ii-集合中使用泛型" aria-hidden="true">#</a> Ⅱ. 集合中使用泛型</h2><h4 id="_1-使用示例-list集合" tabindex="-1"><a class="header-anchor" href="#_1-使用示例-list集合" aria-hidden="true">#</a> 1. 使用示例：List集合</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1.实例化ArrayList类时，可以指定泛型</span>
<span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//2.add方法是有泛型限制的，String类型添加失败</span>
<span class="token comment">//泛型的类型检查，在编译时就会进行，保证了数据安全</span>
<span class="token comment">//list.add(&quot;tom&quot;);</span>

<span class="token comment">//3.进行遍历</span>
<span class="token comment">//3.1-1 这里可以直接指定泛型类型，而不是用Object</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> num<span class="token operator">:</span>list<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//3.1-2 不用进行强转</span>
    <span class="token class-name">Integer</span> n <span class="token operator">=</span> num<span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//3.2-1 创建迭代器时，也会使用泛型</span>
<span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//3.2-2 不用进行强转了</span>
    <span class="token class-name">Integer</span> n <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-使用示例-map集合" tabindex="-1"><a class="header-anchor" href="#_2-使用示例-map集合" aria-hidden="true">#</a> 2. 使用示例：Map集合</h4><p>注意：Map集合是K-V 数据结构，因此规定了两个泛型</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1.实例化HashMap类时，指定了Key和Value的泛型</span>
<span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Jerry&quot;</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Jinno&quot;</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//2.put方法是有泛型限制的，错误的类型添加失败</span>
<span class="token comment">//map.put(20,&quot;jinno&quot;);</span>

<span class="token comment">//3.泛型的嵌套:entrySet方法得到的是一个嵌套的泛型</span>
<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//4.Iterator方法也得到了了嵌套的泛型</span>
<span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//5.嵌套的泛型成为了数据类型</span>
    <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> e <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//6.这里省去了类型强转</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Integer</span> value <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">&quot;---&gt;&quot;</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-使用总结" tabindex="-1"><a class="header-anchor" href="#_3-使用总结" aria-hidden="true">#</a> 3. 使用总结</h4><ul><li>集合类的泛型 <ul><li>集合接口或集合类在jdk5.0时都修改为带泛型的结构，因此我们在使用的时候可以指定泛型。</li><li>在类的定义时，没有指定泛型，用的时候就不能指定。</li></ul></li><li>指定泛型 <ul><li>在实例化集合类时，可以指明具体的泛型类型。</li><li>一旦指明后，在集合类或接口中凡是定义类或接口时，内部结构（比如：方法、构造器、属性等）使用到类的泛型的位置，都指定为实例化的泛型类型。</li><li>这些内部结构也都受到泛型的约束。</li></ul></li><li>泛型的类型 <ul><li>泛型的类型必须是类，不能是基本数据类型。需要用到基本数据类型的位置，拿包装类替换</li><li>比如：int-&gt;Integer</li></ul></li><li>默认泛型 <ul><li>如果实例化时，没有指明泛型的类型。默认类型为java.lang.Object类型。</li></ul></li></ul>`,34),i=[o];function l(u,r){return s(),a("div",null,i)}const d=n(c,[["render",l],["__file","7-1.使用泛型.html.vue"]]);export{d as default};
