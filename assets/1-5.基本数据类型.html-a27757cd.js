import{_ as n,o as s,c as e,e as i}from"./app-889eb22c.js";const l="/java-doc/img/java/javase/1-5-1.jpg",o="/java-doc/img/java/javase/1-5-2.jpg",a="/java-doc/img/java/javase/1-5-3.jpg",p={},t=i('<h2 id="i-整形-4种" tabindex="-1"><a class="header-anchor" href="#i-整形-4种" aria-hidden="true">#</a> Ⅰ. 整形：4种</h2><h4 id="_1-说明" tabindex="-1"><a class="header-anchor" href="#_1-说明" aria-hidden="true">#</a> 1. 说明</h4><p>Java各整数类型有固定的表数范围和字段长度，不受具体OS的影响，以保证java程序的可移植性。<br> 四种整形仅仅是储存空间大小和表示的数据范围有区别。</p><h4 id="_2-四种整形的对比" tabindex="-1"><a class="header-anchor" href="#_2-四种整形的对比" aria-hidden="true">#</a> 2. 四种整形的对比</h4><p>通常定义整形变量时，使用int。</p><figure><img src="'+l+`" alt="1-5-1" tabindex="0" loading="lazy"><figcaption>1-5-1</figcaption></figure><h4 id="_3-注意事项" tabindex="-1"><a class="header-anchor" href="#_3-注意事项" aria-hidden="true">#</a> 3. 注意事项</h4><ul><li>给变量赋值时，如果值超过了变量类型规定的范围，将编译失败</li><li>声明long类型时，必须以“l&quot;或”L&quot;结尾。</li></ul><h4 id="_4-使用示例" tabindex="-1"><a class="header-anchor" href="#_4-使用示例" aria-hidden="true">#</a> 4. 使用示例</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">byte</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">short</span> pet <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">int</span>  houseNum <span class="token operator">=</span> <span class="token number">10000000000000000</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> money <span class="token operator">=</span> <span class="token number">146841646541651654681L</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-默认整形" tabindex="-1"><a class="header-anchor" href="#_5-默认整形" aria-hidden="true">#</a> 5. 默认整形</h4><p>java的整型常量默认为 int 型，java程序中变量通常声明为int型，除非不足以表示较大的数，才使用long</p><h2 id="ii-浮点类型-2种" tabindex="-1"><a class="header-anchor" href="#ii-浮点类型-2种" aria-hidden="true">#</a> Ⅱ. 浮点类型：2种</h2><h4 id="_1-说明-1" tabindex="-1"><a class="header-anchor" href="#_1-说明-1" aria-hidden="true">#</a> 1. 说明</h4><p>和整形类似，Java 浮点类型也有固定的表示范围和字段长度，不受具体操作系统的影响。</p><p>浮点型其实就是小数。</p><h4 id="_2-浮点型的两种表示方式" tabindex="-1"><a class="header-anchor" href="#_2-浮点型的两种表示方式" aria-hidden="true">#</a> 2. 浮点型的两种表示方式</h4><ul><li>十进制数形式：如：5.12 ；512.0f ；.512 (必须有小数点)</li><li>科学计数法形式：如：5.12e2； 512E2 ；100E-2</li></ul><h4 id="_3-两种浮点类型的对比" tabindex="-1"><a class="header-anchor" href="#_3-两种浮点类型的对比" aria-hidden="true">#</a> 3. 两种浮点类型的对比</h4><p>两种浮点类型只是表示的数据范围和精度不同。我们一般使用时选择double。</p><figure><img src="`+o+`" alt="1-5-2" tabindex="0" loading="lazy"><figcaption>1-5-2</figcaption></figure><ul><li>float: 单精度，尾数可以精确到7位有效数字。很多情况下，精度很难满足需求</li><li>double: 双精度，精度是float的两倍。通常采用此类型</li></ul><h4 id="_4-注意事项" tabindex="-1"><a class="header-anchor" href="#_4-注意事项" aria-hidden="true">#</a> 4. 注意事项</h4><p>定义float类型变量时，变量要以&quot;f&quot;或&quot;F&quot;结尾</p><h4 id="_5-使用示例" tabindex="-1"><a class="header-anchor" href="#_5-使用示例" aria-hidden="true">#</a> 5. 使用示例</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">float</span> f1 <span class="token operator">=</span> <span class="token number">23.23F</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token number">23.2321e12</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-底层说明" tabindex="-1"><a class="header-anchor" href="#_6-底层说明" aria-hidden="true">#</a> 6. 底层说明</h4><p>fload表示数据的数据范围比long还大，却只占用4个字节，为什么？</p><p>这跟fload表示数据的方式有关，如下图：</p><figure><img src="`+a+`" alt="1-5-3" tabindex="0" loading="lazy"><figcaption>1-5-3</figcaption></figure><p>第一个bit表示正负，第2~8个bit表示E指数，剩下的表示小数点。</p><h4 id="_7-知识补充-long类型为什么加l" tabindex="-1"><a class="header-anchor" href="#_7-知识补充-long类型为什么加l" aria-hidden="true">#</a> 7. 知识补充：long类型为什么加L</h4><p>java是需要手动分配内存空间，然后再进行储值的。我们定义变量时，就需要先定义变量类型，再初始化赋值。</p><p>当我们与常量数值进行运算时，这个数值我们没有定义容量，java要怎么分配内存呢？答案是，java提供了默认长度（int），按int长度分配内存。</p><p>因此当我们需要long类型的常量数值时，就需要加个L告诉java分配8个Byte的内存。而加L的操作也延续到了定义变量的时候。</p><p>float同理。</p><h2 id="iii-字符类型-char" tabindex="-1"><a class="header-anchor" href="#iii-字符类型-char" aria-hidden="true">#</a> Ⅲ. 字符类型：char</h2><h4 id="_1-说明-2" tabindex="-1"><a class="header-anchor" href="#_1-说明-2" aria-hidden="true">#</a> 1. 说明</h4><p>char 型数据用来表示通常意义上“字符”(2字节)。</p><p>这里的字符是任意语言的一个字，比如一个字母、一个汉字、一个片假名。</p><h4 id="_2-声明字符" tabindex="-1"><a class="header-anchor" href="#_2-声明字符" aria-hidden="true">#</a> 2. 声明字符</h4><p>需要使用单引号表示值（不能使用双引号，否则报错）。</p><p>字符类型只能是一个字符，超过一个字符会报错（字符类型不是字符串）。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token char">&#39;h&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-字符变量的三种表现形式" tabindex="-1"><a class="header-anchor" href="#_3-字符变量的三种表现形式" aria-hidden="true">#</a> 3. 字符变量的三种表现形式</h4><p>除了直接使用字符作为值外，还可以使用能表示字符的其他形式；</p><ul><li>普通字符：用单引号(<code>&#39;&#39;</code>)括起来的单个字符</li><li>转义字符：使用转义字符 <code>\\</code> 来将其后的字符转变为特殊字符型常量</li><li>Unicode：使用 Unicode 值来表示字符型常量</li><li>ASCII：直接使用整数ASCII码</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token char">&#39;帅&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span> <span class="token comment">//\\n:表示换行符</span>
<span class="token keyword">char</span> c3 <span class="token operator">=</span> <span class="token char">&#39;\\u0043&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> c4 <span class="token operator">=</span> <span class="token number">97</span><span class="token punctuation">;</span> <span class="token comment">//a,不推荐使用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-字符集介绍" tabindex="-1"><a class="header-anchor" href="#_4-字符集介绍" aria-hidden="true">#</a> 4. 字符集介绍</h4><p>计算机内部都是二进制的；我们输入的字符都是通过转码变成二进制让计算机识别的。<br><code>文字==字符集转码==&gt;计算机能够识别的二进制</code></p><p>转码就需要用到字符集了（密码本），针对不同的字符类型会有不同的字符集，常见的如下：</p><ul><li>ASCII：只能表示英文的编码集</li><li>Unicode：将世界所有字符都纳入其中，解决乱码问题。</li><li>UTF-8：真正实现了，将所有字符都纳入其中，是在互联网上使用最广的一种 Unicode 的实现方式。</li></ul><p>乱码：不同字符集编码的字符进行传输时，就会出现乱码（密码本不一样，解密解不出）。</p><p>转码：将一种字符集编码的字符转换成其他字符集编码的字符，如GBK转UTF-8.</p><h4 id="_5-注意事项" tabindex="-1"><a class="header-anchor" href="#_5-注意事项" aria-hidden="true">#</a> 5. 注意事项</h4><ul><li>char类型的值不能是空字符串（可以1个是空格）。</li><li>必须使用单引号，不能使用双引号。</li></ul><h2 id="iv-布尔类型-boolean" tabindex="-1"><a class="header-anchor" href="#iv-布尔类型-boolean" aria-hidden="true">#</a> Ⅳ. 布尔类型：boolean</h2><h4 id="_1-说明-3" tabindex="-1"><a class="header-anchor" href="#_1-说明-3" aria-hidden="true">#</a> 1. 说明</h4><p>boolean 类型用来判断逻辑条件，一般用于程序流程控制。</p><p>boolean类型数据只允许取值true和false，无null。</p><h4 id="_2-使用示例" tabindex="-1"><a class="header-anchor" href="#_2-使用示例" aria-hidden="true">#</a> 2. 使用示例</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> b2 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-注意" tabindex="-1"><a class="header-anchor" href="#_3-注意" aria-hidden="true">#</a> 3. 注意</h4><p>在java中，boolean只能用true和false表示。不可以使用0或非 0 的整数替代false和true，这点和C语言不同。</p><p>Java虚拟机中没有任何供boolean值专用的字节码指令，Java语言表达所操作的boolean值，在编译之后都使用java虚拟机中的int数据类型来代替：true用1表示，false用0表示。</p><h2 id="v-类型间的转换" tabindex="-1"><a class="header-anchor" href="#v-类型间的转换" aria-hidden="true">#</a> Ⅴ. 类型间的转换</h2><h4 id="_1-不同类型之间的运算" tabindex="-1"><a class="header-anchor" href="#_1-不同类型之间的运算" aria-hidden="true">#</a> 1. 不同类型之间的运算</h4><p>除了boolean类型外，其他7种基本数据类型是可以互相运算的。</p><p>boolean只能取true和false没法参加运算；char是通过转为ASCII码进行运算的。</p><h4 id="_2-自动类型提升" tabindex="-1"><a class="header-anchor" href="#_2-自动类型提升" aria-hidden="true">#</a> 2. 自动类型提升</h4><p>自动类型转换：容量小的类型自动转换为容量大的数据类型</p><figure><img src="`+a+`" alt="1-5-3" tabindex="0" loading="lazy"><figcaption>1-5-3</figcaption></figure><p>有多种类型的数据混合运算时，系统首先自动将所有数据转换成容量最大的那种数据类型，然后再进行计算（接收结果的变量也要定义成相应的数据类型）。</p><h5 id="_2-1-运算的规则" tabindex="-1"><a class="header-anchor" href="#_2-1-运算的规则" aria-hidden="true">#</a> 2.1 运算的规则</h5><p>当两个不同的数据类型之间进行运算时，必须使用较大的数据类型进行接收，不然就无法编译（这里的大指的是表示的数据范围大小，float就比long要大）。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> i2 <span class="token operator">=</span> b1 <span class="token operator">+</span> i1<span class="token punctuation">;</span> <span class="token comment">//使用较大的数据类型进行接收</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-2-特殊情况" tabindex="-1"><a class="header-anchor" href="#_2-2-特殊情况" aria-hidden="true">#</a> 2.2 特殊情况</h5><ul><li>当byte、char、short三种类型的变量做运算时，结果必须为int型。</li><li>char会转为整形的ASCII进行运算。</li><li>有浮点型参与的运算，即使是整数，也会出现小数点</li></ul><h5 id="_2-3-示例" tabindex="-1"><a class="header-anchor" href="#_2-3-示例" aria-hidden="true">#</a> 2.3 示例</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span> <span class="token comment">//97</span>
<span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> i1 <span class="token operator">=</span> c1 <span class="token operator">+</span> b1<span class="token punctuation">;</span> <span class="token comment">//107</span>

<span class="token keyword">int</span> i2 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> d1 <span class="token operator">=</span> i2<span class="token punctuation">;</span> <span class="token comment">//赋值;此时变成了 100.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-数值常量的默认数据类型" tabindex="-1"><a class="header-anchor" href="#_3-数值常量的默认数据类型" aria-hidden="true">#</a> 3. 数值常量的默认数据类型</h4><p>对于一个数值常量，他有自己默认的数据类型：</p><ul><li>整型常量：默认类型为int</li><li>浮点常量：默认为double<br> 当数值常量参与运算的时候，接收的值数据类型不能小于数值常量的数据类型。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//12是个整数常量，默认是int类型，进行计算时，必须用int类型接收。</span>
<span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span> b1 <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token number">12</span> <span class="token comment">//报错，应该用int类型接收</span>

<span class="token comment">//10.1是浮点数常量，默认是double类型的。</span>
<span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> f1 <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token number">10.1</span><span class="token punctuation">;</span> <span class="token comment">//编译失败，应该用double类型接收</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-不加l和f发生的自动类型转换" tabindex="-1"><a class="header-anchor" href="#_4-不加l和f发生的自动类型转换" aria-hidden="true">#</a> 4. 不加L和F发生的自动类型转换</h4><p>为long类型赋值时，值的末尾要L，但不加L有时会报错，有时不会报错；为什么？</p><ul><li>没有加L时，默认数值是int类型的，如果值超过了int的范围，就直接报错（报错的情况）</li><li>如果没有超过int的范围，赋值的过程就自动发生了变量提升（不报错的情况）。</li></ul><p>float同理</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//示例1：为long型变量赋值，没加L，默认为int</span>
<span class="token keyword">long</span> l1 <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span> <span class="token comment">//编译正常</span>

<span class="token comment">//示例2：long型没有加L，则取默认的int型，但该值超过了int范围，故报错</span>
<span class="token keyword">long</span> l2 <span class="token operator">=</span> <span class="token number">21323232323232332323</span><span class="token punctuation">;</span> <span class="token comment">//编译报错</span>

<span class="token comment">//示例3：提供的值没有加F，因此默认是double类型，double类型赋值给float会报错</span>
<span class="token keyword">float</span> f1 <span class="token operator">=</span> <span class="token number">12.3</span><span class="token punctuation">;</span> <span class="token comment">//编译报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-强制类型转换" tabindex="-1"><a class="header-anchor" href="#_5-强制类型转换" aria-hidden="true">#</a> 5. 强制类型转换</h4><p>自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使用时要加上强制转换符：<code>()</code>，但可能造成精度降低或溢出。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token number">2302323.123</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>d1<span class="token punctuation">;</span> <span class="token comment">//结果：2302323；截断操作</span>

<span class="token keyword">int</span> i2 <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>i2<span class="token punctuation">;</span> <span class="token comment">//结果：-128；溢出，发生了二进制运算</span>

<span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
b <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">//报错</span>
b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//OK</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：boolean类型不可以转换为其它的数据类型。</p><h2 id="vi-进制问题" tabindex="-1"><a class="header-anchor" href="#vi-进制问题" aria-hidden="true">#</a> Ⅵ. 进制问题</h2><h4 id="_1-表示方法" tabindex="-1"><a class="header-anchor" href="#_1-表示方法" aria-hidden="true">#</a> 1. 表示方法</h4><ul><li>二进制：以0b或0B开头</li><li>八进制：以数字0开头表示</li><li>十六进制： 以0x或0X开头表示，a-f不区分大小写</li></ul><h4 id="_2-符号位" tabindex="-1"><a class="header-anchor" href="#_2-符号位" aria-hidden="true">#</a> 2. 符号位</h4><p>储存数据时，专门有一位来储存数据的正负。</p><p>符号位在最高位，0表示整数，1表示负数。</p><h4 id="_3-原码、反码、补码" tabindex="-1"><a class="header-anchor" href="#_3-原码、反码、补码" aria-hidden="true">#</a> 3. 原码、反码、补码</h4><p>二进制的整数有如下三种形式【在计算机底层，都已补码的方式来存储数据】。</p><ul><li>原码：直接将一个数值换成二进制数。最高位是符号位【用最高位表示正负，其余表示值】</li><li>反码：正数的反码是其本身；负数的反码是源码基础上，符号位不变，其余各个位取反（1,0互换）</li><li>补码：正数的补码就是其本身；负数的补码是在其源码的基础上，符号位不变，区域各位取反，最后+1（==反码+1）</li></ul><p>三个码的意义：<br> 计算机辨别“符号位”显然会让计算机的基础电路设计变得十分复杂! 于是人们想出了将符号位也参与运算的方法. 我们知道, 根据运算法则减去一个正数等于加上一个负数, 即: <code>1-1 = 1 + (-1) = 0</code> , 所以机器可以只有加法而没有减法, 这样计算机运算的设计就更简单了。</p><p><code>1-1 = 1 + (-1) = [0000 0001]原 + [1000 0001]原 = [0000 0001]补 + [1111 1111]补 = [0000 0000]补=[0000 0000]原</code></p><h4 id="_4-进制转换" tabindex="-1"><a class="header-anchor" href="#_4-进制转换" aria-hidden="true">#</a> 4. 进制转换</h4><ul><li>二进制《=》十进制 <ul><li>二进制转成十进制： 乘以2的幂数</li><li>十进制转成二进制：除以2 取余数</li></ul></li><li>二进制《=》八进制 <ul><li>二进制转八进制：三个位加起来作为一个位</li><li>八进制转二进制：一个位分解成3个位表示</li></ul></li><li>二进制《=》十六进制 <ul><li>同上，变成了1:4的转换</li></ul></li></ul>`,106),r=[t];function c(d,u){return s(),e("div",null,r)}const k=n(p,[["render",c],["__file","1-5.基本数据类型.html.vue"]]);export{k as default};
