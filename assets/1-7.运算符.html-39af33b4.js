import{_ as a,o as n,c as s,e}from"./app-5ca20126.js";const p="/java-doc/img/java/javase/1-7-1.jpg",t="/java-doc/img/java/javase/1-7-2.jpg",o="/java-doc/img/java/javase/1-7-3.jpg",i="/java-doc/img/java/javase/1-7-4.jpg",c="/java-doc/img/java/javase/1-7-5.jpg",l={},r=e('<h2 id="i-算术运算符" tabindex="-1"><a class="header-anchor" href="#i-算术运算符" aria-hidden="true">#</a> Ⅰ. 算术运算符</h2><figure><img src="'+p+`" alt="1-7-1" tabindex="0" loading="lazy"><figcaption>1-7-1</figcaption></figure><h4 id="_1-除号运算的细节" tabindex="-1"><a class="header-anchor" href="#_1-除号运算的细节" aria-hidden="true">#</a> 1. 除号运算的细节</h4><p>两个int类型相除，结果一定是个int类型（舍去小数位），即便用double类型接收，也是int类型的结果转为了double，小数位的值，还是被舍弃了，如果想保留小数位，则需要运算时就进行类型转换。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> result <span class="token operator">=</span> n1<span class="token operator">/</span>n2<span class="token punctuation">;</span><span class="token comment">//2, n1/n2的结果是int类型的，没有小数位</span>
<span class="token keyword">double</span> result <span class="token operator">=</span> n1<span class="token operator">/</span>n2<span class="token punctuation">;</span><span class="token comment">//2.0,只是将int类型的结果2.0类型转换成了double</span>
<span class="token keyword">double</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>num1<span class="token operator">/</span>num2<span class="token punctuation">;</span><span class="token comment">//2.4</span>
<span class="token keyword">double</span> result <span class="token operator">=</span> <span class="token punctuation">(</span>num1<span class="token operator">+</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token operator">/</span>num2<span class="token punctuation">;</span><span class="token comment">//2.4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-取模的细节" tabindex="-1"><a class="header-anchor" href="#_2-取模的细节" aria-hidden="true">#</a> 2. 取模的细节</h4><p>结果的符号与被膜数的符号形同。取模一般用来判断是否能除尽。</p><h4 id="_3-自增、自减的细节" tabindex="-1"><a class="header-anchor" href="#_3-自增、自减的细节" aria-hidden="true">#</a> 3. 自增、自减的细节</h4><ul><li>(前)++ :先自增1，后运算</li><li>(后)++ :先运算，后自增1</li><li>(前)-- :先自减1，后运算</li><li>(后)-- :先运算，后自减1</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> a1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> a2 <span class="token operator">=</span> <span class="token operator">++</span>a1<span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//11,11</span>
<span class="token keyword">int</span> b1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> b2 <span class="token operator">=</span> b1<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//b1先取10，赋值给b2,然后才自增的</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">,</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//11,10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自增、自减不会改变数据类型</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">short</span> s1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
s1 <span class="token operator">=</span> s1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//编译失败，s1是sort类型的，无法接收int类型的1</span>
s1<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//正确，自增不会改变变量的数据类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-赋值运算符" tabindex="-1"><a class="header-anchor" href="#ii-赋值运算符" aria-hidden="true">#</a> Ⅱ. 赋值运算符</h2><h4 id="_1-赋值运算符" tabindex="-1"><a class="header-anchor" href="#_1-赋值运算符" aria-hidden="true">#</a> 1. <code>==</code> 赋值运算符</h4><p>支持连续赋值</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> i1<span class="token punctuation">,</span>i2<span class="token punctuation">;</span> 
i1 <span class="token operator">=</span> i2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> i3 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> i4 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-扩展赋值运算符" tabindex="-1"><a class="header-anchor" href="#_2-扩展赋值运算符" aria-hidden="true">#</a> 2. 扩展赋值运算符</h4><p><code>+=, -=, *=, /=, %=</code> 先运算再把结果进行赋值；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
i1 <span class="token operator">+=</span> <span class="token number">5</span><span class="token comment">// i1 = i1 + 5;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-数据类型不改变" tabindex="-1"><a class="header-anchor" href="#_3-数据类型不改变" aria-hidden="true">#</a> 3. 数据类型不改变</h4><p>与自增自减一样，扩展赋值运算符，不会改变变量本身的数据类型；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">short</span> s1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
s1 <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//12,不会报错，变量本身的数据类型没有发生改变</span>
<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
i <span class="token operator">*=</span> <span class="token number">0.1</span><span class="token punctuation">;</span> <span class="token comment">//0;不会改变变量类型，所以结果是0.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-开发中的选择" tabindex="-1"><a class="header-anchor" href="#_4-开发中的选择" aria-hidden="true">#</a> 4. 开发中的选择</h4><p>因为扩展赋值运算符不会改变变量的类型，所以在开发中，优先选择他来替代算数运算符。</p><h2 id="iii-比较运算符" tabindex="-1"><a class="header-anchor" href="#iii-比较运算符" aria-hidden="true">#</a> Ⅲ. 比较运算符</h2><h4 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述" aria-hidden="true">#</a> 1. 概述</h4><p>比较运算符的结果都是boolean型，也就是要么是true，要么是false。</p><p>注意：比较运算符 <code>==</code> 不能误写成 <code>=</code>。</p><h4 id="_2-使用细节" tabindex="-1"><a class="header-anchor" href="#_2-使用细节" aria-hidden="true">#</a> 2. 使用细节</h4><p>比较运算符不能连续使用；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">&lt;</span>a<span class="token operator">&lt;=</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token constant">XXX</span> <span class="token punctuation">;</span><span class="token comment">//这种写法是错误的</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">&lt;</span>a <span class="token operator">&amp;&amp;</span> a<span class="token operator">&lt;=</span><span class="token number">20</span><span class="token punctuation">)</span> √<span class="token punctuation">;</span><span class="token comment">//正确的写法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iv-逻辑运算符" tabindex="-1"><a class="header-anchor" href="#iv-逻辑运算符" aria-hidden="true">#</a> Ⅳ. 逻辑运算符</h2><figure><img src="`+t+'" alt="1-7-2" tabindex="0" loading="lazy"><figcaption>1-7-2</figcaption></figure><h4 id="_1-概述-1" tabindex="-1"><a class="header-anchor" href="#_1-概述-1" aria-hidden="true">#</a> 1. 概述</h4><ul><li><code>&amp;</code>: 逻辑与</li><li><code>|</code>: —逻辑或</li><li><code>!</code>: 逻辑非</li><li><code>&amp;&amp;</code>: 短路与</li><li><code>||</code>: 短路或</li><li><code>^</code>: 逻辑异或</li></ul><h4 id="_2-使用" tabindex="-1"><a class="header-anchor" href="#_2-使用" aria-hidden="true">#</a> 2. 使用</h4><p>逻辑运算符用于连接布尔型表达式，在Java中不可以写成<code>3&lt;x&lt;6</code>，应该写成<code>x&gt;3 &amp; x&lt;6</code> 。</p><h4 id="_3-短路情况" tabindex="-1"><a class="header-anchor" href="#_3-短路情况" aria-hidden="true">#</a> 3. 短路情况</h4><p>开发中，优先使用短路的&amp;和|</p><ul><li>“&amp;”和“&amp;&amp;”的区别：单&amp;时，左边无论真假，右边都进行运算；双&amp;时，如果左边为真，右边参与运算，如果左边为假，那么右边不参与运算。</li><li>“|”和“||”的区别同理，||表示：当左边为真，右边不参与运算。</li></ul><h2 id="v-位运算符" tabindex="-1"><a class="header-anchor" href="#v-位运算符" aria-hidden="true">#</a> Ⅴ. 位运算符</h2><p>仅了解，Java源码中会用到。</p><h4 id="_1-概述-2" tabindex="-1"><a class="header-anchor" href="#_1-概述-2" aria-hidden="true">#</a> 1. 概述</h4><p>位运算符，就是在内存上进行的二进制bit位的运算。【只支持数值类型】</p><figure><img src="'+o+'" alt="1-7-3" tabindex="0" loading="lazy"><figcaption>1-7-3</figcaption></figure><h4 id="_2-补位的细节" tabindex="-1"><a class="header-anchor" href="#_2-补位的细节" aria-hidden="true">#</a> 2. 补位的细节</h4><figure><img src="'+i+`" alt="1-7-4" tabindex="0" loading="lazy"><figcaption>1-7-4</figcaption></figure><h4 id="_3-细节补充" tabindex="-1"><a class="header-anchor" href="#_3-细节补充" aria-hidden="true">#</a> 3. 细节补充</h4><ul><li><code>&lt;&lt;</code> 左移：bit位向左移动，右边补0，每移动一位，相当于 乘了一次2。 <ul><li>如果最高位移动到了符号位，就会变成负数。（符号位是1，则变负数）</li></ul></li><li><code>&gt;&gt;</code> 右移：bit位向右移动，左边补位，如果符号位是1，就补1，是0就补0.</li><li><code>~</code> 取反 <ul><li>如下：底层表示-6，是以补码的形式，因此 <code>-6的反码 == -6的补码-1</code>（负数补码= 反码+1），所以6取反的结果是-7</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0110</span>  <span class="token comment">//6</span>
 <span class="token number">1000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0110</span> <span class="token comment">//-6的源码</span>
 <span class="token number">1111</span>  <span class="token number">1111</span>  <span class="token number">1111</span>  <span class="token number">1111</span>  <span class="token number">1111</span>  <span class="token number">1111</span> <span class="token number">1001</span> <span class="token comment">//-6的反码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vi-三元运算符" tabindex="-1"><a class="header-anchor" href="#vi-三元运算符" aria-hidden="true">#</a> Ⅵ. 三元运算符</h2><h4 id="_1-格式" tabindex="-1"><a class="header-anchor" href="#_1-格式" aria-hidden="true">#</a> 1. 格式</h4><p>条件表达式的结果为boolean类型； 根据条件表达式真或假，决定执行表达式1，还是表达式2</p><figure><img src="`+c+`" alt="1-7-5" tabindex="0" loading="lazy"><figcaption>1-7-5</figcaption></figure><h4 id="_2-使用说明" tabindex="-1"><a class="header-anchor" href="#_2-使用说明" aria-hidden="true">#</a> 2. 使用说明</h4><h5 id="_2-1-表达式1-和表达式2为-同种类型" tabindex="-1"><a class="header-anchor" href="#_2-1-表达式1-和表达式2为-同种类型" aria-hidden="true">#</a> 2.1 表达式1 和表达式2为 同种类型</h5><p>三元运算符的结果是要被变量接收的，接收的变量类型要与表达式结果的变量类型一致（或能自动转换）。所以也要求表达式1和表达式2的数据类型要一样。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token punctuation">(</span>m<span class="token operator">&gt;</span>n<span class="token punctuation">)</span><span class="token operator">?</span> m <span class="token operator">:</span> n<span class="token punctuation">;</span> <span class="token comment">//m</span>
<span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token punctuation">(</span>m<span class="token operator">&gt;</span>n<span class="token punctuation">)</span><span class="token operator">?</span> m <span class="token operator">:</span> <span class="token string">&quot;n大&quot;</span><span class="token punctuation">;</span> <span class="token comment">//报错，两个表达式类型不一致</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-2-三元运算符的嵌套" tabindex="-1"><a class="header-anchor" href="#_2-2-三元运算符的嵌套" aria-hidden="true">#</a> 2.2 三元运算符的嵌套</h5><p>三元运算符是可以嵌套使用的，比如计算两个值谁大，或者是相等</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> maxStr <span class="token operator">=</span> <span class="token punctuation">(</span>m <span class="token operator">&gt;</span> n<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token string">&quot;m大&quot;</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>m <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token string">&quot;m和n相等&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;n大&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-3-三元运算符与if-else" tabindex="-1"><a class="header-anchor" href="#_2-3-三元运算符与if-else" aria-hidden="true">#</a> 2.3 三元运算符与if-else</h5><p>凡是可以使用三元运算符的地方，都可以改写为if-else；<br> 如果程序既可以使用三元运算符，又可以使用if-else结构，那么优先选择三元运算符。</p><p>原因：简洁、执行效率高。</p><h2 id="vii-运算符优先级" tabindex="-1"><a class="header-anchor" href="#vii-运算符优先级" aria-hidden="true">#</a> Ⅶ. 运算符优先级</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>不用记，不确定的地方加（）就行了。</p></div>`,66),d=[r];function u(k,m){return n(),s("div",null,d)}const v=a(l,[["render",u],["__file","1-7.运算符.html.vue"]]);export{v as default};
