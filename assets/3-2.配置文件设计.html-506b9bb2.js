import{_ as a,o as n,c as s,e}from"./app-acd7cce4.js";const p="/java-doc/img/frame/springboot/3-2-1.png",i={},t=e(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>以下知识点仅做了解，实际开发时：</p><ul><li>采用多环境配置文件区分不同场景下的配置。</li><li>采用配置中心更新配置文件。</li></ul></div><h2 id="i-临时属性配置" tabindex="-1"><a class="header-anchor" href="#i-临时属性配置" aria-hidden="true">#</a> Ⅰ. 临时属性配置</h2><p>程序包打好以后，里面的配置都已经是固定的了，比如配置了服务器的端口是8080。</p><p>如果执行jar包时，发现端口被占用了，而占用端口的程序又不能关闭，这是该怎么办呢？要重新打包吗？</p><h4 id="_1-启动命令的临时属性" tabindex="-1"><a class="header-anchor" href="#_1-启动命令的临时属性" aria-hidden="true">#</a> 1. 启动命令的临时属性</h4><p>SpringBoot提供了临时属性的方式快速修改某些配置，在启动服务的时候，将配置作为参数添加即可。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-jar</span> blog.jar <span class="token parameter variable">--server.port</span><span class="token operator">=</span><span class="token number">81</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>语法</strong><br> 输入启动命令后，空一格输入两个<code>-</code>，然后按照 <code>属性名=属性值 </code>的方式添加参数（参数的键值对格式为properties），如果有多个属性要添加，按照上述格式继续写，属性与属性之间使用 <code>空格</code> 分隔。</p><h4 id="_2-属性加载的优先级" tabindex="-1"><a class="header-anchor" href="#_2-属性加载的优先级" aria-hidden="true">#</a> 2. 属性加载的优先级</h4><p>临时属性的优先级高于配置文件。</p><h4 id="_3-开发中使用临时属性" tabindex="-1"><a class="header-anchor" href="#_3-开发中使用临时属性" aria-hidden="true">#</a> 3. 开发中使用临时属性</h4><p>在IDEA中，也可以输入临时属性：<br> 点击右上角的SpringBoot引导类的运行界面，Program arguments就是输入临时属性的</p><p>注意：新版的IDEA默认是没有Program arguments选项框的，使用快捷键Alt m 可以添加隐藏的选项框。</p><figure><img src="`+p+`" alt="3-2-1" tabindex="0" loading="lazy"><figcaption>3-2-1</figcaption></figure><h4 id="_4-main的args参数" tabindex="-1"><a class="header-anchor" href="#_4-main的args参数" aria-hidden="true">#</a> 4. main的args参数</h4><p>启动项目时，SpringBoot会自动执行引导类的main方法，main方法再执行时，将args参数传递给了里面的run方法。</p><p>在Idea中配置的临时参数就是通过这个位置传递到我们的程序中的。<br> 如果将run方法的args删掉，Springboot项目依然能启动， 但是就无法使用临时属性了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SSMPApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SSMPApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不携带args参数，临时属性失效</span>
<span class="token punctuation">}</span>

<span class="token comment">//自定义临时属性</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    arg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;--server.port=8082&quot;</span><span class="token punctuation">;</span> <span class="token comment">//依然能够生效</span>
    <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SSMPApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-总结" tabindex="-1"><a class="header-anchor" href="#_5-总结" aria-hidden="true">#</a> 5. 总结</h4><div class="hint-container danger"><p class="hint-container-title">警告</p><p>临时属性一般不用，而是采用多个配置文件。</p></div><h2 id="ii-配置文件分类" tabindex="-1"><a class="header-anchor" href="#ii-配置文件分类" aria-hidden="true">#</a> Ⅱ. 配置文件分类</h2><p>开发中使用的配置文件与项目上线后的配置文件是有一定区别的。<br> 因此需要对配置文件分类，采用多个配置文件。</p><h4 id="_1-配置文件的级别" tabindex="-1"><a class="header-anchor" href="#_1-配置文件的级别" aria-hidden="true">#</a> 1. 配置文件的级别</h4><p>SpringBoot提供了四个级别的配置文件（级别指的是优先级）。<br> 其实就是四个配置文件书写的位置，不同的位置优先级不同。</p><ul><li>4级：类路径下配置文件（一直使用的是这个，resources/application.yml文件）【最低】</li><li>3级：类路径下config目录下配置文件，resource/config/application.yml</li><li>2级：程序包所在目录中配置文件</li><li>1级：程序包所在目录中config目录下配置文件【最高】</li></ul><h4 id="_2-使用场景" tabindex="-1"><a class="header-anchor" href="#_2-使用场景" aria-hidden="true">#</a> 2. 使用场景</h4><ul><li>1级与2级留做系统打包后设置通用属性，1级常用于运维经理进行线上整体项目部署方案调控</li><li>3级与4级用于系统开发阶段设置通用属性，3级常用于项目经理进行整体项目属性调控</li><li>项目类路径配置文件（4级）：服务于开发人员本机开发与测试</li><li>项目类路径config目录中配置文件（3级）：服务于项目经理整体调控</li><li>工程路径配置文件（2级）：服务于运维人员配置涉密线上环境</li><li>工程路径config目录中配置文件（1级）：服务于运维经理整体调控</li></ul><h4 id="_3-多层级配置文件的关系" tabindex="-1"><a class="header-anchor" href="#_3-多层级配置文件的关系" aria-hidden="true">#</a> 3. 多层级配置文件的关系</h4><p>不同配置相互叠加。<br> 相同配置，高优先级覆盖低优先级的。</p><h2 id="iii-自定义配置文件" tabindex="-1"><a class="header-anchor" href="#iii-自定义配置文件" aria-hidden="true">#</a> Ⅲ. 自定义配置文件</h2><p>配置文件名默认为：application.yml，这个名字是可以修改的。</p><h4 id="_1-应用场景" tabindex="-1"><a class="header-anchor" href="#_1-应用场景" aria-hidden="true">#</a> 1. 应用场景</h4><p>比如元旦做活动，需要修改服务器配置，1周后活动取消，这时候更新下配置文件即可。</p><p>我们不能再原始配置文件上修改，而是新建一个配置文件，方便维护。</p><h4 id="_2-配置方式" tabindex="-1"><a class="header-anchor" href="#_2-配置方式" aria-hidden="true">#</a> 2. 配置方式</h4><ul><li>使用临时属性设置配置文件名，注意仅仅是名称，不要带扩展名 <ul><li>properties与yml文件格式均支持：--spring.config.name=ebank</li></ul></li><li>使用临时属性设置配置文件路径，这个是全路径名 <ul><li>--spring.config.loaction=classpath:/ebank.properties</li></ul></li></ul><h4 id="_3-补充说明" tabindex="-1"><a class="header-anchor" href="#_3-补充说明" aria-hidden="true">#</a> 3. 补充说明</h4><p>现在写的SpringBoot项目都是单体项目（单服务器版本），企业开发时更多的是基于SpringCloud的多服务器的微服务项目。</p><p>这种配置方式和我们现在学习的完全不一样，所有的服务器将不再设置自己的配置文件，而是通过配置中心获取配置，动态加载配置信息，目的是为了集中管理。</p>`,39),c=[t];function o(l,r){return n(),s("div",null,c)}const d=a(i,[["render",o],["__file","3-2.配置文件设计.html.vue"]]);export{d as default};
