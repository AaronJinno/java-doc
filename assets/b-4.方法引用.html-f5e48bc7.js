import{_ as a,o as n,c as s,e}from"./app-9c0ded09.js";const p={},t=e(`<h2 id="i-方法引用介绍" tabindex="-1"><a class="header-anchor" href="#i-方法引用介绍" aria-hidden="true">#</a> Ⅰ. 方法引用介绍</h2><h4 id="_1-定义" tabindex="-1"><a class="header-anchor" href="#_1-定义" aria-hidden="true">#</a> 1. 定义</h4><p>Method References：方法引用，本质上就是Lambda表达式，而Lambda表达式可以作为函数式接口的实例。所以方法引用，也是函数式接口的实例。通过方法的名字来指向一个方法，可以认为是Lambda表达式的一个语法糖。</p><h4 id="_2-使用情景" tabindex="-1"><a class="header-anchor" href="#_2-使用情景" aria-hidden="true">#</a> 2. 使用情景</h4><p>当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！</p><h4 id="_3-语法格式" tabindex="-1"><a class="header-anchor" href="#_3-语法格式" aria-hidden="true">#</a> 3. 语法格式</h4><p>使用格式：<code>类(或对象) :: 方法名</code></p><ul><li>情况1：<code>对象 :: 非静态方法</code></li><li>情况2：<code>类 :: 静态方法</code></li><li>情况3：<code>类 :: 非静态方法</code></li></ul><h5 id="解析" tabindex="-1"><a class="header-anchor" href="#解析" aria-hidden="true">#</a> 解析</h5><p>可以将方法名看做是Lambda表达式中，接口中方法的方法名。</p><p>当我们找到了一个除了方法名不一样，其他完全一样的方法（参数、返回值，方法体逻辑），我们就会用这个方法，替代接口中的方法，而不用自己再去定义了。</p><p><code>::</code> 就可以认为告诉了表达式要用后面的方法替代接口中的方法。由于后面的方法已经定义过了，参数和返回值也都定义好了，因此只需要写方法名即可。</p><h4 id="_4-使用要求" tabindex="-1"><a class="header-anchor" href="#_4-使用要求" aria-hidden="true">#</a> 4. 使用要求</h4><ul><li>情况1和2：要求接口中的抽象方法的形参列表和返回值类型与方法引用的方法的形参列表和返回值类型相同！</li><li>情况3：要求接口中的抽象方法中，第一个形参是方法引用中的方法的调用者，且其他形参和返回值类型相同。 <ul><li>方法引用时，要使用参数1的类，而非对象，比如参数1是个字符串，就要用String类。</li></ul></li></ul><h2 id="ii-方法引用示例" tabindex="-1"><a class="header-anchor" href="#ii-方法引用示例" aria-hidden="true">#</a> Ⅱ. 方法引用示例</h2><h4 id="_1-示例1-情况1-对象-非静态方法" tabindex="-1"><a class="header-anchor" href="#_1-示例1-情况1-对象-非静态方法" aria-hidden="true">#</a> 1. 示例1：情况1：<code>对象 :: 非静态方法</code></h4><p>要求：使用Consumer接口，打印参数</p><h5 id="_1-1-lambda表达式写法" tabindex="-1"><a class="header-anchor" href="#_1-1-lambda表达式写法" aria-hidden="true">#</a> 1.1 Lambda表达式写法</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> con1 <span class="token operator">=</span> str<span class="token operator">-&gt;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
con1<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-2-方法引用写法" tabindex="-1"><a class="header-anchor" href="#_1-2-方法引用写法" aria-hidden="true">#</a> 1.2 方法引用写法</h5><p>解析：Lambda要实现的操作（方法体）已经有方法实现过了，就是System.out类的println方法，因此可以直接使用方法引用，使用println这个方法。</p><ul><li>Consumer中的方法为：<code>void accept(T t)</code></li><li>PrintStream中的方法为：<code>void println(T t)</code></li></ul><p>参数一样，功能也一样，满足条件。由于参数也一样，故可以省略参数。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">;</span>
<span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span>string<span class="token punctuation">&gt;</span></span> con2 <span class="token operator">=</span> ps<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">;</span>
con2<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">&quot;hi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-示例2-情况1-对象-非静态方法-自定义类" tabindex="-1"><a class="header-anchor" href="#_2-示例2-情况1-对象-非静态方法-自定义类" aria-hidden="true">#</a> 2. 示例2：情况1：<code>对象 :: 非静态方法（自定义类）</code></h4><p>说明：自定义类Employee中，有一个方法getName，无参数，用来获取员工姓名的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//创建一个员工对象</span>
<span class="token class-name">Employee</span> emp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">&quot;Jinno&quot;</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-1-lambda表达式" tabindex="-1"><a class="header-anchor" href="#_2-1-lambda表达式" aria-hidden="true">#</a> 2.1 Lambda表达式</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token operator">=</span> sup1 <span class="token operator">-&gt;</span> emp<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sup1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-2-方法引用" tabindex="-1"><a class="header-anchor" href="#_2-2-方法引用" aria-hidden="true">#</a> 2.2 方法引用</h5><p>解析：Employee类中的方法 <code>String getName()</code>；Supplier中的 <code>T get()方</code>法都是空参，返回一个值，因此可以用getName替代get()。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span>string<span class="token punctuation">&gt;</span></span> <span class="token operator">=</span> sup2<span class="token operator">-&gt;</span>emp<span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-示例3-情况二-类-静态方法" tabindex="-1"><a class="header-anchor" href="#_3-示例3-情况二-类-静态方法" aria-hidden="true">#</a> 3. 示例3：情况二：类 :: 静态方法</h4><p>要求：使用Comparator接口比较俩个数值的大小</p><h5 id="_3-1-lambda" tabindex="-1"><a class="header-anchor" href="#_3-1-lambda" aria-hidden="true">#</a> 3.1 Lambda</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> com1 <span class="token operator">=</span> <span class="token punctuation">(</span>t1<span class="token punctuation">,</span>t2<span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>
com1<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-2-方法引用" tabindex="-1"><a class="header-anchor" href="#_3-2-方法引用" aria-hidden="true">#</a> 3.2 方法引用</h5><p>解析：Comparator中的<code>int compare(T t1,T t2)</code>；Integer中的<code>int compare(T t1,T t2)</code>算法、返回值、参数都是一样的，可以直接替换。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> com2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">compare</span><span class="token punctuation">;</span>
com2<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-示例4-情况三-类-实例方法" tabindex="-1"><a class="header-anchor" href="#_4-示例4-情况三-类-实例方法" aria-hidden="true">#</a> 4. 示例4：情况三：<code>类 :: 实例方法</code></h4><p>要求：使用Comparator接口比较两个字符串的大小</p><h5 id="_4-1-lambda" tabindex="-1"><a class="header-anchor" href="#_4-1-lambda" aria-hidden="true">#</a> 4.1 Lambda</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> com1 <span class="token operator">=</span> <span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token operator">-&gt;</span>s1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
com1<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;abd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-2-方法引用" tabindex="-1"><a class="header-anchor" href="#_4-2-方法引用" aria-hidden="true">#</a> 4.2 方法引用</h5><p>解析：参数s1（属于String类），刚好是compareTo方法的调用者，且两个方法的其他参数和返回值相同，故可以进行方法引用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> com2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token operator">::</span><span class="token function">compareTo</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_5-示例5-情况三-类-实例方法-自定义类" tabindex="-1"><a class="header-anchor" href="#_5-示例5-情况三-类-实例方法-自定义类" aria-hidden="true">#</a> 5. 示例5：情况三：类 :: 实例方法 （自定义类）</h4><p>要求：调用自定义类的getName方法，获取员工姓名（String类型）。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Employee</span> employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">&quot;Jinno&quot;</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_5-1-lambda" tabindex="-1"><a class="header-anchor" href="#_5-1-lambda" aria-hidden="true">#</a> 5.1 Lambda</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fun1 <span class="token operator">=</span> e <span class="token operator">-&gt;</span>e<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_5-2-方法引用" tabindex="-1"><a class="header-anchor" href="#_5-2-方法引用" aria-hidden="true">#</a> 5.2 方法引用</h5><p>解析：Function接口的第一个参数刚好是方法的调用者（只有一个参数）；返回值也符合要求，故可以使用方法因引用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fun2 <span class="token operator">=</span> <span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="iii-构造器引用" tabindex="-1"><a class="header-anchor" href="#iii-构造器引用" aria-hidden="true">#</a> Ⅲ. 构造器引用</h2><p>函数返回的是一个对象，就可以采用构造器引用</p><h4 id="_1-使用条件" tabindex="-1"><a class="header-anchor" href="#_1-使用条件" aria-hidden="true">#</a> 1. 使用条件</h4><p>函数式接口的抽象方法的形参列表和构造器的形参列表一致。</p><p>抽象方法的返回值类型即为构造器所属的类的类型</p><h4 id="_2-语法格式" tabindex="-1"><a class="header-anchor" href="#_2-语法格式" aria-hidden="true">#</a> 2. 语法格式</h4><p><code>ClassName::new</code></p><h4 id="_3-示例1-空参构造器" tabindex="-1"><a class="header-anchor" href="#_3-示例1-空参构造器" aria-hidden="true">#</a> 3. 示例1：空参构造器</h4><p>要求：获得一个Employee（自定义员工类对象）对象（空参构造器创建的）。</p><p>方法：采用供给型接口：Supplier的get()方法</p><h5 id="_3-1-lambda-1" tabindex="-1"><a class="header-anchor" href="#_3-1-lambda-1" aria-hidden="true">#</a> 3.1 Lambda</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> emp1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
emp1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-2-构造器引用" tabindex="-1"><a class="header-anchor" href="#_3-2-构造器引用" aria-hidden="true">#</a> 3.2 构造器引用</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> emp2 <span class="token operator">=</span> <span class="token class-name">Employee</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>
emp2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-示例2-单参构造器" tabindex="-1"><a class="header-anchor" href="#_4-示例2-单参构造器" aria-hidden="true">#</a> 4. 示例2：单参构造器</h4><p>要求：获得一个Employee（自定义员工类对象）对象（单参构造器创建的）。</p><p>方法：采用函数型接口Function，提供一个参数，返回一个new的对象</p><h5 id="_4-1-lambda-1" tabindex="-1"><a class="header-anchor" href="#_4-1-lambda-1" aria-hidden="true">#</a> 4.1 Lambda</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> func1 <span class="token operator">=</span> id <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
func1<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-2-构造器引用" tabindex="-1"><a class="header-anchor" href="#_4-2-构造器引用" aria-hidden="true">#</a> 4.2 构造器引用</h5><p>解析：泛型里已经规定了有一个Integer类型的参数，所以调用的是单参构造器.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Fucntion</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> func2 <span class="token operator">=</span> <span class="token class-name">Employee</span><span class="token operator">:</span><span class="token keyword">new</span>
fucn2<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-示例3-多参构造器" tabindex="-1"><a class="header-anchor" href="#_5-示例3-多参构造器" aria-hidden="true">#</a> 5. 示例3：多参构造器</h4><p>要求：获得一个Employee（自定义员工类对象）对象（双参构造器创建的）。</p><p>方法：采用函数式接口<code>BiFunction&lt;T,U,R&gt;</code>，提供两个类参数，返回一个对象。</p><h5 id="_5-1-lambda-1" tabindex="-1"><a class="header-anchor" href="#_5-1-lambda-1" aria-hidden="true">#</a> 5.1 Lambda</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BiFUnction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> fun1 <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">)</span> <span class="token operator">-&gt;</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
func1<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-2-构造器引用" tabindex="-1"><a class="header-anchor" href="#_5-2-构造器引用" aria-hidden="true">#</a> 5.2 构造器引用</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BiFUnction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> fun2 <span class="token operator">=</span> <span class="token class-name">Employee</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>
func2<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token string">&quot;Aaron&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iv-数组引用" tabindex="-1"><a class="header-anchor" href="#iv-数组引用" aria-hidden="true">#</a> Ⅳ. 数组引用</h2><p>可以把数组看做是一个特殊的类，则写法与构造器引用一致。</p><h4 id="_1-语法格式" tabindex="-1"><a class="header-anchor" href="#_1-语法格式" aria-hidden="true">#</a> 1. 语法格式</h4><p><code>type[] :: new</code></p><h4 id="_2-示例" tabindex="-1"><a class="header-anchor" href="#_2-示例" aria-hidden="true">#</a> 2. 示例</h4><p>要求：根据Integer参数，返回指定长度的空数组</p><h5 id="_2-1-lambda" tabindex="-1"><a class="header-anchor" href="#_2-1-lambda" aria-hidden="true">#</a> 2.1 Lambda</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Function</span><span class="token operator">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> func1 <span class="token operator">=</span> length<span class="token operator">-&gt;</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
func1<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-2-构造器引用" tabindex="-1"><a class="header-anchor" href="#_2-2-构造器引用" aria-hidden="true">#</a> 2.2 构造器引用</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Function</span><span class="token operator">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> func2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>
func2<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,93),c=[t];function o(l,i){return n(),s("div",null,c)}const r=a(p,[["render",o],["__file","b-4.方法引用.html.vue"]]);export{r as default};
