import{_ as n,o as a,c as e,e as t}from"./app-e2ee9004.js";const o={},i=t(`<div class="hint-container danger"><p class="hint-container-title">说明</p><p>自动装配是非常底层的技术，内容既多又复杂，需要花大量时间整理和理解，这里暂时不做深入的研究了。等以后又空闲时间再从Spring开始，慢慢总结。</p></div><h2 id="自动配置介绍" tabindex="-1"><a class="header-anchor" href="#自动配置介绍" aria-hidden="true">#</a> 自动配置介绍</h2><p>自动配置：简单说就是springboot根据我们开发者的行为猜测你要做什么事情，然后把你要用的bean都给你准备好，同时在配置文件中提供了很多配置项。</p><h4 id="springboot做了什么" tabindex="-1"><a class="header-anchor" href="#springboot做了什么" aria-hidden="true">#</a> SpringBoot做了什么</h4><p>通过你编码中导入的类，就知道你有可能需要的Bean，于是就把这些Bean提前加载好了，这些Bean可以直接用了，不用再手动的加载Bean，加快了开发速度。</p><p>之前通过各种方式加载Bean的做法，都不用做了，Spring配置文件，各种动态加载Bean的注解也完全不用写了，SprigBoot都帮我们做好了，这很酷。</p><h4 id="参数的定义" tabindex="-1"><a class="header-anchor" href="#参数的定义" aria-hidden="true">#</a> 参数的定义</h4><p>很多Bean是需要手动提供参数才能正确加载的，SpringBoot如何处理这些类呢？</p><p>答案就是 Application.yml配置文件，比如数据库连接，你就需要在yml配置中根据SpringBoot预定义好的属性名提供值，Spring Boot会自动加载他们。</p><p>SpringBoot 对几乎所有常用的基数都提供了预定义属性名以及设置了通用的属性值，他会根据pom中导入的包加载，IDEA也会有提示。</p><h4 id="手动操作" tabindex="-1"><a class="header-anchor" href="#手动操作" aria-hidden="true">#</a> 手动操作</h4><p>对于特殊操作和冷门技术，SpringBoot没有整合方案，就需要通过手动创建配置类，手动进行配置和加载了。</p><h2 id="springboot工作原理" tabindex="-1"><a class="header-anchor" href="#springboot工作原理" aria-hidden="true">#</a> SpringBoot工作原理</h2><div class="hint-container warning"><p class="hint-container-title">疑问？</p><p>SpringBoot是如何知道那些具体的Bean要加载，那些属性要配置？既SpringBoot自动配置是如何具体操作的？</p></div><ul><li>step 1-&gt;收集Spring开发者的编程习惯，整理开发过程使用的常用技术列表——&gt;(技术集A)</li><li>step 2-&gt;收集常用技术(技术集A)的使用参数，整理开发过程中每个技术的常用设置列表——&gt;(设置集B)</li><li>step 3-&gt;初始化SpringBoot基础环境，加载用户自定义的bean和导入的其他坐标，形成初始化环境</li><li>step 4-&gt;将技术集A包含的所有技术都定义出来，在Spring/SpringBoot启动时默认全部加载</li><li>step 5-&gt;将技术集A中具有使用条件的技术约定出来，设置成按条件加载，由开发者决定是否使用该技术（与初始化环境比对）</li><li>step 6-&gt;将设置集B作为默认配置加载（约定大于配置），减少开发者配置工作量</li><li>step 7-&gt;开放设置集B的配置覆盖接口，由开发者根据自身需要决定是否覆盖默认配置</li></ul><h2 id="springbootapplication" tabindex="-1"><a class="header-anchor" href="#springbootapplication" aria-hidden="true">#</a> @SpringBootApplication</h2><p>SpringBoot运行是从启动类的main方法开始的，而启动类是由@SpringBoot注解修饰的。</p><p>@SpringBoot是个组合注解，底层是三个注解，他的嵌套结构如下：</p><ul><li>@SpringBootConfiguration <ul><li>@Configuration(@Component)</li><li>@Indexed</li></ul></li><li>@EnableAutoConfiguration <ul><li>@AutoConfigurationPackage <ul><li>@Import(AutoConfigurationPackages.Registrar.class)</li></ul></li><li>@Import(AutoConfigurationImportSelector.class)</li></ul></li><li>@ComponentScan：(excludeFilters = { @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),@Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })</li></ul><h4 id="_1-springbootconfiguration" tabindex="-1"><a class="header-anchor" href="#_1-springbootconfiguration" aria-hidden="true">#</a> 1. @SpringBootConfiguration</h4><p>该注解又包含两个注解，</p><ul><li>@Configuration：其实就是@Component</li><li>@Indexed：该注解是用来加速启动的，比如将需要启动的包存入一个文件，然后加载这个文件。</li></ul><h4 id="_2-enableautoconfiguration" tabindex="-1"><a class="header-anchor" href="#_2-enableautoconfiguration" aria-hidden="true">#</a> 2. @EnableAutoConfiguration</h4><p>该注解也是由两部分组成，都是用来@import Bean的。</p><h5 id="_2-1-autoconfigurationpackage" tabindex="-1"><a class="header-anchor" href="#_2-1-autoconfigurationpackage" aria-hidden="true">#</a> 2.1 @AutoConfigurationPackage</h5><p>该注解内部还嵌套了一个@Import注解<code>@Import(AutoConfigurationPackages.Registrar.class)</code>。导入的类底层实现了ImportBeanDefinitionRegistrar接口，用来编程式加载Bean，并对Bean进行初始化。</p><p>该类获取了当前启动类所在包路径，作为要扫描的包，后续要针对当前的包进行扫描，这个包里面其实就是开发者手写的类。</p><h5 id="_2-2-import-autoconfigurationimportselector-class" tabindex="-1"><a class="header-anchor" href="#_2-2-import-autoconfigurationimportselector-class" aria-hidden="true">#</a> 2.2 @Import(AutoConfigurationImportSelector.class)</h5><p>该注解引入了AutoConfigurationImportSelector.class类，该类实现了6个接口，这些接口可以分为三类，都是Bean生命周期里的接口。</p><p><strong>DeferredImportSelector</strong>：存放延迟加载类。继承自ImportSelector，是ImportSelector接口的扩展<br> （ImportSelector是将selectImports方法返回的字符串数组，注册成为Bean）。</p><ul><li>该类承担了自动装配的任务，他逻辑代码是在process方法中执行的，在他之前的代码中已经将@componentScans、@propertySource、@Bean等注解解析完了。</li><li>该接口的的主要作用：与AutoConfigurationImportSelector的作用类似，调用AutoConfigurationImportSelector 的某些方法来确定要导入哪些自动装配的配置类，由selectImports方法来返回这些类。在应用程序初始化阶段不导入所有配置，而是在需要时才导入额外的配置。</li><li>应用：当需要根据不同的环境或配置选项加载额外的配置时，或在某些情况下懒惰加载配置以提高启动速度。还可以通过实现排序接口，在导入额外的配置时按照特定的顺序进行排序，以便确保额外的配置在正确的顺序中加载。</li><li>spring.factories</li></ul><p><strong>BeanClassLoaderAware, ResourceLoaderAware, BeanFactoryAware, EnvironmentAware</strong>：Aware类接口为 Spring 容器的核心接口，是一个具有标识作用的超级接口，实现了该接口的 bean 是具有被 Spring 容器通知的能力，通知的方式是采用回调的方式。</p><ul><li>意义：Spring 容器在初始化时主动检测当前 bean 是否实现了 Aware 接口，如果实现了则回调其 set 方法将相应的参数设置给该 bean ，这个时候该 bean 就从 Spring 容器中取得相应的资源</li><li>怎么做的：太复杂，略</li></ul><p><strong>Ordered</strong>：指定当前类在Spring容器中的加载顺序（优先级）。</p><h4 id="_3-componentscan" tabindex="-1"><a class="header-anchor" href="#_3-componentscan" aria-hidden="true">#</a> 3. @ComponentScan</h4><p>该注解是用来扫描Bean的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// 磁盘扫描过滤器，定义过滤规则：按类型排除性的过滤器</span>
    <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">CUSTOM</span><span class="token punctuation">,</span> classes <span class="token operator">=</span> <span class="token class-name">TypeExcludeFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// 磁盘扫描过滤器，定义过滤规则：自动配置排除过滤器</span>
    <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">CUSTOM</span><span class="token punctuation">,</span> classes <span class="token operator">=</span> <span class="token class-name">AutoConfigurationExcludeFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,37),s=[i];function r(p,l){return a(),e("div",null,s)}const u=n(o,[["render",r],["__file","6-3.自动配置.html.vue"]]);export{u as default};
