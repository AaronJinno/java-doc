import{_ as p,r as o,o as i,c as r,a as n,b as s,d as t,e as a}from"./app-d25397b5.js";const l="/java-doc/img/sql/es/5-2-1.jpg",c="/java-doc/img/sql/es/5-2-2.jpg",u="/java-doc/img/sql/es/5-2-3.jpg",d="/java-doc/img/sql/es/5-2-4.jpg",k="/java-doc/img/sql/es/5-2-5.jpg",h="/java-doc/img/sql/es/5-2-6.jpg",m="/java-doc/img/sql/es/5-2-7.jpg",v={},_=a('<h2 id="系统架构" tabindex="-1"><a class="header-anchor" href="#系统架构" aria-hidden="true">#</a> 系统架构</h2><figure><img src="'+l+`" alt="5-2-1" tabindex="0" loading="lazy"><figcaption>5-2-1</figcaption></figure><p>如图：（节点数：3、分片数：2、备份数：1）</p><ul><li>节点：集群有三个节点，其中Node1是主节点 <ul><li>主节点在启动时根据配置指定，在运行中可以选举产生</li></ul></li><li>分片：索引被分片储存了，储存在了各个节点：P0、P1、P2 <ul><li>并非每个节点都有一个分片，而是根据规则创建，所以上图只有两个分片</li></ul></li><li>副本：每个分片都有自己的副本，P0-&gt;R0、P1-&gt;R1、P2-&gt;R2 <ul><li>副本跟被复制的分片肯定是不能在同一个节点的（高可用）</li><li>副本数量也不是和节点关联的，而且根据设置的规则创建，默认是1个副本</li></ul></li></ul><h4 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述" aria-hidden="true">#</a> 1. 概述</h4><p>一个运行中的 Elasticsearch 实例称为一个节点，而集群是由一个或者多个拥有相同<br><code>cluster.name</code>（集群名） 配置的节点组成， 它们共同承担数据和负载的压力。</p><p>当有节点加入集群中或者从集群中移除节点时，集群将会重新平均分布所有的数据。</p><h4 id="_2-主节点" tabindex="-1"><a class="header-anchor" href="#_2-主节点" aria-hidden="true">#</a> 2. 主节点</h4><p>当一个节点被选举成为主节点时， 它将负责管理集群范围内的所有变更，例如增加、删除索引，或者增加、删除节点等。</p><p>主节点并不需要涉及到文档级别的变更和搜索等操作，所以当集群只拥有一个主节点的情况下，即使流量的增加它也不会成为瓶颈。 任何节点都可以成为主节点。</p><h4 id="_3-请求处理" tabindex="-1"><a class="header-anchor" href="#_3-请求处理" aria-hidden="true">#</a> 3. 请求处理</h4><ul><li>可以将请求发送到集群中的任何节点，包括主节点。</li><li>每个节点都知道任意文档所处的位置，并且能够将我们的请求直接转发到存储我们所需文档的节点。</li><li>无论我们将请求发送到哪个节点，它都能负责从各个包含我们所需文档的节点收集回数据，并将最终结果返回給客户端。 Elasticsearch 对这一切的管理都是透明的。</li></ul><h2 id="单节点集群" tabindex="-1"><a class="header-anchor" href="#单节点集群" aria-hidden="true">#</a> 单节点集群</h2><p>单节点集群指的是集群中只有一个节点，该节点内可以包含有多个分片和副本。实际开发中不会出现单节点集群，这里只是为了演示集群的原理。</p><h4 id="_1-创建单节点集群" tabindex="-1"><a class="header-anchor" href="#_1-创建单节点集群" aria-hidden="true">#</a> 1. 创建单节点集群</h4><p>创建单节点集群，并查看集群信息</p><p>GET请求<code>http://localhost:9300/_cluster/health</code>查看集群的节点信息，返回如下信息：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;cluster_name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;my-es&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token string">&quot;green&quot;</span><span class="token punctuation">,</span> <span class="token comment">//状态为green</span>
    <span class="token property">&quot;timed_out&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token property">&quot;number_of_nodes&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">//单节点</span>
    <span class="token property">&quot;number_of_data_nodes&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> 
    <span class="token comment">//分片信息都是0</span>
    <span class="token property">&quot;active_primary_shards&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">&quot;active_shards&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">&quot;relocating_shards&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">&quot;initializing_shards&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">&quot;unassigned_shards&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">&quot;delayed_unassigned_shards&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">&quot;number_of_pending_tasks&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">&quot;number_of_in_flight_fetch&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">&quot;task_max_waiting_in_queue_millis&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">&quot;active_shards_percent_as_number&quot;</span><span class="token operator">:</span> <span class="token number">100.0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-索引分片" tabindex="-1"><a class="header-anchor" href="#_2-索引分片" aria-hidden="true">#</a> 2. 索引分片</h4><p>创建完单节点集群后，创建名为 users 的索引，并将索引分成3个主分片和一份副本（每个主分片拥有一个副本分片）</p><p>通过PUT请求 <code>http://localhost:9300/user</code>创建索引，并通过以下请求体进行分片</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;settings&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;number_of_shards&quot;</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment">//创建的分片数量</span>
        <span class="token property">&quot;number_of_replicas&quot;</span><span class="token operator">:</span><span class="token number">1</span> <span class="token comment">//创建的副本数量，每个分片都会有副本的</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-1-查询集群信息" tabindex="-1"><a class="header-anchor" href="#_2-1-查询集群信息" aria-hidden="true">#</a> 2.1 查询集群信息</h5><p>创建成功后，再次发送请求，查询集群信息</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;cluster_name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;my-es&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token string">&quot;yellow&quot;</span><span class="token punctuation">,</span> <span class="token comment">//状态为yellow</span>
    <span class="token property">&quot;timed_out&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> 
    <span class="token property">&quot;number_of_nodes&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">//单节点</span>
    <span class="token property">&quot;number_of_data_nodes&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token property">&quot;active_primary_shards&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment">//主分片：3个</span>
    <span class="token property">&quot;active_shards&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> 
    <span class="token property">&quot;relocating_shards&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">&quot;initializing_shards&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">&quot;unassigned_shards&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
    <span class="token property">&quot;delayed_unassigned_shards&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">&quot;number_of_pending_tasks&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">&quot;number_of_in_flight_fetch&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">&quot;task_max_waiting_in_queue_millis&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">&quot;active_shards_percent_as_number&quot;</span><span class="token operator">:</span> <span class="token number">50.0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-2-查询索引信息" tabindex="-1"><a class="header-anchor" href="#_2-2-查询索引信息" aria-hidden="true">#</a> 2.2 查询索引信息</h5><p>发送请求查看刚创建的索引信息。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;user&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;aliases&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">&quot;mappings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">&quot;settings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token property">&quot;routing&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token property">&quot;allocation&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                        <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                            <span class="token property">&quot;_tier_preference&quot;</span><span class="token operator">:</span> <span class="token string">&quot;data_content&quot;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token property">&quot;number_of_shards&quot;</span><span class="token operator">:</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> <span class="token comment">//分片数量3</span>
                <span class="token property">&quot;provided_name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;creation_date&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1688003784177&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;number_of_replicas&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token comment">//副本数量1</span>
                <span class="token property">&quot;uuid&quot;</span><span class="token operator">:</span> <span class="token string">&quot;FhGd7_y9RHmSAgkRqZj7kA&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token property">&quot;created&quot;</span><span class="token operator">:</span> <span class="token string">&quot;8080199&quot;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-分析集群情况" tabindex="-1"><a class="header-anchor" href="#_3-分析集群情况" aria-hidden="true">#</a> 3. 分析集群情况</h4><p>集群现在是拥有一个索引的单节点集群。所有 3 个主分片都被分配在 node-1</p><h5 id="_3-1-elasticsearch-head插件" tabindex="-1"><a class="header-anchor" href="#_3-1-elasticsearch-head插件" aria-hidden="true">#</a> 3.1 elasticsearch-head插件</h5><p>可以安装浏览器插件elasticsearch-head，然后进去插件，输入地址，查看集群情况</p><figure><img src="`+c+'" alt="5-2-2" tabindex="0" loading="lazy"><figcaption>5-2-2</figcaption></figure><p>加星号的是主节点，另一个是副节点。</p><h5 id="_3-2-分析" tabindex="-1"><a class="header-anchor" href="#_3-2-分析" aria-hidden="true">#</a> 3.2 分析</h5><p>如上图，分析集群的情况：</p><ul><li><mark>集群健康值:yellow( 3 of 6 )</mark>：表示当前集群的全部主分片都正常运行，但是副本分片没有全部处在正常状态</li><li>node-9300：3个主分片都正常（绿色的）</li><li>Unassigned：3 个副本分片都是 Unassigned，它们都没有被分配到任何节点。 在同<br> 一个节点上既保存原始数据又保存副本是没有意义的，因为一旦失去了那个节点，我们也将丢失该节点上的所有副本数据。</li></ul><p>总结：当前我们的集群是正常运行的，但是在硬件故障时有丢失数据的风险</p><h2 id="单点故障" tabindex="-1"><a class="header-anchor" href="#单点故障" aria-hidden="true">#</a> 单点故障</h2><p>当集群中只有一个节点在运行时，意味着会有一个单点故障问题——没有冗余（高可用）。</p><h4 id="_1-启动第二个节点" tabindex="-1"><a class="header-anchor" href="#_1-启动第二个节点" aria-hidden="true">#</a> 1. 启动第二个节点</h4>',41),b={href:"http://cluster.name",target:"_blank",rel:"noopener noreferrer"},q=a('<h4 id="_2-查看集群情况" tabindex="-1"><a class="header-anchor" href="#_2-查看集群情况" aria-hidden="true">#</a> 2. 查看集群情况</h4><p>再次使用elasticsearch-head插件，查看集群情况。</p><figure><img src="'+u+'" alt="5-2-3" tabindex="0" loading="lazy"><figcaption>5-2-3</figcaption></figure><ul><li>集群健康值：green( 6 of 6 ) : 表示所有 6 个分片（包括 3 个主分片和 3 个副本分片）都在正常运行。</li><li>node-9300：3 个主分片正常</li><li>node-9400：3个副本分片也正常，且和主分片不再同一个节点</li></ul><h4 id="_3-总结" tabindex="-1"><a class="header-anchor" href="#_3-总结" aria-hidden="true">#</a> 3. 总结</h4><p>当第二个节点加入到集群后，3 个副本分片将会分配到这个节点上——每个主分片对应一个副本分片。这意味着当集群内任何一个节点出现问题时，我们的数据都完好无损。</p><p>所有新近被索引的文档都将会保存在主分片上，然后被并行的复制到对应的副本分片上。这就保证了我们既可以从主分片又可以从副本分片上获得文档。</p><h2 id="水平扩容" tabindex="-1"><a class="header-anchor" href="#水平扩容" aria-hidden="true">#</a> 水平扩容</h2><p>水平扩容指的是：增加节点数量，从而加大数据的吞吐量和性能。</p><h4 id="_1-启动第三个节点" tabindex="-1"><a class="header-anchor" href="#_1-启动第三个节点" aria-hidden="true">#</a> 1. 启动第三个节点</h4><p>当启动了第三个节点，集群将会拥有三个节点，集群为了分散负载会对分片进行重新分配。</p><h4 id="_2-查看集群情况-1" tabindex="-1"><a class="header-anchor" href="#_2-查看集群情况-1" aria-hidden="true">#</a> 2. 查看集群情况</h4><p>使用elasticsearch-head插件，查看三个节点的集群情况。</p><figure><img src="'+d+'" alt="5-2-4" tabindex="0" loading="lazy"><figcaption>5-2-4</figcaption></figure><ul><li>集群健康值:green( 6 of 6 ) : 表示所有 6 个分片（包括 3 个主分片和 3 个副本分片）都在正常运行，（增加节点不会凭空增加副本数量）。</li><li>分片：node-9300和node-9400上各有一个分片被迁移到了新的 Node-9500节点</li></ul><p>现在每个节点上都拥有 2 个分片，而不是之前的 3 个。 这表示每个节点的硬件资源（CPU, RAM, I/O）将被更少的分片所共享，每个分片的性能将会得到提升。</p><h4 id="_3-扩容的节点数量" tabindex="-1"><a class="header-anchor" href="#_3-扩容的节点数量" aria-hidden="true">#</a> 3. 扩容的节点数量</h4><p>分片是一个功能完整的搜索引擎，它拥有使用一个节点上的所有资源的能力。 我们这个拥有 6 个分片（3 个主分片和 3 个副本分片）的索引可以最大扩容到 6 个节点，每个节点上存在一个分片，并且每个分片拥有所在节点的全部资源。</p><p>原因：主分片三个，副分片三个，最多一个节点一个分片，也就是最多扩容到6个节点。</p><h4 id="_4-多个副本" tabindex="-1"><a class="header-anchor" href="#_4-多个副本" aria-hidden="true">#</a> 4. 多个副本</h4><p>如果扩容的节点数量超过了分片数量（超过6个节点），将会有空闲的节点。</p><p>主分片的数目在索引创建时就已经确定了下来。实际上，这个数目定义了这个索引能够<br> 存储 的最大数据量。（实际大小取决于你的数据、硬件和使用场景。）</p><p>但是，读操作——搜索和返回数据——可以同时被主分片 或 副本分片所处理，所以当你拥有越多的副本分片时，也将拥有越高的吞吐量（同时高可用也增加了）。</p><p>在运行中的集群上是可以动态调整副本分片数目的，可以按需伸缩集群，比如将副本数量变成2：</p>',24),g=n("li",null,"请求方式：PUT",-1),f={href:"http://localhost:9300/user/_settings",target:"_blank",rel:"noopener noreferrer"},y=n("li",null,"请求体如下",-1),x=a(`<div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;settings&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;number_of_replicas&quot;</span><span class="token operator">:</span><span class="token number">2</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-再次查看集群情况" tabindex="-1"><a class="header-anchor" href="#_5-再次查看集群情况" aria-hidden="true">#</a> 5. 再次查看集群情况</h4><p>设置成两个副本后，再次通过 elasticsearch-head 插件查看集群情况</p><figure><img src="`+k+'" alt="5-2-5" tabindex="0" loading="lazy"><figcaption>5-2-5</figcaption></figure><p>如图：users 索引现在拥有 9 个分片：3 个主分片和 6 个副本分片。 每个分片有两个副本，此时可以将以将集群扩容到 9 个节点，每个节点上一个分片。相比原来 3 个节点时，集群搜索性能可以提升 3 倍。</p><p>不扩容节点，创建多个副本不会增加性能，只是增加了高可用。</p><h2 id="集群故障处理" tabindex="-1"><a class="header-anchor" href="#集群故障处理" aria-hidden="true">#</a> 集群故障处理</h2><h4 id="_1-节点丢失" tabindex="-1"><a class="header-anchor" href="#_1-节点丢失" aria-hidden="true">#</a> 1. 节点丢失</h4><p>关闭一个节点后，再次查看集群状态，如图：（关闭node-9300，主节点）</p><figure><img src="'+h+'" alt="5-2-6" tabindex="0" loading="lazy"><figcaption>5-2-6</figcaption></figure><p>如图，主节点丢失了，集群必须拥有一个主节点来保证正常工作，所以发生的第一件事情就是选举一个新的主节点：Node-9400 。</p><p>关闭 Node-9300的同时也失去了主分片，在缺失主分片的时候理论上索引也不能正常工作（集群状态red），不过node-9400和node-9500节点上存在着主分片的完整副本，所以新的主节点立即将备份的副分片提升为主分片, 此时集群的状态将会为yellow。这个提升主分片的过程是瞬间发生的。</p><h4 id="_2-节点恢复" tabindex="-1"><a class="header-anchor" href="#_2-节点恢复" aria-hidden="true">#</a> 2. 节点恢复</h4><p>恢复丢失的节点（重启node-9300），再次查看集群状态，如图：</p><figure><img src="'+m+'" alt="5-2-7" tabindex="0" loading="lazy"><figcaption>5-2-7</figcaption></figure><p>节点恢复后，集群可以将缺失的副本分片再次进行分配，那么集群的状态也将恢复成之前的状态。如果丢失的节点依然拥有着之前的分片，它将尝试去重用它们，同时仅从主分片复制发生了修改的数据文件。和之前的集群相比，只是 Master 节点切换了。</p>',16);function j(z,P){const e=o("ExternalLinkIcon");return i(),r("div",null,[_,n("p",null,[s("为集群启动第二个节点（它和第一个节点有同样的 "),n("a",b,[s("cluster.name"),t(e)]),s(" 配置），它会自动发现集群并加入到其中。")]),q,n("ul",null,[g,n("li",null,[s("请求URL："),n("a",f,[s("http://localhost:9300/user/_settings"),t(e)])]),y]),x])}const R=p(v,[["render",j],["__file","5-2.分布式集群.html.vue"]]);export{R as default};
