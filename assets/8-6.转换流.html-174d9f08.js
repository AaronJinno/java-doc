import{_ as a,o as n,c as s,e}from"./app-e2ee9004.js";const t="/java-doc/img/java/javase/8-6-1.jpg",p="/java-doc/img/java/javase/8-6-2.jpg",o="/java-doc/img/java/javase/8-6-3.jpg",c="/java-doc/img/java/javase/8-6-4.jpg",i={},l=e('<h2 id="i-转换流介绍" tabindex="-1"><a class="header-anchor" href="#i-转换流介绍" aria-hidden="true">#</a> Ⅰ. 转换流介绍</h2><h4 id="_1-说明" tabindex="-1"><a class="header-anchor" href="#_1-说明" aria-hidden="true">#</a> 1. 说明</h4><p>转换流也是一种处理流：提供了在字节流和字符流之间的转换</p><figure><img src="'+t+`" alt="8-6-1" tabindex="0" loading="lazy"><figcaption>8-6-1</figcaption></figure><h4 id="_2-转换流的类" tabindex="-1"><a class="header-anchor" href="#_2-转换流的类" aria-hidden="true">#</a> 2. 转换流的类</h4><p>Java API提供了两个转换流的类：</p><ul><li>InputStreamReader：将InputStream转为Reader（字节流输入-&gt;字符流输入）</li><li>OutputStreamWriter：将Writer转为OutputStream（字符流输出-&gt;字节流输出）</li></ul><h4 id="_3-作用" tabindex="-1"><a class="header-anchor" href="#_3-作用" aria-hidden="true">#</a> 3. 作用</h4><ul><li>提高操作效率：字节流中的数据都是字符时，转成字符流操作更高效。</li><li>转码：进行转码，将文本文件转换成别的编码输出。 很多时候我们使用转换流来处理文件乱码问题。实现编码和解码的功能。 <ul><li>解码：字节、字节数组 ---&gt;字符数组、字符串</li><li>编码：字符数组、字符串 ---&gt; 字节、字节数组/</li></ul></li></ul><h4 id="_4-使用说明" tabindex="-1"><a class="header-anchor" href="#_4-使用说明" aria-hidden="true">#</a> 4. 使用说明</h4><ul><li>这两个流都是用来操作文本文件的，文本文件也可以做为字节流进行IO</li><li>InputStreamReader的字符集参数要和文件本身的编码统一</li><li>使用的方法、操作流程、异常处理，和流的基类基本一致。</li></ul><h2 id="ii-inputstreamreader" tabindex="-1"><a class="header-anchor" href="#ii-inputstreamreader" aria-hidden="true">#</a> Ⅱ. InputStreamReader</h2><h4 id="说明" tabindex="-1"><a class="header-anchor" href="#说明" aria-hidden="true">#</a> 说明</h4><p>InputStreamReader实现将字节的输入流按指定字符集转换为字符的输入流。需要和InputStream“套接”。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InputStreamReader</span> <span class="token keyword">extends</span> <span class="token class-name">Reader</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_1-构造器1-不指定字符集" tabindex="-1"><a class="header-anchor" href="#_1-构造器1-不指定字符集" aria-hidden="true">#</a> 1. 构造器1：不指定字符集</h4><p>参数是InputStream流，默认编码是utf-8,，即将字节流转为utf-8编码的字符流</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
<span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;File/a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">InputStreamReader</span> isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-构造器2-指定字符集" tabindex="-1"><a class="header-anchor" href="#_2-构造器2-指定字符集" aria-hidden="true">#</a> 2. 构造器2：指定字符集</h4><p>提供第二个参数来指定编码集</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">InputSreamReader</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">,</span><span class="token class-name">String</span> charsetName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
<span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;File/a.txt&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">InputStreamReader</span> isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-主要方法" tabindex="-1"><a class="header-anchor" href="#_3-主要方法" aria-hidden="true">#</a> 3. 主要方法</h4><h5 id="_3-1-read" tabindex="-1"><a class="header-anchor" href="#_3-1-read" aria-hidden="true">#</a> 3.1 read</h5><p>和流基类的read方法类似，有三个重载方法。<br> 以字符流的形式读取字符。</p><h5 id="_3-2-getencoding" tabindex="-1"><a class="header-anchor" href="#_3-2-getencoding" aria-hidden="true">#</a> 3.2 getEncoding</h5><p>获取FileInputStream对象的字符集。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token function">getEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;File/a.txt&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">InputStreamReader</span> isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> encoding <span class="token operator">=</span> isr<span class="token punctuation">.</span><span class="token function">getEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//UTF8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-3-close" tabindex="-1"><a class="header-anchor" href="#_3-3-close" aria-hidden="true">#</a> 3.3 close</h5><p>关闭转换流，关闭该流会自动关闭参数InputStream流。</p><h4 id="_4-使用示例" tabindex="-1"><a class="header-anchor" href="#_4-使用示例" aria-hidden="true">#</a> 4. 使用示例</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;File/a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">InputStreamReader</span> isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>fis<span class="token punctuation">,</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span>  cbuf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> len <span class="token operator">=</span> isr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[a, b, c]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iii-outputstreamwriter" tabindex="-1"><a class="header-anchor" href="#iii-outputstreamwriter" aria-hidden="true">#</a> Ⅲ. OutputStreamWriter</h2><p>实现将字符的输出流按指定字符集转换为字节的输出流。需要和OutputStream“套接”。</p><h4 id="_1-构造器1-不指定字符集-1" tabindex="-1"><a class="header-anchor" href="#_1-构造器1-不指定字符集-1" aria-hidden="true">#</a> 1. 构造器1：不指定字符集</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token class-name">OutputStream</span> out<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-构造器2-指定字符集-1" tabindex="-1"><a class="header-anchor" href="#_2-构造器2-指定字符集-1" aria-hidden="true">#</a> 2. 构造器2：指定字符集</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">OutputSreamWriter</span><span class="token punctuation">(</span><span class="token class-name">OutputStream</span> out<span class="token punctuation">,</span><span class="token class-name">String</span> charsetName<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-主要方法-1" tabindex="-1"><a class="header-anchor" href="#_3-主要方法-1" aria-hidden="true">#</a> 3. 主要方法</h4><ul><li>write：将字符流以字节流的方式写出到文件中，字符的编码，由构造器指定。 <ul><li>和流基类的字节流方法基本一样，有三个重构方法</li></ul></li><li>flush：刷新流</li><li>close：关闭流</li></ul><h4 id="_4-综合示例-对文本文件进行转码" tabindex="-1"><a class="header-anchor" href="#_4-综合示例-对文本文件进行转码" aria-hidden="true">#</a> 4. 综合示例：对文本文件进行转码</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//注意：为了结构清晰，这里直接把异常抛出了，实际应该使用try...catch处理</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span> 
    <span class="token comment">//1.造文件、造流</span>
    <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;dbcp.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;dbcp_gbk.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">InputStreamReader</span> isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>fis<span class="token punctuation">,</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">OutputStreamWriter</span> osw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>fos<span class="token punctuation">,</span><span class="token string">&quot;gbk&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//2.读写过程</span>
    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> le
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> isr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">//3.关闭资源</span>
    isr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    osw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iv-补充-字符集" tabindex="-1"><a class="header-anchor" href="#iv-补充-字符集" aria-hidden="true">#</a> Ⅳ. 补充：字符集</h2><h4 id="_1-编码表的由来" tabindex="-1"><a class="header-anchor" href="#_1-编码表的由来" aria-hidden="true">#</a> 1. 编码表的由来</h4><p>计算机只能识别二进制数据，早期由来是电信号。为了方便应用计算机，让它可以识别各个国家的文字。就将各个国家的文字用数字来表示，并一一对应，形成一张表。这就是编码表。</p><h4 id="_2-常见编码集" tabindex="-1"><a class="header-anchor" href="#_2-常见编码集" aria-hidden="true">#</a> 2. 常见编码集</h4><ul><li>ASCII：美国标准信息交换码。用一个字节的7位可以表示。</li><li>ISO8859-1：拉丁码表。欧洲码表，用一个字节的8位表示。</li><li>GB2312：中国的中文编码表。最多两个字节编码所有字符</li><li>GBK：中国的中文编码表升级，融合了更多的中文文字符号。最多两个字节编 <ul><li>GBK等双字节编码方式，用最高位是1或0表示两个字节和一个字节。</li></ul></li><li>Unicode：国际标准码，融合了目前人类使用的所有字符。为每个字符分配唯一的字符码。所有的文字都用两个字节来表示。</li><li>UTF-8：变长的编码方式，可用1-4个字节来表示一个字符。</li></ul><h4 id="_3-编码原理" tabindex="-1"><a class="header-anchor" href="#_3-编码原理" aria-hidden="true">#</a> 3. 编码原理</h4><figure><img src="`+p+'" alt="8-6-2" tabindex="0" loading="lazy"><figcaption>8-6-2</figcaption></figure><h4 id="_4-unicode与utf-8的由来" tabindex="-1"><a class="header-anchor" href="#_4-unicode与utf-8的由来" aria-hidden="true">#</a> 4. Unicode与UTF-8的由来</h4><ul><li>Unicode：在Unicode 出现之前，所有的字符集都是和具体编码方案绑定在一起的（即字符集≈ 编码方式），都是直接将字符和最终字节流绑定死了。Unicode是一种将全世界所有文字都包含的编码集，但是 Unicode不完美，这里就有三个问题：一个是，我们已经知道，英文字母只用一个字节表示就够了，第二个问题是如何才能区别Unicode和ASCII？计算机怎么知道两个字节表示一个符号，而不是分别表示两个符号呢？第三个，如果和GBK等双字节编码方式一样，用最高位是1或0表示两个字节和一个字节，就少了很多值无法用于表示字符，不够表示所有字符。Unicode在很长一段时间内无法推广，直到互联网的出现。</li><li>UTF-8：面向传输的众多 UTF（UCS Transfer Format）标准出现了，顾名思义，UTF-8就是每次8个位传输数据，而UTF-16就是每次16个位。这是为传输而设计的编码，并使编码无国界，这样就可以显示全世界上所有文化的字符了。</li><li>Unicode与UTF-8：Unicode只是定义了一个庞大的、全球通用的字符集，并为每个字符规定了唯一确定的编号，具体存储成什么样的字节流，取决于字符编码方案。推荐的Unicode编码是UTF-8和UTF-16。</li></ul><h4 id="_5-utf-8的原理" tabindex="-1"><a class="header-anchor" href="#_5-utf-8的原理" aria-hidden="true">#</a> 5. UTF-8的原理</h4><figure><img src="'+o+'" alt="8-6-3" tabindex="0" loading="lazy"><figcaption>8-6-3</figcaption></figure><h4 id="_6-总结" tabindex="-1"><a class="header-anchor" href="#_6-总结" aria-hidden="true">#</a> 6. 总结</h4><figure><img src="'+c+'" alt="8-6-4" tabindex="0" loading="lazy"><figcaption>8-6-4</figcaption></figure>',54),r=[l];function u(d,k){return n(),s("div",null,r)}const h=a(i,[["render",u],["__file","8-6.转换流.html.vue"]]);export{h as default};
