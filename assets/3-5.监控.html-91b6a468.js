import{_ as n,o as a,c as s,e as t}from"./app-c8f1ef72.js";const e="/java-doc/img/frame/springboot/3-5-1.jpg",i="/java-doc/img/frame/springboot/3-5-2.jpg",p="/java-doc/img/frame/springboot/3-5-3.jpg",o="/java-doc/img/frame/springboot/3-5-4.jpg",l="/java-doc/img/frame/springboot/3-5-5.png",c="/java-doc/img/frame/springboot/3-5-6.jpg",d="/java-doc/img/frame/springboot/3-5-7.jpg",r="/java-doc/img/frame/springboot/3-5-8.jpg",u="/java-doc/img/frame/springboot/3-5-9.jpg",k="/java-doc/img/frame/springboot/3-5-10.jpg",g="/java-doc/img/frame/springboot/3-5-11.jpg",m="/java-doc/img/frame/springboot/3-5-12.jpg",h="/java-doc/img/frame/springboot/3-5-13.jpg",v="/java-doc/img/frame/springboot/3-5-14.jpg",b="/java-doc/img/frame/springboot/3-5-15.jpg",f="/java-doc/img/frame/springboot/3-5-16.jpg",y="/java-doc/img/frame/springboot/3-5-17.jpg",_={},x=t('<div class="hint-container tip"><p class="hint-container-title">提示</p><p>这里的监控是基本的，真的源代码的性能监控。</p><p>企业级开发会开发自定义专业监控：性能监控、业务监控、日志监控、大数据</p></div><h2 id="监控介绍" tabindex="-1"><a class="header-anchor" href="#监控介绍" aria-hidden="true">#</a> 监控介绍</h2><p>对于web开发，软件是一直在线运行的，再加上分布式集群部署，程序运行的稳定性越来也脆弱，而获知软件的运行健康状态显得尤为重要。</p><h4 id="_1-什么是监控" tabindex="-1"><a class="header-anchor" href="#_1-什么是监控" aria-hidden="true">#</a> 1. 什么是监控</h4><p>就是通过软件的方式展示另一个软件的运行情况，运行的情况则通过各种各样的指标数据反馈给监控人员。例如网络是否顺畅、服务器是否在运行、程序的功能是否能够整百分百运行成功，内存是否够用等。</p><p>现在的互联网程序大部分都是基于微服务的，且是以集群部署的，因此第一个要监控的指标就是服务是否正常运行，也就是<strong>监控服务状态是否处理宕机状态</strong></p><h4 id="_2-监控的内容" tabindex="-1"><a class="header-anchor" href="#_2-监控的内容" aria-hidden="true">#</a> 2.监控的内容</h4><p>对于现代的互联网程序来说，规模越来越大，功能越来越复杂，还要追求更好的客户体验，因此要监控的信息量也就比较大了。</p><ul><li>监控服务状态是否宕机：现在的互联网程序大部分都是基于微服务的，且是以集群部署的，因此第一个要监控的指标就是服务是否正常运行，也就是<strong>监控服务状态是否处理宕机状态</strong></li><li>监控服务运行指标（内存、虚拟机、线程、请求等）：web服务的客户量巨大，要考虑到用户体验。比如内存占用严重，请求无法及时响应处理等，这就是第二个要监控的重要指标，<strong>监控服务运行指标</strong>。</li><li>监控日志：监控具体的功能隐患，在不停机的情况下，监控系统运行情况，这就需要用到日志。</li><li>管理服务（服务下线）：由于突发情况的出现，例如服务器被攻击、服务器内存溢出等情况造成了服务器宕机，此时当前服务不能满足使用需要，就要将其重启甚至关闭，这就是管理服务。</li></ul><h4 id="_3-监控的实施方式" tabindex="-1"><a class="header-anchor" href="#_3-监控的实施方式" aria-hidden="true">#</a> 3. 监控的实施方式</h4><p>监控服务是独立的Spring Boot项目，它可以监控多个项目，将多个被监控的服务对应的监控指标信息汇总在一起（而不是一个项目一个监控面板，微服务的项目个数太多了）。</p><p>监控分为实施监控的项目（服务的）和要被监控的生产项目（客户端）</p><ul><li>服务端：显示监控信息的服务器，用于获取服务信息，并显示对应的信息</li><li>客户端：运行的服务，启动时主动上报，告知监控服务器自己需要受到监控</li></ul><figure><img src="'+e+`" alt="3-5-1" tabindex="0" loading="lazy"><figcaption>3-5-1</figcaption></figure><h4 id="_4-信息获取的方式" tabindex="-1"><a class="header-anchor" href="#_4-信息获取的方式" aria-hidden="true">#</a> 4. 信息获取的方式</h4><p>监控程序必须具有主动发起请求获取被监控服务信息的能力。如果被动获取被监控程序上报的信息，可能会出现<em>无法判断是信息一直没更新，还是对方已经宕机了</em></p><p>既然选择主动监控，就需要对方配合（开启信息接口），因此被监控的服务要能够与监控程序通信，告知对方来监控自己，且开放自己的接口（具体开发什么信息接口，可以做详细配置）。</p><h2 id="spring-boot-admin" tabindex="-1"><a class="header-anchor" href="#spring-boot-admin" aria-hidden="true">#</a> Spring Boot Admin</h2><p>Spring Boot Admin是一个开源的可视化监控平台，用用于管理和监控SpringBoot应用程序。</p><h4 id="_1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-介绍" aria-hidden="true">#</a> 1. 介绍</h4><p>Spring Boot Admin 包含有客户端和服务端两部分，而监控平台指的就是服务端。</p><p>我们做的程序如果需要被监控，就将我们做的程序添加客户端依赖，然后配置服务端地址后，服务端就可以通过HTTP请求的方式从客户端获取对应的信息，并通过UI界面展示对应信息。</p><p>其实服务端可以理解为是一个web程序，收到一些信息后展示这些信息。</p><h4 id="_2-创建-spring-boot-admin-服务端" tabindex="-1"><a class="header-anchor" href="#_2-创建-spring-boot-admin-服务端" aria-hidden="true">#</a> 2. 创建 Spring Boot Admin 服务端</h4><h5 id="_2-1-依赖" tabindex="-1"><a class="header-anchor" href="#_2-1-依赖" aria-hidden="true">#</a> 2.1 依赖</h5><div class="hint-container tip"><p class="hint-container-title">提示</p><p>要同时引入 spring-boot-starter-web ，这样才能开启SprigMVC，启动Tomcat，让程序成为<em>web程序</em>，从而能持续运行（否则就只会执行一次）。监控就是要持续的进行实时监控。</p></div><p>导入springboot admin对应的starter，版本与当前使用的springboot版本保持一致</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>de.codecentric<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-admin-starter-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.7.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实测：并不能完全与SpringBoot版本保持一致，只能保证基本一致，比如2.7.13版本就匹配不到，只能使用2.7.4版本，可以采用Spring Initializr的方式创建监控项目（它本身就是独立的项目）并勾选：Ops-&gt;* Spring Boot Admin(Server)，此时springboot admin就能自动获取版本信息了。</p><h5 id="_2-2-在启动类上开启监控" tabindex="-1"><a class="header-anchor" href="#_2-2-在启动类上开启监控" aria-hidden="true">#</a> 2.2 在启动类上开启监控</h5><p>在启动类上添加注解@EnableAdminServer，声明当前应用启动后作为SpringBootAdmin的服务器使用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableAdminServer</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MonitorApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MonitorApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-3-访问控制台" tabindex="-1"><a class="header-anchor" href="#_2-3-访问控制台" aria-hidden="true">#</a> 2.3 访问控制台</h5><p>配置好后就可以直接在浏览器上访问Spring Boot Admin 控制台了。</p><p>uri: <code>http://ip:port</code></p><figure><img src="`+i+`" alt="3-5-2" tabindex="0" loading="lazy"><figcaption>3-5-2</figcaption></figure><p>当前还没有被监控的项目，所以内容是空白的。</p><h4 id="_3-spring-boot-admin-客户端配置" tabindex="-1"><a class="header-anchor" href="#_3-spring-boot-admin-客户端配置" aria-hidden="true">#</a> 3. Spring Boot Admin 客户端配置</h4><h5 id="_3-1-依赖" tabindex="-1"><a class="header-anchor" href="#_3-1-依赖" aria-hidden="true">#</a> 3.1 依赖</h5><p>被监控的项目一般都是web项目。</p><p>导入springboot admin对应的starter，版本与当前使用的springboot版本保持一致</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>de.codecentric<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-admin-starter-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.7.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-2-上传客户端信息" tabindex="-1"><a class="header-anchor" href="#_3-2-上传客户端信息" aria-hidden="true">#</a> 3.2 上传客户端信息</h5><p>设置当前客户端将信息上传到哪个服务器上，通过yml文件配置</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">boot</span><span class="token punctuation">:</span>
    <span class="token key atrule">admin</span><span class="token punctuation">:</span>
      <span class="token key atrule">client</span><span class="token punctuation">:</span>
        <span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-3-再次查看服务的控制台" tabindex="-1"><a class="header-anchor" href="#_3-3-再次查看服务的控制台" aria-hidden="true">#</a> 3.3 再次查看服务的控制台</h5><figure><img src="`+p+'" alt="3-5-3" tabindex="0" loading="lazy"><figcaption>3-5-3</figcaption></figure><p>点击服务器选项就可以进去看到详情了，只是当前客户端没有开发什么信息，什么也看不到。</p><figure><img src="'+o+`" alt="3-5-4" tabindex="0" loading="lazy"><figcaption>3-5-4</figcaption></figure><h4 id="_3-客户端开放信息" tabindex="-1"><a class="header-anchor" href="#_3-客户端开放信息" aria-hidden="true">#</a> 3. 客户端开放信息</h4><p>客户端默认什么信息都没开放，需要自己在客户端配置文件中手动开放信息。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">boot</span><span class="token punctuation">:</span>
    <span class="token key atrule">admin</span><span class="token punctuation">:</span>
      <span class="token key atrule">client</span><span class="token punctuation">:</span>
        <span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8000</span>
<span class="token key atrule">management</span><span class="token punctuation">:</span>
  <span class="token key atrule">endpoint</span><span class="token punctuation">:</span>
    <span class="token key atrule">health</span><span class="token punctuation">:</span>
      <span class="token key atrule">show-details</span><span class="token punctuation">:</span> always <span class="token comment"># 默认是never，什么都不显示</span>
  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>
    <span class="token key atrule">web</span><span class="token punctuation">:</span>
      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>
        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">&quot;*&quot;</span> <span class="token comment"># 配置显示什么种类的信息，默认值是health</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面配置表示：显示所有种类的监控信息，其中健康信息要显示所有内容。</p><h4 id="_4-配置多个客户端" tabindex="-1"><a class="header-anchor" href="#_4-配置多个客户端" aria-hidden="true">#</a> 4. 配置多个客户端</h4><p>可以通过配置客户端的方式在其他的springboot程序中添加客户端坐标，这样当前服务器就可以监控多个客户端程序了。每个客户端展示不同的监控信息</p><h2 id="监控信息说明" tabindex="-1"><a class="header-anchor" href="#监控信息说明" aria-hidden="true">#</a> 监控信息说明</h2><p>当配置展示所有信息后，会展示如下图十几类监控信息。</p><figure><img src="`+l+'" alt="3-5-5" tabindex="0" loading="lazy"><figcaption>3-5-5</figcaption></figure><h4 id="_1-细节" tabindex="-1"><a class="header-anchor" href="#_1-细节" aria-hidden="true">#</a> 1. 细节</h4><p>细节分类的信息包括：</p><ul><li>信息</li><li>元数据：项目启动时间</li><li>健康：数据库、磁盘、网络</li><li>进程：进程运行的信息</li><li>垃圾回收：垃圾回收历史</li><li>线程：展示运行的线程，包括守护线程</li><li>内存：显示内存占用信息，包括Non heap</li></ul><figure><img src="'+c+'" alt="3-5-6" tabindex="0" loading="lazy"><figcaption>3-5-6</figcaption></figure><h4 id="_2-性能" tabindex="-1"><a class="header-anchor" href="#_2-性能" aria-hidden="true">#</a> 2. 性能</h4><p>可以添加任何性能指标进行监控，包括http请求的性能：</p><figure><img src="'+d+'" alt="3-5-7" tabindex="0" loading="lazy"><figcaption>3-5-7</figcaption></figure><h4 id="_3-环境" tabindex="-1"><a class="header-anchor" href="#_3-环境" aria-hidden="true">#</a> 3. 环境</h4><p>可以查看项目运行的所有环境设置（上百项），包括yml中配置的运行环境。</p><figure><img src="'+r+'" alt="3-5-8" tabindex="0" loading="lazy"><figcaption>3-5-8</figcaption></figure><h4 id="_4-类" tabindex="-1"><a class="header-anchor" href="#_4-类" aria-hidden="true">#</a> 4. 类</h4><div class="hint-container tip"><p class="hint-container-title">提示</p><p>内存中的类：web项目是持续提供服务的，因此初始化启动时，Tomcat会将非常多的类直接加载到内存中（一般是以单例的形式），方便以后调用（所以项目启动时间很长，但启动后再访问就很快）。</p></div><p>会监控所有加载到内存中的类，包括内置类和自定义的类（前提是设置了Bean注入）。</p><figure><img src="'+u+'" alt="3-5-9" tabindex="0" loading="lazy"><figcaption>3-5-9</figcaption></figure><h4 id="_5-配置属性" tabindex="-1"><a class="header-anchor" href="#_5-配置属性" aria-hidden="true">#</a> 5. 配置属性</h4><p>这里展示的是Spring配置属性，这些都是可以在yml中配置的，配置项有几百个，之所以有这么多，是因为大部分配置项是SpringBoot的默认值，不用我们配置。</p><figure><img src="'+k+'" alt="3-5-10" tabindex="0" loading="lazy"><figcaption>3-5-10</figcaption></figure><h4 id="_6-计划任务" tabindex="-1"><a class="header-anchor" href="#_6-计划任务" aria-hidden="true">#</a> 6. 计划任务</h4><p>系统中开启的定时任务。</p><h4 id="_7-日志配置" tabindex="-1"><a class="header-anchor" href="#_7-日志配置" aria-hidden="true">#</a> 7. 日志配置</h4><p>可以以类为单位设置日志的等级、开关日志。</p><figure><img src="'+g+'" alt="3-5-11" tabindex="0" loading="lazy"><figcaption>3-5-11</figcaption></figure><p>注意：这里只是日志配置，不能查看具体的日志。</p><h4 id="_8-jvm" tabindex="-1"><a class="header-anchor" href="#_8-jvm" aria-hidden="true">#</a> 8. JVM</h4><p>事实查看JVM信息，包括线程和内存</p><figure><img src="'+m+'" alt="3-5-12" tabindex="0" loading="lazy"><figcaption>3-5-12</figcaption></figure><h4 id="_9-映射" tabindex="-1"><a class="header-anchor" href="#_9-映射" aria-hidden="true">#</a> 9. 映射</h4><p>项目开放的所有API的详细信息，包括：</p><ul><li>url：显示的<code>http://host/</code>后面的的部分，包括参数</li><li>方法：该API的请求方式</li><li>返回内容类型：也就是响应的格式：一般为json</li><li>处理程序：处理该API的<code>类.方法</code></li></ul><p>这里列出了所有客户端暴漏的API，包括自定义的API和一些插件提供的API。</p><figure><img src="'+h+'" alt="3-5-13" tabindex="0" loading="lazy"><figcaption>3-5-13</figcaption></figure><h4 id="_10-缓存" tabindex="-1"><a class="header-anchor" href="#_10-缓存" aria-hidden="true">#</a> 10. 缓存</h4><p>显示缓存的详细信息，需要项目开启缓存。</p><h4 id="_11-日志报表" tabindex="-1"><a class="header-anchor" href="#_11-日志报表" aria-hidden="true">#</a> 11. 日志报表</h4><p>可以查看日志相亲，不过可视化做的一般，不如自己开发。</p><figure><img src="'+v+'" alt="3-5-14" tabindex="0" loading="lazy"><figcaption>3-5-14</figcaption></figure><h2 id="监控原理" tabindex="-1"><a class="header-anchor" href="#监控原理" aria-hidden="true">#</a> 监控原理</h2><p>查阅监控中的 <code>映射</code>，可以看到当前系统中可以运行的请求路径，有很多以 <code>/actuator</code> 开头</p><figure><img src="'+b+`" alt="3-5-15" tabindex="0" loading="lazy"><figcaption>3-5-15</figcaption></figure><h4 id="_1-actuator" tabindex="-1"><a class="header-anchor" href="#_1-actuator" aria-hidden="true">#</a> 1. actuator</h4><p>通过访问<code>/actuator</code>可知，监控中显示的信息实际上是通过发送<code>/actuator</code>开头的请求后得到json数据，然后再进行可视化的展示。</p><p>也就是说：监控平台中显示的信息实际上是通过对被监控的应用发送请求得到的。这些请求是springboot admin对应的client包中的一个<code>actuator</code>依赖包定义的。被监控的应用之所以可以对外提供上述请求路径，就是因为添加了这个包。</p><h4 id="_2-端点" tabindex="-1"><a class="header-anchor" href="#_2-端点" aria-hidden="true">#</a> 2. 端点</h4><p>Actuator，可以称为端点，描述了一组监控信息。</p><p>SpringBootAdmin提供了多个内置端点，通过访问端点就可以获取对应的监控信息，也可以根据需要自定义端点信息。通过发送请求路劲<code>/actuator</code>可以访问应用所有端点信息，如果端点中还有明细信息可以发送请求<code>/actuator/端点名称</code> 来获取详细信息。以下列出了所有端点信息说明：</p><table><thead><tr><th style="text-align:left;">ID</th><th>描述</th><th>默认启用</th></tr></thead><tbody><tr><td style="text-align:left;">auditevents</td><td>暴露当前应用程序的审计事件信息。</td><td>是</td></tr><tr><td style="text-align:left;">beans</td><td>显示应用程序中所有 Spring bean 的完整列表。</td><td>是</td></tr><tr><td style="text-align:left;">caches</td><td>暴露可用的缓存。</td><td>是</td></tr><tr><td style="text-align:left;">conditions</td><td>显示在配置和自动配置类上评估的条件以及它们匹配或不匹配的原因。</td><td>是</td></tr><tr><td style="text-align:left;">configprops</td><td>显示所有 @ConfigurationProperties 的校对清单。</td><td>是</td></tr><tr><td style="text-align:left;">env</td><td>暴露 Spring ConfigurableEnvironment 中的属性。</td><td>是</td></tr><tr><td style="text-align:left;">flyway</td><td>显示已应用的 Flyway 数据库迁移。</td><td>是</td></tr><tr><td style="text-align:left;">health</td><td>显示应用程序健康信息</td><td>是</td></tr><tr><td style="text-align:left;">httptrace</td><td>显示 HTTP 追踪信息（默认情况下，最后 100 个 HTTP 请求/响应交换）。</td><td>是</td></tr><tr><td style="text-align:left;">info</td><td>显示应用程序信息。</td><td>是</td></tr><tr><td style="text-align:left;">integrationgraph</td><td>显示 Spring Integration 图。</td><td>是</td></tr><tr><td style="text-align:left;">loggers</td><td>显示和修改应用程序中日志记录器的配置。</td><td>是</td></tr><tr><td style="text-align:left;">liquibase</td><td>显示已应用的 Liquibase 数据库迁移。</td><td>是</td></tr><tr><td style="text-align:left;">metrics</td><td>显示当前应用程序的指标度量信息。</td><td>是</td></tr><tr><td style="text-align:left;">mappings</td><td>显示所有 @RequestMapping 路径的整理清单。</td><td>是</td></tr><tr><td style="text-align:left;">scheduledtasks</td><td>显示应用程序中的调度任务。</td><td>是</td></tr><tr><td style="text-align:left;">sessions</td><td>允许从 Spring Session 支持的会话存储中检索和删除用户会话。当使用 Spring Session 的响应式 Web 应用程序支持时不可用。</td><td>是</td></tr><tr><td style="text-align:left;">shutdown</td><td>正常关闭应用程序。</td><td>否</td></tr><tr><td style="text-align:left;">threaddump</td><td>执行线程 dump。</td><td>是</td></tr><tr><td style="text-align:left;">heapdump</td><td>返回一个 hprof 堆 dump 文件。</td><td>是</td></tr><tr><td style="text-align:left;">jolokia</td><td>通过 HTTP 暴露 JMX bean（当 Jolokia 在 classpath 上时，不适用于 WebFlux）。</td><td>是</td></tr><tr><td style="text-align:left;">logfile</td><td>返回日志文件的内容（如果已设置 logging.file 或 logging.path 属性）。支持使用 HTTP Range 头来检索部分日志文件的内容。</td><td>是</td></tr><tr><td style="text-align:left;">prometheus</td><td>以可以由 Prometheus 服务器抓取的格式暴露指标。</td><td>是</td></tr></tbody></table><h4 id="_3-配置显示的端点" tabindex="-1"><a class="header-anchor" href="#_3-配置显示的端点" aria-hidden="true">#</a> 3. 配置显示的端点</h4><p>可以在SpringBoot Admin 客户端的yml文件总进行配置，指定那些端点对外开放。</p><p>配置分为两类：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">management</span><span class="token punctuation">:</span>
  <span class="token key atrule">endpoint</span><span class="token punctuation">:</span> <span class="token comment"># 配置指定端点,一般用来配置端点的开放情况</span>
    <span class="token key atrule">health</span><span class="token punctuation">:</span>	<span class="token comment"># 端点名称, health端点强制开放,不然就报错.</span>
      <span class="token key atrule">show-details</span><span class="token punctuation">:</span> always <span class="token comment"># 具体开放的内容</span>
    <span class="token key atrule">info</span><span class="token punctuation">:</span>	<span class="token comment"># 端点名称</span>
      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>	<span class="token comment"># 是否开放</span>
  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span> <span class="token comment"># 对所有端点进行配置</span>
    <span class="token key atrule">web</span><span class="token punctuation">:</span> <span class="token comment"># 哪些端点信息被允许通过HTTP请求获取（前提必须是已经开放的端点）</span>
      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>
        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">&quot;*&quot;</span> <span class="token comment"># * 表示开放所有端点的WEB端HTTP请求权限</span>
    <span class="token comment"># springboot admin设置了13个较为常用的端点作为默认开放的端点</span>
    <span class="token key atrule">enabled-by-default</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 默认端点的开放状态,默认true</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过management.endpoint控制那些端点禁止开放,通过endpoints进行端点的通用配置,包括那些端点允许通过HTTP请求访问。</p><h2 id="自定义端点信息" tabindex="-1"><a class="header-anchor" href="#自定义端点信息" aria-hidden="true">#</a> 自定义端点信息</h2><p>端点描述了被监控的信息，除了系统默认的指标，还可以自行添加显示的指标。</p><p>下面是三个示例，可以举一反三进行端点信息的二次开发。</p><h4 id="_1-info端点" tabindex="-1"><a class="header-anchor" href="#_1-info端点" aria-hidden="true">#</a> 1. INFO端点</h4><p>INFO端点就是应用的描述信息，这个信息Spring Boot提供不了，需要自己提前写。</p><p>info信息是写在application.yml中的，配置项就是info，info下有多个k-v，k-v就是配置要配置的数据</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">management</span><span class="token punctuation">:</span>
  <span class="token key atrule">endpoint</span><span class="token punctuation">:</span>
    <span class="token key atrule">health</span><span class="token punctuation">:</span>
      <span class="token key atrule">show-details</span><span class="token punctuation">:</span> always
  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>
    <span class="token key atrule">web</span><span class="token punctuation">:</span>
      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>
        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">&quot;*&quot;</span>
  <span class="token key atrule">info</span><span class="token punctuation">:</span> <span class="token comment"># info端点比较特殊，需要单独配置开启web端显示</span>
    <span class="token key atrule">env</span><span class="token punctuation">:</span>
      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 开启info信息的显示</span>


<span class="token key atrule">info</span><span class="token punctuation">:</span> <span class="token comment"># 配置要显示的info信息</span>
  <span class="token key atrule">appName</span><span class="token punctuation">:</span> 监控测试  <span class="token comment"># 以key-value的形式显示，可以任意配置</span>
  <span class="token key atrule">author</span><span class="token punctuation">:</span> @project.artifactId@ <span class="token comment"># 可以动态读取项目信息</span>
  <span class="token key atrule">version</span><span class="token punctuation">:</span> @project.version@
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="显示效果" tabindex="-1"><a class="header-anchor" href="#显示效果" aria-hidden="true">#</a> 显示效果</h5><figure><img src="`+f+`" alt="3-5-16" tabindex="0" loading="lazy"><figcaption>3-5-16</figcaption></figure><h5 id="复杂info信息" tabindex="-1"><a class="header-anchor" href="#复杂info信息" aria-hidden="true">#</a> 复杂info信息</h5><p>yml中的info信息过于简单，可以创建一个配置类，显示复杂的信息。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sgugo<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span> <span class="token comment">//加入bean，加载到内存</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ActuatorInfo</span> <span class="token keyword">implements</span> <span class="token class-name">InfoContributor</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contribute</span><span class="token punctuation">(</span><span class="token class-name">Info<span class="token punctuation">.</span>Builder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//添加单个信息</span>
        builder<span class="token punctuation">.</span><span class="token function">withDetail</span><span class="token punctuation">(</span><span class="token string">&quot;runTime&quot;</span><span class="token punctuation">,</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//添加一组信息</span>
        <span class="token class-name">Map</span> infoMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        infoMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;buildTime&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;2006&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        infoMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;status&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span><span class="token function">withDetails</span><span class="token punctuation">(</span>infoMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面添加的三个信息，会和yml中的信息一起显示在info中。</p><h4 id="_2-health端点" tabindex="-1"><a class="header-anchor" href="#_2-health端点" aria-hidden="true">#</a> 2. Health端点</h4><p>Health端点用来监控重要组件的运行状态，是最重要的端点，被监控的任何逐渐状态异常，都会导致服务无法正常运行。</p><p>Health默认会监控最基本的程序状态：磁盘空间（diskSpace）和网络（ping）。如果开启了其他服务，比如数据库、redis或mongodb，他们的状态也会显示在这里。</p><h5 id="_2-1-组件的状态" tabindex="-1"><a class="header-anchor" href="#_2-1-组件的状态" aria-hidden="true">#</a> 2.1 组件的状态</h5><p>当任意一个组件状态不为UP时，整体应用对外服务状态为非UP状态。</p><ul><li>UP：正常状态，组件运行正常</li><li>DOWN：组件掉线</li><li>OUT_OF_SERVICE：组件无法提供服务</li><li>UNKNOWN：组件状态未知</li></ul><h5 id="_2-2-配置health端点" tabindex="-1"><a class="header-anchor" href="#_2-2-配置health端点" aria-hidden="true">#</a> 2.2 配置Health端点</h5><p>health端点描述当前应用的运行健康指标，需要自定义配置类进行设置。</p><p>不要轻易添加健康指标，因为组件不健康会直接影响整个程序的运行。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StatusConfig</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractHealthIndicator</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doHealthCheck</span><span class="token punctuation">(</span><span class="token class-name">Health<span class="token punctuation">.</span>Builder</span> builder<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 一般用来动态的监控一个自定义的组件状态</span>
        <span class="token keyword">boolean</span> status <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// 定义组件状态为UP</span>
            builder<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token class-name">Status</span><span class="token punctuation">.</span><span class="token constant">UP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 暂时自定义信息，kv格式定义</span>
            builder<span class="token punctuation">.</span><span class="token function">withDetail</span><span class="token punctuation">(</span><span class="token string">&quot;什么情况&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;程序在正常运行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token comment">// 定义组件状态为DOWN</span>
            builder<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token class-name">Status</span><span class="token punctuation">.</span><span class="token constant">DOWN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            builder<span class="token punctuation">.</span><span class="token function">withDetail</span><span class="token punctuation">(</span><span class="token string">&quot;什么情况&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;太逊了，程序已经掉线&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-3-效果" tabindex="-1"><a class="header-anchor" href="#_2-3-效果" aria-hidden="true">#</a> 2.3 效果</h5><figure><img src="`+y+'" alt="3-5-17" tabindex="0" loading="lazy"><figcaption>3-5-17</figcaption></figure><h4 id="_3-metrics端点" tabindex="-1"><a class="header-anchor" href="#_3-metrics端点" aria-hidden="true">#</a> 3. Metrics端点</h4><p>Metrics属于性能监控端点，不过本质是列举了很多统计信息。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>实际开发中，我们不会在Spring Boot Admin上查看统计信息，而是要做专门的程序后台来查看。</p><p>暂略</p></div><h4 id="_4-自定义端点" tabindex="-1"><a class="header-anchor" href="#_4-自定义端点" aria-hidden="true">#</a> 4. 自定义端点</h4><div class="hint-container warning"><p class="hint-container-title">注意</p><p>自定义的端点意义不大，无法进行复杂的操作，也无法进行可视化渲染。</p><p>企业级开发，会开发专门的监控和大数据模块，不用再这里自定义端点进行监控。</p><p>暂略</p></div>',139),w=[x];function j(S,I){return a(),s("div",null,w)}const A=n(_,[["render",j],["__file","3-5.监控.html.vue"]]);export{A as default};
