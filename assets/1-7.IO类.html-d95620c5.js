import{_ as n,o as s,c as a,b as t}from"./app-2ea4aaaf.js";const e={},p=t(`<h2 id="i-inputstream-reader" tabindex="-1"><a class="header-anchor" href="#i-inputstream-reader" aria-hidden="true">#</a> Ⅰ. InputStream &amp; Reader</h2><div class="hint-container tip"><p class="hint-container-title">位置</p><p>rt.jar&gt;java&gt;io&gt;InputStream.java 【abstract】</p><p>rt.jar&gt;java&gt;io&gt;Reader.java 【abstract】</p></div><p>InputStream和Reader都是输入流，一个是读取字节的一个是读取字符的。</p><p>他们的方法基本都是一样的。</p><p><strong>结构</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1.InputStream</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">InputStream</span> <span class="token keyword">implements</span> <span class="token class-name">Closeable</span><span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token comment">//2.Reader</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Reader</span> <span class="token keyword">implements</span> <span class="token class-name">Readable</span><span class="token punctuation">,</span><span class="token class-name">Closeable</span><span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>构造器</strong></p><p>两个都是抽象类无法直接实现。</p><ul><li>下面例子均采用典型实现：FileInputStream和FileReader.</li><li>注意：读取文件需处理异常：FileNotFoundException</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">File</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;File/a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">FileInputStream</span> fs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">FileInputStream</span> fs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;File/a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方式二</span>

<span class="token class-name">File</span> f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;File/k.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;File/k.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//方式二</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-read-无参" tabindex="-1"><a class="header-anchor" href="#_1-read-无参" aria-hidden="true">#</a> 1. read 无参</h4><p>读取一个字节（字节流）或一个字符（字符流）</p><ul><li>InputStream：从输入流中读取数据的下一个字节。返回 0 到 255 范围内的 int 字节值。如果因 为已经到达流末尾而没有可用的字节，则返回值 -1</li><li>Reader：读取单个字符。作为整数读取的字符，范围在 0 到 65535 之间 (0x00-0xffff)（2个字节的Unicode码），如果已到达流的末尾，则返回 -1</li><li>该方法会抛出java.io.IOException异常</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">FileInputStream</span> steam <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;File/a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">FileReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;File/k.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//读取一次</span>
<span class="token keyword">int</span> steamRes <span class="token operator">=</span> steam<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>steamRes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//255,一个字节的二进制数据</span>

<span class="token keyword">char</span> readerRes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将字符的Unicode值转为字符</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>readerRes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//A,读到了字符A，转换成了65</span>

<span class="token comment">//循环读取:以FileReader为例</span>
<span class="token keyword">int</span> readData <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>readData <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>readData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    readData <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-read-一参" tabindex="-1"><a class="header-anchor" href="#_2-read-一参" aria-hidden="true">#</a> 2. read 一参</h4><p>一次读取多个字节/字符到数组中。</p><ul><li>InputSteam： int read(byte[] b)，从此输入流中将最多 b.length 个字节的数据读入一个 byte 数组中，如果因为已经到达流末尾而没有可用的字节，则返回值 -1。否则以整数形式返回实际读取的字节数</li><li>Reader： int read(char[] cbuf)，将字符读入数组。如果已到达流的末尾，则返回 -1。否则返回本次实际读取的字符数</li><li>该方法会抛出java.io.IOException异常</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">FileInputStream</span> steam <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;File/a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">FileReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;File/k.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//以FileReader读取字符为例</span>
<span class="token comment">//读取一次</span>
<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//设置每次读取的长度</span>
<span class="token keyword">int</span> len <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取一次，返回值是字符数</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[A,  , s],打印读取的字符数组</span>

<span class="token comment">//循环读取</span>
<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//设置每次读取的长度</span>
<span class="token keyword">int</span> len <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取一次，返回值是字符数</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>len <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    len <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-1-char-参数" tabindex="-1"><a class="header-anchor" href="#_2-1-char-参数" aria-hidden="true">#</a> 2.1 char[]参数</h5><p>可以当做读取数据的载体，没有他的时候，我们一次只能读1个字符，现在我们可以先将多个字符放入该数组中，然后一次读取多个字符。</p><h5 id="_2-2-byte-参数" tabindex="-1"><a class="header-anchor" href="#_2-2-byte-参数" aria-hidden="true">#</a> 2.2 byte[]参数</h5><p>同上，只是char[] 变成了 byte[]，读取的单位从字符变成了字节。</p><h5 id="_2-3-一个误区" tabindex="-1"><a class="header-anchor" href="#_2-3-一个误区" aria-hidden="true">#</a> 2.3 一个误区</h5><p><code>char[] cbuf = new char[5]</code>;</p><p>char数组每次装 5个字符，下一次装载字符时，并非是空数组过去的，而是5个字符还在，装载时进行新旧字符的替换。当字符取模5有余数时，最后一趟是装不满的，也就是会有字符没有被替换，这时如果将数组中的字符全部取下来，就会取到错误的字符。</p><h4 id="_3-read-三参" tabindex="-1"><a class="header-anchor" href="#_3-read-三参" aria-hidden="true">#</a> 3. read 三参</h4><p>该方法额外多了两个参数：off和len，即将字符读入数组时，从off处开始读，最多读len个字符(或字节），如果已到达流的末尾，则返回 -1。否则返回本次读取的字符数。</p><p>不是很常用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf<span class="token punctuation">,</span><span class="token keyword">int</span> off<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-close" tabindex="-1"><a class="header-anchor" href="#_4-close" aria-hidden="true">#</a> 4. close</h4><p>关闭流，该方法也需要处理异常：java.io.IOException，且close操作要方法其他异常的finally中。<br> 所有打开的流资源，都必须手动调用close方法进行关闭。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>

<span class="token class-name">FileInputStream</span> steam <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;File/a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">FileReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;File/k.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

stream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-outputstream-write" tabindex="-1"><a class="header-anchor" href="#ii-outputstream-write" aria-hidden="true">#</a> Ⅱ. OutputStream &amp; Write</h2><div class="hint-container tip"><p class="hint-container-title">位置</p><p>rt.jar&gt;java&gt;io&gt;Writer.java 【abstract】</p><p>rt.jar&gt;java&gt;io&gt;OutputStreamr.java 【abstract】</p></div><p>OutputStream和Write都是输出流，一个是往外写字节的，一个是往外写字符的。</p><p>他们的方法基本都是一样的。</p><p><strong>结构</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileWriter</span> <span class="token keyword">extends</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token class-name">Public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">OutputStream</span> <span class="token keyword">implements</span> <span class="token class-name">Closeable</span><span class="token punctuation">,</span> <span class="token class-name">Flushable</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用步骤</strong></p><ul><li>实例化：new构造器</li><li>写出：调用write()</li><li>刷新：flush，将写的内容刷入文件</li><li>关闭：close，关闭流</li></ul><h4 id="_1-实例化" tabindex="-1"><a class="header-anchor" href="#_1-实例化" aria-hidden="true">#</a> 1. 实例化</h4><p>OutputStream和Write都是抽象类，无法直接实例化。<br> 他们的常用实现类是：FileWriter和FileOutputStream。他们的方法基本是一样的。</p><ul><li>实例化的文件不存在：自动创建，前提是有权限</li><li>实例化的文件已经存在：覆盖或追加写，由参数决定</li><li>异常：会抛出IOException异常</li></ul><h5 id="_1-1-filewriter-实例化" tabindex="-1"><a class="header-anchor" href="#_1-1-filewriter-实例化" aria-hidden="true">#</a> 1.1 FileWriter 实例化</h5><ul><li>file：文件对象，数据会写到这个文件对象里。</li><li>fileName：文件名，直接使用文件名,构造器内部自动new File(文件名) <ul><li>数据直接写入指定的文件名创建的文件中，</li></ul></li><li>append参数：true=追加写；false=覆盖写(默认)</li><li>异常：会产生FileNotFoundException异常</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写入指定文件,覆盖写</span>
<span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">,</span> <span class="token keyword">boolean</span> append<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写入指定文件,自定义写入方式</span>
<span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写入指定文件名,覆盖写</span>
<span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">,</span> <span class="token keyword">boolean</span> append<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写入指定文件名,自定义写入方式</span>
<span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token class-name">FileDescriptor</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//略</span>

<span class="token class-name">FileWriter</span> fileWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">&quot;File/a.txt&quot;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fileWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;Batman&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-2-fileoutstream-实例化" tabindex="-1"><a class="header-anchor" href="#_1-2-fileoutstream-实例化" aria-hidden="true">#</a> 1.2 FileOutStream 实例化</h5><p>会产生IOException异常，参数同FileWriter。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写入指定文件,覆盖写</span>
<span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">,</span> <span class="token keyword">boolean</span> append<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写入指定文件,自定义写入方式</span>
<span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写入指定文件名,覆盖写</span>
<span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> append<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写入指定文件名,自定义写入方式</span>
<span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token class-name">FileDescriptor</span> fdObj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//略</span>

<span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;File/k.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fileWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-write-字符" tabindex="-1"><a class="header-anchor" href="#_2-write-字符" aria-hidden="true">#</a> 2. write 字符</h4><p>将字符写入指定的文件。</p><ul><li>参数 int c：写入0 到 65535 之间的Unicode码</li><li>参数 cbuf：写入字符数组</li><li>参数 str：写入：字符串</li><li>参数 int off &amp; int len：写入cbuf或str的某一部分。从off开始，写入len个字符</li><li>异常：会产生，IOException异常</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token comment">//写入Unicode</span>
<span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf<span class="token punctuation">)</span><span class="token comment">//写入char[]</span>
<span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf<span class="token punctuation">,</span><span class="token keyword">int</span> off<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token comment">//写入char[]的一部分</span>
<span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写入String</span>
<span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span><span class="token keyword">int</span> off<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token comment">//写入String的一部分</span>

<span class="token class-name">FileWriter</span> fileWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">&quot;File/a.txt&quot;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//覆盖写</span>
fileWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写入Unicode 97-&gt;a,a.txt中出现a</span>
<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;c&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;d&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
fileWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写入char[]数组,a.txt中出现了abcd</span>
fileWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;Batman&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写入字符串,a.txt中出现了Batman</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>空格与换行符</strong><br> 如果是追加写，每次写入的字符都是无空格连在一起的，在同一行。如果要进行换行和输入空格，就需要手动输入空格或换行符<code>\\n</code>。</p><h4 id="_3-write-字节流" tabindex="-1"><a class="header-anchor" href="#_3-write-字节流" aria-hidden="true">#</a> 3. write 字节流</h4><p>向一张图片上写入字符，图片就打不开了。</p><ul><li>int b：写入字节，0~255</li><li>byte[] b：将 b.length 个字节从指定的 byte 数组写入此输出流。write(b) 的常规协定是：应该与调用 write(b, 0, b.length) 的效果完全相同</li><li>int off &amp; int len：将指定 byte 数组中从偏移量 off 开始的 len 个字节写入此输出流</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写入0~255字节数据</span>
<span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写入byte[]</span>
<span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> off<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token comment">//写入byte[]的一部分</span>

<span class="token class-name">FileOutputStream</span> fos<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;File/b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>向一张图片上写入字符，图片就打不开了。</p><h4 id="_4-flush" tabindex="-1"><a class="header-anchor" href="#_4-flush" aria-hidden="true">#</a> 4. flush</h4><p>刷新该流的缓冲，则立即将它们写入预期目标。<br> 该方法若不调用，可能会导致写入失败。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">FileWriter</span> fileWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">&quot;File/a&quot;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">FileOutputStream</span> fos<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;File/b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token class-name">FileWriter</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-close" tabindex="-1"><a class="header-anchor" href="#_5-close" aria-hidden="true">#</a> 5. close</h4><p>关闭此输出流并释放与该流关联的所有系统资源。</p><p>如果有try...catch语句，close方法一定要放到finally语句里，以保证资源肯定能被关闭。</p><p>注意：该方法本身也会抛出异常，也需要进行处理。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>

<span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">&quot;File/a&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;I&#39;m Batman&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    fw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>fw <span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>
        fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iii-其他流的方法" tabindex="-1"><a class="header-anchor" href="#iii-其他流的方法" aria-hidden="true">#</a> Ⅲ. 其他流的方法</h2><h4 id="_1-readline" tabindex="-1"><a class="header-anchor" href="#_1-readline" aria-hidden="true">#</a> 1. readLine</h4><p>使用缓冲流：BufferedReader，读取一行。</p><p>该方法是读取一行数据（根据换行符来判定），并返回读到的数据，该方法是阻塞的，如果在接收的数据中不含有&#39;\\n&#39;,&#39;\\r&#39;或者结束符时，往往导致进程挂起，从而程序无法继续。</p><ul><li>如果读到文件的末尾就返回null。</li><li>在IO模式下，该方法是一直等待输入的，直到遇到换行符，才会结束执行。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>

<span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;files/a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span>
data <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-newline" tabindex="-1"><a class="header-anchor" href="#_2-newline" aria-hidden="true">#</a> 2. newLine</h4><p>使用缓冲流BufferedWrite，输入换行符。</p><p>在写出文件时，有时需要写出换行符，该方法就可以写出换行符，等价于 &quot;\\n&quot;</p>`,76),c=[p];function o(l,i){return s(),a("div",null,c)}const k=n(e,[["render",o],["__file","1-7.IO类.html.vue"]]);export{k as default};
