import{_ as s,o as n,c as a,e}from"./app-9f16a8fe.js";const t="/java-doc/img/java/javaweb/3-3-1.jpg",p={},o=e(`<h2 id="i-servlet-生命周期" tabindex="-1"><a class="header-anchor" href="#i-servlet-生命周期" aria-hidden="true">#</a> Ⅰ. Servlet 生命周期</h2><p>对象的生命周期指一个对象从被创建到被销毁的整个过程。Servlet运行在Servlet容器(web服务器)中，其生命周期由容器来管理，分为4个阶段</p><h4 id="_1-阶段1-加载和实例化" tabindex="-1"><a class="header-anchor" href="#_1-阶段1-加载和实例化" aria-hidden="true">#</a> 1. 阶段1：加载和实例化</h4><p>默认情况下，当Servlet第一次被访问时，由容器创建Servlet对象。该对象只会创建一次，Tomcat会将其常驻内存。</p><h5 id="_1-1-修改为启动servlet时创建" tabindex="-1"><a class="header-anchor" href="#_1-1-修改为启动servlet时创建" aria-hidden="true">#</a> 1.1 修改为启动Servlet时创建</h5><p>如果创建Servlet比较耗时的话，那么第一个访问的人等待的时间就比较长，用户的体验就比较差（注意：只会影响第一个访问的人而已，其实问题也不是很大），可以同设置，将Servlet的创建放到服务器启动的时候来创建。</p><p>通过修改@WebServlet注解中loadOnStartup的值来改变Servlet对象的创建时机：</p><ul><li>取值负整数:第一次访问时创建Servlet对象</li><li>0或正整数:服务器启动时创建Servlet对象，数字越小优先级越高</li></ul><h5 id="_1-2-线程安全问题" tabindex="-1"><a class="header-anchor" href="#_1-2-线程安全问题" aria-hidden="true">#</a> 1.2 线程安全问题</h5><ul><li>Servlet的init方法，只执行一次，说明一个Servlet在内存中只存在一个对象，Servlet是单例的，也就是说多个用户同时访问时，可能存在线程安全问题。</li><li>解决：尽量不要在Servlet中定义成员变量。即使定义了成员变量，也不要修改值</li></ul><h4 id="_2-阶段2-初始化" tabindex="-1"><a class="header-anchor" href="#_2-阶段2-初始化" aria-hidden="true">#</a> 2. 阶段2：初始化</h4><p>在Servlet实例化之后，容器将自动调用Servlet的init()方法初始化这个对象，完成一些如加载配置文件、创建连接等初始化的工作。该方法只调用一次。</p><h4 id="_3-阶段3-请求处理" tabindex="-1"><a class="header-anchor" href="#_3-阶段3-请求处理" aria-hidden="true">#</a> 3. 阶段3：请求处理</h4><p>每次请求Servlet时，Servlet容器都会调用Servlet的service()方法对请求进行处理</p><h4 id="_4-阶段4-服务终止" tabindex="-1"><a class="header-anchor" href="#_4-阶段4-服务终止" aria-hidden="true">#</a> 4. 阶段4：服务终止</h4><p>当需要释放内存或者容器关闭时，容器就会调用Servlet实例的destroy()方法完成资源的释放。在destroy()方法调用之后，容器会释放这个Servlet实例，该实例随后会被Java的垃圾收集器所回收。</p><h2 id="ii-servlet-方法" tabindex="-1"><a class="header-anchor" href="#ii-servlet-方法" aria-hidden="true">#</a> Ⅱ. Servlet 方法</h2><p>Servlet接口一共有五个方法，其中init、service、destroy会在生命周期中被调用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">;</span>
    
    <span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> var1<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> var2<span class="token punctuation">)</span> 
    <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
    
    <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-init-初始化" tabindex="-1"><a class="header-anchor" href="#_1-init-初始化" aria-hidden="true">#</a> 1. init：初始化</h4><p>初始化方法，默认在Servlet被第一次访问时调用，只执行一次。</p><p>可以通过将@WebServlet注解中的loadOnStartup修改为0或整数，将该方法的调用时机改为服务器启动时调用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> config<span class="token punctuation">)</span> 
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns<span class="token operator">=</span><span class="token string">&quot;/demo1&quot;</span><span class="token punctuation">,</span>loadOnStartup<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//修改调用时机</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> config<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
    <span class="token comment">//通过控制台观察代码块运行结果可知：该方法仅启动了一次</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;init...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-service-服务代码" tabindex="-1"><a class="header-anchor" href="#_2-service-服务代码" aria-hidden="true">#</a> 2. service：服务代码</h4><p>这是Servlet的最核心方法，业务逻辑就是写在该方法内的。</p><p>每次该servlet的url被访问，该方法都会执行一次，开发时，主要关注该方法。该方法会获取访问时的请求信息，并会将服务的响应返回给请求处（见后续章节：请求与响应）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> var1<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span> 
    <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">//观察可知：每次访问(刷新)配置的url，该方法中的代码块都会执行一次</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;servlet hello world~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-destroy-销毁方法" tabindex="-1"><a class="header-anchor" href="#_3-destroy-销毁方法" aria-hidden="true">#</a> 3. destroy：销毁方法</h4><p>内存释放或者服务器关闭的时候，Servlet对象会被销毁，调用。</p><p>由于Servlet对象指挥创建一次，因此也只能销毁一次，所以该方法只会执行一次。</p><p>注意：只有服务器正常关闭时，才会执行destroy方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//通过控制台观察代码块运行结果可知：该方法仅运行了一次</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;destroy...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-getservletinfo-获取servlet信息" tabindex="-1"><a class="header-anchor" href="#_4-getservletinfo-获取servlet信息" aria-hidden="true">#</a> 4. getServletInfo：获取Servlet信息</h4><p>该方法用来返回Servlet的相关信息，如版本、作者等。</p><p>没有什么太大的用处，一般我们返回一个空字符串即可</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-getservletconfig-获取servletconfig对象" tabindex="-1"><a class="header-anchor" href="#_5-getservletconfig-获取servletconfig对象" aria-hidden="true">#</a> 5. getServletConfig：获取ServletConfig对象</h4><p>ServletConfig对象，在init方法的参数中有，而Tomcat Web服务器在创建Servlet对象的时候会调用init方法，必定会传入一个ServletConfig对象，我们只需要将服务器传过来的ServletConfig进行返回即可。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo1</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">ServletConfig</span> servletConfig<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> config<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>servletConfig <span class="token operator">=</span> config<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;init...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> servletConfig<span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iii-servlet-体系结构" tabindex="-1"><a class="header-anchor" href="#iii-servlet-体系结构" aria-hidden="true">#</a> Ⅲ. Servlet 体系结构</h2><p>要想编写一个Servlet就必须要实现Servlet接口，重写接口中的5个方法，虽然已经能完成要求，但是编写起来还是比较麻烦的，因为我们更关注的其实只有service方法。</p><h4 id="_1-servlet的体系结构-继承结构" tabindex="-1"><a class="header-anchor" href="#_1-servlet的体系结构-继承结构" aria-hidden="true">#</a> 1. Servlet的体系结构（继承结构）</h4><p>Servlet接口有一个实现类：</p><ul><li>GenericServlet抽象类。该类也有一个实现类： <ul><li>HttpServlet抽象类</li></ul></li></ul><figure><img src="`+t+`" alt="3-3-1" tabindex="0" loading="lazy"><figcaption>3-3-1</figcaption></figure><h4 id="_2-genericservlet抽象类" tabindex="-1"><a class="header-anchor" href="#_2-genericservlet抽象类" aria-hidden="true">#</a> 2. GenericServlet抽象类</h4><p>GenericServlet将Servlet接口中其他的方法做了默认空实现，只将service()方法作为抽象。</p><p>因此：将来定义Servlet类时，可以继承GenericServlet，仅实现service()方法即可</p><h4 id="_3-httpservlet抽象类" tabindex="-1"><a class="header-anchor" href="#_3-httpservlet抽象类" aria-hidden="true">#</a> 3. HttpServlet抽象类</h4><p>在JavaWeb开发中，我们在Servlet中写的代码其实就是对http协议请求的一种响应。即接收get/post等一些列类型的请求，并进行一些操作。而在每次操作前，首要任务就是判断请求类型，每个servlet的实现类都需要进行判断，非常繁琐，因此有了HttpServlet。</p><p>HttpServlet是对http协议的一种封装，简化操作，该类是没有抽象方法的抽象类。并提供了真的不同请求方式的请求方法。</p><h4 id="_4-servlet类的选择" tabindex="-1"><a class="header-anchor" href="#_4-servlet类的选择" aria-hidden="true">#</a> 4. Servlet类的选择</h4><p>因为我们将来开发B/S架构的web项目，都是针对HTTP协议，所以我们自定义Servlet,会通过继承HttpServlet</p><h4 id="_5-httpservlet的使用" tabindex="-1"><a class="header-anchor" href="#_5-httpservlet的使用" aria-hidden="true">#</a> 5. HttpServlet的使用</h4><ul><li>注意1：这里是继承HttpServlet 类，而不是实现，HttpServlet是抽象类，不是接口。</li><li>注意2：HttpServlet类中没有抽象方法，因此只需要按需重写方法即可。</li></ul><h5 id="_5-1-请求方式" tabindex="-1"><a class="header-anchor" href="#_5-1-请求方式" aria-hidden="true">#</a> 5.1 请求方式</h5><p>请求方式一共有7种，HttpServlet中也对每种请求方式做了定义。</p><p>实际开发中，根据需求，重写对应请求方式的doXxx方法，一般doPost和doGet是要被重写的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">METHOD_DELETE</span> <span class="token operator">=</span> <span class="token string">&quot;DELETE&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">METHOD_HEAD</span> <span class="token operator">=</span> <span class="token string">&quot;HEAD&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">METHOD_GET</span> <span class="token operator">=</span> <span class="token string">&quot;GET&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">METHOD_OPTIONS</span> <span class="token operator">=</span> <span class="token string">&quot;OPTIONS&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">METHOD_POST</span> <span class="token operator">=</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">METHOD_PUT</span> <span class="token operator">=</span> <span class="token string">&quot;PUT&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">METHOD_TRACE</span> <span class="token operator">=</span> <span class="token string">&quot;TRACE&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-2-编写格式" tabindex="-1"><a class="header-anchor" href="#_5-2-编写格式" aria-hidden="true">#</a> 5.2 编写格式</h5><p>仅考虑重写doGet和doPost方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/demo2&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo2</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> 
        <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//super.doGet(req, resp);</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;GET 请求方式的处理逻辑&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> 
        <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//super.doPost(req, resp);</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Post 请求方式的处理逻辑&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上方的代码。</p><ul><li>通过浏览器地址栏请求该Servlet，doGet方法被调用了。</li><li>通过表达的post方式请求该Servlet，doPost方法被调用了。</li></ul><h4 id="_6-httpservlet的原理" tabindex="-1"><a class="header-anchor" href="#_6-httpservlet的原理" aria-hidden="true">#</a> 6. HttpServlet的原理</h4><p>HttpServlet中为什么要根据请求方式的不同，调用不同的方法? 如何调用的?</p><h5 id="_6-1-手动实现httpservlet的逻辑" tabindex="-1"><a class="header-anchor" href="#_6-1-手动实现httpservlet的逻辑" aria-hidden="true">#</a> 6.1 手动实现HttpServlet的逻辑</h5><p>为了验证第一个问题，这里来通过继承原始的Servlet类，来手动实现server方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/demo&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">)</span> 
        <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span>req<span class="token punctuation">;</span>
        <span class="token comment">//1. 获取请求方式</span>
        <span class="token class-name">String</span> method <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2. 判断</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// get方式的处理逻辑</span>
            <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// post方式的处理逻辑</span>
            <span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//其它四个重写的接口方法暂不考虑</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了MyServlet这个指定的类后，以后我们再编写Servlet类的时候，只需要继承MyHttpServlet，重写父类中的doGet和doPost方法，就可以用来处理GET和POST请求的业务逻辑。</p><p>将来页面发送的是GET请求，则会进入到doGet方法中进行执行，如果是POST请求，则进入到doPost方法。这样代码在编写的时候就相对来说更加简单快捷。</p><p>而HttpServlet的原理也是如此。</p><h5 id="_6-2-意义" tabindex="-1"><a class="header-anchor" href="#_6-2-意义" aria-hidden="true">#</a> 6.2 意义</h5><p>在JavaWeb开发中，我们在Servlet中写的代码其实就是对http协议请求的一种响应。</p><p>接收get/post等一些列类型的请求，并进行一些操作。而在每次操作前，首要任务就是判断请求类型，每个servlet的实现类都需要进行判断，非常繁琐，因此有了HttpServlet。</p><p>HttpServlet是对http协议的一种封装，简化操作，该类是没有抽象方法的抽象类。并提供了真的不同请求方式的请求方法。</p>`,76),l=[o];function c(i,r){return n(),a("div",null,l)}const k=s(p,[["render",c],["__file","3-3.Servlet对象.html.vue"]]);export{k as default};
