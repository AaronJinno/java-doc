import{_ as l,r as o,o as i,c as p,a as n,b as s,d as t,e}from"./app-9c74391d.js";const c="/java-doc/img/java/javaweb/1-8-1.jpg",r="/java-doc/img/java/javaweb/1-8-2.jpg",u={},d=e('<h2 id="i-连接池介绍" tabindex="-1"><a class="header-anchor" href="#i-连接池介绍" aria-hidden="true">#</a> Ⅰ. 连接池介绍</h2><h4 id="_1-jdbc数据连接池的必要性" tabindex="-1"><a class="header-anchor" href="#_1-jdbc数据连接池的必要性" aria-hidden="true">#</a> 1. JDBC数据连接池的必要性</h4><h5 id="_1-1-在使用开发基于数据库的web程序时-传统的模式基本是按以下步骤" tabindex="-1"><a class="header-anchor" href="#_1-1-在使用开发基于数据库的web程序时-传统的模式基本是按以下步骤" aria-hidden="true">#</a> 1.1 在使用开发基于数据库的web程序时，传统的模式基本是按以下步骤：</h5><ul><li>在主程序（如servlet、beans）中建立数据库连接</li><li>进行sql操作</li><li>断开数据库连接</li></ul><h5 id="_1-2-这种模式开发-存在的问题" tabindex="-1"><a class="header-anchor" href="#_1-2-这种模式开发-存在的问题" aria-hidden="true">#</a> 1.2 这种模式开发，存在的问题:</h5><ul><li>普通的JDBC数据库连接使用 数据库驱动来获取，每次向数据库建立连接的时候都要将 Connection 加载到内存中，再验证用户名和密码(得花费0.05s～1s的时间)。需要数据库连接的时候，就向数据库要求一个，执行完成后再断开连接。 <ul><li>这样的方式将会消耗大量的资源和时间。</li><li>数据库的连接资源并没有得到很好的重复利用。若同时有几百人甚至几千人在线，频繁的进行数据库连接操作将占用很多的系统资源，严重的甚至会造成服务器的崩溃。</li></ul></li><li>对于每一次数据库连接，使用完后都得断开。否则，如果程序出现异常而未能关闭，将会导致数据库系统中的内存泄漏（未关闭数据库连接，导致连接一直存在，最终将导致重启数据库。</li><li>这种开发不能控制被创建的连接对象数，系统资源会被毫无顾及的分配出去，如连接过多，也可能导致内存泄漏，服务器崩溃。</li></ul><h4 id="_2-数据库连接池技术介绍" tabindex="-1"><a class="header-anchor" href="#_2-数据库连接池技术介绍" aria-hidden="true">#</a> 2. 数据库连接池技术介绍</h4><p>为解决传统开发中的数据库连接问题，可以采用数据库连接池技术。</p><h5 id="_2-1-数据库连接池的基本思想" tabindex="-1"><a class="header-anchor" href="#_2-1-数据库连接池的基本思想" aria-hidden="true">#</a> 2.1 数据库连接池的基本思想</h5><p>就是为数据库连接建立一个“缓冲池”。预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从“缓冲池”中取出一个，使用完毕之后再放回去。</p><p>数据库连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个。</p><h5 id="_2-2-工作方式" tabindex="-1"><a class="header-anchor" href="#_2-2-工作方式" aria-hidden="true">#</a> 2.2 工作方式</h5><p>数据库连接池在初始化时将创建一定数量的数据库连接放到连接池中，这些数据库连接的数量是由最小数据库连接数来设定的。无论这些数据库连接是否被使用，连接池都将一直保证至少拥有这么多的连接数量。连接池的最大数据库连接数量限定了这个连接池能占有的最大连接数，当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列中。</p><figure><img src="'+c+'" alt="1-8-1" tabindex="0" loading="lazy"><figcaption>1-8-1</figcaption></figure><h4 id="_3-数据库连接池工作原理" tabindex="-1"><a class="header-anchor" href="#_3-数据库连接池工作原理" aria-hidden="true">#</a> 3. 数据库连接池工作原理</h4><ul><li>连接数据库：从连接池拿出一个连接对象</li><li>断开数据库：将连接对象放回连接池</li></ul><figure><img src="'+r+'" alt="1-8-2" tabindex="0" loading="lazy"><figcaption>1-8-2</figcaption></figure><h4 id="_4-数据库连接池的优点" tabindex="-1"><a class="header-anchor" href="#_4-数据库连接池的优点" aria-hidden="true">#</a> 4. 数据库连接池的优点</h4><ul><li>资源重用：由于数据库连接得以重用，避免了频繁创建，释放连接引起的大量性能开销。在减少系统消耗的基础上，另一方面也增加了系统运行环境的平稳性。</li><li>更快的系统反应速度：数据库连接池在初始化过程中，往往已经创建了若干数据库连接置于连接池中备用。此时连接的初始化工作均已完成。对于业务请求处理而言，直接利用现有可用连接，避免了数据库连接初始化和释放过程的时间开销，从而减少了系统的响应时间</li><li>新的资源分配手段：对于多应用共享同一数据库的系统而言，可在应用层通过数据库连接池的配置，实现某一应用最大可用数据库连接数的限制，避免某一应用独占所有的数据库资源</li><li>统一的连接管理，避免数据库连接泄漏：在较为完善的数据库连接池实现中，可根据预先的占用超时设定，强制回收被占用连接，从而避免了常规数据库连接操作中可能出现的资源泄露</li></ul><h4 id="_5-开源的数据库连接池技术" tabindex="-1"><a class="header-anchor" href="#_5-开源的数据库连接池技术" aria-hidden="true">#</a> 5. 开源的数据库连接池技术</h4><p>JDBC 的数据库连接池使用 javax.sql.DataSource 来表示，DataSource 只是一个接口，该接口通常由服务器(Weblogic, WebSphere, Tomcat)提供实现，也有一些开源组织提供实现。</p><ul><li>DBCP 是Apache提供的数据库连接池。tomcat 服务器自带dbcp数据库连接池。速度相对c3p0较快，但因自身存在BUG，Hibernate3已不再提供支持。</li><li>C3P0 是一个开源组织提供的一个数据库连接池，速度相对较慢，稳定性还可以。hibernate官方推荐使用</li><li>Proxool 是sourceforge下的一个开源项目数据库连接池，有监控连接池状态的功能，稳定性较c3p0差一点</li><li>BoneCP 是一个开源组织提供的数据库连接池，速度快</li><li>Druid 是阿里提供的数据库连接池，据说是集DBCP 、C3P0 、Proxool 优点于一身的数据库连接池，但是速度不确定是否有BoneCP快【常用】</li></ul><p>DataSource用来取代DriverManager来获取Connection，获取速度快，同时可以大幅度提高数据库访问速度。</p><h5 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h5><ul><li>数据源和数据库连接不同，数据源无需创建多个，它是产生数据库连接的工厂，因此整个应用只需要一个数据源即可。</li><li>当数据库访问结束后，程序还是像以前一样关闭数据库连接：conn.close(); 但conn.close()并没有关闭数据库的物理连接，它仅仅把数据库连接释放，归还给了数据库连接池。</li></ul><h2 id="ii-druid-德鲁伊" tabindex="-1"><a class="header-anchor" href="#ii-druid-德鲁伊" aria-hidden="true">#</a> Ⅱ. Druid：德鲁伊</h2><p>Druid是阿里巴巴开源平台上一个数据库连接池实现，它结合了C3P0、DBCP、Proxool等DB池的优点，同时加入了日志监控，可以很好的监控DB池连接和SQL的执行情况，可以说是针对监控而生的DB连接池，<strong>可以说是目前最好的连接池之一。</strong></p><h4 id="_1-加载驱动-jar包" tabindex="-1"><a class="header-anchor" href="#_1-加载驱动-jar包" aria-hidden="true">#</a> 1. 加载驱动（jar包）</h4>',28),k={href:"https://druid.apache.org/downloads.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/alibaba/druid/releases",target:"_blank",rel:"noopener noreferrer"},h=e(`<p>下载jar包，并将jar包导入项目</p><h4 id="_2-使用德鲁伊" tabindex="-1"><a class="header-anchor" href="#_2-使用德鲁伊" aria-hidden="true">#</a> 2. 使用德鲁伊</h4><p>只考虑使用配置文件获取Druid连接池的方法，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span></span><span class="token class-name">DruidDataSourceFactory</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>
    <span class="token class-name">Properties</span> pros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                            <span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;druid.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//1.加载配置文件</span>
    pros<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//2.使用工厂方法，创建连接池，参数是配置文件输入流</span>
    <span class="token class-name">DataSource</span> source <span class="token operator">=</span> <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>pros<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//3.获取数据库连接对象,</span>
    <span class="token class-name">Connection</span> conn <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-配置文件" tabindex="-1"><a class="header-anchor" href="#_3-配置文件" aria-hidden="true">#</a> 3. 配置文件</h4><p>src/druid.properties</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>url<span class="token operator">=</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>test<span class="token operator">?</span>rewriteBatchedStatements<span class="token operator">=</span><span class="token boolean">true</span>
username<span class="token operator">=</span>root
password<span class="token operator">=</span><span class="token number">123456</span>
driverClassName<span class="token operator">=</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>Driver</span>

initialSize<span class="token operator">=</span><span class="token number">10</span> <span class="token comment">//初始化数据库连接池时连接的数量</span>
maxActive<span class="token operator">=</span><span class="token number">20</span> <span class="token comment">//最大连接池数量</span>
maxWait<span class="token operator">=</span><span class="token number">1000</span>  <span class="token comment">//获取连接时最大等待时间，单位毫秒。</span>
filters<span class="token operator">=</span>wall  <span class="token comment">//跟日志相关的配置</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-配置项" tabindex="-1"><a class="header-anchor" href="#_4-配置项" aria-hidden="true">#</a> 4. 配置项</h4><p>配置项如下：</p>`,9),v=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"配置"),n("th",{style:{"text-align":"left"}},"缺省"),n("th",{style:{"text-align":"left"}},"说明")])],-1),f=n("tr",null,[n("td",{style:{"text-align":"left"}},"name"),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}},"配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。 如果没有配置，将会生成一个名字，格式是：”DataSource-” + System.identityHashCode(this)")],-1),g=n("tr",null,[n("td",{style:{"text-align":"left"}},"url"),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}},"连接数据库的url，不同数据库不一样。例如：mysql : jdbc:mysql://10.20.153.104:3306/druid2 oracle : jdbc:oracle:thin:@10.20.149.85:1521:ocnauto")],-1),b=n("tr",null,[n("td",{style:{"text-align":"left"}},"username"),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}},"连接数据库的用户名")],-1),y=n("td",{style:{"text-align":"left"}},"password",-1),_=n("td",{style:{"text-align":"left"}},null,-1),x={style:{"text-align":"left"}},C={href:"https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter",target:"_blank",rel:"noopener noreferrer"},w=n("tr",null,[n("td",{style:{"text-align":"left"}},"driverClassName"),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}},"根据url自动识别 这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)")],-1),D=n("tr",null,[n("td",{style:{"text-align":"left"}},"initialSize"),n("td",{style:{"text-align":"left"}},"0"),n("td",{style:{"text-align":"left"}},"初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时")],-1),S=n("tr",null,[n("td",{style:{"text-align":"left"}},"maxActive"),n("td",{style:{"text-align":"left"}},"8"),n("td",{style:{"text-align":"left"}},"最大连接池数量")],-1),j=n("tr",null,[n("td",{style:{"text-align":"left"}},"maxIdle"),n("td",{style:{"text-align":"left"}},"8"),n("td",{style:{"text-align":"left"}},"已经不再使用，配置了也没效果")],-1),B=n("tr",null,[n("td",{style:{"text-align":"left"}},"minIdle"),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}},"最小连接池数量")],-1),P=n("tr",null,[n("td",{style:{"text-align":"left"}},"maxWait"),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}},"获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。")],-1),q=n("tr",null,[n("td",{style:{"text-align":"left"}},"poolPreparedStatements"),n("td",{style:{"text-align":"left"}},"false"),n("td",{style:{"text-align":"left"}},"是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。")],-1),E=n("tr",null,[n("td",{style:{"text-align":"left"}},"maxOpenPreparedStatements"),n("td",{style:{"text-align":"left"}},"-1"),n("td",{style:{"text-align":"left"}},"要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100")],-1),I=n("tr",null,[n("td",{style:{"text-align":"left"}},"validationQuery"),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}},"用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。")],-1),L=n("tr",null,[n("td",{style:{"text-align":"left"}},"testOnBorrow"),n("td",{style:{"text-align":"left"}},"true"),n("td",{style:{"text-align":"left"}},"申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。")],-1),R=n("tr",null,[n("td",{style:{"text-align":"left"}},"testOnReturn"),n("td",{style:{"text-align":"left"}},"false"),n("td",{style:{"text-align":"left"}},"归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能")],-1),W=n("tr",null,[n("td",{style:{"text-align":"left"}},"testWhileIdle"),n("td",{style:{"text-align":"left"}},"false"),n("td",{style:{"text-align":"left"}},"建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。")],-1),F=n("tr",null,[n("td",{style:{"text-align":"left"}},"timeBetweenEvictionRunsMillis"),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}},"有两个含义： 1)Destroy线程会检测连接的间隔时间2)testWhileIdle的判断依据，详细看testWhileIdle属性的说明")],-1),J=n("tr",null,[n("td",{style:{"text-align":"left"}},"numTestsPerEvictionRun"),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}},"不再使用，一个DruidDataSource只支持一个EvictionRun")],-1),T=n("tr",null,[n("td",{style:{"text-align":"left"}},"minEvictableIdleTimeMillis"),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}})],-1),N=n("tr",null,[n("td",{style:{"text-align":"left"}},"connectionInitSqls"),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}},"物理连接初始化的时候执行的sql")],-1),Q=n("tr",null,[n("td",{style:{"text-align":"left"}},"exceptionSorter"),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}},"根据dbType自动识别 当数据库抛出一些不可恢复的异常时，抛弃连接")],-1),A=n("tr",null,[n("td",{style:{"text-align":"left"}},"filters"),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}},"属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall")],-1),O=n("tr",null,[n("td",{style:{"text-align":"left"}},"proxyFilters"),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}},"类型是List，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系")],-1),U=e(`<h4 id="_5-jdbcutils" tabindex="-1"><a class="header-anchor" href="#_5-jdbcutils" aria-hidden="true">#</a> 5. JDBCUtils</h4><p>连接池应该放到之前建立的JDBC功能类：JDBCUtils中。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">DataSource</span> source<span class="token punctuation">;</span>
  <span class="token keyword">static</span><span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token class-name">Properties</span> pros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                              <span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;druid.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
      pros<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>
      source <span class="token operator">=</span> <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>pros<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Connection</span> <span class="token function">getConnection3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">{</span>
    <span class="token class-name">Connection</span> conn <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> conn<span class="token punctuation">;</span> <span class="token comment">//返回一个数据库连接，从池子里拿出一个数据库连接</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-使用示例" tabindex="-1"><a class="header-anchor" href="#_6-使用示例" aria-hidden="true">#</a> 6. 使用示例</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetCustomerById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      conn <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">Customer</span> cust <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">getCustomerById</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cust<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>
      <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function z(M,V){const a=o("ExternalLinkIcon");return i(),p("div",null,[d,n("ul",null,[n("li",null,[n("a",k,[s("下载页"),t(a)])]),n("li",null,[n("a",m,[s("github页"),t(a)])])]),h,n("table",null,[v,n("tbody",null,[f,g,b,n("tr",null,[y,_,n("td",x,[s("连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细看"),n("a",C,[s("这里"),t(a)])])]),w,D,S,j,B,P,q,E,I,L,R,W,F,J,T,N,Q,A,O])]),U])}const H=l(u,[["render",z],["__file","1-8.数据库连接池.html.vue"]]);export{H as default};
