import{_ as a,o as i,c as e,e as l}from"./app-ab36e818.js";const r="/java-doc/img/java/javaweb/6-2-1.jpg",d="/java-doc/img/java/javaweb/6-2-2.jpg",c="/java-doc/img/java/javaweb/6-2-3.jpg",o="/java-doc/img/java/javaweb/6-2-4.jpg",t={},h=l('<h2 id="i-mvc" tabindex="-1"><a class="header-anchor" href="#i-mvc" aria-hidden="true">#</a> Ⅰ. MVC</h2><h4 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述" aria-hidden="true">#</a> 1. 概述</h4><p>MVC 是一种分层开发的模式，其中</p><ul><li>M：Model，业务模型，处理业务【JavaBean】 <ul><li>完成具体的业务操作，如：查询数据库，封装对象</li></ul></li><li>V：View，视图，界面展示【前端】 <ul><li>展示数据</li></ul></li><li>C：Controller，控制器。Servlet <ul><li>获取用户的输入</li><li>调用模型</li><li>将数据交给视图进行展示</li></ul></li></ul><h4 id="_2-过程" tabindex="-1"><a class="header-anchor" href="#_2-过程" aria-hidden="true">#</a> 2. 过程</h4><p>控制器（serlvlet）用来接收浏览器发送过来的请求，控制器调用模型（JavaBean）来获取数据，比如从数据库查询数据；控制器获取到数据后再交由视图（JSP）进行数据展示</p><figure><img src="'+r+'" alt="6-2-1" tabindex="0" loading="lazy"><figcaption>6-2-1</figcaption></figure><h4 id="_3-mvc的优点" tabindex="-1"><a class="header-anchor" href="#_3-mvc的优点" aria-hidden="true">#</a> 3. MVC的优点</h4><ul><li>职责单一，互不影响。每个角色做它自己的事，各司其职。</li><li>有利于分工协作。</li><li>有利于组件重用</li></ul><h2 id="ii-三层架构" tabindex="-1"><a class="header-anchor" href="#ii-三层架构" aria-hidden="true">#</a> Ⅱ. 三层架构</h2><p>三层架构</p><h4 id="_1-概述-1" tabindex="-1"><a class="header-anchor" href="#_1-概述-1" aria-hidden="true">#</a> 1. 概述</h4><p>三层架构是将我们的项目分成了三个层面，分别是 <code>表现层</code>、<code>业务逻辑层</code>、<code>数据访问层</code>。</p><ul><li>数据访问层：对数据库的CRUD基本操作</li><li>业务逻辑层：对业务逻辑进行封装，组合数据访问层层中基本功能，形成复杂的业务逻辑功能。 <ul><li>例如 注册业务功能 ，我们会先调用 数据访问层 的 selectByName() 方法判断该用户名是否存在，如果不存在再调用 数据访问层 的 insert() 方法进行数据的添加操作</li></ul></li><li>表现层：接收请求，封装数据，调用业务逻辑层，响应数据</li></ul><figure><img src="'+d+'" alt="6-2-2" tabindex="0" loading="lazy"><figcaption>6-2-2</figcaption></figure><h4 id="_2-业务流程" tabindex="-1"><a class="header-anchor" href="#_2-业务流程" aria-hidden="true">#</a> 2. 业务流程</h4><p>浏览器发送请求，表现层的Servlet接收请求并调用业务逻辑层的方法进行业务逻辑处理，而业务逻辑层方法调用数据访问层方法进行数据的操作，依次返回到serlvet，然后servlet将数据交由 JSP 进行展示。</p><h4 id="_3-命名" tabindex="-1"><a class="header-anchor" href="#_3-命名" aria-hidden="true">#</a> 3. 命名</h4><p>三层架构的每一层都有特有的包名称：</p><ul><li>表现层： controller 或者 web</li><li>业务逻辑层：service</li><li>数据访问层：dao 或者 mapper（如果使用MyBatis）</li></ul><h4 id="_4-框架" tabindex="-1"><a class="header-anchor" href="#_4-框架" aria-hidden="true">#</a> 4. 框架</h4><p>SSM框架就是对三层架构的封装，不同的框架对应不同的层。</p><ul><li>SpringMVC：表现层</li><li>Spring：业务逻辑层</li><li>MyBatis：数据访问层</li></ul><figure><img src="'+c+'" alt="6-2-3" tabindex="0" loading="lazy"><figcaption>6-2-3</figcaption></figure><h2 id="iii-mvc与三层架构" tabindex="-1"><a class="header-anchor" href="#iii-mvc与三层架构" aria-hidden="true">#</a> Ⅲ. MVC与三层架构</h2><h4 id="_1-关系" tabindex="-1"><a class="header-anchor" href="#_1-关系" aria-hidden="true">#</a> 1. 关系</h4><figure><img src="'+o+'" alt="6-2-4" tabindex="0" loading="lazy"><figcaption>6-2-4</figcaption></figure><p>如上图上半部分是 MVC 模式，上图下半部分是三层架构。 <code>MVC 模式</code> 中的 C（控制器）和 V（视图）就是 <code>三层架构</code> 中的表现层，而 <code>MVC 模式</code> 中的 M（模型）就是 <code>三层架构</code> 中的 业务逻辑层 和 数据访问层。</p><h4 id="_2-总结" tabindex="-1"><a class="header-anchor" href="#_2-总结" aria-hidden="true">#</a> 2. 总结</h4><p>可以将 <code>MVC 模式</code> 理解成是一个大的概念，而 <code>三层架构</code> 是对 <code>MVC 模式</code> 实现架构的思想。 那么我们以后按照要求将不同层的代码写在不同的包下，每一层里功能职责做到单一，将来如果将表现层的技术换掉，而业务逻辑层和数据访问层的代码不需要发生变化。</p><h4 id="_3-应用" tabindex="-1"><a class="header-anchor" href="#_3-应用" aria-hidden="true">#</a> 3. 应用</h4><ul><li>web（表示层）= Controller+View = SpringMVC</li><li>service（业务逻辑层） = Modle - dao = Spring</li><li>dao（数据访问层）= 基本的数据访问操作 = MyBatista</li></ul>',32),n=[h];function s(_,u){return i(),e("div",null,n)}const f=a(t,[["render",s],["__file","6-2.Web架构.html.vue"]]);export{f as default};
