import{_ as n,r as e,o as d,c as h,a as l,b as a,d as r,w as p,e as s}from"./app-54dd7ef5.js";const c="/java-doc/img/java/javase/8-3-1.jpg",u={},o=s('<h4 id="说明" tabindex="-1"><a class="header-anchor" href="#说明" aria-hidden="true">#</a> 说明</h4><p>流的基类都是节点流</p><figure><img src="'+c+'" alt="8-3-1" tabindex="0" loading="lazy"><figcaption>8-3-1</figcaption></figure><h4 id="_1-输入流-inputstream-reader" tabindex="-1"><a class="header-anchor" href="#_1-输入流-inputstream-reader" aria-hidden="true">#</a> 1. 输入流：InputStream &amp; Reader</h4><p>InputStream 和 Reader 是所有输入流的基类。</p><h5 id="_1-1-inputstream" tabindex="-1"><a class="header-anchor" href="#_1-1-inputstream" aria-hidden="true">#</a> 1.1 InputStream</h5><p>典型实现：FileInputStream</p><p>FileInputStream 从文件系统中的某个文件中获得输入字节。FileInputStream用于读取非文本数据之类的原始字节流。</p><h5 id="_1-2-reader" tabindex="-1"><a class="header-anchor" href="#_1-2-reader" aria-hidden="true">#</a> 1.2 Reader</h5><p>典型实现：FileReader</p><p>要读取字符流，需要使用 FileReader</p><h4 id="_2-输出流-outputstream-writer" tabindex="-1"><a class="header-anchor" href="#_2-输出流-outputstream-writer" aria-hidden="true">#</a> 2. 输出流：OutPutStream &amp; Writer</h4><h5 id="_2-1-outputstream" tabindex="-1"><a class="header-anchor" href="#_2-1-outputstream" aria-hidden="true">#</a> 2.1 OutPutStream</h5><p>典型实现：FileOutputStream</p><p>FileOutputStream 从文件系统中的某个文件中获得输出字节。FileOutputStream用于写出非文本数据之类的原始字节流。</p><h5 id="_2-2-writer" tabindex="-1"><a class="header-anchor" href="#_2-2-writer" aria-hidden="true">#</a> 2.2 Writer</h5><p>典型实现：FileWriter</p><p>要写出字符流，需要使用 FileWriter</p><h4 id="_3-关闭流" tabindex="-1"><a class="header-anchor" href="#_3-关闭流" aria-hidden="true">#</a> 3. 关闭流</h4><p>程序中打开的文件 IO 资源不属于内存里的资源，垃圾回收机制无法回收该资源，所以应该件 显式关闭文件 IO 资源。</p><h4 id="_4-字节流与字符流的选择" tabindex="-1"><a class="header-anchor" href="#_4-字节流与字符流的选择" aria-hidden="true">#</a> 4. 字节流与字符流的选择</h4><ul><li>文本文件-&gt;字符流，以字符而非字节为单位读取</li><li>非文本文件-&gt;字节流：能够解析</li></ul><p>如果字符流操作非文本文件，会无法解析。如果字节流操作文本文件，在内存层面读（println）可能会乱码</p><h4 id="_5-节点流" tabindex="-1"><a class="header-anchor" href="#_5-节点流" aria-hidden="true">#</a> 5. 节点流</h4><p>节点流是最基本的实现（典型实现），其他实现跟节点流类似。</p><p>实际开发中，我们不会去直接使用节点流，因为他读写效率比较低。</p><h4 id="_6-流操作的基本步骤" tabindex="-1"><a class="header-anchor" href="#_6-流操作的基本步骤" aria-hidden="true">#</a> 6. 流操作的基本步骤</h4><ul><li>创建文件对象</li><li>创建流对象（读/写）</li><li>进行流的操作（读/写）</li><li>关闭流（close）<br> 以上操作需要进行异常处理</li></ul><h4 id="_7-输入流与输出流的方法" tabindex="-1"><a class="header-anchor" href="#_7-输入流与输出流的方法" aria-hidden="true">#</a> 7. 输入流与输出流的方法</h4>',29);function _(m,f){const t=e("ExternalLinkIcon"),i=e("RouterLink");return d(),h("div",null,[o,l("p",null,[a("详见："),r(i,{to:"/java/func/1.JDK%E5%B8%B8%E7%94%A8%E7%B1%BB/1-7.IO%E7%B1%BB.html",target:"_blank"},{default:p(()=>[a("内置函数>IO类"),r(t)]),_:1})])])}const b=n(u,[["render",_],["__file","8-3.流的基类.html.vue"]]);export{b as default};
