import{_ as p,r as o,o as c,c as i,a as n,b as s,d as t,e}from"./app-b355f476.js";const l={},u=n("h2",{id:"i-标准流",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#i-标准流","aria-hidden":"true"},"#"),s(" Ⅰ. 标准流")],-1),r={href:"http://System.in",target:"_blank",rel:"noopener noreferrer"},d=n("li",null,"System.out：标准的输出流，默认从控制台输出",-1),k=n("h4",{id:"_1-system-in与system-out",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-system-in与system-out","aria-hidden":"true"},"#"),s(" 1. System.in与System.out")],-1),m={href:"http://System.in",target:"_blank",rel:"noopener noreferrer"},v=n("li",null,[s("System.out：也是System类的一个变量，类型是PrintStream。 "),n("ul",null,[n("li",null,"该类是：OutputStream的子类FilterOutputStream的子类。")])],-1),h=e(`<h4 id="_2-重定向" tabindex="-1"><a class="header-anchor" href="#_2-重定向" aria-hidden="true">#</a> 2. 重定向</h4><p>通过System类的setIn，setOut方法对默认设备进行改变。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setIn</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setOut</span><span class="token punctuation">(</span><span class="token class-name">PrintStream</span> out<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-示例-标准输入流、输出流的练习" tabindex="-1"><a class="header-anchor" href="#_3-示例-标准输入流、输出流的练习" aria-hidden="true">#</a> 3. 示例：标准输入流、输出流的练习</h4><p>要求：从键盘输入字符串，要求将读取到的整行字符串转成大写输出。然后继续进行输入操作，直至当输入“e”或者“exit”时，退出程序。</p>`,5),b=n("li",null,"方法一：使用Scanner实现，调用next()返回一个字符串",-1),f={href:"http://System.in",target:"_blank",rel:"noopener noreferrer"},y=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token class-name">InputStreamReader</span> isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
    br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>isr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请输入字符串：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> data <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;e&quot;</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">&quot;exit&quot;</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;程序结束&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">String</span> upperCase <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>upperCase<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>br <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-打印流" tabindex="-1"><a class="header-anchor" href="#ii-打印流" aria-hidden="true">#</a> Ⅱ. 打印流</h2><p>OutPutStream和FileWriter的处理流，实现将基本数据类型的数据格式转化为字符串输出</p><h4 id="_1-printstream和printwriter" tabindex="-1"><a class="header-anchor" href="#_1-printstream和printwriter" aria-hidden="true">#</a> 1. PrintStream和PrintWriter</h4><p>PrintStream写出字节流；PrintWriter写出字符流。</p><ul><li>提供了一系列重载的print()和println()方法，用于多种数据类型的输出</li><li>PrintStream和PrintWriter的输出不会抛出IOException异常</li><li>PrintStream和PrintWriter有自动flush功能</li><li>PrintStream 打印的所有字符都使用平台的默认字符编码转换为字节。在需要写入字符而不是写入字节的情况下，应该使用 PrintWriter 类。</li><li>System.out返回的是PrintStream的实例</li></ul><h4 id="_2-示例-将基本数据类型输出到一个文件" tabindex="-1"><a class="header-anchor" href="#_2-示例-将基本数据类型输出到一个文件" aria-hidden="true">#</a> 2. 示例：将基本数据类型输出到一个文件</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;text.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建打印输出流</span>
    ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ps <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 把标准输出流(控制台输出)改成文件</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">255</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 输出ASCII字符</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">50</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 每50个数据一行</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 换行</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ps <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ps<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iii-数据流" tabindex="-1"><a class="header-anchor" href="#iii-数据流" aria-hidden="true">#</a> Ⅲ. 数据流</h2><p>为了方便地操作Java语言的基本数据类型和String的数据，可以使用数据流。</p><p>作用：将java的基本数据类型和String数据写出到文件中，并能够将文件中的java基本数据类型和String数据读取还愿。</p><h4 id="_1-数据流的类" tabindex="-1"><a class="header-anchor" href="#_1-数据流的类" aria-hidden="true">#</a> 1. 数据流的类</h4><ul><li>DataInputStream：读入，“套接”在 InputStream 子类的流上</li><li>DataOutputStream：写出，“套接”在OutputStream 子类的流上</li></ul><h4 id="_2-datainputstream中的方法" tabindex="-1"><a class="header-anchor" href="#_2-datainputstream中的方法" aria-hidden="true">#</a> 2. DataInputStream中的方法</h4><ul><li>boolean readBoolean()</li><li>byte readByte()</li><li>char readChar()</li><li>float readFloat()</li><li>double readDouble()</li><li>short readShort()</li><li>long readLong()</li><li>int readInt()</li><li>String readUTF()</li><li>void readFully(byte[] b)</li></ul><h4 id="_3-dataoutputstream中的方法" tabindex="-1"><a class="header-anchor" href="#_3-dataoutputstream中的方法" aria-hidden="true">#</a> 3. DataOutputStream中的方法</h4><p>将上述的方法的read改为相应的write即可。</p><h4 id="_4-dataoutputstream-使用示例" tabindex="-1"><a class="header-anchor" href="#_4-dataoutputstream-使用示例" aria-hidden="true">#</a> 4. DataOutputStream：使用示例</h4><p>将内存中的字符串、基本数据类型的变量写出到文件中</p><p>注意：该文件只能用DataInputStream来读入，其他方法无法解析，查看</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1.创建流</span>
<span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;data.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">DataOutputStream</span> dos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//2.使用 DataInputStream 中的方法将各类数据写入文件</span>
dos<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span><span class="token string">&quot;刘建辰&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//刷新操作，将内存中的数据写入文件</span>
dos<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dos<span class="token punctuation">.</span><span class="token function">writeBoolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//3.关闭流</span>
dos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//异常处理：省略</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-datainputstream-使用示例" tabindex="-1"><a class="header-anchor" href="#_5-datainputstream-使用示例" aria-hidden="true">#</a> 5. DataInputStream：使用示例</h4><p>将文件中存储的基本数据类型变量和字符串读取到内存中，保存在变量中。</p><p>注意：读取不同类型的数据的顺序要与当初写入文件时，保存的数据的顺序一致！</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1.创建流</span>
<span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;data.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">DataInputStream</span> dis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//2.使用DataOutputStream将文件中各类数据读入</span>
<span class="token class-name">String</span> name <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> age <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> isMale <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;name = &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;age = &quot;</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;isMale = &quot;</span> <span class="token operator">+</span> isMale<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//3.关闭流</span>
dis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//异常处理：省略</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iv-随机存储文件流" tabindex="-1"><a class="header-anchor" href="#iv-随机存储文件流" aria-hidden="true">#</a> Ⅳ. 随机存储文件流</h2><p>随机存储文件流 RandomAccessFile 声明在java.io包下，但直接继承于java.lang.Object类，没有继承抽象流基类。并且它实现了DataInput、DataOutput这两个接口，也就意味着这个类既可以读也可以写（既可以作为一个输入流，又可以作为一个输出流）。</p><h4 id="_1-随机访问机制" tabindex="-1"><a class="header-anchor" href="#_1-随机访问机制" aria-hidden="true">#</a> 1. 随机访问机制</h4><ul><li>RandomAccessFile 类支持 “随机访问” 的方式，程序可以直接跳到文件的任意地方来读、写文件；</li><li>支持只访问文件的部分内容；</li><li>可以向已存在的文件后追加内容。</li></ul><h4 id="_2-记录指针与相关方法" tabindex="-1"><a class="header-anchor" href="#_2-记录指针与相关方法" aria-hidden="true">#</a> 2. 记录指针与相关方法</h4><p>RandomAccessFile 对象包含一个记录指针，用以标示当前读写处的位置。RandomAccessFile 类对象可以自由移动记录指针。</p><h5 id="_2-1-getfilepointer方法" tabindex="-1"><a class="header-anchor" href="#_2-1-getfilepointer方法" aria-hidden="true">#</a> 2.1 getFilePointer方法</h5><p>获取文件记录指针的当前位置</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">long</span> <span class="token function">getFilePointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-2-seek方法" tabindex="-1"><a class="header-anchor" href="#_2-2-seek方法" aria-hidden="true">#</a> 2.2 seek方法</h5><p>将文件记录指针定位到 pos 位置</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">seek</span><span class="token punctuation">(</span><span class="token keyword">long</span> pos<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-构造器与mode参数" tabindex="-1"><a class="header-anchor" href="#_3-构造器与mode参数" aria-hidden="true">#</a> 3. 构造器与mode参数</h4><ul><li>参数1：要操作的文件，可以是文件对象，也可以是文件名</li><li>参数2：mode：访问模式</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">,</span> <span class="token class-name">String</span> mode<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> mode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-1-mode" tabindex="-1"><a class="header-anchor" href="#_3-1-mode" aria-hidden="true">#</a> 3.1 mode</h5><p>共有4种访问模式，只需要注意前两种。</p><ul><li>r: 以只读方式打开</li><li>rw ：打开以便读取和写入</li><li>rwd: 打开以便读取和 写入；同步文件内容的更新</li><li>rws: 打开以便读取和 写入； 同步文件内容和元数据 的</li></ul><h5 id="_3-2-r模式与rw模式" tabindex="-1"><a class="header-anchor" href="#_3-2-r模式与rw模式" aria-hidden="true">#</a> 3.2 r模式与rw模式</h5><ul><li>r：只读，不会创建文件，而是会去读取一个已经存在的文件，如果读取的文件不存在则会出现异常。</li><li>rw：读写，如果文件不存在则会去创建文件，如果存在则不会创建。</li></ul><h4 id="_4-使用示例-copy文件" tabindex="-1"><a class="header-anchor" href="#_4-使用示例-copy文件" aria-hidden="true">#</a> 4. 使用示例：copy文件</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1.RandomAccessFile对象</span>
<span class="token class-name">RandomAccessFile</span> rafRead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token string">&quot;a.jpg&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">RandomAccessFile</span> rafWrite <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token string">&quot;a-1.jpg&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;rw&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//2.进行读和写,完成复制</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> len <span class="token operator">=</span> rafRead<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>len <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    rafWrite<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//3.关闭流</span>
rafRead<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
rafWrite<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//省略了异常处理</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-使用指针" tabindex="-1"><a class="header-anchor" href="#_5-使用指针" aria-hidden="true">#</a> 5. 使用指针</h4><p>该类的核心就是可以操作指针，在任意位置进行读写。</p><ul><li>读：只是简单的读。</li><li>写：这里的写是覆盖写，即从指针位置开始写，新写入的内容会覆盖旧的内容。 <ul><li>注意：不是文件覆盖，而是内容覆盖；不是追加写，而是从指定指针位置处写；不是插入写，而是覆盖写；</li></ul></li></ul><h5 id="_5-1-实现追加和插入效果" tabindex="-1"><a class="header-anchor" href="#_5-1-实现追加和插入效果" aria-hidden="true">#</a> 5.1 实现追加和插入效果</h5><ul><li>追加效果：将指针指到文件末尾，进行写的操作，就是追加写。</li><li>插入效果：将指针位置后面的数据赋值一份，写完后，再将复制的文件，进行追加写。</li></ul><h5 id="_5-2-示例-在指针位置进行写入" tabindex="-1"><a class="header-anchor" href="#_5-2-示例-在指针位置进行写入" aria-hidden="true">#</a> 5.2 示例：在指针位置进行写入</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1.RandomAccessFile对象</span>
<span class="token class-name">RandomAccessFile</span> raf1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;rw&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
raf1<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将指针调到角标为3的位置</span>

<span class="token comment">//进行写入</span>
raf1<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;xyz&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//关闭资源</span>
raf1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-断点续传" tabindex="-1"><a class="header-anchor" href="#_6-断点续传" aria-hidden="true">#</a> 6. 断点续传</h4><p>可以用RandomAccessFile这个类，来实现一个多线程断点下载的功能，下载工具下载前都会建立两个临时文件，一个是与被下载文件大小相同的空文件，另一个是记录文件指针的位置文件，每次暂停的时候，都会保存上一次的指针，然后断点下载的时候，会继续从上一次的地方下载，从而实现断点下载或上传的功能。</p>`,56);function g(_,w){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("ul",null,[n("li",null,[n("a",r,[s("System.in"),t(a)]),s("：标准的输入流，默认从键盘输入")]),d]),k,n("ul",null,[n("li",null,[n("a",m,[s("System.in"),t(a)]),s("：他是System类的一个变量，类型是InputStream。")]),v]),h,n("ul",null,[b,n("li",null,[s("方法二：使用System.in实现【以该方法为例】 "),n("ul",null,[n("li",null,[n("a",f,[s("System.in"),t(a)]),s(" ---> 转换流 ---> BufferedReader的readLine()")])])])]),y])}const x=p(l,[["render",g],["__file","8-7.其他流.html.vue"]]);export{x as default};
