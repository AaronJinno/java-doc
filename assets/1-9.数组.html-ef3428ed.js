import{_ as s,r as p,o as t,c as e,a as o,b as n,d as c,w as l,e as u}from"./app-b355f476.js";const i="/java-doc/img/java/javase/1-9-1.jpg",r="/java-doc/img/java/javase/1-9-2.jpg",k="/java-doc/img/java/javase/1-9-3.jpg",d="/java-doc/img/java/javase/1-9-4.jpg",m={},v=u(`<h2 id="i-概述" tabindex="-1"><a class="header-anchor" href="#i-概述" aria-hidden="true">#</a> Ⅰ. 概述</h2><h4 id="_1-概念" tabindex="-1"><a class="header-anchor" href="#_1-概念" aria-hidden="true">#</a> 1. 概念</h4><p>数组(Array)，是多个相同类型数据按一定顺序排列的集合，并使用一个名字命名，并通过编号的方式对这些数据进行统一管理。</p><h4 id="_2-数组的元素" tabindex="-1"><a class="header-anchor" href="#_2-数组的元素" aria-hidden="true">#</a> 2. 数组的元素</h4><ul><li>数组的变量类型：数组内部元素的变量类型</li><li>索引：数组的下标，从0开始步进（注意：Java是强类型语言，没有关联数组一说）</li><li>数组元素：数组中的每个元素</li><li>数组的长度：数组元素的个数</li></ul><h4 id="_3-数组的特点" tabindex="-1"><a class="header-anchor" href="#_3-数组的特点" aria-hidden="true">#</a> 3. 数组的特点</h4><ul><li>数组本身是引用数据类型，而数组中的元素可以是任何数据类型，包括基本数据类型和引用数据类型。</li><li>创建数组对象会在内存中开辟一整块连续的空间，而数组名中引用的是这块连续空间的首地址。 <ul><li>可以直接通过下标(或索引)的方式调用指定位置的元素，速度很快</li></ul></li><li>数组的长度一旦确定，就不能修改。</li></ul><h4 id="_4-数组的分类" tabindex="-1"><a class="header-anchor" href="#_4-数组的分类" aria-hidden="true">#</a> 4. 数组的分类</h4><ul><li>按照维度：一维数组、二维数组、多维数组</li><li>按照元素数据类型：基本数据类型元素的数组、引用数据类型元素的数组（如String类型的数组）</li></ul><h4 id="_5-使用数组的步骤" tabindex="-1"><a class="header-anchor" href="#_5-使用数组的步骤" aria-hidden="true">#</a> 5.使用数组的步骤</h4><ul><li>声明数组</li><li>分配空间：数组分配的内存空间是连续的 <ul><li>java中必须先为数组分配内存空间，才能使用数组</li></ul></li><li>赋值</li><li>处理数据</li></ul><h4 id="_6-数组间的赋值与复制" tabindex="-1"><a class="header-anchor" href="#_6-数组间的赋值与复制" aria-hidden="true">#</a> 6. 数组间的赋值与复制</h4><h5 id="_6-1-赋值" tabindex="-1"><a class="header-anchor" href="#_6-1-赋值" aria-hidden="true">#</a> 6.1 赋值</h5><p>将array1保存的数组的地址值赋给了array2，使得array1和array2的指针共同指向同一个数组实体。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>array2 <span class="token operator">=</span> array1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_6-2-复制一份内存空间" tabindex="-1"><a class="header-anchor" href="#_6-2-复制一份内存空间" aria-hidden="true">#</a> 6.2 复制一份内存空间</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>array2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>array1<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//初始化并分配空间</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array2<span class="token punctuation">.</span>length<span class="token punctuation">.</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//赋值</span>
    array2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-一维数组" tabindex="-1"><a class="header-anchor" href="#ii-一维数组" aria-hidden="true">#</a> Ⅱ. 一维数组</h2><h4 id="_1-声明数组" tabindex="-1"><a class="header-anchor" href="#_1-声明数组" aria-hidden="true">#</a> 1. 声明数组</h4><ul><li>声明语法1：数据类型[ ] 数组名；</li><li>声明语法2：数据类型 数组名[]</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1<span class="token punctuation">;</span> <span class="token comment">//声明数组：确定数据类型</span>
<span class="token keyword">int</span> arr2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-初始化数组" tabindex="-1"><a class="header-anchor" href="#_2-初始化数组" aria-hidden="true">#</a> 2. 初始化数组</h4><p>数组一旦初始化完成，其长度就确定了。</p><h5 id="_2-1-动态初始化" tabindex="-1"><a class="header-anchor" href="#_2-1-动态初始化" aria-hidden="true">#</a> 2.1 动态初始化</h5><p>先给数组分配空间，然后再进行赋值。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> users<span class="token punctuation">;</span> <span class="token comment">//声明</span>
users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//初始化：分配空间</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//声明+初始化</span>
users<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;jinno&quot;</span> <span class="token comment">//赋值：通过下标取出数组元素，然后赋值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-2-静态初始化" tabindex="-1"><a class="header-anchor" href="#_2-2-静态初始化" aria-hidden="true">#</a> 2.2 静态初始化</h5><p>数组的初始化和数组元素的赋值操作同时进行，不要给数组长度，赋值时自动获得长度。</p><p>优先使用简化写法：<code>int[ ] nums = {1,2,3};</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">;</span><span class="token comment">//声明</span>
nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//初始化和赋值同时进行</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//声明+初始化</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//简化写法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-访问数组元素" tabindex="-1"><a class="header-anchor" href="#_3-访问数组元素" aria-hidden="true">#</a> 3. 访问数组元素</h4><ul><li>定义并用运算符new为之分配空间后，才可以访问数组中的每个元素；</li><li>可以直接通过数组名[ 数组元素下标 ]的方式调用指定位置的元素; <ul><li>数组元素下标可以是整型常量或整型表达式。如<code>a[3] , b[i] , c[6*i]</code>;</li><li>数组元素下标从0开始；长度为n的数组合法下标取值范围: <code>0 —&gt;n-1</code>；</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//为指定索引处的元素赋值，若已有值，则为修改值</span>
nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

<span class="token comment">//获取指定索引出的值，若指定索引处没有值，就获取默认值</span>
<span class="token keyword">int</span> age <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-获取数组长度" tabindex="-1"><a class="header-anchor" href="#_4-获取数组长度" aria-hidden="true">#</a> 4. 获取数组长度</h4><p>每个数组都有一个属性length指明它的长度。<br> 数组初始化完成后，其长度就不可变了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_5-遍历数组" tabindex="-1"><a class="header-anchor" href="#_5-遍历数组" aria-hidden="true">#</a> 5. 遍历数组</h4><p>可以通过for循环遍历数组</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-数组元素的默认初始化值" tabindex="-1"><a class="header-anchor" href="#_6-数组元素的默认初始化值" aria-hidden="true">#</a> 6. 数组元素的默认初始化值</h4><p>数组是引用类型，它的元素相当于类的成员变量，因此数组一经分配空间，其中的每个元素也被按照成员变量同样的方式被隐式初始化。即：当对数组进行初始化，还没有分配值的时候，数组的元素会有一个默认值。</p><p>默认值与数组的数据类型有关，具体如下：</p><figure><img src="`+i+'" alt="1-9-1" tabindex="0" loading="lazy"><figcaption>1-9-1</figcaption></figure><h4 id="_7-一维数组的内存解析" tabindex="-1"><a class="header-anchor" href="#_7-一维数组的内存解析" aria-hidden="true">#</a> 7. 一维数组的内存解析</h4><h5 id="_7-1-内存结构" tabindex="-1"><a class="header-anchor" href="#_7-1-内存结构" aria-hidden="true">#</a> 7.1 内存结构</h5><figure><img src="'+r+'" alt="1-9-2" tabindex="0" loading="lazy"><figcaption>1-9-2</figcaption></figure><h5 id="_7-2-数组的内存结构" tabindex="-1"><a class="header-anchor" href="#_7-2-数组的内存结构" aria-hidden="true">#</a> 7.2 数组的内存结构</h5><p>注意：非精准详细的解析，只是对数组的结构进行一些解释（详见JVM）。</p><ul><li>栈：用来存放标识符【数组名】</li><li>堆：用来存放new出来的数组【数组的值】</li></ul><h5 id="_7-3-储存的过程" tabindex="-1"><a class="header-anchor" href="#_7-3-储存的过程" aria-hidden="true">#</a> 7.3 储存的过程</h5><ul><li>数组储存的过程：初始化数组时，在栈内存以栈的结构储存数组的标识符（k）和数组第一个元素的内存地址（v），堆内存中储存（分配空间）数组的值（默认值）。给数组赋值时，就将赋的值替换掉元素的默认值。</li><li>数组删除和修改的过程：删除数组时，就将数组在栈中储存的K=V出栈，同时数组堆中的值成为垃圾，等待被回收。当对数组本身进行修改，重新初始化时（重新分配空间），就将栈中储存的数组第一个元素的地址替换掉（之前与值的指针断裂）；重新指向新的数组的值，同时就数组的值成为垃圾，等待被回收。</li></ul><figure><img src="'+k+`" alt="1-9-3" tabindex="0" loading="lazy"><figcaption>1-9-3</figcaption></figure><h4 id="_8-注意事项" tabindex="-1"><a class="header-anchor" href="#_8-注意事项" aria-hidden="true">#</a> 8. 注意事项</h4><ul><li>数组长度：数组的长度是固定的，在初始化时就确定了，无法更改</li><li>数据类型：数组的中的元素具有相同的数据类型（或能自动转换类型），声明数组时要确定数据类型</li></ul><h2 id="iii-多维数组" tabindex="-1"><a class="header-anchor" href="#iii-多维数组" aria-hidden="true">#</a> Ⅲ. 多维数组</h2><h4 id="说明" tabindex="-1"><a class="header-anchor" href="#说明" aria-hidden="true">#</a> 说明</h4><p>对于二维数组的理解，我们可以看成是一维数组array1又作为另一个一维数组array2的元素而存在。其实，从数组底层的运行机制来看，其实没有多维数组。</p><p>因为数组是引用类型，所以其实二维元素的值是一个内存地址（指针），指向了一个一维数组。</p><ul><li>外层数组：指的是二维数组本身，他的元素全是一维数组</li><li>内层数组：指的是二维数组的元素。</li><li>外层数组元素：<code>arr[0],arr[1]</code> 等，值为内层数组的内存地址</li><li>内层数组元素：<code>arr[0][0],arr[1][2]</code> 等，值为数据</li></ul><h4 id="_1-二维数组的声明" tabindex="-1"><a class="header-anchor" href="#_1-二维数组的声明" aria-hidden="true">#</a> 1. 二维数组的声明</h4><h5 id="_1-1-静态初始化" tabindex="-1"><a class="header-anchor" href="#_1-1-静态初始化" aria-hidden="true">#</a> 1.1 静态初始化</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span><span class="token comment">//声明和初始化分开</span>
arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//合并成一行</span>

<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//简化写法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-2-动态初始化-指定内层数组长度" tabindex="-1"><a class="header-anchor" href="#_1-2-动态初始化-指定内层数组长度" aria-hidden="true">#</a> 1.2 动态初始化-指定内层数组长度</h5><p>为数组和内层数组都直接分配了内存空间。此时，数组的长度和内层数组的长度都确定了。</p><p>如下：定义了名称为arr的二维数组；二维数组中有3个一维数组；每一个一维数组中有2个元素；一维数组的名称分别为<code>arr[0], arr[1], arr[2]</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//外层2个元素，内层3个元素</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_1-3-动态初始化-未指定数组内层长度" tabindex="-1"><a class="header-anchor" href="#_1-3-动态初始化-未指定数组内层长度" aria-hidden="true">#</a> 1.3 动态初始化-未指定数组内层长度</h5><p>只为数组本身指定长度，不为数组内部的内层数组指定长度（内层数组只声明，不初始化）。</p><p>意义：二维数组每个元素的数组长度，不再强制相等。</p><p>如下：二维数组中有3个一维数组。每个一维数组都是默认初始化值null。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//只规定外层长度，不指定内层长度。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-数组赋值" tabindex="-1"><a class="header-anchor" href="#_2-数组赋值" aria-hidden="true">#</a> 2. 数组赋值</h4><p>动态初始化后，就可以为数组元素赋值了（静态初始化已经赋值过了）。</p><h5 id="_2-1-指定了内层数组长度" tabindex="-1"><a class="header-anchor" href="#_2-1-指定了内层数组长度" aria-hidden="true">#</a> 2.1 指定了内层数组长度</h5><ul><li>为外层元素赋值：外层元素的值是一个一维数组，赋的值也必须是个数组。</li><li>为内层元素赋值：层层进。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token comment">//为外层元素赋值</span>
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//为内层元素赋值</span>
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-2-未指定内层数组长度" tabindex="-1"><a class="header-anchor" href="#_2-2-未指定内层数组长度" aria-hidden="true">#</a> 2.2 未指定内层数组长度</h5><ul><li>为外层元素赋值：虽然是数组，但是他们的值是空的，需要进行数组的初始化，可以静态初始化，也可以动态初始化，内层数组的长度不限。</li><li>为内层元素赋值：外层元素必须初始化，才能为内层元素赋值，不然会报错。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//为外层元素赋值，可以任意指定长度</span>
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//为内层元素赋值</span>
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-元素的访问和值" tabindex="-1"><a class="header-anchor" href="#_3-元素的访问和值" aria-hidden="true">#</a> 3. 元素的访问和值</h4><p>任何元素访问前必须初始化，未指定内层数组长度的要先初始化内层数组才能访问内层元素。<br> 访问外层数组元素，得到的是一个内存地址值，指向的是内层数组。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//2</span>
arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [I@15db9742 [表示数组;I表示int类型;15db9742表示16进制内存地址</span>

<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//0</span>

<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//外层元素能访问，值为null</span>
arr3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//报错，内层数组未初始化，不能访问内层数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-数组的长度" tabindex="-1"><a class="header-anchor" href="#_4-数组的长度" aria-hidden="true">#</a> 4. 数组的长度</h4><ul><li>外层数组的长度：外层元素的个数</li><li>内层数组的长度：内层元素的个数</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment">//2,外层数组的长度</span>
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment">//3,第一个内层数组的长度</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-遍历数组-1" tabindex="-1"><a class="header-anchor" href="#_5-遍历数组-1" aria-hidden="true">#</a> 5. 遍历数组</h4><p>遍历二维数组就需要嵌套循环了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;  &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-数组元素的默认初始化值-1" tabindex="-1"><a class="header-anchor" href="#_6-数组元素的默认初始化值-1" aria-hidden="true">#</a> 6. 数组元素的默认初始化值</h4><ul><li>指定了内层数组的长度 <ul><li>外层元素的初始化值为：地址值，指向的内层数组</li><li>内层元素的初始化值为：与一维数组初始化情况相同</li></ul></li><li>未指定内层数组的长度 <ul><li>外层元素的初始化值为：null，没有初始化，没有地址</li><li>内层元素的初始化值为：不能调用，否则报错。</li></ul></li></ul><h4 id="_7-二维数组的内存解析" tabindex="-1"><a class="header-anchor" href="#_7-二维数组的内存解析" aria-hidden="true">#</a> 7. 二维数组的内存解析</h4><figure><img src="`+d+`" alt="1-9-4" tabindex="0" loading="lazy"><figcaption>1-9-4</figcaption></figure><h4 id="_8-注意事项-1" tabindex="-1"><a class="header-anchor" href="#_8-注意事项-1" aria-hidden="true">#</a> 8. 注意事项</h4><ul><li>数据类型：二维数组也要指定数据类型，这个数据类型限制的是内层数组的元素（外层元素本质上是一维数组，引用类型），也就是内层数组的元素类型也是确定的。</li><li>元素访问：未初始化的不能访问。</li><li>元素的值：外层数组元素的值是一个内存地址（未初始化则为null）； <ul><li>即使未赋值，也能取，因为分配内存的时候，内存地址就已经确定了。</li></ul></li></ul><h2 id="iv-常见异常" tabindex="-1"><a class="header-anchor" href="#iv-常见异常" aria-hidden="true">#</a> Ⅳ. 常见异常</h2><h4 id="_1-数组索引越界" tabindex="-1"><a class="header-anchor" href="#_1-数组索引越界" aria-hidden="true">#</a> 1. 数组索引越界</h4><p><code>ArrayIndexOutOfBoundsException</code>：用了不存在的索引（超过范围的索引）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-空指针" tabindex="-1"><a class="header-anchor" href="#_2-空指针" aria-hidden="true">#</a> 2. 空指针</h4><p><code>NullPointerException</code>：数组标识符指向的内存没了，或者不存在。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//情况1：数组被赋值为null</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
arr1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token comment">//情况2：访问未初始化的数组</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//情况3：null调用方法</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;AA&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;BB&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;CC&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
arr3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="v-arrays工具类" tabindex="-1"><a class="header-anchor" href="#v-arrays工具类" aria-hidden="true">#</a> Ⅴ. Arrays工具类</h2><p>操作数组的工具类，包含了很多用来操作数据的方法</p>`,103);function h(b,g){const a=p("RouterLink");return t(),e("div",null,[v,o("p",null,[n("详见："),c(a,{to:"/java/func/2.JDK.util%E5%8C%85/2-2.Arrays.html",target:"",_bank:""},{default:l(()=>[n("Arrays工具类")]),_:1})])])}const _=s(m,[["render",h],["__file","1-9.数组.html.vue"]]);export{_ as default};
