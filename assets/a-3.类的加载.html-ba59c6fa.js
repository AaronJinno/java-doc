import{_ as s,o as a,c as n,e}from"./app-9484c6b3.js";const t="/java-doc/img/java/javase/a-3-1.jpg",p="/java-doc/img/java/javase/a-3-2.jpg",c={},l=e('<h2 id="i-类的加载" tabindex="-1"><a class="header-anchor" href="#i-类的加载" aria-hidden="true">#</a> Ⅰ. 类的加载</h2><h4 id="_1-类的初始化" tabindex="-1"><a class="header-anchor" href="#_1-类的初始化" aria-hidden="true">#</a> 1.类的初始化</h4><p>当程序主动使用某个类时，如果该类还未被加载到内存中，则系统会通过如下三个步骤来对该类进行初始化：</p><figure><img src="'+t+'" alt="a-3-1" tabindex="0" loading="lazy"><figcaption>a-3-1</figcaption></figure><h5 id="_1-1-load-类的加载" tabindex="-1"><a class="header-anchor" href="#_1-1-load-类的加载" aria-hidden="true">#</a> 1.1 Load：类的加载</h5><p>将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口（即引用地址）。所有需要访问和使用类数据只能通过这个Class对象。这个加载的过程需要类加载器参与。</p><h5 id="_1-2-link-类的链接" tabindex="-1"><a class="header-anchor" href="#_1-2-link-类的链接" aria-hidden="true">#</a> 1.2 Link：类的链接</h5><p>将Java类的二进制代码合并到JVM的运行状态之中的过程。</p><ul><li>验证：确保加载的类信息符合JVM规范，例如：以cafe开头，没有安全方面的问题</li><li>准备：正式为类变量（static）分配内存并 设置类变量默认初始值的阶段，这些内存都将在方法区中进行分配。</li><li>解析：虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）的过程</li></ul><h5 id="_1-3-initialize-类的初始化" tabindex="-1"><a class="header-anchor" href="#_1-3-initialize-类的初始化" aria-hidden="true">#</a> 1.3 Initialize：类的初始化</h5><ul><li>执行类构造器<code>&lt;clinit&gt;()</code>方法的过程。类构造器<code>&lt;clinit&gt;()</code>方法是由编译期自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的。（类构造器是构造类信息的，不是构造该类对象的构造器）。</li><li>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。</li><li>虚拟机会保证一个类的<code>&lt;clinit&gt;()</code>方法在多线程环境中被正确加锁和同步。</li></ul><h4 id="_2-类初始化的时机" tabindex="-1"><a class="header-anchor" href="#_2-类初始化的时机" aria-hidden="true">#</a> 2. 类初始化的时机</h4><ul><li>类的主动引用 ：一定会发生类的初始化 <ul><li>当虚拟机启动，先初始化main方法所在的类</li><li>new一个类的对象</li><li>调用类的静态成员（除了final常量）和静态方法</li><li>使用java.lang.reflect包的方法对类进行反射调用</li><li>当初始化一个类，如果其父类没有被初始化，则先会初始化它的父类</li></ul></li><li>类的被动引用： 不会发生类的初始化 <ul><li>当访问一个静态域时，只有真正声明这个域的类才会被初始化 <ul><li>当通过子类引用父类的静态变量，不会导致子类初始化</li></ul></li><li>通过数组定义类引用，不会触发此类的初始化</li><li>引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池中了）</li></ul></li></ul><h2 id="ii-classloader" tabindex="-1"><a class="header-anchor" href="#ii-classloader" aria-hidden="true">#</a> Ⅱ. ClassLoader</h2><p>ClassLoader：类加载器</p><p>标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载（缓存）一段时间。不过JVM垃圾回收机制可以回收这些Class对象。</p><h4 id="_1-类加载器" tabindex="-1"><a class="header-anchor" href="#_1-类加载器" aria-hidden="true">#</a> 1. 类加载器</h4><p>类加载器作用是用来把类(class)装载进内存的。JVM 规范定义了如下类型的类的加载器。</p><figure><img src="'+p+`" alt="a-3-2" tabindex="0" loading="lazy"><figcaption>a-3-2</figcaption></figure><ul><li>系统类加载器：加载自定义类</li><li>扩展类加载器：加载ext下的jar包</li><li>引导类加载器：加载核心类库，该加载器无法获取</li></ul><h4 id="_2-加载器获取" tabindex="-1"><a class="header-anchor" href="#_2-加载器获取" aria-hidden="true">#</a> 2. 加载器获取</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1.获得当前自定义类加载器：系统类加载器</span>
<span class="token class-name">ClassLoader</span> cl1 <span class="token operator">=</span> <span class="token class-name">ClassTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cl1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//sun.misc.Launcher$AppClassLoader@18b4aac2</span>

<span class="token comment">//2.调用系统类加载器的getParent()：获取扩展类加载器</span>
<span class="token class-name">ClassLoader</span> cl2 <span class="token operator">=</span> cl1<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cl2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sun.misc.Launcher$ExtClassLoader@77556fd</span>

<span class="token comment">//3.调用扩展类加载器的getParent()：无法获取引导类加载器</span>
<span class="token class-name">ClassLoader</span> cl3 <span class="token operator">=</span> cl2<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cl3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//null</span>

<span class="token comment">//4.获得核心类库String的类加载器：无法获取核心类库的引导类加载器</span>
<span class="token class-name">ClassLoader</span> cl4 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cl4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-getresourceasstream-获取类路径下的指定文件的输入流" tabindex="-1"><a class="header-anchor" href="#_3-getresourceasstream-获取类路径下的指定文件的输入流" aria-hidden="true">#</a> 3. getResourceAsStream：获取类路径下的指定文件的输入流</h4><p>将文件加载为InputStream</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-使用classloader加载配置文件" tabindex="-1"><a class="header-anchor" href="#_4-使用classloader加载配置文件" aria-hidden="true">#</a> 4. 使用ClassLoader加载配置文件</h4><p>使用ClassLoader的getResourceAsStream方法加载配置文件，结合Properties类（读取配置文件的输入流）使用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Properties</span> pros <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//此时的文件默认在当前的module下。</span>
    <span class="token comment">//读取配置文件的方式一：</span>
<span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;src\\\\jdbc1.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pros<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//读取配置文件的方式二：使用ClassLoader</span>
    <span class="token comment">//配置文件默认识别为：当前module的src下</span>
<span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token class-name">ClassLoaderTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">InputStream</span> is <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc1.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pros<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> user <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> password <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;user = &quot;</span> <span class="token operator">+</span> user <span class="token operator">+</span> <span class="token string">&quot;,password = &quot;</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28),o=[l];function i(u,r){return a(),n("div",null,o)}const k=s(c,[["render",i],["__file","a-3.类的加载.html.vue"]]);export{k as default};
