import{_ as p,r as o,o as c,c as l,a as n,b as s,d as t,e as a}from"./app-ab36e818.js";const i="/java-doc/img/java/javaweb/3-8-1.jpg",u="/java-doc/img/java/javaweb/3-8-2.jpg",r={},d=a('<h2 id="i-request-请求转发" tabindex="-1"><a class="header-anchor" href="#i-request-请求转发" aria-hidden="true">#</a> Ⅰ. Request 请求转发</h2><h4 id="_1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-介绍" aria-hidden="true">#</a> 1. 介绍</h4><ul><li>浏览器发送请求给服务器，服务器中对应的资源A接收到请求</li><li>资源A处理完请求后将请求发给资源B</li><li>资源B处理完后将结果响应给浏览器</li><li>请求从资源A到资源B的过程就叫请求转发</li></ul><figure><img src="'+i+`" alt="3-8-1" tabindex="0" loading="lazy"><figcaption>3-8-1</figcaption></figure><h4 id="_2-请求转发的实现方式" tabindex="-1"><a class="header-anchor" href="#_2-请求转发的实现方式" aria-hidden="true">#</a> 2. 请求转发的实现方式</h4><p>采用request对象的getRequestDispatch方法获取请求转发器对象，然后使用请求转发器对象的forward方法进行转发。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">RequestDispatcher</span> <span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span>
<span class="token function">forward</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">)</span> 
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
requset<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;资源B路径&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-转发时共享数据" tabindex="-1"><a class="header-anchor" href="#_3-转发时共享数据" aria-hidden="true">#</a> 3. 转发时共享数据</h4><p>在转发请求的同时，共享一些数据。</p><ul><li>域对象：一个有作用范围的对象，可以在范围内共享数据。</li><li>request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据</li></ul><h5 id="相关方法" tabindex="-1"><a class="header-anchor" href="#相关方法" aria-hidden="true">#</a> 相关方法：</h5><p>转发时，可以进行数据的共享，需要使用request对象提供的三个方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//以键值对的形式存储数据到request域[范围,数据是存储在request对象]中</span>
<span class="token keyword">void</span> <span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//根据key获取值</span>
<span class="token class-name">Object</span> <span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//根据key删除该键值对</span>
<span class="token keyword">void</span> <span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-示例-进行请求转发同时共享数据" tabindex="-1"><a class="header-anchor" href="#_4-示例-进行请求转发同时共享数据" aria-hidden="true">#</a> 4. 示例：进行请求转发同时共享数据</h4>`,14),k={href:"http://localhost:8080/demo5",target:"_blank",rel:"noopener noreferrer"},v=a(`<ul><li>执行结果：控制台打印：demo5 demo6，hello，</li><li>结论：/demo5和/demo6的doGet方法都被执行了，且共享数据成功。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/demo5&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo5</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span>
     <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Demo5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token comment">//存储数据</span>
        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//进行转发</span>
        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;/demo6&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//ServletDemo6</span>
<span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/demo6&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo6</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> 
    <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;demo6&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//获取转发时发送的共享数据</span>
        <span class="token class-name">Object</span> msg <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-请求转发的特点" tabindex="-1"><a class="header-anchor" href="#_5-请求转发的特点" aria-hidden="true">#</a> 5. 请求转发的特点</h4><ul><li>浏览器地址栏路径不发生变化：虽然后台从/demo5转发到/demo6,但是浏览器的地址一直是/demo5,未发生变化</li><li>只能转发到当前服务器的内部资源：不能从一个服务器通过转发访问另一台服务器</li><li>一次请求，可以在转发资源间使用request共享数据</li></ul><h2 id="ii-response-重定向" tabindex="-1"><a class="header-anchor" href="#ii-response-重定向" aria-hidden="true">#</a> Ⅱ. Response 重定向</h2><p>Response重定向(redirect)：一种资源跳转方式。</p><figure><img src="`+u+`" alt="3-8-2" tabindex="0" loading="lazy"><figcaption>3-8-2</figcaption></figure><h4 id="_1-重定向的过程" tabindex="-1"><a class="header-anchor" href="#_1-重定向的过程" aria-hidden="true">#</a> 1. 重定向的过程</h4><ul><li>浏览器发送请求给服务器，服务器中对应的资源A接收到请求</li><li>资源A现在无法处理该请求，就会给浏览器响应一个302的状态码+location的一个访问资源B的路径</li><li>浏览器接收到响应状态码为302就会重新发送请求到location对应的访问地址去访问资源B</li><li>资源B接收到请求后进行处理并最终给浏览器响应结果，这整个过程就叫重定向</li></ul><h4 id="_2-重定向的实现方式" tabindex="-1"><a class="header-anchor" href="#_2-重定向的实现方式" aria-hidden="true">#</a> 2. 重定向的实现方式</h4><p>需要响应对象，调用setStatus方法响应一个302状态码，然后设置location响应头，响应重定向后的访问路径。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;location&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;资源B的访问路径&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//直接进行重定向</span>
response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">&quot;资源访问路径&quot;</span><span class="token punctuation">)</span> <span class="token comment">//相当于把上面两步合成了一步</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-示例-重定向" tabindex="-1"><a class="header-anchor" href="#_3-示例-重定向" aria-hidden="true">#</a> 3. 示例：重定向</h4><p>向ResponseDemo1类发送请求，ResponseDemo1类将请求转发给ResponseDemo2。</p><h5 id="_3-1-responsedemo1" tabindex="-1"><a class="header-anchor" href="#_3-1-responsedemo1" aria-hidden="true">#</a> 3.1 ResponseDemo1</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/demo1&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseDemo1</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> 
    <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ResponseDemo1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置响应状态码</span>
        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Location&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/demo2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过响应头进行重定向</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-2-responsedemo2" tabindex="-1"><a class="header-anchor" href="#_3-2-responsedemo2" aria-hidden="true">#</a> 3.2 ResponseDemo2</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/demo2&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseDemo2</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> 
    <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ResponseDemo2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-3-测试" tabindex="-1"><a class="header-anchor" href="#_3-3-测试" aria-hidden="true">#</a> 3.3 测试</h5>`,19),m={href:"http://localhost:8080/demo2",target:"_blank",rel:"noopener noreferrer"},h=a(`<ul><li>输出结果：ResponseDemo1、ResponseDemo2</li><li>分析：ResponseDemo1、ResponseDemo2两个类都被访问到了，发生了重定向。</li></ul><h4 id="_4-重定向的特点" tabindex="-1"><a class="header-anchor" href="#_4-重定向的特点" aria-hidden="true">#</a> 4. 重定向的特点</h4><ul><li>浏览器地址栏发生变化：当进行重定向访问的时候，由于是由浏览器发送的两次请求，所以地址会发生变化</li><li>可以重定向到任何位置的资源，包括任意其他服务器上的。</li><li>两次请求，不能在多个资源使用request共享数据，因为浏览器发送了两次请求，是两个不同的request对象，就无法通过request对象进行共享数据</li></ul><h4 id="_5-redirect与forward的区别" tabindex="-1"><a class="header-anchor" href="#_5-redirect与forward的区别" aria-hidden="true">#</a> 5. redirect与forward的区别</h4><ul><li>重定向的特点:redirect【浏览器-&gt;服务器】 <ul><li>地址栏发生变化</li><li>重定向可以访问其他站点(服务器)的资源</li><li>重定向是两次请求。不能使用request对象来共享数据</li></ul></li><li>转发的特点：forward【服务器-&gt;服务器】 <ul><li>转发地址栏路径不变</li><li>转发只能访问当前服务器下的资源</li><li>转发是一次请求，可以使用request对象来共享数据</li></ul></li></ul><h2 id="iii-路径问题" tabindex="-1"><a class="header-anchor" href="#iii-路径问题" aria-hidden="true">#</a> Ⅲ. 路径问题</h2><h4 id="_1-是否要加虚拟路径" tabindex="-1"><a class="header-anchor" href="#_1-是否要加虚拟路径" aria-hidden="true">#</a> 1. 是否要加虚拟路径</h4><ul><li>浏览器使用: 需要加虚拟目录(项目访问路径) <ul><li>超链接，从浏览器发送，需要加</li><li>表单，从浏览器发送，需要加</li><li>重定向，是由浏览器进行跳转，需要加。</li></ul></li><li>服务端使用: 不需要加虚拟目录 <ul><li>转发，是从服务器内部跳转，不需要加</li></ul></li></ul><p>当虚拟目录设置为 / 时，加不加是一样的。</p><h4 id="_2-动态获取虚拟路径" tabindex="-1"><a class="header-anchor" href="#_2-动态获取虚拟路径" aria-hidden="true">#</a> 2. 动态获取虚拟路径</h4><p>在项目代码里写死虚拟路径，不方便维护，可以使用方法动态获取虚拟路径</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> contextPath <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span>contextPath<span class="token operator">+</span><span class="token string">&quot;/demo2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//使用动态虚拟路径拼接完整路径</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,12);function b(g,q){const e=o("ExternalLinkIcon");return c(),l("div",null,[d,n("p",null,[s("在浏览器中输入："),n("a",k,[s("http://localhost:8080/demo5"),t(e)])]),v,n("p",null,[s("浏览器输入："),n("a",m,[s("http://localhost:8080/demo2"),t(e)])]),h])}const _=p(r,[["render",b],["__file","3-8.转发与重定向.html.vue"]]);export{_ as default};
