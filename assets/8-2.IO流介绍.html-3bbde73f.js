import{_ as a,o as i,c as e,b as l}from"./app-8e704c97.js";const t="/java-doc/img/java/javase/8-2-1.jpg",r="/java-doc/img/java/javase/8-2-2.jpg",n="/java-doc/img/java/javase/8-2-3.jpg",d="/java-doc/img/java/javase/8-2-4.jpg",o="/java-doc/img/java/javase/8-2-5.jpg",c={},h=l('<h4 id="_1-io简介" tabindex="-1"><a class="header-anchor" href="#_1-io简介" aria-hidden="true">#</a> 1. IO简介</h4><ul><li>什么是IO：I/O是Input/Output的缩写；I/O技术是非常实用的技术，用于处理设备之间的数据传输。如读/写文件，网络通讯等。</li><li>stream：流：Java程序中，对于数据的输入/输出操作以 “流(stream)” 的方式进行。</li><li>流的接口：java.io包下提供了各种“流”类和接口，用以获取不同种类的数据，并通过 标准的方法输入或输出数据。</li></ul><h4 id="_2-java-io原理" tabindex="-1"><a class="header-anchor" href="#_2-java-io原理" aria-hidden="true">#</a> 2. Java IO原理</h4><ul><li>输入 input：读取外部数据（磁盘、光盘等存储设备的数据）到程序（内存）中。</li><li>输出 output：将程序（内存）数据输出到磁盘、光盘等存储设备中。</li></ul><h4 id="_3-流的分类" tabindex="-1"><a class="header-anchor" href="#_3-流的分类" aria-hidden="true">#</a> 3. 流的分类</h4><figure><img src="'+t+'" alt="8-2-1" tabindex="0" loading="lazy"><figcaption>8-2-1</figcaption></figure><ul><li>按操作 数据单位不同 <ul><li>字节流(8bit)：操作二进制字节</li><li>字符流(16bit)：直接操作字符，适用于文本文件</li></ul></li><li>按数据流的流向不同 <ul><li>输入流</li><li>输出流</li></ul></li><li>按流的角色的不同 <ul><li>节点流（直接连接文件）：直接从数据源或目的地读写数据</li><li>处理流（不直接连接文件：不直接连接到数据源或目的地，而是“连接”在已存在的流（节点流或其他处理流）之上，通过对数据的处理为程序提供更为强大的读写功能。</li></ul></li></ul><h4 id="_4-抽象基类" tabindex="-1"><a class="header-anchor" href="#_4-抽象基类" aria-hidden="true">#</a> 4. 抽象基类</h4><p>Java的IO流共涉及40多个类，实际上非常规则，都是从如下4个抽象基类派生的。</p><p>由这四个类派生出来的子类名称都是以其父类名作为子类名后缀。</p><figure><img src="'+r+'" alt="8-2-2" tabindex="0" loading="lazy"><figcaption>8-2-2</figcaption></figure><h4 id="_5-io流体系" tabindex="-1"><a class="header-anchor" href="#_5-io流体系" aria-hidden="true">#</a> 5. IO流体系</h4><p>类的识别技巧：</p><ul><li>Input：输入；</li><li>Output：输出</li><li>Stream：字节流</li><li>Reader：输入字符流</li><li>Writer：输出字符流</li></ul><figure><img src="'+n+'" alt="8-2-3" tabindex="0" loading="lazy"><figcaption>8-2-3</figcaption></figure><h4 id="_6-节点流和处理流" tabindex="-1"><a class="header-anchor" href="#_6-节点流和处理流" aria-hidden="true">#</a> 6. 节点流和处理流</h4><h5 id="_6-1-节点流" tabindex="-1"><a class="header-anchor" href="#_6-1-节点流" aria-hidden="true">#</a> 6.1 节点流</h5><p>直接从数据源或目的地读写数据</p><figure><img src="'+d+'" alt="8-2-4" tabindex="0" loading="lazy"><figcaption>8-2-4</figcaption></figure><h5 id="_6-2-处理流" tabindex="-1"><a class="header-anchor" href="#_6-2-处理流" aria-hidden="true">#</a> 6.2 处理流</h5><p>不直接连接到数据源或目的地，而是“连接”在已存在的流（节点流或处理流）之上，通过对数据的处理为程序提供更为强大的读写功能。</p><figure><img src="'+o+'" alt="8-2-5" tabindex="0" loading="lazy"><figcaption>8-2-5</figcaption></figure>',22),s=[h];function _(u,g){return i(),e("div",null,s)}const f=a(c,[["render",_],["__file","8-2.IO流介绍.html.vue"]]);export{f as default};
