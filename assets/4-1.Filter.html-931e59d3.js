import{_ as n,o as a,c as s,b as e}from"./app-b1eed5ae.js";const t="/java-doc/img/java/javaweb/4-1-1.jpg",p={},i=e(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>Fileter是JavaWeb核心三模块之一，不过内容不多。</p></div><h4 id="_1-filter的位置" tabindex="-1"><a class="header-anchor" href="#_1-filter的位置" aria-hidden="true">#</a> 1. Filter的位置</h4><p>Filter是独立的Web模块，应该与Servlet的包在同一目录级创建Filter包，存放Filter类。</p><h4 id="_2-实现filter接口" tabindex="-1"><a class="header-anchor" href="#_2-实现filter接口" aria-hidden="true">#</a> 2. 实现Filter接口</h4><p>注意是：javax.servlet.Filter接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> filterDemo <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> 
        <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token comment">//初始化时的操作，不用关注</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span>
        <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token comment">//这里是过滤器主要操作的内容：重点关注这个</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//放行前的逻辑</span>
        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//默认是直接拦截的，需要放行</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//放行后的逻辑</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//过滤器正常关闭前的操作，不用关注</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="dofilter-放行" tabindex="-1"><a class="header-anchor" href="#dofilter-放行" aria-hidden="true">#</a> doFilter：放行</h5><p>请求被拦截后就不会去访问Servlet了，必须进行放行，才能继续访问接着访问。</p><p>使用doFilter方法中的chain对象的doFilter方法进行放行，参数是Request类和Response类</p><h5 id="放行前的逻辑" tabindex="-1"><a class="header-anchor" href="#放行前的逻辑" aria-hidden="true">#</a> 放行前的逻辑</h5><p>请求时会执行的逻辑，向Servlet发送请求时，被拦截器拦截，就会执行放行前的逻辑，然后放行去访问Servlet。</p><p>注意：请求阶段，不会执行放行后的逻辑（chain.doFilter后面的代码不会执行）</p><h5 id="放行后的逻辑" tabindex="-1"><a class="header-anchor" href="#放行后的逻辑" aria-hidden="true">#</a> 放行后的逻辑</h5><p>当Servlet进行响应时，也是会被对应的拦截器拦截的吗，此时就会执行放行后的逻辑。</p><p>注意：此时放行前的逻辑不会再执行了（chain.doFiter方法以及该方法之前的代码都不会执行）。</p><h4 id="_2-配置拦截路径" tabindex="-1"><a class="header-anchor" href="#_2-配置拦截路径" aria-hidden="true">#</a> 2. 配置拦截路径</h4><p>使用@WebFilter注解进行配置，拦截路径有如下四种配置方式</p><ul><li>拦截具体的资源：/index.jsp：只有访问index.jsp时才会被拦截</li><li>目录拦截：/user/*：访问/user下的所有资源，都会被拦截</li><li>后缀名拦截：*.jsp：访问后缀名为jsp的资源，都会被拦截</li><li>拦截所有：/*：访问所有资源，都会被拦截</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//具体资源路径:只拦截具体的某个路径的访问</span>
<span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/index.jsp&quot;</span><span class="token punctuation">)</span>

<span class="token comment">//拦截目录:拦截某个目录下所有资源的请求</span>
<span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/user/*&quot;</span><span class="token punctuation">)</span>

<span class="token comment">//后缀名拦截:对某类格式的资源请求进行拦截</span>
<span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;*.jsp&quot;</span><span class="token punctuation">)</span>

<span class="token comment">//拦截所有资源:访问所有资源时，过滤器都会被执行</span>
<span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/*&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-拦截方式的配置" tabindex="-1"><a class="header-anchor" href="#_3-拦截方式的配置" aria-hidden="true">#</a> 3. 拦截方式的配置</h4><p>拦截方式，即资源被访问的方式，一共有5种。</p><p>需要使用@WebFilter注解的dispatcherTypes属性来配置，不配置的话有缺省值。</p><ul><li>REQUEST：默认值；只有浏览器直接请求的资源，才会被拦截拦截</li><li>FORWARD：转发；只有Servlet内部转发的请求，才会被拦截</li><li>INCLUDE：包含；转发访问资源，[ 仅了解 ]</li><li>ERROR：错误；错误跳转资源，暂略</li><li>ASYNC：异步；异步访问资源，用于Ajax的访问，暂略。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;/*&quot;</span><span class="token punctuation">,</span> dispatcherTypes <span class="token operator">=</span> <span class="token class-name">DispatcherType</span><span class="token punctuation">.</span><span class="token constant">REQUEST</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;/*&quot;</span><span class="token punctuation">,</span> dispatcherTypes <span class="token operator">=</span> <span class="token class-name">DispatcherType</span><span class="token punctuation">.</span><span class="token constant">FORWARD</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="配置多个值" tabindex="-1"><a class="header-anchor" href="#配置多个值" aria-hidden="true">#</a> 配置多个值</h5><p>dispatcherTypes的值可以是个数组，来同时配置多个值</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>
    value<span class="token operator">=</span><span class="token string">&quot;/*&quot;</span><span class="token punctuation">,</span> 
    dispatcherTypes <span class="token operator">=</span><span class="token punctuation">{</span><span class="token class-name">DispatcherType</span><span class="token punctuation">.</span><span class="token constant">REQUEST</span><span class="token punctuation">,</span><span class="token class-name">DispatcherType</span><span class="token punctuation">.</span><span class="token constant">FORWARD</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-过滤器链-多个过滤器" tabindex="-1"><a class="header-anchor" href="#_4-过滤器链-多个过滤器" aria-hidden="true">#</a> 4. 过滤器链：多个过滤器</h4><p>某个资源可以有多个过滤器时，此时注意过滤器执行的顺序</p><figure><img src="`+t+'" alt="4-1-1" tabindex="0" loading="lazy"><figcaption>4-1-1</figcaption></figure><h5 id="多个过滤器的执行顺序" tabindex="-1"><a class="header-anchor" href="#多个过滤器的执行顺序" aria-hidden="true">#</a> 多个过滤器的执行顺序</h5><p>先进，后出</p><ul><li>过滤器1：请求，执行chain.doFilter()前的代码</li><li>过滤器2：请求，执行chain.doFilter()前的代码</li><li>资源的访问</li><li>过滤器2：响应，执行chain.doFilter()后的代码</li><li>过滤器1：响应，执行chain.doFilter()后的代码</li></ul><h4 id="_5-过滤器的优先级" tabindex="-1"><a class="header-anchor" href="#_5-过滤器的优先级" aria-hidden="true">#</a> 5. 过滤器的优先级</h4><p>按照过滤器类名的字符串自然排序规则比较，值小的先执行</p><p>如： AFilter 和 BFilter，AFilter就先执行了。</p>',36),l=[i];function c(o,r){return a(),s("div",null,l)}const d=n(p,[["render",c],["__file","4-1.Filter.html.vue"]]);export{d as default};
