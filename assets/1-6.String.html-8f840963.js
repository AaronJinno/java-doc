import{_ as p,r as n,o,c,a as l,b as a,d as s,w as i,e as r}from"./app-66068f58.js";const u="/java-doc/img/java/javase/1-6-1.jpg",k="/java-doc/img/java/javase/1-6-2.jpg",d={},m=r(`<p>String类型是引用类型，不属于基本数据类型。定义时必须使用双引号，不能使用单引号。</p><h4 id="_1-string对象的创建" tabindex="-1"><a class="header-anchor" href="#_1-string对象的创建" aria-hidden="true">#</a> 1. String对象的创建</h4><p>有两种创建方式：</p><ul><li>字面量：和基本数据类型一样，只是关键字是String，因为String经常用到，所以JDK对它进行了优化。</li><li>构造器：使用new String创建</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;javaEE&quot;</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;javaEE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-字符串常量池" tabindex="-1"><a class="header-anchor" href="#_2-字符串常量池" aria-hidden="true">#</a> 2. 字符串常量池</h4><p>通过字面量的方式（区别于new）给一个字符串赋值，此时的字符串值声明在字符串常量池中。<br> 字符串常量池中是不会存储相同内容的字符串的。</p><p>结论：给两个String类型的变量，赋值相同的值，他们会指向同一个内存地址。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span> <span class="token comment">//关键字是String，值必须加双引号</span>
<span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token operator">==</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true,说明两个变量内存地址相同</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
<span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;aa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;aa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token operator">==</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-string类的特性" tabindex="-1"><a class="header-anchor" href="#_3-string类的特性" aria-hidden="true">#</a> 3. String类的特性</h4><ul><li>String类代表 字符串。Java 程序中的所有字符串字面值（如 &quot;abc&quot; ）都作为此类的实例实现。</li><li>String是一个final类，代表不可变的字符序列。简称：不可变性。</li><li>String实现了两个接口 <ul><li>Serializable接口：表示字符串是支持序列化的。</li><li>实现了Comparable接口：表示String可以比较大小</li></ul></li><li>String内部底层定义了final char[] value用于存储字符串数据</li></ul><h4 id="_4-字符串的不可变性" tabindex="-1"><a class="header-anchor" href="#_4-字符串的不可变性" aria-hidden="true">#</a> 4. 字符串的不可变性</h4><p>字符串也属于引用类型，但他是个Final类，储存值使用的是一个Final数组，因此一旦赋值成功，该内存地址（引用）里的值将无法改变。</p><h5 id="_4-1-具体体现" tabindex="-1"><a class="header-anchor" href="#_4-1-具体体现" aria-hidden="true">#</a> 4.1 具体体现</h5><ul><li>当对字符串重新赋值时，需要重新指定内存区域赋值，不能使用原有的value进行赋值。</li><li>当对现有的字符串进行连接操作时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。</li><li>当调用String的replace()方法修改指定字符或字符串时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。</li></ul><h5 id="_4-2-内存图示" tabindex="-1"><a class="header-anchor" href="#_4-2-内存图示" aria-hidden="true">#</a> 4.2 内存图示</h5><figure><img src="`+u+'" alt="1-6-1" tabindex="0" loading="lazy"><figcaption>1-6-1</figcaption></figure><h4 id="_5-string对象的内存分析" tabindex="-1"><a class="header-anchor" href="#_5-string对象的内存分析" aria-hidden="true">#</a> 5. String对象的内存分析</h4><h5 id="_5-1-string对象的储存" tabindex="-1"><a class="header-anchor" href="#_5-1-string对象的储存" aria-hidden="true">#</a> 5.1 String对象的储存</h5><ul><li>通过字面量创建的String，值是直接储存在字符串常量词的，标识符保存常量池的内存地址；</li><li>通过new+构造器的方式创建的String，String对象是储存在堆中的，标识符保存String对象的地址。 <ul><li>String对象中有一个属性values，该属性是引用类型，保存了具体字符串值的内存地址，具体的值也是保存在常量词中的。</li></ul></li></ul><h5 id="_5-2-内存图示" tabindex="-1"><a class="header-anchor" href="#_5-2-内存图示" aria-hidden="true">#</a> 5.2 内存图示</h5><figure><img src="'+k+`" alt="1-6-2" tabindex="0" loading="lazy"><figcaption>1-6-2</figcaption></figure><h5 id="_5-3-对象中的字符串" tabindex="-1"><a class="header-anchor" href="#_5-3-对象中的字符串" aria-hidden="true">#</a> 5.3 对象中的字符串</h5><p>字符串属于引用类型，在创建的对象中，属性只能保存字符串的内存地址，真正的值是储存在常量池中的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name <span class="token operator">==</span> p2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Jerry&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Tom</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-string的运算-拼接操作" tabindex="-1"><a class="header-anchor" href="#_6-string的运算-拼接操作" aria-hidden="true">#</a> 6. String的运算：拼接操作</h4><p>String可以和8种基本数据类型变量做运算，且运算只能是连接运算：+。</p><p>运算的结构是将这些值连接起来了，依然是String类型</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span><span class="token comment">//97   A:65</span>
<span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c <span class="token operator">+</span> num <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//107hello</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c <span class="token operator">+</span> str <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ahello10</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str <span class="token operator">+</span> num <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//hello10a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-类型转换" tabindex="-1"><a class="header-anchor" href="#_7-类型转换" aria-hidden="true">#</a> 7. 类型转换</h4><p>不支持直接string类型转其他类型，包括强制类型转换。</p><p>实在需要转换类型，需要使用包装函数进行（详见OOP）。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">&quot;43&quot;</span><span class="token punctuation">;</span> 
 <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8-string的操作" tabindex="-1"><a class="header-anchor" href="#_8-string的操作" aria-hidden="true">#</a> 8. String的操作</h4>`,34);function g(v,h){const t=n("ExternalLinkIcon"),e=n("RouterLink");return o(),c("div",null,[m,l("p",null,[a("详见 "),s(e,{to:"/java/func/1.JDK%E5%B8%B8%E7%94%A8%E7%B1%BB/1-1.String.html",target:"_blank"},{default:i(()=>[a("String类的方法"),s(t)]),_:1})])])}const _=p(d,[["render",g],["__file","1-6.String.html.vue"]]);export{_ as default};
