import{_ as i,a as c,b as t}from"./4-3-3-5f7da0ef.js";import{_ as l,r as p,o as d,c as r,a,b as s,d as o,e as n}from"./app-889eb22c.js";const u={},m=n('<div class="hint-container tip"><p class="hint-container-title">提示</p><p>Linux上的Elasticsearch集群和单机的部署方式差不多，就多了一些集群方面的配置。</p><p>这里和单机版的配置有大量重复内容。</p></div><h2 id="整体步骤" tabindex="-1"><a class="header-anchor" href="#整体步骤" aria-hidden="true">#</a> 整体步骤</h2><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><p>ES8需要Java17，不过ES8会默认会捆绑JDK，所以不配置Java环境也可以。</p><h4 id="_1-下载es" tabindex="-1"><a class="header-anchor" href="#_1-下载es" aria-hidden="true">#</a> 1. 下载ES</h4>',5),h={href:"https://www.elastic.co/cn/downloads/past-releases#elasticsearch",target:"_blank",rel:"noopener noreferrer"},v=n(`<p>可以在本地下载上传到服务器，也可以直接在服务器进行wget下载。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>wget https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>artifacts<span class="token punctuation">.</span>elastic<span class="token punctuation">.</span>co<span class="token operator">/</span>downloads<span class="token operator">/</span>elasticsearch<span class="token operator">/</span>elasticsearch<span class="token operator">-</span><span class="token number">8.7</span><span class="token number">.0</span><span class="token operator">-</span>linux<span class="token operator">-</span>x86_64<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-上传安装包-规划目录" tabindex="-1"><a class="header-anchor" href="#_2-上传安装包-规划目录" aria-hidden="true">#</a> 2. 上传安装包，规划目录</h4><ul><li>上传目录：<code>/opt/soft-bar/</code>，该目录用来存放安装包</li><li>工作目录：<code>/opt/es/</code>：该目录存放所有ES相关的内容 <ul><li>解压目录：<code>/opt/es/es-8.7.0/</code></li><li>其他ES文件也都放在该目录下，包括Kibana</li></ul></li></ul><h5 id="_3-解压缩" tabindex="-1"><a class="header-anchor" href="#_3-解压缩" aria-hidden="true">#</a> 3. 解压缩</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /opt/soft-bar
<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> elasticsearch-8.7.0-linux-x86_64.tar.gz <span class="token parameter variable">-C</span> /opt/es
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>解压后的目录结构：</p><figure><img src="`+i+`" alt="4-3-1" tabindex="0" loading="lazy"><figcaption>4-3-1</figcaption></figure><ul><li>bin：可执行脚本目录</li><li>config：配置目录</li><li>jdk：内置JDK</li><li>lib：内置类库</li><li>logs：日志目录</li><li>modules：模块目录</li><li>plugins：插件目录</li></ul><h5 id="_4-补齐目录" tabindex="-1"><a class="header-anchor" href="#_4-补齐目录" aria-hidden="true">#</a> 4. 补齐目录</h5><p>解压后的目录结构还缺一个数据文件目录和证书目录。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /opt/es/elasticsearch-8.7.0
<span class="token function">mkdir</span> data <span class="token comment"># 创建数据文件目录</span>
<span class="token function">mkdir</span> certs <span class="token comment"># 创建证书目录</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-创建es用户" tabindex="-1"><a class="header-anchor" href="#_5-创建es用户" aria-hidden="true">#</a> 5. 创建es用户</h4><p>Elasticsearch 不能使用 root用户启动，因此要创建一个名为es的用户操作Elasticsearch。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">useradd</span> es <span class="token comment"># 创建用户</span>
<span class="token function">passwd</span> es <span class="token comment"># 设置密码，回车输入密码，这里暂密码暂定为es</span>
<span class="token function">chown</span> <span class="token parameter variable">-R</span> es:es /opt/es/elasticsearch-8.7.0 <span class="token comment"># 修改文件拥有者</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ca证书" tabindex="-1"><a class="header-anchor" href="#ca证书" aria-hidden="true">#</a> CA证书</h2><p>证书是用来进行身份验证，防止请求被篡改的。不使用证书可能会报错。</p><p>ES通过内置的elasticsearch-certutil工具来生成证书。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /opt/es/elasticsearch-8.7.0/config
<span class="token function">mkdir</span> certs
<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>
<span class="token function">mv</span> elastic-* config/certs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-ca模式。" tabindex="-1"><a class="header-anchor" href="#_1-ca模式。" aria-hidden="true">#</a> 1. CA模式。</h4><p>创建证书有四种模式：ca、cert、csr、http，我们这里采用CA模式</p><ul><li>CA模式生成新的证书颁发机构(ca)。默认情况下，它生成一个PKCS#12输出文件，其中保存CA证书和CA的私钥。</li><li>也可以指定–pem参数，则命令生成一个zip文件，其中包含PEM格式的证书和私钥。随后可以使用这些文件作为命令的cert模式的输入。</li><li>PKCS#12文件：一种交换数字证书的加密标准。通常用它来加密打包一个私钥及有关的 X.509 证书，产生的文件就是PKCS#12文件。</li></ul><h4 id="_2-ca证书" tabindex="-1"><a class="header-anchor" href="#_2-ca证书" aria-hidden="true">#</a> 2. CA证书</h4><ul><li>证书：用来证明受访问的服务身份信息。</li><li>签名：存在证书上的一个可信标识，代表该证书是经过认证的，因为假冒服务器也可以有证书。</li><li>CA证书：是公认可靠的CA(certificate authority)机构签发的证书</li></ul><figure><img src="`+c+'" alt="4-3-2" tabindex="0" loading="lazy"><figcaption>4-3-2</figcaption></figure><h4 id="_3-ca证书工作机理" tabindex="-1"><a class="header-anchor" href="#_3-ca证书工作机理" aria-hidden="true">#</a> 3. CA证书工作机理</h4><p>通过HTTPS请求的步骤来说明CA证书的工作机理</p><ul><li>浏览器发起https请求</li><li>服务器返回它的证书</li><li>浏览器通过CA的公钥对证书签名进行校验，检查证书是否有效</li><li>浏览器生成一个临时秘钥并用服务器的公钥对它加密，然后将其发送给服务器。</li><li>服务器用私钥解密，得到浏览器发送给它的秘钥， 然后用该秘钥对数据进行加密</li><li>浏览器得到加密数据，并用发给服务端的秘钥进行解密。</li></ul><figure><img src="'+t+`" alt="4-3-3" tabindex="0" loading="lazy"><figcaption>4-3-3</figcaption></figure><h4 id="_4-签发ca证书" tabindex="-1"><a class="header-anchor" href="#_4-签发ca证书" aria-hidden="true">#</a> 4. 签发ca证书</h4><p>需要用到内置的<code>elasticsearch-certutil ca</code> 命令，在 elasticsearch-8.7.0/bin目录中</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">su</span> es <span class="token comment"># 切换用户</span>
<span class="token builtin class-name">cd</span>  /opt/es/elasticsearch-8.7.0/bin <span class="token comment"># 进入bin目录</span>
./elasticsearch-certutil ca <span class="token comment"># 签发 ca 证书</span>

<span class="token comment"># 签发 ca 证书时有两次交互，直接回车即可</span>
<span class="token comment"># 第一次交互：设置文件名，回车采用默认名，默认文件在ES软件根目录中</span>
Please enter the desired output <span class="token function">file</span> <span class="token punctuation">[</span>elastic-stack-ca.p12<span class="token punctuation">]</span>: 
<span class="token comment"># 第二次交互：设置ca证书密码，直接回车将采用空密码，如果设置了要保存后，后续会用</span>
Enter password <span class="token keyword">for</span> elastic-stack-ca.p12 <span class="token builtin class-name">:</span>  <span class="token comment"># 设置密码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认生成的证书位置：/opt/es/elasticsearch-8.7.0/elastic-stack-ca.p12</p><p>@@@@@@@@@@@@@@集群配置专属@@@@@@@@@@@@@@</p><h4 id="_5-生成秘钥-节点证书" tabindex="-1"><a class="header-anchor" href="#_5-生成秘钥-节点证书" aria-hidden="true">#</a> 5. 生成秘钥（节点证书）</h4><p>使用ca证书生成秘钥，作发节点的证书，该证书用于节点之间的通信（集群多节点通信秘钥）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 用户 和目录同上：elastic-stack-ca.p12就是刚刚生成的ca节点证书</span>
./elasticsearch-certuil cert <span class="token parameter variable">--ca</span> elastic-stack-ca.p12

<span class="token comment"># 签发过程有三次交互</span>
<span class="token comment"># 第一次交互：设输入ca证书的密码，之前没有设置密码就直接回车</span>
Enter password <span class="token keyword">for</span> CA <span class="token punctuation">(</span>elastic-stack-ca.p12<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> 
<span class="token comment"># 第二次交互：设置节点证书的文件名，直接回车采用默认的</span>
Please enter the desired output <span class="token function">file</span> <span class="token punctuation">[</span>elastic-certificates.p12<span class="token punctuation">]</span>: 
<span class="token comment"># 第三次交互：</span>
Enter password <span class="token keyword">for</span> elastic-certificates.p12 <span class="token builtin class-name">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>签发完成后，就在ES 根目录中生成了elastic-certificates.p12，它是单个PKCS#12密钥存储库，其中包括节点证书、节点密钥和CA证书。</p><p>集群中每个节点都可以使用该证书</p><p>@@@@@@@@@@@@@@集群配置专属@@@@@@@@@@@@@@</p><h4 id="_5-移动证书" tabindex="-1"><a class="header-anchor" href="#_5-移动证书" aria-hidden="true">#</a> 5. 移动证书</h4><p>生成的证书要放到到config目录内，可以在config目录下创建certs目录用来存放证书。</p><h4 id="_6-签发http证书" tabindex="-1"><a class="header-anchor" href="#_6-签发http证书" aria-hidden="true">#</a> 6. 签发HTTP证书</h4><div class="hint-container danger"><p class="hint-container-title">注意</p><p>注意：使用使用 elasticsearch-certutil 工具自己生成的CA，签发的证书属于自认证证书，该证书浏览器是不不会信任的，需要手动让浏览器信任。</p><p>可以选择使用第三方签发的受信任的证书。</p></div><p>使用CA证书签发HTTP证书，以便可以使用HTTP REST API方式访问ES服务。</p><p>其他组件（例如 Kibana 或任何 Elastic 语言客户端）在连接到 ES服务 时会验证此证书。</p><p>生成证书的流程很复杂，交互很多，如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 用户 和目录同上</span>
./elasticsearch-certutil http


<span class="token comment"># 生成http证书的过程要进行多次交互</span>
<span class="token comment"># 第1次: 是否生成证书签名请求</span>
Generate a CSR? <span class="token punctuation">[</span>y/N<span class="token punctuation">]</span> <span class="token comment"># n</span>

<span class="token comment"># 第2次: 是否要使用现有 CA</span>
Use an existing CA? <span class="token punctuation">[</span>y/N<span class="token punctuation">]</span> <span class="token comment"># y</span>

<span class="token comment"># 第3次: 指定ca证书的路径：以es软件/config为起始路径</span>
CA Path: <span class="token comment"># certs/elastic-stack-ca.p12 </span>

<span class="token comment"># 第4次: 输入CA证书的密码，之前没有创建，这里直接回车</span>
Password <span class="token keyword">for</span> elastic-stack-ca.p12: <span class="token comment"># 直接回车</span>

<span class="token comment"># 第5次: 证书的生效时间：默认是5y(5年)</span>
For how long should your certificate be valid? <span class="token punctuation">[</span>5y<span class="token punctuation">]</span> <span class="token comment"># 20y # 设置成了20年</span>

<span class="token comment"># 第6次: 是否为每个节点创建一个单独的证书：不需要，即使是集群也只需主节点创建证书</span>
Generate a certificate per node? <span class="token punctuation">[</span>y/N<span class="token punctuation">]</span> <span class="token comment"># n</span>

<span class="token comment"># 第7和8是用来配置DNS与证书绑定的：域名-&gt;ip：绑定证书</span>
<span class="token comment"># 第7次：输入链接到ES的主机名称 # 如果是集群需要所如所有集群的主机名称</span>
<span class="token comment">## 列出将用于连接的每个主机名（域名），如果该域名没有被解析，就需要本地进行hosts映射</span>
<span class="token comment">## 实在没有进行过解析，这里直接输入域名也可以</span>
aicell.cc <span class="token comment"># 回车一次就可以输入一个名字，两次回车就输入完毕</span>
Is this correct <span class="token punctuation">[</span>Y/n<span class="token punctuation">]</span> <span class="token comment">#y，确认名字输入是否正确</span>

<span class="token comment"># 第8次: 输入主机名对应的ip地址，ip解析后就是之前输入的域名</span>
<span class="token comment">## 如果是单节点集群，就要指定端口号</span>
<span class="token number">159.75</span>.225.162 <span class="token comment"># 要与主机名对应，</span>
Is this correct <span class="token punctuation">[</span>Y/n<span class="token punctuation">]</span> <span class="token comment">#y，确认名字输入是否正确</span>
<span class="token comment">## Key Name: aicell.cc </span>
<span class="token comment">## Subject DN: CN=aicell，DC=cc</span>


<span class="token comment"># 第9次: 是否对集群中的每个节点重复上述操作，不用</span>
Do you wish to change any of these options? <span class="token punctuation">[</span>y/N<span class="token punctuation">]</span> <span class="token comment"># n </span>

<span class="token comment"># 第10次: 是否给证书加密</span>
Provide a password <span class="token keyword">for</span> the <span class="token string">&quot;http.p12&quot;</span> file:  <span class="token comment"># 连续回车两次，不加密</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完成上述10个步骤，证书就生成好了，是一个压缩包，需要解压获取证书。</p><p>证书位置：/opt/es/elasticsearch-8.7.0/elasticsearch-ssl-http.zip</p><h4 id="_7-解压并移动http证书" tabindex="-1"><a class="header-anchor" href="#_7-解压并移动http证书" aria-hidden="true">#</a> 7. 解压并移动http证书</h4><h5 id="_7-1-解压http证书" tabindex="-1"><a class="header-anchor" href="#_7-1-解压http证书" aria-hidden="true">#</a> 7.1 解压http证书</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span>  /opt/es/elasticsearch-8.7.0 
<span class="token function">unzip</span> elasticsearch-ssl-http.zip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>解压后会在<code>/opt/es/elasticsearch-8.7.0/</code> 目录下产生两个信息目录</p><ul><li>elasticsearch：目录内有http.p12证书</li><li>kibana：目录内有elasticsearch-ca.pem证书</li></ul><h4 id="_7-2-移动证书" tabindex="-1"><a class="header-anchor" href="#_7-2-移动证书" aria-hidden="true">#</a> 7.2 移动证书</h4><p>将两个证书移动到certs目录中。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span>  /opt/es/elasticsearch-8.7.0 
<span class="token function">mv</span> elasticsearch/http.p12 kibana/elasticsearch-ca.pem config/certs
<span class="token function">rm</span> <span class="token parameter variable">-rf</span> elasticsearch kibana <span class="token comment"># 删除之前生成的目录</span>
<span class="token function">mv</span> elasticsearch-ssl-http.zip <span class="token punctuation">..</span>/ <span class="token comment"># 将http证书压缩包移动到别的位置，备份</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h2><p>修改主配置文件：config/elasticsearch.yml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="启动es" tabindex="-1"><a class="header-anchor" href="#启动es" aria-hidden="true">#</a> 启动ES</h2><h2 id="debug" tabindex="-1"><a class="header-anchor" href="#debug" aria-hidden="true">#</a> debug</h2><h4 id="_1-默认jvm内存过大" tabindex="-1"><a class="header-anchor" href="#_1-默认jvm内存过大" aria-hidden="true">#</a> 1. 默认JVM内存过大</h4><h4 id="_2-虚拟内存过小" tabindex="-1"><a class="header-anchor" href="#_2-虚拟内存过小" aria-hidden="true">#</a> 2. 虚拟内存过小</h4><p>报错：<code>max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</code>，虚拟内存过小，只有65530，至少需要262144</p><p>将虚拟内存修改层262144</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看当前虚拟内存</span>
<span class="token function">cat</span> /proc/sys/vm/max_map_count <span class="token comment"># 65530 </span>

<span class="token comment"># 修改虚拟内存</span>
<span class="token function">sudo</span> <span class="token function">sysctl</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">vm.max_map_count</span><span class="token operator">=</span><span class="token number">262144</span> <span class="token comment"># vm.max_map_count=262144</span>

<span class="token comment"># 再次查看当前内存</span>
<span class="token function">cat</span> /proc/sys/vm/max_map_count <span class="token comment"># 262144</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-协议错误" tabindex="-1"><a class="header-anchor" href="#_3-协议错误" aria-hidden="true">#</a> 3. 协议错误</h4><ul><li>报错：received plaintext http traffic on an https chann<br> 配置了ssl，就要用https访问，而不是http</li></ul>`,70);function b(k,f){const e=p("ExternalLinkIcon");return d(),r("div",null,[m,a("ul",null,[a("li",null,[s("下载地址："),a("a",h,[s("LINUX_X86_64"),o(e)])])]),v])}const x=l(u,[["render",b],["__file","4-4.Linux集群.html.vue"]]);export{x as default};
