import{_ as n,o as s,c as e,e as t}from"./app-171d5e07.js";const o="/java-doc/img/java/javaweb/3-4-1.jpg",p="/java-doc/img/java/javaweb/3-4-2.jpg",a="/java-doc/img/java/javaweb/3-4-3.jpg",c={},i=t(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>采用注解的方式配置路由。</p><p>也可以采用XML，不过一般不这么用。</p></div><h2 id="i-注解配置路由" tabindex="-1"><a class="header-anchor" href="#i-注解配置路由" aria-hidden="true">#</a> Ⅰ. 注解配置路由</h2><h4 id="_1-urlpattern" tabindex="-1"><a class="header-anchor" href="#_1-urlpattern" aria-hidden="true">#</a> 1. urlPattern</h4><p>配置路由用的是@WebServlet注解，在该注解中，value和urlPatterns是等效的，都可以用来指定url。且他们都是数组，因此一个Servlet可以配置多个urlPattern。</p><h4 id="_2-语法" tabindex="-1"><a class="header-anchor" href="#_2-语法" aria-hidden="true">#</a> 2. 语法</h4><p>在Servlet实现类的@WebServlet注解内。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns<span class="token operator">=</span><span class="token string">&quot;/资源路径&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//只有一个属性可以省略urlPatterns</span>
<span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;资源路径&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//不写属性就相当于是value</span>
<span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/demo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//必须要加/,不能直接demo</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-配置项" tabindex="-1"><a class="header-anchor" href="#_3-配置项" aria-hidden="true">#</a> 3. 配置项</h4><p>WebServer有很多配置项，而且除了路由，所有配置项都有默认值，且采用默认值即可。因此只需要配置一下路由。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">WebServlet</span> <span class="token punctuation">{</span>
     <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span><span class="token comment">//相当于&lt;Servlet-name&gt;</span>
     <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//代表urlPatterns()属性配置</span>
     <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">urlPatterns</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//相当于&lt;url-pattern&gt;</span>
     <span class="token keyword">int</span> <span class="token function">loadOnStartup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//相当于&lt;load-on-startup&gt;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-匹配模式" tabindex="-1"><a class="header-anchor" href="#ii-匹配模式" aria-hidden="true">#</a> Ⅱ. 匹配模式</h2><p>urlPattern一共有四种匹配模式：精准、目录、扩展名、任意。</p><h4 id="_1-精确匹配" tabindex="-1"><a class="header-anchor" href="#_1-精确匹配" aria-hidden="true">#</a> 1. 精确匹配</h4><p>配置的路径和访问的路径是一样的。</p><figure><img src="`+o+`" alt="3-4-1" tabindex="0" loading="lazy"><figcaption>3-4-1</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">&quot;/user/select&quot;</span><span class="token punctuation">)</span>
<span class="token comment">//访问路径：http://localhost:8080/web-demo/user/select</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-目录匹配" tabindex="-1"><a class="header-anchor" href="#_2-目录匹配" aria-hidden="true">#</a> 2. 目录匹配</h4><figure><img src="`+p+`" alt="3-4-2" tabindex="0" loading="lazy"><figcaption>3-4-2</figcaption></figure><p><code>/* </code>代表的是零或多个层级访问目录。</p><p>只要是/*前面的能匹配到，后面是什么都无所谓。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">&quot;/user/*&quot;</span><span class="token punctuation">)</span>
<span class="token comment">//访问路径http://localhost:8080/web-demo/user/任意</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-扩展名匹配" tabindex="-1"><a class="header-anchor" href="#_3-扩展名匹配" aria-hidden="true">#</a> 3. 扩展名匹配</h4><p>该匹配规则和其他三个是不同的，它只识别扩展名。</p><figure><img src="`+a+`" alt="3-4-3" tabindex="0" loading="lazy"><figcaption>3-4-3</figcaption></figure><p>如果路径配置的不是扩展名，那么在路径的前面就必须要加<code>/</code>否则会报错</p><p>如果路径配置的是<code>*.do</code>,那么在*.do的前面不能加<code>/</code>,否则会报错</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">&quot;*.do&quot;</span><span class="token punctuation">)</span>
<span class="token comment">//访问路径http://localhost:8080/web-demo/任意.do</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-任意匹配" tabindex="-1"><a class="header-anchor" href="#_4-任意匹配" aria-hidden="true">#</a> 4. 任意匹配</h4><figure><img src="`+a+`" alt="3-4-3" tabindex="0" loading="lazy"><figcaption>3-4-3</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">&quot;/*&quot;</span><span class="token punctuation">)</span>
<span class="token comment">//访问路径http://localhost:8080/demo-web/任意</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>defaultServlet：Tomcat中有一个DefaultServlet，当其他的url-pattern都匹配不上时都会走这个Servlet</li><li><code>/</code> 与 <code>/*</code>：<code>/</code> 与 <code>/*</code> 都表示任意匹配。 <code>/*</code>的优先级 &gt; <code>/</code><ul><li>使用 <code>/</code> 会覆盖掉defaultServlet。</li></ul></li><li>defaultServlet的覆盖：如果项目中的Servlet配置了 &quot;/&quot;,会覆盖掉tomcat中的DefaultServlet <ul><li>DefaultServlet是用来处理静态资源，如果配置了&quot;/&quot;会把默认的覆盖掉，就会引发请求静态资源的时候没有走默认的而是走了自定义的Servlet类，最终导致静态资源不能被访问</li></ul></li></ul><h4 id="_5-优先级" tabindex="-1"><a class="header-anchor" href="#_5-优先级" aria-hidden="true">#</a> 5. 优先级</h4><p>精确匹配 &gt; 目录匹配&gt; 扩展名匹配 &gt; <code>/*</code> &gt; <code>/</code></p><h2 id="iii-xml配置路由" tabindex="-1"><a class="header-anchor" href="#iii-xml配置路由" aria-hidden="true">#</a> Ⅲ. XML配置路由</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>略，用注解就可以了。</p></div>`,35),l=[i];function u(r,d){return s(),e("div",null,l)}const k=n(c,[["render",u],["__file","3-4.路由.html.vue"]]);export{k as default};
