const t=JSON.parse('{"key":"v-0635775a","path":"/java/func/2.JDK.util%E5%8C%85/","title":"2.JDK.util包","lang":"zh-CN","frontmatter":{"title":"2.JDK.util包","index":false,"description":"位置 rt.jar>java>util>Scanner.java 【class】 用来扫描输入文本的类。 Scanner类的用法很多，这里只介绍简单的命令行，方便进行一些测试。 结构 使用 通过Scanner类来获取用户的输入。 通过 Scanner 类的 next() 与 nextLine() 方法获取输入的字符串，在读取前我们一般需要使用hasNe...","head":[["meta",{"property":"og:url","content":"https://aicell.cc/java-doc/java/func/2.JDK.util%E5%8C%85/"}],["meta",{"property":"og:site_name","content":"Java全栈"}],["meta",{"property":"og:title","content":"2.JDK.util包"}],["meta",{"property":"og:description","content":"位置 rt.jar>java>util>Scanner.java 【class】 用来扫描输入文本的类。 Scanner类的用法很多，这里只介绍简单的命令行，方便进行一些测试。 结构 使用 通过Scanner类来获取用户的输入。 通过 Scanner 类的 next() 与 nextLine() 方法获取输入的字符串，在读取前我们一般需要使用hasNe..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-25T05:54:21.000Z"}],["meta",{"property":"article:author","content":"Victor Da V"}],["meta",{"property":"article:modified_time","content":"2023-04-25T05:54:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2.JDK.util包\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-25T05:54:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Victor Da V\\",\\"url\\":\\"https://aicell.cc/about\\"}]}"]]},"headers":[],"git":{"createdTime":1682402061000,"updatedTime":1682402061000,"contributors":[{"name":"Aaron Jinno","email":"aaronjinno@gmail.com","commits":1}]},"readingTime":{"minutes":2.13,"words":640},"filePathRelative":"java/func/2.JDK.util包/README.md","localizedDate":"2023年4月25日","excerpt":"","autoDesc":true}');export{t as data};
