import{_ as n,o as a,c as s,e as t}from"./app-dca03e8f.js";const e="/java-doc/img/java/javase/4-2-1.jpg",p={},o=t(`<h2 id="i-annotation" tabindex="-1"><a class="header-anchor" href="#i-annotation" aria-hidden="true">#</a> Ⅰ. Annotation</h2><h4 id="_1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-介绍" aria-hidden="true">#</a> 1. 介绍</h4><p>从JDK5.0 开始, Java 增加了对元数据(MetaData) 的支持, 也就是Annotation(注解)。</p><h5 id="_1-1-什么是annotation" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是annotation" aria-hidden="true">#</a> 1.1 什么是Annotation</h5><ul><li>Annotation其实就是代码里的特殊标记, 这些标记可以在编译, 类加载, 运行时被读取, 并执行相应的处理。</li><li>通过使用Annotation, 程序员可以在不改变原有逻辑的情况下, 在源文件中嵌入一些补充信息。 <ul><li>代码分析工具、开发工具和部署工具可以通过这些补充信息进行验证或者进行部署。</li></ul></li><li>Annotation 可以像修饰符一样被使用, 可用于修饰包, 类, 构造器, 方法, 成员变量, 参数, 局部变量, 这些信息被保存在 Annotation</li></ul><h5 id="_1-2-注解的用途" tabindex="-1"><a class="header-anchor" href="#_1-2-注解的用途" aria-hidden="true">#</a> 1.2 注解的用途</h5><ul><li>在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。</li><li>在JavaEE/Android中注解占据了更重要的角色.</li><li>未来的开发模式都是基于注解的，JPA是基于注解的，Spring2.5以上都是基于注解的，Hibernate3.x以后也是基于注解的，现在的Struts2有一部分也是基于注解的了，注解是一种趋势，一定程度上可以说：框架 = 注解 + 反射 + 设计模式。</li></ul><h4 id="_2-注解的使用" tabindex="-1"><a class="header-anchor" href="#_2-注解的使用" aria-hidden="true">#</a> 2. 注解的使用</h4><p>使用 Annotation 时要在其前面增加 @ 符号, 并把该 Annotation 当成一个修饰符使用。用于修饰它支持的程序元素。</p><ul><li>①用于文档注释：格式详见：基本语法-&gt;文档注释</li><li>②在编译时进行格式检查 <ul><li>@Override：限制下面的方法为重写父类中的方法</li><li>@Deprecated：标记所修饰的类、方法等已过时，有更好的选择</li><li>@SuppressWarnings：抑制编译器警告，比如拼写检查</li></ul></li><li>③减少配置：运行时动态处理，得到注解信息，实现代替配置文件的功能； <ul><li>实现替代配置文件功能：常用于JavaWeb</li><li>Servlet3.0提供了注解(annotation),使得不再需要在web.xml文件中进行Servlet的部署。</li></ul></li></ul><h4 id="_3-注解的分类" tabindex="-1"><a class="header-anchor" href="#_3-注解的分类" aria-hidden="true">#</a> 3. 注解的分类</h4><p>JDK中内置了很多注解，我们也可以手动实现Annotation接口来创建自定义注解</p><ul><li>作用在代码的注解 <ul><li>@Override：限制下面的方法为重写父类中的方法</li><li>@Deprecated：标记所修饰的类、方法等已过时，有更好的选择</li><li>@SuppressWarnings：抑制编译器警告，比如拼写检查</li><li>@SafeVarargs - Java 7 开始支持，忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告。</li><li>@FunctionalInterface - Java 8 开始支持，标识一个匿名函数或函数式接口。</li></ul></li><li>元注解 <ul><li>@Retention - 标识这个注解怎么保存，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问</li><li>@Documented - 标记这些注解是否包含在用户文档中。</li><li>@Target - 标记这个注解应该是哪种 Java 成员。</li><li>@Inherited - 标记这个注解是继承于哪个注解类(默认 注解并没有继承于任何子类)</li><li>@Repeatable - Java 8 开始支持，标识某注解可以在同一个声明上使用多次。</li></ul></li><li>自定义注解 <ul><li>实现一些自定义的逻辑，比如JUnit框架中有个@Test注解，用来对方法进行测试</li></ul></li></ul><h2 id="ii-自定义注解" tabindex="-1"><a class="header-anchor" href="#ii-自定义注解" aria-hidden="true">#</a> Ⅱ. 自定义注解</h2><h4 id="_1-语法" tabindex="-1"><a class="header-anchor" href="#_1-语法" aria-hidden="true">#</a> 1. 语法</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>@元注解 
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> 注解名称<span class="token punctuation">{</span>
  <span class="token keyword">public</span> 配置参数类型 配置参数名<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> 默认值<span class="token punctuation">;</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">//可以有多个属性</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-示例" tabindex="-1"><a class="header-anchor" href="#_2-示例" aria-hidden="true">#</a> 2. 示例</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span> <span class="token comment">//特殊配置参数</span>
    <span class="token keyword">double</span> <span class="token function">nums</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">9.99</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-语法解析" tabindex="-1"><a class="header-anchor" href="#_3-语法解析" aria-hidden="true">#</a> 3. 语法解析</h4><h5 id="_3-1-interface-声明注解" tabindex="-1"><a class="header-anchor" href="#_3-1-interface-声明注解" aria-hidden="true">#</a> 3.1 @interface：声明注解</h5><p>@interface是注解的关键字与class平级</p><p>注解使用@interface关键字声明，自定义注解自动继承了java.lang.annotation.Annotation 接口。</p><p>注意：它和我们通常的 implemented 实现接口的方法不同。Annotation 接口的实现细节都由编译器完成。通过 @interface 定义注解后，该注解不能继承其他的注解或接口。</p><h5 id="_3-2-元注解" tabindex="-1"><a class="header-anchor" href="#_3-2-元注解" aria-hidden="true">#</a> 3.2 元注解</h5><p>用来修饰注解的注解为“元注解”，详见JDK中的元注解</p><h5 id="_3-3-配置参数-本质是个常量" tabindex="-1"><a class="header-anchor" href="#_3-3-配置参数-本质是个常量" aria-hidden="true">#</a> 3.3 配置参数：本质是个常量</h5><p>注解类的成员，或称之为：注解的配置参数，以无参数方法的形式来声明，我们称之为配置参数。</p><p>default：用来声明默认值（初始值）</p><h5 id="_3-4-配置参数的类型" tabindex="-1"><a class="header-anchor" href="#_3-4-配置参数的类型" aria-hidden="true">#</a> 3.4 配置参数的类型</h5><ul><li>所有基本类型；</li><li>String；</li><li>枚举类型；</li><li>基本类型、String、Class以及枚举的数组</li></ul><h4 id="_4-特殊配置参数" tabindex="-1"><a class="header-anchor" href="#_4-特殊配置参数" aria-hidden="true">#</a> 4. 特殊配置参数</h4><ul><li>没有属性：如果没有成员，那么注解仅起到标识的作用</li><li>只有一个成员：如果注解只有一个成员，就使用value表示。且在使用注解时，value属性可以省略不写。</li><li>有多个成员：如果有多个成员（且有成员没有默认值），那么Value名称是不能呢省略的， <ul><li>在使用注解时，所有没有默认值的成员，都必须显式的赋值。</li></ul></li></ul><h4 id="_5-使用注解" tabindex="-1"><a class="header-anchor" href="#_5-使用注解" aria-hidden="true">#</a> 5. 使用注解</h4><p>语法：@注解类名(配置参数名=&quot;配置参数值&quot;)</p><p>注解中定义的成员如果含有配置参数，使用时就必须指明，除非有默认值。如果只有一个参数成员，且名称为value，可以省略“value=”</p><p>使用位置：类上面、方法上面</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span>nums<span class="token operator">=</span><span class="token number">12.0</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>nums<span class="token operator">=</span><span class="token number">11.0</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iii-注解结构" tabindex="-1"><a class="header-anchor" href="#iii-注解结构" aria-hidden="true">#</a> Ⅲ. 注解结构</h2><h4 id="_1-基本架构" tabindex="-1"><a class="header-anchor" href="#_1-基本架构" aria-hidden="true">#</a> 1. 基本架构</h4><figure><img src="`+e+`" alt="4-2-1" tabindex="0" loading="lazy"><figcaption>4-2-1</figcaption></figure><ul><li>1 个 Annotation 和 1 个 RetentionPolicy 关联。 <ul><li>可以理解为：每1个Annotation对象，都会有唯一的RetentionPolicy属性。</li></ul></li><li>1 个 Annotation 和 1~n 个 ElementType 关联。 <ul><li>可以理解为：对于每 1 个 Annotation 对象，可以有若干个 ElementType 属性</li></ul></li><li>Annotation 有许多实现类，包括：Deprecated, Documented, Inherited, Override 等等。 <ul><li>Annotation 的每一个实现类，都 &quot;和 1 个 RetentionPolicy 关联&quot; 并且 &quot; 和 1~n 个 ElementType 关联&quot;。</li></ul></li></ul><h4 id="_2-annotation组成部分" tabindex="-1"><a class="header-anchor" href="#_2-annotation组成部分" aria-hidden="true">#</a> 2. Annotation组成部分</h4><h5 id="_2-1-annotation-java" tabindex="-1"><a class="header-anchor" href="#_2-1-annotation-java" aria-hidden="true">#</a> 2.1 Annotation.java</h5><p>&quot;每 1 个 Annotation&quot; 都与 &quot;1 个 RetentionPolicy&quot; 关联，并且与 &quot;1～n 个 ElementType&quot; 关联。</p><p>可以通俗的理解为：每 1 个 Annotation 对象，都会有唯一的 RetentionPolicy 属性；至于 ElementType 属性，则有 1~n 个。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Annotation</span><span class="token punctuation">{</span> <span class="token comment">//Annotation接口</span>
    <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">&gt;</span></span> <span class="token function">annotationType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-2-elementtype-java" tabindex="-1"><a class="header-anchor" href="#_2-2-elementtype-java" aria-hidden="true">#</a> 2.2 ElementType.java</h5><p>ElementType 是 Enum 枚举类型，它用来指定 Annotation 的类型。</p><p>&quot;每 1 个 Annotation&quot; 都与 &quot;1～n 个 ElementType&quot; 关联。当 Annotation 与某个 ElementType 关联时，就意味着：Annotation有了某种用途。例如，若一个 Annotation 对象是 METHOD 类型，则该 Annotation 只能用来修饰方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">ElementType</span> <span class="token punctuation">{</span>
    <span class="token constant">TYPE</span><span class="token punctuation">,</span>               <span class="token comment">/* 类、接口（包括注释类型）或枚举声明  */</span>
    <span class="token constant">FIELD</span><span class="token punctuation">,</span>              <span class="token comment">/* 字段声明（包括枚举常量）  */</span>
    <span class="token constant">METHOD</span><span class="token punctuation">,</span>             <span class="token comment">/* 方法声明  */</span>
    <span class="token constant">PARAMETER</span><span class="token punctuation">,</span>          <span class="token comment">/* 参数声明  */</span>
    <span class="token constant">CONSTRUCTOR</span><span class="token punctuation">,</span>        <span class="token comment">/* 构造方法声明  */</span>
    <span class="token constant">LOCAL_VARIABLE</span><span class="token punctuation">,</span>     <span class="token comment">/* 局部变量声明  */</span>
    <span class="token constant">ANNOTATION_TYPE</span><span class="token punctuation">,</span>    <span class="token comment">/* 注释类型声明  */</span>
    <span class="token constant">PACKAGE</span>             <span class="token comment">/* 包声明  */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-3-retentionpolicy-java" tabindex="-1"><a class="header-anchor" href="#_2-3-retentionpolicy-java" aria-hidden="true">#</a> 2.3 RetentionPolicy.java</h5><p>RetentionPolicy 是 Enum 枚举类型，它用来指定 Annotation 的策略。通俗点说，就是不同 RetentionPolicy 类型的 Annotation 的作用域不同。&quot;每 1 个 Annotation&quot; 都与 &quot;1 个 RetentionPolicy&quot; 关联。</p><ul><li>SOURCE：Annotation 仅存在于编译器处理期间，编译器处理完之后，该 Annotation 就没用了。 <ul><li>例如：override，当它修饰一个方法的时候，就意味着该方法覆盖父类的方法；并且在编译期间会进行语法检查！编译器处理完后，&quot;@Override&quot; 就没有任何作用了。</li></ul></li><li>CLASS：编译器将 Annotation 存储于类对应的 .class 文件中，它是 Annotation 的默认行为。</li><li>RUNTIME：编译器将 Annotation 存储于 class 文件中，并且可由JVM读入。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">RetentionPolicy</span> <span class="token punctuation">{</span>
    <span class="token constant">SOURCE</span><span class="token punctuation">,</span> <span class="token comment">/* Annotation信息仅存在于编译器处理期间，编译器处理完之后就没有该Annotation信息了  */</span>
    <span class="token constant">CLASS</span><span class="token punctuation">,</span> <span class="token comment">/* 编译器将Annotation存储于类对应的.class文件中。默认行为  */</span>
    <span class="token constant">RUNTIME</span>  <span class="token comment">/* 编译器将Annotation存储于class文件中，并且可由JVM读入 */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iv-元注解" tabindex="-1"><a class="header-anchor" href="#iv-元注解" aria-hidden="true">#</a> Ⅳ. 元注解</h2><h4 id="_1-元注解说明" tabindex="-1"><a class="header-anchor" href="#_1-元注解说明" aria-hidden="true">#</a> 1. 元注解说明</h4><p>JDK 的元注解用于修饰其他 Annotation 定义，JDK5.0提供了4个标准的meta-annotation类型，分别是：</p><ul><li>Retention：指定所修饰的 Annotation 的生命周期。</li><li>Target：标记这个注解应该是哪种 Java 成员。</li><li>Documented：标记这些注解是否包含在用户文档中。</li><li>Inherited：标记这个注解是继承于哪个注解类(默认 注解并没有继承于任何子类)</li></ul><h4 id="_2-retention" tabindex="-1"><a class="header-anchor" href="#_2-retention" aria-hidden="true">#</a> 2. @Retention</h4><p>指定所修饰的 Annotation 的生命周期。标识这个注解怎么保存，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问。</p><p>RetentionPolicy 是 Annotation 的策略属性，而 @Retention 的作用，就是指定 Annotation 的策略属性。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-1-使用说明" tabindex="-1"><a class="header-anchor" href="#_2-1-使用说明" aria-hidden="true">#</a> 2.1 使用说明</h5><p>使用@Rentention 时必须为该 value 成员变量指定值（枚举类型）</p><h5 id="_2-2-annotation的生命周期-成员变量的值" tabindex="-1"><a class="header-anchor" href="#_2-2-annotation的生命周期-成员变量的值" aria-hidden="true">#</a> 2.2 Annotation的生命周期（成员变量的值）</h5><ul><li>RetentionPolicy.SOURCE：在源文件中有效（即源java文件保留），编译器直接丢弃这种策略的注释</li><li>RetentionPolicy.CLASS:在class文件中有效（即class保留） ， 当运行 Java 程序时, JVM不会保留注解。 【默认值】</li><li>RetentionPolicy.RUNTIME:在运行时有效（即运行时保留），当运行 Java 程序时, JVM会保留注释。程序可以通过反射获取注释。</li></ul><h4 id="_3-target" tabindex="-1"><a class="header-anchor" href="#_3-target" aria-hidden="true">#</a> 3. @Target</h4><p>ElementType 是 Annotation 的类型属性。而 @Target 的作用，就是来指定 Annotation 的类型属性。</p><p>用于指定被修饰的 Annotation 能用于修饰哪些程序元素，@Target 也包含一个名为 value 的成员变量，可以取多个枚举值。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token constant">TYPE</span><span class="token punctuation">,</span> <span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token constant">METHOD</span><span class="token punctuation">,</span> <span class="token constant">PARAMETER</span><span class="token punctuation">,</span> <span class="token constant">CONSTRUCTOR</span><span class="token punctuation">,</span> 
    <span class="token constant">LOCAL_VARIABLE</span><span class="token punctuation">,</span><span class="token constant">TYPE_PARAMETER</span><span class="token punctuation">,</span><span class="token constant">TYPE_USE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>     
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-1-取值" tabindex="-1"><a class="header-anchor" href="#_3-1-取值" aria-hidden="true">#</a> 3.1 取值</h5><ul><li>ElementType.TYPE：只能用来标注 类、接口、枚举</li><li>ElementType.FIELD：只能用来标注 字段声明</li><li>ElementType.METHOD：只能用来标注 方法</li><li>ElementType.PARAMETER：只能用来标注 参数</li><li>ElementType.CONSTRUCTOR：只能用来标注 构造方法</li><li>ElementType.LOCAL_VARIABLE：只能用来标注 局部变量</li></ul><h5 id="_3-2-注意" tabindex="-1"><a class="header-anchor" href="#_3-2-注意" aria-hidden="true">#</a> 3.2 注意</h5><p>若没有指定@Target元注解，那么所定义的注解可以用于任何地方。</p><h4 id="_4-documented【不常用】" tabindex="-1"><a class="header-anchor" href="#_4-documented【不常用】" aria-hidden="true">#</a> 4. @Documented【不常用】</h4><p>用于指定被该元 Annotation 修饰的 Annotation类将被javadoc 工具提取成文档。默认情况下，javadoc是不包括注解的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Documented</span>
<span class="token class-name">Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义为Documented的注解必须设置Retention值为RUNTIME</p><h4 id="_5-inherited【不常用】" tabindex="-1"><a class="header-anchor" href="#_5-inherited【不常用】" aria-hidden="true">#</a> 5. @Inherited【不常用】</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Inherited</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>被它修饰的 Annotation 将具有 继承性。如果某个类使用了被@Inherited 修饰的 Annotation, 则其子类将自动具有该注解。</p><p>比如：如果把标有@Inherited注解的自定义的注解标注在类级别上，子类则可以继承父类类级别的注解</p><h2 id="v-注解新特性" tabindex="-1"><a class="header-anchor" href="#v-注解新特性" aria-hidden="true">#</a> Ⅴ. 注解新特性</h2><p>Java 8对注解处理提供了两点改进：可重复的注解及可用于类型的注解。此外，反射也得到了加强，在Java8中能够得到方法参数的名称。这会简化标注在方法参数上的注解。</p><h4 id="_1-可重复注解" tabindex="-1"><a class="header-anchor" href="#_1-可重复注解" aria-hidden="true">#</a> 1. 可重复注解</h4><p>即，同一个注解可以重复用多次。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;hi&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-1-1-8之前的重复注解" tabindex="-1"><a class="header-anchor" href="#_1-1-1-8之前的重复注解" aria-hidden="true">#</a> 1.1 1.8之前的重复注解</h5><p>在1.8之前，不支持重复注解，同一个注解，多次使用，会报错，编译不通过。</p><p>如果想使用重复注解，就要吧注解的成员变量写成数组的形式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//注解定义</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotations</span> <span class="token punctuation">{</span>
    <span class="token class-name">MyAnnotation</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//定义成数组的形式</span>
<span class="token punctuation">}</span>

<span class="token comment">//注解使用</span>
<span class="token annotation punctuation">@MyAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;hi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;hi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-2-1-8之后的重复注解" tabindex="-1"><a class="header-anchor" href="#_1-2-1-8之后的重复注解" aria-hidden="true">#</a> 1.2 1.8之后的重复注解</h5><p>步骤，以MyAnnotation为例：</p><ul><li>创建MyAnnotations注解，如上，定义数组形式的成员变量</li><li>在MyAnnotation注解上使用元注解@Repeatable，值为MyAnnotations.class <ul><li>这样这两个注解就被关联起来了。</li></ul></li><li>注意： MyAnnotation的Target和Retention等元注解与MyAnnotations相同。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span><span class="token class-name">MyAnnotations</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">//其他元注解要相同</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-可用于类型的注解" tabindex="-1"><a class="header-anchor" href="#_2-可用于类型的注解" aria-hidden="true">#</a> 2. 可用于类型的注解</h4><p>JDK1.8之后，关于元注解@Target的参数类型ElementType枚举值多了两个：</p><ul><li>TYPE_PARAMETER</li><li>TYPE_USE</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token constant">TYPE_PARAMETER</span><span class="token punctuation">,</span><span class="token constant">TYPE_USE</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//要加到@Target中</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-1-type-parameter" tabindex="-1"><a class="header-anchor" href="#_2-1-type-parameter" aria-hidden="true">#</a> 2.1 TYPE_PARAMETER</h5><p>表示该注解能写在类型变量的声明语句中（如：泛型声明）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestTypeDefine</span><span class="token operator">&lt;</span><span class="token annotation punctuation">@TypeDefine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token class-name">U</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span><span class="token annotation punctuation">@MyAnnotation</span> <span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-2-type-use" tabindex="-1"><a class="header-anchor" href="#_2-2-type-use" aria-hidden="true">#</a> 2.2 TYPE_USE</h5><p>表示该注解能写在使用类型的任何语句中。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">AnnotationTest</span><span class="token operator">&lt;</span><span class="token annotation punctuation">@MyAnnotation</span> <span class="token class-name">String</span><span class="token operator">&gt;</span> t <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token annotation punctuation">@MyAnnotation</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token number">2L</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vi-常用注解解析" tabindex="-1"><a class="header-anchor" href="#vi-常用注解解析" aria-hidden="true">#</a> Ⅵ. 常用注解解析</h2><h4 id="_1-deprecated" tabindex="-1"><a class="header-anchor" href="#_1-deprecated" aria-hidden="true">#</a> 1. Deprecated</h4><p>@Deprecated 所标注内容，不再被建议使用。若某个方法被 @Deprecated 标注，则该方法不再被建议使用。如果有开发人员试图使用或重写被 @Deprecated 标示的方法，编译器会给相应的提示信息。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Deprecated</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-inherited-元注解之一" tabindex="-1"><a class="header-anchor" href="#_2-inherited-元注解之一" aria-hidden="true">#</a> 2. @Inherited（元注解之一）</h4><p>@Inherited 的含义是，它所标注的Annotation将具有继承性。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">ANNOTATION_TYPE</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Inherited</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-suppresswarnings" tabindex="-1"><a class="header-anchor" href="#_3-suppresswarnings" aria-hidden="true">#</a> 3. @SuppressWarnings</h4><p>SuppressWarnings 的作用是，让编译器对&quot;它所标注的内容&quot;的某些警告保持静默。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token constant">TYPE</span><span class="token punctuation">,</span> <span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token constant">METHOD</span><span class="token punctuation">,</span> <span class="token constant">PARAMETER</span><span class="token punctuation">,</span> <span class="token constant">CONSTRUCTOR</span><span class="token punctuation">,</span> <span class="token constant">LOCAL_VARIABLE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">SOURCE</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SuppressWarnings</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-1-string-value" tabindex="-1"><a class="header-anchor" href="#_3-1-string-value" aria-hidden="true">#</a> 3.1 String[] value();</h5><p>SuppressWarnings 能指定参数，String类型的数组</p><h5 id="_3-2-使用举例" tabindex="-1"><a class="header-anchor" href="#_3-2-使用举例" aria-hidden="true">#</a> 3.2 使用举例</h5><p>如下：&quot;SuppressWarnings 不再建议使用警告&quot;和&quot;未检查的转换时的警告&quot;保持沉默。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;deprecation&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-3-取值" tabindex="-1"><a class="header-anchor" href="#_3-3-取值" aria-hidden="true">#</a> 3.3 取值</h5><ul><li>deprecation：使用了不赞成使用的类或方法时的警告</li><li>unchecked：执行了未检查的转换时的警告，例如当使用集合时没有用泛型 (Generics) 来指定集合保存的类型。</li><li>fallthrough：当 Switch 程序块直接通往下一种情况而没有 Break 时的警告。</li><li>path：在类路径、源文件路径等中有不存在的路径时的警告。</li><li>serial：当在可序列化的类上缺少 serialVersionUID 定义时的警告。</li><li>finally：任何 finally 子句不能正常完成时的警告。</li><li>all：关于以上所有情况的警告。</li></ul><h2 id="vii-反射获取注解信息" tabindex="-1"><a class="header-anchor" href="#vii-反射获取注解信息" aria-hidden="true">#</a> Ⅶ. 反射获取注解信息</h2><p>在反射的 Class, Method, Field 等函数中，有许多于 Annotation 相关的接口。这也意味着，我们可以在反射中解析并使用 Annotation。</p><h4 id="_1-使用示例" tabindex="-1"><a class="header-anchor" href="#_1-使用示例" aria-hidden="true">#</a> 1. 使用示例</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Annotation</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ElementType</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RetentionPolicy</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Inherited</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/** * Annotation在反射函数中的使用示例 */</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;unknown&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/** * Person类。它会使用MyAnnotation注解。 */</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
   
    <span class="token doc-comment comment">/**
    * empty()方法同时被 &quot;@Deprecated&quot; 和 &quot;@MyAnnotation(value=<span class="token punctuation">{</span>&quot;a&quot;,&quot;b&quot;<span class="token punctuation">}</span>)&quot;所标注
    * (01) @Deprecated，意味着empty()方法，不再被建议使用     
    * (02) @MyAnnotation, 意味着empty() 方法对应的MyAnnotation的value值
        是默认值&quot;unknown
    */</span>
    <span class="token annotation punctuation">@MyAnnotation</span>
    <span class="token annotation punctuation">@Deprecated</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\nempty&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
   
    <span class="token doc-comment comment">/**     
    * sombody() 被 @MyAnnotation(value=<span class="token punctuation">{</span>&quot;girl&quot;,&quot;boy&quot;<span class="token punctuation">}</span>) 所标注，     
    * @MyAnnotation(value=<span class="token punctuation">{</span>&quot;girl&quot;,&quot;boy&quot;<span class="token punctuation">}</span>), 意味着MyAnnotation的value值
        是<span class="token punctuation">{</span>&quot;girl&quot;,&quot;boy&quot;<span class="token punctuation">}</span>     
    */</span>
    <span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;girl&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;boy&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">somebody</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\nsomebody: &quot;</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">&quot;, &quot;</span><span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

        <span class="token comment">// 新建Person</span>
        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取Person的Class实例</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> c <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取 somebody() 方法的Method实例</span>
        <span class="token class-name">Method</span> mSomebody <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;somebody&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> 
        <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 执行该方法</span>
        mSomebody<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;lily&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">iteratorAnnotations</span><span class="token punctuation">(</span>mSomebody<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 获取 somebody() 方法的Method实例</span>
        <span class="token class-name">Method</span> mEmpty <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;empty&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 执行该方法</span>
        mEmpty<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        
        <span class="token function">iteratorAnnotations</span><span class="token punctuation">(</span>mEmpty<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
   
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">iteratorAnnotations</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 判断 somebody() 方法是否包含MyAnnotation注解</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">MyAnnotation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// 获取该方法的MyAnnotation注解实例</span>
            <span class="token class-name">MyAnnotation</span> myAnnotation <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">MyAnnotation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 获取 myAnnotation的值，并打印出来</span>
            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> myAnnotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token operator">:</span>values<span class="token punctuation">)</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>str<span class="token operator">+</span><span class="token string">&quot;, &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
       
        <span class="token comment">// 获取方法上的所有注解，并打印出来</span>
        <span class="token class-name">Annotation</span><span class="token punctuation">[</span><span class="token punctuation">]</span> annotations <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Annotation</span> annotation <span class="token operator">:</span> annotations<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>annotation<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,126),i=[o];function c(l,u){return a(),s("div",null,i)}const r=n(p,[["render",c],["__file","4-2.注解.html.vue"]]);export{r as default};
