import{_ as n,o as a,c as s,e}from"./app-4816a6c6.js";const t={},p=e(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>bean是Spring框架的基础部分，这里做一个总结，方便理解Spring Boot的自动装配。</p></div><div class="hint-container info"><p class="hint-container-title">Bean是干嘛的 ？</p><p>Bean就是被加载到内存中的类。</p><p>我们启动一个Web程序，该程序需要持续提供服务。</p><ul><li>性能：启动时，Tomcat将基本所有用到的类（其实是被设置为Bean的类的对象）都加载到了内存中，且是单例的，提供服务时，用到哪个类（对象）就去内存中拿，不用现场new。</li><li>开发便利：将一个类设置为Bean，他就被加入内存了，也就是该类的对象已经创建了，用到这个类直接注入即可，不用麻烦的先引入再new。</li></ul><p>上面的解释并非是真实的加载场景，只是帮助理解Bean的作用。</p><p>Bean对于性能和开发便利帮助都非常大，是Spring框架的核心和基础。</p></div><h4 id="bean的注册和加载" tabindex="-1"><a class="header-anchor" href="#bean的注册和加载" aria-hidden="true">#</a> Bean的注册和加载</h4><ul><li>注册：也就是把一个类设置为Bean，以告诉Spring，该类是可以被加载进容器的。</li><li>加载：就是Spring将Bean加载到容器的过程</li></ul><h2 id="xml-bean配置文件" tabindex="-1"><a class="header-anchor" href="#xml-bean配置文件" aria-hidden="true">#</a> xml Bean配置文件</h2><p>在专门配置bean的配置文件中，手动指定哪些类要成为bean，在<code>&lt;bean/&gt;</code>给出bean的类名，Spring内部会根据反射机制加载class。</p><p>bean配置文件示例：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!--xml方式声明自己开发的bean--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cat<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Cat<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Dog<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

    <span class="token comment">&lt;!--xml方式声明第三方开发的bean--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataSource<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注解-xml扫描" tabindex="-1"><a class="header-anchor" href="#注解-xml扫描" aria-hidden="true">#</a> 注解+xml扫描</h2><p>方式1 需要将spring管控的bean全部写在xml文件中，非常麻烦。在类上面使用注解，哪一个类要受到spring管控，就在那个类上加，还可以顺带起一个bean的名字（id）。</p><h4 id="共有4个注解可用" tabindex="-1"><a class="header-anchor" href="#共有4个注解可用" aria-hidden="true">#</a> 共有4个注解可用</h4><ul><li>@Component：通用的</li><li>@Service：给Service用的</li><li>@Controller：给Controller用的</li><li>@Repository：给Repository</li></ul><p>上面四个注解作用是一样的，不同的名字只是用来标注该类逻辑上的作用。</p><h4 id="注解使用示例" tabindex="-1"><a class="header-anchor" href="#注解使用示例" aria-hidden="true">#</a> 注解使用示例</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//该类被加入了Bean，且起了一个名字叫tom，默认名字其实是类名</span>
<span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="加载第三方bean" tabindex="-1"><a class="header-anchor" href="#加载第三方bean" aria-hidden="true">#</a> 加载第三方Bean</h4><p>无法在第三方提供的技术源代码中去添加上述4个注解，当需要加载第三方开发的bean的时候，可以创建专门的配置类加载第三方Bean。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span><span class="token comment">//先将该配置文件加入Bean管理</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DbConfig</span> <span class="token punctuation">{</span> 
    
    <span class="token annotation punctuation">@Bean</span> <span class="token comment">//使用@Bean注解式该方法的返回值加入Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">DruidDataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">DruidDataSource</span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ds<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="扫描bean" tabindex="-1"><a class="header-anchor" href="#扫描bean" aria-hidden="true">#</a> 扫描bean</h4><p>上面提供的仅仅是bean的声明，spring并不会主动感知他们，想让Spring发现这些注解并加入Bean管理，就需要在xml配置文件中配置Spring扫描包含<code>Bean注解</code>的包。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 这个配置文件，还是Bean的xml配置文件 --&gt;</span>
<span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/context<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
    <span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--指定扫描加载bean的位置--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.sgugo.bean,com.sgugo.config<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注解-spring配置类" tabindex="-1"><a class="header-anchor" href="#注解-spring配置类" aria-hidden="true">#</a> 注解+Spring配置类</h2><h4 id="用java配置类取代xml配置类" tabindex="-1"><a class="header-anchor" href="#用java配置类取代xml配置类" aria-hidden="true">#</a> 用Java配置类取代XML配置类</h4><p>N3里的 写XML配置扫描包太low了。XML的功能很简单，Spring还提供了使用Java格式的Spring配置来取代XML格式的Bean配置。</p><p>同时，也可以直接在Spring配置文件中定义方法配置第三方类。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span> <span class="token comment">//定义为Spring配置类</span>
<span class="token comment">// @ComponentScan用来指定指定要扫描的包</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token punctuation">{</span>com<span class="token punctuation">.</span>sgugo<span class="token punctuation">.</span>bean<span class="token punctuation">,</span>com<span class="token punctuation">.</span>sgugo<span class="token punctuation">.</span>config<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig3</span> <span class="token punctuation">{</span> <span class="token comment">// 类名随便起，重要的是上面的注解</span>

    <span class="token comment">// 如果不需要加载第三方Bean，这里直接定义成空类就OK</span>
    <span class="token comment">// 这里可以定义N个方法用来加载第三方Bean</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">DogFactoryBean</span> <span class="token function">dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DogFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="factorybean" tabindex="-1"><a class="header-anchor" href="#factorybean" aria-hidden="true">#</a> FactoryBean</h4><p>spring提供了一个接口FactoryBean接口，可以看作是创建Bean的 <em>工厂模式</em>。实现了FactoryBean接口的类造出来的对象不是当前类的对象，而是FactoryBean接口泛型指定类型的对象。</p><p>意义和工厂模式类似，在返回Bean前做一些初始化操作，比如返回一个连接Redis的类，不能直接调用空参构造将对象返回，而是要先检测Redis服务是否正常，然后读取配置信息，进行Redis连接，然后再返回。</p><p>如下列，造出来的bean并不是RedisFactoryBean，而是Redis，且可在返回Bean前进行初始化。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisFactoryBean</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Redis</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Redis</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">//创建实例前对Redis服务进行连接测试</span>
        <span class="token comment">//...</span>

        <span class="token class-name">Redis</span> redis <span class="token operator">=</span> <span class="token function">newRedis</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//返回Bean前进行加强操作，比如写个日志</span>

        <span class="token keyword">return</span> d<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Redis</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token comment">//上面的工厂Bean类通常使用@Bean的方式进行加载</span>
<span class="token annotation punctuation">@Configuration</span> 
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token punctuation">{</span>com<span class="token punctuation">.</span>sgugo<span class="token punctuation">.</span>bean<span class="token punctuation">,</span>com<span class="token punctuation">.</span>sgugo<span class="token punctuation">.</span>config<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig3</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">DogFactoryBean</span> <span class="token function">dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DogFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="proxybeanmethods" tabindex="-1"><a class="header-anchor" href="#proxybeanmethods" aria-hidden="true">#</a> proxyBeanMethods</h4><p>用来控制Bean单例的，默认就开启了。</p><h2 id="使用-import" tabindex="-1"><a class="header-anchor" href="#使用-import" aria-hidden="true">#</a> 使用@Import</h2><p>通过扫描的方式将设置了注解的类加入Bean是个粒度比较大的导入方式，有可能会扫描到一些用不到的包，甚至可能触发包冲突（好的命名规范非常难得）。</p><p>而@Import的加载方式是一种精准的Bean加载方式。只需要在Spring配置类注解的参数中写上加载的类对应的.class即可。</p><h4 id="用途" tabindex="-1"><a class="header-anchor" href="#用途" aria-hidden="true">#</a> 用途</h4><p>这种方式非常麻烦，唯一的优点是可以指定加载，@Import注解在特殊场景很有用，比如要加载Bean的类没有使用@Component修饰。</p><p>对于无侵入编程（源码里不出现框架的痕迹），类上面就没有设置Bean的注解。</p><h4 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例" aria-hidden="true">#</a> 使用示例</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Dog</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">DbConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig4</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token comment">//除了加载bean，还可以使用@Import注解加载配置类</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">DogFactoryBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig4</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="编程式注册bean" tabindex="-1"><a class="header-anchor" href="#编程式注册bean" aria-hidden="true">#</a> 编程式注册bean</h2><h4 id="_1-编程形式注册bean" tabindex="-1"><a class="header-anchor" href="#_1-编程形式注册bean" aria-hidden="true">#</a> 1. 编程形式注册bean</h4><p>前面介绍的加载bean的方式都是在容器启动阶段完成bean的加载，下面这种方式可以在容器初始化完成后手动加载bean。通过这种方式可以实现编程式控制bean的加载。</p><p>这种方式注册Bean开发时不用用到，但框架中用的到。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App5</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 初始化上下文对象，该对象提供了注册bean的方法</span>
        <span class="token class-name">AnnotationConfigApplicationContext</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span>
        <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">SpringConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//上下文容器对象已经初始化完毕后，手工加载bean</span>
        <span class="token comment">//被加载的类，没有使用配置类和配置文件。</span>
        ctx<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Mouse</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//手动注册一个bean,并取名为tom</span>
        ctx<span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">,</span><span class="token class-name">Cat</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="bean的覆盖" tabindex="-1"><a class="header-anchor" href="#bean的覆盖" aria-hidden="true">#</a> Bean的覆盖</h5><p>使用上下文对象多次创建多一个类的Bean，会产生覆盖。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App5</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">AnnotationConfigApplicationContext</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">SpringConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//上下文容器对象已经初始化完毕后，手工加载bean</span>
        ctx<span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Cat</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ctx<span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Cat</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ctx<span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Cat</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//{tom,2}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-importselector" tabindex="-1"><a class="header-anchor" href="#_2-importselector" aria-hidden="true">#</a> 2. ImportSelector</h4><p>上面加载Bean的方式，可以对bean的加载进行编程化的控制，不过是在容器初始化后实现的。</p><p>若使用实现ImportSelector接口的类，可以实现在容器初始化过程中进行bean的加载控制。这种方式注册Bean开发时基本不用，但框架源码中经常被用到。</p><h5 id="_2-1-实现importselector接口" tabindex="-1"><a class="header-anchor" href="#_2-1-实现importselector接口" aria-hidden="true">#</a> 2.1 实现ImportSelector接口</h5><p>随便创建一个类来实现ImportSelector接口，重写selectImports方法，该方法返回一个String[]，他的值是全类名，写入哪个类就能创建哪个类的Bean。</p><p>selectImports方法有个AnnotationMetadata类型的参数，该参数有一系列方法可以获取和判断类的各种元数据。可以通过这些元数据来决定bean的加载。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyImportSelector</span> <span class="token keyword">implements</span> <span class="token class-name">ImportSelector</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectImports</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> metadata<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;com.sgugo.Dog&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;com.sgugo.Cat&quot;</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-2-元数据的由来" tabindex="-1"><a class="header-anchor" href="#_2-2-元数据的由来" aria-hidden="true">#</a> 2.2 元数据的由来</h5><p>AnnotationMetadata获取的是哪个类的元数据了呢？</p><p>当创建了ImportSelector接口的实现类后，需要使用Spring配置类的<code>@Import</code>注解加载该实现类，而AnnotationMetadata就是获取的该配置类的元数据。</p><p>现在可以通过控制该配置类的元数据，简介控制ImportSelector的实现类了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sgugo<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">MyImportSelector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig1</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-3-判定元数据-控制bean的生成" tabindex="-1"><a class="header-anchor" href="#_2-3-判定元数据-控制bean的生成" aria-hidden="true">#</a> 2.3 判定元数据，控制Bean的生成</h5><p>获取引入<code>ImportSelector实现类</code>的配置类的元数据，来通过编程的形式决定如何加载bean,只要能编程就能判定，能判定意味着可以控制程序的运行走向，进而控制一切。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyImportSelector</span> <span class="token keyword">implements</span> <span class="token class-name">ImportSelector</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectImports</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> metadata<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//由于获取的是配置类的元数据，所以getClassName()方法获取的类名是：</span>
        <span class="token comment">//com.sgugo.config.SpringConfig1</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>metadata<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token comment">//判断元数据：hanAnnotation判断配置类是否有某个注解</span>
        <span class="token keyword">boolean</span> status <span class="token operator">=</span> metadata<span class="token punctuation">.</span><span class="token function">hasAnnotation</span><span class="token punctuation">(</span><span class="token string">&quot;org.springframework.context.annotation.Configuration&quot;</span><span class="token punctuation">)</span>

        <span class="token comment">//如上所述，metadata和获取和判断配置类的各项元数据</span>

        <span class="token comment">//进行个简单的控制示例：通过判断注解来加载不同的bean</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">{</span>
           <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;com.sgugo.Dog&quot;</span><span class="token punctuation">}</span> 
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;com.sgugo.Cat&quot;</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-importbeandefinitionregistrar" tabindex="-1"><a class="header-anchor" href="#_3-importbeandefinitionregistrar" aria-hidden="true">#</a> 3. ImportBeanDefinitionRegistrar</h4><p>ImportBeanDefinitionRegistrar接口是 ImportSelector接口的加强版。</p><p>bean的加载不是一个简简单单的对象，spring中定义了一个叫做BeanDefinition的东西，它才是控制bean初始化加载的核心。BeanDefinition接口中给出了若干种方法，可以控制bean的相关属性（比如是否是单例）。</p><p>我们可以通过定义一个类，然后实现ImportBeanDefinitionRegistrar接口的方式定义bean，并且还可以让你对bean的初始化进行更加细粒度的控制</p><h5 id="_3-1-实现importbeandefinitionregistrar接口" tabindex="-1"><a class="header-anchor" href="#_3-1-实现importbeandefinitionregistrar接口" aria-hidden="true">#</a> 3.1 实现ImportBeanDefinitionRegistrar接口</h5><p>该接口的registerBeanDefinitions比ImportSelector接口的selectImports方法多了一个参数<code>BeanDefinitionRegistry</code>，用来注册一个BeanDefinition接口的实现类，该参数就是用来控制bean的属性的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRegistrar</span> <span class="token keyword">implements</span> <span class="token class-name">ImportBeanDefinitionRegistrar</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> metadata<span class="token punctuation">,</span>
     <span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//1. AnnotationMetadata用来进行元数据的判断</span>

        <span class="token comment">//2. BeanDefinitionRegistry用来进行bean属性的控制</span>

        <span class="token comment">//2.1 创建BeanDefinition对象的方式有很多，下面只是其中的一种</span>
        <span class="token class-name">BeanDefinition</span> beanDefinition <span class="token operator">=</span> 	
            <span class="token class-name">BeanDefinitionBuilder</span><span class="token punctuation">.</span><span class="token function">rootBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">BookServiceImpl2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//2.2 有了BeanDefinition对象，就可以配置bean的各种属性了，比如单例</span>
        beanDefinition<span class="token punctuation">.</span><span class="token function">setScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2.2 注册BeanDefinition对象，此时bean也被注册了</span>
        registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">&quot;bookService&quot;</span><span class="token punctuation">,</span>beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-2-加载bean" tabindex="-1"><a class="header-anchor" href="#_3-2-加载bean" aria-hidden="true">#</a> 3.2 加载bean</h5><p>现在可以创建Spring配置对象，@import MyRegistrar，为 ImportBeanDefinitionRegistrar的实现类提供元数据，并加载该bean。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sgugo<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">MyRegistrar</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig2</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-beandefinitionregistrypostprocessor" tabindex="-1"><a class="header-anchor" href="#_4-beandefinitionregistrypostprocessor" aria-hidden="true">#</a> 4. BeanDefinitionRegistryPostProcessor</h4><p>上述所有创建Bean的方式，都是在容器初始化过程中进行bean的加载或者声明的，可能会产生冲突bug，一个bean被多种方式定义，参数了冲突。</p><p>Bean的加载是有顺序的，虽然最终还是会加载一个Bean，但可能不是自己预想的bean，尤其是多人协作开发时。</p><p>BeanDefinitionRegistryPostProcessor接口（后置注册处理器）就是用来做最终的裁决的，他会在所有Bean注册完毕后运行。</p><h5 id="_4-1-实现beandefinitionregistrypostprocessor接口" tabindex="-1"><a class="header-anchor" href="#_4-1-实现beandefinitionregistrypostprocessor接口" aria-hidden="true">#</a> 4.1 实现BeanDefinitionRegistryPostProcessor接口</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanDefinitionRegistryPostProcessor</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanDefinitionRegistry</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token class-name">BeanDefinition</span> beanDefinition <span class="token operator">=</span> 
            <span class="token class-name">BeanDefinitionBuilder</span><span class="token punctuation">.</span><span class="token function">rootBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">BookServiceImpl4</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">&quot;bookService&quot;</span><span class="token punctuation">,</span>beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-2-用途" tabindex="-1"><a class="header-anchor" href="#_4-2-用途" aria-hidden="true">#</a> 4.2 用途</h5><p>该接口是个保障型的接口，可以用来替换默认配置。比如第三方框架提供了默认配置的Bean。而这个Bean并不符合期望，然后就在配置文件中做一些配置，框架读取配置后，用配置信息重新注册了一个Bean，覆盖默认的Bean。</p>`,82),o=[p];function c(i,l){return a(),s("div",null,o)}const r=n(t,[["render",c],["__file","6-1.bean的加载.html.vue"]]);export{r as default};
