import{_ as o,r as a,o as l,c,a as i,b as n,d as e,w as p,e as r}from"./app-e2ee9004.js";const u={},d=r(`<h4 id="说明" tabindex="-1"><a class="header-anchor" href="#说明" aria-hidden="true">#</a> 说明</h4><ul><li>Collection 接口是 List、Set 和 Queue 接口的父接口，该接口里定义的方法既可用于操作 Set 集合，也可用于操作 List 和 Queue 集合。</li><li>JDK不提供此接口的任何直接实现，而是提供更具体的子接口(如：Set和List)实现。</li><li>从 JDK 5.0 增加了 泛型以后，Java 集合可以记住容器中对象的数据类型（而非都当成obj）。</li><li>下面的方法测试，都是以实现类做测试的（抽象方法，无法执行）。</li></ul><h4 id="实例化" tabindex="-1"><a class="header-anchor" href="#实例化" aria-hidden="true">#</a> 实例化</h4><p>实际开发中，根据需求选择合适的子类，这些子类的方法都是一样的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Collection</span> coll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//用实现类进行实例化</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>coll<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[],一个空的集合</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="collection接口的方法" tabindex="-1"><a class="header-anchor" href="#collection接口的方法" aria-hidden="true">#</a> Collection接口的方法</h4>`,6);function h(k,m){const s=a("ExternalLinkIcon"),t=a("RouterLink");return l(),c("div",null,[d,i("p",null,[n("详见："),e(t,{to:"/java/func/2.JDK.util%E5%8C%85/2-3.Collection.html",target:"_blank"},{default:p(()=>[n("内置函数>Collection+"),e(s)]),_:1})])])}const v=o(u,[["render",h],["__file","6-2.Collection.html.vue"]]);export{v as default};
