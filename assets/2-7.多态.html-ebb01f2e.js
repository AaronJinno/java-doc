import{_ as n,o as a,c as s,b as e}from"./app-8e704c97.js";const p="/java-doc/img/java/javase/2-7-1.jpg",t={},c=e(`<h2 id="i-多态" tabindex="-1"><a class="header-anchor" href="#i-多态" aria-hidden="true">#</a> Ⅰ. 多态</h2><h4 id="_1-对象的多态性" tabindex="-1"><a class="header-anchor" href="#_1-对象的多态性" aria-hidden="true">#</a> 1. 对象的多态性</h4><p>父类的引用指向子类的对象（或子类的对象赋给父类的引用）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>父类 标识符 <span class="token operator">=</span> <span class="token keyword">new</span> 子类<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Father</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Java引用变量有两个类型： 编译时类型和运行时类型。编译时类型由声明该变量时使用的类型决定，运行时类型由实际赋给该变量的对象决定。</p><p>简称：编译看左边；运行看右边。</p><ul><li>看左边：看的是父类的引用（父类中不具备子类特有的方法）</li><li>看右边 ： 看的是子类的对象（实际运行的是子类重写父类的方法）</li></ul><p>而这种：编译时类型和运行时类型不一致 ， 就是对象的多态性</p><h4 id="_2-多态的使用" tabindex="-1"><a class="header-anchor" href="#_2-多态的使用" aria-hidden="true">#</a> 2. 多态的使用</h4><h5 id="_2-1-规定" tabindex="-1"><a class="header-anchor" href="#_2-1-规定" aria-hidden="true">#</a> 2.1 规定</h5><p>有了对象的多态性以后，我们在编译期，只能调用父类中声明的方法，但在运行期，我们实际执行的是子类重写父类的方法。</p><p>因此使用多态，是以父类的类型，使用子类中重写的父类方法。 即对象的类型是父类；使用的方法是子类的，该方法必须是重写了父类方法。</p><h5 id="_2-2-规定解析" tabindex="-1"><a class="header-anchor" href="#_2-2-规定解析" aria-hidden="true">#</a> 2.2 规定解析</h5><p>由规定可知，对象在编译期间，判断的是左边（父类）的数据类型（用于传参），运行时执行的是右边（子类）的方法。</p><p>这样我们就可以向一个函数传递参数时，表面传递的是父类的数据类型，而实际使用的是子类。</p><h5 id="_2-3-使用限制" tabindex="-1"><a class="header-anchor" href="#_2-3-使用限制" aria-hidden="true">#</a> 2.3 使用限制</h5><ul><li>一个引用类型变量如果声明为父类的类型，但实际引用的是子类对象，那么该变量就不能再访问子类中添加的属性和方法。</li><li>对象的多态性，只适用于方法，不适用于属性，属性只用左边的（父类）</li></ul><h4 id="_3-多态的意义" tabindex="-1"><a class="header-anchor" href="#_3-多态的意义" aria-hidden="true">#</a> 3. 多态的意义</h4><p>Java是强类型语言，当一个方法需要传递的参数类型是一个类时，那么参数就必须传递该类生成的对象。那么如果该方法适用很多类，就需要创建很多个除了数据类型（类）外其他完全一样的方法了，这样造成了很大的冗余。</p><p>在实际开发中，经常会遇到这样的情景，N个子类适用于同一个方法，需要为每个子类创建一个方法，太冗余了。因此我们就需要多态了。</p><h4 id="_4-多态示例" tabindex="-1"><a class="header-anchor" href="#_4-多态示例" aria-hidden="true">#</a> 4. 多态示例</h4><p>需求：数据库连接</p><p>我们需要在User类中调用getUser方法获取数据，获取数据需要数据库链接，这时需要将数据库对象传入getUsers方法然后用数据库对象连接数据库进行操作。</p><p>数据库对象不止一种（MySQL、Oracle等），我们不能为每一种数据库都定义一套方法，因此我们这里就要用到多态性。</p><p>定义：所有数据库连接对象的父类都是 java.sql.Connection;（也可以是接口）。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//传入我们想用的数据库对象，这里是MySQL</span>
        user<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MysqlConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> conn<span class="token punctuation">)</span><span class="token punctuation">{</span>
        conn<span class="token punctuation">.</span><span class="token function">getConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//连接数据库</span>
        conn<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//其他操作</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-虚拟方法的调用" tabindex="-1"><a class="header-anchor" href="#_5-虚拟方法的调用" aria-hidden="true">#</a> 5. 虚拟方法的调用</h4><h5 id="_5-1-正常的方法调用" tabindex="-1"><a class="header-anchor" href="#_5-1-正常的方法调用" aria-hidden="true">#</a> 5.1 正常的方法调用</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Person</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
e<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Student</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
e<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-2-虚拟方法调用-多态情况下" tabindex="-1"><a class="header-anchor" href="#_5-2-虚拟方法调用-多态情况下" aria-hidden="true">#</a> 5.2 虚拟方法调用（多态情况下）</h5><p>子类中定义了与父类同名同参数的方法，在多态情况下，将此时父类的方法称为虚拟方法，父类根据赋给它的不同子类对象，动态调用属于子类的该方法。这样的方法调用在编译期是无法确定的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Person</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
e<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用Student 类的getInfo()</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-3-编译时类型与运行时类型" tabindex="-1"><a class="header-anchor" href="#_5-3-编译时类型与运行时类型" aria-hidden="true">#</a> 5.3 编译时类型与运行时类型</h5><p>编译时e为Person 类型，而方法的调用是在运行时确定的，所以调用的是Student类的 的getInfo() 方法。</p><h5 id="_5-4-虚拟方法调用举例" tabindex="-1"><a class="header-anchor" href="#_5-4-虚拟方法调用举例" aria-hidden="true">#</a> 5.4 虚拟方法调用举例</h5><p>定义：Person类中定义了welcome()方法，各个子类重写了welcome()。</p><p>执行：多态的情况下，调用对象的welcome()方法，实际执行的是子类重写的方法。</p><figure><img src="`+p+`" alt="2-7-1" tabindex="0" loading="lazy"><figcaption>2-7-1</figcaption></figure><h4 id="_6-早绑定与晚绑定" tabindex="-1"><a class="header-anchor" href="#_6-早绑定与晚绑定" aria-hidden="true">#</a> 6. 早绑定与晚绑定</h4><p>通过分析重载和重写在编译和运行是状态来判断早绑定与晚绑定</p><ul><li>早绑定（静态绑定）：重载，是指允许存在多个同名方法，而这些方法的参数不同，编译器根据方法不同的参数表，对同名方法的名称做修饰。对于编译器而言，这些同名方法就成了不同的方法，它们的调用地址在编译期就绑定了。Java的重载是可以包括父类和子类的，即子类可以重载父类的同名不同参数的方法。所以：对于重载而言，在方法调用之前，编译器就已经确定了所要调用的方法，这称为“早绑定”或“静态绑定”；</li><li>晚绑定（动态绑定）：而对于多态，只有等到方法调用的那一刻，解释运行器才会确定所要调用的具体方法，这称为“晚绑定”或“动态绑定”。如果它不是晚绑定，它就不是多态。</li></ul><h4 id="_7-赋值形式的多态" tabindex="-1"><a class="header-anchor" href="#_7-赋值形式的多态" aria-hidden="true">#</a> 7. 赋值形式的多态</h4><p>将子类对象赋值给父类数据类型的标识符，也属于父类的引用指向子类的对象。</p><p>同时父类和子类的标识符执指向同一地址</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Son</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//相当于：Father f = new Son(); f = s;</span>
<span class="token class-name">Father</span> f <span class="token operator">=</span> s<span class="token punctuation">;</span> 
f<span class="token punctuation">.</span>age<span class="token punctuation">;</span><span class="token comment">//调用的是父类中的属性。</span>
f<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用的是子类中的say方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Son</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Father</span> f <span class="token operator">=</span> s<span class="token punctuation">;</span> <span class="token comment">//Father f = new Son() &amp;&amp; f = s</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f <span class="token operator">==</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//50,访问的是父类的属性</span>
        f<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20;调用的是子类的方法，多态的特性</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8-多态开发中的应用" tabindex="-1"><a class="header-anchor" href="#_8-多态开发中的应用" aria-hidden="true">#</a> 8. 多态开发中的应用</h4><p>多态提高了代码的通用性，常用作接口重用。</p><p>没有多态，接口就没有意义了（只能规范，不能实例化没用）。 同时也提高了代码的健硕性，直接使用父类中定义的方法，子类实现可以随意更换。</p><h2 id="ii-转型" tabindex="-1"><a class="header-anchor" href="#ii-转型" aria-hidden="true">#</a> Ⅱ. 转型</h2><p>有了对象的多态性以后，内存中实际上是加载了子类特有的属性和方法的，但是由于变量声明为父类类型，导致编译时，只能调用父类中声明的属性和方法。子类特有的属性和方法不能调用。如何才能调用子类特有的属性和方法？</p><p>答案是向下转型：使用强制类型转换符。</p><h4 id="_1-向下转型说明" tabindex="-1"><a class="header-anchor" href="#_1-向下转型说明" aria-hidden="true">#</a> 1. 向下转型说明</h4><ul><li>向上转型：子类转父类，自动转，称为多态</li><li>向下转型：父类转子类，强制转，称为向下转型</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Father</span> f1 <span class="token operator">=</span> <span class="token class-name">New</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Son</span> s1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Son</span><span class="token punctuation">)</span>f1<span class="token punctuation">;</span><span class="token comment">//f1是父类型对象，向下转型成子类型</span>
s1<span class="token punctuation">.</span><span class="token function">sonDO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可以调用son类中独有的方法了</span>
<span class="token class-name"><span class="token namespace">s1<span class="token punctuation">.</span></span>Teacher</span> <span class="token operator">=</span> <span class="token string">&quot;jinno&quot;</span><span class="token punctuation">;</span><span class="token comment">//可以调用son类中的属性了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-转型的条件" tabindex="-1"><a class="header-anchor" href="#_2-转型的条件" aria-hidden="true">#</a> 2. 转型的条件</h4><h5 id="_2-1-向上转型-子转父" tabindex="-1"><a class="header-anchor" href="#_2-1-向上转型-子转父" aria-hidden="true">#</a> 2.1 向上转型：子转父</h5><p>随便转，没有限制，可以自动进行</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Son</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Son的age</span>
<span class="token class-name">Father</span> f2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Father</span><span class="token punctuation">)</span>s1<span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//father的age</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-2-向下转型-父类转子类" tabindex="-1"><a class="header-anchor" href="#_2-2-向下转型-父类转子类" aria-hidden="true">#</a> 2.2 向下转型：父类转子类</h5><p>父类的引用必须指向子类的对象（这样编译时才能加载子类），不然无法转</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Father</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Son</span> s1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Son</span><span class="token punctuation">)</span>f1<span class="token punctuation">;</span><span class="token comment">//这样才能转</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-向下转型的异常" tabindex="-1"><a class="header-anchor" href="#_3-向下转型的异常" aria-hidden="true">#</a> 3. 向下转型的异常</h4><p>使用强转时，可能出现ClassCastException的异常，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Father</span> f1 <span class="token operator">=</span> <span class="token class-name">New</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Son</span> s1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Son</span><span class="token punctuation">)</span>f1<span class="token punctuation">;</span> <span class="token comment">//可以强转</span>

<span class="token class-name">Daughter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Daughter</span><span class="token punctuation">)</span>f1<span class="token punctuation">;</span><span class="token comment">//强转失败，F1是由Son生产的而不是Daughter，不能强转</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了避免出错，我们在向下转型之前，先进行instanceof的判断，一旦返回true，就进行向下转型。如果返回false，不进行向下转型。</p><h4 id="_4-instancof的" tabindex="-1"><a class="header-anchor" href="#_4-instancof的" aria-hidden="true">#</a> 4. instancof的</h4><p><code>对象 instanceof 类名</code>: 这个是用来测试一个对象的类名的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span><span class="token punctuation">(</span>f1 <span class="token keyword">instanceof</span> <span class="token class-name">Son</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Son</span> s1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Son</span><span class="token punctuation">)</span>f1<span class="token punctuation">;</span>
    s1<span class="token punctuation">.</span><span class="token function">sonDo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>f1 <span class="token keyword">instanceof</span> <span class="token class-name">Daughter</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Daughter</span> d1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Daughter</span><span class="token punctuation">)</span>f1<span class="token punctuation">;</span>
    d1<span class="token punctuation">.</span><span class="token function">daughterDo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>补充：如果 a instanceof A返回true,则 a instanceof B也返回true 其中类B是类A的父类。</p><h4 id="_5-转型的注意事项" tabindex="-1"><a class="header-anchor" href="#_5-转型的注意事项" aria-hidden="true">#</a> 5. 转型的注意事项</h4><h5 id="_5-1-向下转型必须是父类引用子类的对象" tabindex="-1"><a class="header-anchor" href="#_5-1-向下转型必须是父类引用子类的对象" aria-hidden="true">#</a> 5.1 向下转型必须是父类引用子类的对象</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Person</span> p4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Man</span> m4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Man</span><span class="token punctuation">)</span>p4<span class="token punctuation">;</span> <span class="token comment">//不能转，p4里面没有加载子类的元素</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-2-隔代转型" tabindex="-1"><a class="header-anchor" href="#_5-2-隔代转型" aria-hidden="true">#</a> 5.2 隔代转型</h5><p>Object-&gt;Person-&gt;Woman；</p><p>Object引用的Woman子类，Object可以强转成Woman，更何况强转成Person。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Woman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span>obj<span class="token punctuation">;</span> <span class="token comment">//可以转</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-3-转型必须有父子关系" tabindex="-1"><a class="header-anchor" href="#_5-3-转型必须有父子关系" aria-hidden="true">#</a> 5.3 转型必须有父子关系</h5><p>无继承关系的引用类型间的转换是非法的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
<span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>o<span class="token punctuation">;</span> <span class="token comment">//编译时是不报错的，但是运行还是会出错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,81),o=[c];function l(i,u){return a(),s("div",null,o)}const r=n(t,[["render",l],["__file","2-7.多态.html.vue"]]);export{r as default};
