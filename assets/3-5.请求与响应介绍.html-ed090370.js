import{_ as e,o as a,c as t,e as s}from"./app-9f16a8fe.js";const i="/java-doc/img/java/javaweb/3-5-1.jpg",r="/java-doc/img/java/javaweb/3-5-2.jpg",l="/java-doc/img/java/javaweb/3-5-3.jpg",n={},d=s('<h2 id="i-请求与响应概述" tabindex="-1"><a class="header-anchor" href="#i-请求与响应概述" aria-hidden="true">#</a> Ⅰ. 请求与响应概述</h2><h4 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h4><p>Request是请求对象，Response是响应对象。</p><p>这两个对象都是Servlet接口中，service方法的参数。request和response对象是由服务器创建的，我们来使用它们。request对象是来获取请求消息，response对象是来设置响应消息</p><h4 id="_1-完整的请求处理过程" tabindex="-1"><a class="header-anchor" href="#_1-完整的请求处理过程" aria-hidden="true">#</a> 1. 完整的请求处理过程</h4><figure><img src="'+i+'" alt="3-5-1" tabindex="0" loading="lazy"><figcaption>3-5-1</figcaption></figure><p>如下：这只是基本的处理过程，省略很多非核心步骤，如：过滤</p><ul><li>前端：客户端发起请求</li><li>Tomcat接收到请求： <ul><li>①tomcat服务器会根据请求url中的资源路径，创建对应的Servlet实现类的对象。</li><li>②tomcat服务器,会创建request和response对象，request对象中封装请求消息数据。</li><li>③tomcat将request和response两个对象传递给service方法，并调用service方法。</li></ul></li><li>service方法被调用执行 <ul><li>在service方法中，程序员可以通过request对象获取请求消息数据</li><li>也可以通过response对象设置相应消息数据</li></ul></li><li>Tomcat从response对象中拿到程序中设置的响应消息数据 <ul><li>tomcat向之前发起请求的浏览器返回响应</li></ul></li><li>前端：浏览器接收响应</li></ul><h4 id="_2-request的作用-获取请求数据" tabindex="-1"><a class="header-anchor" href="#_2-request的作用-获取请求数据" aria-hidden="true">#</a> 2. request的作用：获取请求数据</h4><ul><li>request对象是用来封装请求数据的对象</li><li>浏览器会发送HTTP请求到后台服务器[ Tomcat ]<br> HTTP的请求中会包含很多请求数据[ 请求行+请求头+请求体 ]</li><li>后台服务器[ Tomcat ]会对HTTP请求中的数据进行解析并把解析结果存入到一个对象中</li><li>所存入的对象即为request对象，所以我们可以从request对象中获取请求的相关参数</li><li>获取到数据后就可以继续后续的业务，比如获取用户名和密码就可以实现登录操作的相关业务</li></ul><h4 id="_3-response的作用-设置响应数据" tabindex="-1"><a class="header-anchor" href="#_3-response的作用-设置响应数据" aria-hidden="true">#</a> 3. response的作用：设置响应数据</h4><p>response对象是用来封装响应数据的对象</p><ul><li>业务处理完后，后台就需要给前端返回业务处理的结果即响应数据</li><li>把响应数据封装到response对象中</li><li>后台服务器[ Tomcat ]会解析response对象,按照[ 响应行+响应头+响应体 ]格式拼接结果</li><li>浏览器最终解析结果，把内容展示在浏览器给用户浏览</li></ul><h2 id="ii-request继承体系" tabindex="-1"><a class="header-anchor" href="#ii-request继承体系" aria-hidden="true">#</a> Ⅱ. Request继承体系</h2><h4 id="介绍-1" tabindex="-1"><a class="header-anchor" href="#介绍-1" aria-hidden="true">#</a> 介绍</h4><p>当我们的Servlet类实现的是Servlet接口的时候，service方法中的参数是ServletRequest和ServletResponse</p><p>当我们的Servlet类继承的是HttpServlet类的时候，doGet和doPost方法中的参数就变成HttpServletRequest和HttpServletReponse</p><p>和Servlet类似，Request和Response也存在自己的继承体系。</p><h4 id="_1-request的继承体系" tabindex="-1"><a class="header-anchor" href="#_1-request的继承体系" aria-hidden="true">#</a> 1.Request的继承体系</h4><figure><img src="'+r+`" alt="3-5-2" tabindex="0" loading="lazy"><figcaption>3-5-2</figcaption></figure><p>ServletRequest和HttpServletRequest都是Java提供的，ServletRequest和HttpServletRequest是继承关系，并且两个都是接口，接口是无法创建对象。我们真正使用的类是RequestFacade类。</p><h4 id="_2-requestfacade" tabindex="-1"><a class="header-anchor" href="#_2-requestfacade" aria-hidden="true">#</a> 2. RequestFacade</h4><p>真正使用的Request对象的类是：RequestFacade（根据多态显示的类是HttpServletRequest）</p><ul><li>该类实现了HttpServletRequest接口，也间接实现了ServletRequest接口。</li><li>Servlet类中的service方法、doGet方法或者是doPost方法最终都是由Web服务器- [ Tomcat ]来调用的，所以Tomcat提供了方法参数接口的具体实现类，并完成了对象的创建</li><li>要想了解RequestFacade中都提供了哪些方法，我们可以直接查看JavaEE的API文档中关于ServletRequest和HttpServletRequest的接口文档，因为RequestFacade实现了其接口就需要重写接口中的方法</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//doGet是HttpServlet中的Service自动调用的方法，参数跟Service一样</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-总结" tabindex="-1"><a class="header-anchor" href="#_3-总结" aria-hidden="true">#</a> 3. 总结</h4><ul><li>Request的继承体系为ServletRequest--&gt;HttpServletRequest--&gt;RequestFacade</li><li>Tomcat需要解析请求数据，封装为request对象,并且创建request对象传递到service方法</li><li>使用request对象，可以查阅JavaEE API文档的HttpServletRequest接口中方法说明</li></ul><h2 id="iii-response继承体系" tabindex="-1"><a class="header-anchor" href="#iii-response继承体系" aria-hidden="true">#</a> Ⅲ. Response继承体系</h2><p>Reponse的继承体系和Request的继承体系也非常相似</p><h4 id="_1-继承关系" tabindex="-1"><a class="header-anchor" href="#_1-继承关系" aria-hidden="true">#</a> 1. 继承关系</h4><figure><img src="`+l+'" alt="3-5-3" tabindex="0" loading="lazy"><figcaption>3-5-3</figcaption></figure><h4 id="_2-responsefacade" tabindex="-1"><a class="header-anchor" href="#_2-responsefacade" aria-hidden="true">#</a> 2. ResponseFacade</h4><p>和RequestFacade一样，只是Request变成了Response</p>',33),c=[d];function o(u,p){return a(),t("div",null,c)}const v=e(n,[["render",o],["__file","3-5.请求与响应介绍.html.vue"]]);export{v as default};
