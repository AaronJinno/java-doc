import{_ as a,o as n,c as s,e}from"./app-dca03e8f.js";const i="/java-doc/img/frame/springboot/3-1-1.png",l={},t=e(`<h2 id="i-windows" tabindex="-1"><a class="header-anchor" href="#i-windows" aria-hidden="true">#</a> Ⅰ. Windows</h2><p>实际开发时都是部署到Linux服务器上的，windows服务器仅作为测试。</p><p>其实测试版基本也是在Linux上。</p><h4 id="_1-概念" tabindex="-1"><a class="header-anchor" href="#_1-概念" aria-hidden="true">#</a> 1. 概念</h4><ul><li>打包：指将程序转换成一个可执行的文件，</li><li>发布：指不依赖开发环境执行打包产生的文件。</li></ul><p>上述两个操作都有对应的命令可以快速执行。</p><h4 id="_2-打包" tabindex="-1"><a class="header-anchor" href="#_2-打包" aria-hidden="true">#</a> 2. 打包</h4><p>SpringBoot程序是基于Maven创建的，在Maven中提供有打包的指令，叫做package。<br> 本操作可以在Idea环境下执行。</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>mvn package
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>打包后会产生一个与工程名类似的jar文件，其名称由模块名+版本号+.jar组成。</p><h4 id="_3-发布-运行" tabindex="-1"><a class="header-anchor" href="#_3-发布-运行" aria-hidden="true">#</a> 3. 发布 (运行)</h4><p>程序打包好以后，就可以直接执行了。<br> 在程序包所在路径下，执行指令：</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>java -jar 工程包名.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行程序打包指令后，程序正常运行，与在Idea下执行程序没有区别。</p><h5 id="_3-1-jdk" tabindex="-1"><a class="header-anchor" href="#_3-1-jdk" aria-hidden="true">#</a> 3.1 JDK</h5><p>计算机上必须安装JDK，否则无法执行java命令。</p><h5 id="_3-2-maven插件" tabindex="-1"><a class="header-anchor" href="#_3-2-maven插件" aria-hidden="true">#</a> 3.2 Maven插件</h5><p>在使用向导创建SpringBoot工程时，pom.xml文件中会有如下配置，这一段配置千万不能删除，否则打包后无法正常执行程序。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-springboot的maven打包插件" tabindex="-1"><a class="header-anchor" href="#_4-springboot的maven打包插件" aria-hidden="true">#</a> 4. SpringBoot的Maven打包插件</h4><p>spring-boot-maven-plugin插件用于将当前程序打包成一个可以独立运行的程序包。</p><h5 id="_4-1-两种打包方式" tabindex="-1"><a class="header-anchor" href="#_4-1-两种打包方式" aria-hidden="true">#</a> 4.1 两种打包方式</h5><ul><li>方式1：不使用spring-boot-maven-plugin插件打包 <ul><li>将默认生成的spring-boot-maven-plugin插件注释掉。</li></ul></li><li>方式2：使用spring-boot-maven-plugin插件打包</li></ul><h5 id="_4-2-两种打包方式的对比" tabindex="-1"><a class="header-anchor" href="#_4-2-两种打包方式的对比" aria-hidden="true">#</a> 4.2 两种打包方式的对比</h5><p>打包后文件的大小不同：差了30倍</p><ul><li>打包后所包含的内容不同</li><li>打包程序中个别文件内容不同</li></ul><figure><img src="`+i+`" alt="3-1-1" tabindex="0" loading="lazy"><figcaption>3-1-1</figcaption></figure><h4 id="_5-jar包的目录结构" tabindex="-1"><a class="header-anchor" href="#_5-jar包的目录结构" aria-hidden="true">#</a> 5 Jar包的目录结构</h4><h5 id="_5-1-带spring-boot-maven-plugin插件的jar包" tabindex="-1"><a class="header-anchor" href="#_5-1-带spring-boot-maven-plugin插件的jar包" aria-hidden="true">#</a> 5.1 带spring-boot-maven-plugin插件的jar包</h5><ul><li>META-INF <ul><li>MANIFEST.MF</li></ul></li><li>BOOT-INF <ul><li>classes：项目目录 <ul><li>com：项目包</li><li>static：页面</li><li>application.yml：配置文件</li></ul></li></ul></li><li>lib：所有springboot项目依赖的jar包都在这里了，依赖这些Jar包，springboot就可以单独运行了</li><li>Org.Springframework.boot.loader <ul><li>JarLauncher.class：该类内部要查找MANIFEST.MF中Start-Class属性配置的类，并执行</li></ul></li></ul><h5 id="_5-2-不带spring-boot-maven-plugin插件的jar包" tabindex="-1"><a class="header-anchor" href="#_5-2-不带spring-boot-maven-plugin插件的jar包" aria-hidden="true">#</a> 5.2 不带spring-boot-maven-plugin插件的jar包</h5><ul><li>com：项目目录</li><li>META-INF <ul><li>MANIFEST.MF：</li></ul></li><li>static：页面目录</li><li>application.yml：配置文件</li></ul><h5 id="_5-3-manifeast-mf" tabindex="-1"><a class="header-anchor" href="#_5-3-manifeast-mf" aria-hidden="true">#</a> 5.3 MANIFEAST.MF</h5><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">//1.普通工程的MANIFEAST.MF</span>
Manifest-Version<span class="token operator">:</span> <span class="token number">1.0</span>
Implementation-Title<span class="token operator">:</span> springboot_08_ssmp
Implementation-Version<span class="token operator">:</span> <span class="token number">0.0</span>.<span class="token number">1</span>-SNAPSHOT
Build-Jdk-Spec<span class="token operator">:</span> <span class="token number">1.8</span>
Created-By<span class="token operator">:</span> Maven Jar Plugin <span class="token number">3.2</span>.<span class="token number">0</span>

<span class="token comment">//2.带spring-boot-maven-plugin的jar包的MANIFEAST.MF</span>
Manifest-Version<span class="token operator">:</span> <span class="token number">1.0</span>
Spring-Boot-Classpath-Index<span class="token operator">:</span> BOOT-INF/classpath.idx
Implementation-Title<span class="token operator">:</span> springboot_08_ssmp
Implementation-Version<span class="token operator">:</span> <span class="token number">0.0</span>.<span class="token number">1</span>-SNAPSHOT
Spring-Boot-Layers-Index<span class="token operator">:</span> BOOT-INF/layers.idx
<span class="token comment">//JarLauncher执行该类：启动类 </span>
Start-Class<span class="token operator">:</span> com.itheima.SSMPApplication
Spring-Boot-Classes<span class="token operator">:</span> BOOT-INF/classes/
Spring-Boot-Lib<span class="token operator">:</span> BOOT-INF/lib/
Build-Jdk-Spec<span class="token operator">:</span> <span class="token number">1.8</span>
Spring-Boot-Version<span class="token operator">:</span> <span class="token number">2.5</span>.<span class="token number">4</span>
Created-By<span class="token operator">:</span> Maven Jar Plugin <span class="token number">3.2</span>.<span class="token number">0</span>
 
<span class="token comment">//如果使用java -jar执行此程序包，将执行Main-Class属性配置的类</span>
Main-Class<span class="token operator">:</span> org.springframework.boot.loader.JarLauncher
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-4-总结" tabindex="-1"><a class="header-anchor" href="#_5-4-总结" aria-hidden="true">#</a> 5.4 总结</h5><ul><li>SpringBoot程序添加配置后会打出一个特殊的包，包含Spring框架部分功能，原始工程内容，原始工程依赖的jar包</li><li>首先读取MANIFEST.MF文件中的Main-Class属性，用来标记执行java -jar命令后运行的类</li><li>JarLauncher类执行时会找到Start-Class属性，也就是启动类类名</li><li>运行启动类时会运行当前工程的内容</li><li>运行当前工程时会使用依赖的jar包，从lib目录中查找</li></ul><p>这就是为什么这个jar包能独立运行的原因。</p><p>而不带Maven插件打包的结果只是一个普通包，在MANIFEST.MF文件中也就没有了Main-Class对应的属性了，所以运行时提示找不到主清单属性，运行报错。</p><h4 id="_6-端口号冲突" tabindex="-1"><a class="header-anchor" href="#_6-端口号冲突" aria-hidden="true">#</a> 6. 端口号冲突</h4><p>一般80端口冲突都是因为开启了多个服务器，常用解决方案时，其他服务器关闭，或者修改端口号，比如前端服务器的端口号改为8080。</p><p>如果关闭其他服务器和改端口号都解决不了问题，就要针对性的结束进程了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查询端口</span>
<span class="token function">netstat</span> <span class="token parameter variable">-ano</span>
<span class="token comment"># 查询指定端口</span>
<span class="token function">netstat</span> <span class="token parameter variable">-ano</span> <span class="token operator">|</span>findstr <span class="token string">&quot;端口号&quot;</span>
<span class="token comment"># 根据进程PID查询进程名称</span>
tasklist <span class="token operator">|</span>findstr <span class="token string">&quot;进程PID号&quot;</span>
<span class="token comment"># 根据PID杀死任务</span>
taskkill /F /PID <span class="token string">&quot;进程PID号&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-linux" tabindex="-1"><a class="header-anchor" href="#ii-linux" aria-hidden="true">#</a> Ⅱ. Linux</h2><h4 id="_1-项目部署步骤" tabindex="-1"><a class="header-anchor" href="#_1-项目部署步骤" aria-hidden="true">#</a> 1. 项目部署步骤</h4><ul><li>本地：开发部门使用git将项目上传道版本服务器</li><li>服务器：使用git下载项目</li><li>服务器：使用Maven工具在当前真机环境下构建项目</li><li>启动服务</li></ul><h4 id="_2-部署环境" tabindex="-1"><a class="header-anchor" href="#_2-部署环境" aria-hidden="true">#</a> 2. 部署环境</h4><p>安装JDK，搭建数据库并创建好数据表。</p><h4 id="_3-上传jar包" tabindex="-1"><a class="header-anchor" href="#_3-上传jar包" aria-hidden="true">#</a> 3. 上传jar包</h4><p>将SpringBoot打包好的jar包上传道 /usr/local目录中（其他目录也可以）。</p><h4 id="_4-启动项目" tabindex="-1"><a class="header-anchor" href="#_4-启动项目" aria-hidden="true">#</a> 4. 启动项目</h4><p>基本命令和windows上的相同。</p><p>执行jar命令：java –jar 工程名.jar</p>`,52),r=[t];function p(o,d){return n(),s("div",null,r)}const u=a(l,[["render",p],["__file","3-1.打包与发布.html.vue"]]);export{u as default};
