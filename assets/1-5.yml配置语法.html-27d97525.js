import{_ as n,o as a,c as s,d as e,a as t,b as p}from"./app-bac1dcaf.js";const l={},i=t("br",null,null,-1),c=p(`<h2 id="i-配置yml" tabindex="-1"><a class="header-anchor" href="#i-配置yml" aria-hidden="true">#</a> Ⅰ. 配置yml</h2><h4 id="_1-yaml语法规则" tabindex="-1"><a class="header-anchor" href="#_1-yaml语法规则" aria-hidden="true">#</a> 1. yaml语法规则</h4><ul><li>大小写敏感</li><li>属性层级关系使用多行描述，每行结尾使用冒号结束</li><li>使用缩进表示层级关系，同层级左侧对齐，只允许使用空格（不允许使用Tab键）</li><li>属性值前面添加空格（属性名与属性值之间使用冒号+空格作为分隔）</li><li><code>#</code> 表示注释</li></ul><h4 id="_2-字面量表示方式" tabindex="-1"><a class="header-anchor" href="#_2-字面量表示方式" aria-hidden="true">#</a> 2. 字面量表示方式</h4><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">boolean</span><span class="token punctuation">:</span> <span class="token boolean important">TRUE</span>         <span class="token comment">#TRUE,true,True,FALSE,false ， False 均可</span>
<span class="token key atrule">float</span><span class="token punctuation">:</span> <span class="token number">3.14</span>           <span class="token comment">#6.8523015e+5 # 支持科学计数法</span>
<span class="token key atrule">int</span><span class="token punctuation">:</span> <span class="token number">123</span>              <span class="token comment">#0b1010_0111_0100_1010_1110 # 支持二进制、八进制、十六进制</span>
<span class="token key atrule">null</span><span class="token punctuation">:</span> <span class="token null important">~</span>               <span class="token comment"># 使用 ~ 表示 null</span>
<span class="token key atrule">string</span><span class="token punctuation">:</span> HelloWorld    <span class="token comment"># 字符串可以直接书写</span>
<span class="token key atrule">string2</span><span class="token punctuation">:</span> <span class="token string">&quot;Hello World&quot;</span> <span class="token comment"># 可以使用双引号包裹,此时可以解析特殊字符了，如\\t变成空格</span>
<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-02-17</span> <span class="token comment"># 日期必须使用 yyyy-MM-dd 格式</span>
<span class="token key atrule">datetime</span><span class="token punctuation">:</span> <span class="token datetime number">2018-02-17T15:02:31+08:00</span> <span class="token comment"># 时间和日期之间使用 T 连接，最后使用+ 代表时区</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-数组表示方式" tabindex="-1"><a class="header-anchor" href="#_3-数组表示方式" aria-hidden="true">#</a> 3. 数组表示方式</h4><p>在属性名书写位置的下方使用减号作为数据开始符号，每行书写一个数据，减号与数据间空格分隔。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">likes</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> game
  <span class="token punctuation">-</span> music
  <span class="token punctuation">-</span> sleep
<span class="token key atrule">likes2</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>game<span class="token punctuation">,</span>music<span class="token punctuation">,</span>sleep<span class="token punctuation">]</span> <span class="token comment">#缩略格式</span>

<span class="token comment"># 对象数组</span>
<span class="token key atrule">users</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> zhangsan
    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">18</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> lisi
    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">17</span>
<span class="token key atrule">users2</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> zhangsan
    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">18</span>
  <span class="token punctuation">-</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> lisi
    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">17</span>
<span class="token key atrule">users3</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span>zhangsan<span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span>lisi<span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">17</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-yml文件中的变量引用" tabindex="-1"><a class="header-anchor" href="#_4-yml文件中的变量引用" aria-hidden="true">#</a> 4. yml文件中的变量引用</h4><p>在yml中可以使用 <code>\${属性名}</code> 引用数据，将其他配置项的值作为自己值的一部分。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">baseDir</span><span class="token punctuation">:</span> c<span class="token punctuation">:</span>\\win10
<span class="token key atrule">tempDir</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>baseDir<span class="token punctuation">}</span>\\temp  <span class="token comment"># c:\\win10\\temp</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-读取yml" tabindex="-1"><a class="header-anchor" href="#ii-读取yml" aria-hidden="true">#</a> Ⅱ. 读取yml</h2><p>底层是IOC容器，通过注入的方式读取配置项，SpringBoot会自动导入配置文件的，直接使用@Value读配置项即可。</p><h4 id="_1-读取yml数据" tabindex="-1"><a class="header-anchor" href="#_1-读取yml数据" aria-hidden="true">#</a> 1. 读取yml数据</h4><div class="hint-container tip"><p class="hint-container-title">提示</p><p>这里指的是手动读取配置项，大部分配置信息SpringBoot会自动读取。</p></div><p>使用@Value读取单个数据，属性名引用方式：<code>\${一级属性名.二级属性名……}</code></p><ul><li>简单读取：<code>@Value(&quot;\${属性名}&quot;)</code></li><li>多级数据：<code>@Value(&quot;\${一级属性名.二级属性名……}&quot;)</code></li><li>数组中数据：<code>@Value(&quot;\${数组名[索引]}&quot;)</code></li><li>对象数组中数据：<code>@Value(&quot;\${数组名[索引].对象属性}&quot;)</code></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${country}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> country1<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${user.name}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> name1<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${likes[1]}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> likes1<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${users[1].age}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> age1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-读取yaml全部属性数据" tabindex="-1"><a class="header-anchor" href="#_2-读取yaml全部属性数据" aria-hidden="true">#</a> 2. 读取yaml全部属性数据</h4><p>通过自动装配，SpringBoot可以将配置文件中所有的配置项信息封装到Environment对象中。</p><p>这种方式可以省去定义太多成员变量。</p><p>通过Environment对象的getProperty方法可以读取具体的配置项，参数是配置项名。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//注入方式</span>
<span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">Enviroment</span> env<span class="token punctuation">;</span>

<span class="token comment">//读取配置项</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;server.port&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;enterprise.subject[0]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-读取yml引用类型数据" tabindex="-1"><a class="header-anchor" href="#_3-读取yml引用类型数据" aria-hidden="true">#</a> 3. 读取yml引用类型数据</h4><p>yaml配置项的主流配置方式是：将一组数据封装到一个java对象中，使用的时候加载该对象，通过该对象读取所需配置。</p><ul><li>创建类：用于封装一组数据，如JDBC数据库连接信息（datasource）</li><li>加载数据到对象：由Spring将这组数据加载到数据对象中</li><li>使用数据：使用时从spring中直接获取数据使用</li></ul><p><strong>示例如下：</strong></p><h5 id="_3-1-待封装的数据" tabindex="-1"><a class="header-anchor" href="#_3-1-待封装的数据" aria-hidden="true">#</a> 3.1 待封装的数据</h5><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># JDBC驱动配置</span>
<span class="token key atrule">datasource</span><span class="token punctuation">:</span>
  <span class="token key atrule">driver</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver
  <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost/springboot_db
  <span class="token key atrule">username</span><span class="token punctuation">:</span> root
  <span class="token key atrule">password</span><span class="token punctuation">:</span> root666123
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-2-创建数据对象" tabindex="-1"><a class="header-anchor" href="#_3-2-创建数据对象" aria-hidden="true">#</a> 3.2 创建数据对象</h5><p>创建config包，创建文件：JDBCDateSource类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">/</span>定义数据模型封装yaml文件中对应的数据
<span class="token annotation punctuation">@Component</span><span class="token comment">//定义为spring管控的bean</span>

<span class="token comment">//指定加载的数据(配置文件中的哪个配置项):datasource</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;datasource&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCDateSource</span> <span class="token punctuation">{</span>
    <span class="token comment">//属性和要封装的数据一一兑对应</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> driver<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>getter\\setter\\<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-3-注入数据并使用" tabindex="-1"><a class="header-anchor" href="#_3-3-注入数据并使用" aria-hidden="true">#</a> 3.3 注入数据并使用</h5><p>注入数据对象（自动装配），直接就可以使用了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">JDBCDateSource</span> dataSource<span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可以成功获取</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,35);function o(u,r){return a(),s("div",null,[i,e(" yaml是一种数据存储格式，类似XML和Properties. "),c])}const k=n(l,[["render",o],["__file","1-5.yml配置语法.html.vue"]]);export{k as default};
