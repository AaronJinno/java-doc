import{_ as l,r as i,o,c as r,a as e,d as a,e as c,b as s}from"./app-bac1dcaf.js";const n="/java-doc/img/java/javaweb/3-2-1.jpg",p="/java-doc/img/java/javaweb/3-2-2.jpg",d="/java-doc/img/java/javaweb/3-2-3.jpg",u="/java-doc/img/java/javaweb/3-2-4.jpg",v={},h=s('<h2 id="i-快速入门" tabindex="-1"><a class="header-anchor" href="#i-快速入门" aria-hidden="true">#</a> Ⅰ. 快速入门</h2><h4 id="快速入门步骤" tabindex="-1"><a class="header-anchor" href="#快速入门步骤" aria-hidden="true">#</a> 快速入门步骤</h4><ul><li>创建项目：配置好Tomcat和Servlet</li><li>创建Servlet实现类：实现Servlet接口 <ul><li>并重写所有方法，其中server方法中打印一句话进行测设</li></ul></li><li>配置路由：使用注解的方式为Servlet类配置一个访问路径（暂时不用深究）</li><li>访问Servlet实现类：通过 基本url+路由的方式访问 <ul><li>访问前别忘了重启服务器</li></ul></li><li>测设：观察访问结果 <ul><li>不用写测设类，Servlet实现类会被自动访问，并自动调用server方法</li></ul></li></ul><h4 id="_1-创建项目" tabindex="-1"><a class="header-anchor" href="#_1-创建项目" aria-hidden="true">#</a> 1. 创建项目</h4><p>创建Web项目，并配置Tomcat和Servlet。</p><ul><li>右键Librarys中的servlet-api：Add to Modules....：选择具体的module</li><li>也可以在具体Module的：Depedencies选项卡中，手动添加</li></ul><figure><img src="'+n+`" alt="3-2-1" tabindex="0" loading="lazy"><figcaption>3-2-1</figcaption></figure><h4 id="_2-创建servlet实现类" tabindex="-1"><a class="header-anchor" href="#_2-创建servlet实现类" aria-hidden="true">#</a> 2. 创建Servlet实现类</h4><p>定义一个类，实现Servlet接口，并重写接口中所有方法，并在service方法中打印hello</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">servlet<span class="token punctuation">.</span>demo</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo1</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">)</span> 
    <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//其他方法不用管，暂时只考虑service方法</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-配置路由" tabindex="-1"><a class="header-anchor" href="#_3-配置路由" aria-hidden="true">#</a> 3. 配置路由</h4><p>在类上使用@WebServlet注解，配置该Servlet的访问路径</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/demo1&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo1</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-访问servlet实现类" tabindex="-1"><a class="header-anchor" href="#_4-访问servlet实现类" aria-hidden="true">#</a> 4. 访问Servlet实现类</h4><p>启动/重启 Tomcat，浏览器中输入URL地址（基本URL+路由）访问该Servlet</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>http://localhost:8080/demo1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_5-测试" tabindex="-1"><a class="header-anchor" href="#_5-测试" aria-hidden="true">#</a> 5. 测试</h4><p>观察启动后的命令行，发现打印了hello。</p><p>刷新访问的页面，每刷新一次就打印一次hello。</p><h2 id="ii-servlet-执行流程" tabindex="-1"><a class="header-anchor" href="#ii-servlet-执行流程" aria-hidden="true">#</a> Ⅱ. Servlet 执行流程</h2><p>我们并没有创建Servlet类的对象，也没有调用对象中的service方法，为什么在控制台就打印了<code>hello</code>这句话呢?</p><h4 id="_1-servlet执行流程概述" tabindex="-1"><a class="header-anchor" href="#_1-servlet执行流程概述" aria-hidden="true">#</a> 1. Servlet执行流程概述</h4><figure><img src="`+n+'" alt="3-2-5" tabindex="0" loading="lazy"><figcaption>3-2-5</figcaption></figure><h4 id="_2-解析" tabindex="-1"><a class="header-anchor" href="#_2-解析" aria-hidden="true">#</a> 2. 解析</h4>',24),m={href:"http://localhost:8080/web-demo/demo1%E8%AF%B7%E6%B1%82%EF%BC%8C%E4%BB%8E%E8%AF%B7%E6%B1%82%E4%B8%AD%E5%8F%AF%E4%BB%A5%E8%A7%A3%E6%9E%90%E5%87%BA%E4%B8%89%E9%83%A8%E5%88%86%E5%86%85%E5%AE%B9%E5%88%86%E5%88%AB%E6%98%AF%60localhost:8080%60%E3%80%81%60web-demo%60%E3%80%81%60demo1%60",target:"_blank",rel:"noopener noreferrer"},b=e("ul",null,[e("li",null,[a("根据"),e("code",null,"localhost:8080"),a("可以找到要访问的Tomcat Web服务器")]),e("li",null,[a("根据"),e("code",null,"web-demo"),a("可以找到部署在Tomcat服务器上的web-demo项目")]),e("li",null,[a("根据"),e("code",null,"demo1"),a("可以找到要访问的是项目中的哪个Servlet类，根据@WebServlet后面的值进行匹配")])],-1),k=e("li",null,[a("找到ServletDemo1这个类后，Tomcat Web服务器就会为ServletDemo1这个类创建一个对象，然后调用对象中的service方法 "),e("ul",null,[e("li",null,"ServletDemo1实现了Servlet接口，所以类中必然会重写service方法供Tomcat Web服务器进行调用"),e("li",null,"service方法中有ServletRequest和ServletResponse两个参数，ServletRequest封装的是请求数据，ServletResponse封装的是响应数据，后期我们可以通过这两个参数实现前后端的数据交互")])],-1),_=s('<h4 id="_3-总结" tabindex="-1"><a class="header-anchor" href="#_3-总结" aria-hidden="true">#</a> 3. 总结</h4><ul><li>Servlet由web服务器创建，Servlet方法由web服务器调用</li><li>因为我们自定义的Servlet,必须实现Servlet接口并复写其方法，而Servlet接口中有service方法</li></ul><h2 id="iii-idea中快速使用" tabindex="-1"><a class="header-anchor" href="#iii-idea中快速使用" aria-hidden="true">#</a> Ⅲ. IDEA中快速使用</h2><p>在IDEA中可以快速创建Servlet实现类。</p><p>JavaWeb核心三件套都可以直接new。</p><h4 id="_1-使用方式" tabindex="-1"><a class="header-anchor" href="#_1-使用方式" aria-hidden="true">#</a> 1. 使用方式</h4><p>右键new时直接显示Servlet。</p><p>效果：直接配置好了WebServlet，继承了HttpServlet，且自动重写了doGet和doPost。</p><figure><img src="'+p+'" alt="3-2-2" tabindex="0" loading="lazy"><figcaption>3-2-2</figcaption></figure><h4 id="_2-修改模板" tabindex="-1"><a class="header-anchor" href="#_2-修改模板" aria-hidden="true">#</a> 2. 修改模板</h4><p>可以根据需求修改Servlet模板</p><figure><img src="'+d+'" alt="3-2-3" tabindex="0" loading="lazy"><figcaption>3-2-3</figcaption></figure><h4 id="_3-注意事项" tabindex="-1"><a class="header-anchor" href="#_3-注意事项" aria-hidden="true">#</a> 3. 注意事项</h4><p>前提：已经导入了servlet.api</p><p>在Project Structure界面，点击Module选项卡：将Source Roots中对应的src目录勾选上。</p><figure><img src="'+u+'" alt="3-2-4" tabindex="0" loading="lazy"><figcaption>3-2-4</figcaption></figure>',16);function g(S,f){const t=i("ExternalLinkIcon");return o(),r("div",null,[h,e("ul",null,[e("li",null,[a("浏览器发"),e("a",m,[a("http://localhost:8080/web-demo/demo1请求，从请求中可以解析出三部分内容分别是`localhost:8080`、`web-demo`、`demo1`"),c(t)]),b]),k]),_])}const E=l(v,[["render",g],["__file","3-2.快速使用.html.vue"]]);export{E as default};
