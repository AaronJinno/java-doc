import{_ as n,o as s,c as e,b as l}from"./app-9c6c4763.js";const t="/java-doc/img/java/javase/1-3-1.jpg",a="/java-doc/img/java/javase/1-3-2.jpg",c={},i=l('<h2 id="i-编译执行" tabindex="-1"><a class="header-anchor" href="#i-编译执行" aria-hidden="true">#</a> Ⅰ. 编译执行</h2><h4 id="_1-java执行过程" tabindex="-1"><a class="header-anchor" href="#_1-java执行过程" aria-hidden="true">#</a> 1. Java执行过程</h4><p><img src="'+t+`" alt="1-3-1" loading="lazy"> 示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//文件：workpace/test.java</span>
<span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//单行注释</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;fuck world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//命令行编译：需要在文件所在位置执行命令</span>
workplace<span class="token operator">&gt;</span>javac test<span class="token punctuation">.</span>java
workplace<span class="token operator">&gt;</span>java <span class="token class-name">Hello</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>编写：将 Java 代码 编写到扩展名为 .java 的文件中</li><li>编译：通过过 <code>javac</code> 命令对该 java 文件进行编译，编译为class文件</li><li>运行：通过 <code>java</code> 命令对生成的 class 文件进行</li></ul><h4 id="_2-执行过程解析" tabindex="-1"><a class="header-anchor" href="#_2-执行过程解析" aria-hidden="true">#</a> 2. 执行过程解析</h4><h5 id="_2-1-编译代码" tabindex="-1"><a class="header-anchor" href="#_2-1-编译代码" aria-hidden="true">#</a> 2.1 编译代码</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>javac test<span class="token punctuation">.</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>使用javac 命令来编译代码的源文件（文件名区分大小写），将其编译成JVM可识别的二进制文件（字节码文件）。 <ul><li>编译成功后，会在当前目录下生成一个编译后的文件（源文件还在）。</li></ul></li><li>编译后的文件以代码中的类名作为文件名（Hello），以.class作为后缀。</li><li>如果代码进行过修改，就需要重新编译（新编译后的文件会覆盖原文件）。</li></ul><h5 id="_2-2-运行代码" tabindex="-1"><a class="header-anchor" href="#_2-2-运行代码" aria-hidden="true">#</a> 2.2 运行代码</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>java <span class="token class-name">Hello</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>运行的是编译后的.class结尾的文件。使用java命令进行运行</li><li>执行文件时，不要加文件后缀。</li></ul><h5 id="_2-3-注意事项" tabindex="-1"><a class="header-anchor" href="#_2-3-注意事项" aria-hidden="true">#</a> 2.3 注意事项</h5><ul><li>命令行的编译和执行，需要在文件所在目录执行命令</li><li>使用IDE或者智能编辑器，可以直接在编辑器里运行，自动编译执行。</li></ul><h4 id="_3-基本语法规则" tabindex="-1"><a class="header-anchor" href="#_3-基本语法规则" aria-hidden="true">#</a> 3. 基本语法规则</h4><h5 id="_3-1-class-类" tabindex="-1"><a class="header-anchor" href="#_3-1-class-类" aria-hidden="true">#</a> 3.1 class：类</h5><ul><li>在一个java源文件中可以声明多个class。</li><li>只能最多有一个类声明为public的。</li><li>声明为public的类的类名必须与源文件名相同。</li></ul><h5 id="_3-2-main-入口" tabindex="-1"><a class="header-anchor" href="#_3-2-main-入口" aria-hidden="true">#</a> 3.2 main：入口</h5><p>程序的入口是main()方法。格式是固定的，必须有main方法，不然只能编译不能执行。 运行class文件时，就是从main方法开始运行的。</p><h5 id="_3-3-注意" tabindex="-1"><a class="header-anchor" href="#_3-3-注意" aria-hidden="true">#</a> 3.3 注意</h5><ul><li>每一行执行语句都以 <code>;</code> 结束。</li><li>如果文件里有public修饰的类，则文件名必须与类名一样，不然会编译失败。</li></ul><h4 id="_4-输出语句" tabindex="-1"><a class="header-anchor" href="#_4-输出语句" aria-hidden="true">#</a> 4. 输出语句</h4><p>一般用于测试：</p><ul><li><code>System.out.println()</code>: 先输出数据，然后换行</li><li><code>System.out.print()</code>: 只输出数据</li></ul><h4 id="_5-基本使用测试" tabindex="-1"><a class="header-anchor" href="#_5-基本使用测试" aria-hidden="true">#</a> 5. 基本使用测试</h4><h5 id="_5-1-包含两个类的java文件-编译后生成了两个class文件" tabindex="-1"><a class="header-anchor" href="#_5-1-包含两个类的java文件-编译后生成了两个class文件" aria-hidden="true">#</a> 5.1 包含两个类的java文件，编译后生成了两个class文件</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Hi</span><span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token comment">//#############################</span>
javac <span class="token class-name">Hello</span><span class="token punctuation">.</span>java<span class="token punctuation">;</span>
<span class="token comment">//在当前目录下生成了两个class文件：Hello.class和Hi.class</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-2-没有main文件-直接运行会报错" tabindex="-1"><a class="header-anchor" href="#_5-2-没有main文件-直接运行会报错" aria-hidden="true">#</a> 5.2 没有main文件，直接运行会报错</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Hi</span><span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token comment">//############################</span>
javac <span class="token class-name">Hello</span><span class="token punctuation">.</span>java<span class="token punctuation">;</span> <span class="token comment">//先编译</span>
java <span class="token class-name">Hello</span><span class="token punctuation">;</span> <span class="token comment">//执行Hello.class</span>
java <span class="token class-name">Hi</span><span class="token punctuation">;</span> <span class="token comment">//执行Hi.class</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果如下：</p><figure><img src="`+a+`" alt="1-3-2" tabindex="0" loading="lazy"><figcaption>1-3-2</figcaption></figure><h5 id="_5-3-结论" tabindex="-1"><a class="header-anchor" href="#_5-3-结论" aria-hidden="true">#</a> 5.3 结论</h5><ul><li>一个文件可以有多个class，编译后，有几个class就形成几个文件，文件名就是类名；</li><li>想单独执行某个class，则该class必须有main方法，不然无法执行。</li><li>备注：可以在有main方法的类中，调用没有main方法的class文件（调用他的方法），因此main方法并非是类的必备方法</li></ul><h2 id="ii-注释" tabindex="-1"><a class="header-anchor" href="#ii-注释" aria-hidden="true">#</a> Ⅱ. 注释</h2><h4 id="_1-注释的意义" tabindex="-1"><a class="header-anchor" href="#_1-注释的意义" aria-hidden="true">#</a> 1. 注释的意义</h4><ul><li>生成api文档</li><li>增加可读性</li><li>调试。</li><li>整理思路，先写注释后写具体代码</li></ul><h4 id="_2-单行注释" tabindex="-1"><a class="header-anchor" href="#_2-单行注释" aria-hidden="true">#</a> 2. 单行注释</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//这里是单行注释</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-多行注释" tabindex="-1"><a class="header-anchor" href="#_3-多行注释" aria-hidden="true">#</a> 3. 多行注释</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">/*
    这里是多行注释
    可以写多行
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-文档注释" tabindex="-1"><a class="header-anchor" href="#_4-文档注释" aria-hidden="true">#</a> 4. 文档注释</h4><p>文档注释可以用来生成API文档，写文档注释时要按照一定的格式来写。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
  <span class="token keyword">@author</span> jinno
  @version 1.0.8
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>位置：放在类，接口，构造函数，方法或字段声明之前（方法中不要加）。</li><li>块标记：以@作为标记区分每个注释块的内容</li><li>HTML：可以在注释里写HTML标签，生成的文档会解析HTML代码。</li></ul><h2 id="iii-文档注释格式" tabindex="-1"><a class="header-anchor" href="#iii-文档注释格式" aria-hidden="true">#</a> Ⅲ. 文档注释格式</h2><h4 id="_1-通用文档标记" tabindex="-1"><a class="header-anchor" href="#_1-通用文档标记" aria-hidden="true">#</a> 1. 通用文档标记</h4><p>适用于类、接口、方法、变量、常量等。</p><ul><li>@link：用于快速链接到相关代码，使用格式：<code>{@link 包名.类名#方法名(参数类型)}</code><ul><li>注意：该标记外外面必须加<code>{}</code>，没有这个大引号，就无法直接跳转到目标代码了</li><li>完全限定的类名：<code>{@link java.util.Collections}</code></li><li>省略包名，只写类名：<code>{@link String}</code></li><li>省略类名，表示指向当前的某一方法：<code>{@link #toString}</code></li><li>完全限定方法名，指向某类的某个方法：<code>{@link java.lang.String#charAt(int)}</code></li></ul></li><li>@code：将文本标记为代码样式文本，一般在Javadoc中只要涉及到类名或者方法名，都需要使用@code进行标记，使用格式：<code>{@code text}</code>，其会被解析为 text。 <ul><li>标记类名：<code>{@code ArrayList}</code></li><li>标记方法名：<code>{@code isEmpty}</code></li><li>标记某个代码关键字：<code>{@code null}</code></li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collections</span></span><span class="token punctuation">}</span>
 * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">String</span></span><span class="token punctuation">}</span>
 * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">)</span></span><span class="token punctuation">}</span>
 * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">String</span><span class="token punctuation">#</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
 * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">ArrayList</span></span></span><span class="token punctuation">}</span>
 * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">isEmpty</span></span><span class="token punctuation">}</span>
 * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span>
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-类上常用文档标记" tabindex="-1"><a class="header-anchor" href="#_2-类上常用文档标记" aria-hidden="true">#</a> 2. 类上常用文档标记</h4><ul><li><code>@author</code> 类的作者，后面跟作者名或邮箱、官网等 <ul><li>如果一段程序是由多个作者来维护，则可以标记多个<code>@author</code></li></ul></li><li><code>@param</code>：如果一个类支持泛型时，可以通过@param来解释泛型的类型</li><li><code>@version</code> 用于标记当前类版本，默认为1.0</li><li><code>@see</code> 参考链接，用于标记与本类相关联的类，该标注可以用在类或方法上</li><li><code>@since</code>：表示从以下版本开始有这个类，标记文件创建时项目当时对应的版本，后面可以跟版本号或是时间。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * this <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Hello</span></span></span><span class="token punctuation">}</span> class is very good;
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>作用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
 * 用于测试基JavaSE语法
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>比如，文档注释是可以写标签的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blockquote</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 *  Here are some more examples of how strings can be used:
 *  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blockquote</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span>
 <span class="token code-section">*      <span class="token line"><span class="token code language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
 *      <span class="token line"><span class="token code language-java"><span class="token class-name">String</span> cde <span class="token operator">=</span> <span class="token string">&quot;cde&quot;</span><span class="token punctuation">;</span></span></span>
 *      <span class="token line"><span class="token code language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span> <span class="token operator">+</span> cde<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
 *      <span class="token line"><span class="token code language-java"><span class="token class-name">String</span> c <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
 *      <span class="token line"><span class="token code language-java"><span class="token class-name">String</span> d <span class="token operator">=</span> cde<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
 *</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blockquote</span><span class="token punctuation">&gt;</span></span>
 //上面的就是文档的概要描述和详细描述
 
 * <span class="token keyword">@author</span> Aaron
 * <span class="token keyword">@version</span> 1.0.0
 * <span class="token keyword">@see</span> <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">LongStream</span></span>
 * <span class="token keyword">@since</span> 1.0.0
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>E<span class="token punctuation">&gt;</span></span> the type of elements in this list
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上是类上常用的文档标注，类上的文档格式如下：</p><ul><li>概要描述：通常用一段话简要的描述该类的基本内容。</li><li>详细描述：通常用几大段话详细描述该类的功能与相关情况。 <ul><li>这里常使用很多<code>html</code>标签</li></ul></li><li>文档标注：用于标注该类的作者、时间、版本、参略等信息。</li></ul><h4 id="_3-方法上常用文档标记" tabindex="-1"><a class="header-anchor" href="#_3-方法上常用文档标记" aria-hidden="true">#</a> 3. 方法上常用文档标记</h4><ul><li><code>@param</code>：方法的参数名，包括参数描述。</li><li><code>@return</code>：返回值的描述。</li><li><code>@throws</code>：异常的类型和异常的描述，用于方法需要抛出异常的情况</li><li><code>@exception</code>：方法签名<code>throws</code>对应的异常</li><li><code>@see</code>：类和方法都可以用，表示参考的类和方法</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token doc-comment comment">/**
 * this<span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">say</span></span><span class="token punctuation">}</span>function is asshole
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>作用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span> 用来输出一段话<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
 * <span class="token keyword">@param</span> <span class="token parameter">word</span> String,the value will return
 * <span class="token keyword">@return</span> String,the function&#39;s param
 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span> some Accidental error
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;hello&quot;</span><span class="token operator">+</span>word<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上是方法上常用的文档标注，方法上的文档格式如下：</p><ul><li>概要描述：通常用一段话简要的描述该方法的基本内容。</li><li>详细描述：通常用几大段话详细描述该方法的功能与相关情况。</li><li>文档标注：用于标注该方法的参数、返回值、异常、参略等信息</li></ul><h4 id="_4-使用命令行生成api文档" tabindex="-1"><a class="header-anchor" href="#_4-使用命令行生成api文档" aria-hidden="true">#</a> 4. 使用命令行生成API文档</h4><p>用wiodow打开cmd终端，然后进入要编译的java文件目录的路径中。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>javadoc <span class="token operator">-</span>encoding <span class="token constant">UTF</span><span class="token operator">-</span><span class="token number">8</span> <span class="token operator">-</span>charset <span class="token constant">UTF</span><span class="token operator">-</span><span class="token number">8</span> <span class="token operator">*</span><span class="token punctuation">.</span>java  <span class="token comment">//*也可以表示具体的文件名</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>编译成功后当前路径下会多出很多文件，点击打开index.html就可以查看文档了。</p><figure><img src="`+a+'" alt="1-3-2" tabindex="0" loading="lazy"><figcaption>1-3-2</figcaption></figure><h4 id="_5-使用ide生成帮助文档" tabindex="-1"><a class="header-anchor" href="#_5-使用ide生成帮助文档" aria-hidden="true">#</a> 5. 使用IDE生成帮助文档</h4><div class="hint-container tip"><p class="hint-container-title">提示</p><p>暂略</p></div><h2 id="iv-基本代码规范" tabindex="-1"><a class="header-anchor" href="#iv-基本代码规范" aria-hidden="true">#</a> Ⅳ. 基本代码规范</h2><ul><li>正确的注释和注释风格 <ul><li>使用文档注释来注释整个类或整个方法</li><li>如果注释方法中的某一个步骤，使用单行或多行注释。</li></ul></li><li>正确的缩进和空白 <ul><li>使用一次tab操作，实现缩进</li><li>运算符两边习惯性各加一个空格。比如：<code>2 + 4 * 5</code>。</li></ul></li><li>大括号的风格: Java API 源代码选择了行尾风格（大括号不换行）</li></ul>',68),p=[i];function o(d,u){return s(),e("div",null,p)}const k=n(c,[["render",o],["__file","1-3.基本语法.html.vue"]]);export{k as default};
