import{_ as n,o as a,c as s,e as p}from"./app-9c74391d.js";const e={},t=p(`<h2 id="i-面向对象" tabindex="-1"><a class="header-anchor" href="#i-面向对象" aria-hidden="true">#</a> Ⅰ. 面向对象</h2><h4 id="_1-面向过程与面向对象" tabindex="-1"><a class="header-anchor" href="#_1-面向过程与面向对象" aria-hidden="true">#</a> 1. 面向过程与面向对象</h4><ul><li>面向对象：OOP，Object Oriented Programming</li><li>面向过程：Procedure Oriented Programming<br> 二者都是一种思想，面向对象是相对于面向过程而言的。面向过程，强调的是功能行为，以函数为最小单位，考虑怎么做。面向对象，将功能封装进对象，强调具备了功能的对象，以类/对象为最小单位，考虑谁来做。</li></ul><p>面向对象更加强调运用人类在日常的思维逻辑中采用的思想方法与原则，如抽象、分类、继承、聚合、多态等。</p><h4 id="_2-面向对象的三大特征" tabindex="-1"><a class="header-anchor" href="#_2-面向对象的三大特征" aria-hidden="true">#</a> 2. 面向对象的三大特征</h4><ul><li>封装 (Encapsulation)</li><li>继承 (Inheritance)</li><li>多态 (Polymorphism)</li></ul><h4 id="_3-面向对象的思想概述" tabindex="-1"><a class="header-anchor" href="#_3-面向对象的思想概述" aria-hidden="true">#</a> 3. 面向对象的思想概述</h4><ul><li>程序员从面向过程的执行者转化成了面向对象的指挥者</li><li>面向对象分析方法分析问题的思路和步骤： <ul><li>根据问题需要，选择问题所针对的现实世界中的实体。</li><li>从实体中寻找解决问题相关的属性和功能，这些属性和功能就形成了概念世界中的类。</li><li>把抽象的实体用计算机语言进行描述，形成计算机世界中类的定义。即借助某种程序语言，把类构造成计算机能够识别和处理的数据结构。</li><li>将类实例化成计算机世界中的对象。对象是计算机世界中解决问题的最终工具。</li></ul></li></ul><h4 id="_4-java中的万物皆对象" tabindex="-1"><a class="header-anchor" href="#_4-java中的万物皆对象" aria-hidden="true">#</a> 4. Java中的万物皆对象</h4><p>在Java语言范畴中，我们都将功能、结构等封装到类中，通过类的实例化，来调用具体的功能结构</p><p>在java中，万物皆对象，所有代码都要归属为一个对象；包括涉及到Java语言与前端Html（element对象）、后端的数据库交互时，前后端的结构在Java层面交互时，都体现为类、对象。</p><h2 id="ii-类与对象" tabindex="-1"><a class="header-anchor" href="#ii-类与对象" aria-hidden="true">#</a> Ⅱ. 类与对象</h2><h4 id="_1-什么是类与对象" tabindex="-1"><a class="header-anchor" href="#_1-什么是类与对象" aria-hidden="true">#</a> 1. 什么是类与对象</h4><p>类(Class)和对象(Object)是面向对象的核心概念。</p><ul><li>类是对一类事物的描述，是抽象的、概念上的定义</li><li>对象是实际存在的该类事物的每个个体，因而也称为实例(instance)。万事万物皆对象；</li><li>类 = 抽象概念的人；对象 = 实实在在的某个人</li><li>面向对象程序设计的重点是 类的设计；类的设计，其实就是类的成员的设计</li></ul><h4 id="_2-类与引用数据类型" tabindex="-1"><a class="header-anchor" href="#_2-类与引用数据类型" aria-hidden="true">#</a> 2. 类与引用数据类型</h4><p>所有类都是引用数据类型，类型就是类名。</p><p>String数据类型本质就是java内部定义的String类。</p><h4 id="_3-类与类的成员" tabindex="-1"><a class="header-anchor" href="#_3-类与类的成员" aria-hidden="true">#</a> 3. 类与类的成员</h4><ul><li>成员变量（field）：类拥有的属性</li><li>方法（method）：类可以做的事（行为）</li></ul><h4 id="_4-创建类" tabindex="-1"><a class="header-anchor" href="#_4-创建类" aria-hidden="true">#</a> 4. 创建类</h4><p>一个文件中可以创建多个类（只能有一个带public的），但是开发中，通常一个文件中只有一个类。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span> <span class="token comment">//class关键字  类名</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span> <span class="token comment">//属性</span>
    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//属性，定义并初始化</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//方法</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;吃饭&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">talk</span><span class="token punctuation">(</span><span class="token class-name">String</span> language<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//带参数的方法</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">pringln</span><span class="token punctuation">(</span><span class="token string">&quot;说&quot;</span><span class="token operator">+</span>language<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-创建对象" tabindex="-1"><a class="header-anchor" href="#_5-创建对象" aria-hidden="true">#</a> 5. 创建对象</h4><p>根据类创建类的对象，我们使用类的成员时是通过具体的对象使用的。</p><p>创建类的对象 = 类的实例化 = 实例化类</p><p>语法：类名 对象名 = new 类名(可选参数);</p><p>创建玩对象后，就可以使用“对象名. 对象成员 ”的方式访问对象成员（包括属性和 方法）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//在程序入口中调用类</span>
        <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//使用对象调用属性：对象.属性名</span>
        p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Tom&quot;</span> <span class="token comment">//为属性赋值</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取属性的值</span>
        
        <span class="token comment">//使用对象调用方法：对象.方法名</span>
        p1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        p1<span class="token punctuation">.</span><span class="token function">talk</span><span class="token punctuation">(</span><span class="token string">&quot;English&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-类和对象的使用" tabindex="-1"><a class="header-anchor" href="#_6-类和对象的使用" aria-hidden="true">#</a> 6. 类和对象的使用</h4><ul><li>创建类：设计类的成员</li><li>创建类的对象</li><li>通过对象调用属性和方法</li></ul><h4 id="_7-类与多个对象" tabindex="-1"><a class="header-anchor" href="#_7-类与多个对象" aria-hidden="true">#</a> 7. 类与多个对象</h4><p>如果创建了一个类的多个对象，则每个对象都独立的拥有一套类的属性（非static的）。</p><p>意味着：如果我们修改一个对象的属性a，则不影响另外一个对象属性a的值。</p><h4 id="_8-对象间的赋值" tabindex="-1"><a class="header-anchor" href="#_8-对象间的赋值" aria-hidden="true">#</a> 8. 对象间的赋值</h4><p>对象间进行赋值时，是把保存对象的内存地址赋给了对方，因此两个对象指向同一份内存地址，即执行同一个对象实体。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Person</span> p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span>
p2<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-类的访问机制" tabindex="-1"><a class="header-anchor" href="#_9-类的访问机制" aria-hidden="true">#</a> 9. 类的访问机制</h4><ul><li>在一个类中的访问机制： 类中的方法可以直接访问类中的成员变量 。 <ul><li>例外：static 方法访问非 static， ， 编译不通过 。</li></ul></li><li>在不同类中的访问机制： 先创建要访问类的对象 ， 再用对象访问类中定义的成员</li></ul><h4 id="_10-补充说明" tabindex="-1"><a class="header-anchor" href="#_10-补充说明" aria-hidden="true">#</a> 10. 补充说明</h4><ul><li>java内置类：我们是通过创建类和方法来完成一些功能的，java内置了丰富的类，帮我们完成了很多常见的功能。</li><li>属性的默认值：当用对象调用未赋值的属性时，属性会有个默认值，这个默认值跟数组中元素的默认值一样。</li></ul><h2 id="iii-特殊形式对象" tabindex="-1"><a class="header-anchor" href="#iii-特殊形式对象" aria-hidden="true">#</a> Ⅲ. 特殊形式对象</h2><h4 id="_1-对象数组" tabindex="-1"><a class="header-anchor" href="#_1-对象数组" aria-hidden="true">#</a> 1. 对象数组</h4><p>数组可以是任何类型：基本数据类型、引用类型都可以。对象就是引用类型的，具体类型就是类名，例如：String数据类型就是引用类型，String是java的一个内置类。</p><p>创建对象数组：假设有Person类，我们需要一次性创建20个Person类的实例、</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Person</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//直接声明了20个对象</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>p1<span class="token punctuation">.</span>legnth<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    p1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//循环创建对象</span>
    p1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>age<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//为age赋值</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上，此时内存中有1个数组，数组中包含了20个元素，每个元素是Person类型，但是只是null，并不是对象，具体对象还需要我们进一步创建（初始化），可以使用for循环创建。</p><h4 id="_2-匿名对象" tabindex="-1"><a class="header-anchor" href="#_2-匿名对象" aria-hidden="true">#</a> 2. 匿名对象</h4><p>我们创建的对象，没有显式的赋给一个变量名，即为匿名对象。</p><ul><li>特征：匿名对象只能调用一次</li><li>使用场景：对象作为函数的参数</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">maina</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//创建对象，不赋值，直接使用，执行完就失效</span>
        <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span> <span class="token comment">//1; </span>
        
        <span class="token comment">//应用场景：对象作为方法的参数</span>
        <span class="token class-name">HelloGay</span> hg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloGay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        hg<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">HelloGay</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token class-name">Phone</span> phone<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doIt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Gay</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token char">&#39;Hello&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doIt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Do&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,51),c=[t];function o(l,i){return a(),s("div",null,c)}const k=n(e,[["render",o],["__file","2-1.类与对象.html.vue"]]);export{k as default};
