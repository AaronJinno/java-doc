import{_ as n,o as a,c as s,e}from"./app-acb3e2bc.js";const t={},p=e(`<h2 id="i-第三方bean属性" tabindex="-1"><a class="header-anchor" href="#i-第三方bean属性" aria-hidden="true">#</a> Ⅰ. 第三方Bean属性</h2><h4 id="_1-configurationproperties" tabindex="-1"><a class="header-anchor" href="#_1-configurationproperties" aria-hidden="true">#</a> 1. @ConfigurationProperties</h4><p>yaml配置项的主流配置方式是：将一组数据封装到一个对象中，使用的时候加载该对象，通过该对象读取所需配置。</p><p>@ConfigurationProperties注解就是用来指定加载的数据(配置文件中的哪个配置项)。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//file:config/JDBCDateSource：该类用来创建数据对象</span>

<span class="token annotation punctuation">@Component</span><span class="token comment">//定义为spring管控的bean</span>
<span class="token comment">//指定加载的数据(配置文件中的哪个配置项):datasource</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;datasource&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCDateSource</span> <span class="token punctuation">{</span>
    <span class="token comment">//属性和要封装的数据一一对应</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> driver<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>getter<span class="token operator">/</span>setter<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在需要使用这组配置的类中，注入该数据对象，就可以动态获取配置的数据了。</p><h4 id="_2-configurationproperties绑定第三方bean" tabindex="-1"><a class="header-anchor" href="#_2-configurationproperties绑定第三方bean" aria-hidden="true">#</a> 2. @ConfigurationProperties绑定第三方Bean</h4><p>@ConfigurationProperties注解是写在类定义的上方，而第三方开发的bean源代码不是你自己书写的，你也不可能到源代码中去添加@ConfigurationProperties注解，不过@ConfigurationProperties注解依然可以为第三方Bean进行属性绑定，只是格式不同。</p><h5 id="_2-1-将第三方类加入ioc" tabindex="-1"><a class="header-anchor" href="#_2-1-将第三方类加入ioc" aria-hidden="true">#</a> 2.1 将第三方类加入IOC</h5><div class="hint-container tip"><p class="hint-container-title">Spring知识回顾</p><p>在方法上加@Bean注解，该方法的返回值就会加入IOC管理。</p></div><p>以在启动类中，获取德鲁伊对象为例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootApplication</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">DruidDataSource</span> <span class="token function">datasource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">DruidDataSource</span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ds<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-2-在yml配置文件中定义要绑定的属性" tabindex="-1"><a class="header-anchor" href="#_2-2-在yml配置文件中定义要绑定的属性" aria-hidden="true">#</a> 2.2 在yml配置文件中定义要绑定的属性</h5><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">datasource</span><span class="token punctuation">:</span>
  <span class="token key atrule">driverClassName</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-3-用-configurationproperties注解为第三方bean进行属性绑定" tabindex="-1"><a class="header-anchor" href="#_2-3-用-configurationproperties注解为第三方bean进行属性绑定" aria-hidden="true">#</a> 2.3 用@ConfigurationProperties注解为第三方bean进行属性绑定</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;datasource&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">DruidDataSource</span> <span class="token function">datasource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">DruidDataSource</span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ds<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-4-总结" tabindex="-1"><a class="header-anchor" href="#_2-4-总结" aria-hidden="true">#</a> 2.4 总结</h5><p>和自定义Bean的属性绑定操作类似，只不过@ConfigurationProperties注解是添加在方法上的。</p><h4 id="_3-enableconfigurationproperties" tabindex="-1"><a class="header-anchor" href="#_3-enableconfigurationproperties" aria-hidden="true">#</a> 3. @EnableConfigurationProperties</h4><p>该注解是作用在配置类上的，属性值是个数组，用来标注要使用@ConfigurationProperties注解绑定属性的类。</p><p>该注解的意义就是对绑定属性的类进行统一的管理。</p><h5 id="_3-1-配置类统一管理" tabindex="-1"><a class="header-anchor" href="#_3-1-配置类统一管理" aria-hidden="true">#</a> 3.1 配置类统一管理</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span> <span class="token comment">//配置类：同时也是SpringBoot启动类</span>
<span class="token comment">//标注ServerConfig类使用@ConfigurationProperties注解绑定属性</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">ServerConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Springboot13ConfigurationApplication</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-2-使用-configurationproperties的类" tabindex="-1"><a class="header-anchor" href="#_3-2-使用-configurationproperties的类" aria-hidden="true">#</a> 3.2 使用@ConfigurationProperties的类</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//该类不能再声明为bean,统一管理时，已经将其自动声明为bean了</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;servers&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerConfig</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> ipAddress<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> port<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> timeout<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-debug" tabindex="-1"><a class="header-anchor" href="#_4-debug" aria-hidden="true">#</a> 4. debug</h4><p>使用@ConfigurationProperties注解时，可能会出现一个提示信息，只需要添加一个坐标此提醒就消失了。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-宽松绑定" tabindex="-1"><a class="header-anchor" href="#_5-宽松绑定" aria-hidden="true">#</a> 5. 宽松绑定</h4><ul><li>配置文件：在进行属性绑定时，配置文件中的命名格式与变量名的命名格式可以进行格式上的最大化兼容。</li><li>书写前缀：prefix的值只支持烤肉串书写模式（全小写或用-分割）</li><li>@Value：该注解不支持宽松绑定</li></ul><h5 id="_5-1-示例1-宽松绑定" tabindex="-1"><a class="header-anchor" href="#_5-1-示例1-宽松绑定" aria-hidden="true">#</a> 5.1 示例1：宽松绑定</h5><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>//配置文件中的servers.ipAddress属性各种书写模式
<span class="token key atrule">servers</span><span class="token punctuation">:</span>
  <span class="token key atrule">ipAddress</span><span class="token punctuation">:</span> 192.168.0.2       <span class="token comment"># 驼峰模式</span>
  <span class="token key atrule">ip_address</span><span class="token punctuation">:</span> 192.168.0.2      <span class="token comment"># 下划线模式</span>
  <span class="token key atrule">ip-address</span><span class="token punctuation">:</span> 192.168.0.2      <span class="token comment"># 烤肉串模式</span>
  <span class="token key atrule">IP_ADDRESS</span><span class="token punctuation">:</span> 192.168.0.2      <span class="token comment"># 常量模式</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;servers&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerConfig</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> ipAddress<span class="token punctuation">;</span> <span class="token comment">//无论配置文件中IPAddress哪种书写模式，这里都生效</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-2-示例2-prefix" tabindex="-1"><a class="header-anchor" href="#_5-2-示例2-prefix" aria-hidden="true">#</a> 5.2 示例2：prefix</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dataSource&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">DruidDataSource</span> <span class="token function">datasource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">DruidDataSource</span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ds<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>报错：Configuration property name &#39;dataSource&#39; is not valid:Invalid characters: &#39;S&#39;</p><h2 id="ii-计量单位" tabindex="-1"><a class="header-anchor" href="#ii-计量单位" aria-hidden="true">#</a> Ⅱ. 计量单位</h2><h4 id="_1-属性的单位" tabindex="-1"><a class="header-anchor" href="#_1-属性的单位" aria-hidden="true">#</a> 1. 属性的单位</h4><p>配置文件中的属性，有些是有单位的，如时间和空间的属性。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">servers</span><span class="token punctuation">:</span>
  <span class="token key atrule">ip-address</span><span class="token punctuation">:</span> 192.168.0.1 
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">2345</span>
  <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">200</span>  <span class="token comment"># 时间属性，</span>
  <span class="token key atrule">datasize</span><span class="token punctuation">:</span> 20MB <span class="token comment"># 空间属性</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-时间单位-duration" tabindex="-1"><a class="header-anchor" href="#_2-时间单位-duration" aria-hidden="true">#</a> 2. 时间单位：Duration</h4><p>Duration类：JDK8新增，表示时间间隔，可以通过@DurationUnit注解描述时间单位</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;servers&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@DurationUnit</span><span class="token punctuation">(</span><span class="token class-name">ChronoUnit</span><span class="token punctuation">.</span><span class="token constant">HOURS</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Duration</span> serverTimeOut<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-空间单位-datesize" tabindex="-1"><a class="header-anchor" href="#_3-空间单位-datesize" aria-hidden="true">#</a> 3. 空间单位：DateSize</h4><p>DateSize类：JDK8新增，表示存储空间，可以通过@DataSizeUnit注解描述存储空间单位。</p><p>注意：空间属性在配置文件中是可以直接指定单位的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;servers&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@DataSizeUnit</span><span class="token punctuation">(</span><span class="token class-name">DataUnit</span><span class="token punctuation">.</span><span class="token constant">MEGABYTES</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">DataSize</span> dataSize<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iii-数据校验" tabindex="-1"><a class="header-anchor" href="#iii-数据校验" aria-hidden="true">#</a> Ⅲ. 数据校验</h2><p>配置文件中的属性值，可能跟预想的不一样，比如要配置Int类型的数据，确给了个String类型的值。<br> 为了避免这种问题，就要用到属性校验了。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>仅做了解，配置很重要，肯定要遵守规范书写的。</p></div><h4 id="_1-导入依赖" tabindex="-1"><a class="header-anchor" href="#_1-导入依赖" aria-hidden="true">#</a> 1. 导入依赖</h4><p>JAVAEE的JSR303规范中给出了具体的数据校验标准，开发者可以根据自己的需要选择对应的校验框架。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--1.导入JSR303规范--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>validation-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!--使用hibernate框架提供的校验器做实现--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.hibernate.validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hibernate-validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-validated" tabindex="-1"><a class="header-anchor" href="#_2-validated" aria-hidden="true">#</a> 2. @Validated</h4><p>在需要开启校验功能的类上使用注解@Validated开启校验功能。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;servers&quot;</span><span class="token punctuation">)</span>
<span class="token comment">//开启对当前bean的属性注入校验</span>
<span class="token annotation punctuation">@Validated</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerConfig</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-对具体的字段设置校验规则" tabindex="-1"><a class="header-anchor" href="#_3-对具体的字段设置校验规则" aria-hidden="true">#</a> 3. 对具体的字段设置校验规则</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;servers&quot;</span><span class="token punctuation">)</span>
<span class="token comment">//开启对当前bean的属性注入校验</span>
<span class="token annotation punctuation">@Validated</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerConfig</span> <span class="token punctuation">{</span>
    <span class="token comment">//设置具体的规则</span>
    <span class="token annotation punctuation">@Max</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">8888</span><span class="token punctuation">,</span>message <span class="token operator">=</span> <span class="token string">&quot;最大值不能超过8888&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">202</span><span class="token punctuation">,</span>message <span class="token operator">=</span> <span class="token string">&quot;最小值不能低于202&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> port<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,58),i=[p];function o(c,l){return a(),s("div",null,i)}const u=n(t,[["render",o],["__file","2-2.高级配置.html.vue"]]);export{u as default};
