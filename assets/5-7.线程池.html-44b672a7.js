import{_ as n,o as s,c as a,e}from"./app-2f916dc9.js";const t={},p=e(`<h2 id="i-callable接口" tabindex="-1"><a class="header-anchor" href="#i-callable接口" aria-hidden="true">#</a> Ⅰ. Callable接口</h2><p>实现Callable接口是JDK5.0新增的一种方式，他比实现Runnable接口更强大。</p><h4 id="_1-callable接口介绍" tabindex="-1"><a class="header-anchor" href="#_1-callable接口介绍" aria-hidden="true">#</a> 1. Callable接口介绍</h4><p>通过实现Callable接口，并重写call()来创建多线程，相当于Runnable接口，Callable接口更加强大，有如下优势：</p><ul><li>call()相当于run()，可以有返回值</li><li>call()可以抛出异常</li><li>支持泛型</li></ul><h4 id="_2-future接口介绍" tabindex="-1"><a class="header-anchor" href="#_2-future接口介绍" aria-hidden="true">#</a> 2. Future接口介绍</h4><p>Callable接口的实例，需要借助FutureTask类，进行其他操作，比如：获取返回结果</p><ul><li>FutrueTask是Futrue接口的唯一的实现类</li><li>可以对具体Runnable、Callable任务的执行结果进行取消、查询是否完成、获取结果等。</li><li>FutureTask 同时实现了Runnable, Future接口。它既可以作为Runnable被线程执行，又可以作为Future得到Callable的返回值</li></ul><h4 id="_3-使用callable新增线程的步骤" tabindex="-1"><a class="header-anchor" href="#_3-使用callable新增线程的步骤" aria-hidden="true">#</a> 3. 使用Callable新增线程的步骤</h4><ul><li>①创建一个实现Callable的实现类</li><li>②实现call方法，将此线程需要执行的操作声明在call()中</li><li>③创建Callable接口实现类的对象</li><li>④将此Callable接口实现类的对象作为参数传递到FutureTask构造器中，创建FutureTask的对象</li><li>⑤将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象，并调用start()</li><li>⑥获取Callable中call方法的返回值：get()返回值即为FutureTask构造器参数Callable实现类重写的call()的返回值。</li></ul><h4 id="_4-示例" tabindex="-1"><a class="header-anchor" href="#_4-示例" aria-hidden="true">#</a> 4. 示例</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">1.</span><span class="token comment">//创建一个实现Callable的实现类</span>
<span class="token keyword">class</span> <span class="token class-name">NumSum</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token number">2.</span><span class="token comment">//实现call方法，将此线程需要执行的操作声明在call()中</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;#&quot;</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CallableTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token number">3.</span><span class="token comment">//创建Callable接口实现类的对象</span>
        <span class="token class-name">NumSum</span> ns <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NumSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token number">5.</span><span class="token comment">//将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象</span>
        <span class="token class-name">FutureTask</span> ft <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token punctuation">(</span>ns<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ft<span class="token punctuation">)</span><span class="token punctuation">;</span>
        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用start方法，开启线程</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token number">6.</span><span class="token comment">//获取Callable中call方法的返回值</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;总和为&quot;</span><span class="token operator">+</span>ft<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-线程池" tabindex="-1"><a class="header-anchor" href="#ii-线程池" aria-hidden="true">#</a> Ⅱ. 线程池</h2><h4 id="_1-线程池介绍" tabindex="-1"><a class="header-anchor" href="#_1-线程池介绍" aria-hidden="true">#</a> 1. 线程池介绍</h4><p>开发中，框架用的就是线程池，我们只管用就行</p><ul><li>背景：经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，对性能影响很大。</li><li>思路：提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。类似生活中的公共交通工具。</li></ul><h4 id="_2-线程池的优点" tabindex="-1"><a class="header-anchor" href="#_2-线程池的优点" aria-hidden="true">#</a> 2. 线程池的优点</h4><ul><li>提高响应速度（减少了创建新线程的时间）</li><li>降低资源消耗（重复利用线程池中线程，不需要每次都创建）</li><li>便于线程管理 <ul><li>corePoolSize：核心池的大小</li><li>maximumPoolSize：最大线程数</li><li>keepAliveTime：线程没有任务时最多保持多长时间后会终止</li><li>…</li></ul></li></ul><h4 id="_3-excutorservice-线程池接口" tabindex="-1"><a class="header-anchor" href="#_3-excutorservice-线程池接口" aria-hidden="true">#</a> 3. ExcutorService：线程池接口</h4><p>常见子类ThreadPoolExecutor</p><ul><li><code>void execute(Runnable command)</code> ：执行任务/命令，没有返回值，一般用来执行Runnable</li><li><code>&lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task)</code>：执行任务，有返回值，一般用来执行Callable</li><li><code>void shutdown()</code> ：关闭连接池</li></ul><h4 id="_4-executors-线程池工具类、工厂类" tabindex="-1"><a class="header-anchor" href="#_4-executors-线程池工具类、工厂类" aria-hidden="true">#</a> 4. Executors：线程池工具类、工厂类</h4><p>用于创建并返回不同类型的线程池</p><ul><li>Executors.newCachedThreadPool()：创建一个可根据需要创建新线程的线程池</li><li>Executors.newFixedThreadPool(n); 创建一个可重用固定线程数的线程池</li><li>Executors.newSingleThreadExecutor() ：创建一个只有一个线程的线程池</li><li>Executors.newScheduledThreadPool(n)：创建一个线程池，它可安排在给定延迟后运行命令或者定期地执行。</li></ul><h4 id="_5-使用线程池步骤" tabindex="-1"><a class="header-anchor" href="#_5-使用线程池步骤" aria-hidden="true">#</a> 5. 使用线程池步骤</h4><ul><li>创建线程池：需要用到Executors工厂类</li><li>可选：设置线程池属性，需要使用ExecutorService接口的子类</li><li>指定线程的操作：使用execute或submit进行操作，需要提供实现Runnable接口或Callable接口实现类的对象做参数</li><li>关闭连接池</li></ul><h4 id="_6-示例" tabindex="-1"><a class="header-anchor" href="#_6-示例" aria-hidden="true">#</a> 6. 示例</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPool</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token number">1.</span><span class="token comment">//创建线程池：使用创建指定线程数量的方法。</span>
        <span class="token class-name">ExecutorService</span> service <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token number">2.</span><span class="token comment">//将线程池接口类型转为接口的子类类型，方便设置线程属性</span>
        <span class="token class-name">ThreadPoolExecutor</span> real_service <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">)</span> service<span class="token punctuation">;</span>
        real_service<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token number">3.</span><span class="token comment">//执行指定的线程的操作</span>
        real_service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrintSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token number">4.</span><span class="token comment">//关闭连接池</span>
        real_service<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">PrintSum</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token comment">//线程需要完成的操作</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;@&quot;</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28),l=[p];function c(o,i){return s(),a("div",null,l)}const r=n(t,[["render",c],["__file","5-7.线程池.html.vue"]]);export{r as default};
