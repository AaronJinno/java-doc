import{_ as n,o as a,c as s,e as t}from"./app-e2ee9004.js";const e={},l=t(`<p>这里说的任务系统指的是定时任务。定时任务是开发中必不可少的组成部分，如长周期业务数据的计算、监控类任务和定时触发的活动等，都离不开任务系统。</p><h2 id="timer" tabindex="-1"><a class="header-anchor" href="#timer" aria-hidden="true">#</a> Timer</h2><p>Timer是Java 内置的一个定时器工具类，很小巧，用来在一个后台线程计划执行指定任务。它可以安排任务“执行一次”或者定期“执行多次”。</p><p>Timer 可以做简单的定时任务，这里仅作了解。</p><h4 id="_1-主要方法" tabindex="-1"><a class="header-anchor" href="#_1-主要方法" aria-hidden="true">#</a> 1. 主要方法</h4><ul><li>schedule(TimerTask task, Date time)：安排在 &quot;指定的时间&quot; 执行 指定的任务。（只执行一次）</li><li>schedule(TimerTask task,long delay)：安排在指定延迟后执行指定的任务</li><li>schedule(TimerTask task, Date firstTime , long period)：安排指定的任务在 &quot;指定的时间 &quot; 开始进行 &quot;重复&quot; 的固定延迟执行</li><li>schedule(TimerTask task,long delay,long period)：安排指定的任务指定的延迟后开始进行重复的固定延迟执行．</li><li>scheduleAtFixedRate(TimerTask task,Date firstTime,long period)：安排指定的任务在指定的时间开始进行重复的固定速率执行．</li><li>scheduleAtFixedRate(TimerTask task,long delay,long period)：安排指定的任务在指定的延迟后开始进行重复的固定速率执行．</li><li>Timer.cancal()：终止此计时器，丢弃所有当前已安排的任务。</li><li>Timer.purge()：从此计时器的任务队列中移除所有已取消的任务。</li><li>TimerTask.cancal()：把当前任务取消</li></ul><h4 id="_2-简单示例" tabindex="-1"><a class="header-anchor" href="#_2-简单示例" aria-hidden="true">#</a> 2. 简单示例</h4><p>注意：定时任务是以来Tomcat环境的，只有Tomcat启动了，定时任务的线程才能一直被调度，被执行。如果没有启动SpringBoot，或在test（SpringBootTest）中进行测试，不会正常执行定时任务。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Timer</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">TimerTask</span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimerTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;每秒一次：酷&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Timer类用来创建定时器，Timer的schedule方法用来执行定时任务，第一个参数是TimerTask，TimerTask是要执行的定时任，该类是个抽象类，需要实现run方法，run方法内的代码就是要定时执行的任务。</p><h4 id="_3-timer的缺陷" tabindex="-1"><a class="header-anchor" href="#_3-timer的缺陷" aria-hidden="true">#</a> 3. Timer的缺陷</h4><ul><li>Timer底层是使用单线程来处理多个Timer任务，这意味着所有任务实际上都是串行执行，前一个任务的延迟会影响到之后的任务的执行。</li><li>由于单线程的缘故，一旦某个定时任务在运行时，产生未处理的异常，那么不仅当前这个线程会停止，所有的定时任务都会停止。</li><li>Timer任务执行是依赖于系统绝对时间，系统时间变化会导致执行计划的变更。</li></ul><h2 id="quartz" tabindex="-1"><a class="header-anchor" href="#quartz" aria-hidden="true">#</a> Quartz</h2><div class="hint-container warning"><p class="hint-container-title">注意</p><p>被task取代了，不用学</p></div><h2 id="task" tabindex="-1"><a class="header-anchor" href="#task" aria-hidden="true">#</a> task</h2><p>Spring Task是一个轻量级的定时任务框架，用起来非常简洁。</p><h4 id="_1-依赖" tabindex="-1"><a class="header-anchor" href="#_1-依赖" aria-hidden="true">#</a> 1. 依赖</h4><p>spring task 是spring自主开发的框架，不需要依赖其他额外的包。</p><h4 id="_2-开启定时任务功能" tabindex="-1"><a class="header-anchor" href="#_2-开启定时任务功能" aria-hidden="true">#</a> 2. 开启定时任务功能</h4><p>使用注解 <code>@EnableScheduling</code> 在引导类上开启定时任务功能.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token comment">//开启定时任务功能</span>
<span class="token annotation punctuation">@EnableScheduling</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Springboot22TaskApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Springboot22TaskApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-定义定时任务" tabindex="-1"><a class="header-anchor" href="#_3-定义定时任务" aria-hidden="true">#</a> 3. 定义定时任务</h4><p>定义一个Bean，在对应要定时执行的操作上方，使用注解@Scheduled定义执行的时间，执行时间的描述方式是 <code>cron表达式</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBean</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">&quot;0/1 * * * * ?&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//Thread.currentThread().getName()用来获取线程名</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>触发任务：不用做任何额外的触发配置，该类加上了@Component注解，启动Spring Boot后，该类会被加入Bean管理，同时Spring通过@Scheduled注解自动创建了定时任务。</p><h4 id="_4-yml相关配置" tabindex="-1"><a class="header-anchor" href="#_4-yml相关配置" aria-hidden="true">#</a> 4. yml相关配置</h4><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">task</span><span class="token punctuation">:</span>
   	<span class="token key atrule">scheduling</span><span class="token punctuation">:</span>
      <span class="token key atrule">pool</span><span class="token punctuation">:</span>
       	<span class="token key atrule">size</span><span class="token punctuation">:</span> <span class="token number">1</span>	<span class="token comment"># 任务调度线程池大小 默认 1</span>
      <span class="token key atrule">thread-name-prefix</span><span class="token punctuation">:</span> ssm_ <span class="token comment"># 调度线程名称前缀 默认 scheduling，用于调试时区分线程名    </span>
        <span class="token key atrule">shutdown</span><span class="token punctuation">:</span>
          <span class="token key atrule">await-termination</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>		<span class="token comment"># 线程池关闭时等待所有任务完成</span>
          <span class="token key atrule">await-termination-period</span><span class="token punctuation">:</span> 10s	<span class="token comment"># 调度线程关闭前最大等待时间，确保最后一定关闭</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-cron表达式" tabindex="-1"><a class="header-anchor" href="#_5-cron表达式" aria-hidden="true">#</a> 5. cron表达式</h4><div class="hint-container tip"><p class="hint-container-title">提示</p><p>嫌麻烦可以搞个core表达式生成器，或者使用其他人提供的core表达式生成工具。</p></div><p><code>@Scheduled(cron = &quot;* * * * * *&quot;)</code> core 表达式详解：</p><p><code>{ 秒数} {分钟} {小时} {日期} {月份} {星期} {年份(可为空)}</code></p><table><thead><tr><th style="text-align:left;">字段</th><th style="text-align:left;">是否必填</th><th style="text-align:left;">允许值</th><th style="text-align:left;">允许的特殊字符</th></tr></thead><tbody><tr><td style="text-align:left;">秒（Seconds）</td><td style="text-align:left;">y</td><td style="text-align:left;">0~59的整数</td><td style="text-align:left;">, - * / 四个字符</td></tr><tr><td style="text-align:left;">分（Minutes）</td><td style="text-align:left;">y</td><td style="text-align:left;">0~59的整数</td><td style="text-align:left;">, - * / 四个字符</td></tr><tr><td style="text-align:left;">小时（Hours）</td><td style="text-align:left;">y</td><td style="text-align:left;">0~23的整数</td><td style="text-align:left;">, - * / 四个字符</td></tr><tr><td style="text-align:left;">日期（DayofMonth）</td><td style="text-align:left;">y</td><td style="text-align:left;">1~31的整数（但是你需要考虑你月的天数）</td><td style="text-align:left;">,- * / ? L W C 八个字符</td></tr><tr><td style="text-align:left;">月份（Month）</td><td style="text-align:left;">y</td><td style="text-align:left;">1~12的整数或者 JAN-DEC</td><td style="text-align:left;">, - * / 四个字符</td></tr><tr><td style="text-align:left;">星期（DayofWeek）</td><td style="text-align:left;">y</td><td style="text-align:left;">1~7的整数或者 SUN-SAT （1=SUN）</td><td style="text-align:left;">, - * / ? L C # 八个字符</td></tr><tr><td style="text-align:left;">年（Year）</td><td style="text-align:left;">n(可选，留空)</td><td style="text-align:left;">1970~2099</td><td style="text-align:left;">, - * / 四个字符</td></tr></tbody></table><p>每一个域都使用数字，但还可以出现如下特殊字符，它们的含义是：</p><ul><li><code>,</code>：表示列出枚举值。例如：在Minutes域使用5,20，则意味着在5和20分每分钟触发一次。</li><li><code>-</code>：表示范围。例如在Minutes域使用5-20，表示从5分到20分钟每分钟触发一次。</li><li><code>*</code>：表示匹配该域的任意值。假如在Minutes域使用*, 即表示每分钟都会触发事件。</li><li><code>/</code>：表示步长，在初始值后累加一次步长触发一次。例如在Minutes域使用5/20,则意味着在5分钟时触发一次，而5+20分钟，5+20+20分钟等分别触发一次。</li><li><code>?</code>：只能用在DayofMonth和DayofWeek两个域。表示不关注该域，防止DayofMonth和DayofWeek会相互影响</li><li><code>#</code>：用于确定每个月第几个星期几，只能出现在DayofWeek域。例如在4#2，表示某月的第二个星期三。</li></ul><h4 id="_6-spring-task缺陷" tabindex="-1"><a class="header-anchor" href="#_6-spring-task缺陷" aria-hidden="true">#</a> 6. Spring Task缺陷</h4><p>不支持持久化，也没有推出官方的分布式集群模式。</p><p>若想实现持久化或分布式集群，需要手动编码实现。</p>`,37),i=[l];function p(c,o){return a(),s("div",null,i)}const u=n(e,[["render",p],["__file","5-3.任务.html.vue"]]);export{u as default};
