import{_ as n,o as a,c as s,e}from"./app-d25397b5.js";const t="/java-doc/img/frame/springboot/5-2-1.png",p="/java-doc/img/frame/springboot/5-2-2.jpg",c={},l=e('<h2 id="缓存介绍" tabindex="-1"><a class="header-anchor" href="#缓存介绍" aria-hidden="true">#</a> 缓存介绍</h2><p>缓存的作用主要有两个</p><ul><li>储存数据库中的数据，降低数据库的读取</li><li>储存临时数据（如验证码）</li></ul><h4 id="_1-缓存是什么" tabindex="-1"><a class="header-anchor" href="#_1-缓存是什么" aria-hidden="true">#</a> 1. 缓存是什么</h4><p>缓存是一种介于数据永久存储介质与应用程序之间的数据临时存储介质，使用缓存可以有效的减少低速数据读取过程的次数（例如磁盘IO），提高系统性能。此外缓存不仅可以用于提高永久性存储介质的数据读取效率，还可以提供临时的数据存储空间。</p><h4 id="_2-缓存数据库数据" tabindex="-1"><a class="header-anchor" href="#_2-缓存数据库数据" aria-hidden="true">#</a> 2. 缓存数据库数据</h4><p>大部分应用的主要任务就是处理数据，尤其是读取数据，同时数据库的性能往往是服务器的瓶颈。</p><p>为了解决访问数据库的瓶颈，常会在应用程序与数据库之间建立一种临时的数据存储机制，该区域中的数据在内存中保存，读写速度较快，可以有效解决数据库访问效率低下的问题。这一块临时存储数据的区域就是缓存。</p><figure><img src="'+t+`" alt="5-2-1" tabindex="0" loading="lazy"><figcaption>5-2-1</figcaption></figure><ul><li>使用缓存前：应用 -&gt;直接与数据库交互</li><li>使用缓存后：应用与缓存交互，缓存与数据库交互 <ul><li>缓存中的数据在内存中，可以反复使用，效率高</li></ul></li></ul><h4 id="_3-缓存临时数据" tabindex="-1"><a class="header-anchor" href="#_3-缓存临时数据" aria-hidden="true">#</a> 3. 缓存临时数据</h4><p>有些数据是临时的，比如验证码，这类数据没必要储存到数据库，而是选择存入缓存。</p><p>尤其是一些实时生成的数据，如坐标，也会存入缓存。</p><h4 id="_4-springboot缓存方案" tabindex="-1"><a class="header-anchor" href="#_4-springboot缓存方案" aria-hidden="true">#</a> 4. SpringBoot缓存方案</h4><p>springboot技术提供有内置的缓存解决方案，可以帮助开发者快速开启缓存技术，并使用缓存技术进行数据的快速操作。</p><p>SpringBoot提供的缓存技术除了提供默认的缓存方案，还可以对其他缓存技术进行整合，统一接口，方便缓存技术的开发与管理，如下：包含了多种缓存技术。</p><ul><li>Simple（默认）</li><li>Ehcache（常用）</li><li>Redis（常用）</li><li>Memcached（常用，但没被整合）</li><li>Generic</li><li>JCache</li><li>Hazelcast</li><li>Infinispan</li><li>Couchbase</li><li>Caffeine</li></ul><h2 id="默认缓存simple" tabindex="-1"><a class="header-anchor" href="#默认缓存simple" aria-hidden="true">#</a> 默认缓存Simple</h2><p>Simple是SpringBoot内置的缓存解决方案，开箱即用。</p><h4 id="_1-依赖" tabindex="-1"><a class="header-anchor" href="#_1-依赖" aria-hidden="true">#</a> 1. 依赖</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-cache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-启用缓存" tabindex="-1"><a class="header-anchor" href="#_2-启用缓存" aria-hidden="true">#</a> 2. 启用缓存</h4><p>缓存功能需要在启动类上开启</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableCaching</span><span class="token comment">//开启缓存功能</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-使用缓存" tabindex="-1"><a class="header-anchor" href="#_3-使用缓存" aria-hidden="true">#</a> 3. 使用缓存</h4><p>缓存数据无需手动操作，是全自动的，只需要用注解在方法上开启，就可以决定方法return的数据是否缓存，以及以何种方式缓存。</p><ul><li>@Cacheable：对方法的返回值进行缓存，调用所修饰的方式时，先查看key里面是否有值，有值就不执行方法，直接返回缓存值；没值就执行方法，并将方法的return结果缓存。 <ul><li>value属性：缓存所在的空间；</li><li>key属性：缓存的键，一般设置为<code>#参数形参</code>的形式，这样key就是动态的了 <ul><li>比如形参是username，不同的用户掉用key就不同。</li></ul></li></ul></li><li>@CachePut：对方法的return结果进行缓存，且方法每次必被调用 <ul><li>参数同上</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//一个根据用户id获取用户地址的方法，对用户请求的地址进行缓存。</span>
<span class="token comment">//不同的用户使用不同的键缓存，不会覆盖</span>
<span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;address&quot;</span><span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token string">&quot;#uid&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token class-name">String</span> uid<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="案例-验证码" tabindex="-1"><a class="header-anchor" href="#案例-验证码" aria-hidden="true">#</a> 案例：验证码</h2><p>该案例是模拟验证码的流程，从而熟悉SpringBoot 内置Cache接口的用法以及缓存的工作机制。业务流程如下：</p><ul><li>请求验证码：向Controller发请求，输入手机号请求验证码</li><li>生成验证码：由于是模拟生成验证码，实际是返回的四位数字的随机数</li><li>缓存验证码：将验证码返回的同时进行缓存，以待进行核对 <ul><li>key就是手机号，一个手机号一个验证码</li><li>缓存方式是CachePut，一个手机号可以多次请求验证码，新的覆盖旧的</li></ul></li><li>检查验证码：发送核验验证码的请求（请求体是手机号和验证码），将请求体的值存入实体类中，然后根据请求的手机号取出缓存中的验证码，与请求体中的验证码进行比对。</li></ul><h5 id="_4-1-dto-实体类" tabindex="-1"><a class="header-anchor" href="#_4-1-dto-实体类" aria-hidden="true">#</a> 4.1 dto：实体类</h5><p>用来存储手机号和验证码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sgugo<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>dto</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SMSCode</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span>  tele<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span>  code<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-2-service-业务层接口和实现类" tabindex="-1"><a class="header-anchor" href="#_4-2-service-业务层接口和实现类" aria-hidden="true">#</a> 4.2 service：业务层接口和实现类</h5><p>共有两个业务方法：返回验证码和检查验证码</p><p>interface：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sgugo<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SMSCodeService</span> <span class="token punctuation">{</span>
    <span class="token comment">//根据手机号返回验证码</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span>  <span class="token function">sendCodeToSMS</span><span class="token punctuation">(</span><span class="token class-name">String</span> tele<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 检查验证码</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkCode</span><span class="token punctuation">(</span><span class="token class-name">SMSCode</span> smsCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>impl：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sgugo<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SMSCodeServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SMSCodeService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span> <span class="token comment">//注入工具类，使用工具类帮忙生成验证码和校验验证码</span>
    <span class="token keyword">private</span> <span class="token class-name">CodeUtils</span> codeUtils<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;smsCode&quot;</span><span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token string">&quot;#tele&quot;</span><span class="token punctuation">)</span>
    <span class="token comment">//根据请求的电话，生成验证码，然后缓存并返回</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sendCodeToSMS</span><span class="token punctuation">(</span><span class="token class-name">String</span> tele<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> codeUtils<span class="token punctuation">.</span><span class="token function">generator</span><span class="token punctuation">(</span>tele<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token annotation punctuation">@Override</span>
    <span class="token comment">//取出内存中的验证码与传递过来的验证码比对，如果相同，返回true</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkCode</span><span class="token punctuation">(</span><span class="token class-name">SMSCode</span> smsCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span>  code <span class="token operator">=</span> smsCode<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> cacheCode <span class="token operator">=</span> codeUtils<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>smsCode<span class="token punctuation">.</span><span class="token function">getTele</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">return</span> code<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cacheCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// @Cacheable(value=&quot;smsCode&quot;,key=&quot;#tele&quot;)</span>
    <span class="token comment">// public String get(String tele){</span>
    <span class="token comment">//     return null;</span>
    <span class="token comment">// }</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>？疑问：为什么不直接在业务代码里实现，而是要借助工具类呢？</p><p>因为缓存是通过注解生效的，且需要SpringBoot开启。如上面代码中的get方法，如果写在业务类中，将永远返回null，因为在Service层内部调用方法，不经过@Bean管理，此时缓存注解就不会生效。而sendCodeToSMS方法就可以直接使用缓存注解，因为该方法并没有在类中被掉用，而是被Controller通过@Bean管理的Service对象调用。</p></div><h5 id="_4-3-工具类" tabindex="-1"><a class="header-anchor" href="#_4-3-工具类" aria-hidden="true">#</a> 4.3 工具类</h5><p>该类用于使用算法生成验证码，以及获取缓存中的验证码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sgugo<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CodeUtils</span> <span class="token punctuation">{</span>

    <span class="token comment">//用一种算法，为不同的手机号模拟出不同的验证码，这里直接返回4位随机数</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span>  <span class="token function">generator</span><span class="token punctuation">(</span><span class="token class-name">String</span> tele<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">double</span> code <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//获取缓存中的验证码，有就返回，没有就返回null</span>
    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;smsCode&quot;</span><span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token string">&quot;#tele&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> tele<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-4-controller-web层代码" tabindex="-1"><a class="header-anchor" href="#_4-4-controller-web层代码" aria-hidden="true">#</a> 4.4 Controller：web层代码</h5><p>提供两个接口，地址一样，通过请求方式区分</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sgugo<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/sms&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SMSCodeController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">SMSCodeService</span> smsCodeService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token class-name">String</span> tele<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> smsCodeService<span class="token punctuation">.</span><span class="token function">sendCodeToSMS</span><span class="token punctuation">(</span>tele<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@PostMapping</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkCode</span><span class="token punctuation">(</span><span class="token class-name">SMSCode</span> smsCode<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//这里是用实体类接收参数的，注意参数与实体类中的变了名一致</span>
        <span class="token keyword">return</span> smsCodeService<span class="token punctuation">.</span><span class="token function">checkCode</span><span class="token punctuation">(</span>smsCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-5-使用测试" tabindex="-1"><a class="header-anchor" href="#_4-5-使用测试" aria-hidden="true">#</a> 4.5 使用测试</h5><ul><li>获取验证码：GET <code>http://localhost:8080/sms?tele=18888888888</code><ul><li>每请求一次就返回一个验证码，如：3799</li></ul></li><li>检测验证码：POST <code>http://localhost:8080/sms?tele=18888888888&amp;code=2964</code><ul><li>使用上次GET请求的手机号和返回的验证码为参数</li></ul></li></ul><h2 id="ehcache" tabindex="-1"><a class="header-anchor" href="#ehcache" aria-hidden="true">#</a> Ehcache</h2><p>Ehcache也是SpringBoot整合的缓存技术，和默认的Simple用法基本一样，只需引入Ehcache依赖，做一下简单的配置即可。</p><p>springboot整合缓存技术做的是<strong>通用格式</strong>，不管你整合哪种缓存技术，只是 实现 变化了，操作方式一样。这也体现出springboot技术的优点，统一同类技术的整合方式。</p><h4 id="_1-依赖-1" tabindex="-1"><a class="header-anchor" href="#_1-依赖-1" aria-hidden="true">#</a> 1. 依赖</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>net.sf.ehcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>ehcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-yml配置" tabindex="-1"><a class="header-anchor" href="#_2-yml配置" aria-hidden="true">#</a> 2. yml配置</h4><p>SpringBoot默认采取的是Simple缓存，需要在配置文件中更改缓存方式</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cache</span><span class="token punctuation">:</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> ehcache <span class="token comment"># 指定缓存方式，默认是Simple</span>
    <span class="token key atrule">ehcache</span><span class="token punctuation">:</span> <span class="token comment"># 可以对ehcache进一步配置，指定ehcache的配置文件</span>
      <span class="token key atrule">config</span><span class="token punctuation">:</span> ehcache.xml <span class="token comment"># 默认就是resource下的ehcache.xml，可以不配置</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>type的值都是固定的（idea会有提示），只用SpringBoot整合的技术才可以直接在这里更好服务商，没有被整合的不能这样更好，如：memcached就没被整合</p></div><h4 id="_3-ehcache-xml" tabindex="-1"><a class="header-anchor" href="#_3-ehcache-xml" aria-hidden="true">#</a> 3. ehcache.xml</h4><p>ehcaceh提供了更强大的缓存技术，有很多自定义缓存策略需要在配置文件中配置。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- file: resource/ehcache.xml --&gt;</span>
<span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ehcache</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>noNamespaceSchemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://ehcache.org/ehcache.xsd<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name">updateCheck</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>diskStore</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>D:\\ehcache<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

    <span class="token comment">&lt;!--默认缓存策略 --&gt;</span>
    <span class="token comment">&lt;!-- external：是否永久存在，设置为true则不会被清除，此时与timeout冲突，通常设置为false--&gt;</span>
    <span class="token comment">&lt;!-- diskPersistent：是否启用磁盘持久化--&gt;</span>
    <span class="token comment">&lt;!-- maxElementsInMemory：最大缓存数量--&gt;</span>
    <span class="token comment">&lt;!-- overflowToDisk：超过最大缓存数量是否持久化到磁盘--&gt;</span>
    <span class="token comment">&lt;!-- timeToIdleSeconds：最大不活动间隔，设置过长缓存容易溢出，设置过短无效果，可用于记录时效性数据，例如验证码--&gt;</span>
    <span class="token comment">&lt;!-- timeToLiveSeconds：最大存活时间--&gt;</span>
    <span class="token comment">&lt;!-- memoryStoreEvictionPolicy：缓存清除策略--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>defaultCache</span>
        <span class="token attr-name">eternal</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">diskPersistent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">maxElementsInMemory</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1000<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">overflowToDisk</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">timeToIdleSeconds</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>60<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">timeToLiveSeconds</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>60<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">memoryStoreEvictionPolicy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>LRU<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span>
        <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>smsCode<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">eternal</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">diskPersistent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">maxElementsInMemory</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1000<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">overflowToDisk</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">timeToIdleSeconds</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">timeToLiveSeconds</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">memoryStoreEvictionPolicy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>LRU<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ehcache</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不同的缓存策写在不同的Cache标签里。每个缓存策略（除了default）都有自己的name属性，该属性为缓存策略的命名空间。</p><p>使用缓存时指定的缓存空间，也同时匹配了缓存策略。</p><h4 id="_4-使用encache" tabindex="-1"><a class="header-anchor" href="#_4-使用encache" aria-hidden="true">#</a> 4. 使用encache</h4><p>代码基本不用变，就是要注意缓存空间要跟缓存策略里的name匹配。</p><p>Encache在功能上更强大，可以自定义很多策略，比如规定缓存到期时间，让缓存的验证码5分钟后失效（该策略仅在smsCode缓存空间生效）缓存空间轻松的隔离了各种缓存策略。</p><h4 id="_5-补充-缓存清除策略" tabindex="-1"><a class="header-anchor" href="#_5-补充-缓存清除策略" aria-hidden="true">#</a> 5. 补充：缓存清除策略</h4><p>上面的缓存策略配置里，缓存清除策略有以下四种：</p><ul><li>LRU：挑选最近最早使用的数据淘汰 <ul><li>比如一组数据中，最近20秒内访问时间离当前时间间隔最长的数据被淘汰</li></ul></li><li>LFU：挑选最近使用次数最少的数据淘汰 <ul><li>比如一组数据中，最近20秒内，被访问次数最少的被淘汰掉。</li></ul></li><li>TTL：将要过期的数据淘汰</li><li>RANDOM：随机淘汰</li></ul><p>注意LRU和LFU是不同的，一段时间内使用时间最早的数据，也有可能使用次数是最多的。</p><figure><img src="`+p+'" alt="5-2-2" tabindex="0" loading="lazy"><figcaption>5-2-2</figcaption></figure><h2 id="redis" tabindex="-1"><a class="header-anchor" href="#redis" aria-hidden="true">#</a> Redis</h2><h2 id="memcached" tabindex="-1"><a class="header-anchor" href="#memcached" aria-hidden="true">#</a> Memcached</h2><h2 id="jetcache" tabindex="-1"><a class="header-anchor" href="#jetcache" aria-hidden="true">#</a> Jetcache</h2><h2 id="j2cache" tabindex="-1"><a class="header-anchor" href="#j2cache" aria-hidden="true">#</a> J2cache</h2>',75),o=[l];function i(u,d){return a(),s("div",null,o)}const k=n(c,[["render",i],["__file","5-2.缓存技术.html.vue"]]);export{k as default};
