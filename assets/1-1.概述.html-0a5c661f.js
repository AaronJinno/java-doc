import{_ as a,o as i,c as e,e as t}from"./app-e2ee9004.js";const r="/java-doc/img/java/javaweb/1-1-1.jpg",d="/java-doc/img/java/javaweb/1-1-2.jpg",c="/java-doc/img/java/javaweb/1-1-3.jpg",n="/java-doc/img/java/javaweb/1-1-4.jpg",l={},h=t('<div class="hint-container tip"><p class="hint-container-title">提示</p><p>开发中，使用的是框架中的数据库操作方法，JDBC只用来了解底层。</p><p>框架中底层用的也是JDBC。</p><p>【本章内容：用来了解底层】</p></div><h4 id="_1-数据持久化" tabindex="-1"><a class="header-anchor" href="#_1-数据持久化" aria-hidden="true">#</a> 1. 数据持久化</h4><p>持久化(persistence)：把数据保存到可掉电式存储设备中以供之后使用。大多数情况下，特别是企业级应用，数据持久化意味着将内存中的数据保存到硬盘上加以”固化”，而持久化的实现过程大多通过各种关系数据库来完成。</p><figure><img src="'+r+'" alt="1-1-1" tabindex="0" loading="lazy"><figcaption>1-1-1</figcaption></figure><p>持久化的主要应用是将内存中的数据存储在关系型数据库中，当然也可以存储在磁盘文件、XML数据文件中。</p><h4 id="_2-java中的数据存储技术" tabindex="-1"><a class="header-anchor" href="#_2-java中的数据存储技术" aria-hidden="true">#</a> 2. Java中的数据存储技术</h4><p>在Java中，数据库存取技术可分为如下几类：</p><ul><li>JDBC直接访问数据库</li><li>JDO (Java Data Object )技术</li><li>第三方O/R工具，如Hibernate, Mybatis 等</li></ul><p>JDBC是java访问数据库的基石，JDO、Hibernate、MyBatis等只是更好的封装了JDBC。</p><h4 id="_3-jdbc介绍" tabindex="-1"><a class="header-anchor" href="#_3-jdbc介绍" aria-hidden="true">#</a> 3. JDBC介绍</h4><ul><li>JDBC(Java Database Connectivity)是一个独立于特定数据库管理系统、通用的SQL数据库存取和操作的公共接口（一组API），定义了用来访问数据库的标准Java类库，（java.sql,javax.sql）使用这些类库可以以一种标准的方法、方便地访问数据库资源。</li><li>JDBC为访问不同的数据库提供了一种统一的途径，为开发者屏蔽了一些细节问题。</li><li>JDBC的目标是使Java程序员使用JDBC可以连接任何提供了JDBC驱动程序（也就是接口的实现类）的数据库系统，这样就使得程序员无需对特定的数据库系统的特点有过多的了解，从而大大简化和加快了开发过程。</li></ul><h5 id="_3-1-没有jdbc-java程序访问数据库时是这样的" tabindex="-1"><a class="header-anchor" href="#_3-1-没有jdbc-java程序访问数据库时是这样的" aria-hidden="true">#</a> 3.1 没有JDBC，Java程序访问数据库时是这样的：</h5><figure><img src="'+d+'" alt="1-1-2" tabindex="0" loading="lazy"><figcaption>1-1-2</figcaption></figure><h5 id="_3-2-有了jdbc-java程序访问数据库时是这样的" tabindex="-1"><a class="header-anchor" href="#_3-2-有了jdbc-java程序访问数据库时是这样的" aria-hidden="true">#</a> 3.2 有了JDBC，Java程序访问数据库时是这样的：</h5><figure><img src="'+c+'" alt="1-1-3" tabindex="0" loading="lazy"><figcaption>1-1-3</figcaption></figure><h5 id="_3-3-总结" tabindex="-1"><a class="header-anchor" href="#_3-3-总结" aria-hidden="true">#</a> 3.3 总结</h5><p>一般选择使用JDBC来连接数据库，而不是直接操作数据库，这样Java程序的移植性更高，编写难度更低。</p><h4 id="_4-jdbc体系结构" tabindex="-1"><a class="header-anchor" href="#_4-jdbc体系结构" aria-hidden="true">#</a> 4. JDBC体系结构</h4><p>JDBC接口（API）包括两个层次：</p><ul><li>面向应用的API：Java API，抽象接口，供应用程序开发人员使用（连接数据库，执行SQL语句，获得结果），java程序员只需要面向这套接口编程即可。</li><li>面向数据库的API：Java Driver API，供开发商开发数据库驱动程序用。不同的数据库厂商，需要针对这套接口，提供不同实现。不同的实现的集合，即为不同数据库的驱动。</li></ul><h4 id="_5-jdbc程序编写步骤" tabindex="-1"><a class="header-anchor" href="#_5-jdbc程序编写步骤" aria-hidden="true">#</a> 5. JDBC程序编写步骤</h4><figure><img src="'+n+'" alt="1-1-4" tabindex="0" loading="lazy"><figcaption>1-1-4</figcaption></figure>',22),s=[h];function o(_,p){return i(),e("div",null,s)}const j=a(l,[["render",o],["__file","1-1.概述.html.vue"]]);export{j as default};
