import{_ as n,o as a,c as s,e}from"./app-2f916dc9.js";const t={},p=e(`<h2 id="i-域对象" tabindex="-1"><a class="header-anchor" href="#i-域对象" aria-hidden="true">#</a> Ⅰ. 域对象</h2><h4 id="_1-概念" tabindex="-1"><a class="header-anchor" href="#_1-概念" aria-hidden="true">#</a> 1. 概念</h4><p>域对象就是一个有作用范围的对象，可以在范围内共享数据。</p><p>JavaWeb中有四大域对象，分别表示四个范围，在范围内数据可以共享。</p><p>之所以他们是域对象，原因是他们都内置了map集合，都有setAttribute和getAttribute方法。</p><h4 id="_2-page域对象" tabindex="-1"><a class="header-anchor" href="#_2-page域对象" aria-hidden="true">#</a> 2. page域对象</h4><p>该域对象是JSP中的。</p><p>作用域是一个页面，不同页面无法共享域中的数据。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//我们在page1.jsp中存值。</span>
pageContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//我们在page1.jsp中取值：此时可以取到值</span>
pageContext域：<span class="token operator">&lt;</span><span class="token operator">%=</span>pageContext<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>br<span class="token punctuation">&gt;</span></span>

<span class="token comment">//定义一个page2.jsp，按照相同的方法取值：此时无法取值</span>
pageContext域：<span class="token operator">&lt;</span><span class="token operator">%=</span>pageContext<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>br<span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：该域对象仅在JSP中有用，对于前后端分离项目，是没有page域对象的。</p><h4 id="_3-request域对象" tabindex="-1"><a class="header-anchor" href="#_3-request域对象" aria-hidden="true">#</a> 3. Request域对象</h4><p>Servlet中的Request请求对象（常用HttpServlet），同时也是Request域对象。</p><p>作用域是一次请求，请求转发也是可以共享数据的。</p><h5 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h5><ul><li>当请求来时创建request对象</li><li>当请求结束时，request就销毁。</li><li>每次请求都是一个新的request对象。</li></ul><h4 id="_4-session域对象" tabindex="-1"><a class="header-anchor" href="#_4-session域对象" aria-hidden="true">#</a> 4. Session域对象</h4><p>在服务器端通过request.getSession()创建Session对象，就可以实现Session域了。</p><p>作用域是一次会话，关闭浏览器数据就会丢失，如果会话不中断，所有页面都可以获取session中的数据。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在同一服务器上不同的request请求是会得到唯一的session。</p><h5 id="生命周期-1" tabindex="-1"><a class="header-anchor" href="#生命周期-1" aria-hidden="true">#</a> 生命周期</h5><p>在第一次调用request.getSession()方法时，服务器会检查是否已经有对应的session，如果没有就在内存中创建一个session并返回。</p><ul><li>当一段时间内session没有被使用（默认为30分钟），则服务器会销毁该session。</li><li>如果服务器非正常关闭，没有到期的session也会跟着销毁。</li><li>如果调用session提供的invalidate()，可以立即销毁session。</li><li>浏览器关闭，会话结束，Session也会消失（储存SessionID的Cookie没有了</li></ul><h4 id="_5-application域对象" tabindex="-1"><a class="header-anchor" href="#_5-application域对象" aria-hidden="true">#</a> 5. Application域对象</h4><p>在Servlet中有一个ServletContext对象，该对象代表了整个web应用（Application）。<br> 详见：ServletContext。</p><h4 id="_6-域对象共有的方法" tabindex="-1"><a class="header-anchor" href="#_6-域对象共有的方法" aria-hidden="true">#</a> 6. 域对象共有的方法</h4><ul><li>setAttribute(name,value)：存储数据</li><li>getAttribute(name)：根据那么获取对应数据值</li><li>removeAttribute(name)：根据name删除数据</li></ul><h2 id="ii-servletcontext" tabindex="-1"><a class="header-anchor" href="#ii-servletcontext" aria-hidden="true">#</a> Ⅱ. ServletContext</h2><h4 id="_1-概念-1" tabindex="-1"><a class="header-anchor" href="#_1-概念-1" aria-hidden="true">#</a> 1. 概念</h4><p>ServletContext对象代表了整个web应用，可以和程序的容器(Tomcat)来通信。</p><p>该对象会在Tomcat启动时创建。</p><h4 id="_2-主要功能" tabindex="-1"><a class="header-anchor" href="#_2-主要功能" aria-hidden="true">#</a> 2. 主要功能</h4><ul><li>获取MIME类型</li><li>域对象：共享数据</li><li>获取文件的真实（服务器）路径</li></ul><h4 id="_3-获取servletcontext对象" tabindex="-1"><a class="header-anchor" href="#_3-获取servletcontext对象" aria-hidden="true">#</a> 3. 获取ServletContext对象</h4><p>可以通过以下两种方式获取，这两种方式获取的是同一个对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ServletContext</span> servletContext1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过Request对象获取</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ServletContext</span> <span class="token class-name">ServletRequest</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过HttpServlet</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ServletContext</span> <span class="token class-name">HttpServlet</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-获取mime类型" tabindex="-1"><a class="header-anchor" href="#_4-获取mime类型" aria-hidden="true">#</a> 4. 获取MIME类型</h4><h5 id="_4-1-mime类型" tabindex="-1"><a class="header-anchor" href="#_4-1-mime类型" aria-hidden="true">#</a> 4.1 MIME类型</h5><p>在互联网通信过程中定义的一种文件数据类型</p><ul><li>格式为：大类型/小类型</li><li>如：text/html(文本/html)； image/jpeg(图片类型/jpeg格式)</li></ul><h5 id="_4-2-底层" tabindex="-1"><a class="header-anchor" href="#_4-2-底层" aria-hidden="true">#</a> 4.2 底层</h5><p>在Tomcat服务器的一个配置文件（ tomcat/conf/web.xml）中，记录了所有的文件的扩展名和和mime类型的对应关系。而ServletContext对象是可以直接跟Tomcat通信的，因此可以使用ServletContext获取指定文件的MIME类型（通过扩展名）。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//web.xml:足有4千行代码记录对照关系</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">&lt;</span>mime<span class="token operator">-</span>mapping<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>extension<span class="token punctuation">&gt;</span></span>m4a<span class="token operator">&lt;</span><span class="token operator">/</span>extension<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>mime<span class="token operator">-</span>type<span class="token operator">&gt;</span>audio<span class="token operator">/</span>mp4<span class="token operator">&lt;</span><span class="token operator">/</span>mime<span class="token operator">-</span>type<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>mime<span class="token operator">-</span>mapping<span class="token operator">&gt;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-3-getmimetype-string-file-获取文件类型" tabindex="-1"><a class="header-anchor" href="#_4-3-getmimetype-string-file-获取文件类型" aria-hidden="true">#</a> 4.3 getMimeType(String file)：获取文件类型</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">ServletContext</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> filename <span class="token operator">=</span> <span class="token string">&quot;a.jpg&quot;</span><span class="token punctuation">;</span><span class="token comment">//自定义一个文件名用来测试</span>
    <span class="token class-name">String</span> mimeType <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getMimeType</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//image/jpeg</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-4-局限性" tabindex="-1"><a class="header-anchor" href="#_4-4-局限性" aria-hidden="true">#</a> 4.4 局限性</h5><p>该方法是通过后缀名获取文件类型的，而后缀名可以随便定义。</p><p>因此获取的mime类型并不是很准确，只能做初步的筛选和使用。</p><h4 id="_5-作为域对象" tabindex="-1"><a class="header-anchor" href="#_5-作为域对象" aria-hidden="true">#</a> 5. 作为域对象</h4><p>一个有作用范围的对象，可以在范围内共享数据。</p><p>和request对象一样，其方法也一样（域对象都有相同的三个方法）。</p><h5 id="_5-1-域的范围" tabindex="-1"><a class="header-anchor" href="#_5-1-域的范围" aria-hidden="true">#</a> 5.1 域的范围</h5><ul><li>最大范围：所有用户的所有请求数据，任何地方都可以保存，任何地方都能获取。</li><li>可以理解为：全局变量。</li><li>注意：由于所有用户都可以创建和使用，且常驻内存，直到服务器关闭，因此要谨慎使用。[ 比如可以储存access_token ]</li></ul><h5 id="_5-2-方法" tabindex="-1"><a class="header-anchor" href="#_5-2-方法" aria-hidden="true">#</a> 5.2 方法：</h5><ul><li>setAttribute(String name,Object value)：设置k-v数据</li><li>getAttribute(String name)：通过k获取v</li><li>removeAttribute(String name)：通过k移除k-v</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">ServletContext</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Object</span> num <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;top&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;top&quot;</span><span class="token punctuation">,</span>num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-获取文件服务器路径" tabindex="-1"><a class="header-anchor" href="#_6-获取文件服务器路径" aria-hidden="true">#</a> 6. 获取文件服务器路径</h4><p>这里的路径指的是部署到 Tomcat上的资源和编译后的java类路径，而不是工作空间里的路径。</p><h5 id="_6-1-getrealpath" tabindex="-1"><a class="header-anchor" href="#_6-1-getrealpath" aria-hidden="true">#</a> 6.1 getRealPath()</h5><p>参数：参数就是文件的路径（指的是工作目录下的路径）。</p><p>该方法的作用就是通过工作目录下的路径，获取其真正部署后的路径。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token class-name">ServletContext</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_6-2-文件的工作路径" tabindex="-1"><a class="header-anchor" href="#_6-2-文件的工作路径" aria-hidden="true">#</a> 6.2 文件的工作路径</h5><p>文件可能存在于以下三个地方</p><ul><li>web目录下： / 就代表了web目录下，</li><li>WEB-INF目录：WEB-INF目录也在web目录下，因此直接使用/WEB-INF表示</li><li>src目录：/ （根目录）表示的是web目录，而src不再web目录下，访问src目录的路径为：/WEB-INF/classes/a.jpg（classes默认是编译后的java文件目录）</li></ul><h5 id="_6-3-示例" tabindex="-1"><a class="header-anchor" href="#_6-3-示例" aria-hidden="true">#</a> 6.3 示例</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">ServletContext</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 获取文件的服务器路径</span>
    <span class="token class-name">String</span> b <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">&quot;/b.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//web目录下资源访问</span>

    <span class="token comment">//WEB-INF目录下的资源访问</span>
    <span class="token class-name">String</span> c <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">&quot;/WEB-INF/c.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//src目录下的资源访问</span>
    <span class="token class-name">String</span> a <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">&quot;/WEB-INF/classes/a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,71),o=[p];function i(c,l){return a(),s("div",null,o)}const u=n(t,[["render",i],["__file","3-9.域对象.html.vue"]]);export{u as default};
