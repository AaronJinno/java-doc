import{_ as a,o as n,c as s,e}from"./app-cd3300e3.js";const t={},i=e(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>此处将列举JDK所有内置的函数式接口。<br> JDK一共内置了43个函数式接口，包含了所有可能的情况。</p><p>位置：rt.jar&gt;java&gt;util&gt;function 【dir】</p></div><h2 id="〇-核心functional" tabindex="-1"><a class="header-anchor" href="#〇-核心functional" aria-hidden="true">#</a> 〇. 核心Functional</h2><p>43中函数式接口都是这四种接口的变形。</p><h4 id="_1-consumer" tabindex="-1"><a class="header-anchor" href="#_1-consumer" aria-hidden="true">#</a> 1. Consumer</h4><p>消费型：提供一个参数，什么都不返回：参数被消耗了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-supplier" tabindex="-1"><a class="header-anchor" href="#_2-supplier" aria-hidden="true">#</a> 2. Supplier</h4><p>供给型：不提供参数，返回了一个值：供给了一个值。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>
    <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-function" tabindex="-1"><a class="header-anchor" href="#_3-function" aria-hidden="true">#</a> 3. Function</h4><p>函数型：提供参数，参数类型是对象T，返回值类型是对象R。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>
    <span class="token class-name">R</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-predicate" tabindex="-1"><a class="header-anchor" href="#_4-predicate" aria-hidden="true">#</a> 4. Predicate</h4><p>断定型：提供一个参数，进行判断，返回boolean：进行一些参数的断定</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>
   <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="i-xxxconsumer" tabindex="-1"><a class="header-anchor" href="#i-xxxconsumer" aria-hidden="true">#</a> Ⅰ. XxxConsumer</h2><p>消费型Functional，接受参数，并不返回任何结果、</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>TBD</p></div><h2 id="ii-xxxsupplier" tabindex="-1"><a class="header-anchor" href="#ii-xxxsupplier" aria-hidden="true">#</a> Ⅱ. XxxSupplier</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>TBD</p></div><h2 id="iii-xxxfucntion" tabindex="-1"><a class="header-anchor" href="#iii-xxxfucntion" aria-hidden="true">#</a> Ⅲ. XxxFucntion</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>TBD</p></div><h2 id="iv-xxxpredicate" tabindex="-1"><a class="header-anchor" href="#iv-xxxpredicate" aria-hidden="true">#</a> Ⅳ. XxxPredicate</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>TBD</p></div><h2 id="v-xxxoperator" tabindex="-1"><a class="header-anchor" href="#v-xxxoperator" aria-hidden="true">#</a> Ⅴ. XxxOperator</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>TBD</p></div>`,26),c=[i];function p(l,o){return n(),s("div",null,c)}const d=a(t,[["render",p],["__file","2-5.Functional.html.vue"]]);export{d as default};
